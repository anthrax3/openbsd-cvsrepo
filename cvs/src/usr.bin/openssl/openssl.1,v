head	1.84;
access;
symbols
	OPENBSD_6_1:1.84.0.4
	OPENBSD_6_1_BASE:1.84
	OPENBSD_6_0:1.40.0.2
	OPENBSD_6_0_BASE:1.40
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13;
locks; strict;
comment	@.\" @;


1.84
date	2017.01.03.22.14.41;	author jmc;	state Exp;
branches;
next	1.83;
commitid	UAFFXwZABUdyxaJd;

1.83
date	2016.10.06.14.47.00;	author naddy;	state Exp;
branches;
next	1.82;
commitid	cHY8YV3fJ2DVk7sE;

1.82
date	2016.09.22.19.17.17;	author jmc;	state Exp;
branches;
next	1.81;
commitid	XAXy6Ok8oqylHNoY;

1.81
date	2016.09.22.13.44.02;	author jmc;	state Exp;
branches;
next	1.80;
commitid	qIMExrfiL6hI879J;

1.80
date	2016.09.22.13.30.49;	author jmc;	state Exp;
branches;
next	1.79;
commitid	i3DaxZjtI2s3vLaM;

1.79
date	2016.09.20.16.45.38;	author jmc;	state Exp;
branches;
next	1.78;
commitid	hyvd17Xbx4GkbHDp;

1.78
date	2016.09.20.16.40.05;	author jmc;	state Exp;
branches;
next	1.77;
commitid	eTyU7mPUuXhP292J;

1.77
date	2016.09.19.12.57.45;	author jmc;	state Exp;
branches;
next	1.76;
commitid	NwakAT9MptWvv1UN;

1.76
date	2016.09.19.12.55.04;	author jmc;	state Exp;
branches;
next	1.75;
commitid	w0hzTf2WiScJAl7m;

1.75
date	2016.09.17.15.10.50;	author deraadt;	state Exp;
branches;
next	1.74;
commitid	HWc6mTKIjHwSHIDM;

1.74
date	2016.09.15.20.57.07;	author jmc;	state Exp;
branches;
next	1.73;
commitid	101RKUiyPxOyCoFJ;

1.73
date	2016.09.15.20.54.28;	author jmc;	state Exp;
branches;
next	1.72;
commitid	itly7by1mpxTnlG4;

1.72
date	2016.09.15.17.49.03;	author jmc;	state Exp;
branches;
next	1.71;
commitid	gFN2ca9wL933ZjJF;

1.71
date	2016.09.12.13.34.12;	author jmc;	state Exp;
branches;
next	1.70;
commitid	IWEiuvEzshH58VQu;

1.70
date	2016.09.08.18.24.08;	author jmc;	state Exp;
branches;
next	1.69;
commitid	wkelup9JRn0qId1J;

1.69
date	2016.09.04.19.38.51;	author jmc;	state Exp;
branches;
next	1.68;
commitid	cu0OtqATQSZn6Nnq;

1.68
date	2016.09.03.13.26.55;	author jmc;	state Exp;
branches;
next	1.67;
commitid	VRfIHF0LEBaSmkDj;

1.67
date	2016.09.02.18.43.52;	author jmc;	state Exp;
branches;
next	1.66;
commitid	rPAax9asRLi2rtbj;

1.66
date	2016.09.01.08.26.44;	author jmc;	state Exp;
branches;
next	1.65;
commitid	Sa6tgFTCAAVzVaie;

1.65
date	2016.08.30.07.53.59;	author jmc;	state Exp;
branches;
next	1.64;
commitid	MvzsP3ajyy0GVckE;

1.64
date	2016.08.28.19.34.15;	author jmc;	state Exp;
branches;
next	1.63;
commitid	UjC8UwVSOnJDdhxC;

1.63
date	2016.08.27.20.43.05;	author jmc;	state Exp;
branches;
next	1.62;
commitid	PGfBBYAGfzTGZtQE;

1.62
date	2016.08.25.14.37.28;	author jmc;	state Exp;
branches;
next	1.61;
commitid	pkLxM6gmGmbcsEpx;

1.61
date	2016.08.24.08.17.24;	author jmc;	state Exp;
branches;
next	1.60;
commitid	1j5mipYQqbvMUj7Z;

1.60
date	2016.08.24.08.07.33;	author jmc;	state Exp;
branches;
next	1.59;
commitid	S4ogvd3EiFpPcQC4;

1.59
date	2016.08.23.18.54.04;	author jmc;	state Exp;
branches;
next	1.58;
commitid	ANfBoxnnjNNljsvt;

1.58
date	2016.08.22.13.39.52;	author jmc;	state Exp;
branches;
next	1.57;
commitid	eE7f3jO8dkwW0xrb;

1.57
date	2016.08.20.12.54.49;	author jmc;	state Exp;
branches;
next	1.56;
commitid	QHUA9DIG8X7bBEqS;

1.56
date	2016.08.20.07.56.09;	author jmc;	state Exp;
branches;
next	1.55;
commitid	wB36iXtVuOjW1izg;

1.55
date	2016.08.19.08.46.38;	author jmc;	state Exp;
branches;
next	1.54;
commitid	ys3J2g0gIcHb5wgF;

1.54
date	2016.08.18.12.07.21;	author jmc;	state Exp;
branches;
next	1.53;
commitid	BHPusOERiV1HZnDJ;

1.53
date	2016.08.16.06.40.24;	author jmc;	state Exp;
branches;
next	1.52;
commitid	P52jJ7KemJQBmUrX;

1.52
date	2016.08.14.09.02.52;	author jmc;	state Exp;
branches;
next	1.51;
commitid	Hla08ikRWVFkRMnw;

1.51
date	2016.08.13.18.23.39;	author jmc;	state Exp;
branches;
next	1.50;
commitid	8Co9DAyzl8StikXH;

1.50
date	2016.08.12.06.21.12;	author jmc;	state Exp;
branches;
next	1.49;
commitid	zKU2hWH81lUbkwta;

1.49
date	2016.08.12.06.17.22;	author jmc;	state Exp;
branches;
next	1.48;
commitid	oYjzFFpPoxpQ5hIm;

1.48
date	2016.08.10.17.41.08;	author jmc;	state Exp;
branches;
next	1.47;
commitid	5SYnwdLNbCYlJR9v;

1.47
date	2016.08.09.17.07.33;	author jmc;	state Exp;
branches;
next	1.46;
commitid	C2EpKyCd9OTvhuTi;

1.46
date	2016.08.08.18.13.51;	author jmc;	state Exp;
branches;
next	1.45;
commitid	DDViYPp5Vj4KS1Nm;

1.45
date	2016.08.05.08.12.12;	author jmc;	state Exp;
branches;
next	1.44;
commitid	HWt9dkAFDVUQlcC2;

1.44
date	2016.08.03.06.43.21;	author jmc;	state Exp;
branches;
next	1.43;
commitid	kTN4EgmzzgQsE6Ix;

1.43
date	2016.08.01.07.23.29;	author jmc;	state Exp;
branches;
next	1.42;
commitid	2AFnzWGyKAqiTTag;

1.42
date	2016.07.28.16.22.06;	author jmc;	state Exp;
branches;
next	1.41;
commitid	Fil1AydRTaOP1gxR;

1.41
date	2016.07.28.16.20.21;	author jmc;	state Exp;
branches;
next	1.40;
commitid	k7lBANKuLi5Oo51o;

1.40
date	2016.07.23.19.31.35;	author jmc;	state Exp;
branches;
next	1.39;
commitid	feMdPY9RWCxiMg1C;

1.39
date	2016.07.21.18.40.26;	author jmc;	state Exp;
branches;
next	1.38;
commitid	rk5inUObNvJ5Pl5H;

1.38
date	2016.07.21.18.33.27;	author jmc;	state Exp;
branches;
next	1.37;
commitid	i8DwrNrk7yBjDwKW;

1.37
date	2016.07.21.16.34.08;	author jmc;	state Exp;
branches;
next	1.36;
commitid	tnuISJ9SHUH7b5vk;

1.36
date	2016.07.20.14.42.03;	author jmc;	state Exp;
branches;
next	1.35;
commitid	mdd9TVpw1eXeXZhd;

1.35
date	2016.07.19.20.02.47;	author jmc;	state Exp;
branches;
next	1.34;
commitid	Ga8Sf9H0dtFZeo7K;

1.34
date	2016.07.17.16.33.17;	author jmc;	state Exp;
branches;
next	1.33;
commitid	7U1fvohw9slFeIZ3;

1.33
date	2016.07.16.07.27.53;	author jmc;	state Exp;
branches;
next	1.32;
commitid	I3ODQ5wmAfI2vPei;

1.32
date	2016.02.12.13.03.19;	author jmc;	state Exp;
branches;
next	1.31;
commitid	yxlX1RigGAnHfuX0;

1.31
date	2016.02.08.19.29.57;	author jmc;	state Exp;
branches;
next	1.30;
commitid	HQfNKKjV3yeHcUfI;

1.30
date	2015.12.24.16.54.37;	author mmcc;	state Exp;
branches;
next	1.29;
commitid	52DQs4TJie3OmFZq;

1.29
date	2015.09.21.13.13.06;	author bcook;	state Exp;
branches;
next	1.28;
commitid	2HDZg94kB8HjXScp;

1.28
date	2015.09.14.01.45.03;	author doug;	state Exp;
branches;
next	1.27;
commitid	WI3ltGMbnAaZXz3O;

1.27
date	2015.09.13.23.36.21;	author doug;	state Exp;
branches;
next	1.26;
commitid	4CxCgJZcnC9PKUvF;

1.26
date	2015.09.13.17.57.11;	author jmc;	state Exp;
branches;
next	1.25;
commitid	mvyoIJ08sSM7V0z1;

1.25
date	2015.09.13.12.34.27;	author bcook;	state Exp;
branches;
next	1.24;
commitid	uPPBYjTbKGOJvL7B;

1.24
date	2015.09.13.07.54.05;	author jmc;	state Exp;
branches;
next	1.23;
commitid	bd6GIMwHyoKnAN2k;

1.23
date	2015.09.12.19.34.07;	author lteo;	state Exp;
branches;
next	1.22;
commitid	SMS1IgrNii8rTZkx;

1.22
date	2015.09.11.14.30.23;	author bcook;	state Exp;
branches;
next	1.21;
commitid	erFqA80i5nzJClSk;

1.21
date	2015.09.11.06.43.05;	author jmc;	state Exp;
branches;
next	1.20;
commitid	RK7kw38OLkvddF3i;

1.20
date	2015.09.11.02.10.32;	author lteo;	state Exp;
branches;
next	1.19;
commitid	yqqQPRlvetvsoTZF;

1.19
date	2015.08.11.05.01.03;	author landry;	state Exp;
branches;
next	1.18;
commitid	PULKLtehcrSM9SIB;

1.18
date	2015.08.02.12.43.44;	author jmc;	state Exp;
branches;
next	1.17;
commitid	a7TnTwRbfFf35uAg;

1.17
date	2015.07.27.17.28.39;	author sobrado;	state Exp;
branches;
next	1.16;
commitid	a73SHFfjDK7MTyGx;

1.16
date	2015.07.08.16.37.25;	author sthen;	state Exp;
branches;
next	1.15;
commitid	dvs7YNVySM8LDD96;

1.15
date	2015.06.20.01.07.25;	author doug;	state Exp;
branches;
next	1.14;
commitid	odUD1eZ4N02tuzg5;

1.14
date	2015.06.18.11.38.41;	author jmc;	state Exp;
branches;
next	1.13;
commitid	9nvKTBThbScXXOMO;

1.13
date	2015.02.28.21.51.56;	author bentley;	state Exp;
branches;
next	1.12;
commitid	NNu2UZnsd5zmNVYD;

1.12
date	2015.02.15.22.26.45;	author bentley;	state Exp;
branches;
next	1.11;
commitid	szmpRDHaqpG6RctM;

1.11
date	2015.01.13.14.09.54;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	kAxhXhaWRYnlwiKQ;

1.10
date	2015.01.05.03.54.55;	author lteo;	state Exp;
branches;
next	1.9;
commitid	drStWuL5ubJJ2RI4;

1.9
date	2014.12.24.03.22.17;	author lteo;	state Exp;
branches;
next	1.8;
commitid	sQzwBnoYmwNpDW4K;

1.8
date	2014.12.19.03.58.02;	author lteo;	state Exp;
branches;
next	1.7;
commitid	FDsrFzHsgKF1YVsa;

1.7
date	2014.12.19.03.14.19;	author lteo;	state Exp;
branches;
next	1.6;
commitid	vtTkvXxFlXvoEp9t;

1.6
date	2014.11.23.04.49.46;	author guenther;	state Exp;
branches;
next	1.5;
commitid	QMjqjlCEmuVHVA8A;

1.5
date	2014.11.07.13.13.08;	author jsing;	state Exp;
branches;
next	1.4;
commitid	JWy4f7CLDqqG0d35;

1.4
date	2014.10.01.13.15.40;	author sthen;	state Exp;
branches;
next	1.3;
commitid	xCn3CyBApqVPYSjl;

1.3
date	2014.09.16.16.05.44;	author jmc;	state Exp;
branches;
next	1.2;
commitid	8Gimqg3hrQwm9Qh1;

1.2
date	2014.08.26.20.03.31;	author robert;	state Exp;
branches;
next	1.1;
commitid	0N4tl7kab9mwJF7M;

1.1
date	2014.08.26.17.47.24;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.84
log
@consistently spell ASN.1;
@
text
@.\" $OpenBSD: openssl.1,v 1.83 2016/10/06 14:47:00 naddy Exp $
.\" ====================================================================
.\" Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\" ====================================================================
.\"
.\" This product includes cryptographic software written by Eric Young
.\" (eay@@cryptsoft.com).  This product includes software written by Tim
.\" Hudson (tjh@@cryptsoft.com).
.\"
.\"
.\" Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
.\" All rights reserved.
.\"
.\" This package is an SSL implementation written
.\" by Eric Young (eay@@cryptsoft.com).
.\" The implementation was written so as to conform with Netscapes SSL.
.\"
.\" This library is free for commercial and non-commercial use as long as
.\" the following conditions are aheared to.  The following conditions
.\" apply to all code found in this distribution, be it the RC4, RSA,
.\" lhash, DES, etc., code; not just the SSL code.  The SSL documentation
.\" included with this distribution is covered by the same copyright terms
.\" except that the holder is Tim Hudson (tjh@@cryptsoft.com).
.\"
.\" Copyright remains Eric Young's, and as such any Copyright notices in
.\" the code are not to be removed.
.\" If this package is used in a product, Eric Young should be given attribution
.\" as the author of the parts of the library used.
.\" This can be in the form of a textual message at program startup or
.\" in documentation (online or textual) provided with the package.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"    "This product includes cryptographic software written by
.\"     Eric Young (eay@@cryptsoft.com)"
.\"    The word 'cryptographic' can be left out if the rouines from the library
.\"    being used are not cryptographic related :-).
.\" 4. If you include any Windows specific code (or a derivative thereof) from
.\"    the apps directory (application code) you must include an
.\"    acknowledgement:
.\"    "This product includes software written by Tim Hudson
.\"     (tjh@@cryptsoft.com)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" The licence and distribution terms for any publically available version or
.\" derivative of this code cannot be changed.  i.e. this code cannot simply be
.\" copied and put under another distribution licence
.\" [including the GNU Public Licence.]
.\"
.\" OPENSSL
.\"
.Dd $Mdocdate: October 6 2016 $
.Dt OPENSSL 1
.Os
.Sh NAME
.Nm openssl
.Nd OpenSSL command line tool
.Sh SYNOPSIS
.Nm
.Cm command
.Op Ar command_opts
.Op Ar command_args
.Pp
.Nm
.Cm list-standard-commands |
.Cm list-message-digest-commands |
.Cm list-cipher-commands |
.Cm list-cipher-algorithms |
.Cm list-message-digest-algorithms |
.Cm list-public-key-algorithms
.Pp
.Nm
.Cm no- Ns Ar command
.Sh DESCRIPTION
.Nm OpenSSL
is a cryptography toolkit implementing the
Transport Layer Security
.Pq TLS v1
network protocol,
as well as related cryptography standards.
.Pp
The
.Nm
program is a command line tool for using the various
cryptography functions of
.Nm openssl Ns 's
crypto library from the shell.
.Pp
The pseudo-commands
.Cm list-standard-commands , list-message-digest-commands ,
and
.Cm list-cipher-commands
output a list
.Pq one entry per line
of the names of all standard commands, message digest commands,
or cipher commands, respectively, that are available in the present
.Nm
utility.
.Pp
The pseudo-commands
.Cm list-cipher-algorithms
and
.Cm list-message-digest-algorithms
list all cipher and message digest names,
one entry per line.
Aliases are listed as:
.Pp
.D1 from => to
.Pp
The pseudo-command
.Cm list-public-key-algorithms
lists all supported public key algorithms.
.Pp
The pseudo-command
.Cm no- Ns Ar command
tests whether a command of the
specified name is available.
If
.Ar command
does not exist,
it returns 0
and prints
.Cm no- Ns Ar command ;
otherwise it returns 1 and prints
.Ar command .
In both cases, the output goes to stdout and nothing is printed to stderr.
Additional command line arguments are always ignored.
Since for each cipher there is a command of the same name,
this provides an easy way for shell scripts to test for the
availability of ciphers in the
.Nm
program.
.Pp
.Sy Note :
.Cm no- Ns Ar command
is not able to detect pseudo-commands such as
.Cm quit ,
.Cm list- Ns Ar ... Ns Cm -commands ,
or
.Cm no- Ns Ar command
itself.
.Sh ASN1PARSE
.nr nS 1
.Nm "openssl asn1parse"
.Op Fl i
.Op Fl dlimit Ar number
.Op Fl dump
.Op Fl genconf Ar file
.Op Fl genstr Ar str
.Op Fl in Ar file
.Op Fl inform Cm der | pem | txt
.Op Fl length Ar number
.Op Fl noout
.Op Fl offset Ar number
.Op Fl oid Ar file
.Op Fl out Ar file
.Op Fl strparse Ar offset
.nr nS 0
.Pp
The
.Nm asn1parse
command is a diagnostic utility that can parse ASN.1 structures.
It can also be used to extract data from ASN.1 formatted data.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl dlimit Ar number
Dump the first
.Ar number
bytes of unknown data in hex form.
.It Fl dump
Dump unknown data in hex form.
.It Fl genconf Ar file , Fl genstr Ar str
Generate encoded data based on string
.Ar str ,
file
.Ar file ,
or both, using the format described in
.Xr ASN1_generate_nconf 3 .
If only
.Ar file
is present then the string is obtained from the default section
using the name
.Dq asn1 .
The encoded data is passed through the ASN.1 parser and printed out as
though it came from a file;
the contents can thus be examined and written to a file using the
.Fl out
option.
.It Fl i
Indent the output according to the
.Qq depth
of the structures.
.It Fl in Ar file
The input file to read from, or standard input if not specified.
.It Fl inform Cm der | pem | txt
The input format.
.It Fl length Ar number
Number of bytes to parse; the default is until end of file.
.It Fl noout
Do not output the parsed version of the input file.
.It Fl offset Ar number
Starting offset to begin parsing; the default is start of file.
.It Fl oid Ar file
A file containing additional object identifiers
.Pq OIDs .
If an OID
.Pq object identifier
is not part of
.Nm openssl Ns 's
internal table it will be represented in
numerical form
.Pq for example 1.2.3.4 .
.Pp
Each line consists of three columns:
the first column is the OID in numerical format and should be followed by
whitespace.
The second column is the
.Qq short name ,
which is a single word followed by whitespace.
The final column is the rest of the line and is the
.Qq long name .
.Nm asn1parse
displays the long name.
.It Fl out Ar file
The DER-encoded output file; the default is no encoded output
(useful when combined with
.Fl strparse ) .
.It Fl strparse Ar offset
Parse the content octets of the ASN.1 object starting at
.Ar offset .
This option can be used multiple times to
.Qq drill down
into a nested structure.
.El
.Sh CA
.nr nS 1
.Nm "openssl ca"
.Op Fl batch
.Op Fl cert Ar file
.Op Fl config Ar file
.Op Fl crl_CA_compromise Ar time
.Op Fl crl_compromise Ar time
.Op Fl crl_hold Ar instruction
.Op Fl crl_reason Ar reason
.Op Fl crldays Ar days
.Op Fl crlexts Ar section
.Op Fl crlhours Ar hours
.Op Fl days Ar arg
.Op Fl enddate Ar date
.Op Fl extensions Ar section
.Op Fl extfile Ar section
.Op Fl gencrl
.Op Fl in Ar file
.Op Fl infiles
.Op Fl key Ar keyfile
.Op Fl keyfile Ar arg
.Op Fl keyform Ar pem
.Op Fl md Ar arg
.Op Fl msie_hack
.Op Fl name Ar section
.Op Fl noemailDN
.Op Fl notext
.Op Fl out Ar file
.Op Fl outdir Ar dir
.Op Fl passin Ar arg
.Op Fl policy Ar arg
.Op Fl preserveDN
.Op Fl revoke Ar file
.Op Fl spkac Ar file
.Op Fl ss_cert Ar file
.Op Fl startdate Ar date
.Op Fl status Ar serial
.Op Fl subj Ar arg
.Op Fl updatedb
.Op Fl verbose
.nr nS 0
.Pp
The
.Nm ca
command is a minimal certificate authority (CA) application.
It can be used to sign certificate requests in a variety of forms
and generate certificate revocation lists (CRLs).
It also maintains a text database of issued certificates and their status.
.Pp
The options relevant to CAs are as follows:
.Bl -tag -width "XXXX"
.It Fl batch
Batch mode.
In this mode no questions will be asked
and all certificates will be certified automatically.
.It Fl cert Ar file
The CA certificate file.
.It Fl config Ar file
Specify an alternative configuration file.
.It Fl days Ar arg
The number of days to certify the certificate for.
.It Fl enddate Ar date
Set the expiry date.
The format of the date is YYMMDDHHMMSSZ
.Pq the same as an ASN.1 UTCTime structure .
.It Fl extensions Ar section
The section of the configuration file containing certificate extensions
to be added when a certificate is issued (defaults to
.Cm x509_extensions
unless the
.Fl extfile
option is used).
If no extension section is present, a V1 certificate is created.
If the extension section is present
.Pq even if it is empty ,
then a V3 certificate is created.
.It Fl extfile Ar file
An additional configuration
.Ar file
to read certificate extensions from
(using the default section unless the
.Fl extensions
option is also used).
.It Fl in Ar file
An input
.Ar file
containing a single certificate request to be signed by the CA.
.It Fl infiles
If present, this should be the last option; all subsequent arguments
are assumed to be the names of files containing certificate requests.
.It Fl key Ar keyfile
The password used to encrypt the private key.
Since on some systems the command line arguments are visible,
this option should be used with caution.
.It Fl keyfile Ar file
The private key to sign requests with.
.It Fl keyform Ar pem
Private key file format.
.It Fl md Ar alg
The message digest to use.
Possible values include
.Ar md5
and
.Ar sha1 .
This option also applies to CRLs.
.It Fl msie_hack
This is a legacy option to make
.Nm ca
work with very old versions of the IE certificate enrollment control
.Qq certenr3 .
It used UniversalStrings for almost everything.
Since the old control has various security bugs,
its use is strongly discouraged.
The newer control
.Qq Xenroll
does not need this option.
.It Fl name Ar section
Specifies the configuration file
.Ar section
to use (overrides
.Cm default_ca
in the
.Cm ca
section).
.It Fl noemailDN
The DN of a certificate can contain the EMAIL field if present in the
request DN, however it is good policy just having the email set into
the
.Cm altName
extension of the certificate.
When this option is set, the EMAIL field is removed from the certificate's
subject and set only in the, eventually present, extensions.
The
.Ar email_in_dn
keyword can be used in the configuration file to enable this behaviour.
.It Fl notext
Don't output the text form of a certificate to the output file.
.It Fl out Ar file
The output file to output certificates to.
The default is standard output.
The certificate details will also be printed out to this file.
.It Fl outdir Ar directory
The
.Ar directory
to output certificates to.
The certificate will be written to a file consisting of the
serial number in hex with
.Qq .pem
appended.
.It Fl passin Ar arg
The key password source.
.It Fl policy Ar arg
Define the CA
.Qq policy
to use.
The policy section in the configuration file
consists of a set of variables corresponding to certificate DN fields.
The values may be one of
.Qq match
(the value must match the same field in the CA certificate),
.Qq supplied
(the value must be present), or
.Qq optional
(the value may be present).
Any fields not mentioned in the policy section
are silently deleted, unless the
.Fl preserveDN
option is set,
but this can be regarded more of a quirk than intended behaviour.
.It Fl preserveDN
Normally, the DN order of a certificate is the same as the order of the
fields in the relevant policy section.
When this option is set, the order is the same as the request.
This is largely for compatibility with the older IE enrollment control
which would only accept certificates if their DNs matched the order of the
request.
This is not needed for Xenroll.
.It Fl spkac Ar file
A file containing a single Netscape signed public key and challenge,
and additional field values to be signed by the CA.
This will usually come from the
KEYGEN tag in an HTML form to create a new private key.
It is, however, possible to create SPKACs using the
.Nm spkac
utility.
.Pp
The file should contain the variable SPKAC set to the value of
the SPKAC and also the required DN components as name value pairs.
If it's necessary to include the same component twice,
then it can be preceded by a number and a
.Sq \&. .
.It Fl ss_cert Ar file
A single self-signed certificate to be signed by the CA.
.It Fl startdate Ar date
Set the start date.
The format of the date is YYMMDDHHMMSSZ
.Pq the same as an ASN.1 UTCTime structure .
.It Fl status Ar serial
Show the status of the certificate with serial number
.Ar serial .
.It Fl updatedb
Update database for expired certificates.
.It Fl verbose
Print extra details about the operations being performed.
.El
.Pp
The options relevant to CRLs are as follows:
.Bl -tag -width "XXXX"
.It Fl crl_CA_compromise Ar time
This is the same as
.Fl crl_compromise ,
except the revocation reason is set to CACompromise.
.It Fl crl_compromise Ar time
Set the revocation reason to keyCompromise and the compromise time to
.Ar time .
.Ar time
should be in GeneralizedTime format, i.e. YYYYMMDDHHMMSSZ.
.It Fl crl_hold Ar instruction
Set the CRL revocation reason code to certificateHold and the hold
instruction to
.Ar instruction
which must be an OID.
Although any OID can be used, only holdInstructionNone
(the use of which is discouraged by RFC 2459), holdInstructionCallIssuer or
holdInstructionReject will normally be used.
.It Fl crl_reason Ar reason
Revocation reason, where
.Ar reason
is one of:
unspecified, keyCompromise, CACompromise, affiliationChanged, superseded,
cessationOfOperation, certificateHold or removeFromCRL.
The matching of
.Ar reason
is case insensitive.
Setting any revocation reason will make the CRL v2.
In practice, removeFromCRL is not particularly useful because it is only used
in delta CRLs which are not currently implemented.
.It Fl crldays Ar num
The number of days before the next CRL is due.
This is the days from now to place in the CRL
.Cm nextUpdate
field.
.It Fl crlexts Ar section
The
.Ar section
of the configuration file containing CRL extensions to include.
If no CRL extension section is present then a V1 CRL is created;
if the CRL extension section is present
(even if it is empty)
then a V2 CRL is created.
The CRL extensions specified are CRL extensions and not CRL entry extensions.
It should be noted that some software can't handle V2 CRLs.
.It Fl crlhours Ar num
The number of hours before the next CRL is due.
.It Fl gencrl
Generate a CRL based on information in the index file.
.It Fl revoke Ar file
A
.Ar file
containing a certificate to revoke.
.It Fl subj Ar arg
Supersedes the subject name given in the request.
The
.Ar arg
must be formatted as
.Ar /type0=value0/type1=value1/type2=... ;
characters may be escaped by
.Sq \e
.Pq backslash ,
no spaces are skipped.
.El
.Pp
Many of the options can be set in the
.Cm ca
section of the configuration file
(or in the default section of the configuration file),
specified using
.Cm default_ca
or
.Fl name .
The options
.Cm preserve
and
.Cm msie_hack
are read directly from the
.Cm ca
section.
.Pp
Many of the configuration file options are identical to command line
options.
Where the option is present in the configuration file and the command line,
the command line value is used.
Where an option is described as mandatory, then it must be present in
the configuration file or the command line equivalent
.Pq if any
used.
.Bl -tag -width "XXXX"
.It Cm certificate
The same as
.Fl cert .
It gives the file containing the CA certificate.
Mandatory.
.It Cm copy_extensions
Determines how extensions in certificate requests should be handled.
If set to
.Cm none
or this option is not present, then extensions are
ignored and not copied to the certificate.
If set to
.Cm copy ,
then any extensions present in the request that are not already present
are copied to the certificate.
If set to
.Cm copyall ,
then all extensions in the request are copied to the certificate:
if the extension is already present in the certificate it is deleted first.
.Pp
The
.Cm copy_extensions
option should be used with caution.
If care is not taken, it can be a security risk.
For example, if a certificate request contains a
.Cm basicConstraints
extension with CA:TRUE and the
.Cm copy_extensions
value is set to
.Cm copyall
and the user does not spot
this when the certificate is displayed, then this will hand the requestor
a valid CA certificate.
.Pp
This situation can be avoided by setting
.Cm copy_extensions
to
.Cm copy
and including
.Cm basicConstraints
with CA:FALSE in the configuration file.
Then if the request contains a
.Cm basicConstraints
extension, it will be ignored.
.Pp
The main use of this option is to allow a certificate request to supply
values for certain extensions such as
.Cm subjectAltName .
.It Cm crl_extensions
The same as
.Fl crlexts .
.It Cm crlnumber
A text file containing the next CRL number to use in hex.
The CRL number will be inserted in the CRLs only if this file exists.
If this file is present, it must contain a valid CRL number.
.It Cm database
The text database file to use.
Mandatory.
This file must be present, though initially it will be empty.
.It Cm default_crl_hours , default_crl_days
The same as the
.Fl crlhours
and
.Fl crldays
options.
These will only be used if neither command line option is present.
At least one of these must be present to generate a CRL.
.It Cm default_days
The same as the
.Fl days
option.
The number of days to certify a certificate for.
.It Cm default_enddate
The same as the
.Fl enddate
option.
Either this option or
.Cm default_days
.Pq or the command line equivalents
must be present.
.It Cm default_md
The same as the
.Fl md
option.
The message digest to use.
Mandatory.
.It Cm default_startdate
The same as the
.Fl startdate
option.
The start date to certify a certificate for.
If not set, the current time is used.
.It Cm email_in_dn
The same as
.Fl noemailDN .
If the EMAIL field is to be removed from the DN of the certificate,
simply set this to
.Qq no .
If not present, the default is to allow for the EMAIL field in the
certificate's DN.
.It Cm msie_hack
The same as
.Fl msie_hack .
.It Cm name_opt , cert_opt
These options allow the format used to display the certificate details
when asking the user to confirm signing.
All the options supported by the
.Nm x509
utilities'
.Fl nameopt
and
.Fl certopt
switches can be used here, except that
.Cm no_signame
and
.Cm no_sigdump
are permanently set and cannot be disabled
(this is because the certificate signature cannot be displayed because
the certificate has not been signed at this point).
.Pp
For convenience, the value
.Cm ca_default
is accepted by both to produce a reasonable output.
.Pp
If neither option is present, the format used in earlier versions of
.Nm openssl
is used.
Use of the old format is strongly discouraged
because it only displays fields mentioned in the
.Cm policy
section,
mishandles multicharacter string types and does not display extensions.
.It Cm new_certs_dir
The same as the
.Fl outdir
command line option.
It specifies the directory where new certificates will be placed.
Mandatory.
.It Cm oid_file
This specifies a file containing additional object identifiers.
Each line of the file should consist of the numerical form of the
object identifier followed by whitespace, then the short name followed
by whitespace and finally the long name.
.It Cm oid_section
This specifies a section in the configuration file containing extra
object identifiers.
Each line should consist of the short name of the object identifier
followed by
.Sq =
and the numerical form.
The short and long names are the same when this option is used.
.It Cm policy
The same as
.Fl policy .
Mandatory.
.It Cm preserve
The same as
.Fl preserveDN .
.It Cm private_key
Same as the
.Fl keyfile
option.
The file containing the CA private key.
Mandatory.
.It Cm serial
A text file containing the next serial number to use in hex.
Mandatory.
This file must be present and contain a valid serial number.
.It Cm unique_subject
If the value
.Cm yes
is given, the valid certificate entries in the
database must have unique subjects.
If the value
.Cm no
is given,
several valid certificate entries may have the exact same subject.
The default value is
.Cm yes .
.It Cm x509_extensions
The same as
.Fl extensions .
.El
.Sh CIPHERS
.Nm openssl ciphers
.Op Fl hVv
.Op Fl tls1
.Op Ar cipherlist
.Pp
The
.Nm ciphers
command converts
.Nm openssl
cipher lists into ordered SSL cipher preference lists.
It can be used as a way to determine the appropriate cipher list.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl h , \&?
Print a brief usage message.
.It Fl tls1
Only include TLS v1 ciphers.
.It Fl V
Verbose.
List ciphers with a complete description of protocol version,
key exchange, authentication, encryption and mac algorithms,
any key size restrictions,
and cipher suite codes (hex format).
.It Fl v
Like
.Fl V ,
but without cipher suite codes.
.It Ar cipherlist
A cipher list to convert to a cipher preference list.
If it is not included, the default cipher list will be used.
.Pp
The cipher list consists of one or more cipher strings
separated by colons.
Commas or spaces are also acceptable separators, but colons are normally used.
.Pp
The actual cipher string can take several different forms:
.Pp
It can consist of a single cipher suite, such as RC4-SHA.
.Pp
It can represent a list of cipher suites containing a certain algorithm,
or cipher suites of a certain type.
For example SHA1 represents all cipher suites using the digest algorithm SHA1.
.Pp
Lists of cipher suites can be combined in a single cipher string using the
.Sq +
character
(logical AND operation).
For example, SHA1+DES represents all cipher suites
containing the SHA1 and DES algorithms.
.Pp
Each cipher string can be optionally preceded by the characters
.Sq \&! ,
.Sq - ,
or
.Sq + .
If
.Sq !\&
is used, then the ciphers are permanently deleted from the list.
The ciphers deleted can never reappear in the list even if they are
explicitly stated.
If
.Sq -
is used, then the ciphers are deleted from the list, but some or
all of the ciphers can be added again by later options.
If
.Sq +
is used, then the ciphers are moved to the end of the list.
This option doesn't add any new ciphers, it just moves matching existing ones.
.Pp
If none of these characters is present, the string is just interpreted
as a list of ciphers to be appended to the current preference list.
If the list includes any ciphers already present, they will be ignored;
that is, they will not be moved to the end of the list.
.Pp
Additionally, the cipher string
.Cm @@STRENGTH
can be used at any point to sort the current cipher list in order of
encryption algorithm key length.
.El
.Pp
The following is a list of all permitted cipher strings and their meanings.
.Bl -tag -width "XXXX"
.It Cm DEFAULT
The default cipher list.
This is determined at compile time and is currently
.Cm ALL:!aNULL:!eNULL:!SSLv2 .
This must be the first cipher string specified.
.It Cm COMPLEMENTOFDEFAULT
The ciphers included in
.Cm ALL ,
but not enabled by default.
Currently this is
.Cm ADH .
Note that this rule does not cover
.Cm eNULL ,
which is not included by
.Cm ALL
(use
.Cm COMPLEMENTOFALL
if necessary).
.It Cm ALL
All cipher suites except the
.Cm eNULL
ciphers, which must be explicitly enabled.
.It Cm COMPLEMENTOFALL
The cipher suites not enabled by
.Cm ALL ,
currently being
.Cm eNULL .
.It Cm HIGH
.Qq High
encryption cipher suites.
This currently means those with key lengths larger than 128 bits.
.It Cm MEDIUM
.Qq Medium
encryption cipher suites, currently those using 128-bit encryption.
.It Cm LOW
.Qq Low
encryption cipher suites, currently those using 64- or 56-bit encryption
algorithms.
.It Cm eNULL , NULL
The
.Qq NULL
ciphers; that is, those offering no encryption.
Because these offer no encryption at all and are a security risk,
they are disabled unless explicitly included.
.It Cm aNULL
The cipher suites offering no authentication.
This is currently the anonymous DH algorithms.
These cipher suites are vulnerable to a
.Qq man in the middle
attack, so their use is normally discouraged.
.It Cm kRSA , RSA
Cipher suites using RSA key exchange.
.It Cm kEDH
Cipher suites using ephemeral DH key agreement.
.It Cm aRSA
Cipher suites using RSA authentication, i.e. the certificates carry RSA keys.
.It Cm aDSS , DSS
Cipher suites using DSS authentication, i.e. the certificates carry DSS keys.
.It Cm TLSv1
TLS v1.0 cipher suites.
.It Cm DH
Cipher suites using DH, including anonymous DH.
.It Cm ADH
Anonymous DH cipher suites.
.It Cm AES
Cipher suites using AES.
.It Cm 3DES
Cipher suites using triple DES.
.It Cm DES
Cipher suites using DES
.Pq not triple DES .
.It Cm RC4
Cipher suites using RC4.
.It Cm CAMELLIA
Cipher suites using Camellia.
.It Cm CHACHA20
Cipher suites using ChaCha20.
.It Cm IDEA
Cipher suites using IDEA.
.It Cm MD5
Cipher suites using MD5.
.It Cm SHA1 , SHA
Cipher suites using SHA1.
.El
.Sh CRL
.nr nS 1
.Nm "openssl crl"
.Op Fl CAfile Ar file
.Op Fl CApath Ar dir
.Op Fl fingerprint
.Op Fl hash
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl issuer
.Op Fl lastupdate
.Op Fl nextupdate
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl text
.nr nS 0
.Pp
The
.Nm crl
command processes CRL files in DER or PEM format.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl CAfile Ar file
Verify the signature on a CRL by looking up the issuing certificate in
.Ar file .
.It Fl CApath Ar directory
Verify the signature on a CRL by looking up the issuing certificate in
.Ar dir .
This directory must be a standard certificate directory,
i.e. a hash of each subject name (using
.Cm x509 Fl hash )
should be linked to each certificate.
.It Fl fingerprint
Print the CRL fingerprint.
.It Fl hash
Output a hash of the issuer name.
This can be used to look up CRLs in a directory by issuer name.
.It Fl in Ar file
The input file to read from, or standard input if not specified.
.It Fl inform Cm der | pem
The input format.
.It Fl issuer
Output the issuer name.
.It Fl lastupdate
Output the
.Cm lastUpdate
field.
.It Fl nextupdate
Output the
.Cm nextUpdate
field.
.It Fl noout
Do not output the encoded version of the CRL.
.It Fl out Ar file
The output file to write to, or standard output if not specified.
.It Fl outform Cm der | pem
The output format.
.It Fl text
Print the CRL in plain text.
.El
.Sh CRL2PKCS7
.nr nS 1
.Nm "openssl crl2pkcs7"
.Op Fl certfile Ar file
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl nocrl
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.nr nS 0
.Pp
The
.Nm crl2pkcs7
command takes an optional CRL and one or more
certificates and converts them into a PKCS#7 degenerate
.Qq certificates only
structure.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl certfile Ar file
Add the certificates in PEM
.Ar file
to the PKCS#7 structure.
This option can be used more than once
to read certificates from multiple files.
.It Fl in Ar file
Read the CRL from
.Ar file ,
or standard input if not specified.
.It Fl inform Cm der | pem
The input format.
.It Fl nocrl
Normally, a CRL is included in the output file.
With this option, no CRL is
included in the output file and a CRL is not read from the input file.
.It Fl out Ar file
Write the PKCS#7 structure to
.Ar file ,
or standard output if not specified.
.It Fl outform Cm der | pem
The output format.
.El
.Sh DGST
.nr nS 1
.Nm "openssl dgst"
.Op Fl cd
.Op Fl binary
.Op Fl Ar digest
.Op Fl hex
.Op Fl hmac Ar key
.Op Fl keyform Cm pem
.Op Fl mac Ar algorithm
.Op Fl macopt Ar nm : Ns Ar v
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl prverify Ar file
.Op Fl sign Ar file
.Op Fl signature Ar file
.Op Fl sigopt Ar nm : Ns Ar v
.Op Fl verify Ar file
.Op Ar
.nr nS 0
.Pp
The digest functions output the message digest of a supplied
.Ar file
or
.Ar files
in hexadecimal form.
They can also be used for digital signing and verification.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl binary
Output the digest or signature in binary form.
.It Fl c
Print the digest in two-digit groups separated by colons.
.It Fl d
Print BIO debugging information.
.It Fl Ar digest
Use the specified message
.Ar digest .
The default is MD5.
The available digests can be displayed using
.Nm openssl
.Cm list-message-digest-commands .
The following are equivalent:
.Nm openssl dgst
.Fl md5
and
.Nm openssl
.Cm md5 .
.It Fl hex
Digest is to be output as a hex dump.
This is the default case for a
.Qq normal
digest as opposed to a digital signature.
.It Fl hmac Ar key
Create a hashed MAC using
.Ar key .
.It Fl keyform Cm pem
Specifies the key format to sign the digest with.
.It Fl mac Ar algorithm
Create a keyed Message Authentication Code (MAC).
The most popular MAC algorithm is HMAC (hash-based MAC),
but there are other MAC algorithms which are not based on hash.
MAC keys and other options should be set via the
.Fl macopt
parameter.
.It Fl macopt Ar nm : Ns Ar v
Passes options to the MAC algorithm, specified by
.Fl mac .
The following options are supported by HMAC:
.Bl -tag -width Ds
.It Cm key : Ns Ar string
Specifies the MAC key as an alphanumeric string
(use if the key contain printable characters only).
String length must conform to any restrictions of the MAC algorithm.
.It Cm hexkey : Ns Ar string
Specifies the MAC key in hexadecimal form (two hex digits per byte).
Key length must conform to any restrictions of the MAC algorithm.
.El
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl passin Ar arg
The key password source.
.It Fl prverify Ar file
Verify the signature using the private key in
.Ar file .
The output is either
.Qq Verification OK
or
.Qq Verification Failure .
.It Fl sign Ar file
Digitally sign the digest using the private key in
.Ar file .
.It Fl signature Ar file
The actual signature to verify.
.It Fl sigopt Ar nm : Ns Ar v
Pass options to the signature algorithm during sign or verify operations.
The names and values of these options are algorithm-specific.
.It Fl verify Ar file
Verify the signature using the public key in
.Ar file .
The output is either
.Qq Verification OK
or
.Qq Verification Failure .
.It Ar
File or files to digest.
If no files are specified then standard input is used.
.El
.Sh DHPARAM
.nr nS 1
.Nm "openssl dhparam"
.Op Fl 2 | 5
.Op Fl C
.Op Fl check
.Op Fl dsaparam
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl text
.Op Ar numbits
.nr nS 0
.Pp
The
.Nm dhparam
command is used to manipulate DH parameter files.
Only the older PKCS#3 DH is supported,
not the newer X9.42 DH.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 2 , 5
The generator to use;
2 is the default.
If present, the input file is ignored and parameters are generated instead.
.It Fl C
Convert the parameters into C code.
The parameters can then be loaded by calling the
.No get_dh Ns Ar numbits
function.
.It Fl check
Check the DH parameters.
.It Fl dsaparam
Read or create DSA parameters,
converted to DH format on output.
Otherwise,
.Qq strong
primes
.Pq such that (p-1)/2 is also prime
will be used for DH parameter generation.
.Pp
DH parameter generation with the
.Fl dsaparam
option is much faster,
and the recommended exponent length is shorter,
which makes DH key exchange more efficient.
Beware that with such DSA-style DH parameters,
a fresh DH key should be created for each use to
avoid small-subgroup attacks that may be possible otherwise.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl inform Cm der | pem
The input format.
.It Fl noout
Do not output the encoded version of the parameters.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl outform Cm der | pem
The output format.
.It Fl text
Print the DH parameters in plain text.
.It Ar numbits
Generate a parameter set of size
.Ar numbits .
It must be the last option.
If not present, a value of 2048 is used.
If this value is present, the input file is ignored and
parameters are generated instead.
.El
.Sh DSA
.nr nS 1
.Nm "openssl dsa"
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl modulus
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubin
.Op Fl pubout
.Op Fl text
.nr nS 0
.Pp
The
.Nm dsa
command processes DSA keys.
They can be converted between various forms and their components printed out.
.Pp
.Sy Note :
This command uses the traditional
.Nm SSLeay
compatible format for private key encryption:
newer applications should use the more secure PKCS#8 format using the
.Nm pkcs8
command.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
Encrypt the private key with the AES, DES, or the triple DES
ciphers, respectively, before outputting it.
A pass phrase is prompted for.
If none of these options are specified, the key is written in plain text.
This means that using the
.Nm dsa
utility to read an encrypted key with no encryption option can be used to
remove the pass phrase from a key,
or by setting the encryption options it can be used to add or change
the pass phrase.
These options can only be used with PEM format output files.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
If the key is encrypted, a pass phrase will be prompted for.
.It Fl inform Cm der | pem
The input format.
.It Fl modulus
Print the value of the public key component of the key.
.It Fl noout
Do not output the encoded version of the key.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
If any encryption options are set then a pass phrase will be
prompted for.
.It Fl outform Cm der | pem
The output format.
.It Fl passin Ar arg
The key password source.
.It Fl passout Ar arg
The output file password source.
.It Fl pubin
Read in a public key, not a private key.
.It Fl pubout
Output a public key, not a private key.
Automatically set if the input is a public key.
.It Fl text
Print the public/private key in plain text.
.El
.Sh DSAPARAM
.nr nS 1
.Nm "openssl dsaparam"
.Op Fl C
.Op Fl genkey
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl text
.Op Ar numbits
.nr nS 0
.Pp
The
.Nm dsaparam
command is used to manipulate or generate DSA parameter files.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl C
Convert the parameters into C code.
The parameters can then be loaded by calling the
.No get_dsa Ns Ar XXX
function.
.It Fl genkey
Generate a DSA key either using the specified or generated
parameters.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
If the
.Ar numbits
parameter is included, then this option is ignored.
.It Fl inform Cm der | pem
The input format.
.It Fl noout
Do not output the encoded version of the parameters.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl outform Cm der | pem
The output format.
.It Fl text
Print the DSA parameters in plain text.
.It Ar numbits
Generate a parameter set of size
.Ar numbits .
If this option is included, the input file is ignored.
.El
.Sh EC
.nr nS 1
.Nm "openssl ec"
.Op Fl conv_form Ar arg
.Op Fl des
.Op Fl des3
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl param_enc Ar arg
.Op Fl param_out
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubin
.Op Fl pubout
.Op Fl text
.nr nS 0
.Pp
The
.Nm ec
command processes EC keys.
They can be converted between various
forms and their components printed out.
.Nm openssl
uses the private key format specified in
.Dq SEC 1: Elliptic Curve Cryptography
.Pq Lk http://www.secg.org/ .
To convert an
EC private key into the PKCS#8 private key format use the
.Nm pkcs8
command.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl conv_form Ar arg
Specify how the points on the elliptic curve are converted
into octet strings.
Possible values are:
.Cm compressed
(the default),
.Cm uncompressed ,
and
.Cm hybrid .
For more information regarding
the point conversion forms see the X9.62 standard.
Note:
Due to patent issues the
.Cm compressed
option is disabled by default for binary curves
and can be enabled by defining the preprocessor macro
.Dv OPENSSL_EC_BIN_PT_COMP
at compile time.
.It Fl des | des3
Encrypt the private key with DES, triple DES, or
any other cipher supported by
.Nm openssl .
A pass phrase is prompted for.
If none of these options is specified the key is written in plain text.
This means that using the
.Nm ec
utility to read in an encrypted key with no
encryption option can be used to remove the pass phrase from a key,
or by setting the encryption options
it can be used to add or change the pass phrase.
These options can only be used with PEM format output files.
.It Fl in Ar file
The input file to read a key from,
or standard input if not specified.
If the key is encrypted a pass phrase will be prompted for.
.It Fl inform Cm der | pem
The input format.
.It Fl noout
Do not output the encoded version of the key.
.It Fl out Ar file
The output filename to write to,
or standard output if not specified.
If any encryption options are set then a pass phrase will be prompted for.
.It Fl outform Cm der | pem
The output format.
.It Fl param_enc Ar arg
Specify how the elliptic curve parameters are encoded.
Possible value are:
.Cm named_curve ,
i.e. the EC parameters are specified by an OID; or
.Cm explicit ,
where the EC parameters are explicitly given
(see RFC 3279 for the definition of the EC parameter structures).
The default value is
.Cm named_curve .
Note: the
.Cm implicitlyCA
alternative,
as specified in RFC 3279,
is currently not implemented.
.It Fl passin Ar arg
The key password source.
.It Fl passout Ar arg
The output file password source.
.It Fl pubin
Read in a public key, not a private key.
.It Fl pubout
Output a public key, not a private key.
Automatically set if the input is a public key.
.It Fl text
Print the public/private key in plain text.
.El
.Sh ECPARAM
.nr nS 1
.Nm "openssl ecparam"
.Op Fl C
.Op Fl check
.Op Fl conv_form Ar arg
.Op Fl genkey
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl list_curves
.Op Fl name Ar arg
.Op Fl no_seed
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl param_enc Ar arg
.Op Fl text
.nr nS 0
.Pp
The
.Nm ecparam
command is used to manipulate or generate EC parameter files.
.Nm openssl
is not able to generate new groups so
.Nm ecparam
can only create EC parameters from known (named) curves.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl C
Convert the EC parameters into C code.
The parameters can then be loaded by calling the
.No get_ec_group_ Ns Ar XXX
function.
.It Fl check
Validate the elliptic curve parameters.
.It Fl conv_form Ar arg
Specify how the points on the elliptic curve are converted
into octet strings.
Possible values are:
.Cm compressed
(the default),
.Cm uncompressed ,
and
.Cm hybrid .
For more information regarding
the point conversion forms see the X9.62 standard.
Note:
Due to patent issues the
.Cm compressed
option is disabled by default for binary curves
and can be enabled by defining the preprocessor macro
.Dv OPENSSL_EC_BIN_PT_COMP
at compile time.
.It Fl genkey
Generate an EC private key using the specified parameters.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl inform Cm der | pem
The input format.
.It Fl list_curves
Print a list of all
currently implemented EC parameter names and exit.
.It Fl name Ar arg
Use the EC parameters with the specified "short" name.
.It Fl no_seed
Do not include the seed for the parameter generation
in the ECParameters structure (see RFC 3279).
.It Fl noout
Do not output the encoded version of the parameters.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl outform Cm der | pem
The output format.
.It Fl param_enc Ar arg
Specify how the elliptic curve parameters are encoded.
Possible value are:
.Cm named_curve ,
i.e. the EC parameters are specified by an OID, or
.Cm explicit ,
where the EC parameters are explicitly given
(see RFC 3279 for the definition of the EC parameter structures).
The default value is
.Cm named_curve .
Note: the
.Cm implicitlyCA
alternative, as specified in RFC 3279,
is currently not implemented.
.It Fl text
Print the EC parameters in plain text.
.El
.Sh ENC
.nr nS 1
.Nm "openssl enc"
.Fl ciphername
.Op Fl AadePp
.Op Fl base64
.Op Fl bufsize Ar number
.Op Fl debug
.Op Fl in Ar file
.Op Fl iv Ar IV
.Op Fl K Ar key
.Op Fl k Ar password
.Op Fl kfile Ar file
.Op Fl md Ar digest
.Op Fl none
.Op Fl nopad
.Op Fl nosalt
.Op Fl out Ar file
.Op Fl pass Ar arg
.Op Fl S Ar salt
.Op Fl salt
.nr nS 0
.Pp
The symmetric cipher commands allow data to be encrypted or decrypted
using various block and stream ciphers using keys based on passwords
or explicitly provided.
Base64 encoding or decoding can also be performed either by itself
or in addition to the encryption or decryption.
The program can be called either as
.Nm openssl Ar ciphername
or
.Nm openssl enc - Ns Ar ciphername .
.Pp
Some of the ciphers do not have large keys and others have security
implications if not used correctly.
All the block ciphers normally use PKCS#5 padding,
also known as standard block padding.
If padding is disabled, the input data must be a multiple of the cipher
block length.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl A
If the
.Fl a
option is set, then base64 process the data on one line.
.It Fl a , base64
Base64 process the data.
This means that if encryption is taking place, the data is base64-encoded
after encryption.
If decryption is set, the input data is base64-decoded before
being decrypted.
.It Fl bufsize Ar number
Set the buffer size for I/O.
.It Fl d
Decrypt the input data.
.It Fl debug
Debug the BIOs used for I/O.
.It Fl e
Encrypt the input data.
This is the default.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl iv Ar IV
The actual
.Ar IV
.Pq initialisation vector
to use:
this must be represented as a string comprised only of hex digits.
When only the
.Ar key
is specified using the
.Fl K
option,
the IV must explicitly be defined.
When a password is being specified using one of the other options,
the IV is generated from this password.
.It Fl K Ar key
The actual
.Ar key
to use:
this must be represented as a string comprised only of hex digits.
If only the key is specified,
the IV must also be specified using the
.Fl iv
option.
When both a
.Ar key
and a
.Ar password
are specified, the
.Ar key
given with the
.Fl K
option will be used and the IV generated from the password will be taken.
It probably does not make much sense to specify both
.Ar key
and
.Ar password .
.It Fl k Ar password
The
.Ar password
to derive the key from.
Superseded by the
.Fl pass
option.
.It Fl kfile Ar file
Read the password to derive the key from the first line of
.Ar file .
Superseded by the
.Fl pass
option.
.It Fl md Ar digest
Use
.Ar digest
to create a key from a pass phrase.
.Ar digest
may be one of
.Cm md5
or
.Cm sha1 .
.It Fl none
Use NULL cipher (no encryption or decryption of input).
.It Fl nopad
Disable standard block padding.
.It Fl nosalt
Don't use a salt in the key derivation routines.
This option should never be used
since it makes it possible to perform efficient dictionary
attacks on the password and to attack stream cipher encrypted data.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl P
Print out the salt, key, and IV used, then immediately exit;
don't do any encryption or decryption.
.It Fl p
Print out the salt, key, and IV used.
.It Fl pass Ar arg
The password source.
.It Fl S Ar salt
The actual
.Ar salt
to use:
this must be represented as a string comprised only of hex digits.
.It Fl salt
Use a salt in the key derivation routines (the default).
When the salt is being used
the first eight bytes of the encrypted data are reserved for the salt:
it is randomly generated when encrypting a file and read from the
encrypted file when it is decrypted.
.El
.Sh ERRSTR
.Nm openssl errstr
.Op Fl stats
.Ar errno ...
.Pp
The
.Nm errstr
command performs error number to error string conversion,
generating a human-readable string representing the error code
.Ar errno .
The string is obtained through the
.Xr ERR_error_string_n 3
function and has the following format:
.Pp
.Dl error:[error code]:[library name]:[function name]:[reason string]
.Pp
.Bq error code
is an 8-digit hexadecimal number.
The remaining fields
.Bq library name ,
.Bq function name ,
and
.Bq reason string
are all ASCII text.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl stats
Print debugging statistics about various aspects of the hash table.
.El
.Sh GENDSA
.nr nS 1
.Nm "openssl gendsa"
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
.Op Fl out Ar file
.Op Ar paramfile
.nr nS 0
.Pp
The
.Nm gendsa
command generates a DSA private key from a DSA parameter file
(typically generated by the
.Nm openssl dsaparam
command).
DSA key generation is little more than random number generation so it is
much quicker than,
for example,
RSA key generation.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
Encrypt the private key with the AES, DES,
or the triple DES ciphers, respectively, before outputting it.
A pass phrase is prompted for.
If none of these options are specified, no encryption is used.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Ar paramfile
Specify the DSA parameter file to use.
The parameters in this file determine the size of the private key.
.El
.Sh GENPKEY
.nr nS 1
.Nm "openssl genpkey"
.Op Fl algorithm Ar alg
.Op Ar cipher
.Op Fl genparam
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl paramfile Ar file
.Op Fl pass Ar arg
.Op Fl pkeyopt Ar opt : Ns Ar value
.Op Fl text
.nr nS 0
.Pp
The
.Nm genpkey
command generates private keys.
The use of this
program is encouraged over the algorithm specific utilities
because additional algorithm options can be used.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl algorithm Ar alg
The public key algorithm to use,
such as RSA, DSA, or DH.
This option must precede any
.Fl pkeyopt
options.
The options
.Fl paramfile
and
.Fl algorithm
are mutually exclusive.
.It Ar cipher
Encrypt the private key with the supplied cipher.
Any algorithm name accepted by
.Xr EVP_get_cipherbyname 3
is acceptable.
.It Fl genparam
Generate a set of parameters instead of a private key.
This option must precede any
.Fl algorithm ,
.Fl paramfile ,
or
.Fl pkeyopt
options.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl outform Cm der | pem
The output format.
.It Fl paramfile Ar file
Some public key algorithms generate a private key based on a set of parameters,
which can be supplied using this option.
If this option is used the public key
algorithm used is determined by the parameters.
This option must precede any
.Fl pkeyopt
options.
The options
.Fl paramfile
and
.Fl algorithm
are mutually exclusive.
.It Fl pass Ar arg
The output file password source.
.It Fl pkeyopt Ar opt : Ns Ar value
Set the public key algorithm option
.Ar opt
to
.Ar value ,
as follows:
.Bl -tag -width Ds -offset indent
.It rsa_keygen_bits : Ns Ar numbits
(RSA)
The number of bits in the generated key.
The default is 2048.
.It rsa_keygen_pubexp : Ns Ar value
(RSA)
The RSA public exponent value.
This can be a large decimal or hexadecimal value if preceded by 0x.
The default is 65537.
.It dsa_paramgen_bits : Ns Ar numbits
(DSA)
The number of bits in the generated parameters.
The default is 1024.
.It dh_paramgen_prime_len : Ns Ar numbits
(DH)
The number of bits in the prime parameter
.Ar p .
.It dh_paramgen_generator : Ns Ar value
(DH)
The value to use for the generator
.Ar g .
.It ec_paramgen_curve : Ns Ar curve
(EC)
The EC curve to use.
.El
.It Fl text
Print the private/public key in plain text.
.El
.Sh GENRSA
.nr nS 1
.Nm "openssl genrsa"
.Op Fl 3 | f4
.Op Fl aes128 | aes192 | aes256 | des | des3
.Op Fl out Ar file
.Op Fl passout Ar arg
.Op Ar numbits
.nr nS 0
.Pp
The
.Nm genrsa
command generates an RSA private key,
which essentially involves the generation of two prime numbers.
When generating the key,
various symbols will be output to indicate the progress of the generation.
A
.Sq \&.
represents each number which has passed an initial sieve test;
.Sq +
means a number has passed a single round of the Miller-Rabin primality test.
A newline means that the number has passed all the prime tests
(the actual number depends on the key size).
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 3 | f4
The public exponent to use, either 3 or 65537.
The default is 65537.
.It Fl aes128 | aes192 | aes256 | des | des3
Encrypt the private key with the AES, DES,
or the triple DES ciphers, respectively, before outputting it.
If none of these options are specified, no encryption is used.
If encryption is used, a pass phrase is prompted for,
if it is not supplied via the
.Fl passout
option.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl passout Ar arg
The output file password source.
.It Ar numbits
The size of the private key to generate in bits.
This must be the last option specified.
The default is 2048.
.El
.Sh NSEQ
.Nm openssl nseq
.Op Fl in Ar file
.Op Fl out Ar file
.Op Fl toseq
.Pp
The
.Nm nseq
command takes a file containing a Netscape certificate sequence
(an alternative to the standard PKCS#7 format)
and prints out the certificates contained in it,
or takes a file of certificates
and converts it into a Netscape certificate sequence.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl toseq
Normally, a Netscape certificate sequence will be input and the output
is the certificates contained in it.
With the
.Fl toseq
option the situation is reversed:
a Netscape certificate sequence is created from a file of certificates.
.El
.Sh OCSP
.nr nS 1
.Nm "openssl ocsp"
.Op Fl CA Ar file
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl dgst Ar alg
.Op Fl host Ar hostname : Ns Ar port
.Op Fl index Ar indexfile
.Op Fl issuer Ar file
.Op Fl ndays Ar days
.Op Fl nmin Ar minutes
.Op Fl no_cert_checks
.Op Fl no_cert_verify
.Op Fl no_certs
.Op Fl no_chain
.Op Fl no_intern
.Op Fl no_nonce
.Op Fl no_signature_verify
.Op Fl nonce
.Op Fl noverify
.Op Fl nrequest Ar number
.Op Fl out Ar file
.Op Fl path Ar path
.Op Fl port Ar portnum
.Op Fl req_text
.Op Fl reqin Ar file
.Op Fl reqout Ar file
.Op Fl resp_key_id
.Op Fl resp_no_certs
.Op Fl resp_text
.Op Fl respin Ar file
.Op Fl respout Ar file
.Op Fl rkey Ar file
.Op Fl rother Ar file
.Op Fl rsigner Ar file
.Op Fl serial Ar number
.Op Fl sign_other Ar file
.Op Fl signer Ar file
.Op Fl signkey Ar file
.Op Fl status_age Ar age
.Op Fl text
.Op Fl trust_other
.Op Fl url Ar responder_url
.Op Fl VAfile Ar file
.Op Fl validity_period Ar nsec
.Op Fl verify_other Ar file
.nr nS 0
.Pp
The Online Certificate Status Protocol (OCSP)
enables applications to determine the (revocation) state
of an identified certificate (RFC 2560).
.Pp
The
.Nm ocsp
command performs many common OCSP tasks.
It can be used to print out requests and responses,
create requests and send queries to an OCSP responder,
and behave like a mini OCSP server itself.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl CAfile Ar file , Fl CApath Ar directory
A file or path containing trusted CA certificates,
used to verify the signature on the OCSP response.
.It Fl cert Ar file
Add the certificate
.Ar file
to the request.
The issuer certificate is taken from the previous
.Fl issuer
option, or an error occurs if no issuer certificate is specified.
.It Fl dgst Ar alg
Use the digest algorithm
.Ar alg
for certificate identification in the OCSP request.
By default SHA-1 is used.
.It Xo
.Fl host Ar hostname : Ns Ar port ,
.Fl path Ar path
.Xc
Send
the OCSP request to
.Ar hostname
on
.Ar port .
.Fl path
specifies the HTTP path name to use, or
.Pa /
by default.
.It Fl issuer Ar file
The current issuer certificate, in PEM format.
Can be used multiple times and must come before any
.Fl cert
options.
.It Fl no_cert_checks
Don't perform any additional checks on the OCSP response signer's certificate.
That is, do not make any checks to see if the signer's certificate is
authorised to provide the necessary status information:
as a result this option should only be used for testing purposes.
.It Fl no_cert_verify
Don't verify the OCSP response signer's certificate at all.
Since this option allows the OCSP response to be signed by any certificate,
it should only be used for testing purposes.
.It Fl no_certs
Don't include any certificates in the signed request.
.It Fl no_chain
Do not use certificates in the response as additional untrusted CA
certificates.
.It Fl no_intern
Ignore certificates contained in the OCSP response
when searching for the signer's certificate.
The signer's certificate must be specified with either the
.Fl verify_other
or
.Fl VAfile
options.
.It Fl no_signature_verify
Don't check the signature on the OCSP response.
Since this option tolerates invalid signatures on OCSP responses,
it will normally only be used for testing purposes.
.It Fl nonce , no_nonce
Add an OCSP nonce extension to a request,
or disable an OCSP nonce addition.
Normally, if an OCSP request is input using the
.Fl respin
option no nonce is added:
using the
.Fl nonce
option will force the addition of a nonce.
If an OCSP request is being created (using the
.Fl cert
and
.Fl serial
options)
a nonce is automatically added; specifying
.Fl no_nonce
overrides this.
.It Fl noverify
Don't attempt to verify the OCSP response signature or the nonce values.
This is normally only be used for debugging
since it disables all verification of the responder's certificate.
.It Fl out Ar file
Specify the output file to write to,
or standard output if not specified.
.It Fl req_text , resp_text , text
Print out the text form of the OCSP request, response, or both, respectively.
.It Fl reqin Ar file , Fl respin Ar file
Read an OCSP request or response file from
.Ar file .
These options are ignored
if an OCSP request or response creation is implied by other options
(for example with the
.Fl serial , cert ,
and
.Fl host
options).
.It Fl reqout Ar file , Fl respout Ar file
Write out the DER-encoded certificate request or response to
.Ar file .
.It Fl serial Ar num
Same as the
.Fl cert
option except the certificate with serial number
.Ar num
is added to the request.
The serial number is interpreted as a decimal integer unless preceded by
.Sq 0x .
Negative integers can also be specified
by preceding the value with a minus sign.
.It Fl sign_other Ar file
Additional certificates to include in the signed request.
.It Fl signer Ar file , Fl signkey Ar file
Sign the OCSP request using the certificate specified in the
.Fl signer
option and the private key specified by the
.Fl signkey
option.
If the
.Fl signkey
option is not present, then the private key is read from the same file
as the certificate.
If neither option is specified, the OCSP request is not signed.
.It Fl trust_other
The certificates specified by the
.Fl verify_other
option should be explicitly trusted and no additional checks will be
performed on them.
This is useful when the complete responder certificate chain is not available
or trusting a root CA is not appropriate.
.It Fl url Ar responder_url
Specify the responder URL.
Both HTTP and HTTPS
.Pq SSL/TLS
URLs can be specified.
.It Fl VAfile Ar file
A file containing explicitly trusted responder certificates.
Equivalent to the
.Fl verify_other
and
.Fl trust_other
options.
.It Fl validity_period Ar nsec , Fl status_age Ar age
The range of times, in seconds, which will be tolerated in an OCSP response.
Each certificate status response includes a notBefore time
and an optional notAfter time.
The current time should fall between these two values,
but the interval between the two times may be only a few seconds.
In practice the OCSP responder and clients' clocks may not be precisely
synchronised and so such a check may fail.
To avoid this the
.Fl validity_period
option can be used to specify an acceptable error range in seconds,
the default value being 5 minutes.
.Pp
If the notAfter time is omitted from a response,
it means that new status information is immediately available.
In this case the age of the notBefore field is checked
to see it is not older than
.Ar age
seconds old.
By default, this additional check is not performed.
.It Fl verify_other Ar file
A file containing additional certificates to search
when attempting to locate the OCSP response signing certificate.
Some responders omit the actual signer's certificate from the response,
so this can be used to supply the necessary certificate.
.El
.Pp
The options for the OCSP server are as follows:
.Bl -tag -width "XXXX"
.It Fl CA Ar file
CA certificate corresponding to the revocation information in
.Ar indexfile .
.It Fl index Ar indexfile
.Ar indexfile
is a text index file in ca format
containing certificate revocation information.
.Pp
If this option is specified,
.Nm ocsp
is in responder mode, otherwise it is in client mode.
The requests the responder processes can be either specified on
the command line (using the
.Fl issuer
and
.Fl serial
options), supplied in a file (using the
.Fl respin
option), or via external OCSP clients (if
.Ar port
or
.Ar url
is specified).
.Pp
If this option is present, then the
.Fl CA
and
.Fl rsigner
options must also be present.
.It Fl nmin Ar minutes , Fl ndays Ar days
Number of
.Ar minutes
or
.Ar days
when fresh revocation information is available:
used in the nextUpdate field.
If neither option is present,
the nextUpdate field is omitted,
meaning fresh revocation information is immediately available.
.It Fl nrequest Ar number
Exit after receiving
.Ar number
requests (the default is unlimited).
.It Fl port Ar portnum
Port to listen for OCSP requests on.
May also be specified using the
.Fl url
option.
.It Fl resp_key_id
Identify the signer certificate using the key ID;
the default is to use the subject name.
.It Fl resp_no_certs
Don't include any certificates in the OCSP response.
.It Fl rkey Ar file
The private key to sign OCSP responses with;
if not present, the file specified in the
.Fl rsigner
option is used.
.It Fl rother Ar file
Additional certificates to include in the OCSP response.
.It Fl rsigner Ar file
The certificate to sign OCSP responses with.
.El
.Pp
Initially the OCSP responder certificate is located and the signature on
the OCSP request checked using the responder certificate's public key.
Then a normal certificate verify is performed on the OCSP responder certificate
building up a certificate chain in the process.
The locations of the trusted certificates used to build the chain can be
specified by the
.Fl CAfile
and
.Fl CApath
options or they will be looked for in the standard
.Nm openssl
certificates directory.
.Pp
If the initial verify fails, the OCSP verify process halts with an error.
Otherwise the issuing CA certificate in the request is compared to the OCSP
responder certificate: if there is a match then the OCSP verify succeeds.
.Pp
Otherwise the OCSP responder certificate's CA is checked against the issuing
CA certificate in the request.
If there is a match and the OCSPSigning extended key usage is present
in the OCSP responder certificate, then the OCSP verify succeeds.
.Pp
Otherwise the root CA of the OCSP responder's CA is checked to see if it
is trusted for OCSP signing.
If it is, the OCSP verify succeeds.
.Pp
If none of these checks is successful, the OCSP verify fails.
What this effectively means is that if the OCSP responder certificate is
authorised directly by the CA it is issuing revocation information about
(and it is correctly configured),
then verification will succeed.
.Pp
If the OCSP responder is a global responder,
which can give details about multiple CAs
and has its own separate certificate chain,
then its root CA can be trusted for OCSP signing.
Alternatively, the responder certificate itself can be explicitly trusted
with the
.Fl VAfile
option.
.Sh PASSWD
.nr nS 1
.Nm "openssl passwd"
.Op Fl 1 | apr1 | crypt
.Op Fl in Ar file
.Op Fl noverify
.Op Fl quiet
.Op Fl reverse
.Op Fl salt Ar string
.Op Fl stdin
.Op Fl table
.Op Ar password
.nr nS 0
.Pp
The
.Nm passwd
command computes the hash of a password.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 1
Use the MD5 based
.Bx
password algorithm
.Qq 1 .
.It Fl apr1
Use the
.Qq apr1
algorithm
.Po
Apache variant of the
.Bx
algorithm
.Pc .
.It Fl crypt
Use the
.Qq crypt
algorithm (the default).
.It Fl in Ar file
Read passwords from
.Ar file .
.It Fl noverify
Don't verify when reading a password from the terminal.
.It Fl quiet
Don't output warnings when passwords given on the command line are truncated.
.It Fl reverse
Switch table columns.
This only makes sense in conjunction with the
.Fl table
option.
.It Fl salt Ar string
Use the salt specified by
.Ar string .
When reading a password from the terminal, this implies
.Fl noverify .
.It Fl stdin
Read passwords from standard input.
.It Fl table
In the output list, prepend the cleartext password and a TAB character
to each password hash.
.El
.Sh PKCS7
.nr nS 1
.Nm "openssl pkcs7"
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl print_certs
.Op Fl text
.nr nS 0
.Pp
The
.Nm pkcs7
command processes PKCS#7 files in DER or PEM format.
The PKCS#7 routines only understand PKCS#7 v 1.5 as specified in RFC 2315.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl inform Cm der | pem
The input format.
.It Fl noout
Don't output the encoded version of the PKCS#7 structure
(or certificates if
.Fl print_certs
is set).
.It Fl out Ar file
The output to write to,
or standard output if not specified.
.It Fl outform Cm der | pem
The output format.
.It Fl print_certs
Print any certificates or CRLs contained in the file,
preceded by their subject and issuer names in a one-line format.
.It Fl text
Print certificate details in full rather than just subject and issuer names.
.El
.Sh PKCS8
.nr nS 1
.Nm "openssl pkcs8"
.Op Fl embed
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl nocrypt
.Op Fl noiter
.Op Fl nooct
.Op Fl nsdb
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl topk8
.Op Fl v1 Ar alg
.Op Fl v2 Ar alg
.nr nS 0
.Pp
The
.Nm pkcs8
command processes private keys
(both encrypted and unencrypted)
in PKCS#8 format
with a variety of PKCS#5 (v1.5 and v2.0) and PKCS#12 algorithms.
The default encryption is only 56 bits;
keys encrypted using PKCS#5 v2.0 algorithms and high iteration counts
are more secure.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl embed
Generate DSA keys in a broken format.
The DSA parameters are embedded inside the PrivateKey structure.
In this form the OCTET STRING contains an ASN.1 SEQUENCE consisting of
two structures:
a SEQUENCE containing the parameters and an ASN.1 INTEGER containing
the private key.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
If the key is encrypted, a pass phrase will be prompted for.
.It Fl inform Cm der | pem
The input format.
.It Fl nocrypt
Generate an unencrypted PrivateKeyInfo structure.
This option does not encrypt private keys at all
and should only be used when absolutely necessary.
.It Fl noiter
Use an iteration count of 1.
See the
.Sx PKCS12
section below for a detailed explanation of this option.
.It Fl nooct
Generate RSA private keys in a broken format that some software uses.
Specifically the private key should be enclosed in an OCTET STRING,
but some software just includes the structure itself without the
surrounding OCTET STRING.
.It Fl nsdb
Generate DSA keys in a broken format compatible with Netscape
private key databases.
The PrivateKey contains a SEQUENCE
consisting of the public and private keys, respectively.
.It Fl out Ar file
The output file to write to,
or standard output if none is specified.
If any encryption options are set, a pass phrase will be prompted for.
.It Fl outform Cm der | pem
The output format.
.It Fl passin Ar arg
The key password source.
.It Fl passout Ar arg
The output file password source.
.It Fl topk8
Read a traditional format private key and write a PKCS#8 format key.
.It Fl v1 Ar alg
Specify a PKCS#5 v1.5 or PKCS#12 algorithm to use.
.Pp
.Bl -tag -width "XXXX" -compact
.It PBE-MD5-DES
56-bit DES.
.It PBE-SHA1-RC2-64 | PBE-MD5-RC2-64 | PBE-SHA1-DES
64-bit RC2 or 56-bit DES.
.It PBE-SHA1-RC4-128 | PBE-SHA1-RC4-40 | PBE-SHA1-3DES
.It PBE-SHA1-2DES | PBE-SHA1-RC2-128 | PBE-SHA1-RC2-40
PKCS#12 password-based encryption algorithm,
which allow strong encryption algorithms like triple DES or 128-bit RC2.
.El
.It Fl v2 Ar alg
Use PKCS#5 v2.0 algorithms.
Supports algorithms such as 168-bit triple DES or 128-bit RC2,
however not many implementations support PKCS#5 v2.0 yet
(if using private keys with
.Nm openssl
this doesn't matter).
.Pp
.Ar alg
is the encryption algorithm to use;
valid values include des, des3, and rc2.
It is recommended that des3 is used.
.El
.Sh PKCS12
.nr nS 1
.Nm "openssl pkcs12"
.Op Fl aes128 | aes192 | aes256 | des | des3
.Op Fl cacerts
.Op Fl CAfile Ar file
.Op Fl caname Ar name
.Op Fl CApath Ar directory
.Op Fl certfile Ar file
.Op Fl certpbe Ar alg
.Op Fl chain
.Op Fl clcerts
.Op Fl CSP Ar name
.Op Fl descert
.Op Fl export
.Op Fl in Ar file
.Op Fl info
.Op Fl inkey Ar file
.Op Fl keyex
.Op Fl keypbe Ar alg
.Op Fl keysig
.Op Fl macalg Ar alg
.Op Fl maciter
.Op Fl name Ar name
.Op Fl nocerts
.Op Fl nodes
.Op Fl noiter
.Op Fl nokeys
.Op Fl nomac
.Op Fl nomaciter
.Op Fl nomacver
.Op Fl noout
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl twopass
.nr nS 0
.Pp
The
.Nm pkcs12
command allows PKCS#12 files
.Pq sometimes referred to as PFX files
to be created and parsed.
By default, a PKCS#12 file is parsed;
a PKCS#12 file can be created by using the
.Fl export
option.
.Pp
The options for parsing a PKCS12 file are as follows:
.Bl -tag -width "XXXX"
.It Fl aes128 | aes192 | aes256 | des | des3
Encrypt private keys
using AES, DES, or triple DES, respectively.
The default is triple DES.
.It Fl cacerts
Only output CA certificates
.Pq not client certificates .
.It Fl clcerts
Only output client certificates
.Pq not CA certificates .
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl info
Output additional information about the PKCS#12 file structure,
algorithms used, and iteration counts.
.It Fl nocerts
Do not output certificates.
.It Fl nodes
Do not encrypt private keys.
.It Fl nokeys
Do not output private keys.
.It Fl nomacver
Do not attempt to verify the integrity MAC before reading the file.
.It Fl noout
Do not output the keys and certificates to the output file
version of the PKCS#12 file.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl passin Ar arg
The key password source.
.It Fl passout Ar arg
The output file password source.
.It Fl twopass
Prompt for separate integrity and encryption passwords: most software
always assumes these are the same so this option will render such
PKCS#12 files unreadable.
.El
.Pp
The options for PKCS12 file creation are as follows:
.Bl -tag -width "XXXX"
.It Fl CAfile Ar file
CA storage as a file.
.It Fl CApath Ar directory
CA storage as a directory.
The directory must be a standard certificate directory:
that is, a hash of each subject name (using
.Nm x509 Fl hash )
should be linked to each certificate.
.It Fl caname Ar name
Specify the
.Qq friendly name
for other certificates.
May be used multiple times to specify names for all certificates
in the order they appear.
.It Fl certfile Ar file
A file to read additional certificates from.
.It Fl certpbe Ar alg , Fl keypbe Ar alg
Specify the algorithm used to encrypt the private key and
certificates to be selected.
Any PKCS#5 v1.5 or PKCS#12 PBE algorithm name can be used.
If a cipher name
(as output by the
.Cm list-cipher-algorithms
command) is specified then it
is used with PKCS#5 v2.0.
For interoperability reasons it is advisable to only use PKCS#12 algorithms.
.It Fl chain
Include the entire certificate chain of the user certificate.
The standard CA store is used for this search.
If the search fails, it is considered a fatal error.
.It Fl CSP Ar name
Write
.Ar name
as a Microsoft CSP name.
.It Fl descert
Encrypt the certificate using triple DES; this may render the PKCS#12
file unreadable by some
.Qq export grade
software.
By default, the private key is encrypted using triple DES and the
certificate using 40-bit RC2.
.It Fl export
Create a PKCS#12 file (rather than parsing one).
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
The order doesn't matter but one private key and its corresponding
certificate should be present.
If additional certificates are present, they will also be included
in the PKCS#12 file.
.It Fl inkey Ar file
File to read a private key from.
If not present, a private key must be present in the input file.
.It Fl keyex | keysig
Specify whether the private key is to be used for key exchange or just signing.
Normally,
.Qq export grade
software will only allow 512-bit RSA keys to be
used for encryption purposes, but arbitrary length keys for signing.
The
.Fl keysig
option marks the key for signing only.
Signing only keys can be used for S/MIME signing, authenticode
(ActiveX control signing)
and SSL client authentication.
.It Fl macalg Ar alg
Specify the MAC digest algorithm.
The default is SHA1.
.It Fl maciter
Included for compatibility only:
it used to be needed to use MAC iterations counts
but they are now used by default.
.It Fl name Ar name
Specify the
.Qq friendly name
for the certificate and private key.
This name is typically displayed in list boxes by software importing the file.
.It Fl nomac
Don't attempt to provide the MAC integrity.
.It Fl nomaciter , noiter
Affect the iteration counts on the MAC and key algorithms.
.Pp
To discourage attacks by using large dictionaries of common passwords,
the algorithm that derives keys from passwords can have an iteration count
applied to it: this causes a certain part of the algorithm to be repeated
and slows it down.
The MAC is used to check the file integrity but since it will normally
have the same password as the keys and certificates it could also be attacked.
By default, both MAC and encryption iteration counts are set to 2048;
using these options the MAC and encryption iteration counts can be set to 1.
Since this reduces the file security you should not use these options
unless you really have to.
Most software supports both MAC and key iteration counts.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl passin Ar arg
The key password source.
.It Fl passout Ar arg
The output file password source.
.El
.Sh PKEY
.nr nS 1
.Nm "openssl pkey"
.Op Ar cipher
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubin
.Op Fl pubout
.Op Fl text
.Op Fl text_pub
.nr nS 0
.Pp
The
.Nm pkey
command processes public or private keys.
They can be converted between various forms
and their components printed out.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Ar cipher
Encrypt the private key with the specified cipher.
Any algorithm name accepted by
.Xr EVP_get_cipherbyname 3
is acceptable, such as
.Cm des3 .
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
If the key is encrypted a pass phrase will be prompted for.
.It Fl inform Cm der | pem
The input format.
.It Fl noout
Do not output the encoded version of the key.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
If any encryption options are set then a pass phrase
will be prompted for.
.It Fl outform Cm der | pem
The output format.
.It Fl passin Ar arg
The key password source.
.It Fl passout Ar arg
The output file password source.
.It Fl pubin
Read in a public key, not a private key.
.It Fl pubout
Output a public key, not a private key.
Automatically set if the input is a public key.
.It Fl text
Print the public/private key in plain text.
.It Fl text_pub
Print out only public key components
even if a private key is being processed.
.El
.Sh PKEYPARAM
.Cm openssl pkeyparam
.Op Fl in Ar file
.Op Fl noout
.Op Fl out Ar file
.Op Fl text
.Pp
The
.Nm pkeyparam
command processes public or private keys.
The key type is determined by the PEM headers.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl noout
Do not output the encoded version of the parameters.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl text
Print the parameters in plain text.
.El
.Sh PKEYUTL
.nr nS 1
.Nm "openssl pkeyutl"
.Op Fl asn1parse
.Op Fl certin
.Op Fl decrypt
.Op Fl derive
.Op Fl encrypt
.Op Fl hexdump
.Op Fl in Ar file
.Op Fl inkey Ar file
.Op Fl keyform Cm der | pem
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl peerform Cm der | pem
.Op Fl peerkey Ar file
.Op Fl pkeyopt Ar opt : Ns Ar value
.Op Fl pubin
.Op Fl rev
.Op Fl sigfile Ar file
.Op Fl sign
.Op Fl verify
.Op Fl verifyrecover
.nr nS 0
.Pp
The
.Nm pkeyutl
command can be used to perform public key operations using
any supported algorithm.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl asn1parse
ASN.1 parse the output data.
This is useful when combined with the
.Fl verifyrecover
option when an ASN.1 structure is signed.
.It Fl certin
The input is a certificate containing a public key.
.It Fl decrypt
Decrypt the input data using a private key.
.It Fl derive
Derive a shared secret using the peer key.
.It Fl encrypt
Encrypt the input data using a public key.
.It Fl hexdump
Hex dump the output data.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl inkey Ar file
The input key file.
By default it should be a private key.
.It Fl keyform Cm der | pem
The key format.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl passin Ar arg
The key password source.
.It Fl peerform Cm der | pem
The peer key format.
.It Fl peerkey Ar file
The peer key file, used by key derivation (agreement) operations.
.It Fl pkeyopt Ar opt : Ns Ar value
Set the public key algorithm option
.Ar opt
to
.Ar value .
Unless otherwise mentioned, all algorithms support the format
.Ar digest : Ns Ar alg ,
which specifies the digest to use
for sign, verify, and verifyrecover operations.
The value
.Ar alg
should represent a digest name as used in the
.Xr EVP_get_digestbyname 3
function.
.Pp
The RSA algorithm supports the
encrypt, decrypt, sign, verify, and verifyrecover operations in general.
Some padding modes only support some of these
operations however.
.Bl -tag -width Ds
.It rsa_padding_mode : Ns Ar mode
This sets the RSA padding mode.
Acceptable values for
.Ar mode
are
.Cm pkcs1
for PKCS#1 padding;
.Cm none
for no padding;
.Cm oaep
for OAEP mode;
.Cm x931
for X9.31 mode;
and
.Cm pss
for PSS.
.Pp
In PKCS#1 padding if the message digest is not set then the supplied data is
signed or verified directly instead of using a DigestInfo structure.
If a digest is set then a DigestInfo
structure is used and its length
must correspond to the digest type.
For oeap mode only encryption and decryption is supported.
For x931 if the digest type is set it is used to format the block data;
otherwise the first byte is used to specify the X9.31 digest ID.
Sign, verify, and verifyrecover can be performed in this mode.
For pss mode only sign and verify are supported and the digest type must be
specified.
.It rsa_pss_saltlen : Ns Ar len
For pss
mode only this option specifies the salt length.
Two special values are supported:
-1 sets the salt length to the digest length.
When signing -2 sets the salt length to the maximum permissible value.
When verifying -2 causes the salt length to be automatically determined
based on the PSS block structure.
.El
.Pp
The DSA algorithm supports the sign and verify operations.
Currently there are no additional options other than
.Ar digest .
Only the SHA1 digest can be used and this digest is assumed by default.
.Pp
The DH algorithm supports the derive operation
and no additional options.
.Pp
The EC algorithm supports the sign, verify, and derive operations.
The sign and verify operations use ECDSA and derive uses ECDH.
Currently there are no additional options other than
.Ar digest .
Only the SHA1 digest can be used and this digest is assumed by default.
.It Fl pubin
The input file is a public key.
.It Fl rev
Reverse the order of the input buffer.
.It Fl sigfile Ar file
Signature file (verify operation only).
.It Fl sign
Sign the input data and output the signed result.
This requires a private key.
.It Fl verify
Verify the input data against the signature file and indicate if the
verification succeeded or failed.
.It Fl verifyrecover
Verify the input data and output the recovered data.
.El
.Sh PRIME
.Cm openssl prime
.Op Fl bits Ar n
.Op Fl checks Ar n
.Op Fl generate
.Op Fl hex
.Op Fl safe
.Ar p
.Pp
The
.Nm prime
command is used to generate prime numbers,
or to check numbers for primality.
Results are probabilistic:
they have an exceedingly high likelihood of being correct,
but are not guaranteed.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl bits Ar n
Specify the number of bits in the generated prime number.
Must be used in conjunction with
.Fl generate .
.It Fl checks Ar n
Perform a Miller-Rabin probabilistic primality test with
.Ar n
iterations.
The default is 20.
.It Fl generate
Generate a pseudo-random prime number.
Must be used in conjunction with
.Fl bits .
.It Fl hex
Output in hex format.
.It Fl safe
Generate only
.Qq safe
prime numbers
(i.e. a prime p so that (p-1)/2 is also prime).
.It Ar p
Test if number
.Ar p
is prime.
.El
.Sh RAND
.nr nS 1
.Nm "openssl rand"
.Op Fl base64
.Op Fl hex
.Op Fl out Ar file
.Ar num
.nr nS 0
.Pp
The
.Nm rand
command outputs
.Ar num
pseudo-random bytes.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl base64
Perform base64 encoding on the output.
.It Fl hex
Specify hexadecimal output.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.El
.Sh REQ
.nr nS 1
.Nm "openssl req"
.Op Fl asn1-kludge
.Op Fl batch
.Op Fl config Ar file
.Op Fl days Ar n
.Op Fl extensions Ar section
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl key Ar keyfile
.Op Fl keyform Cm der | pem
.Op Fl keyout Ar file
.Op Fl md4 | md5 | sha1
.Op Fl modulus
.Op Fl nameopt Ar option
.Op Fl new
.Op Fl newhdr
.Op Fl newkey Ar arg
.Op Fl no-asn1-kludge
.Op Fl nodes
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubkey
.Op Fl reqexts Ar section
.Op Fl reqopt Ar option
.Op Fl set_serial Ar n
.Op Fl subj Ar arg
.Op Fl subject
.Op Fl text
.Op Fl utf8
.Op Fl verbose
.Op Fl verify
.Op Fl x509
.nr nS 0
.Pp
The
.Nm req
command primarily creates and processes certificate requests
in PKCS#10 format.
It can additionally create self-signed certificates,
for use as root CAs, for example.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl asn1-kludge
Produce requests in an invalid format for certain picky CAs.
Very few CAs still require the use of this option.
.It Fl batch
Non-interactive mode.
.It Fl config Ar file
Specify an alternative configuration file.
.It Fl days Ar n
Specify the number of days to certify the certificate for.
The default is 30 days.
Used with the
.Fl x509
option.
.It Fl extensions Ar section , Fl reqexts Ar section
Specify alternative sections to include certificate
extensions (with
.Fl x509 )
or certificate request extensions,
allowing several different sections to be used in the same configuration file.
.It Fl in Ar file
The input file to read a request from,
or standard input if not specified.
A request is only read if the creation options
.Fl new
and
.Fl newkey
are not specified.
.It Fl inform Cm der | pem
The input format.
.It Fl key Ar keyfile
The file to read the private key from.
It also accepts PKCS#8 format private keys for PEM format files.
.It Fl keyform Cm der | pem
The format of the private key file specified in the
.Fl key
argument.
The default is
.Cm pem .
.It Fl keyout Ar file
The file to write the newly created private key to.
If this option is not specified,
the filename present in the configuration file is used.
.It Fl md5 | sha1 | sha256
The message digest to sign the request with.
This overrides the digest algorithm specified in the configuration file.
.Pp
Some public key algorithms may override this choice.
For instance, DSA signatures always use SHA1.
.It Fl modulus
Print the value of the modulus of the public key contained in the request.
.It Fl nameopt Ar option , Fl reqopt Ar option
Determine how the subject or issuer names are displayed.
.Ar option
can be a single option or multiple options separated by commas.
Alternatively, these options may be used more than once to set multiple options.
See the
.Sx X509
section below for details.
.It Fl new
Generate a new certificate request.
The user is prompted for the relevant field values.
The actual fields prompted for and their maximum and minimum sizes
are specified in the configuration file and any requested extensions.
.Pp
If the
.Fl key
option is not used, it will generate a new RSA private
key using information specified in the configuration file.
.It Fl newhdr
Add the word NEW to the PEM file header and footer lines
on the outputed request.
Some software and CAs need this.
.It Fl newkey Ar arg
Create a new certificate request and a new private key.
The argument takes one of several forms.
.Pp
.No rsa : Ns Ar nbits
generates an RSA key
.Ar nbits
in size.
If
.Ar nbits
is omitted
the default key size is used.
.Pp
.No dsa : Ns Ar file
generates a DSA key using the parameters in
.Ar file .
.Pp
.No param : Ns Ar file
generates a key using the parameters or certificate in
.Ar file .
.Pp
All other algorithms support the form
.Ar algorithm : Ns Ar file ,
where file may be an algorithm parameter file,
created by the
.Cm genpkey -genparam
command or an X.509 certificate for a key with appropriate algorithm.
.Ar file
can be omitted,
in which case any parameters can be specified via the
.Fl pkeyopt
option.
.It Fl no-asn1-kludge
Reverse the effect of
.Fl asn1-kludge .
.It Fl nodes
Do not encrypt the private key.
.It Fl noout
Do not output the encoded version of the request.
.It Fl out Ar file
The output file to write to,
or standard output if not spceified.
.It Fl outform Cm der | pem
The output format.
.It Fl passin Ar arg
The key password source.
.It Fl passout Ar arg
The output file password source.
.It Fl pubkey
Output the public key.
.It Fl reqopt Ar option
Customise the output format used with
.Fl text .
The
.Ar option
argument can be a single option or multiple options separated by commas.
See also the discussion of
.Fl certopt
in the
.Nm x509
command.
.It Fl set_serial Ar n
Serial number to use when outputting a self-signed certificate.
This may be specified as a decimal value or a hex value if preceded by
.Sq 0x .
It is possible to use negative serial numbers but this is not recommended.
.It Fl subj Ar arg
Replaces the subject field of an input request
with the specified data and output the modified request.
.Ar arg
must be formatted as /type0=value0/type1=value1/type2=...;
characters may be escaped by
.Sq \e
(backslash);
no spaces are skipped.
.It Fl subject
Print the request subject (or certificate subject if
.Fl x509
is specified).
.It Fl text
Print the certificate request in plain text.
.It Fl utf8
Interpret field values as UTF8 strings, not ASCII.
.It Fl verbose
Print extra details about the operations being performed.
.It Fl verify
Verify the signature on the request.
.It Fl x509
Output a self-signed certificate instead of a certificate request.
This is typically used to generate a test certificate or a self-signed root CA.
The extensions added to the certificate (if any)
are specified in the configuration file.
Unless specified using the
.Fl set_serial
option, 0 is used for the serial number.
.El
.Pp
The configuration options are specified in the
.Qq req
section of the configuration file.
The options available are as follows:
.Bl -tag -width "XXXX"
.It Cm attributes
The section containing any request attributes: its format
is the same as
.Cm distinguished_name .
Typically these may contain the challengePassword or unstructuredName types.
They are currently ignored by the
.Nm openssl
request signing utilities, but some CAs might want them.
.It Cm default_bits
The default key size, in bits.
The default is 2048.
It is used if the
.Fl new
option is used and can be overridden by using the
.Fl newkey
option.
.It Cm default_keyfile
The default file to write a private key to,
or standard output if not specified.
It can be overridden by the
.Fl keyout
option.
.It Cm default_md
The digest algorithm to use.
Possible values include
.Cm md5 ,
.Cm sha1
and
.Cm sha256
(the default).
It can be overridden on the command line.
.It Cm distinguished_name
The section containing the distinguished name fields to
prompt for when generating a certificate or certificate request.
The format is described below.
.It Cm encrypt_key
If set to
.Qq no
and a private key is generated, it is not encrypted.
It is equivalent to the
.Fl nodes
option.
For compatibility,
.Cm encrypt_rsa_key
is an equivalent option.
.It Cm input_password | output_password
The passwords for the input private key file (if present)
and the output private key file (if one will be created).
The command line options
.Fl passin
and
.Fl passout
override the configuration file values.
.It Cm oid_file
A file containing additional OBJECT IDENTIFIERS.
Each line of the file should consist of the numerical form of the
object identifier, followed by whitespace, then the short name followed
by whitespace and finally the long name.
.It Cm oid_section
Specify a section in the configuration file containing extra
object identifiers.
Each line should consist of the short name of the
object identifier followed by
.Sq =
and the numerical form.
The short and long names are the same when this option is used.
.It Cm prompt
If set to
.Qq no ,
it disables prompting of certificate fields
and just takes values from the config file directly.
It also changes the expected format of the
.Cm distinguished_name
and
.Cm attributes
sections.
.It Cm req_extensions
The configuration file section containing a list of
extensions to add to the certificate request.
It can be overridden by the
.Fl reqexts
option.
.It Cm string_mask
Limit the string types for encoding certain fields.
The following values may be used, limiting strings to the indicated types:
.Bl -tag -width "MASK:number"
.It Cm utf8only
UTF8String.
This is the default, as recommended by PKIX in RFC 2459.
.It Cm default
PrintableString, IA5String, T61String, BMPString, UTF8String.
.It Cm pkix
PrintableString, IA5String, BMPString, UTF8String.
Inspired by the PKIX recommendation in RFC 2459 for certificates
generated before 2004, but differs by also permitting IA5String.
.It Cm nombstr
PrintableString, IA5String, T61String, UniversalString.
A workaround for some ancient software that had problems
with the variable-sized BMPString and UTF8String types.
.It Cm MASK : Ns Ar number
An explicit bitmask of permitted types, where
.Ar number
is a C-style hex, decimal, or octal number that's a bit-wise OR of
.Dv B_ASN1_*
values from
.In openssl/asn1.h .
.El
.It Cm utf8
If set to
.Qq yes ,
field values are interpreted as UTF8 strings.
.It Cm x509_extensions
The configuration file section containing a list of
extensions to add to a certificate generated when the
.Fl x509
switch is used.
It can be overridden by the
.Fl extensions
command line switch.
.El
.Pp
There are two separate formats for the distinguished name and attribute
sections.
If the
.Fl prompt
option is set to
.Qq no ,
then these sections just consist of field names and values.
If the
.Fl prompt
option is absent or not set to
.Qq no ,
then the file contains field prompting information of the form:
.Bd -unfilled -offset indent
fieldName="prompt"
fieldName_default="default field value"
fieldName_min= 2
fieldName_max= 4
.Ed
.Pp
.Qq fieldName
is the field name being used, for example
.Cm commonName
(or CN).
The
.Qq prompt
string is used to ask the user to enter the relevant details.
If the user enters nothing, the default value is used;
if no default value is present, the field is omitted.
A field can still be omitted if a default value is present,
if the user just enters the
.Sq \&.
character.
.Pp
The number of characters entered must be between the
fieldName_min and fieldName_max limits:
there may be additional restrictions based on the field being used
(for example
.Cm countryName
can only ever be two characters long and must fit in a
.Cm PrintableString ) .
.Pp
Some fields (such as
.Cm organizationName )
can be used more than once in a DN.
This presents a problem because configuration files will
not recognize the same name occurring twice.
To avoid this problem, if the
.Cm fieldName
contains some characters followed by a full stop, they will be ignored.
So, for example, a second
.Cm organizationName
can be input by calling it
.Qq 1.organizationName .
.Pp
The actual permitted field names are any object identifier short or
long names.
These are compiled into
.Nm openssl
and include the usual values such as
.Cm commonName , countryName , localityName , organizationName ,
.Cm organizationUnitName , stateOrProvinceName .
Additionally,
.Cm emailAddress
is included as well as
.Cm name , surname , givenName , initials
and
.Cm dnQualifier .
.Pp
Additional object identifiers can be defined with the
.Cm oid_file
or
.Cm oid_section
options in the configuration file.
Any additional fields will be treated as though they were a
.Cm DirectoryString .
.Sh RSA
.nr nS 1
.Nm "openssl rsa"
.Op Fl aes128 | aes192 | aes256 | des | des3
.Op Fl check
.Op Fl in Ar file
.Op Fl inform Cm der | net | pem
.Op Fl modulus
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | net | pem
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubin
.Op Fl pubout
.Op Fl sgckey
.Op Fl text
.nr nS 0
.Pp
The
.Nm rsa
command processes RSA keys.
They can be converted between various forms and their components printed out.
.Nm rsa
uses the traditional
.Nm SSLeay
compatible format for private key encryption:
newer applications should use the more secure PKCS#8 format using the
.Nm pkcs8
utility.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl aes128 | aes192 | aes256 | des | des3
Encrypt the private key with the AES, DES,
or the triple DES ciphers, respectively, before outputting it.
A pass phrase is prompted for.
If none of these options are specified, the key is written in plain text.
This means that using the
.Nm rsa
utility to read in an encrypted key with no encryption option can be used
to remove the pass phrase from a key, or by setting the encryption options
it can be used to add or change the pass phrase.
These options can only be used with PEM format output files.
.It Fl check
Check the consistency of an RSA private key.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
If the key is encrypted, a pass phrase will be prompted for.
.It Fl inform Cm der | net | pem
The input format.
.It Fl noout
Do not output the encoded version of the key.
.It Fl modulus
Print the value of the modulus of the key.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl outform Cm der | net | pem
The output format.
.It Fl passin Ar arg
The key password source.
.It Fl passout Ar arg
The output file password source.
.It Fl pubin
Read in a public key,
not a private key.
.It Fl pubout
Output a public key,
not a private key.
Automatically set if the input is a public key.
.It Fl sgckey
Use the modified NET algorithm used with some versions of Microsoft IIS
and SGC keys.
.It Fl text
Print the public/private key components in plain text.
.El
.Sh RSAUTL
.nr nS 1
.Nm "openssl rsautl"
.Op Fl asn1parse
.Op Fl certin
.Op Fl decrypt
.Op Fl encrypt
.Op Fl hexdump
.Op Fl in Ar file
.Op Fl inkey Ar file
.Op Fl keyform Cm der | pem
.Op Fl oaep | pkcs | raw | ssl
.Op Fl out Ar file
.Op Fl pubin
.Op Fl sign
.Op Fl verify
.nr nS 0
.Pp
The
.Nm rsautl
command can be used to sign, verify, encrypt and decrypt
data using the RSA algorithm.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl asn1parse
Asn1parse the output data; this is useful when combined with the
.Fl verify
option.
.It Fl certin
The input is a certificate containing an RSA public key.
.It Fl decrypt
Decrypt the input data using an RSA private key.
.It Fl encrypt
Encrypt the input data using an RSA public key.
.It Fl hexdump
Hex dump the output data.
.It Fl in Ar file
The input to read from,
or standard input if not specified.
.It Fl inkey Ar file
The input key file; by default an RSA private key.
.It Fl keyform Cm der | pem
The private ket format.
The default is
.Cm pem .
.It Fl oaep | pkcs | raw | ssl
The padding to use:
PKCS#1 OAEP, PKCS#1 v1.5 (the default), or no padding, respectively.
For signatures, only
.Fl pkcs
and
.Fl raw
can be used.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl pubin
The input file is an RSA public key.
.It Fl sign
Sign the input data and output the signed result.
This requires an RSA private key.
.It Fl verify
Verify the input data and output the recovered data.
.El
.Sh S_CLIENT
.nr nS 1
.Nm "openssl s_client"
.Op Fl 4 | 6
.Op Fl bugs
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl check_ss_sig
.Op Fl cipher Ar cipherlist
.Op Fl connect Ar host Ns Op : Ns Ar port
.Op Fl crl_check
.Op Fl crl_check_all
.Op Fl crlf
.Op Fl debug
.Op Fl extended_crl
.Op Fl ign_eof
.Op Fl ignore_critical
.Op Fl issuer_checks
.Op Fl key Ar keyfile
.Op Fl msg
.Op Fl nbio
.Op Fl nbio_test
.Op Fl no_ticket
.Op Fl no_tls1
.Op Fl no_tls1_1
.Op Fl no_tls1_2
.Op Fl pause
.Op Fl policy_check
.Op Fl prexit
.Op Fl proxy Ar host : Ns Ar port
.Op Fl psk Ar key
.Op Fl psk_identity Ar identity
.Op Fl quiet
.Op Fl reconnect
.Op Fl servername Ar name
.Op Fl showcerts
.Op Fl starttls Ar protocol
.Op Fl state
.Op Fl tls1
.Op Fl tls1_1
.Op Fl tls1_2
.Op Fl tlsextdebug
.Op Fl verify Ar depth
.Op Fl x509_strict
.Op Fl xmpphost Ar host
.nr nS 0
.Pp
The
.Nm s_client
command implements a generic SSL/TLS client which connects
to a remote host using SSL/TLS.
.Pp
If a connection is established with an SSL server, any data received
from the server is displayed and any key presses will be sent to the
server.
When used interactively (which means neither
.Fl quiet
nor
.Fl ign_eof
have been given), the session will be renegotiated if the line begins with an
.Cm R ;
if the line begins with a
.Cm Q
or if end of file is reached, the connection will be closed down.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 4
Attempt connections using IPv4 only.
.It Fl 6
Attempt connections using IPv6 only.
.It Fl bugs
Enable various workarounds for buggy implementations.
.It Fl CAfile Ar file
A
.Ar file
containing trusted certificates to use during server authentication
and to use when attempting to build the client certificate chain.
.It Fl CApath Ar directory
The
.Ar directory
to use for server certificate verification.
This directory must be in
.Qq hash format ;
see
.Fl verify
for more information.
These are also used when building the client certificate chain.
.It Fl cert Ar file
The certificate to use, if one is requested by the server.
The default is not to use a certificate.
.It Xo
.Fl check_ss_sig ,
.Fl crl_check ,
.Fl crl_check_all ,
.Fl extended_crl ,
.Fl ignore_critical ,
.Fl issuer_checks ,
.Fl policy_check ,
.Fl x509_strict
.Xc
Set various certificate chain validation options.
See the
.Nm verify
command for details.
.It Fl cipher Ar cipherlist
Modify the cipher list sent by the client.
Although the server determines which cipher suite is used, it should take
the first supported cipher in the list sent by the client.
See the
.Nm ciphers
command for more information.
.It Fl connect Ar host Ns Op : Ns Ar port
The
.Ar host
and
.Ar port
to connect to.
If not specified, an attempt is made to connect to the local host
on port 4433.
Alternatively, the host and port pair may be separated using a forward-slash
character,
which is useful for numeric IPv6 addresses.
.It Fl crlf
Translate a line feed from the terminal into CR+LF,
as required by some servers.
.It Fl debug
Print extensive debugging information, including a hex dump of all traffic.
.It Fl ign_eof
Inhibit shutting down the connection when end of file is reached in the input.
.It Fl key Ar keyfile
The private key to use.
If not specified, the certificate file will be used.
.It Fl msg
Show all protocol messages with hex dump.
.It Fl nbio
Turn on non-blocking I/O.
.It Fl nbio_test
Test non-blocking I/O.
.It Fl no_tls1 | no_tls1_1 | no_tls1_2
Disable the use of TLS1.0, 1.1, and 1.2, respectively.
.It Fl no_ticket
Disable RFC 4507 session ticket support.
.It Fl pause
Pause 1 second between each read and write call.
.It Fl prexit
Print session information when the program exits.
This will always attempt
to print out information even if the connection fails.
Normally, information will only be printed out once if the connection succeeds.
This option is useful because the cipher in use may be renegotiated
or the connection may fail because a client certificate is required or is
requested only after an attempt is made to access a certain URL.
Note that the output produced by this option is not always accurate
because a connection might never have been established.
.It Fl proxy Ar host : Ns Ar port
Use the HTTP proxy at
.Ar host
and
.Ar port .
The connection to the proxy is done in cleartext and the
.Fl connect
argument is given to the proxy.
If not specified, localhost is used as final destination.
After that, switch the connection through the proxy to the destination
to TLS.
.It Fl psk Ar key
Use the PSK key
.Ar key
when using a PSK cipher suite.
The key is given as a hexadecimal number without the leading 0x,
for example -psk 1a2b3c4d.
.It Fl psk_identity Ar identity
Use the PSK
.Ar identity
when using a PSK cipher suite.
.It Fl quiet
Inhibit printing of session and certificate information.
This implicitly turns on
.Fl ign_eof
as well.
.It Fl reconnect
Reconnect to the same server 5 times using the same session ID; this can
be used as a test that session caching is working.
.It Fl servername Ar name
Include the TLS Server Name Indication (SNI) extension in the ClientHello
message, using the specified server
.Ar name .
.It Fl showcerts
Display the whole server certificate chain: normally only the server
certificate itself is displayed.
.It Fl starttls Ar protocol
Send the protocol-specific messages to switch to TLS for communication.
.Ar protocol
is a keyword for the intended protocol.
Currently, the supported keywords are
.Qq ftp ,
.Qq imap ,
.Qq smtp ,
.Qq pop3 ,
and
.Qq xmpp .
.It Fl state
Print the SSL session states.
.It Fl tls1 | tls1_1 | tls1_2
Permit only TLS1.0, 1.1, or 1.2, respectively.
.It Fl tlsextdebug
Print a hex dump of any TLS extensions received from the server.
.It Fl verify Ar depth
Turn on server certificate verification,
with a maximum length of
.Ar depth .
Currently the verify operation continues after errors so all the problems
with a certificate chain can be seen.
As a side effect the connection will never fail due to a server
certificate verify failure.
.It Fl xmpphost Ar hostname
When used with
.Fl starttls Ar xmpp ,
specify the host for the "to" attribute of the stream element.
If this option is not specified then the host specified with
.Fl connect
will be used.
.El
.Sh S_SERVER
.nr nS 1
.Nm "openssl s_server"
.Op Fl accept Ar port
.Op Fl bugs
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl cipher Ar cipherlist
.Op Fl context Ar id
.Op Fl crl_check
.Op Fl crl_check_all
.Op Fl crlf
.Op Fl dcert Ar file
.Op Fl debug
.Op Fl dhparam Ar file
.Op Fl dkey Ar file
.Op Fl hack
.Op Fl HTTP
.Op Fl id_prefix Ar arg
.Op Fl key Ar keyfile
.Op Fl msg
.Op Fl nbio
.Op Fl nbio_test
.Op Fl no_dhe
.Op Fl no_tls1
.Op Fl no_tls1_1
.Op Fl no_tls1_2
.Op Fl no_tmp_rsa
.Op Fl nocert
.Op Fl psk Ar key
.Op Fl psk_hint Ar hint
.Op Fl quiet
.Op Fl serverpref
.Op Fl state
.Op Fl tls1
.Op Fl tls1_1
.Op Fl tls1_2
.Op Fl Verify Ar depth
.Op Fl verify Ar depth
.Op Fl WWW
.Op Fl www
.nr nS 0
.Pp
The
.Nm s_server
command implements a generic SSL/TLS server which listens
for connections on a given port using SSL/TLS.
.Pp
If a connection request is established with a client and neither the
.Fl www
nor the
.Fl WWW
option has been used, then any data received
from the client is displayed and any key presses are sent to the client.
Certain single letter commands perform special operations:
.Pp
.Bl -tag -width "XXXX" -compact
.It Ic P
Send plain text, which should cause the client to disconnect.
.It Ic Q
End the current SSL connection and exit.
.It Ic q
End the current SSL connection, but still accept new connections.
.It Ic R
Renegotiate the SSL session and request a client certificate.
.It Ic r
Renegotiate the SSL session.
.It Ic S
Print out some session cache status information.
.El
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl accept Ar port
Listen on TCP
.Ar port
for connections.
The default is port 4433.
.It Fl bugs
Enable various workarounds for buggy implementations.
.It Fl CAfile Ar file
A
.Ar file
containing trusted certificates to use during client authentication
and to use when attempting to build the server certificate chain.
The list is also used in the list of acceptable client CAs passed to the
client when a certificate is requested.
.It Fl CApath Ar directory
The
.Ar directory
to use for client certificate verification.
This directory must be in
.Qq hash format ;
see
.Fl verify
for more information.
These are also used when building the server certificate chain.
.It Fl cert Ar file
The certificate to use: most server's cipher suites require the use of a
certificate and some require a certificate with a certain public key type.
For example, the DSS cipher suites require a certificate containing a DSS
(DSA) key.
If not specified, the file
.Pa server.pem
will be used.
.It Fl cipher Ar cipherlist
Modify the cipher list used by the server.
This allows the cipher list used by the server to be modified.
When the client sends a list of supported ciphers, the first client cipher
also included in the server list is used.
Because the client specifies the preference order, the order of the server
cipherlist is irrelevant.
See the
.Nm ciphers
command for more information.
.It Fl context Ar id
Set the SSL context ID.
It can be given any string value.
.It Fl crl_check , crl_check_all
Check the peer certificate has not been revoked by its CA.
The CRLs are appended to the certificate file.
.Fl crl_check_all
checks all CRLs of all CAs in the chain.
.It Fl crlf
Translate a line feed from the terminal into CR+LF.
.It Fl dcert Ar file , Fl dkey Ar file
Specify an additional certificate and private key; these behave in the
same manner as the
.Fl cert
and
.Fl key
options except there is no default if they are not specified
(no additional certificate or key is used).
By using RSA and DSS certificates and keys,
a server can support clients which only support RSA or DSS cipher suites
by using an appropriate certificate.
.It Fl debug
Print extensive debugging information, including a hex dump of all traffic.
.It Fl dhparam Ar file
The DH parameter file to use.
The ephemeral DH cipher suites generate keys
using a set of DH parameters.
If not specified, an attempt is made to
load the parameters from the server certificate file.
If this fails, a static set of parameters hard coded into the
.Nm s_server
program will be used.
.It Fl hack
Enables a further workaround for some early Netscape SSL code.
.It Fl HTTP
Emulate a simple web server.
Pages are resolved relative to the current directory.
For example if the URL
.Pa https://myhost/page.html
is requested, the file
.Pa ./page.html
will be loaded.
The files loaded are assumed to contain a complete and correct HTTP
response (lines that are part of the HTTP response line and headers
must end with CRLF).
.It Fl id_prefix Ar arg
Generate SSL/TLS session IDs prefixed by
.Ar arg .
This is mostly useful for testing any SSL/TLS code
that wish to deal with multiple servers,
when each of which might be generating a unique range of session IDs.
.It Fl key Ar keyfile
The private key to use.
If not specified, the certificate file will be used.
.It Fl msg
Show all protocol messages with hex dump.
.It Fl nbio
Turn on non-blocking I/O.
.It Fl nbio_test
Test non-blocking I/O.
.It Fl no_dhe
Disable ephemeral DH cipher suites.
.It Fl no_tls1 | no_tls1_1 | no_tls1_2
Disable the use of TLS1.0, 1.1, and 1.2, respectively.
.It Fl no_tmp_rsa
Disable temporary RSA key generation.
.It Fl nocert
Do not use a certificate.
This restricts the cipher suites available to the anonymous ones
(currently just anonymous DH).
.It Fl psk Ar key
Use the PSK key
.Ar key
when using a PSK cipher suite.
The key is given as a hexadecimal number without the leading 0x,
for example -psk 1a2b3c4d.
.It Fl psk_hint Ar hint
Use the PSK identity hint
.Ar hint
when using a PSK cipher suite.
.It Fl quiet
Inhibit printing of session and certificate information.
.It Fl serverpref
Use server's cipher preferences.
.It Fl state
Print the SSL session states.
.It Fl tls1 | tls1_1 | tls1_2
Permit only TLS1.0, 1.1, or 1.2, respectively.
.It Fl WWW
Emulate a simple web server.
Pages are resolved relative to the current directory.
For example if the URL
.Pa https://myhost/page.html
is requested, the file
.Pa ./page.html
will be loaded.
.It Fl www
Send a status message to the client when it connects,
including information about the ciphers used and various session parameters.
The output is in HTML format so this option will normally be used with a
web browser.
.It Fl Verify Ar depth , Fl verify Ar depth
Request a certificate chain from the client,
with a maximum length of
.Ar depth .
With
.Fl Verify ,
the client must supply a certificate or an error occurs;
with
.Fl verify ,
a certificate is requested but the client does not have to send one.
.El
.Sh S_TIME
.nr nS 1
.Nm "openssl s_time"
.Op Fl bugs
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl cipher Ar cipherlist
.Op Fl connect Ar host Ns Op : Ns Ar port
.Op Fl key Ar keyfile
.Op Fl nbio
.Op Fl new
.Op Fl no_shutdown
.Op Fl reuse
.Op Fl time Ar seconds
.Op Fl verify Ar depth
.Op Fl www Ar page
.nr nS 0
.Pp
The
.Nm s_time
command implements a generic SSL/TLS client which connects to a
remote host using SSL/TLS.
It can request a page from the server and includes
the time to transfer the payload data in its timing measurements.
It measures the number of connections within a given timeframe,
the amount of data transferred
.Pq if any ,
and calculates the average time spent for one connection.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl bugs
Enable various workarounds for buggy implementations.
.It Fl CAfile Ar file
A
.Ar file
containing trusted certificates to use during server authentication
and to use when attempting to build the client certificate chain.
.It Fl CApath Ar directory
The directory to use for server certificate verification.
This directory must be in
.Qq hash format ;
see
.Nm verify
for more information.
These are also used when building the client certificate chain.
.It Fl cert Ar file
The certificate to use, if one is requested by the server.
The default is not to use a certificate.
.It Fl cipher Ar cipherlist
Modify the cipher list sent by the client.
Although the server determines which cipher suite is used,
it should take the first supported cipher in the list sent by the client.
See the
.Nm ciphers
command for more information.
.It Fl connect Ar host Ns Op : Ns Ar port
The host and port to connect to.
.It Fl key Ar keyfile
The private key to use.
If not specified, the certificate file will be used.
.It Fl nbio
Turn on non-blocking I/O.
.It Fl new
Perform the timing test using a new session ID for each connection.
If neither
.Fl new
nor
.Fl reuse
are specified,
they are both on by default and executed in sequence.
.It Fl no_shutdown
Shut down the connection without sending a
.Qq close notify
shutdown alert to the server.
.It Fl reuse
Perform the timing test using the same session ID for each connection.
If neither
.Fl new
nor
.Fl reuse
are specified,
they are both on by default and executed in sequence.
.It Fl time Ar seconds
Limit
.Nm s_time
benchmarks to the number of
.Ar seconds .
The default is 30 seconds.
.It Fl verify Ar depth
Turn on server certificate verification,
with a maximum length of
.Ar depth .
Currently the verify operation continues after errors, so all the problems
with a certificate chain can be seen.
As a side effect,
the connection will never fail due to a server certificate verify failure.
.It Fl www Ar page
The page to GET from the server.
A value of
.Sq /
gets the index.htm[l] page.
If this parameter is not specified,
.Nm s_time
will only perform the handshake to establish SSL connections
but not transfer any payload data.
.El
.Sh SESS_ID
.nr nS 1
.Nm "openssl sess_id"
.Op Fl cert
.Op Fl context Ar ID
.Op Fl in Ar file
.Op Fl inform Cm der | pem
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Cm der | pem
.Op Fl text
.nr nS 0
.Pp
The
.Nm sess_id
program processes the encoded version of the SSL session structure and
optionally prints out SSL session details
(for example the SSL session master key)
in human-readable format.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl cert
If a certificate is present in the session,
it will be output using this option;
if the
.Fl text
option is also present, then it will be printed out in text form.
.It Fl context Ar ID
Set the session
.Ar ID .
The ID can be any string of characters.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl inform Cm der | pem
The input format.
.Cm der
uses an ASN.1 DER-encoded format containing session details.
The precise format can vary from one version to the next.
.Cm pem
is the default format: it consists of the DER
format base64-encoded with additional header and footer lines.
.It Fl noout
Do not output the encoded version of the session.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl outform Cm der | pem
The output format.
.It Fl text
Print the various public or private key components in plain text,
in addition to the encoded version.
.El
.Pp
The output of
.Nm sess_id
is composed as follows:
.Pp
.Bl -tag -width "Verify return code " -offset 3n -compact
.It Protocol
The protocol in use.
.It Cipher
The actual raw SSL or TLS cipher code.
.It Session-ID
The SSL session ID, in hex format.
.It Session-ID-ctx
The session ID context, in hex format.
.It Master-Key
The SSL session master key.
.It Key-Arg
The key argument; this is only used in SSL v2.
.It Start Time
The session start time.
.Ux
format.
.It Timeout
The timeout, in seconds.
.It Verify return code
The return code when a certificate is verified.
.El
.Pp
Since the SSL session output contains the master key, it is possible to read
the contents of an encrypted session using this information.
Therefore appropriate security precautions
should be taken if the information is being output by a
.Qq real
application.
This is, however, strongly discouraged and should only be used for
debugging purposes.
.Sh SMIME
.nr nS 1
.Nm "openssl smime"
.Oo
.Fl aes128 | aes192 | aes256 | des |
.Fl des3 | rc2-40 | rc2-64 | rc2-128
.Oc
.Op Fl binary
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl certfile Ar file
.Op Fl check_ss_sig
.Op Fl content Ar file
.Op Fl crl_check
.Op Fl crl_check_all
.Op Fl decrypt
.Op Fl encrypt
.Op Fl extended_crl
.Op Fl from Ar addr
.Op Fl ignore_critical
.Op Fl in Ar file
.Op Fl indef
.Op Fl inform Cm der | pem | smime
.Op Fl inkey Ar file
.Op Fl issuer_checks
.Op Fl keyform Cm pem
.Op Fl md Ar digest
.Op Fl noattr
.Op Fl nocerts
.Op Fl nochain
.Op Fl nodetach
.Op Fl noindef
.Op Fl nointern
.Op Fl nosigs
.Op Fl noverify
.Op Fl out Ar file
.Op Fl outform Cm der | pem | smime
.Op Fl passin Ar arg
.Op Fl pk7out
.Op Fl policy_check
.Op Fl recip Ar file
.Op Fl resign
.Op Fl sign
.Op Fl signer Ar file
.Op Fl stream
.Op Fl subject Ar s
.Op Fl text
.Op Fl to Ar addr
.Op Fl verify
.Op Fl x509_strict
.Op Ar cert.pem ...
.nr nS 0
.Pp
The
.Nm smime
command handles S/MIME mail.
It can encrypt, decrypt, sign, and verify S/MIME messages.
.Pp
The MIME message must be sent without any blank lines between the
headers and the output.
Some mail programs will automatically add a blank line.
Piping the mail directly to an MTA is one way to
achieve the correct format.
.Pp
The supplied message to be signed or encrypted must include the necessary
MIME headers or many S/MIME clients won't display it properly (if at all).
Use the
.Fl text
option to automatically add plain text headers.
.Pp
A
.Qq signed and encrypted
message is one where a signed message is then encrypted.
This can be produced by encrypting an already signed message.
.Pp
There are a number of operations that can be performed, as follows:
.Bl -tag -width "XXXX"
.It Fl decrypt
Decrypt mail using the supplied certificate and private key.
The input file is an encrypted mail message in MIME format.
The decrypted mail is written to the output file.
.It Fl encrypt
Encrypt mail for the given recipient certificates.
The input is the message to be encrypted.
The output file is the encrypted mail, in MIME format.
.It Fl pk7out
Take an input message and write out a PEM-encoded PKCS#7 structure.
.It Fl resign
Resign a message: take an existing message and one or more new signers.
.It Fl sign
Sign mail using the supplied certificate and private key.
The input file is the message to be signed.
The signed message, in MIME format, is written to the output file.
.It Fl verify
Verify signed mail.
The input is a signed mail message and the output is the signed data.
Both clear text and opaque signing is supported.
.El
.Pp
The remaining options are as follows:
.Bl -tag -width "XXXX"
.It Xo
.Fl aes128 | aes192 | aes256 | des |
.Fl des3 | rc2-40 | rc2-64 | rc2-128
.Xc
The encryption algorithm to use.
128-, 192-, or 256-bit AES, DES (56 bits), triple DES (168 bits),
or 40-, 64-, or 128-bit RC2, respectively;
if not specified, 40-bit RC2 is
used.
Only used with
.Fl encrypt .
.It Fl binary
Normally, the input message is converted to
.Qq canonical
format which uses CR/LF as end of line,
as required by the S/MIME specification.
When this option is present no translation occurs.
This is useful when handling binary data which may not be in MIME format.
.It Fl CAfile Ar file
A
.Ar file
containing trusted CA certificates; only used with
.Fl verify .
.It Fl CApath Ar directory
A
.Ar directory
containing trusted CA certificates; only used with
.Fl verify .
This directory must be a standard certificate directory:
that is, a hash of each subject name (using
.Nm x509 -hash )
should be linked to each certificate.
.It Ar cert.pem ...
One or more certificates of message recipients: used when encrypting
a message.
.It Fl certfile Ar file
Allows additional certificates to be specified.
When signing, these will be included with the message.
When verifying, these will be searched for the signers' certificates.
The certificates should be in PEM format.
.It Xo
.Fl check_ss_sig ,
.Fl crl_check ,
.Fl crl_check_all ,
.Fl extended_crl ,
.Fl ignore_critical ,
.Fl issuer_checks ,
.Fl policy_check ,
.Fl x509_strict
.Xc
Set various certificate chain validation options.
See the
.Nm verify
command for details.
.It Fl content Ar file
A file containing the detached content.
This is only useful with the
.Fl verify
option,
and only usable if the PKCS#7 structure is using the detached
signature form where the content is not included.
This option will override any content if the input format is S/MIME
and it uses the multipart/signed MIME content type.
.It Xo
.Fl from Ar addr ,
.Fl subject Ar s ,
.Fl to Ar addr
.Xc
The relevant mail headers.
These are included outside the signed
portion of a message so they may be included manually.
When signing, many S/MIME
mail clients check that the signer's certificate email
address matches the From: address.
.It Fl in Ar file
The input file to read from.
.It Fl indef
Enable streaming I/O for encoding operations.
This permits single pass processing of data without
the need to hold the entire contents in memory,
potentially supporting very large files.
Streaming is automatically set for S/MIME signing with detached
data if the output format is SMIME;
it is currently off by default for all other operations.
.It Fl inform Cm der | pem | smime
The input format.
.It Fl inkey Ar file
The private key to use when signing or decrypting,
which must match the corresponding certificate.
If this option is not specified, the private key must be included
in the certificate file specified with
the
.Fl recip
or
.Fl signer
file.
When signing,
this option can be used multiple times to specify successive keys.
.It Fl keyform Cm pem
Input private key format.
.It Fl md Ar digest
The digest algorithm to use when signing or resigning.
If not present then the default digest algorithm for the signing key is used
(usually SHA1).
.It Fl noattr
Do not include attributes.
.It Fl nocerts
Do not include the signer's certificate.
This will reduce the size of the signed message but the verifier must
have a copy of the signer's certificate available locally (passed using the
.Fl certfile
option, for example).
.It Fl nochain
Do not do chain verification of signers' certificates: that is,
don't use the certificates in the signed message as untrusted CAs.
.It Fl nodetach
When signing a message use opaque signing: this form is more resistant
to translation by mail relays but it cannot be read by mail agents that
do not support S/MIME.
Without this option cleartext signing with the MIME type
multipart/signed is used.
.It Fl noindef
Disable streaming I/O where it would produce an encoding of indefinite length
(currently has no effect).
.It Fl nointern
Only use certificates specified in the
.Fl certfile .
The supplied certificates can still be used as untrusted CAs.
.It Fl nosigs
Do not try to verify the signatures on the message.
.It Fl noverify
Do not verify the signer's certificate of a signed message.
.It Fl out Ar file
The output file to write to.
.It Fl outform Cm der | pem | smime
The output format.
The default is smime, which writes an S/MIME format message.
.Cm pem
and
.Cm der
change this to write PEM and DER format PKCS#7 structures instead.
This currently only affects the output format of the PKCS#7
structure; if no PKCS#7 structure is being output (for example with
.Fl verify
or
.Fl decrypt )
this option has no effect.
.It Fl passin Ar arg
The key password source.
.It Fl recip Ar file
The recipients certificate when decrypting a message.
This certificate
must match one of the recipients of the message or an error occurs.
.It Fl signer Ar file
A signing certificate when signing or resigning a message;
this option can be used multiple times if more than one signer is required.
If a message is being verified, the signer's certificates will be
written to this file if the verification was successful.
.It Fl stream
The same as
.Fl indef .
.It Fl text
Add plain text (text/plain) MIME
headers to the supplied message if encrypting or signing.
If decrypting or verifying, it strips off text headers:
if the decrypted or verified message is not of MIME type text/plain
then an error occurs.
.El
.Pp
The exit codes for
.Nm smime
are as follows:
.Pp
.Bl -tag -width "XXXX"  -offset 3n -compact
.It 0
The operation was completely successful.
.It 1
An error occurred parsing the command options.
.It 2
One of the input files could not be read.
.It 3
An error occurred creating the file or when reading the message.
.It 4
An error occurred decrypting or verifying the message.
.It 5
An error occurred writing certificates.
.El
.Sh SPEED
.nr nS 1
.Nm "openssl speed"
.Op Ar algorithm
.Op Fl decrypt
.Op Fl elapsed
.Op Fl evp Ar algorithm
.Op Fl mr
.Op Fl multi Ar number
.nr nS 0
.Pp
The
.Nm speed
command is used to test the performance of cryptographic algorithms.
.Bl -tag -width "XXXX"
.It Ar algorithm
Perform the test using
.Ar algorithm .
The default is to test all algorithms.
.It Fl decrypt
Time decryption instead of encryption;
must be used with
.Fl evp .
.It Fl elapsed
Measure time in real time instead of CPU user time.
.It Fl evp Ar algorithm
Perform the test using one of the algorithms accepted by
.Xr EVP_get_cipherbyname 3 .
.It Fl mr
Produce machine readable output.
.It Fl multi Ar number
Run
.Ar number
benchmarks in parallel.
.El
.Sh SPKAC
.nr nS 1
.Nm "openssl spkac"
.Op Fl challenge Ar string
.Op Fl in Ar file
.Op Fl key Ar keyfile
.Op Fl noout
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl pubkey
.Op Fl spkac Ar spkacname
.Op Fl spksect Ar section
.Op Fl verify
.nr nS 0
.Pp
The
.Nm spkac
command processes signed public key and challenge (SPKAC) files.
It can print out their contents, verify the signature,
and produce its own SPKACs from a supplied private key.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl challenge Ar string
The challenge string, if an SPKAC is being created.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
Ignored if the
.Fl key
option is used.
.It Fl key Ar keyfile
Create an SPKAC file using the private key in
.Ar keyfile .
The
.Fl in , noout , spksect ,
and
.Fl verify
options are ignored, if present.
.It Fl noout
Do not output the text version of the SPKAC.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl passin Ar arg
The key password source.
.It Fl pubkey
Output the public key of an SPKAC.
.It Fl spkac Ar spkacname
An alternative name for the variable containing the SPKAC.
The default is "SPKAC".
This option affects both generated and input SPKAC files.
.It Fl spksect Ar section
An alternative name for the
.Ar section
containing the SPKAC.
.It Fl verify
Verify the digital signature on the supplied SPKAC.
.El
.Sh TS
.nr nS 1
.Nm "openssl ts"
.Fl query
.Op Fl md4 | md5 | ripemd160 | sha1
.Op Fl cert
.Op Fl config Ar configfile
.Op Fl data Ar file_to_hash
.Op Fl digest Ar digest_bytes
.Op Fl in Ar request.tsq
.Op Fl no_nonce
.Op Fl out Ar request.tsq
.Op Fl policy Ar object_id
.Op Fl text
.nr nS 0
.Pp
.nr nS 1
.Nm "openssl ts"
.Fl reply
.Op Fl chain Ar certs_file.pem
.Op Fl config Ar configfile
.Op Fl in Ar response.tsr
.Op Fl inkey Ar private.pem
.Op Fl out Ar response.tsr
.Op Fl passin Ar arg
.Op Fl policy Ar object_id
.Op Fl queryfile Ar request.tsq
.Op Fl section Ar tsa_section
.Op Fl signer Ar tsa_cert.pem
.Op Fl text
.Op Fl token_in
.Op Fl token_out
.nr nS 0
.Pp
.nr nS 1
.Nm "openssl ts"
.Fl verify
.Op Fl CAfile Ar trusted_certs.pem
.Op Fl CApath Ar trusted_cert_path
.Op Fl data Ar file_to_hash
.Op Fl digest Ar digest_bytes
.Op Fl in Ar response.tsr
.Op Fl queryfile Ar request.tsq
.Op Fl token_in
.Op Fl untrusted Ar cert_file.pem
.nr nS 0
.Pp
The
.Nm ts
command is a basic Time Stamping Authority (TSA) client and server
application as specified in RFC 3161 (Time-Stamp Protocol, TSP).
A TSA can be part of a PKI deployment and its role is to provide long
term proof of the existence of specific data.
Here is a brief description of the protocol:
.Bl -enum
.It
The TSA client computes a one-way hash value for a data file and sends
the hash to the TSA.
.It
The TSA attaches the current date and time to the received hash value,
signs them and sends the time stamp token back to the client.
By creating this token the TSA certifies the existence of the original
data file at the time of response generation.
.It
The TSA client receives the time stamp token and verifies the
signature on it.
It also checks if the token contains the same hash
value that it had sent to the TSA.
.El
.Pp
There is one DER-encoded protocol data unit defined for transporting a time
stamp request to the TSA and one for sending the time stamp response
back to the client.
The
.Nm ts
command has three main functions:
creating a time stamp request based on a data file;
creating a time stamp response based on a request;
and verifying if a response corresponds
to a particular request or a data file.
.Pp
There is no support for sending the requests/responses automatically
over HTTP or TCP yet as suggested in RFC 3161.
Users must send the requests either by FTP or email.
.Pp
The
.Fl query
switch can be used for creating and printing a time stamp
request with the following options:
.Bl -tag -width Ds
.It Fl cert
Expect the TSA to include its signing certificate in the response.
.It Fl config Ar configfile
Specify an alternative configuration file.
Only the OID section is used.
.It Fl data Ar file_to_hash
The data file for which the time stamp request needs to be created.
The default is standard input.
.It Fl digest Ar digest_bytes
Specify the message imprint explicitly without the data file.
The imprint must be specified in a hexadecimal format,
two characters per byte,
the bytes optionally separated by colons.
The number of bytes must match the message digest algorithm in use.
.It Fl in Ar request.tsq
A previously created time stamp request in DER
format that will be printed into the output file.
Useful for examining the content of a request in human-readable format.
.It Fl md4 | md5 | ripemd160 | sha | sha1
The message digest to apply to the data file.
It supports all the message digest algorithms that are supported by the
.Nm dgst
command.
The default is SHA-1.
.It Fl no_nonce
Specify no nonce in the request.
The default, to include a 64-bit long pseudo-random nonce,
is recommended to protect against replay attacks.
.It Fl out Ar request.tsq
The output file to write to,
or standard output if not specified.
.It Fl policy Ar object_id
The policy that the client expects the TSA to use for creating the
time stamp token.
Either dotted OID notation or OID names defined
in the config file can be used.
If no policy is requested the TSA uses its own default policy.
.It Fl text
Output in human-readable text format instead of DER.
.El
.Pp
A time stamp response (TimeStampResp) consists of a response status
and the time stamp token itself (ContentInfo),
if the token generation was successful.
The
.Fl reply
command is for creating a time stamp
response or time stamp token based on a request and printing the
response/token in human-readable format.
If
.Fl token_out
is not specified the output is always a time stamp response (TimeStampResp),
otherwise it is a time stamp token (ContentInfo).
.Bl -tag -width Ds
.It Fl chain Ar certs_file.pem
The collection of PEM certificates
that will be included in the response
in addition to the signer certificate if the
.Fl cert
option was used for the request.
This file is supposed to contain the certificate chain
for the signer certificate from its issuer upwards.
The
.Fl reply
command does not build a certificate chain automatically.
.It Fl config Ar configfile
Specify an alternative configuration file.
.It Fl in Ar response.tsr
Specify a previously created time stamp response (or time stamp token, if
.Fl token_in
is also specified)
in DER format that will be written to the output file.
This option does not require a request;
it is useful, for example,
to examine the content of a response or token
or to extract the time stamp token from a response.
If the input is a token and the output is a time stamp response a default
.Qq granted
status info is added to the token.
.It Fl inkey Ar private.pem
The signer private key of the TSA in PEM format.
Overrides the
.Cm signer_key
config file option.
.It Fl out Ar response.tsr
The response is written to this file.
The format and content of the file depends on other options (see
.Fl text
and
.Fl token_out ) .
The default is stdout.
.It Fl passin Ar arg
The key password source.
.It Fl policy Ar object_id
The default policy to use for the response.
Either dotted OID notation or OID names defined
in the config file can be used.
If no policy is requested the TSA uses its own default policy.
.It Fl queryfile Ar request.tsq
The file containing a DER-encoded time stamp request.
.It Fl section Ar tsa_section
The config file section containing the settings for response generation.
.It Fl signer Ar tsa_cert.pem
The PEM signer certificate of the TSA.
The TSA signing certificate must have exactly one extended key usage
assigned to it: timeStamping.
The extended key usage must also be critical,
otherwise the certificate is going to be refused.
Overrides the
.Cm signer_cert
variable of the config file.
.It Fl text
Output in human-readable text format instead of DER.
.It Fl token_in
The input is a DER-encoded time stamp token (ContentInfo)
instead of a time stamp response (TimeStampResp).
.It Fl token_out
The output is a time stamp token (ContentInfo)
instead of a time stamp response (TimeStampResp).
.El
.Pp
The
.Fl verify
command is for verifying if a time stamp response or time stamp token
is valid and matches a particular time stamp request or data file.
The
.Fl verify
command does not use the configuration file.
.Bl -tag -width Ds
.It Fl CAfile Ar trusted_certs.pem
The file containing a set of trusted self-signed PEM CA certificates.
See
.Nm verify
for additional details.
Either this option or
.Fl CApath
must be specified.
.It Fl CApath Ar trusted_cert_path
The directory containing the trused CA certificates of the client.
See
.Nm verify
for additional details.
Either this option or
.Fl CAfile
must be specified.
.It Fl data Ar file_to_hash
The response or token must be verified against
.Ar file_to_hash .
The file is hashed with the message digest algorithm specified in the token.
The
.Fl digest
and
.Fl queryfile
options must not be specified with this one.
.It Fl digest Ar digest_bytes
The response or token must be verified against the message digest specified
with this option.
The number of bytes must match the message digest algorithm
specified in the token.
The
.Fl data
and
.Fl queryfile
options must not be specified with this one.
.It Fl in Ar response.tsr
The time stamp response that needs to be verified, in DER format.
This option in mandatory.
.It Fl queryfile Ar request.tsq
The original time stamp request, in DER format.
The
.Fl data
and
.Fl digest
options must not be specified with this one.
.It Fl token_in
The input is a DER-encoded time stamp token (ContentInfo)
instead of a time stamp response (TimeStampResp).
.It Fl untrusted Ar cert_file.pem
Additional untrusted PEM certificates which may be needed
when building the certificate chain for the TSA's signing certificate.
This file must contain the TSA signing certificate and
all intermediate CA certificates unless the response includes them.
.El
.Pp
Options specified on the command line always override
the settings in the config file:
.Bl -tag -width Ds
.It Cm tsa Ar section , Cm default_tsa
This is the main section and it specifies the name of another section
that contains all the options for the
.Fl reply
option.
This section can be overridden with the
.Fl section
command line switch.
.It Cm oid_file
See
.Nm ca
for a description.
.It Cm oid_section
See
.Nm ca
for a description.
.It Cm serial
The file containing the hexadecimal serial number of the
last time stamp response created.
This number is incremented by 1 for each response.
If the file does not exist at the time of response generation
a new file is created with serial number 1.
This parameter is mandatory.
.It Cm signer_cert
TSA signing certificate, in PEM format.
The same as the
.Fl signer
command line option.
.It Cm certs
A set of PEM-encoded certificates that need to be
included in the response.
The same as the
.Fl chain
command line option.
.It Cm signer_key
The private key of the TSA, in PEM format.
The same as the
.Fl inkey
command line option.
.It Cm default_policy
The default policy to use when the request does not mandate any policy.
The same as the
.Fl policy
command line option.
.It Cm other_policies
Comma separated list of policies that are also acceptable by the TSA
and used only if the request explicitly specifies one of them.
.It Cm digests
The list of message digest algorithms that the TSA accepts.
At least one algorithm must be specified.
This parameter is mandatory.
.It Cm accuracy
The accuracy of the time source of the TSA in seconds, milliseconds
and microseconds.
For example, secs:1, millisecs:500, microsecs:100.
If any of the components is missing,
zero is assumed for that field.
.It Cm clock_precision_digits
The maximum number of digits, which represent the fraction of seconds,
that need to be included in the time field.
The trailing zeroes must be removed from the time,
so there might actually be fewer digits
or no fraction of seconds at all.
The maximum value is 6;
the default is 0.
.It Cm ordering
If this option is yes,
the responses generated by this TSA can always be ordered,
even if the time difference between two responses is less
than the sum of their accuracies.
The default is no.
.It Cm tsa_name
Set this option to yes if the subject name of the TSA must be included in
the TSA name field of the response.
The default is no.
.It Cm ess_cert_id_chain
The SignedData objects created by the TSA always contain the
certificate identifier of the signing certificate in a signed
attribute (see RFC 2634, Enhanced Security Services).
If this option is set to yes and either the
.Cm certs
variable or the
.Fl chain
option is specified then the certificate identifiers of the chain will also
be included in the SigningCertificate signed attribute.
If this variable is set to no,
only the signing certificate identifier is included.
The default is no.
.El
.Sh VERIFY
.nr nS 1
.Nm "openssl verify"
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl check_ss_sig
.Op Fl crl_check
.Op Fl crl_check_all
.Op Fl explicit_policy
.Op Fl extended_crl
.Op Fl help
.Op Fl ignore_critical
.Op Fl inhibit_any
.Op Fl inhibit_map
.Op Fl issuer_checks
.Op Fl policy_check
.Op Fl purpose Ar purpose
.Op Fl untrusted Ar file
.Op Fl verbose
.Op Fl x509_strict
.Op Ar certificates
.nr nS 0
.Pp
The
.Nm verify
command verifies certificate chains.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl check_ss_sig
Verify the signature on the self-signed root CA.
This is disabled by default
because it doesn't add any security.
.It Fl CAfile Ar file
A
.Ar file
of trusted certificates.
The
.Ar file
should contain multiple certificates in PEM format, concatenated together.
.It Fl CApath Ar directory
A
.Ar directory
of trusted certificates.
The certificates, or symbolic links to them,
should have names of the form
.Ar hash Ns .0 ,
where
.Ar hash
is the hashed certificate subject name
(see the
.Fl hash
option of the
.Nm x509
utility).
.It Fl crl_check
Check end entity certificate validity by attempting to look up a valid CRL.
If a valid CRL cannot be found an error occurs.
.It Fl crl_check_all
Check the validity of all certificates in the chain by attempting
to look up valid CRLs.
.It Fl explicit_policy
Set policy variable require-explicit-policy (RFC 3280).
.It Fl extended_crl
Enable extended CRL features such as indirect CRLs and alternate CRL
signing keys.
.It Fl help
Print a usage message.
.It Fl ignore_critical
Ignore critical extensions instead of rejecting the certificate.
.It Fl inhibit_any
Set policy variable inhibit-any-policy (RFC 3280).
.It Fl inhibit_map
Set policy variable inhibit-policy-mapping (RFC 3280).
.It Fl issuer_checks
Print diagnostics relating to searches for the issuer certificate
of the current certificate
showing why each candidate issuer certificate was rejected.
The presence of rejection messages
does not itself imply that anything is wrong:
during the normal verify process several rejections may take place.
.It Fl policy_check
Enable certificate policy processing.
.It Fl purpose Ar purpose
The intended use for the certificate.
Without this option no chain verification will be done.
Currently accepted uses are
.Cm sslclient , sslserver ,
.Cm nssslserver , smimesign ,
.Cm smimeencrypt , crlsign ,
.Cm any ,
and
.Cm ocsphelper .
.It Fl untrusted Ar file
A
.Ar file
of untrusted certificates.
The
.Ar file
should contain multiple certificates.
.It Fl verbose
Print extra information about the operations being performed.
.It Fl x509_strict
Disable workarounds for broken certificates which have to be disabled
for strict X.509 compliance.
.It Ar certificates
One or more PEM
.Ar certificates
to verify.
If no certificate files are included, an attempt is made to read
a certificate from standard input.
If the first certificate filename begins with a dash,
use a lone dash to mark the last option.
.El
.Pp
The
.Nm verify
program uses the same functions as the internal SSL and S/MIME verification,
with one crucial difference:
wherever possible an attempt is made to continue after an error,
whereas normally the verify operation would halt on the first error.
This allows all the problems with a certificate chain to be determined.
.Pp
The verify operation consists of a number of separate steps.
Firstly a certificate chain is built up starting from the supplied certificate
and ending in the root CA.
It is an error if the whole chain cannot be built up.
The chain is built up by looking up the issuer's certificate of the current
certificate.
If a certificate is found which is its own issuer, it is assumed
to be the root CA.
.Pp
All certificates whose subject name matches the issuer name
of the current certificate are subject to further tests.
The relevant authority key identifier components of the current certificate
(if present) must match the subject key identifier (if present)
and issuer and serial number of the candidate issuer;
in addition the
.Cm keyUsage
extension of the candidate issuer (if present) must permit certificate signing.
.Pp
The lookup first looks in the list of untrusted certificates and if no match
is found the remaining lookups are from the trusted certificates.
The root CA is always looked up in the trusted certificate list:
if the certificate to verify is a root certificate,
then an exact match must be found in the trusted list.
.Pp
The second operation is to check every untrusted certificate's extensions for
consistency with the supplied purpose.
If the
.Fl purpose
option is not included, then no checks are done.
The supplied or
.Qq leaf
certificate must have extensions compatible with the supplied purpose
and all other certificates must also be valid CA certificates.
The precise extensions required are described in more detail in
the
.Nm X509
section below.
.Pp
The third operation is to check the trust settings on the root CA.
The root CA should be trusted for the supplied purpose.
A certificate with no trust settings is considered to be valid for
all purposes.
.Pp
The final operation is to check the validity of the certificate chain.
The validity period is checked against the current system time and the
.Cm notBefore
and
.Cm notAfter
dates in the certificate.
The certificate signatures are also checked at this point.
.Pp
If all operations complete successfully, the certificate is considered
valid.
If any operation fails then the certificate is not valid.
When a verify operation fails, the output messages can be somewhat cryptic.
The general form of the error message is:
.Bd -literal
server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024-bit)
error 24 at 1 depth lookup:invalid CA certificate
.Ed
.Pp
The first line contains the name of the certificate being verified, followed by
the subject name of the certificate.
The second line contains the error number and the depth.
The depth is the number of the certificate being verified when a
problem was detected starting with zero for the certificate being verified
itself, then 1 for the CA that signed the certificate and so on.
Finally a text version of the error number is presented.
.Pp
An exhaustive list of the error codes and messages is shown below; this also
includes the name of the error code as defined in the header file
.In openssl/x509_vfy.h .
Some of the error codes are defined but never returned: these are described as
.Qq unused .
.Bl -tag -width "XXXX"
.It 0 X509_V_OK
The operation was successful.
.It 2 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
The issuer certificate of an untrusted certificate could not be found.
.It 3 X509_V_ERR_UNABLE_TO_GET_CRL
The CRL of a certificate could not be found.
.It 4 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
The certificate signature could not be decrypted.
This means that the actual signature value could not be determined
rather than it not matching the expected value.
This is only meaningful for RSA keys.
.It 5 X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
The CRL signature could not be decrypted.
This means that the actual signature value could not be determined
rather than it not matching the expected value.
Unused.
.It 6 X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
The public key in the certificate
.Cm SubjectPublicKeyInfo
could not be read.
.It 7 X509_V_ERR_CERT_SIGNATURE_FAILURE
The signature of the certificate is invalid.
.It 8 X509_V_ERR_CRL_SIGNATURE_FAILURE
The signature of the certificate is invalid.
.It 9 X509_V_ERR_CERT_NOT_YET_VALID
The certificate is not yet valid: the
.Cm notBefore
date is after the current time.
.It 10 X509_V_ERR_CERT_HAS_EXPIRED
The certificate has expired; that is, the
.Cm notAfter
date is before the current time.
.It 11 X509_V_ERR_CRL_NOT_YET_VALID
The CRL is not yet valid.
.It 12 X509_V_ERR_CRL_HAS_EXPIRED
The CRL has expired.
.It 13 X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
The certificate
.Cm notBefore
field contains an invalid time.
.It 14 X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
The certificate
.Cm notAfter
field contains an invalid time.
.It 15 X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
The CRL
.Cm lastUpdate
field contains an invalid time.
.It 16 X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
The CRL
.Cm nextUpdate
field contains an invalid time.
.It 17 X509_V_ERR_OUT_OF_MEM
An error occurred trying to allocate memory.
This should never happen.
.It 18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
The passed certificate is self-signed and the same certificate cannot be
found in the list of trusted certificates.
.It 19 X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
The certificate chain could be built up using the untrusted certificates but
the root could not be found locally.
.It 20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
The issuer certificate of a locally looked up certificate could not be found.
This normally means the list of trusted certificates is not complete.
.It 21 X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
No signatures could be verified because the chain contains only one
certificate and it is not self-signed.
.It 22 X509_V_ERR_CERT_CHAIN_TOO_LONG
The certificate chain length is greater than the supplied maximum depth.
Unused.
.It 23 X509_V_ERR_CERT_REVOKED
The certificate has been revoked.
.It 24 X509_V_ERR_INVALID_CA
A CA certificate is invalid.
Either it is not a CA or its extensions are not consistent
with the supplied purpose.
.It 25 X509_V_ERR_PATH_LENGTH_EXCEEDED
The
.Cm basicConstraints
pathlength parameter has been exceeded.
.It 26 X509_V_ERR_INVALID_PURPOSE
The supplied certificate cannot be used for the specified purpose.
.It 27 X509_V_ERR_CERT_UNTRUSTED
The root CA is not marked as trusted for the specified purpose.
.It 28 X509_V_ERR_CERT_REJECTED
The root CA is marked to reject the specified purpose.
.It 29 X509_V_ERR_SUBJECT_ISSUER_MISMATCH
The current candidate issuer certificate was rejected because its subject name
did not match the issuer name of the current certificate.
Only displayed when the
.Fl issuer_checks
option is set.
.It 30 X509_V_ERR_AKID_SKID_MISMATCH
The current candidate issuer certificate was rejected because its subject key
identifier was present and did not match the authority key identifier current
certificate.
Only displayed when the
.Fl issuer_checks
option is set.
.It 31 X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
The current candidate issuer certificate was rejected because its issuer name
and serial number were present and did not match the authority key identifier
of the current certificate.
Only displayed when the
.Fl issuer_checks
option is set.
.It 32 X509_V_ERR_KEYUSAGE_NO_CERTSIGN
The current candidate issuer certificate was rejected because its
.Cm keyUsage
extension does not permit certificate signing.
.It 50 X509_V_ERR_APPLICATION_VERIFICATION
An application specific error.
Unused.
.El
.Sh VERSION
.Nm openssl version
.Op Fl abdfopv
.Pp
The
.Nm version
command is used to print out version information about
.Nm openssl .
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl a
All information: this is the same as setting all the other flags.
.It Fl b
The date the current version of
.Nm openssl
was built.
.It Fl d
.Ev OPENSSLDIR
setting.
.It Fl f
Compilation flags.
.It Fl o
Option information: various options set when the library was built.
.It Fl p
Platform setting.
.It Fl v
The current
.Nm openssl
version.
.El
.Sh X509
.nr nS 1
.Nm "openssl x509"
.Op Fl C
.Op Fl addreject Ar arg
.Op Fl addtrust Ar arg
.Op Fl alias
.Op Fl CA Ar file
.Op Fl CAcreateserial
.Op Fl CAform Cm der | pem
.Op Fl CAkey Ar file
.Op Fl CAkeyform Cm der | pem
.Op Fl CAserial Ar file
.Op Fl certopt Ar option
.Op Fl checkend Ar arg
.Op Fl clrext
.Op Fl clrreject
.Op Fl clrtrust
.Op Fl dates
.Op Fl days Ar arg
.Op Fl email
.Op Fl enddate
.Op Fl extensions Ar section
.Op Fl extfile Ar file
.Op Fl fingerprint
.Op Fl hash
.Op Fl in Ar file
.Op Fl inform Cm der | net | pem
.Op Fl issuer
.Op Fl issuer_hash
.Op Fl issuer_hash_old
.Op Fl keyform Cm der | pem
.Op Fl md5 | sha1
.Op Fl modulus
.Op Fl nameopt Ar option
.Op Fl noout
.Op Fl ocsp_uri
.Op Fl ocspid
.Op Fl out Ar file
.Op Fl outform Cm der | net | pem
.Op Fl passin Ar arg
.Op Fl pubkey
.Op Fl purpose
.Op Fl req
.Op Fl serial
.Op Fl set_serial Ar n
.Op Fl setalias Ar arg
.Op Fl signkey Ar file
.Op Fl startdate
.Op Fl subject
.Op Fl subject_hash
.Op Fl subject_hash_old
.Op Fl text
.Op Fl trustout
.Op Fl x509toreq
.nr nS 0
.Pp
The
.Nm x509
command is a multi-purpose certificate utility.
It can be used to display certificate information, convert certificates to
various forms, sign certificate requests like a
.Qq mini CA ,
or edit certificate trust settings.
.Pp
The following are x509 input, output, and general purpose options:
.Bl -tag -width "XXXX"
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
.It Fl inform Cm der | net | pem
The input format.
Normally, the command will expect an X.509 certificate,
but this can change if other options such as
.Fl req
are present.
.It Fl md5 | sha1
The digest to use.
This affects any signing or display option that uses a message digest,
such as the
.Fl fingerprint , signkey ,
and
.Fl CA
options.
If not specified, MD5 is used.
SHA1 is always used with DSA keys.
.It Fl out Ar file
The output file to write to,
or standard output if none is specified.
.It Fl outform Cm der | net | pem
The output format.
.It Fl passin Ar arg
The key password source.
.El
.Pp
The following are x509 display options:
.Bl -tag -width "XXXX"
.It Fl C
Output the certificate in the form of a C source file.
.It Fl certopt Ar option
Customise the output format used with
.Fl text ,
either using a list of comma-separated options or by specifying
.Fl certopt
multiple times.
The default behaviour is to print all fields.
The options are as follows:
.Pp
.Bl -tag -width "no_extensions" -offset indent -compact
.It Cm ca_default
Equivalent to
.Cm no_issuer , no_pubkey , no_header ,
.Cm no_version , no_sigdump ,
and
.Cm no_signame .
.It Cm compatible
Equivalent to no output options at all.
.It Cm ext_default
Print unsupported certificate extensions.
.It Cm ext_dump
Hex dump unsupported extensions.
.It Cm ext_error
Print an error message for unsupported certificate extensions.
.It Cm ext_parse
ASN.1 parse unsupported extensions.
.It Cm no_aux
Do not print certificate trust information.
.It Cm no_extensions
Do not print X509V3 extensions.
.It Cm no_header
Do not print header (Certificate and Data) information.
.It Cm no_issuer
Do not print the issuer name.
.It Cm no_pubkey
Do not print the public key.
.It Cm no_serial
Do not print the serial number.
.It Cm no_sigdump
Do not give a hexadecimal dump of the certificate signature.
.It Cm no_signame
Do not print the signature algorithm used.
.It Cm no_subject
Do not print the subject name.
.It Cm no_validity
Do not print the
.Cm notBefore
and
.Cm notAfter
(validity) fields.
.It Cm no_version
Do not print the version number.
.El
.It Fl dates
Print the start and expiry date of a certificate.
.It Fl email
Output the email addresses, if any.
.It Fl enddate
Print the expiry date of the certificate; that is, the
.Cm notAfter
date.
.It Fl fingerprint
Print the digest of the DER-encoded version of the whole certificate.
.It Fl hash
A synonym for
.Fl subject_hash .
.It Fl issuer
Print the issuer name.
.It Fl issuer_hash
Print the hash of the certificate issuer name.
.It Fl issuer_hash_old
Print the hash of the certificate issuer name
using the older algorithm as used by
.Nm openssl
versions before 1.0.0.
.It Fl modulus
Print the value of the modulus of the public key contained in the certificate.
.It Fl nameopt Ar option
Customise how the subject or issuer names are displayed,
either using a list of comma-separated options or by specifying
.Fl nameopt
multiple times.
The default behaviour is to use the
.Cm oneline
format.
The options,
which can be preceded by a dash to turn them off,
are as follows:
.Bl -tag -width "XXXX"
.It Cm align
Align field values for a more readable output.
Only usable with
.Ar sep_multiline .
.It Cm compat
Use the old format,
equivalent to specifying no options at all.
.It Cm dn_rev
Reverse the fields of the DN, as required by RFC 2253.
As a side effect, this also reverses the order of multiple AVAs.
.It Cm dump_all
Dump all fields.
When used with
.Ar dump_der ,
it allows the DER encoding of the structure to be unambiguously determined.
.It Cm dump_der
Any fields that need to be hexdumped are
dumped using the DER encoding of the field.
Otherwise just the content octets will be displayed.
Both options use the RFC 2253 #XXXX... format.
.It Cm dump_nostr
Dump non-character string types
(for example OCTET STRING);
usually, non-character string types are displayed
as though each content octet represents a single character.
.It Cm dump_unknown
Dump any field whose OID is not recognised by
.Nm openssl .
.It Cm esc_2253
Escape the
.Qq special
characters required by RFC 2253 in a field that is
.Dq \& ,+"<>; .
Additionally,
.Sq #
is escaped at the beginning of a string
and a space character at the beginning or end of a string.
.It Cm esc_ctrl
Escape control characters.
That is, those with ASCII values less than 0x20 (space)
and the delete (0x7f) character.
They are escaped using the RFC 2253 \eXX notation (where XX are two hex
digits representing the character value).
.It Cm esc_msb
Escape characters with the MSB set; that is, with ASCII values larger than
127.
.It Cm multiline
A multiline format.
Equivalent to
.Cm esc_ctrl , esc_msb , sep_multiline ,
.Cm space_eq , lname ,
and
.Cm align .
.It Cm no_type
Do not attempt to interpret multibyte characters.
That is, content octets are merely dumped as though one octet
represents each character.
This is useful for diagnostic purposes
but results in rather odd looking output.
.It Cm nofname , sname , lname , oid
Alter how the field name is displayed:
.Cm nofname
does not display the field at all;
.Cm sname
uses the short name form (CN for
.Cm commonName ,
for example);
.Cm lname
uses the long form.
.Cm oid
represents the OID in numerical form and is useful for diagnostic purpose.
.It Cm oneline
A one line format which is more readable than
.Cm RFC2253 .
Equivalent to
.Cm esc_2253 , esc_ctrl , esc_msb , utf8 ,
.Cm dump_nostr , dump_der , use_quote , sep_comma_plus_spc ,
.Cm space_eq ,
and
.Cm sname .
.It Cm RFC2253
Displays names compatible with RFC 2253.
Equivalent to
.Cm esc_2253 , esc_ctrl ,
.Cm esc_msb , utf8 , dump_nostr , dump_unknown ,
.Cm dump_der , sep_comma_plus , dn_rev ,
and
.Cm sname .
.It Cm sep_comma_plus , sep_comma_plus_space , sep_semi_plus_space , sep_multiline
Determine the field separators:
the first character is between RDNs and the second between multiple AVAs
(multiple AVAs are very rare and their use is discouraged).
The options ending in
.Qq space
additionally place a space after the separator to make it more readable.
.Cm sep_multiline
uses a linefeed character for the RDN separator and a spaced
.Sq +
for the AVA separator,
as well as indenting the fields by four characters.
.It Cm show_type
Show the type of the ASN.1 character string.
The type precedes the field contents.
For example
.Qq BMPSTRING: Hello World .
.It Cm space_eq
Place spaces round the
.Sq =
character which follows the field name.
.It Cm use_quote
Escape some characters by surrounding the whole string with
.Sq \&"
characters.
Without the option, all escaping is done with the
.Sq \e
character.
.It Cm utf8
Convert all strings to UTF8 format first, as required by RFC 2253.
On a UTF8 compatible terminal,
the use of this option (and not setting
.Cm esc_msb )
may result in the correct display of multibyte characters.
Usually, multibyte characters larger than 0xff
are represented using the format \eUXXXX for 16 bits and \eWXXXXXXXX
for 32 bits,
and any UTF8Strings are converted to their character form first.
.El
.It Fl noout
Do not output the encoded version of the request.
.It Fl ocsp_uri
Print the OCSP responder addresses, if any.
.It Fl ocspid
Print OCSP hash values for the subject name and public key.
.It Fl pubkey
Print the public key.
.It Fl serial
Print the certificate serial number.
.It Fl startdate
Print the start date of the certificate; that is, the
.Cm notBefore
date.
.It Fl subject
Print the subject name.
.It Fl subject_hash
Print the hash of the certificate subject name.
This is used in
.Nm openssl
to form an index to allow certificates in a directory to be looked up
by subject name.
.It Fl subject_hash_old
Print the hash of the certificate subject name
using the older algorithm as used by
.Nm openssl
versions before 1.0.0.
.It Fl text
Print the full certificate in text form.
.El
.Pp
A trusted certificate is a certificate which has several
additional pieces of information attached to it such as the permitted
and prohibited uses of the certificate and an alias.
When a certificate is being verified at least one certificate must be trusted.
By default, a trusted certificate must be stored locally and be a root CA.
The following are x509 trust settings options:
.Bl -tag -width "XXXX"
.It Fl addreject Ar arg
Add a prohibited use.
Accepts the same values as the
.Fl addtrust
option.
.It Fl addtrust Ar arg
Add a trusted certificate use.
Any object name can be used here, but currently only
.Cm clientAuth
(SSL client use),
.Cm serverAuth
(SSL server use),
and
.Cm emailProtection
(S/MIME email) are used.
.It Fl alias
Output the certificate alias.
.It Fl clrreject
Clear all the prohibited or rejected uses of the certificate.
.It Fl clrtrust
Clear all the permitted or trusted uses of the certificate.
.It Fl purpose
Perform tests on the certificate extensions.
The same code is used when verifying untrusted certificates in chains,
so this section is useful if a chain is rejected by the verify code.
.Pp
The
.Cm basicConstraints
extension CA flag is used to determine whether the
certificate can be used as a CA.
If the CA flag is true, it is a CA;
if the CA flag is false, it is not a CA.
All CAs should have the CA flag set to true.
.Pp
If the
.Cm basicConstraints
extension is absent, then the certificate is
considered to be a possible CA;
other extensions are checked according to the intended use of the certificate.
A warning is given in this case because the certificate should really not
be regarded as a CA.
However it is allowed to be a CA to work around some broken software.
.Pp
If the certificate is a V1 certificate
(and thus has no extensions) and it is self-signed,
it is also assumed to be a CA but a warning is again given.
This is to work around the problem of Verisign roots
which are V1 self-signed certificates.
.Pp
If the
.Cm keyUsage
extension is present, then additional restraints are
made on the uses of the certificate.
A CA certificate must have the
.Cm keyCertSign
bit set if the
.Cm keyUsage
extension is present.
.Pp
The extended key usage extension places additional restrictions on the
certificate uses.
If this extension is present, whether critical or not,
the key can only be used for the purposes specified.
.Pp
A complete description of each test is given below.
The comments about
.Cm basicConstraints
and
.Cm keyUsage
and V1 certificates above apply to all CA certificates.
.Bl -tag -width "XXXX"
.It SSL Client
The extended key usage extension must be absent or include the
web client authentication OID.
.Cm keyUsage
must be absent or it must have the
.Cm digitalSignature
bit set.
The Netscape certificate type must be absent
or it must have the SSL client bit set.
.It SSL Client CA
The extended key usage extension must be absent or include the
web client authentication OID.
The Netscape certificate type must be absent
or it must have the SSL CA bit set:
this is used as a workaround if the
.Cm basicConstraints
extension is absent.
.It SSL Server
The extended key usage extension must be absent or include the
web server authentication and/or one of the SGC OIDs.
.Cm keyUsage
must be absent or it must have the
.Cm digitalSignature
set, the
.Cm keyEncipherment
set, or both bits set.
The Netscape certificate type must be absent or have the SSL server bit set.
.It SSL Server CA
The extended key usage extension must be absent or include the
web server authentication and/or one of the SGC OIDs.
The Netscape certificate type must be absent or the SSL CA bit must be set:
this is used as a workaround if the
.Cm basicConstraints
extension is absent.
.It Netscape SSL Server
For Netscape SSL clients to connect to an SSL server; it must have the
.Cm keyEncipherment
bit set if the
.Cm keyUsage
extension is present.
This isn't always valid because some cipher suites use the key for
digital signing.
Otherwise it is the same as a normal SSL server.
.It Common S/MIME Client Tests
The extended key usage extension must be absent or include the
email protection OID.
The Netscape certificate type must be absent or should have the S/MIME bit set.
If the S/MIME bit is not set in Netscape certificate type, then the SSL
client bit is tolerated as an alternative but a warning is shown:
this is because some Verisign certificates don't set the S/MIME bit.
.It S/MIME Signing
In addition to the common S/MIME client tests, the
.Cm digitalSignature
bit must be set if the
.Cm keyUsage
extension is present.
.It S/MIME Encryption
In addition to the common S/MIME tests, the
.Cm keyEncipherment
bit must be set if the
.Cm keyUsage
extension is present.
.It S/MIME CA
The extended key usage extension must be absent or include the
email protection OID.
The Netscape certificate type must be absent
or must have the S/MIME CA bit set:
this is used as a workaround if the
.Cm basicConstraints
extension is absent.
.It CRL Signing
The
.Cm keyUsage
extension must be absent or it must have the CRL signing bit set.
.It CRL Signing CA
The normal CA tests apply, except the
.Cm basicConstraints
extension must be present.
.El
.It Fl setalias Ar arg
Set the alias of the certificate,
allowing the certificate to be referred to using a nickname,
such as
.Qq Steve's Certificate .
.It Fl trustout
Output a trusted certificate
(the default if any trust settings are modified).
An ordinary or trusted certificate can be input, but by default an ordinary
certificate is output and any trust settings are discarded.
.El
.Pp
The
.Nm x509
utility can be used to sign certificates and requests:
it can thus behave like a mini CA.
The following are x509 signing options:
.Bl -tag -width "XXXX"
.It Fl CA Ar file
The CA certificate to be used for signing.
When this option is present,
.Nm x509
behaves like a mini CA.
The input file is signed by the CA using this option;
that is, its issuer name is set to the subject name of the CA and it is
digitally signed using the CA's private key.
.Pp
This option is normally combined with the
.Fl req
option.
Without the
.Fl req
option, the input is a certificate which must be self-signed.
.It Fl CAcreateserial
Create the CA serial number file if it does not exist
instead of generating an error.
The file will contain the serial number
.Sq 02
and the certificate being signed will have
.Sq 1
as its serial number.
.It Fl CAform Cm der | pem
The format of the CA certificate file.
The default is
.Cm pem .
.It Fl CAkey Ar file
Set the CA private key to sign a certificate with.
Otherwise it is assumed that the CA private key is present
in the CA certificate file.
.It Fl CAkeyform Cm der | pem
The format of the CA private key.
The default is
.Cm pem .
.It Fl CAserial Ar file
Use the serial number in
.Ar file
to sign a certificate.
The file should consist of one line containing an even number of hex digits
with the serial number to use.
After each use the serial number is incremented and written out
to the file again.
.Pp
The default filename consists of the CA certificate file base name with
.Pa .srl
appended.
For example, if the CA certificate file is called
.Pa mycacert.pem ,
it expects to find a serial number file called
.Pa mycacert.srl .
.It Fl checkend Ar arg
Check whether the certificate expires in the next
.Ar arg
seconds.
If so, exit with return value 1;
otherwise exit with return value 0.
.It Fl clrext
Delete any extensions from a certificate.
This option is used when a certificate is being created from another
certificate (for example with the
.Fl signkey
or the
.Fl CA
options).
Normally, all extensions are retained.
.It Fl days Ar arg
The number of days to make a certificate valid for.
The default is 30 days.
.It Fl extensions Ar section
The section to add certificate extensions from.
If this option is not specified, the extensions should either be
contained in the unnamed (default) section
or the default section should contain a variable called
.Qq extensions
which contains the section to use.
.It Fl extfile Ar file
File containing certificate extensions to use.
If not specified, no extensions are added to the certificate.
.It Fl keyform Cm der | pem
The format of the private key file used in the
.Fl signkey
option.
.It Fl req
Expect a certificate request on input instead of a certificate.
.It Fl set_serial Ar n
The serial number to use.
This option can be used with either the
.Fl signkey
or
.Fl CA
options.
If used in conjunction with the
.Fl CA
option, the serial number file (as specified by the
.Fl CAserial
or
.Fl CAcreateserial
options) is not used.
.Pp
The serial number can be decimal or hex (if preceded by
.Sq 0x ) .
Negative serial numbers can also be specified but their use is not recommended.
.It Fl signkey Ar file
Self-sign
.Ar file
using the supplied private key.
.Pp
If the input file is a certificate, it sets the issuer name to the
subject name (i.e. makes it self-signed),
changes the public key to the supplied value,
and changes the start and end dates.
The start date is set to the current time and the end date is set to
a value determined by the
.Fl days
option.
Any certificate extensions are retained unless the
.Fl clrext
option is supplied.
.Pp
If the input is a certificate request, a self-signed certificate
is created using the supplied private key using the subject name in
the request.
.It Fl x509toreq
Convert a certificate into a certificate request.
The
.Fl signkey
option is used to pass the required private key.
.El
.Sh COMMON NOTATION
Several commands share a common syntax,
as detailed below.
.Pp
Password arguments, typically specified using
.Fl passin
and
.Fl passout
for input and output passwords,
allow passwords to be obtained from a variety of sources.
Both of these options take a single argument, described below.
If no password argument is given and a password is required,
then the user is prompted to enter one:
this will typically be read from the current terminal with echoing turned off.
.Bl -tag -width "pass:password" -offset indent
.It Cm pass : Ns Ar password
The actual password is
.Ar password .
Since the password is visible to utilities,
this form should only be used where security is not important.
.It Cm env : Ns Ar var
Obtain the password from the environment variable
.Ar var .
Since the environment of other processes is visible,
this option should be used with caution.
.It Cm file : Ns Ar path
The first line of
.Ar path
is the password.
If the same
.Ar path
argument is supplied to
.Fl passin
and
.Fl passout ,
then the first line will be used for the input password and the next line
for the output password.
.Ar path
need not refer to a regular file:
it could, for example, refer to a device or named pipe.
.It Cm fd : Ns Ar number
Read the password from the file descriptor
.Ar number .
This can be used to send the data via a pipe, for example.
.It Cm stdin
Read the password from standard input.
.El
.Pp
Input/output formats,
typically specified using
.Fl inform
and
.Fl outform ,
indicate the format being read from or written to.
The argument is case insensitive.
.Pp
.Bl -tag -width Ds -offset indent -compact
.It Cm der
Distinguished Encoding Rules (DER)
is a binary format.
.It Cm net
Insecure legacy format.
.It Cm pem
Privacy Enhanced Mail (PEM)
is base64-encoded.
.It Cm smime
An SMIME format message.
.It Cm txt
Plain ASCII text.
.El
.Sh ENVIRONMENT
The following environment variables affect the execution of
.Nm openssl :
.Bl -tag -width "/etc/ssl/openssl.cnf"
.It Ev OPENSSL_CONF
The location of the master configuration file.
.El
.Sh FILES
.Bl -tag -width "/etc/ssl/openssl.cnf" -compact
.It Pa /etc/ssl/
Default config directory for
.Nm openssl .
.It Pa /etc/ssl/lib/
Unused.
.It Pa /etc/ssl/private/
Default private key directory.
.It Pa /etc/ssl/openssl.cnf
Default configuration file for
.Nm openssl .
.It Pa /etc/ssl/x509v3.cnf
Default configuration file for
.Nm x509
certificates.
.El
.Sh SEE ALSO
.Xr acme-client 1 ,
.Xr nc 1 ,
.Xr ssl 8 ,
.Xr starttls 8
.Sh STANDARDS
.Rs
.%A T. Dierks
.%A C. Allen
.%D January 1999
.%R RFC 2246
.%T The TLS Protocol Version 1.0
.Re
.Pp
.Rs
.%A M. Wahl
.%A S. Killie
.%A T. Howes
.%D December 1997
.%R RFC 2253
.%T Lightweight Directory Access Protocol (v3): UTF-8 String Representation of Distinguished Names
.Re
.Pp
.Rs
.%A B. Kaliski
.%D March 1998
.%R RFC 2315
.%T PKCS #7: Cryptographic Message Syntax Version 1.5
.Re
.Pp
.Rs
.%A R. Housley
.%A W. Ford
.%A W. Polk
.%A D. Solo
.%D January 1999
.%R RFC 2459
.%T Internet X.509 Public Key Infrastructure Certificate and CRL Profile
.Re
.Pp
.Rs
.%A M. Myers
.%A R. Ankney
.%A A. Malpani
.%A S. Galperin
.%A C. Adams
.%D June 1999
.%R RFC 2560
.%T X.509 Internet Public Key Infrastructure Online Certificate Status Protocol \(en OCSP
.Re
.Pp
.Rs
.%A R. Housley
.%D June 1999
.%R RFC 2630
.%T Cryptographic Message Syntax
.Re
.Pp
.Rs
.%A P. Chown
.%D June 2002
.%R RFC 3268
.%T Advanced Encryption Standard (AES) Ciphersuites for Transport Layer Security (TLS)
.Re
@


1.83
log
@typo
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.82 2016/09/22 19:17:17 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 22 2016 $
d248 1
a248 1
The encoded data is passed through the ASN1 parser and printed out as
d364 1
a364 1
.Pq the same as an ASN1 UTCTime structure .
d496 1
a496 1
.Pq the same as an ASN1 UTCTime structure .
d2439 1
a2439 1
In this form the OCTET STRING contains an ASN1 SEQUENCE consisting of
d2441 1
a2441 1
a SEQUENCE containing the parameters and an ASN1 INTEGER containing
d2818 1
a2818 1
ASN1parse the output data.
d2821 1
a2821 1
option when an ASN1 structure is signed.
d4164 1
a4164 1
uses an ASN1 DER-encoded format containing session details.
d5431 1
a5431 1
ASN1 parse unsupported extensions.
d5596 1
a5596 1
Show the type of the ASN1 character string.
@


1.82
log
@trim STANDARDS; ok jsing
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.81 2016/09/22 13:44:02 jmc Exp $
d1431 1
a1431 1
it can be use to add or change the pass phrase.
@


1.81
log
@some minor cleanup;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.80 2016/09/22 13:30:49 jmc Exp $
a6056 12
.Rs
.%D February 1995
.%Q Netscape Communications Corp.
.%T The SSL Protocol
.Re
.Pp
.Rs
.%D November 1996
.%Q Netscape Communications Corp.
.%T The SSL 3.0 Protocol
.Re
.Pp
@


1.80
log
@shorten x509;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.79 2016/09/20 16:45:38 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 20 2016 $
d321 1
a321 1
.Op Fl keyform Ar PEM
d396 1
a396 1
.It Fl keyform Ar PEM
d548 1
a548 1
.Pq even if it is empty
d550 2
a551 6
The CRL extensions specified are CRL extensions and
.Em not
CRL entry extensions.
It should be noted that some software
.Pq for example Netscape
can't handle V2 CRLs.
d724 2
a725 3
Use of the old format is
.Em strongly
discouraged because it only displays fields mentioned in the
d1695 1
a1695 3
This option should
.Em NEVER
be used
d2060 2
a2061 4
The current issuer certificate,
in PEM format.
Can be used multiple times
and must come before any
a2299 6
For example:
.Bd -literal -offset indent
$ openssl x509 -in ocspCA.pem -addtrust OCSPSigning \e
	-out trustedCA.pem
.Ed
.Pp
d2643 1
a2643 2
or standard input if not specified,
in PEM format.
a2678 2
Unless you wish to produce files compatible with MSIE 4.0, you should leave
these options alone.
a2690 3
MSIE 4.0 doesn't support MAC iteration counts, so it needs the
.Fl nomaciter
option.
d2997 1
a2997 3
Perform
.Em base64
encoding on the output.
d3088 2
a3089 1
The default is PEM.
d3955 2
a3956 4
(e.g. proxies)
that wish to deal with multiple servers, when each of which might be
generating a unique range of session IDs
(e.g. with a certain prefix).
a6033 3
.\"
.\" FILES
.\"
a6050 3
.\"
.\" SEE ALSO
.\"
@


1.79
log
@shorten version;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.78 2016/09/20 16:40:05 jmc Exp $
a1958 6
The PEM-encoded form uses the same headers and footers as a certificate:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
.Ed
.Pp
a2448 13
The encrypted form of a PEM-encoded PKCS#8 file uses the following
headers and footers:
.Bd -unfilled -offset indent
-----BEGIN ENCRYPTED PRIVATE KEY-----
-----END ENCRYPTED PRIVATE KEY-----
.Ed
.Pp
The unencrypted form uses:
.Bd -unfilled -offset indent
-----BEGIN PRIVATE KEY-----
-----END PRIVATE KEY-----
.Ed
.Pp
a5330 3
.\"
.\" X509
.\"
a5333 1
.Bk -words
d5340 1
a5340 1
.Op Fl CAform Ar DER | PEM
d5342 1
a5342 1
.Op Fl CAkeyform Ar DER | PEM
d5358 1
a5358 1
.Op Fl inform Ar DER | NET | PEM
d5362 1
a5362 1
.Op Fl keyform Ar DER | PEM
d5370 1
a5370 1
.Op Fl outform Ar DER | NET | PEM
a5385 1
.Ek
d5396 1
a5396 3
Since there are a large number of options, they are split up into
various sections.
.Sh X509 INPUT, OUTPUT, AND GENERAL PURPOSE OPTIONS
d5399 4
a5402 5
This specifies the input
.Ar file
to read a certificate from, or standard input if this option is not specified.
.It Fl inform Ar DER | NET | PEM
This specifies the input format.
a5406 9
The
.Ar DER
format is the DER encoding of the certificate and
.Ar PEM
is the base64 encoding of the DER encoding with header and footer lines added.
The
.Ar NET
option is an obscure Netscape server format that is now
obsolete.
d5416 1
a5416 2
If the key being used to sign with is a DSA key,
this option has no effect: SHA1 is always used with DSA keys.
d5418 4
a5421 7
This specifies the output
.Ar file
to write to, or standard output by default.
.It Fl outform Ar DER | NET | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
d5425 2
a5426 9
.Sh X509 DISPLAY OPTIONS
.Sy Note :
The
.Fl alias
and
.Fl purpose
options are also display options but are described in the
.Sx X509 TRUST SETTINGS
section.
d5429 1
a5429 1
This outputs the certificate in the form of a C source file.
d5432 2
a5433 5
.Fl text .
The
.Ar option
argument can be a single option or multiple options separated by commas.
The
d5435 48
a5482 4
switch may also be used more than once to set multiple options.
See the
.Sx X509 TEXT OPTIONS
section for more information.
d5484 1
a5484 1
Prints out the start and expiry dates of a certificate.
d5486 1
a5486 1
Outputs the email address(es), if any.
d5488 2
a5489 2
Prints out the expiry date of the certificate; that is, the
.Em notAfter
d5492 1
a5492 3
Prints out the digest of the DER-encoded version of the whole certificate
(see
.Sx DIGEST OPTIONS ) .
d5495 1
a5495 2
.Fl subject_hash ,
for backwards compatibility.
d5497 1
a5497 1
Outputs the issuer name.
d5499 1
a5499 3
Outputs the
.Qq hash
of the certificate issuer name.
d5501 3
a5503 5
Outputs the
.Qq hash
of the certificate issuer name using the older algorithm
as used by
.Nm OpenSSL
d5506 1
a5506 2
This option prints out the value of the modulus of the public key
contained in the certificate.
d5508 2
a5509 5
Option which determines how the subject or issuer names are displayed.
The
.Ar option
argument can be a single option or multiple options separated by commas.
Alternatively, the
d5511 135
a5645 4
switch may be used more than once to set multiple options.
See the
.Sx X509 NAME OPTIONS
section for more information.
d5647 1
a5647 1
This option prevents output of the encoded version of the request.
d5649 1
a5649 1
Outputs the OCSP responder addresses, if any.
d5653 1
a5653 1
Output the public key.
d5655 1
a5655 1
Outputs the certificate serial number.
d5657 2
a5658 2
Prints out the start date of the certificate; that is, the
.Em notBefore
d5661 1
a5661 1
Outputs the subject name.
d5663 1
a5663 3
Outputs the
.Qq hash
of the certificate subject name.
d5665 1
a5665 1
.Nm OpenSSL
d5669 3
a5671 5
Outputs the
.Qq hash
of the certificate subject name using the older algorithm
as used by
.Nm OpenSSL
d5674 1
a5674 4
Prints out the certificate in text form.
Full details are output including the public key, signature algorithms,
issuer and subject names, serial number, any extensions present,
and any trust settings.
a5675 2
.Sh X509 TRUST SETTINGS
Please note these options are currently experimental and may well change.
d5677 1
a5677 3
A
.Em trusted certificate
is an ordinary certificate which has several
d5679 4
a5682 22
and prohibited uses of the certificate and an
.Qq alias .
.Pp
Normally, when a certificate is being verified at least one certificate
must be
.Qq trusted .
By default, a trusted certificate must be stored
locally and must be a root CA: any certificate chain ending in this CA
is then usable for any purpose.
.Pp
Trust settings currently are only used with a root CA.
They allow a finer control over the purposes the root CA can be used for.
For example, a CA may be trusted for an SSL client but not for
SSL server use.
.Pp
See the description of the
.Nm verify
utility for more information on the meaning of trust settings.
.Pp
Future versions of
.Nm OpenSSL
will recognize trust settings on any certificate: not just root CAs.
d5685 2
a5686 2
Adds a prohibited use.
It accepts the same values as the
d5690 1
a5690 1
Adds a trusted certificate use.
d5692 7
a5698 11
.Ar clientAuth
.Pq SSL client use ,
.Ar serverAuth
.Pq SSL server use ,
and
.Ar emailProtection
.Pq S/MIME email
are used.
Other
.Nm OpenSSL
applications may define additional uses.
d5700 1
a5700 1
Outputs the certificate alias, if any.
d5702 1
a5702 1
Clears all the prohibited or rejected uses of the certificate.
d5704 1
a5704 1
Clears all the permitted or trusted uses of the certificate.
d5706 128
a5833 5
This option performs tests on the certificate extensions and outputs
the results.
For a more complete description, see the
.Sx X.509 CERTIFICATE EXTENSIONS
section.
d5835 3
a5837 3
Sets the alias of the certificate.
This will allow the certificate to be referred to using a nickname,
for example
d5840 2
a5841 4
This causes
.Nm x509
to output a
.Em trusted certificate .
a5843 5
With the
.Fl trustout
option a trusted certificate is output.
A trusted certificate is automatically output if any trust settings
are modified.
d5845 1
a5845 1
.Sh X509 SIGNING OPTIONS
d5848 3
a5850 3
utility can be used to sign certificates and requests: it
can thus behave like a
.Qq mini CA .
d5853 1
a5853 1
Specifies the CA certificate to be used for signing.
d5856 1
a5856 2
behaves like a
.Qq mini CA .
d5868 3
a5870 2
With this option the CA serial number file is created if it does not exist:
it will contain the serial number
d5875 1
a5875 4
Normally, if the
.Fl CA
option is specified and the serial number file does not exist, it is an error.
.It Fl CAform Ar DER | PEM
d5878 1
a5878 1
.Ar PEM .
d5880 4
a5883 4
Sets the CA private key to sign a certificate with.
If this option is not specified, it is assumed that the CA private key
is present in the CA certificate file.
.It Fl CAkeyform Ar DER | PEM
d5886 1
a5886 1
.Ar PEM .
d5888 4
a5891 7
Sets the CA serial number file to use.
.Pp
When the
.Fl CA
option is used to sign a certificate,
it uses a serial number specified in a file.
This file consists of one line containing an even number of hex digits
d5919 1
a5919 1
Specifies the number of days to make a certificate valid for.
d5924 2
a5925 3
contained in the unnamed
.Pq default
section or the default section should contain a variable called
d5931 2
a5932 4
.It Fl keyform Ar DER | PEM
Specifies the format
.Pq DER or PEM
of the private key file used in the
d5936 1
a5936 2
By default, a certificate is expected on input.
With this option a certificate request is expected instead.
d5938 1
a5938 1
Specifies the serial number to use.
d5956 3
a5958 2
This option causes the input file to be self-signed using the supplied
private key.
d5961 1
a5961 2
subject name
.Pq i.e. makes it self-signed ,
d5976 1
a5976 1
Converts a certificate into a certificate request.
a5980 528
.Sh X509 NAME OPTIONS
The
.Fl nameopt
command line switch determines how the subject and issuer
names are displayed.
If no
.Fl nameopt
switch is present, the default
.Qq oneline
format is used which is compatible with previous versions of
.Nm OpenSSL .
Each option is described in detail below; all options can be preceded by a
.Sq -
to turn the option off.
Only
.Ar compat ,
.Ar RFC2253 ,
.Ar oneline ,
and
.Ar multiline
will normally be used.
.Bl -tag -width "XXXX"
.It Ar align
Align field values for a more readable output.
Only usable with
.Ar sep_multiline .
.It Ar compat
Use the old format.
This is equivalent to specifying no name options at all.
.It Ar dn_rev
Reverse the fields of the DN.
This is required by RFC 2253.
As a side effect, this also reverses the order of multiple AVAs but this is
permissible.
.It Ar dump_all
Dump all fields.
This option, when used with
.Ar dump_der ,
allows the DER encoding of the structure to be unambiguously determined.
.It Ar dump_der
When this option is set, any fields that need to be hexdumped will
be dumped using the DER encoding of the field.
Otherwise just the content octets will be displayed.
Both options use the RFC 2253 #XXXX... format.
.It Ar dump_nostr
Dump non-character string types
.Pq for example OCTET STRING ;
if this option is not set, non-character string types will be displayed
as though each content octet represents a single character.
.It Ar dump_unknown
Dump any field whose OID is not recognised by
.Nm OpenSSL .
.It Ar esc_2253
Escape the
.Qq special
characters required by RFC 2253 in a field that is
.Dq \& ,+"\*(Lt\*(Gt; .
Additionally,
.Sq #
is escaped at the beginning of a string
and a space character at the beginning or end of a string.
.It Ar esc_ctrl
Escape control characters.
That is, those with ASCII values less than 0x20
.Pq space
and the delete
.Pq 0x7f
character.
They are escaped using the RFC 2253 \eXX notation (where XX are two hex
digits representing the character value).
.It Ar esc_msb
Escape characters with the MSB set; that is, with ASCII values larger than
127.
.It Ar multiline
A multiline format.
It is equivalent to
.Ar esc_ctrl , esc_msb , sep_multiline ,
.Ar space_eq , lname ,
and
.Ar align .
.It Ar no_type
This option does not attempt to interpret multibyte characters in any
way.
That is, their content octets are merely dumped as though one octet
represents each character.
This is useful for diagnostic purposes but will result in rather odd
looking output.
.It Ar nofname , sname , lname , oid
These options alter how the field name is displayed.
.Ar nofname
does not display the field at all.
.Ar sname
uses the
.Qq short name
form (CN for
.Ar commonName ,
for example).
.Ar lname
uses the long form.
.Ar oid
represents the OID in numerical form and is useful for diagnostic purpose.
.It Ar oneline
A oneline format which is more readable than
.Ar RFC2253 .
It is equivalent to specifying the
.Ar esc_2253 , esc_ctrl , esc_msb , utf8 ,
.Ar dump_nostr , dump_der , use_quote , sep_comma_plus_spc ,
.Ar space_eq ,
and
.Ar sname
options.
.It Ar RFC2253
Displays names compatible with RFC 2253; equivalent to
.Ar esc_2253 , esc_ctrl ,
.Ar esc_msb , utf8 , dump_nostr , dump_unknown ,
.Ar dump_der , sep_comma_plus , dn_rev ,
and
.Ar sname .
.It Ar sep_comma_plus , sep_comma_plus_space , sep_semi_plus_space , sep_multiline
These options determine the field separators.
The first character is between RDNs and the second between multiple AVAs
(multiple AVAs are very rare and their use is discouraged).
The options ending in
.Qq space
additionally place a space after the separator to make it more readable.
The
.Ar sep_multiline
uses a linefeed character for the RDN separator and a spaced
.Sq +
for the AVA separator.
It also indents the fields by four characters.
.It Ar show_type
Show the type of the ASN1 character string.
The type precedes the field contents.
For example
.Qq BMPSTRING: Hello World .
.It Ar space_eq
Places spaces round the
.Sq =
character which follows the field name.
.It Ar use_quote
Escapes some characters by surrounding the whole string with
.Sq \&"
characters.
Without the option, all escaping is done with the
.Sq \e
character.
.It Ar utf8
Convert all strings to UTF8 format first.
This is required by RFC 2253.
If you are lucky enough to have a UTF8 compatible terminal,
the use of this option (and
.Em not
setting
.Ar esc_msb )
may result in the correct display of multibyte
.Pq international
characters.
If this option is not present, multibyte characters larger than 0xff
will be represented using the format \eUXXXX for 16 bits and \eWXXXXXXXX
for 32 bits.
Also, if this option is off, any UTF8Strings will be converted to their
character form first.
.El
.Sh X509 TEXT OPTIONS
As well as customising the name output format, it is also possible to
customise the actual fields printed using the
.Fl certopt
options when the
.Fl text
option is present.
The default behaviour is to print all fields.
.Bl -tag -width "XXXX"
.It Ar ca_default
The value used by the
.Nm ca
utility; equivalent to
.Ar no_issuer , no_pubkey , no_header ,
.Ar no_version , no_sigdump ,
and
.Ar no_signame .
.It Ar compatible
Use the old format.
This is equivalent to specifying no output options at all.
.It Ar ext_default
Retain default extension behaviour: attempt to print out unsupported
certificate extensions.
.It Ar ext_dump
Hex dump unsupported extensions.
.It Ar ext_error
Print an error message for unsupported certificate extensions.
.It Ar ext_parse
ASN1 parse unsupported extensions.
.It Ar no_aux
Don't print out certificate trust information.
.It Ar no_extensions
Don't print out any X509V3 extensions.
.It Ar no_header
Don't print header information: that is, the lines saying
.Qq Certificate
and
.Qq Data .
.It Ar no_issuer
Don't print out the issuer name.
.It Ar no_pubkey
Don't print out the public key.
.It Ar no_serial
Don't print out the serial number.
.It Ar no_sigdump
Don't give a hexadecimal dump of the certificate signature.
.It Ar no_signame
Don't print out the signature algorithm used.
.It Ar no_subject
Don't print out the subject name.
.It Ar no_validity
Don't print the validity; that is, the
.Em notBefore
and
.Em notAfter
fields.
.It Ar no_version
Don't print out the version number.
.El
.Sh X509 EXAMPLES
Display the contents of a certificate:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -text
.Pp
Display the certificate serial number:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -serial
.Pp
Display the certificate subject name:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -subject
.Pp
Display the certificate subject name in RFC 2253 form:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -subject -nameopt RFC2253
.Pp
Display the certificate subject name in oneline form on a terminal
supporting UTF8:
.Bd -literal -offset indent
$ openssl x509 -in cert.pem -noout -subject \e
	-nameopt oneline,-esc_msb
.Ed
.Pp
Display the certificate MD5 fingerprint:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -fingerprint
.Pp
Display the certificate SHA1 fingerprint:
.Pp
.Dl $ openssl x509 -sha1 -in cert.pem -noout -fingerprint
.Pp
Convert a certificate from PEM to DER format:
.Pp
.Dl "$ openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER"
.Pp
Convert a certificate to a certificate request:
.Bd -literal -offset indent
$ openssl x509 -x509toreq -in cert.pem -out req.pem \e
	-signkey key.pem
.Ed
.Pp
Convert a certificate request into a self-signed certificate using
extensions for a CA:
.Bd -literal -offset indent
$ openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions \e
	v3_ca -signkey key.pem -out cacert.pem
.Ed
.Pp
Sign a certificate request using the CA certificate above and add user
certificate extensions:
.Bd -literal -offset indent
$ openssl x509 -req -in req.pem -extfile openssl.cnf -extensions \e
	v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial
.Ed
.Pp
Set a certificate to be trusted for SSL
client use and set its alias to
.Qq Steve's Class 1 CA :
.Bd -literal -offset indent
$ openssl x509 -in cert.pem -addtrust clientAuth \e
	-setalias "Steve's Class 1 CA" -out trust.pem
.Ed
.Sh X509 NOTES
The PEM format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
.Ed
.Pp
It will also handle files containing:
.Bd -unfilled -offset indent
-----BEGIN X509 CERTIFICATE-----
-----END X509 CERTIFICATE-----
.Ed
.Pp
Trusted certificates have the lines:
.Bd -unfilled -offset indent
-----BEGIN TRUSTED CERTIFICATE-----
-----END TRUSTED CERTIFICATE-----
.Ed
.Pp
The conversion to UTF8 format used with the name options assumes that
T61Strings use the ISO 8859-1 character set.
This is wrong, but Netscape and MSIE do this, as do many certificates.
So although this is incorrect
it is more likely to display the majority of certificates correctly.
.Pp
The
.Fl fingerprint
option takes the digest of the DER-encoded certificate.
This is commonly called a
.Qq fingerprint .
Because of the nature of message digests, the fingerprint of a certificate
is unique to that certificate and two certificates with the same fingerprint
can be considered to be the same.
.Pp
The Netscape fingerprint uses MD5, whereas MSIE uses SHA1.
.Pp
The
.Fl email
option searches the subject name and the subject alternative
name extension.
Only unique email addresses will be printed out: it will
not print the same address more than once.
.Sh X.509 CERTIFICATE EXTENSIONS
The
.Fl purpose
option checks the certificate extensions and determines
what the certificate can be used for.
The actual checks done are rather
complex and include various hacks and workarounds to handle broken
certificates and software.
.Pp
The same code is used when verifying untrusted certificates in chains,
so this section is useful if a chain is rejected by the verify code.
.Pp
The
.Em basicConstraints
extension CA flag is used to determine whether the
certificate can be used as a CA.
If the CA flag is true, it is a CA;
if the CA flag is false, it is not a CA.
.Em All
CAs should have the CA flag set to true.
.Pp
If the
.Em basicConstraints
extension is absent, then the certificate is
considered to be a
.Qq possible CA ;
other extensions are checked according to the intended use of the certificate.
A warning is given in this case because the certificate should really not
be regarded as a CA: however,
it is allowed to be a CA to work around some broken software.
.Pp
If the certificate is a V1 certificate
.Pq and thus has no extensions
and it is self-signed, it is also assumed to be a CA but a warning is again
given: this is to work around the problem of Verisign roots which are V1
self-signed certificates.
.Pp
If the
.Em keyUsage
extension is present, then additional restraints are
made on the uses of the certificate.
A CA certificate
.Em must
have the
.Em keyCertSign
bit set if the
.Em keyUsage
extension is present.
.Pp
The extended key usage extension places additional restrictions on the
certificate uses.
If this extension is present
.Pq whether critical or not ,
the key can only be used for the purposes specified.
.Pp
A complete description of each test is given below.
The comments about
.Em basicConstraints
and
.Em keyUsage
and V1 certificates above apply to
.Em all
CA certificates.
.Bl -tag -width "XXXX"
.It Ar SSL Client
The extended key usage extension must be absent or include the
.Qq web client authentication
OID.
.Ar keyUsage
must be absent or it must have the
.Em digitalSignature
bit set.
Netscape certificate type must be absent or it must have the SSL
client bit set.
.It Ar SSL Client CA
The extended key usage extension must be absent or include the
.Qq web client authentication
OID.
Netscape certificate type must be absent or it must have the SSL CA
bit set: this is used as a work around if the
.Em basicConstraints
extension is absent.
.It Ar SSL Server
The extended key usage extension must be absent or include the
.Qq web server authentication
and/or one of the SGC OIDs.
.Em keyUsage
must be absent or it must have the
.Em digitalSignature
set, the
.Em keyEncipherment
set, or both bits set.
Netscape certificate type must be absent or have the SSL server bit set.
.It Ar SSL Server CA
The extended key usage extension must be absent or include the
.Qq web server authentication
and/or one of the SGC OIDs.
Netscape certificate type must be absent or the SSL CA
bit must be set: this is used as a work around if the
.Em basicConstraints
extension is absent.
.It Ar Netscape SSL Server
For Netscape SSL clients to connect to an SSL server; it must have the
.Em keyEncipherment
bit set if the
.Em keyUsage
extension is present.
This isn't always valid because some cipher suites use the key for
digital signing.
Otherwise it is the same as a normal SSL server.
.It Ar Common S/MIME Client Tests
The extended key usage extension must be absent or include the
.Qq email protection
OID.
Netscape certificate type must be absent or should have the
.Em S/MIME
bit set.
If the
.Em S/MIME
bit is not set in Netscape certificate type, then the SSL
client bit is tolerated as an alternative but a warning is shown:
this is because some Verisign certificates don't set the
.Em S/MIME
bit.
.It Ar S/MIME Signing
In addition to the common
.Em S/MIME
client tests, the
.Em digitalSignature
bit must be set if the
.Em keyUsage
extension is present.
.It Ar S/MIME Encryption
In addition to the common
.Em S/MIME
tests, the
.Em keyEncipherment
bit must be set if the
.Em keyUsage
extension is present.
.It Ar S/MIME CA
The extended key usage extension must be absent or include the
.Qq email protection
OID.
Netscape certificate type must be absent or must have the
.Em S/MIME CA
bit set: this is used as a work around if the
.Em basicConstraints
extension is absent.
.It Ar CRL Signing
The
.Em keyUsage
extension must be absent or it must have the
.Em CRL
signing bit set.
.It Ar CRL Signing CA
The normal CA tests apply.
Except in this case the
.Em basicConstraints
extension must be present.
.El
.Sh X509 BUGS
Extensions in certificates are not transferred to certificate requests and
vice versa.
.Pp
It is possible to produce invalid certificates or requests by specifying the
wrong private key or using inconsistent options in some cases: these should
be checked.
.Pp
There should be options to explicitly set such things as start and end dates,
rather than an offset from the current time.
.Pp
The code to implement the verify behaviour described in the
.Sx X509 TRUST SETTINGS
is currently being developed.
It thus describes the intended behaviour rather than the current behaviour.
It is hoped that it will represent reality in
.Nm OpenSSL
0.9.5 and later.
.Sh X509 HISTORY
Before
.Nm OpenSSL
0.9.8,
the default digest for RSA keys was MD5.
.Pp
The hash algorithm used in the
.Fl subject_hash
and
.Fl issuer_hash
options before
.Nm OpenSSL
1.0.0 was based on the deprecated MD5 algorithm and the encoding
of the distinguished name.
In
.Nm OpenSSL
1.0.0 and later it is based on a canonical version of the DN using SHA1.
This means that any directories using the old form
must have their links rebuilt using
.Ar c_rehash
or similar.
@


1.78
log
@shorten the verify error list;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.77 2016/09/19 12:57:45 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 19 2016 $
a5318 3
.\"
.\" VERSION
.\"
d5326 1
a5326 1
.Nm OpenSSL .
d5334 1
a5334 1
.Nm OpenSSL
d5347 1
a5347 1
.Nm OpenSSL
a5349 10
.Sh VERSION NOTES
The output of
.Nm openssl version -a
would typically be used when sending in a bug report.
.Sh VERSION HISTORY
The
.Fl d
option was added in
.Nm OpenSSL
0.9.7.
@


1.77
log
@put the spkac section in the right place;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.76 2016/09/19 12:55:04 jmc Exp $
d5205 1
a5205 1
.It "0 X509_V_OK: ok"
d5207 3
a5209 4
.It 2 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate
The issuer certificate could not be found: this occurs if the issuer certificate
of an untrusted certificate cannot be found.
.It 3 X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL
d5211 1
a5211 1
.It 4 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt certificate's signature
d5213 2
a5214 2
This means that the actual signature value could not be determined rather
than it not matching the expected value.
d5216 4
a5219 4
.It 5 X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL's signature
The CRL signature could not be decrypted: this means that the actual
signature value could not be determined rather than it not matching the
expected value.
d5221 1
a5221 1
.It 6 X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer public key
d5225 1
a5225 1
.It 7 X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure
d5227 1
a5227 1
.It 8 X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure
d5229 1
a5229 1
.It 9 X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid
d5233 1
a5233 1
.It 10 X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired
d5237 1
a5237 1
.It 11 X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid
d5239 1
a5239 1
.It 12 X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired
d5241 1
a5241 1
.It 13 X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in certificate's notBefore field
d5245 1
a5245 1
.It 14 X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in certificate's notAfter field
d5249 1
a5249 1
.It 15 X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL's lastUpdate field
d5253 1
a5253 1
.It 16 X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL's nextUpdate field
d5257 1
a5257 1
.It 17 X509_V_ERR_OUT_OF_MEM: out of memory
d5260 1
a5260 1
.It 18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate
d5263 1
a5263 1
.It 19 X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in certificate chain
d5266 1
a5266 1
.It 20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate
d5269 1
a5269 1
.It 21 X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first certificate
d5272 1
a5272 1
.It 22 X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long
d5275 1
a5275 1
.It 23 X509_V_ERR_CERT_REVOKED: certificate revoked
d5277 1
a5277 1
.It 24 X509_V_ERR_INVALID_CA: invalid CA certificate
d5281 1
a5281 1
.It 25 X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded
d5285 1
a5285 1
.It 26 X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose
d5287 1
a5287 1
.It 27 X509_V_ERR_CERT_UNTRUSTED: certificate not trusted
d5289 1
a5289 1
.It 28 X509_V_ERR_CERT_REJECTED: certificate rejected
d5291 1
a5291 1
.It 29 X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch
d5297 1
a5297 1
.It 30 X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier mismatch
d5304 1
a5304 1
.It 31 X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial number mismatch
d5311 1
a5311 1
.It 32 X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate signing
d5315 1
a5315 1
.It 50 X509_V_ERR_APPLICATION_VERIFICATION: application verification failure
@


1.76
log
@shorten verify;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.75 2016/09/17 15:10:50 deraadt Exp $
d115 1
a115 1
.Dd $Mdocdate: September 17 2016 $
d4582 59
a5005 59
.El
.Sh SPKAC
.nr nS 1
.Nm "openssl spkac"
.Op Fl challenge Ar string
.Op Fl in Ar file
.Op Fl key Ar keyfile
.Op Fl noout
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl pubkey
.Op Fl spkac Ar spkacname
.Op Fl spksect Ar section
.Op Fl verify
.nr nS 0
.Pp
The
.Nm spkac
command processes signed public key and challenge (SPKAC) files.
It can print out their contents, verify the signature,
and produce its own SPKACs from a supplied private key.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl challenge Ar string
The challenge string, if an SPKAC is being created.
.It Fl in Ar file
The input file to read from,
or standard input if not specified.
Ignored if the
.Fl key
option is used.
.It Fl key Ar keyfile
Create an SPKAC file using the private key in
.Ar keyfile .
The
.Fl in , noout , spksect ,
and
.Fl verify
options are ignored, if present.
.It Fl noout
Do not output the text version of the SPKAC.
.It Fl out Ar file
The output file to write to,
or standard output if not specified.
.It Fl passin Ar arg
The key password source.
.It Fl pubkey
Output the public key of an SPKAC.
.It Fl spkac Ar spkacname
An alternative name for the variable containing the SPKAC.
The default is "SPKAC".
This option affects both generated and input SPKAC files.
.It Fl spksect Ar section
An alternative name for the
.Ar section
containing the SPKAC.
.It Fl verify
Verify the digital signature on the supplied SPKAC.
@


1.75
log
@remove comment about CMS; ok jsing
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.74 2016/09/15 20:57:07 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 15 2016 $
d4690 1
a4690 1
.It Fl md4|md5|ripemd160|sha|sha1
a5006 3
.\"
.\" VERIFY
.\"
a5009 1
.Bk -words
a5026 1
.Op Fl
a5027 1
.Ek
d5051 7
a5057 4
The certificates should have names of the form
.Em hash.0 ,
or have symbolic links to them of this form
("hash" is the hashed certificate subject name: see the
a5061 4
The
.Nm c_rehash
script distributed with OpenSSL
will automatically create symbolic links to a directory of certificates.
d5063 1
a5063 1
Checks end entity certificate validity by attempting to look up a valid CRL.
d5066 1
a5066 1
Checks the validity of all certificates in the chain by attempting
d5069 1
a5069 1
Set policy variable require-explicit-policy (see RFC 3280 et al).
d5074 1
a5074 1
Prints out a usage message.
d5076 1
a5076 5
Normally if an unhandled critical extension is present which is not
supported by
.Nm OpenSSL ,
the certificate is rejected (as required by RFC 3280 et al).
If this option is set, critical extensions are ignored.
d5078 1
a5078 1
Set policy variable inhibit-any-policy (see RFC 3280 et al).
d5080 1
a5080 1
Set policy variable inhibit-policy-mapping (see RFC 3280 et al).
d5082 6
a5087 6
Print out diagnostics relating to searches for the issuer certificate
of the current certificate.
This shows why each candidate issuer certificate was rejected.
However the presence of rejection messages
does not itself imply that anything is wrong: during the normal
verify process several rejections may take place.
d5089 1
a5089 1
Enables certificate policy processing.
d5094 4
a5097 4
.Ar sslclient , sslserver ,
.Ar nssslserver , smimesign ,
.Ar smimeencrypt , crlsign ,
.Ar any ,
d5099 1
a5099 4
.Ar ocsphelper .
See the
.Sx VERIFY OPERATION
section for more information.
a5111 5
.It Fl
Marks the last option.
All arguments following this are assumed to be certificate files.
This is useful if the first certificate filename begins with a
.Sq - .
d5113 1
a5113 1
One or more
d5118 2
a5119 1
They should all be in PEM format.
d5121 1
a5121 1
.Sh VERIFY OPERATION
d5125 3
a5127 8
therefore this description applies to these verify operations too.
.Pp
There is one crucial difference between the verify operations performed
by the
.Nm verify
program: wherever possible an attempt is made to continue
after an error, whereas normally the verify operation would halt on the
first error.
d5130 1
a5130 2
The verify operation consists of a number of separate steps:
.Pp
d5139 1
a5139 10
The process of
.Qq looking up the issuer's certificate
itself involves a number of steps.
In versions of
.Nm OpenSSL
before 0.9.5a the first certificate whose subject name matched the issuer
of the current certificate was assumed to be the issuer's certificate.
In
.Nm OpenSSL
0.9.6 and later all certificates whose subject name matches the issuer name
d5142 5
a5146 8
.Pq if present
must match the subject key identifier
.Pq if present
and issuer and serial number of the candidate issuer; in addition the
.Em keyUsage
extension of the candidate issuer
.Pq if present
must permit certificate signing.
d5150 3
a5152 3
The root CA is always looked up in the trusted certificate list: if the
certificate to verify is a root certificate, then an exact match must be
found in the trusted list.
d5165 1
a5165 1
.Sx X.509 CERTIFICATE EXTENSIONS
d5170 1
a5170 5
For compatibility with previous versions of
.Nm SSLeay
and
.Nm OpenSSL ,
a certificate with no trust settings is considered to be valid for
d5175 1
a5175 1
.Em notBefore
d5177 1
a5177 1
.Em notAfter
a5183 1
.Sh VERIFY DIAGNOSTICS
d5186 3
a5188 3
.Bd -unfilled
\& server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024-bit)
\& error 24 at 1 depth lookup:invalid CA certificate
d5202 1
a5202 2
Some of the error codes are defined but never returned: these are described
as
d5205 1
a5205 1
.It Ar "0 X509_V_OK: ok"
d5207 1
a5207 1
.It Ar 2 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate
d5210 1
a5210 1
.It Ar 3 X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL
d5212 1
a5212 1
.It Ar 4 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt certificate's signature
d5217 1
a5217 1
.It Ar 5 X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL's signature
d5222 1
a5222 1
.It Ar 6 X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer public key
d5224 1
a5224 1
.Em SubjectPublicKeyInfo
d5226 1
a5226 1
.It Ar 7 X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure
d5228 1
a5228 1
.It Ar 8 X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure
d5230 1
a5230 1
.It Ar 9 X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid
d5232 1
a5232 1
.Em notBefore
d5234 1
a5234 1
.It Ar 10 X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired
d5236 1
a5236 1
.Em notAfter
d5238 1
a5238 1
.It Ar 11 X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid
d5240 1
a5240 1
.It Ar 12 X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired
d5242 1
a5242 1
.It Ar 13 X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in certificate's notBefore field
d5244 1
a5244 1
.Em notBefore
d5246 1
a5246 1
.It Ar 14 X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in certificate's notAfter field
d5248 1
a5248 1
.Em notAfter
d5250 1
a5250 1
.It Ar 15 X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL's lastUpdate field
d5252 1
a5252 1
.Em lastUpdate
d5254 1
a5254 1
.It Ar 16 X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL's nextUpdate field
d5256 1
a5256 1
.Em nextUpdate
d5258 1
a5258 1
.It Ar 17 X509_V_ERR_OUT_OF_MEM: out of memory
d5261 1
a5261 1
.It Ar 18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate
d5264 1
a5264 1
.It Ar 19 X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in certificate chain
d5267 1
a5267 1
.It Ar 20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate
d5270 1
a5270 1
.It Ar 21 X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first certificate
d5273 1
a5273 1
.It Ar 22 X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long
d5276 1
a5276 1
.It Ar 23 X509_V_ERR_CERT_REVOKED: certificate revoked
d5278 1
a5278 1
.It Ar 24 X509_V_ERR_INVALID_CA: invalid CA certificate
d5282 1
a5282 1
.It Ar 25 X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded
d5284 1
a5284 1
.Em basicConstraints
d5286 1
a5286 1
.It Ar 26 X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose
d5288 1
a5288 1
.It Ar 27 X509_V_ERR_CERT_UNTRUSTED: certificate not trusted
d5290 1
a5290 1
.It Ar 28 X509_V_ERR_CERT_REJECTED: certificate rejected
d5292 1
a5292 1
.It Ar 29 X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch
d5298 1
a5298 1
.It Ar 30 X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier mismatch
d5305 1
a5305 1
.It Ar 31 X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial number mismatch
d5312 1
a5312 1
.It Ar 32 X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate signing
d5314 1
a5314 1
.Em keyUsage
d5316 1
a5316 1
.It Ar 50 X509_V_ERR_APPLICATION_VERIFICATION: application verification failure
a5319 16
.Sh VERIFY BUGS
Although the issuer checks are a considerable improvement over the old
technique, they still suffer from limitations in the underlying
X509_LOOKUP API.
One consequence of this is that trusted certificates with matching subject
name must either appear in a file (as specified by the
.Fl CAfile
option) or a directory (as specified by
.Fl CApath ) .
If they occur in both, only the certificates in the file will
be recognised.
.Pp
Previous versions of
.Nm OpenSSL
assumed certificates with matching subject name were identical and
mishandled them.
@


1.74
log
@add some Xr for acme-client(1);
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.73 2016/09/15 20:54:28 jmc Exp $
a2401 1
They cannot currently parse, for example, the new CMS as described in RFC 2630.
@


1.73
log
@some spkac shortening; ok beck
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.72 2016/09/15 17:49:03 jmc Exp $
d6496 1
@


1.72
log
@shorten ts;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.71 2016/09/12 13:34:12 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 12 2016 $
a4948 3
.\"
.\" SPKAC
.\"
a4951 1
.Bk -words
a4961 1
.Ek
d4966 1
a4966 3
command processes Netscape signed public key and challenge
.Pq SPKAC
files.
d4973 1
a4973 1
Specifies the challenge string if an SPKAC is being created.
d4975 2
a4976 3
This specifies the input
.Ar file
to read from, or standard input if this option is not specified.
d4987 1
a4987 1
options are ignored if present.
d4989 1
a4989 2
Don't output the text version of the SPKAC
.Pq not used if an SPKAC is being created .
d4991 2
a4992 3
Specifies the output
.Ar file
to write to, or standard output by default.
d4996 1
a4996 2
Output the public key of an SPKAC
.Pq not used if an SPKAC is being created .
d4998 1
a4998 1
Allows an alternative name for the variable containing the SPKAC.
d5002 1
a5002 1
Allows an alternative name for the
a5004 1
The default is the default section.
d5006 1
a5006 1
Verifies the digital signature on the supplied SPKAC.
a5007 43
.Sh SPKAC EXAMPLES
Print out the contents of an SPKAC:
.Pp
.Dl $ openssl spkac -in spkac.cnf
.Pp
Verify the signature of an SPKAC:
.Pp
.Dl $ openssl spkac -in spkac.cnf -noout -verify
.Pp
Create an SPKAC using the challenge string
.Qq hello :
.Pp
.Dl $ openssl spkac -key key.pem -challenge hello -out spkac.cnf
.Pp
Example of an SPKAC,
.Pq long lines split up for clarity :
.Bd -unfilled -offset indent
SPKAC=MIG5MGUwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA1cCoq2Wa3Ixs47uI7F\e
PVwHVIPDx5yso105Y6zpozam135a8R0CpoRvkkigIyXfcCjiVi5oWk+6FfPaD03u\e
PFoQIDAQABFgVoZWxsbzANBgkqhkiG9w0BAQQFAANBAFpQtY/FojdwkJh1bEIYuc\e
2EeM2KHTWPEepWYeawvHD0gQ3DngSC75YCWnnDdq+NQ3F+X4deMx9AaEglZtULwV\e
4=
.Ed
.Sh SPKAC NOTES
A created SPKAC with suitable DN components appended can be fed into
the
.Nm ca
utility.
.Pp
SPKACs are typically generated by Netscape when a form is submitted
containing the
.Em KEYGEN
tag as part of the certificate enrollment process.
.Pp
The challenge string permits a primitive form of proof of possession
of private key.
By checking the SPKAC signature and a random challenge
string, some guarantee is given that the user knows the private key
corresponding to the public key being certified.
This is important in some applications.
Without this it is possible for a previous SPKAC
to be used in a
.Qq replay attack .
@


1.71
log
@shorten speed;
help/ok guenther bcook
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.70 2016/09/08 18:24:08 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 8 2016 $
d358 1
a358 1
Specifies the configuration file to use.
a3265 3
As with all configuration files, if no value is specified in the specific
section then the initial unnamed or default section is searched too.
.Pp
d3378 1
a3378 1
field values are interpreted as UTF8 strings, not ASCII.
d3386 1
a3386 1
option.
d3395 2
a3396 6
the sections consist of just field names and values,
which allows external programs to generate a template file
with all the field names and values and just pass it to
.Nm req .
.Pp
Alternatively if the
d3400 1
a3400 2
then the file contains field prompting information.
It consists of lines of the form:
d4188 1
a4188 1
in human readable format.
a4582 3
.\"
.\" TS
.\"
a4585 1
.Bk -words
a4596 1
.Ek
a4600 1
.Bk -words
a4614 1
.Ek
a4618 1
.Bk -words
a4627 1
.Ek
d4635 1
a4635 1
term proof of the existence of a certain datum before a particular time.
d4674 1
a4674 2
The TSA is expected to include its signing certificate in the
response.
d4676 2
a4677 7
The configuration file to use.
This option overrides the
.Ev OPENSSL_CONF
environment variable.
Only the OID section of the config file is used with the
.Fl query
command.
d4680 1
a4680 5
stdin is the default if neither the
.Fl data
nor the
.Fl digest
option is specified.
d4682 1
a4682 2
It is possible to specify the message imprint explicitly without the data
file.
d4685 1
a4685 1
the bytes optionally separated by colons (e.g. 1A:F6:01:... or 1AF601...).
d4688 1
a4688 1
This option specifies a previously created time stamp request in DER
d4690 1
a4690 2
Useful when you need to examine the content of a request in human-readable
format.
d4698 3
a4700 4
No nonce is specified in the request if this option is given.
Otherwise a 64-bit long pseudo-random none is
included in the request.
It is recommended to use nonce to protect against replay-attacks.
d4702 2
a4703 2
Name of the output file to which the request will be written.
The default is stdout.
d4707 1
a4707 1
Either the dotted OID notation or OID names defined
d4709 1
a4709 2
If no policy is requested the TSA will
use its own default policy.
d4711 1
a4711 2
If this option is specified the output is in human-readable text format
instead of DER.
d4728 1
a4728 1
The collection of certificates, in PEM format,
d4739 1
a4739 7
The configuration file to use.
This option overrides the
.Ev OPENSSL_CONF
environment variable.
See
.Sx TS CONFIGURATION FILE OPTIONS
for configurable variables.
d4741 1
a4741 1
Specifies a previously created time stamp response or time stamp token, if
d4743 1
a4743 1
is also specified,
d4747 2
a4748 2
when you need to examine the content of a response or token
or you want to extract the time stamp token from a response.
d4750 1
a4750 1
.Dq granted
d4767 4
a4770 6
The default policy to use for the response unless the client
explicitly requires a particular TSA policy.
The OID can be specified either in dotted notation or with its name.
Overrides the
.Cm default_policy
config file option.
d4772 1
a4772 1
The name of the file containing a DER-encoded time stamp request.
d4774 1
a4774 5
The name of the config file section containing the settings for the
response generation.
If not specified the default TSA section is used; see
.Sx TS CONFIGURATION FILE OPTIONS
for details.
d4776 1
a4776 1
The signer certificate of the TSA in PEM format.
d4785 1
a4785 2
If this option is specified the output is human-readable text format
instead of DER.
d4787 2
a4788 4
This flag can be used together with the
.Fl in
option and indicates that the input is a DER-encoded time stamp token
(ContentInfo) instead of a time stamp response (TimeStampResp).
d4790 2
a4791 2
The output is a time stamp token (ContentInfo) instead of time stamp
response (TimeStampResp).
d4803 2
a4804 3
The name of the file containing a set of trusted self-signed CA
certificates in PEM format.
See the similar option of
d4811 2
a4812 3
The name of the directory containing the trused CA certificates of the
client.
See the similar option of
d4848 2
a4849 4
This flag can be used together with the
.Fl in
option and indicates that the input is a DER-encoded time stamp token
(ContentInfo) instead of a time stamp response (TimeStampResp).
d4851 2
a4852 3
Set of additional untrusted certificates in PEM format which may be
needed when building the certificate chain for the TSA's signing
certificate.
a4855 15
.Sh TS CONFIGURATION FILE OPTIONS
The
.Fl query
and
.Fl reply
options make use of a configuration file defined by the
.Ev OPENSSL_CONF
environment variable.
The
.Fl query
option uses only the symbolic OID names section
and it can work without it.
However, the
.Fl reply
option needs the config file for its operation.
d4857 2
a4858 2
When there is a command line switch equivalent of a variable the
switch always overrides the settings in the config file.
d4865 1
a4865 1
This default section can be overridden with the
d4877 1
a4877 1
The name of the file containing the hexadecimal serial number of the
d4880 2
a4881 2
If the file does not exist at the time of response
generation a new file is created with serial number 1.
d4889 1
a4889 1
A file containing a set of PEM-encoded certificates that need to be
d4918 2
a4919 2
Specifies the maximum number of digits, which represent the fraction of
seconds, that need to be included in the time field.
d4921 1
a4921 1
so there might actually be fewer digits,
a4948 153
.Sh TS ENVIRONMENT VARIABLES
.Ev OPENSSL_CONF
contains the path of the configuration file and can be
overridden by the
.Fl config
command line option.
.Sh TS EXAMPLES
All the examples below presume that
.Ev OPENSSL_CONF
is set to a proper configuration file,
e.g. the example configuration file
.Pa openssl/apps/openssl.cnf
will do.
.Pp
To create a time stamp request for design1.txt with SHA-1
without nonce and policy and no certificate is required in the response:
.Bd -literal -offset indent
$ openssl ts -query -data design1.txt -no_nonce \e
	-out design1.tsq
.Ed
.Pp
To create a similar time stamp request but specifying the message imprint
explicitly:
.Bd -literal -offset indent
$ openssl ts -query \e
	-digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \e
	-no_nonce -out design1.tsq
.Ed
.Pp
To print the content of the previous request in human readable format:
.Bd -literal -offset indent
$ openssl ts -query -in design1.tsq -text
.Ed
.Pp
To create a time stamp request which includes the MD5 digest
of design2.txt, requests the signer certificate and nonce,
specifies a policy ID
(assuming the tsa_policy1 name is defined in the
OID section of the config file):
.Bd -literal -offset indent
$ openssl ts -query -data design2.txt -md5 \e
	-policy tsa_policy1 -cert -out design2.tsq
.Ed
.Pp
Before generating a response,
a signing certificate must be created for the TSA that contains the
.Cm timeStamping
critical extended key usage extension
without any other key usage extensions.
You can add the
.Dq extendedKeyUsage = critical,timeStamping
line to the user certificate section
of the config file to generate a proper certificate.
See the
.Nm req ,
.Nm ca ,
and
.Nm x509
commands for instructions.
The examples below assume that cacert.pem contains the certificate of the CA,
tsacert.pem is the signing certificate issued by cacert.pem and
tsakey.pem is the private key of the TSA.
.Pp
To create a time stamp response for a request:
.Bd -literal -offset indent
$ openssl ts -reply -queryfile design1.tsq -inkey tsakey.pem \e
	-signer tsacert.pem -out design1.tsr
.Ed
.Pp
If you want to use the settings in the config file you could just write:
.Bd -literal -offset indent
$ openssl ts -reply -queryfile design1.tsq -out design1.tsr
.Ed
.Pp
To print a time stamp reply to stdout in human readable format:
.Bd -literal -offset indent
$ openssl ts -reply -in design1.tsr -text
.Ed
.Pp
To create a time stamp token instead of time stamp response:
.Bd -literal -offset indent
$ openssl ts -reply -queryfile design1.tsq \e
	-out design1_token.der -token_out
.Ed
.Pp
To print a time stamp token to stdout in human readable format:
.Bd -literal -offset indent
$ openssl ts -reply -in design1_token.der -token_in \e
	-text -token_out
.Ed
.Pp
To extract the time stamp token from a response:
.Bd -literal -offset indent
$ openssl ts -reply -in design1.tsr -out design1_token.der \e
	-token_out
.Ed
.Pp
To add
.Dq granted
status info to a time stamp token thereby creating a valid response:
.Bd -literal -offset indent
$ openssl ts -reply -in design1_token.der \e
	-token_in -out design1.tsr
.Ed
.Pp
To verify a time stamp reply against a request:
.Bd -literal -offset indent
$ openssl ts -verify -queryfile design1.tsq -in design1.tsr \e
	-CAfile cacert.pem -untrusted tsacert.pem
.Ed
.Pp
To verify a time stamp reply that includes the certificate chain:
.Bd -literal -offset indent
$ openssl ts -verify -queryfile design2.tsq -in design2.tsr \e
	-CAfile cacert.pem
.Ed
.Pp
To verify a time stamp token against the original data file:
.Bd -literal -offset indent
$ openssl ts -verify -data design2.txt -in design2.tsr \e
	-CAfile cacert.pem
.Ed
.Pp
To verify a time stamp token against a message imprint:
.Bd -literal -offset indent
$ openssl ts -verify \e
	-digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \e
	-in design2.tsr -CAfile cacert.pem
.Ed
.Sh TS BUGS
No support for time stamps over SMTP, though it is quite easy
to implement an automatic email-based TSA with
.Xr procmail
and
.Xr perl 1 .
Pure TCP/IP is not supported.
.Pp
The file containing the last serial number of the TSA is not
locked when being read or written.
This is a problem if more than one instance of
.Nm OpenSSL
is trying to create a time stamp
response at the same time.
.Pp
Look for the FIXME word in the source files.
.Pp
The source code should really be reviewed by somebody else, too.
.Pp
More testing is needed.
.Sh TS AUTHORS
.An Zoltan Glozik Aq Mt zglozik@@opentsa.org ,
OpenTSA project
.Pq Lk http://www.opentsa.org .
@


1.70
log
@shorten smime;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.69 2016/09/04 19:38:51 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 4 2016 $
a4555 3
.\"
.\" SPEED
.\"
d4559 1
a4559 32
.Bk -words
.Op Cm aes
.Op Cm aes-128-cbc
.Op Cm aes-192-cbc
.Op Cm aes-256-cbc
.Op Cm aes-128-gcm
.Op Cm aes-256-gcm
.Op Cm blowfish
.Op Cm bf-cbc
.Op Cm cast
.Op Cm cast-cbc
.Op Cm chacha20-poly1305
.Op Cm des
.Op Cm des-cbc
.Op Cm des-ede3
.Op Cm dsa
.Op Cm dsa512
.Op Cm dsa1024
.Op Cm dsa2048
.Op Cm hmac
.Op Cm md4
.Op Cm md5
.Op Cm rc2
.Op Cm rc2-cbc
.Op Cm rc4
.Op Cm rmd160
.Op Cm rsa
.Op Cm rsa512
.Op Cm rsa1024
.Op Cm rsa2048
.Op Cm rsa4096
.Op Cm sha1
d4562 1
a4562 1
.Op Fl evp Ar e
a4564 1
.Ek
d4571 4
a4574 4
.It Bq Cm zero or more test algorithms
If any options are given,
.Nm speed
tests those algorithms, otherwise all of the above are tested.
d4576 3
a4578 2
Time decryption instead of encryption
.Pq only EVP .
d4581 3
a4583 3
.It Fl evp Ar e
Use EVP
.Ar e .
@


1.69
log
@shorten sess_id;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.68 2016/09/03 13:26:55 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 3 2016 $
a4267 3
.\"
.\" SMIME
.\"
a4270 1
.Bk -words
d4290 1
a4290 1
.Op Fl inform Ar DER | PEM | SMIME
d4293 1
a4293 1
.Op Fl keyform Ar PEM
d4304 1
a4304 1
.Op Fl outform Ar DER | PEM | SMIME
a4318 1
.Ek
d4323 14
a4336 6
command handles
.Em S/MIME
mail.
It can encrypt, decrypt, sign, and verify
.Em S/MIME
messages.
d4338 4
a4341 2
There are six operation options that set the type of operation to be performed.
The meaning of the other options varies according to the operation type.
d4343 1
a4343 1
The six operation options are as follows:
d4347 1
a4347 3
Expects an encrypted mail message in
.Em MIME
format for the input file.
d4351 2
a4352 4
Input file is the message to be encrypted.
The output file is the encrypted mail in
.Em MIME
format.
d4354 1
a4354 1
Takes an input message and writes out a PEM-encoded PKCS#7 structure.
d4359 2
a4360 4
Input file is the message to be signed.
The signed message in
.Em MIME
format is written to the output file.
d4363 1
a4363 1
Expects a signed mail message on input and outputs the signed data.
d4374 1
a4374 5
128-, 192-, or 256-bit AES,
DES
.Pq 56 bits ,
triple DES
.Pq 168 bits ,
d4383 2
a4384 4
format which is effectively using CR and LF as end of line \-
as required by the
.Em S/MIME
specification.
d4386 1
a4386 3
This is useful when handling binary data which may not be in
.Em MIME
format.
d4421 1
a4421 1
.Nm VERIFY
d4424 1
a4424 1
This specifies a file containing the detached content.
d4427 2
a4428 2
command.
This is only usable if the PKCS#7 structure is using the detached
d4430 2
a4431 5
This option will override any content if the input format is
.Em S/MIME
and it uses the multipart/signed
.Em MIME
content type.
d4440 1
a4440 2
When signing, many
.Em S/MIME
d4444 1
a4444 4
The input message to be encrypted or signed or the
.Em MIME
message to
be decrypted or verified.
d4453 2
a4454 18
.It Fl inform Ar DER | PEM | SMIME
This specifies the input format for the PKCS#7 structure.
The default is
.Em SMIME ,
which reads an
.Em S/MIME
format message.
.Ar PEM
and
.Ar DER
format change this to expect PEM and DER format PKCS#7 structures
instead.
This currently only affects the input format of the PKCS#7
structure; if no PKCS#7 structure is being input (for example with
.Fl encrypt
or
.Fl sign ) ,
this option has no effect.
d4456 2
a4457 2
The private key to use when signing or decrypting.
This must match the corresponding certificate.
d4467 1
a4467 1
.It Fl keyform Ar PEM
d4474 1
a4474 3
Normally, when a message is signed a set of attributes are included which
include the signing time and supported symmetric algorithms.
With this option they are not included.
d4476 1
a4476 2
When signing a message, the signer's certificate is normally included;
with this option it is excluded.
d4487 3
a4489 5
do not support
.Em S/MIME .
Without this option cleartext signing with the
.Em MIME
type multipart/signed is used.
d4491 2
a4492 4
Disable streaming I/O where it would produce an encoding of indefinite length.
This option currently has no effect.
In future streaming will be enabled by default on all relevant operations
and this option will disable it.
d4494 3
a4496 7
When verifying a message, normally certificates
.Pq if any
included in the message are searched for the signing certificate.
With this option, only the certificates specified in the
.Fl certfile
option are used.
The supplied certificates can still be used as untrusted CAs however.
d4498 1
a4498 1
Don't try to verify the signatures on the message.
d4502 5
a4506 11
The message text that has been decrypted or verified, or the output
.Em MIME
format message that has been signed or verified.
.It Fl outform Ar DER | PEM | SMIME
This specifies the output format for the PKCS#7 structure.
The default is
.Em SMIME ,
which writes an
.Em S/MIME
format message.
.Ar PEM
d4508 2
a4509 3
.Ar DER
format change this to write PEM and DER format PKCS#7 structures
instead.
d4531 1
a4531 3
This option adds plain text
.Pq text/plain
.Em MIME
d4534 2
a4535 3
if the decrypted or verified message is not of
.Em MIME
type text/plain then an error occurs.
a4536 8
.Sh SMIME NOTES
The
.Em MIME
message must be sent without any blank lines between the
headers and the output.
Some mail programs will automatically add a blank line.
Piping the mail directly to an MTA is one way to
achieve the correct format.
d4538 3
a4540 18
The supplied message to be signed or encrypted must include the
necessary
.Em MIME
headers or many
.Em S/MIME
clients won't display it properly
.Pq if at all .
You can use the
.Fl text
option to automatically add plain text headers.
.Pp
A
.Qq signed and encrypted
message is one where a signed message is then encrypted.
This can be produced by encrypting an already signed message:
see the
.Sx SMIME EXAMPLES
section.
d4542 2
a4543 46
This version of the program only allows one signer per message, but it
will verify multiple signers on received messages.
Some
.Em S/MIME
clients choke if a message contains multiple signers.
It is possible to sign messages
.Qq in parallel
by signing an already signed message.
.Pp
The options
.Fl encrypt
and
.Fl decrypt
reflect common usage in
.Em S/MIME
clients.
Strictly speaking these process PKCS#7 enveloped data: PKCS#7
encrypted data is used for other purposes.
.Pp
The
.Fl resign
option uses an existing message digest when adding a new signer.
This means that attributes must be present in at least one existing
signer using the same message digest or this operation will fail.
.Pp
The
.Fl stream
and
.Fl indef
options enable experimental streaming I/O support.
As a result the encoding is BER using indefinite length constructed encoding
and no longer DER.
Streaming is supported for the
.Fl encrypt
and
.Fl sign
operations if the content is not detached.
.Pp
Streaming is always used for the
.Fl sign
operation with detached data
but since the content is no longer part of the PKCS#7 structure
the encoding remains DER.
.Sh SMIME EXIT CODES
.Bl -tag -width "XXXX"
.It Ar 0
d4545 1
a4545 1
.It Ar 1
d4547 1
a4547 1
.It Ar 2
d4549 3
a4551 5
.It Ar 3
An error occurred creating the PKCS#7 file or when reading the
.Em MIME
message.
.It Ar 4
d4553 2
a4554 3
.It Ar 5
The message was verified correctly, but an error occurred writing out
the signer's certificates.
a4555 140
.Sh SMIME EXAMPLES
Create a cleartext signed message:
.Bd -literal -offset indent
$ openssl smime -sign -in message.txt -text -out mail.msg \e
	-signer mycert.pem
.Ed
.Pp
Create an opaque signed message:
.Bd -literal -offset indent
$ openssl smime -sign -in message.txt -text -out mail.msg \e
	-nodetach -signer mycert.pem
.Ed
.Pp
Create a signed message, include some additional certificates and
read the private key from another file:
.Bd -literal -offset indent
$ openssl smime -sign -in in.txt -text -out mail.msg \e
	-signer mycert.pem -inkey mykey.pem -certfile mycerts.pem
.Ed
.Pp
Create a signed message with two signers:
.Bd -literal -offset indent
openssl smime -sign -in message.txt -text -out mail.msg \e
	-signer mycert.pem -signer othercert.pem
.Ed
.Pp
Send a signed message under
.Ux
directly to
.Xr sendmail 8 ,
including headers:
.Bd -literal -offset indent
$ openssl smime -sign -in in.txt -text -signer mycert.pem \e
	-from steve@@openssl.org -to someone@@somewhere \e
	-subject "Signed message" | sendmail someone@@somewhere
.Ed
.Pp
Verify a message and extract the signer's certificate if successful:
.Bd -literal -offset indent
$ openssl smime -verify -in mail.msg -signer user.pem \e
	-out signedtext.txt
.Ed
.Pp
Send encrypted mail using triple DES:
.Bd -literal -offset indent
$ openssl smime -encrypt -in in.txt -from steve@@openssl.org \e
	-to someone@@somewhere -subject "Encrypted message" \e
	-des3 -out mail.msg user.pem
.Ed
.Pp
Sign and encrypt mail:
.Bd -literal -offset indent
$ openssl smime -sign -in ml.txt -signer my.pem -text | \e
	openssl smime -encrypt -out mail.msg \e
	-from steve@@openssl.org -to someone@@somewhere \e
	-subject "Signed and Encrypted message" -des3 user.pem
.Ed
.Pp
.Sy Note :
The encryption command does not include the
.Fl text
option because the message being encrypted already has
.Em MIME
headers.
.Pp
Decrypt mail:
.Bd -literal -offset indent
$ openssl smime -decrypt -in mail.msg -recip mycert.pem \e
	-inkey key.pem"
.Ed
.Pp
The output from Netscape form signing is a PKCS#7 structure with the
detached signature format.
You can use this program to verify the signature by line wrapping the
base64-encoded structure and surrounding it with:
.Bd -unfilled -offset indent
-----BEGIN PKCS7-----
-----END PKCS7-----
.Ed
.Pp
and using the command:
.Bd -literal -offset indent
$ openssl smime -verify -inform PEM -in signature.pem \e
	-content content.txt
.Ed
.Pp
Alternatively, you can base64 decode the signature and use:
.Bd -literal -offset indent
$ openssl smime -verify -inform DER -in signature.der \e
	-content content.txt
.Ed
.Pp
Create an encrypted message using 128-bit AES:
.Bd -literal -offset indent
openssl smime -encrypt -in plain.txt -aes128 \e
	-out mail.msg cert.pem
.Ed
.Pp
Add a signer to an existing message:
.Bd -literal -offset indent
openssl smime -resign -in mail.msg -signer newsign.pem \e
	-out mail2.msg
.Ed
.Sh SMIME BUGS
The
.Em MIME
parser isn't very clever: it seems to handle most messages that I've thrown
at it, but it may choke on others.
.Pp
The code currently will only write out the signer's certificate to a file:
if the signer has a separate encryption certificate this must be manually
extracted.
There should be some heuristic that determines the correct encryption
certificate.
.Pp
Ideally, a database should be maintained of a certificate for each email
address.
.Pp
The code doesn't currently take note of the permitted symmetric encryption
algorithms as supplied in the
.Em SMIMECapabilities
signed attribute.
This means the user has to manually include the correct encryption algorithm.
It should store the list of permitted ciphers in a database and only use those.
.Pp
No revocation checking is done on the signer's certificate.
.Pp
The current code can only handle
.Em S/MIME
v2 messages; the more complex
.Em S/MIME
v3 structures may cause parsing errors.
.Sh SMIME HISTORY
The use of multiple
.Fl signer
options and the
.Fl resign
command were first added in
.Nm OpenSSL
1.0.0.
d6769 2
@


1.68
log
@shorten s_time; help/ok bcook
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.67 2016/09/02 18:43:52 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 2 2016 $
a4177 3
.\"
.\" SESS_ID
.\"
a4180 1
.Bk -words
d4184 1
a4184 1
.Op Fl inform Ar DER | PEM
d4187 1
a4187 1
.Op Fl outform Ar DER | PEM
a4188 1
.Ek
d4195 1
a4195 1
.Pq for example the SSL session master key
a4196 2
Since this is a diagnostic tool that needs some knowledge of the SSL
protocol to use properly, most users will not need to use it.
d4207 1
a4207 2
This option can set the session ID so the output session information uses the
supplied
d4209 1
a4209 4
The
.Ar ID
can be any string of characters.
This option won't normally be used.
d4211 6
a4216 9
This specifies the input
.Ar file
to read session information from, or standard input by default.
.It Fl inform Ar DER | PEM
This specifies the input format.
The
.Ar DER
argument uses an ASN1 DER-encoded
format containing session details.
d4218 2
a4219 3
The
.Ar PEM
form is the default format: it consists of the DER
d4222 1
a4222 1
This option prevents output of the encoded version of the session.
d4224 4
a4227 8
This specifies the output
.Ar file
to write session information to, or standard
output if this option is not specified.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
d4229 2
a4230 2
Prints out the various public or private key components in
plain text in addition to the encoded version.
a4231 14
.Sh SESS_ID OUTPUT
Typical output:
.Bd -literal
SSL-Session:
    Protocol  : TLSv1
    Cipher    : 0016
    Session-ID: 871E62626C554CE95488823752CBD5F3673A3EF3DCE9C67BD916C809914B40ED
    Session-ID-ctx: 01000000
    Master-Key: A7CEFC571974BE02CAC305269DC59F76EA9F0B180CB6642697A68251F2D2BB57E51DBBB4C7885573192AE9AEE220FACD
    Key-Arg   : None
    Start Time: 948459261
    Timeout   : 300 (sec)
    Verify return code 0 (ok)
.Ed
d4233 3
a4235 1
These are described below in more detail.
d4237 12
a4248 13
.Bl -tag -width "Verify return code " -compact
.It Ar Protocol
This is the protocol in use.
.It Ar Cipher
The cipher used is the actual raw SSL or TLS cipher code;
see the SSL or TLS specifications for more information.
.It Ar Session-ID
The SSL session ID in hex format.
.It Ar Session-ID-ctx
The session ID context in hex format.
.It Ar Master-Key
This is the SSL session master key.
.It Ar Key-Arg
d4250 2
a4251 2
.It Ar Start Time
This is the session start time, represented as an integer in standard
d4254 4
a4257 4
.It Ar Timeout
The timeout in seconds.
.It Ar Verify return code
This is the return code when an SSL client certificate is verified.
a4258 6
.Sh SESS_ID NOTES
The PEM-encoded session format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN SSL SESSION PARAMETERS-----
-----END SSL SESSION PARAMETERS-----
.Ed
a4267 2
.Sh SESS_ID BUGS
The cipher and start time should be printed out in human readable form.
@


1.67
log
@shorten s_server;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.66 2016/09/01 08:26:44 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 1 2016 $
a4069 3
.\"
.\" S_TIME
.\"
a4072 1
.Bk -words
d4078 1
a4078 1
.Op Fl connect Ar host : Ns Ar port
a4086 1
.Ek
d4090 1
a4090 1
.Nm s_client
d4103 1
a4103 2
There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.
d4105 3
a4107 1
A file containing trusted certificates to use during server authentication
a4119 1
The file is in PEM format.
d4121 1
a4121 1
This allows the cipher list sent by the client to be modified.
d4127 2
a4128 2
.It Fl connect Ar host : Ns Ar port
This specifies the host and optional port to connect to.
a4131 1
The file is in PEM format.
d4133 1
a4133 1
Turns on non-blocking I/O.
d4135 1
a4135 1
Performs the timing test using a new session ID for each connection.
d4144 1
a4144 1
.Dq close notify
d4147 1
a4147 2
Performs the timing test using the same session ID;
this can be used as a test that session caching is working.
d4155 1
a4155 2
Specifies how long
.Pq in seconds
d4157 2
a4158 2
should establish connections and
optionally transfer payload data from a server.
a4159 4
Server and client performance and the link speed
determine how many connections
.Nm s_time
can establish.
d4161 3
a4163 3
The verify depth to use.
This specifies the maximum length of the server certificate chain
and turns on server certificate verification.
d4169 1
a4169 1
This specifies the page to GET from the server.
a4177 57
.Sh S_TIME NOTES
.Nm s_client
can be used to measure the performance of an SSL connection.
To connect to an SSL HTTP server and get the default page the command
.Bd -literal -offset indent
$ openssl s_time -connect servername:443 -www / -CApath yourdir \e
	-CAfile yourfile.pem -cipher commoncipher
.Ed
.Pp
would typically be used
.Pq HTTPS uses port 443 .
.Dq commoncipher
is a cipher to which both client and server can agree;
see the
.Nm ciphers
command for details.
.Pp
If the handshake fails, there are several possible causes:
if it is nothing obvious like no client certificate, the
.Fl bugs
option can be tried in case it is a buggy server.
.Pp
A frequent problem when attempting to get client certificates working
is that a web client complains it has no certificates or gives an empty
list to choose from.
This is normally because the server is not sending
the clients certificate authority in its
.Qq acceptable CA list
when it requests a certificate.
By using
.Nm s_client ,
the CA list can be viewed and checked.
However some servers only request client authentication
after a specific URL is requested.
To obtain the list in this case, it is necessary to use the
.Fl prexit
option of
.Nm s_client
and send an HTTP request for an appropriate page.
.Pp
If a certificate is specified on the command line using the
.Fl cert
option,
it will not be used unless the server specifically requests
a client certificate.
Therefore merely including a client certificate
on the command line is no guarantee that the certificate works.
.Sh S_TIME BUGS
Because this program does not have all the options of the
.Nm s_client
program to turn protocols on and off,
you may not be able to measure the performance
of all protocols with all servers.
.Pp
The
.Fl verify
option should really exit if the server verification fails.
@


1.66
log
@shorten s_client;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.65 2016/08/30 07:53:59 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 30 2016 $
a3839 3
.\"
.\" S_SERVER
.\"
a3842 1
.Bk -words
a3881 1
.Ek
d3889 23
d3915 1
a3915 1
The TCP
d3917 2
a3918 2
to listen on for connections.
If not specified, 4433 is used.
d3920 1
a3920 2
There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.
d3922 3
a3924 1
A file containing trusted certificates to use during client authentication
d3939 4
a3942 5
The certificate to use; most server's cipher suites require the use of a
certificate and some require a certificate with a certain public key type:
for example the DSS cipher suites require a certificate containing a DSS
.Pq DSA
key.
d3947 1
d3954 2
a3955 2
.Sx CIPHERS
section for more information.
d3957 1
a3957 1
Sets the SSL context ID.
a3958 1
If this option is not present, a default value will be used.
a3961 1
With the
d3963 1
a3963 1
option, all CRLs of all CAs in the chain are checked.
d3965 1
a3965 1
This option translates a line feed from the terminal into CR+LF.
d3973 1
a3973 7
.Pq no additional certificate or key is used .
As noted above some cipher suites require a certificate containing a key of
a certain type.
Some cipher suites need a certificate carrying an RSA key
and some a DSS
.Pq DSA
key.
d3978 1
a3978 1
Print extensive debugging information including a hex dump of all traffic.
d3989 1
a3989 3
This option enables a further workaround for some early Netscape
SSL code
.Pq \&? .
d3991 3
a3993 3
Emulates a simple web server.
Pages will be resolved relative to the current directory;
for example if the URL
d4005 1
a4005 1
.Pq e.g. proxies
d4008 1
a4008 1
.Pq e.g. with a certain prefix .
d4015 1
a4015 1
Turns on non-blocking I/O.
d4017 1
a4017 1
Tests non-blocking I/O.
d4019 1
a4019 2
If this option is set, no DH parameters will be loaded, effectively
disabling the ephemeral DH cipher suites.
d4021 1
a4021 3
By default, the initial handshake uses a method which should be compatible
with clients supporting any version of TLS.
These options disable the use of TLS1.0, 1.1, and 1.2, respectively.
d4023 1
a4023 2
Certain export cipher suites sometimes use a temporary RSA key; this option
disables temporary RSA key generation.
d4025 1
a4025 1
If this option is set, no certificate is used.
d4027 1
a4027 1
.Pq currently just anonymous DH .
d4043 1
a4043 1
Prints out the SSL session states.
d4047 3
a4049 3
Emulates a simple web server.
Pages will be resolved relative to the current directory;
for example if the URL
d4055 2
a4056 3
Sends a status message back to the client when it connects.
This includes lots of information about the ciphers used and various
session parameters.
d4060 9
a4068 36
The verify
.Ar depth
to use.
This specifies the maximum length of the client certificate chain
and makes the server request a certificate from the client.
With the
.Fl Verify
option, the client must supply a certificate or an error occurs.
With the
.Fl verify
option, a certificate is requested but the client does not have to send one.
.El
.Sh S_SERVER CONNECTED COMMANDS
If a connection request is established with an SSL client and neither the
.Fl www
nor the
.Fl WWW
option has been used, then normally any data received
from the client is displayed and any key presses will be sent to the client.
.Pp
Certain single letter commands are also recognized which perform special
operations: these are listed below.
.Bl -tag -width "XXXX"
.It Ar P
Send some plain text down the underlying TCP connection: this should
cause the client to disconnect due to a protocol violation.
.It Ar Q
End the current SSL connection and exit.
.It Ar q
End the current SSL connection, but still accept new connections.
.It Ar R
Renegotiate the SSL session and request a client certificate.
.It Ar r
Renegotiate the SSL session.
.It Ar S
Print out some session cache status information.
a4069 39
.Sh S_SERVER NOTES
.Nm s_server
can be used to debug SSL clients.
To accept connections from a web browser the command:
.Pp
.Dl $ openssl s_server -accept 443 -www
.Pp
can be used, for example.
.Pp
Most web browsers
.Pq in particular Netscape and MSIE
only support RSA cipher suites, so they cannot connect to servers
which don't use a certificate carrying an RSA key or a version of
.Nm OpenSSL
with RSA disabled.
.Pp
Although specifying an empty list of CAs when requesting a client certificate
is strictly speaking a protocol violation, some SSL
clients interpret this to mean any CA is acceptable.
This is useful for debugging purposes.
.Pp
The session parameters can printed out using the
.Nm sess_id
program.
.Sh S_SERVER BUGS
Because this program has a lot of options and also because some of
the techniques used are rather old, the C source of
.Nm s_server
is rather hard to read and not a model of how things should be done.
A typical SSL server program would be much simpler.
.Pp
The output of common ciphers is wrong: it just gives the list of ciphers that
.Nm OpenSSL
recognizes and the client supports.
.Pp
There should be a way for the
.Nm s_server
program to print out details of any
unknown cipher suites a client says it supports.
@


1.65
log
@shorten rsautl;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.64 2016/08/28 19:34:15 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 28 2016 $
d2697 1
a2697 1
.Pq ActiveX control signing
d2703 1
a2703 1
Included for compatability only:
a3614 3
.\"
.\" S_CLIENT
.\"
a3617 1
.Bk -words
d3625 1
a3625 4
.Oo
.Fl connect Ar host : Ns Ar port |
.Ar host Ns / Ns Ar port
.Oc
a3660 1
.Ek
d3667 13
a3679 3
It is a
.Em very
useful diagnostic tool for SSL servers.
d3684 1
a3684 3
Specify that
.Nm s_client
should attempt connections using IPv4 only.
d3686 1
a3686 3
Specify that
.Nm s_client
should attempt connections using IPv6 only.
d3688 1
a3688 2
There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.
d3719 1
a3719 1
.Nm VERIFY
d3722 1
a3722 1
This allows the cipher list sent by the client to be modified.
d3726 4
a3729 7
.Sx CIPHERS
section above for more information.
.It Xo
.Fl connect Ar host : Ns Ar port |
.Ar host Ns / Ns Ar port
.Xc
This specifies the
d3731 1
a3731 1
and optional
d3737 2
a3738 2
character.
This form is useful for numeric IPv6 addresses.
d3740 2
a3741 2
This option translates a line feed from the terminal into CR+LF as required
by some servers.
d3743 1
a3743 1
Print extensive debugging information including a hex dump of all traffic.
d3745 1
a3745 2
Inhibit shutting down the connection when end of file is reached in the
input.
d3752 1
a3752 1
Turns on non-blocking I/O.
d3754 1
a3754 1
Tests non-blocking I/O.
d3756 1
a3756 6
By default, the initial handshake uses a method which should be compatible
with servers supporting any version of TLS.
These options disable the use of TLS1.0, 1.1, and 1.2, respectively.
.Pp
Unfortunately there are a lot of ancient and broken servers in use which
cannot handle this technique and will fail to connect.
d3760 1
a3760 1
Pauses 1 second between each read and write call.
d3769 2
a3770 3
.Sy Note :
the output produced by this option is not always accurate because a
connection might never have been established.
d3789 1
a3789 1
Use the PSK identity
d3798 1
a3798 1
Reconnects to the same server 5 times using the same session ID; this can
d3808 1
a3808 1
Send the protocol-specific message(s) to switch to TLS for communication.
d3819 1
a3819 1
Prints out the SSL session states.
d3823 1
a3823 1
Print out a hex dump of any TLS extensions received from the server.
d3825 3
a3827 5
The verify
.Ar depth
to use.
This specifies the maximum length of the
server certificate chain and turns on server certificate verification.
d3833 1
a3833 1
This option, when used with
d3835 1
a3835 1
specifies the host for the "to" attribute of the stream element.
a3839 77
.Sh S_CLIENT CONNECTED COMMANDS
If a connection is established with an SSL server, any data received
from the server is displayed and any key presses will be sent to the
server.
When used interactively (which means neither
.Fl quiet
nor
.Fl ign_eof
have been given), the session will be renegotiated if the line begins with an
.Em R ;
if the line begins with a
.Em Q
or if end of file is reached, the connection will be closed down.
.Sh S_CLIENT NOTES
.Nm s_client
can be used to debug SSL servers.
To connect to an SSL HTTP server the command:
.Pp
.Dl $ openssl s_client -connect servername:443
.Pp
would typically be used
.Pq HTTPS uses port 443 .
If the connection succeeds, an HTTP command can be given such as
.Qq GET
to retrieve a web page.
.Pp
If the handshake fails, there are several possible causes; if it is
nothing obvious like no client certificate, then the
.Fl bugs , tls1 , tls1_1, tls1_2 , no_tls1 , no_tls1_1 ,
and
.Fl no_tls1_2
options can be tried in case it is a buggy server.
.Pp
A frequent problem when attempting to get client certificates working
is that a web client complains it has no certificates or gives an empty
list to choose from.
This is normally because the server is not sending the client's certificate
authority in its
.Qq acceptable CA list
when it requests a certificate.
By using
.Nm s_client
the CA list can be viewed and checked.
However some servers only request client authentication
after a specific URL is requested.
To obtain the list in this case it is necessary to use the
.Fl prexit
option and send an HTTP request for an appropriate page.
.Pp
If a certificate is specified on the command line using the
.Fl cert
option, it will not be used unless the server specifically requests
a client certificate.
Therefore merely including a client certificate
on the command line is no guarantee that the certificate works.
.Pp
If there are problems verifying a server certificate, the
.Fl showcerts
option can be used to show the whole chain.
.Pp
Compression methods are only supported for
.Fl tls1 .
.Sh S_CLIENT BUGS
Because this program has a lot of options and also because some of
the techniques used are rather old, the C source of
.Nm s_client
is rather hard to read and not a model of how things should be done.
A typical SSL client program would be much simpler.
.Pp
The
.Fl verify
option should really exit if the server verification fails.
.Pp
The
.Fl prexit
option is a bit of a hack.
We should really report information whenever a session is renegotiated.
@


1.64
log
@shorten the rsa text; of note, i've also reduced the description
for -inform/-outform/-text and removed the oft-repeated header/footer
blurb;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.63 2016/08/27 20:43:05 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 27 2016 $
a3471 30
.Pp
The following messages are frequently asked about:
.Bd -unfilled -offset indent
Using configuration from /some/path/openssl.cnf
Unable to load config info
\&...
unable to find 'distinguished_name' in config
problems making Certificate Request
.Ed
.Pp
In this case it can't find the configuration file!
.Pp
Another puzzling message is:
.Bd -unfilled -offset indent
Attributes:
    a0:00
.Ed
.Pp
This is displayed when no attributes are present and the request includes
the correct empty SET OF structure
(the DER encoding of which is 0xa0 0x00).
If the message is instead:
.Pp
.D1 Attributes:
.Pp
then the SET OF is missing and the encoding is technically invalid
(but it is tolerated).
See the description
.Fl asn1-kludge
for more information.
a3549 3
.\"
.\" RSAUTL
.\"
a3552 1
.Bk -words
d3560 1
a3560 1
.Op Fl keyform Ar DER | PEM
a3565 1
.Ek
d3588 2
a3589 4
This specifies the input
.Ar file
to read data from, or standard input
if this option is not specified.
d3591 5
a3595 5
The input key file, by default it should be an RSA private key.
.It Fl keyform Ar DER | PEM
Private ket format.
Default is
.Ar PEM .
d3598 1
a3598 3
PKCS#1 OAEP, PKCS#1 v1.5
.Pq the default ,
or no padding, respectively.
d3605 2
a3606 4
Specifies the output
.Ar file
to write to, or standard output by
default.
a3614 98
.Sh RSAUTL NOTES
.Nm rsautl ,
because it uses the RSA algorithm directly, can only be
used to sign or verify small pieces of data.
.Sh RSAUTL EXAMPLES
Sign some data using a private key:
.Pp
.Dl "$ openssl rsautl -sign -in file -inkey key.pem -out sig"
.Pp
Recover the signed data:
.Pp
.Dl $ openssl rsautl -verify -in sig -inkey key.pem
.Pp
Examine the raw signed data:
.Pp
.Li "\ \&$ openssl rsautl -verify -in file -inkey key.pem -raw -hexdump"
.Bd -unfilled
\& 0000 - 00 01 ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0010 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0020 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0030 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0040 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0050 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0060 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0070 - ff ff ff ff 00 68 65 6c-6c 6f 20 77 6f 72 6c 64   .....hello world
.Ed
.Pp
The PKCS#1 block formatting is evident from this.
If this was done using encrypt and decrypt, the block would have been of type 2
.Pq the second byte
and random padding data visible instead of the 0xff bytes.
.Pp
It is possible to analyse the signature of certificates using this
utility in conjunction with
.Nm asn1parse .
Consider the self-signed example in
.Pa certs/pca-cert.pem :
running
.Nm asn1parse
as follows yields:
.Pp
.Li "\ \&$ openssl asn1parse -in pca-cert.pem"
.Bd -unfilled
\&    0:d=0  hl=4 l= 742 cons: SEQUENCE
\&    4:d=1  hl=4 l= 591 cons:  SEQUENCE
\&    8:d=2  hl=2 l=   3 cons:   cont [ 0 ]
\&   10:d=3  hl=2 l=   1 prim:    INTEGER           :02
\&   13:d=2  hl=2 l=   1 prim:   INTEGER           :00
\&   16:d=2  hl=2 l=  13 cons:   SEQUENCE
\&   18:d=3  hl=2 l=   9 prim:    OBJECT            :md5WithRSAEncryption
\&   29:d=3  hl=2 l=   0 prim:    NULL
\&   31:d=2  hl=2 l=  92 cons:   SEQUENCE
\&   33:d=3  hl=2 l=  11 cons:    SET
\&   35:d=4  hl=2 l=   9 cons:     SEQUENCE
\&   37:d=5  hl=2 l=   3 prim:      OBJECT            :countryName
\&   42:d=5  hl=2 l=   2 prim:      PRINTABLESTRING   :AU
\&  ....
\&  599:d=1  hl=2 l=  13 cons:  SEQUENCE
\&  601:d=2  hl=2 l=   9 prim:   OBJECT            :md5WithRSAEncryption
\&  612:d=2  hl=2 l=   0 prim:   NULL
\&  614:d=1  hl=3 l= 129 prim:  BIT STRING
.Ed
.Pp
The final BIT STRING contains the actual signature.
It can be extracted with:
.Pp
.Dl "$ openssl asn1parse -in pca-cert.pem -out sig -noout -strparse 614"
.Pp
The certificate public key can be extracted with:
.Pp
.Dl $ openssl x509 -in test/testx509.pem -pubkey -noout \*(Gtpubkey.pem
.Pp
The signature can be analysed with:
.Pp
.Li "\ \&$ openssl rsautl -in sig -verify -asn1parse -inkey pubkey.pem -pubin"
.Bd -unfilled
\&    0:d=0  hl=2 l=  32 cons: SEQUENCE
\&    2:d=1  hl=2 l=  12 cons:  SEQUENCE
\&    4:d=2  hl=2 l=   8 prim:   OBJECT            :md5
\&   14:d=2  hl=2 l=   0 prim:   NULL
\&   16:d=1  hl=2 l=  16 prim:  OCTET STRING
\&   0000 - f3 46 9e aa 1a 4a 73 c9-37 ea 93 00 48 25 08 b5  .F...Js.7...H%..
.Ed
.Pp
This is the parsed version of an ASN1
.Em DigestInfo
structure.
It can be seen that the digest used was MD5.
The actual part of the certificate that was signed can be extracted with:
.Pp
.Dl "$ openssl asn1parse -in pca-cert.pem -out tbs -noout -strparse 4"
.Pp
and its digest computed with:
.Pp
.Dl $ openssl md5 -c tbs
.D1 MD5(tbs)= f3:46:9e:aa:1a:4a:73:c9:37:ea:93:00:48:25:08:b5
.Pp
which it can be seen agrees with the recovered value above.
@


1.63
log
@shorten the req text;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.62 2016/08/25 14:37:28 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 25 2016 $
a973 5
The PEM CRL format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN X509 CRL-----
-----END X509 CRL-----
.Ed
d1013 1
a1013 1
Print the CRL in text form.
d1046 1
a1046 1
Specify the CRL input format.
d1056 1
a1056 1
Specify the PKCS#7 structure output format.
a1224 11
.Cm der
uses an ASN1 DER-encoded form compatible with the PKCS#3 DHparameter
structure.
.Cm pem
is the default:
it consists of the DER format base64-encoded with
additional header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DH PARAMETERS-----
-----END DH PARAMETERS-----
.Ed
d1233 1
a1233 1
Print the DH parameters in human readable form.
a1274 12
The PEM private key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DSA PRIVATE KEY-----
-----END DSA PRIVATE KEY-----
.Ed
.Pp
The PEM public key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
.Ed
.Pp
a1297 15
.Cm der
with a private key uses an ASN1 DER-encoded form of an ASN.1
SEQUENCE consisting of the values of version
.Pq currently zero ,
P, Q, G,
and the public and private key components, respectively, as ASN.1 INTEGERs.
When used with a public key it uses a
.Em SubjectPublicKeyInfo
structure: it is an error if the key is not DSA.
.Pp
.Cm pem
is the default format:
it consists of the DER format base64-encoded with additional header and footer
lines.
In the case of a private key, PKCS#8 format is also accepted.
d1319 1
a1319 1
Print the public/private key components and parameters.
a1338 6
PEM format DSA parameters use the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DSA PARAMETERS-----
-----END DSA PARAMETERS-----
.Ed
.Pp
a1356 8
.Cm der
uses an ASN1 DER-encoded form compatible with RFC 2459
.Pq PKIX
DSS-Parms that is a SEQUENCE consisting of p, q and g, respectively.
.Cm pem
is the default format:
it consists of the DER format base64-encoded with additional header
and footer lines.
d1365 1
a1365 1
Print the DSA parameters in human readable form.
a1404 12
The PEM private key format uses the header and footer lines:
.Bd -literal -offset indent
-----BEGIN EC PRIVATE KEY-----
-----END EC PRIVATE KEY-----
.Ed
.Pp
The PEM public key format uses the header and footer lines:
.Bd -literal -offset indent
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
.Ed
.Pp
a1443 11
.Cm der
with a private key uses
an ASN.1 DER-encoded SEC1 private key.
When used with a public key it
uses the SubjectPublicKeyInfo structure as specified in RFC 3280.
.Cm pem
is the default format:
it consists of the DER format base64-encoded
with additional header and footer lines.
In the case of a private key
PKCS#8 format is also accepted.
d1477 1
a1477 1
Print the public/private key components and parameters.
a1505 6
PEM format EC parameters use the header and footer lines:
.Bd -literal -offset indent
-----BEGIN EC PARAMETERS-----
-----END EC PARAMETERS-----
.Ed
.Pp
a1539 7
.Cm der
uses an ASN.1 DER-encoded
form compatible with RFC 3279 EcpkParameters.
.Cm pem
is the default format:
it consists of the DER format base64-encoded with additional
header and footer lines.
d1570 1
a1570 1
Print the EC parameters in human readable form.
d1896 1
a1896 2
Print an unencrypted text representation of private and public keys and
parameters along with the DER or PEM structure.
a2403 12
The PEM PKCS#7 format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN PKCS7-----
-----END PKCS7-----
.Ed
.Pp
For compatibility with some CAs it will also accept:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
.Ed
.Pp
a2410 5
.Cm der
format is a DER-encoded PKCS#7 v1.5 structure.
.Cm pem
(the default)
is a base64-encoded version of the DER form with header and footer lines.
a2483 4
If a PKCS#8 format key is expected on input,
then either a
DER- or PEM-encoded version of a PKCS#8 key will be expected.
Otherwise the DER or PEM format of the traditional format private key is used.
d2796 1
a2796 2
Print out the various public or private key components in plain text
in addition to the encoded version.
d2824 1
a2824 1
Print the parameters in plain text, in addition to the encoded version.
a3123 6
.Cm der
uses an ASN1 DER-encoded form compatible with the PKCS#10.
.Cm pem
is the default format:
it consists of the DER format base64-encoded with additional header and
footer lines.
d3246 1
a3246 1
Print the certificate request in text form.
a3472 12
The header and footer lines in the PEM format are normally:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE REQUEST-----
-----END CERTIFICATE REQUEST-----
.Ed
.Pp
Some software instead needs:
.Bd -unfilled -offset indent
-----BEGIN NEW CERTIFICATE REQUEST-----
-----END NEW CERTIFICATE REQUEST-----
.Ed
.Pp
a3501 3
.\"
.\" RSA
.\"
d3505 1
a3505 5
.Bk -words
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
d3508 1
a3508 1
.Op Fl inform Ar DER | NET | PEM
d3512 1
a3512 1
.Op Fl outform Ar DER | NET | PEM
a3519 1
.Ek
d3525 2
a3526 3
.Pp
.Sy Note :
this command uses the traditional
d3535 2
a3536 5
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
These options encrypt the private key with the AES, DES,
d3547 1
a3547 1
This option checks the consistency of an RSA private key.
d3549 2
a3550 4
This specifies the input
.Ar file
to read a key from, or standard input if this
option is not specified.
d3552 2
a3553 17
.It Fl inform Ar DER | NET | PEM
This specifies the input format.
The
.Ar DER
argument
uses an ASN1 DER-encoded form compatible with the PKCS#1
RSAPrivateKey or SubjectPublicKeyInfo format.
The
.Ar PEM
form is the default format: it consists of the DER format base64-encoded with
additional header and footer lines.
On input PKCS#8 format private keys are also accepted.
The
.Ar NET
form is a format described in the
.Sx RSA NOTES
section.
d3555 1
a3555 1
This option prevents output of the encoded version of the key.
d3557 1
a3557 1
This option prints out the value of the modulus of the key.
d3559 4
a3562 11
This specifies the output
.Ar file
to write a key to, or standard output if this option is not specified.
If any encryption options are set, a pass phrase will be prompted for.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | NET | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
d3568 2
a3569 2
By default, a private key is read from the input file; with this
option a public key is read instead.
d3571 3
a3573 3
By default, a private key is output;
with this option a public key will be output instead.
This option is automatically set if the input is a public key.
d3575 2
a3576 3
Use the modified
.Em NET
algorithm used with some versions of Microsoft IIS and SGC keys.
d3578 1
a3578 2
Prints out the various public or private key components in
plain text, in addition to the encoded version.
a3579 63
.Sh RSA NOTES
The PEM private key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN RSA PRIVATE KEY-----
-----END RSA PRIVATE KEY-----
.Ed
.Pp
The PEM public key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
.Ed
.Pp
The
.Em NET
form is a format compatible with older Netscape servers
and Microsoft IIS .key files; this uses unsalted RC4 for its encryption.
It is not very secure and so should only be used when necessary.
.Pp
Some newer version of IIS have additional data in the exported .key files.
To use these with the
.Nm rsa
utility, view the file with a binary editor
and look for the string
.Qq private-key ,
then trace back to the byte sequence 0x30, 0x82
.Pq this is an ASN1 SEQUENCE .
Copy all the data from this point onwards to another file and use that as
the input to the
.Nm rsa
utility with the
.Fl inform Ar NET
option.
If there is an error after entering the password, try the
.Fl sgckey
option.
.Sh RSA EXAMPLES
To remove the pass phrase on an RSA private key:
.Pp
.Dl $ openssl rsa -in key.pem -out keyout.pem
.Pp
To encrypt a private key using triple DES:
.Pp
.Dl $ openssl rsa -in key.pem -des3 -out keyout.pem
.Pp
To convert a private key from PEM to DER format:
.Pp
.Dl $ openssl rsa -in key.pem -outform DER -out keyout.der
.Pp
To print out the components of a private key to standard output:
.Pp
.Dl $ openssl rsa -in key.pem -text -noout
.Pp
To just output the public part of a private key:
.Pp
.Dl $ openssl rsa -in key.pem -pubout -out pubkey.pem
.Sh RSA BUGS
The command line password arguments don't currently work with
.Em NET
format.
.Pp
There should be an option that automatically handles .key files,
without having to manually edit them.
d7417 1
a7417 1
File formats,
d7422 1
a7422 2
indicate the type of file being read from
or the file format to write.
d7429 2
@


1.62
log
@shorten the pkeyutl text;
help/ok guenther
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.61 2016/08/24 08:17:24 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 24 2016 $
a3091 3
.\"
.\" PRIME
.\"
a3135 3
.\"
.\" RAND
.\"
d3160 2
a3161 3
Write to
.Ar file
instead of standard output.
a3162 3
.\"
.\" REQ
.\"
a3165 1
.Bk -words
d3172 1
a3172 1
.Op Fl inform Ar DER | PEM
d3174 1
a3174 1
.Op Fl keyform Ar DER | PEM
d3186 1
a3186 1
.Op Fl outform Ar DER | PEM
a3199 1
.Ek
d3212 2
a3213 19
By default, the
.Nm req
command outputs certificate requests containing
no attributes in the correct PKCS#10 format.
However certain CAs will only
accept requests containing no attributes in an invalid form: this
option produces this invalid format.
.Pp
More precisely, the
.Em Attributes
in a PKCS#10 certificate request are defined as a SET OF Attribute.
They are
.Em not
optional, so if no attributes are present then they should be encoded as an
empty SET OF.
The invalid form does not include the empty
SET OF, whereas the correct form does.
.Pp
It should be noted that very few CAs still require the use of this option.
d3217 1
a3217 5
This allows an alternative configuration file to be specified;
this overrides the compile time filename or any specified in
the
.Ev OPENSSL_CONF
environment variable.
d3219 3
a3221 1
When the
d3223 1
a3223 3
option is being used, this specifies the number of
days to certify the certificate for.
The default is 30 days.
d3225 5
a3229 7
These options specify alternative sections to include certificate
extensions (if the
.Fl x509
option is present) or certificate request extensions.
This allows several different sections to
be used in the same configuration file to specify requests for
a variety of purposes.
d3231 2
a3232 4
This specifies the input
.Ar file
to read a request from, or standard input
if this option is not specified.
d3238 6
a3243 8
.It Fl inform Ar DER | PEM
This specifies the input format.
The
.Ar DER
argument uses an ASN1 DER-encoded form compatible with the PKCS#10.
The
.Ar PEM
form is the default format:
d3247 1
a3247 1
This specifies the file to read the private key from.
d3249 1
a3249 1
.It Fl keyform Ar DER | PEM
d3253 1
a3253 2
.Ar PEM
is the default.
d3255 3
a3257 5
This gives the
.Ar file
to write the newly created private key to.
If this option is not specified, the filename present in the
configuration file is used.
d3259 1
a3259 1
This specifies the message digest to sign the request with.
d3265 1
a3265 2
This option prints out the value of the modulus of the public key
contained in the request.
d3267 1
a3267 2
These options determine how the subject or issuer names are displayed.
The
d3269 1
a3269 1
argument can be a single option or multiple options separated by commas.
d3275 2
a3276 2
This option generates a new certificate request.
It will prompt the user for the relevant field values.
d3285 1
a3285 1
Adds the word NEW to the PEM file header and footer lines
d3287 1
a3287 3
Some software
.Pq Netscape certificate server
and some CAs need this.
d3289 1
a3289 1
This option creates a new certificate request and a new private key.
d3291 3
a3293 4
.Ar rsa : Ns Ar nbits ,
where
.Ar nbits
is the number of bits, generates an RSA key
d3298 13
a3310 8
is omitted, i.e.\&
.Cm -newkey rsa
specified,
the default key size, specified in the configuration file, is used.
.Pp
All other algorithms support the
.Ar alg : Ns Ar file
form,
d3315 3
a3317 16
.Pp
.Ar param : Ns Ar file
generates a key using the parameter file or certificate
.Ar file ;
the algorithm is determined by the parameters.
.Ar algname : Ns Ar file
use algorithm
.Ar algname
and parameter file
.Ar file :
the two algorithms must match or an error occurs.
.Ar algname
just uses algorithm
.Ar algname ,
and parameters, if necessary,
should be specified via the
a3319 4
.Pp
.Ar dsa : Ns Ar file
generates a DSA key using the parameters in the file
.Ar file .
d3321 1
a3321 1
Reverses the effect of
d3324 1
a3324 2
If this option is specified and a private key is created, it
will not be encrypted.
d3326 1
a3326 1
This option prevents output of the encoded version of the request.
d3328 4
a3331 7
This specifies the output
.Ar file
to write to, or standard output by default.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
d3337 1
a3337 1
Outputs the public key.
d3344 1
a3344 2
.Pp
See the discussion of the
d3346 1
a3346 1
option in the
d3355 4
a3358 4
Replaces subject field of input request with specified data and outputs
modified request.
The arg must be formatted as
.Em /type0=value0/type1=value1/type2=... ;
d3361 1
a3361 1
.Pq backslash ;
d3364 1
a3364 1
Prints out the request subject (or certificate subject if
d3366 1
a3366 1
is specified.
d3368 1
a3368 1
Prints out the certificate request in text form.
d3370 1
a3370 4
This option causes field values to be interpreted as UTF8 strings;
by default they are interpreted as ASCII.
This means that the field values, whether prompted from a terminal or
obtained from a configuration file, must be valid UTF8 strings.
d3374 1
a3374 1
Verifies the signature on the request.
d3376 3
a3378 6
This option outputs a self-signed certificate instead of a certificate
request.
This is typically used to generate a test certificate or
a self-signed root CA.
The extensions added to the certificate
.Pq if any
d3382 1
a3382 1
option, 0 will be used for the serial number.
d3384 1
a3384 1
.Sh REQ CONFIGURATION FILE FORMAT
d3386 1
a3386 1
.Em req
d3389 1
a3389 5
section (i.e.\&
.Em req )
then the initial unnamed or
.Em default
section is searched too.
d3391 1
a3391 1
The options available are described in detail below.
d3393 2
a3394 2
.It Ar attributes
This specifies the section containing any request attributes: its format
d3396 4
a3399 8
.Ar distinguished_name .
Typically these may contain the
.Em challengePassword
or
.Em unstructuredName
types.
They are currently ignored by
.Nm OpenSSL Ns Li 's
d3401 3
a3403 3
.It Ar default_bits
This specifies the default key size in bits.
If not specified, 2048 is used.
d3406 1
a3406 2
option is used.
It can be overridden by using the
d3409 4
a3412 4
.It Ar default_keyfile
This is the default file to write a private key to.
If not specified, the key is written to standard output.
This can be overridden by the
d3415 2
a3416 2
.It Ar default_md
This option specifies the digest algorithm to use.
d3418 2
a3419 2
.Ar md5 ,
.Ar sha1
d3421 5
a3425 5
.Ar sha256 .
If not present, SHA256 is used.
This option can be overridden on the command line.
.It Ar distinguished_name
This specifies the section containing the distinguished name fields to
d3427 6
a3432 8
The format is described in the next section.
.It Ar encrypt_key
If this is set to
.Em no
and a private key is generated, it is
.Em not
encrypted.
This is equivalent to the
d3434 1
a3434 1
command line option.
d3436 1
a3436 1
.Ar encrypt_rsa_key
d3438 3
a3440 5
.It Ar input_password | output_password
The passwords for the input private key file
.Pq if present
and the output private key file
.Pq if one will be created .
d3446 2
a3447 2
.It Ar oid_file
This specifies a file containing additional OBJECT IDENTIFIERS.
d3451 2
a3452 2
.It Ar oid_section
This specifies a section in the configuration file containing extra
d3459 4
a3462 4
.It Ar prompt
If set to the value
.Em no ,
this disables prompting of certificate fields
d3465 1
a3465 1
.Em distinguished_name
d3467 1
a3467 1
.Em attributes
d3469 2
a3470 2
.It Ar req_extensions
This specifies the configuration file section containing a list of
d3474 3
a3476 4
command line switch.
.It Ar string_mask
This option limits the string types for encoding certain
fields.
d3479 2
a3480 2
.It Ar utf8only
.Em UTF8String.
d3482 10
a3491 15
.It Ar default
.Em PrintableString , IA5String , T61String , BMPString , UTF8String .
.It Ar pkix
.Em PrintableString , IA5String , BMPString , UTF8String .
This was inspired by the PKIX recommendation in RFC 2459 for certificates
generated before 2004, but differs by also permitting
.Em IA5String .
.It Ar nombstr
.Em PrintableString , IA5String , T61String , UniversalString .
This was a workaround for some ancient software that had problems
with the variable-sized
.Em BMPString
and
.Em UTF8String
types.
d3493 1
a3493 1
This is an explicit bitmask of permitted types, where
d3500 6
a3505 9
.It Ar utf8
If set to the value
.Em yes ,
then field values are interpreted as UTF8 strings;
by default they are interpreted as ASCII.
This means that the field values, whether prompted from a terminal or
obtained from a configuration file, must be valid UTF8 strings.
.It Ar x509_extensions
This specifies the configuration file section containing a list of
d3511 1
a3511 1
command line switch.
d3513 1
a3513 1
.Sh REQ DISTINGUISHED NAME AND ATTRIBUTE SECTION FORMAT
d3519 4
a3522 12
.Em no ,
then these sections just consist of field names and values: for example,
.Bd -unfilled -offset indent
CN=My Name
OU=My Organization
emailAddress=someone@@somewhere.org
.Ed
.Pp
This allows external programs
.Pq e.g. GUI based
to generate a template file with all the field names and values
and just pass it to
a3523 3
An example of this kind of configuration file is contained in the
.Sx REQ EXAMPLES
section.
d3528 1
a3528 1
.Em no ,
d3540 2
a3541 2
.Em commonName
.Pq or CN .
d3553 1
a3553 4
.Em fieldName_min
and
.Em fieldName_max
limits:
d3556 1
a3556 1
.Em countryName
d3558 1
a3558 1
.Em PrintableString ) .
d3561 1
a3561 1
.Em organizationName )
d3566 1
a3566 1
.Em fieldName
d3569 1
a3569 1
.Em organizationName
d3576 1
a3576 1
.Nm OpenSSL
d3578 2
a3579 2
.Em commonName , countryName , localityName , organizationName ,
.Em organizationUnitName , stateOrProvinceName .
d3581 1
a3581 1
.Em emailAddress
d3583 1
a3583 1
.Em name , surname , givenName initials
d3585 1
a3585 1
.Em dnQualifier .
d3588 1
a3588 1
.Ar oid_file
d3590 1
a3590 1
.Ar oid_section
d3593 1
a3593 74
.Em DirectoryString .
.Sh REQ EXAMPLES
Examine and verify a certificate request:
.Pp
.Dl $ openssl req -in req.pem -text -verify -noout
.Pp
Create a private key and then generate a certificate request from it:
.Bd -literal -offset indent
$ openssl genrsa -out key.pem 2048
$ openssl req -new -key key.pem -out req.pem
.Ed
.Pp
The same but just using req:
.Pp
.Dl $ openssl req -newkey rsa:2048 -keyout key.pem -out req.pem
.Pp
Generate a self-signed root certificate:
.Pp
.Dl "$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out req.pem"
.Pp
Example of a file pointed to by the
.Ar oid_file
option:
.Bd -unfilled -offset indent
1.2.3.4        shortName       A longer Name
1.2.3.6        otherName       Other longer Name
.Ed
.Pp
Example of a section pointed to by
.Ar oid_section
making use of variable expansion:
.Bd -unfilled -offset indent
testoid1=1.2.3.5
testoid2=${testoid1}.6
.Ed
.Pp
Sample configuration file prompting for field values:
.Bd -literal
\& [ req ]
\& default_bits           = 1024
\& default_keyfile        = privkey.pem
\& distinguished_name     = req_distinguished_name
\& attributes             = req_attributes
\& x509_extensions        = v3_ca

\& dirstring_type = nobmp

\& [ req_distinguished_name ]
\& countryName                    = Country Name (2 letter code)
\& countryName_default            = AU
\& countryName_min                = 2
\& countryName_max                = 2

\& localityName                   = Locality Name (eg, city)

\& organizationalUnitName         = Organizational Unit Name (eg, section)

\& commonName                     = Common Name (eg, YOUR name)
\& commonName_max                 = 64

\& emailAddress                   = Email Address
\& emailAddress_max               = 40

\& [ req_attributes ]
\& challengePassword              = A challenge password
\& challengePassword_min          = 4
\& challengePassword_max          = 20

\& [ v3_ca ]

\& subjectKeyIdentifier=hash
\& authorityKeyIdentifier=keyid:always,issuer:always
\& basicConstraints = CA:true
.Ed
a3594 24
Sample configuration containing all field values:
.Bd -literal

\& [ req ]
\& default_bits           = 1024
\& default_keyfile        = keyfile.pem
\& distinguished_name     = req_distinguished_name
\& attributes             = req_attributes
\& prompt                 = no
\& output_password        = mypass

\& [ req_distinguished_name ]
\& C                      = GB
\& ST                     = Test State or Province
\& L                      = Test Locality
\& O                      = Organization Name
\& OU                     = Organizational Unit Name
\& CN                     = Common Name
\& emailAddress           = test@@email.address

\& [ req_attributes ]
\& challengePassword              = A challenge password
.Ed
.Sh REQ NOTES
d3601 1
a3601 3
Some software
.Pq some versions of Netscape certificate server
instead needs:
a3606 14
which is produced with the
.Fl newhdr
option but is otherwise compatible.
Either form is accepted transparently on input.
.Pp
The certificate requests generated by Xenroll with MSIE have extensions added.
It includes the
.Em keyUsage
extension which determines the type of key
.Pq signature only or general purpose
and any additional OIDs entered by the script in an
.Em extendedKeyUsage
extension.
.Sh REQ DIAGNOSTICS
d3611 1
a3611 4
.Ed
.Pp
This is followed some time later by...
.Bd -unfilled -offset indent
d3616 1
a3616 7
The first error message is the clue: it can't find the configuration
file!
Certain operations
.Pq like examining a certificate request
don't need a configuration file so its use isn't enforced.
Generation of certificates or requests, however, do need a configuration file.
This could be regarded as a bug.
d3618 1
a3618 1
Another puzzling message is this:
d3626 2
a3627 2
.Pq the DER encoding of which is 0xa0 0x00 .
If you just see:
d3632 2
a3633 2
.Pq but it is tolerated .
See the description of the command line option
a3635 35
.Sh REQ ENVIRONMENT VARIABLES
The variable
.Ev OPENSSL_CONF ,
if defined, allows an alternative configuration
file location to be specified; it will be overridden by the
.Fl config
command line switch if it is present.
.Sh REQ BUGS
.Nm OpenSSL Ns Li 's
handling of T61Strings
.Pq aka TeletexStrings
is broken: it effectively treats them as ISO 8859-1
.Pq Latin 1 ;
Netscape and MSIE have similar behaviour.
This can cause problems if you need characters that aren't available in
.Em PrintableStrings
and you don't want to or can't use
.Em BMPStrings .
.Pp
As a consequence of the T61String handling, the only correct way to represent
accented characters in
.Nm OpenSSL
is to use a
.Em BMPString :
unfortunately Netscape currently chokes on these.
If you have to use accented characters with Netscape
and MSIE then you currently need to use the invalid T61String form.
.Pp
The current prompting is not very friendly.
It doesn't allow you to confirm what you've just entered.
Other things, like extensions in certificate requests, are
statically defined in the configuration file.
Some of these, like an email address in
.Em subjectAltName ,
should be input by the user.
@


1.61
log
@shorten the pkeyparam text;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.60 2016/08/24 08:07:33 jmc Exp $
a2941 3
.\"
.\" PKEYUTL
.\"
a2944 1
.Bk -words
d2953 1
a2953 1
.Op Fl keyform Ar DER | PEM
d2956 1
a2956 1
.Op Fl peerform Ar DER | PEM
a2964 1
.Ek
d2990 2
a2991 2
Specify the input filename to read data from,
or standard input if this option is not specified.
d2995 2
a2996 2
.It Fl keyform Ar DER | PEM
The key format DER or PEM.
d2998 2
a2999 2
Specify the output filename to write to,
or standard output by default.
d3002 2
a3003 2
.It Fl peerform Ar DER | PEM
The peer key format DER or PEM.
d3007 7
a3013 28
Public key options.
.It Fl pubin
The input file is a public key.
.It Fl rev
Reverse the order of the input buffer.
This is useful for some libraries (such as CryptoAPI)
which represent the buffer in little endian format.
.It Fl sigfile Ar file
Signature file (verify operation only).
.It Fl sign
Sign the input data and output the signed result.
This requires a private key.
.It Fl verify
Verify the input data against the signature file and indicate if the
verification succeeded or failed.
.It Fl verifyrecover
Verify the input data and output the recovered data.
.El
.Sh PKEYUTL NOTES
The operations and options supported vary according to the key algorithm
and its implementation.
The
.Nm OpenSSL
operations and options are indicated below.
.Pp
Unless otherwise mentioned all algorithms support the
.Ar digest : Ns Ar alg
option which specifies the digest in use
d3018 3
a3020 4
.Fn EVP_get_digestbyname
function, for example
.Cm sha1 .
.Ss RSA algorithm
a3047 1
.Pp
a3048 1
.Pp
a3051 1
.Pp
d3063 1
a3063 1
.Ss DSA algorithm
d3068 1
a3068 1
.Ss DH algorithm
d3071 1
a3071 1
.Ss EC algorithm
d3077 15
a3091 28
.Sh PKEYUTL EXAMPLES
Sign some data using a private key:
.Bd -literal -offset indent
$ openssl pkeyutl -sign -in file -inkey key.pem -out sig
.Ed
.Pp
Recover the signed data (e.g. if an RSA key is used):
.Bd -literal -offset indent
$ openssl pkeyutl -verifyrecover -in sig -inkey key.pem
.Ed
.Pp
Verify the signature (e.g. a DSA key):
.Bd -literal -offset indent
$ openssl pkeyutl -verify -in file -sigfile sig \e
	-inkey key.pem
.Ed
.Pp
Sign data using a message digest value (this is currently only valid for RSA):
.Bd -literal -offset indent
$ openssl pkeyutl -sign -in file -inkey key.pem \e
	-out sig -pkeyopt digest:sha256
.Ed
.Pp
Derive a shared secret value:
.Bd -literal -offset indent
$ openssl pkeyutl -derive -inkey key.pem \e
	-peerkey pubkey.pem -out secret
.Ed
@


1.60
log
@shorten the pkey text;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.59 2016/08/23 18:54:04 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 23 2016 $
a2916 3
.\"
.\" PKEYPARAM
.\"
d2925 1
a2925 1
.Nm pkey
d2927 1
a2927 1
They can be converted between various forms and their components printed out.
d2932 2
a2933 2
This specifies the input filename to read parameters from,
or standard input if this option is not specified.
d2937 2
a2938 2
This specifies the output filename to write parameters to,
or standard output if this option is not specified.
d2940 1
a2940 1
Prints out the parameters in plain text in addition to the encoded version.
a2941 12
.Sh PKEYPARAM EXAMPLES
Print out text version of parameters:
.Bd -literal -offset indent
$ openssl pkeyparam -in param.pem -text
.Ed
.Sh PKEYPARAM NOTES
There are no
.Fl inform
or
.Fl outform
options for this command because only PEM format is supported
because the key type is determined by the PEM headers.
@


1.59
log
@shorten pkcs12;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.58 2016/08/22 13:39:52 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 22 2016 $
d1357 1
a1357 2
By default, a private key is read from the input file.
With this option a public key is read instead.
d1359 2
a1360 3
By default, a private key is output.
With this option a public key will be output instead.
This option is automatically set if the input is a public key.
d1552 1
a1552 2
By default a private key is read from the input file;
with this option a public key is read instead.
d1554 2
a1555 3
By default a private key is output;
with this option a public key is output instead.
This option is automatically set if the input is a public key.
a2854 3
.\"
.\" PKEY
.\"
a2857 1
.Bk -words
d2860 1
a2860 1
.Op Fl inform Ar DER | PEM
d2863 1
a2863 1
.Op Fl outform Ar DER | PEM
a2869 1
.Ek
d2881 1
a2881 1
These options encrypt the private key with the supplied cipher.
d2883 1
a2883 1
.Fn EVP_get_cipherbyname
d2887 2
a2888 2
This specifies the input filename to read a key from,
or standard input if this option is not specified.
d2890 2
a2891 2
.It Fl inform Ar DER | PEM
This specifies the input format, DER or PEM.
d2895 2
a2896 2
This specifies the output filename to write a key to,
or standard output if this option is not specified.
d2899 2
a2900 8
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format;
the options have the same meaning as the
.Fl inform
option.
d2906 1
a2906 2
By default a private key is read from the input file:
with this option a public key is read instead.
d2908 2
a2909 4
By default a private key is output:
with this option a public key will be output instead.
This option is automatically set if
the input is a public key.
d2911 2
a2912 2
Print out the various public or private key components in
plain text in addition to the encoded version.
a2916 30
.Sh PKEY EXAMPLES
To remove the pass phrase on an RSA private key:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -out keyout.pem
.Ed
.Pp
To encrypt a private key using triple DES:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -des3 -out keyout.pem
.Ed
.Pp
To convert a private key from PEM to DER format:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -outform DER -out keyout.der
.Ed
.Pp
To print the components of a private key to standard output:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -text -noout
.Ed
.Pp
To print the public components of a private key to standard output:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -text_pub -noout
.Ed
.Pp
To just output the public part of a private key:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -pubout -out pubkey.pem
.Ed
@


1.58
log
@shorten the pkcs8 text;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.57 2016/08/20 12:54:49 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 20 2016 $
a2659 3
.\"
.\" PKCS12
.\"
d2663 1
a2663 5
.Bk -words
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
a2695 1
.Ek
a2702 5
PKCS#12 files are used by several programs including Netscape, MSIE
and MS Outlook.
.Pp
There are a lot of options; the meaning of some depends on whether a
PKCS#12 file is being created or parsed.
d2706 3
a2708 3
option
.Pq see below .
.Sh PKCS12 PARSING OPTIONS
d2710 3
a2712 6
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
Use AES, DES, or triple DES, respectively,
to encrypt private keys before outputting.
d2721 2
a2722 4
This specifies the
.Ar file
of the PKCS#12 file to be parsed.
Standard input is used by default.
d2727 1
a2727 1
No certificates at all will be output.
d2729 1
a2729 1
Don't encrypt the private keys at all.
d2731 1
a2731 1
No private keys will be output.
d2733 1
a2733 1
Don't attempt to verify the integrity MAC before reading the file.
d2735 1
a2735 1
This option inhibits output of the keys and certificates to the output file
d2738 2
a2739 4
The
.Ar file
to write certificates and private keys to, standard output by default.
They are all written in PEM format.
d2749 2
a2750 1
.Sh PKCS12 FILE CREATION OPTIONS
d2756 1
a2756 1
This directory must be a standard certificate directory:
d2758 1
a2758 1
.Cm x509 -hash )
d2761 1
a2761 1
This specifies the
d2764 1
a2764 1
This option may be used multiple times to specify names for all certificates
a2765 2
Netscape ignores friendly names on other certificates,
whereas MSIE displays them.
d2769 1
a2769 1
These options allow the algorithm used to encrypt the private key and
d2771 1
a2771 3
Any PKCS#5 v1.5 or PKCS#12 PBE algorithm name can be used (see the
.Sx PKCS12 NOTES
section for more information).
d2779 1
a2779 2
If this option is present, an attempt is made to include the entire
certificate chain of the user certificate.
d2794 1
a2794 2
This option specifies that a PKCS#12 file will be created rather than
parsed.
d2796 3
a2798 4
The
.Ar file
to read certificates and private keys from, standard input by default.
They must all be in PEM format.
d2804 1
a2804 1
File to read private key from.
d2807 1
a2807 2
Specifies that the private key is to be used for key exchange or just signing.
This option is only interpreted by MSIE and similar MS software.
d2817 1
a2817 3
and SSL client authentication;
however, due to a bug only MSIE 5.0 and later support
the use of signing only keys for SSL client authentication.
d2820 1
a2820 1
If not included then SHA1 is used.
d2822 3
a2824 2
This option is included for compatibility with previous versions; it used
to be needed to use MAC iterations counts but they are now used by default.
d2826 1
a2826 1
This specifies the
d2833 1
a2833 1
These options affect the iteration counts on the MAC and key algorithms.
d2852 2
a2853 4
This specifies
.Ar file
to write the PKCS#12 file to.
Standard output is used by default.
a2858 115
.Sh PKCS12 NOTES
Although there are a large number of options,
most of them are very rarely used.
For PKCS#12 file parsing, only
.Fl in
and
.Fl out
need to be used for PKCS#12 file creation.
.Fl export
and
.Fl name
are also used.
.Pp
If none of the
.Fl clcerts , cacerts ,
or
.Fl nocerts
options are present, then all certificates will be output in the order
they appear in the input PKCS#12 files.
There is no guarantee that the first certificate present is
the one corresponding to the private key.
Certain software which requires a private key and certificate and assumes
the first certificate in the file is the one corresponding to the private key:
this may not always be the case.
Using the
.Fl clcerts
option will solve this problem by only outputting the certificate
corresponding to the private key.
If the CA certificates are required, they can be output to a separate
file using the
.Fl nokeys
and
.Fl cacerts
options to just output CA certificates.
.Pp
The
.Fl keypbe
and
.Fl certpbe
algorithms allow the precise encryption algorithms for private keys
and certificates to be specified.
Normally, the defaults are fine but occasionally software can't handle
triple DES encrypted private keys;
then the option
.Fl keypbe Ar PBE-SHA1-RC2-40
can be used to reduce the private key encryption to 40-bit RC2.
A complete description of all algorithms is contained in the
.Sx PKCS8
section above.
.Sh PKCS12 EXAMPLES
Parse a PKCS#12 file and output it to a file:
.Pp
.Dl $ openssl pkcs12 -in file.p12 -out file.pem
.Pp
Output only client certificates to a file:
.Pp
.Dl $ openssl pkcs12 -in file.p12 -clcerts -out file.pem
.Pp
Don't encrypt the private key:
.Pp
.Dl $ openssl pkcs12 -in file.p12 -out file.pem -nodes
.Pp
Print some info about a PKCS#12 file:
.Pp
.Dl $ openssl pkcs12 -in file.p12 -info -noout
.Pp
Create a PKCS#12 file:
.Bd -literal -offset indent
$ openssl pkcs12 -export -in file.pem -out file.p12 \e
	-name "My Certificate"
.Ed
.Pp
Include some extra certificates:
.Bd -literal -offset indent
$ openssl pkcs12 -export -in file.pem -out file.p12 \e
	-name "My Certificate" -certfile othercerts.pem
.Ed
.Sh PKCS12 BUGS
Some would argue that the PKCS#12 standard is one big bug :\-)
.Pp
Versions of
.Nm OpenSSL
before 0.9.6a had a bug in the PKCS#12 key generation routines.
Under rare circumstances this could produce a PKCS#12 file encrypted
with an invalid key.
As a result some PKCS#12 files which triggered this bug
from other implementations
.Pq MSIE or Netscape
could not be decrypted by
.Nm OpenSSL
and similarly
.Nm OpenSSL
could produce PKCS#12 files which could not be decrypted by other
implementations.
The chances of producing such a file are relatively small: less than 1 in 256.
.Pp
A side effect of fixing this bug is that any old invalidly encrypted PKCS#12
files can no longer be parsed by the fixed version.
Under such circumstances the
.Nm pkcs12
utility will report that the MAC is OK but fail with a decryption
error when extracting private keys.
.Pp
This problem can be resolved by extracting the private keys and certificates
from the PKCS#12 file using an older version of
.Nm OpenSSL
and recreating
the PKCS#12 file from the keys and certificates using a newer version of
.Nm OpenSSL .
For example:
.Bd -literal -offset indent
$ old-openssl -in bad.p12 -out keycerts.pem
$ openssl -in keycerts.pem -export -name "My PKCS#12 file" \e
	-out fixed.p12
.Ed
@


1.57
log
@shorten pkcs7 text;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.56 2016/08/20 07:56:09 jmc Exp $
a2541 3
.\"
.\" PKCS8
.\"
a2544 1
.Bk -words
d2547 1
a2547 1
.Op Fl inform Ar DER | PEM
d2553 1
a2553 1
.Op Fl outform Ar DER | PEM
a2558 1
.Ek
d2563 20
a2582 5
command processes private keys in PKCS#8 format.
It can handle both unencrypted PKCS#8 PrivateKeyInfo format
and EncryptedPrivateKeyInfo format with a variety of PKCS#5
.Pq v1.5 and v2.0
and PKCS#12 algorithms.
d2587 2
a2588 4
This option generates DSA keys in a broken format.
The DSA parameters are embedded inside the
.Em PrivateKey
structure.
d2594 2
a2595 3
This specifies the input
.Ar file
to read a key from, or standard input if this option is not specified.
d2597 2
a2598 2
.It Fl inform Ar DER | PEM
This specifies the input format.
d2604 3
a2606 10
PKCS#8 keys generated or input are normally PKCS#8
.Em EncryptedPrivateKeyInfo
structures using an appropriate password-based encryption algorithm.
With this option, an unencrypted
.Em PrivateKeyInfo
structure is expected or output.
This option does not encrypt private keys at all and should only be used
when absolutely necessary.
Certain software such as some versions of Java code signing software use
unencrypted private keys.
d2613 1
a2613 2
This option generates RSA private keys in a broken format that some software
uses.
d2618 1
a2618 1
This option generates DSA keys in a broken format compatible with Netscape
d2620 2
a2621 3
The
.Em PrivateKey
contains a SEQUENCE consisting of the public and private keys, respectively.
d2623 2
a2624 3
This specifies the output
.Ar file
to write a key to, or standard output by default.
d2626 2
a2627 7
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
d2633 1
a2633 6
Normally, a PKCS#8 private key is expected on input and a traditional format
private key will be written.
With the
.Fl topk8
option the situation is reversed:
it reads a traditional format private key and writes a PKCS#8 format key.
d2635 12
a2646 2
This option specifies a PKCS#5 v1.5 or PKCS#12 algorithm to use.
A complete list of possible algorithms is included below.
d2648 6
a2653 14
This option enables the use of PKCS#5 v2.0 algorithms.
Normally, PKCS#8 private keys are encrypted with the password-based
encryption algorithm called
.Em pbeWithMD5AndDES-CBC ;
this uses 56-bit DES encryption but it was the strongest encryption
algorithm supported in PKCS#5 v1.5.
Using the
.Fl v2
option PKCS#5 v2.0 algorithms are used which can use any
encryption algorithm such as 168-bit triple DES or 128-bit RC2, however
not many implementations support PKCS#5 v2.0 yet.
If using private keys with
.Nm OpenSSL
then this doesn't matter.
a2654 1
The
d2656 3
a2658 7
argument is the encryption algorithm to use; valid values include
.Ar des , des3 ,
and
.Ar rc2 .
It is recommended that
.Ar des3
is used.
a2659 100
.Sh PKCS8 NOTES
The encrypted form of a PEM-encoded PKCS#8 file uses the following
headers and footers:
.Bd -unfilled -offset indent
-----BEGIN ENCRYPTED PRIVATE KEY-----
-----END ENCRYPTED PRIVATE KEY-----
.Ed
.Pp
The unencrypted form uses:
.Bd -unfilled -offset indent
-----BEGIN PRIVATE KEY-----
-----END PRIVATE KEY-----
.Ed
.Pp
Private keys encrypted using PKCS#5 v2.0 algorithms and high iteration
counts are more secure than those encrypted using the traditional
.Nm SSLeay
compatible formats.
So if additional security is considered important, the keys should be converted.
.Pp
The default encryption is only 56 bits because this is the encryption
that most current implementations of PKCS#8 support.
.Pp
Some software may use PKCS#12 password-based encryption algorithms
with PKCS#8 format private keys: these are handled automatically
but there is no option to produce them.
.Pp
It is possible to write out
DER-encoded encrypted private keys in PKCS#8 format because the encryption
details are included at an ASN1
level whereas the traditional format includes them at a PEM level.
.Sh PKCS#5 V1.5 AND PKCS#12 ALGORITHMS
Various algorithms can be used with the
.Fl v1
command line option, including PKCS#5 v1.5 and PKCS#12.
These are described in more detail below.
.Pp
.Bl -tag -width "XXXX" -compact
.It Ar PBE-MD5-DES
These algorithms were included in the original PKCS#5 v1.5 specification.
They only offer 56 bits of protection since they both use DES.
.Pp
.It Ar PBE-SHA1-RC2-64 | PBE-MD5-RC2-64 | PBE-SHA1-DES
These algorithms are not mentioned in the original PKCS#5 v1.5 specification
but they use the same key derivation algorithm and are supported by some
software.
They are mentioned in PKCS#5 v2.0.
They use either 64-bit RC2 or 56-bit DES.
.Pp
.It Ar PBE-SHA1-RC4-128 | PBE-SHA1-RC4-40 | PBE-SHA1-3DES | PBE-SHA1-2DES
.It Ar PBE-SHA1-RC2-128 | PBE-SHA1-RC2-40
These algorithms use the PKCS#12 password-based encryption algorithm and
allow strong encryption algorithms like triple DES or 128-bit RC2 to be used.
.El
.Sh PKCS8 EXAMPLES
Convert a private key from traditional to PKCS#5 v2.0 format using triple DES:
.Pp
.Dl "$ openssl pkcs8 -in key.pem -topk8 -v2 des3 -out enckey.pem"
.Pp
Convert a private key to PKCS#8 using a PKCS#5 1.5 compatible algorithm
.Pq DES :
.Pp
.Dl $ openssl pkcs8 -in key.pem -topk8 -out enckey.pem
.Pp
Convert a private key to PKCS#8 using a PKCS#12 compatible algorithm
.Pq 3DES :
.Bd -literal -offset indent
$ openssl pkcs8 -in key.pem -topk8 -out enckey.pem \e
	-v1 PBE-SHA1-3DES
.Ed
.Pp
Read a DER-unencrypted PKCS#8 format private key:
.Pp
.Dl "$ openssl pkcs8 -inform DER -nocrypt -in key.der -out key.pem"
.Pp
Convert a private key from any PKCS#8 format to traditional format:
.Pp
.Dl $ openssl pkcs8 -in pk8.pem -out key.pem
.Sh PKCS8 STANDARDS
Test vectors from this PKCS#5 v2.0 implementation were posted to the
pkcs-tng mailing list using triple DES, DES and RC2 with high iteration counts;
several people confirmed that they could decrypt the private
keys produced and therefore it can be assumed that the PKCS#5 v2.0
implementation is reasonably accurate at least as far as these
algorithms are concerned.
.Pp
The format of PKCS#8 DSA
.Pq and other
private keys is not well documented:
it is hidden away in PKCS#11 v2.01, section 11.9;
.Nm OpenSSL Ns Li 's
default DSA PKCS#8 private key format complies with this standard.
.Sh PKCS8 BUGS
There should be an option that prints out the encryption algorithm
in use and other details such as the iteration count.
.Pp
PKCS#8 using triple DES and PKCS#5 v2.0 should be the default private
key format; for
.Nm OpenSSL
compatibility, several of the utilities use the old format at present.
@


1.56
log
@shorten the passwd text; ok jsing
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.55 2016/08/19 08:46:38 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 19 2016 $
d1732 1
a1732 1
or standard input if none is specified.
d1804 1
a1804 1
or standard output if none is specified.
d1888 1
a1888 1
or standard output if none is specified.
d1942 1
a1942 1
or standard output if none is specified.
d2035 1
a2035 1
or standard output if none is specified.
d2226 1
a2226 1
or standard output if none is specified.
a2483 3
.\"
.\" PKCS7
.\"
a2486 1
.Bk -words
d2488 1
a2488 1
.Op Fl inform Ar DER | PEM
d2491 1
a2491 1
.Op Fl outform Ar DER | PEM
a2493 1
.Ek
d2499 14
d2517 5
a2521 6
This specifies the input
.Ar file
to read from, or standard input if this option is not specified.
.It Fl inform Ar DER | PEM
This specifies the input format.
.Ar DER
d2523 2
a2524 2
.Ar PEM
.Pq the default
d2532 4
a2535 7
Specifies the output
.Ar file
to write to, or standard output by default.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
d2537 2
a2538 2
Prints out any certificates or CRLs contained in the file.
They are preceded by their subject and issuer names in a one-line format.
d2540 1
a2540 2
Prints out certificate details in full rather than just subject and
issuer names.
a2541 25
.Sh PKCS7 EXAMPLES
Convert a PKCS#7 file from PEM to DER:
.Pp
.Dl $ openssl pkcs7 -in file.pem -outform DER -out file.der
.Pp
Output all certificates in a file:
.Pp
.Dl $ openssl pkcs7 -in file.pem -print_certs -out certs.pem
.Sh PKCS7 NOTES
The PEM PKCS#7 format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN PKCS7-----
-----END PKCS7-----
.Ed
.Pp
For compatibility with some CAs it will also accept:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
.Ed
.Sh PKCS7 RESTRICTIONS
There is no option to print out all the fields of a PKCS#7 file.
.Pp
The PKCS#7 routines only understand PKCS#7 v 1.5 as specified in RFC 2315.
They cannot currently parse, for example, the new CMS as described in RFC 2630.
@


1.55
log
@shorten the ocsp text; ok beck
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.54 2016/08/18 12:07:21 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 18 2016 $
a2422 3
.\"
.\" PASSWD
.\"
d2439 1
a2439 20
command computes the hash of a password typed at run-time
or the hash of each password in a list.
The password list is taken from the named
.Ar file
for option
.Fl in ,
from stdin for option
.Fl stdin ,
or from the command line, or from the terminal otherwise.
The
.Ux
standard algorithm
.Em crypt
and the MD5-based
.Bx
password algorithm
.Em 1
and its Apache variant
.Em apr1
are available.
d2447 1
a2447 1
.Em 1 .
d2450 1
a2450 1
.Em apr1
d2452 2
a2453 1
.Pq Apache variant of the
d2455 2
a2456 1
algorithm.
d2459 2
a2460 3
.Em crypt
algorithm
.Pq default .
d2474 2
a2475 2
Use the specified
.Ar salt .
d2479 1
a2479 2
Read passwords from
.Em stdin .
a2483 12
.Sh PASSWD EXAMPLES
.Dl $ openssl passwd -crypt -salt xx password
prints
.Qq xxj31ZMTZzkVA .
.Pp
.Dl $ openssl passwd -1 -salt xxxxxxxx password
prints
.Qq $1$xxxxxxxx$UYCIxa628.9qXjpQCjM4a. .
.Pp
.Dl $ openssl passwd -apr1 -salt xxxxxxxx password
prints
.Qq $apr1$xxxxxxxx$dxHfLAsjHkDRmG83UXe8K0 .
@


1.54
log
@shorten the nseq text;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.53 2016/08/16 06:40:24 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 16 2016 $
a2078 3
.\"
.\" OCSP
.\"
a2081 1
.Bk -words
d2087 1
a2087 4
.Oo
.Fl host
.Ar hostname : Ns Ar port
.Oc
a2126 1
.Ek
d2129 3
a2131 6
The Online Certificate Status Protocol
.Pq OCSP
enables applications to determine the
.Pq revocation
state of an identified certificate
.Pq RFC 2560 .
d2143 2
a2144 5
.Ar file
or
.Ar path
containing trusted CA certificates.
These are used to verify the signature on the OCSP response.
d2153 3
a2155 2
Sets the digest algorithm to use for certificate identification
in the OCSP request.
d2161 2
a2162 3
If the
.Fl host
option is present, then the OCSP request is sent to the host
d2164 1
a2164 1
on port
d2168 1
a2168 1
.Sq /
d2171 4
a2174 8
This specifies the current issuer certificate.
This option can be used multiple times.
The certificate specified in
.Ar file
must be in PEM format.
This option
.Em must
come before any
d2187 1
a2187 1
Don't include any certificates in signed request.
d2194 1
a2194 1
With this option, the signer's certificate must be specified with either the
d2204 2
a2205 5
Add an OCSP
.Em nonce
extension to a request or disable an OCSP
.Em nonce
addition.
d2208 1
a2208 3
option no
.Em nonce
is added:
d2211 1
a2211 2
option will force addition of a
.Em nonce .
d2217 1
a2217 3
a
.Em nonce
is automatically added; specifying
d2221 2
a2222 4
Don't attempt to verify the OCSP response signature or the
.Em nonce
values.
This option will normally only be used for debugging
d2225 2
a2226 3
Specify output
.Ar file ;
default is standard output.
d2250 2
a2251 3
Negative integers can also be specified by preceding the value with a
.Sq -
sign.
d2278 1
a2278 2
.Ar file
containing explicitly trusted responder certificates.
d2285 3
a2287 7
These options specify the range of times, in seconds, which will be tolerated
in an OCSP response.
Each certificate status response includes a
.Em notBefore
time and an optional
.Em notAfter
time.
d2295 1
a2295 1
the default value is 5 minutes.
d2297 4
a2300 7
If the
.Em notAfter
time is omitted from a response, then this means that new status
information is immediately available.
In this case the age of the
.Em notBefore
field is checked to see it is not older than
d2305 4
a2308 5
.Ar file
containing additional certificates to search when attempting to locate
the OCSP response signing certificate.
Some responders omit the actual signer's certificate from the response;
this option can be used to supply the necessary certificate in such cases.
d2310 2
a2311 1
.Sh OCSP SERVER OPTIONS
d2318 2
a2319 3
is a text index file in
.Nm ca
format containing certificate revocation information.
d2321 1
a2321 3
If the
.Fl index
option is specified, the
d2323 2
a2324 6
utility is in
.Em responder
mode, otherwise it is in
.Em client
mode.
The request(s) the responder processes can be either specified on
d2331 1
a2331 1
option) or via external OCSP clients (if
d2337 1
a2337 3
If the
.Fl index
option is present, then the
d2347 5
a2351 6
when fresh revocation information is available: used in the
.Ar nextUpdate
field.
If neither option is present, the
.Em nextUpdate
field is omitted, meaning fresh revocation information is immediately available.
d2353 1
a2353 1
The OCSP server will exit after receiving
d2355 1
a2355 1
requests, default unlimited.
d2358 1
a2358 1
The port may also be specified using the
d2363 1
a2363 1
default is to use the subject name.
a2375 2
.Sh OCSP RESPONSE VERIFICATION
OCSP Response follows the rules specified in RFC 2560.
a2378 1
.Pp
d2387 2
a2388 6
.Nm OpenSSL
certificates
directory.
.Pp
If the initial verify fails, the OCSP verify process halts with an
error.
d2390 1
a2403 1
.Pp
d2406 1
a2406 1
.Pq and it is correctly configured ,
d2409 4
a2412 4
If the OCSP responder is a
.Em global responder
which can give details about multiple CAs and has its own separate
certificate chain, then its root CA can be trusted for OCSP signing.
a2422 73
.Sh OCSP NOTES
As noted, most of the verify options are for testing or debugging purposes.
Normally, only the
.Fl CApath , CAfile
and
.Pq if the responder is a `global VA'
.Fl VAfile
options need to be used.
.Pp
The OCSP server is only useful for test and demonstration purposes:
it is not really usable as a full OCSP responder.
It contains only a very simple HTTP request handling and can only handle
the POST form of OCSP queries.
It also handles requests serially, meaning it cannot respond to
new requests until it has processed the current one.
The text index file format of revocation is also inefficient for large
quantities of revocation data.
.Pp
It is possible to run the
.Nm ocsp
application in
.Em responder
mode via a CGI script using the
.Fl respin
and
.Fl respout
options.
.Sh OCSP EXAMPLES
Create an OCSP request and write it to a file:
.Bd -literal -offset indent
$ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \e
	-reqout req.der
.Ed
.Pp
Send a query to an OCSP responder with URL
.Pa http://ocsp.myhost.com/ ,
save the response to a file and print it out in text form:
.Bd -literal -offset indent
$ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \e
	-url http://ocsp.myhost.com/ -resp_text -respout resp.der
.Ed
.Pp
Read in an OCSP response and print out in text form:
.Pp
.Dl $ openssl ocsp -respin resp.der -text
.Pp
OCSP server on port 8888 using a standard
.Nm ca
configuration, and a separate responder certificate.
All requests and responses are printed to a file:
.Bd -literal -offset indent
$ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner \e
	rcert.pem -CA demoCA/cacert.pem -text -out log.txt
.Ed
.Pp
As above, but exit after processing one request:
.Bd -literal -offset indent
$ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner \e
	rcert.pem -CA demoCA/cacert.pem -nrequest 1
.Ed
.Pp
Query status information using internally generated request:
.Bd -literal -offset indent
$ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \e
	demoCA/cacert.pem -issuer demoCA/cacert.pem -serial 1
.Ed
.Pp
Query status information using request read from a file and write
the response to a second file:
.Bd -literal -offset indent
$ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \e
	demoCA/cacert.pem -reqin req.der -respout resp.der
.Ed
@


1.53
log
@shorten genrsa; ok jsing
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.52 2016/08/14 09:02:52 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 14 2016 $
a2042 3
.\"
.\" NSEQ
.\"
d2051 11
a2061 4
command takes a file containing a Netscape certificate
sequence and prints out the certificates contained in it or takes a
file of certificates and converts it into a Netscape certificate
sequence.
d2066 2
a2067 3
This specifies the input
.Ar file
to read, or standard input if this option is not specified.
d2069 2
a2070 3
Specifies the output
.Ar file ,
or standard output by default.
a2078 26
.Sh NSEQ EXAMPLES
Output the certificates in a Netscape certificate sequence:
.Bd -literal -offset indent
$ openssl nseq -in nseq.pem -out certs.pem
.Ed
.Pp
Create a Netscape certificate sequence:
.Bd -literal -offset indent
$ openssl nseq -in certs.pem -toseq -out nseq.pem
.Ed
.Sh NSEQ NOTES
The PEM-encoded form uses the same headers and footers as a certificate:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
.Ed
.Pp
A Netscape certificate sequence is a Netscape specific form that can be sent
to browsers as an alternative to the standard PKCS#7 format when several
certificates are sent to the browser:
for example during certificate enrollment.
It is used by the Netscape certificate server, for example.
.Sh NSEQ BUGS
This program needs a few more options,
like allowing DER or PEM input and output files
and allowing multiple certificate files to be used.
@


1.52
log
@shorten genpkey; ok guenther
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.51 2016/08/13 18:23:39 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 13 2016 $
a1995 3
.\"
.\" GENRSA
.\"
a1998 1
.Bk -words
d2000 1
a2000 4
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
a2003 1
.Ek
d2008 11
a2018 1
command generates an RSA private key.
d2025 2
a2026 5
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
These options encrypt the private key with the AES, DES,
d2034 2
a2035 3
The output
.Ar file .
If this argument is not specified, standard output is used.
a2042 22
.Sh GENRSA NOTES
RSA private key generation essentially involves the generation of two prime
numbers.
When generating a private key, various symbols will be output to
indicate the progress of the generation.
A
.Sq \&.
represents each number which has passed an initial sieve test;
.Sq +
means a number has passed a single round of the Miller-Rabin primality test.
A newline means that the number has passed all the prime tests
.Pq the actual number depends on the key size .
.Pp
Because key generation is a random process,
the time taken to generate a key may vary somewhat.
.Sh GENRSA BUGS
A quirk of the prime generation algorithm is that it cannot generate small
primes.
Therefore the number of bits should not be less that 64.
For typical private keys this will not matter because for security reasons
they will be much larger
.Pq typically 2048 bits .
@


1.51
log
@shorten gendsa;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.50 2016/08/12 06:21:12 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 12 2016 $
a1892 3
.\"
.\" GENPKEY
.\"
a1895 1
.Bk -words
d1900 1
a1900 1
.Op Fl outform Ar DER | PEM
a1904 1
.Ek
d1919 1
a1919 1
If used this option must precede any
d1930 2
a1931 3
.Fn EVP_get_cipherbyname
is acceptable, such as
.Cm des3 .
d1934 1
a1934 1
If used this option must precede any
d1941 4
a1944 4
The output filename.
If this argument is not specified then standard output is used.
.It Fl outform Ar DER | PEM
This specifies the output format, DER or PEM.
d1946 2
a1947 2
Some public key algorithms generate a private key based on a set of parameters.
They can be supplied using this option.
d1950 1
a1950 1
If used this option must precede any
d1964 2
a1965 16
.Ar value .
The precise set of options supported
depends on the public key algorithm used and its implementation.
See
.Sx GENPKEY KEY GENERATION OPTIONS
below for more details.
.It Fl text
Print an (unencrypted) text representation of private and public keys and
parameters along with the DER or PEM structure.
.El
.Sh GENPKEY KEY GENERATION OPTIONS
The options supported by each algorithm
and indeed each implementation of an algorithm can vary.
The options for the
.Nm OpenSSL
implementations are detailed below.
d1970 1
a1970 1
If not specified 2048 is used.
d1975 1
a1975 1
The default value is 65537.
d1979 1
a1979 1
If not specified 1024 is used.
d1992 4
a1995 39
.Sh GENPKEY EXAMPLES
Generate an RSA private key using default parameters:
.Bd -literal -offset indent
$ openssl genpkey -algorithm RSA -out key.pem
.Ed
.Pp
Encrypt and output a private key using 128-bit AES and the passphrase "hello":
.Bd -literal -offset indent
$ openssl genpkey -algorithm RSA -out key.pem \e
	-aes-128-cbc -pass pass:hello
.Ed
.Pp
Generate a 2048-bit RSA key using 3 as the public exponent:
.Bd -literal -offset indent
$ openssl genpkey -algorithm RSA -out key.pem \e
	-pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:3
.Ed
.Pp
Generate 1024-bit DSA parameters:
.Bd -literal -offset indent
$ openssl genpkey -genparam -algorithm DSA \e
	-out dsap.pem -pkeyopt dsa_paramgen_bits:1024
.Ed
.Pp
Generate a DSA key from parameters:
.Bd -literal -offset indent
$ openssl genpkey -paramfile dsap.pem -out dsakey.pem
.Ed
.Pp
Generate 1024-bit DH parameters:
.Bd -literal -offset indent
$ openssl genpkey -genparam -algorithm DH \e
	-out dhp.pem -pkeyopt dh_paramgen_prime_len:1024
.Ed
.Pp
Generate a DH key from parameters:
.Bd -literal -offset indent
$ openssl genpkey -paramfile dhp.pem -out dhkey.pem
.Ed
@


1.50
log
@trim errstr, and zap gendh (deprecated) entirely;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.49 2016/08/12 06:17:22 jmc Exp $
d1803 1
a1803 1
The output file to read from,
a1853 3
.\"
.\" GENDSA
.\"
a1856 1
.Bk -words
a1862 1
.Ek
d1868 1
a1868 1
(which will typically be generated by the
d1871 4
d1882 1
a1882 1
These options encrypt the private key with the AES, DES,
d1887 2
a1888 3
The output
.Ar file .
If this argument is not specified, standard output is used.
d1890 1
a1890 1
This option specifies the DSA parameter file to use.
a1891 3
DSA parameters can be generated and examined using the
.Nm openssl dsaparam
command.
a1892 3
.Sh GENDSA NOTES
DSA key generation is little more than random number generation so it is
much quicker than RSA key generation, for example.
@


1.49
log
@shorten openssl enc, with help from jsing;
ok jsing beck
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.48 2016/08/10 17:41:08 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 10 2016 $
a1823 3
.\"
.\" ERRSTR
.\"
a1853 22
.Sh ERRSTR EXAMPLES
The following error code:
.Pp
.Dl 27594:error:2006D080:lib(32):func(109):reason(128):bss_file.c:107:
.Pp
\&...can be displayed with:
.Pp
.Dl $ openssl errstr 2006D080
.Pp
\&...to produce the error message:
.Pp
.Dl error:2006D080:BIO routines:BIO_new_file:no such file
.\"
.\" GENDH
.\"
.Sh GENDH
Generation of Diffie-Hellman Parameters.
Replaced by
.Nm dhparam .
See
.Sx DHPARAM
above.
@


1.48
log
@shorten ecparam;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.47 2016/08/09 17:07:33 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 9 2016 $
a1668 3
.\"
.\" ENC
.\"
a1671 1
.Bk -words
a1689 1
.Ek
d1697 11
d1719 1
a1719 1
If decryption is set, the input data is base64 decoded before
d1728 2
a1729 1
Encrypt the input data: this is the default.
d1731 2
a1732 3
The input
.Ar file ;
standard input by default.
d1743 2
a1744 3
option, the
.Ar IV
must explicitly be defined.
d1746 1
a1746 3
the
.Ar IV
is generated from this password.
d1752 2
a1753 3
If only the key is specified, the
.Ar IV
must be additionally specified using the
d1764 1
a1764 3
option will be used and the
.Ar IV
generated from the password will be taken.
a1772 2
This is for compatibility with previous versions of
.Nm OpenSSL .
a1778 2
This is for compatibility with previous versions of
.Nm OpenSSL .
d1788 1
a1788 1
.Dq md5
d1790 1
a1790 1
.Dq sha1 .
d1796 1
a1796 3
Don't use a
.Ar salt
in the key derivation routines.
d1799 3
a1801 5
be used unless compatibility with previous versions of
.Nm OpenSSL
or
.Nm SSLeay
is required.
d1803 2
a1804 3
The output
.Ar file ,
standard output by default.
d1806 1
a1806 6
Print out the
.Ar salt ,
.Ar key ,
and
.Ar IV
used, then immediately exit;
d1809 1
a1809 6
Print out the
.Ar salt ,
.Ar key ,
and
.Ar IV
used.
d1818 5
a1822 4
Use a
.Ar salt
in the key derivation routines.
This is the default.
a1823 144
.Sh ENC NOTES
The program can be called either as
.Nm openssl ciphername
or
.Nm openssl enc -ciphername .
.Pp
A password will be prompted for to derive the
.Ar key
and
.Ar IV
if necessary.
.Pp
The
.Fl nosalt
option should
.Em NEVER
be used unless compatibility with previous versions of
.Nm OpenSSL
or
.Nm SSLeay
is required.
.Pp
With the
.Fl nosalt
option it is possible to perform efficient dictionary
attacks on the password and to attack stream cipher encrypted data.
The reason for this is that without the salt
the same password always generates the same encryption key.
When the salt
is being used the first eight bytes of the encrypted data are reserved
for the salt:
it is generated at random when encrypting a file and read from the
encrypted file when it is decrypted.
.Pp
Some of the ciphers do not have large keys and others have security
implications if not used correctly.
A beginner is advised to just use a strong block cipher in CBC mode
such as bf or des3.
.Pp
All the block ciphers normally use PKCS#5 padding also known as standard block
padding:
this allows a rudimentary integrity or password check to be performed.
However, since the chance of random data passing the test is
better than 1 in 256, it isn't a very good test.
.Pp
If padding is disabled, the input data must be a multiple of the cipher
block length.
.Pp
All RC2 ciphers have the same key and effective key length.
.Pp
Blowfish and RC5 algorithms use a 128-bit key.
.Sh ENC SUPPORTED CIPHERS
.Bd -unfilled -offset indent
aes-[128|192|256]-cbc	128/192/256 bit AES in CBC mode
aes-[128|192|256]	Alias for aes-[128|192|256]-cbc
aes-[128|192|256]-cfb	128/192/256 bit AES in 128 bit CFB mode
aes-[128|192|256]-cfb1	128/192/256 bit AES in 1 bit CFB mode
aes-[128|192|256]-cfb8	128/192/256 bit AES in 8 bit CFB mode
aes-[128|192|256]-ecb	128/192/256 bit AES in ECB mode
aes-[128|192|256]-ofb	128/192/256 bit AES in OFB mode

base64			Base 64

bf			Alias for bf-cbc
bf-cbc			Blowfish in CBC mode
bf-cfb			Blowfish in CFB mode
bf-ecb			Blowfish in ECB mode
bf-ofb			Blowfish in OFB mode

cast			Alias for cast-cbc
cast-cbc		CAST in CBC mode
cast5-cbc		CAST5 in CBC mode
cast5-cfb		CAST5 in CFB mode
cast5-ecb		CAST5 in ECB mode
cast5-ofb		CAST5 in OFB mode

des			Alias for des-cbc
des-cbc			DES in CBC mode
des-cfb			DES in CBC mode
des-ecb			DES in ECB mode
des-ofb			DES in OFB mode

des-ede			Two key triple DES EDE in ECB mode
des-ede-cbc		Two key triple DES EDE in CBC mode
des-ede-cfb		Two key triple DES EDE in CFB mode
des-ede-ofb		Two key triple DES EDE in OFB mode

des3			Alias for des-ede3-cbc
des-ede3		Three key triple DES EDE in ECB mode
des-ede3-cbc		Three key triple DES EDE in CBC mode
des-ede3-cfb		Three key triple DES EDE CFB mode
des-ede3-ofb		Three key triple DES EDE in OFB mode

desx			DESX algorithm

rc2			Alias for rc2-cbc
rc2-cbc			128-bit RC2 in CBC mode
rc2-cfb			128-bit RC2 in CFB mode
rc2-ecb			128-bit RC2 in ECB mode
rc2-ofb			128-bit RC2 in OFB mode
rc2-64-cbc		64-bit RC2 in CBC mode
rc2-40-cbc		40-bit RC2 in CBC mode

rc4			128-bit RC4
rc4-40			40-bit RC4
.Ed
.Sh ENC EXAMPLES
Just base64 encode a binary file:
.Pp
.Dl $ openssl base64 -in file.bin -out file.b64
.Pp
Decode the same file:
.Pp
.Dl $ openssl base64 -d -in file.b64 -out file.bin
.Pp
Encrypt a file using triple DES in CBC mode using a prompted password:
.Pp
.Dl $ openssl des3 -salt -in file.txt -out file.des3
.Pp
Decrypt a file using a supplied password:
.Pp
.Dl "$ openssl des3 -d -in file.des3 -out file.txt -k mypassword"
.Pp
Encrypt a file then base64 encode it
(so it can be sent via mail for example)
using Blowfish in CBC mode:
.Pp
.Dl $ openssl bf -a -salt -in file.txt -out file.bf
.Pp
Base64 decode a file then decrypt it:
.Pp
.Dl "$ openssl bf -d -a -in file.bf -out file.txt"
.Sh ENC BUGS
The
.Fl A
option when used with large files doesn't work properly.
.Pp
There should be an option to allow an iteration count to be included.
.Pp
The
.Nm enc
program only supports a fixed number of algorithms with certain parameters.
Therefore it is not possible to use RC2 with a 76-bit key
or RC4 with an 84-bit key with this program.
@


1.47
log
@trim the ec text;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.46 2016/08/08 18:13:51 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 8 2016 $
d1018 1
a1018 1
Print out the CRL in text form.
d1096 1
a1096 1
Print out the digest in two-digit groups separated by colons.
d1098 1
a1098 1
Print out BIO debugging information.
d1249 1
a1249 1
Print out the DH parameters in human readable form.
d1364 1
a1364 1
Print out the public/private key components and parameters.
d1522 2
a1523 2
it consists of the DER format base64
encoded with additional header and footer lines.
d1561 1
a1561 1
Print out the public/private key components and parameters.
a1562 3
.\"
.\" ECPARAM
.\"
a1565 1
.Bk -words
d1571 1
a1571 1
.Op Fl inform Ar DER | PEM
d1577 1
a1577 1
.Op Fl outform Ar DER | PEM
a1579 1
.Ek
d1582 13
a1594 1
This command is used to manipulate or generate EC parameter files.
d1601 1
a1601 1
.Fn get_ec_group_XXX
d1610 1
a1610 1
(the default value),
d1615 1
a1615 1
the point conversion forms please read the X9.62 standard.
d1621 1
a1621 1
.Ar OPENSSL_EC_BIN_PT_COMP
d1626 6
a1631 5
Specify the input filename to read parameters from or standard input if
this option is not specified.
.It Fl inform Ar DER | PEM
Specify the input format.
DER uses an ASN.1 DER-encoded
d1633 3
a1635 2
PEM is the default format:
it consists of the DER format base64 encoded with additional
d1638 1
a1638 1
Print out a list of all
d1641 1
a1641 4
Use the EC parameters with the specified 'short' name.
Use
.Fl list_curves
to get a list of all currently implemented EC parameters.
d1643 2
a1644 2
Inhibit that the 'seed' for the parameter generation
is included in the ECParameters structure (see RFC 3279).
d1646 1
a1646 1
Inhibit the output of the encoded version of the parameters.
d1648 4
a1651 10
Specify the output filename parameters are written to.
Standard output is used if this option is not present.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
Specify the output format;
the parameters have the same meaning as the
.Fl inform
option.
d1653 1
a1653 1
This specifies how the elliptic curve parameters are encoded.
d1665 1
a1665 2
is currently not implemented in
.Nm OpenSSL .
d1667 1
a1667 1
Print out the EC parameters in human readable form.
a1668 51
.Sh ECPARAM NOTES
PEM format EC parameters use the header and footer lines:
.Bd -literal -offset indent
-----BEGIN EC PARAMETERS-----
-----END EC PARAMETERS-----
.Ed
.Pp
.Nm OpenSSL
is currently not able to generate new groups and therefore
.Nm ecparam
can only create EC parameters from known (named) curves.
.Sh ECPARAM EXAMPLES
To create EC parameters with the group 'prime192v1':
.Bd -literal -offset indent
$ openssl ecparam -out ec_param.pem -name prime192v1
.Ed
.Pp
To create EC parameters with explicit parameters:
.Bd -literal -offset indent
$ openssl ecparam -out ec_param.pem -name prime192v1 \e
	-param_enc explicit
.Ed
.Pp
To validate given EC parameters:
.Bd -literal -offset indent
$ openssl ecparam -in ec_param.pem -check
.Ed
.Pp
To create EC parameters and a private key:
.Bd -literal -offset indent
$ openssl ecparam -out ec_key.pem -name prime192v1 -genkey
.Ed
.Pp
To change the point encoding to 'compressed':
.Bd -literal -offset indent
$ openssl ecparam -in ec_in.pem -out ec_out.pem \e
	-conv_form compressed
.Ed
.Pp
To print out the EC parameters to standard output:
.Bd -literal -offset indent
$ openssl ecparam -in ec_param.pem -noout -text
.Ed
.Sh ECPARAM HISTORY
The
.Nm ecparam
command was first introduced in
.Nm OpenSSL
0.9.8.
.Sh ECPARAM AUTHORS
.An Nils Larsch .
@


1.46
log
@trim the dsaparam section; ok guenther
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.45 2016/08/05 08:12:12 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 5 2016 $
a1429 3
.\"
.\" EC
.\"
a1432 1
.Bk -words
d1437 1
a1437 1
.Op Fl inform Ar DER | PEM
d1440 1
a1440 1
.Op Fl outform Ar DER | PEM
a1447 1
.Ek
d1455 1
a1455 2
Note:
.Nm OpenSSL
a1459 1
.Nm OpenSSL
d1464 12
d1479 1
a1479 1
This specifies how the points on the elliptic curve are converted
d1483 1
a1483 1
(the default value),
d1488 1
a1488 1
the point conversion forms please read the X9.62 standard.
d1494 1
a1494 1
.Ar OPENSSL_EC_BIN_PT_COMP
d1497 1
a1497 1
These options encrypt the private key with the DES, triple DES, or
d1499 1
a1499 2
.Nm OpenSSL
before outputting it.
d1510 2
a1511 2
This specifies the input filename to read a key from,
or standard input if this option is not specified.
d1513 4
a1516 3
.It Fl inform Ar DER | PEM
This specifies the input format.
DER with a private key uses
d1520 2
a1521 1
PEM is the default format:
d1527 1
a1527 1
Prevents output of the encoded version of the key.
d1529 2
a1530 2
Specifies the output filename to write a key to,
or standard output if none is specified.
d1532 2
a1533 8
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format.
The options have the same meaning as the
.Fl inform
option.
d1535 1
a1535 1
This specifies how the elliptic curve parameters are encoded.
d1548 1
a1548 2
is currently not implemented in
.Nm OpenSSL .
d1561 1
a1561 1
Prints out the public/private key components and parameters.
a1562 52
.Sh EC NOTES
The PEM private key format uses the header and footer lines:
.Bd -literal -offset indent
-----BEGIN EC PRIVATE KEY-----
-----END EC PRIVATE KEY-----
.Ed
.Pp
The PEM public key format uses the header and footer lines:
.Bd -literal -offset indent
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
.Ed
.Sh EC EXAMPLES
To encrypt a private key using triple DES:
.Bd -literal -offset indent
$ openssl ec -in key.pem -des3 -out keyout.pem
.Ed
.Pp
To convert a private key from PEM to DER format:
.Bd -literal -offset indent
$ openssl ec -in key.pem -outform DER -out keyout.der
.Ed
.Pp
To print out the components of a private key to standard output:
.Bd -literal -offset indent
$ openssl ec -in key.pem -text -noout
.Ed
.Pp
To just output the public part of a private key:
.Bd -literal -offset indent
$ openssl ec -in key.pem -pubout -out pubkey.pem
.Ed
.Pp
To change the parameter encoding to
.Cm explicit :
.Bd -literal -offset indent
$ openssl ec -in key.pem -param_enc explicit -out keyout.pem
.Ed
.Pp
To change the point conversion form to
.Cm compressed :
.Bd -literal -offset indent
$ openssl ec -in key.pem -conv_form compressed -out keyout.pem
.Ed
.Sh EC HISTORY
The
.Nm ec
command was first introduced in
.Nm OpenSSL
0.9.8.
.Sh EC AUTHORS
.An Nils Larsch .
@


1.45
log
@shorten the openssl dsa text;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.44 2016/08/03 06:43:21 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 3 2016 $
d264 1
a264 1
Don't output the parsed version of the input file.
d1012 1
a1012 1
Don't output the encoded version of the CRL.
d1242 1
a1242 1
Inhibit the output of the encoded version of the parameters.
d1344 1
a1344 1
Prevent output of the encoded version of the key.
a1365 3
.\"
.\" DSAPARAM
.\"
a1368 1
.Bk -words
d1372 1
a1372 1
.Op Fl inform Ar DER | PEM
d1375 1
a1375 1
.Op Fl outform Ar DER | PEM
a1377 1
.Ek
d1384 6
d1393 1
a1393 1
This option converts the parameters into C code.
d1395 1
a1395 1
.Cm get_dsa Ns Ar XXX Ns Li ()
d1398 1
a1398 1
This option will generate a DSA either using the specified or generated
d1401 2
a1402 3
This specifies the input
.Ar file
to read parameters from, or standard input if this option is not specified.
d1405 5
a1409 6
parameter is included, then this option will be ignored.
.It Fl inform Ar DER | PEM
This specifies the input format.
The
.Ar DER
argument uses an ASN1 DER-encoded form compatible with RFC 2459
d1412 2
a1413 3
The
.Ar PEM
form is the default format:
d1417 8
a1424 1
This option inhibits the output of the encoded version of the parameters.
d1426 1
a1426 1
This option specifies that a parameter set should be generated of size
d1428 1
a1428 17
If this option is included, the input file
.Pq if any
is ignored.
.It Fl out Ar file
This specifies the output
.Ar file
to write parameters to.
Standard output is used if this option is not present.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl text
This option prints out the DSA parameters in human readable form.
a1429 9
.Sh DSAPARAM NOTES
PEM format DSA parameters use the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DSA PARAMETERS-----
-----END DSA PARAMETERS-----
.Ed
.Pp
DSA parameter generation is a slow process and as a result the same set of
DSA parameters is often used to generate several distinct keys.
@


1.44
log
@shorten the openssl dhparam text;
guenther helped rewrite the -dsaparam parts.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.43 2016/08/01 07:23:29 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 1 2016 $
a1257 3
.\"
.\" DSA
.\"
a1260 1
.Bk -words
d1266 1
a1266 1
.Op Fl inform Ar DER | PEM
d1270 1
a1270 1
.Op Fl outform Ar DER | PEM
a1275 1
.Ek
d1291 12
d1309 1
a1309 1
These options encrypt the private key with the AES, DES, or the triple DES
d1312 1
a1312 1
If none of these options is specified, the key is written in plain text.
d1315 1
a1315 1
utility to read in an encrypted key with no encryption option can be used to
d1317 1
a1317 1
or by setting the encryption options it can be use to add or change
d1321 2
a1322 3
This specifies the input
.Ar file
to read a key from, or standard input if this option is not specified.
d1324 4
a1327 5
.It Fl inform Ar DER | PEM
This specifies the input format.
The
.Ar DER
argument with a private key uses an ASN1 DER-encoded form of an ASN.1
d1336 2
a1337 3
The
.Ar PEM
form is the default format:
d1342 1
a1342 1
This option prints out the value of the public key component of the key.
d1344 1
a1344 1
This option prevents output of the encoded version of the key.
d1346 2
a1347 3
This specifies the output
.Ar file
to write a key to, or standard output if not specified.
d1350 2
a1351 7
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
d1364 1
a1364 1
Prints out the public/private key components and parameters.
a1365 32
.Sh DSA NOTES
The PEM private key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DSA PRIVATE KEY-----
-----END DSA PRIVATE KEY-----
.Ed
.Pp
The PEM public key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
.Ed
.Sh DSA EXAMPLES
To remove the pass phrase on a DSA private key:
.Pp
.Dl $ openssl dsa -in key.pem -out keyout.pem
.Pp
To encrypt a private key using triple DES:
.Pp
.Dl $ openssl dsa -in key.pem -des3 -out keyout.pem
.Pp
To convert a private key from PEM to DER format:
.Pp
.Dl $ openssl dsa -in key.pem -outform DER -out keyout.der
.Pp
To print out the components of a private key to standard output:
.Pp
.Dl $ openssl dsa -in key.pem -text -noout
.Pp
To just output the public part of a private key:
.Pp
.Dl $ openssl dsa -in key.pem -pubout -out pubkey.pem
@


1.43
log
@shorten the openssl dgst text; in particular, do not try to
list all the available digests;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.42 2016/07/28 16:22:06 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 28 2016 $
a1172 3
.\"
.\" DHPARAM
.\"
a1175 1
.Bk -words
d1181 1
a1181 1
.Op Fl inform Ar DER | PEM
d1184 1
a1184 1
.Op Fl outform Ar DER | PEM
a1186 1
.Ek
d1192 2
d1198 1
a1198 1
The generator to use, either 2 or 5.
d1202 1
a1202 1
This option converts the parameters into C code.
d1204 1
a1204 1
.Cm get_dh Ns Ar numbits Ns Li ()
d1209 2
a1210 2
If this option is used, DSA rather than DH parameters are read or created;
they are converted to DH format.
d1226 5
a1230 7
This specifies the input
.Ar file
to read parameters from, or standard input if this option is not specified.
.It Fl inform Ar DER | PEM
This specifies the input format.
The argument
.Ar DER
d1233 2
a1234 3
The
.Ar PEM
form is the default format:
d1236 5
a1240 1
additional header and footer lines.
d1242 8
a1249 1
This option inhibits the output of the encoded version of the parameters.
d1251 1
a1251 1
This argument specifies that a parameter set should be generated of size
a1256 14
.It Fl out Ar file
This specifies the output
.Ar file
to write parameters to.
Standard output is used if this option is not present.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl text
This option prints out the DH parameters in human readable form.
a1257 43
.Sh DHPARAM WARNINGS
The program
.Nm dhparam
combines the functionality of the programs
.Nm dh
and
.Nm gendh
in previous versions of
.Nm OpenSSL
and
.Nm SSLeay .
The
.Nm dh
and
.Nm gendh
programs are retained for now, but may have different purposes in future
versions of
.Nm OpenSSL .
.Sh DHPARAM NOTES
PEM format DH parameters use the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DH PARAMETERS-----
-----END DH PARAMETERS-----
.Ed
.Pp
.Nm OpenSSL
currently only supports the older PKCS#3 DH,
not the newer X9.42 DH.
.Pp
This program manipulates DH parameters not keys.
.Sh DHPARAM BUGS
There should be a way to generate and manipulate DH keys.
.Sh DHPARAM HISTORY
The
.Nm dhparam
command was added in
.Nm OpenSSL
0.9.5.
The
.Fl dsaparam
option was added in
.Nm OpenSSL
0.9.6.
@


1.42
log
@remove HISTORY: it was a nonsense;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.41 2016/07/28 16:20:21 jmc Exp $
a1062 3
.\"
.\" DGST
.\"
d1066 1
a1066 6
.Bk -words
.Oo
.Fl gost-mac | streebog256 | streebog512 | md_gost94 |
.Fl md4 | md5 | ripemd160 | sha1 |
.Fl sha224 | sha256 | sha384 | sha512 | whirlpool
.Oc
d1068 1
a1068 1
.Op Fl cd
d1071 1
a1071 1
.Op Fl keyform Ar PEM
a1081 1
.Ek
a1083 8
.Nm openssl
.Cm gost-mac | streebog256 | streebog512 | md_gost94 |
.Cm md4 | md5 | ripemd160 | sha1 |
.Cm sha224 | sha256 | sha384 | sha512 | whirlpool
.Op Fl c
.Op Fl d
.Op Ar
.Pp
d1096 1
a1096 3
Print out the digest in two-digit groups separated by colons; only relevant if
.Em hex
format output is used.
d1099 13
d1120 1
a1120 1
.It Fl keyform Ar PEM
d1134 1
a1134 1
.It Ar key : Ns Ar string
d1138 1
a1138 1
.It Ar hexkey : Ns Ar string
d1143 2
a1144 1
The file to output to, or standard output by default.
a1172 24
.Sh DGST NOTES
The digest of choice for all new applications is SHA1.
Other digests are, however, still widely used.
.Pp
If you wish to sign or verify data using the DSA algorithm, the dss1
digest must be used.
.Pp
A source of random numbers is required for certain signing algorithms, in
particular DSA.
.Pp
The signing and verify options should only be used if a single file is
being signed or verified.
.\"
.\" DH
.\"
.Sh DH
Diffie-Hellman Parameter Management.
The
.Nm dh
command has been replaced by
.Nm dhparam .
See
.Sx DHPARAM
below.
@


1.41
log
@some text cutting, after feedback from jsing;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.40 2016/07/23 19:31:35 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 23 2016 $
a9126 24
.\"
.\" OPENSSL HISTORY
.\"
.Sh HISTORY
The
.Xr openssl 1
document appeared in
.Nm OpenSSL
0.9.2.
The
.Cm list- Ns XXX Ns Cm -commands
pseudo-commands were added in
.Nm OpenSSL
0.9.3;
the
.Cm no- Ns XXX
pseudo-commands were added in
.Nm OpenSSL
0.9.5a;
the
.Cm list- Ns XXX Ns Cm -algorithms
pseudo-commands were added in
.Nm OpenSSL
1.0.0.
@


1.40
log
@rework crl2pkcs7; with help from jsing
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.39 2016/07/21 18:40:26 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 21 2016 $
d258 1
a258 1
The input file; the default is standard input.
d352 1
a352 1
This sets the batch mode.
d362 1
a362 1
This allows the expiry date to be explicitly set.
d452 1
a452 1
This option defines the CA
d494 1
a494 1
This allows the start date to be explicitly set.
d503 1
a503 1
This prints extra details about the operations being performed.
d513 1
a513 1
This sets the revocation reason to keyCompromise and the compromise time to
d518 1
a518 1
This sets the CRL revocation reason code to certificateHold and the hold
d559 1
a559 1
This option generates a CRL based on information in the index file.
d796 1
a796 1
It can be used as a test tool to determine the appropriate cipherlist.
@


1.39
log
@rework DESCRIPTION a little: no-command seems clearer than no-XXX;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.38 2016/07/21 18:33:27 jmc Exp $
a1019 3
.\"
.\" CRL2PKCS7
.\"
a1022 1
.Bk -words
d1025 1
a1025 1
.Op Fl inform Ar DER | PEM
d1028 1
a1028 2
.Op Fl outform Ar DER | PEM
.Ek
d1041 1
a1041 1
Specifies a
d1043 3
a1045 4
containing one or more certificates in PEM format.
All certificates in the file will be added to the PKCS#7 structure.
This option can be used more than once to read certificates from multiple
files.
d1047 5
a1051 10
This specifies the input
.Ar file
to read a CRL from, or standard input if this option is not specified.
.It Fl inform Ar DER | PEM
This specifies the CRL input format.
.Ar DER
format is a DER-encoded CRL structure.
.Ar PEM
.Pq the default
is a base64-encoded version of the DER form with header and footer lines.
d1057 5
a1061 10
Specifies the output
.Ar file
to write the PKCS#7 structure to, or standard output by default.
.It Fl outform Ar DER | PEM
This specifies the PKCS#7 structure output format.
.Ar DER
format is a DER-encoded PKCS#7 structure.
.Ar PEM
.Pq the default
is a base64-encoded version of the DER form with header and footer lines.
a1062 23
.Sh CRL2PKCS7 EXAMPLES
Create a PKCS#7 structure from a certificate and CRL:
.Pp
.Dl $ openssl crl2pkcs7 -in crl.pem -certfile cert.pem -out p7.pem
.Pp
Create a PKCS#7 structure in DER format with no CRL from several
different certificates:
.Bd -literal -offset indent
$ openssl crl2pkcs7 -nocrl -certfile newcert.pem \e
	-certfile demoCA/cacert.pem -outform DER -out p7.der
.Ed
.Sh CRL2PKCS7 NOTES
The output file is a PKCS#7 signed data structure containing no signers and
just certificates and an optional CRL.
.Pp
This utility can be used to send certificates and CAs to Netscape as part of
the certificate enrollment process.
This involves sending the DER-encoded output
as MIME type
.Em application/x-x509-user-cert .
.Pp
The PEM-encoded form with the header and footer lines removed can be used to
install user certificates and CAs in MSIE using the Xenroll control.
@


1.38
log
@rename NOTES to COMMON SYNTAX (explains itself better); rework the
passphrase section a little; move the DER|PEM stuff in there to help
avoid text repetition, and prefer the lowercase (less keys to press);
adjust ENVIRONMENT to format a little more nicely;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.37 2016/07/21 16:34:08 jmc Exp $
d136 1
a136 2
.Cm no- Ns Ar XXX
.Op Ar arbitrary options
d149 1
a149 1
.Nm OpenSSL Ns 's
d178 1
a178 1
.Cm no- Ns Ar XXX
d181 3
a183 3
If no command named
.Ar XXX
exists,
a184 1
.Pq success
d186 1
a186 1
.Cm no- Ns Ar XXX ;
d188 2
a189 5
.Ar XXX .
In both cases, the output goes to
.Em stdout
and nothing is printed to
.Em stderr .
d198 1
a198 1
.Cm no- Ns Ar XXX
d203 1
a203 1
.Cm no- Ns Ar XXX
@


1.37
log
@strip back openssl crl somewhat: remove the examples
and move any relevant text into the main body;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.36 2016/07/20 14:42:03 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 20 2016 $
a265 8
.Cm der
.Pq Distinguished Encoding Rules
is binary format and
.Cm pem
.Pq Privacy Enhanced Mail ,
the default, is base64-encoded.
.Cm txt
is plain text.
d966 1
a966 1
.Op Fl inform Ar DER | PEM
d972 1
a972 1
.Op Fl outform Ar DER | PEM
a978 6
.Pp
.Cm DER
is a DER-encoded CRL structure.
.Cm PEM ,
the default,
is a base64-encoded version of the DER form with header and footer lines.
d1004 1
a1004 1
.It Fl inform Cm DER | PEM
d1020 1
a1020 1
.It Fl outform Cm DER | PEM
d8999 5
a9003 2
.Sh NOTES
Several commands accept password arguments, typically using
d9007 3
a9009 3
for input and output passwords, respectively.
These allow the password to be obtained from a variety of sources.
Both of these options take a single argument whose format is described below.
d9013 2
a9014 2
.Bl -tag -width "fd:number"
.It Ar pass : Ns Ar password
d9017 1
a9017 5
Since the password is visible to utilities
(like
.Xr ps 1
under
.Ux )
d9019 1
a9019 1
.It Ar env : Ns Ar var
d9022 3
a9024 7
Since the environment of other processes is visible on certain platforms
(e.g.\&
.Xr ps 1
under certain
.Ux
OSes) this option should be used with caution.
.It Ar file : Ns Ar path
d9039 1
a9039 1
.It Ar fd : Ns Ar number
d9042 2
a9043 2
This can be used to send the data via a pipe for example.
.It Ar stdin
d9046 20
d9069 1
a9069 1
.Bl -tag -width "OPENSSL_CONFXXX"
@


1.36
log
@strip back openssl ciphers:
- rearrange the descriptions of -V and -v to read more logically
- move the cipherlist text into the cipherlist description
- zap examples
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.35 2016/07/19 20:02:47 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 19 2016 $
a965 3
.\"
.\" CRL
.\"
a968 1
.Bk -words
a981 1
.Ek
d988 11
d1017 3
a1019 9
This specifies the input file to read from, or standard input if this
option is not specified.
.It Fl inform Ar DER | PEM
This specifies the input format.
.Ar DER
format is a DER-encoded CRL structure.
.Ar PEM
.Pq the default
is a base64-encoded version of the DER form with header and footer lines.
d1024 1
a1024 1
.Ar lastUpdate
d1028 1
a1028 1
.Ar nextUpdate
d1033 3
a1035 6
Specifies the output file to write to, or standard output by
default.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
a1038 17
.Sh CRL NOTES
The PEM CRL format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN X509 CRL-----
-----END X509 CRL-----
.Ed
.Sh CRL EXAMPLES
Convert a CRL file from PEM to DER:
.Pp
.Dl $ openssl crl -in crl.pem -outform DER -out crl.der
.Pp
Output the text form of a DER-encoded certificate:
.Pp
.Dl $ openssl crl -in crl.der -inform DER -text -noout
.Sh CRL BUGS
Ideally, it should be possible to create a CRL using appropriate options
and files too.
@


1.35
log
@strip back openssl ca: in particular remove some excessively wordy sections,
move some other sections into more relevant places, and remove the example
ca file;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.34 2016/07/17 16:33:17 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 17 2016 $
a797 3
.\"
.\" CIPHERS
.\"
d807 1
a807 1
.Nm OpenSSL
d818 6
d825 2
a826 10
.Fl v ,
but include cipher suite codes in output (hex format).
.It Fl v
Verbose option.
List ciphers with a complete description of protocol version,
key exchange, authentication, encryption and mac algorithms used along with
any key size restrictions.
Note that without the
.Fl v
option, ciphers may seem to appear twice in a cipher list.
d830 2
a831 5
The format is described below.
.El
.Sh CIPHERS LIST FORMAT
The cipher list consists of one or more
.Em cipher strings
d835 1
a835 3
The actual
.Em cipher string
can take several different forms:
d837 1
a837 2
It can consist of a single cipher suite such as
.Em RC4-SHA .
d841 3
a843 7
For example
.Em SHA1
represents all cipher suites using the digest algorithm SHA1.
.Pp
Lists of cipher suites can be combined in a single
.Em cipher string
using the
d845 4
a848 7
character.
This is used as a logical
.Em and
operation.
For example,
.Em SHA1+DES
represents all cipher suites containing the SHA1 and the DES algorithms.
a854 1
.Pp
a859 1
.Pp
a863 1
.Pp
d875 1
a875 1
.Em @@STRENGTH
d878 2
a879 1
.Sh CIPHERS STRINGS
d882 1
a882 1
.It Ar DEFAULT
d885 3
a887 5
.Ar ALL:!aNULL:!eNULL:!SSLv2 .
This must be the first
.Ar cipher string
specified.
.It Ar COMPLEMENTOFDEFAULT
d889 1
a889 1
.Ar ALL ,
d892 1
a892 1
.Ar ADH .
d894 1
a894 1
.Ar eNULL ,
d896 1
a896 1
.Ar ALL
d898 1
a898 1
.Ar COMPLEMENTOFALL
d900 1
a900 1
.It Ar ALL
d902 3
a904 3
.Ar eNULL
ciphers which must be explicitly enabled.
.It Ar COMPLEMENTOFALL
d906 1
a906 1
.Ar ALL ,
d908 2
a909 2
.Ar eNULL .
.It Ar HIGH
d913 1
a913 1
.It Ar MEDIUM
d916 1
a916 1
.It Ar LOW
d920 1
a920 1
.It Ar eNULL , NULL
d926 1
a926 1
.It Ar aNULL
d932 1
a932 1
.It Ar kRSA , RSA
d934 1
a934 1
.It Ar kEDH
d936 1
a936 1
.It Ar aRSA
d938 1
a938 1
.It Ar aDSS , DSS
d940 1
a940 1
.It Ar TLSv1
d942 1
a942 1
.It Ar DH
d944 1
a944 1
.It Ar ADH
d946 1
a946 1
.It Ar AES
d948 1
a948 1
.It Ar 3DES
d950 1
a950 1
.It Ar DES
d953 1
a953 1
.It Ar RC4
d955 1
a955 1
.It Ar CAMELLIA
d957 1
a957 1
.It Ar CHACHA20
d959 1
a959 1
.It Ar IDEA
d961 1
a961 1
.It Ar MD5
d963 1
a963 1
.It Ar SHA1 , SHA
a965 24
.Sh CIPHERS EXAMPLES
Verbose listing of all
.Nm OpenSSL
ciphers including NULL ciphers:
.Pp
.Dl $ openssl ciphers -v 'ALL:eNULL'
.Pp
Include all ciphers except NULL and anonymous DH then sort by
strength:
.Pp
.Dl $ openssl ciphers -v 'ALL:!ADH:@@STRENGTH'
.Pp
Include only 3DES ciphers and then place RSA ciphers last:
.Pp
.Dl $ openssl ciphers -v '3DES:+RSA'
.Pp
Include all RC4 ciphers but leave out those without authentication:
.Pp
.Dl $ openssl ciphers -v 'RC4:!COMPLEMENTOFDEFAULT'
.Pp
Include all ciphers with RSA authentication but leave out ciphers without
encryption:
.Pp
.Dl $ openssl ciphers -v 'RSA:!COMPLEMENTOFALL'
@


1.34
log
@strip back asn1parse; ok beck jsing
description of -out altered on jsing's advice
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.33 2016/07/16 07:27:53 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 16 2016 $
a311 3
.\"
.\" CA
.\"
a314 1
.Bk -words
a352 1
.Ek
d357 1
a357 1
command is a minimal CA application.
d359 1
a359 1
and generate CRLs.
d362 1
a362 2
The options descriptions will be divided into each purpose.
.Sh CA OPTIONS
d381 1
a381 1
.Em x509_extensions
d405 2
a406 6
Since on some systems the command line arguments are visible
(e.g.\&
.Ux
with the
.Xr ps 1
utility) this option should be used with caution.
d441 1
a441 1
.Em altName
d468 14
a481 5
This is a section in the configuration file which decides which fields
should be mandatory or match the CA certificate.
Check out the
.Sx CA POLICY FORMAT
section for more information.
d493 11
a503 3
See the
.Sx SPKAC FORMAT
section for information on the required format.
d511 1
a511 1
Show status of certificate with serial number
d518 2
a519 1
.Sh CRL OPTIONS
d553 1
a553 1
.Em nextUpdate
a587 23
.Sh CA CONFIGURATION FILE OPTIONS
The section of the configuration file containing options for
.Nm ca
is found as follows:
If the
.Fl name
command line option is used, then it names the section to be used.
Otherwise the section to be used must be named in the
.Em default_ca
option of the
.Em ca
section of the configuration file (or in the default section of the
configuration file).
Besides
.Em default_ca ,
the following options are read directly from the
.Em ca
section:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It preserve
.It msie_hack
.El
d589 15
a603 1
This is probably a bug and may change in future releases.
d614 1
a614 1
.It Ar certificate
d619 1
a619 1
.It Ar copy_extensions
d622 1
a622 1
.Ar none
d626 1
a626 1
.Ar copy ,
d630 1
a630 1
.Ar copyall ,
d633 25
a657 3
See the
.Sx CA WARNINGS
section before using this option.
d661 2
a662 2
.Em subjectAltName .
.It Ar crl_extensions
d665 1
a665 1
.It Ar crlnumber
d669 1
a669 1
.It Ar database
d673 1
a673 1
.It Ar default_crl_hours , default_crl_days
d681 1
a681 1
.It Ar default_days
d686 1
a686 1
.It Ar default_enddate
d691 1
a691 1
.Ar default_days
d694 1
a694 1
.It Ar default_md
d700 1
a700 1
.It Ar default_startdate
d706 1
a706 1
.It Ar email_in_dn
d714 1
a714 1
.It Ar msie_hack
d717 1
a717 1
.It Ar name_opt , cert_opt
d727 1
a727 1
.Ar no_signame
d729 1
a729 1
.Ar no_sigdump
d735 1
a735 1
.Em ca_default
d739 1
a739 1
.Nm OpenSSL
d744 1
a744 1
.Ar policy
d747 1
a747 1
.It Ar new_certs_dir
d753 1
a753 1
.It Ar oid_file
d758 1
a758 1
.It Ar oid_section
d766 1
a766 1
.It Ar policy
d770 1
a770 4
See the
.Sx CA POLICY FORMAT
section for more information.
.It Ar preserve
d773 1
a773 1
.It Ar private_key
d779 1
a779 1
.It Ar serial
d783 1
a783 1
.It Ar unique_subject
d785 1
a785 1
.Ar yes
d789 1
a789 1
.Ar no
d793 2
a794 2
.Ar yes .
.It Ar x509_extensions
a797 242
.Sh CA POLICY FORMAT
The policy section consists of a set of variables corresponding to
certificate DN fields.
If the value is
.Qq match ,
then the field value must match the same field in the CA certificate.
If the value is
.Qq supplied ,
then it must be present.
If the value is
.Qq optional ,
then it may be present.
Any fields not mentioned in the policy section
are silently deleted, unless the
.Fl preserveDN
option is set,
but this can be regarded more of a quirk than intended behaviour.
.Sh SPKAC FORMAT
The input to the
.Fl spkac
command line option is a Netscape signed public key and challenge.
This will usually come from the
.Em KEYGEN
tag in an HTML form to create a new private key.
It is, however, possible to create SPKACs using the
.Nm spkac
utility.
.Pp
The file should contain the variable SPKAC set to the value of
the SPKAC and also the required DN components as name value pairs.
If it's necessary to include the same component twice,
then it can be preceded by a number and a
.Sq \&. .
.Sh CA EXAMPLES
.Sy Note :
these examples assume that the
.Nm ca
directory structure is already set up and the relevant files already exist.
This usually involves creating a CA certificate and private key with
.Cm req ,
a serial number file and an empty index file and placing them in
the relevant directories.
.Pp
To use the sample configuration file below, the directories
.Pa demoCA ,
.Pa demoCA/private
and
.Pa demoCA/newcerts
would be created.
The CA certificate would be copied to
.Pa demoCA/cacert.pem
and its private key to
.Pa demoCA/private/cakey.pem .
A file
.Pa demoCA/serial
would be created containing, for example,
.Qq 01
and the empty index file
.Pa demoCA/index.txt .
.Pp
Sign a certificate request:
.Pp
.Dl $ openssl ca -in req.pem -out newcert.pem
.Pp
Sign a certificate request, using CA extensions:
.Pp
.Dl $ openssl ca -in req.pem -extensions v3_ca -out newcert.pem
.Pp
Generate a CRL:
.Pp
.Dl $ openssl ca -gencrl -out crl.pem
.Pp
Sign several requests:
.Pp
.Dl $ openssl ca -infiles req1.pem req2.pem req3.pem
.Pp
Certify a Netscape SPKAC:
.Pp
.Dl $ openssl ca -spkac spkac.txt
.Pp
A sample SPKAC file
.Pq the SPKAC line has been truncated for clarity :
.Bd -literal -offset indent
SPKAC=MIG0MGAwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn7PDhCeV/xIxUg8V70YRxK
CN=Steve Test
emailAddress=steve@@openssl.org
0.OU=OpenSSL Group
1.OU=Another Group
.Ed
.Pp
A sample configuration file with the relevant sections for
.Nm ca :
.Bd -literal
\& [ ca ]
\& default_ca      = CA_default            # The default ca section

\& [ CA_default ]

\& dir            = ./demoCA              # top dir
\& database       = $dir/index.txt        # index file
\& new_certs_dir  = $dir/newcerts         # new certs dir

\& certificate    = $dir/cacert.pem       # The CA cert
\& serial         = $dir/serial           # serial no file
\& private_key    = $dir/private/cakey.pem# CA private key

\& default_days   = 365                   # how long to certify for
\& default_crl_days= 30                   # how long before next CRL
\& default_md     = md5                   # md to use

\& policy         = policy_any            # default policy
\& email_in_dn    = no                    # Don't add the email into cert DN

\& name_opt        = ca_default           # Subject name display option
\& cert_opt        = ca_default           # Certificate display option
\& copy_extensions = none                 #Don't copy extensions from request

\& [ policy_any ]
\& countryName            = supplied
\& stateOrProvinceName    = optional
\& organizationName       = optional
\& organizationalUnitName = optional
\& commonName             = supplied
\& emailAddress           = optional
.Ed
.Sh CA FILES
.Sy Note :
the location of all files can change either by compile time options,
configuration file entries, environment variables, or command line options.
The values below reflect the default values.
.Bd -literal -offset indent
/etc/ssl/openssl.cnf           - master configuration file
\&./demoCA                       - main CA directory
\&./demoCA/cacert.pem            - CA certificate
\&./demoCA/private/cakey.pem     - CA private key
\&./demoCA/serial                - CA serial number file
\&./demoCA/serial.old            - CA serial number backup file
\&./demoCA/index.txt             - CA text database file
\&./demoCA/index.txt.old         - CA text database backup file
\&./demoCA/certs                 - certificate output file
.Ed
.Sh CA ENVIRONMENT VARIABLES
.Ev OPENSSL_CONF
reflects the location of the master configuration file;
it can be overridden by the
.Fl config
command line option.
.Sh CA RESTRICTIONS
The text database index file is a critical part of the process,
and if corrupted it can be difficult to fix.
It is theoretically possible to rebuild the index file from all the
issued certificates and a current CRL; however there is no option to do this.
.Pp
V2 CRL features like delta CRLs are not currently supported.
.Pp
Although several requests can be input and handled at once, it is only
possible to include one SPKAC or self-signed certificate.
.Sh CA BUGS
The use of an in-memory text database can cause problems when large
numbers of certificates are present because, as the name implies,
the database has to be kept in memory.
.Pp
It is not possible to certify two certificates with the same DN; this
is a side effect of how the text database is indexed and it cannot easily
be fixed without introducing other problems.
Some S/MIME clients can use two certificates with the same DN for separate
signing and encryption keys.
.Pp
The
.Nm ca
command really needs rewriting or the required functionality
exposed at either a command or interface level so a more friendly utility
.Pq perl script or GUI
can handle things properly.
.Pp
Any fields in a request that are not present in a policy are silently
deleted.
This does not happen if the
.Fl preserveDN
option is used.
To enforce the absence of the EMAIL field within the DN, as suggested
by RFCs, regardless of the contents of the request's subject the
.Fl noemailDN
option can be used.
The behaviour should be more friendly and configurable.
.Pp
Cancelling some commands by refusing to certify a certificate can
create an empty file.
.Sh CA WARNINGS
The
.Nm ca
command is quirky and at times downright unfriendly.
.Pp
The
.Nm ca
utility was originally meant as an example of how to do things in a CA.
It was not supposed to be used as a full blown CA itself:
nevertheless some people are using it for this purpose.
.Pp
The
.Nm ca
command is effectively a single user command: no locking is done on the
various files, and attempts to run more than one
.Nm ca
command on the same database can have unpredictable results.
.Pp
The
.Ar copy_extensions
option should be used with caution.
If care is not taken, it can be a security risk.
For example, if a certificate request contains a
.Em basicConstraints
extension with CA:TRUE and the
.Ar copy_extensions
value is set to
.Ar copyall
and the user does not spot
this when the certificate is displayed, then this will hand the requestor
a valid CA certificate.
.Pp
This situation can be avoided by setting
.Ar copy_extensions
to
.Ar copy
and including
.Em basicConstraints
with CA:FALSE in the configuration file.
Then if the request contains a
.Em basicConstraints
extension, it will be ignored.
.Pp
It is advisable to also include values for other extensions such
as
.Ar keyUsage
to prevent a request supplying its own values.
.Pp
Additional restrictions can be placed on the CA certificate itself.
For example if the CA certificate has:
.Pp
.D1 basicConstraints = CA:TRUE, pathlen:0
.Pp
then even if a certificate is issued with CA:TRUE it will not be valid.
d9130 7
@


1.33
log
@since we no longer pull source directly from openssl, the time is
right to try and trim some of the excess from this page. begin now
by cutting some of the fluff from the start.

the section on pass phrase arguments goes to the end of the page: it;s in
the way for now.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.32 2016/02/12 13:03:19 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: February 12 2016 $
a209 3
.\"
.\" ASN1PARSE
.\"
a212 1
.Bk -words
d219 1
a219 1
.Op Fl inform Ar DER | PEM | TXT
a225 1
.Ek
d246 2
a247 3
or both using
.Xr ASN1_generate_nconf 3
format.
d259 1
a259 1
Indents the output according to the
d263 2
a264 2
The input file; default is standard input.
.It Fl inform Ar DER | PEM | TXT
d266 1
a266 1
.Ar DER
d269 1
a269 1
.Ar PEM
d272 1
a272 1
.Ar TXT
d275 1
a275 1
Number of bytes to parse; default is until end of file.
d279 1
a279 1
Starting offset to begin parsing; default is start of file.
a282 69
The format of this file is described in the
.Sx ASN1PARSE NOTES
section below.
.It Fl out Ar file
Output file to place the DER-encoded data into.
If this option is not present, no encoded data will be output.
This is most useful when combined with the
.Fl strparse
option.
.It Fl strparse Ar offset
Parse the content octets of the ASN.1 object starting at
.Ar offset .
This option can be used multiple times to
.Qq drill down
into a nested structure.
.El
.Sh ASN1PARSE OUTPUT
The output will typically contain lines like this:
.Bd -literal -offset 2n
0:d=0  hl=4 l= 681 cons: SEQUENCE

\&.....

229:d=3  hl=3 l= 141 prim: BIT STRING
373:d=2  hl=3 l= 162 cons: cont [ 3 ]
376:d=3  hl=3 l= 159 cons: SEQUENCE
379:d=4  hl=2 l=  29 cons: SEQUENCE
381:d=5  hl=2 l=   3 prim: OBJECT        :X509v3 Subject Key Identifier
386:d=5  hl=2 l=  22 prim: OCTET STRING
410:d=4  hl=2 l= 112 cons: SEQUENCE
412:d=5  hl=2 l=   3 prim: OBJECT        :X509v3 Authority Key Identifier
417:d=5  hl=2 l= 105 prim: OCTET STRING
524:d=4  hl=2 l=  12 cons: SEQUENCE

\&.....
.Ed
.Pp
This example is part of a self-signed certificate.
Each line starts with the offset in decimal.
.Cm d=XX
specifies the current depth.
The depth is increased within the scope of any SET or SEQUENCE.
.Cm hl=XX
gives the header length
.Pq tag and length octets
of the current type.
.Cm l=XX
gives the length of the content octets.
.Pp
The
.Fl i
option can be used to make the output more readable.
.Pp
Some knowledge of the ASN.1 structure is needed to interpret the output.
.Pp
In this example, the BIT STRING at offset 229 is the certificate public key.
The content octets of this will contain the public key information.
This can be examined using the option
.Fl strparse Cm 229
to yield:
.Bd -literal
    0:d=0  hl=3 l= 137 cons: SEQUENCE
    3:d=1  hl=3 l= 129 prim: INTEGER           :E5D21E1F5C8D208EA7A2166C7FA
F9F6BDF2059669C60876DDB70840F1A5AAFA59699FE471F379F1DD6A487E7D5409AB6A88D4A
9746E24B91D8CF55DB3521015460C8EDE44EE8A4189F7A7BE77D6CD3A9AF2696F486855CF58
BF0EDF2B4068058C7A947F52548DDF7E15E96B385F86422BEA9064A3EE9
  135:d=1  hl=2 l=   3 prim: INTEGER           :010001
.Ed
.Sh ASN1PARSE NOTES
d286 1
a286 1
.Nm OpenSSL Ns Li 's
d290 1
a290 3
The file passed to the
.Fl oid
option allows additional OIDs to be included.
d295 1
a295 1
.Qq short name
d301 11
a311 15
Example:
.Pp
.Dl \&"1.2.3.4	shortname	A long name\&"
.Sh ASN1 EXAMPLES
Parse a file:
.Pp
.Dl $ openssl asn1parse -in file.pem
.Pp
Parse a DER file:
.Pp
.Dl $ openssl asn1parse -inform DER -in file.der
.Sh ASN1PARSE BUGS
There should be options to change the format of output lines.
The output of some ASN.1 types is not well handled
.Pq if at all .
@


1.32
log
@word fix from previous; ok sthen
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.31 2016/02/08 19:29:57 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: February 8 2016 $
d150 2
a151 37
.Nm OpenSSL Ns Li 's
.Em crypto
library from the shell.
It can be used for
.Pp
.Bl -bullet -offset indent -compact
.It
Creation and management of private keys, public keys, and parameters
.It
Public key cryptographic operations
.It
Creation of X.509 certificates, CSRs and CRLs
.It
Calculation of Message Digests
.It
Encryption and Decryption with Ciphers
.It
SSL/TLS Client and Server Tests
.It
Handling of S/MIME signed or encrypted mail
.It
Time stamp requests, generation, and verification
.El
.Sh COMMAND SUMMARY
The
.Nm
program provides a rich variety of commands
.Pf ( Cm command
in the
.Sx SYNOPSIS
above),
each of which often has a wealth of options and arguments
.Pf ( Ar command_opts
and
.Ar command_args
in the
.Sx SYNOPSIS ) .
d172 1
a172 1
.D1 from =\*(Gt to
a209 257
.Sh STANDARD COMMANDS
.Bl -tag -width "asn1parse"
.It Cm asn1parse
Parse an ASN.1 sequence.
.It Cm ca
Certificate Authority
.Pq CA
management.
.It Cm ciphers
Cipher suite description determination.
.It Cm crl
Certificate Revocation List
.Pq CRL
management.
.It Cm crl2pkcs7
CRL to PKCS#7 conversion.
.It Cm dgst
Message digest calculation.
.It Cm dh
Diffie-Hellman parameter management.
Obsoleted by
.Cm dhparam .
.It Cm dhparam
Generation and management of Diffie-Hellman parameters.
Superseded by
.Cm genpkey
and
.Cm pkeyparam .
.It Cm dsa
DSA data management.
.It Cm dsaparam
DSA parameter generation and management.
Superseded by
.Cm genpkey
and
.Cm pkeyparam .
.It Cm ec
Elliptic curve (EC) key processing.
.It Cm ecparam
EC parameter manipulation and generation.
.It Cm enc
Encoding with ciphers.
.It Cm errstr
Error number to error string conversion.
.It Cm gendh
Generation of Diffie-Hellman parameters.
Obsoleted by
.Cm dhparam .
.It Cm gendsa
Generation of DSA private key from parameters.
Superseded by
.Cm genpkey
and
.Cm pkey .
.It Cm genpkey
Generation of private keys or parameters.
.It Cm genrsa
Generation of RSA private key.
Superseded by
.Cm genpkey .
.It Cm nseq
Create or examine a Netscape certificate sequence.
.It Cm ocsp
Online Certificate Status Protocol utility.
.It Cm passwd
Generation of hashed passwords.
.It Cm pkcs7
PKCS#7 data management.
.It Cm pkcs8
PKCS#8 data management.
.It Cm pkcs12
PKCS#12 data management.
.It Cm pkey
Public and private key management.
.It Cm pkeyparam
Public key algorithm parameter management.
.It Cm pkeyutl
Public key algorithm cryptographic operation utility.
.It Cm prime
Generate prime numbers or test numbers for primality.
.It Cm rand
Generate pseudo-random bytes.
.It Cm req
PKCS#10 X.509 Certificate Signing Request
.Pq CSR
management.
.It Cm rsa
RSA key management.
.It Cm rsautl
RSA utility for signing, verification, encryption, and decryption.
Superseded by
.Cm pkeyutl .
.It Cm s_client
This implements a generic SSL/TLS client which can establish a transparent
connection to a remote server speaking SSL/TLS.
It's intended for testing purposes only and provides only rudimentary
interface functionality but internally uses mostly all functionality of the
.Nm OpenSSL
.Em ssl
library.
.It Cm s_server
This implements a generic SSL/TLS server which accepts connections from remote
clients speaking SSL/TLS.
It's intended for testing purposes only and provides only rudimentary
interface functionality but internally uses mostly all functionality of the
.Nm OpenSSL
.Em ssl
library.
It provides both an own command line oriented protocol for testing
SSL functions and a simple HTTP response
facility to emulate an SSL/TLS-aware webserver.
.It Cm s_time
SSL connection timer.
.It Cm sess_id
SSL session data management.
.It Cm smime
S/MIME mail processing.
.It Cm speed
Algorithm speed measurement.
.It Cm spkac
SPKAC printing and generating utility.
.It Cm ts
Time stamping authority tool (client/server).
.It Cm verify
X.509 certificate verification.
.It Cm version
.Nm OpenSSL
version information.
.It Cm x509
X.509 certificate data management.
.El
.Sh MESSAGE DIGEST COMMANDS
.Bl -tag -width "streebog512"
.It Cm gost-mac
GOST-MAC digest.
.It Cm streebog256
Streebog-256 digest.
.It Cm streebog512
Streebog-512 digest.
.It Cm md_gost94
GOST R 34.11-94 digest.
.It Cm md4
MD4 digest.
.It Cm md5
MD5 digest.
.It Cm ripemd160
RIPEMD-160 digest.
.It Cm sha
SHA digest.
.It Cm sha1
SHA-1 digest.
.It Cm sha224
SHA-224 digest.
.It Cm sha256
SHA-256 digest.
.It Cm sha384
SHA-384 digest.
.It Cm sha512
SHA-512 digest.
.It Cm whirlpool
Whirlpool digest.
.El
.Sh ENCODING AND CIPHER COMMANDS
.Bl -tag -width Ds -compact
.It Cm aes-128-cbc | aes-128-ecb | aes-192-cbc | aes-192-ecb
.It Cm aes-256-cbc | aes-256-ecb
AES cipher.
.Pp
.It Cm base64
Base64 encoding.
.Pp
.It Xo
.Cm bf | bf-cbc | bf-cfb |
.Cm bf-ecb | bf-ofb
.Xc
Blowfish cipher.
.Pp
.It Cm cast | cast-cbc
CAST cipher.
.Pp
.It Cm cast5-cbc | cast5-cfb | cast5-ecb | cast5-ofb
CAST5 cipher.
.Pp
.It Xo
.Cm des | des-cbc | des-cfb | des-ecb |
.Cm des-ede | des-ede-cbc
.Xc
.It Cm des-ede-cfb | des-ede-ofb | des-ofb
DES cipher.
.Pp
.It Xo
.Cm des3 | desx | des-ede3 |
.Cm des-ede3-cbc | des-ede3-cfb | des-ede3-ofb
.Xc
Triple DES cipher.
.Pp
.It Xo
.Cm rc2 | rc2-40-cbc | rc2-64-cbc | rc2-cbc |
.Cm rc2-cfb | rc2-ecb | rc2-ofb
.Xc
RC2 cipher.
.Pp
.It Cm rc4 | rc4-40
RC4 cipher.
.El
.Sh PASS PHRASE ARGUMENTS
Several commands accept password arguments, typically using
.Fl passin
and
.Fl passout
for input and output passwords, respectively.
These allow the password to be obtained from a variety of sources.
Both of these options take a single argument whose format is described below.
If no password argument is given and a password is required,
then the user is prompted to enter one:
this will typically be read from the current terminal with echoing turned off.
.Bl -tag -width "fd:number"
.It Ar pass : Ns Ar password
The actual password is
.Ar password .
Since the password is visible to utilities
(like
.Xr ps 1
under
.Ux )
this form should only be used where security is not important.
.It Ar env : Ns Ar var
Obtain the password from the environment variable
.Ar var .
Since the environment of other processes is visible on certain platforms
(e.g.\&
.Xr ps 1
under certain
.Ux
OSes) this option should be used with caution.
.It Ar file : Ns Ar path
The first line of
.Ar path
is the password.
If the same
.Ar path
argument is supplied to
.Fl passin
and
.Fl passout ,
then the first line will be used for the input password and the next line
for the output password.
.Ar path
need not refer to a regular file:
it could, for example, refer to a device or named pipe.
.It Ar fd : Ns Ar number
Read the password from the file descriptor
.Ar number .
This can be used to send the data via a pipe for example.
.It Ar stdin
Read the password from standard input.
.El
a554 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a1580 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a1865 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a1867 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a2115 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a2117 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a2499 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a2829 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a2958 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a3787 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a3789 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4027 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4029 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4151 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4153 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4328 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4330 5
For more information about the format of
.Ar arg
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4480 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4913 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a4915 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a5514 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a5516 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a6984 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a7517 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a7938 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
a8525 5
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
d9384 52
@


1.31
log
@sslv3 has been removed;

prompted by a mail from jiri navratil
help/ok sthen
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.30 2015/12/24 16:54:37 mmcc Exp $
d115 1
a115 1
.Dd $Mdocdate: December 24 2015 $
d6662 1
a6662 1
with servers supporting any version of TLS.
@


1.30
log
@more e-mail -> email
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.29 2015/09/21 13:13:06 bcook Exp $
d115 1
a115 1
.Dd $Mdocdate: September 21 2015 $
d140 2
a141 3
is a cryptography toolkit implementing the Secure Sockets Layer
.Pq SSL v3
and Transport Layer Security
d143 2
a144 1
network protocols and related cryptography standards required by them.
d6218 2
d6318 1
a6318 2
.It Fl no_tls1 | no_tls1_1 | no_tls1_2 | tls1
These options disable the use of certain SSL or TLS protocols.
d6320 2
a6321 1
with all servers and permit them to use SSL v3 or TLS as appropriate.
a6324 3
Some servers only work if TLS is turned off with the
.Fl no_tls
option.
d6389 2
d6439 1
a6439 1
.Fl bugs , tls1 , no_tls1 , no_tls1_1 ,
d6528 2
d6660 1
a6660 2
.It Fl no_tls1 | no_tls1_1 | no_tls1_2 | tls1
These options disable the use of certain SSL or TLS protocols.
d6662 2
a6663 1
with all servers and permit them to use SSL v3 or TLS as appropriate.
d6687 2
@


1.29
log
@remove vestigial bits of sha-0 and md2 from openssl(1)

Noted by kinichiro on github. We probably need a better way to indicate the
list of message digests that are allowed, as the current ones are nowhere near
exhaustive (sigh - guenther@@)

OK guenther@@ jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.28 2015/09/14 01:45:03 doug Exp $
d115 1
a115 1
.Dd $Mdocdate: September 14 2015 $
d822 1
a822 1
request DN, however it is good policy just having the e-mail set into
@


1.28
log
@Temporarily revive MD4 for MS CHAP support.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.27 2015/09/13 23:36:21 doug Exp $
d115 1
a115 1
.Dd $Mdocdate: September 13 2015 $
d1798 1
a1798 1
.Fl md4 | md5 | ripemd160 | sha | sha1 |
d1821 1
a1821 1
.Cm md4 | md5 | ripemd160 | sha | sha1 |
d2783 1
a2783 3
.Dq md2 ,
.Dq md5 ,
.Dq sha ,
d4211 1
a4211 1
.It Ar PBE-MD2-DES | PBE-MD5-DES
d4215 1
a4215 1
.It Ar PBE-SHA1-RC2-64 | PBE-MD2-RC2-64 | PBE-MD5-RC2-64 | PBE-SHA1-DES
a7663 1
.Op Cm md2
d7715 1
a7715 1
.Op Fl md4 | md5 | ripemd160 | sha | sha1
d8860 1
a8860 1
.Op Fl md2 | md5 | sha1
d8917 1
a8917 1
.It Fl md2 | md5 | sha1
@


1.27
log
@Remove MD4 support from LibreSSL.

MD4 should have been removed a long time ago.  Also, RFC 6150 moved it to
historic in 2011.  Rides the major crank from removing SHA-0.

Discussed with many including beck@@, millert@@, djm@@, sthen@@
ok jsing@@, input + ok bcook@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.26 2015/09/13 17:57:11 jmc Exp $
d386 2
d1798 1
a1798 1
.Fl md5 | ripemd160 | sha1 |
d1821 1
a1821 1
.Cm md5 | ripemd160 | sha | sha1 |
d5088 1
a5088 1
.Op Fl md5 | sha1
d7667 1
d7718 1
a7718 1
.Op Fl md5 | ripemd160 | sha1
d7839 1
a7839 1
.It Fl md5|ripemd160|sha1
@


1.26
log
@nc(1) seems worth an Xr in SEE ALSO now;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.25 2015/09/13 12:34:27 bcook Exp $
a385 2
.It Cm md4
MD4 digest.
d1796 1
a1796 1
.Fl md4 | md5 | ripemd160 | sha | sha1 |
d1819 1
a1819 1
.Cm md4 | md5 | ripemd160 | sha | sha1 |
d5086 1
a5086 1
.Op Fl md4 | md5 | sha1
a7664 1
.Op Cm md4
d7715 1
a7715 1
.Op Fl md4 | md5 | ripemd160 | sha | sha1
d7836 1
a7836 1
.It Fl md4|md5|ripemd160|sha|sha1
@


1.25
log
@document extra algorithms available with openssl speed command

ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.24 2015/09/13 07:54:05 jmc Exp $
d9828 1
@


1.24
log
@tweak STANDARDS;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.23 2015/09/12 19:34:07 lteo Exp $
d115 1
a115 1
.Dd $Mdocdate: September 12 2015 $
d7651 2
d7657 1
@


1.23
log
@Nuke SSLEAY_CONF -- a backwards compatibility environment variable that
has been superseded by OPENSSL_CONF and discouraged from use for almost
16 years.

"Definately ok" jsing@@
"burn it" deraadt@@
"Kill it with fire" miod@@
"KILL IT WITH FIRE!!! BURN!!!!" beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.22 2015/09/11 14:30:23 bcook Exp $
d115 1
a115 1
.Dd $Mdocdate: September 11 2015 $
d9896 1
a9896 1
.%T Advanced Encryption Standard (AES) Ciphersuites for Transport Layer Security(TLS)
@


1.22
log
@Remove engine command and parameters from openssl(1).

We do not have any builtin or dynamic engines, meaning openssl(1) has
no way to use the engine command or parameters at all.

ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.21 2015/09/11 06:43:05 jmc Exp $
a5781 3
For compatibility reasons the
.Ev SSLEAY_CONF
environment variable serves the same purpose but its use is discouraged.
@


1.21
log
@shutdown (n.) -> shut down (v.);
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.20 2015/09/11 02:10:32 lteo Exp $
a286 2
.It Cm engine
Engine (loadable module) information and manipulation.
a703 1
.Op Fl engine Ar id
d711 1
a711 1
.Op Fl keyform Ar ENGINE | PEM
a756 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm ca
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d792 1
a792 1
.It Fl keyform Ar ENGINE | PEM
a1802 1
.Op Fl engine Ar id
d1805 1
a1805 1
.Op Fl keyform Ar ENGINE | PEM
a1843 10
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm dgst
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
This engine is not used as a source for digest algorithms
unless it is also specified in the configuration file.
d1852 1
a1852 1
.It Fl keyform Ar ENGINE | PEM
a1943 1
.Op Fl engine Ar id
a1987 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm dhparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a2080 1
.Op Fl engine Ar id
a2124 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm dsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a2229 1
.Op Fl engine Ar id
a2251 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm dsaparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a2315 1
.Op Fl engine Ar id
a2380 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm ec
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a2511 1
.Op Fl engine Ar id
a2554 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm ecparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a2671 1
.Op Fl engine Ar id
a2713 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm enc
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a2844 19
But the first form doesn't work with engine-provided ciphers,
because this form is processed before the
configuration file is read and any engines loaded.
.Pp
Engines which provide entirely new encryption algorithms
should be configured in the configuration file.
Engines, specified on the command line using the
.Fl engine
option,
can only be used for hardware-assisted implementations of ciphers,
supported by
.Nm OpenSSL
core, or by other engines specified in the configuration file.
.Pp
When
.Nm enc
lists supported ciphers,
ciphers provided by engines specified in the configuration files
are listed too.
a2984 50
.\" ENGINE
.\"
.Sh ENGINE
.Nm openssl engine
.Op Fl ctv
.Op Fl post Ar cmd
.Op Fl pre Ar cmd
.Op Ar engine ...
.Pp
The
.Nm engine
command provides loadable module information and manipulation
of various engines.
Any options are applied to all engines supplied on the command line,
or all supported engines if none are specified.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl c
For each engine, also list the capabilities.
.It Fl post Ar cmd
Run command
.Ar cmd
against the engine after loading it
(only used if
.Fl t
is also provided).
.It Fl pre Ar cmd
Run command
.Ar cmd
against the engine before any attempts
to load it
(only used if
.Fl t
is also provided).
.It Fl t
For each engine, check that they are really available.
.Fl tt
will display an error trace for unavailable engines.
.It Fl v
Verbose mode.
For each engine, list its 'control commands'.
.Fl vv
will additionally display each command's description.
.Fl vvv
will also add the input flags for each command.
.Fl vvvv
will also show internal input flags.
.El
.\"
a3049 1
.Op Fl engine Ar id
a3071 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm gendsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a3094 1
.Op Fl engine Ar id
d3110 1
a3110 2
because additional algorithm options
and engine-provided algorithms can be used.
a3130 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm genpkey
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a3260 1
.Op Fl engine Ar id
a3286 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm genrsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a3958 1
.Op Fl engine Ar id
a3974 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkcs7
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a4038 1
.Op Fl engine Ar id
a4073 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkcs8
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a4295 1
.Op Fl engine Ar id
a4441 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkcs12
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a4646 1
.Op Fl engine Ar id
a4674 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkey
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a4759 1
.Op Fl engine Ar id
a4771 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkeyparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a4806 1
.Op Fl engine Ar id
d4810 1
a4810 1
.Op Fl keyform Ar DER | ENGINE | PEM
d4813 1
a4813 1
.Op Fl peerform Ar DER | ENGINE | PEM
a4844 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkeyutl
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d4853 2
a4854 2
.It Fl keyform Ar DER | ENGINE | PEM
The key format DER, ENGINE, or PEM.
d4865 2
a4866 2
.It Fl peerform Ar DER | ENGINE | PEM
The peer key format DER, ENGINE, or PEM.
a5046 1
.Op Fl engine Ar id
a5063 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm rand
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a5081 1
.Op Fl engine Ar id
a5157 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm req
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a5824 1
.Op Fl engine Ar id
a5870 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm rsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a6012 1
.Op Fl engine Ar id
a6041 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm rsautl
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a6197 1
.Op Fl engine Ar id
a6308 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm s_client
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a6512 1
.Op Fl engine Ar id
a6626 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm s_server
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a7107 1
.Op Fl engine Ar id
d7116 1
a7116 1
.Op Fl keyform Ar ENGINE | PEM
a7262 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm smime
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d7318 1
a7318 1
.It Fl keyform Ar ENGINE | PEM
a7680 1
.Op Fl engine Ar id
a7697 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm speed
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a7736 1
.Op Fl engine Ar id
a7896 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm ts
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a8073 5
.It Cm crypto_device
Specifies the
.Nm OpenSSL
engine that will be set as the default for
all available algorithms.
a8300 1
.Op Fl engine Ar id
a8324 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm spkac
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a8423 1
.Op Fl engine Ar id
a8479 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm verify
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a8852 1
.Op Fl engine Ar id
a8900 8
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm x509
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
@


1.20
log
@Change the default behavior of the s_time command so that it will
perform a proper shutdown by sending a "close notify" alert to the
server.  This allows s_time to benchmark a full TLS connection
more accurately.

Introduce a new flag called -no_shutdown to make s_time adopt the
previous behavior (i.e. shut down the connection without notifying the
server) so that comparisons can still be made with OpenSSL's version.

The idea of using a flag (which replaces a #define) was suggested by
bcook@@.  Thanks to millert@@ and miod@@ as well for their feedback on an
earlier diff which resulted in this change.

ok bcook@@ beck@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.19 2015/08/11 05:01:03 landry Exp $
d115 1
a115 1
.Dd $Mdocdate: August 11 2015 $
d7140 1
a7140 1
Shutdown the connection without sending a
@


1.19
log
@Improve openssl s_client -starttls xmpp support.

From https://rt.openssl.org/Ticket/Display.html?id=2860&user=guest&pass=guest
- add a -xmpphost option to specify the xmpp virtual host
- fix an infinite loop when the vhost isnt what the server expects
- fix communication with openfire & prosody servers

with tweaks & ok bcook@@ doug@@ manpage bits jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.18 2015/08/02 12:43:44 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 2 2015 $
d7077 1
d7139 4
@


1.18
log
@remove ssl3 bits; ok doug
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.17 2015/07/27 17:28:39 sobrado Exp $
d115 1
a115 1
.Dd $Mdocdate: July 27 2015 $
d6490 1
d6679 7
@


1.17
log
@use file system path (.Pa) semantic markup macros where appropriate.

ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.16 2015/07/08 16:37:25 sthen Exp $
d115 1
a115 1
.Dd $Mdocdate: July 8 2015 $
d1417 1
a1417 1
.Op Fl ssl3 | tls1
a1430 2
.It Fl ssl3
Only include SSL v3 ciphers.
d1439 1
a1439 2
List ciphers with a complete description of protocol version
.Pq SSLv3, which includes TLS ,
d1444 1
a1444 2
option, ciphers may seem to appear twice in a cipher list;
this is when similar ciphers are available for SSL v3/TLS v1.
d1467 1
a1467 3
represents all cipher suites using the digest algorithm SHA1, and
.Em SSLv3
represents all SSL v3 algorithms.
d1575 2
a1576 2
.It Ar TLSv1 , SSLv3
TLS v1.0 or SSL v3.0 cipher suites, respectively.
a5144 2
.Cm sslv3
for SSLv3 padding;
a6469 1
.Op Fl no_ssl3
a6483 1
.Op Fl ssl3
d6592 1
a6592 4
.It Xo
.Fl no_ssl3 | no_tls1 | no_tls1_1 | no_tls1_2 |
.Fl ssl3 | tls1
.Xc
d6707 1
a6707 1
.Fl bugs , ssl3 , tls1 , no_ssl3 , no_tls1 , no_tls1_1 ,
a6710 5
In particular these options should be tried
.Em before
submitting a bug report to an
.Nm OpenSSL
mailing list.
a6785 1
.Op Fl no_ssl3
a6794 1
.Op Fl ssl3
d6935 1
a6935 4
.It Xo
.Fl no_ssl3 | no_tls1 | no_tls1_1 | no_tls1_2 |
.Fl ssl3 | tls1
.Xc
a7069 1
.Op Fl ssl3
a7138 15
.It Fl ssl3
This option disables the use of certain SSL or TLS protocols.
By default, the initial handshake uses a method
which should be compatible with all servers and permit them to use
SSL v3 or TLS as appropriate.
The timing program is not as rich in options to turn protocols on and off as
the
.Nm s_client
program and may not connect to all servers.
.Pp
Unfortunately there are a lot of ancient and broken servers in use which
cannot handle this technique and will fail to connect.
Some servers only work if TLS is turned off with the
.Fl ssl3
option.
d7174 1
a7174 1
	-CAfile yourfile.pem -cipher commoncipher [-ssl3]
d7188 1
a7188 6
and
.Fl ssl3
options can be tried in case it is a buggy server.
In particular you should play with these options
.Em before
submitting a bug report to an OpenSSL mailing list.
d7317 1
a7317 1
This is the protocol in use: TLSv1 or SSLv3.
@


1.16
log
@switch "openssl dhparam" default from 512 to 2048 bits, ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.15 2015/06/20 01:07:25 doug Exp $
d115 1
a115 1
.Dd $Mdocdate: June 20 2015 $
d10180 1
a10180 1
.It /etc/ssl/
d10183 1
a10183 1
.It /etc/ssl/lib/
d10185 1
a10185 1
.It /etc/ssl/private/
d10187 1
a10187 1
.It /etc/ssl/openssl.cnf
d10190 1
a10190 1
.It /etc/ssl/x509v3.cnf
@


1.15
log
@Remove obsolete MDC-2DES from libcrypto.

ok deraadt@@ jsing@@ miod@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.14 2015/06/18 11:38:41 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: June 18 2015 $
d2046 1
a2046 1
If not present, a value of 512 is used.
@


1.14
log
@spelling fixes from theo buehler;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.13 2015/02/28 21:51:56 bentley Exp $
d115 1
a115 1
.Dd $Mdocdate: February 28 2015 $
a391 2
.It Cm mdc2
MDC-2 digest.
d1815 1
a1815 1
.Fl md4 | md5 | mdc2 | ripemd160 | sha | sha1 |
d1839 1
a1839 1
.Cm md4 | md5 | mdc2 | ripemd160 | sha | sha1 |
@


1.13
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.12 2015/02/15 22:26:45 bentley Exp $
d115 1
a115 1
.Dd $Mdocdate: February 15 2015 $
d5512 1
a5512 1
command or an X.509 certificate for a key with approriate algorithm.
d7502 1
a7502 1
The reamaining options are as follows:
@


1.12
log
@Use "In" to mark up include files, instead of wrongly wrapping with Aq.

Aq is not the same as <> in non-ASCII situations, so this caused
incorrect output in some places. And it provided no semantics besides.

ok schwarze@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.11 2015/01/13 14:09:54 bluhm Exp $
d115 1
a115 1
.Dd $Mdocdate: January 13 2015 $
d128 5
a132 5
.Cm list-standard-commands \*(Ba
.Cm list-message-digest-commands \*(Ba
.Cm list-cipher-commands \*(Ba
.Cm list-cipher-algorithms \*(Ba
.Cm list-message-digest-algorithms \*(Ba
@


1.11
log
@Document the openssl s_client -proxy feature.
OK jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.10 2015/01/05 03:54:55 lteo Exp $
d115 1
a115 1
.Dd $Mdocdate: January 5 2015 $
d9011 1
a9011 1
.Aq Pa openssl/x509_vfy.h .
@


1.10
log
@Zap a reference to .rnd, which is likely the last RANDFILE remnant on
this man page.

ok jsing@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.9 2014/12/24 03:22:17 lteo Exp $
d115 1
a115 1
.Dd $Mdocdate: December 24 2014 $
d6488 1
d6632 11
@


1.9
log
@Clean up CIPHERS and related sections:

- Sync cipher strings with the ones that are actually implemented.

- Remove CIPHERS SUITE NAMES (the actual cipher suites can be obtained
  via "openssl ciphers -v"), CIPHERS NOTES, and CIPHERS HISTORY
  sections.

- Stop mentioning export cipher suites since they have already been
  removed.

feedback from deraadt@@ and jmc@@
ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.8 2014/12/19 03:58:02 lteo Exp $
d115 1
a115 1
.Dd $Mdocdate: December 19 2014 $
a1310 1
\&./demoCA/.rnd                  - CA random seed information
@


1.8
log
@CA.sh and CA.pl are gone
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.7 2014/12/19 03:14:19 lteo Exp $
d1447 1
a1447 3
any key size restrictions and whether the algorithm is classed as an
.Em export
cipher.
d1563 1
a1563 6
algorithms, but excluding export cipher suites.
.It Ar EXP , EXPORT
Export encryption algorithms.
Including 40- and 56-bit algorithms.
.It Ar EXPORT40
40-bit export encryption algorithms.
d1599 6
a1604 2
.It Ar RC2
Cipher suites using RC2.
a1609 125
.Sh CIPHERS SUITE NAMES
The following lists give the SSL or TLS cipher suites names from the
relevant specification and their
.Nm OpenSSL
equivalents.
It should be noted that several cipher suite names do not include the
authentication used, e.g. DES-CBC3-SHA.
In these cases, RSA authentication is used.
.Ss SSL v3.0 cipher suites
.Bd -unfilled -offset indent
SSL_RSA_WITH_NULL_MD5                   NULL-MD5
SSL_RSA_WITH_NULL_SHA                   NULL-SHA
SSL_RSA_EXPORT_WITH_RC4_40_MD5          EXP-RC4-MD5
SSL_RSA_WITH_RC4_128_MD5                RC4-MD5
SSL_RSA_WITH_RC4_128_SHA                RC4-SHA
SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5      EXP-RC2-CBC-MD5
SSL_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA
SSL_RSA_EXPORT_WITH_DES40_CBC_SHA       EXP-DES-CBC-SHA
SSL_RSA_WITH_DES_CBC_SHA                DES-CBC-SHA
SSL_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA

SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
SSL_DH_DSS_WITH_DES_CBC_SHA             Not implemented.
SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.
SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
SSL_DH_RSA_WITH_DES_CBC_SHA             Not implemented.
SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.
SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-DSS-DES-CBC-SHA
SSL_DHE_DSS_WITH_DES_CBC_SHA            EDH-DSS-CBC-SHA
SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA       EDH-DSS-DES-CBC3-SHA
SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-RSA-DES-CBC-SHA
SSL_DHE_RSA_WITH_DES_CBC_SHA            EDH-RSA-DES-CBC-SHA
SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA       EDH-RSA-DES-CBC3-SHA

SSL_DH_anon_EXPORT_WITH_RC4_40_MD5      EXP-ADH-RC4-MD5
SSL_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5
SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA   EXP-ADH-DES-CBC-SHA
SSL_DH_anon_WITH_DES_CBC_SHA            ADH-DES-CBC-SHA
SSL_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA

SSL_FORTEZZA_KEA_WITH_NULL_SHA          Not implemented.
SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA  Not implemented.
SSL_FORTEZZA_KEA_WITH_RC4_128_SHA       Not implemented.
.Ed
.Ss TLS v1.0 cipher suites
.Bd -unfilled -offset indent
TLS_RSA_WITH_NULL_MD5                   NULL-MD5
TLS_RSA_WITH_NULL_SHA                   NULL-SHA
TLS_RSA_EXPORT_WITH_RC4_40_MD5          EXP-RC4-MD5
TLS_RSA_WITH_RC4_128_MD5                RC4-MD5
TLS_RSA_WITH_RC4_128_SHA                RC4-SHA
TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5      EXP-RC2-CBC-MD5
TLS_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA
TLS_RSA_EXPORT_WITH_DES40_CBC_SHA       EXP-DES-CBC-SHA
TLS_RSA_WITH_DES_CBC_SHA                DES-CBC-SHA
TLS_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA

TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
TLS_DH_DSS_WITH_DES_CBC_SHA             Not implemented.
TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.
TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
TLS_DH_RSA_WITH_DES_CBC_SHA             Not implemented.
TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.
TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-DSS-DES-CBC-SHA
TLS_DHE_DSS_WITH_DES_CBC_SHA            EDH-DSS-CBC-SHA
TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA       EDH-DSS-DES-CBC3-SHA
TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-RSA-DES-CBC-SHA
TLS_DHE_RSA_WITH_DES_CBC_SHA            EDH-RSA-DES-CBC-SHA
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA       EDH-RSA-DES-CBC3-SHA

TLS_DH_anon_EXPORT_WITH_RC4_40_MD5      EXP-ADH-RC4-MD5
TLS_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5
TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA   EXP-ADH-DES-CBC-SHA
TLS_DH_anon_WITH_DES_CBC_SHA            ADH-DES-CBC-SHA
TLS_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA
.Ed
.Ss AES ciphersuites from RFC 3268, extending TLS v1.0
.Bd -unfilled -offset indent
TLS_RSA_WITH_AES_128_CBC_SHA            AES128-SHA
TLS_RSA_WITH_AES_256_CBC_SHA            AES256-SHA

TLS_DH_DSS_WITH_AES_128_CBC_SHA         Not implemented.
TLS_DH_DSS_WITH_AES_256_CBC_SHA         Not implemented.
TLS_DH_RSA_WITH_AES_128_CBC_SHA         Not implemented.
TLS_DH_RSA_WITH_AES_256_CBC_SHA         Not implemented.

TLS_DHE_DSS_WITH_AES_128_CBC_SHA        DHE-DSS-AES128-SHA
TLS_DHE_DSS_WITH_AES_256_CBC_SHA        DHE-DSS-AES256-SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA        DHE-RSA-AES128-SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA        DHE-RSA-AES256-SHA

TLS_DH_anon_WITH_AES_128_CBC_SHA        ADH-AES128-SHA
TLS_DH_anon_WITH_AES_256_CBC_SHA        ADH-AES256-SHA
.Ed
.Ss GOST ciphersuites from draft-chudov-cryptopro-cptls, extending TLS v1.0
.Sy Note :
These ciphers require an engine which includes GOST cryptographic
algorithms, such as the
.Dq ccgost
engine, included in the OpenSSL distribution.
.Bd -unfilled -offset indent
TLS_GOSTR341094_WITH_28147_CNT_IMIT	GOST94-GOST89-GOST89
TLS_GOSTR341001_WITH_28147_CNT_IMIT	GOST2001-GOST89-GOST89
TLS_GOSTR341094_WITH_NULL_GOSTR3411	GOST94-NULL-GOST94
TLS_GOSTR341001_WITH_NULL_GOSTR3411	GOST2001-NULL-GOST94
.Ed
.Ss Additional Export 1024 and other cipher suites
.Sy Note :
These ciphers can also be used in SSL v3.
.Bd -unfilled -offset indent
TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA     EXP1024-DES-CBC-SHA
TLS_RSA_EXPORT1024_WITH_RC4_56_SHA      EXP1024-RC4-SHA
TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA EXP1024-DHE-DSS-DES-CBC-SHA
TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA  EXP1024-DHE-DSS-RC4-SHA
TLS_DHE_DSS_WITH_RC4_128_SHA            DHE-DSS-RC4-SHA
.Ed
.Sh CIPHERS NOTES
The non-ephemeral DH modes are currently unimplemented in
.Nm OpenSSL
because there is no support for DH certificates.
.Pp
Some compiled versions of
.Nm OpenSSL
may not include all the ciphers
listed here because some ciphers were excluded at compile time.
a1633 16
.Sh CIPHERS HISTORY
The
.Ar COMPLEMENTOFALL
and
.Ar COMPLEMENTOFDEFAULT
selection options were added in
.Nm OpenSSL
0.9.7.
.Pp
The
.Fl V
option of the
.Nm ciphers
command was added in
.Nm OpenSSL
1.0.0.
@


1.7
log
@Sync message digest algorithms with the ones actually implemented in
"openssl dgst".

feedback/ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.6 2014/11/23 04:49:46 guenther Exp $
d115 1
a115 1
.Dd $Mdocdate: November 23 2014 $
a1345 5
The scripts
.Nm CA.sh
and
.Nm CA.pl
help a little but not very much.
@


1.6
log
@Mention the -no_tls1_[12] options
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.5 2014/11/07 13:13:08 jsing Exp $
d115 1
a115 1
.Dd $Mdocdate: November 7 2014 $
d379 9
a387 3
.Bl -tag -width "asn1parse"
.It Cm md2
MD2 digest.
d392 2
d400 10
d1966 3
a1968 2
.Fl dss1 | md2 | md4 | md5 |
.Fl ripemd160 | sha | sha1
d1990 3
a1992 2
.Cm md2 | md4 | md5 |
.Cm ripemd160 | sha | sha1
@


1.5
log
@Document the -servername option for openssl(1) s_client.

Based on a diff from Rusty (rustyl at outband dot net) and OpenSSL.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.4 2014/10/01 13:15:40 sthen Exp $
d115 1
a115 1
.Dd $Mdocdate: October 1 2014 $
d6613 2
d6734 1
a6734 1
.Fl no_ssl3 | no_tls1 |
d6840 1
a6840 1
.Fl bugs , ssl3 , tls1 , no_ssl3 ,
d6842 1
a6842 1
.Fl no_tls1
d6926 2
d7076 1
a7076 1
.Fl no_ssl3 | no_tls1 |
@


1.4
log
@Switch "openssl req" to using SHA256 for hashes and AES256 to encrypt on-disk
keys by default (instead of SHA1/3DES) and update documentation to match.

Another way to do this is s/NID_sha1/NID_sha256/ in src/crypto/rsa/rsa_ameth.c
("case ASN1_PKEY_CTRL_DEFAULT_MD_NID") but going with the more targetted method
above that only affects "openssl req" for now.

Help/OK jsing@@. OKs on earlier diffs changing openssl.cnf from phessler@@ aja@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.3 2014/09/16 16:05:44 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 16 2014 $
d6620 1
d6777 4
@


1.3
log
@a little less sendmail specific;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.2 2014/08/26 20:03:31 robert Exp $
d115 1
a115 1
.Dd $Mdocdate: August 26 2014 $
d5586 1
a5586 1
.It Fl md4 | md5 | sha1
d5777 1
a5777 1
If not specified, 512 is used.
d5793 2
a5794 1
.Ar md5
d5796 2
a5797 2
.Ar sha1 .
If not present, MD5 is used.
@


1.2
log
@remove nginx references
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.1 2014/08/26 17:47:24 jsing Exp $
d7851 1
a7851 1
Piping the mail directly to sendmail is one way to
a10308 1
.Xr sendmail 8 ,
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.99 2014/07/22 06:47:13 guenther Exp $
d115 1
a115 1
.Dd $Mdocdate: July 22 2014 $
a10308 1
.Xr nginx 8 ,
@

