head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.2
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2017.01.20.08.57.12;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	dLXg6G5zkTXfsv25;

1.8
date	2015.10.17.15.00.11;	author doug;	state Exp;
branches;
next	1.7;
commitid	eAF5hlziO0omr4Cj;

1.7
date	2015.10.17.07.51.10;	author semarie;	state Exp;
branches;
next	1.6;
commitid	sUU1X3HBhu9tnHPd;

1.6
date	2015.10.10.22.28.51;	author doug;	state Exp;
branches;
next	1.5;
commitid	7Pr412xEOoY2KZOT;

1.5
date	2015.09.11.14.30.23;	author bcook;	state Exp;
branches;
next	1.4;
commitid	erFqA80i5nzJClSk;

1.4
date	2015.08.19.18.25.31;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mhJdagBRVnDGkLkQ;

1.3
date	2015.01.08.11.08.50;	author doug;	state Exp;
branches;
next	1.2;
commitid	rOAINTZufDEZO07W;

1.2
date	2014.08.28.14.23.52;	author jsing;	state Exp;
branches;
next	1.1;
commitid	sL7NDHJPBg4hmfYx;

1.1
date	2014.08.26.17.47.25;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.9
log
@rearrange pledge promises into the canonical order; easier to eyeball
@
text
@/* $OpenBSD: spkac.c,v 1.8 2015/10/17 15:00:11 doug Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999. Based on an original idea by Massimiliano Pala
 * (madwolf@@openca.org).
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "apps.h"
#include "progs.h"

#include <openssl/bio.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/lhash.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

static struct {
	char *challenge;
	char *infile;
	char *keyfile;
	int noout;
	char *outfile;
	char *passargin;
	int pubkey;
	char *spkac;
	char *spksect;
	int verify;
} spkac_config;

static struct option spkac_options[] = {
	{
		.name = "challenge",
		.argname = "string",
		.desc = "Specify challenge string if SPKAC is generated",
		.type = OPTION_ARG,
		.opt.arg = &spkac_config.challenge,
	},
	{
		.name = "in",
		.argname = "file",
		.desc = "Input file (default stdin)",
		.type = OPTION_ARG,
		.opt.arg = &spkac_config.infile,
	},
	{
		.name = "key",
		.argname = "file",
		.desc = "Create SPKAC using private key file",
		.type = OPTION_ARG,
		.opt.arg = &spkac_config.keyfile,
	},
	{
		.name = "noout",
		.desc = "Do not print text version of SPKAC",
		.type = OPTION_FLAG,
		.opt.flag = &spkac_config.noout,
	},
	{
		.name = "out",
		.argname = "file",
		.desc = "Output file (default stdout)",
		.type = OPTION_ARG,
		.opt.arg = &spkac_config.outfile,
	},
	{
		.name = "passin",
		.argname = "src",
		.desc = "Input file passphrase source",
		.type = OPTION_ARG,
		.opt.arg = &spkac_config.passargin,
	},
	{
		.name = "pubkey",
		.desc = "Output public key of an SPKAC (not used if creating)",
		.type = OPTION_FLAG,
		.opt.flag = &spkac_config.pubkey,
	},
	{
		.name = "spkac",
		.argname = "name",
		.desc = "SPKAC name (default \"SPKAC\")",
		.type = OPTION_ARG,
		.opt.arg = &spkac_config.spkac,
	},
	{
		.name = "spksect",
		.argname = "name",
		.desc = "Name of the section containing SPKAC (default"
		" \"default\")",
		.type = OPTION_ARG,
		.opt.arg = &spkac_config.spksect,
	},
	{
		.name = "verify",
		.desc = "Verify digital signature on supplied SPKAC",
		.type = OPTION_FLAG,
		.opt.flag = &spkac_config.verify,
	},
	{ NULL }
};

static void
spkac_usage(void)
{
	fprintf(stderr,
	    "usage: spkac [-challenge string] [-in file] "
	    "[-key file] [-noout]\n"
	    "    [-out file] [-passin src] [-pubkey] [-spkac name] "
	    "[-spksect section]\n"
	    "    [-verify]\n\n");
	options_usage(spkac_options);
}

int
spkac_main(int argc, char **argv)
{
	int i, ret = 1;
	BIO *in = NULL, *out = NULL;
	char *passin = NULL;
	char *spkstr = NULL;
	CONF *conf = NULL;
	NETSCAPE_SPKI *spki = NULL;
	EVP_PKEY *pkey = NULL;

	if (single_execution) {
		if (pledge("stdio cpath wpath rpath tty", NULL) == -1) {
			perror("pledge");
			exit(1);
		}
	}

	memset(&spkac_config, 0, sizeof(spkac_config));
	spkac_config.spkac = "SPKAC";
	spkac_config.spksect = "default";

	if (options_parse(argc, argv, spkac_options, NULL, NULL) != 0) {
		spkac_usage();
		return (1);
	}

	if (!app_passwd(bio_err, spkac_config.passargin, NULL, &passin, NULL)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto end;
	}

	if (spkac_config.keyfile) {
		pkey = load_key(bio_err,
		    strcmp(spkac_config.keyfile, "-") ? spkac_config.keyfile
		    : NULL, FORMAT_PEM, 1, passin, "private key");
		if (!pkey) {
			goto end;
		}
		spki = NETSCAPE_SPKI_new();
		if (spkac_config.challenge)
			ASN1_STRING_set(spki->spkac->challenge,
			    spkac_config.challenge,
			    (int) strlen(spkac_config.challenge));
		NETSCAPE_SPKI_set_pubkey(spki, pkey);
		NETSCAPE_SPKI_sign(spki, pkey, EVP_md5());
		spkstr = NETSCAPE_SPKI_b64_encode(spki);
		if (spkstr == NULL) {
			BIO_printf(bio_err, "Error encoding SPKAC\n");
			ERR_print_errors(bio_err);
			goto end;
		}

		if (spkac_config.outfile)
			out = BIO_new_file(spkac_config.outfile, "w");
		else
			out = BIO_new_fp(stdout, BIO_NOCLOSE);

		if (!out) {
			BIO_printf(bio_err, "Error opening output file\n");
			ERR_print_errors(bio_err);
		} else {
			BIO_printf(out, "SPKAC=%s\n", spkstr);
			ret = 0;
		}
		free(spkstr);
		goto end;
	}
	if (spkac_config.infile)
		in = BIO_new_file(spkac_config.infile, "r");
	else
		in = BIO_new_fp(stdin, BIO_NOCLOSE);

	if (!in) {
		BIO_printf(bio_err, "Error opening input file\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	conf = NCONF_new(NULL);
	i = NCONF_load_bio(conf, in, NULL);

	if (!i) {
		BIO_printf(bio_err, "Error parsing config file\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	spkstr = NCONF_get_string(conf, spkac_config.spksect,
	    spkac_config.spkac);

	if (!spkstr) {
		BIO_printf(bio_err, "Can't find SPKAC called \"%s\"\n",
		    spkac_config.spkac);
		ERR_print_errors(bio_err);
		goto end;
	}
	spki = NETSCAPE_SPKI_b64_decode(spkstr, -1);

	if (!spki) {
		BIO_printf(bio_err, "Error loading SPKAC\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (spkac_config.outfile)
		out = BIO_new_file(spkac_config.outfile, "w");
	else {
		out = BIO_new_fp(stdout, BIO_NOCLOSE);
	}

	if (!out) {
		BIO_printf(bio_err, "Error opening output file\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (!spkac_config.noout)
		NETSCAPE_SPKI_print(out, spki);
	pkey = NETSCAPE_SPKI_get_pubkey(spki);
	if (spkac_config.verify) {
		i = NETSCAPE_SPKI_verify(spki, pkey);
		if (i > 0)
			BIO_printf(bio_err, "Signature OK\n");
		else {
			BIO_printf(bio_err, "Signature Failure\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if (spkac_config.pubkey)
		PEM_write_bio_PUBKEY(out, pkey);

	ret = 0;

end:
	NCONF_free(conf);
	NETSCAPE_SPKI_free(spki);
	BIO_free(in);
	BIO_free_all(out);
	EVP_PKEY_free(pkey);
	free(passin);

	return (ret);
}
@


1.8
log
@Exit if a pledge call fails in non-interactive mode.

ok semarie@@
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.7 2015/10/17 07:51:10 semarie Exp $ */
d185 1
a185 1
		if (pledge("stdio rpath wpath cpath tty", NULL) == -1) {
@


1.7
log
@add "tty" for several subcommands of openssl

it is needed in order to let libssl UI_* function plays with echo on/off when
asking for password on terminal.

passwd subcommand needs additionnal "wpath cpath" in order to let it calls
fopen("/dev/tty", "w") (O_WRONLY with O_CREAT | O_TRUNC).

problem reported by several
with and ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.6 2015/10/10 22:28:51 doug Exp $ */
d185 1
a185 1
		if (pledge("stdio rpath wpath cpath tty", NULL) == -1)
d187 2
@


1.6
log
@Initial support for pledges in openssl(1) commands.

openssl(1) has two mechanisms for operating: either a single execution
of one command (looking at argv[0] or argv[1]) or as an interactive
session than may execute any number of commands.

We already have a top level pledge that should cover all commands
and that's what interactive mode must continue using.  However, we can
tighten up the pledges when only executing one command.

This is an initial stab at support and may contain regressions.  Most
commands only need "stdio rpath wpath cpath".  The pledges could be
further restricted by evaluating the situation after parsing options.

deraadt@@ and beck@@ are roughly fine with this approach.
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.5 2015/09/11 14:30:23 bcook Exp $ */
d185 1
a185 1
		if (pledge("stdio rpath wpath cpath", NULL) == -1)
@


1.5
log
@Remove engine command and parameters from openssl(1).

We do not have any builtin or dynamic engines, meaning openssl(1) has
no way to use the engine command or parameters at all.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.4 2015/08/19 18:25:31 deraadt Exp $ */
d183 5
@


1.4
log
@bring prototypes into scope, requires movement of a large global object
out of .h file
ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.3 2015/01/08 11:08:50 doug Exp $ */
a77 3
#ifndef OPENSSL_NO_ENGINE
	char *engine;
#endif
a96 9
#ifndef OPENSSL_NO_ENGINE
	{
		.name = "engine",
		.argname = "id",
		.desc = "Use the engine specified by the given identifier",
		.type = OPTION_ARG,
		.opt.arg = &spkac_config.engine,
	},
#endif
d165 1
a165 1
	    "usage: spkac [-challenge string] [-engine id] [-in file] "
a175 1
	ENGINE *e = NULL;
a196 3
#ifndef OPENSSL_NO_ENGINE
	e = setup_engine(bio_err, spkac_config.engine, 0);
#endif
d201 1
a201 1
		    : NULL, FORMAT_PEM, 1, passin, e, "private key");
@


1.3
log
@Convert spkac.c to the new option handling code.

input + ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.2 2014/08/28 14:23:52 jsing Exp $ */
d66 1
@


1.2
log
@openssl_setup() calls SSL_load_error_strings(), which happens to call
ERR_load_crypto_strings() - as such, we do not need to call the same
function from most of the applications.
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.1 2014/08/26 17:47:25 jsing Exp $ */
d75 96
a170 3
/* -in arg	- input file - default stdin
 * -out arg	- output file - default stdout
 */
d172 11
a182 1
int spkac_main(int, char **);
d188 1
a188 1
	int i, badops = 0, ret = 1;
d190 1
a190 4
	int verify = 0, noout = 0, pubkey = 0;
	char *infile = NULL, *outfile = NULL, *prog;
	char *passargin = NULL, *passin = NULL;
	const char *spkac = "SPKAC", *spksect = "default";
a191 1
	char *challenge = NULL, *keyfile = NULL;
a194 3
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
d196 3
a198 51
	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-passin") == 0) {
			if (--argc < 1)
				goto bad;
			passargin = *(++argv);
		} else if (strcmp(*argv, "-key") == 0) {
			if (--argc < 1)
				goto bad;
			keyfile = *(++argv);
		} else if (strcmp(*argv, "-challenge") == 0) {
			if (--argc < 1)
				goto bad;
			challenge = *(++argv);
		} else if (strcmp(*argv, "-spkac") == 0) {
			if (--argc < 1)
				goto bad;
			spkac = *(++argv);
		} else if (strcmp(*argv, "-spksect") == 0) {
			if (--argc < 1)
				goto bad;
			spksect = *(++argv);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
		else if (strcmp(*argv, "-noout") == 0)
			noout = 1;
		else if (strcmp(*argv, "-pubkey") == 0)
			pubkey = 1;
		else if (strcmp(*argv, "-verify") == 0)
			verify = 1;
		else
			badops = 1;
		argc--;
		argv++;
	}
d200 3
a202 17
	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options]\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -in arg        input file\n");
		BIO_printf(bio_err, " -out arg       output file\n");
		BIO_printf(bio_err, " -key arg       create SPKAC using private key\n");
		BIO_printf(bio_err, " -passin arg    input file pass phrase source\n");
		BIO_printf(bio_err, " -challenge arg challenge string\n");
		BIO_printf(bio_err, " -spkac arg     alternative SPKAC name\n");
		BIO_printf(bio_err, " -noout         don't print SPKAC\n");
		BIO_printf(bio_err, " -pubkey        output public key\n");
		BIO_printf(bio_err, " -verify        verify SPKAC signature\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e      use engine e, possibly a hardware device.\n");
#endif
		goto end;
d205 1
a205 1
	if (!app_passwd(bio_err, passargin, NULL, &passin, NULL)) {
d210 1
a210 1
	e = setup_engine(bio_err, engine, 0);
d213 1
a213 1
	if (keyfile) {
d215 2
a216 2
		    strcmp(keyfile, "-") ? keyfile : NULL,
		    FORMAT_PEM, 1, passin, e, "private key");
d221 1
a221 1
		if (challenge)
d223 2
a224 1
			    challenge, (int) strlen(challenge));
d234 2
a235 2
		if (outfile)
			out = BIO_new_file(outfile, "w");
d249 2
a250 2
	if (infile)
		in = BIO_new_file(infile, "r");
d267 2
a268 1
	spkstr = NCONF_get_string(conf, spksect, spkac);
d271 2
a272 1
		BIO_printf(bio_err, "Can't find SPKAC called \"%s\"\n", spkac);
d283 2
a284 2
	if (outfile)
		out = BIO_new_file(outfile, "w");
d294 1
a294 1
	if (!noout)
d297 1
a297 1
	if (verify) {
d307 1
a307 1
	if (pubkey)
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.22 2014/07/22 06:55:22 guenther Exp $ */
d170 1
a170 1
	ERR_load_crypto_strings();
@

