head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.12
date	2017.01.20.08.57.12;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	dLXg6G5zkTXfsv25;

1.11
date	2016.04.07.20.02.19;	author jmc;	state Exp;
branches;
next	1.10;
commitid	0JH0haVH7ZerOYAP;

1.10
date	2015.10.17.15.00.11;	author doug;	state Exp;
branches;
next	1.9;
commitid	eAF5hlziO0omr4Cj;

1.9
date	2015.10.17.07.51.10;	author semarie;	state Exp;
branches;
next	1.8;
commitid	sUU1X3HBhu9tnHPd;

1.8
date	2015.10.10.22.28.51;	author doug;	state Exp;
branches;
next	1.7;
commitid	7Pr412xEOoY2KZOT;

1.7
date	2015.09.11.14.30.23;	author bcook;	state Exp;
branches;
next	1.6;
commitid	erFqA80i5nzJClSk;

1.6
date	2015.09.10.16.01.06;	author jsing;	state Exp;
branches;
next	1.5;
commitid	Qv7GqMVxrXYB46ZP;

1.5
date	2015.08.22.16.36.05;	author jsing;	state Exp;
branches;
next	1.4;
commitid	FOQ5PgwxGR8cjJ8X;

1.4
date	2015.01.01.13.55.03;	author jsing;	state Exp;
branches;
next	1.3;
commitid	wni6pWnMFpdvPO1h;

1.3
date	2014.10.22.13.54.03;	author jsing;	state Exp;
branches;
next	1.2;
commitid	VOyRkhPKDfAzH2Fv;

1.2
date	2014.09.01.20.54.37;	author doug;	state Exp;
branches;
next	1.1;
commitid	dBAy3m0UnXOh0qIH;

1.1
date	2014.08.26.17.47.24;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.12
log
@rearrange pledge promises into the canonical order; easier to eyeball
@
text
@/* $OpenBSD: enc.c,v 1.11 2016/04/07 20:02:19 jmc Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/comp.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

int set_hex(char *in, unsigned char *out, int size);

#define SIZE	(512)
#define BSIZE	(8*1024)

static struct {
	int base64;
	char *bufsize;
	const EVP_CIPHER *cipher;
	int debug;
#ifdef ZLIB
	int do_zlib;
#endif
	int enc;
	char *hiv;
	char *hkey;
	char *hsalt;
	char *inf;
	char *keyfile;
	char *keystr;
	char *md;
	int nopad;
	int nosalt;
	int olb64;
	char *outf;
	char *passarg;
	int printkey;
	int verbose;
} enc_config;

static int
enc_opt_cipher(int argc, char **argv, int *argsused)
{
	char *name = argv[0];

	if (*name++ != '-')
		return (1);

	if (strcmp(name, "none") == 0) {
		enc_config.cipher = NULL;
		*argsused = 1;
		return (0);
	}

	if ((enc_config.cipher = EVP_get_cipherbyname(name)) != NULL) {
		*argsused = 1;
		return (0);
	}

	return (1);
}

static struct option enc_options[] = {
	{
		.name = "A",
		.desc = "Process base64 data on one line (requires -a)",
		.type = OPTION_FLAG,
		.opt.flag = &enc_config.olb64,
	},
	{
		.name = "a",
		.desc = "Perform base64 encoding/decoding (alias -base64)",
		.type = OPTION_FLAG,
		.opt.flag = &enc_config.base64,
	},
	{
		.name = "base64",
		.type = OPTION_FLAG,
		.opt.flag = &enc_config.base64,
	},
	{
		.name = "bufsize",
		.argname = "size",
		.desc = "Specify the buffer size to use for I/O",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.bufsize,
	},
	{
		.name = "d",
		.desc = "Decrypt the input data",
		.type = OPTION_VALUE,
		.opt.value = &enc_config.enc,
		.value = 0,
	},
	{
		.name = "debug",
		.desc = "Print debugging information",
		.type = OPTION_FLAG,
		.opt.flag = &enc_config.debug,
	},
	{
		.name = "e",
		.desc = "Encrypt the input data (default)",
		.type = OPTION_VALUE,
		.opt.value = &enc_config.enc,
		.value = 1,
	},
	{
		.name = "in",
		.argname = "file",
		.desc = "Input file to read from (default stdin)",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.inf,
	},
	{
		.name = "iv",
		.argname = "IV",
		.desc = "IV to use, specified as a hexadecimal string",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.hiv,
	},
	{
		.name = "K",
		.argname = "key",
		.desc = "Key to use, specified as a hexadecimal string",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.hkey,
	},
	{
		.name = "k",		/* Superseded by -pass. */
		.type = OPTION_ARG,
		.opt.arg = &enc_config.keystr,
	},
	{
		.name = "kfile",	/* Superseded by -pass. */
		.type = OPTION_ARG,
		.opt.arg = &enc_config.keyfile,
	},
	{
		.name = "md",
		.argname = "digest",
		.desc = "Digest to use to create a key from the passphrase",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.md,
	},
	{
		.name = "none",
		.desc = "Use NULL cipher (no encryption or decryption)",
		.type = OPTION_ARGV_FUNC,
		.opt.argvfunc = enc_opt_cipher,
	},
	{
		.name = "nopad",
		.desc = "Disable standard block padding",
		.type = OPTION_FLAG,
		.opt.flag = &enc_config.nopad,
	},
	{
		.name = "nosalt",
		.type = OPTION_VALUE,
		.opt.value = &enc_config.nosalt,
		.value = 1,
	},
	{
		.name = "out",
		.argname = "file",
		.desc = "Output file to write to (default stdout)",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.outf,
	},
	{
		.name = "P",
		.desc = "Print out the salt, key and IV used, then exit\n"
		    "  (no encryption or decryption is performed)",
		.type = OPTION_VALUE,
		.opt.value = &enc_config.printkey,
		.value = 2,
	},
	{
		.name = "p",
		.desc = "Print out the salt, key and IV used",
		.type = OPTION_VALUE,
		.opt.value = &enc_config.printkey,
		.value = 1,
	},
	{
		.name = "pass",
		.argname = "source",
		.desc = "Password source",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.passarg,
	},
	{
		.name = "S",
		.argname = "salt",
		.desc = "Salt to use, specified as a hexadecimal string",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.hsalt,
	},
	{
		.name = "salt",
		.desc = "Use a salt in the key derivation routines (default)",
		.type = OPTION_VALUE,
		.opt.value = &enc_config.nosalt,
		.value = 0,
	},
	{
		.name = "v",
		.desc = "Verbose",
		.type = OPTION_FLAG,
		.opt.flag = &enc_config.verbose,
	},
#ifdef ZLIB
	{
		.name = "z",
		.desc = "Perform zlib compression/decompression",
		.type = OPTION_FLAG,
		.opt.flag = &enc_config.do_zlib,
	},
#endif
	{
		.name = NULL,
		.type = OPTION_ARGV_FUNC,
		.opt.argvfunc = enc_opt_cipher,
	},
	{ NULL },
};

static void
show_ciphers(const OBJ_NAME *name, void *arg)
{
	static int n;

	if (!islower((unsigned char)*name->name))
		return;

	fprintf(stderr, " -%-24s%s", name->name, (++n % 3 ? "" : "\n"));
}

static void
enc_usage(void)
{
	fprintf(stderr, "usage: enc -ciphername [-AadePp] [-base64] "
	    "[-bufsize number] [-debug]\n"
	    "    [-in file] [-iv IV] [-K key] [-k password]\n"
	    "    [-kfile file] [-md digest] [-none] [-nopad] [-nosalt]\n"
	    "    [-out file] [-pass arg] [-S salt] [-salt]\n\n");
	options_usage(enc_options);
	fprintf(stderr, "\n");

	fprintf(stderr, "Valid ciphername values:\n\n");
	OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH, show_ciphers, NULL);
	fprintf(stderr, "\n");
}

int
enc_main(int argc, char **argv)
{
	static const char magic[] = "Salted__";
	char mbuf[sizeof magic - 1];
	char *strbuf = NULL, *pass = NULL;
	unsigned char *buff = NULL;
	int bsize = BSIZE;
	int ret = 1, inl;
	unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];
	unsigned char salt[PKCS5_SALT_LEN];
#ifdef ZLIB
	BIO *bzl = NULL;
#endif
	EVP_CIPHER_CTX *ctx = NULL;
	const EVP_MD *dgst = NULL;
	BIO *in = NULL, *out = NULL, *b64 = NULL, *benc = NULL;
	BIO *rbio = NULL, *wbio = NULL;
#define PROG_NAME_SIZE  39
	char pname[PROG_NAME_SIZE + 1];
	int i;

	if (single_execution) {
		if (pledge("stdio cpath wpath rpath tty", NULL) == -1) {
			perror("pledge");
			exit(1);
		}
	}

	memset(&enc_config, 0, sizeof(enc_config));
	enc_config.enc = 1;

	/* first check the program name */
	program_name(argv[0], pname, sizeof(pname));

	if (strcmp(pname, "base64") == 0)
		enc_config.base64 = 1;

#ifdef ZLIB
	if (strcmp(pname, "zlib") == 0)
		enc_config.do_zlib = 1;
#endif

	enc_config.cipher = EVP_get_cipherbyname(pname);

#ifdef ZLIB
	if (!enc_config.do_zlib && !enc_config.base64 &&
	    enc_config.cipher == NULL && strcmp(pname, "enc") != 0)
#else
	if (!enc_config.base64 && enc_config.cipher == NULL &&
	    strcmp(pname, "enc") != 0)
#endif
	{
		BIO_printf(bio_err, "%s is an unknown cipher\n", pname);
		goto end;
	}

	if (options_parse(argc, argv, enc_options, NULL, NULL) != 0) {
		enc_usage();
		goto end;
	}

	if (enc_config.keyfile != NULL) {
		static char buf[128];
		FILE *infile;

		infile = fopen(enc_config.keyfile, "r");
		if (infile == NULL) {
			BIO_printf(bio_err, "unable to read key from '%s'\n",
			    enc_config.keyfile);
			goto end;
		}
		buf[0] = '\0';
		if (!fgets(buf, sizeof buf, infile)) {
			BIO_printf(bio_err, "unable to read key from '%s'\n",
			    enc_config.keyfile);
			fclose(infile);
			goto end;
		}
		fclose(infile);
		i = strlen(buf);
		if ((i > 0) && ((buf[i - 1] == '\n') || (buf[i - 1] == '\r')))
			buf[--i] = '\0';
		if ((i > 0) && ((buf[i - 1] == '\n') || (buf[i - 1] == '\r')))
			buf[--i] = '\0';
		if (i < 1) {
			BIO_printf(bio_err, "zero length password\n");
			goto end;
		}
		enc_config.keystr = buf;
	}

	if (enc_config.md != NULL &&
	    (dgst = EVP_get_digestbyname(enc_config.md)) == NULL) {
		BIO_printf(bio_err,
		    "%s is an unsupported message digest type\n",
		    enc_config.md);
		goto end;
	}
	if (dgst == NULL) {
		dgst = EVP_md5();	/* XXX */
	}

	if (enc_config.bufsize != NULL) {
		char *p = enc_config.bufsize;
		unsigned long n;

		/* XXX - provide an OPTION_ARG_DISKUNIT. */
		for (n = 0; *p != '\0'; p++) {
			i = *p;
			if ((i <= '9') && (i >= '0'))
				n = n * 10 + i - '0';
			else if (i == 'k') {
				n *= 1024;
				p++;
				break;
			}
		}
		if (*p != '\0') {
			BIO_printf(bio_err, "invalid 'bufsize' specified.\n");
			goto end;
		}
		/* It must be large enough for a base64 encoded line. */
		if (enc_config.base64 && n < 80)
			n = 80;

		bsize = (int)n;
		if (enc_config.verbose)
			BIO_printf(bio_err, "bufsize=%d\n", bsize);
	}
	strbuf = malloc(SIZE);
	buff = malloc(EVP_ENCODE_LENGTH(bsize));
	if ((buff == NULL) || (strbuf == NULL)) {
		BIO_printf(bio_err, "malloc failure %ld\n", (long) EVP_ENCODE_LENGTH(bsize));
		goto end;
	}
	in = BIO_new(BIO_s_file());
	out = BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (enc_config.debug) {
		BIO_set_callback(in, BIO_debug_callback);
		BIO_set_callback(out, BIO_debug_callback);
		BIO_set_callback_arg(in, (char *) bio_err);
		BIO_set_callback_arg(out, (char *) bio_err);
	}
	if (enc_config.inf == NULL) {
		if (enc_config.bufsize != NULL)
			setvbuf(stdin, (char *) NULL, _IONBF, 0);
		BIO_set_fp(in, stdin, BIO_NOCLOSE);
	} else {
		if (BIO_read_filename(in, enc_config.inf) <= 0) {
			perror(enc_config.inf);
			goto end;
		}
	}

	if (!enc_config.keystr && enc_config.passarg) {
		if (!app_passwd(bio_err, enc_config.passarg, NULL,
		    &pass, NULL)) {
			BIO_printf(bio_err, "Error getting password\n");
			goto end;
		}
		enc_config.keystr = pass;
	}
	if (enc_config.keystr == NULL && enc_config.cipher != NULL &&
	    enc_config.hkey == NULL) {
		for (;;) {
			char buf[200];
			int retval;

			retval = snprintf(buf, sizeof buf,
			    "enter %s %s password:",
			    OBJ_nid2ln(EVP_CIPHER_nid(enc_config.cipher)),
			    enc_config.enc ? "encryption" : "decryption");
			if ((size_t)retval >= sizeof buf) {
				BIO_printf(bio_err,
				    "Password prompt too long\n");
				goto end;
			}
			strbuf[0] = '\0';
			i = EVP_read_pw_string((char *)strbuf, SIZE, buf,
			    enc_config.enc);
			if (i == 0) {
				if (strbuf[0] == '\0') {
					ret = 1;
					goto end;
				}
				enc_config.keystr = strbuf;
				break;
			}
			if (i < 0) {
				BIO_printf(bio_err, "bad password read\n");
				goto end;
			}
		}
	}
	if (enc_config.outf == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
		if (enc_config.bufsize != NULL)
			setvbuf(stdout, (char *)NULL, _IONBF, 0);
	} else {
		if (BIO_write_filename(out, enc_config.outf) <= 0) {
			perror(enc_config.outf);
			goto end;
		}
	}

	rbio = in;
	wbio = out;

#ifdef ZLIB
	if (do_zlib) {
		if ((bzl = BIO_new(BIO_f_zlib())) == NULL)
			goto end;
		if (enc)
			wbio = BIO_push(bzl, wbio);
		else
			rbio = BIO_push(bzl, rbio);
	}
#endif

	if (enc_config.base64) {
		if ((b64 = BIO_new(BIO_f_base64())) == NULL)
			goto end;
		if (enc_config.debug) {
			BIO_set_callback(b64, BIO_debug_callback);
			BIO_set_callback_arg(b64, (char *) bio_err);
		}
		if (enc_config.olb64)
			BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
		if (enc_config.enc)
			wbio = BIO_push(b64, wbio);
		else
			rbio = BIO_push(b64, rbio);
	}
	if (enc_config.cipher != NULL) {
		/*
		 * Note that keystr is NULL if a key was passed on the command
		 * line, so we get no salt in that case. Is this a bug?
		 */
		if (enc_config.keystr != NULL) {
			/*
			 * Salt handling: if encrypting generate a salt and
			 * write to output BIO. If decrypting read salt from
			 * input BIO.
			 */
			unsigned char *sptr;
			if (enc_config.nosalt)
				sptr = NULL;
			else {
				if (enc_config.enc) {
					if (enc_config.hsalt) {
						if (!set_hex(enc_config.hsalt, salt, sizeof salt)) {
							BIO_printf(bio_err,
							    "invalid hex salt value\n");
							goto end;
						}
					} else
						arc4random_buf(salt,
						    sizeof(salt));
					/*
					 * If -P option then don't bother
					 * writing
					 */
					if ((enc_config.printkey != 2)
					    && (BIO_write(wbio, magic,
						    sizeof magic - 1) != sizeof magic - 1
						|| BIO_write(wbio,
						    (char *) salt,
						    sizeof salt) != sizeof salt)) {
						BIO_printf(bio_err, "error writing output file\n");
						goto end;
					}
				} else if (BIO_read(rbio, mbuf, sizeof mbuf) != sizeof mbuf
					    || BIO_read(rbio,
						(unsigned char *) salt,
					sizeof salt) != sizeof salt) {
					BIO_printf(bio_err, "error reading input file\n");
					goto end;
				} else if (memcmp(mbuf, magic, sizeof magic - 1)) {
					BIO_printf(bio_err, "bad magic number\n");
					goto end;
				}
				sptr = salt;
			}

			EVP_BytesToKey(enc_config.cipher, dgst, sptr,
			    (unsigned char *)enc_config.keystr,
			    strlen(enc_config.keystr), 1, key, iv);
			/*
			 * zero the complete buffer or the string passed from
			 * the command line bug picked up by Larry J. Hughes
			 * Jr. <hughes@@indiana.edu>
			 */
			if (enc_config.keystr == strbuf)
				explicit_bzero(enc_config.keystr, SIZE);
			else
				explicit_bzero(enc_config.keystr,
				    strlen(enc_config.keystr));
		}
		if (enc_config.hiv != NULL &&
		    !set_hex(enc_config.hiv, iv, sizeof iv)) {
			BIO_printf(bio_err, "invalid hex iv value\n");
			goto end;
		}
		if (enc_config.hiv == NULL && enc_config.keystr == NULL &&
		    EVP_CIPHER_iv_length(enc_config.cipher) != 0) {
			/*
			 * No IV was explicitly set and no IV was generated
			 * during EVP_BytesToKey. Hence the IV is undefined,
			 * making correct decryption impossible.
			 */
			BIO_printf(bio_err, "iv undefined\n");
			goto end;
		}
		if (enc_config.hkey != NULL &&
		    !set_hex(enc_config.hkey, key, sizeof key)) {
			BIO_printf(bio_err, "invalid hex key value\n");
			goto end;
		}
		if ((benc = BIO_new(BIO_f_cipher())) == NULL)
			goto end;

		/*
		 * Since we may be changing parameters work on the encryption
		 * context rather than calling BIO_set_cipher().
		 */

		BIO_get_cipher_ctx(benc, &ctx);

		if (!EVP_CipherInit_ex(ctx, enc_config.cipher, NULL, NULL,
		    NULL, enc_config.enc)) {
			BIO_printf(bio_err, "Error setting cipher %s\n",
			    EVP_CIPHER_name(enc_config.cipher));
			ERR_print_errors(bio_err);
			goto end;
		}
		if (enc_config.nopad)
			EVP_CIPHER_CTX_set_padding(ctx, 0);

		if (!EVP_CipherInit_ex(ctx, NULL, NULL, key, iv,
		    enc_config.enc)) {
			BIO_printf(bio_err, "Error setting cipher %s\n",
			    EVP_CIPHER_name(enc_config.cipher));
			ERR_print_errors(bio_err);
			goto end;
		}
		if (enc_config.debug) {
			BIO_set_callback(benc, BIO_debug_callback);
			BIO_set_callback_arg(benc, (char *) bio_err);
		}
		if (enc_config.printkey) {
			if (!enc_config.nosalt) {
				printf("salt=");
				for (i = 0; i < (int) sizeof(salt); i++)
					printf("%02X", salt[i]);
				printf("\n");
			}
			if (enc_config.cipher->key_len > 0) {
				printf("key=");
				for (i = 0; i < enc_config.cipher->key_len; i++)
					printf("%02X", key[i]);
				printf("\n");
			}
			if (enc_config.cipher->iv_len > 0) {
				printf("iv =");
				for (i = 0; i < enc_config.cipher->iv_len; i++)
					printf("%02X", iv[i]);
				printf("\n");
			}
			if (enc_config.printkey == 2) {
				ret = 0;
				goto end;
			}
		}
	}
	/* Only encrypt/decrypt as we write the file */
	if (benc != NULL)
		wbio = BIO_push(benc, wbio);

	for (;;) {
		inl = BIO_read(rbio, (char *) buff, bsize);
		if (inl <= 0)
			break;
		if (BIO_write(wbio, (char *) buff, inl) != inl) {
			BIO_printf(bio_err, "error writing output file\n");
			goto end;
		}
	}
	if (!BIO_flush(wbio)) {
		BIO_printf(bio_err, "bad decrypt\n");
		goto end;
	}
	ret = 0;
	if (enc_config.verbose) {
		BIO_printf(bio_err, "bytes read   :%8ld\n", BIO_number_read(in));
		BIO_printf(bio_err, "bytes written:%8ld\n", BIO_number_written(out));
	}
end:
	ERR_print_errors(bio_err);
	free(strbuf);
	free(buff);
	BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	BIO_free(benc);
	BIO_free(b64);
#ifdef ZLIB
	BIO_free(bzl);
#endif
	free(pass);

	return (ret);
}

int
set_hex(char *in, unsigned char *out, int size)
{
	int i, n;
	unsigned char j;

	n = strlen(in);
	if (n > (size * 2)) {
		BIO_printf(bio_err, "hex string is too long\n");
		return (0);
	}
	memset(out, 0, size);
	for (i = 0; i < n; i++) {
		j = (unsigned char) *in;
		*(in++) = '\0';
		if (j == 0)
			break;
		if ((j >= '0') && (j <= '9'))
			j -= '0';
		else if ((j >= 'A') && (j <= 'F'))
			j = j - 'A' + 10;
		else if ((j >= 'a') && (j <= 'f'))
			j = j - 'a' + 10;
		else {
			BIO_printf(bio_err, "non-hex digit\n");
			return (0);
		}
		if (i & 1)
			out[i / 2] |= j;
		else
			out[i / 2] = (j << 4);
	}
	return (1);
}
@


1.11
log
@hexidecimal->hexadecimal; from mmcc
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.10 2015/10/17 15:00:11 doug Exp $ */
d342 1
a342 1
		if (pledge("stdio rpath wpath cpath tty", NULL) == -1) {
@


1.10
log
@Exit if a pledge call fails in non-interactive mode.

ok semarie@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.9 2015/10/17 07:51:10 semarie Exp $ */
d181 1
a181 1
		.desc = "IV to use, specified as a hexidecimal string",
d188 1
a188 1
		.desc = "Key to use, specified as a hexidecimal string",
d259 1
a259 1
		.desc = "Salt to use, specified as a hexidecimal string",
@


1.9
log
@add "tty" for several subcommands of openssl

it is needed in order to let libssl UI_* function plays with echo on/off when
asking for password on terminal.

passwd subcommand needs additionnal "wpath cpath" in order to let it calls
fopen("/dev/tty", "w") (O_WRONLY with O_CREAT | O_TRUNC).

problem reported by several
with and ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.8 2015/10/10 22:28:51 doug Exp $ */
d342 1
a342 1
		if (pledge("stdio rpath wpath cpath tty", NULL) == -1)
d344 2
@


1.8
log
@Initial support for pledges in openssl(1) commands.

openssl(1) has two mechanisms for operating: either a single execution
of one command (looking at argv[0] or argv[1]) or as an interactive
session than may execute any number of commands.

We already have a top level pledge that should cover all commands
and that's what interactive mode must continue using.  However, we can
tighten up the pledges when only executing one command.

This is an initial stab at support and may contain regressions.  Most
commands only need "stdio rpath wpath cpath".  The pledges could be
further restricted by evaluating the situation after parsing options.

deraadt@@ and beck@@ are roughly fine with this approach.
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.7 2015/09/11 14:30:23 bcook Exp $ */
d342 1
a342 1
		if (pledge("stdio rpath wpath cpath", NULL) == -1)
@


1.7
log
@Remove engine command and parameters from openssl(1).

We do not have any builtin or dynamic engines, meaning openssl(1) has
no way to use the engine command or parameters at all.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.6 2015/09/10 16:01:06 jsing Exp $ */
d340 5
@


1.6
log
@Correct spelling of OPENSSL_cleanse.
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.5 2015/08/22 16:36:05 jsing Exp $ */
a87 3
#ifndef OPENSSL_NO_ENGINE
	char *engine;
#endif
a170 9
#ifndef OPENSSL_NO_ENGINE
	{
		.name = "engine",
		.argname = "id",
		.desc = "Use the engine specified by the given identifier",
		.type = OPTION_ARG,
		.opt.arg = &enc_config.engine,
	},
#endif
d308 1
a308 1
	    "    [-engine id] [-in file] [-iv IV] [-K key] [-k password]\n"
a402 4

#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, enc_config.engine, 0);
#endif
@


1.5
log
@Remove all duplicate prototypes for *_main functions (these are already
provided by progs.h). Also, move the FUNCTION type (and flags) into
openssl.c since that is the only place of use. Lastly, remove pointless
'extern' from the prototypes and use char **argv instead of char *argv[]
(the former is used elsewhere).

ok deraadt@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.4 2015/01/01 13:55:03 jsing Exp $ */
d626 1
a626 1
				OPENSSL_cleanse(enc_config.keystr, SIZE);
d628 1
a628 1
				OPENSSL_cleanse(enc_config.keystr,
@


1.4
log
@Convert the openssl(1) enc command to the new option parsing and usage.

With input from doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.3 2014/10/22 13:54:03 jsing Exp $ */
a329 2

int enc_main(int, char **);
@


1.3
log
@Use arc4random_buf() instead of RAND(_pseudo)?_bytes().

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.2 2014/09/01 20:54:37 doug Exp $ */
d78 225
a302 1
#define	PROG	enc_main
d305 1
a305 1
show_ciphers(const OBJ_NAME * name, void *bio_)
a306 1
	BIO *bio = bio_;
d309 1
a309 1
	if (!islower((unsigned char) *name->name))
d312 17
a328 6
	BIO_printf(bio, "-%-25s", name->name);
	if (++n == 3) {
		BIO_printf(bio, "\n");
		n = 0;
	} else
		BIO_printf(bio, " ");
d338 3
a340 3
	char *strbuf = NULL;
	unsigned char *buff = NULL, *bufsize = NULL;
	int bsize = BSIZE, verbose = 0;
a341 1
	int nopad = 0;
a343 4
	char *str = NULL, *passarg = NULL, *pass = NULL;
	char *hkey = NULL, *hiv = NULL, *hsalt = NULL;
	char *md = NULL;
	int enc = 1, printkey = 0, i, base64 = 0;
a344 1
	int do_zlib = 0;
a346 2
	int debug = 0, olb64 = 0, nosalt = 0;
	const EVP_CIPHER *cipher = NULL, *c;
d348 3
a350 3
	char *inf = NULL, *outf = NULL;
	BIO *in = NULL, *out = NULL, *b64 = NULL, *benc = NULL, *rbio = NULL,
	*wbio = NULL;
d353 4
a356 4
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
	const EVP_MD *dgst = NULL;
d359 2
a360 1
	program_name(argv[0], pname, sizeof pname);
d362 2
a363 1
		base64 = 1;
d366 1
a366 1
		do_zlib = 1;
d369 2
a370 1
	cipher = EVP_get_cipherbyname(pname);
d372 2
a373 2
	if (!do_zlib && !base64 && (cipher == NULL)
	    && (strcmp(pname, "enc") != 0))
d375 2
a376 1
	if (!base64 && (cipher == NULL) && (strcmp(pname, "enc") != 0))
d380 6
a385 1
		goto bad;
d387 10
a396 17
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-e") == 0)
			enc = 1;
		else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			inf = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outf = *(++argv);
		} else if (strcmp(*argv, "-pass") == 0) {
			if (--argc < 1)
				goto bad;
			passarg = *(++argv);
d398 6
a403 5
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
d405 8
a412 119
#endif
		else if (strcmp(*argv, "-d") == 0)
			enc = 0;
		else if (strcmp(*argv, "-p") == 0)
			printkey = 1;
		else if (strcmp(*argv, "-v") == 0)
			verbose = 1;
		else if (strcmp(*argv, "-nopad") == 0)
			nopad = 1;
		else if (strcmp(*argv, "-salt") == 0)
			nosalt = 0;
		else if (strcmp(*argv, "-nosalt") == 0)
			nosalt = 1;
		else if (strcmp(*argv, "-debug") == 0)
			debug = 1;
		else if (strcmp(*argv, "-P") == 0)
			printkey = 2;
		else if (strcmp(*argv, "-A") == 0)
			olb64 = 1;
		else if (strcmp(*argv, "-a") == 0)
			base64 = 1;
		else if (strcmp(*argv, "-base64") == 0)
			base64 = 1;
#ifdef ZLIB
		else if (strcmp(*argv, "-z") == 0)
			do_zlib = 1;
#endif
		else if (strcmp(*argv, "-bufsize") == 0) {
			if (--argc < 1)
				goto bad;
			bufsize = (unsigned char *) *(++argv);
		} else if (strcmp(*argv, "-k") == 0) {
			if (--argc < 1)
				goto bad;
			str = *(++argv);
		} else if (strcmp(*argv, "-kfile") == 0) {
			static char buf[128];
			FILE *infile;
			char *file;

			if (--argc < 1)
				goto bad;
			file = *(++argv);
			infile = fopen(file, "r");
			if (infile == NULL) {
				BIO_printf(bio_err, "unable to read key from '%s'\n",
				    file);
				goto bad;
			}
			buf[0] = '\0';
			if (!fgets(buf, sizeof buf, infile)) {
				BIO_printf(bio_err, "unable to read key from '%s'\n",
				    file);
				fclose(infile);
				goto bad;
			}
			fclose(infile);
			i = strlen(buf);
			if ((i > 0) &&
			    ((buf[i - 1] == '\n') || (buf[i - 1] == '\r')))
				buf[--i] = '\0';
			if ((i > 0) &&
			    ((buf[i - 1] == '\n') || (buf[i - 1] == '\r')))
				buf[--i] = '\0';
			if (i < 1) {
				BIO_printf(bio_err, "zero length password\n");
				goto bad;
			}
			str = buf;
		} else if (strcmp(*argv, "-K") == 0) {
			if (--argc < 1)
				goto bad;
			hkey = *(++argv);
		} else if (strcmp(*argv, "-S") == 0) {
			if (--argc < 1)
				goto bad;
			hsalt = *(++argv);
		} else if (strcmp(*argv, "-iv") == 0) {
			if (--argc < 1)
				goto bad;
			hiv = *(++argv);
		} else if (strcmp(*argv, "-md") == 0) {
			if (--argc < 1)
				goto bad;
			md = *(++argv);
		} else if ((argv[0][0] == '-') &&
		    ((c = EVP_get_cipherbyname(&(argv[0][1]))) != NULL)) {
			cipher = c;
		} else if (strcmp(*argv, "-none") == 0)
			cipher = NULL;
		else {
			BIO_printf(bio_err, "unknown option '%s'\n", *argv);
	bad:
			BIO_printf(bio_err, "options are\n");
			BIO_printf(bio_err, "%-14s input file\n", "-in <file>");
			BIO_printf(bio_err, "%-14s output file\n", "-out <file>");
			BIO_printf(bio_err, "%-14s pass phrase source\n", "-pass <arg>");
			BIO_printf(bio_err, "%-14s encrypt\n", "-e");
			BIO_printf(bio_err, "%-14s decrypt\n", "-d");
			BIO_printf(bio_err, "%-14s base64 encode/decode, depending on encryption flag\n", "-a/-base64");
			BIO_printf(bio_err, "%-14s passphrase is the next argument\n", "-k");
			BIO_printf(bio_err, "%-14s passphrase is the first line of the file argument\n", "-kfile");
			BIO_printf(bio_err, "%-14s the next argument is the md to use to create a key\n", "-md");
			BIO_printf(bio_err, "%-14s   from a passphrase.  One of md2, md5, sha or sha1\n", "");
			BIO_printf(bio_err, "%-14s salt in hex is the next argument\n", "-S");
			BIO_printf(bio_err, "%-14s key/iv in hex is the next argument\n", "-K/-iv");
			BIO_printf(bio_err, "%-14s print the iv/key (then exit if -P)\n", "-[pP]");
			BIO_printf(bio_err, "%-14s buffer size\n", "-bufsize <n>");
			BIO_printf(bio_err, "%-14s disable standard block padding\n", "-nopad");
#ifndef OPENSSL_NO_ENGINE
			BIO_printf(bio_err, "%-14s use engine e, possibly a hardware device.\n", "-engine e");
#endif

			BIO_printf(bio_err, "Cipher Types\n");
			OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH,
			    show_ciphers,
			    bio_err);
			BIO_printf(bio_err, "\n");

d415 1
a415 2
		argc--;
		argv++;
d419 1
a419 1
	setup_engine(bio_err, engine, 0);
d422 5
a426 2
	if (md && (dgst = EVP_get_digestbyname(md)) == NULL) {
		BIO_printf(bio_err, "%s is an unsupported message digest type\n", md);
d430 1
a430 1
		dgst = EVP_md5();
d432 3
a434 1
	if (bufsize != NULL) {
d437 3
a439 2
		for (n = 0; *bufsize; bufsize++) {
			i = *bufsize;
d444 1
a444 1
				bufsize++;
d448 1
a448 1
		if (*bufsize != '\0') {
d452 2
a453 2
		/* It must be large enough for a base64 encoded line */
		if (base64 && n < 80)
d456 2
a457 2
		bsize = (int) n;
		if (verbose)
d472 1
a472 1
	if (debug) {
d478 2
a479 2
	if (inf == NULL) {
		if (bufsize != NULL)
d483 2
a484 2
		if (BIO_read_filename(in, inf) <= 0) {
			perror(inf);
d489 3
a491 2
	if (!str && passarg) {
		if (!app_passwd(bio_err, passarg, NULL, &pass, NULL)) {
d495 1
a495 1
		str = pass;
d497 2
a498 1
	if ((str == NULL) && (cipher != NULL) && (hkey == NULL)) {
d503 4
a506 3
			retval = snprintf(buf, sizeof buf, "enter %s %s password:",
			    OBJ_nid2ln(EVP_CIPHER_nid(cipher)),
			    (enc) ? "encryption" : "decryption");
d508 2
a509 1
				BIO_printf(bio_err, "Password prompt too long\n");
d513 2
a514 1
			i = EVP_read_pw_string((char *) strbuf, SIZE, buf, enc);
d520 1
a520 1
				str = strbuf;
d529 1
a529 1
	if (outf == NULL) {
d531 2
a532 2
		if (bufsize != NULL)
			setvbuf(stdout, (char *) NULL, _IONBF, 0);
d534 2
a535 2
		if (BIO_write_filename(out, outf) <= 0) {
			perror(outf);
a543 1

d554 1
a554 1
	if (base64) {
d557 1
a557 1
		if (debug) {
d561 1
a561 1
		if (olb64)
d563 1
a563 1
		if (enc)
d568 1
a568 1
	if (cipher != NULL) {
d570 1
a570 1
		 * Note that str is NULL if a key was passed on the command
d573 1
a573 1
		if (str != NULL) {
d580 1
a580 1
			if (nosalt)
d583 3
a585 3
				if (enc) {
					if (hsalt) {
						if (!set_hex(hsalt, salt, sizeof salt)) {
d597 1
a597 1
					if ((printkey != 2)
d619 3
a621 3
			EVP_BytesToKey(cipher, dgst, sptr,
			    (unsigned char *) str,
			    strlen(str), 1, key, iv);
d627 2
a628 2
			if (str == strbuf)
				OPENSSL_cleanse(str, SIZE);
d630 2
a631 1
				OPENSSL_cleanse(str, strlen(str));
d633 2
a634 1
		if ((hiv != NULL) && !set_hex(hiv, iv, sizeof iv)) {
d638 2
a639 2
		if ((hiv == NULL) && (str == NULL)
		    && EVP_CIPHER_iv_length(cipher) != 0) {
d648 2
a649 1
		if ((hkey != NULL) && !set_hex(hkey, key, sizeof key)) {
d663 2
a664 1
		if (!EVP_CipherInit_ex(ctx, cipher, NULL, NULL, NULL, enc)) {
d666 1
a666 1
			    EVP_CIPHER_name(cipher));
d670 1
a670 1
		if (nopad)
d673 2
a674 1
		if (!EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, enc)) {
d676 1
a676 1
			    EVP_CIPHER_name(cipher));
d680 1
a680 1
		if (debug) {
d684 2
a685 2
		if (printkey) {
			if (!nosalt) {
d691 1
a691 1
			if (cipher->key_len > 0) {
d693 1
a693 1
				for (i = 0; i < cipher->key_len; i++)
d697 1
a697 1
			if (cipher->iv_len > 0) {
d699 1
a699 1
				for (i = 0; i < cipher->iv_len; i++)
d703 1
a703 1
			if (printkey == 2) {
d727 1
a727 1
	if (verbose) {
@


1.2
log
@Enable -Wshadow in openssl(1) and fix a few shadow warnings.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.1 2014/08/26 17:47:24 jsing Exp $ */
a71 1
#include <openssl/rand.h>
d463 3
a465 2
					} else if (RAND_pseudo_bytes(salt, sizeof salt) < 0)
						goto end;
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.39 2014/07/25 06:05:32 doug Exp $ */
d377 1
a377 1
			int ret;
d379 1
a379 1
			ret = snprintf(buf, sizeof buf, "enter %s %s password:",
d382 1
a382 1
			if (ret == -1 || ret >= sizeof buf) {
@

