head	1.11;
access;
symbols
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6;
locks; strict;
comment	@ * @;


1.11
date	2017.01.20.08.57.12;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	dLXg6G5zkTXfsv25;

1.10
date	2015.10.17.15.00.11;	author doug;	state Exp;
branches;
next	1.9;
commitid	eAF5hlziO0omr4Cj;

1.9
date	2015.10.10.22.28.51;	author doug;	state Exp;
branches;
next	1.8;
commitid	7Pr412xEOoY2KZOT;

1.8
date	2015.09.11.14.30.23;	author bcook;	state Exp;
branches;
next	1.7;
commitid	erFqA80i5nzJClSk;

1.7
date	2015.08.22.16.36.05;	author jsing;	state Exp;
branches;
next	1.6;
commitid	FOQ5PgwxGR8cjJ8X;

1.6
date	2014.12.28.15.48.52;	author jsing;	state Exp;
branches;
next	1.5;
commitid	bQimQQipD1DRW09U;

1.5
date	2014.10.22.13.54.03;	author jsing;	state Exp;
branches;
next	1.4;
commitid	VOyRkhPKDfAzH2Fv;

1.4
date	2014.10.13.02.46.14;	author bcook;	state Exp;
branches;
next	1.3;
commitid	Z6BCDPzTn5x0AxGt;

1.3
date	2014.08.27.15.54.02;	author jsing;	state Exp;
branches;
next	1.2;
commitid	CaabkFBMRf9IDqHr;

1.2
date	2014.08.27.14.59.44;	author jsing;	state Exp;
branches;
next	1.1;
commitid	FuP3KZCTlxkyk183;

1.1
date	2014.08.26.17.47.25;	author jsing;	state Exp;
branches;
next	;
commitid	7A7DObXgY4Fni8xJ;


desc
@@


1.11
log
@rearrange pledge promises into the canonical order; easier to eyeball
@
text
@/* $OpenBSD: rand.c,v 1.10 2015/10/17 15:00:11 doug Exp $ */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <ctype.h>
#include <stdio.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/err.h>

struct {
	int base64;
	int hex;
	char *outfile;
} rand_config;

struct option rand_options[] = {
	{
		.name = "base64",
		.desc = "Perform base64 encoding on output",
		.type = OPTION_FLAG,
		.opt.flag = &rand_config.base64,
	},
	{
		.name = "hex",
		.desc = "Hexadecimal output",
		.type = OPTION_FLAG,
		.opt.flag = &rand_config.hex,
	},
	{
		.name = "out",
		.argname = "file",
		.desc = "Write to the given file instead of standard output",
		.type = OPTION_ARG,
		.opt.arg = &rand_config.outfile,
	},
	{NULL},
};

static void
rand_usage()
{
	fprintf(stderr,
	    "usage: rand [-base64 | -hex] [-out file] num\n");
	options_usage(rand_options);
}

int
rand_main(int argc, char **argv)
{
	char *num_bytes = NULL;
	int ret = 1;
	int badopt = 0;
	int num = -1;
	int i, r;
	BIO *out = NULL;

	if (single_execution) {
		if (pledge("stdio cpath wpath rpath", NULL) == -1) {
			perror("pledge");
			exit(1);
		}
	}

	memset(&rand_config, 0, sizeof(rand_config));

	if (options_parse(argc, argv, rand_options, &num_bytes, NULL) != 0) {
		rand_usage();
		return (1);
	}

	if (num_bytes != NULL) {
		r = sscanf(num_bytes, "%d", &num);
		if (r == 0 || num < 0)
			badopt = 1;
	} else
		badopt = 1;

	if (rand_config.hex && rand_config.base64)
		badopt = 1;

	if (badopt) {
		rand_usage();
		goto err;
	}

	out = BIO_new(BIO_s_file());
	if (out == NULL)
		goto err;
	if (rand_config.outfile != NULL)
		r = BIO_write_filename(out, rand_config.outfile);
	else
		r = BIO_set_fp(out, stdout, BIO_NOCLOSE | BIO_FP_TEXT);
	if (r <= 0)
		goto err;
	if (rand_config.base64) {
		BIO *b64 = BIO_new(BIO_f_base64());
		if (b64 == NULL)
			goto err;
		out = BIO_push(b64, out);
	}

	while (num > 0) {
		unsigned char buf[4096];
		int chunk;

		chunk = num;
		if (chunk > (int) sizeof(buf))
			chunk = sizeof(buf);
		arc4random_buf(buf, chunk);
		if (rand_config.hex) {
			for (i = 0; i < chunk; i++)
				BIO_printf(out, "%02x", buf[i]);
		} else
			BIO_write(out, buf, chunk);
		num -= chunk;
	}

	if (rand_config.hex)
		BIO_puts(out, "\n");
	(void) BIO_flush(out);

	ret = 0;

err:
	ERR_print_errors(bio_err);
	if (out)
		BIO_free_all(out);

	return (ret);
}
@


1.10
log
@Exit if a pledge call fails in non-interactive mode.

ok semarie@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.9 2015/10/10 22:28:51 doug Exp $ */
d113 1
a113 1
		if (pledge("stdio rpath wpath cpath", NULL) == -1) {
@


1.9
log
@Initial support for pledges in openssl(1) commands.

openssl(1) has two mechanisms for operating: either a single execution
of one command (looking at argv[0] or argv[1]) or as an interactive
session than may execute any number of commands.

We already have a top level pledge that should cover all commands
and that's what interactive mode must continue using.  However, we can
tighten up the pledges when only executing one command.

This is an initial stab at support and may contain regressions.  Most
commands only need "stdio rpath wpath cpath".  The pledges could be
further restricted by evaluating the situation after parsing options.

deraadt@@ and beck@@ are roughly fine with this approach.
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.8 2015/09/11 14:30:23 bcook Exp $ */
d113 1
a113 1
		if (pledge("stdio rpath wpath cpath", NULL) == -1)
d115 2
@


1.8
log
@Remove engine command and parameters from openssl(1).

We do not have any builtin or dynamic engines, meaning openssl(1) has
no way to use the engine command or parameters at all.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.7 2015/08/22 16:36:05 jsing Exp $ */
d111 5
@


1.7
log
@Remove all duplicate prototypes for *_main functions (these are already
provided by progs.h). Also, move the FUNCTION type (and flags) into
openssl.c since that is the only place of use. Lastly, remove pointless
'extern' from the prototypes and use char **argv instead of char *argv[]
(the former is used elsewhere).

ok deraadt@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.6 2014/12/28 15:48:52 jsing Exp $ */
a66 1
	char *engine;
a77 9
#ifndef OPENSSL_NO_ENGINE
	{
		.name = "engine",
		.argname = "id",
		.desc = "Use the engine specified by the given identifier",
		.type = OPTION_ARG,
		.opt.arg = &rand_config.engine,
	},
#endif
d98 1
a98 1
	    "usage: rand [-base64 | -hex] [-engine id] [-out file] num\n");
a132 4

#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, rand_config.engine, 0);
#endif
@


1.6
log
@Provide a mechanism for option parsing to return the number of arguments
that it has consumed. This allows for the handling of multiple unnamed
arguments, including lists of filenames.
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.5 2014/10/22 13:54:03 jsing Exp $ */
a110 2

int rand_main(int, char **);
@


1.5
log
@Use arc4random_buf() instead of RAND(_pseudo)?_bytes().

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.4 2014/10/13 02:46:14 bcook Exp $ */
d126 1
a126 1
	if (options_parse(argc, argv, rand_options, &num_bytes) != 0) {
@


1.4
log
@prefer C99 array initialization syntax.

use C99 array initialization syntax for strict C compilers.

from kinichiro, found building with HP/UX compiler

ok deraadt@@, guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.3 2014/08/27 15:54:02 jsing Exp $ */
a63 1
#include <openssl/rand.h>
d173 1
a173 3
		r = RAND_bytes(buf, chunk);
		if (r <= 0)
			goto err;
@


1.3
log
@Reset the config struct before calling options_parse(), otherwise config
options from the previous run stick in interactive mode.
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.2 2014/08/27 14:59:44 jsing Exp $ */
d102 1
a102 1
	{},
@


1.2
log
@Implement table-driven option parsing that allows an application to
specify what its valid options are and where it wants them to be stored.
This also allows for usage to be generated, almost for free, ensuring
that the options and usage are automatically kept in sync.

This will allow for a single option parsing implementation, rather than the
current one-hand-rolled-option-parsing-and-random-usage-implementation per
application.

As a starting point, port the openssl(1) rand application to the new option
parsing and usage (along with associated code clean up).

With input from doug@@.

ok bcook@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.1 2014/08/26 17:47:25 jsing Exp $ */
d124 2
@


1.1
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.22 2014/07/14 00:35:10 deraadt Exp $ */
d66 46
a111 5
/* -out file         - write to file
 * -base64           - base64 encode output
 * -hex              - hex encode output
 * num               - write 'num' bytes
 */
d118 5
a122 5
	int i, r, ret = 1;
	int badopt;
	char *outfile = NULL;
	int base64 = 0;
	int hex = 0;
a123 4
	int num = -1;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
d125 3
a127 36
	badopt = 0;
	i = 0;
	while (!badopt && argv[++i] != NULL) {
		if (strcmp(argv[i], "-out") == 0) {
			if ((argv[i + 1] != NULL) && (outfile == NULL))
				outfile = argv[++i];
			else
				badopt = 1;
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(argv[i], "-engine") == 0) {
			if ((argv[i + 1] != NULL) && (engine == NULL))
				engine = argv[++i];
			else
				badopt = 1;
		}
#endif
		else if (strcmp(argv[i], "-base64") == 0) {
			if (!base64)
				base64 = 1;
			else
				badopt = 1;
		} else if (strcmp(argv[i], "-hex") == 0) {
			if (!hex)
				hex = 1;
			else
				badopt = 1;
		} else if (isdigit((unsigned char) argv[i][0])) {
			if (num < 0) {
				r = sscanf(argv[i], "%d", &num);
				if (r == 0 || num < 0)
					badopt = 1;
			} else
				badopt = 1;
		} else
			badopt = 1;
d130 5
a134 1
	if (hex && base64)
d137 1
a137 1
	if (num < 0)
d141 1
a141 8
		BIO_printf(bio_err, "Usage: rand [options] num\n");
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, "-out file             - write to file\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, "-engine e             - use engine e, possibly a hardware device.\n");
#endif
		BIO_printf(bio_err, "-base64               - base64 encode output\n");
		BIO_printf(bio_err, "-hex                  - hex encode output\n");
d144 1
d146 1
a146 1
	setup_engine(bio_err, engine, 0);
d152 3
a154 3
	if (outfile != NULL)
		r = BIO_write_filename(out, outfile);
	else {
a155 1
	}
d158 1
a158 2

	if (base64) {
d164 1
d171 1
a171 1
			chunk = sizeof buf;
d175 1
a175 3
		if (!hex)
			BIO_write(out, buf, chunk);
		else {
d178 2
a179 1
		}
d182 2
a183 1
	if (hex)
@

