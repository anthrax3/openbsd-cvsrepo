head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.20
date	2016.06.07.06.12.37;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	3b5aikHetmWeZowP;

1.19
date	2016.03.22.16.45.07;	author guenther;	state Exp;
branches;
next	1.18;
commitid	oNZOtQg98iFpTHGK;

1.18
date	2016.01.14.05.27.42;	author guenther;	state Exp;
branches;
next	1.17;
commitid	Bhcdwp3nHtW1NOl8;

1.17
date	2015.10.03.23.52.30;	author guenther;	state Exp;
branches;
next	1.16;
commitid	7fZFfLhcNPssv7ez;

1.16
date	2014.12.15.01.48.54;	author guenther;	state Exp;
branches;
next	1.15;
commitid	MEBmqIQlRpTSQJN4;

1.15
date	2014.12.08.21.23.44;	author guenther;	state Exp;
branches;
next	1.14;
commitid	lpUmFxm44MKPkJek;

1.14
date	2014.10.13.03.46.33;	author guenther;	state Exp;
branches;
next	1.13;
commitid	GfyJFt2AC6kVCsla;

1.13
date	2014.09.17.19.12.55;	author guenther;	state Exp;
branches;
next	1.12;
commitid	qN9ETG5djk6G2h2J;

1.12
date	2013.12.21.07.32.35;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2013.07.04.08.29.34;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2013.07.03.23.04.34;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.17.19.11.54;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2012.12.25.09.35.51;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2012.04.12.12.33.04;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.19.09.05.39;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2012.02.20.21.04.35;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.19.18.20.12;	author matthew;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.08.19.29.44;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.04.06.44.52;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.16.17.14.53;	author otto;	state Exp;
branches;
next	;


desc
@@


1.20
log
@ktrace support for pollfd[] arrays
ok guenther
@
text
@/*	$OpenBSD: kdump_subr.h,v 1.19 2016/03/22 16:45:07 guenther Exp $	*/
/*
 * Copyright(c) 2006 2006 David Kirchner <dpk@@dpk.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $FreeBSD: src/usr.bin/kdump/kdump_subr.h,v 1.3 2007/04/09 22:04:27 emaste Exp $ */


/*
 * These are simple support macros. print_or utilizes a variable
 * defined in the calling function to track whether or not it should
 * print a logical-OR character ('|') before a string. if_print_or
 * simply handles the necessary "if" statement used in many lines
 * of this file.
 */
#define print_or(str,orflag) do {                  \
	if (orflag) putchar('|'); else orflag = 1; \
	printf ("%s", str); }                      \
	while (0)
#define if_print_or(i,flag,orflag) do {            \
	if ((i & flag) == flag)                    \
	print_or(#flag,orflag); }                  \
	while (0)

void fcntlcmdname(int);
void rtprioname(int);
void modename(int);
void doflagsname(int, int);
void flagsname(int);
void openflagsname(int);
void atflagsname(int);
void accessmodename(int);
void mmapprotname(int);
void mmapflagsname(int);
void wait4optname(int);
void sendrecvflagsname(int);
void getfsstatflagsname(int);
void mountflagsname(int);
void rebootoptname(int);
void flockname(int);
void sockoptname(int);
void sockdomainname(int);
void sockipprotoname(int);
void socktypename(int);
void sockflagsname(int);
void sockfamilyname(int);
void thrcreateflagsname(int);
void mlockallname(int);
void shmatname(int);
void nfssvcname(int);
void whencename(int);
void pathconfname(int);
void rlimitname(int);
void shutdownhowname(int);
void prioname(int);
void madvisebehavname(int);
void msyncflagsname(int);
void clocktypename(int);
void schedpolicyname(int);
void kldunloadfflagsname(int);
void ksethrcmdname(int);
void extattrctlname(int);
void kldsymcmdname(int);
void sendfileflagsname(int);
void acltypename(int);
void rusagewho(int);
void sigactionflagname(int);
void sigprocmaskhowname(int);
void lio_listioname(int);
void minheritname(int);
void quotactlname(int);
void quotactlcmdname(int);
void ptraceopname(int);
void sigill_name(int);
void sigtrap_name(int);
void sigemt_name(int);
void sigfpe_name(int);
void sigbus_name(int);
void sigsegv_name(int);
void sigchld_name(int);
void ktracefacname(int);
void itimername(int);
void evfiltername(int);
void evflagsname(int);
void evfflagsname(int, int);
void pollfdeventname(int);
void syslogflagname(int);

extern int decimal, fancy, basecol, arg1;
@


1.19
log
@Format the flags argument to sendsyslog()

ok deraadt@@ bluhm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.18 2016/01/14 05:27:42 guenther Exp $	*/
d98 1
@


1.18
log
@Display struct event more like other structs: show all members and use cpp
define names.  Use the mksubr infrastructure for EVFILT_*,
EV_*, and (with some kludging) NOTE_* values.  If EV_ERROR is set,
include the errno string for the data member.

Also, do MSG_* parsing on the msg_flags member of struct msghdr.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.17 2015/10/03 23:52:30 guenther Exp $	*/
d98 1
@


1.17
log
@Add ktracing of tame()'s arguments' values

"every tool helps" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.16 2014/12/15 01:48:54 guenther Exp $	*/
d95 3
@


1.16
log
@Eliminate the -r option and always do sysctl OID, username, groupname,
and ctime presentation, but combined with the numeric form ala 0<"root">.
Do username and groupname presentation on syscall arguments and retvals.

ok millert@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.15 2014/12/08 21:23:44 guenther Exp $	*/
d96 1
a96 2
extern int decimal, fancy;
extern int arg1;
@


1.15
log
@Convert syscall argument handling from a giant switch to a giant table.
While at it, use formatters for fds, counts, ids of all types, and "small
buffer sizes" that always show them in decimal, while paths, pointers, and
"big buffer sizes" get formatters that always show them in hex.  The -d
option only affects args when the -n option is used or for unknown syscalls,
as well as syscall return values, and unrecognized ioctls.

ok otto@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.14 2014/10/13 03:46:33 guenther Exp $	*/
d96 1
a96 1
extern int decimal, resolv, fancy;
@


1.14
log
@Add dumping of struct dqblk done by quotactl(2)

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.13 2014/09/17 19:12:55 guenther Exp $	*/
d37 1
a37 1
void fcntlcmdname(int, int);
d42 1
d97 1
@


1.13
log
@Add display of the flags to pipe2, dup3, and accept4, display of
MSG_CMSG_CLOEXEC in recvmsg, and display of SOCK_{CLOEXEC,NONBLOCK}
in socket and socketpair.
Do _not_ display the O_ACCMODE bits in the arg to fcntl(F_SETFD)

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.12 2013/12/21 07:32:35 guenther Exp $	*/
d83 1
@


1.12
log
@Recognize itimer and ktrace facility names to {get,set}itimer() and ktrace()

ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.11 2013/07/04 08:29:34 otto Exp $	*/
d40 1
d56 1
@


1.11
log
@add some missing prototypes; ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.10 2013/07/03 23:04:34 guenther Exp $	*/
d89 2
@


1.10
log
@For consistency, move the functions that aren't generated at build-time
from mksubr to kdump.c

ok otto@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.9 2013/06/17 19:11:54 guenther Exp $	*/
d82 7
@


1.9
log
@Add support for the _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME options,
including CLOCK_{PROCESS,THREAD}_CPUTIME_ID constants and
{clock,pthread}_getcpuclockid() functions.

Worked out at t2k13 with help from tedu@@ and matthew@@ and testing by aja@@
ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.8 2012/12/25 09:35:51 guenther Exp $	*/
d20 17
a36 5
void signame(int);
void sigset(int);
void semctlname(int);
void shmctlname(int);
void semgetname(int);
a41 1
void flagsandmodename(int, int);
a51 1
void sockoptlevelname(int);
a66 1
void clockname(int);
@


1.8
log
@Report macro names for the second argument to shutdown(), getrusage(),
pathconf(), and fpathconf(), and for poll()'s INFTIM.
When open()'s flag arg doesn't include O_CREAT, don't show the third argument
unless th e-n option is given.  Ditto for fcntl()'s F_GETFD and F_GETFL ops.
Show sysctl()'s KERN_PROC_KTHREAD as "kthread".

ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.7 2012/04/12 12:33:04 deraadt Exp $	*/
d58 1
@


1.7
log
@remove rfork(); ok guenther miod
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.6 2012/03/19 09:05:39 guenther Exp $	*/
d51 1
d65 1
d73 1
a73 1
extern int decimal, resolv;
@


1.6
log
@Add tracing and dumping of "pointer to struct" syscall arguments for
structs timespec, timeval, sigaction, and rlimit.

ok otto@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.5 2012/02/20 21:04:35 guenther Exp $	*/
a48 1
void rforkname(int);
@


1.5
log
@- add more ptrace() ops
- be robust against a ktrace file the contains a record with
  ktr_len==SIZE_MAX, instead of reallocating its buffer to zero size
- format the clockid_t argument to clock_*() and __thrsleep() as CLOCK_*
- format the sigset_t argument to sigprocmask() and __thrsigdivert(), the
  return from sigprocmask(), and the mask reported for PSIG records
  as a bitset of SIG* values, except that if most the bits are set
  then invert it and prefix with '~'
- show the next level of the kern.proc sysctl
- __tfork() creates procs, so do the mappidtoemul() handling
- refactor ktrstat()'s time printing bits and fix a whitespace glitch
  in its output
- reduce stack usage in ktrstruct()
- a value of zero is not an error for mode bits (S_*), atflag bits
  (AT_*), wait options (W*), or shmat flags (SHM_*)

ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.4 2011/07/19 18:20:12 matthew Exp $	*/
d65 1
@


1.4
log
@Add fancy kdump support for the openat(2) system calls.

ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.3 2011/07/08 19:29:44 otto Exp $	*/
d21 1
d57 1
d71 1
a71 1
extern int decimal;
@


1.3
log
@Support sending struct info to kdump. So far for struct stat and
struct sockaddress; mostly from freebsd. ok deraadt@@ tedu@@ nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.2 2011/07/04 06:44:52 otto Exp $	*/
d28 1
@


1.2
log
@Big restructuring of the main switch making it much more readable.
Also, handle offset_t (long long) args and padding in a consistent manner.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kdump_subr.h,v 1.1 2011/06/16 17:14:53 otto Exp $	*/
d43 1
@


1.1
log
@Prototypes of functions generated by mksubr.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 1
a24 1
void fcntlcmdname(int, int, int);
d28 1
a28 1
void flagsandmodename(int, int, int);
d39 1
a39 1
void sockoptlevelname(int, int);
d66 2
@

