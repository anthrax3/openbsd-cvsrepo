head	1.31;
access;
symbols
	OPENBSD_6_0:1.31.0.2
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6;
locks; strict;
comment	@# @;


1.31
date	2016.06.07.06.12.37;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	3b5aikHetmWeZowP;

1.30
date	2016.03.22.16.45.07;	author guenther;	state Exp;
branches;
next	1.29;
commitid	oNZOtQg98iFpTHGK;

1.29
date	2016.01.14.05.27.42;	author guenther;	state Exp;
branches;
next	1.28;
commitid	Bhcdwp3nHtW1NOl8;

1.28
date	2015.05.17.01.22.01;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	g7n1QS40YlvIgI3S;

1.27
date	2015.04.17.06.14.36;	author guenther;	state Exp;
branches;
next	1.26;
commitid	QuM5sTk8tPW0Icq2;

1.26
date	2015.01.18.20.05.20;	author guenther;	state Exp;
branches;
next	1.25;
commitid	A0okxz4bmahKCGdP;

1.25
date	2014.12.11.05.44.12;	author guenther;	state Exp;
branches;
next	1.24;
commitid	Q4nByRa2tVedJVPg;

1.24
date	2014.12.08.21.23.44;	author guenther;	state Exp;
branches;
next	1.23;
commitid	lpUmFxm44MKPkJek;

1.23
date	2014.10.13.03.46.33;	author guenther;	state Exp;
branches;
next	1.22;
commitid	GfyJFt2AC6kVCsla;

1.22
date	2014.09.17.19.12.55;	author guenther;	state Exp;
branches;
next	1.21;
commitid	qN9ETG5djk6G2h2J;

1.21
date	2014.08.17.22.43.07;	author guenther;	state Exp;
branches;
next	1.20;
commitid	EPpN1T3zXwrCgoo3;

1.20
date	2014.07.02.06.32.07;	author otto;	state Exp;
branches;
next	1.19;
commitid	o1eUV2LEgkmNV5T1;

1.19
date	2014.06.27.20.50.43;	author matthew;	state Exp;
branches;
next	1.18;
commitid	cTtO84hDA01yGJfp;

1.18
date	2013.12.21.07.32.35;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2013.07.03.23.04.34;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2013.07.01.17.16.46;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2013.06.17.19.11.54;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2012.12.25.09.35.51;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.21.07.16.03;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.08.10.23.36;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2012.06.20.07.30.01;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.12.12.33.04;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2012.03.19.09.05.39;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2012.02.20.21.04.35;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.19.22.00.37;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.19.18.20.12;	author matthew;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.08.19.29.44;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.04.06.44.52;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.20.17.54.48;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.16.17.08.59;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.16.17.05.38;	author otto;	state Exp;
branches;
next	;


desc
@@


1.31
log
@ktrace support for pollfd[] arrays
ok guenther
@
text
@#!/bin/sh
# $OpenBSD: mksubr,v 1.30 2016/03/22 16:45:07 guenther Exp $
#
# Copyright (c) 2006 David Kirchner <dpk@@dpk.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# $FreeBSD: src/usr.bin/kdump/mksubr,v 1.17 2011/06/06 19:00:38 dchagin Exp $
#
# Generates kdump_subr.c
# mkioctls is a special-purpose script, and works fine as it is
# now, so it remains independent. The idea behind how it generates
# its list was heavily borrowed here.
#
# Some functions here are automatically generated. This can mean
# the user will see unusual kdump output or errors while building
# if the underlying .h files are changed significantly.
#
# Key:
# AUTO: Completely auto-generated with either the "or" or the "switch"
# method.
# AUTO - Special: Generated automatically, but with some extra commands
# that the auto_*_type() functions are inappropriate for.
# MANUAL: Manually entered and must therefore be manually updated.

set -e

LC_ALL=C; export LC_ALL

if [ -z "$1" ]
then
	echo "usage: sh $0 include-dir"
	exit 1
fi
include_dir=$1

#
# Automatically generates a C function that will print out the
# numeric input as a pipe-delimited string of the appropriate
# #define keys. ex:
# 0x1a4<S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH>
# The XOR is necessary to prevent including the "0"-value in every
# line.
#
auto_or_type () {
	local name grep file
	name=$1
	grep=$2
	file=$3
	format=${4-%#x}

	cat <<_EOF_
/* AUTO */
void
$name (int arg)
{
	int	or = 0;
	printf("$format<", arg);
_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+"${grep}"[[:space:]]*" \
		$include_dir/$file | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\tif(!((arg>0)^((%s)>0)))\n\t\tif_print_or(arg, %s, or);\n", $i, $i }'
cat <<_EOF_
	printf(">");
	if (or == 0)
		(void)printf("<invalid>%d", arg);
}

_EOF_
}

#
# Like auto_or_type(), but a zero value is valid and prints as "0<>"
#
auto_orz_type () {
	local name grep file
	name=$1
	grep=$2
	file=$3
	format=${4-%#x}

	cat <<_EOF_
/* AUTO */
void
$name (int arg)
{
	int	or = 0;
	if (arg == 0) {
		printf("0<>");
		return;
	}
	printf("$format<", arg);
_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+"${grep}"[[:space:]]*" \
		$include_dir/$file | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\tif(!((arg>0)^((%s)>0)))\n\t\tif_print_or(arg, %s, or);\n", $i, $i }'
cat <<_EOF_
	printf(">");
	if (or == 0)
		(void)printf("<invalid>%d", arg);
}

_EOF_
}

#
# Automatically generates a C function that will print out a
# file flags input as a pipe-delimited string of the appropriate
# #define keys. ex:
# 0x30000<O_RDONLY|O_CLOEXEC|O_DIRECTORY>
# This is different than the others to handle O_RDONLY correctly when
# other flags are present and to diagnose an invalid O_ACCMODE value
#
auto_fflags_type () {
	local name grep file
	name=$1
	grep=$2
	file=$3

	cat <<_EOF_
/* AUTO */
void
$name (int arg, int show_accmode)
{
	int	or = 0;

	printf("%#x<", arg);
	if (show_accmode || (arg & O_ACCMODE)) {
		or = 1;
		switch (arg & O_ACCMODE) {
		case O_RDONLY:
			printf("O_RDONLY");
			break;
		case O_WRONLY:
			printf("O_WRONLY");
			break;
		case O_RDWR:
			printf("O_RDWR");
			break;
		default:
			printf("<invalid>O_ACCMODE");
			break;
		}
	}
_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+"${grep}"[[:space:]]*" \
		$include_dir/$file | \
	egrep -v 'O_(RD(ONLY|WR)|WRONLY|ACCMODE)' | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\tif_print_or(arg, %s, or);\n", $i }'
cat <<_EOF_
	printf(">");
}

/*
 * Wrappers of the above to use with pn()
 */
void
flagsname(int flags)
{
	doflagsname(flags, 0);
}

void
openflagsname(int flags)
{
	doflagsname(flags, 1);
}


_EOF_
}


#
# Automatically generates a C function used when the argument
# maps to a single, specific #definition
#
auto_switch_type () {
	local name grep file
	name=$1
	grep=$2
	file=$3

	cat <<_EOF_
/* AUTO */
void
$name (int arg)
{
	switch (arg) {
_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+"${grep}"[[:space:]]*" \
		$include_dir/$file | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\tcase %s:\n\t\t(void)printf(\"%s\");\n\t\tbreak;\n", $i, $i }'
cat <<_EOF_
	default: /* Should not reach */
		(void)printf("<invalid=%d>", arg);
	}
}

_EOF_
}

#
# Automatically generates a C function used when the argument
# maps to a #definition
#
auto_if_type () {
	local name grep file
	name=$1
	grep=$2
	file=$3

	cat <<_EOF_
/* AUTO */
void
$name (int arg)
{
_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+"${grep}"[[:space:]]*" \
		$include_dir/$file | \
	awk '{ printf "\t"; \
		if (NR > 1) \
			printf "else " ; \
		printf "if (arg == %s) \n\t\tprintf(\"%s\");\n", $2, $2 }'
cat <<_EOF_
	else /* Should not reach */
		(void)printf("<invalid=%d>", arg);
}

_EOF_
}

# C start

cat <<_EOF_
#include <stdio.h>
#include <sys/param.h>
#include <sys/event.h>
#include <sys/fcntl.h>
#include <sys/stat.h>
#include <sys/unistd.h>
#define _KERNEL
#include <sys/mman.h>
#undef _KERNEL
#include <sys/wait.h>
#include <sys/proc.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <sys/poll.h>
#include <sys/ptrace.h>
#include <sys/resource.h>
#include <sys/reboot.h>
#include <sys/uio.h>
#include <sys/ktrace.h>
#include <sched.h>
#if 0
#include <sys/linker.h>
#define _KERNEL
#include <sys/thr.h>
#undef _KERNEL
#include <sys/extattr.h>
#include <sys/acl.h>
#include <aio.h>
#endif
#include <sys/sem.h>
#include <sys/ipc.h>
#if 0
#include <sys/rtprio.h>
#endif
#include <sys/shm.h>
#if 0
#include <nfsserver/nfs.h>
#endif
#include <ufs/ufs/quota.h>
#include <sys/syslog.h>

#include "kdump_subr.h"

_EOF_

auto_orz_type "modename" "S_[A-Z]+[[:space:]]+[0-6]{7}" "sys/stat.h" "%#o"
auto_fflags_type "doflagsname" "O_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/fcntl.h"
auto_orz_type "atflagsname" "AT_[A-Z_]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/fcntl.h"
auto_or_type "accessmodename" "[A-Z]_OK[[:space:]]+0?x?[0-9A-Fa-f]+" "sys/unistd.h"
auto_or_type "mmapprotname" "PROT_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/mman.h"
auto_or_type "mmapflagsname" "(__)?MAP_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/mman.h"
auto_orz_type "wait4optname" "W[A-Z]+[[:space:]]+[0-9]+" "sys/wait.h"
#auto_or_type "timerflagsname" "TIMER_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/time.h"
#auto_or_type "getfsstatflagsname" "MNT_[A-Z]+[[:space:]]+[1-9][0-9]*" "sys/mount.h"
auto_or_type "mountflagsname" "MNT_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mount.h"
auto_or_type "rebootoptname" "RB_[A-Z]+[[:space:]]+0x[0-9]+" "sys/reboot.h"
auto_or_type "flockname" "LOCK_[A-Z]+[[:space:]]+0x[0-9]+" "sys/fcntl.h"
#auto_or_type "thrcreateflagsname" "THR_[A-Z]+[[:space:]]+0x[0-9]+" "sys/thr.h"
auto_or_type "mlockallname" "MCL_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mman.h"
auto_orz_type "shmatname" "SHM_[A-Z]+[[:space:]]+[0-9]{6}" "sys/shm.h"
#auto_or_type "nfssvcname" "NFSSVC_[A-Z]+[[:space:]]+0x[0-9]+" "nfsserver/nfs.h"
#
auto_switch_type "whencename" "SEEK_[A-Z]+[[:space:]]+[0-9]+" "sys/unistd.h"
auto_switch_type "pathconfname" "_PC_[_A-Z]+[[:space:]]+[0-9]+" "sys/unistd.h"
auto_switch_type "rlimitname" "RLIMIT_[A-Z]+[[:space:]]+[0-9]+" "sys/resource.h"
auto_switch_type "shutdownhowname" "SHUT_[A-Z]+[[:space:]]+[0-9]+" "sys/socket.h"
auto_switch_type "prioname" "PRIO_[A-Z]+[[:space:]]+[0-9]" "sys/resource.h"
auto_switch_type "madvisebehavname" "_?MADV_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
auto_switch_type "msyncflagsname" "MS_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mman.h"
auto_switch_type "clocktypename" "CLOCK_[_A-Z]+[[:space:]]+[0-9]+" "sys/_time.h"
#auto_switch_type "schedpolicyname" "SCHED_[A-Z]+[[:space:]]+[0-9]+" "sched.h"
#auto_switch_type "kldunloadfflagsname" "LINKER_UNLOAD_[A-Z]+[[:space:]]+[0-9]+" "sys/linker.h"
#auto_switch_type "extattrctlname" "EXTATTR_NAMESPACE_[A-Z]+[[:space:]]+0x[0-9]+" "sys/extattr.h"
#auto_switch_type "kldsymcmdname" "KLDSYM_[A-Z]+[[:space:]]+[0-9]+" "sys/linker.h"
#auto_switch_type "sendfileflagsname" "SF_[A-Z]+[[:space:]]+[0-9]+" "sys/socket.h"
#auto_switch_type "acltypename" "ACL_TYPE_[A-Z4_]+[[:space:]]+0x[0-9]+" "sys/acl.h"
auto_switch_type "rusagewho" "RUSAGE_[A-Z]+[[:space:]]+[-0-9()]+" "sys/resource.h"
auto_orz_type "sigactionflagname" "SA_[A-Z]+[[:space:]]+0x[0-9]+" "sys/signal.h"
auto_switch_type "sigprocmaskhowname" "SIG_[A-Z]+[[:space:]]+[0-9]+" "sys/signal.h"
auto_switch_type "sigill_name" "ILL_[A-Z]+[[:space:]]+[0-9]+" "sys/siginfo.h"
auto_switch_type "sigtrap_name" "TRAP_[A-Z]+[[:space:]]+[0-9]+" "sys/siginfo.h"
auto_switch_type "sigemt_name" "EMT_[A-Z]+[[:space:]]+[0-9]+" "sys/siginfo.h"
auto_switch_type "sigfpe_name" "FPE_[A-Z]+[[:space:]]+[0-9]+" "sys/siginfo.h"
auto_switch_type "sigbus_name" "BUS_[A-Z]+[[:space:]]+[0-9]+" "sys/siginfo.h"
auto_switch_type "sigsegv_name" "SEGV_[A-Z]+[[:space:]]+[0-9]+" "sys/siginfo.h"
auto_switch_type "sigchld_name" "CLD_[A-Z]+[[:space:]]+[0-9]+" "sys/siginfo.h"
#auto_switch_type "lio_listioname" "LIO_(NO)?WAIT[[:space:]]+[0-9]+" "aio.h"
auto_switch_type "minheritname" "MAP_INHERIT_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
auto_switch_type "quotactlname" "Q_[A-Z]+[[:space:]]+0x[0-9]+" "ufs/ufs/quota.h"
#auto_if_type "sockdomainname" "PF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
auto_if_type "sockfamilyname" "AF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
auto_if_type "sockipprotoname" "IPPROTO_[[:alnum:]]+[[:space:]]+" "netinet/in.h"
auto_switch_type "sockoptname" "SO_[A-Z]+[[:space:]]+0x[0-9]+" "sys/socket.h"
#auto_switch_type "ptraceopname" "PT_[[:alnum:]_]+[[:space:]]+[0-9]+" "sys/ptrace.h"
# exclude KTRFAC_MASK
auto_orz_type "ktracefacname" "KTRFAC_[^M][[:alnum:]_]+" "sys/ktrace.h"
auto_switch_type "itimername" "ITIMER_[[:alnum:]_]+" "sys/time.h"
auto_switch_type "evfiltername" "EVFILT_[[:alnum:]_]+[[:space:]]+[(]" "sys/event.h"
auto_orz_type "pollfdeventname" "POLL[^_][[:alnum:]_]+[[:space:]]+0x" "sys/poll.h"
# exclude EV_{SYSFLAGS,FLAG1}
auto_orz_type "evflagsname" "EV_[^S][A-Z]+[[:space:]]+0x" "sys/event.h"
auto_orz_type "syslogflagname" "LOG_[A-Z]+[[:space:]]+0x0*[1248]0*[[:space:]]" "sys/syslog.h"

cat <<_EOF_
/*
 * AUTO - Special
 * F_ is used to specify fcntl commands as well as arguments. Both sets are
 * grouped in fcntl.h, and this awk script grabs the first group.
 */
void
fcntlcmdname (int arg)
{
	switch (arg1) {
_EOF_
egrep "^#[[:space:]]*define[[:space:]]+F_[A-Z_]+[[:space:]]+[0-9]+[[:space:]]*" \
	$include_dir/sys/fcntl.h | \
	awk 'BEGIN { o=0 } { for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		if (o <= $(i+1)) \
			printf "\tcase %s:\n\t\t(void)printf(\"%s\");\n\t\tbreak;\n", $i, $i; \
		else \
			exit; \
		o = $(i+1) }'
cat <<_EOF_
	default: /* Should not reach */
		(void)printf("<invalid=%d>", arg1);
	}
	if (arg1 == F_SETFD) {
		(void)putchar(',');
		if (arg == FD_CLOEXEC)
			(void)printf("FD_CLOEXEC");
		else if (arg == 0)
			(void)printf("0");
		else
			(void)printf("<invalid>%#x", arg);

	} else if (arg1 == F_SETFL) {
		(void)putchar(',');
		doflagsname(arg, 0);
	} else if (!fancy || (arg1 != F_GETFD && arg1 != F_GETFL && arg1 != F_ISATTY))
		(void)printf(",%#x", arg);
}

/*
 * AUTO - Special
 *
 * The send and recv functions have a flags argument which can be
 * set to 0. There is no corresponding #define. The auto_ functions
 * detect this as "invalid", which is incorrect here.
 */
void
sendrecvflagsname (int flags)
{
	int	or = 0;

	if (flags == 0) {
		(void)printf("0");
		return;
	}

	printf("%#x<", flags);
_EOF_
egrep "^#[[:space:]]*define[[:space:]]+MSG_[_A-Z]+[[:space:]]+0x[0-9]+[[:space:]]*" $include_dir/sys/socket.h | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\tif(!((flags>0)^((%s)>0)))\n\t\tif_print_or(flags, %s, or);\n", $i, $i }'
cat <<_EOF_
	printf(">");
}

/*
 * AUTO - Special
 *
 * SOCK_NONBLOCK and SOCK_CLOEXEC are or'ed into the type
 */
static void
dosocktypename (int arg, int show_type)
{
	int	type = arg & 0xff;		/* XXX */
	int	or = 0;
	
	printf("%#x<", arg);
	if (show_type || type) {
		or = 1;
		switch (type) {
_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+SOCK_[A-Z]+[[:space:]]+[1-9]+[0-9]*[[:space:]]*" \
		$include_dir/sys/socket.h | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\t\tcase %s:\n\t\t\t(void)printf(\"%s\");\n\t\t\tbreak;\n", $i, $i }'
cat <<_EOF_
		default: /* Should not reach */
			(void)printf("<invalid=%d>", arg);
		}
	}

_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+SOCK_[A-Z]+[[:space:]]+0x[0-9]+[[:space:]]*" \
		$include_dir/sys/socket.h | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\tif_print_or(arg, %s, or);\n", $i }'
cat <<_EOF_
	printf(">");
}

void
socktypename (int arg)
{
	dosocktypename(arg, 1);
}

void
sockflagsname (int arg)
{
	dosocktypename(arg, 0);
}

void
quotactlcmdname(int cmd)
{
	printf("%#x<QCMD(", cmd);
	quotactlname(cmd >> SUBCMDSHIFT);
	switch (cmd & SUBCMDMASK) {
	case USRQUOTA:
		printf(",%s)>", "USRQUOTA");
		break;
	case GRPQUOTA:
		printf(",%s)>", "GRPQUOTA");
		break;
	default:
		printf(",<invalid>%#x)>", cmd & SUBCMDMASK);
		break;
	}
}

/*
 * AUTO - Special
 *
 * kevent() NOTE_* interpretation depends on the filter type
 */
void
evfflagsname (int filter, int fflags)
{
	int	or = 0;

	if (fflags == 0) {
		printf("0<>");
		return;
	}
	printf("%#x<", fflags);
	switch (filter) {
	case EVFILT_READ:
	case EVFILT_WRITE:
		if_print_or(fflags, NOTE_LOWAT, or);
		if_print_or(fflags, NOTE_EOF, or);
		break;
	case EVFILT_VNODE:
_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+NOTE_.[^O][A-Z]+[[:space:]]+0x[01248]{4}[^[:alnum:]]" \
		$include_dir/sys/event.h | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\t\tif_print_or(fflags, %s, or);\n", $i }'
cat <<_EOF_
		break;
	case EVFILT_PROC:
_EOF_
	egrep "^#[[:space:]]*define[[:space:]]+NOTE_[^S][A-Z]+[[:space:]]+0x[01248]{8}" \
		$include_dir/sys/event.h | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\t\tif_print_or(fflags, %s, or);\n", $i }'
cat <<_EOF_
		break;
	}
	printf(">");
}

_EOF_
@


1.30
log
@Format the flags argument to sendsyslog()

ok deraadt@@ bluhm@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.29 2016/01/14 05:27:42 guenther Exp $
d362 1
@


1.29
log
@Display struct event more like other structs: show all members and use cpp
define names.  Use the mksubr infrastructure for EVFILT_*,
EV_*, and (with some kludging) NOTE_* values.  If EV_ERROR is set,
include the errno string for the data member.

Also, do MSG_* parsing on the msg_flags member of struct msghdr.

ok millert@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.28 2015/05/17 01:22:01 deraadt Exp $
d303 1
d364 1
@


1.28
log
@isatty() is used by stdio to determine the buffering mode.  Add a F_ISATTY
option to fcntl(), so that isatty() can use this rather than than the bloated
ioctl() interface.  Reducing uses of ioctl() by libc makes it easier to
constrain programs with various kinds of systrace sandboxes.
ok guenther, previously discussed as a concept with nicm
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.27 2015/04/17 06:14:36 guenther Exp $
d264 1
d357 1
d360 3
d504 47
@


1.27
log
@The first argument to socket/socketpair is an address family, not a protocol
family.  (sysctl(3) is practically the only place where PF_* is correct)
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.26 2015/01/18 20:05:20 guenther Exp $
d397 1
a397 1
	} else if (!fancy || (arg1 != F_GETFD && arg1 != F_GETFL))
@


1.26
log
@Eliminate a gcc warnings by not #defining _KERNEL when pulling in
<sys/socket.h>: it doesn't expose anything kdump cares about.
Also, COMPAT_43 is dead

warning noted by deraadt@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.25 2014/12/11 05:44:12 guenther Exp $
d351 1
a351 1
auto_if_type "sockdomainname" "PF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
@


1.25
log
@Make quotactlcmd formatting consistent with others
Fix some indentation in the generated .c file
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.24 2014/12/08 21:23:44 guenther Exp $
a271 2
#define _KERNEL
#define COMPAT_43
a272 1
#undef _KERNEL
@


1.24
log
@Convert syscall argument handling from a giant switch to a giant table.
While at it, use formatters for fds, counts, ids of all types, and "small
buffer sizes" that always show them in decimal, while paths, pointers, and
"big buffer sizes" get formatters that always show them in hex.  The -d
option only affects args when the -n option is used or for unknown syscalls,
as well as syscall return values, and unrecognized ioctls.

ok otto@@ millert@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.23 2014/10/13 03:46:33 guenther Exp $
d455 1
a455 1
		printf "\tcase %s:\n\t\t(void)printf(\"%s\");\n\t\tbreak;\n", $i, $i }'
d489 1
a489 1
	printf("QCMD(");
d493 1
a493 1
		printf(",%s)", "USRQUOTA");
d496 1
a496 1
		printf(",%s)", "GRPQUOTA");
d499 1
a499 1
		printf(",<invalid>%#x)", cmd & SUBCMDMASK);
@


1.23
log
@Add dumping of struct dqblk done by quotactl(2)

ok millert@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.22 2014/09/17 19:12:55 guenther Exp $
d80 1
a80 1
		(void)printf("<invalid>%ld", (long)arg);
d118 1
a118 1
		(void)printf("<invalid>%ld", (long)arg);
d177 1
a177 1
 * A wrapper of the above to use with pn()
d185 6
d222 1
a222 1
		(void)printf("<invalid=%ld>", (long)arg);
d253 1
a253 1
		(void)printf("<invalid=%ld>", (long)arg);
d319 2
a320 2
#auto_or_type "mountflagsname" "MNT_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mount.h"
#auto_or_type "rebootoptname" "RB_[A-Z]+[[:space:]]+0x[0-9]+" "sys/reboot.h"
d331 1
a331 1
#auto_switch_type "prioname" "PRIO_[A-Z]+[[:space:]]+[0-9]" "sys/resource.h"
d369 1
a369 1
fcntlcmdname (int cmd, int arg)
d371 1
a371 1
	switch (cmd) {
d386 1
a386 1
		(void)printf("<invalid=%ld>", (long)cmd);
d388 1
a388 1
	if (cmd == F_SETFD) {
d394 2
a395 6
		else {
			if (decimal)
				(void)printf("<invalid>%ld", (long)arg);
			else
				(void)printf("<invalid>%#lx", (long)arg);
		}
d397 1
a397 4
	} else if (cmd == F_SETFL) {
		(void)putchar(',');
		flagsname(arg);
	} else if (!fancy || (cmd != F_GETFD && cmd != F_GETFL)) {
d399 3
a401 5
		if (decimal)
			(void)printf("%ld", (long)arg);
		else
			(void)printf("%#lx", (long)arg);
	}
@


1.22
log
@Add display of the flags to pipe2, dup3, and accept4, display of
MSG_CMSG_CLOEXEC in recvmsg, and display of SOCK_{CLOEXEC,NONBLOCK}
in socket and socketpair.
Do _not_ display the O_ACCMODE bits in the arg to fcntl(F_SETFD)

ok miod@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.21 2014/08/17 22:43:07 guenther Exp $
d347 1
a347 1
#auto_switch_type "quotactlname" "Q_[A-Z]+[[:space:]]+0x[0-9]+" "ufs/ufs/quota.h"
d487 18
@


1.21
log
@Use %#o instead of %#x for mode_t
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.20 2014/07/02 06:32:07 otto Exp $
d141 1
a141 1
$name (int arg)
d143 2
d146 16
a161 13
	switch (arg & O_ACCMODE) {
	case O_RDONLY:
		printf("O_RDONLY");
		break;
	case O_WRONLY:
		printf("O_WRONLY");
		break;
	case O_RDWR:
		printf("O_RDWR");
		break;
	default:
		printf("<invalid>O_ACCMODE");
		break;
d171 1
a171 1
		printf "\tif (arg & %s) printf (\"|%%s\", \"%s\");\n", $i, $i }'
d176 10
d305 1
a305 1
auto_fflags_type "flagsname" "O_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/fcntl.h"
a351 1
auto_switch_type "socktypename" "SOCK_[A-Z]+[[:space:]]+[1-9]+[0-9]*" "sys/socket.h"
d426 1
a426 1
egrep "^#[[:space:]]*define[[:space:]]+MSG_[A-Z]+[[:space:]]+0x[0-9]+[[:space:]]*" $include_dir/sys/socket.h | \
d434 53
@


1.20
log
@properly process minherit(2) flags; ok guenther@@ matthew@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.19 2014/06/27 20:50:43 matthew Exp $
d60 1
d68 1
a68 1
	printf("%#x<", arg);
d94 1
d106 1
a106 1
	printf("%#x<", arg);
d289 1
a289 1
auto_orz_type "modename" "S_[A-Z]+[[:space:]]+[0-6]{7}" "sys/stat.h"
@


1.19
log
@Cleanup support for legacy mmap flags

Move all legacy MAP_FOO values behind #ifndef _KERNEL and redefine
them to either be aliases for existing flags (e.g., MAP_COPY ->
MAP_PRIVATE) or 0.

Also, add MAP_OLDFOO defines (behind #ifndef _KERNEL) so the kernel
and kdump can remain compatible with current OpenBSD binaries.

ok deraadt
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.18 2013/12/21 07:32:35 guenther Exp $
d329 1
a329 1
auto_switch_type "minheritname" "INHERIT_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
@


1.18
log
@Recognize itimer and ktrace facility names to {get,set}itimer() and ktrace()

ok otto@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.17 2013/07/03 23:04:34 guenther Exp $
d244 1
d246 1
@


1.17
log
@For consistency, move the functions that aren't generated at build-time
from mksubr to kdump.c

ok otto@@ millert@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.16 2013/07/01 17:16:46 guenther Exp $
d258 2
d335 2
@


1.16
log
@Tweak regexp so that RUSAGE_CHILDREN will be matched and displayed
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.15 2013/06/17 19:11:54 guenther Exp $
a279 180

/*
 * These are simple support macros. print_or utilizes a variable
 * defined in the calling function to track whether or not it should
 * print a logical-OR character ('|') before a string. if_print_or
 * simply handles the necessary "if" statement used in many lines
 * of this file.
 */
#define print_or(str,orflag) do {                  \\
	if (orflag) putchar('|'); else orflag = 1; \\
	printf ("%s", str); }                      \\
	while (0)
#define if_print_or(i,flag,orflag) do {            \\
	if ((i & flag) == flag)                    \\
	print_or(#flag,orflag); }                  \\
	while (0)

/* MANUAL */
extern const char *const sys_signame[NSIG];
void
signame (int sig)
{
	if (sig > 0 && sig < NSIG)
		(void)printf("SIG%s", sys_signame[sig]);
	else
		(void)printf("SIG %d", sig);
}

/* MANUAL */
void
sigset (int ss)
{
	int	or = 0;
	int	cnt = 0;
	int	i;

	for (i = 1; i < NSIG; i++)
		if (sigismember(&ss, i))
			cnt++;
	if (cnt > (NSIG-1)/2) {
		ss = ~ss;
		putchar('~');
	}

	if (ss == 0) {
		(void)printf("0<>");
		return;
	}

	printf("%#x<", ss);
	for (i = 1; i < NSIG; i++)
		if (sigismember(&ss, i)) {
			if (or) putchar('|'); else or=1;
			signame(i);
		}
	printf(">");
}

/* MANUAL */
void
semctlname (int cmd)
{
	switch (cmd) {
	case GETNCNT:
		(void)printf("GETNCNT");
		break;
	case GETPID:
		(void)printf("GETPID");
		break;
	case GETVAL:
		(void)printf("GETVAL");
		break;
	case GETALL:
		(void)printf("GETALL");
		break;
	case GETZCNT:
		(void)printf("GETZCNT");
		break;
	case SETVAL:
		(void)printf("SETVAL");
		break;
	case SETALL:
		(void)printf("SETALL");
		break;
	case IPC_RMID:
		(void)printf("IPC_RMID");
		break;
	case IPC_SET:
		(void)printf("IPC_SET");
		break;
	case IPC_STAT:
		(void)printf("IPC_STAT");
		break;
	default: /* Should not reach */
		(void)printf("<invalid=%ld>", (long)cmd);
	}
}

/* MANUAL */
void
shmctlname (int cmd) {
	switch (cmd) {
	case IPC_RMID:
		(void)printf("IPC_RMID");
		break;
	case IPC_SET:
		(void)printf("IPC_SET");
		break;
	case IPC_STAT:
		(void)printf("IPC_STAT");
		break;
	default: /* Should not reach */
		(void)printf("<invalid=%ld>", (long)cmd);
	}
}

/* MANUAL */
void
semgetname (int flag) {
	int	or = 0;
	if_print_or(flag, IPC_CREAT, or);
	if_print_or(flag, IPC_EXCL, or);
	if_print_or(flag, SEM_R, or);
	if_print_or(flag, SEM_A, or);
	if_print_or(flag, (SEM_R>>3), or);
	if_print_or(flag, (SEM_A>>3), or);
	if_print_or(flag, (SEM_R>>6), or);
	if_print_or(flag, (SEM_A>>6), or);
}

/*
 * MANUAL
 *
 * Only used by SYS_open. Unless O_CREAT is set in flags, the
 * mode argument is unused (and often bogus and misleading).
 */
void
flagsandmodename (int flags, int mode) {
	flagsname (flags);
	if ((flags & O_CREAT) == O_CREAT) {
		(void)putchar(',');
		modename (mode);
	} else if (!fancy) {
		(void)putchar(',');
		if (decimal) {
			(void)printf("<unused>%ld", (long)mode);
		} else {
			(void)printf("<unused>%#lx", (long)mode);
		}
	}
}

void
clockname (int clockid)
{
	clocktypename(__CLOCK_TYPE(clockid));
	if (__CLOCK_PTID(clockid) != 0)
		printf("(%d)", __CLOCK_PTID(clockid));
}

/*
 * MANUAL
 *
 * [g|s]etsockopt's level argument can either be SOL_SOCKET or a value
 * referring to a line in /etc/protocols . It might be appropriate
 * to use getprotoent(3) here.
 */
void
sockoptlevelname (int level)
{
	if (level == SOL_SOCKET) {
		(void)printf("SOL_SOCKET");
	} else {
		if (decimal) {
			(void)printf("%ld", (long)level);
		} else {
			(void)printf("%#lx", (long)level);
		}
	}
}
@


1.15
log
@Add support for the _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME options,
including CLOCK_{PROCESS,THREAD}_CPUTIME_ID constants and
{clock,pthread}_getcpuclockid() functions.

Worked out at t2k13 with help from tedu@@ and matthew@@ and testing by aja@@
ok matthew@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.14 2012/12/25 09:35:51 guenther Exp $
d494 1
a494 1
auto_switch_type "rusagewho" "RUSAGE_[A-Z]+[[:space:]]+[-0-9]+" "sys/resource.h"
@


1.14
log
@Report macro names for the second argument to shutdown(), getrusage(),
pathconf(), and fpathconf(), and for poll()'s INFTIM.
When open()'s flag arg doesn't include O_CREAT, don't show the third argument
unless th e-n option is given.  Ditto for fcntl()'s F_GETFD and F_GETFL ops.
Show sysctl()'s KERN_PROC_KTHREAD as "kthread".

ok otto@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.13 2012/07/21 07:16:03 matthew Exp $
d432 8
d487 1
a487 1
auto_switch_type "clockname" "CLOCK_[A-Z]+[[:space:]]+[0-9]+" "sys/_time.h"
@


1.13
log
@Make kdump recognize the __MAP_NOREPLACE flag.

ok deraadt
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.12 2012/07/08 10:23:36 guenther Exp $
d254 1
a418 1
	(void)putchar(',');
d420 1
d422 2
a423 1
	} else {
d473 1
d475 1
a475 1
#auto_switch_type "shutdownhowname" "SHUT_[A-Z]+[[:space:]]+[0-9]+" "sys/socket.h"
d486 1
d532 2
a533 2
	(void)putchar(',');
	if (cmd == F_GETFD || cmd == F_SETFD) {
d544 1
d546 1
d548 2
a549 1
	} else {
@


1.12
log
@Handle the O_ACCMODE bits correctly, so that O_RDONLY is displayed
even when other flag bits are set

ok otto@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.11 2012/06/20 07:30:01 guenther Exp $
d458 1
a458 1
auto_or_type "mmapflagsname" "MAP_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/mman.h"
@


1.11
log
@CLOCK_* moved from sys/time.h to sys/_time.h

ok otto@@ kettenis@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.10 2012/04/12 12:33:04 deraadt Exp $
d51 1
a51 1
# S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH
d123 51
d454 1
a454 1
auto_or_type "flagsname" "O_[A-Z]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/fcntl.h"
@


1.10
log
@remove rfork(); ok guenther miod
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.9 2012/03/19 09:05:39 guenther Exp $
d425 1
a425 1
auto_switch_type "clockname" "CLOCK_[A-Z]+[[:space:]]+[0-9]+" "sys/time.h"
@


1.9
log
@Add tracing and dumping of "pointer to struct" syscall arguments for
structs timespec, timeval, sigaction, and rlimit.

ok otto@@ jsing@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.8 2012/02/20 21:04:35 guenther Exp $
a416 1
#auto_or_type "rforkname" "RF[A-Z]+[[:space:]]+\([0-9]+<<[0-9]+\)" "sys/unistd.h"
@


1.8
log
@- add more ptrace() ops
- be robust against a ktrace file the contains a record with
  ktr_len==SIZE_MAX, instead of reallocating its buffer to zero size
- format the clockid_t argument to clock_*() and __thrsleep() as CLOCK_*
- format the sigset_t argument to sigprocmask() and __thrsigdivert(), the
  return from sigprocmask(), and the mask reported for PSIG records
  as a bitset of SIG* values, except that if most the bits are set
  then invert it and prefix with '~'
- show the next level of the kern.proc sysctl
- __tfork() creates procs, so do the mappidtoemul() handling
- refactor ktrstat()'s time printing bits and fix a whitespace glitch
  in its output
- reduce stack usage in ktrstruct()
- a value of zero is not an error for mode bits (S_*), atflag bits
  (AT_*), wait options (W*), or shmat flags (SHM_*)

ok otto@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.7 2011/09/19 22:00:37 deraadt Exp $
d433 1
@


1.7
log
@teach kdump about "siginfo-style" signal sub-codes, and the (currently)
limited subset of information the kernel supplies.
ok miod pirofti
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.6 2011/07/19 18:20:12 matthew Exp $
d86 37
d238 1
a238 1
	printf (str); }                            \\
d258 30
d402 1
a402 1
auto_or_type "modename" "S_[A-Z]+[[:space:]]+[0-6]{7}" "sys/stat.h"
d404 1
a404 1
auto_or_type "atflagsname" "AT_[A-Z_]+[[:space:]]+0x[0-9A-Fa-f]+" "sys/fcntl.h"
d408 2
a409 1
auto_or_type "wait4optname" "W[A-Z]+[[:space:]]+[0-9]+" "sys/wait.h"
d416 1
a416 1
auto_or_type "shmatname" "SHM_[A-Z]+[[:space:]]+[0-9]{6}" "sys/shm.h"
d426 1
@


1.6
log
@Add fancy kdump support for the openat(2) system calls.

ok otto@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.5 2011/07/08 19:29:44 otto Exp $
d365 7
@


1.5
log
@Support sending struct info to kdump. So far for struct stat and
struct sockaddress; mostly from freebsd. ok deraadt@@ tedu@@ nicm@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.4 2011/07/04 06:44:52 otto Exp $
d337 1
d386 1
a386 1
egrep "^#[[:space:]]*define[[:space:]]+F_[A-Z]+[[:space:]]+[0-9]+[[:space:]]*" \
@


1.4
log
@Big restructuring of the main switch making it much more readable.
Also, handle offset_t (long long) args and padding in a consistent manner.
ok deraadt@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.3 2011/06/20 17:54:48 otto Exp $
d368 1
a368 1
#auto_if_type "sockfamilyname" "AF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
@


1.3
log
@more fancy kdump output, mostly from FreeBSD; ok deraadt@@ tedu@@
@
text
@d2 1
a2 1
# $OpenBSD: mksubr,v 1.3 2011/06/20 17:51:33 otto Exp $
d298 1
a298 1
flagsandmodename (int flags, int mode, int decimal) {
d320 1
a320 1
sockoptlevelname (int level, int decimal)
d381 1
a381 1
fcntlcmdname (int cmd, int arg, int decimal)
@


1.2
log
@Local changes to make this work on OpenBSD. Not used functions disabled for
now.
@
text
@d2 1
a2 1
# $OpenBSD$
d337 1
a337 1
#auto_or_type "accessmodename" "[A-Z]_OK[[:space:]]+0?x?[0-9A-Fa-f]+" "sys/unistd.h"
d340 1
a340 1
#auto_or_type "wait4optname" "W[A-Z]+[[:space:]]+[0-9]+" "sys/wait.h"
d344 1
a344 1
#auto_or_type "flockname" "LOCK_[A-Z]+[[:space:]]+0x[0-9]+" "sys/fcntl.h"
d346 2
a347 2
#auto_or_type "mlockallname" "MCL_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mman.h"
#auto_or_type "shmatname" "SHM_[A-Z]+[[:space:]]+[0-9]{6}+" "sys/shm.h"
d351 2
a352 2
#auto_switch_type "whencename" "SEEK_[A-Z]+[[:space:]]+[0-9]+" "sys/unistd.h"
#auto_switch_type "rlimitname" "RLIMIT_[A-Z]+[[:space:]]+[0-9]+" "sys/resource.h"
d355 2
a356 2
#auto_switch_type "madvisebehavname" "_?MADV_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
#auto_switch_type "msyncflagsname" "MS_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mman.h"
d365 1
a365 1
#auto_switch_type "minheritname" "INHERIT_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
d367 1
a367 1
#auto_if_type "sockdomainname" "PF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
d369 3
a371 3
#auto_if_type "sockipprotoname" "IPPROTO_[[:alnum:]]+[[:space:]]+" "netinet/in.h"
#auto_switch_type "sockoptname" "SO_[A-Z]+[[:space:]]+0x[0-9]+" "sys/socket.h"
#auto_switch_type "socktypename" "SOCK_[A-Z]+[[:space:]]+[1-9]+[0-9]*" "sys/socket.h"
@


1.1
log
@mksubr from freebsd, to be used to generate flags to name translation
for kdump.  Added missing license to the file, with the kind
permission of the author David Kirchner. Not used yet. ok miod@@
@
text
@d152 1
d158 1
d160 1
d170 1
d178 1
d181 1
d183 1
d185 1
d187 1
d209 1
a209 1
extern char *signames[]; /* from kdump.c */
d214 1
a214 1
		(void)printf("SIG%s",signames[sig]);
d337 1
a337 1
auto_or_type "accessmodename" "[A-Z]_OK[[:space:]]+0?x?[0-9A-Fa-f]+" "sys/unistd.h"
d340 23
a362 23
auto_or_type "wait4optname" "W[A-Z]+[[:space:]]+[0-9]+" "sys/wait.h"
auto_or_type "getfsstatflagsname" "MNT_[A-Z]+[[:space:]]+[1-9][0-9]*" "sys/mount.h"
auto_or_type "mountflagsname" "MNT_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mount.h"
auto_or_type "rebootoptname" "RB_[A-Z]+[[:space:]]+0x[0-9]+" "sys/reboot.h"
auto_or_type "flockname" "LOCK_[A-Z]+[[:space:]]+0x[0-9]+" "sys/fcntl.h"
auto_or_type "thrcreateflagsname" "THR_[A-Z]+[[:space:]]+0x[0-9]+" "sys/thr.h"
auto_or_type "mlockallname" "MCL_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mman.h"
auto_or_type "shmatname" "SHM_[A-Z]+[[:space:]]+[0-9]{6}+" "sys/shm.h"
auto_or_type "rforkname" "RF[A-Z]+[[:space:]]+\([0-9]+<<[0-9]+\)" "sys/unistd.h"
auto_or_type "nfssvcname" "NFSSVC_[A-Z]+[[:space:]]+0x[0-9]+" "nfsserver/nfs.h"

auto_switch_type "whencename" "SEEK_[A-Z]+[[:space:]]+[0-9]+" "sys/unistd.h"
auto_switch_type "rlimitname" "RLIMIT_[A-Z]+[[:space:]]+[0-9]+" "sys/resource.h"
auto_switch_type "shutdownhowname" "SHUT_[A-Z]+[[:space:]]+[0-9]+" "sys/socket.h"
auto_switch_type "prioname" "PRIO_[A-Z]+[[:space:]]+[0-9]" "sys/resource.h"
auto_switch_type "madvisebehavname" "_?MADV_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
auto_switch_type "msyncflagsname" "MS_[A-Z]+[[:space:]]+0x[0-9]+" "sys/mman.h"
auto_switch_type "schedpolicyname" "SCHED_[A-Z]+[[:space:]]+[0-9]+" "sched.h"
auto_switch_type "kldunloadfflagsname" "LINKER_UNLOAD_[A-Z]+[[:space:]]+[0-9]+" "sys/linker.h"
auto_switch_type "extattrctlname" "EXTATTR_NAMESPACE_[A-Z]+[[:space:]]+0x[0-9]+" "sys/extattr.h"
auto_switch_type "kldsymcmdname" "KLDSYM_[A-Z]+[[:space:]]+[0-9]+" "sys/linker.h"
auto_switch_type "sendfileflagsname" "SF_[A-Z]+[[:space:]]+[0-9]+" "sys/socket.h"
auto_switch_type "acltypename" "ACL_TYPE_[A-Z4_]+[[:space:]]+0x[0-9]+" "sys/acl.h"
d364 9
a372 9
auto_switch_type "lio_listioname" "LIO_(NO)?WAIT[[:space:]]+[0-9]+" "aio.h"
auto_switch_type "minheritname" "INHERIT_[A-Z]+[[:space:]]+[0-9]+" "sys/mman.h"
auto_switch_type "quotactlname" "Q_[A-Z]+[[:space:]]+0x[0-9]+" "ufs/ufs/quota.h"
auto_if_type "sockdomainname" "PF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
auto_if_type "sockfamilyname" "AF_[[:alnum:]]+[[:space:]]+" "sys/socket.h"
auto_if_type "sockipprotoname" "IPPROTO_[[:alnum:]]+[[:space:]]+" "netinet/in.h"
auto_switch_type "sockoptname" "SO_[A-Z]+[[:space:]]+0x[0-9]+" "sys/socket.h"
auto_switch_type "socktypename" "SOCK_[A-Z]+[[:space:]]+[1-9]+[0-9]*" "sys/socket.h"
auto_switch_type "ptraceopname" "PT_[[:alnum:]_]+[[:space:]]+[0-9]+" "sys/ptrace.h"
a418 25
	}
}

/*
 * AUTO - Special
 *
 * The only reason this is not fully automated is due to the
 * grep -v RTP_PRIO statement. A better egrep line should
 * make this capable of being a auto_switch_type() function.
 */
void
rtprioname (int func)
{
	switch (func) {
_EOF_
egrep "^#[[:space:]]*define[[:space:]]+RTP_[A-Z]+[[:space:]]+0x[0-9]+[[:space:]]*" \
	$include_dir/sys/rtprio.h | grep -v RTP_PRIO | \
	awk '{ for (i = 1; i <= NF; i++) \
		if ($i ~ /define/) \
			break; \
		++i; \
		printf "\tcase %s:\n\t\t(void)printf(\"%s\");\n\t\tbreak;\n", $i, $i }'
cat <<_EOF_
	default: /* Should not reach */
		(void)printf("<invalid=%ld>", (long)func);
@

