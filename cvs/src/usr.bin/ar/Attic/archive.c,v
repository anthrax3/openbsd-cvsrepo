head	1.14;
access;
symbols
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.14
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.12
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.10
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.8
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2013.07.05.21.37.19;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2013.04.17.20.17.32;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.13.18.13.28;	author sobrado;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.35;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.12.20.58.08;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.05;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.04.22.12.09;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.14.18.14.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.08.29.13.07.01;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	97.11.05.19.47.08;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.17.20.47.08;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	97.05.31.08.17.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.02.00.40.57;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.53;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.53;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove usr.bin/ar and usr.bin/ranlib, no longer building anything. Move their
manpages to share/man5 since they are still worth keeping.
@
text
@/*	$OpenBSD: archive.c,v 1.13 2013/04/17 20:17:32 deraadt Exp $	*/
/*	$NetBSD: archive.c,v 1.7 1995/03/26 03:27:46 glass Exp $	*/

/*-
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Hugh Smith at The University of Guelph.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/stat.h>

#include <ar.h>
#include <dirent.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "archive.h"
#include "extern.h"

typedef struct ar_hdr HDR;
static char hb[sizeof(HDR) + 1];	/* real header */

int
open_archive(int mode)
{
	int created, fd, nr;
	char buf[SARMAG];
	
	created = 0;
	if (mode & O_CREAT) {
		mode |= O_EXCL;
		if ((fd = open(archive, mode, DEFFILEMODE)) >= 0) {
			/* POSIX.2 puts create message on stderr. */
			if (!(options & AR_C))
				warnx("creating archive %s", archive);
			created = 1;
			goto opened;
		}
		if (errno != EEXIST)
			error(archive);
		mode &= ~O_EXCL;
	}
	if ((fd = open(archive, mode, DEFFILEMODE)) < 0)
		error(archive);

	/* 
	 * Attempt to place a lock on the opened file - if we get an 
	 * error then someone is already working on this library (or
	 * it's going across NFS).
	 */
opened:	if (flock(fd, LOCK_EX|LOCK_NB) && errno != EOPNOTSUPP)
		error(archive);
	
	/*
	 * If not created, O_RDONLY|O_RDWR indicates that it has to be
	 * in archive format.
	 */
	if (!created &&
	    ((mode & O_ACCMODE) == O_RDONLY || (mode & O_ACCMODE) == O_RDWR)) {
		if ((nr = read(fd, buf, SARMAG) != SARMAG)) {
			if (nr >= 0)
				badfmt();
			error(archive);
		} else if (bcmp(buf, ARMAG, SARMAG))
			badfmt();
	} else if (write(fd, ARMAG, SARMAG) != SARMAG)
		error(archive);
	return (fd);
}

void
close_archive(int fd)
{

	(void)close(fd);			/* Implicit unlock. */
}

/* Convert ar header field to an integer. */
#define	AR_ATOI(from, to, len, base) { \
	memmove(buf, from, len); \
	buf[len] = '\0'; \
	to = strtol(buf, NULL, base); \
}

/*
 * get_arobj --
 *	read the archive header for this member
 */
int
get_arobj(int fd)
{
	struct ar_hdr *hdr;
	int len, nr;
	char *p, buf[20];

	nr = read(fd, hb, sizeof(HDR));
	if (nr != sizeof(HDR)) {
		if (!nr)
			return (0);
		if (nr < 0)
			error(archive);
		badfmt();
	}

	hdr = (struct ar_hdr *)hb;
	if (strncmp(hdr->ar_fmag, ARFMAG, sizeof(ARFMAG) - 1))
		badfmt();

	/* Convert the header into the internal format. */
#define	DECIMAL	10
#define	OCTAL	 8

	/* XXX ar_date 2038 */
	AR_ATOI(hdr->ar_date, chdr.date, sizeof(hdr->ar_date), DECIMAL);
	AR_ATOI(hdr->ar_uid, chdr.uid, sizeof(hdr->ar_uid), DECIMAL);
	AR_ATOI(hdr->ar_gid, chdr.gid, sizeof(hdr->ar_gid), DECIMAL);
	AR_ATOI(hdr->ar_mode, chdr.mode, sizeof(hdr->ar_mode), OCTAL);
	AR_ATOI(hdr->ar_size, chdr.size, sizeof(hdr->ar_size), DECIMAL);

	/* Leading spaces should never happen. */
	if (hdr->ar_name[0] == ' ')
		badfmt();

	/*
	 * Long name support.  Set the "real" size of the file, and the
	 * long name flag/size.
	 */
	if (!bcmp(hdr->ar_name, AR_EFMT1, sizeof(AR_EFMT1) - 1)) {
		chdr.lname = len = atoi(hdr->ar_name + sizeof(AR_EFMT1) - 1);
		if (len <= 0 || len > MAXNAMLEN)
			badfmt();
		nr = read(fd, chdr.name, len);
		if (nr != len) {
			if (nr < 0)
				error(archive);
			badfmt();
		}
		chdr.name[len] = 0;
		chdr.size -= len;
	} else {
		chdr.lname = 0;
		memmove(chdr.name, hdr->ar_name, sizeof(hdr->ar_name));

		/* Strip trailing spaces, null terminate. */
		for (p = chdr.name + sizeof(hdr->ar_name) - 1; *p == ' '; --p);
		*++p = '\0';
	}
	return (1);
}

static int already_written;

/*
 * put_arobj --
 *	Write an archive member to a file.
 */
void
put_arobj(CF *cfp, struct stat *sb)
{
	int lname;
	char *name;
	struct ar_hdr *hdr;
	off_t size;
	uid_t uid;
	gid_t gid;

	/*
	 * If passed an sb structure, reading a file from disk.  Get stat(2)
	 * information, build a name and construct a header.  (Files are named
	 * by their last component in the archive.)  If not, then just write
	 * the last header read.
	 */
	if (sb) {
		name = rname(cfp->rname);
		(void)fstat(cfp->rfd, sb);

		/*
		 * If not truncating names and the name is too long or contains
		 * a space, use extended format 1.
		 */
		lname = strlen(name);
		uid = sb->st_uid;
		gid = sb->st_gid;
		if (uid > USHRT_MAX) {
			warnx("warning: uid %u truncated to %u", uid,
			    USHRT_MAX);
			uid = USHRT_MAX;
		}
		if (gid > USHRT_MAX) {
			warnx("warning: gid %u truncated to %u", gid,
			    USHRT_MAX);
			gid = USHRT_MAX;
		}
		if (options & AR_TR) {
			if (lname > OLDARMAXNAME) {
				(void)fflush(stdout);
				warnx("warning: file name %s truncated to %.*s",
				    name, OLDARMAXNAME, name);
				(void)fflush(stderr);
			}
			(void)snprintf(hb, sizeof hb,
			    HDR3, name, (long long)sb->st_mtimespec.tv_sec,
			    uid, gid, sb->st_mode, sb->st_size, ARFMAG);
			lname = 0;
		} else if (lname > sizeof(hdr->ar_name) || strchr(name, ' '))
			(void)snprintf(hb, sizeof hb,
			    HDR1, AR_EFMT1, lname,
			    (long long)sb->st_mtimespec.tv_sec,
			    uid, gid, sb->st_mode, sb->st_size + lname, ARFMAG);
		else {
			lname = 0;
			(void)snprintf(hb, sizeof hb,
			    HDR2, name, (long long)sb->st_mtimespec.tv_sec,
			    uid, gid, sb->st_mode, sb->st_size, ARFMAG);
		}
		size = sb->st_size;
	} else {
		lname = chdr.lname;
		name = chdr.name;
		size = chdr.size;
	}

	if (write(cfp->wfd, hb, sizeof(HDR)) != sizeof(HDR))
		error(cfp->wname);
	if (lname) {
		if (write(cfp->wfd, name, lname) != lname)
			error(cfp->wname);
		already_written = lname;
	}
	copy_ar(cfp, size);
	already_written = 0;
}

/*
 * copy_ar --
 *	Copy size bytes from one file to another - taking care to handle the
 *	extra byte (for odd size files) when reading archives and writing an
 *	extra byte if necessary when adding files to archive.  The length of
 *	the object is the long name plus the object itself; the variable
 *	already_written gets set if a long name was written.
 *
 *	The padding is really unnecessary, and is almost certainly a remnant
 *	of early archive formats where the header included binary data which
 *	a PDP-11 required to start on an even byte boundary.  (Or, perhaps,
 *	because 16-bit word addressed copies were faster?)  Anyhow, it should
 *	have been ripped out long ago.
 */
void
copy_ar(CF *cfp, off_t size)
{
	static char pad = '\n';
	off_t sz;
	int from, nr, nw, off, to;
	char buf[8*1024];
	
	if (!(sz = size))
		return;

	from = cfp->rfd;
	to = cfp->wfd;
	sz = size;
	while (sz && (nr = read(from, buf, MIN(sz, sizeof(buf)))) > 0) {
		sz -= nr;
		for (off = 0; off < nr; nr -= off, off += nw)
			if ((nw = write(to, buf + off, nr)) < 0)
				error(cfp->wname);
	}
	if (sz) {
		if (nr == 0)
			badfmt();
		error(cfp->rname);
	}

	if (cfp->flags & RPAD && (size + chdr.lname) & 1 &&
	    (nr = read(from, buf, 1)) != 1) {
		if (nr == 0)
			badfmt();
		error(cfp->rname);
	}
	if (cfp->flags & WPAD && (size + already_written) & 1 &&
	    write(to, &pad, 1) != 1)
		error(cfp->wname);
}

/*
 * skip_arobj -
 *	Skip over an object -- taking care to skip the pad bytes.
 */
void
skip_arobj(int fd)
{
	off_t len;

	len = chdr.size + (chdr.size + chdr.lname & 1);
	if (lseek(fd, len, SEEK_CUR) == (off_t)-1)
		error(archive);
}
@


1.13
log
@Handle greater time_t, so that .a files work after 2038.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: archive.c,v 1.12 2009/12/13 18:13:28 sobrado Exp $	*/
@


1.12
log
@spacing, no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: archive.c,v 1.11 2009/10/27 23:59:35 deraadt Exp $	*/
d145 1
d234 1
a234 1
			    HDR3, name, (long int)sb->st_mtimespec.tv_sec,
d240 1
a240 1
			    (long int)sb->st_mtimespec.tv_sec,
d245 1
a245 1
			    HDR2, name, (long int)sb->st_mtimespec.tv_sec,
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: archive.c,v 1.10 2003/06/12 20:58:08 deraadt Exp $	*/
d239 2
a240 2
			    (long int)sb->st_mtimespec.tv_sec, uid, gid, sb->st_mode,
			    sb->st_size + lname, ARFMAG);
@


1.10
log
@de-register and ansification; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: archive.c,v 1.9 2003/06/03 02:56:05 millert Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)archive.c	8.3 (Berkeley) 4/2/94";
#else
static char rcsid[] = "$OpenBSD: archive.c,v 1.9 2003/06/03 02:56:05 millert Exp $";
#endif
#endif /* not lint */
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: archive.c,v 1.8 2003/04/04 22:12:09 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: archive.c,v 1.8 2003/04/04 22:12:09 deraadt Exp $";
d64 1
a64 2
open_archive(mode)
	int mode;
d112 1
a112 2
close_archive(fd)
	int fd;
d130 1
a130 2
get_arobj(fd)
	int fd;
d197 1
a197 3
put_arobj(cfp, sb)
	CF *cfp;
	struct stat *sb;
d288 1
a288 3
copy_ar(cfp, size)
	CF *cfp;
	off_t size;
d329 1
a329 2
skip_arobj(fd)
	int fd;
@


1.8
log
@simple snprintf; tdeval matthieu ok
@
text
@d1 1
a1 1
/*	$OpenBSD: archive.c,v 1.7 2002/12/14 18:14:35 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: archive.c,v 1.7 2002/12/14 18:14:35 millert Exp $";
@


1.7
log
@add missing OpenBSD tag
@
text
@d1 1
a1 1
/*	$OpenBSD: archive.c,v 1.6 1999/08/29 13:07:01 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: archive.c,v 1.7 1995/03/26 03:27:46 glass Exp $";
d249 2
a250 1
			(void)sprintf(hb, HDR3, name, (long int)sb->st_mtimespec.tv_sec,
d254 2
a255 1
			(void)sprintf(hb, HDR1, AR_EFMT1, lname,
d260 2
a261 1
			(void)sprintf(hb, HDR2, name, (long int)sb->st_mtimespec.tv_sec,
@


1.6
log
@cast time_t to (long int) to pass them to sprintf() portably.
@
text
@d1 1
a2 1
/*	$OpenBSD: archive.c,v 1.5 1997/11/05 19:47:08 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$NetBSD: archive.c,v 1.7 1995/03/26 03:27:46 glass Exp $";
@


1.5
log
@uid_t and gid_t are unsigned; nihilis@@moral.addiction.com
@
text
@d2 1
a2 1
/*	$OpenBSD: archive.c,v 1.4 1997/06/17 20:47:08 kstailey Exp $	*/
d249 1
a249 1
			(void)sprintf(hb, HDR3, name, sb->st_mtimespec.tv_sec,
d254 1
a254 1
			    sb->st_mtimespec.tv_sec, uid, gid, sb->st_mode,
d258 1
a258 1
			(void)sprintf(hb, HDR2, name, sb->st_mtimespec.tv_sec,
@


1.4
log
@(foo *)NULL -> NULL
@
text
@d2 1
a2 1
/*	$OpenBSD: archive.c,v 1.3 1997/05/31 08:17:18 deraadt Exp $	*/
d233 1
a233 1
			warnx("warning: uid %d truncated to %d", uid,
d238 1
a238 1
			warnx("warning: gid %d truncated to %d", gid,
@


1.3
log
@trunc uid/gid to USHRT_MAX; mycroft; PR#75
@
text
@d2 1
a2 1
/*	$OpenBSD$	*/
d128 1
a128 1
	to = strtol(buf, (char **)NULL, base); \
@


1.2
log
@timespec members are now named tv_{,u}sec again
@
text
@d212 2
d230 12
d245 1
a245 1
				warnx("warning: %s truncated to %.*s",
d250 1
a250 2
			    sb->st_uid, sb->st_gid, sb->st_mode, sb->st_size,
			    ARFMAG);
d254 2
a255 2
			    sb->st_mtimespec.tv_sec, sb->st_uid, sb->st_gid,
			    sb->st_mode, sb->st_size + lname, ARFMAG);
d259 1
a259 2
			    sb->st_uid, sb->st_gid, sb->st_mode, sb->st_size,
			    ARFMAG);
@


1.1
log
@Initial revision
@
text
@d2 1
d235 1
a235 1
			(void)sprintf(hb, HDR3, name, sb->st_mtimespec.ts_sec,
d241 1
a241 1
			    sb->st_mtimespec.ts_sec, sb->st_uid, sb->st_gid,
d245 1
a245 1
			(void)sprintf(hb, HDR2, name, sb->st_mtimespec.ts_sec,
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
