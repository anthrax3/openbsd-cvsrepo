head	1.17;
access;
symbols
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.16
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.6
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.12
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.10
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.8
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2014.10.20.22.56.07;	author schwarze;	state dead;
branches;
next	1.16;
commitid	9iqdpPhUSoDCRiTx;

1.16
date	2013.11.25.18.02.49;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.35;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.24.09.05.17;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.06.19.16.06;	author sobrado;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.02.21.38.56;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.19.04.19;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.10.22.20.44;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.05;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.43;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.20.14.03.31;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.11.30.05.30.36;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.09.11.11.24.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.42.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.25.06.27.42;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.31.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.52;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.52;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@superseded by usr.bin/mandoc/mansearch.c
removal suggested by daniel@@; ok deraadt@@
@
text
@/*      $OpenBSD: apropos.c,v 1.16 2013/11/25 18:02:49 deraadt Exp $      */
/*      $NetBSD: apropos.c,v 1.5 1995/09/04 20:46:20 tls Exp $      */

/*
 * Copyright (c) 1987, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/queue.h>

#include <ctype.h>
#include <err.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "../man/config.h"
#include "../man/pathnames.h"

static int *found, foundman;

#define	MAXLINELEN	8192		/* max line handled */

void apropos(char **, char *, int, char *, char *);
void lowstr(char *, char *);
int match(char *, char *);
void usage(void);

int
main(int argc, char *argv[])
{
	ENTRY *ep;
	TAG *tp;
	int ch, rv;
	char *conffile, *machine, **p, *p_augment, *p_path, *sflag;

	conffile = NULL;
	p_augment = p_path = NULL;
	machine = sflag = NULL;
	while ((ch = getopt(argc, argv, "C:M:m:P:S:s:")) != -1)
		switch (ch) {
		case 'C':
			conffile = optarg;
			break;
		case 'M':
		case 'P':		/* backward compatible */
			p_path = optarg;
			break;
		case 'm':
			p_augment = optarg;
			break;
		case 'S':
			machine = optarg;
			lowstr(machine, machine);
			break;
		case 's':
			sflag = optarg;
			lowstr(sflag, sflag);
			break;
		case '?':
		default:
			usage();
		}
	argv += optind;
	argc -= optind;

	if (argc < 1)
		usage();

	if ((found = calloc(argc, sizeof(int))) == NULL)
		err(1, NULL);

	for (p = argv; *p; ++p)			/* convert to lower-case */
		lowstr(*p, *p);

	if (p_augment)
		apropos(argv, p_augment, 1, sflag, machine);
	if (p_path || (p_path = getenv("MANPATH")))
		apropos(argv, p_path, 1, sflag, machine);
	else {
		config(conffile);
		ep = (tp = getlist("_whatdb")) == NULL ?
		    NULL : TAILQ_FIRST(&tp->list);
		for (; ep != NULL; ep = TAILQ_NEXT(ep, q))
			apropos(argv, ep->s, 0, sflag, machine);
	}

	if (!foundman)
		errx(1, "no %s file found", _PATH_WHATIS);

	rv = 1;
	for (p = argv; *p; ++p)
		if (found[p - argv])
			rv = 0;
		else
			(void)printf("%s: nothing appropriate\n", *p);
	exit(rv);
}

void
apropos(char **argv, char *path, int buildpath, char *sflag, char *machine)
{
	char *end, *name, **p;
	char buf[MAXLINELEN + 1], wbuf[MAXLINELEN + 1];
	char hold[MAXPATHLEN];
	size_t slen = 0, mlen = 0;

	if (sflag)
		slen = strlen(sflag);
	if (machine)
		mlen = strlen(machine);

	for (name = path; name; name = end) {	/* through name list */
		if ((end = strchr(name, ':')))
			*end++ = '\0';

		if (buildpath) {
			(void)snprintf(hold, sizeof(hold), "%s/%s", name,
			    _PATH_WHATIS);
			name = hold;
		}

		if (!freopen(name, "r", stdin))
			continue;

		foundman = 1;

		/* for each file found */
		while (fgets(buf, sizeof(buf), stdin)) {
			if (!strchr(buf, '\n')) {
				warnx("%s: line too long", name);
				continue;
			}
			lowstr(buf, wbuf);
			if (sflag || machine) {
				char *s = strstr(wbuf, ") - ");
				if (!s)
					continue;
				while (s > wbuf && *s != '/' && *s != '(')
					s--;
				if (machine && *s == '/' &&
				    strncmp(s+1, machine, mlen))
					continue;
				while (s > wbuf && *s != '(')
					s--;
				if (sflag && *s == '(' &&
				    strncmp(s+1, sflag, slen))
					continue;
			}
			for (p = argv; *p; ++p)
				if (match(wbuf, *p)) {
					(void)printf("%s", buf);
					found[p - argv] = 1;

					/* only print line once */
					while (*++p)
						if (match(wbuf, *p))
							found[p - argv] = 1;
					break;
				}
		}
	}
}

/*
 * match --
 *	match anywhere the string appears
 */
int
match(char *bp, char *str)
{
	int len;
	char test;

	if (!*bp)
		return (0);
	/* backward compatible: everything matches empty string */
	if (!*str)
		return (1);
	for (test = *str++, len = strlen(str); *bp;)
		if (test == *bp++ && !strncmp(bp, str, len))
			return (1);
	return (0);
}

/*
 * lowstr --
 *	convert a string to lower case
 */
void
lowstr(char *from, char *to)
{
	unsigned char ch;

	while ((ch = *from++) && ch != '\n')
		*to++ = isupper(ch) ? tolower(ch) : ch;
	*to = '\0';
}

/*
 * usage --
 *	print usage message and die
 */
void
usage(void)
{

	(void)fprintf(stderr,
	    "usage: apropos [-C file] [-M path] [-m path] "
	    "[-S subsection] [-s section]\n"
	    "       keyword ...\n");
	exit(1);
}
@


1.16
log
@variety of unsigned char casts (or conversions) for ctype
ok krw
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.15 2009/10/27 23:59:35 deraadt Exp $      */
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.14 2008/12/24 09:05:17 jmc Exp $      */
d220 1
a220 1
	char ch;
@


1.14
log
@add -S and -s options, similar to man(1), for restricting
searches by section number and architecture;

diff from Ingo Schwarze;
ok deraadt millert sobrado
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.13 2007/08/06 19:16:06 sobrado Exp $      */
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1987, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)apropos.c	8.8 (Berkeley) 5/4/95";
#else
static char rcsid[] = "$OpenBSD: apropos.c,v 1.13 2007/08/06 19:16:06 sobrado Exp $";
#endif
#endif /* not lint */
@


1.13
log
@the ellipsis is not an optional argument; while here, sync the usage
and synopsis of commands

lots of good ideas by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.12 2006/04/02 21:38:56 djm Exp $      */
d43 1
a43 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.12 2006/04/02 21:38:56 djm Exp $";
d65 1
a65 1
void apropos(char **, char *, int);
d76 1
a76 1
	char *conffile, **p, *p_augment, *p_path;
d80 2
a81 1
	while ((ch = getopt(argc, argv, "C:M:m:P:")) != -1)
d93 8
d118 1
a118 1
		apropos(argv, p_augment, 1);
d120 1
a120 1
		apropos(argv, p_path, 1);
d126 1
a126 1
			apropos(argv, ep->s, 0);
d142 1
a142 1
apropos(char **argv, char *path, int buildpath)
d147 6
d176 15
d250 3
a252 1
	    "usage: apropos [-C file] [-M path] [-m path] keyword ...\n");
@


1.12
log
@malloc(x * y) -> calloc(x, y) from adobriyan AT gmail.com, with tweaks
suggested by kjell@@; ok otto@@ pat@@ millert@@ jaredy@@
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.11 2005/10/17 19:04:19 otto Exp $      */
d43 1
a43 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.11 2005/10/17 19:04:19 otto Exp $";
d220 1
a220 1
	    "usage: apropos [-C file] [-M path] [-m path] keyword [...]\n");
@


1.11
log
@Use queue macros instead of directly accessing fields. ok pat@@ "put it
in" deraadt@@
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.10 2003/06/10 22:20:44 deraadt Exp $      */
d43 1
a43 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.10 2003/06/10 22:20:44 deraadt Exp $";
d102 1
a102 1
	if ((found = malloc((u_int)argc * sizeof(int))) == NULL)
a103 1
	memset(found, 0, argc * sizeof(int));
@


1.10
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.9 2003/06/03 02:56:05 millert Exp $      */
d43 1
a43 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.9 2003/06/03 02:56:05 millert Exp $";
d116 2
a117 2
		    NULL : tp->list.tqh_first;
		for (; ep != NULL; ep = ep->q.tqe_next)
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.8 2002/02/16 21:27:43 millert Exp $      */
d43 1
a43 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.8 2002/02/16 21:27:43 millert Exp $";
d71 1
a71 3
main(argc, argv)
	int argc;
	char *argv[];
d134 1
a134 3
apropos(argv, path, buildpath)
	char **argv, *path;
	int buildpath;
d182 1
a182 2
match(bp, str)
	char *bp, *str;
d203 1
a203 2
lowstr(from, to)
	char *from, *to;
d217 1
a217 1
usage()
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.7 2000/11/20 14:03:31 deraadt Exp $      */
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.7 2000/11/20 14:03:31 deraadt Exp $";
@


1.7
log
@repairs; mpech@@prosoft.org.lv
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.6 1997/11/30 05:30:36 deraadt Exp $      */
d47 1
a47 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.6 1997/11/30 05:30:36 deraadt Exp $";
d69 4
a72 4
void apropos __P((char **, char *, int));
void lowstr __P((char *, char *));
int match __P((char *, char *));
void usage __P((void));
@


1.6
log
@crank line lengths a bit, and do not make assumptions about the stack
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.5 1997/09/11 11:24:53 deraadt Exp $      */
d47 1
a47 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.5 1997/09/11 11:24:53 deraadt Exp $";
d231 1
a231 1
	    "usage: apropos [-C file] [-M path] [-m path] keyword ...\n");
@


1.5
log
@prelim Wall
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.4 1997/01/15 23:42:10 millert Exp $      */
d47 1
a47 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.4 1997/01/15 23:42:10 millert Exp $";
d67 2
d145 2
a146 1
	char buf[LINE_MAX + 1], wbuf[LINE_MAX + 1];
a152 2
			char hold[MAXPATHLEN + 1];

@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.3 1996/10/25 06:27:42 downsj Exp $      */
d47 1
a47 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.3 1996/10/25 06:27:42 downsj Exp $";
d146 1
a146 1
		if (end = strchr(name, ':'))
@


1.3
log
@sprintf -> snprintf
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.2 1996/06/26 05:31:14 deraadt Exp $      */
d47 1
a47 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.2 1996/06/26 05:31:14 deraadt Exp $";
d84 1
a84 1
	while ((ch = getopt(argc, argv, "C:M:m:P:")) != EOF)
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*      $OpenBSD: apropos.c,v 1.5 1995/09/04 20:46:20 tls Exp $      */
d47 1
a47 1
static char rcsid[] = "$OpenBSD: apropos.c,v 1.5 1995/09/04 20:46:20 tls Exp $";
d152 2
a153 1
			(void)sprintf(hold, "%s/%s", name, _PATH_WHATIS);
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: apropos.c,v 1.5 1995/09/04 20:46:20 tls Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
