head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.2
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.10
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.8
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.6
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.4
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.16.0.18
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.16
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.14
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.10
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.12
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.8
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.15.0.6
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.4
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.23
date	2016.08.12.21.49.31;	author tb;	state Exp;
branches;
next	1.22;
commitid	4rYkzym0QxLeDjIk;

1.22
date	2016.08.05.13.49.19;	author tb;	state Exp;
branches;
next	1.21;
commitid	kDHIiamDMuFJiHbt;

1.21
date	2016.07.17.04.15.25;	author tb;	state Exp;
branches;
next	1.20;
commitid	qq2bSXHYDfGnGLBP;

1.20
date	2016.07.17.04.04.46;	author tb;	state Exp;
branches;
next	1.19;
commitid	4exU6Lm7QF6Yw3zY;

1.19
date	2016.01.04.23.21.28;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	RkF91OQHboyz9Raz;

1.18
date	2014.01.20.05.07.48;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2011.12.03.23.01.21;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.31.19.20.11;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2005.09.06.16.35.28;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.01.07.04.10;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.30.19.41.48;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.18.11.51.13;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.15.23.24.20;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.10.09.12.10;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.09;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.14.02.57.27;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.20.19.09.45;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.08.01.38.51;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.06.04.06.54;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.08.03.11.29;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.07.26.14.14.43;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.34.41;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Rewrite the paragraphs that describe how the last four arguments are
handled to make them easier to read and understand.

with help from jmc
@
text
@.\"	$OpenBSD: jot.1,v 1.22 2016/08/05 13:49:19 tb Exp $
.\"	$NetBSD: jot.1,v 1.2 1994/11/14 20:27:36 jtc Exp $
.\"
.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)jot.1	8.1 (Berkeley) 6/6/93
.\"
.Dd $Mdocdate: August 5 2016 $
.Dt JOT 1
.Os
.Sh NAME
.Nm jot
.Nd print sequential or random data
.Sh SYNOPSIS
.Nm jot
.Bk -words
.Op Fl cnr
.Op Fl b Ar word
.Op Fl p Ar precision
.Op Fl s Ar string
.Op Fl w Ar word
.Oo Ar reps Oo Ar begin Oo Ar end
.Oo Ar s Oc Oc Oc Oc
.Ek
.Sh DESCRIPTION
.Nm
is used to print out increasing, decreasing, random,
or redundant data, usually numbers, one per line.
.Pp
The options are as follows:
.Bl -tag -width "-p precision"
.It Fl b Ar word
Just print
.Ar word
repetitively.
.It Fl c
This is an abbreviation for
.Fl w Ic %c .
.It Fl n
Do not print the final newline normally appended to the output.
.It Fl p Ar precision
Print only as many digits or characters of the data
as indicated by the integer
.Ar precision .
In the absence of
.Fl p ,
the precision is the greater of the numbers
.Ar begin
and
.Ar end .
The
.Fl p
option is overridden by whatever appears in a
.Xr printf 3
conversion following
.Fl w .
.It Fl r
Generate random data.
By default,
.Nm
generates sequential data.
.It Fl s Ar string
Print data separated by
.Ar string .
Normally, newlines separate data.
.It Fl w Ar word
Print
.Ar word
with the generated data appended to it.
Octal, hexadecimal, exponential, ASCII, zero-padded,
and right-adjusted representations
are possible by using the appropriate
.Xr printf 3
conversion specification inside
.Ar word ,
in which case the data is inserted rather than appended.
.El
.Pp
The last four arguments specify the length of the output sequence,
its start and end points, and the step size.
Any three of these arguments determine the fourth.
If the given and computed values for
.Ar reps
conflict, the lower value is used.
.Pp
Arguments can be omitted by specifying a
.Ql - .
The default values for
.Ar reps ,
.Ar begin ,
.Ar end ,
and
.Ar s
are 100, 1, 100, and 1, respectively.
Omitted values are computed if possible or assume the default.
A special case arises if only
.Ar begin
and
.Ar end
are specified:
if
.Ar begin
is greater than
.Ar end
then
.Ar s
is set to \(mi1, otherwise it is set to 1;
afterwards
.Ar reps
is computed.
.Pp
.Ar reps
is expected to be an unsigned integer,
and if given as zero is taken to be infinite.
.Ar begin
and
.Ar end
may be given as real numbers or as characters
representing the corresponding value in ASCII.
The last argument must be a real number.
.Pp
Random numbers are obtained through
.Xr arc4random 3 .
Historical versions of
.Nm
used
.Ar s
to seed the random number generator.
This is no longer supported.
The name
.Nm
derives in part from
.Dq iota ,
a function in APL.
.Ss Rounding and truncation
The
.Nm
utility uses double precision floating point arithmetic internally.
Before printing a number, it is converted depending on the output
format used.
.Pp
If no output format is specified or the output format is a
floating point format
.Po
.Sq f ,
.Sq e ,
.Sq g ,
.Sq E ,
or
.Sq G
.Pc ,
the value is rounded using the
.Xr printf 3
function, taking into account the requested precision.
.Pp
If the output format is an integer format
.Po
.Sq c ,
.Sq d ,
.Sq o ,
.Sq x ,
.Sq u ,
.Sq D ,
.Sq O ,
.Sq X ,
.Sq U ,
or
.Sq i
.Pc ,
the value is converted to an integer value by truncation.
.Pp
As an illustration, consider the following command:
.Bd -literal -offset indent
$ jot 6 1 10 0.5
1
2
2
2
3
4
.Ed
.Pp
By requesting an explicit precision of 1, the values generated before rounding
can be seen.
The .5 values are rounded down if the integer part is even,
up otherwise.
.Bd -literal -offset indent
$ jot -p 1 6 1 10 0.5
1.0
1.5
2.0
2.5
3.0
3.5
.Ed
.Pp
By offsetting the values slightly, the values generated by the following
command are always rounded down:
.Bd -literal -offset indent
$ jot -p 0 6 .9999999999 10 0.5
1
1
2
2
3
3
.Ed
.Pp
Another way of achieving the same result is to force truncation by
specifying an integer format:
.Bd -literal -offset indent
$ jot -w %d 6 1 10 0.5
.Ed
.Sh EXAMPLES
Print 21 evenly spaced numbers increasing from \-1 to 1:
.Pp
.Dl $ jot 21 \-1 1.00
.Pp
Generate the ASCII character set:
.Pp
.Dl $ jot \-c 128 0
.Pp
Generate the strings xaa through xaz:
.Pp
.Dl $ jot \-w xa%c 26 a
.Pp
Generate 20 random 8-letter strings:
.Pp
.Dl "$ jot \-r \-c 160 a z | rs \-g0 0 8"
.Pp
Infinitely many
.Xr yes 1 Ns 's
may be obtained through:
.Pp
.Dl $ jot \-b yes 0
.Pp
Thirty
.Xr ed 1
substitution commands applying to lines 2, 7, 12, etc. is the result of:
.Pp
.Dl $ jot \-w %ds/old/new/ 30 2 \- 5
.Pp
Create a file containing exactly 1024 bytes:
.Pp
.Dl $ jot \-b x 512 > block
.Pp
To set tabs four spaces apart starting
from column 10 and ending in column 132, use:
.Pp
.Dl $ expand \-`jot \-s, \- 10 132 4`
.Pp
To print all lines 80 characters or longer:
.Pp
.Dl $ grep `jot \-s \&"\&" \-b . 80`
.Sh SEE ALSO
.Xr ed 1 ,
.Xr expand 1 ,
.Xr rs 1 ,
.Xr yes 1 ,
.Xr arc4random 3 ,
.Xr printf 3
.Sh HISTORY
The
.Nm
utility first appeared in
.Bx 4.2 .
.Sh AUTHORS
.An John A. Kunze
@


1.22
log
@All four arguments can be omitted by specifying a dash.
While there, remove a superfluous 's'.

discussed with jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.21 2016/07/17 04:15:25 tb Exp $
d33 1
a33 1
.Dd $Mdocdate: July 17 2016 $
d104 2
a105 6
The last four arguments indicate, respectively,
the maximum number of data, the lower bound, the upper bound,
and the step size.
Any of these may be omitted, and
will be considered as such if given as
.Ql - .
d107 1
a107 1
If four are specified and the given and computed values of
d110 12
a121 4
If fewer than three are specified, defaults are assigned
left to right, except for
.Ar s ,
which assumes its default unless both
d125 11
a135 1
are given.
a136 2
Defaults for the four arguments are, respectively,
100, 1, 100, and 1.
@


1.21
log
@Remove now obsolete parenthetical explanation (should have been part of
previous commit).
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.20 2016/07/17 04:04:46 tb Exp $
d107 1
a107 2
While at least one of them must appear,
any of the other three may be omitted, and
d110 1
a110 1
Any three of these arguments determines the fourth.
@


1.20
log
@1. Update manpage in view of the change of behavior I introduced in -r1.27.

The bounds are taken inclusive and -w %d doesn't change the output of
integer random sequences anymore.  This is the same behavior as that
of Linux and NetBSD, but differs from FreeBSD and OS X.

Issue reported by Philippe Meunier on misc@@.

2 Fix a bug from the same commit observed by Otto: if the precision is 0,
values may be printed out of bounds.  Fall back to the old behavior if at
least one bound isn't an integer.

General agreement expressed by otto@@, tedu@@, jmc@@, sobrado@@
Help with checking other operating systems by sobrado@@.

Manpage ok jmc@@.
Bugfix discussed with otto@@ on icb
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.19 2016/01/04 23:21:28 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 4 2016 $
d241 1
a241 6
Generate 20 random 8-letter strings
(note that the character
.Sq {
comes after the character
.Sq z
in the ASCII character set):
@


1.19
log
@Add HISTORY and AUTHORS sections.
From the author John A. Kunze
via https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=196786
and Michal Mazurek <akfaew at jasminek dot net>.
Correctness also verified from the CSRG archive CD.
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.18 2014/01/20 05:07:48 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: January 20 2014 $
a227 35
.Pp
For random sequences, the output format also influences the range
and distribution of the generated numbers:
.Bd -literal -offset indent
$ jot -r 100000 1 3 | sort -n | uniq -c
24950 1
50038 2
25012 3
.Ed
.Pp
The values at the beginning and end of the interval
are generated less frequently than the other values.
There are several ways to solve this problem and generate evenly distributed
integers:
.Bd -literal -offset indent
$ jot -r -p 0 100000 0.5 3.5 | sort -n | uniq -c
33374 1
33363 2
33263 3

$ jot -w %d -r 100000 1 4 | sort -n | uniq -c
33306 1
33473 2
33221 3
.Ed
.Pp
Note that with random sequences, all numbers generated will
be smaller than the upper bound.
The largest value generated will be a tiny bit smaller than
the upper bound.
For floating point formats, the value is rounded as described
before being printed.
For integer formats, the highest value printed will be one less
than the requested upper bound, because the generated value will
be truncated.
d248 1
a248 1
.Dl "$ jot \-r \-c 160 a { | rs \-g0 0 8"
@


1.18
log
@Obvious .Xr fixes, found while testing mandocdb(8).
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.17 2011/12/03 23:01:21 schwarze Exp $
d33 1
a33 1
.Dd $Mdocdate: December 3 2011 $
d316 7
@


1.17
log
@Remove an OpenBSD-specific tweak regarding .Xr spacing
and make it compatible with bsd.lv mandoc and with groff-1.21.
This tweak was originally added for compatibility with groff-1.15,
which is no longer needed.

ok jmc@@ kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.16 2007/05/31 19:20:11 jmc Exp $
d33 1
a33 1
.Dd $Mdocdate: May 31 2007 $
d147 1
a147 1
.Xr iota ,
@


1.16
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.15 2005/09/06 16:35:28 millert Exp $
d33 1
a33 1
.Dd $Mdocdate$
d286 1
a286 1
.Xr yes 1 's
@


1.15
log
@Fix example that uses rs(1)
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.14 2004/01/01 07:04:10 otto Exp $
d33 1
a33 1
.Dd June 6, 1993
@


1.14
log
@Explain how jot does rounding and truncation. Help from jmc@@

ok jmc@@ millert@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.13 2003/12/30 19:41:48 otto Exp $
d283 1
a283 1
.Dl "$ jot \-r \-c 160 a { | rs \-g 0 8"
@


1.13
log
@o From FreeBSD: use the max_value(u_int32_t) + 1 to divide the random number.
o Document and warn that seeding the random generator is no longer supported
  since arc4random is used as the RG.

ok jose@@ millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.12 2003/12/18 11:51:13 jmc Exp $
d149 114
d276 6
a281 1
Generate 20 random 8-letter strings:
d283 1
a283 1
.Dl "$ jot \-r \-c 160 a z | rs \-g 0 8"
a295 5
.Pp
The stuttering sequence 9, 9, 8, 8, 7, etc. can be
produced by suitable choice of precision and step size:
.Pp
.Dl $ jot 20 9 0 \-.475
@


1.12
log
@random numbers are obtained via arc4random(3), not random(3);
from FreeBSD PR 54879, forwarded by otto@@;

ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.11 2003/12/15 23:24:20 jmc Exp $
d106 1
a106 1
and the step size or, for random data, the seed.
d125 1
a125 3
100, 1, 100, and 1, except that when random data are requested,
.Ar s
defaults to a seed depending upon the time of day.
d138 6
@


1.11
log
@jot.1:
- use .Bk/.Ek for SYNOPSIS
- sort options
- better -width for options list
- reword examples to make them clearer
- fix broken example, as reported by Takanori Isihara

jot.c:
- sync usage() with SYNOPSIS
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.10 2003/06/10 09:12:10 jmc Exp $
d139 1
a139 1
.Xr random 3 .
d196 2
a197 2
.Xr printf 3 ,
.Xr random 3
@


1.10
log
@- section reorder
- COMPATIBILITY merge
- macro cleanup
- kill whitespace at EOL
- new sentence, new line

ssh pages ok markus@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.9 2003/06/03 02:56:09 millert Exp $
d41 1
d44 2
a46 2
.Op Fl s Ar string
.Op Fl p Ar precision
d49 1
d56 1
a56 3
.Bl -tag -width Ds
.It Fl r
Generate random data instead of sequential data, the default.
a60 11
.It Fl w Ar word
Print
.Ar word
with the generated data appended to it.
Octal, hexadecimal, exponential, ASCII, zero-padded,
and right-adjusted representations
are possible by using the appropriate
.Xr printf 3
conversion specification inside
.Ar word ,
in which case the data is inserted rather than appended.
a63 4
.It Fl s Ar string
Print data separated by
.Ar string .
Normally, newlines separate data.
d82 20
d105 1
a105 1
the number of data, the lower bound, the upper bound,
d146 1
a146 1
The command
d150 1
a150 2
prints 21 evenly spaced numbers increasing from \-1 to 1.
The ASCII character set is generated with
d154 1
a154 1
and the strings xaa through xaz with
d158 1
a158 1
while 20 random 8-letter strings are produced with
d164 1
a164 1
may be obtained through
d168 1
a168 1
and thirty
d170 1
a170 2
substitution commands applying to lines 2, 7, 12, etc. is
the result of
d175 1
a175 2
produced by suitable choice of precision and step size,
as in
d177 1
a177 1
.Dl $ jot 0 9 \- \-.5
d179 1
a179 1
and a file containing exactly 1024 bytes is created with
d183 2
a184 2
Finally, to set tabs four spaces apart starting
from column 10 and ending in column 132, use
d186 1
a186 1
.Dl $ expand \-\`jot \-s, \- 10 132 4\`
d188 1
a188 1
and to print all lines 80 characters or longer,
d190 1
a190 1
.Dl $ grep \`jot \-s \&"\&" \-b . 80\`
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.8 2002/11/14 02:57:27 deraadt Exp $
d195 1
a195 1
.Xr random 3 ,
@


1.8
log
@use $ or # before commands in examples
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.7 2001/07/20 19:09:45 mpech Exp $
d15 1
a15 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@we don't like:
o) .Pp before/after .Sh;
o) .Pp before/after .Sh;
o) .Nm without argument in SYNOPSIS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.6 2001/03/08 01:38:51 pjanzen Exp $
d147 1
a147 1
.Dl jot 21 \-1 1.00
d152 1
a152 1
.Dl jot \-c 128 0
d156 1
a156 1
.Dl jot \-w xa%c 26 a
d160 1
a160 1
.Dl "jot \-r \-c 160 a z | rs \-g 0 8"
d166 1
a166 1
.Dl jot \-b yes 0
d173 1
a173 1
.Dl jot \-w %ds/old/new/ 30 2 \- 5
d179 1
a179 1
.Dl jot 0 9 \- \-.5
d183 1
a183 1
.Dl jot \-b x 512 > block
d188 1
a188 1
.Dl expand \-\`jot \-s, \- 10 132 4\`
d192 1
a192 1
.Dl grep \`jot \-s \&"\&" \-b . 80\`
@


1.6
log
@Print examples correctly
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.5 2000/07/06 04:06:54 aaron Exp $
a192 1
.Pp
@


1.5
log
@Insert more missing .El directives. Our troff really should identify these and
spit out a warning.
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.4 2000/03/08 03:11:29 aaron Exp $
d160 1
a160 1
.Dl jot \-r \-c 160 a z | rs \-g 0 8
d192 1
a192 1
.Dl grep \`jot \-s "" \-b . 80\`
@


1.4
log
@Various cleanups and improvements.
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.3 1999/07/26 14:14:43 aaron Exp $
d101 1
@


1.3
log
@new mdoc'd jot(1) man page
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.2 1996/06/26 05:34:41 deraadt Exp $
d69 1
a69 1
Octal, hexadecimal, exponential, ASCII, zero padded,
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
.\"	$OpenBSD: jot.1,v 1.2 1994/11/14 20:27:36 jtc Exp $
d37 17
a53 11
.TH JOT 1 "June 6, 1993"
.UC 4
.SH NAME
jot \- print sequential or random data
.SH SYNOPSIS
.B jot [
options
.B ] [
\fRreps \fB[\fP begin \fB[\fP end \fB[\fP s \fB] ] ] ]\fP
.SH DESCRIPTION
.I Jot
d56 4
a59 4
The
.I options
are understood as follows.
.IP \fB\-r\fP
d61 1
a61 1
.IP \fB\-b\fP\ word
d63 1
a63 1
.I word
d65 1
a65 1
.IP \fB\-w\fP\ word
d67 1
a67 1
.IR word
d72 1
a72 1
.IR printf (3)
d74 6
a79 5
.IR word ,
in which case the data are inserted rather than appended.
.IP \fB\-c\fP
This is an abbreviation for \fB\-w %c\fP.
.IP \fB\-s\fP\ string
d81 1
a81 1
.IR string .
d83 1
a83 1
.IP \fB\-n\fP
d85 1
a85 1
.IP \fB\-p\fP\ precision
d88 1
a88 1
.IR precision .
d90 3
a92 3
.BR \-p ,
the precision is the greater of the precisions of
.I begin
d94 1
a94 1
.IR end .
d96 1
a96 1
.B \-p
d98 1
a98 1
.IR printf (3)
d100 2
a101 2
.BR \-w .
.PP
d108 1
a108 1
.BR \- .
d111 1
a111 1
.I reps
d115 1
a115 1
.IR s ,
d117 1
a117 1
.I begin
d119 1
a119 1
.I end
d121 1
a121 1
.PP
d124 1
a124 1
.I s
d126 1
a126 1
.I Reps
d129 1
a129 1
.I Begin
d131 1
a131 1
.I end
d135 1
a135 1
.PP
d137 1
a137 1
.IR random (3).
d139 1
a139 1
.I jot
d141 1
a141 1
.IR iota ,
d143 1
a143 12
.SH EXAMPLES
.de IC
.IP
.ss 36
.ft B
..
.de NC
.br
.ss 12
.PP
..
.PP
d145 3
a147 3
.IC
jot 21 \-1 1.00
.NC
d150 3
a152 3
.IC
jot \-c 128 0
.NC
d154 3
a156 3
.IC
jot \-w xa%c 26 a
.NC
d158 3
a160 3
.IC
jot \-r \-c 160 a z | rs \-g 0 8
.NC
d162 1
a162 1
.IR yes 's
d164 3
a166 3
.IC
jot \-b yes 0
.NC
d168 1
a168 1
.IR ed (1)
d171 3
a173 3
.IC
jot \-w %ds/old/new/ 30 2 \- 5
.NC
d177 3
a179 3
.IC
jot 0 9 \- \-.5
.NC
d181 3
a183 3
.IC
jot \-b x 512 > block
.NC
d186 3
a188 3
.IC
expand \-\`jot \-s, \- 10 132 4\`
.NC
d190 10
a199 5
.IC
grep \`jot \-s "" \-b . 80\`
.NC
.SH SEE ALSO
ed(1), expand(1), rs(1), yes(1), printf(3), random(3), expand(1)
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
