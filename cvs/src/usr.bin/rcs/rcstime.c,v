head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.32
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.28
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.26
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.24
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.22
	OPENBSD_5_0:1.3.0.20
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.18
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.16
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2016.08.26.09.02.54;	author guenther;	state Exp;
branches;
next	1.5;
commitid	07zudOJ8CxdoPUjD;

1.5
date	2014.09.30.11.01.20;	author otto;	state Exp;
branches;
next	1.4;
commitid	htX6b6zEMhRLvvKO;

1.4
date	2014.04.29.07.44.19;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.27.07.59.13;	author xsa;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.29.03.00.12;	author niallo;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.26.02.55.13;	author joris;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Pull in <time.h> for struct tm, used in rcs.h

ok deraadt@@
@
text
@/*	$OpenBSD: rcstime.c,v 1.5 2014/09/30 11:01:20 otto Exp $	*/
/*
 * Copyright (c) 2006 Joris Vink <joris@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <err.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "rcs.h"

void
rcs_set_tz(char *tz, struct rcs_delta *rdp, struct tm *tb)
{
	int tzone;
	int pos;
	char *h, *m;
	const char *errstr;
	struct tm *ltb;
	time_t now;

	if (!strcmp(tz, "LT")) {
		now = mktime(&rdp->rd_date);
		ltb = localtime(&now);
		ltb->tm_hour += ((int)ltb->tm_gmtoff/3600);
		memcpy(tb, ltb, sizeof(*tb));
	} else {
		pos = 0;
		switch (*tz) {
		case '-':
			break;
		case '+':
			pos = 1;
			break;
		default:
			errx(1, "%s: not a known time zone", tz);
		}

		h = (tz + 1);
		if ((m = strrchr(tz, ':')) != NULL)
			*(m++) = '\0';

		memcpy(tb, &rdp->rd_date, sizeof(*tb));

		tzone = strtonum(h, -23, 23, &errstr);
		if (errstr)
			errx(1, "%s: not a known time zone", tz);

		if (pos) {
			tb->tm_hour += tzone;
			tb->tm_gmtoff += (tzone * 3600);
		} else {
			tb->tm_hour -= tzone;
			tb->tm_gmtoff -= (tzone * 3600);
		}

		if ((tb->tm_hour >= 24) || (tb->tm_hour <= -24))
			tb->tm_hour = 0;

		if (m != NULL) {
			tzone = strtonum(m, 0, 59, &errstr);
			if (errstr)
				errx(1, "%s: not a known minute", m);

			if ((tb->tm_min + tzone) >= 60) {
				tb->tm_hour++;
				tb->tm_min -= (60 - tzone);
			} else
				tb->tm_min += tzone;

			tb->tm_gmtoff += (tzone*60);
		}
	}
}
@


1.5
log
@atoi to strtonum; from Fritjof Bornebusch; ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.4 2014/04/29 07:44:19 jsg Exp $	*/
d30 1
@


1.4
log
@fix a test for invalid timezones
oks from a bunch of people
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.3 2007/02/27 07:59:13 xsa Exp $	*/
d39 1
d66 2
a67 2
		tzone = atoi(h);
		if ((tzone >= 24) || (tzone <= -24))
d82 3
a84 3
			tzone = atoi(m);
			if (tzone >= 60)
				errx(1, "%s: not a known time zone", tz);
@


1.3
log
@As done in OpenCVS, general includes cleanup sweep. OK otto@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.2 2006/05/29 03:00:12 niallo Exp $	*/
d66 1
a66 1
		if ((tzone >= 24) && (tzone <= -24))
@


1.2
log
@- sizeof(struct tm) -> sizeof(*tb)

little tidbit from the flight to c2k6
ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.1 2006/04/26 02:55:13 joris Exp $	*/
d27 3
a29 1
#include "includes.h"
@


1.1
log
@fork our code we shared between openrcs/cvs into the openrcs dir.

this was starting to become inhuman to maintain without
ugly ugly hacks in the shared code, and it will be easier
to make specific changes for openrcs without touching the
soon-to-be-replaced opencvs code.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcstime.c,v 1.5 2006/04/17 06:33:22 ray Exp $	*/
d44 1
a44 1
		memcpy(tb, ltb, sizeof(struct tm));
d61 1
a61 1
		memcpy(tb, &rdp->rd_date, sizeof(struct tm));
@

