head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.10
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.12
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.17
date	2016.05.09.13.03.55;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	MpUv5TKAVMeSudmn;

1.16
date	2013.06.03.17.04.35;	author jcs;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.06.15.36.52;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.20.19.21.10;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.20.19.53.53;	author tobias;	state Exp;
branches;
next	1.12;

1.12
date	2010.10.05.15.16.48;	author tobias;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.05.15.13.04;	author tobias;	state Exp;
branches;
next	1.10;

1.10
date	2010.08.31.20.42.45;	author tobias;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.23.21.46.05;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.02.16.21.38;	author xsa;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.31.16.36.11;	author tobias;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.27.07.59.13;	author xsa;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.03.03.05.10;	author niallo;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.27.08.12.29;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.11.07.34.26;	author xsa;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.21.55.22;	author joris;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.26.02.55.13;	author joris;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Implement Mdocdate keyword substitution.
In particular, this stops rcsdiff(1) and CVSweb from showing
wrong Mdocdate lines in diffs.
Problem originally reported by tj@@.
OK tobias@@ otto@@ millert@@
@
text
@/*	$OpenBSD: rcs.h,v 1.16 2013/06/03 17:04:35 jcs Exp $	*/
/*
 * Copyright (c) 2004 Jean-Francois Brousseau <jfb@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef RCS_H
#define RCS_H

#include <sys/queue.h>

#include <stdio.h>

#include "buf.h"

#define RCS_DIFF_MAXARG		32
#define RCS_DIFF_DIV \
	"==================================================================="

#define RCSDIR			"RCS"
#define RCS_FILE_EXT		",v"

#define RCS_HEAD_BRANCH		"HEAD"
#define RCS_HEAD_INIT		"1.1"
#define RCS_HEAD_REV		((RCSNUM *)(-1))


#define RCS_STATE_INVALCHAR	"$,:;@@"
#define RCS_SYM_INVALCHAR	"$,.:;@@"

#define RCS_MAGIC_BRANCH	".0."
#define RCS_STATE_EXP		"Exp"
#define RCS_STATE_DEAD		"dead"

/* lock types */
#define RCS_LOCK_INVAL		(-1)
#define RCS_LOCK_LOOSE		0
#define RCS_LOCK_STRICT		1

/*
 * Keyword expansion table
 */
#define RCS_KW_AUTHOR		0x1000
#define RCS_KW_DATE		0x2000
#define RCS_KW_LOG		0x4000
#define RCS_KW_NAME		0x8000
#define RCS_KW_RCSFILE		0x0100
#define RCS_KW_REVISION		0x0200
#define RCS_KW_SOURCE		0x0400
#define RCS_KW_STATE		0x0800
#define RCS_KW_FULLPATH		0x0010
#define RCS_KW_MDOCDATE		0x0020
#define RCS_KW_LOCKER		0x10000

#define RCS_KW_ID \
	(RCS_KW_RCSFILE | RCS_KW_REVISION | RCS_KW_DATE \
	| RCS_KW_AUTHOR | RCS_KW_STATE | RCS_KW_LOCKER)

#define RCS_KW_HEADER	(RCS_KW_ID | RCS_KW_FULLPATH)

/* RCS keyword expansion modes (kflags) */
#define RCS_KWEXP_NONE	0x00
#define RCS_KWEXP_NAME	0x01	/* include keyword name */
#define RCS_KWEXP_VAL	0x02	/* include keyword value */
#define RCS_KWEXP_LKR	0x04	/* include name of locker */
#define RCS_KWEXP_OLD	0x08	/* generate old keyword string */
#define RCS_KWEXP_ERR	0x10	/* mode has an error */

#define RCS_KWEXP_DEFAULT	(RCS_KWEXP_NAME | RCS_KWEXP_VAL)
#define RCS_KWEXP_KVL		(RCS_KWEXP_NAME | RCS_KWEXP_VAL | RCS_KWEXP_LKR)

#define RCS_KWEXP_INVAL(k) \
	((k & RCS_KWEXP_ERR) || \
	((k & RCS_KWEXP_OLD) && (k & ~RCS_KWEXP_OLD)))

struct rcs_kw {
	char	kw_str[16];
	int	kw_type;
};

#define RCS_NKWORDS	(sizeof(rcs_expkw)/sizeof(rcs_expkw[0]))

#define RCSNUM_MAXNUM	USHRT_MAX
#define RCSNUM_MAXLEN	64

#define RCSNUM_ISBRANCH(n)	((n)->rn_len % 2)
#define RCSNUM_ISBRANCHREV(n)	(!((n)->rn_len % 2) && ((n)->rn_len >= 4))
#define RCSNUM_NO_MAGIC		(1<<0)

/* file flags */
#define RCS_READ	  (1<<0)
#define RCS_WRITE	  (1<<1)
#define RCS_RDWR	  (RCS_READ|RCS_WRITE)
#define RCS_CREATE	  (1<<2)  /* create the file */
#define RCS_PARSE_FULLY   (1<<3)  /* fully parse it on open */

/* internal flags */
#define RCS_PARSED	  (1<<4)  /* file has been parsed */
#define RCS_SYNCED	  (1<<5)  /* in-mem copy is sync with disk copy */
#define RCS_SLOCK	  (1<<6)  /* strict lock */

/* parser flags */
#define PARSED_DELTAS     (1<<7)  /* all deltas are parsed */
#define PARSED_DESC       (1<<8)  /* the description is parsed */
#define PARSED_DELTATEXTS (1<<9)  /* all delta texts are parsed */

/* delta flags */
#define RCS_RD_DEAD	0x01	/* dead */
#define RCS_RD_SELECT	0x02	/* select for operation */

/* RCS error codes */
#define RCS_ERR_NOERR	0
#define RCS_ERR_NOENT	1
#define RCS_ERR_DUPENT	2
#define RCS_ERR_BADNUM	3
#define RCS_ERR_BADSYM	4
#define RCS_ERR_PARSE	5
#define RCS_ERR_ERRNO	255

/* used for rcs_checkout_rev */
#define CHECKOUT_REV_CREATED	1
#define CHECKOUT_REV_MERGED	2
#define CHECKOUT_REV_REMOVED	3
#define CHECKOUT_REV_UPDATED	4

/* commitids in cvs/cvsnt can be up to 64 bytes */
#define RCS_COMMITID_MAXLEN 64

typedef struct rcs_num {
	u_int		 rn_len;
	u_int16_t	*rn_id;
} RCSNUM;

struct rcs_access {
	char			*ra_name;
	TAILQ_ENTRY(rcs_access)	 ra_list;
};

struct rcs_sym {
	char			*rs_name;
	RCSNUM			*rs_num;
	TAILQ_ENTRY(rcs_sym)	 rs_list;
};

struct rcs_lock {
	char	*rl_name;
	RCSNUM	*rl_num;

	TAILQ_ENTRY(rcs_lock)	 rl_list;
};

struct rcs_branch {
	RCSNUM			*rb_num;
	TAILQ_ENTRY(rcs_branch)	 rb_list;
};

TAILQ_HEAD(rcs_dlist, rcs_delta);

struct rcs_delta {
	RCSNUM		*rd_num;
	RCSNUM		*rd_next;
	u_int		 rd_flags;
	struct tm	 rd_date;
	char		*rd_author;
	char		*rd_state;
	char		*rd_commitid;
	char		*rd_log;
	char		*rd_locker;
	u_char		*rd_text;
	size_t		 rd_tlen;

	TAILQ_HEAD(, rcs_branch)	rd_branches;
	TAILQ_ENTRY(rcs_delta)		rd_list;
};


typedef struct rcs_file {
	FILE	*rf_file;
	char	*rf_path;
	mode_t	 rf_mode;
	u_int	 rf_flags;

	RCSNUM	*rf_head;
	RCSNUM	*rf_branch;
	char	*rf_comment;
	char	*rf_expand;
	char	*rf_desc;

	u_int					rf_ndelta;
	struct rcs_dlist			rf_delta;
	TAILQ_HEAD(rcs_alist, rcs_access)	rf_access;
	TAILQ_HEAD(rcs_slist, rcs_sym)		rf_symbols;
	TAILQ_HEAD(rcs_llist, rcs_lock)		rf_locks;

	void	*rf_pdata;
} RCSFILE;

extern int rcs_errno;

RCSFILE			*rcs_open(const char *, int, int, ...);
void			 rcs_close(RCSFILE *);
int			 rcs_head_set(RCSFILE *, RCSNUM *);
const RCSNUM		*rcs_branch_get(RCSFILE *);
int			 rcs_access_add(RCSFILE *, const char *);
int			 rcs_access_remove(RCSFILE *, const char *);
int			 rcs_access_check(RCSFILE *, const char *);
struct rcs_delta	*rcs_findrev(RCSFILE *, RCSNUM *);
int			 rcs_sym_add(RCSFILE *, const char *, RCSNUM *);
int			 rcs_sym_remove(RCSFILE *, const char *);
RCSNUM			*rcs_sym_getrev(RCSFILE *, const char *);
int			 rcs_sym_check(const char *);
int			 rcs_lock_getmode(RCSFILE *);
int			 rcs_lock_setmode(RCSFILE *, int);
int			 rcs_lock_add(RCSFILE *, const char *, RCSNUM *);
int			 rcs_lock_remove(RCSFILE *, const char *, RCSNUM *);
BUF			*rcs_getrev(RCSFILE *, RCSNUM *);
int			 rcs_deltatext_set(RCSFILE *, RCSNUM *, BUF *);
void			 rcs_desc_set(RCSFILE *, const char *);
void			 rcs_comment_set(RCSFILE *, const char *);
BUF			*rcs_kwexp_buf(BUF *, RCSFILE *, RCSNUM *);
void			 rcs_kwexp_set(RCSFILE *, int);
int			 rcs_kwexp_get(RCSFILE *);
int			 rcs_rev_add(RCSFILE *, RCSNUM *, const char *, time_t,
			     const char *);
time_t			 rcs_rev_getdate(RCSFILE *, RCSNUM *);
int			 rcs_rev_setlog(RCSFILE *, RCSNUM *, const char *);
int			 rcs_rev_remove(RCSFILE *, RCSNUM *);
int			 rcs_state_set(RCSFILE *, RCSNUM *, const char *);
int			 rcs_state_check(const char *);
void			 rcs_write(RCSFILE *);
void			 rcs_delta_stats(struct rcs_delta *, int *, int *);

int	rcs_kflag_get(const char *);
void	rcs_kflag_usage(void);
int	rcs_kw_expand(RCSFILE *, u_char *, size_t, size_t *);

RCSNUM	*rcsnum_alloc(void);
RCSNUM	*rcsnum_parse(const char *);
RCSNUM	*rcsnum_brtorev(const RCSNUM *);
RCSNUM	*rcsnum_revtobr(const RCSNUM *);
RCSNUM	*rcsnum_inc(RCSNUM *);
void	 rcsnum_free(RCSNUM *);
int	 rcsnum_addmagic(RCSNUM *);
int	 rcsnum_aton(const char *, char **, RCSNUM *);
char	*rcsnum_tostr(const RCSNUM *, char *, size_t);
void	 rcsnum_cpy(const RCSNUM *, RCSNUM *, u_int);
int	 rcsnum_cmp(const RCSNUM *, const RCSNUM *, u_int);

/* rcstime.c */
void	 rcs_set_tz(char *, struct rcs_delta *, struct tm *);
extern char *timezone_flag;
extern int rcsnum_flags;

#endif	/* RCS_H */
@


1.16
log
@properly handle commitid tokens found in rcs files

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.15 2011/07/06 15:36:52 nicm Exp $	*/
d72 1
@


1.15
log
@Replace the keyword expansion code with a faster, more readable version
which additionally also supports $Log$ and $Locker. Written by Joerg
Sonnenberger and tweaked by me.

ok ray
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.14 2011/05/20 19:21:10 nicm Exp $	*/
d145 3
d185 1
@


1.14
log
@Remove a bunch of unused functions, from Michael W Bombardieri.

ok ray
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.13 2010/10/20 19:53:53 tobias Exp $	*/
d72 1
d76 1
a76 1
	| RCS_KW_AUTHOR | RCS_KW_STATE)
@


1.13
log
@Remove the need for rp_file in parser structure, instead keep only one
FILE pointer in RCSFILE.  This fixes some ugliness in closing an
fdopen()ed FILE and its underlying file descriptor.

Notified by Joerg Sonnenberger <joerg at britannica dot bec to de>

discussed with and ok nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.12 2010/10/05 15:16:48 tobias Exp $	*/
a215 1
const RCSNUM		*rcs_head_get(RCSFILE *);
a217 1
int			 rcs_branch_set(RCSFILE *, const RCSNUM *);
a231 1
const char		*rcs_desc_get(RCSFILE *);
a232 2
const char		*rcs_comment_lookup(const char *);
const char		*rcs_comment_get(RCSFILE *);
a242 1
const char		*rcs_state_get(RCSFILE *, RCSNUM *);
a243 1
const char		*rcs_errstr(int);
a255 1
RCSNUM	*rcsnum_dec(RCSNUM *);
@


1.12
log
@Zapped unused function rcs_tag_resolve.

ok xsa
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.11 2010/10/05 15:13:04 tobias Exp $	*/
d32 2
d192 1
a192 1
	int	 rf_fd;
@


1.11
log
@rcs_state_check must check for more invalid characters than just space.

ok nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.10 2010/08/31 20:42:45 tobias Exp $	*/
a247 1
RCSNUM			*rcs_tag_resolve(RCSFILE *, const char *);
@


1.10
log
@Removed ra_uid, which was supposed to save the uid of a delta's author.
Is not used and not useful.

ok xsa, zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.9 2010/07/23 21:46:05 ray Exp $	*/
d46 1
@


1.9
log
@Reduce variable/function name and whitespace differences between
cvs/rcs.

OK xsa zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.8 2008/02/02 16:21:38 xsa Exp $	*/
a147 1
	uid_t			 ra_uid;
@


1.8
log
@From src/usr.bin/cvs:

> add changed lines support to log and rlog (the + and - stuff)
> from Pierre Riteau;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.7 2008/01/31 16:36:11 tobias Exp $	*/
a47 1

a56 1

a90 1

a145 1

a163 1

@


1.7
log
@Revert last patch and add this magic branch number only during
output, this way we don't have to hassle in our internal brach handling.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.6 2007/02/27 07:59:13 xsa Exp $	*/
d256 1
@


1.6
log
@As done in OpenCVS, general includes cleanup sweep. OK otto@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.5 2006/06/03 03:05:10 niallo Exp $	*/
d268 1
@


1.5
log
@- correctly handle binary files; say bye bye to using c strings for deltatexts.

"slap it in" joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.4 2006/05/27 08:12:29 ray Exp $	*/
d29 2
@


1.4
log
@Rename RCSFILE.fd to RCSFILE.rf_fd, plus minor spacing nits.  No
binary change.

OK xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.3 2006/05/11 07:34:26 xsa Exp $	*/
d234 1
a234 1
int			 rcs_deltatext_set(RCSFILE *, RCSNUM *, const char *);
@


1.3
log
@first round of rcs_write() cleanup; prodded by joris@@; input/OK ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.2 2006/04/26 21:55:22 joris Exp $	*/
d164 1
a164 1
	TAILQ_ENTRY(rcs_lock)	rl_list;
d170 1
a170 1
	TAILQ_ENTRY(rcs_branch)	rb_list;
d193 1
a193 1
	int	fd;
@


1.2
log
@prevent file races by obtaining an fd for the RCS file and
do our operations on that, this is safe and guarantees we
can operate on the file until we close(2) it.

a fix is coming for the remaining races in our diff code.
okay niallo@@ and ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.1 2006/04/26 02:55:13 joris Exp $	*/
d253 1
a253 1
int			 rcs_write(RCSFILE *);
@


1.1
log
@fork our code we shared between openrcs/cvs into the openrcs dir.

this was starting to become inhuman to maintain without
ugly ugly hacks in the shared code, and it will be easier
to make specific changes for openrcs without touching the
soon-to-be-replaced opencvs code.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcs.h,v 1.61 2006/04/14 22:33:15 niallo Exp $	*/
d193 1
a212 1

d215 1
a215 2

RCSFILE			*rcs_open(const char *, int, ...);
a254 1

a272 1

a273 1

@

