head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.4.0.24
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2015.11.17.18.25.03;	author tobias;	state Exp;
branches;
next	1.10;
commitid	FhbAgvR7WtTmuXiY;

1.10
date	2015.06.17.20.50.10;	author nicm;	state Exp;
branches;
next	1.9;
commitid	cmfhUvqj2nJhmKMW;

1.9
date	2015.06.13.20.15.21;	author nicm;	state Exp;
branches;
next	1.8;
commitid	FFUg8uzT5GNAfRXp;

1.8
date	2015.03.26.15.17.30;	author okan;	state Exp;
branches;
next	1.7;
commitid	xzJ0K8iAu4ExNKog;

1.7
date	2015.02.05.12.59.58;	author millert;	state Exp;
branches;
next	1.6;
commitid	DTQbfd4poqBW8iSJ;

1.6
date	2014.12.01.21.58.46;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	Z3HC5pAWzpo5jsTe;

1.5
date	2014.09.27.15.16.36;	author otto;	state Exp;
branches;
next	1.4;
commitid	Je7ugylQopxc9dFL;

1.4
date	2009.06.07.08.39.13;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.27.07.59.13;	author xsa;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.29.05.31.28;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.26.02.55.13;	author joris;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Merge xmalloc.[ch] files across base, skipping OpenSSH for now.

ok nicm
@
text
@/* $OpenBSD: xmalloc.c,v 1.10 2015/06/17 20:50:10 nicm Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Versions of malloc and friends that check their results, and never return
 * failure (they call fatal if they encounter an error).
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#include <err.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "xmalloc.h"

void *
xmalloc(size_t size)
{
	void *ptr;

	if (size == 0)
		errx(1, "xmalloc: zero size");
	ptr = malloc(size);
	if (ptr == NULL)
		err(1, "xmalloc: allocating %zu bytes", size);
	return ptr;
}

void *
xcalloc(size_t nmemb, size_t size)
{
	void *ptr;

	if (size == 0 || nmemb == 0)
		errx(1, "xcalloc: zero size");
	ptr = calloc(nmemb, size);
	if (ptr == NULL)
		err(1, "xcalloc: allocating %zu * %zu bytes", nmemb, size);
	return ptr;
}

void *
xreallocarray(void *ptr, size_t nmemb, size_t size)
{
	void *new_ptr;

	new_ptr = reallocarray(ptr, nmemb, size);
	if (new_ptr == NULL)
		err(1, "xreallocarray: allocating %zu * %zu bytes",
		    nmemb, size);
	return new_ptr;
}

char *
xstrdup(const char *str)
{
	char *cp;

	if ((cp = strdup(str)) == NULL)
		err(1, "xstrdup");
	return cp;
}

int
xasprintf(char **ret, const char *fmt, ...)
{
	va_list ap;
	int i;

	va_start(ap, fmt);
	i = vasprintf(ret, fmt, ap);
	va_end(ap);

	if (i < 0 || *ret == NULL)
		err(1, "xasprintf");

	return i;
}
@


1.10
log
@Use strdup in xstrdup; from Fritjof Bornebusch.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.9 2015/06/13 20:15:21 nicm Exp $ */
d34 1
a34 3
		errx(1,
		    "xmalloc: out of memory (allocating %zu bytes)",
		    size);
a44 2
	if (SIZE_MAX / nmemb < size)
		errx(1, "xcalloc: nmemb * size > SIZE_MAX");
d47 1
a47 2
		errx(1, "xcalloc: out of memory (allocating %zu bytes)",
		    (size * nmemb));
d58 2
a59 2
		errx(1, "xreallocarray: out of memory (new_size %zu bytes)",
		    nmemb * size);
d84 1
a84 1
		errx(1, "xasprintf: could not allocate memory");
d86 1
a86 1
	return (i);
@


1.9
log
@Convert xfree to free. From Fritjof Bornebusch. ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.8 2015/03/26 15:17:30 okan Exp $ */
a70 1
	size_t len;
d73 2
a74 4
	len = strlen(str) + 1;
	cp = xmalloc(len);
	if (strlcpy(cp, str, len) >= len)
		errx(1, "xstrdup: string truncated");
@


1.8
log
@Use the (new) function name in errx() after its rename in r1.6.

ok bcallah@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.7 2015/02/05 12:59:58 millert Exp $ */
a65 8
}

void
xfree(void *ptr)
{
	if (ptr == NULL)
		errx(1, "xfree: NULL pointer given as argument");
	free(ptr);
@


1.7
log
@Include stdint.h, not limits.h to get SIZE_MAX.  OK guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.6 2014/12/01 21:58:46 deraadt Exp $ */
d63 1
a63 1
		errx(1, "xrealloc: out of memory (new_size %zu bytes)",
@


1.6
log
@An internal function called xrealloc() is actually a fail-hard
reallocarray()... so rename it.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.5 2014/09/27 15:16:36 otto Exp $ */
a16 1
#include <limits.h>
d18 1
@


1.5
log
@Use %zu where appropriate, from Fritjof Bornebusch.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.4 2009/06/07 08:39:13 ray Exp $ */
d57 1
a57 1
xrealloc(void *ptr, size_t nmemb, size_t size)
a59 1
	size_t new_size = nmemb * size;
d61 1
a61 8
	if (new_size == 0)
		errx(1, "xrealloc: zero size");
	if (SIZE_MAX / nmemb < size)
		errx(1, "xrealloc: nmemb * size > SIZE_MAX");
	if (ptr == NULL)
		new_ptr = malloc(new_size);
	else
		new_ptr = realloc(ptr, new_size);
d64 1
a64 1
		    new_size);
@


1.4
log
@More cvs/diff/rcs convergence:
1. Mostly variable/function renaming, SIZE_T_MAX->SIZE_MAX, and
spacing.
2. One strchr -> strncspn.
3. diff had a weird thing where it set file[12] = ofile[12] but
never updated file or ofile, then if file and ofile were different
it freed it. I removed it.

OK millert
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.3 2007/02/27 07:59:13 xsa Exp $ */
d35 2
a36 2
		    "xmalloc: out of memory (allocating %lu bytes)",
		    (u_long) size);
d51 2
a52 2
		errx(1, "xcalloc: out of memory (allocating %lu bytes)",
		    (u_long)(size * nmemb));
d71 2
a72 2
		errx(1, "xrealloc: out of memory (new_size %lu bytes)",
		    (u_long) new_size);
@


1.3
log
@As done in OpenCVS, general includes cleanup sweep. OK otto@@.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.2 2006/04/29 05:31:28 ray Exp $ */
d47 2
a48 2
	if (SIZE_T_MAX / nmemb < size)
		errx(1, "xcalloc: nmemb * size > SIZE_T_MAX");
d64 2
a65 2
	if (SIZE_T_MAX / nmemb < size)
		errx(1, "xrealloc: nmemb * size > SIZE_T_MAX");
@


1.2
log
@Check return values for all strlcpy, and strlcat calls.

OK xsa@@ and probably others.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.1 2006/04/26 02:55:13 joris Exp $ */
d16 6
a21 1
#include "includes.h"
@


1.1
log
@fork our code we shared between openrcs/cvs into the openrcs dir.

this was starting to become inhuman to maintain without
ugly ugly hacks in the shared code, and it will be easier
to make specific changes for openrcs without touching the
soon-to-be-replaced opencvs code.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.6 2006/03/28 02:13:44 ray Exp $ */
d87 2
a88 1
	strlcpy(cp, str, len);
@

