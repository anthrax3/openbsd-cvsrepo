head	1.64;
access;
symbols
	OPENBSD_6_0:1.64.0.8
	OPENBSD_6_0_BASE:1.64
	OPENBSD_5_9:1.64.0.4
	OPENBSD_5_9_BASE:1.64
	OPENBSD_5_8:1.64.0.6
	OPENBSD_5_8_BASE:1.64
	OPENBSD_5_7:1.64.0.2
	OPENBSD_5_7_BASE:1.64
	OPENBSD_5_6:1.63.0.20
	OPENBSD_5_6_BASE:1.63
	OPENBSD_5_5:1.63.0.18
	OPENBSD_5_5_BASE:1.63
	OPENBSD_5_4:1.63.0.14
	OPENBSD_5_4_BASE:1.63
	OPENBSD_5_3:1.63.0.12
	OPENBSD_5_3_BASE:1.63
	OPENBSD_5_2:1.63.0.10
	OPENBSD_5_2_BASE:1.63
	OPENBSD_5_1_BASE:1.63
	OPENBSD_5_1:1.63.0.8
	OPENBSD_5_0:1.63.0.6
	OPENBSD_5_0_BASE:1.63
	OPENBSD_4_9:1.63.0.4
	OPENBSD_4_9_BASE:1.63
	OPENBSD_4_8:1.63.0.2
	OPENBSD_4_8_BASE:1.63
	OPENBSD_4_7:1.61.0.6
	OPENBSD_4_7_BASE:1.61
	OPENBSD_4_6:1.61.0.8
	OPENBSD_4_6_BASE:1.61
	OPENBSD_4_5:1.61.0.4
	OPENBSD_4_5_BASE:1.61
	OPENBSD_4_4:1.61.0.2
	OPENBSD_4_4_BASE:1.61
	OPENBSD_4_3:1.60.0.4
	OPENBSD_4_3_BASE:1.60
	OPENBSD_4_2:1.60.0.2
	OPENBSD_4_2_BASE:1.60
	OPENBSD_4_1:1.59.0.4
	OPENBSD_4_1_BASE:1.59
	OPENBSD_4_0:1.59.0.2
	OPENBSD_4_0_BASE:1.59
	OPENBSD_3_9:1.35.0.2
	OPENBSD_3_9_BASE:1.35;
locks; strict;
comment	@ * @;


1.64
date	2014.10.02.06.23.15;	author otto;	state Exp;
branches;
next	1.63;
commitid	yRuTsAu91VfT3St0;

1.63
date	2010.07.23.21.46.05;	author ray;	state Exp;
branches;
next	1.62;

1.62
date	2010.07.23.08.31.19;	author ray;	state Exp;
branches;
next	1.61;

1.61
date	2008.05.10.19.54.58;	author tobias;	state Exp;
branches;
next	1.60;

1.60
date	2007.06.30.08.23.49;	author xsa;	state Exp;
branches;
next	1.59;

1.59
date	2006.08.11.08.18.19;	author xsa;	state Exp;
branches;
next	1.58;

1.58
date	2006.05.15.06.58.03;	author xsa;	state Exp;
branches;
next	1.57;

1.57
date	2006.04.27.07.59.33;	author xsa;	state Exp;
branches;
next	1.56;

1.56
date	2006.04.26.07.47.49;	author xsa;	state Exp;
branches;
next	1.55;

1.55
date	2006.04.26.02.55.13;	author joris;	state Exp;
branches;
next	1.54;

1.54
date	2006.04.24.04.51.57;	author ray;	state Exp;
branches;
next	1.53;

1.53
date	2006.04.21.17.17.29;	author xsa;	state Exp;
branches;
next	1.52;

1.52
date	2006.04.21.14.18.26;	author xsa;	state Exp;
branches;
next	1.51;

1.51
date	2006.04.21.07.06.25;	author xsa;	state Exp;
branches;
next	1.50;

1.50
date	2006.04.19.06.53.41;	author xsa;	state Exp;
branches;
next	1.49;

1.49
date	2006.04.18.03.35.57;	author ray;	state Exp;
branches;
next	1.48;

1.48
date	2006.04.16.12.30.00;	author niallo;	state Exp;
branches;
next	1.47;

1.47
date	2006.04.15.19.35.19;	author xsa;	state Exp;
branches;
next	1.46;

1.46
date	2006.04.13.00.58.25;	author ray;	state Exp;
branches;
next	1.45;

1.45
date	2006.04.12.08.27.31;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.12.08.23.30;	author ray;	state Exp;
branches;
next	1.43;

1.43
date	2006.04.09.19.22.23;	author niallo;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.07.12.54.40;	author xsa;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.01.06.19.29;	author ray;	state Exp;
branches;
next	1.40;

1.40
date	2006.04.01.05.58.17;	author ray;	state Exp;
branches;
next	1.39;

1.39
date	2006.03.15.19.59.37;	author niallo;	state Exp;
branches;
next	1.38;

1.38
date	2006.03.15.03.29.01;	author ray;	state Exp;
branches;
next	1.37;

1.37
date	2006.03.14.03.33.30;	author ray;	state Exp;
branches;
next	1.36;

1.36
date	2006.03.08.20.19.39;	author joris;	state Exp;
branches;
next	1.35;

1.35
date	2006.02.16.17.44.53;	author niallo;	state Exp;
branches;
next	1.34;

1.34
date	2006.01.06.15.30.49;	author xsa;	state Exp;
branches;
next	1.33;

1.33
date	2006.01.05.10.28.24;	author xsa;	state Exp;
branches;
next	1.32;

1.32
date	2005.12.23.00.59.56;	author joris;	state Exp;
branches;
next	1.31;

1.31
date	2005.12.10.20.27.46;	author joris;	state Exp;
branches;
next	1.30;

1.30
date	2005.12.08.18.56.10;	author joris;	state Exp;
branches;
next	1.29;

1.29
date	2005.12.06.10.29.12;	author xsa;	state Exp;
branches;
next	1.28;

1.28
date	2005.12.05.19.49.20;	author xsa;	state Exp;
branches;
next	1.27;

1.27
date	2005.12.05.19.46.46;	author xsa;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.25.13.50.01;	author xsa;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.25.13.48.02;	author xsa;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.23.09.39.20;	author xsa;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.22.13.26.53;	author xsa;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.21.16.20.29;	author xsa;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.16.15.10.32;	author xsa;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.12.22.49.59;	author niallo;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.08.09.22.48;	author xsa;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.02.20.32.45;	author niallo;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.27.07.43.56;	author xsa;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.19.00.30.22;	author joris;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.18.16.20.31;	author xsa;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.18.01.22.14;	author joris;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.15.33.12;	author joris;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.15.23.39.36;	author joris;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.15.18.26.24;	author niallo;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.13.12.35.30;	author joris;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.11.15.50.25;	author niallo;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.06.15.39.11;	author joris;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.06.12.56.49;	author joris;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.06.02.00.05;	author joris;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.06.01.24.25;	author joris;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.02.09.39.01;	author xsa;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.30.16.44.26;	author niallo;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.29.21.30.10;	author joris;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.15.13.19;	author joris;	state Exp;
branches;
next	;


desc
@@


1.64
log
@exit in usage functions themselves; from  Fritjof Bornebusch; ok nicm@@
@
text
@/*	$OpenBSD: rcsprog.h,v 1.63 2010/07/23 21:46:05 ray Exp $	*/
/*
 * Copyright (c) 2005 Joris Vink <joris@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef RCSPROG_H
#define RCSPROG_H

#include "rcs.h"
#include "rcsutil.h"
#include "worklist.h"
#include "xmalloc.h"

#define RCS_DEFAULT_SUFFIX	",v/"
#define RCS_TMPDIR_DEFAULT	"/tmp"

#define RCS_REV_BUFSZ	64
#define RCS_TIME_BUFSZ	64

/* flags specific to ci.c */
#define CI_SYMFORCE	(1<<0)
#define CI_DEFAULT	(1<<1)
#define CI_INIT		(1<<2)
#define CI_KEYWORDSCAN  (1<<3)
#define CI_SKIPDESC	(1<<4)

/* flags specific to co.c */
#define CO_ACLAPPEND	(1<<5)
#define CO_AUTHOR	(1<<6)
#define CO_LOCK		(1<<7)
#define CO_REVDATE	(1<<8)
#define CO_REVERT	(1<<9)
#define CO_STATE	(1<<10)
#define CO_UNLOCK	(1<<11)

/* flags specific to rcsprog.c */
#define RCSPROG_EFLAG	(1<<12)
#define RCSPROG_LFLAG	(1<<13)
#define RCSPROG_NFLAG	(1<<14)
#define RCSPROG_UFLAG	(1<<15)

/* flags shared between merge(1) and rcsmerge(1) */
#define MERGE_EFLAG	(1<<16)
#define MERGE_OFLAG	(1<<17)

/* shared flags  */
#define DESCRIPTION	(1<<18)
#define FORCE		(1<<19)
#define INTERACTIVE	(1<<20)
#define NEWFILE		(1<<21)
#define PIPEOUT		(1<<22)
#define PRESERVETIME	(1<<23)
#define QUIET		(1<<24)

extern char	*__progname;
extern const char	rcs_version[];

extern int	 rcs_optind;
extern char	*rcs_optarg;
extern char	*rcs_suffixes;
extern char	*rcs_tmpdir;
extern struct wklhead temp_files;

/* date.y */
time_t  date_parse(const char *);

/* ci.c */
int		checkin_main(int, char **);
__dead void	checkin_usage(void);

/* co.c */
int		checkout_main(int, char **);
int		checkout_rev(RCSFILE *, RCSNUM *, const char *,
		int, const char *, const char *, const char *, const char *);
__dead void	checkout_usage(void);

/* ident.c */
int		ident_main(int, char **);
__dead void	ident_usage(void);

/* merge.c */
int		merge_main(int, char **);
__dead void	merge_usage(void);

/* rcsclean.c */
int		rcsclean_main(int, char **);
__dead void	rcsclean_usage(void);

/* rcsdiff.c */
int		rcsdiff_main(int, char **);
__dead void	rcsdiff_usage(void);

/* rcsmerge.c */
int		rcsmerge_main(int, char **);
__dead void	rcsmerge_usage(void);

/* rcsprog.c */
int		build_cmd(char ***, char **, int);
int		rcs_getopt(int, char **, const char *);
int		rcs_main(int, char **);
__dead void	rcs_usage(void);
void		(*usage)(void);

/* rlog.c */
int		rlog_main(int, char **);
__dead void	rlog_usage(void);

#endif	/* RCSPROG_H */
@


1.63
log
@Reduce variable/function name and whitespace differences between
cvs/rcs.

OK xsa zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.62 2010/07/23 08:31:19 ray Exp $	*/
d89 2
a90 2
int	checkin_main(int, char **);
void	checkin_usage(void);
d93 4
a96 4
int	checkout_main(int, char **);
int	checkout_rev(RCSFILE *, RCSNUM *, const char *, int, const char *,
	    const char *, const char *, const char *);
void	checkout_usage(void);
d99 2
a100 2
int	ident_main(int, char **);
void	ident_usage(void);
d103 2
a104 2
int	merge_main(int, char **);
void	merge_usage(void);
d107 2
a108 2
int	rcsclean_main(int, char **);
void	rcsclean_usage(void);
d111 2
a112 2
int	rcsdiff_main(int, char **);
void	rcsdiff_usage(void);
d115 2
a116 2
int	rcsmerge_main(int, char **);
void	rcsmerge_usage(void);
d119 5
a123 5
int	build_cmd(char ***, char **, int);
int	rcs_getopt(int, char **, const char *);
int	rcs_main(int, char **);
void	rcs_usage(void);
void	(*usage)(void);
d126 2
a127 2
int	rlog_main(int, char **);
void	rlog_usage(void);
@


1.62
log
@Rename a bunch of variables and functions, removing the cvs_/rcs_
prefixes to reduce differences between cvs and rcs files.

"yes!" nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.61 2008/05/10 19:54:58 tobias Exp $	*/
d86 1
a86 1
time_t  rcs_date_parse(const char *);
@


1.61
log
@OpenRCS only handled a max of 128 arguments on command line + RCSINIT,
which was a bogus limit.  Spotted by naddy.

horribly prodded by and ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.60 2007/06/30 08:23:49 xsa Exp $	*/
d83 1
a83 1
extern struct rcs_wklhead rcs_temp_files;
@


1.60
log
@Sync revisions and time buffers size to be consistent with each others.
Simplifies further size tweaks if needed.
OK ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.59 2006/08/11 08:18:19 xsa Exp $	*/
d119 1
a119 1
int	rcs_init(char *, char **, int);
@


1.59
log
@correctly handle merge(1) and rcsmerge(1) -e and -E flags; tests and OK ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.58 2006/05/15 06:58:03 xsa Exp $	*/
d37 3
@


1.58
log
@missing bits for a working merge(1). Built and enabled.
OK joris@@ ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.57 2006/04/27 07:59:33 xsa Exp $	*/
d60 4
d65 7
a71 7
#define DESCRIPTION	(1<<16)
#define FORCE		(1<<17)
#define INTERACTIVE	(1<<18)
#define NEWFILE		(1<<19)
#define PIPEOUT		(1<<20)
#define PRESERVETIME	(1<<21)
#define QUIET		(1<<22)
@


1.57
log
@zap util.[ch] and move the content into rcsutil.[ch].
discussed with joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.56 2006/04/26 07:47:49 xsa Exp $	*/
d94 4
@


1.56
log
@remove dup of <err.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.55 2006/04/26 02:55:13 joris Exp $	*/
a32 1
#include "util.h"
@


1.55
log
@fork our code we shared between openrcs/cvs into the openrcs dir.

this was starting to become inhuman to maintain without
ugly ugly hacks in the shared code, and it will be easier
to make specific changes for openrcs without touching the
soon-to-be-replaced opencvs code.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.54 2006/04/24 04:51:57 ray Exp $	*/
a28 2

#include <err.h>
@


1.54
log
@o Better match GNU behavior (a bare -t does NOT read from stdin,
  unlike rcs).
o Share code with rcs by moving rcs_set_description() to rcsutil.c.
o Change description prompt from #define to const char *.

OK xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.53 2006/04/21 17:17:29 xsa Exp $	*/
a31 1
#include "log.h"
d79 1
a79 1
extern struct cvs_wklhead rcs_temp_files;
d82 1
a82 1
time_t  cvs_date_parse(const char *);
@


1.53
log
@move shared functions into rcsutil.[ch]; this makes rcsprog.c cleaner;
"the voices in my head say OK!" joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.52 2006/04/21 14:18:26 xsa Exp $	*/
d62 1
a62 2
#define RCSPROG_TFLAG	(1<<15)
#define RCSPROG_UFLAG	(1<<16)
d65 1
@


1.52
log
@remove overkill cvs_log() and rather use warn()/warnx().
OK ray@@ and discussed with joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.51 2006/04/21 07:06:25 xsa Exp $	*/
d34 1
a114 10
void	rcs_set_mtime(const char *, time_t);
char	*rcs_choosefile(const char *);
int	rcs_statfile(char *, char *, size_t);
time_t	rcs_get_mtime(const char *);
RCSNUM	*rcs_getrevnum(const char *, RCSFILE *);
char	*rcs_prompt(const char *);
u_int	rcs_rev_select(RCSFILE *, char *);
void	rcs_set_rev(const char *, RCSNUM **);
void	rcs_setrevstr(char **, char *);
void	rcs_setrevstr2(char **, char **, char *);
@


1.51
log
@switch -p handling to bitwise flags; OK ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.50 2006/04/19 06:53:41 xsa Exp $	*/
d29 2
@


1.50
log
@switch -q handling to bitwise flags; OK ray@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.49 2006/04/18 03:35:57 ray Exp $	*/
d66 3
a68 2
#define PRESERVETIME	(1<<20)
#define QUIET		(1<<21)
a71 1
extern int	pipeout;
@


1.49
log
@Combine code to prompt user for input into a shared function,
reducing some complex fats from ci.c.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.48 2006/04/16 12:30:00 niallo Exp $	*/
d67 1
a70 1
extern int	verbose;
@


1.48
log
@- fix description handling.

ok joris@@ xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.47 2006/04/15 19:35:19 xsa Exp $	*/
d117 1
@


1.47
log
@dont stupidly duplicate code. make rlog use rcs_rev_select() and thus
nuke rlog_rev_select(). OK niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.46 2006/04/13 00:58:25 ray Exp $	*/
d44 1
d47 7
a53 7
#define CO_ACLAPPEND	(1<<4)
#define CO_AUTHOR	(1<<5)
#define CO_LOCK		(1<<6)
#define CO_REVDATE	(1<<7)
#define CO_REVERT	(1<<8)
#define CO_STATE	(1<<9)
#define CO_UNLOCK	(1<<10)
d56 5
a60 5
#define RCSPROG_EFLAG	(1<<11)
#define RCSPROG_LFLAG	(1<<12)
#define RCSPROG_NFLAG	(1<<13)
#define RCSPROG_TFLAG	(1<<14)
#define RCSPROG_UFLAG	(1<<15)
d63 4
a66 4
#define FORCE		(1<<16)
#define INTERACTIVE	(1<<17)
#define NEWFILE		(1<<18)
#define PRESERVETIME	(1<<19)
@


1.46
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.45 2006/04/12 08:27:31 deraadt Exp $	*/
d116 1
@


1.45
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.44 2006/04/12 08:23:30 ray Exp $	*/
d115 1
@


1.44
log
@Clean up <rev> handling.  Whenever a revision is specified after a
flag, it calls one of two new functions: rcs_setrevstr() or
rcs_setrevstr2().  rcs_setrevstr() sets a string to another string,
and complains if it was set more than once.  rcs_setrevstr2() takes
two strings, sets one after the other, and fatal()s if more than
two strings were given.

All <rev> handling is now done in the loop that goes through each
argv.  This is necessary for parsing symbols, which will be much
easier after this.

Along the way a lot of memory leaks were cleaned up.  There is one
area where rcs_set_rev() is called, which allocates a RCSNUM and
stores it in pb.newrev, but it segfaults whenever I try to rcsnum_free()
it.  I put an /* XXX */ comment there for now.

Passes regression tests and the code is less complicated in some
ways (to me).

Suggestions and OK xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.43 2006/04/09 19:22:23 niallo Exp $	*/
d112 1
a112 1
char 	*rcs_choosefile(const char *);
@


1.43
log
@- don't print out warnings about locking when they are actually wrong and
just confuse the user.

ok and input joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.42 2006/04/07 12:54:40 xsa Exp $	*/
d116 2
@


1.42
log
@change rcs_set_mtime() return type to void.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.41 2006/04/01 06:19:29 ray Exp $	*/
d50 3
a52 2
#define CO_STATE	(1<<8)
#define CO_UNLOCK	(1<<9)
d55 5
a59 5
#define RCSPROG_EFLAG	(1<<10)
#define RCSPROG_LFLAG	(1<<11)
#define RCSPROG_NFLAG	(1<<12)
#define RCSPROG_TFLAG	(1<<13)
#define RCSPROG_UFLAG	(1<<14)
d62 4
a65 4
#define FORCE		(1<<15)
#define INTERACTIVE	(1<<16)
#define NEWFILE		(1<<17)
#define PRESERVETIME	(1<<18)
@


1.41
log
@Add rcs -l, rcs -u, and regression tests.

``put it all in'' joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.40 2006/04/01 05:58:17 ray Exp $	*/
d110 1
a110 1
int	rcs_set_mtime(const char *, time_t);
@


1.40
log
@Keep cvs flags in `flags', rcs flags in `rcsflags' in rcsprog.h.
Prevents bitfield pollution between the two.

``This is how it should be.'' niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.39 2006/03/15 19:59:37 niallo Exp $	*/
d55 4
a58 2
#define RCSPROG_NFLAG	(1<<11)
#define RCSPROG_TFLAG	(1<<12)
d61 4
a64 4
#define FORCE		(1<<13)
#define INTERACTIVE	(1<<14)
#define NEWFILE		(1<<15)
#define PRESERVETIME	(1<<16)
@


1.39
log
@- add util.h, reorganising a bunch of things and exposing cvs_yesno()
function to be used by rcs.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.38 2006/03/15 03:29:01 ray Exp $	*/
d53 5
d59 4
a62 4
#define FORCE		(1<<10)
#define INTERACTIVE	(1<<11)
#define NEWFILE		(1<<12)
#define PRESERVETIME	(1<<13)
@


1.38
log
@Move and rename checkin_choose_rcsfile() to rcs_choosefile().

ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.37 2006/03/14 03:33:30 ray Exp $	*/
d33 1
@


1.37
log
@ci currently doesn't parse the -x flag at all, defaulting to ",v/" every
time.  I rewrote checkin_choose_rcsfile() to handle it using these rules:
 - If a directory structure is given (ci -x,abcd dir/dir2/file) then all
   RCS files are under dir/dir2.
 - If the RCS/ directory exists, use it.  Otherwise use current directory.
 - If the -x flag is specified, use those slash-separated extensions.
   Otherwise, use the default (",v/").
 - Look in the rcs directory (RCS/ or current directory) for a file
   with a matching extension, for each extension.  Each extension is
   tried in order.  If a file exists, it is used.  If no file exists
   with any extension, the first one is used.
 - The empty extension is treated as no extension, because I can't
   figure out what its special meaning is.

It sounds complicated, and the code is kinda complicated as well, but it
makes sense if you think about it.

ok niallo
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.36 2006/03/08 20:19:39 joris Exp $	*/
d103 1
@


1.36
log
@make openrcs use the worklist framework to keep track of temporary files
and remove them in case it gets interrupted.

suggested by deraadt@@, ok niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.35 2006/02/16 17:44:53 niallo Exp $	*/
d35 1
@


1.35
log
@- finally add proper support for `ci -k`. this little-used option requires
quite a lot of parsing code.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.34 2006/01/06 15:30:49 xsa Exp $	*/
d32 1
d66 1
@


1.34
log
@typos;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.33 2006/01/05 10:28:24 xsa Exp $	*/
d40 1
d43 6
a48 6
#define CO_ACLAPPEND	(1<<3)
#define CO_AUTHOR	(1<<4)
#define CO_LOCK		(1<<5)
#define CO_REVDATE	(1<<6)
#define CO_STATE	(1<<7)
#define CO_UNLOCK	(1<<8)
d51 4
a54 4
#define FORCE		(1<<9)
#define INTERACTIVE	(1<<10)
#define NEWFILE		(1<<11)
#define PRESERVETIME	(1<<12)
@


1.33
log
@cleanup, move log.h and rcs.h inclusion into rcsprog.h;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.32 2005/12/23 00:59:56 joris Exp $	*/
d105 1
a105 1
/* rlog */
@


1.32
log
@support co -d, which checks out the first revision who's
date is less than or equal to the given date.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.31 2005/12/10 20:27:46 joris Exp $	*/
d30 2
@


1.31
log
@switch to xmalloc stuff, me and xsa@@ agreed on this a long
time ago, but we were being held back by jfb. too bad for him.

next step is to use fatal() through out the code for unrecoverable
errors instead of trying to be all nice and fluffy and reach main() again.

ok niallo@@ and xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.30 2005/12/08 18:56:10 joris Exp $	*/
d73 1
a73 1
	    const char *, const char *);
@


1.30
log
@complete and correct rcs locking functionality,
it was only done partially and as a bonus, completely wrong.

seriously guys what was up with that?
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.29 2005/12/06 10:29:12 xsa Exp $	*/
d29 2
@


1.29
log
@knf; spaces vs. tabs;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.28 2005/12/05 19:49:20 xsa Exp $	*/
d70 2
a71 1
int	checkout_rev(RCSFILE *, RCSNUM *, const char *, int, const char *);
@


1.28
log
@hrmz..
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.27 2005/12/05 19:46:46 xsa Exp $	*/
d33 3
a35 3
#define CI_SYMFORCE     (1<<0)
#define CI_DEFAULT      (1<<1)
#define CI_INIT         (1<<2)
d38 1
a38 1
#define CO_ACLAPPEND    (1<<3)
d40 4
a43 4
#define CO_LOCK	        (1<<5)
#define CO_REVDATE      (1<<6)
#define CO_STATE        (1<<7)
#define CO_UNLOCK       (1<<8)
d46 3
a48 3
#define FORCE           (1<<9)
#define INTERACTIVE     (1<<10)
#define NEWFILE         (1<<11)
@


1.27
log
@ooops, missed that in previous commit; unbreak;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.26 2005/11/25 13:50:01 xsa Exp $	*/
d46 1
a46 1
#define FORCE           (1<<8)
@


1.26
log
@add support for `-T' and enable it for co(1);
tested and OK niallo@@. "Looks good" joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.25 2005/11/25 13:48:02 xsa Exp $	*/
d39 5
a43 4
#define CO_LOCK	        (1<<4)
#define CO_REVDATE      (1<<5)
#define CO_STATE        (1<<6)
#define CO_UNLOCK       (1<<7)
d47 3
a49 3
#define INTERACTIVE     (1<<9)
#define NEWFILE         (1<<10)
#define PRESERVETIME	(1<<11)
@


1.25
log
@indent;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.24 2005/11/23 09:39:20 xsa Exp $	*/
d92 1
d94 1
@


1.24
log
@initial bits for -T support;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.23 2005/11/22 13:26:53 xsa Exp $	*/
d50 9
a58 9
extern char *__progname;
extern const char rcs_version[];
extern int verbose;
extern int pipeout;

extern int rcs_optind;
extern char *rcs_optarg;
extern char *rcs_suffixes;
extern char *rcs_tmpdir;
@


1.23
log
@cleanup;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.22 2005/11/21 16:20:29 xsa Exp $	*/
d48 1
@


1.22
log
@enable `-xsuffixes' support as it has been added a few days ago
in rcs_statfile();
niallo ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.21 2005/11/16 15:10:32 xsa Exp $	*/
d62 7
a68 1
void	rcs_usage(void);
d70 11
a80 1
void	checkin_usage(void);
d82 3
a84 1
void	rcsclean_usage(void);
a85 4
void	rlog_usage(void);
void	ident_usage(void);
void	(*usage)(void);
void	rcs_set_rev(const char *, RCSNUM **);
d87 1
d90 1
d92 5
a96 7
int	checkout_rev(RCSFILE *, RCSNUM *, const char *, int, const char *);
int	checkout_main(int, char **);
int	checkin_main(int, char **);
int	rcs_main(int, char **);
int	rcsdiff_main(int, char **);
int	rcsclean_main(int, char **);
int	rcsmerge_main(int, char **);
d98 1
a98 1
int	ident_main(int, char **);
@


1.21
log
@nuke trailing whitespace;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.20 2005/11/12 22:49:59 niallo Exp $	*/
d56 1
@


1.20
log
@- fix xsa breakage. char arrays on the stack are not NULL if empty. use
flags instead.
- add a few more flags defines while i'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.19 2005/11/08 09:22:48 xsa Exp $	*/
d46 1
a46 1
#define INTERACTIVE     (1<<9)  
@


1.19
log
@nuke trailing whitespaces;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.18 2005/11/02 20:32:45 niallo Exp $	*/
d33 3
a35 2
#define CI_SYMFORCE (1<<0)
#define CI_DEFAULT  (1<<1)
d38 5
a42 4
#define CO_LOCK	    (1<<2)
#define CO_REVDATE  (1<<2)
#define CO_STATE    (1<<3)
#define CO_UNLOCK   (1<<4)
d45 3
a47 2
#define FORCE       (1<<5)
#define INTERACTIVE (1<<6)
@


1.18
log
@changes from Venice:

- instead of using lots of individual flag variables, use a single int and
  bitwise operations on it. while this saves memory, really it saves code
  space and reduces complexity. checkout_rev() and checkout_state() in
  particular benefit from these changes since their parameters where growing
  really long.

- implement `-s' option in co

- implement `-M' option in ci

"I like this, go for it" joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.17 2005/10/27 07:43:56 xsa Exp $	*/
d44 1
a44 1
#define INTERACTIVE (1<<6)  
@


1.17
log
@TMPDIR support; joris ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.16 2005/10/19 00:30:22 joris Exp $	*/
d32 14
d72 1
a72 1
int	checkout_rev(RCSFILE *, RCSNUM *, const char *, int, const char *, int);
@


1.16
log
@add co -p support;
input from xsa@@ and niallo@@;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.15 2005/10/18 16:20:31 xsa Exp $	*/
d30 2
d39 1
@


1.15
log
@more rcsmerge(1) bits;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.14 2005/10/18 01:22:14 joris Exp $	*/
d33 1
@


1.14
log
@use rcs_set_rev() instead of duplicating code all over the
place to set a variable to the given revision number;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.13 2005/10/17 15:33:12 joris Exp $	*/
d45 1
d60 1
@


1.13
log
@support -f flag for co;
'fine' niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.12 2005/10/15 23:39:36 joris Exp $	*/
d48 1
@


1.12
log
@RCSINIT support;
ok niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.11 2005/10/15 18:26:24 niallo Exp $	*/
d52 1
a52 1
int    checkout_rev(RCSFILE *, RCSNUM *, const char *, int, const char *);
@


1.11
log
@modularise checkout code into checkout_rev(). this shaves off a number
of lines in ci.c due to code re-use, and will simplify features which are in
the pipeline. no functional changes.

ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.10 2005/10/13 12:35:30 joris Exp $	*/
d49 1
@


1.10
log
@To be fully compatibly with the GNU RCS tools we need to have the
same way of parsing commandline options. Since getopt(3) allows spaces
between arguments and GNU RCS tools does not we needed to roll out our
own way of option handling, and here it is.

ok niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.9 2005/10/11 15:50:25 niallo Exp $	*/
d51 1
@


1.9
log
@- support -d <date> option in ci.

ok joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.8 2005/10/06 15:39:11 joris Exp $	*/
d34 3
d49 1
@


1.8
log
@ident command, written by xsa@@ but he is too busy with work right now;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.7 2005/10/06 12:56:49 joris Exp $	*/
d33 3
@


1.7
log
@support rlog command;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.6 2005/10/06 02:00:05 joris Exp $	*/
d40 1
d50 1
@


1.6
log
@rcsclean now works;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.5 2005/10/06 01:24:25 joris Exp $	*/
d39 1
d48 1
@


1.5
log
@thanks to niallo's diff changes, we now can support rcsdiff;
only basic stuff works, more coming;
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.4 2005/10/02 09:39:01 xsa Exp $	*/
d38 1
d46 1
@


1.4
log
@minor knf
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.3 2005/09/30 16:44:26 niallo Exp $	*/
d37 1
d44 1
@


1.3
log
@add missing function prototypes for ci.c
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.2 2005/09/29 21:30:10 joris Exp $	*/
d27 1
a27 1
#if !defined(RCSPROG_H)
d34 4
a37 4
void rcs_usage(void);
void checkout_usage(void);
void checkin_usage(void);
void (*usage)(void);
d39 4
a42 4
int rcs_statfile(char *, char *, size_t);
int checkout_main(int, char **);
int checkin_main(int, char **);
int rcs_main(int, char **);
d44 1
a44 1
#endif
@


1.2
log
@support -q flag in 'co' and 'rcs'
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsprog.h,v 1.1 2005/09/29 15:13:19 joris Exp $	*/
d36 1
d41 1
@


1.1
log
@- prototypes for the RCS commands go in rcsprog.h
- use rcs_statfile() to obtain the correct path to the RCS file
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
@

