head	1.32;
access;
symbols
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.31.0.4
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.30.0.6
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.29.0.16
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.14
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.10
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.29.0.8
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.6
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.4
	OPENBSD_5_0:1.29.0.2
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.28.0.4
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.28.0.2
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.25.0.10
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.6
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.4
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.2
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.24.0.4
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.2
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.22.0.2
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11;
locks; strict;
comment	@ * @;


1.32
date	2016.08.26.09.02.54;	author guenther;	state Exp;
branches;
next	1.31;
commitid	07zudOJ8CxdoPUjD;

1.31
date	2015.11.02.16.45.21;	author nicm;	state Exp;
branches;
next	1.30;
commitid	aZp5pu4rATnp3dyP;

1.30
date	2014.10.02.06.23.15;	author otto;	state Exp;
branches;
next	1.29;
commitid	yRuTsAu91VfT3St0;

1.29
date	2011.04.20.19.34.16;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2010.07.28.09.07.11;	author ray;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.23.21.46.05;	author ray;	state Exp;
branches;
next	1.26;

1.26
date	2009.10.15.10.08.43;	author sobrado;	state Exp;
branches;
next	1.25;

1.25
date	2007.09.09.17.22.34;	author ray;	state Exp;
branches;
next	1.24;

1.24
date	2007.02.27.07.59.13;	author xsa;	state Exp;
branches;
next	1.23;

1.23
date	2007.02.08.03.35.09;	author ray;	state Exp;
branches;
next	1.22;

1.22
date	2006.08.07.19.32.49;	author ray;	state Exp;
branches;
next	1.21;

1.21
date	2006.08.01.05.14.17;	author ray;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.09.12.33.42;	author ray;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.01.23.03.07;	author joris;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.24.16.16.56;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.21.14.18.26;	author xsa;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.19.06.53.41;	author xsa;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.14.01.11.07;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.22.17.04.52;	author xsa;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.16.04.04.57;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.06.09.41.53;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.20.14.35.02;	author xsa;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.05.10.28.24;	author xsa;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.02.08.13.28;	author xsa;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.30.17.51.12;	author xsa;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.23.16.01.47;	author xsa;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.16.15.25.29;	author xsa;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.13.12.35.30;	author joris;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.12.17.13.30;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.06.19.13.43;	author joris;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.06.16.02.42;	author xsa;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.06.15.39.11;	author joris;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Pull in <time.h> for struct tm, used in rcs.h

ok deraadt@@
@
text
@/*	$OpenBSD: ident.c,v 1.31 2015/11/02 16:45:21 nicm Exp $	*/
/*
 * Copyright (c) 2005 Xavier Santolaria <xsa@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>

#include "rcsprog.h"

#define KEYDELIM	'$'	/* keywords delimiter */
#define VALDELIM	':'	/* values delimiter */

static int found = 0;
static int flags = 0;

static void	ident_file(const char *, FILE *);
static void	ident_line(FILE *);

int
ident_main(int argc, char **argv)
{
	int i, ch, status;
	FILE *fp;

	status = 0;

	while ((ch = rcs_getopt(argc, argv, "qV")) != -1) {
		switch(ch) {
		case 'q':
			flags |= QUIET;
			break;
		case 'V':
			printf("%s\n", rcs_version);
			exit(0);
		default:
			(usage)();
		}
	}

	argc -= rcs_optind;
	argv += rcs_optind;

	if (argc == 0)
		ident_file(NULL, stdin);
	else {
		for (i = 0; i < argc; i++) {
			if ((fp = fopen(argv[i], "r")) == NULL) {
				warn("%s", argv[i]);
				status = 1;
				continue;
			}

			ident_file(argv[i], fp);
			(void)fclose(fp);
			if (i != argc - 1)
				printf("\n");
		}
	}

	return (status);
}


static void
ident_file(const char *filename, FILE *fp)
{
	int c;

	if (filename != NULL)
		printf("%s:\n", filename);
	else
		filename = "standard input";

	for (c = 0; c != EOF; c = getc(fp)) {
		if (feof(fp) || ferror(fp))
			break;
		if (c == KEYDELIM)
			ident_line(fp);
	}

	if (found == 0 && !(flags & QUIET))
		fprintf(stderr, "ident warning: no id keywords in %s\n",
		    filename);

	found = 0;
}

static void
ident_line(FILE *fp)
{
	int c;
	BUF *bp;
	size_t len;

	bp = buf_alloc(512);

	while ((c = getc(fp)) != VALDELIM) {
		if (c == EOF)
			goto out;

		if (isalpha(c))
			buf_putc(bp, c);
		else
			goto out;
	}

	buf_putc(bp, VALDELIM);

	while ((c = getc(fp)) != KEYDELIM) {
		if (c == EOF)
			goto out;

		if (c == '\n')
			goto out;

		buf_putc(bp, c);
	}

	len = buf_len(bp);
	if (buf_getc(bp, len - 1) != ' ')
		goto out;

	/* append trailing KEYDELIM */
	buf_putc(bp, c);

	/* Append newline for printing. */
	buf_putc(bp, '\n');
	printf("     %c", KEYDELIM);
	fflush(stdout);
	buf_write_fd(bp, STDOUT_FILENO);

	found++;
out:
	buf_free(bp);
}

__dead void
ident_usage(void)
{
	fprintf(stderr, "usage: ident [-qV] [file ...]\n");
	
	exit(1);
}
@


1.31
log
@Allow rcsnum_free and buf_free to accept NULL and remove various NULL
checks that are now unnecessary, from Michael W Bombardieri. ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.30 2014/10/02 06:23:15 otto Exp $	*/
d31 1
@


1.30
log
@exit in usage functions themselves; from  Fritjof Bornebusch; ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.29 2011/04/20 19:34:16 nicm Exp $	*/
d159 1
a159 2
	if (bp != NULL)
		buf_free(bp);
@


1.29
log
@Remove some unneeded includes and dead code, from Michael W Bombardieri.

ok jasper xsa
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.28 2010/07/28 09:07:11 ray Exp $	*/
a61 1
			exit(1);
d163 1
a163 1
void
d167 2
@


1.28
log
@Make BUFs autoextend by default.  This was already done in OpenCVS
a while ago.

OK zinovik nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.27 2010/07/23 21:46:05 ray Exp $	*/
a30 1
#include <string.h>
@


1.27
log
@Reduce variable/function name and whitespace differences between
cvs/rcs.

OK xsa zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.26 2009/10/15 10:08:43 sobrado Exp $	*/
d122 1
a122 1
	bp = buf_alloc(512, BUF_AUTOEXT);
@


1.26
log
@ident(1) does not require arguments; while here, note that this
program uses the standard input, not the standard output, when no
filenames are provided.

ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.25 2007/09/09 17:22:34 ray Exp $	*/
d122 1
a122 1
	bp = rcs_buf_alloc(512, BUF_AUTOEXT);
d129 1
a129 1
			rcs_buf_putc(bp, c);
d134 1
a134 1
	rcs_buf_putc(bp, VALDELIM);
d143 1
a143 1
		rcs_buf_putc(bp, c);
d146 2
a147 2
	len = rcs_buf_len(bp);
	if (rcs_buf_getc(bp, len - 1) != ' ')
d151 1
a151 1
	rcs_buf_putc(bp, c);
d154 1
a154 1
	rcs_buf_putc(bp, '\n');
d157 1
a157 1
	rcs_buf_write_fd(bp, STDOUT_FILENO);
d162 1
a162 1
		rcs_buf_free(bp);
@


1.25
log
@From Pierre Riteau:
Sync ident behavior with GNU RCS:
- return 1 to the shell if any file could not be opened.
- print an empty line after processing a file unless we couldn't
  open it (and not for the last one).

OK niallo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.24 2007/02/27 07:59:13 xsa Exp $	*/
d99 1
a99 1
		filename = "standard output";
d168 1
a168 1
	fprintf(stderr, "usage: ident [-qV] file ...\n");
@


1.24
log
@As done in OpenCVS, general includes cleanup sweep. OK otto@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.23 2007/02/08 03:35:09 ray Exp $	*/
d48 1
a48 1
	int i, ch;
d51 2
d76 1
d82 2
d87 1
a87 1
	return (0);
@


1.23
log
@When getc() returns EOF, either feof() or ferror() will return true,
so no need to check them.  Removes a bitwise OR that should have
been a logical OR as well.

From Pierre Riteau <pierre dot riteau at free dot fr>.

OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.22 2006/08/07 19:32:49 ray Exp $	*/
d27 6
a32 1
#include "includes.h"
@


1.22
log
@Flush printf buffer before directly writing to STDIN_FILENO.  Prevents
the printf output from printing after the rcs_buf_write_fd output.

``ok!'' joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.21 2006/08/01 05:14:17 ray Exp $	*/
d115 1
a115 1
		if (c == EOF && (feof(fp) | ferror(fp)))
d127 1
a127 1
		if (c == EOF && (feof(fp) | ferror(fp)))
@


1.21
log
@Reduce rcs_buf_release() usage, improving binary support.

OK niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.20 2006/05/09 12:33:42 ray Exp $	*/
d146 1
@


1.20
log
@Remove /* NOTREACHED */ comments, now that lint is smart about
__dead.  I never should have put them there.

OK xsa@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.19 2006/05/01 23:03:07 joris Exp $	*/
a109 1
	char *keyw;
d142 5
a146 3
	rcs_buf_putc(bp, '\0');
	keyw = rcs_buf_release(bp);
	bp = NULL;
a148 2
	printf("     %c%s\n", KEYDELIM, keyw);

@


1.19
log
@prevent a very, very stupid buffer overflow in ident_line().
fix for PR 5091

okay niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.18 2006/04/24 16:16:56 jmc Exp $	*/
a53 1
			/* NOTREACHED */
@


1.18
log
@- do not show file ... as optional
- remove angle brackets
- sync usage()

ok xsa
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.17 2006/04/21 14:18:26 xsa Exp $	*/
d110 3
a112 1
	char *p, linebuf[1024];
d114 1
a114 1
	p = linebuf;
d118 1
a118 1
			return;
d121 1
a121 1
			*(p++) = c;
d123 1
a123 1
			return;
d126 1
a126 1
	*(p++) = VALDELIM;
d130 1
a130 1
			return;
d133 1
a133 1
			return;
d135 1
a135 1
		*(p++) = c;
d138 3
a140 2
	if (p[-1] != ' ')
		return;
d143 4
a146 2
	*(p++) = c;
	*p = '\0';
d149 1
a149 1
	printf("     %c%s\n", KEYDELIM, linebuf);
d151 3
a153 1
	return;
@


1.17
log
@remove overkill cvs_log() and rather use warn()/warnx().
OK ray@@ and discussed with joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.16 2006/04/19 06:53:41 xsa Exp $	*/
d152 1
a152 1
	fprintf(stderr, "usage: ident [-qV] [file ...]\n");
@


1.16
log
@switch -q handling to bitwise flags; OK ray@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.15 2006/04/14 01:11:07 deraadt Exp $	*/
d69 1
a69 1
				cvs_log(LP_ERRNO, "%s", argv[i]);
d74 1
a74 1
			fclose(fp);
@


1.15
log
@excessive addition to brackets is a mental disease.  you will go
blind, too.  seek help.  no binary change, ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.14 2006/03/22 17:04:52 xsa Exp $	*/
d35 1
d49 1
a49 1
			verbose = 0;
d99 1
a99 1
	if (found == 0 && verbose == 1)
@


1.14
log
@change ident_file() and ident_line() return type to void; OK ray@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.13 2006/03/16 04:04:57 ray Exp $	*/
d91 2
a92 2
	for (c = 0; c != EOF; (c = getc(fp))) {
		if ((feof(fp)) || (ferror(fp)))
d98 1
a98 1
	if ((found == 0) && (verbose == 1))
d114 1
a114 1
		if ((c == EOF) && (feof(fp) | ferror(fp)))
d126 1
a126 1
		if ((c == EOF) && (feof(fp) | ferror(fp)))
@


1.13
log
@Follow exit() with /* NOTREACHED*/ for lint.

``OK niallo@@'' niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.12 2006/03/06 09:41:53 deraadt Exp $	*/
d36 2
a37 2
static int	ident_file(const char *, FILE *);
static int	ident_line(FILE *);
d81 1
a81 1
static int
a102 2

	return (0);
d105 1
a105 1
static int
d115 1
a115 1
			return (0);
d120 1
a120 1
			return (0);
d127 1
a127 1
			return (0);
d130 1
a130 1
			return (0);
d136 1
a136 1
		return (0);
d145 1
a145 1
	return (0);
@


1.12
log
@many spacing cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.11 2006/01/20 14:35:02 xsa Exp $	*/
d53 1
@


1.11
log
@typos in comments;
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.10 2006/01/05 10:28:24 xsa Exp $	*/
d99 1
a99 1
	 	    filename);
@


1.10
log
@cleanup, move log.h and rcs.h inclusion into rcsprog.h;
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.9 2006/01/02 08:13:28 xsa Exp $	*/
d31 2
a32 2
#define KEYDELIM	'$'	/* keywords delimitor */
#define VALDELIM	':'	/* values delimitor */
@


1.9
log
@#include's cleanup; ok joris@@ niallo@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.8 2005/11/30 17:51:12 xsa Exp $	*/
a28 2
#include "log.h"
#include "rcs.h"
@


1.8
log
@correct usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.7 2005/11/23 16:01:47 xsa Exp $	*/
d27 1
a27 7
#include <sys/param.h>

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
@


1.7
log
@output consistency;
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.6 2005/11/16 15:25:29 xsa Exp $	*/
d160 1
a160 2
	fprintf(stderr,
	    "usage: ident [-qV] file ...\n");
@


1.6
log
@respect -q;
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.5 2005/10/13 12:35:30 joris Exp $	*/
a80 6

			if ((found == 0) && (verbose == 1))
				fprintf(stderr,
				    "ident warning: no id keywords in %s\n",
				    argv[i]);
			found = 0;
d93 1
a93 1
	if (fp != stdin)
d95 2
d104 6
@


1.5
log
@To be fully compatibly with the GNU RCS tools we need to have the
same way of parsing commandline options. Since getopt(3) allows spaces
between arguments and GNU RCS tools does not we needed to roll out our
own way of option handling, and here it is.

ok niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.4 2005/10/12 17:13:30 deraadt Exp $	*/
d82 4
a85 2
			if (found == 0)
				cvs_log(LP_WARN, "no id keywords in %s", argv[i]);
@


1.4
log
@various usage cleanup; ok joris
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.3 2005/10/06 19:13:43 joris Exp $	*/
d53 1
a53 1
	while ((ch = getopt(argc, argv, "qV")) != -1) {
d67 2
a68 2
	argc -= optind;
	argv += optind;
@


1.3
log
@warn when no keywords were found;
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.2 2005/10/06 16:02:42 xsa Exp $	*/
a41 1
extern char *__progname;
d156 2
a157 1
	fprintf(stderr, "Usage: %s [-qV] file ...\n", __progname);
@


1.2
log
@tweaks;
@
text
@d1 1
a1 1
/*	$OpenBSD: ident.c,v 1.1 2005/10/06 15:39:11 joris Exp $	*/
d43 1
d82 4
d148 1
@


1.1
log
@ident command, written by xsa@@ but he is too busy with work right now;
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 1
a70 1
	if (argc == 0) {
d72 1
a72 1
	} else {
d124 1
a124 1
	*(p++) = ':';
d143 1
a143 1
	printf("\t%c%s\n", KEYDELIM, linebuf);
@

