head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.22
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.18
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.20
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.12
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.16
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.14
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.9.0.12
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.13
date	2011.07.06.15.36.52;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.27.18.20.14;	author jasper;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.28.09.07.11;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2010.07.23.21.46.05;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.27.07.59.13;	author xsa;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.22.08.30.45;	author xsa;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.16.03.00.52;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.02.04.24.09;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.02.03.28.50;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.08.09.25.44;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.03.03.05.10;	author niallo;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.01.21.22.41;	author niallo;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.26.02.55.13;	author joris;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Replace the keyword expansion code with a faster, more readable version
which additionally also supports $Log$ and $Locker. Written by Joerg
Sonnenberger and tweaked by me.

ok ray
@
text
@/*	$OpenBSD: buf.h,v 1.12 2011/03/27 18:20:14 jasper Exp $	*/
/*
 * Copyright (c) 2003 Jean-Francois Brousseau <jfb@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Buffer management
 * -----------------
 *
 * This code provides an API to generic memory buffer management.  All
 * operations are performed on a buf structure, which is kept opaque to the
 * API user in order to avoid corruption of the fields and make sure that only
 * the internals can modify the fields.
 *
 * The first step is to allocate a new buffer using the buf_alloc()
 * function, which returns a pointer to a new buffer.
 */

#ifndef BUF_H
#define BUF_H

#include <sys/types.h>

typedef struct buf BUF;

BUF		*buf_alloc(size_t);
BUF		*buf_load(const char *);
void		 buf_free(BUF *);
void		*buf_release(BUF *);
u_char		 buf_getc(BUF *, size_t);
void		 buf_empty(BUF *);
size_t		 buf_append(BUF *, const void *, size_t);
void		 buf_putc(BUF *, int);
void		 buf_puts(BUF *b, const char *str);
size_t		 buf_len(BUF *);
int		 buf_write_fd(BUF *, int);
int		 buf_write(BUF *, const char *, mode_t);
void		 buf_write_stmp(BUF *, char *);
u_char		*buf_get(BUF *b);

#endif	/* BUF_H */
@


1.12
log
@- garbage collect unused buf_fappend(), which was also removed from ocvs's
buf.c some time ago.

from Michael W. Bombardieri
ok chl@@ nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.11 2010/07/28 09:07:11 ray Exp $	*/
d53 1
d59 1
@


1.11
log
@Make BUFs autoextend by default.  This was already done in OpenCVS
a while ago.

OK zinovik nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.10 2010/07/23 21:46:05 ray Exp $	*/
a51 2
size_t		 buf_fappend(BUF *, const char *, ...)
		     __attribute__((format(printf, 2, 3)));
@


1.10
log
@Reduce variable/function name and whitespace differences between
cvs/rcs.

OK xsa zinovik
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.9 2007/02/27 07:59:13 xsa Exp $	*/
a42 3
/* flags */
#define BUF_AUTOEXT	1	/* autoextend on append */

d45 2
a46 2
BUF		*buf_alloc(size_t, u_int);
BUF		*buf_load(const char *, u_int);
@


1.9
log
@As done in OpenCVS, general includes cleanup sweep. OK otto@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.8 2007/02/22 08:30:45 xsa Exp $	*/
d30 1
a30 1
 * operations are performed on a rcs_buf structure, which is kept opaque to the
d34 1
a34 1
 * The first step is to allocate a new buffer using the rcs_buf_alloc()
d46 1
a46 1
typedef struct rcs_buf BUF;
d48 8
a55 8
BUF		*rcs_buf_alloc(size_t, u_int);
BUF		*rcs_buf_load(const char *, u_int);
void		 rcs_buf_free(BUF *);
void		*rcs_buf_release(BUF *);
u_char		 rcs_buf_getc(BUF *, size_t);
void		 rcs_buf_empty(BUF *);
size_t		 rcs_buf_append(BUF *, const void *, size_t);
size_t		 rcs_buf_fappend(BUF *, const char *, ...)
d57 6
a62 6
void		 rcs_buf_putc(BUF *, int);
size_t		 rcs_buf_len(BUF *);
int		 rcs_buf_write_fd(BUF *, int);
int		 rcs_buf_write(BUF *, const char *, mode_t);
void		 rcs_buf_write_stmp(BUF *, char *);
u_char		*rcs_buf_get(BUF *b);
@


1.8
log
@Fix const inconsistencies, void pointer artithmetic;
Based on diff from otto@@ in OpenCVS. OK otto@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.7 2007/02/16 03:00:52 ray Exp $	*/
d40 2
@


1.7
log
@Correct function name in comment.

From Pierre Riteau <pierre dot riteau at free dot fr>.

OK xsa@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.6 2007/02/02 04:24:09 ray Exp $	*/
d60 1
a60 1
void		*rcs_buf_get(BUF *b);
@


1.6
log
@Remove unused and buggy {cvs,rcs}_buf_set functions.

Bugginess pointed out and fix provided by Pierre Riteau.

OK joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.5 2006/08/02 03:28:50 ray Exp $	*/
d34 1
a34 1
 * The first step is to allocate a new buffer using the rcs_buf_create()
@


1.5
log
@rcs_buf_set(), rcs_buf_append, and rcs_buf_fappend should not return
ssize_t.  The return values aren't usually checked anyway.

Also remove unnecessary casts and improve type usage.

OK xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.4 2006/07/08 09:25:44 ray Exp $	*/
a51 1
size_t		 rcs_buf_set(BUF *, const void *, size_t, size_t);
@


1.4
log
@Remove file mode argument from {cvs|rcs}_buf_write_stmp().  We
always set the temporary file to mode 600, which is already done
by mkstemp().

OK joris@@ and xsa@@ over a month ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.3 2006/06/03 03:05:10 niallo Exp $	*/
d52 3
a54 3
ssize_t		 rcs_buf_set(BUF *, const void *, size_t, size_t);
ssize_t		 rcs_buf_append(BUF *, const void *, size_t);
ssize_t		 rcs_buf_fappend(BUF *, const char *, ...)
@


1.3
log
@- correctly handle binary files; say bye bye to using c strings for deltatexts.

"slap it in" joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.2 2006/06/01 21:22:41 niallo Exp $	*/
d60 1
a60 1
void		 rcs_buf_write_stmp(BUF *, char *, mode_t);
@


1.2
log
@- zap dangling macro, will be replaced with a function later.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.1 2006/04/26 02:55:13 joris Exp $	*/
d61 1
a61 1

@


1.1
log
@fork our code we shared between openrcs/cvs into the openrcs dir.

this was starting to become inhuman to maintain without
ugly ugly hacks in the shared code, and it will be easier
to make specific changes for openrcs without touching the
soon-to-be-replaced opencvs code.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.h,v 1.14 2006/04/06 16:48:34 xsa Exp $	*/
a60 2

#define rcs_buf_get(b)	rcs_buf_peek(b, 0)
@

