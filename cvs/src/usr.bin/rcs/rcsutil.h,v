head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.22
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.24
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.16
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.20
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.18
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.14
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.12
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.10
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.8
	OPENBSD_5_0:1.14.0.6
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.13.0.8
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.4
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8;
locks; strict;
comment	@ * @;


1.15
date	2016.07.04.01.39.12;	author millert;	state Exp;
branches;
next	1.14;
commitid	9iBcbXzctTwjd6fC;

1.14
date	2010.07.23.08.31.19;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.04.13.45.24;	author chl;	state Exp;
branches;
next	1.12;

1.12
date	2007.02.22.19.11.13;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2007.02.22.08.30.45;	author xsa;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.02.16.43.45;	author niallo;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.09.21.47.52;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.16.07.39.15;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.03.03.05.10;	author niallo;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.28.23.16.31;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.27.05.49.14;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.27.07.59.33;	author xsa;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.26.21.55.22;	author joris;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.24.04.51.57;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.21.17.17.29;	author xsa;	state Exp;
branches;
next	;


desc
@@


1.15
log
@The -I flag is documented but not implemented.  This fixes that and
also honors the -I flag from ci/co when prompting like GNU RCS.
OK jca@@
@
text
@/*	$OpenBSD: rcsutil.h,v 1.14 2010/07/23 08:31:19 ray Exp $	*/
/*
 * Copyright (c) 2006 Xavier Santolaria <xsa@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef RCSUTIL_H
#define RCSUTIL_H

#include "rcs.h"

struct rcs_line {
	u_char			*l_line;
	int			 l_lineno;
	size_t			 l_len;
	TAILQ_ENTRY(rcs_line)	 l_list;
};

TAILQ_HEAD(tqh, rcs_line);

struct rcs_lines {
	int		 l_nblines;
	struct tqh	 l_lines;
};

struct rcs_argvector {
	char *str;
	char **argv;
};

/* rcsutil.c */
int			 rcs_getopt(int, char **, const char *);
void			 rcs_set_mtime(RCSFILE *, time_t);
int			 rcs_choosefile(const char *, char *, size_t);
time_t			 rcs_get_mtime(RCSFILE *);
RCSNUM			*rcs_getrevnum(const char *, RCSFILE *);
char			*rcs_prompt(const char *, int);
u_int			 rcs_rev_select(RCSFILE *, const char *);
int			 rcs_set_description(RCSFILE *, const char *, int);
void			 rcs_setrevstr(char **, char *);
void			 rcs_setrevstr2(char **, char **, char *);
BUF			*rcs_patchfile(u_char *, size_t, u_char *, size_t,
			    int (*p)(struct rcs_lines *,struct rcs_lines *));
struct rcs_lines	*rcs_splitlines(u_char *, size_t);
void			 rcs_freelines(struct rcs_lines *);
int			 rcs_yesno(int);
struct rcs_argvector	*rcs_strsplit(const char *, const char *);
void			 rcs_argv_destroy(struct rcs_argvector *);
void			 rcs_strip_suffix(char *);

#endif	/* RCSUTIL_H */
@


1.14
log
@Rename a bunch of variables and functions, removing the cvs_/rcs_
prefixes to reduce differences between cvs and rcs files.

"yes!" nicm
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.13 2008/01/04 13:45:24 chl Exp $	*/
d57 1
a57 1
char			*rcs_prompt(const char *);
d59 1
a59 1
int			 rcs_set_description(RCSFILE *, const char *);
@


1.13
log
@remove unused function

from tobias@@

ok xsa@@ tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.12 2007/02/22 19:11:13 otto Exp $	*/
d39 1
a39 1
TAILQ_HEAD(rcs_tqh, rcs_line);
d43 1
a43 1
	struct rcs_tqh	 l_lines;
@


1.12
log
@If a ,suffix file is given as an arg to ci and co, strip it. Avoids
potential disasters.  Initial diff from niallo@@, ok niallo@@ joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.11 2007/02/22 08:30:45 xsa Exp $	*/
a59 1
void			 rcs_set_rev(const char *, RCSNUM **);
@


1.11
log
@Fix const inconsistencies, void pointer artithmetic;
Based on diff from otto@@ in OpenCVS. OK otto@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.10 2007/01/02 16:43:45 niallo Exp $	*/
d70 1
@


1.10
log
@- fix support for checking out binary files.

testing from xsa@@ and Igor Sobrado <igor at string1.ciencias.uniovi.es>
ok xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.9 2006/11/09 21:47:52 millert Exp $	*/
d63 1
a63 2
BUF			*rcs_patchfile(const u_char *, size_t, const u_char *,
			    size_t,
d65 1
a65 1
struct rcs_lines	*rcs_splitlines(const u_char *, size_t);
@


1.9
log
@Simplify stripping of write bits from file mode.
Add support for reusing the checkin message for multiple files, ala GNU
Fix the message when you abort a checkout and the file was not writable.
OK joris@@ niallo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.8 2006/08/16 07:39:15 ray Exp $	*/
d33 1
a33 1
	char			*l_line;
d35 1
a42 1
	char		*l_data;
d63 4
a66 3
BUF			*rcs_patchfile(BUF *, BUF *,
			    int (*p)(struct rcs_lines *, struct rcs_lines *));
struct rcs_lines	*rcs_splitlines(BUF *);
@


1.8
log
@Improve rcs_buf_load() by setting errno appropriately on failure and
never print errors or quit on error.

Fix usages of rcs_buf_load() and rcs_set_description.

Also plug an fd leak.

OK xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.7 2006/06/03 03:05:10 niallo Exp $	*/
d67 1
a67 1
int			 rcs_yesno(void);
@


1.7
log
@- correctly handle binary files; say bye bye to using c strings for deltatexts.

"slap it in" joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.6 2006/05/28 23:16:31 ray Exp $	*/
d59 1
a59 1
void			 rcs_set_description(RCSFILE *, const char *);
@


1.6
log
@Remove a lot of xstrdup() calls in getopt() loops, which are usually
unnecessary.  These xstrdup() calls don't call xfree() before anyway,
so if a flag is given multiple times memory leaks would have resulted.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.5 2006/05/27 05:49:14 ray Exp $	*/
d63 1
a63 1
BUF			*rcs_patchfile(const char *, const char *,
d65 1
a65 1
struct rcs_lines	*rcs_splitlines(const char *);
@


1.5
log
@Remove rcs_statfile().  It was just a wrapper for rcs_choosefile(),
handling exceptions oddly.

OK joris@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.4 2006/04/27 07:59:33 xsa Exp $	*/
d58 1
a58 1
u_int			 rcs_rev_select(RCSFILE *, char *);
d68 1
a68 1
struct rcs_argvector	*rcs_strsplit(char *, const char *);
@


1.4
log
@zap util.[ch] and move the content into rcsutil.[ch].
discussed with joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.3 2006/04/26 21:55:22 joris Exp $	*/
a54 1
int			 rcs_statfile(char *, char *, size_t, int);
@


1.3
log
@prevent file races by obtaining an fd for the RCS file and
do our operations on that, this is safe and guarantees we
can operate on the file until we close(2) it.

a fix is coming for the remaining races in our diff code.
okay niallo@@ and ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.2 2006/04/24 04:51:57 ray Exp $	*/
d32 19
d52 19
a70 12
int	 rcs_getopt(int, char **, const char *);
void	 rcs_set_mtime(RCSFILE *, time_t);
int	 rcs_choosefile(const char *, char *, size_t);
int	 rcs_statfile(char *, char *, size_t, int);
time_t	 rcs_get_mtime(RCSFILE *);
RCSNUM	*rcs_getrevnum(const char *, RCSFILE *);
char	*rcs_prompt(const char *);
u_int	 rcs_rev_select(RCSFILE *, char *);
void	 rcs_set_description(RCSFILE *, const char *);
void	 rcs_set_rev(const char *, RCSNUM **);
void	 rcs_setrevstr(char **, char *);
void	 rcs_setrevstr2(char **, char **, char *);
@


1.2
log
@o Better match GNU behavior (a bare -t does NOT read from stdin,
  unlike rcs).
o Share code with rcs by moving rcs_set_description() to rcsutil.c.
o Change description prompt from #define to const char *.

OK xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rcsutil.h,v 1.1 2006/04/21 17:17:29 xsa Exp $	*/
d34 2
a35 2
void	 rcs_set_mtime(const char *, time_t);
char	*rcs_choosefile(const char *);
d37 1
a37 1
time_t	 rcs_get_mtime(const char *);
@


1.1
log
@move shared functions into rcsutil.[ch]; this makes rcsprog.c cleaner;
"the voices in my head say OK!" joris@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
@

