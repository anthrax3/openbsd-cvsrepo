head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	LESS_458:1.1.1.4
	OPENBSD_5_5:1.6.0.12
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	LESS_444:1.1.1.3
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	LESS_381:1.1.1.2
	MARK_NUDELMAN:1.1.1
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	less_290:1.1.1.1
	markn:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.09.17.15.06.41;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	W32EN7Zp77efb8wW;

1.10
date	2015.11.06.15.50.33;	author nicm;	state Exp;
branches;
next	1.9;
commitid	QKrr6AuGzNx9nehL;

1.9
date	2015.11.05.22.47.33;	author tedu;	state Exp;
branches;
next	1.8;
commitid	vLFUUyhjlRQmhpMd;

1.8
date	2015.11.05.22.08.44;	author nicm;	state Exp;
branches;
next	1.7;
commitid	yKv9Ck9ZDgwWTRTo;

1.7
date	2014.04.25.13.38.21;	author shadchin;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.16.18.12.09;	author shadchin;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.13.18.26.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.29.01.58.03;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.26.20.41.55;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.05.39.43;	author etheisen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.05.39.43;	author etheisen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.13.18.21.21;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.09.16.17.47.07;	author shadchin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.04.25.13.33.50;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.11
log
@little bit more KNF
@
text
@/*
 * Copyright (C) 1984-2012  Mark Nudelman
 * Modified for use with illumos by Garrett D'Amore.
 * Copyright 2014 Garrett D'Amore <garrett@@damore.org>
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Less License, as specified in the README file.
 *
 * For more information, see the README file.
 */

/*
 * Routines dealing with the "position" table.
 * This is a table which tells the position (in the input file) of the
 * first char on each currently displayed line.
 *
 * {{ The position table is scrolled by moving all the entries.
 * Would be better to have a circular table
 * and just change a couple of pointers. }}
 */

#include "less.h"
#include "position.h"

static off_t *table = NULL;	/* The position table */
static int table_size;

extern int sc_width, sc_height;

/*
 * Return the starting file position of a line displayed on the screen.
 * The line may be specified as a line number relative to the top
 * of the screen, but is usually one of these special cases:
 *	the top (first) line on the screen
 *	the second line on the screen
 *	the bottom line on the screen
 *	the line after the bottom line on the screen
 */
off_t
position(int where)
{
	switch (where) {
	case BOTTOM:
		where = sc_height - 2;
		break;
	case BOTTOM_PLUS_ONE:
		where = sc_height - 1;
		break;
	case MIDDLE:
		where = (sc_height - 1) / 2;
	}
	return (table[where]);
}

/*
 * Add a new file position to the bottom of the position table.
 */
void
add_forw_pos(off_t pos)
{
	int i;

	/*
	 * Scroll the position table up.
	 */
	for (i = 1; i < sc_height; i++)
		table[i-1] = table[i];
	table[sc_height - 1] = pos;
}

/*
 * Add a new file position to the top of the position table.
 */
void
add_back_pos(off_t pos)
{
	int i;

	/*
	 * Scroll the position table down.
	 */
	for (i = sc_height - 1; i > 0; i--)
		table[i] = table[i-1];
	table[0] = pos;
}

/*
 * Initialize the position table, done whenever we clear the screen.
 */
void
pos_clear(void)
{
	int i;

	for (i = 0; i < sc_height; i++)
		table[i] = -1;
}

/*
 * Allocate or reallocate the position table.
 */
void
pos_init(void)
{
	struct scrpos scrpos;

	if (sc_height <= table_size)
		return;
	/*
	 * If we already have a table, remember the first line in it
	 * before we free it, so we can copy that line to the new table.
	 */
	if (table != NULL) {
		get_scrpos(&scrpos);
		free(table);
	} else {
		scrpos.pos = -1;
	}
	table = ecalloc(sc_height, sizeof (off_t));
	table_size = sc_height;
	pos_clear();
	if (scrpos.pos != -1)
		table[scrpos.ln-1] = scrpos.pos;
}

/*
 * See if the byte at a specified position is currently on the screen.
 * Check the position table to see if the position falls within its range.
 * Return the position table entry if found, -1 if not.
 */
int
onscreen(off_t pos)
{
	int i;

	if (pos < table[0])
		return (-1);
	for (i = 1; i < sc_height; i++)
		if (pos < table[i])
			return (i-1);
	return (-1);
}

/*
 * See if the entire screen is empty.
 */
int
empty_screen(void)
{
	return (empty_lines(0, sc_height-1));
}

int
empty_lines(int s, int e)
{
	int i;

	for (i = s; i <= e; i++)
		if (table[i] != -1 && table[i] != 0)
			return (0);
	return (1);
}

/*
 * Get the current screen position.
 * The screen position consists of both a file position and
 * a screen line number where the file position is placed on the screen.
 * Normally the screen line number is 0, but if we are positioned
 * such that the top few lines are empty, we may have to set
 * the screen line to a number > 0.
 */
void
get_scrpos(struct scrpos *scrpos)
{
	int i;

	/*
	 * Find the first line on the screen which has something on it,
	 * and return the screen line number and the file position.
	 */
	for (i = 0; i < sc_height; i++)
		if (table[i] != -1) {
			scrpos->ln = i+1;
			scrpos->pos = table[i];
			return;
		}
	/*
	 * The screen is empty.
	 */
	scrpos->pos = -1;
}

/*
 * Adjust a screen line number to be a simple positive integer
 * in the range { 0 .. sc_height-2 }.
 * (The bottom line, sc_height-1, is reserved for prompts, etc.)
 * The given "sline" may be in the range { 1 .. sc_height-1 }
 * to refer to lines relative to the top of the screen (starting from 1),
 * or it may be in { -1 .. -(sc_height-1) } to refer to lines
 * relative to the bottom of the screen.
 */
int
adjsline(int sline)
{
	/*
	 * Negative screen line number means
	 * relative to the bottom of the screen.
	 */
	if (sline < 0)
		sline += sc_height;
	/*
	 * Can't be less than 1 or greater than sc_height-1.
	 */
	if (sline <= 0)
		sline = 1;
	if (sline >= sc_height)
		sline = sc_height - 1;
	/*
	 * Return zero-based line number, not one-based.
	 */
	return (sline-1);
}
@


1.10
log
@Garrett D'Amore has agreed to moving his copyright line up above the
terms with the existing copyright, so it is clear it applies the same
terms.
@
text
@d66 1
a66 1
	for (i = 1;  i < sc_height;  i++)
d82 1
a82 1
	for (i = sc_height - 1;  i > 0;  i--)
d95 1
a95 1
	for (i = 0;  i < sc_height;  i++)
d138 1
a138 1
	for (i = 1;  i < sc_height;  i++)
d158 1
a158 1
	for (i = s;  i <= e;  i++)
d181 1
a181 1
	for (i = 0; i < sc_height;  i++)
@


1.9
log
@deregister
@
text
@d3 2
a9 4
 */
/*
 * Modified for use with illumos.
 * Copyright 2014 Garrett D'Amore <garrett@@damore.org>
@


1.8
log
@Replace less with the cleaned-up fork of less 458 maintained by Garrett
D'Amore at https://github.com/gdamore/less-fork. This has significantly
less portability goop, has a tidied up code style, uses terminfo instead
of termcap, and is has stricter POSIX compliance.

Many of our local changes have been accepted upstream: substantial
remaining local changes are code to read help files from /usr/share
rather than compiling them in, man page and help improvements, and some
tweaks to the default options.

Review and testing by millert, ok deraadt
@
text
@d136 1
a136 1
	register int i;
@


1.7
log
@Merge Less 458 plus local patches

ok guenther@@, ok jmc@@ for man bits
@
text
@d9 4
a12 1

d20 2
a21 2
 *    Would be better to have a circular table 
 *    and just change a couple of pointers. }}
d27 1
a27 1
static POSITION *table = NULL;	/* The position table */
d41 2
a42 3
	public POSITION
position(where)
	int where;
d44 1
a44 2
	switch (where)
	{
d60 2
a61 3
	public void
add_forw_pos(pos)
	POSITION pos;
d63 1
a63 1
	register int i;
d76 2
a77 3
	public void
add_back_pos(pos)
	POSITION pos;
d79 1
a79 1
	register int i;
d92 2
a93 2
	public void
pos_clear()
d95 1
a95 1
	register int i;
d98 1
a98 1
		table[i] = NULL_POSITION;
d104 2
a105 2
	public void
pos_init()
d115 1
a115 2
	if (table != NULL)
	{
d117 5
a121 4
		free((char*)table);
	} else
		scrpos.pos = NULL_POSITION;
	table = (POSITION *) ecalloc(sc_height, sizeof(POSITION));
d124 1
a124 1
	if (scrpos.pos != NULL_POSITION)
d133 2
a134 3
	public int
onscreen(pos)
	POSITION pos;
d149 2
a150 2
	public int
empty_screen()
d155 2
a156 4
	public int
empty_lines(s, e)
	int s;
	int e;
d158 1
a158 1
	register int i;
d161 1
a161 1
		if (table[i] != NULL_POSITION && table[i] != 0)
d174 2
a175 3
	public void
get_scrpos(scrpos)
	struct scrpos *scrpos;
d177 1
a177 1
	register int i;
d184 1
a184 2
		if (table[i] != NULL_POSITION)
		{
d192 1
a192 1
	scrpos->pos = NULL_POSITION;
d204 2
a205 3
	public int
adjsline(sline)
	int sline;
@


1.6
log
@Merge in less 444 plus local changes

ok nicm@@
@
text
@d2 1
a2 1
 * Copyright (C) 1984-2011  Mark Nudelman
d7 1
a7 2
 * For more information about less, or for information on how to 
 * contact the author, see the README file.
d165 1
a165 1
		if (table[i] != NULL_POSITION)
@


1.5
log
@Merge in less-381 w/ local changes and remove obsolete files.
@
text
@d2 1
a2 1
 * Copyright (C) 1984-2002  Mark Nudelman
@


1.4
log
@kill more registers

millert@@ ok
@
text
@a0 2
/*	$OpenBSD: position.c,v 1.3 2001/01/29 01:58:03 niklas Exp $	*/

d2 1
a2 2
 * Copyright (c) 1984,1985,1989,1994,1995  Mark Nudelman
 * All rights reserved.
d4 2
a5 8
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice in the documentation and/or other materials provided with 
 *    the distribution.
d7 2
a8 11
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN 
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a42 3
	if (where >= table_size)
		where = BOTTOM;

d64 1
a64 1
	int i;
d81 1
a81 1
	int i;
d97 1
a97 1
	int i;
d139 1
a139 1
	int i;
d163 1
a163 1
	int i;
d183 1
a183 1
	int i;
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d85 1
a85 1
	register int i;
d102 1
a102 1
	register int i;
d118 1
a118 1
	register int i;
d160 1
a160 1
	register int i;
d184 1
a184 1
	register int i;
d204 1
a204 1
	register int i;
@


1.2
log
@Fix for PR1643; constrain indices into "table" to be < table_size
so we don't go off and return random, unallocated bits.
@
text
@d1 2
@


1.1
log
@Initial revision
@
text
@d59 3
@


1.1.1.1
log
@Import of unmolested less-290.
@
text
@@


1.1.1.2
log
@Stock less-390 with some unneeded DOS/Windoze files removed
@
text
@d2 2
a3 1
 * Copyright (C) 1984-2002  Mark Nudelman
d5 8
a12 2
 * You may distribute under the terms of either the GNU General Public
 * License or the Less License, as specified in the README file.
d14 11
a24 2
 * For more information about less, or for information on how to 
 * contact the author, see the README file.
@


1.1.1.3
log
@Import of Less 444

ok nicm@@
@
text
@d2 1
a2 1
 * Copyright (C) 1984-2011  Mark Nudelman
@


1.1.1.4
log
@Import of Less 458

ok guenther@@
@
text
@d2 1
a2 1
 * Copyright (C) 1984-2012  Mark Nudelman
d7 2
a8 1
 * For more information, see the README file.
d166 1
a166 1
		if (table[i] != NULL_POSITION && table[i] != 0)
@


