head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.8
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	LESS_458:1.1.1.4
	OPENBSD_5_5:1.6.0.12
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	LESS_444:1.1.1.3
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	LESS_381:1.1.1.2
	MARK_NUDELMAN:1.1.1
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	less_290:1.1.1.1
	markn:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.01.19.06.14.54;	author mmcc;	state Exp;
branches;
next	1.17;
commitid	S2m2mA8WSaUIPtD5;

1.17
date	2016.01.15.22.22.38;	author mmcc;	state Exp;
branches;
next	1.16;
commitid	qrFAISZ1MpZqWFb8;

1.16
date	2016.01.12.17.48.04;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	O36S2Tb0ReI34f9s;

1.15
date	2015.11.23.09.38.35;	author nicm;	state Exp;
branches;
next	1.14;
commitid	v0FuKpFNiv7OHqH8;

1.14
date	2015.11.21.13.29.12;	author tedu;	state Exp;
branches;
next	1.13;
commitid	1K0ek8cCYSq3jMmD;

1.13
date	2015.11.13.16.48.48;	author nicm;	state Exp;
branches;
next	1.12;
commitid	1UhnxVLYjgAT43E3;

1.12
date	2015.11.09.03.09.19;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	TRcvZryKRossxvnZ;

1.11
date	2015.11.07.18.07.44;	author tedu;	state Exp;
branches;
next	1.10;
commitid	DJUwzdj0cG1bCfEw;

1.10
date	2015.11.06.15.09.07;	author tedu;	state Exp;
branches;
next	1.9;
commitid	z4qVin3ZEtVsatp2;

1.9
date	2015.11.05.22.08.44;	author nicm;	state Exp;
branches;
next	1.8;
commitid	yKv9Ck9ZDgwWTRTo;

1.8
date	2014.05.10.16.45.23;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.25.13.38.21;	author shadchin;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.16.18.12.09;	author shadchin;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.07.03.35.19;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.14.14.33.57;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.13.18.26.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.29.01.58.01;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.05.39.44;	author etheisen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.05.39.44;	author etheisen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.04.13.18.21.21;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.09.16.17.47.04;	author shadchin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.04.25.13.33.47;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove the lintism PRINTFLIKE1, don't replace it with an attribute so we
can keep it portable.

also noticed by Michael Reed, discussed with deraadt@@
@
text
@/*
 * Copyright 2014 Garrett D'Amore <garrett@@damore.org>
 *
 * This file is made available under the terms of the Less License.
 */

#include <regex.h>

struct mlist;
struct loption;

void *ecalloc(int, unsigned int);
char *easprintf(const char *, ...);
char *estrdup(const char *);
char *skipsp(char *);
int sprefix(char *, char *, int);
void quit(int);
void raw_mode(int);
char *special_key_str(int);
void get_term(void);
void init(void);
void deinit(void);
void home(void);
void add_line(void);
void lower_left(void);
void line_left(void);
void goto_line(int);
void vbell(void);
void ring_bell(void);
void do_clear(void);
void clear_eol(void);
void clear_bot(void);
void at_enter(int);
void at_exit(void);
void at_switch(int);
int is_at_equiv(int, int);
int apply_at_specials(int);
void putbs(void);
void match_brac(int, int, int, int);
int ch_get(void);
void ch_ungetchar(int);
void end_logfile(void);
void sync_logfile(void);
int ch_seek(off_t);
int ch_end_seek(void);
int ch_beg_seek(void);
off_t ch_length(void);
off_t ch_tell(void);
int ch_forw_get(void);
int ch_back_get(void);
void ch_setbufspace(int);
void ch_flush(void);
int seekable(int);
void ch_set_eof(void);
void ch_init(int, int);
void ch_close(void);
int ch_getflags(void);
void init_charset(void);
int binary_char(LWCHAR);
int control_char(LWCHAR);
char *prchar(LWCHAR);
char *prutfchar(LWCHAR);
int utf_len(char);
int is_utf8_well_formed(const char *);
LWCHAR get_wchar(const char *);
void put_wchar(char **, LWCHAR);
LWCHAR step_char(char **, int, char *);
int is_composing_char(LWCHAR);
int is_ubin_char(LWCHAR);
int is_wide_char(LWCHAR);
int is_combining_char(LWCHAR, LWCHAR);
void cmd_reset(void);
void clear_cmd(void);
void cmd_putstr(char *);
int len_cmdbuf(void);
void set_mlist(void *, int);
void cmd_addhist(struct mlist *, const char *);
void cmd_accept(void);
int cmd_char(int);
off_t cmd_int(long *);
char *get_cmdbuf(void);
char *cmd_lastpattern(void);
void init_cmdhist(void);
void save_cmdhist(void);
int in_mca(void);
void dispversion(void);
int getcc(void);
void ungetcc(int);
void ungetsc(char *);
void commands(void);
int cvt_length(int);
int *cvt_alloc_chpos(int);
void cvt_text(char *, char *, int *, int *, int);
void init_cmds(void);
void add_fcmd_table(char *, int);
void add_ecmd_table(char *, int);
int fcmd_decode(const char *, char **);
int ecmd_decode(const char *, char **);
char *lgetenv(char *);
int lesskey(char *, int);
void add_hometable(char *, char *, int);
int editchar(int, int);
void init_textlist(struct textlist *, char *);
char *forw_textlist(struct textlist *, char *);
char *back_textlist(struct textlist *, char *);
int edit(char *);
int edit_ifile(IFILE);
int edit_list(char *);
int edit_first(void);
int edit_last(void);
int edit_next(int);
int edit_prev(int);
int edit_index(int);
IFILE save_curr_ifile(void);
void unsave_ifile(IFILE);
void reedit_ifile(IFILE);
void reopen_curr_ifile(void);
int edit_stdin(void);
void cat_file(void);
void use_logfile(char *);
char *shell_unquote(char *);
char *get_meta_escape(void);
char *shell_quote(const char *);
char *homefile(char *);
char *fexpand(char *);
char *fcomplete(char *);
int bin_file(int f);
char *lglob(char *);
char *open_altfile(char *, int *, void **);
void close_altfile(char *, char *, void *);
int is_dir(char *);
char *bad_file(char *);
off_t filesize(int);
char *last_component(char *);
int eof_displayed(void);
int entire_file_displayed(void);
void squish_check(void);
void forw(int, off_t, int, int, int);
void back(int, off_t, int, int);
void forward(int, int, int);
void backward(int, int, int);
int get_back_scroll(void);
void del_ifile(IFILE);
IFILE next_ifile(IFILE);
IFILE prev_ifile(IFILE);
IFILE getoff_ifile(IFILE);
int nifile(void);
IFILE get_ifile(char *, IFILE);
char *get_filename(IFILE);
int get_index(IFILE);
void store_pos(IFILE, struct scrpos *);
void get_pos(IFILE, struct scrpos *);
int opened(IFILE);
void hold_ifile(IFILE, int);
int held_ifile(IFILE);
void set_open(IFILE);
void *get_filestate(IFILE);
void set_filestate(IFILE, void *);
off_t forw_line(off_t);
off_t back_line(off_t);
void set_attnpos(off_t);
void jump_forw(void);
void jump_back(off_t);
void repaint(void);
void jump_percent(int, long);
void jump_line_loc(off_t, int);
void jump_loc(off_t, int);
void init_line(void);
int is_ascii_char(LWCHAR);
void prewind(void);
void plinenum(off_t);
void pshift_all(void);
int is_ansi_end(LWCHAR);
int is_ansi_middle(LWCHAR);
int pappend(char, off_t);
int pflushmbc(void);
void pdone(int, int);
void set_status_col(char);
int gline(int, int *);
void null_line(void);
off_t forw_raw_line(off_t, char **, int *);
off_t back_raw_line(off_t, char **, int *);
void clr_linenum(void);
void add_lnum(off_t, off_t);
off_t find_linenum(off_t);
off_t find_pos(off_t);
off_t currline(int);
void lsystem(const char *, const char *);
int pipe_mark(int, char *);
void init_mark(void);
int badmark(int);
void setmark(int);
void lastmark(void);
void gomark(int);
off_t markpos(int);
void unmark(IFILE);
void opt_o(int, char *);
void opt__O(int, char *);
void opt_j(int, char *);
void calc_jump_sline(void);
void opt_shift(int, char *);
void calc_shift_count(void);
void opt_k(int, char *);
void opt_t(int, char *);
void opt__T(int, char *);
void opt_p(int, char *);
void opt__P(int, char *);
void opt_b(int, char *);
void opt_i(int, char *);
void opt__V(int, char *);
void opt_x(int, char *);
void opt_quote(int, char *);
void opt_query(int, char *);
int get_swindow(void);
char *propt(int);
void scan_option(char *);
void toggle_option(struct loption *, int, char *, int);
int opt_has_param(struct loption *);
char *opt_prompt(struct loption *);
int isoptpending(void);
void nopendopt(void);
int getnum(char **, char *, int *);
long getfraction(char **, char *, int *);
int get_quit_at_eof(void);
void init_option(void);
struct loption *findopt(int);
struct loption *findopt_name(char **, char **, int *);
int iread(int, unsigned char *, unsigned int);
char *errno_message(char *);
int percentage(off_t, off_t);
off_t percent_pos(off_t, int, long);
void put_line(void);
void flush(int);
int putchr(int);
void putstr(const char *);
void get_return(void);
void error(const char *, PARG *);
void ierror(const char *, PARG *);
int query(const char *, PARG *);
int compile_pattern(char *, int, regex_t **);
void uncompile_pattern(regex_t **);
int match_pattern(void *, char *, char *, int, char **, char **,
    int, int);
off_t position(int);
void add_forw_pos(off_t);
void add_back_pos(off_t);
void pos_clear(void);
void pos_init(void);
int onscreen(off_t);
int empty_screen(void);
int empty_lines(int, int);
void get_scrpos(struct scrpos *);
int adjsline(int);
void init_prompt(void);
char *pr_expand(const char *, int);
char *eq_message(void);
char *prompt_string(void);
char *wait_message(void);
void init_search(void);
void repaint_hilite(int);
void clear_attn(void);
void undo_search(void);
void clr_hilite(void);
int is_filtered(off_t);
int is_hilited(off_t, off_t, int, int *);
void chg_caseless(void);
void chg_hilite(void);
int search(int, char *, int);
void prep_hilite(off_t, off_t, int);
void set_filter_pattern(char *, int);
int is_filtering(void);
void sigwinch(int);
void init_signals(int);
void psignals(void);
void cleantags(void);
void findtag(char *);
off_t tagsearch(void);
char *nexttag(int);
char *prevtag(int);
int ntags(void);
int curr_tag(void);
int edit_tagfile(void);
void open_getchr(void);
int getchr(void);
void *lsignal(int, void (*)(int));
char *helpfile(void);
@


1.17
log
@remove needless extern keywords, a vestige of pre-ANSI C

explained by and ok millert@@
@
text
@a12 1
/*PRINTFLIKE1*/
@


1.16
log
@Remove LINUNUM, a needless alias for off_t. Also, remove a redundant
condition.

ok nicm@@
@
text
@d12 1
a12 1
extern void *ecalloc(int, unsigned int);
d14 230
a243 230
extern char *easprintf(const char *, ...);
extern char *estrdup(const char *);
extern char *skipsp(char *);
extern int sprefix(char *, char *, int);
extern void quit(int);
extern void raw_mode(int);
extern	char *special_key_str(int);
extern	void get_term(void);
extern	void init(void);
extern	void deinit(void);
extern	void home(void);
extern	void add_line(void);
extern	void lower_left(void);
extern	void line_left(void);
extern	void goto_line(int);
extern	void vbell(void);
extern	void ring_bell(void);
extern	void do_clear(void);
extern	void clear_eol(void);
extern	void clear_bot(void);
extern	void at_enter(int);
extern	void at_exit(void);
extern	void at_switch(int);
extern	int is_at_equiv(int, int);
extern	int apply_at_specials(int);
extern	void putbs(void);
extern	void match_brac(int, int, int, int);
extern	int ch_get(void);
extern	void ch_ungetchar(int);
extern	void end_logfile(void);
extern	void sync_logfile(void);
extern	int ch_seek(off_t);
extern	int ch_end_seek(void);
extern	int ch_beg_seek(void);
extern	off_t ch_length(void);
extern	off_t ch_tell(void);
extern	int ch_forw_get(void);
extern	int ch_back_get(void);
extern	void ch_setbufspace(int);
extern	void ch_flush(void);
extern	int seekable(int);
extern	void ch_set_eof(void);
extern	void ch_init(int, int);
extern	void ch_close(void);
extern	int ch_getflags(void);
extern	void init_charset(void);
extern	int binary_char(LWCHAR);
extern	int control_char(LWCHAR);
extern	char *prchar(LWCHAR);
extern	char *prutfchar(LWCHAR);
extern	int utf_len(char);
extern	int is_utf8_well_formed(const char *);
extern	LWCHAR get_wchar(const char *);
extern	void put_wchar(char **, LWCHAR);
extern	LWCHAR step_char(char **, int, char *);
extern	int is_composing_char(LWCHAR);
extern	int is_ubin_char(LWCHAR);
extern	int is_wide_char(LWCHAR);
extern	int is_combining_char(LWCHAR, LWCHAR);
extern	void cmd_reset(void);
extern	void clear_cmd(void);
extern	void cmd_putstr(char *);
extern	int len_cmdbuf(void);
extern	void set_mlist(void *, int);
extern	void cmd_addhist(struct mlist *, const char *);
extern	void cmd_accept(void);
extern	int cmd_char(int);
extern	off_t cmd_int(long *);
extern	char *get_cmdbuf(void);
extern	char *cmd_lastpattern(void);
extern	void init_cmdhist(void);
extern	void save_cmdhist(void);
extern	int in_mca(void);
extern	void dispversion(void);
extern	int getcc(void);
extern	void ungetcc(int);
extern	void ungetsc(char *);
extern	void commands(void);
extern	int cvt_length(int);
extern	int *cvt_alloc_chpos(int);
extern	void cvt_text(char *, char *, int *, int *, int);
extern	void init_cmds(void);
extern	void add_fcmd_table(char *, int);
extern	void add_ecmd_table(char *, int);
extern	int fcmd_decode(const char *, char **);
extern	int ecmd_decode(const char *, char **);
extern	char *lgetenv(char *);
extern	int lesskey(char *, int);
extern	void add_hometable(char *, char *, int);
extern	int editchar(int, int);
extern	void init_textlist(struct textlist *, char *);
extern	char *forw_textlist(struct textlist *, char *);
extern	char *back_textlist(struct textlist *, char *);
extern	int edit(char *);
extern	int edit_ifile(IFILE);
extern	int edit_list(char *);
extern	int edit_first(void);
extern	int edit_last(void);
extern	int edit_next(int);
extern	int edit_prev(int);
extern	int edit_index(int);
extern	IFILE save_curr_ifile(void);
extern	void unsave_ifile(IFILE);
extern	void reedit_ifile(IFILE);
extern	void reopen_curr_ifile(void);
extern	int edit_stdin(void);
extern	void cat_file(void);
extern	void use_logfile(char *);
extern	char *shell_unquote(char *);
extern	char *get_meta_escape(void);
extern	char *shell_quote(const char *);
extern	char *homefile(char *);
extern	char *fexpand(char *);
extern	char *fcomplete(char *);
extern	int bin_file(int f);
extern	char *lglob(char *);
extern	char *open_altfile(char *, int *, void **);
extern	void close_altfile(char *, char *, void *);
extern	int is_dir(char *);
extern	char *bad_file(char *);
extern	off_t filesize(int);
extern	char *last_component(char *);
extern	int eof_displayed(void);
extern	int entire_file_displayed(void);
extern	void squish_check(void);
extern	void forw(int, off_t, int, int, int);
extern	void back(int, off_t, int, int);
extern	void forward(int, int, int);
extern	void backward(int, int, int);
extern	int get_back_scroll(void);
extern	void del_ifile(IFILE);
extern	IFILE next_ifile(IFILE);
extern	IFILE prev_ifile(IFILE);
extern	IFILE getoff_ifile(IFILE);
extern	int nifile(void);
extern	IFILE get_ifile(char *, IFILE);
extern	char *get_filename(IFILE);
extern	int get_index(IFILE);
extern	void store_pos(IFILE, struct scrpos *);
extern	void get_pos(IFILE, struct scrpos *);
extern	int opened(IFILE);
extern	void hold_ifile(IFILE, int);
extern	int held_ifile(IFILE);
extern	void set_open(IFILE);
extern	void *get_filestate(IFILE);
extern	void set_filestate(IFILE, void *);
extern	off_t forw_line(off_t);
extern	off_t back_line(off_t);
extern	void set_attnpos(off_t);
extern	void jump_forw(void);
extern	void jump_back(off_t);
extern	void repaint(void);
extern	void jump_percent(int, long);
extern	void jump_line_loc(off_t, int);
extern	void jump_loc(off_t, int);
extern	void init_line(void);
extern	int is_ascii_char(LWCHAR);
extern	void prewind(void);
extern	void plinenum(off_t);
extern	void pshift_all(void);
extern	int is_ansi_end(LWCHAR);
extern	int is_ansi_middle(LWCHAR);
extern	int pappend(char, off_t);
extern	int pflushmbc(void);
extern	void pdone(int, int);
extern	void set_status_col(char);
extern	int gline(int, int *);
extern	void null_line(void);
extern	off_t forw_raw_line(off_t, char **, int *);
extern	off_t back_raw_line(off_t, char **, int *);
extern	void clr_linenum(void);
extern	void add_lnum(off_t, off_t);
extern	off_t find_linenum(off_t);
extern	off_t find_pos(off_t);
extern	off_t currline(int);
extern	void lsystem(const char *, const char *);
extern	int pipe_mark(int, char *);
extern	void init_mark(void);
extern	int badmark(int);
extern	void setmark(int);
extern	void lastmark(void);
extern	void gomark(int);
extern	off_t markpos(int);
extern	void unmark(IFILE);
extern	void opt_o(int, char *);
extern	void opt__O(int, char *);
extern	void opt_j(int, char *);
extern	void calc_jump_sline(void);
extern	void opt_shift(int, char *);
extern	void calc_shift_count(void);
extern	void opt_k(int, char *);
extern	void opt_t(int, char *);
extern	void opt__T(int, char *);
extern	void opt_p(int, char *);
extern	void opt__P(int, char *);
extern	void opt_b(int, char *);
extern	void opt_i(int, char *);
extern	void opt__V(int, char *);
extern	void opt_x(int, char *);
extern	void opt_quote(int, char *);
extern	void opt_query(int, char *);
extern	int get_swindow(void);
extern	char *propt(int);
extern	void scan_option(char *);
extern	void toggle_option(struct loption *, int, char *, int);
extern	int opt_has_param(struct loption *);
extern	char *opt_prompt(struct loption *);
extern	int isoptpending(void);
extern	void nopendopt(void);
extern	int getnum(char **, char *, int *);
extern	long getfraction(char **, char *, int *);
extern	int get_quit_at_eof(void);
extern	void init_option(void);
extern	struct loption *findopt(int);
extern	struct loption *findopt_name(char **, char **, int *);
extern	int iread(int, unsigned char *, unsigned int);
extern	char *errno_message(char *);
extern	int percentage(off_t, off_t);
extern	off_t percent_pos(off_t, int, long);
extern	void put_line(void);
extern	void flush(int);
extern	int putchr(int);
extern	void putstr(const char *);
extern	void get_return(void);
extern	void error(const char *, PARG *);
extern	void ierror(const char *, PARG *);
extern	int query(const char *, PARG *);
extern	int compile_pattern(char *, int, regex_t **);
extern	void uncompile_pattern(regex_t **);
extern	int match_pattern(void *, char *, char *, int, char **, char **,
d245 43
a287 43
extern	off_t position(int);
extern	void add_forw_pos(off_t);
extern	void add_back_pos(off_t);
extern	void pos_clear(void);
extern	void pos_init(void);
extern	int onscreen(off_t);
extern	int empty_screen(void);
extern	int empty_lines(int, int);
extern	void get_scrpos(struct scrpos *);
extern	int adjsline(int);
extern	void init_prompt(void);
extern	char *pr_expand(const char *, int);
extern	char *eq_message(void);
extern	char *prompt_string(void);
extern	char *wait_message(void);
extern	void init_search(void);
extern	void repaint_hilite(int);
extern	void clear_attn(void);
extern	void undo_search(void);
extern	void clr_hilite(void);
extern	int is_filtered(off_t);
extern	int is_hilited(off_t, off_t, int, int *);
extern	void chg_caseless(void);
extern	void chg_hilite(void);
extern	int search(int, char *, int);
extern	void prep_hilite(off_t, off_t, int);
extern	void set_filter_pattern(char *, int);
extern	int is_filtering(void);
extern	void sigwinch(int);
extern	void init_signals(int);
extern	void psignals(void);
extern	void cleantags(void);
extern	void findtag(char *);
extern	off_t tagsearch(void);
extern	char *nexttag(int);
extern	char *prevtag(int);
extern	int ntags(void);
extern	int curr_tag(void);
extern	int edit_tagfile(void);
extern	void open_getchr(void);
extern	int getchr(void);
extern	void *lsignal(int, void (*)(int));
extern	char *helpfile(void);
@


1.15
log
@Missing prototype.
@
text
@d81 1
a81 1
extern	LINENUM cmd_int(long *);
d164 1
a164 1
extern	void jump_back(LINENUM);
d172 1
a172 1
extern	void plinenum(LINENUM);
d185 4
a188 4
extern	void add_lnum(LINENUM, off_t);
extern	LINENUM find_linenum(off_t);
extern	off_t find_pos(LINENUM);
extern	LINENUM currline(int);
@


1.14
log
@remove fancy null check function in favor of checking for null.
from Ricardo Mestre
@
text
@d41 1
@


1.13
log
@Add a flag argument to flush() to stop it calling quit() on error, then
use this from quit() to stop less blowing up the stack looping through
quit()/flush() if stderr is closed (for example "less /missing
2</dev/null"). ok millert
@
text
@a241 1
extern	int is_null_pattern(void *);
@


1.12
log
@close_getchr() is now a noop
@
text
@d233 1
a233 1
extern	void flush(void);
@


1.11
log
@replace save() with estrdup() and make estrdup() exit like all the other
ecalloc, etc. functions do.
ok mmcc nicm
@
text
@a284 1
extern	void close_getchr(void);
@


1.10
log
@time_t is not a long. remove incorrect abstraction around time().
ok nicm
@
text
@a11 1
extern char *save(const char *);
@


1.9
log
@Replace less with the cleaned-up fork of less 458 maintained by Garrett
D'Amore at https://github.com/gdamore/less-fork. This has significantly
less portability goop, has a tidied up code style, uses terminfo instead
of termcap, and is has stricter POSIX compliance.

Many of our local changes have been accepted upstream: substantial
remaining local changes are code to read help files from /usr/share
rather than compiling them in, man page and help improvements, and some
tweaks to the default options.

Review and testing by millert, ok deraadt
@
text
@a229 1
extern	long get_time(void);
@


1.8
log
@Give more(1) its own help file, shorter than the one for less(1).
The helpfile itself was prepared by jmc@@, the glue by me.
OK millert@@ jmc@@
@
text
@d1 290
a290 293
	public char * save ();
	public VOID_POINTER ecalloc ();
	public char * skipsp ();
	public int sprefix ();
	public void quit ();
	public void raw_mode ();
	public void scrsize ();
	public char * special_key_str ();
	public void get_term ();
	public void init ();
	public void deinit ();
	public void home ();
	public void add_line ();
	public void remove_top ();
	public void win32_scroll_up ();
	public void lower_left ();
	public void line_left ();
	public void check_winch ();
	public void goto_line ();
	public void vbell ();
	public void bell ();
	public void clear ();
	public void clear_eol ();
	public void clear_bot ();
	public void at_enter ();
	public void at_exit ();
	public void at_switch ();
	public int is_at_equiv ();
	public int apply_at_specials ();
	public void backspace ();
	public void putbs ();
	public char WIN32getch ();
	public void WIN32setcolors ();
	public void WIN32textout ();
	public void match_brac ();
	public void ch_ungetchar ();
	public void end_logfile ();
	public void sync_logfile ();
	public int ch_seek ();
	public int ch_end_seek ();
	public int ch_beg_seek ();
	public POSITION ch_length ();
	public POSITION ch_tell ();
	public int ch_forw_get ();
	public int ch_back_get ();
	public void ch_setbufspace ();
	public void ch_flush ();
	public int seekable ();
	public void ch_set_eof ();
	public void ch_init ();
	public void ch_close ();
	public int ch_getflags ();
	public void ch_dump ();
	public void init_charset ();
	public int binary_char ();
	public int control_char ();
	public char * prchar ();
	public char * prutfchar ();
	public int utf_len ();
	public int is_utf8_well_formed ();
	public LWCHAR get_wchar ();
	public void put_wchar ();
	public LWCHAR step_char ();
	public int is_composing_char ();
	public int is_ubin_char ();
	public int is_wide_char ();
	public int is_combining_char ();
	public void cmd_reset ();
	public void clear_cmd ();
	public void cmd_putstr ();
	public int len_cmdbuf ();
	public void set_mlist ();
	public void cmd_addhist ();
	public void cmd_accept ();
	public int cmd_char ();
	public LINENUM cmd_int ();
	public char * get_cmdbuf ();
	public char * cmd_lastpattern ();
	public void init_cmdhist ();
	public void save_cmdhist ();
	public int in_mca ();
	public void dispversion ();
	public int getcc ();
	public void ungetcc ();
	public void ungetsc ();
	public void commands ();
	public int cvt_length ();
	public int * cvt_alloc_chpos ();
	public void cvt_text ();
	public void init_cmds ();
	public void add_fcmd_table ();
	public void add_ecmd_table ();
	public int fcmd_decode ();
	public int ecmd_decode ();
	public char * lgetenv ();
	public int lesskey ();
	public void add_hometable ();
	public int editchar ();
	public void init_textlist ();
	public char * forw_textlist ();
	public char * back_textlist ();
	public int edit ();
	public int edit_ifile ();
	public int edit_list ();
	public int edit_first ();
	public int edit_last ();
	public int edit_next ();
	public int edit_prev ();
	public int edit_index ();
	public IFILE save_curr_ifile ();
	public void unsave_ifile ();
	public void reedit_ifile ();
	public void reopen_curr_ifile ();
	public int edit_stdin ();
	public void cat_file ();
	public void use_logfile ();
	public char * shell_unquote ();
	public char * get_meta_escape ();
	public char * shell_quote ();
	public char * homefile ();
	public char * fexpand ();
	public char * fcomplete ();
	public int bin_file ();
	public char * lglob ();
	public char * open_altfile ();
	public void close_altfile ();
	public int is_dir ();
	public char * bad_file ();
	public POSITION filesize ();
	public char * shell_coption ();
	public char * last_component ();
	public int eof_displayed ();
	public int entire_file_displayed ();
	public void squish_check ();
	public void forw ();
	public void back ();
	public void forward ();
	public void backward ();
	public int get_back_scroll ();
	public void del_ifile ();
	public IFILE next_ifile ();
	public IFILE prev_ifile ();
	public IFILE getoff_ifile ();
	public int nifile ();
	public IFILE get_ifile ();
	public char * get_filename ();
	public int get_index ();
	public void store_pos ();
	public void get_pos ();
	public void set_open ();
	public int opened ();
	public void hold_ifile ();
	public int held_ifile ();
	public void * get_filestate ();
	public void set_filestate ();
	public void if_dump ();
	public POSITION forw_line ();
	public POSITION back_line ();
	public void set_attnpos ();
	public void jump_forw ();
	public void jump_back ();
	public void repaint ();
	public void jump_percent ();
	public void jump_line_loc ();
	public void jump_loc ();
	public void init_line ();
	public int is_ascii_char ();
	public void prewind ();
	public void plinenum ();
	public void pshift_all ();
	public int is_ansi_end ();
	public int is_ansi_middle ();
	public int pappend ();
	public int pflushmbc ();
	public void pdone ();
	public void set_status_col ();
	public int gline ();
	public void null_line ();
	public POSITION forw_raw_line ();
	public POSITION back_raw_line ();
	public void clr_linenum ();
	public void add_lnum ();
	public LINENUM find_linenum ();
	public POSITION find_pos ();
	public LINENUM currline ();
	public void lsystem ();
	public int pipe_mark ();
	public int pipe_data ();
	public void init_mark ();
	public int badmark ();
	public void setmark ();
	public void lastmark ();
	public void gomark ();
	public POSITION markpos ();
	public void unmark ();
	public void opt_o ();
	public void opt__O ();
	public void opt_j ();
	public void calc_jump_sline ();
	public void opt_shift ();
	public void calc_shift_count ();
	public void opt_k ();
	public void opt_t ();
	public void opt__T ();
	public void opt_p ();
	public void opt__P ();
	public void opt_b ();
	public void opt_i ();
	public void opt__V ();
	public void opt_D ();
	public void opt_x ();
	public void opt_quote ();
	public void opt_query ();
	public int get_swindow ();
	public char * propt ();
	public void scan_option ();
	public void toggle_option ();
	public int opt_has_param ();
	public char * opt_prompt ();
	public int isoptpending ();
	public void nopendopt ();
	public int getnum ();
	public long getfraction ();
	public int get_quit_at_eof ();
	public void init_option ();
	public struct loption * findopt ();
	public struct loption * findopt_name ();
	public int iread ();
	public long get_time ();
	public char * errno_message ();
	public int percentage ();
	public POSITION percent_pos ();
	public int  os9_signal ();
	public void put_line ();
	public void flush ();
	public int putchr ();
	public void putstr ();
	public void get_return ();
	public void error ();
	public void ierror ();
	public int query ();
	public int compile_pattern ();
	public void uncompile_pattern ();
	public int is_null_pattern ();
	public int match_pattern ();
	public POSITION position ();
	public void add_forw_pos ();
	public void add_back_pos ();
	public void pos_clear ();
	public void pos_init ();
	public int onscreen ();
	public int empty_screen ();
	public int empty_lines ();
	public void get_scrpos ();
	public int adjsline ();
	public void init_prompt ();
	public char * pr_expand ();
	public char * eq_message ();
	public char * pr_string ();
	public char * wait_message ();
	public void init_search ();
	public void repaint_hilite ();
	public void clear_attn ();
	public void undo_search ();
	public void clr_hlist ();
	public void clr_hilite ();
	public void clr_filter ();
	public int is_filtered ();
	public int is_hilited ();
	public void chg_caseless ();
	public void chg_hilite ();
	public int search ();
	public void prep_hilite ();
	public void set_filter_pattern ();
	public int is_filtering ();
	public RETSIGTYPE winch ();
	public RETSIGTYPE winch ();
	public void init_signals ();
	public void psignals ();
	public void cleantags ();
	public int gettagtype ();
	public void findtag ();
	public POSITION tagsearch ();
	public char * nexttag ();
	public char * prevtag ();
	public int ntags ();
	public int curr_tag ();
	public int edit_tagfile ();
	public void open_getchr ();
	public void close_getchr ();
	public int getchr ();
	public void (*lsignal()) ();
	public char * helpfile ();
@


1.7
log
@Merge Less 458 plus local patches

ok guenther@@, ok jmc@@ for man bits
@
text
@d293 1
@


1.6
log
@Merge in less 444 plus local changes

ok nicm@@
@
text
@d49 1
@


1.5
log
@Use interruptible syscalls instead of setjmp/longjmp.  This makes
less's signal handlers safe.  No one has reported problems so far...
@
text
@d17 1
d25 5
a29 8
	public void so_enter ();
	public void so_exit ();
	public void ul_enter ();
	public void ul_exit ();
	public void bo_enter ();
	public void bo_exit ();
	public void bl_enter ();
	public void bl_exit ();
d33 2
d57 10
d77 3
d86 3
d112 1
a119 1
	public char * find_helpfile ();
d130 4
a138 1
	public void help ();
d166 1
d169 1
d171 1
d173 1
d175 1
d197 4
a200 1
	public void opt_l ();
d214 1
d217 1
a217 1
	public int single_char_option ();
d222 2
d241 4
d260 1
d264 1
d266 2
d273 2
@


1.4
log
@o go back to using a help file instead of embedding it in the binary
o deal with HELPFILE not being defined
o add a SMALL definition to make a smaller less for the boot floppies
This still needs to be pared down a bit for the SMALL case
@
text
@a197 1
	public void intread ();
d251 1
@


1.3
log
@Merge in less-381 w/ local changes and remove obsolete files.
@
text
@d103 1
d119 1
@


1.2
log
@$OpenBSD$
@
text
@a0 3
/*	$OpenBSD$	*/

	public void strtcpy ();
d4 1
d8 1
a8 2
	public void scrsize ();
	public void get_editkeys ();
d14 2
d17 1
d19 1
a20 1
	public void vbell ();
d34 1
d46 1
a46 1
	public int ch_nbuf ();
d58 2
d62 1
d65 1
a65 2
	public int cmd_int ();
	public void cmd_putstr ();
a75 1
	public int cmd_search ();
d78 1
d93 3
d99 3
a102 1
	public char * find_helpfile ();
d106 1
a106 1
	public char * glob ();
d109 1
a109 8
	public char * glob ();
	public char * open_altfile ();
	public void close_altfile ();
	public char * glob ();
	public char * open_altfile ();
	public void close_altfile ();
	public char * bad_file ();
	public POSITION filesize ();
d112 1
a117 1
	public void help ();
d130 2
d137 1
d144 1
d147 1
d156 1
a156 1
	public int find_linenum ();
d158 1
a158 1
	public int currline ();
d168 1
d181 2
d193 2
a194 1
	public struct option * findopt ();
d200 2
d206 1
d224 1
d226 1
d238 2
d242 5
d248 1
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@Import of unmolested less-290.
@
text
@@


1.1.1.2
log
@Stock less-390 with some unneeded DOS/Windoze files removed
@
text
@d1 1
a4 1
	public int sprefix ();
d8 2
a9 1
	public char * special_key_str ();
a14 2
	public void remove_top ();
	public void win32_scroll_up ();
a15 1
	public void check_winch ();
d17 1
a18 1
	public void bell ();
a31 1
	public char WIN32getch ();
d43 1
a43 1
	public void ch_setbufspace ();
a54 2
	public void clear_cmd ();
	public void cmd_putstr ();
a56 1
	public void cmd_addhist ();
d59 2
a60 1
	public LINENUM cmd_int ();
d71 1
a73 1
	public char * lgetenv ();
a87 3
	public IFILE save_curr_ifile ();
	public void unsave_ifile ();
	public void reedit_ifile ();
a90 3
	public char * shell_unquote ();
	public char * get_meta_escape ();
	public char * shell_quote ();
d92 1
d96 1
a96 1
	public char * lglob ();
d99 8
a106 1
	public int is_dir ();
a108 1
	public char * shell_coption ();
d114 1
a126 2
	public void hold_ifile ();
	public int held_ifile ();
a131 1
	public void set_attnpos ();
a137 1
	public void init_line ();
a139 1
	public int is_ansi_end ();
d148 1
a148 1
	public LINENUM find_linenum ();
d150 1
a150 1
	public LINENUM currline ();
a159 1
	public void unmark ();
a171 2
	public void opt_x ();
	public void opt_quote ();
d182 1
a182 2
	public struct loption * findopt ();
	public struct loption * findopt_name ();
a187 2
	public POSITION percent_pos ();
	public int  os9_signal ();
a191 1
	public void get_return ();
a208 1
	public char * wait_message ();
a209 1
	public void clear_attn ();
a220 2
	public void cleantags ();
	public int gettagtype ();
a222 5
	public char * nexttag ();
	public char * prevtag ();
	public int ntags ();
	public int curr_tag ();
	public int edit_tagfile ();
a223 1
	public void close_getchr ();
@


1.1.1.3
log
@Import of Less 444

ok nicm@@
@
text
@a16 1
	public void line_left ();
d24 8
a31 5
	public void at_enter ();
	public void at_exit ();
	public void at_switch ();
	public int is_at_equiv ();
	public int apply_at_specials ();
a34 2
	public void WIN32setcolors ();
	public void WIN32textout ();
a56 10
	public char * prutfchar ();
	public int utf_len ();
	public int is_utf8_well_formed ();
	public LWCHAR get_wchar ();
	public void put_wchar ();
	public LWCHAR step_char ();
	public int is_composing_char ();
	public int is_ubin_char ();
	public int is_wide_char ();
	public int is_combining_char ();
a66 3
	public char * cmd_lastpattern ();
	public void init_cmdhist ();
	public void save_cmdhist ();
a72 3
	public int cvt_length ();
	public int * cvt_alloc_chpos ();
	public void cvt_text ();
a95 1
	public void reopen_curr_ifile ();
a112 4
	public char * last_component ();
	public int eof_displayed ();
	public int entire_file_displayed ();
	public void squish_check ();
a144 1
	public int is_ascii_char ();
a146 1
	public void pshift_all ();
a147 1
	public int is_ansi_middle ();
a148 1
	public int pflushmbc ();
a149 1
	public void set_status_col ();
d171 1
a171 4
	public void opt_j ();
	public void calc_jump_sline ();
	public void opt_shift ();
	public void calc_shift_count ();
a184 1
	public char * propt ();
d187 1
a187 1
	public int opt_has_param ();
a191 2
	public long getfraction ();
	public int get_quit_at_eof ();
a209 4
	public int compile_pattern ();
	public void uncompile_pattern ();
	public int is_null_pattern ();
	public int match_pattern ();
a224 1
	public void init_search ();
a227 1
	public void clr_hlist ();
a228 2
	public void clr_filter ();
	public int is_filtered ();
a233 2
	public void set_filter_pattern ();
	public int is_filtering ();
@


1.1.1.4
log
@Import of Less 458

ok guenther@@
@
text
@a48 1
	public void ch_set_eof ();
d228 1
a291 1
	public void (*lsignal()) ();
@


