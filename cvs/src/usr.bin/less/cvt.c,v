head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	LESS_458:1.1.1.2
	OPENBSD_5_5:1.2.0.12
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	LESS_444:1.1.1.1
	MARK_NUDELMAN:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.09.17.15.06.41;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	W32EN7Zp77efb8wW;

1.7
date	2016.03.16.15.36.26;	author mmcc;	state Exp;
branches;
next	1.6;
commitid	P9ytq8HKajWPxZf9;

1.6
date	2016.01.09.17.34.43;	author mmcc;	state Exp;
branches;
next	1.5;
commitid	gBXOEcHR6DypqbaI;

1.5
date	2015.11.06.15.50.33;	author nicm;	state Exp;
branches;
next	1.4;
commitid	QKrr6AuGzNx9nehL;

1.4
date	2015.11.05.22.08.44;	author nicm;	state Exp;
branches;
next	1.3;
commitid	yKv9Ck9ZDgwWTRTo;

1.3
date	2014.04.25.13.38.21;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.16.18.12.09;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.16.17.47.04;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.09.16.17.47.04;	author shadchin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.04.25.13.33.45;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@little bit more KNF
@
text
@/*
 * Copyright (C) 1984-2012  Mark Nudelman
 * Modified for use with illumos by Garrett D'Amore.
 * Copyright 2014 Garrett D'Amore <garrett@@damore.org>
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Less License, as specified in the README file.
 *
 * For more information, see the README file.
 */

/*
 * Routines to convert text in various ways.  Used by search.
 */

#include "charset.h"
#include "less.h"

extern int utf_mode;

/*
 * Get the length of a buffer needed to convert a string.
 */
int
cvt_length(int len)
{
	if (utf_mode)
		/*
		 * Just copying a string in UTF-8 mode can cause it to grow
		 * in length.
		 * Four output bytes for one input byte is the worst case.
		 */
		len *= 4;
	return (len + 1);
}

/*
 * Allocate a chpos array for use by cvt_text.
 */
int *
cvt_alloc_chpos(int len)
{
	int i;
	int *chpos = ecalloc(sizeof (int), len);
	/* Initialize all entries to an invalid position. */
	for (i = 0; i < len; i++)
		chpos[i] = -1;
	return (chpos);
}

/*
 * Convert text.  Perform the transformations specified by ops.
 * Returns converted text in odst.  The original offset of each
 * odst character (when it was in osrc) is returned in the chpos array.
 */
void
cvt_text(char *odst, char *osrc, int *chpos, int *lenp, int ops)
{
	char *dst;
	char *edst = odst;
	char *src;
	char *src_end;
	LWCHAR ch;

	if (lenp != NULL)
		src_end = osrc + *lenp;
	else
		src_end = osrc + strlen(osrc);

	for (src = osrc, dst = odst; src < src_end; ) {
		int src_pos = src - osrc;
		int dst_pos = dst - odst;
		ch = step_char(&src, +1, src_end);
		if ((ops & CVT_BS) && ch == '\b' && dst > odst) {
			/* Delete backspace and preceding char. */
			do {
				dst--;
			} while (dst > odst &&
			    !IS_ASCII_OCTET(*dst) && !IS_UTF8_LEAD(*dst));
		} else if ((ops & CVT_ANSI) && IS_CSI_START(ch)) {
			/* Skip to end of ANSI escape sequence. */
			src++;	/* skip the CSI start char */
			while (src < src_end)
				if (!is_ansi_middle(*src++))
					break;
		} else {
			/* Just copy the char to the destination buffer. */
			if ((ops & CVT_TO_LC) && iswupper(ch))
				ch = towlower(ch);
			put_wchar(&dst, ch);
			/* Record the original position of the char. */
			if (chpos != NULL)
				chpos[dst_pos] = src_pos;
		}
		if (dst > edst)
			edst = dst;
	}
	if ((ops & CVT_CRLF) && edst > odst && edst[-1] == '\r')
		edst--;
	*edst = '\0';
	if (lenp != NULL)
		*lenp = edst - odst;
}
@


1.7
log
@style(9) includes

ok nicm@@
@
text
@d46 1
a46 1
	for (i = 0;  i < len;  i++)
d70 1
a70 1
	for (src = osrc, dst = odst;  src < src_end; ) {
d82 1
a82 1
			src++;  /* skip the CSI start char */
@


1.6
log
@Remove superfluous and barely used macro aliases for wctype.h functions.

ok nicm@@
@
text
@d16 1
a17 1
#include "charset.h"
@


1.5
log
@Garrett D'Amore has agreed to moving his copyright line up above the
terms with the existing copyright, so it is clear it applies the same
terms.
@
text
@d88 2
a89 2
			if ((ops & CVT_TO_LC) && IS_UPPER(ch))
				ch = TO_LOWER(ch);
@


1.4
log
@Replace less with the cleaned-up fork of less 458 maintained by Garrett
D'Amore at https://github.com/gdamore/less-fork. This has significantly
less portability goop, has a tidied up code style, uses terminfo instead
of termcap, and is has stricter POSIX compliance.

Many of our local changes have been accepted upstream: substantial
remaining local changes are code to read help files from /usr/share
rather than compiling them in, man page and help improvements, and some
tweaks to the default options.

Review and testing by millert, ok deraadt
@
text
@d3 2
a9 4
 */
/*
 * Modified for use with illumos.
 * Copyright 2014 Garrett D'Amore <garrett@@damore.org>
@


1.3
log
@Merge Less 458 plus local patches

ok guenther@@, ok jmc@@ for man bits
@
text
@d9 4
d26 2
a27 4
	public int
cvt_length(len, ops)
	int len;
	int ops;
d31 1
a31 1
		 * Just copying a string in UTF-8 mode can cause it to grow 
d42 2
a43 3
	public int *
cvt_alloc_chpos(len)
	int len;
d46 1
a46 1
	int *chpos = (int *) ecalloc(sizeof(int), len);
d58 2
a59 7
	public void
cvt_text(odst, osrc, chpos, lenp, ops)
	char *odst;
	char *osrc;
	int *chpos;
	int *lenp;
	int ops;
d64 1
a64 1
	register char *src_end;
d72 1
a72 2
	for (src = osrc, dst = odst;  src < src_end;  )
	{
d76 1
a76 2
		if ((ops & CVT_BS) && ch == '\b' && dst > odst)
		{
d81 2
a82 3
				!IS_ASCII_OCTET(*dst) && !IS_UTF8_LEAD(*dst));
		} else if ((ops & CVT_ANSI) && IS_CSI_START(ch))
		{
d88 1
a88 2
		} else
		{
a91 1
#if !SMALL
a92 3
#else
			*dst++ = (char)ch;
#endif /* !SMALL */
a104 1
	/* FIXME: why was this here?  if (chpos != NULL) chpos[dst - odst] = src - osrc; */
@


1.2
log
@Merge in less 444 plus local changes

ok nicm@@
@
text
@d2 1
a2 1
 * Copyright (C) 1984-2011  Mark Nudelman
d7 1
a7 2
 * For more information about less, or for information on how to 
 * contact the author, see the README file.
d66 1
d105 2
a106 9
			/*
			 * Record the original position of the char.
			 * But if we've already recorded a position
			 * for this char (due to a backspace), leave
			 * it alone; if multiple source chars map to
			 * one destination char, we want the position
			 * of the first one.
			 */
			if (chpos != NULL && chpos[dst_pos] < 0)
d109 2
d112 3
a114 3
	if ((ops & CVT_CRLF) && dst > odst && dst[-1] == '\r')
		dst--;
	*dst = '\0';
d116 2
a117 3
		*lenp = dst - odst;
	if (chpos != NULL)
		chpos[dst - odst] = src - osrc;
@


1.1
log
@Initial revision
@
text
@d100 1
d102 3
@


1.1.1.1
log
@Import of Less 444

ok nicm@@
@
text
@@


1.1.1.2
log
@Import of Less 458

ok guenther@@
@
text
@d2 1
a2 1
 * Copyright (C) 1984-2012  Mark Nudelman
d7 2
a8 1
 * For more information, see the README file.
a66 1
	char *edst = odst;
a99 1
#if !SMALL
d101 9
a109 5
#else
			*dst++ = (char)ch;
#endif /* !SMALL */
			/* Record the original position of the char. */
			if (chpos != NULL)
a111 2
		if (dst > edst)
			edst = dst;
d113 3
a115 3
	if ((ops & CVT_CRLF) && edst > odst && edst[-1] == '\r')
		edst--;
	*edst = '\0';
d117 3
a119 2
		*lenp = edst - odst;
	/* FIXME: why was this here?  if (chpos != NULL) chpos[dst - odst] = src - osrc; */
@

