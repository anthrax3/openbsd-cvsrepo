head	1.20;
access;
symbols
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.20
date	2017.01.15.22.00.56;	author nicm;	state Exp;
branches;
next	1.19;
commitid	P8Zuj7wnJMd8B8vz;

1.19
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.18;
commitid	pxm6osuE99zELpkU;

1.18
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.17;
commitid	1xIYFpLYkPIXNEvU;

1.17
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.16;
commitid	P3qmSOx6KrDBsb0c;

1.16
date	2015.11.18.14.27.44;	author nicm;	state Exp;
branches;
next	1.15;
commitid	RjsAPRkWwvS79w40;

1.15
date	2015.11.14.09.41.06;	author nicm;	state Exp;
branches;
next	1.14;
commitid	FQoND7M2BC89FZoU;

1.14
date	2015.04.19.21.34.21;	author nicm;	state Exp;
branches;
next	1.13;
commitid	wug6ctIOfhVMeWQp;

1.13
date	2014.10.20.23.57.13;	author nicm;	state Exp;
branches;
next	1.12;
commitid	PTykIJGtZncJPE4a;

1.12
date	2013.10.10.11.45.29;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2013.06.23.12.41.55;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.26.10.54.48;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.25.11.35.55;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.22.15.54.29;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.22.15.50.42;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.22.15.49.55;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.24.13.39.10;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2012.09.03.09.32.38;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2012.06.18.13.16.42;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@It is silly for cmd_list_parse to return an integer error when it could
just return NULL.
@
text
@/* $OpenBSD: control.c,v 1.19 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2012 Nicholas Marriott <nicholas.marriott@@gmail.com>
 * Copyright (c) 2012 George Nachman <tmux@@georgester.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <event.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "tmux.h"

/* Write a line. */
void
control_write(struct client *c, const char *fmt, ...)
{
	va_list		 ap;

	va_start(ap, fmt);
	evbuffer_add_vprintf(c->stdout_data, fmt, ap);
	va_end(ap);

	evbuffer_add(c->stdout_data, "\n", 1);
	server_client_push_stdout(c);
}

/* Write a buffer, adding a terminal newline. Empties buffer. */
void
control_write_buffer(struct client *c, struct evbuffer *buffer)
{
	evbuffer_add_buffer(c->stdout_data, buffer);
	evbuffer_add(c->stdout_data, "\n", 1);
	server_client_push_stdout(c);
}

/* Control error callback. */
static enum cmd_retval
control_error(struct cmdq_item *item, void *data)
{
	struct client	*c = item->client;
	char		*error = data;

	cmdq_guard(item, "begin", 1);
	control_write(c, "parse error: %s", error);
	cmdq_guard(item, "error", 1);

	free(error);
	return (CMD_RETURN_NORMAL);
}

/* Control input callback. Read lines and fire commands. */
void
control_callback(struct client *c, int closed, __unused void *data)
{
	char			*line, *cause;
	struct cmd_list		*cmdlist;
	struct cmd		*cmd;
	struct cmdq_item	*item;

	if (closed)
		c->flags |= CLIENT_EXIT;

	for (;;) {
		line = evbuffer_readln(c->stdin_data, NULL, EVBUFFER_EOL_LF);
		if (line == NULL)
			break;
		if (*line == '\0') { /* empty line exit */
			c->flags |= CLIENT_EXIT;
			break;
		}

		cmdlist = cmd_string_parse(line, NULL, 0, &cause);
		if (cmdlist == NULL) {
			item = cmdq_get_callback(control_error, cause);
			cmdq_append(c, item);
		} else {
			TAILQ_FOREACH(cmd, &cmdlist->list, qentry)
				cmd->flags |= CMD_CONTROL;
			item = cmdq_get_command(cmdlist, NULL, NULL, 0);
			cmdq_append(c, item);
			cmd_list_free(cmdlist);
		}

		free(line);
	}
}
@


1.19
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.18 2016/10/16 17:55:14 nicm Exp $ */
d88 2
a89 1
		if (cmd_string_parse(line, &cmdlist, NULL, 0, &cause) != 0) {
@


1.18
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.17 2016/01/19 15:59:12 nicm Exp $ */
d54 1
a54 1
control_error(struct cmd_q *cmdq, void *data)
d56 1
a56 1
	struct client	*c = cmdq->client;
d59 1
a59 1
	cmdq_guard(cmdq, "begin", 1);
d61 1
a61 1
	cmdq_guard(cmdq, "error", 1);
d71 4
a74 4
	char		*line, *cause;
	struct cmd_list	*cmdlist;
	struct cmd	*cmd;
	struct cmd_q	*cmdq;
d89 2
a90 2
			cmdq = cmdq_get_callback(control_error, cause);
			cmdq_append(c, cmdq);
d94 2
a95 2
			cmdq = cmdq_get_command(cmdlist, NULL, NULL, 0);
			cmdq_append(c, cmdq);
@


1.17
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.16 2015/11/18 14:27:44 nicm Exp $ */
d52 15
d74 1
d89 2
a90 8
			c->cmdq->time = time(NULL);
			c->cmdq->number++;

			cmdq_guard(c->cmdq, "begin", 1);
			control_write(c, "parse error: %s", cause);
			cmdq_guard(c->cmdq, "error", 1);

			free(cause);
d94 2
a95 1
			cmdq_run(c->cmdq, cmdlist, NULL);
@


1.16
log
@Use __unused rather than rolling our own.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.15 2015/11/14 09:41:06 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2012 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.15
log
@Push stdout and stderr to clients more aggressively, and add an event to
continue if the send fails.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.14 2015/04/19 21:34:21 nicm Exp $ */
d54 1
a54 1
control_callback(struct client *c, int closed, unused void *data)
@


1.14
log
@Rewrite of tmux mouse support which was a mess. Instead of having
options for "mouse-this" and "mouse-that", mouse events may be bound as
keys and there is one option "mouse" that turns on mouse support
entirely (set -g mouse on).

See the new MOUSE SUPPORT section of the man page for description of the
key names and new flags (-t= to specify the pane or window under mouse
as a target, and send-keys -M to pass through a mouse event).

The default builtin bindings for the mouse are:

    bind -n   MouseDown1Pane select-pane -t=; send-keys -M
    bind -n MouseDown1Status select-window -t=
    bind -n   MouseDrag1Pane copy-mode -M
    bind -n MouseDrag1Border resize-pane -M

To get the effect of turning mode-mouse off, do:

    unbind -n MouseDrag1Pane
    unbind -temacs-copy MouseDrag1Pane

The old mouse options are now gone, set-option -q may be used to
suppress warnings if mixing configuration files.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.13 2014/10/20 23:57:13 nicm Exp $ */
d40 1
a40 1
	server_push_stdout(c);
d49 1
a49 1
	server_push_stdout(c);
@


1.13
log
@Better format for printf format attributes.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.12 2013/10/10 11:45:29 nicm Exp $ */
d84 1
a84 1
			cmdq_run(c->cmdq, cmdlist);
@


1.12
log
@Pass flags into cmdq_guard as an argument since sometimes cmdq->cmd can
be NULL. Avoids crash when a command in a command client can't be
parsed.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.11 2013/06/23 12:41:55 nicm Exp $ */
d30 1
a30 1
void printflike2
@


1.11
log
@Mark control commands specially so the client can identify them, based
on a diff from George Nachman a while back.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.10 2013/03/26 10:54:48 nicm Exp $ */
d76 1
a76 1
			cmdq_guard(c->cmdq, "begin");
d78 1
a78 1
			cmdq_guard(c->cmdq, "error");
@


1.10
log
@Fix compiler warnings, missing #include. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.9 2013/03/25 11:35:55 nicm Exp $ */
d58 1
d82 2
@


1.9
log
@Add time and a command count to control mode guards, based on code from
George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.8 2013/03/24 09:54:10 nicm Exp $ */
d25 1
@


1.8
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.7 2013/03/22 15:54:29 nicm Exp $ */
d71 7
a77 2
			control_write(c, "%%error in line \"%s\": %s", line,
			    cause);
@


1.7
log
@Need to set clients in context before changing their reference count.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.6 2013/03/22 15:50:42 nicm Exp $ */
a27 40
void printflike2 control_msg_error(struct cmd_ctx *, const char *, ...);
void printflike2 control_msg_print(struct cmd_ctx *, const char *, ...);
void printflike2 control_msg_info(struct cmd_ctx *, const char *, ...);

/* Command error callback. */
void printflike2
control_msg_error(struct cmd_ctx *ctx, const char *fmt, ...)
{
	struct client	*c = ctx->curclient;
	va_list		 ap;

	va_start(ap, fmt);
	evbuffer_add_vprintf(c->stdout_data, fmt, ap);
	va_end(ap);

	evbuffer_add(c->stdout_data, "\n", 1);
	server_push_stdout(c);
}

/* Command print callback. */
void printflike2
control_msg_print(struct cmd_ctx *ctx, const char *fmt, ...)
{
	struct client	*c = ctx->curclient;
	va_list		 ap;

	va_start(ap, fmt);
	evbuffer_add_vprintf(c->stdout_data, fmt, ap);
	va_end(ap);

	evbuffer_add(c->stdout_data, "\n", 1);
	server_push_stdout(c);
}

/* Command info callback. */
void printflike2
control_msg_info(unused struct cmd_ctx *ctx, unused const char *fmt, ...)
{
}

a55 1
	struct cmd_ctx	*ctx;
d70 1
a70 6
		ctx = cmd_get_ctx(NULL, c);
		ctx->error = control_msg_error;
		ctx->print = control_msg_print;
		ctx->info = control_msg_info;

		if (cmd_string_parse(line, &cmdlist, &cause) != 0) {
d75 1
a75 1
			cmd_list_exec(cmdlist, ctx);
a77 1
		cmd_free_ctx(ctx);
@


1.6
log
@Remove unnecessary initializers of cmd_ctx.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.5 2013/03/22 15:49:55 nicm Exp $ */
d111 1
a111 2
		ctx = cmd_get_ctx();
		ctx->curclient = c;
@


1.5
log
@Add functions to allocate and free command contexts rather than doing it
all on the stack.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.4 2012/09/24 13:39:10 nicm Exp $ */
a111 2
		ctx->msgdata = NULL;
		ctx->cmdclient = NULL;
a112 1

@


1.4
log
@Add control_write_buffer, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.3 2012/09/03 09:32:38 nicm Exp $ */
d96 1
a96 1
	struct cmd_ctx	 ctx;
d111 8
a118 7
		ctx.msgdata = NULL;
		ctx.cmdclient = NULL;
		ctx.curclient = c;

		ctx.error = control_msg_error;
		ctx.print = control_msg_print;
		ctx.info = control_msg_info;
d125 1
a125 1
			cmd_list_exec(cmdlist, &ctx);
d128 1
@


1.3
log
@Send notifications to control clients. Also don't redraw client when
suspended.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.2 2012/07/10 11:53:01 nicm Exp $ */
d78 9
@


1.2
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: control.c,v 1.1 2012/06/18 13:16:42 nicm Exp $ */
a30 1
void printflike2 control_write(struct client *, const char *, ...);
@


1.1
log
@Add a skeleton mode to tmux (called "control mode") that let's tmux
commands be sent and output received on stdout. This can be used to
integrate with other terminal emulators and should allow some other
things to be made simpler later. More to come so doesn't do much yet and
deliberately not documented.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d23 1
d114 1
a114 1
			xfree(cause);
d120 1
a120 1
		xfree(line);
@

