head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.4
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.28.0.4
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.31
date	2017.05.11.07.24.42;	author nicm;	state Exp;
branches;
next	1.30;
commitid	LwtM3YASWN7JH3U5;

1.30
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.29;
commitid	RXMp6wwG5a5Y82bo;

1.29
date	2017.04.21.14.01.19;	author nicm;	state Exp;
branches;
next	1.28;
commitid	6dh4rgGOD5wckeD9;

1.28
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.27;
commitid	pxm6osuE99zELpkU;

1.27
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.26;
commitid	1xIYFpLYkPIXNEvU;

1.26
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.25;
commitid	S3IpyYTkmviA6lfM;

1.25
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.24;
commitid	TaZ3kOtGiWwKofka;

1.24
date	2016.10.10.17.28.30;	author nicm;	state Exp;
branches;
next	1.23;
commitid	CMho0Ft9MVt5ZzOC;

1.23
date	2016.03.01.12.06.07;	author nicm;	state Exp;
branches;
next	1.22;
commitid	gWWSXkaHYCnCm5SK;

1.22
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.21;
commitid	P3qmSOx6KrDBsb0c;

1.21
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.20;
commitid	rE682EC14v4gpeFy;

1.20
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.19;
commitid	gsQkQsSyBCSmU9ax;

1.19
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.18;
commitid	uzMkp8Z4FE6WB6s6;

1.18
date	2015.04.19.21.34.21;	author nicm;	state Exp;
branches;
next	1.17;
commitid	wug6ctIOfhVMeWQp;

1.17
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.16;
commitid	Gq8hgMoG3t1Wy1Zv;

1.16
date	2013.10.10.12.00.22;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.22.10.37.39;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.17.00.11.22;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.01.13.18.38;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.30.13.45.56;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.21.17.57.29;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Change how we resolve which pane is dragging when there are multiple
options - choose the largest pane, which is more likely to be the one the
user wants to resize. Prompted by a report from Thomas Sattler.
@
text
@/* $OpenBSD: cmd-resize-pane.c,v 1.30 2017/04/22 10:22:39 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "tmux.h"

/*
 * Increase or decrease pane size.
 */

static enum cmd_retval	cmd_resize_pane_exec(struct cmd *, struct cmdq_item *);

static void	cmd_resize_pane_mouse_update(struct client *,
		    struct mouse_event *);

const struct cmd_entry cmd_resize_pane_entry = {
	.name = "resize-pane",
	.alias = "resizep",

	.args = { "DLMRt:Ux:y:Z", 0, 1 },
	.usage = "[-DLMRUZ] [-x width] [-y height] " CMD_TARGET_PANE_USAGE " "
		 "[adjustment]",

	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_resize_pane_exec
};

static enum cmd_retval
cmd_resize_pane_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct cmdq_shared	*shared = item->shared;
	struct window_pane	*wp = item->target.wp;
	struct winlink		*wl = item->target.wl;
	struct window		*w = wl->window;
	struct client		*c = item->client;
	struct session		*s = item->target.s;
	const char	       	*errstr;
	char			*cause;
	u_int			 adjust;
	int			 x, y;

	if (args_has(args, 'M')) {
		if (cmd_mouse_window(&shared->mouse, &s) == NULL)
			return (CMD_RETURN_NORMAL);
		if (c == NULL || c->session != s)
			return (CMD_RETURN_NORMAL);
		c->tty.mouse_drag_update = cmd_resize_pane_mouse_update;
		cmd_resize_pane_mouse_update(c, &shared->mouse);
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(args, 'Z')) {
		if (w->flags & WINDOW_ZOOMED)
			window_unzoom(w);
		else
			window_zoom(wp);
		server_redraw_window(w);
		server_status_window(w);
		return (CMD_RETURN_NORMAL);
	}
	server_unzoom_window(w);

	if (args->argc == 0)
		adjust = 1;
	else {
		adjust = strtonum(args->argv[0], 1, INT_MAX, &errstr);
		if (errstr != NULL) {
			cmdq_error(item, "adjustment %s", errstr);
			return (CMD_RETURN_ERROR);
		}
	}

	if (args_has(self->args, 'x')) {
		x = args_strtonum(self->args, 'x', PANE_MINIMUM, INT_MAX,
		    &cause);
		if (cause != NULL) {
			cmdq_error(item, "width %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
		layout_resize_pane_to(wp, LAYOUT_LEFTRIGHT, x);
	}
	if (args_has(self->args, 'y')) {
		y = args_strtonum(self->args, 'y', PANE_MINIMUM, INT_MAX,
		    &cause);
		if (cause != NULL) {
			cmdq_error(item, "height %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
		layout_resize_pane_to(wp, LAYOUT_TOPBOTTOM, y);
	}

	if (args_has(self->args, 'L'))
		layout_resize_pane(wp, LAYOUT_LEFTRIGHT, -adjust, 1);
	else if (args_has(self->args, 'R'))
		layout_resize_pane(wp, LAYOUT_LEFTRIGHT, adjust, 1);
	else if (args_has(self->args, 'U'))
		layout_resize_pane(wp, LAYOUT_TOPBOTTOM, -adjust, 1);
	else if (args_has(self->args, 'D'))
		layout_resize_pane(wp, LAYOUT_TOPBOTTOM, adjust, 1);
	server_redraw_window(wl->window);

	return (CMD_RETURN_NORMAL);
}

static void
cmd_resize_pane_mouse_update(struct client *c, struct mouse_event *m)
{
	struct winlink		*wl;
	struct window_pane	*loop, *wp_x, *wp_y;
	u_int			 y, ly, x, lx, sx, sy, ex, ey;

	wl = cmd_mouse_window(m, NULL);
	if (wl == NULL) {
		c->tty.mouse_drag_update = NULL;
		return;
	}

	y = m->y; x = m->x;
	if (m->statusat == 0 && y > 0)
		y--;
	else if (m->statusat > 0 && y >= (u_int)m->statusat)
		y = m->statusat - 1;
	ly = m->ly; lx = m->lx;
	if (m->statusat == 0 && ly > 0)
		ly--;
	else if (m->statusat > 0 && ly >= (u_int)m->statusat)
		ly = m->statusat - 1;

	wp_x = wp_y = NULL;
	TAILQ_FOREACH(loop, &wl->window->panes, entry) {
		if (!window_pane_visible(loop))
			continue;

		sx = loop->xoff;
		if (sx != 0)
			sx--;
		ex = loop->xoff + loop->sx;

		sy = loop->yoff;
		if (sy != 0)
			sy--;
		ey = loop->yoff + loop->sy;

		if ((lx == sx || lx == ex) &&
		    (ly >= sy && ly <= ey) &&
		    (wp_x == NULL || loop->sy > wp_x->sy))
			wp_x = loop;
		if ((ly == sy || ly == ey) &&
		    (lx >= sx && lx <= ex) &&
		    (wp_y == NULL || loop->sx > wp_y->sx))
			wp_y = loop;
	}
	if (wp_x == NULL && wp_y == NULL) {
		c->tty.mouse_drag_update = NULL;
		return;
	}
	if (wp_x != NULL)
		layout_resize_pane(wp_x, LAYOUT_LEFTRIGHT, x - lx, 0);
	if (wp_y != NULL)
		layout_resize_pane(wp_y, LAYOUT_TOPBOTTOM, y - ly, 0);
	server_redraw_window(wl->window);
}
@


1.30
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.29 2017/04/21 14:01:19 nicm Exp $ */
d132 2
a133 3
	struct window_pane	*wp;
	int			 found;
	u_int			 y, ly;
d141 1
a141 1
	y = m->y;
d146 1
a146 1
	ly = m->ly;
d152 3
a154 3
	found = 0;
	TAILQ_FOREACH(wp, &wl->window->panes, entry) {
		if (!window_pane_visible(wp))
d157 18
a174 12
		if (wp->xoff + wp->sx == m->lx &&
		    wp->yoff <= 1 + ly &&
		    wp->yoff + wp->sy >= ly) {
			layout_resize_pane(wp, LAYOUT_LEFTRIGHT, m->x - m->lx, 0);
			found = 1;
		}
		if (wp->yoff + wp->sy == ly &&
		    wp->xoff <= 1 + m->lx &&
		    wp->xoff + wp->sx >= m->lx) {
			layout_resize_pane(wp, LAYOUT_TOPBOTTOM, y - ly, 0);
			found = 1;
		}
d176 1
a176 3
	if (found)
		server_redraw_window(wl->window);
	else
d178 7
@


1.29
log
@Store state shared between multiple commands in the queue in a shared
structure.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.28 2016/10/16 19:04:05 nicm Exp $ */
d42 1
a42 1
	.tflag = CMD_PANE,
d53 2
a54 2
	struct window_pane	*wp = item->state.tflag.wp;
	struct winlink		*wl = item->state.tflag.wl;
d57 1
a57 1
	struct session		*s = item->state.tflag.s;
@


1.28
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.27 2016/10/16 17:55:14 nicm Exp $ */
d52 1
d64 1
a64 1
		if (cmd_mouse_window(&item->mouse, &s) == NULL)
d69 1
a69 1
		cmd_resize_pane_mouse_update(c, &item->mouse);
@


1.27
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.26 2016/10/14 22:14:22 nicm Exp $ */
d29 1
a29 1
static enum cmd_retval	 cmd_resize_pane_exec(struct cmd *, struct cmd_q *);
d49 1
a49 1
cmd_resize_pane_exec(struct cmd *self, struct cmd_q *cmdq)
d52 2
a53 2
	struct window_pane	*wp = cmdq->state.tflag.wp;
	struct winlink		*wl = cmdq->state.tflag.wl;
d55 2
a56 2
	struct client		*c = cmdq->client;
	struct session		*s = cmdq->state.tflag.s;
d63 1
a63 1
		if (cmd_mouse_window(&cmdq->mouse, &s) == NULL)
d68 1
a68 1
		cmd_resize_pane_mouse_update(c, &cmdq->mouse);
d88 1
a88 1
			cmdq_error(cmdq, "adjustment %s", errstr);
d97 1
a97 1
			cmdq_error(cmdq, "width %s", cause);
d107 1
a107 1
			cmdq_error(cmdq, "height %s", cause);
@


1.26
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.25 2016/10/10 21:51:39 nicm Exp $ */
d63 1
a63 1
		if (cmd_mouse_window(&cmdq->item->mouse, &s) == NULL)
d68 1
a68 1
		cmd_resize_pane_mouse_update(c, &cmdq->item->mouse);
@


1.25
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.24 2016/10/10 17:28:30 nicm Exp $ */
d44 1
a44 1
	.flags = 0,
@


1.24
log
@Do not allow the opposite pane to resize when dragging with the mouse
because it is not possible to keep the mouse on the border when the
minimum size is reached.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.23 2016/03/01 12:06:07 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	 cmd_resize_pane_exec(struct cmd *, struct cmd_q *);
d31 2
a32 1
void	cmd_resize_pane_mouse_update(struct client *, struct mouse_event *);
d48 1
a48 1
enum cmd_retval
d127 1
a127 1
void
d158 2
a159 1
		    wp->yoff <= 1 + ly && wp->yoff + wp->sy >= ly) {
d164 2
a165 1
		    wp->xoff <= 1 + m->lx && wp->xoff + wp->sx >= m->lx) {
@


1.23
log
@Remove some more unused variables, and use RB_FOREACH_SAFE in
key_bindings_unref_table.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.22 2016/01/19 15:59:12 nicm Exp $ */
d114 1
a114 1
		layout_resize_pane(wp, LAYOUT_LEFTRIGHT, -adjust);
d116 1
a116 1
		layout_resize_pane(wp, LAYOUT_LEFTRIGHT, adjust);
d118 1
a118 1
		layout_resize_pane(wp, LAYOUT_TOPBOTTOM, -adjust);
d120 1
a120 1
		layout_resize_pane(wp, LAYOUT_TOPBOTTOM, adjust);
d158 1
a158 1
			layout_resize_pane(wp, LAYOUT_LEFTRIGHT, m->x - m->lx);
d163 1
a163 1
			layout_resize_pane(wp, LAYOUT_TOPBOTTOM, y - ly);
@


1.22
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.21 2015/12/14 00:31:54 nicm Exp $ */
a70 1
	w = wl->window;
@


1.21
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.20 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.20
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.19 2015/12/13 14:32:38 nicm Exp $ */
d41 3
a43 1
	.flags = CMD_PANE_T,
@


1.19
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.18 2015/04/19 21:34:21 nicm Exp $ */
d34 9
a42 5
	"resize-pane", "resizep",
	"DLMRt:Ux:y:Z", 0, 1,
	"[-DLMRUZ] [-x width] [-y height] " CMD_TARGET_PANE_USAGE " [adjustment]",
	CMD_PANE_T,
	cmd_resize_pane_exec
@


1.18
log
@Rewrite of tmux mouse support which was a mess. Instead of having
options for "mouse-this" and "mouse-that", mouse events may be bound as
keys and there is one option "mouse" that turns on mouse support
entirely (set -g mouse on).

See the new MOUSE SUPPORT section of the man page for description of the
key names and new flags (-t= to specify the pane or window under mouse
as a target, and send-keys -M to pass through a mouse event).

The default builtin bindings for the mouse are:

    bind -n   MouseDown1Pane select-pane -t=; send-keys -M
    bind -n MouseDown1Status select-window -t=
    bind -n   MouseDrag1Pane copy-mode -M
    bind -n MouseDrag1Border resize-pane -M

To get the effect of turning mode-mouse off, do:

    unbind -n MouseDrag1Pane
    unbind -temacs-copy MouseDrag1Pane

The old mouse options are now gone, set-option -q may be used to
suppress warnings if mixing configuration files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.17 2014/10/20 22:29:25 nicm Exp $ */
d36 2
a37 3
	"[-DLMRUZ] [-x width] [-y height] " CMD_TARGET_PANE_USAGE
	" [adjustment]",
	0,
d45 3
d49 1
a49 3
	struct session		*s;
	struct winlink		*wl;
	struct window		*w;
a51 1
	struct window_pane	*wp;
a64 2
	if ((wl = cmd_find_pane(cmdq, args_get(args, 't'), NULL, &wp)) == NULL)
		return (CMD_RETURN_ERROR);
a65 1

@


1.17
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.16 2013/10/10 12:00:22 nicm Exp $ */
d31 2
d35 3
a37 2
	"DLRt:Ux:y:Z", 0, 1,
	"[-DLRUZ] [-x width] [-y height] " CMD_TARGET_PANE_USAGE " [adjustment]",
d46 2
d56 10
d123 47
@


1.16
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.15 2013/03/24 09:57:59 nicm Exp $ */
a28 1
void		 cmd_resize_pane_key_binding(struct cmd *, int);
a35 1
	cmd_resize_pane_key_binding,
a37 46

void
cmd_resize_pane_key_binding(struct cmd *self, int key)
{
	switch (key) {
	case KEYC_UP | KEYC_CTRL:
		self->args = args_create(0);
		args_set(self->args, 'U', NULL);
		break;
	case KEYC_DOWN | KEYC_CTRL:
		self->args = args_create(0);
		args_set(self->args, 'D', NULL);
		break;
	case KEYC_LEFT | KEYC_CTRL:
		self->args = args_create(0);
		args_set(self->args, 'L', NULL);
		break;
	case KEYC_RIGHT | KEYC_CTRL:
		self->args = args_create(0);
		args_set(self->args, 'R', NULL);
		break;
	case KEYC_UP | KEYC_ESCAPE:
		self->args = args_create(1, "5");
		args_set(self->args, 'U', NULL);
		break;
	case KEYC_DOWN | KEYC_ESCAPE:
		self->args = args_create(1, "5");
		args_set(self->args, 'D', NULL);
		break;
	case KEYC_LEFT | KEYC_ESCAPE:
		self->args = args_create(1, "5");
		args_set(self->args, 'L', NULL);
		break;
	case KEYC_RIGHT | KEYC_ESCAPE:
		self->args = args_create(1, "5");
		args_set(self->args, 'R', NULL);
		break;
	case 'z':
		self->args = args_create(0);
		args_set(self->args, 'Z', NULL);
		break;
	default:
		self->args = args_create(0);
		break;
	}
}
@


1.15
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.14 2013/03/24 09:54:10 nicm Exp $ */
a37 1
	NULL,
@


1.14
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.13 2013/03/22 10:37:39 nicm Exp $ */
d34 2
a35 2
	"DLRt:Ux:y:", 0, 1,
	"[-DLRU] [-x width] [-y height] " CMD_TARGET_PANE_USAGE " [adjustment]",
d78 4
d93 1
d102 12
@


1.13
log
@Add resize-pane -x and -y for absolute pane size (much requested).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.12 2013/01/17 00:11:22 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_resize_pane_exec(struct cmd *, struct cmd_ctx *);
d85 1
a85 1
cmd_resize_pane_exec(struct cmd *self, struct cmd_ctx *ctx)
d95 1
a95 1
	if ((wl = cmd_find_pane(ctx, args_get(args, 't'), NULL, &wp)) == NULL)
d103 1
a103 1
			ctx->error(ctx, "adjustment %s", errstr);
d112 1
a112 1
			ctx->error(ctx, "width %s", cause);
d122 1
a122 1
			ctx->error(ctx, "height %s", cause);
@


1.12
log
@Remove the layout undo/redo code which never really worked.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.11 2012/07/11 07:10:15 nicm Exp $ */
d34 2
a35 2
	"DLRt:U", 0, 1,
	"[-DLRU] " CMD_TARGET_PANE_USAGE " [adjustment]",
d90 1
d93 1
d106 21
@


1.11
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.10 2012/04/01 13:18:38 nicm Exp $ */
a105 1
	layout_list_add(wp->window);
@


1.10
log
@Add a layout history which can be stepped through with select-layout -u
and -U commands (bound to 'u' and 'U' by default).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.9 2011/01/04 00:42:47 nicm Exp $ */
d29 2
a30 2
void	cmd_resize_pane_key_binding(struct cmd *, int);
int	cmd_resize_pane_exec(struct cmd *, struct cmd_ctx *);
d84 1
a84 1
int
d94 1
a94 1
		return (-1);
d102 1
a102 1
			return (-1);
d117 1
a117 1
	return (0);
@


1.9
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.8 2009/12/03 22:50:10 nicm Exp $ */
d106 1
@


1.8
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.7 2009/11/13 19:53:29 nicm Exp $ */
d29 1
a29 1
void	cmd_resize_pane_init(struct cmd *, int);
d34 1
d36 4
a39 6
	CMD_ARG01, "DLRU",
	cmd_resize_pane_init,
	cmd_target_parse,
	cmd_resize_pane_exec,
	cmd_target_free,
	cmd_target_print
d43 1
a43 1
cmd_resize_pane_init(struct cmd *self, int key)
d45 36
a80 29
	struct cmd_target_data	*data;

	cmd_target_init(self, key);
	data = self->data;

	if (key == (KEYC_UP | KEYC_CTRL))
		cmd_set_flag(&data->chflags, 'U');
	if (key == (KEYC_DOWN | KEYC_CTRL))
		cmd_set_flag(&data->chflags, 'D');
	if (key == (KEYC_LEFT | KEYC_CTRL))
		cmd_set_flag(&data->chflags, 'L');
	if (key == (KEYC_RIGHT | KEYC_CTRL))
		cmd_set_flag(&data->chflags, 'R');

	if (key == (KEYC_UP | KEYC_ESCAPE)) {
		cmd_set_flag(&data->chflags, 'U');
		data->arg = xstrdup("5");
	}
	if (key == (KEYC_DOWN | KEYC_ESCAPE)) {
		cmd_set_flag(&data->chflags, 'D');
		data->arg = xstrdup("5");
	}
	if (key == (KEYC_LEFT | KEYC_ESCAPE)) {
		cmd_set_flag(&data->chflags, 'L');
		data->arg = xstrdup("5");
	}
	if (key == (KEYC_RIGHT | KEYC_ESCAPE)) {
		cmd_set_flag(&data->chflags, 'R');
		data->arg = xstrdup("5");
d87 1
a87 1
	struct cmd_target_data	*data = self->data;
d93 1
a93 1
	if ((wl = cmd_find_pane(ctx, data->target, NULL, &wp)) == NULL)
d96 1
a96 1
	if (data->arg == NULL)
d99 1
a99 1
		adjust = strtonum(data->arg, 1, INT_MAX, &errstr);
d101 1
a101 1
			ctx->error(ctx, "adjustment %s: %s", errstr, data->arg);
d106 1
a106 1
	if (cmd_check_flag(data->chflags, 'L'))
d108 1
a108 1
	else if (cmd_check_flag(data->chflags, 'R'))
d110 1
a110 1
	else if (cmd_check_flag(data->chflags, 'U'))
d112 1
a112 1
	else if (cmd_check_flag(data->chflags, 'D'))
@


1.7
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.6 2009/07/30 13:45:56 nicm Exp $ */
d59 1
a59 1
	
@


1.6
log
@Merge pane number into the target specification for pane commands. Instead of
using -p index, a target pane is now addressed with the normal -t window form
but suffixed with a period and a pane index, for example :0.2 or
mysess:mywin.1. An unadorned number such as -t 1 is tried as a pane index in
the current window, if that fails the same rules are followed as for a target
window and the current pane in that window used.

As a side-effect this now means that swap-pane can swap panes between different
windows.

Note that this changes the syntax of the break-pane, clear-history, kill-pane,
resize-pane, select-pane and swap-pane commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.5 2009/07/26 12:58:44 nicm Exp $ */
d34 2
a35 3
	"[-DU] " CMD_TARGET_PANE_USAGE " [adjustment]",
	CMD_ARG01,
	CMD_CHFLAG('D')|CMD_CHFLAG('L')|CMD_CHFLAG('R')|CMD_CHFLAG('U'),
d52 1
a52 1
		data->chflags |= CMD_CHFLAG('U');
d54 1
a54 1
		data->chflags |= CMD_CHFLAG('D');
d56 1
a56 1
		data->chflags |= CMD_CHFLAG('L');
d58 1
a58 1
		data->chflags |= CMD_CHFLAG('R');
d61 1
a61 1
		data->chflags |= CMD_CHFLAG('U');
d65 1
a65 1
		data->chflags |= CMD_CHFLAG('D');
d69 1
a69 1
		data->chflags |= CMD_CHFLAG('L');
d73 1
a73 1
		data->chflags |= CMD_CHFLAG('R');
d100 3
a102 3
	if (data->chflags & (CMD_CHFLAG('L')|CMD_CHFLAG('R'))) {
		if (data->chflags & CMD_CHFLAG('L'))
			adjust = -adjust;
d104 3
a106 3
	} else {
		if (data->chflags & CMD_CHFLAG('U'))
			adjust = -adjust;
a107 1
	}
@


1.5
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.4 2009/07/21 17:57:29 nicm Exp $ */
d34 1
a34 1
	CMD_PANE_WINDOW_USAGE "[-DU] [adjustment]",
d38 1
a38 1
	cmd_pane_parse,
d40 2
a41 2
	cmd_pane_free,
	cmd_pane_print
d47 1
a47 1
	struct cmd_pane_data	*data;
d49 1
a49 1
	cmd_pane_init(self, key);
d82 1
a82 1
	struct cmd_pane_data	*data = self->data;
d88 1
a88 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
a89 9
	if (data->pane == -1)
		wp = wl->window->active;
	else {
		wp = window_pane_at_index(wl->window, data->pane);
		if (wp == NULL) {
			ctx->error(ctx, "no pane: %d", data->pane);
			return (-1);
		}
	}
@


1.4
log
@Tidy up keys: use an enum for the key codes, and remove the macros which just
wrap flag sets/clears/tests.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.3 2009/07/19 13:21:40 nicm Exp $ */
a39 2
       	cmd_pane_send,
	cmd_pane_recv,
@


1.3
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d54 1
a54 1
	if (key == KEYC_ADDCTL(KEYC_UP))
d56 1
a56 1
	if (key == KEYC_ADDCTL(KEYC_DOWN))
d58 1
a58 1
	if (key == KEYC_ADDCTL(KEYC_LEFT))
d60 1
a60 1
	if (key == KEYC_ADDCTL(KEYC_RIGHT))
d62 2
a63 2

	if (key == KEYC_ADDESC(KEYC_UP)) {
d67 1
a67 1
	if (key == KEYC_ADDESC(KEYC_DOWN)) {
d71 1
a71 1
	if (key == KEYC_ADDESC(KEYC_LEFT)) {
d75 1
a75 1
	if (key == KEYC_ADDESC(KEYC_RIGHT)) {
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-resize-pane.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d35 2
a36 1
	CMD_ARG01, CMD_CHFLAG('D')|CMD_CHFLAG('U'),
d54 2
d58 4
d63 2
a64 1
	if (key == KEYC_ADDESC(KEYC_UP))
d66 1
d71 8
d112 8
a119 6
	if (!(data->chflags & CMD_CHFLAG('D')))
		adjust = -adjust;
	if (layout_resize(wp, adjust) != 0) {
		ctx->error(ctx, "layout %s "
		    "does not support resizing", layout_name(wp->window));
		return (-1);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d35 1
a35 1
	CMD_ARG01|CMD_BIGUFLAG|CMD_BIGDFLAG,
d54 1
a54 1
		data->flags |= CMD_BIGDFLAG;
d59 1
a59 1
		data->flags |= CMD_BIGDFLAG;
d95 1
a95 1
	if (!(data->flags & CMD_BIGDFLAG))
@

