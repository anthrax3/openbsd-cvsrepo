head	1.20;
access;
symbols
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.20
date	2017.01.11.14.56.44;	author nicm;	state Exp;
branches;
next	1.19;
commitid	OX4JTH65GquvrMVB;

1.19
date	2016.10.16.22.18.04;	author nicm;	state Exp;
branches;
next	1.18;
commitid	hN37jNkXLWeSlPkK;

1.18
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.17;
commitid	j0FZs70gSPCmpqWI;

1.17
date	2016.10.16.19.55.52;	author nicm;	state Exp;
branches;
next	1.16;
commitid	UQUdd0Sr2dxivaNh;

1.16
date	2016.10.16.19.36.37;	author nicm;	state Exp;
branches;
next	1.15;
commitid	UfrPlTlFgpvE2jpY;

1.15
date	2016.10.16.19.15.02;	author nicm;	state Exp;
branches;
next	1.14;
commitid	BsOGDBdjoFC7iuvC;

1.14
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.13;
commitid	pxm6osuE99zELpkU;

1.13
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.12;
commitid	1xIYFpLYkPIXNEvU;

1.12
date	2016.10.15.00.12.58;	author nicm;	state Exp;
branches;
next	1.11;
commitid	W1m68Q2tEflX7Raw;

1.11
date	2016.10.15.00.09.30;	author nicm;	state Exp;
branches;
next	1.10;
commitid	X2XXRCKiqkzI3Ni0;

1.10
date	2016.10.15.00.01.01;	author nicm;	state Exp;
branches;
next	1.9;
commitid	Y3LyKhemZ1e3lTtQ;

1.9
date	2016.10.10.21.29.23;	author nicm;	state Exp;
branches;
next	1.8;
commitid	z4Hr4PZF7Ev93uEJ;

1.8
date	2015.06.05.18.18.32;	author nicm;	state Exp;
branches;
next	1.7;
commitid	ZQGnMCbBqbBRSCmt;

1.7
date	2015.06.05.18.06.30;	author nicm;	state Exp;
branches;
next	1.6;
commitid	31HWw6xUnTEvtfY4;

1.6
date	2015.04.24.23.17.11;	author nicm;	state Exp;
branches;
next	1.5;
commitid	iy4fcaIoXzxOx84I;

1.5
date	2012.09.25.07.41.22;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.03.09.32.38;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.21.10.00.33;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.13.06.27.41;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.17.22.35.09;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Some tidying and tweaks to options code.
@
text
@/* $OpenBSD: notify.c,v 1.19 2016/10/16 22:18:04 nicm Exp $ */

/*
 * Copyright (c) 2012 George Nachman <tmux@@georgester.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

struct notify_entry {
	const char		*name;

	struct client		*client;
	struct session		*session;
	struct window		*window;
	int			 pane;

	struct cmd_find_state	 fs;
};

static void
notify_hook(struct cmdq_item *item, struct notify_entry *ne)
{
	struct cmd_find_state	 fs;
	struct hook		*hook;
	struct cmdq_item	*new_item;
	struct session		*s = ne->session;
	struct window		*w = ne->window;

	cmd_find_clear_state(&fs, NULL, 0);
	if (cmd_find_empty_state(&ne->fs) || !cmd_find_valid_state(&ne->fs))
		cmd_find_current(&fs, item, CMD_FIND_QUIET);
	else
		cmd_find_copy_state(&fs, &ne->fs);

	hook = hooks_find(hooks_get(fs.s), ne->name);
	if (hook == NULL)
		return;
	log_debug("notify hook %s", ne->name);

	new_item = cmdq_get_command(hook->cmdlist, &fs, NULL, CMDQ_NOHOOKS);
	cmdq_format(new_item, "hook", "%s", ne->name);

	if (s != NULL) {
		cmdq_format(new_item, "hook_session", "$%u", s->id);
		cmdq_format(new_item, "hook_session_name", "%s", s->name);
	}
	if (w != NULL) {
		cmdq_format(new_item, "hook_window", "@@%u", w->id);
		cmdq_format(new_item, "hook_window_name", "%s", w->name);
	}
	if (ne->pane != -1)
		cmdq_format(new_item, "hook_pane", "%%%d", ne->pane);

	cmdq_insert_after(item, new_item);
}

static enum cmd_retval
notify_callback(struct cmdq_item *item, void *data)
{
	struct notify_entry	*ne = data;

	log_debug("%s: %s", __func__, ne->name);

	if (strcmp(ne->name, "window-layout-changed") == 0)
		control_notify_window_layout_changed(ne->window);
	if (strcmp(ne->name, "window-unlinked") == 0)
		control_notify_window_unlinked(ne->session, ne->window);
	if (strcmp(ne->name, "window-linked") == 0)
		control_notify_window_linked(ne->session, ne->window);
	if (strcmp(ne->name, "window-renamed") == 0)
		control_notify_window_renamed(ne->window);
	if (strcmp(ne->name, "client-session-changed") == 0)
		control_notify_client_session_changed(ne->client);
	if (strcmp(ne->name, "session-renamed") == 0)
		control_notify_session_renamed(ne->session);
	if (strcmp(ne->name, "session-created") == 0)
		control_notify_session_created(ne->session);
	if (strcmp(ne->name, "session-closed") == 0)
		control_notify_session_closed(ne->session);

	notify_hook(item, ne);

	if (ne->client != NULL)
		server_client_unref(ne->client);
	if (ne->session != NULL)
		session_unref(ne->session);
	if (ne->window != NULL)
		window_remove_ref(ne->window);

	if (ne->fs.s != NULL)
		session_unref(ne->fs.s);

	free((void *)ne->name);
	free(ne);

	return (CMD_RETURN_NORMAL);
}

static void
notify_add(const char *name, struct cmd_find_state *fs, struct client *c,
    struct session *s, struct window *w, struct window_pane *wp)
{
	struct notify_entry	*ne;
	struct cmdq_item	*new_item;

	ne = xcalloc(1, sizeof *ne);
	ne->name = xstrdup(name);

	ne->client = c;
	ne->session = s;
	ne->window = w;

	if (wp != NULL)
		ne->pane = wp->id;
	else
		ne->pane = -1;

	if (c != NULL)
		c->references++;
	if (s != NULL)
		s->references++;
	if (w != NULL)
		w->references++;

	cmd_find_copy_state(&ne->fs, fs);
	if (ne->fs.s != NULL)
		ne->fs.s->references++; /* cmd_find_valid_state need session */

	new_item = cmdq_get_callback(notify_callback, ne);
	cmdq_append(NULL, new_item);
}

void
notify_input(struct window_pane *wp, struct evbuffer *input)
{
	struct client	*c;

	TAILQ_FOREACH(c, &clients, entry) {
		if (c->flags & CLIENT_CONTROL)
			control_notify_input(c, wp, input);
	}
}

void
notify_client(const char *name, struct client *c)
{
	struct cmd_find_state	fs;

	if (c->session != NULL)
		cmd_find_from_session(&fs, c->session);
	else
		cmd_find_current(&fs, NULL, CMD_FIND_QUIET);
	notify_add(name, &fs, c, NULL, NULL, NULL);
}

void
notify_session(const char *name, struct session *s)
{
	struct cmd_find_state	fs;

	if (session_alive(s))
		cmd_find_from_session(&fs, s);
	else
		cmd_find_current(&fs, NULL, CMD_FIND_QUIET);
	notify_add(name, &fs, NULL, s, NULL, NULL);
}

void
notify_winlink(const char *name, struct session *s, struct winlink *wl)
{
	struct cmd_find_state	fs;

	cmd_find_from_winlink(&fs, s, wl);
	notify_add(name, &fs, NULL, s, wl->window, NULL);
}

void
notify_session_window(const char *name, struct session *s, struct window *w)
{
	struct cmd_find_state	fs;

	cmd_find_from_session_window(&fs, s, w);
	notify_add(name, &fs, NULL, s, w, NULL);
}

void
notify_window(const char *name, struct window *w)
{
	struct cmd_find_state	fs;

	cmd_find_from_window(&fs, w);
	notify_add(name, &fs, NULL, NULL, w, NULL);
}

void
notify_pane(const char *name, struct window_pane *wp)
{
	struct cmd_find_state	fs;

	cmd_find_from_pane(&fs, wp);
	notify_add(name, &fs, NULL, NULL, NULL, wp);
}
@


1.19
log
@Use notifys for alerts too.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.18 2016/10/16 22:06:40 nicm Exp $ */
d79 2
@


1.18
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.17 2016/10/16 19:55:52 nicm Exp $ */
d116 2
a117 2
notify_add(const char *name, struct client *c, struct session *s,
    struct window *w, struct window_pane *wp)
d141 1
a141 11
	cmd_find_clear_state(&ne->fs, NULL, 0);
	if (s != NULL && w != NULL)
		cmd_find_from_session_window(&ne->fs, s, w);
	else if (w != NULL)
		cmd_find_from_window(&ne->fs, w);
	else if (s != NULL && session_alive(s))
		cmd_find_from_session(&ne->fs, s);
	else if (wp != NULL)
		cmd_find_from_pane(&ne->fs, wp);
	else
		cmd_find_current(&ne->fs, NULL, CMD_FIND_QUIET);
d163 7
a169 1
	notify_add(name, c, NULL, NULL, NULL);
d175 16
a190 1
	notify_add(name, NULL, s, NULL, NULL);
d196 4
a199 1
	notify_add(name, NULL, s, w, NULL);
d205 4
a208 1
	notify_add(name, NULL, NULL, w, NULL);
d214 4
a217 1
	notify_add(name, NULL, NULL, NULL, wp);
@


1.17
log
@Add hook_session and hook_window formats to get information on the
affected session or window when a hook fires. Enable session-created and
session-closed hooks now that that is available.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.16 2016/10/16 19:36:37 nicm Exp $ */
d23 1
a26 22
enum notify_type {
	NOTIFY_WINDOW_LAYOUT_CHANGED,
	NOTIFY_WINDOW_UNLINKED,
	NOTIFY_WINDOW_LINKED,
	NOTIFY_WINDOW_RENAMED,
	NOTIFY_ATTACHED_SESSION_CHANGED,
	NOTIFY_SESSION_RENAMED,
	NOTIFY_SESSION_CREATED,
	NOTIFY_SESSION_CLOSED
};

static const char *notify_hooks[] = {
	"window-layout-changed",
	NULL, /* "window-unlinked", */
	NULL, /* "window-linked", */
	"window-renamed",
	NULL, /* "attached-session-changed", */
	"session-renamed",
	"session-created",
	"session-closed"
};

d28 1
a28 1
	enum notify_type	 type;
d33 3
a40 1
	const char		*name;
a46 4
	name = notify_hooks[ne->type];
	if (name == NULL)
		return;

d48 2
a49 6
	if (s != NULL && w != NULL)
		cmd_find_from_session_window(&fs, s, w);
	else if (w != NULL)
		cmd_find_from_window(&fs, w);
	else if (s != NULL && session_alive(s))
		cmd_find_from_session(&fs, s);
d51 1
a51 3
		cmd_find_current(&fs, item, CMD_FIND_QUIET);
	if (cmd_find_empty_state(&fs) || !cmd_find_valid_state(&fs))
		return;
d53 1
a53 1
	hook = hooks_find(fs.s->hooks, name);
d56 1
a56 1
	log_debug("notify hook %s", name);
d59 1
a59 1
	cmdq_format(new_item, "hook", "%s", name);
d69 2
d80 1
a80 2
	switch (ne->type) {
	case NOTIFY_WINDOW_LAYOUT_CHANGED:
d82 1
a82 2
		break;
	case NOTIFY_WINDOW_UNLINKED:
d84 1
a84 2
		break;
	case NOTIFY_WINDOW_LINKED:
d86 1
a86 2
		break;
	case NOTIFY_WINDOW_RENAMED:
d88 3
a90 5
		break;
	case NOTIFY_ATTACHED_SESSION_CHANGED:
		control_notify_attached_session_changed(ne->client);
		break;
	case NOTIFY_SESSION_RENAMED:
d92 1
a92 2
		break;
	case NOTIFY_SESSION_CREATED:
d94 1
a94 2
		break;
	case NOTIFY_SESSION_CLOSED:
d96 1
a96 2
		break;
	}
d105 5
d116 2
a117 2
notify_add(enum notify_type type, struct client *c, struct session *s,
    struct window *w)
d123 2
a124 1
	ne->type = type;
d129 5
d141 14
d171 1
a171 19
notify_window_layout_changed(struct window *w)
{
	notify_add(NOTIFY_WINDOW_LAYOUT_CHANGED, NULL, NULL, w);
}

void
notify_window_unlinked(struct session *s, struct window *w)
{
	notify_add(NOTIFY_WINDOW_UNLINKED, NULL, s, w);
}

void
notify_window_linked(struct session *s, struct window *w)
{
	notify_add(NOTIFY_WINDOW_LINKED, NULL, s, w);
}

void
notify_window_renamed(struct window *w)
d173 1
a173 1
	notify_add(NOTIFY_WINDOW_RENAMED, NULL, NULL, w);
d177 1
a177 1
notify_attached_session_changed(struct client *c)
d179 1
a179 1
	notify_add(NOTIFY_ATTACHED_SESSION_CHANGED, c, NULL, NULL);
d183 1
a183 1
notify_session_renamed(struct session *s)
d185 1
a185 1
	notify_add(NOTIFY_SESSION_RENAMED, NULL, s, NULL);
d189 1
a189 1
notify_session_created(struct session *s)
d191 1
a191 1
	notify_add(NOTIFY_SESSION_CREATED, NULL, s, NULL);
d195 1
a195 1
notify_session_closed(struct session *s)
d197 1
a197 1
	notify_add(NOTIFY_SESSION_CLOSED, NULL, s, NULL);
@


1.16
log
@Provide a way for hooks to tag formats onto the commands they fire so
that the user can get at additional information - now used for the
"hook" format, more to come.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.15 2016/10/16 19:15:02 nicm Exp $ */
d44 2
a45 2
	NULL, /* "session-created", */
	NULL, /* "session-closed" */
d63 2
d71 6
a76 6
	if (ne->session != NULL && ne->window != NULL)
		cmd_find_from_session_window(&fs, ne->session, ne->window);
	else if (ne->window != NULL)
		cmd_find_from_window(&fs, ne->window);
	else if (ne->session != NULL)
		cmd_find_from_session(&fs, ne->session);
d89 10
@


1.15
log
@Notifys can go via the command queue instead of using their own queue.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.14 2016/10/16 19:04:05 nicm Exp $ */
d62 1
a62 1
	struct cmdq_item	*new_item, *loop;
d86 1
a86 4

	for (loop = new_item; loop != NULL; loop = loop->next)
		loop->hook = xstrdup(name);

@


1.14
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.13 2016/10/16 17:55:14 nicm Exp $ */
a53 2

	TAILQ_ENTRY(notify_entry) entry;
a54 5
TAILQ_HEAD(notify_queue, notify_entry);
static struct notify_queue notify_queue = TAILQ_HEAD_INITIALIZER(notify_queue);

static void	notify_add(enum notify_type, struct client *, struct session *,
		    struct window *);
d57 1
a57 1
notify_hook(struct notify_entry *ne)
d75 2
d90 45
a134 1
	cmdq_append(NULL, new_item);
d142 1
a148 1
	TAILQ_INSERT_TAIL(&notify_queue, ne, entry);
a155 1
}
d157 2
a158 43
void
notify_drain(void)
{
	struct notify_entry	*ne, *ne1;

	TAILQ_FOREACH_SAFE(ne, &notify_queue, entry, ne1) {
		switch (ne->type) {
		case NOTIFY_WINDOW_LAYOUT_CHANGED:
			control_notify_window_layout_changed(ne->window);
			break;
		case NOTIFY_WINDOW_UNLINKED:
			control_notify_window_unlinked(ne->session, ne->window);
			break;
		case NOTIFY_WINDOW_LINKED:
			control_notify_window_linked(ne->session, ne->window);
			break;
		case NOTIFY_WINDOW_RENAMED:
			control_notify_window_renamed(ne->window);
			break;
		case NOTIFY_ATTACHED_SESSION_CHANGED:
			control_notify_attached_session_changed(ne->client);
			break;
		case NOTIFY_SESSION_RENAMED:
			control_notify_session_renamed(ne->session);
			break;
		case NOTIFY_SESSION_CREATED:
			control_notify_session_created(ne->session);
			break;
		case NOTIFY_SESSION_CLOSED:
			control_notify_session_closed(ne->session);
			break;
		}
		TAILQ_REMOVE(&notify_queue, ne, entry);
		notify_hook(ne);

		if (ne->client != NULL)
			server_client_unref(ne->client);
		if (ne->session != NULL)
			session_unref(ne->session);
		if (ne->window != NULL)
			window_remove_ref(ne->window);
		free(ne);
	}
a175 1
	notify_drain();
a181 1
	notify_drain();
a187 1
	notify_drain();
a193 1
	notify_drain();
a199 1
	notify_drain();
a205 1
	notify_drain();
a211 1
	notify_drain();
a217 1
	notify_drain();
@


1.13
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.12 2016/10/15 00:12:58 nicm Exp $ */
d69 1
a69 1
	struct cmd_q		*new_cmdq, *loop;
d90 1
a90 1
	new_cmdq = cmdq_get_command(hook->cmdlist, &fs, NULL, CMD_Q_NOHOOKS);
d92 1
a92 1
	for (loop = new_cmdq; loop != NULL; loop = loop->next)
d95 1
a95 1
	cmdq_append(NULL, new_cmdq);
@


1.12
log
@Rename a function for consistency and some spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.11 2016/10/15 00:09:30 nicm Exp $ */
d69 1
a69 1
	struct cmd_q		*hooks_cmdq;
d90 1
a90 2
	hooks_cmdq = cmdq_new(NULL);
	hooks_cmdq->flags |= CMD_Q_NOHOOKS;
d92 2
a93 2
	cmd_find_copy_state(&hooks_cmdq->current, &fs);
	hooks_cmdq->parent = NULL;
d95 1
a95 2
	cmdq_run(hooks_cmdq, hook->cmdlist, NULL);
	cmdq_free(hooks_cmdq);
@


1.11
log
@Fire hooks on the simple notifys (window-renamed and session-renamed),
the complicated ones get no hooks for now (more to come).
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.10 2016/10/15 00:01:01 nicm Exp $ */
d150 1
a150 1
			control_notify_session_close(ne->session);
@


1.10
log
@Drain notifys once at the end of the server loop instead of doing it
from the end of every command queue (which could be nested).
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.9 2016/10/10 21:29:23 nicm Exp $ */
d37 11
d64 37
d153 2
a161 2

		TAILQ_REMOVE(&notify_queue, ne, entry);
@


1.9
log
@Loads more static, except for cmd-*.c and window-*.c.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.8 2015/06/05 18:18:32 nicm Exp $ */
a47 1
static int	notify_enabled = 1;
a48 1
static void	notify_drain(void);
a51 13
void
notify_enable(void)
{
	notify_enabled = 1;
	notify_drain();
}

void
notify_disable(void)
{
	notify_enabled = 0;
}

d73 1
a73 1
static void
a77 3
	if (!notify_enabled)
		return;

a121 7

	/*
	 * notify_input() is not queued and only does anything when
	 * notifications are enabled.
	 */
	if (!notify_enabled)
		return;
@


1.8
log
@Similarly, for sessions use a callback to free rather than checking
every loop.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.7 2015/06/05 18:06:30 nicm Exp $ */
d46 7
a52 6
TAILQ_HEAD(, notify_entry) notify_queue = TAILQ_HEAD_INITIALIZER(notify_queue);
int	notify_enabled = 1;

void	notify_drain(void);
void	notify_add(enum notify_type, struct client *, struct session *,
	    struct window *);
d67 1
a67 1
void
d88 1
a88 1
void
@


1.7
log
@Change deref to the more sensible unref, and add a couple I missed before.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.6 2015/04/24 23:17:11 nicm Exp $ */
d126 1
a126 1
			ne->session->references--;
@


1.6
log
@Convert clients list into a TAILQ.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.5 2012/09/25 07:41:22 nicm Exp $ */
d124 1
a124 1
			ne->client->references--;
@


1.5
log
@Add notification for input from a pane, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.4 2012/09/03 09:32:38 nicm Exp $ */
a138 1
	u_int		 i;
d147 2
a148 3
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
		if (c != NULL && (c->flags & CLIENT_CONTROL))
@


1.4
log
@Send notifications to control clients. Also don't redraw client when
suspended.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.3 2012/08/21 10:00:33 nicm Exp $ */
d132 20
@


1.3
log
@Fix up window reference counting and don't crash if the rename timer
fires while the window is dead but still referenced. Fixes problem
reported by Michael Scholz.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.2 2012/07/13 06:27:41 nicm Exp $ */
d98 1
a98 1
			/* control_notify_window_layout_changed(ne->window); */
d101 1
a101 1
			/* control_notify_window_unlinked(ne->session, ne->window); */
d104 1
a104 1
			/* control_notify_window_linked(ne->session, ne->window); */
d107 1
a107 1
			/* control_notify_window_renamed(ne->window); */
d110 1
a110 1
			/* control_notify_attached_session_changed(ne->client, ne->session); */
d113 1
a113 1
			/* control_notify_session_renamed(ne->session); */
d116 1
a116 1
			/* control_notify_session_created(ne->session); */
d119 1
a119 1
			/* control_notify_session_close(ne->session); */
@


1.2
log
@Add a queue of notifys and a way to turn them off and on (we do not want
notifys to happen during some commands). Based on code from George
Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: notify.c,v 1.1 2012/03/17 22:35:09 nicm Exp $ */
d128 2
a129 1
			ne->window->references--;
@


1.1
log
@Add notify hooks for various events, the functions are currently empty
stubs but will be filled in for control mode later. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d19 5
d26 108
d135 1
a135 1
notify_window_layout_changed(unused struct window *w)
d137 2
d142 1
a142 1
notify_window_unlinked(unused struct session *s, unused struct window *w)
d144 2
d149 1
a149 1
notify_window_linked(unused struct session *s, unused struct window *w)
d151 2
d156 1
a156 1
notify_window_renamed(unused struct window *w)
d158 2
d163 1
a163 1
notify_attached_session_changed(unused struct client *c)
d165 2
d170 1
a170 1
notify_session_renamed(unused struct session *s)
d172 2
d177 1
a177 1
notify_session_created(unused struct session *s)
d179 2
d184 1
a184 1
notify_session_closed(unused struct session *s)
d186 2
@

