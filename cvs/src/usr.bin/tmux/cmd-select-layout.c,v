head	1.33;
access;
symbols
	OPENBSD_6_2_BASE:1.33
	OPENBSD_6_1:1.32.0.4
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.25.0.4
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.33
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.32;
commitid	RXMp6wwG5a5Y82bo;

1.32
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.31;
commitid	pxm6osuE99zELpkU;

1.31
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.30;
commitid	S3IpyYTkmviA6lfM;

1.30
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.29;
commitid	TaZ3kOtGiWwKofka;

1.29
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.28;
commitid	P3qmSOx6KrDBsb0c;

1.28
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.27;
commitid	rE682EC14v4gpeFy;

1.27
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.26;
commitid	gsQkQsSyBCSmU9ax;

1.26
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.25;
commitid	uzMkp8Z4FE6WB6s6;

1.25
date	2015.04.28.10.43.13;	author nicm;	state Exp;
branches;
next	1.24;
commitid	S1rOdgmrftCOUlG6;

1.24
date	2014.10.20.22.34.31;	author nicm;	state Exp;
branches;
next	1.23;
commitid	JklWiQYmNCkeiNh8;

1.23
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.22;
commitid	Gq8hgMoG3t1Wy1Zv;

1.22
date	2014.04.17.07.55.43;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.10.10.12.00.22;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.01.30.17.00.17;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.01.17.00.11.22;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.04.01.13.27.18;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.04.01.13.18.38;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.01.30.20.57.02;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.01.04.02.03.41;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.29.03.30.13;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.25.20.28.13;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.28.06.48.44;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.21.17.57.29;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@/* $OpenBSD: cmd-select-layout.c,v 1.32 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "tmux.h"

/*
 * Switch window to selected layout.
 */

static enum cmd_retval	cmd_select_layout_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_select_layout_entry = {
	.name = "select-layout",
	.alias = "selectl",

	.args = { "nopt:", 0, 1 },
	.usage = "[-nop] " CMD_TARGET_WINDOW_USAGE " [layout-name]",

	.target = { 't', CMD_FIND_WINDOW, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_select_layout_exec
};

const struct cmd_entry cmd_next_layout_entry = {
	.name = "next-layout",
	.alias = "nextl",

	.args = { "t:", 0, 0 },
	.usage = CMD_TARGET_WINDOW_USAGE,

	.target = { 't', CMD_FIND_WINDOW, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_select_layout_exec
};

const struct cmd_entry cmd_previous_layout_entry = {
	.name = "previous-layout",
	.alias = "prevl",

	.args = { "t:", 0, 0 },
	.usage = CMD_TARGET_WINDOW_USAGE,

	.target = { 't', CMD_FIND_WINDOW, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_select_layout_exec
};

static enum cmd_retval
cmd_select_layout_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;
	struct winlink	*wl = item->target.wl;
	struct window	*w;
	const char	*layoutname;
	char		*oldlayout;
	int		 next, previous, layout;

	w = wl->window;
	server_unzoom_window(w);

	next = self->entry == &cmd_next_layout_entry;
	if (args_has(args, 'n'))
		next = 1;
	previous = self->entry == &cmd_previous_layout_entry;
	if (args_has(args, 'p'))
		previous = 1;

	oldlayout = w->old_layout;
	w->old_layout = layout_dump(w->layout_root);

	if (next || previous) {
		if (next)
			layout_set_next(w);
		else
			layout_set_previous(w);
		goto changed;
	}

	if (!args_has(args, 'o')) {
		if (args->argc == 0)
			layout = w->lastlayout;
		else
			layout = layout_set_lookup(args->argv[0]);
		if (layout != -1) {
			layout_set_select(w, layout);
			goto changed;
		}
	}

	if (args->argc != 0)
		layoutname = args->argv[0];
	else if (args_has(args, 'o'))
		layoutname = oldlayout;
	else
		layoutname = NULL;

	if (layoutname != NULL) {
		if (layout_parse(w, layoutname) == -1) {
			cmdq_error(item, "can't set layout: %s", layoutname);
			goto error;
		}
		goto changed;
	}

	free(oldlayout);
	return (CMD_RETURN_NORMAL);

changed:
	free(oldlayout);
	server_redraw_window(w);
	return (CMD_RETURN_NORMAL);

error:
	free(w->old_layout);
	w->old_layout = oldlayout;
	return (CMD_RETURN_ERROR);
}
@


1.32
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.31 2016/10/14 22:14:22 nicm Exp $ */
d39 1
a39 1
	.tflag = CMD_WINDOW,
d52 1
a52 1
	.tflag = CMD_WINDOW,
d65 1
a65 1
	.tflag = CMD_WINDOW,
d75 1
a75 1
	struct winlink	*wl = item->state.tflag.wl;
@


1.31
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.30 2016/10/10 21:51:39 nicm Exp $ */
d29 2
a30 1
static enum cmd_retval	 cmd_select_layout_exec(struct cmd *, struct cmd_q *);
d72 1
a72 1
cmd_select_layout_exec(struct cmd *self, struct cmd_q *cmdq)
d75 1
a75 1
	struct winlink	*wl = cmdq->state.tflag.wl;
d122 1
a122 1
			cmdq_error(cmdq, "can't set layout: %s", layoutname);
@


1.30
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.29 2016/01/19 15:59:12 nicm Exp $ */
d40 1
a40 1
	.flags = 0,
d53 1
a53 1
	.flags = 0,
d66 1
a66 1
	.flags = 0,
@


1.29
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.28 2015/12/14 00:31:54 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	 cmd_select_layout_exec(struct cmd *, struct cmd_q *);
d70 1
a70 1
enum cmd_retval
@


1.28
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.27 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.27
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.26 2015/12/13 14:32:38 nicm Exp $ */
d38 3
a40 1
	.flags = CMD_WINDOW_T,
d51 3
a53 1
	.flags = CMD_WINDOW_T,
d64 3
a66 1
	.flags = CMD_WINDOW_T,
@


1.26
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.25 2015/04/28 10:43:13 nicm Exp $ */
d32 8
a39 5
	"select-layout", "selectl",
	"nopt:", 0, 1,
	"[-nop] " CMD_TARGET_WINDOW_USAGE " [layout-name]",
	CMD_WINDOW_T,
	cmd_select_layout_exec
d43 8
a50 5
	"next-layout", "nextl",
	"t:", 0, 0,
	CMD_TARGET_WINDOW_USAGE,
	CMD_WINDOW_T,
	cmd_select_layout_exec
d54 8
a61 5
	"previous-layout", "prevl",
	"t:", 0, 0,
	CMD_TARGET_WINDOW_USAGE,
	CMD_WINDOW_T,
	cmd_select_layout_exec
@


1.25
log
@Add select-layout -o to undo the last layout change (apply the previously
set layout).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.24 2014/10/20 22:34:31 nicm Exp $ */
d35 1
a35 1
	0,
d43 1
a43 1
	0,
d51 1
a51 1
	0,
d59 1
a59 1
	struct winlink	*wl;
a64 2
	if ((wl = cmd_find_window(cmdq, args_get(args, 't'), NULL)) == NULL)
		return (CMD_RETURN_ERROR);
a65 1

@


1.24
log
@Missed a couple of cmd_entry struct members from previous.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.23 2014/10/20 22:29:25 nicm Exp $ */
d21 2
d33 2
a34 2
	"npt:", 0, 1,
	"[-np] " CMD_TARGET_WINDOW_USAGE " [layout-name]",
d60 1
d62 1
d67 3
a69 1
	server_unzoom_window(wl->window);
d72 1
a72 1
	if (args_has(self->args, 'n'))
d75 1
a75 1
	if (args_has(self->args, 'p'))
d78 3
d83 1
a83 1
			layout = layout_set_next(wl->window);
d85 2
a86 3
			layout = layout_set_previous(wl->window);
		server_redraw_window(wl->window);
		return (CMD_RETURN_NORMAL);
d89 9
a97 8
	if (args->argc == 0)
		layout = wl->window->lastlayout;
	else
		layout = layout_set_lookup(args->argv[0]);
	if (layout != -1) {
		layout = layout_set_select(wl->window, layout);
		server_redraw_window(wl->window);
		return (CMD_RETURN_NORMAL);
d100 1
a100 1
	if (args->argc != 0) {
d102 7
a108 1
		if (layout_parse(wl->window, layoutname) == -1) {
d110 1
a110 1
			return (CMD_RETURN_ERROR);
d112 1
a112 1
		server_redraw_window(wl->window);
d114 2
d117 10
@


1.23
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.22 2014/04/17 07:55:43 nicm Exp $ */
d33 1
@


1.22
log
@Remove the "info" message mechanism, this was only used for about five
mostly useless and annoying messages. Change those commands to silence
on success like all the others. Still accept the -q command line flag
and "quiet" server option for now.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.21 2013/10/10 12:00:22 nicm Exp $ */
a26 1
void		 cmd_select_layout_key_binding(struct cmd *, int);
a32 2
	0,
	cmd_select_layout_key_binding,
a40 1
	NULL,
a48 1
	NULL,
a50 25

void
cmd_select_layout_key_binding(struct cmd *self, int key)
{
	switch (key) {
	case '1' | KEYC_ESCAPE:
		self->args = args_create(1, "even-horizontal");
		break;
	case '2' | KEYC_ESCAPE:
		self->args = args_create(1, "even-vertical");
		break;
	case '3' | KEYC_ESCAPE:
		self->args = args_create(1, "main-horizontal");
		break;
	case '4' | KEYC_ESCAPE:
		self->args = args_create(1, "main-vertical");
		break;
	case '5' | KEYC_ESCAPE:
		self->args = args_create(1, "tiled");
		break;
	default:
		self->args = args_create(0);
		break;
	}
}
@


1.21
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.20 2013/03/24 09:57:59 nicm Exp $ */
a106 1
		cmdq_info(cmdq, "arranging in: %s", layout_set_name(layout));
a116 1
		cmdq_info(cmdq, "arranging in: %s", layout_set_name(layout));
a126 1
		cmdq_info(cmdq, "arranging in: %s", layoutname);
@


1.20
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.19 2013/03/24 09:54:10 nicm Exp $ */
a35 1
	NULL,
a44 1
	NULL,
a52 1
	NULL,
@


1.19
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.18 2013/01/30 17:00:17 nicm Exp $ */
d95 1
@


1.18
log
@Unused variable/type nit from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.17 2013/01/17 00:11:22 nicm Exp $ */
d28 1
a28 1
enum cmd_retval	 cmd_select_layout_exec(struct cmd *, struct cmd_ctx *);
d86 1
a86 1
cmd_select_layout_exec(struct cmd *self, struct cmd_ctx *ctx)
d93 1
a93 1
	if ((wl = cmd_find_window(ctx, args_get(args, 't'), NULL)) == NULL)
d109 1
a109 1
		ctx->info(ctx, "arranging in: %s", layout_set_name(layout));
d120 1
a120 1
		ctx->info(ctx, "arranging in: %s", layout_set_name(layout));
d127 1
a127 1
			ctx->error(ctx, "can't set layout: %s", layoutname);
d131 1
a131 1
		ctx->info(ctx, "arranging in: %s", layoutname);
@


1.17
log
@Remove the layout undo/redo code which never really worked.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.16 2012/07/11 07:10:15 nicm Exp $ */
a89 1
	struct window	*w;
a94 1
	w = wl->window;
@


1.16
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.15 2012/04/01 13:27:18 nicm Exp $ */
d32 2
a33 2
	"nprut:", 0, 1,
	"[-npUu] " CMD_TARGET_WINDOW_USAGE " [layout-name]",
a78 8
	case 'u':
		self->args = args_create(0);
		args_set(self->args, 'u', NULL);
		break;
	case 'U':
		self->args = args_create(0);
		args_set(self->args, 'U', NULL);
		break;
a104 15
	layout_list_add(w);
	if (args_has(self->args, 'U')) {
		if ((layoutname = layout_list_redo(w)) == NULL) {
			ctx->info(ctx, "no more layout history");
			return (CMD_RETURN_ERROR);
		}
		goto set_layout;
	} else if (args_has(self->args, 'u')) {
		if ((layoutname = layout_list_undo(w)) == NULL) {
			ctx->info(ctx, "no more layout history");
			return (CMD_RETURN_ERROR);
		}
		goto set_layout;
	}

d126 8
a133 8
	if (args->argc == 0)
		return (CMD_RETURN_NORMAL);
	layoutname = args->argv[0];

set_layout:
	if (layout_parse(wl->window, layoutname) == -1) {
		ctx->error(ctx, "can't set layout: %s", layoutname);
		return (CMD_RETURN_ERROR);
a134 2
	server_redraw_window(wl->window);
	ctx->info(ctx, "arranging in: %s", layoutname);
@


1.15
log
@Turn some errors down to info.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.14 2012/04/01 13:18:38 nicm Exp $ */
d27 2
a28 2
void	cmd_select_layout_key_binding(struct cmd *, int);
int	cmd_select_layout_exec(struct cmd *, struct cmd_ctx *);
d93 1
a93 1
int
d103 1
a103 1
		return (-1);
d117 1
a117 1
			return (-1);
d123 1
a123 1
			return (-1);
d135 1
a135 1
		return (0);
d146 1
a146 1
		return (0);
d150 1
a150 1
		return (0);
d156 1
a156 1
		return (-1);
d160 1
a160 1
	return (0);
@


1.14
log
@Add a layout history which can be stepped through with select-layout -u
and -U commands (bound to 'u' and 'U' by default).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.13 2012/01/30 20:57:02 nicm Exp $ */
d116 1
a116 1
			ctx->error(ctx, "no more layout history");
d122 1
a122 1
			ctx->error(ctx, "no more layout history");
@


1.13
log
@Add pane id to each pane in layout description (while still accepting
the old form). Based on diff from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.12 2011/01/04 02:03:41 nicm Exp $ */
d32 2
a33 2
	"npt:", 0, 1,
	"[-np] " CMD_TARGET_WINDOW_USAGE " [layout-name]",
d79 8
d98 1
d104 1
d113 15
d149 1
a149 8
	if (args->argc != 0) {
		layoutname = args->argv[0];
		if (layout_parse(wl->window, layoutname) == -1) {
			ctx->error(ctx, "can't set layout: %s", layoutname);
			return (-1);
		}
		server_redraw_window(wl->window);
		ctx->info(ctx, "arranging in: %s", layoutname);
d151 6
d158 2
a159 1

@


1.12
log
@Now that parsing is common, merge some of the small, related commands
together to use the same code.

Also add some arguments (such as -n and -p) to some commands to match
existing commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.11 2011/01/04 00:42:47 nicm Exp $ */
d108 1
d119 1
d130 1
@


1.11
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.10 2010/06/29 03:30:13 nicm Exp $ */
d32 2
a33 2
	"t:", 0, 1,
	CMD_TARGET_WINDOW_USAGE " [layout-name]",
d40 20
d91 1
a91 1
	int		 layout;
d95 16
@


1.10
log
@Custom layouts. list-windows command displays the layout as a string (such as
"bb62,159x48,0,0{79x48,0,0,79x48,80,0}") and it can be applied to another
window (with the same number of panes or fewer) using select-layout.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.9 2010/04/25 20:28:13 nicm Exp $ */
d27 1
a27 1
void	cmd_select_layout_init(struct cmd *, int);
d32 1
d34 4
a37 6
	CMD_ARG01, "",
	cmd_select_layout_init,
	cmd_target_parse,
	cmd_select_layout_exec,
	cmd_target_free,
	cmd_target_print
d41 1
a41 1
cmd_select_layout_init(struct cmd *self, int key)
a42 5
	struct cmd_target_data	*data;

	cmd_target_init(self, key);
	data = self->data;

d44 5
a48 2
	case ('1' | KEYC_ESCAPE):
		data->arg = xstrdup("even-horizontal");
d50 2
a51 2
	case ('2' | KEYC_ESCAPE):
		data->arg = xstrdup("even-vertical");
d53 2
a54 2
	case ('3' | KEYC_ESCAPE):
		data->arg = xstrdup("main-horizontal");
d56 2
a57 2
	case ('4' | KEYC_ESCAPE):
		data->arg = xstrdup("main-vertical");
d59 2
a60 2
	case ('5' | KEYC_ESCAPE):
		data->arg = xstrdup("tiled");
d68 4
a71 3
	struct cmd_target_data	*data = self->data;
	struct winlink		*wl;
	int			 layout;
d73 1
a73 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
d76 1
a76 1
	if (data->arg == NULL) {
d78 3
a80 3
		if (layout == -1)
			return (0);
	} else if ((layout = layout_set_lookup(data->arg)) != -1) {
d83 7
a89 3
	} else {
		if (layout_parse(wl->window, data->arg) == -1) {
			ctx->error(ctx, "can't set layout: %s", data->arg);
d92 2
a93 1
		ctx->info(ctx, "arranging in: %s", data->arg);
@


1.9
log
@Add a tiled layout, originally from Liam Bedford a while ago, fixed up
by me.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.8 2009/12/03 22:50:10 nicm Exp $ */
d82 9
a90 3
	} else if ((layout = layout_set_lookup(data->arg)) == -1) {
		ctx->error(ctx, "unknown layout or ambiguous: %s", data->arg);
		return (-1);
a91 3

	layout = layout_set_select(wl->window, layout);
	ctx->info(ctx, "arranging in: %s", layout_set_name(layout));
@


1.8
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.7 2009/11/13 19:53:29 nicm Exp $ */
d61 3
@


1.7
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.6 2009/07/28 06:48:44 nicm Exp $ */
d55 1
a55 1
    		break;
d83 1
a83 1
	
@


1.6
log
@If select-layout is not given an argument, repply the last layout used in the
window, if any.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.5 2009/07/26 12:58:44 nicm Exp $ */
d33 1
a33 1
	CMD_ARG01, 0,
@


1.5
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.4 2009/07/21 17:57:29 nicm Exp $ */
d32 2
a33 2
	CMD_TARGET_WINDOW_USAGE " layout-name",
	CMD_ARG1, 0,
d75 9
a83 5
	if ((layout = layout_set_lookup(data->arg)) == -1) {
 		ctx->error(ctx, "unknown or ambiguous layout: %s", data->arg);
 		return (-1);
 	}

@


1.4
log
@Tidy up keys: use an enum for the key codes, and remove the macros which just
wrap flag sets/clears/tests.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.3 2009/07/19 13:21:40 nicm Exp $ */
a36 2
	cmd_target_send,
	cmd_target_recv,
@


1.3
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d52 1
a52 1
	case KEYC_ADDESC('1'):
d55 1
a55 1
	case KEYC_ADDESC('2'):
d57 2
a58 2
		break;
	case KEYC_ADDESC('3'):
d61 1
a61 1
	case KEYC_ADDESC('4'):
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-layout.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a51 3
	case KEYC_ADDESC('0'):
		data->arg = xstrdup("manual-vertical");
		break;
d58 5
a62 2
	case KEYC_ADDESC('9'):
		data->arg = xstrdup("active-only");
d77 4
a80 4
	if ((layout = layout_lookup(data->arg)) == -1) {
		ctx->error(ctx, "unknown or ambiguous layout: %s", data->arg);
		return (-1);
	}
d82 2
a83 2
	if (layout_select(wl->window, layout) == 0)
		ctx->info(ctx, "layout now: %s", layout_name(wl->window));
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d33 1
a33 1
	CMD_ARG1,
@

