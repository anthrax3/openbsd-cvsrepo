head	1.35;
access;
symbols
	OPENBSD_6_2_BASE:1.35
	OPENBSD_6_1:1.33.0.4
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.28.0.4
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.25.0.4
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.35
date	2017.05.17.15.20.23;	author nicm;	state Exp;
branches;
next	1.34;
commitid	cve8y47YIHr8y6V1;

1.34
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.33;
commitid	RXMp6wwG5a5Y82bo;

1.33
date	2017.01.15.22.00.56;	author nicm;	state Exp;
branches;
next	1.32;
commitid	P8Zuj7wnJMd8B8vz;

1.32
date	2017.01.06.11.57.03;	author nicm;	state Exp;
branches;
next	1.31;
commitid	m6HBAjiRCa66sywZ;

1.31
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.30;
commitid	pxm6osuE99zELpkU;

1.30
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.29;
commitid	1xIYFpLYkPIXNEvU;

1.29
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.28;
commitid	TaZ3kOtGiWwKofka;

1.28
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.27;
commitid	rE682EC14v4gpeFy;

1.27
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.26;
commitid	gsQkQsSyBCSmU9ax;

1.26
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.25;
commitid	uzMkp8Z4FE6WB6s6;

1.25
date	2015.06.05.18.06.30;	author nicm;	state Exp;
branches;
next	1.24;
commitid	31HWw6xUnTEvtfY4;

1.24
date	2015.06.05.18.01.12;	author nicm;	state Exp;
branches;
next	1.23;
commitid	38CNdOauYnpJlZqC;

1.23
date	2015.04.19.21.34.21;	author nicm;	state Exp;
branches;
next	1.22;
commitid	wug6ctIOfhVMeWQp;

1.22
date	2014.10.20.23.27.14;	author nicm;	state Exp;
branches;
next	1.21;
commitid	BAMrPS0saBiCc8HD;

1.21
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.20;
commitid	Gq8hgMoG3t1Wy1Zv;

1.20
date	2013.10.10.12.00.19;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.24.09.27.19;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.22.15.54.29;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.22.15.50.42;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.22.15.49.55;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.07.08.06.37.57;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.02.21.05.44;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.23.16.45.00;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.13.23.44.18;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.21.18.52.03;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.17.06.13.27;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.15.17.39.00;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Tidy command prompt callbacks and pass in the client.
@
text
@/* $OpenBSD: cmd-confirm-before.c,v 1.34 2017/04/22 10:22:39 nicm Exp $ */

/*
 * Copyright (c) 2009 Tiago Cunha <me@@tiagocunha.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Asks for confirmation before executing a command.
 */

static enum cmd_retval	cmd_confirm_before_exec(struct cmd *,
			    struct cmdq_item *);

static int	cmd_confirm_before_callback(struct client *, void *,
		    const char *, int);
static void	cmd_confirm_before_free(void *);

const struct cmd_entry cmd_confirm_before_entry = {
	.name = "confirm-before",
	.alias = "confirm",

	.args = { "p:t:", 1, 1 },
	.usage = "[-p prompt] " CMD_TARGET_CLIENT_USAGE " command",

	.flags = 0,
	.exec = cmd_confirm_before_exec
};

struct cmd_confirm_before_data {
	char	*cmd;
};

static enum cmd_retval
cmd_confirm_before_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args			*args = self->args;
	struct cmd_confirm_before_data	*cdata;
	struct client			*c;
	char				*cmd, *copy, *new_prompt, *ptr;
	const char			*prompt;

	if ((c = cmd_find_client(item, args_get(args, 't'), 0)) == NULL)
		return (CMD_RETURN_ERROR);

	if ((prompt = args_get(args, 'p')) != NULL)
		xasprintf(&new_prompt, "%s ", prompt);
	else {
		ptr = copy = xstrdup(args->argv[0]);
		cmd = strsep(&ptr, " \t");
		xasprintf(&new_prompt, "Confirm '%s'? (y/n) ", cmd);
		free(copy);
	}

	cdata = xmalloc(sizeof *cdata);
	cdata->cmd = xstrdup(args->argv[0]);

	status_prompt_set(c, new_prompt, NULL,
	    cmd_confirm_before_callback, cmd_confirm_before_free, cdata,
	    PROMPT_SINGLE);

	free(new_prompt);
	return (CMD_RETURN_NORMAL);
}

static enum cmd_retval
cmd_confirm_before_error(struct cmdq_item *item, void *data)
{
	char	*error = data;

	cmdq_error(item, "%s", error);
	free(error);

	return (CMD_RETURN_NORMAL);
}

static int
cmd_confirm_before_callback(struct client *c, void *data, const char *s,
    __unused int done)
{
	struct cmd_confirm_before_data	*cdata = data;
	struct cmd_list			*cmdlist;
	struct cmdq_item		*new_item;
	char				*cause;

	if (c->flags & CLIENT_DEAD)
		return (0);

	if (s == NULL || *s == '\0')
		return (0);
	if (tolower((u_char) s[0]) != 'y' || s[1] != '\0')
		return (0);

	cmdlist = cmd_string_parse(cdata->cmd, NULL, 0, &cause);
	if (cmdlist == NULL) {
		if (cause != NULL) {
			new_item = cmdq_get_callback(cmd_confirm_before_error,
			    cause);
		} else
			new_item = NULL;
	} else {
		new_item = cmdq_get_command(cmdlist, NULL, NULL, 0);
		cmd_list_free(cmdlist);
	}

	if (new_item != NULL)
		cmdq_append(c, new_item);

	return (0);
}

static void
cmd_confirm_before_free(void *data)
{
	struct cmd_confirm_before_data	*cdata = data;

	free(cdata->cmd);
	free(cdata);
}
@


1.34
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.33 2017/01/15 22:00:56 nicm Exp $ */
d34 2
a35 1
static int	cmd_confirm_before_callback(void *, const char *, int);
d50 1
a50 2
	char		*cmd;
	struct client	*client;
a76 3
	cdata->client = c;
	cdata->client->references++;

d97 2
a98 1
cmd_confirm_before_callback(void *data, const char *s, __unused int done)
a100 1
	struct client			*c = cdata->client;
a134 3
	struct client			*c = cdata->client;

	server_client_unref(c);
@


1.33
log
@It is silly for cmd_list_parse to return an integer error when it could
just return NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.32 2017/01/06 11:57:03 nicm Exp $ */
a43 2
	.tflag = CMD_CLIENT,

d58 1
a58 1
	struct client			*c = item->state.c;
d61 3
@


1.32
log
@Incremental search in copy mode (on for emacs keys by default) - much
the same as normal searching but updates the cursor position and marked
search terms as you type. C-r and C-s in the prompt repeat the search,
once finished searching (with Enter), N and n work as before.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.31 2016/10/16 19:04:05 nicm Exp $ */
d115 2
a116 1
	if (cmd_string_parse(cdata->cmd, &cmdlist, NULL, 0, &cause) != 0) {
@


1.31
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.30 2016/10/16 17:55:14 nicm Exp $ */
d34 1
a34 1
static int	cmd_confirm_before_callback(void *, const char *);
d99 1
a99 1
cmd_confirm_before_callback(void *data, const char *s)
@


1.30
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.29 2016/10/10 21:51:39 nicm Exp $ */
d31 2
a32 1
static enum cmd_retval	 cmd_confirm_before_exec(struct cmd *, struct cmd_q *);
d34 2
a35 2
static int		 cmd_confirm_before_callback(void *, const char *);
static void		 cmd_confirm_before_free(void *);
d56 1
a56 1
cmd_confirm_before_exec(struct cmd *self, struct cmd_q *cmdq)
d60 1
a60 1
	struct client			*c = cmdq->state.c;
d88 1
a88 1
cmd_confirm_before_error(struct cmd_q *cmdq, void *data)
d92 1
a92 1
	cmdq_error(cmdq, "%s", error);
d104 1
a104 1
	struct cmd_q			*new_cmdq;
d117 1
a117 1
			new_cmdq = cmdq_get_callback(cmd_confirm_before_error,
d120 1
a120 1
			new_cmdq = NULL;
d122 1
a122 1
		new_cmdq = cmdq_get_command(cmdlist, NULL, NULL, 0);
d126 2
a127 2
	if (new_cmdq != NULL)
		cmdq_append(c, new_cmdq);
@


1.29
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.28 2015/12/14 00:31:54 nicm Exp $ */
d86 11
d103 1
d116 7
a122 4
			cmdq_error(c->cmdq, "%s", cause);
			free(cause);
		}
		return (0);
d125 2
a126 2
	cmdq_run(c->cmdq, cmdlist, NULL);
	cmd_list_free(cmdlist);
@


1.28
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.27 2015/12/13 21:53:57 nicm Exp $ */
d31 1
a31 1
enum cmd_retval	 cmd_confirm_before_exec(struct cmd *, struct cmd_q *);
d33 2
a34 2
int		 cmd_confirm_before_callback(void *, const char *);
void		 cmd_confirm_before_free(void *);
d54 1
a54 1
enum cmd_retval
d86 1
a86 1
int
d116 1
a116 1
void
@


1.27
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.26 2015/12/13 14:32:38 nicm Exp $ */
d43 3
a45 1
	.flags = CMD_CLIENT_T,
@


1.26
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.25 2015/06/05 18:06:30 nicm Exp $ */
d37 8
a44 5
	"confirm-before", "confirm",
	"p:t:", 1, 1,
	"[-p prompt] " CMD_TARGET_CLIENT_USAGE " command",
	CMD_CLIENT_T,
	cmd_confirm_before_exec
@


1.25
log
@Change deref to the more sensible unref, and add a couple I missed before.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.24 2015/06/05 18:01:12 nicm Exp $ */
d40 1
a40 1
	0,
d54 1
a54 1
	struct client			*c;
a56 3

	if ((c = cmd_find_client(cmdq, args_get(args, 't'), 0)) == NULL)
		return (CMD_RETURN_ERROR);
@


1.24
log
@Instead of putting dead clients on a list and checking it every loop,
use event_once to queue a callback to deal with them. Also dead clients
with references would never actually be freed because the wrap-up
functions (the callback for stdin, or status_prompt_clear) would never
be called. So call them in server_client_lost.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.23 2015/04/19 21:34:21 nicm Exp $ */
d120 1
a120 1
	server_client_deref(c);
@


1.23
log
@Rewrite of tmux mouse support which was a mess. Instead of having
options for "mouse-this" and "mouse-that", mouse events may be bound as
keys and there is one option "mouse" that turns on mouse support
entirely (set -g mouse on).

See the new MOUSE SUPPORT section of the man page for description of the
key names and new flags (-t= to specify the pane or window under mouse
as a target, and send-keys -M to pass through a mouse event).

The default builtin bindings for the mouse are:

    bind -n   MouseDown1Pane select-pane -t=; send-keys -M
    bind -n MouseDown1Status select-window -t=
    bind -n   MouseDrag1Pane copy-mode -M
    bind -n MouseDrag1Border resize-pane -M

To get the effect of turning mode-mouse off, do:

    unbind -n MouseDrag1Pane
    unbind -temacs-copy MouseDrag1Pane

The old mouse options are now gone, set-option -q may be used to
suppress warnings if mixing configuration files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.22 2014/10/20 23:27:14 nicm Exp $ */
d120 1
a120 1
	c->references--;
@


1.22
log
@Tidy up some includes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.21 2014/10/20 22:29:25 nicm Exp $ */
d108 1
a108 1
	cmdq_run(c->cmdq, cmdlist);
@


1.21
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.20 2013/10/10 12:00:19 nicm Exp $ */
d18 2
@


1.20
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.19 2013/03/24 09:54:10 nicm Exp $ */
a28 1
void		 cmd_confirm_before_key_binding(struct cmd *, int);
a38 1
	cmd_confirm_before_key_binding,
a45 18

void
cmd_confirm_before_key_binding(struct cmd *self, int key)
{
	switch (key) {
	case '&':
		self->args = args_create(1, "kill-window");
		args_set(self->args, 'p', "kill-window #W? (y/n)");
		break;
	case 'x':
		self->args = args_create(1, "kill-pane");
		args_set(self->args, 'p', "kill-pane #P? (y/n)");
		break;
	default:
		self->args = args_create(0);
		break;
	}
}
@


1.19
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.18 2013/03/24 09:27:19 nicm Exp $ */
a40 1
	NULL,
@


1.18
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.17 2013/03/22 15:54:29 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_confirm_before_exec(struct cmd *, struct cmd_ctx *);
a45 1
	struct client	*c;
d47 1
d69 1
a69 1
cmd_confirm_before_exec(struct cmd *self, struct cmd_ctx *ctx)
d77 1
a77 6
	if (ctx->curclient == NULL) {
		ctx->error(ctx, "must be run interactively");
		return (CMD_RETURN_ERROR);
	}

	if ((c = cmd_find_client(ctx, args_get(args, 't'), 0)) == NULL)
d91 5
a95 2
	cdata->c = c;
	status_prompt_set(cdata->c, new_prompt, NULL,
d100 1
a100 1
	return (CMD_RETURN_YIELD);
d107 1
a107 1
	struct client			*c = cdata->c;
a108 1
	struct cmd_ctx	 	 	*ctx;
d111 3
d119 1
a119 1
	if (cmd_string_parse(cdata->cmd, &cmdlist, &cause) != 0) {
d121 1
a121 2
			*cause = toupper((u_char) *cause);
			status_message_set(c, "%s", cause);
d127 1
a127 6
	ctx = cmd_get_ctx(NULL, c);
	ctx->error = key_bindings_error;
	ctx->print = key_bindings_print;
	ctx->info = key_bindings_info;

	cmd_list_exec(cmdlist, ctx);
a128 1
	cmd_free_ctx(ctx);
d137 3
@


1.17
log
@Need to set clients in context before changing their reference count.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.16 2013/03/22 15:50:42 nicm Exp $ */
d82 1
a82 1
	if ((c = cmd_find_client(ctx, args_get(args, 't'))) == NULL)
@


1.16
log
@Remove unnecessary initializers of cmd_ctx.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.15 2013/03/22 15:49:55 nicm Exp $ */
d128 1
a128 2
	ctx = cmd_get_ctx();
	ctx->curclient = c;
@


1.15
log
@Add functions to allocate and free command contexts rather than doing it
all on the stack.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.14 2012/07/11 07:10:15 nicm Exp $ */
a128 1
	ctx->msgdata = NULL;
a129 2
	ctx->cmdclient = NULL;

@


1.14
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.13 2012/07/10 11:53:01 nicm Exp $ */
d111 1
a111 1
	struct cmd_ctx	 	 	 ctx;
d128 8
a135 2
	ctx.msgdata = NULL;
	ctx.curclient = c;
d137 1
a137 7
	ctx.error = key_bindings_error;
	ctx.print = key_bindings_print;
	ctx.info = key_bindings_info;

	ctx.cmdclient = NULL;

	cmd_list_exec(cmdlist, &ctx);
d139 1
@


1.13
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.12 2011/07/08 06:37:57 nicm Exp $ */
d29 2
a30 2
void	cmd_confirm_before_key_binding(struct cmd *, int);
int	cmd_confirm_before_exec(struct cmd *, struct cmd_ctx *);
d32 2
a33 2
int	cmd_confirm_before_callback(void *, const char *);
void	cmd_confirm_before_free(void *);
d68 1
a68 1
int
d79 1
a79 1
		return (-1);
d83 1
a83 1
		return (-1);
d102 1
a102 1
	return (1);
@


1.12
log
@Make confirm-before prompt customizable with -p option like
command-prompt. Also move responsibility for calling status_replace into
status_prompt_{set,update} and add #W and #P to the default kill-window
and kill-pane prompts. By Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.11 2011/07/02 21:05:44 nicm Exp $ */
d20 1
d91 1
a91 1
		xfree(copy);
d101 1
a101 1
	xfree(new_prompt);
d123 1
a123 1
			xfree(cause);
d148 2
a149 3
	if (cdata->cmd != NULL)
		xfree(cdata->cmd);
	xfree(cdata);
@


1.11
log
@Allow the initial context on prompts to be set with the new -I option to
command-prompt. From Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.10 2011/01/04 00:42:46 nicm Exp $ */
d36 2
a37 2
	"t:", 1, 1,
	CMD_TARGET_CLIENT_USAGE " command",
d55 1
d59 1
d73 2
a74 1
	char				*buf, *cmd, *ptr;
d84 8
a91 5
	ptr = xstrdup(args->argv[0]);
	if ((cmd = strtok(ptr, " \t")) == NULL)
		cmd = ptr;
	xasprintf(&buf, "Confirm '%s'? (y/n) ", cmd);
	xfree(ptr);
d96 3
a98 2
	status_prompt_set(cdata->c, buf, NULL, cmd_confirm_before_callback,
	    cmd_confirm_before_free, cdata, PROMPT_SINGLE);
d100 1
a100 1
	xfree(buf);
@


1.10
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.9 2009/11/13 19:53:29 nicm Exp $ */
d90 2
a91 3
	status_prompt_set(cdata->c, buf,
	    cmd_confirm_before_callback, cmd_confirm_before_free, cdata,
	    PROMPT_SINGLE);
@


1.9
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.8 2009/08/23 16:45:00 nicm Exp $ */
d28 1
a29 1
void	cmd_confirm_before_init(struct cmd *, int);
d36 1
d38 4
a41 6
	CMD_ARG1, "",
	cmd_confirm_before_init,
	cmd_target_parse,
	cmd_confirm_before_exec,
	cmd_target_free,
	cmd_target_print
d50 1
a50 1
cmd_confirm_before_init(struct cmd *self, int key)
a51 5
	struct cmd_target_data	*data;

	cmd_target_init(self, key);
	data = self->data;

d54 1
a54 1
		data->arg = xstrdup("kill-window");
d57 4
a60 1
		data->arg = xstrdup("kill-pane");
d68 1
a68 1
	struct cmd_target_data		*data = self->data;
d78 1
a78 1
	if ((c = cmd_find_client(ctx, data->target)) == NULL)
d81 1
a81 1
	ptr = xstrdup(data->arg);
d88 1
a88 1
	cdata->cmd = xstrdup(data->arg);
@


1.8
log
@The cursession member in struct cmd_ctx is always either curclient->session or
NULL when curclient is also NULL, so just eliminate it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.7 2009/08/13 23:44:18 nicm Exp $ */
d37 1
a37 1
	CMD_ARG1, 0,
@


1.7
log
@Switch the prompt code to return an empty string when the user enters no
response and reserve NULL for an explicit cancel. Change all callbacks to treat
them the same so no functional change.

Also add cancel key bindings to emacs mode which were missing.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.6 2009/07/26 12:58:44 nicm Exp $ */
a124 1
	ctx.cursession = c->session;
@


1.6
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.5 2009/07/21 18:52:03 nicm Exp $ */
d110 3
a112 1
	if (s == NULL || tolower((u_char) s[0]) != 'y' || s[1] != '\0')
@


1.5
log
@Nix a few unused attributes on arguments which are no longer unused.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.4 2009/07/17 06:13:27 nicm Exp $ */
a40 2
	cmd_target_send,
	cmd_target_recv,
@


1.4
log
@Memory could be leaked if a second prompt or message appeared while another was
still present, so add a separate prompt free callback and make the _clear
function responsible for calling it if necessary (rather than the individual
prompt callbacks). Also make both messages and prompts clear any existing when
a new is set.

In addition, the screen could be modified while the prompt is there, restore
the redraw-entire-screen behaviour on prompt clear; add a comment as a
reminder.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.3 2009/07/15 17:39:00 nicm Exp $ */
d71 1
a71 1
cmd_confirm_before_exec(unused struct cmd *self, struct cmd_ctx *ctx)
@


1.3
log
@Make status_message_set a variadic printf-like function. No functional change -
helpful for a couple of things coming soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d32 1
a32 5

struct cmd_confirm_before_data {
	struct client	*c;
	char		*cmd;
};
d47 5
d95 3
a97 2
	status_prompt_set(
	    cdata->c, buf, cmd_confirm_before_callback, cdata, PROMPT_SINGLE);
d113 1
a113 1
		goto out;
d121 1
a121 1
		goto out;
d137 8
a144 1
out:
a147 2

	return (0);
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-confirm-before.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d116 1
a116 1
			status_message_set(c, cause);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d41 1
a41 1
	CMD_ARG1,
@

