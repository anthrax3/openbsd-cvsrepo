head	1.31;
access;
symbols
	OPENBSD_6_1:1.31.0.2
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.22.0.4
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.31
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.30;
commitid	pxm6osuE99zELpkU;

1.30
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.29;
commitid	TaZ3kOtGiWwKofka;

1.29
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.28;
commitid	P3qmSOx6KrDBsb0c;

1.28
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.27;
commitid	rE682EC14v4gpeFy;

1.27
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.26;
commitid	gsQkQsSyBCSmU9ax;

1.26
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.25;
commitid	uzMkp8Z4FE6WB6s6;

1.25
date	2015.11.12.11.09.11;	author nicm;	state Exp;
branches;
next	1.24;
commitid	tEN3cHiOuN3KscbT;

1.24
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.23;
commitid	89xhQafU35Q5MQVC;

1.23
date	2015.08.29.09.25.00;	author nicm;	state Exp;
branches;
next	1.22;
commitid	UXoQGD7QOZAJI1XC;

1.22
date	2015.04.27.16.25.57;	author nicm;	state Exp;
branches;
next	1.21;
commitid	0WBWxxZyxaAFVhmn;

1.21
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.20;
commitid	b1G1TVWY7l4KyoY6;

1.20
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.19;
commitid	RV1NOSXD1mUR8LDP;

1.19
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.18;
commitid	Gq8hgMoG3t1Wy1Zv;

1.18
date	2014.05.13.07.34.35;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.24.09.14.43;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.02.18.12.18;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.10.10.12.00.18;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.21.16.09.59;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.21.16.09.17;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.21.16.08.24;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.25.14.27.25;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.25.14.08.55;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.01.00.44.24;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.30.23.16.18;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.21.21.44.09;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@/* $OpenBSD: cmd-choose-buffer.c,v 1.30 2016/10/10 21:51:39 nicm Exp $ */

/*
 * Copyright (c) 2010 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <stdlib.h>

#include "tmux.h"

/*
 * Enter choice mode to choose a buffer.
 */

#define CHOOSE_BUFFER_TEMPLATE						\
	"#{buffer_name}: #{buffer_size} bytes: #{buffer_sample}"

static enum cmd_retval	cmd_choose_buffer_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_choose_buffer_entry = {
	.name = "choose-buffer",
	.alias = NULL,

	.args = { "F:t:", 0, 1 },
	.usage = CMD_TARGET_WINDOW_USAGE " [-F format] [template]",

	.tflag = CMD_WINDOW,

	.flags = 0,
	.exec = cmd_choose_buffer_exec
};

static enum cmd_retval
cmd_choose_buffer_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args			*args = self->args;
	struct client			*c = item->state.c;
	struct winlink			*wl = item->state.tflag.wl;
	struct window_choose_data	*cdata;
	struct paste_buffer		*pb;
	char				*action, *action_data;
	const char			*template;
	u_int				 idx;

	if (c == NULL) {
		cmdq_error(item, "no client available");
		return (CMD_RETURN_ERROR);
	}

	if ((template = args_get(args, 'F')) == NULL)
		template = CHOOSE_BUFFER_TEMPLATE;

	if (paste_get_top(NULL) == NULL)
		return (CMD_RETURN_NORMAL);

	if (window_pane_set_mode(wl->window->active, &window_choose_mode) != 0)
		return (CMD_RETURN_NORMAL);

	if (args->argc != 0)
		action = xstrdup(args->argv[0]);
	else
		action = xstrdup("paste-buffer -b '%%'");

	idx = 0;
	pb = NULL;
	while ((pb = paste_walk(pb)) != NULL) {
		cdata = window_choose_data_create(TREE_OTHER, c, c->session);
		cdata->idx = idx;

		cdata->ft_template = xstrdup(template);
		format_defaults_paste_buffer(cdata->ft, pb);

		xasprintf(&action_data, "%s", paste_buffer_name(pb));
		cdata->command = cmd_template_replace(action, action_data, 1);
		free(action_data);

		window_choose_add(wl->window->active, cdata);
		idx++;
	}
	free(action);

	window_choose_ready(wl->window->active, 0, NULL);

	return (CMD_RETURN_NORMAL);
}
@


1.30
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.29 2016/01/19 15:59:12 nicm Exp $ */
d33 2
a34 1
static enum cmd_retval	 cmd_choose_buffer_exec(struct cmd *, struct cmd_q *);
d50 1
a50 1
cmd_choose_buffer_exec(struct cmd *self, struct cmd_q *cmdq)
d53 2
a54 2
	struct client			*c = cmdq->state.c;
	struct winlink			*wl = cmdq->state.tflag.wl;
d62 1
a62 1
		cmdq_error(cmdq, "no client available");
@


1.29
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.28 2015/12/14 00:31:54 nicm Exp $ */
d33 1
a33 1
enum cmd_retval	 cmd_choose_buffer_exec(struct cmd *, struct cmd_q *);
d48 1
a48 1
enum cmd_retval
@


1.28
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.27 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2010 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.27
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.26 2015/12/13 14:32:38 nicm Exp $ */
d42 3
a44 1
	.flags = CMD_WINDOW_T,
@


1.26
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.25 2015/11/12 11:09:11 nicm Exp $ */
d36 8
a43 5
	"choose-buffer", NULL,
	"F:t:", 0, 1,
	CMD_TARGET_WINDOW_USAGE " [-F format] [template]",
	CMD_WINDOW_T,
	cmd_choose_buffer_exec
@


1.25
log
@Nuke the utf8 and status-utf8 options and make tmux only a UTF-8
terminal. We still support non-UTF-8 terminals outside tmux, but inside
it is always UTF-8 (as when the utf8 and status-utf8 options were on).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.24 2015/10/27 15:58:42 nicm Exp $ */
d39 1
a39 1
	0,
d47 2
a48 1
	struct client			*c;
a49 1
	struct winlink			*wl;
d55 1
a55 1
	if ((c = cmd_find_client(cmdq, NULL, 1)) == NULL) {
a61 3

	if ((wl = cmd_find_window(cmdq, args_get(args, 't'), NULL)) == NULL)
		return (CMD_RETURN_ERROR);
@


1.24
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.23 2015/08/29 09:25:00 nicm Exp $ */
a53 1
	int				 utf8flag;
a64 1
	utf8flag = options_get_number(wl->window->options, "utf8");
d84 1
a84 1
		format_defaults_paste_buffer(cdata->ft, pb, utf8flag);
@


1.23
log
@Move struct paste_buffer out of tmux.h.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.22 2015/04/27 16:25:57 nicm Exp $ */
d66 1
a66 1
	utf8flag = options_get_number(&wl->window->options, "utf8");
@


1.22
log
@Rewrite of the target resolution internals to be simpler and more
consistent but with much less duplication, but keeping the same internal
API. Also adds more readable aliases for some of the special tokens used
in targets (eg "{start}" instead of "^"). Some behaviours may have
changed, for example prefix matches now happen before fnmatch.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.21 2015/02/05 10:29:43 nicm Exp $ */
d68 1
a68 1
	if (paste_get_top() == NULL)
d88 1
a88 1
		xasprintf(&action_data, "%s", pb->name);
@


1.21
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.20 2014/10/20 23:35:28 nicm Exp $ */
d56 1
a56 1
	if ((c = cmd_current_client(cmdq)) == NULL) {
@


1.20
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.19 2014/10/20 22:29:25 nicm Exp $ */
d86 1
a86 1
		format_paste_buffer(cdata->ft, pb, utf8flag);
@


1.19
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.18 2014/05/13 07:34:35 nicm Exp $ */
d29 3
@


1.18
log
@Add support for named buffers. If you don't name a buffer, things work
much as before - buffers are automatically named "buffer0000",
"buffer0001" and so on and ordered as a stack. Buffers can be named
explicitly when creating ("loadb -b foo" etc) or renamed ("setb -b
buffer0000 -n foo"). If buffers are named explicitly, they are not
deleted when buffer-limit is reached. Diff from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.17 2014/04/24 09:14:43 nicm Exp $ */
a36 1
	NULL,
@


1.17
log
@There is no longer a need for a paste_stack struct or for global_buffers
to be global. Move to paste.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.16 2014/04/02 18:12:18 nicm Exp $ */
d78 2
a79 1
	while ((pb = paste_walk_stack(&idx)) != NULL) {
d81 1
a81 1
		cdata->idx = idx - 1;
a83 1
		format_add(cdata->ft, "line", "%u", idx - 1);
d86 1
a86 1
		xasprintf(&action_data, "%u", idx - 1);
d91 1
@


1.16
log
@Support UTF-8 with choose-buffer, from Kosuke ASAMI. Also make
buffer_sample bigger to let it trim at window right edge.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.15 2013/10/10 12:00:18 nicm Exp $ */
d66 1
a66 1
	if (paste_get_top(&global_buffers) == NULL)
d78 1
a78 1
	while ((pb = paste_walk_stack(&global_buffers, &idx)) != NULL) {
@


1.15
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.14 2013/03/24 09:54:10 nicm Exp $ */
d52 1
d64 1
d84 1
a84 1
		format_paste_buffer(cdata->ft, pb);
@


1.14
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.13 2013/03/21 16:09:59 nicm Exp $ */
a36 1
	NULL,
@


1.13
log
@Allow choose commands to be used outside tmux, so long as at least one
client is attached.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.12 2013/03/21 16:09:17 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_choose_buffer_exec(struct cmd *, struct cmd_ctx *);
d43 1
a43 1
cmd_choose_buffer_exec(struct cmd *self, struct cmd_ctx *ctx)
d54 2
a55 2
	if ((c = cmd_current_client(ctx)) == NULL) {
		ctx->error(ctx, "no client available");
d62 1
a62 1
	if ((wl = cmd_find_window(ctx, args_get(args, 't'), NULL)) == NULL)
@


1.12
log
@Remove free callback for window_choose_data objects.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.11 2013/03/21 16:08:24 nicm Exp $ */
d54 2
a55 2
	if (ctx->curclient == NULL) {
		ctx->error(ctx, "must be run interactively");
a57 1
	c = ctx->curclient;
@


1.11
log
@Miscellaneous tidying of choose API, including:

- rename client and session to start_client and start_session in
  window_choose_data struct. also add TREE_OTHER define and reorder
  the struct
- rename window_choose_ctx to window_choose_data_run
- don't pass a cmd_ctx into window_choose_create (will let it use a
  different client later). instead take type, session, client
- add window_choose_data_free and use it to dispose of wcd rather than
  each cmd-*.c doing it individually
- change so ref counting is done by wcd_add and wcd_free rather than
  callers
- also add a ref to tree_session
- all the callbacks except choose-client and find-window are the same so
  remove them and add window_choose_default_callback
- reorder/rename some other bits and pieces for tidyness
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.10 2012/08/14 08:51:53 nicm Exp $ */
d94 1
a94 1
	window_choose_ready(wl->window->active, 0, NULL, NULL);
@


1.10
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.9 2012/07/11 07:10:15 nicm Exp $ */
a31 3
void	cmd_choose_buffer_callback(struct window_choose_data *);
void	cmd_choose_buffer_free(struct window_choose_data *);

d46 1
d58 1
d79 1
a79 1
		cdata = window_choose_data_create(ctx);
a80 1
		cdata->client->references++;
d94 1
a94 2
	window_choose_ready(wl->window->active,
	    0, cmd_choose_buffer_callback, cmd_choose_buffer_free);
a96 26
}

void
cmd_choose_buffer_callback(struct window_choose_data *cdata)
{
	if (cdata == NULL)
		return;
	if (cdata->client->flags & CLIENT_DEAD)
		return;

	window_choose_ctx(cdata);
}

void
cmd_choose_buffer_free(struct window_choose_data *data)
{
	struct window_choose_data	*cdata = data;

	if (cdata == NULL)
		return;

	cdata->client->references--;

	free(cdata->command);
	free(cdata->ft_template);
	free(cdata);
@


1.9
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.8 2012/07/10 11:53:01 nicm Exp $ */
d62 1
a62 1
		template = DEFAULT_BUFFER_LIST_TEMPLATE;
@


1.8
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.7 2012/06/25 14:27:25 nicm Exp $ */
d30 1
a30 1
int	cmd_choose_buffer_exec(struct cmd *, struct cmd_ctx *);
d45 1
a45 1
int
d58 1
a58 1
		return (-1);
d65 1
a65 1
		return (-1);
d68 1
a68 1
		return (0);
d71 1
a71 1
		return (0);
d99 1
a99 1
	return (0);
@


1.7
log
@Provide common helper function for adding windows and sessions to choose
lists and expand %% in command before using it rather than at callback
time. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.6 2012/06/25 14:08:55 nicm Exp $ */
d22 1
d90 1
a90 1
		xfree(action_data);
d94 1
a94 1
	xfree(action);
d123 3
a125 3
	xfree(cdata->command);
	xfree(cdata->ft_template);
	xfree(cdata);
@


1.6
log
@Clean up and simplify the choose mode code, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.5 2012/05/22 11:35:37 nicm Exp $ */
d51 2
a53 1
	const char			*template;
d72 5
a79 5
		if (args->argc != 0)
			cdata->action = xstrdup(args->argv[0]);
		else
			cdata->action = xstrdup("paste-buffer -b '%%'");

d87 4
d93 1
a108 1
	xasprintf(&cdata->raw_format, "%u", cdata->idx);
d122 1
a123 2
	xfree(cdata->action);
	xfree(cdata->raw_format);
@


1.5
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.4 2011/01/04 00:42:46 nicm Exp $ */
d31 2
a32 2
void	cmd_choose_buffer_callback(void *, int);
void	cmd_choose_buffer_free(void *);
a43 5
struct cmd_choose_buffer_data {
	struct client   *client;
	char            *template;
};

d48 1
a48 1
	struct cmd_choose_buffer_data	*cdata;
a50 1
	struct format_tree		*ft;
a51 1
	char				*line;
d73 12
a84 3
		ft = format_create();
		format_add(ft, "line", "%u", idx - 1);
		format_paste_buffer(ft, pb);
d86 1
a86 5
		line = format_expand(ft, template);
		window_choose_add(wl->window->active, idx - 1, "%s", line);

		xfree(line);
		format_free(ft);
a88 8
	cdata = xmalloc(sizeof *cdata);
	if (args->argc != 0)
		cdata->template = xstrdup(args->argv[0]);
	else
		cdata->template = xstrdup("paste-buffer -b '%%'");
	cdata->client = ctx->curclient;
	cdata->client->references++;

d90 1
a90 1
	    0, cmd_choose_buffer_callback, cmd_choose_buffer_free, cdata);
d96 1
a96 1
cmd_choose_buffer_callback(void *data, int idx)
d98 1
a98 6
	struct cmd_choose_buffer_data	*cdata = data;
	struct cmd_list			*cmdlist;
	struct cmd_ctx			 ctx;
	char				*template, *cause, tmp[16];

	if (idx == -1)
d103 2
a104 25
	xsnprintf(tmp, sizeof tmp, "%u", idx);
	template = cmd_template_replace(cdata->template, tmp, 1);

	if (cmd_string_parse(template, &cmdlist, &cause) != 0) {
		if (cause != NULL) {
			*cause = toupper((u_char) *cause);
			status_message_set(cdata->client, "%s", cause);
			xfree(cause);
		}
		xfree(template);
		return;
	}
	xfree(template);

	ctx.msgdata = NULL;
	ctx.curclient = cdata->client;

	ctx.error = key_bindings_error;
	ctx.print = key_bindings_print;
	ctx.info = key_bindings_info;

	ctx.cmdclient = NULL;

	cmd_list_exec(cmdlist, &ctx);
	cmd_list_free(cmdlist);
d108 1
a108 1
cmd_choose_buffer_free(void *data)
d110 4
a113 1
	struct cmd_choose_buffer_data	*cdata = data;
d116 4
a119 1
	xfree(cdata->template);
@


1.4
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.3 2011/01/01 00:44:24 nicm Exp $ */
d36 2
a37 2
	"t:", 0, 1,
	CMD_TARGET_WINDOW_USAGE " [template]",
d56 1
d58 2
a59 1
	char				*tmp;
d66 3
d80 9
a88 4
		tmp = paste_print(pb, 50);
		window_choose_add(wl->window->active, idx - 1,
		    "%u: %zu bytes: \"%s\"", idx - 1, pb->size, tmp);
		xfree(tmp);
@


1.3
log
@Remove unused variable.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.2 2010/12/30 23:16:18 nicm Exp $ */
d36 1
d38 4
a41 6
	CMD_ARG01, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_choose_buffer_exec,
	cmd_target_free,
	cmd_target_print
d45 2
a46 2
	struct client	*client;
	char   		*template;
d52 1
a52 1
	struct cmd_target_data		*data = self->data;
d64 1
a64 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
d82 2
a83 2
	if (data->arg != NULL)
		cdata->template = xstrdup(data->arg);
@


1.2
log
@Change from a per-session stack of buffers to one global stack which is
much more convenient and also simplifies lot of code. This renders
copy-buffer useless and makes buffer-limit now a server option.

By Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-buffer.c,v 1.1 2010/06/21 21:44:09 nicm Exp $ */
a54 1
	struct session			*s;
a63 1
	s = ctx->curclient->session;
@


1.1
log
@Add a choose-buffer command for easier use of the paste buffer stack.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d70 1
a70 1
	if (paste_get_top(&s->buffers) == NULL)
d77 1
a77 1
	while ((pb = paste_walk_stack(&s->buffers, &idx)) != NULL) {
@

