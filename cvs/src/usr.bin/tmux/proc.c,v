head	1.15;
access;
symbols
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8;
locks; strict;
comment	@ * @;


1.15
date	2017.07.14.18.49.07;	author nicm;	state Exp;
branches;
next	1.14;
commitid	sIKhdTCQ7RdqrbqF;

1.14
date	2017.07.14.08.04.23;	author nicm;	state Exp;
branches;
next	1.13;
commitid	TCLE7UuqC6mzHXjD;

1.13
date	2017.07.12.12.35.31;	author nicm;	state Exp;
branches;
next	1.12;
commitid	Tknp5cF5jjglffgr;

1.12
date	2017.07.12.09.24.17;	author nicm;	state Exp;
branches;
next	1.11;
commitid	GhkQsamphQVs3LP1;

1.11
date	2017.07.12.09.07.52;	author nicm;	state Exp;
branches;
next	1.10;
commitid	wOpynEdUJq0bUflI;

1.10
date	2017.06.07.15.27.46;	author nicm;	state Exp;
branches;
next	1.9;
commitid	CEVkhkTEcCRYFL30;

1.9
date	2017.06.04.08.25.57;	author nicm;	state Exp;
branches;
next	1.8;
commitid	WVrnfI8R8Z2jveSi;

1.8
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.7;
commitid	P3qmSOx6KrDBsb0c;

1.7
date	2015.12.05.13.18.24;	author claudio;	state Exp;
branches;
next	1.6;
commitid	VAK1N6OmH6itjMsK;

1.6
date	2015.11.24.21.32.36;	author nicm;	state Exp;
branches;
next	1.5;
commitid	EJr5mpVXXhsfxn3H;

1.5
date	2015.11.24.21.19.46;	author nicm;	state Exp;
branches;
next	1.4;
commitid	WYqwkdfYHZzn9ayb;

1.4
date	2015.11.18.14.27.44;	author nicm;	state Exp;
branches;
next	1.3;
commitid	RjsAPRkWwvS79w40;

1.3
date	2015.10.31.13.43.38;	author nicm;	state Exp;
branches;
next	1.2;
commitid	uaemvciE6Lbd3u9I;

1.2
date	2015.10.29.09.35.31;	author nicm;	state Exp;
branches;
next	1.1;
commitid	HmJ73fmwKF6xZfnE;

1.1
date	2015.10.27.13.23.24;	author nicm;	state Exp;
branches;
next	;
commitid	g6GdEJXfBNprXHEK;


desc
@@


1.15
log
@Because ignore SIGCHLD early, letting signal_del restore it doesn't work
correctly, so set it explicitly back to default (and the others for good
measure).
@
text
@/* $OpenBSD: proc.c,v 1.14 2017/07/14 08:04:23 nicm Exp $ */

/*
 * Copyright (c) 2015 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/uio.h>
#include <sys/utsname.h>

#include <errno.h>
#include <event.h>
#include <imsg.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "tmux.h"

struct tmuxproc {
	const char	 *name;
	int		  exit;

	void		(*signalcb)(int);

	struct event	  ev_sighup;
	struct event	  ev_sigchld;
	struct event	  ev_sigcont;
	struct event	  ev_sigterm;
	struct event	  ev_sigusr1;
	struct event	  ev_sigusr2;
	struct event	  ev_sigwinch;
};

struct tmuxpeer {
	struct tmuxproc	*parent;

	struct imsgbuf	 ibuf;
	struct event	 event;

	int		 flags;
#define PEER_BAD 0x1

	void		(*dispatchcb)(struct imsg *, void *);
	void		 *arg;
};

static int	peer_check_version(struct tmuxpeer *, struct imsg *);
static void	proc_update_event(struct tmuxpeer *);

static void
proc_event_cb(__unused int fd, short events, void *arg)
{
	struct tmuxpeer	*peer = arg;
	ssize_t		 n;
	struct imsg	 imsg;

	if (!(peer->flags & PEER_BAD) && (events & EV_READ)) {
		if (((n = imsg_read(&peer->ibuf)) == -1 && errno != EAGAIN) ||
		    n == 0) {
			peer->dispatchcb(NULL, peer->arg);
			return;
		}
		for (;;) {
			if ((n = imsg_get(&peer->ibuf, &imsg)) == -1) {
				peer->dispatchcb(NULL, peer->arg);
				return;
			}
			if (n == 0)
				break;
			log_debug("peer %p message %d", peer, imsg.hdr.type);

			if (peer_check_version(peer, &imsg) != 0) {
				if (imsg.fd != -1)
					close(imsg.fd);
				imsg_free(&imsg);
				break;
			}

			peer->dispatchcb(&imsg, peer->arg);
			imsg_free(&imsg);
		}
	}

	if (events & EV_WRITE) {
		if (msgbuf_write(&peer->ibuf.w) <= 0 && errno != EAGAIN) {
			peer->dispatchcb(NULL, peer->arg);
			return;
		}
	}

	if ((peer->flags & PEER_BAD) && peer->ibuf.w.queued == 0) {
		peer->dispatchcb(NULL, peer->arg);
		return;
	}

	proc_update_event(peer);
}

static void
proc_signal_cb(int signo, __unused short events, void *arg)
{
	struct tmuxproc	*tp = arg;

	tp->signalcb(signo);
}

static int
peer_check_version(struct tmuxpeer *peer, struct imsg *imsg)
{
	int	version;

	version = imsg->hdr.peerid & 0xff;
	if (imsg->hdr.type != MSG_VERSION && version != PROTOCOL_VERSION) {
		log_debug("peer %p bad version %d", peer, version);

		proc_send(peer, MSG_VERSION, -1, NULL, 0);
		peer->flags |= PEER_BAD;

		return (-1);
	}
	return (0);
}

static void
proc_update_event(struct tmuxpeer *peer)
{
	short	events;

	event_del(&peer->event);

	events = EV_READ;
	if (peer->ibuf.w.queued > 0)
		events |= EV_WRITE;
	event_set(&peer->event, peer->ibuf.fd, events, proc_event_cb, peer);

	event_add(&peer->event, NULL);
}

int
proc_send(struct tmuxpeer *peer, enum msgtype type, int fd, const void *buf,
    size_t len)
{
	struct imsgbuf	*ibuf = &peer->ibuf;
	void		*vp = (void *)buf;
	int		 retval;

	if (peer->flags & PEER_BAD)
		return (-1);
	log_debug("sending message %d to peer %p (%zu bytes)", type, peer, len);

	retval = imsg_compose(ibuf, type, PROTOCOL_VERSION, -1, fd, vp, len);
	if (retval != 1)
		return (-1);
	proc_update_event(peer);
	return (0);
}

struct tmuxproc *
proc_start(const char *name)
{
	struct tmuxproc	*tp;
	struct utsname	 u;

	log_open(name);
	setproctitle("%s (%s)", name, socket_path);

	if (uname(&u) < 0)
		memset(&u, 0, sizeof u);

	log_debug("%s started (%ld): socket %s, protocol %d", name,
	    (long)getpid(), socket_path, PROTOCOL_VERSION);
	log_debug("on %s %s %s; libevent %s (%s)", u.sysname, u.release,
	    u.version, event_get_version(), event_get_method());

	tp = xcalloc(1, sizeof *tp);
	tp->name = xstrdup(name);

	return (tp);
}

void
proc_loop(struct tmuxproc *tp, int (*loopcb)(void))
{
	log_debug("%s loop enter", tp->name);
	do
		event_loop(EVLOOP_ONCE);
	while (!tp->exit && (loopcb == NULL || !loopcb ()));
	log_debug("%s loop exit", tp->name);
}

void
proc_exit(struct tmuxproc *tp)
{
	tp->exit = 1;
}

void
proc_set_signals(struct tmuxproc *tp, void (*signalcb)(int))
{
	struct sigaction	sa;

	tp->signalcb = signalcb;

	memset(&sa, 0, sizeof sa);
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	sa.sa_handler = SIG_IGN;

	sigaction(SIGINT, &sa, NULL);
	sigaction(SIGPIPE, &sa, NULL);
	sigaction(SIGTSTP, &sa, NULL);

	signal_set(&tp->ev_sighup, SIGHUP, proc_signal_cb, tp);
	signal_add(&tp->ev_sighup, NULL);
	signal_set(&tp->ev_sigchld, SIGCHLD, proc_signal_cb, tp);
	signal_add(&tp->ev_sigchld, NULL);
	signal_set(&tp->ev_sigcont, SIGCONT, proc_signal_cb, tp);
	signal_add(&tp->ev_sigcont, NULL);
	signal_set(&tp->ev_sigterm, SIGTERM, proc_signal_cb, tp);
	signal_add(&tp->ev_sigterm, NULL);
	signal_set(&tp->ev_sigusr1, SIGUSR1, proc_signal_cb, tp);
	signal_add(&tp->ev_sigusr1, NULL);
	signal_set(&tp->ev_sigusr2, SIGUSR2, proc_signal_cb, tp);
	signal_add(&tp->ev_sigusr2, NULL);
	signal_set(&tp->ev_sigwinch, SIGWINCH, proc_signal_cb, tp);
	signal_add(&tp->ev_sigwinch, NULL);
}

void
proc_clear_signals(struct tmuxproc *tp, int defaults)
{
	struct sigaction	sa;

	memset(&sa, 0, sizeof sa);
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	sa.sa_handler = SIG_DFL;

	sigaction(SIGINT, &sa, NULL);
	sigaction(SIGPIPE, &sa, NULL);
	sigaction(SIGTSTP, &sa, NULL);

	signal_del(&tp->ev_sighup);
	signal_del(&tp->ev_sigchld);
	signal_del(&tp->ev_sigcont);
	signal_del(&tp->ev_sigterm);
	signal_del(&tp->ev_sigusr1);
	signal_del(&tp->ev_sigusr2);
	signal_del(&tp->ev_sigwinch);

	if (defaults) {
		sigaction(SIGHUP, &sa, NULL);
		sigaction(SIGCHLD, &sa, NULL);
		sigaction(SIGCONT, &sa, NULL);
		sigaction(SIGTERM, &sa, NULL);
		sigaction(SIGUSR1, &sa, NULL);
		sigaction(SIGUSR2, &sa, NULL);
		sigaction(SIGWINCH, &sa, NULL);
	}
}

struct tmuxpeer *
proc_add_peer(struct tmuxproc *tp, int fd,
    void (*dispatchcb)(struct imsg *, void *), void *arg)
{
	struct tmuxpeer	*peer;

	peer = xcalloc(1, sizeof *peer);
	peer->parent = tp;

	peer->dispatchcb = dispatchcb;
	peer->arg = arg;

	imsg_init(&peer->ibuf, fd);
	event_set(&peer->event, fd, EV_READ, proc_event_cb, peer);

	log_debug("add peer %p: %d (%p)", peer, fd, arg);

	proc_update_event(peer);
	return (peer);
}

void
proc_remove_peer(struct tmuxpeer *peer)
{
	log_debug("remove peer %p", peer);

	event_del(&peer->event);
	imsg_clear(&peer->ibuf);

	close(peer->ibuf.fd);
	free(peer);
}

void
proc_kill_peer(struct tmuxpeer *peer)
{
	peer->flags |= PEER_BAD;
}

void
proc_toggle_log(struct tmuxproc *tp)
{
	log_toggle(tp->name);
}
@


1.14
log
@Fix redraw defer code in the presence of multiple clients - the timer
may be needed for all of them, so don't delete it on the first; and
don't skip setting the redraw flag if the timer is already running.

Reported by Pol Van Aubel in GitHub issue 1003.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.13 2017/07/12 12:35:31 nicm Exp $ */
d245 1
a245 1
proc_clear_signals(struct tmuxproc *tp)
d265 10
@


1.13
log
@Do not need to set up USR2 twice.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.12 2017/07/12 09:24:17 nicm Exp $ */
d258 7
a264 7
	event_del(&tp->ev_sighup);
	event_del(&tp->ev_sigchld);
	event_del(&tp->ev_sigcont);
	event_del(&tp->ev_sigterm);
	event_del(&tp->ev_sigusr1);
	event_del(&tp->ev_sigusr2);
	event_del(&tp->ev_sigwinch);
@


1.12
log
@Move signal code into proc.c.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.11 2017/07/12 09:07:52 nicm Exp $ */
a225 1
	sigaction(SIGUSR2, &sa, NULL);
a255 1
	sigaction(SIGUSR2, &sa, NULL);
@


1.11
log
@proc_send_s now seems unnecessary.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.10 2017/06/07 15:27:46 nicm Exp $ */
d27 1
d39 8
d174 1
a174 2
proc_start(const char *name, struct event_base *base, int forkflag,
    void (*signalcb)(int))
a178 17
	if (forkflag) {
		switch (fork()) {
		case -1:
			fatal("fork failed");
		case 0:
			break;
		default:
			return (NULL);
		}
		if (daemon(1, 0) != 0)
			fatal("daemon failed");

		clear_signals(0);
		if (event_reinit(base) != 0)
			fatalx("event_reinit failed");
	}

a192 3
	tp->signalcb = signalcb;
	set_signals(proc_signal_cb, tp);

d210 57
@


1.10
log
@Return 1 if name matches not 0, also fix some spaces.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.9 2017/06/04 08:25:57 nicm Exp $ */
a161 6
}

int
proc_send_s(struct tmuxpeer *peer, enum msgtype type, const char *s)
{
	return (proc_send(peer, type, -1, s, strlen(s) + 1));
@


1.9
log
@Support SIGUSR2 to stop and start logging for an existing server. Also
we currently only have two log levels so just use -v and -vv rather than
-v and -vvvv, and clarify the man page entry for -v.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.8 2016/01/19 15:59:12 nicm Exp $ */
d50 1
a50 1
	void		*arg;
@


1.8
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.7 2015/12/05 13:18:24 claudio Exp $ */
d267 6
@


1.7
log
@EAGAIN handling for imsg_read. OK henning@@ benno@@
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.6 2015/11/24 21:32:36 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2015 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.6
log
@Log some system and libevent information at startup.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.5 2015/11/24 21:19:46 nicm Exp $ */
d64 2
a65 1
		if ((n = imsg_read(&peer->ibuf)) == -1 || n == 0) {
@


1.5
log
@Make the log stuff a bit tidier with some helper functions.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.4 2015/11/18 14:27:44 nicm Exp $ */
d22 1
d174 1
d196 3
d201 2
@


1.4
log
@Use __unused rather than rolling our own.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.3 2015/10/31 13:43:38 nicm Exp $ */
d191 1
a191 1
	logfile(name);
@


1.3
log
@Don't shift version out of peerid, it is needed later.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.2 2015/10/29 09:35:31 nicm Exp $ */
d56 1
a56 1
proc_event_cb(unused int fd, short events, void *arg)
d104 1
a104 1
proc_signal_cb(int signo, unused short events, void *arg)
@


1.2
log
@Break version check into a separate function, and limit version to 8 bits.
@
text
@d1 1
a1 1
/* $OpenBSD: proc.c,v 1.1 2015/10/27 13:23:24 nicm Exp $ */
a124 1
	imsg->hdr.peerid >>= 8;
@


1.1
log
@Break the common process set up, event loop and imsg dispatch code
between server and client out into a separate internal API. This will
make it easier to add another process.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d52 2
a53 1
static void proc_update_event(struct tmuxpeer *);
a60 1
	int		 v;
d76 1
a76 8
			v = imsg.hdr.peerid;
			if (imsg.hdr.type != MSG_VERSION &&
			    v != PROTOCOL_VERSION) {
				log_debug("peer %p bad version %d", peer, v);

				proc_send(peer, MSG_VERSION, -1, NULL, 0);
				peer->flags |= PEER_BAD;

d109 18
@

