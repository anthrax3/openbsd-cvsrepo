head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.4
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.20
date	2017.08.16.12.12.54;	author nicm;	state Exp;
branches;
next	1.19;
commitid	35g8taSfXnzDZwJ9;

1.19
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.18;
commitid	RXMp6wwG5a5Y82bo;

1.18
date	2017.03.09.17.06.35;	author nicm;	state Exp;
branches;
next	1.17;
commitid	BJxoAdDkAuPxTBwC;

1.17
date	2017.01.15.22.00.56;	author nicm;	state Exp;
branches;
next	1.16;
commitid	P8Zuj7wnJMd8B8vz;

1.16
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.15;
commitid	pxm6osuE99zELpkU;

1.15
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.14;
commitid	1xIYFpLYkPIXNEvU;

1.14
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.13;
commitid	S3IpyYTkmviA6lfM;

1.13
date	2016.06.16.10.55.47;	author nicm;	state Exp;
branches;
next	1.12;
commitid	iwpkepU9NO5jIk1m;

1.12
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.11;
commitid	P3qmSOx6KrDBsb0c;

1.11
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.10;
commitid	rE682EC14v4gpeFy;

1.10
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.9;
commitid	gsQkQsSyBCSmU9ax;

1.9
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.8;
commitid	uzMkp8Z4FE6WB6s6;

1.8
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.7;
commitid	Gq8hgMoG3t1Wy1Zv;

1.7
date	2013.10.10.12.00.19;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.24.09.27.19;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.31.20.46.19;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Add -d flag to display-panes to specify timeout, and make 0 mean no
timeout. From Laurens Post.
@
text
@/* $OpenBSD: cmd-display-panes.c,v 1.19 2017/04/22 10:22:39 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <stdlib.h>

#include "tmux.h"

/*
 * Display panes on a client.
 */

static enum cmd_retval	cmd_display_panes_exec(struct cmd *,
			    struct cmdq_item *);

static void		cmd_display_panes_callback(struct client *,
			    struct window_pane *);

const struct cmd_entry cmd_display_panes_entry = {
	.name = "display-panes",
	.alias = "displayp",

	.args = { "d:t:", 0, 1 },
	.usage = "[-d duration] " CMD_TARGET_CLIENT_USAGE,

	.flags = CMD_AFTERHOOK,
	.exec = cmd_display_panes_exec
};

static enum cmd_retval
cmd_display_panes_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;
	struct client	*c;
	struct session	*s;
	u_int		 delay;
	char		*cause;

	if ((c = cmd_find_client(item, args_get(args, 't'), 0)) == NULL)
		return (CMD_RETURN_ERROR);

	if (c->identify_callback != NULL)
		return (CMD_RETURN_NORMAL);

	c->identify_callback = cmd_display_panes_callback;
	if (args->argc != 0)
		c->identify_callback_data = xstrdup(args->argv[0]);
	else
		c->identify_callback_data = xstrdup("select-pane -t '%%'");
	s = c->session;

	if (args_has(args, 'd')) {
		delay = args_strtonum(args, 'd', 0, UINT_MAX, &cause);
		if (cause != NULL) {
			cmdq_error(item, "delay %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
	} else
		delay = options_get_number(s->options, "display-panes-time");
	server_client_set_identify(c, delay);

	return (CMD_RETURN_NORMAL);
}

static enum cmd_retval
cmd_display_panes_error(struct cmdq_item *item, void *data)
{
	char	*error = data;

	cmdq_error(item, "%s", error);
	free(error);

	return (CMD_RETURN_NORMAL);
}

static void
cmd_display_panes_callback(struct client *c, struct window_pane *wp)
{
	struct cmd_list		*cmdlist;
	struct cmdq_item	*new_item;
	char			*template, *cmd, *expanded, *cause;

	template = c->identify_callback_data;
	if (wp == NULL)
		goto out;
	xasprintf(&expanded, "%%%u", wp->id);
	cmd = cmd_template_replace(template, expanded, 1);

	cmdlist = cmd_string_parse(cmd, NULL, 0, &cause);
	if (cmdlist == NULL) {
		if (cause != NULL) {
			new_item = cmdq_get_callback(cmd_display_panes_error,
			    cause);
		} else
			new_item = NULL;
	} else {
		new_item = cmdq_get_command(cmdlist, NULL, NULL, 0);
		cmd_list_free(cmdlist);
	}

	if (new_item != NULL)
		cmdq_append(c, new_item);

	free(cmd);
	free(expanded);

out:
	free(c->identify_callback_data);
	c->identify_callback_data = NULL;
	c->identify_callback = NULL;
}
@


1.19
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.18 2017/03/09 17:06:35 nicm Exp $ */
d40 2
a41 2
	.args = { "t:", 0, 1 },
	.usage = CMD_TARGET_CLIENT_USAGE,
d52 3
d67 1
d69 10
a78 1
	server_client_set_identify(c);
@


1.18
log
@Move the client identify (display-panes) code into server-client.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.17 2017/01/15 22:00:56 nicm Exp $ */
a42 2
	.tflag = CMD_CLIENT,

d51 4
a54 1
	struct client	*c = item->state.c;
@


1.17
log
@It is silly for cmd_list_parse to return an integer error when it could
just return NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.16 2016/10/16 19:04:05 nicm Exp $ */
d64 1
a64 1
	server_set_identify(c);
@


1.16
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.15 2016/10/16 17:55:14 nicm Exp $ */
d93 2
a94 1
	if (cmd_string_parse(cmd, &cmdlist, NULL, 0, &cause) != 0) {
@


1.15
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.14 2016/10/14 22:14:22 nicm Exp $ */
d30 2
a31 1
static enum cmd_retval	 cmd_display_panes_exec(struct cmd *, struct cmd_q *);
d33 2
a34 2
static void		 cmd_display_panes_callback(struct client *,
			     struct window_pane *);
d50 1
a50 1
cmd_display_panes_exec(struct cmd *self, struct cmd_q *cmdq)
d53 1
a53 1
	struct client	*c = cmdq->state.c;
d70 1
a70 1
cmd_display_panes_error(struct cmd_q *cmdq, void *data)
d74 1
a74 1
	cmdq_error(cmdq, "%s", error);
d83 3
a85 3
	struct cmd_list	*cmdlist;
	struct cmd_q	*new_cmdq;
	char		*template, *cmd, *expanded, *cause;
d95 1
a95 1
			new_cmdq = cmdq_get_callback(cmd_display_panes_error,
d98 1
a98 1
			new_cmdq = NULL;
d100 1
a100 1
		new_cmdq = cmdq_get_command(cmdlist, NULL, NULL, 0);
d104 2
a105 2
	if (new_cmdq != NULL)
		cmdq_append(c, new_cmdq);
@


1.14
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.13 2016/06/16 10:55:47 nicm Exp $ */
d68 11
d83 1
d87 15
a101 14
	if (wp != NULL) {
		xasprintf(&expanded, "%%%u", wp->id);
		cmd = cmd_template_replace(template, expanded, 1);

		if (cmd_string_parse(cmd, &cmdlist, NULL, 0, &cause) != 0) {
			if (cause != NULL) {
				*cause = toupper((u_char) *cause);
				status_message_set(c, "%s", cause);
				free(cause);
			}
		} else {
			cmdq_run(c->cmdq, cmdlist, NULL);
			cmd_list_free(cmdlist);
		}
d103 5
a107 3
		free(cmd);
		free(expanded);
	}
d109 1
@


1.13
log
@Allow a command to be specified to display-panes, similar to
command-prompt, rather than always just selecting the pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.12 2016/01/19 15:59:12 nicm Exp $ */
d44 1
a44 1
	.flags = 0,
@


1.12
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.11 2015/12/14 00:31:54 nicm Exp $ */
d21 3
d30 4
a33 1
enum cmd_retval	 cmd_display_panes_exec(struct cmd *, struct cmd_q *);
d39 1
a39 1
	.args = { "t:", 0, 0 },
d48 2
a49 2
enum cmd_retval
cmd_display_panes_exec(__unused struct cmd *self, struct cmd_q *cmdq)
d51 13
a63 1
	server_set_identify(cmdq->state.c);
d66 31
@


1.11
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.10 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.10
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.9 2015/12/13 14:32:38 nicm Exp $ */
d36 3
a38 1
	.flags = CMD_CLIENT_T,
@


1.9
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.8 2014/10/20 22:29:25 nicm Exp $ */
d30 8
a37 5
	"display-panes", "displayp",
	"t:", 0, 0,
	CMD_TARGET_CLIENT_USAGE,
	CMD_CLIENT_T,
	cmd_display_panes_exec
@


1.8
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.7 2013/10/10 12:00:19 nicm Exp $ */
d33 1
a33 1
	0,
d38 1
a38 1
cmd_display_panes_exec(struct cmd *self, struct cmd_q *cmdq)
d40 1
a40 7
	struct args	*args = self->args;
	struct client	*c;

	if ((c = cmd_find_client(cmdq, args_get(args, 't'), 0)) == NULL)
		return (CMD_RETURN_ERROR);

	server_set_identify(c);
@


1.7
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.6 2013/03/24 09:54:10 nicm Exp $ */
a33 1
	NULL,
@


1.6
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.5 2013/03/24 09:27:19 nicm Exp $ */
a33 1
	NULL,
@


1.5
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.4 2012/07/11 07:10:15 nicm Exp $ */
d27 1
a27 1
enum cmd_retval	 cmd_display_panes_exec(struct cmd *, struct cmd_ctx *);
d40 1
a40 1
cmd_display_panes_exec(struct cmd *self, struct cmd_ctx *ctx)
d45 1
a45 1
	if ((c = cmd_find_client(ctx, args_get(args, 't'), 0)) == NULL)
@


1.4
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.3 2011/01/04 00:42:46 nicm Exp $ */
d45 1
a45 1
	if ((c = cmd_find_client(ctx, args_get(args, 't'))) == NULL)
@


1.3
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.2 2009/11/13 19:53:29 nicm Exp $ */
d27 1
a27 1
int	cmd_display_panes_exec(struct cmd *, struct cmd_ctx *);
d39 1
a39 1
int
d46 1
a46 1
		return (-1);
d50 1
a50 1
	return (0);
@


1.2
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-panes.c,v 1.1 2009/08/31 20:46:19 nicm Exp $ */
d31 1
d33 4
a36 6
	0, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_display_panes_exec,
	cmd_target_free,
	cmd_target_print
d42 2
a43 2
	struct cmd_target_data	*data = self->data;
	struct client		*c;
d45 1
a45 1
	if ((c = cmd_find_client(ctx, data->target)) == NULL)
@


1.1
log
@Add a new display-panes command, with two options (display-panes-colour and
display-panes-time), which displays a visual indication of the number of each
pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-refresh-client.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d32 1
a32 1
	0, 0,
@

