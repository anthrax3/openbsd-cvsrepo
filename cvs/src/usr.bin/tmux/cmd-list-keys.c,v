head	1.42;
access;
symbols
	OPENBSD_6_1:1.42.0.4
	OPENBSD_6_1_BASE:1.42
	OPENBSD_6_0:1.35.0.2
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.26.0.4
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.18.0.2
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.42
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.41;
commitid	BLRh0qXo7OVTPhiT;

1.41
date	2017.01.24.21.50.22;	author nicm;	state Exp;
branches;
next	1.40;
commitid	RhpGrb29XR7z4pyo;

1.40
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.39;
commitid	pxm6osuE99zELpkU;

1.39
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.38;
commitid	S3IpyYTkmviA6lfM;

1.38
date	2016.10.12.14.50.14;	author nicm;	state Exp;
branches;
next	1.37;
commitid	2r95FFcJGHvdfgBR;

1.37
date	2016.10.11.07.23.34;	author nicm;	state Exp;
branches;
next	1.36;
commitid	leUN1UeapgUoieJj;

1.36
date	2016.09.12.15.40.58;	author nicm;	state Exp;
branches;
next	1.35;
commitid	FmdCsJJj2mhuDrZn;

1.35
date	2016.06.15.08.54.11;	author nicm;	state Exp;
branches;
next	1.34;
commitid	o2YWCFvBCkybpqVu;

1.34
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.33;
commitid	P3qmSOx6KrDBsb0c;

1.33
date	2015.12.15.00.52.17;	author nicm;	state Exp;
branches;
next	1.32;
commitid	EpEw6hPgaQi7V3j5;

1.32
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.31;
commitid	gsQkQsSyBCSmU9ax;

1.31
date	2015.11.27.15.06.43;	author nicm;	state Exp;
branches;
next	1.30;
commitid	UkIx5fVf8smc7ree;

1.30
date	2015.11.18.14.27.44;	author nicm;	state Exp;
branches;
next	1.29;
commitid	RjsAPRkWwvS79w40;

1.29
date	2015.11.12.12.43.36;	author nicm;	state Exp;
branches;
next	1.28;
commitid	dJNPbZGePibWAHfZ;

1.28
date	2015.11.12.11.05.34;	author nicm;	state Exp;
branches;
next	1.27;
commitid	Ih1tdqtjpnEyfE8x;

1.27
date	2015.10.26.22.03.04;	author nicm;	state Exp;
branches;
next	1.26;
commitid	4Bl3FJpzH5LgcBQr;

1.26
date	2015.04.20.15.34.56;	author nicm;	state Exp;
branches;
next	1.25;
commitid	1fc4pMkRD7YjyQWP;

1.25
date	2014.10.20.23.27.14;	author nicm;	state Exp;
branches;
next	1.24;
commitid	BAMrPS0saBiCc8HD;

1.24
date	2014.10.20.22.44.30;	author nicm;	state Exp;
branches;
next	1.23;
commitid	eaLamSccGV2UFQVr;

1.23
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.22;
commitid	Gq8hgMoG3t1Wy1Zv;

1.22
date	2013.10.10.12.00.20;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.22.15.52.40;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2012.10.15.21.53.30;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2012.01.21.11.12.13;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2011.12.27.13.41.50;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.08.15.18.20;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.04.00.31.57;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2010.10.20.18.20.36;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.18.10.18.25;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.05.12.04.50;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.28.17.05.10;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.28.07.03.32;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.24.14.52.47;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.21.22.41.00;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.42
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@/* $OpenBSD: cmd-list-keys.c,v 1.41 2017/01/24 21:50:22 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * List key bindings.
 */

static enum cmd_retval	cmd_list_keys_exec(struct cmd *, struct cmdq_item *);

static enum cmd_retval	cmd_list_keys_commands(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_list_keys_entry = {
	.name = "list-keys",
	.alias = "lsk",

	.args = { "T:", 0, 0 },
	.usage = "[-T key-table]",

	.flags = CMD_STARTSERVER|CMD_AFTERHOOK,
	.exec = cmd_list_keys_exec
};

const struct cmd_entry cmd_list_commands_entry = {
	.name = "list-commands",
	.alias = "lscm",

	.args = { "F:", 0, 0 },
	.usage = "[-F format]",

	.flags = CMD_STARTSERVER|CMD_AFTERHOOK,
	.exec = cmd_list_keys_exec
};

static enum cmd_retval
cmd_list_keys_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct key_table	*table;
	struct key_binding	*bd;
	const char		*key, *tablename, *r;
	char			*cp, tmp[BUFSIZ];
	int			 repeat, width, tablewidth, keywidth;

	if (self->entry == &cmd_list_commands_entry)
		return (cmd_list_keys_commands(self, item));

	tablename = args_get(args, 'T');
	if (tablename != NULL && key_bindings_get_table(tablename, 0) == NULL) {
		cmdq_error(item, "table %s doesn't exist", tablename);
		return (CMD_RETURN_ERROR);
	}

	repeat = 0;
	tablewidth = keywidth = 0;
	RB_FOREACH(table, key_tables, &key_tables) {
		if (tablename != NULL && strcmp(table->name, tablename) != 0)
			continue;
		RB_FOREACH(bd, key_bindings, &table->key_bindings) {
			key = key_string_lookup_key(bd->key);

			if (bd->can_repeat)
				repeat = 1;

			width = utf8_cstrwidth(table->name);
			if (width > tablewidth)
				tablewidth = width;
			width = utf8_cstrwidth(key);
			if (width > keywidth)
				keywidth = width;
		}
	}

	RB_FOREACH(table, key_tables, &key_tables) {
		if (tablename != NULL && strcmp(table->name, tablename) != 0)
			continue;
		RB_FOREACH(bd, key_bindings, &table->key_bindings) {
			key = key_string_lookup_key(bd->key);

			if (!repeat)
				r = "";
			else if (bd->can_repeat)
				r = "-r ";
			else
				r = "   ";
			xsnprintf(tmp, sizeof tmp, "%s-T ", r);

			cp = utf8_padcstr(table->name, tablewidth);
			strlcat(tmp, cp, sizeof tmp);
			strlcat(tmp, " ", sizeof tmp);
			free(cp);

			cp = utf8_padcstr(key, keywidth);
			strlcat(tmp, cp, sizeof tmp);
			strlcat(tmp, " ", sizeof tmp);
			free(cp);

			cp = cmd_list_print(bd->cmdlist);
			strlcat(tmp, cp, sizeof tmp);
			free(cp);

			cmdq_print(item, "bind-key %s", tmp);
		}
	}

	return (CMD_RETURN_NORMAL);
}

static enum cmd_retval
cmd_list_keys_commands(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	const struct cmd_entry	**entryp;
	const struct cmd_entry	 *entry;
	struct format_tree	 *ft;
	const char		 *template, *s;
	char			 *line;

	if ((template = args_get(args, 'F')) == NULL) {
		template = "#{command_list_name}"
		    "#{?command_list_alias, (#{command_list_alias}),} "
		    "#{command_list_usage}";
	}

	ft = format_create(item, FORMAT_NONE, 0);
	format_defaults(ft, NULL, NULL, NULL, NULL);

	for (entryp = cmd_table; *entryp != NULL; entryp++) {
		entry = *entryp;

		format_add(ft, "command_list_name", "%s", entry->name);
		if (entry->alias != NULL)
			s = entry->alias;
		else
			s = "";
		format_add(ft, "command_list_alias", "%s", s);
		if (entry->usage != NULL)
			s = entry->usage;
		else
			s = "";
		format_add(ft, "command_list_usage", "%s", s);

		line = format_expand(ft, template);
		if (*line != '\0')
			cmdq_print(item, "%s", line);
		free(line);
	}

	format_free(ft);
	return (CMD_RETURN_NORMAL);
}
@


1.41
log
@Fixed keys for choose mode, and remove the last mode keys bits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.40 2016/10/16 19:04:05 nicm Exp $ */
d147 1
a147 1
	ft = format_create(item, 0);
@


1.40
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.39 2016/10/14 22:14:22 nicm Exp $ */
a31 1
static enum cmd_retval	cmd_list_keys_table(struct cmd *, struct cmdq_item *);
d39 2
a40 2
	.args = { "t:T:", 0, 0 },
	.usage = "[-t mode-table] [-T key-table]",
a69 3
	if (args_has(args, 't'))
		return (cmd_list_keys_table(self, item));

a124 34
		}
	}

	return (CMD_RETURN_NORMAL);
}

static enum cmd_retval
cmd_list_keys_table(struct cmd *self, struct cmdq_item *item)
{
	struct args			*args = self->args;
	const char			*tablename, *cmdstr;
	const struct mode_key_table	*mtab;
	struct mode_key_binding		*mbind;
	int			 	 width, keywidth;

	tablename = args_get(args, 't');
	if ((mtab = mode_key_findtable(tablename)) == NULL) {
		cmdq_error(item, "unknown key table: %s", tablename);
		return (CMD_RETURN_ERROR);
	}

	keywidth = 0;
	RB_FOREACH(mbind, mode_key_tree, mtab->tree) {
		width = strlen(key_string_lookup_key(mbind->key));
		if (width > keywidth)
			keywidth = width;
	}

	RB_FOREACH(mbind, mode_key_tree, mtab->tree) {
		cmdstr = mode_key_tostring(mtab->cmdstr, mbind->cmd);
		if (cmdstr != NULL) {
			cmdq_print(item, "bind-key -t %s %*s %s",
			    mtab->name, (int)keywidth,
			    key_string_lookup_key(mbind->key), cmdstr);
@


1.39
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.38 2016/10/12 14:50:14 nicm Exp $ */
d30 1
a30 1
static enum cmd_retval	 cmd_list_keys_exec(struct cmd *, struct cmd_q *);
d32 3
a34 2
static enum cmd_retval	 cmd_list_keys_table(struct cmd *, struct cmd_q *);
static enum cmd_retval	 cmd_list_keys_commands(struct cmd *, struct cmd_q *);
d59 1
a59 1
cmd_list_keys_exec(struct cmd *self, struct cmd_q *cmdq)
d69 1
a69 1
		return (cmd_list_keys_commands(self, cmdq));
d72 1
a72 1
		return (cmd_list_keys_table(self, cmdq));
d76 1
a76 1
		cmdq_error(cmdq, "table %s doesn't exist", tablename);
d128 1
a128 1
			cmdq_print(cmdq, "bind-key %s", tmp);
d136 1
a136 1
cmd_list_keys_table(struct cmd *self, struct cmd_q *cmdq)
d146 1
a146 1
		cmdq_error(cmdq, "unknown key table: %s", tablename);
d160 1
a160 1
			cmdq_print(cmdq, "bind-key -t %s %*s %s",
d170 1
a170 1
cmd_list_keys_commands(struct cmd *self, struct cmd_q *cmdq)
d176 1
a176 1
	const char		 *template;
d185 1
a185 1
	ft = format_create(cmdq, 0);
d192 10
a201 8
		if (entry->alias != NULL) {
			format_add(ft, "command_list_alias", "%s",
			    entry->alias);
		}
		if (entry->alias != NULL) {
			format_add(ft, "command_list_usage", "%s",
			    entry->usage);
		}
d205 1
a205 1
			cmdq_print(cmdq, "%s", line);
@


1.38
log
@Drop the edit mode key tables and just use fixed key bindings for the
command prompt.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.37 2016/10/11 07:23:34 nicm Exp $ */
d42 1
a42 1
	.flags = CMD_STARTSERVER,
d53 1
a53 1
	.flags = CMD_STARTSERVER,
@


1.37
log
@Fundamental change to how copy mode key bindings work:

The vi-copy and emacs-copy mode key tables are gone, and instead copy
mode commands are bound in one of two normal key tables ("copy-mode" or
"copy-mode-vi"). Keys are bound to "send-keys -X copy-mode-command". So:

    bind -temacs-copy C-Up scroll-up
    bind -temacs-copy -R5 WheelUpPane scroll-up

Becomes:

    bind -Tcopy-mode C-Up send -X scroll-up
    bind -Tcopy-mode WheelUpPane send -N5 -X scroll-up

This allows the full command parser and command set to be used - for
example, we can use the normal command prompt for searching, jumping,
and so on instead of a custom one:

    bind -Tcopy-mode C-r command-prompt -p'search up' "send -X search-backward '%%'"

command-prompt also gets a -1 option to only require on key press, which
is needed for jumping.

The plan is to get rid of mode keys entirely, so more to come eventually.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.36 2016/09/12 15:40:58 nicm Exp $ */
d138 1
a138 1
	const char			*tablename, *key, *cmdstr, *mode;
d141 1
a141 1
	int			 	 width, keywidth, any_mode;
a149 1
	any_mode = 0;
d151 1
a151 6
		key = key_string_lookup_key(mbind->key);

		if (mbind->mode != 0)
			any_mode = 1;

		width = strlen(key);
a156 5
		key = key_string_lookup_key(mbind->key);

		mode = "";
		if (mbind->mode != 0)
			mode = "c";
d159 3
a161 4
			cmdq_print(cmdq, "bind-key -%st %s%s %*s %s",
			    mode, any_mode && *mode == '\0' ? " " : "",
			    mtab->name,
			    (int)keywidth, key, cmdstr);
@


1.36
log
@Allow repeat count to be specified in mode key tables with bind-key -R,
and set the default repeat count to 5 for WheelUp and WheelDown in
copy-mode.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.35 2016/06/15 08:54:11 nicm Exp $ */
d141 1
a141 2
	char				 repeat[16];
	int			 	 width, keywidth, repeatwidth, any_mode;
d149 1
a149 1
	keywidth = repeatwidth = 0;
a159 7

		if (mbind->repeat != 1) {
			snprintf(repeat, sizeof repeat, "%u", mbind->repeat);
			width = strlen(repeat);
			if (width > repeatwidth)
				repeatwidth = width;
		}
a167 1
		snprintf(repeat, sizeof repeat, "%u", mbind->repeat);
d170 1
a170 2
			cmdq_print(cmdq,
			    "bind-key -%st %s%s%s%*s %*s %s%s%s%s",
d173 1
a173 7
			    mbind->repeat != 1 ? " -R " :
			    (repeatwidth == 0 ? "" : "    "),
			    repeatwidth, mbind->repeat != 1 ? repeat : "",
			    (int)keywidth, key, cmdstr,
			    mbind->arg != NULL ? " \"" : "",
			    mbind->arg != NULL ? mbind->arg : "",
			    mbind->arg != NULL ? "\"": "");
@


1.35
log
@Add -F to list-commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.34 2016/01/19 15:59:12 nicm Exp $ */
d138 1
a138 1
	const char			*tablename;
d141 2
a142 2
	const char			*key, *cmdstr, *mode;
	int			 	 width, keywidth, any_mode;
d150 1
a150 1
	width = 0;
d158 10
a167 3
		keywidth = strlen(key);
		if (keywidth > width)
			width = keywidth;
d176 1
d179 2
a180 1
			cmdq_print(cmdq, "bind-key -%st %s%s %*s %s%s%s%s",
d182 5
a186 1
			    mtab->name, (int) width, key, cmdstr,
@


1.34
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.33 2015/12/15 00:52:17 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_list_keys_exec(struct cmd *, struct cmd_q *);
d32 2
a33 2
enum cmd_retval	 cmd_list_keys_table(struct cmd *, struct cmd_q *);
enum cmd_retval	 cmd_list_keys_commands(struct cmd_q *);
d50 2
a51 2
	.args = { "", 0, 0 },
	.usage = "",
d57 1
a57 1
enum cmd_retval
d68 1
a68 1
		return (cmd_list_keys_commands(cmdq));
d134 1
a134 1
enum cmd_retval
d183 2
a184 2
enum cmd_retval
cmd_list_keys_commands(struct cmd_q *cmdq)
d186 1
d189 12
d204 9
a212 3
		if (entry->alias == NULL) {
			cmdq_print(cmdq, "%s %s", entry->name, entry->usage);
			continue;
d214 5
a218 2
		cmdq_print(cmdq, "%s (%s) %s", entry->name, entry->alias,
		    entry->usage);
d221 1
@


1.33
log
@Allow list-keys and list-commands to be run without a running server.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.32 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.32
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.31 2015/11/27 15:06:43 nicm Exp $ */
d42 1
a42 1
	.flags = 0,
d53 1
a53 1
	.flags = 0,
@


1.31
log
@Do not set a limit on the length of commands when printing them.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.30 2015/11/18 14:27:44 nicm Exp $ */
d36 8
a43 5
	"list-keys", "lsk",
	"t:T:", 0, 0,
	"[-t mode-table] [-T key-table]",
	0,
	cmd_list_keys_exec
d47 8
a54 5
	"list-commands", "lscm",
	"", 0, 0,
	"",
	0,
	cmd_list_keys_exec
@


1.30
log
@Use __unused rather than rolling our own.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.29 2015/11/12 12:43:36 nicm Exp $ */
a58 1
	size_t			 used;
d117 3
a119 5
			used = strlen(tmp);
			if (used < (sizeof tmp) - 1) {
				cmd_list_print(bd->cmdlist, tmp + used,
				    (sizeof tmp) - used);
			}
@


1.29
log
@Add utf8_padcstr and use it to align columns in list-keys.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.28 2015/11/12 11:05:34 nicm Exp $ */
d33 1
a33 1
enum cmd_retval	 cmd_list_keys_commands(struct cmd *, struct cmd_q *);
d63 1
a63 1
		return (cmd_list_keys_commands(self, cmdq));
d181 1
a181 1
cmd_list_keys_commands(unused struct cmd *self, struct cmd_q *cmdq)
@


1.28
log
@Support UTF-8 key bindings by expanding the key type from int to
uint64_t and converting UTF-8 to Unicode on input and the reverse on
output. (This allows key bindings, there are still omissions - the
largest being that the various prompts do not accept UTF-8.)
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.27 2015/10/26 22:03:04 nicm Exp $ */
d21 1
d58 1
a58 1
	char			 tmp[BUFSIZ];
a60 1
	u_int			 i;
d85 1
a85 1
			width = strlen(table->name);
d106 14
a119 7
			used = xsnprintf(tmp, sizeof tmp, "%s-T %-*s %s", r,
			    (int)tablewidth, table->name, key);
			for (i = 0; i < keywidth - utf8_cstrwidth(key); i++) {
				if (strlcat(tmp, " ", sizeof tmp) < sizeof tmp)
					used++;
			}
			if (used < sizeof tmp) {
@


1.27
log
@Handle unknown keys more gracefully, return a string instead of NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.26 2015/04/20 15:34:56 nicm Exp $ */
d60 1
d87 2
a88 2
				tablewidth =width;
			width = strlen(key);
d106 6
a111 2
			used = xsnprintf(tmp, sizeof tmp, "%s-T %-*s %-*s ", r,
			    (int)tablewidth, table->name, (int)keywidth, key);
@


1.26
log
@Support for multiple key tables to commands to be bound to sequences of
keys. The default key bindings become the "prefix" table and -n the
"root" table. Keys may be bound in new tables with bind -T and
switch-client -T used to specify the table in which the next key should
be looked up. Based on a diff from Keith Amling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.25 2014/10/20 23:27:14 nicm Exp $ */
a79 2
			if (key == NULL)
				continue;
a97 2
			if (key == NULL)
				continue;
a138 2
		if (key == NULL)
			continue;
a149 2
		if (key == NULL)
			continue;
@


1.25
log
@Tidy up some includes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.24 2014/10/20 22:44:30 nicm Exp $ */
d36 2
a37 2
	"t:", 0, 0,
	"[-t key-table]",
d54 1
d56 2
a57 2
	const char		*key;
	char			 tmp[BUFSIZ], flags[8];
d59 1
a59 1
	int			 width, keywidth;
d67 5
a71 1
	width = 0;
d73 4
a76 3
	RB_FOREACH(bd, key_bindings, &key_bindings) {
		key = key_string_lookup_key(bd->key & ~KEYC_PREFIX);
		if (key == NULL)
d78 4
a82 2
		keywidth = strlen(key);
		if (!(bd->key & KEYC_PREFIX)) {
d84 9
a92 7
				keywidth += 4;
			else
				keywidth += 3;
		} else if (bd->can_repeat)
			keywidth += 3;
		if (keywidth > width)
			width = keywidth;
d95 2
a96 3
	RB_FOREACH(bd, key_bindings, &key_bindings) {
		key = key_string_lookup_key(bd->key & ~KEYC_PREFIX);
		if (key == NULL)
d98 9
a106 5

		*flags = '\0';
		if (!(bd->key & KEYC_PREFIX)) {
			if (bd->can_repeat)
				xsnprintf(flags, sizeof flags, "-rn ");
d108 7
a114 8
				xsnprintf(flags, sizeof flags, "-n ");
		} else if (bd->can_repeat)
			xsnprintf(flags, sizeof flags, "-r ");

		used = xsnprintf(tmp, sizeof tmp, "%s%*s ",
		    flags, (int) (width - strlen(flags)), key);
		if (used >= sizeof tmp)
			continue;
d116 2
a117 2
		cmd_list_print(bd->cmdlist, tmp + used, (sizeof tmp) - used);
		cmdq_print(cmdq, "bind-key %s", tmp);
@


1.24
log
@Move list-commands into list-keys.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.23 2014/10/20 22:29:25 nicm Exp $ */
d168 1
a168 1
	struct cmd_entry	 *entry;
@


1.23
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.22 2013/10/10 12:00:20 nicm Exp $ */
d30 1
d32 1
d42 8
d60 3
d159 19
@


1.22
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.21 2013/03/24 09:54:10 nicm Exp $ */
a36 1
	NULL,
@


1.21
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.20 2013/03/22 15:52:40 nicm Exp $ */
a36 1
	NULL,
@


1.20
log
@Add copy-pipe mode command to copy selection and also pipe to a command.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.19 2012/10/15 21:53:30 nicm Exp $ */
d29 2
a30 2
enum cmd_retval	 cmd_list_keys_exec(struct cmd *, struct cmd_ctx *);
enum cmd_retval	 cmd_list_keys_table(struct cmd *, struct cmd_ctx *);
d43 1
a43 1
cmd_list_keys_exec(struct cmd *self, struct cmd_ctx *ctx)
d53 1
a53 1
		return (cmd_list_keys_table(self, ctx));
d94 1
a94 1
		ctx->print(ctx, "bind-key %s", tmp);
d101 1
a101 1
cmd_list_keys_table(struct cmd *self, struct cmd_ctx *ctx)
d112 1
a112 1
		ctx->error(ctx, "unknown key table: %s", tablename);
d141 1
a141 1
			ctx->print(ctx, "bind-key -%st %s%s %*s %s%s%s%s",
@


1.19
log
@Fix some function prototypes from Helmut Tessarek.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.18 2012/07/11 07:10:15 nicm Exp $ */
d141 1
a141 1
			ctx->print(ctx, "bind-key -%st %s%s %*s %s",
d143 4
a146 1
			    mtab->name, (int) width, key, cmdstr);
@


1.18
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.17 2012/01/21 11:12:13 nicm Exp $ */
d100 1
a100 1
int
@


1.17
log
@Use RB trees not SPLAY.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.16 2011/12/27 13:41:50 nicm Exp $ */
d29 2
a30 3
int	cmd_list_keys_exec(struct cmd *, struct cmd_ctx *);

int	cmd_list_keys_table(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
int
d97 1
a97 1
	return (0);
d113 1
a113 1
		return (-1);
d147 1
a147 1
	return (0);
@


1.16
log
@Reset flags on every loop or it is displayed too often, from Chris
Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.15 2011/07/08 15:18:20 nicm Exp $ */
d58 1
a58 1
	SPLAY_FOREACH(bd, key_bindings, &key_bindings) {
d75 1
a75 1
	SPLAY_FOREACH(bd, key_bindings, &key_bindings) {
d119 1
a119 1
	SPLAY_FOREACH(mbind, mode_key_tree, mtab->tree) {
d132 1
a132 1
	SPLAY_FOREACH(mbind, mode_key_tree, mtab->tree) {
@


1.15
log
@flags[] should be initialized. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.14 2011/07/04 00:31:57 nicm Exp $ */
a56 1
	*flags = '\0';
d80 1
@


1.14
log
@Change the list-keys format so that it shows the keys using actual tmux
commands which should be able to be directly copied into the config
file. From Markus Schnalke, tweaked by me.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.13 2011/01/04 00:42:46 nicm Exp $ */
d57 2
@


1.13
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.12 2010/10/20 18:20:36 nicm Exp $ */
d49 1
a49 1
	char			 tmp[BUFSIZ];
d62 8
a69 3
		keywidth = strlen(key) + 1;
		if (!(bd->key & KEYC_PREFIX))
			keywidth += 2;
d78 11
a88 1
		used = xsnprintf(tmp, sizeof tmp, "%*s: ", width, key);
a91 10
		if (!(bd->key & KEYC_PREFIX)) {
			used = strlcat(tmp, "(no prefix) ", sizeof tmp);
			if (used >= sizeof tmp)
				continue;
		}
		if (bd->can_repeat) {
			used = strlcat(tmp, "(repeat) ", sizeof tmp);
			if (used >= sizeof tmp)
				continue;
		}
d93 1
a93 1
		ctx->print(ctx, "%s", tmp);
d107 1
a107 1
	int			 	 width, keywidth;
d116 1
d122 4
a125 1
		keywidth = strlen(key) + 1;
d137 1
a137 1
			mode = "(command mode) ";
d139 5
a143 2
		if (cmdstr != NULL)
			ctx->print(ctx, "%*s: %s%s", width, key, mode, cmdstr);
@


1.12
log
@Mark repeating keys with "(repeat)" in the key list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.11 2009/12/03 22:50:10 nicm Exp $ */
d35 1
d37 4
a40 6
	0, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_list_keys_exec,
	cmd_target_free,
	cmd_target_print
d46 1
a46 1
	struct cmd_target_data	*data = self->data;
d53 1
a53 1
	if (data->target != NULL)
d97 2
a98 1
	struct cmd_target_data		*data = self->data;
d104 3
a106 2
	if ((mtab = mode_key_findtable(data->target)) == NULL) {
		ctx->error(ctx, "unknown key table: %s", data->target);
@


1.11
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.10 2009/11/18 10:18:25 nicm Exp $ */
d80 5
@


1.10
log
@Mark -n keys with (no prefix) rather than [].
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.9 2009/11/13 19:53:29 nicm Exp $ */
d78 1
a78 1
 		if (!(bd->key & KEYC_PREFIX)) {
@


1.9
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.8 2009/11/05 12:04:50 nicm Exp $ */
d74 1
a74 4
		if (!(bd->key & KEYC_PREFIX))
			used = xsnprintf(tmp, sizeof tmp, "[%s]: ", key);
		else
			used = xsnprintf(tmp, sizeof tmp, "%*s: ", width, key);
d78 5
@


1.8
log
@key_string_lookup_key uses a static buffer, so copy its output into the working
buffer before calling the command print function which can also use it (eg
send-keys).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.7 2009/07/28 17:05:10 nicm Exp $ */
d36 1
a36 1
	0, 0,
@


1.7
log
@Final pieces of mode key rebinding: bind-key and unbind-key now accept a -t
argument to modify a table.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.6 2009/07/28 07:03:32 nicm Exp $ */
d50 2
a51 1
	char			 tmp[BUFSIZ], keytmp[64];
d74 6
d81 2
a82 7
		*tmp = '\0';
		cmd_list_print(bd->cmdlist, tmp, sizeof tmp);
		if (!(bd->key & KEYC_PREFIX)) {
			xsnprintf(keytmp, sizeof keytmp, "[%s]", key);
			key = keytmp;
		}
		ctx->print(ctx, "%*s: %s", width, key, tmp);
@


1.6
log
@Next step towards customisable mode keys: build each default table of keys into
a named tree on start and use that for lookups. Also add command to string
translation tables and modify list-keys to show the the mode key bindings (new
-t argument).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.5 2009/07/26 12:58:44 nicm Exp $ */
d95 1
a95 5
	for (mtab = mode_key_tables; mtab->name != NULL; mtab++) {
		if (strcasecmp(data->target, mtab->name) == 0)
			break;
	}
	if (mtab->name == NULL) {
@


1.5
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.4 2009/07/24 14:52:47 nicm Exp $ */
d31 2
d35 1
a35 1
	"",
d37 2
a38 2
	NULL,
	NULL,
d40 2
a41 2
	NULL,
	NULL
d45 1
a45 1
cmd_list_keys_exec(unused struct cmd *self, struct cmd_ctx *ctx)
d47 1
d53 3
d81 45
@


1.4
log
@Permit commands to be bound to key presses without the prefix key first. The
new -n flag to bind-key and unbind-key sets or removes these bindings, and
list-key shows them in []s.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.3 2009/07/21 22:41:00 nicm Exp $ */
a37 2
	NULL,
	NULL,
@


1.3
log
@Adjust field width to fit longest key when listing.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d49 2
a50 2
	char			 tmp[BUFSIZ];
	int		       	 width, keywidth;
d54 2
a55 1
		if ((key = key_string_lookup_key(bd->key)) == NULL)
d59 2
a64 1

d66 2
a67 1
		if ((key = key_string_lookup_key(bd->key)) == NULL)
d72 4
a75 1

@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-keys.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d21 2
d50 12
d69 2
a70 1
		ctx->print(ctx, "%11s: %s", key, tmp);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d32 1
a32 1
	0,
@

