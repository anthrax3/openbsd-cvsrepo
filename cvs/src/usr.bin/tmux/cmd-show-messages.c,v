head	1.25;
access;
symbols
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.25
date	2017.03.17.14.51.41;	author nicm;	state Exp;
branches;
next	1.24;
commitid	VmkxcKnOD0hvLXmg;

1.24
date	2017.01.24.19.59.19;	author nicm;	state Exp;
branches;
next	1.23;
commitid	qkc1IobTNIhHitel;

1.23
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.22;
commitid	pxm6osuE99zELpkU;

1.22
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.21;
commitid	S3IpyYTkmviA6lfM;

1.21
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.20;
commitid	TaZ3kOtGiWwKofka;

1.20
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.19;
commitid	P3qmSOx6KrDBsb0c;

1.19
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.18;
commitid	rE682EC14v4gpeFy;

1.18
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.17;
commitid	gsQkQsSyBCSmU9ax;

1.17
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.16;
commitid	uzMkp8Z4FE6WB6s6;

1.16
date	2015.11.24.21.52.06;	author nicm;	state Exp;
branches;
next	1.15;
commitid	Wy0S0Ml5dOX2TIOy;

1.15
date	2015.11.24.21.23.44;	author nicm;	state Exp;
branches;
next	1.14;
commitid	DN84xb0YhJcqIygB;

1.14
date	2015.11.24.21.19.46;	author nicm;	state Exp;
branches;
next	1.13;
commitid	WYqwkdfYHZzn9ayb;

1.13
date	2015.07.28.15.18.10;	author nicm;	state Exp;
branches;
next	1.12;
commitid	TNUQ68WbdVxASnmd;

1.12
date	2015.05.12.19.36.08;	author nicm;	state Exp;
branches;
next	1.11;
commitid	YPSsWQNYYB5XjM4q;

1.11
date	2015.04.25.18.33.59;	author nicm;	state Exp;
branches;
next	1.10;
commitid	R776bB84r7VPzyws;

1.10
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.9;
commitid	Gq8hgMoG3t1Wy1Zv;

1.9
date	2014.02.14.13.59.01;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.22.14.43.42;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2013.10.10.12.00.23;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.24.09.27.20;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.18.13.16.33;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Fix a couple of argument types.
@
text
@/* $OpenBSD: cmd-show-messages.c,v 1.24 2017/01/24 19:59:19 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>
#include <time.h>
#include <unistd.h>
#include <vis.h>

#include "tmux.h"

/*
 * Show client message log.
 */

static enum cmd_retval	cmd_show_messages_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_show_messages_entry = {
	.name = "show-messages",
	.alias = "showmsgs",

	.args = { "JTt:", 0, 0 },
	.usage = "[-JT] " CMD_TARGET_CLIENT_USAGE,

	.tflag = CMD_CLIENT,

	.flags = CMD_AFTERHOOK,
	.exec = cmd_show_messages_exec
};

static int	cmd_show_messages_terminals(struct cmdq_item *, int);
static int	cmd_show_messages_jobs(struct cmdq_item *, int);

static int
cmd_show_messages_terminals(struct cmdq_item *item, int blank)
{
	struct tty_term	*term;
	u_int		 i, n;

	n = 0;
	LIST_FOREACH(term, &tty_terms, entry) {
		if (blank) {
			cmdq_print(item, "%s", "");
			blank = 0;
		}
		cmdq_print(item, "Terminal %u: %s [references=%u, flags=0x%x]:",
		    n, term->name, term->references, term->flags);
		n++;
		for (i = 0; i < tty_term_ncodes(); i++)
			cmdq_print(item, "%s", tty_term_describe(term, i));
	}
	return (n != 0);
}

static int
cmd_show_messages_jobs(struct cmdq_item *item, int blank)
{
	struct job	*job;
	u_int		 n;

	n = 0;
	LIST_FOREACH(job, &all_jobs, lentry) {
		if (blank) {
			cmdq_print(item, "%s", "");
			blank = 0;
		}
		cmdq_print(item, "Job %u: %s [fd=%d, pid=%ld, status=%d]",
		    n, job->cmd, job->fd, (long)job->pid, job->status);
		n++;
	}
	return (n != 0);
}

static enum cmd_retval
cmd_show_messages_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c = item->state.c;
	struct message_entry	*msg;
	char			*tim;
	int			 done, blank;

	done = blank = 0;
	if (args_has(args, 'T')) {
		blank = cmd_show_messages_terminals(item, blank);
		done = 1;
	}
	if (args_has(args, 'J')) {
		cmd_show_messages_jobs(item, blank);
		done = 1;
	}
	if (done)
		return (CMD_RETURN_NORMAL);

	TAILQ_FOREACH(msg, &c->message_log, entry) {
		tim = ctime(&msg->msg_time);
		*strchr(tim, '\n') = '\0';

		cmdq_print(item, "%s %s", tim, msg->msg);
	}

	return (CMD_RETURN_NORMAL);
}
@


1.24
log
@server-info can become an alias rather than a command.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.23 2016/10/16 19:04:05 nicm Exp $ */
d84 2
a85 2
		cmdq_print(item, "Job %u: %s [fd=%d, pid=%d, status=%d]",
		    n, job->cmd, job->fd, job->pid, job->status);
@


1.23
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.22 2016/10/14 22:14:22 nicm Exp $ */
a47 11
const struct cmd_entry cmd_server_info_entry = {
	.name = "server-info",
	.alias = "info",

	.args = { "", 0, 0 },
	.usage = "",

	.flags = CMD_AFTERHOOK,
	.exec = cmd_show_messages_exec
};

d101 1
a101 1
	if (args_has(args, 'T') || self->entry == &cmd_server_info_entry) {
d105 1
a105 1
	if (args_has(args, 'J') || self->entry == &cmd_server_info_entry) {
@


1.22
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.21 2016/10/10 21:51:39 nicm Exp $ */
d32 2
a33 1
static enum cmd_retval	 cmd_show_messages_exec(struct cmd *, struct cmd_q *);
d59 2
a60 2
static int	cmd_show_messages_terminals(struct cmd_q *, int);
static int	cmd_show_messages_jobs(struct cmd_q *, int);
d63 1
a63 1
cmd_show_messages_terminals(struct cmd_q *cmdq, int blank)
d71 1
a71 1
			cmdq_print(cmdq, "%s", "");
d74 1
a74 1
		cmdq_print(cmdq, "Terminal %u: %s [references=%u, flags=0x%x]:",
d78 1
a78 1
			cmdq_print(cmdq, "%s", tty_term_describe(term, i));
d84 1
a84 1
cmd_show_messages_jobs(struct cmd_q *cmdq, int blank)
d92 1
a92 1
			cmdq_print(cmdq, "%s", "");
d95 1
a95 1
		cmdq_print(cmdq, "Job %u: %s [fd=%d, pid=%d, status=%d]",
d103 1
a103 1
cmd_show_messages_exec(struct cmd *self, struct cmd_q *cmdq)
d106 1
a106 1
	struct client		*c = cmdq->state.c;
d113 1
a113 1
		blank = cmd_show_messages_terminals(cmdq, blank);
d117 1
a117 1
		cmd_show_messages_jobs(cmdq, blank);
d127 1
a127 1
		cmdq_print(cmdq, "%s %s", tim, msg->msg);
@


1.21
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.20 2016/01/19 15:59:12 nicm Exp $ */
d43 1
a43 1
	.flags = 0,
d54 1
a54 1
	.flags = 0,
@


1.20
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.19 2015/12/14 00:31:54 nicm Exp $ */
d32 1
a32 1
enum cmd_retval	 cmd_show_messages_exec(struct cmd *, struct cmd_q *);
d58 2
a59 2
int	cmd_show_messages_terminals(struct cmd_q *, int);
int	cmd_show_messages_jobs(struct cmd_q *, int);
d61 1
a61 1
int
d82 1
a82 1
int
d101 1
a101 1
enum cmd_retval
@


1.19
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.18 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.18
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.17 2015/12/13 14:32:38 nicm Exp $ */
d41 3
a43 1
	.flags = CMD_CLIENT_T,
@


1.17
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.16 2015/11/24 21:52:06 nicm Exp $ */
d35 8
a42 5
	"show-messages", "showmsgs",
	"JTt:", 0, 0,
	"[-JT] " CMD_TARGET_CLIENT_USAGE,
	CMD_CLIENT_T,
	cmd_show_messages_exec
d46 8
a53 5
	"server-info", "info",
	"", 0, 0,
	"",
	0,
	cmd_show_messages_exec
@


1.16
log
@Remove the -I part of show-messages which isn't really that useful; the
server start time can now be accessed with a new start_time format (use:
tmux display -p '#{t:start_time}')
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.15 2015/11/24 21:23:44 nicm Exp $ */
d38 1
a38 1
	0,
d97 1
a97 1
	struct client		*c;
a112 3

	if ((c = cmd_find_client(cmdq, args_get(args, 't'), 0)) == NULL)
		return (CMD_RETURN_ERROR);
@


1.15
log
@Show libevent version in showmsgs -I.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.14 2015/11/24 21:19:46 nicm Exp $ */
d36 2
a37 2
	"IJTt:", 0, 0,
	"[-IJT] " CMD_TARGET_CLIENT_USAGE,
a49 1
int	cmd_show_messages_server(struct cmd_q *);
a53 17
cmd_show_messages_server(struct cmd_q *cmdq)
{
	char	*tim;

	tim = ctime(&start_time);
	*strchr(tim, '\n') = '\0';

	cmdq_print(cmdq, "started %s", tim);
	cmdq_print(cmdq, "socket path %s", socket_path);
	cmdq_print(cmdq, "protocol version %d", PROTOCOL_VERSION);
	cmdq_print(cmdq, "libevent %s (%s)", event_get_version(),
	    event_get_method());

	return (1);
}

int
a102 4
	if (args_has(args, 'I') || self->entry == &cmd_server_info_entry) {
		blank = cmd_show_messages_server(cmdq);
		done = 1;
	}
@


1.14
log
@Make the log stuff a bit tidier with some helper functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.13 2015/07/28 15:18:10 nicm Exp $ */
d65 2
@


1.13
log
@Tidy up the way terminals are described and move some structs out of tmux.h.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.12 2015/05/12 19:36:08 nicm Exp $ */
a63 1
	cmdq_print(cmdq, "debug level %d", debug_level);
@


1.12
log
@Tidy blank lines when outputting server info.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.11 2015/04/25 18:33:59 nicm Exp $ */
d73 2
a74 5
	struct tty_term				*term;
	const struct tty_term_code_entry	*ent;
	struct tty_code				*code;
	u_int					 i, n;
	char					 out[80];
d85 2
a86 25
		for (i = 0; i < NTTYCODE; i++) {
			ent = &tty_term_codes[i];
			code = &term->codes[ent->code];
			switch (code->type) {
			case TTYCODE_NONE:
				cmdq_print(cmdq, "%4u: %s: [missing]",
				    ent->code, ent->name);
				break;
			case TTYCODE_STRING:
				strnvis(out, code->value.string, sizeof out,
				    VIS_OCTAL|VIS_TAB|VIS_NL);
				cmdq_print(cmdq, "%4u: %s: (string) %s",
				    ent->code, ent->name, out);
				break;
			case TTYCODE_NUMBER:
				cmdq_print(cmdq, "%4u: %s: (number) %d",
				    ent->code, ent->name, code->value.number);
				break;
			case TTYCODE_FLAG:
				cmdq_print(cmdq, "%4u: %s: (flag) %s",
				    ent->code, ent->name,
				    code->value.flag ? "true" : "false");
				break;
			}
		}
@


1.11
log
@Make message log a TAILQ.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.10 2014/10/20 22:29:25 nicm Exp $ */
d50 3
a52 3
void	cmd_show_messages_server(struct cmd_q *);
void	cmd_show_messages_terminals(struct cmd_q *);
void	cmd_show_messages_jobs(struct cmd_q *);
d54 1
a54 1
void
d66 2
d70 2
a71 2
void
cmd_show_messages_terminals(struct cmd_q *cmdq)
d81 5
a85 2
		cmdq_print(cmdq,
		    "Terminal %u: %s [references=%u, flags=0x%x]:",
d114 1
d117 2
a118 2
void
cmd_show_messages_jobs(struct cmd_q *cmdq)
d125 5
a129 2
		cmdq_print(cmdq,
		    "Job %u: %s [fd=%d, pid=%d, status=%d]",
d133 1
d143 1
a143 1
	int			 done;
d145 1
a145 1
	done = 0;
d147 1
a147 1
		cmd_show_messages_server(cmdq);
d151 1
a151 3
		if (done)
			cmdq_print(cmdq, "%s", "");
		cmd_show_messages_terminals(cmdq);
d155 1
a155 3
		if (done)
			cmdq_print(cmdq, "%s", "");
		cmd_show_messages_jobs(cmdq);
@


1.10
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.9 2014/02/14 13:59:01 nicm Exp $ */
a132 1
	u_int			 i;
d158 1
a158 3
	for (i = 0; i < ARRAY_LENGTH(&c->message_log); i++) {
		msg = &ARRAY_ITEM(&c->message_log, i);

@


1.9
log
@Style nit - no space between function name and bracket.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.8 2014/01/22 14:43:42 nicm Exp $ */
a38 1
	NULL,
a46 1
	NULL,
@


1.8
log
@Merge server-info into show-messages and remove some not useful output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.7 2013/10/10 12:00:23 nicm Exp $ */
d52 3
a54 3
void	cmd_show_messages_server (struct cmd_q *);
void	cmd_show_messages_terminals (struct cmd_q *);
void	cmd_show_messages_jobs (struct cmd_q *);
d57 1
a57 1
cmd_show_messages_server (struct cmd_q *cmdq)
d71 1
a71 1
cmd_show_messages_terminals (struct cmd_q *cmdq)
d114 1
a114 1
cmd_show_messages_jobs (struct cmd_q *cmdq)
d139 2
a140 2
	if (args_has (args, 'I') || self->entry == &cmd_server_info_entry) {
		cmd_show_messages_server (cmdq);
d143 1
a143 1
	if (args_has (args, 'T') || self->entry == &cmd_server_info_entry) {
d145 2
a146 2
			cmdq_print (cmdq, "%s", "");
		cmd_show_messages_terminals (cmdq);
d149 1
a149 1
	if (args_has (args, 'J') || self->entry == &cmd_server_info_entry) {
d151 2
a152 2
			cmdq_print (cmdq, "%s", "");
		cmd_show_messages_jobs (cmdq);
@


1.7
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.6 2013/03/24 09:54:10 nicm Exp $ */
d23 2
d36 2
a37 2
	"t:", 0, 0,
	CMD_TARGET_CLIENT_USAGE,
d43 85
d136 21
@


1.6
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.5 2013/03/24 09:27:20 nicm Exp $ */
a36 1
	NULL,
@


1.5
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.4 2012/07/11 07:10:15 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_show_messages_exec(struct cmd *, struct cmd_ctx *);
d43 1
a43 1
cmd_show_messages_exec(struct cmd *self, struct cmd_ctx *ctx)
d51 1
a51 1
	if ((c = cmd_find_client(ctx, args_get(args, 't'), 0)) == NULL)
d60 1
a60 1
		ctx->print(ctx, "%s %s", tim, msg->msg);
@


1.4
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.3 2011/01/04 00:42:47 nicm Exp $ */
d51 1
a51 1
	if ((c = cmd_find_client(ctx, args_get(args, 't'))) == NULL)
@


1.3
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.2 2009/12/03 22:50:10 nicm Exp $ */
d30 1
a30 1
int	cmd_show_messages_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
int
d52 1
a52 1
		return (-1);
d63 1
a63 1
	return (0);
@


1.2
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-messages.c,v 1.1 2009/11/18 13:16:33 nicm Exp $ */
d34 1
d36 4
a39 6
	0, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_show_messages_exec,
	cmd_target_free,
	cmd_target_print
d45 5
a49 5
	struct cmd_target_data		*data = self->data;
	struct client			*c;
	struct message_entry		*msg;
	char				*tim;
	u_int				 i;
d51 1
a51 1
	if ((c = cmd_find_client(ctx, data->target)) == NULL)
@


1.1
log
@Add a per-client log of status line messages displayed while that client
exists. A new message-limit session option sets the maximum number of entries
and a command, show-messages, shows the log (bound to ~ by default).

This (and prompt history) might be better as a single global log but until
there are global options it is easier for them to be per client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-environment.c,v 1.2 2009/11/13 19:53:29 nicm Exp $ */
d60 1
a60 1
		
@

