head	1.31;
access;
symbols
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.31
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.30;
commitid	BLRh0qXo7OVTPhiT;

1.30
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.29;
commitid	pxm6osuE99zELpkU;

1.29
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.28;
commitid	S3IpyYTkmviA6lfM;

1.28
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.27;
commitid	TaZ3kOtGiWwKofka;

1.27
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.26;
commitid	P3qmSOx6KrDBsb0c;

1.26
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.25;
commitid	rE682EC14v4gpeFy;

1.25
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.24;
commitid	gsQkQsSyBCSmU9ax;

1.24
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.23;
commitid	uzMkp8Z4FE6WB6s6;

1.23
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.22;
commitid	ns7JfXpW9TsHrnT3;

1.22
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.21;
commitid	MRfGAYPLeVqV46rT;

1.21
date	2015.09.16.22.40.05;	author nicm;	state Exp;
branches;
next	1.20;
commitid	PL8Rj91w2WNgG3Za;

1.20
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.19;
commitid	b1G1TVWY7l4KyoY6;

1.19
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.18;
commitid	Gq8hgMoG3t1Wy1Zv;

1.18
date	2013.10.10.12.00.20;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2012.12.09.23.17.35;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.15.23.21.52;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.26.10.53.16;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.04.14.04.40;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.05.19.37.01;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.28.23.13.00;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.27.20.27.26;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.15.06.52.11;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.08.11.07.27.50;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.15.07.05.38;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.10.17.19.38;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@/* $OpenBSD: cmd-list-panes.c,v 1.30 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "tmux.h"

/*
 * List panes on given window.
 */

static enum cmd_retval	cmd_list_panes_exec(struct cmd *, struct cmdq_item *);

static void	cmd_list_panes_server(struct cmd *, struct cmdq_item *);
static void	cmd_list_panes_session(struct cmd *, struct session *,
		    struct cmdq_item *, int);
static void	cmd_list_panes_window(struct cmd *, struct session *,
		    struct winlink *, struct cmdq_item *, int);

const struct cmd_entry cmd_list_panes_entry = {
	.name = "list-panes",
	.alias = "lsp",

	.args = { "asF:t:", 0, 0 },
	.usage = "[-as] [-F format] " CMD_TARGET_WINDOW_USAGE,

	.tflag = CMD_WINDOW,

	.flags = CMD_AFTERHOOK,
	.exec = cmd_list_panes_exec
};

static enum cmd_retval
cmd_list_panes_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;
	struct session	*s = item->state.tflag.s;
	struct winlink	*wl = item->state.tflag.wl;

	if (args_has(args, 'a'))
		cmd_list_panes_server(self, item);
	else if (args_has(args, 's'))
		cmd_list_panes_session(self, s, item, 1);
	else
		cmd_list_panes_window(self, s, wl, item, 0);

	return (CMD_RETURN_NORMAL);
}

static void
cmd_list_panes_server(struct cmd *self, struct cmdq_item *item)
{
	struct session	*s;

	RB_FOREACH(s, sessions, &sessions)
		cmd_list_panes_session(self, s, item, 2);
}

static void
cmd_list_panes_session(struct cmd *self, struct session *s,
    struct cmdq_item *item, int type)
{
	struct winlink	*wl;

	RB_FOREACH(wl, winlinks, &s->windows)
		cmd_list_panes_window(self, s, wl, item, type);
}

static void
cmd_list_panes_window(struct cmd *self, struct session *s, struct winlink *wl,
    struct cmdq_item *item, int type)
{
	struct args		*args = self->args;
	struct window_pane	*wp;
	u_int			 n;
	struct format_tree	*ft;
	const char		*template;
	char			*line;

	template = args_get(args, 'F');
	if (template == NULL) {
		switch (type) {
		case 0:
			template = "#{pane_index}: "
			    "[#{pane_width}x#{pane_height}] [history "
			    "#{history_size}/#{history_limit}, "
			    "#{history_bytes} bytes] #{pane_id}"
			    "#{?pane_active, (active),}#{?pane_dead, (dead),}";
			break;
		case 1:
			template = "#{window_index}.#{pane_index}: "
			    "[#{pane_width}x#{pane_height}] [history "
			    "#{history_size}/#{history_limit}, "
			    "#{history_bytes} bytes] #{pane_id}"
			    "#{?pane_active, (active),}#{?pane_dead, (dead),}";
			break;
		case 2:
			template = "#{session_name}:#{window_index}."
			    "#{pane_index}: [#{pane_width}x#{pane_height}] "
			    "[history #{history_size}/#{history_limit}, "
			    "#{history_bytes} bytes] #{pane_id}"
			    "#{?pane_active, (active),}#{?pane_dead, (dead),}";
			break;
		}
	}

	n = 0;
	TAILQ_FOREACH(wp, &wl->window->panes, entry) {
		ft = format_create(item, FORMAT_NONE, 0);
		format_add(ft, "line", "%u", n);
		format_defaults(ft, NULL, s, wl, wp);

		line = format_expand(ft, template);
		cmdq_print(item, "%s", line);
		free(line);

		format_free(ft);
		n++;
	}
}
@


1.30
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.29 2016/10/14 22:14:22 nicm Exp $ */
d126 1
a126 1
		ft = format_create(item, 0);
@


1.29
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.28 2016/10/10 21:51:39 nicm Exp $ */
d29 1
a29 1
static enum cmd_retval	 cmd_list_panes_exec(struct cmd *, struct cmd_q *);
d31 1
a31 1
static void	cmd_list_panes_server(struct cmd *, struct cmd_q *);
d33 1
a33 1
		    struct cmd_q *, int);
d35 1
a35 1
		    struct winlink *, struct cmd_q *, int);
d51 1
a51 1
cmd_list_panes_exec(struct cmd *self, struct cmd_q *cmdq)
d54 2
a55 2
	struct session	*s = cmdq->state.tflag.s;
	struct winlink	*wl = cmdq->state.tflag.wl;
d58 1
a58 1
		cmd_list_panes_server(self, cmdq);
d60 1
a60 1
		cmd_list_panes_session(self, s, cmdq, 1);
d62 1
a62 1
		cmd_list_panes_window(self, s, wl, cmdq, 0);
d68 1
a68 1
cmd_list_panes_server(struct cmd *self, struct cmd_q *cmdq)
d73 1
a73 1
		cmd_list_panes_session(self, s, cmdq, 2);
d77 2
a78 2
cmd_list_panes_session(struct cmd *self, struct session *s, struct cmd_q *cmdq,
    int type)
d83 1
a83 1
		cmd_list_panes_window(self, s, wl, cmdq, type);
d88 1
a88 1
    struct cmd_q *cmdq, int type)
d126 1
a126 1
		ft = format_create(cmdq, 0);
d131 1
a131 1
		cmdq_print(cmdq, "%s", line);
@


1.28
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.27 2016/01/19 15:59:12 nicm Exp $ */
d46 1
a46 1
	.flags = 0,
@


1.27
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.26 2015/12/14 00:31:54 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	 cmd_list_panes_exec(struct cmd *, struct cmd_q *);
d31 5
a35 5
void	cmd_list_panes_server(struct cmd *, struct cmd_q *);
void	cmd_list_panes_session(struct cmd *, struct session *, struct cmd_q *,
	    int);
void	cmd_list_panes_window(struct cmd *, struct session *, struct winlink *,
	    struct cmd_q *, int);
d50 1
a50 1
enum cmd_retval
d67 1
a67 1
void
d76 1
a76 1
void
d86 1
a86 1
void
@


1.26
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.25 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.25
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.24 2015/12/13 14:32:38 nicm Exp $ */
d44 3
a46 1
	.flags = CMD_WINDOW_T,
@


1.24
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.23 2015/12/11 12:27:36 nicm Exp $ */
d38 8
a45 5
	"list-panes", "lsp",
	"asF:t:", 0, 0,
	"[-as] [-F format] " CMD_TARGET_WINDOW_USAGE,
	CMD_WINDOW_T,
	cmd_list_panes_exec
@


1.23
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.22 2015/12/08 08:34:18 nicm Exp $ */
d41 1
a41 1
	0,
d49 2
a50 2
	struct session	*s;
	struct winlink	*wl;
d54 1
a54 4
	else if (args_has(args, 's')) {
		s = cmd_find_session(cmdq, args_get(args, 't'), 0);
		if (s == NULL)
			return (CMD_RETURN_ERROR);
d56 1
a56 4
	} else {
		wl = cmd_find_window(cmdq, args_get(args, 't'), &s);
		if (wl == NULL)
			return (CMD_RETURN_ERROR);
a57 1
	}
@


1.22
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.21 2015/09/16 22:40:05 nicm Exp $ */
d128 1
a128 1
		ft = format_create(0);
@


1.21
log
@A few minor style nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.20 2015/02/05 10:29:43 nicm Exp $ */
d128 1
a128 1
		ft = format_create();
@


1.20
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.19 2014/10/20 22:29:25 nicm Exp $ */
a21 1
#include <unistd.h>
d32 4
a35 4
void	cmd_list_panes_session(
	    struct cmd *, struct session *, struct cmd_q *, int);
void	cmd_list_panes_window(struct cmd *,
	    struct session *, struct winlink *, struct cmd_q *, int);
d79 2
a80 2
cmd_list_panes_session(
    struct cmd *self, struct session *s, struct cmd_q *cmdq, int type)
d89 2
a90 2
cmd_list_panes_window(struct cmd *self,
    struct session *s, struct winlink *wl, struct cmd_q *cmdq, int type)
d117 3
a119 3
			template = "#{session_name}:#{window_index}.#{pane_index}: "
			    "[#{pane_width}x#{pane_height}] [history "
			    "#{history_size}/#{history_limit}, "
@


1.19
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.18 2013/10/10 12:00:20 nicm Exp $ */
d131 1
a131 3
		format_session(ft, s);
		format_winlink(ft, s, wl);
		format_window_pane(ft, wp);
@


1.18
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.17 2013/03/24 09:54:10 nicm Exp $ */
a42 1
	NULL,
@


1.17
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.16 2012/12/09 23:17:35 nicm Exp $ */
a42 1
	NULL,
@


1.16
log
@Use the CMD_*_USAGE defines consistently, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.15 2012/07/11 07:10:15 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_list_panes_exec(struct cmd *, struct cmd_ctx *);
d32 1
a32 1
void	cmd_list_panes_server(struct cmd *, struct cmd_ctx *);
d34 1
a34 1
	    struct cmd *, struct session *, struct cmd_ctx *, int);
d36 1
a36 1
	    struct session *, struct winlink *, struct cmd_ctx *, int);
d49 1
a49 1
cmd_list_panes_exec(struct cmd *self, struct cmd_ctx *ctx)
d56 1
a56 1
		cmd_list_panes_server(self, ctx);
d58 1
a58 1
		s = cmd_find_session(ctx, args_get(args, 't'), 0);
d61 1
a61 1
		cmd_list_panes_session(self, s, ctx, 1);
d63 1
a63 1
		wl = cmd_find_window(ctx, args_get(args, 't'), &s);
d66 1
a66 1
		cmd_list_panes_window(self, s, wl, ctx, 0);
d73 1
a73 1
cmd_list_panes_server(struct cmd *self, struct cmd_ctx *ctx)
d78 1
a78 1
		cmd_list_panes_session(self, s, ctx, 2);
d83 1
a83 1
    struct cmd *self, struct session *s, struct cmd_ctx *ctx, int type)
d88 1
a88 1
		cmd_list_panes_window(self, s, wl, ctx, type);
d93 1
a93 1
    struct session *s, struct winlink *wl, struct cmd_ctx *ctx, int type)
d138 1
a138 1
		ctx->print(ctx, "%s", line);
@


1.15
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.14 2012/07/10 11:53:01 nicm Exp $ */
d41 1
a41 1
	"[-as] [-F format] [-t target]",
@


1.14
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.13 2011/11/15 23:21:52 nicm Exp $ */
d30 1
a30 1
int	cmd_list_panes_exec(struct cmd *, struct cmd_ctx *);
d48 1
a48 1
int
d60 1
a60 1
			return (-1);
d65 1
a65 1
			return (-1);
d69 1
a69 1
	return (0);
@


1.13
log
@Add a pane_index format string and use it, from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.12 2011/08/26 10:53:16 nicm Exp $ */
d21 1
d139 1
a139 1
		xfree(line);
@


1.12
log
@Add initial framework for more powerful formatting of command output and
use it for list-{panes,windows,sessions}. This allows more descriptive
replacements (such as #{session_name}) and conditionals.

Later this will be used for status_replace and list-keys and other
places.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.11 2011/07/04 14:04:40 nicm Exp $ */
d105 1
a105 1
			template = "#{line}: "
d112 1
a112 1
			template = "#{window_index}.#{line}: "
d119 1
a119 1
			template = "#{session_name}:#{window_index}.#{line}: "
@


1.11
log
@Show full targets for lsp/lsw -a.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.10 2011/04/05 19:37:01 nicm Exp $ */
d31 4
a34 3
void	cmd_list_panes_server(struct cmd_ctx *);
void	cmd_list_panes_session(struct session *, struct cmd_ctx *, int);
void	cmd_list_panes_window(
d39 2
a40 2
	"ast:", 0, 0,
	"[-as] [-t target]",
d55 1
a55 1
		cmd_list_panes_server(ctx);
d60 1
a60 1
		cmd_list_panes_session(s, ctx, 1);
d65 1
a65 1
		cmd_list_panes_window(s, wl, ctx, 0);
d72 1
a72 1
cmd_list_panes_server(struct cmd_ctx *ctx)
d77 1
a77 1
		cmd_list_panes_session(s, ctx, 2);
d81 2
a82 1
cmd_list_panes_session(struct session *s, struct cmd_ctx *ctx, int type)
d87 1
a87 1
		cmd_list_panes_window(s, wl, ctx, type);
d91 1
a91 1
cmd_list_panes_window(
d94 1
d96 4
a99 16
	struct grid		*gd;
	struct grid_line	*gl;
	u_int			 i, n;
	unsigned long long	 size;

	n = 0;
	TAILQ_FOREACH(wp, &wl->window->panes, entry) {
		gd = wp->base.grid;

		size = 0;
		for (i = 0; i < gd->hsize; i++) {
			gl = &gd->linedata[i];
			size += gl->cellsize * sizeof *gl->celldata;
			size += gl->utf8size * sizeof *gl->utf8data;
		}
		size += gd->hsize * sizeof *gd->linedata;
d101 2
d105 5
a109 5
			ctx->print(ctx,
			    "%u: [%ux%u] [history %u/%u, %llu bytes] %%%u%s%s",
			    n, wp->sx, wp->sy, gd->hsize, gd->hlimit, size,
			    wp->id, wp == wp->window->active ? " (active)" : "",
			    wp->fd == -1 ? " (dead)" : "");
d112 5
a116 6
			ctx->print(ctx,
			    "%d.%u: [%ux%u] [history %u/%u, %llu bytes] "
			    "%%%u%s%s", wl->idx,
			    n, wp->sx, wp->sy, gd->hsize, gd->hlimit, size,
			    wp->id, wp == wp->window->active ? " (active)" : "",
			    wp->fd == -1 ? " (dead)" : "");
d119 5
a123 6
			ctx->print(ctx,
			    "%s:%d.%u: [%ux%u] [history %u/%u, %llu bytes] "
			    "%%%u%s%s", s->name, wl->idx,
			    n, wp->sx, wp->sy, gd->hsize, gd->hlimit, size,
			    wp->id, wp == wp->window->active ? " (active)" : "",
			    wp->fd == -1 ? " (dead)" : "");
d126 15
@


1.10
log
@Add a flag to cmd_find_session so that attach-session can prefer
unattached sessions when choosing the most recently used (if -t is not
given). Suggested by claudio@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.9 2011/03/28 23:13:00 nicm Exp $ */
d32 3
a34 2
void	cmd_list_panes_session(struct session *, struct cmd_ctx *);
void	cmd_list_panes_window(struct winlink *, struct cmd_ctx *);
d59 1
a59 1
		cmd_list_panes_session(s, ctx);
d61 1
a61 1
		wl = cmd_find_window(ctx, args_get(args, 't'), NULL);
d64 1
a64 1
		cmd_list_panes_window(wl, ctx);
d76 1
a76 1
		cmd_list_panes_session(s, ctx);
d80 1
a80 1
cmd_list_panes_session(struct session *s, struct cmd_ctx *ctx)
d85 1
a85 1
		cmd_list_panes_window(wl, ctx);
d89 2
a90 1
cmd_list_panes_window(struct winlink *wl, struct cmd_ctx *ctx)
d110 25
a134 5
		ctx->print(ctx,
		    "%u: [%ux%u] [history %u/%u, %llu bytes] %%%u%s%s",
		    n, wp->sx, wp->sy, gd->hsize, gd->hlimit, size, wp->id,
		    wp == wp->window->active ? " (active)" : "",
		    wp->fd == -1 ? " (dead)" : "");
@


1.9
log
@Add -a and -s options to lsp to list all panes in the server or session
respectively. Likewise add -s to lsw. From Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.8 2011/03/27 20:27:26 nicm Exp $ */
d55 1
a55 1
		s = cmd_find_session(ctx, args_get(args, 't'));
@


1.8
log
@Give each pane created in a tmux server a unique id (starting from 0),
put it in the TMUX_PANE environment variable and accept it as a
target. Suggested by and with testing and tweaks from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.7 2011/01/04 00:42:46 nicm Exp $ */
d31 4
d37 2
a38 2
	"t:", 0, 0,
	CMD_TARGET_WINDOW_USAGE,
d48 42
a89 2
	struct args		*args = self->args;
	struct winlink		*wl;
a95 3
	if ((wl = cmd_find_window(ctx, args_get(args, 't'), NULL)) == NULL)
		return (-1);

d108 2
a109 1
		ctx->print(ctx, "%u: [%ux%u] [history %u/%u, %llu bytes] %%%u%s%s",
a114 2

	return (0);
@


1.7
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.6 2010/11/15 06:52:11 nicm Exp $ */
d67 2
a68 2
		ctx->print(ctx, "%u: [%ux%u] [history %u/%u, %llu bytes]%s%s",
		    n, wp->sx, wp->sy, gd->hsize, gd->hlimit, size,
@


1.6
log
@Show more window and pane flags in list-* output, and put layout on the
same line.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.5 2010/08/11 07:27:50 nicm Exp $ */
d33 1
d35 4
a38 6
	0, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_list_panes_exec,
	cmd_target_free,
	cmd_target_print
d44 1
a44 1
	struct cmd_target_data	*data = self->data;
d52 1
a52 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
@


1.5
log
@Show which pane is active in the list-panes output, suggested by Dominik
Honnef.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.4 2009/12/03 22:50:10 nicm Exp $ */
d68 1
a68 1
		ctx->print(ctx, "%u: [%ux%u] [history %u/%u, %llu bytes]%s",
d70 2
a71 1
		    wp == wp->window->active ? " (active)" : "");
@


1.4
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.3 2009/11/13 19:53:29 nicm Exp $ */
d68 3
a70 2
		ctx->print(ctx, "%u: [%ux%u] [history %u/%u, %llu bytes]",
		    n, wp->sx, wp->sy, gd->hsize, gd->hlimit, size);
@


1.3
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.2 2009/10/15 07:05:38 nicm Exp $ */
d26 1
a26 1
 * List panes on given window..
d59 1
a59 1
		
d67 1
a67 1
		
@


1.2
log
@The pane pty name isn't useful for anything so show the pane number instead.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-panes.c,v 1.1 2009/10/10 17:19:38 nicm Exp $ */
d34 1
a34 1
	0, 0,
@


1.1
log
@Split list-panes off from list-windows.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d50 1
a50 1
	u_int			 i;
a51 1
	const char		*name;
d56 1
d68 3
a70 7
		name = NULL;
		if (wp->fd != -1)
			name = ttyname(wp->fd);
		if (name == NULL)
			name = "unknown";
		ctx->print(ctx, "%s [%ux%u] [history %u/%u, %llu bytes]",
		    name, wp->sx, wp->sy, gd->hsize, gd->hlimit, size);
@

