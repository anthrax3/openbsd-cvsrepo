head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2017.01.18.10.08.05;	author nicm;	state Exp;
branches;
next	1.16;
commitid	xB3kWBq9sJabS6m7;

1.16
date	2017.01.18.10.00.50;	author nicm;	state Exp;
branches;
next	1.15;
commitid	QBbxtBgaA3Lcic0n;

1.15
date	2016.10.11.13.21.59;	author nicm;	state Exp;
branches;
next	1.14;
commitid	80rgEIPcNpyBnf95;

1.14
date	2016.10.10.13.54.47;	author nicm;	state Exp;
branches;
next	1.13;
commitid	OFXFRx5WnTtCw3R9;

1.13
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.12;
commitid	P3qmSOx6KrDBsb0c;

1.12
date	2015.11.27.15.06.43;	author nicm;	state Exp;
branches;
next	1.11;
commitid	UkIx5fVf8smc7ree;

1.11
date	2015.08.29.23.19.52;	author nicm;	state Exp;
branches;
next	1.10;
commitid	lH5qyru4sbPQeeeg;

1.10
date	2014.10.20.23.27.14;	author nicm;	state Exp;
branches;
next	1.9;
commitid	BAMrPS0saBiCc8HD;

1.9
date	2014.04.11.19.35.54;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.15.11.44.18;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2014.01.09.13.51.57;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.17.20.19.36;	author okan;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.31.12.19.34;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.09.01.36.42;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.30.12.09.30;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Plain stravis() because it will mangle UTF-8 characters, so add
utf8_stravis() which calls our existing utf8_strvis() and use it instead
@
text
@/* $OpenBSD: arguments.c,v 1.16 2017/01/18 10:00:50 nicm Exp $ */

/*
 * Copyright (c) 2010 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <getopt.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <vis.h>

#include "tmux.h"

/*
 * Manipulate command arguments.
 */

struct args_entry {
	u_char			 flag;
	char			*value;
	RB_ENTRY(args_entry)	 entry;
};

static void			 args_set(struct args *, u_char, const char *);
static struct args_entry	*args_find(struct args *, u_char);

static int	args_cmp(struct args_entry *, struct args_entry *);
RB_GENERATE_STATIC(args_tree, args_entry, entry, args_cmp);

/* Arguments tree comparison function. */
static int
args_cmp(struct args_entry *a1, struct args_entry *a2)
{
	return (a1->flag - a2->flag);
}

/* Find a flag in the arguments tree. */
static struct args_entry *
args_find(struct args *args, u_char ch)
{
	struct args_entry	entry;

	entry.flag = ch;
	return (RB_FIND(args_tree, &args->tree, &entry));
}

/* Parse an argv and argc into a new argument set. */
struct args *
args_parse(const char *template, int argc, char **argv)
{
	struct args	*args;
	int		 opt;

	args = xcalloc(1, sizeof *args);

	optreset = 1;
	optind = 1;

	while ((opt = getopt(argc, argv, template)) != -1) {
		if (opt < 0)
			continue;
		if (opt == '?' || strchr(template, opt) == NULL) {
			args_free(args);
			return (NULL);
		}
		args_set(args, opt, optarg);
	}
	argc -= optind;
	argv += optind;

	args->argc = argc;
	args->argv = cmd_copy_argv(argc, argv);

	return (args);
}

/* Free an arguments set. */
void
args_free(struct args *args)
{
	struct args_entry	*entry;
	struct args_entry	*entry1;

	cmd_free_argv(args->argc, args->argv);

	RB_FOREACH_SAFE(entry, args_tree, &args->tree, entry1) {
		RB_REMOVE(args_tree, &args->tree, entry);
		free(entry->value);
		free(entry);
	}

	free(args);
}

/* Add to string. */
static void printflike(3, 4)
args_print_add(char **buf, size_t *len, const char *fmt, ...)
{
	va_list  ap;
	char	*s;
	size_t	 slen;

	va_start(ap, fmt);
	slen = xvasprintf(&s, fmt, ap);
	va_end(ap);

	*len += slen;
	*buf = xrealloc(*buf, *len);

	strlcat(*buf, s, *len);
	free(s);
}

/* Print a set of arguments. */
char *
args_print(struct args *args)
{
	size_t		 	 len;
	char			*buf, *escaped;
	int			 i, flags;
	struct args_entry	*entry;
	static const char	 quoted[] = " #\"';$";

	len = 1;
	buf = xcalloc(1, len);

	/* Process the flags first. */
	RB_FOREACH(entry, args_tree, &args->tree) {
		if (entry->value != NULL)
			continue;

		if (*buf == '\0')
			args_print_add(&buf, &len, "-");
		args_print_add(&buf, &len, "%c", entry->flag);
	}

	/* Then the flags with arguments. */
	RB_FOREACH(entry, args_tree, &args->tree) {
		if (entry->value == NULL)
			continue;

		if (*buf != '\0')
			args_print_add(&buf, &len, " -%c ", entry->flag);
		else
			args_print_add(&buf, &len, "-%c ", entry->flag);

		flags = VIS_OCTAL|VIS_TAB|VIS_NL;
		if (entry->value[strcspn(entry->value, quoted)] != '\0')
			flags |= VIS_DQ;
		utf8_stravis(&escaped, entry->value, flags);
		if (flags & VIS_DQ)
			args_print_add(&buf, &len, "\"%s\"", escaped);
		else
			args_print_add(&buf, &len, "%s", escaped);
		free(escaped);
	}

	/* And finally the argument vector. */
	for (i = 0; i < args->argc; i++) {
		if (*buf != '\0')
			args_print_add(&buf, &len, " ");

		flags = VIS_OCTAL|VIS_TAB|VIS_NL;
		if (args->argv[i][strcspn(args->argv[i], quoted)] != '\0')
			flags |= VIS_DQ;
		utf8_stravis(&escaped, args->argv[i], flags);
		if (flags & VIS_DQ)
			args_print_add(&buf, &len, "\"%s\"", escaped);
		else
			args_print_add(&buf, &len, "%s", escaped);
		free(escaped);
	}

	return (buf);
}

/* Return if an argument is present. */
int
args_has(struct args *args, u_char ch)
{
	return (args_find(args, ch) == NULL ? 0 : 1);
}

/* Set argument value in the arguments tree. */
static void
args_set(struct args *args, u_char ch, const char *value)
{
	struct args_entry	*entry;

	/* Replace existing argument. */
	if ((entry = args_find(args, ch)) != NULL) {
		free(entry->value);
		entry->value = NULL;
	} else {
		entry = xcalloc(1, sizeof *entry);
		entry->flag = ch;
		RB_INSERT(args_tree, &args->tree, entry);
	}

	if (value != NULL)
		entry->value = xstrdup(value);
}

/* Get argument value. Will be NULL if it isn't present. */
const char *
args_get(struct args *args, u_char ch)
{
	struct args_entry	*entry;

	if ((entry = args_find(args, ch)) == NULL)
		return (NULL);
	return (entry->value);
}

/* Convert an argument value to a number. */
long long
args_strtonum(struct args *args, u_char ch, long long minval, long long maxval,
    char **cause)
{
	const char		*errstr;
	long long 	 	 ll;
	struct args_entry	*entry;

	if ((entry = args_find(args, ch)) == NULL) {
		*cause = xstrdup("missing");
		return (0);
	}

	ll = strtonum(entry->value, minval, maxval, &errstr);
	if (errstr != NULL) {
		*cause = xstrdup(errstr);
		return (0);
	}

	*cause = NULL;
	return (ll);
}
@


1.16
log
@Run arguments through vis() as well when printing them.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.15 2016/10/11 13:21:59 nicm Exp $ */
d165 1
a165 1
		stravis(&escaped, entry->value, flags);
d181 1
a181 1
		stravis(&escaped, args->argv[i], flags);
@


1.15
log
@Add static in window-*.c and move some internal functions out of tmux.h.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.14 2016/10/10 13:54:47 nicm Exp $ */
d25 1
d134 2
a135 2
	char			*buf;
	int			 i;
d137 1
d161 7
a167 2
		if (strchr(entry->value, ' ') != NULL)
			args_print_add(&buf, &len, "\"%s\"", entry->value);
d169 2
a170 1
			args_print_add(&buf, &len, "%s", entry->value);
d177 7
a183 2
		if (strchr(args->argv[i], ' ') != NULL)
			args_print_add(&buf, &len, "\"%s\"", args->argv[i]);
d185 2
a186 1
			args_print_add(&buf, &len, "%s", args->argv[i]);
@


1.14
log
@Some more static.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.13 2016/01/19 15:59:12 nicm Exp $ */
d38 1
a50 24
/* Create an arguments set with no flags. */
struct args *
args_create(int argc, ...)
{
	struct args	*args;
	va_list		 ap;
	int		 i;

	args = xcalloc(1, sizeof *args);

	args->argc = argc;
	if (argc == 0)
		args->argv = NULL;
	else
		args->argv = xcalloc(argc, sizeof *args->argv);

	va_start(ap, argc);
	for (i = 0; i < argc; i++)
		args->argv[i] = xstrdup(va_arg(ap, char *));
	va_end(ap);

	return (args);
}

d186 1
a186 1
void
@


1.13
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.12 2015/11/27 15:06:43 nicm Exp $ */
d38 1
a38 1
struct args_entry	*args_find(struct args *, u_char);
d40 2
a41 1
RB_GENERATE(args_tree, args_entry, entry, args_cmp);
d44 1
a44 1
int
d75 1
a75 1
struct args_entry *
@


1.12
log
@Do not set a limit on the length of commands when printing them.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.11 2015/08/29 23:19:52 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2010 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.11
log
@struct args_entry can go into arguments.c.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.10 2014/10/20 23:27:14 nicm Exp $ */
d131 19
d151 2
a152 2
size_t
args_print(struct args *args, char *buf, size_t len)
d154 2
a155 1
	size_t		 	 off, used;
a156 1
	const char		*quotes;
d159 2
a160 4
	/* There must be at least one byte at the start. */
	if (len == 0)
		return (0);
	off = 0;
a162 1
	buf[off++] = '-';
d167 3
a169 6
		if (off == len - 1) {
			buf[off] = '\0';
			return (len);
		}
		buf[off++] = entry->flag;
		buf[off] = '\0';
a170 2
	if (off == 1)
		buf[--off] = '\0';
d177 4
a180 5
		if (off >= len) {
			/* snprintf will have zero terminated. */
			return (len);
		}

d182 1
a182 1
			quotes = "\"";
d184 1
a184 7
			quotes = "";
		used = xsnprintf(buf + off, len - off, "%s-%c %s%s%s",
		    off != 0 ? " " : "", entry->flag, quotes, entry->value,
		    quotes);
		if (used > len - off)
			used = len - off;
		off += used;
d189 2
a190 5
		if (off >= len) {
			/* snprintf will have zero terminated. */
			return (len);
		}

d192 1
a192 1
			quotes = "\"";
d194 1
a194 6
			quotes = "";
		used = xsnprintf(buf + off, len - off, "%s%s%s%s",
		    off != 0 ? " " : "", quotes, args->argv[i], quotes);
		if (used > len - off)
			used = len - off;
		off += used;
d197 1
a197 1
	return (off);
@


1.10
log
@Tidy up some includes.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.9 2014/04/11 19:35:54 nicm Exp $ */
d31 6
@


1.9
log
@Don't blindly increase offsets by the return value of snprintf, if there
wasn't enough space this will go off the end. Instead clamp to the
available space. Fixes crash reported by Julien Rebetez.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.8 2014/01/15 11:44:18 nicm Exp $ */
d21 1
@


1.8
log
@Couple of fixes from cppcheck via Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.7 2014/01/09 13:51:57 nicm Exp $ */
d128 1
a128 1
	size_t		 	 off;
d168 1
a168 1
		off += xsnprintf(buf + off, len - off, "%s-%c %s%s%s",
d171 3
d187 1
a187 1
		off += xsnprintf(buf + off, len - off, "%s%s%s%s",
d189 3
@


1.7
log
@Simplify args_set, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.6 2013/11/17 20:19:36 okan Exp $ */
a80 1
	char		*ptr;
d91 1
a91 1
		if (opt == '?' || (ptr = strchr(template, opt)) == NULL) {
@


1.6
log
@Include unistd.h as it is the standard location for getopt().

OK millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.5 2013/05/31 12:19:34 nicm Exp $ */
d208 5
a212 5
		if (value != NULL)
			entry->value = xstrdup(value);
		else
			entry->value = NULL;
		return;
a214 2
	entry = xcalloc(1, sizeof *entry);
	entry->flag = ch;
a216 2

	RB_INSERT(args_tree, &args->tree, entry);
@


1.5
log
@Instead of eating 1024 bytes or so for the arguments of each command,
save memory by using an RB tree. From Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.4 2012/07/10 11:53:01 nicm Exp $ */
d23 1
@


1.4
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.3 2011/07/09 01:36:42 nicm Exp $ */
a20 1
#include <bitstring.h>
d26 15
a49 2
	if ((args->flags = bit_alloc(SCHAR_MAX)) == NULL)
		fatal("bit_alloc failed");
d65 10
a83 2
	if ((args->flags = bit_alloc(SCHAR_MAX)) == NULL)
		fatal("bit_alloc failed");
d89 1
a89 1
		if (opt < 0 || opt >= SCHAR_MAX)
d92 1
a92 2
			free(args->flags);
			free(args);
d95 1
a95 6

		bit_set(args->flags, opt);
		if (ptr[1] == ':') {
			free(args->values[opt]);
			args->values[opt] = xstrdup(optarg);
		}
d110 2
a111 1
	u_int	i;
d115 5
a119 2
	for (i = 0; i < SCHAR_MAX; i++)
		free(args->values[i]);
a120 1
	free(args->flags);
d128 4
a131 3
	size_t		 off;
	int		 i;
	const char	*quotes;
d140 2
a141 2
	for (i = 0; i < SCHAR_MAX; i++) {
		if (!bit_test(args->flags, i) || args->values[i] != NULL)
d148 1
a148 1
		buf[off++] = i;
d155 2
a156 2
	for (i = 0; i < SCHAR_MAX; i++) {
		if (!bit_test(args->flags, i) || args->values[i] == NULL)
d164 1
a164 1
		if (strchr(args->values[i], ' ') != NULL)
d169 2
a170 1
		    off != 0 ? " " : "", i, quotes, args->values[i], quotes);
d195 1
a195 1
	return (bit_test(args->flags, ch));
d198 1
a198 1
/* Set argument value. */
d202 14
a215 1
	free(args->values[ch]);
d217 3
a219 4
		args->values[ch] = xstrdup(value);
	else
		args->values[ch] = NULL;
	bit_set(args->flags, ch);
d226 5
a230 1
	return (args->values[ch]);
d235 2
a236 2
args_strtonum(struct args *args,
    u_char ch, long long minval, long long maxval, char **cause)
d238 3
a240 2
	const char	*errstr;
	long long 	 ll;
d242 1
a242 1
	if (!args_has(args, ch)) {
d247 1
a247 1
	ll = strtonum(args->values[ch], minval, maxval, &errstr);
@


1.3
log
@Pass the right size to calloc (* not **).
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.2 2011/01/30 12:09:30 nicm Exp $ */
d72 2
a73 2
			xfree(args->flags);
			xfree(args);
d79 1
a79 2
			if (args->values[opt] != NULL)
				xfree(args->values[opt]);
d100 2
a101 4
	for (i = 0; i < SCHAR_MAX; i++) {
		if (args->values[i] != NULL)
			xfree(args->values[i]);
	}
d103 2
a104 2
	xfree(args->flags);
	xfree(args);
d183 1
a183 2
	if (args->values[ch] != NULL)
		xfree(args->values[ch]);
@


1.2
log
@Free old argument even if setting to NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: arguments.c,v 1.1 2011/01/04 00:42:46 nicm Exp $ */
d43 1
a43 1
		args->argv = xcalloc(argc, sizeof **args->argv);
@


1.1
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd.c,v 1.48 2010/12/30 23:16:18 nicm Exp $ */
d186 3
a188 3
	if (value != NULL) {
		if (args->values[ch] != NULL)
			xfree(args->values[ch]);
d190 2
a191 1
	}
@

