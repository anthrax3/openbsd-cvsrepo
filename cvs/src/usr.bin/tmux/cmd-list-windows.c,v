head	1.43;
access;
symbols
	OPENBSD_6_1:1.41.0.4
	OPENBSD_6_1_BASE:1.41
	OPENBSD_6_0:1.37.0.4
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.37.0.2
	OPENBSD_5_9_BASE:1.37
	OPENBSD_5_8:1.30.0.6
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.27.0.6
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.25.0.2
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.23.0.2
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.2
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.43
date	2017.05.01.12.20.55;	author nicm;	state Exp;
branches;
next	1.42;
commitid	sAXCoXWmq7A1UnAP;

1.42
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.41;
commitid	RXMp6wwG5a5Y82bo;

1.41
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.40;
commitid	BLRh0qXo7OVTPhiT;

1.40
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.39;
commitid	pxm6osuE99zELpkU;

1.39
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.38;
commitid	S3IpyYTkmviA6lfM;

1.38
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.37;
commitid	TaZ3kOtGiWwKofka;

1.37
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.36;
commitid	P3qmSOx6KrDBsb0c;

1.36
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.35;
commitid	rE682EC14v4gpeFy;

1.35
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.34;
commitid	gsQkQsSyBCSmU9ax;

1.34
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.33;
commitid	uzMkp8Z4FE6WB6s6;

1.33
date	2015.12.11.16.37.21;	author nicm;	state Exp;
branches;
next	1.32;
commitid	pfV7j8HdB7hdHnZm;

1.32
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.31;
commitid	ns7JfXpW9TsHrnT3;

1.31
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.30;
commitid	MRfGAYPLeVqV46rT;

1.30
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.29;
commitid	b1G1TVWY7l4KyoY6;

1.29
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.28;
commitid	RV1NOSXD1mUR8LDP;

1.28
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.27;
commitid	Gq8hgMoG3t1Wy1Zv;

1.27
date	2013.10.10.12.00.21;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2012.10.25.11.26.47;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2012.05.28.08.00.46;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2012.05.28.07.59.08;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2012.01.30.20.39.56;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2012.01.30.09.39.34;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2011.09.23.12.23.24;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.26.10.53.16;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.04.14.04.40;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.05.19.37.01;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.28.23.13.00;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2010.11.15.06.52.11;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.29.03.30.13;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.10.17.19.38;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.08.16.05.01;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.08.13.29.27;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.43
log
@In order that people can use formats like #D in #() in the status line
and not have to wait for an update when they change pane, we allow
commands to run more than once a second if the expanded form
changes. Unfortunately this can mean them being run far too often
(pretty much continually) when multiple clients exist, because some
formats (including #D) will always differ between clients.

To avoid this, give each client its own tree of jobs which means that
the same command will be different instances for each client - similar
to how we have the tag to separate commands for different panes.

GitHub issue 889; test case reported by Paul Johnson.
@
text
@/* $OpenBSD: cmd-list-windows.c,v 1.42 2017/04/22 10:22:39 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <unistd.h>

#include "tmux.h"

/*
 * List windows on given session.
 */

#define LIST_WINDOWS_TEMPLATE					\
	"#{window_index}: #{window_name}#{window_flags} "	\
	"(#{window_panes} panes) "				\
	"[#{window_width}x#{window_height}] "			\
	"[layout #{window_layout}] #{window_id}"		\
	"#{?window_active, (active),}";
#define LIST_WINDOWS_WITH_SESSION_TEMPLATE			\
	"#{session_name}:"					\
	"#{window_index}: #{window_name}#{window_flags} "	\
	"(#{window_panes} panes) "				\
	"[#{window_width}x#{window_height}] "

static enum cmd_retval	cmd_list_windows_exec(struct cmd *, struct cmdq_item *);

static void	cmd_list_windows_server(struct cmd *, struct cmdq_item *);
static void	cmd_list_windows_session(struct cmd *, struct session *,
		    struct cmdq_item *, int);

const struct cmd_entry cmd_list_windows_entry = {
	.name = "list-windows",
	.alias = "lsw",

	.args = { "F:at:", 0, 0 },
	.usage = "[-a] [-F format] " CMD_TARGET_SESSION_USAGE,

	.target = { 't', CMD_FIND_SESSION, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_list_windows_exec
};

static enum cmd_retval
cmd_list_windows_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;

	if (args_has(args, 'a'))
		cmd_list_windows_server(self, item);
	else
		cmd_list_windows_session(self, item->target.s, item, 0);

	return (CMD_RETURN_NORMAL);
}

static void
cmd_list_windows_server(struct cmd *self, struct cmdq_item *item)
{
	struct session	*s;

	RB_FOREACH(s, sessions, &sessions)
		cmd_list_windows_session(self, s, item, 1);
}

static void
cmd_list_windows_session(struct cmd *self, struct session *s,
    struct cmdq_item *item, int type)
{
	struct args		*args = self->args;
	struct winlink		*wl;
	u_int			 n;
	struct format_tree	*ft;
	const char		*template;
	char			*line;

	template = args_get(args, 'F');
	if (template == NULL) {
		switch (type) {
		case 0:
			template = LIST_WINDOWS_TEMPLATE;
			break;
		case 1:
			template = LIST_WINDOWS_WITH_SESSION_TEMPLATE;
			break;
		}
	}

	n = 0;
	RB_FOREACH(wl, winlinks, &s->windows) {
		ft = format_create(item->client, item, FORMAT_NONE, 0);
		format_add(ft, "line", "%u", n);
		format_defaults(ft, NULL, s, wl, NULL);

		line = format_expand(ft, template);
		cmdq_print(item, "%s", line);
		free(line);

		format_free(ft);
		n++;
	}
}
@


1.42
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.41 2017/02/03 11:57:27 nicm Exp $ */
d89 1
a89 1
	u_int			n;
d108 1
a108 1
		ft = format_create(item, FORMAT_NONE, 0);
@


1.41
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.40 2016/10/16 19:04:05 nicm Exp $ */
d55 1
a55 1
	.tflag = CMD_SESSION,
d69 1
a69 1
		cmd_list_windows_session(self, item->state.tflag.s, item, 0);
@


1.40
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.39 2016/10/14 22:14:22 nicm Exp $ */
d108 1
a108 1
		ft = format_create(item, 0);
@


1.39
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.38 2016/10/10 21:51:39 nicm Exp $ */
d42 1
a42 1
static enum cmd_retval	 cmd_list_windows_exec(struct cmd *, struct cmd_q *);
d44 1
a44 1
static void	cmd_list_windows_server(struct cmd *, struct cmd_q *);
d46 1
a46 1
		    struct cmd_q *, int);
d62 1
a62 1
cmd_list_windows_exec(struct cmd *self, struct cmd_q *cmdq)
d67 1
a67 1
		cmd_list_windows_server(self, cmdq);
d69 1
a69 1
		cmd_list_windows_session(self, cmdq->state.tflag.s, cmdq, 0);
d75 1
a75 1
cmd_list_windows_server(struct cmd *self, struct cmd_q *cmdq)
d80 1
a80 1
		cmd_list_windows_session(self, s, cmdq, 1);
d85 1
a85 1
    struct cmd_q *cmdq, int type)
d108 1
a108 1
		ft = format_create(cmdq, 0);
d113 1
a113 1
		cmdq_print(cmdq, "%s", line);
@


1.38
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.37 2016/01/19 15:59:12 nicm Exp $ */
d57 1
a57 1
	.flags = 0,
@


1.37
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.36 2015/12/14 00:31:54 nicm Exp $ */
d42 1
a42 1
enum cmd_retval	 cmd_list_windows_exec(struct cmd *, struct cmd_q *);
d44 3
a46 3
void	cmd_list_windows_server(struct cmd *, struct cmd_q *);
void	cmd_list_windows_session(struct cmd *, struct session *,
	    struct cmd_q *, int);
d61 1
a61 1
enum cmd_retval
d74 1
a74 1
void
d83 1
a83 1
void
@


1.36
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.35 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.35
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.34 2015/12/13 14:32:38 nicm Exp $ */
d55 3
a57 1
	.flags = CMD_SESSION_T,
@


1.34
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.33 2015/12/11 16:37:21 nicm Exp $ */
d49 8
a56 5
	"list-windows", "lsw",
	"F:at:", 0, 0,
	"[-a] [-F format] " CMD_TARGET_SESSION_USAGE,
	CMD_SESSION_T,
	cmd_list_windows_exec
@


1.33
log
@Style nits and line wrapping of function declarations.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.32 2015/12/11 12:27:36 nicm Exp $ */
d52 1
a52 1
	0,
a59 1
	struct session	*s;
d63 2
a64 6
	else {
		s = cmd_find_session(cmdq, args_get(args, 't'), 0);
		if (s == NULL)
			return (CMD_RETURN_ERROR);
		cmd_list_windows_session(self, s, cmdq, 0);
	}
@


1.32
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.31 2015/12/08 08:34:18 nicm Exp $ */
d84 2
a85 2
cmd_list_windows_session(
    struct cmd *self, struct session *s, struct cmd_q *cmdq, int type)
@


1.31
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.30 2015/02/05 10:29:43 nicm Exp $ */
d108 1
a108 1
		ft = format_create(0);
@


1.30
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.29 2014/10/20 23:35:28 nicm Exp $ */
d108 1
a108 1
		ft = format_create();
@


1.29
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.28 2014/10/20 22:29:25 nicm Exp $ */
d110 1
a110 3
		format_session(ft, s);
		format_winlink(ft, s, wl);
		format_window_pane(ft, wl->window->active);
@


1.28
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.27 2013/10/10 12:00:21 nicm Exp $ */
d30 12
d45 2
a46 2
void	cmd_list_windows_session(
	    struct cmd *, struct session *, struct cmd_q *, int);
@


1.27
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.26 2013/03/24 09:54:10 nicm Exp $ */
a40 1
	NULL,
@


1.26
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.25 2012/10/25 11:26:47 nicm Exp $ */
a40 1
	NULL,
@


1.25
log
@Add ability to active pane in list-windows and find-window formats, from
Carl Henrik Lunde.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.24 2012/08/14 08:51:53 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_list_windows_exec(struct cmd *, struct cmd_ctx *);
d32 1
a32 1
void	cmd_list_windows_server(struct cmd *, struct cmd_ctx *);
d34 1
a34 1
	    struct cmd *, struct session *, struct cmd_ctx *, int);
d47 1
a47 1
cmd_list_windows_exec(struct cmd *self, struct cmd_ctx *ctx)
d53 1
a53 1
		cmd_list_windows_server(self, ctx);
d55 1
a55 1
		s = cmd_find_session(ctx, args_get(args, 't'), 0);
d58 1
a58 1
		cmd_list_windows_session(self, s, ctx, 0);
d65 1
a65 1
cmd_list_windows_server(struct cmd *self, struct cmd_ctx *ctx)
d70 1
a70 1
		cmd_list_windows_session(self, s, ctx, 1);
d75 1
a75 1
    struct cmd *self, struct session *s, struct cmd_ctx *ctx, int type)
d105 1
a105 1
		ctx->print(ctx, "%s", line);
@


1.24
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.23 2012/07/11 07:10:15 nicm Exp $ */
d102 1
@


1.23
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.22 2012/07/10 11:53:01 nicm Exp $ */
d88 1
a88 3
			template = DEFAULT_WINDOW_TEMPLATE \
				" [layout #{window_layout}] #{window_id}" \
				"#{?window_active, (active),}";
d91 1
a91 1
			template = "#{session_name}:" DEFAULT_WINDOW_TEMPLATE;
@


1.22
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.21 2012/05/28 08:00:46 nicm Exp $ */
d30 1
a30 1
int	cmd_list_windows_exec(struct cmd *, struct cmd_ctx *);
d46 1
a46 1
int
d57 1
a57 1
			return (-1);
d61 1
a61 1
	return (0);
@


1.21
log
@Trim a double space from template.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.20 2012/05/28 07:59:08 nicm Exp $ */
d21 1
d107 1
a107 1
		xfree(line);
@


1.20
log
@Strip layout from choose-windows again (leave in list-windows),
suggested by Romain Francoise, diff from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.19 2012/05/22 11:35:37 nicm Exp $ */
d89 1
a89 1
				" #{?window_active, (active),}";
@


1.19
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.18 2012/01/30 20:39:56 nicm Exp $ */
d87 3
a89 1
			template = DEFAULT_WINDOW_TEMPLATE;
@


1.18
log
@Don't print double spaces in list output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.17 2012/01/30 09:39:34 nicm Exp $ */
d37 1
a37 1
	"aF:t:", 0, 0,
d87 1
a87 5
			template = "#{window_index}: "
			    "#{window_name} "
			    "[#{window_width}x#{window_height}] "
			    "[layout #{window_layout}] #{window_id}"
			    "#{?window_active, (active),}";
d90 1
a90 5
			template = "#{session_name}:#{window_index}: "
			    "#{window_name} "
			    "[#{window_width}x#{window_height}] "
			    "[layout #{window_layout}] #{window_id}"
			    "#{?window_active, (active),}";
@


1.17
log
@Give each window a unique id, like panes but prefixed with @@. Based on
work from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.16 2011/09/23 12:23:24 nicm Exp $ */
d90 1
a90 1
			    "[layout #{window_layout}] #{window_id} "
d97 1
a97 1
			    "[layout #{window_layout}] #{window_id} "
@


1.16
log
@Fix typo: ) -> }.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.15 2011/08/26 10:53:16 nicm Exp $ */
d90 1
a90 1
			    "[layout #{window_layout}]"
d97 1
a97 1
			    "[layout #{window_layout}]"
@


1.15
log
@Add initial framework for more powerful formatting of command output and
use it for list-{panes,windows,sessions}. This allows more descriptive
replacements (such as #{session_name}) and conditionals.

Later this will be used for status_replace and list-keys and other
places.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.14 2011/07/04 14:04:40 nicm Exp $ */
d94 1
a94 1
			template = "#{session_name):#{window_index}: "
@


1.14
log
@Show full targets for lsp/lsw -a.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.13 2011/04/05 19:37:01 nicm Exp $ */
d31 3
a33 2
void	cmd_list_windows_server(struct cmd_ctx *);
void	cmd_list_windows_session(struct session *, struct cmd_ctx *, int);
d37 2
a38 2
	"at:", 0, 0,
	"[-a] " CMD_TARGET_SESSION_USAGE,
d52 1
a52 1
		cmd_list_windows_server(ctx);
d57 1
a57 1
		cmd_list_windows_session(s, ctx, 0);
d64 1
a64 1
cmd_list_windows_server(struct cmd_ctx *ctx)
d69 1
a69 1
		cmd_list_windows_session(s, ctx, 1);
d73 2
a74 1
cmd_list_windows_session(struct session *s, struct cmd_ctx *ctx, int type)
d76 26
a101 2
	struct winlink	*wl;
	char		*layout;
d103 1
d105 11
a115 13
		layout = layout_dump(wl->window);
		if (type) {
			ctx->print(ctx, "%s:%d: %s [%ux%u] [layout %s]%s",
			    s->name, wl->idx, wl->window->name, wl->window->sx,
			    wl->window->sy, layout,
			    wl == s->curw ? " (active)" : "");
		} else {
			ctx->print(ctx, "%d: %s [%ux%u] [layout %s]%s",
			    wl->idx, wl->window->name, wl->window->sx,
			    wl->window->sy, layout,
			    wl == s->curw ? " (active)" : "");
		}
		xfree(layout);
@


1.13
log
@Add a flag to cmd_find_session so that attach-session can prefer
unattached sessions when choosing the most recently used (if -t is not
given). Suggested by claudio@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.12 2011/03/28 23:13:00 nicm Exp $ */
d32 1
a32 1
void	cmd_list_windows_session(struct session *, struct cmd_ctx *);
d56 1
a56 1
		cmd_list_windows_session(s, ctx);
d68 1
a68 1
		cmd_list_windows_session(s, ctx);
d72 1
a72 1
cmd_list_windows_session(struct session *s, struct cmd_ctx *ctx)
d79 11
a89 3
		ctx->print(ctx, "%d: %s [%ux%u] [layout %s]%s",
		    wl->idx, wl->window->name, wl->window->sx, wl->window->sy,
		    layout, wl == s->curw ? " (active)" : "");
@


1.12
log
@Add -a and -s options to lsp to list all panes in the server or session
respectively. Likewise add -s to lsw. From Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.11 2011/01/04 00:42:46 nicm Exp $ */
d53 1
a53 1
		s = cmd_find_session(ctx, args_get(args, 't'));
@


1.11
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.10 2010/11/15 06:52:11 nicm Exp $ */
d31 3
d36 2
a37 2
	"t:", 0, 0,
	CMD_TARGET_SESSION_USAGE,
d49 25
a76 3
	if ((s = cmd_find_session(ctx, args_get(args, 't'))) == NULL)
		return (-1);

a83 2

	return (0);
@


1.10
log
@Show more window and pane flags in list-* output, and put layout on the
same line.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.9 2010/06/29 03:30:13 nicm Exp $ */
d33 1
d35 4
a38 6
	0, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_list_windows_exec,
	cmd_target_free,
	cmd_target_print
d44 4
a47 4
	struct cmd_target_data	*data = self->data;
	struct session		*s;
	struct winlink		*wl;
	char			*layout;
d49 1
a49 1
	if ((s = cmd_find_session(ctx, data->target)) == NULL)
@


1.9
log
@Custom layouts. list-windows command displays the layout as a string (such as
"bb62,159x48,0,0{79x48,0,0,79x48,80,0}") and it can be applied to another
window (with the same number of panes or fewer) using select-layout.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.8 2009/11/13 19:53:29 nicm Exp $ */
a53 2
		ctx->print(ctx, "%d: %s [%ux%u]",
		    wl->idx, wl->window->name, wl->window->sx, wl->window->sy);
d55 3
a57 1
		ctx->print(ctx, "    layout: %s", layout);
@


1.8
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.7 2009/10/10 17:19:38 nicm Exp $ */
d48 1
d56 3
@


1.7
log
@Split list-panes off from list-windows.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.6 2009/08/08 16:05:01 nicm Exp $ */
d34 1
a34 1
	0, 0,
@


1.6
log
@Handle ttyname(3) failure better.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.5 2009/08/08 13:29:27 nicm Exp $ */
a47 7
	struct window		*w;
	struct window_pane	*wp;
	struct grid		*gd;
	struct grid_line	*gl;
	u_int			 i;
	unsigned long long	 size;
	const char		*name;
d53 2
a54 24
		w = wl->window;
		ctx->print(ctx,
		    "%3d: %s [%ux%u]", wl->idx, w->name, w->sx, w->sy);

		TAILQ_FOREACH(wp, &w->panes, entry) {
			gd = wp->base.grid;

			size = 0;
			for (i = 0; i < gd->hsize; i++) {
				gl = &gd->linedata[i];
				size += gl->cellsize * sizeof *gl->celldata;
				size += gl->utf8size * sizeof *gl->utf8data;
			}
			size += gd->hsize * sizeof *gd->linedata;

			name = NULL;
			if (wp->fd != -1)
				name = ttyname(wp->fd);
			if (name == NULL)
				name = "unknown";
			ctx->print(ctx,
			    "     %s [%ux%u] [history %u/%u, %llu bytes]",
			    name, wp->sx, wp->sy, gd->hsize, gd->hlimit, size);
		}
@


1.5
log
@Change the way the grid is stored, previously it was:

- a two-dimensional array of cells;
- a two-dimensional array of utf8 data;
- an array of line lengths.

Now it is a single array of a new struct grid_line each of which represents a
line and containts the length and an array of cells and an array of utf8 data.

This will make it easier to add additional per-line members, such as flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.4 2009/07/26 12:58:44 nicm Exp $ */
d75 1
d78 1
a78 1
			else
@


1.4
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.3 2009/07/19 13:21:40 nicm Exp $ */
d51 1
d69 3
a71 2
				size += gd->size[i] * sizeof **gd->data;
				size += gd->usize[i] * sizeof **gd->udata;
d73 1
a73 2
			size += gd->hsize * (sizeof *gd->data);
			size += gd->hsize * (sizeof *gd->size);
@


1.3
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
a37 2
	cmd_target_send,
	cmd_target_recv,
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-windows.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d81 2
a82 3
			    "     %s [%ux%u %s] [history %u/%u, %llu bytes]",
			    name, wp->sx, wp->sy, layout_name(w), gd->hsize,
			    gd->hlimit, size);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
	0,
@

