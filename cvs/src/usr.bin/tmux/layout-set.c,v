head	1.18;
access;
symbols
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.12
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.18
date	2017.05.15.14.57.29;	author nicm;	state Exp;
branches;
next	1.17;
commitid	WDHPvxYdqRQ2eaCw;

1.17
date	2016.10.11.13.45.47;	author nicm;	state Exp;
branches;
next	1.16;
commitid	m8cwMB6WuKLMPXh5;

1.16
date	2016.10.10.21.29.23;	author nicm;	state Exp;
branches;
next	1.15;
commitid	z4Hr4PZF7Ev93uEJ;

1.15
date	2016.08.03.09.07.02;	author nicm;	state Exp;
branches;
next	1.14;
commitid	PiVgxuhKYG0ljj7x;

1.14
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.13;
commitid	P3qmSOx6KrDBsb0c;

1.13
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.12;
commitid	89xhQafU35Q5MQVC;

1.12
date	2015.08.29.23.55.55;	author nicm;	state Exp;
branches;
next	1.11;
commitid	30I1jbL0UB55CZIu;

1.11
date	2014.04.17.14.45.49;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.09.12.02.07;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.07.23.55.16;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.19.18.35.08;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.08.19.57.03;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.25.20.28.13;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.03.22.24.34;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.28.06.48.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.20.07.31.10;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Notify layout changed when choosing predefined layouts, from Joshua Brot.
@
text
@/* $OpenBSD: layout-set.c,v 1.17 2016/10/11 13:45:47 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>

#include "tmux.h"

/*
 * Set window layouts - predefined methods to arrange windows. These are
 * one-off and generate a layout tree.
 */

static void	layout_set_even_h(struct window *);
static void	layout_set_even_v(struct window *);
static void	layout_set_main_h(struct window *);
static void	layout_set_main_v(struct window *);
static void	layout_set_tiled(struct window *);

static const struct {
	const char	*name;
	void	      	(*arrange)(struct window *);
} layout_sets[] = {
	{ "even-horizontal", layout_set_even_h },
	{ "even-vertical", layout_set_even_v },
	{ "main-horizontal", layout_set_main_h },
	{ "main-vertical", layout_set_main_v },
	{ "tiled", layout_set_tiled },
};

int
layout_set_lookup(const char *name)
{
	u_int	i;
	int	matched = -1;

	for (i = 0; i < nitems(layout_sets); i++) {
		if (strncmp(layout_sets[i].name, name, strlen(name)) == 0) {
			if (matched != -1)	/* ambiguous */
				return (-1);
			matched = i;
		}
	}

	return (matched);
}

u_int
layout_set_select(struct window *w, u_int layout)
{
	if (layout > nitems(layout_sets) - 1)
		layout = nitems(layout_sets) - 1;

	if (layout_sets[layout].arrange != NULL)
		layout_sets[layout].arrange(w);

	w->lastlayout = layout;
	return (layout);
}

u_int
layout_set_next(struct window *w)
{
	u_int	layout;

	if (w->lastlayout == -1)
		layout = 0;
	else {
		layout = w->lastlayout + 1;
		if (layout > nitems(layout_sets) - 1)
			layout = 0;
	}

	if (layout_sets[layout].arrange != NULL)
		layout_sets[layout].arrange(w);
	w->lastlayout = layout;
	return (layout);
}

u_int
layout_set_previous(struct window *w)
{
	u_int	layout;

	if (w->lastlayout == -1)
		layout = nitems(layout_sets) - 1;
	else {
		layout = w->lastlayout;
		if (layout == 0)
			layout = nitems(layout_sets) - 1;
		else
			layout--;
	}

	if (layout_sets[layout].arrange != NULL)
		layout_sets[layout].arrange(w);
	w->lastlayout = layout;
	return (layout);
}

static void
layout_set_even_h(struct window *w)
{
	struct window_pane	*wp;
	struct layout_cell	*lc, *lcnew;
	u_int			 i, n, width, xoff;

	layout_print_cell(w->layout_root, __func__, 1);

	/* Get number of panes. */
	n = window_count_panes(w);
	if (n <= 1)
		return;

	/* How many can we fit? */
	width = (w->sx - (n - 1)) / n;
	if (width < PANE_MINIMUM)
		width = PANE_MINIMUM;

	/* Free the old root and construct a new. */
	layout_free(w);
	lc = w->layout_root = layout_create_cell(NULL);
	layout_set_size(lc, w->sx, w->sy, 0, 0);
	layout_make_node(lc, LAYOUT_LEFTRIGHT);

	/* Build new leaf cells. */
	i = xoff = 0;
	TAILQ_FOREACH(wp, &w->panes, entry) {
		/* Create child cell. */
		lcnew = layout_create_cell(lc);
		layout_set_size(lcnew, width, w->sy, xoff, 0);
		layout_make_leaf(lcnew, wp);
		TAILQ_INSERT_TAIL(&lc->cells, lcnew, entry);

		i++;
		xoff += width + 1;
	}

	/* Allocate any remaining space. */
	if (w->sx > xoff - 1) {
		lc = TAILQ_LAST(&lc->cells, layout_cells);
		layout_resize_adjust(w, lc, LAYOUT_LEFTRIGHT,
		    w->sx - (xoff - 1));
	}

	/* Fix cell offsets. */
	layout_fix_offsets(lc);
	layout_fix_panes(w, w->sx, w->sy);

	layout_print_cell(w->layout_root, __func__, 1);

	notify_window("window-layout-changed", w);
	server_redraw_window(w);
}

static void
layout_set_even_v(struct window *w)
{
	struct window_pane	*wp;
	struct layout_cell	*lc, *lcnew;
	u_int			 i, n, height, yoff;

	layout_print_cell(w->layout_root, __func__, 1);

	/* Get number of panes. */
	n = window_count_panes(w);
	if (n <= 1)
		return;

	/* How many can we fit? */
	height = (w->sy - (n - 1)) / n;
	if (height < PANE_MINIMUM)
		height = PANE_MINIMUM;

	/* Free the old root and construct a new. */
	layout_free(w);
	lc = w->layout_root = layout_create_cell(NULL);
	layout_set_size(lc, w->sx, w->sy, 0, 0);
	layout_make_node(lc, LAYOUT_TOPBOTTOM);

	/* Build new leaf cells. */
	i = yoff = 0;
	TAILQ_FOREACH(wp, &w->panes, entry) {
		/* Create child cell. */
		lcnew = layout_create_cell(lc);
		layout_set_size(lcnew, w->sx, height, 0, yoff);
		layout_make_leaf(lcnew, wp);
		TAILQ_INSERT_TAIL(&lc->cells, lcnew, entry);

		i++;
		yoff += height + 1;
	}

	/* Allocate any remaining space. */
	if (w->sy > yoff - 1) {
		lc = TAILQ_LAST(&lc->cells, layout_cells);
		layout_resize_adjust(w, lc, LAYOUT_TOPBOTTOM,
		    w->sy - (yoff - 1));
	}

	/* Fix cell offsets. */
	layout_fix_offsets(lc);
	layout_fix_panes(w, w->sx, w->sy);

	layout_print_cell(w->layout_root, __func__, 1);

	notify_window("window-layout-changed", w);
	server_redraw_window(w);
}

static void
layout_set_main_h(struct window *w)
{
	struct window_pane	*wp;
	struct layout_cell	*lc, *lcmain, *lcrow, *lcchild;
	u_int			 n, mainheight, otherheight, width, height;
	u_int			 used, i, j, columns, rows, totalrows;

	layout_print_cell(w->layout_root, __func__, 1);

	/* Get number of panes. */
	n = window_count_panes(w);
	if (n <= 1)
		return;
	n--;	/* take off main pane */

	/* How many rows and columns will be needed, not counting main? */
	columns = (w->sx + 1) / (PANE_MINIMUM + 1);	/* maximum columns */
	if (columns == 0)
		columns = 1;
	rows = 1 + (n - 1) / columns;
	columns = 1 + (n - 1) / rows;
	width = (w->sx - (n - 1)) / columns;

	/* Get the main pane height and add one for separator line. */
	mainheight = options_get_number(w->options, "main-pane-height") + 1;

	/* Get the optional other pane height and add one for separator line. */
	otherheight = options_get_number(w->options, "other-pane-height") + 1;

	/*
	 * If an other pane height was specified, honour it so long as it
	 * doesn't shrink the main height to less than the main-pane-height
	 */
	if (otherheight > 1 && w->sy - otherheight > mainheight)
		mainheight = w->sy - otherheight;
	if (mainheight < PANE_MINIMUM + 1)
		mainheight = PANE_MINIMUM + 1;

	/* Try and make everything fit. */
	totalrows = rows * (PANE_MINIMUM + 1) - 1;
	if (mainheight + totalrows > w->sy) {
		if (totalrows + PANE_MINIMUM + 1 > w->sy)
			mainheight = PANE_MINIMUM + 2;
		else
			mainheight = w->sy - totalrows;
		height = PANE_MINIMUM;
	} else
		height = (w->sy - mainheight - (rows - 1)) / rows;

	/* Free old tree and create a new root. */
	layout_free(w);
	lc = w->layout_root = layout_create_cell(NULL);
	layout_set_size(lc, w->sx, mainheight + rows * (height + 1) - 1, 0, 0);
	layout_make_node(lc, LAYOUT_TOPBOTTOM);

	/* Create the main pane. */
	lcmain = layout_create_cell(lc);
	layout_set_size(lcmain, w->sx, mainheight - 1, 0, 0);
	layout_make_leaf(lcmain, TAILQ_FIRST(&w->panes));
	TAILQ_INSERT_TAIL(&lc->cells, lcmain, entry);

	/* Create a grid of the remaining cells. */
	wp = TAILQ_NEXT(TAILQ_FIRST(&w->panes), entry);
	for (j = 0; j < rows; j++) {
		/* If this is the last cell, all done. */
		if (wp == NULL)
			break;

		/* Create the new row. */
		lcrow = layout_create_cell(lc);
		layout_set_size(lcrow, w->sx, height, 0, 0);
		TAILQ_INSERT_TAIL(&lc->cells, lcrow, entry);

		/* If only one column, just use the row directly. */
		if (columns == 1) {
			layout_make_leaf(lcrow, wp);
			wp = TAILQ_NEXT(wp, entry);
			continue;
		}

		/* Add in the columns. */
		layout_make_node(lcrow, LAYOUT_LEFTRIGHT);
		for (i = 0; i < columns; i++) {
			/* Create and add a pane cell. */
			lcchild = layout_create_cell(lcrow);
			layout_set_size(lcchild, width, height, 0, 0);
			layout_make_leaf(lcchild, wp);
			TAILQ_INSERT_TAIL(&lcrow->cells, lcchild, entry);

			/* Move to the next cell. */
			if ((wp = TAILQ_NEXT(wp, entry)) == NULL)
				break;
		}

		/* Adjust the row to fit the full width if necessary. */
		if (i == columns)
			i--;
		used = ((i + 1) * (width + 1)) - 1;
		if (w->sx <= used)
			continue;
		lcchild = TAILQ_LAST(&lcrow->cells, layout_cells);
		layout_resize_adjust(w, lcchild, LAYOUT_LEFTRIGHT,
		    w->sx - used);
	}

	/* Adjust the last row height to fit if necessary. */
	used = mainheight + (rows * height) + rows - 1;
	if (w->sy > used) {
		lcrow = TAILQ_LAST(&lc->cells, layout_cells);
		layout_resize_adjust(w, lcrow, LAYOUT_TOPBOTTOM,
		    w->sy - used);
	}

	/* Fix cell offsets. */
	layout_fix_offsets(lc);
	layout_fix_panes(w, w->sx, w->sy);

	layout_print_cell(w->layout_root, __func__, 1);

	notify_window("window-layout-changed", w);
	server_redraw_window(w);
}

static void
layout_set_main_v(struct window *w)
{
	struct window_pane	*wp;
	struct layout_cell	*lc, *lcmain, *lccolumn, *lcchild;
	u_int			 n, mainwidth, otherwidth, width, height;
	u_int			 used, i, j, columns, rows, totalcolumns;

	layout_print_cell(w->layout_root, __func__, 1);

	/* Get number of panes. */
	n = window_count_panes(w);
	if (n <= 1)
		return;
	n--;	/* take off main pane */

	/* How many rows and columns will be needed, not counting main? */
	rows = (w->sy + 1) / (PANE_MINIMUM + 1);	/* maximum rows */
	if (rows == 0)
		rows = 1;
	columns = 1 + (n - 1) / rows;
	rows = 1 + (n - 1) / columns;
	height = (w->sy - (n - 1)) / rows;

	/* Get the main pane width and add one for separator line. */
	mainwidth = options_get_number(w->options, "main-pane-width") + 1;

	/* Get the optional other pane width and add one for separator line. */
	otherwidth = options_get_number(w->options, "other-pane-width") + 1;

	/*
	 * If an other pane width was specified, honour it so long as it
	 * doesn't shrink the main width to less than the main-pane-width
	 */
	if (otherwidth > 1 && w->sx - otherwidth > mainwidth)
		mainwidth = w->sx - otherwidth;
	if (mainwidth < PANE_MINIMUM + 1)
		mainwidth = PANE_MINIMUM + 1;

	/* Try and make everything fit. */
	totalcolumns = columns * (PANE_MINIMUM + 1) - 1;
	if (mainwidth + totalcolumns > w->sx) {
		if (totalcolumns + PANE_MINIMUM + 1 > w->sx)
			mainwidth = PANE_MINIMUM + 2;
		else
			mainwidth = w->sx - totalcolumns;
		width = PANE_MINIMUM;
	} else
		width = (w->sx - mainwidth - (columns - 1)) / columns;

	/* Free old tree and create a new root. */
	layout_free(w);
	lc = w->layout_root = layout_create_cell(NULL);
	layout_set_size(lc, mainwidth + columns * (width + 1) - 1, w->sy, 0, 0);
	layout_make_node(lc, LAYOUT_LEFTRIGHT);

	/* Create the main pane. */
	lcmain = layout_create_cell(lc);
	layout_set_size(lcmain, mainwidth - 1, w->sy, 0, 0);
	layout_make_leaf(lcmain, TAILQ_FIRST(&w->panes));
	TAILQ_INSERT_TAIL(&lc->cells, lcmain, entry);

	/* Create a grid of the remaining cells. */
	wp = TAILQ_NEXT(TAILQ_FIRST(&w->panes), entry);
	for (j = 0; j < columns; j++) {
		/* If this is the last cell, all done. */
		if (wp == NULL)
			break;

		/* Create the new column. */
		lccolumn = layout_create_cell(lc);
		layout_set_size(lccolumn, width, w->sy, 0, 0);
		TAILQ_INSERT_TAIL(&lc->cells, lccolumn, entry);

		/* If only one row, just use the row directly. */
		if (rows == 1) {
			layout_make_leaf(lccolumn, wp);
			wp = TAILQ_NEXT(wp, entry);
			continue;
		}

		/* Add in the rows. */
		layout_make_node(lccolumn, LAYOUT_TOPBOTTOM);
		for (i = 0; i < rows; i++) {
			/* Create and add a pane cell. */
			lcchild = layout_create_cell(lccolumn);
			layout_set_size(lcchild, width, height, 0, 0);
			layout_make_leaf(lcchild, wp);
			TAILQ_INSERT_TAIL(&lccolumn->cells, lcchild, entry);

			/* Move to the next cell. */
			if ((wp = TAILQ_NEXT(wp, entry)) == NULL)
				break;
		}

		/* Adjust the column to fit the full height if necessary. */
		if (i == rows)
			i--;
		used = ((i + 1) * (height + 1)) - 1;
		if (w->sy <= used)
			continue;
		lcchild = TAILQ_LAST(&lccolumn->cells, layout_cells);
		layout_resize_adjust(w, lcchild, LAYOUT_TOPBOTTOM,
		    w->sy - used);
	}

	/* Adjust the last column width to fit if necessary. */
	used = mainwidth + (columns * width) + columns - 1;
	if (w->sx > used) {
		lccolumn = TAILQ_LAST(&lc->cells, layout_cells);
		layout_resize_adjust(w, lccolumn, LAYOUT_LEFTRIGHT,
		    w->sx - used);
	}

	/* Fix cell offsets. */
	layout_fix_offsets(lc);
	layout_fix_panes(w, w->sx, w->sy);

	layout_print_cell(w->layout_root, __func__, 1);

	notify_window("window-layout-changed", w);
	server_redraw_window(w);
}

void
layout_set_tiled(struct window *w)
{
	struct window_pane	*wp;
	struct layout_cell	*lc, *lcrow, *lcchild;
	u_int			 n, width, height, used;
	u_int			 i, j, columns, rows;

	layout_print_cell(w->layout_root, __func__, 1);

	/* Get number of panes. */
	n = window_count_panes(w);
	if (n <= 1)
		return;

	/* How many rows and columns are wanted? */
	rows = columns = 1;
	while (rows * columns < n) {
		rows++;
		if (rows * columns < n)
			columns++;
	}

	/* What width and height should they be? */
	width = (w->sx - (columns - 1)) / columns;
	if (width < PANE_MINIMUM)
		width = PANE_MINIMUM;
	height = (w->sy - (rows - 1)) / rows;
	if (height < PANE_MINIMUM)
		height = PANE_MINIMUM;

	/* Free old tree and create a new root. */
	layout_free(w);
	lc = w->layout_root = layout_create_cell(NULL);
	layout_set_size(lc, (width + 1) * columns - 1,
	    (height + 1) * rows - 1, 0, 0);
	layout_make_node(lc, LAYOUT_TOPBOTTOM);

	/* Create a grid of the cells. */
	wp = TAILQ_FIRST(&w->panes);
	for (j = 0; j < rows; j++) {
		/* If this is the last cell, all done. */
		if (wp == NULL)
			break;

		/* Create the new row. */
		lcrow = layout_create_cell(lc);
		layout_set_size(lcrow, w->sx, height, 0, 0);
		TAILQ_INSERT_TAIL(&lc->cells, lcrow, entry);

		/* If only one column, just use the row directly. */
		if (n - (j * columns) == 1 || columns == 1) {
			layout_make_leaf(lcrow, wp);
			wp = TAILQ_NEXT(wp, entry);
			continue;
		}

		/* Add in the columns. */
		layout_make_node(lcrow, LAYOUT_LEFTRIGHT);
		for (i = 0; i < columns; i++) {
			/* Create and add a pane cell. */
			lcchild = layout_create_cell(lcrow);
			layout_set_size(lcchild, width, height, 0, 0);
			layout_make_leaf(lcchild, wp);
			TAILQ_INSERT_TAIL(&lcrow->cells, lcchild, entry);

			/* Move to the next cell. */
			if ((wp = TAILQ_NEXT(wp, entry)) == NULL)
				break;
		}

		/*
		 * Adjust the row and columns to fit the full width if
		 * necessary.
		 */
		if (i == columns)
			i--;
		used = ((i + 1) * (width + 1)) - 1;
		if (w->sx <= used)
			continue;
		lcchild = TAILQ_LAST(&lcrow->cells, layout_cells);
		layout_resize_adjust(w, lcchild, LAYOUT_LEFTRIGHT,
		    w->sx - used);
	}

	/* Adjust the last row height to fit if necessary. */
	used = (rows * height) + rows - 1;
	if (w->sy > used) {
		lcrow = TAILQ_LAST(&lc->cells, layout_cells);
		layout_resize_adjust(w, lcrow, LAYOUT_TOPBOTTOM,
		    w->sy - used);
	}

	/* Fix cell offsets. */
	layout_fix_offsets(lc);
	layout_fix_panes(w, w->sx, w->sy);

	layout_print_cell(w->layout_root, __func__, 1);

	notify_window("window-layout-changed", w);
	server_redraw_window(w);
}
@


1.17
log
@Some other stuff that can be local to one file.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.16 2016/10/10 21:29:23 nicm Exp $ */
d168 1
d223 1
d347 1
d471 1
d574 1
@


1.16
log
@Loads more static, except for cmd-*.c and window-*.c.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.15 2016/08/03 09:07:02 nicm Exp $ */
d36 1
a36 1
const struct {
@


1.15
log
@Fix minimum size when pane status line is enabled, reported by Y Petremann.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.14 2016/01/19 15:59:12 nicm Exp $ */
d30 5
a34 5
void	layout_set_even_h(struct window *);
void	layout_set_even_v(struct window *);
void	layout_set_main_h(struct window *);
void	layout_set_main_v(struct window *);
void	layout_set_tiled(struct window *);
d117 1
a117 1
void
d171 1
a171 1
void
d225 1
a225 1
void
d348 1
a348 1
void
@


1.14
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.13 2015/10/27 15:58:42 nicm Exp $ */
d158 2
a159 1
		layout_resize_adjust(lc, LAYOUT_LEFTRIGHT, w->sx - (xoff - 1));
d212 2
a213 1
		layout_resize_adjust(lc, LAYOUT_TOPBOTTOM, w->sy - (yoff - 1));
d327 2
a328 1
		layout_resize_adjust(lcchild, LAYOUT_LEFTRIGHT, w->sx - used);
d335 2
a336 1
		layout_resize_adjust(lcrow, LAYOUT_TOPBOTTOM, w->sy - used);
d450 2
a451 1
		layout_resize_adjust(lcchild, LAYOUT_TOPBOTTOM, w->sy - used);
d458 2
a459 1
		layout_resize_adjust(lccolumn, LAYOUT_LEFTRIGHT, w->sx - used);
d552 2
a553 1
		layout_resize_adjust(lcchild, LAYOUT_LEFTRIGHT, w->sx - used);
d560 2
a561 1
		layout_resize_adjust(lcrow, LAYOUT_TOPBOTTOM, w->sy - used);
@


1.13
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.12 2015/08/29 23:55:55 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.12
log
@Remove some old prototypes and unused functions.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.11 2014/04/17 14:45:49 nicm Exp $ */
d248 1
a248 1
	mainheight = options_get_number(&w->options, "main-pane-height") + 1;
d251 1
a251 1
	otherheight = options_get_number(&w->options, "other-pane-height") + 1;
d369 1
a369 1
	mainwidth = options_get_number(&w->options, "main-pane-width") + 1;
d372 1
a372 1
	otherwidth = options_get_number(&w->options, "other-pane-width") + 1;
@


1.11
log
@Some more long lines.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.10 2011/11/09 12:02:07 nicm Exp $ */
a45 6

const char *
layout_set_name(u_int layout)
{
	return (layout_sets[layout].name);
}
@


1.10
log
@Fix a trivial copy-and-paste error (sx->sy), from Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.9 2011/03/07 23:55:16 nicm Exp $ */
d26 2
a27 2
 * Set window layouts - predefined methods to arrange windows. These are one-off
 * and generate a layout tree.
@


1.9
log
@Prevent tiled producing a corrupt layout when only one column is needed,
from Karl Ferdinand Ebert.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.8 2010/12/19 18:35:08 nicm Exp $ */
d263 2
a264 2
	if (otherheight > 1 && w->sx - otherheight > mainheight)
		mainheight = w->sx - otherheight;
@


1.8
log
@Add other-pane-height and other-pane-width options, allowing the width
or height of the smaller panes in the main-horizontal and main-vertical
layouts to be set. Mostly from David Goodlad.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.7 2010/12/08 19:57:03 nicm Exp $ */
d522 1
a522 1
		if (n - (j * columns) == 1) {
@


1.7
log
@In the built-in layouts, distribute the panes more evenly. Set the
default value of main-pane-width to 80, rather than 81. By Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.6 2010/04/25 20:28:13 nicm Exp $ */
d234 2
a235 2
	u_int			 n, mainheight, width, height, used;
	u_int			 i, j, columns, rows, totalrows;
d255 10
d355 2
a356 2
	u_int			 n, mainwidth, width, height, used;
	u_int			 i, j, columns, rows, totalcolumns;
d376 10
@


1.6
log
@Add a tiled layout, originally from Liam Bedford a while ago, fixed up
by me.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.5 2010/02/03 22:24:34 nicm Exp $ */
d138 3
a140 4
	if (w->sx / n < PANE_MINIMUM + 1)
		width = PANE_MINIMUM + 1;
	else
		width = w->sx / n;
d153 1
a153 1
		layout_set_size(lcnew, width - 1, w->sy, xoff, 0);
d158 1
a158 1
		xoff += width;
d191 3
a193 4
	if (w->sy / n < PANE_MINIMUM + 1)
		height = PANE_MINIMUM + 1;
	else
		height = w->sy / n;
d206 1
a206 1
		layout_set_size(lcnew, w->sx, height - 1, 0, yoff);
d211 1
a211 1
		yoff += height;
d245 2
a246 2
	/* How many rows and columns will be needed? */
	columns = w->sx / (PANE_MINIMUM + 1);	/* maximum columns */
d251 1
a251 1
	width = w->sx / columns;
d265 1
a265 1
		height = PANE_MINIMUM + 1;
d267 1
a267 1
		height = (w->sy - mainheight) / rows;
d272 1
a272 1
	layout_set_size(lc, w->sx, mainheight + rows * height, 0, 0);
d290 1
a290 1
		layout_set_size(lcrow, w->sx, height - 1, 0, 0);
d305 1
a305 1
			layout_set_size(lcchild, width - 1, height - 1, 0, 0);
d317 1
a317 1
		used = ((i + 1) * width) - 1;
d325 1
a325 1
	used = mainheight + (rows * height) - 1;
d356 2
a357 2
	/* How many rows and columns will be needed? */
	rows = w->sy / (PANE_MINIMUM + 1);	/* maximum rows */
d362 1
a362 1
	height = w->sy / rows;
d376 1
a376 1
		width = PANE_MINIMUM + 1;
d378 1
a378 1
		width = (w->sx - mainwidth) / columns;
d383 1
a383 1
	layout_set_size(lc, mainwidth + columns * width, w->sy, 0, 0);
d401 1
a401 1
		layout_set_size(lccolumn, width - 1, w->sy, 0, 0);
d416 1
a416 1
			layout_set_size(lcchild, width - 1, height - 1, 0, 0);
d428 1
a428 1
		used = ((i + 1) * height) - 1;
d436 1
a436 1
	used = mainwidth + (columns * width) - 1;
d475 6
a480 6
	width = w->sx / columns;
	if (width < PANE_MINIMUM + 1)
		width = PANE_MINIMUM + 1;
	height = w->sy / rows;
	if (width < PANE_MINIMUM + 1)
		width = PANE_MINIMUM + 1;
d485 2
a486 1
	layout_set_size(lc, width * columns, height * rows, 0, 0);
d498 1
a498 1
		layout_set_size(lcrow, w->sx, height - 1, 0, 0);
d513 1
a513 1
			layout_set_size(lcchild, width - 1, height - 1, 0, 0);
d528 1
a528 1
		used = ((i + 1) * width) - 1;
d536 1
a536 1
	used = (rows * height) - 1;
@


1.5
log
@Fix divide by zero on small windows with main-* layouts.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.4 2009/12/03 22:50:10 nicm Exp $ */
d34 1
d44 1
d442 99
@


1.4
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.3 2009/07/28 06:48:44 nicm Exp $ */
d247 2
d358 2
@


1.3
log
@If select-layout is not given an argument, repply the last layout used in the
window, if any.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.2 2009/07/20 07:31:10 nicm Exp $ */
d298 1
a298 1
 		/* Add in the columns. */
d315 5
a319 5
 		used = ((i + 1) * width) - 1;
 		if (w->sx <= used)
 			continue;
 		lcchild = TAILQ_LAST(&lcrow->cells, layout_cells);
 		layout_resize_adjust(lcchild, LAYOUT_LEFTRIGHT, w->sx - used);
d425 4
a428 4
 		if (w->sy <= used)
 			continue;
 		lcchild = TAILQ_LAST(&lccolumn->cells, layout_cells);
 		layout_resize_adjust(lcchild, LAYOUT_TOPBOTTOM, w->sy - used);
@


1.2
log
@Kill some dead stores and fix a null pointer deref, found by clang.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.1 2009/07/19 13:21:40 nicm Exp $ */
d77 1
a77 1
	w->layout = layout;
d84 9
a92 1
	u_int	layout = w->layout;
d96 1
a96 4

	w->layout++;
	if (w->layout > nitems(layout_sets) - 1)
		w->layout = 0;
d103 11
a113 1
	u_int	layout = w->layout;
d117 1
a117 5

	if (w->layout == 0)
		w->layout = nitems(layout_sets) - 1;
	else
		w->layout--;
@


1.1
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d125 1
a125 1
	if (w->sx / n < PANE_MINIMUM + 1) {
d127 1
a127 2
		n = UINT_MAX;
	} else
d179 1
a179 1
	if (w->sy / n < PANE_MINIMUM + 1) {
d181 1
a181 2
		n = UINT_MAX;
	} else
@

