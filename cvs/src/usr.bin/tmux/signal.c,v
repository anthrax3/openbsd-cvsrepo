head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.18
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.16
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.12
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.8
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5;
locks; strict;
comment	@ * @;


1.10
date	2016.10.10.21.29.23;	author nicm;	state Exp;
branches;
next	1.9;
commitid	z4Hr4PZF7Ev93uEJ;

1.9
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.8;
commitid	P3qmSOx6KrDBsb0c;

1.8
date	2015.10.27.13.23.24;	author nicm;	state Exp;
branches;
next	1.7;
commitid	g6GdEJXfBNprXHEK;

1.7
date	2014.10.20.23.27.14;	author nicm;	state Exp;
branches;
next	1.6;
commitid	BAMrPS0saBiCc8HD;

1.6
date	2010.08.19.18.29.01;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.14.14.41.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.12.15.05.39;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.04.17.28.16;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.04.08.48.06;	author nicm;	state dead;
branches;
next	1.1;

1.1
date	2010.05.03.16.06.32;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Loads more static, except for cmd-*.c and window-*.c.
@
text
@/* $OpenBSD: signal.c,v 1.9 2016/01/19 15:59:12 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 * Copyright (c) 2010 Romain Francoise <rfrancoise@@debian.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>
#include <signal.h>

#include "tmux.h"

static struct event	ev_sighup;
static struct event	ev_sigchld;
static struct event	ev_sigcont;
static struct event	ev_sigterm;
static struct event	ev_sigusr1;
static struct event	ev_sigwinch;

void
set_signals(void (*handler)(int, short, void *), void *arg)
{
	struct sigaction	sigact;

	memset(&sigact, 0, sizeof sigact);
	sigemptyset(&sigact.sa_mask);
	sigact.sa_flags = SA_RESTART;
	sigact.sa_handler = SIG_IGN;
	if (sigaction(SIGINT, &sigact, NULL) != 0)
		fatal("sigaction failed");
	if (sigaction(SIGPIPE, &sigact, NULL) != 0)
		fatal("sigaction failed");
	if (sigaction(SIGUSR2, &sigact, NULL) != 0)
		fatal("sigaction failed");
	if (sigaction(SIGTSTP, &sigact, NULL) != 0)
		fatal("sigaction failed");

	signal_set(&ev_sighup, SIGHUP, handler, arg);
	signal_add(&ev_sighup, NULL);
	signal_set(&ev_sigchld, SIGCHLD, handler, arg);
	signal_add(&ev_sigchld, NULL);
	signal_set(&ev_sigcont, SIGCONT, handler, arg);
	signal_add(&ev_sigcont, NULL);
	signal_set(&ev_sigterm, SIGTERM, handler, arg);
	signal_add(&ev_sigterm, NULL);
	signal_set(&ev_sigusr1, SIGUSR1, handler, arg);
	signal_add(&ev_sigusr1, NULL);
	signal_set(&ev_sigwinch, SIGWINCH, handler, arg);
	signal_add(&ev_sigwinch, NULL);
}

void
clear_signals(int after_fork)
{
	struct sigaction	sigact;

	memset(&sigact, 0, sizeof sigact);
	sigemptyset(&sigact.sa_mask);
	sigact.sa_flags = SA_RESTART;
	sigact.sa_handler = SIG_DFL;
	if (sigaction(SIGINT, &sigact, NULL) != 0)
		fatal("sigaction failed");
	if (sigaction(SIGPIPE, &sigact, NULL) != 0)
		fatal("sigaction failed");
	if (sigaction(SIGUSR2, &sigact, NULL) != 0)
		fatal("sigaction failed");
	if (sigaction(SIGTSTP, &sigact, NULL) != 0)
		fatal("sigaction failed");

	if (after_fork) {
		if (sigaction(SIGHUP, &sigact, NULL) != 0)
			fatal("sigaction failed");
		if (sigaction(SIGCHLD, &sigact, NULL) != 0)
			fatal("sigaction failed");
		if (sigaction(SIGCONT, &sigact, NULL) != 0)
			fatal("sigaction failed");
		if (sigaction(SIGTERM, &sigact, NULL) != 0)
			fatal("sigaction failed");
		if (sigaction(SIGUSR1, &sigact, NULL) != 0)
			fatal("sigaction failed");
		if (sigaction(SIGWINCH, &sigact, NULL) != 0)
			fatal("sigaction failed");
	} else {
		event_del(&ev_sighup);
		event_del(&ev_sigchld);
		event_del(&ev_sigcont);
		event_del(&ev_sigterm);
		event_del(&ev_sigusr1);
		event_del(&ev_sigwinch);
	}
}
@


1.9
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: signal.c,v 1.8 2015/10/27 13:23:24 nicm Exp $ */
d27 6
a32 6
struct event	ev_sighup;
struct event	ev_sigchld;
struct event	ev_sigcont;
struct event	ev_sigterm;
struct event	ev_sigusr1;
struct event	ev_sigwinch;
@


1.8
log
@Break the common process set up, event loop and imsg dispatch code
between server and client out into a separate internal API. This will
make it easier to add another process.
@
text
@d1 1
a1 1
/* $OpenBSD: signal.c,v 1.7 2014/10/20 23:27:14 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.7
log
@Tidy up some includes.
@
text
@d1 1
a1 1
/* $OpenBSD: signal.c,v 1.6 2010/08/19 18:29:01 nicm Exp $ */
d35 1
a35 1
set_signals(void(*handler)(int, short, unused void *))
d52 1
a52 1
	signal_set(&ev_sighup, SIGHUP, handler, NULL);
d54 1
a54 1
	signal_set(&ev_sigchld, SIGCHLD, handler, NULL);
d56 1
a56 1
	signal_set(&ev_sigcont, SIGCONT, handler, NULL);
d58 1
a58 1
	signal_set(&ev_sigterm, SIGTERM, handler, NULL);
d60 1
a60 1
	signal_set(&ev_sigusr1, SIGUSR1, handler, NULL);
d62 1
a62 1
	signal_set(&ev_sigwinch, SIGWINCH, handler, NULL);
@


1.6
log
@Do not call event_del() for signals after fork(), just use sigaction()
directly instead - calling libevent functions after fork() w/o
event_reinit() is a bad idea, even if in this case it was harmless.
@
text
@d1 1
a1 1
/* $OpenBSD: signal.c,v 1.5 2010/05/14 14:41:06 nicm Exp $ */
d19 2
@


1.5
log
@Use $OpenBSD$.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 1
a65 1
clear_signals(void)
d82 21
a102 6
	event_del(&ev_sighup);
	event_del(&ev_sigchld);
	event_del(&ev_sigcont);
	event_del(&ev_sigterm);
	event_del(&ev_sigusr1);
	event_del(&ev_sigwinch);
@


1.4
log
@Catch SIGHUP and terminate if running as a client. This prevents clients
from being left hanging around when, for example, a SSH session is
disconnected.

ok nicm@@
@
text
@d1 1
a1 1
/* $Id: signal.c,v 1.3 2010/05/04 17:28:16 nicm Exp $ */
@


1.3
log
@Put this back in with the initialisation in the right order.
@
text
@d1 1
a1 1
/* $Id$ */
d25 1
a48 2
	if (sigaction(SIGHUP, &sigact, NULL) != 0)
		fatal("sigaction failed");
d50 2
a80 2
	if (sigaction(SIGHUP, &sigact, NULL) != 0)
		fatal("sigaction failed");
d82 1
@


1.2
log
@Revert last change, it appears to be broken somehow.
@
text
@d1 1
a1 1
/* $OpenBSD: signal.c,v 1.1 2010/05/03 16:06:32 nicm Exp $ */
d20 1
a20 2
#include <sys/types.h>

a21 1
#include <string.h>
d32 1
a32 1
set_signals(void(*handler)(int, short, void *))
@


1.1
log
@Make signal handler setup/teardown two common functions instead of six,
and reset SIGCHLD after fork to fix problems with some shells. From
Romain Francois.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@

