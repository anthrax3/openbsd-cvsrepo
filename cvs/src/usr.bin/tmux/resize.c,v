head	1.24;
access;
symbols
	OPENBSD_6_2:1.24.0.4
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.24
date	2017.08.28.12.36.38;	author nicm;	state Exp;
branches;
next	1.23;
commitid	jveVHok8dlNw4o8H;

1.23
date	2017.05.10.16.48.36;	author nicm;	state Exp;
branches;
next	1.22;
commitid	kQKgShrYWeRPKhz0;

1.22
date	2017.02.08.13.53.32;	author nicm;	state Exp;
branches;
next	1.21;
commitid	o58B3QeQE1FqWAyy;

1.21
date	2017.02.03.21.01.02;	author nicm;	state Exp;
branches;
next	1.20;
commitid	MRFqlgnbMk0ZRnKS;

1.20
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.19;
commitid	j0FZs70gSPCmpqWI;

1.19
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.18;
commitid	P3qmSOx6KrDBsb0c;

1.18
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.17;
commitid	89xhQafU35Q5MQVC;

1.17
date	2015.04.24.23.17.11;	author nicm;	state Exp;
branches;
next	1.16;
commitid	iy4fcaIoXzxOx84I;

1.16
date	2015.04.22.15.32.33;	author nicm;	state Exp;
branches;
next	1.15;
commitid	g5PKK6dkIwS2RVh8;

1.15
date	2015.04.22.15.30.11;	author nicm;	state Exp;
branches;
next	1.14;
commitid	0bmlELm9krdoS6OB;

1.14
date	2014.11.14.02.19.47;	author nicm;	state Exp;
branches;
next	1.13;
commitid	ky6cosN1lXi9yNl0;

1.13
date	2014.11.12.16.00.03;	author nicm;	state Exp;
branches;
next	1.12;
commitid	EhDmiJhjBFrLA5Oo;

1.12
date	2014.03.31.21.37.55;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2013.10.10.11.46.00;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.21.18.46.12;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2012.03.17.22.35.09;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.21.22.37.59;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.22.21.13.13;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.21.01.27.46;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.24.07.02.56;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.14.07.23.36;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Do not forbid targets to specify non-visible panes - the checks for
visibility are better where the target is used. GitHub issue 1049.
@
text
@/* $OpenBSD: resize.c,v 1.23 2017/05/10 16:48:36 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>

#include "tmux.h"

/*
 * Recalculate window and session sizes.
 *
 * Every session has the size of the smallest client it is attached to and
 * every window the size of the smallest session it is attached to.
 *
 * So, when a client is resized or a session attached to or detached from a
 * client, the window sizes must be recalculated. For each session, find the
 * smallest client it is attached to, and resize it to that size. Then for
 * every window, find the smallest session it is attached to, resize it to that
 * size and clear and redraw every client with it as the current window.
 *
 * This is quite inefficient - better/additional data structures are needed
 * to make it better.
 *
 * As a side effect, this function updates the SESSION_UNATTACHED flag. This
 * flag is necessary to make sure unattached sessions do not limit the size of
 * windows that are attached both to them and to other (attached) sessions.
 */

void
recalculate_sizes(void)
{
	struct session		*s;
	struct client		*c;
	struct window		*w;
	struct window_pane	*wp;
	u_int			 ssx, ssy, has, limit;
	int			 flag, has_status, is_zoomed, forced;

	RB_FOREACH(s, sessions, &sessions) {
		has_status = options_get_number(s->options, "status");

		s->attached = 0;
		ssx = ssy = UINT_MAX;
		TAILQ_FOREACH(c, &clients, entry) {
			if (c->flags & CLIENT_SUSPENDED)
				continue;
			if ((c->flags & (CLIENT_CONTROL|CLIENT_SIZECHANGED)) ==
			    CLIENT_CONTROL)
				continue;
			if (c->session == s) {
				if (c->tty.sx < ssx)
					ssx = c->tty.sx;
				if (has_status &&
				    !(c->flags & CLIENT_CONTROL) &&
				    c->tty.sy > 1 && c->tty.sy - 1 < ssy)
					ssy = c->tty.sy - 1;
				else if (c->tty.sy < ssy)
					ssy = c->tty.sy;
				s->attached++;
			}
		}
		if (ssx == UINT_MAX || ssy == UINT_MAX) {
			s->flags |= SESSION_UNATTACHED;
			continue;
		}
		s->flags &= ~SESSION_UNATTACHED;

		if (has_status && ssy == 0)
			ssy = 1;

		if (s->sx == ssx && s->sy == ssy)
			continue;

		log_debug("session $%u size %u,%u (was %u,%u)", s->id, ssx, ssy,
		    s->sx, s->sy);

		s->sx = ssx;
		s->sy = ssy;

		status_update_saved(s);
	}

	RB_FOREACH(w, windows, &windows) {
		if (w->active == NULL)
			continue;
		flag = options_get_number(w->options, "aggressive-resize");

		ssx = ssy = UINT_MAX;
		RB_FOREACH(s, sessions, &sessions) {
			if (s->flags & SESSION_UNATTACHED)
				continue;
			if (flag)
				has = s->curw->window == w;
			else
				has = session_has(s, w);
			if (has) {
				if (s->sx < ssx)
					ssx = s->sx;
				if (s->sy < ssy)
					ssy = s->sy;
			}
		}
		if (ssx == UINT_MAX || ssy == UINT_MAX)
			continue;

		forced = 0;
		limit = options_get_number(w->options, "force-width");
		if (limit >= PANE_MINIMUM && ssx > limit) {
			ssx = limit;
			forced |= WINDOW_FORCEWIDTH;
		}
		limit = options_get_number(w->options, "force-height");
		if (limit >= PANE_MINIMUM && ssy > limit) {
			ssy = limit;
			forced |= WINDOW_FORCEHEIGHT;
		}

		if (w->sx == ssx && w->sy == ssy)
			continue;
		log_debug("window @@%u size %u,%u (was %u,%u)", w->id, ssx, ssy,
		    w->sx, w->sy);

		w->flags &= ~(WINDOW_FORCEWIDTH|WINDOW_FORCEHEIGHT);
		w->flags |= forced;

		is_zoomed = w->flags & WINDOW_ZOOMED;
		if (is_zoomed)
			window_unzoom(w);
		layout_resize(w, ssx, ssy);
		window_resize(w, ssx, ssy);
		if (is_zoomed && window_pane_visible(w->active))
			window_zoom(w->active);

		/*
		 * If the current pane is now not visible, move to the next
		 * that is.
		 */
		wp = w->active;
		while (!window_pane_visible(w->active)) {
			w->active = TAILQ_PREV(w->active, window_panes, entry);
			if (w->active == NULL)
				w->active = TAILQ_LAST(&w->panes, window_panes);
			if (w->active == wp)
			       break;
		}
		if (w->active == w->last)
			w->last = NULL;

		server_redraw_window(w);
		notify_window("window-layout-changed", w);
	}
}
@


1.23
log
@Prevent control clients from affecting the session size until they have
specified a size with refresh-client -C. Prompted by a different change
with the same purpose from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.22 2017/02/08 13:53:32 nicm Exp $ */
d162 2
@


1.22
log
@Improve some of the logging on resize.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.21 2017/02/03 21:01:02 nicm Exp $ */
d62 3
@


1.21
log
@Cache status line position to reduce option lookups during output.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.20 2016/10/16 22:06:40 nicm Exp $ */
d87 2
a88 2
		log_debug("session size %u,%u (was %u,%u)", ssx, ssy, s->sx,
		    s->sy);
d133 2
a134 2
		log_debug("window size %u,%u (was %u,%u)", ssx, ssy, w->sx,
		    w->sy);
@


1.20
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.19 2016/01/19 15:59:12 nicm Exp $ */
d92 2
@


1.19
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.18 2015/10/27 15:58:42 nicm Exp $ */
d159 1
a159 1
		notify_window_layout_changed(w);
@


1.18
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.17 2015/04/24 23:17:11 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.17
log
@Convert clients list into a TAILQ.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.16 2015/04/22 15:32:33 nicm Exp $ */
d56 1
a56 1
		has_status = options_get_number(&s->options, "status");
d97 1
a97 1
		flag = options_get_number(&w->options, "aggressive-resize");
d118 1
a118 1
		limit = options_get_number(&w->options, "force-width");
d123 1
a123 1
		limit = options_get_number(&w->options, "force-height");
@


1.16
log
@Make session_has return a flag, returning the first winlink found is a
recipe for errors.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.15 2015/04/22 15:30:11 nicm Exp $ */
d52 1
a52 1
	u_int			 i, ssx, ssy, has, limit;
d60 2
a61 3
		for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
			c = ARRAY_ITEM(&clients, i);
			if (c == NULL || c->flags & CLIENT_SUSPENDED)
@


1.15
log
@Change the windows array into an RB tree and fix some places where we
were only looking at the first winlink for a window in a session.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.14 2014/11/14 02:19:47 nicm Exp $ */
d107 1
a107 1
				has = session_has(s, w) != NULL;
@


1.14
log
@Label windows which are smaller than expected with a reason.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.13 2014/11/12 16:00:03 nicm Exp $ */
d52 1
a52 1
	u_int			 i, j, ssx, ssy, has, limit;
d60 2
a61 2
		for (j = 0; j < ARRAY_LENGTH(&clients); j++) {
			c = ARRAY_ITEM(&clients, j);
d95 2
a96 3
	for (i = 0; i < ARRAY_LENGTH(&windows); i++) {
		w = ARRAY_ITEM(&windows, i);
		if (w == NULL || w->active == NULL)
@


1.13
log
@Don't let force-width or force-height be < PANE_MINIMUM.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.12 2014/03/31 21:37:55 nicm Exp $ */
d53 1
a53 1
	int			 flag, has_status, is_zoomed;
d119 1
d121 1
a121 1
		if (limit >= PANE_MINIMUM && ssx > limit)
d123 2
d126 1
a126 1
		if (limit >= PANE_MINIMUM && ssy > limit)
d128 2
d135 3
@


1.12
log
@Make session_attached a count and add session_many_attached flag.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.11 2013/10/10 11:46:00 nicm Exp $ */
d120 1
a120 1
		if (limit != 0 && ssx > limit)
d123 1
a123 1
		if (limit != 0 && ssy > limit)
@


1.11
log
@Make recalculate_sizes() handle an empty window with no active
pane. This can happen when a window is in two sessions - it isn't
destroyed immediately when the pane goes away but is left until the last
session is destroyed. Fixes problems with grouped sessions reported by
Daniel Ralston.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.10 2013/03/24 09:57:59 nicm Exp $ */
d58 1
d73 1
@


1.10
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.9 2013/03/21 18:46:12 nicm Exp $ */
d95 1
a95 1
		if (w == NULL)
@


1.9
log
@Do not include status line in size calculations in control mode.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.8 2012/03/17 22:35:09 nicm Exp $ */
d53 1
a53 1
	int			 flag, has_status;
a125 1

d129 3
d134 2
@


1.8
log
@Add notify hooks for various events, the functions are currently empty
stubs but will be filled in for control mode later. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.7 2010/12/21 22:37:59 nicm Exp $ */
d52 2
a53 2
	u_int		 	 i, j, ssx, ssy, has, limit;
	int		 	 flag;
d56 2
d66 5
a70 1
				if (c->tty.sy < ssy)
d80 3
a82 6
		if (options_get_number(&s->options, "status")) {
			if (ssy == 0)
				ssy = 1;
			else
				ssy--;
		}
d86 2
a87 2
		log_debug(
		    "session size %u,%u (was %u,%u)", ssx, ssy, s->sx, s->sy);
d127 2
a128 2
		log_debug(
		    "window size %u,%u (was %u,%u)", ssx, ssy, w->sx, w->sy);
@


1.7
log
@Store sessions in an RB tree by name rather than a list, this is tidier
and allows them to easily be shown sorted in various lists
(list-sessions/choose-sessions).

Keep a session index which is used in a couple of places internally but
make it an ever-increasing number rather than filling in gaps with new
sessions.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.6 2010/11/22 21:13:13 nicm Exp $ */
d144 1
@


1.6
log
@There is somewhere that WINDOW_HIDDEN is getting set when it shouldn't
be and I can't find it, but the flag itself is a useless optimisation
that only applies to automatic-resize windows, so just dispose of it
entirely.

Fixes problems reported by Nicholas Riley.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.5 2010/06/21 01:27:46 nicm Exp $ */
d55 1
a55 5
	for (i = 0; i < ARRAY_LENGTH(&sessions); i++) {
		s = ARRAY_ITEM(&sessions, i);
		if (s == NULL)
			continue;

d97 2
a98 3
		for (j = 0; j < ARRAY_LENGTH(&sessions); j++) {
			s = ARRAY_ITEM(&sessions, j);
			if (s == NULL || s->flags & SESSION_UNATTACHED)
@


1.5
log
@Having a list of winlinks->alerts for each session is stupid, just store
the alert flags directly in the winlink itself.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.4 2009/09/24 07:02:56 nicm Exp $ */
d116 1
a116 2
		if (ssx == UINT_MAX || ssy == UINT_MAX) {
			w->flags |= WINDOW_HIDDEN;
a117 2
		}
		w->flags &= ~WINDOW_HIDDEN;
@


1.4
log
@Don't allow locked or suspended clients to limit the size of active clients.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.3 2009/07/19 13:21:40 nicm Exp $ */
d108 1
a108 1
				has = session_has(s, w);
@


1.3
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.2 2009/07/14 07:23:36 nicm Exp $ */
d63 1
a63 1
			if (c == NULL)
@


1.2
log
@Get rid of the PANE_HIDDEN flag in favour of a function, and moving the
decision for whether or not a pane should be drawn out of the layout code and
into the redraw code.

This is needed for the new layout design, getting it in now to make that easier
to work on.
@
text
@d1 1
a1 1
/* $OpenBSD: resize.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d135 1
a151 1
		layout_refresh(w, 0);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d51 1
d136 14
@

