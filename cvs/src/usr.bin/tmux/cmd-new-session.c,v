head	1.107;
access;
symbols
	OPENBSD_6_1:1.102.0.4
	OPENBSD_6_1_BASE:1.102
	OPENBSD_6_0:1.87.0.2
	OPENBSD_6_0_BASE:1.87
	OPENBSD_5_9:1.86.0.2
	OPENBSD_5_9_BASE:1.86
	OPENBSD_5_8:1.68.0.4
	OPENBSD_5_8_BASE:1.68
	OPENBSD_5_7:1.64.0.2
	OPENBSD_5_7_BASE:1.64
	OPENBSD_5_6:1.60.0.4
	OPENBSD_5_6_BASE:1.60
	OPENBSD_5_5:1.57.0.4
	OPENBSD_5_5_BASE:1.57
	OPENBSD_5_4:1.50.0.2
	OPENBSD_5_4_BASE:1.50
	OPENBSD_5_3:1.47.0.2
	OPENBSD_5_3_BASE:1.47
	OPENBSD_5_2:1.45.0.2
	OPENBSD_5_2_BASE:1.45
	OPENBSD_5_1_BASE:1.40
	OPENBSD_5_1:1.40.0.2
	OPENBSD_5_0:1.38.0.2
	OPENBSD_5_0_BASE:1.38
	OPENBSD_4_9:1.36.0.2
	OPENBSD_4_9_BASE:1.36
	OPENBSD_4_8:1.30.0.2
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.28.0.2
	OPENBSD_4_7_BASE:1.28
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.107
date	2017.05.28.19.46.55;	author nicm;	state Exp;
branches;
next	1.106;
commitid	KEuFaqINY04oADqM;

1.106
date	2017.04.22.10.26.44;	author nicm;	state Exp;
branches;
next	1.105;
commitid	tZR8mrFwIzaRytN7;

1.105
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.104;
commitid	RXMp6wwG5a5Y82bo;

1.104
date	2017.04.22.08.56.24;	author nicm;	state Exp;
branches;
next	1.103;
commitid	swq7JsAZEYBxos2Q;

1.103
date	2017.04.21.14.01.19;	author nicm;	state Exp;
branches;
next	1.102;
commitid	6dh4rgGOD5wckeD9;

1.102
date	2017.03.08.13.36.12;	author nicm;	state Exp;
branches;
next	1.101;
commitid	jI8R4kuPSDw6nngR;

1.101
date	2017.02.09.15.04.53;	author nicm;	state Exp;
branches;
next	1.100;
commitid	LotTNNNN3Vrlt9Fn;

1.100
date	2017.02.06.15.00.41;	author nicm;	state Exp;
branches;
next	1.99;
commitid	2TKl6DV1kcWaPxr9;

1.99
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.98;
commitid	BLRh0qXo7OVTPhiT;

1.98
date	2017.01.28.16.11.27;	author nicm;	state Exp;
branches;
next	1.97;
commitid	Lx4StVNNYdwEMkI4;

1.97
date	2017.01.24.20.15.32;	author nicm;	state Exp;
branches;
next	1.96;
commitid	OhhGixV64mirqDj8;

1.96
date	2017.01.13.11.56.43;	author nicm;	state Exp;
branches;
next	1.95;
commitid	ue6KcgTetKiECTMk;

1.95
date	2016.11.16.11.37.16;	author nicm;	state Exp;
branches;
next	1.94;
commitid	AkKLGtZh82DJ1E5d;

1.94
date	2016.10.19.08.17.11;	author nicm;	state Exp;
branches;
next	1.93;
commitid	mJwe5IdsC7W1Y5Er;

1.93
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.92;
commitid	j0FZs70gSPCmpqWI;

1.92
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.91;
commitid	pxm6osuE99zELpkU;

1.91
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.90;
commitid	1xIYFpLYkPIXNEvU;

1.90
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.89;
commitid	1GCC1n59gejVg5Ih;

1.89
date	2016.10.13.10.01.49;	author nicm;	state Exp;
branches;
next	1.88;
commitid	AFoah05fh4b2e28V;

1.88
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.87;
commitid	TaZ3kOtGiWwKofka;

1.87
date	2016.03.05.07.47.52;	author nicm;	state Exp;
branches;
next	1.86;
commitid	Bh9Aw5o9RZosJSbS;

1.86
date	2016.02.04.14.11.20;	author nicm;	state Exp;
branches;
next	1.85;
commitid	ZWQxcQCUqLiyYxkT;

1.85
date	2016.01.31.09.52.01;	author nicm;	state Exp;
branches;
next	1.84;
commitid	V6QMDHBKhtB75LjJ;

1.84
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.83;
commitid	P3qmSOx6KrDBsb0c;

1.83
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.82;
commitid	rE682EC14v4gpeFy;

1.82
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.81;
commitid	gsQkQsSyBCSmU9ax;

1.81
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.80;
commitid	uzMkp8Z4FE6WB6s6;

1.80
date	2015.12.12.18.32.24;	author nicm;	state Exp;
branches;
next	1.79;
commitid	q7iDAcShsJWlLYhr;

1.79
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.78;
commitid	ns7JfXpW9TsHrnT3;

1.78
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.77;
commitid	MRfGAYPLeVqV46rT;

1.77
date	2015.10.31.14.51.15;	author nicm;	state Exp;
branches;
next	1.76;
commitid	8V8pJWxJ4YGXnHNd;

1.76
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.75;
commitid	B5GekkO0CdWpFMrz;

1.75
date	2015.10.28.09.51.55;	author nicm;	state Exp;
branches;
next	1.74;
commitid	eGVGKzVVYKHFvkn4;

1.74
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.73;
commitid	89xhQafU35Q5MQVC;

1.73
date	2015.10.27.13.23.24;	author nicm;	state Exp;
branches;
next	1.72;
commitid	g6GdEJXfBNprXHEK;

1.72
date	2015.10.23.16.30.15;	author nicm;	state Exp;
branches;
next	1.71;
commitid	OfTVqENPXKuxOhhK;

1.71
date	2015.09.10.08.58.14;	author nicm;	state Exp;
branches;
next	1.70;
commitid	fjYzZVETyEmTAStI;

1.70
date	2015.08.28.13.01.03;	author nicm;	state Exp;
branches;
next	1.69;
commitid	fIVZtZS9F66XgvbR;

1.69
date	2015.08.28.12.16.28;	author nicm;	state Exp;
branches;
next	1.68;
commitid	LqkiQ6rY2EYTPxv3;

1.68
date	2015.06.07.21.39.39;	author nicm;	state Exp;
branches;
next	1.67;
commitid	N9n0sMf4KapNFAh6;

1.67
date	2015.06.04.23.27.51;	author nicm;	state Exp;
branches;
next	1.66;
commitid	xevJfLLQ14ORIsEv;

1.66
date	2015.05.29.23.02.27;	author nicm;	state Exp;
branches;
next	1.65;
commitid	0hwnTSL42ruvNiju;

1.65
date	2015.04.27.16.25.57;	author nicm;	state Exp;
branches;
next	1.64;
commitid	0WBWxxZyxaAFVhmn;

1.64
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.63;
commitid	b1G1TVWY7l4KyoY6;

1.63
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.62;
commitid	RV1NOSXD1mUR8LDP;

1.62
date	2014.10.20.22.57.46;	author nicm;	state Exp;
branches;
next	1.61;
commitid	DssG58kd71Zj9kpF;

1.61
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.60;
commitid	Gq8hgMoG3t1Wy1Zv;

1.60
date	2014.05.13.08.08.32;	author nicm;	state Exp;
branches;
next	1.59;

1.59
date	2014.04.17.13.02.59;	author nicm;	state Exp;
branches;
next	1.58;

1.58
date	2014.04.17.11.38.35;	author nicm;	state Exp;
branches;
next	1.57;

1.57
date	2014.02.23.00.53.06;	author nicm;	state Exp;
branches;
next	1.56;

1.56
date	2013.11.22.20.58.36;	author nicm;	state Exp;
branches;
next	1.55;

1.55
date	2013.10.10.12.28.38;	author nicm;	state Exp;
branches;
next	1.54;

1.54
date	2013.10.10.12.26.35;	author nicm;	state Exp;
branches;
next	1.53;

1.53
date	2013.10.10.12.09.34;	author nicm;	state Exp;
branches;
next	1.52;

1.52
date	2013.10.10.12.07.36;	author nicm;	state Exp;
branches;
next	1.51;

1.51
date	2013.10.10.12.00.21;	author nicm;	state Exp;
branches;
next	1.50;

1.50
date	2013.03.25.11.44.00;	author nicm;	state Exp;
branches;
next	1.49;

1.49
date	2013.03.24.09.58.40;	author nicm;	state Exp;
branches;
next	1.48;

1.48
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.47;

1.47
date	2012.12.09.23.17.35;	author nicm;	state Exp;
branches;
next	1.46;

1.46
date	2012.11.19.10.38.06;	author nicm;	state Exp;
branches;
next	1.45;

1.45
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.44;

1.44
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.43;

1.43
date	2012.05.22.10.56.48;	author nicm;	state Exp;
branches;
next	1.42;

1.42
date	2012.05.06.07.38.17;	author nicm;	state Exp;
branches;
next	1.41;

1.41
date	2012.03.17.22.35.09;	author nicm;	state Exp;
branches;
next	1.40;

1.40
date	2012.02.02.00.10.11;	author nicm;	state Exp;
branches;
next	1.39;

1.39
date	2011.10.23.08.10.11;	author nicm;	state Exp;
branches;
next	1.38;

1.38
date	2011.04.06.21.51.31;	author nicm;	state Exp;
branches;
next	1.37;

1.37
date	2011.04.05.19.37.01;	author nicm;	state Exp;
branches;
next	1.36;

1.36
date	2011.02.03.20.50.03;	author nicm;	state Exp;
branches;
next	1.35;

1.35
date	2011.01.14.23.49.23;	author nicm;	state Exp;
branches;
next	1.34;

1.34
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.33;

1.33
date	2011.01.01.01.12.09;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2010.12.20.00.17.22;	author nicm;	state Exp;
branches;
next	1.31;

1.31
date	2010.12.11.18.39.25;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2010.06.27.02.56.59;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2010.04.06.21.35.44;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2010.02.22.20.19.16;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2010.02.06.23.22.27;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2010.02.06.17.15.33;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2009.11.11.08.00.42;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2009.10.10.10.02.48;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2009.09.21.15.32.06;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.16.12.35.04;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.15.07.45.16;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.12.09.54.34;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.08.23.17.37.48;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.21.11.36.08;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2009.08.19.14.32.15;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.08.13.20.11.58;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.13.19.16.14;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.13.19.03.59;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.08.21.52.43;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.03.14.10.54;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.23.15.47.56;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.23.12.33.48;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.22.22.47.43;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.17.15.03.11;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.07.19.49.19;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.107
log
@Change so that sessions created detached (-d or no client) are always
80x24 and the status line is not applied until they attach. Also make -x
and -y work for control clients whether the session is detached or not.
@
text
@/* $OpenBSD: cmd-new-session.c,v 1.106 2017/04/22 10:26:44 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Create a new session and attach to the current terminal unless -d is given.
 */

#define NEW_SESSION_TEMPLATE "#{session_name}:"

static enum cmd_retval	cmd_new_session_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_new_session_entry = {
	.name = "new-session",
	.alias = "new",

	.args = { "Ac:dDEF:n:Ps:t:x:y:", 0, -1 },
	.usage = "[-AdDEP] [-c start-directory] [-F format] [-n window-name] "
		 "[-s session-name] " CMD_TARGET_SESSION_USAGE " [-x width] "
		 "[-y height] [command]",

	.target = { 't', CMD_FIND_SESSION, CMD_FIND_CANFAIL },

	.flags = CMD_STARTSERVER,
	.exec = cmd_new_session_exec
};

const struct cmd_entry cmd_has_session_entry = {
	.name = "has-session",
	.alias = "has",

	.args = { "t:", 0, 0 },
	.usage = CMD_TARGET_SESSION_USAGE,

	.target = { 't', CMD_FIND_SESSION, 0 },

	.flags = 0,
	.exec = cmd_new_session_exec
};

static enum cmd_retval
cmd_new_session_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c = item->client;
	struct session		*s, *as, *groupwith;
	struct window		*w;
	struct environ		*env;
	struct termios		 tio, *tiop;
	struct session_group	*sg;
	const char		*newname, *errstr, *template, *group, *prefix;
	const char		*path, *cmd, *cwd, *to_free = NULL;
	char		       **argv, *cause, *cp;
	int			 detached, already_attached, idx, argc;
	int			 is_control = 0;
	u_int			 sx, sy;
	struct environ_entry	*envent;
	struct cmd_find_state	 fs;

	if (self->entry == &cmd_has_session_entry) {
		/*
		 * cmd_find_target() will fail if the session cannot be found,
		 * so always return success here.
		 */
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(args, 't') && (args->argc != 0 || args_has(args, 'n'))) {
		cmdq_error(item, "command or window name given with target");
		return (CMD_RETURN_ERROR);
	}

	newname = args_get(args, 's');
	if (newname != NULL) {
		if (!session_check_name(newname)) {
			cmdq_error(item, "bad session name: %s", newname);
			return (CMD_RETURN_ERROR);
		}
		if ((as = session_find(newname)) != NULL) {
			if (args_has(args, 'A')) {
				return (cmd_attach_session(item,
				    newname, args_has(args, 'D'),
				    0, NULL, args_has(args, 'E')));
			}
			cmdq_error(item, "duplicate session: %s", newname);
			return (CMD_RETURN_ERROR);
		}
	}

	/* Is this going to be part of a session group? */
	group = args_get(args, 't');
	if (group != NULL) {
		groupwith = item->target.s;
		if (groupwith == NULL) {
			if (!session_check_name(group)) {
				cmdq_error(item, "bad group name: %s", group);
				goto error;
			}
			sg = session_group_find(group);
		} else
			sg = session_group_contains(groupwith);
		if (sg != NULL)
			prefix = sg->name;
		else if (groupwith != NULL)
			prefix = groupwith->name;
		else
			prefix = group;
	} else {
		groupwith = NULL;
		sg = NULL;
		prefix = NULL;
	}

	/* Set -d if no client. */
	detached = args_has(args, 'd');
	if (c == NULL)
		detached = 1;
	else if (c->flags & CLIENT_CONTROL)
		is_control = 1;

	/* Is this client already attached? */
	already_attached = 0;
	if (c != NULL && c->session != NULL)
		already_attached = 1;

	/* Get the new session working directory. */
	if (args_has(args, 'c')) {
		cwd = args_get(args, 'c');
		to_free = cwd = format_single(item, cwd, c, NULL, NULL, NULL);
	} else if (c != NULL && c->session == NULL && c->cwd != NULL)
		cwd = c->cwd;
	else
		cwd = ".";

	/*
	 * If this is a new client, check for nesting and save the termios
	 * settings (part of which is used for new windows in this session).
	 *
	 * tcgetattr() is used rather than using tty.tio since if the client is
	 * detached, tty_open won't be called. It must be done before opening
	 * the terminal as that calls tcsetattr() to prepare for tmux taking
	 * over.
	 */
	if (!detached && !already_attached && c->tty.fd != -1) {
		if (server_client_check_nested(item->client)) {
			cmdq_error(item, "sessions should be nested with care, "
			    "unset $TMUX to force");
			return (CMD_RETURN_ERROR);
		}
		if (tcgetattr(c->tty.fd, &tio) != 0)
			fatal("tcgetattr failed");
		tiop = &tio;
	} else
		tiop = NULL;

	/* Open the terminal if necessary. */
	if (!detached && !already_attached) {
		if (server_client_open(c, &cause) != 0) {
			cmdq_error(item, "open terminal failed: %s", cause);
			free(cause);
			goto error;
		}
	}

	/* Find new session size. */
	if (!detached) {
		sx = c->tty.sx;
		sy = c->tty.sy;
		if (!is_control &&
		    sy > 0 &&
		    options_get_number(global_s_options, "status"))
			sy--;
	} else {
		sx = 80;
		sy = 24;
	}
	if ((is_control || detached) && args_has(args, 'x')) {
		sx = strtonum(args_get(args, 'x'), 1, USHRT_MAX, &errstr);
		if (errstr != NULL) {
			cmdq_error(item, "width %s", errstr);
			goto error;
		}
	}
	if ((is_control || detached) && args_has(args, 'y')) {
		sy = strtonum(args_get(args, 'y'), 1, USHRT_MAX, &errstr);
		if (errstr != NULL) {
			cmdq_error(item, "height %s", errstr);
			goto error;
		}
	}
	if (sx == 0)
		sx = 1;
	if (sy == 0)
		sy = 1;

	/* Figure out the command for the new window. */
	argc = -1;
	argv = NULL;
	if (!args_has(args, 't') && args->argc != 0) {
		argc = args->argc;
		argv = args->argv;
	} else if (sg == NULL && groupwith == NULL) {
		cmd = options_get_string(global_s_options, "default-command");
		if (cmd != NULL && *cmd != '\0') {
			argc = 1;
			argv = (char **)&cmd;
		} else {
			argc = 0;
			argv = NULL;
		}
	}

	path = NULL;
	if (c != NULL && c->session == NULL)
		envent = environ_find(c->environ, "PATH");
	else
		envent = environ_find(global_environ, "PATH");
	if (envent != NULL)
		path = envent->value;

	/* Construct the environment. */
	env = environ_create();
	if (c != NULL && !args_has(args, 'E'))
		environ_update(global_s_options, c->environ, env);

	/* Create the new session. */
	idx = -1 - options_get_number(global_s_options, "base-index");
	s = session_create(prefix, newname, argc, argv, path, cwd, env, tiop,
	    idx, sx, sy, &cause);
	environ_free(env);
	if (s == NULL) {
		cmdq_error(item, "create session failed: %s", cause);
		free(cause);
		goto error;
	}

	/* Set the initial window name if one given. */
	if (argc >= 0 && args_has(args, 'n')) {
		w = s->curw->window;
		window_set_name(w, args_get(args, 'n'));
		options_set_number(w->options, "automatic-rename", 0);
	}

	/*
	 * If a target session is given, this is to be part of a session group,
	 * so add it to the group and synchronize.
	 */
	if (group != NULL) {
		if (sg == NULL) {
			if (groupwith != NULL) {
				sg = session_group_new(groupwith->name);
				session_group_add(sg, groupwith);
			} else
				sg = session_group_new(group);
		}
		session_group_add(sg, s);
		session_group_synchronize_to(s);
		session_select(s, RB_MIN(winlinks, &s->windows)->idx);
	}
	notify_session("session-created", s);

	/*
	 * Set the client to the new session. If a command client exists, it is
	 * taking this session and needs to get MSG_READY and stay around.
	 */
	if (!detached) {
		if (!already_attached) {
			if (~c->flags & CLIENT_CONTROL)
				proc_send(c->peer, MSG_READY, -1, NULL, 0);
		} else if (c->session != NULL)
			c->last_session = c->session;
		c->session = s;
		if (~item->shared->flags & CMDQ_SHARED_REPEAT)
			server_client_set_key_table(c, NULL);
		status_timer_start(c);
		notify_client("client-session-changed", c);
		session_update_activity(s, NULL);
		gettimeofday(&s->last_attached_time, NULL);
		server_redraw_client(c);
	}
	recalculate_sizes();
	server_update_socket();

	/*
	 * If there are still configuration file errors to display, put the new
	 * session's current window into more mode and display them now.
	 */
	if (cfg_finished)
		cfg_show_causes(s);

	/* Print if requested. */
	if (args_has(args, 'P')) {
		if ((template = args_get(args, 'F')) == NULL)
			template = NEW_SESSION_TEMPLATE;
		cp = format_single(item, template, c, s, NULL, NULL);
		cmdq_print(item, "%s", cp);
		free(cp);
	}

	if (!detached) {
		c->flags |= CLIENT_ATTACHED;
		cmd_find_from_session(&item->shared->current, s);
	}

	if (to_free != NULL)
		free((void *)to_free);

	cmd_find_from_session(&fs, s);
	hooks_insert(s->hooks, item, &fs, "after-new-session");

	return (CMD_RETURN_NORMAL);

error:
	if (to_free != NULL)
		free((void *)to_free);
	return (CMD_RETURN_ERROR);
}
@


1.106
log
@new -A should use the session name.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.105 2017/04/22 10:22:39 nicm Exp $ */
d80 1
d143 2
d191 1
a191 1
	if (c != NULL) {
d194 4
d202 1
a202 1
	if (detached && args_has(args, 'x')) {
d209 1
a209 1
	if (detached && args_has(args, 'y')) {
a215 2
	if (sy > 0 && options_get_number(global_s_options, "status"))
		sy--;
@


1.105
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.104 2017/04/22 08:56:24 nicm Exp $ */
d86 2
a87 2
		 * cmd_prepare() will fail if the session cannot be found,
		 * hence always return success here.
a104 7
				/*
				 * This item is now destined for
				 * attach-session. Because attach-session will
				 * have already been prepared, copy this
				 * session into its tflag so it can be used.
				 */
				cmd_find_from_session(&item->target, as);
d106 1
a106 1
				    args_get(args, 't'), args_has(args, 'D'),
@


1.104
log
@Mouse bindings and hooks set up an initial current state when running a
command. This is used for the session, window and pane for all commands
in the command sequence if there is no -t or -s.

However, using it for all commands in the command sequence means that if
the active pane or current session is changed, subsequent commands still
use the previous state. So make commands which explicitly change the
current state (such as neww and selectp) update it themselves for later
commands. Commands which may invalidate the state (like killp) are
already OK because an invalid state will be ignored.

Also fill in the current state for all key bindings rather than just the
mouse, so that any omissions are easier to spot.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.103 2017/04/21 14:01:19 nicm Exp $ */
d47 1
a47 1
	.tflag = CMD_SESSION_CANFAIL,
d60 1
a60 1
	.tflag = CMD_SESSION,
d111 1
a111 1
				cmd_find_from_session(&item->state.tflag, as);
d113 2
a114 2
				    args_has(args, 'D'), 0, NULL,
				    args_has(args, 'E')));
d124 1
a124 1
		groupwith = item->state.tflag.s;
@


1.103
log
@Store state shared between multiple commands in the queue in a shared
structure.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.102 2017/03/08 13:36:12 nicm Exp $ */
d327 1
a327 1
	if (!detached)
d329 2
@


1.102
log
@Add a helper function for the most common format_create/defaults/expand
pattern.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.101 2017/02/09 15:04:53 nicm Exp $ */
d300 1
a300 1
		if (!item->repeat)
@


1.101
log
@Instead of numbering session groups, give them a name which may be given
to -t instead of a target session. Also allow them to contain only one
session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.100 2017/02/06 15:00:41 nicm Exp $ */
a80 1
	struct format_tree	*ft;
d157 2
a158 4
		ft = format_create(item, FORMAT_NONE, 0);
		format_defaults(ft, c, NULL, NULL, NULL);
		to_free = cwd = format_expand(ft, args_get(args, 'c'));
		format_free(ft);
d322 1
a322 5

		ft = format_create(item, FORMAT_NONE, 0);
		format_defaults(ft, c, s, NULL, NULL);

		cp = format_expand(ft, template);
a324 2

		format_free(ft);
@


1.100
log
@Cancel key table when switching session, unless the key is going to
repeat. Reported by Amos Bird.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.99 2017/02/03 11:57:27 nicm Exp $ */
d71 1
a71 2
	struct session		*s, *as;
	struct session		*groupwith = item->state.tflag.s;
d75 2
a76 1
	const char		*newname, *target, *errstr, *template;
d122 4
a125 1
	if ((target = args_get(args, 't')) != NULL) {
d127 14
a140 4
			cmdq_error(item, "no such session: %s", target);
			goto error;
		}
	} else
d142 3
d232 1
a232 1
	} else if (groupwith == NULL) {
d258 2
a259 2
	s = session_create(newname, argc, argv, path, cwd, env, tiop, idx, sx,
	    sy, &cause);
d278 9
a286 2
	if (groupwith != NULL) {
		session_group_add(groupwith, s);
@


1.99
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.98 2017/01/28 16:11:27 nicm Exp $ */
d280 2
@


1.98
log
@Do not clear the key table when changing session on a client, so that
switch-client and friends work with bind -n.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.97 2017/01/24 20:15:32 nicm Exp $ */
d142 1
a142 1
		ft = format_create(item, 0);
d301 1
a301 1
		ft = format_create(item, 0);
@


1.97
log
@Make update-environment an array as well.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.96 2017/01/13 11:56:43 nicm Exp $ */
a279 1
		server_client_set_key_table(c, NULL);
@


1.96
log
@Make options_get_string return const string.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.95 2016/11/16 11:37:16 nicm Exp $ */
d76 1
a76 1
	const char		*newname, *target, *update, *errstr, *template;
d237 2
a238 5
	if (c != NULL && !args_has(args, 'E')) {
		update = options_get_string(global_s_options,
		    "update-environment");
		environ_update(update, c->environ, env);
	}
@


1.95
log
@Do not stop dragging when the wheel is pressed, from Artem Fokin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.94 2016/10/19 08:17:11 nicm Exp $ */
d77 2
a78 2
	const char		*path, *cwd, *to_free = NULL;
	char		       **argv, *cmd, *cause, *cp;
d220 1
a220 1
			argv = &cmd;
@


1.94
log
@Move session-create hook out of session_create so it works with grouped sessions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.93 2016/10/16 22:06:40 nicm Exp $ */
d108 2
a109 2
				 * attach-session.  Because attach-session
				 * will have already been prepared, copy this
@


1.93
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.92 2016/10/16 19:04:05 nicm Exp $ */
d270 1
@


1.92
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.91 2016/10/16 17:55:14 nicm Exp $ */
d284 1
a284 1
		notify_attached_session_changed(c);
@


1.91
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.90 2016/10/13 22:48:51 nicm Exp $ */
d36 1
a36 1
static enum cmd_retval	 cmd_new_session_exec(struct cmd *, struct cmd_q *);
d67 1
a67 1
cmd_new_session_exec(struct cmd *self, struct cmd_q *cmdq)
d70 1
a70 1
	struct client		*c = cmdq->client;
d72 1
a72 1
	struct session		*groupwith = cmdq->state.tflag.s;
d94 1
a94 1
		cmdq_error(cmdq, "command or window name given with target");
d101 1
a101 1
			cmdq_error(cmdq, "bad session name: %s", newname);
d107 1
a107 1
				 * This cmdq is now destined for
d112 2
a113 2
				cmd_find_from_session(&cmdq->state.tflag, as);
				return (cmd_attach_session(cmdq,
d117 1
a117 1
			cmdq_error(cmdq, "duplicate session: %s", newname);
d124 1
a124 1
			cmdq_error(cmdq, "no such session: %s", target);
d142 1
a142 1
		ft = format_create(cmdq, 0);
d161 2
a162 2
		if (server_client_check_nested(cmdq->client)) {
			cmdq_error(cmdq, "sessions should be nested with care, "
d175 1
a175 1
			cmdq_error(cmdq, "open terminal failed: %s", cause);
d192 1
a192 1
			cmdq_error(cmdq, "width %s", errstr);
d199 1
a199 1
			cmdq_error(cmdq, "height %s", errstr);
d249 1
a249 1
		cmdq_error(cmdq, "create session failed: %s", cause);
d304 1
a304 1
		ft = format_create(cmdq, 0);
d308 1
a308 1
		cmdq_print(cmdq, "%s", cp);
d321 1
a321 1
	hooks_insert(s->hooks, cmdq, &fs, "after-new-session");
@


1.90
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.89 2016/10/13 10:01:49 nicm Exp $ */
d315 1
a315 1
		cmdq->client_exit = 0;
d321 2
a322 2
	if (hooks_wait(s->hooks, cmdq, &fs, "after-new-session") == 0)
		return (CMD_RETURN_WAIT);
@


1.89
log
@Some improvements and bug fixes for hooks:

- Prepare the state again before the "after" hooks are run, because the
  command may have killed or moved windows.

- Use the hooks list from the newly prepared target, not the old hooks
  list (only matters for new-session really).

- Correctly detect an invalid current state and ignore it in
  cmd_find_target ("killw; swapw").

- Change neww, new, killp, killw, splitw, swapp, swapw to update the
  current state (used if no explicit target is given) to something more
  useful after they have finished. For example, neww changes it to the
  newly created window.

Hooks are still relatively new and primitive so there are likely to be
more changes to come.

Parts based on bug reports from Uwe Werler and Iblis Lin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.88 2016/10/10 21:51:39 nicm Exp $ */
d83 1
a313 2
	cmd_find_from_session(&cmdq->current, s);

d319 4
@


1.88
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.87 2016/03/05 07:47:52 nicm Exp $ */
d312 2
@


1.87
log
@Do not use c->cwd or s->cwd if it is NULL, found by Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.86 2016/02/04 14:11:20 nicm Exp $ */
d36 1
a36 1
enum cmd_retval	 cmd_new_session_exec(struct cmd *, struct cmd_q *);
d66 1
a66 1
enum cmd_retval
@


1.86
log
@Set up -t flag properly when passing new-session -A off to
attach-session, GitHub issue 295.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.85 2016/01/31 09:52:01 nicm Exp $ */
d145 1
a145 1
	} else if (c != NULL && c->session == NULL)
@


1.85
log
@Fix new-session with -t after command flags changes, reported by Michael Graczyk.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.84 2016/01/19 15:59:12 nicm Exp $ */
d71 1
a71 1
	struct session		*s, *attach_sess;
d103 1
a103 1
		if ((attach_sess = session_find(newname)) != NULL) {
d111 1
a111 1
				cmdq->state.tflag.s = attach_sess;
@


1.84
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.83 2015/12/14 00:31:54 nicm Exp $ */
d77 1
a77 1
	const char		*path, *cwd, *to_free;
d121 6
a126 1
	if ((target = args_get(args, 't')) == NULL)
a139 1
	to_free = NULL;
d215 1
a215 1
	} else if (target == NULL) {
d264 1
a264 1
	if (args_has(args, 't')) {
@


1.83
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.82 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.82
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.81 2015/12/13 14:32:38 nicm Exp $ */
d47 3
a49 1
	.flags = CMD_STARTSERVER|CMD_CANFAIL|CMD_SESSION_T,
d60 3
a62 1
	.flags = CMD_SESSION_T,
@


1.81
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.80 2015/12/12 18:32:24 nicm Exp $ */
d39 10
a48 7
	"new-session", "new",
	"Ac:dDEF:n:Ps:t:x:y:", 0, -1,
	"[-AdDEP] [-c start-directory] [-F format] [-n window-name] "
	"[-s session-name] " CMD_TARGET_SESSION_USAGE " [-x width] "
	"[-y height] [command]",
	CMD_STARTSERVER|CMD_CANFAIL|CMD_SESSION_T,
	cmd_new_session_exec
d52 8
a59 5
	"has-session", "has",
	"t:", 0, 0,
	CMD_TARGET_SESSION_USAGE,
	CMD_SESSION_T,
	cmd_new_session_exec
@


1.80
log
@Add key-table option to set the default key table for a session, allows
different key bindings for different sessions and a few other things.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.79 2015/12/11 12:27:36 nicm Exp $ */
d44 1
a44 1
	CMD_STARTSERVER,
d52 1
a52 1
	0,
d60 3
a62 2
	struct client		*c = cmdq->client, *c0;
	struct session		*s, *groupwith;
d75 4
a78 2
		if (cmd_find_session(cmdq, args_get(args, 't'), 0) == NULL)
			return (CMD_RETURN_ERROR);
d93 1
a93 1
		if (session_find(newname) != NULL) {
d95 8
a102 1
				return (cmd_attach_session(cmdq, newname,
d111 1
a111 6
	target = args_get(args, 't');
	if (target != NULL) {
		groupwith = cmd_find_session(cmdq, target, 0);
		if (groupwith == NULL)
			return (CMD_RETURN_ERROR);
	} else
d128 1
a128 2
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), NULL, NULL,
		    NULL);
a132 2
	else if ((c0 = cmd_find_client(cmdq, NULL, 1)) != NULL)
		cwd = c0->session->cwd;
d198 1
a198 1
	if (target == NULL && args->argc != 0) {
d250 1
a250 1
	if (groupwith != NULL) {
d290 1
a290 2
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s, NULL,
		    NULL);
@


1.79
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.78 2015/12/08 08:34:18 nicm Exp $ */
d265 1
@


1.78
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.77 2015/10/31 14:51:15 nicm Exp $ */
d122 1
a122 1
		ft = format_create(0);
d286 1
a286 1
		ft = format_create(0);
@


1.77
log
@Fall back silently to ~ or / rather than checking -c with access(), this
was the old behaviour.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.76 2015/10/31 08:13:58 nicm Exp $ */
d122 1
a122 1
		ft = format_create();
d286 1
a286 1
		ft = format_create();
@


1.76
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.75 2015/10/28 09:51:55 nicm Exp $ */
a126 7

		if (access(cwd, X_OK) != 0) {
			free((void *)cwd);
			cmdq_error(cmdq, "bad working directory: %s",
			    strerror(errno));
			return (CMD_RETURN_ERROR);
		}
@


1.75
log
@Like options, move the environ struct into environ.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.74 2015/10/27 15:58:42 nicm Exp $ */
d66 1
a66 1
	const char		*path;
d68 1
a68 2
	int			 detached, already_attached, idx, cwd, fd = -1;
	int			 argc;
d120 1
d125 1
a125 1
		cp = format_expand(ft, args_get(args, 'c'));
d128 6
a133 11
		if (cp != NULL && *cp != '\0') {
			fd = open(cp, O_RDONLY|O_DIRECTORY);
			free(cp);
			if (fd == -1) {
				cmdq_error(cmdq, "bad working directory: %s",
				    strerror(errno));
				return (CMD_RETURN_ERROR);
			}
		} else
			free(cp);
		cwd = fd;
d138 2
a139 4
	else {
		fd = open(".", O_RDONLY);
		cwd = fd;
	}
d307 2
a308 2
	if (fd != -1)
		close(fd);
d312 2
a313 2
	if (fd != -1)
		close(fd);
@


1.74
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.73 2015/10/27 13:23:24 nicm Exp $ */
d63 1
a63 1
	struct environ		 env;
d226 1
a226 1
		envent = environ_find(&c->environ, "PATH");
d228 1
a228 1
		envent = environ_find(&global_environ, "PATH");
d233 1
a233 1
	environ_init(&env);
d237 1
a237 1
		environ_update(update, &c->environ, &env);
d242 1
a242 1
	s = session_create(newname, argc, argv, path, cwd, &env, tiop, idx, sx,
d244 1
a249 1
	environ_free(&env);
@


1.73
log
@Break the common process set up, event loop and imsg dispatch code
between server and client out into a separate internal API. This will
make it easier to add another process.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.72 2015/10/23 16:30:15 nicm Exp $ */
d200 1
a200 1
	if (sy > 0 && options_get_number(&global_s_options, "status"))
d214 1
a214 1
		cmd = options_get_string(&global_s_options, "default-command");
d235 1
a235 1
		update = options_get_string(&global_s_options,
d241 1
a241 1
	idx = -1 - options_get_number(&global_s_options, "base-index");
d255 1
a255 1
		options_set_number(&w->options, "automatic-rename", 0);
@


1.72
log
@Remove some unnecessary checks before free().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.71 2015/09/10 08:58:14 nicm Exp $ */
d273 4
a276 3
		if (!already_attached)
			server_write_ready(c);
		else if (c->session != NULL)
@


1.71
log
@Add session_last_attached time and format, from Sina Siadat.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.70 2015/08/28 13:01:03 nicm Exp $ */
d136 1
a136 1
		} else if (cp != NULL)
@


1.70
log
@Make session_update_activity more useful and use it in more places.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.69 2015/08/28 12:16:28 nicm Exp $ */
d281 1
@


1.69
log
@Run status update on a per-client timer at status-interval.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.68 2015/06/07 21:39:39 nicm Exp $ */
d280 1
a280 1
		session_update_activity(s);
@


1.68
log
@Add -E flag when attaching or switching client to bypass
update-environment, from Steven Lu.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.67 2015/06/04 23:27:51 nicm Exp $ */
d278 1
@


1.67
log
@Move the nested check from client to server and compare the client tty
name to all the pane pty names instead of comparing socket paths. This
means that "new -d" will work without unsetting $TMUX.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.66 2015/05/29 23:02:27 nicm Exp $ */
d40 2
a41 2
	"Ac:dDF:n:Ps:t:x:y:", 0, -1,
	"[-AdDP] [-c start-directory] [-F format] [-n window-name] "
d94 2
a95 1
				    args_has(args, 'D'), 0, NULL));
d234 3
a236 2
	update = options_get_string(&global_s_options, "update-environment");
	if (c != NULL)
d238 1
@


1.66
log
@Use RB_MIN to get the lowest index for the current window when creating
grouped sessions, rather than using RB_ROOT.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.65 2015/04/27 16:25:57 nicm Exp $ */
d44 1
a44 1
	CMD_STARTSERVER|CMD_CANTNEST,
d148 2
a149 2
	 * Save the termios settings, part of which is used for new windows in
	 * this session.
d151 4
a154 4
	 * This is read again with tcgetattr() rather than using tty.tio as if
	 * detached, tty_open won't be called. Because of this, it must be done
	 * before opening the terminal as that calls tcsetattr() to prepare for
	 * tmux taking over.
d157 5
@


1.65
log
@Rewrite of the target resolution internals to be simpler and more
consistent but with much less duplication, but keeping the same internal
API. Also adds more readable aliases for some of the special tokens used
in targets (eg "{start}" instead of "^"). Some behaviours may have
changed, for example prefix matches now happen before fnmatch.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.64 2015/02/05 10:29:43 nicm Exp $ */
d257 1
a257 1
		session_select(s, RB_ROOT(&s->windows)->idx);
@


1.64
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.63 2014/10/20 23:35:28 nicm Exp $ */
d140 1
a140 1
	else if ((c0 = cmd_current_client(cmdq)) != NULL)
@


1.63
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.62 2014/10/20 22:57:46 nicm Exp $ */
d122 2
a123 2
		if ((c0 = cmd_find_client(cmdq, NULL, 1)) != NULL)
			format_client(ft, c0);
d290 2
a291 3
		if ((c0 = cmd_find_client(cmdq, NULL, 1)) != NULL)
			format_client(ft, c0);
		format_session(ft, s);
@


1.62
log
@Move tiny has-session function into cmd-new-session.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.61 2014/10/20 22:29:25 nicm Exp $ */
d33 2
@


1.61
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.60 2014/05/13 08:08:32 nicm Exp $ */
d46 8
d71 6
@


1.60
log
@If multiple arguments are given to new-session, new-window,
split-window, respawn-window or respawn-pane, pass them directly to
execvp() to help avoid quoting problems. One argument still goes to "sh
-c" like before. Requested by many over the years. Patch from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.59 2014/04/17 13:02:59 nicm Exp $ */
a42 1
	NULL,
@


1.59
log
@Set PATH explicitly, either from client or session
environment. Previously it came from the session environment. From J
Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.58 2014/04/17 11:38:35 nicm Exp $ */
d38 1
a38 1
	"Ac:dDF:n:Ps:t:x:y:", 0, 1,
d40 2
a41 2
	"[-s session-name] " CMD_TARGET_SESSION_USAGE " [-x width] [-y height] "
	"[command]",
d58 1
a58 1
	char			*cmd, *cause, *cp;
d60 1
d187 6
a192 5
	if (target != NULL)
		cmd = NULL;
	else if (args->argc != 0)
		cmd = args->argv[0];
	else
d194 8
d219 2
a220 2
	s = session_create(newname, cmd, path, cwd, &env, tiop, idx, sx, sy,
	    &cause);
d229 1
a229 1
	if (cmd != NULL && args_has(args, 'n')) {
@


1.58
log
@Remove some unnecessary includes and fix a typo.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.57 2014/02/23 00:53:06 nicm Exp $ */
d57 1
d62 1
d193 8
d209 2
a210 1
	s = session_create(newname, cmd, cwd, &env, tiop, idx, sx, sy, &cause);
@


1.57
log
@Change terminal-overrides to a server option (now that we have them), it
doesn't make much sense as a session option.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.56 2013/11/22 20:58:36 nicm Exp $ */
a22 1
#include <pwd.h>
@


1.56
log
@Handle empty current directory more gracefully.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.55 2013/10/10 12:28:38 nicm Exp $ */
d148 1
a148 1
		if (server_client_open(c, NULL, &cause) != 0) {
@


1.55
log
@Don't boke when figuring out working directory from configuration file.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.54 2013/10/10 12:26:35 nicm Exp $ */
d110 10
a119 7
		fd = open(cp, O_RDONLY|O_DIRECTORY);
		free(cp);
		if (fd == -1) {
			cmdq_error(cmdq, "bad working directory: %s",
			    strerror(errno));
			return (CMD_RETURN_ERROR);
		}
@


1.54
log
@Alter how tmux handles the working directory to internally use file
descriptors rather than strings.

- Each session still has a current working directory.

- New sessions still get their working directory from the client that
  created them or its attached session if any.

- New windows are created by default in the session working directory.

- The -c flag to new, neww, splitw allows the working directory to be
  overridden.

- The -c flag to attach let's the session working directory be changed.

- The default-path option has been removed.

To get the equivalent to default-path '.', do:

        bind c neww -c $PWD

To get the equivalent of default-path '~', do:

        bind c neww -c ~

This also changes the client identify protocol to be a set of messages rather
than one as well as some other changes that should make it easier to make
backwards-compatible protocol changes in future.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.53 2013/10/10 12:09:34 nicm Exp $ */
d118 1
a118 1
	} else if (c->session == NULL)
@


1.53
log
@Remove CMD_SENDENVIRON.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.52 2013/10/10 12:07:36 nicm Exp $ */
d21 2
d52 1
a52 1
	struct client		*c = cmdq->client;
d57 1
a57 3
	struct passwd		*pw;
	const char		*newname, *target, *update, *base, *cwd;
	const char		*errstr, *template;
d59 1
a59 1
	int			 detached, idx;
a60 1
	int			 already_attached;
d77 1
a77 1
				    args_has(args, 'D'), 0));
d102 25
d148 1
a148 1
			return (CMD_RETURN_ERROR);
a151 16
	/* Get the new session working directory. */
	if (c != NULL && c->cwd != NULL)
		base = c->cwd;
	else {
		pw = getpwuid(getuid());
		if (pw->pw_dir != NULL && *pw->pw_dir != '\0')
			base = pw->pw_dir;
		else
			base = "/";
	}
	if (args_has(args, 'c'))
		cwd = args_get(args, 'c');
	else
		cwd = options_get_string(&global_s_options, "default-path");
	cwd = cmd_default_path(base, base, cwd);

d164 1
a164 1
			return (CMD_RETURN_ERROR);
d171 1
a171 1
			return (CMD_RETURN_ERROR);
d201 1
a201 1
		return (CMD_RETURN_ERROR);
d252 2
a253 2
		if ((c = cmd_find_client(cmdq, NULL, 1)) != NULL)
			format_client(ft, c);
d265 3
d269 5
@


1.52
log
@Support -c for new-session, based on code from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.51 2013/10/10 12:00:21 nicm Exp $ */
d41 1
a41 1
	CMD_STARTSERVER|CMD_CANTNEST|CMD_SENDENVIRON,
@


1.51
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.50 2013/03/25 11:44:00 nicm Exp $ */
d37 4
a40 3
	"AdDF:n:Ps:t:x:y:", 0, 1,
	"[-AdDP] [-F format] [-n window-name] [-s session-name] "
	CMD_TARGET_SESSION_USAGE " [-x width] [-y height] [command]",
d56 2
a57 2
	const char		*newname, *target, *update, *cwd, *errstr;
	const char		*template;
d130 1
a130 1
		cwd = c->cwd;
d134 1
a134 1
			cwd = pw->pw_dir;
d136 1
a136 1
			cwd = "/";
d138 5
@


1.50
log
@Add -P and -F to new-session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.49 2013/03/24 09:58:40 nicm Exp $ */
a32 1
enum cmd_retval	 cmd_new_session_check(struct args *);
a41 1
	cmd_new_session_check,
a45 8
cmd_new_session_check(struct args *args)
{
	if (args_has(args, 't') && (args->argc != 0 || args_has(args, 'n')))
		return (CMD_RETURN_ERROR);
	return (CMD_RETURN_NORMAL);
}

enum cmd_retval
d62 5
@


1.49
log
@Add -A flag to new-session to make it behave like attach-session if the
session exists. If -A is used, -D behaves like -d to attach-session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.48 2013/03/24 09:54:10 nicm Exp $ */
d38 3
a40 3
	"AdDn:s:t:x:y:", 0, 1,
	"[-AdD] [-n window-name] [-s session-name] " CMD_TARGET_SESSION_USAGE
	" [-x width] [-y height] [command]",
d58 14
a71 13
	struct args	*args = self->args;
	struct client	*c = cmdq->client;
	struct session	*s, *groupwith;
	struct window	*w;
	struct environ	 env;
	struct termios	 tio, *tiop;
	struct passwd	*pw;
	const char	*newname, *target, *update, *cwd, *errstr;
	char		*cmd, *cause;
	int		 detached, idx;
	u_int		 sx, sy;
	int		 already_attached;

d236 17
@


1.48
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.47 2012/12/09 23:17:35 nicm Exp $ */
d38 2
a39 2
	"dn:s:t:x:y:", 0, 1,
	"[-d] [-n window-name] [-s session-name] " CMD_TARGET_SESSION_USAGE
d79 4
@


1.47
log
@Use the CMD_*_USAGE defines consistently, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.46 2012/11/19 10:38:06 nicm Exp $ */
d34 1
a34 1
enum cmd_retval	 cmd_new_session_exec(struct cmd *, struct cmd_ctx *);
d56 1
a56 1
cmd_new_session_exec(struct cmd *self, struct cmd_ctx *ctx)
d58 13
a70 10
	struct args		*args = self->args;
	struct session		*s, *old_s, *groupwith;
	struct window		*w;
	struct environ		 env;
	struct termios		 tio, *tiop;
	struct passwd		*pw;
	const char		*newname, *target, *update, *cwd, *errstr;
	char			*cmd, *cause;
	int			 detached, idx;
	u_int			 sx, sy;
d75 1
a75 1
			ctx->error(ctx, "bad session name: %s", newname);
d79 1
a79 1
			ctx->error(ctx, "duplicate session: %s", newname);
d86 1
a86 1
		groupwith = cmd_find_session(ctx, target, 0);
a91 18
	/*
	 * There are three cases:
	 *
	 * 1. If cmdclient is non-NULL, new-session has been called from the
	 *    command-line - cmdclient is to become a new attached, interactive
	 *    client. Unless -d is given, the terminal must be opened and then
	 *    the client sent MSG_READY.
	 *
	 * 2. If cmdclient is NULL, new-session has been called from an
	 *    existing client (such as a key binding).
	 *
	 * 3. Both are NULL, the command was in the configuration file. Treat
	 *    this as if -d was given even if it was not.
	 *
	 * In all cases, a new additional session needs to be created and
	 * (unless -d) set as the current session for the client.
	 */

d94 1
a94 1
	if (ctx->cmdclient == NULL && ctx->curclient == NULL)
d97 5
d111 2
a112 2
	if (ctx->cmdclient != NULL && ctx->cmdclient->tty.fd != -1) {
		if (tcgetattr(ctx->cmdclient->tty.fd, &tio) != 0)
d119 3
a121 3
	if (!detached && ctx->cmdclient != NULL) {
		if (server_client_open(ctx->cmdclient, NULL, &cause) != 0) {
			ctx->error(ctx, "open terminal failed: %s", cause);
d128 2
a129 2
	if (ctx->cmdclient != NULL && ctx->cmdclient->cwd != NULL)
		cwd = ctx->cmdclient->cwd;
d139 3
a141 6
	if (ctx->cmdclient != NULL) {
		sx = ctx->cmdclient->tty.sx;
		sy = ctx->cmdclient->tty.sy;
	} else if (ctx->curclient != NULL) {
		sx = ctx->curclient->tty.sx;
		sy = ctx->curclient->tty.sy;
d146 5
a150 8
	if (detached) {
		if (args_has(args, 'x')) {
			sx = strtonum(
			    args_get(args, 'x'), 1, USHRT_MAX, &errstr);
			if (errstr != NULL) {
				ctx->error(ctx, "width %s", errstr);
				return (CMD_RETURN_ERROR);
			}
d152 6
a157 7
		if (args_has(args, 'y')) {
			sy = strtonum(
			    args_get(args, 'y'), 1, USHRT_MAX, &errstr);
			if (errstr != NULL) {
				ctx->error(ctx, "height %s", errstr);
				return (CMD_RETURN_ERROR);
			}
d178 2
a179 2
	if (ctx->cmdclient != NULL)
		environ_update(update, &ctx->cmdclient->environ, &env);
d185 1
a185 1
		ctx->error(ctx, "create session failed: %s", cause);
a193 1

a194 1

d213 8
a220 19
		if (ctx->cmdclient != NULL) {
			server_write_ready(ctx->cmdclient);

			old_s = ctx->cmdclient->session;
			if (old_s != NULL)
				ctx->cmdclient->last_session = old_s;
			ctx->cmdclient->session = s;
			notify_attached_session_changed(ctx->cmdclient);
			session_update_activity(s);
			server_redraw_client(ctx->cmdclient);
		} else {
			old_s = ctx->curclient->session;
			if (old_s != NULL)
				ctx->curclient->last_session = old_s;
			ctx->curclient->session = s;
			notify_attached_session_changed(ctx->curclient);
			session_update_activity(s);
			server_redraw_client(ctx->curclient);
		}
d230 1
a230 1
		show_cfg_causes(s);
d232 3
a234 1
	return (detached ? CMD_RETURN_NORMAL : CMD_RETURN_ATTACH);
@


1.46
log
@Use a utility function for common code to show errors in config file,
from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.45 2012/07/11 07:10:15 nicm Exp $ */
d39 2
a40 2
	"[-d] [-n window-name] [-s session-name] [-t target-session] "
	"[-x width] [-y height] [command]",
@


1.45
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.44 2012/07/10 11:53:01 nicm Exp $ */
a60 1
	struct window_pane	*wp;
d67 1
a67 1
	u_int			 sx, sy, i;
d259 2
a260 11
	if (cfg_finished && !ARRAY_EMPTY(&cfg_causes)) {
		wp = s->curw->window->active;
		window_pane_set_mode(wp, &window_copy_mode);
		window_copy_init_for_output(wp);
		for (i = 0; i < ARRAY_LENGTH(&cfg_causes); i++) {
			cause = ARRAY_ITEM(&cfg_causes, i);
			window_copy_add(wp, "%s", cause);
			free(cause);
		}
		ARRAY_FREE(&cfg_causes);
	}
@


1.44
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.43 2012/05/22 10:56:48 nicm Exp $ */
d33 2
a34 2
int	cmd_new_session_check(struct args *);
int	cmd_new_session_exec(struct cmd *, struct cmd_ctx *);
d47 1
a47 1
int
d51 2
a52 2
		return (-1);
	return (0);
d55 1
a55 1
int
d74 1
a74 1
			return (-1);
d78 1
a78 1
			return (-1);
d86 1
a86 1
			return (-1);
d134 1
a134 1
			return (-1);
d166 1
a166 1
				return (-1);
d174 1
a174 1
				return (-1);
d205 1
a205 1
		return (-1);
d272 1
a272 1
	return (!detached);	/* 1 means don't tell command client to exit */
@


1.43
log
@Add a helper function to send ready message.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.42 2012/05/06 07:38:17 nicm Exp $ */
d133 1
a133 1
			xfree(cause);
d204 1
a204 1
		xfree(cause);
d267 1
a267 1
			xfree(cause);
@


1.42
log
@Add a helper function to open the terminal for attach-/new-session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.41 2012/03/17 22:35:09 nicm Exp $ */
d234 1
a234 1
			server_write_client(ctx->cmdclient, MSG_READY, NULL, 0);
@


1.41
log
@Add notify hooks for various events, the functions are currently empty
stubs but will be filled in for control mode later. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.40 2012/02/02 00:10:11 nicm Exp $ */
d66 1
a66 1
	char			*overrides, *cmd, *cause;
d131 1
a131 8
		if (!(ctx->cmdclient->flags & CLIENT_TERMINAL)) {
			ctx->error(ctx, "not a terminal");
			return (-1);
		}

		overrides =
		    options_get_string(&global_s_options, "terminal-overrides");
		if (tty_open(&ctx->cmdclient->tty, overrides, &cause) != 0) {
@


1.40
log
@Move window name changes into wrapper function window_set_name, from
George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.39 2011/10/23 08:10:11 nicm Exp $ */
d247 1
d255 1
@


1.39
log
@For initial session, use size of command client even if detached.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.38 2011/04/06 21:51:31 nicm Exp $ */
d220 1
a220 2
		xfree(w->name);
		w->name = xstrdup(args_get(args, 'n'));
@


1.38
log
@Change so that an empty session name always means the current sessions
even if given with, for example, -t '', and explicitly forbid empty
session names and those containing a : when they are created.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.37 2011/04/05 19:37:01 nicm Exp $ */
d157 7
a163 1
	if (detached) {
d166 2
a183 6
	} else if (ctx->cmdclient != NULL) {
		sx = ctx->cmdclient->tty.sx;
		sy = ctx->cmdclient->tty.sy;
	} else {
		sx = ctx->curclient->tty.sx;
		sy = ctx->curclient->tty.sy;
@


1.37
log
@Add a flag to cmd_find_session so that attach-session can prefer
unattached sessions when choosing the most recently used (if -t is not
given). Suggested by claudio@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.36 2011/02/03 20:50:03 nicm Exp $ */
d71 9
a79 3
	if (newname != NULL && session_find(newname) != NULL) {
		ctx->error(ctx, "duplicate session: %s", newname);
		return (-1);
@


1.36
log
@Don't require -d with -x or -y since it could be in the config file.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.35 2011/01/14 23:49:23 nicm Exp $ */
d78 1
a78 1
		groupwith = cmd_find_session(ctx, target);
@


1.35
log
@Support -x and -y for new-session to specify the initial size of the
window if created detached with -d.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.34 2011/01/04 00:42:47 nicm Exp $ */
a50 3
		return (-1);
	if (!args_has(args, 'd') &&
	    (args_has(args, 'x') || args_has(args, 'y')))
@


1.34
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.33 2011/01/01 01:12:09 nicm Exp $ */
d22 1
d38 3
a40 2
	"dn:s:t:", 0, 1,
	"[-d] [-n window-name] [-s session-name] [-t target-session] [command]",
d52 3
d68 1
a68 1
	const char		*newname, *target, *update, *cwd;
d157 16
@


1.33
log
@Don't reset the activity timer for unattached sessions every second,
this screws up the choice of most-recently-used. Instead, break the time
update into a little function and do it when the session is attached.

Pointed out by joshe@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.32 2010/12/20 00:17:22 nicm Exp $ */
d32 1
a32 1
int	cmd_new_session_parse(struct cmd *, int, char **, char **);
a33 11
void	cmd_new_session_free(struct cmd *);
void	cmd_new_session_init(struct cmd *, int);
size_t	cmd_new_session_print(struct cmd *, char *, size_t);

struct cmd_new_session_data {
	char	*target;
	char	*newname;
	char	*winname;
	char	*cmd;
	int	 flag_detached;
};
d37 1
d39 4
a42 6
	CMD_STARTSERVER|CMD_CANTNEST|CMD_SENDENVIRON, "",
	cmd_new_session_init,
	cmd_new_session_parse,
	cmd_new_session_exec,
	cmd_new_session_free,
	cmd_new_session_print
a44 14
/* ARGSUSED */
void
cmd_new_session_init(struct cmd *self, unused int arg)
{
	struct cmd_new_session_data	 *data;

	self->data = data = xmalloc(sizeof *data);
	data->flag_detached = 0;
	data->target = NULL;
	data->newname = NULL;
	data->winname = NULL;
	data->cmd = NULL;
}

d46 1
a46 1
cmd_new_session_parse(struct cmd *self, int argc, char **argv, char **cause)
d48 2
a49 38
	struct cmd_new_session_data	*data;
	int				 opt;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "ds:t:n:")) != -1) {
		switch (opt) {
		case 'd':
			data->flag_detached = 1;
			break;
		case 's':
			if (data->newname == NULL)
				data->newname = xstrdup(optarg);
			break;
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		case 'n':
			if (data->winname == NULL)
				data->winname = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 0 && argc != 1)
		goto usage;

	if (data->target != NULL && (argc == 1 || data->winname != NULL))
		goto usage;

	if (argc == 1)
		data->cmd = xstrdup(argv[0]);

a50 6

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
d56 15
a70 14
	struct cmd_new_session_data	*data = self->data;
	struct session			*s, *old_s, *groupwith;
	struct window			*w;
	struct window_pane		*wp;
	struct environ			 env;
	struct termios			 tio, *tiop;
	struct passwd			*pw;
	const char			*update, *cwd;
	char				*overrides, *cmd, *cause;
	int				 detached, idx;
	u_int				 sx, sy, i;

	if (data->newname != NULL && session_find(data->newname) != NULL) {
		ctx->error(ctx, "duplicate session: %s", data->newname);
d74 7
a80 4
	groupwith = NULL;
	if (data->target != NULL &&
	    (groupwith = cmd_find_session(ctx, data->target)) == NULL)
		return (-1);
d101 1
a101 1
	detached = data->flag_detached;
d167 1
a167 1
	if (data->target != NULL)
d169 2
a170 2
	else if (data->cmd != NULL)
		cmd = data->cmd;
d182 1
a182 2
	s = session_create(
	    data->newname, cmd, cwd, &env, tiop, idx, sx, sy, &cause);
d191 1
a191 1
	if (cmd != NULL && data->winname != NULL) {
d195 1
a195 1
		w->name = xstrdup(data->winname);
a252 36
}

void
cmd_new_session_free(struct cmd *self)
{
	struct cmd_new_session_data	*data = self->data;

	if (data->newname != NULL)
		xfree(data->newname);
	if (data->winname != NULL)
		xfree(data->winname);
	if (data->cmd != NULL)
		xfree(data->cmd);
	xfree(data);
}

size_t
cmd_new_session_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_new_session_data	*data = self->data;
	size_t				 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->flag_detached)
		off += xsnprintf(buf + off, len - off, " -d");
	if (off < len && data->winname != NULL)
		off += cmd_prarg(buf + off, len - off, " -n ", data->winname);
	if (off < len && data->newname != NULL)
		off += cmd_prarg(buf + off, len - off, " -s ", data->newname);
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
	if (off < len && data->cmd != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->cmd);
	return (off);
@


1.32
log
@Use pointer rather than index for the client's last session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.31 2010/12/11 18:39:25 nicm Exp $ */
d287 1
d294 1
@


1.31
log
@Track the last session for a client and add a flag to switch-client and
a key binding (L) to move a client back to its last session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.30 2010/06/27 02:56:59 nicm Exp $ */
d125 1
a125 1
	struct session			*s, *groupwith;
d282 4
a285 4
			if (ctx->cmdclient->session != NULL) {
				session_index(ctx->cmdclient->session,
				    &ctx->cmdclient->last_session);
			}
d289 3
a291 4
			if (ctx->curclient->session != NULL) {
				session_index(ctx->curclient->session,
				    &ctx->curclient->last_session);
			}
@


1.30
log
@Store the current working directory in the session, change the default-path
option to default to empty and make that mean that the stored session CWD is
used.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.29 2010/04/06 21:35:44 nicm Exp $ */
d282 4
d289 4
@


1.29
log
@Merge copy mode and output mode, dropping the latter. Idea and code from
Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.28 2010/02/22 20:19:16 nicm Exp $ */
d21 1
d24 1
d130 3
a132 2
	const char			*update;
	char				*overrides, *cmd, *cwd, *cause;
d204 7
a210 2
	else
		cwd = options_get_string(&global_s_options, "default-path");
@


1.28
log
@Display -t argument to new-session, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.27 2010/02/06 23:22:27 nicm Exp $ */
d290 2
a291 1
		window_pane_set_mode(wp, &window_more_mode);
d294 1
a294 1
			window_more_add(wp, "%s", cause);
@


1.27
log
@Use the array.h code for the causes list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.26 2010/02/06 17:15:33 nicm Exp $ */
d327 2
d331 2
a332 2
	if (off < len && data->winname != NULL)
		off += cmd_prarg(buf + off, len - off, " -n ", data->winname);
@


1.26
log
@Instead of bailing out on the first configuration file error, carry on,
collecting all the errors, then start with the active window in more mode
displaying them.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.25 2009/12/03 22:50:10 nicm Exp $ */
d288 1
a288 1
	if (cfg_finished && cfg_ncauses != 0) {
d291 4
a294 3
		for (i = 0; i < cfg_ncauses; i++) {
			window_more_add(wp, "%s", cfg_causes[i]);
			xfree(cfg_causes[i]);
d296 1
a296 2
		xfree(cfg_causes);
		cfg_ncauses = 0;
@


1.25
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.24 2009/11/26 21:37:13 nicm Exp $ */
d125 1
d131 1
a131 1
	u_int				 sx, sy;
d283 15
@


1.24
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.23 2009/11/13 19:53:29 nicm Exp $ */
d187 2
a188 2
		
		overrides = 
d270 1
a270 1
 	if (!detached) {
d273 1
a273 1
 			ctx->cmdclient->session = s;
d276 1
a276 1
 			ctx->curclient->session = s;
@


1.23
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.22 2009/11/11 08:00:42 nicm Exp $ */
d55 1
@


1.22
log
@Only need to chmod +x or -x the socket when a client is created, lost or
attached, rather than every event loop.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.21 2009/10/10 10:02:48 nicm Exp $ */
d47 1
a47 1
	CMD_STARTSERVER|CMD_CANTNEST|CMD_SENDENVIRON, 0,
@


1.21
log
@Add "grouped sessions" which have independent name, options, current window and
so on but where the linked windows are synchronized (ie creating, killing
windows and so on are mirrored between the sessions). A grouped session may be
created by passing -t to new-session.

Had this around for a while, tested by a couple of people.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.20 2009/09/21 15:32:06 nicm Exp $ */
d280 1
@


1.20
log
@Use KEYC_NONE constant instead of 0 on init.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.19 2009/09/16 12:35:04 nicm Exp $ */
d37 1
d46 1
a46 1
	"[-d] [-n window-name] [-s session-name] [command]",
d62 1
d77 1
a77 1
	while ((opt = getopt(argc, argv, "ds:n:")) != -1) {
d86 4
d103 3
d122 1
a122 1
	struct session			*s;
d136 5
d221 3
a223 1
	if (data->cmd != NULL)
d246 1
a246 1
	if (data->winname != NULL) {
d253 10
@


1.19
log
@Rather than constructing an entire termios struct from ttydefaults.h, just let
forkpty do it and then alter the bits that should be changed after fork. A
little neater and more portable.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.18 2009/09/15 07:45:16 nicm Exp $ */
d72 1
a72 1
	self->entry->init(self, 0);
@


1.18
log
@The default terminal size should be 80x24, not 80x25.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.17 2009/09/12 09:54:34 nicm Exp $ */
a23 3
#define TTYDEFCHARS
#include <sys/ttydefaults.h>

d116 1
a116 1
	struct termios			 tio;
d151 2
a152 2
	 * Fill in the termios settings used for new windows in this session;
	 * if there is a command client, use the control characters from it.
d162 1
d164 1
a164 8
		memcpy(tio.c_cc, ttydefchars, sizeof tio.c_cc);
	tio.c_cc[VERASE] = '\177';
	tio.c_iflag = TTYDEF_IFLAG;
	tio.c_oflag = TTYDEF_OFLAG;
	tio.c_lflag = TTYDEF_LFLAG;
	tio.c_cflag = TTYDEF_CFLAG;
	cfsetispeed(&tio, TTYDEF_SPEED);
	cfsetospeed(&tio, TTYDEF_SPEED);
d221 1
a221 1
	    data->newname, cmd, cwd, &env, &tio, idx, sx, sy, &cause);
@


1.17
log
@tmux always outputs \177 for backspace, so explicitly set VERASE to \177 for
new windows.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.16 2009/08/23 17:37:48 nicm Exp $ */
d200 1
a200 1
		sy = 25;
@


1.16
log
@Some code tidying.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.15 2009/08/21 11:36:08 nicm Exp $ */
d167 1
@


1.15
log
@Move reading termios settings to before tty_open alters them, and expand the
comment.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.14 2009/08/19 14:32:15 nicm Exp $ */
d117 1
d190 7
a196 1
	/* Find new session size and options. */
d200 3
d204 2
a205 7
		if (ctx->cmdclient != NULL) {
			sx = ctx->cmdclient->tty.sx;
			sy = ctx->cmdclient->tty.sy;
		} else {
			sx = ctx->curclient->tty.sx;
			sy = ctx->curclient->tty.sy;
		}
d213 2
a214 4
	if (ctx->cmdclient != NULL && ctx->cmdclient->cwd != NULL)
		cwd = ctx->cmdclient->cwd;
	else
		cwd = options_get_string(&global_s_options, "default-path");
d237 1
d239 6
a244 4
		xfree(s->curw->window->name);
		s->curw->window->name = xstrdup(data->winname);
		options_set_number(
		    &s->curw->window->options, "automatic-rename", 0);
d247 3
a249 4
	/* 
	 * If a command client exists, it is either taking this session (and
	 * needs to get MSG_READY and stay around), or -d is given and it needs
	 * to exit.
a250 6
	if (ctx->cmdclient != NULL) {
		if (!detached)
			server_write_client(ctx->cmdclient, MSG_READY, NULL, 0);
	}
	
	/* Set the client to the new session. */
d253 1
@


1.14
log
@Use cfsetispeed/cfsetospeed to set termios speed members.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.13 2009/08/13 20:11:58 nicm Exp $ */
d152 21
a221 16

	/*
	 * Fill in the termios settings used for new windows in this session;
	 * if there is a command client, use the control characters from it.
	 */
	if (ctx->cmdclient != NULL && ctx->cmdclient->tty.fd != -1) {
		if (tcgetattr(ctx->cmdclient->tty.fd, &tio) != 0)
			fatal("tcgetattr failed");
	} else
		memcpy(tio.c_cc, ttydefchars, sizeof tio.c_cc);
	tio.c_iflag = TTYDEF_IFLAG;
	tio.c_oflag = TTYDEF_OFLAG;
	tio.c_lflag = TTYDEF_LFLAG;
	tio.c_cflag = TTYDEF_CFLAG;
	cfsetispeed(&tio, TTYDEF_SPEED);
	cfsetospeed(&tio, TTYDEF_SPEED);
@


1.13
log
@Add a base-index session option to specify the first index checked when looking
for an index for a new window.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.12 2009/08/13 19:16:14 nicm Exp $ */
d215 2
a216 2
	tio.c_ispeed = TTYDEF_SPEED;
	tio.c_ospeed = TTYDEF_SPEED;
@


1.12
log
@Rather than telling the client to exit in the function when creating a new
session detached, let the caller do it. Allows "tmux new -d \; attach" to work.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.11 2009/08/13 19:03:59 nicm Exp $ */
d121 1
a121 1
	int				 detached;
d219 3
a221 1
	s = session_create(data->newname, cmd, cwd, &env, &tio, sx, sy, &cause);
@


1.11
log
@When creating a new session from the command-line where there is an external
terminal, copy the termios(4) special characters and use them for new windows
created in the new session. Suggested by Theo.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.10 2009/08/08 21:52:43 nicm Exp $ */
a241 2
		else 
			server_write_client(ctx->cmdclient, MSG_EXIT, NULL, 0);
d256 1
a256 1
	return (1);	/* 1 means don't tell command client to exit */
@


1.10
log
@Infrastructure and commands to manage the environment for processes started
within tmux.

There is a global environment, copied from the external environment when the
server is started and each sesssion has an (initially empty) session
environment which overrides it.

New commands set-environment and show-environment manipulate or display the
environments.

A new session option, update-environment, is a space-separated list of
variables which are updated from the external environment into the session
environment every time a new session is created - the default is DISPLAY.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.9 2009/08/03 14:10:54 nicm Exp $ */
d21 6
d118 1
d202 16
d219 1
a219 1
	s = session_create(data->newname, cmd, cwd, &env, sx, sy, &cause);
@


1.9
log
@Add a terminal-overrides session option allowing individual terminfo(5) entries
to be overridden. The 88col/256col checks are now moved into the default
setting and out of the code.

Also remove a couple of old workarounds for xterm and rxvt which are no longer
necessary (tmux can emulate them if missing).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.8 2009/07/26 12:58:44 nicm Exp $ */
d43 1
a43 1
	CMD_STARTSERVER|CMD_CANTNEST, 0,
d111 2
d189 6
d196 1
a196 1
	s = session_create(data->newname, cmd, cwd, sx, sy, &cause);
d202 1
@


1.8
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.7 2009/07/23 15:47:56 nicm Exp $ */
d111 1
a111 1
	char				*cmd, *cwd, *cause;
d150 3
a152 1
		if (tty_open(&ctx->cmdclient->tty, &cause) != 0) {
@


1.7
log
@Revert r1.5, I don't like it, new sessions should start off identically - with
the defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.4 2009/07/17 15:03:11 nicm Exp $ */
a28 2
void	cmd_new_session_send(struct cmd *, struct buffer *);
void	cmd_new_session_recv(struct cmd *, struct buffer *);
a46 2
	cmd_new_session_send,
	cmd_new_session_recv,
a224 23
}

void
cmd_new_session_send(struct cmd *self, struct buffer *b)
{
	struct cmd_new_session_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->newname);
	cmd_send_string(b, data->winname);
	cmd_send_string(b, data->cmd);
}

void
cmd_new_session_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_new_session_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->newname = cmd_recv_string(b);
	data->winname = cmd_recv_string(b);
	data->cmd = cmd_recv_string(b);
@


1.6
log
@Both of cmdclient and curclient CAN be NULL - if the command is executed from
the configuration file. In this case, attach-session can't do much, and
new-session should just assume -d.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.5 2009/07/22 22:47:43 nicm Exp $ */
a114 1
	struct options			*oo;
a160 8
	/* 
	 * If the called from inside, use the source session for the default
	 * path and command.
	 */
	oo = &global_s_options;
	if (ctx->cmdclient == NULL && ctx->curclient != NULL)
		oo = &ctx->curclient->session->options;

d174 1
a174 1
	if (sy > 0 && options_get_number(oo, "status"))
d183 1
a183 1
		cwd = options_get_string(oo, "default-path");
d187 1
a187 1
		cmd = options_get_string(oo, "default-command");
@


1.5
log
@If there is a current session, use its default path and working directory for
the initial window when creating a new session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.4 2009/07/17 15:03:11 nicm Exp $ */
d117 1
d126 1
a126 1
	 * There are two cases:
d136 4
a139 1
	 * In both cases, a new additional session needs to be created and
d143 5
d149 1
a149 1
	if (!data->flag_detached && ctx->cmdclient != NULL) {
d167 1
a167 1
	if (ctx->cmdclient == NULL)
d171 1
a171 1
	if (data->flag_detached) {
d219 1
a219 1
		if (!data->flag_detached)
d226 1
a226 1
 	if (!data->flag_detached) {
@


1.4
log
@Tidy up new-session and attach-session and change them to work from inside
tmux, switching the current client to the new or requested session.

Written with Josh Elsasser.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.3 2009/07/13 23:11:35 nicm Exp $ */
d115 1
d153 8
d174 1
a174 1
	if (sy > 0 && options_get_number(&global_s_options, "status"))
d183 1
a183 1
		cwd = options_get_string(&global_s_options, "default-path");
d187 1
a187 1
		cmd = options_get_string(&global_s_options, "default-command");
@


1.3
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.2 2009/07/07 19:49:19 nicm Exp $ */
a113 1
	struct client			*c = ctx->cmdclient;
d118 4
a121 2
	if (ctx->curclient != NULL)
		return (0);
d123 19
a141 3
	if (!data->flag_detached) {
		if (c == NULL) {
			ctx->error(ctx, "no client to attach to");
d144 4
a147 2
		if (!(c->flags & CLIENT_TERMINAL)) {
			ctx->error(ctx, "not a terminal");
d152 12
a163 3
	if (data->newname != NULL && session_find(data->newname) != NULL) {
		ctx->error(ctx, "duplicate session: %s", data->newname);
		return (-1);
d165 9
a173 5

	cmd = data->cmd;
	if (cmd == NULL)
		cmd = options_get_string(&global_s_options, "default-command");
	if (c == NULL || c->cwd == NULL)
d175 2
d178 1
a178 22
		cwd = c->cwd;

	sx = 80;
	sy = 25;
	if (!data->flag_detached) {
		sx = c->tty.sx;
		sy = c->tty.sy;
	}

	if (options_get_number(&global_s_options, "status")) {
		if (sy == 0)
			sy = 1;
		else
			sy--;
	}

	if (!data->flag_detached && tty_open(&c->tty, &cause) != 0) {
		ctx->error(ctx, "open terminal failed: %s", cause);
		xfree(cause);
		return (-1);
	}

d180 1
d187 1
d195 21
a215 7
	if (data->flag_detached) {
		if (c != NULL)
			server_write_client(c, MSG_EXIT, NULL, 0);
	} else {
		c->session = s;
		server_write_client(c, MSG_READY, NULL, 0);
		server_redraw_client(c);
d219 1
a219 1
	return (1);
@


1.2
log
@Rename the global options variables to be shorter and to make session options
clear. No functional change, getting this out of the way to make later options
changes easier.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-session.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d45 1
a45 1
	CMD_STARTSERVER|CMD_CANTNEST,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d140 1
a140 1
		cmd = options_get_string(&global_options, "default-command");
d142 1
a142 1
		cwd = options_get_string(&global_options, "default-path");
d153 1
a153 1
	if (options_get_number(&global_options, "status")) {
@

