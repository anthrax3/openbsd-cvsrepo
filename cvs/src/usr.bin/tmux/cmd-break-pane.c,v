head	1.43;
access;
symbols
	OPENBSD_6_1:1.43.0.2
	OPENBSD_6_1_BASE:1.43
	OPENBSD_6_0:1.37.0.2
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.36.0.2
	OPENBSD_5_9_BASE:1.36
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.23.0.4
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.43
date	2017.03.08.13.36.12;	author nicm;	state Exp;
branches;
next	1.42;
commitid	jI8R4kuPSDw6nngR;

1.42
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.41;
commitid	BLRh0qXo7OVTPhiT;

1.41
date	2017.01.29.22.10.55;	author nicm;	state Exp;
branches;
next	1.40;
commitid	P6nbLNe6ZJY6Y7CM;

1.40
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.39;
commitid	pxm6osuE99zELpkU;

1.39
date	2016.10.15.09.27.52;	author nicm;	state Exp;
branches;
next	1.38;
commitid	3LOsIpF6UVTyfOf3;

1.38
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.37;
commitid	TaZ3kOtGiWwKofka;

1.37
date	2016.03.01.11.58.45;	author nicm;	state Exp;
branches;
next	1.36;
commitid	3trwrDCSjpclk4Bz;

1.36
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.35;
commitid	P3qmSOx6KrDBsb0c;

1.35
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.34;
commitid	rE682EC14v4gpeFy;

1.34
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.33;
commitid	gsQkQsSyBCSmU9ax;

1.33
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.32;
commitid	uzMkp8Z4FE6WB6s6;

1.32
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.31;
commitid	ns7JfXpW9TsHrnT3;

1.31
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.30;
commitid	MRfGAYPLeVqV46rT;

1.30
date	2015.12.02.23.09.22;	author nicm;	state Exp;
branches;
next	1.29;
commitid	8rSzLuAv4WWqWJEe;

1.29
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.28;
commitid	89xhQafU35Q5MQVC;

1.28
date	2015.09.17.14.11.55;	author nicm;	state Exp;
branches;
next	1.27;
commitid	mE6bsHeDsbG3Q4Um;

1.27
date	2015.06.17.19.56.08;	author nicm;	state Exp;
branches;
next	1.26;
commitid	uaWo5XArLQkTnXRM;

1.26
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.25;
commitid	b1G1TVWY7l4KyoY6;

1.25
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.24;
commitid	RV1NOSXD1mUR8LDP;

1.24
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.23;
commitid	Gq8hgMoG3t1Wy1Zv;

1.23
date	2014.04.17.09.13.13;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2013.10.10.12.00.18;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.24.09.27.19;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.22.15.55.22;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.12.13.31.09;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.02.02.00.10.11;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.08.21.30.00;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.13.19.53.28;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.10.10.02.48;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.13.20.11.58;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.30.13.45.56;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.43
log
@Add a helper function for the most common format_create/defaults/expand
pattern.
@
text
@/* $OpenBSD: cmd-break-pane.c,v 1.42 2017/02/03 11:57:27 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "tmux.h"

/*
 * Break pane off into a window.
 */

#define BREAK_PANE_TEMPLATE "#{session_name}:#{window_index}.#{pane_index}"

static enum cmd_retval	cmd_break_pane_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_break_pane_entry = {
	.name = "break-pane",
	.alias = "breakp",

	.args = { "dPF:n:s:t:", 0, 0 },
	.usage = "[-dP] [-F format] [-n window-name] [-s src-pane] [-t dst-window]",

	.sflag = CMD_PANE,
	.tflag = CMD_WINDOW_INDEX,

	.flags = 0,
	.exec = cmd_break_pane_exec
};

static enum cmd_retval
cmd_break_pane_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c = item->state.c;
	struct winlink		*wl = item->state.sflag.wl;
	struct session		*src_s = item->state.sflag.s;
	struct session		*dst_s = item->state.tflag.s;
	struct window_pane	*wp = item->state.sflag.wp;
	struct window		*w = wl->window;
	char			*name, *cause;
	int			 idx = item->state.tflag.idx;
	const char		*template;
	char			*cp;

	if (idx != -1 && winlink_find_by_index(&dst_s->windows, idx) != NULL) {
		cmdq_error(item, "index %d already in use", idx);
		return (CMD_RETURN_ERROR);
	}

	if (window_count_panes(w) == 1) {
		cmdq_error(item, "can't break with only one pane");
		return (CMD_RETURN_ERROR);
	}
	server_unzoom_window(w);

	TAILQ_REMOVE(&w->panes, wp, entry);
	window_lost_pane(w, wp);
	layout_close_pane(wp);

	w = wp->window = window_create(dst_s->sx, dst_s->sy);
	TAILQ_INSERT_HEAD(&w->panes, wp, entry);
	w->active = wp;

	if (!args_has(args, 'n')) {
		name = default_window_name(w);
		window_set_name(w, name);
		free(name);
	} else {
		window_set_name(w, args_get(args, 'n'));
		options_set_number(w->options, "automatic-rename", 0);
	}

	layout_init(w, wp);
	wp->flags |= PANE_CHANGED;

	if (idx == -1)
		idx = -1 - options_get_number(dst_s->options, "base-index");
	wl = session_attach(dst_s, w, idx, &cause); /* can't fail */
	if (!args_has(self->args, 'd'))
		session_select(dst_s, wl->idx);

	server_redraw_session(src_s);
	if (src_s != dst_s)
		server_redraw_session(dst_s);
	server_status_session_group(src_s);
	if (src_s != dst_s)
		server_status_session_group(dst_s);

	if (args_has(args, 'P')) {
		if ((template = args_get(args, 'F')) == NULL)
			template = BREAK_PANE_TEMPLATE;
		cp = format_single(item, template, c, dst_s, wl, wp);
		cmdq_print(item, "%s", cp);
		free(cp);
	}
	return (CMD_RETURN_NORMAL);
}
@


1.42
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.41 2017/01/29 22:10:55 nicm Exp $ */
d51 1
a58 1
	struct format_tree	*ft;
d109 1
a109 5

		ft = format_create(item, FORMAT_NONE, 0);
		format_defaults(ft, item->state.c, dst_s, wl, wp);

		cp = format_expand(ft, template);
a111 2

		format_free(ft);
@


1.41
log
@Add -n to break-pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.40 2016/10/16 19:04:05 nicm Exp $ */
d110 1
a110 1
		ft = format_create(item, 0);
@


1.40
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.39 2016/10/15 09:27:52 nicm Exp $ */
d37 2
a38 2
	.args = { "dPF:s:t:", 0, 0 },
	.usage = "[-dP] [-F format] [-s src-pane] [-t dst-window]",
d56 1
a56 2
	char			*name;
	char			*cause;
d80 10
a89 3
	name = default_window_name(w);
	window_set_name(w, name);
	free(name);
@


1.39
log
@Give window_create and window_create1 better names.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.38 2016/10/10 21:51:39 nicm Exp $ */
d31 1
a31 1
static enum cmd_retval	 cmd_break_pane_exec(struct cmd *, struct cmd_q *);
d48 1
a48 1
cmd_break_pane_exec(struct cmd *self, struct cmd_q *cmdq)
d51 4
a54 4
	struct winlink		*wl = cmdq->state.sflag.wl;
	struct session		*src_s = cmdq->state.sflag.s;
	struct session		*dst_s = cmdq->state.tflag.s;
	struct window_pane	*wp = cmdq->state.sflag.wp;
d58 1
a58 1
	int			 idx = cmdq->state.tflag.idx;
d64 1
a64 1
		cmdq_error(cmdq, "index %d already in use", idx);
d69 1
a69 1
		cmdq_error(cmdq, "can't break with only one pane");
d104 2
a105 2
		ft = format_create(cmdq, 0);
		format_defaults(ft, cmdq->state.c, dst_s, wl, wp);
d108 1
a108 1
		cmdq_print(cmdq, "%s", cp);
@


1.38
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.37 2016/03/01 11:58:45 nicm Exp $ */
d78 1
a78 1
	w = wp->window = window_create1(dst_s->sx, dst_s->sy);
@


1.37
log
@Fix break-pane synopsis and some other tmux.1 bits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.36 2016/01/19 15:59:12 nicm Exp $ */
d31 1
a31 1
enum cmd_retval	 cmd_break_pane_exec(struct cmd *, struct cmd_q *);
d47 1
a47 1
enum cmd_retval
@


1.36
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.35 2015/12/14 00:31:54 nicm Exp $ */
d38 1
a38 1
	.usage = "[-dP] [-F format] " CMD_SRCDST_PANE_USAGE,
@


1.35
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.34 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.34
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.33 2015/12/13 14:32:38 nicm Exp $ */
d40 4
a43 1
	.flags = CMD_PANE_S|CMD_INDEX_T,
@


1.33
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.32 2015/12/11 12:27:36 nicm Exp $ */
d34 8
a41 5
	"break-pane", "breakp",
	"dPF:s:t:", 0, 0,
	"[-dP] [-F format] " CMD_SRCDST_PANE_USAGE,
	CMD_PANE_S|CMD_INDEX_T,
	cmd_break_pane_exec
@


1.32
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.31 2015/12/08 08:34:18 nicm Exp $ */
d37 1
a37 1
	0,
d45 5
a49 5
	struct winlink		*wl;
	struct session		*src_s;
	struct session		*dst_s;
	struct window_pane	*wp;
	struct window		*w;
d52 1
a52 1
	int			 idx;
a56 5
	wl = cmd_find_pane(cmdq, args_get(args, 's'), &src_s, &wp);
	if (wl == NULL)
		return (CMD_RETURN_ERROR);
	if ((idx = cmd_find_index(cmdq, args_get(args, 't'), &dst_s)) == -2)
		return (CMD_RETURN_ERROR);
a60 1
	w = wl->window;
d99 1
a99 2
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), dst_s, wl,
		    wp);
@


1.31
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.30 2015/12/02 23:09:22 nicm Exp $ */
d104 1
a104 1
		ft = format_create(0);
@


1.30
log
@Mark new active pane changed after pane lost in window, and after
break-pane. Reported by tim@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.29 2015/10/27 15:58:42 nicm Exp $ */
d104 1
a104 1
		ft = format_create();
@


1.29
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.28 2015/09/17 14:11:55 nicm Exp $ */
d85 1
@


1.28
log
@Redraw both src and dst sessions in break-pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.27 2015/06/17 19:56:08 nicm Exp $ */
d87 1
a87 1
		idx = -1 - options_get_number(&dst_s->options, "base-index");
@


1.27
log
@Change break-pane to take target and source panes (-t and -s) in line
with other commands, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.26 2015/02/05 10:29:43 nicm Exp $ */
d46 2
a47 1
	struct session		*s;
d57 2
a58 1
	if ((wl = cmd_find_pane(cmdq, args_get(args, 's'), &s, &wp)) == NULL)
d60 1
a60 1
	if ((idx = cmd_find_index(cmdq, args_get(args, 't'), &s)) == -2)
d62 1
a62 1
	if (idx != -1 && winlink_find_by_index(&s->windows, idx) != NULL) {
d66 1
d68 1
a68 1
	if (window_count_panes(wl->window) == 1) {
a71 2

	w = wl->window;
d78 1
a78 1
	w = wp->window = window_create1(s->sx, s->sy);
d87 2
a88 2
		idx = -1 - options_get_number(&s->options, "base-index");
	wl = session_attach(s, w, idx, &cause); /* can't fail */
d90 1
a90 1
		session_select(s, wl->idx);
d92 6
a97 2
	server_redraw_session(s);
	server_status_session_group(s);
d104 2
a105 1
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s, wl, wp);
@


1.26
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.25 2014/10/20 23:35:28 nicm Exp $ */
d35 2
a36 2
	"dPF:t:", 0, 0,
	"[-dP] [-F format] " CMD_TARGET_PANE_USAGE,
d51 1
a51 1
	int			 base_idx;
d56 1
a56 1
	if ((wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp)) == NULL)
d58 6
d85 3
a87 2
	base_idx = options_get_number(&s->options, "base-index");
	wl = session_attach(s, w, -1 - base_idx, &cause); /* can't fail */
@


1.25
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.24 2014/10/20 22:29:25 nicm Exp $ */
a51 1
	struct client		*c;
d92 1
a92 5
		if ((c = cmd_find_client(cmdq, NULL, 1)) != NULL)
			format_client(ft, c);
		format_session(ft, s);
		format_winlink(ft, s, wl);
		format_window_pane(ft, wp);
@


1.24
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.23 2014/04/17 09:13:13 nicm Exp $ */
d28 2
@


1.23
log
@Correct the dance to fix the active pane in join-pane by pulling the
(right) code from break-pane and window_remove_pane into a helper
function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.22 2013/10/10 12:00:18 nicm Exp $ */
a35 1
	NULL,
@


1.22
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.21 2013/03/24 09:57:59 nicm Exp $ */
d68 1
a68 10
	if (wp == w->active) {
		w->active = w->last;
		w->last = NULL;
		if (w->active == NULL) {
			w->active = TAILQ_PREV(wp, window_panes, entry);
			if (w->active == NULL)
				w->active = TAILQ_NEXT(wp, entry);
		}
	} else if (wp == w->last)
		w->last = NULL;
@


1.21
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.20 2013/03/24 09:54:10 nicm Exp $ */
a35 1
	NULL,
@


1.20
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.19 2013/03/24 09:27:19 nicm Exp $ */
d66 2
d87 1
a87 1
	layout_init(w);
@


1.19
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.18 2013/03/22 15:55:22 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	 cmd_break_pane_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
cmd_break_pane_exec(struct cmd *self, struct cmd_ctx *ctx)
d57 1
a57 1
	if ((wl = cmd_find_pane(ctx, args_get(args, 't'), &s, &wp)) == NULL)
d61 1
a61 1
		ctx->error(ctx, "can't break with only one pane");
d100 1
a100 1
		if ((c = cmd_find_client(ctx, NULL, 1)) != NULL)
d107 1
a107 1
		ctx->print(ctx, "%s", cp);
@


1.18
log
@evbuffer_readline returns allocated storage, don't leak it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.17 2012/08/14 08:51:53 nicm Exp $ */
d100 1
a100 1
		if ((c = cmd_find_client(ctx, NULL)) != NULL)
@


1.17
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.16 2012/07/11 07:10:15 nicm Exp $ */
a95 1

@


1.16
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.15 2012/07/10 11:53:01 nicm Exp $ */
d98 1
a98 1
			template = DEFAULT_PANE_INFO_TEMPLATE;
@


1.15
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.14 2012/05/22 11:35:37 nicm Exp $ */
d29 1
a29 1
int	cmd_break_pane_exec(struct cmd *, struct cmd_ctx *);
d41 1
a41 1
int
d58 1
a58 1
		return (-1);
d62 1
a62 1
		return (-1);
d113 1
a113 1
	return (0);
@


1.14
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.13 2012/03/12 13:31:09 nicm Exp $ */
d84 1
a84 1
	xfree(name);
d109 1
a109 1
		xfree(cp);
@


1.13
log
@Add -P/-F flags to break-pane too, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.12 2012/02/02 00:10:11 nicm Exp $ */
d96 4
a99 3
		template = "#{session_name}:#{window_index}";
		if (args_has(args, 'F'))
			template = args_get(args, 'F');
@


1.12
log
@Move window name changes into wrapper function window_set_name, from
George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.11 2011/05/08 21:30:00 nicm Exp $ */
d33 2
a34 2
	"dt:", 0, 0,
	"[-d] " CMD_TARGET_PANE_USAGE,
d52 4
d95 17
@


1.11
log
@Reset last pane properly when using break-pane as well, fixes a problem
reported to Debian by Hannes von Haugwitz (bug 622677).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.10 2011/01/04 00:42:46 nicm Exp $ */
d49 1
d78 3
a80 1
	w->name = default_window_name(w);
@


1.10
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.9 2009/12/03 22:50:10 nicm Exp $ */
d60 12
a71 6
	TAILQ_REMOVE(&wl->window->panes, wp, entry);
	if (wl->window->active == wp) {
		wl->window->active = TAILQ_PREV(wp, window_panes, entry);
		if (wl->window->active == NULL)
			wl->window->active = TAILQ_NEXT(wp, entry);
	}
@


1.9
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.8 2009/11/13 19:53:28 nicm Exp $ */
d33 6
a38 7
	CMD_TARGET_PANE_USAGE " [-d]",
	0, "d",
	cmd_target_init,
	cmd_target_parse,
	cmd_break_pane_exec,
	cmd_target_free,
	cmd_target_print
d44 1
a44 1
	struct cmd_target_data	*data = self->data;
d52 1
a52 1
	if ((wl = cmd_find_pane(ctx, data->target, &s, &wp)) == NULL)
d76 1
a76 1
	if (!cmd_check_flag(data->chflags, 'd'))
@


1.8
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.7 2009/10/10 10:02:48 nicm Exp $ */
d67 1
a67 1
 	layout_close_pane(wp);
d69 4
a72 4
 	w = wp->window = window_create1(s->sx, s->sy);
 	TAILQ_INSERT_HEAD(&w->panes, wp, entry);
 	w->active = wp;
 	w->name = default_window_name(w);
d76 3
a78 3
 	wl = session_attach(s, w, -1 - base_idx, &cause); /* can't fail */
 	if (!cmd_check_flag(data->chflags, 'd'))
 		session_select(s, wl->idx);
@


1.7
log
@Add "grouped sessions" which have independent name, options, current window and
so on but where the linked windows are synchronized (ie creating, killing
windows and so on are mirrored between the sessions). A grouped session may be
created by passing -t to new-session.

Had this around for a while, tested by a couple of people.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.6 2009/08/13 20:11:58 nicm Exp $ */
d34 1
a34 1
	0, CMD_CHFLAG('d'),
d77 1
a77 1
 	if (!(data->chflags & CMD_CHFLAG('d')))
@


1.6
log
@Add a base-index session option to specify the first index checked when looking
for an index for a new window.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.5 2009/07/30 13:45:56 nicm Exp $ */
d81 1
@


1.5
log
@Merge pane number into the target specification for pane commands. Instead of
using -p index, a target pane is now addressed with the normal -t window form
but suffixed with a period and a pane index, for example :0.2 or
mysess:mywin.1. An unadorned number such as -t 1 is tried as a pane index in
the current window, if that fails the same rules are followed as for a target
window and the current pane in that window used.

As a side-effect this now means that swap-pane can swap panes between different
windows.

Note that this changes the syntax of the break-pane, clear-history, kill-pane,
resize-pane, select-pane and swap-pane commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.4 2009/07/26 12:58:44 nicm Exp $ */
d51 1
d75 2
a76 1
 	wl = session_attach(s, w, -1, &cause); /* can't fail */
@


1.4
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.3 2009/07/19 13:21:40 nicm Exp $ */
d33 1
a33 1
	CMD_PANE_WINDOW_USAGE " [-d]",
d35 2
a36 2
	cmd_pane_init,
	cmd_pane_parse,
d38 2
a39 2
	cmd_pane_free,
	cmd_pane_print
d45 1
a45 1
	struct cmd_pane_data	*data = self->data;
d52 1
a52 1
	if ((wl = cmd_find_window(ctx, data->target, &s)) == NULL)
a53 9
	if (data->pane == -1)
		wp = wl->window->active;
	else {
		wp = window_pane_at_index(wl->window, data->pane);
		if (wp == NULL) {
			ctx->error(ctx, "no pane: %d", data->pane);
			return (-1);
		}
	}
d56 1
a56 1
		ctx->error(ctx, "can't break pane: %d", data->pane);
@


1.3
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
a37 2
       	cmd_pane_send,
	cmd_pane_recv,
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-break-pane.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d77 1
a77 1
 	layout_refresh(wl->window, 0);
d83 1
a87 1
 	layout_refresh(w, 0);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
	CMD_DFLAG,
d85 1
a85 1
 	if (!(data->flags & CMD_DFLAG))
@

