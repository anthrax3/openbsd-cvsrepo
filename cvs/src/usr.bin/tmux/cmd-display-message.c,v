head	1.42;
access;
symbols
	OPENBSD_6_2_BASE:1.42
	OPENBSD_6_1:1.40.0.4
	OPENBSD_6_1_BASE:1.40
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7;
locks; strict;
comment	@ * @;


1.42
date	2017.05.01.12.20.55;	author nicm;	state Exp;
branches;
next	1.41;
commitid	sAXCoXWmq7A1UnAP;

1.41
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.40;
commitid	RXMp6wwG5a5Y82bo;

1.40
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.39;
commitid	BLRh0qXo7OVTPhiT;

1.39
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.38;
commitid	pxm6osuE99zELpkU;

1.38
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.37;
commitid	1GCC1n59gejVg5Ih;

1.37
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.36;
commitid	TaZ3kOtGiWwKofka;

1.36
date	2016.08.25.09.33.14;	author nicm;	state Exp;
branches;
next	1.35;
commitid	8opPfnPVojPUjuH1;

1.35
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.34;
commitid	rE682EC14v4gpeFy;

1.34
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.33;
commitid	gsQkQsSyBCSmU9ax;

1.33
date	2015.12.13.18.31.47;	author nicm;	state Exp;
branches;
next	1.32;
commitid	vOQHO6uiGtto54AC;

1.32
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.31;
commitid	uzMkp8Z4FE6WB6s6;

1.31
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.30;
commitid	ns7JfXpW9TsHrnT3;

1.30
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.29;
commitid	MRfGAYPLeVqV46rT;

1.29
date	2015.11.18.16.49.13;	author nicm;	state Exp;
branches;
next	1.28;
commitid	PQUHxiez3xRdxwwB;

1.28
date	2015.04.27.16.25.57;	author nicm;	state Exp;
branches;
next	1.27;
commitid	0WBWxxZyxaAFVhmn;

1.27
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.26;
commitid	b1G1TVWY7l4KyoY6;

1.26
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.25;
commitid	RV1NOSXD1mUR8LDP;

1.25
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.24;
commitid	Gq8hgMoG3t1Wy1Zv;

1.24
date	2013.10.10.12.01.14;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.10.10.12.00.19;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.25.11.42.01;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.25.11.41.31;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.24.09.27.19;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.24.09.26.34;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2012.12.09.23.17.35;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.03.03.09.45.41;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.02.23.22.40.58;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.06.11.36.26;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.29.19.30.16;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.24.19.16.11;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.19.16.22.10;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.19.10.22.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.10.15.03.01;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.17.18.45.08;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.42
log
@In order that people can use formats like #D in #() in the status line
and not have to wait for an update when they change pane, we allow
commands to run more than once a second if the expanded form
changes. Unfortunately this can mean them being run far too often
(pretty much continually) when multiple clients exist, because some
formats (including #D) will always differ between clients.

To avoid this, give each client its own tree of jobs which means that
the same command will be different instances for each client - similar
to how we have the tag to separate commands for different panes.

GitHub issue 889; test case reported by Paul Johnson.
@
text
@/* $OpenBSD: cmd-display-message.c,v 1.41 2017/04/22 10:22:39 nicm Exp $ */

/*
 * Copyright (c) 2009 Tiago Cunha <me@@tiagocunha.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <time.h>

#include "tmux.h"

/*
 * Displays a message in the status line.
 */

#define DISPLAY_MESSAGE_TEMPLATE			\
	"[#{session_name}] #{window_index}:"		\
	"#{window_name}, current pane #{pane_index} "	\
	"- (%H:%M %d-%b-%y)"

static enum cmd_retval	cmd_display_message_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_display_message_entry = {
	.name = "display-message",
	.alias = "display",

	.args = { "c:pt:F:", 0, 1 },
	.usage = "[-p] [-c target-client] [-F format] "
		 CMD_TARGET_PANE_USAGE " [message]",

	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_display_message_exec
};

static enum cmd_retval
cmd_display_message_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c;
	struct session		*s = item->target.s;
	struct winlink		*wl = item->target.wl;
	struct window_pane	*wp = item->target.wp;
	const char		*template;
	char			*msg;
	struct format_tree	*ft;

	if (args_has(args, 'F') && args->argc != 0) {
		cmdq_error(item, "only one of -F or argument must be given");
		return (CMD_RETURN_ERROR);
	}
	c = cmd_find_client(item, args_get(args, 'c'), 1);

	template = args_get(args, 'F');
	if (args->argc != 0)
		template = args->argv[0];
	if (template == NULL)
		template = DISPLAY_MESSAGE_TEMPLATE;

	ft = format_create(item->client, item, FORMAT_NONE, 0);
	format_defaults(ft, c, s, wl, wp);

	msg = format_expand_time(ft, template, time(NULL));
	if (args_has(self->args, 'p'))
		cmdq_print(item, "%s", msg);
	else if (c != NULL)
		status_message_set(c, "%s", msg);
	free(msg);

	format_free(ft);

	return (CMD_RETURN_NORMAL);
}
@


1.41
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.40 2017/02/03 11:57:27 nicm Exp $ */
d76 1
a76 1
	ft = format_create(item, FORMAT_NONE, 0);
@


1.40
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.39 2016/10/16 19:04:05 nicm Exp $ */
d46 1
a46 2
	.cflag = CMD_CLIENT_CANFAIL,
	.tflag = CMD_PANE,
d56 4
a59 4
	struct client		*c = item->state.c;
	struct session		*s = item->state.tflag.s;
	struct winlink		*wl = item->state.tflag.wl;
	struct window_pane	*wp = item->state.tflag.wp;
d68 1
@


1.39
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.38 2016/10/13 22:48:51 nicm Exp $ */
d76 1
a76 1
	ft = format_create(item, 0);
@


1.38
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.37 2016/10/10 21:51:39 nicm Exp $ */
d35 2
a36 1
static enum cmd_retval	 cmd_display_message_exec(struct cmd *, struct cmd_q *);
d54 1
a54 1
cmd_display_message_exec(struct cmd *self, struct cmd_q *cmdq)
d57 4
a60 4
	struct client		*c = cmdq->state.c;
	struct session		*s = cmdq->state.tflag.s;
	struct winlink		*wl = cmdq->state.tflag.wl;
	struct window_pane	*wp = cmdq->state.tflag.wp;
d66 1
a66 1
		cmdq_error(cmdq, "only one of -F or argument must be given");
d76 1
a76 1
	ft = format_create(cmdq, 0);
d81 1
a81 1
		cmdq_print(cmdq, "%s", msg);
@


1.37
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.36 2016/08/25 09:33:14 nicm Exp $ */
d48 1
a48 1
	.flags = 0,
@


1.36
log
@Do not crash if display-message used without a client, issue reported by
Serge Aleynikov, fix from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.35 2015/12/14 00:31:54 nicm Exp $ */
d35 1
a35 1
enum cmd_retval	 cmd_display_message_exec(struct cmd *, struct cmd_q *);
d52 1
a52 1
enum cmd_retval
@


1.35
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.34 2015/12/13 21:53:57 nicm Exp $ */
d81 1
a81 1
	else
d84 1
@


1.34
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.33 2015/12/13 18:31:47 nicm Exp $ */
d45 4
a48 1
	.flags = CMD_CLIENT_C|CMD_PANE_T|CMD_CLIENT_CANFAIL,
@


1.33
log
@-c needs to be able for fail for display-message.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.32 2015/12/13 14:32:38 nicm Exp $ */
d38 9
a46 6
	"display-message", "display",
	"c:pt:F:", 0, 1,
	"[-p] [-c target-client] [-F format] " CMD_TARGET_PANE_USAGE
	" [message]",
	CMD_CLIENT_C|CMD_PANE_T|CMD_CLIENT_CANFAIL,
	cmd_display_message_exec
@


1.32
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.31 2015/12/11 12:27:36 nicm Exp $ */
d42 1
a42 1
	CMD_CLIENT_C|CMD_PANE_T,
@


1.31
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.30 2015/12/08 08:34:18 nicm Exp $ */
d42 1
a42 1
	0,
d50 4
a53 4
	struct client		*c;
	struct session		*s;
	struct winlink		*wl;
	struct window_pane	*wp;
a57 10
	if (args_has(args, 't')) {
		wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp);
		if (wl == NULL)
			return (CMD_RETURN_ERROR);
	} else {
		wl = cmd_find_pane(cmdq, NULL, &s, &wp);
		if (wl == NULL)
			return (CMD_RETURN_ERROR);
	}

a60 12
	}

	if (args_has(args, 'c')) {
		c = cmd_find_client(cmdq, args_get(args, 'c'), 0);
		if (c == NULL)
			return (CMD_RETURN_ERROR);
	} else {
		c = cmd_find_client(cmdq, NULL, 1);
		if (c == NULL && !args_has(self->args, 'p')) {
			cmdq_error(cmdq, "no client available");
			return (CMD_RETURN_ERROR);
		}
@


1.30
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.29 2015/11/18 16:49:13 nicm Exp $ */
d91 1
a91 1
	ft = format_create(0);
@


1.29
log
@Use format_expand_time for display-message.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.28 2015/04/27 16:25:57 nicm Exp $ */
d91 1
a91 1
	ft = format_create();
@


1.28
log
@Rewrite of the target resolution internals to be simpler and more
consistent but with much less duplication, but keeping the same internal
API. Also adds more readable aliases for some of the special tokens used
in targets (eg "{start}" instead of "^"). Some behaviours may have
changed, for example prefix matches now happen before fnmatch.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.27 2015/02/05 10:29:43 nicm Exp $ */
a56 3
	char			 out[BUFSIZ];
	time_t			 t;
	size_t			 len;
d94 1
a94 5
	t = time(NULL);
	len = strftime(out, sizeof out, template, localtime(&t));
	out[len] = '\0';

	msg = format_expand(ft, out);
@


1.27
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.26 2014/10/20 23:35:28 nicm Exp $ */
d81 1
a81 1
		c = cmd_current_client(cmdq);
@


1.26
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.25 2014/10/20 22:29:25 nicm Exp $ */
d95 1
a95 5
	if (c != NULL)
		format_client(ft, c);
	format_session(ft, s);
	format_winlink(ft, s, wl);
	format_window_pane(ft, wp);
@


1.25
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.24 2013/10/10 12:01:14 nicm Exp $ */
d29 5
@


1.24
log
@Trivial style and spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.23 2013/10/10 12:00:19 nicm Exp $ */
a37 1
	NULL,
@


1.23
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.22 2013/03/25 11:42:01 nicm Exp $ */
d73 3
a75 3
	    c = cmd_find_client(cmdq, args_get(args, 'c'), 0);
	    if (c == NULL)
		return (CMD_RETURN_ERROR);
@


1.22
log
@Handle no client better in display-message.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.21 2013/03/25 11:41:31 nicm Exp $ */
a37 1
	NULL,
@


1.21
log
@Don't let display-message crash if no client, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.20 2013/03/24 09:54:10 nicm Exp $ */
d73 12
d92 1
a92 1
	if ((c = cmd_find_client(cmdq, args_get(args, 'c'), 1)) != NULL)
d105 1
a105 4
	else if (c == NULL) {
		cmdq_error(cmdq, "no client available");
		return (CMD_RETURN_ERROR);
	} else
@


1.20
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.19 2013/03/24 09:27:19 nicm Exp $ */
d93 4
a96 1
	else
@


1.19
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.18 2013/03/24 09:26:34 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_display_message_exec(struct cmd *, struct cmd_ctx *);
d44 1
a44 1
cmd_display_message_exec(struct cmd *self, struct cmd_ctx *ctx)
d59 1
a59 1
		wl = cmd_find_pane(ctx, args_get(args, 't'), &s, &wp);
d63 1
a63 1
		wl = cmd_find_pane(ctx, NULL, &s, &wp);
d69 1
a69 1
		ctx->error(ctx, "only one of -F or argument must be given");
d80 1
a80 1
	if ((c = cmd_find_client(ctx, args_get(args, 'c'), 1)) != NULL)
d92 1
a92 1
		ctx->print(ctx, "%s", msg);
a94 1

d97 1
@


1.18
log
@Allow display-message with no curclient.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.17 2012/12/09 23:17:35 nicm Exp $ */
a57 2
	c = cmd_find_client(ctx, args_get(args, 'c'));

d80 1
a80 1
	if (c != NULL)
@


1.17
log
@Use the CMD_*_USAGE defines consistently, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.16 2012/08/14 08:51:53 nicm Exp $ */
d58 1
a58 2
	if ((c = cmd_find_client(ctx, args_get(args, 'c'))) == NULL)
		return (CMD_RETURN_ERROR);
d82 2
a83 1
	format_client(ft, c);
@


1.16
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.15 2012/07/11 07:10:15 nicm Exp $ */
d35 2
a36 1
	"[-p] [-c target-client] [-t target-pane] [-F format] [message]",
@


1.15
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.14 2012/07/10 11:53:01 nicm Exp $ */
d79 1
a79 1
		template = DEFAULT_DISPLAY_MESSAGE_TEMPLATE;
@


1.14
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.13 2012/05/22 11:35:37 nicm Exp $ */
d30 1
a30 1
int	cmd_display_message_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
int
d58 1
a58 1
		return (-1);
d63 1
a63 1
			return (-1);
d67 1
a67 1
			return (-1);
d72 1
a72 1
		return (-1);
d99 1
a99 1
	return (0);
@


1.13
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.12 2012/03/03 09:45:41 nicm Exp $ */
d21 1
d97 1
a97 1
	xfree(msg);
@


1.12
log
@Terminate strftime buffer properly and free format string, whoops. From
Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.11 2012/02/23 22:40:58 nicm Exp $ */
d78 1
a78 1
		template = "[#S] #I:#W, current pane #P - (%H:%M %d-%b-%y)";
@


1.11
log
@Use format for display-message, based on a diff from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.10 2011/04/06 11:36:26 miod Exp $ */
d54 1
d87 2
a88 1
	strftime(out, sizeof out, template, localtime(&t));
d95 1
d97 1
a97 1

@


1.10
log
@Avoid using NULL in non-pointer contexts: use 0 for integer values and '\0'
for chars.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.9 2011/03/29 19:30:16 nicm Exp $ */
d33 2
a34 2
	"c:pt:", 0, 1,
	"[-p] [-c target-client] [-t target-pane] [message]",
d51 3
d58 1
a58 1
	if (args_has(args, 't') != 0) {
d63 8
a70 3
		s = NULL;
		wl = NULL;
		wp = NULL;
d73 4
a76 1
	if (args->argc == 0)
a77 2
	else
		template = args->argv[0];
d79 10
a88 1
	msg = status_replace(c, s, wl, wp, template, time(NULL), 0);
@


1.9
log
@Change -t on display-message to be target-pane for the #[A-Z]
replacements and add -c as target-client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.8 2011/01/04 00:42:46 nicm Exp $ */
d55 1
a55 1
	if (args_has(args, 't') != NULL) {
@


1.8
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.7 2009/11/24 19:16:11 nicm Exp $ */
d33 2
a34 2
	"pt:", 0, 1,
	"[-p] " CMD_TARGET_CLIENT_USAGE " [message]",
d46 3
d52 1
a52 1
	if ((c = cmd_find_client(ctx, args_get(args, 't'))) == NULL)
d55 10
d70 1
a70 1
	msg = status_replace(c, NULL, template, time(NULL), 0);
@


1.7
log
@Add a -p flag to display-message to print the output rather than displaying in
the status line, this allows things like "display -p '#W'" to find the current
window index.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.6 2009/11/19 16:22:10 nicm Exp $ */
d33 1
d35 4
a38 6
	CMD_ARG01, "p",
	cmd_target_init,
	cmd_target_parse,
	cmd_display_message_exec,
	cmd_target_free,
	cmd_target_print
d44 1
a44 1
	struct cmd_target_data	*data = self->data;
d49 1
a49 1
	if ((c = cmd_find_client(ctx, data->target)) == NULL)
d52 1
a52 1
	if (data->arg == NULL)
d55 1
a55 1
		template = data->arg;
d58 1
a58 1
	if (cmd_check_flag(data->chflags, 'p'))
@


1.6
log
@Two new options, window-status-format and window-status-current-format, which
allow the format of each window in the status line window list to be controlled
using similar # sequences as status-left/right.

This diff also moves part of the way towards UTF-8 support in window names but
it isn't quite there yet.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.5 2009/11/19 10:22:06 nicm Exp $ */
d33 2
a34 2
	CMD_TARGET_CLIENT_USAGE " [message]",
	CMD_ARG01, "",
d59 4
a62 1
	status_message_set(c, "%s", msg);
@


1.5
log
@Don't interpret #() for display-message, it usually doesn't make sense and may
leak commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.4 2009/11/13 19:53:29 nicm Exp $ */
d58 1
a58 1
	msg = status_replace(c, template, time(NULL), 0);
@


1.4
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.3 2009/10/10 15:03:01 nicm Exp $ */
d58 1
a58 1
	msg = status_replace(c, template, time(NULL));
@


1.3
log
@Rather than running status-left, status-right and window title #() with popen
immediately every redraw, queue them up and run them in the background,
starting each once every status-interval. The actual status line uses the
output from the last run.

This brings several advantages:

- tmux itself may be called from inside #() without causing the server to hang;
- likewise, sleep or similar doesn't cause the server to block;
- commands aren't run excessively often when redrawing;
- commands shared by status-left and status-right, or used multiple times, will
  only be run once.

run-shell and if-shell still use system()/popen() but will be changed over to
use this too later.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.2 2009/07/26 12:58:44 nicm Exp $ */
d34 1
a34 1
	CMD_ARG01, 0,
@


1.2
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-display-message.c,v 1.1 2009/07/17 18:45:08 nicm Exp $ */
d58 1
a58 1
	msg = status_replace(c->session, template, time(NULL));
@


1.1
log
@- New command display-message (alias display) to display a message in the
  status line (bound to "i" and displays the current window and time by
  default). The same substitutions are applied as for status-left/right.
- Add support for including the window index (#I), pane index (#P) and window
  name (#W) in the message, and status-left or status-right.
- Bump protocol version.

From Tiago Cunha, thanks!
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a37 2
	cmd_target_send,
	cmd_target_recv,
@

