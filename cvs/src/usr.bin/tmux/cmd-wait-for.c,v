head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.2
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.15;
commitid	pxm6osuE99zELpkU;

1.15
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.14;
commitid	1xIYFpLYkPIXNEvU;

1.14
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.13;
commitid	TaZ3kOtGiWwKofka;

1.13
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.12;
commitid	P3qmSOx6KrDBsb0c;

1.12
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.11;
commitid	gsQkQsSyBCSmU9ax;

1.11
date	2015.11.18.14.27.44;	author nicm;	state Exp;
branches;
next	1.10;
commitid	RjsAPRkWwvS79w40;

1.10
date	2015.10.20.21.12.08;	author nicm;	state Exp;
branches;
next	1.9;
commitid	fVAT1gEydaesyRmS;

1.9
date	2015.09.13.10.45.55;	author nicm;	state Exp;
branches;
next	1.8;
commitid	dM729m49nRVQ6B4W;

1.8
date	2015.09.04.12.02.44;	author nicm;	state Exp;
branches;
next	1.7;
commitid	tXbQShN2rQcjtBGT;

1.7
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.6;
commitid	Gq8hgMoG3t1Wy1Zv;

1.6
date	2014.09.01.21.58.41;	author nicm;	state Exp;
branches;
next	1.5;
commitid	PB2QtqgfNXhDsTfg;

1.5
date	2014.09.01.21.50.18;	author nicm;	state Exp;
branches;
next	1.4;
commitid	yvK8NJvd2XzXhKku;

1.4
date	2013.10.10.12.02.55;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.10.12.00.24;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.25.10.09.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.25.10.09.05;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@/* $OpenBSD: cmd-wait-for.c,v 1.15 2016/10/16 17:55:14 nicm Exp $ */

/*
 * Copyright (c) 2013 Nicholas Marriott <nicholas.marriott@@gmail.com>
 * Copyright (c) 2013 Thiago de Arruda <tpadilha84@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Block or wake a client on a named wait channel.
 */

static enum cmd_retval cmd_wait_for_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_wait_for_entry = {
	.name = "wait-for",
	.alias = "wait",

	.args = { "LSU", 1, 1 },
	.usage = "[-L|-S|-U] channel",

	.flags = 0,
	.exec = cmd_wait_for_exec
};

struct wait_item {
	struct cmdq_item	*item;
	TAILQ_ENTRY(wait_item)	 entry;
};

struct wait_channel {
	const char	       *name;
	int			locked;
	int			woken;

	TAILQ_HEAD(, wait_item)	waiters;
	TAILQ_HEAD(, wait_item)	lockers;

	RB_ENTRY(wait_channel)	entry;
};
RB_HEAD(wait_channels, wait_channel);
static struct wait_channels wait_channels = RB_INITIALIZER(wait_channels);

static int wait_channel_cmp(struct wait_channel *, struct wait_channel *);
RB_GENERATE_STATIC(wait_channels, wait_channel, entry, wait_channel_cmp);

static int
wait_channel_cmp(struct wait_channel *wc1, struct wait_channel *wc2)
{
	return (strcmp(wc1->name, wc2->name));
}

static enum cmd_retval	cmd_wait_for_signal(struct cmdq_item *, const char *,
			    struct wait_channel *);
static enum cmd_retval	cmd_wait_for_wait(struct cmdq_item *, const char *,
			    struct wait_channel *);
static enum cmd_retval	cmd_wait_for_lock(struct cmdq_item *, const char *,
			    struct wait_channel *);
static enum cmd_retval	cmd_wait_for_unlock(struct cmdq_item *, const char *,
			    struct wait_channel *);

static struct wait_channel	*cmd_wait_for_add(const char *);
static void			 cmd_wait_for_remove(struct wait_channel *);

static struct wait_channel *
cmd_wait_for_add(const char *name)
{
	struct wait_channel *wc;

	wc = xmalloc(sizeof *wc);
	wc->name = xstrdup(name);

	wc->locked = 0;
	wc->woken = 0;

	TAILQ_INIT(&wc->waiters);
	TAILQ_INIT(&wc->lockers);

	RB_INSERT(wait_channels, &wait_channels, wc);

	log_debug("add wait channel %s", wc->name);

	return (wc);
}

static void
cmd_wait_for_remove(struct wait_channel *wc)
{
	if (wc->locked)
		return;
	if (!TAILQ_EMPTY(&wc->waiters) || !wc->woken)
		return;

	log_debug("remove wait channel %s", wc->name);

	RB_REMOVE(wait_channels, &wait_channels, wc);

	free((void *)wc->name);
	free(wc);
}

static enum cmd_retval
cmd_wait_for_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args     	*args = self->args;
	const char		*name = args->argv[0];
	struct wait_channel	*wc, wc0;

	wc0.name = name;
	wc = RB_FIND(wait_channels, &wait_channels, &wc0);

	if (args_has(args, 'S'))
		return (cmd_wait_for_signal(item, name, wc));
	if (args_has(args, 'L'))
		return (cmd_wait_for_lock(item, name, wc));
	if (args_has(args, 'U'))
		return (cmd_wait_for_unlock(item, name, wc));
	return (cmd_wait_for_wait(item, name, wc));
}

static enum cmd_retval
cmd_wait_for_signal(__unused struct cmdq_item *item, const char *name,
    struct wait_channel *wc)
{
	struct wait_item	*wi, *wi1;

	if (wc == NULL)
		wc = cmd_wait_for_add(name);

	if (TAILQ_EMPTY(&wc->waiters) && !wc->woken) {
		log_debug("signal wait channel %s, no waiters", wc->name);
		wc->woken = 1;
		return (CMD_RETURN_NORMAL);
	}
	log_debug("signal wait channel %s, with waiters", wc->name);

	TAILQ_FOREACH_SAFE(wi, &wc->waiters, entry, wi1) {
		wi->item->flags &= ~CMDQ_WAITING;

		TAILQ_REMOVE(&wc->waiters, wi, entry);
		free(wi);
	}

	cmd_wait_for_remove(wc);
	return (CMD_RETURN_NORMAL);
}

static enum cmd_retval
cmd_wait_for_wait(struct cmdq_item *item, const char *name,
    struct wait_channel *wc)
{
	struct client		*c = item->client;
	struct wait_item	*wi;

	if (c == NULL || c->session != NULL) {
		cmdq_error(item, "not able to wait");
		return (CMD_RETURN_ERROR);
	}

	if (wc == NULL)
		wc = cmd_wait_for_add(name);

	if (wc->woken) {
		log_debug("wait channel %s already woken (%p)", wc->name, c);
		cmd_wait_for_remove(wc);
		return (CMD_RETURN_NORMAL);
	}
	log_debug("wait channel %s not woken (%p)", wc->name, c);

	wi = xcalloc(1, sizeof *wi);
	wi->item = item;
	TAILQ_INSERT_TAIL(&wc->waiters, wi, entry);

	return (CMD_RETURN_WAIT);
}

static enum cmd_retval
cmd_wait_for_lock(struct cmdq_item *item, const char *name,
    struct wait_channel *wc)
{
	struct wait_item	*wi;

	if (item->client == NULL || item->client->session != NULL) {
		cmdq_error(item, "not able to lock");
		return (CMD_RETURN_ERROR);
	}

	if (wc == NULL)
		wc = cmd_wait_for_add(name);

	if (wc->locked) {
		wi = xcalloc(1, sizeof *wi);
		wi->item = item;
		TAILQ_INSERT_TAIL(&wc->lockers, wi, entry);
		return (CMD_RETURN_WAIT);
	}
	wc->locked = 1;

	return (CMD_RETURN_NORMAL);
}

static enum cmd_retval
cmd_wait_for_unlock(struct cmdq_item *item, const char *name,
    struct wait_channel *wc)
{
	struct wait_item	*wi;

	if (wc == NULL || !wc->locked) {
		cmdq_error(item, "channel %s not locked", name);
		return (CMD_RETURN_ERROR);
	}

	if ((wi = TAILQ_FIRST(&wc->lockers)) != NULL) {
		wi->item->flags &= ~CMDQ_WAITING;
		TAILQ_REMOVE(&wc->lockers, wi, entry);
		free(wi);
	} else {
		wc->locked = 0;
		cmd_wait_for_remove(wc);
	}

	return (CMD_RETURN_NORMAL);
}

void
cmd_wait_for_flush(void)
{
	struct wait_channel	*wc, *wc1;
	struct wait_item	*wi, *wi1;

	RB_FOREACH_SAFE(wc, wait_channels, &wait_channels, wc1) {
		TAILQ_FOREACH_SAFE(wi, &wc->waiters, entry, wi1) {
			wi->item->flags &= ~CMDQ_WAITING;
			TAILQ_REMOVE(&wc->waiters, wi, entry);
			free(wi);
		}
		wc->woken = 1;
		TAILQ_FOREACH_SAFE(wi, &wc->lockers, entry, wi1) {
			wi->item->flags &= ~CMDQ_WAITING;
			TAILQ_REMOVE(&wc->lockers, wi, entry);
			free(wi);
		}
		wc->locked = 0;
		cmd_wait_for_remove(wc);
	}
}
@


1.15
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.14 2016/10/10 21:51:39 nicm Exp $ */
d31 1
a31 1
static enum cmd_retval cmd_wait_for_exec(struct cmd *, struct cmd_q *);
d45 1
a45 1
	struct cmd_q		*cmdq;
d71 1
a71 1
static enum cmd_retval	cmd_wait_for_signal(struct cmd_q *, const char *,
d73 1
a73 1
static enum cmd_retval	cmd_wait_for_wait(struct cmd_q *, const char *,
d75 1
a75 1
static enum cmd_retval	cmd_wait_for_lock(struct cmd_q *, const char *,
d77 1
a77 1
static enum cmd_retval	cmd_wait_for_unlock(struct cmd_q *, const char *,
d81 1
a81 1
static void			 cmd_wait_for_remove(struct wait_channel *wc);
d121 1
a121 1
cmd_wait_for_exec(struct cmd *self, struct cmd_q *cmdq)
d131 1
a131 1
		return (cmd_wait_for_signal(cmdq, name, wc));
d133 1
a133 1
		return (cmd_wait_for_lock(cmdq, name, wc));
d135 2
a136 2
		return (cmd_wait_for_unlock(cmdq, name, wc));
	return (cmd_wait_for_wait(cmdq, name, wc));
d140 1
a140 1
cmd_wait_for_signal(__unused struct cmd_q *cmdq, const char *name,
d156 1
a156 1
		wi->cmdq->flags &= ~CMD_Q_WAITING;
d167 2
a168 1
cmd_wait_for_wait(struct cmd_q *cmdq, const char *name, struct wait_channel *wc)
d170 1
a170 1
	struct client		*c = cmdq->client;
d174 1
a174 1
		cmdq_error(cmdq, "not able to wait");
d189 1
a189 1
	wi->cmdq = cmdq;
d196 2
a197 1
cmd_wait_for_lock(struct cmd_q *cmdq, const char *name, struct wait_channel *wc)
d201 2
a202 2
	if (cmdq->client == NULL || cmdq->client->session != NULL) {
		cmdq_error(cmdq, "not able to lock");
d211 1
a211 1
		wi->cmdq = cmdq;
d221 1
a221 1
cmd_wait_for_unlock(struct cmd_q *cmdq, const char *name,
d227 1
a227 1
		cmdq_error(cmdq, "channel %s not locked", name);
d232 1
a232 1
		wi->cmdq->flags &= ~CMD_Q_WAITING;
d251 1
a251 1
			wi->cmdq->flags &= ~CMD_Q_WAITING;
d257 1
a257 1
			wi->cmdq->flags &= ~CMD_Q_WAITING;
@


1.14
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.13 2016/01/19 15:59:12 nicm Exp $ */
d44 5
d54 2
a55 2
	TAILQ_HEAD(, cmd_q)	waiters;
	TAILQ_HEAD(, cmd_q)	lockers;
d143 1
a143 1
	struct cmd_q	*wq, *wq1;
d155 5
a159 4
	TAILQ_FOREACH_SAFE(wq, &wc->waiters, waitentry, wq1) {
		TAILQ_REMOVE(&wc->waiters, wq, waitentry);
		if (!cmdq_free(wq))
			cmdq_continue(wq);
d167 1
a167 2
cmd_wait_for_wait(struct cmd_q *cmdq, const char *name,
    struct wait_channel *wc)
d169 2
a170 1
	struct client	*c = cmdq->client;
d187 3
a189 2
	TAILQ_INSERT_TAIL(&wc->waiters, cmdq, waitentry);
	cmdq->references++;
d195 1
a195 2
cmd_wait_for_lock(struct cmd_q *cmdq, const char *name,
    struct wait_channel *wc)
d197 2
d208 3
a210 2
		TAILQ_INSERT_TAIL(&wc->lockers, cmdq, waitentry);
		cmdq->references++;
d222 1
a222 1
	struct cmd_q	*wq;
d229 4
a232 4
	if ((wq = TAILQ_FIRST(&wc->lockers)) != NULL) {
		TAILQ_REMOVE(&wc->lockers, wq, waitentry);
		if (!cmdq_free(wq))
			cmdq_continue(wq);
d245 1
a245 1
	struct cmd_q		*wq, *wq1;
d248 4
a251 4
		TAILQ_FOREACH_SAFE(wq, &wc->waiters, waitentry, wq1) {
			TAILQ_REMOVE(&wc->waiters, wq, waitentry);
			if (!cmdq_free(wq))
				cmdq_continue(wq);
d254 4
a257 4
		TAILQ_FOREACH_SAFE(wq, &wc->lockers, waitentry, wq1) {
			TAILQ_REMOVE(&wc->lockers, wq, waitentry);
			if (!cmdq_free(wq))
				cmdq_continue(wq);
@


1.13
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.12 2015/12/13 21:53:57 nicm Exp $ */
d31 1
a31 1
enum cmd_retval cmd_wait_for_exec(struct cmd *, struct cmd_q *);
d55 1
a55 1
struct wait_channels wait_channels = RB_INITIALIZER(wait_channels);
d57 2
a58 3
int	wait_channel_cmp(struct wait_channel *, struct wait_channel *);
RB_PROTOTYPE(wait_channels, wait_channel, entry, wait_channel_cmp);
RB_GENERATE(wait_channels, wait_channel, entry, wait_channel_cmp);
d60 1
a60 1
int
d66 8
a73 8
enum cmd_retval	cmd_wait_for_signal(struct cmd_q *, const char *,
		    struct wait_channel *);
enum cmd_retval	cmd_wait_for_wait(struct cmd_q *, const char *,
		    struct wait_channel *);
enum cmd_retval	cmd_wait_for_lock(struct cmd_q *, const char *,
		    struct wait_channel *);
enum cmd_retval	cmd_wait_for_unlock(struct cmd_q *, const char *,
		    struct wait_channel *);
d75 2
a76 2
struct wait_channel	*cmd_wait_for_add(const char *);
void			 cmd_wait_for_remove(struct wait_channel *wc);
d78 1
a78 1
struct wait_channel *
d99 1
a99 1
void
d115 1
a115 1
enum cmd_retval
d134 1
a134 1
enum cmd_retval
d160 1
a160 1
enum cmd_retval
d187 1
a187 1
enum cmd_retval
d209 1
a209 1
enum cmd_retval
@


1.12
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.11 2015/11/18 14:27:44 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2013 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.11
log
@Use __unused rather than rolling our own.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.10 2015/10/20 21:12:08 nicm Exp $ */
d34 8
a41 5
	"wait-for", "wait",
	"LSU", 1, 1,
	"[-L|-S|-U] channel",
	0,
	cmd_wait_for_exec
@


1.10
log
@Use client pointer not file descriptor in logging.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.9 2015/09/13 10:45:55 nicm Exp $ */
d114 1
a114 1
cmd_wait_for_exec(struct cmd *self, unused struct cmd_q *cmdq)
d133 1
a133 1
cmd_wait_for_signal(unused struct cmd_q *cmdq, const char *name,
@


1.9
log
@Set woken flag when flushing so that the channel is freed, while here
use the same loop construct for both loops.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.8 2015/09/04 12:02:44 nicm Exp $ */
d173 1
a173 2
		log_debug("wait channel %s already woken (client %d)", wc->name,
		    c->tty.fd);
d177 1
a177 1
	log_debug("wait channel %s not woken (client %d)", wc->name, c->tty.fd);
@


1.8
log
@Change wait-for to work when the signal comes before the wait, also use
some helper functions and add some logging.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.7 2014/10/20 22:29:25 nicm Exp $ */
a99 1

d243 2
a244 1
		while ((wq = TAILQ_FIRST(&wc->lockers)) != NULL) {
@


1.7
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.6 2014/09/01 21:58:41 nicm Exp $ */
d44 1
d73 41
d115 1
a115 1
cmd_wait_for_exec(struct cmd *self, struct cmd_q *cmdq)
d134 1
a134 1
cmd_wait_for_signal(struct cmd_q *cmdq, const char *name,
d139 7
a145 3
	if (wc == NULL || TAILQ_EMPTY(&wc->waiters)) {
		cmdq_error(cmdq, "no waiting clients on %s", name);
		return (CMD_RETURN_ERROR);
d147 1
d155 1
a155 6
	if (!wc->locked) {
		RB_REMOVE(wait_channels, &wait_channels, wc);
		free((void *)wc->name);
		free(wc);
	}

d163 3
a165 1
	if (cmdq->client == NULL || cmdq->client->session != NULL) {
d170 8
a177 7
	if (wc == NULL) {
		wc = xmalloc(sizeof *wc);
		wc->name = xstrdup(name);
		wc->locked = 0;
		TAILQ_INIT(&wc->waiters);
		TAILQ_INIT(&wc->lockers);
		RB_INSERT(wait_channels, &wait_channels, wc);
d179 1
d196 2
a197 8
	if (wc == NULL) {
		wc = xmalloc(sizeof *wc);
		wc->name = xstrdup(name);
		wc->locked = 0;
		TAILQ_INIT(&wc->waiters);
		TAILQ_INIT(&wc->lockers);
		RB_INSERT(wait_channels, &wait_channels, wc);
	}
d226 1
a226 5
		if (TAILQ_EMPTY(&wc->waiters)) {
			RB_REMOVE(wait_channels, &wait_channels, wc);
			free((void *)wc->name);
			free(wc);
		}
d249 2
a250 3
		RB_REMOVE(wait_channels, &wait_channels, wc);
		free((void *)wc->name);
		free(wc);
@


1.6
log
@Wake up any clients waiting with the wait-for command when the server
exits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.5 2014/09/01 21:50:18 nicm Exp $ */
a37 1
	NULL,
@


1.5
log
@Various minor style and spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.4 2013/10/10 12:02:55 nicm Exp $ */
d197 22
@


1.4
log
@Mark flags as optional and mutually exclusive. From Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.3 2013/10/10 12:00:24 nicm Exp $ */
d111 1
a111 1
		free((void*) wc->name);
d189 1
a189 1
			free((void*) wc->name);
@


1.3
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.2 2013/03/25 10:09:35 nicm Exp $ */
d36 1
a36 1
	"[-LSU] channel",
@


1.2
log
@Add wait-for -L and -U for lock and unlock, from Thiago Padilha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-wait-for.c,v 1.1 2013/03/25 10:09:05 nicm Exp $ */
a37 1
	NULL,
@


1.1
log
@Add a wait-for command which blocks a client on a named channel until it
is woken up again (with wait-for -S). From Thiago Padilha.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d35 2
a36 2
	"S", 1, 1,
	"[-S] channel",
d45 2
d48 1
d69 4
d86 4
d109 6
a114 3
	RB_REMOVE(wait_channels, &wait_channels, wc);
	free((void*) wc->name);
	free(wc);
d131 1
d133 1
d136 1
d142 56
@

