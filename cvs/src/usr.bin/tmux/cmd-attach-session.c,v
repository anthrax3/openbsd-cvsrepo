head	1.74;
access;
symbols
	OPENBSD_6_2:1.74.0.4
	OPENBSD_6_2_BASE:1.74
	OPENBSD_6_1:1.70.0.4
	OPENBSD_6_1_BASE:1.70
	OPENBSD_6_0:1.61.0.4
	OPENBSD_6_0_BASE:1.61
	OPENBSD_5_9:1.61.0.2
	OPENBSD_5_9_BASE:1.61
	OPENBSD_5_8:1.38.0.4
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.32.0.2
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.30.0.6
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.30.0.4
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.22.0.4
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.2
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.74
date	2017.08.30.10.33.57;	author nicm;	state Exp;
branches;
next	1.73;
commitid	Zpm5Qq40TI2OxytA;

1.73
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.72;
commitid	RXMp6wwG5a5Y82bo;

1.72
date	2017.04.22.08.56.24;	author nicm;	state Exp;
branches;
next	1.71;
commitid	swq7JsAZEYBxos2Q;

1.71
date	2017.04.21.14.01.19;	author nicm;	state Exp;
branches;
next	1.70;
commitid	6dh4rgGOD5wckeD9;

1.70
date	2017.03.08.13.36.12;	author nicm;	state Exp;
branches;
next	1.69;
commitid	jI8R4kuPSDw6nngR;

1.69
date	2017.02.06.15.00.41;	author nicm;	state Exp;
branches;
next	1.68;
commitid	2TKl6DV1kcWaPxr9;

1.68
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.67;
commitid	BLRh0qXo7OVTPhiT;

1.67
date	2017.01.28.16.11.27;	author nicm;	state Exp;
branches;
next	1.66;
commitid	Lx4StVNNYdwEMkI4;

1.66
date	2017.01.24.20.15.32;	author nicm;	state Exp;
branches;
next	1.65;
commitid	OhhGixV64mirqDj8;

1.65
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.64;
commitid	j0FZs70gSPCmpqWI;

1.64
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.63;
commitid	pxm6osuE99zELpkU;

1.63
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.62;
commitid	1xIYFpLYkPIXNEvU;

1.62
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.61;
commitid	TaZ3kOtGiWwKofka;

1.61
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.60;
commitid	P3qmSOx6KrDBsb0c;

1.60
date	2015.12.21.09.20.13;	author nicm;	state Exp;
branches;
next	1.59;
commitid	o5qfxjI6CEAZiKc8;

1.59
date	2015.12.16.21.50.37;	author nicm;	state Exp;
branches;
next	1.58;
commitid	Bam1GajuDZzmKjyE;

1.58
date	2015.12.15.13.43.07;	author nicm;	state Exp;
branches;
next	1.57;
commitid	nxumQwtI4O73Gcjc;

1.57
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.56;
commitid	rE682EC14v4gpeFy;

1.56
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.55;
commitid	gsQkQsSyBCSmU9ax;

1.55
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.54;
commitid	uzMkp8Z4FE6WB6s6;

1.54
date	2015.12.12.18.32.24;	author nicm;	state Exp;
branches;
next	1.53;
commitid	q7iDAcShsJWlLYhr;

1.53
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.52;
commitid	ns7JfXpW9TsHrnT3;

1.52
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.51;
commitid	MRfGAYPLeVqV46rT;

1.51
date	2015.12.08.01.10.31;	author nicm;	state Exp;
branches;
next	1.50;
commitid	Q7y3PTVPjE0eQDqD;

1.50
date	2015.12.07.09.47.41;	author nicm;	state Exp;
branches;
next	1.49;
commitid	DEG5t4Tpp1OvTShQ;

1.49
date	2015.11.05.23.32.21;	author nicm;	state Exp;
branches;
next	1.48;
commitid	05IWSNQmsLIe6CDO;

1.48
date	2015.11.03.15.07.36;	author nicm;	state Exp;
branches;
next	1.47;
commitid	9UA7sgWx6o8Rj5XE;

1.47
date	2015.10.31.14.51.15;	author nicm;	state Exp;
branches;
next	1.46;
commitid	8V8pJWxJ4YGXnHNd;

1.46
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.45;
commitid	B5GekkO0CdWpFMrz;

1.45
date	2015.10.28.09.51.55;	author nicm;	state Exp;
branches;
next	1.44;
commitid	eGVGKzVVYKHFvkn4;

1.44
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.43;
commitid	89xhQafU35Q5MQVC;

1.43
date	2015.10.27.13.23.24;	author nicm;	state Exp;
branches;
next	1.42;
commitid	g6GdEJXfBNprXHEK;

1.42
date	2015.09.16.22.29.30;	author nicm;	state Exp;
branches;
next	1.41;
commitid	bS5hDkuuAUo67scZ;

1.41
date	2015.09.10.08.58.14;	author nicm;	state Exp;
branches;
next	1.40;
commitid	fjYzZVETyEmTAStI;

1.40
date	2015.08.28.13.01.03;	author nicm;	state Exp;
branches;
next	1.39;
commitid	fIVZtZS9F66XgvbR;

1.39
date	2015.08.28.12.16.28;	author nicm;	state Exp;
branches;
next	1.38;
commitid	LqkiQ6rY2EYTPxv3;

1.38
date	2015.07.06.14.24.57;	author nicm;	state Exp;
branches;
next	1.37;
commitid	FNjLMFLssR9ZpFbH;

1.37
date	2015.06.09.07.07.06;	author nicm;	state Exp;
branches;
next	1.36;
commitid	IQ1zTKI5wlNyNIML;

1.36
date	2015.06.07.21.39.39;	author nicm;	state Exp;
branches;
next	1.35;
commitid	N9n0sMf4KapNFAh6;

1.35
date	2015.06.04.23.27.51;	author nicm;	state Exp;
branches;
next	1.34;
commitid	xevJfLLQ14ORIsEv;

1.34
date	2015.04.25.18.09.28;	author nicm;	state Exp;
branches;
next	1.33;
commitid	B7W3z8l90mUfy5Jt;

1.33
date	2015.04.24.23.17.11;	author nicm;	state Exp;
branches;
next	1.32;
commitid	iy4fcaIoXzxOx84I;

1.32
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.31;
commitid	b1G1TVWY7l4KyoY6;

1.31
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.30;
commitid	Gq8hgMoG3t1Wy1Zv;

1.30
date	2014.02.23.00.53.06;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2014.01.09.14.20.55;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2013.10.10.12.28.08;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2013.10.10.12.26.34;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2013.10.10.12.09.34;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2013.10.10.12.00.18;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.24.09.58.40;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2012.05.22.10.56.48;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2012.05.06.07.38.17;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2012.03.17.22.35.09;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2012.01.21.06.13.16;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.05.19.37.01;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.01.01.12.09;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2010.12.21.22.37.59;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2010.02.06.22.55.31;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.03.22.50.09;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.13.19.53.28;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.11.08.00.42;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.08.21.52.43;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.03.14.10.54;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.23.12.33.48;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.17.15.03.11;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.05.03.13.16;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.74
log
@Pass flags into cmd_find_from_* to fix prefer-unattached, reported by
Thomas Sattler.
@
text
@/* $OpenBSD: cmd-attach-session.c,v 1.73 2017/04/22 10:22:39 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Attach existing session to the current terminal.
 */

static enum cmd_retval	cmd_attach_session_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_attach_session_entry = {
	.name = "attach-session",
	.alias = "attach",

	.args = { "c:dErt:", 0, 0 },
	.usage = "[-dEr] [-c working-directory] " CMD_TARGET_SESSION_USAGE,

	/* -t is special */

	.flags = CMD_STARTSERVER,
	.exec = cmd_attach_session_exec
};

enum cmd_retval
cmd_attach_session(struct cmdq_item *item, const char *tflag, int dflag,
    int rflag, const char *cflag, int Eflag)
{
	struct cmd_find_state	*current = &item->shared->current;
	enum cmd_find_type	 type;
	int			 flags;
	struct client		*c = item->client, *c_loop;
	struct session		*s;
	struct winlink		*wl;
	struct window_pane	*wp;
	char			*cause;

	if (RB_EMPTY(&sessions)) {
		cmdq_error(item, "no sessions");
		return (CMD_RETURN_ERROR);
	}

	if (c == NULL)
		return (CMD_RETURN_NORMAL);
	if (server_client_check_nested(c)) {
		cmdq_error(item, "sessions should be nested with care, "
		    "unset $TMUX to force");
		return (CMD_RETURN_ERROR);
	}

	if (tflag != NULL && tflag[strcspn(tflag, ":.")] != '\0') {
		type = CMD_FIND_PANE;
		flags = 0;
	} else {
		type = CMD_FIND_SESSION;
		flags = CMD_FIND_PREFER_UNATTACHED;
	}
	if (cmd_find_target(&item->target, item, tflag, type, flags) != 0)
		return (CMD_RETURN_ERROR);
	s = item->target.s;
	wl = item->target.wl;
	wp = item->target.wp;

	if (wl != NULL) {
		if (wp != NULL)
			window_set_active_pane(wp->window, wp);
		session_set_current(s, wl);
		if (wp != NULL)
			cmd_find_from_winlink_pane(current, wl, wp, 0);
		else
			cmd_find_from_winlink(current, wl, 0);
	}

	if (cflag != NULL) {
		free((void *)s->cwd);
		s->cwd = format_single(item, cflag, c, s, wl, wp);
	}

	if (c->session != NULL) {
		if (dflag) {
			TAILQ_FOREACH(c_loop, &clients, entry) {
				if (c_loop->session != s || c == c_loop)
					continue;
				server_client_detach(c_loop, MSG_DETACH);
			}
		}
		if (!Eflag)
			environ_update(s->options, c->environ, s->environ);

		c->session = s;
		if (~item->shared->flags & CMDQ_SHARED_REPEAT)
			server_client_set_key_table(c, NULL);
		status_timer_start(c);
		notify_client("client-session-changed", c);
		session_update_activity(s, NULL);
		gettimeofday(&s->last_attached_time, NULL);
		server_redraw_client(c);
		s->curw->flags &= ~WINLINK_ALERTFLAGS;
	} else {
		if (server_client_open(c, &cause) != 0) {
			cmdq_error(item, "open terminal failed: %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
		if (rflag)
			c->flags |= CLIENT_READONLY;

		if (dflag) {
			TAILQ_FOREACH(c_loop, &clients, entry) {
				if (c_loop->session != s || c == c_loop)
					continue;
				server_client_detach(c_loop, MSG_DETACH);
			}
		}
		if (!Eflag)
			environ_update(s->options, c->environ, s->environ);

		c->session = s;
		server_client_set_key_table(c, NULL);
		status_timer_start(c);
		notify_client("client-session-changed", c);
		session_update_activity(s, NULL);
		gettimeofday(&s->last_attached_time, NULL);
		server_redraw_client(c);
		s->curw->flags &= ~WINLINK_ALERTFLAGS;

		if (~c->flags & CLIENT_CONTROL)
			proc_send(c->peer, MSG_READY, -1, NULL, 0);
		notify_client("client-attached", c);
		c->flags |= CLIENT_ATTACHED;
	}
	recalculate_sizes();
	alerts_check_session(s);
	server_update_socket();

	return (CMD_RETURN_NORMAL);
}

static enum cmd_retval
cmd_attach_session_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;

	return (cmd_attach_session(item, args_get(args, 't'),
	    args_has(args, 'd'), args_has(args, 'r'), args_get(args, 'c'),
	    args_has(args, 'E')));
}
@


1.73
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.72 2017/04/22 08:56:24 nicm Exp $ */
d93 1
a93 1
			cmd_find_from_winlink_pane(current, wl, wp);
d95 1
a95 1
			cmd_find_from_winlink(current, wl);
@


1.72
log
@Mouse bindings and hooks set up an initial current state when running a
command. This is used for the session, window and pane for all commands
in the command sequence if there is no -t or -s.

However, using it for all commands in the command sequence means that if
the active pane or current session is changed, subsequent commands still
use the previous state. So make commands which explicitly change the
current state (such as neww and selectp) update it themselves for later
commands. Commands which may invalidate the state (like killp) are
already OK because an invalid state will be ignored.

Also fill in the current state for all key bindings rather than just the
mouse, so that any omissions are easier to spot.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.71 2017/04/21 14:01:19 nicm Exp $ */
d43 1
a43 1
	.tflag = CMD_SESSION_WITHPANE,
d50 2
a51 2
cmd_attach_session(struct cmdq_item *item, int dflag, int rflag,
    const char *cflag, int Eflag)
d54 2
a55 1
	struct session		*s = item->state.tflag.s;
d57 3
a59 2
	struct winlink		*wl = item->state.tflag.wl;
	struct window_pane	*wp = item->state.tflag.wp;
d75 13
d168 3
a170 2
	return (cmd_attach_session(item, args_has(args, 'd'),
	    args_has(args, 'r'), args_get(args, 'c'), args_has(args, 'E')));
@


1.71
log
@Store state shared between multiple commands in the queue in a shared
structure.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.70 2017/03/08 13:36:12 nicm Exp $ */
d53 1
d77 4
@


1.70
log
@Add a helper function for the most common format_create/defaults/expand
pattern.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.69 2017/02/06 15:00:41 nicm Exp $ */
d95 1
a95 1
		if (!item->repeat)
@


1.69
log
@Cancel key table when switching session, unless the key is going to
repeat. Reported by Amos Bird.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.68 2017/02/03 11:57:27 nicm Exp $ */
d57 1
a57 2
	char			*cause, *cwd;
	struct format_tree	*ft;
a78 5
		ft = format_create(item, FORMAT_NONE, 0);
		format_defaults(ft, c, s, wl, wp);
		cwd = format_expand(ft, cflag);
		format_free(ft);

d80 1
a80 1
		s->cwd = cwd;
@


1.68
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.67 2017/01/28 16:11:27 nicm Exp $ */
d101 2
@


1.67
log
@Do not clear the key table when changing session on a client, so that
switch-client and friends work with bind -n.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.66 2017/01/24 20:15:32 nicm Exp $ */
d80 1
a80 1
		ft = format_create(item, 0);
@


1.66
log
@Make update-environment an array as well.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.65 2016/10/16 22:06:40 nicm Exp $ */
a100 1
		server_client_set_key_table(c, NULL);
@


1.65
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.64 2016/10/16 19:04:05 nicm Exp $ */
a56 1
	const char		*update;
d97 2
a98 6

		if (!Eflag) {
			update = options_get_string(s->options,
			    "update-environment");
			environ_update(update, c->environ, s->environ);
		}
a113 1

d124 2
a125 6

		if (!Eflag) {
			update = options_get_string(s->options,
			    "update-environment");
			environ_update(update, c->environ, s->environ);
		}
@


1.64
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.63 2016/10/16 17:55:14 nicm Exp $ */
d108 1
a108 1
		notify_attached_session_changed(c);
d140 1
a140 1
		notify_attached_session_changed(c);
d148 1
a148 1
		hooks_run(c->session->hooks, c, NULL, "client-attached");
@


1.63
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.62 2016/10/10 21:51:39 nicm Exp $ */
d33 2
a34 1
static enum cmd_retval	cmd_attach_session_exec(struct cmd *, struct cmd_q *);
d50 2
a51 2
cmd_attach_session(struct cmd_q *cmdq, int dflag, int rflag, const char *cflag,
    int Eflag)
d53 4
a56 4
	struct session		*s = cmdq->state.tflag.s;
	struct client		*c = cmdq->client, *c_loop;
	struct winlink		*wl = cmdq->state.tflag.wl;
	struct window_pane	*wp = cmdq->state.tflag.wp;
d62 1
a62 1
		cmdq_error(cmdq, "no sessions");
d69 1
a69 1
		cmdq_error(cmdq, "sessions should be nested with care, "
d81 1
a81 1
		ft = format_create(cmdq, 0);
d115 1
a115 1
			cmdq_error(cmdq, "open terminal failed: %s", cause);
d159 1
a159 1
cmd_attach_session_exec(struct cmd *self, struct cmd_q *cmdq)
d163 1
a163 1
	return (cmd_attach_session(cmdq, args_has(args, 'd'),
@


1.62
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.61 2016/01/19 15:59:12 nicm Exp $ */
d148 1
a148 1
		cmdq->client_exit = 0;
@


1.61
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.60 2015/12/21 09:20:13 nicm Exp $ */
d33 1
a33 1
enum cmd_retval	cmd_attach_session_exec(struct cmd *, struct cmd_q *);
d157 1
a157 1
enum cmd_retval
@


1.60
log
@Detach the right session with -d.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.59 2015/12/16 21:50:37 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.59
log
@Add infrastructure to work out the best target given a pane or window
alone and use it to add pane_died and pane_exited hooks.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.58 2015/12/15 13:43:07 nicm Exp $ */
d94 1
a94 1
				server_client_detach(c, MSG_DETACH);
@


1.58
log
@Some hooks API changes to fire a hook while waiting another cmdq and
infrastructure that will be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.57 2015/12/14 00:31:54 nicm Exp $ */
d147 1
a147 1
		hooks_run(c->session->hooks, c, "client-attached");
@


1.57
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.56 2015/12/13 21:53:57 nicm Exp $ */
d147 1
a147 1
		hooks_run(c->session->hooks, "client-attached", c);
@


1.56
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.55 2015/12/13 14:32:38 nicm Exp $ */
d42 3
a44 1
	.flags = CMD_STARTSERVER|CMD_SESSION_T|CMD_PANE_T|CMD_PREFERUNATTACHED,
@


1.55
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.54 2015/12/12 18:32:24 nicm Exp $ */
d36 8
a43 5
	"attach-session", "attach",
	"c:dErt:", 0, 0,
	"[-dEr] [-c working-directory] " CMD_TARGET_SESSION_USAGE,
	CMD_STARTSERVER|CMD_SESSION_T|CMD_PANE_T|CMD_PREFERUNATTACHED,
	cmd_attach_session_exec
@


1.54
log
@Add key-table option to set the default key table for a session, allows
different key bindings for different sessions and a few other things.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.53 2015/12/11 12:27:36 nicm Exp $ */
d39 1
a39 1
	CMD_STARTSERVER,
d44 2
a45 2
cmd_attach_session(struct cmd_q *cmdq, const char *tflag, int dflag, int rflag,
    const char *cflag, int Eflag)
d47 1
a47 1
	struct session		*s;
d49 2
a50 3
	struct winlink		*wl = NULL;
	struct window		*w = NULL;
	struct window_pane	*wp = NULL;
d52 1
a52 1
	char			*cause;
a53 1
	char			*cwd;
a59 19
	if (tflag == NULL) {
		if ((s = cmd_find_session(cmdq, tflag, 1)) == NULL)
			return (CMD_RETURN_ERROR);
	} else if (tflag[strcspn(tflag, ":.")] != '\0') {
		if ((wl = cmd_find_pane(cmdq, tflag, &s, &wp)) == NULL)
			return (CMD_RETURN_ERROR);
	} else {
		if ((s = cmd_find_session(cmdq, tflag, 1)) == NULL)
			return (CMD_RETURN_ERROR);
		w = window_find_by_id_str(tflag);
		if (w == NULL) {
			wp = window_pane_find_by_id_str(tflag);
			if (wp != NULL)
				w = wp->window;
		}
		if (w != NULL)
			wl = winlink_find_by_window(&s->windows, w);
	}

d76 1
a76 2
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s,
		    NULL, NULL);
d157 2
a158 3
	return (cmd_attach_session(cmdq, args_get(args, 't'),
	    args_has(args, 'd'), args_has(args, 'r'), args_get(args, 'c'),
	    args_has(args, 'E')));
@


1.53
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.52 2015/12/08 08:34:18 nicm Exp $ */
d122 1
d154 1
@


1.52
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.51 2015/12/08 01:10:31 nicm Exp $ */
d96 1
a96 1
		ft = format_create(0);
@


1.51
log
@Add hooks infrastructure, basic commands (set-hook, show-hooks) and a
couple of not very useful client hooks. This will eventually let
commands be run at various points and on notifications. Joint work with
Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.50 2015/12/07 09:47:41 nicm Exp $ */
d96 1
a96 1
		ft = format_create();
@


1.50
log
@Fix bell indicators across detach, reported by Torbjorn Lonnemark, diff
from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.49 2015/11/05 23:32:21 nicm Exp $ */
d111 1
a111 1
				proc_send_s(c_loop->peer, MSG_DETACH, s->name);
d142 1
a142 1
				proc_send_s(c_loop->peer, MSG_DETACH, s->name);
d162 1
@


1.49
log
@Same bug as last commit, but in the other copy of the loop in this file...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.48 2015/11/03 15:07:36 nicm Exp $ */
d165 1
@


1.48
log
@Detach the client we are looping over, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.47 2015/10/31 14:51:15 nicm Exp $ */
d111 1
a111 1
				proc_send_s(c->peer, MSG_DETACH, s->name);
@


1.47
log
@Fall back silently to ~ or / rather than checking -c with access(), this
was the old behaviour.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.46 2015/10/31 08:13:58 nicm Exp $ */
d142 1
a142 1
				proc_send_s(c->peer, MSG_DETACH, s->name);
@


1.46
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.45 2015/10/28 09:51:55 nicm Exp $ */
a101 6
		if (access(cwd, X_OK) != 0) {
			free((void *)cwd);
			cmdq_error(cmdq, "bad working directory: %s",
			    strerror(errno));
			return (CMD_RETURN_ERROR);
		}
@


1.45
log
@Like options, move the environ struct into environ.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.44 2015/10/27 15:58:42 nicm Exp $ */
a53 1
	int			 fd;
d55 1
a55 1
	char			*cp;
d99 1
a99 1
		cp = format_expand(ft, cflag);
d102 2
a103 3
		fd = open(cp, O_RDONLY|O_DIRECTORY);
		free(cp);
		if (fd == -1) {
d108 2
a109 2
		close(s->cwd);
		s->cwd = fd;
@


1.44
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.43 2015/10/27 13:23:24 nicm Exp $ */
d126 1
a126 1
			environ_update(update, &c->environ, &s->environ);
d157 1
a157 1
			environ_update(update, &c->environ, &s->environ);
@


1.43
log
@Break the common process set up, event loop and imsg dispatch code
between server and client out into a separate internal API. This will
make it easier to add another process.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.42 2015/09/16 22:29:30 nicm Exp $ */
d124 1
a124 1
			update = options_get_string(&s->options,
d155 1
a155 1
			update = options_get_string(&s->options,
@


1.42
log
@Hoist some common code out of both branches of an if/else.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.41 2015/09/10 08:58:14 nicm Exp $ */
a115 4
			/*
			 * Can't use server_write_session in case attaching to
			 * the same session as currently attached to.
			 */
d119 1
a119 3
				server_write_client(c, MSG_DETACH,
				    c_loop->session->name,
				    strlen(c_loop->session->name) + 1);
d147 5
a151 2
			server_write_session(s, MSG_DETACH, s->name,
			    strlen(s->name) + 1);
d168 2
a169 1
		server_write_ready(c);
@


1.41
log
@Add session_last_attached time and format, from Sina Siadat.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.40 2015/08/28 13:01:03 nicm Exp $ */
d96 18
a128 18
		if (cflag != NULL) {
			ft = format_create();
			format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s,
			    NULL, NULL);
			cp = format_expand(ft, cflag);
			format_free(ft);

			fd = open(cp, O_RDONLY|O_DIRECTORY);
			free(cp);
			if (fd == -1) {
				cmdq_error(cmdq, "bad working directory: %s",
				    strerror(errno));
				return (CMD_RETURN_ERROR);
			}
			close(s->cwd);
			s->cwd = fd;
		}

a146 18
		}

		if (cflag != NULL) {
			ft = format_create();
			format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s,
			    NULL, NULL);
			cp = format_expand(ft, cflag);
			format_free(ft);

			fd = open(cp, O_RDONLY|O_DIRECTORY);
			free(cp);
			if (fd == -1) {
				cmdq_error(cmdq, "bad working directory: %s",
				    strerror(errno));
				return (CMD_RETURN_ERROR);
			}
			close(s->cwd);
			s->cwd = fd;
@


1.40
log
@Make session_update_activity more useful and use it in more places.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.39 2015/08/28 12:16:28 nicm Exp $ */
d139 1
d185 1
@


1.39
log
@Run status update on a per-client timer at status-interval.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.38 2015/07/06 14:24:57 nicm Exp $ */
d138 1
a138 1
		session_update_activity(s);
d183 1
a183 1
		session_update_activity(s);
@


1.38
log
@Update environment with -E when attach-session used on an already
attached session or switch-client used on the current session. From Cam
Hutchison.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.37 2015/06/09 07:07:06 nicm Exp $ */
d136 1
d181 1
@


1.37
log
@Fix loop comparison broken in last commit, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.36 2015/06/07 21:39:39 nicm Exp $ */
d127 6
@


1.36
log
@Add -E flag when attaching or switching client to bypass
update-environment, from Steven Lu.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.35 2015/06/04 23:27:51 nicm Exp $ */
d103 1
a103 1
				if (c_loop->session != s || c == c)
@


1.35
log
@Move the nested check from client to server and compare the client tty
name to all the pane pty names instead of comparing socket paths. This
means that "new -d" will work without unsetting $TMUX.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.34 2015/04/25 18:09:28 nicm Exp $ */
d37 2
a38 2
	"c:drt:", 0, 0,
	"[-dr] [-c working-directory] " CMD_TARGET_SESSION_USAGE,
d45 1
a45 1
    const char *cflag)
d48 1
a48 1
	struct client		*c;
d82 1
a82 1
	if (cmdq->client == NULL)
d84 1
a84 1
	if (server_client_check_nested(cmdq->client)) {
d96 1
a96 1
	if (cmdq->client->session != NULL) {
d102 2
a103 2
			TAILQ_FOREACH(c, &clients, entry) {
				if (c->session != s || c == cmdq->client)
d106 2
a107 2
				    c->session->name,
				    strlen(c->session->name) + 1);
d129 2
a130 2
		cmdq->client->session = s;
		notify_attached_session_changed(cmdq->client);
d132 1
a132 1
		server_redraw_client(cmdq->client);
d135 1
a135 1
		if (server_client_open(cmdq->client, &cause) != 0) {
d160 1
a160 1
			cmdq->client->flags |= CLIENT_READONLY;
d167 5
a171 2
		update = options_get_string(&s->options, "update-environment");
		environ_update(update, &cmdq->client->environ, &s->environ);
d173 2
a174 2
		cmdq->client->session = s;
		notify_attached_session_changed(cmdq->client);
d176 1
a176 1
		server_redraw_client(cmdq->client);
d179 1
a179 1
		server_write_ready(cmdq->client);
d194 2
a195 1
	    args_has(args, 'd'), args_has(args, 'r'), args_get(args, 'c')));
@


1.34
log
@Move the functions to convert ids from strings into session.c and window.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.33 2015/04/24 23:17:11 nicm Exp $ */
d39 1
a39 1
	CMD_CANTNEST|CMD_STARTSERVER,
d84 5
@


1.33
log
@Convert clients list into a TAILQ.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.32 2015/02/05 10:29:43 nicm Exp $ */
d72 6
a77 3
		w = cmd_lookup_windowid(tflag);
		if (w == NULL && (wp = cmd_lookup_paneid(tflag)) != NULL)
			w = wp->window;
@


1.32
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.31 2014/10/20 22:29:25 nicm Exp $ */
a53 1
	u_int			 i;
d94 2
a95 5
			for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
				c = ARRAY_ITEM(&clients, i);
				if (c == NULL || c->session != s)
					continue;
				if (c == cmdq->client)
@


1.31
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.30 2014/02/23 00:53:06 nicm Exp $ */
d109 2
a110 5
			if ((c = cmd_find_client(cmdq, NULL, 1)) != NULL)
				format_client(ft, c);
			format_session(ft, s);
			format_winlink(ft, s, s->curw);
			format_window_pane(ft, s->curw->window->active);
d139 2
a140 5
			if ((c = cmd_find_client(cmdq, NULL, 1)) != NULL)
				format_client(ft, c);
			format_session(ft, s);
			format_winlink(ft, s, s->curw);
			format_window_pane(ft, s->curw->window->active);
@


1.30
log
@Change terminal-overrides to a server option (now that we have them), it
doesn't make much sense as a session option.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.29 2014/01/09 14:20:55 nicm Exp $ */
a39 1
	NULL,
@


1.29
log
@Allow attach-session -t to accept a window and pane to select them on
attach. Based on a diff from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.28 2013/10/10 12:28:08 nicm Exp $ */
d135 1
a135 1
		if (server_client_open(cmdq->client, s, &cause) != 0) {
@


1.28
log
@Show session name in detached message. Requested by somebody a few
months ago who didn't bother testing it. But it works for me anyway.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.27 2013/10/10 12:26:34 nicm Exp $ */
d50 3
d65 15
a79 2
	if ((s = cmd_find_session(cmdq, tflag, 1)) == NULL)
		return (CMD_RETURN_ERROR);
d83 6
@


1.27
log
@Alter how tmux handles the working directory to internally use file
descriptors rather than strings.

- Each session still has a current working directory.

- New sessions still get their working directory from the client that
  created them or its attached session if any.

- New windows are created by default in the session working directory.

- The -c flag to new, neww, splitw allows the working directory to be
  overridden.

- The -c flag to attach let's the session working directory be changed.

- The default-path option has been removed.

To get the equivalent to default-path '.', do:

        bind c neww -c $PWD

To get the equivalent of default-path '~', do:

        bind c neww -c ~

This also changes the client identify protocol to be a set of messages rather
than one as well as some other changes that should make it easier to make
backwards-compatible protocol changes in future.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.26 2013/10/10 12:09:34 nicm Exp $ */
d80 3
a82 1
				server_write_client(c, MSG_DETACH, NULL, 0);
d143 4
a146 2
		if (dflag)
			server_write_session(s, MSG_DETACH, NULL, 0);
@


1.26
log
@Remove CMD_SENDENVIRON.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.25 2013/10/10 12:00:18 nicm Exp $ */
d21 2
d24 2
d37 2
a38 2
	"drt:", 0, 0,
	"[-dr] " CMD_TARGET_SESSION_USAGE,
d45 2
a46 1
cmd_attach_session(struct cmd_q *cmdq, const char* tflag, int dflag, int rflag)
d48 8
a55 5
	struct session	*s;
	struct client	*c;
	const char	*update;
	char		*cause;
	u_int		 i;
d84 21
d117 21
d168 1
a168 1
	    args_has(args, 'd'), args_has(args, 'r')));
@


1.25
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.24 2013/03/24 09:58:40 nicm Exp $ */
d35 1
a35 1
	CMD_CANTNEST|CMD_STARTSERVER|CMD_SENDENVIRON,
@


1.24
log
@Add -A flag to new-session to make it behave like attach-session if the
session exists. If -A is used, -D behaves like -d to attach-session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.23 2013/03/24 09:54:10 nicm Exp $ */
a35 1
	NULL,
@


1.23
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.22 2012/07/11 07:10:15 nicm Exp $ */
d42 1
a42 1
cmd_attach_session_exec(struct cmd *self, struct cmd_q *cmdq)
a43 1
	struct args	*args = self->args;
d55 1
a55 1
	if ((s = cmd_find_session(cmdq, args_get(args, 't'), 1)) == NULL)
d62 1
a62 1
		if (args_has(self->args, 'd')) {
d89 1
a89 1
		if (args_has(self->args, 'r'))
d92 1
a92 1
		if (args_has(self->args, 'd'))
d111 9
@


1.22
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.21 2012/07/10 11:53:01 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	cmd_attach_session_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
cmd_attach_session_exec(struct cmd *self, struct cmd_ctx *ctx)
d52 1
a52 1
		ctx->error(ctx, "no sessions");
d56 1
a56 1
	if ((s = cmd_find_session(ctx, args_get(args, 't'), 1)) == NULL)
d59 1
a59 1
	if (ctx->cmdclient == NULL && ctx->curclient == NULL)
d62 1
a62 1
	if (ctx->cmdclient == NULL) {
d72 1
a72 1
				if (c == ctx->curclient)
d78 2
a79 2
		ctx->curclient->session = s;
		notify_attached_session_changed(ctx->curclient);
d81 1
a81 1
		server_redraw_client(ctx->curclient);
d84 2
a85 2
		if (server_client_open(ctx->cmdclient, s, &cause) != 0) {
			ctx->error(ctx, "open terminal failed: %s", cause);
d91 1
a91 1
			ctx->cmdclient->flags |= CLIENT_READONLY;
a95 5
		ctx->cmdclient->session = s;
		notify_attached_session_changed(ctx->cmdclient);
		session_update_activity(s);
		server_write_ready(ctx->cmdclient);

d97 1
a97 1
		environ_update(update, &ctx->cmdclient->environ, &s->environ);
d99 4
a102 1
		server_redraw_client(ctx->cmdclient);
d104 3
d111 1
a111 1
	return (CMD_RETURN_ATTACH);
@


1.21
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.20 2012/05/22 10:56:48 nicm Exp $ */
d29 1
a29 1
int	cmd_attach_session_exec(struct cmd *, struct cmd_ctx *);
d41 1
a41 1
int
d53 1
a53 1
		return (-1);
d57 1
a57 1
		return (-1);
d60 1
a60 1
		return (0);
d87 1
a87 1
			return (-1);
d110 1
a110 1
	return (1);	/* 1 means don't tell command client to exit */
@


1.20
log
@Add a helper function to send ready message.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.19 2012/05/06 07:38:17 nicm Exp $ */
d21 2
d86 1
a86 1
			xfree(cause);
@


1.19
log
@Add a helper function to open the terminal for attach-/new-session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.18 2012/03/17 22:35:09 nicm Exp $ */
d97 1
a97 1
		server_write_client(ctx->cmdclient, MSG_READY, NULL, 0);
@


1.18
log
@Add notify hooks for various events, the functions are currently empty
stubs but will be filled in for control mode later. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.17 2012/01/21 06:13:16 nicm Exp $ */
d46 1
a46 1
	char		*overrides, *cause;
d82 2
a83 9
		if (!(ctx->cmdclient->flags & CLIENT_TERMINAL)) {
			ctx->error(ctx, "not a terminal");
			return (-1);
		}

		overrides =
		    options_get_string(&s->options, "terminal-overrides");
		if (tty_open(&ctx->cmdclient->tty, overrides, &cause) != 0) {
			ctx->error(ctx, "terminal open failed: %s", cause);
@


1.17
log
@Only hide flags on the current window when the session is attached, from
Roland Walker.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.16 2011/04/05 19:37:01 nicm Exp $ */
d77 1
d102 1
@


1.16
log
@Add a flag to cmd_find_session so that attach-session can prefer
unattached sessions when choosing the most recently used (if -t is not
given). Suggested by claudio@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.15 2011/01/04 00:42:46 nicm Exp $ */
d79 1
d108 1
@


1.15
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.14 2011/01/01 01:12:09 nicm Exp $ */
d54 1
a54 1
	if ((s = cmd_find_session(ctx, args_get(args, 't'))) == NULL)
@


1.14
log
@Don't reset the activity timer for unattached sessions every second,
this screws up the choice of most-recently-used. Instead, break the time
update into a little function and do it when the session is attached.

Pointed out by joshe@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.13 2010/12/21 22:37:59 nicm Exp $ */
d31 1
d33 4
a36 6
	CMD_CANTNEST|CMD_STARTSERVER|CMD_SENDENVIRON, "dr",
	cmd_target_init,
	cmd_target_parse,
	cmd_attach_session_exec,
	cmd_target_free,
	cmd_target_print
d42 6
a47 6
	struct cmd_target_data	*data = self->data;
	struct session		*s;
	struct client		*c;
	const char		*update;
	char			*overrides, *cause;
	u_int			 i;
d53 2
a54 1
	if ((s = cmd_find_session(ctx, data->target)) == NULL)
d61 1
a61 1
		if (cmd_check_flag(data->chflags, 'd')) {
d93 1
a93 1
		if (cmd_check_flag(data->chflags, 'r'))
d96 1
a96 1
		if (cmd_check_flag(data->chflags, 'd'))
@


1.13
log
@Store sessions in an RB tree by name rather than a list, this is tidier
and allows them to easily be shown sorted in various lists
(list-sessions/choose-sessions).

Keep a session index which is used in a couple of places internally but
make it an ever-increasing number rather than filling in gaps with new
sessions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.12 2010/02/06 22:55:31 nicm Exp $ */
d77 1
d100 1
@


1.12
log
@Support attaching a client read-only with a new -r flag to the attach-session
command.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.11 2009/12/03 22:50:09 nicm Exp $ */
d50 1
a50 1
	if (ARRAY_LENGTH(&sessions) == 0) {
@


1.11
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.10 2009/11/13 19:53:28 nicm Exp $ */
d31 2
a32 2
	"[-d] " CMD_TARGET_SESSION_USAGE,
	CMD_CANTNEST|CMD_STARTSERVER|CMD_SENDENVIRON, "d",
d91 3
@


1.10
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.9 2009/11/11 08:00:42 nicm Exp $ */
d32 1
a32 1
       	CMD_CANTNEST|CMD_STARTSERVER|CMD_SENDENVIRON, "d",
d62 1
a62 1
			/* 
d75 1
a75 1
		
@


1.9
log
@Only need to chmod +x or -x the socket when a client is created, lost or
attached, rather than every event loop.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.8 2009/08/08 21:52:43 nicm Exp $ */
d32 1
a32 1
       	CMD_CANTNEST|CMD_STARTSERVER|CMD_SENDENVIRON, CMD_CHFLAG('d'),
d61 1
a61 1
		if (data->chflags & CMD_CHFLAG('d')) {
d92 1
a92 1
		if (data->chflags & CMD_CHFLAG('d'))
@


1.8
log
@Infrastructure and commands to manage the environment for processes started
within tmux.

There is a global environment, copied from the external environment when the
server is started and each sesssion has an (initially empty) session
environment which overrides it.

New commands set-environment and show-environment manipulate or display the
environments.

A new session option, update-environment, is a space-separated list of
variables which are updated from the external environment into the session
environment every time a new session is created - the default is DISPLAY.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.7 2009/08/03 14:10:54 nicm Exp $ */
d104 1
@


1.7
log
@Add a terminal-overrides session option allowing individual terminfo(5) entries
to be overridden. The 88col/256col checks are now moved into the default
setting and out of the code.

Also remove a couple of old workarounds for xterm and rxvt which are no longer
necessary (tmux can emulate them if missing).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.6 2009/07/26 12:58:44 nicm Exp $ */
d32 1
a32 1
       	CMD_CANTNEST|CMD_STARTSERVER, CMD_CHFLAG('d'),
d46 1
d97 4
@


1.6
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.5 2009/07/23 12:33:48 nicm Exp $ */
d46 1
a46 1
	char			*cause;
d83 3
a85 1
		if (tty_open(&ctx->cmdclient->tty, &cause) != 0) {
@


1.5
log
@Both of cmdclient and curclient CAN be NULL - if the command is executed from
the configuration file. In this case, attach-session can't do much, and
new-session should just assume -d.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.4 2009/07/17 15:03:11 nicm Exp $ */
a35 2
	cmd_target_send,
	cmd_target_recv,
@


1.4
log
@Tidy up new-session and attach-session and change them to work from inside
tmux, switching the current client to the new or requested session.

Written with Josh Elsasser.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.3 2009/07/13 23:11:35 nicm Exp $ */
d57 3
@


1.3
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.2 2009/06/05 03:13:16 ray Exp $ */
d47 1
d49 1
a49 3

	if (ctx->curclient != NULL)
		return (0);
d58 36
a93 3
	if (!(ctx->cmdclient->flags & CLIENT_TERMINAL)) {
		ctx->error(ctx, "not a terminal");
		return (-1);
a94 12

	if (tty_open(&ctx->cmdclient->tty, &cause) != 0) {
		ctx->error(ctx, "terminal open failed: %s", cause);
		xfree(cause);
		return (-1);
	}

	if (data->chflags & CMD_CHFLAG('d'))
		server_write_session(s, MSG_DETACH, NULL, 0);
	ctx->cmdclient->session = s;

	server_write_client(ctx->cmdclient, MSG_READY, NULL, 0);
a95 1
	server_redraw_client(ctx->cmdclient);
d97 1
a97 1
	return (1);
@


1.2
log
@Remove trailing newlines, spaces, and tabs.

No binary change.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-attach-session.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d32 1
a32 1
       	CMD_DFLAG|CMD_CANTNEST|CMD_STARTSERVER,
d70 1
a70 1
	if (data->flags & CMD_DFLAG)
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a79 1

@

