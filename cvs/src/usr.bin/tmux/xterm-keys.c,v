head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.21
date	2017.01.25.14.36.08;	author nicm;	state Exp;
branches;
next	1.20;
commitid	Qp0SbpiBu6Bm6g4g;

1.20
date	2017.01.25.14.24.54;	author nicm;	state Exp;
branches;
next	1.19;
commitid	lN9aftWGvZoDBI6a;

1.19
date	2016.10.03.22.52.11;	author nicm;	state Exp;
branches;
next	1.18;
commitid	brRovAmeQVyBbZ4S;

1.18
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.17;
commitid	P3qmSOx6KrDBsb0c;

1.17
date	2015.11.12.11.05.34;	author nicm;	state Exp;
branches;
next	1.16;
commitid	Ih1tdqtjpnEyfE8x;

1.16
date	2015.08.30.15.43.40;	author nicm;	state Exp;
branches;
next	1.15;
commitid	uXV0qaBWQpBShfys;

1.15
date	2014.07.21.10.25.48;	author nicm;	state Exp;
branches;
next	1.14;
commitid	uQXf8Vu4TQgRm6UX;

1.14
date	2014.05.27.13.04.42;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2014.02.10.11.20.41;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2014.01.31.11.20.28;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.22.10.30.04;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.23.10.02.49;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.27.20.31.25;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2011.01.01.03.43.20;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.14.00.37.51;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.01.21.11.14;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.30.16.44.03;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.05.19.35.16;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.26.18.16.32;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.26.17.46.33;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Revert previous for now, it will break TERM=screen.
@
text
@/* $OpenBSD: xterm-keys.c,v 1.19 2016/10/03 22:52:11 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>

#include "tmux.h"

/*
 * xterm-style function keys append one of the following values before the last
 * character:
 *
 * 2 Shift
 * 3 Alt
 * 4 Shift + Alt
 * 5 Ctrl
 * 6 Shift + Ctrl
 * 7 Alt + Ctrl
 * 8 Shift + Alt + Ctrl
 *
 * Rather than parsing them, just match against a table.
 *
 * There are three forms for F1-F4 (\\033O_P and \\033O1;_P and \\033[1;_P).
 * We accept any but always output the latter (it comes first in the table).
 */

static int	xterm_keys_match(const char *, const char *, size_t, size_t *,
		    key_code *);
static int	xterm_keys_modifiers(const char *, size_t, size_t *,
		    key_code *);

struct xterm_keys_entry {
	key_code	 key;
	const char	*template;
};

static const struct xterm_keys_entry xterm_keys_table[] = {
	{ KEYC_F1,	"\033[1;_P" },
	{ KEYC_F1,	"\033O1;_P" },
	{ KEYC_F1,	"\033O_P" },
	{ KEYC_F2,	"\033[1;_Q" },
	{ KEYC_F2,	"\033O1;_Q" },
	{ KEYC_F2,	"\033O_Q" },
	{ KEYC_F3,	"\033[1;_R" },
	{ KEYC_F3,	"\033O1;_R" },
	{ KEYC_F3,	"\033O_R" },
	{ KEYC_F4,	"\033[1;_S" },
	{ KEYC_F4,	"\033O1;_S" },
	{ KEYC_F4,	"\033O_S" },
	{ KEYC_F5,	"\033[15;_~" },
	{ KEYC_F6,	"\033[17;_~" },
	{ KEYC_F7,	"\033[18;_~" },
	{ KEYC_F8,	"\033[19;_~" },
	{ KEYC_F9,	"\033[20;_~" },
	{ KEYC_F10,	"\033[21;_~" },
	{ KEYC_F11,	"\033[23;_~" },
	{ KEYC_F12,	"\033[24;_~" },
	{ KEYC_UP,	"\033[1;_A" },
	{ KEYC_DOWN,	"\033[1;_B" },
	{ KEYC_RIGHT,	"\033[1;_C" },
	{ KEYC_LEFT,	"\033[1;_D" },
	{ KEYC_HOME,	"\033[1;_H" },
	{ KEYC_END,	"\033[1;_F" },
	{ KEYC_PPAGE,	"\033[5;_~" },
	{ KEYC_NPAGE,	"\033[6;_~" },
	{ KEYC_IC,	"\033[2;_~" },
	{ KEYC_DC,	"\033[3;_~" },

	{ '!',          "\033[27;_;33~" },
	{ '#',		"\033[27;_;35~" },
	{ '(',		"\033[27;_;40~" },
	{ ')',		"\033[27;_;41~" },
	{ '+',		"\033[27;_;43~" },
	{ ',',		"\033[27;_;44~" },
	{ '-',		"\033[27;_;45~" },
	{ '.',		"\033[27;_;46~" },
	{ '0',		"\033[27;_;48~" },
	{ '1',		"\033[27;_;49~" },
	{ '2',		"\033[27;_;50~" },
	{ '3',		"\033[27;_;51~" },
	{ '4',		"\033[27;_;52~" },
	{ '5',		"\033[27;_;53~" },
	{ '6',		"\033[27;_;54~" },
	{ '7',		"\033[27;_;55~" },
	{ '8',		"\033[27;_;56~" },
	{ '9',		"\033[27;_;57~" },
	{ ':',		"\033[27;_;58~" },
	{ ';',		"\033[27;_;59~" },
	{ '<',		"\033[27;_;60~" },
	{ '=',		"\033[27;_;61~" },
	{ '>',		"\033[27;_;62~" },
	{ '?',		"\033[27;_;63~" },
	{ '\'',		"\033[27;_;39~" },
	{ '\r',		"\033[27;_;13~" },
	{ '\t',		"\033[27;_;9~" },
};

/*
 * Match key against buffer, treating _ as a wildcard. Return -1 for no match,
 * 0 for match, 1 if the end of the buffer is reached (need more data).
 */
static int
xterm_keys_match(const char *template, const char *buf, size_t len,
    size_t *size, key_code *modifiers)
{
	size_t	pos;
	int	retval;

	*modifiers = 0;

	if (len == 0)
		return (0);

	pos = 0;
	do {
		if (*template == '_') {
			retval = xterm_keys_modifiers(buf, len, &pos,
			    modifiers);
			if (retval != 0)
				return (retval);
			continue;
		}
		if (buf[pos] != *template)
			return (-1);
		pos++;
	} while (*++template != '\0' && pos != len);

	if (*template != '\0')	/* partial */
		return (1);

	*size = pos;
	return (0);
}

/* Find modifiers from buffer. */
static int
xterm_keys_modifiers(const char *buf, size_t len, size_t *pos,
    key_code *modifiers)
{
	u_int	flags;

	if (len - *pos < 2)
		return (1);

	if (buf[*pos] < '0' || buf[*pos] > '9')
		return (-1);
	flags = buf[(*pos)++] - '0';
	if (buf[*pos] >= '0' && buf[*pos] <= '9')
		flags = (flags * 10) + (buf[(*pos)++] - '0');
	flags -= 1;

	*modifiers = 0;
	if (flags & 1)
		*modifiers |= KEYC_SHIFT;
	if (flags & 2)
		*modifiers |= KEYC_ESCAPE;
	if (flags & 4)
		*modifiers |= KEYC_CTRL;
	if (flags & 8)
		*modifiers |= KEYC_ESCAPE;
	return (0);
}

/*
 * Lookup key from a buffer against the table. Returns 0 for found (and the
 * key), -1 for not found, 1 for partial match.
 */
int
xterm_keys_find(const char *buf, size_t len, size_t *size, key_code *key)
{
	const struct xterm_keys_entry	*entry;
	u_int				 i;
	int				 matched;
	key_code			 modifiers;

	for (i = 0; i < nitems(xterm_keys_table); i++) {
		entry = &xterm_keys_table[i];

		matched = xterm_keys_match(entry->template, buf, len, size,
		    &modifiers);
		if (matched == -1)
			continue;
		if (matched == 0)
			*key = entry->key | modifiers;
		return (matched);
	}
	return (-1);
}

/* Lookup a key number from the table. */
char *
xterm_keys_lookup(key_code key)
{
	const struct xterm_keys_entry	*entry;
	u_int				 i;
	key_code			 modifiers;
	char				*out;

	modifiers = 1;
	if (key & KEYC_SHIFT)
		modifiers += 1;
	if (key & KEYC_ESCAPE)
		modifiers += 2;
	if (key & KEYC_CTRL)
		modifiers += 4;

	/*
	 * If the key has no modifiers, return NULL and let it fall through to
	 * the normal lookup.
	 */
	if (modifiers == 1)
		return (NULL);

	/* Otherwise, find the key in the table. */
	key &= ~(KEYC_SHIFT|KEYC_ESCAPE|KEYC_CTRL);
	for (i = 0; i < nitems(xterm_keys_table); i++) {
		entry = &xterm_keys_table[i];
		if (key == entry->key)
			break;
	}
	if (i == nitems(xterm_keys_table))
		return (NULL);

	/* Copy the template and replace the modifier. */
	out = xstrdup(entry->template);
	out[strcspn(out, "_")] = '0' + modifiers;
	return (out);
}
@


1.20
log
@If xterm-keys is on, use xterm(1) style keys for Home and End as well as
modified keys.
@
text
@d53 1
a53 11
static const struct xterm_keys_entry xterm_keys_standard[] = {
	{ KEYC_HOME,	"\033[H" },
	{ KEYC_END,	"\033[F" },
};

static const struct xterm_keys_entry xterm_keys_cursor[] = {
	{ KEYC_HOME,	"\033OH" },
	{ KEYC_END,	"\033OF" },
};

static const struct xterm_keys_entry xterm_keys_modified[] = {
d192 2
a193 2
	for (i = 0; i < nitems(xterm_keys_modified); i++) {
		entry = &xterm_keys_modified[i];
d208 1
a208 1
xterm_keys_lookup(key_code key, int mode)
d210 2
a211 2
	const struct xterm_keys_entry	*table, *entry;
	u_int				 items, i;
d227 2
a228 12
	if (modifiers != 1) {
		table = xterm_keys_modified;
		items = nitems(xterm_keys_modified);
	} else {
		if (mode & MODE_KCURSOR) {
			table = xterm_keys_cursor;
			items = nitems(xterm_keys_cursor);
		} else {
			table = xterm_keys_standard;
			items = nitems(xterm_keys_standard);
		}
	}
d232 2
a233 2
	for (i = 0; i < items; i++) {
		entry = &table[i];
d237 1
a237 1
	if (i == items)
d242 1
a242 2
	if (modifiers != 1)
		out[strcspn(out, "_")] = '0' + modifiers;
@


1.19
log
@Remove some dead code in cmd-move-window.c and make a load of local
functions static.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.18 2016/01/19 15:59:12 nicm Exp $ */
d53 11
a63 1
static const struct xterm_keys_entry xterm_keys_table[] = {
d202 2
a203 2
	for (i = 0; i < nitems(xterm_keys_table); i++) {
		entry = &xterm_keys_table[i];
d218 1
a218 1
xterm_keys_lookup(key_code key)
d220 2
a221 2
	const struct xterm_keys_entry	*entry;
	u_int				 i;
d237 12
a248 2
	if (modifiers == 1)
		return (NULL);
d252 2
a253 2
	for (i = 0; i < nitems(xterm_keys_table); i++) {
		entry = &xterm_keys_table[i];
d257 1
a257 1
	if (i == nitems(xterm_keys_table))
d262 2
a263 1
	out[strcspn(out, "_")] = '0' + modifiers;
@


1.18
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.17 2015/11/12 11:05:34 nicm Exp $ */
d43 4
a46 3
int	xterm_keys_match(const char *, const char *, size_t, size_t *,
	    key_code *);
int	xterm_keys_modifiers(const char *, size_t, size_t *, key_code *);
d53 1
a53 1
const struct xterm_keys_entry xterm_keys_table[] = {
d118 1
a118 1
int
d152 1
a152 1
int
@


1.17
log
@Support UTF-8 key bindings by expanding the key type from int to
uint64_t and converting UTF-8 to Unicode on input and the reverse on
output. (This allows key bindings, there are still omissions - the
largest being that the various prompts do not accept UTF-8.)
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.16 2015/08/30 15:43:40 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.16
log
@Some style nits and dead assignments.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.15 2014/07/21 10:25:48 nicm Exp $ */
d43 3
a45 2
int	xterm_keys_match(const char *, const char *, size_t, size_t *, u_int *);
int	xterm_keys_modifiers(const char *, size_t, size_t *, u_int *);
d48 1
a48 1
	int		 key;
d119 1
a119 1
    size_t *size, u_int *modifiers)
d152 2
a153 1
xterm_keys_modifiers(const char *buf, size_t len, size_t *pos, u_int *modifiers)
d184 1
a184 1
xterm_keys_find(const char *buf, size_t len, size_t *size, int *key)
d187 1
a187 1
	u_int				 i, modifiers;
d189 1
d207 1
a207 1
xterm_keys_lookup(int key)
d211 1
a211 1
	int				 modifiers;
@


1.15
log
@Drop explicit support for F13-F20 and change to match the xterm terminfo
entry:

        F13-F24 are S-F1 to S-F12
        F25-F36 are C-F1 to C-F12
        F37-F48 are C-S-F1 to C-S-F12
        F49-F60 are M-F1 to M-F12
and     F61-F63 are M-S-F1 to M-S-F3

This should be no difference for applications inside tmux, but means
that any key binding for F13 will need to be replaced by S-F1 and so on.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.14 2014/05/27 13:04:42 nicm Exp $ */
d122 2
@


1.14
log
@Handle the top bit of xterm(1)-style modifier keys, based on a diff from
Balazs Kezes.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.13 2014/02/10 11:20:41 nicm Exp $ */
a71 8
	{ KEYC_F13,	"\033[25;_~" },
	{ KEYC_F14,	"\033[26;_~" },
	{ KEYC_F15,	"\033[28;_~" },
	{ KEYC_F16,	"\033[29;_~" },
	{ KEYC_F17,	"\033[31;_~" },
	{ KEYC_F18,	"\033[32;_~" },
	{ KEYC_F19,	"\033[33;_~" },
	{ KEYC_F20,	"\033[34;_~" },
@


1.13
log
@The last fix to xterm keys meant that some keys such as \033OA were
being wrongly treated as partial matches. So both check xterm keys after
standard keys and only wildcard the minimum required ('1' to
'8'). Problems reported by Ralf Horstmann and Tim van der Molen.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.12 2014/01/31 11:20:28 nicm Exp $ */
d43 2
a44 2
int	xterm_keys_match(const char *, const char *, size_t);
int	xterm_keys_modifiers(const char *, const char *, size_t);
d125 2
a126 1
xterm_keys_match(const char *template, const char *buf, size_t len)
d129 1
d136 5
a140 1
		if (*template == '_' && buf[pos] >= '1' && buf[pos] <= '8')
d142 1
d145 2
a146 1
	} while (*++template != '\0' && ++pos != len);
d151 1
d155 1
a155 1
/* Find modifiers based on template. */
d157 1
a157 1
xterm_keys_modifiers(const char *template, const char *buf, size_t len)
d159 1
a159 2
	size_t	idx;
	int     param, modifiers;
d161 2
a162 4
	idx = strcspn(template, "_");
	if (idx >= len)
		return (0);
	param = buf[idx] - '1';
d164 17
a180 10
	modifiers = 0;
	if (param & 1)
		modifiers |= KEYC_SHIFT;
	if (param & 2)
		modifiers |= KEYC_ESCAPE;
	if (param & 4)
		modifiers |= KEYC_CTRL;
	if (param & 8)
		modifiers |= KEYC_ESCAPE;
	return (modifiers);
d191 2
a192 1
	u_int				 i;
d196 8
a203 9
		switch (xterm_keys_match(entry->template, buf, len)) {
		case 0:
			*size = strlen(entry->template);
			*key = entry->key;
			*key |= xterm_keys_modifiers(entry->template, buf, len);
			return (0);
		case 1:
			return (1);
		}
@


1.12
log
@Fix partial matches with xterm-keys on, from m0viefreak dot cm at
googlemail dot com.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.11 2013/03/22 10:30:04 nicm Exp $ */
d134 3
a136 1
		if (*template != '_' && buf[pos] != *template)
@


1.11
log
@In terminals with XT, turn on modifyOtherKeys=1 with the escape sequence
and handle the most common set. Pass them through if xterm-keys is on.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.10 2011/06/23 10:02:49 nicm Exp $ */
d136 1
a136 1
	} while (pos++ != len && *++template != '\0');
@


1.10
log
@Add a couple of extra xterm-style keys that gnome terminal provides,
from Dustin Kirkland.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.9 2011/03/27 20:31:25 nicm Exp $ */
d90 28
@


1.9
log
@Don't include meta twice when working out the flags to output for
xterm-style keys - bit 3 is accepted on input but not on output. Also a
style nit in the header.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.8 2011/01/01 03:43:20 nicm Exp $ */
d39 2
a40 2
 * There are two forms for F1-F4 (\\033O_P or \\033[1;_P). We accept either but
 * always output the latter (it comes first in the table).
d53 1
d56 1
d59 1
d62 1
@


1.8
log
@Last few tables that should be const.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.7 2010/10/14 00:37:51 nicm Exp $ */
a176 2
	if (key & KEYC_ESCAPE)
		modifiers += 8;
@


1.7
log
@Treat the meta bit in the xterm extended modifier key set as the same as
escape (tmux's meta). From Emanuele Giaquinta.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.6 2010/09/01 21:11:14 nicm Exp $ */
d51 1
a51 1
struct xterm_keys_entry xterm_keys_table[] = {
d143 2
a144 2
	struct xterm_keys_entry	*entry;
	u_int			 i;
d165 4
a168 4
	struct xterm_keys_entry	*entry;
	u_int			 i;
	int			 modifiers;
	char			*out;
@


1.6
log
@Simplify xterm modifier detection by treating as a bitmask + 1. Spotted
by and diff from Emanuele Giaquinta.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.5 2009/12/03 22:50:10 nicm Exp $ */
d131 2
d177 2
@


1.5
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.4 2009/11/30 16:44:03 nicm Exp $ */
d117 1
d122 10
a131 17
	switch (buf[idx]) {
	case '2':
		return (KEYC_SHIFT);
	case '3':
		return (KEYC_ESCAPE);
	case '4':
		return (KEYC_SHIFT|KEYC_ESCAPE);
	case '5':
		return (KEYC_CTRL);
	case '6':
		return (KEYC_SHIFT|KEYC_CTRL);
	case '7':
		return (KEYC_ESCAPE|KEYC_CTRL);
	case '8':
		return (KEYC_SHIFT|KEYC_ESCAPE|KEYC_CTRL);
	}
	return (0);
d168 7
a174 18
#define KEY_MODIFIERS(key, modifiers) \
	(((key) & (KEYC_SHIFT|KEYC_ESCAPE|KEYC_CTRL)) == (modifiers))
	modifiers = 0;
	if (KEY_MODIFIERS(key, KEYC_SHIFT))
		modifiers = 2;
	else if (KEY_MODIFIERS(key, KEYC_ESCAPE))
		modifiers = 3;
	else if (KEY_MODIFIERS(key, KEYC_SHIFT|KEYC_ESCAPE))
		modifiers = 4;
	else if (KEY_MODIFIERS(key, KEYC_CTRL))
		modifiers = 5;
	else if (KEY_MODIFIERS(key, KEYC_SHIFT|KEYC_CTRL))
		modifiers = 6;
	else if (KEY_MODIFIERS(key, KEYC_ESCAPE|KEYC_CTRL))
		modifiers = 7;
	else if (KEY_MODIFIERS(key, KEYC_SHIFT|KEYC_ESCAPE|KEYC_CTRL))
		modifiers = 8;
#undef KEY_MODIFIERS
d180 1
a180 1
	if (modifiers == 0)
@


1.4
log
@Handle partial xterm function key sequences.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.3 2009/11/05 19:35:16 nicm Exp $ */
d30 5
a34 5
 * 3 Alt 
 * 4 Shift + Alt 
 * 5 Ctrl 
 * 6 Shift + Ctrl 
 * 7 Alt + Ctrl 
d88 1
a88 1
/* 
d135 1
a135 1
 		return (KEYC_SHIFT|KEYC_ESCAPE|KEYC_CTRL);
d209 1
a209 1
	
@


1.3
log
@Old xterm F1-F4 are \033O_P not \033[O_P.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.2 2009/10/26 18:16:32 nicm Exp $ */
d88 4
a91 1
/* Match key against buffer, treating _ as a wildcard. */
d97 1
a97 1
	if (len == 0 || len < strlen(template))
d103 1
a103 1
			return (0);
d106 4
a109 1
	return (1);
d140 4
a143 1
/* Lookup key from buffer against table. */
d145 1
a145 1
xterm_keys_find(const char *buf, size_t len, size_t *size)
d152 9
a160 2
		if (xterm_keys_match(entry->template, buf, len))
			break;
d162 1
a162 4
	if (i == nitems(xterm_keys_table))
		return (KEYC_NONE);
	*size = strlen(entry->template);
	return (entry->key | xterm_keys_modifiers(entry->template, buf, len));
@


1.2
log
@Nuke accidentally-committed debugging statement.
@
text
@d1 1
a1 1
/* $OpenBSD: xterm-keys.c,v 1.1 2009/10/26 17:46:33 nicm Exp $ */
d53 1
a53 1
	{ KEYC_F1,	"\033[O_P" },
d55 1
a55 1
	{ KEYC_F2,	"\033[O_Q" },
d57 1
a57 1
	{ KEYC_F3,	"\033[O_R" },
d59 1
a59 1
	{ KEYC_F4,	"\033[O_S" },
@


1.1
log
@Rewrite xterm-keys code (both input and output) so that works (doesn't always
output the same modifiers, accepts all the possible input keys) and is more
understandable.
@
text
@d1 1
a1 1
/* $OpenBSD: input-keys.c,v 1.4 2009/10/11 07:01:10 nicm Exp $ */
a148 1
	log_debug("XXX %x %x", entry->key, xterm_keys_modifiers(entry->template, buf, len));
@

