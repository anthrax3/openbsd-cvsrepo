head	1.11;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.11
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.10;
commitid	RXMp6wwG5a5Y82bo;

1.10
date	2017.01.15.22.00.56;	author nicm;	state Exp;
branches;
next	1.9;
commitid	P8Zuj7wnJMd8B8vz;

1.9
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.8;
commitid	pxm6osuE99zELpkU;

1.8
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.7;
commitid	S3IpyYTkmviA6lfM;

1.7
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.6;
commitid	TaZ3kOtGiWwKofka;

1.6
date	2016.05.12.13.21.56;	author nicm;	state Exp;
branches;
next	1.5;
commitid	9dnNpXK3ZioePt3D;

1.5
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.4;
commitid	rE682EC14v4gpeFy;

1.4
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.3;
commitid	gsQkQsSyBCSmU9ax;

1.3
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.2;
commitid	uzMkp8Z4FE6WB6s6;

1.2
date	2015.12.11.15.46.57;	author nicm;	state Exp;
branches;
next	1.1;
commitid	7gYcVEFDdWFs0Erw;

1.1
date	2015.12.08.01.10.31;	author nicm;	state Exp;
branches;
next	;
commitid	Q7y3PTVPjE0eQDqD;


desc
@@


1.11
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@/* $OpenBSD: cmd-set-hook.c,v 1.10 2017/01/15 22:00:56 nicm Exp $ */

/*
 * Copyright (c) 2012 Thomas Adam <thomas@@xteddy.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Set or show global or session hooks.
 */

static enum cmd_retval cmd_set_hook_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_set_hook_entry = {
	.name = "set-hook",
	.alias = NULL,

	.args = { "gt:u", 1, 2 },
	.usage = "[-gu] " CMD_TARGET_SESSION_USAGE " hook-name [command]",

	.target = { 't', CMD_FIND_SESSION, CMD_FIND_CANFAIL },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_set_hook_exec
};

const struct cmd_entry cmd_show_hooks_entry = {
	.name = "show-hooks",
	.alias = NULL,

	.args = { "gt:", 0, 1 },
	.usage = "[-g] " CMD_TARGET_SESSION_USAGE,

	.target = { 't', CMD_FIND_SESSION, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_set_hook_exec
};

static enum cmd_retval
cmd_set_hook_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;
	struct cmd_list	*cmdlist;
	struct hooks	*hooks;
	struct hook	*hook;
	char		*cause, *tmp;
	const char	*name, *cmd, *target;

	if (args_has(args, 'g'))
		hooks = global_hooks;
	else {
		if (item->target.s == NULL) {
			target = args_get(args, 't');
			if (target != NULL)
				cmdq_error(item, "no such session: %s", target);
			else
				cmdq_error(item, "no current session");
			return (CMD_RETURN_ERROR);
		}
		hooks = item->target.s->hooks;
	}

	if (self->entry == &cmd_show_hooks_entry) {
		hook = hooks_first(hooks);
		while (hook != NULL) {
			tmp = cmd_list_print(hook->cmdlist);
			cmdq_print(item, "%s -> %s", hook->name, tmp);
			free(tmp);

			hook = hooks_next(hook);
		}
		return (CMD_RETURN_NORMAL);
	}

	name = args->argv[0];
	if (*name == '\0') {
		cmdq_error(item, "invalid hook name");
		return (CMD_RETURN_ERROR);
	}
	if (args->argc < 2)
		cmd = NULL;
	else
		cmd = args->argv[1];

	if (args_has(args, 'u')) {
		if (cmd != NULL) {
			cmdq_error(item, "command passed to unset hook: %s",
			    name);
			return (CMD_RETURN_ERROR);
		}
		hooks_remove(hooks, name);
		return (CMD_RETURN_NORMAL);
	}

	if (cmd == NULL) {
		cmdq_error(item, "no command to set hook: %s", name);
		return (CMD_RETURN_ERROR);
	}
	cmdlist = cmd_string_parse(cmd, NULL, 0, &cause);
	if (cmdlist == NULL) {
		if (cause != NULL) {
			cmdq_error(item, "%s", cause);
			free(cause);
		}
		return (CMD_RETURN_ERROR);
	}
	hooks_add(hooks, name, cmdlist);
	cmd_list_free(cmdlist);

	return (CMD_RETURN_NORMAL);
}
@


1.10
log
@It is silly for cmd_list_parse to return an integer error when it could
just return NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.9 2016/10/16 19:04:05 nicm Exp $ */
d39 1
a39 1
	.tflag = CMD_SESSION_CANFAIL,
d52 1
a52 1
	.tflag = CMD_SESSION,
d71 1
a71 1
		if (item->state.tflag.s == NULL) {
d79 1
a79 1
		hooks = item->state.tflag.s->hooks;
@


1.9
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.8 2016/10/14 22:14:22 nicm Exp $ */
d118 2
a119 1
	if (cmd_string_parse(cmd, &cmdlist, NULL, 0, &cause) != 0) {
@


1.8
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.7 2016/10/10 21:51:39 nicm Exp $ */
d30 1
a30 1
static enum cmd_retval cmd_set_hook_exec(struct cmd *, struct cmd_q *);
d59 1
a59 1
cmd_set_hook_exec(struct cmd *self, struct cmd_q *cmdq)
d71 1
a71 1
		if (cmdq->state.tflag.s == NULL) {
d74 1
a74 1
				cmdq_error(cmdq, "no such session: %s", target);
d76 1
a76 1
				cmdq_error(cmdq, "no current session");
d79 1
a79 1
		hooks = cmdq->state.tflag.s->hooks;
d86 1
a86 1
			cmdq_print(cmdq, "%s -> %s", hook->name, tmp);
d96 1
a96 1
		cmdq_error(cmdq, "invalid hook name");
d106 1
a106 1
			cmdq_error(cmdq, "command passed to unset hook: %s",
d115 1
a115 1
		cmdq_error(cmdq, "no command to set hook: %s", name);
d120 1
a120 1
			cmdq_error(cmdq, "%s", cause);
@


1.7
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.6 2016/05/12 13:21:56 nicm Exp $ */
d41 1
a41 1
	.flags = 0,
d54 1
a54 1
	.flags = 0,
@


1.6
log
@set-hook needs CANFAIL like the other set commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.5 2015/12/14 00:31:54 nicm Exp $ */
d30 1
a30 1
enum cmd_retval cmd_set_hook_exec(struct cmd *, struct cmd_q *);
d58 1
a58 1
enum cmd_retval
@


1.5
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.4 2015/12/13 21:53:57 nicm Exp $ */
d39 1
a39 1
	.tflag = CMD_SESSION,
d66 1
a66 1
	const char	*name, *cmd;
d70 9
a78 1
	else
d80 1
@


1.4
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.3 2015/12/13 14:32:38 nicm Exp $ */
d39 3
a41 1
	.flags = CMD_SESSION_T,
d52 3
a54 1
	.flags = CMD_SESSION_T,
@


1.3
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.2 2015/12/11 15:46:57 nicm Exp $ */
d33 8
a40 5
	"set-hook", NULL,
	"gt:u", 1, 2,
	"[-gu] " CMD_TARGET_SESSION_USAGE " hook-name [command]",
	CMD_SESSION_T,
	cmd_set_hook_exec
d44 8
a51 5
	"show-hooks", NULL,
	"gt:", 0, 1,
	"[-g] " CMD_TARGET_SESSION_USAGE,
	CMD_SESSION_T,
	cmd_set_hook_exec
@


1.2
log
@We cannot do hooks_find and then hooks_remove because it might have come
from the parent (global) tree, instead make it remove by name like options.

While here, also tidy up a few bits of options and hooks handling (use
RB_FOREACH_SAFE, and a helper function for the free).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-hook.c,v 1.1 2015/12/08 01:10:31 nicm Exp $ */
d36 1
a36 1
	0,
d44 1
a44 1
	0,
a51 1
	struct session	*s;
d60 2
a61 6
	else {
		s = cmd_find_session(cmdq, args_get(args, 't'), 0);
		if (s == NULL)
			return (CMD_RETURN_ERROR);
		hooks = s->hooks;
	}
@


1.1
log
@Add hooks infrastructure, basic commands (set-hook, show-hooks) and a
couple of not very useful client hooks. This will eventually let
commands be run at various points and on notifications. Joint work with
Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d96 1
a96 2
		if ((hook = hooks_find(hooks, name)) != NULL)
			hooks_remove(hooks, hook);
@

