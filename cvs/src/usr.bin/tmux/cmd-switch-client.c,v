head	1.50;
access;
symbols
	OPENBSD_6_1:1.48.0.4
	OPENBSD_6_1_BASE:1.48
	OPENBSD_6_0:1.42.0.4
	OPENBSD_6_0_BASE:1.42
	OPENBSD_5_9:1.42.0.2
	OPENBSD_5_9_BASE:1.42
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.15.0.4
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.2
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.50
date	2017.04.22.08.56.24;	author nicm;	state Exp;
branches;
next	1.49;
commitid	swq7JsAZEYBxos2Q;

1.49
date	2017.04.21.14.01.19;	author nicm;	state Exp;
branches;
next	1.48;
commitid	6dh4rgGOD5wckeD9;

1.48
date	2017.02.06.15.00.41;	author nicm;	state Exp;
branches;
next	1.47;
commitid	2TKl6DV1kcWaPxr9;

1.47
date	2017.01.28.16.11.27;	author nicm;	state Exp;
branches;
next	1.46;
commitid	Lx4StVNNYdwEMkI4;

1.46
date	2017.01.24.20.15.32;	author nicm;	state Exp;
branches;
next	1.45;
commitid	OhhGixV64mirqDj8;

1.45
date	2017.01.06.13.26.09;	author nicm;	state Exp;
branches;
next	1.44;
commitid	evl2ye09fq1fGW2b;

1.44
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.43;
commitid	pxm6osuE99zELpkU;

1.43
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.42;
commitid	TaZ3kOtGiWwKofka;

1.42
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.41;
commitid	P3qmSOx6KrDBsb0c;

1.41
date	2015.12.23.00.12.57;	author nicm;	state Exp;
branches;
next	1.40;
commitid	m0Qh5YXqiPhKOW2E;

1.40
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.39;
commitid	rE682EC14v4gpeFy;

1.39
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.38;
commitid	gsQkQsSyBCSmU9ax;

1.38
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.37;
commitid	uzMkp8Z4FE6WB6s6;

1.37
date	2015.12.12.18.32.24;	author nicm;	state Exp;
branches;
next	1.36;
commitid	q7iDAcShsJWlLYhr;

1.36
date	2015.12.12.18.28.47;	author nicm;	state Exp;
branches;
next	1.35;
commitid	lEgq73Vqqb385LLw;

1.35
date	2015.12.11.12.39.47;	author nicm;	state Exp;
branches;
next	1.34;
commitid	VpAlBc26sKMGjzZj;

1.34
date	2015.12.08.00.51.17;	author mmcc;	state Exp;
branches;
next	1.33;
commitid	HQvF1xW1tJVQog09;

1.33
date	2015.10.28.09.51.55;	author nicm;	state Exp;
branches;
next	1.32;
commitid	eGVGKzVVYKHFvkn4;

1.32
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.31;
commitid	89xhQafU35Q5MQVC;

1.31
date	2015.09.22.21.56.16;	author nicm;	state Exp;
branches;
next	1.30;
commitid	mDR9rotcTTbRmoq6;

1.30
date	2015.09.10.08.58.14;	author nicm;	state Exp;
branches;
next	1.29;
commitid	fjYzZVETyEmTAStI;

1.29
date	2015.08.28.13.01.03;	author nicm;	state Exp;
branches;
next	1.28;
commitid	fIVZtZS9F66XgvbR;

1.28
date	2015.08.28.12.16.28;	author nicm;	state Exp;
branches;
next	1.27;
commitid	LqkiQ6rY2EYTPxv3;

1.27
date	2015.07.06.14.24.57;	author nicm;	state Exp;
branches;
next	1.26;
commitid	FNjLMFLssR9ZpFbH;

1.26
date	2015.06.07.21.39.39;	author nicm;	state Exp;
branches;
next	1.25;
commitid	N9n0sMf4KapNFAh6;

1.25
date	2015.05.07.14.07.16;	author nicm;	state Exp;
branches;
next	1.24;
commitid	Jeo6sOXkCpqoqNAD;

1.24
date	2015.04.25.18.09.28;	author nicm;	state Exp;
branches;
next	1.23;
commitid	B7W3z8l90mUfy5Jt;

1.23
date	2015.04.20.15.34.56;	author nicm;	state Exp;
branches;
next	1.22;
commitid	1fc4pMkRD7YjyQWP;

1.22
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.21;
commitid	Gq8hgMoG3t1Wy1Zv;

1.21
date	2014.04.17.07.55.43;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2014.02.12.20.26.13;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2014.01.09.14.28.14;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.10.10.12.00.24;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.24.09.27.20;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.01.21.06.13.16;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2011.08.16.10.00.52;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.05.19.37.01;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.01.01.12.09;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.20.00.17.22;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.11.18.39.25;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2010.09.26.20.43.30;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.08.22.02.28;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.23.17.50.56;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Mouse bindings and hooks set up an initial current state when running a
command. This is used for the session, window and pane for all commands
in the command sequence if there is no -t or -s.

However, using it for all commands in the command sequence means that if
the active pane or current session is changed, subsequent commands still
use the previous state. So make commands which explicitly change the
current state (such as neww and selectp) update it themselves for later
commands. Commands which may invalidate the state (like killp) are
already OK because an invalid state will be ignored.

Also fill in the current state for all key bindings rather than just the
mouse, so that any omissions are easier to spot.
@
text
@/* $OpenBSD: cmd-switch-client.c,v 1.49 2017/04/21 14:01:19 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Switch client to a different session.
 */

static enum cmd_retval	cmd_switch_client_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_switch_client_entry = {
	.name = "switch-client",
	.alias = "switchc",

	.args = { "lc:Enpt:rT:", 0, 0 },
	.usage = "[-Elnpr] [-c target-client] [-t target-session] "
		 "[-T key-table]",

	.cflag = CMD_CLIENT,
	.tflag = CMD_SESSION_WITHPANE,

	.flags = CMD_READONLY,
	.exec = cmd_switch_client_exec
};

static enum cmd_retval
cmd_switch_client_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct cmd_state	*state = &item->state;
	struct client		*c = state->c;
	struct session		*s = item->state.tflag.s;
	struct window_pane	*wp;
	const char		*tablename;
	struct key_table	*table;

	if (args_has(args, 'r'))
		c->flags ^= CLIENT_READONLY;

	tablename = args_get(args, 'T');
	if (tablename != NULL) {
		table = key_bindings_get_table(tablename, 0);
		if (table == NULL) {
			cmdq_error(item, "table %s doesn't exist", tablename);
			return (CMD_RETURN_ERROR);
		}
		table->references++;
		key_bindings_unref_table(c->keytable);
		c->keytable = table;
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(args, 'n')) {
		if ((s = session_next_session(c->session)) == NULL) {
			cmdq_error(item, "can't find next session");
			return (CMD_RETURN_ERROR);
		}
	} else if (args_has(args, 'p')) {
		if ((s = session_previous_session(c->session)) == NULL) {
			cmdq_error(item, "can't find previous session");
			return (CMD_RETURN_ERROR);
		}
	} else if (args_has(args, 'l')) {
		if (c->last_session != NULL && session_alive(c->last_session))
			s = c->last_session;
		else
			s = NULL;
		if (s == NULL) {
			cmdq_error(item, "can't find last session");
			return (CMD_RETURN_ERROR);
		}
	} else {
		if (item->client == NULL)
			return (CMD_RETURN_NORMAL);
		if (state->tflag.wl != NULL) {
			wp = state->tflag.wp;
			if (wp != NULL)
				window_set_active_pane(wp->window, wp);
			session_set_current(s, state->tflag.wl);
			cmd_find_from_session(&item->shared->current, s);
		}
	}

	if (!args_has(args, 'E'))
		environ_update(s->options, c->environ, s->environ);

	if (c->session != NULL && c->session != s)
		c->last_session = c->session;
	c->session = s;
	if (~item->shared->flags & CMDQ_SHARED_REPEAT)
		server_client_set_key_table(c, NULL);
	status_timer_start(c);
	session_update_activity(s, NULL);
	gettimeofday(&s->last_attached_time, NULL);

	recalculate_sizes();
	server_check_unattached();
	server_redraw_client(c);
	s->curw->flags &= ~WINLINK_ALERTFLAGS;
	alerts_check_session(s);

	return (CMD_RETURN_NORMAL);
}
@


1.49
log
@Store state shared between multiple commands in the queue in a shared
structure.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.48 2017/02/06 15:00:41 nicm Exp $ */
d102 1
@


1.48
log
@Cancel key table when switching session, unless the key is going to
repeat. Reported by Amos Bird.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.47 2017/01/28 16:11:27 nicm Exp $ */
d111 1
a111 1
	if (!item->repeat)
@


1.47
log
@Do not clear the key table when changing session on a client, so that
switch-client and friends work with bind -n.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.46 2017/01/24 20:15:32 nicm Exp $ */
d111 2
@


1.46
log
@Make update-environment an array as well.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.45 2017/01/06 13:26:09 nicm Exp $ */
a110 1
	server_client_set_key_table(c, NULL);
@


1.45
log
@Nits found with clang.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.44 2016/10/16 19:04:05 nicm Exp $ */
d56 1
a56 1
	const char		*tablename, *update;
d105 2
a106 4
	if (!args_has(args, 'E')) {
		update = options_get_string(s->options, "update-environment");
		environ_update(update, c->environ, s->environ);
	}
@


1.44
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.43 2016/10/10 21:51:39 nicm Exp $ */
d105 1
a105 1
	if (c != NULL && !args_has(args, 'E')) {
@


1.43
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.42 2016/01/19 15:59:12 nicm Exp $ */
d30 2
a31 1
static enum cmd_retval	 cmd_switch_client_exec(struct cmd *, struct cmd_q *);
d49 1
a49 1
cmd_switch_client_exec(struct cmd *self, struct cmd_q *cmdq)
d52 1
a52 1
	struct cmd_state	*state = &cmdq->state;
d54 1
a54 1
	struct session		*s = cmdq->state.tflag.s;
d66 1
a66 1
			cmdq_error(cmdq, "table %s doesn't exist", tablename);
d77 1
a77 1
			cmdq_error(cmdq, "can't find next session");
d82 1
a82 1
			cmdq_error(cmdq, "can't find previous session");
d91 1
a91 1
			cmdq_error(cmdq, "can't find last session");
d95 1
a95 1
		if (cmdq->client == NULL)
@


1.42
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.41 2015/12/23 00:12:57 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_switch_client_exec(struct cmd *, struct cmd_q *);
d47 1
a47 1
enum cmd_retval
@


1.41
log
@Repair switch-client -l and switch-client with a window target.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.40 2015/12/14 00:31:54 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.40
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.39 2015/12/13 21:53:57 nicm Exp $ */
d93 1
a95 2

		s = state->tflag.s;
@


1.39
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.38 2015/12/13 14:32:38 nicm Exp $ */
d40 4
a43 2
	.flags = CMD_READONLY|CMD_CLIENT_C|CMD_PANE_T|CMD_SESSION_T|
		 CMD_PREFERUNATTACHED,
@


1.38
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.37 2015/12/12 18:32:24 nicm Exp $ */
d33 10
a42 5
	"switch-client", "switchc",
	"lc:Enpt:rT:", 0, 0,
	"[-Elnpr] [-c target-client] [-t target-session] [-T key-table]",
	CMD_READONLY|CMD_CLIENT_C|CMD_PANE_T|CMD_SESSION_T|CMD_PREFERUNATTACHED,
	cmd_switch_client_exec
a54 1

@


1.37
log
@Add key-table option to set the default key table for a session, allows
different key bindings for different sessions and a few other things.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.36 2015/12/12 18:28:47 nicm Exp $ */
d36 1
a36 1
	CMD_READONLY,
d44 5
a48 6
	struct client		*c;
	struct session		*s = NULL;
	struct winlink		*wl = NULL;
	struct window 		*w = NULL;
	struct window_pane	*wp = NULL;
	const char		*tflag, *tablename, *update;
a50 2
	if ((c = cmd_find_client(cmdq, args_get(args, 'c'), 0)) == NULL)
		return (CMD_RETURN_ERROR);
a67 1
	tflag = args_get(args, 't');
d81 2
a86 20
	} else {
		if (tflag == NULL) {
			if ((s = cmd_find_session(cmdq, tflag, 1)) == NULL)
				return (CMD_RETURN_ERROR);
		} else if (tflag[strcspn(tflag, ":.")] != '\0') {
			if ((wl = cmd_find_pane(cmdq, tflag, &s, &wp)) == NULL)
				return (CMD_RETURN_ERROR);
		} else {
			if ((s = cmd_find_session(cmdq, tflag, 1)) == NULL)
				return (CMD_RETURN_ERROR);
			w = window_find_by_id_str(tflag);
			if (w == NULL) {
				wp = window_pane_find_by_id_str(tflag);
				if (wp != NULL)
					w = wp->window;
			}
			if (w != NULL)
				wl = winlink_find_by_window(&s->windows, w);
		}

d90 3
a92 1
		if (wl != NULL) {
d95 1
a95 1
			session_set_current(s, wl);
@


1.36
log
@Return after changing key table.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.35 2015/12/11 12:39:47 nicm Exp $ */
d127 1
@


1.35
log
@Check alerts when session changes, from Patrick Palka.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.34 2015/12/08 00:51:17 mmcc Exp $ */
d68 1
@


1.34
log
@Use ^= instead of a verbose alternative. ok nicm@@
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.33 2015/10/28 09:51:55 nicm Exp $ */
d134 1
@


1.33
log
@Like options, move the environ struct into environ.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.32 2015/10/27 15:58:42 nicm Exp $ */
d55 2
a56 6
	if (args_has(args, 'r')) {
		if (c->flags & CLIENT_READONLY)
			c->flags &= ~CLIENT_READONLY;
		else
			c->flags |= CLIENT_READONLY;
	}
@


1.32
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.31 2015/09/22 21:56:16 nicm Exp $ */
d124 1
a124 1
		environ_update(update, &c->environ, &s->environ);
@


1.31
log
@Don't update last session when the session is unchanged, from Sina Siadat.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.30 2015/09/10 08:58:14 nicm Exp $ */
d123 1
a123 1
		update = options_get_string(&s->options, "update-environment");
@


1.30
log
@Add session_last_attached time and format, from Sina Siadat.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.29 2015/08/28 13:01:03 nicm Exp $ */
d127 1
a127 1
	if (c->session != NULL)
@


1.29
log
@Make session_update_activity more useful and use it in more places.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.28 2015/08/28 12:16:28 nicm Exp $ */
d132 1
@


1.28
log
@Run status update on a per-client timer at status-interval.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.27 2015/07/06 14:24:57 nicm Exp $ */
d131 1
a131 1
	session_update_activity(s);
@


1.27
log
@Update environment with -E when attach-session used on an already
attached session or switch-client used on the current session. From Cam
Hutchison.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.26 2015/06/07 21:39:39 nicm Exp $ */
d130 1
@


1.26
log
@Add -E flag when attaching or switching client to bypass
update-environment, from Steven Lu.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.25 2015/05/07 14:07:16 nicm Exp $ */
d122 1
a122 1
	if (c != NULL && s != c->session && !args_has(args, 'E')) {
@


1.25
log
@Update environment when switching sessions as well as attaching, from Si
Beaumont.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.24 2015/04/25 18:09:28 nicm Exp $ */
d34 2
a35 2
	"lc:npt:rT:", 0, 0,
	"[-lnpr] [-c target-client] [-t target-session] [-T key-table]",
d122 1
a122 1
	if (c != NULL && s != c->session) {
@


1.24
log
@Move the functions to convert ids from strings into session.c and window.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.23 2015/04/20 15:34:56 nicm Exp $ */
d49 1
a49 1
	const char		*tflag, *tablename;
d120 5
@


1.23
log
@Support for multiple key tables to commands to be bound to sequences of
keys. The default key bindings become the "prefix" table and -n the
"root" table. Keys may be bound in new tables with bind -T and
switch-client -T used to specify the table in which the next key should
be looked up. Based on a diff from Keith Amling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.22 2014/10/20 22:29:25 nicm Exp $ */
d102 6
a107 4
			w = cmd_lookup_windowid(tflag);
			if (w == NULL &&
			    (wp = cmd_lookup_paneid(tflag)) != NULL)
				w = wp->window;
@


1.22
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.21 2014/04/17 07:55:43 nicm Exp $ */
d34 2
a35 2
	"lc:npt:r", 0, 0,
	"[-lnpr] [-c target-client] [-t target-session]",
d49 2
a50 1
	const char		*tflag;
d60 12
@


1.21
log
@Remove the "info" message mechanism, this was only used for about five
mostly useless and annoying messages. Change those commands to silence
on success like all the others. Still accept the -q command line flag
and "quiet" server option for now.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.20 2014/02/12 20:26:13 nicm Exp $ */
a29 1
void		 cmd_switch_client_key_binding(struct cmd *, int);
a36 1
	cmd_switch_client_key_binding,
a38 17

void
cmd_switch_client_key_binding(struct cmd *self, int key)
{
	self->args = args_create(0);
	switch (key) {
	case '(':
		args_set(self->args, 'p', NULL);
		break;
	case ')':
		args_set(self->args, 'n', NULL);
		break;
	case 'L':
		args_set(self->args, 'l', NULL);
		break;
	}
}
@


1.20
log
@Avoid use of uninitialized variable, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.19 2014/01/09 14:28:14 nicm Exp $ */
d74 1
a74 1
		if (c->flags & CLIENT_READONLY) {
d76 1
a76 2
			cmdq_info(cmdq, "made client writable");
		} else {
a77 2
			cmdq_info(cmdq, "made client read-only");
		}
@


1.19
log
@Similar to attach-session, make switch-client -t accept a window and
pane. From Johannes Jakobsson.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.18 2013/10/10 12:00:24 nicm Exp $ */
d64 1
a64 1
	struct session		*s;
@


1.18
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.17 2013/03/24 09:54:10 nicm Exp $ */
d62 7
a68 3
	struct args	*args = self->args;
	struct client	*c;
	struct session	*s;
d83 1
a83 1
	s = NULL;
d101 27
a127 4
	} else
		s = cmd_find_session(cmdq, args_get(args, 't'), 0);
	if (s == NULL)
		return (CMD_RETURN_ERROR);
@


1.17
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.16 2013/03/24 09:27:20 nicm Exp $ */
a38 1
	NULL,
@


1.16
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.15 2012/07/11 07:10:15 nicm Exp $ */
d31 1
a31 1
enum cmd_retval	 cmd_switch_client_exec(struct cmd *, struct cmd_ctx *);
d61 1
a61 1
cmd_switch_client_exec(struct cmd *self, struct cmd_ctx *ctx)
d67 1
a67 1
	if ((c = cmd_find_client(ctx, args_get(args, 'c'), 0)) == NULL)
d73 1
a73 1
			ctx->info(ctx, "made client writable");
d76 1
a76 1
			ctx->info(ctx, "made client read-only");
d83 1
a83 1
			ctx->error(ctx, "can't find next session");
d88 1
a88 1
			ctx->error(ctx, "can't find previous session");
d95 1
a95 1
			ctx->error(ctx, "can't find last session");
d99 1
a99 1
		s = cmd_find_session(ctx, args_get(args, 't'), 0);
@


1.15
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.14 2012/01/21 06:13:16 nicm Exp $ */
d67 1
a67 1
	if ((c = cmd_find_client(ctx, args_get(args, 'c'))) == NULL)
@


1.14
log
@Only hide flags on the current window when the session is attached, from
Roland Walker.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.13 2011/08/16 10:00:52 nicm Exp $ */
d30 2
a31 2
void	cmd_switch_client_key_binding(struct cmd *, int);
int	cmd_switch_client_exec(struct cmd *, struct cmd_ctx *);
d60 1
a60 1
int
d68 1
a68 1
		return (-1);
d84 1
a84 1
			return (-1);
d89 1
a89 1
			return (-1);
d96 1
a96 1
			return (-1);
d101 1
a101 1
		return (-1);
d113 1
a113 1
	return (0);
@


1.13
log
@Add a -r flag to switch-client to toggle the client read-only flag. From
Johan Commelin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.12 2011/04/05 19:37:01 nicm Exp $ */
d111 1
@


1.12
log
@Add a flag to cmd_find_session so that attach-session can prefer
unattached sessions when choosing the most recently used (if -t is not
given). Suggested by claudio@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.11 2011/01/04 00:42:47 nicm Exp $ */
d35 3
a37 3
	"lc:npt:", 0, 0,
	"[-lnp] [-c target-client] [-t target-session]",
	0,
d69 10
@


1.11
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.10 2011/01/01 01:12:09 nicm Exp $ */
d89 1
a89 1
		s = cmd_find_session(ctx, args_get(args, 't'));
@


1.10
log
@Don't reset the activity timer for unattached sessions every second,
this screws up the choice of most-recently-used. Instead, break the time
update into a little function and do it when the session is attached.

Pointed out by joshe@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.9 2010/12/20 00:17:22 nicm Exp $ */
d30 1
a30 2
void	cmd_switch_client_init(struct cmd *, int);
int	cmd_switch_client_parse(struct cmd *, int, char **, char **);
a31 10
void	cmd_switch_client_free(struct cmd *);
size_t	cmd_switch_client_print(struct cmd *, char *, size_t);

struct cmd_switch_client_data {
	char	*name;
	char	*target;
	int      flag_last;
	int	 flag_next;
	int	 flag_previous;
};
d35 1
d37 4
a40 6
	0, "",
	cmd_switch_client_init,
	cmd_switch_client_parse,
	cmd_switch_client_exec,
	cmd_switch_client_free,
	cmd_switch_client_print
d44 1
a44 1
cmd_switch_client_init(struct cmd *self, int key)
d46 1
a46 9
	struct cmd_switch_client_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->name = NULL;
	data->target = NULL;
	data->flag_last = 0;
	data->flag_next = 0;
	data->flag_previous = 0;

d49 1
a49 1
		data->flag_previous = 1;
d52 1
a52 1
		data->flag_next = 1;
d55 1
a55 1
		data->flag_last = 1;
a60 57
cmd_switch_client_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_switch_client_data	*data;
	int				 opt;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "c:lnpt:")) != -1) {
		switch (opt) {
		case 'c':
			if (data->name == NULL)
				data->name = xstrdup(optarg);
			break;
		case 'l':
			if (data->flag_next || data->flag_previous ||
			    data->target != NULL)
				goto usage;
			data->flag_last = 1;
			break;
		case 'n':
			if (data->flag_previous || data->flag_last ||
			    data->target != NULL)
				goto usage;
			data->flag_next = 1;
			break;
		case 'p':
			if (data->flag_next || data->flag_last ||
			    data->target != NULL)
				goto usage;
			data->flag_next = 1;
			break;
		case 't':
			if (data->flag_next || data->flag_previous)
				goto usage;
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 0)
		goto usage;

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
}

int
d63 3
a65 6
	struct cmd_switch_client_data	*data = self->data;
	struct client			*c;
	struct session			*s;

	if (data == NULL)
		return (0);
d67 1
a67 1
	if ((c = cmd_find_client(ctx, data->name)) == NULL)
d71 1
a71 1
	if (data->flag_next) {
d76 1
a76 1
	} else if (data->flag_previous) {
d81 1
a81 1
	} else if (data->flag_last) {
d89 1
a89 1
		s = cmd_find_session(ctx, data->target);
a102 34
}

void
cmd_switch_client_free(struct cmd *self)
{
	struct cmd_switch_client_data	*data = self->data;

	if (data->name != NULL)
		xfree(data->name);
	if (data->target != NULL)
		xfree(data->target);
	xfree(data);
}

size_t
cmd_switch_client_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_switch_client_data	*data = self->data;
	size_t				 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->flag_last)
		off += xsnprintf(buf + off, len - off, "%s", " -l");
	if (off < len && data->flag_next)
		off += xsnprintf(buf + off, len - off, "%s", " -n");
	if (off < len && data->flag_previous)
		off += xsnprintf(buf + off, len - off, "%s", " -p");
	if (off < len && data->name != NULL)
		off += cmd_prarg(buf + off, len - off, " -c ", data->name);
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
	return (off);
@


1.9
log
@Use pointer rather than index for the client's last session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.8 2010/12/11 18:39:25 nicm Exp $ */
d176 1
@


1.8
log
@Track the last session for a client and add a flag to switch-client and
a key binding (L) to move a client back to its last session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.7 2010/09/26 20:43:30 nicm Exp $ */
d162 2
a163 3
		if (c->last_session != UINT_MAX &&
		    c->last_session < ARRAY_LENGTH(&sessions))
			s = ARRAY_ITEM(&sessions, c->last_session);
d174 1
a174 1
		session_index(c->session, &c->last_session);
@


1.7
log
@Two new options:

- server option "exit-unattached" makes the server exit when no clients
  are attached, even if sessions are present;

- session option "destroy-unattached" destroys a session once no clients
  are attached to it.

These are useful for preventing tmux remaining in the background where
it is undesirable and when using tmux as a login shell to keep a limit
on new sessions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.6 2010/09/08 22:02:28 nicm Exp $ */
d39 1
d46 1
a46 1
	"[-np] [-c target-client] [-t target-session]",
d63 1
d74 3
d89 1
a89 1
	while ((opt = getopt(argc, argv, "c:t:")) != -1) {
d95 3
a97 2
		case 't':
			if (data->flag_next || data->flag_previous)
d99 1
a99 2
			if (data->target == NULL)
				data->target = xstrdup(optarg);
d102 2
a103 1
			if (data->flag_previous || data->target != NULL)
d108 2
a109 1
			if (data->flag_next || data->target != NULL)
d113 6
d150 1
d161 8
a170 1

d173 3
d206 2
@


1.6
log
@Add -n and -p flags to switch-client to move to the next and previous
session (yes, it doesn't match window/pane, but so what, nor does
switch-client).

Based on a diff long ago from "edsouza".
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.5 2010/01/23 17:50:56 nicm Exp $ */
d155 1
@


1.5
log
@Don't leak if arguments appear multiple times, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.4 2009/11/13 19:53:29 nicm Exp $ */
d30 1
d39 2
d45 1
a45 1
	"[-c target-client] [-t target-session]",
d47 1
a47 1
	NULL,
d54 21
d81 2
a82 3
	self->data = data = xmalloc(sizeof *data);
	data->name = NULL;
	data->target = NULL;
d91 2
d96 10
d136 15
a150 1
	if ((s = cmd_find_session(ctx, data->target)) == NULL)
a151 1

d181 4
@


1.4
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d64 2
a65 1
			data->name = xstrdup(optarg);
d68 2
a69 1
			data->target = xstrdup(optarg);
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d43 1
a43 1
	0, 0,
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-switch-client.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a31 2
void	cmd_switch_client_send(struct cmd *, struct buffer *);
void	cmd_switch_client_recv(struct cmd *, struct buffer *);
a46 2
	cmd_switch_client_send,
	cmd_switch_client_recv,
a107 21
}

void
cmd_switch_client_send(struct cmd *self, struct buffer *b)
{
	struct cmd_switch_client_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->name);
	cmd_send_string(b, data->target);
}

void
cmd_switch_client_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_switch_client_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->name = cmd_recv_string(b);
	data->target = cmd_recv_string(b);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d45 1
a45 1
	0,
@

