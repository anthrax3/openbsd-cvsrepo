head	1.15;
access;
symbols
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2013.03.24.09.30.41;	author nicm;	state dead;
branches;
next	1.14;

1.14
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.10.23.00.49.25;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.05.19.37.01;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.30.23.16.18;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.07.18.50.45;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.18.14.48.42;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.18.13.08.43;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Merge show-buffer into save-buffer.
@
text
@/* $OpenBSD: cmd-show-buffer.c,v 1.14 2012/07/11 07:10:15 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <vis.h>

#include "tmux.h"

/*
 * Show a paste buffer.
 */

enum cmd_retval	 cmd_show_buffer_exec(struct cmd *, struct cmd_ctx *);

const struct cmd_entry cmd_show_buffer_entry = {
	"show-buffer", "showb",
	"b:", 0, 0,
	CMD_BUFFER_USAGE,
	0,
	NULL,
	NULL,
	cmd_show_buffer_exec
};

enum cmd_retval
cmd_show_buffer_exec(struct cmd *self, struct cmd_ctx *ctx)
{
	struct args		*args = self->args;
	struct session		*s;
	struct paste_buffer	*pb;
	int			 buffer;
	char			*in, *buf, *ptr, *cause;
	size_t			 size, len;
	u_int			 width;

	if ((s = cmd_find_session(ctx, NULL, 0)) == NULL)
		return (CMD_RETURN_ERROR);

	if (!args_has(args, 'b')) {
		if ((pb = paste_get_top(&global_buffers)) == NULL) {
			ctx->error(ctx, "no buffers");
			return (CMD_RETURN_ERROR);
		}
	} else {
		buffer = args_strtonum(args, 'b', 0, INT_MAX, &cause);
		if (cause != NULL) {
			ctx->error(ctx, "buffer %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}

		pb = paste_get_index(&global_buffers, buffer);
		if (pb == NULL) {
			ctx->error(ctx, "no buffer %d", buffer);
			return (CMD_RETURN_ERROR);
		}
	}

	size = pb->size;
	if (size > SIZE_MAX / 4 - 1)
		size = SIZE_MAX / 4 - 1;
	in = xmalloc(size * 4 + 1);
	strvisx(in, pb->data, size, VIS_OCTAL|VIS_TAB);

	width = s->sx;
	if (ctx->cmdclient != NULL)
		width = ctx->cmdclient->tty.sx;

	buf = xmalloc(width + 1);
	len = 0;

	ptr = in;
	do {
		buf[len++] = *ptr++;

		if (len == width || buf[len - 1] == '\n') {
			if (buf[len - 1] == '\n')
				len--;
			buf[len] = '\0';

			ctx->print(ctx, "%s", buf);
			len = 0;
		}
	} while (*ptr != '\0');

	if (len != 0) {
		buf[len] = '\0';
		ctx->print(ctx, "%s", buf);
	}
	free(buf);

	free(in);

	return (CMD_RETURN_NORMAL);
}
@


1.14
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.13 2012/07/10 11:53:01 nicm Exp $ */
@


1.13
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.12 2011/10/23 00:49:25 nicm Exp $ */
d30 1
a30 1
int	cmd_show_buffer_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
int
d54 1
a54 1
		return (-1);
d59 1
a59 1
			return (-1);
d66 1
a66 1
			return (-1);
d72 1
a72 1
			return (-1);
d111 1
a111 1
	return (0);
@


1.12
log
@Plug a memory leak and update some comments, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.11 2011/04/05 19:37:01 nicm Exp $ */
d21 1
d65 1
a65 1
			xfree(cause);
d107 1
a107 1
	xfree(buf);
d109 1
a109 1
	xfree(in);
@


1.11
log
@Add a flag to cmd_find_session so that attach-session can prefer
unattached sessions when choosing the most recently used (if -t is not
given). Suggested by claudio@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.10 2011/01/04 00:42:47 nicm Exp $ */
d26 1
a26 1
 * Show a session paste buffer.
@


1.10
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.9 2010/12/30 23:16:18 nicm Exp $ */
d52 1
a52 1
	if ((s = cmd_find_session(ctx, NULL)) == NULL)
@


1.9
log
@Change from a per-session stack of buffers to one global stack which is
much more convenient and also simplifies lot of code. This renders
copy-buffer useless and makes buffer-limit now a server option.

By Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.8 2009/12/03 22:50:10 nicm Exp $ */
d33 1
d35 4
a38 6
	0, "",
	cmd_buffer_init,
	cmd_buffer_parse,
	cmd_show_buffer_exec,
	cmd_buffer_free,
	cmd_buffer_print
d44 1
a44 1
	struct cmd_buffer_data	*data = self->data;
d47 2
a48 1
	char			*in, *buf, *ptr;
d55 1
a55 1
	if (data->buffer == -1) {
d61 8
a68 1
		pb = paste_get_index(&global_buffers, data->buffer);
d70 1
a70 1
			ctx->error(ctx, "no buffer %d", data->buffer);
@


1.8
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.7 2009/11/13 19:53:29 nicm Exp $ */
d33 1
a33 1
	CMD_BUFFER_SESSION_USAGE,
d52 1
a52 1
	if ((s = cmd_find_session(ctx, data->target)) == NULL)
d56 1
a56 1
		if ((pb = paste_get_top(&s->buffers)) == NULL) {
d60 6
a65 3
	} else if ((pb = paste_get_index(&s->buffers, data->buffer)) == NULL) {
		ctx->error(ctx, "no buffer %d", data->buffer);
		return (-1);
a66 2
	if (pb == NULL)
		return (0);
@


1.7
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.6 2009/09/07 18:50:45 nicm Exp $ */
d76 1
a76 1
	
d79 1
a79 1
	
d83 1
a83 1
		
d89 1
a89 1
			ctx->print(ctx, "%s", buf);		
d93 1
a93 1
	
@


1.6
log
@Give each paste buffer a size member instead of requiring them to be
zero-terminated.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.5 2009/08/18 14:48:42 nicm Exp $ */
d34 1
a34 1
	0, 0,
@


1.5
log
@Tag a few missed printf-like functions and fix a missing "%s".
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.4 2009/08/18 13:08:43 nicm Exp $ */
a20 1
#include <string.h>
d67 1
a67 1
	size = strlen(pb->data);
@


1.4
log
@Pass show-buffer output through vis(3) as well, and wrap it to the edge of the
terminal when used from the command line.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d97 1
a97 1
		ctx->print(ctx, buf);
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d21 2
a22 1
#include <stdlib.h>
d49 3
a51 3
	u_int			 size;
	char			*buf, *ptr;
	size_t			 len;
d65 2
d68 21
a88 2
	if (pb != NULL) {
		size = s->sx;
d90 6
a95 14
		buf = xmalloc(size + 1);
		len = 0;

		ptr = pb->data;
		do {
			buf[len++] = *ptr++;

			if (len == size) {
				buf[len] = '\0';
				ctx->print(ctx, buf);

				len = 0;
			}
		} while (*ptr != '\0');
d99 3
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-show-buffer.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a37 2
	cmd_buffer_send,
	cmd_buffer_recv,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
	0,
@

