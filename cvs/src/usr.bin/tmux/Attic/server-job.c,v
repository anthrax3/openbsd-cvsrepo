head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2009.11.04.21.04.43;	author nicm;	state dead;
branches;
next	1.4;

1.4
date	2009.11.04.20.50.11;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.01.23.20.37;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.27.13.03.33;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.22.19.41.51;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Switch jobs over to use a bufferevent.
@
text
@/* $OpenBSD: server-job.c,v 1.4 2009/11/04 20:50:11 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <event.h>
#include <unistd.h>

#include "tmux.h"

/* Register jobs for poll. */
void
server_job_prepare(void)
{
	struct job	*job;

	SLIST_FOREACH(job, &all_jobs, lentry) {
		if (job->fd == -1)
			continue;
		event_del(&job->event);
		event_set(
		    &job->event, job->fd, EV_READ, server_job_callback, job);
		event_add(&job->event, NULL);
	}
}

/* Process a single job event. */
void
server_job_callback(int fd, short events, void *data)
{
	struct job	*job = data;

	if (job->fd == -1)
		return;

	if (buffer_poll(fd, events, job->out, NULL) != 0) {
		close(job->fd);
		job->fd = -1;
	}
}

/* Job functions that happen once a loop. */
void
server_job_loop(void)
{
	struct job	*job;

restart:
	SLIST_FOREACH(job, &all_jobs, lentry) {
		if (job->flags & JOB_DONE || job->fd != -1 || job->pid != -1)
			continue;
		job->flags |= JOB_DONE;

		if (job->callbackfn != NULL) {
			job->callbackfn(job);
			if ((!job->flags & JOB_PERSIST)) {
				job_free(job);
				goto restart;
			}
		}
	}
}
@


1.4
log
@Initial changes to move tmux to libevent.

This moves the client-side loops are pretty much fully over to event-based only
(tmux.c and client.c) but server-side (server.c and friends) treats libevent as
a sort of clever poll, waking up after every event to run various things.

Moving the server stuff over to bufferevents and timers and so on will come
later.
@
text
@d1 1
a1 1
/* $OpenBSD: server-job.c,v 1.3 2009/11/01 23:20:37 nicm Exp $ */
@


1.3
log
@Add a flag for jobs that shouldn't be freed after they've died and use it for
status jobs, then only kill those jobs when status-left, status-right or
set-titles-string is changed.

Fixes problems with changing options from inside #().
@
text
@d1 1
a1 1
/* $OpenBSD: server-job.c,v 1.2 2009/10/27 13:03:33 nicm Exp $ */
d21 1
d35 4
a38 1
		server_poll_add(job->fd, POLLIN, server_job_callback, job);
d44 1
a44 1
server_job_callback(int fd, int events, void *data)
d62 1
a62 1
	
@


1.2
log
@Move the poll registration functions into the server-*.c files.
@
text
@d1 1
a1 1
/* $OpenBSD: server-job.c,v 1.1 2009/10/22 19:41:51 nicm Exp $ */
d67 4
a70 1
			goto restart;	/* could be freed by callback */
@


1.1
log
@Split the server code handling clients, jobs and windows off into separate
files from server.c (merging server-msg.c into the client file) and rather than
iterating over each set after poll(), allow a callback to be specified when the
fd is added and just walk once over the returned pollfds calling each callback
where needed.

More to come, getting this in so it is tested.
@
text
@d1 1
a1 1
/* $OpenBSD: tmux.h,v 1.145 2009/10/21 20:11:47 nicm Exp $ */
d24 13
@

