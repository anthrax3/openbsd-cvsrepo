head	1.13;
access;
symbols
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.01.04.00.42.46;	author nicm;	state dead;
branches;
next	1.12;

1.12
date	2010.12.30.23.16.18;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.13.19.58.32;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.26.18.09.52;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.11.12.53.37;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.30.13.45.56;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.11.19.14.56;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@/* $OpenBSD: cmd-generic.c,v 1.12 2010/12/30 23:16:18 nicm Exp $ */

/*
 * Copyright (c) 2008 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

int	cmd_getopt(int, char **, const char *, const char *);
int	cmd_parse_flags(int, const char *, uint64_t *);
size_t	cmd_print_flags(char *, size_t, size_t, uint64_t);
int	cmd_fill_argument(int, char **, char **, int, char **);

size_t
cmd_prarg(char *buf, size_t len, const char *prefix, char *arg)
{
	if (strchr(arg, ' ') != NULL)
		return (xsnprintf(buf, len, "%s\"%s\"", prefix, arg));
	return (xsnprintf(buf, len, "%s%s", prefix, arg));
}

/* Append two flag strings together and call getopt. */
int
cmd_getopt(int argc, char **argv, const char *flagstr, const char *chflagstr)
{
	char	tmp[BUFSIZ];

	if (strlcpy(tmp, flagstr, sizeof tmp) >= sizeof tmp)
		fatalx("strlcpy overflow");
	if (strlcat(tmp, chflagstr, sizeof tmp) >= sizeof tmp)
		fatalx("strlcat overflow");
	return (getopt(argc, argv, tmp));
}

/* Return if flag character is set. */
int
cmd_check_flag(uint64_t chflags, int flag)
{
	if (flag >= 'A' && flag <= 'Z')
		flag = 26 + flag - 'A';
	else if (flag >= 'a' && flag <= 'z')
		flag = flag - 'a';
	else
		return (0);
	return ((chflags & (1ULL << flag)) != 0);
}

/* Set flag character. */
void
cmd_set_flag(uint64_t *chflags, int flag)
{
	if (flag >= 'A' && flag <= 'Z')
		flag = 26 + flag - 'A';
	else if (flag >= 'a' && flag <= 'z')
		flag = flag - 'a';
	else
		return;
	(*chflags) |= (1ULL << flag);
}

/* If this option is expected, set it in chflags, otherwise return -1. */
int
cmd_parse_flags(int opt, const char *chflagstr, uint64_t *chflags)
{
	if (strchr(chflagstr, opt) == NULL)
		return (-1);
	cmd_set_flag(chflags, opt);
	return (0);
}

/* Print the flags present in chflags. */
size_t
cmd_print_flags(char *buf, size_t len, size_t off, uint64_t chflags)
{
	u_char	ch;
	size_t	boff = off;

	if (chflags == 0)
		return (0);
	off += xsnprintf(buf + off, len - off, " -");

	for (ch = 0; ch < 26; ch++) {
		if (cmd_check_flag(chflags, 'a' + ch))
			off += xsnprintf(buf + off, len - off, "%c", 'a' + ch);
		if (cmd_check_flag(chflags, 'A' + ch))
			off += xsnprintf(buf + off, len - off, "%c", 'A' + ch);
	}
	return (off - boff);
}

int
cmd_fill_argument(int flags, char **arg, char **arg2, int argc, char **argv)
{
	*arg = NULL;
	*arg2 = NULL;

	if (flags & CMD_ARG1) {
		if (argc != 1)
			return (-1);
		*arg = xstrdup(argv[0]);
		return (0);
	}

	if (flags & CMD_ARG01) {
		if (argc != 0 && argc != 1)
			return (-1);
		if (argc == 1)
			*arg = xstrdup(argv[0]);
		return (0);
	}

	if (flags & CMD_ARG2) {
		if (argc != 2)
			return (-1);
		*arg = xstrdup(argv[0]);
		*arg2 = xstrdup(argv[1]);
		return (0);
	}

	if (flags & CMD_ARG12) {
		if (argc != 1 && argc != 2)
			return (-1);
		*arg = xstrdup(argv[0]);
		if (argc == 2)
			*arg2 = xstrdup(argv[1]);
		return (0);
	}

	if (argc != 0)
		return (-1);
	return (0);
}

/* ARGSUSED */
void
cmd_target_init(struct cmd *self, unused int key)
{
	struct cmd_target_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->chflags = 0;
	data->target = NULL;
	data->arg = NULL;
	data->arg2 = NULL;
}

int
cmd_target_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_target_data	*data;
	const struct cmd_entry	*entry = self->entry;
	int			 opt;

	/* Don't use the entry version since it may be dependent on key. */
	cmd_target_init(self, 0);
	data = self->data;

	while ((opt = cmd_getopt(argc, argv, "t:", entry->chflags)) != -1) {
		if (cmd_parse_flags(opt, entry->chflags, &data->chflags) == 0)
			continue;
		switch (opt) {
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;

	if (cmd_fill_argument(
	    self->entry->flags, &data->arg, &data->arg2, argc, argv) != 0)
		goto usage;
	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
}

void
cmd_target_free(struct cmd *self)
{
	struct cmd_target_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	if (data->arg != NULL)
		xfree(data->arg);
	if (data->arg2 != NULL)
		xfree(data->arg2);
	xfree(data);
}

size_t
cmd_target_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_target_data	*data = self->data;
	size_t			 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	off += cmd_print_flags(buf, len, off, data->chflags);
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
	if (off < len && data->arg != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->arg);
	if (off < len && data->arg2 != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->arg2);
	return (off);
}

/* ARGSUSED */
void
cmd_srcdst_init(struct cmd *self, unused int key)
{
	struct cmd_srcdst_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->chflags = 0;
	data->src = NULL;
	data->dst = NULL;
	data->arg = NULL;
	data->arg2 = NULL;
}

int
cmd_srcdst_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_srcdst_data	*data;
	const struct cmd_entry	*entry = self->entry;
	int			 opt;

	cmd_srcdst_init(self, 0);
	data = self->data;

	while ((opt = cmd_getopt(argc, argv, "s:t:", entry->chflags)) != -1) {
		if (cmd_parse_flags(opt, entry->chflags, &data->chflags) == 0)
			continue;
		switch (opt) {
		case 's':
			if (data->src == NULL)
				data->src = xstrdup(optarg);
			break;
		case 't':
			if (data->dst == NULL)
				data->dst = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;

	if (cmd_fill_argument(
	    self->entry->flags, &data->arg, &data->arg2, argc, argv) != 0)
		goto usage;
	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
}

void
cmd_srcdst_free(struct cmd *self)
{
	struct cmd_srcdst_data	*data = self->data;

	if (data->src != NULL)
		xfree(data->src);
	if (data->dst != NULL)
		xfree(data->dst);
	if (data->arg != NULL)
		xfree(data->arg);
	if (data->arg2 != NULL)
		xfree(data->arg2);
	xfree(data);
}

size_t
cmd_srcdst_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_srcdst_data	*data = self->data;
	size_t			 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	off += cmd_print_flags(buf, len, off, data->chflags);
	if (off < len && data->src != NULL)
		off += xsnprintf(buf + off, len - off, " -s %s", data->src);
	if (off < len && data->dst != NULL)
		off += xsnprintf(buf + off, len - off, " -t %s", data->dst);
	if (off < len && data->arg != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->arg);
	if (off < len && data->arg2 != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->arg2);
	return (off);
}

/* ARGSUSED */
void
cmd_buffer_init(struct cmd *self, unused int key)
{
	struct cmd_buffer_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->chflags = 0;
	data->buffer = -1;
	data->arg = NULL;
	data->arg2 = NULL;
}

int
cmd_buffer_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_buffer_data	*data;
	const struct cmd_entry	*entry = self->entry;
	int			 opt, n;
	const char		*errstr;

	cmd_buffer_init(self, 0);
	data = self->data;

	while ((opt = cmd_getopt(argc, argv, "b:", entry->chflags)) != -1) {
		if (cmd_parse_flags(opt, entry->chflags, &data->chflags) == 0)
			continue;
		switch (opt) {
		case 'b':
			if (data->buffer == -1) {
				n = strtonum(optarg, 0, INT_MAX, &errstr);
				if (errstr != NULL) {
					xasprintf(cause, "buffer %s", errstr);
					goto error;
				}
				data->buffer = n;
			}
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;

	if (cmd_fill_argument(
	    self->entry->flags, &data->arg, &data->arg2, argc, argv) != 0)
		goto usage;
	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

error:
	self->entry->free(self);
	return (-1);
}

void
cmd_buffer_free(struct cmd *self)
{
	struct cmd_buffer_data	*data = self->data;

	if (data->arg != NULL)
		xfree(data->arg);
	if (data->arg2 != NULL)
		xfree(data->arg2);
	xfree(data);
}

size_t
cmd_buffer_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_buffer_data	*data = self->data;
	size_t			 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	off += cmd_print_flags(buf, len, off, data->chflags);
	if (off < len && data->buffer != -1)
		off += xsnprintf(buf + off, len - off, " -b %d", data->buffer);
	if (off < len && data->arg != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->arg);
	if (off < len && data->arg2 != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->arg2);
	return (off);
}
@


1.12
log
@Change from a per-session stack of buffers to one global stack which is
much more convenient and also simplifies lot of code. This renders
copy-buffer useless and makes buffer-limit now a server option.

By Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.11 2009/12/03 22:50:10 nicm Exp $ */
@


1.11
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.10 2009/11/26 21:37:13 nicm Exp $ */
a334 1
	data->target = NULL;
d351 1
a351 1
	while ((opt = cmd_getopt(argc, argv, "b:t:", entry->chflags)) != -1) {
a364 4
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
a389 2
	if (data->target != NULL)
		xfree(data->target);
a408 2
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
@


1.10
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.9 2009/11/13 19:58:32 nicm Exp $ */
d144 1
a144 1
	}		
d228 1
a228 1
 	if (off < len && data->arg != NULL)
d230 1
a230 1
 	if (off < len && data->arg2 != NULL)
d320 1
a320 1
 	if (off < len && data->arg != NULL)
d322 1
a322 1
 	if (off < len && data->arg2 != NULL)
d418 1
a418 1
 	if (off < len && data->arg != NULL)
d420 1
a420 1
 	if (off < len && data->arg2 != NULL)
@


1.9
log
@Tweak a comment and add some spacing.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.8 2009/11/13 19:53:29 nicm Exp $ */
d151 1
d235 1
d327 1
@


1.8
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.7 2009/08/26 18:09:52 nicm Exp $ */
d88 1
a88 1
/* Print the flags supported in chflags. */
@


1.7
log
@Initialise the arg2 pointer properly (also free it when freeing the
others). Fixes crashes with J in malloc_options reported by oga.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.6 2009/08/11 12:53:37 nicm Exp $ */
d26 2
a27 2
int	cmd_getopt(int, char **, const char *, uint64_t);
int	cmd_flags(int, uint64_t, uint64_t *);
d39 1
a39 1
/* Prepend flags from chflags onto flagstr and call getopt. */
d41 1
a41 1
cmd_getopt(int argc, char **argv, const char *flagstr, uint64_t chflags)
d43 1
a43 3
	u_char	ch;
	char	buf[128];
	size_t	len, off;
d45 6
a50 1
	*buf = '\0';
d52 12
a63 2
	len = sizeof buf;
	off = 0;
d65 11
a75 10
	for (ch = 0; ch < 26; ch++) {
		if (chflags & CMD_CHFLAG('a' + ch))
			off += xsnprintf(buf + off, len - off, "%c", 'a' + ch);
		if (chflags & CMD_CHFLAG('A' + ch))
			off += xsnprintf(buf + off, len - off, "%c", 'A' + ch);
	}
	
	strlcat(buf, flagstr, sizeof buf);

	return (getopt(argc, argv, buf));
d78 1
a78 4
/* 
 * If this option is expected (in ichflags), set it in ochflags, otherwise
 * return -1.
 */
d80 1
a80 1
cmd_flags(int opt, uint64_t ichflags, uint64_t *ochflags)
d82 4
a85 13
	u_char	ch;

	for (ch = 0; ch < 26; ch++) {
		if (opt == 'a' + ch && ichflags & CMD_CHFLAG(opt)) {
			(*ochflags) |= CMD_CHFLAG(opt);
			return (0);
		}
		if (opt == 'A' + ch && ichflags & CMD_CHFLAG(opt)) {
			(*ochflags) |= CMD_CHFLAG(opt);
			return (0);
		}
	}
	return (-1);
d100 1
a100 1
		if (chflags & CMD_CHFLAG('a' + ch))
d102 1
a102 1
		if (chflags & CMD_CHFLAG('A' + ch))
d175 1
a175 1
		if (cmd_flags(opt, entry->chflags, &data->chflags) == 0)
d258 1
a258 1
		if (cmd_flags(opt, entry->chflags, &data->chflags) == 0)
d350 1
a350 1
		if (cmd_flags(opt, entry->chflags, &data->chflags) == 0)
@


1.6
log
@Add flags for 1+2 and 2 arguments to the generic target code, use it for
cmd-set-environment/option/window-option and remove the generic options
parsing.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.5 2009/07/30 13:45:56 nicm Exp $ */
d158 1
d208 2
d242 1
d297 2
d333 1
d394 2
@


1.5
log
@Merge pane number into the target specification for pane commands. Instead of
using -p index, a target pane is now addressed with the normal -t window form
but suffixed with a period and a pane index, for example :0.2 or
mysess:mywin.1. An unadorned number such as -t 1 is tried as a pane index in
the current window, if that fails the same rules are followed as for a target
window and the current pane in that window used.

As a side-effect this now means that swap-pane can swap panes between different
windows.

Note that this changes the syntax of the break-pane, clear-history, kill-pane,
resize-pane, select-pane and swap-pane commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.4 2009/07/26 12:58:44 nicm Exp $ */
d29 1
a29 1
int	cmd_fill_argument(int, char **, int, char **);
d107 1
a107 1
cmd_fill_argument(int flags, char **arg, int argc, char **argv)
d110 1
d127 17
d186 2
a187 1
	if (cmd_fill_argument(self->entry->flags, &data->arg, argc, argv) != 0)
d224 2
d270 2
a271 1
	if (cmd_fill_argument(self->entry->flags, &data->arg, argc, argv) != 0)
d312 2
d365 2
a366 1
	if (cmd_fill_argument(self->entry->flags, &data->arg, argc, argv) != 0)
d406 2
a407 87
	return (off);
}

void
cmd_option_init(struct cmd *self, unused int key)
{
	struct cmd_option_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->chflags = 0;
	data->target = NULL;
	data->option = NULL;
	data->value = NULL;
}

int
cmd_option_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_option_data	*data;
	const struct cmd_entry	*entry = self->entry;
	int			 opt;

	/* Don't use the entry version since it may be dependent on key. */
	cmd_option_init(self, 0);
	data = self->data;

	while ((opt = cmd_getopt(argc, argv, "t:", entry->chflags)) != -1) {
		if (cmd_flags(opt, entry->chflags, &data->chflags) == 0)
			continue;
		switch (opt) {
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;

	if (argc == 2) {
		data->option = xstrdup(argv[0]);
		data->value = xstrdup(argv[1]);
	} else if (argc == 1)
		data->option = xstrdup(argv[0]);
	else
		goto usage;
	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
}

void
cmd_option_free(struct cmd *self)
{
	struct cmd_option_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	if (data->option != NULL)
		xfree(data->option);
	if (data->value != NULL)
		xfree(data->value);
	xfree(data);
}

size_t
cmd_option_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_option_data	*data = self->data;
	size_t			 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	off += cmd_print_flags(buf, len, off, data->chflags);
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
 	if (off < len && data->option != NULL)
		off += xsnprintf(buf + off, len - off, " %s", data->option);
 	if (off < len && data->value != NULL)
		off += xsnprintf(buf + off, len - off, " %s", data->value);
@


1.4
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.3 2009/07/13 23:11:35 nicm Exp $ */
a467 90
	return (off);
}

void
cmd_pane_init(struct cmd *self, unused int key)
{
	struct cmd_pane_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->chflags = 0;
	data->target = NULL;
	data->arg = NULL;
	data->pane = -1;
}

int
cmd_pane_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_pane_data	*data;
	const struct cmd_entry	*entry = self->entry;
	int			 opt, n;
	const char		*errstr;

	/* Don't use the entry version since it may be dependent on key. */
	cmd_pane_init(self, 0);
	data = self->data;

	while ((opt = cmd_getopt(argc, argv, "p:t:", entry->chflags)) != -1) {
		if (cmd_flags(opt, entry->chflags, &data->chflags) == 0)
			continue;
		switch (opt) {
		case 'p':
			if (data->pane == -1) {
				n = strtonum(optarg, 0, INT_MAX, &errstr);
				if (errstr != NULL) {
					xasprintf(cause, "pane %s", errstr);
					goto error;
				}
				data->pane = n;
			}
			break;
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;

	if (cmd_fill_argument(self->entry->flags, &data->arg, argc, argv) != 0)
		goto usage;
	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

error:
	self->entry->free(self);
	return (-1);
}

void
cmd_pane_free(struct cmd *self)
{
	struct cmd_pane_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	if (data->arg != NULL)
		xfree(data->arg);
	xfree(data);
}

size_t
cmd_pane_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_pane_data	*data = self->data;
	size_t			 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	off += cmd_print_flags(buf, len, off, data->chflags);
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
 	if (off < len && data->arg != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->arg);
@


1.3
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.2 2009/07/11 19:14:56 nicm Exp $ */
a179 21
cmd_target_send(struct cmd *self, struct buffer *b)
{
	struct cmd_target_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->target);
	cmd_send_string(b, data->arg);
}

void
cmd_target_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_target_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->target = cmd_recv_string(b);
	data->arg = cmd_recv_string(b);
}

void
a260 23
cmd_srcdst_send(struct cmd *self, struct buffer *b)
{
	struct cmd_srcdst_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->src);
	cmd_send_string(b, data->dst);
	cmd_send_string(b, data->arg);
}

void
cmd_srcdst_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_srcdst_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->src = cmd_recv_string(b);
	data->dst = cmd_recv_string(b);
	data->arg = cmd_recv_string(b);
}

void
a353 21
cmd_buffer_send(struct cmd *self, struct buffer *b)
{
	struct cmd_buffer_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->target);
	cmd_send_string(b, data->arg);
}

void
cmd_buffer_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_buffer_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->target = cmd_recv_string(b);
	data->arg = cmd_recv_string(b);
}

void
a438 23
cmd_option_send(struct cmd *self, struct buffer *b)
{
	struct cmd_option_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->target);
	cmd_send_string(b, data->option);
	cmd_send_string(b, data->value);
}

void
cmd_option_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_option_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->target = cmd_recv_string(b);
	data->option = cmd_recv_string(b);
	data->value = cmd_recv_string(b);
}

void
a529 21
}

void
cmd_pane_send(struct cmd *self, struct buffer *b)
{
	struct cmd_pane_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->target);
	cmd_send_string(b, data->arg);
}

void
cmd_pane_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_pane_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->target = cmd_recv_string(b);
	data->arg = cmd_recv_string(b);
@


1.2
log
@When pasting, translate \n into \r. This matches xterm and putty's behaviour,
and makes emacs happy when pasting into some modes. A new -r (raw) flag to
paste-buffer pastes without the translation.

From Kalle Olavi Niemitalo, thanks!
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-generic.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d26 3
a28 6
#define CMD_FLAGS "adDgkruU"
#define CMD_FLAGMASK (CMD_AFLAG|CMD_DFLAG|CMD_BIGDFLAG|CMD_GFLAG|CMD_KFLAG| \
    CMD_RFLAG|CMD_UFLAG|CMD_BIGUFLAG)

int	cmd_do_flags(int, int, int *);
size_t	cmd_print_flags(char *, size_t, size_t, int);
d39 1
d41 1
a41 1
cmd_do_flags(int opt, int iflags, int *oflags)
d43 33
a75 28
	switch (opt) {
	case 'a':
		if (iflags & CMD_AFLAG) {
			(*oflags) |= CMD_AFLAG;
			return (0);
		}
		return (-1);
	case 'd':
		if (iflags & CMD_DFLAG) {
			(*oflags) |= CMD_DFLAG;
			return (0);
		}
		return (-1);
	case 'D':
		if (iflags & CMD_BIGDFLAG) {
			(*oflags) |= CMD_BIGDFLAG;
			return (0);
		}
		return (-1);
	case 'g':
		if (iflags & CMD_GFLAG) {
			(*oflags) |= CMD_GFLAG;
			return (0);
		}
		return (-1);
	case 'k':
		if (iflags & CMD_KFLAG) {
			(*oflags) |= CMD_KFLAG;
d78 2
a79 10
		return (-1);
	case 'r':
		if (iflags & CMD_RFLAG) {
			(*oflags) |= CMD_RFLAG;
			return (0);
		}
		return (-1);
	case 'u':
		if (iflags & CMD_UFLAG) {
			(*oflags) |= CMD_UFLAG;
a81 7
		return (-1);
	case 'U':
		if (iflags & CMD_BIGUFLAG) {
			(*oflags) |= CMD_BIGUFLAG;
			return (0);
		}
		return (-1);
d83 1
a83 1
	return (1);
d86 1
d88 1
a88 1
cmd_print_flags(char *buf, size_t len, size_t off, int flags)
d90 1
d93 1
a93 1
	if ((flags & CMD_FLAGMASK) == 0)
d96 7
a102 16
	if (off < len && flags & CMD_AFLAG)
		off += xsnprintf(buf + off, len - off, "a");
	if (off < len && flags & CMD_BIGDFLAG)
		off += xsnprintf(buf + off, len - off, "D");
	if (off < len && flags & CMD_DFLAG)
		off += xsnprintf(buf + off, len - off, "d");
	if (off < len && flags & CMD_GFLAG)
		off += xsnprintf(buf + off, len - off, "g");
	if (off < len && flags & CMD_KFLAG)
		off += xsnprintf(buf + off, len - off, "k");
	if (off < len && flags & CMD_RFLAG)
		off += xsnprintf(buf + off, len - off, "r");
	if (off < len && flags & CMD_UFLAG)
		off += xsnprintf(buf + off, len - off, "u");
	if (off < len && flags & CMD_BIGUFLAG)
		off += xsnprintf(buf + off, len - off, "U");
d137 1
a137 1
	data->flags = 0;
d146 1
d153 2
a154 5
	while ((opt = getopt(argc, argv, CMD_FLAGS "t:")) != -1) {
		switch (cmd_do_flags(opt, self->entry->flags, &data->flags)) {
		case -1:
			goto usage;
		case 0:
a155 1
		}
d221 1
a221 1
	off += cmd_print_flags(buf, len, off, data->flags);
d235 1
a235 1
	data->flags = 0;
d245 1
d251 2
a252 5
	while ((opt = getopt(argc, argv, CMD_FLAGS "s:t:")) != -1) {
		switch (cmd_do_flags(opt, self->entry->flags, &data->flags)) {
		case -1:
			goto usage;
		case 0:
a253 1
		}
d327 1
a327 1
	off += cmd_print_flags(buf, len, off, data->flags);
d343 1
a343 1
	data->flags = 0;
d353 1
d360 2
a361 5
	while ((opt = getopt(argc, argv, CMD_FLAGS "b:t:")) != -1) {
		switch (cmd_do_flags(opt, self->entry->flags, &data->flags)) {
		case -1:
			goto usage;
		case 0:
a362 1
		}
d439 1
a439 1
	off += cmd_print_flags(buf, len, off, data->flags);
d455 1
a455 1
	data->flags = 0;
d465 1
d472 2
a473 5
	while ((opt = getopt(argc, argv, CMD_FLAGS "t:")) != -1) {
		switch (cmd_do_flags(opt, self->entry->flags, &data->flags)) {
		case -1:
			goto usage;
		case 0:
a474 1
		}
d549 1
a549 1
	off += cmd_print_flags(buf, len, off, data->flags);
d565 1
a565 1
	data->flags = 0;
d575 1
d583 2
a584 5
	while ((opt = getopt(argc, argv, CMD_FLAGS "p:t:")) != -1) {
		switch (cmd_do_flags(opt, self->entry->flags, &data->flags)) {
		case -1:
			goto usage;
		case 0:
a585 1
		}
d662 1
a662 1
	off += cmd_print_flags(buf, len, off, data->flags);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d26 1
a26 1
#define CMD_FLAGS "adDgkuU"
d28 1
a28 1
    CMD_UFLAG|CMD_BIGUFLAG)
d76 6
d116 2
@

