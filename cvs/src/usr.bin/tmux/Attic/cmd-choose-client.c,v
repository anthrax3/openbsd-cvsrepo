head	1.34;
access;
symbols
	OPENBSD_6_1:1.31.0.4
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.34
date	2017.05.30.21.44.59;	author nicm;	state dead;
branches;
next	1.33;
commitid	ai2b3hkAsUowPSMm;

1.33
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.32;
commitid	RXMp6wwG5a5Y82bo;

1.32
date	2017.04.05.10.49.46;	author nicm;	state Exp;
branches;
next	1.31;
commitid	1mjoRYvghWl25dW0;

1.31
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.30;
commitid	pxm6osuE99zELpkU;

1.30
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.29;
commitid	TaZ3kOtGiWwKofka;

1.29
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.28;
commitid	P3qmSOx6KrDBsb0c;

1.28
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.27;
commitid	rE682EC14v4gpeFy;

1.27
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.26;
commitid	gsQkQsSyBCSmU9ax;

1.26
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.25;
commitid	uzMkp8Z4FE6WB6s6;

1.25
date	2015.10.25.22.29.17;	author nicm;	state Exp;
branches;
next	1.24;
commitid	lyC76bFrgfVLq7ku;

1.24
date	2015.04.27.16.25.57;	author nicm;	state Exp;
branches;
next	1.23;
commitid	0WBWxxZyxaAFVhmn;

1.23
date	2015.04.24.23.17.11;	author nicm;	state Exp;
branches;
next	1.22;
commitid	iy4fcaIoXzxOx84I;

1.22
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.21;
commitid	b1G1TVWY7l4KyoY6;

1.21
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.20;
commitid	RV1NOSXD1mUR8LDP;

1.20
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.19;
commitid	Gq8hgMoG3t1Wy1Zv;

1.19
date	2013.10.10.12.00.18;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.25.10.04.44;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.21.16.09.59;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.21.16.09.17;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.21.16.08.24;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.17.20.30.43;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2012.06.25.14.27.25;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.25.14.08.55;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.16.10.00.52;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.13.19.53.28;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.07.21.01.50;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.25.13.32.14;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.25.12.18.51;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Rewrite of choose mode, both to simplify and tidy the code and to add
some modern features.

Now the common code is in mode-tree.c, which provides an API used by the
three modes now separated into window-{buffer,client,tree}.c. Buffer
mode shows buffers, client mode clients and tree mode a tree of
sessions, windows and panes.

Each mode has a common set of key bindings plus a few that are specific
to the mode. Other changes are:

- each mode has a preview pane: for buffers this is the buffer content
  (very useful), for others it is a preview of the pane;

- items may be sorted in different ways ('O' key);

- multiple items may be tagged and an operation applied to all of them
  (for example, to delete multiple buffers at once);

- in tree mode a command may be run on the selected item (session,
  window, pane) or on tagged items (key ':');

- displayed items may be filtered in tree mode by using a format (this
  is used to implement find-window) (key 'f');

- the custom format (-F) for the display is no longer available;

- shortcut keys change from 0-9, a-z, A-Z which was always a bit weird
  with keys used for other uses to 0-9, M-a to M-z.

Now that the code is simpler, other improvements will come later.

Primary key bindings for each mode are documented under the commands in
the man page (choose-buffer, choose-client, choose-tree).

Parts written by Thomas Adam.
@
text
@/* $OpenBSD: cmd-choose-client.c,v 1.33 2017/04/22 10:22:39 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <stdlib.h>

#include "tmux.h"

/*
 * Enter choice mode to choose a client.
 */

#define CHOOSE_CLIENT_TEMPLATE					\
	"#{client_name}: #{session_name} "			\
	"[#{client_width}x#{client_height} #{client_termname}]"	\
	"#{?client_utf8, (utf8),}#{?client_readonly, (ro),} "	\
	"(last used #{t:client_activity})"

static enum cmd_retval	cmd_choose_client_exec(struct cmd *,
			    struct cmdq_item *);

static void	cmd_choose_client_callback(struct window_choose_data *);

const struct cmd_entry cmd_choose_client_entry = {
	.name = "choose-client",
	.alias = NULL,

	.args = { "F:t:", 0, 1 },
	.usage = CMD_TARGET_WINDOW_USAGE " [-F format] [template]",

	.target = { 't', CMD_FIND_WINDOW, 0 },

	.flags = 0,
	.exec = cmd_choose_client_exec
};

struct cmd_choose_client_data {
	struct client	*client;
};

static enum cmd_retval
cmd_choose_client_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args			*args = self->args;
	struct client			*c = cmd_find_client(item, NULL, 1);
	struct client			*c1;
	struct window_choose_data	*cdata;
	struct winlink			*wl = item->target.wl;
	const char			*template;
	char				*action;
	u_int			 	 idx, cur;

	if (c == NULL) {
		cmdq_error(item, "no client available");
		return (CMD_RETURN_ERROR);
	}

	if (window_pane_set_mode(wl->window->active, &window_choose_mode) != 0)
		return (CMD_RETURN_NORMAL);

	if ((template = args_get(args, 'F')) == NULL)
		template = CHOOSE_CLIENT_TEMPLATE;

	if (args->argc != 0)
		action = xstrdup(args->argv[0]);
	else
		action = xstrdup("detach-client -t '%%'");

	cur = idx = 0;
	TAILQ_FOREACH(c1, &clients, entry) {
		if (c1->session == NULL)
			continue;
		if (c1 == item->client)
			cur = idx;

		cdata = window_choose_data_create(TREE_OTHER, c, c->session);
		cdata->idx = idx;

		cdata->ft_template = xstrdup(template);
		format_add(cdata->ft, "line", "%u", idx);
		format_defaults(cdata->ft, c1, NULL, NULL, NULL);

		cdata->command = cmd_template_replace(action, c1->name, 1);

		window_choose_add(wl->window->active, cdata);

		idx++;
	}
	free(action);

	window_choose_ready(wl->window->active, cur,
	    cmd_choose_client_callback);

	return (CMD_RETURN_NORMAL);
}

static void
cmd_choose_client_callback(struct window_choose_data *cdata)
{
	struct client  	*c;
	u_int		 idx;

	if (cdata == NULL)
		return;
	if (cdata->start_client->flags & CLIENT_DEAD)
		return;

	idx = 0;
	TAILQ_FOREACH(c, &clients, entry) {
		if (idx == cdata->idx)
			break;
		idx++;
	}
	if (c == NULL || c->session == NULL)
		return;

	window_choose_data_run(cdata);
}
@


1.33
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.32 2017/04/05 10:49:46 nicm Exp $ */
@


1.32
log
@Give each client a name. This defaults to the tty name as before but
falls back to an alternative if the tty name is not available. This is
clearer than overloading the client ttyname member and allows us to
remove the path stored in the tty struct, it should always be the same
as the client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.31 2016/10/16 19:04:05 nicm Exp $ */
d48 1
a48 1
	.tflag = CMD_WINDOW,
d62 1
a62 1
	struct client			*c = item->state.c;
d65 1
a65 1
	struct winlink			*wl = item->state.tflag.wl;
@


1.31
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.30 2016/10/10 21:51:39 nicm Exp $ */
d31 1
a31 1
	"#{client_tty}: #{session_name} "			\
d88 1
a88 1
		if (c1->session == NULL || c1->tty.path == NULL)
d100 1
a100 1
		cdata->command = cmd_template_replace(action, c1->tty.path, 1);
@


1.30
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.29 2016/01/19 15:59:12 nicm Exp $ */
d36 2
a37 1
static enum cmd_retval	 cmd_choose_client_exec(struct cmd *, struct cmd_q *);
d59 1
a59 1
cmd_choose_client_exec(struct cmd *self, struct cmd_q *cmdq)
d62 1
a62 1
	struct client			*c = cmdq->state.c;
d65 1
a65 1
	struct winlink			*wl = cmdq->state.tflag.wl;
d71 1
a71 1
		cmdq_error(cmdq, "no client available");
d90 1
a90 1
		if (c1 == cmdq->client)
@


1.29
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.28 2015/12/14 00:31:54 nicm Exp $ */
d36 1
a36 1
enum cmd_retval	 cmd_choose_client_exec(struct cmd *, struct cmd_q *);
d38 1
a38 1
void	cmd_choose_client_callback(struct window_choose_data *);
d57 1
a57 1
enum cmd_retval
d113 1
a113 1
void
@


1.28
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.27 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.27
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.26 2015/12/13 14:32:38 nicm Exp $ */
d47 3
a49 1
	.flags = CMD_WINDOW_T,
@


1.26
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.25 2015/10/25 22:29:17 nicm Exp $ */
d41 8
a48 5
	"choose-client", NULL,
	"F:t:", 0, 1,
	CMD_TARGET_WINDOW_USAGE " [-F format] [template]",
	CMD_WINDOW_T,
	cmd_choose_client_exec
@


1.25
log
@Extend the modifiers allowed before formats: as well as the existing
#{=10:...}  length limit, add #{t:...} to convert a time_t format to a
string, #{b:...} for basename and #{d:...} for dirname. Remove all the
foo_string time formats as they can now be replaced by "t:", for example
#{window_activity_string} becomes #{t:window_activity}.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.24 2015/04/27 16:25:57 nicm Exp $ */
d44 1
a44 1
	0,
d56 1
a56 1
	struct client			*c;
d59 1
a59 1
	struct winlink			*wl;
d64 1
a64 1
	if ((c = cmd_find_client(cmdq, NULL, 1)) == NULL) {
a67 3

	if ((wl = cmd_find_window(cmdq, args_get(args, 't'), NULL)) == NULL)
		return (CMD_RETURN_ERROR);
@


1.24
log
@Rewrite of the target resolution internals to be simpler and more
consistent but with much less duplication, but keeping the same internal
API. Also adds more readable aliases for some of the special tokens used
in targets (eg "{start}" instead of "^"). Some behaviours may have
changed, for example prefix matches now happen before fnmatch.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.23 2015/04/24 23:17:11 nicm Exp $ */
d34 1
a34 1
	"(last used #{client_activity_string})"
@


1.23
log
@Convert clients list into a TAILQ.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.22 2015/02/05 10:29:43 nicm Exp $ */
d64 1
a64 1
	if ((c = cmd_current_client(cmdq)) == NULL) {
@


1.22
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.21 2014/10/20 23:35:28 nicm Exp $ */
d62 1
a62 1
	u_int			 	 i, idx, cur;
d84 2
a85 3
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c1 = ARRAY_ITEM(&clients, i);
		if (c1 == NULL || c1->session == NULL || c1->tty.path == NULL)
a88 1
		idx++;
d91 1
a91 1
		cdata->idx = i;
d94 1
a94 1
		format_add(cdata->ft, "line", "%u", i);
d100 2
d115 1
d122 6
a127 3
	if (cdata->idx > ARRAY_LENGTH(&clients) - 1)
		return;
	c = ARRAY_ITEM(&clients, cdata->idx);
@


1.21
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.20 2014/10/20 22:29:25 nicm Exp $ */
d97 1
a97 2
		format_session(cdata->ft, c1->session);
		format_client(cdata->ft, c1);
@


1.20
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.19 2013/10/10 12:00:18 nicm Exp $ */
d29 6
@


1.19
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.18 2013/03/25 10:04:44 nicm Exp $ */
a38 1
	NULL,
@


1.18
log
@tty.path can be NULL, don't dereference it. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.17 2013/03/24 09:54:10 nicm Exp $ */
a38 1
	NULL,
@


1.17
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.16 2013/03/21 16:09:59 nicm Exp $ */
d82 1
a82 1
		if (c1 == NULL || c1->session == NULL)
@


1.16
log
@Allow choose commands to be used outside tmux, so long as at least one
client is attached.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.15 2013/03/21 16:09:17 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_choose_client_exec(struct cmd *, struct cmd_ctx *);
d49 1
a49 1
cmd_choose_client_exec(struct cmd *self, struct cmd_ctx *ctx)
d60 2
a61 2
	if ((c = cmd_current_client(ctx)) == NULL) {
		ctx->error(ctx, "no client available");
d65 1
a65 1
	if ((wl = cmd_find_window(ctx, args_get(args, 't'), NULL)) == NULL)
d84 1
a84 1
		if (c1 == ctx->curclient)
@


1.15
log
@Remove free callback for window_choose_data objects.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.14 2013/03/21 16:08:24 nicm Exp $ */
d60 2
a61 2
	if (ctx->curclient == NULL) {
		ctx->error(ctx, "must be run interactively");
a63 1
	c = ctx->curclient;
@


1.14
log
@Miscellaneous tidying of choose API, including:

- rename client and session to start_client and start_session in
  window_choose_data struct. also add TREE_OTHER define and reorder
  the struct
- rename window_choose_ctx to window_choose_data_run
- don't pass a cmd_ctx into window_choose_create (will let it use a
  different client later). instead take type, session, client
- add window_choose_data_free and use it to dispose of wcd rather than
  each cmd-*.c doing it individually
- change so ref counting is done by wcd_add and wcd_free rather than
  callers
- also add a ref to tree_session
- all the callbacks except choose-client and find-window are the same so
  remove them and add window_choose_default_callback
- reorder/rename some other bits and pieces for tidyness
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.13 2013/01/17 20:30:43 nicm Exp $ */
d104 1
a104 1
	    cmd_choose_client_callback, NULL);
@


1.13
log
@Do not allow cursor colours to be set beginning with ? as that will
report the colour, from Hayaki Saito.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.12 2012/08/14 08:51:53 nicm Exp $ */
a32 1
void	cmd_choose_client_free(struct window_choose_data *);
d52 2
a55 1
	struct client			*c;
d64 1
d82 2
a83 2
		c = ARRAY_ITEM(&clients, i);
		if (c == NULL || c->session == NULL)
d85 1
a85 1
		if (c == ctx->curclient)
d89 1
a89 1
		cdata = window_choose_data_create(ctx);
a90 1
		cdata->client->references++;
d94 2
a95 2
		format_session(cdata->ft, c->session);
		format_client(cdata->ft, c);
d97 1
a97 1
		cdata->command = cmd_template_replace(action, c->tty.path, 1);
d103 2
a104 2
	window_choose_ready(wl->window->active,
	    cur, cmd_choose_client_callback, cmd_choose_client_free);
d116 1
a116 1
	if (cdata->client->flags & CLIENT_DEAD)
d125 1
a125 15
	window_choose_ctx(cdata);
}

void
cmd_choose_client_free(struct window_choose_data *cdata)
{
	if (cdata == NULL)
		return;

	cdata->client->references--;

	free(cdata->ft_template);
	free(cdata->command);
	format_free(cdata->ft);
	free(cdata);
@


1.12
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.11 2012/07/11 07:10:15 nicm Exp $ */
a46 1
	char   		*template;
@


1.11
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.10 2012/07/10 11:53:01 nicm Exp $ */
d73 1
a73 1
		template = DEFAULT_CLIENT_TEMPLATE;
@


1.10
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.9 2012/06/25 14:27:25 nicm Exp $ */
d30 1
a30 1
int	cmd_choose_client_exec(struct cmd *, struct cmd_ctx *);
d50 1
a50 1
int
d63 1
a63 1
		return (-1);
d67 1
a67 1
		return (-1);
d70 1
a70 1
		return (0);
d107 1
a107 1
	return (0);
@


1.9
log
@Provide common helper function for adding windows and sessions to choose
lists and expand %% in command before using it rather than at callback
time. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.8 2012/06/25 14:08:55 nicm Exp $ */
d22 1
d102 1
a102 1
	xfree(action);
d137 2
a138 2
	xfree(cdata->ft_template);
	xfree(cdata->command);
d140 1
a140 1
	xfree(cdata);
@


1.8
log
@Clean up and simplify the choose mode code, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.7 2012/05/22 11:35:37 nicm Exp $ */
d57 1
d74 5
a88 5
		if (args->argc != 0)
			cdata->action = xstrdup(args->argv[0]);
		else
			cdata->action = xstrdup("detach-client -t '%%'");

d97 2
d101 1
a124 1
	xasprintf(&cdata->raw_format, "%s", c->tty.path);
d137 1
a137 1
	xfree(cdata->action);
@


1.7
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.6 2011/08/16 10:00:52 nicm Exp $ */
d31 2
a32 2
void	cmd_choose_client_callback(void *, int);
void	cmd_choose_client_free(void *);
d53 1
a53 2
	struct cmd_choose_client_data	*cdata;
	struct format_tree		*ft;
a55 1
	char				*line;
d82 13
a94 8
		ft = format_create();
		format_add(ft, "line", "%u", i);
		format_session(ft, c->session);
		format_client(ft, c);

		line = format_expand(ft, template);
		window_choose_add(wl->window->active, i, "%s", line);
		xfree(line);
d96 1
a96 1
		format_free(ft);
a98 8
	cdata = xmalloc(sizeof *cdata);
	if (args->argc != 0)
		cdata->template = xstrdup(args->argv[0]);
	else
		cdata->template = xstrdup("detach-client -t '%%'");
	cdata->client = ctx->curclient;
	cdata->client->references++;

d100 1
a100 1
	    cur, cmd_choose_client_callback, cmd_choose_client_free, cdata);
d106 1
a106 1
cmd_choose_client_callback(void *data, int idx)
d108 1
a108 5
	struct cmd_choose_client_data	*cdata = data;
	struct client  			*c;
	struct cmd_list			*cmdlist;
	struct cmd_ctx			 ctx;
	char				*template, *cause;
d110 1
a110 1
	if (idx == -1)
d115 1
a115 1
	if ((u_int) idx > ARRAY_LENGTH(&clients) - 1)
d117 1
a117 1
	c = ARRAY_ITEM(&clients, idx);
a119 15
	template = cmd_template_replace(cdata->template, c->tty.path, 1);

	if (cmd_string_parse(template, &cmdlist, &cause) != 0) {
		if (cause != NULL) {
			*cause = toupper((u_char) *cause);
			status_message_set(c, "%s", cause);
			xfree(cause);
		}
		xfree(template);
		return;
	}
	xfree(template);

	ctx.msgdata = NULL;
	ctx.curclient = cdata->client;
d121 2
a122 8
	ctx.error = key_bindings_error;
	ctx.print = key_bindings_print;
	ctx.info = key_bindings_info;

	ctx.cmdclient = NULL;

	cmd_list_exec(cmdlist, &ctx);
	cmd_list_free(cmdlist);
d126 1
a126 1
cmd_choose_client_free(void *data)
d128 2
a129 1
	struct cmd_choose_client_data	*cdata = data;
d132 4
a135 1
	xfree(cdata->template);
@


1.6
log
@Add a -r flag to switch-client to toggle the client read-only flag. From
Johan Commelin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.5 2011/01/04 00:42:46 nicm Exp $ */
d36 2
a37 2
	"t:", 0, 1,
	CMD_TARGET_WINDOW_USAGE " [template]",
d54 1
d57 2
d72 3
d84 10
a93 6
		window_choose_add(wl->window->active, i,
		    "%s: %s [%ux%u %s]%s%s", c->tty.path,
		    c->session->name, c->tty.sx, c->tty.sy,
		    c->tty.termname,
		    c->tty.flags & TTY_UTF8 ? " (utf8)" : "",
		    c->flags & CLIENT_READONLY ? " (ro)" : "");
@


1.5
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.4 2009/11/13 19:53:28 nicm Exp $ */
d79 1
a79 1
		    "%s: %s [%ux%u %s]%s", c->tty.path,
d81 3
a83 1
		    c->tty.termname, c->tty.flags & TTY_UTF8 ? " (utf8)" : "");
@


1.4
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.3 2009/09/07 21:01:50 nicm Exp $ */
d36 1
d38 4
a41 6
	CMD_ARG01, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_choose_client_exec,
	cmd_target_free,
	cmd_target_print
d52 1
a52 1
	struct cmd_target_data		*data = self->data;
d63 1
a63 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
d85 2
a86 2
	if (data->arg != NULL)
		cdata->template = xstrdup(data->arg);
@


1.3
log
@Reference count clients and sessions rather than relying on a saved index for
cmd-choose-*.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.2 2009/08/25 13:32:14 nicm Exp $ */
d37 1
a37 1
	CMD_ARG01, 0,
@


1.2
log
@These should #include <ctype.h>.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-client.c,v 1.1 2009/08/25 12:18:51 nicm Exp $ */
d46 1
a46 1
	u_int		 client;
d90 2
a91 1
	cdata->client = server_client_index(ctx->curclient);
d103 1
a103 1
	struct client  			*c, *c2;
d110 1
a110 1
	if (cdata->client > ARRAY_LENGTH(&clients) - 1)
a111 1
	c = ARRAY_ITEM(&clients, cdata->client);
d115 2
a116 2
	c2 = ARRAY_ITEM(&clients, idx);
	if (c2 == NULL || c2->session == NULL)
d118 1
a118 1
	template = cmd_template_replace(cdata->template, c2->tty.path, 1);
d132 1
a132 1
	ctx.curclient = c;
d149 1
@


1.1
log
@Add a choose-client command and extend choose-{session,window} to accept a
template. After a choice is made, %% (or %1) in the template is replaced by the
name of the session, window or client suitable for -t and the result executed
as a command. So, for example, "choose-window "killw -t '%%'"" will kill the
selected window.

The defaults if no template is given are (as now) select-window for
choose-window, switch-client for choose-session, and detach-client for
choose-client (now bound to D).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-choose-session.c,v 1.4 2009/07/26 12:58:44 nicm Exp $ */
d20 2
@

