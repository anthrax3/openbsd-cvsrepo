head	1.18;
access;
symbols
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2011.01.04.02.03.41;	author nicm;	state dead;
branches;
next	1.17;

1.17
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.12.03.17.44.02;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.19.16.22.10;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.09.07.27.00;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.09.22.12.38.10;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.11.12.53.37;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.04.18.45.57;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.30.07.04.50;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.20.09.15.18;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.15.07.50.34;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.14.20.20.04;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.07.19.49.19;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.25.06.00.45;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Now that parsing is common, merge some of the small, related commands
together to use the same code.

Also add some arguments (such as -n and -p) to some commands to match
existing commands.
@
text
@/* $OpenBSD: cmd-set-window-option.c,v 1.17 2011/01/04 00:42:47 nicm Exp $ */

/*
 * Copyright (c) 2008 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include "tmux.h"

/*
 * Set a window option. This is just an alias for set-option -w.
 */

int	cmd_set_window_option_exec(struct cmd *, struct cmd_ctx *);

const struct cmd_entry cmd_set_window_option_entry = {
	"set-window-option", "setw",
	"agt:u", 1, 2,
	"[-agu] " CMD_TARGET_WINDOW_USAGE " option [value]",
	0,
	NULL,
	NULL,
	cmd_set_window_option_exec
};

int
cmd_set_window_option_exec(struct cmd *self, struct cmd_ctx *ctx)
{
	struct args	*args = self->args;

	args_set(args, 'w', NULL);
	return (cmd_set_option_entry.exec(self, ctx));
}
@


1.17
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.16 2009/12/03 17:44:02 nicm Exp $ */
@


1.16
log
@Eliminate duplicate code and ease the passage for server-wide options by adding
a -w flag to set-option and show-options and making setw and showw aliases to
set -w and show -w.

Note: setw and showw are still there, but now aliases for set -w and show -w.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.15 2009/11/19 16:22:10 nicm Exp $ */
d31 1
d33 1
a33 1
	CMD_ARG12, "agu",
d35 2
a36 4
	cmd_target_parse,
	cmd_set_window_option_exec,
	cmd_target_free,
	cmd_target_print
d42 1
a42 1
	struct cmd_target_data		*data = self->data;
d44 1
a44 1
	cmd_set_flag(&data->chflags, 'w');
@


1.15
log
@Two new options, window-status-format and window-status-current-format, which
allow the format of each window in the status line window list to be controlled
using similar # sequences as status-left/right.

This diff also moves part of the way towards UTF-8 support in window names but
it isn't quite there yet.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.14 2009/11/13 19:53:29 nicm Exp $ */
a20 3
#include <stdlib.h>
#include <string.h>

d24 1
a24 1
 * Set a window option.
a39 38
const char *set_option_mode_keys_list[] = {
	"emacs", "vi", NULL
};
const char *set_option_clock_mode_style_list[] = {
	"12", "24", NULL
};
const struct set_option_entry set_window_option_table[] = {
	{ "aggressive-resize", SET_OPTION_FLAG, 0, 0, NULL },
	{ "automatic-rename", SET_OPTION_FLAG, 0, 0, NULL },
	{ "clock-mode-colour", SET_OPTION_COLOUR, 0, 0, NULL },
	{ "clock-mode-style",
	  SET_OPTION_CHOICE, 0, 0, set_option_clock_mode_style_list },
	{ "force-height", SET_OPTION_NUMBER, 0, INT_MAX, NULL },
	{ "force-width", SET_OPTION_NUMBER, 0, INT_MAX, NULL },
	{ "main-pane-height", SET_OPTION_NUMBER, 1, INT_MAX, NULL },
	{ "main-pane-width", SET_OPTION_NUMBER, 1, INT_MAX, NULL },
	{ "mode-attr", SET_OPTION_ATTRIBUTES, 0, 0, NULL },
	{ "mode-bg", SET_OPTION_COLOUR, 0, 0, NULL },
	{ "mode-fg", SET_OPTION_COLOUR, 0, 0, NULL },
	{ "mode-keys", SET_OPTION_CHOICE, 0, 0, set_option_mode_keys_list },
	{ "mode-mouse", SET_OPTION_FLAG, 0, 0, NULL },
	{ "monitor-activity", SET_OPTION_FLAG, 0, 0, NULL },
	{ "monitor-content", SET_OPTION_STRING, 0, 0, NULL },
	{ "remain-on-exit", SET_OPTION_FLAG, 0, 0, NULL },
	{ "synchronize-panes", SET_OPTION_FLAG, 0, 0, NULL },
	{ "utf8", SET_OPTION_FLAG, 0, 0, NULL },
	{ "window-status-attr", SET_OPTION_ATTRIBUTES, 0, 0, NULL },
	{ "window-status-bg", SET_OPTION_COLOUR, 0, 0, NULL },
	{ "window-status-current-attr", SET_OPTION_ATTRIBUTES, 0, 0, NULL },
	{ "window-status-current-bg", SET_OPTION_COLOUR, 0, 0, NULL },
	{ "window-status-current-fg", SET_OPTION_COLOUR, 0, 0, NULL },
	{ "window-status-current-format", SET_OPTION_STRING, 0, 0, NULL },
	{ "window-status-fg", SET_OPTION_COLOUR, 0, 0, NULL },
	{ "window-status-format", SET_OPTION_STRING, 0, 0, NULL },
	{ "xterm-keys", SET_OPTION_FLAG, 0, 0, NULL },
	{ NULL, 0, 0, 0, NULL }
};

a43 117
	struct winlink			*wl;
	struct client			*c;
	struct options			*oo;
	const struct set_option_entry   *entry, *opt;
	struct jobs			*jobs;
	struct job			*job, *nextjob;
	u_int				 i;
	int				 try_again;

	if (cmd_check_flag(data->chflags, 'g'))
		oo = &global_w_options;
	else {
		if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
			return (-1);
		oo = &wl->window->options;
	}

	if (*data->arg == '\0') {
		ctx->error(ctx, "invalid option");
		return (-1);
	}

	entry = NULL;
	for (opt = set_window_option_table; opt->name != NULL; opt++) {
		if (strncmp(opt->name, data->arg, strlen(data->arg)) != 0)
			continue;
		if (entry != NULL) {
			ctx->error(ctx, "ambiguous option: %s", data->arg);
			return (-1);
		}
		entry = opt;

		/* Bail now if an exact match. */
		if (strcmp(entry->name, data->arg) == 0)
			break;
	}
	if (entry == NULL) {
		ctx->error(ctx, "unknown option: %s", data->arg);
		return (-1);
	}

	if (cmd_check_flag(data->chflags, 'u')) {
		if (cmd_check_flag(data->chflags, 'g')) {
			ctx->error(ctx,
			    "can't unset global option: %s", entry->name);
			return (-1);
		}
		if (data->arg2 != NULL) {
			ctx->error(ctx,
			    "value passed to unset option: %s", entry->name);
			return (-1);
		}

		options_remove(oo, entry->name);
		ctx->info(ctx, "unset option: %s", entry->name);
	} else {
		switch (entry->type) {
		case SET_OPTION_STRING:
			set_option_string(ctx, oo, entry,
			    data->arg2, cmd_check_flag(data->chflags, 'a'));
			break;
		case SET_OPTION_NUMBER:
			set_option_number(ctx, oo, entry, data->arg2);
			break;
		case SET_OPTION_KEYS:
			set_option_keys(ctx, oo, entry, data->arg2);
			break;
		case SET_OPTION_COLOUR:
			set_option_colour(ctx, oo, entry, data->arg2);
			break;
		case SET_OPTION_ATTRIBUTES:
			set_option_attributes(ctx, oo, entry, data->arg2);
			break;
		case SET_OPTION_FLAG:
			set_option_flag(ctx, oo, entry, data->arg2);
			break;
		case SET_OPTION_CHOICE:
			set_option_choice(ctx, oo, entry, data->arg2);
			break;
		}
	}

	recalculate_sizes();
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
		if (c != NULL && c->session != NULL)
			server_redraw_client(c);
	}

	/* 
	 * Special-case: kill all persistent jobs if window-status-format has
	 * changed. Persistent jobs are only used by the status line at the
	 * moment so this works XXX.
	 */
	if (strcmp(entry->name, "window-status-format") == 0) {
		for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
			c = ARRAY_ITEM(&clients, i);
			if (c == NULL || c->session == NULL)
				continue;

			jobs = &c->status_jobs;
			do {
				try_again = 0;	
				job = RB_ROOT(jobs);
				while (job != NULL) {
					nextjob = RB_NEXT(jobs, jobs, job);
					if (job->flags & JOB_PERSIST) {
						job_remove(jobs, job);
						try_again = 1;
						break;
					}
					job = nextjob;
				}
			} while (try_again);
			server_redraw_client(c);
		}
	}
d45 2
a46 1
	return (0);
@


1.14
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.13 2009/10/09 07:27:00 nicm Exp $ */
d74 1
d76 1
d89 2
d92 1
d172 29
@


1.13
log
@Add a simple synchronize-panes window option: when set, all input to any pane
that is part of the window is also sent to all other panes in the same
window. Suggested by several, most recently Tomasz Pajor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.12 2009/09/22 12:38:10 nicm Exp $ */
d35 1
a35 1
	CMD_ARG12, CMD_CHFLAG('a')|CMD_CHFLAG('g')|CMD_CHFLAG('u'),
d89 1
a89 1
	if (data->chflags & CMD_CHFLAG('g'))
d121 2
a122 2
	if (data->chflags & CMD_CHFLAG('u')) {
		if (data->chflags & CMD_CHFLAG('g')) {
d139 1
a139 1
			    data->arg2, data->chflags & CMD_CHFLAG('a'));
@


1.12
log
@Permit multiple prefix keys to be defined, separated by commas, for example:

set -g prefix ^a,^b

Any key in the list acts as the prefix. The send-prefix command always sends
the first key in the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.11 2009/08/11 12:53:37 nicm Exp $ */
d67 1
@


1.11
log
@Add flags for 1+2 and 2 arguments to the generic target code, use it for
cmd-set-environment/option/window-option and remove the generic options
parsing.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.10 2009/08/04 18:45:57 nicm Exp $ */
d143 2
a144 2
		case SET_OPTION_KEY:
			set_option_key(ctx, oo, entry, data->arg2);
@


1.10
log
@Add a -a flag to set-option and set-window-option to append to an existing
string value, useful for terminal-overrides.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.9 2009/07/30 07:04:50 nicm Exp $ */
d34 2
a35 2
	"[-agu] " CMD_OPTION_WINDOW_USAGE,
	0, CMD_CHFLAG('a')|CMD_CHFLAG('g')|CMD_CHFLAG('u'),
d37 1
a37 1
	cmd_option_parse,
d39 2
a40 2
	cmd_option_free,
	cmd_option_print
d81 1
a81 1
	struct cmd_option_data		*data = self->data;
d96 1
a96 1
	if (*data->option == '\0') {
d103 1
a103 1
		if (strncmp(opt->name, data->option, strlen(data->option)) != 0)
d106 1
a106 1
			ctx->error(ctx, "ambiguous option: %s", data->option);
d112 1
a112 1
		if (strcmp(entry->name, data->option) == 0)
d116 1
a116 1
		ctx->error(ctx, "unknown option: %s", data->option);
d126 1
a126 1
		if (data->value != NULL) {
d138 1
a138 1
			    data->value, data->chflags & CMD_CHFLAG('a'));
d141 1
a141 1
			set_option_number(ctx, oo, entry, data->value);
d144 1
a144 1
			set_option_key(ctx, oo, entry, data->value);
d147 1
a147 1
			set_option_colour(ctx, oo, entry, data->value);
d150 1
a150 1
			set_option_attributes(ctx, oo, entry, data->value);
d153 1
a153 1
			set_option_flag(ctx, oo, entry, data->value);
d156 1
a156 1
			set_option_choice(ctx, oo, entry, data->value);
@


1.9
log
@Add a mode-mouse option to prevent tmux taking over the mouse in choice or copy
modes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.8 2009/07/26 12:58:44 nicm Exp $ */
d34 2
a35 2
	CMD_OPTION_WINDOW_USAGE,
	0, CMD_CHFLAG('g')|CMD_CHFLAG('u'),
d137 2
a138 1
			set_option_string(ctx, oo, entry, data->value);
@


1.8
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.7 2009/07/20 09:15:18 nicm Exp $ */
d63 1
@


1.7
log
@New options, window-status-current-{fg,bg,attr}, to set the fg, bg and
attributes with which the current window is shown in the status line. From
Johan Friis, thanks.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.6 2009/07/15 07:50:34 nicm Exp $ */
a38 2
	cmd_option_send,
	cmd_option_recv,
@


1.6
log
@Having to update NSETOPTION/NSETWINDOWOPTION when adding new options is a bit
annoying and it is only use for iterating, so use a sentinel to mark the end of
each array instead. Different fix for a problem pointed out by Kalle Olavi
Niemitalo.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.5 2009/07/14 20:20:04 nicm Exp $ */
d71 3
@


1.5
log
@Add main-pane-height to the options list (was missed before).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.4 2009/07/13 23:11:35 nicm Exp $ */
d51 1
a51 1
const struct set_option_entry set_window_option_table[NSETWINDOWOPTION] = {
d73 1
d83 1
a83 1
	const struct set_option_entry   *entry;
d100 2
a101 3
	for (i = 0; i < NSETWINDOWOPTION; i++) {
		if (strncmp(set_window_option_table[i].name,
		    data->option, strlen(data->option)) != 0)
d107 1
a107 1
		entry = &set_window_option_table[i];
@


1.4
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.3 2009/07/07 19:49:19 nicm Exp $ */
d59 1
@


1.3
log
@Rename the global options variables to be shorter and to make session options
clear. No functional change, getting this out of the way to make later options
changes easier.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.2 2009/06/25 06:00:45 nicm Exp $ */
d35 1
a35 1
	CMD_GFLAG|CMD_UFLAG,
d84 1
a84 1
	if (data->flags & CMD_GFLAG)
d117 2
a118 2
	if (data->flags & CMD_UFLAG) {
		if (data->flags & CMD_GFLAG) {
@


1.2
log
@Unused prototypes. Found by lint, no binary change.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-window-option.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d85 1
a85 1
		oo = &global_window_options;
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a29 1
int	cmd_set_window_option_parse(struct cmd *, int, char **, char **);
a30 4
void	cmd_set_window_option_send(struct cmd *, struct buffer *);
void	cmd_set_window_option_recv(struct cmd *, struct buffer *);
void	cmd_set_window_option_free(struct cmd *);
size_t	cmd_set_window_option_print(struct cmd *, char *, size_t);
@

