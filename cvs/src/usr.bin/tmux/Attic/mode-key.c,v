head	1.74;
access;
symbols
	OPENBSD_6_0:1.68.0.2
	OPENBSD_6_0_BASE:1.68
	OPENBSD_5_9:1.65.0.2
	OPENBSD_5_9_BASE:1.65
	OPENBSD_5_8:1.63.0.4
	OPENBSD_5_8_BASE:1.63
	OPENBSD_5_7:1.61.0.2
	OPENBSD_5_7_BASE:1.61
	OPENBSD_5_6:1.59.0.4
	OPENBSD_5_6_BASE:1.59
	OPENBSD_5_5:1.56.0.4
	OPENBSD_5_5_BASE:1.56
	OPENBSD_5_4:1.54.0.2
	OPENBSD_5_4_BASE:1.54
	OPENBSD_5_3:1.50.0.2
	OPENBSD_5_3_BASE:1.50
	OPENBSD_5_2:1.45.0.2
	OPENBSD_5_2_BASE:1.45
	OPENBSD_5_1_BASE:1.44
	OPENBSD_5_1:1.44.0.2
	OPENBSD_5_0:1.38.0.2
	OPENBSD_5_0_BASE:1.38
	OPENBSD_4_9:1.36.0.2
	OPENBSD_4_9_BASE:1.36
	OPENBSD_4_8:1.35.0.2
	OPENBSD_4_8_BASE:1.35
	OPENBSD_4_7:1.34.0.2
	OPENBSD_4_7_BASE:1.34
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.74
date	2017.01.24.21.50.22;	author nicm;	state dead;
branches;
next	1.73;
commitid	RhpGrb29XR7z4pyo;

1.73
date	2016.10.12.14.50.14;	author nicm;	state Exp;
branches;
next	1.72;
commitid	2r95FFcJGHvdfgBR;

1.72
date	2016.10.11.13.45.47;	author nicm;	state Exp;
branches;
next	1.71;
commitid	m8cwMB6WuKLMPXh5;

1.71
date	2016.10.11.07.23.34;	author nicm;	state Exp;
branches;
next	1.70;
commitid	leUN1UeapgUoieJj;

1.70
date	2016.10.10.21.29.23;	author nicm;	state Exp;
branches;
next	1.69;
commitid	z4Hr4PZF7Ev93uEJ;

1.69
date	2016.09.12.15.40.58;	author nicm;	state Exp;
branches;
next	1.68;
commitid	FmdCsJJj2mhuDrZn;

1.68
date	2016.04.27.09.39.09;	author nicm;	state Exp;
branches;
next	1.67;
commitid	0bQ3quXnMplDQUsb;

1.67
date	2016.03.18.07.28.27;	author nicm;	state Exp;
branches;
next	1.66;
commitid	XKqoAZz4Rl0wxJYw;

1.66
date	2016.03.01.12.04.43;	author nicm;	state Exp;
branches;
next	1.65;
commitid	8tE2MJr7RYWnQBde;

1.65
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.64;
commitid	P3qmSOx6KrDBsb0c;

1.64
date	2015.11.12.11.05.34;	author nicm;	state Exp;
branches;
next	1.63;
commitid	Ih1tdqtjpnEyfE8x;

1.63
date	2015.05.08.16.33.29;	author nicm;	state Exp;
branches;
next	1.62;
commitid	n1lmYmWcWtKCVPGf;

1.62
date	2015.04.19.21.34.21;	author nicm;	state Exp;
branches;
next	1.61;
commitid	wug6ctIOfhVMeWQp;

1.61
date	2014.11.06.09.17.25;	author nicm;	state Exp;
branches;
next	1.60;
commitid	CCUZqfCax9h5WQau;

1.60
date	2014.08.11.22.39.57;	author nicm;	state Exp;
branches;
next	1.59;
commitid	5P6S7HkajnxiDJ0l;

1.59
date	2014.05.13.07.54.20;	author nicm;	state Exp;
branches;
next	1.58;

1.58
date	2014.03.31.21.39.31;	author nicm;	state Exp;
branches;
next	1.57;

1.57
date	2014.03.31.21.36.43;	author nicm;	state Exp;
branches;
next	1.56;

1.56
date	2014.02.14.12.35.58;	author nicm;	state Exp;
branches;
next	1.55;

1.55
date	2013.10.23.11.31.03;	author nicm;	state Exp;
branches;
next	1.54;

1.54
date	2013.07.05.14.44.06;	author nicm;	state Exp;
branches;
next	1.53;

1.53
date	2013.07.05.14.38.22;	author nicm;	state Exp;
branches;
next	1.52;

1.52
date	2013.03.22.15.52.40;	author nicm;	state Exp;
branches;
next	1.51;

1.51
date	2013.03.21.16.54.37;	author nicm;	state Exp;
branches;
next	1.50;

1.50
date	2012.11.19.10.51.25;	author nicm;	state Exp;
branches;
next	1.49;

1.49
date	2012.10.09.18.08.21;	author nicm;	state Exp;
branches;
next	1.48;

1.48
date	2012.10.02.08.16.28;	author nicm;	state Exp;
branches;
next	1.47;

1.47
date	2012.08.27.21.29.23;	author nicm;	state Exp;
branches;
next	1.46;

1.46
date	2012.08.11.06.45.33;	author nicm;	state Exp;
branches;
next	1.45;

1.45
date	2012.03.04.07.38.11;	author nicm;	state Exp;
branches;
next	1.44;

1.44
date	2012.01.21.11.12.13;	author nicm;	state Exp;
branches;
next	1.43;

1.43
date	2012.01.20.19.10.29;	author nicm;	state Exp;
branches;
next	1.42;

1.42
date	2011.12.04.16.18.01;	author nicm;	state Exp;
branches;
next	1.41;

1.41
date	2011.12.01.20.44.12;	author nicm;	state Exp;
branches;
next	1.40;

1.40
date	2011.11.15.23.34.12;	author nicm;	state Exp;
branches;
next	1.39;

1.39
date	2011.08.16.09.47.18;	author nicm;	state Exp;
branches;
next	1.38;

1.38
date	2011.05.18.18.06.36;	author nicm;	state Exp;
branches;
next	1.37;

1.37
date	2011.04.05.18.55.38;	author nicm;	state Exp;
branches;
next	1.36;

1.36
date	2011.01.01.03.39.21;	author nicm;	state Exp;
branches;
next	1.35;

1.35
date	2010.03.22.19.10.42;	author nicm;	state Exp;
branches;
next	1.34;

1.34
date	2010.03.02.00.32.41;	author nicm;	state Exp;
branches;
next	1.33;

1.33
date	2010.02.11.20.39.40;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2010.02.06.17.35.01;	author nicm;	state Exp;
branches;
next	1.31;

1.31
date	2010.02.04.20.00.26;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2010.02.01.22.15.51;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2010.01.27.23.26.14;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2010.01.27.20.18.52;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2010.01.25.21.33.39;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2010.01.23.17.49.21;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2009.11.13.07.00.54;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2009.10.13.13.45.56;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.07.15.58.40;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2009.10.06.07.09.00;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2009.10.04.11.18.26;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.04.08.26.41;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.04.08.23.01;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.02.06.33.20;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.08.18.07.23.43;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.18.07.08.26;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2009.08.13.23.44.18;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.08.13.22.32.18;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.30.20.41.48;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.07.28.17.05.10;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.07.28.07.03.32;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.27.20.36.13;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.27.19.29.35;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.27.18.51.46;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.27.12.11.11;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.21.42.08;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.23.13.44.02;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.21.17.57.29;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.12.16.15.34;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.74
log
@Fixed keys for choose mode, and remove the last mode keys bits.
@
text
@/* $OpenBSD: mode-key.c,v 1.73 2016/10/12 14:50:14 nicm Exp $ */

/*
 * Copyright (c) 2008 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>

#include "tmux.h"

/*
 * Mode keys. These are the key bindings used when editing (status prompt), and
 * in the modes. They are split into two sets of three tables, one set of three
 * for vi and the other for emacs key bindings. The three tables are for
 * editing, for menu-like modes (choice, more), and for copy modes (copy,
 * scroll).
 *
 * The fixed tables of struct mode_key_entry below are the defaults: they are
 * built into a tree of struct mode_key_binding by mode_key_init_trees, which
 * can then be modified.
 *
 * vi command mode is handled by having a mode flag in the struct which allows
 * two sets of bindings to be swapped between. A couple of editing commands
 * (any matching MODEKEYEDIT_SWITCHMODE*) are special-cased to do this.
 */

/* Command to string mapping. */
struct mode_key_cmdstr {
	enum mode_key_cmd	 cmd;
	const char		*name;
};

/* Entry in the default mode key tables. */
struct mode_key_entry {
	key_code		key;
	enum mode_key_cmd	cmd;
};

/* Choice keys command strings. */
static const struct mode_key_cmdstr mode_key_cmdstr_choice[] = {
	{ MODEKEYCHOICE_BACKSPACE, "backspace" },
	{ MODEKEYCHOICE_BOTTOMLINE, "bottom-line"},
	{ MODEKEYCHOICE_CANCEL, "cancel" },
	{ MODEKEYCHOICE_CHOOSE, "choose" },
	{ MODEKEYCHOICE_DOWN, "down" },
	{ MODEKEYCHOICE_ENDOFLIST, "end-of-list"},
	{ MODEKEYCHOICE_PAGEDOWN, "page-down" },
	{ MODEKEYCHOICE_PAGEUP, "page-up" },
	{ MODEKEYCHOICE_SCROLLDOWN, "scroll-down" },
	{ MODEKEYCHOICE_SCROLLUP, "scroll-up" },
	{ MODEKEYCHOICE_STARTNUMBERPREFIX, "start-number-prefix" },
	{ MODEKEYCHOICE_STARTOFLIST, "start-of-list"},
	{ MODEKEYCHOICE_TOPLINE, "top-line"},
	{ MODEKEYCHOICE_TREE_COLLAPSE, "tree-collapse" },
	{ MODEKEYCHOICE_TREE_COLLAPSE_ALL, "tree-collapse-all" },
	{ MODEKEYCHOICE_TREE_EXPAND, "tree-expand" },
	{ MODEKEYCHOICE_TREE_EXPAND_ALL, "tree-expand-all" },
	{ MODEKEYCHOICE_TREE_TOGGLE, "tree-toggle" },
	{ MODEKEYCHOICE_UP, "up" },

	{ 0, NULL }
};

/* vi choice selection keys. */
static const struct mode_key_entry mode_key_vi_choice[] = {
	{ '0' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '\002' /* C-b */,	    MODEKEYCHOICE_PAGEUP },
	{ '\003' /* C-c */,	    MODEKEYCHOICE_CANCEL },
	{ '\005' /* C-e */,	    MODEKEYCHOICE_SCROLLDOWN },
	{ '\006' /* C-f */,	    MODEKEYCHOICE_PAGEDOWN },
	{ '\031' /* C-y */,	    MODEKEYCHOICE_SCROLLUP },
	{ '\n',			    MODEKEYCHOICE_CHOOSE },
	{ '\r',			    MODEKEYCHOICE_CHOOSE },
	{ 'j',			    MODEKEYCHOICE_DOWN },
	{ 'k',			    MODEKEYCHOICE_UP },
	{ 'q',			    MODEKEYCHOICE_CANCEL },
	{ KEYC_HOME,                MODEKEYCHOICE_STARTOFLIST },
	{ 'g',                      MODEKEYCHOICE_STARTOFLIST },
	{ 'H',                      MODEKEYCHOICE_TOPLINE },
	{ 'L',                      MODEKEYCHOICE_BOTTOMLINE },
	{ 'G',                      MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_END,                 MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_BSPACE,		    MODEKEYCHOICE_BACKSPACE },
	{ KEYC_DOWN | KEYC_CTRL,    MODEKEYCHOICE_SCROLLDOWN },
	{ KEYC_DOWN,		    MODEKEYCHOICE_DOWN },
	{ KEYC_NPAGE,		    MODEKEYCHOICE_PAGEDOWN },
	{ KEYC_PPAGE,		    MODEKEYCHOICE_PAGEUP },
	{ KEYC_UP | KEYC_CTRL,	    MODEKEYCHOICE_SCROLLUP },
	{ KEYC_UP,		    MODEKEYCHOICE_UP },
	{ ' ',			    MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_LEFT,		    MODEKEYCHOICE_TREE_COLLAPSE },
	{ KEYC_RIGHT,		    MODEKEYCHOICE_TREE_EXPAND },
	{ KEYC_LEFT | KEYC_CTRL,    MODEKEYCHOICE_TREE_COLLAPSE_ALL },
	{ KEYC_RIGHT | KEYC_CTRL,   MODEKEYCHOICE_TREE_EXPAND_ALL },
	{ KEYC_MOUSEDOWN1_PANE,     MODEKEYCHOICE_CHOOSE },
	{ KEYC_MOUSEDOWN3_PANE,     MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_WHEELUP_PANE,        MODEKEYCHOICE_UP },
	{ KEYC_WHEELDOWN_PANE,      MODEKEYCHOICE_DOWN },

	{ KEYC_NONE, -1 }
};
struct mode_key_tree mode_key_tree_vi_choice;

/* emacs choice selection keys. */
static const struct mode_key_entry mode_key_emacs_choice[] = {
	{ '0' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '\003' /* C-c */,	    MODEKEYCHOICE_CANCEL },
	{ '\016' /* C-n */,	    MODEKEYCHOICE_DOWN },
	{ '\020' /* C-p */,	    MODEKEYCHOICE_UP },
	{ '\026' /* C-v */,	    MODEKEYCHOICE_PAGEDOWN },
	{ '\033' /* Escape */,	    MODEKEYCHOICE_CANCEL },
	{ '\n',			    MODEKEYCHOICE_CHOOSE },
	{ '\r',			    MODEKEYCHOICE_CHOOSE },
	{ 'q',			    MODEKEYCHOICE_CANCEL },
	{ 'v' | KEYC_ESCAPE,	    MODEKEYCHOICE_PAGEUP },
	{ KEYC_HOME,                MODEKEYCHOICE_STARTOFLIST },
	{ '<' | KEYC_ESCAPE,	    MODEKEYCHOICE_STARTOFLIST },
	{ 'R' | KEYC_ESCAPE,	    MODEKEYCHOICE_TOPLINE },
	{ '>' | KEYC_ESCAPE,	    MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_END,                 MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_BSPACE,		    MODEKEYCHOICE_BACKSPACE },
	{ KEYC_DOWN | KEYC_CTRL,    MODEKEYCHOICE_SCROLLDOWN },
	{ KEYC_DOWN,		    MODEKEYCHOICE_DOWN },
	{ KEYC_NPAGE,		    MODEKEYCHOICE_PAGEDOWN },
	{ KEYC_PPAGE,		    MODEKEYCHOICE_PAGEUP },
	{ KEYC_UP | KEYC_CTRL,	    MODEKEYCHOICE_SCROLLUP },
	{ KEYC_UP,		    MODEKEYCHOICE_UP },
	{ ' ',			    MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_LEFT,		    MODEKEYCHOICE_TREE_COLLAPSE },
	{ KEYC_RIGHT,		    MODEKEYCHOICE_TREE_EXPAND },
	{ KEYC_LEFT | KEYC_CTRL,    MODEKEYCHOICE_TREE_COLLAPSE_ALL },
	{ KEYC_RIGHT | KEYC_CTRL,   MODEKEYCHOICE_TREE_EXPAND_ALL },
	{ KEYC_MOUSEDOWN1_PANE,     MODEKEYCHOICE_CHOOSE },
	{ KEYC_MOUSEDOWN3_PANE,     MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_WHEELUP_PANE,        MODEKEYCHOICE_UP },
	{ KEYC_WHEELDOWN_PANE,      MODEKEYCHOICE_DOWN },

	{ KEYC_NONE, -1 }
};
struct mode_key_tree mode_key_tree_emacs_choice;

/* Table mapping key table names to default settings and trees. */
static const struct mode_key_table mode_key_tables[] = {
	{ "vi-choice", mode_key_cmdstr_choice,
	  &mode_key_tree_vi_choice, mode_key_vi_choice },
	{ "emacs-choice", mode_key_cmdstr_choice,
	  &mode_key_tree_emacs_choice, mode_key_emacs_choice },

	{ NULL, NULL, NULL, NULL }
};

RB_GENERATE(mode_key_tree, mode_key_binding, entry, mode_key_cmp);

int
mode_key_cmp(struct mode_key_binding *mbind1, struct mode_key_binding *mbind2)
{
	if (mbind1->key < mbind2->key)
		return (-1);
	if (mbind1->key > mbind2->key)
		return (1);
	return (0);
}

const char *
mode_key_tostring(const struct mode_key_cmdstr *cmdstr, enum mode_key_cmd cmd)
{
	for (; cmdstr->name != NULL; cmdstr++) {
		if (cmdstr->cmd == cmd)
			return (cmdstr->name);
	}
	return (NULL);
}

enum mode_key_cmd
mode_key_fromstring(const struct mode_key_cmdstr *cmdstr, const char *name)
{
	for (; cmdstr->name != NULL; cmdstr++) {
		if (strcasecmp(cmdstr->name, name) == 0)
			return (cmdstr->cmd);
	}
	return (MODEKEY_NONE);
}

const struct mode_key_table *
mode_key_findtable(const char *name)
{
	const struct mode_key_table	*mtab;

	for (mtab = mode_key_tables; mtab->name != NULL; mtab++) {
		if (strcasecmp(name, mtab->name) == 0)
			return (mtab);
	}
	return (NULL);
}

void
mode_key_init_trees(void)
{
	const struct mode_key_table	*mtab;
	const struct mode_key_entry	*ment;
	struct mode_key_binding		*mbind;

	for (mtab = mode_key_tables; mtab->name != NULL; mtab++) {
		RB_INIT(mtab->tree);
		for (ment = mtab->table; ment->key != KEYC_NONE; ment++) {
			mbind = xmalloc(sizeof *mbind);
			mbind->key = ment->key;
			mbind->cmd = ment->cmd;
			RB_INSERT(mode_key_tree, mtab->tree, mbind);
		}
	}
}

void
mode_key_init(struct mode_key_data *mdata, struct mode_key_tree *mtree)
{
	mdata->tree = mtree;
}

enum mode_key_cmd
mode_key_lookup(struct mode_key_data *mdata, key_code key)
{
	struct mode_key_binding	*mbind, mtmp;

	mtmp.key = key;
	if ((mbind = RB_FIND(mode_key_tree, mdata->tree, &mtmp)) == NULL)
		return (MODEKEY_OTHER);
	return (mbind->cmd);
}
@


1.73
log
@Drop the edit mode key tables and just use fixed key bindings for the
command prompt.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.72 2016/10/11 13:45:47 nicm Exp $ */
@


1.72
log
@Some other stuff that can be local to one file.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.71 2016/10/11 07:23:34 nicm Exp $ */
a49 8

	/*
	 * Editing mode for vi: 0 is edit mode, keys not in the table are
	 * returned as MODEKEY_OTHER; 1 is command mode, keys not in the table
	 * are returned as MODEKEY_NONE. This is also matched on, allowing some
	 * keys to be bound in edit mode.
	 */
	int			mode;
a52 35
/* Edit keys command strings. */
static const struct mode_key_cmdstr mode_key_cmdstr_edit[] = {
	{ MODEKEYEDIT_BACKSPACE, "backspace" },
	{ MODEKEYEDIT_CANCEL, "cancel" },
	{ MODEKEYEDIT_COMPLETE, "complete" },
	{ MODEKEYEDIT_CURSORLEFT, "cursor-left" },
	{ MODEKEYEDIT_CURSORRIGHT, "cursor-right" },
	{ MODEKEYEDIT_DELETE, "delete" },
	{ MODEKEYEDIT_DELETELINE, "delete-line" },
	{ MODEKEYEDIT_DELETETOENDOFLINE, "delete-end-of-line" },
	{ MODEKEYEDIT_DELETEWORD, "delete-word" },
	{ MODEKEYEDIT_ENDOFLINE, "end-of-line" },
	{ MODEKEYEDIT_ENTER, "enter" },
	{ MODEKEYEDIT_HISTORYDOWN, "history-down" },
	{ MODEKEYEDIT_HISTORYUP, "history-up" },
	{ MODEKEYEDIT_NEXTSPACE, "next-space" },
	{ MODEKEYEDIT_NEXTSPACEEND, "next-space-end" },
	{ MODEKEYEDIT_NEXTWORD, "next-word" },
	{ MODEKEYEDIT_NEXTWORDEND, "next-word-end" },
	{ MODEKEYEDIT_PASTE, "paste" },
	{ MODEKEYEDIT_PREVIOUSSPACE, "previous-space" },
	{ MODEKEYEDIT_PREVIOUSWORD, "previous-word" },
	{ MODEKEYEDIT_STARTOFLINE, "start-of-line" },
	{ MODEKEYEDIT_SWITCHMODE, "switch-mode" },
	{ MODEKEYEDIT_SWITCHMODEAPPEND, "switch-mode-append" },
	{ MODEKEYEDIT_SWITCHMODEAPPENDLINE, "switch-mode-append-line" },
	{ MODEKEYEDIT_SWITCHMODEBEGINLINE, "switch-mode-begin-line" },
	{ MODEKEYEDIT_SWITCHMODECHANGELINE, "switch-mode-change-line" },
	{ MODEKEYEDIT_SWITCHMODESUBSTITUTE, "switch-mode-substitute" },
	{ MODEKEYEDIT_SWITCHMODESUBSTITUTELINE, "switch-mode-substitute-line" },
	{ MODEKEYEDIT_TRANSPOSECHARS, "transpose-chars" },

	{ 0, NULL }
};

a77 59
/* vi editing keys. */
static const struct mode_key_entry mode_key_vi_edit[] = {
	{ '\003' /* C-c */,	    0, MODEKEYEDIT_CANCEL },
	{ '\010' /* C-h */,	    0, MODEKEYEDIT_BACKSPACE },
	{ '\011' /* Tab */,	    0, MODEKEYEDIT_COMPLETE },
	{ '\025' /* C-u */,	    0, MODEKEYEDIT_DELETELINE },
	{ '\027' /* C-w */,	    0, MODEKEYEDIT_DELETEWORD },
	{ '\033' /* Escape */,	    0, MODEKEYEDIT_SWITCHMODE },
	{ '\n',			    0, MODEKEYEDIT_ENTER },
	{ '\r',			    0, MODEKEYEDIT_ENTER },
	{ KEYC_BSPACE,		    0, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		    0, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		    0, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		    0, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		    0, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		    0, MODEKEYEDIT_HISTORYUP },
	{ KEYC_HOME,		    0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_END,		    0, MODEKEYEDIT_ENDOFLINE },

	{ '$',			    1, MODEKEYEDIT_ENDOFLINE },
	{ '0',			    1, MODEKEYEDIT_STARTOFLINE },
	{ 'A',			    1, MODEKEYEDIT_SWITCHMODEAPPENDLINE },
	{ 'B',			    1, MODEKEYEDIT_PREVIOUSSPACE },
	{ 'C',			    1, MODEKEYEDIT_SWITCHMODECHANGELINE },
	{ 'D',			    1, MODEKEYEDIT_DELETETOENDOFLINE },
	{ 'E',			    1, MODEKEYEDIT_NEXTSPACEEND },
	{ 'I',			    1, MODEKEYEDIT_SWITCHMODEBEGINLINE },
	{ 'S',			    1, MODEKEYEDIT_SWITCHMODESUBSTITUTELINE },
	{ 'W',			    1, MODEKEYEDIT_NEXTSPACE },
	{ 'X',			    1, MODEKEYEDIT_BACKSPACE },
	{ '\003' /* C-c */,	    1, MODEKEYEDIT_CANCEL },
	{ '\010' /* C-h */,	    1, MODEKEYEDIT_BACKSPACE },
	{ '\n',			    1, MODEKEYEDIT_ENTER },
	{ '\r',			    1, MODEKEYEDIT_ENTER },
	{ '^',			    1, MODEKEYEDIT_STARTOFLINE },
	{ 'a',			    1, MODEKEYEDIT_SWITCHMODEAPPEND },
	{ 'b',			    1, MODEKEYEDIT_PREVIOUSWORD },
	{ 'd',			    1, MODEKEYEDIT_DELETELINE },
	{ 'e',			    1, MODEKEYEDIT_NEXTWORDEND },
	{ 'h',			    1, MODEKEYEDIT_CURSORLEFT },
	{ 'i',			    1, MODEKEYEDIT_SWITCHMODE },
	{ 'j',			    1, MODEKEYEDIT_HISTORYDOWN },
	{ 'k',			    1, MODEKEYEDIT_HISTORYUP },
	{ 'l',			    1, MODEKEYEDIT_CURSORRIGHT },
	{ 'p',			    1, MODEKEYEDIT_PASTE },
	{ 's',			    1, MODEKEYEDIT_SWITCHMODESUBSTITUTE },
	{ 'w',			    1, MODEKEYEDIT_NEXTWORD },
	{ 'x',			    1, MODEKEYEDIT_DELETE },
	{ KEYC_BSPACE,		    1, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		    1, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		    1, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		    1, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		    1, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		    1, MODEKEYEDIT_HISTORYUP },

	{ 0,			   -1, 0 }
};
struct mode_key_tree mode_key_tree_vi_edit;

d80 42
a121 42
	{ '0' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '\002' /* C-b */,	    0, MODEKEYCHOICE_PAGEUP },
	{ '\003' /* C-c */,	    0, MODEKEYCHOICE_CANCEL },
	{ '\005' /* C-e */,	    0, MODEKEYCHOICE_SCROLLDOWN },
	{ '\006' /* C-f */,	    0, MODEKEYCHOICE_PAGEDOWN },
	{ '\031' /* C-y */,	    0, MODEKEYCHOICE_SCROLLUP },
	{ '\n',			    0, MODEKEYCHOICE_CHOOSE },
	{ '\r',			    0, MODEKEYCHOICE_CHOOSE },
	{ 'j',			    0, MODEKEYCHOICE_DOWN },
	{ 'k',			    0, MODEKEYCHOICE_UP },
	{ 'q',			    0, MODEKEYCHOICE_CANCEL },
	{ KEYC_HOME,                0, MODEKEYCHOICE_STARTOFLIST },
	{ 'g',                      0, MODEKEYCHOICE_STARTOFLIST },
	{ 'H',                      0, MODEKEYCHOICE_TOPLINE },
	{ 'L',                      0, MODEKEYCHOICE_BOTTOMLINE },
	{ 'G',                      0, MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_END,                 0, MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_BSPACE,		    0, MODEKEYCHOICE_BACKSPACE },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCHOICE_SCROLLDOWN },
	{ KEYC_DOWN,		    0, MODEKEYCHOICE_DOWN },
	{ KEYC_NPAGE,		    0, MODEKEYCHOICE_PAGEDOWN },
	{ KEYC_PPAGE,		    0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCHOICE_SCROLLUP },
	{ KEYC_UP,		    0, MODEKEYCHOICE_UP },
	{ ' ',			    0, MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_LEFT,		    0, MODEKEYCHOICE_TREE_COLLAPSE },
	{ KEYC_RIGHT,		    0, MODEKEYCHOICE_TREE_EXPAND },
	{ KEYC_LEFT | KEYC_CTRL,    0, MODEKEYCHOICE_TREE_COLLAPSE_ALL },
	{ KEYC_RIGHT | KEYC_CTRL,   0, MODEKEYCHOICE_TREE_EXPAND_ALL },
	{ KEYC_MOUSEDOWN1_PANE,     0, MODEKEYCHOICE_CHOOSE },
	{ KEYC_MOUSEDOWN3_PANE,     0, MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCHOICE_UP },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCHOICE_DOWN },
d123 1
a123 1
	{ 0,			   -1, 0 }
a126 36
/* emacs editing keys. */
static const struct mode_key_entry mode_key_emacs_edit[] = {
	{ '\001' /* C-a */,	    0, MODEKEYEDIT_STARTOFLINE },
	{ '\002' /* C-b */,	    0, MODEKEYEDIT_CURSORLEFT },
	{ '\003' /* C-c */,	    0, MODEKEYEDIT_CANCEL },
	{ '\004' /* C-d */,	    0, MODEKEYEDIT_DELETE },
	{ '\005' /* C-e */,	    0, MODEKEYEDIT_ENDOFLINE },
	{ '\006' /* C-f */,	    0, MODEKEYEDIT_CURSORRIGHT },
	{ '\010' /* C-H */,	    0, MODEKEYEDIT_BACKSPACE },
	{ '\011' /* Tab */,	    0, MODEKEYEDIT_COMPLETE },
	{ '\013' /* C-k */,	    0, MODEKEYEDIT_DELETETOENDOFLINE },
	{ '\016' /* C-n */,	    0, MODEKEYEDIT_HISTORYDOWN },
	{ '\020' /* C-p */,	    0, MODEKEYEDIT_HISTORYUP },
	{ '\024' /* C-t */,	    0, MODEKEYEDIT_TRANSPOSECHARS },
	{ '\025' /* C-u */,	    0, MODEKEYEDIT_DELETELINE },
	{ '\027' /* C-w */,	    0, MODEKEYEDIT_DELETEWORD },
	{ '\031' /* C-y */,	    0, MODEKEYEDIT_PASTE },
	{ '\033' /* Escape */,	    0, MODEKEYEDIT_CANCEL },
	{ '\n',			    0, MODEKEYEDIT_ENTER },
	{ '\r',			    0, MODEKEYEDIT_ENTER },
	{ 'b' | KEYC_ESCAPE,	    0, MODEKEYEDIT_PREVIOUSWORD },
	{ 'f' | KEYC_ESCAPE,	    0, MODEKEYEDIT_NEXTWORDEND },
	{ 'm' | KEYC_ESCAPE,	    0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_BSPACE,		    0, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		    0, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		    0, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		    0, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		    0, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		    0, MODEKEYEDIT_HISTORYUP },
	{ KEYC_HOME,		    0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_END,		    0, MODEKEYEDIT_ENDOFLINE },

	{ 0,			   -1, 0 }
};
struct mode_key_tree mode_key_tree_emacs_edit;

d129 40
a168 40
	{ '0' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '\003' /* C-c */,	    0, MODEKEYCHOICE_CANCEL },
	{ '\016' /* C-n */,	    0, MODEKEYCHOICE_DOWN },
	{ '\020' /* C-p */,	    0, MODEKEYCHOICE_UP },
	{ '\026' /* C-v */,	    0, MODEKEYCHOICE_PAGEDOWN },
	{ '\033' /* Escape */,	    0, MODEKEYCHOICE_CANCEL },
	{ '\n',			    0, MODEKEYCHOICE_CHOOSE },
	{ '\r',			    0, MODEKEYCHOICE_CHOOSE },
	{ 'q',			    0, MODEKEYCHOICE_CANCEL },
	{ 'v' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_HOME,                0, MODEKEYCHOICE_STARTOFLIST },
	{ '<' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTOFLIST },
	{ 'R' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_TOPLINE },
	{ '>' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_END,                 0, MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_BSPACE,		    0, MODEKEYCHOICE_BACKSPACE },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCHOICE_SCROLLDOWN },
	{ KEYC_DOWN,		    0, MODEKEYCHOICE_DOWN },
	{ KEYC_NPAGE,		    0, MODEKEYCHOICE_PAGEDOWN },
	{ KEYC_PPAGE,		    0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCHOICE_SCROLLUP },
	{ KEYC_UP,		    0, MODEKEYCHOICE_UP },
	{ ' ',			    0, MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_LEFT,		    0, MODEKEYCHOICE_TREE_COLLAPSE },
	{ KEYC_RIGHT,		    0, MODEKEYCHOICE_TREE_EXPAND },
	{ KEYC_LEFT | KEYC_CTRL,    0, MODEKEYCHOICE_TREE_COLLAPSE_ALL },
	{ KEYC_RIGHT | KEYC_CTRL,   0, MODEKEYCHOICE_TREE_EXPAND_ALL },
	{ KEYC_MOUSEDOWN1_PANE,     0, MODEKEYCHOICE_CHOOSE },
	{ KEYC_MOUSEDOWN3_PANE,     0, MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCHOICE_UP },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCHOICE_DOWN },
d170 1
a170 1
	{ 0,			   -1, 0 }
a175 2
	{ "vi-edit", mode_key_cmdstr_edit,
	  &mode_key_tree_vi_edit, mode_key_vi_edit },
a177 2
	{ "emacs-edit", mode_key_cmdstr_edit,
	  &mode_key_tree_emacs_edit, mode_key_emacs_edit },
a188 4
	if (mbind1->mode < mbind2->mode)
		return (-1);
	if (mbind1->mode > mbind2->mode)
		return (1);
d237 1
a237 1
		for (ment = mtab->table; ment->mode != -1; ment++) {
a239 1
			mbind->mode = ment->mode;
a249 1
	mdata->mode = 0;
d258 1
a258 4
	mtmp.mode = mdata->mode;
	if ((mbind = RB_FIND(mode_key_tree, mdata->tree, &mtmp)) == NULL) {
		if (mdata->mode != 0)
			return (MODEKEY_NONE);
d260 1
a260 15
	}

	switch (mbind->cmd) {
	case MODEKEYEDIT_SWITCHMODE:
	case MODEKEYEDIT_SWITCHMODEAPPEND:
	case MODEKEYEDIT_SWITCHMODEAPPENDLINE:
	case MODEKEYEDIT_SWITCHMODEBEGINLINE:
	case MODEKEYEDIT_SWITCHMODECHANGELINE:
	case MODEKEYEDIT_SWITCHMODESUBSTITUTE:
	case MODEKEYEDIT_SWITCHMODESUBSTITUTELINE:
		mdata->mode = 1 - mdata->mode;
		/* FALLTHROUGH */
	default:
		return (mbind->cmd);
	}
@


1.71
log
@Fundamental change to how copy mode key bindings work:

The vi-copy and emacs-copy mode key tables are gone, and instead copy
mode commands are bound in one of two normal key tables ("copy-mode" or
"copy-mode-vi"). Keys are bound to "send-keys -X copy-mode-command". So:

    bind -temacs-copy C-Up scroll-up
    bind -temacs-copy -R5 WheelUpPane scroll-up

Becomes:

    bind -Tcopy-mode C-Up send -X scroll-up
    bind -Tcopy-mode WheelUpPane send -N5 -X scroll-up

This allows the full command parser and command set to be used - for
example, we can use the normal command prompt for searching, jumping,
and so on instead of a custom one:

    bind -Tcopy-mode C-r command-prompt -p'search up' "send -X search-backward '%%'"

command-prompt also gets a -1 option to only require on key press, which
is needed for jumping.

The plan is to get rid of mode keys entirely, so more to come eventually.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.70 2016/10/10 21:29:23 nicm Exp $ */
d41 6
d313 1
a313 1
const struct mode_key_table mode_key_tables[] = {
@


1.70
log
@Loads more static, except for cmd-*.c and window-*.c.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.69 2016/09/12 15:40:58 nicm Exp $ */
a52 1
	u_int			repeat;
a114 56
/* Copy keys command strings. */
static const struct mode_key_cmdstr mode_key_cmdstr_copy[] = {
	{ MODEKEYCOPY_APPENDSELECTION, "append-selection" },
	{ MODEKEYCOPY_BACKTOINDENTATION, "back-to-indentation" },
	{ MODEKEYCOPY_BOTTOMLINE, "bottom-line" },
	{ MODEKEYCOPY_CANCEL, "cancel" },
	{ MODEKEYCOPY_CLEARSELECTION, "clear-selection" },
	{ MODEKEYCOPY_COPYPIPE, "copy-pipe" },
	{ MODEKEYCOPY_COPYLINE, "copy-line" },
	{ MODEKEYCOPY_COPYENDOFLINE, "copy-end-of-line" },
	{ MODEKEYCOPY_COPYSELECTION, "copy-selection" },
	{ MODEKEYCOPY_DOWN, "cursor-down" },
	{ MODEKEYCOPY_ENDOFLINE, "end-of-line" },
	{ MODEKEYCOPY_GOTOLINE, "goto-line" },
	{ MODEKEYCOPY_HALFPAGEDOWN, "halfpage-down" },
	{ MODEKEYCOPY_HALFPAGEUP, "halfpage-up" },
	{ MODEKEYCOPY_HISTORYBOTTOM, "history-bottom" },
	{ MODEKEYCOPY_HISTORYTOP, "history-top" },
	{ MODEKEYCOPY_JUMP, "jump-forward" },
	{ MODEKEYCOPY_JUMPAGAIN, "jump-again" },
	{ MODEKEYCOPY_JUMPREVERSE, "jump-reverse" },
	{ MODEKEYCOPY_JUMPBACK, "jump-backward" },
	{ MODEKEYCOPY_JUMPTO, "jump-to-forward" },
	{ MODEKEYCOPY_JUMPTOBACK, "jump-to-backward" },
	{ MODEKEYCOPY_LEFT, "cursor-left" },
	{ MODEKEYCOPY_RECTANGLETOGGLE, "rectangle-toggle" },
	{ MODEKEYCOPY_MIDDLELINE, "middle-line" },
	{ MODEKEYCOPY_NEXTPAGE, "page-down" },
	{ MODEKEYCOPY_NEXTPARAGRAPH, "next-paragraph" },
	{ MODEKEYCOPY_NEXTSPACE, "next-space" },
	{ MODEKEYCOPY_NEXTSPACEEND, "next-space-end" },
	{ MODEKEYCOPY_NEXTWORD, "next-word" },
	{ MODEKEYCOPY_NEXTWORDEND, "next-word-end" },
	{ MODEKEYCOPY_OTHEREND, "other-end" },
	{ MODEKEYCOPY_PREVIOUSPAGE, "page-up" },
	{ MODEKEYCOPY_PREVIOUSPARAGRAPH, "previous-paragraph" },
	{ MODEKEYCOPY_PREVIOUSSPACE, "previous-space" },
	{ MODEKEYCOPY_PREVIOUSWORD, "previous-word" },
	{ MODEKEYCOPY_RIGHT, "cursor-right" },
	{ MODEKEYCOPY_SCROLLDOWN, "scroll-down" },
	{ MODEKEYCOPY_SCROLLUP, "scroll-up" },
	{ MODEKEYCOPY_SEARCHAGAIN, "search-again" },
	{ MODEKEYCOPY_SEARCHDOWN, "search-forward" },
	{ MODEKEYCOPY_SEARCHREVERSE, "search-reverse" },
	{ MODEKEYCOPY_SEARCHUP, "search-backward" },
	{ MODEKEYCOPY_SELECTLINE, "select-line" },
	{ MODEKEYCOPY_STARTNAMEDBUFFER, "start-named-buffer" },
	{ MODEKEYCOPY_STARTNUMBERPREFIX, "start-number-prefix" },
	{ MODEKEYCOPY_STARTOFLINE, "start-of-line" },
	{ MODEKEYCOPY_STARTSELECTION, "begin-selection" },
	{ MODEKEYCOPY_TOPLINE, "top-line" },
	{ MODEKEYCOPY_UP, "cursor-up" },

	{ 0, NULL }
};

d117 52
a168 52
	{ '\003' /* C-c */,	    0, MODEKEYEDIT_CANCEL, 1 },
	{ '\010' /* C-h */,	    0, MODEKEYEDIT_BACKSPACE, 1 },
	{ '\011' /* Tab */,	    0, MODEKEYEDIT_COMPLETE, 1 },
	{ '\025' /* C-u */,	    0, MODEKEYEDIT_DELETELINE, 1 },
	{ '\027' /* C-w */,	    0, MODEKEYEDIT_DELETEWORD, 1 },
	{ '\033' /* Escape */,	    0, MODEKEYEDIT_SWITCHMODE, 1 },
	{ '\n',			    0, MODEKEYEDIT_ENTER, 1 },
	{ '\r',			    0, MODEKEYEDIT_ENTER, 1 },
	{ KEYC_BSPACE,		    0, MODEKEYEDIT_BACKSPACE, 1 },
	{ KEYC_DC,		    0, MODEKEYEDIT_DELETE, 1 },
	{ KEYC_DOWN,		    0, MODEKEYEDIT_HISTORYDOWN, 1 },
	{ KEYC_LEFT,		    0, MODEKEYEDIT_CURSORLEFT, 1 },
	{ KEYC_RIGHT,		    0, MODEKEYEDIT_CURSORRIGHT, 1 },
	{ KEYC_UP,		    0, MODEKEYEDIT_HISTORYUP, 1 },
	{ KEYC_HOME,		    0, MODEKEYEDIT_STARTOFLINE, 1 },
	{ KEYC_END,		    0, MODEKEYEDIT_ENDOFLINE, 1 },

	{ '$',			    1, MODEKEYEDIT_ENDOFLINE, 1 },
	{ '0',			    1, MODEKEYEDIT_STARTOFLINE, 1 },
	{ 'A',			    1, MODEKEYEDIT_SWITCHMODEAPPENDLINE, 1 },
	{ 'B',			    1, MODEKEYEDIT_PREVIOUSSPACE, 1 },
	{ 'C',			    1, MODEKEYEDIT_SWITCHMODECHANGELINE, 1 },
	{ 'D',			    1, MODEKEYEDIT_DELETETOENDOFLINE, 1 },
	{ 'E',			    1, MODEKEYEDIT_NEXTSPACEEND, 1 },
	{ 'I',			    1, MODEKEYEDIT_SWITCHMODEBEGINLINE, 1 },
	{ 'S',			    1, MODEKEYEDIT_SWITCHMODESUBSTITUTELINE, 1 },
	{ 'W',			    1, MODEKEYEDIT_NEXTSPACE, 1 },
	{ 'X',			    1, MODEKEYEDIT_BACKSPACE, 1 },
	{ '\003' /* C-c */,	    1, MODEKEYEDIT_CANCEL, 1 },
	{ '\010' /* C-h */,	    1, MODEKEYEDIT_BACKSPACE, 1 },
	{ '\n',			    1, MODEKEYEDIT_ENTER, 1 },
	{ '\r',			    1, MODEKEYEDIT_ENTER, 1 },
	{ '^',			    1, MODEKEYEDIT_STARTOFLINE, 1 },
	{ 'a',			    1, MODEKEYEDIT_SWITCHMODEAPPEND, 1 },
	{ 'b',			    1, MODEKEYEDIT_PREVIOUSWORD, 1 },
	{ 'd',			    1, MODEKEYEDIT_DELETELINE, 1 },
	{ 'e',			    1, MODEKEYEDIT_NEXTWORDEND, 1 },
	{ 'h',			    1, MODEKEYEDIT_CURSORLEFT, 1 },
	{ 'i',			    1, MODEKEYEDIT_SWITCHMODE, 1 },
	{ 'j',			    1, MODEKEYEDIT_HISTORYDOWN, 1 },
	{ 'k',			    1, MODEKEYEDIT_HISTORYUP, 1 },
	{ 'l',			    1, MODEKEYEDIT_CURSORRIGHT, 1 },
	{ 'p',			    1, MODEKEYEDIT_PASTE, 1 },
	{ 's',			    1, MODEKEYEDIT_SWITCHMODESUBSTITUTE, 1 },
	{ 'w',			    1, MODEKEYEDIT_NEXTWORD, 1 },
	{ 'x',			    1, MODEKEYEDIT_DELETE, 1 },
	{ KEYC_BSPACE,		    1, MODEKEYEDIT_BACKSPACE, 1 },
	{ KEYC_DC,		    1, MODEKEYEDIT_DELETE, 1 },
	{ KEYC_DOWN,		    1, MODEKEYEDIT_HISTORYDOWN, 1 },
	{ KEYC_LEFT,		    1, MODEKEYEDIT_CURSORLEFT, 1 },
	{ KEYC_RIGHT,		    1, MODEKEYEDIT_CURSORRIGHT, 1 },
	{ KEYC_UP,		    1, MODEKEYEDIT_HISTORYUP, 1 },
d170 1
a170 1
	{ 0,			   -1, 0, 1 }
d176 42
a217 42
	{ '0' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '1' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '2' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '3' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '4' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '5' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '6' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '7' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '8' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '9' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '\002' /* C-b */,	    0, MODEKEYCHOICE_PAGEUP, 1 },
	{ '\003' /* C-c */,	    0, MODEKEYCHOICE_CANCEL, 1 },
	{ '\005' /* C-e */,	    0, MODEKEYCHOICE_SCROLLDOWN, 1 },
	{ '\006' /* C-f */,	    0, MODEKEYCHOICE_PAGEDOWN, 1 },
	{ '\031' /* C-y */,	    0, MODEKEYCHOICE_SCROLLUP, 1 },
	{ '\n',			    0, MODEKEYCHOICE_CHOOSE, 1 },
	{ '\r',			    0, MODEKEYCHOICE_CHOOSE, 1 },
	{ 'j',			    0, MODEKEYCHOICE_DOWN, 1 },
	{ 'k',			    0, MODEKEYCHOICE_UP, 1 },
	{ 'q',			    0, MODEKEYCHOICE_CANCEL, 1 },
	{ KEYC_HOME,                0, MODEKEYCHOICE_STARTOFLIST, 1 },
	{ 'g',                      0, MODEKEYCHOICE_STARTOFLIST, 1 },
	{ 'H',                      0, MODEKEYCHOICE_TOPLINE, 1 },
	{ 'L',                      0, MODEKEYCHOICE_BOTTOMLINE, 1 },
	{ 'G',                      0, MODEKEYCHOICE_ENDOFLIST, 1 },
	{ KEYC_END,                 0, MODEKEYCHOICE_ENDOFLIST, 1 },
	{ KEYC_BSPACE,		    0, MODEKEYCHOICE_BACKSPACE, 1 },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCHOICE_SCROLLDOWN, 1 },
	{ KEYC_DOWN,		    0, MODEKEYCHOICE_DOWN, 1 },
	{ KEYC_NPAGE,		    0, MODEKEYCHOICE_PAGEDOWN, 1 },
	{ KEYC_PPAGE,		    0, MODEKEYCHOICE_PAGEUP, 1 },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCHOICE_SCROLLUP, 1 },
	{ KEYC_UP,		    0, MODEKEYCHOICE_UP, 1 },
	{ ' ',			    0, MODEKEYCHOICE_TREE_TOGGLE, 1 },
	{ KEYC_LEFT,		    0, MODEKEYCHOICE_TREE_COLLAPSE, 1 },
	{ KEYC_RIGHT,		    0, MODEKEYCHOICE_TREE_EXPAND, 1 },
	{ KEYC_LEFT | KEYC_CTRL,    0, MODEKEYCHOICE_TREE_COLLAPSE_ALL, 1 },
	{ KEYC_RIGHT | KEYC_CTRL,   0, MODEKEYCHOICE_TREE_EXPAND_ALL, 1 },
	{ KEYC_MOUSEDOWN1_PANE,     0, MODEKEYCHOICE_CHOOSE, 1 },
	{ KEYC_MOUSEDOWN3_PANE,     0, MODEKEYCHOICE_TREE_TOGGLE, 1 },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCHOICE_UP, 1 },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCHOICE_DOWN, 1 },
d219 1
a219 1
	{ 0,			   -1, 0, 1 }
a222 81
/* vi copy mode keys. */
static const struct mode_key_entry mode_key_vi_copy[] = {
	{ ' ',			    0, MODEKEYCOPY_STARTSELECTION, 1 },
	{ '"',			    0, MODEKEYCOPY_STARTNAMEDBUFFER, 1 },
	{ '$',			    0, MODEKEYCOPY_ENDOFLINE, 1 },
	{ ',',			    0, MODEKEYCOPY_JUMPREVERSE, 1 },
	{ ';',			    0, MODEKEYCOPY_JUMPAGAIN, 1 },
	{ '/',			    0, MODEKEYCOPY_SEARCHDOWN, 1 },
	{ '0',			    0, MODEKEYCOPY_STARTOFLINE, 1 },
	{ '1',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '2',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '3',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '4',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '5',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '6',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '7',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '8',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '9',			    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ ':',			    0, MODEKEYCOPY_GOTOLINE, 1 },
	{ '?',			    0, MODEKEYCOPY_SEARCHUP, 1 },
	{ 'A',			    0, MODEKEYCOPY_APPENDSELECTION, 1 },
	{ 'B',			    0, MODEKEYCOPY_PREVIOUSSPACE, 1 },
	{ 'D',			    0, MODEKEYCOPY_COPYENDOFLINE, 1 },
	{ 'E',			    0, MODEKEYCOPY_NEXTSPACEEND, 1 },
	{ 'F',			    0, MODEKEYCOPY_JUMPBACK, 1 },
	{ 'G',			    0, MODEKEYCOPY_HISTORYBOTTOM, 1 },
	{ 'H',			    0, MODEKEYCOPY_TOPLINE, 1 },
	{ 'J',			    0, MODEKEYCOPY_SCROLLDOWN, 1 },
	{ 'K',			    0, MODEKEYCOPY_SCROLLUP, 1 },
	{ 'L',			    0, MODEKEYCOPY_BOTTOMLINE, 1 },
	{ 'M',			    0, MODEKEYCOPY_MIDDLELINE, 1 },
	{ 'N',			    0, MODEKEYCOPY_SEARCHREVERSE, 1 },
	{ 'T',			    0, MODEKEYCOPY_JUMPTOBACK, 1 },
	{ 'V',			    0, MODEKEYCOPY_SELECTLINE, 1 },
	{ 'W',			    0, MODEKEYCOPY_NEXTSPACE, 1 },
	{ '\002' /* C-b */,	    0, MODEKEYCOPY_PREVIOUSPAGE, 1 },
	{ '\003' /* C-c */,	    0, MODEKEYCOPY_CANCEL, 1 },
	{ '\004' /* C-d */,	    0, MODEKEYCOPY_HALFPAGEDOWN, 1 },
	{ '\005' /* C-e */,	    0, MODEKEYCOPY_SCROLLDOWN, 1 },
	{ '\006' /* C-f */,	    0, MODEKEYCOPY_NEXTPAGE, 1 },
	{ '\010' /* C-h */,	    0, MODEKEYCOPY_LEFT, 1 },
	{ '\025' /* C-u */,	    0, MODEKEYCOPY_HALFPAGEUP, 1 },
	{ '\031' /* C-y */,	    0, MODEKEYCOPY_SCROLLUP, 1 },
	{ '\033' /* Escape */,	    0, MODEKEYCOPY_CLEARSELECTION, 1 },
	{ '\n',			    0, MODEKEYCOPY_COPYSELECTION, 1 },
	{ '\r',			    0, MODEKEYCOPY_COPYSELECTION, 1 },
	{ '^',			    0, MODEKEYCOPY_BACKTOINDENTATION, 1 },
	{ 'b',			    0, MODEKEYCOPY_PREVIOUSWORD, 1 },
	{ 'e',			    0, MODEKEYCOPY_NEXTWORDEND, 1 },
	{ 'f',			    0, MODEKEYCOPY_JUMP, 1 },
	{ 'g',			    0, MODEKEYCOPY_HISTORYTOP, 1 },
	{ 'h',			    0, MODEKEYCOPY_LEFT, 1 },
	{ 'j',			    0, MODEKEYCOPY_DOWN, 1 },
	{ 'k',			    0, MODEKEYCOPY_UP, 1 },
	{ 'l',			    0, MODEKEYCOPY_RIGHT, 1 },
	{ 'n',			    0, MODEKEYCOPY_SEARCHAGAIN, 1 },
	{ 'o',			    0, MODEKEYCOPY_OTHEREND, 1 },
	{ 't',			    0, MODEKEYCOPY_JUMPTO, 1 },
	{ 'q',			    0, MODEKEYCOPY_CANCEL, 1 },
	{ 'v',			    0, MODEKEYCOPY_RECTANGLETOGGLE, 1 },
	{ 'w',			    0, MODEKEYCOPY_NEXTWORD, 1 },
	{ '{',			    0, MODEKEYCOPY_PREVIOUSPARAGRAPH, 1 },
	{ '}',			    0, MODEKEYCOPY_NEXTPARAGRAPH, 1 },
	{ KEYC_BSPACE,		    0, MODEKEYCOPY_LEFT, 1 },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCOPY_SCROLLDOWN, 1 },
	{ KEYC_DOWN,		    0, MODEKEYCOPY_DOWN, 1 },
	{ KEYC_LEFT,		    0, MODEKEYCOPY_LEFT, 1 },
	{ KEYC_NPAGE,		    0, MODEKEYCOPY_NEXTPAGE, 1 },
	{ KEYC_PPAGE,		    0, MODEKEYCOPY_PREVIOUSPAGE, 1 },
	{ KEYC_RIGHT,		    0, MODEKEYCOPY_RIGHT, 1 },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCOPY_SCROLLUP, 1 },
	{ KEYC_UP,		    0, MODEKEYCOPY_UP, 1 },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCOPY_SCROLLUP, 1 },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCOPY_SCROLLDOWN, 1 },
	{ KEYC_MOUSEDRAG1_PANE,     0, MODEKEYCOPY_STARTSELECTION, 1 },
	{ KEYC_MOUSEDRAGEND1_PANE,  0, MODEKEYCOPY_COPYSELECTION, 1 },

	{ 0,			   -1, 0, 1 }
};
struct mode_key_tree mode_key_tree_vi_copy;

d225 29
a253 29
	{ '\001' /* C-a */,	    0, MODEKEYEDIT_STARTOFLINE, 1 },
	{ '\002' /* C-b */,	    0, MODEKEYEDIT_CURSORLEFT, 1 },
	{ '\003' /* C-c */,	    0, MODEKEYEDIT_CANCEL, 1 },
	{ '\004' /* C-d */,	    0, MODEKEYEDIT_DELETE, 1 },
	{ '\005' /* C-e */,	    0, MODEKEYEDIT_ENDOFLINE, 1 },
	{ '\006' /* C-f */,	    0, MODEKEYEDIT_CURSORRIGHT, 1 },
	{ '\010' /* C-H */,	    0, MODEKEYEDIT_BACKSPACE, 1 },
	{ '\011' /* Tab */,	    0, MODEKEYEDIT_COMPLETE, 1 },
	{ '\013' /* C-k */,	    0, MODEKEYEDIT_DELETETOENDOFLINE, 1 },
	{ '\016' /* C-n */,	    0, MODEKEYEDIT_HISTORYDOWN, 1 },
	{ '\020' /* C-p */,	    0, MODEKEYEDIT_HISTORYUP, 1 },
	{ '\024' /* C-t */,	    0, MODEKEYEDIT_TRANSPOSECHARS, 1 },
	{ '\025' /* C-u */,	    0, MODEKEYEDIT_DELETELINE, 1 },
	{ '\027' /* C-w */,	    0, MODEKEYEDIT_DELETEWORD, 1 },
	{ '\031' /* C-y */,	    0, MODEKEYEDIT_PASTE, 1 },
	{ '\033' /* Escape */,	    0, MODEKEYEDIT_CANCEL, 1 },
	{ '\n',			    0, MODEKEYEDIT_ENTER, 1 },
	{ '\r',			    0, MODEKEYEDIT_ENTER, 1 },
	{ 'b' | KEYC_ESCAPE,	    0, MODEKEYEDIT_PREVIOUSWORD, 1 },
	{ 'f' | KEYC_ESCAPE,	    0, MODEKEYEDIT_NEXTWORDEND, 1 },
	{ 'm' | KEYC_ESCAPE,	    0, MODEKEYEDIT_STARTOFLINE, 1 },
	{ KEYC_BSPACE,		    0, MODEKEYEDIT_BACKSPACE, 1 },
	{ KEYC_DC,		    0, MODEKEYEDIT_DELETE, 1 },
	{ KEYC_DOWN,		    0, MODEKEYEDIT_HISTORYDOWN, 1 },
	{ KEYC_LEFT,		    0, MODEKEYEDIT_CURSORLEFT, 1 },
	{ KEYC_RIGHT,		    0, MODEKEYEDIT_CURSORRIGHT, 1 },
	{ KEYC_UP,		    0, MODEKEYEDIT_HISTORYUP, 1 },
	{ KEYC_HOME,		    0, MODEKEYEDIT_STARTOFLINE, 1 },
	{ KEYC_END,		    0, MODEKEYEDIT_ENDOFLINE, 1 },
d255 1
a255 1
	{ 0,			   -1, 0, 1 }
d261 40
a300 40
	{ '0' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '1' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '2' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '3' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '4' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '5' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '6' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '7' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '8' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '9' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX, 1 },
	{ '\003' /* C-c */,	    0, MODEKEYCHOICE_CANCEL, 1 },
	{ '\016' /* C-n */,	    0, MODEKEYCHOICE_DOWN, 1 },
	{ '\020' /* C-p */,	    0, MODEKEYCHOICE_UP, 1 },
	{ '\026' /* C-v */,	    0, MODEKEYCHOICE_PAGEDOWN, 1 },
	{ '\033' /* Escape */,	    0, MODEKEYCHOICE_CANCEL, 1 },
	{ '\n',			    0, MODEKEYCHOICE_CHOOSE, 1 },
	{ '\r',			    0, MODEKEYCHOICE_CHOOSE, 1 },
	{ 'q',			    0, MODEKEYCHOICE_CANCEL, 1 },
	{ 'v' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_PAGEUP, 1 },
	{ KEYC_HOME,                0, MODEKEYCHOICE_STARTOFLIST, 1 },
	{ '<' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTOFLIST, 1 },
	{ 'R' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_TOPLINE, 1 },
	{ '>' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_ENDOFLIST, 1 },
	{ KEYC_END,                 0, MODEKEYCHOICE_ENDOFLIST, 1 },
	{ KEYC_BSPACE,		    0, MODEKEYCHOICE_BACKSPACE, 1 },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCHOICE_SCROLLDOWN, 1 },
	{ KEYC_DOWN,		    0, MODEKEYCHOICE_DOWN, 1 },
	{ KEYC_NPAGE,		    0, MODEKEYCHOICE_PAGEDOWN, 1 },
	{ KEYC_PPAGE,		    0, MODEKEYCHOICE_PAGEUP, 1 },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCHOICE_SCROLLUP, 1 },
	{ KEYC_UP,		    0, MODEKEYCHOICE_UP, 1 },
	{ ' ',			    0, MODEKEYCHOICE_TREE_TOGGLE, 1 },
	{ KEYC_LEFT,		    0, MODEKEYCHOICE_TREE_COLLAPSE, 1 },
	{ KEYC_RIGHT,		    0, MODEKEYCHOICE_TREE_EXPAND, 1 },
	{ KEYC_LEFT | KEYC_CTRL,    0, MODEKEYCHOICE_TREE_COLLAPSE_ALL, 1 },
	{ KEYC_RIGHT | KEYC_CTRL,   0, MODEKEYCHOICE_TREE_EXPAND_ALL, 1 },
	{ KEYC_MOUSEDOWN1_PANE,     0, MODEKEYCHOICE_CHOOSE, 1 },
	{ KEYC_MOUSEDOWN3_PANE,     0, MODEKEYCHOICE_TREE_TOGGLE, 1 },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCHOICE_UP, 5 },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCHOICE_DOWN, 5 },
d302 1
a302 1
	{ 0,			   -1, 0, 1 }
a305 68
/* emacs copy mode keys. */
static const struct mode_key_entry mode_key_emacs_copy[] = {
	{ ' ',			    0, MODEKEYCOPY_NEXTPAGE, 1 },
	{ ',',			    0, MODEKEYCOPY_JUMPREVERSE, 1 },
	{ ';',			    0, MODEKEYCOPY_JUMPAGAIN, 1 },
	{ '1' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '2' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '3' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '4' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '5' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '6' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '7' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '8' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '9' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX, 1 },
	{ '<' | KEYC_ESCAPE,	    0, MODEKEYCOPY_HISTORYTOP, 1 },
	{ '>' | KEYC_ESCAPE,	    0, MODEKEYCOPY_HISTORYBOTTOM, 1 },
	{ 'F',			    0, MODEKEYCOPY_JUMPBACK, 1 },
	{ 'N',			    0, MODEKEYCOPY_SEARCHREVERSE, 1 },
	{ 'R' | KEYC_ESCAPE,	    0, MODEKEYCOPY_TOPLINE, 1 },
	{ 'R',			    0, MODEKEYCOPY_RECTANGLETOGGLE, 1 },
	{ 'T',			    0, MODEKEYCOPY_JUMPTOBACK, 1 },
	{ '\000' /* C-Space */,	    0, MODEKEYCOPY_STARTSELECTION, 1 },
	{ '\001' /* C-a */,	    0, MODEKEYCOPY_STARTOFLINE, 1 },
	{ '\002' /* C-b */,	    0, MODEKEYCOPY_LEFT, 1 },
	{ '\003' /* C-c */,	    0, MODEKEYCOPY_CANCEL, 1 },
	{ '\005' /* C-e */,	    0, MODEKEYCOPY_ENDOFLINE, 1 },
	{ '\006' /* C-f */,	    0, MODEKEYCOPY_RIGHT, 1 },
	{ '\007' /* C-g */,	    0, MODEKEYCOPY_CLEARSELECTION, 1 },
	{ '\013' /* C-k */,	    0, MODEKEYCOPY_COPYENDOFLINE, 1 },
	{ '\016' /* C-n */,	    0, MODEKEYCOPY_DOWN, 1 },
	{ '\020' /* C-p */,	    0, MODEKEYCOPY_UP, 1 },
	{ '\022' /* C-r */,	    0, MODEKEYCOPY_SEARCHUP, 1 },
	{ '\023' /* C-s */,	    0, MODEKEYCOPY_SEARCHDOWN, 1 },
	{ '\026' /* C-v */,	    0, MODEKEYCOPY_NEXTPAGE, 1 },
	{ '\027' /* C-w */,	    0, MODEKEYCOPY_COPYSELECTION, 1 },
	{ '\033' /* Escape */,	    0, MODEKEYCOPY_CANCEL, 1 },
	{ 'b' | KEYC_ESCAPE,	    0, MODEKEYCOPY_PREVIOUSWORD, 1 },
	{ 'f',			    0, MODEKEYCOPY_JUMP, 1 },
	{ 'f' | KEYC_ESCAPE,	    0, MODEKEYCOPY_NEXTWORDEND, 1 },
	{ 'g',			    0, MODEKEYCOPY_GOTOLINE, 1 },
	{ 'm' | KEYC_ESCAPE,	    0, MODEKEYCOPY_BACKTOINDENTATION, 1 },
	{ 'n',			    0, MODEKEYCOPY_SEARCHAGAIN, 1 },
	{ 'q',			    0, MODEKEYCOPY_CANCEL, 1 },
	{ 'r' | KEYC_ESCAPE,	    0, MODEKEYCOPY_MIDDLELINE, 1 },
	{ 't',			    0, MODEKEYCOPY_JUMPTO, 1 },
	{ 'v' | KEYC_ESCAPE,	    0, MODEKEYCOPY_PREVIOUSPAGE, 1 },
	{ 'w' | KEYC_ESCAPE,	    0, MODEKEYCOPY_COPYSELECTION, 1 },
	{ '{' | KEYC_ESCAPE,	    0, MODEKEYCOPY_PREVIOUSPARAGRAPH, 1 },
	{ '}' | KEYC_ESCAPE,	    0, MODEKEYCOPY_NEXTPARAGRAPH, 1 },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCOPY_SCROLLDOWN, 1 },
	{ KEYC_DOWN | KEYC_ESCAPE,  0, MODEKEYCOPY_HALFPAGEDOWN, 1 },
	{ KEYC_DOWN,		    0, MODEKEYCOPY_DOWN, 1 },
	{ KEYC_LEFT,		    0, MODEKEYCOPY_LEFT, 1 },
	{ KEYC_NPAGE,		    0, MODEKEYCOPY_NEXTPAGE, 1 },
	{ KEYC_PPAGE,		    0, MODEKEYCOPY_PREVIOUSPAGE, 1 },
	{ KEYC_RIGHT,		    0, MODEKEYCOPY_RIGHT, 1 },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCOPY_SCROLLUP, 1 },
	{ KEYC_UP | KEYC_ESCAPE,    0, MODEKEYCOPY_HALFPAGEUP, 1 },
	{ KEYC_UP,		    0, MODEKEYCOPY_UP, 1 },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCOPY_SCROLLUP, 5 },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCOPY_SCROLLDOWN, 5 },
	{ KEYC_MOUSEDRAG1_PANE,     0, MODEKEYCOPY_STARTSELECTION, 1 },
	{ KEYC_MOUSEDRAGEND1_PANE,  0, MODEKEYCOPY_COPYSELECTION, 1 },

	{ 0,			   -1, 0, 1 }
};
struct mode_key_tree mode_key_tree_emacs_copy;

a311 2
	{ "vi-copy", mode_key_cmdstr_copy,
	  &mode_key_tree_vi_copy, mode_key_vi_copy },
a315 2
	{ "emacs-copy", mode_key_cmdstr_copy,
	  &mode_key_tree_emacs_copy, mode_key_emacs_copy },
a379 1
			mbind->repeat = ment->repeat;
a381 1
			mbind->arg = NULL;
d395 1
a395 2
mode_key_lookup(struct mode_key_data *mdata, key_code key, const char **arg,
    u_int *repeat)
a405 2
	if (repeat != NULL)
		*repeat = mbind->repeat;
a417 2
		if (arg != NULL)
			*arg = mbind->arg;
@


1.69
log
@Allow repeat count to be specified in mode key tables with bind-key -R,
and set the default repeat count to 5 for WheelUp and WheelDown in
copy-mode.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.68 2016/04/27 09:39:09 nicm Exp $ */
d57 1
a57 1
const struct mode_key_cmdstr mode_key_cmdstr_edit[] = {
d92 1
a92 1
const struct mode_key_cmdstr mode_key_cmdstr_choice[] = {
d117 1
a117 1
const struct mode_key_cmdstr mode_key_cmdstr_copy[] = {
d173 1
a173 1
const struct mode_key_entry mode_key_vi_edit[] = {
d232 1
a232 1
const struct mode_key_entry mode_key_vi_choice[] = {
d281 1
a281 1
const struct mode_key_entry mode_key_vi_copy[] = {
d362 1
a362 1
const struct mode_key_entry mode_key_emacs_edit[] = {
d398 1
a398 1
const struct mode_key_entry mode_key_emacs_choice[] = {
d445 1
a445 1
const struct mode_key_entry mode_key_emacs_copy[] = {
@


1.68
log
@Add next/previous paragraph, from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.67 2016/03/18 07:28:27 nicm Exp $ */
d53 1
d174 52
a225 52
	{ '\003' /* C-c */,	    0, MODEKEYEDIT_CANCEL },
	{ '\010' /* C-h */,	    0, MODEKEYEDIT_BACKSPACE },
	{ '\011' /* Tab */,	    0, MODEKEYEDIT_COMPLETE },
	{ '\025' /* C-u */,	    0, MODEKEYEDIT_DELETELINE },
	{ '\027' /* C-w */,	    0, MODEKEYEDIT_DELETEWORD },
	{ '\033' /* Escape */,	    0, MODEKEYEDIT_SWITCHMODE },
	{ '\n',			    0, MODEKEYEDIT_ENTER },
	{ '\r',			    0, MODEKEYEDIT_ENTER },
	{ KEYC_BSPACE,		    0, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		    0, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		    0, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		    0, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		    0, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		    0, MODEKEYEDIT_HISTORYUP },
	{ KEYC_HOME,		    0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_END,		    0, MODEKEYEDIT_ENDOFLINE },

	{ '$',			    1, MODEKEYEDIT_ENDOFLINE },
	{ '0',			    1, MODEKEYEDIT_STARTOFLINE },
	{ 'A',			    1, MODEKEYEDIT_SWITCHMODEAPPENDLINE },
	{ 'B',			    1, MODEKEYEDIT_PREVIOUSSPACE },
	{ 'C',			    1, MODEKEYEDIT_SWITCHMODECHANGELINE },
	{ 'D',			    1, MODEKEYEDIT_DELETETOENDOFLINE },
	{ 'E',			    1, MODEKEYEDIT_NEXTSPACEEND },
	{ 'I',			    1, MODEKEYEDIT_SWITCHMODEBEGINLINE },
	{ 'S',			    1, MODEKEYEDIT_SWITCHMODESUBSTITUTELINE },
	{ 'W',			    1, MODEKEYEDIT_NEXTSPACE },
	{ 'X',			    1, MODEKEYEDIT_BACKSPACE },
	{ '\003' /* C-c */,	    1, MODEKEYEDIT_CANCEL },
	{ '\010' /* C-h */,	    1, MODEKEYEDIT_BACKSPACE },
	{ '\n',			    1, MODEKEYEDIT_ENTER },
	{ '\r',			    1, MODEKEYEDIT_ENTER },
	{ '^',			    1, MODEKEYEDIT_STARTOFLINE },
	{ 'a',			    1, MODEKEYEDIT_SWITCHMODEAPPEND },
	{ 'b',			    1, MODEKEYEDIT_PREVIOUSWORD },
	{ 'd',			    1, MODEKEYEDIT_DELETELINE },
	{ 'e',			    1, MODEKEYEDIT_NEXTWORDEND },
	{ 'h',			    1, MODEKEYEDIT_CURSORLEFT },
	{ 'i',			    1, MODEKEYEDIT_SWITCHMODE },
	{ 'j',			    1, MODEKEYEDIT_HISTORYDOWN },
	{ 'k',			    1, MODEKEYEDIT_HISTORYUP },
	{ 'l',			    1, MODEKEYEDIT_CURSORRIGHT },
	{ 'p',			    1, MODEKEYEDIT_PASTE },
	{ 's',			    1, MODEKEYEDIT_SWITCHMODESUBSTITUTE },
	{ 'w',			    1, MODEKEYEDIT_NEXTWORD },
	{ 'x',			    1, MODEKEYEDIT_DELETE },
	{ KEYC_BSPACE,		    1, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		    1, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		    1, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		    1, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		    1, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		    1, MODEKEYEDIT_HISTORYUP },
d227 1
a227 1
	{ 0,			   -1, 0 }
d233 42
a274 42
	{ '0' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '\002' /* C-b */,	    0, MODEKEYCHOICE_PAGEUP },
	{ '\003' /* C-c */,	    0, MODEKEYCHOICE_CANCEL },
	{ '\005' /* C-e */,	    0, MODEKEYCHOICE_SCROLLDOWN },
	{ '\006' /* C-f */,	    0, MODEKEYCHOICE_PAGEDOWN },
	{ '\031' /* C-y */,	    0, MODEKEYCHOICE_SCROLLUP },
	{ '\n',			    0, MODEKEYCHOICE_CHOOSE },
	{ '\r',			    0, MODEKEYCHOICE_CHOOSE },
	{ 'j',			    0, MODEKEYCHOICE_DOWN },
	{ 'k',			    0, MODEKEYCHOICE_UP },
	{ 'q',			    0, MODEKEYCHOICE_CANCEL },
	{ KEYC_HOME,                0, MODEKEYCHOICE_STARTOFLIST },
	{ 'g',                      0, MODEKEYCHOICE_STARTOFLIST },
	{ 'H',                      0, MODEKEYCHOICE_TOPLINE },
	{ 'L',                      0, MODEKEYCHOICE_BOTTOMLINE },
	{ 'G',                      0, MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_END,                 0, MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_BSPACE,		    0, MODEKEYCHOICE_BACKSPACE },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCHOICE_SCROLLDOWN },
	{ KEYC_DOWN,		    0, MODEKEYCHOICE_DOWN },
	{ KEYC_NPAGE,		    0, MODEKEYCHOICE_PAGEDOWN },
	{ KEYC_PPAGE,		    0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCHOICE_SCROLLUP },
	{ KEYC_UP,		    0, MODEKEYCHOICE_UP },
	{ ' ',			    0, MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_LEFT,		    0, MODEKEYCHOICE_TREE_COLLAPSE },
	{ KEYC_RIGHT,		    0, MODEKEYCHOICE_TREE_EXPAND },
	{ KEYC_LEFT | KEYC_CTRL,    0, MODEKEYCHOICE_TREE_COLLAPSE_ALL },
	{ KEYC_RIGHT | KEYC_CTRL,   0, MODEKEYCHOICE_TREE_EXPAND_ALL },
	{ KEYC_MOUSEDOWN1_PANE,     0, MODEKEYCHOICE_CHOOSE },
	{ KEYC_MOUSEDOWN3_PANE,     0, MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCHOICE_UP },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCHOICE_DOWN },
d276 1
a276 1
	{ 0,			   -1, 0 }
d282 74
a355 74
	{ ' ',			    0, MODEKEYCOPY_STARTSELECTION },
	{ '"',			    0, MODEKEYCOPY_STARTNAMEDBUFFER },
	{ '$',			    0, MODEKEYCOPY_ENDOFLINE },
	{ ',',			    0, MODEKEYCOPY_JUMPREVERSE },
	{ ';',			    0, MODEKEYCOPY_JUMPAGAIN },
	{ '/',			    0, MODEKEYCOPY_SEARCHDOWN },
	{ '0',			    0, MODEKEYCOPY_STARTOFLINE },
	{ '1',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '2',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '3',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '4',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '5',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '6',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '7',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '8',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '9',			    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ ':',			    0, MODEKEYCOPY_GOTOLINE },
	{ '?',			    0, MODEKEYCOPY_SEARCHUP },
	{ 'A',			    0, MODEKEYCOPY_APPENDSELECTION },
	{ 'B',			    0, MODEKEYCOPY_PREVIOUSSPACE },
	{ 'D',			    0, MODEKEYCOPY_COPYENDOFLINE },
	{ 'E',			    0, MODEKEYCOPY_NEXTSPACEEND },
	{ 'F',			    0, MODEKEYCOPY_JUMPBACK },
	{ 'G',			    0, MODEKEYCOPY_HISTORYBOTTOM },
	{ 'H',			    0, MODEKEYCOPY_TOPLINE },
	{ 'J',			    0, MODEKEYCOPY_SCROLLDOWN },
	{ 'K',			    0, MODEKEYCOPY_SCROLLUP },
	{ 'L',			    0, MODEKEYCOPY_BOTTOMLINE },
	{ 'M',			    0, MODEKEYCOPY_MIDDLELINE },
	{ 'N',			    0, MODEKEYCOPY_SEARCHREVERSE },
	{ 'T',			    0, MODEKEYCOPY_JUMPTOBACK },
	{ 'V',			    0, MODEKEYCOPY_SELECTLINE },
	{ 'W',			    0, MODEKEYCOPY_NEXTSPACE },
	{ '\002' /* C-b */,	    0, MODEKEYCOPY_PREVIOUSPAGE },
	{ '\003' /* C-c */,	    0, MODEKEYCOPY_CANCEL },
	{ '\004' /* C-d */,	    0, MODEKEYCOPY_HALFPAGEDOWN },
	{ '\005' /* C-e */,	    0, MODEKEYCOPY_SCROLLDOWN },
	{ '\006' /* C-f */,	    0, MODEKEYCOPY_NEXTPAGE },
	{ '\010' /* C-h */,	    0, MODEKEYCOPY_LEFT },
	{ '\025' /* C-u */,	    0, MODEKEYCOPY_HALFPAGEUP },
	{ '\031' /* C-y */,	    0, MODEKEYCOPY_SCROLLUP },
	{ '\033' /* Escape */,	    0, MODEKEYCOPY_CLEARSELECTION },
	{ '\n',			    0, MODEKEYCOPY_COPYSELECTION },
	{ '\r',			    0, MODEKEYCOPY_COPYSELECTION },
	{ '^',			    0, MODEKEYCOPY_BACKTOINDENTATION },
	{ 'b',			    0, MODEKEYCOPY_PREVIOUSWORD },
	{ 'e',			    0, MODEKEYCOPY_NEXTWORDEND },
	{ 'f',			    0, MODEKEYCOPY_JUMP },
	{ 'g',			    0, MODEKEYCOPY_HISTORYTOP },
	{ 'h',			    0, MODEKEYCOPY_LEFT },
	{ 'j',			    0, MODEKEYCOPY_DOWN },
	{ 'k',			    0, MODEKEYCOPY_UP },
	{ 'l',			    0, MODEKEYCOPY_RIGHT },
	{ 'n',			    0, MODEKEYCOPY_SEARCHAGAIN },
	{ 'o',			    0, MODEKEYCOPY_OTHEREND },
	{ 't',			    0, MODEKEYCOPY_JUMPTO },
	{ 'q',			    0, MODEKEYCOPY_CANCEL },
	{ 'v',			    0, MODEKEYCOPY_RECTANGLETOGGLE },
	{ 'w',			    0, MODEKEYCOPY_NEXTWORD },
	{ '{',			    0, MODEKEYCOPY_PREVIOUSPARAGRAPH },
	{ '}',			    0, MODEKEYCOPY_NEXTPARAGRAPH },
	{ KEYC_BSPACE,		    0, MODEKEYCOPY_LEFT },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCOPY_SCROLLDOWN },
	{ KEYC_DOWN,		    0, MODEKEYCOPY_DOWN },
	{ KEYC_LEFT,		    0, MODEKEYCOPY_LEFT },
	{ KEYC_NPAGE,		    0, MODEKEYCOPY_NEXTPAGE },
	{ KEYC_PPAGE,		    0, MODEKEYCOPY_PREVIOUSPAGE },
	{ KEYC_RIGHT,		    0, MODEKEYCOPY_RIGHT },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCOPY_SCROLLUP },
	{ KEYC_UP,		    0, MODEKEYCOPY_UP },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCOPY_SCROLLUP },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCOPY_SCROLLDOWN },
	{ KEYC_MOUSEDRAG1_PANE,     0, MODEKEYCOPY_STARTSELECTION },
	{ KEYC_MOUSEDRAGEND1_PANE,  0, MODEKEYCOPY_COPYSELECTION },
d357 1
a357 1
	{ 0,			   -1, 0 }
d363 29
a391 29
	{ '\001' /* C-a */,	    0, MODEKEYEDIT_STARTOFLINE },
	{ '\002' /* C-b */,	    0, MODEKEYEDIT_CURSORLEFT },
	{ '\003' /* C-c */,	    0, MODEKEYEDIT_CANCEL },
	{ '\004' /* C-d */,	    0, MODEKEYEDIT_DELETE },
	{ '\005' /* C-e */,	    0, MODEKEYEDIT_ENDOFLINE },
	{ '\006' /* C-f */,	    0, MODEKEYEDIT_CURSORRIGHT },
	{ '\010' /* C-H */,	    0, MODEKEYEDIT_BACKSPACE },
	{ '\011' /* Tab */,	    0, MODEKEYEDIT_COMPLETE },
	{ '\013' /* C-k */,	    0, MODEKEYEDIT_DELETETOENDOFLINE },
	{ '\016' /* C-n */,	    0, MODEKEYEDIT_HISTORYDOWN },
	{ '\020' /* C-p */,	    0, MODEKEYEDIT_HISTORYUP },
	{ '\024' /* C-t */,	    0, MODEKEYEDIT_TRANSPOSECHARS },
	{ '\025' /* C-u */,	    0, MODEKEYEDIT_DELETELINE },
	{ '\027' /* C-w */,	    0, MODEKEYEDIT_DELETEWORD },
	{ '\031' /* C-y */,	    0, MODEKEYEDIT_PASTE },
	{ '\033' /* Escape */,	    0, MODEKEYEDIT_CANCEL },
	{ '\n',			    0, MODEKEYEDIT_ENTER },
	{ '\r',			    0, MODEKEYEDIT_ENTER },
	{ 'b' | KEYC_ESCAPE,	    0, MODEKEYEDIT_PREVIOUSWORD },
	{ 'f' | KEYC_ESCAPE,	    0, MODEKEYEDIT_NEXTWORDEND },
	{ 'm' | KEYC_ESCAPE,	    0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_BSPACE,		    0, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		    0, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		    0, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		    0, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		    0, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		    0, MODEKEYEDIT_HISTORYUP },
	{ KEYC_HOME,		    0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_END,		    0, MODEKEYEDIT_ENDOFLINE },
d393 1
a393 1
	{ 0,			   -1, 0 }
d399 40
a438 40
	{ '0' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '\003' /* C-c */,	    0, MODEKEYCHOICE_CANCEL },
	{ '\016' /* C-n */,	    0, MODEKEYCHOICE_DOWN },
	{ '\020' /* C-p */,	    0, MODEKEYCHOICE_UP },
	{ '\026' /* C-v */,	    0, MODEKEYCHOICE_PAGEDOWN },
	{ '\033' /* Escape */,	    0, MODEKEYCHOICE_CANCEL },
	{ '\n',			    0, MODEKEYCHOICE_CHOOSE },
	{ '\r',			    0, MODEKEYCHOICE_CHOOSE },
	{ 'q',			    0, MODEKEYCHOICE_CANCEL },
	{ 'v' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_HOME,                0, MODEKEYCHOICE_STARTOFLIST },
	{ '<' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_STARTOFLIST },
	{ 'R' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_TOPLINE },
	{ '>' | KEYC_ESCAPE,	    0, MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_END,                 0, MODEKEYCHOICE_ENDOFLIST },
	{ KEYC_BSPACE,		    0, MODEKEYCHOICE_BACKSPACE },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCHOICE_SCROLLDOWN },
	{ KEYC_DOWN,		    0, MODEKEYCHOICE_DOWN },
	{ KEYC_NPAGE,		    0, MODEKEYCHOICE_PAGEDOWN },
	{ KEYC_PPAGE,		    0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCHOICE_SCROLLUP },
	{ KEYC_UP,		    0, MODEKEYCHOICE_UP },
	{ ' ',			    0, MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_LEFT,		    0, MODEKEYCHOICE_TREE_COLLAPSE },
	{ KEYC_RIGHT,		    0, MODEKEYCHOICE_TREE_EXPAND },
	{ KEYC_LEFT | KEYC_CTRL,    0, MODEKEYCHOICE_TREE_COLLAPSE_ALL },
	{ KEYC_RIGHT | KEYC_CTRL,   0, MODEKEYCHOICE_TREE_EXPAND_ALL },
	{ KEYC_MOUSEDOWN1_PANE,     0, MODEKEYCHOICE_CHOOSE },
	{ KEYC_MOUSEDOWN3_PANE,     0, MODEKEYCHOICE_TREE_TOGGLE },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCHOICE_UP },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCHOICE_DOWN },
d440 1
a440 1
	{ 0,			   -1, 0 }
d446 61
a506 61
	{ ' ',			    0, MODEKEYCOPY_NEXTPAGE },
	{ ',',			    0, MODEKEYCOPY_JUMPREVERSE },
	{ ';',			    0, MODEKEYCOPY_JUMPAGAIN },
	{ '1' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	    0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '<' | KEYC_ESCAPE,	    0, MODEKEYCOPY_HISTORYTOP },
	{ '>' | KEYC_ESCAPE,	    0, MODEKEYCOPY_HISTORYBOTTOM },
	{ 'F',			    0, MODEKEYCOPY_JUMPBACK },
	{ 'N',			    0, MODEKEYCOPY_SEARCHREVERSE },
	{ 'R' | KEYC_ESCAPE,	    0, MODEKEYCOPY_TOPLINE },
	{ 'R',			    0, MODEKEYCOPY_RECTANGLETOGGLE },
	{ 'T',			    0, MODEKEYCOPY_JUMPTOBACK },
	{ '\000' /* C-Space */,	    0, MODEKEYCOPY_STARTSELECTION },
	{ '\001' /* C-a */,	    0, MODEKEYCOPY_STARTOFLINE },
	{ '\002' /* C-b */,	    0, MODEKEYCOPY_LEFT },
	{ '\003' /* C-c */,	    0, MODEKEYCOPY_CANCEL },
	{ '\005' /* C-e */,	    0, MODEKEYCOPY_ENDOFLINE },
	{ '\006' /* C-f */,	    0, MODEKEYCOPY_RIGHT },
	{ '\007' /* C-g */,	    0, MODEKEYCOPY_CLEARSELECTION },
	{ '\013' /* C-k */,	    0, MODEKEYCOPY_COPYENDOFLINE },
	{ '\016' /* C-n */,	    0, MODEKEYCOPY_DOWN },
	{ '\020' /* C-p */,	    0, MODEKEYCOPY_UP },
	{ '\022' /* C-r */,	    0, MODEKEYCOPY_SEARCHUP },
	{ '\023' /* C-s */,	    0, MODEKEYCOPY_SEARCHDOWN },
	{ '\026' /* C-v */,	    0, MODEKEYCOPY_NEXTPAGE },
	{ '\027' /* C-w */,	    0, MODEKEYCOPY_COPYSELECTION },
	{ '\033' /* Escape */,	    0, MODEKEYCOPY_CANCEL },
	{ 'b' | KEYC_ESCAPE,	    0, MODEKEYCOPY_PREVIOUSWORD },
	{ 'f',			    0, MODEKEYCOPY_JUMP },
	{ 'f' | KEYC_ESCAPE,	    0, MODEKEYCOPY_NEXTWORDEND },
	{ 'g',			    0, MODEKEYCOPY_GOTOLINE },
	{ 'm' | KEYC_ESCAPE,	    0, MODEKEYCOPY_BACKTOINDENTATION },
	{ 'n',			    0, MODEKEYCOPY_SEARCHAGAIN },
	{ 'q',			    0, MODEKEYCOPY_CANCEL },
	{ 'r' | KEYC_ESCAPE,	    0, MODEKEYCOPY_MIDDLELINE },
	{ 't',			    0, MODEKEYCOPY_JUMPTO },
	{ 'v' | KEYC_ESCAPE,	    0, MODEKEYCOPY_PREVIOUSPAGE },
	{ 'w' | KEYC_ESCAPE,	    0, MODEKEYCOPY_COPYSELECTION },
	{ '{' | KEYC_ESCAPE,	    0, MODEKEYCOPY_PREVIOUSPARAGRAPH },
	{ '}' | KEYC_ESCAPE,	    0, MODEKEYCOPY_NEXTPARAGRAPH },
	{ KEYC_DOWN | KEYC_CTRL,    0, MODEKEYCOPY_SCROLLDOWN },
	{ KEYC_DOWN | KEYC_ESCAPE,  0, MODEKEYCOPY_HALFPAGEDOWN },
	{ KEYC_DOWN,		    0, MODEKEYCOPY_DOWN },
	{ KEYC_LEFT,		    0, MODEKEYCOPY_LEFT },
	{ KEYC_NPAGE,		    0, MODEKEYCOPY_NEXTPAGE },
	{ KEYC_PPAGE,		    0, MODEKEYCOPY_PREVIOUSPAGE },
	{ KEYC_RIGHT,		    0, MODEKEYCOPY_RIGHT },
	{ KEYC_UP | KEYC_CTRL,	    0, MODEKEYCOPY_SCROLLUP },
	{ KEYC_UP | KEYC_ESCAPE,    0, MODEKEYCOPY_HALFPAGEUP },
	{ KEYC_UP,		    0, MODEKEYCOPY_UP },
	{ KEYC_WHEELUP_PANE,        0, MODEKEYCOPY_SCROLLUP },
	{ KEYC_WHEELDOWN_PANE,      0, MODEKEYCOPY_SCROLLDOWN },
	{ KEYC_MOUSEDRAG1_PANE,     0, MODEKEYCOPY_STARTSELECTION },
	{ KEYC_MOUSEDRAGEND1_PANE,  0, MODEKEYCOPY_COPYSELECTION },
d508 1
a508 1
	{ 0,			   -1, 0 }
d590 1
d607 2
a608 1
mode_key_lookup(struct mode_key_data *mdata, key_code key, const char **arg)
d619 2
@


1.67
log
@Instead of reusing MouseUp at the finish of a drag, add a new key
MouseDragEnd. It can be useful to bind them separately in copy mode.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.66 2016/03/01 12:04:43 nicm Exp $ */
d143 1
d150 1
d340 2
d490 2
@


1.66
log
@When a mouse drag is finished, fire a MouseUp key press, instead of
doing the drag end in code. From Stephen Coakley.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.65 2016/01/19 15:59:12 nicm Exp $ */
d350 1
a350 1
	{ KEYC_MOUSEUP1_PANE,       0, MODEKEYCOPY_COPYSELECTION },
d499 1
a499 1
	{ KEYC_MOUSEUP1_PANE,       0, MODEKEYCOPY_COPYSELECTION },
@


1.65
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.64 2015/11/12 11:05:34 nicm Exp $ */
d350 1
d499 1
@


1.64
log
@Support UTF-8 key bindings by expanding the key type from int to
uint64_t and converting UTF-8 to Unicode on input and the reverse on
output. (This allows key bindings, there are still omissions - the
largest being that the various prompts do not accept UTF-8.)
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.63 2015/05/08 16:33:29 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2008 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.63
log
@mode_key_entry can go into mode-key.c; also a few spaces->tabs.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.62 2015/04/19 21:34:21 nicm Exp $ */
d43 1
a43 1
	int			key;
d526 9
a534 3
	if (mbind1->mode != mbind2->mode)
		return (mbind1->mode - mbind2->mode);
	return (mbind1->key - mbind2->key);
d597 1
a597 1
mode_key_lookup(struct mode_key_data *mdata, int key, const char **arg)
@


1.62
log
@Rewrite of tmux mouse support which was a mess. Instead of having
options for "mouse-this" and "mouse-that", mouse events may be bound as
keys and there is one option "mouse" that turns on mouse support
entirely (set -g mouse on).

See the new MOUSE SUPPORT section of the man page for description of the
key names and new flags (-t= to specify the pane or window under mouse
as a target, and send-keys -M to pass through a mouse event).

The default builtin bindings for the mouse are:

    bind -n   MouseDown1Pane select-pane -t=; send-keys -M
    bind -n MouseDown1Status select-window -t=
    bind -n   MouseDrag1Pane copy-mode -M
    bind -n MouseDrag1Border resize-pane -M

To get the effect of turning mode-mouse off, do:

    unbind -n MouseDrag1Pane
    unbind -temacs-copy MouseDrag1Pane

The old mouse options are now gone, set-option -q may be used to
suppress warnings if mixing configuration files.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.61 2014/11/06 09:17:25 nicm Exp $ */
d40 14
@


1.61
log
@Add V for select line with vi(1) keys. From Juho Pohjala.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.60 2014/08/11 22:39:57 nicm Exp $ */
d254 4
d333 3
d415 4
d481 3
@


1.60
log
@No need to repeat other-end more than once, from Juho Pohjala. Also add
it to the commands list while here.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.59 2014/05/13 07:54:20 nicm Exp $ */
d292 1
@


1.59
log
@Add a copy mode key binding to copy to a named buffer. From J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.58 2014/03/31 21:39:31 nicm Exp $ */
d133 1
@


1.58
log
@Add setb -a to append and a copy mode append command, from J Raynor with
minor changes.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.57 2014/03/31 21:36:43 nicm Exp $ */
d144 1
d261 1
@


1.57
log
@Add start-of-list, end-of-list, top-line and bottom-line in choice mode,
from madmaverick9 at roxxmail dot eu, similar diff a few days later from
Marcel Partap.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.56 2014/02/14 12:35:58 nicm Exp $ */
d103 1
d276 1
@


1.56
log
@Make C-j the same as C-m, from Simon Nicolussi.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.55 2013/10/23 11:31:03 nicm Exp $ */
d79 1
d83 1
d89 2
d233 6
d385 5
@


1.55
log
@Key to swap to other end of selection (bound to o with vi keys), from J
Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.54 2013/07/05 14:44:06 nicm Exp $ */
d156 1
d180 1
d224 1
d287 1
d336 1
d371 1
@


1.54
log
@Whitespace nits, from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.53 2013/07/05 14:38:22 nicm Exp $ */
d295 1
@


1.53
log
@Implement s, S, C mode switch commands in vi(1) mode, from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.52 2013/03/22 15:52:40 nicm Exp $ */
d234 2
a235 2
	{ KEYC_LEFT,                0, MODEKEYCHOICE_TREE_COLLAPSE },
	{ KEYC_RIGHT,               0, MODEKEYCHOICE_TREE_EXPAND },
d376 2
a377 2
	{ KEYC_LEFT,                0, MODEKEYCHOICE_TREE_COLLAPSE },
	{ KEYC_RIGHT,               0, MODEKEYCHOICE_TREE_EXPAND },
@


1.52
log
@Add copy-pipe mode command to copy selection and also pipe to a command.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.51 2013/03/21 16:54:37 nicm Exp $ */
d38 1
a38 3
 * (MODEKEYEDIT_SWITCHMODE, MODEKEYEDIT_SWITCHMODEAPPEND,
 * MODEKEYEDIT_SWITCHMODEAPPENDLINE, and MODEKEYEDIT_SWITCHMODEBEGINLINE)
 * are special-cased to do this.
d68 3
d170 1
d174 1
d191 1
d552 3
@


1.51
log
@Fix a couple of memory leaks, from Romain Francoise.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.50 2012/11/19 10:51:25 nicm Exp $ */
d102 1
d517 1
d531 1
a531 1
mode_key_lookup(struct mode_key_data *mdata, int key)
d551 2
@


1.50
log
@Add halfpage commands to mode command string table (missed by accident),
from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.49 2012/10/09 18:08:21 nicm Exp $ */
a415 1
	{ 'N',			    0, MODEKEYCOPY_SEARCHREVERSE },
@


1.49
log
@Add tree keys to vi mode too, missed by accident.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.48 2012/10/02 08:16:28 nicm Exp $ */
d108 2
@


1.48
log
@Allow session tree (C-b s) to expand and collapse sessions with
left/right/space keys. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.47 2012/08/27 21:29:23 nicm Exp $ */
d86 1
d88 1
d227 2
@


1.47
log
@Instead of requiring a prompt to enter all numbers >10, go back to
0-9a-z and add A-Z and enter the prompt when M-0 to M-9 are pressed
(like in copy mode). Prompted by request from mcbride@@, help from Thomas
Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.46 2012/08/11 06:45:33 nicm Exp $ */
d86 3
d144 47
a190 47
	{ '\003' /* C-c */,	0, MODEKEYEDIT_CANCEL },
	{ '\010' /* C-h */, 	0, MODEKEYEDIT_BACKSPACE },
	{ '\011' /* Tab */,	0, MODEKEYEDIT_COMPLETE },
	{ '\025' /* C-u */,	0, MODEKEYEDIT_DELETELINE },
	{ '\027' /* C-w */,	0, MODEKEYEDIT_DELETEWORD },
	{ '\033' /* Escape */,	0, MODEKEYEDIT_SWITCHMODE },
	{ '\r',			0, MODEKEYEDIT_ENTER },
	{ KEYC_BSPACE,		0, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		0, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		0, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		0, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		0, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		0, MODEKEYEDIT_HISTORYUP },
	{ KEYC_HOME,		0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_END,		0, MODEKEYEDIT_ENDOFLINE },

	{ '$',			1, MODEKEYEDIT_ENDOFLINE },
	{ '0',			1, MODEKEYEDIT_STARTOFLINE },
	{ 'A',			1, MODEKEYEDIT_SWITCHMODEAPPENDLINE },
	{ 'B',			1, MODEKEYEDIT_PREVIOUSSPACE },
	{ 'D',			1, MODEKEYEDIT_DELETETOENDOFLINE },
	{ 'E',			1, MODEKEYEDIT_NEXTSPACEEND },
	{ 'I',			1, MODEKEYEDIT_SWITCHMODEBEGINLINE },
	{ 'W',			1, MODEKEYEDIT_NEXTSPACE },
	{ 'X',			1, MODEKEYEDIT_BACKSPACE },
	{ '\003' /* C-c */,	1, MODEKEYEDIT_CANCEL },
	{ '\010' /* C-h */, 	1, MODEKEYEDIT_BACKSPACE },
	{ '\r',			1, MODEKEYEDIT_ENTER },
	{ '^',			1, MODEKEYEDIT_STARTOFLINE },
	{ 'a',			1, MODEKEYEDIT_SWITCHMODEAPPEND },
	{ 'b',			1, MODEKEYEDIT_PREVIOUSWORD },
	{ 'd',			1, MODEKEYEDIT_DELETELINE },
	{ 'e',			1, MODEKEYEDIT_NEXTWORDEND },
	{ 'h',			1, MODEKEYEDIT_CURSORLEFT },
	{ 'i',			1, MODEKEYEDIT_SWITCHMODE },
	{ 'j',			1, MODEKEYEDIT_HISTORYDOWN },
	{ 'k',			1, MODEKEYEDIT_HISTORYUP },
	{ 'l',			1, MODEKEYEDIT_CURSORRIGHT },
	{ 'p',			1, MODEKEYEDIT_PASTE },
	{ 'w',			1, MODEKEYEDIT_NEXTWORD },
	{ 'x',			1, MODEKEYEDIT_DELETE },
	{ KEYC_BSPACE,		1, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		1, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		1, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		1, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		1, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		1, MODEKEYEDIT_HISTORYUP },
d192 1
a192 1
	{ 0,		       -1, 0 }
d198 29
a226 26
	{ '0' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '\002' /* C-b */,     0, MODEKEYCHOICE_PAGEUP },
	{ '\003' /* C-c */,	0, MODEKEYCHOICE_CANCEL },
	{ '\005' /* C-e */,     0, MODEKEYCHOICE_SCROLLDOWN },
	{ '\006' /* C-f */,     0, MODEKEYCHOICE_PAGEDOWN },
	{ '\031' /* C-y */,     0, MODEKEYCHOICE_SCROLLUP },
	{ '\r',			0, MODEKEYCHOICE_CHOOSE },
	{ 'j',			0, MODEKEYCHOICE_DOWN },
	{ 'k',			0, MODEKEYCHOICE_UP },
	{ 'q',			0, MODEKEYCHOICE_CANCEL },
	{ KEYC_BSPACE,		0, MODEKEYCHOICE_BACKSPACE },
	{ KEYC_DOWN | KEYC_CTRL,0, MODEKEYCHOICE_SCROLLDOWN },
	{ KEYC_DOWN,		0, MODEKEYCHOICE_DOWN },
	{ KEYC_NPAGE,		0, MODEKEYCHOICE_PAGEDOWN },
	{ KEYC_PPAGE,		0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_UP | KEYC_CTRL,	0, MODEKEYCHOICE_SCROLLUP },
	{ KEYC_UP,		0, MODEKEYCHOICE_UP },
d228 1
a228 1
	{ 0,			-1, 0 }
d234 63
a296 63
	{ ' ',			0, MODEKEYCOPY_STARTSELECTION },
	{ '$',			0, MODEKEYCOPY_ENDOFLINE },
	{ ',',			0, MODEKEYCOPY_JUMPREVERSE },
	{ ';',			0, MODEKEYCOPY_JUMPAGAIN },
	{ '/',			0, MODEKEYCOPY_SEARCHDOWN },
	{ '0',			0, MODEKEYCOPY_STARTOFLINE },
	{ '1',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '2',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '3',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '4',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '5',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '6',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '7',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '8',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '9',			0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ ':',			0, MODEKEYCOPY_GOTOLINE },
	{ '?',			0, MODEKEYCOPY_SEARCHUP },
	{ 'B',			0, MODEKEYCOPY_PREVIOUSSPACE },
	{ 'D',			0, MODEKEYCOPY_COPYENDOFLINE },
	{ 'E',			0, MODEKEYCOPY_NEXTSPACEEND },
	{ 'F',			0, MODEKEYCOPY_JUMPBACK },
	{ 'G',			0, MODEKEYCOPY_HISTORYBOTTOM },
	{ 'H',			0, MODEKEYCOPY_TOPLINE },
	{ 'J',			0, MODEKEYCOPY_SCROLLDOWN },
	{ 'K',			0, MODEKEYCOPY_SCROLLUP },
	{ 'L',			0, MODEKEYCOPY_BOTTOMLINE },
	{ 'M',			0, MODEKEYCOPY_MIDDLELINE },
	{ 'N',			0, MODEKEYCOPY_SEARCHREVERSE },
	{ 'T',			0, MODEKEYCOPY_JUMPTOBACK },
	{ 'W',			0, MODEKEYCOPY_NEXTSPACE },
	{ '\002' /* C-b */,	0, MODEKEYCOPY_PREVIOUSPAGE },
	{ '\003' /* C-c */,	0, MODEKEYCOPY_CANCEL },
	{ '\004' /* C-d */,	0, MODEKEYCOPY_HALFPAGEDOWN },
	{ '\005' /* C-e */,	0, MODEKEYCOPY_SCROLLDOWN },
	{ '\006' /* C-f */,	0, MODEKEYCOPY_NEXTPAGE },
	{ '\010' /* C-h */,	0, MODEKEYCOPY_LEFT },
	{ '\025' /* C-u */,	0, MODEKEYCOPY_HALFPAGEUP },
	{ '\031' /* C-y */,	0, MODEKEYCOPY_SCROLLUP },
	{ '\033' /* Escape */,	0, MODEKEYCOPY_CLEARSELECTION },
	{ '\r',			0, MODEKEYCOPY_COPYSELECTION },
	{ '^',			0, MODEKEYCOPY_BACKTOINDENTATION },
	{ 'b',			0, MODEKEYCOPY_PREVIOUSWORD },
	{ 'e',                  0, MODEKEYCOPY_NEXTWORDEND },
	{ 'f',			0, MODEKEYCOPY_JUMP },
	{ 'g',			0, MODEKEYCOPY_HISTORYTOP },
	{ 'h',			0, MODEKEYCOPY_LEFT },
	{ 'j',			0, MODEKEYCOPY_DOWN },
	{ 'k',			0, MODEKEYCOPY_UP },
	{ 'l',			0, MODEKEYCOPY_RIGHT },
	{ 'n',			0, MODEKEYCOPY_SEARCHAGAIN },
	{ 't',			0, MODEKEYCOPY_JUMPTO },
	{ 'q',			0, MODEKEYCOPY_CANCEL },
	{ 'v',			0, MODEKEYCOPY_RECTANGLETOGGLE },
	{ 'w',			0, MODEKEYCOPY_NEXTWORD },
	{ KEYC_BSPACE,		0, MODEKEYCOPY_LEFT },
	{ KEYC_DOWN | KEYC_CTRL,0, MODEKEYCOPY_SCROLLDOWN },
	{ KEYC_DOWN,		0, MODEKEYCOPY_DOWN },
	{ KEYC_LEFT,		0, MODEKEYCOPY_LEFT },
	{ KEYC_NPAGE,		0, MODEKEYCOPY_NEXTPAGE },
	{ KEYC_PPAGE,		0, MODEKEYCOPY_PREVIOUSPAGE },
	{ KEYC_RIGHT,		0, MODEKEYCOPY_RIGHT },
	{ KEYC_UP | KEYC_CTRL,	0, MODEKEYCOPY_SCROLLUP },
	{ KEYC_UP,		0, MODEKEYCOPY_UP },
d298 1
a298 1
	{ 0,			-1, 0 }
d304 28
a331 28
	{ '\001' /* C-a */,	0, MODEKEYEDIT_STARTOFLINE },
	{ '\002' /* C-b */,	0, MODEKEYEDIT_CURSORLEFT },
	{ '\003' /* C-c */,	0, MODEKEYEDIT_CANCEL },
	{ '\004' /* C-d */,	0, MODEKEYEDIT_DELETE },
	{ '\005' /* C-e */,	0, MODEKEYEDIT_ENDOFLINE },
	{ '\006' /* C-f */,	0, MODEKEYEDIT_CURSORRIGHT },
	{ '\010' /* C-H */,	0, MODEKEYEDIT_BACKSPACE },
	{ '\011' /* Tab */,	0, MODEKEYEDIT_COMPLETE },
	{ '\013' /* C-k */,	0, MODEKEYEDIT_DELETETOENDOFLINE },
	{ '\016' /* C-n */,	0, MODEKEYEDIT_HISTORYDOWN },
	{ '\020' /* C-p */,	0, MODEKEYEDIT_HISTORYUP },
	{ '\024' /* C-t */,	0, MODEKEYEDIT_TRANSPOSECHARS },
	{ '\025' /* C-u */,	0, MODEKEYEDIT_DELETELINE },
	{ '\027' /* C-w */,	0, MODEKEYEDIT_DELETEWORD },
	{ '\031' /* C-y */,	0, MODEKEYEDIT_PASTE },
	{ '\033' /* Escape */,	0, MODEKEYEDIT_CANCEL },
	{ '\r',			0, MODEKEYEDIT_ENTER },
	{ 'b' | KEYC_ESCAPE,	0, MODEKEYEDIT_PREVIOUSWORD },
	{ 'f' | KEYC_ESCAPE,	0, MODEKEYEDIT_NEXTWORDEND },
	{ 'm' | KEYC_ESCAPE,	0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_BSPACE,		0, MODEKEYEDIT_BACKSPACE },
	{ KEYC_DC,		0, MODEKEYEDIT_DELETE },
	{ KEYC_DOWN,		0, MODEKEYEDIT_HISTORYDOWN },
	{ KEYC_LEFT,		0, MODEKEYEDIT_CURSORLEFT },
	{ KEYC_RIGHT,		0, MODEKEYEDIT_CURSORRIGHT },
	{ KEYC_UP,		0, MODEKEYEDIT_HISTORYUP },
	{ KEYC_HOME,		0, MODEKEYEDIT_STARTOFLINE },
	{ KEYC_END,		0, MODEKEYEDIT_ENDOFLINE },
d333 1
a333 1
	{ 0,		       -1, 0 }
d339 30
a368 25
	{ '0' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '\003' /* C-c */,	0, MODEKEYCHOICE_CANCEL },
	{ '\016' /* C-n */,	0, MODEKEYCHOICE_DOWN },
	{ '\020' /* C-p */,	0, MODEKEYCHOICE_UP },
	{ '\026' /* C-v */,	0, MODEKEYCHOICE_PAGEDOWN },
	{ '\033' /* Escape */,	0, MODEKEYCHOICE_CANCEL },
	{ '\r',			0, MODEKEYCHOICE_CHOOSE },
	{ 'q',			0, MODEKEYCHOICE_CANCEL },
	{ 'v' | KEYC_ESCAPE,	0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_BSPACE,		0, MODEKEYCHOICE_BACKSPACE },
	{ KEYC_DOWN | KEYC_CTRL,0, MODEKEYCHOICE_SCROLLDOWN },
	{ KEYC_DOWN,		0, MODEKEYCHOICE_DOWN },
	{ KEYC_NPAGE,		0, MODEKEYCHOICE_PAGEDOWN },
	{ KEYC_PPAGE,		0, MODEKEYCHOICE_PAGEUP },
	{ KEYC_UP | KEYC_CTRL,	0, MODEKEYCHOICE_SCROLLUP },
	{ KEYC_UP,		0, MODEKEYCHOICE_UP },
d370 1
a370 1
	{ 0,			-1, 0 }
d376 56
a431 56
	{ ' ',			0, MODEKEYCOPY_NEXTPAGE },
	{ ',',			0, MODEKEYCOPY_JUMPREVERSE },
	{ ';',			0, MODEKEYCOPY_JUMPAGAIN },
	{ '1' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '2' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '3' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '4' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '5' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '6' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '7' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '8' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '9' | KEYC_ESCAPE,	0, MODEKEYCOPY_STARTNUMBERPREFIX },
	{ '<' | KEYC_ESCAPE,    0, MODEKEYCOPY_HISTORYTOP },
	{ '>' | KEYC_ESCAPE,    0, MODEKEYCOPY_HISTORYBOTTOM },
	{ 'F',			0, MODEKEYCOPY_JUMPBACK },
	{ 'N',			0, MODEKEYCOPY_SEARCHREVERSE },
	{ 'R' | KEYC_ESCAPE,	0, MODEKEYCOPY_TOPLINE },
	{ 'R',			0, MODEKEYCOPY_RECTANGLETOGGLE },
	{ 'T',			0, MODEKEYCOPY_JUMPTOBACK },
	{ '\000' /* C-Space */,	0, MODEKEYCOPY_STARTSELECTION },
	{ '\001' /* C-a */,	0, MODEKEYCOPY_STARTOFLINE },
	{ '\002' /* C-b */,	0, MODEKEYCOPY_LEFT },
	{ '\003' /* C-c */,	0, MODEKEYCOPY_CANCEL },
	{ '\005' /* C-e */,	0, MODEKEYCOPY_ENDOFLINE },
	{ '\006' /* C-f */,	0, MODEKEYCOPY_RIGHT },
	{ '\007' /* C-g */,	0, MODEKEYCOPY_CLEARSELECTION },
	{ '\013' /* C-k */,	0, MODEKEYCOPY_COPYENDOFLINE },
	{ '\016' /* C-n */,	0, MODEKEYCOPY_DOWN },
	{ '\020' /* C-p */,	0, MODEKEYCOPY_UP },
	{ '\022' /* C-r */,	0, MODEKEYCOPY_SEARCHUP },
	{ '\023' /* C-s */,	0, MODEKEYCOPY_SEARCHDOWN },
	{ '\026' /* C-v */,	0, MODEKEYCOPY_NEXTPAGE },
	{ '\027' /* C-w */,	0, MODEKEYCOPY_COPYSELECTION },
	{ '\033' /* Escape */,	0, MODEKEYCOPY_CANCEL },
	{ 'N',			0, MODEKEYCOPY_SEARCHREVERSE },
	{ 'b' | KEYC_ESCAPE,	0, MODEKEYCOPY_PREVIOUSWORD },
	{ 'f',			0, MODEKEYCOPY_JUMP },
	{ 'f' | KEYC_ESCAPE,	0, MODEKEYCOPY_NEXTWORDEND },
	{ 'g',			0, MODEKEYCOPY_GOTOLINE },
	{ 'm' | KEYC_ESCAPE,	0, MODEKEYCOPY_BACKTOINDENTATION },
	{ 'n',			0, MODEKEYCOPY_SEARCHAGAIN },
	{ 'q',			0, MODEKEYCOPY_CANCEL },
	{ 'r' | KEYC_ESCAPE,	0, MODEKEYCOPY_MIDDLELINE },
	{ 't',			0, MODEKEYCOPY_JUMPTO },
	{ 'v' | KEYC_ESCAPE,	0, MODEKEYCOPY_PREVIOUSPAGE },
	{ 'w' | KEYC_ESCAPE,	0, MODEKEYCOPY_COPYSELECTION },
	{ KEYC_DOWN | KEYC_CTRL,0, MODEKEYCOPY_SCROLLDOWN },
	{ KEYC_DOWN | KEYC_ESCAPE, 0, MODEKEYCOPY_HALFPAGEDOWN },
	{ KEYC_DOWN,		0, MODEKEYCOPY_DOWN },
	{ KEYC_LEFT,		0, MODEKEYCOPY_LEFT },
	{ KEYC_NPAGE,		0, MODEKEYCOPY_NEXTPAGE },
	{ KEYC_PPAGE,		0, MODEKEYCOPY_PREVIOUSPAGE },
	{ KEYC_RIGHT,		0, MODEKEYCOPY_RIGHT },
	{ KEYC_UP | KEYC_CTRL,	0, MODEKEYCOPY_SCROLLUP },
	{ KEYC_UP | KEYC_ESCAPE, 0, MODEKEYCOPY_HALFPAGEUP },
	{ KEYC_UP,		0, MODEKEYCOPY_UP },
d433 1
a433 1
	{ 0,			-1, 0 }
@


1.46
log
@Instead of numbering choose mode items 0-9a-z and then nothing, number
them all and if there are more than 10 use a prompt when 0-9 is
pressed. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.45 2012/03/04 07:38:11 nicm Exp $ */
d195 10
a204 10
	{ '0',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
d333 10
a342 10
	{ '0',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '1',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '2',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '3',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '4',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '5',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '6',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '7',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '8',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
	{ '9',			0, MODEKEYCHOICE_STARTNUMBERPREFIX },
@


1.45
log
@Add A and I keys for vi status line editing.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.44 2012/01/21 11:12:13 nicm Exp $ */
d77 1
d85 1
d195 10
d214 1
d333 10
d351 1
@


1.44
log
@Use RB trees not SPLAY.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.43 2012/01/20 19:10:29 nicm Exp $ */
d38 3
a40 2
 * (MODEKEYEDIT_SWITCHMODE and MODEKEYEDIT_SWITCHMODEAPPEND) are special-cased
 * to do this.
d68 2
d157 1
d161 1
d504 2
@


1.43
log
@Add space movement keys for vi mode in the status line from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.42 2011/12/04 16:18:01 nicm Exp $ */
d415 1
a415 1
SPLAY_GENERATE(mode_key_tree, mode_key_binding, entry, mode_key_cmp);
d465 1
a465 1
		SPLAY_INIT(mtab->tree);
d471 1
a471 1
			SPLAY_INSERT(mode_key_tree, mtab->tree, mbind);
d490 1
a490 1
	if ((mbind = SPLAY_FIND(mode_key_tree, mdata->tree, &mtmp)) == NULL) {
@


1.42
log
@Support "jump to" like vi in copy mode using t and T keys. Also add x
and X for delete in edit mode.

From Ben Boeckel, thanks.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.41 2011/12/01 20:44:12 nicm Exp $ */
d57 2
d62 1
d154 1
d156 2
@


1.41
log
@Add home and end keys for command prompt, from Matthias Lederhofer.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.40 2011/11/15 23:34:12 nicm Exp $ */
d101 2
d152 1
d168 1
d232 1
d254 1
d348 1
d373 1
@


1.40
log
@Add word movement and editing command for command prompt editing, from
Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.39 2011/08/16 09:47:18 nicm Exp $ */
d144 2
d294 2
@


1.39
log
@Add up/down/left/right keys in vi edit mode. From "livibetter" SF bug
3385651.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.38 2011/05/18 18:06:36 nicm Exp $ */
d52 1
d57 2
d60 1
d134 2
a135 1
	{ '\025' /* C-u	*/,	0, MODEKEYEDIT_DELETELINE },
d153 1
d155 1
d162 1
d270 1
a270 1
	{ '\005' /* C-e	*/,	0, MODEKEYEDIT_ENDOFLINE },
d272 3
a274 3
	{ '\010' /* C-H */, 	0, MODEKEYEDIT_BACKSPACE },
	{ '\011' /* Tab */,     0, MODEKEYEDIT_COMPLETE },
	{ '\013' /* C-k	*/,	0, MODEKEYEDIT_DELETETOENDOFLINE },
d278 2
a279 1
	{ '\025' /* C-u	*/,	0, MODEKEYEDIT_DELETELINE },
d283 2
@


1.38
log
@Add three new copy-mode commands - select-line, copy-line,
copy-end-of-line. From Dave Disser and Randy Stauner a while back.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.37 2011/04/05 18:55:38 nicm Exp $ */
d129 1
a130 1
	{ '\011' /* Tab */,	0, MODEKEYEDIT_COMPLETE },
d135 4
@


1.37
log
@Bind C-u to delete-line in vi mode like ksh does, suggested by thib.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.36 2011/01/01 03:39:21 nicm Exp $ */
d85 2
d115 1
d204 1
d330 1
@


1.36
log
@Sprinkle a little more const.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.35 2010/03/22 19:10:42 nicm Exp $ */
d126 1
@


1.35
log
@Add vi-style "jump" commands for copy mode, from Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.34 2010/03/02 00:32:41 nicm Exp $ */
d43 1
a43 1
struct mode_key_cmdstr mode_key_cmdstr_edit[] = {
d66 1
a66 1
struct mode_key_cmdstr mode_key_cmdstr_choice[] = {
d80 1
a80 1
struct mode_key_cmdstr mode_key_cmdstr_copy[] = {
d387 1
a387 1
mode_key_tostring(struct mode_key_cmdstr *cmdstr, enum mode_key_cmd cmd)
d397 1
a397 1
mode_key_fromstring(struct mode_key_cmdstr *cmdstr, const char *name)
@


1.34
log
@Permit keys in copy mode to be prefixed by a repeat count, entered with
[1-9] in vi mode, or M-[1-9] in emacs mode.

From Micah Cowan, tweaked a little by me.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.33 2010/02/11 20:39:40 nicm Exp $ */
d91 4
d184 2
d201 1
d223 1
d301 2
d314 2
d334 1
@


1.33
log
@Add "N" key to search the opposite way from the last search (reverse of "n"),
from Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.32 2010/02/06 17:35:01 nicm Exp $ */
d109 1
d182 9
d293 9
@


1.32
log
@Rectangle copy support, from Robin Lee Powell.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.31 2010/02/04 20:00:26 nicm Exp $ */
d107 1
d191 1
d301 1
@


1.31
log
@vi-style B, W and E keys in copy mode to navigate between words treating only
spaces as word separators. Also add . to the list of word separators for
standard word navigation.

From Micah Cowan, tweaked slightly by me.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.30 2010/02/01 22:15:51 nicm Exp $ */
d92 1
d211 1
d281 2
a282 2
	{ '<' | KEYC_ESCAPE,0, MODEKEYCOPY_HISTORYTOP },
	{ '>' | KEYC_ESCAPE, 0, MODEKEYCOPY_HISTORYBOTTOM },
d284 1
@


1.30
log
@Add scroll-up/scroll-down for choose/more mode, from Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.29 2010/01/27 23:26:14 nicm Exp $ */
d94 2
d99 1
d181 2
d189 1
@


1.29
log
@Actually bind the new key to e.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.28 2010/01/27 20:18:52 nicm Exp $ */
d72 2
d150 1
d152 3
d159 1
d163 1
d259 1
d263 1
@


1.28
log
@Alter next-word to have vi-like movement behaviour, and add next-word-end with
the existing emacs behaviour. From Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.27 2010/01/25 21:33:39 nicm Exp $ */
d188 1
@


1.27
log
@Top/bottom of history mode keys, diff from Micah Cowan, tweaked by me.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.26 2010/01/23 17:49:21 nicm Exp $ */
d93 1
d280 1
a280 1
	{ 'f' | KEYC_ESCAPE,	0, MODEKEYCOPY_NEXTWORD },
@


1.26
log
@Use C-e and C-y for scrolling in vi mode, from Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.25 2009/12/03 22:50:10 nicm Exp $ */
d87 2
a120 1
	{ 'd',			1, MODEKEYEDIT_DELETELINE },
d127 1
d169 1
d187 1
d261 3
a284 1
	{ 'R' | KEYC_ESCAPE,	0, MODEKEYCOPY_TOPLINE },
@


1.25
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.24 2009/11/13 07:00:54 nicm Exp $ */
d175 1
d179 1
@


1.24
log
@Zap unused functions, prompted by deraadt.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.23 2009/10/13 13:45:56 nicm Exp $ */
d45 1
a45 1
 	{ MODEKEYEDIT_CANCEL, "cancel" },
d64 1
a64 1
	
d198 1
a198 1
	
d205 1
a205 1
	{ '\001' /* C-a */,	0, MODEKEYEDIT_STARTOFLINE }, 
d221 1
a221 1
	{ 'm' | KEYC_ESCAPE,	0, MODEKEYEDIT_STARTOFLINE }, 
d290 1
a290 1
	{ 0,			-1, 0 }	
d346 1
a346 1
		
@


1.23
log
@Add mode keys to move the cursor to the top, middle and bottom of the screen.
H/M/L in vi mode and M-R/M-r in emacs (bottom of screen not bound in emacs).
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.22 2009/10/07 15:58:40 nicm Exp $ */
a368 15
		}
	}
}

void
mode_key_free_trees(void)
{
	const struct mode_key_table	*mtab;
	struct mode_key_binding		*mbind;

	for (mtab = mode_key_tables; mtab->name != NULL; mtab++) {
		while (!SPLAY_EMPTY(mtab->tree)) {
			mbind = SPLAY_ROOT(mtab->tree);
			SPLAY_REMOVE(mode_key_tree, mtab->tree, mbind);
			xfree(mbind);
@


1.22
log
@Support J and K for scroll up and scroll down in copy mode with vi keys,
suggested by martynas.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.21 2009/10/06 07:09:00 nicm Exp $ */
d80 1
d88 1
d101 1
d167 1
d170 2
d198 1
a198 1

d275 2
@


1.21
log
@Make C-Up and C-Down in copy mode scroll the screen up and down one line
without moving the cursor, like Up and Down in scroll mode (which will shortly
disappear).
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.20 2009/10/04 11:18:26 nicm Exp $ */
d164 2
@


1.20
log
@Get / and ? the right way round in vi mode, and use : for goto line rather than
g.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.19 2009/10/04 08:26:41 nicm Exp $ */
d92 2
d182 1
d188 1
d269 1
d276 1
@


1.19
log
@C-v and M-v too.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.18 2009/10/04 08:23:01 nicm Exp $ */
d158 1
a158 1
	{ '/',			0, MODEKEYCOPY_SEARCHUP },
d160 2
a161 1
	{ '?',			0, MODEKEYCOPY_SEARCHDOWN },
a171 1
	{ 'g',			0, MODEKEYCOPY_GOTOLINE },
@


1.18
log
@Support C-n/C-p with emacs keys in choice mode, also fix a comment.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.17 2009/09/02 06:33:20 nicm Exp $ */
d226 1
d230 1
@


1.17
log
@Add a transpose-chars command in edit mode (C-t in emacs mode only). From Kalle
Olavi Niemitalo.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.16 2009/08/18 07:23:43 nicm Exp $ */
d194 1
a194 1
	{ '\002' /* C-p */,	0, MODEKEYEDIT_CURSORLEFT },
d224 2
@


1.16
log
@Add a "delete line" key when editing in the status line or the search up/down
prompt. C-u with emacs keys, d with vi.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.15 2009/08/18 07:08:26 nicm Exp $ */
d60 1
d204 1
@


1.15
log
@Add (naive) searching and goto line in copy mode. Searching is C-r and C-s with
emacs keys, / and ? with vi; n repeats the search again with either key
set. All searching wraps the top/bottom. Goto line is g for both emacs and vi.

The search prompts don't have full line editing, just simple append and delete
characters.

Also sort the mode keys list in tmux.1.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.14 2009/08/13 23:44:18 nicm Exp $ */
d50 1
d113 1
d199 1
a199 1
	{ '\011' /* Tab */,	0, MODEKEYEDIT_COMPLETE },
d203 1
@


1.14
log
@Switch the prompt code to return an empty string when the user enters no
response and reserve NULL for an explicit cancel. Change all callbacks to treat
them the same so no functional change.

Also add cancel key bindings to emacs mode which were missing.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.13 2009/08/13 22:32:18 nicm Exp $ */
d77 1
a78 1
	{ MODEKEYCOPY_BACKTOINDENTATION, "back-to-indentation" },
d83 1
d90 3
d155 1
d157 1
d168 1
d173 1
d243 2
d250 1
d252 1
@


1.13
log
@vi(1)-style half page scroll in copy and scroll modes. Move the vi full page
scroll key to C-b instead of C-u and use C-u/C-d for half page scrolling with
vi keys. In emacs mode, half page scrolling is bound to M-Up and M-Down.

Suggested by merdely (about a year ago :-)).
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.12 2009/07/30 20:41:48 nicm Exp $ */
d184 1
d194 1
@


1.12
log
@Plug some memory leaks.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.11 2009/07/28 17:05:10 nicm Exp $ */
d152 1
d154 1
d157 1
a157 1
	{ '\025' /* C-u */,	0, MODEKEYCOPY_PREVIOUSPAGE },
d242 1
d248 1
@


1.11
log
@Final pieces of mode key rebinding: bind-key and unbind-key now accept a -t
argument to modify a table.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.10 2009/07/28 07:03:32 nicm Exp $ */
d340 1
@


1.10
log
@Next step towards customisable mode keys: build each default table of keys into
a named tree on start and use that for lookups. Also add command to string
translation tables and modify list-keys to show the the mode key bindings (new
-t argument).
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.8 2009/07/27 19:29:35 nicm Exp $ */
d21 2
d59 2
d71 2
d92 2
d285 22
@


1.9
log
@Remove an unused entry in the mode keys command enum and rename
MODEKEYCOPY_QUIT to _CANCEL to match the others.
@
text
@d23 65
d121 1
d137 1
d168 1
d194 1
d209 1
d241 39
d282 1
a282 1
mode_key_init(struct mode_key_data *mdata, const struct mode_key_entry *table)
d284 34
a317 1
	mdata->table = table;
d324 9
a332 2
	const struct mode_key_entry	*ment;
	int				 mode;
d334 7
a340 12
	mode = mdata->mode;
	for (ment = mdata->table; ment->mode != -1; ment++) {
		if (ment->mode == mode && key == ment->key) {
			switch (ment->cmd) {
			case MODEKEYEDIT_SWITCHMODE:
			case MODEKEYEDIT_SWITCHMODEAPPEND:
				mdata->mode = 1 - mdata->mode;
				/* FALLTHROUGH */
			default:
				return (ment->cmd);
			}
		}
a341 3
	if (mode != 0)
		return (MODEKEY_NONE);
	return (MODEKEY_OTHER);
@


1.8
log
@Change mode key bindings from big switches into a set of tables. Rather than
lumping them all together, split editing keys from those used in choice/more
mode and those for copy/scroll mode.

Tidier and clearer, and the first step towards customisable mode keys.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.7 2009/07/27 18:51:46 nicm Exp $ */
d77 1
a77 1
	{ '\003' /* C-c */,	0, MODEKEYCOPY_QUIT },
d89 1
a89 1
	{ 'q',			0, MODEKEYCOPY_QUIT },
d147 1
a147 1
	{ '\003' /* C-c */,	0, MODEKEYCOPY_QUIT },
d155 1
a155 1
	{ '\033' /* Escape */,	0, MODEKEYCOPY_QUIT },
d159 1
a159 1
	{ 'q',			0, MODEKEYCOPY_QUIT },
@


1.7
log
@Get rid of empty mode_key_free function.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.6 2009/07/27 12:11:11 nicm Exp $ */
d23 148
a170 2
enum mode_key_cmd mode_key_lookup_vi(struct mode_key_data *, int);
enum mode_key_cmd mode_key_lookup_emacs(struct mode_key_data *, int);
d173 1
a173 1
mode_key_init(struct mode_key_data *mdata, int type, int flags)
d175 2
a176 5
	mdata->type = type;

	if (flags & MODEKEY_CANEDIT)
		flags |= MODEKEY_EDITMODE;
	mdata->flags = flags;
d182 2
a183 18
	switch (mdata->type) {
	case MODEKEY_VI:
		return (mode_key_lookup_vi(mdata, key));
	case MODEKEY_EMACS:
		return (mode_key_lookup_emacs(mdata, key));
	default:
		fatalx("unknown mode key type");
	}
}

enum mode_key_cmd
mode_key_lookup_vi(struct mode_key_data *mdata, int key)
{
	if (key & KEYC_ESCAPE) {
		key &= ~KEYC_ESCAPE;
		if (mdata->flags & MODEKEY_CANEDIT)
			mdata->flags ^= MODEKEY_EDITMODE;
	}
d185 11
a195 18

	if (mdata->flags & MODEKEY_EDITMODE) {
		switch (key) {
		case '\003':
			return (MODEKEYCMD_QUIT);
		case '\033':
			if (mdata->flags & MODEKEY_CANEDIT)
				mdata->flags &= ~MODEKEY_EDITMODE;
			return (MODEKEYCMD_NONE);
		case '\010':
		case KEYC_BSPACE:
			return (MODEKEYCMD_BACKSPACE);
		case '\011':
			return (MODEKEYCMD_COMPLETE);
		case KEYC_DC:
			return (MODEKEYCMD_DELETE);
		case '\r':
			return (MODEKEYCMD_CHOOSE);
a196 1
		return (MODEKEYCMD_OTHERKEY);
d198 3
a200 138

	switch (key) {
	case '\010':
	case KEYC_BSPACE:
		return (MODEKEYCMD_LEFT);
	case KEYC_DC:
		return (MODEKEYCMD_DELETE);
	case '\011':
		return (MODEKEYCMD_COMPLETE);
	case 'i':
		if (mdata->flags & MODEKEY_CANEDIT)
			mdata->flags |= MODEKEY_EDITMODE;
		break;
	case 'a':
		if (mdata->flags & MODEKEY_CANEDIT) {
			mdata->flags |= MODEKEY_EDITMODE;
			return (MODEKEYCMD_RIGHT);
		}
		break;
	case '\r':
		if (mdata->flags & (MODEKEY_CANEDIT|MODEKEY_CHOOSEMODE))
			return (MODEKEYCMD_CHOOSE);
		return (MODEKEYCMD_COPYSELECTION);
	case '0':
		return (MODEKEYCMD_STARTOFLINE);
	case '^':
		return (MODEKEYCMD_BACKTOINDENTATION);
	case '\033':
		return (MODEKEYCMD_CLEARSELECTION);
	case 'C':
		if (mdata->flags & MODEKEY_CANEDIT)
			mdata->flags |= MODEKEY_EDITMODE;
		return (MODEKEYCMD_DELETETOENDOFLINE);
	case 'D':
		return (MODEKEYCMD_DELETETOENDOFLINE);
	case 'j':
	case KEYC_DOWN:
		return (MODEKEYCMD_DOWN);
	case '$':
		return (MODEKEYCMD_ENDOFLINE);
	case 'h':
	case KEYC_LEFT:
		return (MODEKEYCMD_LEFT);
	case '\006':
	case KEYC_NPAGE:
		return (MODEKEYCMD_NEXTPAGE);
	case 'w':
		return (MODEKEYCMD_NEXTWORD);
	case '\025':
	case KEYC_PPAGE:
		return (MODEKEYCMD_PREVIOUSPAGE);
	case 'b':
		return (MODEKEYCMD_PREVIOUSWORD);
	case 'q':
	case '\003':
		return (MODEKEYCMD_QUIT);
	case 'l':
	case KEYC_RIGHT:
		return (MODEKEYCMD_RIGHT);
	case ' ':
		return (MODEKEYCMD_STARTSELECTION);
	case 'k':
	case KEYC_UP:
		return (MODEKEYCMD_UP);
	case 'p':
		return (MODEKEYCMD_PASTE);
	}

	return (MODEKEYCMD_NONE);
}

enum mode_key_cmd
mode_key_lookup_emacs(struct mode_key_data *mdata, int key)
{
	switch (key) {
	case '\010':
	case KEYC_BSPACE:
		return (MODEKEYCMD_BACKSPACE);
	case '\004':
	case KEYC_DC:
		return (MODEKEYCMD_DELETE);
	case '\011':
		return (MODEKEYCMD_COMPLETE);
	case '\r':
		return (MODEKEYCMD_CHOOSE);
	case '\001':
		return (MODEKEYCMD_STARTOFLINE);
	case 'm' | KEYC_ESCAPE:
		return (MODEKEYCMD_BACKTOINDENTATION);
	case '\007':
		return (MODEKEYCMD_CLEARSELECTION);
	case '\027':
	case 'w' | KEYC_ESCAPE:
		return (MODEKEYCMD_COPYSELECTION);
	case '\013':
		return (MODEKEYCMD_DELETETOENDOFLINE);
	case '\016':
	case KEYC_DOWN:
		return (MODEKEYCMD_DOWN);
	case '\005':
		return (MODEKEYCMD_ENDOFLINE);
	case '\002':
	case KEYC_LEFT:
		return (MODEKEYCMD_LEFT);
	case ' ':
		if (mdata->flags & MODEKEY_CANEDIT)
			break;
		/* FALLTHROUGH */
	case '\026':
	case KEYC_NPAGE:
		return (MODEKEYCMD_NEXTPAGE);
	case 'f' | KEYC_ESCAPE:
		return (MODEKEYCMD_NEXTWORD);
	case '\031':
		return (MODEKEYCMD_PASTE);
	case 'v' | KEYC_ESCAPE:
	case KEYC_PPAGE:
		return (MODEKEYCMD_PREVIOUSPAGE);
	case 'b' | KEYC_ESCAPE:
		return (MODEKEYCMD_PREVIOUSWORD);
	case '\006':
	case KEYC_RIGHT:
		return (MODEKEYCMD_RIGHT);
	case '\000':
		return (MODEKEYCMD_STARTSELECTION);
	case '\020':
	case KEYC_UP:
		return (MODEKEYCMD_UP);
	case 'q':
		if (mdata->flags & MODEKEY_CANEDIT)
			break;
		/* FALLTHROUGH */
	case '\003':
	case '\033':
		return (MODEKEYCMD_QUIT);
	}

	return (MODEKEYCMD_OTHERKEY);
@


1.6
log
@Add a key to delete to end of line at the prompt (^K in emacs mode, C/D in vi).

From Kalle Olavi Niemitalo.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.5 2009/07/26 21:42:08 nicm Exp $ */
a33 5
}

void
mode_key_free(unused struct mode_key_data *mdata)
{
@


1.5
log
@Detect backspace by looking at termios VERASE and translate it into \177 (which
matches screen's behaviour if not its termcap/terminfo entry). The terminfo kbs
cap is often wrong or missing so it can't be used, and just assuming \177 may
be wrong.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.4 2009/07/23 13:44:02 nicm Exp $ */
d113 6
d178 2
@


1.4
log
@C-d is delete as well in emacs mode.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.3 2009/07/21 17:57:29 nicm Exp $ */
d73 1
a73 1
		case '\177':
d87 1
a87 1
	case '\177':
d154 1
a154 1
	case '\177':
@


1.3
log
@Tidy up keys: use an enum for the key codes, and remove the macros which just
wrap flag sets/clears/tests.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.2 2009/07/12 16:15:34 nicm Exp $ */
d156 1
@


1.2
log
@Add a "back to indentation" key in copy mode to move the cursor to the first
non-whitespace character. ^ with vi and M-m with emacs key bindings. Another
from Kalle Olavi Niemitalo, thanks.
@
text
@d1 1
a1 1
/* $OpenBSD: mode-key.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d57 2
a58 2
	if (KEYC_ISESC(key)) {
		key = KEYC_REMOVEESC(key);
d164 1
a164 1
	case KEYC_ADDESC('m'):
d169 1
a169 1
	case KEYC_ADDESC('w'):
d186 1
a186 1
	case KEYC_ADDESC('f'):
d190 1
a190 1
	case KEYC_ADDESC('v'):
d193 1
a193 1
	case KEYC_ADDESC('b'):
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d108 1
d110 1
a110 1
		return (MODEKEYCMD_STARTOFLINE);
d164 2
@

