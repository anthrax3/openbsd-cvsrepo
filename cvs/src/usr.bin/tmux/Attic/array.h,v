head	1.9;
access;
symbols
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.12
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.10
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.04.26.10.18.57;	author nicm;	state dead;
branches;
next	1.8;
commitid	BxjorjSOAut2qPDG;

1.8
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.7;
commitid	P3qmSOx6KrDBsb0c;

1.7
date	2014.10.08.17.35.58;	author nicm;	state Exp;
branches;
next	1.6;
commitid	mK8z9uVwDZMfiNoM;

1.6
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.05.16.32.22;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.06.23.22.27;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.29.08.59.17;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.26.21.42.04;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove last uses of array.h.
@
text
@/* $OpenBSD: array.h,v 1.8 2016/01/19 15:59:12 nicm Exp $ */

/*
 * Copyright (c) 2006 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef ARRAY_H
#define ARRAY_H

#define ARRAY_INITIALIZER { NULL, 0, 0 }

#define ARRAY_DECL(n, c)						\
	struct n {							\
		c	*list;						\
		u_int	 num;						\
		size_t	 space;						\
	}

#define ARRAY_ITEM(a, i) ((a)->list[i])
#define ARRAY_ITEMSIZE(a) (sizeof *(a)->list)
#define ARRAY_INITIALSPACE(a) (10 * ARRAY_ITEMSIZE(a))

#define ARRAY_ENSURE(a, n) do {						\
	if (UINT_MAX - (n) < (a)->num)					\
		fatalx("number too big");				\
	if (SIZE_MAX / ((a)->num + (n)) < ARRAY_ITEMSIZE(a))		\
		fatalx("size too big");					\
	if ((a)->space == 0) {						\
	       	(a)->space = ARRAY_INITIALSPACE(a);			\
		(a)->list = xrealloc((a)->list, (a)->space);		\
	}								\
	while ((a)->space <= ((a)->num + (n)) * ARRAY_ITEMSIZE(a)) {	\
		(a)->list = xreallocarray((a)->list, 2, (a)->space);	\
		(a)->space *= 2;					\
	}								\
} while (0)

#define ARRAY_EMPTY(a) (((void *) (a)) == NULL || (a)->num == 0)
#define ARRAY_LENGTH(a) ((a)->num)
#define ARRAY_DATA(a) ((a)->list)

#define ARRAY_FIRST(a) ARRAY_ITEM(a, 0)
#define ARRAY_LAST(a) ARRAY_ITEM(a, (a)->num - 1)

#define ARRAY_INIT(a) do {						\
	(a)->num = 0;							\
	(a)->list = NULL;		 				\
	(a)->space = 0;							\
} while (0)
#define ARRAY_CLEAR(a) do {						\
	(a)->num = 0;							\
} while (0)

#define ARRAY_SET(a, i, s) do {						\
	(a)->list[i] = s;						\
} while (0)

#define ARRAY_ADD(a, s) do {						\
	ARRAY_ENSURE(a, 1);						\
	(a)->list[(a)->num] = s;					\
	(a)->num++;							\
} while (0)
#define ARRAY_INSERT(a, i, s) do {					\
	ARRAY_ENSURE(a, 1);						\
	if ((i) < (a)->num) {						\
		memmove((a)->list + (i) + 1, (a)->list + (i), 		\
		    ARRAY_ITEMSIZE(a) * ((a)->num - (i)));		\
	}								\
	(a)->list[i] = s;						\
	(a)->num++;							\
} while (0)
#define ARRAY_REMOVE(a, i) do {						\
	if ((i) < (a)->num - 1) {					\
		memmove((a)->list + (i), (a)->list + (i) + 1, 		\
		    ARRAY_ITEMSIZE(a) * ((a)->num - (i) - 1));		\
	}								\
	(a)->num--;							\
	if ((a)->num == 0)						\
		ARRAY_FREE(a);						\
} while (0)

#define ARRAY_EXPAND(a, n) do {						\
	ARRAY_ENSURE(a, n);						\
	(a)->num += n;							\
} while (0)
#define ARRAY_TRUNC(a, n) do {						\
	if ((a)->num > n)						\
		(a)->num -= n;				       		\
	else								\
		ARRAY_FREE(a);						\
} while (0)

#define ARRAY_CONCAT(a, b) do {						\
	ARRAY_ENSURE(a, (b)->num);					\
	memcpy((a)->list + (a)->num, (b)->list, (b)->num * ARRAY_ITEMSIZE(a)); \
	(a)->num += (b)->num;						\
} while (0)

#define ARRAY_FREE(a) do {						\
	free((a)->list);						\
	ARRAY_INIT(a);							\
} while (0)
#define ARRAY_FREEALL(a) do {						\
	ARRAY_FREE(a);							\
	free(a);							\
} while (0)

#endif
@


1.8
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: array.h,v 1.7 2014/10/08 17:35:58 nicm Exp $ */
@


1.7
log
@Add xreallocarray and remove nmemb argument from xrealloc.
@
text
@d1 1
a1 1
/* $OpenBSD: array.h,v 1.6 2012/07/10 11:53:01 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2006 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.6
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: array.h,v 1.5 2010/06/05 16:32:22 nicm Exp $ */
d42 1
a42 1
		(a)->list = xrealloc((a)->list, 1, (a)->space);		\
d45 1
a45 1
		(a)->list = xrealloc((a)->list, 2, (a)->space);		\
@


1.5
log
@Shut up gcc4 warnings.
@
text
@d1 1
a1 1
/* $OpenBSD: array.h,v 1.4 2010/02/06 23:22:27 nicm Exp $ */
d112 1
a112 2
	if ((a)->list != NULL)						\
		xfree((a)->list);					\
d117 1
a117 1
	xfree(a);							\
@


1.4
log
@Use the array.h code for the causes list.
@
text
@d1 1
a1 1
/* $OpenBSD: array.h,v 1.3 2009/10/29 08:59:17 nicm Exp $ */
d50 1
a50 1
#define ARRAY_EMPTY(a) ((a) == NULL || (a)->num == 0)
@


1.3
log
@Missing ;. From eric@@ ages ago.
@
text
@d1 1
a1 1
/* $OpenBSD: array.h,v 1.2 2009/10/26 21:42:04 deraadt Exp $ */
d21 2
@


1.2
log
@tabs are better; ok nicm
@
text
@d1 1
a1 1
/* $OpenBSD: array.h,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d105 1
a105 1
	memcpy((a)->list + (a)->num, (b)->list, (b)->num * ARRAY_ITEMSIZE(a)) \
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d88 1
a88 1
        if ((a)->num == 0)						\
@

