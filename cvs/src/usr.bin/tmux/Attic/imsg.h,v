head	1.5;
access;
symbols
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2010.05.26.16.44.32;	author nicm;	state dead;
branches;
next	1.4;

1.4
date	2010.05.26.13.56.07;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.27.21.04.04;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.15.18.12.51;	author jacekm;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.11.17.18.35;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Move imsg into libutil and add a man page.

Minor bump for libutil.

Previous versions of this diff and man page looked at by various people.

"you should just commit" deraadt
@
text
@/*	$OpenBSD: imsg.h,v 1.4 2010/05/26 13:56:07 nicm Exp $	*/

/*
 * Copyright (c) 2006, 2007 Pierre-Yves Ritschard <pyr@@openbsd.org>
 * Copyright (c) 2006, 2007, 2008 Reyk Floeter <reyk@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define IBUF_READ_SIZE		65535
#define IMSG_HEADER_SIZE	sizeof(struct imsg_hdr)
#define MAX_IMSGSIZE		16384

struct ibuf {
	TAILQ_ENTRY(ibuf)	 entry;
	u_char			*buf;
	size_t			 size;
	size_t			 max;
	size_t			 wpos;
	size_t			 rpos;
	int			 fd;
};

struct msgbuf {
	TAILQ_HEAD(, ibuf)	 bufs;
	u_int32_t		 queued;
	int			 fd;
};

struct ibuf_read {
	u_char			 buf[IBUF_READ_SIZE];
	u_char			*rptr;
	size_t			 wpos;
};

struct imsg_fd {
	TAILQ_ENTRY(imsg_fd)	entry;
	int			fd;
};

struct imsgbuf {
	TAILQ_HEAD(, imsg_fd)	 fds;
	struct ibuf_read	 r;
	struct msgbuf		 w;
	int			 fd;
	pid_t			 pid;
};

#define IMSGF_HASFD	1

struct imsg_hdr {
	u_int32_t	 type;
	u_int16_t	 len;
	u_int16_t	 flags;
	u_int32_t	 peerid;
	u_int32_t	 pid;
};

struct imsg {
	struct imsg_hdr	 hdr;
	int		 fd;
	void		*data;
};


/* buffer.c */
struct ibuf	*ibuf_open(size_t);
struct ibuf	*ibuf_dynamic(size_t, size_t);
int		 ibuf_add(struct ibuf *, const void *, size_t);
void		*ibuf_reserve(struct ibuf *, size_t);
void		*ibuf_seek(struct ibuf *, size_t, size_t);
size_t		 ibuf_size(struct ibuf *);
size_t		 ibuf_left(struct ibuf *);
void		 ibuf_close(struct msgbuf *, struct ibuf *);
int		 ibuf_write(struct msgbuf *);
void		 ibuf_free(struct ibuf *);
void		 msgbuf_init(struct msgbuf *);
void		 msgbuf_clear(struct msgbuf *);
int		 msgbuf_write(struct msgbuf *);
void		 msgbuf_drain(struct msgbuf *, size_t);

/* imsg.c */
void	 imsg_init(struct imsgbuf *, int);
ssize_t	 imsg_read(struct imsgbuf *);
ssize_t	 imsg_get(struct imsgbuf *, struct imsg *);
int	 imsg_compose(struct imsgbuf *, u_int32_t, u_int32_t, pid_t,
	    int, void *, u_int16_t);
int	 imsg_composev(struct imsgbuf *, u_int32_t, u_int32_t,  pid_t,
	    int, const struct iovec *, int);
struct ibuf *imsg_create(struct imsgbuf *, u_int32_t, u_int32_t, pid_t,
	    u_int16_t);
int	 imsg_add(struct ibuf *, void *, u_int16_t);
void	 imsg_close(struct imsgbuf *, struct ibuf *);
void	 imsg_free(struct imsg *);
int	 imsg_flush(struct imsgbuf *);
void	 imsg_clear(struct imsgbuf *);
@


1.4
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.5 2010/04/27 21:04:04 nicm Exp $	*/
@


1.3
log
@imsg.h does not need sys/tree.h.

ok eric
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.2 2009/09/15 18:12:51 jacekm Exp $	*/
d21 1
a21 1
#define READ_BUF_SIZE		65535
d25 2
a26 2
struct buf {
	TAILQ_ENTRY(buf)	 entry;
d36 1
a36 1
	TAILQ_HEAD(, buf)	 bufs;
d41 2
a42 2
struct buf_read {
	u_char			 buf[READ_BUF_SIZE];
d54 1
a54 1
	struct buf_read		 r;
d78 10
a87 10
struct buf	*buf_open(size_t);
struct buf	*buf_dynamic(size_t, size_t);
int		 buf_add(struct buf *, const void *, size_t);
void		*buf_reserve(struct buf *, size_t);
void		*buf_seek(struct buf *, size_t, size_t);
size_t		 buf_size(struct buf *);
size_t		 buf_left(struct buf *);
void		 buf_close(struct msgbuf *, struct buf *);
int		 buf_write(struct msgbuf *);
void		 buf_free(struct buf *);
d101 1
a101 1
struct buf *imsg_create(struct imsgbuf *, u_int32_t, u_int32_t, pid_t,
d103 2
a104 2
int	 imsg_add(struct buf *, void *, u_int16_t);
void	 imsg_close(struct imsgbuf *, struct buf *);
@


1.2
log
@Enclose repeated buffer draining code in a new msgbuf_drain()
function, which is additionally exported for use by others.

From nicm@@, who reminded me that tmux is now using buffer.c, too.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.6 2009/09/15 10:54:59 jacekm Exp $	*/
a19 2

#include <sys/tree.h>
@


1.1
log
@Switch tmux to use imsg. This is the last major change to make the
client-server protocol more resilient and make the protocol versioning work
properly. In future, the only things requiring a protocol version bump will be
changes in the message structs, and (when both client and server have this
change) mixing different versions should nicely report an error message.

As a side effect this also makes the code tidier, fixes a problem with the way
errors reported during server startup were handled, and supports fd passing
(which will be used in future).

Looked over by eric@@, thanks.

Please note that mixing a client with this change with an older server or vice
versa may cause tmux to crash or hang - tmux should be completely exited before
upgrading.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.3 2009/06/07 05:56:25 eric Exp $	*/
d93 1
@

