head	1.11;
access;
symbols
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.01.27.23.57.35;	author nicm;	state dead;
branches;
next	1.10;

1.10
date	2013.10.10.12.00.24;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.22.10.31.22;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Merge start-server into kill-server.
@
text
@/* $OpenBSD: cmd-start-server.c,v 1.10 2013/10/10 12:00:24 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include "tmux.h"

/*
 * Start the server and do nothing else.
 */

enum cmd_retval	 cmd_start_server_exec(struct cmd *, struct cmd_q *);

const struct cmd_entry cmd_start_server_entry = {
	"start-server", "start",
	"", 0, 0,
	"",
	CMD_STARTSERVER,
	NULL,
	cmd_start_server_exec
};

enum cmd_retval
cmd_start_server_exec(unused struct cmd *self, unused struct cmd_q *cmdq)
{
	return (CMD_RETURN_NORMAL);
}
@


1.10
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.9 2013/03/24 09:54:10 nicm Exp $ */
@


1.9
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.8 2013/03/22 10:31:22 nicm Exp $ */
a33 1
	NULL,
@


1.8
log
@No more lint means no more ARGSUSED.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.7 2012/07/11 07:10:15 nicm Exp $ */
d27 1
a27 1
enum cmd_retval	 cmd_start_server_exec(struct cmd *, struct cmd_ctx *);
d40 1
a40 1
cmd_start_server_exec(unused struct cmd *self, unused struct cmd_ctx *ctx)
@


1.7
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.6 2011/01/04 00:42:47 nicm Exp $ */
a38 1
/* ARGSUSED */
@


1.6
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.5 2009/11/26 21:37:13 nicm Exp $ */
d27 1
a27 1
int	cmd_start_server_exec(struct cmd *, struct cmd_ctx *);
d40 1
a40 1
int
d43 1
a43 1
	return (0);
@


1.5
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.4 2009/11/13 19:53:29 nicm Exp $ */
d31 1
d33 1
a33 1
	CMD_STARTSERVER, "",
d36 1
a36 3
	cmd_start_server_exec,
	NULL,
	NULL
@


1.4
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d40 1
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d32 1
a32 1
	CMD_STARTSERVER, 0,
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-start-server.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a35 2
	NULL,
	NULL,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d32 1
a32 1
	CMD_STARTSERVER,
@

