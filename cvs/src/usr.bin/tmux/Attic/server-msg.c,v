head	1.25;
access;
symbols
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.25
date	2009.10.22.19.41.51;	author nicm;	state dead;
branches;
next	1.24;

1.24
date	2009.10.21.20.16.40;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2009.10.10.09.46.11;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2009.09.24.07.02.56;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2009.09.23.12.03.31;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2009.09.23.06.18.47;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.23.06.12.58;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.23.06.05.02;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.15.07.45.16;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.02.16.38.35;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.23.16.45.00;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2009.08.13.12.15.45;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.08.11.21.28.11;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.11.19.32.25;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.11.17.18.35;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.08.21.52.43;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.30.16.40.12;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.29.14.17.26;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.23.21.19.11;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.07.17.24.32;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.07.12.34.47;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.05.11.14.13;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.04.21.43.24;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Split the server code handling clients, jobs and windows off into separate
files from server.c (merging server-msg.c into the client file) and rather than
iterating over each set after poll(), allow a callback to be specified when the
fd is added and just walk once over the returned pollfds calling each callback
where needed.

More to come, getting this in so it is tested.
@
text
@/* $OpenBSD: server-msg.c,v 1.24 2009/10/21 20:16:40 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>

#include <errno.h>
#include <paths.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "tmux.h"

void	server_msg_command(struct client *, struct msg_command_data *);
void	server_msg_identify(struct client *, struct msg_identify_data *, int);
void	server_msg_shell(struct client *);

void printflike2 server_msg_command_error(struct cmd_ctx *, const char *, ...);
void printflike2 server_msg_command_print(struct cmd_ctx *, const char *, ...);
void printflike2 server_msg_command_info(struct cmd_ctx *, const char *, ...);

int
server_msg_dispatch(struct client *c)
{
	struct imsg		 imsg;
	struct msg_command_data	 commanddata;
	struct msg_identify_data identifydata;
	struct msg_environ_data	 environdata;
	ssize_t			 n, datalen;

        if ((n = imsg_read(&c->ibuf)) == -1 || n == 0)
                return (-1);

	for (;;) {
		if ((n = imsg_get(&c->ibuf, &imsg)) == -1)
			return (-1);
		if (n == 0)
			return (0);
		datalen = imsg.hdr.len - IMSG_HEADER_SIZE;

		if (imsg.hdr.peerid != PROTOCOL_VERSION) {
			server_write_client(c, MSG_VERSION, NULL, 0);
			c->flags |= CLIENT_BAD;
			imsg_free(&imsg);
			continue;
		}

		log_debug("got %d from client %d", imsg.hdr.type, c->ibuf.fd);
		switch (imsg.hdr.type) {
		case MSG_COMMAND:
			if (datalen != sizeof commanddata)
				fatalx("bad MSG_COMMAND size");
			memcpy(&commanddata, imsg.data, sizeof commanddata);

			server_msg_command(c, &commanddata);
			break;
		case MSG_IDENTIFY:
			if (datalen != sizeof identifydata)
				fatalx("bad MSG_IDENTIFY size");
			if (imsg.fd == -1)
				fatalx("MSG_IDENTIFY missing fd");
			memcpy(&identifydata, imsg.data, sizeof identifydata);

			server_msg_identify(c, &identifydata, imsg.fd);
			break;
		case MSG_RESIZE:
			if (datalen != 0)
				fatalx("bad MSG_RESIZE size");

			tty_resize(&c->tty);
			recalculate_sizes();
			server_redraw_client(c);
			break;
		case MSG_EXITING:
			if (datalen != 0)
				fatalx("bad MSG_EXITING size");

			c->session = NULL;
			tty_close(&c->tty);
			server_write_client(c, MSG_EXITED, NULL, 0);
			break;
		case MSG_WAKEUP:
		case MSG_UNLOCK:
			if (datalen != 0)
				fatalx("bad MSG_WAKEUP size");

			if (!(c->flags & CLIENT_SUSPENDED))
				break;
			c->flags &= ~CLIENT_SUSPENDED;
			tty_start_tty(&c->tty);
			server_redraw_client(c);
			recalculate_sizes();
			if (c->session != NULL)
				c->session->activity = time(NULL);
			break;
		case MSG_ENVIRON:
			if (datalen != sizeof environdata)
				fatalx("bad MSG_ENVIRON size");
			memcpy(&environdata, imsg.data, sizeof environdata);

			environdata.var[(sizeof environdata.var) - 1] = '\0';
			if (strchr(environdata.var, '=') != NULL)
				environ_put(&c->environ, environdata.var);
			break;
		case MSG_SHELL:
			if (datalen != 0)
				fatalx("bad MSG_SHELL size");

			server_msg_shell(c);
			break;
		default:
			fatalx("unexpected message");
		}

		imsg_free(&imsg);
	}
}

void printflike2
server_msg_command_error(struct cmd_ctx *ctx, const char *fmt, ...)
{
	struct msg_print_data	data;
	va_list			ap;

	va_start(ap, fmt);
	xvsnprintf(data.msg, sizeof data.msg, fmt, ap);
	va_end(ap);

	server_write_client(ctx->cmdclient, MSG_ERROR, &data, sizeof data);
}

void printflike2
server_msg_command_print(struct cmd_ctx *ctx, const char *fmt, ...)
{
	struct msg_print_data	data;
	va_list			ap;

	va_start(ap, fmt);
	xvsnprintf(data.msg, sizeof data.msg, fmt, ap);
	va_end(ap);

	server_write_client(ctx->cmdclient, MSG_PRINT, &data, sizeof data);
}

void printflike2
server_msg_command_info(struct cmd_ctx *ctx, const char *fmt, ...)
{
	struct msg_print_data	data;
	va_list			ap;

	if (be_quiet)
		return;

	va_start(ap, fmt);
	xvsnprintf(data.msg, sizeof data.msg, fmt, ap);
	va_end(ap);

	server_write_client(ctx->cmdclient, MSG_PRINT, &data, sizeof data);
}

void
server_msg_command(struct client *c, struct msg_command_data *data)
{
	struct cmd_ctx	 ctx;
	struct cmd_list	*cmdlist = NULL;
	struct cmd	*cmd;
	int		 argc;
	char	       **argv, *cause;

	if (c->session != NULL)
		c->session->activity = time(NULL);

	ctx.error = server_msg_command_error;
	ctx.print = server_msg_command_print;
	ctx.info = server_msg_command_info;

	ctx.msgdata = data;
	ctx.curclient = NULL;

	ctx.cmdclient = c;

	argc = data->argc;
	data->argv[(sizeof data->argv) - 1] = '\0';
	if (cmd_unpack_argv(data->argv, sizeof data->argv, argc, &argv) != 0) {
		server_msg_command_error(&ctx, "command too long");
		goto error;
	}

	if (argc == 0) {
		argc = 1;
		argv = xcalloc(1, sizeof *argv);
		*argv = xstrdup("new-session");
	}

	if ((cmdlist = cmd_list_parse(argc, argv, &cause)) == NULL) {
		server_msg_command_error(&ctx, "%s", cause);
		cmd_free_argv(argc, argv);
		goto error;
	}
	cmd_free_argv(argc, argv);

	if (data->pid != -1) {
		TAILQ_FOREACH(cmd, cmdlist, qentry) {
			if (cmd->entry->flags & CMD_CANTNEST) {
				server_msg_command_error(&ctx,
				    "sessions should be nested with care. "
				    "unset $TMUX to force");
				goto error;
			}
		}
	}

	if (cmd_list_exec(cmdlist, &ctx) != 1)
		server_write_client(c, MSG_EXIT, NULL, 0);
	cmd_list_free(cmdlist);
	return;

error:
	if (cmdlist != NULL)
		cmd_list_free(cmdlist);
	server_write_client(c, MSG_EXIT, NULL, 0);
}

void
server_msg_identify(struct client *c, struct msg_identify_data *data, int fd)
{
	c->cwd = NULL;
	data->cwd[(sizeof data->cwd) - 1] = '\0';
	if (*data->cwd != '\0')
		c->cwd = xstrdup(data->cwd);

	data->term[(sizeof data->term) - 1] = '\0';
	tty_init(&c->tty, fd, data->term);
	if (data->flags & IDENTIFY_UTF8)
		c->tty.flags |= TTY_UTF8;
	if (data->flags & IDENTIFY_256COLOURS)
		c->tty.term_flags |= TERM_256COLOURS;
	else if (data->flags & IDENTIFY_88COLOURS)
		c->tty.term_flags |= TERM_88COLOURS;
	if (data->flags & IDENTIFY_HASDEFAULTS)
		c->tty.term_flags |= TERM_HASDEFAULTS;

	tty_resize(&c->tty);

	c->flags |= CLIENT_TERMINAL;
}

void
server_msg_shell(struct client *c)
{
	struct msg_shell_data	 data;
	const char		*shell;
	
	shell = options_get_string(&global_s_options, "default-shell");

	if (*shell == '\0' || areshell(shell))
		shell = _PATH_BSHELL;
	if (strlcpy(data.shell, shell, sizeof data.shell) >= sizeof data.shell)
		strlcpy(data.shell, _PATH_BSHELL, sizeof data.shell);
	
	server_write_client(c, MSG_SHELL, &data, sizeof data);
	c->flags |= CLIENT_BAD;	/* it will die after exec */
}
@


1.24
log
@Don't try to unsuspend a client if it isn't suspended.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.23 2009/10/10 09:46:11 nicm Exp $ */
@


1.23
log
@Support for individual session idle time locking. May be enabled by turning off
the lock-server option (it is on by default). When this is off, each session
locks when it has been idle for the lock-after-time setting. When on, the
entire server locks when ALL sessions have been idle for their individual
lock-after-time settings.

This replaces one global-only option (lock-after-time) with another
(lock-server), but the default behaviour is usually preferable so there don't
seem to be many alternatives.

Diff/idea largely from Thomas Adam, tweaked by me.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.22 2009/09/24 07:02:56 nicm Exp $ */
d104 2
@


1.22
log
@Don't allow locked or suspended clients to limit the size of active clients.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.21 2009/09/23 12:03:31 nicm Exp $ */
d108 2
a109 1
			server_activity = time(NULL);
d185 2
a186 1
	server_activity = time(NULL);
@


1.21
log
@Support -c like sh(1) to execute a command, useful when tmux is a login
shell. Suggested by halex@@.

This includes another protocol version increase (the last for now) so again
restart the tmux server before upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.20 2009/09/23 06:18:47 nicm Exp $ */
d107 1
@


1.20
log
@Remove the internal tmux locking and instead detach each client and run the
command specified by a new option "lock-command" (by default "lock -np") in
each client.

This means each terminal has to be unlocked individually but simplifies the
code and allows the system password to be used to unlock.

Note that the set-password command is gone, so it will need to be removed from
configuration files, and the -U command line flag has been removed.

This is the third protocol version change so again it is best to stop the tmux
server before upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.19 2009/09/23 06:12:58 nicm Exp $ */
d23 1
d33 1
d118 6
d258 17
@


1.19
log
@Trim some code by moving the ioctl(TIOCGWINSZ) after SIGWINCH from the client
into the server.

This is another (the second of four) protocol version changes coming this
morning, so again the server should be killed before upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.18 2009/09/23 06:05:02 nicm Exp $ */
a42 1
	struct msg_unlock_data	 unlockdata;
d97 1
a98 18
			if (datalen != sizeof unlockdata)
				fatalx("bad MSG_UNLOCK size");
			memcpy(&unlockdata, imsg.data, sizeof unlockdata);

			unlockdata.pass[(sizeof unlockdata.pass) - 1] = '\0';
			switch (server_unlock(unlockdata.pass)) {
			case -1:
				server_write_error(c, "bad password");
				break;
			case -2:
				server_write_error(c,
				    "too many bad passwords, sleeping");
				break;
			}
			memset(&unlockdata, 0, sizeof unlockdata);
			server_write_client(c, MSG_EXIT, NULL, 0);
			break;
		case MSG_WAKEUP:
d105 1
@


1.18
log
@Don't attempt to open() the tty path, rely on the client sending its stdin fd
with imsg and fatal if it doesn't, then set the FD_CLOEXEC flag in tty_init
instead of tty_open to prevent them leaking into child processes if any are
created between the two calls.

This bumps the protocol version, so the tmux server should be killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.17 2009/09/15 07:45:16 nicm Exp $ */
d20 1
a31 1
void	server_msg_resize(struct client *, struct msg_resize_data *);
a42 1
	struct msg_resize_data	 resizedata;
d83 1
a83 1
			if (datalen != sizeof resizedata)
a84 1
			memcpy(&resizedata, imsg.data, sizeof resizedata);
d86 3
a88 1
			server_msg_resize(c, &resizedata);
d264 1
a264 6
	c->tty.sx = data->sx;
	if (c->tty.sx == 0)
		c->tty.sx = 80;
	c->tty.sy = data->sy;
	if (c->tty.sy == 0)
		c->tty.sy = 24;
a266 21
}

void
server_msg_resize(struct client *c, struct msg_resize_data *data)
{
	c->tty.sx = data->sx;
	if (c->tty.sx == 0)
		c->tty.sx = 80;
	c->tty.sy = data->sy;
	if (c->tty.sy == 0)
		c->tty.sy = 24;

	c->tty.cx = UINT_MAX;
	c->tty.cy = UINT_MAX;
	c->tty.rupper = UINT_MAX;
	c->tty.rlower = UINT_MAX;

	recalculate_sizes();

	/* Always redraw this client. */
	server_redraw_client(c);
@


1.17
log
@The default terminal size should be 80x24, not 80x25.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.16 2009/09/02 16:38:35 nicm Exp $ */
d77 2
a247 7
	c->tty.sx = data->sx;
	if (c->tty.sx == 0)
		c->tty.sx = 80;
	c->tty.sy = data->sy;
	if (c->tty.sy == 0)
		c->tty.sy = 24;

a252 1
	data->tty[(sizeof data->tty) - 1] = '\0';
d254 1
a254 1
	tty_init(&c->tty, fd, data->tty, data->term);
d263 7
@


1.16
log
@When incorrect passwords are entered, behave similarly to login(1) and backoff
for a bit. Based on a diff from martynas@@.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.15 2009/08/23 16:45:00 nicm Exp $ */
d251 1
a251 1
		c->tty.sy = 25;
d281 1
a281 1
		c->tty.sy = 25;
@


1.15
log
@The cursession member in struct cmd_ctx is always either curclient->session or
NULL when curclient is also NULL, so just eliminate it.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.14 2009/08/13 12:15:45 nicm Exp $ */
d102 2
a103 1
			if (server_unlock(unlockdata.pass) != 0)
d105 6
@


1.14
log
@If the client passes zero for the window size in the identify message (which it
can, for example on serial terminals), reset it to 80x25, same as for resize
messages. Problem reported by kettenis@@.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.13 2009/08/11 21:28:11 nicm Exp $ */
a190 1
	ctx.cursession = NULL;
@


1.13
log
@Have the client pass its stdin fd to the server when identifying itself and
have the server use that rather than reopening the tty. If the fd isn't given,
use the old behaviour (so no need for a version change).

This allows tmux to be used as the shell, so also change so that when working
out the command to execute if default-command is empty (the default), tmux will
try not execute itself.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.12 2009/08/11 19:32:25 nicm Exp $ */
d241 2
d244 2
@


1.12
log
@Drop the no_stop argument to tty_close and tty_free in favour of a flag in the
tty struct.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.11 2009/08/11 17:18:35 nicm Exp $ */
d30 1
a30 1
void	server_msg_identify(struct client *, struct msg_identify_data *);
d79 1
a79 1
			server_msg_identify(c, &identifydata);
d238 1
a238 1
server_msg_identify(struct client *c, struct msg_identify_data *data)
d250 1
a250 1
	tty_init(&c->tty, data->tty, data->term);
@


1.11
log
@Switch tmux to use imsg. This is the last major change to make the
client-server protocol more resilient and make the protocol versioning work
properly. In future, the only things requiring a protocol version bump will be
changes in the message structs, and (when both client and server have this
change) mixing different versions should nicely report an error message.

As a side effect this also makes the code tidier, fixes a problem with the way
errors reported during server startup were handled, and supports fd passing
(which will be used in future).

Looked over by eric@@, thanks.

Please note that mixing a client with this change with an older server or vice
versa may cause tmux to crash or hang - tmux should be completely exited before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.10 2009/08/08 21:52:43 nicm Exp $ */
d93 1
a93 1
			tty_close(&c->tty, c->flags & CLIENT_SUSPENDED);
@


1.10
log
@Infrastructure and commands to manage the environment for processes started
within tmux.

There is a global environment, copied from the external environment when the
server is started and each sesssion has an (initially empty) session
environment which overrides it.

New commands set-environment and show-environment manipulate or display the
environments.

A new session option, update-environment, is a space-separated list of
variables which are updated from the external environment into the session
environment every time a new session is created - the default is DISPLAY.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.9 2009/07/30 16:40:12 nicm Exp $ */
d40 1
a40 1
	struct hdr		 hdr;
d46 4
d52 3
a54 1
		if (BUFFER_USED(c->in) < sizeof hdr)
d56 8
a63 4
		memcpy(&hdr, BUFFER_OUT(c->in), sizeof hdr);
		if (BUFFER_USED(c->in) < (sizeof hdr) + hdr.size)
			return (0);
		buffer_remove(c->in, sizeof hdr);
d65 2
a66 1
		switch (hdr.type) {
d68 1
a68 1
			if (hdr.size != sizeof commanddata)
d70 1
a70 1
			buffer_read(c->in, &commanddata, sizeof commanddata);
d75 1
a75 1
			if (hdr.size != sizeof identifydata)
d77 1
a77 1
			buffer_read(c->in, &identifydata, sizeof identifydata);
d82 1
a82 1
			if (hdr.size != sizeof resizedata)
d84 1
a84 1
			buffer_read(c->in, &resizedata, sizeof resizedata);
d89 1
a89 1
			if (hdr.size != 0)
d97 1
a97 1
			if (hdr.size != sizeof unlockdata)
d99 1
a99 1
			buffer_read(c->in, &unlockdata, sizeof unlockdata);
d108 1
a108 1
			if (hdr.size != 0)
d116 1
a116 1
			if (hdr.size != sizeof environdata)
d118 1
a118 1
			buffer_read(c->in, &environdata, sizeof environdata);
d127 2
a239 5
	if (data->version != PROTOCOL_VERSION) {
		server_write_error(c, "protocol version mismatch");
		return;
	}

@


1.9
log
@Similar changes for server_msg_dispatch: use a switch instead of a lookup table
and merge smaller functions inline.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.8 2009/07/29 14:17:26 nicm Exp $ */
d45 1
d103 9
@


1.8
log
@Rename struct hdrtype to msgtype which is a better name and can be used even
when struct hdr disappears.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.7 2009/07/26 12:58:44 nicm Exp $ */
d29 7
a35 26
void	server_msg_fn_command(struct hdr *, struct client *);
void	server_msg_fn_identify(struct hdr *, struct client *);
void	server_msg_fn_resize(struct hdr *, struct client *);
void	server_msg_fn_exiting(struct hdr *, struct client *);
void	server_msg_fn_unlock(struct hdr *, struct client *);
void	server_msg_fn_wakeup(struct hdr *, struct client *);

void printflike2 server_msg_fn_command_error(
    	    struct cmd_ctx *, const char *, ...);
void printflike2 server_msg_fn_command_print(
    	    struct cmd_ctx *, const char *, ...);
void printflike2 server_msg_fn_command_info(
    	    struct cmd_ctx *, const char *, ...);

struct server_msg {
	enum msgtype	type;
	void	        (*fn)(struct hdr *, struct client *);
};
const struct server_msg server_msg_table[] = {
	{ MSG_IDENTIFY, server_msg_fn_identify },
	{ MSG_COMMAND, server_msg_fn_command },
	{ MSG_RESIZE, server_msg_fn_resize },
	{ MSG_EXITING, server_msg_fn_exiting },
	{ MSG_UNLOCK, server_msg_fn_unlock },
	{ MSG_WAKEUP, server_msg_fn_wakeup },
};
d41 4
a44 2
	const struct server_msg	*msg;
	u_int		 	 i;
d54 51
a104 6
		for (i = 0; i < nitems(server_msg_table); i++) {
			msg = server_msg_table + i;
			if (msg->type == hdr.type) {
				msg->fn(&hdr, c);
				break;
			}
a105 2
		if (i == nitems(server_msg_table))
			fatalx("unexpected message");
d110 1
a110 1
server_msg_fn_command_error(struct cmd_ctx *ctx, const char *fmt, ...)
d123 1
a123 1
server_msg_fn_command_print(struct cmd_ctx *ctx, const char *fmt, ...)
d136 1
a136 1
server_msg_fn_command_info(struct cmd_ctx *ctx, const char *fmt, ...)
d152 1
a152 1
server_msg_fn_command(struct hdr *hdr, struct client *c)
d154 5
a158 10
	struct msg_command_data	data;
	struct cmd_ctx	 	ctx;
	struct cmd_list	       *cmdlist = NULL;
	struct cmd	       *cmd;
	int			argc;
	char		      **argv, *cause;

	if (hdr->size < sizeof data)
		fatalx("bad MSG_COMMAND size");
	buffer_read(c->in, &data, sizeof data);
d162 3
a164 3
	ctx.error = server_msg_fn_command_error;
	ctx.print = server_msg_fn_command_print;
	ctx.info = server_msg_fn_command_info;
d166 1
a166 1
	ctx.msgdata = &data;
d172 4
a175 4
	argc = data.argc;
	data.argv[(sizeof data.argv) - 1] = '\0';
	if (cmd_unpack_argv(data.argv, sizeof data.argv, argc, &argv) != 0) {
		server_msg_fn_command_error(&ctx, "command too long");
d186 1
a186 1
		server_msg_fn_command_error(&ctx, "%s", cause);
d192 1
a192 1
	if (data.pid != -1) {
d195 1
a195 1
				server_msg_fn_command_error(&ctx,
d215 1
a215 1
server_msg_fn_identify(struct hdr *hdr, struct client *c)
d217 1
a217 10
	struct msg_identify_data	data;

	if (hdr->size < sizeof data)
		fatalx("bad MSG_IDENTIFY size");
	buffer_read(c->in, &data, sizeof data);

	log_debug("identify msg from client: %u,%u (%d)",
	    data.sx, data.sy, data.version);

	if (data.version != PROTOCOL_VERSION) {
d222 2
a223 2
	c->tty.sx = data.sx;
	c->tty.sy = data.sy;
d226 8
a233 8
	data.cwd[(sizeof data.cwd) - 1] = '\0';
	if (*data.cwd != '\0')
		c->cwd = xstrdup(data.cwd);

	data.tty[(sizeof data.tty) - 1] = '\0';
	data.term[(sizeof data.term) - 1] = '\0';
	tty_init(&c->tty, data.tty, data.term);
	if (data.flags & IDENTIFY_UTF8)
d235 1
a235 1
	if (data.flags & IDENTIFY_256COLOURS)
d237 1
a237 1
	else if (data.flags & IDENTIFY_88COLOURS)
d239 1
a239 1
	if (data.flags & IDENTIFY_HASDEFAULTS)
d246 1
a246 1
server_msg_fn_resize(struct hdr *hdr, struct client *c)
d248 1
a248 9
	struct msg_resize_data	data;

	if (hdr->size != sizeof data)
		fatalx("bad MSG_RESIZE size");
	buffer_read(c->in, &data, sizeof data);

	log_debug("resize msg from client: %u,%u", data.sx, data.sy);

	c->tty.sx = data.sx;
d251 1
a251 1
	c->tty.sy = data.sy;
a262 47
	server_redraw_client(c);
}

void
server_msg_fn_exiting(struct hdr *hdr, struct client *c)
{
	if (hdr->size != 0)
		fatalx("bad MSG_EXITING size");

	log_debug("exiting msg from client");

	c->session = NULL;

	tty_close(&c->tty, c->flags & CLIENT_SUSPENDED);

	server_write_client(c, MSG_EXITED, NULL, 0);
}

void
server_msg_fn_unlock(struct hdr *hdr, struct client *c)
{
	struct msg_unlock_data	data;

	if (hdr->size != sizeof data)
		fatalx("bad MSG_UNLOCK size");
	buffer_read(c->in, &data, sizeof data);

	log_debug("unlock msg from client");

	data.pass[(sizeof data.pass) - 1] = '\0';
	if (server_unlock(data.pass) != 0)
		server_write_error(c, "bad password");
	memset(&data, 0, sizeof data);

	server_write_client(c, MSG_EXIT, NULL, 0);
}

void
server_msg_fn_wakeup(struct hdr *hdr, struct client *c)
{
	if (hdr->size != 0)
		fatalx("bad MSG_WAKEUP size");

	log_debug("wakeup msg from client");

	c->flags &= ~CLIENT_SUSPENDED;
	tty_start_tty(&c->tty);
@


1.7
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.6 2009/07/23 21:19:11 nicm Exp $ */
d44 1
a44 1
	enum hdrtype	type;
@


1.6
log
@None of the server message functions return anything but 0, so make them all
void.

Also remove a leftover variable in client.c.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.5 2009/07/07 17:24:32 nicm Exp $ */
d86 2
a87 2
	va_list	ap;
	char   *msg;
d90 1
a90 1
	xvasprintf(&msg, fmt, ap);
d93 1
a93 2
	server_write_client(ctx->cmdclient, MSG_ERROR, msg, strlen(msg));
	xfree(msg);
d99 2
a100 2
	va_list	ap;
	char   *msg;
d103 1
a103 1
	xvasprintf(&msg, fmt, ap);
d106 1
a106 2
	server_write_client(ctx->cmdclient, MSG_PRINT, msg, strlen(msg));
	xfree(msg);
d112 2
a113 2
	va_list	ap;
	char   *msg;
d119 1
a119 1
	xvasprintf(&msg, fmt, ap);
d122 1
a122 2
	server_write_client(ctx->cmdclient, MSG_PRINT, msg, strlen(msg));
	xfree(msg);
d130 1
a130 1
	struct cmd_list	       *cmdlist;
d132 2
a138 1
	cmdlist = cmd_list_recv(c->in);
d151 20
d177 1
a177 3
				cmd_list_free(cmdlist);
				server_write_client(c, MSG_EXIT, NULL, 0);
				return;
d185 6
a196 1
        char			       *term;
a200 1
	term = cmd_recv_string(c->in);
d206 1
a206 4
#define MSG "protocol version mismatch"
		server_write_client(c, MSG_ERROR, MSG, (sizeof MSG) - 1);
#undef MSG
		server_write_client(c, MSG_EXIT, NULL, 0);
d219 2
a220 1
	tty_init(&c->tty, data.tty, term);
a229 3
	if (term != NULL)
		xfree(term);

d280 1
a280 1
        char	*pass;
d282 1
a282 1
	if (hdr->size == 0)
d284 1
a284 1
	pass = cmd_recv_string(c->in);
d288 4
a291 5
	if (server_unlock(pass) != 0) {
#define MSG "bad password"
		server_write_client(c, MSG_ERROR, MSG, (sizeof MSG) - 1);
#undef MSG
	}
a293 3

	memset(pass, 0, strlen(pass));
	xfree(pass);
@


1.5
log
@Handle empty or unset TERM correctly; also fix a fatal() message while here.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.4 2009/07/07 12:34:47 nicm Exp $ */
d29 6
a34 6
int	server_msg_fn_command(struct hdr *, struct client *);
int	server_msg_fn_identify(struct hdr *, struct client *);
int	server_msg_fn_resize(struct hdr *, struct client *);
int	server_msg_fn_exiting(struct hdr *, struct client *);
int	server_msg_fn_unlock(struct hdr *, struct client *);
int	server_msg_fn_wakeup(struct hdr *, struct client *);
d45 1
a45 1
	int	        (*fn)(struct hdr *, struct client *);
a61 1
	int			 n;
d74 1
a74 2
				if ((n = msg->fn(&hdr, c)) != 0)
					return (n);
d128 1
a128 1
int
d161 1
a161 1
				return (0);
a168 1
	return (0);
d171 1
a171 1
int
d190 1
a190 1
		return (0);
a215 2

	return (0);
d218 1
a218 1
int
a244 2

	return (0);
d247 1
a247 1
int
a259 2

	return (0);
d262 1
a262 1
int
a282 2

	return (0);
d285 1
a285 1
int
a295 2

	return (0);
@


1.4
log
@When sending a "protocol mismatch" error message, tell the client to exit
afterwards, otherwise it hangs.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.3 2009/06/05 11:14:13 nicm Exp $ */
d214 3
a216 1
	xfree(term);
@


1.3
log
@Terminate cwd buffer before running xstrdup on it.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.2 2009/06/04 21:43:24 nicm Exp $ */
d192 1
@


1.2
log
@If the prompt is hidden or a password is sent with -U, zero it before freeing
it.
@
text
@d1 1
a1 1
/* $OpenBSD: server-msg.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d199 1
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a280 2
		server_write_client(c, MSG_EXIT, NULL, 0);
		return (0);
d285 3
@

