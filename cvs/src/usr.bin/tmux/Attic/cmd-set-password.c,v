head	1.6;
access;
symbols
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2009.09.23.06.18.47;	author nicm;	state dead;
branches;
next	1.5;

1.5
date	2009.09.21.15.32.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.21.21.20.07;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the internal tmux locking and instead detach each client and run the
command specified by a new option "lock-command" (by default "lock -np") in
each client.

This means each terminal has to be unlocked individually but simplifies the
code and allows the system password to be used to unlock.

Note that the set-password command is gone, so it will need to be removed from
configuration files, and the -U command line flag has been removed.

This is the third protocol version change so again it is best to stop the tmux
server before upgrading.
@
text
@/* $OpenBSD: cmd-set-password.c,v 1.5 2009/09/21 15:32:06 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <pwd.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Set server password.
 */

int	cmd_set_password_parse(struct cmd *, int, char **, char **);
int	cmd_set_password_exec(struct cmd *, struct cmd_ctx *);
void	cmd_set_password_free(struct cmd *);
void	cmd_set_password_init(struct cmd *, int);
size_t	cmd_set_password_print(struct cmd *, char *, size_t);

struct cmd_set_password_data {
	char	*password;
	int	 flag_encrypted;
};

const struct cmd_entry cmd_set_password_entry = {
	"set-password", "pass",
	"[-c] password",
	0, 0,
	cmd_set_password_init,
	cmd_set_password_parse,
	cmd_set_password_exec,
	cmd_set_password_free,
	cmd_set_password_print
};

void
cmd_set_password_init(struct cmd *self, unused int arg)
{
	struct cmd_set_password_data	 *data;

	self->data = data = xmalloc(sizeof *data);
	data->password = NULL;
	data->flag_encrypted = 0;
}

int
cmd_set_password_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_set_password_data	*data;
	int				 opt;
	char				*out;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "c")) != -1) {
		switch (opt) {
		case 'c':
			data->flag_encrypted = 1;
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 1)
		goto usage;

	if (!data->flag_encrypted) {
		if ((out = crypt(argv[0], "$1")) != NULL)
			data->password = xstrdup(out);
	} else
		data->password = xstrdup(argv[0]);

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
}

int
cmd_set_password_exec(struct cmd *self, struct cmd_ctx *ctx)
{
	struct cmd_set_password_data	*data = self->data;

	if (data->password == NULL) {
		ctx->error(ctx, "failed to encrypt password");
		return (-1);
	}

	if (server_password != NULL)
		xfree(server_password);
	if (*data->password == '\0')
		server_password = NULL;
	else
		server_password = xstrdup(data->password);

 	return (0);
}

void
cmd_set_password_free(struct cmd *self)
{
	struct cmd_set_password_data	*data = self->data;

	if (data->password != NULL)
		xfree(data->password);
	xfree(data);
}

size_t
cmd_set_password_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_set_password_data	*data = self->data;
	size_t				 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->flag_encrypted)
		off += xsnprintf(buf + off, len - off, " -c");
	if (off < len && data->password != NULL)
		off += xsnprintf(buf + off, len - off, " password");
	return (off);
}
@


1.5
log
@Use KEYC_NONE constant instead of 0 on init.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-password.c,v 1.4 2009/07/26 12:58:44 nicm Exp $ */
@


1.4
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-password.c,v 1.3 2009/07/21 21:20:07 nicm Exp $ */
d69 1
a69 1
	self->entry->init(self, 0);
@


1.3
log
@Remove leftover debug logging of password.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-password.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
a31 2
void	cmd_set_password_send(struct cmd *, struct buffer *);
void	cmd_set_password_recv(struct cmd *, struct buffer *);
a47 2
	cmd_set_password_send,
	cmd_set_password_recv,
a118 19
}

void
cmd_set_password_send(struct cmd *self, struct buffer *b)
{
	struct cmd_set_password_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->password);
}

void
cmd_set_password_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_set_password_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->password = cmd_recv_string(b);
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-set-password.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a120 1
	log_debug("pw now %s", server_password);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d46 1
a46 1
	0,
@

