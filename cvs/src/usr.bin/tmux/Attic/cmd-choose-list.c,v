head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2014.04.16.21.02.41;	author nicm;	state dead;
branches;
next	1.8;

1.8
date	2013.10.10.12.00.18;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.21.16.09.59;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.21.16.09.17;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.21.16.08.24;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2012.09.05.10.14.21;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.03.10.02.39;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.03.09.57.57;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove the choose-list command to prepare for some later choose-* work.
@
text
@/* $Id: cmd-choose-list.c,v 1.8 2013/10/10 12:00:18 nicm Exp $ */

/*
 * Copyright (c) 2012 Thomas Adam <thomas@@xteddy.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <stdlib.h>

#include <string.h>

#include "tmux.h"

#define CMD_CHOOSE_LIST_DEFAULT_TEMPLATE "run-shell '%%'"

/*
 * Enter choose mode to choose a custom list.
 */

enum cmd_retval cmd_choose_list_exec(struct cmd *, struct cmd_q *);

const struct cmd_entry cmd_choose_list_entry = {
	"choose-list", NULL,
	"l:t:", 0, 1,
	"[-l items] " CMD_TARGET_WINDOW_USAGE "[template]",
	0,
	NULL,
	cmd_choose_list_exec
};

enum cmd_retval
cmd_choose_list_exec(struct cmd *self, struct cmd_q *cmdq)
{
	struct args			*args = self->args;
	struct client			*c;
	struct winlink			*wl;
	const char			*list1;
	char				*template, *item, *copy, *list;
	u_int				 idx;

	if ((c = cmd_current_client(cmdq)) == NULL) {
		cmdq_error(cmdq, "no client available");
		return (CMD_RETURN_ERROR);
	}

	if ((list1 = args_get(args, 'l')) == NULL)
		return (CMD_RETURN_ERROR);

	if ((wl = cmd_find_window(cmdq, args_get(args, 't'), NULL)) == NULL)
		return (CMD_RETURN_ERROR);

	if (window_pane_set_mode(wl->window->active, &window_choose_mode) != 0)
		return (CMD_RETURN_NORMAL);

	if (args->argc != 0)
		template = xstrdup(args->argv[0]);
	else
		template = xstrdup(CMD_CHOOSE_LIST_DEFAULT_TEMPLATE);

	copy = list = xstrdup(list1);
	idx = 0;
	while ((item = strsep(&list, ",")) != NULL)
	{
		if (*item == '\0') /* no empty entries */
			continue;
		window_choose_add_item(wl->window->active, c, wl, item,
		    template, idx);
		idx++;
	}
	free(copy);

	if (idx == 0) {
		free(template);
		window_pane_reset_mode(wl->window->active);
		return (CMD_RETURN_ERROR);
	}

	window_choose_ready(wl->window->active, 0, NULL);

	free(template);

	return (CMD_RETURN_NORMAL);
}
@


1.8
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $Id: cmd-choose-list.c,v 1.7 2013/03/24 09:54:10 nicm Exp $ */
@


1.7
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $Id: cmd-choose-list.c,v 1.6 2013/03/21 16:09:59 nicm Exp $ */
a40 1
	NULL,
@


1.6
log
@Allow choose commands to be used outside tmux, so long as at least one
client is attached.
@
text
@d1 1
a1 1
/* $Id: cmd-choose-list.c,v 1.5 2013/03/21 16:09:17 nicm Exp $ */
d34 1
a34 1
enum cmd_retval cmd_choose_list_exec(struct cmd *, struct cmd_ctx *);
d47 1
a47 1
cmd_choose_list_exec(struct cmd *self, struct cmd_ctx *ctx)
d56 2
a57 2
	if ((c = cmd_current_client(ctx)) == NULL) {
		ctx->error(ctx, "no client available");
d64 1
a64 1
	if ((wl = cmd_find_window(ctx, args_get(args, 't'), NULL)) == NULL)
@


1.5
log
@Remove free callback for window_choose_data objects.
@
text
@d1 1
a1 1
/* $Id: cmd-choose-list.c,v 1.4 2013/03/21 16:08:24 nicm Exp $ */
d50 1
d56 2
a57 2
	if (ctx->curclient == NULL) {
		ctx->error(ctx, "must be run interactively");
d81 1
a81 1
		window_choose_add_item(wl->window->active, ctx, wl, item,
@


1.4
log
@Miscellaneous tidying of choose API, including:

- rename client and session to start_client and start_session in
  window_choose_data struct. also add TREE_OTHER define and reorder
  the struct
- rename window_choose_ctx to window_choose_data_run
- don't pass a cmd_ctx into window_choose_create (will let it use a
  different client later). instead take type, session, client
- add window_choose_data_free and use it to dispose of wcd rather than
  each cmd-*.c doing it individually
- change so ref counting is done by wcd_add and wcd_free rather than
  callers
- also add a ref to tree_session
- all the callbacks except choose-client and find-window are the same so
  remove them and add window_choose_default_callback
- reorder/rename some other bits and pieces for tidyness
@
text
@d1 1
a1 1
/* $Id: cmd-choose-list.c,v 1.3 2012/09/05 10:14:21 nicm Exp $ */
d92 1
a92 1
	window_choose_ready(wl->window->active, 0, NULL, NULL);
@


1.3
log
@Handle empty list properly in choose-list, based on fix from Thomas Adam.
@
text
@d1 1
a1 1
/* $Id: cmd-choose-list.c,v 1.2 2012/09/03 10:02:39 nicm Exp $ */
a35 3
void cmd_choose_list_callback(struct window_choose_data *);
void cmd_choose_list_free(struct window_choose_data *);

d92 1
a92 2
	window_choose_ready(wl->window->active, 0, cmd_choose_list_callback,
	    cmd_choose_list_free);
a96 22
}

void
cmd_choose_list_callback(struct window_choose_data *cdata)
{
	if (cdata == NULL || (cdata->client->flags & CLIENT_DEAD))
		return;

	window_choose_ctx(cdata);
}

void
cmd_choose_list_free(struct window_choose_data *cdata)
{
	cdata->session->references--;
	cdata->client->references--;

	free(cdata->ft_template);
	free(cdata->command);
	format_free(cdata->ft);
	free(cdata);

@


1.2
log
@Rename variables to something a but more understandable.
@
text
@d1 1
a1 1
/* $Id: cmd-choose-list.c,v 1.1 2012/09/03 09:57:57 nicm Exp $ */
d88 6
@


1.1
log
@add cmd-choose-list to allow arbitrary options to be selected. From
Thomas Adam.
@
text
@d1 1
a1 1
/* $Id$ */
d54 2
a55 2
	const char			*lists;
	char				*template, *list, *copy, *lists1;
d63 1
a63 1
	if ((lists = args_get(args, 'l')) == NULL)
d77 1
a77 1
	copy = lists1 = xstrdup(lists);
d79 1
a79 1
	while ((list = strsep(&lists1, ",")) != NULL)
d81 1
a81 1
		if (*list == '\0') /* no empty entries */
d83 1
a83 1
		window_choose_add_item(wl->window->active, ctx, wl, list,
@

