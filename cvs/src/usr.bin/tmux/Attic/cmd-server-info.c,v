head	1.35;
access;
symbols
	OPENBSD_5_4:1.33.0.2
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.30.0.2
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.27.0.2
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.4
	OPENBSD_5_0:1.25.0.2
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.24.0.2
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.35
date	2014.01.22.14.43.42;	author nicm;	state dead;
branches;
next	1.34;

1.34
date	2013.10.10.12.00.23;	author nicm;	state Exp;
branches;
next	1.33;

1.33
date	2013.03.25.10.11.45;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.31;

1.31
date	2013.03.22.10.31.22;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2013.01.18.02.16.21;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2012.11.22.14.41.11;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2012.11.22.14.26.04;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2012.03.15.10.36.00;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2011.04.19.20.12.47;	author matthew;	state Exp;
branches;
next	1.24;

1.24
date	2011.01.26.01.54.56;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2011.01.26.00.11.47;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2011.01.13.00.54.32;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2011.01.01.03.32.28;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2010.12.21.22.37.59;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2009.12.10.09.16.52;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.03.20.29.47;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.11.01.23.20.37;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.26.21.42.04;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.13.13.15.26;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.07.21.01.50;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.02.17.34.57;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.18.14.48.42;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.11.17.18.35;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.08.13.29.27;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.28.06.48.44;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.03.19.37.27;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Merge server-info into show-messages and remove some not useful output.
@
text
@/* $OpenBSD: cmd-server-info.c,v 1.34 2013/10/10 12:00:23 nicm Exp $ */

/*
 * Copyright (c) 2008 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/utsname.h>

#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <vis.h>

#include "tmux.h"

/*
 * Show various information about server.
 */

enum cmd_retval	 cmd_server_info_exec(struct cmd *, struct cmd_q *);

const struct cmd_entry cmd_server_info_entry = {
	"server-info", "info",
	"", 0, 0,
	"",
	0,
	NULL,
	cmd_server_info_exec
};

enum cmd_retval
cmd_server_info_exec(unused struct cmd *self, struct cmd_q *cmdq)
{
	struct tty_term				*term;
	struct client				*c;
	struct session				*s;
	struct winlink				*wl;
	struct window				*w;
	struct window_pane			*wp;
	struct tty_code				*code;
	const struct tty_term_code_entry	*ent;
	struct utsname				 un;
	struct job				*job;
	struct grid				*gd;
	struct grid_line			*gl;
	u_int		 			 i, j, k, lines;
	size_t					 size;
	char					 out[80];
	char					*tim;
	time_t		 			 t;

	tim = ctime(&start_time);
	*strchr(tim, '\n') = '\0';
	cmdq_print(cmdq, "pid %ld, started %s", (long) getpid(), tim);
	cmdq_print(cmdq, "socket path %s, debug level %d", socket_path,
	    debug_level);
	if (uname(&un) >= 0) {
		cmdq_print(cmdq, "system is %s %s %s %s",
		    un.sysname, un.release, un.version, un.machine);
	}
	if (cfg_file != NULL)
		cmdq_print(cmdq, "configuration file is %s", cfg_file);
	else
		cmdq_print(cmdq, "configuration file not specified");
	cmdq_print(cmdq, "protocol version is %d", PROTOCOL_VERSION);
	cmdq_print(cmdq, "%s", "");

	cmdq_print(cmdq, "Clients:");
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
		if (c == NULL || c->session == NULL)
			continue;

		cmdq_print(cmdq,"%2d: %s (%d, %d): %s [%ux%u %s bs=%hho "
		    "class=%u] [flags=0x%x/0x%x, references=%u]", i,
		    c->tty.path, c->ibuf.fd, c->tty.fd, c->session->name,
		    c->tty.sx, c->tty.sy, c->tty.termname,
		    c->tty.tio.c_cc[VERASE], c->tty.class,
		    c->flags, c->tty.flags, c->references);
	}
	cmdq_print(cmdq, "%s", "");

	cmdq_print(cmdq, "Sessions: [%zu]", sizeof (struct grid_cell));
	RB_FOREACH(s, sessions, &sessions) {
		t = s->creation_time.tv_sec;
		tim = ctime(&t);
		*strchr(tim, '\n') = '\0';

		cmdq_print(cmdq, "%2u: %s: %u windows (created %s) [%ux%u] "
		    "[flags=0x%x]", s->id, s->name,
		    winlink_count(&s->windows), tim, s->sx, s->sy, s->flags);
		RB_FOREACH(wl, winlinks, &s->windows) {
			w = wl->window;
			cmdq_print(cmdq, "%4u: %s [%ux%u] [flags=0x%x, "
			    "references=%u, last layout=%d]", wl->idx, w->name,
			    w->sx, w->sy, w->flags, w->references,
			    w->lastlayout);
			j = 0;
			TAILQ_FOREACH(wp, &w->panes, entry) {
				lines = size = 0;
				gd = wp->base.grid;
				for (k = 0; k < gd->hsize + gd->sy; k++) {
					gl = &gd->linedata[k];
					if (gl->celldata == NULL)
						continue;
					lines++;
					size += gl->cellsize *
					    sizeof *gl->celldata;
				}
				cmdq_print(cmdq,
				    "%6u: %s %lu %d %u/%u, %zu bytes", j,
				    wp->tty, (u_long) wp->pid, wp->fd, lines,
				    gd->hsize + gd->sy, size);
				j++;
			}
		}
	}
	cmdq_print(cmdq, "%s", "");

	cmdq_print(cmdq, "Terminals:");
	LIST_FOREACH(term, &tty_terms, entry) {
		cmdq_print(cmdq, "%s [references=%u, flags=0x%x]:",
		    term->name, term->references, term->flags);
		for (i = 0; i < NTTYCODE; i++) {
			ent = &tty_term_codes[i];
			code = &term->codes[ent->code];
			switch (code->type) {
			case TTYCODE_NONE:
				cmdq_print(cmdq, "%2u: %s: [missing]",
				    ent->code, ent->name);
				break;
			case TTYCODE_STRING:
				strnvis(out, code->value.string, sizeof out,
				    VIS_OCTAL|VIS_TAB|VIS_NL);
				cmdq_print(cmdq, "%2u: %s: (string) %s",
				    ent->code, ent->name, out);
				break;
			case TTYCODE_NUMBER:
				cmdq_print(cmdq, "%2u: %s: (number) %d",
				    ent->code, ent->name, code->value.number);
				break;
			case TTYCODE_FLAG:
				cmdq_print(cmdq, "%2u: %s: (flag) %s",
				    ent->code, ent->name,
				    code->value.flag ? "true" : "false");
				break;
			}
		}
	}
	cmdq_print(cmdq, "%s", "");

	cmdq_print(cmdq, "Jobs:");
	LIST_FOREACH(job, &all_jobs, lentry) {
		cmdq_print(cmdq, "%s [fd=%d, pid=%d, status=%d]",
		    job->cmd, job->fd, job->pid, job->status);
	}

	return (CMD_RETURN_NORMAL);
}
@


1.34
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.33 2013/03/25 10:11:45 nicm Exp $ */
@


1.33
log
@Rename session idx to session id throughout and add $ prefix to targets
to use it, extended from a diff from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.32 2013/03/24 09:54:10 nicm Exp $ */
a40 1
	NULL,
@


1.32
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.31 2013/03/22 10:31:22 nicm Exp $ */
d105 1
a105 1
		    "[flags=0x%x]", s->idx, s->name,
@


1.31
log
@No more lint means no more ARGSUSED.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.30 2013/01/18 02:16:21 nicm Exp $ */
d34 1
a34 1
enum cmd_retval	 cmd_server_info_exec(struct cmd *, struct cmd_ctx *);
d47 1
a47 1
cmd_server_info_exec(unused struct cmd *self, struct cmd_ctx *ctx)
d69 3
a71 3
	ctx->print(ctx, "pid %ld, started %s", (long) getpid(), tim);
	ctx->print(
	    ctx, "socket path %s, debug level %d", socket_path, debug_level);
d73 1
a73 1
		ctx->print(ctx, "system is %s %s %s %s",
d77 1
a77 1
		ctx->print(ctx, "configuration file is %s", cfg_file);
d79 3
a81 3
		ctx->print(ctx, "configuration file not specified");
	ctx->print(ctx, "protocol version is %d", PROTOCOL_VERSION);
	ctx->print(ctx, "%s", "");
d83 1
a83 1
	ctx->print(ctx, "Clients:");
d89 1
a89 1
		ctx->print(ctx,"%2d: %s (%d, %d): %s [%ux%u %s bs=%hho "
d96 1
a96 1
	ctx->print(ctx, "%s", "");
d98 1
a98 1
	ctx->print(ctx, "Sessions: [%zu]", sizeof (struct grid_cell));
d104 1
a104 1
		ctx->print(ctx, "%2u: %s: %u windows (created %s) [%ux%u] "
d109 1
a109 1
			ctx->print(ctx, "%4u: %s [%ux%u] [flags=0x%x, "
d125 1
a125 1
				ctx->print(ctx,
d133 1
a133 1
	ctx->print(ctx, "%s", "");
d135 1
a135 1
	ctx->print(ctx, "Terminals:");
d137 1
a137 1
		ctx->print(ctx, "%s [references=%u, flags=0x%x]:",
d144 1
a144 1
				ctx->print(ctx, "%2u: %s: [missing]",
d150 1
a150 1
				ctx->print(ctx, "%2u: %s: (string) %s",
d154 1
a154 1
				ctx->print(ctx, "%2u: %s: (number) %d",
d158 1
a158 1
				ctx->print(ctx, "%2u: %s: (flag) %s",
d165 1
a165 1
	ctx->print(ctx, "%s", "");
d167 1
a167 1
	ctx->print(ctx, "Jobs:");
d169 1
a169 1
		ctx->print(ctx, "%s [fd=%d, pid=%d, status=%d]",
@


1.30
log
@Rather than having two grids for each pane, one for ASCII and one for
UTF-8, collapse the two together. Simplifies the code at the expense of
more memory (which can probably be reduced again later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.29 2012/11/22 14:41:11 nicm Exp $ */
a45 1
/* ARGSUSED */
@


1.29
log
@Put helper function back, will be needed in a bit.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.28 2012/11/22 14:26:04 nicm Exp $ */
d62 2
a63 1
	u_int		 			 i, j, k;
a66 2
	u_int					 lines, ulines;
	size_t					 size, usize;
d99 1
a99 2
	ctx->print(ctx, "Sessions: [%zu/%zu]",
	    sizeof (struct grid_cell), sizeof (struct grid_utf8));
d116 1
a116 1
				lines = ulines = size = usize = 0;
d120 5
a124 10
					if (gl->celldata != NULL) {
						lines++;
						size += gl->cellsize *
						    sizeof *gl->celldata;
					}
					if (gl->utf8data != NULL) {
						ulines++;
						usize += gl->utf8size *
						    sizeof *gl->utf8data;
					}
d126 2
a127 2
				ctx->print(ctx, "%6u: %s %lu %d %u/%u, %zu "
				    "bytes; UTF-8 %u/%u, %zu bytes", j,
d129 1
a129 2
				    gd->hsize + gd->sy, size, ulines,
				    gd->hsize + gd->sy, usize);
@


1.28
log
@Instead of worrying about xterm version, send DA and read DEC service
class which is more likely to be useful. Not used for anything yet
anyway.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.27 2012/07/11 07:10:15 nicm Exp $ */
d95 1
a95 1
		    c->tty.tio.c_cc[VERASE], c->tty.service_class,
@


1.27
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.26 2012/03/15 10:36:00 nicm Exp $ */
d92 1
a92 1
		    "xterm=%u] [flags=0x%x/0x%x, references=%u]", i,
d95 1
a95 1
		    c->tty.tio.c_cc[VERASE], c->tty.xterm_version,
@


1.26
log
@Send secondary DA to terminals with XT in terminfo when starting up and
parse it to work out the xterm version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.25 2011/04/19 20:12:47 matthew Exp $ */
d34 1
a34 1
int	cmd_server_info_exec(struct cmd *, struct cmd_ctx *);
d47 1
a47 1
int
d182 1
a182 1
	return (0);
@


1.25
log
@POSIX only guarantees uname() will return a non-negative value on
success.

ok nicm@@
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.24 2011/01/26 01:54:56 nicm Exp $ */
d91 3
a93 3
		ctx->print(ctx,"%2d: %s (%d, %d): %s [%ux%u %s bs=%hho] "
		    "[flags=0x%x/0x%x, references=%u]", i, c->tty.path,
		    c->ibuf.fd, c->tty.fd, c->session->name,
d95 2
a96 2
		    c->tty.tio.c_cc[VERASE], c->flags,
		    c->tty.flags, c->references);
@


1.24
log
@Simplify the way jobs work and drop the persist type, so all jobs are
fire-and-forget.

Status jobs now managed with two trees of output (new and old), rather
than storing the output in the jobs themselves. When the status line is
processed any jobs which don't appear in the new tree are started and
the output from the old tree displayed. When a job finishes it updates
the new tree with its output and that is used for any subsequent
redraws. When the status interval expires, the new tree is moved to the
old so that all jobs are run again.

This fixes the "#(echo %H:%M:%S)" problem which would lead to thousands
of identical persistent jobs and high memory use (this can still be
achieved by adding "sleep 30" but that is much less likely to happen by
accident).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.23 2011/01/26 00:11:47 nicm Exp $ */
d74 1
a74 1
	if (uname(&un) == 0) {
@


1.23
log
@Use LIST_* not SLIST_*.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.22 2011/01/13 00:54:32 nicm Exp $ */
d178 2
a179 2
		ctx->print(ctx, "%s [fd=%d, pid=%d, status=%d, flags=0x%x]",
		    job->cmd, job->fd, job->pid, job->status, job->flags);
@


1.22
log
@Log termios backspace for each client since it is used to recognise
backspace input.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.21 2011/01/04 00:42:47 nicm Exp $ */
d145 1
a145 1
	SLIST_FOREACH(term, &tty_terms, entry) {
d177 1
a177 1
	SLIST_FOREACH(job, &all_jobs, lentry) {
@


1.21
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.20 2011/01/01 03:32:28 nicm Exp $ */
d91 1
a91 1
		ctx->print(ctx, "%2d: %s (%d, %d): %s [%ux%u %s] "
d94 2
a95 1
		    c->tty.sx, c->tty.sy, c->tty.termname, c->flags,
@


1.20
log
@Another table that should be const.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.19 2010/12/21 22:37:59 nicm Exp $ */
d38 1
d40 1
a40 1
	0, "",
d43 1
a43 3
	cmd_server_info_exec,
	NULL,
	NULL
@


1.19
log
@Store sessions in an RB tree by name rather than a list, this is tidier
and allows them to easily be shown sorted in various lists
(list-sessions/choose-sessions).

Keep a session index which is used in a couple of places internally but
make it an ever-increasing number rather than filling in gaps with new
sessions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.18 2009/12/10 09:16:52 nicm Exp $ */
d51 18
a68 18
	struct tty_term			*term;
	struct client			*c;
	struct session			*s;
	struct winlink			*wl;
	struct window			*w;
	struct window_pane		*wp;
	struct tty_code			*code;
	struct tty_term_code_entry	*ent;
	struct utsname			 un;
	struct job			*job;
	struct grid			*gd;
	struct grid_line		*gl;
	u_int		 		 i, j, k;
	char				 out[80];
	char				*tim;
	time_t		 		 t;
	u_int				 lines, ulines;
	size_t				 size, usize;
@


1.18
log
@Add "server options" which are server-wide and not bound to a session or
window. Set and displayed with "set -s" and "show -s".

Currently the only option is "quiet" (like command-line -q, allowing it to be
set from .tmux.conf), but others will come along.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.17 2009/12/03 22:50:10 nicm Exp $ */
a83 2
	ctx->print(ctx, "%u clients, %u sessions",
	    ARRAY_LENGTH(&clients), ARRAY_LENGTH(&sessions));
d102 1
a102 5
	for (i = 0; i < ARRAY_LENGTH(&sessions); i++) {
		s = ARRAY_ITEM(&sessions, i);
		if (s == NULL)
			continue;

d108 2
a109 3
		    "[flags=0x%x, references=%u]", i, s->name,
		    winlink_count(&s->windows), tim, s->sx, s->sy, s->flags,
		    s->references);
@


1.17
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.16 2009/11/26 21:37:13 nicm Exp $ */
d73 2
a74 2
	ctx->print(ctx, "socket path %s, debug level %d%s",
	    socket_path, debug_level, be_quiet ? ", quiet" : "");
@


1.16
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.15 2009/11/13 19:53:29 nicm Exp $ */
d97 1
a97 1
		    c->tty.sx, c->tty.sy, c->tty.termname, c->flags, 
d102 1
a102 1
 	ctx->print(ctx, "Sessions: [%zu/%zu]",
d151 1
a151 1
  	ctx->print(ctx, "Terminals:");
d183 1
a183 1
  	ctx->print(ctx, "Jobs:");
@


1.15
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.14 2009/11/03 20:29:47 nicm Exp $ */
d47 1
@


1.14
log
@Change session and client activity and creation time members to have more
meaningful names.

Also, remove the code to try and update the session activity time for the
command client when a command message is received as is pointless because it
des not have a session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.13 2009/11/01 23:20:37 nicm Exp $ */
d39 1
a39 1
	0, 0,
@


1.13
log
@Add a flag for jobs that shouldn't be freed after they've died and use it for
status jobs, then only kill those jobs when status-left, status-right or
set-titles-string is changed.

Fixes problems with changing options from inside #().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.12 2009/10/26 21:42:04 deraadt Exp $ */
d108 1
a108 1
		t = s->tv.tv_sec;
@


1.12
log
@tabs are better; ok nicm
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.11 2009/10/13 13:15:26 nicm Exp $ */
d59 1
d181 6
@


1.11
log
@Do this in a better way - print messages when exiting with nonzero.

Also remove the login shell information from server-info, only the client
should care about it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.10 2009/09/07 21:01:50 nicm Exp $ */
d73 2
a74 2
        if (uname(&un) == 0) {
                ctx->print(ctx, "system is %s %s %s %s",
@


1.10
log
@Reference count clients and sessions rather than relying on a saved index for
cmd-choose-*.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.9 2009/09/02 17:34:57 nicm Exp $ */
d71 2
a72 3
	ctx->print(ctx, "socket path %s, debug level %d%s%s",
	    socket_path, debug_level, be_quiet ? ", quiet" : "",
	    login_shell ? ", login shell" : "");
@


1.9
log
@Accept -l to make it easier for people who use tmux as a login shell to use
$SHELL. Originally from martynas@@, tweaked by me.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.8 2009/08/18 14:48:42 nicm Exp $ */
d94 4
a97 3
		    "[flags=0x%x/0x%x]", i, c->tty.path, c->ibuf.fd, c->tty.fd,
		    c->session->name, c->tty.sx, c->tty.sy, c->tty.termname,
		    c->flags, c->tty.flags);
d113 3
a115 2
		    "[flags=0x%x]", i, s->name, winlink_count(&s->windows),
		    tim, s->sx, s->sy, s->flags);
@


1.8
log
@Tag a few missed printf-like functions and fix a missing "%s".
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.7 2009/08/11 17:18:35 nicm Exp $ */
d71 3
a73 2
	ctx->print(ctx, "socket path %s, debug level %d%s",
	    socket_path, debug_level, be_quiet ? ", quiet" : "");
@


1.7
log
@Switch tmux to use imsg. This is the last major change to make the
client-server protocol more resilient and make the protocol versioning work
properly. In future, the only things requiring a protocol version bump will be
changes in the message structs, and (when both client and server have this
change) mixing different versions should nicely report an error message.

As a side effect this also makes the code tidier, fixes a problem with the way
errors reported during server startup were handled, and supports fd passing
(which will be used in future).

Looked over by eric@@, thanks.

Please note that mixing a client with this change with an older server or vice
versa may cause tmux to crash or hang - tmux should be completely exited before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.6 2009/08/08 13:29:27 nicm Exp $ */
d84 1
a84 1
	ctx->print(ctx, "");
d97 1
a97 1
	ctx->print(ctx, "");
d145 1
a145 1
	ctx->print(ctx, "");
d177 1
a177 1
	ctx->print(ctx, "");
@


1.6
log
@Change the way the grid is stored, previously it was:

- a two-dimensional array of cells;
- a two-dimensional array of utf8 data;
- an array of line lengths.

Now it is a single array of a new struct grid_line each of which represents a
line and containts the length and an array of cells and an array of utf8 data.

This will make it easier to add additional per-line members, such as flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.5 2009/07/28 06:48:44 nicm Exp $ */
d93 1
a93 1
		    "[flags=0x%x/0x%x]", i, c->tty.path, c->fd, c->tty.fd,
@


1.5
log
@If select-layout is not given an argument, repply the last layout used in the
window, if any.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.4 2009/07/26 12:58:44 nicm Exp $ */
d60 1
d124 2
a125 1
					if (gd->data[k] != NULL) {
d127 2
a128 2
						size += gd->size[k] *
						    sizeof (**gd->data);
d130 1
a130 1
					if (gd->udata[k] != NULL) {
d132 2
a133 2
						usize += gd->usize[k] *
						    sizeof (**gd->udata);
@


1.4
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.3 2009/07/13 23:11:35 nicm Exp $ */
d115 1
a115 1
			    "references=%u, layout=%u]", wl->idx, w->name,
d117 1
a117 1
			    w->layout);
@


1.3
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.2 2009/06/03 19:37:27 nicm Exp $ */
a42 2
	NULL,
	NULL,
@


1.2
log
@Use vis(3) instead of handrolled function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-server-info.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d39 1
a39 1
	0,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d26 1
d160 2
a161 2
				clean_string(
				    code->value.string, out, sizeof out);
@

