head	1.14;
access;
symbols
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.14
date	2010.04.06.21.35.44;	author nicm;	state dead;
branches;
next	1.13;

1.13
date	2010.02.06.17.15.33;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2010.02.01.22.15.51;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.10.17.16.24;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.18.11.53.03;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.05.16.26.38;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.28.07.03.32;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.27.19.29.35;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.27.18.51.46;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.25.06.15.04;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.24.23.00.31;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Merge copy mode and output mode, dropping the latter. Idea and code from
Micah Cowan.
@
text
@/* $OpenBSD: window-more.c,v 1.13 2010/02/06 17:15:33 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>

#include "tmux.h"

struct screen *window_more_init(struct window_pane *);
void	window_more_free(struct window_pane *);
void	window_more_resize(struct window_pane *, u_int, u_int);
void	window_more_key(struct window_pane *, struct client *, int);

void	window_more_redraw_screen(struct window_pane *);
void	window_more_write_line(
	    struct window_pane *, struct screen_write_ctx *, u_int);

void	window_more_scroll_up(struct window_pane *);
void	window_more_scroll_down(struct window_pane *);

const struct window_mode window_more_mode = {
	window_more_init,
	window_more_free,
	window_more_resize,
	window_more_key,
	NULL,
	NULL,
};

struct window_more_mode_data {
	struct screen	        screen;

	struct mode_key_data	mdata;

	ARRAY_DECL(, char *)	list;
	u_int			top;
};

void
window_more_add(struct window_pane *wp, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	window_more_vadd(wp, fmt, ap);
	va_end(ap);
}

void
window_more_vadd(struct window_pane *wp, const char *fmt, va_list ap)
{
	struct window_more_mode_data	*data = wp->modedata;
	struct screen			*s = &data->screen;
	struct screen_write_ctx	 	 ctx;
	char   				*msg;
	u_int				 size;

	xvasprintf(&msg, fmt, ap);
	ARRAY_ADD(&data->list, msg);

	screen_write_start(&ctx, wp, NULL);
	size = ARRAY_LENGTH(&data->list) - 1;
	if (size >= data->top && size <= data->top + screen_size_y(s) - 1) {
		window_more_write_line(wp, &ctx, size - data->top);
		if (size != data->top)
			window_more_write_line(wp, &ctx, 0);
	} else
		window_more_write_line(wp, &ctx, 0);
	screen_write_stop(&ctx);
}

struct screen *
window_more_init(struct window_pane *wp)
{
	struct window_more_mode_data	*data;
	struct screen			*s;
	int				 keys;

	wp->modedata = data = xmalloc(sizeof *data);
	ARRAY_INIT(&data->list);
	data->top = 0;

	s = &data->screen;
	screen_init(s, screen_size_x(&wp->base), screen_size_y(&wp->base), 0);
	s->mode &= ~MODE_CURSOR;

	keys = options_get_number(&wp->window->options, "mode-keys");
	if (keys == MODEKEY_EMACS)
		mode_key_init(&data->mdata, &mode_key_tree_emacs_choice);
	else
		mode_key_init(&data->mdata, &mode_key_tree_vi_choice);

	return (s);
}

void
window_more_free(struct window_pane *wp)
{
	struct window_more_mode_data	*data = wp->modedata;
	u_int				 i;

	for (i = 0; i < ARRAY_LENGTH(&data->list); i++)
		xfree(ARRAY_ITEM(&data->list, i));
	ARRAY_FREE(&data->list);

	screen_free(&data->screen);
	xfree(data);
}

void
window_more_resize(struct window_pane *wp, u_int sx, u_int sy)
{
	struct window_more_mode_data	*data = wp->modedata;
	struct screen			*s = &data->screen;

	screen_resize(s, sx, sy);
	window_more_redraw_screen(wp);
}

/* ARGSUSED */
void
window_more_key(struct window_pane *wp, unused struct client *c, int key)
{
	struct window_more_mode_data	*data = wp->modedata;
	struct screen			*s = &data->screen;

	switch (mode_key_lookup(&data->mdata, key)) {
	case MODEKEYCHOICE_CANCEL:
		window_pane_reset_mode(wp);
		break;
	case MODEKEYCHOICE_UP:
	case MODEKEYCHOICE_SCROLLUP:
		window_more_scroll_up(wp);
		break;
	case MODEKEYCHOICE_DOWN:
	case MODEKEYCHOICE_SCROLLDOWN:
		window_more_scroll_down(wp);
		break;
	case MODEKEYCHOICE_PAGEUP:
		if (data->top < screen_size_y(s))
			data->top = 0;
		else
			data->top -= screen_size_y(s);
		window_more_redraw_screen(wp);
		break;
	case MODEKEYCHOICE_PAGEDOWN:
		if (data->top + screen_size_y(s) > ARRAY_LENGTH(&data->list))
			data->top = ARRAY_LENGTH(&data->list);
		else
			data->top += screen_size_y(s);
		window_more_redraw_screen(wp);
		break;
	default:
		break;
	}
}

void
window_more_write_line(
    struct window_pane *wp, struct screen_write_ctx *ctx, u_int py)
{
	struct window_more_mode_data	*data = wp->modedata;
	struct screen			*s = &data->screen;
	struct options			*oo = &wp->window->options;
	struct grid_cell		 gc;
	char   				*msg, hdr[32];
	size_t	 			 size;
	int				 utf8flag;

	utf8flag = options_get_number(&wp->window->options, "utf8");
	memcpy(&gc, &grid_default_cell, sizeof gc);

	if (py == 0) {
		size = xsnprintf(hdr, sizeof hdr,
		    "[%u/%u]", data->top, ARRAY_LENGTH(&data->list));
		screen_write_cursormove(ctx, screen_size_x(s) - size, 0);
		colour_set_fg(&gc, options_get_number(oo, "mode-fg"));
		colour_set_bg(&gc, options_get_number(oo, "mode-bg"));
		gc.attr |= options_get_number(oo, "mode-attr");
		screen_write_puts(ctx, &gc, "%s", hdr);
		memcpy(&gc, &grid_default_cell, sizeof gc);
	} else
		size = 0;

	screen_write_cursormove(ctx, 0, py);
	if (data->top + py  < ARRAY_LENGTH(&data->list)) {
		msg = ARRAY_ITEM(&data->list, data->top + py);
		screen_write_nputs(
		    ctx, screen_size_x(s) - size, &gc, utf8flag, "%s", msg);
	}
	while (s->cx < screen_size_x(s) - size)
		screen_write_putc(ctx, &gc, ' ');
}

void
window_more_redraw_screen(struct window_pane *wp)
{
	struct window_more_mode_data	*data = wp->modedata;
	struct screen			*s = &data->screen;
	struct screen_write_ctx	 	 ctx;
	u_int				 i;

	screen_write_start(&ctx, wp, NULL);
	for (i = 0; i < screen_size_y(s); i++)
		window_more_write_line(wp, &ctx, i);
	screen_write_stop(&ctx);
}

void
window_more_scroll_up(struct window_pane *wp)
{
	struct window_more_mode_data	*data = wp->modedata;
	struct screen_write_ctx		 ctx;

	if (data->top == 0)
		return;
	data->top--;

	screen_write_start(&ctx, wp, NULL);
	screen_write_cursormove(&ctx, 0, 0);
	screen_write_insertline(&ctx, 1);
	window_more_write_line(wp, &ctx, 0);
	window_more_write_line(wp, &ctx, 1);
	screen_write_stop(&ctx);
}

void
window_more_scroll_down(struct window_pane *wp)
{
	struct window_more_mode_data	*data = wp->modedata;
	struct screen			*s = &data->screen;
	struct screen_write_ctx		 ctx;

	if (data->top >= ARRAY_LENGTH(&data->list))
		return;
	data->top++;

	screen_write_start(&ctx, wp, NULL);
	screen_write_cursormove(&ctx, 0, 0);
	screen_write_deleteline(&ctx, 1);
	window_more_write_line(wp, &ctx, screen_size_y(s) - 1);
	window_more_write_line(wp, &ctx, 0);
	screen_write_stop(&ctx);
}
@


1.13
log
@Instead of bailing out on the first configuration file error, carry on,
collecting all the errors, then start with the active window in more mode
displaying them.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.12 2010/02/01 22:15:51 nicm Exp $ */
@


1.12
log
@Add scroll-up/scroll-down for choose/more mode, from Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.11 2009/12/03 22:50:10 nicm Exp $ */
d54 10
@


1.11
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.10 2009/11/26 21:37:13 nicm Exp $ */
d138 1
d142 1
@


1.10
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.9 2009/09/10 17:16:24 nicm Exp $ */
d32 1
a32 1
    	    struct window_pane *, struct screen_write_ctx *, u_int);
d168 1
a168 1
	struct options			*oo = &wp->window->options;	
d172 1
a172 1
 	int				 utf8flag;
@


1.9
log
@Permit options such as status-bg to be configured using the entire 256 colour
palette by setting "colour0" to "colour255".
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.8 2009/08/18 11:53:03 nicm Exp $ */
d126 1
@


1.8
log
@Use the full screen width when printing output rather than one less.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.7 2009/08/05 16:26:38 nicm Exp $ */
d167 1
d180 3
a182 3
		gc.fg = options_get_number(&wp->window->options, "mode-fg");
		gc.bg = options_get_number(&wp->window->options, "mode-bg");
		gc.attr |= options_get_number(&wp->window->options, "mode-attr");
@


1.7
log
@If colours are not supported by the terminal, try to emulate a coloured
background by setting or clearing the reverse attribute.

This makes a few applications which don't use the reverse attribute themselves
a little happier, and allows the status, message and mode options to have
default attributes and fg/bg options that work as expected when set as reverse.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.6 2009/07/28 07:03:32 nicm Exp $ */
d191 1
a191 1
		    ctx, screen_size_x(s) - 1 - size, &gc, utf8flag, "%s", msg);
@


1.6
log
@Next step towards customisable mode keys: build each default table of keys into
a named tree on start and use that for lookups. Also add command to string
translation tables and modify list-keys to show the the mode key bindings (new
-t argument).
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.5 2009/07/27 19:29:35 nicm Exp $ */
d179 2
a180 2
		gc.bg = options_get_number(&wp->window->options, "mode-fg");
		gc.fg = options_get_number(&wp->window->options, "mode-bg");
@


1.5
log
@Change mode key bindings from big switches into a set of tables. Rather than
lumping them all together, split editing keys from those used in choice/more
mode and those for copy/scroll mode.

Tidier and clearer, and the first step towards customisable mode keys.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.4 2009/07/27 18:51:46 nicm Exp $ */
d95 1
a95 1
		mode_key_init(&data->mdata, mode_key_emacs_choice);
d97 1
a97 1
		mode_key_init(&data->mdata, mode_key_vi_choice);
@


1.4
log
@Get rid of empty mode_key_free function.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.3 2009/06/25 06:15:04 nicm Exp $ */
d83 1
d93 5
a97 2
	mode_key_init(&data->mdata,
	    options_get_number(&wp->window->options, "mode-keys"), 0);
d133 1
a133 1
	case MODEKEYCMD_QUIT:
d136 1
a136 1
	case MODEKEYCMD_UP:
d139 1
a139 1
	case MODEKEYCMD_DOWN:
d142 1
a142 1
	case MODEKEYCMD_PREVIOUSPAGE:
d149 1
a149 1
	case MODEKEYCMD_NEXTPAGE:
@


1.3
log
@Miscellaneous unused functions, including one which was basically a
duplicate. Found by lint.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.2 2009/06/24 23:00:31 nicm Exp $ */
a102 2

	mode_key_free(&data->mdata);
@


1.2
log
@Now that a UTF-8-capable puts function exists, use it for printing strings in
choice/more modes - lines with UTF-8 now display properly in find-window
results.
@
text
@d1 1
a1 1
/* $OpenBSD: window-more.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a75 10
}

void printflike2
window_more_add(struct window_pane *wp, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	window_more_vadd(wp, fmt, ap);
	va_end(ap);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d178 1
d180 1
d198 2
a199 2
		screen_write_puts(
		    ctx, &gc, "%.*s", (int) (screen_size_x(s) - size), msg);
@

