head	1.32;
access;
symbols
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.32
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.31;
commitid	RXMp6wwG5a5Y82bo;

1.31
date	2017.04.22.08.56.24;	author nicm;	state Exp;
branches;
next	1.30;
commitid	swq7JsAZEYBxos2Q;

1.30
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.29;
commitid	j0FZs70gSPCmpqWI;

1.29
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.28;
commitid	pxm6osuE99zELpkU;

1.28
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.27;
commitid	1GCC1n59gejVg5Ih;

1.27
date	2016.10.13.10.01.49;	author nicm;	state Exp;
branches;
next	1.26;
commitid	AFoah05fh4b2e28V;

1.26
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.25;
commitid	TaZ3kOtGiWwKofka;

1.25
date	2016.09.04.17.37.06;	author nicm;	state Exp;
branches;
next	1.24;
commitid	D34i60nsvTyoBV4q;

1.24
date	2016.08.27.23.35.00;	author nicm;	state Exp;
branches;
next	1.23;
commitid	I7NqXpsbldaG2FAt;

1.23
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.22;
commitid	P3qmSOx6KrDBsb0c;

1.22
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.21;
commitid	rE682EC14v4gpeFy;

1.21
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.20;
commitid	gsQkQsSyBCSmU9ax;

1.20
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.19;
commitid	uzMkp8Z4FE6WB6s6;

1.19
date	2015.06.18.23.56.01;	author nicm;	state Exp;
branches;
next	1.18;
commitid	lROjBQpGSASNi2oJ;

1.18
date	2015.06.04.11.43.51;	author nicm;	state Exp;
branches;
next	1.17;
commitid	rAvOUA4CI6VK3gQ6;

1.17
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.16;
commitid	Gq8hgMoG3t1Wy1Zv;

1.16
date	2014.04.17.09.13.13;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.10.10.12.00.19;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.01.20.53.47;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2012.03.17.22.35.09;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2012.03.03.08.31.18;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.23.15.49.10;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2011.01.23.15.46.49;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2010.08.11.07.38.00;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.17.23.14.17;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.04.19.12.20;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.07.20.52.18;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@/* $OpenBSD: cmd-join-pane.c,v 1.31 2017/04/22 08:56:24 nicm Exp $ */

/*
 * Copyright (c) 2011 George Nachman <tmux@@georgester.com>
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <paths.h>
#include <stdlib.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Join or move a pane into another (like split/swap/kill).
 */

static enum cmd_retval	cmd_join_pane_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_join_pane_entry = {
	.name = "join-pane",
	.alias = "joinp",

	.args = { "bdhvp:l:s:t:", 0, 0 },
	.usage = "[-bdhv] [-p percentage|-l size] " CMD_SRCDST_PANE_USAGE,

	.source = { 's', CMD_FIND_PANE, CMD_FIND_DEFAULT_MARKED },
	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = 0,
	.exec = cmd_join_pane_exec
};

const struct cmd_entry cmd_move_pane_entry = {
	.name = "move-pane",
	.alias = "movep",

	.args = { "bdhvp:l:s:t:", 0, 0 },
	.usage = "[-bdhv] [-p percentage|-l size] " CMD_SRCDST_PANE_USAGE,

	.source = { 's', CMD_FIND_PANE, 0 },
	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = 0,
	.exec = cmd_join_pane_exec
};

static enum cmd_retval
cmd_join_pane_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct cmd_find_state	*current = &item->shared->current;
	struct session		*dst_s;
	struct winlink		*src_wl, *dst_wl;
	struct window		*src_w, *dst_w;
	struct window_pane	*src_wp, *dst_wp;
	char			*cause;
	int			 size, percentage, dst_idx;
	enum layout_type	 type;
	struct layout_cell	*lc;
	int			 not_same_window;

	if (self->entry == &cmd_join_pane_entry)
		not_same_window = 1;
	else
		not_same_window = 0;

	dst_s = item->target.s;
	dst_wl = item->target.wl;
	dst_wp = item->target.wp;
	dst_w = dst_wl->window;
	dst_idx = dst_wl->idx;
	server_unzoom_window(dst_w);

	src_wl = item->source.wl;
	src_wp = item->source.wp;
	src_w = src_wl->window;
	server_unzoom_window(src_w);

	if (not_same_window && src_w == dst_w) {
		cmdq_error(item, "can't join a pane to its own window");
		return (CMD_RETURN_ERROR);
	}
	if (!not_same_window && src_wp == dst_wp) {
		cmdq_error(item, "source and target panes must be different");
		return (CMD_RETURN_ERROR);
	}

	type = LAYOUT_TOPBOTTOM;
	if (args_has(args, 'h'))
		type = LAYOUT_LEFTRIGHT;

	size = -1;
	if (args_has(args, 'l')) {
		size = args_strtonum(args, 'l', 0, INT_MAX, &cause);
		if (cause != NULL) {
			cmdq_error(item, "size %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
	} else if (args_has(args, 'p')) {
		percentage = args_strtonum(args, 'p', 0, 100, &cause);
		if (cause != NULL) {
			cmdq_error(item, "percentage %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
		if (type == LAYOUT_TOPBOTTOM)
			size = (dst_wp->sy * percentage) / 100;
		else
			size = (dst_wp->sx * percentage) / 100;
	}
	lc = layout_split_pane(dst_wp, type, size, args_has(args, 'b'), 0);
	if (lc == NULL) {
		cmdq_error(item, "create pane failed: pane too small");
		return (CMD_RETURN_ERROR);
	}

	layout_close_pane(src_wp);

	window_lost_pane(src_w, src_wp);
	TAILQ_REMOVE(&src_w->panes, src_wp, entry);

	src_wp->window = dst_w;
	TAILQ_INSERT_AFTER(&dst_w->panes, dst_wp, src_wp, entry);
	layout_assign_pane(lc, src_wp);

	recalculate_sizes();

	server_redraw_window(src_w);
	server_redraw_window(dst_w);

	if (!args_has(args, 'd')) {
		window_set_active_pane(dst_w, src_wp);
		session_select(dst_s, dst_idx);
		cmd_find_from_session(current, dst_s);
		server_redraw_session(dst_s);
	} else
		server_status_session(dst_s);

	if (window_count_panes(src_w) == 0)
		server_kill_window(src_w);
	else
		notify_window("window-layout-changed", src_w);
	notify_window("window-layout-changed", dst_w);

	return (CMD_RETURN_NORMAL);
}
@


1.31
log
@Mouse bindings and hooks set up an initial current state when running a
command. This is used for the session, window and pane for all commands
in the command sequence if there is no -t or -s.

However, using it for all commands in the command sequence means that if
the active pane or current session is changed, subsequent commands still
use the previous state. So make commands which explicitly change the
current state (such as neww and selectp) update it themselves for later
commands. Commands which may invalidate the state (like killp) are
already OK because an invalid state will be ignored.

Also fill in the current state for all key bindings rather than just the
mouse, so that any omissions are easier to spot.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.30 2016/10/16 22:06:40 nicm Exp $ */
d41 2
a42 2
	.sflag = CMD_PANE_MARKED,
	.tflag = CMD_PANE,
d55 2
a56 2
	.sflag = CMD_PANE,
	.tflag = CMD_PANE,
d82 3
a84 3
	dst_s = item->state.tflag.s;
	dst_wl = item->state.tflag.wl;
	dst_wp = item->state.tflag.wp;
d89 2
a90 2
	src_wl = item->state.sflag.wl;
	src_wp = item->state.sflag.wp;
@


1.30
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.29 2016/10/16 19:04:05 nicm Exp $ */
d66 1
d150 1
@


1.29
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.28 2016/10/13 22:48:51 nicm Exp $ */
d156 2
a157 2
		notify_window_layout_changed(src_w);
	notify_window_layout_changed(dst_w);
@


1.28
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.27 2016/10/13 10:01:49 nicm Exp $ */
d32 1
a32 1
static enum cmd_retval	 cmd_join_pane_exec(struct cmd *, struct cmd_q *);
d63 1
a63 1
cmd_join_pane_exec(struct cmd *self, struct cmd_q *cmdq)
d81 3
a83 3
	dst_s = cmdq->state.tflag.s;
	dst_wl = cmdq->state.tflag.wl;
	dst_wp = cmdq->state.tflag.wp;
d88 2
a89 2
	src_wl = cmdq->state.sflag.wl;
	src_wp = cmdq->state.sflag.wp;
d94 1
a94 1
		cmdq_error(cmdq, "can't join a pane to its own window");
d98 1
a98 1
		cmdq_error(cmdq, "source and target panes must be different");
d110 1
a110 1
			cmdq_error(cmdq, "size %s", cause);
d117 1
a117 1
			cmdq_error(cmdq, "percentage %s", cause);
d128 1
a128 1
		cmdq_error(cmdq, "create pane failed: pane too small");
@


1.27
log
@Some improvements and bug fixes for hooks:

- Prepare the state again before the "after" hooks are run, because the
  command may have killed or moved windows.

- Use the hooks list from the newly prepared target, not the old hooks
  list (only matters for new-session really).

- Correctly detect an invalid current state and ignore it in
  cmd_find_target ("killw; swapw").

- Change neww, new, killp, killw, splitw, swapp, swapw to update the
  current state (used if no explicit target is given) to something more
  useful after they have finished. For example, neww changes it to the
  newly created window.

Hooks are still relatively new and primitive so there are likely to be
more changes to come.

Parts based on bug reports from Uwe Werler and Iblis Lin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.26 2016/10/10 21:51:39 nicm Exp $ */
a157 7

	cmd_find_clear_state(&cmdq->current, NULL, 0);
	cmdq->current.s = dst_s;
	cmdq->current.wl = dst_wl;
	cmdq->current.w = dst_w;
	cmdq->current.wp = dst_wp;
	cmd_find_log_state(__func__, &cmdq->current);
@


1.26
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.25 2016/09/04 17:37:06 nicm Exp $ */
d158 7
@


1.25
log
@Add support for performing a full width split (with splitw -f), rather
than splitting the current cell. From Stephen Kent.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.24 2016/08/27 23:35:00 nicm Exp $ */
d32 1
a32 3
enum cmd_retval	 cmd_join_pane_exec(struct cmd *, struct cmd_q *);

enum cmd_retval	 join_pane(struct cmd *, struct cmd_q *, int);
d62 1
a62 1
enum cmd_retval
a64 6
	return (join_pane(self, cmdq, self->entry == &cmd_join_pane_entry));
}

enum cmd_retval
join_pane(struct cmd *self, struct cmd_q *cmdq, int not_same_window)
{
d74 6
@


1.24
log
@Kill empty window after moving pane and updating current window, so that
index is still valid before renumber-windows happens. Fixes issue
reported by Eric Pruitt.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.23 2016/01/19 15:59:12 nicm Exp $ */
d128 1
a128 1
	lc = layout_split_pane(dst_wp, type, size, args_has(args, 'b'));
@


1.23
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.22 2015/12/14 00:31:54 nicm Exp $ */
a138 5
	if (window_count_panes(src_w) == 0)
		server_kill_window(src_w);
	else
		notify_window_layout_changed(src_w);

d155 4
d160 1
@


1.22
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.21 2015/12/13 21:53:57 nicm Exp $ */
d5 1
a5 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.21
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.20 2015/12/13 14:32:38 nicm Exp $ */
d43 4
a46 1
	.flags = CMD_PANE_MARKED_S|CMD_PANE_T,
d57 4
a60 1
	.flags = CMD_PANE_S|CMD_PANE_T,
@


1.20
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.19 2015/06/18 23:56:01 nicm Exp $ */
d37 8
a44 5
	"join-pane", "joinp",
	"bdhvp:l:s:t:", 0, 0,
	"[-bdhv] [-p percentage|-l size] " CMD_SRCDST_PANE_USAGE,
	CMD_PANE_MARKED_S|CMD_PANE_T,
	cmd_join_pane_exec
d48 8
a55 5
	"move-pane", "movep",
	"bdhvp:l:s:t:", 0, 0,
	"[-bdhv] [-p percentage|-l size] " CMD_SRCDST_PANE_USAGE,
	CMD_PANE_S|CMD_PANE_T,
	cmd_join_pane_exec
@


1.19
log
@Use the SRCDST define for usage.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.18 2015/06/04 11:43:51 nicm Exp $ */
d40 1
a40 1
	0,
d48 1
a48 1
	0,
d71 3
a73 3
	dst_wl = cmd_find_pane(cmdq, args_get(args, 't'), &dst_s, &dst_wp);
	if (dst_wl == NULL)
		return (CMD_RETURN_ERROR);
d78 2
a79 3
	src_wl = cmd_find_pane_marked(cmdq, args_get(args, 's'), NULL, &src_wp);
	if (src_wl == NULL)
		return (CMD_RETURN_ERROR);
@


1.18
log
@Add support for a single "marked pane". There is one marked pane in the
server at a time; it may be toggled or cleared with select-pane -m and
-M (the border is highlighted). A new target '~' or '{marked}' specifies
the marked pane to commands and it is the default target for the
swap-pane and join-pane -s flag (this makes them much simpler to use -
mark the source pane and then change to the target pane to run swapp or
joinp).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.17 2014/10/20 22:29:25 nicm Exp $ */
d39 1
a39 1
	"[-bdhv] [-p percentage|-l size] [-s src-pane] [-t dst-pane]",
d47 1
a47 1
	"[-bdhv] [-p percentage|-l size] [-s src-pane] [-t dst-pane]",
@


1.17
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.16 2014/04/17 09:13:13 nicm Exp $ */
d78 1
a78 1
	src_wl = cmd_find_pane(cmdq, args_get(args, 's'), NULL, &src_wp);
@


1.16
log
@Correct the dance to fix the active pane in join-pane by pulling the
(right) code from break-pane and window_remove_pane into a helper
function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.15 2013/10/10 12:00:19 nicm Exp $ */
a31 1
void		 cmd_join_pane_key_binding(struct cmd *, int);
a40 1
	cmd_join_pane_key_binding,
a48 1
	NULL,
a50 14

void
cmd_join_pane_key_binding(struct cmd *self, int key)
{
	switch (key) {
	case '%':
		self->args = args_create(0);
		args_set(self->args, 'h', NULL);
		break;
	default:
		self->args = args_create(0);
		break;
	}
}
@


1.15
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.14 2013/03/24 09:57:59 nicm Exp $ */
d142 1
a142 5
	if (src_w->active == src_wp) {
		src_w->active = TAILQ_PREV(src_wp, window_panes, entry);
		if (src_w->active == NULL)
			src_w->active = TAILQ_NEXT(src_wp, entry);
	}
@


1.14
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.13 2013/03/24 09:54:10 nicm Exp $ */
a42 1
	NULL,
a50 1
	NULL,
@


1.13
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.12 2012/07/11 07:10:15 nicm Exp $ */
d95 1
d101 1
@


1.12
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.11 2012/07/10 11:53:01 nicm Exp $ */
d33 1
a33 1
enum cmd_retval	 cmd_join_pane_exec(struct cmd *, struct cmd_ctx *);
d35 1
a35 1
enum cmd_retval	 join_pane(struct cmd *, struct cmd_ctx *, int);
d72 1
a72 1
cmd_join_pane_exec(struct cmd *self, struct cmd_ctx *ctx)
d74 1
a74 1
	return (join_pane(self, ctx, self->entry == &cmd_join_pane_entry));
d78 1
a78 1
join_pane(struct cmd *self, struct cmd_ctx *ctx, int not_same_window)
d90 1
a90 1
	dst_wl = cmd_find_pane(ctx, args_get(args, 't'), &dst_s, &dst_wp);
d96 1
a96 1
	src_wl = cmd_find_pane(ctx, args_get(args, 's'), NULL, &src_wp);
d102 1
a102 1
		ctx->error(ctx, "can't join a pane to its own window");
d106 1
a106 1
		ctx->error(ctx, "source and target panes must be different");
d118 1
a118 1
			ctx->error(ctx, "size %s", cause);
d125 1
a125 1
			ctx->error(ctx, "percentage %s", cause);
d136 1
a136 1
		ctx->error(ctx, "create pane failed: pane too small");
@


1.11
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.10 2012/04/01 20:53:47 nicm Exp $ */
d32 2
a33 2
void	cmd_join_pane_key_binding(struct cmd *, int);
int	cmd_join_pane_exec(struct cmd *, struct cmd_ctx *);
d35 1
a35 1
int	join_pane(struct cmd *, struct cmd_ctx *, int);
d71 1
a71 1
int
d77 1
a77 1
int
d92 1
a92 1
		return (-1);
d98 1
a98 1
		return (-1);
d103 1
a103 1
		return (-1);
d107 1
a107 1
		return (-1);
d120 1
a120 1
			return (-1);
d127 1
a127 1
			return (-1);
d137 1
a137 1
		return (-1);
d171 1
a171 1
	return (0);
@


1.10
log
@Minor style nits - return ().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.9 2012/03/17 22:35:09 nicm Exp $ */
d119 1
a119 1
			xfree(cause);
d126 1
a126 1
			xfree(cause);
@


1.9
log
@Add notify hooks for various events, the functions are currently empty
stubs but will be filled in for control mode later. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.8 2012/03/03 08:31:18 nicm Exp $ */
d74 1
a74 1
	return join_pane(self, ctx, self->entry == &cmd_join_pane_entry);
@


1.8
log
@Add move-pane command (like join-pane but allows the same window). Also
-b flag to join-pane and move-pane to place the pane to the left or
above. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.7 2011/01/23 15:49:10 nicm Exp $ */
d151 2
d170 1
@


1.7
log
@While here, maximum percentage is 100 not INT_MAX. Oops.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.6 2011/01/23 15:46:49 nicm Exp $ */
d4 1
d29 1
a29 1
 * Join a pane into another (like split/swap/kill).
d35 2
d39 2
a40 2
	"dhvp:l:s:t:", 0, 0,
	"[-dhv] [-p percentage|-l size] [-s src-pane] [-t dst-pane]",
d47 10
d74 6
d101 1
a101 1
	if (src_w == dst_w) {
d105 4
d134 2
a135 2

	if ((lc = layout_split_pane(dst_wp, type, size)) == NULL) {
@


1.6
log
@Size is -l not -s.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.5 2011/01/04 00:42:46 nicm Exp $ */
d100 1
a100 1
		percentage = args_strtonum(args, 'p', 0, INT_MAX, &cause);
@


1.5
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.4 2010/08/11 07:38:00 nicm Exp $ */
d92 2
a93 2
	if (args_has(args, 's')) {
		size = args_strtonum(args, 's', 0, INT_MAX, &cause);
@


1.4
log
@Usage string fixes from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.3 2010/04/17 23:14:17 nicm Exp $ */
d31 1
a31 1
int	cmd_join_pane_parse(struct cmd *, int, char **, char **);
a32 12
void	cmd_join_pane_free(struct cmd *);
void	cmd_join_pane_init(struct cmd *, int);
size_t	cmd_join_pane_print(struct cmd *, char *, size_t);

struct cmd_join_pane_data {
	char	*src;
	char	*dst;
	int	 flag_detached;
	int	 flag_horizontal;
	int	 percentage;
	int	 size;
};
d36 1
d38 4
a41 6
	0, "",
	cmd_join_pane_init,
	cmd_join_pane_parse,
	cmd_join_pane_exec,
	cmd_join_pane_free,
	cmd_join_pane_print
d45 1
a45 1
cmd_join_pane_init(struct cmd *self, int key)
a46 10
	struct cmd_join_pane_data	 *data;

	self->data = data = xmalloc(sizeof *data);
	data->src = NULL;
	data->dst = NULL;
	data->flag_detached = 0;
	data->flag_horizontal = 0;
	data->percentage = -1;
	data->size = -1;

d49 2
a50 1
		data->flag_horizontal = 1;
d52 2
a53 2
	case '"':
		data->flag_horizontal = 0;
a58 66
cmd_join_pane_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_join_pane_data	*data;
	int				 opt;
	const char			*errstr;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "dhl:p:s:t:v")) != -1) {
		switch (opt) {
		case 'd':
			data->flag_detached = 1;
			break;
		case 'h':
			data->flag_horizontal = 1;
			break;
		case 's':
			if (data->src == NULL)
				data->src = xstrdup(optarg);
			break;
		case 't':
			if (data->dst == NULL)
				data->dst = xstrdup(optarg);
			break;
		case 'l':
			if (data->percentage != -1 || data->size != -1)
				break;
			data->size = strtonum(optarg, 1, INT_MAX, &errstr);
			if (errstr != NULL) {
				xasprintf(cause, "size %s", errstr);
				goto error;
			}
			break;
		case 'p':
			if (data->size != -1 || data->percentage != -1)
				break;
			data->percentage = strtonum(optarg, 1, 100, &errstr);
			if (errstr != NULL) {
				xasprintf(cause, "percentage %s", errstr);
				goto error;
			}
			break;
		case 'v':
			data->flag_horizontal = 0;
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 0)
		goto usage;

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

error:
	self->entry->free(self);
	return (-1);
}

int
d61 9
a69 8
	struct cmd_join_pane_data	*data = self->data;
	struct session			*dst_s;
	struct winlink			*src_wl, *dst_wl;
	struct window			*src_w, *dst_w;
	struct window_pane		*src_wp, *dst_wp;
	int				 size, dst_idx;
	enum layout_type		 type;
	struct layout_cell		*lc;
d71 2
a72 1
	if ((dst_wl = cmd_find_pane(ctx, data->dst, &dst_s, &dst_wp)) == NULL)
d77 2
a78 1
	if ((src_wl = cmd_find_pane(ctx, data->src, NULL, &src_wp)) == NULL)
d88 1
a88 1
	if (data->flag_horizontal)
d92 14
a105 3
	if (data->size != -1)
		size = data->size;
	else if (data->percentage != -1) {
d107 1
a107 1
			size = (dst_wp->sy * data->percentage) / 100;
d109 1
a109 1
			size = (dst_wp->sx * data->percentage) / 100;
d138 1
a138 1
	if (!data->flag_detached) {
a145 38
}

void
cmd_join_pane_free(struct cmd *self)
{
	struct cmd_join_pane_data	*data = self->data;

	if (data->src != NULL)
		xfree(data->src);
	if (data->dst != NULL)
		xfree(data->dst);
	xfree(data);
}

size_t
cmd_join_pane_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_join_pane_data	*data = self->data;
	size_t				 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->flag_detached)
		off += xsnprintf(buf + off, len - off, " -d");
	if (off < len && data->flag_horizontal)
		off += xsnprintf(buf + off, len - off, " -h");
	if (off < len && data->size > 0)
		off += xsnprintf(buf + off, len - off, " -l %d", data->size);
	if (off < len && data->percentage > 0) {
		off += xsnprintf(
		    buf + off, len - off, " -p %d", data->percentage);
	}
	if (off < len && data->src != NULL)
		off += cmd_prarg(buf + off, len - off, " -s ", data->src);
	if (off < len && data->dst != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->dst);
	return (off);
@


1.3
log
@Fix use-after-free of the window link when it is part of a grouped
session (and hence could have been recreated), from Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.2 2010/04/04 19:12:20 nicm Exp $ */
d48 1
a48 1
	"[-dhv] [-p percentage|-l size] [-s src-pane] [-t dst-pane] [command]",
@


1.2
log
@Should be -s for src pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-join-pane.c,v 1.1 2010/01/07 20:52:18 nicm Exp $ */
d154 1
a154 1
	int				 size;
d161 1
d214 1
a214 1
		session_select(dst_s, dst_wl->idx);
@


1.1
log
@New command, join-pane, to split and move an existing pane into the space (like
splitw then movep, or the reverse of breakp).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.17 2010/01/07 19:47:10 nicm Exp $ */
d48 1
a48 1
	"[-dhv] [-p percentage|-l size] [-t src-pane] [-t dst-pane] [command]",
@

