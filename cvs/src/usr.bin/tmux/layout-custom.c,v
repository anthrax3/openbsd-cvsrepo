head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.10;
commitid	j0FZs70gSPCmpqWI;

1.10
date	2016.08.03.09.07.02;	author nicm;	state Exp;
branches;
next	1.9;
commitid	PiVgxuhKYG0ljj7x;

1.9
date	2016.07.15.09.27.35;	author nicm;	state Exp;
branches;
next	1.8;
commitid	7le1ML1qK7W85UOt;

1.8
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.7;
commitid	P3qmSOx6KrDBsb0c;

1.7
date	2015.04.21.22.38.49;	author nicm;	state Exp;
branches;
next	1.6;
commitid	MULQMBCHDfIGQ0ED;

1.6
date	2013.03.25.11.35.30;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.17.22.35.09;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2012.02.05.22.23.13;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.30.20.57.02;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.05.10.53.05;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.29.03.30.13;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@/* $OpenBSD: layout-custom.c,v 1.10 2016/08/03 09:07:02 nicm Exp $ */

/*
 * Copyright (c) 2010 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <string.h>

#include "tmux.h"

static struct layout_cell	*layout_find_bottomright(struct layout_cell *);
static u_short			 layout_checksum(const char *);
static int			 layout_append(struct layout_cell *, char *,
				     size_t);
static struct layout_cell	*layout_construct(struct layout_cell *,
				     const char **);
static void			 layout_assign(struct window_pane **,
				     struct layout_cell *);

/* Find the bottom-right cell. */
static struct layout_cell *
layout_find_bottomright(struct layout_cell *lc)
{
	if (lc->type == LAYOUT_WINDOWPANE)
		return (lc);
	lc = TAILQ_LAST(&lc->cells, layout_cells);
	return (layout_find_bottomright(lc));
}

/* Calculate layout checksum. */
static u_short
layout_checksum(const char *layout)
{
	u_short	csum;

	csum = 0;
	for (; *layout != '\0'; layout++) {
		csum = (csum >> 1) + ((csum & 1) << 15);
		csum += *layout;
	}
	return (csum);
}

/* Dump layout as a string. */
char *
layout_dump(struct layout_cell *root)
{
	char	layout[BUFSIZ], *out;

	*layout = '\0';
	if (layout_append(root, layout, sizeof layout) != 0)
		return (NULL);

	xasprintf(&out, "%04hx,%s", layout_checksum(layout), layout);
	return (out);
}

/* Append information for a single cell. */
static int
layout_append(struct layout_cell *lc, char *buf, size_t len)
{
	struct layout_cell     *lcchild;
	char			tmp[64];
	size_t			tmplen;
	const char	       *brackets = "][";

	if (len == 0)
		return (-1);

	if (lc->wp != NULL) {
		tmplen = xsnprintf(tmp, sizeof tmp, "%ux%u,%u,%u,%u",
		    lc->sx, lc->sy, lc->xoff, lc->yoff, lc->wp->id);
	} else {
		tmplen = xsnprintf(tmp, sizeof tmp, "%ux%u,%u,%u",
		    lc->sx, lc->sy, lc->xoff, lc->yoff);
	}
	if (tmplen > (sizeof tmp) - 1)
		return (-1);
	if (strlcat(buf, tmp, len) >= len)
		return (-1);

	switch (lc->type) {
	case LAYOUT_LEFTRIGHT:
		brackets = "}{";
		/* FALLTHROUGH */
	case LAYOUT_TOPBOTTOM:
		if (strlcat(buf, &brackets[1], len) >= len)
			return (-1);
		TAILQ_FOREACH(lcchild, &lc->cells, entry) {
			if (layout_append(lcchild, buf, len) != 0)
				return (-1);
			if (strlcat(buf, ",", len) >= len)
				return (-1);
		}
		buf[strlen(buf) - 1] = brackets[0];
		break;
	case LAYOUT_WINDOWPANE:
		break;
	}

	return (0);
}

/* Parse a layout string and arrange window as layout. */
int
layout_parse(struct window *w, const char *layout)
{
	struct layout_cell	*lc, *lcchild;
	struct window_pane	*wp;
	u_int			 npanes, ncells, sx, sy;
	u_short			 csum;

	/* Check validity. */
	if (sscanf(layout, "%hx,", &csum) != 1)
		return (-1);
	layout += 5;
	if (csum != layout_checksum(layout))
		return (-1);

	/* Build the layout. */
	lc = layout_construct(NULL, &layout);
	if (lc == NULL)
		return (-1);
	if (*layout != '\0')
		goto fail;

	/* Check this window will fit into the layout. */
	for (;;) {
		npanes = window_count_panes(w);
		ncells = layout_count_cells(lc);
		if (npanes > ncells)
			goto fail;
		if (npanes == ncells)
			break;

		/* Fewer panes than cells - close the bottom right. */
		lcchild = layout_find_bottomright(lc);
		layout_destroy_cell(w, lcchild, &lc);
	}

	/* Save the old window size and resize to the layout size. */
	sx = w->sx; sy = w->sy;
	window_resize(w, lc->sx, lc->sy);

	/* Destroy the old layout and swap to the new. */
	layout_free_cell(w->layout_root);
	w->layout_root = lc;

	/* Assign the panes into the cells. */
	wp = TAILQ_FIRST(&w->panes);
	layout_assign(&wp, lc);

	/* Update pane offsets and sizes. */
	layout_fix_offsets(lc);
	layout_fix_panes(w, lc->sx, lc->sy);

	/* Then resize the layout back to the original window size. */
	layout_resize(w, sx, sy);
	window_resize(w, sx, sy);

	layout_print_cell(lc, __func__, 0);

	notify_window("window-layout-changed", w);

	return (0);

fail:
	layout_free_cell(lc);
	return (-1);
}

/* Assign panes into cells. */
static void
layout_assign(struct window_pane **wp, struct layout_cell *lc)
{
	struct layout_cell	*lcchild;

	switch (lc->type) {
	case LAYOUT_WINDOWPANE:
		layout_make_leaf(lc, *wp);
		*wp = TAILQ_NEXT(*wp, entry);
		return;
	case LAYOUT_LEFTRIGHT:
	case LAYOUT_TOPBOTTOM:
		TAILQ_FOREACH(lcchild, &lc->cells, entry)
			layout_assign(wp, lcchild);
		return;
	}
}

/* Construct a cell from all or part of a layout tree. */
static struct layout_cell *
layout_construct(struct layout_cell *lcparent, const char **layout)
{
	struct layout_cell     *lc, *lcchild;
	u_int			sx, sy, xoff, yoff;
	const char	       *saved;

	if (!isdigit((u_char) **layout))
		return (NULL);
	if (sscanf(*layout, "%ux%u,%u,%u", &sx, &sy, &xoff, &yoff) != 4)
		return (NULL);

	while (isdigit((u_char) **layout))
		(*layout)++;
	if (**layout != 'x')
		return (NULL);
	(*layout)++;
	while (isdigit((u_char) **layout))
		(*layout)++;
	if (**layout != ',')
		return (NULL);
	(*layout)++;
	while (isdigit((u_char) **layout))
		(*layout)++;
	if (**layout != ',')
		return (NULL);
	(*layout)++;
	while (isdigit((u_char) **layout))
		(*layout)++;
	if (**layout == ',') {
		saved = *layout;
		(*layout)++;
		while (isdigit((u_char) **layout))
			(*layout)++;
		if (**layout == 'x')
			*layout = saved;
	}

	lc = layout_create_cell(lcparent);
	lc->sx = sx;
	lc->sy = sy;
	lc->xoff = xoff;
	lc->yoff = yoff;

	switch (**layout) {
	case ',':
	case '}':
	case ']':
	case '\0':
		return (lc);
	case '{':
		lc->type = LAYOUT_LEFTRIGHT;
		break;
	case '[':
		lc->type = LAYOUT_TOPBOTTOM;
		break;
	default:
		goto fail;
	}

	do {
		(*layout)++;
		lcchild = layout_construct(lc, layout);
		if (lcchild == NULL)
			goto fail;
		TAILQ_INSERT_TAIL(&lc->cells, lcchild, entry);
	} while (**layout == ',');

	switch (lc->type) {
	case LAYOUT_LEFTRIGHT:
		if (**layout != '}')
			goto fail;
		break;
	case LAYOUT_TOPBOTTOM:
		if (**layout != ']')
			goto fail;
		break;
	default:
		goto fail;
	}
	(*layout)++;

	return (lc);

fail:
	layout_free_cell(lc);
	return (NULL);
}
@


1.10
log
@Fix minimum size when pane status line is enabled, reported by Y Petremann.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.9 2016/07/15 09:27:35 nicm Exp $ */
d178 1
a178 1
	notify_window_layout_changed(w);
@


1.9
log
@Wrap some long lines and apply some static.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.8 2016/01/19 15:59:12 nicm Exp $ */
d153 1
a153 1
		layout_destroy_cell(lcchild, &lc);
@


1.8
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.7 2015/04/21 22:38:49 nicm Exp $ */
d26 8
a33 5
struct layout_cell     *layout_find_bottomright(struct layout_cell *);
u_short			layout_checksum(const char *);
int			layout_append(struct layout_cell *, char *, size_t);
struct layout_cell     *layout_construct(struct layout_cell *, const char **);
void			layout_assign(struct window_pane **, struct layout_cell *);
d36 1
a36 1
struct layout_cell *
d46 1
a46 1
u_short
d69 1
a69 1
	xasprintf(&out, "%04x,%s", layout_checksum(layout), layout);
d74 1
a74 1
int
d188 1
a188 1
void
d207 1
a207 1
struct layout_cell *
@


1.7
log
@Always format real layout even when zoomed.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.6 2013/03/25 11:35:30 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2010 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.6
log
@Fix handling of short (< 4 character) checksums and a bug with parsing
old-style custom layouts. Based on fix from Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.5 2012/03/17 22:35:09 nicm Exp $ */
d58 1
a58 1
layout_dump(struct window *w)
d63 1
a63 1
	if (layout_append(w->layout_root, layout, sizeof layout) != 0)
@


1.5
log
@Add notify hooks for various events, the functions are currently empty
stubs but will be filled in for control mode later. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.4 2012/02/05 22:23:13 nicm Exp $ */
d66 1
a66 1
	xasprintf(&out, "%4x,%s", layout_checksum(layout), layout);
d209 1
d213 1
a213 2
	if (sscanf(*layout, "%ux%u,%u,%u,%*u", &sx, &sy, &xoff, &yoff) != 4 &&
	    sscanf(*layout, "%ux%u,%u,%u", &sx, &sy, &xoff, &yoff) != 4)
d234 1
d238 2
@


1.4
log
@Check for the right return value from sscanf.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.3 2012/01/30 20:57:02 nicm Exp $ */
d174 2
@


1.3
log
@Add pane id to each pane in layout description (while still accepting
the old form). Based on diff from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.2 2011/06/05 10:53:05 nicm Exp $ */
d210 1
a210 1
	if (sscanf(*layout, "%ux%u,%u,%u,%*u", &sx, &sy, &xoff, &yoff) != 5 &&
@


1.2
log
@Get rid of the layout string code which tries to walk through the layout
hierarchy and instead just look at what panes are actually in the window.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-custom.c,v 1.1 2010/06/29 03:30:13 nicm Exp $ */
d82 7
a88 2
	tmplen = xsnprintf(tmp, sizeof tmp,
	    "%ux%u,%u,%u", lc->sx, lc->sy, lc->xoff, lc->yoff);
d210 2
a211 1
	if (sscanf(*layout, "%ux%u,%u,%u", &sx, &sy, &xoff, &yoff) != 4)
d231 5
@


1.1
log
@Custom layouts. list-windows command displays the layout as a string (such as
"bb62,159x48,0,0{79x48,0,0,79x48,80,0}") and it can be applied to another
window (with the same number of panes or fewer) using select-layout.
@
text
@d1 1
a1 1
/* $OpenBSD: layout-set.c,v 1.6 2010/04/25 20:28:13 nicm Exp $ */
d26 1
d31 10
@

