head	1.42;
access;
symbols
	OPENBSD_6_1:1.42.0.4
	OPENBSD_6_1_BASE:1.42
	OPENBSD_6_0:1.37.0.2
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.36.0.2
	OPENBSD_5_9_BASE:1.36
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.42
date	2017.02.14.18.13.05;	author nicm;	state Exp;
branches;
next	1.41;
commitid	xvcFJuJjtbCqRtLW;

1.41
date	2017.01.06.13.26.09;	author nicm;	state Exp;
branches;
next	1.40;
commitid	evl2ye09fq1fGW2b;

1.40
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.39;
commitid	pxm6osuE99zELpkU;

1.39
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.38;
commitid	S3IpyYTkmviA6lfM;

1.38
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.37;
commitid	TaZ3kOtGiWwKofka;

1.37
date	2016.03.05.07.47.52;	author nicm;	state Exp;
branches;
next	1.36;
commitid	Bh9Aw5o9RZosJSbS;

1.36
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.35;
commitid	gsQkQsSyBCSmU9ax;

1.35
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.34;
commitid	uzMkp8Z4FE6WB6s6;

1.34
date	2015.11.14.09.41.06;	author nicm;	state Exp;
branches;
next	1.33;
commitid	FQoND7M2BC89FZoU;

1.33
date	2015.11.10.22.33.47;	author nicm;	state Exp;
branches;
next	1.32;
commitid	VuzDo1fXMgFAALQl;

1.32
date	2015.11.10.22.29.33;	author nicm;	state Exp;
branches;
next	1.31;
commitid	R8AN1Pc1M0Nn7MMc;

1.31
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.30;
commitid	B5GekkO0CdWpFMrz;

1.30
date	2015.08.29.09.36.46;	author nicm;	state Exp;
branches;
next	1.29;
commitid	iO5QEcohpHfgM5Iz;

1.29
date	2015.08.29.09.25.00;	author nicm;	state Exp;
branches;
next	1.28;
commitid	UXoQGD7QOZAJI1XC;

1.28
date	2015.04.27.16.25.57;	author nicm;	state Exp;
branches;
next	1.27;
commitid	0WBWxxZyxaAFVhmn;

1.27
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.26;
commitid	Gq8hgMoG3t1Wy1Zv;

1.26
date	2014.10.08.17.35.58;	author nicm;	state Exp;
branches;
next	1.25;
commitid	mK8z9uVwDZMfiNoM;

1.25
date	2014.05.13.07.34.35;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.24.09.14.43;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.16.23.05.38;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.07.10.32.16;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.10.10.12.26.35;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.10.10.12.00.22;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.24.09.30.41;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.22.15.53.24;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.05.21.18.27.42;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.21.19.16.07;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.10.23.08.34.01;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.10.23.00.49.25;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.30.23.16.18;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.24.20.11.59;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.28.22.10.42;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.26.21.13.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.07.18.50.45;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.42
log
@Make source-file look for files relative to the client working directory
(like load-buffer and save-buffer), from Chris Pickel. Also break the
where-is-this-file code out into its own function for loadb and saveb.
@
text
@/* $OpenBSD: cmd-save-buffer.c,v 1.41 2017/01/06 13:26:09 nicm Exp $ */

/*
 * Copyright (c) 2009 Tiago Cunha <me@@tiagocunha.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <vis.h>

#include "tmux.h"

/*
 * Saves a paste buffer to a file.
 */

static enum cmd_retval	cmd_save_buffer_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_save_buffer_entry = {
	.name = "save-buffer",
	.alias = "saveb",

	.args = { "ab:", 1, 1 },
	.usage = "[-a] " CMD_BUFFER_USAGE " path",

	.flags = CMD_AFTERHOOK,
	.exec = cmd_save_buffer_exec
};

const struct cmd_entry cmd_show_buffer_entry = {
	.name = "show-buffer",
	.alias = "showb",

	.args = { "b:", 0, 0 },
	.usage = CMD_BUFFER_USAGE,

	.flags = CMD_AFTERHOOK,
	.exec = cmd_save_buffer_exec
};

static enum cmd_retval
cmd_save_buffer_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c = item->client;
	struct paste_buffer	*pb;
	const char		*path, *bufname, *bufdata, *start, *end;
	const char		*flags;
	char			*msg, *file;
	size_t			 size, used, msglen, bufsize;
	FILE			*f;

	if (!args_has(args, 'b')) {
		if ((pb = paste_get_top(NULL)) == NULL) {
			cmdq_error(item, "no buffers");
			return (CMD_RETURN_ERROR);
		}
	} else {
		bufname = args_get(args, 'b');
		pb = paste_get_name(bufname);
		if (pb == NULL) {
			cmdq_error(item, "no buffer %s", bufname);
			return (CMD_RETURN_ERROR);
		}
	}
	bufdata = paste_buffer_data(pb, &bufsize);

	if (self->entry == &cmd_show_buffer_entry)
		path = "-";
	else
		path = args->argv[0];
	if (strcmp(path, "-") == 0) {
		if (c == NULL) {
			cmdq_error(item, "can't write to stdout");
			return (CMD_RETURN_ERROR);
		}
		if (c->session == NULL || (c->flags & CLIENT_CONTROL))
			goto do_stdout;
		goto do_print;
	}

	flags = "wb";
	if (args_has(self->args, 'a'))
		flags = "ab";

	file = server_client_get_path(c, path);
	f = fopen(file, flags);
	if (f == NULL) {
		cmdq_error(item, "%s: %s", file, strerror(errno));
		free(file);
		return (CMD_RETURN_ERROR);
	}

	if (fwrite(bufdata, 1, bufsize, f) != bufsize) {
		cmdq_error(item, "%s: write error", file);
		fclose(f);
		return (CMD_RETURN_ERROR);
	}

	fclose(f);
	free(file);

	return (CMD_RETURN_NORMAL);

do_stdout:
	evbuffer_add(c->stdout_data, bufdata, bufsize);
	server_client_push_stdout(c);
	return (CMD_RETURN_NORMAL);

do_print:
	if (bufsize > (INT_MAX / 4) - 1) {
		cmdq_error(item, "buffer too big");
		return (CMD_RETURN_ERROR);
	}
	msg = NULL;

	used = 0;
	while (used != bufsize) {
		start = bufdata + used;
		end = memchr(start, '\n', bufsize - used);
		if (end != NULL)
			size = end - start;
		else
			size = bufsize - used;

		msglen = size * 4 + 1;
		msg = xrealloc(msg, msglen);

		strvisx(msg, start, size, VIS_OCTAL|VIS_TAB);
		cmdq_print(item, "%s", msg);

		used += size + (end != NULL);
	}

	free(msg);
	return (CMD_RETURN_NORMAL);
}
@


1.41
log
@Nits found with clang.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.40 2016/10/16 19:04:05 nicm Exp $ */
a63 1
	struct session          *s;
d65 1
a65 1
	const char		*path, *bufname, *bufdata, *start, *end, *cwd;
d67 1
a67 1
	char			*msg, *file, resolved[PATH_MAX];
a99 7
	if (c != NULL && c->session == NULL && c->cwd != NULL)
		cwd = c->cwd;
	else if (c != NULL && (s = c->session) != NULL && s->cwd != NULL)
		cwd = s->cwd;
	else
		cwd = ".";

d104 2
a105 11
	if (*path == '/')
		file = xstrdup(path);
	else
		xasprintf(&file, "%s/%s", cwd, path);
	if (realpath(file, resolved) == NULL &&
	    strlcpy(resolved, file, sizeof resolved) >= sizeof resolved) {
		cmdq_error(item, "%s: %s", file, strerror(ENAMETOOLONG));
		return (CMD_RETURN_ERROR);
	}
	f = fopen(resolved, flags);
	free(file);
d107 2
a108 1
		cmdq_error(item, "%s: %s", resolved, strerror(errno));
d113 1
a113 1
		cmdq_error(item, "%s: write error", resolved);
d117 1
d119 1
@


1.40
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.39 2016/10/14 22:14:22 nicm Exp $ */
d103 1
a103 1
	else if ((s = c->session) != NULL && s->cwd != NULL)
@


1.39
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.38 2016/10/10 21:51:39 nicm Exp $ */
d35 1
a35 1
static enum cmd_retval	 cmd_save_buffer_exec(struct cmd *, struct cmd_q *);
d60 1
a60 1
cmd_save_buffer_exec(struct cmd *self, struct cmd_q *cmdq)
d63 1
a63 1
	struct client		*c = cmdq->client;
d74 1
a74 1
			cmdq_error(cmdq, "no buffers");
d81 1
a81 1
			cmdq_error(cmdq, "no buffer %s", bufname);
d93 1
a93 1
			cmdq_error(cmdq, "can't write to stdout");
d118 1
a118 1
		cmdq_error(cmdq, "%s: %s", file, strerror(ENAMETOOLONG));
d124 1
a124 1
		cmdq_error(cmdq, "%s: %s", resolved, strerror(errno));
d129 1
a129 1
		cmdq_error(cmdq, "%s: write error", resolved);
d144 1
a144 1
		cmdq_error(cmdq, "buffer too big");
d162 1
a162 1
		cmdq_print(cmdq, "%s", msg);
@


1.38
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.37 2016/03/05 07:47:52 nicm Exp $ */
d44 1
a44 1
	.flags = 0,
d55 1
a55 1
	.flags = 0,
@


1.37
log
@Do not use c->cwd or s->cwd if it is NULL, found by Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.36 2015/12/13 21:53:57 nicm Exp $ */
d35 1
a35 1
enum cmd_retval	 cmd_save_buffer_exec(struct cmd *, struct cmd_q *);
d59 1
a59 1
enum cmd_retval
@


1.36
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.35 2015/12/13 14:32:38 nicm Exp $ */
d101 1
a101 1
	if (c != NULL && c->session == NULL)
d103 1
a103 1
	else if ((s = c->session) != NULL)
@


1.35
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.34 2015/11/14 09:41:06 nicm Exp $ */
d38 8
a45 5
	"save-buffer", "saveb",
	"ab:", 1, 1,
	"[-a] " CMD_BUFFER_USAGE " path",
	0,
	cmd_save_buffer_exec
d49 8
a56 5
	"show-buffer", "showb",
	"b:", 0, 0,
	CMD_BUFFER_USAGE,
	0,
	cmd_save_buffer_exec
@


1.34
log
@Push stdout and stderr to clients more aggressively, and add an event to
continue if the send fails.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.33 2015/11/10 22:33:47 nicm Exp $ */
d97 1
a97 1
	else if ((s = cmd_find_current(cmdq)) != NULL)
@


1.33
log
@If realpath() fails just try the original path.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.32 2015/11/10 22:29:33 nicm Exp $ */
d133 1
a133 1
	server_push_stdout(c);
@


1.32
log
@Handle absolute paths properly, and don't use resolved path in
realpath() fails.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.31 2015/10/31 08:13:58 nicm Exp $ */
d110 3
a112 2
	if (realpath(file, resolved) == NULL)  {
		cmdq_error(cmdq, "%s: %s", file, strerror(errno));
@


1.31
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.30 2015/08/29 09:36:46 nicm Exp $ */
d106 2
a107 3
	xasprintf(&file, "%s/%s", cwd, path);
	if (realpath(file, resolved) == NULL)
		f = NULL;
d109 6
a114 1
		f = fopen(resolved, flags);
@


1.30
log
@paste_send_pane can be merged into cmd-paste-buffer.c now.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.29 2015/08/29 09:25:00 nicm Exp $ */
d60 3
a62 2
	const char		*path, *bufname, *bufdata, *start, *end;
	char			*msg;
a63 1
	int			 cwd, fd;
d100 1
a100 1
		cwd = AT_FDCWD;
d102 10
a111 10
	f = NULL;
	if (args_has(self->args, 'a')) {
		fd = openat(cwd, path, O_CREAT|O_RDWR|O_APPEND, 0600);
		if (fd != -1)
			f = fdopen(fd, "ab");
	} else {
		fd = openat(cwd, path, O_CREAT|O_RDWR|O_TRUNC, 0600);
		if (fd != -1)
			f = fdopen(fd, "wb");
	}
d113 1
a113 3
		if (fd != -1)
			close(fd);
		cmdq_error(cmdq, "%s: %s", path, strerror(errno));
d116 1
d118 1
a118 1
		cmdq_error(cmdq, "%s: fwrite error", path);
@


1.29
log
@Move struct paste_buffer out of tmux.h.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.28 2015/04/27 16:25:57 nicm Exp $ */
d60 2
a61 2
	const char		*path, *bufname, *bufdata;
	char			*start, *end, *msg;
@


1.28
log
@Rewrite of the target resolution internals to be simpler and more
consistent but with much less duplication, but keeping the same internal
API. Also adds more readable aliases for some of the special tokens used
in targets (eg "{start}" instead of "^"). Some behaviours may have
changed, for example prefix matches now happen before fnmatch.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.27 2014/10/20 22:29:25 nicm Exp $ */
d60 1
a60 1
	const char		*path, *bufname;
d62 1
a62 1
	size_t			 size, used, msglen;
d67 1
a67 1
		if ((pb = paste_get_top()) == NULL) {
d79 1
d118 1
a118 1
	if (fwrite(pb->data, 1, pb->size, f) != pb->size) {
d128 1
a128 1
	evbuffer_add(c->stdout_data, pb->data, pb->size);
d133 1
a133 1
	if (pb->size > (INT_MAX / 4) - 1) {
d140 3
a142 3
	while (used != pb->size) {
		start = pb->data + used;
		end = memchr(start, '\n', pb->size - used);
d146 1
a146 1
			size = pb->size - used;
@


1.27
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.26 2014/10/08 17:35:58 nicm Exp $ */
d96 1
a96 1
	else if ((s = cmd_current_session(cmdq, 0)) != NULL)
@


1.26
log
@Add xreallocarray and remove nmemb argument from xrealloc.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.25 2014/05/13 07:34:35 nicm Exp $ */
a41 1
	NULL,
a49 1
	NULL,
@


1.25
log
@Add support for named buffers. If you don't name a buffer, things work
much as before - buffers are automatically named "buffer0000",
"buffer0001" and so on and ordered as a stack. Buffers can be named
explicitly when creating ("loadb -b foo" etc) or renamed ("setb -b
buffer0000 -n foo"). If buffers are named explicitly, they are not
deleted when buffer-limit is reached. Diff from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.24 2014/04/24 09:14:43 nicm Exp $ */
d150 1
a150 1
		msg = xrealloc(msg, 1, msglen);
@


1.24
log
@There is no longer a need for a paste_stack struct or for global_buffers
to be global. Move to paste.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.23 2014/04/16 23:05:38 nicm Exp $ */
d62 2
a63 2
	const char		*path;
	char			*cause, *start, *end, *msg;
d65 1
a65 1
	int			 cwd, fd, buffer;
d74 2
a75 8
		buffer = args_strtonum(args, 'b', 0, INT_MAX, &cause);
		if (cause != NULL) {
			cmdq_error(cmdq, "buffer %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}

		pb = paste_get_index(buffer);
d77 1
a77 1
			cmdq_error(cmdq, "no buffer %d", buffer);
@


1.23
log
@Memory leak in error path and unnecessary assignment, from clang.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.22 2014/04/07 10:32:16 nicm Exp $ */
d69 1
a69 1
		if ((pb = paste_get_top(&global_buffers)) == NULL) {
d81 1
a81 1
		pb = paste_get_index(&global_buffers, buffer);
@


1.22
log
@save-buffer needs to use O_TRUNC.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.21 2013/10/10 12:26:35 nicm Exp $ */
a144 1
	msglen = 0;
@


1.21
log
@Alter how tmux handles the working directory to internally use file
descriptors rather than strings.

- Each session still has a current working directory.

- New sessions still get their working directory from the client that
  created them or its attached session if any.

- New windows are created by default in the session working directory.

- The -c flag to new, neww, splitw allows the working directory to be
  overridden.

- The -c flag to attach let's the session working directory be changed.

- The default-path option has been removed.

To get the equivalent to default-path '.', do:

        bind c neww -c $PWD

To get the equivalent of default-path '~', do:

        bind c neww -c ~

This also changes the client identify protocol to be a set of messages rather
than one as well as some other changes that should make it easier to make
backwards-compatible protocol changes in future.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.20 2013/10/10 12:00:22 nicm Exp $ */
d115 1
a115 1
		fd = openat(cwd, path, O_CREAT|O_RDWR, 0600);
@


1.20
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.19 2013/03/24 09:54:10 nicm Exp $ */
d23 1
d26 1
d59 1
a59 1
	struct client		*c;
d62 4
a65 5
	const char		*path, *newpath, *wd;
	char			*cause, *start, *end;
	size_t			 size, used;
	int			 buffer;
	mode_t			 mask;
a66 2
	char			*msg;
	size_t			 msglen;
a92 1
		c = cmdq->client;
d102 16
a117 13
	c = cmdq->client;
	if (c != NULL)
		wd = c->cwd;
	else if ((s = cmd_current_session(cmdq, 0)) != NULL) {
		wd = options_get_string(&s->options, "default-path");
		if (*wd == '\0')
			wd = s->cwd;
	} else
		wd = NULL;
	if (wd != NULL && *wd != '\0') {
		newpath = get_full_path(wd, path);
		if (newpath != NULL)
			path = newpath;
a118 7

	mask = umask(S_IRWXG | S_IRWXO);
	if (args_has(self->args, 'a'))
		f = fopen(path, "ab");
	else
		f = fopen(path, "wb");
	umask(mask);
d120 2
@


1.19
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.18 2013/03/24 09:30:41 nicm Exp $ */
a40 1
	NULL,
a48 1
	NULL,
@


1.18
log
@Merge show-buffer into save-buffer.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.17 2013/03/22 15:53:24 nicm Exp $ */
d33 1
a33 1
enum cmd_retval	 cmd_save_buffer_exec(struct cmd *, struct cmd_ctx *);
d56 1
a56 1
cmd_save_buffer_exec(struct cmd *self, struct cmd_ctx *ctx)
d73 1
a73 1
			ctx->error(ctx, "no buffers");
d79 1
a79 1
			ctx->error(ctx, "buffer %s", cause);
d86 1
a86 1
			ctx->error(ctx, "no buffer %d", buffer);
d96 6
a101 2
		c = ctx->cmdclient;
		if (c != NULL)
d103 1
a103 7
		c = ctx->curclient;
		if (c->flags & CLIENT_CONTROL)
			goto do_stdout;
		if (c != NULL)
			goto do_print;
		ctx->error(ctx, "can't write to stdout");
		return (CMD_RETURN_ERROR);
d106 1
a106 1
	c = ctx->cmdclient;
d109 1
a109 1
	else if ((s = cmd_current_session(ctx, 0)) != NULL) {
d128 1
a128 1
		ctx->error(ctx, "%s: %s", path, strerror(errno));
d132 1
a132 1
		ctx->error(ctx, "%s: fwrite error", path);
d147 1
a147 1
		ctx->error(ctx, "buffer too big");
d166 1
a166 1
		ctx->print(ctx, "%s", msg);
@


1.17
log
@Fix so capture-pane/save-buffer can work in control clients, from George
Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.16 2012/07/11 07:10:15 nicm Exp $ */
d25 1
d45 10
d63 2
a64 1
	char			*cause;
d68 2
d91 4
a94 1
	path = args->argv[0];
d96 3
d100 2
a101 10
		if (c == NULL || !(c->flags & CLIENT_CONTROL))
			c = ctx->cmdclient;
		if (c == NULL) {
			ctx->error(ctx, "can't write to stdout");
			return (CMD_RETURN_ERROR);
		}
		evbuffer_add(c->stdout_data, pb->data, pb->size);
		server_push_stdout(c);
	} else {
		c = ctx->cmdclient;
d103 51
a153 12
			wd = c->cwd;
		else if ((s = cmd_current_session(ctx, 0)) != NULL) {
			wd = options_get_string(&s->options, "default-path");
			if (*wd == '\0')
				wd = s->cwd;
		} else
			wd = NULL;
		if (wd != NULL && *wd != '\0') {
			newpath = get_full_path(wd, path);
			if (newpath != NULL)
				path = newpath;
		}
d155 6
a160 3
		mask = umask(S_IRWXG | S_IRWXO);
		if (args_has(self->args, 'a'))
			f = fopen(path, "ab");
d162 9
a170 12
			f = fopen(path, "wb");
		umask(mask);
		if (f == NULL) {
			ctx->error(ctx, "%s: %s", path, strerror(errno));
			return (CMD_RETURN_ERROR);
		}
		if (fwrite(pb->data, 1, pb->size, f) != pb->size) {
			ctx->error(ctx, "%s: fwrite error", path);
			fclose(f);
			return (CMD_RETURN_ERROR);
		}
		fclose(f);
d173 1
@


1.16
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.15 2012/07/10 11:53:01 nicm Exp $ */
d48 1
a48 1
	struct client		*c = ctx->cmdclient;
d79 3
d83 1
a83 1
			ctx->error(ctx, "%s: can't write to stdout", path);
d89 1
@


1.15
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.14 2012/05/21 18:27:42 nicm Exp $ */
d32 1
a32 1
int	cmd_save_buffer_exec(struct cmd *, struct cmd_ctx *);
d44 1
a44 1
int
d60 1
a60 1
			return (-1);
d67 1
a67 1
			return (-1);
d73 1
a73 1
			return (-1);
d81 1
a81 1
			return (-1);
d108 1
a108 1
			return (-1);
d113 1
a113 1
			return (-1);
d118 1
a118 1
	return (0);
@


1.14
log
@Instead of passing stdin/stdout/stderr file descriptors over imsg and
handling them in the server, handle them in the client and pass buffers
over imsg. This is much tidier for some upcoming changes and the
performance hit isn't critical.

The tty fd is still passed to the server as before.

This bumps the tmux protocol version so new clients and old servers are
incompatible.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.13 2012/03/21 19:16:07 nicm Exp $ */
d23 1
d66 1
a66 1
			xfree(cause);
@


1.13
log
@Fix save-buffer usage, from Kazuhiko Sakaguchi.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.12 2011/10/23 08:34:01 nicm Exp $ */
d82 2
a83 1
		bufferevent_write(c->stdout_event, pb->data, pb->size);
@


1.12
log
@Try to resolve relative paths for loadb and saveb (first using client
working directory if any then default-path or session wd).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.11 2011/10/23 00:49:25 nicm Exp $ */
d36 1
a36 1
	"[-a] " CMD_BUFFER_USAGE,
@


1.11
log
@Plug a memory leak and update some comments, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.10 2011/01/04 00:42:47 nicm Exp $ */
d48 1
d50 1
a50 1
	const char		*path;
d84 14
@


1.10
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.9 2010/12/30 23:16:18 nicm Exp $ */
d28 1
a28 1
 * Saves a session paste buffer to a file.
@


1.9
log
@Change from a per-session stack of buffers to one global stack which is
much more convenient and also simplifies lot of code. This renders
copy-buffer useless and makes buffer-limit now a server option.

By Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.8 2010/07/24 20:11:59 nicm Exp $ */
d35 6
a40 7
	"[-a] " CMD_BUFFER_USAGE " path",
	CMD_ARG1, "a",
	cmd_buffer_init,
	cmd_buffer_parse,
	cmd_save_buffer_exec,
	cmd_buffer_free,
	cmd_buffer_print
d46 2
a47 1
	struct cmd_buffer_data	*data = self->data;
d49 3
d55 1
a55 1
	if (data->buffer == -1) {
d61 8
a68 1
		pb = paste_get_index(&global_buffers, data->buffer);
d70 1
a70 1
			ctx->error(ctx, "no buffer %d", data->buffer);
d75 4
a78 3
	if (strcmp(data->arg, "-") == 0) {
		if (ctx->cmdclient == NULL) {
			ctx->error(ctx, "%s: can't write to stdout", data->arg);
d81 1
a81 2
		bufferevent_write(
		    ctx->cmdclient->stdout_event, pb->data, pb->size);
d84 2
a85 2
		if (cmd_check_flag(data->chflags, 'a'))
			f = fopen(data->arg, "ab");
d87 1
a87 1
			f = fopen(data->arg, "wb");
d90 1
a90 1
			ctx->error(ctx, "%s: %s", data->arg, strerror(errno));
d94 1
a94 1
			ctx->error(ctx, "%s: fwrite error", data->arg);
@


1.8
log
@When changing so that the client passes its stdout and stderr as well as
stdin up to the server, I forgot one essential point - the tmux server
could now be both the producer and consumer. This happens when tmux is
run inside tmux, as well as when piping tmux commands together.

So, using stdio(3) was a bad idea - if sufficient data was written, this
could block in write(2). When that happened and the server was both
producer and consumer, it deadlocks.

Change to use libevent bufferevents for the client stdin, stdout and
stderr instead. This is trivial enough for output but requires a
callback mechanism to trigger when stdin is finished.

This relies on the underlying polling mechanism for libevent to work
with whatever devices to which the user could redirect stdin, stdout or
stderr, hence the change to use poll(2) over kqueue(2) for tmux.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.7 2010/06/28 22:10:42 nicm Exp $ */
d35 1
a35 1
	"[-a] " CMD_BUFFER_SESSION_USAGE " path",
a47 1
	struct session		*s;
a51 3
	if ((s = cmd_find_session(ctx, data->target)) == NULL)
		return (-1);

d53 1
a53 1
		if ((pb = paste_get_top(&s->buffers)) == NULL) {
d58 2
a59 1
		if ((pb = paste_get_index(&s->buffers, data->buffer)) == NULL) {
@


1.7
log
@Send all three of stdin, stdout, stderr from the client to the server, so that
commands can directly make use of them. This means that load-buffer and
save-buffer can have "-" as the file to read from stdin or write to stdout.

This is a protocol version bump so the tmux server will need to be restarted
after upgrade (or an older client used).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.6 2009/11/13 19:53:29 nicm Exp $ */
d50 2
a51 2
	mode_t			mask;
	FILE			*f, *close_f;
d73 2
a74 2
		f = ctx->cmdclient->stdout_file;
		close_f = NULL;
d86 6
a91 1
		close_f = f;
a92 9

	if (fwrite(pb->data, 1, pb->size, f) != pb->size) {
	    	ctx->error(ctx, "%s: fwrite error", data->arg);
	    	fclose(f);
	    	return (-1);
	}

	if (close_f != NULL)
		fclose(close_f);
@


1.6
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.5 2009/10/26 21:13:06 nicm Exp $ */
d51 1
a51 1
	FILE			*f;
d68 19
a86 9
	mask = umask(S_IRWXG | S_IRWXO);
	if (cmd_check_flag(data->chflags, 'a'))
		f = fopen(data->arg, "ab");
	else
		f = fopen(data->arg, "wb");
	umask(mask);
	if (f == NULL) {
		ctx->error(ctx, "%s: %s", data->arg, strerror(errno));
		return (-1);
d95 2
a96 1
	fclose(f);
@


1.5
log
@Reset the umask right after fopen to avoid leaving it changed on error, noticed
by deraadt@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.4 2009/09/07 18:50:45 nicm Exp $ */
d36 1
a36 1
	CMD_ARG1, CMD_CHFLAG('a'),
d69 1
a69 1
	if (data->chflags & CMD_CHFLAG('a'))
@


1.4
log
@Give each paste buffer a size member instead of requiring them to be
zero-terminated.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d73 1
a85 1
	umask(mask);
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d78 1
a78 1
	if (fwrite(pb->data, 1, strlen(pb->data), f) != strlen(pb->data)) {
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-save-buffer.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a39 2
	cmd_buffer_send,
	cmd_buffer_recv,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d36 1
a36 1
	CMD_AFLAG|CMD_ARG1,
d71 1
a71 1
	if (data->flags & CMD_AFLAG)
@

