head	1.36;
access;
symbols
	OPENBSD_6_2:1.36.0.2
	OPENBSD_6_2_BASE:1.36
	OPENBSD_6_1:1.33.0.4
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.30.0.4
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.30.0.2
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.36
date	2017.07.21.09.17.19;	author nicm;	state Exp;
branches;
next	1.35;
commitid	2CSwOl0273LV0sl1;

1.35
date	2017.04.25.15.35.10;	author nicm;	state Exp;
branches;
next	1.34;
commitid	MXNSUNyVdWWV0sNt;

1.34
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.33;
commitid	RXMp6wwG5a5Y82bo;

1.33
date	2017.03.09.17.02.38;	author nicm;	state Exp;
branches;
next	1.32;
commitid	QtFskEpSXY809LlK;

1.32
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.31;
commitid	pxm6osuE99zELpkU;

1.31
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.30;
commitid	TaZ3kOtGiWwKofka;

1.30
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.29;
commitid	P3qmSOx6KrDBsb0c;

1.29
date	2015.12.16.21.50.37;	author nicm;	state Exp;
branches;
next	1.28;
commitid	Bam1GajuDZzmKjyE;

1.28
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.27;
commitid	rE682EC14v4gpeFy;

1.27
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.26;
commitid	gsQkQsSyBCSmU9ax;

1.26
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.25;
commitid	uzMkp8Z4FE6WB6s6;

1.25
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.24;
commitid	B5GekkO0CdWpFMrz;

1.24
date	2015.10.28.09.51.55;	author nicm;	state Exp;
branches;
next	1.23;
commitid	eGVGKzVVYKHFvkn4;

1.23
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.22;
commitid	Gq8hgMoG3t1Wy1Zv;

1.22
date	2014.05.13.08.08.32;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.17.13.02.59;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.10.10.12.29.53;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.10.10.12.00.22;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.04.13.35.37;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.13.17.33.07;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.16.12.35.04;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.01.13.09.49;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.13.19.04.00;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.08.21.52.43;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.24.19.35.33;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Add -c for respawn-pane and respawn-window, from J Raynor.
@
text
@/* $OpenBSD: cmd-respawn-window.c,v 1.35 2017/04/25 15:35:10 nicm Exp $ */

/*
 * Copyright (c) 2008 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Respawn a window (restart the command). Kill existing if -k given.
 */

static enum cmd_retval	cmd_respawn_window_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_respawn_window_entry = {
	.name = "respawn-window",
	.alias = "respawnw",

	.args = { "c:kt:", 0, -1 },
	.usage = "[-c start-directory] [-k] " CMD_TARGET_WINDOW_USAGE
	         " [command]",

	.target = { 't', CMD_FIND_WINDOW, 0 },

	.flags = 0,
	.exec = cmd_respawn_window_exec
};

static enum cmd_retval
cmd_respawn_window_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct session		*s = item->target.s;
	struct winlink		*wl = item->target.wl;
	struct window		*w = wl->window;
	struct window_pane	*wp;
	struct client           *c = cmd_find_client(item, NULL, 1);
	struct environ		*env;
	const char		*path = NULL, *cp;
	char		 	*cause, *cwd = NULL;
	struct environ_entry	*envent;

	if (!args_has(self->args, 'k')) {
		TAILQ_FOREACH(wp, &w->panes, entry) {
			if (wp->fd == -1)
				continue;
			cmdq_error(item, "window still active: %s:%d", s->name,
			    wl->idx);
			return (CMD_RETURN_ERROR);
		}
	}

	wp = TAILQ_FIRST(&w->panes);
	TAILQ_REMOVE(&w->panes, wp, entry);
	layout_free(w);
	window_destroy_panes(w);
	TAILQ_INSERT_HEAD(&w->panes, wp, entry);
	window_pane_resize(wp, w->sx, w->sy);

	if (item->client != NULL && item->client->session == NULL)
		envent = environ_find(item->client->environ, "PATH");
	else
		envent = environ_find(s->environ, "PATH");
	if (envent != NULL)
		path = envent->value;

	if ((cp = args_get(args, 'c')) != NULL)
		cwd = format_single(item, cp, c, s, NULL, NULL);

	env = environ_for_session(s, 0);
	if (window_pane_spawn(wp, args->argc, args->argv, path, NULL, cwd, env,
	    s->tio, &cause) != 0) {
		cmdq_error(item, "respawn window failed: %s", cause);
		free(cause);
		environ_free(env);
		free(cwd);
		server_destroy_pane(wp, 0);
		return (CMD_RETURN_ERROR);
	}
	environ_free(env);
	free(cwd);

	layout_init(w, wp);
	window_pane_reset_mode(wp);
	screen_reinit(&wp->base);
	input_init(wp);
	window_set_active_pane(w, wp);

	recalculate_sizes();
	server_redraw_window(w);

	return (CMD_RETURN_NORMAL);
}
@


1.35
log
@Do not update TERM into config file parsing has finished.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.34 2017/04/22 10:22:39 nicm Exp $ */
d37 3
a39 2
	.args = { "kt:", 0, -1 },
	.usage = "[-k] " CMD_TARGET_WINDOW_USAGE " [command]",
d55 1
d57 2
a58 2
	const char		*path;
	char		 	*cause;
a77 1
	path = NULL;
d85 3
d89 1
a89 1
	if (window_pane_spawn(wp, args->argc, args->argv, path, NULL, NULL, env,
d94 1
d99 2
@


1.34
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.33 2017/03/09 17:02:38 nicm Exp $ */
d84 1
a84 1
	env = environ_for_session(s);
@


1.33
log
@Move server_fill_environ into environ.c and move some other common code
into it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.32 2016/10/16 19:04:05 nicm Exp $ */
d40 1
a40 1
	.tflag = CMD_WINDOW,
d50 2
a51 2
	struct session		*s = item->state.tflag.s;
	struct winlink		*wl = item->state.tflag.wl;
@


1.32
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.31 2016/10/10 21:51:39 nicm Exp $ */
a68 5
	env = environ_create();
	environ_copy(global_environ, env);
	environ_copy(s->environ, env);
	server_fill_environ(s, env);

d84 1
d93 1
a102 1
	environ_free(env);
@


1.31
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.30 2016/01/19 15:59:12 nicm Exp $ */
d30 2
a31 1
static enum cmd_retval	 cmd_respawn_window_exec(struct cmd *, struct cmd_q *);
d47 1
a47 1
cmd_respawn_window_exec(struct cmd *self, struct cmd_q *cmdq)
d50 2
a51 2
	struct session		*s = cmdq->state.tflag.s;
	struct winlink		*wl = cmdq->state.tflag.wl;
d63 1
a63 1
			cmdq_error(cmdq, "window still active: %s:%d", s->name,
d82 2
a83 2
	if (cmdq->client != NULL && cmdq->client->session == NULL)
		envent = environ_find(cmdq->client->environ, "PATH");
d91 1
a91 1
		cmdq_error(cmdq, "respawn window failed: %s", cause);
@


1.30
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.29 2015/12/16 21:50:37 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_respawn_window_exec(struct cmd *, struct cmd_q *);
d45 1
a45 1
enum cmd_retval
@


1.29
log
@Add infrastructure to work out the best target given a pane or window
alone and use it to add pane_died and pane_exited hooks.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.28 2015/12/14 00:31:54 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2008 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.28
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.27 2015/12/13 21:53:57 nicm Exp $ */
d93 1
a93 1
		server_destroy_pane(wp);
@


1.27
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.26 2015/12/13 14:32:38 nicm Exp $ */
d39 3
a41 1
	.flags = CMD_WINDOW_T,
@


1.26
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.25 2015/10/31 08:13:58 nicm Exp $ */
d33 8
a40 5
	"respawn-window", "respawnw",
	"kt:", 0, -1,
	"[-k] " CMD_TARGET_WINDOW_USAGE " [command]",
	CMD_WINDOW_T,
	cmd_respawn_window_exec
@


1.25
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.24 2015/10/28 09:51:55 nicm Exp $ */
d36 1
a36 1
	0,
d44 3
a46 2
	struct winlink		*wl;
	struct window		*w;
a47 1
	struct session		*s;
a52 4
	if ((wl = cmd_find_window(cmdq, args_get(args, 't'), &s)) == NULL)
		return (CMD_RETURN_ERROR);
	w = wl->window;

d57 2
a58 2
			cmdq_error(cmdq,
			    "window still active: %s:%d", s->name, wl->idx);
@


1.24
log
@Like options, move the environ struct into environ.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.23 2014/10/20 22:29:25 nicm Exp $ */
d87 1
a87 1
	if (window_pane_spawn(wp, args->argc, args->argv, path, NULL, -1, env,
@


1.23
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.22 2014/05/13 08:08:32 nicm Exp $ */
d48 1
a48 1
	struct environ		 env;
d67 4
a70 4
	environ_init(&env);
	environ_copy(&global_environ, &env);
	environ_copy(&s->environ, &env);
	server_fill_environ(s, &env);
d81 1
a81 1
		envent = environ_find(&cmdq->client->environ, "PATH");
d83 1
a83 1
		envent = environ_find(&s->environ, "PATH");
d87 1
a87 1
	if (window_pane_spawn(wp, args->argc, args->argv, path, NULL, -1, &env,
d91 1
a91 1
		environ_free(&env);
d104 1
a104 1
	environ_free(&env);
@


1.22
log
@If multiple arguments are given to new-session, new-window,
split-window, respawn-window or respawn-pane, pass them directly to
execvp() to help avoid quoting problems. One argument still goes to "sh
-c" like before. Requested by many over the years. Patch from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.21 2014/04/17 13:02:59 nicm Exp $ */
a36 1
	NULL,
@


1.21
log
@Set PATH explicitly, either from client or session
environment. Previously it came from the session environment. From J
Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.20 2013/10/10 12:29:53 nicm Exp $ */
d34 1
a34 1
	"kt:", 0, 1,
d50 1
a50 1
	const char		*cmd, *path;
a78 4
	if (args->argc != 0)
		cmd = args->argv[0];
	else
		cmd = NULL;
d88 2
a89 2
	if (window_pane_spawn(wp, cmd, path, NULL, -1, &env, s->tio,
	    &cause) != 0) {
@


1.20
log
@Pass -1 for cwd now not NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.19 2013/10/10 12:00:22 nicm Exp $ */
d50 1
a50 1
	const char		*cmd;
d52 1
d83 11
a93 1
	if (window_pane_spawn(wp, cmd, NULL, -1, &env, s->tio, &cause) != 0) {
@


1.19
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.18 2013/03/24 09:57:59 nicm Exp $ */
d82 1
a82 1
	if (window_pane_spawn(wp, cmd, NULL, NULL, &env, s->tio, &cause) != 0) {
@


1.18
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.17 2013/03/24 09:54:10 nicm Exp $ */
a36 1
	NULL,
@


1.17
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.16 2012/07/11 07:10:15 nicm Exp $ */
d90 1
a90 1
	layout_init(w);
@


1.16
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.15 2012/07/10 11:53:01 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_respawn_window_exec(struct cmd *, struct cmd_ctx *);
d43 1
a43 1
cmd_respawn_window_exec(struct cmd *self, struct cmd_ctx *ctx)
d54 1
a54 1
	if ((wl = cmd_find_window(ctx, args_get(args, 't'), &s)) == NULL)
d62 1
a62 1
			ctx->error(ctx,
d84 1
a84 1
		ctx->error(ctx, "respawn window failed: %s", cause);
@


1.15
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.14 2011/07/04 13:35:37 nicm Exp $ */
d30 1
a30 1
int	cmd_respawn_window_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
int
d55 1
a55 1
		return (-1);
d64 1
a64 1
			return (-1);
d88 1
a88 1
		return (-1);
d100 1
a100 1
	return (0);
@


1.14
log
@Use screen_reinit for respawn-pane to keep history and call input_init
for respawn-window to break out of waiting for DCS/OSC to finish.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.13 2011/01/04 00:42:47 nicm Exp $ */
d21 1
d85 1
a85 1
		xfree(cause);
@


1.13
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.12 2009/12/03 22:50:10 nicm Exp $ */
d90 1
d92 1
@


1.12
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.11 2009/11/13 19:53:29 nicm Exp $ */
d33 1
d35 4
a38 6
	CMD_ARG01, "k",
	cmd_target_init,
	cmd_target_parse,
	cmd_respawn_window_exec,
	cmd_target_free,
	cmd_target_print
d44 1
a44 1
	struct cmd_target_data	*data = self->data;
d50 1
d53 1
a53 1
	if ((wl = cmd_find_window(ctx, data->target, &s)) == NULL)
d57 1
a57 1
	if (!cmd_check_flag(data->chflags, 'k')) {
d78 5
a82 2
	if (window_pane_spawn(
	    wp, data->arg, NULL, NULL, &env, s->tio, &cause) != 0) {
@


1.11
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.10 2009/11/13 17:33:07 nicm Exp $ */
d75 1
a75 1
 	window_destroy_panes(w);
@


1.10
log
@Destroy panes immediately rather than checking them all every loop.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.9 2009/09/16 12:35:04 nicm Exp $ */
d34 1
a34 1
	CMD_ARG01, CMD_CHFLAG('k'),
d57 1
a57 1
	if (!(data->chflags & CMD_CHFLAG('k'))) {
@


1.9
log
@Rather than constructing an entire termios struct from ttydefaults.h, just let
forkpty do it and then alter the bits that should be changed after fork. A
little neater and more portable.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.8 2009/09/01 13:09:49 nicm Exp $ */
d83 1
@


1.8
log
@When using tmux as a login shell, there is currently no way to specify a shell
to be used as a login shell inside tmux, so add a default-shell session option.
This sets the shell invoked as a login shell when the default-command option is
empty.

The default option value is whichever of $SHELL, getpwuid(getuid())'s pw_shell
or /bin/sh is valid first.

Based on a diff from martynas@@, changed by me to be a session option rather
than a window option.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.7 2009/08/13 19:04:00 nicm Exp $ */
d79 1
a79 1
	    wp, data->arg, NULL, NULL, &env, &s->tio, &cause) != 0) {
@


1.7
log
@When creating a new session from the command-line where there is an external
terminal, copy the termios(4) special characters and use them for new windows
created in the new session. Suggested by Theo.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.6 2009/08/08 21:52:43 nicm Exp $ */
d78 2
a79 1
	if (window_pane_spawn(wp, data->arg, NULL, &env, &s->tio, &cause) != 0) {
@


1.6
log
@Infrastructure and commands to manage the environment for processes started
within tmux.

There is a global environment, copied from the external environment when the
server is started and each sesssion has an (initially empty) session
environment which overrides it.

New commands set-environment and show-environment manipulate or display the
environments.

A new session option, update-environment, is a space-separated list of
variables which are updated from the external environment into the session
environment every time a new session is created - the default is DISPLAY.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.5 2009/07/26 12:58:44 nicm Exp $ */
d78 1
a78 1
	if (window_pane_spawn(wp, data->arg, NULL, &env, &cause) != 0) {
@


1.5
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.4 2009/07/24 19:35:33 nicm Exp $ */
d50 1
a50 1
	const char	       **env;
d67 4
a70 1
	env = server_fill_environ(s);
d78 1
a78 1
	if (window_pane_spawn(wp, data->arg, NULL, env, &cause) != 0) {
d81 1
d91 1
@


1.4
log
@Set the active pane when respawning a window - fixes problems when respawning a
window with multiple panes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.3 2009/07/19 13:21:40 nicm Exp $ */
a37 2
	cmd_target_send,
	cmd_target_recv,
@


1.3
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d84 1
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-window.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d73 1
d82 1
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
	CMD_ARG01|CMD_KFLAG,
d59 1
a59 1
	if (!(data->flags & CMD_KFLAG)) {
@

