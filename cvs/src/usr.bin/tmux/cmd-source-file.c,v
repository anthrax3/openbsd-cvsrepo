head	1.35;
access;
symbols
	OPENBSD_6_1:1.34.0.4
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.35
date	2017.04.19.16.59.54;	author nicm;	state Exp;
branches;
next	1.34;
commitid	TR4zUZqfWl7NU4Rb;

1.34
date	2017.02.14.18.13.05;	author nicm;	state Exp;
branches;
next	1.33;
commitid	xvcFJuJjtbCqRtLW;

1.33
date	2017.01.29.22.10.55;	author nicm;	state Exp;
branches;
next	1.32;
commitid	P6nbLNe6ZJY6Y7CM;

1.32
date	2017.01.09.19.29.12;	author nicm;	state Exp;
branches;
next	1.31;
commitid	f0HlG2NqurQCxkhV;

1.31
date	2017.01.09.19.27.00;	author nicm;	state Exp;
branches;
next	1.30;
commitid	OxA55NgX2OxpYMnz;

1.30
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.29;
commitid	pxm6osuE99zELpkU;

1.29
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.28;
commitid	1xIYFpLYkPIXNEvU;

1.28
date	2016.10.14.18.41.53;	author nicm;	state Exp;
branches;
next	1.27;
commitid	H2ZMHx3pmW6ppdPc;

1.27
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.26;
commitid	1GCC1n59gejVg5Ih;

1.26
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.25;
commitid	TaZ3kOtGiWwKofka;

1.25
date	2016.05.12.16.05.33;	author tim;	state Exp;
branches;
next	1.24;
commitid	T3Sd9myvNE2f79sY;

1.24
date	2016.04.29.14.05.24;	author nicm;	state Exp;
branches;
next	1.23;
commitid	wZaePCOma60t58oN;

1.23
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.22;
commitid	gsQkQsSyBCSmU9ax;

1.22
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.21;
commitid	uzMkp8Z4FE6WB6s6;

1.21
date	2014.10.27.22.23.47;	author nicm;	state Exp;
branches;
next	1.20;
commitid	lLfuAlkV0hLlHdgD;

1.20
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.19;
commitid	Gq8hgMoG3t1Wy1Zv;

1.19
date	2013.10.10.12.04.38;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.10.10.12.00.23;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.04.12.12.44.31;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.25.10.05.58;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.11.27.16.12.29;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2010.12.29.21.28.32;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.06.23.22.27;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.06.17.15.33;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.21.15.32.06;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.23.17.29.51;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.35
log
@load_cfg returns < 0 on error, not != 0. Problem reported by Kaushal Modi.
@
text
@/* $OpenBSD: cmd-source-file.c,v 1.34 2017/02/14 18:13:05 nicm Exp $ */

/*
 * Copyright (c) 2008 Tiago Cunha <me@@tiagocunha.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <errno.h>
#include <glob.h>
#include <stdlib.h>
#include <string.h>
#include <vis.h>

#include "tmux.h"

/*
 * Sources a configuration file.
 */

static enum cmd_retval	cmd_source_file_exec(struct cmd *, struct cmdq_item *);

static enum cmd_retval	cmd_source_file_done(struct cmdq_item *, void *);

const struct cmd_entry cmd_source_file_entry = {
	.name = "source-file",
	.alias = "source",

	.args = { "q", 1, 1 },
	.usage = "[-q] path",

	.flags = 0,
	.exec = cmd_source_file_exec
};

static enum cmd_retval
cmd_source_file_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	int			 quiet = args_has(args, 'q');
	struct client		*c = item->client;
	struct cmdq_item	*new_item;
	enum cmd_retval		 retval;
	char			*pattern, *tmp;
	const char		*path = args->argv[0];
	glob_t			 g;
	u_int			 i;

	if (*path == '/')
		pattern = xstrdup(path);
	else {
		utf8_stravis(&tmp, server_client_get_cwd(c), VIS_GLOB);
		xasprintf(&pattern, "%s/%s", tmp, path);
		free(tmp);
	}
	log_debug("%s: %s", __func__, pattern);

	retval = CMD_RETURN_NORMAL;
	if (glob(pattern, 0, NULL, &g) != 0) {
		if (!quiet || errno != ENOENT) {
			cmdq_error(item, "%s: %s", path, strerror(errno));
			retval = CMD_RETURN_ERROR;
		}
		free(pattern);
		return (retval);
	}
	free(pattern);

	for (i = 0; i < (u_int)g.gl_pathc; i++) {
		if (load_cfg(g.gl_pathv[i], c, item, quiet) < 0)
			retval = CMD_RETURN_ERROR;
	}
	if (cfg_finished) {
		new_item = cmdq_get_callback(cmd_source_file_done, NULL);
		cmdq_insert_after(item, new_item);
	}

	globfree(&g);
	return (retval);
}

static enum cmd_retval
cmd_source_file_done(struct cmdq_item *item, __unused void *data)
{
	cfg_print_causes(item);
	return (CMD_RETURN_NORMAL);
}
@


1.34
log
@Make source-file look for files relative to the client working directory
(like load-buffer and save-buffer), from Chris Pickel. Also break the
where-is-this-file code out into its own function for loadb and saveb.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.33 2017/01/29 22:10:55 nicm Exp $ */
d82 1
a82 1
		if (load_cfg(g.gl_pathv[i], c, item, quiet) != 0)
@


1.33
log
@Add -n to break-pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.32 2017/01/09 19:29:12 nicm Exp $ */
d25 1
d52 1
a53 1
	int			 quiet;
d56 2
d61 6
a66 6
	quiet = args_has(args, 'q');
	if (glob(args->argv[0], 0, NULL, &g) != 0) {
		if (quiet && errno == ENOENT)
			return (CMD_RETURN_NORMAL);
		cmdq_error(item, "%s: %s", args->argv[0], strerror(errno));
		return (CMD_RETURN_ERROR);
d68 1
d71 10
@


1.32
log
@source-file -q needs to apply to glob(3) too.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.31 2017/01/09 19:27:00 nicm Exp $ */
d56 1
a56 1
	int			 i;
d67 1
a67 1
	for (i = 0; i < g.gl_pathc; i++) {
@


1.31
log
@Run the source-file pattern through glob(3).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.30 2016/10/16 19:04:05 nicm Exp $ */
d58 1
d60 2
a64 1
	quiet = args_has(args, 'q');
@


1.30
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.29 2016/10/16 17:55:14 nicm Exp $ */
d21 2
d24 1
d54 3
d58 4
d63 5
a67 9
	switch (load_cfg(args->argv[0], c, item, quiet)) {
	case -1:
		if (cfg_finished)
			cfg_print_causes(item);
		return (CMD_RETURN_ERROR);
	case 0:
		if (cfg_finished)
			cfg_print_causes(item);
		return (CMD_RETURN_NORMAL);
d73 3
a75 1
	return (CMD_RETURN_NORMAL);
@


1.29
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.28 2016/10/14 18:41:53 nicm Exp $ */
d29 1
a29 1
static enum cmd_retval	cmd_source_file_exec(struct cmd *, struct cmd_q *);
d31 1
a31 1
static enum cmd_retval	cmd_source_file_done(struct cmd_q *, void *);
d45 1
a45 1
cmd_source_file_exec(struct cmd *self, struct cmd_q *cmdq)
d47 4
a50 4
	struct args	*args = self->args;
	struct client	*c = cmdq->client;
	int		 quiet;
	struct cmd_q	*new_cmdq;
d53 1
a53 1
	switch (load_cfg(args->argv[0], c, cmdq, quiet)) {
d56 1
a56 1
			cfg_print_causes(cmdq);
d60 1
a60 1
			cfg_print_causes(cmdq);
d64 2
a65 2
		new_cmdq = cmdq_get_callback(cmd_source_file_done, NULL);
		cmdq_insert_after(cmdq, new_cmdq);
d71 1
a71 1
cmd_source_file_done(struct cmd_q *cmdq, __unused void *data)
d73 1
a73 1
	cfg_print_causes(cmdq);
@


1.28
log
@source-file and some other commands can recurse back into cmdq_continue,
which could potentially free the currently running command, so we need
to take a reference to it in cmdq_continue_one.

Fixes problem reported by Theo Buehler.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.27 2016/10/13 22:48:51 nicm Exp $ */
d31 1
a31 1
static void		cmd_source_file_done(struct cmd_q *);
d48 1
a48 1
	struct cmd_q	*cmdq1;
d50 1
a50 4

	cmdq1 = cmdq_new(cmdq->client);
	cmdq1->emptyfn = cmd_source_file_done;
	cmdq1->data = cmdq;
d53 1
a53 1
	switch (load_cfg(args->argv[0], cmdq1, quiet)) {
d55 1
a55 2
		cmdq_free(cmdq1);
		if (cfg_references == 0) {
d57 1
a57 3
			return (CMD_RETURN_ERROR);
		}
		return (CMD_RETURN_NORMAL);
d59 1
a59 2
		cmdq_free(cmdq1);
		if (cfg_references == 0)
d63 5
a67 8

	log_debug("%s: cmdq %p, parent %p", __func__, cmdq1, cmdq);

	cmdq->references++;
	cfg_references++;

	cmdq_continue(cmdq1);
	return (CMD_RETURN_WAIT);
d70 2
a71 2
static void
cmd_source_file_done(struct cmd_q *cmdq1)
d73 2
a74 14
	struct cmd_q	*cmdq = cmdq1->data;

	log_debug("%s: cmdq %p, parent %p", __func__, cmdq1, cmdq);

	if (cmdq1->client_exit >= 0)
		cmdq->client_exit = cmdq1->client_exit;
	cmdq_free(cmdq1);

	cfg_references--;
	if (cmdq_free(cmdq))
		return;
	if (cfg_references == 0)
		cfg_print_causes(cmdq);
	cmdq_continue(cmdq);
@


1.27
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.26 2016/10/10 21:51:39 nicm Exp $ */
d71 2
d85 2
a88 1

a91 1

a93 1

@


1.26
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.25 2016/05/12 16:05:33 tim Exp $ */
a51 1
	cmdq1->flags |= cmdq->flags & CMD_Q_NOHOOKS;
@


1.25
log
@- Rework load_cfg() error handling a little.
- Add -q to source-file to suppress errors about nonexistent files.

Input and OK nicm@@
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.24 2016/04/29 14:05:24 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	cmd_source_file_exec(struct cmd *, struct cmd_q *);
d31 1
a31 1
void		cmd_source_file_done(struct cmd_q *);
d44 1
a44 1
enum cmd_retval
d79 1
a79 1
void
@


1.24
log
@Final parts of command hooks, add before- and after- hooks to each command.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.23 2015/12/13 21:53:57 nicm Exp $ */
d37 2
a38 2
	.args = { "", 1, 1 },
	.usage = "path",
d49 1
a49 1
	char		*cause;
d56 2
a57 1
	switch (load_cfg(args->argv[0], cmdq1, &cause)) {
d59 1
d61 1
a61 3
			cmdq_free(cmdq1);
			cmdq_error(cmdq, "%s", cause);
			free(cause);
d64 1
a64 3
		cfg_add_cause("%s", cause);
		free(cause);
		/* FALLTHROUGH */
d66 1
a68 1
		cmdq_free(cmdq1);
@


1.23
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.22 2015/12/13 14:32:38 nicm Exp $ */
d52 1
@


1.22
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.21 2014/10/27 22:23:47 nicm Exp $ */
d34 8
a41 5
	"source-file", "source",
	"", 1, 1,
	"path",
	0,
	cmd_source_file_exec
@


1.21
log
@Move cfg_causes local into cfg.c and remove struct causelist.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.20 2014/10/20 22:29:25 nicm Exp $ */
d48 1
a48 2
	cmdq1 = cmdq_new(NULL);
	cmdq1->client = cmdq->client;
@


1.20
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.19 2013/10/10 12:04:38 nicm Exp $ */
a30 1
void		cmd_source_file_show(struct cmd_q *);
d61 2
a62 1
		ARRAY_ADD(&cfg_causes, cause);
d66 1
a66 1
			cmd_source_file_show(cmdq);
a78 14
cmd_source_file_show(struct cmd_q *cmdq)
{
	u_int	 i;
	char	*cause;

	for (i = 0; i < ARRAY_LENGTH(&cfg_causes); i++) {
		cause = ARRAY_ITEM(&cfg_causes, i);
		cmdq_print(cmdq, "%s", cause);
		free(cause);
	}
	ARRAY_FREE(&cfg_causes);
}

void
d94 1
a94 1
		cmd_source_file_show(cmdq);
@


1.19
log
@Make cmdq->client_exit a tristate (-1 means "not set") so that if
explicitly set it can be copied from child to parent cmdq by if-shell
and source-file. This fixes using attach or new. From Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.18 2013/10/10 12:00:23 nicm Exp $ */
a38 1
	NULL,
@


1.18
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.17 2013/04/12 12:44:31 nicm Exp $ */
d97 3
@


1.17
log
@Copy the client into the new cmdq in source-file so commands that work
on it (such as new-session) can work. Fixes issue reported by oss-adv at
users dot sf dot net.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.16 2013/03/25 10:05:58 nicm Exp $ */
a38 1
	NULL,
@


1.16
log
@Continue the parent cmdq after sourcing a file.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.15 2013/03/24 09:54:10 nicm Exp $ */
d52 1
@


1.15
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.14 2012/11/27 16:12:29 nicm Exp $ */
d101 2
a102 1
	if (cmdq_free(cmdq) || cfg_references != 0)
d105 2
a106 2
	cmd_source_file_show(cmdq);

@


1.14
log
@Correctly aggregate together errors from nested config files (with
source-file). Fix by Thomas Adam, reported by Sam Livingstone-Gray
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.13 2012/07/11 07:10:15 nicm Exp $ */
d29 4
a32 1
enum cmd_retval	 cmd_source_file_exec(struct cmd *, struct cmd_ctx *);
d45 36
a80 1
cmd_source_file_exec(struct cmd *self, struct cmd_ctx *ctx)
d82 3
a84 21
	struct args		*args = self->args;
	int			 retval;
	u_int			 i;
	char			*cause;

	retval = load_cfg(args->argv[0], ctx, &cfg_causes);

	/*
	 * If the context for the cmdclient came from tmux's configuration
	 * file, then return the status of this command now, regardless of the
	 * error condition. Any errors from parsing a configuration file at
	 * startup will be handled for us by the server.
	 */
	if (cfg_references > 0 ||
	    (ctx->curclient == NULL && ctx->cmdclient == NULL))
		return (retval);

	/*
	 * We were called from the command-line in which case print the errors
	 * gathered here directly.
	 */
d87 1
a87 1
		ctx->print(ctx, "%s", cause);
d91 14
d106 1
a106 1
	return (retval);
@


1.13
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.12 2012/07/10 11:53:01 nicm Exp $ */
a44 3
	struct causelist	 causes;
	char			*cause;
	struct window_pane	*wp;
d47 1
d49 1
a49 1
	ARRAY_INIT(&causes);
d51 8
a58 2
	retval = load_cfg(args->argv[0], ctx, &causes);
	if (ARRAY_EMPTY(&causes))
d61 8
a68 15
	if (retval == 1 && !RB_EMPTY(&sessions) && ctx->cmdclient != NULL) {
		wp = RB_MIN(sessions, &sessions)->curw->window->active;
		window_pane_set_mode(wp, &window_copy_mode);
		window_copy_init_for_output(wp);
		for (i = 0; i < ARRAY_LENGTH(&causes); i++) {
			cause = ARRAY_ITEM(&causes, i);
			window_copy_add(wp, "%s", cause);
			free(cause);
		}
	} else {
		for (i = 0; i < ARRAY_LENGTH(&causes); i++) {
			cause = ARRAY_ITEM(&causes, i);
			ctx->print(ctx, "%s", cause);
			free(cause);
		}
d70 1
a70 1
	ARRAY_FREE(&causes);
@


1.12
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.11 2011/01/04 00:42:47 nicm Exp $ */
d29 1
a29 1
int	cmd_source_file_exec(struct cmd *, struct cmd_ctx *);
d41 1
a41 1
int
@


1.11
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.10 2010/12/29 21:28:32 nicm Exp $ */
d21 2
d64 1
a64 1
			xfree(cause);
d70 1
a70 1
			xfree(cause);
@


1.10
log
@Allow the config file parser and source-file to return "don't exit" to
the client to let attach work from configuration files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.9 2010/02/06 23:22:27 nicm Exp $ */
a26 1
int	cmd_source_file_parse(struct cmd *, int, char **, char **);
a27 7
void	cmd_source_file_free(struct cmd *);
void	cmd_source_file_init(struct cmd *, int);
size_t	cmd_source_file_print(struct cmd *, char *, size_t);

struct cmd_source_file_data {
	char *path;
};
d31 1
d33 4
a36 6
	0, "",
	cmd_source_file_init,
	cmd_source_file_parse,
	cmd_source_file_exec,
	cmd_source_file_free,
	cmd_source_file_print
a38 40
/* ARGSUSED */
void
cmd_source_file_init(struct cmd *self, unused int arg)
{
	struct cmd_source_file_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->path = NULL;
}

int
cmd_source_file_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_source_file_data	*data;
	int				 opt;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "")) != -1) {
		switch (opt) {
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 1)
		goto usage;

	data->path = xstrdup(argv[0]);
	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
}

d42 6
a47 6
	struct cmd_source_file_data	*data = self->data;
	struct causelist		 causes;
	char				*cause;
	struct window_pane		*wp;
	int				 retval;
	u_int				 i;
d51 1
a51 1
	retval = load_cfg(data->path, ctx, &causes);
a73 24
}

void
cmd_source_file_free(struct cmd *self)
{
	struct cmd_source_file_data	*data = self->data;

	if (data->path != NULL)
		xfree(data->path);
	xfree(data);
}

size_t
cmd_source_file_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_source_file_data	*data = self->data;
	size_t				off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->path != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->path);
	return (off);
@


1.9
log
@Use the array.h code for the causes list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.8 2010/02/06 17:15:33 nicm Exp $ */
d94 2
d99 15
a113 1
	if (load_cfg(data->path, ctx, &causes) != 0) {
a118 1
		ARRAY_FREE(&causes);
d120 1
d122 1
a122 1
	return (0);
@


1.8
log
@Instead of bailing out on the first configuration file error, carry on,
collecting all the errors, then start with the active window in more mode
displaying them.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.7 2009/11/26 21:37:13 nicm Exp $ */
d92 10
a101 10
	char			       **causes;
	u_int				 i, ncauses;

	causes = NULL;
	ncauses = 0;

	if (load_cfg(data->path, ctx, &ncauses, &causes) != 0) {
		for (i = 0; i < ncauses; i++) {
			ctx->print(ctx, "%s", causes[i]);
			xfree(causes[i]);
d103 1
a103 1
		xfree(causes);
@


1.7
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.6 2009/11/13 19:53:29 nicm Exp $ */
d92 2
a93 1
	char				*cause;
d95 9
a103 4
	if (load_cfg(data->path, ctx, &cause) != 0) {
		ctx->error(ctx, "%s", cause);
		xfree(cause);
		return (-1);
@


1.6
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.5 2009/09/21 15:32:06 nicm Exp $ */
d48 1
@


1.5
log
@Use KEYC_NONE constant instead of 0 on init.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.4 2009/08/23 17:29:51 nicm Exp $ */
d40 1
a40 1
	0, 0,
@


1.4
log
@When using source-file, run the commands in the context of the source-file
command rather than with no context. This makes things like attach work from a
file.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d63 1
a63 1
	self->entry->init(self, 0);
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d93 1
a93 1
	if (load_cfg(data->path, &cause) != 0) {
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-source-file.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a28 2
void	cmd_source_file_send(struct cmd *, struct buffer *);
void	cmd_source_file_recv(struct cmd *, struct buffer *);
a43 2
	cmd_source_file_send,
	cmd_source_file_recv,
a99 19
}

void
cmd_source_file_send(struct cmd *self, struct buffer *b)
{
	struct cmd_source_file_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->path);
}

void
cmd_source_file_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_source_file_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->path = cmd_recv_string(b);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d42 1
a42 1
	0,
@

