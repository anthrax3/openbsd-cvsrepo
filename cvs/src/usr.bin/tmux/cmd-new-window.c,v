head	1.67;
access;
symbols
	OPENBSD_6_1_BASE:1.67
	OPENBSD_6_0:1.59.0.4
	OPENBSD_6_0_BASE:1.59
	OPENBSD_5_9:1.59.0.2
	OPENBSD_5_9_BASE:1.59
	OPENBSD_5_8:1.46.0.4
	OPENBSD_5_8_BASE:1.46
	OPENBSD_5_7:1.45.0.2
	OPENBSD_5_7_BASE:1.45
	OPENBSD_5_6:1.40.0.4
	OPENBSD_5_6_BASE:1.40
	OPENBSD_5_5:1.38.0.4
	OPENBSD_5_5_BASE:1.38
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.29.0.2
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.26.0.2
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.2
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.67
date	2017.03.08.13.36.12;	author nicm;	state Exp;
branches;
next	1.66;
commitid	jI8R4kuPSDw6nngR;

1.66
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.65;
commitid	BLRh0qXo7OVTPhiT;

1.65
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.64;
commitid	j0FZs70gSPCmpqWI;

1.64
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.63;
commitid	pxm6osuE99zELpkU;

1.63
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.62;
commitid	1xIYFpLYkPIXNEvU;

1.62
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.61;
commitid	1GCC1n59gejVg5Ih;

1.61
date	2016.10.13.10.01.49;	author nicm;	state Exp;
branches;
next	1.60;
commitid	AFoah05fh4b2e28V;

1.60
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.59;
commitid	TaZ3kOtGiWwKofka;

1.59
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.58;
commitid	P3qmSOx6KrDBsb0c;

1.58
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.57;
commitid	rE682EC14v4gpeFy;

1.57
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.56;
commitid	gsQkQsSyBCSmU9ax;

1.56
date	2015.12.13.17.55.14;	author nicm;	state Exp;
branches;
next	1.55;
commitid	Fyn4vblJtlp30z7Q;

1.55
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.54;
commitid	uzMkp8Z4FE6WB6s6;

1.54
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.53;
commitid	ns7JfXpW9TsHrnT3;

1.53
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.52;
commitid	MRfGAYPLeVqV46rT;

1.52
date	2015.11.20.22.02.54;	author nicm;	state Exp;
branches;
next	1.51;
commitid	U2ZeZzlhuEbtOCee;

1.51
date	2015.10.31.14.51.15;	author nicm;	state Exp;
branches;
next	1.50;
commitid	8V8pJWxJ4YGXnHNd;

1.50
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.49;
commitid	B5GekkO0CdWpFMrz;

1.49
date	2015.10.28.09.51.55;	author nicm;	state Exp;
branches;
next	1.48;
commitid	eGVGKzVVYKHFvkn4;

1.48
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.47;
commitid	89xhQafU35Q5MQVC;

1.47
date	2015.10.23.16.30.15;	author nicm;	state Exp;
branches;
next	1.46;
commitid	OfTVqENPXKuxOhhK;

1.46
date	2015.06.17.16.50.28;	author nicm;	state Exp;
branches;
next	1.45;
commitid	zbvekK98PFlsEYIW;

1.45
date	2015.02.05.10.32.39;	author nicm;	state Exp;
branches;
next	1.44;
commitid	7FaURucF5XXDhRDx;

1.44
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.43;
commitid	b1G1TVWY7l4KyoY6;

1.43
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.42;
commitid	RV1NOSXD1mUR8LDP;

1.42
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.41;
commitid	Gq8hgMoG3t1Wy1Zv;

1.41
date	2014.09.01.21.50.18;	author nicm;	state Exp;
branches;
next	1.40;
commitid	yvK8NJvd2XzXhKku;

1.40
date	2014.05.13.08.08.32;	author nicm;	state Exp;
branches;
next	1.39;

1.39
date	2014.04.17.13.02.59;	author nicm;	state Exp;
branches;
next	1.38;

1.38
date	2013.11.23.09.18.29;	author nicm;	state Exp;
branches;
next	1.37;

1.37
date	2013.11.22.20.58.36;	author nicm;	state Exp;
branches;
next	1.36;

1.36
date	2013.10.10.12.28.38;	author nicm;	state Exp;
branches;
next	1.35;

1.35
date	2013.10.10.12.26.35;	author nicm;	state Exp;
branches;
next	1.34;

1.34
date	2013.10.10.12.07.36;	author nicm;	state Exp;
branches;
next	1.33;

1.33
date	2013.10.10.12.00.21;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2013.03.25.11.44.00;	author nicm;	state Exp;
branches;
next	1.31;

1.31
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2013.03.24.09.27.20;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2012.12.09.23.17.35;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2012.10.15.21.53.30;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2012.03.17.22.35.09;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2012.03.04.20.52.05;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2012.03.04.20.50.53;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2012.01.31.15.52.21;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2012.01.20.19.54.07;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2011.12.09.16.28.18;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2011.01.01.01.33.07;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.27.02.56.59;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.21.01.27.46;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.27.11.46.58;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.19.21.27.47;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.10.10.02.48;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.21.15.32.06;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.13.20.11.58;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.13.17.47.46;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.07.06.58.49;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.67
log
@Add a helper function for the most common format_create/defaults/expand
pattern.
@
text
@/* $OpenBSD: cmd-new-window.c,v 1.66 2017/02/03 11:57:27 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Create a new window.
 */

#define NEW_WINDOW_TEMPLATE "#{session_name}:#{window_index}.#{pane_index}"

static enum cmd_retval	cmd_new_window_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_new_window_entry = {
	.name = "new-window",
	.alias = "neww",

	.args = { "ac:dF:kn:Pt:", 0, -1 },
	.usage = "[-adkP] [-c start-directory] [-F format] [-n window-name] "
		 CMD_TARGET_WINDOW_USAGE " [command]",

	.tflag = CMD_WINDOW_INDEX,

	.flags = 0,
	.exec = cmd_new_window_exec
};

static enum cmd_retval
cmd_new_window_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct session		*s = item->state.tflag.s;
	struct winlink		*wl = item->state.tflag.wl;
	struct client		*c = item->state.c;
	int			 idx = item->state.tflag.idx;
	const char		*cmd, *path, *template, *cwd, *to_free;
	char		       **argv, *cause, *cp;
	int			 argc, detached;
	struct environ_entry	*envent;
	struct cmd_find_state	 fs;

	if (args_has(args, 'a')) {
		if ((idx = winlink_shuffle_up(s, wl)) == -1) {
			cmdq_error(item, "no free window indexes");
			return (CMD_RETURN_ERROR);
		}
	}
	detached = args_has(args, 'd');

	if (args->argc == 0) {
		cmd = options_get_string(s->options, "default-command");
		if (cmd != NULL && *cmd != '\0') {
			argc = 1;
			argv = (char **)&cmd;
		} else {
			argc = 0;
			argv = NULL;
		}
	} else {
		argc = args->argc;
		argv = args->argv;
	}

	path = NULL;
	if (item->client != NULL && item->client->session == NULL)
		envent = environ_find(item->client->environ, "PATH");
	else
		envent = environ_find(s->environ, "PATH");
	if (envent != NULL)
		path = envent->value;

	to_free = NULL;
	if (args_has(args, 'c')) {
		cwd = args_get(args, 'c');
		to_free = cwd = format_single(item, cwd, c, s, NULL, NULL);
	} else if (item->client != NULL && item->client->session == NULL)
		cwd = item->client->cwd;
	else
		cwd = s->cwd;

	wl = NULL;
	if (idx != -1)
		wl = winlink_find_by_index(&s->windows, idx);
	if (wl != NULL && args_has(args, 'k')) {
		/*
		 * Can't use session_detach as it will destroy session if this
		 * makes it empty.
		 */
		notify_session_window("window-unlinked", s, wl->window);
		wl->flags &= ~WINLINK_ALERTFLAGS;
		winlink_stack_remove(&s->lastw, wl);
		winlink_remove(&s->windows, wl);

		/* Force select/redraw if current. */
		if (wl == s->curw) {
			detached = 0;
			s->curw = NULL;
		}
	}

	if (idx == -1)
		idx = -1 - options_get_number(s->options, "base-index");
	wl = session_new(s, args_get(args, 'n'), argc, argv, path, cwd, idx,
		&cause);
	if (wl == NULL) {
		cmdq_error(item, "create window failed: %s", cause);
		free(cause);
		goto error;
	}
	if (!detached) {
		session_select(s, wl->idx);
		server_redraw_session_group(s);
	} else
		server_status_session_group(s);

	if (args_has(args, 'P')) {
		if ((template = args_get(args, 'F')) == NULL)
			template = NEW_WINDOW_TEMPLATE;
		cp = format_single(item, template, c, s, wl, NULL);
		cmdq_print(item, "%s", cp);
		free(cp);
	}

	if (to_free != NULL)
		free((void *)to_free);

	cmd_find_from_winlink(&fs, s, wl);
	hooks_insert(s->hooks, item, &fs, "after-new-window");

	return (CMD_RETURN_NORMAL);

error:
	if (to_free != NULL)
		free((void *)to_free);
	return (CMD_RETURN_ERROR);
}
@


1.66
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.65 2016/10/16 22:06:40 nicm Exp $ */
a61 1
	struct format_tree	*ft;
d97 2
a98 4
		ft = format_create(item, FORMAT_NONE, 0);
		format_defaults(ft, c, s, NULL, NULL);
		cwd = to_free = format_expand(ft, args_get(args, 'c'));
		format_free(ft);
d142 1
a142 5

		ft = format_create(item, FORMAT_NONE, 0);
		format_defaults(ft, c, s, wl, NULL);

		cp = format_expand(ft, template);
a144 2

		format_free(ft);
@


1.65
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.64 2016/10/16 19:04:05 nicm Exp $ */
d98 1
a98 1
		ft = format_create(item, 0);
d146 1
a146 1
		ft = format_create(item, 0);
@


1.64
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.63 2016/10/16 17:55:14 nicm Exp $ */
d115 1
a115 1
		notify_window_unlinked(s, wl->window);
@


1.63
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.62 2016/10/13 22:48:51 nicm Exp $ */
d35 1
a35 1
static enum cmd_retval	cmd_new_window_exec(struct cmd *, struct cmd_q *);
d52 1
a52 1
cmd_new_window_exec(struct cmd *self, struct cmd_q *cmdq)
d55 4
a58 4
	struct session		*s = cmdq->state.tflag.s;
	struct winlink		*wl = cmdq->state.tflag.wl;
	struct client		*c = cmdq->state.c;
	int			 idx = cmdq->state.tflag.idx;
d68 1
a68 1
			cmdq_error(cmdq, "no free window indexes");
d89 2
a90 2
	if (cmdq->client != NULL && cmdq->client->session == NULL)
		envent = environ_find(cmdq->client->environ, "PATH");
d98 1
a98 1
		ft = format_create(cmdq, 0);
d102 2
a103 2
	} else if (cmdq->client != NULL && cmdq->client->session == NULL)
		cwd = cmdq->client->cwd;
d132 1
a132 1
		cmdq_error(cmdq, "create window failed: %s", cause);
d146 1
a146 1
		ft = format_create(cmdq, 0);
d150 1
a150 1
		cmdq_print(cmdq, "%s", cp);
d160 1
a160 1
	hooks_insert(s->hooks, cmdq, &fs, "after-new-window");
@


1.62
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.61 2016/10/13 10:01:49 nicm Exp $ */
d160 2
a161 2
	if (hooks_wait(s->hooks, cmdq, &fs, "after-new-window") == 0)
		return (CMD_RETURN_WAIT);
@


1.61
log
@Some improvements and bug fixes for hooks:

- Prepare the state again before the "after" hooks are run, because the
  command may have killed or moved windows.

- Use the hooks list from the newly prepared target, not the old hooks
  list (only matters for new-session really).

- Correctly detect an invalid current state and ignore it in
  cmd_find_target ("killw; swapw").

- Change neww, new, killp, killw, splitw, swapp, swapw to update the
  current state (used if no explicit target is given) to something more
  useful after they have finished. For example, neww changes it to the
  newly created window.

Hooks are still relatively new and primitive so there are likely to be
more changes to come.

Parts based on bug reports from Uwe Werler and Iblis Lin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.60 2016/10/10 21:51:39 nicm Exp $ */
d64 1
a155 2
	cmd_find_from_winlink(&cmdq->current, s, wl);

d158 4
@


1.60
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.59 2016/01/19 15:59:12 nicm Exp $ */
d154 2
@


1.59
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.58 2015/12/14 00:31:54 nicm Exp $ */
d35 1
a35 1
enum cmd_retval	cmd_new_window_exec(struct cmd *, struct cmd_q *);
d51 1
a51 1
enum cmd_retval
@


1.58
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.57 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.57
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.56 2015/12/13 17:55:14 nicm Exp $ */
d45 3
a47 1
	.flags = CMD_INDEX_T,
@


1.56
log
@Use struct cmd_find_state directly and remove cmd_state_flag, also
change so that winlink is set even if an index is too.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.55 2015/12/13 14:32:38 nicm Exp $ */
d38 9
a46 6
	"new-window", "neww",
	"ac:dF:kn:Pt:", 0, -1,
	"[-adkP] [-c start-directory] [-F format] [-n window-name] "
	CMD_TARGET_WINDOW_USAGE " [command]",
	CMD_INDEX_T,
	cmd_new_window_exec
@


1.55
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.54 2015/12/11 12:27:36 nicm Exp $ */
d42 1
a42 6
	/*
	 * Using PREP_CANFAIL here ensures that the wl is filled in
	 * regardless; making PREP_INDEX the thing we want -t to be used for
	 * in the specific case.
	 */
	CMD_INDEX_T|CMD_CANFAIL,
@


1.54
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.53 2015/12/08 08:34:18 nicm Exp $ */
d42 6
a47 1
	0,
d55 4
a58 2
	struct session		*s;
	struct winlink		*wl;
d61 1
a61 1
	int			 argc, idx, detached;
a65 3
		wl = cmd_find_window(cmdq, args_get(args, 't'), &s);
		if (wl == NULL)
			return (CMD_RETURN_ERROR);
a69 4
	} else {
		idx = cmd_find_index(cmdq, args_get(args, 't'), &s);
		if (idx == -2)
			return (CMD_RETURN_ERROR);
d98 1
a98 2
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s, NULL,
		    NULL);
d146 1
a146 2
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s, wl,
		    NULL);
@


1.53
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.52 2015/11/20 22:02:54 nicm Exp $ */
d97 1
a97 1
		ft = format_create(0);
d146 1
a146 1
		ft = format_create(0);
@


1.52
log
@Memory leaks and an uninitialized part of utf8_data, from Patrick Palka.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.51 2015/10/31 14:51:15 nicm Exp $ */
d97 1
a97 1
		ft = format_create();
d146 1
a146 1
		ft = format_create();
@


1.51
log
@Fall back silently to ~ or / rather than checking -c with access(), this
was the old behaviour.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.50 2015/10/31 08:13:58 nicm Exp $ */
d100 1
a100 1
		cwd = format_expand(ft, args_get(args, 'c'));
@


1.50
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.49 2015/10/28 09:51:55 nicm Exp $ */
a101 7

		if (access(cwd, X_OK) != 0) {
			free((void *)cwd);
			cmdq_error(cmdq, "bad working directory: %s",
			    strerror(errno));
			return (CMD_RETURN_ERROR);
		}
@


1.49
log
@Like options, move the environ struct into environ.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.48 2015/10/27 15:58:42 nicm Exp $ */
d52 1
a52 1
	const char		*cmd, *path, *template;
d54 1
a54 1
	int			 argc, idx, detached, cwd, fd = -1;
d95 1
d100 1
a100 1
		cp = format_expand(ft, args_get(args, 'c'));
d103 6
a108 11
		if (cp != NULL && *cp != '\0') {
			fd = open(cp, O_RDONLY|O_DIRECTORY);
			free(cp);
			if (fd == -1) {
				cmdq_error(cmdq, "bad working directory: %s",
				    strerror(errno));
				return (CMD_RETURN_ERROR);
			}
		} else
			free(cp);
		cwd = fd;
d164 2
a165 2
	if (fd != -1)
		close(fd);
d169 2
a170 2
	if (fd != -1)
		close(fd);
@


1.48
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.47 2015/10/23 16:30:15 nicm Exp $ */
d89 1
a89 1
		envent = environ_find(&cmdq->client->environ, "PATH");
d91 1
a91 1
		envent = environ_find(&s->environ, "PATH");
@


1.47
log
@Remove some unnecessary checks before free().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.46 2015/06/17 16:50:28 nicm Exp $ */
d74 1
a74 1
		cmd = options_get_string(&s->options, "default-command");
d139 1
a139 1
		idx = -1 - options_get_number(&s->options, "base-index");
@


1.46
log
@Move the shuffle code from new-window -a into a function and add a -a
flag for move-window too. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.45 2015/02/05 10:32:39 nicm Exp $ */
d110 1
a110 1
		} else if (cp != NULL)
@


1.45
log
@Remove a couple of now-unused variables.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.44 2015/02/05 10:29:43 nicm Exp $ */
d54 1
a54 1
	int			 argc, idx, last, detached, cwd, fd = -1;
d62 1
a62 8
		idx = wl->idx + 1;

		/* Find the next free index. */
		for (last = idx; last < INT_MAX; last++) {
			if (winlink_find_by_index(&s->windows, last) == NULL)
				break;
		}
		if (last == INT_MAX) {
a64 7
		}

		/* Move everything from last - 1 to idx up a bit. */
		for (; last > idx; last--) {
			wl = winlink_find_by_index(&s->windows, last - 1);
			server_link_window(s, wl, s, last, 0, 0, NULL);
			server_unlink_window(s, wl);
@


1.44
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.43 2014/10/20 23:35:28 nicm Exp $ */
a51 1
	struct client		*c;
@


1.43
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.42 2014/10/20 22:29:25 nicm Exp $ */
d112 2
a113 5
		if ((c = cmd_find_client(cmdq, NULL, 1)) != NULL)
			format_client(ft, c);
		format_session(ft, s);
		format_winlink(ft, s, s->curw);
		format_window_pane(ft, s->curw->window->active);
d173 2
a174 5
		if ((c = cmd_find_client(cmdq, NULL, 1)) != NULL)
			format_client(ft, c);
		format_session(ft, s);
		format_winlink(ft, s, wl);
		format_window_pane(ft, wl->window->active);
@


1.42
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.41 2014/09/01 21:50:18 nicm Exp $ */
d32 2
@


1.41
log
@Various minor style and spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.40 2014/05/13 08:08:32 nicm Exp $ */
a40 1
	NULL,
@


1.40
log
@If multiple arguments are given to new-session, new-window,
split-window, respawn-window or respawn-pane, pass them directly to
execvp() to help avoid quoting problems. One argument still goes to "sh
-c" like before. Requested by many over the years. Patch from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.39 2014/04/17 13:02:59 nicm Exp $ */
d91 1
a91 1
			argv = (char**)&cmd;
@


1.39
log
@Set PATH explicitly, either from client or session
environment. Previously it came from the session environment. From J
Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.38 2013/11/23 09:18:29 nicm Exp $ */
d37 1
a37 1
	"ac:dF:kn:Pt:", 0, 1,
d53 2
a54 2
	char			*cause, *cp;
	int			 idx, last, detached, cwd, fd = -1;
d87 1
a87 1
	if (args->argc == 0)
d89 11
a99 2
	else
		cmd = args->argv[0];
d157 2
a158 1
	wl = session_new(s, args_get(args, 'n'), cmd, path, cwd, idx, &cause);
@


1.38
log
@With -k, kill window after using it to work out -c path. Reported by
jmacristovao at gmail dot com.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.37 2013/11/22 20:58:36 nicm Exp $ */
d52 1
a52 1
	const char		*cmd, *template;
d56 1
d81 2
a82 1
		if ((idx = cmd_find_index(cmdq, args_get(args, 't'), &s)) == -2)
d92 8
d148 1
a148 1
	wl = session_new(s, args_get(args, 'n'), cmd, cwd, idx, &cause);
@


1.37
log
@Handle empty current directory more gracefully.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.36 2013/10/10 12:28:38 nicm Exp $ */
a84 20
	wl = NULL;
	if (idx != -1)
		wl = winlink_find_by_index(&s->windows, idx);
	if (wl != NULL && args_has(args, 'k')) {
		/*
		 * Can't use session_detach as it will destroy session if this
		 * makes it empty.
		 */
		notify_window_unlinked(s, wl->window);
		wl->flags &= ~WINLINK_ALERTFLAGS;
		winlink_stack_remove(&s->lastw, wl);
		winlink_remove(&s->windows, wl);

		/* Force select/redraw if current. */
		if (wl == s->curw) {
			detached = 0;
			s->curw = NULL;
		}
	}

d115 20
@


1.36
log
@Don't boke when figuring out working directory from configuration file.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.35 2013/10/10 12:26:35 nicm Exp $ */
d120 10
a129 7
		fd = open(cp, O_RDONLY|O_DIRECTORY);
		free(cp);
		if (fd == -1) {
			cmdq_error(cmdq, "bad working directory: %s",
			    strerror(errno));
			return (CMD_RETURN_ERROR);
		}
@


1.35
log
@Alter how tmux handles the working directory to internally use file
descriptors rather than strings.

- Each session still has a current working directory.

- New sessions still get their working directory from the client that
  created them or its attached session if any.

- New windows are created by default in the session working directory.

- The -c flag to new, neww, splitw allows the working directory to be
  overridden.

- The -c flag to attach let's the session working directory be changed.

- The default-path option has been removed.

To get the equivalent to default-path '.', do:

        bind c neww -c $PWD

To get the equivalent of default-path '~', do:

        bind c neww -c ~

This also changes the client identify protocol to be a set of messages rather
than one as well as some other changes that should make it easier to make
backwards-compatible protocol changes in future.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.34 2013/10/10 12:07:36 nicm Exp $ */
d128 1
a128 1
	} else if (cmdq->client->session == NULL)
@


1.34
log
@Support -c for new-session, based on code from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.33 2013/10/10 12:00:21 nicm Exp $ */
d21 2
d24 2
d52 1
a52 1
	const char		*cmd, *cwd, *template;
d54 1
a54 1
	int			 idx, last, detached;
d109 23
a131 1
	cwd = cmdq_default_path(cmdq, args_get(args, 'c'));
d139 1
a139 1
		return (CMD_RETURN_ERROR);
d165 2
d168 5
@


1.33
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.32 2013/03/25 11:44:00 nicm Exp $ */
d105 1
a105 1
	cwd = cmd_get_default_path(cmdq, args_get(args, 'c'));
@


1.32
log
@Add -P and -F to new-session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.31 2013/03/24 09:54:10 nicm Exp $ */
a36 1
	NULL,
@


1.31
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.30 2013/03/24 09:27:20 nicm Exp $ */
d49 2
a50 3
	const char		*cmd, *cwd;
	const char		*template;
	char			*cause;
a52 1
	char			*cp;
@


1.30
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.29 2012/12/09 23:17:35 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	cmd_new_window_exec(struct cmd *, struct cmd_ctx *);
d43 1
a43 1
cmd_new_window_exec(struct cmd *self, struct cmd_ctx *ctx)
d57 1
a57 1
		wl = cmd_find_window(ctx, args_get(args, 't'), &s);
d68 1
a68 1
			ctx->error(ctx, "no free window indexes");
d79 1
a79 1
		if ((idx = cmd_find_index(ctx, args_get(args, 't'), &s)) == -2)
d108 1
a108 1
	cwd = cmd_get_default_path(ctx, args_get(args, 'c'));
d114 1
a114 1
		ctx->error(ctx, "create window failed: %s", cause);
d129 2
a130 2
		if ((c = cmd_find_client(ctx, NULL, 1)) != NULL)
		    format_client(ft, c);
d136 1
a136 1
		ctx->print(ctx, "%s", cp);
@


1.29
log
@Use the CMD_*_USAGE defines consistently, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.28 2012/10/15 21:53:30 nicm Exp $ */
d129 1
a129 1
		if ((c = cmd_find_client(ctx, NULL)) != NULL)
@


1.28
log
@Fix some function prototypes from Helmut Tessarek.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.27 2012/08/14 08:51:53 nicm Exp $ */
d35 1
a35 1
	"[-t target-window] [command]",
@


1.27
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.26 2012/07/11 07:10:15 nicm Exp $ */
d29 1
a29 1
int	cmd_new_window_exec(struct cmd *, struct cmd_ctx *);
@


1.26
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.25 2012/07/10 11:53:01 nicm Exp $ */
d126 1
a126 1
			template = DEFAULT_PANE_INFO_TEMPLATE;
@


1.25
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.24 2012/05/22 11:35:37 nicm Exp $ */
d42 1
a42 1
int
d59 1
a59 1
			return (-1);
d69 1
a69 1
			return (-1);
d80 1
a80 1
			return (-1);
d116 1
a116 1
		return (-1);
d142 1
a142 1
	return (0);
@


1.24
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.23 2012/03/17 22:35:09 nicm Exp $ */
d115 1
a115 1
		xfree(cause);
d137 1
a137 1
		xfree(cp);
@


1.23
log
@Add notify hooks for various events, the functions are currently empty
stubs but will be filled in for control mode later. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.22 2012/03/04 20:52:05 nicm Exp $ */
d125 2
a126 3
		template = "#{session_name}:#{window_index}";
		if (args_has(args, 'F'))
			template = args_get(args, 'F');
d133 1
@


1.22
log
@free -> xfree.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.21 2012/03/04 20:50:53 nicm Exp $ */
d92 1
@


1.21
log
@Add -F format to new-window and split-window to use with the -P flag,
from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.20 2012/01/31 15:52:21 nicm Exp $ */
d136 1
a136 1
		free(cp);
@


1.20
log
@Provide defined ways to set the various default-path possibilities: ~
for home directory, . for server start directory, - for session start
directory and empty for the pane's working directory (the default). All
can also be used as part of a relative path (eg -/foo). Also provide -c
flags to neww and splitw to override default-path setting.

Based on a diff from sthen. ok sthen
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.19 2012/01/20 19:54:07 nicm Exp $ */
d33 3
a35 3
	"ac:dkn:Pt:", 0, 1,
	"[-adk] [-c start-directory] [-n window-name] [-t target-window] "
	"[command]",
d45 10
a54 6
	struct args	*args = self->args;
	struct session	*s;
	struct winlink	*wl;
	const char     	*cmd, *cwd;
	char		*cause;
	int		 idx, last, detached;
d123 18
a140 2
	if (args_has(args, 'P'))
		ctx->print(ctx, "%s:%u", s->name, wl->idx);
@


1.19
log
@Add some const and fix a warning.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.18 2011/12/09 16:28:18 nicm Exp $ */
d33 3
a35 2
	"adkn:Pt:", 0, 1,
	"[-adk] [-n window-name] [-t target-window] [command]",
d103 1
a103 1
	cwd = cmd_get_default_path(ctx);
@


1.18
log
@Change the way the working directory for new processes is discovered. If
default-path isn't empty, it is used. Otherwise:

1) If tmux neww is run from the command line, the working directory of the
   client is used.

2) Otherwise sysctl KERN_PROC_CWD is used to retrieve the current
   working directory of the process in the active pane.

3) If that fails, the directory where the session was created is used.

Support code by Romain Francois, OpenBSD specific bits by me.

Note this requires a recent userland and kernel with KERN_PROC_CWD.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.17 2011/01/04 00:42:47 nicm Exp $ */
d47 2
a48 1
	char		*cmd, *cwd, *cause;
@


1.17
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.16 2011/01/01 01:33:07 nicm Exp $ */
d101 1
a101 7
	cwd = options_get_string(&s->options, "default-path");
	if (*cwd == '\0') {
		if (ctx->cmdclient != NULL && ctx->cmdclient->cwd != NULL)
			cwd = ctx->cmdclient->cwd;
		else
			cwd = s->cwd;
	}
@


1.16
log
@Add a -P option to new-window and split-window to print the new window
or pane index in target form (useful to pass it into other commands).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.15 2010/06/27 02:56:59 nicm Exp $ */
a28 1
int	cmd_new_window_parse(struct cmd *, int, char **, char **);
a29 13
void	cmd_new_window_free(struct cmd *);
void	cmd_new_window_init(struct cmd *, int);
size_t	cmd_new_window_print(struct cmd *, char *, size_t);

struct cmd_new_window_data {
	char	*target;
	char	*name;
	char	*cmd;
	int	 flag_insert_after;
	int	 flag_detached;
	int	 flag_kill;
	int      flag_print;
};
d33 6
a38 7
	"[-adkP] [-n window-name] [-t target-window] [command]",
	0, "",
	cmd_new_window_init,
	cmd_new_window_parse,
	cmd_new_window_exec,
	cmd_new_window_free,
	cmd_new_window_print
a40 68
/* ARGSUSED */
void
cmd_new_window_init(struct cmd *self, unused int arg)
{
	struct cmd_new_window_data	 *data;

	self->data = data = xmalloc(sizeof *data);
	data->target = NULL;
	data->name = NULL;
	data->cmd = NULL;
	data->flag_insert_after = 0;
	data->flag_detached = 0;
	data->flag_kill = 0;
	data->flag_print = 0;
}

int
cmd_new_window_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_new_window_data	*data;
	int				 opt;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "adkt:n:P")) != -1) {
		switch (opt) {
		case 'a':
			data->flag_insert_after = 1;
			break;
		case 'd':
			data->flag_detached = 1;
			break;
		case 'k':
			data->flag_kill = 1;
			break;
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		case 'n':
			if (data->name == NULL)
				data->name = xstrdup(optarg);
			break;
		case 'P':
			data->flag_print = 1;
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 0 && argc != 1)
		goto usage;

	if (argc == 1)
		data->cmd = xstrdup(argv[0]);

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
}

d44 9
a52 11
	struct cmd_new_window_data	*data = self->data;
	struct session			*s;
	struct winlink			*wl;
	char				*cmd, *cwd, *cause;
	int				 idx, last;

	if (data == NULL)
		return (0);

	if (data->flag_insert_after) {
		if ((wl = cmd_find_window(ctx, data->target, &s)) == NULL)
d73 1
a73 1
		if ((idx = cmd_find_index(ctx, data->target, &s)) == -2)
d76 1
d81 1
a81 1
	if (wl != NULL && data->flag_kill) {
d92 1
a92 1
			data->flag_detached = 0;
d97 1
a97 2
	cmd = data->cmd;
	if (cmd == NULL)
d99 2
d111 1
a111 1
	wl = session_new(s, data->name, cmd, cwd, idx, &cause);
d117 1
a117 1
	if (!data->flag_detached) {
d123 1
a123 1
	if (data->flag_print)
a125 36
}

void
cmd_new_window_free(struct cmd *self)
{
	struct cmd_new_window_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	if (data->name != NULL)
		xfree(data->name);
	if (data->cmd != NULL)
		xfree(data->cmd);
	xfree(data);
}

size_t
cmd_new_window_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_new_window_data	*data = self->data;
	size_t				 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->flag_detached)
		off += xsnprintf(buf + off, len - off, " -d");
	if (off < len && data->flag_print)
		off += xsnprintf(buf + off, len - off, " -P");
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
	if (off < len && data->name != NULL)
		off += cmd_prarg(buf + off, len - off, " -n ", data->name);
	if (off < len && data->cmd != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->cmd);
	return (off);
@


1.15
log
@Store the current working directory in the session, change the default-path
option to default to empty and make that mean that the stored session CWD is
used.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.14 2010/06/21 01:27:46 nicm Exp $ */
d42 1
d47 1
a47 1
	"[-adk] [-n window-name] [-t target-window] [command]",
d69 1
d81 1
a81 1
	while ((opt = getopt(argc, argv, "adkt:n:")) != -1) {
d100 3
d206 2
d236 2
@


1.14
log
@Having a list of winlinks->alerts for each session is stupid, just store
the alert flags directly in the winlink itself.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.13 2010/03/27 11:46:58 nicm Exp $ */
d179 7
a185 4
	if (ctx->cmdclient == NULL || ctx->cmdclient->cwd == NULL)
		cwd = options_get_string(&s->options, "default-path");
	else
		cwd = ctx->cmdclient->cwd;
@


1.13
log
@-a flag to insert a window after an existing one, moving other windows
up necessary.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.12 2010/01/19 21:27:47 nicm Exp $ */
d165 1
a165 1
		session_alert_cancel(s, wl);
@


1.12
log
@Permit !, + and - to be used for window targets to specify last window (!), or
next and previous window by number (+ and -).

Also tidy an if in cmd-new-window.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.11 2009/12/03 22:50:10 nicm Exp $ */
d39 1
d46 1
a46 1
	"[-dk] [-n window-name] [-t target-window] [command]",
d65 1
d79 1
a79 1
	while ((opt = getopt(argc, argv, "dkt:n:")) != -1) {
d81 3
d126 1
a126 1
	int				 idx;
d131 25
a155 2
	if ((idx = cmd_find_index(ctx, data->target, &s)) == -2)
		return (-1);
@


1.11
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.10 2009/11/26 21:37:13 nicm Exp $ */
d132 13
a144 15
	if (wl != NULL) {
		if (data->flag_kill) {
			/*
			 * Can't use session_detach as it will destroy session
			 * if this makes it empty.
			 */
			session_alert_cancel(s, wl);
			winlink_stack_remove(&s->lastw, wl);
			winlink_remove(&s->windows, wl);

			/* Force select/redraw if current. */
			if (wl == s->curw) {
				data->flag_detached = 0;
				s->curw = NULL;
			}
@


1.10
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.9 2009/11/13 19:53:29 nicm Exp $ */
d169 1
a169 1
	} else	
@


1.9
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.8 2009/10/10 10:02:48 nicm Exp $ */
d54 1
@


1.8
log
@Add "grouped sessions" which have independent name, options, current window and
so on but where the linked windows are synchronized (ie creating, killing
windows and so on are mirrored between the sessions). A grouped session may be
created by passing -t to new-session.

Had this around for a while, tested by a couple of people.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.7 2009/09/21 15:32:06 nicm Exp $ */
d46 1
a46 1
	0, 0,
@


1.7
log
@Use KEYC_NONE constant instead of 0 on init.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.6 2009/08/13 20:11:58 nicm Exp $ */
d167 3
a169 3
		server_redraw_session(s);
	} else
		server_status_session(s);
@


1.6
log
@Add a base-index session option to specify the first index checked when looking
for an index for a new window.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.5 2009/07/26 12:58:44 nicm Exp $ */
d73 1
a73 1
	self->entry->init(self, 0);
@


1.5
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.4 2009/07/13 23:11:35 nicm Exp $ */
d157 2
@


1.4
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.3 2009/07/13 17:47:46 nicm Exp $ */
a30 2
void	cmd_new_window_send(struct cmd *, struct buffer *);
void	cmd_new_window_recv(struct cmd *, struct buffer *);
a49 2
	cmd_new_window_send,
	cmd_new_window_recv,
a169 23
}

void
cmd_new_window_send(struct cmd *self, struct buffer *b)
{
	struct cmd_new_window_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->target);
	cmd_send_string(b, data->name);
	cmd_send_string(b, data->cmd);
}

void
cmd_new_window_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_new_window_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->target = cmd_recv_string(b);
	data->name = cmd_recv_string(b);
	data->cmd = cmd_recv_string(b);
@


1.3
log
@Tidy up and improve target (-t) argument parsing:

- move the code back into cmd.c and merge with the existing functions where
  possible;
- accept "-tttyp0" as well as "-t/dev/ttyp0" for clients;
- when looking up session names, try an exact match first, and if that fails
  look for it as an fnmatch pattern and then as the start of a name - if more
  that one session matches an error is given; so if there is one session called
  "mysession", -tmysession, -tmysess, -tmysess* are equivalent but if there
  is also "mysession2", the last two are errors;
- similarly for windows, if the argument is not a valid index or exact window
  name match, try it against the window names as an fnmatch pattern and a
  prefix.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.2 2009/07/07 06:58:49 nicm Exp $ */
d48 1
a48 1
	0,
@


1.2
log
@Minor fix: look for default-path in the options for the specified session first
rather than just the global options. From Brandon Mercer, thanks.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-new-window.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d129 1
a129 2
	if (arg_parse_window(data->target, &s, &idx) != 0) {
		ctx->error(ctx, "bad window: %s", data->target);
a130 9
	}
	if (s == NULL)
		s = ctx->cursession;
	if (s == NULL)
		s = cmd_current_session(ctx);
	if (s == NULL) {
		ctx->error(ctx, "session not found: %s", data->target);
		return (-1);
	}
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d167 1
a167 1
		cwd = options_get_string(&global_options, "default-path");
@

