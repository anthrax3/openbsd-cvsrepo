head	1.30;
access;
symbols
	OPENBSD_6_2:1.30.0.6
	OPENBSD_6_2_BASE:1.30
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.4
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.30
date	2017.01.24.21.50.22;	author nicm;	state Exp;
branches;
next	1.29;
commitid	RhpGrb29XR7z4pyo;

1.29
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.28;
commitid	pxm6osuE99zELpkU;

1.28
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.27;
commitid	S3IpyYTkmviA6lfM;

1.27
date	2016.10.12.14.50.14;	author nicm;	state Exp;
branches;
next	1.26;
commitid	2r95FFcJGHvdfgBR;

1.26
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.25;
commitid	TaZ3kOtGiWwKofka;

1.25
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.24;
commitid	P3qmSOx6KrDBsb0c;

1.24
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.23;
commitid	gsQkQsSyBCSmU9ax;

1.23
date	2015.12.12.18.19.00;	author nicm;	state Exp;
branches;
next	1.22;
commitid	WD2k8ZkBSmp0TV5S;

1.22
date	2015.11.12.11.05.34;	author nicm;	state Exp;
branches;
next	1.21;
commitid	Ih1tdqtjpnEyfE8x;

1.21
date	2015.04.20.15.34.56;	author nicm;	state Exp;
branches;
next	1.20;
commitid	1fc4pMkRD7YjyQWP;

1.20
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.19;
commitid	Gq8hgMoG3t1Wy1Zv;

1.19
date	2014.05.14.06.45.35;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.10.11.08.06.03;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.10.10.12.00.24;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.05.05.17.40.47;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.01.21.11.12.13;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.08.16.09.37.48;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.10.21.28.47;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.11.20.54.06;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.23.17.50.56;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.28.17.05.10;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.24.14.52.47;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Fixed keys for choose mode, and remove the last mode keys bits.
@
text
@/* $OpenBSD: cmd-unbind-key.c,v 1.29 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "tmux.h"

/*
 * Unbind key from command.
 */

static enum cmd_retval	cmd_unbind_key_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_unbind_key_entry = {
	.name = "unbind-key",
	.alias = "unbind",

	.args = { "anT:", 0, 1 },
	.usage = "[-an] [-T key-table] key",

	.flags = CMD_AFTERHOOK,
	.exec = cmd_unbind_key_exec
};

static enum cmd_retval
cmd_unbind_key_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;
	key_code	 key;
	const char	*tablename;

	if (!args_has(args, 'a')) {
		if (args->argc != 1) {
			cmdq_error(item, "missing key");
			return (CMD_RETURN_ERROR);
		}
		key = key_string_lookup_string(args->argv[0]);
		if (key == KEYC_NONE || key == KEYC_UNKNOWN) {
			cmdq_error(item, "unknown key: %s", args->argv[0]);
			return (CMD_RETURN_ERROR);
		}
	} else {
		if (args->argc != 0) {
			cmdq_error(item, "key given with -a");
			return (CMD_RETURN_ERROR);
		}
		key = KEYC_UNKNOWN;
	}

	if (key == KEYC_UNKNOWN) {
		tablename = args_get(args, 'T');
		if (tablename == NULL) {
			key_bindings_remove_table("root");
			key_bindings_remove_table("prefix");
			return (CMD_RETURN_NORMAL);
		}
		if (key_bindings_get_table(tablename, 0) == NULL) {
			cmdq_error(item, "table %s doesn't exist", tablename);
			return (CMD_RETURN_ERROR);
		}
		key_bindings_remove_table(tablename);
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(args, 'T')) {
		tablename = args_get(args, 'T');
		if (key_bindings_get_table(tablename, 0) == NULL) {
			cmdq_error(item, "table %s doesn't exist", tablename);
			return (CMD_RETURN_ERROR);
		}
	} else if (args_has(args, 'n'))
		tablename = "root";
	else
		tablename = "prefix";
	key_bindings_remove(tablename, key);
	return (CMD_RETURN_NORMAL);
}
@


1.29
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.28 2016/10/14 22:14:22 nicm Exp $ */
a30 3
static enum cmd_retval	cmd_unbind_key_mode_table(struct cmd *,
			    struct cmdq_item *, key_code);

d35 2
a36 2
	.args = { "ant:T:", 0, 1 },
	.usage = "[-an] [-t mode-table] [-T key-table] key",
a66 3
	if (args_has(args, 't'))
		return (cmd_unbind_key_mode_table(self, item, key));

a92 32
	return (CMD_RETURN_NORMAL);
}

static enum cmd_retval
cmd_unbind_key_mode_table(struct cmd *self, struct cmdq_item *item,
    key_code key)
{
	struct args			*args = self->args;
	const char			*tablename;
	const struct mode_key_table	*mtab;
	struct mode_key_binding		*mbind, mtmp;

	tablename = args_get(args, 't');
	if ((mtab = mode_key_findtable(tablename)) == NULL) {
		cmdq_error(item, "unknown key table: %s", tablename);
		return (CMD_RETURN_ERROR);
	}

	if (key == KEYC_UNKNOWN) {
		while (!RB_EMPTY(mtab->tree)) {
			mbind = RB_ROOT(mtab->tree);
			RB_REMOVE(mode_key_tree, mtab->tree, mbind);
			free(mbind);
		}
		return (CMD_RETURN_NORMAL);
	}

	mtmp.key = key;
	if ((mbind = RB_FIND(mode_key_tree, mtab->tree, &mtmp)) != NULL) {
		RB_REMOVE(mode_key_tree, mtab->tree, mbind);
		free(mbind);
	}
@


1.28
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.27 2016/10/12 14:50:14 nicm Exp $ */
d29 4
a32 3
static enum cmd_retval	cmd_unbind_key_exec(struct cmd *, struct cmd_q *);
static enum cmd_retval	cmd_unbind_key_mode_table(struct cmd *, struct cmd_q *,
			    key_code);
d46 1
a46 1
cmd_unbind_key_exec(struct cmd *self, struct cmd_q *cmdq)
d54 1
a54 1
			cmdq_error(cmdq, "missing key");
d59 1
a59 1
			cmdq_error(cmdq, "unknown key: %s", args->argv[0]);
d64 1
a64 1
			cmdq_error(cmdq, "key given with -a");
d71 1
a71 1
		return (cmd_unbind_key_mode_table(self, cmdq, key));
d81 1
a81 1
			cmdq_error(cmdq, "table %s doesn't exist", tablename);
d91 1
a91 1
			cmdq_error(cmdq, "table %s doesn't exist", tablename);
d103 2
a104 1
cmd_unbind_key_mode_table(struct cmd *self, struct cmd_q *cmdq, key_code key)
d113 1
a113 1
		cmdq_error(cmdq, "unknown key table: %s", tablename);
@


1.27
log
@Drop the edit mode key tables and just use fixed key bindings for the
command prompt.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.26 2016/10/10 21:51:39 nicm Exp $ */
d40 1
a40 1
	.flags = 0,
@


1.26
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.25 2016/01/19 15:59:12 nicm Exp $ */
d37 2
a38 2
	.args = { "acnt:T:", 0, 1 },
	.usage = "[-acn] [-t mode-table] [-T key-table] key",
a124 1
	mtmp.mode = !!args_has(args, 'c');
@


1.25
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.24 2015/12/13 21:53:57 nicm Exp $ */
d29 3
a31 3
enum cmd_retval	cmd_unbind_key_exec(struct cmd *, struct cmd_q *);
enum cmd_retval	cmd_unbind_key_mode_table(struct cmd *, struct cmd_q *,
		    key_code);
d44 1
a44 1
enum cmd_retval
d101 1
a101 1
enum cmd_retval
@


1.24
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.23 2015/12/12 18:19:00 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.23
log
@Allow prefix and prefix2 to be set to None to disable (useful if you
would rather bind the prefix in the root table).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.22 2015/11/12 11:05:34 nicm Exp $ */
d34 8
a41 5
	"unbind-key", "unbind",
	"acnt:T:", 0, 1,
	"[-acn] [-t mode-table] [-T key-table] key",
	0,
	cmd_unbind_key_exec
@


1.22
log
@Support UTF-8 key bindings by expanding the key type from int to
uint64_t and converting UTF-8 to Unicode on input and the reverse on
output. (This allows key bindings, there are still omissions - the
largest being that the various prompts do not accept UTF-8.)
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.21 2015/04/20 15:34:56 nicm Exp $ */
d54 1
a54 1
		if (key == KEYC_NONE) {
d63 1
a63 1
		key = KEYC_NONE;
d69 1
a69 1
	if (key == KEYC_NONE) {
d112 1
a112 1
	if (key == KEYC_NONE) {
@


1.21
log
@Support for multiple key tables to commands to be bound to sequences of
keys. The default key bindings become the "prefix" table and -n the
"root" table. Keys may be bound in new tables with bind -T and
switch-client -T used to specify the table in which the next key should
be looked up. Based on a diff from Keith Amling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.20 2014/10/20 22:29:25 nicm Exp $ */
d29 3
a31 2
enum cmd_retval	 cmd_unbind_key_exec(struct cmd *, struct cmd_q *);
enum cmd_retval	 cmd_unbind_key_mode_table(struct cmd *, struct cmd_q *, int);
d45 1
a45 1
	int		 key;
d99 1
a99 1
cmd_unbind_key_mode_table(struct cmd *self, struct cmd_q *cmdq, int key)
@


1.20
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.19 2014/05/14 06:45:35 nicm Exp $ */
d34 2
a35 2
	"acnt:", 0, 1,
	"[-acn] [-t mode-table] key",
d43 3
a45 3
	struct args		*args = self->args;
	struct key_binding	*bd;
	int			 key;
d69 5
a73 3
		while (!RB_EMPTY(&key_bindings)) {
			bd = RB_ROOT(&key_bindings);
			key_bindings_remove(bd->key);
d75 5
d83 11
a93 3
	if (!args_has(args, 'n'))
		key |= KEYC_PREFIX;
	key_bindings_remove(key);
@


1.19
log
@Change key-table to mode-table to allow for some future work. From Keith
Amling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.18 2013/10/11 08:06:03 nicm Exp $ */
a36 1
	NULL,
@


1.18
log
@Remove stray return, from Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.17 2013/10/10 12:00:24 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_unbind_key_table(struct cmd *, struct cmd_q *, int);
d35 1
a35 1
	"[-acn] [-t key-table] key",
d67 1
a67 1
		return (cmd_unbind_key_table(self, cmdq, key));
d84 1
a84 1
cmd_unbind_key_table(struct cmd *self, struct cmd_q *cmdq, int key)
@


1.17
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.16 2013/03/24 09:54:10 nicm Exp $ */
a52 1
		return (CMD_RETURN_ERROR);
@


1.16
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.15 2012/07/11 07:10:15 nicm Exp $ */
a28 1
enum cmd_retval	 cmd_unbind_key_check(struct args *);
a37 1
	cmd_unbind_key_check,
a41 10
cmd_unbind_key_check(struct args *args)
{
	if (args_has(args, 'a') && args->argc != 0)
		return (CMD_RETURN_ERROR);
	if (!args_has(args, 'a') && args->argc != 1)
		return (CMD_RETURN_ERROR);
	return (CMD_RETURN_NORMAL);
}

enum cmd_retval
d49 5
d59 5
a63 1
	} else
d65 1
@


1.15
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.14 2012/07/10 11:53:01 nicm Exp $ */
d30 2
a31 2
enum cmd_retval	 cmd_unbind_key_exec(struct cmd *, struct cmd_ctx *);
enum cmd_retval	 cmd_unbind_key_table(struct cmd *, struct cmd_ctx *, int);
d54 1
a54 1
cmd_unbind_key_exec(struct cmd *self, unused struct cmd_ctx *ctx)
d63 1
a63 1
			ctx->error(ctx, "unknown key: %s", args->argv[0]);
d70 1
a70 1
		return (cmd_unbind_key_table(self, ctx, key));
d87 1
a87 1
cmd_unbind_key_table(struct cmd *self, struct cmd_ctx *ctx, int key)
d96 1
a96 1
		ctx->error(ctx, "unknown key table: %s", tablename);
@


1.14
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.13 2012/05/05 17:40:47 nicm Exp $ */
d29 3
a31 4
int	cmd_unbind_key_check(struct args *);
int	cmd_unbind_key_exec(struct cmd *, struct cmd_ctx *);

int	cmd_unbind_key_table(struct cmd *, struct cmd_ctx *, int);
d43 1
a43 1
int
d47 1
a47 1
		return (-1);
d49 2
a50 2
		return (-1);
	return (0);
d53 1
a53 1
int
d64 1
a64 1
			return (-1);
d77 1
a77 1
		return (0);
d83 1
a83 1
	return (0);
d86 1
a86 1
int
d97 1
a97 1
		return (-1);
d106 1
a106 1
		return (0);
d115 1
a115 1
	return (0);
@


1.13
log
@Make unbind-key -a work with -t, based on a diff from Kazuhiko Sakaguchi.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.12 2012/01/21 11:12:13 nicm Exp $ */
d21 2
d105 1
a105 1
			xfree(mbind);
d114 1
a114 1
		xfree(mbind);
@


1.12
log
@Use RB trees not SPLAY.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.11 2011/08/16 09:37:48 nicm Exp $ */
d45 2
a46 2
	if (args_has(args, 'a') && (args->argc != 0 || args_has(args, 't')))
	    return (-1);
d59 13
a71 1
	if (args_has(args, 'a')) {
a78 9
	key = key_string_lookup_string(args->argv[0]);
	if (key == KEYC_NONE) {
		ctx->error(ctx, "unknown key: %s", args->argv[0]);
		return (-1);
	}

	if (args_has(args, 't'))
		return (cmd_unbind_key_table(self, ctx, key));

d97 9
@


1.11
log
@Use key_bindings_remove for unbind-key -a to allow it to work from key
bindings. From "miaout17" SF bug 3392063.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.10 2011/01/10 21:28:47 nicm Exp $ */
d60 2
a61 2
		while (!SPLAY_EMPTY(&key_bindings)) {
			bd = SPLAY_ROOT(&key_bindings);
d98 2
a99 2
	if ((mbind = SPLAY_FIND(mode_key_tree, mtab->tree, &mtmp)) != NULL) {
		SPLAY_REMOVE(mode_key_tree, mtab->tree, mbind);
@


1.10
log
@unbind-key -a is allowed no arguments.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.9 2011/01/04 00:42:47 nicm Exp $ */
d62 1
a62 3
			SPLAY_REMOVE(key_bindings, &key_bindings, bd);
			cmd_list_free(bd->cmdlist);
			xfree(bd);
@


1.9
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.8 2010/11/11 20:54:06 nicm Exp $ */
d34 1
a34 1
	"acnt:", 1, 1,
d46 2
@


1.8
log
@Flag to flush all key bindings from Rob Paisley.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.7 2010/01/23 17:50:56 nicm Exp $ */
d27 1
a27 1
int	cmd_unbind_key_parse(struct cmd *, int, char **, char **);
a28 1
void	cmd_unbind_key_free(struct cmd *);
d30 1
a30 9
int	cmd_unbind_key_table(struct cmd *, struct cmd_ctx *);

struct cmd_unbind_key_data {
	int	key;

	int	flag_all;
	int	command_key;
	char   *tablename;
};
d34 1
d36 1
a36 1
	0, "",
d38 2
a39 4
	cmd_unbind_key_parse,
	cmd_unbind_key_exec,
	cmd_unbind_key_free,
	NULL
d43 1
a43 1
cmd_unbind_key_parse(struct cmd *self, int argc, char **argv, char **cause)
d45 2
a46 44
	struct cmd_unbind_key_data	*data;
	int				 opt, no_prefix = 0;

	self->data = data = xmalloc(sizeof *data);
	data->flag_all = 0;
	data->command_key = 0;
	data->tablename = NULL;

	while ((opt = getopt(argc, argv, "acnt:")) != -1) {
		switch (opt) {
		case 'a':
			data->flag_all = 1;
			break;
		case 'c':
			data->command_key = 1;
			break;
		case 'n':
			no_prefix = 1;
			break;
		case 't':
			if (data->tablename == NULL)
				data->tablename = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (data->flag_all && (argc != 0 || data->tablename))
		goto usage;
	if (!data->flag_all && argc != 1)
		goto usage;

	if (!data->flag_all) {
		data->key = key_string_lookup_string(argv[0]);
		if (data->key == KEYC_NONE) {
			xasprintf(cause, "unknown key: %s", argv[0]);
			goto error;
		}
		if (!no_prefix)
			data->key |= KEYC_PREFIX;
	}

a47 7

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

error:
	xfree(data);
	return (-1);
d53 3
a55 2
	struct cmd_unbind_key_data	*data = self->data;
	struct key_binding		*bd;
d57 1
a57 3
	if (data == NULL)
		return (0);
	if (data->flag_all) {
d64 2
a65 3
	} else {
		if (data->tablename != NULL)
			return (cmd_unbind_key_table(self, ctx));
d67 4
a70 1
		key_bindings_remove(data->key);
d73 6
d83 1
a83 1
cmd_unbind_key_table(struct cmd *self, struct cmd_ctx *ctx)
d85 2
a86 1
	struct cmd_unbind_key_data	*data = self->data;
d90 3
a92 2
	if ((mtab = mode_key_findtable(data->tablename)) == NULL) {
		ctx->error(ctx, "unknown key table: %s", data->tablename);
d96 2
a97 2
	mtmp.key = data->key & ~KEYC_PREFIX;
	mtmp.mode = data->command_key ? 1 : 0;
a102 10
}

void
cmd_unbind_key_free(struct cmd *self)
{
	struct cmd_unbind_key_data	*data = self->data;

	if (data->tablename != NULL)
		xfree(data->tablename);
	xfree(data);
@


1.7
log
@Don't leak if arguments appear multiple times, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.6 2009/11/13 19:53:29 nicm Exp $ */
d36 1
d43 1
a43 1
	"[-cn] [-t key-table] key",
d59 1
d63 1
a63 1
	while ((opt = getopt(argc, argv, "cnt:")) != -1) {
d65 3
d84 3
a86 1
	if (argc != 1)
d89 8
a96 3
	if ((data->key = key_string_lookup_string(argv[0])) == KEYC_NONE) {
		xasprintf(cause, "unknown key: %s", argv[0]);
		goto error;
a97 2
	if (!no_prefix)
		data->key |= KEYC_PREFIX;
d113 1
d117 10
a126 2
	if (data->tablename != NULL)
		return (cmd_unbind_key_table(self, ctx));
d128 2
a129 1
	key_bindings_remove(data->key);
@


1.6
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.5 2009/07/28 17:05:10 nicm Exp $ */
d70 2
a71 1
			data->tablename = xstrdup(optarg);
@


1.5
log
@Final pieces of mode key rebinding: bind-key and unbind-key now accept a -t
argument to modify a table.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.4 2009/07/26 12:58:44 nicm Exp $ */
d43 1
a43 1
	0, 0,
@


1.4
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.3 2009/07/24 14:52:47 nicm Exp $ */
d31 2
d35 3
d42 1
a42 1
	"[-n] key",
d58 2
d61 1
a61 1
	while ((opt = getopt(argc, argv, "n")) != -1) {
d63 3
d69 3
d105 2
d113 21
d139 2
@


1.3
log
@Permit commands to be bound to key presses without the prefix key first. The
new -n flag to bind-key and unbind-key sets or removes these bindings, and
list-key shows them in []s.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
a28 2
void	cmd_unbind_key_send(struct cmd *, struct buffer *);
void	cmd_unbind_key_recv(struct cmd *, struct buffer *);
a41 2
	cmd_unbind_key_send,
	cmd_unbind_key_recv,
a95 17
}

void
cmd_unbind_key_send(struct cmd *self, struct buffer *b)
{
	struct cmd_unbind_key_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
}

void
cmd_unbind_key_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_unbind_key_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-unbind-key.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d39 1
a39 1
	"key",
d54 1
a54 1
	int				 opt;
d58 1
a58 1
	while ((opt = getopt(argc, argv, "")) != -1) {
d60 3
d76 2
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d40 1
a40 1
	0,
@

