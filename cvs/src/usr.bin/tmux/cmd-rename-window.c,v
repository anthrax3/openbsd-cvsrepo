head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.2
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.18;
commitid	pxm6osuE99zELpkU;

1.18
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.17;
commitid	S3IpyYTkmviA6lfM;

1.17
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.16;
commitid	TaZ3kOtGiWwKofka;

1.16
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.15;
commitid	P3qmSOx6KrDBsb0c;

1.15
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.14;
commitid	rE682EC14v4gpeFy;

1.14
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.13;
commitid	gsQkQsSyBCSmU9ax;

1.13
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.12;
commitid	uzMkp8Z4FE6WB6s6;

1.12
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.11;
commitid	89xhQafU35Q5MQVC;

1.11
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.10;
commitid	Gq8hgMoG3t1Wy1Zv;

1.10
date	2013.10.10.12.00.22;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2012.02.02.00.10.12;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.10.10.02.48;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@/* $OpenBSD: cmd-rename-window.c,v 1.18 2016/10/14 22:14:22 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "tmux.h"

/*
 * Rename a window.
 */

static enum cmd_retval	cmd_rename_window_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_rename_window_entry = {
	.name = "rename-window",
	.alias = "renamew",

	.args = { "t:", 1, 1 },
	.usage = CMD_TARGET_WINDOW_USAGE " new-name",

	.tflag = CMD_WINDOW,

	.flags = CMD_AFTERHOOK,
	.exec = cmd_rename_window_exec
};

static enum cmd_retval
cmd_rename_window_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;
	struct winlink	*wl = item->state.tflag.wl;

	window_set_name(wl->window, args->argv[0]);
	options_set_number(wl->window->options, "automatic-rename", 0);

	server_status_window(wl->window);

	return (CMD_RETURN_NORMAL);
}
@


1.18
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.17 2016/10/10 21:51:39 nicm Exp $ */
d29 2
a30 1
static enum cmd_retval	 cmd_rename_window_exec(struct cmd *, struct cmd_q *);
d46 1
a46 1
cmd_rename_window_exec(struct cmd *self, struct cmd_q *cmdq)
d49 1
a49 1
	struct winlink	*wl = cmdq->state.tflag.wl;
@


1.17
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.16 2016/01/19 15:59:12 nicm Exp $ */
d40 1
a40 1
	.flags = 0,
@


1.16
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.15 2015/12/14 00:31:54 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	 cmd_rename_window_exec(struct cmd *, struct cmd_q *);
d44 1
a44 1
enum cmd_retval
@


1.15
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.14 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.14
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.13 2015/12/13 14:32:38 nicm Exp $ */
d38 3
a40 1
	.flags = CMD_WINDOW_T,
@


1.13
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.12 2015/10/27 15:58:42 nicm Exp $ */
d32 8
a39 5
	"rename-window", "renamew",
	"t:", 1, 1,
	CMD_TARGET_WINDOW_USAGE " new-name",
	CMD_WINDOW_T,
	cmd_rename_window_exec
@


1.12
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.11 2014/10/20 22:29:25 nicm Exp $ */
d35 1
a35 1
	0,
d43 1
a43 5
	struct session	*s;
	struct winlink	*wl;

	if ((wl = cmd_find_window(cmdq, args_get(args, 't'), &s)) == NULL)
		return (CMD_RETURN_ERROR);
@


1.11
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.10 2013/10/10 12:00:22 nicm Exp $ */
d50 1
a50 1
	options_set_number(&wl->window->options, "automatic-rename", 0);
@


1.10
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.9 2013/03/24 09:54:10 nicm Exp $ */
a35 1
	NULL,
@


1.9
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.8 2012/07/11 07:10:15 nicm Exp $ */
a35 1
	NULL,
@


1.8
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.7 2012/02/02 00:10:12 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	 cmd_rename_window_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
cmd_rename_window_exec(struct cmd *self, struct cmd_ctx *ctx)
d48 1
a48 1
	if ((wl = cmd_find_window(ctx, args_get(args, 't'), &s)) == NULL)
@


1.7
log
@Move window name changes into wrapper function window_set_name, from
George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.6 2011/01/04 00:42:47 nicm Exp $ */
d29 1
a29 1
int	cmd_rename_window_exec(struct cmd *, struct cmd_ctx *);
d41 1
a41 1
int
d49 1
a49 1
		return (-1);
d56 1
a56 1
	return (0);
@


1.6
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.5 2009/11/13 19:53:29 nicm Exp $ */
d51 1
a51 2
	xfree(wl->window->name);
	wl->window->name = xstrdup(args->argv[0]);
@


1.5
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.4 2009/10/10 10:02:48 nicm Exp $ */
d33 1
d35 4
a38 6
	CMD_ARG1, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_rename_window_exec,
	cmd_target_free,
	cmd_target_print
d44 3
a46 3
	struct cmd_target_data	*data = self->data;
	struct session		*s;
	struct winlink		*wl;
d48 1
a48 1
	if ((wl = cmd_find_window(ctx, data->target, &s)) == NULL)
d52 1
a52 1
	wl->window->name = xstrdup(data->arg);
@


1.4
log
@Add "grouped sessions" which have independent name, options, current window and
so on but where the linked windows are synchronized (ie creating, killing
windows and so on are mirrored between the sessions). A grouped session may be
created by passing -t to new-session.

Had this around for a while, tested by a couple of people.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d34 1
a34 1
	CMD_ARG1, 0,
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d56 1
a56 1
	server_status_session(s);
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-rename-window.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a37 2
	cmd_target_send,
	cmd_target_recv,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
	CMD_ARG1,
@

