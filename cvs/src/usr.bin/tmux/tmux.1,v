head	1.547;
access;
symbols
	OPENBSD_6_1:1.539.0.4
	OPENBSD_6_1_BASE:1.539
	OPENBSD_6_0:1.491.0.2
	OPENBSD_6_0_BASE:1.491
	OPENBSD_5_9:1.479.0.2
	OPENBSD_5_9_BASE:1.479
	OPENBSD_5_8:1.446.0.4
	OPENBSD_5_8_BASE:1.446
	OPENBSD_5_7:1.413.0.2
	OPENBSD_5_7_BASE:1.413
	OPENBSD_5_6:1.397.0.4
	OPENBSD_5_6_BASE:1.397
	OPENBSD_5_5:1.381.0.4
	OPENBSD_5_5_BASE:1.381
	OPENBSD_5_4:1.364.0.2
	OPENBSD_5_4_BASE:1.364
	OPENBSD_5_3:1.313.0.2
	OPENBSD_5_3_BASE:1.313
	OPENBSD_5_2:1.300.0.2
	OPENBSD_5_2_BASE:1.300
	OPENBSD_5_1_BASE:1.274
	OPENBSD_5_1:1.274.0.2
	OPENBSD_5_0:1.241.0.2
	OPENBSD_5_0_BASE:1.241
	OPENBSD_4_9:1.210.0.2
	OPENBSD_4_9_BASE:1.210
	OPENBSD_4_8:1.182.0.2
	OPENBSD_4_8_BASE:1.182
	OPENBSD_4_7:1.155.0.2
	OPENBSD_4_7_BASE:1.155
	OPENBSD_4_6:1.17.0.4
	OPENBSD_4_6_BASE:1.17;
locks; strict;
comment	@.\" @;


1.547
date	2017.05.04.07.16.43;	author nicm;	state Exp;
branches;
next	1.546;
commitid	LkEFVZkMwx5R0ZCg;

1.546
date	2017.05.03.05.53.34;	author nicm;	state Exp;
branches;
next	1.545;
commitid	koR7M5sfoImvwKg7;

1.545
date	2017.04.28.13.39.59;	author nicm;	state Exp;
branches;
next	1.544;
commitid	wM7VSarB52WXuf4x;

1.544
date	2017.04.22.06.15.22;	author nicm;	state Exp;
branches;
next	1.543;
commitid	bjZc6nDD41o8X1wH;

1.543
date	2017.04.20.09.20.22;	author nicm;	state Exp;
branches;
next	1.542;
commitid	Mq5Wq9pThOn7RhSJ;

1.542
date	2017.04.19.06.52.27;	author nicm;	state Exp;
branches;
next	1.541;
commitid	J75yaiuz8O54rLmn;

1.541
date	2017.04.18.15.44.17;	author nicm;	state Exp;
branches;
next	1.540;
commitid	bYu9iw9cp97E6crN;

1.540
date	2017.04.05.10.49.46;	author nicm;	state Exp;
branches;
next	1.539;
commitid	1mjoRYvghWl25dW0;

1.539
date	2017.03.22.07.16.54;	author nicm;	state Exp;
branches;
next	1.538;
commitid	YlKgZy2nlCejSvNQ;

1.538
date	2017.02.15.08.47.55;	author nicm;	state Exp;
branches;
next	1.537;
commitid	HvhLOqHZO7pOua71;

1.537
date	2017.02.10.12.59.18;	author nicm;	state Exp;
branches;
next	1.536;
commitid	P7xSjiy29fJgUATs;

1.536
date	2017.02.09.15.04.53;	author nicm;	state Exp;
branches;
next	1.535;
commitid	LotTNNNN3Vrlt9Fn;

1.535
date	2017.02.09.14.49.00;	author nicm;	state Exp;
branches;
next	1.534;
commitid	0gArCVczPSxI9Hut;

1.534
date	2017.02.09.12.00.42;	author nicm;	state Exp;
branches;
next	1.533;
commitid	MTqCfUzY2bP3tSZE;

1.533
date	2017.02.01.09.55.07;	author nicm;	state Exp;
branches;
next	1.532;
commitid	FpFenXzt7GohJ3lb;

1.532
date	2017.01.29.22.10.55;	author nicm;	state Exp;
branches;
next	1.531;
commitid	P6nbLNe6ZJY6Y7CM;

1.531
date	2017.01.25.14.24.54;	author nicm;	state Exp;
branches;
next	1.530;
commitid	lN9aftWGvZoDBI6a;

1.530
date	2017.01.24.21.50.22;	author nicm;	state Exp;
branches;
next	1.529;
commitid	RhpGrb29XR7z4pyo;

1.529
date	2017.01.24.20.15.32;	author nicm;	state Exp;
branches;
next	1.528;
commitid	OhhGixV64mirqDj8;

1.528
date	2017.01.24.20.05.15;	author nicm;	state Exp;
branches;
next	1.527;
commitid	DW4XRbRG0YgMui4Q;

1.527
date	2017.01.24.20.01.34;	author nicm;	state Exp;
branches;
next	1.526;
commitid	yYYoY5hfcSsA6ZUD;

1.526
date	2017.01.24.19.53.37;	author nicm;	state Exp;
branches;
next	1.525;
commitid	APEyI6NiCN6S4KhZ;

1.525
date	2017.01.13.10.12.12;	author nicm;	state Exp;
branches;
next	1.524;
commitid	bQ0icVBejLnBpF27;

1.524
date	2017.01.11.16.09.57;	author nicm;	state Exp;
branches;
next	1.523;
commitid	6XANvQoNZoJEjE5C;

1.523
date	2017.01.10.10.08.59;	author nicm;	state Exp;
branches;
next	1.522;
commitid	vLLEPzI4IDHTqxAM;

1.522
date	2017.01.10.07.55.48;	author jmc;	state Exp;
branches;
next	1.521;
commitid	PehhgcE8w7ZMMNEW;

1.521
date	2017.01.09.21.28.56;	author nicm;	state Exp;
branches;
next	1.520;
commitid	UDOMieRU3RCD0teg;

1.520
date	2017.01.09.21.03.25;	author nicm;	state Exp;
branches;
next	1.519;
commitid	ZwBJ1q637vKZayHI;

1.519
date	2017.01.09.19.27.00;	author nicm;	state Exp;
branches;
next	1.518;
commitid	OxA55NgX2OxpYMnz;

1.518
date	2017.01.07.15.40.23;	author nicm;	state Exp;
branches;
next	1.517;
commitid	WTx4Iphb3c3OLuAs;

1.517
date	2017.01.06.11.57.03;	author nicm;	state Exp;
branches;
next	1.516;
commitid	m6HBAjiRCa66sywZ;

1.516
date	2016.11.29.12.54.46;	author nicm;	state Exp;
branches;
next	1.515;
commitid	GLcwaWp6bmgXUN5A;

1.515
date	2016.11.24.13.38.44;	author nicm;	state Exp;
branches;
next	1.514;
commitid	xEmWv4VOf7iteHdC;

1.514
date	2016.11.15.09.53.23;	author nicm;	state Exp;
branches;
next	1.513;
commitid	JNIvRleVGan7dplH;

1.513
date	2016.10.21.13.51.59;	author nicm;	state Exp;
branches;
next	1.512;
commitid	wdi3gMqHqz7D96vm;

1.512
date	2016.10.18.19.25.26;	author nicm;	state Exp;
branches;
next	1.511;
commitid	iBfqqMw45DWUAwnj;

1.511
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.510;
commitid	j0FZs70gSPCmpqWI;

1.510
date	2016.10.16.19.55.52;	author nicm;	state Exp;
branches;
next	1.509;
commitid	UQUdd0Sr2dxivaNh;

1.509
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.508;
commitid	1xIYFpLYkPIXNEvU;

1.508
date	2016.10.15.12.34.02;	author jmc;	state Exp;
branches;
next	1.507;
commitid	WCGeJNSfhq092zPK;

1.507
date	2016.10.15.00.09.30;	author nicm;	state Exp;
branches;
next	1.506;
commitid	X2XXRCKiqkzI3Ni0;

1.506
date	2016.10.14.17.40.47;	author nicm;	state Exp;
branches;
next	1.505;
commitid	4gaPYp7slvp3H9Qx;

1.505
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.504;
commitid	1GCC1n59gejVg5Ih;

1.504
date	2016.10.13.21.37.03;	author nicm;	state Exp;
branches;
next	1.503;
commitid	ZCNRzNzyBFHddYXj;

1.503
date	2016.10.13.20.09.19;	author nicm;	state Exp;
branches;
next	1.502;
commitid	iTabzV2TbVxTmNJ2;

1.502
date	2016.10.13.09.06.48;	author nicm;	state Exp;
branches;
next	1.501;
commitid	mOR5S4BUJvvJ51WS;

1.501
date	2016.10.12.15.26.37;	author nicm;	state Exp;
branches;
next	1.500;
commitid	egGk3cDHeazu3VVH;

1.500
date	2016.10.12.14.50.14;	author nicm;	state Exp;
branches;
next	1.499;
commitid	2r95FFcJGHvdfgBR;

1.499
date	2016.10.12.13.03.27;	author nicm;	state Exp;
branches;
next	1.498;
commitid	eul7q5vzLp6bFmDk;

1.498
date	2016.10.11.09.30.36;	author nicm;	state Exp;
branches;
next	1.497;
commitid	OThpNjT1frpnaa0G;

1.497
date	2016.10.11.07.23.34;	author nicm;	state Exp;
branches;
next	1.496;
commitid	leUN1UeapgUoieJj;

1.496
date	2016.10.03.20.58.39;	author nicm;	state Exp;
branches;
next	1.495;
commitid	aoEe2Q8xxkwLRHCN;

1.495
date	2016.09.12.15.40.58;	author nicm;	state Exp;
branches;
next	1.494;
commitid	FmdCsJJj2mhuDrZn;

1.494
date	2016.09.04.17.37.06;	author nicm;	state Exp;
branches;
next	1.493;
commitid	D34i60nsvTyoBV4q;

1.493
date	2016.08.22.20.07.58;	author nicm;	state Exp;
branches;
next	1.492;
commitid	O35jGM3wBiP9cVQ8;

1.492
date	2016.08.03.09.08.40;	author nicm;	state Exp;
branches;
next	1.491;
commitid	mcT34UJzbMZMhdlX;

1.491
date	2016.06.16.10.55.47;	author nicm;	state Exp;
branches;
next	1.490;
commitid	iwpkepU9NO5jIk1m;

1.490
date	2016.06.15.14.43.06;	author nicm;	state Exp;
branches;
next	1.489;
commitid	bYMeeVJxKgqfni4i;

1.489
date	2016.06.15.08.54.11;	author nicm;	state Exp;
branches;
next	1.488;
commitid	o2YWCFvBCkybpqVu;

1.488
date	2016.05.12.16.05.33;	author tim;	state Exp;
branches;
next	1.487;
commitid	T3Sd9myvNE2f79sY;

1.487
date	2016.05.01.11.46.12;	author nicm;	state Exp;
branches;
next	1.486;
commitid	pV7NUrITfo2ZCFlD;

1.486
date	2016.04.29.20.57.10;	author jmc;	state Exp;
branches;
next	1.485;
commitid	a0wvtZgKJUGnWVwr;

1.485
date	2016.04.29.15.58.52;	author nicm;	state Exp;
branches;
next	1.484;
commitid	pabDz6cDSzLkWSlv;

1.484
date	2016.04.29.15.00.48;	author nicm;	state Exp;
branches;
next	1.483;
commitid	z5NrpOKjZoYhx6Qr;

1.483
date	2016.04.29.14.05.24;	author nicm;	state Exp;
branches;
next	1.482;
commitid	wZaePCOma60t58oN;

1.482
date	2016.04.27.09.39.09;	author nicm;	state Exp;
branches;
next	1.481;
commitid	0bQ3quXnMplDQUsb;

1.481
date	2016.03.18.07.28.27;	author nicm;	state Exp;
branches;
next	1.480;
commitid	XKqoAZz4Rl0wxJYw;

1.480
date	2016.03.01.11.58.45;	author nicm;	state Exp;
branches;
next	1.479;
commitid	3trwrDCSjpclk4Bz;

1.479
date	2016.01.31.09.54.46;	author nicm;	state Exp;
branches;
next	1.478;
commitid	oAWyhU18KzfHWLS1;

1.478
date	2016.01.29.11.13.56;	author nicm;	state Exp;
branches;
next	1.477;
commitid	Rew2ppunRTmAT23L;

1.477
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.476;
commitid	P3qmSOx6KrDBsb0c;

1.476
date	2016.01.16.00.36.53;	author nicm;	state Exp;
branches;
next	1.475;
commitid	416B5CZCT2xuRFOv;

1.475
date	2015.12.16.21.50.37;	author nicm;	state Exp;
branches;
next	1.474;
commitid	Bam1GajuDZzmKjyE;

1.474
date	2015.12.12.18.32.24;	author nicm;	state Exp;
branches;
next	1.473;
commitid	q7iDAcShsJWlLYhr;

1.473
date	2015.12.12.18.19.00;	author nicm;	state Exp;
branches;
next	1.472;
commitid	WD2k8ZkBSmp0TV5S;

1.472
date	2015.12.11.16.27.01;	author nicm;	state Exp;
branches;
next	1.471;
commitid	SmX0DbUQ4BT4ZNfz;

1.471
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.470;
commitid	ns7JfXpW9TsHrnT3;

1.470
date	2015.12.08.06.42.07;	author jmc;	state Exp;
branches;
next	1.469;
commitid	aYvscwYUXWmRHLsB;

1.469
date	2015.12.08.01.10.31;	author nicm;	state Exp;
branches;
next	1.468;
commitid	Q7y3PTVPjE0eQDqD;

1.468
date	2015.11.29.17.06.59;	author guenther;	state Exp;
branches;
next	1.467;
commitid	waepZBXWYwEOzNVH;

1.467
date	2015.11.24.23.46.15;	author nicm;	state Exp;
branches;
next	1.466;
commitid	0H2a77mNskMnXKL5;

1.466
date	2015.11.24.22.27.59;	author nicm;	state Exp;
branches;
next	1.465;
commitid	agaky9JaGoza7Nei;

1.465
date	2015.11.24.21.52.06;	author nicm;	state Exp;
branches;
next	1.464;
commitid	Wy0S0Ml5dOX2TIOy;

1.464
date	2015.11.24.21.50.06;	author nicm;	state Exp;
branches;
next	1.463;
commitid	dU2jgRWCZKUoyqoy;

1.463
date	2015.11.24.20.40.51;	author nicm;	state Exp;
branches;
next	1.462;
commitid	DXPBl2AyboJj0u7q;

1.462
date	2015.11.22.18.28.01;	author tim;	state Exp;
branches;
next	1.461;
commitid	LIvsufdSwNJM2Y5g;

1.461
date	2015.11.18.14.13.55;	author nicm;	state Exp;
branches;
next	1.460;
commitid	6kYbPIRshE0950Wv;

1.460
date	2015.11.13.10.00.26;	author nicm;	state Exp;
branches;
next	1.459;
commitid	XBr52OmGRr7N73uY;

1.459
date	2015.11.12.12.36.34;	author jmc;	state Exp;
branches;
next	1.458;
commitid	8rfHBHHqc9zs6sab;

1.458
date	2015.11.12.11.09.11;	author nicm;	state Exp;
branches;
next	1.457;
commitid	tEN3cHiOuN3KscbT;

1.457
date	2015.11.12.11.07.10;	author nicm;	state Exp;
branches;
next	1.456;
commitid	KbUixzkkNinCEW1g;

1.456
date	2015.11.11.23.23.33;	author nicm;	state Exp;
branches;
next	1.455;
commitid	UDT9ROGWpISBYjbt;

1.455
date	2015.10.27.14.51.35;	author nicm;	state Exp;
branches;
next	1.454;
commitid	21qFjAvMiVAbrCiC;

1.454
date	2015.10.26.00.15.37;	author jmc;	state Exp;
branches;
next	1.453;
commitid	A1M5rOioSgZeplSa;

1.453
date	2015.10.25.22.29.17;	author nicm;	state Exp;
branches;
next	1.452;
commitid	lyC76bFrgfVLq7ku;

1.452
date	2015.10.23.16.02.21;	author nicm;	state Exp;
branches;
next	1.451;
commitid	dVDXU9Ok8jlPT5fI;

1.451
date	2015.10.21.13.14.36;	author nicm;	state Exp;
branches;
next	1.450;
commitid	EKOQopJ3Fs4HMt0R;

1.450
date	2015.09.13.13.31.40;	author nicm;	state Exp;
branches;
next	1.449;
commitid	ToibECMiP97xJ3jN;

1.449
date	2015.09.10.08.58.14;	author nicm;	state Exp;
branches;
next	1.448;
commitid	fjYzZVETyEmTAStI;

1.448
date	2015.08.28.12.31.55;	author nicm;	state Exp;
branches;
next	1.447;
commitid	TVJDgAOZtMm4s2XM;

1.447
date	2015.08.12.08.55.20;	author nicm;	state Exp;
branches;
next	1.446;
commitid	HUSsY4NbLebDVceS;

1.446
date	2015.07.27.08.45.45;	author nicm;	state Exp;
branches;
next	1.445;
commitid	bZG82X9pPk548EDZ;

1.445
date	2015.07.20.15.50.04;	author nicm;	state Exp;
branches;
next	1.444;
commitid	XjcnBmI1AcHx5t2a;

1.444
date	2015.07.20.10.34.11;	author nicm;	state Exp;
branches;
next	1.443;
commitid	Wb76s8rJijnDiBvQ;

1.443
date	2015.07.13.15.37.26;	author nicm;	state Exp;
branches;
next	1.442;
commitid	MXrp0CD24CxANcKO;

1.442
date	2015.07.13.13.36.29;	author nicm;	state Exp;
branches;
next	1.441;
commitid	T89SYBXJwnMKTy82;

1.441
date	2015.06.18.23.53.56;	author nicm;	state Exp;
branches;
next	1.440;
commitid	qdsORNDERBjvPyG6;

1.440
date	2015.06.17.19.56.08;	author nicm;	state Exp;
branches;
next	1.439;
commitid	uaWo5XArLQkTnXRM;

1.439
date	2015.06.17.16.50.28;	author nicm;	state Exp;
branches;
next	1.438;
commitid	zbvekK98PFlsEYIW;

1.438
date	2015.06.15.10.58.01;	author nicm;	state Exp;
branches;
next	1.437;
commitid	HBSnpNJTrYXYaYTN;

1.437
date	2015.06.14.10.07.44;	author nicm;	state Exp;
branches;
next	1.436;
commitid	0pZ95JQFEhIowUtr;

1.436
date	2015.06.07.21.39.39;	author nicm;	state Exp;
branches;
next	1.435;
commitid	N9n0sMf4KapNFAh6;

1.435
date	2015.06.05.08.14.16;	author nicm;	state Exp;
branches;
next	1.434;
commitid	FezlkQJJMDFfG1I5;

1.434
date	2015.06.04.20.34.22;	author jmc;	state Exp;
branches;
next	1.433;
commitid	bT7B3nzhy22zfVcE;

1.433
date	2015.06.04.14.29.33;	author nicm;	state Exp;
branches;
next	1.432;
commitid	3bRmeKjgxs1dRxhJ;

1.432
date	2015.06.04.11.43.51;	author nicm;	state Exp;
branches;
next	1.431;
commitid	rAvOUA4CI6VK3gQ6;

1.431
date	2015.05.27.13.28.04;	author nicm;	state Exp;
branches;
next	1.430;
commitid	jNiCCHdN1zYsiWiL;

1.430
date	2015.05.12.15.29.29;	author nicm;	state Exp;
branches;
next	1.429;
commitid	pHyo7O6edHQdopKa;

1.429
date	2015.05.12.15.27.46;	author nicm;	state Exp;
branches;
next	1.428;
commitid	p5bGRCMzjTiUkjhK;

1.428
date	2015.05.11.10.10.16;	author nicm;	state Exp;
branches;
next	1.427;
commitid	yarRVqbIkdPvB3jr;

1.427
date	2015.05.08.16.18.04;	author nicm;	state Exp;
branches;
next	1.426;
commitid	jGuK9ADiqvyOz7AE;

1.426
date	2015.05.06.08.35.39;	author nicm;	state Exp;
branches;
next	1.425;
commitid	7XqxdN1FHegvjfQk;

1.425
date	2015.04.29.15.59.08;	author nicm;	state Exp;
branches;
next	1.424;
commitid	8yIyhuBaxmohYzMx;

1.424
date	2015.04.28.10.43.14;	author nicm;	state Exp;
branches;
next	1.423;
commitid	S1rOdgmrftCOUlG6;

1.423
date	2015.04.27.16.25.57;	author nicm;	state Exp;
branches;
next	1.422;
commitid	0WBWxxZyxaAFVhmn;

1.422
date	2015.04.21.22.32.40;	author nicm;	state Exp;
branches;
next	1.421;
commitid	RdNUD7saZLMVpMJa;

1.421
date	2015.04.20.15.34.56;	author nicm;	state Exp;
branches;
next	1.420;
commitid	1fc4pMkRD7YjyQWP;

1.420
date	2015.04.19.22.10.30;	author jmc;	state Exp;
branches;
next	1.419;
commitid	rwmk7uDGsIf8nAQ9;

1.419
date	2015.04.19.21.34.21;	author nicm;	state Exp;
branches;
next	1.418;
commitid	wug6ctIOfhVMeWQp;

1.418
date	2015.04.19.21.05.27;	author nicm;	state Exp;
branches;
next	1.417;
commitid	ksfuI8mTVk7XPyr3;

1.417
date	2015.04.10.16.00.08;	author nicm;	state Exp;
branches;
next	1.416;
commitid	k7RbsMc8eByIqjzu;

1.416
date	2015.04.10.07.23.14;	author nicm;	state Exp;
branches;
next	1.415;
commitid	FvJhR95v5Qj8Lkt2;

1.415
date	2015.03.31.17.58.36;	author nicm;	state Exp;
branches;
next	1.414;
commitid	q3za2CHNdxysAEy9;

1.414
date	2015.03.11.08.17.37;	author nicm;	state Exp;
branches;
next	1.413;
commitid	zv4vPLTM9uKXu6ja;

1.413
date	2015.02.06.15.09.34;	author nicm;	state Exp;
branches;
next	1.412;
commitid	PGKGPybMMWclhLSu;

1.412
date	2015.01.06.09.12.02;	author nicm;	state Exp;
branches;
next	1.411;
commitid	zlg5XKoy5NQjaO9i;

1.411
date	2014.12.09.19.23.35;	author nicm;	state Exp;
branches;
next	1.410;
commitid	F9Ad8BPsskeeEtGX;

1.410
date	2014.12.02.23.39.02;	author nicm;	state Exp;
branches;
next	1.409;
commitid	QmONsndzUBmuF4ik;

1.409
date	2014.12.02.23.19.45;	author nicm;	state Exp;
branches;
next	1.408;
commitid	gPfaYZLsz4KUq58B;

1.408
date	2014.11.12.22.57.06;	author nicm;	state Exp;
branches;
next	1.407;
commitid	2hcJjTaGnelyhsA3;

1.407
date	2014.11.07.12.28.28;	author nicm;	state Exp;
branches;
next	1.406;
commitid	7lFxlS3Yn9wqeyiC;

1.406
date	2014.11.06.09.17.25;	author nicm;	state Exp;
branches;
next	1.405;
commitid	CCUZqfCax9h5WQau;

1.405
date	2014.11.05.23.15.11;	author nicm;	state Exp;
branches;
next	1.404;
commitid	mPOFk7MKvspTVFch;

1.404
date	2014.10.25.08.47.04;	author nicm;	state Exp;
branches;
next	1.403;
commitid	EL8qayrhcDXf5Ris;

1.403
date	2014.10.18.20.28.19;	author nicm;	state Exp;
branches;
next	1.402;
commitid	Xi69VWQsL0oAgvXv;

1.402
date	2014.10.02.14.21.06;	author nicm;	state Exp;
branches;
next	1.401;
commitid	dUPGTwZH4k5BIcDq;

1.401
date	2014.09.25.12.45.35;	author nicm;	state Exp;
branches;
next	1.400;
commitid	jQn7YRPsPXCR1h0G;

1.400
date	2014.09.08.14.29.05;	author nicm;	state Exp;
branches;
next	1.399;
commitid	biBiUFLYYgChJ8LI;

1.399
date	2014.09.01.22.00.42;	author nicm;	state Exp;
branches;
next	1.398;
commitid	tJQWmGXXvVdmwIGp;

1.398
date	2014.08.11.22.14.30;	author nicm;	state Exp;
branches;
next	1.397;
commitid	whaUj6ycByfMr14q;

1.397
date	2014.06.20.10.46.59;	author nicm;	state Exp;
branches;
next	1.396;
commitid	o9XrO3iLhtTzzM1D;

1.396
date	2014.05.27.12.49.36;	author nicm;	state Exp;
branches;
next	1.395;

1.395
date	2014.05.14.06.45.35;	author nicm;	state Exp;
branches;
next	1.394;

1.394
date	2014.05.13.08.08.32;	author nicm;	state Exp;
branches;
next	1.393;

1.393
date	2014.05.13.07.54.20;	author nicm;	state Exp;
branches;
next	1.392;

1.392
date	2014.05.13.07.34.35;	author nicm;	state Exp;
branches;
next	1.391;

1.391
date	2014.04.17.15.48.02;	author nicm;	state Exp;
branches;
next	1.390;

1.390
date	2014.04.17.07.55.43;	author nicm;	state Exp;
branches;
next	1.389;

1.389
date	2014.04.17.07.51.38;	author nicm;	state Exp;
branches;
next	1.388;

1.388
date	2014.04.17.07.36.45;	author nicm;	state Exp;
branches;
next	1.387;

1.387
date	2014.04.16.21.02.41;	author nicm;	state Exp;
branches;
next	1.386;

1.386
date	2014.04.02.18.12.18;	author nicm;	state Exp;
branches;
next	1.385;

1.385
date	2014.04.02.07.55.09;	author nicm;	state Exp;
branches;
next	1.384;

1.384
date	2014.03.31.21.41.35;	author nicm;	state Exp;
branches;
next	1.383;

1.383
date	2014.03.31.21.39.31;	author nicm;	state Exp;
branches;
next	1.382;

1.382
date	2014.03.31.21.37.55;	author nicm;	state Exp;
branches;
next	1.381;

1.381
date	2014.02.23.00.53.06;	author nicm;	state Exp;
branches;
next	1.380;

1.380
date	2014.02.16.12.45.17;	author nicm;	state Exp;
branches;
next	1.379;

1.379
date	2014.02.02.08.48.48;	author jmc;	state Exp;
branches;
next	1.378;

1.378
date	2014.01.28.23.07.09;	author nicm;	state Exp;
branches;
next	1.377;

1.377
date	2014.01.22.14.43.42;	author nicm;	state Exp;
branches;
next	1.376;

1.376
date	2013.11.24.11.29.09;	author nicm;	state Exp;
branches;
next	1.375;

1.375
date	2013.10.23.11.31.03;	author nicm;	state Exp;
branches;
next	1.374;

1.374
date	2013.10.10.23.31.28;	author nicm;	state Exp;
branches;
next	1.373;

1.373
date	2013.10.10.12.39.25;	author nicm;	state Exp;
branches;
next	1.372;

1.372
date	2013.10.10.12.26.36;	author nicm;	state Exp;
branches;
next	1.371;

1.371
date	2013.10.10.12.07.37;	author nicm;	state Exp;
branches;
next	1.370;

1.370
date	2013.10.10.12.02.55;	author nicm;	state Exp;
branches;
next	1.369;

1.369
date	2013.10.10.12.01.51;	author nicm;	state Exp;
branches;
next	1.368;

1.368
date	2013.10.10.11.56.50;	author nicm;	state Exp;
branches;
next	1.367;

1.367
date	2013.10.10.11.50.21;	author nicm;	state Exp;
branches;
next	1.366;

1.366
date	2013.10.10.11.47.52;	author nicm;	state Exp;
branches;
next	1.365;

1.365
date	2013.10.05.13.56.48;	author nicm;	state Exp;
branches;
next	1.364;

1.364
date	2013.07.16.00.07.52;	author schwarze;	state Exp;
branches;
next	1.363;

1.363
date	2013.07.05.15.27.14;	author nicm;	state Exp;
branches;
next	1.362;

1.362
date	2013.06.23.13.10.47;	author nicm;	state Exp;
branches;
next	1.361;

1.361
date	2013.06.02.14.40.17;	author jmc;	state Exp;
branches;
next	1.360;

1.360
date	2013.06.02.07.52.15;	author nicm;	state Exp;
branches;
next	1.359;

1.359
date	2013.05.31.19.56.05;	author nicm;	state Exp;
branches;
next	1.358;

1.358
date	2013.05.31.19.46.42;	author nicm;	state Exp;
branches;
next	1.357;

1.357
date	2013.04.24.10.15.47;	author nicm;	state Exp;
branches;
next	1.356;

1.356
date	2013.04.10.12.07.18;	author nicm;	state Exp;
branches;
next	1.355;

1.355
date	2013.03.27.11.24.18;	author nicm;	state Exp;
branches;
next	1.354;

1.354
date	2013.03.27.11.17.12;	author nicm;	state Exp;
branches;
next	1.353;

1.353
date	2013.03.25.15.59.57;	author nicm;	state Exp;
branches;
next	1.352;

1.352
date	2013.03.25.11.46.28;	author nicm;	state Exp;
branches;
next	1.351;

1.351
date	2013.03.25.11.44.00;	author nicm;	state Exp;
branches;
next	1.350;

1.350
date	2013.03.25.11.40.40;	author nicm;	state Exp;
branches;
next	1.349;

1.349
date	2013.03.25.11.40.20;	author nicm;	state Exp;
branches;
next	1.348;

1.348
date	2013.03.25.11.39.53;	author nicm;	state Exp;
branches;
next	1.347;

1.347
date	2013.03.25.11.38.43;	author nicm;	state Exp;
branches;
next	1.346;

1.346
date	2013.03.25.11.38.15;	author nicm;	state Exp;
branches;
next	1.345;

1.345
date	2013.03.25.11.37.56;	author nicm;	state Exp;
branches;
next	1.344;

1.344
date	2013.03.25.10.11.45;	author nicm;	state Exp;
branches;
next	1.343;

1.343
date	2013.03.25.10.09.35;	author nicm;	state Exp;
branches;
next	1.342;

1.342
date	2013.03.25.10.09.05;	author nicm;	state Exp;
branches;
next	1.341;

1.341
date	2013.03.25.10.05.35;	author nicm;	state Exp;
branches;
next	1.340;

1.340
date	2013.03.25.10.04.04;	author nicm;	state Exp;
branches;
next	1.339;

1.339
date	2013.03.25.10.02.17;	author nicm;	state Exp;
branches;
next	1.338;

1.338
date	2013.03.24.09.58.40;	author nicm;	state Exp;
branches;
next	1.337;

1.337
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.336;

1.336
date	2013.03.24.09.55.02;	author nicm;	state Exp;
branches;
next	1.335;

1.335
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.334;

1.334
date	2013.03.24.09.33.35;	author nicm;	state Exp;
branches;
next	1.333;

1.333
date	2013.03.24.09.29.40;	author nicm;	state Exp;
branches;
next	1.332;

1.332
date	2013.03.24.09.21.27;	author nicm;	state Exp;
branches;
next	1.331;

1.331
date	2013.03.24.09.19.51;	author nicm;	state Exp;
branches;
next	1.330;

1.330
date	2013.03.22.18.45.36;	author nicm;	state Exp;
branches;
next	1.329;

1.329
date	2013.03.22.16.03.35;	author nicm;	state Exp;
branches;
next	1.328;

1.328
date	2013.03.22.15.56.11;	author nicm;	state Exp;
branches;
next	1.327;

1.327
date	2013.03.22.15.52.40;	author nicm;	state Exp;
branches;
next	1.326;

1.326
date	2013.03.22.15.51.54;	author nicm;	state Exp;
branches;
next	1.325;

1.325
date	2013.03.22.15.51.15;	author nicm;	state Exp;
branches;
next	1.324;

1.324
date	2013.03.22.10.37.39;	author nicm;	state Exp;
branches;
next	1.323;

1.323
date	2013.03.22.10.32.36;	author nicm;	state Exp;
branches;
next	1.322;

1.322
date	2013.03.21.18.43.34;	author nicm;	state Exp;
branches;
next	1.321;

1.321
date	2013.03.21.17.42.36;	author jmc;	state Exp;
branches;
next	1.320;

1.320
date	2013.03.21.16.23.46;	author nicm;	state Exp;
branches;
next	1.319;

1.319
date	2013.03.21.16.17.35;	author nicm;	state Exp;
branches;
next	1.318;

1.318
date	2013.03.21.16.17.01;	author nicm;	state Exp;
branches;
next	1.317;

1.317
date	2013.03.21.16.15.52;	author nicm;	state Exp;
branches;
next	1.316;

1.316
date	2013.03.21.16.14.50;	author nicm;	state Exp;
branches;
next	1.315;

1.315
date	2013.03.21.16.14.09;	author nicm;	state Exp;
branches;
next	1.314;

1.314
date	2013.03.21.16.09.59;	author nicm;	state Exp;
branches;
next	1.313;

1.313
date	2013.01.17.00.11.22;	author nicm;	state Exp;
branches;
next	1.312;

1.312
date	2013.01.15.22.55.29;	author nicm;	state Exp;
branches;
next	1.311;

1.311
date	2012.12.24.12.38.57;	author nicm;	state Exp;
branches;
next	1.310;

1.310
date	2012.12.24.12.34.32;	author nicm;	state Exp;
branches;
next	1.309;

1.309
date	2012.12.24.12.25.52;	author nicm;	state Exp;
branches;
next	1.308;

1.308
date	2012.11.27.15.09.35;	author nicm;	state Exp;
branches;
next	1.307;

1.307
date	2012.11.27.13.52.23;	author nicm;	state Exp;
branches;
next	1.306;

1.306
date	2012.11.19.10.50.24;	author nicm;	state Exp;
branches;
next	1.305;

1.305
date	2012.10.25.11.11.58;	author nicm;	state Exp;
branches;
next	1.304;

1.304
date	2012.10.02.08.02.21;	author nicm;	state Exp;
branches;
next	1.303;

1.303
date	2012.09.03.09.57.57;	author nicm;	state Exp;
branches;
next	1.302;

1.302
date	2012.08.11.07.10.01;	author nicm;	state Exp;
branches;
next	1.301;

1.301
date	2012.08.11.05.55.12;	author nicm;	state Exp;
branches;
next	1.300;

1.300
date	2012.07.15.06.51.57;	author nicm;	state Exp;
branches;
next	1.299;

1.299
date	2012.07.08.17.24.29;	author jmc;	state Exp;
branches;
next	1.298;

1.298
date	2012.07.08.16.04.38;	author nicm;	state Exp;
branches;
next	1.297;

1.297
date	2012.06.18.09.16.15;	author nicm;	state Exp;
branches;
next	1.296;

1.296
date	2012.06.18.09.15.22;	author nicm;	state Exp;
branches;
next	1.295;

1.295
date	2012.06.18.09.13.12;	author nicm;	state Exp;
branches;
next	1.294;

1.294
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.293;

1.293
date	2012.05.17.21.21.31;	author nicm;	state Exp;
branches;
next	1.292;

1.292
date	2012.05.02.19.29.13;	author nicm;	state Exp;
branches;
next	1.291;

1.291
date	2012.04.29.17.20.01;	author nicm;	state Exp;
branches;
next	1.290;

1.290
date	2012.04.23.22.23.14;	author nicm;	state Exp;
branches;
next	1.289;

1.289
date	2012.04.23.22.10.45;	author nicm;	state Exp;
branches;
next	1.288;

1.288
date	2012.04.01.13.18.38;	author nicm;	state Exp;
branches;
next	1.287;

1.287
date	2012.04.01.10.42.39;	author nicm;	state Exp;
branches;
next	1.286;

1.286
date	2012.03.22.11.11.57;	author nicm;	state Exp;
branches;
next	1.285;

1.285
date	2012.03.20.17.09.48;	author nicm;	state Exp;
branches;
next	1.284;

1.284
date	2012.03.20.11.23.12;	author nicm;	state Exp;
branches;
next	1.283;

1.283
date	2012.03.20.11.01.00;	author nicm;	state Exp;
branches;
next	1.282;

1.282
date	2012.03.17.21.40.53;	author nicm;	state Exp;
branches;
next	1.281;

1.281
date	2012.03.17.21.33.33;	author nicm;	state Exp;
branches;
next	1.280;

1.280
date	2012.03.12.13.31.09;	author nicm;	state Exp;
branches;
next	1.279;

1.279
date	2012.03.04.20.50.53;	author nicm;	state Exp;
branches;
next	1.278;

1.278
date	2012.03.03.09.43.22;	author nicm;	state Exp;
branches;
next	1.277;

1.277
date	2012.03.03.08.31.18;	author nicm;	state Exp;
branches;
next	1.276;

1.276
date	2012.02.25.12.57.42;	author nicm;	state Exp;
branches;
next	1.275;

1.275
date	2012.02.23.22.40.58;	author nicm;	state Exp;
branches;
next	1.274;

1.274
date	2012.02.02.22.33.05;	author nicm;	state Exp;
branches;
next	1.273;

1.273
date	2012.02.02.00.15.28;	author nicm;	state Exp;
branches;
next	1.272;

1.272
date	2012.01.31.15.52.21;	author nicm;	state Exp;
branches;
next	1.271;

1.271
date	2012.01.30.20.48.28;	author jmc;	state Exp;
branches;
next	1.270;

1.270
date	2012.01.30.09.39.34;	author nicm;	state Exp;
branches;
next	1.269;

1.269
date	2012.01.29.09.37.02;	author nicm;	state Exp;
branches;
next	1.268;

1.268
date	2012.01.21.20.40.28;	author nicm;	state Exp;
branches;
next	1.267;

1.267
date	2012.01.21.08.40.09;	author nicm;	state Exp;
branches;
next	1.266;

1.266
date	2012.01.21.08.23.12;	author nicm;	state Exp;
branches;
next	1.265;

1.265
date	2012.01.21.08.10.21;	author nicm;	state Exp;
branches;
next	1.264;

1.264
date	2012.01.20.19.51.28;	author nicm;	state Exp;
branches;
next	1.263;

1.263
date	2012.01.20.19.16.16;	author nicm;	state Exp;
branches;
next	1.262;

1.262
date	2012.01.20.19.15.40;	author nicm;	state Exp;
branches;
next	1.261;

1.261
date	2011.12.31.03.40.15;	author nicm;	state Exp;
branches;
next	1.260;

1.260
date	2011.12.30.14.59.13;	author sthen;	state Exp;
branches;
next	1.259;

1.259
date	2011.12.27.14.07.20;	author stsp;	state Exp;
branches;
next	1.258;

1.258
date	2011.12.24.08.46.48;	author jmc;	state Exp;
branches;
next	1.257;

1.257
date	2011.12.09.16.28.18;	author nicm;	state Exp;
branches;
next	1.256;

1.256
date	2011.12.04.16.18.01;	author nicm;	state Exp;
branches;
next	1.255;

1.255
date	2011.11.15.23.24.04;	author nicm;	state Exp;
branches;
next	1.254;

1.254
date	2011.11.05.09.13.00;	author nicm;	state Exp;
branches;
next	1.253;

1.253
date	2011.11.05.09.06.31;	author nicm;	state Exp;
branches;
next	1.252;

1.252
date	2011.10.27.23.33.35;	author jmc;	state Exp;
branches;
next	1.251;

1.251
date	2011.10.27.22.40.15;	author nicm;	state Exp;
branches;
next	1.250;

1.250
date	2011.10.23.01.12.46;	author nicm;	state Exp;
branches;
next	1.249;

1.249
date	2011.10.02.06.55.48;	author nicm;	state Exp;
branches;
next	1.248;

1.248
date	2011.09.28.20.11.21;	author nicm;	state Exp;
branches;
next	1.247;

1.247
date	2011.09.23.18.33.43;	author nicm;	state Exp;
branches;
next	1.246;

1.246
date	2011.08.26.13.07.49;	author jmc;	state Exp;
branches;
next	1.245;

1.245
date	2011.08.26.10.53.16;	author nicm;	state Exp;
branches;
next	1.244;

1.244
date	2011.08.24.10.46.01;	author nicm;	state Exp;
branches;
next	1.243;

1.243
date	2011.08.24.10.29.57;	author nicm;	state Exp;
branches;
next	1.242;

1.242
date	2011.08.16.10.00.52;	author nicm;	state Exp;
branches;
next	1.241;

1.241
date	2011.07.30.18.27.57;	author jmc;	state Exp;
branches;
next	1.240;

1.240
date	2011.07.30.18.01.26;	author nicm;	state Exp;
branches;
next	1.239;

1.239
date	2011.07.25.09.57.28;	author nicm;	state Exp;
branches;
next	1.238;

1.238
date	2011.07.08.06.37.57;	author nicm;	state Exp;
branches;
next	1.237;

1.237
date	2011.07.03.19.07.54;	author nicm;	state Exp;
branches;
next	1.236;

1.236
date	2011.07.03.18.18.15;	author nicm;	state Exp;
branches;
next	1.235;

1.235
date	2011.07.02.21.05.44;	author nicm;	state Exp;
branches;
next	1.234;

1.234
date	2011.06.05.11.19.03;	author nicm;	state Exp;
branches;
next	1.233;

1.233
date	2011.05.30.21.02.28;	author nicm;	state Exp;
branches;
next	1.232;

1.232
date	2011.05.21.10.04.17;	author jmc;	state Exp;
branches;
next	1.231;

1.231
date	2011.05.20.19.29.13;	author nicm;	state Exp;
branches;
next	1.230;

1.230
date	2011.05.20.19.17.39;	author nicm;	state Exp;
branches;
next	1.229;

1.229
date	2011.05.20.19.03.58;	author nicm;	state Exp;
branches;
next	1.228;

1.228
date	2011.05.18.20.24.29;	author nicm;	state Exp;
branches;
next	1.227;

1.227
date	2011.05.18.18.06.36;	author nicm;	state Exp;
branches;
next	1.226;

1.226
date	2011.05.08.20.34.12;	author nicm;	state Exp;
branches;
next	1.225;

1.225
date	2011.05.08.19.53.06;	author nicm;	state Exp;
branches;
next	1.224;

1.224
date	2011.04.24.21.32.07;	author nicm;	state Exp;
branches;
next	1.223;

1.223
date	2011.04.19.21.31.33;	author nicm;	state Exp;
branches;
next	1.222;

1.222
date	2011.04.18.19.49.05;	author nicm;	state Exp;
branches;
next	1.221;

1.221
date	2011.04.17.20.39.44;	author jmc;	state Exp;
branches;
next	1.220;

1.220
date	2011.04.17.19.28.09;	author nicm;	state Exp;
branches;
next	1.219;

1.219
date	2011.04.11.16.44.36;	author nicm;	state Exp;
branches;
next	1.218;

1.218
date	2011.04.11.06.44.39;	author nicm;	state Exp;
branches;
next	1.217;

1.217
date	2011.04.05.19.37.01;	author nicm;	state Exp;
branches;
next	1.216;

1.216
date	2011.04.01.16.59.11;	author nicm;	state Exp;
branches;
next	1.215;

1.215
date	2011.03.29.19.30.16;	author nicm;	state Exp;
branches;
next	1.214;

1.214
date	2011.03.28.23.13.00;	author nicm;	state Exp;
branches;
next	1.213;

1.213
date	2011.03.28.20.17.39;	author nicm;	state Exp;
branches;
next	1.212;

1.212
date	2011.03.27.20.27.26;	author nicm;	state Exp;
branches;
next	1.211;

1.211
date	2011.03.03.08.51.47;	author nicm;	state Exp;
branches;
next	1.210;

1.210
date	2011.01.14.23.49.23;	author nicm;	state Exp;
branches;
next	1.209;

1.209
date	2011.01.13.09.50.11;	author nicm;	state Exp;
branches;
next	1.208;

1.208
date	2011.01.12.22.23.58;	author nicm;	state Exp;
branches;
next	1.207;

1.207
date	2011.01.09.18.46.46;	author nicm;	state Exp;
branches;
next	1.206;

1.206
date	2011.01.09.18.42.19;	author nicm;	state Exp;
branches;
next	1.205;

1.205
date	2011.01.08.00.48.54;	author nicm;	state Exp;
branches;
next	1.204;

1.204
date	2011.01.04.02.03.41;	author nicm;	state Exp;
branches;
next	1.203;

1.203
date	2011.01.03.23.35.21;	author nicm;	state Exp;
branches;
next	1.202;

1.202
date	2011.01.01.11.24.45;	author nicm;	state Exp;
branches;
next	1.201;

1.201
date	2011.01.01.01.33.07;	author nicm;	state Exp;
branches;
next	1.200;

1.200
date	2010.12.31.00.41.11;	author jmc;	state Exp;
branches;
next	1.199;

1.199
date	2010.12.30.23.17.41;	author nicm;	state Exp;
branches;
next	1.198;

1.198
date	2010.12.30.23.16.18;	author nicm;	state Exp;
branches;
next	1.197;

1.197
date	2010.12.27.19.57.31;	author jmc;	state Exp;
branches;
next	1.196;

1.196
date	2010.12.27.18.22.25;	author nicm;	state Exp;
branches;
next	1.195;

1.195
date	2010.12.19.18.35.08;	author nicm;	state Exp;
branches;
next	1.194;

1.194
date	2010.12.11.18.39.25;	author nicm;	state Exp;
branches;
next	1.193;

1.193
date	2010.12.10.21.01.38;	author nicm;	state Exp;
branches;
next	1.192;

1.192
date	2010.12.06.22.51.02;	author nicm;	state Exp;
branches;
next	1.191;

1.191
date	2010.11.29.19.45.58;	author nicm;	state Exp;
branches;
next	1.190;

1.190
date	2010.11.14.09.04.22;	author nicm;	state Exp;
branches;
next	1.189;

1.189
date	2010.11.11.20.54.06;	author nicm;	state Exp;
branches;
next	1.188;

1.188
date	2010.11.01.20.59.45;	author nicm;	state Exp;
branches;
next	1.187;

1.187
date	2010.10.23.13.04.34;	author nicm;	state Exp;
branches;
next	1.186;

1.186
date	2010.10.14.00.30.03;	author nicm;	state Exp;
branches;
next	1.185;

1.185
date	2010.09.26.20.43.30;	author nicm;	state Exp;
branches;
next	1.184;

1.184
date	2010.09.25.20.35.52;	author nicm;	state Exp;
branches;
next	1.183;

1.183
date	2010.09.08.22.02.28;	author nicm;	state Exp;
branches;
next	1.182;

1.182
date	2010.07.15.21.54.20;	author jmc;	state Exp;
branches;
next	1.181;

1.181
date	2010.06.29.03.30.14;	author nicm;	state Exp;
branches;
next	1.180;

1.180
date	2010.06.27.02.56.59;	author nicm;	state Exp;
branches;
next	1.179;

1.179
date	2010.06.27.00.22.22;	author nicm;	state Exp;
branches;
next	1.178;

1.178
date	2010.06.21.21.44.09;	author nicm;	state Exp;
branches;
next	1.177;

1.177
date	2010.06.21.01.46.36;	author nicm;	state Exp;
branches;
next	1.176;

1.176
date	2010.06.14.23.04.44;	author nicm;	state Exp;
branches;
next	1.175;

1.175
date	2010.06.05.16.54.24;	author nicm;	state Exp;
branches;
next	1.174;

1.174
date	2010.06.05.16.34.30;	author nicm;	state Exp;
branches;
next	1.173;

1.173
date	2010.05.31.19.51.29;	author nicm;	state Exp;
branches;
next	1.172;

1.172
date	2010.05.30.19.19.42;	author nicm;	state Exp;
branches;
next	1.171;

1.171
date	2010.05.30.19.09.50;	author nicm;	state Exp;
branches;
next	1.170;

1.170
date	2010.05.19.22.28.14;	author nicm;	state Exp;
branches;
next	1.169;

1.169
date	2010.05.14.19.03.09;	author nicm;	state Exp;
branches;
next	1.168;

1.168
date	2010.05.14.18.56.21;	author nicm;	state Exp;
branches;
next	1.167;

1.167
date	2010.05.05.23.24.23;	author nicm;	state Exp;
branches;
next	1.166;

1.166
date	2010.05.02.15.19.35;	author sobrado;	state Exp;
branches;
next	1.165;

1.165
date	2010.04.25.20.28.13;	author nicm;	state Exp;
branches;
next	1.164;

1.164
date	2010.04.06.21.35.44;	author nicm;	state Exp;
branches;
next	1.163;

1.163
date	2010.04.05.17.46.05;	author nicm;	state Exp;
branches;
next	1.162;

1.162
date	2010.04.04.21.23.20;	author jmc;	state Exp;
branches;
next	1.161;

1.161
date	2010.04.04.19.02.09;	author nicm;	state Exp;
branches;
next	1.160;

1.160
date	2010.03.27.11.46.58;	author nicm;	state Exp;
branches;
next	1.159;

1.159
date	2010.03.26.19.30.40;	author jmc;	state Exp;
branches;
next	1.158;

1.158
date	2010.03.22.19.13.28;	author nicm;	state Exp;
branches;
next	1.157;

1.157
date	2010.03.22.19.10.42;	author nicm;	state Exp;
branches;
next	1.156;

1.156
date	2010.03.22.19.07.52;	author nicm;	state Exp;
branches;
next	1.155;

1.155
date	2010.03.02.00.32.41;	author nicm;	state Exp;
branches;
next	1.154;

1.154
date	2010.02.22.20.41.16;	author nicm;	state Exp;
branches;
next	1.153;

1.153
date	2010.02.17.21.12.06;	author nicm;	state Exp;
branches;
next	1.152;

1.152
date	2010.02.11.20.39.40;	author nicm;	state Exp;
branches;
next	1.151;

1.151
date	2010.02.10.19.17.27;	author nicm;	state Exp;
branches;
next	1.150;

1.150
date	2010.02.08.00.14.38;	author nicm;	state Exp;
branches;
next	1.149;

1.149
date	2010.02.07.20.33.27;	author nicm;	state Exp;
branches;
next	1.148;

1.148
date	2010.02.06.22.55.31;	author nicm;	state Exp;
branches;
next	1.147;

1.147
date	2010.02.06.17.35.01;	author nicm;	state Exp;
branches;
next	1.146;

1.146
date	2010.02.04.20.00.26;	author nicm;	state Exp;
branches;
next	1.145;

1.145
date	2010.02.04.18.20.16;	author nicm;	state Exp;
branches;
next	1.144;

1.144
date	2010.01.28.19.09.12;	author nicm;	state Exp;
branches;
next	1.143;

1.143
date	2010.01.27.20.18.52;	author nicm;	state Exp;
branches;
next	1.142;

1.142
date	2010.01.25.21.33.39;	author nicm;	state Exp;
branches;
next	1.141;

1.141
date	2010.01.23.17.49.21;	author nicm;	state Exp;
branches;
next	1.140;

1.140
date	2010.01.19.21.27.47;	author nicm;	state Exp;
branches;
next	1.139;

1.139
date	2010.01.18.19.16.04;	author nicm;	state Exp;
branches;
next	1.138;

1.138
date	2010.01.14.22.10.47;	author nicm;	state Exp;
branches;
next	1.137;

1.137
date	2010.01.07.20.52.18;	author nicm;	state Exp;
branches;
next	1.136;

1.136
date	2010.01.07.19.47.10;	author nicm;	state Exp;
branches;
next	1.135;

1.135
date	2010.01.03.12.51.05;	author nicm;	state Exp;
branches;
next	1.134;

1.134
date	2009.12.14.10.43.41;	author nicm;	state Exp;
branches;
next	1.133;

1.133
date	2009.12.10.09.16.52;	author nicm;	state Exp;
branches;
next	1.132;

1.132
date	2009.12.08.07.49.31;	author nicm;	state Exp;
branches;
next	1.131;

1.131
date	2009.12.03.22.54.34;	author nicm;	state Exp;
branches;
next	1.130;

1.130
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.129;

1.129
date	2009.12.03.17.44.02;	author nicm;	state Exp;
branches;
next	1.128;

1.128
date	2009.12.01.18.42.38;	author nicm;	state Exp;
branches;
next	1.127;

1.127
date	2009.11.24.19.16.11;	author nicm;	state Exp;
branches;
next	1.126;

1.126
date	2009.11.22.22.52.39;	author nicm;	state Exp;
branches;
next	1.125;

1.125
date	2009.11.19.16.22.10;	author nicm;	state Exp;
branches;
next	1.124;

1.124
date	2009.11.19.15.00.32;	author jmc;	state Exp;
branches;
next	1.123;

1.123
date	2009.11.19.14.06.33;	author nicm;	state Exp;
branches;
next	1.122;

1.122
date	2009.11.19.10.22.07;	author nicm;	state Exp;
branches;
next	1.121;

1.121
date	2009.11.18.17.02.17;	author nicm;	state Exp;
branches;
next	1.120;

1.120
date	2009.11.18.13.16.33;	author nicm;	state Exp;
branches;
next	1.119;

1.119
date	2009.11.18.10.18.25;	author nicm;	state Exp;
branches;
next	1.118;

1.118
date	2009.11.10.18.53.11;	author nicm;	state Exp;
branches;
next	1.117;

1.117
date	2009.11.03.22.40.40;	author nicm;	state Exp;
branches;
next	1.116;

1.116
date	2009.11.03.06.55.49;	author nicm;	state Exp;
branches;
next	1.115;

1.115
date	2009.11.01.19.17.08;	author nicm;	state Exp;
branches;
next	1.114;

1.114
date	2009.10.25.21.12.15;	author nicm;	state Exp;
branches;
next	1.113;

1.113
date	2009.10.25.01.10.57;	author nicm;	state Exp;
branches;
next	1.112;

1.112
date	2009.10.24.10.12.39;	author nicm;	state Exp;
branches;
next	1.111;

1.111
date	2009.10.21.13.48.27;	author nicm;	state Exp;
branches;
next	1.110;

1.110
date	2009.10.13.13.45.56;	author nicm;	state Exp;
branches;
next	1.109;

1.109
date	2009.10.12.11.08.02;	author nicm;	state Exp;
branches;
next	1.108;

1.108
date	2009.10.11.14.12.10;	author jmc;	state Exp;
branches;
next	1.107;

1.107
date	2009.10.11.10.04.27;	author nicm;	state Exp;
branches;
next	1.106;

1.106
date	2009.10.11.08.58.05;	author nicm;	state Exp;
branches;
next	1.105;

1.105
date	2009.10.10.17.39.55;	author nicm;	state Exp;
branches;
next	1.104;

1.104
date	2009.10.10.17.19.38;	author nicm;	state Exp;
branches;
next	1.103;

1.103
date	2009.10.10.15.03.01;	author nicm;	state Exp;
branches;
next	1.102;

1.102
date	2009.10.10.14.51.16;	author nicm;	state Exp;
branches;
next	1.101;

1.101
date	2009.10.10.10.02.48;	author nicm;	state Exp;
branches;
next	1.100;

1.100
date	2009.10.10.09.46.11;	author nicm;	state Exp;
branches;
next	1.99;

1.99
date	2009.10.09.07.27.00;	author nicm;	state Exp;
branches;
next	1.98;

1.98
date	2009.10.07.15.58.40;	author nicm;	state Exp;
branches;
next	1.97;

1.97
date	2009.10.06.07.19.32;	author nicm;	state Exp;
branches;
next	1.96;

1.96
date	2009.10.06.07.09.00;	author nicm;	state Exp;
branches;
next	1.95;

1.95
date	2009.10.04.11.33.35;	author jmc;	state Exp;
branches;
next	1.94;

1.94
date	2009.10.04.11.18.26;	author nicm;	state Exp;
branches;
next	1.93;

1.93
date	2009.10.04.08.50.05;	author nicm;	state Exp;
branches;
next	1.92;

1.92
date	2009.09.24.14.17.09;	author nicm;	state Exp;
branches;
next	1.91;

1.91
date	2009.09.23.12.03.31;	author nicm;	state Exp;
branches;
next	1.90;

1.90
date	2009.09.23.06.18.48;	author nicm;	state Exp;
branches;
next	1.89;

1.89
date	2009.09.22.12.38.10;	author nicm;	state Exp;
branches;
next	1.88;

1.88
date	2009.09.21.07.45.10;	author jmc;	state Exp;
branches;
next	1.87;

1.87
date	2009.09.20.19.15.02;	author nicm;	state Exp;
branches;
next	1.86;

1.86
date	2009.09.18.15.19.27;	author nicm;	state Exp;
branches;
next	1.85;

1.85
date	2009.09.10.17.16.24;	author nicm;	state Exp;
branches;
next	1.84;

1.84
date	2009.09.07.21.12.12;	author nicm;	state Exp;
branches;
next	1.83;

1.83
date	2009.09.07.10.49.32;	author nicm;	state Exp;
branches;
next	1.82;

1.82
date	2009.09.02.17.34.57;	author nicm;	state Exp;
branches;
next	1.81;

1.81
date	2009.09.02.16.38.35;	author nicm;	state Exp;
branches;
next	1.80;

1.80
date	2009.09.02.06.33.20;	author nicm;	state Exp;
branches;
next	1.79;

1.79
date	2009.09.01.13.09.50;	author nicm;	state Exp;
branches;
next	1.78;

1.78
date	2009.08.31.20.46.19;	author nicm;	state Exp;
branches;
next	1.77;

1.77
date	2009.08.31.11.52.32;	author stsp;	state Exp;
branches;
next	1.76;

1.76
date	2009.08.25.12.18.51;	author nicm;	state Exp;
branches;
next	1.75;

1.75
date	2009.08.23.18.21.02;	author nicm;	state Exp;
branches;
next	1.74;

1.74
date	2009.08.19.16.10.26;	author jmc;	state Exp;
branches;
next	1.73;

1.73
date	2009.08.19.10.39.50;	author nicm;	state Exp;
branches;
next	1.72;

1.72
date	2009.08.18.16.21.04;	author nicm;	state Exp;
branches;
next	1.71;

1.71
date	2009.08.18.07.23.43;	author nicm;	state Exp;
branches;
next	1.70;

1.70
date	2009.08.18.07.08.26;	author nicm;	state Exp;
branches;
next	1.69;

1.69
date	2009.08.13.20.11.58;	author nicm;	state Exp;
branches;
next	1.68;

1.68
date	2009.08.13.19.04.00;	author nicm;	state Exp;
branches;
next	1.67;

1.67
date	2009.08.10.17.14.55;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2009.08.09.16.03.05;	author jmc;	state Exp;
branches;
next	1.65;

1.65
date	2009.08.09.15.25.56;	author nicm;	state Exp;
branches;
next	1.64;

1.64
date	2009.08.09.14.35.15;	author nicm;	state Exp;
branches;
next	1.63;

1.63
date	2009.08.08.21.52.43;	author nicm;	state Exp;
branches;
next	1.62;

1.62
date	2009.08.08.20.36.42;	author nicm;	state Exp;
branches;
next	1.61;

1.61
date	2009.08.07.15.39.10;	author nicm;	state Exp;
branches;
next	1.60;

1.60
date	2009.08.07.12.24.16;	author nicm;	state Exp;
branches;
next	1.59;

1.59
date	2009.08.06.21.06.35;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2009.08.04.18.45.57;	author nicm;	state Exp;
branches;
next	1.57;

1.57
date	2009.08.04.18.41.28;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2009.08.04.07.56.38;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2009.08.03.14.34.47;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2009.08.03.14.10.54;	author nicm;	state Exp;
branches;
next	1.53;

1.53
date	2009.07.30.16.59.24;	author jmc;	state Exp;
branches;
next	1.52;

1.52
date	2009.07.30.13.45.56;	author nicm;	state Exp;
branches;
next	1.51;

1.51
date	2009.07.30.13.31.22;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2009.07.30.07.04.50;	author nicm;	state Exp;
branches;
next	1.49;

1.49
date	2009.07.28.17.05.10;	author nicm;	state Exp;
branches;
next	1.48;

1.48
date	2009.07.28.07.03.32;	author nicm;	state Exp;
branches;
next	1.47;

1.47
date	2009.07.28.06.48.44;	author nicm;	state Exp;
branches;
next	1.46;

1.46
date	2009.07.27.12.11.11;	author nicm;	state Exp;
branches;
next	1.45;

1.45
date	2009.07.24.14.52.47;	author nicm;	state Exp;
branches;
next	1.44;

1.44
date	2009.07.24.14.50.24;	author sthen;	state Exp;
branches;
next	1.43;

1.43
date	2009.07.22.21.23.29;	author nicm;	state Exp;
branches;
next	1.42;

1.42
date	2009.07.20.15.51.55;	author nicm;	state Exp;
branches;
next	1.41;

1.41
date	2009.07.20.14.32.09;	author nicm;	state Exp;
branches;
next	1.40;

1.40
date	2009.07.20.09.15.18;	author nicm;	state Exp;
branches;
next	1.39;

1.39
date	2009.07.19.14.07.47;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.37;

1.37
date	2009.07.18.14.59.25;	author nicm;	state Exp;
branches;
next	1.36;

1.36
date	2009.07.17.20.37.03;	author nicm;	state Exp;
branches;
next	1.35;

1.35
date	2009.07.17.18.45.08;	author nicm;	state Exp;
branches;
next	1.34;

1.34
date	2009.07.17.15.03.11;	author nicm;	state Exp;
branches;
next	1.33;

1.33
date	2009.07.17.13.38.03;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2009.07.16.22.50.49;	author nicm;	state Exp;
branches;
next	1.31;

1.31
date	2009.07.15.08.05.56;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2009.07.13.20.14.23;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2009.07.13.17.47.46;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2009.07.12.23.45.03;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2009.07.12.16.15.34;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2009.07.12.16.07.56;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2009.07.11.20.04.19;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.11.19.14.56;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2009.07.10.19.01.40;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2009.07.10.05.50.54;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2009.07.10.05.43.01;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2009.07.09.15.47.49;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2009.07.08.05.26.45;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2009.07.06.19.50.04;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.26.22.47.06;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.24.22.49.56;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.24.08.13.22;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.23.23.26.08;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.23.22.13.11;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.04.13.36.25;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.03.17.04.16;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.03.16.54.26;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.03.15.58.40;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.03.15.47.14;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.03.09.29.06;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.03.06.49.05;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.02.23.39.32;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.02.16.46.00;	author sobrado;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.02.15.55.32;	author pyr;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.01.23.51.00;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.547
log
@Some new notifications, mainly for active pane and current window and
session:

    pane-mode-changed
    window-pane-changed
    client-session-changed
    session-window-changed

From Joshua Brot.
@
text
@.\" $OpenBSD: tmux.1,v 1.546 2017/05/03 05:53:34 nicm Exp $
.\"
.\" Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: May 3 2017 $
.Dt TMUX 1
.Os
.Sh NAME
.Nm tmux
.Nd terminal multiplexer
.Sh SYNOPSIS
.Nm tmux
.Bk -words
.Op Fl 2Cluv
.Op Fl c Ar shell-command
.Op Fl f Ar file
.Op Fl L Ar socket-name
.Op Fl S Ar socket-path
.Op Ar command Op Ar flags
.Ek
.Sh DESCRIPTION
.Nm
is a terminal multiplexer:
it enables a number of terminals to be created, accessed, and
controlled from a single screen.
.Nm
may be detached from a screen
and continue running in the background,
then later reattached.
.Pp
When
.Nm
is started it creates a new
.Em session
with a single
.Em window
and displays it on screen.
A status line at the bottom of the screen
shows information on the current session
and is used to enter interactive commands.
.Pp
A session is a single collection of
.Em pseudo terminals
under the management of
.Nm .
Each session has one or more
windows linked to it.
A window occupies the entire screen
and may be split into rectangular panes,
each of which is a separate pseudo terminal
(the
.Xr pty 4
manual page documents the technical details of pseudo terminals).
Any number of
.Nm
instances may connect to the same session,
and any number of windows may be present in the same session.
Once all sessions are killed,
.Nm
exits.
.Pp
Each session is persistent and will survive accidental disconnection
(such as
.Xr ssh 1
connection timeout) or intentional detaching (with the
.Ql C-b d
key strokes).
.Nm
may be reattached using:
.Pp
.Dl $ tmux attach
.Pp
In
.Nm ,
a session is displayed on screen by a
.Em client
and all sessions are managed by a single
.Em server .
The server and each client are separate processes which communicate through a
socket in
.Pa /tmp .
.Pp
The options are as follows:
.Bl -tag -width "XXXXXXXXXXXX"
.It Fl 2
Force
.Nm
to assume the terminal supports 256 colours.
.It Fl C
Start in control mode (see the
.Sx CONTROL MODE
section).
Given twice
.Xo ( Fl CC ) Xc
disables echo.
.It Fl c Ar shell-command
Execute
.Ar shell-command
using the default shell.
If necessary, the
.Nm
server will be started to retrieve the
.Ic default-shell
option.
This option is for compatibility with
.Xr sh 1
when
.Nm
is used as a login shell.
.It Fl f Ar file
Specify an alternative configuration file.
By default,
.Nm
loads the system configuration file from
.Pa /etc/tmux.conf ,
if present, then looks for a user configuration file at
.Pa ~/.tmux.conf .
.Pp
The configuration file is a set of
.Nm
commands which are executed in sequence when the server is first started.
.Nm
loads configuration files once when the server process has started.
The
.Ic source-file
command may be used to load a file later.
.Pp
.Nm
shows any error messages from commands in configuration files in the first
session created, and continues to process the rest of the configuration file.
.It Fl L Ar socket-name
.Nm
stores the server socket in a directory under
.Ev TMUX_TMPDIR
or
.Pa /tmp
if it is unset.
The default socket is named
.Em default .
This option allows a different socket name to be specified, allowing several
independent
.Nm
servers to be run.
Unlike
.Fl S
a full path is not necessary: the sockets are all created in the same
directory.
.Pp
If the socket is accidentally removed, the
.Dv SIGUSR1
signal may be sent to the
.Nm
server process to recreate it (note that this will fail if any parent
directories are missing).
.It Fl l
Behave as a login shell.
This flag currently has no effect and is for compatibility with other shells
when using tmux as a login shell.
.It Fl S Ar socket-path
Specify a full alternative path to the server socket.
If
.Fl S
is specified, the default socket directory is not used and any
.Fl L
flag is ignored.
.It Fl u
When starting,
.Nm
looks for the
.Ev LC_ALL ,
.Ev LC_CTYPE
and
.Ev LANG
environment variables: if the first found contains
.Ql UTF-8 ,
then the terminal is assumed to support UTF-8.
This is not always correct: the
.Fl u
flag explicitly informs
.Nm
that UTF-8 is supported.
.Pp
Note that
.Nm
itself always accepts UTF-8; this controls whether it will send UTF-8
characters to the terminal it is running (if not, they are replaced by
.Ql _ ) .
.It Fl v
Request verbose logging.
This option may be specified multiple times for increasing verbosity.
Log messages will be saved into
.Pa tmux-client-PID.log
and
.Pa tmux-server-PID.log
files in the current directory, where
.Em PID
is the PID of the server or client process.
.It Ar command Op Ar flags
This specifies one of a set of commands used to control
.Nm ,
as described in the following sections.
If no commands are specified, the
.Ic new-session
command is assumed.
.El
.Sh KEY BINDINGS
.Nm
may be controlled from an attached client by using a key combination of a
prefix key,
.Ql C-b
(Ctrl-b) by default, followed by a command key.
.Pp
The default command key bindings are:
.Pp
.Bl -tag -width "XXXXXXXXXX" -offset indent -compact
.It C-b
Send the prefix key (C-b) through to the application.
.It C-o
Rotate the panes in the current window forwards.
.It C-z
Suspend the
.Nm
client.
.It !
Break the current pane out of the window.
.It \&"
Split the current pane into two, top and bottom.
.It #
List all paste buffers.
.It $
Rename the current session.
.It %
Split the current pane into two, left and right.
.It &
Kill the current window.
.It '
Prompt for a window index to select.
.It \&(
Switch the attached client to the previous session.
.It \&)
Switch the attached client to the next session.
.It ,
Rename the current window.
.It -
Delete the most recently copied buffer of text.
.It .
Prompt for an index to move the current window.
.It 0 to 9
Select windows 0 to 9.
.It :
Enter the
.Nm
command prompt.
.It ;
Move to the previously active pane.
.It =
Choose which buffer to paste interactively from a list.
.It \&?
List all key bindings.
.It D
Choose a client to detach.
.It L
Switch the attached client back to the last session.
.It \&[
Enter copy mode to copy text or view the history.
.It \&]
Paste the most recently copied buffer of text.
.It c
Create a new window.
.It d
Detach the current client.
.It f
Prompt to search for text in open windows.
.It i
Display some information about the current window.
.It l
Move to the previously selected window.
.It n
Change to the next window.
.It o
Select the next pane in the current window.
.It p
Change to the previous window.
.It q
Briefly display pane indexes.
.It r
Force redraw of the attached client.
.It m
Mark the current pane (see
.Ic select-pane
.Fl m ) .
.It M
Clear the marked pane.
.It s
Select a new session for the attached client interactively.
.It t
Show the time.
.It w
Choose the current window interactively.
.It x
Kill the current pane.
.It z
Toggle zoom state of the current pane.
.It {
Swap the current pane with the previous pane.
.It }
Swap the current pane with the next pane.
.It ~
Show previous messages from
.Nm ,
if any.
.It Page Up
Enter copy mode and scroll one page up.
.It Up, Down
.It Left, Right
Change to the pane above, below, to the left, or to the right of the current
pane.
.It M-1 to M-5
Arrange panes in one of the five preset layouts: even-horizontal,
even-vertical, main-horizontal, main-vertical, or tiled.
.It Space
Arrange the current window in the next preset layout.
.It M-n
Move to the next window with a bell or activity marker.
.It M-o
Rotate the panes in the current window backwards.
.It M-p
Move to the previous window with a bell or activity marker.
.It C-Up, C-Down
.It C-Left, C-Right
Resize the current pane in steps of one cell.
.It M-Up, M-Down
.It M-Left, M-Right
Resize the current pane in steps of five cells.
.El
.Pp
Key bindings may be changed with the
.Ic bind-key
and
.Ic unbind-key
commands.
.Sh COMMANDS
This section contains a list of the commands supported by
.Nm .
Most commands accept the optional
.Fl t
(and sometimes
.Fl s )
argument with one of
.Ar target-client ,
.Ar target-session
.Ar target-window ,
or
.Ar target-pane .
These specify the client, session, window or pane which a command should affect.
.Pp
.Ar target-client
should be the name of the client,
typically the
.Xr pty 4
file to which the client is connected, for example either of
.Pa /dev/ttyp1
or
.Pa ttyp1
for the client attached to
.Pa /dev/ttyp1 .
If no client is specified,
.Nm
attempts to work out the client currently in use; if that fails, an error is
reported.
Clients may be listed with the
.Ic list-clients
command.
.Pp
.Ar target-session
is tried as, in order:
.Bl -enum -offset Ds
.It
A session ID prefixed with a $.
.It
An exact name of a session (as listed by the
.Ic list-sessions
command).
.It
The start of a session name, for example
.Ql mysess
would match a session named
.Ql mysession .
.It
An
.Xr fnmatch 3
pattern which is matched against the session name.
.El
.Pp
If the session name is prefixed with an
.Ql = ,
only an exact match is accepted (so
.Ql =mysess
will only match exactly
.Ql mysess ,
not
.Ql mysession ) .
.Pp
If a single session is found, it is used as the target session; multiple matches
produce an error.
If a session is omitted, the current session is used if available; if no
current session is available, the most recently used is chosen.
.Pp
.Ar target-window
(or
.Ar src-window
or
.Ar dst-window )
specifies a window in the form
.Em session Ns \&: Ns Em window .
.Em session
follows the same rules as for
.Ar target-session ,
and
.Em window
is looked for in order as:
.Bl -enum -offset Ds
.It
A special token, listed below.
.It
A window index, for example
.Ql mysession:1
is window 1 in session
.Ql mysession .
.It
A window ID, such as @@1.
.It
An exact window name, such as
.Ql mysession:mywindow .
.It
The start of a window name, such as
.Ql mysession:mywin .
.It
As an
.Xr fnmatch 3
pattern matched against the window name.
.El
.Pp
Like sessions, a
.Ql =
prefix will do an exact match only.
An empty window name specifies the next unused index if appropriate (for
example the
.Ic new-window
and
.Ic link-window
commands)
otherwise the current window in
.Em session
is chosen.
.Pp
The following special tokens are available to indicate particular windows.
Each has a single-character alternative form.
.Bl -column "XXXXXXXXXX" "X"
.It Sy "Token" Ta Sy "" Ta Sy "Meaning"
.It Li "{start}" Ta "^" Ta "The lowest-numbered window"
.It Li "{end}" Ta "$" Ta "The highest-numbered window"
.It Li "{last}" Ta "!" Ta "The last (previously current) window"
.It Li "{next}" Ta "+" Ta "The next window by number"
.It Li "{previous}" Ta "-" Ta "The previous window by number"
.El
.Pp
.Ar target-pane
(or
.Ar src-pane
or
.Ar dst-pane )
may be a pane ID or takes a similar form to
.Ar target-window
but with the optional addition of a period followed by a pane index or pane ID,
for example:
.Ql mysession:mywindow.1 .
If the pane index is omitted, the currently active pane in the specified
window is used.
The following special tokens are available for the pane index:
.Bl -column "XXXXXXXXXXXXXX" "X"
.It Sy "Token" Ta Sy "" Ta Sy "Meaning"
.It Li "{last}" Ta "!" Ta "The last (previously active) pane"
.It Li "{next}" Ta "+" Ta "The next pane by number"
.It Li "{previous}" Ta "-" Ta "The previous pane by number"
.It Li "{top}" Ta "" Ta "The top pane"
.It Li "{bottom}" Ta "" Ta "The bottom pane"
.It Li "{left}" Ta "" Ta "The leftmost pane"
.It Li "{right}" Ta "" Ta "The rightmost pane"
.It Li "{top-left}" Ta "" Ta "The top-left pane"
.It Li "{top-right}" Ta "" Ta "The top-right pane"
.It Li "{bottom-left}" Ta "" Ta "The bottom-left pane"
.It Li "{bottom-right}" Ta "" Ta "The bottom-right pane"
.It Li "{up-of}" Ta "" Ta "The pane above the active pane"
.It Li "{down-of}" Ta "" Ta "The pane below the active pane"
.It Li "{left-of}" Ta "" Ta "The pane to the left of the active pane"
.It Li "{right-of}" Ta "" Ta "The pane to the right of the active pane"
.El
.Pp
The tokens
.Ql +
and
.Ql -
may be followed by an offset, for example:
.Bd -literal -offset indent
select-window -t:+2
.Ed
.Pp
In addition,
.Em target-session ,
.Em target-window
or
.Em target-pane
may consist entirely of the token
.Ql {mouse}
(alternative form
.Ql = )
to specify the most recent mouse event
(see the
.Sx MOUSE SUPPORT
section)
or
.Ql {marked}
(alternative form
.Ql ~ )
to specify the marked pane (see
.Ic select-pane
.Fl m ) .
.Pp
Sessions, window and panes are each numbered with a unique ID; session IDs are
prefixed with a
.Ql $ ,
windows with a
.Ql @@ ,
and panes with a
.Ql % .
These are unique and are unchanged for the life of the session, window or pane
in the
.Nm
server.
The pane ID is passed to the child process of the pane in the
.Ev TMUX_PANE
environment variable.
IDs may be displayed using the
.Ql session_id ,
.Ql window_id ,
or
.Ql pane_id
formats (see the
.Sx FORMATS
section) and the
.Ic display-message ,
.Ic list-sessions ,
.Ic list-windows
or
.Ic list-panes
commands.
.Pp
.Ar shell-command
arguments are
.Xr sh 1
commands.
This may be a single argument passed to the shell, for example:
.Bd -literal -offset indent
new-window 'vi /etc/passwd'
.Ed
.Pp
Will run:
.Bd -literal -offset indent
/bin/sh -c 'vi /etc/passwd'
.Ed
.Pp
Additionally, the
.Ic new-window ,
.Ic new-session ,
.Ic split-window ,
.Ic respawn-window
and
.Ic respawn-pane
commands allow
.Ar shell-command
to be given as multiple arguments and executed directly (without
.Ql sh -c ) .
This can avoid issues with shell quoting.
For example:
.Bd -literal -offset indent
$ tmux new-window vi /etc/passwd
.Ed
.Pp
Will run
.Xr vi 1
directly without invoking the shell.
.Pp
.Ar command
.Op Ar arguments
refers to a
.Nm
command, passed with the command and arguments separately, for example:
.Bd -literal -offset indent
bind-key F1 set-window-option force-width 81
.Ed
.Pp
Or if using
.Xr sh 1 :
.Bd -literal -offset indent
$ tmux bind-key F1 set-window-option force-width 81
.Ed
.Pp
Multiple commands may be specified together as part of a
.Em command sequence .
Each command should be separated by spaces and a semicolon;
commands are executed sequentially from left to right and
lines ending with a backslash continue on to the next line,
except when escaped by another backslash.
A literal semicolon may be included by escaping it with a backslash (for
example, when specifying a command sequence to
.Ic bind-key ) .
.Pp
Example
.Nm
commands include:
.Bd -literal -offset indent
refresh-client -t/dev/ttyp2

rename-session -tfirst newname

set-window-option -t:0 monitor-activity on

new-window ; split-window -d

bind-key R source-file ~/.tmux.conf \e; \e
	display-message "source-file done"
.Ed
.Pp
Or from
.Xr sh 1 :
.Bd -literal -offset indent
$ tmux kill-window -t :1

$ tmux new-window \e; split-window -d

$ tmux new-session -d 'vi /etc/passwd' \e; split-window -d \e; attach
.Ed
.Sh CLIENTS AND SESSIONS
The
.Nm
server manages clients, sessions, windows and panes.
Clients are attached to sessions to interact with them, either
when they are created with the
.Ic new-session
command, or later with the
.Ic attach-session
command.
Each session has one or more windows
.Em linked
into it.
Windows may be linked to multiple sessions and are made up of one or
more panes,
each of which contains a pseudo terminal.
Commands for creating, linking and otherwise manipulating windows
are covered
in the
.Sx WINDOWS AND PANES
section.
.Pp
The following commands are available to manage clients and sessions:
.Bl -tag -width Ds
.It Xo Ic attach-session
.Op Fl dEr
.Op Fl c Ar working-directory
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic attach )
If run from outside
.Nm ,
create a new client in the current terminal and attach it to
.Ar target-session .
If used from inside, switch the current client.
If
.Fl d
is specified, any other clients attached to the session are detached.
.Fl r
signifies the client is read-only (only keys bound to the
.Ic detach-client
or
.Ic switch-client
commands have any effect)
.Pp
If no server is started,
.Ic attach-session
will attempt to start it; this will fail unless sessions are created in the
configuration file.
.Pp
The
.Ar target-session
rules for
.Ic attach-session
are slightly adjusted: if
.Nm
needs to select the most recently used session, it will prefer the most
recently used
.Em unattached
session.
.Pp
.Fl c
will set the session working directory (used for new windows) to
.Ar working-directory .
.Pp
If
.Fl E
is used, the
.Ic update-environment
option will not be applied.
.It Xo Ic detach-client
.Op Fl aP
.Op Fl E Ar shell-command
.Op Fl s Ar target-session
.Op Fl t Ar target-client
.Xc
.D1 (alias: Ic detach )
Detach the current client if bound to a key, the client specified with
.Fl t ,
or all clients currently attached to the session specified by
.Fl s .
The
.Fl a
option kills all but the client given with
.Fl t .
If
.Fl P
is given, send SIGHUP to the parent process of the client, typically causing it
to exit.
With
.Fl E ,
run
.Ar shell-command
to replace the client.
.It Ic has-session Op Fl t Ar target-session
.D1 (alias: Ic has )
Report an error and exit with 1 if the specified session does not exist.
If it does exist, exit with 0.
.It Ic kill-server
Kill the
.Nm
server and clients and destroy all sessions.
.It Xo Ic kill-session
.Op Fl aC
.Op Fl t Ar target-session
.Xc
Destroy the given session, closing any windows linked to it and no other
sessions, and detaching all clients attached to it.
If
.Fl a
is given, all sessions but the specified one is killed.
The
.Fl C
flag clears alerts (bell, activity, or silence) in all windows linked to the
session.
.It Xo Ic list-clients
.Op Fl F Ar format
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic lsc )
List all clients attached to the server.
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
If
.Ar target-session
is specified, list only clients connected to that session.
.It Xo Ic list-commands
.Op Fl F Ar format
.Xc
.D1 (alias: Ic lscm )
List the syntax of all commands supported by
.Nm .
.It Ic list-sessions Op Fl F Ar format
.D1 (alias: Ic ls )
List all sessions managed by the server.
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
.It Ic lock-client Op Fl t Ar target-client
.D1 (alias: Ic lockc )
Lock
.Ar target-client ,
see the
.Ic lock-server
command.
.It Ic lock-session Op Fl t Ar target-session
.D1 (alias: Ic locks )
Lock all clients attached to
.Ar target-session .
.It Xo Ic new-session
.Op Fl AdDEP
.Op Fl c Ar start-directory
.Op Fl F Ar format
.Op Fl n Ar window-name
.Op Fl s Ar session-name
.Op Fl t Ar group-name
.Op Fl x Ar width
.Op Fl y Ar height
.Op Ar shell-command
.Xc
.D1 (alias: Ic new )
Create a new session with name
.Ar session-name .
.Pp
The new session is attached to the current terminal unless
.Fl d
is given.
.Ar window-name
and
.Ar shell-command
are the name of and shell command to execute in the initial window.
If
.Fl d
is used,
.Fl x
and
.Fl y
specify the size of the initial window.
.Pp
If run from a terminal, any
.Xr termios 4
special characters are saved and used for new windows in the new session.
.Pp
The
.Fl A
flag makes
.Ic new-session
behave like
.Ic attach-session
if
.Ar session-name
already exists; in this case,
.Fl D
behaves like
.Fl d
to
.Ic attach-session .
.Pp
If
.Fl t
is given, it specifies a
.Ic session group .
Sessions in the same group share the same set of windows - new windows are
linked to all sessions in the group and any windows closed removed from all
sessions.
The current and previous window and any session options remain independent and
any session in a group may be killed without affecting the others.
The
.Ar group-name
argument may be:
.Bl -enum -width Ds
.It
the name of an existing group, in which case the new session is added to that
group;
.It
the name of an existing session - the new session is added to the same group
as that session, creating a new group if necessary;
.It
the name for a new group containing only the new session.
.El
.Pp
.Fl n
and
.Ar shell-command
are invalid if
.Fl t
is used.
.Pp
The
.Fl P
option prints information about the new session after it has been created.
By default, it uses the format
.Ql #{session_name}:
but a different format may be specified with
.Fl F .
.Pp
If
.Fl E
is used, the
.Ic update-environment
option will not be applied.
.It Xo Ic refresh-client
.Op Fl C Ar width,height
.Op Fl S
.Op Fl t Ar target-client
.Xc
.D1 (alias: Ic refresh )
Refresh the current client if bound to a key, or a single client if one is given
with
.Fl t .
If
.Fl S
is specified, only update the client's status line.
.Pp
.Fl C
sets the width and height of a control client.
.It Xo Ic rename-session
.Op Fl t Ar target-session
.Ar new-name
.Xc
.D1 (alias: Ic rename )
Rename the session to
.Ar new-name .
.It Xo Ic show-messages
.Op Fl JT
.Op Fl t Ar target-client
.Xc
.D1 (alias: Ic showmsgs )
Show client messages or server information.
Any messages displayed on the status line are saved in a per-client message
log, up to a maximum of the limit set by the
.Ar message-limit
server option.
With
.Fl t ,
display the log for
.Ar target-client .
.Fl J
and
.Fl T
show debugging information about jobs and terminals.
.It Xo Ic source-file
.Op Fl q
.Ar path
.Xc
.D1 (alias: Ic source )
Execute commands from
.Ar path
(which may be a
.Xr glob 3
pattern).
If
.Fl q
is given, no error will be returned if
.Ar path
does not exist.
.Pp
Within a configuration file, commands may be made conditional by surrounding
them with
.Em %if
and
.Em %endif
lines.
The argument to
.Em %if
is expanded as a format and if it evaluates to false
(zero or empty), subsequent lines are ignored until
.Em %endif .
For example:
.Bd -literal -offset indent
%if #{==:#{host},myhost}
set -g status-style bg=red
%endif
.Ed
.Pp
Will change the status line to red if running on
.Ql myhost .
.Em %if
may not be nested.
.It Ic start-server
.D1 (alias: Ic start )
Start the
.Nm
server, if not already running, without creating any sessions.
.It Xo Ic suspend-client
.Op Fl t Ar target-client
.Xc
.D1 (alias: Ic suspendc )
Suspend a client by sending
.Dv SIGTSTP
(tty stop).
.It Xo Ic switch-client
.Op Fl Elnpr
.Op Fl c Ar target-client
.Op Fl t Ar target-session
.Op Fl T Ar key-table
.Xc
.D1 (alias: Ic switchc )
Switch the current session for client
.Ar target-client
to
.Ar target-session .
If
.Fl l ,
.Fl n
or
.Fl p
is used, the client is moved to the last, next or previous session
respectively.
.Fl r
toggles whether a client is read-only (see the
.Ic attach-session
command).
.Pp
If
.Fl E
is used,
.Ic update-environment
option will not be applied.
.Pp
.Fl T
sets the client's key table; the next key from the client will be interpreted from
.Ar key-table .
This may be used to configure multiple prefix keys, or to bind commands to
sequences of keys.
For example, to make typing
.Ql abc
run the
.Ic list-keys
command:
.Bd -literal -offset indent
bind-key -Ttable2 c list-keys
bind-key -Ttable1 b switch-client -Ttable2
bind-key -Troot   a switch-client -Ttable1
.Ed
.El
.Sh WINDOWS AND PANES
A
.Nm
window may be in one of two modes.
The default permits direct access to the terminal attached to the window.
The other is copy mode, which permits a section of a window or its
history to be copied to a
.Em paste buffer
for later insertion into another window.
This mode is entered with the
.Ic copy-mode
command, bound to
.Ql \&[
by default.
It is also entered when a command that produces output, such as
.Ic list-keys ,
is executed from a key binding.
.Pp
Commands are sent to copy mode using the
.Fl X
flag to the
.Ic send-keys
command.
When a key is pressed, copy mode automatically uses one of two key tables,
depending on the
.Ic mode-keys
option:
.Ic copy-mode
for emacs, or
.Ic copy-mode-vi
for vi.
Key tables may be viewed with the
.Ic list-keys
command.
.Pp
The following commands are supported in copy mode:
.Bl -column "CommandXXXXXXXXXXXXXXXXXXXXXXXXXX" "viXXXXXXXXXX" "emacs" -offset indent
.It Sy "Command" Ta Sy "vi" Ta Sy "emacs"
.It Li "append-selection" Ta "" Ta ""
.It Li "append-selection-and-cancel" Ta "A" Ta ""
.It Li "back-to-indentation" Ta "^" Ta "M-m"
.It Li "begin-selection" Ta "Space" Ta "C-Space"
.It Li "bottom-line" Ta "L" Ta ""
.It Li "cancel" Ta "q" Ta "Escape"
.It Li "clear-selection" Ta "Escape" Ta "C-g"
.It Li "copy-end-of-line" Ta "D" Ta "C-k"
.It Li "copy-line" Ta "" Ta ""
.It Li "copy-pipe <command>" Ta "" Ta ""
.It Li "copy-pipe-and-cancel <command>" Ta "" Ta ""
.It Li "copy-selection" Ta "" Ta ""
.It Li "copy-selection-and-cancel" Ta "Enter" Ta "M-w"
.It Li "cursor-down" Ta "j" Ta "Down"
.It Li "cursor-left" Ta "h" Ta "Left"
.It Li "cursor-right" Ta "l" Ta "Right"
.It Li "cursor-up" Ta "k" Ta "Up"
.It Li "end-of-line" Ta "$" Ta "C-e"
.It Li "goto-line <line>" Ta ":" Ta "g"
.It Li "halfpage-down" Ta "C-d" Ta "M-Down"
.It Li "halfpage-up" Ta "C-u" Ta "M-Up"
.It Li "history-bottom" Ta "G" Ta "M-<"
.It Li "history-top" Ta "g" Ta "M->"
.It Li "jump-again" Ta ";" Ta ";"
.It Li "jump-backward <to>" Ta "F" Ta "F"
.It Li "jump-forward <to>" Ta "f" Ta "f"
.It Li "jump-reverse" Ta "," Ta ","
.It Li "jump-to-backward <to>" Ta "T" Ta ""
.It Li "jump-to-forward <to>" Ta "t" Ta ""
.It Li "middle-line" Ta "M" Ta "M-r"
.It Li "next-paragraph" Ta "}" Ta "M-}"
.It Li "next-space" Ta "W" Ta ""
.It Li "next-space-end" Ta "E" Ta ""
.It Li "next-word" Ta "w" Ta ""
.It Li "next-word-end" Ta "e" Ta "M-f"
.It Li "other-end" Ta "o" Ta ""
.It Li "page-down" Ta "C-f" Ta "PageDown"
.It Li "page-up" Ta "C-b" Ta "PageUp"
.It Li "previous-paragraph" Ta "{" Ta "M-{"
.It Li "previous-space" Ta "B" Ta ""
.It Li "previous-word" Ta "b" Ta "M-b"
.It Li "rectangle-toggle" Ta "v" Ta "R"
.It Li "scroll-down" Ta "C-e" Ta "C-Down"
.It Li "scroll-up" Ta "C-y" Ta "C-Up"
.It Li "search-again" Ta "n" Ta "n"
.It Li "search-backward <for>" Ta "?" Ta ""
.It Li "search-forward <for>" Ta "/" Ta ""
.It Li "search-backward-incremental <for>" Ta "" Ta "C-r"
.It Li "search-forward-incremental <for>" Ta "" Ta "C-s"
.It Li "search-reverse" Ta "N" Ta "N"
.It Li "select-line" Ta "V" Ta ""
.It Li "start-of-line" Ta "0" Ta "C-a"
.It Li "stop-selection" Ta "" Ta ""
.It Li "top-line" Ta "H" Ta "M-R"
.El
.Pp
The next and previous word keys use space and the
.Ql - ,
.Ql _
and
.Ql @@
characters as word delimiters by default, but this can be adjusted by
setting the
.Em word-separators
session option.
Next word moves to the start of the next word, next word end to the end of the
next word and previous word to the start of the previous word.
The three next and previous space keys work similarly but use a space alone as
the word separator.
.Pp
The jump commands enable quick movement within a line.
For instance, typing
.Ql f
followed by
.Ql /
will move the cursor to the next
.Ql /
character on the current line.
A
.Ql \&;
will then jump to the next occurrence.
.Pp
Commands in copy mode may be prefaced by an optional repeat count.
With vi key bindings, a prefix is entered using the number keys; with
emacs, the Alt (meta) key and a number begins prefix entry.
.Pp
The synopsis for the
.Ic copy-mode
command is:
.Bl -tag -width Ds
.It Xo Ic copy-mode
.Op Fl Meu
.Op Fl t Ar target-pane
.Xc
Enter copy mode.
The
.Fl u
option scrolls one page up.
.Fl M
begins a mouse drag (only valid if bound to a mouse key binding, see
.Sx MOUSE SUPPORT ) .
.Fl e
specifies that scrolling to the bottom of the history (to the visible screen)
should exit copy mode.
While in copy mode, pressing a key other than those used for scrolling will
disable this behaviour.
This is intended to allow fast scrolling through a pane's history, for
example with:
.Bd -literal -offset indent
bind PageUp copy-mode -eu
.Ed
.El
.Pp
Each window displayed by
.Nm
may be split into one or more
.Em panes ;
each pane takes up a certain area of the display and is a separate terminal.
A window may be split into panes using the
.Ic split-window
command.
Windows may be split horizontally (with the
.Fl h
flag) or vertically.
Panes may be resized with the
.Ic resize-pane
command (bound to
.Ql C-Up ,
.Ql C-Down
.Ql C-Left
and
.Ql C-Right
by default), the current pane may be changed with the
.Ic select-pane
command and the
.Ic rotate-window
and
.Ic swap-pane
commands may be used to swap panes without changing their position.
Panes are numbered beginning from zero in the order they are created.
.Pp
A number of preset
.Em layouts
are available.
These may be selected with the
.Ic select-layout
command or cycled with
.Ic next-layout
(bound to
.Ql Space
by default); once a layout is chosen, panes within it may be moved and resized
as normal.
.Pp
The following layouts are supported:
.Bl -tag -width Ds
.It Ic even-horizontal
Panes are spread out evenly from left to right across the window.
.It Ic even-vertical
Panes are spread evenly from top to bottom.
.It Ic main-horizontal
A large (main) pane is shown at the top of the window and the remaining panes
are spread from left to right in the leftover space at the bottom.
Use the
.Em main-pane-height
window option to specify the height of the top pane.
.It Ic main-vertical
Similar to
.Ic main-horizontal
but the large pane is placed on the left and the others spread from top to
bottom along the right.
See the
.Em main-pane-width
window option.
.It Ic tiled
Panes are spread out as evenly as possible over the window in both rows and
columns.
.El
.Pp
In addition,
.Ic select-layout
may be used to apply a previously used layout - the
.Ic list-windows
command displays the layout of each window in a form suitable for use with
.Ic select-layout .
For example:
.Bd -literal -offset indent
$ tmux list-windows
0: ksh [159x48]
    layout: bb62,159x48,0,0{79x48,0,0,79x48,80,0}
$ tmux select-layout bb62,159x48,0,0{79x48,0,0,79x48,80,0}
.Ed
.Pp
.Nm
automatically adjusts the size of the layout for the current window size.
Note that a layout cannot be applied to a window with more panes than that
from which the layout was originally defined.
.Pp
Commands related to windows and panes are as follows:
.Bl -tag -width Ds
.It Xo Ic break-pane
.Op Fl dP
.Op Fl F Ar format
.Op Fl n Ar window-name
.Op Fl s Ar src-pane
.Op Fl t Ar dst-window
.Xc
.D1 (alias: Ic breakp )
Break
.Ar src-pane
off from its containing window to make it the only pane in
.Ar dst-window .
If
.Fl d
is given, the new window does not become the current window.
The
.Fl P
option prints information about the new window after it has been created.
By default, it uses the format
.Ql #{session_name}:#{window_index}
but a different format may be specified with
.Fl F .
.It Xo Ic capture-pane
.Op Fl aepPqCJ
.Op Fl b Ar buffer-name
.Op Fl E Ar end-line
.Op Fl S Ar start-line
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic capturep )
Capture the contents of a pane.
If
.Fl p
is given, the output goes to stdout, otherwise to the buffer specified with
.Fl b
or a new buffer if omitted.
If
.Fl a
is given, the alternate screen is used, and the history is not accessible.
If no alternate screen exists, an error will be returned unless
.Fl q
is given.
If
.Fl e
is given, the output includes escape sequences for text and background
attributes.
.Fl C
also escapes non-printable characters as octal \exxx.
.Fl J
joins wrapped lines and preserves trailing spaces at each line's end.
.Fl P
captures only any output that the pane has received that is the beginning of an
as-yet incomplete escape sequence.
.Pp
.Fl S
and
.Fl E
specify the starting and ending line numbers, zero is the first line of the
visible pane and negative numbers are lines in the history.
.Ql -
to
.Fl S
is the start of the history and to
.Fl E
the end of the visible pane.
The default is to capture only the visible contents of the pane.
.It Xo
.Ic choose-client
.Op Fl F Ar format
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window into client choice mode, allowing a client to be selected
interactively from a list.
After a client is chosen,
.Ql %%
is replaced by the client
.Xr pty 4
path in
.Ar template
and the result executed as a command.
If
.Ar template
is not given, "detach-client -t '%%'" is used.
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
This command works only if at least one client is attached.
.It Xo
.Ic choose-session
.Op Fl F Ar format
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window into session choice mode, where a session may be selected
interactively from a list.
When one is chosen,
.Ql %%
is replaced by the session name in
.Ar template
and the result executed as a command.
If
.Ar template
is not given, "switch-client -t '%%'" is used.
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
This command works only if at least one client is attached.
.It Xo
.Ic choose-tree
.Op Fl suw
.Op Fl b Ar session-template
.Op Fl c Ar window-template
.Op Fl S Ar format
.Op Fl W Ar format
.Op Fl t Ar target-window
.Xc
Put a window into tree choice mode, where either sessions or windows may be
selected interactively from a list.
By default, windows belonging to a session are indented to show their
relationship to a session.
.Pp
Note that the
.Ic choose-window
and
.Ic choose-session
commands are wrappers around
.Ic choose-tree .
.Pp
If
.Fl s
is given, will show sessions.
If
.Fl w
is given, will show windows.
.Pp
By default, the tree is collapsed and sessions must be expanded to windows
with the right arrow key.
The
.Fl u
option will start with all sessions expanded instead.
.Pp
If
.Fl b
is given, will override the default session command.
Note that
.Ql %%
can be used and will be replaced with the session name.
The default option if not specified is "switch-client -t '%%'".
If
.Fl c
is given, will override the default window command.
Like
.Fl b ,
.Ql %%
can be used and will be replaced with the session name and window index.
When a window is chosen from the list, the session command is run before the
window command.
.Pp
.Fl S
uses
.Ar format
instead of the default session
format and
.Fl W
instead of the default window format.
For the meaning of
.Ar format ,
see the
.Sx FORMATS
section.
.Pp
This command works only if at least one client is attached.
.It Xo
.Ic choose-window
.Op Fl F Ar format
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window into window choice mode, where a window may be chosen
interactively from a list.
After a window is selected,
.Ql %%
is replaced by the session name and window index in
.Ar template
and the result executed as a command.
If
.Ar template
is not given, "select-window -t '%%'" is used.
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
This command works only if at least one client is attached.
.It Xo
.Ic display-panes
.Op Fl t Ar target-client
.Op Ar template
.Xc
.D1 (alias: Ic displayp )
Display a visible indicator of each pane shown by
.Ar target-client .
See the
.Ic display-panes-time ,
.Ic display-panes-colour ,
and
.Ic display-panes-active-colour
session options.
While the indicator is on screen, a pane may be chosen with the
.Ql 0
to
.Ql 9
keys, which will cause
.Ar template
to be executed as a command with
.Ql %%
substituted by the pane ID.
The default
.Ar template
is "select-pane -t '%%'".
.It Xo Ic find-window
.Op Fl CNT
.Op Fl F Ar format
.Op Fl t Ar target-window
.Ar match-string
.Xc
.D1 (alias: Ic findw )
Search for the
.Xr fnmatch 3
pattern
.Ar match-string
in window names, titles, and visible content (but not history).
The flags control matching behavior:
.Fl C
matches only visible window contents,
.Fl N
matches only the window name and
.Fl T
matches only the window title.
The default is
.Fl CNT .
If only one window is matched, it'll be automatically selected,
otherwise a choice list is shown.
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
This command works only if at least one client is attached.
.It Xo Ic join-pane
.Op Fl bdhv
.Oo Fl l
.Ar size |
.Fl p Ar percentage Oc
.Op Fl s Ar src-pane
.Op Fl t Ar dst-pane
.Xc
.D1 (alias: Ic joinp )
Like
.Ic split-window ,
but instead of splitting
.Ar dst-pane
and creating a new pane, split it and move
.Ar src-pane
into the space.
This can be used to reverse
.Ic break-pane .
The
.Fl b
option causes
.Ar src-pane
to be joined to left of or above
.Ar dst-pane .
.Pp
If
.Fl s
is omitted and a marked pane is present (see
.Ic select-pane
.Fl m ) ,
the marked pane is used rather than the current pane.
.It Xo Ic kill-pane
.Op Fl a
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic killp )
Destroy the given pane.
If no panes remain in the containing window, it is also destroyed.
The
.Fl a
option kills all but the pane given with
.Fl t .
.It Xo Ic kill-window
.Op Fl a
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic killw )
Kill the current window or the window at
.Ar target-window ,
removing it from any sessions to which it is linked.
The
.Fl a
option kills all but the window given with
.Fl t .
.It Xo Ic last-pane
.Op Fl de
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic lastp )
Select the last (previously selected) pane.
.Fl e
enables or
.Fl d
disables input to the pane.
.It Ic last-window Op Fl t Ar target-session
.D1 (alias: Ic last )
Select the last (previously selected) window.
If no
.Ar target-session
is specified, select the last window of the current session.
.It Xo Ic link-window
.Op Fl adk
.Op Fl s Ar src-window
.Op Fl t Ar dst-window
.Xc
.D1 (alias: Ic linkw )
Link the window at
.Ar src-window
to the specified
.Ar dst-window .
If
.Ar dst-window
is specified and no such window exists, the
.Ar src-window
is linked there.
With
.Fl a ,
the window is moved to the next index up (following windows
are moved if necessary).
If
.Fl k
is given and
.Ar dst-window
exists, it is killed, otherwise an error is generated.
If
.Fl d
is given, the newly linked window is not selected.
.It Xo Ic list-panes
.Op Fl as
.Op Fl F Ar format
.Op Fl t Ar target
.Xc
.D1 (alias: Ic lsp )
If
.Fl a
is given,
.Ar target
is ignored and all panes on the server are listed.
If
.Fl s
is given,
.Ar target
is a session (or the current session).
If neither is given,
.Ar target
is a window (or the current window).
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
.It Xo Ic list-windows
.Op Fl a
.Op Fl F Ar format
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic lsw )
If
.Fl a
is given, list all windows on the server.
Otherwise, list windows in the current session or in
.Ar target-session .
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
.It Xo Ic move-pane
.Op Fl bdhv
.Oo Fl l
.Ar size |
.Fl p Ar percentage Oc
.Op Fl s Ar src-pane
.Op Fl t Ar dst-pane
.Xc
.D1 (alias: Ic movep )
Like
.Ic join-pane ,
but
.Ar src-pane
and
.Ar dst-pane
may belong to the same window.
.It Xo Ic move-window
.Op Fl ardk
.Op Fl s Ar src-window
.Op Fl t Ar dst-window
.Xc
.D1 (alias: Ic movew )
This is similar to
.Ic link-window ,
except the window at
.Ar src-window
is moved to
.Ar dst-window .
With
.Fl r ,
all windows in the session are renumbered in sequential order, respecting
the
.Ic base-index
option.
.It Xo Ic new-window
.Op Fl adkP
.Op Fl c Ar start-directory
.Op Fl F Ar format
.Op Fl n Ar window-name
.Op Fl t Ar target-window
.Op Ar shell-command
.Xc
.D1 (alias: Ic neww )
Create a new window.
With
.Fl a ,
the new window is inserted at the next index up from the specified
.Ar target-window ,
moving windows up if necessary,
otherwise
.Ar target-window
is the new window location.
.Pp
If
.Fl d
is given, the session does not make the new window the current window.
.Ar target-window
represents the window to be created; if the target already exists an error is
shown, unless the
.Fl k
flag is used, in which case it is destroyed.
.Ar shell-command
is the command to execute.
If
.Ar shell-command
is not specified, the value of the
.Ic default-command
option is used.
.Fl c
specifies the working directory in which the new window is created.
.Pp
When the shell command completes, the window closes.
See the
.Ic remain-on-exit
option to change this behaviour.
.Pp
The
.Ev TERM
environment variable must be set to
.Ql screen
or
.Ql tmux
for all programs running
.Em inside
.Nm .
New windows will automatically have
.Ql TERM=screen
added to their environment, but care must be taken not to reset this in shell
start-up files.
.Pp
The
.Fl P
option prints information about the new window after it has been created.
By default, it uses the format
.Ql #{session_name}:#{window_index}
but a different format may be specified with
.Fl F .
.It Ic next-layout Op Fl t Ar target-window
.D1 (alias: Ic nextl )
Move a window to the next layout and rearrange the panes to fit.
.It Xo Ic next-window
.Op Fl a
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic next )
Move to the next window in the session.
If
.Fl a
is used, move to the next window with an alert.
.It Xo Ic pipe-pane
.Op Fl o
.Op Fl t Ar target-pane
.Op Ar shell-command
.Xc
.D1 (alias: Ic pipep )
Pipe any output sent by the program in
.Ar target-pane
to a shell command.
A pane may only be piped to one command at a time, any existing pipe is
closed before
.Ar shell-command
is executed.
The
.Ar shell-command
string may contain the special character sequences supported by the
.Ic status-left
option.
If no
.Ar shell-command
is given, the current pipe (if any) is closed.
.Pp
The
.Fl o
option only opens a new pipe if no previous pipe exists, allowing a pipe to
be toggled with a single key, for example:
.Bd -literal -offset indent
bind-key C-p pipe-pane -o 'cat >>~/output.#I-#P'
.Ed
.It Xo Ic previous-layout
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic prevl )
Move to the previous layout in the session.
.It Xo Ic previous-window
.Op Fl a
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic prev )
Move to the previous window in the session.
With
.Fl a ,
move to the previous window with an alert.
.It Xo Ic rename-window
.Op Fl t Ar target-window
.Ar new-name
.Xc
.D1 (alias: Ic renamew )
Rename the current window, or the window at
.Ar target-window
if specified, to
.Ar new-name .
.It Xo Ic resize-pane
.Op Fl DLMRUZ
.Op Fl t Ar target-pane
.Op Fl x Ar width
.Op Fl y Ar height
.Op Ar adjustment
.Xc
.D1 (alias: Ic resizep )
Resize a pane, up, down, left or right by
.Ar adjustment
with
.Fl U ,
.Fl D ,
.Fl L
or
.Fl R ,
or
to an absolute size
with
.Fl x
or
.Fl y .
The
.Ar adjustment
is given in lines or cells (the default is 1).
.Pp
With
.Fl Z ,
the active pane is toggled between zoomed (occupying the whole of the window)
and unzoomed (its normal position in the layout).
.Pp
.Fl M
begins mouse resizing (only valid if bound to a mouse key binding, see
.Sx MOUSE SUPPORT ) .
.It Xo Ic respawn-pane
.Op Fl k
.Op Fl t Ar target-pane
.Op Ar shell-command
.Xc
.D1 (alias: Ic respawnp )
Reactivate a pane in which the command has exited (see the
.Ic remain-on-exit
window option).
If
.Ar shell-command
is not given, the command used when the pane was created is executed.
The pane must be already inactive, unless
.Fl k
is given, in which case any existing command is killed.
.It Xo Ic respawn-window
.Op Fl k
.Op Fl t Ar target-window
.Op Ar shell-command
.Xc
.D1 (alias: Ic respawnw )
Reactivate a window in which the command has exited (see the
.Ic remain-on-exit
window option).
If
.Ar shell-command
is not given, the command used when the window was created is executed.
The window must be already inactive, unless
.Fl k
is given, in which case any existing command is killed.
.It Xo Ic rotate-window
.Op Fl DU
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic rotatew )
Rotate the positions of the panes within a window, either upward (numerically
lower) with
.Fl U
or downward (numerically higher).
.It Xo Ic select-layout
.Op Fl nop
.Op Fl t Ar target-window
.Op Ar layout-name
.Xc
.D1 (alias: Ic selectl )
Choose a specific layout for a window.
If
.Ar layout-name
is not given, the last preset layout used (if any) is reapplied.
.Fl n
and
.Fl p
are equivalent to the
.Ic next-layout
and
.Ic previous-layout
commands.
.Fl o
applies the last set layout if possible (undoes the most recent layout change).
.It Xo Ic select-pane
.Op Fl DdegLlMmRU
.Op Fl P Ar style
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic selectp )
Make pane
.Ar target-pane
the active pane in window
.Ar target-window ,
or set its style (with
.Fl P ) .
If one of
.Fl D ,
.Fl L ,
.Fl R ,
or
.Fl U
is used, respectively the pane below, to the left, to the right, or above the
target pane is used.
.Fl l
is the same as using the
.Ic last-pane
command.
.Fl e
enables or
.Fl d
disables input to the pane.
.Pp
.Fl m
and
.Fl M
are used to set and clear the
.Em marked pane .
There is one marked pane at a time, setting a new marked pane clears the last.
The marked pane is the default target for
.Fl s
to
.Ic join-pane ,
.Ic swap-pane
and
.Ic swap-window .
.Pp
Each pane has a style: by default the
.Ic window-style
and
.Ic window-active-style
options are used,
.Ic select-pane
.Fl P
sets the style for a single pane.
For example, to set the pane 1 background to red:
.Bd -literal -offset indent
select-pane -t:.1 -P 'bg=red'
.Ed
.Pp
.Fl g
shows the current pane style.
.It Xo Ic select-window
.Op Fl lnpT
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic selectw )
Select the window at
.Ar target-window .
.Fl l ,
.Fl n
and
.Fl p
are equivalent to the
.Ic last-window ,
.Ic next-window
and
.Ic previous-window
commands.
If
.Fl T
is given and the selected window is already the current window,
the command behaves like
.Ic last-window .
.It Xo Ic split-window
.Op Fl bdfhvP
.Op Fl c Ar start-directory
.Oo Fl l
.Ar size |
.Fl p Ar percentage Oc
.Op Fl t Ar target-pane
.Op Ar shell-command
.Op Fl F Ar format
.Xc
.D1 (alias: Ic splitw )
Create a new pane by splitting
.Ar target-pane :
.Fl h
does a horizontal split and
.Fl v
a vertical split; if neither is specified,
.Fl v
is assumed.
The
.Fl l
and
.Fl p
options specify the size of the new pane in lines (for vertical split) or in
cells (for horizontal split), or as a percentage, respectively.
The
.Fl b
option causes the new pane to be created to the left of or above
.Ar target-pane .
The
.Fl f
option creates a new pane spanning the full window height (with
.Fl h )
or full window width (with
.Fl v ) ,
instead of splitting the active pane.
All other options have the same meaning as for the
.Ic new-window
command.
.It Xo Ic swap-pane
.Op Fl dDU
.Op Fl s Ar src-pane
.Op Fl t Ar dst-pane
.Xc
.D1 (alias: Ic swapp )
Swap two panes.
If
.Fl U
is used and no source pane is specified with
.Fl s ,
.Ar dst-pane
is swapped with the previous pane (before it numerically);
.Fl D
swaps with the next pane (after it numerically).
.Fl d
instructs
.Nm
not to change the active pane.
.Pp
If
.Fl s
is omitted and a marked pane is present (see
.Ic select-pane
.Fl m ) ,
the marked pane is used rather than the current pane.
.It Xo Ic swap-window
.Op Fl d
.Op Fl s Ar src-window
.Op Fl t Ar dst-window
.Xc
.D1 (alias: Ic swapw )
This is similar to
.Ic link-window ,
except the source and destination windows are swapped.
It is an error if no window exists at
.Ar src-window .
.Pp
Like
.Ic swap-pane ,
if
.Fl s
is omitted and a marked pane is present (see
.Ic select-pane
.Fl m ) ,
the window containing the marked pane is used rather than the current window.
.It Xo Ic unlink-window
.Op Fl k
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic unlinkw )
Unlink
.Ar target-window .
Unless
.Fl k
is given, a window may be unlinked only if it is linked to multiple sessions -
windows may not be linked to no sessions;
if
.Fl k
is specified and the window is linked to only one session, it is unlinked and
destroyed.
.El
.Sh KEY BINDINGS
.Nm
allows a command to be bound to most keys, with or without a prefix key.
When specifying keys, most represent themselves (for example
.Ql A
to
.Ql Z ) .
Ctrl keys may be prefixed with
.Ql C-
or
.Ql ^ ,
and Alt (meta) with
.Ql M- .
In addition, the following special key names are accepted:
.Em Up ,
.Em Down ,
.Em Left ,
.Em Right ,
.Em BSpace ,
.Em BTab ,
.Em DC
(Delete),
.Em End ,
.Em Enter ,
.Em Escape ,
.Em F1
to
.Em F12 ,
.Em Home ,
.Em IC
(Insert),
.Em NPage/PageDown/PgDn ,
.Em PPage/PageUp/PgUp ,
.Em Space ,
and
.Em Tab .
Note that to bind the
.Ql \&"
or
.Ql '
keys, quotation marks are necessary, for example:
.Bd -literal -offset indent
bind-key '"' split-window
bind-key "'" new-window
.Ed
.Pp
Commands related to key bindings are as follows:
.Bl -tag -width Ds
.It Xo Ic bind-key
.Op Fl nr
.Op Fl T Ar key-table
.Ar key Ar command Op Ar arguments
.Xc
.D1 (alias: Ic bind )
Bind key
.Ar key
to
.Ar command .
Keys are bound in a key table.
By default (without -T), the key is bound in
the
.Em prefix
key table.
This table is used for keys pressed after the prefix key (for example,
by default
.Ql c
is bound to
.Ic new-window
in the
.Em prefix
table, so
.Ql C-b c
creates a new window).
The
.Em root
table is used for keys pressed without the prefix key: binding
.Ql c
to
.Ic new-window
in the
.Em root
table (not recommended) means a plain
.Ql c
will create a new window.
.Fl n
is an alias
for
.Fl T Ar root .
Keys may also be bound in custom key tables and the
.Ic switch-client
.Fl T
command used to switch to them from a key binding.
The
.Fl r
flag indicates this key may repeat, see the
.Ic repeat-time
option.
.Pp
To view the default bindings and possible commands, see the
.Ic list-keys
command.
.It Xo Ic list-keys
.Op Fl T Ar key-table
.Xc
.D1 (alias: Ic lsk )
List all key bindings.
Without
.Fl T
all key tables are printed.
With
.Fl T
only
.Ar key-table .
.It Xo Ic send-keys
.Op Fl lMRX
.Op Fl N Ar repeat-count
.Op Fl t Ar target-pane
.Ar key Ar ...
.Xc
.D1 (alias: Ic send )
Send a key or keys to a window.
Each argument
.Ar key
is the name of the key (such as
.Ql C-a
or
.Ql NPage )
to send; if the string is not recognised as a key, it is sent as a series of
characters.
The
.Fl l
flag disables key name lookup and sends the keys literally.
All arguments are sent sequentially from first to last.
The
.Fl R
flag causes the terminal state to be reset.
.Pp
.Fl M
passes through a mouse event (only valid if bound to a mouse key binding, see
.Sx MOUSE SUPPORT ) .
.Pp
.Fl X
is used to send a command into copy mode - see
the
.Sx WINDOWS AND PANES
section.
.Fl N
specifies a repeat count.
.It Xo Ic send-prefix
.Op Fl 2
.Op Fl t Ar target-pane
.Xc
Send the prefix key, or with
.Fl 2
the secondary prefix key, to a window as if it was pressed.
.It Xo Ic unbind-key
.Op Fl an
.Op Fl T Ar key-table
.Ar key
.Xc
.D1 (alias: Ic unbind )
Unbind the command bound to
.Ar key .
.Fl n
and
.Fl T
are the same as for
.Ic bind-key .
If
.Fl a
is present, all key bindings are removed.
.El
.Sh OPTIONS
The appearance and behaviour of
.Nm
may be modified by changing the value of various options.
There are three types of option:
.Em server options ,
.Em session options
and
.Em window options .
.Pp
The
.Nm
server has a set of global options which do not apply to any particular
window or session.
These are altered with the
.Ic set-option
.Fl s
command, or displayed with the
.Ic show-options
.Fl s
command.
.Pp
In addition, each individual session may have a set of session options, and
there is a separate set of global session options.
Sessions which do not have a particular option configured inherit the value
from the global session options.
Session options are set or unset with the
.Ic set-option
command and may be listed with the
.Ic show-options
command.
The available server and session options are listed under the
.Ic set-option
command.
.Pp
Similarly, a set of window options is attached to each window, and there is
a set of global window options from which any unset options are inherited.
Window options are altered with the
.Ic set-window-option
command and can be listed with the
.Ic show-window-options
command.
All window options are documented with the
.Ic set-window-option
command.
.Pp
.Nm
also supports user options which are prefixed with a
.Ql \&@@ .
User options may have any name, so long as they are prefixed with
.Ql \&@@ ,
and be set to any string.
For example:
.Bd -literal -offset indent
$ tmux setw -q @@foo "abc123"
$ tmux showw -v @@foo
abc123
.Ed
.Pp
Commands which set options are as follows:
.Bl -tag -width Ds
.It Xo Ic set-option
.Op Fl agoqsuw
.Op Fl t Ar target-session | Ar target-window
.Ar option Ar value
.Xc
.D1 (alias: Ic set )
Set a window option with
.Fl w
(equivalent to the
.Ic set-window-option
command),
a server option with
.Fl s ,
otherwise a session option.
If
.Fl g
is given, the global session or window option is set.
The
.Fl u
flag unsets an option, so a session inherits the option from the global
options (or with
.Fl g ,
restores a global option to the default).
.Pp
The
.Fl o
flag prevents setting an option that is already set and the
.Fl q
flag suppresses errors about unknown or ambiguous options.
.Pp
With
.Fl a ,
and if the option expects a string or a style,
.Ar value
is appended to the existing setting.
For example:
.Bd -literal -offset indent
set -g status-left "foo"
set -ag status-left "bar"
.Ed
.Pp
Will result in
.Ql foobar .
And:
.Bd -literal -offset indent
set -g status-style "bg=red"
set -ag status-style "fg=blue"
.Ed
.Pp
Will result in a red background
.Em and
blue foreground.
Without
.Fl a ,
the result would be the default background and a blue foreground.
.Pp
Available window options are listed under
.Ic set-window-option .
.Pp
.Ar value
depends on the option and may be a number, a string, or a flag (on, off, or
omitted to toggle).
.Pp
Available server options are:
.Bl -tag -width Ds
.It Ic buffer-limit Ar number
Set the number of buffers; as new buffers are added to the top of the stack,
old ones are removed from the bottom if necessary to maintain this maximum
length.
.It Xo Ic command-alias[]
.Ar name=value
.Xc
This is an array of custom aliases for commands.
If an unknown command matches
.Ar name ,
it is replaced with
.Ar value .
For example, after:
.Pp
.Dl set -s command-alias[2] zoom='resize-pane -Z'
.Pp
Using:
.Pp
.Dl zoom -t:.1
.Pp
Is equivalent to:
.Pp
.Dl resize-pane -Z -t:.1
.Pp
Note that aliases are expanded when a command is parsed rather than when it is
executed, so binding an alias with
.Ic bind-key
will bind the expanded form.
.It Ic default-terminal Ar terminal
Set the default terminal for new windows created in this session - the
default value of the
.Ev TERM
environment variable.
For
.Nm
to work correctly, this
.Em must
be set to
.Ql screen ,
.Ql tmux
or a derivative of them.
.It Ic escape-time Ar time
Set the time in milliseconds for which
.Nm
waits after an escape is input to determine if it is part of a function or meta
key sequences.
The default is 500 milliseconds.
.It Xo Ic exit-unattached
.Op Ic on | off
.Xc
If enabled, the server will exit when there are no attached clients.
.It Xo Ic focus-events
.Op Ic on | off
.Xc
When enabled, focus events are requested from the terminal if supported and
passed through to applications running in
.Nm .
Attached clients should be detached and attached again after changing this
option.
.It Ic history-file Ar path
If not empty, a file to which
.Nm
will write command prompt history on exit and load it from on start.
.It Ic message-limit Ar number
Set the number of error or information messages to save in the message log for
each client.
The default is 100.
.It Xo Ic set-clipboard
.Op Ic on | off
.Xc
Attempt to set the terminal clipboard content using the
\ee]52;...\e007
.Xr xterm 1
escape sequences.
This option is on by default if there is an
.Em \&Ms
entry in the
.Xr terminfo 5
description for the client terminal.
Note that this feature needs to be enabled in
.Xr xterm 1
by setting the resource:
.Bd -literal -offset indent
disallowedWindowOps: 20,21,SetXprop
.Ed
.Pp
Or changing this property from the
.Xr xterm 1
interactive menu when required.
.It Ic terminal-overrides[] Ar string
Allow terminal descriptions read using
.Xr terminfo 5
to be overridden.
Each entry is a colon-separated string made up of a terminal type pattern
(matched using
.Xr fnmatch 3 )
and a set of
.Em name=value
entries.
.Pp
For example, to set the
.Ql clear
.Xr terminfo 5
entry to
.Ql \ee[H\ee[2J
for all terminal types matching
.Ql rxvt* :
.Pp
.Dl "rxvt*:clear=\ee[H\ee[2J"
.Pp
The terminal entry value is passed through
.Xr strunvis 3
before interpretation.
.El
.Pp
Available session options are:
.Bl -tag -width Ds
.It Ic assume-paste-time Ar milliseconds
If keys are entered faster than one in
.Ar milliseconds ,
they are assumed to have been pasted rather than typed and
.Nm
key bindings are not processed.
The default is one millisecond and zero disables.
.It Ic base-index Ar index
Set the base index from which an unused index should be searched when a new
window is created.
The default is zero.
.It Xo Ic bell-action
.Op Ic any | none | current | other
.Xc
Set action on window bell.
.Ic any
means a bell in any window linked to a session causes a bell in the current
window of that session,
.Ic none
means all bells are ignored,
.Ic current
means only bells in windows other than the current window are ignored and
.Ic other
means bells in the current window are ignored but not those in other windows.
.It Xo Ic bell-on-alert
.Op Ic on | off
.Xc
If on, ring the terminal bell when an alert
occurs.
.It Ic default-command Ar shell-command
Set the command used for new windows (if not specified when the window is
created) to
.Ar shell-command ,
which may be any
.Xr sh 1
command.
The default is an empty string, which instructs
.Nm
to create a login shell using the value of the
.Ic default-shell
option.
.It Ic default-shell Ar path
Specify the default shell.
This is used as the login shell for new windows when the
.Ic default-command
option is set to empty, and must be the full path of the executable.
When started
.Nm
tries to set a default value from the first suitable of the
.Ev SHELL
environment variable, the shell returned by
.Xr getpwuid 3 ,
or
.Pa /bin/sh .
This option should be configured when
.Nm
is used as a login shell.
.It Xo Ic destroy-unattached
.Op Ic on | off
.Xc
If enabled and the session is no longer attached to any clients, it is
destroyed.
.It Xo Ic detach-on-destroy
.Op Ic on | off
.Xc
If on (the default), the client is detached when the session it is attached to
is destroyed.
If off, the client is switched to the most recently active of the remaining
sessions.
.It Ic display-panes-active-colour Ar colour
Set the colour used by the
.Ic display-panes
command to show the indicator for the active pane.
.It Ic display-panes-colour Ar colour
Set the colour used by the
.Ic display-panes
command to show the indicators for inactive panes.
.It Ic display-panes-time Ar time
Set the time in milliseconds for which the indicators shown by the
.Ic display-panes
command appear.
.It Ic display-time Ar time
Set the amount of time for which status line messages and other on-screen
indicators are displayed.
If set to 0, messages and indicators are displayed until a key is pressed.
.Ar time
is in milliseconds.
.It Ic history-limit Ar lines
Set the maximum number of lines held in window history.
This setting applies only to new windows - existing window histories are not
resized and retain the limit at the point they were created.
.It Ic key-table Ar key-table
Set the default key table to
.Ar key-table
instead of
.Em root .
.It Ic lock-after-time Ar number
Lock the session (like the
.Ic lock-session
command) after
.Ar number
seconds of inactivity.
The default is not to lock (set to 0).
.It Ic lock-command Ar shell-command
Command to run when locking each client.
The default is to run
.Xr lock 1
with
.Fl np .
.It Ic message-command-style Ar style
Set status line message command style, where
.Ar style
is a comma-separated list of characteristics to be specified.
.Pp
These may be
.Ql bg=colour
to set the background colour,
.Ql fg=colour
to set the foreground colour, and a list of attributes as specified below.
.Pp
The colour is one of:
.Ic black ,
.Ic red ,
.Ic green ,
.Ic yellow ,
.Ic blue ,
.Ic magenta ,
.Ic cyan ,
.Ic white ,
aixterm bright variants (if supported:
.Ic brightred ,
.Ic brightgreen ,
and so on),
.Ic colour0
to
.Ic colour255
from the 256-colour set,
.Ic default ,
or a hexadecimal RGB string such as
.Ql #ffffff ,
which chooses the closest match from the default 256-colour set.
.Pp
The attributes is either
.Ic none
or a comma-delimited list of one or more of:
.Ic bright
(or
.Ic bold ) ,
.Ic dim ,
.Ic underscore ,
.Ic blink ,
.Ic reverse ,
.Ic hidden ,
.Ic italics ,
or
.Ic strikethrough
to turn an attribute on, or an attribute prefixed with
.Ql no
to turn one off.
.Pp
Examples are:
.Bd -literal -offset indent
fg=yellow,bold,underscore,blink
bg=black,fg=default,noreverse
.Ed
.Pp
With the
.Fl a
flag to the
.Ic set-option
command the new style is added otherwise the existing style is replaced.
.It Ic message-style Ar style
Set status line message style.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.It Xo Ic mouse
.Op Ic on | off
.Xc
If on,
.Nm
captures the mouse and allows mouse events to be bound as key bindings.
See the
.Sx MOUSE SUPPORT
section for details.
.It Ic prefix Ar key
Set the key accepted as a prefix key.
In addition to the standard keys described under
.Sx KEY BINDINGS ,
.Ic prefix
can be set to the special key
.Ql None
to set no prefix.
.It Ic prefix2 Ar key
Set a secondary key accepted as a prefix key.
Like
.Ic prefix ,
.Ic prefix2
can be set to
.Ql None .
.It Xo Ic renumber-windows
.Op Ic on | off
.Xc
If on, when a window is closed in a session, automatically renumber the other
windows in numerical order.
This respects the
.Ic base-index
option if it has been set.
If off, do not renumber the windows.
.It Ic repeat-time Ar time
Allow multiple commands to be entered without pressing the prefix-key again
in the specified
.Ar time
milliseconds (the default is 500).
Whether a key repeats may be set when it is bound using the
.Fl r
flag to
.Ic bind-key .
Repeat is enabled for the default keys bound to the
.Ic resize-pane
command.
.It Xo Ic set-titles
.Op Ic on | off
.Xc
Attempt to set the client terminal title using the
.Em tsl
and
.Em fsl
.Xr terminfo 5
entries if they exist.
.Nm
automatically sets these to the \ee]0;...\e007 sequence if
the terminal appears to be
.Xr xterm 1 .
This option is off by default.
.It Ic set-titles-string Ar string
String used to set the window title if
.Ic set-titles
is on.
Formats are expanded, see the
.Sx FORMATS
section.
.It Xo Ic status
.Op Ic on | off
.Xc
Show or hide the status line.
.It Ic status-interval Ar interval
Update the status line every
.Ar interval
seconds.
By default, updates will occur every 15 seconds.
A setting of zero disables redrawing at interval.
.It Xo Ic status-justify
.Op Ic left | centre | right
.Xc
Set the position of the window list component of the status line: left, centre
or right justified.
.It Xo Ic status-keys
.Op Ic vi | emacs
.Xc
Use vi or emacs-style
key bindings in the status line, for example at the command prompt.
The default is emacs, unless the
.Ev VISUAL
or
.Ev EDITOR
environment variables are set and contain the string
.Ql vi .
.It Ic status-left Ar string
Display
.Ar string
(by default the session name) to the left of the status line.
.Ar string
will be passed through
.Xr strftime 3
and formats (see
.Sx FORMATS )
will be expanded.
It may also contain the special character sequence #[] to change the colour
or attributes, for example
.Ql #[fg=red,bright]
to set a bright red foreground.
See the
.Ic message-command-style
option for a description of colours and attributes.
.Pp
For details on how the names and titles can be set see the
.Sx "NAMES AND TITLES"
section.
.Pp
Examples are:
.Bd -literal -offset indent
#(sysctl vm.loadavg)
#[fg=yellow,bold]#(apm -l)%%#[default] [#S]
.Ed
.Pp
The default is
.Ql "[#S] " .
.It Ic status-left-length Ar length
Set the maximum
.Ar length
of the left component of the status line.
The default is 10.
.It Ic status-left-style Ar style
Set the style of the left part of the status line.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.It Xo Ic status-position
.Op Ic top | bottom
.Xc
Set the position of the status line.
.It Ic status-right Ar string
Display
.Ar string
to the right of the status line.
By default, the current window title in double quotes, the date and the time
are shown.
As with
.Ic status-left ,
.Ar string
will be passed to
.Xr strftime 3
and character pairs are replaced.
.It Ic status-right-length Ar length
Set the maximum
.Ar length
of the right component of the status line.
The default is 40.
.It Ic status-right-style Ar style
Set the style of the right part of the status line.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.It Ic status-style Ar style
Set status line style.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.It Ic update-environment[] Ar variable
Set list of environment variables to be copied into the session environment
when a new session is created or an existing session is attached.
Any variables that do not exist in the source environment are set to be
removed from the session environment (as if
.Fl r
was given to the
.Ic set-environment
command).
.It Xo Ic visual-activity
.Op Ic on | off
.Xc
If on, display a status line message when activity occurs in a window
for which the
.Ic monitor-activity
window option is enabled.
.It Xo Ic visual-bell
.Op Ic on | off
.Xc
If this option is on, a message is shown on a bell instead of it being passed
through to the terminal (which normally makes a sound).
Also see the
.Ic bell-action
option.
.It Xo Ic visual-silence
.Op Ic on | off
.Xc
If
.Ic monitor-silence
is enabled, prints a message after the interval has expired on a given window.
.It Ic word-separators Ar string
Sets the session's conception of what characters are considered word
separators, for the purposes of the next and previous word commands in
copy mode.
The default is
.Ql \ -_@@ .
.El
.It Xo Ic set-window-option
.Op Fl agoqu
.Op Fl t Ar target-window
.Ar option Ar value
.Xc
.D1 (alias: Ic setw )
Set a window option.
The
.Fl a ,
.Fl g ,
.Fl o ,
.Fl q
and
.Fl u
flags work similarly to the
.Ic set-option
command.
.Pp
Supported window options are:
.Pp
.Bl -tag -width Ds -compact
.It Xo Ic aggressive-resize
.Op Ic on | off
.Xc
Aggressively resize the chosen window.
This means that
.Nm
will resize the window to the size of the smallest session for which it is the
current window, rather than the smallest session to which it is attached.
The window may resize when the current window is changed on another sessions;
this option is good for full-screen programs which support
.Dv SIGWINCH
and poor for interactive programs such as shells.
.Pp
.It Xo Ic allow-rename
.Op Ic on | off
.Xc
Allow programs to change the window name using a terminal escape
sequence (\eek...\ee\e\e).
The default is on.
.Pp
.It Xo Ic alternate-screen
.Op Ic on | off
.Xc
This option configures whether programs running inside
.Nm
may use the terminal alternate screen feature, which allows the
.Em smcup
and
.Em rmcup
.Xr terminfo 5
capabilities.
The alternate screen feature preserves the contents of the window when an
interactive application starts and restores it on exit, so that any output
visible before the application starts reappears unchanged after it exits.
The default is on.
.Pp
.It Xo Ic automatic-rename
.Op Ic on | off
.Xc
Control automatic window renaming.
When this setting is enabled,
.Nm
will rename the window automatically using the format specified by
.Ic automatic-rename-format .
This flag is automatically disabled for an individual window when a name
is specified at creation with
.Ic new-window
or
.Ic new-session ,
or later with
.Ic rename-window ,
or with a terminal escape sequence.
It may be switched off globally with:
.Bd -literal -offset indent
set-window-option -g automatic-rename off
.Ed
.Pp
.It Ic automatic-rename-format Ar format
The format (see
.Sx FORMATS )
used when the
.Ic automatic-rename
option is enabled.
.Pp
.It Ic clock-mode-colour Ar colour
Set clock colour.
.Pp
.It Xo Ic clock-mode-style
.Op Ic 12 | 24
.Xc
Set clock hour format.
.Pp
.It Ic force-height Ar height
.It Ic force-width Ar width
Prevent
.Nm
from resizing a window to greater than
.Ar width
or
.Ar height .
A value of zero restores the default unlimited setting.
.Pp
.It Ic main-pane-height Ar height
.It Ic main-pane-width Ar width
Set the width or height of the main (left or top) pane in the
.Ic main-horizontal
or
.Ic main-vertical
layouts.
.Pp
.It Xo Ic mode-keys
.Op Ic vi | emacs
.Xc
Use vi or emacs-style key bindings in copy mode.
The default is emacs, unless
.Ev VISUAL
or
.Ev EDITOR
contains
.Ql vi .
.Pp
.It Ic mode-style Ar style
Set window modes style.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
.It Xo Ic monitor-activity
.Op Ic on | off
.Xc
Monitor for activity in the window.
Windows with activity are highlighted in the status line.
.Pp
.It Xo Ic monitor-silence
.Op Ic interval
.Xc
Monitor for silence (no activity) in the window within
.Ic interval
seconds.
Windows that have been silent for the interval are highlighted in the
status line.
An interval of zero disables the monitoring.
.Pp
.It Ic other-pane-height Ar height
Set the height of the other panes (not the main pane) in the
.Ic main-horizontal
layout.
If this option is set to 0 (the default), it will have no effect.
If both the
.Ic main-pane-height
and
.Ic other-pane-height
options are set, the main pane will grow taller to make the other panes the
specified height, but will never shrink to do so.
.Pp
.It Ic other-pane-width Ar width
Like
.Ic other-pane-height ,
but set the width of other panes in the
.Ic main-vertical
layout.
.Pp
.It Ic pane-active-border-style Ar style
Set the pane border style for the currently active pane.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
Attributes are ignored.
.Pp
.It Ic pane-base-index Ar index
Like
.Ic base-index ,
but set the starting index for pane numbers.
.Pp
.It Ic pane-border-format Ar format
Set the text shown in pane border status lines.
.Pp
.It Xo Ic pane-border-status
.Op Ic off | top | bottom
.Xc
Turn pane border status lines off or set their position.
.Pp
.It Ic pane-border-style Ar style
Set the pane border style for panes aside from the active pane.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
Attributes are ignored.
.Pp
.It Xo Ic remain-on-exit
.Op Ic on | off
.Xc
A window with this flag set is not destroyed when the program running in it
exits.
The window may be reactivated with the
.Ic respawn-window
command.
.Pp
.It Xo Ic synchronize-panes
.Op Ic on | off
.Xc
Duplicate input to any pane to all other panes in the same window (only
for panes that are not in any special mode).
.Pp
.It Ic window-active-style Ar style
Set the style for the window's active pane.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-activity-style Ar style
Set status line style for windows with an activity alert.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-bell-style Ar style
Set status line style for windows with a bell alert.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-current-format Ar string
Like
.Ar window-status-format ,
but is the format used when the window is the current window.
.Pp
.It Ic window-status-current-style Ar style
Set status line style for the currently active window.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-format Ar string
Set the format in which the window is displayed in the status line window list.
See the
.Ar status-left
option for details of special character sequences available.
The default is
.Ql #I:#W#F .
.Pp
.It Ic window-status-last-style Ar style
Set status line style for the last active window.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-status-separator Ar string
Sets the separator drawn between windows in the status line.
The default is a single space character.
.Pp
.It Ic window-status-style Ar style
Set status line style for a single window.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
.It Ic window-style Ar style
Set the default window style.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
.It Xo Ic wrap-search
.Op Ic on | off
.Xc
If this option is set, searches will wrap around the end of the pane contents.
The default is on.
.Pp
.It Xo Ic xterm-keys
.Op Ic on | off
.Xc
If this option is set,
.Nm
will generate
.Xr xterm 1 -style
function key sequences; these have a number included to indicate modifiers such
as Shift, Alt or Ctrl.
.El
.It Xo Ic show-options
.Op Fl gqsvw
.Op Fl t Ar target-session | Ar target-window
.Op Ar option
.Xc
.D1 (alias: Ic show )
Show the window options (or a single window option if given) with
.Fl w
(equivalent to
.Ic show-window-options ) ,
the server options with
.Fl s ,
otherwise the session options for
.Ar target session .
Global session or window options are listed if
.Fl g
is used.
.Fl v
shows only the option value, not the name.
If
.Fl q
is set, no error will be returned if
.Ar option
is unset.
.It Xo Ic show-window-options
.Op Fl gv
.Op Fl t Ar target-window
.Op Ar option
.Xc
.D1 (alias: Ic showw )
List the window options or a single option for
.Ar target-window ,
or the global window options if
.Fl g
is used.
.Fl v
shows only the option value, not the name.
.El
.Sh HOOKS
.Nm
allows commands to run on various triggers, called
.Em hooks .
Most
.Nm
commands have an
.Em after
hook and there are a number of hooks not associated with commands.
.Pp
A command's after
hook is run after it completes, except when the command is run as part of a hook
itself.
They are named with an
.Ql after-
prefix.
For example, the following command adds a hook to select the even-vertical
layout after every
.Ic split-window :
.Bd -literal -offset indent
set-hook after-split-window "selectl even-vertical"
.Ed
.Pp
In addition, the following hooks are available:
.Bl -tag -width "XXXXXXXXXXXXXXXX"
.It alert-activity
Run when a window has activity.
See
.Ic monitor-activity .
.It alert-bell
Run when a window has received a bell.
.It alert-silence
Run when a window has been silent.
See
.Ic monitor-silence .
.It client-attached
Run when a client is attached.
.It client-detached
Run when a client is detached
.It client-resized
Run when a client is resized.
.It client-session-changed
Run when a client's attached session is changed.
.It pane-died
Run when the program running in a pane exits, but
.Ic remain-on-exit
is on so the pane has not closed.
.It pane-exited
Run when the program running in a pane exits.
.It session-created
Run when a new session created.
.It session-closed
Run when a session closed.
.It session-renamed
Run when a session is renamed.
.It window-linked
Run when a window is linked into a session.
.It window-renamed
Run when a window is renamed.
.It window-unlinked
Run when a window is unlinked from a session.
.El
.Pp
Hooks are managed with these commands:
.Bl -tag -width Ds
.It Xo Ic set-hook
.Op Fl gu
.Op Fl t Ar target-session
.Ar hook-name
.Ar command
.Xc
Sets (or with
.Fl u
unsets) hook
.Ar hook-name
to
.Ar command .
If
.Fl g
is given,
.Em hook-name
is added to the global list of hooks, otherwise it is added to the session
hooks (for
.Ar target-session
with
.Fl t ) .
Like options, session hooks inherit from the global ones.
.It Xo Ic show-hooks
.Op Fl g
.Op Fl t Ar target-session
.Xc
Shows the global list of hooks with
.Fl g ,
otherwise the session hooks.
.El
.Sh MOUSE SUPPORT
If the
.Ic mouse
option is on (the default is off),
.Nm
allows mouse events to be bound as keys.
The name of each key is made up of a mouse event (such as
.Ql MouseUp1 )
and a location suffix (one of
.Ql Pane
for the contents of a pane,
.Ql Border
for a pane border or
.Ql Status
for the status line).
The following mouse events are available:
.Bl -column "MouseDown1" "MouseDrag1" "WheelDown" -offset indent
.It Li "WheelUp" Ta "WheelDown" Ta ""
.It Li "MouseDown1" Ta "MouseUp1" Ta "MouseDrag1" Ta "MouseDragEnd1"
.It Li "MouseDown2" Ta "MouseUp2" Ta "MouseDrag2" Ta "MouseDragEnd2"
.It Li "MouseDown3" Ta "MouseUp3" Ta "MouseDrag3" Ta "MouseDragEnd3"
.It Li "DoubleClick1" Ta "DoubleClick2" Ta "DoubleClick3" Ta "WheelUp"
.It Li "TripleClick1" Ta "TripleClick2" Ta "TripleClick3" Ta "WheelDown"
.El
.Pp
Each should be suffixed with a location, for example
.Ql MouseDown1Status .
.Pp
The special token
.Ql {mouse}
or
.Ql =
may be used as
.Ar target-window
or
.Ar target-pane
in commands bound to mouse key bindings.
It resolves to the window or pane over which the mouse event took place
(for example, the window in the status line over which button 1 was released for a
.Ql MouseUp1Status
binding, or the pane over which the wheel was scrolled for a
.Ql WheelDownPane
binding).
.Pp
The
.Ic send-keys
.Fl M
flag may be used to forward a mouse event to a pane.
.Pp
The default key bindings allow the mouse to be used to select and resize panes,
to copy text and to change window using the status line.
These take effect if the
.Ic mouse
option is turned on.
.Sh FORMATS
Certain commands accept the
.Fl F
flag with a
.Ar format
argument.
This is a string which controls the output format of the command.
Replacement variables are enclosed in
.Ql #{
and
.Ql } ,
for example
.Ql #{session_name} .
The possible variables are listed in the table below, or the name of a
.Nm
option may be used for an option's value.
Some variables have a shorter alias such as
.Ql #S ,
and
.Ql ##
is replaced by a single
.Ql # .
.Pp
Conditionals are available by prefixing with
.Ql \&?
and separating two alternatives with a comma;
if the specified variable exists and is not zero, the first alternative
is chosen, otherwise the second is used.
For example
.Ql #{?session_attached,attached,not attached}
will include the string
.Ql attached
if the session is attached and the string
.Ql not attached
if it is unattached, or
.Ql #{?automatic-rename,yes,no}
will include
.Ql yes
if
.Ic automatic-rename
is enabled, or
.Ql no
if not.
.Pp
Simple comparisons may be expressed by prefixing two comma-separated
alternatives by
.Ql ==
or
.Ql !=
and a colon.
For example
.Ql #{==:#{host},myhost}
will be replaced by
.Ql 1
if running on
.Ql myhost ,
otherwise by
.Ql 0.
.Pp
A limit may be placed on the length of the resultant string by prefixing it
by an
.Ql = ,
a number and a colon.
Positive numbers count from the start of the string and negative from the end,
so
.Ql #{=5:pane_title}
will include at most the first 5 characters of the pane title, or
.Ql #{=-5:pane_title}
the last 5 characters.
Prefixing a time variable with
.Ql t:
will convert it to a string, so if
.Ql #{window_activity}
gives
.Ql 1445765102 ,
.Ql #{t:window_activity}
gives
.Ql Sun Oct 25 09:25:02 2015 .
The
.Ql b:
and
.Ql d:
prefixes are
.Xr basename 3
and
.Xr dirname 3
of the variable respectively.
A prefix of the form
.Ql s/foo/bar/:
will substitute
.Ql foo
with
.Ql bar
throughout.
.Pp
In addition, the first line of a shell command's output may be inserted using
.Ql #() .
For example,
.Ql #(uptime)
will insert the system's uptime.
When constructing formats,
.Nm
does not wait for
.Ql #()
commands to finish; instead, the previous result from running the same command is used,
or a placeholder if the command has not been run before.
If the command hasn't exited, the most recent line of output will be used, but the status
line will not be updated more than once a second.
Commands are executed with the
.Nm
global environment set (see the
.Sx ENVIRONMENT
section).
.Pp
The following variables are available, where appropriate:
.Bl -column "XXXXXXXXXXXXXXXXXXX" "XXXXX"
.It Sy "Variable name" Ta Sy "Alias" Ta Sy "Replaced with"
.It Li "alternate_on" Ta "" Ta "If pane is in alternate screen"
.It Li "alternate_saved_x" Ta "" Ta "Saved cursor X in alternate screen"
.It Li "alternate_saved_y" Ta "" Ta "Saved cursor Y in alternate screen"
.It Li "buffer_name" Ta "" Ta "Name of buffer"
.It Li "buffer_sample" Ta "" Ta "Sample of start of buffer"
.It Li "buffer_size" Ta "" Ta "Size of the specified buffer in bytes"
.It Li "client_activity" Ta "" Ta "Integer time client last had activity"
.It Li "client_created" Ta "" Ta "Integer time client created"
.It Li "client_control_mode" Ta "" Ta "1 if client is in control mode"
.It Li "client_discarded" Ta "" Ta "Bytes discarded when client behind"
.It Li "client_height" Ta "" Ta "Height of client"
.It Li "client_key_table" Ta "" Ta "Current key table"
.It Li "client_last_session" Ta "" Ta "Name of the client's last session"
.It Li "client_name" Ta "" Ta "Name of client"
.It Li "client_pid" Ta "" Ta "PID of client process"
.It Li "client_prefix" Ta "" Ta "1 if prefix key has been pressed"
.It Li "client_readonly" Ta "" Ta "1 if client is readonly"
.It Li "client_session" Ta "" Ta "Name of the client's session"
.It Li "client_termname" Ta "" Ta "Terminal name of client"
.It Li "client_termtype" Ta "" Ta "Terminal type of client"
.It Li "client_tty" Ta "" Ta "Pseudo terminal of client"
.It Li "client_utf8" Ta "" Ta "1 if client supports utf8"
.It Li "client_width" Ta "" Ta "Width of client"
.It Li "client_written" Ta "" Ta "Bytes written to client"
.It Li "command" Ta "" Ta "Name of command in use, if any"
.It Li "command_list_name" Ta "" Ta "Command name if listing commands"
.It Li "command_list_alias" Ta "" Ta "Command alias if listing commands"
.It Li "command_list_usage" Ta "" Ta "Command usage if listing commands"
.It Li "cursor_flag" Ta "" Ta "Pane cursor flag"
.It Li "cursor_x" Ta "" Ta "Cursor X position in pane"
.It Li "cursor_y" Ta "" Ta "Cursor Y position in pane"
.It Li "history_bytes" Ta "" Ta "Number of bytes in window history"
.It Li "history_limit" Ta "" Ta "Maximum window history lines"
.It Li "history_size" Ta "" Ta "Size of history in bytes"
.It Li "hook" Ta "" Ta "Name of running hook, if any"
.It Li "hook_pane" Ta "" Ta "ID of pane where hook was run, if any"
.It Li "hook_session" Ta "" Ta "ID of session where hook was run, if any"
.It Li "hook_session_name" Ta "" Ta "Name of session where hook was run, if any"
.It Li "hook_window" Ta "" Ta "ID of window where hook was run, if any"
.It Li "hook_window_name" Ta "" Ta "Name of window where hook was run, if any"
.It Li "host" Ta "#H" Ta "Hostname of local host"
.It Li "host_short" Ta "#h" Ta "Hostname of local host (no domain name)"
.It Li "insert_flag" Ta "" Ta "Pane insert flag"
.It Li "keypad_cursor_flag" Ta "" Ta "Pane keypad cursor flag"
.It Li "keypad_flag" Ta "" Ta "Pane keypad flag"
.It Li "line" Ta "" Ta "Line number in the list"
.It Li "mouse_any_flag" Ta "" Ta "Pane mouse any flag"
.It Li "mouse_button_flag" Ta "" Ta "Pane mouse button flag"
.It Li "mouse_standard_flag" Ta "" Ta "Pane mouse standard flag"
.It Li "mouse_all_flag" Ta "" Ta "Pane mouse all flag"
.It Li "pane_active" Ta "" Ta "1 if active pane"
.It Li "pane_bottom" Ta "" Ta "Bottom of pane"
.It Li "pane_current_command" Ta "" Ta "Current command if available"
.It Li "pane_dead" Ta "" Ta "1 if pane is dead"
.It Li "pane_dead_status" Ta "" Ta "Exit status of process in dead pane"
.It Li "pane_height" Ta "" Ta "Height of pane"
.It Li "pane_id" Ta "#D" Ta "Unique pane ID"
.It Li "pane_in_mode" Ta "" Ta "If pane is in a mode"
.It Li "pane_input_off" Ta "" Ta "If input to pane is disabled"
.It Li "pane_index" Ta "#P" Ta "Index of pane"
.It Li "pane_left" Ta "" Ta "Left of pane"
.It Li "pane_pid" Ta "" Ta "PID of first process in pane"
.It Li "pane_right" Ta "" Ta "Right of pane"
.It Li "pane_search_string" Ta "" Ta "Last search string in copy mode"
.It Li "pane_start_command" Ta "" Ta "Command pane started with"
.It Li "pane_synchronized" Ta "" Ta "If pane is synchronized"
.It Li "pane_tabs" Ta "" Ta "Pane tab positions"
.It Li "pane_title" Ta "#T" Ta "Title of pane"
.It Li "pane_top" Ta "" Ta "Top of pane"
.It Li "pane_tty" Ta "" Ta "Pseudo terminal of pane"
.It Li "pane_width" Ta "" Ta "Width of pane"
.It Li "pid" Ta ""  Ta "Server PID"
.It Li "scroll_region_lower" Ta "" Ta "Bottom of scroll region in pane"
.It Li "scroll_region_upper" Ta "" Ta "Top of scroll region in pane"
.It Li "scroll_position" Ta "" Ta "Scroll position in copy mode"
.It Li "session_alerts" Ta "" Ta "List of window indexes with alerts"
.It Li "session_attached" Ta "" Ta "Number of clients session is attached to"
.It Li "session_activity" Ta "" Ta "Integer time of session last activity"
.It Li "session_created" Ta "" Ta "Integer time session created"
.It Li "session_last_attached" Ta "" Ta "Integer time session last attached"
.It Li "session_group" Ta "" Ta "Name of session group"
.It Li "session_grouped" Ta "" Ta "1 if session in a group"
.It Li "session_height" Ta "" Ta "Height of session"
.It Li "session_id" Ta "" Ta "Unique session ID"
.It Li "session_many_attached" Ta "" Ta "1 if multiple clients attached"
.It Li "session_name" Ta "#S" Ta "Name of session"
.It Li "session_width" Ta "" Ta "Width of session"
.It Li "session_windows" Ta "" Ta "Number of windows in session"
.It Li "socket_path" Ta "" Ta "Server socket path"
.It Li "start_time" Ta "" Ta "Server start time"
.It Li "window_activity" Ta "" Ta "Integer time of window last activity"
.It Li "window_activity_flag" Ta "" Ta "1 if window has activity"
.It Li "window_active" Ta "" Ta "1 if window active"
.It Li "window_bell_flag" Ta "" Ta "1 if window has bell"
.It Li "window_find_matches" Ta "" Ta "Matched data from the find-window"
.It Li "window_flags" Ta "#F" Ta "Window flags"
.It Li "window_height" Ta "" Ta "Height of window"
.It Li "window_id" Ta "" Ta "Unique window ID"
.It Li "window_index" Ta "#I" Ta "Index of window"
.It Li "window_last_flag" Ta "" Ta "1 if window is the last used"
.It Li "window_layout" Ta "" Ta "Window layout description, ignoring zoomed window panes"
.It Li "window_linked" Ta "" Ta "1 if window is linked across sessions"
.It Li "window_name" Ta "#W" Ta "Name of window"
.It Li "window_panes" Ta "" Ta "Number of panes in window"
.It Li "window_silence_flag" Ta "" Ta "1 if window has silence alert"
.It Li "window_visible_layout" Ta "" Ta "Window layout description, respecting zoomed window panes"
.It Li "window_width" Ta "" Ta "Width of window"
.It Li "window_zoomed_flag" Ta "" Ta "1 if window is zoomed"
.It Li "wrap_flag" Ta "" Ta "Pane wrap flag"
.El
.Sh NAMES AND TITLES
.Nm
distinguishes between names and titles.
Windows and sessions have names, which may be used to specify them in targets
and are displayed in the status line and various lists: the name is the
.Nm
identifier for a window or session.
Only panes have titles.
A pane's title is typically set by the program running inside the pane and
is not modified by
.Nm .
It is the same mechanism used to set for example the
.Xr xterm 1
window title in an
.Xr X 7
window manager.
Windows themselves do not have titles - a window's title is the title of its
active pane.
.Nm
itself may set the title of the terminal in which the client is running, see
the
.Ic set-titles
option.
.Pp
A session's name is set with the
.Ic new-session
and
.Ic rename-session
commands.
A window's name is set with one of:
.Bl -enum -width Ds
.It
A command argument (such as
.Fl n
for
.Ic new-window
or
.Ic new-session ) .
.It
An escape sequence:
.Bd -literal -offset indent
$ printf '\e033kWINDOW_NAME\e033\e\e'
.Ed
.It
Automatic renaming, which sets the name to the active command in the window's
active pane.
See the
.Ic automatic-rename
option.
.El
.Pp
When a pane is first created, its title is the hostname.
A pane's title can be set via the OSC title setting sequence, for example:
.Bd -literal -offset indent
$ printf '\e033]2;My Title\e033\e\e'
.Ed
.Sh ENVIRONMENT
When the server is started,
.Nm
copies the environment into the
.Em global environment ;
in addition, each session has a
.Em session environment .
When a window is created, the session and global environments are merged.
If a variable exists in both, the value from the session environment is used.
The result is the initial environment passed to the new process.
.Pp
The
.Ic update-environment
session option may be used to update the session environment from the client
when a new session is created or an old reattached.
.Nm
also initialises the
.Ev TMUX
variable with some internal information to allow commands to be executed
from inside, and the
.Ev TERM
variable with the correct terminal setting of
.Ql screen .
.Pp
Commands to alter and view the environment are:
.Bl -tag -width Ds
.It Xo Ic set-environment
.Op Fl gru
.Op Fl t Ar target-session
.Ar name Op Ar value
.Xc
.D1 (alias: Ic setenv )
Set or unset an environment variable.
If
.Fl g
is used, the change is made in the global environment; otherwise, it is applied
to the session environment for
.Ar target-session .
The
.Fl u
flag unsets a variable.
.Fl r
indicates the variable is to be removed from the environment before starting a
new process.
.It Xo Ic show-environment
.Op Fl gs
.Op Fl t Ar target-session
.Op Ar variable
.Xc
.D1 (alias: Ic showenv )
Display the environment for
.Ar target-session
or the global environment with
.Fl g .
If
.Ar variable
is omitted, all variables are shown.
Variables removed from the environment are prefixed with
.Ql - .
If
.Fl s
is used, the output is formatted as a set of Bourne shell commands.
.El
.Sh STATUS LINE
.Nm
includes an optional status line which is displayed in the bottom line of each
terminal.
By default, the status line is enabled (it may be disabled with the
.Ic status
session option) and contains, from left-to-right: the name of the current
session in square brackets; the window list; the title of the active pane
in double quotes; and the time and date.
.Pp
The status line is made of three parts: configurable left and right sections
(which may contain dynamic content such as the time or output from a shell
command, see the
.Ic status-left ,
.Ic status-left-length ,
.Ic status-right ,
and
.Ic status-right-length
options below), and a central window list.
By default, the window list shows the index, name and (if any) flag of the
windows present in the current session in ascending numerical order.
It may be customised with the
.Ar window-status-format
and
.Ar window-status-current-format
options.
The flag is one of the following symbols appended to the window name:
.Bl -column "Symbol" "Meaning" -offset indent
.It Sy "Symbol" Ta Sy "Meaning"
.It Li "*" Ta "Denotes the current window."
.It Li "-" Ta "Marks the last window (previously selected)."
.It Li "#" Ta "Window is monitored and activity has been detected."
.It Li "!" Ta "A bell has occurred in the window."
.It Li "~" Ta "The window has been silent for the monitor-silence interval."
.It Li "M" Ta "The window contains the marked pane."
.It Li "Z" Ta "The window's active pane is zoomed."
.El
.Pp
The # symbol relates to the
.Ic monitor-activity
window option.
The window name is printed in inverted colours if an alert (bell, activity or
silence) is present.
.Pp
The colour and attributes of the status line may be configured, the entire
status line using the
.Ic status-style
session option and individual windows using the
.Ic window-status-style
window option.
.Pp
The status line is automatically refreshed at interval if it has changed, the
interval may be controlled with the
.Ic status-interval
session option.
.Pp
Commands related to the status line are as follows:
.Bl -tag -width Ds
.It Xo Ic command-prompt
.Op Fl 1i
.Op Fl I Ar inputs
.Op Fl p Ar prompts
.Op Fl t Ar target-client
.Op Ar template
.Xc
Open the command prompt in a client.
This may be used from inside
.Nm
to execute commands interactively.
.Pp
If
.Ar template
is specified, it is used as the command.
If present,
.Fl I
is a comma-separated list of the initial text for each prompt.
If
.Fl p
is given,
.Ar prompts
is a comma-separated list of prompts which are displayed in order; otherwise
a single prompt is displayed, constructed from
.Ar template
if it is present, or
.Ql \&:
if not.
.Pp
Before the command is executed, the first occurrence of the string
.Ql %%
and all occurrences of
.Ql %1
are replaced by the response to the first prompt, all
.Ql %2
are replaced with the response to the second prompt, and so on for further
prompts.
Up to nine prompt responses may be replaced
.Po
.Ql %1
to
.Ql %9
.Pc .
.Ql %%%
is like
.Ql %%
but any quotation marks are escaped.
.Pp
.Fl 1
makes the prompt only accept one key press, in this case the resulting input
is a single character.
.Fl i
executes the command every time the prompt input changes instead of when the
user exits the command prompt.
.Pp
The following keys have a special meaning in the command prompt, depending
on the value of the
.Ic status-keys
option:
.Bl -column "FunctionXXXXXXXXXXXXXXXXXXXXXXXXX" "viXXXX" "emacsX" -offset indent
.It Sy "Function" Ta Sy "vi" Ta Sy "emacs"
.It Li "Cancel command prompt" Ta "Escape" Ta "Escape"
.It Li "Delete current word" Ta "" Ta "C-w"
.It Li "Delete entire command" Ta "d" Ta "C-u"
.It Li "Delete from cursor to end" Ta "D" Ta "C-k"
.It Li "Execute command" Ta "Enter" Ta "Enter"
.It Li "Get next command from history" Ta "" Ta "Down"
.It Li "Get previous command from history" Ta "" Ta "Up"
.It Li "Insert top paste buffer" Ta "p" Ta "C-y"
.It Li "Look for completions" Ta "Tab" Ta "Tab"
.It Li "Move cursor left" Ta "h" Ta "Left"
.It Li "Move cursor right" Ta "l" Ta "Right"
.It Li "Move cursor to end" Ta "$" Ta "C-e"
.It Li "Move cursor to next word" Ta "w" Ta "M-f"
.It Li "Move cursor to previous word" Ta "b" Ta "M-b"
.It Li "Move cursor to start" Ta "0" Ta "C-a"
.It Li "Transpose characters" Ta "" Ta "C-t"
.El
.It Xo Ic confirm-before
.Op Fl p Ar prompt
.Op Fl t Ar target-client
.Ar command
.Xc
.D1 (alias: Ic confirm )
Ask for confirmation before executing
.Ar command .
If
.Fl p
is given,
.Ar prompt
is the prompt to display; otherwise a prompt is constructed from
.Ar command .
It may contain the special character sequences supported by the
.Ic status-left
option.
.Pp
This command works only from inside
.Nm .
.It Xo Ic display-message
.Op Fl p
.Op Fl c Ar target-client
.Op Fl t Ar target-pane
.Op Ar message
.Xc
.D1 (alias: Ic display )
Display a message.
If
.Fl p
is given, the output is printed to stdout, otherwise it is displayed in the
.Ar target-client
status line.
The format of
.Ar message
is described in the
.Sx FORMATS
section; information is taken from
.Ar target-pane
if
.Fl t
is given, otherwise the active pane for the session attached to
.Ar target-client .
.El
.Sh BUFFERS
.Nm
maintains a set of named
.Em paste buffers .
Each buffer may be either explicitly or automatically named.
Explicitly named buffers are named when created with the
.Ic set-buffer
or
.Ic load-buffer
commands, or by renaming an automatically named buffer with
.Ic set-buffer
.Fl n .
Automatically named buffers are given a name such as
.Ql buffer0001 ,
.Ql buffer0002
and so on.
When the
.Ic buffer-limit
option is reached, the oldest automatically named buffer is deleted.
Explicitly named buffers are not subject to
.Ic buffer-limit
and may be deleted with
.Ic delete-buffer
command.
.Pp
Buffers may be added using
.Ic copy-mode
or the
.Ic set-buffer
and
.Ic load-buffer
commands, and pasted into a window using the
.Ic paste-buffer
command.
If a buffer command is used and no buffer is specified, the most
recently added automatically named buffer is assumed.
.Pp
A configurable history buffer is also maintained for each window.
By default, up to 2000 lines are kept; this can be altered with the
.Ic history-limit
option (see the
.Ic set-option
command above).
.Pp
The buffer commands are as follows:
.Bl -tag -width Ds
.It Xo
.Ic choose-buffer
.Op Fl F Ar format
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window into buffer choice mode, where a buffer may be chosen
interactively from a list.
After a buffer is selected,
.Ql %%
is replaced by the buffer name in
.Ar template
and the result executed as a command.
If
.Ar template
is not given, "paste-buffer -b '%%'" is used.
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
This command works only if at least one client is attached.
.It Ic clear-history Op Fl t Ar target-pane
.D1 (alias: Ic clearhist )
Remove and free the history for the specified pane.
.It Ic delete-buffer Op Fl b Ar buffer-name
.D1 (alias: Ic deleteb )
Delete the buffer named
.Ar buffer-name ,
or the most recently added automatically named buffer if not specified.
.It Xo Ic list-buffers
.Op Fl F Ar format
.Xc
.D1 (alias: Ic lsb )
List the global buffers.
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
.It Xo Ic load-buffer
.Op Fl b Ar buffer-name
.Ar path
.Xc
.D1 (alias: Ic loadb )
Load the contents of the specified paste buffer from
.Ar path .
.It Xo Ic paste-buffer
.Op Fl dpr
.Op Fl b Ar buffer-name
.Op Fl s Ar separator
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic pasteb )
Insert the contents of a paste buffer into the specified pane.
If not specified, paste into the current one.
With
.Fl d ,
also delete the paste buffer.
When output, any linefeed (LF) characters in the paste buffer are replaced with
a separator, by default carriage return (CR).
A custom separator may be specified using the
.Fl s
flag.
The
.Fl r
flag means to do no replacement (equivalent to a separator of LF).
If
.Fl p
is specified, paste bracket control codes are inserted around the
buffer if the application has requested bracketed paste mode.
.It Xo Ic save-buffer
.Op Fl a
.Op Fl b Ar buffer-name
.Ar path
.Xc
.D1 (alias: Ic saveb )
Save the contents of the specified paste buffer to
.Ar path .
The
.Fl a
option appends to rather than overwriting the file.
.It Xo Ic set-buffer
.Op Fl a
.Op Fl b Ar buffer-name
.Op Fl n Ar new-buffer-name
.Ar data
.Xc
.D1 (alias: Ic setb )
Set the contents of the specified buffer to
.Ar data .
The
.Fl a
option appends to rather than overwriting the buffer.
The
.Fl n
option renames the buffer to
.Ar new-buffer-name .
.It Xo Ic show-buffer
.Op Fl b Ar buffer-name
.Xc
.D1 (alias: Ic showb )
Display the contents of the specified buffer.
.El
.Sh MISCELLANEOUS
Miscellaneous commands are as follows:
.Bl -tag -width Ds
.It Ic clock-mode Op Fl t Ar target-pane
Display a large clock.
.It Xo Ic if-shell
.Op Fl bF
.Op Fl t Ar target-pane
.Ar shell-command command
.Op Ar command
.Xc
.D1 (alias: Ic if )
Execute the first
.Ar command
if
.Ar shell-command
returns success or the second
.Ar command
otherwise.
Before being executed,
.Ar shell-command
is expanded using the rules specified in the
.Sx FORMATS
section, including those relevant to
.Ar target-pane .
With
.Fl b ,
.Ar shell-command
is run in the background.
.Pp
If
.Fl F
is given,
.Ar shell-command
is not executed but considered success if neither empty nor zero (after formats
are expanded).
.It Ic lock-server
.D1 (alias: Ic lock )
Lock each client individually by running the command specified by the
.Ic lock-command
option.
.It Xo Ic run-shell
.Op Fl b
.Op Fl t Ar target-pane
.Ar shell-command
.Xc
.D1 (alias: Ic run )
Execute
.Ar shell-command
in the background without creating a window.
Before being executed, shell-command is expanded using the rules specified in
the
.Sx FORMATS
section.
With
.Fl b ,
the command is run in the background.
After it finishes, any output to stdout is displayed in copy mode (in the pane
specified by
.Fl t
or the current pane if omitted).
If the command doesn't return success, the exit status is also displayed.
.It Xo Ic wait-for
.Op Fl L | S | U
.Ar channel
.Xc
.D1 (alias: Ic wait )
When used without options, prevents the client from exiting until woken using
.Ic wait-for
.Fl S
with the same channel.
When
.Fl L
is used, the channel is locked and any clients that try to lock the same
channel are made to wait until the channel is unlocked with
.Ic wait-for
.Fl U .
This command only works from outside
.Nm .
.El
.Sh TERMINFO EXTENSIONS
.Nm
understands some unofficial extensions to
.Xr terminfo 5 :
.Bl -tag -width Ds
.It Em Cs , Cr
Set the cursor colour.
The first takes a single string argument and is used to set the colour;
the second takes no arguments and restores the default cursor colour.
If set, a sequence such as this may be used
to change the cursor colour from inside
.Nm :
.Bd -literal -offset indent
$ printf '\e033]12;red\e033\e\e'
.Ed
.It Em \&Ss , Se
Set or reset the cursor style.
If set, a sequence such as this may be used
to change the cursor to an underline:
.Bd -literal -offset indent
$ printf '\e033[4 q'
.Ed
.Pp
If
.Em Se
is not set, \&Ss with argument 0 will be used to reset the cursor style instead.
.It Em \&Tc
Indicate that the terminal supports the
.Ql direct colour
RGB escape sequence (for example, \ee[38;2;255;255;255m).
.Pp
If supported, this is used for the OSC initialize colour escape sequence (which
may be enabled by adding the
.Ql initc
and
.Ql ccc
capabilities to the
.Nm
.Xr terminfo 5
entry).
.It Em \&Ms
Store the current buffer in the host terminal's selection (clipboard).
See the
.Em set-clipboard
option above and the
.Xr xterm 1
man page.
.El
.Sh CONTROL MODE
.Nm
offers a textual interface called
.Em control mode .
This allows applications to communicate with
.Nm
using a simple text-only protocol.
.Pp
In control mode, a client sends
.Nm
commands or command sequences terminated by newlines on standard input.
Each command will produce one block of output on standard output.
An output block consists of a
.Em %begin
line followed by the output (which may be empty).
The output block ends with a
.Em %end
or
.Em %error .
.Em %begin
and matching
.Em %end
or
.Em %error
have two arguments: an integer time (as seconds from epoch) and command number.
For example:
.Bd -literal -offset indent
%begin 1363006971 2
0: ksh* (1 panes) [80x24] [layout b25f,80x24,0,0,2] @@2 (active)
%end 1363006971 2
.Ed
.Pp
The
.Ic refresh-client
.Fl C
command may be used to set the size of a client in control mode.
.Pp
In control mode,
.Nm
outputs notifications.
A notification will never occur inside an output block.
.Pp
The following notifications are defined:
.Bl -tag -width Ds
.It Ic %client-session-changed Ar client Ar session-id Ar name
The client is now attached to the session with ID
.Ar session-id ,
which is named
.Ar name .
.It Ic %exit Op Ar reason
The
.Nm
client is exiting immediately, either because it is not attached to any session
or an error occurred.
If present,
.Ar reason
describes why the client exited.
.It Ic %layout-change Ar window-id Ar window-layout Ar window-visible-layout Ar window-flags
The layout of a window with ID
.Ar window-id
changed.
The new layout is
.Ar window-layout .
The window's visible layout is
.Ar window-visible-layout
and the window flags are
.Ar window-flags .
.It Ic %output Ar pane-id Ar value
A window pane produced output.
.Ar value
escapes non-printable characters and backslash as octal \\xxx.
.It Ic %pane-mode-changed Ar pane-id
The pane with ID
.Ar pane-id
has changed mode.
.It Ic %session-changed Ar session-id Ar name
The client is now attached to the session with ID
.Ar session-id ,
which is named
.Ar name .
.It Ic %session-renamed Ar name
The current session was renamed to
.Ar name .
.It Ic %session-window-changed Ar session-id Ar window-id
The session with ID
.Ar session-id
changed its active window to the window with ID
.Ar window-id .
.It Ic %sessions-changed
A session was created or destroyed.
.It Ic %unlinked-window-add Ar window-id
The window with ID
.Ar window-id
was created but is not linked to the current session.
.It Ic %window-add Ar window-id
The window with ID
.Ar window-id
was linked to the current session.
.It Ic %window-close Ar window-id
The window with ID
.Ar window-id
closed.
.It Ic %window-pane-changed Ar window-id Ar pane-id
The active pane in the window with ID
.Ar window-id
changed to the pane with ID
.Ar pane-id .
.It Ic %window-renamed Ar window-id Ar name
The window with ID
.Ar window-id
was renamed to
.Ar name .
.El
.Sh FILES
.Bl -tag -width "/etc/tmux.confXXX" -compact
.It Pa ~/.tmux.conf
Default
.Nm
configuration file.
.It Pa /etc/tmux.conf
System-wide configuration file.
.El
.Sh EXAMPLES
To create a new
.Nm
session running
.Xr vi 1 :
.Pp
.Dl $ tmux new-session vi
.Pp
Most commands have a shorter form, known as an alias.
For new-session, this is
.Ic new :
.Pp
.Dl $ tmux new vi
.Pp
Alternatively, the shortest unambiguous form of a command is accepted.
If there are several options, they are listed:
.Bd -literal -offset indent
$ tmux n
ambiguous command: n, could be: new-session, new-window, next-window
.Ed
.Pp
Within an active session, a new window may be created by typing
.Ql C-b c
(Ctrl
followed by the
.Ql b
key
followed by the
.Ql c
key).
.Pp
Windows may be navigated with:
.Ql C-b 0
(to select window 0),
.Ql C-b 1
(to select window 1), and so on;
.Ql C-b n
to select the next window; and
.Ql C-b p
to select the previous window.
.Pp
A session may be detached using
.Ql C-b d
(or by an external event such as
.Xr ssh 1
disconnection) and reattached with:
.Pp
.Dl $ tmux attach-session
.Pp
Typing
.Ql C-b \&?
lists the current key bindings in the current window; up and down may be used
to navigate the list or
.Ql q
to exit from it.
.Pp
Commands to be run when the
.Nm
server is started may be placed in the
.Pa ~/.tmux.conf
configuration file.
Common examples include:
.Pp
Changing the default prefix key:
.Bd -literal -offset indent
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
.Ed
.Pp
Turning the status line off, or changing its colour:
.Bd -literal -offset indent
set-option -g status off
set-option -g status-style bg=blue
.Ed
.Pp
Setting other options, such as the default command,
or locking after 30 minutes of inactivity:
.Bd -literal -offset indent
set-option -g default-command "exec /bin/ksh"
set-option -g lock-after-time 1800
.Ed
.Pp
Creating new key bindings:
.Bd -literal -offset indent
bind-key b set-option status
bind-key / command-prompt "split-window 'exec man %%'"
bind-key S command-prompt "new-window -n %1 'ssh %1'"
.Ed
.Sh SEE ALSO
.Xr pty 4
.Sh AUTHORS
.An Nicholas Marriott Aq Mt nicholas.marriott@@gmail.com
@


1.546
log
@Add a format for the last search string in copy mode and fix the prompt
so it can work when in -I, suggested by Suraj N Kurapati.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.545 2017/04/28 13:39:59 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 28 2017 $
d4234 5
d4261 4
d4273 5
d4292 5
@


1.545
log
@Default for xterm-keys was wrong, stop documenting it.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.544 2017/04/22 06:15:22 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 22 2017 $
d3566 1
@


1.544
log
@Typo in example.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.543 2017/04/20 09:20:22 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 20 2017 $
a3197 1
The default is off.
@


1.543
log
@If a #() command doesn't exit, use its most recent line of output (it
must be a full line). Don't let it redraw the status line more than once
a second.

Requested by someone about 10 years ago...
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.542 2017/04/19 06:52:27 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 19 2017 $
d3438 1
a3438 1
.Ql #{==,#{host},myhost}
@


1.542
log
@When the data we have buffered to write to a terminal grows beyond a
reasonable amount (currently width * height * 8 bytes), discard all
output to the terminal and start trying to redraw periodically
instead. Continue with this until the amount of data we are trying to
write falls to a low level again.

This helps to prevent tmux sitting on a huge buffer of data when there
are processes with fast output running inside tmux but the outside
terminal is slow.

A new client_discarded format holds the amount of data that has been
discarded due to this mechanism.

The three variables (when to start this, when to stop, and how often to
redraw) are basically "works for me" at the moment, this is going in to
see how it goes and if it causes problems for anyone else.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.541 2017/04/18 15:44:17 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 18 2017 $
d3493 2
@


1.541
log
@Add a format for number of bytes writtent to client, useful for debugging.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.540 2017/04/05 10:49:46 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 5 2017 $
d3511 1
@


1.540
log
@Give each client a name. This defaults to the tty name as before but
falls back to an alternative if the tty name is not available. This is
clearer than overloading the client ttyname member and allows us to
remove the path stored in the tty struct, it should always be the same
as the client.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.539 2017/03/22 07:16:54 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 22 2017 $
d3524 1
@


1.539
log
@Add support for the strikethrough attribute (SGR 9), using the new smxx
terminfo capability. This means there are now nine attribute bits, so
anything above 0xff uses an extended cell.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.538 2017/02/15 08:47:55 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 15 2017 $
d370 2
a371 1
should be the name of the
d3514 1
@


1.538
log
@"status bar" -> "status line" for consistency, from Benjamin Dopplinger.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.537 2017/02/10 12:59:18 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 10 2017 $
d2667 1
d2669 1
a2669 1
.Ic italics ,
@


1.537
log
@Don't use a bufferevent for the tty, so we can keep better track of what
is being written and when.

Also a manpage typo fix from jmc@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.536 2017/02/09 15:04:53 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 9 2017 $
d912 1
a912 1
is specified, only update the client's status bar.
d2762 1
a2762 1
Update the status bar every
d2786 1
a2786 1
(by default the session name) to the left of the status bar.
d2816 1
a2816 1
of the left component of the status bar.
d2832 1
a2832 1
to the right of the status bar.
d2844 1
a2844 1
of the right component of the status bar.
@


1.536
log
@Instead of numbering session groups, give them a name which may be given
to -t instead of a target session. Also allow them to contain only one
session.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.535 2017/02/09 14:49:00 nicm Exp $
d863 1
a863 1
linked to all sessions in the grouo and any windows closed removed from all
@


1.535
log
@Document refresh-client -C.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.534 2017/02/09 12:00:42 nicm Exp $
d815 1
a815 1
.Op Fl t Ar target-session
d860 5
a864 8
is given, the new session is
.Em grouped
with
.Ar target-session .
This means they share the same set of windows - all windows from
.Ar target-session
are linked to the new session, any new windows are linked to both sessions and
any windows closed removed from both sessions.
d866 15
a880 1
either session may be killed without affecting the other.
d3576 1
a3576 1
.It Li "session_group" Ta "" Ta "Number of session group"
@


1.534
log
@Don't lie about the default size in the man page.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.533 2017/02/01 09:55:07 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 1 2017 $
d891 1
d902 3
d4203 5
@


1.533
log
@Implement "all event" (1003) mouse mode but in a way that works. The
main issue is that if we have two panes, A with 1002 and B with 1003, we
need to set 1003 outside tmux in order to get all the mouse events, but
then we need to suppress the ones that pane A doesn't want. This is easy
in SGR mouse mode, because buttons == 3 is only used for movement events
(for other events the trailing m/M marks a release instead), but in
normal mouse mode we can't tell so easily. So for that, look at the
previous event instead - if it is drag+release as well, then the current
event is a movement event.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.532 2017/01/29 22:10:55 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 29 2017 $
d837 1
a837 1
specify the size of the initial window (80 by 24 if not given).
@


1.532
log
@Add -n to break-pane.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.531 2017/01/25 14:24:54 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 25 2017 $
d3531 1
@


1.531
log
@If xterm-keys is on, use xterm(1) style keys for Home and End as well as
modified keys.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.530 2017/01/24 21:50:22 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 24 2017 $
d1261 1
@


1.530
log
@Fixed keys for choose mode, and remove the last mode keys bits.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.529 2017/01/24 20:15:32 nicm Exp $
d2473 1
a2473 1
to be overriden.
@


1.529
log
@Make update-environment an array as well.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.528 2017/01/24 20:05:15 nicm Exp $
a1144 8
Mode key bindings are defined in two tables:
.Em vi-choice
and
.Em emacs-choice
for keys used when choosing from lists (such as produced by the
.Ic choose-window
command).
.Pp
a2132 1
.Op Fl t Ar mode-table
a2180 7
If
.Fl t
is present,
.Ar key
is bound in
.Ar mode-table .
.Pp
a2184 1
.Op Fl t Ar mode-table
a2195 9
.Pp
With
.Fl t ,
the key bindings in
.Ar mode-table
are listed; this may be one of:
.Em vi-choice
or
.Em emacs-choice .
a2239 1
.Op Fl t Ar mode-table
d2246 2
a2247 1
.Fl n ,
a2248 2
and
.Fl t
@


1.528
log
@Convert terminal-overrides to an array option.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.527 2017/01/24 20:01:34 nicm Exp $
d2872 3
a2874 4
.It Ic update-environment Ar variables
Set a space-separated string containing a list of environment variables to be
copied into the session environment when a new session is created or an
existing session is attached.
a2880 3
The default is
"DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID
XAUTHORITY".
@


1.527
log
@Remove some lies about terminal-overrides from tmux.1.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.526 2017/01/24 19:53:37 nicm Exp $
d2498 6
a2503 6
.It Ic terminal-overrides Ar string
Contains a list of entries which override terminal descriptions read using
.Xr terminfo 5 .
.Ar string
is a comma-separated list of items each a colon-separated string made up of a
terminal type pattern (matched using
d2514 4
a2517 10
for all terminal types and the
.Ql dch1
entry to
.Ql \ee[P
for the
.Ql rxvt
terminal type, the option could be set to the string:
.Bd -literal -offset indent
"*:clear=\ee[H\ee[2J,rxvt:dch1=\ee[P"
.Ed
@


1.526
log
@Add support for custom command aliases, this is an array option which
contains items of the form "alias=command". This is consulted when an
unknown command is parsed.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.525 2017/01/13 10:12:12 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 13 2017 $
a2527 6
The default value forcibly corrects the
.Ql colors
entry for terminals which support 256 colours:
.Bd -literal -offset indent
"*256col*:colors=256,xterm*:XT"
.Ed
@


1.525
log
@Add -E to detach-client to exec a command to replace the client instead
of exiting it, useful if tmux wasn't exec'd itself. From Jenna Magius.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.524 2017/01/11 16:09:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 11 2017 $
d2413 24
@


1.524
log
@Add a format for terminal type.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.523 2017/01/10 10:08:59 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 10 2017 $
d727 1
d744 5
@


1.523
log
@Some manpage fixes: rephrase a convoluted sentence, make the names of
some keys more standard, and use Ql instead of Dq.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.522 2017/01/10 07:55:48 jmc Exp $
d3515 1
@


1.522
log
@avoid unneccessary markup; tweaked and ok nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.521 2017/01/09 21:28:56 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 9 2017 $
d179 1
d181 1
a181 2
attempts to guess if the terminal is likely to support UTF-8 by checking the
first of the
d186 3
a188 1
environment variables to be set for the string "UTF-8".
d1188 3
a1190 3
.Ql C-up ,
.Ql C-down
.Ql C-left
d1192 1
a1192 1
.Ql C-right
d1729 3
a1731 1
.Dq screen
d1736 1
a1736 1
.Dq TERM=screen
d2229 2
a2230 2
.Ql npage
) to send; if the string is not recognised as a key, it is sent as a series of
@


1.521
log
@Add %if/%endif for conditionals when parsing configuration files, the
argument is a format (the new == and != are useful).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.520 2017/01/09 21:03:25 nicm Exp $
d943 1
a943 2
.Ns ( Ql 0
or empty), subsequent lines are ignored until
@


1.520
log
@Add simple comparisons in formats: #{==:a,b} and #{!=:a,b} ("a" and "b"
are expanded so can compare formats). And expand the condition to
#{?a,b,c} (the "a" part) if it doesn't work as a simple lookup.

Also add FORMAT_NOJOBS flag to disable jobs in a format.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.519 2017/01/09 19:27:00 nicm Exp $
d933 24
@


1.519
log
@Run the source-file pattern through glob(3).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.518 2017/01/07 15:40:23 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 7 2017 $
d3399 15
@


1.518
log
@Add note about ccc and initc so people who want it can see it is
possible.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.517 2017/01/06 11:57:03 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 6 2017 $
d924 4
a927 1
.Ar path .
@


1.517
log
@Incremental search in copy mode (on for emacs keys by default) - much
the same as normal searching but updates the cursor position and marked
search terms as you type. C-r and C-s in the prompt repeat the search,
once finished searching (with Enter), N and n work as before.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.516 2016/11/29 12:54:46 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 29 2016 $
d4116 10
@


1.516
log
@Make send -N work for all keys, not just in copy mode. From Artem Fokin.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.515 2016/11/24 13:38:44 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 24 2016 $
d1023 1
a1023 1
.Bl -column "CommandXXXXXXXXXXXXXXXXX" "viXXXXXXXXXX" "emacs" -offset indent
d1070 4
a1073 2
.It Li "search-backward <for>" Ta "?" Ta "C-r"
.It Li "search-forward <for>" Ta "/" Ta "C-s"
d3735 1
a3735 1
.Op Fl 1
d3785 3
@


1.515
log
@Make the selection able to exist independent of the cursor position, so
that it is not affected by scrolling. If MouseDragEnd1Pane is bound to
the new "stop-selection" command:

    bind -Tcopy-mode MouseDragEnd1Pane stop-selection

A selection made with the mouse will stay as it is after button 1 is
released. (It also works bound to a key.)

From Artem Fokin.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.514 2016/11/15 09:53:23 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 15 2016 $
d2218 1
a2218 1
specifies a repeat count to a copy mode command.
@


1.514
log
@Add copy-pipe-and-cancel, from Artem Fokin.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.513 2016/10/21 13:51:59 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 21 2016 $
d1075 1
@


1.513
log
@Add %%% to substitute with quotes escaped (convert " to \"). Use this
for the prompts in copy mode. Fixes problems with jumping to ' reported
by Theo Buehler.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.512 2016/10/18 19:25:26 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 18 2016 $
d1035 1
@


1.512
log
@xterm-keys was in the wrong place in the list; Dilyan Palauzov.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.511 2016/10/16 22:06:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 16 2016 $
d3150 1
a3160 1
.Pp
d3773 4
@


1.511
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.510 2016/10/16 19:55:52 nicm Exp $
d3145 5
a3160 5
.It Xo Ic wrap-search
.Op Ic on | off
.Xc
If this option is set, searches will wrap around the end of the pane contents.
The default is on.
@


1.510
log
@Add hook_session and hook_window formats to get information on the
affected session or window when a hook fires. Enable session-created and
session-closed hooks now that that is available.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.509 2016/10/16 17:55:14 nicm Exp $
d3241 2
d3255 2
d3259 2
d3480 1
@


1.509
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.508 2016/10/15 12:34:02 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 15 2016 $
d3247 4
d3474 4
@


1.508
log
@zap double .Pp;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.507 2016/10/15 00:09:30 nicm Exp $
d3459 1
a3459 2
.It Li "command_hooked" Ta "" Ta "Name of command hooked, if any"
.It Li "command_name" Ta "" Ta "Name of command in use, if any"
d3469 1
@


1.507
log
@Fire hooks on the simple notifys (window-renamed and session-renamed),
the complicated ones get no hooks for now (more to come).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.506 2016/10/14 17:40:47 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 14 2016 $
a3742 1
.Pp
@


1.506
log
@Missing flags in capture-pane, and tweak choose-tree text. From Dilyan Palauzov.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.505 2016/10/13 22:48:51 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 13 2016 $
d3247 4
@


1.505
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.504 2016/10/13 21:37:03 nicm Exp $
d1250 1
a1250 1
.Op Fl aepPq
a1389 1
If
d1391 4
a1394 3
is given will display the specified format instead of the default session
format.
If
d1396 4
a1399 7
is given will display the specified format instead of the default window
format.
For the meaning of the
.Fl s
and
.Fl w
options, see the
@


1.504
log
@Remove the set-remain-on-exit option, it was always a hack and can now
be done with hooks instead.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.503 2016/10/13 20:09:19 nicm Exp $
d3207 1
a3207 1
Each
d3209 1
a3209 3
command has a
.Em before
hook and an
d3213 2
a3214 2
A command's before hook is run before the command is executed and its after
hook is run afterwards, except when the command is run as part of a hook
d3216 1
a3216 3
Before hooks are named using the
.Ql before-
prefix and after hooks the
a3223 5
.Ed
.Pp
Or to write when each new window is created to a file:
.Bd -literal -offset indent
set-hook before-new-window 'run "date >>/tmp/log"'
@


1.503
log
@Remove mention of key tables than no longer exist.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.502 2016/10/13 09:06:48 nicm Exp $
a2698 13
.It Xo Ic set-remain-on-exit
.Op Ic on | off
.Xc
Set the
.Ic remain-on-exit
window option for any windows first created in this session.
When this option is true, windows in which the running program has
exited do not close, instead remaining open but inactivate.
Use the
.Ic respawn-window
command to reactivate such a window, or the
.Ic kill-window
command to destroy it.
@


1.502
log
@-f missed from splitw usage, from Felix Rosencrantz.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.501 2016/10/12 15:26:37 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 12 2016 $
d2182 1
a2182 5
.Em vi-edit ,
.Em emacs-edit ,
.Em vi-choice ,
.Em emacs-choice ,
.Em vi-copy
d2184 1
a2184 1
.Em emacs-copy .
@


1.501
log
@bind-key -c has gone, remove from man page, and unused table declarations.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.500 2016/10/12 14:50:14 nicm Exp $
d1954 1
a1954 1
.Op Fl bdhvP
@


1.500
log
@Drop the edit mode key tables and just use fixed key bindings for the
command prompt.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.498 2016/10/11 09:30:36 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 11 2016 $
d2103 1
a2103 1
.Op Fl cnr
d2158 1
a2158 4
.Ar mode-table :
the binding for command mode with
.Fl c
or for normal mode without.
d2232 1
a2232 1
.Op Fl acn
a2239 1
.Fl c ,
@


1.499
log
@The repeat prompt in both emacs and vi (and the old one in tmux) doesn't
support line editing and instead executes a command as soon as a
non-number key is pressed. Add a -N flag to command-prompt for the same
in copy mode. Reported by Theo Buehler.
@
text
@d1107 1
a1107 5
Mode key bindings are defined in a set of named tables:
.Em vi-edit
and
.Em emacs-edit
for keys used when line editing at the command prompt; and
d2999 2
a3000 4
Use vi or emacs-style key bindings in copy and choice modes.
As with the
.Ic status-keys
option, the default is emacs, unless
d3745 1
a3745 1
.Op Fl 1N
a3772 7
Both
.Ar inputs
and
.Ar prompts
may contain the special character sequences supported by the
.Ic status-left
option.
d3792 24
a3815 2
.Fl N
accepts only numbers and exit the prompt on any other key press.
@


1.498
log
@Support double and triple clicks (they are cumulative, so double is
fired then triple), and use for select-word and select-line in copy
mode. Inspired by a different solution from Omar Sandoval.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.497 2016/10/11 07:23:34 nicm Exp $
d3751 1
a3751 1
.Op Fl 1
d3805 2
@


1.497
log
@Fundamental change to how copy mode key bindings work:

The vi-copy and emacs-copy mode key tables are gone, and instead copy
mode commands are bound in one of two normal key tables ("copy-mode" or
"copy-mode-vi"). Keys are bound to "send-keys -X copy-mode-command". So:

    bind -temacs-copy C-Up scroll-up
    bind -temacs-copy -R5 WheelUpPane scroll-up

Becomes:

    bind -Tcopy-mode C-Up send -X scroll-up
    bind -Tcopy-mode WheelUpPane send -N5 -X scroll-up

This allows the full command parser and command set to be used - for
example, we can use the normal command prompt for searching, jumping,
and so on instead of a custom one:

    bind -Tcopy-mode C-r command-prompt -p'search up' "send -X search-backward '%%'"

command-prompt also gets a -1 option to only require on key press, which
is needed for jumping.

The plan is to get rid of mode keys entirely, so more to come eventually.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.496 2016/10/03 20:58:39 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 3 2016 $
d3337 1
d3341 2
a3342 1
.It Li "WheelUp" Ta "WheelDown" Ta "" Ta ""
@


1.496
log
@Document set-hook -u.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.495 2016/09/12 15:40:58 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 12 2016 $
d1005 7
a1011 2
The keys available depend on whether emacs or vi mode is selected
(see the
d1013 62
a1074 54
option).
The following keys are supported as appropriate for the mode:
.Bl -column "FunctionXXXXXXXXXXXXXXXXX" "viXXXXXXXXXX" "emacs" -offset indent
.It Sy "Function" Ta Sy "vi" Ta Sy "emacs"
.It Li "Append selection" Ta "A" Ta ""
.It Li "Back to indentation" Ta "^" Ta "M-m"
.It Li "Bottom of history" Ta "G" Ta "M-<"
.It Li "Clear selection" Ta "Escape" Ta "C-g"
.It Li "Copy selection" Ta "Enter" Ta "M-w"
.It Li "Copy to named buffer" Ta \&" Ta ""
.It Li "Cursor down" Ta "j" Ta "Down"
.It Li "Cursor left" Ta "h" Ta "Left"
.It Li "Cursor right" Ta "l" Ta "Right"
.It Li "Cursor to bottom line" Ta "L" Ta ""
.It Li "Cursor to middle line" Ta "M" Ta "M-r"
.It Li "Cursor to top line" Ta "H" Ta "M-R"
.It Li "Cursor up" Ta "k" Ta "Up"
.It Li "Delete entire line" Ta "d" Ta "C-u"
.It Li "Delete/Copy to end of line" Ta "D" Ta "C-k"
.It Li "End of line" Ta "$" Ta "C-e"
.It Li "Go to line" Ta ":" Ta "g"
.It Li "Half page down" Ta "C-d" Ta "M-Down"
.It Li "Half page up" Ta "C-u" Ta "M-Up"
.It Li "Jump again" Ta ";" Ta ";"
.It Li "Jump again in reverse" Ta "," Ta ","
.It Li "Jump backward" Ta "F" Ta "F"
.It Li "Jump forward" Ta "f" Ta "f"
.It Li "Jump to backward" Ta "T" Ta ""
.It Li "Jump to forward" Ta "t" Ta ""
.It Li "Next page" Ta "C-f" Ta "Page down"
.It Li "Next paragraph" Ta "}" Ta "M-}"
.It Li "Next space" Ta "W" Ta ""
.It Li "Next space, end of word" Ta "E" Ta ""
.It Li "Next word" Ta "w" Ta ""
.It Li "Next word end" Ta "e" Ta "M-f"
.It Li "Other end of selection" Ta "o" Ta ""
.It Li "Paste buffer" Ta "p" Ta "C-y"
.It Li "Previous page" Ta "C-b" Ta "Page up"
.It Li "Previous paragraph" Ta "{" Ta "M-{"
.It Li "Previous space" Ta "B" Ta ""
.It Li "Previous word" Ta "b" Ta "M-b"
.It Li "Quit mode" Ta "q" Ta "Escape"
.It Li "Rectangle toggle" Ta "v" Ta "R"
.It Li "Scroll down" Ta "C-Down or C-e" Ta "C-Down"
.It Li "Scroll up" Ta "C-Up or C-y" Ta "C-Up"
.It Li "Search again" Ta "n" Ta "n"
.It Li "Search again in reverse" Ta "N" Ta "N"
.It Li "Search backward" Ta "?" Ta "C-r"
.It Li "Search forward" Ta "/" Ta "C-s"
.It Li "Select line" Ta "V" Ta ""
.It Li "Start of line" Ta "0" Ta "C-a"
.It Li "Start selection" Ta "Space" Ta "C-Space"
.It Li "Top of history" Ta "g" Ta "M->"
.It Li "Transpose characters" Ta "" Ta "C-t"
a1105 5
For example, to move the cursor forward by ten words, use
.Ql M-1 0 M-f
in emacs mode, and
.Ql 10w
in vi.
d1111 1
a1111 1
for keys used when line editing at the command prompt;
d1117 1
a1117 37
command); and
.Em vi-copy
and
.Em emacs-copy
used in copy mode.
The tables may be viewed with the
.Ic list-keys
command and keys modified or removed with
.Ic bind-key
and
.Ic unbind-key .
If
.Ic append-selection ,
.Ic copy-selection ,
or
.Ic start-named-buffer
are given the
.Fl x
flag,
.Nm
will not exit copy mode after copying.
.Ic copy-pipe
copies the selection and pipes it to a command.
For example the following will bind
.Ql C-w
not to exit after copying and
.Ql C-q
to copy the selection into
.Pa /tmp
as well as the paste buffer:
.Bd -literal -offset indent
bind-key -temacs-copy C-w copy-selection -x
bind-key -temacs-copy C-q copy-pipe "cat >/tmp/out"
.Ed
.Pp
The paste buffer key pastes the first line from the top paste buffer on the
stack.
a2107 1
.Op Fl R Ar repeat-count
a2165 13
For keys in the
.Em vi-copy
or
.Em emacs-copy
tables,
.Fl R
specifies how many times the command should be repeated.
.Pp
See the
.Sx WINDOWS AND PANES
section and the
.Ic list-keys
command for information on mode key bindings.
d2197 2
a2198 1
.Op Fl lMR
d2223 8
d3749 1
d3799 4
@


1.495
log
@Allow repeat count to be specified in mode key tables with bind-key -R,
and set the default repeat count to 5 for WheelUp and WheelDown in
copy-mode.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.494 2016/09/04 17:37:06 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 4 2016 $
d3324 1
a3324 1
.Op Fl g
d3329 3
a3331 1
Sets hook
@


1.494
log
@Add support for performing a full width split (with splitw -f), rather
than splitting the current cell. From Stephen Kent.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.493 2016/08/22 20:07:58 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 22 2016 $
d2136 1
d2195 8
@


1.493
log
@Two minor fixes from dilyan palauzov.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.492 2016/08/03 09:08:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 3 2016 $
d2014 7
@


1.492
log
@We only replace the first %%, not multiple (use %2 for second).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.491 2016/06/16 10:55:47 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 16 2016 $
d990 1
a990 1
window may be in one of several modes.
d3876 1
a3876 1
Explicitly named are not subject to
@


1.491
log
@Allow a command to be specified to display-panes, similar to
command-prompt, rather than always just selecting the pane.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.490 2016/06/15 14:43:06 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 15 2016 $
d3803 1
a3803 3
are replaced by the response to the first prompt, the second
.Ql %%
and all
@


1.490
log
@Add missing buffer_name format, from Awal Garg.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.489 2016/06/15 08:54:11 nicm Exp $
d1461 5
a1465 1
.It Ic display-panes Op Fl t Ar target-client
d1475 1
a1475 1
While the indicator is on screen, a pane may be selected with the
d1479 8
a1486 1
keys.
@


1.489
log
@Add -F to list-commands.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.488 2016/05/12 16:05:33 tim Exp $
d17 1
a17 1
.Dd $Mdocdate: May 12 2016 $
d3479 1
@


1.488
log
@- Rework load_cfg() error handling a little.
- Add -q to source-file to suppress errors about nonexistent files.

Input and OK nicm@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.487 2016/05/01 11:46:12 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 1 2016 $
d776 3
a778 1
.It Ic list-commands
d3497 3
@


1.487
log
@Missing format (window_activity_flag) and a missing Ta.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.486 2016/04/29 20:57:10 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 29 2016 $
d916 4
a919 1
.It Ic source-file Ar path
d923 5
@


1.486
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.485 2016/04/29 15:58:52 nicm Exp $
d3539 1
a3539 1
.It Li "socket_path" Ta "" "Server socket path"
d3542 1
@


1.485
log
@Compact a small table into text.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.484 2016/04/29 15:00:48 nicm Exp $
d2777 1
a2777 2

It may also contain the a special character sequence #[] to change the colour
@


1.484
log
@Add option to include status text in the pane borders. If
pane-border-status is set to "top" or "bottom" (rather than "off"),
every pane has a permanent top or bottom border containing the text from
pane-border-format.

Based on a diff sent long ago by Jonathan Slenders, mostly rewritten and
simplified by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.483 2016/04/29 14:05:24 nicm Exp $
d2777 8
a2784 6
It may also contain any of the following special character sequences:
.Bl -column "Character pair" "Replaced with" -offset indent
.It Sy "Character pair" Ta Sy "Replaced with"
.It Li "#[attributes]" Ta "Colour or attribute change"
.It Li "##" Ta "A literal" Ql #
.El
a2788 3
For a list of allowed attributes see the
.Ic message-command-style
option.
@


1.483
log
@Final parts of command hooks, add before- and after- hooks to each command.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.482 2016/04/27 09:39:09 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 27 2016 $
d3067 8
@


1.482
log
@Add next/previous paragraph, from J Raynor.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.481 2016/03/18 07:28:27 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 18 2016 $
d3224 29
a3252 3
Each hook has a
.Em name .
The following hooks are available:
d3479 1
@


1.481
log
@Instead of reusing MouseUp at the finish of a drag, add a new key
MouseDragEnd. It can be useful to bind them separately in copy mode.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.480 2016/03/01 11:58:45 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 1 2016 $
d1028 1
d1036 1
@


1.480
log
@Fix break-pane synopsis and some other tmux.1 bits.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.479 2016/01/31 09:54:46 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 31 2016 $
d3297 4
a3300 4
.It Li "MouseDown1" Ta "MouseUp1" Ta "MouseDrag1"
.It Li "MouseDown2" Ta "MouseUp2" Ta "MouseDrag2"
.It Li "MouseDown3" Ta "MouseUp3" Ta "MouseDrag3"
.It Li "WheelUp" Ta "WheelDown" Ta ""
@


1.479
log
@Support negative trim values (#{=-10:pane_title}) to trim from the end,
suggested by Kevin Brubeck Unhammer.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.478 2016/01/29 11:13:56 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 29 2016 $
d720 1
a720 1
is used,
d856 2
a857 2
are linked to the new session and any subsequent new windows or windows being
closed are applied to both sessions.
a859 1
Giving
d861 1
a861 1
or
d877 1
a877 1
is used,
d1252 1
a1252 1
.Op Fl t Ar dst-pane
@


1.478
log
@Support for RGB colour, using the extended cell mechanism to avoid
wasting unnecessary space. The 'Tc' flag must be set in the external
TERM entry (using terminal-overrides or a custom terminfo entry), if not
tmux will map to the closest of the 256 or 16 colour palettes.

Mostly from Suraj N Kurapati, based on a diff originally by someone else.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.477 2016/01/19 15:59:12 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 19 2016 $
d3380 7
a3386 3
a number and a colon, so
.Ql #{=10:pane_title}
will include at most the first 10 characters of the pane title.
@


1.477
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.476 2016/01/16 00:36:53 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 16 2016 $
d2924 1
a2924 1
sequence (\\033k...\\033\\\\).
d4027 1
a4027 1
understands some extensions to
d4051 4
d4056 1
a4056 3
This sequence can be used by
.Nm
to store the current buffer in the host terminal's selection (clipboard).
@


1.476
log
@Add hooks for alerts (bell, silence, activity), from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.475 2015/12/16 21:50:37 nicm Exp $
d3 1
a3 1
.\" Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
d17 1
a17 1
.Dd $Mdocdate: December 16 2015 $
d4251 1
a4251 1
.An Nicholas Marriott Aq Mt nicm@@users.sourceforge.net
@


1.475
log
@Add infrastructure to work out the best target given a pane or window
alone and use it to add pane_died and pane_exited hooks.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.474 2015/12/12 18:32:24 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 12 2015 $
d3227 10
@


1.474
log
@Add key-table option to set the default key table for a session, allows
different key bindings for different sessions and a few other things.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.473 2015/12/12 18:19:00 nicm Exp $
d3233 6
@


1.473
log
@Allow prefix and prefix2 to be set to None to disable (useful if you
would rather bind the prefix in the root table).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.472 2015/12/11 16:27:01 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 11 2015 $
d2575 5
@


1.472
log
@Mention {src,dst}-{window,pane} where we define target-{window,pane}.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.471 2015/12/11 12:27:36 nicm Exp $
d2667 6
d2675 5
@


1.471
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.470 2015/12/08 06:42:07 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: December 8 2015 $
d419 4
d478 5
a482 2
may be a
pane ID or takes a similar form to
@


1.470
log
@Ed was meant to be El;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.469 2015/12/08 01:10:31 nicm Exp $
d3409 1
@


1.469
log
@Add hooks infrastructure, basic commands (set-hook, show-hooks) and a
couple of not very useful client hooks. This will eventually let
commands be run at various points and on notifications. Joint work with
Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.468 2015/11/29 17:06:59 guenther Exp $
d17 1
a17 1
.Dd $Mdocdate: November 29 2015 $
d3241 1
a3241 1
.Ed
@


1.468
log
@Delete a duplicated line

ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.467 2015/11/24 23:46:15 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 24 2015 $
d3196 46
@


1.467
log
@Make environ_set va_args and use it to tidy up some calls. Also add a
missing word in manpage (from jmc).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.466 2015/11/24 22:27:59 nicm Exp $
a873 1
.Ic update-environment .
@


1.466
log
@Document socket_path format.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.465 2015/11/24 21:52:06 nicm Exp $
d753 1
a753 1
clears alerts (bell, activity, or silence) in all windows linked to the
@


1.465
log
@Remove the -I part of show-messages which isn't really that useful; the
server start time can now be accessed with a new start_time format (use:
tmux display -p '#{t:start_time}')
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.464 2015/11/24 21:50:06 nicm Exp $
d3416 1
@


1.464
log
@All kill-session -C to clear alerts in all windows, suggested by Aaron
U'Ren.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.463 2015/11/24 20:40:51 nicm Exp $
d894 1
a894 1
.Op Fl IJT
a906 1
.Fl I ,
d910 1
a910 1
show debugging information about the running server, jobs and terminals.
d3416 1
@


1.463
log
@Fix usage of detach-client.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.462 2015/11/22 18:28:01 tim Exp $
d17 1
a17 1
.Dd $Mdocdate: November 22 2015 $
d743 1
a743 1
.Op Fl a
d751 4
@


1.462
log
@If display-time is set to 0, show status messages until a key is pressed;
OK nicm@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.461 2015/11/18 14:13:55 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 18 2015 $
d717 1
a717 2
.Op Fl P
.Op Fl a
@


1.461
log
@Add s/foo/bar/: prefix for formats to substitute bar for foo.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.460 2015/11/13 10:00:26 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 13 2015 $
d2560 1
@


1.460
log
@Add window_visible_layout which ignores zoomed panes and use it for
control mode (which needs to know all panes), from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.459 2015/11/12 12:36:34 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 12 2015 $
d3314 7
@


1.459
log
@tweak previous; ok nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.458 2015/11/12 11:09:11 nicm Exp $
d3415 1
a3415 1
.It Li "window_layout" Ta "" Ta "Window layout description"
d3420 1
d4011 1
a4011 1
.It Ic %layout-change Ar window-id Ar window-layout
d4017 4
@


1.458
log
@Nuke the utf8 and status-utf8 options and make tmux only a UTF-8
terminal. We still support non-UTF-8 terminals outside tmux, but inside
it is always UTF-8 (as when the utf8 and status-utf8 options were on).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.457 2015/11/12 11:07:10 nicm Exp $
d195 2
a196 2
itself always accepts UTF-8, this controls whether it will send UTF-8
characters to the terminal it is running it (if not, they are replaced by
d2799 2
a2800 2
.Xr strftime 3 ,
character pairs are replaced.
@


1.457
log
@Remove the mouse_utf8_flag format as well.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.456 2015/11/11 23:23:33 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 11 2015 $
d193 5
a197 7
If the server is started from a client passed
.Fl u
or where UTF-8 is detected, the
.Ic utf8
and
.Ic status-utf8
options are enabled in the global window and session options respectively.
a2770 6
By default, UTF-8 in
.Ar string
is not interpreted, to enable UTF-8, use the
.Ic status-utf8
option.
.Pp
d2800 1
a2800 3
character pairs are replaced, and UTF-8 is dependent on the
.Ic status-utf8
option.
a2819 11
.It Xo Ic status-utf8
.Op Ic on | off
.Xc
Instruct
.Nm
to treat top-bit-set characters in the
.Ic status-left
and
.Ic status-right
strings as UTF-8; notably, this is important for wide characters.
This option defaults to off.
a3064 7
.Pp
.It Xo Ic utf8
.Op Ic on | off
.Xc
Instructs
.Nm
to expect UTF-8 sequences to appear in this window.
@


1.456
log
@Drop mouse-utf8 option and always turn on UTF-8 mouse if the client says
it supports UTF-8.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.455 2015/10/27 14:51:35 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 27 2015 $
a3396 1
.It Li "mouse_utf8_flag" Ta "" Ta "Pane mouse UTF-8 flag"
@


1.455
log
@No more TMPDIR.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.454 2015/10/26 00:15:37 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 26 2015 $
a2657 4
.It Xo Ic mouse-utf8
.Op Ic on | off
.Xc
If enabled, request mouse input as UTF-8 on UTF-8 terminals.
@


1.454
log
@space before punctuation;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.453 2015/10/25 22:29:17 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 25 2015 $
d146 2
a147 3
.Ev TMUX_TMPDIR ,
.Ev TMPDIR
if it is unset, or
d149 1
a149 1
if both are unset.
@


1.453
log
@Extend the modifiers allowed before formats: as well as the existing
#{=10:...}  length limit, add #{t:...} to convert a time_t format to a
string, #{b:...} for basename and #{d:...} for dirname. Remove all the
foo_string time formats as they can now be replaced by "t:", for example
#{window_activity_string} becomes #{t:window_activity}.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.452 2015/10/23 16:02:21 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 23 2015 $
d3334 1
a3334 1
.Ql 1445765102,
@


1.452
log
@Format for scroll position, from Jorge Morante.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.451 2015/10/21 13:14:36 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 21 2015 $
d3322 1
d3329 18
a3373 1
.It Li "client_activity_string" Ta "" Ta "String time client last had activity"
a3374 1
.It Li "client_created_string" Ta "" Ta "String time client created"
a3429 1
.It Li "session_activity_string" Ta "" Ta "String time of session last activity"
a3430 1
.It Li "session_created_string" Ta "" Ta "String time session created"
a3431 1
.It Li "session_last_attached_string" Ta "" Ta "String time session last attached"
a3440 1
.It Li "window_activity_string" Ta "" Ta "String time of window last activity"
a3441 1
.It Li "window_activity_flag" Ta "" Ta "1 if window has activity alert"
@


1.451
log
@client_key_table was missing.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.450 2015/09/13 13:31:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 13 2015 $
d3409 1
@


1.450
log
@Add copy-mode -e to exit copy mode when scrolling off the bottom, useful
for quick view of history, from Cam Hutchison.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.449 2015/09/10 08:58:14 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 10 2015 $
d3360 1
@


1.449
log
@Add session_last_attached time and format, from Sina Siadat.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.448 2015/08/28 12:31:55 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 28 2015 $
d1136 1
a1136 1
.Op Fl Mu
d1146 10
@


1.448
log
@Remove the lock-server option which is a bit redundant, it isn't that
different without it.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.447 2015/08/12 08:55:20 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 12 2015 $
d3404 2
@


1.447
log
@Rename left/right/up/down relative to active pane to add -of suffix
(left-of/right-of/etc) to remove conflict with left/right meaning
leftmost or rightmost pane. From Ben Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.446 2015/07/27 08:45:45 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 27 2015 $
d2564 1
a2564 3
seconds of inactivity, or the entire server (all sessions) if the
.Ic lock-server
option is set.
a2571 13
.It Xo Ic lock-server
.Op Ic on | off
.Xc
If this option is
.Ic on
(the default),
instead of each session locking individually as each has been
idle for
.Ic lock-after-time ,
the entire server will lock after
.Em all
sessions would have locked.
This has no effect as a session option; it must be set as a global option.
@


1.446
log
@Make -q suppress ambiguous option warnings too, from Cam Hutchison.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.445 2015/07/20 15:50:04 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 20 2015 $
d499 4
a502 4
.It Li "{up}" Ta "" Ta "The pane above the active pane"
.It Li "{down}" Ta "" Ta "The pane below the active pane"
.It Li "{left}" Ta "" Ta "The pane to the left of the active pane"
.It Li "{right}" Ta "" Ta "The pane to the right of the active pane"
@


1.445
log
@Add an option (history-file) for a file to save/restore command prompt
history, from Olof-Joachim Frahm.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.444 2015/07/20 10:34:11 nicm Exp $
d2325 1
a2325 1
flag prevents setting an option that is already set and
d2327 1
a2327 1
flag suppresses errors about unknown options.
@


1.444
log
@Correct the tsl/fsl sequence to ]0 not ]2 (from Marcel Korpel). While
here, Xr xterm and remove some advice about elinks that is better
elsewhere.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.443 2015/07/13 15:37:26 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 13 2015 $
d2399 4
@


1.443
log
@Add a format to show if client is a control client. From Bruno Sutic.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.442 2015/07/13 13:36:29 nicm Exp $
d2712 3
a2714 2
automatically sets these to the \ee]2;...\e007 sequence if
the terminal appears to be an xterm.
a2715 3
Note that elinks
will only attempt to set the window title if the STY environment
variable is set.
@


1.442
log
@Add a -s flag to show-environment to output Bourne shell commands a la
ssh-agent. Mostly from Cam Hutchison with some changes by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.441 2015/06/18 23:53:56 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 18 2015 $
d3361 1
@


1.441
log
@Remove a stray : and tweak paragraph.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.440 2015/06/17 19:56:08 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 17 2015 $
d3545 1
a3545 1
.Op Fl g
d3559 3
@


1.440
log
@Change break-pane to take target and source panes (-t and -s) in line
with other commands, from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.439 2015/06/17 16:50:28 nicm Exp $
d407 2
a408 2
If the session name is prefixed with a
.Ql = : ,
d415 1
@


1.439
log
@Move the shuffle code from new-window -a into a function and add a -a
flag for move-window too. From Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.438 2015/06/15 10:58:01 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 15 2015 $
d1236 2
a1237 1
.Op Fl t Ar target-pane
d1241 3
a1243 2
.Ar target-pane
off from its containing window to make it the only pane in a new window.
@


1.438
log
@Add window_activity format, from Thomas Adam based on a diff originally
from propos6 at gmail dot com.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.437 2015/06/14 10:07:44 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 14 2015 $
d1547 1
a1547 1
.Op Fl dk
d1561 4
d1630 1
a1630 1
.Op Fl rdk
@


1.437
log
@Add a format for client PID (client_pid) and server PID (pid). Diff for
client_pid from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.436 2015/06/07 21:39:39 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 7 2015 $
d3417 2
@


1.436
log
@Add -E flag when attaching or switching client to bypass
update-environment, from Steven Lu.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.435 2015/06/05 08:14:16 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 5 2015 $
d3356 1
d3400 1
@


1.435
log
@Make it so that if a window or session target is prefixed with an =,
only an exact name or index match is accepted, no special character,
prefix match, or fnmatch.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.434 2015/06/04 20:34:22 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: June 4 2015 $
d673 1
a673 1
.Op Fl dr
d712 6
d792 1
a792 1
.Op Fl AdDP
d867 7
d928 1
a928 1
.Op Fl lnpr
d949 6
@


1.434
log
@tweak SYNOPSIS and usage();
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.433 2015/06/04 14:29:33 nicm Exp $
d407 8
d451 3
@


1.433
log
@Make unsetting a global option restore it to the default. Diff lying
around for a while, I have forgotten who suggested it :-/.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.432 2015/06/04 11:43:51 nicm Exp $
d26 1
a26 1
.Op Fl 2lCuv
@


1.432
log
@Add support for a single "marked pane". There is one marked pane in the
server at a time; it may be toggled or cleared with select-pane -m and
-M (the border is highlighted). A new target '~' or '{marked}' specifies
the marked pane to commands and it is the default target for the
swap-pane and join-pane -s flag (this makes them much simpler to use -
mark the source pane and then change to the target pane to run swapp or
joinp).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.431 2015/05/27 13:28:04 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 27 2015 $
a2275 1
.Pp
d2278 1
a2278 1
is specified, the global session or window option is set.
d2282 3
a2284 2
options.
It is not possible to unset a global option.
d2288 1
a2288 3
flag prevents setting an option that is already set.
.Pp
The
@


1.431
log
@Move the jobs output cache into the formats code so that #() work more
generally (for example, again working in set-titles-string).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.430 2015/05/12 15:29:29 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 12 2015 $
d301 6
d360 2
a461 1
.It Li "{mouse}" Ta "=" Ta "The window where the mouse event happened"
a490 1
.It Li "{mouse}" Ta "=" Ta "The pane where the mouse event happened"
d502 21
d1470 7
d1832 1
a1832 1
.Op Fl DdegLlRU
d1860 14
d1962 7
d1980 9
d3555 1
@


1.430
log
@Add a session_alerts format which is a list of all the alerts in the
current session in symbolic form (something like "0!,4~,5!"). Use this
in the default set-titles-string. Prompted by a request from Jan ONDREJ.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.429 2015/05/12 15:27:46 nicm Exp $
a2664 1
.It Li "#(shell-command)" Ta "First line of the command's output"
a2668 14
The #(shell-command) form executes
.Ql shell-command
and inserts the first line of its output.
Note that shell commands are only executed once at the interval specified by
the
.Ic status-interval
option: if the status line is redrawn in the meantime, the previous result is
used.
Shell commands are executed with the
.Nm
global environment set (see the
.Sx ENVIRONMENT
section).
.Pp
d3232 17
@


1.429
log
@Add bell-action "other" to pass through bells in all windows except the
current, suggested by Jan ONDREJ.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.428 2015/05/11 10:10:16 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 11 2015 $
d3307 1
@


1.428
log
@Remove the c0-* options which never really worked satisfactorily. Going
to try something else...
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.427 2015/05/08 16:18:04 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 8 2015 $
d2378 1
a2378 1
.Op Ic any | none | current
d2385 1
a2385 1
means all bells are ignored and
d2387 3
a2389 1
means only bells in windows other than the current window are ignored.
@


1.427
log
@Move input parser structs into input.c (removing fairly useless
saved_cursor_[xy] formats as a side-effect).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.426 2015/05/06 08:35:39 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 6 2015 $
a2887 18
.Pp
.It Ic c0-change-interval Ar interval
.It Ic c0-change-trigger Ar trigger
These two options configure a simple form of rate limiting for a pane.
If
.Nm
sees more than
.Ar trigger
C0 sequences that modify the screen (for example, carriage returns, linefeeds
or backspaces) in one millisecond, it will stop updating the pane immediately and
instead redraw it entirely every
.Ar interval
milliseconds.
This helps to prevent fast output (such as
.Xr yes 1 )
overwhelming the terminal.
The default is a trigger of 250 and an interval of 100.
A trigger of zero disables the rate limiting.
@


1.426
log
@Add a format window_linked which is 1 if a window has been linked
multiple times, also remove the default space in window_flags and use a
conditional to add it in window-status-format (this means additional
flags can be added in the option without extra spaces). From Thomas Adam
with tweaks by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.425 2015/04/29 15:59:08 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 29 2015 $
a3320 2
.It Li "saved_cursor_x" Ta "" Ta "Saved cursor X in pane"
.It Li "saved_cursor_y" Ta "" Ta "Saved cursor Y in pane"
@


1.425
log
@If default-terminal is set to "screen" or "screen-*", emulate screen's
historical (incorrect) behaviour for SGR 3 and send smso
(standout). Previously, we would send sitm (italics) if the terminal
outside had it and smso otherwise. This was acceptably until recently
because xterm's terminfo entry lacked sitm, so most users got smso.

People who want italics should set default-terminal to the forthcoming
"tmux" entry (and be prepared to deal with it being missing on older
hosts).

As a side-effect this changes default-terminal to be a server rather
than a session option.

suggested by and ok naddy
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.424 2015/04/28 10:43:14 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 28 2015 $
d3348 1
@


1.424
log
@Add select-layout -o to undo the last layout change (apply the previously
set layout).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.423 2015/04/27 16:25:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 27 2015 $
d2269 13
a2420 12
.It Ic default-terminal Ar terminal
Set the default terminal for new windows created in this session - the
default value of the
.Ev TERM
environment variable.
For
.Nm
to work correctly, this
.Em must
be set to
.Ql screen
or a derivative of it.
@


1.423
log
@Rewrite of the target resolution internals to be simpler and more
consistent but with much less duplication, but keeping the same internal
API. Also adds more readable aliases for some of the special tokens used
in targets (eg "{start}" instead of "^"). Some behaviours may have
changed, for example prefix matches now happen before fnmatch.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.422 2015/04/21 22:32:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 21 2015 $
d445 2
a446 2
The following special tokens are available to indicate particular windows. Each
has a single-character alternative form.
d1778 1
a1778 1
.Op Fl np
d1795 2
@


1.422
log
@Do not die on USR1 if any of the socket parent directories are
missing. Reported by Robin Powell.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.421 2015/04/20 15:34:56 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 20 2015 $
d361 1
d363 1
a363 1
is the name of the
d371 4
a374 2
If no client is specified, the current client is chosen, if possible, or an
error is reported.
d380 6
a385 1
is the session id prefixed with a $, the name of a session (as listed by the
d387 8
a394 9
command), or the name of a client with the same syntax as
.Ar target-client ,
in which case the session attached to the client is used.
When looking for the session name,
.Nm
initially searches for an exact match; if none is found, the session names
are checked for any for which
.Ar target-session
is a prefix or for which it matches as an
d396 4
a399 2
pattern.
If a single match is found, it is used as the target session; multiple matches
d412 19
a430 3
is looked for in order: as a window index, for example mysession:1;
as a window ID, such as @@1;
as an exact window name, such as mysession:mywindow; then as an
d432 3
a434 2
pattern or the start of a window name, such as mysession:mywin* or
mysession:mywin.
d444 12
a455 15
The special character
.Ql \&!
uses the last (previously current) window,
.Ql ^
selects the highest numbered window,
.Ql $
selects the lowest numbered window, and
.Ql +
and
.Ql -
select the next window or the previous window by number.
When the argument does not contain a colon,
.Nm
first attempts to parse it as window; if that fails, an attempt is made to
match a session.
d458 2
a459 1
takes a similar form to
d461 3
a463 2
but with the optional addition of a period followed by a pane index, for
example: mysession:mywindow.1.
d466 20
a485 22
If neither a colon nor period appears,
.Nm
first attempts to use the argument as a pane index; if that fails, it is looked
up as for
.Ar target-window .
A
.Ql + ,
.Ql -
or
.Ql \&!
indicate the next, previous or last pane.
One of the strings
.Em top ,
.Em bottom ,
.Em left ,
.Em right ,
.Em top-left ,
.Em top-right ,
.Em bottom-left
or
.Em bottom-right
may be used instead of a pane index.
d487 1
a487 1
The special characters
d496 9
a504 8
When dealing with a session that doesn't contain sequential window indexes,
they will be correctly skipped.
.Pp
.Nm
also gives each pane created in a server an identifier consisting of a
.Ql %
and a number, starting from zero.
A pane's identifier is unique for the life of the
d506 2
a507 1
server and is passed to the child process of the pane in the
d510 14
a523 1
It may be used alone to target a pane or the window containing it.
d3185 3
a3187 1
The special character
@


1.421
log
@Support for multiple key tables to commands to be bound to sequences of
keys. The default key bindings become the "prefix" table and -n the
"root" table. Keys may be bound in new tables with bind -T and
switch-client -T used to specify the table in which the next key should
be looked up. Based on a diff from Keith Amling.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.420 2015/04/19 22:10:30 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 19 2015 $
d166 2
a167 1
server process to recreate it.
d2008 2
a2009 1
or for normal mode without. See the
@


1.420
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.419 2015/04/19 21:34:21 nicm Exp $
d841 1
d859 16
d1951 1
d1959 26
a1984 4
By default (without
.Fl t )
the primary key bindings are modified (those normally activated with the prefix
key); in this case, if
d1986 7
a1992 5
is specified, it is not necessary to use the prefix key,
.Ar command
is bound to
.Ar key
alone.
d2007 6
a2012 1
or for normal mode without.
d2016 4
a2019 1
.It Ic list-keys Op Fl t Ar key-table
d2023 6
a2028 3
.Fl t
the primary key bindings - those executed when preceded by the prefix key -
are printed.
d2033 1
a2033 1
.Ar key-table
d2078 1
d2084 4
a2087 1
Without
d2089 2
a2090 5
the primary key bindings are modified; in this case, if
.Fl n
is specified, the command bound to
.Ar key
without a prefix (if any) is removed.
a2093 10
.Pp
If
.Fl t
is present,
.Ar key
in
.Ar mode-table
is unbound: the binding for command mode with
.Fl c
or for normal mode without.
@


1.419
log
@Rewrite of tmux mouse support which was a mess. Instead of having
options for "mouse-this" and "mouse-that", mouse events may be bound as
keys and there is one option "mouse" that turns on mouse support
entirely (set -g mouse on).

See the new MOUSE SUPPORT section of the man page for description of the
key names and new flags (-t= to specify the pane or window under mouse
as a target, and send-keys -M to pass through a mouse event).

The default builtin bindings for the mouse are:

    bind -n   MouseDown1Pane select-pane -t=; send-keys -M
    bind -n MouseDown1Status select-window -t=
    bind -n   MouseDrag1Pane copy-mode -M
    bind -n MouseDrag1Border resize-pane -M

To get the effect of turning mode-mouse off, do:

    unbind -n MouseDrag1Pane
    unbind -temacs-copy MouseDrag1Pane

The old mouse options are now gone, set-option -q may be used to
suppress warnings if mixing configuration files.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.418 2015/04/19 21:05:27 nicm Exp $
d1031 1
a1031 1
.Sx MOUSE SUPPORT Ns ).
d1681 1
a1681 1
.Sx MOUSE SUPPORT Ns ).
d1749 1
a1749 1
or set it's style (with
d2014 1
a2014 1
.Sx MOUSE SUPPORT Ns ).
d3095 1
a3095 1
.It Li "WheelUp" Ta "WheelDown"
@


1.418
log
@Support setting the default window and pane background colours (window
and active pane via window-style and window-active-style options, an
individual pane by a new select-pane -P flag). From J Raynor.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.417 2015/04/10 16:00:08 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 10 2015 $
d1022 1
a1022 1
.Op Fl u
d1029 3
d1649 1
a1649 1
.Op Fl DLRUZ
d1678 4
d1990 1
a1990 1
.Op Fl lR
d2011 4
d2463 1
a2463 1
.It Xo Ic mouse-resize-pane
d2468 4
a2471 14
captures the mouse and allows panes to be resized by dragging on their borders.
.It Xo Ic mouse-select-pane
.Op Ic on | off
.Xc
If on,
.Nm
captures the mouse and when a window is split into multiple panes the mouse may
be used to select the current pane.
The mouse click is also passed through to the application as normal.
.It Xo Ic mouse-select-window
.Op Ic on | off
.Xc
If on, clicking the mouse on a window name in the status line will select that
window.
a2858 12
.It Xo Ic mode-mouse
.Op Ic on | off | copy-mode
.Xc
Mouse state in modes.
If on, the mouse may be used to enter copy mode and copy a selection by
dragging, to enter copy mode and scroll with the mouse wheel, or to select an
option in choice mode.
If set to
.Em copy-mode ,
the mouse behaves as set to on, but cannot be used to enter copy
mode.
.Pp
d3075 50
@


1.417
log
@Add a -x flag to copy-selection, append-selection and start-named-buffer
to prevent it exiting copy mode after copying. From J Raynor with a few
tweaks by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.416 2015/04/10 07:23:14 nicm Exp $
d1733 2
a1734 1
.Op Fl DdeLlRU
d1741 3
a1743 1
.Ar target-window .
d1760 16
d2092 1
a2092 1
For example
d2958 8
d3017 8
@


1.416
log
@in the case -> in this case.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.415 2015/03/31 17:58:36 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 31 2015 $
d990 12
a1001 3
One command accepts an argument,
.Ic copy-pipe ,
which copies the selection and pipes it to a command.
d1003 2
d1010 1
@


1.415
log
@Add a helper function to convert time, and add session_activity formats
(the latter from Takatoshi Matsumoto).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.414 2015/03/11 08:17:37 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 11 2015 $
d750 1
a750 1
already exists; in the case,
@


1.414
log
@set-titles-string now uses formats, not the status bits (so no #() for
now). Reported by landry.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.413 2015/02/06 15:09:34 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 6 2015 $
d3151 2
@


1.413
log
@Move pane border options to window options rather than session, from Marc Finet.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.412 2015/01/06 09:12:02 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 6 2015 $
d2502 3
a2504 3
Character sequences are replaced as for the
.Ic status-left
option.
@


1.412
log
@Add missing default bindings, from Theo Buehler.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.411 2014/12/09 19:23:35 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 9 2014 $
a2443 16
.It Ic pane-active-border-style Ar style
Set the pane border style for the currently active pane.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
Attributes are ignored.
.It Ic pane-border-style Ar style
Set the pane border style for panes aside from the active pane.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
Attributes are ignored.
d2882 9
d2895 9
@


1.411
log
@Add pane_dead_status for exit status of dead panes.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.410 2014/12/02 23:39:02 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 2 2014 $
d250 4
d274 2
a301 2
.It L
Switch the attached client back to the last session.
d308 2
d327 2
@


1.410
log
@Add -F to if-shell to allow it to be used to check for format or option
values rather than executing a command.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.409 2014/12/02 23:19:45 nicm Exp $
d3120 1
@


1.409
log
@Permit option values to be used in formats.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.408 2014/11/12 22:57:06 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 12 2014 $
d3592 1
a3592 1
.Op Fl b
d3605 3
a3607 1
Before being executed, shell-command is expanded using the rules specified in the
d3615 7
@


1.408
log
@Add -b to splitw like joinw, from Felix Rosencrantz.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.407 2014/11/07 12:28:28 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 7 2014 $
d3042 6
a3047 2
Some variables also have an shorter alias such as
.Ql #S .
d3051 2
a3052 1
Conditionals are also accepted by prefixing with
d3063 9
a3071 1
if it is unattached.
@


1.407
log
@V should be vi not emacs, also sort. From Theo Buehler.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.406 2014/11/06 09:17:25 nicm Exp $
d1760 1
a1760 1
.Op Fl dhvP
d1784 4
@


1.406
log
@Add V for select line with vi(1) keys. From Juho Pohjala.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.405 2014/11/05 23:15:11 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 5 2014 $
a877 1
.It Li "Copy to named buffer" Ta \&" Ta ""
d881 1
d895 3
d899 1
a900 4
.It Li "Jump backward" Ta "F" Ta "F"
.It Li "Jump to backward" Ta "T" Ta ""
.It Li "Jump again" Ta ";" Ta ";"
.It Li "Jump again in reverse" Ta "," Ta ","
d909 1
a910 1
.It Li "Previous space" Ta "B" Ta ""
a914 1
.It Li "Select line" Ta "" Ta "V"
d919 1
@


1.405
log
@Do not put a space between status-left/status-right and the window list,
instead move the space into the defaults for the options (so status-left
now defaults to "[#S] ". From Balazs Kezes.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.404 2014/10/25 08:47:04 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 25 2014 $
d915 1
@


1.404
log
@Add pane_input_off format, from Anish R Athalye.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.403 2014/10/18 20:28:19 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 18 2014 $
d2584 3
@


1.403
log
@Fix description of Ss and Se.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.402 2014/10/02 14:21:06 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 2 2014 $
d3102 1
@


1.402
log
@Top function key is F12 now.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.401 2014/09/25 12:45:35 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 25 2014 $
d3651 1
a3651 1
Change the cursor style.
d3659 2
a3660 4
.Em Csr
is set, it will be used to reset the cursor style instead
of
.Em Cs .
@


1.401
log
@Support ! for last pane.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.400 2014/09/08 14:29:05 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 8 2014 $
d1859 1
a1859 1
.Em F20 ,
@


1.400
log
@Add window_last_flag and window_zoomed_flag. From John Morrissey.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.399 2014/09/01 22:00:42 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 1 2014 $
d438 2
a439 1
.Ql +
d441 2
a442 2
.Ql -
indicate the next or previous pane index, respectively.
@


1.399
log
@Fix typo (paneas -> panes).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.398 2014/08/11 22:14:30 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 11 2014 $
d3135 1
d3141 1
@


1.398
log
@Add flags to selectp to enable and disable input to a pane, from Anish
Athalye.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.397 2014/06/20 10:46:59 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 20 2014 $
d2439 1
a2439 1
Set the pane border style for paneas aside from the active pane.
@


1.397
log
@Make -S- and -E- mean the start and end to capture-pane to avoid having
to faff around with huge numbers to get everything.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.396 2014/05/27 12:49:36 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 27 2014 $
d1295 1
a1295 1
.D1 (alias: Ic displayp)
d1385 4
a1388 1
.It Ic last-pane Op Fl t Ar target-window
d1391 4
d1711 1
a1711 1
.Op Fl lDLRU
d1731 4
@


1.396
log
@Add some formats for pane bounds.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.395 2014/05/14 06:45:35 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 14 2014 $
d1151 6
@


1.395
log
@Change key-table to mode-table to allow for some future work. From Keith
Amling.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.394 2014/05/13 08:08:32 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 13 2014 $
d3078 1
a3083 1
.It Li "pane_synchronized" Ta "" Ta "If pane is synchronized"
d3085 1
d3087 1
d3089 1
d3092 1
@


1.394
log
@If multiple arguments are given to new-session, new-window,
split-window, respawn-window or respawn-pane, pass them directly to
execvp() to help avoid quoting problems. One argument still goes to "sh
-c" like before. Requested by many over the years. Patch from J Raynor.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.393 2014/05/13 07:54:20 nicm Exp $
d1864 1
a1864 1
.Op Fl t Ar key-table
d1893 1
a1893 1
.Ar key-table :
d1951 1
a1951 1
.Op Fl t Ar key-table
d1973 1
a1973 1
.Ar key-table
@


1.393
log
@Add a copy mode key binding to copy to a named buffer. From J Raynor.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.392 2014/05/13 07:34:35 nicm Exp $
d481 1
a481 2
These must be passed as a single item, which typically means quoting them, for
example:
d485 26
@


1.392
log
@Add support for named buffers. If you don't name a buffer, things work
much as before - buffers are automatically named "buffer0000",
"buffer0001" and so on and ordered as a stack. Buffers can be named
explicitly when creating ("loadb -b foo" etc) or renamed ("setb -b
buffer0000 -n foo"). If buffers are named explicitly, they are not
deleted when buffer-limit is reached. Diff from J Raynor.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.391 2014/04/17 15:48:02 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 17 2014 $
d852 1
@


1.391
log
@#nnT went away a while ago, remove a leftover from the manpage.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.390 2014/04/17 07:55:43 nicm Exp $
a932 3
When copying the selection, the repeat count indicates the buffer index to
replace, if used.
.Pp
d1090 1
a1090 1
.Op Fl b Ar buffer-index
d3366 1
a3366 1
maintains a stack of
d3368 16
a3383 1
Up to the value of the
d3385 4
a3388 2
option are kept; when a new buffer is added, the buffer at the bottom of the
stack is removed.
d3393 3
a3395 1
command, and pasted into a window using the
d3398 2
d3420 1
a3420 1
is replaced by the buffer index in
d3435 1
a3435 1
.It Ic delete-buffer Op Fl b Ar buffer-index
d3437 3
a3439 3
Delete the buffer at
.Ar buffer-index ,
or the top buffer if not specified.
d3451 1
a3451 1
.Op Fl b Ar buffer-index
d3459 1
a3459 1
.Op Fl b Ar buffer-index
d3468 1
a3468 1
also delete the paste buffer from the stack.
d3483 1
a3483 1
.Op Fl b Ar buffer-index
d3494 2
a3495 1
.Op Fl b Ar buffer-index
d3504 4
d3509 1
a3509 1
.Op Fl b Ar buffer-index
@


1.390
log
@Remove the "info" message mechanism, this was only used for about five
mostly useless and annoying messages. Change those commands to silence
on success like all the others. Still accept the -q command line flag
and "quiet" server option for now.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.389 2014/04/17 07:51:38 nicm Exp $
a2536 4
.Pp
Where appropriate, special character sequences may be prefixed with a number to
specify the maximum length, for example
.Ql #24T .
@


1.389
log
@Extend the -q flag to set-option to suppress errors about unknown
options - this will allow options to be removed more easily.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.388 2014/04/17 07:36:45 nicm Exp $
d26 1
a26 1
.Op Fl 2lCquv
a170 4
.It Fl q
Set the
.Ic quiet
server option to prevent the server sending various informational messages.
a2108 6
.It Xo Ic quiet
.Op Ic on | off
.Xc
Enable or disable the display of various informational messages (see also the
.Fl q
command line flag).
@


1.388
log
@Remove the monitor-content option and associated bits and bobs. It's
never worked very well. If there is a big demand for it to return, will
consider better ways to do it.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.387 2014/04/16 21:02:41 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 16 2014 $
d2050 1
a2050 3
flag suppresses the informational message (as if the
.Ic quiet
server option was set).
@


1.387
log
@Remove the choose-list command to prepare for some later choose-* work.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.386 2014/04/02 18:12:18 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 2 2014 $
a2646 9
.It Xo Ic visual-content
.Op Ic on | off
.Xc
Like
.Ic visual-activity ,
display a message when content is present in a window
for which the
.Ic monitor-content
window option is enabled.
a2827 8
.It Ic monitor-content Ar match-string
Monitor content in the window.
When
.Xr fnmatch 3
pattern
.Ar match-string
appears in the window, it is highlighted in the status line.
.Pp
a2899 8
.It Ic window-status-content-style Ar style
Set status line style for windows with a content alert.
For how to specify
.Ar style ,
see the
.Ic message-command-style
option.
.Pp
a3101 1
.It Li "window_content_flag" Ta "" Ta "1 if window has content alert"
a3262 1
.It Li "+" Ta "Window is monitored for content and it has appeared."
d3269 1
a3269 3
and + to the
.Ic monitor-content
window options.
d3271 1
a3271 1
content) is present.
@


1.386
log
@Support UTF-8 with choose-buffer, from Kosuke ASAMI. Also make
buffer_sample bigger to let it trim at window right edge.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.385 2014/04/02 07:55:09 nicm Exp $
a1153 26
.Sx FORMATS
section.
This command works only if at least one client is attached.
.It Xo
.Ic choose-list
.Op Fl l Ar items
.Op Fl t Ar target-window
.Op Ar template
.Xc
Put a window into list choice mode, allowing
.Ar items
to be selected.
.Ar items
can be a comma-separated list to display more than one item.
If an item has spaces, that entry must be quoted.
After an item is chosen,
.Ql %%
is replaced by the chosen item in the
.Ar template
and the result is executed as a command.
If
.Ar template
is not given, "run-shell '%%'" is used.
.Ar items
also accepts format specifiers.
For the meaning of this see the
@


1.385
log
@pane_start_path has gone away.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.384 2014/03/31 21:41:35 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 31 2014 $
d3090 1
a3090 1
.It Li "buffer_sample" Ta "" Ta "First 50 characters from buffer"
@


1.384
log
@Make message-limit a server option.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.383 2014/03/31 21:39:31 nicm Exp $
a3130 1
.It Li "pane_start_path" Ta "" Ta "Path pane started with"
@


1.383
log
@Add setb -a to append and a copy mode append command, from J Raynor with
minor changes.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.382 2014/03/31 21:37:55 nicm Exp $
d781 1
a781 1
session option for the session attached to that client.
d2137 4
a2397 4
.It Ic message-limit Ar number
Set the number of error or information messages to save in the message log for
each client.
The default is 20.
@


1.382
log
@Make session_attached a count and add session_many_attached flag.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.381 2014/02/23 00:53:06 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 23 2014 $
d854 1
d3547 1
d3554 3
@


1.381
log
@Change terminal-overrides to a server option (now that we have them), it
doesn't make much sense as a session option.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.380 2014/02/16 12:45:17 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 16 2014 $
d3139 1
a3139 1
.It Li "session_attached" Ta "" Ta "1 if session attached"
d3146 1
@


1.380
log
@Leftovers from removing 88 colour support, from Theo Buehler.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.379 2014/02/02 08:48:48 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: February 2 2014 $
d2164 36
a2643 36
.It Ic terminal-overrides Ar string
Contains a list of entries which override terminal descriptions read using
.Xr terminfo 5 .
.Ar string
is a comma-separated list of items each a colon-separated string made up of a
terminal type pattern (matched using
.Xr fnmatch 3 )
and a set of
.Em name=value
entries.
.Pp
For example, to set the
.Ql clear
.Xr terminfo 5
entry to
.Ql \ee[H\ee[2J
for all terminal types and the
.Ql dch1
entry to
.Ql \ee[P
for the
.Ql rxvt
terminal type, the option could be set to the string:
.Bd -literal -offset indent
"*:clear=\ee[H\ee[2J,rxvt:dch1=\ee[P"
.Ed
.Pp
The terminal entry value is passed through
.Xr strunvis 3
before interpretation.
The default value forcibly corrects the
.Ql colors
entry for terminals which support 256 colours:
.Bd -literal -offset indent
"*256col*:colors=256,xterm*:XT"
.Ed
@


1.379
log
@fix some minor formatting glitches;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.378 2014/01/28 23:07:09 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 28 2014 $
d26 1
a26 1
.Op Fl 28lCquv
d2640 1
a2640 1
entry for terminals which support 88 or 256 colours:
d2642 1
a2642 1
"*88col*:colors=88,*256col*:colors=256,xterm*:XT"
@


1.378
log
@Allow replacing each of the many sets of separate foo-{fg,bg,attr}
options with a single foo-style option. For example:

    set -g status-fg yellow
    set -g status-bg red
    set -g status-attr blink

Becomes:

    set -g status-style fg=yellow,bg=red,blink

The -a flag to set can be used to add to rather than replace a style. So:

    set -g status-bg red

Becomes:

    set -ag status-style bg=red

Currently this is fully backwards compatible (all *-{fg,bg,attr} options
remain) but the plan is to deprecate them over time.

From Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.377 2014/01/22 14:43:42 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 22 2014 $
d786 1
a786 1
.Fl I,
d2502 1
a2502 1
.Sx FORMATS Ns )
@


1.377
log
@Merge server-info into show-messages and remove some not useful output.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.376 2013/11/24 11:29:09 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 24 2013 $
a2062 5
With
.Fl a ,
and if the option expects a string,
.Ar value
is appended to the existing setting.
d2079 26
d2296 12
a2307 20
.It Ic message-attr Ar attributes
Set status line message attributes, where
.Ar attributes
is either
.Ic none
or a comma-delimited list of one or more of:
.Ic bright
(or
.Ic bold ) ,
.Ic dim ,
.Ic underscore ,
.Ic blink ,
.Ic reverse ,
.Ic hidden ,
or
.Ic italics .
.It Ic message-bg Ar colour
Set status line message background colour, where
.Ar colour
is one of:
d2328 29
a2356 8
.It Ic message-command-attr Ar attributes
Set status line message attributes when in command mode.
.It Ic message-command-bg Ar colour
Set status line message background colour when in command mode.
.It Ic message-command-fg Ar colour
Set status line message foreground colour when in command mode.
.It Ic message-fg Ar colour
Set status line message foreground colour.
d2361 7
d2391 16
a2406 6
.It Ic pane-active-border-bg Ar colour
.It Ic pane-active-border-fg Ar colour
Set the pane border colour for the currently active pane.
.It Ic pane-border-bg Ar colour
.It Ic pane-border-fg Ar colour
Set the pane border colour for panes aside from the active pane.
a2471 6
.It Ic status-attr Ar attributes
Set status line attributes.
.It Ic status-bg Ar colour
Set status line background colour.
.It Ic status-fg Ar colour
Set status line foreground colour.
d2529 3
a2532 12
#[attributes] allows a comma-separated list of attributes to be specified,
these may be
.Ql fg=colour
to set the foreground colour,
.Ql bg=colour
to set the background colour, the name of one of the attributes (listed under
the
.Ic message-attr
option) to turn an attribute on, or an attribute prefixed with
.Ql no
to turn one off, for example
.Ic nobright .
a2547 6
.It Ic status-left-attr Ar attributes
Set the attribute of the left part of the status line.
.It Ic status-left-bg Ar colour
Set the background colour of the left part of the status line.
.It Ic status-left-fg Ar colour
Set the foreground colour of the left part of the status line.
d2553 7
a2577 6
.It Ic status-right-attr Ar attributes
Set the attribute of the right part of the status line.
.It Ic status-right-bg Ar colour
Set the background colour of the right part of the status line.
.It Ic status-right-fg Ar colour
Set the foreground colour of the right part of the status line.
d2583 14
a2822 9
.It Ic mode-attr Ar attributes
Set window modes attributes.
.Pp
.It Ic mode-bg Ar colour
Set window modes background colour.
.Pp
.It Ic mode-fg Ar colour
Set window modes foreground colour.
.Pp
d2848 8
d2926 7
a2932 2
.It Ic window-status-bell-attr Ar attributes
Set status line attributes for windows which have a bell alert.
d2934 7
a2940 2
.It Ic window-status-bell-bg Ar colour
Set status line background colour for windows with a bell alert.
d2942 7
a2948 35
.It Ic window-status-bell-fg Ar colour
Set status line foreground colour for windows with a bell alert.
.Pp
.It Ic window-status-content-attr Ar attributes
Set status line attributes for windows which have a content alert.
.Pp
.It Ic window-status-content-bg Ar colour
Set status line background colour for windows with a content alert.
.Pp
.It Ic window-status-content-fg Ar colour
Set status line foreground colour for windows with a content alert.
.Pp
.It Ic window-status-activity-attr Ar attributes
Set status line attributes for windows which have an activity (or silence) alert.
.Pp
.It Ic window-status-activity-bg Ar colour
Set status line background colour for windows with an activity alert.
.Pp
.It Ic window-status-activity-fg Ar colour
Set status line foreground colour for windows with an activity alert.
.Pp
.It Ic window-status-attr Ar attributes
Set status line attributes for a single window.
.Pp
.It Ic window-status-bg Ar colour
Set status line background colour for a single window.
.Pp
.It Ic window-status-current-attr Ar attributes
Set status line attributes for the currently active window.
.Pp
.It Ic window-status-current-bg Ar colour
Set status line background colour for the currently active window.
.Pp
.It Ic window-status-current-fg Ar colour
Set status line foreground colour for the currently active window.
d2955 7
a2961 11
.It Ic window-status-last-attr Ar attributes
Set status line attributes for the last active window.
.Pp
.It Ic window-status-last-bg Ar colour
Set status line background colour for the last active window.
.Pp
.It Ic window-status-last-fg Ar colour
Set status line foreground colour for the last active window.
.Pp
.It Ic window-status-fg Ar colour
Set status line foreground colour for a single window.
d2971 8
d2983 8
d3329 4
a3332 10
.Ic status-attr ,
.Ic status-fg
and
.Ic status-bg
session options and individual windows using the
.Ic window-status-attr ,
.Ic window-status-fg
and
.Ic window-status-bg
window options.
d3833 1
a3833 1
set-option -g status-bg blue
@


1.376
log
@Replace ## by # in format.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.375 2013/10/23 11:31:03 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 23 2013 $
d773 1
d777 1
d782 3
a784 1
This command displays the log for
d786 5
a3577 3
.It Ic server-info
.D1 (alias: Ic info )
Show server information and terminal details.
@


1.375
log
@Key to swap to other end of selection (bound to o with vi keys), from J
Raynor.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.374 2013/10/10 23:31:28 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 10 2013 $
d3014 3
@


1.374
log
@Bracket in the wrong place in description of c0-change-trigger.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.373 2013/10/10 12:39:25 nicm Exp $
d873 1
@


1.373
log
@Remove the KERN_PROC_CWD the proc_current_path format (which is the only
thing that uses it now).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.372 2013/10/10 12:26:36 nicm Exp $
d2737 2
a2738 2
.Xr yes 1
overwhelming the terminal).
@


1.372
log
@Alter how tmux handles the working directory to internally use file
descriptors rather than strings.

- Each session still has a current working directory.

- New sessions still get their working directory from the client that
  created them or its attached session if any.

- New windows are created by default in the session working directory.

- The -c flag to new, neww, splitw allows the working directory to be
  overridden.

- The -c flag to attach let's the session working directory be changed.

- The default-path option has been removed.

To get the equivalent to default-path '.', do:

        bind c neww -c $PWD

To get the equivalent of default-path '~', do:

        bind c neww -c ~

This also changes the client identify protocol to be a set of messages rather
than one as well as some other changes that should make it easier to make
backwards-compatible protocol changes in future.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.371 2013/10/10 12:07:37 nicm Exp $
a3070 1
.It Li "pane_current_path" Ta "" Ta "Current path if available"
@


1.371
log
@Support -c for new-session, based on code from J Raynor.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.370 2013/10/10 12:02:55 nicm Exp $
d567 1
d601 4
a1516 7
It may have an absolute path or one of the following values (or a subdirectory):
.Bl -column "XXXXXXXXXXXX" "XXXXXXXXXXXXXXXXXXXXXXXX" -offset indent
.It Li "Empty string" Ta "Current pane's directory"
.It Li "~" Ta "User's home directory"
.It Li "-" Ta "Where session was started"
.It Li "." Ta "Where server was started"
.El
a2175 11
.It Ic default-path Ar path
Set the default working directory for new panes.
If empty, the working directory is determined from the process
running in the active pane, from the command line environment or from the
working directory where the session was created.
Otherwise the same options are available as for the
.Fl c
flag to
.Ic new-window .
The default is
.Ql ~ .
a3043 1
.It Li "client_cwd" Ta "" Ta "Working directory of client"
@


1.370
log
@Mark flags as optional and mutually exclusive. From Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.369 2013/10/10 12:01:51 nicm Exp $
d675 1
@


1.369
log
@A couple of manpage fixes from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.368 2013/10/10 11:56:50 nicm Exp $
d3583 1
a3583 1
.Fl LSU
@


1.368
log
@Add automatic-rename-format option allowing automatic rename to use
something other than pane_current_command.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.367 2013/10/10 11:50:21 nicm Exp $
d102 3
a104 1
Start in control mode.
d627 1
a627 1
.It Ic kill-session
d630 1
@


1.367
log
@Add length limit operator for formats.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.366 2013/10/10 11:47:52 nicm Exp $
d2711 2
a2712 2
will attempt - on supported platforms - to rename the window to reflect the
command currently running in it.
d2725 7
@


1.366
log
@Add formats for window flags.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.365 2013/10/05 13:56:48 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 5 2013 $
d3027 6
@


1.365
log
@Change the default for the default-path option to ~. This is a quick
change to turn off the KERN_PROC_CWD code which is unpredictable. Later
it will go away and there may be other changes to how this works.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.364 2013/07/16 00:07:52 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: July 16 2013 $
d3097 3
d3108 1
@


1.364
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.363 2013/07/05 15:27:14 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 5 2013 $
d2176 1
a2176 1
If empty (the default), the working directory is determined from the process
d2183 2
@


1.363
log
@Add pane_synchronized format, from Romain Francoise.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.362 2013/06/23 13:10:47 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 23 2013 $
d3802 1
a3802 1
.An Nicholas Marriott Aq nicm@@users.sourceforge.net
@


1.362
log
@Focus events can cause trouble if left on and they can't be turned off
during idle periods (like the other states are) because we'd miss
events. So add a server option to control them. Defaults to off.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.361 2013/06/02 14:40:17 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: June 2 2013 $
d3071 1
@


1.361
log
@escape "Ss", becuase groff thinks it has found a macro;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.360 2013/06/02 07:52:15 nicm Exp $
d2095 8
@


1.360
log
@The actual terminfo entries we ended up with for cursor changes are Cs,
Ce, Ss and Se (not Cc, Ce, Cs, Csr). So use and document these instead
of the ones we were using earlier.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.359 2013/05/31 19:56:05 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 31 2013 $
d3584 1
a3584 1
.It Em Ss , Se
@


1.359
log
@Demote the old single-character replacement variables (#S and friends)
to aliases of formats. From Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.358 2013/05/31 19:46:42 nicm Exp $
d3574 1
a3574 1
.It Em Cc , Cr
d3584 1
a3584 1
.It Em Cs , Csr
@


1.358
log
@Add host_short format, from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.357 2013/04/24 10:15:47 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 24 2013 $
d2441 1
a2441 1
to the left of the status bar.
d2445 4
a2448 4
before being used.
By default, the session name is shown.
.Ar string
may contain any of the following special character sequences:
a2452 9
.It Li "#H" Ta "Hostname of local host"
.It Li "#h" Ta "Hostname of local host without the domain name"
.It Li "#F" Ta "Current window flag"
.It Li "#I" Ta "Current window index"
.It Li "#D" Ta "Current pane unique identifier"
.It Li "#P" Ta "Current pane index"
.It Li "#S" Ta "Session name"
.It Li "#T" Ta "Current pane title"
.It Li "#W" Ta "Current window name"
a2996 3
Special character sequences are replaced as documented under the
.Ic status-left
option and an additional long form is accepted.
d3002 2
a3003 2
.Ql #{session_name}
is equivalent to
d3019 77
a3095 77
.Bl -column "session_created_string" "Replaced with" -offset indent
.It Sy "Variable name" Ta Sy "Replaced with"
.It Li "alternate_on" Ta "If pane is in alternate screen"
.It Li "alternate_saved_x" Ta "Saved cursor X in alternate screen"
.It Li "alternate_saved_y" Ta "Saved cursor Y in alternate screen"
.It Li "buffer_sample" Ta "First 50 characters from the specified buffer"
.It Li "buffer_size" Ta "Size of the specified buffer in bytes"
.It Li "client_activity" Ta "Integer time client last had activity"
.It Li "client_activity_string" Ta "String time client last had activity"
.It Li "client_created" Ta "Integer time client created"
.It Li "client_created_string" Ta "String time client created"
.It Li "client_cwd" Ta "Working directory of client"
.It Li "client_height" Ta "Height of client"
.It Li "client_last_session" Ta "Name of the client's last session"
.It Li "client_prefix" Ta "1 if prefix key has been pressed"
.It Li "client_readonly" Ta "1 if client is readonly"
.It Li "client_session" Ta "Name of the client's session"
.It Li "client_termname" Ta "Terminal name of client"
.It Li "client_tty" Ta "Pseudo terminal of client"
.It Li "client_utf8" Ta "1 if client supports utf8"
.It Li "client_width" Ta "Width of client"
.It Li "cursor_flag" Ta "Pane cursor flag"
.It Li "cursor_x" Ta "Cursor X position in pane"
.It Li "cursor_y" Ta "Cursor Y position in pane"
.It Li "history_bytes" Ta "Number of bytes in window history"
.It Li "history_limit" Ta "Maximum window history lines"
.It Li "history_size" Ta "Size of history in bytes"
.It Li "host" Ta "Hostname of local host"
.It Li "host_short" Ta "Hostname of local host (no domain name)"
.It Li "insert_flag" Ta "Pane insert flag"
.It Li "keypad_cursor_flag" Ta "Pane keypad cursor flag"
.It Li "keypad_flag" Ta "Pane keypad flag"
.It Li "line" Ta "Line number in the list"
.It Li "mouse_any_flag" Ta "Pane mouse any flag"
.It Li "mouse_button_flag" Ta "Pane mouse button flag"
.It Li "mouse_standard_flag" Ta "Pane mouse standard flag"
.It Li "mouse_utf8_flag" Ta "Pane mouse UTF-8 flag"
.It Li "pane_active" Ta "1 if active pane"
.It Li "pane_current_command" Ta "Current command if available"
.It Li "pane_current_path" Ta "Current path if available"
.It Li "pane_dead" Ta "1 if pane is dead"
.It Li "pane_height" Ta "Height of pane"
.It Li "pane_id" Ta "Unique pane ID"
.It Li "pane_in_mode" Ta "If pane is in a mode"
.It Li "pane_index" Ta "Index of pane"
.It Li "pane_pid" Ta "PID of first process in pane"
.It Li "pane_start_command" Ta "Command pane started with"
.It Li "pane_start_path" Ta "Path pane started with"
.It Li "pane_tabs" Ta "Pane tab positions"
.It Li "pane_title" Ta "Title of pane"
.It Li "pane_tty" Ta "Pseudo terminal of pane"
.It Li "pane_width" Ta "Width of pane"
.It Li "saved_cursor_x" Ta "Saved cursor X in pane"
.It Li "saved_cursor_y" Ta "Saved cursor Y in pane"
.It Li "scroll_region_lower" Ta "Bottom of scroll region in pane"
.It Li "scroll_region_upper" Ta "Top of scroll region in pane"
.It Li "session_attached" Ta "1 if session attached"
.It Li "session_created" Ta "Integer time session created"
.It Li "session_created_string" Ta "String time session created"
.It Li "session_group" Ta "Number of session group"
.It Li "session_grouped" Ta "1 if session in a group"
.It Li "session_height" Ta "Height of session"
.It Li "session_id" Ta "Unique session ID"
.It Li "session_name" Ta "Name of session"
.It Li "session_width" Ta "Width of session"
.It Li "session_windows" Ta "Number of windows in session"
.It Li "window_active" Ta "1 if window active"
.It Li "window_find_matches" Ta "Matched data from the find-window command if available"
.It Li "window_flags" Ta "Window flags"
.It Li "window_height" Ta "Height of window"
.It Li "window_id" Ta "Unique window ID"
.It Li "window_index" Ta "Index of window"
.It Li "window_layout" Ta "Window layout description"
.It Li "window_name" Ta "Name of window"
.It Li "window_panes" Ta "Number of panes in window"
.It Li "window_width" Ta "Width of window"
.It Li "wrap_flag" Ta "Pane wrap flag"
@


1.357
log
@.Op Fl b not .Fl b for run-shell synopsis, from Ben Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.356 2013/04/10 12:07:18 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 10 2013 $
d3059 1
@


1.356
log
@Missed -o from set-window-option, from Ben Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.355 2013/03/27 11:24:18 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 27 2013 $
d3539 1
a3539 1
.Fl b
@


1.355
log
@Add TMUX_TMPDIR variable to put the socket directory outside
TMPDIR. From Ben Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.354 2013/03/27 11:17:12 nicm Exp $
d2648 1
a2648 1
.Op Fl agqu
d2657 1
@


1.354
log
@Remove tmux's (already minimal) 88 colour support. Such terminals are
few and unnecessary.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.353 2013/03/25 15:59:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 25 2013 $
d144 3
d148 2
a149 4
(or
.Ev TMPDIR
if set);
the default socket is named
@


1.353
log
@Revert the command-prefix change which breaks sequences of commands.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.352 2013/03/25 11:46:28 nicm Exp $
a100 4
.It Fl 8
Like
.Fl 2 ,
but indicates that the terminal supports 88 colours.
@


1.352
log
@b comes before t.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.351 2013/03/25 11:44:00 nicm Exp $
a2751 7
.Pp
.It Ic command-prefix Ar string
String prefixed to commands (apart from a plain shell as set by the
.Ic default-shell
option).
The default is
.Ql "exec\ " .
@


1.351
log
@Add -P and -F to new-session.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.350 2013/03/25 11:40:40 nicm Exp $
d3521 1
a3522 1
.Op Fl b
@


1.350
log
@Write escaped output in control mode rather than hex, from George
Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.349 2013/03/25 11:40:20 nicm Exp $
d674 2
a675 1
.Op Fl AdD
d740 8
d1478 1
a1480 1
.Op Fl F Ar format
@


1.349
log
@Clarify zoom/unzoom, from Romain Francoise.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.348 2013/03/25 11:39:53 nicm Exp $
d3674 1
a3674 1
contains that output with each byte encoded as two hex digits.
@


1.348
log
@Remove unnecessary .Pp.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.347 2013/03/25 11:38:43 nicm Exp $
d1626 2
a1627 2
the active pane is toggled between occupying the whole of the window and its
normal position in the layout.
d3259 1
@


1.347
log
@Don't add prefix to %output pane id.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.346 2013/03/25 11:38:15 nicm Exp $
a3654 1
.Pp
@


1.346
log
@Clean up capture-pane and add -P option to dump pending output, based on
code from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.345 2013/03/25 11:37:56 nicm Exp $
d3671 2
a3672 4
.It Ic %output Ar source-pane Ar value
A window pane,
.Ar source-pane ,
produced output.
@


1.345
log
@Document control mode in the manpage, from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.344 2013/03/25 10:11:45 nicm Exp $
d1070 1
a1070 1
.Op Fl aepq
d1097 3
@


1.344
log
@Rename session idx to session id throughout and add $ prefix to targets
to use it, extended from a diff from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.343 2013/03/25 10:09:35 nicm Exp $
d26 1
a26 1
.Op Fl 28lquv
d105 5
d3613 88
@


1.343
log
@Add wait-for -L and -U for lock and unlock, from Thiago Padilha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.342 2013/03/25 10:09:05 nicm Exp $
d368 1
a368 1
is either the name of a session (as listed by the
d370 1
a370 1
command) or the name of a client with the same syntax as
d3084 1
@


1.342
log
@Add a wait-for command which blocks a client on a named channel until it
is woken up again (with wait-for -S). From Thiago Padilha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.341 2013/03/25 10:05:35 nicm Exp $
d3553 1
a3553 1
.Fl S
d3557 1
a3557 3
When used without
.Fl S ,
prevents the client from exiting until woken using
d3561 6
@


1.341
log
@Preserve trailing spaces with capture-pane -J, from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.340 2013/03/25 10:04:04 nicm Exp $
d3552 13
@


1.340
log
@Add -q flags to shut up errors to capture-pane and show-options, from
George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.339 2013/03/25 10:02:17 nicm Exp $
d1091 1
a1091 1
joins wrapped lines.
@


1.339
log
@Add -a to capture-pane to capture alternate screen, from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.338 2013/03/24 09:58:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 24 2013 $
d1065 1
a1065 1
.Op Fl aep
d1081 3
d2954 1
a2954 1
.Op Fl gsvw
d2972 5
@


1.338
log
@Add -A flag to new-session to make it behave like attach-session if the
session exists. If -A is used, -D behaves like -d to attach-session.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.337 2013/03/24 09:57:59 nicm Exp $
d1065 1
a1065 2
.Op Fl e
.Op Fl p
d1078 3
@


1.337
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.336 2013/03/24 09:55:02 nicm Exp $
d669 1
a669 1
.Op Fl d
d699 15
@


1.336
log
@Add a -o option to set-option to prevent setting an option already set,
from Thiago Padilha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.335 2013/03/24 09:54:10 nicm Exp $
d1571 1
a1571 1
.Op Fl DLRU
d1595 5
@


1.335
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.334 2013/03/24 09:33:35 nicm Exp $
d1995 1
a1995 1
.Op Fl agqsuw
d2022 4
@


1.334
log
@Expand format variables in the run-shell and if-shell shell commands,
from Thiago Padilha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.333 2013/03/24 09:29:40 nicm Exp $
d3469 1
d3485 4
d3495 1
d3507 3
@


1.333
log
@Add pane_tabs format to format_window_pane based on code from George
Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.332 2013/03/24 09:21:27 nicm Exp $
d3467 5
a3471 1
.It Ic if-shell Ar shell-command command Op Ar command
d3480 4
d3497 4
@


1.332
log
@Add option command-prefix which is automatically prepended to any
command (apart from a naked default-shell). The default is "exec ".
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.331 2013/03/24 09:19:51 nicm Exp $
d3036 1
@


1.331
log
@Add pane_current_command format.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.330 2013/03/22 18:45:36 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 22 2013 $
d2706 7
@


1.330
log
@Couple of fixes pointed out by jmc.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.329 2013/03/22 16:03:35 nicm Exp $
d3019 1
@


1.329
log
@Add a load of miscellaneous pane formats, from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.328 2013/03/22 15:56:11 nicm Exp $
d915 1
a915 1
One command in accepts an argument,
d1069 1
a1069 1
also escapes non-printable characters as octal \\xxx.
@


1.328
log
@Add -C and -J to capture pane to escape control sequences and to join
wrapped line, based on a diff from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.327 2013/03/22 15:52:40 nicm Exp $
d2984 3
d3003 3
a3005 1
.It Li "host" Ta "Hostname of local host"
d3009 4
d3014 4
d3023 1
d3031 4
d3054 1
@


1.327
log
@Add copy-pipe mode command to copy selection and also pipe to a command.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.326 2013/03/22 15:51:54 nicm Exp $
d1066 6
a1071 1
is given, the output includes escape sequences for text and background attributes.
@


1.326
log
@Add -e flag to capture-pane to include embedded ANSI SGR escape
sequences, from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.325 2013/03/22 15:51:15 nicm Exp $
d853 1
a853 1
.It Li "Transpose chars" Ta "" Ta "C-t"
d915 11
@


1.325
log
@Don't use a target-client for stdout, just always cmdclient.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.324 2013/03/22 10:37:39 nicm Exp $
d1039 1
d1053 3
@


1.324
log
@Add resize-pane -x and -y for absolute pane size (much requested).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.323 2013/03/22 10:32:36 nicm Exp $
a1040 1
.Op Fl c Ar target-client
d1049 1
a1049 3
is given, the output goes to
.Ar target-client
stdout, otherwise to the buffer specified with
@


1.323
log
@Add client_session and client_last_session formats.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.322 2013/03/21 18:43:34 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 21 2013 $
d1556 2
d1561 4
a1564 3
Resize a pane, upward with
.Fl U
(the default), downward with
a1565 1
to the left with
d1567 8
a1574 2
and to the right with
.Fl R .
@


1.322
log
@Support capture-pane -p to send to stdout.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.321 2013/03/21 17:42:36 jmc Exp $
d2967 1
d2970 1
@


1.321
log
@tweak previous; ok nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.320 2013/03/21 16:23:46 nicm Exp $
d1039 1
d1041 1
d1047 8
a1054 2
Capture the contents of a pane to the specified buffer, or a new buffer if none
is specified.
@


1.320
log
@Clarify choose-tree entry in man page.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.319 2013/03/21 16:17:35 nicm Exp $
d1158 1
a1158 1
will start with all all sessions expanded instead.
d1949 2
a1950 2
User options may have any name, so long as it is prefixed with
.Ql \&@@,
@


1.319
log
@Fix choose-tree usage.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.318 2013/03/21 16:17:01 nicm Exp $
d1153 4
a1156 1
If
d1158 2
a1159 1
is given, the tree is uncollapsed by default.
d1165 1
a1165 1
can be used, and will be replaced with the session name.
d1170 2
a1171 1
Note that
d1173 4
a1176 4
can be used, and will be replaced with the session name and window index.
This command will run
.Ar session-template
before it.
d1192 1
@


1.318
log
@Add user options, prefixed with @@. May be set to any arbitrary string.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.317 2013/03/21 16:15:52 nicm Exp $
d1128 1
a1128 3
.Op Fl s
.Op Fl w
.Op Fl u
@


1.317
log
@Add -v to set and setw to show only option value.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.316 2013/03/21 16:14:50 nicm Exp $
d1941 13
@


1.316
log
@Remove stray change accidentally committed.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.315 2013/03/21 16:14:09 nicm Exp $
d2868 1
a2868 1
.Op Fl gsw
d2884 2
d2887 1
a2887 1
.Op Fl g
d2897 2
@


1.315
log
@Add a format client_prefix which is 1 if prefix key has been
pressed, used for example #{?client_prefix,X,Y}. Also a few extra
server_client_status needed.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.314 2013/03/21 16:09:59 nicm Exp $
a2368 1
.It Li "'^" Ta "Prefix key if pressed or same length as spaces"
@


1.314
log
@Allow choose commands to be used outside tmux, so long as at least one
client is attached.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.313 2013/01/17 00:11:22 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 17 2013 $
d2369 1
d2939 1
@


1.313
log
@Remove the layout undo/redo code which never really worked.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.312 2013/01/15 22:55:29 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 15 2013 $
d1077 1
a1077 2
This command works only from inside
.Nm .
d1103 1
a1103 2
This command works only from inside
.Nm .
d1125 1
a1125 2
This command works only from inside
.Nm .
d1189 1
a1189 2
This command only works from inside
.Nm .
d1211 1
a1211 2
This command works only from inside
.Nm .
d1255 1
a1255 2
This command only works from inside
.Nm .
d3303 1
a3303 2
This command works only from inside
.Nm .
@


1.312
log
@If timing between keys is less than (by default) 1 millisecond, assume
the text is being pasted. assume-paste-time option changes the value (0
disables). Based on a diff from Marcin Kulik.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.311 2012/12/24 12:38:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 24 2012 $
d1604 1
a1604 1
.Op Fl npUu
a1620 7
.Pp
.Fl U
and
.Fl u
step forward and back through previous layouts, up to the maximum set by the
.Ic layout-history-limit
option.
a2671 7
.Pp
.It Ic layout-history-limit Ar limit
Set the number of previous layouts stored for recovery with
.Ic select-layout
.Fl U
and
.Fl u .
@


1.311
log
@Add ^ and $ special command targets to select lowest and highest
numbered windows, from Raghavendra D Prabhu.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.310 2012/12/24 12:34:32 nicm Exp $
d2047 7
@


1.310
log
@Add -T option to select-window to toggle to last window if already
current, from Raghavendra D Prabhu.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.309 2012/12/24 12:25:52 nicm Exp $
d411 5
a415 1
uses the last (previously current) window, or
d419 1
a419 1
are the next window or the previous window by number.
@


1.309
log
@Add a -u flag to choose-tree to start uncollapsed, from Raghavendra D
Prabhu.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.308 2012/11/27 15:09:35 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 27 2012 $
d1646 1
a1646 1
.Op Fl lnp
d1662 5
@


1.308
log
@Allow cmd-run-shell to accept -t to specify the pane to display the
output, requested by Alexander Tsepkov.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.307 2012/11/27 13:52:23 nicm Exp $
d1129 1
d1154 3
@


1.307
log
@Add window-status-last-* options, from Boris Faure.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.306 2012/11/19 10:50:24 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 19 2012 $
d3397 4
a3400 1
.It Ic run-shell Ar shell-command
d3405 4
a3408 1
After it finishes, any output to stdout is displayed in copy mode.
@


1.306
log
@Clarify some points about config files, notably that they are only read
at server start. From Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.305 2012/10/25 11:11:58 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 25 2012 $
d2825 9
@


1.305
log
@Fix typo bell->bells from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.304 2012/10/02 08:02:21 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 2 2012 $
d127 1
d131 5
a136 1
If a command in the configuration file fails,
d138 2
a139 1
will report an error and exit without executing further commands.
@


1.304
log
@Remove some out of date text from man page, from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.303 2012/09/03 09:57:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 3 2012 $
d2042 1
a2042 1
means only bell in windows other than the current window are ignored.
@


1.303
log
@add cmd-choose-list to allow arbitrary options to be selected. From
Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.302 2012/08/11 07:10:01 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 11 2012 $
a1818 5
Keys bound without the prefix key (see
.Ic bind-key
.Fl n )
are marked with
.Ql (no prefix) .
@


1.302
log
@Another missing format from sam at sltosis.org.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.301 2012/08/11 05:55:12 nicm Exp $
d1065 27
@


1.301
log
@Add some missing formats from Samuel Le Thiec.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.300 2012/07/15 06:51:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 15 2012 $
d2909 1
@


1.300
log
@Document pane_index variable, from sam at sltosis dot org.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.299 2012/07/08 17:24:29 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 8 2012 $
d2329 1
d2907 2
d2935 1
@


1.299
log
@remove extraneous line;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.298 2012/07/08 16:04:38 nicm Exp $
d2912 1
@


1.298
log
@Add choose-tree command to show windows and sessions in the same
list. Change choose-window and -session to use the same code. From
Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.297 2012/06/18 09:16:15 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 18 2012 $
a1112 1
.
@


1.297
log
@Add -a for kill-session, from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.296 2012/06/18 09:15:22 nicm Exp $
d1091 62
@


1.296
log
@Add -a flag for detach-client, from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.295 2012/06/18 09:13:12 nicm Exp $
d613 3
a615 1
.It Ic kill-session Op Fl t Ar target-session
d618 3
@


1.295
log
@Simplify references to alerts in the man page, from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.294 2012/05/22 11:35:37 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 22 2012 $
d588 1
d597 4
@


1.294
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.293 2012/05/17 21:21:31 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 17 2012 $
d1382 1
a1382 1
is used, move to the next window with a bell, activity or content alert.
d1425 1
a1425 1
move to the previous window with a bell, activity or content alert.
d1953 1
a1953 1
If on, ring the terminal bell when an activity, content or silence alert
@


1.293
log
@Ignore line continuation when escaped as \\, from Simon Nicolussi.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.292 2012/05/02 19:29:13 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 2 2012 $
d1036 1
d1052 5
d1061 1
d1075 5
d1084 1
d1098 5
d1122 1
d1143 5
d2788 1
a2788 7
The
.Ic list-clients ,
.Ic list-sessions ,
.Ic list-windows
and
.Ic list-panes
commands accept the
d2821 2
d2857 1
d2863 1
d3170 1
d3184 5
d3199 3
a3201 1
.It Ic list-buffers
d3204 5
@


1.292
log
@default-path has the same possibilities as new-window -c now.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.291 2012/04/29 17:20:01 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 29 2012 $
d496 2
a497 1
lines ending with a backslash continue on to the next line.
@


1.291
log
@Add a flag to move-window to renumber the windows in a session (closing
any gaps) and add an option to do this automatically each time a window
is killed. From Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.290 2012/04/23 22:23:14 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 23 2012 $
d1947 4
a1950 10
If
.Ar path
is "$HOME" or "~", the value of the
.Ev HOME
environment variable is used.
If
.Ar path
is ".", the working directory when
.Nm
was started is used.
@


1.290
log
@Add window-status-separator option, from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.289 2012/04/23 22:10:45 nicm Exp $
d1261 1
a1261 1
.Op Fl dk
d1272 6
d2131 9
@


1.289
log
@Add -a flag to kill-window, from Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.288 2012/04/01 13:18:38 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 1 2012 $
d2702 4
@


1.288
log
@Add a layout history which can be stepped through with select-layout -u
and -U commands (bound to 'u' and 'U' by default).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.287 2012/04/01 10:42:39 nicm Exp $
d1160 4
a1163 1
.It Ic kill-window Op Fl t Ar target-window
d1168 4
@


1.287
log
@Add pane_current_path format, suggested by Mikolaj Kucharski.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.286 2012/03/22 11:11:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 22 2012 $
d1454 1
a1454 1
.Op Fl np
d1471 7
d2518 7
@


1.286
log
@Accept an argument to show-environment to show one variable, based on a
diff from Kazuhiko Sakaguchi.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.285 2012/03/20 17:09:48 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 20 2012 $
d2782 1
@


1.285
log
@Add -C -N -T flags to find-window to find in content, name, title. From
Jonathan Daugherty.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.284 2012/03/20 11:23:12 nicm Exp $
d2911 1
d2918 3
@


1.284
log
@50 is a too low trigger default on larger terminals, bump to 250.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.283 2012/03/20 11:01:00 nicm Exp $
d1102 1
d1112 11
a1122 2
If only one window is matched, it'll be automatically selected, otherwise a
choice list is shown.
@


1.283
log
@Add a simple form of output rate limiting by counting the number of
certain C0 sequences (linefeeds, backspaces, carriage returns) and if it
exceeds a threshold (current default 50/millisecond), start to redraw
the pane every 100 milliseconds instead of making each change as it
comes. Two configuration options - c0-change-trigger and
c0-change-interval.

This makes tmux much more responsive under very fast output (for example
yes(1) or accidentally cat'ing a large file) but may not be perfect on
all terminals and connections - feedback very welcome, particularly
where this change has a negative rather than positive effect (making it
off by default is a possibility).

After much experimentation based originally on a request Robin Lee
Powell (which ended with a completely different solution), this idea
from discussion with Ailin Nemui.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.282 2012/03/17 21:40:53 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 17 2012 $
d2481 1
a2481 1
The default is a trigger of 50 and an interval of 100.
@


1.282
log
@Add a wrap-search option to turn off wrapping of searches in copy
mode. From Jacobo de Vera.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.281 2012/03/17 21:33:33 nicm Exp $
d2465 18
@


1.281
log
@Add -q option to set-option to turn off info message, from marcel partap.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.280 2012/03/12 13:31:09 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 12 2012 $
d2664 6
@


1.280
log
@Add -P/-F flags to break-pane too, from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.279 2012/03/04 20:50:53 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 4 2012 $
d1791 1
a1791 1
.Op Fl agsuw
d1819 6
d2390 1
a2390 1
.Op Fl agu
d2398 2
a2399 1
.Fl g
@


1.279
log
@Add -F format to new-window and split-window to use with the -P flag,
from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.278 2012/03/03 09:43:22 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 3 2012 $
d999 2
a1000 1
.Op Fl d
d1010 7
@


1.278
log
@Support "bracketed paste" mode. This adds a -p flag to paste-buffer - if
this is used and the application has requested bracketed pastes, then
tmux surrounds the pasted text by \033[200~ and \033[201~. Applications
like vim can (apparently) use this to avoid, for example, indenting the
text. From Ailin Nemui.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.277 2012/03/03 08:31:18 nicm Exp $
d1252 1
d1310 5
a1314 1
option prints the location of the new window after it has been created.
d1499 1
@


1.277
log
@Add move-pane command (like join-pane but allows the same window). Also
-b flag to join-pane and move-pane to place the pane to the left or
above. From George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.276 2012/02/25 12:57:42 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 25 2012 $
d3087 1
a3087 1
.Op Fl dr
d3106 4
@


1.276
log
@Allow a single option to be specified to show-options to show just that
option.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.275 2012/02/23 22:40:58 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 23 2012 $
d1108 1
a1108 1
.Op Fl dhv
d1125 6
d1219 16
@


1.275
log
@Use format for display-message, based on a diff from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.274 2012/02/02 22:33:05 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 2 2012 $
d2625 1
d2628 1
a2628 1
Show the window options with
d2642 1
d2645 1
a2645 1
List the window options for
@


1.274
log
@Document option values, particularly that omitting on|off for a flag is
a toggle.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.273 2012/02/02 00:15:28 nicm Exp $
d2993 3
a2995 3
is as for
.Ic status-left ,
with the exception that #() are not handled; information is taken from
@


1.273
log
@Add -l flag to send-keys to send input literally (without translating
key names). From Frank Terbeck.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.272 2012/01/31 15:52:21 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 31 2012 $
d1785 4
@


1.272
log
@Provide defined ways to set the various default-path possibilities: ~
for home directory, . for server start directory, - for session start
directory and empty for the pane's working directory (the default). All
can also be used as part of a relative path (eg -/foo). Also provide -c
flags to neww and splitw to override default-path setting.

Based on a diff from sthen. ok sthen
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.271 2012/01/30 20:48:28 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 30 2012 $
d1649 1
a1649 1
.Fl R
d1663 3
@


1.271
log
@id -> ID; ok nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.270 2012/01/30 09:39:34 nicm Exp $
d1227 1
d1258 9
d1466 1
@


1.270
log
@Give each window a unique id, like panes but prefixed with @@. Based on
work from George Nachman.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.269 2012/01/29 09:37:02 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 29 2012 $
d389 1
a389 1
as a window id, such as @@1;
d2687 1
a2687 1
.It Li "pane_id" Ta "Unique pane id"
@


1.269
log
@Add an option to move the status line to the top of the screen,
requested by many.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.268 2012/01/21 20:40:28 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 21 2012 $
d388 3
a390 2
is looked for in order: as a window index, for example mysession:1; as an exact
window name, such as mysession:mywindow; then as an
@


1.268
log
@it's -> its.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.267 2012/01/21 08:40:09 nicm Exp $
d2202 4
@


1.267
log
@Drop the ability to have a list of keys in the prefix in favour of two
separate options, prefix and prefix2. This simplifies the code and gets
rid the data options type which was only used for this one option.

Also add a -2 flag to send-prefix to send the secondary prefix key,
fixing a cause of minor irritation.

People who want three prefix keys are out of luck :-).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.266 2012/01/21 08:23:12 nicm Exp $
d2722 1
a2722 1
Windows themselves do not have titles - a window's title is the title of it's
@


1.266
log
@Add strings to allow the aixterm bright colours to be used when
configuring colours, requested by Elliott Cable a few months ago.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.265 2012/01/21 08:10:21 nicm Exp $
d1655 7
a1661 3
.It Ic send-prefix Op Fl t Ar target-pane
Send the prefix key to a window as if it was pressed.
If multiple prefix keys are configured, only the first is sent.
d2036 4
a2039 5
.It Ic prefix Ar keys
Set the keys accepted as a prefix key.
.Ar keys
is a comma-separated list of key names, each of which individually behave as
the prefix key.
@


1.265
log
@Add a -R flag to send-keys to reset the terminal. Written ages ago and
Suggested by someone, I forget who.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.264 2012/01/20 19:51:28 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 20 2012 $
d1979 4
@


1.264
log
@Add some trivial additional status line attributes from jwcxz at users
dot sourceforge dot net.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.263 2012/01/20 19:16:16 nicm Exp $
d1637 1
d1652 3
@


1.263
log
@Remove trailing spaces.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.262 2012/01/20 19:15:40 nicm Exp $
d2519 2
a2520 3
.It Ic window-status-alert-attr Ar attributes
Set status line attributes for windows which have an alert (bell, activity
or content).
d2522 2
a2523 2
.It Ic window-status-alert-bg Ar colour
Set status line background colour for windows with an alert.
d2525 20
a2544 2
.It Ic window-status-alert-fg Ar colour
Set status line foreground colour for windows with an alert.
@


1.262
log
@Add an option to disable the window rename escape sequence, from Romain
Francoise.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.261 2011/12/31 03:40:15 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 31 2011 $
d2149 1
a2149 1
For details on how the names and titles can be set see the 
@


1.261
log
@Add a man page section on window names and pane titles, from Felix
Rosencrantz.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.260 2011/12/30 14:59:13 sthen Exp $
d17 1
a17 1
.Dd $Mdocdate: December 30 2011 $
d2344 7
@


1.260
log
@Show how to set default-path to revert to tmux's old behaviour of opening
new windows in the current working directory at the time tmux was started,
it's not obvious. naddy@@ agrees this is a useful inclusion.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.259 2011/12/27 14:07:20 stsp Exp $
d17 1
a17 1
.Dd $Mdocdate: December 27 2011 $
d2057 8
a2064 1
Attempt to set the window title using the \ee]2;...\e007 xterm code if
d2130 1
a2130 1
.It Li "#T" Ta "Current window title"
d2149 3
a2151 7
The window title (#T) is the title set by the program running within the window
using the OSC title setting sequence, for example:
.Bd -literal -offset indent
$ printf '\e033]2;My Title\e033\e\e'
.Ed
.Pp
When a window is first created, its title is the hostname.
d2375 2
a2376 1
.Ic rename-window .
d2671 56
d2790 2
a2791 2
session in square brackets; the window list; the current window title in double
quotes; and the time and date.
@


1.259
log
@Allow $HOME as default-path in tmux.conf so the same config file can be used
on different machines regardless of where the user's home directory is.
ok nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.258 2011/12/24 08:46:48 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: December 24 2011 $
d1853 5
@


1.258
log
@formatting errors, found using freebsd's "igor";
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.257 2011/12/09 16:28:18 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 9 2011 $
d1848 5
@


1.257
log
@Change the way the working directory for new processes is discovered. If
default-path isn't empty, it is used. Otherwise:

1) If tmux neww is run from the command line, the working directory of the
   client is used.

2) Otherwise sysctl KERN_PROC_CWD is used to retrieve the current
   working directory of the process in the active pane.

3) If that fails, the directory where the session was created is used.

Support code by Romain Francois, OpenBSD specific bits by me.

Note this requires a recent userland and kernel with KERN_PROC_CWD.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.256 2011/12/04 16:18:01 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 4 2011 $
d592 1
a592 1
or all clients currently attached to to the session specified by
@


1.256
log
@Support "jump to" like vi in copy mode using t and T keys. Also add x
and X for delete in edit mode.

From Ben Boeckel, thanks.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.255 2011/11/15 23:24:04 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 15 2011 $
d1844 4
a1847 4
Set the default working directory for processes created from keys, or
interactively from the prompt.
The default is empty, which means to use the working directory of the shell
from which the server was started if it is available or the user's home if not.
@


1.255
log
@Move word-separators to be a session rather than window option, from Ben
Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.254 2011/11/05 09:13:00 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 5 2011 $
d806 1
d808 1
@


1.254
log
@Missing bits for new keys and buffer indexes, from Tiago Cunha
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.253 2011/11/05 09:06:31 nicm Exp $
d840 1
a840 1
window option.
d2291 6
a2535 7
.Pp
.It Ic word-separators Ar string
Sets the window's conception of what characters are considered word
separators, for the purposes of the next and previous word commands in
copy mode.
The default is
.Ql \ -_@@ .
@


1.253
log
@Option to change status line (message) background when using vi keys and
in command mode. From Ben Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.252 2011/10/27 23:33:35 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 27 2011 $
d867 3
d1554 2
a1555 4
.Em NPage
(Page Up),
.Em PPage
(Page Down),
@


1.252
log
@minor formatting fix;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.251 2011/10/27 22:40:15 nicm Exp $
d1970 6
@


1.251
log
@Didn't really think the else behaviour through - requiring argv to
contain "else" is silly so just omit that, also some manpage
tweaks. From Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.250 2011/10/23 01:12:46 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 23 2011 $
d618 2
a619 1
.Sx FORMATS section.
@


1.250
log
@Add client formats, from Ben Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.249 2011/10/02 06:55:48 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 2 2011 $
d2974 1
a2974 1
.It Ic if-shell Ar shell-command command
d2976 1
a2976 1
Execute
d2980 3
a2982 1
returns success.
@


1.249
log
@Add a few more formats for panes (tty, pid, start cmd/cwd).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.248 2011/09/28 20:11:21 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 28 2011 $
d609 4
a612 1
.It Ic list-clients Op Fl t Ar target-session
d615 4
d2570 1
d2608 11
@


1.248
log
@Add -S option to refresh-client to redraw status line, from Marco Beck.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.247 2011/09/23 18:33:43 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 23 2011 $
d2606 3
d2610 1
@


1.247
log
@Tweaks to the format parts, from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.246 2011/08/26 13:07:49 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 26 2011 $
d689 4
a692 1
.It Ic refresh-client Op Fl t Ar target-client
d697 3
@


1.246
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.245 2011/08/26 10:53:16 nicm Exp $
d619 1
a619 2
.It Ic list-sessions
.Op Fl F Ar format
d622 5
a633 5
For the meaning of the
.Fl F
flag, see the
.Sx FORMATS
section.
d1172 5
@


1.245
log
@Add initial framework for more powerful formatting of command output and
use it for list-{panes,windows,sessions}. This allows more descriptive
replacements (such as #{session_name}) and conditionals.

Later this will be used for status_replace and list-keys and other
places.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.244 2011/08/24 10:46:01 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 24 2011 $
d2575 1
a2575 1
.Ql ?
d2578 2
a2579 1
is chosen, otherwise the second is used. For example
a2614 1
.Pp
@


1.244
log
@Support \ for line continuation in the configuration file, from Julius
Plenz.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.243 2011/08/24 10:29:57 nicm Exp $
d620 1
d630 5
d1156 1
d1175 1
d1184 5
d2551 64
@


1.243
log
@Add pane-base-index option, from Ben Barbour.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.242 2011/08/16 10:00:52 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 16 2011 $
d494 2
a495 1
commands are executed sequentially from left to right.
d511 3
@


1.242
log
@Add a -r flag to switch-client to toggle the client read-only flag. From
Johan Commelin.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.241 2011/07/30 18:27:57 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 30 2011 $
d2420 5
@


1.241
log
@fix error in previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.240 2011/07/30 18:01:26 nicm Exp $
d561 3
a563 1
command have any effect)
d719 1
a719 1
.Op Fl lnp
d735 4
@


1.240
log
@Extend the mode-mouse option to add a third choice which means the mouse
does not enter copy mode. Patch from SF bug 3374493.

In future the mode-mouse option is likely to die and be broken into
several smaller options.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.239 2011/07/25 09:57:28 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 25 2011 $
d2368 1
a2368 2
.Em
copy-mode ,
@


1.239
log
@Sort options alphabetically, from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.238 2011/07/08 06:37:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 8 2011 $
d2361 1
a2361 1
.Op Ic on | off
d2367 5
@


1.238
log
@Make confirm-before prompt customizable with -p option like
command-prompt. Also move responsibility for calling status_replace into
status_prompt_{set,update} and add #W and #P to the default kill-window
and kill-pane prompts. By Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.237 2011/07/03 19:07:54 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 3 2011 $
d1725 16
a1762 16
.It Ic escape-time Ar time
Set the time in milliseconds for which
.Nm
waits after an escape is input to determine if it is part of a function or meta
key sequences.
The default is 500 milliseconds.
.It Xo Ic exit-unattached
.Op Ic on | off
.Xc
If enabled, the server will exit when there are no attached clients.
.It Xo Ic quiet
.Op Ic on | off
.Xc
Enable or disable the display of various informational messages (see also the
.Fl q
command line flag).
d1954 4
a1980 4
.It Xo Ic mouse-utf8
.Op Ic on | off
.Xc
If enabled, request mouse input as UTF-8 on UTF-8 terminals.
a2432 17
.It Ic window-status-attr Ar attributes
Set status line attributes for a single window.
.Pp
.It Ic window-status-bg Ar colour
Set status line background colour for a single window.
.Pp
.It Ic window-status-fg Ar colour
Set status line foreground colour for a single window.
.Pp
.It Ic window-status-format Ar string
Set the format in which the window is displayed in the status line window list.
See the
.Ar status-left
option for details of special character sequences available.
The default is
.Ql #I:#W#F .
.Pp
d2443 6
d2462 11
@


1.237
log
@Add an option to trigger the terminal bell when there is an alert, from
Marco Beck.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.236 2011/07/03 18:18:15 nicm Exp $
d2693 1
d2700 10
@


1.236
log
@Include the existing window and session name in the prompt when renaming
and add a new key binding ($) for rename session. From Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.235 2011/07/02 21:05:44 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 2 2011 $
d1782 5
@


1.235
log
@Allow the initial context on prompts to be set with the new -I option to
command-prompt. From Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.234 2011/06/05 11:19:03 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 5 2011 $
d236 2
@


1.234
log
@Add a respawn-pane command, from Marcel Partap.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.233 2011/05/30 21:02:28 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 30 2011 $
d2634 1
d2647 3
d2660 4
a2663 1
The
@


1.233
log
@Fix a typo, spotted by Michal Mazurek..
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.232 2011/05/21 10:04:17 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 21 2011 $
d1310 15
@


1.232
log
@tweak the TERMINFO section; ok nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.231 2011/05/20 19:29:13 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 20 2011 $
d2834 1
a2834 1
Set the cursor color.
@


1.231
log
@Pass prompts through status_replace so that they can be more helpful
(such as showing the previous session name when renaming). From Tiago
Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.230 2011/05/20 19:17:39 nicm Exp $
d2833 11
a2843 10
.It Em \&Ms
This sequence can be used by
.Nm
to store the current buffer in the host terminal's selection (clipboard).
See the
.Em set-clipboard
option above and the
.Xr xterm 1
man page.
.It Em Cs, Csr
d2845 2
a2846 1
If set allows a sequence such as:
a2850 1
To change the cursor to an underline.
d2856 9
a2864 9
.It Em Cc, Cr
The first takes one string argument and is used to set the cursor colour;
the second takes no arguments and restores the default cursor colour.
If they present, a sequence such as this may be used to change the
cursor colour from inside
.Nm :
.Bd -literal -offset indent
$ printf '\e033]12;red\e033\e\e'
.Ed
@


1.230
log
@Support DECSCUSR sequence to set the cursor style with two new
terminfo(5) extensions, Cs and Csr. Written by Ailin Nemui.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.229 2011/05/20 19:03:58 nicm Exp $
d1258 1
a1258 1
command.
d2627 1
d2641 6
@


1.229
log
@Support xterm(1) cursor colour change sequences through terminfo(5) Cc
(set) and Cr (reset) extensions. Originally by Sean Estabrooks, tweaked
by me and Ailin Nemui.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.228 2011/05/18 20:24:29 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 18 2011 $
d2835 13
@


1.228
log
@Support setting the xterm clipboard when copying from copy mode using
the xterm escape sequence for the purpose (if xterm is configured to
allow it).

Written by and much discussed Ailin Nemui, guidance on
xterm/termcap/terminfo from Thomas Dickey.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.227 2011/05/18 18:06:36 nicm Exp $
d2835 9
@


1.227
log
@Add three new copy-mode commands - select-line, copy-line,
copy-end-of-line. From Dave Disser and Randy Stauner a while back.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.226 2011/05/08 20:34:12 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 8 2011 $
d1708 22
d2820 15
@


1.226
log
@Add a new option, mouse-resize-pane. When on, panes may be resized by
dragging their borders. From hsim at gmx.li.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.225 2011/05/08 19:53:06 nicm Exp $
d769 1
a769 1
.It Li "Delete to end of line" Ta "D" Ta "C-k"
@


1.225
log
@Use the tsl and fsl terminfo(5) capabilities to update terminal title
and automatically fill them in on terminals with the XT capability
(which means their title setting is xterm-compatible). From hsim at
gmx.li.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.224 2011/04/24 21:32:07 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 24 2011 $
d1891 6
@


1.224
log
@Provide #h for short hostname (no domain) from Michal Mazurek.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.223 2011/04/19 21:31:33 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 19 2011 $
d2148 1
a2148 1
"*88col*:colors=88,*256col*:colors=256"
@


1.223
log
@When mode-mouse is on (it is off by default), automatically enter copy
mode when the mouse is dragged or the mouse wheel is used. Also exit
copy mode when the mouse wheel is scrolled off the bottom. Discussed
with and written by hsim at gmx dot li.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.222 2011/04/18 19:49:05 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 18 2011 $
d2008 1
@


1.222
log
@Add an option (mouse-select-window) which allows the mouse to be used by
clicking on the status line, written by hsim at gmx dot li.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.221 2011/04/17 20:39:44 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 17 2011 $
d2313 3
a2315 2
If on, the mouse may be used to copy a selection by dragging in copy mode, or
to select an option in choice mode.
@


1.221
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.220 2011/04/17 19:28:09 nicm Exp $
d1899 5
@


1.220
log
@Add -t to list-clients, based on a diff from Zac Sprackett.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.219 2011/04/11 16:44:36 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 11 2011 $
d603 2
a604 1
List all clients attached to the server. If 
@


1.219
log
@-s comes before -t and also add -s to command syntax. Prompted by jmc.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.218 2011/04/11 06:44:39 nicm Exp $
d601 1
a601 1
.It Ic list-clients
d603 3
a605 1
List all clients attached to the server.
@


1.218
log
@Add -s option to detach all clients attached to a session, from Zac
Sprackett.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.217 2011/04/05 19:37:01 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 5 2011 $
d578 1
a579 1
.Op Fl s Ar target-session
@


1.217
log
@Add a flag to cmd_find_session so that attach-session can prefer
unattached sessions when choosing the most recently used (if -t is not
given). Suggested by claudio@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.216 2011/04/01 16:59:11 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 1 2011 $
d579 1
d582 4
a585 2
Detach the current client if bound to a key, or the specified client with
.Fl t .
@


1.216
log
@"or" should be on a line on its own here so it is not emphasised as
well.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.215 2011/03/29 19:30:16 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 29 2011 $
d565 11
@


1.215
log
@Change -t on display-message to be target-pane for the #[A-Z]
replacements and add -c as target-client.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.214 2011/03/28 23:13:00 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 28 2011 $
d436 2
a437 1
.Em bottom-left or
@


1.214
log
@Add -a and -s options to lsp to list all panes in the server or session
respectively. Likewise add -s to lsw. From Ben Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.213 2011/03/28 20:17:39 nicm Exp $
d2614 2
a2615 1
.Op Fl t Ar target-client
d2629 6
a2634 1
with the exception that #() are not handled.
@


1.213
log
@Allow a start and end line to be specified for capture-pane which may be
negative to capture part of the history. Prompted by request from Victor
J Orlikowski.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.212 2011/03/27 20:27:26 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 27 2011 $
d1118 4
a1121 1
.It Ic list-panes Op Fl t Ar target-window
d1123 17
a1139 3
List the panes in the current window or in
.Ar target-window .
.It Ic list-windows Op Fl t Ar target-session
d1141 4
a1144 1
List windows in the current session or in
@


1.212
log
@Give each pane created in a tmux server a unique id (starting from 0),
put it in the TMUX_PANE environment variable and accept it as a
target. Suggested by and with testing and tweaks from Ben Boeckel.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.211 2011/03/03 08:51:47 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 3 2011 $
d956 2
d963 7
@


1.211
log
@Add a -P option to detach to HUP the client's parent process (usually
causing it to exit as well).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.210 2011/01/14 23:49:23 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 14 2011 $
d451 11
@


1.210
log
@Support -x and -y for new-session to specify the initial size of the
window if created detached with -d.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.209 2011/01/13 09:50:11 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 13 2011 $
d553 4
a556 1
.It Ic detach-client Op Fl t Ar target-client
d560 4
@


1.209
log
@Clarify alternate-screen description a little.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.208 2011/01/12 22:23:58 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 12 2011 $
d594 2
d609 7
@


1.208
log
@Use TMPDIR if set, from Han Boetes.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.207 2011/01/09 18:46:46 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 9 2011 $
d2156 5
a2160 2
capabilities to be issued to preserve the existing window content on start and
restore it on exit.
@


1.207
log
@Remove a bit of text that makes exit-unattached description unclear.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.206 2011/01/09 18:42:19 nicm Exp $
d137 4
a140 1
.Pa /tmp ;
@


1.206
log
@Add missing arguments to some options.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.205 2011/01/08 00:48:54 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 8 2011 $
d1640 1
a1640 2
If enabled, the server will exit when there are no attached clients, rather
than when there are no attached sessions.
@


1.205
log
@Accept colours of the hex form #ffffff and translate to the nearest from
the xterm(1) 256-colour set.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.204 2011/01/04 02:03:41 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 4 2011 $
d1631 1
a1631 1
.It Ic escape-time
d1637 3
a1639 1
.It Ic exit-unattached
d1642 3
a1644 1
.It Ic quiet
d1712 3
a1714 1
.It Ic destroy-unattached
d1717 3
a1719 1
.It Ic detach-on-destroy
@


1.204
log
@Now that parsing is common, merge some of the small, related commands
together to use the same code.

Also add some arguments (such as -n and -p) to some commands to match
existing commands.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.203 2011/01/03 23:35:21 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 3 2011 $
d1796 5
a1800 2
from the 256-colour palette, or
.Ic default .
@


1.203
log
@Support for UTF-8 mouse input (\033[1005h). This was added in xterm 262
and supports larger terminals than the older way.

If the new mouse-utf8 option is on, UTF-8 mouse input is enabled for all
UTF-8 terminals. The option defaults to on if LANG etc are set in the
same manner as the utf8 option.

With help and based on code from hsim at gmx.li.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.202 2011/01/01 11:24:45 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 1 2011 $
d1258 1
d1267 8
d1276 1
a1276 1
.Op Fl DLRU
d1292 8
a1299 1
.It Ic select-window Op Fl t Ar target-window
d1303 10
@


1.202
log
@suspend-client has used -t for the client target (like everything else)
for ages, fix the usage string and man page and trim some leftover code.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.201 2011/01/01 01:33:07 nicm Exp $
d1809 4
@


1.201
log
@Add a -P option to new-window and split-window to print the new window
or pane index in target form (useful to pass it into other commands).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.200 2010/12/31 00:41:11 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: December 31 2010 $
d660 1
a660 1
.Op Fl c Ar target-client
@


1.200
log
@fix trailing whitespace;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.199 2010/12/30 23:17:41 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 30 2010 $
d1100 1
a1100 1
.Op Fl adk
d1148 4
d1288 1
a1288 1
.Op Fl dhv
@


1.199
log
@Fix BUFFERS section now they are global.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.198 2010/12/30 23:16:18 nicm Exp $
d2577 1
a2577 1
.It Xo Ic load-buffer 
@


1.198
log
@Change from a per-session stack of buffers to one global stack which is
much more convenient and also simplifies lot of code. This renders
copy-buffer useless and makes buffer-limit now a server option.

By Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.197 2010/12/27 19:57:31 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: December 27 2010 $
d2527 1
a2527 2
.Em paste buffers
for each session.
@


1.197
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.196 2010/12/27 18:22:25 nicm Exp $
d1597 4
a1632 4
.It Ic buffer-limit Ar number
Set the number of buffers kept for each session; as new buffers are added to
the top of the stack, old ones are removed from the bottom if necessary to
maintain this maximum length.
d2570 1
a2570 13
.It Xo Ic copy-buffer
.Op Fl a Ar src-index
.Op Fl b Ar dst-index
.Op Fl s Ar src-session
.Op Fl t Ar dst-session
.Xc
.D1 (alias: Ic copyb )
Copy a session paste buffer to another session.
If no sessions are specified, the current one is used instead.
.It Xo Ic delete-buffer
.Op Fl b Ar buffer-index
.Op Fl t Ar target-session
.Xc
d2575 1
a2575 1
.It Ic list-buffers Op Fl t Ar target-session
d2577 2
a2578 2
List the buffers in the given session.
.It Xo Ic load-buffer
a2579 1
.Op Fl t Ar target-session
a2607 1
.Op Fl t Ar target-session
a2617 1
.Op Fl t Ar target-session
a2624 1
.Op Fl t Ar target-session
@


1.196
log
@Add a missing .Pp and sort options alphabetically, from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.195 2010/12/19 18:35:08 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 19 2010 $
d677 1
a677 1
.Fl l,
a2645 1
.Pp
@


1.195
log
@Add other-pane-height and other-pane-width options, allowing the width
or height of the smaller panes in the main-horizontal and main-vertical
layouts to be set. Mostly from David Goodlad.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.194 2010/12/11 18:39:25 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 11 2010 $
d905 1
d1645 5
a1665 5
.It Ic default-path Ar path
Set the default working directory for processes created from keys, or
interactively from the prompt.
The default is empty, which means to use the working directory of the shell
from which the server was started if it is available or the user's home if not.
d1782 4
a1786 1
.It Ic pane-border-bg Ar colour
a1787 3
.It Ic pane-active-border-fg Ar colour
.It Ic pane-active-border-bg Ar colour
Set the pane border colour for the currently active pane.
d1942 2
a1945 2
.It Ic status-left-bg Ar colour
Set the background colour of the left part of the status line.
d1967 2
a1970 2
.It Ic status-right-bg Ar colour
Set the background colour of the right part of the status line.
a1975 1
.Pp
d2099 13
d2150 1
a2151 1
.It Ic main-pane-height Ar height
a2243 13
.Pp
.It Xo Ic alternate-screen
.Op Ic on | off
.Xc
This option configures whether programs running inside
.Nm
may use the terminal alternate screen feature, which allows the
.Em smcup
and
.Em rmcup
.Xr terminfo 5
capabilities to be issued to preserve the existing window content on start and
restore it on exit.
@


1.194
log
@Track the last session for a client and add a flag to switch-client and
a key binding (L) to move a client back to its last session.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.193 2010/12/10 21:01:38 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 10 2010 $
d2197 19
@


1.193
log
@Rephrase a confusing sentence.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.192 2010/12/06 22:51:02 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 6 2010 $
d285 2
d667 1
a667 1
.Op Fl np
d677 1
d681 2
a682 1
is used, the client is moved to the next or previous session respectively.
@


1.192
log
@Add an option to alert (monitor) for silence (lack of activity) in a
window. From Thomas Adam.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.191 2010/11/29 19:45:58 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 29 2010 $
d2322 3
a2324 3
When a window is created, the session and global environments are merged with
the session environment overriding any variable present in both.
This is the initial environment passed to the new process.
@


1.191
log
@If VISUAL or EDITOR contains "vi", configure mode-keys and status-keys
to vi.

Based on a diff from martynas@@, previously requested by a couple of
other people.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.190 2010/11/14 09:04:22 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 14 2010 $
d2056 6
d2184 10
d2405 1
@


1.190
log
@Update man page for update-environment.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.189 2010/11/11 20:54:06 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 11 2010 $
d1855 6
a1860 1
Defaults to emacs.
d2148 8
a2155 1
Key bindings default to emacs.
@


1.189
log
@Flag to flush all key bindings from Rob Paisley.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.188 2010/11/01 20:59:45 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 1 2010 $
d2025 2
a2026 1
"DISPLAY WINDOWID SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION".
@


1.188
log
@Typo, from Rob Paisley.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.187 2010/10/23 13:04:34 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 23 2010 $
d1482 1
a1482 1
.Op Fl cn
d1496 3
@


1.187
log
@Add a last-pane command (bound to ; by default). Requested ages ago by
somebody whose name I have forgotten.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.186 2010/10/14 00:30:03 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 14 2010 $
d512 1
a512 1
Each session has one of more windows
@


1.186
log
@Put "or" on new line from command with .Ic.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.185 2010/09/26 20:43:30 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 26 2010 $
d251 2
d1042 3
@


1.185
log
@Two new options:

- server option "exit-unattached" makes the server exit when no clients
  are attached, even if sessions are present;

- session option "destroy-unattached" destroys a session once no clients
  are attached to it.

These are useful for preventing tmux remaining in the background where
it is undesirable and when using tmux as a login shell to keep a limit
on new sessions.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.184 2010/09/25 20:35:52 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 25 2010 $
d2085 2
a2086 1
.Ic new-window or
@


1.184
log
@detach-on-destroy is a session option, not server.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.183 2010/09/08 22:02:28 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 8 2010 $
d1590 3
d1665 3
@


1.183
log
@Add -n and -p flags to switch-client to move to the next and previous
session (yes, it doesn't match window/pane, but so what, nor does
switch-client).

Based on a diff long ago from "edsouza".
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.182 2010/07/15 21:54:20 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 15 2010 $
a1583 5
.It Ic detach-on-destroy
If on (the default), the client is detached when the session it is attached to
is destroyed.
If off, the client is switched to the most recently active of the remaining
sessions.
d1662 5
@


1.182
log
@some escapes i missed;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.181 2010/06/29 03:30:14 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 29 2010 $
d663 1
d672 5
@


1.181
log
@Custom layouts. list-windows command displays the layout as a string (such as
"bb62,159x48,0,0{79x48,0,0,79x48,80,0}") and it can be applied to another
window (with the same number of panes or fewer) using select-layout.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.180 2010/06/27 02:56:59 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 27 2010 $
d257 1
a257 1
.It [
d259 1
a259 1
.It ]
@


1.180
log
@Store the current working directory in the session, change the default-path
option to default to empty and make that mean that the stored session CWD is
used.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.179 2010/06/27 00:22:22 nicm Exp $
d880 18
d1245 1
a1245 1
is not given, the last layout used (if any) is reapplied.
@


1.179
log
@New option, detach-on-destroy, to set what happens to a client when the session
it is attached to is destroyed. If on (the default), it is detached; if off, it
is switched to the most recently active session.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.178 2010/06/21 21:44:09 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 21 2010 $
d1629 2
a1630 1
The default is the current working directory when the server is started.
@


1.178
log
@Add a choose-buffer command for easier use of the paste buffer stack.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.177 2010/06/21 01:46:36 nicm Exp $
d1560 5
@


1.177
log
@Extend the -t:+ and -t:- window targets for next and previous window to
accept an offset such as -t:+2. From Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.176 2010/06/14 23:04:44 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 14 2010 $
d251 2
d2452 17
@


1.176
log
@Add a missing command and some missing Ic, from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.175 2010/06/05 16:54:24 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 5 2010 $
d430 12
@


1.175
log
@Couple of missing command aliases/flags, from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.174 2010/06/05 16:34:30 nicm Exp $
d1141 5
d1209 1
a1209 1
.D1 (alias: selectl )
d1243 1
a1243 1
.D1 (alias: splitw )
@


1.174
log
@Support the status_replace # replacement sequences in the pipe-pane
command, thanks to Andrea Barisani.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.173 2010/05/31 19:51:29 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 31 2010 $
d557 2
a558 3
.It Xo Ic lock-client
.Op Fl t Ar target-client
.Xc
d564 2
a565 3
.It Xo Ic lock-session
.Op Fl t Ar target-session
.Xc
d1040 1
a1040 1
.Op Fl d
@


1.173
log
@When the mode-mouse option is on, support dragging to make a selection
in copy mode.

Also support the scroll wheel, although xterm strangely does not ignore
it in application mouse mode, causing redraw artifacts when scrolling up
(other terminals appear to be better behaved).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.172 2010/05/30 19:19:42 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 30 2010 $
d1127 5
d1141 1
a1141 1
bind-key C-p pipe-pane -o 'cat >>~/output'
@


1.172
log
@Better to say "command key bindings" since we've just called them
command keys.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.171 2010/05/30 19:09:50 nicm Exp $
d2081 2
a2082 4
If on,
.Nm
will respond to mouse clicks by moving the cursor in copy mode or selecting an
option in choice mode.
@


1.171
log
@There is no real reason not to list all the key bindings here rather
than just a selection.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.170 2010/05/19 22:28:14 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 19 2010 $
d216 1
a216 1
The default key bindings are:
@


1.170
log
@Enhance paste-buffer to allow lines to be separated by any string, from
Andrea Barisani.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.169 2010/05/14 19:03:09 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 14 2010 $
d216 1
a216 1
Some of the default key bindings are:
d218 41
a258 1
.Bl -tag -width Ds -offset indent -compact
d263 4
d271 2
d275 41
a315 6
.It &
Kill the current window.
.It ,
Rename the current window.
.It \&?
List all key bindings.
a317 5
A complete list may be obtained with the
.Ic list-keys
command (bound to
.Ql \&?
by default).
@


1.169
log
@Colour+attribute options for status line alerts, from Alex Alexander.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.168 2010/05/14 18:56:21 nicm Exp $
d2390 1
d2400 5
a2404 2
carriage returns (CR).
This translation may be disabled with the
d2406 1
a2406 1
flag.
@


1.168
log
@Accept (and document) "none" instead of "default" for attributes as it
is clearer and avoids confusion with default colours.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.167 2010/05/05 23:24:23 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: May 5 2010 $
d2075 10
@


1.167
log
@Identical behaviour to select-prompt can now be obtained with
command-prompt, so remove select-prompt and change ' to be bound to
command-prompt -p index "select-window -t :%%".
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.166 2010/05/02 15:19:35 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: May 2 2010 $
d1592 1
a1592 1
.Ic default
@


1.166
log
@sort options.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.165 2010/04/25 20:28:13 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 25 2010 $
d1268 1
a1268 1
bind-key "'" select-prompt
a2318 4
.It Ic select-prompt Op Fl t Ar target-client
Open a prompt inside
.Ar target-client
allowing a window index to be entered interactively.
@


1.165
log
@Add a tiled layout, originally from Liam Bedford a while ago, fixed up
by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.164 2010/04/06 21:35:44 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 6 2010 $
a133 4
.It Fl l
Behave as a login shell.
This flag currently has no effect and is for compatibility with other shells
when using tmux as a login shell.
d154 4
@


1.164
log
@Merge copy mode and output mode, dropping the latter. Idea and code from
Micah Cowan.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.163 2010/04/05 17:46:05 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: April 5 2010 $
d787 3
@


1.163
log
@Mention title setting, and the new default.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.162 2010/04/04 21:23:20 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 4 2010 $
d589 2
a590 8
The others are:
.Bl -tag -width Ds
.It Em output mode
This is entered when a command which produces output, such as
.Ic list-keys ,
is executed from a key binding.
.It Em copy mode
This permits a section of a window or its history to be copied to a
d598 3
a600 1
.El
d698 1
a698 1
command) or in output mode; and
d713 3
a715 1
The mode commands are as follows:
d2033 2
a2034 2
Duplicate input to any pane to all other panes in the same window, except
for panes that are not in output mode.
d2444 1
a2444 1
After it finishes, any output to stdout is displayed in output mode.
@


1.162
log
@tweak;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.161 2010/04/04 19:02:09 nicm Exp $
d1751 8
@


1.161
log
@Run job commands explicitly in the global enviroment (which can be
modified with setenv -g) rather than with the environment tmux started
with.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.160 2010/03/27 11:46:58 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 27 2010 $
a375 1
.Pp
a402 1
.Pp
d1749 2
a1750 1
.Sx ENVIRONMENT section).
@


1.160
log
@-a flag to insert a window after an existing one, moving other windows
up necessary.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.159 2010/03/26 19:30:40 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 26 2010 $
d1748 4
@


1.159
log
@dispense with some wacky escape sequences;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.158 2010/03/22 19:13:28 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 22 2010 $
d979 1
a979 1
.Op Fl dk
d986 9
@


1.158
log
@paste-buffer should be per pane, from C. Coutinho.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d408 1
a408 1
$ tmux new-window \\; split-window -d
d410 1
a410 1
$ tmux new-session -d 'vi /etc/passwd' \\; split-window -d \\; attach
@


1.157
log
@Add vi-style "jump" commands for copy mode, from Micah Cowan.
@
text
@d1 1
a1 1
.\" $Id: tmux.1,v 1.240 2010/03/16 17:51:32 nicm Exp $
d2363 1
a2363 1
.Op Fl t Ar target-window
d2366 2
a2367 1
Insert the contents of a paste buffer into the current window.
@


1.156
log
@Support up, down, left, right movement through panes with -UDLR flags to
select-pane.

Also REMOVE the up- and down-pane commands: equivalent behaviour is now
available using -t :.+ and -t :.-.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.155 2010/03/02 00:32:41 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: March 2 2010 $
d613 1
a613 1
.Bl -column "FunctionXXXXXXXXXXXXXX" "viXXXXXXXXXX" "emacs" -offset indent
d632 4
d672 12
@


1.155
log
@Permit keys in copy mode to be prefixed by a repeat count, entered with
[1-9] in vi mode, or M-[1-9] in emacs mode.

From Micah Cowan, tweaked a little by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.154 2010/02/22 20:41:16 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 22 2010 $
d339 5
d735 2
a736 4
.Ic up-pane
and
.Ic down-pane
commands and the
a864 3
.It Ic down-pane Op Fl t Ar target-pane
.D1 (alias: Ic downp )
Change the active pane to the next pane (higher index).
d1106 4
a1109 1
.It Ic select-pane Op Fl t Ar target-pane
d1115 8
a1197 3
.It Ic up-pane Op Fl t Ar target-pane
.D1 (alias: Ic upp )
Change the active pane to the previous pane (lower index).
@


1.154
log
@Option to set the characters considered word separators in copy mode, from
Micah Cowan.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.153 2010/02/17 21:12:06 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 17 2010 $
d664 10
a673 1
These key bindings are defined in a set of named tables:
@


1.153
log
@Man page additions/improvements, thanks to Robin Lee Powell.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.152 2010/02/11 20:39:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 11 2010 $
d652 1
a652 2
.Ql _ ,
.Ql \&"
d655 4
a658 1
characters as word delimiters.
d2035 7
@


1.152
log
@Add "N" key to search the opposite way from the last search (reverse of "n"),
from Micah Cowan.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.151 2010/02/10 19:17:27 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 10 2010 $
d114 5
d350 26
d384 3
a386 1
Examples include:
d396 11
d408 22
a429 1
The following commands are available:
d496 1
a496 1
.Op Ar command
d501 1
d507 2
a508 2
.Ar command
are the name of and command to execute in the initial window.
d529 1
a529 1
.Ar command
d955 1
a955 1
.Op Ar command
d967 1
a967 1
.Ar command
d970 9
a978 2
.Ar command
is not specified, the default command is used.
d1006 1
a1006 1
.Op Ar command
d1014 1
a1014 1
.Ar command
d1017 1
a1017 1
.Ar command
d1065 1
a1065 1
.Op Ar command
d1068 1
a1068 1
Reactive a window in which the command has exited (see the
d1072 1
a1072 1
.Ar command
d1111 1
a1111 1
.Op Ar command
d1452 1
a1452 1
.It Ic default-command Ar command
d1455 1
a1455 1
.Ar command ,
d1526 1
a1526 1
.It Ic lock-command Ar command
d1621 7
d1684 1
a1684 1
.It Li "#(command)" Ta "First line of command's output"
d1696 3
a1698 3
The #(command) form executes
.Ql command
as a shell command and inserts the first line of its output.
d2378 1
a2378 1
.It Ic run-shell Ar command
d2381 1
a2381 1
.Ar command
d2383 2
a2384 4
After the command finishes, any output to stdout is displayed in output mode.
If
.Ar command
doesn't return success, the exit status is also displayed.
@


1.151
log
@Clarify default status-right, from Seth Wright.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.150 2010/02/08 00:14:38 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 8 2010 $
d575 1
@


1.150
log
@Add an option to disable the smcup/rmcup alternate screen behaviour inside
tmux. From clemens fischer.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.149 2010/02/07 20:33:27 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 7 2010 $
d1666 2
a1667 1
By default, the date and time will be shown.
@


1.149
log
@next-layout is bound to Space not C-Space.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.148 2010/02/06 22:55:31 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 6 2010 $
d1900 13
@


1.148
log
@Support attaching a client read-only with a new -r flag to the attach-session
command.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.147 2010/02/06 17:35:01 nicm Exp $
d670 1
a670 1
.Ql C-space
@


1.147
log
@Rectangle copy support, from Robin Lee Powell.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.146 2010/02/04 20:00:26 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: February 4 2010 $
d367 1
a367 1
.Op Fl d
d379 4
@


1.146
log
@vi-style B, W and E keys in copy mode to navigate between words treating only
spaces as word separators. Also add . to the list of word separators for
standard word navigation.

From Micah Cowan, tweaked slightly by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.145 2010/02/04 18:20:16 nicm Exp $
d567 1
@


1.145
log
@Option to display the active pane in a different colour with the display-panes
command. From Paul Hoffman, thanks.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.144 2010/01/28 19:09:12 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 28 2010 $
d538 1
a538 1
.Bl -column "FunctionXXXXXXXXXXXX" "viXXXXXXXXXX" "emacs" -offset indent
d558 2
d565 1
d577 12
@


1.144
log
@Typo, from Micah Cowan.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.143 2010/01/27 20:18:52 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 27 2010 $
d754 2
a755 1
.Ic display-panes-time
d757 1
a757 1
.Ic display-panes-colour
d1402 4
d1407 1
a1407 1
Set the colour used for the
d1409 1
a1409 1
command.
@


1.143
log
@Alter next-word to have vi-like movement behaviour, and add next-word-end with
the existing emacs behaviour. From Micah Cowan.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.142 2010/01/25 21:33:39 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 25 2010 $
d584 1
a584 1
.Ic window-choose
@


1.142
log
@Top/bottom of history mode keys, diff from Micah Cowan, tweaked by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.141 2010/01/23 17:49:21 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 23 2010 $
d558 2
a559 1
.It Li "Next word" Ta "w" Ta "M-f"
@


1.141
log
@Use C-e and C-y for scrolling in vi mode, from Micah Cowan.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.140 2010/01/19 21:27:47 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 19 2010 $
d541 1
d554 1
a554 1
.It Li "Goto line" Ta ":" Ta "g"
d570 1
@


1.140
log
@Permit !, + and - to be used for window targets to specify last window (!), or
next and previous window by number (+ and -).

Also tidy an if in cmd-new-window.c.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.139 2010/01/18 19:16:04 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 18 2010 $
d538 1
a538 1
.Bl -column "FunctionXXXXXXXXXXXX" "viXXXXXXXXX" "emacs" -offset indent
d562 2
a563 2
.It Li "Scroll down" Ta "C-Down or J" Ta "C-Down"
.It Li "Scroll up" Ta "C-Up or K" Ta "C-Up"
@


1.139
log
@Missing Pp, from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.138 2010/01/14 22:10:47 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 14 2010 $
d310 7
@


1.138
log
@Document swap-pane -d.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.137 2010/01/07 20:52:18 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 7 2010 $
d1865 1
@


1.137
log
@New command, join-pane, to split and move an existing pane into the space (like
splitw then movep, or the reverse of breakp).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.136 2010/01/07 19:47:10 nicm Exp $
d1041 4
@


1.136
log
@Change split-window to accept a pane target (it should be split-pane but
renaming the command would be annoying).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.135 2010/01/03 12:51:05 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: January 3 2010 $
d770 18
@


1.135
log
@Options to set the colour of the pane borders, with different colours for the
active pane.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.134 2009/12/14 10:43:41 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 14 2009 $
d987 1
a987 1
.Op Fl t Ar target-window
d991 2
a992 1
Creates a new pane by splitting the active pane:
d1003 1
a1003 1
options specify the size of the new window in lines (for vertical split) or in
d1005 1
a1005 1
All other options have the same meaning as in the
@


1.134
log
@New server option, escape-time, to set the timeout used to detect if escapes
are alone or part of a function key or meta sequence.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.133 2009/12/10 09:16:52 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 10 2009 $
d1460 6
@


1.133
log
@Add "server options" which are server-wide and not bound to a session or
window. Set and displayed with "set -s" and "show -s".

Currently the only option is "quiet" (like command-line -q, allowing it to be
set from .tmux.conf), but others will come along.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.132 2009/12/08 07:49:31 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 8 2009 $
d1291 6
d1298 1
a1298 1
Enable of disable the display of various informational messages (see also the
d1893 1
a1893 1
.Ic show-window-options ),
@


1.132
log
@Permit panes to be referred to as "top", "bottom", "top-left" etc, if the right
pane can be identified.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.131 2009/12/03 22:54:34 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 3 2009 $
d154 3
a156 2
Prevent the server sending various informational messages, for example when
window flags are altered.
d1213 2
a1214 1
There are two types of option:
d1219 14
a1232 2
Each individual session may have a set of session options, and there is a
separate set of global session options.
d1240 1
a1240 1
The available session options are listed under the
d1258 1
a1258 1
.Op Fl aguw
d1263 12
a1274 1
Set a session option.
a1279 3
If
.Fl g
is specified, the global session option is set.
d1283 2
a1284 1
options - it is not possible to unset a global option.
d1286 10
a1295 6
With
.Fl w ,
this command is equivalent to
.Ic set-window-option
with
.Ar target-window .
d1880 1
a1880 1
.Op Fl gw
d1884 1
a1884 6
Show the session options for
.Ar target session ,
or the global session options with
.Fl g .
.Pp
If
d1886 9
a1894 4
is used, this command is equivalent to
.Ic show-window-options
with
.Ar target-window .
@


1.131
log
@Wrap at 80 columns.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.130 2009/12/03 22:50:10 nicm Exp $
d326 10
@


1.130
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.129 2009/12/03 17:44:02 nicm Exp $
d630 2
a631 1
by default); once a layout is chosen, panes within it may be moved and resized as normal.
d640 2
a641 2
A large (main) pane is shown at the top of the window and the remaining panes are
spread from left to right in the leftover space at the bottom.
d1522 2
a1523 1
to set the background colour, the name of one of the attributes (listed under the
d1969 2
a1970 2
The colour and attributes of the status line may be configured, the entire status line using
the
d1982 2
a1983 2
The status line is automatically refreshed at interval if it has changed, the interval may be
controlled with the
@


1.129
log
@Eliminate duplicate code and ease the passage for server-wide options by adding
a -w flag to set-option and show-options and making setw and showw aliases to
set -w and show -w.

Note: setw and showw are still there, but now aliases for set -w and show -w.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.128 2009/12/01 18:42:38 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: December 1 2009 $
d1255 1
a1255 1
.Ic set-window-option 
d1853 1
a1853 1
.Ic show-window-options 
@


1.128
log
@New command, capture-pane, which copies the entire pane contents to a paste
buffer. From Jonathan Alvarado.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.127 2009/11/24 19:16:11 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 24 2009 $
d1233 2
a1234 2
.Op Fl agu
.Op Fl t Ar target-session
d1252 7
d1841 2
a1842 2
.Op Fl g
.Op Fl t Ar target-session
d1849 7
@


1.127
log
@Add a -p flag to display-message to print the output rather than displaying in
the status line, this allows things like "display -p '#W'" to find the current
window index.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.126 2009/11/22 22:52:39 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 22 2009 $
d667 7
@


1.126
log
@Add cursor keys to the key names list.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.125 2009/11/19 16:22:10 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 19 2009 $
d2014 1
d2019 6
a2024 1
Display a message in the status line.
@


1.125
log
@Two new options, window-status-format and window-status-current-format, which
allow the format of each window in the status line window list to be controlled
using similar # sequences as status-left/right.

This diff also moves part of the way towards UTF-8 support in window names but
it isn't quite there yet.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.124 2009/11/19 15:00:32 jmc Exp $
d1047 4
@


1.124
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.123 2009/11/19 14:06:33 nicm Exp $
d1480 1
d1789 8
d1806 5
d1917 7
a1923 2
The window list shows the index, name and (if any) flag of the windows
present in the current session in ascending numerical order.
@


1.123
log
@Revert to xterm-keys off by default. It was on as an experiment to see if the
option could be removed, but it affects vi, so we have to keep the option, and
a conservative default is better.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.122 2009/11/19 10:22:07 nicm Exp $
d1997 2
a1998 1
.Ar message is as for
@


1.122
log
@Don't interpret #() for display-message, it usually doesn't make sense and may
leak commands.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.121 2009/11/18 17:02:17 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 18 2009 $
d1806 1
a1806 1
The default is on.
@


1.121
log
@Cleanup by moving various (mostly horrible) little bits handling UTF-8 grid
data into functions in a new file, grid-utf8.c, and use sizeof intead of
UTF8_DATA.

Also nuke trailing whitespace from tmux.1, reminded by jmc.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.120 2009/11/18 13:16:33 nicm Exp $
d1995 5
a1999 4
Display a message (see the
.Ic status-left
option below)
in the status line.
@


1.120
log
@Add a per-client log of status line messages displayed while that client
exists. A new message-limit session option sets the maximum number of entries
and a command, show-messages, shows the log (bound to ~ by default).

This (and prompt history) might be better as a single global log but until
there are global options it is easier for them to be per client.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.119 2009/11/18 10:18:25 nicm Exp $
d457 1
a457 1
.It Xo Ic show-messages 
@


1.119
log
@Mark -n keys with (no prefix) rather than [].
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.118 2009/11/10 18:53:11 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 10 2009 $
d457 10
d1386 4
@


1.118
log
@There is no real standard for modifier plus function keys. Previously, tmux
output some from rxvt but in other ways did the same as xterm or other
terminals, but this is a bit inconsistent.

xterm's method is fairly sensible and we already support it (xterm-keys), so
enable it by default instead.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.117 2009/11/03 22:40:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 3 2009 $
d1117 2
a1118 1
are enclosed in square brackets.
@


1.117
log
@Add an activity time for clients, like for sessions, and change session and
client lookup to pick the most recently used rather than the most recently
created - this is much more useful when used interactively and (because the
activity time is set at creation) should have no effect on source-file.

Based on a problem reported by Jan Johansson.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.116 2009/11/03 06:55:49 nicm Exp $
d1791 1
@


1.116
log
@Fix vi page up mode key (from naddy), add missing half page keys, and sort.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.115 2009/11/01 19:17:08 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 1 2009 $
d285 1
a285 1
current session is available, the most recently created is chosen.
@


1.115
log
@Missing setenv/showenv aliases.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.114 2009/10/25 21:12:15 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 25 2009 $
d518 3
d526 2
d531 1
a531 1
.It Li "Previous page" Ta "C-u" Ta "Page up"
a541 3
.It Li "Cursor to top line" Ta "H" Ta "M-R"
.It Li "Cursor to middle line" Ta "M" Ta "M-r"
.It Li "Cursor to bottom line" Ta "L" Ta ""
@


1.114
log
@Remove -d from tmux.1 as well.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.113 2009/10/25 01:10:57 nicm Exp $
d1841 1
d1858 1
@


1.113
log
@[ is a punctuation character and should be escaped with Ql. Although the
current groff version we have seems to handle it fine, other versions are not
so tolerant.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.112 2009/10/24 10:12:39 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 24 2009 $
d26 1
a26 1
.Op Fl 28dlquv
a113 4
.It Fl d
Force
.Nm
to assume the terminal supports default colours.
@


1.112
log
@-a option to kill all except current pane. From Tiago Cunha, thanks!
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.111 2009/10/21 13:48:27 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 21 2009 $
d505 1
a505 1
.Ql [
@


1.111
log
@Tweak descriptions for up/down pane to be clearer.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.110 2009/10/13 13:45:56 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 13 2009 $
d743 4
a746 1
.It Ic kill-pane Op Fl t Ar target-pane
d750 4
@


1.110
log
@Add mode keys to move the cursor to the top, middle and bottom of the screen.
H/M/L in vi mode and M-R/M-r in emacs (bottom of screen not bound in emacs).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.109 2009/10/12 11:08:02 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 12 2009 $
d728 1
a728 1
Move down a pane.
d1016 1
a1016 1
Move up a pane.
@


1.109
log
@Permit attributes to be turned off in #[] by prefixing with "no", for example
"noblink".
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.108 2009/10/11 14:12:10 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 11 2009 $
d541 3
@


1.108
log
@punctuation fix;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.107 2009/10/11 10:04:27 nicm Exp $
d1473 1
d1479 1
a1479 1
to set the background colour, or one of the attributes described under the
d1481 4
a1484 1
option.
d1491 2
a1492 2
Where appropriate, these may be prefixed with a number to specify the maximum
length, for example
@


1.107
log
@Add a pipe-pane command to allow a pane to be piped to a shell command, for
example:

	pipe-pane 'cat >~/out'

No arguments stops outputing and closes the pipe; the -o flag toggles a pipe
and on and off (useful for key bindings).

Suggested by espie@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.106 2009/10/11 08:58:05 nicm Exp $
d1327 2
a1328 2
.Ic lock-after-time
, the entire server will lock after
@


1.106
log
@Switch run-shell over to queue the command in the background like #().
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.105 2009/10/10 17:39:55 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 10 2009 $
d843 24
@


1.105
log
@-scroll mode which is dead.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.104 2009/10/10 17:19:38 nicm Exp $
d2071 2
a2072 2
without creating a window.
Any output to stdout is displayed in output mode.
@


1.104
log
@Split list-panes off from list-windows.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.103 2009/10/10 15:03:01 nicm Exp $
d1681 1
a1681 1
Use vi or emacs-style key bindings in scroll, copy and choice modes.
@


1.103
log
@Rather than running status-left, status-right and window title #() with popen
immediately every redraw, queue them up and run them in the background,
starting each once every status-interval. The actual status line uses the
output from the last run.

This brings several advantages:

- tmux itself may be called from inside #() without causing the server to hang;
- likewise, sleep or similar doesn't cause the server to block;
- commands aren't run excessively often when redrawing;
- commands shared by status-left and status-right, or used multiple times, will
  only be run once.

run-shell and if-shell still use system()/popen() but will be changed over to
use this too later.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.102 2009/10/10 14:51:16 nicm Exp $
d778 4
@


1.102
log
@New option, mouse-select-pane. If on, the mouse may be used to select the
current pane.

Suggested by sthen@@ and also by someone else ages ago who I have forgotten.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.101 2009/10/10 10:02:48 nicm Exp $
d1440 5
@


1.101
log
@Add "grouped sessions" which have independent name, options, current window and
so on but where the linked windows are synchronized (ie creating, killing
windows and so on are mirrored between the sessions). A grouped session may be
created by passing -t to new-session.

Had this around for a while, tested by a couple of people.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.100 2009/10/10 09:46:11 nicm Exp $
d1295 1
a1295 1
.Ic on 
d1339 8
@


1.100
log
@Support for individual session idle time locking. May be enabled by turning off
the lock-server option (it is on by default). When this is off, each session
locks when it has been idle for the lock-after-time setting. When on, the
entire server locks when ALL sessions have been idle for their individual
lock-after-time settings.

This replaces one global-only option (lock-after-time) with another
(lock-server), but the default behaviour is usually preferable so there don't
seem to be many alternatives.

Diff/idea largely from Thomas Adam, tweaked by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.99 2009/10/09 07:27:00 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 9 2009 $
d412 1
d429 20
@


1.99
log
@Add a simple synchronize-panes window option: when set, all input to any pane
that is part of the window is also sent to all other panes in the same
window. Suggested by several, most recently Tomasz Pajor.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.98 2009/10/07 15:58:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 7 2009 $
d1256 2
a1257 2
Lock the server (like the
.Ic lock-server
d1260 4
a1263 4
seconds of inactivity.
The default is off (set to 0).
This has no effect as a session option; it must be set as a global option using
.Fl g .
d1270 13
@


1.98
log
@Support J and K for scroll up and scroll down in copy mode with vi keys,
suggested by martynas.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.97 2009/10/06 07:19:32 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: October 6 2009 $
d1665 5
@


1.97
log
@Remove scroll mode which is now redundant, copy mode should be used instead.

The = key binding now does nothing.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.96 2009/10/06 07:09:00 nicm Exp $
d493 1
a493 1
.Bl -column "FunctionXXXXXXXXXXXX" "viXXXXXX" "emacs" -offset indent
d512 2
a513 2
.It Li "Scroll down" Ta "C-Down" Ta "C-Down"
.It Li "Scroll up" Ta "C-Up" Ta "C-Up"
@


1.96
log
@Make C-Up and C-Down in copy mode scroll the screen up and down one line
without moving the cursor, like Up and Down in scroll mode (which will shortly
disappear).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.95 2009/10/04 11:33:35 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 4 2009 $
a476 6
.It Em scroll mode
This is entered with the
.Ic scroll-mode
command (bound to
.Ql =
by default) and permits the window history buffer to be inspected.
d536 1
a536 1
used in copy and scroll modes.
a556 10
.It Xo Ic scroll-mode
.Op Fl u
.Op Fl t Ar target-pane
.Xc
Enter scroll mode.
The
.Fl u
has the same meaning as in the
.Ic copy-mode
command.
@


1.95
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.94 2009/10/04 11:18:26 nicm Exp $
d518 2
@


1.94
log
@Get / and ? the right way round in vi mode, and use : for goto line rather than
g.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.93 2009/10/04 08:50:05 nicm Exp $
d986 1
a986 2
.Ql Z
).
d990 2
a991 2
.Ql ^
, and Alt (meta) with
@


1.93
log
@Add a key string for space ("Space") and document the names, suggested by
guenther@@. Also document how to bind " and ', suggested by miod@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.92 2009/09/24 14:17:09 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 24 2009 $
d511 1
a511 1
.It Li "Goto line" Ta "g" Ta "g"
@


1.92
log
@New lock-client and lock-session commands to lock an individual client or all
clients attached to a session respectively.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.91 2009/09/23 12:03:31 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 23 2009 $
d981 44
a1036 8
Keys may be specified prefixed with
.Ql C-
or
.Ql ^
for Ctrl keys, or
.Ql M-
for Alt (meta) keys.
.Pp
@


1.91
log
@Support -c like sh(1) to execute a command, useful when tmux is a login
shell. Suggested by halex@@.

This includes another protocol version increase (the last for now) so again
restart the tmux server before upgrading.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.90 2009/09/23 06:18:48 nicm Exp $
d395 13
@


1.90
log
@Remove the internal tmux locking and instead detach each client and run the
command specified by a new option "lock-command" (by default "lock -np") in
each client.

This means each terminal has to be unlocked individually but simplifies the
code and allows the system password to be used to unlock.

Note that the set-password command is gone, so it will need to be removed from
configuration files, and the -U command line flag has been removed.

This is the third protocol version change so again it is best to stop the tmux
server before upgrading.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.89 2009/09/22 12:38:10 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 22 2009 $
d27 1
d105 9
@


1.89
log
@Permit multiple prefix keys to be defined, separated by commas, for example:

set -g prefix ^a,^b

Any key in the list acts as the prefix. The send-prefix command always sends
the first key in the list.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.88 2009/09/21 07:45:10 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 21 2009 $
d26 1
a26 1
.Op Fl 28dlqUuv
a156 2
.It Fl U
Unlock the server.
a337 2

bind-key D detach-client \e\; lock-server
d1212 3
a1214 1
Lock the server after
d1220 6
a1225 5
When passwords are entered incorrectly,
.Nm
follows the behaviour of
.Xr login 1
and ignores further password attempts for an increasing timeout.
d1964 3
a1966 1
Lock the server until a password is entered.
a1978 15
.It Xo Ic set-password
.Op Fl c
.Ar password
.Xc
.D1 (alias: Ic pass )
Set the server password.
If the
.Fl c
option is given, a pre-encrypted password may be specified.
By default, the password is blank, thus any entered password will be accepted
when unlocking the server (see the
.Ic lock-server
command).
To prevent variable expansion when an encrypted password is read from a
configuration file, enclose it in single quotes (').
@


1.88
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.87 2009/09/20 19:15:02 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 20 2009 $
d1051 1
d1262 5
a1266 2
.It Ic prefix Ar key
Set the current prefix key.
@


1.87
log
@run-shell command to run a shell command without opening a window, sending
stdout to output mode.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.86 2009/09/18 15:19:27 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 18 2009 $
d1969 1
a1969 1
.Ar command 
@


1.86
log
@New option, set-titles-string, to allow the window title to be specified (as
for status-left/right) if set-titles is on. Also only update the title when the
status line is being redrawn.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.85 2009/09/10 17:16:24 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 10 2009 $
d1962 9
@


1.85
log
@Permit options such as status-bg to be configured using the entire 256 colour
palette by setting "colour0" to "colour255".
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.84 2009/09/07 21:12:12 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 7 2009 $
d1290 7
@


1.84
log
@While the display-panes indicator is on screen, make the number keys select the
pane with that index.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.83 2009/09/07 10:49:32 nicm Exp $
d1253 5
a1257 2
.Ic white
or
@


1.83
log
@Permit embedded colour and attributes in status-left and status-right using new
#[] special characters, for example #[fg=red,bg=blue,blink].
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.82 2009/09/02 17:34:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 2 2009 $
d692 5
@


1.82
log
@Accept -l to make it easier for people who use tmux as a login shell to use
$SHELL. Originally from martynas@@, tweaked by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.81 2009/09/02 16:38:35 nicm Exp $
d1319 1
a1319 1
may contain any of the following special character pairs:
d1323 1
d1332 17
@


1.81
log
@When incorrect passwords are entered, behave similarly to login(1) and backoff
for a bit. Based on a diff from martynas@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.80 2009/09/02 06:33:20 nicm Exp $
d26 1
a26 1
.Op Fl 28dqUuv
d123 4
@


1.80
log
@Add a transpose-chars command in edit mode (C-t in emacs mode only). From Kalle
Olavi Niemitalo.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.79 2009/09/01 13:09:50 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: September 1 2009 $
d1212 5
@


1.79
log
@When using tmux as a login shell, there is currently no way to specify a shell
to be used as a login shell inside tmux, so add a default-shell session option.
This sets the shell invoked as a login shell when the default-command option is
empty.

The default option value is whichever of $SHELL, getpwuid(getuid())'s pw_shell
or /bin/sh is valid first.

Based on a diff from martynas@@, changed by me to be a session option rather
than a window option.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.78 2009/08/31 20:46:19 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 31 2009 $
d500 1
@


1.78
log
@Add a new display-panes command, with two options (display-panes-colour and
display-panes-time), which displays a visual indication of the number of each
pane.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.77 2009/08/31 11:52:32 stsp Exp $
d1146 4
a1149 1
.Ar command .
d1152 11
a1162 1
to create a login shell using the
d1164 7
a1170 2
environment variable or, if it is unset, the user's shell returned by
.Xr getpwuid 3 .
@


1.77
log
@squash typo
ok nicm@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.76 2009/08/25 12:18:51 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 25 2009 $
d678 9
d1169 8
d1178 2
a1179 1
Set the amount of time for which status line messages are displayed.
@


1.76
log
@Add a choose-client command and extend choose-{session,window} to accept a
template. After a choice is made, %% (or %1) in the template is replaced by the
name of the session, window or client suitable for -t and the result executed
as a command. So, for example, "choose-window "killw -t '%%'"" will kill the
selected window.

The defaults if no template is given are (as now) select-window for
choose-window, switch-client for choose-session, and detach-client for
choose-client (now bound to D).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.75 2009/08/23 18:21:02 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 23 2009 $
d1230 1
a1230 1
Attempt to set the window title using the \ee]2;...\e007 xterm code and
@


1.75
log
@Add some other obvious variables to update-environment (WINDOWID SSH_ASKPASS
SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION) so they are updated in the session
environment on new/attach.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.74 2009/08/19 16:10:26 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 19 2009 $
d625 17
a641 3
.It Ic choose-session Op Fl t Ar target-window
Put a window into session choice mode, where the session for the current
client may be selected interactively from a list.
d644 32
a675 3
.It Ic choose-window Op Fl t Ar target-window
Put a window into window choice mode, where the window for the session
attached to the current client may be selected interactively from a list.
@


1.74
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.73 2009/08/19 10:39:50 nicm Exp $
d1346 1
a1346 1
.Ev DISPLAY .
@


1.73
log
@Extend command-prompt with a -p option which is a comma-separated list of one
or more prompts to present in order.

The responses to the prompt are replaced in the template string: %% are
replaced in order, so the first prompt replaces the first %%, the second
replaces the second, and so on. In addition, %1 up to %9 are replaced with the
responses to the first the ninth prompts

The default template is "%1" so the response to the first prompt is processed
as a command.

Note that this changes the behaviour for %% so if there is only one prompt,
only the first %% will be replaced. Templates such as "neww -n '%%' 'ssh %%'"
should be changed to "neww -n '%1' 'ssh %1'".

From Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.72 2009/08/18 16:21:04 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 18 2009 $
d1688 1
a1688 1
and all occurences of
d1695 4
a1698 2
prompts. Up to nine prompt responses may be replaced
.Ns ( Ql %1
d1700 2
a1701 1
.Ns Ql %9 ) .
@


1.72
log
@Now that pane targets (-t) are supported, switch some commands to use them
where it makes sense: clock-mode, copy-mode, scroll-mode, send-keys,
send-prefix.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.71 2009/08/18 07:23:43 nicm Exp $
d1665 1
d1675 24
a1698 2
is specified, it is used as the command; any %% in the template will be
replaced by what is entered at the prompt.
d1952 1
@


1.71
log
@Add a "delete line" key when editing in the status line or the search up/down
prompt. C-u with emacs keys, d with vi.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.70 2009/08/18 07:08:26 nicm Exp $
d531 1
a531 1
.Op Fl t Ar target-window
d539 1
a539 1
.Op Fl t Ar target-window
d973 1
a973 1
.Op Fl t Ar target-window
d987 1
a987 1
.It Ic send-prefix Op Fl t Ar target-window
d1802 1
a1802 1
.It Ic clock-mode Op Fl t Ar target-window
@


1.70
log
@Add (naive) searching and goto line in copy mode. Searching is C-r and C-s with
emacs keys, / and ? with vi; n repeats the search again with either key
set. All searching wraps the top/bottom. Goto line is g for both emacs and vi.

The search prompts don't have full line editing, just simple append and delete
characters.

Also sort the mode keys list in tmux.1.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.69 2009/08/13 20:11:58 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 13 2009 $
d485 1
@


1.69
log
@Add a base-index session option to specify the first index checked when looking
for an index for a new window.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.68 2009/08/13 19:04:00 nicm Exp $
a477 1
.It Li "Start of line" Ta "0" Ta "C-a"
d482 4
d487 1
a487 1
.It Li "Cursor left" Ta "h" Ta "Left"
d490 1
d494 4
a497 1
.It Li "Cursor right" Ta "l" Ta "Right"
a498 3
.It Li "Cursor up" Ta "k" Ta "Up"
.It Li "Delete to end of line" Ta "D" Ta "C-k"
.It Li "Paste buffer" Ta "p" Ta "C-y"
@


1.68
log
@When creating a new session from the command-line where there is an external
terminal, copy the termios(4) special characters and use them for new windows
created in the new session. Suggested by Theo.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.67 2009/08/10 17:14:55 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 10 2009 $
d1067 4
@


1.67
log
@some minor tweaks; ok nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.66 2009/08/09 16:03:05 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 9 2009 $
d401 4
@


1.66
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.65 2009/08/09 15:25:56 nicm Exp $
d37 4
a40 2
Programs may be detached from the screen, continue running in the background,
and be reattached to the same or a different screen.
d76 1
a76 1
connection timeout) or intentional detachment (with the
d204 1
a204 1
.Bl -tag -width Ds -offset 3n -compact
@


1.65
log
@Minor language tweaks, change which key bindings are summarised.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.64 2009/08/09 14:35:15 nicm Exp $
d72 1
a72 1
(such as 
a230 1
.Pp
d1238 1
a1238 1
Set the attribute of the left part of the status line. 
d1262 1
a1262 1
Set the attribute of the right part of the status line. 
@


1.64
log
@Move the key bindings section to near the start, mention attach/detach in the
first section, and another couple of tweaks. Based on a diff from Theo.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.63 2009/08/08 21:52:43 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 8 2009 $
d91 1
d204 1
a204 1
Create new window.
d206 1
a206 1
Detach current client.
d208 1
a208 1
Move to last (previously selected) window in the current session.
d210 1
a210 1
Change to next window in the current session.
d212 5
a216 3
Change to previous window in the current session.
.It t
Display a large clock.
d218 1
a218 1
List current key bindings.
@


1.63
log
@Infrastructure and commands to manage the environment for processes started
within tmux.

There is a global environment, copied from the external environment when the
server is started and each sesssion has an (initially empty) session
environment which overrides it.

New commands set-environment and show-environment manipulate or display the
environments.

A new session option, update-environment, is a space-separated list of
variables which are updated from the external environment into the session
environment every time a new session is created - the default is DISPLAY.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.62 2009/08/08 20:36:42 nicm Exp $
d37 2
d71 10
a80 28
For a quick start guide,
see the
.Sx EXAMPLES
section at the bottom of the page.
An overview of the sections in this manual page:
.Bl -ohang
.It Sy Commands
An overview of how
.Nm
commands work.
.It Sy Clients and sessions
Commands for managing clients and sessions.
.It Sy Windows and panes
Commands for managing windows and panes.
.It Sy Key bindings
How key bindings work.
.It Sy Options
Configuration options for
.Nm .
.It Sy Status line
Commands pertinent to the status line.
.It Sy Buffers
Copy and paste operations.
.It Sy Miscellaneous
Miscellaneous commands.
.It Sy Examples
A quick start guide.
.El
d82 9
d192 37
a886 36
.Nm
may be controlled from an attached client by using a key combination of a
prefix key,
.Ql C-b
(Ctrl-b) by default, followed by a command key.
.Pp
Some of the default key bindings include:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It c
Create new window.
.It d
Detach current client.
.It l
Move to last (previously selected) window in the current session.
.It n
Change to next window in the current session.
.It p
Change to previous window in the current session.
.It t
Display a large clock.
.It \&?
List current key bindings.
.El
.Pp
A complete list may be obtained with the
.Ic list-keys
command (bound to
.Ql \&?
by default).
Key bindings may be changed with the
.Ic bind-key
and
.Ic unbind-key
commands.
.Pp
d1868 3
a1870 1
and reattached with:
@


1.62
log
@Options to set the colours and attributes for status-left/-right. From Thomas
Adam, thanks.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.61 2009/08/07 15:39:10 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 7 2009 $
d1324 12
d1539 54
@


1.61
log
@If there is an error in the configuration file, don't just exit(1) as this can
cause the client to hang. Instead, send the error message, then mark the client
as bad and start a normal shutdown so the server exits once the error is
written.

This also allows some code duplicating daemon(3) to be trimmed and logging to
begin earlier.

Prompted by Theo noticing the behaviour on error wasn't documented.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.60 2009/08/07 12:24:16 nicm Exp $
d1241 6
d1265 6
@


1.60
log
@Move introduction section up into description. From jmc.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.59 2009/08/06 21:06:35 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 6 2009 $
d123 4
@


1.59
log
@tweak INTRODUCTION; from nicm and myself
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.58 2009/08/04 18:45:57 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: August 4 2009 $
d38 60
a193 56
.El
.Sh INTRODUCTION
When
.Nm
is started it creates a new
.Em session
with a single
.Em window
and displays it on screen.
A status line at the bottom of the screen
shows information on the current session
and is used to enter interactive commands.
.Pp
A session is a single collection of
.Em pseudo terminals
under the management of
.Nm .
Each session has one or more
windows linked to it.
A window occupies the entire screen
and may be split into rectangular panes,
each of which is a separate pseudo terminal
(the
.Xr pty 4
manual page documents the technical details of pseudo terminals).
Any number of
.Nm
instances may connect to the same session,
and any number of windows may be present in the same session.
Once all sessions are killed,
.Nm
exits.
.Pp
This is an overview of the sections in this manual page:
.Bl -ohang
.It Sy Commands
An overview of how
.Nm
commands work.
.It Sy Clients and sessions
Commands for managing clients and sessions.
.It Sy Windows and panes
Commands for managing windows and panes.
.It Sy Key bindings
How key bindings work.
.It Sy Options
Configuration options for
.Nm .
.It Sy Status line
Commands pertinent to the status line.
.It Sy Buffers
Copy and paste operations.
.It Sy Miscellaneous
Miscellaneous commands.
.It Sy Examples
A quick start guide.
@


1.58
log
@Add a -a flag to set-option and set-window-option to append to an existing
string value, useful for terminal-overrides.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.57 2009/08/04 18:41:28 jmc Exp $
d34 3
a36 2
is a terminal multiplexer: it enables a number of terminals to be accessed and
controlled from a single terminal.
d131 1
a131 1
If no command and flags are specified, the
d136 1
d138 21
a158 11
runs as a server-client system.
A server holds a number of
.Em sessions ,
each of which may have a number of
.Em windows
linked to it.
A server is started automatically when the first session is created and exits
when all the sessions it contains are destroyed.
A window may be split on screen into one or more
.Em panes ,
each of which is a separate terminal.
d160 6
a165 6
.Em clients
may connect to a session, or the server
may be controlled by issuing commands with
.Nm .
Communication takes place through a socket, by default placed in
.Pa /tmp .
@


1.57
log
@restructure the layout of this page, moving the commands into various
subsections; lots of tweaks to come on the text

from nicm and myself
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.56 2009/08/04 07:56:38 jmc Exp $
d1024 1
a1024 1
.Op Fl gu
d1030 5
d1318 1
a1318 1
.Op Fl gu
d1325 1
@


1.56
log
@clean up some macro abuse in the commands section;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.55 2009/08/03 14:34:47 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 3 2009 $
a36 20
.Nm
runs as a server-client system.
A server holds a number of
.Em sessions ,
each of which may have a number of
.Em windows
linked to it.
A server is started automatically when the first session is created and exits
when all the sessions it contains are destroyed.
A window may be split on screen into one or more
.Em panes ,
each of which is a separate terminal.
Any number of
.Em clients
may connect to a session, or the server
may be controlled by issuing commands with
.Nm .
Communication takes place through a socket, by default placed in
.Pa /tmp .
.Pp
d134 1
a134 2
.Sh QUICK START
To create a new
d136 18
a153 2
session running
.Xr vi 1 :
d155 50
a204 1
.Dl $ tmux new-session vi
d206 18
a223 3
Most commands have a shorter form, known as an alias.
For new-session, this is
.Ic new :
d225 26
a250 1
.Dl $ tmux new vi
d252 8
a259 41
Alternatively, the shortest unambiguous form of a command is accepted.
If there are several options, they are listed:
.Bd -literal -offset indent
$ tmux n
ambiguous command: n, could be: new-session, new-window, next-window
.Ed
.Pp
Within an active session, a new window may be created by typing
.Ql C-b c
(Ctrl
followed by the
.Ql b
key
followed by the
.Ql c
key).
.Pp
Windows may be navigated with:
.Ql C-b 0
(to select window 0),
.Ql C-b 1
(to select window 1), and so on;
.Ql C-b n
to select the next window; and
.Ql C-b p
to select the previous window.
.Pp
A session may be detached using
.Ql C-b d
and reattached with:
.Pp
.Dl $ tmux attach-session
.Pp
Typing
.Ql C-b \&?
lists the current key bindings in the current window; up and down may be used
to navigate the list or
.Ql q
to exit from it.
.Pp
Commands to be run when the
d261 3
a263 4
server is started may be placed in the
.Pa ~/.tmux.conf
configuration file.
Common examples include:
d265 7
a271 6
Changing the default prefix key:
.Bd -literal -offset indent
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix
.Ed
d273 1
a273 1
Turning the status line off, or changing its colour:
d275 9
a283 2
set-option -g status off
set-option -g status-bg blue
d285 16
d302 14
a315 13
Setting other options, such as the default command,
or locking after 30 minutes of inactivity:
.Bd -literal -offset indent
set-option -g default-command "exec /bin/ksh"
set-option -g lock-after-time 1800
.Ed
.Pp
Creating new key bindings:
.Bd -literal -offset indent
bind-key b set-option status
bind-key / command-prompt "split-window 'exec man %%'"
.Ed
.Sh KEY BINDINGS
d317 27
a343 31
may be controlled from an attached client by using a key combination of a
prefix key,
.Ql C-b
(Ctrl-b) by default, followed by a command key.
.Pp
Some of the default key bindings include:
.Pp
.Bl -tag -width Ds -offset 3n -compact
.It c
Create new window.
.It d
Detach current client.
.It l
Move to last (previously selected) window in the current session.
.It n
Change to next window in the current session.
.It p
Change to previous window in the current session.
.It t
Display a large clock.
.It \&?
List current key bindings.
.El
.Pp
A complete list may be obtained with the
.Ic list-keys
command (bound to
.Ql \&?
by default).
Key bindings may be changed with the
.Ic bind-key
d345 21
a365 3
.Ic unbind-key
commands.
.Sh HISTORY
d367 19
a385 7
maintains a configurable history buffer for each window.
By default, up to 2000 lines are kept; this can be altered with the
.Ic history-limit
option (see the
.Ic set-option
command below).
.Sh MODES
d463 19
a481 10
.Sh BUFFERS
.Nm
maintains a stack of
.Em paste buffers
for each session.
Up to the value of the
.Ic buffer-limit
option are kept; when a new buffer is added, the buffer at the bottom of the
stack is removed.
Buffers may be added using
a482 25
or the
.Ic set-buffer
command, and pasted into a window using the
.Ic paste-buffer
command.
.Sh OPTIONS
The appearance and behaviour of
.Nm
may be modified by changing the value of various options.
There are two types of option:
.Em session options
and
.Em window options .
.Pp
Each individual session may have a set of session options, and there is a
separate set of global session options.
Sessions which do not have a particular option configured inherit the value
from the global session options.
Session options are set or unset with the
.Ic set-option
command and may be listed with the
.Ic show-options
command.
The available session options are listed under the
.Ic set-option
d484 1
a485 11
Similarly, a set of window options is attached to each window, and there is
a set of global window options from which any unset options are inherited.
Window options are altered with the
.Ic set-window-option
command and can be listed with the
.Ic show-window-options
command.
All window options are documented with the
.Ic set-window-option
command.
.Sh PANES AND LAYOUTS
a547 9
.Sh STATUS LINE
.Nm
includes an optional status line which is displayed in the bottom line of each
terminal.
By default, the status line is enabled (it may be disabled with the
.Ic status
session option) and contains, from left-to-right: the name of the current
session in square brackets; the window list; the current window title in double
quotes; and the time and date.
d549 39
a587 48
The status line is made of three parts: configurable left and right sections
(which may contain dynamic content such as the time or output from a shell
command, see the
.Ic status-left ,
.Ic status-left-length ,
.Ic status-right ,
and
.Ic status-right-length
options below), and a central window list.
The window list shows the index, name and (if any) flag of the windows
present in the current session in ascending numerical order.
The flag is one of the following symbols appended to the window name:
.Bl -column "Symbol" "Meaning" -offset indent
.It Sy "Symbol" Ta Sy "Meaning"
.It Li "*" Ta "Denotes the current window."
.It Li "-" Ta "Marks the last window (previously selected)."
.It Li "#" Ta "Window is monitored and activity has been detected."
.It Li "!" Ta "A bell has occurred in the window."
.It Li "+" Ta "Window is monitored for content and it has appeared."
.El
.Pp
The # symbol relates to the
.Ic monitor-activity
and + to the
.Ic monitor-content
window options.
The window name is printed in inverted colours if an alert (bell, activity or
content) is present.
.Pp
The colour and attributes of the status line may be configured, the entire status line using
the
.Ic status-attr ,
.Ic status-fg
and
.Ic status-bg
session options and individual windows using the
.Ic window-status-attr ,
.Ic window-status-fg
and
.Ic window-status-bg
window options.
.Pp
The status line is automatically refreshed at interval if it has changed, the interval may be
controlled with the
.Ic status-interval
session option.
.Sh COMMANDS
This section contains a list of the commands supported by
d589 8
a596 298
Most commands accept the optional
.Fl t
argument with one of
.Ar target-client ,
.Ar target-session
.Ar target-window ,
or
.Ar target-pane .
These specify the client, session, window or pane which a command should affect.
.Ar target-client
is the name of the
.Xr pty 4
file to which the client is connected, for example either of
.Pa /dev/ttyp1
or
.Pa ttyp1
for the client attached to
.Pa /dev/ttyp1 .
If no client is specified, the current client is chosen, if possible, or an
error is reported.
Clients may be listed with the
.Ic list-clients
command.
.Pp
.Ar target-session
is either the name of a session (as listed by the
.Ic list-sessions
command) or the name of a client with the same syntax as
.Ar target-client ,
in which case the session attached to the client is used.
When looking for the session name,
.Nm
initially searches for an exact match; if none is found, the session names
are checked for any for which
.Ar target-session
is a prefix or for which it matches as an
.Xr fnmatch 3
pattern.
If a single match is found, it is used as the target session; multiple matches
produce an error.
If a session is omitted, the current session is used if available; if no
current session is available, the most recently created is chosen.
.Pp
.Ar target-window
specifies a window in the form
.Em session Ns \&: Ns Em window .
.Em session
follows the same rules as for
.Ar target-session ,
and
.Em window
is looked for in order: as a window index, for example mysession:1; as an exact
window name, such as mysession:mywindow; then as an
.Xr fnmatch 3
pattern or the start of a window name, such as mysession:mywin* or
mysession:mywin.
An empty window name specifies the next unused index if appropriate (for
example the
.Ic new-window
and
.Ic link-window
commands)
otherwise the current window in
.Em session
is chosen.
When the argument does not contain a colon,
.Nm
first attempts to parse it as window; if that fails, an attempt is made to
match a session.
.Pp
.Ar target-pane
takes a similar form to
.Ar target-window
but with the optional addition of a period followed by a pane index, for
example: mysession:mywindow.1.
If the pane index is omitted, the currently active pane in the specified
window is used.
If neither a colon nor period appears,
.Nm
first attempts to use the argument as a pane index; if that fails, it is looked
up as for
.Ar target-window .
.Pp
Multiple commands may be specified together as part of a
.Em command sequence .
Each command should be separated by spaces and a semicolon;
commands are executed sequentially from left to right.
A literal semicolon may be included by escaping it with a backslash (for
example, when specifying a command sequence to
.Ic bind-key ) .
.Pp
Examples include:
.Bd -literal -offset indent
refresh-client -t/dev/ttyp2

rename-session -tfirst newname

set-window-option -t:0 monitor-activity on

new-window ; split-window -d

bind-key D detach-client \e\; lock-server
.Ed
.Pp
The following commands are available:
.Bl -tag -width Ds
.It Xo Ic attach-session
.Op Fl d
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic attach )
If run from outside
.Nm ,
create a new client in the current terminal and attach it to
.Ar target-session .
If used from inside, switch the current client.
If
.Fl d
is specified, any other clients attached to the session are detached.
.Pp
If no server is started,
.Ic attach-session
will attempt to start it; this will fail unless sessions are created in the
configuration file.
.It Xo Ic bind-key
.Op Fl cnr
.Op Fl t Ar key-table
.Ar key Ar command Op Ar arguments
.Xc
.D1 (alias: Ic bind )
Bind key
.Ar key
to
.Ar command .
Keys may be specified prefixed with
.Ql C-
or
.Ql ^
for Ctrl keys, or
.Ql M-
for Alt (meta) keys.
.Pp
By default (without
.Fl t )
the primary key bindings are modified (those normally activated with the prefix
key); in this case, if
.Fl n
is specified, it is not necessary to use the prefix key,
.Ar command
is bound to
.Ar key
alone.
The
.Fl r
flag indicates this key may repeat, see the
.Ic repeat-time
option.
.Pp
If
.Fl t
is present,
.Ar key
is bound in
.Ar key-table :
the binding for command mode with
.Fl c
or for normal mode without.
To view the default bindings and possible commands, see the
.Ic list-keys
command.
.It Xo Ic break-pane
.Op Fl d
.Op Fl t Ar target-pane
.Xc
.D1 (alias: Ic breakp )
Break
.Ar target-pane
off from its containing window to make it the only pane in a new window.
If
.Fl d
is given, the new window does not become the current window.
.It Ic choose-session Op Fl t Ar target-window
Put a window into session choice mode, where the session for the current
client may be selected interactively from a list.
This command works only from inside
.Nm .
.It Ic choose-window Op Fl t Ar target-window
Put a window into window choice mode, where the window for the session
attached to the current client may be selected interactively from a list.
This command works only from inside
.Nm .
.It Ic clear-history Op Fl t Ar target-pane
.D1 (alias: Ic clearhist )
Remove and free the history for the specified pane.
.It Ic clock-mode Op Fl t Ar target-window
Display a large clock.
.It Xo Ic command-prompt
.Op Fl t Ar target-client
.Op Ar template
.Xc
Open the command prompt in a client.
This may be used from inside
.Nm
to execute commands interactively.
If
.Ar template
is specified, it is used as the command; any %% in the template will be
replaced by what is entered at the prompt.
.It Xo Ic confirm-before
.Op Fl t Ar target-client
.Ar command
.Xc
.D1 (alias: Ic confirm )
Ask for confirmation before executing
.Ar command .
This command works only from inside
.Nm .
.It Xo Ic copy-buffer
.Op Fl a Ar src-index
.Op Fl b Ar dst-index
.Op Fl s Ar src-session
.Op Fl t Ar dst-session
.Xc
.D1 (alias: Ic copyb )
Copy a session paste buffer to another session.
If no sessions are specified, the current one is used instead.
.It Xo Ic copy-mode
.Op Fl u
.Op Fl t Ar target-window
.Xc
Enter copy mode.
The
.Fl u
option scrolls one page up.
.It Xo Ic delete-buffer
.Op Fl b Ar buffer-index
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic deleteb )
Delete the buffer at
.Ar buffer-index ,
or the top buffer if not specified.
.It Ic detach-client Op Fl t Ar target-client
.D1 (alias: Ic detach )
Detach the current client if bound to a key, or the specified client with
.Fl t .
.It Xo Ic display-message
.Op Fl t Ar target-client
.Op Ar message
.Xc
.D1 (alias: Ic display )
Display a message (see the
.Ic status-left
option below)
in the status line.
.It Ic down-pane Op Fl t Ar target-pane
.D1 (alias: Ic downp )
Move down a pane.
.It Xo Ic find-window
.Op Fl t Ar target-window
.Ar match-string
.Xc
.D1 (alias: Ic findw )
Search for the
.Xr fnmatch 3
pattern
.Ar match-string
in window names, titles, and visible content (but not history).
If only one window is matched, it'll be automatically selected, otherwise a
choice list is shown.
This command only works from inside
.Nm .
.It Ic has-session Op Fl t Ar target-session
.D1 (alias: Ic has )
Report an error and exit with 1 if the specified session does not exist.
If it does exist, exit with 0.
.It Ic if-shell Ar shell-command command
.D1 (alias: Ic if )
Execute
.Ar command
if
.Ar shell-command
returns success.
.It Ic kill-pane Op Fl t Ar target-pane
.D1 (alias: Ic killp )
Destroy the given pane.
If no panes remain in the containing window, it is also destroyed.
.It Ic kill-server
Kill the
.Nm
server and clients and destroy all sessions.
.It Ic kill-session Op Fl t Ar target-session
Destroy the given session, closing any windows linked to it and no other
sessions, and detaching all clients attached to it.
.It Ic kill-window Op Fl t Ar target-window
.D1 (alias: Ic killw )
Kill the current window or the window at
.Ar target-window ,
a626 37
.It Ic list-buffers Op Fl t Ar target-session
.D1 (alias: Ic lsb )
List the buffers in the given session.
.It Ic list-clients
.D1 (alias: Ic lsc )
List all clients attached to the server.
.It Ic list-commands
.D1 (alias: Ic lscm )
List the syntax of all commands supported by
.Nm .
.It Ic list-keys Op Fl t Ar key-table
.D1 (alias: Ic lsk )
List all key bindings.
Without
.Fl t
the primary key bindings - those executed when preceded by the prefix key -
are printed.
Keys bound without the prefix key (see
.Ic bind-key
.Fl n )
are enclosed in square brackets.
.Pp
With
.Fl t ,
the key bindings in
.Ar key-table
are listed; this may be one of:
.Em vi-edit ,
.Em emacs-edit ,
.Em vi-choice ,
.Em emacs-choice ,
.Em vi-copy
or
.Em emacs-copy .
.It Ic list-sessions
.D1 (alias: Ic ls )
List all sessions managed by the server.
a630 11
.It Xo Ic load-buffer
.Op Fl b Ar buffer-index
.Op Fl t Ar target-session
.Ar path
.Xc
.D1 (alias: Ic loadb )
Load the contents of the specified paste buffer from
.Ar path .
.It Ic lock-server
.D1 (alias: Ic lock )
Lock the server until a password is entered.
a642 16
.It Xo Ic new-session
.Op Fl d
.Op Fl n Ar window-name
.Op Fl s Ar session-name
.Op Ar command
.Xc
.D1 (alias: Ic new )
Create a new session with name
.Ar session-name .
The new session is attached to the current terminal unless
.Fl d
is given.
.Ar window-name
and
.Ar command
are the name of and command to execute in the initial window.
a687 15
.It Xo Ic paste-buffer
.Op Fl dr
.Op Fl b Ar buffer-index
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic pasteb )
Insert the contents of a paste buffer into the current window.
With
.Fl d ,
also delete the paste buffer from the stack.
When output, any linefeed (LF) characters in the paste buffer are replaced with
carriage returns (CR).
This translation may be disabled with the
.Fl r
flag.
a696 12
.It Ic refresh-client Op Fl t Ar target-client
.D1 (alias: Ic refresh )
Refresh the current client if bound to a key, or a single client if one is given
with
.Fl t .
.It Xo Ic rename-session
.Op Fl t Ar target-session
.Ar new-name
.Xc
.D1 (alias: Ic rename )
Rename the session to
.Ar new-name .
d712 106
a817 12
Resize a pane, upward with
.Fl U
(the default), downward with
.Fl D ,
to the left with
.Fl L
and to the right with
.Fl R .
The
.Ar adjustment
is given in lines or cells (the default is 1).
.It Xo Ic respawn-window
a819 1
.Op Ar command
d821 8
a828 8
.D1 (alias: Ic respawnw )
Reactive a window in which the command has exited (see the
.Ic remain-on-exit
window option).
If
.Ar command
is not given, the command used when the window was created is executed.
The window must be already inactive, unless
d830 49
a878 4
is given, in which case any existing command is killed.
.It Xo Ic rotate-window
.Op Fl DU
.Op Fl t Ar target-window
d880 23
a902 14
.D1 (alias: Ic rotatew )
Rotate the positions of the panes within a window, either upward (numerically
lower) with
.Fl U
or downward (numerically higher).
.It Xo Ic save-buffer
.Op Fl a
.Op Fl b Ar buffer-index
.Op Fl t Ar target-session
.Ar path
.Xc
.D1 (alias: Ic saveb )
Save the contents of the specified paste buffer to
.Ar path .
d904 42
a945 4
.Fl a
option appends to rather than overwriting the file.
.It Xo Ic scroll-mode
.Op Fl u
d947 1
d949 17
a965 9
Enter scroll mode.
The
.Fl u
has the same meaning as in the
.Ic copy-mode
command.
.It Xo Ic select-layout
.Op Fl t Ar target-window
.Op Ar layout-name
d967 11
a977 2
.D1 (alias: selectl )
Choose a specific layout for a window.
d979 44
a1022 44
.Ar layout-name
is not given, the last layout used (if any) is reapplied.
.It Ic select-pane Op Fl t Ar target-pane
.D1 (alias: Ic selectp )
Make pane
.Ar target-pane
the active pane in window
.Ar target-window .
.It Ic select-prompt Op Fl t Ar target-client
Open a prompt inside
.Ar target-client
allowing a window index to be entered interactively.
.It Ic select-window Op Fl t Ar target-window
.D1 (alias: Ic selectw )
Select the window at
.Ar target-window .
.It Xo Ic send-keys
.Op Fl t Ar target-window
.Ar key Ar ...
.Xc
.D1 (alias: Ic send )
Send a key or keys to a window.
Each argument
.Ar key
is the name of the key (such as
.Ql C-a
or
.Ql npage
) to send; if the string is not recognised as a key, it is sent as a series of
characters.
All arguments are sent sequentially from first to last.
.It Ic send-prefix Op Fl t Ar target-window
Send the prefix key to a window as if it was pressed.
.It Ic server-info
.D1 (alias: Ic info )
Show server information and terminal details.
.It Xo Ic set-buffer
.Op Fl b Ar buffer-index
.Op Fl t Ar target-session
.Ar data
.Xc
.D1 (alias: Ic setb )
Set the contents of the specified buffer to
.Ar data .
a1311 15
.It Xo Ic set-password
.Op Fl c
.Ar password
.Xc
.D1 (alias: Ic pass )
Set the server password.
If the
.Fl c
option is given, a pre-encrypted password may be specified.
By default, the password is blank, thus any entered password will be accepted
when unlocking the server (see the
.Ic lock-server
command).
To prevent variable expansion when an encrypted password is read from a
configuration file, enclose it in single quotes (').
d1466 210
a1675 4
.Xr xterm 1 -style
function key sequences; these have a number included to indicate modifiers such
as Shift, Alt or Ctrl.
.El
d1682 23
a1704 3
.It Xo Ic show-options
.Op Fl g
.Op Fl t Ar target-session
d1706 3
a1708 114
.D1 (alias: Ic show )
Show the session options for
.Ar target session ,
or the global session options with
.Fl g .
.It Xo Ic show-window-options
.Op Fl g
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic showw )
List the window options for
.Ar target-window ,
or the global window options if
.Fl g
is used.
.It Ic source-file Ar path
.D1 (alias: Ic source )
Execute commands from
.Ar path .
.It Xo Ic split-window
.Op Fl dhv
.Oo Fl l
.Ar size |
.Fl p Ar percentage Oc
.Op Fl t Ar target-window
.Op Ar command
.Xc
.D1 (alias: splitw )
Creates a new pane by splitting the active pane:
.Fl h
does a horizontal split and
.Fl v
a vertical split; if neither is specified,
.Fl v
is assumed.
The
.Fl l
and
.Fl p
options specify the size of the new window in lines (for vertical split) or in
cells (for horizontal split), or as a percentage, respectively.
All other options have the same meaning as in the
.Ic new-window
command.
.It Ic start-server
.D1 (alias: Ic start )
Start the
.Nm
server, if not already running, without creating any sessions.
.It Xo Ic suspend-client
.Op Fl c Ar target-client
.Xc
.D1 (alias: Ic suspendc )
Suspend a client by sending
.Dv SIGTSTP
(tty stop).
.It Xo Ic swap-pane
.Op Fl dDU
.Op Fl s Ar src-pane
.Op Fl t Ar dst-pane
.Xc
.D1 (alias: Ic swapp )
Swap two panes.
If
.Fl U
is used and no source pane is specified with
.Fl s ,
.Ar dst-pane
is swapped with the previous pane (before it numerically);
.Fl D
swaps with the next pane (after it numerically).
.It Xo Ic swap-window
.Op Fl d
.Op Fl s Ar src-window
.Op Fl t Ar dst-window
.Xc
.D1 (alias: Ic swapw )
This is similar to
.Ic link-window ,
except the source and destination windows are swapped.
It is an error if no window exists at
.Ar src-window .
.It Xo Ic switch-client
.Op Fl c Ar target-client
.Op Fl t Ar target-session
.Xc
.D1 (alias: Ic switchc )
Switch the current session for client
.Ar target-client
to
.Ar target-session .
.It Xo Ic unbind-key
.Op Fl cn
.Op Fl t Ar key-table
.Ar key
.Xc
.D1 (alias: Ic unbind )
Unbind the command bound to
.Ar key .
Without
.Fl t
the primary key bindings are modified; in this case, if
.Fl n
is specified, the command bound to
.Ar key
without a prefix (if any) is removed.
.Pp
If
.Fl t
is present,
.Ar key
in
.Ar key-table
is unbound: the binding for command mode with
d1710 7
a1716 19
or for normal mode without.
.It Xo Ic unlink-window
.Op Fl k
.Op Fl t Ar target-window
.Xc
.D1 (alias: Ic unlinkw )
Unlink
.Ar target-window .
Unless
.Fl k
is given, a window may be unlinked only if it is linked to multiple sessions -
windows may not be linked to no sessions;
if
.Fl k
is specified and the window is linked to only one session, it is unlinked and
destroyed.
.It Ic up-pane Op Fl t Ar target-pane
.D1 (alias: Ic upp )
Move up a pane.
d1727 86
@


1.55
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.54 2009/08/03 14:10:54 nicm Exp $
d713 1
a713 3
.It Xo Ic choose-session
.Op Fl t Ar target-window
.Xc
d718 1
a718 3
.It Xo Ic choose-window
.Op Fl t Ar target-window
.Xc
d723 1
a723 3
.It Xo Ic clear-history
.Op Fl t Ar target-pane
.Xc
d726 1
a726 3
.It Xo Ic clock-mode
.Op Fl t Ar target-window
.Xc
d774 1
a774 3
.It Xo Ic detach-client
.Op Fl t Ar target-client
.Xc
d787 1
a787 3
.It Xo Ic down-pane
.Op Fl t Ar target-pane
.Xc
d804 1
a804 3
.It Xo Ic has-session
.Op Fl t Ar target-session
.Xc
d808 1
a808 4
.It Xo Ic if-shell
.Ar shell-command
.Ar command
.Xc
d815 1
a815 3
.It Xo Ic kill-pane
.Op Fl t Ar target-pane
.Xc
d819 1
a819 2
.It Xo Ic kill-server
.Xc
d823 1
a823 3
.It Xo Ic kill-session
.Op Fl t Ar target-session
.Xc
d826 1
a826 3
.It Xo Ic kill-window
.Op Fl t Ar target-window
.Xc
d831 1
a831 3
.It Xo Ic last-window
.Op Fl t Ar target-session
.Xc
d860 1
a860 3
.It Xo Ic list-buffers
.Op Fl t Ar target-session
.Xc
d863 1
a863 2
.It Xo Ic list-clients
.Xc
d866 1
a866 2
.It Xo Ic list-commands
.Xc
d870 1
a870 3
.It Xo Ic list-keys
.Op Fl t Ar key-table
.Xc
d894 1
a894 2
.It Xo Ic list-sessions
.Xc
d897 1
a897 3
.It Xo Ic list-windows
.Op Fl t Ar target-session
.Xc
d909 1
a909 2
.It Xo Ic lock-server
.Xc
d973 1
a973 3
.It Xo Ic next-layout
.Op Fl t Ar target-window
.Xc
d1009 1
a1009 3
.It Xo Ic refresh-client
.Op Fl t Ar target-client
.Xc
d1102 1
a1102 3
.It Xo Ic select-pane
.Op Fl t Ar target-pane
.Xc
d1108 1
a1108 3
.It Xo Ic select-prompt
.Op Fl t Ar target-client
.Xc
d1112 1
a1112 3
.It Xo Ic select-window
.Op Fl t Ar target-window
.Xc
d1131 1
a1131 3
.It Xo Ic send-prefix
.Op Fl t Ar target-window
.Xc
d1133 1
a1133 2
.It Xo Ic server-info
.Xc
d1162 1
a1162 1
.Op Ic any | Ic none | Ic current
d1264 1
a1264 1
.Op Ic on | Ic off
d1270 1
a1270 1
.Op Ic on | Ic off
d1279 1
a1279 1
.Op Ic on | Ic off
d1295 1
a1295 1
.Op Ic left | Ic centre | Ic right
d1300 1
a1300 1
.Op Ic vi | Ic emacs
d1362 1
a1362 1
.Op Ic on | Ic off
d1409 1
a1409 1
.Op Ic on | Ic off
d1416 1
a1416 1
.Op Ic on | Ic off
d1424 1
a1424 1
.Op Ic on | Ic off
d1464 2
a1465 1
.Bl -tag -width Ds
d1467 1
a1467 1
.Op Ic on | Ic off
d1478 1
d1480 1
a1480 1
.Op Ic on | Ic off
d1497 1
d1500 1
d1502 1
a1502 1
.Op Ic 12 | Ic 24
d1505 1
d1515 1
d1523 1
d1526 1
d1529 1
d1532 1
d1534 1
a1534 1
.Op Ic vi | Ic emacs
d1538 1
d1540 1
a1540 1
.Op Ic on | Ic off
d1547 1
d1549 1
a1549 1
.Op Ic on | Ic off
d1553 2
a1554 2
.It Xo Ic monitor-content Ar match-string
.Xc
d1561 1
d1563 1
a1563 1
.Op Ic on | Ic off
d1570 1
d1572 1
a1572 1
.Op Ic on | Ic off
d1577 1
d1580 1
d1583 1
d1586 1
d1589 1
d1592 1
d1595 1
d1597 1
a1597 1
.Op Ic on | Ic off
d1631 1
a1631 3
.It Xo Ic source-file
.Ar path
.Xc
d1660 1
a1660 2
.It Xo Ic start-server
.Xc
d1666 1
a1666 1
.Op Fl c target-client
d1747 1
a1747 3
.It Xo Ic up-pane
.Op Fl t Ar target-pane
.Xc
@


1.54
log
@Add a terminal-overrides session option allowing individual terminfo(5) entries
to be overridden. The 88col/256col checks are now moved into the default
setting and out of the code.

Also remove a couple of old workarounds for xterm and rxvt which are no longer
necessary (tmux can emulate them if missing).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.53 2009/07/30 16:59:24 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 30 2009 $
d1421 1
a1421 3
.It Xo Ic terminal-overrides
.Ar string
.Xc
d1441 1
a1441 1
for the 
@


1.53
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.52 2009/07/30 13:45:56 nicm Exp $
d1421 38
@


1.52
log
@Merge pane number into the target specification for pane commands. Instead of
using -p index, a target pane is now addressed with the normal -t window form
but suffixed with a period and a pane index, for example :0.2 or
mysess:mywin.1. An unadorned number such as -t 1 is tried as a pane index in
the current window, if that fails the same rules are followed as for a target
window and the current pane in that window used.

As a side-effect this now means that swap-pane can swap panes between different
windows.

Note that this changes the syntax of the break-pane, clear-history, kill-pane,
resize-pane, select-pane and swap-pane commands.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.51 2009/07/30 13:31:22 jmc Exp $
d1678 2
a1679 1
.Ar dst-pane is swapped with the previous pane (before it numerically);
@


1.51
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.50 2009/07/30 07:04:50 nicm Exp $
d537 1
d539 2
a540 2
.Ar target-window .
These specify the client, session or window which a command should affect.
d602 13
d704 1
a704 2
.Op Fl p Ar pane-index
.Op Fl t Ar target-window
d707 3
a709 2
Break the current pane off from its containing window to make it the only pane
in a new window.
d728 1
a728 2
.Op Fl p Ar pane-index
.Op Fl t Ar target-window
d798 1
a798 2
.Op Fl p Ar pane-index
.Op Fl t Ar target-window
d833 1
a833 2
.Op Fl p Ar pane-index
.Op Fl t Ar target-window
d1072 1
a1072 2
.Op Fl p Ar pane-index
.Op Fl t Ar target-window
d1143 1
a1143 2
.Op Fl p Ar pane-index
.Op Fl t Ar target-window
d1147 1
a1147 1
.Ar pane-index
d1309 3
a1311 5
Repeat is enabled for the default keys of the
.Ic resize-pane-up
and
.Ic resize-pane-down
commands.
d1669 2
a1670 3
.Op Fl p Ar src-index
.Op Fl t Ar target-window
.Op Fl q Ar dst-index
d1673 1
a1673 1
Swap two panes within a window.
d1676 3
a1678 1
is used, the pane is swapped with the pane above (before it numerically);
d1680 1
a1680 3
swaps with the pane below (the next numerically); or
.Ar dst-index
may be give to swap with a specific pane.
d1742 1
a1742 2
.Op Fl p Ar pane-index
.Op Fl t Ar target-window
@


1.50
log
@Add a mode-mouse option to prevent tmux taking over the mouse in choice or copy
modes.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.49 2009/07/28 17:05:10 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 28 2009 $
d1537 2
a1538 1
Mouse state in modes. If on,
@


1.49
log
@Final pieces of mode key rebinding: bind-key and unbind-key now accept a -t
argument to modify a table.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.48 2009/07/28 07:03:32 nicm Exp $
d1532 1
a1532 2
Use vi or emacs-style
key bindings in scroll and copy modes.
d1534 7
@


1.48
log
@Next step towards customisable mode keys: build each default table of keys into
a named tree on start and use that for lookups. Also add command to string
translation tables and modify list-keys to show the the mode key bindings (new
-t argument).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.47 2009/07/28 06:48:44 nicm Exp $
d355 4
a358 1
command.
d643 2
a644 1
.Op Fl nr
d659 5
a663 1
If
d675 13
d890 1
a890 1
.Op Ar Fl t Ar key-table
d1689 2
a1690 1
.Op Fl n
d1696 3
a1698 1
If
d1703 10
@


1.47
log
@If select-layout is not given an argument, repply the last layout used in the
window, if any.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.46 2009/07/27 12:11:11 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 27 2009 $
d334 1
a334 1
.It Li "Delete to end of line" Ta "D or C" Ta "C-k"
d338 19
d869 1
d873 4
d881 13
@


1.46
log
@Add a key to delete to end of line at the prompt (^K in emacs mode, C/D in vi).

From Kalle Olavi Niemitalo.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.45 2009/07/24 14:52:47 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 24 2009 $
d1067 1
a1067 1
.Ar layout-name
d1071 3
@


1.45
log
@Permit commands to be bound to key presses without the prefix key first. The
new -n flag to bind-key and unbind-key sets or removes these bindings, and
list-key shows them in []s.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.44 2009/07/24 14:50:24 sthen Exp $
d334 1
@


1.44
log
@up-pane and down-pane no longer auto-repeat; update the description of
repeat-time accordingly. ok nicm@@

if you prefer old behaviour;

bind -r Up up-pane
bind -r Down down-pane
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.43 2009/07/22 21:23:29 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 22 2009 $
d620 1
a620 1
.Op Fl r
d635 7
d852 4
d1627 1
d1633 5
@


1.43
log
@Tidy the target parsing code a bit and correct the behaviour so that as before
a string with no colon as a target window is first looked up as a window then
as a session, noted by Iain Morgan.

Also attempt to clarify the description of the target specification in the man
page.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.42 2009/07/20 15:51:55 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 20 2009 $
d1228 1
a1228 3
.Ic up-pane ,
.Ic down-pane ,
.Ic resize-pane-up ,
@


1.42
log
@Tweak unbind-key language very slightly.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.41 2009/07/20 14:32:09 nicm Exp $
d547 1
a547 1
produce an error
d553 5
a557 2
.Em session Ns \&: Ns Em window ,
where
d559 2
a560 1
is a window index, for example mysession:1, or a window name,
d562 9
a570 9
pattern, or prefix, such as mysession:mywin[0-3].
If the latter, the window is looked up in a similar fashion to session name
searches described above.
The session is in the same form as for
.Ar target-session .
.Em session ,
.Em index
or both may be omitted.
If
d572 1
a572 5
is omitted, the same rules as for
.Ar target-session
are followed; if
.Em window
is not present, the current window for the given session is used.
d575 2
a576 2
first attempts to parse it as window index; if that fails, an attempt is made
to match a session or client name.
@


1.41
log
@Add a status-justify option to allow the window list in the status line to be
positioned at the left, centre, or right.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.40 2009/07/20 09:15:18 nicm Exp $
d1621 1
a1621 1
Unbind the key bound to
@


1.40
log
@New options, window-status-current-{fg,bg,attr}, to set the fg, bg and
attributes with which the current window is shown in the status line. From
Johan Friis, thanks.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.39 2009/07/19 14:07:47 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 19 2009 $
d1265 5
@


1.39
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.38 2009/07/19 13:21:40 nicm Exp $
d1492 6
@


1.38
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.37 2009/07/18 14:59:25 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 18 2009 $
d990 1
a990 1
.Op Fl DLUR
d1003 1
a1003 1
.Fl R.
d1342 1
a1342 1
for with the
d1359 1
a1359 1
for with the
@


1.37
log
@Add three new session options: visual-activity, visual-bell, visual-content. If
these are enabled (and the monitor-activity, bell-actio and monitor-content
options are configurated appropriately), when activity, a bell, or content is
detected, a message is shown.

Also tidy up the bell/activity/content code in server.c slightly and fix a
couple of errors.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.36 2009/07/17 20:37:03 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 17 2009 $
d396 5
a400 7
.Pp
Panes are numbered beginning from zero; in horizontal layouts zero is the
leftmost pane and in vertical the topmost.
.Pp
Panes may be arranged using several layouts.
The layout may be cycled with the
.Ic next-layout
d402 5
a406 1
.Ql C-space
d415 13
a427 1
commands may be used to swap panes without changing the window layout.
a430 2
.It Ic active-only
Only the active pane is shown \(en all other panes are hidden.
a448 5
.It Ic manual
Manual layout splits windows vertically (running across); only with this layout
may panes be resized using the
.Ic resize-pane
command.
d990 1
a990 1
.Op Fl DU
d998 6
a1003 2
(the default) or downward with
.Fl D .
d1006 1
a1006 1
is given in lines (the default is 1).
d1534 1
a1534 1
.Op Fl d
d1536 1
a1536 1
.Ar lines |
d1542 7
a1548 1
Creates a new window by splitting it vertically.
d1553 2
a1554 2
options specify the size of the new window in lines, or as a percentage,
respectively.
a1557 14
.Pp
A few notes with regard to panes:
.Bl -enum -compact
.It
If attempting to split a window with less than eight lines, an error will be
shown.
.It
If the window is resized, as many panes are shown as can fit without reducing
them below four lines.
.It
The minimum pane size is four lines (including the separator line).
.It
The panes are indexed from top (0) to bottom, with no numbers skipped.
.El
@


1.36
log
@Make it so using kill-pane to destroy the last pane in a window destroys the
window instead of being an error.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.35 2009/07/17 18:45:08 nicm Exp $
d1327 24
@


1.35
log
@- New command display-message (alias display) to display a message in the
  status line (bound to "i" and displays the current window and time by
  default). The same substitutions are applied as for status-left/right.
- Add support for including the window index (#I), pane index (#P) and window
  name (#W) in the message, and status-left or status-right.
- Bump protocol version.

From Tiago Cunha, thanks!
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.34 2009/07/17 15:03:11 nicm Exp $
d771 1
@


1.34
log
@Tidy up new-session and attach-session and change them to work from inside
tmux, switching the current client to the new or requested session.

Written with Josh Elsasser.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.33 2009/07/17 13:38:03 nicm Exp $
d720 9
d1274 2
d1278 1
@


1.33
log
@If -u is specified or UTF-8 is otherwise detected when the server is started,
enable the utf8 and status-utf8 optons. While here, note in the man page that
the server is started with the first session and exits when none remain.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.32 2009/07/16 22:50:49 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 16 2009 $
d599 5
a603 1
Create a new client in the current terminal and attach it to a session.
@


1.32
log
@Fix arguments to switch-client.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.31 2009/07/15 08:05:56 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 15 2009 $
d39 1
a39 1
A server is created automatically when necessary and holds a number of
d44 2
d128 8
@


1.31
log
@Add a -k flag to unlink-window which makes it behave the same as the old
kill-window - if a window is linked into only one session it unlinked and
destroyed.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.30 2009/07/13 20:14:23 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 13 2009 $
d1544 2
a1545 1
.Op Fl c Ar target-client Fl t Ar target-session
@


1.30
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.29 2009/07/13 17:47:46 nicm Exp $
d1558 1
d1564 8
a1571 2
A window may be unlinked only if it is linked to multiple sessions - windows may
not be linked to no sessions.
@


1.29
log
@Tidy up and improve target (-t) argument parsing:

- move the code back into cmd.c and merge with the existing functions where
  possible;
- accept "-tttyp0" as well as "-t/dev/ttyp0" for clients;
- when looking up session names, try an exact match first, and if that fails
  look for it as an fnmatch pattern and then as the start of a name - if more
  that one session matches an error is given; so if there is one session called
  "mysession", -tmysession, -tmysess, -tmysess* are equivalent but if there
  is also "mysession2", the last two are errors;
- similarly for windows, if the argument is not a valid index or exact window
  name match, try it against the window names as an fnmatch pattern and a
  prefix.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.28 2009/07/12 23:45:03 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 12 2009 $
d507 1
a507 1
for the client attached to 
d521 1
a521 1
When looking for the session name, 
@


1.28
log
@Document the -k flag to new-window.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.27 2009/07/12 16:15:34 nicm Exp $
d503 5
a507 1
file to which the client is connected, for example
d509 2
d518 1
a518 1
command) or the name of a client,
d521 6
a526 1
An
d528 5
a532 7
pattern may be used to match the session name.
If a session is omitted when required,
.Nm tmux
attempts to use the current session; if no current session is available, the
most recently created is chosen.
If no client is specified, the current client is chosen, if possible, or an
error is reported.
d536 8
a543 2
.Em session Ns \&: Ns Em index ,
for example mysession:1.
d554 1
a554 1
.Em index
@


1.27
log
@Add a "back to indentation" key in copy mode to move the cursor to the first
non-whitespace character. ^ with vi and M-m with emacs key bindings. Another
from Kalle Olavi Niemitalo, thanks.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.26 2009/07/12 16:07:56 nicm Exp $
d850 1
a850 1
.Op Fl d
d861 4
a864 1
represents the window to be created.
@


1.26
log
@If it exist, load a system-wide configuration file /etc/tmux.conf before any
user-specified one.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.25 2009/07/11 20:04:19 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 11 2009 $
d309 2
a310 1
.It Li "Start of line" Ta "0 or ^" Ta "C-a"
@


1.25
log
@Add -r to the synopsis of the paste-buffer command, prompted by jmc.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.24 2009/07/11 19:14:56 nicm Exp $
d73 3
a75 1
will look for a config file at
d1554 1
a1554 1
.Bl -tag -width "~/.tmux.confXXX" -compact
d1559 2
@


1.24
log
@When pasting, translate \n into \r. This matches xterm and putty's behaviour,
and makes emacs happy when pasting into some modes. A new -r (raw) flag to
paste-buffer pastes without the translation.

From Kalle Olavi Niemitalo, thanks!
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.23 2009/07/10 19:01:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 10 2009 $
d891 1
a891 1
.Op Fl d
@


1.23
log
@paste-buffer -d was not documented. From Kalle Olavi Niemitalo.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.22 2009/07/10 05:50:54 nicm Exp $
d900 5
@


1.22
log
@Add a default-terminal option to set the starting value of $TERM in new
windows.

This is "screen" by default and must be either that or something closely
related. This does makes it easier to customise it if necessary.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.21 2009/07/10 05:43:01 nicm Exp $
d897 3
@


1.21
log
@Document display-time option which seems to have been missed.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.20 2009/07/09 15:47:49 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 9 2009 $
d1093 12
@


1.20
log
@New command, if-shell (alias if). Executes the tmux command in the second
argument if the shell command in the first succeeds, for example:

       if "[ -e ~/.tmux.conf.alt ]" "source .tmux.conf.alt"

Written by Tiago Cunha, many thanks.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.19 2009/07/08 05:26:45 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 8 2009 $
d1093 4
d1142 1
a1142 1
.It Ic repeat-time Ar number
d1145 1
a1145 1
.Ar number
@


1.19
log
@Just appending -l to $SHELL to create a login shell is wrong: -l is not POSIX,
and some people may use shells which do not support it. Instead, make an empty
default-command option mean a login shell, and fork it with a - in argv[0]
which is the method used by login(1).

Also fix the automatic-rename code to handle this correctly and to strip a
leading - if present.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.18 2009/07/06 19:50:04 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: July 6 2009 $
d714 10
@


1.18
log
@Add a section summarising how options work, make the distinction between window
and session options clearer, and fix the incorrect synopses and descriptions of
show-options and show-window-options.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.17 2009/06/26 22:47:06 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 26 2009 $
d1073 6
a1078 2
The default is
.Dq exec $SHELL -l .
@


1.17
log
@Add missing spaces before some alias closing brackets, otherwise they are
shown in the wrong style.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.16 2009/06/24 22:49:56 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 24 2009 $
d342 32
d1043 1
a1043 1
Set an option.
d1046 1
a1046 7
is specified, the option is set as a global option.
Global options apply to all sessions which don't have the option explicitly
set.
If
.Fl g
is not used, the option applies only to
.Ar target-session .
d1052 1
a1052 1
Possible options are:
d1263 1
a1263 1
Set a window-specific option.
d1272 1
a1272 1
Supported options are:
d1388 1
a1389 1
.Ar option Ar value
d1392 4
a1395 5
Show the currently set options.
If a
.Ar target-session
is specified, the options for that session are shown; otherwise, the global
options are listed.
d1397 1
a1398 1
.Ar option Ar value
d1401 5
a1405 1
List the current options for the given window.
@


1.16
log
@Change find-window and monitor-content to use fnmatch(3). For convenience and
compatibility, *s are implicitly added at the start and end of the pattern.

Also display the line number and the entire line in the results, and lose the
nasty section_string function and the now empty util.c file.

Initially from Tiago Cunha.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.15 2009/06/24 08:13:22 jmc Exp $
d574 1
a574 1
.D1 (alias: Ic breakp)
d598 1
a598 1
.D1 (alias: Ic clearhist)
d620 1
a620 1
.D1 (alias: Ic confirm)
d631 1
a631 1
.D1 (alias: Ic copyb)
d951 1
a951 1
.D1 (alias: selectl)
@


1.15
log
@tweak previous;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.14 2009/06/23 23:26:08 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 23 2009 $
d667 3
a669 1
Search for
d1321 2
@


1.14
log
@Mention LC_ALL, LC_CTYPE.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.13 2009/06/23 22:13:11 nicm Exp $
d199 1
a199 1
.Pa ~/.tmux.conf 
d202 2
a203 2
.Bl -ohang -width Ds
.It Changing the default prefix key:
a209 1
.It Xo
a210 1
.Xc
d216 2
a217 4
.It Xo
Setting other options, such as the default command, or locking after 30 minutes 
of inactivity:
.Xc
d222 2
a223 1
.It Creating new key bindings:
a227 1
.El
@


1.13
log
@Add some common config file examples to the quick start section.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.12 2009/06/04 13:36:25 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: June 4 2009 $
d112 5
a116 2
attempts to guess if the terminal is likely to support UTF-8 by checking
the
d118 1
a118 1
environment variable for the string "UTF-8".
@


1.12
log
@zap trailing whitespace;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.11 2009/06/03 17:04:16 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: June 3 2009 $
d192 37
@


1.11
log
@Do not set the window title by default (make set-titles option default to off),
wiping over the title is rude and annoying. Agreed by several.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.10 2009/06/03 16:54:26 nicm Exp $
d115 1
a115 1
environment variable for the string "UTF-8". 
d808 1
a808 1
.Fl a 
d1137 1
a1137 1
By default, UTF-8 in 
@


1.10
log
@New session option, status-utf8, to control the interpretation of top-bit-set
characters in status-left and status-right (if on, they are treated as UTF-8;
otherwise passed through).
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.9 2009/06/03 15:58:40 nicm Exp $
d1087 1
a1087 1
This option is enabled by default.
@


1.9
log
@Add missing documentation for the -a flag used to move to next/previous window
with alert.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.8 2009/06/03 15:47:14 nicm Exp $
d1136 6
d1156 4
a1159 2
.Xr strftime 3
and character pairs are replaced.
d1165 12
@


1.8
log
@Add a section summarising the status line. There are quite a number of status
line options, it is something many want to configure, and the meaning of some
bits weren't really documented.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.7 2009/06/03 09:29:06 jmc Exp $
d802 1
d807 3
d818 1
d823 3
@


1.7
log
@undo a mistake found by sobrado;
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.6 2009/06/03 06:49:05 jmc Exp $
d362 56
@


1.6
log
@some cleanup; ok nicm
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.5 2009/06/02 23:39:32 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate$
d161 2
a162 2
.Ql C-b
(Ctrl, known as the prefix key,
d165 3
@


1.5
log
@Recent code to try and detect if a terminal supports UTF-8 by printing to it
fails spectacularly on (at least) sparc64, so disable it for now. Thanks to
naddy and Josh Elsasser for help and testing.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.4 2009/06/02 16:46:00 sobrado Exp $
d17 1
a17 1
.Dd April 20, 2009
d22 1
a22 1
.Nd "terminal multiplexer"
d34 1
a34 1
is a terminal multiplexer; it enables a number of terminals to be accessed and
d64 1
a64 1
indicates the terminal supports 88 colours.
d94 1
a94 1
.Em SIGUSR1
d99 1
a99 1
Prevent the server sending various information messages, for example when
d120 1
a120 1
that the UTF-8 is supported.
d130 1
a130 1
is the pid of the server or client process.
d134 2
a135 2
and described in the following sections.
If no command and flags is specified, the
a137 1
.Pp
d140 3
a142 1
To create a new tmux session running
a157 1
$
d162 1
a162 1
(ctrl-b, known as the prefix key)
d164 2
a165 2
.Ql c
key.
d187 1
a187 1
.Ql Q
d194 1
a194 1
(ctrl-b) by default, followed by a command key.
d198 4
a201 2
.Bl -tag -width Ds -compact
.It Ql d
d203 3
a205 3
.It Ql c
Create new window.
.It Ql n
d207 1
a207 1
.It Ql p
d209 1
a209 3
.It Ql l
Move to last (previously selected) window in the current session.
.It Ql t
d211 1
a211 1
.It Ql \&?
d228 1
a228 1
By default, up to 2000 lines are kept, this can be altered with the
d261 2
a262 5
The keys available depend on whether
.Xr emacs 1
or
.Xr vi 1
mode is selected (see the
a332 5
.It Ic manual
Manual layout splits windows vertically (running across); only with this layout
may panes be resized using the
.Ic resize-pane
command.
d334 1
a334 1
Only the active pane is shown - all other panes are hidden.
d341 1
a341 1
spread from left to right in the leftover space at the bottom. 
d353 5
d382 1
a382 1
command); or the name of a client as for
d384 1
a384 1
in this case, the session attached to the client is used.
d411 1
a411 1
When the argument does not contain a colon (:),
d418 1
a418 2
Each command should be separated by spaces and a semicolon
.Eo ( Ql \&  \&; \&  Ec ) ;
a424 1
.Pp
d466 1
a466 1
for ctrl keys, or
d468 1
a468 1
for alt (meta) keys.
d1021 1
a1021 2
Note that
.Xr elinks 1
d1043 1
a1043 4
Use
.Xr vi 1 -
or
.Xr emacs 1 -style
d1132 3
a1134 2
this option is good for full-screen programs which support SIGWINCH and poor for
interactive programs such as shells.
d1184 1
a1184 4
Use
.Xr vi 1 -
or
.Xr emacs 1 -style
d1194 2
a1195 1
Monitor content in the window. When
d1226 1
a1226 1
as shift, meta or ctrl.
d1299 3
a1301 1
Suspend a client by sending SIGTSTP (tty stop).
d1358 1
a1358 1
.Bl -tag -width Ds -compact
d1360 1
a1360 1
default
d1362 1
a1362 1
configuration file
@


1.4
log
@sort options alphabetically.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.3 2009/06/02 15:55:32 pyr Exp $
d112 1
a112 1
attempts to guess if the terminal is likely to support UTF-8 by first checking
d115 2
a116 4
environment variable for the string "UTF-8", and then by - if the terminal
looks suitable - trying to print a UTF-8 character and measuring the cursor
movement.
These are not always successful: the
@


1.3
log
@spawn login shells by default, adapt manpage bits as well.
ok nicm@@
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.2 2009/06/01 23:51:00 nicm Exp $
a77 3
.It Fl q
Prevent the server sending various information messages, for example when
window flags are altered.
d98 3
@


1.2
log
@Update the man page with some recent changes to the code:

- SIGUSR1 recreates the socket;
- guesswork to work out if the terminal supports UTF-8;
- a paste key for the command prompt;
- main-horizontal layout to match main-vertical, and options to configure the
  size of the large pane;
- clear-history command;
- select-layout command.
@
text
@d1 1
a1 1
.\" $OpenBSD: tmux.1,v 1.1 2009/06/01 22:58:49 nicm Exp $
d950 1
a950 1
.Dq exec $SHELL .
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
.\" $OpenBSD$
d95 6
a110 1
Instruct
d112 11
a122 1
that the terminal support UTF-8.
d287 1
d290 2
d349 6
d356 7
a362 2
A large (81 column) pane is shown on the left of the window and the remaining
panes are spread from top to bottom in the leftover space to the right.
d506 6
d849 6
d1178 7
@

