head	1.49;
access;
symbols
	OPENBSD_6_1_BASE:1.49
	OPENBSD_6_0:1.42.0.2
	OPENBSD_6_0_BASE:1.42
	OPENBSD_5_9:1.41.0.2
	OPENBSD_5_9_BASE:1.41
	OPENBSD_5_8:1.34.0.4
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.29.0.4
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.22.0.4
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.2
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.2
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.49
date	2017.02.14.18.13.05;	author nicm;	state Exp;
branches;
next	1.48;
commitid	xvcFJuJjtbCqRtLW;

1.48
date	2017.01.06.13.26.09;	author nicm;	state Exp;
branches;
next	1.47;
commitid	evl2ye09fq1fGW2b;

1.47
date	2016.10.26.11.48.07;	author nicm;	state Exp;
branches;
next	1.46;
commitid	C17WtPt435heal4n;

1.46
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.45;
commitid	pxm6osuE99zELpkU;

1.45
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.44;
commitid	1xIYFpLYkPIXNEvU;

1.44
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.43;
commitid	S3IpyYTkmviA6lfM;

1.43
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.42;
commitid	TaZ3kOtGiWwKofka;

1.42
date	2016.03.05.07.47.52;	author nicm;	state Exp;
branches;
next	1.41;
commitid	Bh9Aw5o9RZosJSbS;

1.41
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.40;
commitid	gsQkQsSyBCSmU9ax;

1.40
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.39;
commitid	uzMkp8Z4FE6WB6s6;

1.39
date	2015.11.14.09.41.06;	author nicm;	state Exp;
branches;
next	1.38;
commitid	FQoND7M2BC89FZoU;

1.38
date	2015.11.12.11.10.50;	author nicm;	state Exp;
branches;
next	1.37;
commitid	zq4e90cLboyOw7qA;

1.37
date	2015.11.10.22.33.47;	author nicm;	state Exp;
branches;
next	1.36;
commitid	VuzDo1fXMgFAALQl;

1.36
date	2015.11.10.22.29.33;	author nicm;	state Exp;
branches;
next	1.35;
commitid	R8AN1Pc1M0Nn7MMc;

1.35
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.34;
commitid	B5GekkO0CdWpFMrz;

1.34
date	2015.06.05.18.06.30;	author nicm;	state Exp;
branches;
next	1.33;
commitid	31HWw6xUnTEvtfY4;

1.33
date	2015.06.05.18.01.12;	author nicm;	state Exp;
branches;
next	1.32;
commitid	38CNdOauYnpJlZqC;

1.32
date	2015.04.27.16.25.57;	author nicm;	state Exp;
branches;
next	1.31;
commitid	0WBWxxZyxaAFVhmn;

1.31
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.30;
commitid	Gq8hgMoG3t1Wy1Zv;

1.30
date	2014.09.01.21.50.18;	author nicm;	state Exp;
branches;
next	1.29;
commitid	yvK8NJvd2XzXhKku;

1.29
date	2014.05.13.07.34.35;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2014.04.24.09.14.43;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2014.02.17.23.07.03;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2014.02.14.13.59.01;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2013.10.10.12.26.35;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2013.10.10.12.00.21;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2012.05.21.18.27.42;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2011.10.23.08.34.01;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2011.10.23.00.49.25;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2011.05.18.08.07.44;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.30.23.16.18;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2010.12.20.00.03.55;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.24.20.11.59;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.28.22.10.42;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2010.02.22.20.33.12;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.26.22.32.00;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.26.22.28.24;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.26.21.25.57;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.07.18.50.45;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.30.17.46.12;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.09.09.54.56;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.49
log
@Make source-file look for files relative to the client working directory
(like load-buffer and save-buffer), from Chris Pickel. Also break the
where-is-this-file code out into its own function for loadb and saveb.
@
text
@/* $OpenBSD: cmd-load-buffer.c,v 1.48 2017/01/06 13:26:09 nicm Exp $ */

/*
 * Copyright (c) 2009 Tiago Cunha <me@@tiagocunha.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Loads a paste buffer from a file.
 */

static enum cmd_retval	cmd_load_buffer_exec(struct cmd *, struct cmdq_item *);

static void		cmd_load_buffer_callback(struct client *, int, void *);

const struct cmd_entry cmd_load_buffer_entry = {
	.name = "load-buffer",
	.alias = "loadb",

	.args = { "b:", 1, 1 },
	.usage = CMD_BUFFER_USAGE " path",

	.flags = CMD_AFTERHOOK,
	.exec = cmd_load_buffer_exec
};

struct cmd_load_buffer_data {
	struct cmdq_item	*item;
	char			*bufname;
};

static enum cmd_retval
cmd_load_buffer_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args			*args = self->args;
	struct cmd_load_buffer_data	*cdata;
	struct client			*c = item->client;
	FILE				*f;
	const char			*path, *bufname;
	char				*pdata, *new_pdata, *cause, *file;
	size_t				 psize;
	int				 ch, error;

	bufname = NULL;
	if (args_has(args, 'b'))
		bufname = args_get(args, 'b');

	path = args->argv[0];
	if (strcmp(path, "-") == 0) {
		cdata = xcalloc(1, sizeof *cdata);
		cdata->item = item;

		if (bufname != NULL)
			cdata->bufname = xstrdup(bufname);

		error = server_set_stdin_callback(c, cmd_load_buffer_callback,
		    cdata, &cause);
		if (error != 0) {
			cmdq_error(item, "%s: %s", path, cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
		return (CMD_RETURN_WAIT);
	}

	file = server_client_get_path(c, path);
	f = fopen(file, "rb");
	if (f == NULL) {
		cmdq_error(item, "%s: %s", file, strerror(errno));
		free(file);
		return (CMD_RETURN_ERROR);
	}

	pdata = NULL;
	psize = 0;
	while ((ch = getc(f)) != EOF) {
		/* Do not let the server die due to memory exhaustion. */
		if ((new_pdata = realloc(pdata, psize + 2)) == NULL) {
			cmdq_error(item, "realloc error: %s", strerror(errno));
			goto error;
		}
		pdata = new_pdata;
		pdata[psize++] = ch;
	}
	if (ferror(f)) {
		cmdq_error(item, "%s: read error", file);
		goto error;
	}
	if (pdata != NULL)
		pdata[psize] = '\0';

	fclose(f);
	free(file);

	if (paste_set(pdata, psize, bufname, &cause) != 0) {
		cmdq_error(item, "%s", cause);
		free(pdata);
		free(cause);
		return (CMD_RETURN_ERROR);
	}

	return (CMD_RETURN_NORMAL);

error:
	free(pdata);
	if (f != NULL)
		fclose(f);
	return (CMD_RETURN_ERROR);
}

static void
cmd_load_buffer_callback(struct client *c, int closed, void *data)
{
	struct cmd_load_buffer_data	*cdata = data;
	char				*pdata, *cause, *saved;
	size_t				 psize;

	if (!closed)
		return;
	c->stdin_callback = NULL;

	server_client_unref(c);
	if (c->flags & CLIENT_DEAD)
		goto out;

	psize = EVBUFFER_LENGTH(c->stdin_data);
	if (psize == 0 || (pdata = malloc(psize + 1)) == NULL)
		goto out;

	memcpy(pdata, EVBUFFER_DATA(c->stdin_data), psize);
	pdata[psize] = '\0';
	evbuffer_drain(c->stdin_data, psize);

	if (paste_set(pdata, psize, cdata->bufname, &cause) != 0) {
		/* No context so can't use server_client_msg_error. */
		if (~c->flags & CLIENT_UTF8) {
			saved = cause;
			cause = utf8_sanitize(saved);
			free(saved);
		}
		evbuffer_add_printf(c->stderr_data, "%s", cause);
		server_client_push_stderr(c);
		free(pdata);
		free(cause);
	}
out:
	cdata->item->flags &= ~CMDQ_WAITING;

	free(cdata->bufname);
	free(cdata);
}
@


1.48
log
@Nits found with clang.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.47 2016/10/26 11:48:07 nicm Exp $ */
a59 1
	struct session  		*s;
d61 1
a61 1
	const char			*path, *bufname, *cwd;
a62 1
	char				 resolved[PATH_MAX];
d88 2
a89 18
	if (c != NULL && c->session == NULL && c->cwd != NULL)
		cwd = c->cwd;
	else if (c != NULL && (s = c->session) != NULL && s->cwd != NULL)
		cwd = s->cwd;
	else
		cwd = ".";

	if (*path == '/')
		file = xstrdup(path);
	else
		xasprintf(&file, "%s/%s", cwd, path);
	if (realpath(file, resolved) == NULL &&
	    strlcpy(resolved, file, sizeof resolved) >= sizeof resolved) {
		cmdq_error(item, "%s: %s", file, strerror(ENAMETOOLONG));
		return (CMD_RETURN_ERROR);
	}
	f = fopen(resolved, "rb");
	free(file);
d91 2
a92 1
		cmdq_error(item, "%s: %s", resolved, strerror(errno));
d108 1
a108 1
		cmdq_error(item, "%s: read error", resolved);
d115 1
@


1.47
log
@Buffer name can be NULL, check before strdup().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.46 2016/10/16 19:04:05 nicm Exp $ */
d92 1
a92 1
	else if ((s = c->session) != NULL && s->cwd != NULL)
@


1.46
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.45 2016/10/16 17:55:14 nicm Exp $ */
d76 3
a78 1
		cdata->bufname = xstrdup(bufname);
@


1.45
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.44 2016/10/14 22:14:22 nicm Exp $ */
d34 1
a34 1
static enum cmd_retval	 cmd_load_buffer_exec(struct cmd *, struct cmd_q *);
d36 1
a36 1
static void		 cmd_load_buffer_callback(struct client *, int, void *);
d50 2
a51 2
	struct cmd_q	*cmdq;
	char		*bufname;
d55 1
a55 1
cmd_load_buffer_exec(struct cmd *self, struct cmd_q *cmdq)
d59 1
a59 1
	struct client			*c = cmdq->client;
d75 1
a75 1
		cdata->cmdq = cmdq;
d81 1
a81 1
			cmdq_error(cmdq, "%s: %s", path, cause);
d101 1
a101 1
		cmdq_error(cmdq, "%s: %s", file, strerror(ENAMETOOLONG));
d107 1
a107 1
		cmdq_error(cmdq, "%s: %s", resolved, strerror(errno));
d116 1
a116 1
			cmdq_error(cmdq, "realloc error: %s", strerror(errno));
d123 1
a123 1
		cmdq_error(cmdq, "%s: read error", resolved);
d132 1
a132 1
		cmdq_error(cmdq, "%s", cause);
d183 1
a183 1
	cdata->cmdq->flags &= ~CMD_Q_WAITING;
@


1.44
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.43 2016/10/10 21:51:39 nicm Exp $ */
d49 5
d57 10
a66 8
	struct args	*args = self->args;
	struct client	*c = cmdq->client;
	struct session  *s;
	FILE		*f;
	const char	*path, *bufname, *cwd;
	char		*pdata, *new_pdata, *cause, *file, resolved[PATH_MAX];
	size_t		 psize;
	int		 ch, error;
d74 4
d79 1
a79 1
		    (void *)bufname, &cause);
d150 3
a152 3
	const char	*bufname = data;
	char		*pdata, *cause, *saved;
	size_t		 psize;
d160 1
a160 1
		return;
d170 1
a170 1
	if (paste_set(pdata, psize, bufname, &cause) != 0) {
d182 2
d185 2
a186 2
out:
	cmdq_continue(c->cmdq);
@


1.43
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.42 2016/03/05 07:47:52 nicm Exp $ */
d45 1
a45 1
	.flags = 0,
@


1.42
log
@Do not use c->cwd or s->cwd if it is NULL, found by Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.41 2015/12/13 21:53:57 nicm Exp $ */
d34 3
a36 2
enum cmd_retval	 cmd_load_buffer_exec(struct cmd *, struct cmd_q *);
void		 cmd_load_buffer_callback(struct client *, int, void *);
d49 1
a49 1
enum cmd_retval
d136 1
a136 1
void
@


1.41
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.40 2015/12/13 14:32:38 nicm Exp $ */
d76 1
a76 1
	if (c != NULL && c->session == NULL)
d78 1
a78 1
	else if ((s = c->session) != NULL)
@


1.40
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.39 2015/11/14 09:41:06 nicm Exp $ */
d38 8
a45 5
	"load-buffer", "loadb",
	"b:", 1, 1,
	CMD_BUFFER_USAGE " path",
	0,
	cmd_load_buffer_exec
@


1.39
log
@Push stdout and stderr to clients more aggressively, and add an event to
continue if the send fails.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.38 2015/11/12 11:10:50 nicm Exp $ */
d75 1
a75 1
	else if ((s = cmd_find_current(cmdq)) != NULL)
@


1.38
log
@If we know the terminal outside tmux is not UTF-8, replace UTF-8 in
error messages and whatnot with underscores the same as we do when we
draw UTF-8 characters as part of the screen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.37 2015/11/10 22:33:47 nicm Exp $ */
d163 1
a163 1
		server_push_stderr(c);
@


1.37
log
@If realpath() fails just try the original path.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.36 2015/11/10 22:29:33 nicm Exp $ */
d136 1
a136 1
	char		*pdata, *cause;
d157 5
@


1.36
log
@Handle absolute paths properly, and don't use resolved path in
realpath() fails.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.35 2015/10/31 08:13:58 nicm Exp $ */
d84 3
a86 2
	if (realpath(file, resolved) == NULL) {
		cmdq_error(cmdq, "%s: %s", file, strerror(errno));
@


1.35
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.34 2015/06/05 18:06:30 nicm Exp $ */
d80 2
a81 3
	xasprintf(&file, "%s/%s", cwd, path);
	if (realpath(file, resolved) == NULL)
		f = NULL;
d83 6
a88 1
		f = fopen(resolved, "rb");
@


1.34
log
@Change deref to the more sensible unref, and add a couple I missed before.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.33 2015/06/05 18:01:12 nicm Exp $ */
d52 2
a53 2
	const char	*path, *bufname;
	char		*pdata, *new_pdata, *cause;
d55 1
a55 1
	int		 ch, error, cwd, fd;
d78 1
a78 1
		cwd = AT_FDCWD;
d80 8
a87 5
	if ((fd = openat(cwd, path, O_RDONLY)) == -1 ||
	    (f = fdopen(fd, "rb")) == NULL) {
		if (fd != -1)
			close(fd);
		cmdq_error(cmdq, "%s: %s", path, strerror(errno));
d103 1
a103 1
		cmdq_error(cmdq, "%s: read error", path);
@


1.33
log
@Instead of putting dead clients on a list and checking it every loop,
use event_once to queue a callback to deal with them. Also dead clients
with references would never actually be freed because the wrap-up
functions (the callback for stdin, or status_prompt_clear) would never
be called. So call them in server_client_lost.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.32 2015/04/27 16:25:57 nicm Exp $ */
d135 1
a135 1
	server_client_deref(c);
@


1.32
log
@Rewrite of the target resolution internals to be simpler and more
consistent but with much less duplication, but keeping the same internal
API. Also adds more readable aliases for some of the special tokens used
in targets (eg "{start}" instead of "^"). Some behaviours may have
changed, for example prefix matches now happen before fnmatch.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.31 2014/10/20 22:29:25 nicm Exp $ */
d135 1
a135 1
	c->references--;
@


1.31
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.30 2014/09/01 21:50:18 nicm Exp $ */
d75 1
a75 1
	else if ((s = cmd_current_session(cmdq, 0)) != NULL)
@


1.30
log
@Various minor style and spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.29 2014/05/13 07:34:35 nicm Exp $ */
a41 1
	NULL,
@


1.29
log
@Add support for named buffers. If you don't name a buffer, things work
much as before - buffers are automatically named "buffer0000",
"buffer0001" and so on and ordered as a stack. Buffers can be named
explicitly when creating ("loadb -b foo" etc) or renamed ("setb -b
buffer0000 -n foo"). If buffers are named explicitly, they are not
deleted when buffer-limit is reached. Diff from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.28 2014/04/24 09:14:43 nicm Exp $ */
d65 1
a65 1
		    (void*)bufname, &cause);
@


1.28
log
@There is no longer a need for a paste_stack struct or for global_buffers
to be global. Move to paste.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.27 2014/02/17 23:07:03 nicm Exp $ */
d53 1
a53 1
	const char	*path;
d56 1
a56 2
	u_int		 limit;
	int		 ch, error, buffer, *buffer_ptr, cwd, fd;
d58 3
a60 10
	if (!args_has(args, 'b'))
		buffer = -1;
	else {
		buffer = args_strtonum(args, 'b', 0, INT_MAX, &cause);
		if (cause != NULL) {
			cmdq_error(cmdq, "buffer %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
	}
a63 3
		buffer_ptr = xmalloc(sizeof *buffer_ptr);
		*buffer_ptr = buffer;

d65 1
a65 1
		    buffer_ptr, &cause);
d109 2
a110 7
	limit = options_get_number(&global_options, "buffer-limit");
	if (buffer == -1) {
		paste_add(pdata, psize, limit);
		return (CMD_RETURN_NORMAL);
	}
	if (paste_replace(buffer, pdata, psize) != 0) {
		cmdq_error(cmdq, "no buffer %d", buffer);
d112 1
d128 3
a130 4
	int	*buffer = data;
	char	*pdata;
	size_t	 psize;
	u_int	 limit;
d141 1
a141 2
	if (psize == 0 || (pdata = malloc(psize + 1)) == NULL) {
		free(data);
d143 1
a143 1
	}
d148 1
a148 4
	limit = options_get_number(&global_options, "buffer-limit");
	if (*buffer == -1)
		paste_add(pdata, psize, limit);
	else if (paste_replace(*buffer, pdata, psize) != 0) {
d150 1
a150 1
		evbuffer_add_printf(c->stderr_data, "no buffer %d\n", *buffer);
d153 1
a154 2

	free(data);
@


1.27
log
@Fix memory leaks with paste_replace, based on changes from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.26 2014/02/14 13:59:01 nicm Exp $ */
d122 1
a122 1
		paste_add(&global_buffers, pdata, psize, limit);
d125 1
a125 1
	if (paste_replace(&global_buffers, buffer, pdata, psize) != 0) {
d167 2
a168 2
		paste_add(&global_buffers, pdata, psize, limit);
	else if (paste_replace(&global_buffers, *buffer, pdata, psize) != 0) {
@


1.26
log
@Style nit - no space between function name and bracket.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.25 2013/10/10 12:26:35 nicm Exp $ */
d172 1
@


1.25
log
@Alter how tmux handles the working directory to internally use file
descriptors rather than strings.

- Each session still has a current working directory.

- New sessions still get their working directory from the client that
  created them or its attached session if any.

- New windows are created by default in the session working directory.

- The -c flag to new, neww, splitw allows the working directory to be
  overridden.

- The -c flag to attach let's the session working directory be changed.

- The default-path option has been removed.

To get the equivalent to default-path '.', do:

        bind c neww -c $PWD

To get the equivalent of default-path '~', do:

        bind c neww -c ~

This also changes the client identify protocol to be a set of messages rather
than one as well as some other changes that should make it easier to make
backwards-compatible protocol changes in future.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.24 2013/10/10 12:00:21 nicm Exp $ */
d75 1
a75 1
		error = server_set_stdin_callback (c, cmd_load_buffer_callback,
@


1.24
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.23 2013/03/24 09:54:10 nicm Exp $ */
d22 1
d53 1
a53 1
	const char	*path, *newpath, *wd;
d57 1
a57 1
	int		 ch, error, buffer, *buffer_ptr;
d85 11
a95 14
	if (c != NULL)
		wd = c->cwd;
	else if ((s = cmd_current_session(cmdq, 0)) != NULL) {
		wd = options_get_string(&s->options, "default-path");
		if (*wd == '\0')
			wd = s->cwd;
	} else
		wd = NULL;
	if (wd != NULL && *wd != '\0') {
		newpath = get_full_path(wd, path);
		if (newpath != NULL)
			path = newpath;
	}
	if ((f = fopen(path, "rb")) == NULL) {
@


1.23
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.22 2012/07/11 07:10:15 nicm Exp $ */
a40 1
	NULL,
@


1.22
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.21 2012/07/10 11:53:01 nicm Exp $ */
d33 1
a33 1
enum cmd_retval	 cmd_load_buffer_exec(struct cmd *, struct cmd_ctx *);
d47 1
a47 1
cmd_load_buffer_exec(struct cmd *self, struct cmd_ctx *ctx)
d50 1
a50 1
	struct client	*c = ctx->cmdclient;
d64 1
a64 1
			ctx->error(ctx, "buffer %s", cause);
d78 1
a78 1
			ctx->error(ctx, "%s: %s", path, cause);
d82 1
a82 1
		return (CMD_RETURN_YIELD);
d87 1
a87 1
	else if ((s = cmd_current_session(ctx, 0)) != NULL) {
d99 1
a99 1
		ctx->error(ctx, "%s: %s", path, strerror(errno));
d108 1
a108 1
			ctx->error(ctx, "realloc error: %s", strerror(errno));
d115 1
a115 1
		ctx->error(ctx, "%s: read error", path);
d129 1
a129 1
		ctx->error(ctx, "no buffer %d", buffer);
d156 2
a157 1
	c->flags |= CLIENT_EXIT;
d162 1
a162 1
		return;
d178 3
@


1.21
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.20 2012/05/21 18:27:42 nicm Exp $ */
d33 2
a34 2
int	cmd_load_buffer_exec(struct cmd *, struct cmd_ctx *);
void	cmd_load_buffer_callback(struct client *, int, void *);
d46 1
a46 1
int
d66 1
a66 1
			return (-1);
d80 1
a80 1
			return (-1);
d82 1
a82 1
		return (1);
d100 1
a100 1
		return (-1);
d126 1
a126 1
		return (0);
d131 1
a131 1
		return (-1);
d134 1
a134 1
	return (0);
d140 1
a140 1
	return (-1);
@


1.20
log
@Instead of passing stdin/stdout/stderr file descriptors over imsg and
handling them in the server, handle them in the client and pass buffers
over imsg. This is much tidier for some upcoming changes and the
performance hit isn't critical.

The tty fd is still passed to the server as before.

This bumps the tmux protocol version so new clients and old servers are
incompatible.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.19 2011/10/23 08:34:01 nicm Exp $ */
d65 1
a65 1
			xfree(cause);
d79 1
a79 1
			xfree(cause);
d130 1
a130 1
		xfree(pdata);
d137 1
a137 2
	if (pdata != NULL)
		xfree(pdata);
d160 1
a160 1
		xfree(data);
d176 1
a176 1
	xfree(data);
@


1.19
log
@Try to resolve relative paths for loadb and saveb (first using client
working directory if any then default-path or session wd).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.18 2011/10/23 00:49:25 nicm Exp $ */
d34 1
a34 1
void	cmd_load_buffer_callback(struct client *, void *);
d57 1
a57 2
	int		 ch, buffer;
	int		*buffer_ptr;
a71 13
		if (c == NULL) {
			ctx->error(ctx, "%s: can't read from stdin", path);
			return (-1);
		}
		if (c->flags & CLIENT_TERMINAL) {
			ctx->error(ctx, "%s: stdin is a tty", path);
			return (-1);
		}
		if (c->stdin_fd == -1) {
			ctx->error(ctx, "%s: can't read from stdin", path);
			return (-1);
		}

d75 7
a81 5
		c->stdin_data = buffer_ptr;
		c->stdin_callback = cmd_load_buffer_callback;

		c->references++;
		bufferevent_enable(c->stdin_event, EV_READ);
d145 1
a145 1
cmd_load_buffer_callback(struct client *c, void *data)
d152 5
a156 4
	/*
	 * Event callback has already checked client is not dead and reduced
	 * its reference count. But tell it to exit.
	 */
d159 1
a159 1
	psize = EVBUFFER_LENGTH(c->stdin_event->input);
d164 1
a164 1
	bufferevent_read(c->stdin_event, pdata, psize);
d166 1
d173 2
a174 3
		evbuffer_add_printf(
		    c->stderr_event->output, "no buffer %d\n", *buffer);
		bufferevent_enable(c->stderr_event, EV_WRITE);
@


1.18
log
@Plug a memory leak and update some comments, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.17 2011/05/18 08:07:44 nicm Exp $ */
d51 1
d53 1
a53 1
	const char	*path;
d97 13
@


1.17
log
@Use xfree not free, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.16 2011/01/04 00:42:46 nicm Exp $ */
d30 1
a30 1
 * Loads a session paste buffer from a file.
d128 1
@


1.16
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.15 2010/12/30 23:16:18 nicm Exp $ */
d157 1
a157 1
		free(data);
d173 1
a173 1
	free (data);
@


1.15
log
@Change from a per-session stack of buffers to one global stack which is
much more convenient and also simplifies lot of code. This renders
copy-buffer useless and makes buffer-limit now a server option.

By Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.14 2010/12/20 00:03:55 nicm Exp $ */
d38 1
d40 4
a43 6
	CMD_ARG1, "",
	cmd_buffer_init,
	cmd_buffer_parse,
	cmd_load_buffer_exec,
	cmd_buffer_free,
	cmd_buffer_print
d49 20
a68 7
	struct cmd_buffer_data	*data = self->data;
	struct client		*c = ctx->cmdclient;
	FILE			*f;
	char		      	*pdata, *new_pdata;
	size_t			 psize;
	u_int			 limit;
	int			 ch;
d70 2
a71 1
	if (strcmp(data->arg, "-") == 0) {
d73 1
a73 1
			ctx->error(ctx, "%s: can't read from stdin", data->arg);
d77 1
a77 1
			ctx->error(ctx, "%s: stdin is a tty", data->arg);
d81 1
a81 1
			ctx->error(ctx, "%s: can't read from stdin", data->arg);
d85 4
a88 1
		c->stdin_data = &data->buffer;
d96 2
a97 2
	if ((f = fopen(data->arg, "rb")) == NULL) {
		ctx->error(ctx, "%s: %s", data->arg, strerror(errno));
d113 1
a113 1
		ctx->error(ctx, "%s: read error", data->arg);
d122 1
a122 1
	if (data->buffer == -1) {
d126 2
a127 2
	if (paste_replace(&global_buffers, data->buffer, pdata, psize) != 0) {
		ctx->error(ctx, "no buffer %d", data->buffer);
d144 1
a147 1
	int	*buffer = data;
d156 2
a157 5
	if (psize == 0)
		return;

	pdata = malloc(psize + 1);
	if (pdata == NULL)
d159 1
d172 2
@


1.14
log
@Unify the way sessions are used by callbacks - store the address and use
the reference count, then check it is still on the global sessions list
in the callback.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.13 2010/07/24 20:11:59 nicm Exp $ */
d38 1
a38 1
	CMD_BUFFER_SESSION_USAGE " path",
a46 5
struct cmd_load_buffer_cdata {
	struct session	*session;
	int		 buffer;
};

d50 7
a56 12
	struct cmd_buffer_data		*data = self->data;
	struct cmd_load_buffer_cdata	*cdata;
	struct session			*s;
	struct client			*c = ctx->cmdclient;
	FILE				*f;
	char		      		*pdata, *new_pdata;
	size_t				 psize;
	u_int				 limit;
	int				 ch;

	if ((s = cmd_find_session(ctx, data->target)) == NULL)
		return (-1);
d72 1
a72 5
		cdata = xmalloc(sizeof *cdata);
		cdata->session = s;
		cdata->session->references++;
		cdata->buffer = data->buffer;
		c->stdin_data = cdata;
a103 1
	f = NULL;
d105 1
a105 1
	limit = options_get_number(&s->options, "buffer-limit");
d107 1
a107 1
		paste_add(&s->buffers, pdata, psize, limit);
d110 1
a110 1
	if (paste_replace(&s->buffers, data->buffer, pdata, psize) != 0) {
d128 4
a131 5
	struct cmd_load_buffer_cdata	*cdata = data;
	struct session			*s = cdata->session;
	char				*pdata;
	size_t				 psize;
	u_int				 limit;
a138 4
	/* Does the target session still exist? */
	if (!session_alive(s))
		goto out;

d141 1
a141 1
		goto out;
d145 1
a145 1
		goto out;
d149 4
a152 6
	limit = options_get_number(&s->options, "buffer-limit");
	if (cdata->buffer == -1) {
		paste_add(&s->buffers, pdata, psize, limit);
		goto out;
	}
	if (paste_replace(&s->buffers, cdata->buffer, pdata, psize) != 0) {
d155 1
a155 1
		    c->stderr_event->output, "no buffer %d\n", cdata->buffer);
a156 1
		goto out;
a157 4

out:
	cdata->session->references--;
	xfree(cdata);
@


1.13
log
@When changing so that the client passes its stdout and stderr as well as
stdin up to the server, I forgot one essential point - the tmux server
could now be both the producer and consumer. This happens when tmux is
run inside tmux, as well as when piping tmux commands together.

So, using stdio(3) was a bad idea - if sufficient data was written, this
could block in write(2). When that happened and the server was both
producer and consumer, it deadlocks.

Change to use libevent bufferevents for the client stdin, stdout and
stderr instead. This is trivial enough for output but requires a
callback mechanism to trigger when stdin is finished.

This relies on the underlying polling mechanism for libevent to work
with whatever devices to which the user could redirect stdin, stdout or
stderr, hence the change to use poll(2) over kqueue(2) for tmux.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.12 2010/06/28 22:10:42 nicm Exp $ */
d84 1
a147 1
	int				 idx;
d156 1
a156 1
	if (session_index(s, &idx) != 0)
d183 1
@


1.12
log
@Send all three of stdin, stdout, stderr from the client to the server, so that
commands can directly make use of them. This means that load-buffer and
save-buffer can have "-" as the file to read from stdin or write to stdout.

This is a protocol version bump so the tmux server will need to be restarted
after upgrade (or an older client used).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.11 2010/02/22 20:33:12 nicm Exp $ */
d34 1
d47 5
d55 9
a63 7
	struct cmd_buffer_data	*data = self->data;
	struct session		*s;
	FILE			*f, *close_f;
	char		      	*pdata, *new_pdata;
	size_t			 psize;
	u_int			 limit;
	int			 ch;
d68 2
a69 2
	if (strcmp(data->arg, "-") == 0 ) {
		if (ctx->cmdclient == NULL) {
d73 1
a73 2
		f = ctx->cmdclient->stdin_file;
		if (isatty(fileno(ctx->cmdclient->stdin_file))) {
d77 2
a78 4
		close_f = NULL;
	} else {
		if ((f = fopen(data->arg, "rb")) == NULL) {
			ctx->error(ctx, "%s: %s", data->arg, strerror(errno));
d81 15
a95 1
		close_f = f;
d116 2
a117 2
	if (close_f != NULL)
		fclose(close_f);
d126 1
a126 1
		goto error;
d134 2
a135 2
	if (close_f != NULL)
		fclose(close_f);
d137 47
@


1.11
log
@In load-buffer, read until EOF rather than using stat() and reading a fixed
size. Allows use of FIFOs and whatnot. From Tiago Cunha, idea from Fulvio
Ciriaco.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.10 2009/11/26 22:32:00 nicm Exp $ */
d19 2
d25 1
d51 1
a51 1
	FILE			*f;
d60 17
a76 3
	if ((f = fopen(data->arg, "rb")) == NULL) {
		ctx->error(ctx, "%s: %s", data->arg, strerror(errno));
		return (-1);
d97 2
a98 1
	fclose(f);
d115 2
a116 1
	fclose(f);
@


1.10
log
@Change paranoia check to check for <= 0 and to avoid warning.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.9 2009/11/26 22:28:24 nicm Exp $ */
a18 3
#include <sys/types.h>
#include <sys/stat.h>

d20 1
a22 1
#include <unistd.h>
a47 1
	struct stat		 sb;
d49 1
a49 1
	char		      	*pdata = NULL;
d52 1
d62 10
a71 7
	if (fstat(fileno(f), &sb) < 0) {
		ctx->error(ctx, "%s: %s", data->arg, strerror(errno));
		goto error;
	}
	if (sb.st_size <= 0 || (uintmax_t) sb.st_size > SIZE_MAX) {
		ctx->error(ctx, "%s: file empty or too large", data->arg);
		goto error;
d73 2
a74 13
	psize = (size_t) sb.st_size;

	/*
	 * We don't want to die due to memory exhaustion, hence xmalloc can't
	 * be used here.
	 */
	if ((pdata = malloc(psize)) == NULL) {
		ctx->error(ctx, "malloc error: %s", strerror(errno));
		goto error;
	}

	if (fread(pdata, 1, psize, f) != psize) {
		ctx->error(ctx, "%s: fread error", data->arg);
d77 2
@


1.9
log
@Tidy up various bits of the paste code, make the data buffer char * and add
comments.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.8 2009/11/13 19:53:29 nicm Exp $ */
d69 2
a70 2
	if (sb.st_size > SIZE_MAX) {
		ctx->error(ctx, "%s: file too large", data->arg);
@


1.8
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.7 2009/10/26 21:25:57 nicm Exp $ */
d53 2
a54 1
	u_char		      	*buf;
d67 5
a71 2
		fclose(f);
		return (-1);
d73 1
d79 1
a79 1
	if ((buf = malloc(sb.st_size + 1)) == NULL) {
d81 1
a81 2
		fclose(f);
		return (-1);
d84 1
a84 1
	if (fread(buf, 1, sb.st_size, f) != (size_t) sb.st_size) {
d86 1
a86 3
		xfree(buf);
		fclose(f);
		return (-1);
d93 1
a93 1
		paste_add(&s->buffers, buf, sb.st_size, limit);
d96 1
a96 1
	if (paste_replace(&s->buffers, data->buffer, buf, sb.st_size) != 0) {
d98 1
a98 2
		xfree(buf);
		return (-1);
d102 6
@


1.7
log
@Call fstat() after fopen() rather than stat() before.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.6 2009/09/07 18:50:45 nicm Exp $ */
d38 1
a38 1
	CMD_ARG1, 0,
@


1.6
log
@Give each paste buffer a size member instead of requiring them to be
zero-terminated.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.5 2009/07/30 17:46:12 nicm Exp $ */
d59 1
a59 1
	if (stat(data->arg, &sb) < 0) {
d64 1
a64 1
	if ((f = fopen(data->arg, "rb")) == NULL) {
d66 1
@


1.5
log
@Don't babysit people and let them try to load /dev/zero or (more useful)
/dev/null if they want.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.4 2009/07/26 12:58:44 nicm Exp $ */
d51 1
a51 1
	struct stat		statbuf;
d53 2
a54 2
	char			*buf;
	u_int			limit;
d59 1
a59 1
	if (stat(data->arg, &statbuf) < 0) {
d73 1
a73 1
	if ((buf = malloc(statbuf.st_size + 1)) == NULL) {
d79 1
a79 1
	if (fread(buf, 1, statbuf.st_size, f) != (size_t) statbuf.st_size) {
a85 1
	buf[statbuf.st_size] = '\0';
d90 1
a90 1
		paste_add(&s->buffers, buf, limit);
d93 1
a93 1
	if (paste_replace(&s->buffers, data->buffer, buf) != 0) {
@


1.4
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.3 2009/07/13 23:11:35 nicm Exp $ */
a60 4
		return (-1);
	}
	if (!S_ISREG(statbuf.st_mode)) {
		ctx->error(ctx, "%s: not a regular file", data->arg);
@


1.3
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.2 2009/07/09 09:54:56 nicm Exp $ */
a41 2
	cmd_buffer_send,
	cmd_buffer_recv,
@


1.2
log
@Don't leak FILE * on malloc failure. From ivoire at users dot sourceforge dot net.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-load-buffer.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d38 1
a38 1
	CMD_ARG1,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d81 1
@

