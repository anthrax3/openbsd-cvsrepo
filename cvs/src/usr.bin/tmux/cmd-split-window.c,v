head	1.80;
access;
symbols
	OPENBSD_6_1:1.80.0.4
	OPENBSD_6_1_BASE:1.80
	OPENBSD_6_0:1.69.0.2
	OPENBSD_6_0_BASE:1.69
	OPENBSD_5_9:1.68.0.2
	OPENBSD_5_9_BASE:1.68
	OPENBSD_5_8:1.57.0.4
	OPENBSD_5_8_BASE:1.57
	OPENBSD_5_7:1.56.0.2
	OPENBSD_5_7_BASE:1.56
	OPENBSD_5_6:1.50.0.4
	OPENBSD_5_6_BASE:1.50
	OPENBSD_5_5:1.48.0.4
	OPENBSD_5_5_BASE:1.48
	OPENBSD_5_4:1.42.0.2
	OPENBSD_5_4_BASE:1.42
	OPENBSD_5_3:1.37.0.2
	OPENBSD_5_3_BASE:1.37
	OPENBSD_5_2:1.35.0.2
	OPENBSD_5_2_BASE:1.35
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.2
	OPENBSD_5_0:1.23.0.4
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.80
date	2017.03.09.17.02.38;	author nicm;	state Exp;
branches;
next	1.79;
commitid	QtFskEpSXY809LlK;

1.79
date	2017.03.08.13.36.12;	author nicm;	state Exp;
branches;
next	1.78;
commitid	jI8R4kuPSDw6nngR;

1.78
date	2017.02.27.13.07.57;	author nicm;	state Exp;
branches;
next	1.77;
commitid	xaSatUk82c2wHmar;

1.77
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.76;
commitid	BLRh0qXo7OVTPhiT;

1.76
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.75;
commitid	j0FZs70gSPCmpqWI;

1.75
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.74;
commitid	pxm6osuE99zELpkU;

1.74
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.73;
commitid	1xIYFpLYkPIXNEvU;

1.73
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.72;
commitid	1GCC1n59gejVg5Ih;

1.72
date	2016.10.13.10.01.49;	author nicm;	state Exp;
branches;
next	1.71;
commitid	AFoah05fh4b2e28V;

1.71
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.70;
commitid	TaZ3kOtGiWwKofka;

1.70
date	2016.09.04.17.37.06;	author nicm;	state Exp;
branches;
next	1.69;
commitid	D34i60nsvTyoBV4q;

1.69
date	2016.06.06.07.24.31;	author nicm;	state Exp;
branches;
next	1.68;
commitid	E78aCj5t0oSJORb6;

1.68
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.67;
commitid	P3qmSOx6KrDBsb0c;

1.67
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.66;
commitid	rE682EC14v4gpeFy;

1.66
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.65;
commitid	gsQkQsSyBCSmU9ax;

1.65
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.64;
commitid	uzMkp8Z4FE6WB6s6;

1.64
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.63;
commitid	ns7JfXpW9TsHrnT3;

1.63
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.62;
commitid	MRfGAYPLeVqV46rT;

1.62
date	2015.10.31.14.51.15;	author nicm;	state Exp;
branches;
next	1.61;
commitid	8V8pJWxJ4YGXnHNd;

1.61
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.60;
commitid	B5GekkO0CdWpFMrz;

1.60
date	2015.10.28.09.51.55;	author nicm;	state Exp;
branches;
next	1.59;
commitid	eGVGKzVVYKHFvkn4;

1.59
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.58;
commitid	89xhQafU35Q5MQVC;

1.58
date	2015.10.23.16.30.15;	author nicm;	state Exp;
branches;
next	1.57;
commitid	OfTVqENPXKuxOhhK;

1.57
date	2015.04.26.20.25.20;	author nicm;	state Exp;
branches;
next	1.56;
commitid	xyiq1TAtxHNsq2XV;

1.56
date	2015.02.05.10.32.39;	author nicm;	state Exp;
branches;
next	1.55;
commitid	7FaURucF5XXDhRDx;

1.55
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.54;
commitid	b1G1TVWY7l4KyoY6;

1.54
date	2014.11.12.22.57.06;	author nicm;	state Exp;
branches;
next	1.53;
commitid	2hcJjTaGnelyhsA3;

1.53
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.52;
commitid	RV1NOSXD1mUR8LDP;

1.52
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.51;
commitid	Gq8hgMoG3t1Wy1Zv;

1.51
date	2014.09.01.21.50.18;	author nicm;	state Exp;
branches;
next	1.50;
commitid	yvK8NJvd2XzXhKku;

1.50
date	2014.05.13.08.08.32;	author nicm;	state Exp;
branches;
next	1.49;

1.49
date	2014.04.17.13.02.59;	author nicm;	state Exp;
branches;
next	1.48;

1.48
date	2013.11.22.20.58.36;	author nicm;	state Exp;
branches;
next	1.47;

1.47
date	2013.10.10.12.28.38;	author nicm;	state Exp;
branches;
next	1.46;

1.46
date	2013.10.10.12.26.35;	author nicm;	state Exp;
branches;
next	1.45;

1.45
date	2013.10.10.12.07.36;	author nicm;	state Exp;
branches;
next	1.44;

1.44
date	2013.10.10.12.04.13;	author nicm;	state Exp;
branches;
next	1.43;

1.43
date	2013.10.10.12.00.23;	author nicm;	state Exp;
branches;
next	1.42;

1.42
date	2013.03.25.15.59.57;	author nicm;	state Exp;
branches;
next	1.41;

1.41
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.40;

1.40
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.39;

1.39
date	2013.03.24.09.27.20;	author nicm;	state Exp;
branches;
next	1.38;

1.38
date	2013.03.24.09.21.27;	author nicm;	state Exp;
branches;
next	1.37;

1.37
date	2012.12.09.23.17.35;	author nicm;	state Exp;
branches;
next	1.36;

1.36
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.35;

1.35
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.34;

1.34
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.33;

1.33
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2012.03.17.22.35.09;	author nicm;	state Exp;
branches;
next	1.31;

1.31
date	2012.03.04.20.52.05;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2012.03.04.20.50.53;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2012.03.03.08.31.18;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2012.01.31.15.52.21;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2012.01.20.19.54.07;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2011.12.09.16.28.18;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2011.11.15.23.19.51;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2011.08.30.09.18.52;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2011.02.10.12.12.14;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2011.01.01.01.33.07;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.27.02.56.59;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2010.01.07.20.52.18;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2010.01.07.20.02.01;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2010.01.07.19.47.10;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.20.19.12.39;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.21.15.32.06;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.09.16.12.35.04;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.09.01.13.09.49;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.25.14.53.22;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.13.19.04.00;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.08.21.52.43;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.22.21.34.36;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.07.07.01.10;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.25.06.48.23;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.80
log
@Move server_fill_environ into environ.c and move some other common code
into it.
@
text
@/* $OpenBSD: cmd-split-window.c,v 1.79 2017/03/08 13:36:12 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <paths.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Split a window (add a new pane).
 */

#define SPLIT_WINDOW_TEMPLATE "#{session_name}:#{window_index}.#{pane_index}"

static enum cmd_retval	cmd_split_window_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_split_window_entry = {
	.name = "split-window",
	.alias = "splitw",

	.args = { "bc:dfF:l:hp:Pt:v", 0, -1 },
	.usage = "[-bdfhvP] [-c start-directory] [-F format] "
		 "[-p percentage|-l size] " CMD_TARGET_PANE_USAGE " [command]",

	.tflag = CMD_PANE,

	.flags = 0,
	.exec = cmd_split_window_exec
};

static enum cmd_retval
cmd_split_window_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c = item->state.c;
	struct session		*s = item->state.tflag.s;
	struct winlink		*wl = item->state.tflag.wl;
	struct window		*w = wl->window;
	struct window_pane	*wp = item->state.tflag.wp, *new_wp = NULL;
	struct environ		*env;
	const char		*cmd, *path, *shell, *template, *cwd, *to_free;
	char		       **argv, *cause, *new_cause, *cp;
	u_int			 hlimit;
	int			 argc, size, percentage;
	enum layout_type	 type;
	struct layout_cell	*lc;
	struct environ_entry	*envent;
	struct cmd_find_state    fs;

	server_unzoom_window(w);

	if (args->argc == 0) {
		cmd = options_get_string(s->options, "default-command");
		if (cmd != NULL && *cmd != '\0') {
			argc = 1;
			argv = (char **)&cmd;
		} else {
			argc = 0;
			argv = NULL;
		}
	} else {
		argc = args->argc;
		argv = args->argv;
	}

	to_free = NULL;
	if (args_has(args, 'c')) {
		cwd = args_get(args, 'c');
		to_free = cwd = format_single(item, cwd, c, s, NULL, NULL);
	} else if (item->client != NULL && item->client->session == NULL)
		cwd = item->client->cwd;
	else
		cwd = s->cwd;

	type = LAYOUT_TOPBOTTOM;
	if (args_has(args, 'h'))
		type = LAYOUT_LEFTRIGHT;

	size = -1;
	if (args_has(args, 'l')) {
		size = args_strtonum(args, 'l', 0, INT_MAX, &cause);
		if (cause != NULL) {
			xasprintf(&new_cause, "size %s", cause);
			free(cause);
			cause = new_cause;
			goto error;
		}
	} else if (args_has(args, 'p')) {
		percentage = args_strtonum(args, 'p', 0, INT_MAX, &cause);
		if (cause != NULL) {
			xasprintf(&new_cause, "percentage %s", cause);
			free(cause);
			cause = new_cause;
			goto error;
		}
		if (type == LAYOUT_TOPBOTTOM)
			size = (wp->sy * percentage) / 100;
		else
			size = (wp->sx * percentage) / 100;
	}
	hlimit = options_get_number(s->options, "history-limit");

	shell = options_get_string(s->options, "default-shell");
	if (*shell == '\0' || areshell(shell))
		shell = _PATH_BSHELL;

	lc = layout_split_pane(wp, type, size, args_has(args, 'b'),
	    args_has(args, 'f'));
	if (lc == NULL) {
		cause = xstrdup("pane too small");
		goto error;
	}
	new_wp = window_add_pane(w, wp, args_has(args, 'b'), hlimit);
	layout_assign_pane(lc, new_wp);

	path = NULL;
	if (item->client != NULL && item->client->session == NULL)
		envent = environ_find(item->client->environ, "PATH");
	else
		envent = environ_find(s->environ, "PATH");
	if (envent != NULL)
		path = envent->value;

	env = environ_for_session(s);
	if (window_pane_spawn(new_wp, argc, argv, path, shell, cwd, env,
	    s->tio, &cause) != 0) {
		environ_free(env);
		goto error;
	}
	environ_free(env);

	server_redraw_window(w);

	if (!args_has(args, 'd')) {
		window_set_active_pane(w, new_wp);
		session_select(s, wl->idx);
		server_redraw_session(s);
	} else
		server_status_session(s);

	if (args_has(args, 'P')) {
		if ((template = args_get(args, 'F')) == NULL)
			template = SPLIT_WINDOW_TEMPLATE;
		cp = format_single(item, template, c, s, wl, new_wp);
		cmdq_print(item, "%s", cp);
		free(cp);
	}
	notify_window("window-layout-changed", w);

	if (to_free != NULL)
		free((void *)to_free);

	cmd_find_clear_state(&fs, NULL, 0);
	fs.s = s;
	fs.wl = wl;
	fs.w = w;
	fs.wp = new_wp;
	cmd_find_log_state(__func__, &fs);
	hooks_insert(s->hooks, item, &fs, "after-split-window");

	return (CMD_RETURN_NORMAL);

error:
	if (new_wp != NULL) {
		layout_close_pane(new_wp);
		window_remove_pane(w, new_wp);
	}
	cmdq_error(item, "create pane failed: %s", cause);
	free(cause);

	if (to_free != NULL)
		free((void *)to_free);
	return (CMD_RETURN_ERROR);
}
@


1.79
log
@Add a helper function for the most common format_create/defaults/expand
pattern.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.78 2017/02/27 13:07:57 nicm Exp $ */
a73 5
	env = environ_create();
	environ_copy(global_environ, env);
	environ_copy(s->environ, env);
	server_fill_environ(s, env);

d146 1
d148 2
a149 1
	    s->tio, &cause) != 0)
d151 2
a162 2
	environ_free(env);

a185 1
	environ_free(env);
@


1.78
log
@If splitw -b is used, insert the new pane before the current one in the
pane list. This means the numbering is in order (for example for
display-panes) and fixes a problem with redrawing the active pane
borders.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.77 2017/02/03 11:57:27 nicm Exp $ */
d57 1
a68 1
	struct format_tree	*ft;
d95 2
a96 4
		ft = format_create(item, FORMAT_NONE, 0);
		format_defaults(ft, item->state.c, s, NULL, NULL);
		to_free = cwd = format_expand(ft, args_get(args, 'c'));
		format_free(ft);
d169 1
a169 5

		ft = format_create(item, FORMAT_NONE, 0);
		format_defaults(ft, item->state.c, s, wl, new_wp);

		cp = format_expand(ft, template);
a171 2

		format_free(ft);
@


1.77
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.76 2016/10/16 22:06:40 nicm Exp $ */
d142 1
a142 1
	new_wp = window_add_pane(w, wp, hlimit);
@


1.76
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.75 2016/10/16 19:04:05 nicm Exp $ */
d95 1
a95 1
		ft = format_create(item, 0);
d172 1
a172 1
		ft = format_create(item, 0);
@


1.75
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.74 2016/10/16 17:55:14 nicm Exp $ */
d181 1
a181 1
	notify_window_layout_changed(w);
@


1.74
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.73 2016/10/13 22:48:51 nicm Exp $ */
d36 2
a37 1
static enum cmd_retval	 cmd_split_window_exec(struct cmd *, struct cmd_q *);
d54 1
a54 1
cmd_split_window_exec(struct cmd *self, struct cmd_q *cmdq)
d57 2
a58 2
	struct session		*s = cmdq->state.tflag.s;
	struct winlink		*wl = cmdq->state.tflag.wl;
d60 1
a60 1
	struct window_pane	*wp = cmdq->state.tflag.wp, *new_wp = NULL;
d95 2
a96 2
		ft = format_create(cmdq, 0);
		format_defaults(ft, cmdq->state.c, s, NULL, NULL);
d99 2
a100 2
	} else if (cmdq->client != NULL && cmdq->client->session == NULL)
		cwd = cmdq->client->cwd;
d146 2
a147 2
	if (cmdq->client != NULL && cmdq->client->session == NULL)
		envent = environ_find(cmdq->client->environ, "PATH");
d172 2
a173 2
		ft = format_create(cmdq, 0);
		format_defaults(ft, cmdq->state.c, s, wl, new_wp);
d176 1
a176 1
		cmdq_print(cmdq, "%s", cp);
d192 1
a192 1
	hooks_insert(s->hooks, cmdq, &fs, "after-split-window");
d202 1
a202 1
	cmdq_error(cmdq, "create pane failed: %s", cause);
@


1.73
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.72 2016/10/13 10:01:49 nicm Exp $ */
d191 2
a192 2
	if (hooks_wait(s->hooks, cmdq, &fs, "after-split-window") == 0)
		return (CMD_RETURN_WAIT);
@


1.72
log
@Some improvements and bug fixes for hooks:

- Prepare the state again before the "after" hooks are run, because the
  command may have killed or moved windows.

- Use the hooks list from the newly prepared target, not the old hooks
  list (only matters for new-session really).

- Correctly detect an invalid current state and ignore it in
  cmd_find_target ("killw; swapw").

- Change neww, new, killp, killw, splitw, swapp, swapw to update the
  current state (used if no explicit target is given) to something more
  useful after they have finished. For example, neww changes it to the
  newly created window.

Hooks are still relatively new and primitive so there are likely to be
more changes to come.

Parts based on bug reports from Uwe Werler and Iblis Lin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.71 2016/10/10 21:51:39 nicm Exp $ */
d69 1
a181 7
	cmd_find_clear_state(&cmdq->current, NULL, 0);
	cmdq->current.s = s;
	cmdq->current.wl = wl;
	cmdq->current.w = wl->window;
	cmdq->current.wp = new_wp;
	cmd_find_log_state(__func__, &cmdq->current);

d184 9
@


1.71
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.70 2016/09/04 17:37:06 nicm Exp $ */
d180 7
@


1.70
log
@Add support for performing a full width split (with splitw -f), rather
than splitting the current cell. From Stephen Kent.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.69 2016/06/06 07:24:31 nicm Exp $ */
d36 1
a36 1
enum cmd_retval	 cmd_split_window_exec(struct cmd *, struct cmd_q *);
d52 1
a52 1
enum cmd_retval
@


1.69
log
@Insert new panes after the pane being split in the list rather than
always after the active pane. This is more sensible when doing it with
commands rather than keys.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.68 2016/01/19 15:59:12 nicm Exp $ */
d42 2
a43 2
	.args = { "bc:dF:l:hp:Pt:v", 0, -1 },
	.usage = "[-bdhvP] [-c start-directory] [-F format] "
d134 2
a135 1
	lc = layout_split_pane(wp, type, size, args_has(args, 'b'));
@


1.68
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.67 2015/12/14 00:31:54 nicm Exp $ */
d139 1
a139 1
	new_wp = window_add_pane(w, hlimit);
@


1.67
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.66 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.66
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.65 2015/12/13 14:32:38 nicm Exp $ */
d46 3
a48 1
	.flags = CMD_PANE_T,
@


1.65
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.64 2015/12/11 12:27:36 nicm Exp $ */
d39 9
a47 6
	"split-window", "splitw",
	"bc:dF:l:hp:Pt:v", 0, -1,
	"[-bdhvP] [-c start-directory] [-F format] [-p percentage|-l size] "
	CMD_TARGET_PANE_USAGE " [command]",
	CMD_PANE_T,
	cmd_split_window_exec
@


1.64
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.63 2015/12/08 08:34:18 nicm Exp $ */
d43 1
a43 1
	0,
d51 4
a54 4
	struct session		*s;
	struct winlink		*wl;
	struct window		*w;
	struct window_pane	*wp, *new_wp = NULL;
a64 3
	if ((wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp)) == NULL)
		return (CMD_RETURN_ERROR);
	w = wl->window;
d89 1
a89 2
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s, NULL,
		    NULL);
d165 1
a165 2
		format_defaults(ft, cmd_find_client(cmdq, NULL, 1), s, wl,
		    new_wp);
@


1.63
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.62 2015/10/31 14:51:15 nicm Exp $ */
d91 1
a91 1
		ft = format_create(0);
d168 1
a168 1
		ft = format_create(0);
@


1.62
log
@Fall back silently to ~ or / rather than checking -c with access(), this
was the old behaviour.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.61 2015/10/31 08:13:58 nicm Exp $ */
d91 1
a91 1
		ft = format_create();
d168 1
a168 1
		ft = format_create();
@


1.61
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.60 2015/10/28 09:51:55 nicm Exp $ */
a95 7

		if (access(cwd, X_OK) != 0) {
			free((void *)cwd);
			cmdq_error(cmdq, "bad working directory: %s",
			    strerror(errno));
			return (CMD_RETURN_ERROR);
		}
@


1.60
log
@Like options, move the environ struct into environ.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.59 2015/10/27 15:58:42 nicm Exp $ */
d56 1
a56 1
	const char		*cmd, *path, *shell, *template;
d59 1
a59 1
	int			 argc, size, percentage, cwd, fd = -1;
d89 1
d94 1
a94 1
		cp = format_expand(ft, args_get(args, 'c'));
d97 6
a102 11
		if (cp != NULL && *cp != '\0') {
			fd = open(cp, O_RDONLY|O_DIRECTORY);
			free(cp);
			if (fd == -1) {
				cmdq_error(cmdq, "bad working directory: %s",
				    strerror(errno));
				return (CMD_RETURN_ERROR);
			}
		} else
			free(cp);
		cwd = fd;
d187 2
a188 2
	if (fd != -1)
		close(fd);
d199 3
a201 2
	if (fd != -1)
		close(fd);
@


1.59
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.58 2015/10/23 16:30:15 nicm Exp $ */
d55 1
a55 1
	struct environ		 env;
d70 4
a73 4
	environ_init(&env);
	environ_copy(&global_environ, &env);
	environ_copy(&s->environ, &env);
	server_fill_environ(s, &env);
d154 1
a154 1
		envent = environ_find(&cmdq->client->environ, "PATH");
d156 1
a156 1
		envent = environ_find(&s->environ, "PATH");
d160 1
a160 1
	if (window_pane_spawn(new_wp, argc, argv, path, shell, cwd, &env,
d173 1
a173 1
	environ_free(&env);
d196 1
a196 1
	environ_free(&env);
@


1.58
log
@Remove some unnecessary checks before free().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.57 2015/04/26 20:25:20 nicm Exp $ */
d76 1
a76 1
		cmd = options_get_string(&s->options, "default-command");
d138 1
a138 1
	hlimit = options_get_number(&s->options, "history-limit");
d140 1
a140 1
	shell = options_get_string(&s->options, "default-shell");
@


1.57
log
@Remove panes from layout if spawning them fails, reported by Anthony J
Bentley.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.56 2015/02/05 10:32:39 nicm Exp $ */
d104 1
a104 1
		} else if (cp != NULL)
@


1.56
log
@Remove a couple of now-unused variables.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.55 2015/02/05 10:29:43 nicm Exp $ */
d150 1
a162 1
	layout_assign_pane(lc, new_wp);
d197 2
a198 1
	if (new_wp != NULL)
d200 1
@


1.55
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.54 2014/11/12 22:57:06 nicm Exp $ */
a61 1
	struct client		*c;
@


1.54
log
@Add -b to splitw like joinw, from Felix Rosencrantz.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.53 2014/10/20 23:35:28 nicm Exp $ */
d92 2
a93 5
		if ((c = cmd_find_client(cmdq, NULL, 1)) != NULL)
			format_client(ft, c);
		format_session(ft, s);
		format_winlink(ft, s, s->curw);
		format_window_pane(ft, s->curw->window->active);
d181 2
a182 5
		if ((c = cmd_find_client(cmdq, NULL, 1)) != NULL)
			format_client(ft, c);
		format_session(ft, s);
		format_winlink(ft, s, wl);
		format_window_pane(ft, new_wp);
@


1.53
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.52 2014/10/20 22:29:25 nicm Exp $ */
d40 2
a41 2
	"c:dF:l:hp:Pt:v", 0, -1,
	"[-dhvP] [-c start-directory] [-F format] [-p percentage|-l size] "
d148 2
a149 1
	if ((lc = layout_split_pane(wp, type, size, 0)) == NULL) {
@


1.52
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.51 2014/09/01 21:50:18 nicm Exp $ */
d33 2
@


1.51
log
@Various minor style and spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.50 2014/05/13 08:08:32 nicm Exp $ */
a33 1
void		 cmd_split_window_key_binding(struct cmd *, int);
a41 1
	cmd_split_window_key_binding,
a43 8

void
cmd_split_window_key_binding(struct cmd *self, int key)
{
	self->args = args_create(0);
	if (key == '%')
		args_set(self->args, 'h', NULL);
}
@


1.50
log
@If multiple arguments are given to new-session, new-window,
split-window, respawn-window or respawn-pane, pass them directly to
execvp() to help avoid quoting problems. One argument still goes to "sh
-c" like before. Requested by many over the years. Patch from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.49 2014/04/17 13:02:59 nicm Exp $ */
d88 1
a88 1
			argv = (char**)&cmd;
@


1.49
log
@Set PATH explicitly, either from client or session
environment. Previously it came from the session environment. From J
Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.48 2013/11/22 20:58:36 nicm Exp $ */
d39 1
a39 1
	"c:dF:l:hp:Pt:v", 0, 1,
d65 1
a65 1
	char			*cause, *new_cause, *cp;
d67 1
a67 1
	int			 size, percentage, cwd, fd = -1;
d84 1
a84 1
	if (args->argc == 0)
d86 11
a96 2
	else
		cmd = args->argv[0];
d170 2
a171 2
	if (window_pane_spawn(
	    new_wp, cmd, path, shell, cwd, &env, s->tio, &cause) != 0)
@


1.48
log
@Handle empty current directory more gracefully.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.47 2013/10/10 12:28:38 nicm Exp $ */
d64 1
a64 1
	const char		*cmd, *shell, *template;
d72 1
d152 9
d162 1
a162 1
	    new_wp, cmd, shell, cwd, &env, s->tio, &cause) != 0)
@


1.47
log
@Don't boke when figuring out working directory from configuration file.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.46 2013/10/10 12:26:35 nicm Exp $ */
d98 10
a107 7
		fd = open(cp, O_RDONLY|O_DIRECTORY);
		free(cp);
		if (fd == -1) {
			cmdq_error(cmdq, "bad working directory: %s",
			    strerror(errno));
			return (CMD_RETURN_ERROR);
		}
@


1.46
log
@Alter how tmux handles the working directory to internally use file
descriptors rather than strings.

- Each session still has a current working directory.

- New sessions still get their working directory from the client that
  created them or its attached session if any.

- New windows are created by default in the session working directory.

- The -c flag to new, neww, splitw allows the working directory to be
  overridden.

- The -c flag to attach let's the session working directory be changed.

- The default-path option has been removed.

To get the equivalent to default-path '.', do:

        bind c neww -c $PWD

To get the equivalent of default-path '~', do:

        bind c neww -c ~

This also changes the client identify protocol to be a set of messages rather
than one as well as some other changes that should make it easier to make
backwards-compatible protocol changes in future.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.45 2013/10/10 12:07:36 nicm Exp $ */
d106 1
a106 1
	} else if (cmdq->client->session == NULL)
@


1.45
log
@Support -c for new-session, based on code from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.44 2013/10/10 12:04:13 nicm Exp $ */
d21 2
d25 1
d64 2
a65 2
	const char		*cmd, *cwd, *shell;
	char			*cause, *new_cause;
d67 1
a67 1
	int			 size, percentage;
a69 1
	const char		*template;
a71 1
	char			*cp;
d87 23
a109 1
	cwd = cmdq_default_path(cmdq, args_get(args, 'c'));
d182 3
d193 2
@


1.44
log
@Restore missing key binding for %, from Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.43 2013/10/10 12:00:23 nicm Exp $ */
d86 1
a86 1
	cwd = cmd_get_default_path(cmdq, args_get(args, 'c'));
@


1.43
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.42 2013/03/25 15:59:57 nicm Exp $ */
d40 1
a40 1
	NULL,
@


1.42
log
@Revert the command-prefix change which breaks sequences of commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.41 2013/03/24 09:57:59 nicm Exp $ */
a39 1
	cmd_split_window_key_binding,
@


1.41
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.40 2013/03/24 09:54:10 nicm Exp $ */
d62 2
a63 2
	const char		*cmd, *cwd, *shell, *prefix;
	char			*cause, *new_cause, *cmd1;
d126 2
a127 9

	if (*cmd != '\0') {
		prefix = options_get_string(&w->options, "command-prefix");
		xasprintf(&cmd1, "%s%s", prefix, cmd);
	} else
		cmd1 = xstrdup("");
	if (window_pane_spawn(new_wp, cmd1, shell, cwd, &env, s->tio,
	    &cause) != 0) {
		free(cmd1);
a128 2
	}
	free(cmd1);
@


1.40
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.39 2013/03/24 09:27:20 nicm Exp $ */
d76 1
@


1.39
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.38 2013/03/24 09:21:27 nicm Exp $ */
d32 1
a32 1
enum cmd_retval	 cmd_split_window_exec(struct cmd *, struct cmd_ctx *);
d54 1
a54 1
cmd_split_window_exec(struct cmd *self, struct cmd_ctx *ctx)
d73 1
a73 1
	if ((wl = cmd_find_pane(ctx, args_get(args, 't'), &s, &wp)) == NULL)
d86 1
a86 1
	cwd = cmd_get_default_path(ctx, args_get(args, 'c'));
d155 2
a156 2
		if ((c = cmd_find_client(ctx, NULL, 1)) != NULL)
		    format_client(ft, c);
d162 1
a162 1
		ctx->print(ctx, "%s", cp);
d174 1
a174 1
	ctx->error(ctx, "create pane failed: %s", cause);
@


1.38
log
@Add option command-prefix which is automatically prepended to any
command (apart from a naked default-shell). The default is "exec ".
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.37 2012/12/09 23:17:35 nicm Exp $ */
d155 1
a155 1
		if ((c = cmd_find_client(ctx, NULL)) != NULL)
@


1.37
log
@Use the CMD_*_USAGE defines consistently, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.36 2012/08/14 08:51:53 nicm Exp $ */
d62 2
a63 2
	const char		*cmd, *cwd, *shell;
	char			*cause, *new_cause;
d125 9
a133 2
	if (window_pane_spawn(
	    new_wp, cmd, shell, cwd, &env, s->tio, &cause) != 0)
d135 2
@


1.36
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.35 2012/07/11 07:10:15 nicm Exp $ */
d38 1
a38 1
	"[-t target-pane] [command]",
@


1.35
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.34 2012/07/10 11:53:01 nicm Exp $ */
d143 1
a143 1
			template = DEFAULT_PANE_INFO_TEMPLATE;
@


1.34
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.33 2012/05/22 11:35:37 nicm Exp $ */
d31 2
a32 2
void	cmd_split_window_key_binding(struct cmd *, int);
int	cmd_split_window_exec(struct cmd *, struct cmd_ctx *);
d53 1
a53 1
int
d74 1
a74 1
		return (-1);
d159 1
a159 1
	return (0);
d167 1
a167 1
	return (-1);
@


1.33
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.32 2012/03/17 22:35:09 nicm Exp $ */
d97 1
a97 1
			xfree(cause);
d105 1
a105 1
			xfree(cause);
d154 1
a154 1
		xfree(cp);
d166 1
a166 1
	xfree(cause);
@


1.32
log
@Add notify hooks for various events, the functions are currently empty
stubs but will be filled in for control mode later. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.31 2012/03/04 20:52:05 nicm Exp $ */
d142 2
a143 3
		template = "#{session_name}:#{window_index}.#{pane_index}";
		if (args_has(args, 'F'))
			template = args_get(args, 'F');
@


1.31
log
@free -> xfree.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.30 2012/03/04 20:50:53 nicm Exp $ */
d159 1
@


1.30
log
@Add -F format to new-window and split-window to use with the -P flag,
from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.29 2012/03/03 08:31:18 nicm Exp $ */
d155 1
a155 1
		free(cp);
@


1.29
log
@Add move-pane command (like join-pane but allows the same window). Also
-b flag to join-pane and move-pane to place the pane to the left or
above. From George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.28 2012/01/31 15:52:21 nicm Exp $ */
d36 3
a38 3
	"c:dl:hp:Pt:v", 0, 1,
	"[-dhvP] [-c start-directory] [-p percentage|-l size] [-t target-pane] "
	"[command]",
d62 1
a62 1
	const char	       	*cmd, *cwd, *shell;
d64 1
a64 1
	u_int			 hlimit, paneidx;
d68 4
d142 16
a157 3
		if (window_pane_index(new_wp, &paneidx) != 0)
			fatalx("index not found");
		ctx->print(ctx, "%s:%u.%u", s->name, wl->idx, paneidx);
@


1.28
log
@Provide defined ways to set the various default-path possibilities: ~
for home directory, . for server start directory, - for session start
directory and empty for the pane's working directory (the default). All
can also be used as part of a relative path (eg -/foo). Also provide -c
flags to neww and splitw to override default-path setting.

Based on a diff from sthen. ok sthen
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.27 2012/01/20 19:54:07 nicm Exp $ */
d116 1
a116 1
	if ((lc = layout_split_pane(wp, type, size)) == NULL) {
@


1.27
log
@Add some const and fix a warning.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.26 2011/12/09 16:28:18 nicm Exp $ */
d36 3
a38 2
	"dl:hp:Pt:v", 0, 1,
	"[-dhvP] [-p percentage|-l size] [-t target-pane] [command]",
d82 1
a82 1
	cwd = cmd_get_default_path(ctx);
@


1.26
log
@Change the way the working directory for new processes is discovered. If
default-path isn't empty, it is used. Otherwise:

1) If tmux neww is run from the command line, the working directory of the
   client is used.

2) Otherwise sysctl KERN_PROC_CWD is used to retrieve the current
   working directory of the process in the active pane.

3) If that fails, the directory where the session was created is used.

Support code by Romain Francois, OpenBSD specific bits by me.

Note this requires a recent userland and kernel with KERN_PROC_CWD.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.25 2011/11/15 23:19:51 nicm Exp $ */
d61 2
a62 2
	char		 	*cmd, *cwd, *cause, *new_cause;
	const char		*shell;
@


1.25
log
@Make window_pane_index work the same as window_index, from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.24 2011/08/30 09:18:52 nicm Exp $ */
d81 1
a81 7
	cwd = options_get_string(&s->options, "default-path");
	if (*cwd == '\0') {
		if (ctx->cmdclient != NULL && ctx->cmdclient->cwd != NULL)
			cwd = ctx->cmdclient->cwd;
		else
			cwd = s->cwd;
	}
@


1.24
log
@Plug memory leak, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.23 2011/02/10 12:12:14 nicm Exp $ */
d143 2
a144 1
		paneidx = window_pane_index(wl->window, new_wp);
@


1.23
log
@Size on split-window is -l not -s. Doh.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.22 2011/01/04 00:42:47 nicm Exp $ */
d61 1
a61 1
	char		 	*cmd, *cwd, *cause;
d97 1
a97 1
			ctx->error(ctx, "size %s", cause);
d99 2
a100 1
			return (-1);
d105 1
a105 1
			ctx->error(ctx, "percentage %s", cause);
d107 2
a108 1
			return (-1);
@


1.22
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.21 2011/01/01 01:33:07 nicm Exp $ */
d94 2
a95 2
	if (args_has(args, 's')) {
		size = args_strtonum(args, 's', 0, INT_MAX, &cause);
@


1.21
log
@Add a -P option to new-window and split-window to print the new window
or pane index in target form (useful to pass it into other commands).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.20 2010/06/27 02:56:59 nicm Exp $ */
d31 1
a31 1
int	cmd_split_window_parse(struct cmd *, int, char **, char **);
a32 13
void	cmd_split_window_free(struct cmd *);
void	cmd_split_window_init(struct cmd *, int);
size_t	cmd_split_window_print(struct cmd *, char *, size_t);

struct cmd_split_window_data {
	char	*target;
	char	*cmd;
	int	 flag_detached;
	int	 flag_horizontal;
	int	 flag_print;
	int	 percentage;
	int	 size;
};
d36 1
d38 4
a41 6
	0, "",
	cmd_split_window_init,
	cmd_split_window_parse,
	cmd_split_window_exec,
	cmd_split_window_free,
	cmd_split_window_print
d45 1
a45 25
cmd_split_window_init(struct cmd *self, int key)
{
	struct cmd_split_window_data	 *data;

	self->data = data = xmalloc(sizeof *data);
	data->target = NULL;
	data->cmd = NULL;
	data->flag_detached = 0;
	data->flag_horizontal = 0;
	data->flag_print = 0;
	data->percentage = -1;
	data->size = -1;

	switch (key) {
	case '%':
		data->flag_horizontal = 1;
		break;
	case '"':
		data->flag_horizontal = 0;
		break;
	}
}

int
cmd_split_window_parse(struct cmd *self, int argc, char **argv, char **cause)
d47 3
a49 63
	struct cmd_split_window_data	*data;
	int				 opt;
	const char			*errstr;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "dhl:p:Pt:v")) != -1) {
		switch (opt) {
		case 'd':
			data->flag_detached = 1;
			break;
		case 'h':
			data->flag_horizontal = 1;
			break;
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		case 'l':
			if (data->percentage != -1 || data->size != -1)
				break;
			data->size = strtonum(optarg, 1, INT_MAX, &errstr);
			if (errstr != NULL) {
				xasprintf(cause, "size %s", errstr);
				goto error;
			}
			break;
		case 'p':
			if (data->size != -1 || data->percentage != -1)
				break;
			data->percentage = strtonum(optarg, 1, 100, &errstr);
			if (errstr != NULL) {
				xasprintf(cause, "percentage %s", errstr);
				goto error;
			}
			break;
		case 'P':
			data->flag_print = 1;
			break;
		case 'v':
			data->flag_horizontal = 0;
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 0 && argc != 1)
		goto usage;

	if (argc == 1)
		data->cmd = xstrdup(argv[0]);

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

error:
	self->entry->free(self);
	return (-1);
d55 12
a66 12
	struct cmd_split_window_data	*data = self->data;
	struct session			*s;
	struct winlink			*wl;
	struct window			*w;
	struct window_pane		*wp, *new_wp = NULL;
	struct environ			 env;
	char		 		*cmd, *cwd, *cause;
	const char			*shell;
	u_int				 hlimit, paneidx;
	int				 size;
	enum layout_type		 type;
	struct layout_cell		*lc;
d68 1
a68 1
	if ((wl = cmd_find_pane(ctx, data->target, &s, &wp)) == NULL)
d77 1
a77 2
	cmd = data->cmd;
	if (cmd == NULL)
d79 2
d90 1
a90 1
	if (data->flag_horizontal)
d94 14
a107 3
	if (data->size != -1)
		size = data->size;
	else if (data->percentage != -1) {
d109 1
a109 1
			size = (wp->sy * data->percentage) / 100;
d111 1
a111 1
			size = (wp->sx * data->percentage) / 100;
d131 1
a131 1
	if (!data->flag_detached) {
d140 1
a140 1
	if (data->flag_print) {
a152 40
}

void
cmd_split_window_free(struct cmd *self)
{
	struct cmd_split_window_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	if (data->cmd != NULL)
		xfree(data->cmd);
	xfree(data);
}

size_t
cmd_split_window_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_split_window_data	*data = self->data;
	size_t				 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->flag_detached)
		off += xsnprintf(buf + off, len - off, " -d");
	if (off < len && data->flag_horizontal)
		off += xsnprintf(buf + off, len - off, " -h");
	if (off < len && data->flag_print)
		off += xsnprintf(buf + off, len - off, " -P");
	if (off < len && data->size > 0)
		off += xsnprintf(buf + off, len - off, " -l %d", data->size);
	if (off < len && data->percentage > 0) {
		off += xsnprintf(
		    buf + off, len - off, " -p %d", data->percentage);
	}
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
	if (off < len && data->cmd != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->cmd);
	return (off);
@


1.20
log
@Store the current working directory in the session, change the default-path
option to default to empty and make that mean that the stored session CWD is
used.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.19 2010/01/07 20:52:18 nicm Exp $ */
d42 1
d49 1
a49 1
	"[-dhv] [-p percentage|-l size] [-t target-pane] [command]",
d68 1
d92 1
a92 1
	while ((opt = getopt(argc, argv, "dhl:p:t:v")) != -1) {
d122 3
d161 1
a161 1
	u_int				 hlimit;
d225 5
d266 2
@


1.19
log
@New command, join-pane, to split and move an existing pane into the space (like
splitw then movep, or the reverse of breakp).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.18 2010/01/07 20:02:01 nicm Exp $ */
d173 7
a179 4
	if (ctx->cmdclient == NULL || ctx->cmdclient->cwd == NULL)
		cwd = options_get_string(&s->options, "default-path");
	else
		cwd = ctx->cmdclient->cwd;
@


1.18
log
@Use the specified pane for size calculations. Doh.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.17 2010/01/07 19:47:10 nicm Exp $ */
d152 1
a152 1
	struct window_pane		*wp, *new_wp;
d159 1
d197 1
a197 4
	new_wp = window_add_pane(w, hlimit);
	if (window_pane_spawn(new_wp, cmd, shell, cwd, &env, s->tio, &cause) != 0)
		goto error;
	if (layout_split_pane(wp, type, size, new_wp) != 0) {
d201 5
@


1.17
log
@Change split-window to accept a pane target (it should be split-pane but
renaming the command would be annoying).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.16 2009/12/03 22:50:10 nicm Exp $ */
d186 1
a186 1
			size = (w->active->sy * data->percentage) / 100;
d188 1
a188 1
			size = (w->active->sx * data->percentage) / 100;
@


1.16
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.15 2009/11/20 19:12:39 nicm Exp $ */
d48 1
a48 1
	"[-dhv] [-p percentage|-l size] [-t target-window] [command]",
d152 1
a152 1
	struct window_pane		*wp;
d160 1
a160 1
	if ((wl = cmd_find_window(ctx, data->target, &s)) == NULL)
d196 2
a197 2
	wp = window_add_pane(w, hlimit);
	if (window_pane_spawn(wp, cmd, shell, cwd, &env, s->tio, &cause) != 0)
d199 1
a199 1
	if (layout_split_pane(w->active, type, size, wp) != 0) {
d207 1
a207 1
		window_set_active_pane(w, wp);
d218 2
a219 2
	if (wp != NULL)
		window_remove_pane(w, wp);
@


1.15
log
@When -h and -p are given to split-window, calculate the percentage size using
the width instead of the height.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.14 2009/11/13 19:53:29 nicm Exp $ */
d73 1
a73 1
		break;		
@


1.14
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.13 2009/09/21 15:32:06 nicm Exp $ */
d177 4
d184 6
a189 2
	else if (data->percentage != -1)
		size = (w->active->sy * data->percentage) / 100;
a190 4

	type = LAYOUT_TOPBOTTOM;
	if (data->flag_horizontal)
		type = LAYOUT_LEFTRIGHT;
@


1.13
log
@Use KEYC_NONE constant instead of 0 on init.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.12 2009/09/16 12:35:04 nicm Exp $ */
d49 1
a49 1
	0, 0,
@


1.12
log
@Rather than constructing an entire termios struct from ttydefaults.h, just let
forkpty do it and then alter the bits that should be changed after fork. A
little neater and more portable.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.11 2009/09/01 13:09:49 nicm Exp $ */
d87 1
a87 1
	self->entry->init(self, 0);
@


1.11
log
@When using tmux as a login shell, there is currently no way to specify a shell
to be used as a login shell inside tmux, so add a default-shell session option.
This sets the shell invoked as a login shell when the default-command option is
empty.

The default option value is whichever of $SHELL, getpwuid(getuid())'s pw_shell
or /bin/sh is valid first.

Based on a diff from martynas@@, changed by me to be a session option rather
than a window option.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.10 2009/08/25 14:53:22 nicm Exp $ */
d193 1
a193 1
	if (window_pane_spawn(wp, cmd, shell, cwd, &env, &s->tio, &cause) != 0)
@


1.10
log
@Print -l and -p when showing command, pointed out by Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.9 2009/08/13 19:04:00 nicm Exp $ */
d21 1
d155 1
d188 4
d193 1
a193 1
	if (window_pane_spawn(wp, cmd, cwd, &env, &s->tio, &cause) != 0)
@


1.9
log
@When creating a new session from the command-line where there is an external
terminal, copy the termios(4) special characters and use them for new windows
created in the new session. Suggested by Theo.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.8 2009/08/08 21:52:43 nicm Exp $ */
d240 6
@


1.8
log
@Infrastructure and commands to manage the environment for processes started
within tmux.

There is a global environment, copied from the external environment when the
server is started and each sesssion has an (initially empty) session
environment which overrides it.

New commands set-environment and show-environment manipulate or display the
environments.

A new session option, update-environment, is a space-separated list of
variables which are updated from the external environment into the session
environment every time a new session is created - the default is DISPLAY.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.7 2009/07/26 12:58:44 nicm Exp $ */
d187 1
a187 1
	if (window_pane_spawn(wp, cmd, cwd, &env, &cause) != 0)
@


1.7
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.6 2009/07/22 21:34:36 nicm Exp $ */
d152 1
a152 1
	const char		       **env;
d162 4
a165 1
	env = server_fill_environ(s);
d187 1
a187 1
	if (window_pane_spawn(wp, cmd, cwd, env, &cause) != 0)
d203 1
d207 1
@


1.6
log
@window_add_pane cannot fail, so remove the unused cause argument and don't
bother to check for a NULL return.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.5 2009/07/19 13:21:40 nicm Exp $ */
a31 2
void	cmd_split_window_send(struct cmd *, struct buffer *);
void	cmd_split_window_recv(struct cmd *, struct buffer *);
a51 2
	cmd_split_window_send,
	cmd_split_window_recv,
a207 21
}

void
cmd_split_window_send(struct cmd *self, struct buffer *b)
{
	struct cmd_split_window_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->target);
	cmd_send_string(b, data->cmd);
}

void
cmd_split_window_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_split_window_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->target = cmd_recv_string(b);
	data->cmd = cmd_recv_string(b);
@


1.5
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.4 2009/07/13 23:11:35 nicm Exp $ */
d187 1
a187 3
	wp = window_add_pane(w, hlimit, &cause);
	if (wp == NULL)
		goto error;
@


1.4
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.3 2009/07/07 07:01:10 nicm Exp $ */
d42 1
d44 1
a44 1
	int	 lines;
d49 1
a49 1
	"[-d] [-p percentage|-l lines] [-t target-window] [command]",
d61 1
a61 1
cmd_split_window_init(struct cmd *self, unused int arg)
d69 1
d71 10
a80 1
	data->lines = -1;
d87 1
a87 1
	int				 opt, n;
d93 1
a93 1
	while ((opt = getopt(argc, argv, "dl:p:t:")) != -1) {
d98 3
d106 6
a111 7
			if (data->percentage == -1 && data->lines == -1) {
				n = strtonum(optarg, 1, INT_MAX, &errstr);
				if (errstr != NULL) {
					xasprintf(cause, "lines %s", errstr);
					goto error;
				}
				data->lines = n;
d115 6
a120 8
			if (data->lines == -1 && data->percentage == -1) {
				n = strtonum(optarg, 1, 100, &errstr);
				if (errstr != NULL) {
					xasprintf(
					    cause, "percentage %s", errstr);
					goto error;
				}
				data->percentage = n;
d123 3
d159 2
a160 1
	int				 lines;
d176 3
a178 3
	lines = -1;
	if (data->lines != -1)
		lines = data->lines;
d180 2
a181 1
		lines = (w->active->sy * data->percentage) / 100;
d183 12
a194 6
	hlimit = options_get_number(&s->options, "history-limit");
	wp = window_add_pane(w, lines, cmd, cwd, env, hlimit, &cause);
	if (wp == NULL) {
		ctx->error(ctx, "create pane failed: %s", cause);
		xfree(cause);
		return (-1);
d196 1
a204 1
	layout_refresh(w, 0);
d207 7
d260 2
@


1.3
log
@The fix for default-path (use target session options instead of global options)
is required here as well, doh.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.2 2009/06/25 06:48:23 nicm Exp $ */
d49 1
a49 1
	0,
@


1.2
log
@lines variable can be -1 (to be ignored), so should be signed. Found by lint.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-split-window.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d157 1
a157 1
		cwd = options_get_string(&global_options, "default-path");
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d144 2
a145 1
	u_int				 hlimit, lines;
@

