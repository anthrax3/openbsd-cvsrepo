head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.8.0.10
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.6
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.24
date	2017.02.04.23.42.53;	author nicm;	state Exp;
branches;
next	1.23;
commitid	4kOnoXt4W91GXevo;

1.23
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.22;
commitid	P3qmSOx6KrDBsb0c;

1.22
date	2015.12.14.00.32.19;	author nicm;	state Exp;
branches;
next	1.21;
commitid	ygS2ZwkAZ2stwwuX;

1.21
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.20;
commitid	rE682EC14v4gpeFy;

1.20
date	2015.11.24.21.19.46;	author nicm;	state Exp;
branches;
next	1.19;
commitid	WYqwkdfYHZzn9ayb;

1.19
date	2015.11.18.14.27.44;	author nicm;	state Exp;
branches;
next	1.18;
commitid	RjsAPRkWwvS79w40;

1.18
date	2015.11.18.13.06.54;	author nicm;	state Exp;
branches;
next	1.17;
commitid	xAU2oIxJB0E2UZoZ;

1.17
date	2015.09.24.12.03.58;	author nicm;	state Exp;
branches;
next	1.16;
commitid	RQO4febRGoieq4si;

1.16
date	2015.09.14.12.12.24;	author nicm;	state Exp;
branches;
next	1.15;
commitid	xVCL5voCgiBYCoIy;

1.15
date	2015.09.01.19.14.43;	author nicm;	state Exp;
branches;
next	1.14;
commitid	mrcplcrYs2CTzgqt;

1.14
date	2015.08.29.00.24.44;	author nicm;	state Exp;
branches;
next	1.13;
commitid	Yn9VYCCBVhC6CzUV;

1.13
date	2015.08.28.12.15.54;	author nicm;	state Exp;
branches;
next	1.12;
commitid	wUWM6v3dxsUOzB3g;

1.12
date	2014.11.26.18.34.51;	author millert;	state Exp;
branches;
next	1.11;
commitid	9QOFSShUOtA0kQLF;

1.11
date	2014.10.20.23.57.13;	author nicm;	state Exp;
branches;
next	1.10;
commitid	PTykIJGtZncJPE4a;

1.10
date	2014.03.31.21.42.45;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2014.03.31.21.42.05;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2012.05.30.15.01.21;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2012.05.25.08.28.10;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.17.18.38.58;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.17.18.23.03;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.21.18.40.30;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.25.06.23.10;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Missing va_end, from Anton Lindqvist.
@
text
@/* $OpenBSD: log.c,v 1.23 2016/01/19 15:59:12 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <vis.h>

#include "tmux.h"

static FILE	*log_file;
static int	 log_level;

static void	 log_event_cb(int, const char *);
static void	 log_vwrite(const char *, va_list);

/* Log callback for libevent. */
static void
log_event_cb(__unused int severity, const char *msg)
{
	log_debug("%s", msg);
}

/* Increment log level. */
void
log_add_level(void)
{
	log_level++;
}

/* Get log level. */
int
log_get_level(void)
{
	return (log_level);
}

/* Open logging to file. */
void
log_open(const char *name)
{
	char	*path;

	if (log_level == 0)
		return;

	if (log_file != NULL)
		fclose(log_file);

	xasprintf(&path, "tmux-%s-%ld.log", name, (long)getpid());
	log_file = fopen(path, "w");
	free(path);
	if (log_file == NULL)
		return;

	setvbuf(log_file, NULL, _IOLBF, 0);
	event_set_log_callback(log_event_cb);
}

/* Close logging. */
void
log_close(void)
{
	if (log_file != NULL)
		fclose(log_file);
	log_file = NULL;

	event_set_log_callback(NULL);
}

/* Write a log message. */
static void
log_vwrite(const char *msg, va_list ap)
{
	char		*fmt, *out;
	struct timeval	 tv;

	if (log_file == NULL)
		return;

	if (vasprintf(&fmt, msg, ap) == -1)
		exit(1);
	if (stravis(&out, fmt, VIS_OCTAL|VIS_CSTYLE|VIS_TAB|VIS_NL) == -1)
		exit(1);

	gettimeofday(&tv, NULL);
	if (fprintf(log_file, "%lld.%06d %s\n", (long long)tv.tv_sec,
	    (int)tv.tv_usec, out) == -1)
		exit(1);
	fflush(log_file);

	free(out);
	free(fmt);
}

/* Log a debug message. */
void
log_debug(const char *msg, ...)
{
	va_list	ap;

	va_start(ap, msg);
	log_vwrite(msg, ap);
	va_end(ap);
}

/* Log a critical error with error string and die. */
__dead void
fatal(const char *msg, ...)
{
	char	*fmt;
	va_list	 ap;

	va_start(ap, msg);
	if (asprintf(&fmt, "fatal: %s: %s", msg, strerror(errno)) == -1)
		exit(1);
	log_vwrite(fmt, ap);
	va_end(ap);
	exit(1);
}

/* Log a critical error and die. */
__dead void
fatalx(const char *msg, ...)
{
	char	*fmt;
	va_list	 ap;

	va_start(ap, msg);
	if (asprintf(&fmt, "fatal: %s", msg) == -1)
		exit(1);
	log_vwrite(fmt, ap);
	va_end(ap);
	exit(1);
}
@


1.23
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.22 2015/12/14 00:32:19 nicm Exp $ */
d137 1
d152 1
@


1.22
log
@Remove some stray debug code.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.21 2015/12/14 00:31:54 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.21
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.20 2015/11/24 21:19:46 nicm Exp $ */
a146 1
	abort();
@


1.20
log
@Make the log stuff a bit tidier with some helper functions.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.19 2015/11/18 14:27:44 nicm Exp $ */
d147 1
@


1.19
log
@Use __unused rather than rolling our own.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.18 2015/11/18 13:06:54 nicm Exp $ */
d25 1
d30 2
a31 1
FILE	*log_file;
d33 2
a34 2
void	 log_event_cb(int, const char *);
void	 log_vwrite(const char *, va_list);
d37 1
a37 1
void
d43 14
d59 1
a59 1
log_open(const char *path)
d61 5
d69 1
d71 1
d91 1
a91 1
void
@


1.18
log
@Sync the entire xmalloc.[ch] with the other users, but with the addition
of xrealloc, xvasprintf, xvsnprintf.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.17 2015/09/24 12:03:58 nicm Exp $ */
d36 1
a36 1
log_event_cb(unused int severity, const char *msg)
@


1.17
log
@Do not leak log file descriptor.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.16 2015/09/14 12:12:24 nicm Exp $ */
d105 1
a105 1
log_fatal(const char *msg, ...)
d119 1
a119 1
log_fatalx(const char *msg, ...)
@


1.16
log
@Move tzset() from log_open to main.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.15 2015/09/01 19:14:43 nicm Exp $ */
d45 3
@


1.15
log
@Pass logging through vis(3).
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.14 2015/08/29 00:24:44 nicm Exp $ */
a50 2

	tzset();
@


1.14
log
@Microseconds in log time.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.13 2015/08/28 12:15:54 nicm Exp $ */
d25 1
d70 1
a70 1
	char		*fmt;
d76 5
d82 2
a83 4
	if (asprintf(&fmt, "%lld.%06d %s\n", (long long)tv.tv_sec,
	    (int)tv.tv_usec, msg) == -1)
		exit(1);
	if (vfprintf(log_file, fmt, ap) == -1)
d86 2
@


1.13
log
@Log time with message.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.12 2014/11/26 18:34:51 millert Exp $ */
d69 2
a70 2
	char	*fmt;
	time_t	 t;
d75 3
a77 2
	t = time(NULL);
	if (asprintf(&fmt, "%lld %s\n", (long long)t, msg) == -1)
@


1.12
log
@Prefer setvbuf() to setlinebuf() for portability; ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.11 2014/10/20 23:57:13 nicm Exp $ */
d70 1
d75 2
a76 1
	if (asprintf(&fmt, "%s\n", msg) == -1)
@


1.11
log
@Better format for printf format attributes.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.10 2014/03/31 21:42:45 nicm Exp $ */
d48 1
a48 1
	setlinebuf(log_file);
@


1.10
log
@Remove log_debug2 as well and simplify log.c.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.9 2014/03/31 21:42:05 nicm Exp $ */
d83 1
a83 1
void printflike1
d94 1
a94 1
__dead void printflike1
d108 1
a108 1
__dead void printflike1
@


1.9
log
@Remove unused log functions.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.8 2012/05/30 15:01:21 nicm Exp $ */
a24 2
#include <syslog.h>
#include <time.h>
d28 1
a28 2
/* Log file, if needed. */
FILE		*log_file;
d30 2
a31 6
/* Debug level. */
int		 log_level = 0;

void		 log_event_cb(int, const char *);
void		 log_vwrite(const char *, va_list);
__dead void	 log_vfatal(const char *, va_list);
d42 1
a42 1
log_open(int level, const char *path)
a46 1
	log_level = level;
d60 1
d88 3
a90 38
	if (log_level > 0) {
		va_start(ap, msg);
		log_vwrite(msg, ap);
		va_end(ap);
	}
}

/* Log a debug message at level 2. */
void printflike1
log_debug2(const char *msg, ...)
{
	va_list	ap;

	if (log_level > 1) {
		va_start(ap, msg);
		log_vwrite(msg, ap);
		va_end(ap);
	}
}

/* Log a critical error, with error string if necessary, and die. */
__dead void
log_vfatal(const char *msg, va_list ap)
{
	char	*fmt;

	if (errno != 0) {
		if (asprintf(&fmt, "fatal: %s: %s", msg, strerror(errno)) == -1)
			exit(1);
		log_vwrite(fmt, ap);
	} else {
		if (asprintf(&fmt, "fatal: %s", msg) == -1)
			exit(1);
		log_vwrite(fmt, ap);
	}
	free(fmt);

	exit(1);
d93 1
a93 1
/* Log a critical error, with error string, and die. */
d97 2
a98 1
	va_list	ap;
d101 4
a104 1
	log_vfatal(msg, ap);
d111 2
a112 1
	va_list	ap;
a113 1
	errno = 0;
d115 4
a118 1
	log_vfatal(msg, ap);
@


1.8
log
@Do not use stderr for log file and don't call log_close when not needed.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.7 2012/05/25 08:28:10 nicm Exp $ */
d44 1
a44 1
	log_warnx("%s", msg);
a86 39
}

/* Log a warning with error string. */
void printflike1
log_warn(const char *msg, ...)
{
	va_list	 ap;
	char	*fmt;

	va_start(ap, msg);
	if (asprintf(&fmt, "%s: %s", msg, strerror(errno)) == -1)
		exit(1);
	log_vwrite(fmt, ap);
	free(fmt);
	va_end(ap);
}

/* Log a warning. */
void printflike1
log_warnx(const char *msg, ...)
{
	va_list	ap;

	va_start(ap, msg);
	log_vwrite(msg, ap);
	va_end(ap);
}

/* Log an informational message. */
void printflike1
log_info(const char *msg, ...)
{
	va_list	ap;

	if (log_level > -1) {
		va_start(ap, msg);
		log_vwrite(msg, ap);
		va_end(ap);
	}
@


1.7
log
@Simplify logging and just fprintf(stderr, ...) for early errors.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.6 2012/03/17 18:38:58 nicm Exp $ */
d31 1
a31 1
FILE		*log_file = stderr;
d66 1
a66 1
	if (log_file != stderr)
d77 3
@


1.6
log
@Fix warnings. Doh.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.5 2012/03/17 18:23:03 nicm Exp $ */
a29 6
/* Logging type. */
#define LOG_TYPE_OFF 0
#define LOG_TYPE_TTY 1
#define LOG_TYPE_FILE 2
int	log_type = LOG_TYPE_OFF;

d31 1
a31 1
FILE   *log_file;
d34 1
a34 1
int	log_level;
d37 1
a37 1
void		 log_vwrite(int, const char *, va_list);
a46 14
/* Open logging to tty. */
void
log_open_tty(int level)
{
	log_type = LOG_TYPE_TTY;
	log_level = level;

	setlinebuf(stderr);
	setlinebuf(stdout);
	event_set_log_callback(log_event_cb);

	tzset();
}

d49 1
a49 1
log_open_file(int level, const char *path)
a53 2

	log_type = LOG_TYPE_FILE;
d66 1
a66 1
	if (log_type == LOG_TYPE_FILE)
a69 2

	log_type = LOG_TYPE_OFF;
d74 1
a74 1
log_vwrite(int pri, const char *msg, va_list ap)
a76 1
	FILE	*f = log_file;
d78 6
a83 16
	switch (log_type) {
	case LOG_TYPE_TTY:
		if (pri == LOG_INFO)
			f = stdout;
		else
			f = stderr;
		/* FALLTHROUGH */
	case LOG_TYPE_FILE:
		if (asprintf(&fmt, "%s\n", msg) == -1)
			exit(1);
		if (vfprintf(f, fmt, ap) == -1)
			exit(1);
		fflush(f);
		free(fmt);
		break;
	}
d96 1
a96 1
	log_vwrite(LOG_CRIT, fmt, ap);
d108 1
a108 1
	log_vwrite(LOG_CRIT, msg, ap);
d120 1
a120 1
		log_vwrite(LOG_INFO, msg, ap);
d133 1
a133 1
		log_vwrite(LOG_DEBUG, msg, ap);
d146 1
a146 1
		log_vwrite(LOG_DEBUG, msg, ap);
d160 1
a160 1
		log_vwrite(LOG_CRIT, fmt, ap);
d164 1
a164 1
		log_vwrite(LOG_CRIT, fmt, ap);
@


1.5
log
@Redirect libevent logging to tmux's log.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.4 2009/12/03 22:50:10 nicm Exp $ */
d42 1
d50 1
a50 1
	log_warnx(msg);
@


1.4
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.3 2009/07/21 18:40:30 nicm Exp $ */
d45 7
d61 1
d78 1
d89 2
@


1.3
log
@Remove a couple of unused functions and fix a type ("FALLTHOUGH"), found by
lint.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.2 2009/06/25 06:23:10 nicm Exp $ */
d186 1
a186 1
       			exit(1);
@


1.2
log
@tmux doesn't and won't need syslog logging, so remove it and some other unused
functions found by lint.

Also move a couple of internal function declarations into file scope.
@
text
@d1 1
a1 1
/* $OpenBSD: log.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a167 13
		va_start(ap, msg);
		log_vwrite(LOG_DEBUG, msg, ap);
		va_end(ap);
	}
}

/* Log a debug message at level 3. */
void printflike1
log_debug3(const char *msg, ...)
{
	va_list	ap;

	if (log_level > 2) {
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d32 2
a33 3
#define LOG_TYPE_SYSLOG 1
#define LOG_TYPE_TTY 2
#define LOG_TYPE_FILE 3
d42 2
a43 11
/* Open logging to syslog. */
void
log_open_syslog(int level)
{
	log_type = LOG_TYPE_SYSLOG;
	log_level = level;

	openlog(__progname, LOG_PID|LOG_NDELAY, LOG_FACILITY);

	tzset();
}
a85 11
log_write(int pri, const char *msg, ...)
{
	va_list	ap;

	va_start(ap, msg);
	log_vwrite(pri, msg, ap);
	va_end(ap);
}

/* Write a log message. */
void
a91 3
	case LOG_TYPE_SYSLOG:
		vsyslog(pri, msg, ap);
		break;
@

