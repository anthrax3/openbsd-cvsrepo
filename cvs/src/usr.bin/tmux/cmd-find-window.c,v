head	1.39;
access;
symbols
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.37.0.4
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.37.0.2
	OPENBSD_5_9_BASE:1.37
	OPENBSD_5_8:1.33.0.4
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.20.0.2
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.17.0.2
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.39
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.38;
commitid	pxm6osuE99zELpkU;

1.38
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.37;
commitid	TaZ3kOtGiWwKofka;

1.37
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.36;
commitid	P3qmSOx6KrDBsb0c;

1.36
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.35;
commitid	rE682EC14v4gpeFy;

1.35
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.34;
commitid	gsQkQsSyBCSmU9ax;

1.34
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.33;
commitid	uzMkp8Z4FE6WB6s6;

1.33
date	2015.05.07.07.59.52;	author nicm;	state Exp;
branches;
next	1.32;
commitid	9KSXsIJOM3jL82CS;

1.32
date	2015.04.27.16.25.57;	author nicm;	state Exp;
branches;
next	1.31;
commitid	0WBWxxZyxaAFVhmn;

1.31
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.30;
commitid	b1G1TVWY7l4KyoY6;

1.30
date	2014.10.22.23.18.53;	author nicm;	state Exp;
branches;
next	1.29;
commitid	eFDptKeckheZa4ap;

1.29
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.28;
commitid	RV1NOSXD1mUR8LDP;

1.28
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.27;
commitid	Gq8hgMoG3t1Wy1Zv;

1.27
date	2014.05.08.06.06.07;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2014.04.17.14.45.49;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2013.10.10.12.00.19;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.21.16.09.59;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.21.16.09.17;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.21.16.08.24;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2012.10.25.11.26.47;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2012.09.03.12.20.17;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.06.25.14.08.55;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.06.25.13.49.16;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.04.01.20.53.47;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.04.01.08.10.56;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2012.03.20.23.20.08;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2012.03.20.17.09.48;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.20.00.03.55;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.17.07.05.58;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.24.22.49.56;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@/* $OpenBSD: cmd-find-window.c,v 1.38 2016/10/10 21:51:39 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <fnmatch.h>
#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Find window containing text.
 */

#define FIND_WINDOW_TEMPLATE					\
	"#{window_index}: #{window_name} "			\
	"[#{window_width}x#{window_height}] "			\
	"(#{window_panes} panes) #{window_find_matches}"

static enum cmd_retval	cmd_find_window_exec(struct cmd *, struct cmdq_item *);

static void		cmd_find_window_callback(struct window_choose_data *);

/* Flags for determining matching behavior. */
#define CMD_FIND_WINDOW_BY_TITLE   0x1
#define CMD_FIND_WINDOW_BY_CONTENT 0x2
#define CMD_FIND_WINDOW_BY_NAME    0x4

#define CMD_FIND_WINDOW_ALL		\
	(CMD_FIND_WINDOW_BY_TITLE |	\
	 CMD_FIND_WINDOW_BY_CONTENT |	\
	 CMD_FIND_WINDOW_BY_NAME)

const struct cmd_entry cmd_find_window_entry = {
	.name = "find-window",
	.alias = "findw",

	.args = { "F:CNt:T", 1, 4 },
	.usage = "[-CNT] [-F format] " CMD_TARGET_WINDOW_USAGE " match-string",

	.tflag = CMD_WINDOW,

	.flags = 0,
	.exec = cmd_find_window_exec
};

struct cmd_find_window_data {
	struct winlink	*wl;
	char		*list_ctx;
	u_int		 pane_id;
	TAILQ_ENTRY(cmd_find_window_data) entry;
};
TAILQ_HEAD(cmd_find_window_list, cmd_find_window_data);

static u_int	cmd_find_window_match_flags(struct args *);
static void	cmd_find_window_match(struct cmd_find_window_list *, int,
		    struct winlink *, const char *, const char *);

static u_int
cmd_find_window_match_flags(struct args *args)
{
	u_int	match_flags = 0;

	/* Turn on flags based on the options. */
	if (args_has(args, 'T'))
		match_flags |= CMD_FIND_WINDOW_BY_TITLE;
	if (args_has(args, 'C'))
		match_flags |= CMD_FIND_WINDOW_BY_CONTENT;
	if (args_has(args, 'N'))
		match_flags |= CMD_FIND_WINDOW_BY_NAME;

	/* If none of the flags were set, default to matching anything. */
	if (match_flags == 0)
		match_flags = CMD_FIND_WINDOW_ALL;

	return (match_flags);
}

static void
cmd_find_window_match(struct cmd_find_window_list *find_list,
    int match_flags, struct winlink *wl, const char *str,
    const char *searchstr)
{
	struct cmd_find_window_data	*find_data;
	struct window_pane		*wp;
	u_int				 i, line;
	char				*sres;

	find_data = xcalloc(1, sizeof *find_data);

	i = 0;
	TAILQ_FOREACH(wp, &wl->window->panes, entry) {
		i++;

		if ((match_flags & CMD_FIND_WINDOW_BY_NAME) &&
		    fnmatch(searchstr, wl->window->name, 0) == 0) {
			find_data->list_ctx = xstrdup("");
			break;
		}

		if ((match_flags & CMD_FIND_WINDOW_BY_TITLE) &&
		    fnmatch(searchstr, wp->base.title, 0) == 0) {
			xasprintf(&find_data->list_ctx,
			    "pane %u title: \"%s\"", i - 1, wp->base.title);
			break;
		}

		if (match_flags & CMD_FIND_WINDOW_BY_CONTENT &&
		    (sres = window_pane_search(wp, str, &line)) != NULL) {
			xasprintf(&find_data->list_ctx,
			    "pane %u line %u: \"%s\"", i - 1, line + 1, sres);
			free(sres);
			break;
		}
	}

	if (find_data->list_ctx != NULL) {
		find_data->wl = wl;
		find_data->pane_id = i - 1;
		TAILQ_INSERT_TAIL(find_list, find_data, entry);
	} else
		free(find_data);
}

static enum cmd_retval
cmd_find_window_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args			*args = self->args;
	struct client			*c = item->state.c;
	struct window_choose_data	*cdata;
	struct session			*s = item->state.tflag.s;
	struct winlink			*wl = item->state.tflag.wl, *wm;
	struct cmd_find_window_list	 find_list;
	struct cmd_find_window_data	*find_data;
	struct cmd_find_window_data	*find_data1;
	char				*str, *searchstr;
	const char			*template;
	u_int				 i, match_flags;

	if (c == NULL) {
		cmdq_error(item, "no client available");
		return (CMD_RETURN_ERROR);
	}

	if ((template = args_get(args, 'F')) == NULL)
		template = FIND_WINDOW_TEMPLATE;

	match_flags = cmd_find_window_match_flags(args);
	str = args->argv[0];

	TAILQ_INIT(&find_list);

	xasprintf(&searchstr, "*%s*", str);
	RB_FOREACH(wm, winlinks, &s->windows)
	    cmd_find_window_match(&find_list, match_flags, wm, str, searchstr);
	free(searchstr);

	if (TAILQ_EMPTY(&find_list)) {
		cmdq_error(item, "no windows matching: %s", str);
		return (CMD_RETURN_ERROR);
	}

	if (TAILQ_NEXT(TAILQ_FIRST(&find_list), entry) == NULL) {
		if (session_select(s, TAILQ_FIRST(&find_list)->wl->idx) == 0)
			server_redraw_session(s);
		recalculate_sizes();
		goto out;
	}

	if (window_pane_set_mode(wl->window->active, &window_choose_mode) != 0)
		goto out;

	i = 0;
	TAILQ_FOREACH(find_data, &find_list, entry) {
		cdata = window_choose_data_create(TREE_OTHER, c, c->session);
		cdata->idx = find_data->wl->idx;
		cdata->wl = find_data->wl;

		cdata->ft_template = xstrdup(template);
		cdata->pane_id = find_data->pane_id;

		format_add(cdata->ft, "line", "%u", i);
		format_add(cdata->ft, "window_find_matches", "%s",
		    find_data->list_ctx);
		format_defaults(cdata->ft, NULL, s, find_data->wl, NULL);

		window_choose_add(wl->window->active, cdata);

		i++;
	}

	window_choose_ready(wl->window->active, 0, cmd_find_window_callback);

out:
	TAILQ_FOREACH_SAFE(find_data, &find_list, entry, find_data1) {
		free(find_data->list_ctx);
		TAILQ_REMOVE(&find_list, find_data, entry);
		free(find_data);
	}
	return (CMD_RETURN_NORMAL);
}

static void
cmd_find_window_callback(struct window_choose_data *cdata)
{
	struct session		*s;
	struct window_pane	*wp;

	if (cdata == NULL)
		return;

	s = cdata->start_session;
	if (!session_alive(s))
		return;

	wp = window_pane_at_index(cdata->wl->window, cdata->pane_id);
	if (wp != NULL && window_pane_visible(wp))
		window_set_active_pane(cdata->wl->window, wp);

	if (session_select(s, cdata->idx) == 0) {
		server_redraw_session(s);
		recalculate_sizes();
	}
}
@


1.38
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.37 2016/01/19 15:59:12 nicm Exp $ */
d36 1
a36 1
static enum cmd_retval	 cmd_find_window_exec(struct cmd *, struct cmd_q *);
d38 1
a38 1
static void	cmd_find_window_callback(struct window_choose_data *);
d142 1
a142 1
cmd_find_window_exec(struct cmd *self, struct cmd_q *cmdq)
d145 1
a145 1
	struct client			*c = cmdq->state.c;
d147 2
a148 2
	struct session			*s = cmdq->state.tflag.s;
	struct winlink			*wl = cmdq->state.tflag.wl, *wm;
d157 1
a157 1
		cmdq_error(cmdq, "no client available");
d175 1
a175 1
		cmdq_error(cmdq, "no windows matching: %s", str);
@


1.37
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.36 2015/12/14 00:31:54 nicm Exp $ */
d36 1
a36 1
enum cmd_retval	 cmd_find_window_exec(struct cmd *, struct cmd_q *);
d38 1
a38 1
void	cmd_find_window_callback(struct window_choose_data *);
d71 3
a73 3
u_int	cmd_find_window_match_flags(struct args *);
void	cmd_find_window_match(struct cmd_find_window_list *, int,
	    struct winlink *, const char *, const char *);
d75 1
a75 1
u_int
d95 1
a95 1
void
d141 1
a141 1
enum cmd_retval
d219 1
a219 1
void
@


1.36
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.35 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.35
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.34 2015/12/13 14:32:38 nicm Exp $ */
d57 3
a59 1
	.flags = CMD_WINDOW_T,
@


1.34
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.33 2015/05/07 07:59:52 nicm Exp $ */
d51 8
a58 5
	"find-window", "findw",
	"F:CNt:T", 1, 4,
	"[-CNT] [-F format] " CMD_TARGET_WINDOW_USAGE " match-string",
	CMD_WINDOW_T,
	cmd_find_window_exec
@


1.33
log
@Use a TAILQ not array for find-window.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.32 2015/04/27 16:25:57 nicm Exp $ */
d54 1
a54 1
	0,
d140 1
a140 1
	struct client			*c;
d142 2
a143 2
	struct session			*s;
	struct winlink			*wl, *wm;
d151 1
a151 1
	if ((c = cmd_find_client(cmdq, NULL, 1)) == NULL) {
a154 4
	s = c->session;

	if ((wl = cmd_find_window(cmdq, args_get(args, 't'), NULL)) == NULL)
		return (CMD_RETURN_ERROR);
@


1.32
log
@Rewrite of the target resolution internals to be simpler and more
consistent but with much less duplication, but keeping the same internal
API. Also adds more readable aliases for some of the special tokens used
in targets (eg "{start}" instead of "^"). Some behaviours may have
changed, for example prefix matches now happen before fnmatch.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.31 2015/02/05 10:29:43 nicm Exp $ */
d62 1
d64 1
a64 1
ARRAY_DECL(cmd_find_window_data_list, struct cmd_find_window_data);
d67 1
a67 1
void	cmd_find_window_match(struct cmd_find_window_data_list *, int,
d91 1
a91 1
cmd_find_window_match(struct cmd_find_window_data_list *find_list,
d95 1
a95 1
	struct cmd_find_window_data	 find_data;
d100 1
a100 1
	memset(&find_data, 0, sizeof find_data);
d108 1
a108 1
			find_data.list_ctx = xstrdup("");
d114 1
a114 1
			xasprintf(&find_data.list_ctx,
d121 1
a121 1
			xasprintf(&find_data.list_ctx,
d127 7
a133 5
	if (find_data.list_ctx != NULL) {
		find_data.wl = wl;
		find_data.pane_id = i - 1;
		ARRAY_ADD(find_list, find_data);
	}
d144 3
a146 1
	struct cmd_find_window_data_list find_list;
d166 1
a166 1
	ARRAY_INIT(&find_list);
d173 1
a173 1
	if (ARRAY_LENGTH(&find_list) == 0) {
a174 1
		ARRAY_FREE(&find_list);
d178 2
a179 2
	if (ARRAY_LENGTH(&find_list) == 1) {
		if (session_select(s, ARRAY_FIRST(&find_list).wl->idx) == 0)
d188 2
a189 3
	for (i = 0; i < ARRAY_LENGTH(&find_list); i++) {
		wm = ARRAY_ITEM(&find_list, i).wl;

d191 2
a192 2
		cdata->idx = wm->idx;
		cdata->wl = wm;
d195 1
a195 1
		cdata->pane_id = ARRAY_ITEM(&find_list, i).pane_id;
d199 2
a200 2
		    ARRAY_ITEM(&find_list, i).list_ctx);
		format_defaults(cdata->ft, NULL, s, wm, NULL);
d203 2
d210 5
a214 3
	for (i = 0; i < ARRAY_LENGTH(&find_list); i++)
		free(ARRAY_ITEM(&find_list, i).list_ctx);
	ARRAY_FREE(&find_list);
@


1.31
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.30 2014/10/22 23:18:53 nicm Exp $ */
d146 1
a146 1
	if ((c = cmd_current_client(cmdq)) == NULL) {
@


1.30
log
@Fix some spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.29 2014/10/20 23:35:28 nicm Exp $ */
d197 1
a197 3
		format_session(cdata->ft, s);
		format_winlink(cdata->ft, s, wm);
		format_window_pane(cdata->ft, wm->window->active);
@


1.29
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.28 2014/10/20 22:29:25 nicm Exp $ */
d165 1
a165 1
	    cmd_find_window_match (&find_list, match_flags, wm, str, searchstr);
@


1.28
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.27 2014/05/08 06:06:07 nicm Exp $ */
d30 5
@


1.27
log
@Plug a memory leak, from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.26 2014/04/17 14:45:49 nicm Exp $ */
a49 1
	NULL,
@


1.26
log
@Some more long lines.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.25 2013/10/10 12:00:19 nicm Exp $ */
d203 2
@


1.25
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.24 2013/03/24 09:54:10 nicm Exp $ */
d87 2
a88 1
    int match_flags, struct winlink *wl, const char *str, const char *searchstr)
@


1.24
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.23 2013/03/21 16:09:59 nicm Exp $ */
a49 1
	NULL,
@


1.23
log
@Allow choose commands to be used outside tmux, so long as at least one
client is attached.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.22 2013/03/21 16:09:17 nicm Exp $ */
d31 1
a31 1
enum cmd_retval	 cmd_find_window_exec(struct cmd *, struct cmd_ctx *);
d130 1
a130 1
cmd_find_window_exec(struct cmd *self, struct cmd_ctx *ctx)
d142 2
a143 2
	if ((c = cmd_current_client(ctx)) == NULL) {
		ctx->error(ctx, "no client available");
d148 1
a148 1
	if ((wl = cmd_find_window(ctx, args_get(args, 't'), NULL)) == NULL)
d165 1
a165 1
		ctx->error(ctx, "no windows matching: %s", str);
@


1.22
log
@Remove free callback for window_choose_data objects.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.21 2013/03/21 16:08:24 nicm Exp $ */
d142 2
a143 2
	if (ctx->curclient == NULL) {
		ctx->error(ctx, "must be run interactively");
a145 1
	c = ctx->curclient;
@


1.21
log
@Miscellaneous tidying of choose API, including:

- rename client and session to start_client and start_session in
  window_choose_data struct. also add TREE_OTHER define and reorder
  the struct
- rename window_choose_ctx to window_choose_data_run
- don't pass a cmd_ctx into window_choose_create (will let it use a
  different client later). instead take type, session, client
- add window_choose_data_free and use it to dispose of wcd rather than
  each cmd-*.c doing it individually
- change so ref counting is done by wcd_add and wcd_free rather than
  callers
- also add a ref to tree_session
- all the callbacks except choose-client and find-window are the same so
  remove them and add window_choose_default_callback
- reorder/rename some other bits and pieces for tidyness
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.20 2012/10/25 11:26:47 nicm Exp $ */
d201 1
a201 2
	window_choose_ready(wl->window->active, 0, cmd_find_window_callback,
	    NULL);
@


1.20
log
@Add ability to active pane in list-windows and find-window formats, from
Carl Henrik Lunde.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.19 2012/09/03 12:20:17 nicm Exp $ */
a33 1
void	cmd_find_window_free(struct window_choose_data *);
d133 1
d146 2
a147 1
	s = ctx->curclient->session;
d184 1
a184 1
		cdata = window_choose_data_create(ctx);
a185 1
		cdata->client->references++;
d201 2
a202 2
	window_choose_ready(wl->window->active,
	    0, cmd_find_window_callback, cmd_find_window_free);
d218 1
a218 1
	s = cdata->session;
a229 13
}

void
cmd_find_window_free(struct window_choose_data *cdata)
{
	if (cdata == NULL)
		return;

	cdata->session->references--;

	free(cdata->ft_template);
	format_free(cdata->ft);
	free(cdata);
@


1.19
log
@When choosing a pane found by find-window, switch to that pane rather
than just the window. Also use a helper function for the inner loop.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.18 2012/08/14 08:51:53 nicm Exp $ */
d196 1
@


1.18
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.17 2012/07/11 07:10:15 nicm Exp $ */
a32 1
u_int	cmd_find_window_match_flags(struct args *);
d56 11
d87 43
d137 2
a138 4
	struct window_pane		*wp;
	ARRAY_DECL(, u_int)	 	 list_idx;
	ARRAY_DECL(, char *)	 	 list_ctx;
	char				*str, *sres, *sctx, *searchstr;
d140 1
a140 1
	u_int				 i, line, match_flags;
d157 1
a157 2
	ARRAY_INIT(&list_idx);
	ARRAY_INIT(&list_ctx);
d160 2
a161 37
	RB_FOREACH(wm, winlinks, &s->windows) {
		i = 0;
		TAILQ_FOREACH(wp, &wm->window->panes, entry) {
			i++;

			if ((match_flags & CMD_FIND_WINDOW_BY_NAME) &&
			    fnmatch(searchstr, wm->window->name, 0) == 0)
				sctx = xstrdup("");
			else {
				sres = NULL;
				if (match_flags & CMD_FIND_WINDOW_BY_CONTENT) {
					sres = window_pane_search(
					    wp, str, &line);
				}

				if (sres == NULL &&
				    (!(match_flags & CMD_FIND_WINDOW_BY_TITLE) ||
				     fnmatch(searchstr, wp->base.title, 0) != 0))
					continue;

				if (sres == NULL) {
					xasprintf(&sctx,
					    "pane %u title: \"%s\"", i - 1,
					    wp->base.title);
				} else {
					xasprintf(&sctx,
					    "pane %u line %u: \"%s\"", i - 1,
					    line + 1, sres);
					free(sres);
				}
			}

			ARRAY_ADD(&list_idx, wm->idx);
			ARRAY_ADD(&list_ctx, sctx);
			break;
		}
	}
d164 1
a164 1
	if (ARRAY_LENGTH(&list_idx) == 0) {
d166 1
a166 2
		ARRAY_FREE(&list_idx);
		ARRAY_FREE(&list_ctx);
d170 2
a171 2
	if (ARRAY_LENGTH(&list_idx) == 1) {
		if (session_select(s, ARRAY_FIRST(&list_idx)) == 0)
d180 2
a181 3
	for (i = 0; i < ARRAY_LENGTH(&list_idx); i++) {
		wm = winlink_find_by_index(
		    &s->windows, ARRAY_ITEM(&list_idx, i));
d186 1
d189 2
d193 1
a193 1
			ARRAY_ITEM(&list_ctx, i));
d204 1
a204 4

	ARRAY_FREE(&list_idx);
	ARRAY_FREE(&list_ctx);

d211 2
a212 1
	struct session	*s;
d220 4
@


1.17
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.16 2012/07/10 11:53:01 nicm Exp $ */
d101 1
a101 1
		template = DEFAULT_FIND_WINDOW_TEMPLATE;
@


1.16
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.15 2012/06/25 14:08:55 nicm Exp $ */
d31 1
a31 1
int	cmd_find_window_exec(struct cmd *, struct cmd_ctx *);
d77 1
a77 1
int
d93 1
a93 1
		return (-1);
d98 1
a98 1
		return (-1);
d153 1
a153 1
		return (-1);
d192 1
a192 1
	return (0);
@


1.15
log
@Clean up and simplify the choose mode code, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.14 2012/06/25 13:49:16 nicm Exp $ */
d22 1
d138 1
a138 1
					xfree(sres);
d147 1
a147 1
	xfree(searchstr);
d221 1
a221 1
	xfree(cdata->ft_template);
d223 1
a223 1
	xfree(cdata);
@


1.14
log
@Trim a blank line.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.13 2012/05/22 11:35:37 nicm Exp $ */
d33 2
a34 2
void	cmd_find_window_callback(void *, int);
void	cmd_find_window_free(void *);
a55 4
struct cmd_find_window_data {
	struct session	*session;
};

d80 1
a80 1
	struct cmd_find_window_data	*cdata;
a83 1
	struct format_tree		*ft;
a86 1
	char				*find_line;
d169 7
a175 3
		ft = format_create();
		format_add(ft, "line", "%u", i);
		format_add(ft, "window_find_matches", "%s",
d177 2
a178 4
		format_session(ft, s);
		format_winlink(ft, s, wm);

		find_line = format_expand(ft, template);
d180 1
a180 4
		window_choose_add(wl->window->active, wm->idx, "%s", find_line);

		xfree(find_line);
		format_free(ft);
a182 4
	cdata = xmalloc(sizeof *cdata);
	cdata->session = s;
	cdata->session->references++;

d184 1
a184 1
	    0, cmd_find_window_callback, cmd_find_window_free, cdata);
d187 1
d195 1
a195 1
cmd_find_window_callback(void *data, int idx)
d197 1
a197 2
	struct cmd_find_window_data	*cdata = data;
	struct session			*s = cdata->session;
d199 1
a199 1
	if (idx == -1)
d201 2
d206 1
a206 1
	if (session_select(s, idx) == 0) {
d213 1
a213 1
cmd_find_window_free(void *data)
d215 2
a216 1
	struct cmd_find_window_data	*cdata = data;
d219 3
@


1.13
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.12 2012/04/01 20:53:47 nicm Exp $ */
a44 1

@


1.12
log
@Minor style nits - return ().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.11 2012/04/01 08:10:56 nicm Exp $ */
d49 2
a50 2
	"CNt:T", 1, 4,
	"[-CNT] " CMD_TARGET_WINDOW_USAGE " match-string",
a87 1
	struct window			*w;
d89 1
d93 2
d106 3
a174 1
		w = wm->window;
d176 13
a188 5
		sctx = ARRAY_ITEM(&list_ctx, i);
		window_choose_add(wl->window->active,
		    wm->idx, "%3d: %s [%ux%u] (%u panes) %s", wm->idx, w->name,
		    w->sx, w->sy, window_count_panes(w), sctx);
		xfree(sctx);
@


1.11
log
@Only find each window once no matter how many panes, from Jonathan
Daugherty.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.10 2012/03/20 23:20:08 nicm Exp $ */
d78 1
a78 1
	return match_flags;
@


1.10
log
@Remove a stale comment.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.9 2012/03/20 17:09:48 nicm Exp $ */
d145 1
@


1.9
log
@Add -C -N -T flags to find-window to find in content, name, title. From
Jonathan Daugherty.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.8 2011/01/04 00:42:46 nicm Exp $ */
a125 6
				/*
				 * If match_title isn't set we don't want to
				 * bother checking the title, but that also
				 * constitutes a failure to match so we still
				 * want to abort.
				 */
@


1.8
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.7 2010/12/20 00:03:55 nicm Exp $ */
d32 1
d36 11
d49 2
a50 2
	"t:", 1, 1,
	CMD_TARGET_WINDOW_USAGE " match-string",
d61 20
d93 1
a93 1
	u_int				 i, line;
d104 1
d116 2
a117 1
			if (fnmatch(searchstr, wm->window->name, 0) == 0)
d120 12
a131 1
				sres = window_pane_search(wp, str, &line);
d133 2
a134 1
				    fnmatch(searchstr, wp->base.title, 0) != 0)
@


1.7
log
@Unify the way sessions are used by callbacks - store the address and use
the reference count, then check it is still on the global sessions list
in the callback.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.6 2009/11/13 19:53:29 nicm Exp $ */
d37 1
d39 4
a42 6
	CMD_ARG1, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_find_window_exec,
	cmd_target_free,
	cmd_target_print
d52 1
a52 1
	struct cmd_target_data		*data = self->data;
d60 1
a60 1
	char				*sres, *sctx, *searchstr;
d69 1
a69 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
d72 2
d77 1
a77 1
	xasprintf(&searchstr, "*%s*", data->arg);
d86 1
a86 1
				sres = window_pane_search(wp, data->arg, &line);
d110 1
a110 1
		ctx->error(ctx, "no windows matching: %s", data->arg);
@


1.6
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.5 2009/07/26 12:58:44 nicm Exp $ */
d33 1
d47 1
a47 1
	u_int	session;
d138 2
a139 2
	if (session_index(s, &cdata->session) != 0)
		fatalx("session not found");
d141 2
a142 2
	window_choose_ready(
	    wl->window->active, 0, cmd_find_window_callback, xfree, cdata);
d155 6
a160 1
	struct session			*s;
d162 2
a163 4
	if (idx != -1 && cdata->session <= ARRAY_LENGTH(&sessions) - 1) {
		s = ARRAY_ITEM(&sessions, cdata->session);
		if (s != NULL && session_select(s, idx) == 0)
			server_redraw_session(s);
d166 9
@


1.5
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.4 2009/07/17 07:05:58 nicm Exp $ */
d37 1
a37 1
	CMD_ARG1, 0,
@


1.4
log
@A similar for fix for window_choose: don't rely on the callback always being
called to free data, have a separate free callback and call it from the mode
cleanup code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.3 2009/07/13 23:11:35 nicm Exp $ */
a40 2
	cmd_target_send,
	cmd_target_recv,
@


1.3
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.2 2009/06/24 22:49:56 nicm Exp $ */
d143 1
a143 1
	    wl->window->active, 0, cmd_find_window_callback, cdata);
a163 1
	xfree(cdata);
@


1.2
log
@Change find-window and monitor-content to use fnmatch(3). For convenience and
compatibility, *s are implicitly added at the start and end of the pattern.

Also display the line number and the entire line in the results, and lose the
nasty section_string function and the now empty util.c file.

Initially from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-find-window.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d37 1
a37 1
	CMD_ARG1,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d21 1
d62 2
a63 2
	char				*sres, *sctx;
	u_int				 i;
d77 1
d83 1
a83 1
			if (strstr(wm->window->name, data->arg) != NULL)
d86 1
a86 1
				sres = window_pane_search(wp, data->arg);
d88 1
a88 1
				    strstr(wp->base.title, data->arg) == NULL)
d96 3
a98 1
					xasprintf(&sctx, "\"%s\"", sres);
d107 1
@

