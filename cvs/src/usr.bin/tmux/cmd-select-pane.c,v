head	1.40;
access;
symbols
	OPENBSD_6_1:1.35.0.4
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.32.0.4
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.40
date	2017.08.30.10.33.57;	author nicm;	state Exp;
branches;
next	1.39;
commitid	Zpm5Qq40TI2OxytA;

1.39
date	2017.08.08.09.21.20;	author nicm;	state Exp;
branches;
next	1.38;
commitid	9GVpMGuHbZutKODu;

1.38
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.37;
commitid	RXMp6wwG5a5Y82bo;

1.37
date	2017.04.22.08.56.24;	author nicm;	state Exp;
branches;
next	1.36;
commitid	swq7JsAZEYBxos2Q;

1.36
date	2017.04.21.21.02.26;	author nicm;	state Exp;
branches;
next	1.35;
commitid	fKjSZftT2LZFziUL;

1.35
date	2016.11.16.00.24.03;	author nicm;	state Exp;
branches;
next	1.34;
commitid	ZQAQdE9Fy4gBpQvj;

1.34
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.33;
commitid	pxm6osuE99zELpkU;

1.33
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.32;
commitid	TaZ3kOtGiWwKofka;

1.32
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.31;
commitid	P3qmSOx6KrDBsb0c;

1.31
date	2015.12.31.18.34.47;	author nicm;	state Exp;
branches;
next	1.30;
commitid	qyni8dRfknqef1mr;

1.30
date	2015.12.15.00.00.01;	author nicm;	state Exp;
branches;
next	1.29;
commitid	yMmY7FLVcToE15ZM;

1.29
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.28;
commitid	rE682EC14v4gpeFy;

1.28
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.27;
commitid	gsQkQsSyBCSmU9ax;

1.27
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.26;
commitid	uzMkp8Z4FE6WB6s6;

1.26
date	2015.10.22.11.19.31;	author nicm;	state Exp;
branches;
next	1.25;
commitid	jbxKJ5Itu7USSDKL;

1.25
date	2015.09.14.11.34.50;	author nicm;	state Exp;
branches;
next	1.24;
commitid	jBSEJQfSIiCoo49j;

1.24
date	2015.06.04.11.43.51;	author nicm;	state Exp;
branches;
next	1.23;
commitid	rAvOUA4CI6VK3gQ6;

1.23
date	2015.04.29.16.26.17;	author nicm;	state Exp;
branches;
next	1.22;
commitid	bpjs7u6U3atfChNB;

1.22
date	2015.04.27.07.49.36;	author nicm;	state Exp;
branches;
next	1.21;
commitid	NC1OebvLMT6jxPeZ;

1.21
date	2015.04.19.21.05.27;	author nicm;	state Exp;
branches;
next	1.20;
commitid	ksfuI8mTVk7XPyr3;

1.20
date	2014.10.21.22.22.04;	author nicm;	state Exp;
branches;
next	1.19;
commitid	65v69dyr6BLoa8kb;

1.19
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.18;
commitid	Gq8hgMoG3t1Wy1Zv;

1.18
date	2014.08.11.22.14.30;	author nicm;	state Exp;
branches;
next	1.17;
commitid	whaUj6ycByfMr14q;

1.17
date	2013.10.10.12.00.22;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.31.20.54.42;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.01.04.02.03.41;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2010.03.22.19.07.52;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.03.12.51.05;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.30.13.45.56;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.20.19.35.33;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.14.07.23.36;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.40
log
@Pass flags into cmd_find_from_* to fix prefer-unattached, reported by
Thomas Sattler.
@
text
@/* $OpenBSD: cmd-select-pane.c,v 1.39 2017/08/08 09:21:20 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include "tmux.h"

/*
 * Select pane.
 */

static enum cmd_retval	cmd_select_pane_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_select_pane_entry = {
	.name = "select-pane",
	.alias = "selectp",

	.args = { "DdegLlMmP:Rt:U", 0, 0 },
	.usage = "[-DdegLlMmRU] [-P style] " CMD_TARGET_PANE_USAGE,

	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = 0,
	.exec = cmd_select_pane_exec
};

const struct cmd_entry cmd_last_pane_entry = {
	.name = "last-pane",
	.alias = "lastp",

	.args = { "det:", 0, 0 },
	.usage = "[-de] " CMD_TARGET_WINDOW_USAGE,

	.target = { 't', CMD_FIND_WINDOW, 0 },

	.flags = 0,
	.exec = cmd_select_pane_exec
};

static enum cmd_retval
cmd_select_pane_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct cmd_find_state	*current = &item->shared->current;
	struct winlink		*wl = item->target.wl;
	struct window		*w = wl->window;
	struct session		*s = item->target.s;
	struct window_pane	*wp = item->target.wp, *lastwp, *markedwp;
	const char		*style;

	if (self->entry == &cmd_last_pane_entry || args_has(args, 'l')) {
		lastwp = w->last;
		if (lastwp == NULL) {
			cmdq_error(item, "no last pane");
			return (CMD_RETURN_ERROR);
		}
		if (args_has(self->args, 'e'))
			lastwp->flags &= ~PANE_INPUTOFF;
		else if (args_has(self->args, 'd'))
			lastwp->flags |= PANE_INPUTOFF;
		else {
			server_unzoom_window(w);
			window_redraw_active_switch(w, lastwp);
			if (window_set_active_pane(w, lastwp)) {
				cmd_find_from_winlink(current, wl, 0);
				server_status_window(w);
				server_redraw_window_borders(w);
			}
		}
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(args, 'm') || args_has(args, 'M')) {
		if (args_has(args, 'm') && !window_pane_visible(wp))
			return (CMD_RETURN_NORMAL);
		lastwp = marked_pane.wp;

		if (args_has(args, 'M') || server_is_marked(s, wl, wp))
			server_clear_marked();
		else
			server_set_marked(s, wl, wp);
		markedwp = marked_pane.wp;

		if (lastwp != NULL) {
			server_redraw_window_borders(lastwp->window);
			server_status_window(lastwp->window);
		}
		if (markedwp != NULL) {
			server_redraw_window_borders(markedwp->window);
			server_status_window(markedwp->window);
		}
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(self->args, 'P') || args_has(self->args, 'g')) {
		if (args_has(args, 'P')) {
			style = args_get(args, 'P');
			if (style_parse(&grid_default_cell, &wp->colgc,
			    style) == -1) {
				cmdq_error(item, "bad style: %s", style);
				return (CMD_RETURN_ERROR);
			}
			wp->flags |= PANE_REDRAW;
		}
		if (args_has(self->args, 'g'))
			cmdq_print(item, "%s", style_tostring(&wp->colgc));
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(self->args, 'L')) {
		server_unzoom_window(wp->window);
		wp = window_pane_find_left(wp);
	} else if (args_has(self->args, 'R')) {
		server_unzoom_window(wp->window);
		wp = window_pane_find_right(wp);
	} else if (args_has(self->args, 'U')) {
		server_unzoom_window(wp->window);
		wp = window_pane_find_up(wp);
	} else if (args_has(self->args, 'D')) {
		server_unzoom_window(wp->window);
		wp = window_pane_find_down(wp);
	}
	if (wp == NULL)
		return (CMD_RETURN_NORMAL);

	if (args_has(self->args, 'e')) {
		wp->flags &= ~PANE_INPUTOFF;
		return (CMD_RETURN_NORMAL);
	}
	if (args_has(self->args, 'd')) {
		wp->flags |= PANE_INPUTOFF;
		return (CMD_RETURN_NORMAL);
	}

	if (wp == w->active)
		return (CMD_RETURN_NORMAL);
	server_unzoom_window(wp->window);
	if (!window_pane_visible(wp)) {
		cmdq_error(item, "pane not visible");
		return (CMD_RETURN_ERROR);
	}
	window_redraw_active_switch(w, wp);
	if (window_set_active_pane(w, wp)) {
		cmd_find_from_winlink_pane(current, wl, wp, 0);
		hooks_insert(s->hooks, item, current, "after-select-pane");
		server_status_window(w);
		server_redraw_window_borders(w);
	}

	return (CMD_RETURN_NORMAL);
}
@


1.39
log
@Hooks for after-select-pane and after-select-window.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.38 2017/04/22 10:22:39 nicm Exp $ */
d80 1
a80 1
				cmd_find_from_winlink(current, wl);
d159 1
a159 1
		cmd_find_from_winlink_pane(current, wl, wp);
@


1.38
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.37 2017/04/22 08:56:24 nicm Exp $ */
d159 2
a160 1
		cmd_find_from_winlink(current, wl);
@


1.37
log
@Mouse bindings and hooks set up an initial current state when running a
command. This is used for the session, window and pane for all commands
in the command sequence if there is no -t or -s.

However, using it for all commands in the command sequence means that if
the active pane or current session is changed, subsequent commands still
use the previous state. So make commands which explicitly change the
current state (such as neww and selectp) update it themselves for later
commands. Commands which may invalidate the state (like killp) are
already OK because an invalid state will be ignored.

Also fill in the current state for all key bindings rather than just the
mouse, so that any omissions are easier to spot.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.36 2017/04/21 21:02:26 nicm Exp $ */
d36 1
a36 1
	.tflag = CMD_PANE,
d49 1
a49 1
	.tflag = CMD_WINDOW,
d60 1
a60 1
	struct winlink		*wl = item->state.tflag.wl;
d62 2
a63 2
	struct session		*s = item->state.tflag.s;
	struct window_pane	*wp = item->state.tflag.wp, *lastwp, *markedwp;
@


1.36
log
@Rename a variable.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.35 2016/11/16 00:24:03 nicm Exp $ */
d59 1
a71 1

d80 1
d159 1
@


1.35
log
@The target validity check used window_pane_visible but that may be false
if the pane is zoomed, so instead add a new function to just check if
the pane is actually on screen (most commands still want to accept panes
invisible by zoom). Also reject panes outside the window for various
special targets. Problem reported by Sean Haugh.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.34 2016/10/16 19:04:05 nicm Exp $ */
d66 2
a67 1
		if (wl->window->last == NULL) {
d73 1
a73 1
			w->last->flags &= ~PANE_INPUTOFF;
d75 1
a75 1
			w->last->flags |= PANE_INPUTOFF;
d78 2
a79 2
			window_redraw_active_switch(w, w->last);
			if (window_set_active_pane(w, w->last)) {
a83 1

@


1.34
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.33 2016/10/10 21:51:39 nicm Exp $ */
a65 1

@


1.33
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.32 2016/01/19 15:59:12 nicm Exp $ */
d27 1
a27 1
static enum cmd_retval	 cmd_select_pane_exec(struct cmd *, struct cmd_q *);
d56 1
a56 1
cmd_select_pane_exec(struct cmd *self, struct cmd_q *cmdq)
d59 1
a59 1
	struct winlink		*wl = cmdq->state.tflag.wl;
d61 2
a62 2
	struct session		*s = cmdq->state.tflag.s;
	struct window_pane	*wp = cmdq->state.tflag.wp, *lastwp, *markedwp;
d68 1
a68 1
			cmdq_error(cmdq, "no last pane");
d115 1
a115 1
				cmdq_error(cmdq, "bad style: %s", style);
d121 1
a121 1
			cmdq_print(cmdq, "%s", style_tostring(&wp->colgc));
d154 1
a154 1
		cmdq_error(cmdq, "pane not visible");
@


1.32
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.31 2015/12/31 18:34:47 nicm Exp $ */
d27 1
a27 1
enum cmd_retval	 cmd_select_pane_exec(struct cmd *, struct cmd_q *);
d55 1
a55 1
enum cmd_retval
@


1.31
log
@Remove an extra unzoom call which was probably a merge error.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.30 2015/12/15 00:00:01 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.30
log
@Make the marked pane a cmd_find_state.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.29 2015/12/14 00:31:54 nicm Exp $ */
a85 6
	}

	server_unzoom_window(wp->window);
	if (!window_pane_visible(wp)) {
		cmdq_error(cmdq, "pane not visible");
		return (CMD_RETURN_ERROR);
@


1.29
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.28 2015/12/13 21:53:57 nicm Exp $ */
d97 1
a97 1
		lastwp = marked_window_pane;
d103 1
a103 1
		markedwp = marked_window_pane;
@


1.28
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.27 2015/12/13 14:32:38 nicm Exp $ */
d36 3
a38 1
	.flags = CMD_PANE_T,
d49 3
a51 1
	.flags = CMD_WINDOW_T,
@


1.27
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.26 2015/10/22 11:19:31 nicm Exp $ */
d30 8
a37 5
	"select-pane", "selectp",
	"DdegLlMmP:Rt:U", 0, 0,
	"[-DdegLlMmRU] [-P style] " CMD_TARGET_PANE_USAGE,
	CMD_PANE_T,
	cmd_select_pane_exec
d41 8
a48 5
	"last-pane", "lastp",
	"det:", 0, 0,
	"[-de] " CMD_TARGET_WINDOW_USAGE,
	CMD_WINDOW_T,
	cmd_select_pane_exec
@


1.26
log
@Unzoom before -LRUD, reported by Andy Weidenbaum.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.25 2015/09/14 11:34:50 nicm Exp $ */
d33 1
a33 1
	0,
d41 1
a41 1
	0,
d49 4
a52 4
	struct winlink		*wl;
	struct window		*w;
	struct session		*s;
	struct window_pane	*wp, *lastwp, *markedwp;
a55 4
		wl = cmd_find_window(cmdq, args_get(args, 't'), NULL);
		if (wl == NULL)
			return (CMD_RETURN_ERROR);
		w = wl->window;
d57 1
a57 1
		if (w->last == NULL) {
d78 3
a80 1
	if ((wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp)) == NULL)
d82 1
a82 1
	w = wl->window;
@


1.25
log
@When the active pane changes, redraw panes if the style has
changed. From Cam Hutchison.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.24 2015/06/04 11:43:51 nicm Exp $ */
d123 2
a124 1
	if (args_has(self->args, 'L'))
d126 2
a127 1
	else if (args_has(self->args, 'R'))
d129 2
a130 1
	else if (args_has(self->args, 'U'))
d132 2
a133 1
	else if (args_has(self->args, 'D'))
d135 1
@


1.24
log
@Add support for a single "marked pane". There is one marked pane in the
server at a time; it may be toggled or cleared with select-pane -m and
-M (the border is highlighted). A new target '~' or '{marked}' specifies
the marked pane to commands and it is the default target for the
swap-pane and join-pane -s flag (this makes them much simpler to use -
mark the source pane and then change to the target pane to run swapp or
joinp).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.23 2015/04/29 16:26:17 nicm Exp $ */
d50 1
d59 1
d61 1
a61 1
		if (wl->window->last == NULL) {
d67 1
a67 1
			wl->window->last->flags &= ~PANE_INPUTOFF;
d69 1
a69 1
			wl->window->last->flags |= PANE_INPUTOFF;
d71 6
a76 4
			server_unzoom_window(wl->window);
			window_set_active_pane(wl->window, wl->window->last);
			server_status_window(wl->window);
			server_redraw_window_borders(wl->window);
d84 1
d143 1
a143 1
	if (wp == wl->window->active)
d150 4
a153 3
	if (window_set_active_pane(wl->window, wp)) {
		server_status_window(wl->window);
		server_redraw_window_borders(wl->window);
@


1.23
log
@Do not complain when directions fail.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.22 2015/04/27 07:49:36 nicm Exp $ */
d31 2
a32 2
	"DdegLlP:Rt:U", 0, 0,
	"[-DdegLlRU] [-P style] " CMD_TARGET_PANE_USAGE,
d50 2
a51 1
	struct window_pane	*wp;
d78 1
a78 1
	if ((wl = cmd_find_pane(cmdq, args_get(args, 't'), NULL, &wp)) == NULL)
d80 22
@


1.22
log
@If the requested pane is already active, do not unzoom the window (or do
anything else). Prevents mouse clicking when zoomed causing unzoom,
reported by Jose Antonio Delgado Alfonso (with a different fix).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.21 2015/04/19 21:05:27 nicm Exp $ */
d103 2
a104 4
	if (wp == NULL) {
		cmdq_error(cmdq, "pane not found");
		return (CMD_RETURN_ERROR);
	}
@


1.21
log
@Support setting the default window and pane background colours (window
and active pane via window-style and window-active-style options, an
individual pane by a new select-pane -P flag). From J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.20 2014/10/21 22:22:04 nicm Exp $ */
a79 6
	server_unzoom_window(wp->window);
	if (!window_pane_visible(wp)) {
		cmdq_error(cmdq, "pane not visible");
		return (CMD_RETURN_ERROR);
	}

d108 1
a108 1
	if (args_has(self->args, 'e'))
d110 3
a112 1
	else if (args_has(self->args, 'd'))
d114 11
a124 1
	else if (window_set_active_pane(wl->window, wp)) {
@


1.20
log
@Only redraw pane when it has actually changed.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.19 2014/10/20 22:29:25 nicm Exp $ */
d31 2
a32 2
	"DdeLlRt:U", 0, 0,
	"[-DdeLlRU] " CMD_TARGET_PANE_USAGE,
d51 1
d84 15
@


1.19
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.18 2014/08/11 22:14:30 nicm Exp $ */
d102 1
a102 2
	else {
		window_set_active_pane(wl->window, wp);
@


1.18
log
@Add flags to selectp to enable and disable input to a pane, from Anish
Athalye.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.17 2013/10/10 12:00:22 nicm Exp $ */
a26 1
void		 cmd_select_pane_key_binding(struct cmd *, int);
a33 1
	cmd_select_pane_key_binding,
a41 1
	NULL,
a43 16

void
cmd_select_pane_key_binding(struct cmd *self, int key)
{
	self->args = args_create(0);
	if (key == KEYC_UP)
		args_set(self->args, 'U', NULL);
	if (key == KEYC_DOWN)
		args_set(self->args, 'D', NULL);
	if (key == KEYC_LEFT)
		args_set(self->args, 'L', NULL);
	if (key == KEYC_RIGHT)
		args_set(self->args, 'R', NULL);
	if (key == 'o')
		args_set(self->args, 't', ":.+");
}
@


1.17
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.16 2013/03/24 09:57:59 nicm Exp $ */
d32 2
a33 2
	"lDLRt:U", 0, 0,
	"[-lDLRU] " CMD_TARGET_PANE_USAGE,
d41 2
a42 2
	"t:", 0, 0,
	CMD_TARGET_WINDOW_USAGE,
d81 10
a90 4
		server_unzoom_window(wl->window);
		window_set_active_pane(wl->window, wl->window->last);
		server_status_window(wl->window);
		server_redraw_window_borders(wl->window);
d117 9
a125 3
	window_set_active_pane(wl->window, wp);
	server_status_window(wl->window);
	server_redraw_window_borders(wl->window);
@


1.16
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.15 2013/03/24 09:54:10 nicm Exp $ */
a35 1
	NULL,
a43 1
	NULL,
@


1.15
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.14 2012/07/11 07:10:15 nicm Exp $ */
d83 1
d94 1
@


1.14
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.13 2011/01/31 20:54:42 nicm Exp $ */
d28 1
a28 1
enum cmd_retval	 cmd_select_pane_exec(struct cmd *, struct cmd_ctx *);
d67 1
a67 1
cmd_select_pane_exec(struct cmd *self, struct cmd_ctx *ctx)
d74 1
a74 1
		wl = cmd_find_window(ctx, args_get(args, 't'), NULL);
d79 1
a79 1
			ctx->error(ctx, "no last pane");
d90 1
a90 1
	if ((wl = cmd_find_pane(ctx, args_get(args, 't'), NULL, &wp)) == NULL)
d94 1
a94 1
		ctx->error(ctx, "pane not visible");
d107 1
a107 1
		ctx->error(ctx, "pane not found");
@


1.13
log
@Redraw pane borders when switching to last pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.12 2011/01/04 02:03:41 nicm Exp $ */
d27 2
a28 2
void	cmd_select_pane_key_binding(struct cmd *, int);
int	cmd_select_pane_exec(struct cmd *, struct cmd_ctx *);
d66 1
a66 1
int
d76 1
a76 1
			return (-1);
d80 1
a80 1
			return (-1);
d87 1
a87 1
		return (0);
d91 1
a91 1
		return (-1);
d95 1
a95 1
		return (-1);
d108 1
a108 1
		return (-1);
d115 1
a115 1
	return (0);
@


1.12
log
@Now that parsing is common, merge some of the small, related commands
together to use the same code.

Also add some arguments (such as -n and -p) to some commands to match
existing commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.11 2011/01/04 00:42:47 nicm Exp $ */
d82 1
d84 3
@


1.11
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.10 2010/03/22 19:07:52 nicm Exp $ */
d32 2
a33 2
	"DLRt:U", 0, 0,
	"[-DLRU] " CMD_TARGET_PANE_USAGE,
d40 10
d72 13
@


1.10
log
@Support up, down, left, right movement through panes with -UDLR flags to
select-pane.

Also REMOVE the up- and down-pane commands: equivalent behaviour is now
available using -t :.+ and -t :.-.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.9 2010/01/03 12:51:05 nicm Exp $ */
d27 1
a27 1
void	cmd_select_pane_init(struct cmd *, int);
d32 1
d34 4
a37 6
	0, "DLRU",
	cmd_select_pane_init,
	cmd_target_parse,
	cmd_select_pane_exec,
	cmd_target_free,
	cmd_target_print
d41 1
a41 1
cmd_select_pane_init(struct cmd *self, int key)
d43 1
a43 5
	struct cmd_target_data	*data;

	cmd_target_init(self, key);
	data = self->data;

d45 1
a45 1
		cmd_set_flag(&data->chflags, 'U');
d47 1
a47 1
		cmd_set_flag(&data->chflags, 'D');
d49 1
a49 1
		cmd_set_flag(&data->chflags, 'L');
d51 1
a51 1
		cmd_set_flag(&data->chflags, 'R');
d53 1
a53 1
		data->target = xstrdup(":.+");
d59 1
a59 1
	struct cmd_target_data	*data = self->data;
d63 1
a63 1
	if ((wl = cmd_find_pane(ctx, data->target, NULL, &wp)) == NULL)
d67 1
a67 1
		ctx->error(ctx, "pane not visible: %s", data->target);
d71 1
a71 1
	if (cmd_check_flag(data->chflags, 'L'))
d73 1
a73 1
	else if (cmd_check_flag(data->chflags, 'R'))
d75 1
a75 1
	else if (cmd_check_flag(data->chflags, 'U'))
d77 1
a77 1
	else if (cmd_check_flag(data->chflags, 'D'))
@


1.9
log
@Options to set the colour of the pane borders, with different colours for the
active pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.8 2009/11/13 19:53:29 nicm Exp $ */
d27 1
d32 3
a34 3
	CMD_TARGET_PANE_USAGE,
	0, "",
	cmd_target_init,
d41 20
d75 14
@


1.8
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.7 2009/07/30 13:45:56 nicm Exp $ */
d56 1
@


1.7
log
@Merge pane number into the target specification for pane commands. Instead of
using -p index, a target pane is now addressed with the normal -t window form
but suffixed with a period and a pane index, for example :0.2 or
mysess:mywin.1. An unadorned number such as -t 1 is tried as a pane index in
the current window, if that fails the same rules are followed as for a target
window and the current pane in that window used.

As a side-effect this now means that swap-pane can swap panes between different
windows.

Note that this changes the syntax of the break-pane, clear-history, kill-pane,
resize-pane, select-pane and swap-pane commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.6 2009/07/26 12:58:44 nicm Exp $ */
d32 1
a32 1
	0, 0,
@


1.6
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.5 2009/07/20 19:35:33 nicm Exp $ */
d31 1
a31 1
	CMD_PANE_WINDOW_USAGE,
d33 2
a34 2
	cmd_pane_init,
	cmd_pane_parse,
d36 2
a37 2
	cmd_pane_free,
	cmd_pane_print
d43 1
a43 1
	struct cmd_pane_data	*data = self->data;
d47 1
a47 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
a48 9
	if (data->pane == -1)
		wp = wl->window->active;
	else {
		wp = window_pane_at_index(wl->window, data->pane);
		if (wp == NULL) {
			ctx->error(ctx, "no pane: %d", data->pane);
			return (-1);
		}
	}
d51 1
a51 1
		ctx->error(ctx, "pane %d is not visible", data->pane);
@


1.5
log
@Now that #P could be in the status line, flag it for redraw when the active
pane changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.4 2009/07/19 13:21:40 nicm Exp $ */
a35 2
       	cmd_pane_send,
	cmd_pane_recv,
@


1.4
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.3 2009/07/14 07:23:36 nicm Exp $ */
d66 1
@


1.3
log
@Get rid of the PANE_HIDDEN flag in favour of a function, and moving the
decision for whether or not a pane should be drawn out of the layout code and
into the redraw code.

This is needed for the new layout design, getting it in now to make that easier
to work on.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
a65 1
	layout_refresh(wl->window, 1);
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d61 2
a62 2
	if (wp->flags & PANE_HIDDEN) {
		ctx->error(ctx, "pane %d is hidden", data->pane);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d32 1
a32 1
	0,
@

