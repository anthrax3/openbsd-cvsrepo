head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.2
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.20
date	2017.03.08.13.36.12;	author nicm;	state Exp;
branches;
next	1.19;
commitid	jI8R4kuPSDw6nngR;

1.19
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.18;
commitid	BLRh0qXo7OVTPhiT;

1.18
date	2016.10.16.22.06.40;	author nicm;	state Exp;
branches;
next	1.17;
commitid	j0FZs70gSPCmpqWI;

1.17
date	2016.10.15.00.12.58;	author nicm;	state Exp;
branches;
next	1.16;
commitid	W1m68Q2tEflX7Raw;

1.16
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.15;
commitid	P3qmSOx6KrDBsb0c;

1.15
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.14;
commitid	ns7JfXpW9TsHrnT3;

1.14
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.13;
commitid	MRfGAYPLeVqV46rT;

1.13
date	2015.11.18.14.27.44;	author nicm;	state Exp;
branches;
next	1.12;
commitid	RjsAPRkWwvS79w40;

1.12
date	2015.11.13.10.00.26;	author nicm;	state Exp;
branches;
next	1.11;
commitid	XBr52OmGRr7N73uY;

1.11
date	2015.04.24.23.17.11;	author nicm;	state Exp;
branches;
next	1.10;
commitid	iy4fcaIoXzxOx84I;

1.10
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.9;
commitid	b1G1TVWY7l4KyoY6;

1.9
date	2014.04.23.10.14.29;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.26.10.54.48;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.25.11.40.54;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.25.11.40.40;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.25.11.38.43;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.25.10.11.45;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.25.10.04.23;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.25.07.41.22;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.03.09.32.38;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Add a helper function for the most common format_create/defaults/expand
pattern.
@
text
@/* $OpenBSD: control-notify.c,v 1.19 2017/02/03 11:57:27 nicm Exp $ */

/*
 * Copyright (c) 2012 Nicholas Marriott <nicholas.marriott@@gmail.com>
 * Copyright (c) 2012 George Nachman <tmux@@georgester.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "tmux.h"

#define CONTROL_SHOULD_NOTIFY_CLIENT(c) \
	((c) != NULL && ((c)->flags & CLIENT_CONTROL))

void
control_notify_input(struct client *c, struct window_pane *wp,
    struct evbuffer *input)
{
	u_char		*buf;
	size_t		 len;
	struct evbuffer *message;
	u_int		 i;

	if (c->session == NULL)
	    return;

	buf = EVBUFFER_DATA(input);
	len = EVBUFFER_LENGTH(input);

	/*
	 * Only write input if the window pane is linked to a window belonging
	 * to the client's session.
	 */
	if (winlink_find_by_window(&c->session->windows, wp->window) != NULL) {
		message = evbuffer_new();
		evbuffer_add_printf(message, "%%output %%%u ", wp->id);
		for (i = 0; i < len; i++) {
			if (buf[i] < ' ' || buf[i] == '\\')
			    evbuffer_add_printf(message, "\\%03o", buf[i]);
			else
			    evbuffer_add_printf(message, "%c", buf[i]);
		}
		control_write_buffer(c, message);
		evbuffer_free(message);
	}
}

void
control_notify_window_layout_changed(struct window *w)
{
	struct client		*c;
	struct session		*s;
	struct winlink		*wl;
	const char		*template;
	char			*cp;

	template = "%layout-change #{window_id} #{window_layout} "
	    "#{window_visible_layout} #{window_flags}";

	TAILQ_FOREACH(c, &clients, entry) {
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c) || c->session == NULL)
			continue;
		s = c->session;

		if (winlink_find_by_window_id(&s->windows, w->id) == NULL)
			continue;

		/*
		 * When the last pane in a window is closed it won't have a
		 * layout root and we don't need to inform the client about the
		 * layout change because the whole window will go away soon.
		 */
		if (w->layout_root == NULL)
			continue;

		wl = winlink_find_by_window(&s->windows, w);
		if (wl != NULL) {
			cp = format_single(NULL, template, c, NULL, wl, NULL);
			control_write(c, "%s", cp);
			free(cp);
		}
	}
}

void
control_notify_window_unlinked(__unused struct session *s, struct window *w)
{
	struct client	*c;
	struct session	*cs;

	TAILQ_FOREACH(c, &clients, entry) {
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c) || c->session == NULL)
			continue;
		cs = c->session;

		if (winlink_find_by_window_id(&cs->windows, w->id) != NULL)
			control_write(c, "%%window-close @@%u", w->id);
		else
			control_write(c, "%%unlinked-window-close @@%u", w->id);
	}
}

void
control_notify_window_linked(__unused struct session *s, struct window *w)
{
	struct client	*c;
	struct session	*cs;

	TAILQ_FOREACH(c, &clients, entry) {
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c) || c->session == NULL)
			continue;
		cs = c->session;

		if (winlink_find_by_window_id(&cs->windows, w->id) != NULL)
			control_write(c, "%%window-add @@%u", w->id);
		else
			control_write(c, "%%unlinked-window-add @@%u", w->id);
	}
}

void
control_notify_window_renamed(struct window *w)
{
	struct client	*c;
	struct session	*cs;

	TAILQ_FOREACH(c, &clients, entry) {
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c) || c->session == NULL)
			continue;
		cs = c->session;

		if (winlink_find_by_window_id(&cs->windows, w->id) != NULL) {
			control_write(c, "%%window-renamed @@%u %s", w->id,
			    w->name);
		} else {
			control_write(c, "%%unlinked-window-renamed @@%u %s",
			    w->id, w->name);
		}
	}
}

void
control_notify_client_session_changed(struct client *c)
{
	struct session	*s;

	if (!CONTROL_SHOULD_NOTIFY_CLIENT(c) || c->session == NULL)
		return;
	s = c->session;

	control_write(c, "%%session-changed $%u %s", s->id, s->name);
}

void
control_notify_session_renamed(struct session *s)
{
	struct client	*c;

	TAILQ_FOREACH(c, &clients, entry) {
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c))
			continue;

		control_write(c, "%%session-renamed $%u %s", s->id, s->name);
	}
}

void
control_notify_session_created(__unused struct session *s)
{
	struct client	*c;

	TAILQ_FOREACH(c, &clients, entry) {
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c))
			continue;

		control_write(c, "%%sessions-changed");
	}
}

void
control_notify_session_closed(__unused struct session *s)
{
	struct client	*c;

	TAILQ_FOREACH(c, &clients, entry) {
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c))
			continue;

		control_write(c, "%%sessions-changed");
	}
}
@


1.19
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.18 2016/10/16 22:06:40 nicm Exp $ */
a66 1
	struct format_tree	*ft;
d69 1
a69 1
	char			*expanded;
a89 1
		ft = format_create(NULL, FORMAT_NONE, 0);
d92 3
a94 4
			format_defaults(ft, c, NULL, wl, NULL);
			expanded = format_expand(ft, template);
			control_write(c, "%s", expanded);
			free(expanded);
a95 1
		format_free(ft);
@


1.18
log
@Use the notify name string instead of going via an enum and change
existing hooks to use notifys instead.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.17 2016/10/15 00:12:58 nicm Exp $ */
d91 1
a91 1
		ft = format_create(NULL, 0);
@


1.17
log
@Rename a function for consistency and some spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.16 2016/01/19 15:59:12 nicm Exp $ */
d161 1
a161 1
control_notify_attached_session_changed(struct client *c)
@


1.16
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.15 2015/12/11 12:27:36 nicm Exp $ */
d199 1
a199 1
control_notify_session_close(__unused struct session *s)
@


1.15
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.14 2015/12/08 08:34:18 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2012 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.14
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.13 2015/11/18 14:27:44 nicm Exp $ */
d91 1
a91 1
		ft = format_create(0);
@


1.13
log
@Use __unused rather than rolling our own.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.12 2015/11/13 10:00:26 nicm Exp $ */
d91 1
a91 1
		ft = format_create();
@


1.12
log
@Add window_visible_layout which ignores zoomed panes and use it for
control mode (which needs to know all panes), from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.11 2015/04/24 23:17:11 nicm Exp $ */
d104 1
a104 1
control_notify_window_unlinked(unused struct session *s, struct window *w)
d122 1
a122 1
control_notify_window_linked(unused struct session *s, struct window *w)
d186 1
a186 1
control_notify_session_created(unused struct session *s)
d199 1
a199 1
control_notify_session_close(unused struct session *s)
@


1.11
log
@Convert clients list into a TAILQ.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.10 2015/02/05 10:29:43 nicm Exp $ */
d22 2
d70 4
a89 1
		template = "%layout-change #{window_id} #{window_layout}";
d95 3
a97 1
			control_write(c, "%s", format_expand(ft, template));
@


1.10
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.9 2014/04/23 10:14:29 nicm Exp $ */
a66 1
	u_int			 i;
d69 1
a69 2
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
a100 1
	u_int		 i;
d102 1
a102 2
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
a118 1
	u_int		 i;
d120 1
a120 2
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
a136 1
	u_int		 i;
d138 1
a138 2
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
a168 1
	u_int		 i;
d170 1
a170 2
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
a181 1
	u_int		 i;
d183 1
a183 2
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
a194 1
	u_int		 i;
d196 1
a196 2
	for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
		c = ARRAY_ITEM(&clients, i);
@


1.9
log
@Differentiate between linked and unlinked window closes and renames,
like we already do for adds. From Andre Masella.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.8 2013/03/26 10:54:48 nicm Exp $ */
d91 1
a91 1
			format_winlink(ft, c->session, wl);
@


1.8
log
@Fix compiler warnings, missing #include. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.7 2013/03/25 11:40:54 nicm Exp $ */
d102 1
d109 1
d111 4
a114 1
		control_write(c, "%%window-close @@%u", w->id);
d142 1
d149 1
d151 7
a157 1
		control_write(c, "%%window-renamed @@%u %s", w->id, w->name);
@


1.7
log
@Include prefix on ids, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.6 2013/03/25 11:40:40 nicm Exp $ */
a101 1
	struct session	*cs;
a107 1
		cs = c->session;
a136 1
	struct session	*s;
a142 1
		s = c->session;
@


1.6
log
@Write escaped output in control mode rather than hex, from George
Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.5 2013/03/25 11:38:43 nicm Exp $ */
d48 1
a48 1
		evbuffer_add_printf(message, "%%output %u ", wp->id);
d111 1
a111 1
		control_write(c, "%%window-close %u", w->id);
d129 1
a129 1
			control_write(c, "%%window-add %u", w->id);
d131 1
a131 1
			control_write(c, "%%unlinked-window-add %u", w->id);
d148 1
a148 1
		control_write(c, "%%window-renamed %u %s", w->id, w->name);
d161 1
a161 1
	control_write(c, "%%session-changed %u %s", s->id, s->name);
d172 1
a172 1
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c) || c->session != s)
d175 1
a175 1
		control_write(c, "%%session-renamed %s", s->name);
d187 1
a187 1
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c) || c->session == NULL)
d202 1
a202 1
		if (!CONTROL_SHOULD_NOTIFY_CLIENT(c) || c->session == NULL)
@


1.5
log
@Don't add prefix to %output pane id.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.4 2013/03/25 10:11:45 nicm Exp $ */
d49 6
a54 2
		for (i = 0; i < len; i++)
			evbuffer_add_printf(message, "%02hhx", buf[i]);
@


1.4
log
@Rename session idx to session id throughout and add $ prefix to targets
to use it, extended from a diff from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.3 2013/03/25 10:04:23 nicm Exp $ */
d48 1
a48 1
		evbuffer_add_printf(message, "%%output %%%u ", wp->id);
d144 1
a144 1
                control_write(c, "%%window-renamed %u %s", w->id, w->name);
d157 1
a157 1
	control_write(c, "%%session-changed %d %s", s->id, s->name);
@


1.3
log
@Remove some unused/unnecessary control notifications, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.2 2012/09/25 07:41:22 nicm Exp $ */
d157 1
a157 1
	control_write(c, "%%session-changed %d %s", s->idx, s->name);
@


1.2
log
@Add notification for input from a pane, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: control-notify.c,v 1.1 2012/09/03 09:32:38 nicm Exp $ */
d107 1
a107 4
		if (winlink_find_by_window_id(&cs->windows, w->id) != NULL)
			control_write(c, "%%window-close %u", w->id);
		else
			control_write(c, "%%unlinked-window-close %u", w->id);
d144 1
a144 7
		if (winlink_find_by_window_id(&s->windows, w->id) != NULL) {
			control_write(c, "%%window-renamed %u %s",
			    w->id, w->name);
		} else {
			control_write(c, "%%unlinked-window-renamed %u %s",
			    w->id, w->name);
		}
@


1.1
log
@Send notifications to control clients. Also don't redraw client when
suspended.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d26 29
@

