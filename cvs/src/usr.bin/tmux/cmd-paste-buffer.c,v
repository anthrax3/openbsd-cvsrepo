head	1.38;
access;
symbols
	OPENBSD_6_1:1.37.0.4
	OPENBSD_6_1_BASE:1.37
	OPENBSD_6_0:1.34.0.4
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.27.0.6
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.38
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.37;
commitid	RXMp6wwG5a5Y82bo;

1.37
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.36;
commitid	pxm6osuE99zELpkU;

1.36
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.35;
commitid	S3IpyYTkmviA6lfM;

1.35
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.34;
commitid	TaZ3kOtGiWwKofka;

1.34
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.33;
commitid	P3qmSOx6KrDBsb0c;

1.33
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.32;
commitid	rE682EC14v4gpeFy;

1.32
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.31;
commitid	gsQkQsSyBCSmU9ax;

1.31
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.30;
commitid	uzMkp8Z4FE6WB6s6;

1.30
date	2015.09.11.14.41.50;	author nicm;	state Exp;
branches;
next	1.29;
commitid	ufD4awhmzmSoxn7X;

1.29
date	2015.08.29.09.36.46;	author nicm;	state Exp;
branches;
next	1.28;
commitid	iO5QEcohpHfgM5Iz;

1.28
date	2015.08.29.09.25.00;	author nicm;	state Exp;
branches;
next	1.27;
commitid	UXoQGD7QOZAJI1XC;

1.27
date	2014.11.05.23.25.02;	author nicm;	state Exp;
branches;
next	1.26;
commitid	HCpksV7mGIomCoEW;

1.26
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.25;
commitid	Gq8hgMoG3t1Wy1Zv;

1.25
date	2014.05.13.07.34.35;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.24.09.14.43;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.10.10.12.00.21;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2012.12.09.23.17.35;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2012.11.27.20.22.12;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2012.03.03.09.43.22;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.30.23.16.18;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2010.08.11.07.38.00;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2010.05.19.22.28.14;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.04.19.04.09;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2010.03.22.19.13.28;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.26.22.28.24;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.04.22.43.11;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.07.18.50.45;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.11.19.14.56;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.02.16.15.43;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@/* $OpenBSD: cmd-paste-buffer.c,v 1.37 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>
#include <vis.h>

#include "tmux.h"

/*
 * Paste paste buffer if present.
 */

static enum cmd_retval	cmd_paste_buffer_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_paste_buffer_entry = {
	.name = "paste-buffer",
	.alias = "pasteb",

	.args = { "db:prs:t:", 0, 0 },
	.usage = "[-dpr] [-s separator] " CMD_BUFFER_USAGE " "
		 CMD_TARGET_PANE_USAGE,

	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_paste_buffer_exec
};

static enum cmd_retval
cmd_paste_buffer_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct window_pane	*wp = item->target.wp;
	struct paste_buffer	*pb;
	const char		*sepstr, *bufname, *bufdata, *bufend, *line;
	size_t			 seplen, bufsize;
	int			 bracket = args_has(args, 'p');

	bufname = NULL;
	if (args_has(args, 'b'))
		bufname = args_get(args, 'b');

	if (bufname == NULL)
		pb = paste_get_top(NULL);
	else {
		pb = paste_get_name(bufname);
		if (pb == NULL) {
			cmdq_error(item, "no buffer %s", bufname);
			return (CMD_RETURN_ERROR);
		}
	}

	if (pb != NULL && ~wp->flags & PANE_INPUTOFF) {
		sepstr = args_get(args, 's');
		if (sepstr == NULL) {
			if (args_has(args, 'r'))
				sepstr = "\n";
			else
				sepstr = "\r";
		}
		seplen = strlen(sepstr);

		if (bracket && (wp->screen->mode & MODE_BRACKETPASTE))
			bufferevent_write(wp->event, "\033[200~", 6);

		bufdata = paste_buffer_data(pb, &bufsize);
		bufend = bufdata + bufsize;

		for (;;) {
			line = memchr(bufdata, '\n', bufend - bufdata);
			if (line == NULL)
				break;

			bufferevent_write(wp->event, bufdata, line - bufdata);
			bufferevent_write(wp->event, sepstr, seplen);

			bufdata = line + 1;
		}
		if (bufdata != bufend)
			bufferevent_write(wp->event, bufdata, bufend - bufdata);

		if (bracket && (wp->screen->mode & MODE_BRACKETPASTE))
			bufferevent_write(wp->event, "\033[201~", 6);
	}

	if (pb != NULL && args_has(args, 'd'))
		paste_free(pb);

	return (CMD_RETURN_NORMAL);
}
@


1.37
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.36 2016/10/14 22:14:22 nicm Exp $ */
d41 1
a41 1
	.tflag = CMD_PANE,
d51 1
a51 1
	struct window_pane	*wp = item->state.tflag.wp;
@


1.36
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.35 2016/10/10 21:51:39 nicm Exp $ */
d31 1
a31 1
static enum cmd_retval	 cmd_paste_buffer_exec(struct cmd *, struct cmd_q *);
d48 1
a48 1
cmd_paste_buffer_exec(struct cmd *self, struct cmd_q *cmdq)
d51 1
a51 1
	struct window_pane	*wp = cmdq->state.tflag.wp;
d66 1
a66 1
			cmdq_error(cmdq, "no buffer %s", bufname);
@


1.35
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.34 2016/01/19 15:59:12 nicm Exp $ */
d43 1
a43 1
	.flags = 0,
@


1.34
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.33 2015/12/14 00:31:54 nicm Exp $ */
d31 1
a31 4
enum cmd_retval	 cmd_paste_buffer_exec(struct cmd *, struct cmd_q *);

void	cmd_paste_buffer_filter(struct window_pane *,
	    const char *, size_t, const char *, int);
d47 1
a47 1
enum cmd_retval
@


1.33
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.32 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.32
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.31 2015/12/13 14:32:38 nicm Exp $ */
d44 3
a46 1
	.flags = CMD_PANE_T,
@


1.31
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.30 2015/09/11 14:41:50 nicm Exp $ */
d37 9
a45 5
	"paste-buffer", "pasteb",
	"db:prs:t:", 0, 0,
	"[-dpr] [-s separator] " CMD_BUFFER_USAGE " " CMD_TARGET_PANE_USAGE,
	CMD_PANE_T,
	cmd_paste_buffer_exec
@


1.30
log
@Merge delete-buffer into cmd-set-buffer.c and change the paste buffer
API so it has one paste_free() rather than free_top and free_name
(everywhere that uses it already has the right pointer).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.29 2015/08/29 09:36:46 nicm Exp $ */
d40 1
a40 1
	0,
d48 1
a48 2
	struct window_pane	*wp;
	struct session		*s;
a52 3

	if (cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp) == NULL)
		return (CMD_RETURN_ERROR);
@


1.29
log
@paste_send_pane can be merged into cmd-paste-buffer.c now.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.28 2015/08/29 09:25:00 nicm Exp $ */
d105 2
a106 6
	if (args_has(args, 'd')) {
		if (bufname == NULL)
			paste_free_top();
		else
			paste_free_name(bufname);
	}
@


1.28
log
@Move struct paste_buffer out of tmux.h.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.27 2014/11/05 23:25:02 nicm Exp $ */
d51 3
a53 1
	const char		*sepstr, *bufname;
d72 1
a72 1
	if (pb != NULL) {
d80 23
a102 1
		paste_send_pane(pb, wp, sepstr, args_has(args, 'p'));
a104 1
	/* Delete the buffer if -d. */
@


1.27
log
@Tidy up mode-mouse check.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.26 2014/10/20 22:29:25 nicm Exp $ */
d61 1
a61 1
		pb = paste_get_top();
@


1.26
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.25 2014/05/13 07:34:35 nicm Exp $ */
a51 1
	int			 pflag;
d78 1
a78 2
		pflag = (wp->screen->mode & MODE_BRACKETPASTE);
		paste_send_pane(pb, wp, sepstr, args_has(args, 'p') && pflag);
@


1.25
log
@Add support for named buffers. If you don't name a buffer, things work
much as before - buffers are automatically named "buffer0000",
"buffer0001" and so on and ordered as a stack. Buffers can be named
explicitly when creating ("loadb -b foo" etc) or renamed ("setb -b
buffer0000 -n foo"). If buffers are named explicitly, they are not
deleted when buffer-limit is reached. Diff from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.24 2014/04/24 09:14:43 nicm Exp $ */
a40 1
	NULL,
@


1.24
log
@There is no longer a need for a paste_stack struct or for global_buffers
to be global. Move to paste.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.23 2013/10/10 12:00:21 nicm Exp $ */
d39 1
a39 1
	"[-dpr] [-s separator] [-b buffer-index] " CMD_TARGET_PANE_USAGE,
d52 1
a52 3
	const char		*sepstr;
	char			*cause;
	int			 buffer;
d58 3
a60 10
	if (!args_has(args, 'b'))
		buffer = -1;
	else {
		buffer = args_strtonum(args, 'b', 0, INT_MAX, &cause);
		if (cause != NULL) {
			cmdq_error(cmdq, "buffer %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
	}
d62 1
a62 1
	if (buffer == -1)
d65 1
a65 1
		pb = paste_get_index(buffer);
d67 1
a67 1
			cmdq_error(cmdq, "no buffer %d", buffer);
d86 1
a86 1
		if (buffer == -1)
d89 1
a89 1
			paste_free_index(buffer);
@


1.23
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.22 2013/03/24 09:54:10 nicm Exp $ */
d72 1
a72 1
		pb = paste_get_top(&global_buffers);
d74 1
a74 1
		pb = paste_get_index(&global_buffers, buffer);
d96 1
a96 1
			paste_free_top(&global_buffers);
d98 1
a98 1
			paste_free_index(&global_buffers, buffer);
@


1.22
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.21 2012/12/09 23:17:35 nicm Exp $ */
a40 1
	NULL,
@


1.21
log
@Use the CMD_*_USAGE defines consistently, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.20 2012/11/27 20:22:12 nicm Exp $ */
d31 1
a31 1
enum cmd_retval	 cmd_paste_buffer_exec(struct cmd *, struct cmd_ctx *);
d47 1
a47 1
cmd_paste_buffer_exec(struct cmd *self, struct cmd_ctx *ctx)
d58 1
a58 1
	if (cmd_find_pane(ctx, args_get(args, 't'), &s, &wp) == NULL)
d66 1
a66 1
			ctx->error(ctx, "buffer %s", cause);
d77 1
a77 1
			ctx->error(ctx, "no buffer %d", buffer);
@


1.20
log
@Support middle-click paste, based on a diff from Ailin Nemui.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.19 2012/07/11 07:10:15 nicm Exp $ */
d39 1
a39 1
	"[-dpr] [-s separator] [-b buffer-index] [-t target-pane]",
@


1.19
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.18 2012/07/10 11:53:01 nicm Exp $ */
d34 1
a34 1
	    const char *, size_t, const char *, int bracket);
d90 2
a91 3
		pflag = args_has(args, 'p') &&
		    (wp->screen->mode & MODE_BRACKETPASTE);
		cmd_paste_buffer_filter(wp, pb->data, pb->size, sepstr, pflag);
a102 27
}

/* Add bytes to a buffer and filter '\n' according to separator. */
void
cmd_paste_buffer_filter(struct window_pane *wp,
    const char *data, size_t size, const char *sep, int bracket)
{
	const char	*end = data + size;
	const char	*lf;
	size_t		 seplen;

	if (bracket)
		bufferevent_write(wp->event, "\033[200~", 6);

	seplen = strlen(sep);
	while ((lf = memchr(data, '\n', end - data)) != NULL) {
		if (lf != data)
			bufferevent_write(wp->event, data, lf - data);
		bufferevent_write(wp->event, sep, seplen);
		data = lf + 1;
	}

	if (end != data)
		bufferevent_write(wp->event, data, end - data);

	if (bracket)
		bufferevent_write(wp->event, "\033[201~", 6);
@


1.18
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.17 2012/03/03 09:43:22 nicm Exp $ */
d31 1
a31 1
int	cmd_paste_buffer_exec(struct cmd *, struct cmd_ctx *);
d46 1
a46 1
int
d59 1
a59 1
		return (-1);
d68 1
a68 1
			return (-1);
d78 1
a78 1
			return (-1);
d103 1
a103 1
	return (0);
@


1.17
log
@Support "bracketed paste" mode. This adds a -p flag to paste-buffer - if
this is used and the application has requested bracketed pastes, then
tmux surrounds the pasted text by \033[200~ and \033[201~. Applications
like vim can (apparently) use this to avoid, for example, indenting the
text. From Ailin Nemui.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.16 2011/01/04 00:42:47 nicm Exp $ */
d67 1
a67 1
			xfree(cause);
@


1.16
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.15 2010/12/30 23:16:18 nicm Exp $ */
d33 2
a34 2
void	cmd_paste_buffer_filter(
	    struct window_pane *, const char *, size_t, const char *);
d38 2
a39 2
	"db:rs:t:", 0, 0,
	"[-dr] [-s separator] [-b buffer-index] [-t target-pane]",
d56 1
d90 3
a92 1
		cmd_paste_buffer_filter(wp, pb->data, pb->size, sepstr);
d108 2
a109 2
cmd_paste_buffer_filter(
    struct window_pane *wp, const char *data, size_t size, const char *sep)
d115 3
d128 3
@


1.15
log
@Change from a per-session stack of buffers to one global stack which is
much more convenient and also simplifies lot of code. This renders
copy-buffer useless and makes buffer-limit now a server option.

By Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.14 2010/08/11 07:38:00 nicm Exp $ */
d31 1
a31 7
struct cmd_paste_buffer_data {
	char	*target;
	int	 buffer;

	int	 flag_delete;
	char	*sepstr;
};
a32 3
void	cmd_paste_buffer_init(struct cmd *, int);
int	cmd_paste_buffer_parse(struct cmd *, int, char **, char **);
int	cmd_paste_buffer_exec(struct cmd *, struct cmd_ctx *);
d34 1
a34 3
	    struct window_pane *, const char *, size_t, char *);
void	cmd_paste_buffer_free(struct cmd *);
size_t	cmd_paste_buffer_print(struct cmd *, char *, size_t);
d38 1
d40 4
a43 6
	0, "",
	cmd_paste_buffer_init,
	cmd_paste_buffer_parse,
	cmd_paste_buffer_exec,
	cmd_paste_buffer_free,
	cmd_paste_buffer_print
d46 2
a47 3
/* ARGSUSED */
void
cmd_paste_buffer_init(struct cmd *self, unused int arg)
d49 7
a55 1
	struct cmd_paste_buffer_data	*data;
d57 2
a58 6
	self->data = data = xmalloc(sizeof *data);
	data->target = NULL;
	data->buffer = -1;
	data->flag_delete = 0;
	data->sepstr = xstrdup("\r");
}
d60 8
a67 41
int
cmd_paste_buffer_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_paste_buffer_data	*data;
	int			 opt, n;
	const char		*errstr;

	cmd_paste_buffer_init(self, 0);
	data = self->data;

	while ((opt = getopt(argc, argv, "b:ds:t:r")) != -1) {
		switch (opt) {
		case 'b':
			if (data->buffer == -1) {
				n = strtonum(optarg, 0, INT_MAX, &errstr);
				if (errstr != NULL) {
					xasprintf(cause, "buffer %s", errstr);
					goto error;
				}
				data->buffer = n;
			}
			break;
		case 'd':
			data->flag_delete = 1;
			break;
		case 's':
			if (data->sepstr != NULL)
				xfree(data->sepstr);
			data->sepstr = xstrdup(optarg);
			break;
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		case 'r':
			if (data->sepstr != NULL)
				xfree(data->sepstr);
			data->sepstr = xstrdup("\n");
			break;
		default:
			goto usage;
a69 12
	argc -= optind;
	argv += optind;

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

error:
	self->entry->free(self);
	return (-1);
}
d71 1
a71 12
int
cmd_paste_buffer_exec(struct cmd *self, struct cmd_ctx *ctx)
{
	struct cmd_paste_buffer_data	*data = self->data;
	struct window_pane		*wp;
	struct session			*s;
	struct paste_buffer		*pb;

	if (cmd_find_pane(ctx, data->target, &s, &wp) == NULL)
		return (-1);

	if (data->buffer == -1)
d74 1
a74 1
		pb = paste_get_index(&global_buffers, data->buffer);
d76 1
a76 1
			ctx->error(ctx, "no buffer %d", data->buffer);
d81 10
a90 2
	if (pb != NULL)
		cmd_paste_buffer_filter(wp, pb->data, pb->size, data->sepstr);
d93 2
a94 2
	if (data->flag_delete) {
		if (data->buffer == -1)
d97 1
a97 1
			paste_free_index(&global_buffers, data->buffer);
d106 1
a106 1
    struct window_pane *wp, const char *data, size_t size, char *sep)
a121 43
}

void
cmd_paste_buffer_free(struct cmd *self)
{
	struct cmd_paste_buffer_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	if (data->sepstr != NULL)
		xfree(data->sepstr);
	xfree(data);
}

size_t
cmd_paste_buffer_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_paste_buffer_data	*data = self->data;
	size_t				 off = 0;
	char                             tmp[BUFSIZ];
	int				 r_flag;

	r_flag = 0;
	if (data->sepstr != NULL)
		r_flag = (data->sepstr[0] == '\n' && data->sepstr[1] == '\0');

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->flag_delete)
		off += xsnprintf(buf + off, len - off, " -d");
	if (off < len && r_flag)
		off += xsnprintf(buf + off, len - off, " -r");
	if (off < len && data->buffer != -1)
		off += xsnprintf(buf + off, len - off, " -b %d", data->buffer);
	if (off < len && data->sepstr != NULL && !r_flag) {
		strnvis(
		    tmp, data->sepstr, sizeof tmp, VIS_OCTAL|VIS_TAB|VIS_NL);
		off += cmd_prarg(buf + off, len - off, " -s ", tmp);
	}
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
	return (off);
@


1.14
log
@Usage string fixes from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.13 2010/05/19 22:28:14 nicm Exp $ */
d139 1
a139 1
		pb = paste_get_top(&s->buffers);
d141 2
a142 1
		if ((pb = paste_get_index(&s->buffers, data->buffer)) == NULL) {
d154 1
a154 1
			paste_free_top(&s->buffers);
d156 1
a156 1
			paste_free_index(&s->buffers, data->buffer);
@


1.13
log
@Enhance paste-buffer to allow lines to be separated by any string, from
Andrea Barisani.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.12 2010/04/04 19:04:09 nicm Exp $ */
d49 1
a49 1
	"[-dr] [-s separator] [-b buffer-index] [-t target-window]",
@


1.12
log
@Dead assignment, found with clang.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.11 2010/03/22 19:13:28 nicm Exp $ */
d21 1
d23 1
d31 10
d42 4
a45 1
void	cmd_paste_buffer_lf2cr(struct window_pane *, const char *, size_t);
d49 4
a52 4
	"[-dr] " CMD_BUFFER_PANE_USAGE,
	0, "dr",
	cmd_buffer_init,
	cmd_buffer_parse,
d54 2
a55 2
	cmd_buffer_free,
	cmd_buffer_print
d58 69
d130 4
a133 4
	struct cmd_buffer_data	*data = self->data;
	struct window_pane	*wp;
	struct session		*s;
	struct paste_buffer	*pb;
d147 2
a148 7
	if (pb != NULL) {
		/* -r means raw data without LF->CR conversion. */
		if (cmd_check_flag(data->chflags, 'r'))
			bufferevent_write(wp->event, pb->data, pb->size);
		else
			cmd_paste_buffer_lf2cr(wp, pb->data, pb->size);
	}
d151 1
a151 1
	if (cmd_check_flag(data->chflags, 'd')) {
d161 1
a161 1
/* Add bytes to a buffer but change every '\n' to '\r'. */
d163 2
a164 1
cmd_paste_buffer_lf2cr(struct window_pane *wp, const char *data, size_t size)
d168 1
d170 1
d174 1
a174 1
		bufferevent_write(wp->event, "\r", 1);
d180 43
@


1.11
log
@paste-buffer should be per pane, from C. Coutinho.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a46 1
	struct winlink		*wl;
d51 1
a51 1
	if ((wl = cmd_find_pane(ctx, data->target, &s, &wp)) == NULL)
@


1.10
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.9 2009/11/26 22:28:24 nicm Exp $ */
d34 1
a34 1
	"[-dr] " CMD_BUFFER_WINDOW_USAGE,
d52 1
a52 1
	if ((wl = cmd_find_window(ctx, data->target, &s)) == NULL)
a53 1
	wp = wl->window->active;
@


1.9
log
@Tidy up various bits of the paste code, make the data buffer char * and add
comments.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.8 2009/11/13 19:53:29 nicm Exp $ */
d81 1
a81 1
 	return (0);
@


1.8
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.7 2009/11/04 22:43:11 nicm Exp $ */
d65 1
a65 1
	if (pb != NULL && *pb->data != '\0') {
@


1.7
log
@Convert the window pane (pty master side) fd over to use a bufferevent.

The evbuffer API is very similar to the existing tmux buffer API so this was
remarkably painless. Not many possible ways to do it, I suppose.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.6 2009/09/07 18:50:45 nicm Exp $ */
d35 1
a35 1
	0, CMD_CHFLAG('d')|CMD_CHFLAG('r'),
d67 1
a67 1
		if (data->chflags & CMD_CHFLAG('r'))
d74 1
a74 1
	if (data->chflags & CMD_CHFLAG('d')) {
@


1.6
log
@Give each paste buffer a size member instead of requiring them to be
zero-terminated.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.5 2009/07/26 12:58:44 nicm Exp $ */
d30 1
a30 1
void	cmd_paste_buffer_lf2cr(struct buffer *, const char *, size_t);
d68 1
a68 1
			buffer_write(wp->out, pb->data, pb->size);
d70 1
a70 1
			cmd_paste_buffer_lf2cr(wp->out, pb->data, pb->size);
d86 1
a86 1
cmd_paste_buffer_lf2cr(struct buffer *b, const char *data, size_t size)
d93 2
a94 2
			buffer_write(b, data, lf - data);
		buffer_write8(b, '\r');
d99 1
a99 1
		buffer_write(b, data, end - data);
@


1.5
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.4 2009/07/13 23:11:35 nicm Exp $ */
d48 1
a48 1
	struct window		*w;
d54 1
a54 1
	w = wl->window;
d67 4
a70 7
		if (data->chflags & CMD_CHFLAG('r')) {
			buffer_write(
			    w->active->out, pb->data, strlen(pb->data));
		} else {
			cmd_paste_buffer_lf2cr(
			    w->active->out, pb->data, strlen(pb->data));
		}
@


1.4
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.3 2009/07/11 19:14:56 nicm Exp $ */
a38 2
	cmd_buffer_send,
	cmd_buffer_recv,
@


1.3
log
@When pasting, translate \n into \r. This matches xterm and putty's behaviour,
and makes emacs happy when pasting into some modes. A new -r (raw) flag to
paste-buffer pastes without the translation.

From Kalle Olavi Niemitalo, thanks!
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.2 2009/07/02 16:15:43 nicm Exp $ */
d35 1
a35 1
	CMD_DFLAG|CMD_RFLAG,
d69 1
a69 1
		if (data->flags & CMD_RFLAG) {
d79 1
a79 1
	if (data->flags & CMD_DFLAG) {
@


1.2
log
@Fix two copy/paste bugs: forbid zero-length buffers to prevent a fatal error
when trying to paste them, found by me, and miscalculation of the start/end
causing random fatal errors when copying in copy-mode, reported by sthen.

ok sthen "put it in" deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-paste-buffer.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d30 1
d34 2
a35 2
	"[-d] " CMD_BUFFER_WINDOW_USAGE,
	CMD_DFLAG,
d67 10
a76 2
	if (pb != NULL && *pb->data != '\0')
		buffer_write(w->active->out, pb->data, strlen(pb->data));
d87 18
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d66 1
a66 1
	if (pb != NULL)
@

