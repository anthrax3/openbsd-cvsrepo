head	1.48;
access;
symbols
	OPENBSD_6_1:1.46.0.4
	OPENBSD_6_1_BASE:1.46
	OPENBSD_6_0:1.36.0.4
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.36.0.2
	OPENBSD_5_9_BASE:1.36
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6;
locks; strict;
comment	@ * @;


1.48
date	2017.04.21.20.26.34;	author nicm;	state Exp;
branches;
next	1.47;
commitid	utIGVdoSurUxfh14;

1.47
date	2017.04.20.09.20.22;	author nicm;	state Exp;
branches;
next	1.46;
commitid	Mq5Wq9pThOn7RhSJ;

1.46
date	2017.03.08.13.36.12;	author nicm;	state Exp;
branches;
next	1.45;
commitid	jI8R4kuPSDw6nngR;

1.45
date	2017.02.16.10.53.25;	author nicm;	state Exp;
branches;
next	1.44;
commitid	LqXOE9qmWQgnS4l6;

1.44
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.43;
commitid	BLRh0qXo7OVTPhiT;

1.43
date	2016.11.12.19.05.53;	author nicm;	state Exp;
branches;
next	1.42;
commitid	0L1C4PMmK6O5li5k;

1.42
date	2016.11.11.11.37.25;	author nicm;	state Exp;
branches;
next	1.41;
commitid	07U2xAH1UqYqGpLi;

1.41
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.40;
commitid	pxm6osuE99zELpkU;

1.40
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.39;
commitid	1xIYFpLYkPIXNEvU;

1.39
date	2016.10.15.23.06.39;	author nicm;	state Exp;
branches;
next	1.38;
commitid	a0sAWM4GP1IxWql5;

1.38
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.37;
commitid	TaZ3kOtGiWwKofka;

1.37
date	2016.10.09.08.06.51;	author nicm;	state Exp;
branches;
next	1.36;
commitid	lo0m3pEDfJ3oCRSu;

1.36
date	2016.02.12.12.24.52;	author nicm;	state Exp;
branches;
next	1.35;
commitid	ywjlJ2qqhIjSWyJD;

1.35
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.34;
commitid	rE682EC14v4gpeFy;

1.34
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.33;
commitid	gsQkQsSyBCSmU9ax;

1.33
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.32;
commitid	uzMkp8Z4FE6WB6s6;

1.32
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.31;
commitid	ns7JfXpW9TsHrnT3;

1.31
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.30;
commitid	MRfGAYPLeVqV46rT;

1.30
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.29;
commitid	B5GekkO0CdWpFMrz;

1.29
date	2015.09.16.22.24.54;	author nicm;	state Exp;
branches;
next	1.28;
commitid	GbMuGsUSIjrHMl0R;

1.28
date	2015.04.24.22.19.36;	author nicm;	state Exp;
branches;
next	1.27;
commitid	h1lxJjTgcLGsGtE8;

1.27
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.26;
commitid	b1G1TVWY7l4KyoY6;

1.26
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.25;
commitid	Gq8hgMoG3t1Wy1Zv;

1.25
date	2014.04.17.07.55.43;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2013.10.10.12.00.22;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.25.16.04.07;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.25.11.43.01;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.25.11.36.42;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.25.10.03.00;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.25.10.02.42;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.24.09.33.35;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.22.15.55.22;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.22.15.49.55;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.11.27.15.09.35;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.26.01.54.56;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.24.20.11.59;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.11.17.06.45;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.25.20.05.25;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.04.21.04.43;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.01.23.20.37;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.11.09.04.33;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.11.08.58.05;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.20.19.15.01;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.48
log
@Make the cmd_find_* functions more obvious when looking for a client,
rather than having it inside other functions. Should be no change to the
way targets are resolved just yet.
@
text
@/* $OpenBSD: cmd-run-shell.c,v 1.47 2017/04/20 09:20:22 nicm Exp $ */

/*
 * Copyright (c) 2009 Tiago Cunha <me@@tiagocunha.org>
 * Copyright (c) 2009 Nicholas Marriott <nicm@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/wait.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Runs a command without a window.
 */

static enum cmd_retval	cmd_run_shell_exec(struct cmd *, struct cmdq_item *);

static void	cmd_run_shell_callback(struct job *);
static void	cmd_run_shell_free(void *);
static void	cmd_run_shell_print(struct job *, const char *);

const struct cmd_entry cmd_run_shell_entry = {
	.name = "run-shell",
	.alias = "run",

	.args = { "bt:", 1, 1 },
	.usage = "[-b] " CMD_TARGET_PANE_USAGE " shell-command",

	.tflag = CMD_PANE_CANFAIL,

	.flags = 0,
	.exec = cmd_run_shell_exec
};

struct cmd_run_shell_data {
	char			*cmd;
	struct cmdq_item	*item;
	int			 wp_id;
};

static void
cmd_run_shell_print(struct job *job, const char *msg)
{
	struct cmd_run_shell_data	*cdata = job->data;
	struct window_pane		*wp = NULL;
	struct cmd_find_state		 fs;

	if (cdata->wp_id != -1)
		wp = window_pane_find_by_id(cdata->wp_id);
	if (wp == NULL) {
		if (cdata->item != NULL) {
			cmdq_print(cdata->item, "%s", msg);
			return;
		}
		if (cmd_find_from_nothing(&fs) != 0)
			return;
		wp = fs.wp;
		if (wp == NULL)
			return;
	}

	if (window_pane_set_mode(wp, &window_copy_mode) == 0)
		window_copy_init_for_output(wp);
	if (wp->mode == &window_copy_mode)
		window_copy_add(wp, "%s", msg);
}

static enum cmd_retval
cmd_run_shell_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args			*args = self->args;
	struct cmd_run_shell_data	*cdata;
	struct client			*c = item->state.c;
	struct session			*s = item->state.tflag.s;
	struct winlink			*wl = item->state.tflag.wl;
	struct window_pane		*wp = item->state.tflag.wp;
	const char			*cwd;

	if (item->client != NULL && item->client->session == NULL)
		cwd = item->client->cwd;
	else if (s != NULL)
		cwd = s->cwd;
	else
		cwd = NULL;

	cdata = xcalloc(1, sizeof *cdata);
	cdata->cmd = format_single(item, args->argv[0], c, s, wl, wp);

	if (args_has(args, 't') && wp != NULL)
		cdata->wp_id = wp->id;
	else
		cdata->wp_id = -1;

	if (!args_has(args, 'b'))
		cdata->item = item;

	job_run(cdata->cmd, s, cwd, NULL, cmd_run_shell_callback,
	    cmd_run_shell_free, cdata);

	if (args_has(args, 'b'))
		return (CMD_RETURN_NORMAL);
	return (CMD_RETURN_WAIT);
}

static void
cmd_run_shell_callback(struct job *job)
{
	struct cmd_run_shell_data	*cdata = job->data;
	char				*cmd = cdata->cmd, *msg, *line;
	size_t				 size;
	int				 retcode;

	do {
		if ((line = evbuffer_readline(job->event->input)) != NULL) {
			cmd_run_shell_print(job, line);
			free(line);
		}
	} while (line != NULL);

	size = EVBUFFER_LENGTH(job->event->input);
	if (size != 0) {
		line = xmalloc(size + 1);
		memcpy(line, EVBUFFER_DATA(job->event->input), size);
		line[size] = '\0';

		cmd_run_shell_print(job, line);

		free(line);
	}

	msg = NULL;
	if (WIFEXITED(job->status)) {
		if ((retcode = WEXITSTATUS(job->status)) != 0)
			xasprintf(&msg, "'%s' returned %d", cmd, retcode);
	} else if (WIFSIGNALED(job->status)) {
		retcode = WTERMSIG(job->status);
		xasprintf(&msg, "'%s' terminated by signal %d", cmd, retcode);
	}
	if (msg != NULL)
		cmd_run_shell_print(job, msg);
	free(msg);

	if (cdata->item != NULL)
		cdata->item->flags &= ~CMDQ_WAITING;
}

static void
cmd_run_shell_free(void *data)
{
	struct cmd_run_shell_data	*cdata = data;

	free(cdata->cmd);
	free(cdata);
}
@


1.47
log
@If a #() command doesn't exit, use its most recent line of output (it
must be a full line). Don't let it redraw the status line more than once
a second.

Requested by someone about 10 years ago...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.46 2017/03/08 13:36:12 nicm Exp $ */
d71 1
a71 1
		if (cmd_find_current (&fs, NULL, CMD_FIND_QUIET) != 0)
@


1.46
log
@Add a helper function for the most common format_create/defaults/expand
pattern.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.45 2017/02/16 10:53:25 nicm Exp $ */
d113 2
a114 2
	job_run(cdata->cmd, s, cwd, cmd_run_shell_callback, cmd_run_shell_free,
	    cdata);
@


1.45
log
@Style nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.44 2017/02/03 11:57:27 nicm Exp $ */
d89 1
a89 1
	char				*shellcmd;
a92 1
	struct format_tree		*ft;
a101 5
	ft = format_create(item, FORMAT_NONE, 0);
	format_defaults(ft, item->state.c, s, wl, wp);
	shellcmd = format_expand(ft, args->argv[0]);
	format_free(ft);

d103 1
a103 1
	cdata->cmd = shellcmd;
d113 1
a113 1
	job_run(shellcmd, s, cwd, cmd_run_shell_callback, cmd_run_shell_free,
@


1.44
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.43 2016/11/12 19:05:53 nicm Exp $ */
a133 1
	u_int				 lines;
a134 1
	lines = 0;
a138 1
			lines++;
a148 1
		lines++;
@


1.43
log
@Apply the right fix for run -b, used the wrong diff before.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.42 2016/11/11 11:37:25 nicm Exp $ */
d103 1
a103 1
	ft = format_create(item, 0);
@


1.42
log
@Do not crash with run-shell -b and no window pane available, reported by
Sergei Dyshel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.41 2016/10/16 19:04:05 nicm Exp $ */
d62 1
d66 10
a75 3
	if (cdata->item != NULL && wp == NULL) {
		cmdq_print(cdata->item, "%s", msg);
		return;
@


1.41
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.40 2016/10/16 17:55:14 nicm Exp $ */
d65 1
a65 1
	if (wp == NULL) {
a101 5

	if (args_has(args, 't') && wp != NULL)
		cdata->wp_id = wp->id;
	else
		cdata->wp_id = -1;
@


1.40
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.39 2016/10/15 23:06:39 nicm Exp $ */
d32 1
a32 1
static enum cmd_retval	 cmd_run_shell_exec(struct cmd *, struct cmd_q *);
d52 3
a54 3
	char		*cmd;
	struct cmd_q	*cmdq;
	int		 wp_id;
d66 1
a66 1
		cmdq_print(cdata->cmdq, "%s", msg);
d77 1
a77 1
cmd_run_shell_exec(struct cmd *self, struct cmd_q *cmdq)
d82 3
a84 3
	struct session			*s = cmdq->state.tflag.s;
	struct winlink			*wl = cmdq->state.tflag.wl;
	struct window_pane		*wp = cmdq->state.tflag.wp;
d88 2
a89 2
	if (cmdq->client != NULL && cmdq->client->session == NULL)
		cwd = cmdq->client->cwd;
d95 2
a96 2
	ft = format_create(cmdq, 0);
	format_defaults(ft, cmdq->state.c, s, wl, wp);
d114 1
a114 1
		cdata->cmdq = cmdq;
d166 2
a167 2
	if (cdata->cmdq != NULL)
		cdata->cmdq->flags &= ~CMD_Q_WAITING;
@


1.39
log
@Only use pane with run-shell if -t is given.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.38 2016/10/10 21:51:39 nicm Exp $ */
a53 1
	int		 bflag;
d94 1
a101 1
	cdata->bflag = args_has(args, 'b');
d108 7
a114 2
	cdata->cmdq = cmdq;
	cmdq->references++;
d119 1
a119 1
	if (cdata->bflag)
d128 1
a128 2
	struct cmd_q			*cmdq = cdata->cmdq;
	char				*cmd, *msg, *line;
a132 4
	if (cmdq->flags & CMD_Q_DEAD)
		return;
	cmd = cdata->cmd;

d165 3
a173 4
	struct cmd_q			*cmdq = cdata->cmdq;

	if (!cmdq_free(cmdq) && !cdata->bflag)
		cmdq_continue(cmdq);
@


1.38
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.37 2016/10/09 08:06:51 nicm Exp $ */
d103 5
a107 1
	cdata->wp_id = wp != NULL ? (int) wp->id : -1;
@


1.37
log
@Pass file/line to new command for if-shell so that errors appear
sensibly.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.36 2016/02/12 12:24:52 nicm Exp $ */
d32 1
a32 1
enum cmd_retval	 cmd_run_shell_exec(struct cmd *, struct cmd_q *);
d34 3
a36 3
void	cmd_run_shell_callback(struct job *);
void	cmd_run_shell_free(void *);
void	cmd_run_shell_print(struct job *, const char *);
d58 1
a58 1
void
d77 1
a77 1
enum cmd_retval
d116 1
a116 1
void
d164 1
a164 1
void
@


1.36
log
@Expand client formats in run-shell.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.35 2015/12/14 00:31:54 nicm Exp $ */
d100 1
a100 1
	cdata = xmalloc(sizeof *cdata);
@


1.35
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.34 2015/12/13 21:53:57 nicm Exp $ */
d96 1
a96 1
	format_defaults(ft, NULL, s, wl, wp);
@


1.34
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.33 2015/12/13 14:32:38 nicm Exp $ */
d45 3
a47 1
	.flags = CMD_PANE_T|CMD_CANFAIL,
@


1.33
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.32 2015/12/11 12:27:36 nicm Exp $ */
d39 8
a46 5
	"run-shell", "run",
	"bt:", 1, 1,
	"[-b] " CMD_TARGET_PANE_USAGE " shell-command",
	CMD_PANE_T|CMD_CANFAIL,
	cmd_run_shell_exec
@


1.32
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.31 2015/12/08 08:34:18 nicm Exp $ */
d42 1
a42 1
	0,
d78 3
a80 4
	struct client			*c;
	struct session			*s = NULL;
	struct winlink			*wl = NULL;
	struct window_pane		*wp = NULL;
d84 6
a89 18
	if (args_has(args, 't')) {
		wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp);
		cwd = wp->cwd;
	} else {
		c = cmd_find_client(cmdq, NULL, 1);
		if (c != NULL && c->session != NULL) {
			s = c->session;
			wl = s->curw;
			wp = wl->window->active;
		}
		if (cmdq->client != NULL && cmdq->client->session == NULL)
			cwd = cmdq->client->cwd;
		else if (s != NULL)
			cwd = s->cwd;
		else
			cwd = NULL;
	}

@


1.31
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.30 2015/10/31 08:13:58 nicm Exp $ */
d103 1
a103 1
	ft = format_create(0);
@


1.30
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.29 2015/09/16 22:24:54 nicm Exp $ */
d103 1
a103 1
	ft = format_create();
@


1.29
log
@Rename cmd_q dead flag to a general flags bitmask (will be more flags later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.28 2015/04/24 22:19:36 nicm Exp $ */
d83 1
a83 1
	int				 cwd;
d100 1
a100 1
			cwd = -1;
@


1.28
log
@Set working directory for run-shell and if-shell.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.27 2015/02/05 10:29:43 nicm Exp $ */
d134 1
a134 1
	if (cmdq->dead)
@


1.27
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.26 2014/10/20 22:29:25 nicm Exp $ */
d83 1
d85 1
a85 1
	if (args_has(args, 't'))
d87 2
a88 1
	else {
d95 6
d116 2
a117 1
	job_run(shellcmd, s, cmd_run_shell_callback, cmd_run_shell_free, cdata);
@


1.26
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.25 2014/04/17 07:55:43 nicm Exp $ */
d96 1
a96 6
	if (s != NULL)
		format_session(ft, s);
	if (s != NULL && wl != NULL)
		format_winlink(ft, s, wl);
	if (wp != NULL)
		format_window_pane(ft, wp);
@


1.25
log
@Remove the "info" message mechanism, this was only used for about five
mostly useless and annoying messages. Change those commands to silence
on success like all the others. Still accept the -q command line flag
and "quiet" server option for now.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.24 2013/10/10 12:00:22 nicm Exp $ */
a42 1
	NULL,
@


1.24
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.23 2013/03/25 16:04:07 nicm Exp $ */
d164 3
a166 7
	if (msg != NULL) {
		if (lines == 0)
			cmdq_info(cmdq, "%s", msg);
		else
			cmd_run_shell_print(job, msg);
		free(msg);
	}
@


1.23
log
@Try to establish client for run-shell and if-shell if no -t.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.22 2013/03/25 11:43:01 nicm Exp $ */
a42 1
	NULL,
@


1.22
log
@Extend jobs to support writing and use that for copy-pipe instead of
popen, from Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.21 2013/03/25 11:36:42 nicm Exp $ */
d80 1
d88 8
@


1.21
log
@Fix if-shell and run-shell if there are no sessions. Batted around
through several people, finished off by Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.20 2013/03/25 10:03:00 nicm Exp $ */
d106 1
a106 1
	job_run(shellcmd, cmd_run_shell_callback, cmd_run_shell_free, cdata);
@


1.20
log
@Remove previous.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.19 2013/03/25 10:02:42 nicm Exp $ */
d52 1
a52 1
	u_int		 wp_id;
d59 1
a59 1
	struct window_pane		*wp;
d61 2
a62 1
	wp = window_pane_find_by_id(cdata->wp_id);
d80 3
a82 3
	struct session			*s;
	struct winlink			*wl;
	struct window_pane		*wp;
d85 2
a86 3
	wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp);
	if (wl == NULL)
		return (CMD_RETURN_ERROR);
d89 6
a94 3
	format_session(ft, s);
	format_winlink(ft, s, wl);
	format_window_pane(ft, wp);
d101 1
a101 1
	cdata->wp_id = wp->id;
@


1.19
log
@Plug small memory leak in run-shell. Don't potentially leak the command
to run were it to fail.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.18 2013/03/24 09:54:10 nicm Exp $ */
a103 1
	free(shellcmd);
@


1.18
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.17 2013/03/24 09:33:35 nicm Exp $ */
d104 1
@


1.17
log
@Expand format variables in the run-shell and if-shell shell commands,
from Thiago Padilha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.16 2013/03/22 15:55:22 nicm Exp $ */
d32 1
a32 1
enum cmd_retval	 cmd_run_shell_exec(struct cmd *, struct cmd_ctx *);
d40 2
a41 2
	"t:", 1, 1,
	CMD_TARGET_PANE_USAGE " command",
d50 2
a51 1
	struct cmd_ctx	*ctx;
a58 1
	struct cmd_ctx			*ctx = cdata->ctx;
d63 1
a63 1
		ctx->print(ctx, "%s", msg);
d74 1
a74 1
cmd_run_shell_exec(struct cmd *self, struct cmd_ctx *ctx)
d84 1
a84 1
	wl = cmd_find_pane(ctx, args_get(args, 't'), &s, &wp);
d97 1
d100 2
a101 2
	cdata->ctx = ctx;
	cmd_ref_ctx(ctx);
d105 3
a107 1
	return (CMD_RETURN_YIELD);	/* don't let client exit */
d114 1
a114 1
	struct cmd_ctx			*ctx = cdata->ctx;
d120 1
a120 3
	if (ctx->cmdclient != NULL && ctx->cmdclient->flags & CLIENT_DEAD)
		return;
	if (ctx->curclient != NULL && ctx->curclient->flags & CLIENT_DEAD)
d122 1
d127 1
a127 1
			cmd_run_shell_print (job, line);
a144 2
	cmd = cdata->cmd;

d155 1
a155 1
			ctx->info(ctx, "%s", msg);
d166 1
a166 1
	struct cmd_ctx			*ctx = cdata->ctx;
d168 2
a169 3
	if (ctx->cmdclient != NULL)
		ctx->cmdclient->flags |= CLIENT_EXIT;
	cmd_free_ctx(ctx);
@


1.16
log
@evbuffer_readline returns allocated storage, don't leak it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.15 2013/03/22 15:49:55 nicm Exp $ */
d78 3
a80 1
	const char			*shellcmd = args->argv[0];
d82 1
d84 2
a85 1
	if (cmd_find_pane(ctx, args_get(args, 't'), NULL, &wp) == NULL)
d88 7
d96 1
a96 1
	cdata->cmd = xstrdup(args->argv[0]);
@


1.15
log
@Add functions to allocate and free command contexts rather than doing it
all on the stack.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.14 2012/11/27 15:09:35 nicm Exp $ */
d115 1
@


1.14
log
@Allow cmd-run-shell to accept -t to specify the pane to display the
output, requested by Alexander Tsepkov.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.13 2012/07/11 07:10:15 nicm Exp $ */
d50 1
a50 1
	struct cmd_ctx	 ctx;
d58 1
a58 1
	struct cmd_ctx			*ctx = &cdata->ctx;
a86 1
	memcpy(&cdata->ctx, ctx, sizeof cdata->ctx);
d88 2
a89 4
	if (ctx->cmdclient != NULL)
		ctx->cmdclient->references++;
	if (ctx->curclient != NULL)
		ctx->curclient->references++;
d100 1
a100 1
	struct cmd_ctx			*ctx = &cdata->ctx;
d154 1
a154 1
	struct cmd_ctx			*ctx = &cdata->ctx;
d156 1
a156 2
	if (ctx->cmdclient != NULL) {
		ctx->cmdclient->references--;
d158 1
a158 3
	}
	if (ctx->curclient != NULL)
		ctx->curclient->references--;
@


1.13
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.12 2012/07/10 11:53:01 nicm Exp $ */
d33 4
a36 2
void		 cmd_run_shell_callback(struct job *);
void		 cmd_run_shell_free(void *);
d40 2
a41 2
	"", 1, 1,
	"command",
d51 1
d54 19
d79 4
d86 1
d117 1
a117 1
			ctx->print(ctx, "%s", line);
d128 1
a128 1
		ctx->print(ctx, "%s", line);
d145 2
a146 2
		if (lines != 0)
			ctx->print(ctx, "%s", msg);
d148 1
a148 1
			ctx->info(ctx, "%s", msg);
@


1.12
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.11 2011/01/26 01:54:56 nicm Exp $ */
d32 3
a34 4
int	cmd_run_shell_exec(struct cmd *, struct cmd_ctx *);

void	cmd_run_shell_callback(struct job *);
void	cmd_run_shell_free(void *);
d51 1
a51 1
int
d69 1
a69 1
	return (1);	/* don't let client exit */
@


1.11
log
@Simplify the way jobs work and drop the persist type, so all jobs are
fire-and-forget.

Status jobs now managed with two trees of output (new and old), rather
than storing the output in the jobs themselves. When the status line is
processed any jobs which don't appear in the new tree are started and
the output from the old tree displayed. When a job finishes it updates
the new tree with its output and that is used for any subsequent
redraws. When the status interval expires, the new tree is moved to the
old so that all jobs are run again.

This fixes the "#(echo %H:%M:%S)" problem which would lead to thousands
of identical persistent jobs and high memory use (this can still be
achieved by adding "sleep 30" but that is much less likely to happen by
accident).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.10 2011/01/04 00:42:47 nicm Exp $ */
d23 1
d105 1
a105 1
		xfree(line);
d123 1
a123 1
		xfree(msg);
d140 2
a141 2
	xfree(cdata->cmd);
	xfree(cdata);
@


1.10
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.9 2010/07/24 20:11:59 nicm Exp $ */
d56 1
a56 1
	struct job			*job;
d67 1
a67 3
	job = job_add(NULL, 0, NULL,
	    args->argv[0], cmd_run_shell_callback, cmd_run_shell_free, cdata);
	job_run(job);
@


1.9
log
@When changing so that the client passes its stdout and stderr as well as
stdin up to the server, I forgot one essential point - the tmux server
could now be both the producer and consumer. This happens when tmux is
run inside tmux, as well as when piping tmux commands together.

So, using stdio(3) was a bad idea - if sufficient data was written, this
could block in write(2). When that happened and the server was both
producer and consumer, it deadlocks.

Change to use libevent bufferevents for the client stdin, stdout and
stderr instead. This is trivial enough for output but requires a
callback mechanism to trigger when stdin is finished.

This relies on the underlying polling mechanism for libevent to work
with whatever devices to which the user could redirect stdin, stdout or
stderr, hence the change to use poll(2) over kqueue(2) for tmux.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.8 2010/07/11 17:06:45 nicm Exp $ */
d38 1
d40 4
a43 6
	CMD_ARG1, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_run_shell_exec,
	cmd_target_free,
	cmd_target_print
d54 1
a54 1
	struct cmd_target_data		*data = self->data;
d59 1
a59 1
	cdata->cmd = xstrdup(data->arg);
d68 1
a68 1
	    data->arg, cmd_run_shell_callback, cmd_run_shell_free, cdata);
@


1.8
log
@Return the command client return code with MSG_EXIT now that MSG_ERROR and
MSG_PRINT are unused.

New clients should be compatible with old tmux servers but vice versa may print
an error.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.7 2010/05/25 20:05:25 nicm Exp $ */
a133 1
	struct msg_exit_data		 exitdata;
d137 1
a137 3
		exitdata.retcode = ctx->cmdclient->retcode;
		server_write_client(
		    ctx->cmdclient, MSG_EXIT, &exitdata, sizeof exitdata);
@


1.7
log
@Don't die if the client has been detached when the job finishes, just
don't display the output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.6 2009/11/13 19:53:29 nicm Exp $ */
d134 1
d138 3
a140 1
		server_write_client(ctx->cmdclient, MSG_EXIT, NULL, 0);
@


1.6
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.5 2009/11/04 21:04:43 nicm Exp $ */
d84 5
@


1.5
log
@Switch jobs over to use a bufferevent.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.4 2009/11/01 23:20:37 nicm Exp $ */
d39 1
a39 1
	CMD_ARG1, 0,
@


1.4
log
@Add a flag for jobs that shouldn't be freed after they've died and use it for
status jobs, then only kill those jobs when status-left, status-right or
set-titles-string is changed.

Fixes problems with changing options from inside #().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.3 2009/10/11 09:04:33 nicm Exp $ */
d80 2
a81 2
	char				*cmd, *msg, *line, *buf;
	size_t				 off, len, llen;
d83 1
d85 13
a97 2
	buf = BUFFER_OUT(job->out);
	len = BUFFER_USED(job->out);
d99 2
a100 1
	cmd = cdata->cmd;
d102 1
a102 14
	if (len != 0) {
		line = buf;
		for (off = 0; off < len; off++) {
			if (buf[off] == '\n') {
				llen = buf + off - line;
				if (llen > INT_MAX)
					break;
				ctx->print(ctx, "%.*s", (int) llen, line);
				line = buf + off + 1;
			}
		}
		llen = buf + len - line;
		if (llen > 0 && llen < INT_MAX)
			ctx->print(ctx, "%.*s", (int) llen, line);
d105 2
d116 1
a116 1
		if (len != 0)
@


1.3
log
@Remove a debugging leftover and add copyright.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.2 2009/10/11 08:58:05 nicm Exp $ */
d68 1
a68 1
	job = job_add(NULL, NULL,
a119 2

	job_free(job);	/* calls cmd_run_shell_free */
@


1.2
log
@Switch run-shell over to queue the command in the background like #().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-run-shell.c,v 1.1 2009/09/20 19:15:01 nicm Exp $ */
d5 1
a129 1
	return;
@


1.1
log
@run-shell command to run a shell command without opening a window, sending
stdout to output mode.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d32 3
d46 5
d54 19
a72 10
	struct cmd_target_data	*data = self->data;
	FILE			*fp;
	char			*buf, *lbuf, *msg;
	size_t			 len;
	int			 has_output, ret, status;

	if ((fp = popen(data->arg, "r")) == NULL) {
		ctx->error(ctx, "popen error");
		return (-1);
	}
d74 24
a97 10
	has_output = 0;
	lbuf = NULL;
	while ((buf = fgetln(fp, &len)) != NULL) {
		if (buf[len - 1] == '\n')
			buf[len - 1] = '\0';
		else {
			lbuf = xmalloc(len + 1);
			memcpy(lbuf, buf, len);
			lbuf[len] = '\0';
			buf = lbuf;
d99 3
a101 2
		ctx->print(ctx, "%s", buf);
		has_output = 1;
a102 2
	if (lbuf != NULL)
		xfree(lbuf);
d105 6
a110 10
	status = pclose(fp);

	if (WIFEXITED(status)) {
		if ((ret = WEXITSTATUS(status)) == 0)
			return (0);
		xasprintf(&msg, "'%s' returned %d", data->arg, ret);
	} else if (WIFSIGNALED(status)) {
		xasprintf(
		    &msg, "'%s' terminated by signal %d", data->arg,
		    WTERMSIG(status));
a111 1

d113 1
a113 1
		if (has_output)
d120 19
a138 1
	return (0);
@

