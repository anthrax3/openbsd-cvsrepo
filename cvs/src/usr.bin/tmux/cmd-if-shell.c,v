head	1.56;
access;
symbols
	OPENBSD_6_2:1.56.0.2
	OPENBSD_6_2_BASE:1.56
	OPENBSD_6_1:1.51.0.4
	OPENBSD_6_1_BASE:1.51
	OPENBSD_6_0:1.43.0.2
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.40.0.2
	OPENBSD_5_9_BASE:1.40
	OPENBSD_5_8:1.32.0.4
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.25.0.6
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.2
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7;
locks; strict;
comment	@ * @;


1.56
date	2017.04.25.11.49.35;	author nicm;	state Exp;
branches;
next	1.55;
commitid	8B9f4ggPw3Kfvoxe;

1.55
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.54;
commitid	RXMp6wwG5a5Y82bo;

1.54
date	2017.04.22.06.27.15;	author nicm;	state Exp;
branches;
next	1.53;
commitid	wvTY0NbPkAK6OaXh;

1.53
date	2017.04.21.14.01.19;	author nicm;	state Exp;
branches;
next	1.52;
commitid	6dh4rgGOD5wckeD9;

1.52
date	2017.04.20.09.20.22;	author nicm;	state Exp;
branches;
next	1.51;
commitid	Mq5Wq9pThOn7RhSJ;

1.51
date	2017.03.08.13.36.12;	author nicm;	state Exp;
branches;
next	1.50;
commitid	jI8R4kuPSDw6nngR;

1.50
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.49;
commitid	BLRh0qXo7OVTPhiT;

1.49
date	2017.01.15.22.00.56;	author nicm;	state Exp;
branches;
next	1.48;
commitid	P8Zuj7wnJMd8B8vz;

1.48
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.47;
commitid	pxm6osuE99zELpkU;

1.47
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.46;
commitid	1xIYFpLYkPIXNEvU;

1.46
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.45;
commitid	1GCC1n59gejVg5Ih;

1.45
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.44;
commitid	TaZ3kOtGiWwKofka;

1.44
date	2016.10.09.08.06.51;	author nicm;	state Exp;
branches;
next	1.43;
commitid	lo0m3pEDfJ3oCRSu;

1.43
date	2016.04.29.17.12.12;	author nicm;	state Exp;
branches;
next	1.42;
commitid	7Ws2WphNLDkLeDHV;

1.42
date	2016.04.29.14.05.24;	author nicm;	state Exp;
branches;
next	1.41;
commitid	wZaePCOma60t58oN;

1.41
date	2016.03.01.12.06.07;	author nicm;	state Exp;
branches;
next	1.40;
commitid	gWWSXkaHYCnCm5SK;

1.40
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.39;
commitid	rE682EC14v4gpeFy;

1.39
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.38;
commitid	gsQkQsSyBCSmU9ax;

1.38
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.37;
commitid	uzMkp8Z4FE6WB6s6;

1.37
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.36;
commitid	ns7JfXpW9TsHrnT3;

1.36
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.35;
commitid	MRfGAYPLeVqV46rT;

1.35
date	2015.11.20.22.02.54;	author nicm;	state Exp;
branches;
next	1.34;
commitid	U2ZeZzlhuEbtOCee;

1.34
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.33;
commitid	B5GekkO0CdWpFMrz;

1.33
date	2015.09.16.22.24.54;	author nicm;	state Exp;
branches;
next	1.32;
commitid	GbMuGsUSIjrHMl0R;

1.32
date	2015.04.24.22.19.36;	author nicm;	state Exp;
branches;
next	1.31;
commitid	h1lxJjTgcLGsGtE8;

1.31
date	2015.04.21.21.31.02;	author nicm;	state Exp;
branches;
next	1.30;
commitid	5XKKGc11tslL7VO3;

1.30
date	2015.04.21.15.18.06;	author nicm;	state Exp;
branches;
next	1.29;
commitid	O2vPTZUXIF49h2z5;

1.29
date	2015.04.19.21.34.21;	author nicm;	state Exp;
branches;
next	1.28;
commitid	wug6ctIOfhVMeWQp;

1.28
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.27;
commitid	b1G1TVWY7l4KyoY6;

1.27
date	2014.12.02.23.39.02;	author nicm;	state Exp;
branches;
next	1.26;
commitid	QmONsndzUBmuF4ik;

1.26
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.25;
commitid	Gq8hgMoG3t1Wy1Zv;

1.25
date	2013.10.10.12.04.38;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2013.10.10.12.00.19;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.25.16.04.07;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.25.11.43.01;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.25.11.36.42;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.24.09.33.35;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.22.15.49.55;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2012.08.11.07.32.16;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2011.10.27.22.40.15;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2011.10.18.08.57.01;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.25.17.50.52;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.26.01.54.56;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.24.20.11.59;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.11.17.06.45;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.01.23.20.37;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.11.09.10.57;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.21.15.32.06;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.09.15.47.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.56
log
@if-shell doesn't need to queue its error message into a callback, and in
fact it can't do so because the item it was working with will have been
freed. Reported by Daniel Hahler.
@
text
@/* $OpenBSD: cmd-if-shell.c,v 1.55 2017/04/22 10:22:39 nicm Exp $ */

/*
 * Copyright (c) 2009 Tiago Cunha <me@@tiagocunha.org>
 * Copyright (c) 2009 Nicholas Marriott <nicm@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/wait.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Executes a tmux command if a shell command returns true or false.
 */

static enum cmd_retval	cmd_if_shell_exec(struct cmd *, struct cmdq_item *);

static void		cmd_if_shell_callback(struct job *);
static void		cmd_if_shell_free(void *);

const struct cmd_entry cmd_if_shell_entry = {
	.name = "if-shell",
	.alias = "if",

	.args = { "bFt:", 2, 3 },
	.usage = "[-bF] " CMD_TARGET_PANE_USAGE " shell-command command "
		 "[command]",

	.target = { 't', CMD_FIND_PANE, CMD_FIND_CANFAIL },

	.flags = 0,
	.exec = cmd_if_shell_exec
};

struct cmd_if_shell_data {
	char			*file;
	u_int			 line;

	char			*cmd_if;
	char			*cmd_else;

	struct client		*client;
	struct cmdq_item	*item;
	struct mouse_event	 mouse;
};

static enum cmd_retval
cmd_if_shell_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args			*args = self->args;
	struct cmdq_shared		*shared = item->shared;
	struct cmd_if_shell_data	*cdata;
	char				*shellcmd, *cmd, *cause;
	struct cmd_list			*cmdlist;
	struct cmdq_item		*new_item;
	struct client			*c = cmd_find_client(item, NULL, 1);
	struct session			*s = item->target.s;
	struct winlink			*wl = item->target.wl;
	struct window_pane		*wp = item->target.wp;
	const char			*cwd;

	if (item->client != NULL && item->client->session == NULL)
		cwd = item->client->cwd;
	else if (s != NULL)
		cwd = s->cwd;
	else
		cwd = NULL;

	shellcmd = format_single(item, args->argv[0], c, s, wl, wp);
	if (args_has(args, 'F')) {
		cmd = NULL;
		if (*shellcmd != '0' && *shellcmd != '\0')
			cmd = args->argv[1];
		else if (args->argc == 3)
			cmd = args->argv[2];
		free(shellcmd);
		if (cmd == NULL)
			return (CMD_RETURN_NORMAL);
		cmdlist = cmd_string_parse(cmd, NULL, 0, &cause);
		if (cmdlist == NULL) {
			if (cause != NULL) {
				cmdq_error(item, "%s", cause);
				free(cause);
			}
			return (CMD_RETURN_ERROR);
		}
		new_item = cmdq_get_command(cmdlist, NULL, &shared->mouse, 0);
		cmdq_insert_after(item, new_item);
		cmd_list_free(cmdlist);
		return (CMD_RETURN_NORMAL);
	}

	cdata = xcalloc(1, sizeof *cdata);
	if (self->file != NULL) {
		cdata->file = xstrdup(self->file);
		cdata->line = self->line;
	}

	cdata->cmd_if = xstrdup(args->argv[1]);
	if (args->argc == 3)
		cdata->cmd_else = xstrdup(args->argv[2]);
	else
		cdata->cmd_else = NULL;

	cdata->client = item->client;
	if (cdata->client != NULL)
		cdata->client->references++;

	if (!args_has(args, 'b'))
		cdata->item = item;
	else
		cdata->item = NULL;
	memcpy(&cdata->mouse, &shared->mouse, sizeof cdata->mouse);

	job_run(shellcmd, s, cwd, NULL, cmd_if_shell_callback,
	    cmd_if_shell_free, cdata);
	free(shellcmd);

	if (args_has(args, 'b'))
		return (CMD_RETURN_NORMAL);
	return (CMD_RETURN_WAIT);
}

static void
cmd_if_shell_callback(struct job *job)
{
	struct cmd_if_shell_data	*cdata = job->data;
	struct client			*c = cdata->client;
	struct cmd_list			*cmdlist;
	struct cmdq_item		*new_item;
	char				*cause, *cmd, *file = cdata->file;
	u_int				 line = cdata->line;

	if (!WIFEXITED(job->status) || WEXITSTATUS(job->status) != 0)
		cmd = cdata->cmd_else;
	else
		cmd = cdata->cmd_if;
	if (cmd == NULL)
		goto out;

	cmdlist = cmd_string_parse(cmd, file, line, &cause);
	if (cmdlist == NULL) {
		if (cause != NULL && cdata->item != NULL)
			cmdq_error(cdata->item, "%s", cause);
		free(cause);
		new_item = NULL;
	} else {
		new_item = cmdq_get_command(cmdlist, NULL, &cdata->mouse, 0);
		cmd_list_free(cmdlist);
	}

	if (new_item != NULL) {
		if (cdata->item == NULL)
			cmdq_append(c, new_item);
		else
			cmdq_insert_after(cdata->item, new_item);
	}

out:
	if (cdata->item != NULL)
		cdata->item->flags &= ~CMDQ_WAITING;
}

static void
cmd_if_shell_free(void *data)
{
	struct cmd_if_shell_data	*cdata = data;

	if (cdata->client != NULL)
		server_client_unref(cdata->client);

	free(cdata->cmd_else);
	free(cdata->cmd_if);

	free(cdata->file);
	free(cdata);
}
@


1.55
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.54 2017/04/22 06:27:15 nicm Exp $ */
a33 1
static enum cmd_retval	cmd_if_shell_error(struct cmdq_item *, void *);
a139 11
static enum cmd_retval
cmd_if_shell_error(struct cmdq_item *item, void *data)
{
	char	*error = data;

	cmdq_error(item, "%s", error);
	free(error);

	return (CMD_RETURN_NORMAL);
}

d159 4
a162 4
		if (cause != NULL)
			new_item = cmdq_get_callback(cmd_if_shell_error, cause);
		else
			new_item = NULL;
@


1.54
log
@Fix if-shell without a client (so in the config file). Reported by Theo
Buehler.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.53 2017/04/21 14:01:19 nicm Exp $ */
d46 1
a46 1
	.tflag = CMD_PANE_CANFAIL,
d73 4
a76 4
	struct client			*c = item->state.c;
	struct session			*s = item->state.tflag.s;
	struct winlink			*wl = item->state.tflag.wl;
	struct window_pane		*wp = item->state.tflag.wp;
@


1.53
log
@Store state shared between multiple commands in the queue in a shared
structure.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.52 2017/04/20 09:20:22 nicm Exp $ */
d123 2
a124 1
	cdata->client->references++;
d197 2
a198 1
	server_client_unref(cdata->client);
@


1.52
log
@If a #() command doesn't exit, use its most recent line of output (it
must be a full line). Don't let it redraw the status line more than once
a second.

Requested by someone about 10 years ago...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.51 2017/03/08 13:36:12 nicm Exp $ */
d68 1
d104 1
a104 1
		new_item = cmdq_get_command(cmdlist, NULL, &item->mouse, 0);
d129 1
a129 1
	memcpy(&cdata->mouse, &item->mouse, sizeof cdata->mouse);
@


1.51
log
@Add a helper function for the most common format_create/defaults/expand
pattern.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.50 2017/02/03 11:57:27 nicm Exp $ */
d130 2
a131 2
	job_run(shellcmd, s, cwd, cmd_if_shell_callback, cmd_if_shell_free,
	    cdata);
@


1.50
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.49 2017/01/15 22:00:56 nicm Exp $ */
d72 1
a75 1
	struct format_tree		*ft;
d85 1
a85 5
	ft = format_create(item, FORMAT_NONE, 0);
	format_defaults(ft, item->state.c, s, wl, wp);
	shellcmd = format_expand(ft, args->argv[0]);
	format_free(ft);

@


1.49
log
@It is silly for cmd_list_parse to return an integer error when it could
just return NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.48 2016/10/16 19:04:05 nicm Exp $ */
d85 1
a85 1
	ft = format_create(item, 0);
@


1.48
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.47 2016/10/16 17:55:14 nicm Exp $ */
d99 2
a100 1
		if (cmd_string_parse(cmd, &cmdlist, NULL, 0, &cause) != 0) {
d171 2
a172 1
	if (cmd_string_parse(cmd, &cmdlist, file, line, &cause) != 0) {
@


1.47
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.46 2016/10/13 22:48:51 nicm Exp $ */
d32 1
a32 1
static enum cmd_retval	 cmd_if_shell_exec(struct cmd *, struct cmd_q *);
d34 3
a36 3
static enum cmd_retval	 cmd_if_shell_error(struct cmd_q *, void *);
static void		 cmd_if_shell_callback(struct job *);
static void		 cmd_if_shell_free(void *);
d60 1
a60 1
	struct cmd_q		*cmdq;
d65 1
a65 1
cmd_if_shell_exec(struct cmd *self, struct cmd_q *cmdq)
d71 4
a74 4
	struct cmd_q			*new_cmdq;
	struct session			*s = cmdq->state.tflag.s;
	struct winlink			*wl = cmdq->state.tflag.wl;
	struct window_pane		*wp = cmdq->state.tflag.wp;
d78 2
a79 2
	if (cmdq->client != NULL && cmdq->client->session == NULL)
		cwd = cmdq->client->cwd;
d85 2
a86 2
	ft = format_create(cmdq, 0);
	format_defaults(ft, cmdq->state.c, s, wl, wp);
d101 1
a101 1
				cmdq_error(cmdq, "%s", cause);
d106 2
a107 2
		new_cmdq = cmdq_get_command(cmdlist, NULL, &cmdq->mouse, 0);
		cmdq_insert_after(cmdq, new_cmdq);
d124 1
a124 1
	cdata->client = cmdq->client;
d128 1
a128 1
		cdata->cmdq = cmdq;
d130 2
a131 2
		cdata->cmdq = NULL;
	memcpy(&cdata->mouse, &cmdq->mouse, sizeof cdata->mouse);
d143 1
a143 1
cmd_if_shell_error(struct cmd_q *cmdq, void *data)
d147 1
a147 1
	cmdq_error(cmdq, "%s", error);
d159 1
a159 1
	struct cmd_q			*new_cmdq;
d172 1
a172 1
			new_cmdq = cmdq_get_callback(cmd_if_shell_error, cause);
d174 1
a174 1
			new_cmdq = NULL;
d176 1
a176 1
		new_cmdq = cmdq_get_command(cmdlist, NULL, &cdata->mouse, 0);
d180 3
a182 3
	if (new_cmdq != NULL) {
		if (cdata->cmdq == NULL)
			cmdq_append(c, new_cmdq);
d184 1
a184 1
			cmdq_insert_after(cdata->cmdq, new_cmdq);
d188 2
a189 2
	if (cdata->cmdq != NULL)
		cdata->cmdq->flags &= ~CMD_Q_WAITING;
@


1.46
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.45 2016/10/10 21:51:39 nicm Exp $ */
d34 3
a36 3
static void	cmd_if_shell_callback(struct job *);
static void	cmd_if_shell_done(struct cmd_q *);
static void	cmd_if_shell_free(void *);
d59 1
a61 3

	int			 bflag;
	int			 references;
d71 1
d106 2
a107 1
		cmdq_run(cmdq, cmdlist, &cmdq->item->mouse);
d124 2
a125 1
	cdata->bflag = args_has(args, 'b');
d127 5
a131 3
	cdata->cmdq = cmdq;
	memcpy(&cdata->mouse, &cmdq->item->mouse, sizeof cdata->mouse);
	cmdq->references++;
a132 1
	cdata->references = 1;
d137 1
a137 1
	if (cdata->bflag)
d142 11
d157 1
a157 1
	struct cmd_q			*cmdq = cdata->cmdq, *cmdq1;
d159 3
a161 4
	char				*cause, *cmd;

	if (cmdq->flags & CMD_Q_DEAD)
		return;
d168 1
a168 1
		return;
d170 8
a177 7
	if (cmd_string_parse(cmd, &cmdlist, cdata->file, cdata->line,
	    &cause) != 0) {
		if (cause != NULL) {
			cmdq_error(cmdq, "%s", cause);
			free(cause);
		}
		return;
d180 6
a185 14
	cmdq1 = cmdq_new(cmdq->client);
	cmdq1->emptyfn = cmd_if_shell_done;
	cmdq1->data = cdata;

	cdata->references++;
	cmdq_run(cmdq1, cmdlist, &cdata->mouse);
	cmd_list_free(cmdlist);
}

static void
cmd_if_shell_done(struct cmd_q *cmdq1)
{
	struct cmd_if_shell_data	*cdata = cmdq1->data;
	struct cmd_q			*cmdq = cdata->cmdq;
d187 3
a189 15
	if (cmdq1->client_exit >= 0)
		cmdq->client_exit = cmdq1->client_exit;
	cmdq_free(cmdq1);

	if (--cdata->references != 0)
		return;

	if (!cmdq_free(cmdq) && !cdata->bflag)
		cmdq_continue(cmdq);

	free(cdata->cmd_else);
	free(cdata->cmd_if);

	free(cdata->file);
	free(cdata);
a195 4
	struct cmd_q			*cmdq = cdata->cmdq;

	if (--cdata->references != 0)
		return;
d197 1
a197 2
	if (!cmdq_free(cmdq) && !cdata->bflag)
		cmdq_continue(cmdq);
@


1.45
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.44 2016/10/09 08:06:51 nicm Exp $ */
a167 1
	cmdq1->flags |= cmdq->flags & CMD_Q_NOHOOKS;
@


1.44
log
@Pass file/line to new command for if-shell so that errors appear
sensibly.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.43 2016/04/29 17:12:12 nicm Exp $ */
d32 1
a32 1
enum cmd_retval	 cmd_if_shell_exec(struct cmd *, struct cmd_q *);
d34 3
a36 3
void	cmd_if_shell_callback(struct job *);
void	cmd_if_shell_done(struct cmd_q *);
void	cmd_if_shell_free(void *);
d66 1
a66 1
enum cmd_retval
d140 1
a140 1
void
d177 1
a177 1
void
d200 1
a200 1
void
@


1.43
log
@Expand client formats (like run-shell), from Stephen M Coakley.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.42 2016/04/29 14:05:24 nicm Exp $ */
d53 3
d112 5
a116 1
	cdata = xmalloc(sizeof *cdata);
d158 2
a159 1
	if (cmd_string_parse(cmd, &cmdlist, NULL, 0, &cause) != 0) {
d195 2
d214 2
@


1.42
log
@Final parts of command hooks, add before- and after- hooks to each command.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.41 2016/03/01 12:06:07 nicm Exp $ */
d84 1
a84 1
	format_defaults(ft, NULL, s, wl, wp);
@


1.41
log
@Remove some more unused variables, and use RB_FOREACH_SAFE in
key_bindings_unref_table.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.40 2015/12/14 00:31:54 nicm Exp $ */
d160 1
@


1.40
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.39 2015/12/13 21:53:57 nicm Exp $ */
a75 2
	cwd = wp->cwd;

d82 1
@


1.39
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.38 2015/12/13 14:32:38 nicm Exp $ */
d46 3
a48 1
	.flags = CMD_PANE_T|CMD_CANFAIL,
@


1.38
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.37 2015/12/11 12:27:36 nicm Exp $ */
d39 9
a47 5
	"if-shell", "if",
	"bFt:", 2, 3,
	"[-bF] " CMD_TARGET_PANE_USAGE " shell-command command [command]",
	CMD_PANE_T|CMD_CANFAIL,
	cmd_if_shell_exec
@


1.37
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.36 2015/12/08 08:34:18 nicm Exp $ */
d42 1
a42 1
	0,
d64 3
a66 4
	struct client			*c;
	struct session			*s = NULL;
	struct winlink			*wl = NULL;
	struct window_pane		*wp = NULL;
d70 1
a70 17
	if (args_has(args, 't')) {
		wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp);
		cwd = wp->cwd;
	} else {
		c = cmd_find_client(cmdq, NULL, 1);
		if (c != NULL && c->session != NULL) {
			s = c->session;
			wl = s->curw;
			wp = wl->window->active;
		}
		if (cmdq->client != NULL && cmdq->client->session == NULL)
			cwd = cmdq->client->cwd;
		else if (s != NULL)
			cwd = s->cwd;
		else
			cwd = NULL;
	}
d72 6
@


1.36
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.35 2015/11/20 22:02:54 nicm Exp $ */
d89 1
a89 1
	ft = format_create(0);
@


1.35
log
@Memory leaks and an uninitialized part of utf8_data, from Patrick Palka.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.34 2015/10/31 08:13:58 nicm Exp $ */
d89 1
a89 1
	ft = format_create();
@


1.34
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.33 2015/09/16 22:24:54 nicm Exp $ */
d100 1
@


1.33
log
@Rename cmd_q dead flag to a general flags bitmask (will be more flags later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.32 2015/04/24 22:19:36 nicm Exp $ */
d69 1
a69 1
	int				 cwd;
d86 1
a86 1
			cwd = -1;
@


1.32
log
@Set working directory for run-shell and if-shell.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.31 2015/04/21 21:31:02 nicm Exp $ */
d146 1
a146 1
	if (cmdq->dead)
@


1.31
log
@The free callback could end up being fired before the done callback
(happens on Cygwin), so use a reference count instead of a single
flag. SF bug 188 reported by "iceboy".
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.30 2015/04/21 15:18:06 nicm Exp $ */
d69 1
d71 1
a71 1
	if (args_has(args, 't'))
d73 2
a74 1
	else {
d81 6
d129 2
a130 1
	job_run(shellcmd, s, cmd_if_shell_callback, cmd_if_shell_free, cdata);
@


1.30
log
@Pass mouse events through to commands for if-shell.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.29 2015/04/19 21:34:21 nicm Exp $ */
d54 1
a54 1
	int			 started;
a115 1
	cdata->started = 0;
d120 1
a154 2
	cdata->started = 1;

d159 1
d172 4
a179 2
	cmdq_free(cmdq1);

d191 1
a191 1
	if (cdata->started)
@


1.29
log
@Rewrite of tmux mouse support which was a mess. Instead of having
options for "mouse-this" and "mouse-that", mouse events may be bound as
keys and there is one option "mouse" that turns on mouse support
entirely (set -g mouse on).

See the new MOUSE SUPPORT section of the man page for description of the
key names and new flags (-t= to specify the pane or window under mouse
as a target, and send-keys -M to pass through a mouse event).

The default builtin bindings for the mouse are:

    bind -n   MouseDown1Pane select-pane -t=; send-keys -M
    bind -n MouseDown1Status select-window -t=
    bind -n   MouseDrag1Pane copy-mode -M
    bind -n MouseDrag1Border resize-pane -M

To get the effect of turning mode-mouse off, do:

    unbind -n MouseDrag1Pane
    unbind -temacs-copy MouseDrag1Pane

The old mouse options are now gone, set-option -q may be used to
suppress warnings if mixing configuration files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.28 2015/02/05 10:29:43 nicm Exp $ */
d47 8
a54 5
	char		*cmd_if;
	char		*cmd_else;
	struct cmd_q	*cmdq;
	int		 bflag;
	int		 started;
d101 1
a101 1
		cmdq_run(cmdq, cmdlist, NULL);
d107 1
d113 1
d118 1
d161 1
a161 1
	cmdq_run(cmdq1, cmdlist, NULL);
@


1.28
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.27 2014/12/02 23:39:02 nicm Exp $ */
d98 1
a98 1
		cmdq_run(cmdq, cmdlist);
d155 1
a155 1
	cmdq_run(cmdq1, cmdlist);
@


1.27
log
@Add -F to if-shell to allow it to be used to check for format or option
values rather than executing a command.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.26 2014/10/20 22:29:25 nicm Exp $ */
d79 1
a79 6
	if (s != NULL)
		format_session(ft, s);
	if (s != NULL && wl != NULL)
		format_winlink(ft, s, wl);
	if (wp != NULL)
		format_window_pane(ft, wp);
@


1.26
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.25 2013/10/10 12:04:38 nicm Exp $ */
d40 2
a41 2
	"bt:", 2, 3,
	"[-b] " CMD_TARGET_PANE_USAGE " shell-command command [command]",
d59 2
a60 1
	char				*shellcmd;
d87 20
@


1.25
log
@Make cmdq->client_exit a tristate (-1 means "not set") so that if
explicitly set it can be copied from child to parent cmdq by if-shell
and source-file. This fixes using attach or new. From Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.24 2013/10/10 12:00:19 nicm Exp $ */
a42 1
	NULL,
@


1.24
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.23 2013/03/25 16:04:07 nicm Exp $ */
d149 3
@


1.23
log
@Try to establish client for run-shell and if-shell if no -t.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.22 2013/03/25 11:43:01 nicm Exp $ */
a42 1
	NULL,
@


1.22
log
@Extend jobs to support writing and use that for copy-pipe instead of
popen, from Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.21 2013/03/25 11:36:42 nicm Exp $ */
d62 1
d70 8
@


1.21
log
@Fix if-shell and run-shell if there are no sessions. Batted around
through several people, finished off by Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.20 2013/03/24 09:54:10 nicm Exp $ */
d92 1
a92 1
	job_run(shellcmd, cmd_if_shell_callback, cmd_if_shell_free, cdata);
@


1.20
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.19 2013/03/24 09:33:35 nicm Exp $ */
d62 3
a64 3
	struct session			*s;
	struct winlink			*wl;
	struct window_pane		*wp;
d67 2
a68 3
	wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp);
	if (wl == NULL)
		return (CMD_RETURN_ERROR);
d71 6
a76 3
	format_session(ft, s);
	format_winlink(ft, s, wl);
	format_window_pane(ft, wp);
@


1.19
log
@Expand format variables in the run-shell and if-shell shell commands,
from Thiago Padilha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.18 2013/03/22 15:49:55 nicm Exp $ */
d32 1
a32 1
enum cmd_retval	 cmd_if_shell_exec(struct cmd *, struct cmd_ctx *);
d35 1
d40 2
a41 2
	"t:", 2, 3,
	CMD_TARGET_PANE_USAGE " shell-command command [command]",
d51 3
a53 1
	struct cmd_ctx	*ctx;
d57 1
a57 1
cmd_if_shell_exec(struct cmd *self, struct cmd_ctx *ctx)
d67 1
a67 1
	wl = cmd_find_pane(ctx, args_get(args, 't'), &s, &wp);
d84 1
d86 3
a88 2
	cdata->ctx = ctx;
	cmd_ref_ctx(ctx);
d93 3
a95 1
	return (CMD_RETURN_YIELD);	/* don't let client exit */
d102 1
a102 1
	struct cmd_ctx			*ctx = cdata->ctx;
d106 4
a109 1
	if (!WIFEXITED(job->status) || WEXITSTATUS(job->status) != 0) {
d111 1
a111 3
		if (cmd == NULL)
			return;
	} else
d113 4
a116 1
	if (cmd_string_parse(cmd, &cmdlist, &cause) != 0) {
d118 1
a118 1
			ctx->error(ctx, "%s", cause);
d124 7
a130 1
	cmd_list_exec(cmdlist, ctx);
d135 16
d154 4
a157 1
	struct cmd_ctx			*ctx = cdata->ctx;
d159 2
a160 3
	if (ctx->cmdclient != NULL)
		ctx->cmdclient->flags |= CLIENT_EXIT;
	cmd_free_ctx(ctx);
@


1.18
log
@Add functions to allocate and free command contexts rather than doing it
all on the stack.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.17 2012/08/11 07:32:16 nicm Exp $ */
d39 2
a40 2
	"", 2, 3,
	"shell-command command [command]",
d58 16
a73 1
	const char			*shellcmd = args->argv[0];
d86 1
@


1.17
log
@Remove dead code, from Sean Estabrooks.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.16 2012/07/11 07:10:15 nicm Exp $ */
d50 1
a50 1
	struct cmd_ctx	 ctx;
a65 1
	memcpy(&cdata->ctx, ctx, sizeof cdata->ctx);
d67 2
a68 4
	if (ctx->cmdclient != NULL)
		ctx->cmdclient->references++;
	if (ctx->curclient != NULL)
		ctx->curclient->references++;
d79 1
a79 1
	struct cmd_ctx			*ctx = &cdata->ctx;
d105 1
a105 1
	struct cmd_ctx			*ctx = &cdata->ctx;
d107 1
a107 2
	if (ctx->cmdclient != NULL) {
		ctx->cmdclient->references--;
d109 1
a109 3
	}
	if (ctx->curclient != NULL)
		ctx->curclient->references--;
@


1.16
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.15 2012/07/10 11:53:01 nicm Exp $ */
a108 1
	struct msg_exit_data		 exitdata;
a111 1
		exitdata.retcode = ctx->cmdclient->retcode;
@


1.15
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.14 2011/10/27 22:40:15 nicm Exp $ */
d32 1
a32 1
int	cmd_if_shell_exec(struct cmd *, struct cmd_ctx *);
d53 1
a53 1
int
d75 1
a75 1
	return (1);	/* don't let client exit */
@


1.14
log
@Didn't really think the else behaviour through - requiring argv to
contain "else" is silly so just omit that, also some manpage
tweaks. From Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.13 2011/10/18 08:57:01 nicm Exp $ */
d23 1
d95 1
a95 1
			xfree(cause);
d119 3
a121 4
	if (cdata->cmd_else != NULL)
		xfree(cdata->cmd_else);
	xfree(cdata->cmd_if);
	xfree(cdata);
@


1.13
log
@Add an else clause for if-shell, from "arno-" on SourceForge.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.12 2011/05/25 17:50:52 nicm Exp $ */
d28 1
a28 1
 * Executes a tmux command if a shell command returns true.
a30 1
int	cmd_if_shell_check(struct args *);
d38 2
a39 2
	"", 2, 4,
	"shell-command command [else command]",
d42 1
a42 1
	cmd_if_shell_check,
a52 10
cmd_if_shell_check(struct args *args)
{
	if (args->argc == 3)
		return (-1);
	if (args->argc == 4 && strcmp(args->argv[2], "else") != 0)
		return (-1);
	return (0);
}

int
d61 2
a62 2
	if (args->argc == 4)
		cdata->cmd_else = xstrdup(args->argv[3]);
d83 1
a83 2
	char				*cmd;
	char				*cause;
@


1.12
log
@Nuke a redundant if statement, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.11 2011/01/26 01:54:56 nicm Exp $ */
d31 1
d39 2
a40 2
	"", 2, 2,
	"shell-command command",
d43 1
a43 1
	NULL,
d48 2
a49 1
	char		*cmd;
d54 10
d71 5
a75 1
	cdata->cmd = xstrdup(args->argv[1]);
d94 1
d97 7
a103 4
	if (!WIFEXITED(job->status) || WEXITSTATUS(job->status) != 0)
		return;

	if (cmd_string_parse(cdata->cmd, &cmdlist, &cause) != 0) {
d130 3
a132 1
	xfree(cdata->cmd);
@


1.11
log
@Simplify the way jobs work and drop the persist type, so all jobs are
fire-and-forget.

Status jobs now managed with two trees of output (new and old), rather
than storing the output in the jobs themselves. When the status line is
processed any jobs which don't appear in the new tree are started and
the output from the old tree displayed. When a job finishes it updates
the new tree with its output and that is used for any subsequent
redraws. When the status interval expires, the new tree is moved to the
old so that all jobs are run again.

This fixes the "#(echo %H:%M:%S)" problem which would lead to thousands
of identical persistent jobs and high memory use (this can still be
achieved by adding "sleep 30" but that is much less likely to happen by
accident).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.10 2011/01/04 00:42:46 nicm Exp $ */
d91 1
a91 5
	if (cmd_list_exec(cmdlist, ctx) < 0) {
		cmd_list_free(cmdlist);
		return;
	}

@


1.10
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.9 2010/07/24 20:11:59 nicm Exp $ */
d56 1
a56 1
	struct job			*job;
d67 1
a67 3
	job = job_add(NULL, 0, NULL,
	    args->argv[0], cmd_if_shell_callback, cmd_if_shell_free, cdata);
	job_run(job);
@


1.9
log
@When changing so that the client passes its stdout and stderr as well as
stdin up to the server, I forgot one essential point - the tmux server
could now be both the producer and consumer. This happens when tmux is
run inside tmux, as well as when piping tmux commands together.

So, using stdio(3) was a bad idea - if sufficient data was written, this
could block in write(2). When that happened and the server was both
producer and consumer, it deadlocks.

Change to use libevent bufferevents for the client stdin, stdout and
stderr instead. This is trivial enough for output but requires a
callback mechanism to trigger when stdin is finished.

This relies on the underlying polling mechanism for libevent to work
with whatever devices to which the user could redirect stdin, stdout or
stderr, hence the change to use poll(2) over kqueue(2) for tmux.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.8 2010/07/11 17:06:45 nicm Exp $ */
d38 1
d40 4
a43 6
	CMD_ARG2, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_if_shell_exec,
	cmd_target_free,
	cmd_target_print
d54 1
a54 1
	struct cmd_target_data		*data = self->data;
d59 1
a59 1
	cdata->cmd = xstrdup(data->arg2);
d68 1
a68 1
	    data->arg, cmd_if_shell_callback, cmd_if_shell_free, cdata);
@


1.8
log
@Return the command client return code with MSG_EXIT now that MSG_ERROR and
MSG_PRINT are unused.

New clients should be compatible with old tmux servers but vice versa may print
an error.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.7 2009/11/13 19:53:29 nicm Exp $ */
d112 1
a112 2
		server_write_client(
		    ctx->cmdclient, MSG_EXIT, &exitdata, sizeof exitdata);
@


1.7
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.6 2009/11/01 23:20:37 nicm Exp $ */
d107 1
d111 3
a113 1
		server_write_client(ctx->cmdclient, MSG_EXIT, NULL, 0);
@


1.6
log
@Add a flag for jobs that shouldn't be freed after they've died and use it for
status jobs, then only kill those jobs when status-left, status-right or
set-titles-string is changed.

Fixes problems with changing options from inside #().
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.5 2009/10/11 09:10:57 nicm Exp $ */
d39 1
a39 1
	CMD_ARG2, 0,
@


1.5
log
@Convert if-shell over to the background job framework as well.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.4 2009/09/21 15:32:06 nicm Exp $ */
d68 1
a68 1
	job = job_add(NULL, NULL,
d83 1
a83 2
	if (!WIFEXITED(job->status) || WEXITSTATUS(job->status) != 0) {
		job_free(job);	/* calls cmd_if_shell_free */
a84 1
	}
@


1.4
log
@Use KEYC_NONE constant instead of 0 on init.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d5 1
d21 1
a22 2
#include <errno.h>
#include <stdlib.h>
a30 1
int	cmd_if_shell_parse(struct cmd *, int, char **, char **);
a31 3
void	cmd_if_shell_free(struct cmd *);
void	cmd_if_shell_init(struct cmd *, int);
size_t	cmd_if_shell_print(struct cmd *, char *, size_t);
d33 2
a34 4
struct cmd_if_shell_data {
	char *cmd;
	char *sh_cmd;
};
d39 3
a41 3
	0, 0,
	cmd_if_shell_init,
	cmd_if_shell_parse,
d43 2
a44 2
	cmd_if_shell_free,
	cmd_if_shell_print
d47 4
a50 9
void
cmd_if_shell_init(struct cmd *self, unused int arg)
{
	struct cmd_if_shell_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->cmd = NULL;
	data->sh_cmd = NULL;
}
d53 1
a53 1
cmd_if_shell_parse(struct cmd *self, int argc, char **argv, char **cause)
d55 16
a70 23
	struct cmd_if_shell_data	*data;
	int				 opt;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "")) != -1) {
		switch (opt) {
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 2)
		goto usage;

	data->sh_cmd = xstrdup(argv[0]);
	data->cmd = xstrdup(argv[1]);
	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);
d72 1
a72 2
	self->entry->free(self);
	return (-1);
d75 2
a76 2
int
cmd_if_shell_exec(struct cmd *self, struct cmd_ctx *ctx)
d78 2
a79 1
	struct cmd_if_shell_data	*data = self->data;
a81 1
	int				 ret;
d83 4
a86 5
	if ((ret = system(data->sh_cmd)) < 0) {
		ctx->error(ctx, "system error: %s", strerror(errno));
		return (-1);
	} else if (ret != 0)
		return (0);
d88 1
a88 1
	if (cmd_string_parse(data->cmd, &cmdlist, &cause) != 0) {
d93 1
a93 1
		return (-1);
d98 1
a98 1
		return (-1);
a101 1
	return (0);
d105 1
a105 1
cmd_if_shell_free(struct cmd *self)
d107 2
a108 1
	struct cmd_if_shell_data	*data = self->data;
d110 6
a115 12
	if (data->cmd != NULL)
		xfree(data->cmd);
	if (data->sh_cmd != NULL)
		xfree(data->sh_cmd);
	xfree(data);
}

size_t
cmd_if_shell_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_if_shell_data	*data = self->data;
	size_t				off = 0;
d117 2
a118 8
	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->sh_cmd != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->sh_cmd);
	if (off < len && data->cmd != NULL)
		off += cmd_prarg(buf + off, len - off, " ", data->cmd);
	return (off);
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d69 1
a69 1
	self->entry->init(self, 0);
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-if-shell.c,v 1.1 2009/07/09 15:47:49 nicm Exp $ */
a32 2
void	cmd_if_shell_send(struct cmd *, struct buffer *);
void	cmd_if_shell_recv(struct cmd *, struct buffer *);
a48 2
	cmd_if_shell_send,
	cmd_if_shell_recv,
a122 21
}

void
cmd_if_shell_send(struct cmd *self, struct buffer *b)
{
	struct cmd_if_shell_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->cmd);
	cmd_send_string(b, data->sh_cmd);
}

void
cmd_if_shell_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_if_shell_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->cmd = cmd_recv_string(b);
	data->sh_cmd = cmd_recv_string(b);
@


1.1
log
@New command, if-shell (alias if). Executes the tmux command in the second
argument if the shell command in the first succeeds, for example:

       if "[ -e ~/.tmux.conf.alt ]" "source .tmux.conf.alt"

Written by Tiago Cunha, many thanks.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d47 1
a47 1
	0,
@

