head	1.44;
access;
symbols
	OPENBSD_6_2_BASE:1.44
	OPENBSD_6_1:1.43.0.4
	OPENBSD_6_1_BASE:1.43
	OPENBSD_6_0:1.38.0.4
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.2
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.32.0.4
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.28.0.4
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.44
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.43;
commitid	RXMp6wwG5a5Y82bo;

1.43
date	2017.02.16.12.18.38;	author nicm;	state Exp;
branches;
next	1.42;
commitid	9JPgA7ybwe3HudvI;

1.42
date	2017.01.02.22.42.19;	author nicm;	state Exp;
branches;
next	1.41;
commitid	BcgIqwACYGILk0Hc;

1.41
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.40;
commitid	pxm6osuE99zELpkU;

1.40
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.39;
commitid	S3IpyYTkmviA6lfM;

1.39
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.38;
commitid	TaZ3kOtGiWwKofka;

1.38
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.37;
commitid	rE682EC14v4gpeFy;

1.37
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.36;
commitid	gsQkQsSyBCSmU9ax;

1.36
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.35;
commitid	uzMkp8Z4FE6WB6s6;

1.35
date	2015.11.14.09.41.06;	author nicm;	state Exp;
branches;
next	1.34;
commitid	FQoND7M2BC89FZoU;

1.34
date	2015.10.16.07.43.29;	author nicm;	state Exp;
branches;
next	1.33;
commitid	xxRsoQNJjTc7en4R;

1.33
date	2015.10.07.09.52.58;	author nicm;	state Exp;
branches;
next	1.32;
commitid	x3KzadgUO3f424Tc;

1.32
date	2015.05.08.16.18.04;	author nicm;	state Exp;
branches;
next	1.31;
commitid	jGuK9ADiqvyOz7AE;

1.31
date	2015.03.31.17.45.10;	author nicm;	state Exp;
branches;
next	1.30;
commitid	2uQloBaX92ri1PyE;

1.30
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.29;
commitid	Gq8hgMoG3t1Wy1Zv;

1.29
date	2014.10.08.17.35.58;	author nicm;	state Exp;
branches;
next	1.28;
commitid	mK8z9uVwDZMfiNoM;

1.28
date	2014.06.20.10.46.59;	author nicm;	state Exp;
branches;
next	1.27;
commitid	o9XrO3iLhtTzzM1D;

1.27
date	2014.05.13.07.34.35;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2014.04.24.09.14.43;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2013.10.10.12.00.18;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.25.11.42.19;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.25.11.38.15;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.25.10.05.35;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2013.03.25.10.04.04;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.25.10.02.17;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.22.15.56.11;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.22.15.53.24;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.22.15.51.54;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.22.15.51.15;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.21.18.43.34;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.12.09.23.17.35;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.12.27.13.46.26;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.30.09.20.17;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.08.20.37.04;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.28.20.17.39;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.30.23.20.13;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.30.23.16.18;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.20.18.30.20;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.01.18.42.38;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.44
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@/* $OpenBSD: cmd-capture-pane.c,v 1.43 2017/02/16 12:18:38 nicm Exp $ */

/*
 * Copyright (c) 2009 Jonathan Alvarado <radobobo@@users.sourceforge.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Write the entire contents of a pane to a buffer or stdout.
 */

static enum cmd_retval	cmd_capture_pane_exec(struct cmd *, struct cmdq_item *);

static char	*cmd_capture_pane_append(char *, size_t *, char *, size_t);
static char	*cmd_capture_pane_pending(struct args *, struct window_pane *,
		     size_t *);
static char	*cmd_capture_pane_history(struct args *, struct cmdq_item *,
		     struct window_pane *, size_t *);

const struct cmd_entry cmd_capture_pane_entry = {
	.name = "capture-pane",
	.alias = "capturep",

	.args = { "ab:CeE:JpPqS:t:", 0, 0 },
	.usage = "[-aCeJpPq] " CMD_BUFFER_USAGE " [-E end-line] "
		 "[-S start-line]" CMD_TARGET_PANE_USAGE,

	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_capture_pane_exec
};

const struct cmd_entry cmd_clear_history_entry = {
	.name = "clear-history",
	.alias = "clearhist",

	.args = { "t:", 0, 0 },
	.usage = CMD_TARGET_PANE_USAGE,

	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_capture_pane_exec
};

static char *
cmd_capture_pane_append(char *buf, size_t *len, char *line, size_t linelen)
{
	buf = xrealloc(buf, *len + linelen + 1);
	memcpy(buf + *len, line, linelen);
	*len += linelen;
	return (buf);
}

static char *
cmd_capture_pane_pending(struct args *args, struct window_pane *wp,
    size_t *len)
{
	struct evbuffer	*pending;
	char		*buf, *line, tmp[5];
	size_t		 linelen;
	u_int		 i;

	pending = input_pending(wp);
	if (pending == NULL)
		return (xstrdup(""));

	line = EVBUFFER_DATA(pending);
	linelen = EVBUFFER_LENGTH(pending);

	buf = xstrdup("");
	if (args_has(args, 'C')) {
		for (i = 0; i < linelen; i++) {
			if (line[i] >= ' ' && line[i] != '\\') {
				tmp[0] = line[i];
				tmp[1] = '\0';
			} else
				xsnprintf(tmp, sizeof tmp, "\\%03hho", line[i]);
			buf = cmd_capture_pane_append(buf, len, tmp,
			    strlen(tmp));
		}
	} else
		buf = cmd_capture_pane_append(buf, len, line, linelen);
	return (buf);
}

static char *
cmd_capture_pane_history(struct args *args, struct cmdq_item *item,
    struct window_pane *wp, size_t *len)
{
	struct grid		*gd;
	const struct grid_line	*gl;
	struct grid_cell	*gc = NULL;
	int			 n, with_codes, escape_c0, join_lines;
	u_int			 i, sx, top, bottom, tmp;
	char			*cause, *buf, *line;
	const char		*Sflag, *Eflag;
	size_t			 linelen;

	sx = screen_size_x(&wp->base);
	if (args_has(args, 'a')) {
		gd = wp->saved_grid;
		if (gd == NULL) {
			if (!args_has(args, 'q')) {
				cmdq_error(item, "no alternate screen");
				return (NULL);
			}
			return (xstrdup(""));
		}
	} else
		gd = wp->base.grid;

	Sflag = args_get(args, 'S');
	if (Sflag != NULL && strcmp(Sflag, "-") == 0)
		top = 0;
	else {
		n = args_strtonum(args, 'S', INT_MIN, SHRT_MAX, &cause);
		if (cause != NULL) {
			top = gd->hsize;
			free(cause);
		} else if (n < 0 && (u_int) -n > gd->hsize)
			top = 0;
		else
			top = gd->hsize + n;
		if (top > gd->hsize + gd->sy - 1)
			top = gd->hsize + gd->sy - 1;
	}

	Eflag = args_get(args, 'E');
	if (Eflag != NULL && strcmp(Eflag, "-") == 0)
		bottom = gd->hsize + gd->sy - 1;
	else {
		n = args_strtonum(args, 'E', INT_MIN, SHRT_MAX, &cause);
		if (cause != NULL) {
			bottom = gd->hsize + gd->sy - 1;
			free(cause);
		} else if (n < 0 && (u_int) -n > gd->hsize)
			bottom = 0;
		else
			bottom = gd->hsize + n;
		if (bottom > gd->hsize + gd->sy - 1)
			bottom = gd->hsize + gd->sy - 1;
	}

	if (bottom < top) {
		tmp = bottom;
		bottom = top;
		top = tmp;
	}

	with_codes = args_has(args, 'e');
	escape_c0 = args_has(args, 'C');
	join_lines = args_has(args, 'J');

	buf = NULL;
	for (i = top; i <= bottom; i++) {
		line = grid_string_cells(gd, 0, i, sx, &gc, with_codes,
		    escape_c0, !join_lines);
		linelen = strlen(line);

		buf = cmd_capture_pane_append(buf, len, line, linelen);

		gl = grid_peek_line(gd, i);
		if (!join_lines || !(gl->flags & GRID_LINE_WRAPPED))
			buf[(*len)++] = '\n';

		free(line);
	}
	return (buf);
}

static enum cmd_retval
cmd_capture_pane_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c;
	struct window_pane	*wp = item->target.wp;
	char			*buf, *cause;
	const char		*bufname;
	size_t			 len;

	if (self->entry == &cmd_clear_history_entry) {
		if (wp->mode == &window_copy_mode)
			window_pane_reset_mode(wp);
		grid_clear_history(wp->base.grid);
		return (CMD_RETURN_NORMAL);
	}

	len = 0;
	if (args_has(args, 'P'))
		buf = cmd_capture_pane_pending(args, wp, &len);
	else
		buf = cmd_capture_pane_history(args, item, wp, &len);
	if (buf == NULL)
		return (CMD_RETURN_ERROR);

	if (args_has(args, 'p')) {
		c = item->client;
		if (c == NULL ||
		    (c->session != NULL && !(c->flags & CLIENT_CONTROL))) {
			cmdq_error(item, "can't write to stdout");
			free(buf);
			return (CMD_RETURN_ERROR);
		}
		evbuffer_add(c->stdout_data, buf, len);
		free(buf);
		if (args_has(args, 'P') && len > 0)
		    evbuffer_add(c->stdout_data, "\n", 1);
		server_client_push_stdout(c);
	} else {
		bufname = NULL;
		if (args_has(args, 'b'))
			bufname = args_get(args, 'b');

		if (paste_set(buf, len, bufname, &cause) != 0) {
			cmdq_error(item, "%s", cause);
			free(cause);
			free(buf);
			return (CMD_RETURN_ERROR);
		}
	}

	return (CMD_RETURN_NORMAL);
}
@


1.43
log
@Merge clear-history into capture-pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.42 2017/01/02 22:42:19 nicm Exp $ */
d46 1
a46 1
	.tflag = CMD_PANE,
d59 1
a59 1
	.tflag = CMD_PANE,
d196 1
a196 1
	struct window_pane	*wp = item->state.tflag.wp;
@


1.42
log
@Escape backspace for capture-pane -P, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.41 2016/10/16 19:04:05 nicm Exp $ */
d52 13
a106 1

d200 7
@


1.41
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.40 2016/10/14 22:14:22 nicm Exp $ */
d80 1
a80 1
			if (line[i] >= ' ') {
@


1.40
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.39 2016/10/10 21:51:39 nicm Exp $ */
d30 1
a30 1
static enum cmd_retval	 cmd_capture_pane_exec(struct cmd *, struct cmd_q *);
d32 5
a36 6
static char		*cmd_capture_pane_append(char *, size_t *, char *,
			     size_t);
static char		*cmd_capture_pane_pending(struct args *,
			     struct window_pane *, size_t *);
static char		*cmd_capture_pane_history(struct args *, struct cmd_q *,
			     struct window_pane *, size_t *);
d94 2
a95 1
cmd_capture_pane_history(struct args *args, struct cmd_q *cmdq,
d112 1
a112 1
				cmdq_error(cmdq, "no alternate screen");
d180 1
a180 1
cmd_capture_pane_exec(struct cmd *self, struct cmd_q *cmdq)
d184 1
a184 1
	struct window_pane	*wp = cmdq->state.tflag.wp;
d193 1
a193 1
		buf = cmd_capture_pane_history(args, cmdq, wp, &len);
d198 1
a198 1
		c = cmdq->client;
d201 1
a201 1
			cmdq_error(cmdq, "can't write to stdout");
d216 1
a216 1
			cmdq_error(cmdq, "%s", cause);
@


1.39
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.38 2015/12/14 00:31:54 nicm Exp $ */
d49 1
a49 1
	.flags = 0,
@


1.38
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.37 2015/12/13 21:53:57 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_capture_pane_exec(struct cmd *, struct cmd_q *);
d32 6
a37 5
char		*cmd_capture_pane_append(char *, size_t *, char *, size_t);
char		*cmd_capture_pane_pending(struct args *, struct window_pane *,
		     size_t *);
char		*cmd_capture_pane_history(struct args *, struct cmd_q *,
		     struct window_pane *, size_t *);
d53 1
a53 1
char *
d62 1
a62 1
char *
d94 1
a94 1
char *
d179 1
a179 1
enum cmd_retval
@


1.37
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.36 2015/12/13 14:32:38 nicm Exp $ */
d46 3
a48 1
	.flags = CMD_PANE_T,
@


1.36
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.35 2015/11/14 09:41:06 nicm Exp $ */
d39 9
a47 6
	"capture-pane", "capturep",
	"ab:CeE:JpPqS:t:", 0, 0,
	"[-aCeJpPq] " CMD_BUFFER_USAGE " [-E end-line] [-S start-line]"
	CMD_TARGET_PANE_USAGE,
	CMD_PANE_T,
	cmd_capture_pane_exec
@


1.35
log
@Push stdout and stderr to clients more aggressively, and add an event to
continue if the send fails.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.34 2015/10/16 07:43:29 nicm Exp $ */
d43 1
a43 1
	0,
d178 1
a178 1
	struct window_pane	*wp;
a181 3

	if (cmd_find_pane(cmdq, args_get(args, 't'), NULL, &wp) == NULL)
		return (CMD_RETURN_ERROR);
@


1.34
log
@Don't free after calling paste_set but do after evbuffer_add, from Theo
Buehler.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.33 2015/10/07 09:52:58 nicm Exp $ */
d206 1
a206 1
		server_push_stdout(c);
@


1.33
log
@Couple of memory leaks in error paths, from Frederik Vanderstraeten.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.32 2015/05/08 16:18:04 nicm Exp $ */
d203 1
a207 1

a219 1
	free(buf);
@


1.32
log
@Move input parser structs into input.c (removing fairly useless
saved_cursor_[xy] formats as a side-effect).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.31 2015/03/31 17:45:10 nicm Exp $ */
d199 1
d214 1
a215 1
			free(cause);
d220 1
@


1.31
log
@Fix some format specifier nits, from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.30 2014/10/20 22:29:25 nicm Exp $ */
d60 4
a63 3
	char	*buf, *line, tmp[5];
	size_t	 linelen;
	u_int	 i;
d65 2
a66 1
	if (wp->ictx.since_ground == NULL)
d69 2
a70 2
	line = EVBUFFER_DATA(wp->ictx.since_ground);
	linelen = EVBUFFER_LENGTH(wp->ictx.since_ground);
@


1.30
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.29 2014/10/08 17:35:58 nicm Exp $ */
d77 1
a77 1
				xsnprintf(tmp, sizeof tmp, "\\%03o", line[i]);
@


1.29
log
@Add xreallocarray and remove nmemb argument from xrealloc.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.28 2014/06/20 10:46:59 nicm Exp $ */
a43 1
	NULL,
@


1.28
log
@Make -S- and -E- mean the start and end to capture-pane to avoid having
to faff around with huge numbers to get everything.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.27 2014/05/13 07:34:35 nicm Exp $ */
d51 1
a51 1
	buf = xrealloc(buf, 1, *len + linelen + 1);
@


1.27
log
@Add support for named buffers. If you don't name a buffer, things work
much as before - buffers are automatically named "buffer0000",
"buffer0001" and so on and ordered as a stack. Buffers can be named
explicitly when creating ("loadb -b foo" etc) or renamed ("setb -b
buffer0000 -n foo"). If buffers are named explicitly, they are not
deleted when buffer-limit is reached. Diff from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.26 2014/04/24 09:14:43 nicm Exp $ */
d97 1
d113 2
a114 5
	n = args_strtonum(args, 'S', INT_MIN, SHRT_MAX, &cause);
	if (cause != NULL) {
		top = gd->hsize;
		free(cause);
	} else if (n < 0 && (u_int) -n > gd->hsize)
d116 12
a127 4
	else
		top = gd->hsize + n;
	if (top > gd->hsize + gd->sy - 1)
		top = gd->hsize + gd->sy - 1;
d129 2
a130 9
	n = args_strtonum(args, 'E', INT_MIN, SHRT_MAX, &cause);
	if (cause != NULL) {
		bottom = gd->hsize + gd->sy - 1;
		free(cause);
	} else if (n < 0 && (u_int) -n > gd->hsize)
		bottom = 0;
	else
		bottom = gd->hsize + n;
	if (bottom > gd->hsize + gd->sy - 1)
d132 12
@


1.26
log
@There is no longer a need for a paste_stack struct or for global_buffers
to be global. Move to paste.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.25 2013/10/10 12:00:18 nicm Exp $ */
d41 1
a41 1
	"[-aCeJpPq] [-b buffer-index] [-E end-line] [-S start-line]"
d168 1
a168 2
	int			 buffer;
	u_int			 limit;
a193 5
		limit = options_get_number(&global_options, "buffer-limit");
		if (!args_has(args, 'b')) {
			paste_add(buf, len, limit);
			return (CMD_RETURN_NORMAL);
		}
d195 6
a200 3
		buffer = args_strtonum(args, 'b', 0, INT_MAX, &cause);
		if (cause != NULL) {
			cmdq_error(cmdq, "buffer %s", cause);
a202 6
			return (CMD_RETURN_ERROR);
		}

		if (paste_replace(buffer, buf, len) != 0) {
			cmdq_error(cmdq, "no buffer %d", buffer);
			free(buf);
@


1.25
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.24 2013/03/25 11:42:19 nicm Exp $ */
d197 1
a197 1
			paste_add(&global_buffers, buf, len, limit);
d209 1
a209 1
		if (paste_replace(&global_buffers, buffer, buf, len) != 0) {
@


1.24
log
@Handle empty pending output (not a failure) and add \n. From George
Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.23 2013/03/25 11:38:15 nicm Exp $ */
a43 1
	NULL,
@


1.23
log
@Clean up capture-pane and add -P option to dump pending output, based on
code from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.22 2013/03/25 10:05:35 nicm Exp $ */
d72 1
a72 1
	buf = NULL;
d192 2
@


1.22
log
@Preserve trailing spaces with capture-pane -J, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.21 2013/03/25 10:04:04 nicm Exp $ */
d32 6
d40 2
a41 2
	"ab:CeE:JpqS:t:", 0, 0,
	"[-aCeJpq] [-b buffer-index] [-E end-line] [-S start-line]"
d49 42
a90 2
enum cmd_retval
cmd_capture_pane_exec(struct cmd *self, struct cmd_q *cmdq)
a91 5
	struct args		*args = self->args;
	struct client		*c;
	struct window_pane	*wp;
	char			*buf, *line, *cause;
	struct screen		*s;
a92 4
	int			 buffer, n, with_codes, escape_c0, join_lines;
	u_int			 i, limit, top, bottom, tmp, sx;
	size_t			 len, linelen;
	struct grid_cell	*gc;
d94 5
d100 1
a100 3
	if (cmd_find_pane(cmdq, args_get(args, 't'), NULL, &wp) == NULL)
		return (CMD_RETURN_ERROR);

a101 1
		s = NULL;
d103 6
a108 4
		sx = screen_size_x(&wp->base);
		if (gd == NULL && !args_has(args, 'q')) {
			cmdq_error(cmdq, "no alternate screen");
			return (CMD_RETURN_ERROR);
d110 29
a138 4
	} else {
		s = &wp->base;
		sx = screen_size_x(s);
		gd = s->grid;
d141 4
d146 15
a160 1
	len = 0;
d162 10
a171 28
	if (gd != NULL) {
		n = args_strtonum(args, 'S', INT_MIN, SHRT_MAX, &cause);
		if (cause != NULL) {
			top = gd->hsize;
			free(cause);
		} else if (n < 0 && (u_int) -n > gd->hsize)
			top = 0;
		else
			top = gd->hsize + n;
		if (top > gd->hsize + gd->sy - 1)
			top = gd->hsize + gd->sy - 1;

		n = args_strtonum(args, 'E', INT_MIN, SHRT_MAX, &cause);
		if (cause != NULL) {
			bottom = gd->hsize + gd->sy - 1;
			free(cause);
		} else if (n < 0 && (u_int) -n > gd->hsize)
			bottom = 0;
		else
			bottom = gd->hsize + n;
		if (bottom > gd->hsize + gd->sy - 1)
			bottom = gd->hsize + gd->sy - 1;

		if (bottom < top) {
			tmp = bottom;
			bottom = top;
			top = tmp;
		}
d173 2
a174 17
		with_codes = args_has(args, 'e');
		escape_c0 = args_has(args, 'C');
		join_lines = args_has(args, 'J');

		gc = NULL;
		for (i = top; i <= bottom; i++) {
			line = grid_string_cells(gd, 0, i, sx, &gc, with_codes,
			    escape_c0, !join_lines);
			linelen = strlen(line);

			buf = xrealloc(buf, 1, len + linelen + 1);
			memcpy(buf + len, line, linelen);
			len += linelen;

			gl = grid_peek_line(gd, i);
			if (!join_lines || !(gl->flags & GRID_LINE_WRAPPED))
				buf[len++] = '\n';
d176 7
a182 4
			free(line);
		}
	} else
		buf = xstrdup("");
@


1.21
log
@Add -q flags to shut up errors to capture-pane and show-options, from
George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.20 2013/03/25 10:02:17 nicm Exp $ */
d114 1
a114 1
			    escape_c0);
@


1.20
log
@Add -a to capture-pane to capture alternate screen, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.19 2013/03/24 09:54:10 nicm Exp $ */
d34 2
a35 2
	"ab:CeE:JpS:t:", 0, 0,
	"[-aCeJp] [-b buffer-index] [-E end-line] [-S start-line]"
d65 1
a65 1
		if (gd == NULL) {
d78 28
a105 27
	n = args_strtonum(args, 'S', INT_MIN, SHRT_MAX, &cause);
	if (cause != NULL) {
		top = gd->hsize;
		free(cause);
	} else if (n < 0 && (u_int) -n > gd->hsize)
		top = 0;
	else
		top = gd->hsize + n;
	if (top > gd->hsize + gd->sy - 1)
		top = gd->hsize + gd->sy - 1;

	n = args_strtonum(args, 'E', INT_MIN, SHRT_MAX, &cause);
	if (cause != NULL) {
		bottom = gd->hsize + gd->sy - 1;
		free(cause);
	} else if (n < 0 && (u_int) -n > gd->hsize)
		bottom = 0;
	else
		bottom = gd->hsize + n;
	if (bottom > gd->hsize + gd->sy - 1)
		bottom = gd->hsize + gd->sy - 1;

	if (bottom < top) {
		tmp = bottom;
		bottom = top;
		top = tmp;
	}
d107 17
a123 17
	with_codes = args_has(args, 'e');
	escape_c0 = args_has(args, 'C');
	join_lines = args_has(args, 'J');

	gc = NULL;
	for (i = top; i <= bottom; i++) {
		line = grid_string_cells(gd, 0, i, sx, &gc, with_codes,
		    escape_c0);
		linelen = strlen(line);

		buf = xrealloc(buf, 1, len + linelen + 1);
		memcpy(buf + len, line, linelen);
		len += linelen;

		gl = grid_peek_line(gd, i);
		if (!join_lines || !(gl->flags & GRID_LINE_WRAPPED))
			buf[len++] = '\n';
d125 4
a128 2
		free(line);
	}
@


1.19
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.18 2013/03/22 15:56:11 nicm Exp $ */
d34 2
a35 2
	"b:CeE:JpS:t:", 0, 0,
	"[-CeJp] [-b buffer-index] [-E end-line] [-S start-line]"
d53 1
a53 1
	u_int			 i, limit, top, bottom, tmp;
d60 14
a73 2
	s = &wp->base;
	gd = s->grid;
d112 2
a113 2
		line = grid_string_cells(s->grid, 0, i, screen_size_x(s),
		    &gc, with_codes, escape_c0);
d120 1
a120 1
		gl = grid_peek_line(s->grid, i);
@


1.18
log
@Add -C and -J to capture pane to escape control sequences and to join
wrapped line, based on a diff from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.17 2013/03/22 15:53:24 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_capture_pane_exec(struct cmd *, struct cmd_ctx *);
d44 1
a44 1
cmd_capture_pane_exec(struct cmd *self, struct cmd_ctx *ctx)
d58 1
a58 1
	if (cmd_find_pane(ctx, args_get(args, 't'), NULL, &wp) == NULL)
d116 4
a119 5
		c = ctx->curclient;
		if (c == NULL || !(c->flags & CLIENT_CONTROL))
			c = ctx->cmdclient;
		if (c == NULL) {
			ctx->error(ctx, "can't write to stdout");
d133 1
a133 1
			ctx->error(ctx, "buffer %s", cause);
d140 1
a140 1
			ctx->error(ctx, "no buffer %d", buffer);
@


1.17
log
@Fix so capture-pane/save-buffer can work in control clients, from George
Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.16 2013/03/22 15:51:54 nicm Exp $ */
d34 2
a35 2
	"eb:E:pS:t:", 0, 0,
	"[-ep] [-b buffer-index] [-E end-line] [-S start-line]"
d52 1
a52 1
	int			 buffer, n, with_codes;
d56 1
d94 4
a98 1
	with_codes = args_has(args, 'e');
d101 1
a101 1
		    &gc, with_codes);
d107 4
a110 1
		buf[len++] = '\n';
@


1.16
log
@Add -e flag to capture-pane to include embedded ANSI SGR escape
sequences, from George Nachman.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.15 2013/03/22 15:51:15 nicm Exp $ */
d47 1
a47 1
	struct client		*c = ctx->cmdclient;
d109 3
@


1.15
log
@Don't use a target-client for stdout, just always cmdclient.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.14 2013/03/21 18:43:34 nicm Exp $ */
d34 2
a35 2
	"b:E:pS:t:", 0, 0,
	"[-p] [-b buffer-index] [-E end-line] [-S start-line]"
d49 1
a49 1
	char 			*buf, *line, *cause;
d52 1
a52 1
	int			 buffer, n;
d54 2
a55 1
	size_t         		 len, linelen;
d93 2
d96 8
a103 2
	       line = grid_string_cells(s->grid, 0, i, screen_size_x(s));
	       linelen = strlen(line);
d105 1
a105 6
	       buf = xrealloc(buf, 1, len + linelen + 1);
	       memcpy(buf + len, line, linelen);
	       len += linelen;
	       buf[len++] = '\n';

	       free(line);
@


1.14
log
@Support capture-pane -p to send to stdout.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.13 2012/12/09 23:17:35 nicm Exp $ */
d34 2
a35 3
	"b:c:E:pS:t:", 0, 0,
	"[-p] [-c target-client] [-b buffer-index] [-E end-line] "
	"[-S start-line] "
d47 1
a47 1
	struct client		*c;
a54 3

	if ((c = cmd_find_client(ctx, args_get(args, 'c'))) == NULL)
		return (CMD_RETURN_ERROR);
@


1.13
log
@Use the CMD_*_USAGE defines consistently, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.12 2012/07/11 07:10:15 nicm Exp $ */
d27 1
a27 1
 * Write the entire contents of a pane to a buffer.
d34 3
a36 2
	"b:E:S:t:", 0, 0,
	"[-b buffer-index] [-E end-line] [-S start-line] "
d48 1
d57 3
d108 27
a134 19
	limit = options_get_number(&global_options, "buffer-limit");

	if (!args_has(args, 'b')) {
		paste_add(&global_buffers, buf, len, limit);
		return (CMD_RETURN_NORMAL);
	}

	buffer = args_strtonum(args, 'b', 0, INT_MAX, &cause);
	if (cause != NULL) {
		ctx->error(ctx, "buffer %s", cause);
		free(buf);
		free(cause);
		return (CMD_RETURN_ERROR);
	}

	if (paste_replace(&global_buffers, buffer, buf, len) != 0) {
		ctx->error(ctx, "no buffer %d", buffer);
		free(buf);
		return (CMD_RETURN_ERROR);
@


1.12
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.11 2012/07/10 11:53:01 nicm Exp $ */
d35 2
a36 1
	"[-b buffer-index] [-E end-line] [-S start-line] [-t target-pane]",
@


1.11
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.10 2011/12/27 13:46:26 nicm Exp $ */
d30 1
a30 1
int	cmd_capture_pane_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
int
d55 1
a55 1
		return (-1);
d106 1
a106 1
		return (0);
d114 1
a114 1
		return (-1);
d120 1
a120 1
		return (-1);
d123 1
a123 1
	return (0);
@


1.10
log
@Extend history that can be captured to INT_MIN rather than
SHRT_MIN. From Chris Johnsen.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.9 2011/08/30 09:20:17 nicm Exp $ */
d65 1
a65 1
		xfree(cause);
d76 1
a76 1
		xfree(cause);
d99 1
a99 1
	       xfree(line);
d112 2
a113 2
		xfree(buf);
		xfree(cause);
d119 1
a119 1
		xfree(buf);
@


1.9
log
@Another memory leak from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.8 2011/05/08 20:37:04 nicm Exp $ */
d62 1
a62 1
	n = args_strtonum(args, 'S', SHRT_MIN, SHRT_MAX, &cause);
d73 1
a73 1
	n = args_strtonum(args, 'E', SHRT_MIN, SHRT_MAX, &cause);
@


1.8
log
@Fix a couple of memory leaks, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.7 2011/03/28 20:17:39 nicm Exp $ */
d112 1
@


1.7
log
@Allow a start and end line to be specified for capture-pane which may be
negative to capture part of the history. Prompted by request from Victor
J Orlikowski.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.6 2011/01/04 00:42:46 nicm Exp $ */
d63 1
a63 1
	if (cause != NULL)
d65 2
a66 1
	else if (n < 0 && (u_int) -n > gd->hsize)
d74 1
a74 1
	if (cause != NULL)
d76 2
a77 1
	else if (n < 0 && (u_int) -n > gd->hsize)
@


1.6
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.5 2010/12/30 23:20:13 nicm Exp $ */
d34 2
a35 2
	"b:t:", 0, 0,
	"[-b buffer-index] [-t target-pane]",
d49 3
a51 2
	int			 buffer;
	u_int			 i, limit;
d57 1
d62 28
a89 2
	for (i = 0; i < screen_size_y(s); i++) {
	       line = grid_view_string_cells(s->grid, 0, i, screen_size_x(s));
@


1.5
log
@Remove some unused defines.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.4 2010/12/30 23:16:18 nicm Exp $ */
a29 1
int	cmd_capture_pane_parse(struct cmd *, int, char **, char **);
a30 8
void	cmd_capture_pane_free(struct cmd *);
void	cmd_capture_pane_init(struct cmd *, int);
size_t	cmd_capture_pane_print(struct cmd *, char *, size_t);

struct cmd_capture_pane_data {
	char	*target;
	int	 buffer;
};
d34 1
d36 4
a39 6
	0, "",
	cmd_capture_pane_init,
	cmd_capture_pane_parse,
	cmd_capture_pane_exec,
	cmd_capture_pane_free,
	cmd_capture_pane_print
a41 54
/* ARGSUSED */
void
cmd_capture_pane_init(struct cmd *self, unused int arg)
{
	struct cmd_capture_pane_data	*data;

	self->data = data = xmalloc(sizeof *data);
	data->buffer = -1;
	data->target = NULL;
}

int
cmd_capture_pane_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_capture_pane_data	*data;
	const char			*errstr;
	int				 n, opt;

	self->entry->init(self, KEYC_NONE);
	data = self->data;

	while ((opt = getopt(argc, argv, "b:t:")) != -1) {
		switch (opt) {
		case 'b':
			if (data->buffer == -1) {
				n = strtonum(optarg, 0, INT_MAX, &errstr);
				if (errstr != NULL) {
					xasprintf(cause, "buffer %s", errstr);
					goto error;
				}
				data->buffer = n;
			}
			break;
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

error:
	self->entry->free(self);
	return (-1);
}

d45 7
a51 6
	struct cmd_capture_pane_data	*data = self->data;
	struct window_pane		*wp;
	char 				*buf, *line;
	struct screen			*s;
	u_int			 	 i, limit;
	size_t         		 	 len, linelen;
d53 1
a53 1
	if (cmd_find_pane(ctx, data->target, NULL, &wp) == NULL)
d73 2
a74 1
	if (data->buffer == -1) {
d78 10
a87 2
	if (paste_replace(&global_buffers, data->buffer, buf, len) != 0) {
		ctx->error(ctx, "no buffer %d", data->buffer);
d91 1
a92 26
}

void
cmd_capture_pane_free(struct cmd *self)
{
	struct cmd_capture_pane_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	xfree(data);
}

size_t
cmd_capture_pane_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_capture_pane_data	*data = self->data;
	size_t				 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->buffer != -1)
		off += xsnprintf(buf + off, len - off, " -b %d", data->buffer);
	if (off < len && data->target != NULL)
		off += xsnprintf(buf + off, len - off, " -t %s", data->target);
	return (off);
@


1.4
log
@Change from a per-session stack of buffers to one global stack which is
much more convenient and also simplifies lot of code. This renders
copy-buffer useless and makes buffer-limit now a server option.

By Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.3 2010/01/20 18:30:20 nicm Exp $ */
d43 1
a43 1
	CMD_BUFFER_PANE_USAGE,
@


1.3
log
@Don't leak line, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.2 2009/12/03 22:50:10 nicm Exp $ */
d21 1
d30 1
d32 8
d45 2
a46 2
	cmd_buffer_init,
	cmd_buffer_parse,
d48 2
a49 2
	cmd_buffer_free,
	cmd_buffer_print
d52 54
d109 6
a114 7
	struct cmd_buffer_data	*data = self->data;
	struct window_pane	*wp;
	char 			*buf, *line;
	struct screen		*s;
	struct session		*sess;
	u_int			 i, limit;
	size_t         		 len, linelen;
d116 1
a116 1
	if (cmd_find_pane(ctx, data->target, &sess, &wp) == NULL)
d135 1
a135 1
	limit = options_get_number(&sess->options, "buffer-limit");
d137 1
a137 1
		paste_add(&sess->buffers, buf, len, limit);
d140 1
a140 1
	if (paste_replace(&sess->buffers, data->buffer, buf, len) != 0) {
d146 26
@


1.2
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-capture-pane.c,v 1.1 2009/12/01 18:42:38 nicm Exp $ */
d68 2
@


1.1
log
@New command, capture-pane, which copies the entire pane contents to a paste
buffer. From Jonathan Alvarado.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d51 1
a51 1
	size_t         		 len, linelen; 
@

