head	1.41;
access;
symbols
	OPENBSD_6_1:1.37.0.4
	OPENBSD_6_1_BASE:1.37
	OPENBSD_6_0:1.28.0.4
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.41
date	2017.05.10.10.46.59;	author nicm;	state Exp;
branches;
next	1.40;
commitid	NAEK4xQ7PNpMtLhn;

1.40
date	2017.05.09.17.56.55;	author nicm;	state Exp;
branches;
next	1.39;
commitid	wVRjWjNMDlUWJTZ4;

1.39
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.38;
commitid	RXMp6wwG5a5Y82bo;

1.38
date	2017.04.21.14.01.19;	author nicm;	state Exp;
branches;
next	1.37;
commitid	6dh4rgGOD5wckeD9;

1.37
date	2017.01.07.15.28.13;	author nicm;	state Exp;
branches;
next	1.36;
commitid	llgkTzvAhxXuSWDB;

1.36
date	2016.12.11.22.55.25;	author nicm;	state Exp;
branches;
next	1.35;
commitid	TMkDquQ6EiHgoK2M;

1.35
date	2016.12.08.22.15.37;	author nicm;	state Exp;
branches;
next	1.34;
commitid	C8OTvnK57QKFaKGH;

1.34
date	2016.11.29.12.54.46;	author nicm;	state Exp;
branches;
next	1.33;
commitid	GLcwaWp6bmgXUN5A;

1.33
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.32;
commitid	pxm6osuE99zELpkU;

1.32
date	2016.10.16.17.55.14;	author nicm;	state Exp;
branches;
next	1.31;
commitid	1xIYFpLYkPIXNEvU;

1.31
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.30;
commitid	S3IpyYTkmviA6lfM;

1.30
date	2016.10.11.07.23.34;	author nicm;	state Exp;
branches;
next	1.29;
commitid	leUN1UeapgUoieJj;

1.29
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.28;
commitid	TaZ3kOtGiWwKofka;

1.28
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.27;
commitid	P3qmSOx6KrDBsb0c;

1.27
date	2015.12.16.22.05.35;	author nicm;	state Exp;
branches;
next	1.26;
commitid	6LxvgMFtrwxMsdPn;

1.26
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.25;
commitid	rE682EC14v4gpeFy;

1.25
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.24;
commitid	gsQkQsSyBCSmU9ax;

1.24
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.23;
commitid	uzMkp8Z4FE6WB6s6;

1.23
date	2015.12.12.18.19.00;	author nicm;	state Exp;
branches;
next	1.22;
commitid	WD2k8ZkBSmp0TV5S;

1.22
date	2015.11.12.11.05.34;	author nicm;	state Exp;
branches;
next	1.21;
commitid	Ih1tdqtjpnEyfE8x;

1.21
date	2015.10.27.15.58.42;	author nicm;	state Exp;
branches;
next	1.20;
commitid	89xhQafU35Q5MQVC;

1.20
date	2015.05.08.16.18.04;	author nicm;	state Exp;
branches;
next	1.19;
commitid	jGuK9ADiqvyOz7AE;

1.19
date	2015.04.19.21.34.21;	author nicm;	state Exp;
branches;
next	1.18;
commitid	wug6ctIOfhVMeWQp;

1.18
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.17;
commitid	Gq8hgMoG3t1Wy1Zv;

1.17
date	2013.10.10.12.00.23;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.05.31.12.50.05;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.24.09.31.38;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.12.09.23.17.35;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.02.02.00.15.28;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2012.01.21.08.10.21;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.23.19.42.19;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.21.15.25.36;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.18.16.21.04;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Insert copy mode bindings at the right place in the command queue.
@
text
@/* $OpenBSD: cmd-send-keys.c,v 1.40 2017/05/09 17:56:55 nicm Exp $ */

/*
 * Copyright (c) 2008 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>

#include "tmux.h"

/*
 * Send keys to client.
 */

static enum cmd_retval	cmd_send_keys_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_send_keys_entry = {
	.name = "send-keys",
	.alias = "send",

	.args = { "lXRMN:t:", 0, -1 },
	.usage = "[-lXRM] [-N repeat-count] " CMD_TARGET_PANE_USAGE " key ...",

	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_send_keys_exec
};

const struct cmd_entry cmd_send_prefix_entry = {
	.name = "send-prefix",
	.alias = NULL,

	.args = { "2t:", 0, 0 },
	.usage = "[-2] " CMD_TARGET_PANE_USAGE,

	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = CMD_AFTERHOOK,
	.exec = cmd_send_keys_exec
};

static void
cmd_send_keys_inject(struct client *c, struct cmdq_item *item, key_code key)
{
	struct window_pane	*wp = item->target.wp;
	struct session		*s = item->target.s;
	struct key_table	*table;
	struct key_binding	*bd, bd_find;

	if (wp->mode == NULL || wp->mode->key_table == NULL) {
		window_pane_key(wp, NULL, s, key, NULL);
		return;
	}
	table = key_bindings_get_table(wp->mode->key_table(wp), 1);

	bd_find.key = (key & ~KEYC_XTERM);
	bd = RB_FIND(key_bindings, &table->key_bindings, &bd_find);
	if (bd != NULL) {
		table->references++;
		key_bindings_dispatch(bd, item, c, NULL, &item->target);
		key_bindings_unref_table(table);
	}
}

static enum cmd_retval
cmd_send_keys_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c = cmd_find_client(item, NULL, 1);
	struct window_pane	*wp = item->target.wp;
	struct session		*s = item->target.s;
	struct mouse_event	*m = &item->shared->mouse;
	struct utf8_data	*ud, *uc;
	wchar_t			 wc;
	int			 i, literal;
	key_code		 key;
	u_int			 np = 1;
	char			*cause = NULL;

	if (args_has(args, 'N')) {
		np = args_strtonum(args, 'N', 1, UINT_MAX, &cause);
		if (cause != NULL) {
			cmdq_error(item, "repeat count %s", cause);
			free(cause);
			return (CMD_RETURN_ERROR);
		}
		if (args_has(args, 'X') || args->argc == 0)
			wp->modeprefix = np;
	}

	if (args_has(args, 'X')) {
		if (wp->mode == NULL || wp->mode->command == NULL) {
			cmdq_error(item, "not in a mode");
			return (CMD_RETURN_ERROR);
		}
		if (!m->valid)
			wp->mode->command(wp, c, s, args, NULL);
		else
			wp->mode->command(wp, c, s, args, m);
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(args, 'M')) {
		wp = cmd_mouse_pane(m, &s, NULL);
		if (wp == NULL) {
			cmdq_error(item, "no mouse target");
			return (CMD_RETURN_ERROR);
		}
		window_pane_key(wp, NULL, s, m->key, m);
		return (CMD_RETURN_NORMAL);
	}

	if (self->entry == &cmd_send_prefix_entry) {
		if (args_has(args, '2'))
			key = options_get_number(s->options, "prefix2");
		else
			key = options_get_number(s->options, "prefix");
		cmd_send_keys_inject(c, item, key);
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(args, 'R')) {
		window_pane_reset_palette(wp);
		input_reset(wp, 1);
	}

	for (; np != 0; np--) {
		for (i = 0; i < args->argc; i++) {
			literal = args_has(args, 'l');
			if (!literal) {
				key = key_string_lookup_string(args->argv[i]);
				if (key != KEYC_NONE && key != KEYC_UNKNOWN)
					cmd_send_keys_inject(c, item, key);
				else
					literal = 1;
			}
			if (literal) {
				ud = utf8_fromcstr(args->argv[i]);
				for (uc = ud; uc->size != 0; uc++) {
					if (utf8_combine(uc, &wc) != UTF8_DONE)
						continue;
					cmd_send_keys_inject(c, item, wc);
				}
				free(ud);
			}
		}

	}

	return (CMD_RETURN_NORMAL);
}
@


1.40
log
@If the target pane for send-keys in in a mode with a key table (that is,
copy mode), then look the key up in the table and fire any command
instead of delivering the key to the pane directly where it will be
ignored. This makes C-b C-b (send-prefix) work in copy mode again.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.39 2017/04/22 10:22:39 nicm Exp $ */
d76 1
a76 1
		key_bindings_dispatch(bd, c, NULL, &item->target);
@


1.39
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.38 2017/04/21 14:01:19 nicm Exp $ */
d58 23
d134 1
a134 1
		window_pane_key(wp, NULL, s, key, NULL);
d149 1
a149 1
					window_pane_key(wp, NULL, s, key, NULL);
d158 1
a158 1
					window_pane_key(wp, NULL, s, wc, NULL);
@


1.38
log
@Store state shared between multiple commands in the queue in a shared
structure.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.37 2017/01/07 15:28:13 nicm Exp $ */
d39 1
a39 1
	.tflag = CMD_PANE,
d52 1
a52 1
	.tflag = CMD_PANE,
d62 3
a64 3
	struct client		*c = item->state.c;
	struct window_pane	*wp = item->state.tflag.wp;
	struct session		*s = item->state.tflag.s;
@


1.37
log
@Add support for the OSC 4 and OSC 104 palette setting escape sequences,
from S Gilles.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.36 2016/12/11 22:55:25 nicm Exp $ */
d65 1
a65 1
	struct mouse_event	*m = &item->mouse;
@


1.36
log
@-N without arguments needs to set prefix count for the mode command, so
 that M-1 etc work. Reported by Theo Buehler.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.35 2016/12/08 22:15:37 nicm Exp $ */
d115 2
a116 1
	if (args_has(args, 'R'))
d118 1
d133 3
a135 2
					if (utf8_combine(uc, &wc) == UTF8_DONE)
						window_pane_key(wp, NULL, s, wc, NULL);
@


1.35
log
@Fix send-keys with UTF-8.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.34 2016/11/29 12:54:46 nicm Exp $ */
d80 2
a88 1
		wp->modeprefix = np;
@


1.34
log
@Make send -N work for all keys, not just in copy mode. From Artem Fokin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.33 2016/10/16 19:04:05 nicm Exp $ */
d66 2
a67 1
	const u_char		*keystr;
d128 6
a133 2
				for (keystr = args->argv[i]; *keystr != '\0'; keystr++)
					window_pane_key(wp, NULL, s, *keystr, NULL);
@


1.33
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.32 2016/10/16 17:55:14 nicm Exp $ */
d69 1
a69 1
	u_int			 np;
a72 4
		if (wp->mode == NULL || wp->mode->command == NULL) {
			cmdq_error(item, "not in a mode");
			return (CMD_RETURN_ERROR);
		}
d75 1
a75 1
			cmdq_error(item, "prefix %s", cause);
a78 1
		wp->modeprefix = np;
d86 1
a93 3
	if (args_has(args, 'N')) /* only with -X */
		return (CMD_RETURN_NORMAL);

d116 14
a129 12
	for (i = 0; i < args->argc; i++) {
		literal = args_has(args, 'l');
		if (!literal) {
			key = key_string_lookup_string(args->argv[i]);
			if (key != KEYC_NONE && key != KEYC_UNKNOWN)
				window_pane_key(wp, NULL, s, key, NULL);
			else
				literal = 1;
		}
		if (literal) {
			for (keystr = args->argv[i]; *keystr != '\0'; keystr++)
				window_pane_key(wp, NULL, s, *keystr, NULL);
d131 1
@


1.32
log
@Rewrite command queue handling. Each client still has a command queue,
but there is also now a global command queue. Instead of command queues
being dispatched on demand from wherever the command happens to be
added, they are now all dispatched from the top level server
loop. Command queues may now also include callbacks as well as commands,
and items may be inserted after the current command as well as at the end.

This all makes command queues significantly more predictable and easier
to use, and avoids the complex multiple nested command queues used by
source-file, if-shell and friends.

A mass rename of struct cmdq to a better name (cmdq_item probably) is
coming.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.31 2016/10/14 22:14:22 nicm Exp $ */
d30 1
a30 1
static enum cmd_retval	 cmd_send_keys_exec(struct cmd *, struct cmd_q *);
d59 1
a59 1
cmd_send_keys_exec(struct cmd *self, struct cmd_q *cmdq)
d62 4
a65 4
	struct client		*c = cmdq->state.c;
	struct window_pane	*wp = cmdq->state.tflag.wp;
	struct session		*s = cmdq->state.tflag.s;
	struct mouse_event	*m = &cmdq->mouse;
d74 1
a74 1
			cmdq_error(cmdq, "not in a mode");
d79 1
a79 1
			cmdq_error(cmdq, "prefix %s", cause);
d88 1
a88 1
			cmdq_error(cmdq, "not in a mode");
d104 1
a104 1
			cmdq_error(cmdq, "no mouse target");
@


1.31
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.30 2016/10/11 07:23:34 nicm Exp $ */
d65 1
a65 1
	struct mouse_event	*m = &cmdq->item->mouse;
@


1.30
log
@Fundamental change to how copy mode key bindings work:

The vi-copy and emacs-copy mode key tables are gone, and instead copy
mode commands are bound in one of two normal key tables ("copy-mode" or
"copy-mode-vi"). Keys are bound to "send-keys -X copy-mode-command". So:

    bind -temacs-copy C-Up scroll-up
    bind -temacs-copy -R5 WheelUpPane scroll-up

Becomes:

    bind -Tcopy-mode C-Up send -X scroll-up
    bind -Tcopy-mode WheelUpPane send -N5 -X scroll-up

This allows the full command parser and command set to be used - for
example, we can use the normal command prompt for searching, jumping,
and so on instead of a custom one:

    bind -Tcopy-mode C-r command-prompt -p'search up' "send -X search-backward '%%'"

command-prompt also gets a -1 option to only require on key press, which
is needed for jumping.

The plan is to get rid of mode keys entirely, so more to come eventually.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.29 2016/10/10 21:51:39 nicm Exp $ */
d41 1
a41 1
	.flags = 0,
d54 1
a54 1
	.flags = 0,
@


1.29
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.28 2016/01/19 15:59:12 nicm Exp $ */
d36 2
a37 2
	.args = { "lRMt:", 0, -1 },
	.usage = "[-lRM] " CMD_TARGET_PANE_USAGE " key ...",
d62 1
d69 31
@


1.28
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.27 2015/12/16 22:05:35 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_send_keys_exec(struct cmd *, struct cmd_q *);
d58 1
a58 1
enum cmd_retval
@


1.27
log
@send-keys -R should reset the input parser to ground state (so it can be
used to escape from, for example, printf '\033]2;').
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.26 2015/12/14 00:31:54 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2008 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.26
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.25 2015/12/13 21:53:57 nicm Exp $ */
d89 1
a89 1
		input_reset(wp);
@


1.25
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.24 2015/12/13 14:32:38 nicm Exp $ */
d39 3
a41 1
	.flags = CMD_PANE_T,
d52 3
a54 1
	.flags = CMD_PANE_T,
@


1.24
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.23 2015/12/12 18:19:00 nicm Exp $ */
d33 8
a40 5
	"send-keys", "send",
	"lRMt:", 0, -1,
	"[-lRM] " CMD_TARGET_PANE_USAGE " key ...",
	CMD_PANE_T,
	cmd_send_keys_exec
d44 8
a51 5
	"send-prefix", NULL,
	"2t:", 0, 0,
	"[-2] " CMD_TARGET_PANE_USAGE,
	CMD_PANE_T,
	cmd_send_keys_exec
@


1.23
log
@Allow prefix and prefix2 to be set to None to disable (useful if you
would rather bind the prefix in the root table).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.22 2015/11/12 11:05:34 nicm Exp $ */
d36 1
a36 1
	0,
d44 1
a44 1
	0,
d52 2
d55 1
a55 2
	struct window_pane	*wp;
	struct session		*s;
a56 1
	const u_char		*keystr;
a67 3

	if (cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp) == NULL)
		return (CMD_RETURN_ERROR);
@


1.22
log
@Support UTF-8 key bindings by expanding the key type from int to
uint64_t and converting UTF-8 to Unicode on input and the reverse on
output. (This allows key bindings, there are still omissions - the
largest being that the various prompts do not accept UTF-8.)
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.21 2015/10/27 15:58:42 nicm Exp $ */
d55 2
a56 2
	const u_char		*str;
	int			 i;
d85 11
a95 8
		str = args->argv[i];

		if (!args_has(args, 'l') &&
		    (key = key_string_lookup_string(str)) != KEYC_NONE) {
			window_pane_key(wp, NULL, s, key, NULL);
		} else {
			for (; *str != '\0'; str++)
				window_pane_key(wp, NULL, s, *str, NULL);
@


1.21
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.20 2015/05/08 16:18:04 nicm Exp $ */
d56 2
a57 1
	int			 i, key;
@


1.20
log
@Move input parser structs into input.c (removing fairly useless
saved_cursor_[xy] formats as a side-effect).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.19 2015/04/19 21:34:21 nicm Exp $ */
d73 1
a73 1
			key = options_get_number(&s->options, "prefix2");
d75 1
a75 1
			key = options_get_number(&s->options, "prefix");
@


1.19
log
@Rewrite of tmux mouse support which was a mess. Instead of having
options for "mouse-this" and "mouse-that", mouse events may be bound as
keys and there is one option "mouse" that turns on mouse support
entirely (set -g mouse on).

See the new MOUSE SUPPORT section of the man page for description of the
key names and new flags (-t= to specify the pane or window under mouse
as a target, and send-keys -M to pass through a mouse event).

The default builtin bindings for the mouse are:

    bind -n   MouseDown1Pane select-pane -t=; send-keys -M
    bind -n MouseDown1Status select-window -t=
    bind -n   MouseDrag1Pane copy-mode -M
    bind -n MouseDrag1Border resize-pane -M

To get the effect of turning mode-mouse off, do:

    unbind -n MouseDrag1Pane
    unbind -temacs-copy MouseDrag1Pane

The old mouse options are now gone, set-option -q may be used to
suppress warnings if mixing configuration files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.18 2014/10/20 22:29:25 nicm Exp $ */
a54 1
	struct input_ctx	*ictx;
d80 2
a81 15
	if (args_has(args, 'R')) {
		ictx = &wp->ictx;

		memcpy(&ictx->cell, &grid_default_cell, sizeof ictx->cell);
		memcpy(&ictx->old_cell, &ictx->cell, sizeof ictx->old_cell);
		ictx->old_cx = 0;
		ictx->old_cy = 0;

		if (wp->mode == NULL)
			screen_write_start(&ictx->ctx, wp, &wp->base);
		else
			screen_write_start(&ictx->ctx, NULL, &wp->base);
		screen_write_reset(&ictx->ctx);
		screen_write_stop(&ictx->ctx);
	}
@


1.18
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.17 2013/10/10 12:00:23 nicm Exp $ */
d34 2
a35 2
	"lRt:", 0, -1,
	"[-lR] " CMD_TARGET_PANE_USAGE " key ...",
d52 1
d59 10
d77 1
a77 1
		window_pane_key(wp, s, key);
d102 1
a102 1
			    window_pane_key(wp, s, key);
d105 1
a105 1
			    window_pane_key(wp, s, *str);
@


1.17
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.16 2013/05/31 12:50:05 nicm Exp $ */
a36 1
	NULL,
a44 1
	NULL,
@


1.16
log
@Use u_char for the send-keys string to avoid mangling top-bit-set
characters when they are promoted to int and passed to
window_pane_key. Reported by Jacob Bang.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.15 2013/03/24 09:54:10 nicm Exp $ */
a37 1
	NULL,
a45 1
	NULL,
@


1.15
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.14 2013/03/24 09:31:38 nicm Exp $ */
d59 1
a59 1
	const char		*str;
@


1.14
log
@Merge send-prefix into send-keys.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.13 2012/12/09 23:17:35 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_send_keys_exec(struct cmd *, struct cmd_ctx *);
d53 1
a53 1
cmd_send_keys_exec(struct cmd *self, struct cmd_ctx *ctx)
d62 1
a62 1
	if (cmd_find_pane(ctx, args_get(args, 't'), &s, &wp) == NULL)
@


1.13
log
@Use the CMD_*_USAGE defines consistently, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.12 2012/07/11 07:10:15 nicm Exp $ */
d42 10
d64 9
@


1.12
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.11 2012/02/02 00:15:28 nicm Exp $ */
d35 1
a35 1
	"[-lR] [-t target-pane] key ...",
@


1.11
log
@Add -l flag to send-keys to send input literally (without translating
key names). From Frank Terbeck.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.10 2012/01/21 08:10:21 nicm Exp $ */
d30 1
a30 1
int	cmd_send_keys_exec(struct cmd *, struct cmd_ctx *);
d42 1
a42 1
int
d53 1
a53 1
		return (-1);
d83 1
a83 1
	return (0);
@


1.10
log
@Add a -R flag to send-keys to reset the terminal. Written ages ago and
Suggested by someone, I forget who.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.9 2011/01/04 00:42:47 nicm Exp $ */
d34 2
a35 2
	"Rt:", 0, -1,
	"[-R] [-t target-pane] key ...",
d74 2
a75 1
		if ((key = key_string_lookup_string(str)) != KEYC_NONE) {
@


1.9
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.8 2010/05/23 19:42:19 nicm Exp $ */
d22 1
d34 2
a35 2
	"t:", 0, -1,
	"[-t target-pane] key ...",
d48 1
d54 16
@


1.8
log
@Pass in the session, rather than the client, to window modes' key()
function. We were only ever using the client to find the session anyway.

This allows send-key to work properly for manipulating copy mode from
outside tmux.

From Micah Cowan.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.7 2009/12/03 22:50:10 nicm Exp $ */
a28 1
int	cmd_send_keys_parse(struct cmd *, int, char **, char **);
a29 8
void	cmd_send_keys_free(struct cmd *);
size_t	cmd_send_keys_print(struct cmd *, char *, size_t);

struct cmd_send_keys_data {
	char	*target;
	u_int	 nkeys;
	int	*keys;
};
d33 1
d35 1
a35 1
	0, "",
d37 2
a38 4
	cmd_send_keys_parse,
	cmd_send_keys_exec,
	cmd_send_keys_free,
	cmd_send_keys_print
a41 52
cmd_send_keys_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_send_keys_data	*data;
	int				 opt, key;
	char				*s;

	self->data = data = xmalloc(sizeof *data);
	data->target = NULL;
	data->nkeys = 0;
	data->keys = NULL;

	while ((opt = getopt(argc, argv, "t:")) != -1) {
		switch (opt) {
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc == 0)
		goto usage;

	while (argc-- != 0) {
		if ((key = key_string_lookup_string(*argv)) != KEYC_NONE) {
			data->keys = xrealloc(
			    data->keys, data->nkeys + 1, sizeof *data->keys);
			data->keys[data->nkeys++] = key;
		} else {
			for (s = *argv; *s != '\0'; s++) {
				data->keys = xrealloc(data->keys,
				    data->nkeys + 1, sizeof *data->keys);
				data->keys[data->nkeys++] = *s;
			}
		}

		argv++;
	}

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

	self->entry->free(self);
	return (-1);
}

int
d44 5
a48 4
	struct cmd_send_keys_data	*data = self->data;
	struct window_pane		*wp;
	struct session			*s;
	u_int				 i;
d50 1
a50 1
	if (data == NULL)
d53 2
a54 2
	if (cmd_find_pane(ctx, data->target, &s, &wp) == NULL)
		return (-1);
d56 7
a62 2
	for (i = 0; i < data->nkeys; i++)
		window_pane_key(wp, s, data->keys[i]);
a64 32
}

void
cmd_send_keys_free(struct cmd *self)
{
	struct cmd_send_keys_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	xfree(data);
}

size_t
cmd_send_keys_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_send_keys_data	*data = self->data;
	size_t				 off = 0;
	u_int				 i;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);

	for (i = 0; i < data->nkeys; i++) {
		if (off >= len)
			break;
		off += xsnprintf(buf + off,
		    len - off, " %s", key_string_lookup_key(data->keys[i]));
	}
	return (off);
@


1.7
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.6 2009/11/13 19:53:29 nicm Exp $ */
d108 1
d114 1
a114 1
	if (cmd_find_pane(ctx, data->target, NULL, &wp) == NULL)
d118 1
a118 1
		window_pane_key(wp, ctx->curclient, data->keys[i]);
@


1.6
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.5 2009/09/21 15:25:36 nicm Exp $ */
d36 1
a36 1
  	u_int	 nkeys;
@


1.5
log
@Nuke -i option which isn't used anymore.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.4 2009/08/18 16:21:04 nicm Exp $ */
d43 1
a43 1
	0, 0,
@


1.4
log
@Now that pane targets (-t) are supported, switch some commands to use them
where it makes sense: clock-mode, copy-mode, scroll-mode, send-keys,
send-prefix.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
a35 1
	int	 idx;
a59 1
	data->idx = -1;
a143 2
	if (off < len && data->idx != -1)
		off += xsnprintf(buf + off, len - off, " -i %d", data->idx);
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d43 1
a43 1
	"[-t target-window] key ...",
d109 1
a109 1
	struct winlink			*wl;
d115 1
a115 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
d118 2
a119 4
	for (i = 0; i < data->nkeys; i++) {
		window_pane_key(
		    wl->window->active, ctx->curclient, data->keys[i]);
	}
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-send-keys.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a30 2
void	cmd_send_keys_send(struct cmd *, struct buffer *);
void	cmd_send_keys_recv(struct cmd *, struct buffer *);
a47 2
	cmd_send_keys_send,
	cmd_send_keys_recv,
a123 22
}

void
cmd_send_keys_send(struct cmd *self, struct buffer *b)
{
	struct cmd_send_keys_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->target);
	buffer_write(b, data->keys, data->nkeys * sizeof *data->keys);
}

void
cmd_send_keys_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_send_keys_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->target = cmd_recv_string(b);
	data->keys = xcalloc(data->nkeys, sizeof *data->keys);
	buffer_read(b, data->keys, data->nkeys * sizeof *data->keys);
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d46 1
a46 1
	0,
@

