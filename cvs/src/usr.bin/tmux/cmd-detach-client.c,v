head	1.32;
access;
symbols
	OPENBSD_6_2:1.32.0.2
	OPENBSD_6_2_BASE:1.32
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.32
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.31;
commitid	RXMp6wwG5a5Y82bo;

1.31
date	2017.04.19.14.00.28;	author nicm;	state Exp;
branches;
next	1.30;
commitid	VxIcEJR3Nj27vycD;

1.30
date	2017.01.13.10.12.12;	author nicm;	state Exp;
branches;
next	1.29;
commitid	bQ0icVBejLnBpF27;

1.29
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.28;
commitid	pxm6osuE99zELpkU;

1.28
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.27;
commitid	TaZ3kOtGiWwKofka;

1.27
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.26;
commitid	P3qmSOx6KrDBsb0c;

1.26
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.25;
commitid	rE682EC14v4gpeFy;

1.25
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.24;
commitid	gsQkQsSyBCSmU9ax;

1.24
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.23;
commitid	uzMkp8Z4FE6WB6s6;

1.23
date	2015.12.08.01.10.31;	author nicm;	state Exp;
branches;
next	1.22;
commitid	Q7y3PTVPjE0eQDqD;

1.22
date	2015.11.24.20.40.51;	author nicm;	state Exp;
branches;
next	1.21;
commitid	DXPBl2AyboJj0u7q;

1.21
date	2015.10.27.13.23.24;	author nicm;	state Exp;
branches;
next	1.20;
commitid	g6GdEJXfBNprXHEK;

1.20
date	2015.04.24.23.17.11;	author nicm;	state Exp;
branches;
next	1.19;
commitid	iy4fcaIoXzxOx84I;

1.19
date	2015.01.30.15.57.30;	author nicm;	state Exp;
branches;
next	1.18;
commitid	mxlsobWLhNC3L3oI;

1.18
date	2014.10.20.23.01.51;	author nicm;	state Exp;
branches;
next	1.17;
commitid	SOqNlOPkAlwdgWzB;

1.17
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.16;
commitid	Gq8hgMoG3t1Wy1Zv;

1.16
date	2013.10.15.00.15.11;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.10.10.12.28.08;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2013.10.10.12.00.19;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.24.09.27.19;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.18.09.15.22;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.11.16.44.36;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.11.06.44.39;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.03.08.51.47;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.06.22.55.31;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@/* $OpenBSD: cmd-detach-client.c,v 1.31 2017/04/19 14:00:28 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <string.h>

#include "tmux.h"

/*
 * Detach a client.
 */

static enum cmd_retval	cmd_detach_client_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_detach_client_entry = {
	.name = "detach-client",
	.alias = "detach",

	.args = { "aE:s:t:P", 0, 0 },
	.usage = "[-aP] [-E shell-command] "
	         "[-s target-session] " CMD_TARGET_CLIENT_USAGE,

	.source = { 's', CMD_FIND_SESSION, CMD_FIND_CANFAIL },

	.flags = CMD_READONLY,
	.exec = cmd_detach_client_exec
};

const struct cmd_entry cmd_suspend_client_entry = {
	.name = "suspend-client",
	.alias = "suspendc",

	.args = { "t:", 0, 0 },
	.usage = CMD_TARGET_CLIENT_USAGE,

	.flags = 0,
	.exec = cmd_detach_client_exec
};

static enum cmd_retval
cmd_detach_client_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args	*args = self->args;
	struct client	*c, *cloop;
	struct session	*s;
	enum msgtype	 msgtype;
	const char	*cmd = args_get(args, 'E');

	if ((c = cmd_find_client(item, args_get(args, 't'), 0)) == NULL)
		return (CMD_RETURN_ERROR);

	if (self->entry == &cmd_suspend_client_entry) {
		server_client_suspend(c);
		return (CMD_RETURN_NORMAL);
	}

	if (args_has(args, 'P'))
		msgtype = MSG_DETACHKILL;
	else
		msgtype = MSG_DETACH;

	if (args_has(args, 's')) {
		s = item->source.s;
		if (s == NULL)
			return (CMD_RETURN_NORMAL);
		TAILQ_FOREACH(cloop, &clients, entry) {
			if (cloop->session == s) {
				if (cmd != NULL)
					server_client_exec(cloop, cmd);
				else
					server_client_detach(cloop, msgtype);
			}
		}
		return (CMD_RETURN_STOP);
	}

	if (args_has(args, 'a')) {
		TAILQ_FOREACH(cloop, &clients, entry) {
			if (cloop->session != NULL && cloop != c) {
				if (cmd != NULL)
					server_client_exec(cloop, cmd);
				else
					server_client_detach(cloop, msgtype);
			}
		}
		return (CMD_RETURN_NORMAL);
	}

	if (cmd != NULL)
		server_client_exec(c, cmd);
	else
		server_client_detach(c, msgtype);
	return (CMD_RETURN_STOP);
}
@


1.31
log
@Add a suspend helper function, and do not allow detaching or suspending
while already doing so.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.30 2017/01/13 10:12:12 nicm Exp $ */
d40 1
a40 2
	.sflag = CMD_SESSION,
	.tflag = CMD_CLIENT,
a52 2
	.tflag = CMD_CLIENT,

d61 1
a61 1
	struct client	*c = item->state.c, *cloop;
d66 3
d80 3
a82 1
		s = item->state.sflag.s;
@


1.30
log
@Add -E to detach-client to exec a command to replace the client instead
of exiting it, useful if tmux wasn't exec'd itself. From Jenna Magius.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.29 2016/10/16 19:04:05 nicm Exp $ */
d70 1
a70 3
		tty_stop_tty(&c->tty);
		c->flags |= CLIENT_SUSPENDED;
		proc_send(c->peer, MSG_SUSPEND, -1, NULL, 0);
@


1.29
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.28 2016/10/10 21:51:39 nicm Exp $ */
d36 3
a38 2
	.args = { "as:t:P", 0, 0 },
	.usage = "[-P] [-a] [-s target-session] " CMD_TARGET_CLIENT_USAGE,
d67 1
d84 6
a89 2
			if (cloop->session == s)
				server_client_detach(cloop, msgtype);
d96 6
a101 2
			if (cloop->session != NULL && cloop != c)
				server_client_detach(cloop, msgtype);
d106 4
a109 1
	server_client_detach(c, msgtype);
@


1.28
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.27 2016/01/19 15:59:12 nicm Exp $ */
d29 2
a30 1
static enum cmd_retval	 cmd_detach_client_exec(struct cmd *, struct cmd_q *);
d60 1
a60 1
cmd_detach_client_exec(struct cmd *self, struct cmd_q *cmdq)
d63 1
a63 1
	struct client	*c = cmdq->state.c, *cloop;
d80 1
a80 1
		s = cmdq->state.sflag.s;
@


1.27
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.26 2015/12/14 00:31:54 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	 cmd_detach_client_exec(struct cmd *, struct cmd_q *);
d58 1
a58 1
enum cmd_retval
@


1.26
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.25 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.25
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.24 2015/12/13 14:32:38 nicm Exp $ */
d38 4
a41 1
	.flags = CMD_READONLY|CMD_CLIENT_T|CMD_SESSION_S,
d52 3
a54 1
	.flags = CMD_CLIENT_T,
@


1.24
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.23 2015/12/08 01:10:31 nicm Exp $ */
d32 8
a39 5
	"detach-client", "detach",
	"as:t:P", 0, 0,
	"[-P] [-a] [-s target-session] " CMD_TARGET_CLIENT_USAGE,
	CMD_READONLY|CMD_CLIENT_T|CMD_SESSION_S,
	cmd_detach_client_exec
d43 8
a50 5
	"suspend-client", "suspendc",
	"t:", 0, 0,
	CMD_TARGET_CLIENT_USAGE,
	CMD_CLIENT_T,
	cmd_detach_client_exec
@


1.23
log
@Add hooks infrastructure, basic commands (set-hook, show-hooks) and a
couple of not very useful client hooks. This will eventually let
commands be run at various points and on notifications. Joint work with
Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.22 2015/11/24 20:40:51 nicm Exp $ */
d34 2
a35 2
	"[-aP] [-s target-session] " CMD_TARGET_CLIENT_USAGE,
	CMD_READONLY,
d43 1
a43 1
	0,
d51 1
a51 1
	struct client	*c, *cloop;
a55 2
		if ((c = cmd_find_client(cmdq, args_get(args, 't'), 0)) == NULL)
			return (CMD_RETURN_ERROR);
d68 1
a68 4
		s = cmd_find_session(cmdq, args_get(args, 's'), 0);
		if (s == NULL)
			return (CMD_RETURN_ERROR);

a74 4

	c = cmd_find_client(cmdq, args_get(args, 't'), 0);
	if (c == NULL)
		return (CMD_RETURN_ERROR);
@


1.22
log
@Fix usage of detach-client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.21 2015/10/27 13:23:24 nicm Exp $ */
d75 2
a76 3
			if (cloop->session != s)
				continue;
			proc_send_s(cloop->peer, msgtype, cloop->session->name);
d87 2
a88 3
			if (cloop->session == NULL || cloop == c)
				continue;
			proc_send_s(cloop->peer, msgtype, cloop->session->name);
d93 1
a93 1
	proc_send_s(c->peer, msgtype, c->session->name);
@


1.21
log
@Break the common process set up, event loop and imsg dispatch code
between server and client out into a separate internal API. This will
make it easier to add another process.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.20 2015/04/24 23:17:11 nicm Exp $ */
d34 1
a34 1
	"[-P] [-a] [-s target-session] " CMD_TARGET_CLIENT_USAGE,
@


1.20
log
@Convert clients list into a TAILQ.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.19 2015/01/30 15:57:30 nicm Exp $ */
d60 1
a60 1
		server_write_client(c, MSG_SUSPEND, NULL, 0);
d77 1
a77 3
			server_write_client(cloop, msgtype,
			    cloop->session->name,
			    strlen(cloop->session->name) + 1);
d90 1
a90 3
			server_write_client(cloop, msgtype,
			    cloop->session->name,
			    strlen(cloop->session->name) + 1);
d95 1
a95 2
	server_write_client(c, msgtype, c->session->name,
	    strlen(c->session->name) + 1);
@


1.19
log
@Tidy up detach-client a bit.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.18 2014/10/20 23:01:51 nicm Exp $ */
a53 1
	u_int 		 i;
d74 2
a75 3
		for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
			cloop = ARRAY_ITEM(&clients, i);
			if (cloop == NULL || cloop->session != s)
d89 2
a90 5
		for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
			cloop = ARRAY_ITEM(&clients, i);
			if (cloop == NULL || cloop->session == NULL)
				continue;
			if (cloop == c)
@


1.18
log
@Move suspend-client code into detach-client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.17 2014/10/20 22:29:25 nicm Exp $ */
d51 1
a51 1
	struct client	*c, *c2;
d76 2
a77 2
			c = ARRAY_ITEM(&clients, i);
			if (c == NULL || c->session != s)
d79 3
a81 2
			server_write_client(c, msgtype, c->session->name,
			    strlen(c->session->name) + 1);
d83 6
a88 4
	} else {
		c = cmd_find_client(cmdq, args_get(args, 't'), 0);
		if (c == NULL)
			return (CMD_RETURN_ERROR);
d90 10
a99 13
		if (args_has(args, 'a')) {
			for (i = 0; i < ARRAY_LENGTH(&clients); i++) {
				c2 = ARRAY_ITEM(&clients, i);
				if (c2 == NULL || c2->session == NULL ||
				    c2 == c)
					continue;
				server_write_client(c2, msgtype,
				    c2->session->name,
				    strlen(c2->session->name) + 1);
			}
		} else {
			server_write_client(c, msgtype, c->session->name,
			    strlen(c->session->name) + 1);
d101 1
d104 2
@


1.17
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.16 2013/10/15 00:15:11 nicm Exp $ */
d39 8
d55 9
@


1.16
log
@Fix detach -a by skipping clients where the session is NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.15 2013/10/10 12:28:08 nicm Exp $ */
a35 1
	NULL,
@


1.15
log
@Show session name in detached message. Requested by somebody a few
months ago who didn't bother testing it. But it works for me anyway.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.14 2013/10/10 12:00:19 nicm Exp $ */
d74 2
a75 1
				if (c2 == NULL || c == c2)
@


1.14
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.13 2013/03/24 09:54:10 nicm Exp $ */
d21 2
d45 2
a46 2
	struct session 	*s;
	enum msgtype     msgtype;
d61 4
a64 2
			if (c != NULL && c->session == s)
				server_write_client(c, msgtype, NULL, 0);
d76 3
a78 1
				server_write_client(c2, msgtype, NULL, 0);
d80 4
a83 2
		} else
			server_write_client(c, msgtype, NULL, 0);
@


1.13
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.12 2013/03/24 09:27:19 nicm Exp $ */
a33 1
	NULL,
@


1.12
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.11 2012/07/11 07:10:15 nicm Exp $ */
d27 1
a27 1
enum cmd_retval	 cmd_detach_client_exec(struct cmd *, struct cmd_ctx *);
d40 1
a40 1
cmd_detach_client_exec(struct cmd *self, struct cmd_ctx *ctx)
d54 1
a54 1
		s = cmd_find_session(ctx, args_get(args, 's'), 0);
d64 1
a64 1
		c = cmd_find_client(ctx, args_get(args, 't'), 0);
d79 1
a79 1
	return (CMD_RETURN_NORMAL);
@


1.11
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.10 2012/06/18 09:15:22 nicm Exp $ */
d64 1
a64 1
		c = cmd_find_client(ctx, args_get(args, 't'));
@


1.10
log
@Add -a flag for detach-client, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.9 2011/04/11 16:44:36 nicm Exp $ */
d27 1
a27 1
int	cmd_detach_client_exec(struct cmd *, struct cmd_ctx *);
d39 1
a39 1
int
d56 1
a56 1
			return (-1);
d66 1
a66 1
			return (-1);
d79 1
a79 1
	return (0);
@


1.9
log
@-s comes before -t and also add -s to command syntax. Prompted by jmc.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.8 2011/04/11 06:44:39 nicm Exp $ */
d31 2
a32 2
	"s:t:P", 0, 0,
	"[-P] [-s target-session] " CMD_TARGET_CLIENT_USAGE,
d43 1
a43 1
	struct client	*c;
d68 9
a76 1
		server_write_client(c, msgtype, NULL, 0);
@


1.8
log
@Add -s option to detach all clients attached to a session, from Zac
Sprackett.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.7 2011/03/03 08:51:47 nicm Exp $ */
d32 1
a32 1
	"[-P] " CMD_TARGET_CLIENT_USAGE,
@


1.7
log
@Add a -P option to detach to HUP the client's parent process (usually
causing it to exit as well).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.6 2011/01/04 00:42:46 nicm Exp $ */
d31 1
a31 1
	"t:P", 0, 0,
d44 3
a46 3

	if ((c = cmd_find_client(ctx, args_get(args, 't'))) == NULL)
		return (-1);
d49 1
a49 1
		server_write_client(c, MSG_DETACHKILL, NULL, 0);
d51 19
a69 1
		server_write_client(c, MSG_DETACH, NULL, 0);
@


1.6
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.5 2010/02/06 22:55:31 nicm Exp $ */
d31 2
a32 2
	"t:", 0, 0,
	CMD_TARGET_CLIENT_USAGE,
d48 4
a51 1
	server_write_client(c, MSG_DETACH, NULL, 0);
@


1.5
log
@Support attaching a client read-only with a new -r flag to the attach-session
command.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.4 2009/11/13 19:53:29 nicm Exp $ */
d31 1
d33 4
a36 6
	CMD_READONLY, "",
	cmd_target_init,
	cmd_target_parse,
	cmd_detach_client_exec,
	cmd_target_free,
	cmd_target_print
d42 2
a43 2
	struct cmd_target_data	*data = self->data;
	struct client		*c;
d45 1
a45 1
	if ((c = cmd_find_client(ctx, data->target)) == NULL)
@


1.4
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d32 1
a32 1
	0, "",
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d32 1
a32 1
	0, 0,
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-detach-client.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a35 2
	cmd_target_send,
	cmd_target_recv,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d32 1
a32 1
	0,
@

