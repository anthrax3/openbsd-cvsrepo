head	1.57;
access;
symbols
	OPENBSD_6_2:1.57.0.2
	OPENBSD_6_2_BASE:1.57
	OPENBSD_6_1:1.53.0.4
	OPENBSD_6_1_BASE:1.53
	OPENBSD_6_0:1.45.0.4
	OPENBSD_6_0_BASE:1.45
	OPENBSD_5_9:1.45.0.2
	OPENBSD_5_9_BASE:1.45
	OPENBSD_5_8:1.38.0.4
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.36.0.2
	OPENBSD_5_7_BASE:1.36
	OPENBSD_5_6:1.35.0.4
	OPENBSD_5_6_BASE:1.35
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.30.0.2
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.29.0.2
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.2
	OPENBSD_5_0:1.25.0.2
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.57
date	2017.08.27.08.33.55;	author nicm;	state Exp;
branches;
next	1.56;
commitid	MvGSXVaiHaMARLhl;

1.56
date	2017.06.16.11.50.06;	author nicm;	state Exp;
branches;
next	1.55;
commitid	KZkX7gPf9OutgwmR;

1.55
date	2017.05.31.08.43.44;	author nicm;	state Exp;
branches;
next	1.54;
commitid	6htjOPao5rGlHYYj;

1.54
date	2017.05.15.16.44.04;	author nicm;	state Exp;
branches;
next	1.53;
commitid	9dqJIeaGKTGHxVVw;

1.53
date	2017.03.22.07.16.54;	author nicm;	state Exp;
branches;
next	1.52;
commitid	YlKgZy2nlCejSvNQ;

1.52
date	2017.02.21.14.18.12;	author nicm;	state Exp;
branches;
next	1.51;
commitid	Lw2yDuABK2nzv3LB;

1.51
date	2017.02.08.17.31.09;	author nicm;	state Exp;
branches;
next	1.50;
commitid	AzNCw8YfPlNCzX1E;

1.50
date	2017.02.06.22.05.11;	author nicm;	state Exp;
branches;
next	1.49;
commitid	EudrDiTB8CsH17qW;

1.49
date	2017.01.24.20.05.15;	author nicm;	state Exp;
branches;
next	1.48;
commitid	DW4XRbRG0YgMui4Q;

1.48
date	2017.01.13.11.56.43;	author nicm;	state Exp;
branches;
next	1.47;
commitid	ue6KcgTetKiECTMk;

1.47
date	2016.12.09.21.39.27;	author nicm;	state Exp;
branches;
next	1.46;
commitid	bj3djzEC5gw7ET61;

1.46
date	2016.10.10.21.29.23;	author nicm;	state Exp;
branches;
next	1.45;
commitid	z4Hr4PZF7Ev93uEJ;

1.45
date	2016.01.29.11.13.56;	author nicm;	state Exp;
branches;
next	1.44;
commitid	Rew2ppunRTmAT23L;

1.44
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.43;
commitid	P3qmSOx6KrDBsb0c;

1.43
date	2015.12.11.16.37.21;	author nicm;	state Exp;
branches;
next	1.42;
commitid	pfV7j8HdB7hdHnZm;

1.42
date	2015.11.18.13.06.54;	author nicm;	state Exp;
branches;
next	1.41;
commitid	xAU2oIxJB0E2UZoZ;

1.41
date	2015.10.27.15.58.43;	author nicm;	state Exp;
branches;
next	1.40;
commitid	89xhQafU35Q5MQVC;

1.40
date	2015.09.24.07.02.18;	author nicm;	state Exp;
branches;
next	1.39;
commitid	1MSISYSHbZmzSKoC;

1.39
date	2015.09.01.19.50.09;	author nicm;	state Exp;
branches;
next	1.38;
commitid	qHFBNmcomtnWOK72;

1.38
date	2015.07.28.15.18.10;	author nicm;	state Exp;
branches;
next	1.37;
commitid	TNUQ68WbdVxASnmd;

1.37
date	2015.04.19.21.05.27;	author nicm;	state Exp;
branches;
next	1.36;
commitid	ksfuI8mTVk7XPyr3;

1.36
date	2015.01.20.08.18.04;	author nicm;	state Exp;
branches;
next	1.35;
commitid	rWJzz3mLtR2DyuLJ;

1.35
date	2014.07.21.10.25.48;	author nicm;	state Exp;
branches;
next	1.34;
commitid	uQXf8Vu4TQgRm6UX;

1.34
date	2014.04.17.12.57.28;	author nicm;	state Exp;
branches;
next	1.33;

1.33
date	2014.02.23.00.53.06;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2013.06.02.07.52.15;	author nicm;	state Exp;
branches;
next	1.31;

1.31
date	2013.03.27.11.17.12;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2013.01.15.23.18.55;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2012.05.22.09.36.12;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2011.12.01.23.47.08;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2011.10.23.10.16.14;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2011.05.20.19.17.39;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2011.05.20.19.03.58;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2011.05.18.20.24.29;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2011.05.08.19.53.08;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.09.07.48.08;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2011.01.26.00.11.47;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2011.01.01.03.32.28;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2010.09.11.16.19.22;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.11.15.43.11;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.26.14.46.08;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.12.08.05.23;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.26.16.00.51;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.25.21.11.21;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.24.21.18.33;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.13.01.18;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.23.11.40.05;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.21.12.29.59;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.05.19.05.02;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.03.15.30.16;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.03.14.10.54;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.02.20.47.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.14.06.30.45;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.05.03.13.16;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.57
log
@Use kind and kri for S-Up/Down as well as kUP and kDN.
@
text
@/* $OpenBSD: tty-term.c,v 1.56 2017/06/16 11:50:06 nicm Exp $ */

/*
 * Copyright (c) 2008 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <curses.h>
#include <fnmatch.h>
#include <stdlib.h>
#include <string.h>
#include <term.h>
#include <vis.h>

#include "tmux.h"

static void	 tty_term_override(struct tty_term *, const char *);
static char	*tty_term_strip(const char *);

struct tty_terms tty_terms = LIST_HEAD_INITIALIZER(tty_terms);

enum tty_code_type {
	TTYCODE_NONE = 0,
	TTYCODE_STRING,
	TTYCODE_NUMBER,
	TTYCODE_FLAG,
};

struct tty_code {
	enum tty_code_type	type;
	union {
		char	       *string;
		int		number;
		int		flag;
	} value;
};

struct tty_term_code_entry {
	enum tty_code_type	type;
	const char	       *name;
};

static const struct tty_term_code_entry tty_term_codes[] = {
	[TTYC_ACSC] = { TTYCODE_STRING, "acsc" },
	[TTYC_AX] = { TTYCODE_FLAG, "AX" },
	[TTYC_BCE] = { TTYCODE_FLAG, "bce" },
	[TTYC_BEL] = { TTYCODE_STRING, "bel" },
	[TTYC_BLINK] = { TTYCODE_STRING, "blink" },
	[TTYC_BOLD] = { TTYCODE_STRING, "bold" },
	[TTYC_CIVIS] = { TTYCODE_STRING, "civis" },
	[TTYC_CLEAR] = { TTYCODE_STRING, "clear" },
	[TTYC_CNORM] = { TTYCODE_STRING, "cnorm" },
	[TTYC_COLORS] = { TTYCODE_NUMBER, "colors" },
	[TTYC_CR] = { TTYCODE_STRING, "Cr" },
	[TTYC_CSR] = { TTYCODE_STRING, "csr" },
	[TTYC_CS] = { TTYCODE_STRING, "Cs" },
	[TTYC_CUB1] = { TTYCODE_STRING, "cub1" },
	[TTYC_CUB] = { TTYCODE_STRING, "cub" },
	[TTYC_CUD1] = { TTYCODE_STRING, "cud1" },
	[TTYC_CUD] = { TTYCODE_STRING, "cud" },
	[TTYC_CUF1] = { TTYCODE_STRING, "cuf1" },
	[TTYC_CUF] = { TTYCODE_STRING, "cuf" },
	[TTYC_CUP] = { TTYCODE_STRING, "cup" },
	[TTYC_CUU1] = { TTYCODE_STRING, "cuu1" },
	[TTYC_CUU] = { TTYCODE_STRING, "cuu" },
	[TTYC_CVVIS] = { TTYCODE_STRING, "cvvis" },
	[TTYC_DCH1] = { TTYCODE_STRING, "dch1" },
	[TTYC_DCH] = { TTYCODE_STRING, "dch" },
	[TTYC_DIM] = { TTYCODE_STRING, "dim" },
	[TTYC_DL1] = { TTYCODE_STRING, "dl1" },
	[TTYC_DL] = { TTYCODE_STRING, "dl" },
	[TTYC_E3] = { TTYCODE_STRING, "E3" },
	[TTYC_ECH] = { TTYCODE_STRING, "ech" },
	[TTYC_ED] = { TTYCODE_STRING, "ed" },
	[TTYC_EL1] = { TTYCODE_STRING, "el1" },
	[TTYC_EL] = { TTYCODE_STRING, "el" },
	[TTYC_ENACS] = { TTYCODE_STRING, "enacs" },
	[TTYC_FSL] = { TTYCODE_STRING, "fsl" },
	[TTYC_HOME] = { TTYCODE_STRING, "home" },
	[TTYC_HPA] = { TTYCODE_STRING, "hpa" },
	[TTYC_ICH1] = { TTYCODE_STRING, "ich1" },
	[TTYC_ICH] = { TTYCODE_STRING, "ich" },
	[TTYC_IL1] = { TTYCODE_STRING, "il1" },
	[TTYC_IL] = { TTYCODE_STRING, "il" },
	[TTYC_INDN] = { TTYCODE_STRING, "indn" },
	[TTYC_INVIS] = { TTYCODE_STRING, "invis" },
	[TTYC_KCBT] = { TTYCODE_STRING, "kcbt" },
	[TTYC_KCUB1] = { TTYCODE_STRING, "kcub1" },
	[TTYC_KCUD1] = { TTYCODE_STRING, "kcud1" },
	[TTYC_KCUF1] = { TTYCODE_STRING, "kcuf1" },
	[TTYC_KCUU1] = { TTYCODE_STRING, "kcuu1" },
	[TTYC_KDC2] = { TTYCODE_STRING, "kDC" },
	[TTYC_KDC3] = { TTYCODE_STRING, "kDC3" },
	[TTYC_KDC4] = { TTYCODE_STRING, "kDC4" },
	[TTYC_KDC5] = { TTYCODE_STRING, "kDC5" },
	[TTYC_KDC6] = { TTYCODE_STRING, "kDC6" },
	[TTYC_KDC7] = { TTYCODE_STRING, "kDC7" },
	[TTYC_KDCH1] = { TTYCODE_STRING, "kdch1" },
	[TTYC_KDN2] = { TTYCODE_STRING, "kDN" }, /* not kDN2 */
	[TTYC_KDN3] = { TTYCODE_STRING, "kDN3" },
	[TTYC_KDN4] = { TTYCODE_STRING, "kDN4" },
	[TTYC_KDN5] = { TTYCODE_STRING, "kDN5" },
	[TTYC_KDN6] = { TTYCODE_STRING, "kDN6" },
	[TTYC_KDN7] = { TTYCODE_STRING, "kDN7" },
	[TTYC_KEND2] = { TTYCODE_STRING, "kEND" },
	[TTYC_KEND3] = { TTYCODE_STRING, "kEND3" },
	[TTYC_KEND4] = { TTYCODE_STRING, "kEND4" },
	[TTYC_KEND5] = { TTYCODE_STRING, "kEND5" },
	[TTYC_KEND6] = { TTYCODE_STRING, "kEND6" },
	[TTYC_KEND7] = { TTYCODE_STRING, "kEND7" },
	[TTYC_KEND] = { TTYCODE_STRING, "kend" },
	[TTYC_KF10] = { TTYCODE_STRING, "kf10" },
	[TTYC_KF11] = { TTYCODE_STRING, "kf11" },
	[TTYC_KF12] = { TTYCODE_STRING, "kf12" },
	[TTYC_KF13] = { TTYCODE_STRING, "kf13" },
	[TTYC_KF14] = { TTYCODE_STRING, "kf14" },
	[TTYC_KF15] = { TTYCODE_STRING, "kf15" },
	[TTYC_KF16] = { TTYCODE_STRING, "kf16" },
	[TTYC_KF17] = { TTYCODE_STRING, "kf17" },
	[TTYC_KF18] = { TTYCODE_STRING, "kf18" },
	[TTYC_KF19] = { TTYCODE_STRING, "kf19" },
	[TTYC_KF1] = { TTYCODE_STRING, "kf1" },
	[TTYC_KF20] = { TTYCODE_STRING, "kf20" },
	[TTYC_KF21] = { TTYCODE_STRING, "kf21" },
	[TTYC_KF22] = { TTYCODE_STRING, "kf22" },
	[TTYC_KF23] = { TTYCODE_STRING, "kf23" },
	[TTYC_KF24] = { TTYCODE_STRING, "kf24" },
	[TTYC_KF25] = { TTYCODE_STRING, "kf25" },
	[TTYC_KF26] = { TTYCODE_STRING, "kf26" },
	[TTYC_KF27] = { TTYCODE_STRING, "kf27" },
	[TTYC_KF28] = { TTYCODE_STRING, "kf28" },
	[TTYC_KF29] = { TTYCODE_STRING, "kf29" },
	[TTYC_KF2] = { TTYCODE_STRING, "kf2" },
	[TTYC_KF30] = { TTYCODE_STRING, "kf30" },
	[TTYC_KF31] = { TTYCODE_STRING, "kf31" },
	[TTYC_KF32] = { TTYCODE_STRING, "kf32" },
	[TTYC_KF33] = { TTYCODE_STRING, "kf33" },
	[TTYC_KF34] = { TTYCODE_STRING, "kf34" },
	[TTYC_KF35] = { TTYCODE_STRING, "kf35" },
	[TTYC_KF36] = { TTYCODE_STRING, "kf36" },
	[TTYC_KF37] = { TTYCODE_STRING, "kf37" },
	[TTYC_KF38] = { TTYCODE_STRING, "kf38" },
	[TTYC_KF39] = { TTYCODE_STRING, "kf39" },
	[TTYC_KF3] = { TTYCODE_STRING, "kf3" },
	[TTYC_KF40] = { TTYCODE_STRING, "kf40" },
	[TTYC_KF41] = { TTYCODE_STRING, "kf41" },
	[TTYC_KF42] = { TTYCODE_STRING, "kf42" },
	[TTYC_KF43] = { TTYCODE_STRING, "kf43" },
	[TTYC_KF44] = { TTYCODE_STRING, "kf44" },
	[TTYC_KF45] = { TTYCODE_STRING, "kf45" },
	[TTYC_KF46] = { TTYCODE_STRING, "kf46" },
	[TTYC_KF47] = { TTYCODE_STRING, "kf47" },
	[TTYC_KF48] = { TTYCODE_STRING, "kf48" },
	[TTYC_KF49] = { TTYCODE_STRING, "kf49" },
	[TTYC_KF4] = { TTYCODE_STRING, "kf4" },
	[TTYC_KF50] = { TTYCODE_STRING, "kf50" },
	[TTYC_KF51] = { TTYCODE_STRING, "kf51" },
	[TTYC_KF52] = { TTYCODE_STRING, "kf52" },
	[TTYC_KF53] = { TTYCODE_STRING, "kf53" },
	[TTYC_KF54] = { TTYCODE_STRING, "kf54" },
	[TTYC_KF55] = { TTYCODE_STRING, "kf55" },
	[TTYC_KF56] = { TTYCODE_STRING, "kf56" },
	[TTYC_KF57] = { TTYCODE_STRING, "kf57" },
	[TTYC_KF58] = { TTYCODE_STRING, "kf58" },
	[TTYC_KF59] = { TTYCODE_STRING, "kf59" },
	[TTYC_KF5] = { TTYCODE_STRING, "kf5" },
	[TTYC_KF60] = { TTYCODE_STRING, "kf60" },
	[TTYC_KF61] = { TTYCODE_STRING, "kf61" },
	[TTYC_KF62] = { TTYCODE_STRING, "kf62" },
	[TTYC_KF63] = { TTYCODE_STRING, "kf63" },
	[TTYC_KF6] = { TTYCODE_STRING, "kf6" },
	[TTYC_KF7] = { TTYCODE_STRING, "kf7" },
	[TTYC_KF8] = { TTYCODE_STRING, "kf8" },
	[TTYC_KF9] = { TTYCODE_STRING, "kf9" },
	[TTYC_KHOM2] = { TTYCODE_STRING, "kHOM" },
	[TTYC_KHOM3] = { TTYCODE_STRING, "kHOM3" },
	[TTYC_KHOM4] = { TTYCODE_STRING, "kHOM4" },
	[TTYC_KHOM5] = { TTYCODE_STRING, "kHOM5" },
	[TTYC_KHOM6] = { TTYCODE_STRING, "kHOM6" },
	[TTYC_KHOM7] = { TTYCODE_STRING, "kHOM7" },
	[TTYC_KHOME] = { TTYCODE_STRING, "khome" },
	[TTYC_KIC2] = { TTYCODE_STRING, "kIC" },
	[TTYC_KIC3] = { TTYCODE_STRING, "kIC3" },
	[TTYC_KIC4] = { TTYCODE_STRING, "kIC4" },
	[TTYC_KIC5] = { TTYCODE_STRING, "kIC5" },
	[TTYC_KIC6] = { TTYCODE_STRING, "kIC6" },
	[TTYC_KIC7] = { TTYCODE_STRING, "kIC7" },
	[TTYC_KICH1] = { TTYCODE_STRING, "kich1" },
	[TTYC_KIND] = { TTYCODE_STRING, "kind" },
	[TTYC_KLFT2] = { TTYCODE_STRING, "kLFT" },
	[TTYC_KLFT3] = { TTYCODE_STRING, "kLFT3" },
	[TTYC_KLFT4] = { TTYCODE_STRING, "kLFT4" },
	[TTYC_KLFT5] = { TTYCODE_STRING, "kLFT5" },
	[TTYC_KLFT6] = { TTYCODE_STRING, "kLFT6" },
	[TTYC_KLFT7] = { TTYCODE_STRING, "kLFT7" },
	[TTYC_KMOUS] = { TTYCODE_STRING, "kmous" },
	[TTYC_KNP] = { TTYCODE_STRING, "knp" },
	[TTYC_KNXT2] = { TTYCODE_STRING, "kNXT" },
	[TTYC_KNXT3] = { TTYCODE_STRING, "kNXT3" },
	[TTYC_KNXT4] = { TTYCODE_STRING, "kNXT4" },
	[TTYC_KNXT5] = { TTYCODE_STRING, "kNXT5" },
	[TTYC_KNXT6] = { TTYCODE_STRING, "kNXT6" },
	[TTYC_KNXT7] = { TTYCODE_STRING, "kNXT7" },
	[TTYC_KPP] = { TTYCODE_STRING, "kpp" },
	[TTYC_KPRV2] = { TTYCODE_STRING, "kPRV" },
	[TTYC_KPRV3] = { TTYCODE_STRING, "kPRV3" },
	[TTYC_KPRV4] = { TTYCODE_STRING, "kPRV4" },
	[TTYC_KPRV5] = { TTYCODE_STRING, "kPRV5" },
	[TTYC_KPRV6] = { TTYCODE_STRING, "kPRV6" },
	[TTYC_KPRV7] = { TTYCODE_STRING, "kPRV7" },
	[TTYC_KRIT2] = { TTYCODE_STRING, "kRIT" },
	[TTYC_KRIT3] = { TTYCODE_STRING, "kRIT3" },
	[TTYC_KRIT4] = { TTYCODE_STRING, "kRIT4" },
	[TTYC_KRIT5] = { TTYCODE_STRING, "kRIT5" },
	[TTYC_KRIT6] = { TTYCODE_STRING, "kRIT6" },
	[TTYC_KRIT7] = { TTYCODE_STRING, "kRIT7" },
	[TTYC_KRI] = { TTYCODE_STRING, "kri" },
	[TTYC_KUP2] = { TTYCODE_STRING, "kUP" }, /* not kUP2 */
	[TTYC_KUP3] = { TTYCODE_STRING, "kUP3" },
	[TTYC_KUP4] = { TTYCODE_STRING, "kUP4" },
	[TTYC_KUP5] = { TTYCODE_STRING, "kUP5" },
	[TTYC_KUP6] = { TTYCODE_STRING, "kUP6" },
	[TTYC_KUP7] = { TTYCODE_STRING, "kUP7" },
	[TTYC_MS] = { TTYCODE_STRING, "Ms" },
	[TTYC_OP] = { TTYCODE_STRING, "op" },
	[TTYC_REV] = { TTYCODE_STRING, "rev" },
	[TTYC_RI] = { TTYCODE_STRING, "ri" },
	[TTYC_RMACS] = { TTYCODE_STRING, "rmacs" },
	[TTYC_RMCUP] = { TTYCODE_STRING, "rmcup" },
	[TTYC_RMKX] = { TTYCODE_STRING, "rmkx" },
	[TTYC_SETAB] = { TTYCODE_STRING, "setab" },
	[TTYC_SETAF] = { TTYCODE_STRING, "setaf" },
	[TTYC_SETRGBB] = { TTYCODE_STRING, "setrgbb" },
	[TTYC_SETRGBF] = { TTYCODE_STRING, "setrgbf" },
	[TTYC_SE] = { TTYCODE_STRING, "Se" },
	[TTYC_SGR0] = { TTYCODE_STRING, "sgr0" },
	[TTYC_SITM] = { TTYCODE_STRING, "sitm" },
	[TTYC_SMACS] = { TTYCODE_STRING, "smacs" },
	[TTYC_SMCUP] = { TTYCODE_STRING, "smcup" },
	[TTYC_SMKX] = { TTYCODE_STRING, "smkx" },
	[TTYC_SMSO] = { TTYCODE_STRING, "smso" },
	[TTYC_SMUL] = { TTYCODE_STRING, "smul" },
	[TTYC_SMXX] =  { TTYCODE_STRING, "smxx" },
	[TTYC_SS] = { TTYCODE_STRING, "Ss" },
	[TTYC_TC] = { TTYCODE_FLAG, "Tc" },
	[TTYC_TSL] = { TTYCODE_STRING, "tsl" },
	[TTYC_U8] = { TTYCODE_NUMBER, "U8" },
	[TTYC_VPA] = { TTYCODE_STRING, "vpa" },
	[TTYC_XENL] = { TTYCODE_FLAG, "xenl" },
	[TTYC_XT] = { TTYCODE_FLAG, "XT" },
};

u_int
tty_term_ncodes(void)
{
	return (nitems(tty_term_codes));
}

static char *
tty_term_strip(const char *s)
{
	const char     *ptr;
	static char	buf[BUFSIZ];
	size_t		len;

	/* Ignore strings with no padding. */
	if (strchr(s, '$') == NULL)
		return (xstrdup(s));

	len = 0;
	for (ptr = s; *ptr != '\0'; ptr++) {
		if (*ptr == '$' && *(ptr + 1) == '<') {
			while (*ptr != '\0' && *ptr != '>')
				ptr++;
			if (*ptr == '>')
				ptr++;
		}

		buf[len++] = *ptr;
		if (len == (sizeof buf) - 1)
			break;
	}
	buf[len] = '\0';

	return (xstrdup(buf));
}

static void
tty_term_override(struct tty_term *term, const char *override)
{
	const struct tty_term_code_entry	*ent;
	struct tty_code				*code;
	char					*next, *s, *copy, *cp, *value;
	const char				*errstr;
	u_int					 i;
	int					 n, remove;

	copy = next = xstrdup(override);

	s = strsep(&next, ":");
	if (s == NULL || next == NULL || fnmatch(s, term->name, 0) != 0) {
		free(copy);
		return;
	}

	while ((s = strsep(&next, ":")) != NULL) {
		if (*s == '\0')
			continue;
		value = NULL;

		remove = 0;
		if ((cp = strchr(s, '=')) != NULL) {
			*cp++ = '\0';
			value = xstrdup(cp);
			if (strunvis(value, cp) == -1) {
				free(value);
				value = xstrdup(cp);
			}
		} else if (s[strlen(s) - 1] == '@@') {
			s[strlen(s) - 1] = '\0';
			remove = 1;
		} else
			value = xstrdup("");

		if (remove)
			log_debug("%s override: %s@@", term->name, s);
		else
			log_debug("%s override: %s=%s", term->name, s, value);

		for (i = 0; i < tty_term_ncodes(); i++) {
			ent = &tty_term_codes[i];
			if (strcmp(s, ent->name) != 0)
				continue;
			code = &term->codes[i];

			if (remove) {
				code->type = TTYCODE_NONE;
				continue;
			}
			switch (ent->type) {
			case TTYCODE_NONE:
				break;
			case TTYCODE_STRING:
				if (code->type == TTYCODE_STRING)
					free(code->value.string);
				code->value.string = xstrdup(value);
				code->type = ent->type;
				break;
			case TTYCODE_NUMBER:
				n = strtonum(value, 0, INT_MAX, &errstr);
				if (errstr != NULL)
					break;
				code->value.number = n;
				code->type = ent->type;
				break;
			case TTYCODE_FLAG:
				code->value.flag = 1;
				code->type = ent->type;
				break;
			}
		}

		free(value);
	}
	free(s);
}

struct tty_term *
tty_term_find(char *name, int fd, char **cause)
{
	struct tty_term				*term;
	const struct tty_term_code_entry	*ent;
	struct tty_code				*code;
	struct options_entry			*o;
	u_int					 size, i;
	int		 			 n, error;
	const char				*s, *acs;

	LIST_FOREACH(term, &tty_terms, entry) {
		if (strcmp(term->name, name) == 0) {
			term->references++;
			return (term);
		}
	}
	log_debug("new term: %s", name);

	term = xmalloc(sizeof *term);
	term->name = xstrdup(name);
	term->references = 1;
	term->flags = 0;
	term->codes = xcalloc(tty_term_ncodes(), sizeof *term->codes);
	LIST_INSERT_HEAD(&tty_terms, term, entry);

	/* Set up curses terminal. */
	if (setupterm(name, fd, &error) != OK) {
		switch (error) {
		case 1:
			xasprintf(cause, "can't use hardcopy terminal: %s",
			    name);
			break;
		case 0:
			xasprintf(cause, "missing or unsuitable terminal: %s",
			    name);
			break;
		case -1:
			xasprintf(cause, "can't find terminfo database");
			break;
		default:
			xasprintf(cause, "unknown error");
			break;
		}
		goto error;
	}

	/* Fill in codes. */
	for (i = 0; i < tty_term_ncodes(); i++) {
		ent = &tty_term_codes[i];

		code = &term->codes[i];
		code->type = TTYCODE_NONE;
		switch (ent->type) {
		case TTYCODE_NONE:
			break;
		case TTYCODE_STRING:
			s = tigetstr((char *) ent->name);
			if (s == NULL || s == (char *) -1)
				break;
			code->type = TTYCODE_STRING;
			code->value.string = tty_term_strip(s);
			break;
		case TTYCODE_NUMBER:
			n = tigetnum((char *) ent->name);
			if (n == -1 || n == -2)
				break;
			code->type = TTYCODE_NUMBER;
			code->value.number = n;
			break;
		case TTYCODE_FLAG:
			n = tigetflag((char *) ent->name);
			if (n == -1)
				break;
			code->type = TTYCODE_FLAG;
			code->value.flag = n;
			break;
		}
	}

	/* Apply terminal overrides. */
	o = options_get_only(global_options, "terminal-overrides");
	if (options_array_size(o, &size) != -1) {
		for (i = 0; i < size; i++) {
			s = options_array_get(o, i);
			if (s != NULL)
				tty_term_override(term, s);
		}
	}

	/* Delete curses data. */
	del_curterm(cur_term);

	/* These are always required. */
	if (!tty_term_has(term, TTYC_CLEAR)) {
		xasprintf(cause, "terminal does not support clear");
		goto error;
	}
	if (!tty_term_has(term, TTYC_CUP)) {
		xasprintf(cause, "terminal does not support cup");
		goto error;
	}

	/* These can be emulated so one of the two is required. */
	if (!tty_term_has(term, TTYC_CUD1) && !tty_term_has(term, TTYC_CUD)) {
		xasprintf(cause, "terminal does not support cud1 or cud");
		goto error;
	}

	/* Figure out if we have 256. */
	if (tty_term_number(term, TTYC_COLORS) == 256)
		term->flags |= TERM_256COLOURS;

	/*
	 * Terminals without xenl (eat newline glitch) wrap at at $COLUMNS - 1
	 * rather than $COLUMNS (the cursor can never be beyond $COLUMNS - 1).
	 *
	 * This is irritating, most notably because it is impossible to write
	 * to the very bottom-right of the screen without scrolling.
	 *
	 * Flag the terminal here and apply some workarounds in other places to
	 * do the best possible.
	 */
	if (!tty_term_flag(term, TTYC_XENL))
		term->flags |= TERM_EARLYWRAP;

	/* Generate ACS table. If none is present, use nearest ASCII. */
	memset(term->acs, 0, sizeof term->acs);
	if (tty_term_has(term, TTYC_ACSC))
		acs = tty_term_string(term, TTYC_ACSC);
	else
		acs = "a#j+k+l+m+n+o-p-q-r-s-t+u+v+w+x|y<z>~.";
	for (; acs[0] != '\0' && acs[1] != '\0'; acs += 2)
		term->acs[(u_char) acs[0]][0] = acs[1];

	/* On terminals with xterm titles (XT), fill in tsl and fsl. */
	if (tty_term_flag(term, TTYC_XT) &&
	    !tty_term_has(term, TTYC_TSL) &&
	    !tty_term_has(term, TTYC_FSL)) {
		code = &term->codes[TTYC_TSL];
		code->value.string = xstrdup("\033]0;");
		code->type = TTYCODE_STRING;
		code = &term->codes[TTYC_FSL];
		code->value.string = xstrdup("\007");
		code->type = TTYCODE_STRING;
	}

	/* On terminals with RGB colour (TC), fill in setrgbf and setrgbb. */
	if (tty_term_flag(term, TTYC_TC) &&
	    !tty_term_has(term, TTYC_SETRGBF) &&
	    !tty_term_has(term, TTYC_SETRGBB)) {
		code = &term->codes[TTYC_SETRGBF];
		code->value.string = xstrdup("\033[38;2;%p1%d;%p2%d;%p3%dm");
		code->type = TTYCODE_STRING;
		code = &term->codes[TTYC_SETRGBB];
		code->value.string = xstrdup("\033[48;2;%p1%d;%p2%d;%p3%dm");
		code->type = TTYCODE_STRING;
	}

	/* Log it. */
	for (i = 0; i < tty_term_ncodes(); i++)
		log_debug("%s%s", name, tty_term_describe(term, i));

	return (term);

error:
	tty_term_free(term);
	return (NULL);
}

void
tty_term_free(struct tty_term *term)
{
	u_int	i;

	if (--term->references != 0)
		return;

	LIST_REMOVE(term, entry);

	for (i = 0; i < tty_term_ncodes(); i++) {
		if (term->codes[i].type == TTYCODE_STRING)
			free(term->codes[i].value.string);
	}
	free(term->codes);

	free(term->name);
	free(term);
}

int
tty_term_has(struct tty_term *term, enum tty_code_code code)
{
	return (term->codes[code].type != TTYCODE_NONE);
}

const char *
tty_term_string(struct tty_term *term, enum tty_code_code code)
{
	if (!tty_term_has(term, code))
		return ("");
	if (term->codes[code].type != TTYCODE_STRING)
		fatalx("not a string: %d", code);
	return (term->codes[code].value.string);
}

const char *
tty_term_string1(struct tty_term *term, enum tty_code_code code, int a)
{
	return (tparm((char *) tty_term_string(term, code), a));
}

const char *
tty_term_string2(struct tty_term *term, enum tty_code_code code, int a, int b)
{
	return (tparm((char *) tty_term_string(term, code), a, b));
}

const char *
tty_term_string3(struct tty_term *term, enum tty_code_code code, int a, int b, int c)
{
	return (tparm((char *) tty_term_string(term, code), a, b, c));
}

const char *
tty_term_ptr1(struct tty_term *term, enum tty_code_code code, const void *a)
{
	return (tparm((char *) tty_term_string(term, code), a));
}

const char *
tty_term_ptr2(struct tty_term *term, enum tty_code_code code, const void *a,
    const void *b)
{
	return (tparm((char *) tty_term_string(term, code), a, b));
}

int
tty_term_number(struct tty_term *term, enum tty_code_code code)
{
	if (!tty_term_has(term, code))
		return (0);
	if (term->codes[code].type != TTYCODE_NUMBER)
		fatalx("not a number: %d", code);
	return (term->codes[code].value.number);
}

int
tty_term_flag(struct tty_term *term, enum tty_code_code code)
{
	if (!tty_term_has(term, code))
		return (0);
	if (term->codes[code].type != TTYCODE_FLAG)
		fatalx("not a flag: %d", code);
	return (term->codes[code].value.flag);
}

const char *
tty_term_describe(struct tty_term *term, enum tty_code_code code)
{
	static char	 s[256];
	char		 out[128];

	switch (term->codes[code].type) {
	case TTYCODE_NONE:
		xsnprintf(s, sizeof s, "%4u: %s: [missing]",
		    code, tty_term_codes[code].name);
		break;
	case TTYCODE_STRING:
		strnvis(out, term->codes[code].value.string, sizeof out,
		    VIS_OCTAL|VIS_TAB|VIS_NL);
		xsnprintf(s, sizeof s, "%4u: %s: (string) %s",
		    code, tty_term_codes[code].name,
		    out);
		break;
	case TTYCODE_NUMBER:
		xsnprintf(s, sizeof s, "%4u: %s: (number) %d",
		    code, tty_term_codes[code].name,
		    term->codes[code].value.number);
		break;
	case TTYCODE_FLAG:
		xsnprintf(s, sizeof s, "%4u: %s: (flag) %s",
		    code, tty_term_codes[code].name,
		    term->codes[code].value.flag ? "true" : "false");
		break;
	}
	return (s);
}
@


1.56
log
@Log terminal capabilities for each new terminal.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.55 2017/05/31 08:43:44 nicm Exp $ */
d68 1
d70 1
a70 1
	[TTYC_CSR] = { TTYCODE_STRING, "csr" },
d72 1
a72 1
	[TTYC_CUB1] = { TTYCODE_STRING, "cub1" },
d74 1
a74 1
	[TTYC_CUD1] = { TTYCODE_STRING, "cud1" },
a75 1
	[TTYC_CUF1] = { TTYCODE_STRING, "cuf1" },
d77 1
a78 1
	[TTYC_CUU1] = { TTYCODE_STRING, "cuu1" },
d80 1
a81 1
	[TTYC_DCH1] = { TTYCODE_STRING, "dch1" },
d83 1
a84 1
	[TTYC_DL1] = { TTYCODE_STRING, "dl1" },
d88 1
a89 1
	[TTYC_EL1] = { TTYCODE_STRING, "el1" },
d94 1
d96 1
a96 1
	[TTYC_ICH1] = { TTYCODE_STRING, "ich1" },
a97 1
	[TTYC_IL1] = { TTYCODE_STRING, "il1" },
d112 1
a112 1
	[TTYC_KDN2] = { TTYCODE_STRING, "kDN" },
a117 1
	[TTYC_KEND] = { TTYCODE_STRING, "kend" },
d124 1
a124 1
	[TTYC_KF1] = { TTYCODE_STRING, "kf1" },
d135 1
a135 1
	[TTYC_KF2] = { TTYCODE_STRING, "kf2" },
d146 1
a146 1
	[TTYC_KF3] = { TTYCODE_STRING, "kf3" },
d157 1
a157 1
	[TTYC_KF4] = { TTYCODE_STRING, "kf4" },
d168 1
a168 1
	[TTYC_KF5] = { TTYCODE_STRING, "kf5" },
d179 1
a179 1
	[TTYC_KF6] = { TTYCODE_STRING, "kf6" },
d184 1
d202 1
d230 2
a231 1
	[TTYC_KUP2] = { TTYCODE_STRING, "kUP" },
a243 1
	[TTYC_SE] = { TTYCODE_STRING, "Se" },
d248 1
d260 1
a261 1
	[TTYC_U8] = { TTYCODE_NUMBER, "U8" },
@


1.55
log
@Look for setrgbf and setrgbb terminfo extensions for RGB colour. This is
the most reasonable of the various (some bizarre) suggestions for
capabilities.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.54 2017/05/15 16:44:04 nicm Exp $ */
d396 1
a397 1
	log_debug("new term: %s", name);
d537 4
@


1.54
log
@Check the terminfo(5) U8 capability and disable using UTF-8 for ACS if
it is present and zero. This is useful for users with terminals or fonts
that do not correctly support UTF-8 line drawing characters. GitHub
issue 927, reported by Hiroaki Yamazoe and Akinori Hattori.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.53 2017/03/22 07:16:54 nicm Exp $ */
d245 2
d526 12
d591 6
@


1.53
log
@Add support for the strikethrough attribute (SGR 9), using the new smxx
terminfo capability. This means there are now nine attribute bits, so
anything above 0xff uses an extended cell.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.52 2017/02/21 14:18:12 nicm Exp $ */
d257 1
@


1.52
log
@Don't need is1,is2,is3 so remove them.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.51 2017/02/08 17:31:09 nicm Exp $ */
d252 1
@


1.51
log
@Add support for scroll up escape sequence (CSI S) and use it when
possible instead of sending individual line feeds.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.50 2017/02/06 22:05:11 nicm Exp $ */
a99 3
	[TTYC_IS1] = { TTYCODE_STRING, "is1" },
	[TTYC_IS2] = { TTYCODE_STRING, "is2" },
	[TTYC_IS3] = { TTYCODE_STRING, "is3" },
@


1.50
log
@Use DECFRA on VT420 compatible terminals (so, xterm) and ED on all
others for clearing panes.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.49 2017/01/24 20:05:15 nicm Exp $ */
d98 1
@


1.49
log
@Convert terminal-overrides to an array option.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.48 2017/01/13 11:56:43 nicm Exp $ */
d87 1
@


1.48
log
@Make options_get_string return const string.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.47 2016/12/09 21:39:27 nicm Exp $ */
d297 1
a297 1
tty_term_override(struct tty_term *term, const char *overrides)
d301 1
a301 3
	char					*termnext, *termstr;
	char					*entnext, *entstr;
	char					*s, *ptr, *val;
d304 1
a304 1
	int					 n, removeflag;
d306 1
a306 1
	s = xstrdup(overrides);
d308 5
a312 3
	termnext = s;
	while ((termstr = strsep(&termnext, ",")) != NULL) {
		entnext = termstr;
d314 2
a315 2
		entstr = strsep(&entnext, ":");
		if (entstr == NULL || entnext == NULL)
d317 24
a340 4
		if (fnmatch(entstr, term->name, 0) != 0)
			continue;
		while ((entstr = strsep(&entnext, ":")) != NULL) {
			if (*entstr == '\0')
d342 1
d344 16
a359 29
			val = NULL;
			removeflag = 0;
			if ((ptr = strchr(entstr, '=')) != NULL) {
				*ptr++ = '\0';
				val = xstrdup(ptr);
				if (strunvis(val, ptr) == -1) {
					free(val);
					val = xstrdup(ptr);
				}
			} else if (entstr[strlen(entstr) - 1] == '@@') {
				entstr[strlen(entstr) - 1] = '\0';
				removeflag = 1;
			} else
				val = xstrdup("");

			log_debug("%s override: %s %s",
			    term->name, entstr, removeflag ? "@@" : val);
			for (i = 0; i < tty_term_ncodes(); i++) {
				ent = &tty_term_codes[i];
				if (strcmp(entstr, ent->name) != 0)
					continue;
				code = &term->codes[i];

				if (removeflag) {
					code->type = TTYCODE_NONE;
					continue;
				}
				switch (ent->type) {
				case TTYCODE_NONE:
d361 7
a367 18
				case TTYCODE_STRING:
					if (code->type == TTYCODE_STRING)
						free(code->value.string);
					code->value.string = xstrdup(val);
					code->type = ent->type;
					break;
				case TTYCODE_NUMBER:
					n = strtonum(val, 0, INT_MAX, &errstr);
					if (errstr != NULL)
						break;
					code->value.number = n;
					code->type = ent->type;
					break;
				case TTYCODE_FLAG:
					code->value.flag = 1;
					code->type = ent->type;
					break;
				}
d369 1
d371 1
a371 2
			free(val);
		}
a372 1

d382 2
a383 1
	u_int					 i;
d457 8
a464 2
	s = options_get_string(global_options, "terminal-overrides");
	tty_term_override(term, s);
@


1.47
log
@Spacing nits.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.46 2016/10/10 21:29:23 nicm Exp $ */
d388 1
a388 2
	char					*s;
	const char				*acs;
@


1.46
log
@Loads more static, except for cmd-*.c and window-*.c.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.45 2016/01/29 11:13:56 nicm Exp $ */
d403 1
a403 1
	term->codes = xcalloc (tty_term_ncodes(), sizeof *term->codes);
@


1.45
log
@Support for RGB colour, using the extended cell mechanism to avoid
wasting unnecessary space. The 'Tc' flag must be set in the external
TERM entry (using terminal-overrides or a custom terminfo entry), if not
tmux will map to the closest of the 256 or 16 colour palettes.

Mostly from Suraj N Kurapati, based on a diff originally by someone else.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.44 2016/01/19 15:59:12 nicm Exp $ */
d30 2
a31 2
void	 tty_term_override(struct tty_term *, const char *);
char	*tty_term_strip(const char *);
d56 1
a56 1
const struct tty_term_code_entry tty_term_codes[] = {
d267 1
a267 1
char *
d296 1
a296 1
void
@


1.44
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.43 2015/12/11 16:37:21 nicm Exp $ */
d254 1
@


1.43
log
@Style nits and line wrapping of function declarations.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.42 2015/11/18 13:06:54 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2008 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.42
log
@Sync the entire xmalloc.[ch] with the other users, but with the addition
of xrealloc, xvasprintf, xvsnprintf.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.41 2015/10/27 15:58:43 nicm Exp $ */
d409 2
a410 2
			xasprintf(
			    cause, "can't use hardcopy terminal: %s", name);
d413 2
a414 2
			xasprintf(
			    cause, "missing or unsuitable terminal: %s", name);
@


1.41
log
@Move struct options into options.c.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.40 2015/09/24 07:02:18 nicm Exp $ */
d559 1
a559 1
		log_fatalx("not a string: %d", code);
d594 1
a594 1
		log_fatalx("not a number: %d", code);
d604 1
a604 1
		log_fatalx("not a flag: %d", code);
@


1.40
log
@Assign flag not number for flag types (we got away with it so far
because that are a union). From Filipe Brandenburger.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.39 2015/09/01 19:50:09 nicm Exp $ */
d460 1
a460 1
	s = options_get_string(&global_options, "terminal-overrides");
@


1.39
log
@Tweak some error messages/comments.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.38 2015/07/28 15:18:10 nicm Exp $ */
d454 1
a454 1
			code->value.number = n;
@


1.38
log
@Tidy up the way terminals are described and move some structs out of tmux.h.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.37 2015/04/19 21:05:27 nicm Exp $ */
a562 1
/* No vtparm. Fucking curses. */
@


1.37
log
@Support setting the default window and pane background colours (window
and active pane via window-style and window-active-style options, an
individual pane by a new select-pane -P flag). From J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.36 2015/01/20 08:18:04 nicm Exp $ */
d35 5
a39 202
const struct tty_term_code_entry tty_term_codes[NTTYCODE] = {
	{ TTYC_ACSC, TTYCODE_STRING, "acsc" },
	{ TTYC_AX, TTYCODE_FLAG, "AX" },
	{ TTYC_BCE, TTYCODE_FLAG, "bce" },
	{ TTYC_BEL, TTYCODE_STRING, "bel" },
	{ TTYC_BLINK, TTYCODE_STRING, "blink" },
	{ TTYC_BOLD, TTYCODE_STRING, "bold" },
	{ TTYC_CIVIS, TTYCODE_STRING, "civis" },
	{ TTYC_CLEAR, TTYCODE_STRING, "clear" },
	{ TTYC_CNORM, TTYCODE_STRING, "cnorm" },
	{ TTYC_COLORS, TTYCODE_NUMBER, "colors" },
	{ TTYC_CR, TTYCODE_STRING, "Cr" },
	{ TTYC_CS, TTYCODE_STRING, "Cs" },
	{ TTYC_CSR, TTYCODE_STRING, "csr" },
	{ TTYC_CUB, TTYCODE_STRING, "cub" },
	{ TTYC_CUB1, TTYCODE_STRING, "cub1" },
	{ TTYC_CUD, TTYCODE_STRING, "cud" },
	{ TTYC_CUD1, TTYCODE_STRING, "cud1" },
	{ TTYC_CUF, TTYCODE_STRING, "cuf" },
	{ TTYC_CUF1, TTYCODE_STRING, "cuf1" },
	{ TTYC_CUP, TTYCODE_STRING, "cup" },
	{ TTYC_CUU, TTYCODE_STRING, "cuu" },
	{ TTYC_CUU1, TTYCODE_STRING, "cuu1" },
	{ TTYC_CVVIS, TTYCODE_STRING, "cvvis" },
	{ TTYC_DCH, TTYCODE_STRING, "dch" },
	{ TTYC_DCH1, TTYCODE_STRING, "dch1" },
	{ TTYC_DIM, TTYCODE_STRING, "dim" },
	{ TTYC_DL, TTYCODE_STRING, "dl" },
	{ TTYC_DL1, TTYCODE_STRING, "dl1" },
	{ TTYC_E3, TTYCODE_STRING, "E3" },
	{ TTYC_ECH, TTYCODE_STRING, "ech" },
	{ TTYC_EL, TTYCODE_STRING, "el" },
	{ TTYC_EL1, TTYCODE_STRING, "el1" },
	{ TTYC_ENACS, TTYCODE_STRING, "enacs" },
	{ TTYC_FSL, TTYCODE_STRING, "fsl" },
	{ TTYC_HOME, TTYCODE_STRING, "home" },
	{ TTYC_HPA, TTYCODE_STRING, "hpa" },
	{ TTYC_ICH, TTYCODE_STRING, "ich" },
	{ TTYC_ICH1, TTYCODE_STRING, "ich1" },
	{ TTYC_IL, TTYCODE_STRING, "il" },
	{ TTYC_IL1, TTYCODE_STRING, "il1" },
	{ TTYC_INVIS, TTYCODE_STRING, "invis" },
	{ TTYC_IS1, TTYCODE_STRING, "is1" },
	{ TTYC_IS2, TTYCODE_STRING, "is2" },
	{ TTYC_IS3, TTYCODE_STRING, "is3" },
	{ TTYC_KCBT, TTYCODE_STRING, "kcbt" },
	{ TTYC_KCUB1, TTYCODE_STRING, "kcub1" },
	{ TTYC_KCUD1, TTYCODE_STRING, "kcud1" },
	{ TTYC_KCUF1, TTYCODE_STRING, "kcuf1" },
	{ TTYC_KCUU1, TTYCODE_STRING, "kcuu1" },
	{ TTYC_KDC2, TTYCODE_STRING, "kDC" },
	{ TTYC_KDC3, TTYCODE_STRING, "kDC3" },
	{ TTYC_KDC4, TTYCODE_STRING, "kDC4" },
	{ TTYC_KDC5, TTYCODE_STRING, "kDC5" },
	{ TTYC_KDC6, TTYCODE_STRING, "kDC6" },
	{ TTYC_KDC7, TTYCODE_STRING, "kDC7" },
	{ TTYC_KDCH1, TTYCODE_STRING, "kdch1" },
	{ TTYC_KDN2, TTYCODE_STRING, "kDN" },
	{ TTYC_KDN3, TTYCODE_STRING, "kDN3" },
	{ TTYC_KDN4, TTYCODE_STRING, "kDN4" },
	{ TTYC_KDN5, TTYCODE_STRING, "kDN5" },
	{ TTYC_KDN6, TTYCODE_STRING, "kDN6" },
	{ TTYC_KDN7, TTYCODE_STRING, "kDN7" },
	{ TTYC_KEND, TTYCODE_STRING, "kend" },
	{ TTYC_KEND2, TTYCODE_STRING, "kEND" },
	{ TTYC_KEND3, TTYCODE_STRING, "kEND3" },
	{ TTYC_KEND4, TTYCODE_STRING, "kEND4" },
	{ TTYC_KEND5, TTYCODE_STRING, "kEND5" },
	{ TTYC_KEND6, TTYCODE_STRING, "kEND6" },
	{ TTYC_KEND7, TTYCODE_STRING, "kEND7" },
	{ TTYC_KF1, TTYCODE_STRING, "kf1" },
	{ TTYC_KF10, TTYCODE_STRING, "kf10" },
	{ TTYC_KF11, TTYCODE_STRING, "kf11" },
	{ TTYC_KF12, TTYCODE_STRING, "kf12" },
	{ TTYC_KF13, TTYCODE_STRING, "kf13" },
	{ TTYC_KF14, TTYCODE_STRING, "kf14" },
	{ TTYC_KF15, TTYCODE_STRING, "kf15" },
	{ TTYC_KF16, TTYCODE_STRING, "kf16" },
	{ TTYC_KF17, TTYCODE_STRING, "kf17" },
	{ TTYC_KF18, TTYCODE_STRING, "kf18" },
	{ TTYC_KF19, TTYCODE_STRING, "kf19" },
	{ TTYC_KF2, TTYCODE_STRING, "kf2" },
	{ TTYC_KF20, TTYCODE_STRING, "kf20" },
	{ TTYC_KF21, TTYCODE_STRING, "kf21" },
	{ TTYC_KF22, TTYCODE_STRING, "kf22" },
	{ TTYC_KF23, TTYCODE_STRING, "kf23" },
	{ TTYC_KF24, TTYCODE_STRING, "kf24" },
	{ TTYC_KF25, TTYCODE_STRING, "kf25" },
	{ TTYC_KF26, TTYCODE_STRING, "kf26" },
	{ TTYC_KF27, TTYCODE_STRING, "kf27" },
	{ TTYC_KF28, TTYCODE_STRING, "kf28" },
	{ TTYC_KF29, TTYCODE_STRING, "kf29" },
	{ TTYC_KF3, TTYCODE_STRING, "kf3" },
	{ TTYC_KF30, TTYCODE_STRING, "kf30" },
	{ TTYC_KF31, TTYCODE_STRING, "kf31" },
	{ TTYC_KF32, TTYCODE_STRING, "kf32" },
	{ TTYC_KF33, TTYCODE_STRING, "kf33" },
	{ TTYC_KF34, TTYCODE_STRING, "kf34" },
	{ TTYC_KF35, TTYCODE_STRING, "kf35" },
	{ TTYC_KF36, TTYCODE_STRING, "kf36" },
	{ TTYC_KF37, TTYCODE_STRING, "kf37" },
	{ TTYC_KF38, TTYCODE_STRING, "kf38" },
	{ TTYC_KF39, TTYCODE_STRING, "kf39" },
	{ TTYC_KF4, TTYCODE_STRING, "kf4" },
	{ TTYC_KF40, TTYCODE_STRING, "kf40" },
	{ TTYC_KF41, TTYCODE_STRING, "kf41" },
	{ TTYC_KF42, TTYCODE_STRING, "kf42" },
	{ TTYC_KF43, TTYCODE_STRING, "kf43" },
	{ TTYC_KF44, TTYCODE_STRING, "kf44" },
	{ TTYC_KF45, TTYCODE_STRING, "kf45" },
	{ TTYC_KF46, TTYCODE_STRING, "kf46" },
	{ TTYC_KF47, TTYCODE_STRING, "kf47" },
	{ TTYC_KF48, TTYCODE_STRING, "kf48" },
	{ TTYC_KF49, TTYCODE_STRING, "kf49" },
	{ TTYC_KF5, TTYCODE_STRING, "kf5" },
	{ TTYC_KF50, TTYCODE_STRING, "kf50" },
	{ TTYC_KF51, TTYCODE_STRING, "kf51" },
	{ TTYC_KF52, TTYCODE_STRING, "kf52" },
	{ TTYC_KF53, TTYCODE_STRING, "kf53" },
	{ TTYC_KF54, TTYCODE_STRING, "kf54" },
	{ TTYC_KF55, TTYCODE_STRING, "kf55" },
	{ TTYC_KF56, TTYCODE_STRING, "kf56" },
	{ TTYC_KF57, TTYCODE_STRING, "kf57" },
	{ TTYC_KF58, TTYCODE_STRING, "kf58" },
	{ TTYC_KF59, TTYCODE_STRING, "kf59" },
	{ TTYC_KF6, TTYCODE_STRING, "kf6" },
	{ TTYC_KF60, TTYCODE_STRING, "kf60" },
	{ TTYC_KF61, TTYCODE_STRING, "kf61" },
	{ TTYC_KF62, TTYCODE_STRING, "kf62" },
	{ TTYC_KF63, TTYCODE_STRING, "kf63" },
	{ TTYC_KF7, TTYCODE_STRING, "kf7" },
	{ TTYC_KF8, TTYCODE_STRING, "kf8" },
	{ TTYC_KF9, TTYCODE_STRING, "kf9" },
	{ TTYC_KHOM2, TTYCODE_STRING, "kHOM" },
	{ TTYC_KHOM3, TTYCODE_STRING, "kHOM3" },
	{ TTYC_KHOM4, TTYCODE_STRING, "kHOM4" },
	{ TTYC_KHOM5, TTYCODE_STRING, "kHOM5" },
	{ TTYC_KHOM6, TTYCODE_STRING, "kHOM6" },
	{ TTYC_KHOM7, TTYCODE_STRING, "kHOM7" },
	{ TTYC_KHOME, TTYCODE_STRING, "khome" },
	{ TTYC_KIC2, TTYCODE_STRING, "kIC" },
	{ TTYC_KIC3, TTYCODE_STRING, "kIC3" },
	{ TTYC_KIC4, TTYCODE_STRING, "kIC4" },
	{ TTYC_KIC5, TTYCODE_STRING, "kIC5" },
	{ TTYC_KIC6, TTYCODE_STRING, "kIC6" },
	{ TTYC_KIC7, TTYCODE_STRING, "kIC7" },
	{ TTYC_KICH1, TTYCODE_STRING, "kich1" },
	{ TTYC_KLFT2, TTYCODE_STRING, "kLFT" },
	{ TTYC_KLFT3, TTYCODE_STRING, "kLFT3" },
	{ TTYC_KLFT4, TTYCODE_STRING, "kLFT4" },
	{ TTYC_KLFT5, TTYCODE_STRING, "kLFT5" },
	{ TTYC_KLFT6, TTYCODE_STRING, "kLFT6" },
	{ TTYC_KLFT7, TTYCODE_STRING, "kLFT7" },
	{ TTYC_KMOUS, TTYCODE_STRING, "kmous" },
	{ TTYC_KNP, TTYCODE_STRING, "knp" },
	{ TTYC_KNXT2, TTYCODE_STRING, "kNXT" },
	{ TTYC_KNXT3, TTYCODE_STRING, "kNXT3" },
	{ TTYC_KNXT4, TTYCODE_STRING, "kNXT4" },
	{ TTYC_KNXT5, TTYCODE_STRING, "kNXT5" },
	{ TTYC_KNXT6, TTYCODE_STRING, "kNXT6" },
	{ TTYC_KNXT7, TTYCODE_STRING, "kNXT7" },
	{ TTYC_KPP, TTYCODE_STRING, "kpp" },
	{ TTYC_KPRV2, TTYCODE_STRING, "kPRV" },
	{ TTYC_KPRV3, TTYCODE_STRING, "kPRV3" },
	{ TTYC_KPRV4, TTYCODE_STRING, "kPRV4" },
	{ TTYC_KPRV5, TTYCODE_STRING, "kPRV5" },
	{ TTYC_KPRV6, TTYCODE_STRING, "kPRV6" },
	{ TTYC_KPRV7, TTYCODE_STRING, "kPRV7" },
	{ TTYC_KRIT2, TTYCODE_STRING, "kRIT" },
	{ TTYC_KRIT3, TTYCODE_STRING, "kRIT3" },
	{ TTYC_KRIT4, TTYCODE_STRING, "kRIT4" },
	{ TTYC_KRIT5, TTYCODE_STRING, "kRIT5" },
	{ TTYC_KRIT6, TTYCODE_STRING, "kRIT6" },
	{ TTYC_KRIT7, TTYCODE_STRING, "kRIT7" },
	{ TTYC_KUP2, TTYCODE_STRING, "kUP" },
	{ TTYC_KUP3, TTYCODE_STRING, "kUP3" },
	{ TTYC_KUP4, TTYCODE_STRING, "kUP4" },
	{ TTYC_KUP5, TTYCODE_STRING, "kUP5" },
	{ TTYC_KUP6, TTYCODE_STRING, "kUP6" },
	{ TTYC_KUP7, TTYCODE_STRING, "kUP7" },
	{ TTYC_MS, TTYCODE_STRING, "Ms" },
	{ TTYC_OP, TTYCODE_STRING, "op" },
	{ TTYC_REV, TTYCODE_STRING, "rev" },
	{ TTYC_RI, TTYCODE_STRING, "ri" },
	{ TTYC_RMACS, TTYCODE_STRING, "rmacs" },
	{ TTYC_RMCUP, TTYCODE_STRING, "rmcup" },
	{ TTYC_RMKX, TTYCODE_STRING, "rmkx" },
	{ TTYC_SE, TTYCODE_STRING, "Se" },
	{ TTYC_SETAB, TTYCODE_STRING, "setab" },
	{ TTYC_SETAF, TTYCODE_STRING, "setaf" },
	{ TTYC_SGR0, TTYCODE_STRING, "sgr0" },
	{ TTYC_SITM, TTYCODE_STRING, "sitm" },
	{ TTYC_SMACS, TTYCODE_STRING, "smacs" },
	{ TTYC_SMCUP, TTYCODE_STRING, "smcup" },
	{ TTYC_SMKX, TTYCODE_STRING, "smkx" },
	{ TTYC_SMSO, TTYCODE_STRING, "smso" },
	{ TTYC_SMUL, TTYCODE_STRING, "smul" },
	{ TTYC_SS, TTYCODE_STRING, "Ss" },
	{ TTYC_TSL, TTYCODE_STRING, "tsl" },
	{ TTYC_VPA, TTYCODE_STRING, "vpa" },
	{ TTYC_XENL, TTYCODE_FLAG, "xenl" },
	{ TTYC_XT, TTYCODE_FLAG, "XT" },
d42 224
d339 1
a339 1
			for (i = 0; i < NTTYCODE; i++) {
d343 1
a343 1
				code = &term->codes[ent->code];
d402 1
a402 1
	memset(term->codes, 0, sizeof term->codes);
d427 1
a427 1
	for (i = 0; i < NTTYCODE; i++) {
d430 1
a430 1
		code = &term->codes[ent->code];
d537 1
a537 1
	for (i = 0; i < NTTYCODE; i++) {
d541 2
d607 32
@


1.36
log
@Support blinking cursor mode, both the xterm CSI ?12 h/l and (the
backwards) screen CSI 34 h/l. From Guanpeng Xu.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.35 2014/07/21 10:25:48 nicm Exp $ */
d38 1
@


1.35
log
@Drop explicit support for F13-F20 and change to match the xterm terminfo
entry:

        F13-F24 are S-F1 to S-F12
        F25-F36 are C-F1 to C-F12
        F37-F48 are C-S-F1 to C-S-F12
        F49-F60 are M-F1 to M-F12
and     F61-F63 are M-S-F1 to M-S-F3

This should be no difference for applications inside tmux, but means
that any key binding for F13 will need to be replaced by S-F1 and so on.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.34 2014/04/17 12:57:28 nicm Exp $ */
d57 1
@


1.34
log
@Wrap some long lines.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.33 2014/02/23 00:53:06 nicm Exp $ */
d116 9
d126 10
d137 10
d148 10
d159 4
@


1.33
log
@Change terminal-overrides to a server option (now that we have them), it
doesn't make much sense as a session option.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.32 2013/06/02 07:52:15 nicm Exp $ */
d509 2
a510 1
tty_term_ptr2(struct tty_term *term, enum tty_code_code code, const void *a, const void *b)
@


1.32
log
@The actual terminfo entries we ended up with for cursor changes are Cs,
Ce, Ss and Se (not Cc, Ce, Cs, Csr). So use and document these instead
of the ones we were using earlier.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.31 2013/03/27 11:17:12 nicm Exp $ */
d308 1
a308 1
tty_term_find(char *name, int fd, const char *overrides, char **cause)
d386 4
a389 1
	tty_term_override(term, overrides);
@


1.31
log
@Remove tmux's (already minimal) 88 colour support. Such terminals are
few and unnecessary.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.30 2013/01/15 23:18:55 nicm Exp $ */
a40 1
	{ TTYC_CC, TTYCODE_STRING, "Cc" },
d46 1
a46 1
	{ TTYC_CS1, TTYCODE_STRING, "Cs" },
a47 1
	{ TTYC_CSR1, TTYCODE_STRING, "Csr" },
d177 1
d187 1
@


1.30
log
@Implement ECH (erase character, CSI X). Reported by Christian Neukirchen.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.29 2012/07/10 11:53:01 nicm Exp $ */
d407 1
a407 1
	/* Figure out if we have 256 or 88 colours. */
a409 2
	if (tty_term_number(term, TTYC_COLORS) == 88)
		term->flags |= TERM_88COLOURS;
@


1.29
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.28 2012/05/22 09:36:12 nicm Exp $ */
d65 1
@


1.28
log
@If there are any terminals with insert mode but not ich1, they can go
through the slow path. Tidies code slightly.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.27 2011/12/01 23:47:08 nicm Exp $ */
d255 1
a255 1
					xfree(val);
d281 1
a281 1
						xfree(code->value.string);
d299 1
a299 2
			if (val != NULL)
				xfree(val);
d303 1
a303 1
	xfree(s);
d465 1
a465 1
			xfree(term->codes[i].value.string);
d467 2
a468 2
	xfree(term->name);
	xfree(term);
@


1.27
log
@Log terminal overrides.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.26 2011/10/23 10:16:14 nicm Exp $ */
a176 1
	{ TTYC_RMIR, TTYCODE_STRING, "rmir" },
a183 1
	{ TTYC_SMIR, TTYCODE_STRING, "smir" },
@


1.26
log
@Support for \e[3J to clear the history. Also send the corresponding
terminfo code (E3) before locking.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.25 2011/05/20 19:17:39 nicm Exp $ */
d266 2
@


1.25
log
@Support DECSCUSR sequence to set the cursor style with two new
terminfo(5) extensions, Cs and Csr. Written by Ailin Nemui.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.24 2011/05/20 19:03:58 nicm Exp $ */
d64 1
@


1.24
log
@Support xterm(1) cursor colour change sequences through terminfo(5) Cc
(set) and Cr (reset) extensions. Originally by Sean Estabrooks, tweaked
by me and Ailin Nemui.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.23 2011/05/18 20:24:29 nicm Exp $ */
d47 1
d49 1
@


1.23
log
@Support setting the xterm clipboard when copying from copy mode using
the xterm escape sequence for the purpose (if xterm is configured to
allow it).

Written by and much discussed Ailin Nemui, guidance on
xterm/termcap/terminfo from Thomas Dickey.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.22 2011/05/08 19:53:08 nicm Exp $ */
d41 1
d46 1
d496 6
@


1.22
log
@Use the tsl and fsl terminfo(5) capabilities to update terminal title
and automatically fill them in on terminals with the XT capability
(which means their title setting is xterm-compatible). From hsim at
gmx.li.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.21 2011/04/09 07:48:08 nicm Exp $ */
d166 1
d492 6
@


1.21
log
@If the terminal supports sitm for italics, use it instead of standout
(smso). From Tiago Resende.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.20 2011/01/26 00:11:47 nicm Exp $ */
d63 1
d176 1
d183 1
a183 1
	{ TTYC_SITM, TTYCODE_STRING, "sitm" },
d186 1
d258 1
a258 1
				continue;
d428 12
@


1.20
log
@Use LIST_* not SLIST_*.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.19 2011/01/01 03:32:28 nicm Exp $ */
d181 1
@


1.19
log
@Another table that should be const.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.18 2010/09/11 16:19:22 nicm Exp $ */
d33 1
a33 1
struct tty_terms tty_terms = SLIST_HEAD_INITIALIZER(tty_terms);
d308 1
a308 1
	SLIST_FOREACH(term, &tty_terms, entry) {
d321 1
a321 1
	SLIST_INSERT_HEAD(&tty_terms, term, entry);
d440 1
a440 1
	SLIST_REMOVE(&tty_terms, term, tty_term, entry);
@


1.18
log
@Use UTF-8 line drawing characters on UTF-8 terminals. Fixes some stupid
terminals (I'm looking at you, putty) which disable the vt100 ACS mode
switching sequences in UTF-8 mode.

Also on terminals without ACS at all, use ASCII equivalents where
obvious.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.17 2010/09/11 15:43:11 nicm Exp $ */
d35 1
a35 1
struct tty_term_code_entry tty_term_codes[NTTYCODE] = {
d217 8
a224 7
	struct tty_term_code_entry	*ent;
	struct tty_code			*code;
	char				*termnext, *termstr, *entnext, *entstr;
	char				*s, *ptr, *val;
	const char			*errstr;
	u_int				 i;
	int				 n, removeflag;
d300 7
a306 7
	struct tty_term			*term;
	struct tty_term_code_entry	*ent;
	struct tty_code			*code;
	u_int				 i;
	int		 		 n, error;
	char				*s;
	const char                      *acs;
@


1.17
log
@Ignore terminal overrides settings without a value.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.16 2009/12/03 22:50:10 nicm Exp $ */
d305 1
d319 1
a319 1
	memset(&term->codes, 0, sizeof term->codes);
d414 9
@


1.16
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.15 2009/11/26 14:46:08 nicm Exp $ */
d252 2
a253 1
			}
@


1.15
log
@Emulate il1, dl1, ich1 to run (albeit slowly) with vt100 feature set.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.14 2009/11/12 08:05:23 nicm Exp $ */
d230 1
a230 1
		
d242 1
a242 1
 			if ((ptr = strchr(entstr, '=')) != NULL) {
d324 2
a325 1
			xasprintf(cause, "can't use hardcopy terminal: %s", name);
d328 2
a329 1
			xasprintf(cause, "missing or unsuitable terminal: %s", name);
@


1.14
log
@Emulate the ri (reverse index) capability: this allows tmux to at least start
on Sun consoles (TERM=sun or sun-color), even if there appear to still be
problems on some boxes (my Blade 100 is fine but edd's Blade 1000 shows odd
screen corruption).
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.13 2009/10/26 16:00:51 nicm Exp $ */
a388 15
		goto error;
	}
	if (!tty_term_has(term, TTYC_IL1) && !tty_term_has(term, TTYC_IL)) {
		xasprintf(cause, "terminal does not support il1 or il");
		goto error;
	}
	if (!tty_term_has(term, TTYC_DL1) && !tty_term_has(term, TTYC_DL)) {
		xasprintf(cause, "terminal does not support dl1 or dl");
		goto error;
	}
	if (!tty_term_has(term, TTYC_ICH1) &&
	    !tty_term_has(term, TTYC_ICH) && (!tty_term_has(term, TTYC_SMIR) ||
	    !tty_term_has(term, TTYC_RMIR))) {
		xasprintf(cause,
		    "terminal does not support ich1 or ich or smir and rmir");
@


1.13
log
@Support the (mostly new) function key+modifier caps (kIC-kIC7). Most of these
will be caught (soon) by the xterm keys code in xterm itself but some other
descriptions such as rxvt define them as well.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.12 2009/10/25 21:11:21 nicm Exp $ */
a378 4
		goto error;
	}
	if (!tty_term_has(term, TTYC_RI)) {
		xasprintf(cause, "terminal does not support ri");
@


1.12
log
@Remove the -d flag to tmux and just use op/AX to detect default colours.

Irritatingly, although op can be used to tell if a terminal supports default
colours, it can't be used to set them because in some terminfo descriptions it
resets attributes as a side-effect (acts as sgr0) and in others it doesn't, so
it is not possible to determine reliably what the terminal state will be
afterwards. So if AX is missing and op is present, tmux just sends sgr0.

Anyone using -d for a terminal who finds they actually needed it can replace it
using terminal-overrides, but please let me know as it is probably an omission
from terminfo.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.11 2009/10/24 21:18:33 nicm Exp $ */
d36 1
a37 1
	{ TTYC_ACSC, TTYCODE_STRING, "acsc" },
d78 6
d85 6
d92 6
d118 6
d125 6
d132 6
d140 6
d147 18
@


1.11
log
@Bring a comment into line with reality.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.10 2009/10/12 13:01:18 nicm Exp $ */
a349 11

	/*
	 * Figure out if terminal support default colours. AX is a screen
	 * extension which indicates this. Also check if op (orig_pair) uses
	 * the default colours - if it does, this is a good indication the
	 * terminal supports them.
	 */
	if (tty_term_flag(term, TTYC_AX))
		term->flags |= TERM_HASDEFAULTS;
	if (strcmp(tty_term_string(term, TTYC_OP), "\033[39;49m") == 0)
		term->flags |= TERM_HASDEFAULTS;
@


1.10
log
@Use relative cursor movement instead of absolute when possible and when
supported by the terminal to reduce the size of the output data (generally
about 10-20%).
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.9 2009/08/23 11:40:05 nicm Exp $ */
d362 1
a362 5
	/*
	 * Try to figure out if we have 256 or 88 colours. The standard xterm
	 * definitions are broken (well, or the way they are parsed is: in any
	 * case they end up returning 8). So also do a hack.
	 */
@


1.9
log
@Check the return value of strunvis against -1 not NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.8 2009/08/21 12:29:59 nicm Exp $ */
d46 2
d50 2
d53 2
d63 2
d91 1
a92 1
	{ TTYC_KF2, TTYCODE_STRING, "kf2" },
d121 1
@


1.8
log
@Emulate dch/dch1 if missing by redrawing the entire line.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.7 2009/08/05 19:05:02 nicm Exp $ */
d176 1
a176 1
				if (strunvis(val, ptr) == NULL) {
@


1.7
log
@Clear the codes array earlier as tty_term_free could be called on error.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.6 2009/08/03 15:30:16 nicm Exp $ */
a338 4
		goto error;
	}
	if (!tty_term_has(term, TTYC_DCH1) && !tty_term_has(term, TTYC_DCH)) {
		xasprintf(cause, "terminal does not support dch1 or dch");
@


1.6
log
@Don't try to free old string values (and crash) when they are overridden unless
they were actually found in the source terminal description. Reported by jmc.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.5 2009/08/03 14:10:54 nicm Exp $ */
d248 1
a270 1
	memset(&term->codes, 0, sizeof term->codes);
@


1.5
log
@Add a terminal-overrides session option allowing individual terminfo(5) entries
to be overridden. The 88col/256col checks are now moved into the default
setting and out of the code.

Also remove a couple of old workarounds for xterm and rxvt which are no longer
necessary (tmux can emulate them if missing).
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.4 2009/08/02 20:47:35 matthieu Exp $ */
d199 2
a200 1
					xfree(code->value.string);
@


1.4
log
@Fix checking of setupterm(3) error codes. While there include the
name of the terminal type causing the error where relevant. ok nicm@@.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.3 2009/07/14 06:30:45 nicm Exp $ */
d22 2
d26 1
d30 1
a30 1
void	 tty_term_quirks(struct tty_term *);
d146 1
a146 1
tty_term_quirks(struct tty_term *term)
d148 71
a218 5
	if (strncmp(term->name, "rxvt", 4) == 0) {
		/* rxvt supports dch1 but some termcap files do not have it. */
		if (!tty_term_has(term, TTYC_DCH1)) {
			term->codes[TTYC_DCH1].type = TTYCODE_STRING;
			term->codes[TTYC_DCH1].value.string = xstrdup("\033[P");
d222 1
a222 7
	if (strncmp(term->name, "xterm", 5) == 0) {
		/* xterm supports ich1 but some termcaps omit it. */
		if (!tty_term_has(term, TTYC_ICH1)) {
			term->codes[TTYC_ICH1].type = TTYCODE_STRING;
			term->codes[TTYC_ICH1].value.string = xstrdup("\033[@@");
		}
	}
d226 1
a226 1
tty_term_find(char *name, int fd, char **cause)
d301 1
a301 1
	tty_term_quirks(term);
a362 2
	if (strstr(name, "256col") != NULL) /* XXX HACK */
		term->flags |= TERM_256COLOURS;
a363 2
		term->flags |= TERM_88COLOURS;
	if (strstr(name, "88col") != NULL) /* XXX HACK */
@


1.3
log
@Since tmux doesn't actually need ncurses, use -lcurses/curses.h
instead. Pointed out by millert a while ago.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.2 2009/06/05 03:13:16 ray Exp $ */
d189 3
d193 1
a193 4
			xasprintf(cause, "can't use hardcopy terminal");
			break;
		case 1:
			xasprintf(cause, "missing or unsuitable terminal");
d195 1
a195 1
		case 2:
@


1.2
log
@Remove trailing newlines, spaces, and tabs.

No binary change.
@
text
@d1 1
a1 1
/* $OpenBSD: tty-term.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d21 1
a21 1
#include <ncurses.h>
d186 1
a186 1
	/* Set up ncurses terminal. */
d240 1
a240 1
	/* Delete ncurses data. */
d361 1
a361 1
/* No vtparm. Fucking ncurses. */
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a392 1

@

