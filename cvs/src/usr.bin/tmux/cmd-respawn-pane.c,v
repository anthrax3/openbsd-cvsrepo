head	1.23;
access;
symbols
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.23
date	2017.03.09.17.02.38;	author nicm;	state Exp;
branches;
next	1.22;
commitid	QtFskEpSXY809LlK;

1.22
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.21;
commitid	pxm6osuE99zELpkU;

1.21
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.20;
commitid	TaZ3kOtGiWwKofka;

1.20
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.19;
commitid	P3qmSOx6KrDBsb0c;

1.19
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.18;
commitid	rE682EC14v4gpeFy;

1.18
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.17;
commitid	gsQkQsSyBCSmU9ax;

1.17
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.16;
commitid	uzMkp8Z4FE6WB6s6;

1.16
date	2015.10.31.08.13.58;	author nicm;	state Exp;
branches;
next	1.15;
commitid	B5GekkO0CdWpFMrz;

1.15
date	2015.10.28.09.51.55;	author nicm;	state Exp;
branches;
next	1.14;
commitid	eGVGKzVVYKHFvkn4;

1.14
date	2015.03.31.17.45.10;	author nicm;	state Exp;
branches;
next	1.13;
commitid	2uQloBaX92ri1PyE;

1.13
date	2014.10.20.22.34.31;	author nicm;	state Exp;
branches;
next	1.12;
commitid	JklWiQYmNCkeiNh8;

1.12
date	2014.05.13.08.08.32;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.13.02.59;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2013.10.10.12.29.53;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2013.10.10.12.00.22;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.17.22.34.12;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.15.23.19.51;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.09.01.37.00;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.04.13.35.37;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.05.11.19.03;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Move server_fill_environ into environ.c and move some other common code
into it.
@
text
@/* $OpenBSD: cmd-respawn-pane.c,v 1.22 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2008 Nicholas Marriott <nicholas.marriott@@gmail.com>
 * Copyright (c) 2011 Marcel P. Partap <mpartap@@gmx.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Respawn a pane (restart the command). Kill existing if -k given.
 */

static enum cmd_retval	cmd_respawn_pane_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_respawn_pane_entry = {
	.name = "respawn-pane",
	.alias = "respawnp",

	.args = { "kt:", 0, -1 },
	.usage = "[-k] " CMD_TARGET_PANE_USAGE " [command]",

	.tflag = CMD_PANE,

	.flags = 0,
	.exec = cmd_respawn_pane_exec
};

static enum cmd_retval
cmd_respawn_pane_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct winlink		*wl = item->state.tflag.wl;
	struct window		*w = wl->window;
	struct window_pane	*wp = item->state.tflag.wp;
	struct session		*s = item->state.tflag.s;
	struct environ		*env;
	const char		*path;
	char			*cause;
	u_int			 idx;
	struct environ_entry	*envent;

	if (!args_has(self->args, 'k') && wp->fd != -1) {
		if (window_pane_index(wp, &idx) != 0)
			fatalx("index not found");
		cmdq_error(item, "pane still active: %s:%d.%u",
		    s->name, wl->idx, idx);
		return (CMD_RETURN_ERROR);
	}

	window_pane_reset_mode(wp);
	screen_reinit(&wp->base);
	input_init(wp);

	path = NULL;
	if (item->client != NULL && item->client->session == NULL)
		envent = environ_find(item->client->environ, "PATH");
	else
		envent = environ_find(s->environ, "PATH");
	if (envent != NULL)
		path = envent->value;

	env = environ_for_session(s);
	if (window_pane_spawn(wp, args->argc, args->argv, path, NULL, NULL, env,
	    s->tio, &cause) != 0) {
		cmdq_error(item, "respawn pane failed: %s", cause);
		free(cause);
		environ_free(env);
		return (CMD_RETURN_ERROR);
	}
	environ_free(env);

	wp->flags |= PANE_REDRAW;
	server_status_window(w);

	return (CMD_RETURN_NORMAL);
}
@


1.22
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.21 2016/10/10 21:51:39 nicm Exp $ */
a67 5
	env = environ_create();
	environ_copy(global_environ, env);
	environ_copy(s->environ, env);
	server_fill_environ(s, env);

d80 1
d88 2
a92 1
	environ_free(env);
@


1.21
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.20 2016/01/19 15:59:12 nicm Exp $ */
d31 1
a31 1
static enum cmd_retval	 cmd_respawn_pane_exec(struct cmd *, struct cmd_q *);
d47 1
a47 1
cmd_respawn_pane_exec(struct cmd *self, struct cmd_q *cmdq)
d50 1
a50 1
	struct winlink		*wl = cmdq->state.tflag.wl;
d52 2
a53 2
	struct window_pane	*wp = cmdq->state.tflag.wp;
	struct session		*s = cmdq->state.tflag.s;
d63 1
a63 1
		cmdq_error(cmdq, "pane still active: %s:%d.%u",
d78 2
a79 2
	if (cmdq->client != NULL && cmdq->client->session == NULL)
		envent = environ_find(cmdq->client->environ, "PATH");
d87 1
a87 1
		cmdq_error(cmdq, "respawn pane failed: %s", cause);
@


1.20
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.19 2015/12/14 00:31:54 nicm Exp $ */
d31 1
a31 1
enum cmd_retval	 cmd_respawn_pane_exec(struct cmd *, struct cmd_q *);
d46 1
a46 1
enum cmd_retval
@


1.19
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.18 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2008 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.18
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.17 2015/12/13 14:32:38 nicm Exp $ */
d40 3
a42 1
	.flags = CMD_PANE_T,
@


1.17
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.16 2015/10/31 08:13:58 nicm Exp $ */
d34 8
a41 5
	"respawn-pane", "respawnp",
	"kt:", 0, -1,
	"[-k] " CMD_TARGET_PANE_USAGE " [command]",
	CMD_PANE_T,
	cmd_respawn_pane_exec
@


1.16
log
@Because pledge(2) does not allow us to pass directory file descriptors
around, we can't use file descriptors for the working directory because
we will be unable to pass it to a privileged process to tell it where to
read or write files or spawn children. So move tmux back to using
strings for the current working directory. We try to check it exists
with access() when it is set but ultimately fall back to ~ if it fails
at time of use (or / if that fails too).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.15 2015/10/28 09:51:55 nicm Exp $ */
d37 1
a37 1
	0,
d45 4
a48 4
	struct winlink		*wl;
	struct window		*w;
	struct window_pane	*wp;
	struct session		*s;
a53 4

	if ((wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp)) == NULL)
		return (CMD_RETURN_ERROR);
	w = wl->window;
@


1.15
log
@Like options, move the environ struct into environ.c.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.14 2015/03/31 17:45:10 nicm Exp $ */
d84 1
a84 1
	if (window_pane_spawn(wp, args->argc, args->argv, path, NULL, -1, env,
@


1.14
log
@Fix some format specifier nits, from Ben Boeckel.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.13 2014/10/20 22:34:31 nicm Exp $ */
d49 1
a49 1
	struct environ		 env;
d67 4
a70 4
	environ_init(&env);
	environ_copy(&global_environ, &env);
	environ_copy(&s->environ, &env);
	server_fill_environ(s, &env);
d78 1
a78 1
		envent = environ_find(&cmdq->client->environ, "PATH");
d80 1
a80 1
		envent = environ_find(&s->environ, "PATH");
d84 1
a84 1
	if (window_pane_spawn(wp, args->argc, args->argv, path, NULL, -1, &env,
d88 1
a88 1
		environ_free(&env);
d94 1
a94 1
	environ_free(&env);
@


1.13
log
@Missed a couple of cmd_entry struct members from previous.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.12 2014/05/13 08:08:32 nicm Exp $ */
d62 1
a62 1
		cmdq_error(cmdq, "pane still active: %s:%u.%u",
@


1.12
log
@If multiple arguments are given to new-session, new-window,
split-window, respawn-window or respawn-pane, pass them directly to
execvp() to help avoid quoting problems. One argument still goes to "sh
-c" like before. Requested by many over the years. Patch from J Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.11 2014/04/17 13:02:59 nicm Exp $ */
a37 1
	NULL,
@


1.11
log
@Set PATH explicitly, either from client or session
environment. Previously it came from the session environment. From J
Raynor.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.10 2013/10/10 12:29:53 nicm Exp $ */
d35 1
a35 1
	"kt:", 0, 1,
d51 1
a51 1
	const char		*cmd, *path;
a76 5
	if (args->argc != 0)
		cmd = args->argv[0];
	else
		cmd = NULL;

d85 2
a86 2
	if (window_pane_spawn(wp, cmd, path, NULL, -1, &env, s->tio,
	    &cause) != 0) {
@


1.10
log
@Pass -1 for cwd now not NULL.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.9 2013/10/10 12:00:22 nicm Exp $ */
d51 1
a51 1
	const char		*cmd;
d54 1
d81 11
a91 1
	if (window_pane_spawn(wp, cmd, NULL, -1, &env, s->tio, &cause) != 0) {
@


1.9
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.8 2013/03/24 09:54:10 nicm Exp $ */
d80 1
a80 1
	if (window_pane_spawn(wp, cmd, NULL, NULL, &env, s->tio, &cause) != 0) {
@


1.8
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.7 2012/07/11 07:10:15 nicm Exp $ */
a37 1
	NULL,
@


1.7
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.6 2012/07/10 11:53:01 nicm Exp $ */
d31 1
a31 1
enum cmd_retval	 cmd_respawn_pane_exec(struct cmd *, struct cmd_ctx *);
d44 1
a44 1
cmd_respawn_pane_exec(struct cmd *self, struct cmd_ctx *ctx)
d56 1
a56 1
	if ((wl = cmd_find_pane(ctx, args_get(args, 't'), &s, &wp)) == NULL)
d63 1
a63 1
		ctx->error(ctx, "pane still active: %s:%u.%u",
d82 1
a82 1
		ctx->error(ctx, "respawn pane failed: %s", cause);
@


1.6
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-respawn-pane.c,v 1.5 2012/03/17 22:34:12 nicm Exp $ */
d31 1
a31 1
int	cmd_respawn_pane_exec(struct cmd *, struct cmd_ctx *);
d43 1
a43 1
int
d57 1
a57 1
		return (-1);
d65 1
a65 1
		return (-1);
d85 1
a85 1
		return (-1);
d91 1
a91 1
	return (0);
@


1.5
log
@$Id$ -> $OpenBSD$.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d22 1
d83 1
a83 1
		xfree(cause);
@


1.4
log
@Make window_pane_index work the same as window_index, from Ben Boeckel.
@
text
@d1 1
a1 1
/* $Id: cmd-respawn-pane.c,v 1.3 2011/07/09 01:37:00 nicm Exp $ */
@


1.3
log
@Unused variable.
@
text
@d1 1
a1 1
/* $Id: cmd-respawn-pane.c,v 1.2 2011/07/04 13:35:37 nicm Exp $ */
d52 2
a53 1
	char		 	*cause;
d60 2
d63 1
a63 1
		    s->name, wl->idx, window_pane_index(w, wp));
@


1.2
log
@Use screen_reinit for respawn-pane to keep history and call input_init
for respawn-window to break out of waiting for DCS/OSC to finish.
@
text
@d1 1
a1 1
/* $Id: cmd-respawn-pane.c,v 1.1 2011/06/05 11:19:03 nicm Exp $ */
a48 1
	u_int			 hlimit;
@


1.1
log
@Add a respawn-pane command, from Marcel Partap.
@
text
@d1 1
a1 1
/* $Id$ */
d71 1
a71 4
	screen_free(&wp->base);
	hlimit = options_get_number(&s->options, "history-limit");
	screen_init(&wp->base, wp->sx, wp->sy, hlimit);
	wp->screen = &wp->base;
@

