head	1.28;
access;
symbols
	OPENBSD_6_1:1.28.0.2
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.28
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.27;
commitid	BLRh0qXo7OVTPhiT;

1.27
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.26;
commitid	pxm6osuE99zELpkU;

1.26
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.25;
commitid	S3IpyYTkmviA6lfM;

1.25
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.24;
commitid	TaZ3kOtGiWwKofka;

1.24
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.23;
commitid	P3qmSOx6KrDBsb0c;

1.23
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.22;
commitid	gsQkQsSyBCSmU9ax;

1.22
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.21;
commitid	ns7JfXpW9TsHrnT3;

1.21
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.20;
commitid	MRfGAYPLeVqV46rT;

1.20
date	2015.10.25.22.29.17;	author nicm;	state Exp;
branches;
next	1.19;
commitid	lyC76bFrgfVLq7ku;

1.19
date	2015.02.05.10.29.43;	author nicm;	state Exp;
branches;
next	1.18;
commitid	b1G1TVWY7l4KyoY6;

1.18
date	2014.10.20.23.35.28;	author nicm;	state Exp;
branches;
next	1.17;
commitid	RV1NOSXD1mUR8LDP;

1.17
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.16;
commitid	Gq8hgMoG3t1Wy1Zv;

1.16
date	2013.10.10.12.00.21;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.08.14.08.51.53;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.10.11.53.01;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2012.05.22.11.35.37;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.26.10.53.16;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.04.00.42.46;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.21.22.37.59;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.03.20.29.47;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.10.10.02.48;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@/* $OpenBSD: cmd-list-sessions.c,v 1.27 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2007 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "tmux.h"

/*
 * List all sessions.
 */

#define LIST_SESSIONS_TEMPLATE				\
	"#{session_name}: #{session_windows} windows "	\
	"(created #{t:session_created}) "		\
	"[#{session_width}x#{session_height}]"		\
	"#{?session_grouped, (group ,}"			\
	"#{session_group}#{?session_grouped,),}"	\
	"#{?session_attached, (attached),}"

static enum cmd_retval	cmd_list_sessions_exec(struct cmd *,
			    struct cmdq_item *);

const struct cmd_entry cmd_list_sessions_entry = {
	.name = "list-sessions",
	.alias = "ls",

	.args = { "F:", 0, 0 },
	.usage = "[-F format]",

	.flags = CMD_AFTERHOOK,
	.exec = cmd_list_sessions_exec
};

static enum cmd_retval
cmd_list_sessions_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct session		*s;
	u_int		 	 n;
	struct format_tree	*ft;
	const char		*template;
	char			*line;

	if ((template = args_get(args, 'F')) == NULL)
		template = LIST_SESSIONS_TEMPLATE;

	n = 0;
	RB_FOREACH(s, sessions, &sessions) {
		ft = format_create(item, FORMAT_NONE, 0);
		format_add(ft, "line", "%u", n);
		format_defaults(ft, NULL, s, NULL, NULL);

		line = format_expand(ft, template);
		cmdq_print(item, "%s", line);
		free(line);

		format_free(ft);
		n++;
	}

	return (CMD_RETURN_NORMAL);
}
@


1.27
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.26 2016/10/14 22:14:22 nicm Exp $ */
d68 1
a68 1
		ft = format_create(item, 0);
@


1.26
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.25 2016/10/10 21:51:39 nicm Exp $ */
d39 2
a40 1
static enum cmd_retval	 cmd_list_sessions_exec(struct cmd *, struct cmd_q *);
d54 1
a54 1
cmd_list_sessions_exec(struct cmd *self, struct cmd_q *cmdq)
d68 1
a68 1
		ft = format_create(cmdq, 0);
d73 1
a73 1
		cmdq_print(cmdq, "%s", line);
@


1.25
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.24 2016/01/19 15:59:12 nicm Exp $ */
d48 1
a48 1
	.flags = 0,
@


1.24
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.23 2015/12/13 21:53:57 nicm Exp $ */
d39 1
a39 1
enum cmd_retval	 cmd_list_sessions_exec(struct cmd *, struct cmd_q *);
d52 1
a52 1
enum cmd_retval
@


1.23
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.22 2015/12/11 12:27:36 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2007 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.22
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.21 2015/12/08 08:34:18 nicm Exp $ */
d42 8
a49 5
	"list-sessions", "ls",
	"F:", 0, 0,
	"[-F format]",
	0,
	cmd_list_sessions_exec
@


1.21
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.20 2015/10/25 22:29:17 nicm Exp $ */
d64 1
a64 1
		ft = format_create(0);
@


1.20
log
@Extend the modifiers allowed before formats: as well as the existing
#{=10:...}  length limit, add #{t:...} to convert a time_t format to a
string, #{b:...} for basename and #{d:...} for dirname. Remove all the
foo_string time formats as they can now be replaced by "t:", for example
#{window_activity_string} becomes #{t:window_activity}.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.19 2015/02/05 10:29:43 nicm Exp $ */
d64 1
a64 1
		ft = format_create();
@


1.19
log
@Wrap all the individual format_* calls in a single format_defaults
functions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.18 2014/10/20 23:35:28 nicm Exp $ */
d33 1
a33 1
	"(created #{session_created_string}) "		\
@


1.18
log
@Move template defines back into .c files.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.17 2014/10/20 22:29:25 nicm Exp $ */
d66 1
a66 1
		format_session(ft, s);
@


1.17
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.16 2013/10/10 12:00:21 nicm Exp $ */
d30 8
@


1.16
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.15 2013/03/24 09:54:10 nicm Exp $ */
a37 1
	NULL,
@


1.15
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.14 2012/08/14 08:51:53 nicm Exp $ */
a37 1
	NULL,
@


1.14
log
@Use a separate define for each default format template and strip clutter
from the choose-tree defaults.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.13 2012/07/11 07:10:15 nicm Exp $ */
d31 1
a31 1
enum cmd_retval	 cmd_list_sessions_exec(struct cmd *, struct cmd_ctx *);
d44 1
a44 1
cmd_list_sessions_exec(struct cmd *self, struct cmd_ctx *ctx)
d63 1
a63 1
		ctx->print(ctx, "%s", line);
@


1.13
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.12 2012/07/10 11:53:01 nicm Exp $ */
d54 1
a54 1
		template = DEFAULT_SESSION_TEMPLATE;
@


1.12
log
@xfree is not particularly helpful, remove it. From Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.11 2012/05/22 11:35:37 nicm Exp $ */
d31 1
a31 1
int	cmd_list_sessions_exec(struct cmd *, struct cmd_ctx *);
d43 1
a43 1
int
d70 1
a70 1
	return (0);
@


1.11
log
@Switch all of the various choose- and list- commands over to the format
infrastructure, from Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.10 2011/08/26 10:53:16 nicm Exp $ */
d21 1
d64 1
a64 1
		xfree(line);
@


1.10
log
@Add initial framework for more powerful formatting of command output and
use it for list-{panes,windows,sessions}. This allows more descriptive
replacements (such as #{session_name}) and conditionals.

Later this will be used for status_replace and list-keys and other
places.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.9 2011/01/04 00:42:46 nicm Exp $ */
d52 2
a53 8
	template = args_get(args, 'F');
	if (template == NULL) {
		template = "#{session_name}: #{session_windows} windows "
		    "(created #{session_created_string}) [#{session_width}x"
		    "#{session_height}]#{?session_grouped, (group ,}"
		    "#{session_group}#{?session_grouped,),}"
		    "#{?session_attached, (attached),}";
	}
@


1.9
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.8 2010/12/21 22:37:59 nicm Exp $ */
d34 2
a35 2
	"", 0, 0,
	"",
a41 1
/* ARGSUSED */
d43 1
a43 1
cmd_list_sessions_exec(unused struct cmd *self, struct cmd_ctx *ctx)
d45 1
d47 13
a59 4
	struct session_group	*sg;
	char			*tim, tmp[64];
	u_int			 idx;
	time_t			 t;
d61 1
d63 10
a72 15
		sg = session_group_find(s);
		if (sg == NULL)
			*tmp = '\0';
		else {
			idx = session_group_index(sg);
			xsnprintf(tmp, sizeof tmp, " (group %u)", idx);
		}

		t = s->creation_time.tv_sec;
		tim = ctime(&t);
		*strchr(tim, '\n') = '\0';

		ctx->print(ctx, "%s: %u windows (created %s) [%ux%u]%s%s",
		    s->name, winlink_count(&s->windows), tim, s->sx, s->sy,
		    tmp, s->flags & SESSION_UNATTACHED ? "" : " (attached)");
@


1.8
log
@Store sessions in an RB tree by name rather than a list, this is tidier
and allows them to easily be shown sorted in various lists
(list-sessions/choose-sessions).

Keep a session index which is used in a couple of places internally but
make it an ever-increasing number rather than filling in gaps with new
sessions.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.7 2009/11/26 21:37:13 nicm Exp $ */
d33 4
a36 2
	"list-sessions", "ls", "",
	0, "",
d39 1
a39 3
	cmd_list_sessions_exec,
	NULL,
	NULL
@


1.7
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.6 2009/11/13 19:53:29 nicm Exp $ */
d49 1
a49 1
	u_int			 i, idx;
d52 1
a52 5
	for (i = 0; i < ARRAY_LENGTH(&sessions); i++) {
		s = ARRAY_ITEM(&sessions, i);
		if (s == NULL)
			continue;

@


1.6
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.5 2009/11/03 20:29:47 nicm Exp $ */
d42 1
@


1.5
log
@Change session and client activity and creation time members to have more
meaningful names.

Also, remove the code to try and update the session activity time for the
command client when a command message is received as is pointless because it
des not have a session.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.4 2009/10/10 10:02:48 nicm Exp $ */
d34 1
a34 1
	0, 0,
@


1.4
log
@Add "grouped sessions" which have independent name, options, current window and
so on but where the linked windows are synchronized (ie creating, killing
windows and so on are mirrored between the sessions). A grouped session may be
created by passing -t to new-session.

Had this around for a while, tested by a couple of people.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.3 2009/07/26 12:58:44 nicm Exp $ */
d64 1
a64 1
		t = s->tv.tv_sec;
@


1.3
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.2 2009/07/13 23:11:35 nicm Exp $ */
d45 5
a49 4
	struct session	*s;
	char		*tim;
	u_int		 i;
	time_t		 t;
d56 8
d68 1
a68 1
		ctx->print(ctx, "%s: %u windows (created %s) [%ux%u]%s",
d70 1
a70 1
		    s->flags & SESSION_UNATTACHED ? "" : " (attached)");
@


1.2
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-list-sessions.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
a37 2
	NULL,
	NULL,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
	0,
@

