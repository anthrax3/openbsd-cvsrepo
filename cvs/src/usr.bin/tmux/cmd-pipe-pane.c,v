head	1.40;
access;
symbols
	OPENBSD_6_1_BASE:1.40
	OPENBSD_6_0:1.36.0.4
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.36.0.2
	OPENBSD_5_9_BASE:1.36
	OPENBSD_5_8:1.29.0.6
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.26.0.6
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.22.0.4
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.2
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.2
	OPENBSD_5_0:1.20.0.2
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.18.0.2
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9;
locks; strict;
comment	@ * @;


1.40
date	2017.02.03.11.57.27;	author nicm;	state Exp;
branches;
next	1.39;
commitid	BLRh0qXo7OVTPhiT;

1.39
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.38;
commitid	pxm6osuE99zELpkU;

1.38
date	2016.10.14.22.14.22;	author nicm;	state Exp;
branches;
next	1.37;
commitid	S3IpyYTkmviA6lfM;

1.37
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.36;
commitid	TaZ3kOtGiWwKofka;

1.36
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.35;
commitid	P3qmSOx6KrDBsb0c;

1.35
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.34;
commitid	rE682EC14v4gpeFy;

1.34
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.33;
commitid	gsQkQsSyBCSmU9ax;

1.33
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.32;
commitid	uzMkp8Z4FE6WB6s6;

1.32
date	2015.12.11.12.27.36;	author nicm;	state Exp;
branches;
next	1.31;
commitid	ns7JfXpW9TsHrnT3;

1.31
date	2015.12.08.08.34.18;	author nicm;	state Exp;
branches;
next	1.30;
commitid	MRfGAYPLeVqV46rT;

1.30
date	2015.11.18.14.27.44;	author nicm;	state Exp;
branches;
next	1.29;
commitid	RjsAPRkWwvS79w40;

1.29
date	2015.02.06.17.11.39;	author nicm;	state Exp;
branches;
next	1.28;
commitid	524Kssnx5Ady6qyZ;

1.28
date	2015.02.01.23.43.23;	author nicm;	state Exp;
branches;
next	1.27;
commitid	dy3XCJyolFNoNYim;

1.27
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.26;
commitid	Gq8hgMoG3t1Wy1Zv;

1.26
date	2013.10.10.12.00.21;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.24.09.27.20;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2013.03.22.10.31.22;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2011.10.27.22.41.03;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2011.07.30.17.52.32;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2011.03.29.19.30.16;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2011.01.08.01.52.36;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.16.08.31.55;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2010.08.19.18.29.01;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.14.23.06.13;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.05.16.34.30;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2010.05.04.17.28.16;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2010.05.04.08.48.06;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2010.05.03.16.06.32;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.26.21.37.13;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.13.18.59.14;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.04.22.43.11;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.04.22.02.38;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.04.20.50.11;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.21.18.12.31;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.11.10.04.27;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.40
log
@Add a window or pane id "tag" to each format tree and use it to separate
jobs, this means that if the same job is used for different windows or
panes (for example in pane-border-format), it will be run separately for
each pane.
@
text
@/* $OpenBSD: cmd-pipe-pane.c,v 1.39 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <errno.h>
#include <fcntl.h>
#include <paths.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "tmux.h"

/*
 * Open pipe to redirect pane output. If already open, close first.
 */

static enum cmd_retval	cmd_pipe_pane_exec(struct cmd *, struct cmdq_item *);

static void cmd_pipe_pane_error_callback(struct bufferevent *, short, void *);

const struct cmd_entry cmd_pipe_pane_entry = {
	.name = "pipe-pane",
	.alias = "pipep",

	.args = { "ot:", 0, 1 },
	.usage = "[-o] " CMD_TARGET_PANE_USAGE " [command]",

	.tflag = CMD_PANE,

	.flags = CMD_AFTERHOOK,
	.exec = cmd_pipe_pane_exec
};

static enum cmd_retval
cmd_pipe_pane_exec(struct cmd *self, struct cmdq_item *item)
{
	struct args		*args = self->args;
	struct client		*c = item->state.c;
	struct window_pane	*wp = item->state.tflag.wp;
	struct session		*s = item->state.tflag.s;
	struct winlink		*wl = item->state.tflag.wl;
	char			*cmd;
	int			 old_fd, pipe_fd[2], null_fd;
	struct format_tree	*ft;

	/* Destroy the old pipe. */
	old_fd = wp->pipe_fd;
	if (wp->pipe_fd != -1) {
		bufferevent_free(wp->pipe_event);
		close(wp->pipe_fd);
		wp->pipe_fd = -1;
	}

	/* If no pipe command, that is enough. */
	if (args->argc == 0 || *args->argv[0] == '\0')
		return (CMD_RETURN_NORMAL);

	/*
	 * With -o, only open the new pipe if there was no previous one. This
	 * allows a pipe to be toggled with a single key, for example:
	 *
	 *	bind ^p pipep -o 'cat >>~/output'
	 */
	if (args_has(self->args, 'o') && old_fd != -1)
		return (CMD_RETURN_NORMAL);

	/* Open the new pipe. */
	if (socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC, pipe_fd) != 0) {
		cmdq_error(item, "socketpair error: %s", strerror(errno));
		return (CMD_RETURN_ERROR);
	}

	/* Expand the command. */
	ft = format_create(item, FORMAT_NONE, 0);
	format_defaults(ft, c, s, wl, wp);
	cmd = format_expand_time(ft, args->argv[0], time(NULL));
	format_free(ft);

	/* Fork the child. */
	switch (fork()) {
	case -1:
		cmdq_error(item, "fork error: %s", strerror(errno));

		free(cmd);
		return (CMD_RETURN_ERROR);
	case 0:
		/* Child process. */
		close(pipe_fd[0]);
		clear_signals(1);

		if (dup2(pipe_fd[1], STDIN_FILENO) == -1)
			_exit(1);
		if (pipe_fd[1] != STDIN_FILENO)
			close(pipe_fd[1]);

		null_fd = open(_PATH_DEVNULL, O_WRONLY, 0);
		if (dup2(null_fd, STDOUT_FILENO) == -1)
			_exit(1);
		if (dup2(null_fd, STDERR_FILENO) == -1)
			_exit(1);
		if (null_fd != STDOUT_FILENO && null_fd != STDERR_FILENO)
			close(null_fd);

		closefrom(STDERR_FILENO + 1);

		execl(_PATH_BSHELL, "sh", "-c", cmd, (char *) NULL);
		_exit(1);
	default:
		/* Parent process. */
		close(pipe_fd[1]);

		wp->pipe_fd = pipe_fd[0];
		wp->pipe_off = EVBUFFER_LENGTH(wp->event->input);

		wp->pipe_event = bufferevent_new(wp->pipe_fd,
		    NULL, NULL, cmd_pipe_pane_error_callback, wp);
		bufferevent_enable(wp->pipe_event, EV_WRITE);

		setblocking(wp->pipe_fd, 0);

		free(cmd);
		return (CMD_RETURN_NORMAL);
	}
}

static void
cmd_pipe_pane_error_callback(__unused struct bufferevent *bufev,
    __unused short what, void *data)
{
	struct window_pane	*wp = data;

	bufferevent_free(wp->pipe_event);
	close(wp->pipe_fd);
	wp->pipe_fd = -1;
}
@


1.39
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.38 2016/10/14 22:14:22 nicm Exp $ */
d93 1
a93 1
	ft = format_create(item, 0);
@


1.38
log
@Add CMD_AFTERHOOK flag to the easy commands that don't need any special handling.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.37 2016/10/10 21:51:39 nicm Exp $ */
d36 1
a36 1
static enum cmd_retval	 cmd_pipe_pane_exec(struct cmd *, struct cmd_q *);
d54 1
a54 1
cmd_pipe_pane_exec(struct cmd *self, struct cmd_q *cmdq)
d57 4
a60 4
	struct client		*c = cmdq->state.c;
	struct window_pane	*wp = cmdq->state.tflag.wp;
	struct session		*s = cmdq->state.tflag.s;
	struct winlink		*wl = cmdq->state.tflag.wl;
d88 1
a88 1
		cmdq_error(cmdq, "socketpair error: %s", strerror(errno));
d93 1
a93 1
	ft = format_create(cmdq, 0);
d101 1
a101 1
		cmdq_error(cmdq, "fork error: %s", strerror(errno));
@


1.37
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.36 2016/01/19 15:59:12 nicm Exp $ */
d49 1
a49 1
	.flags = 0,
@


1.36
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.35 2015/12/14 00:31:54 nicm Exp $ */
d36 1
a36 1
enum cmd_retval	 cmd_pipe_pane_exec(struct cmd *, struct cmd_q *);
d38 1
a38 1
void	cmd_pipe_pane_error_callback(struct bufferevent *, short, void *);
d53 1
a53 1
enum cmd_retval
d145 1
a145 1
void
@


1.35
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.34 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.34
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.33 2015/12/13 14:32:38 nicm Exp $ */
d47 3
a49 1
	.flags = CMD_PANE_T,
@


1.33
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.32 2015/12/11 12:27:36 nicm Exp $ */
d41 8
a48 5
	"pipe-pane", "pipep",
	"ot:", 0, 1,
	"[-o] " CMD_TARGET_PANE_USAGE " [command]",
	CMD_PANE_T,
	cmd_pipe_pane_exec
@


1.32
log
@Add cmdq as an argument to format_create and add a format for the
command name (will also be used for more later).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.31 2015/12/08 08:34:18 nicm Exp $ */
d44 1
a44 1
	0,
d52 4
a55 4
	struct client		*c;
	struct session		*s;
	struct winlink		*wl;
	struct window_pane	*wp;
a58 4

	if ((wl = cmd_find_pane(cmdq, args_get(args, 't'), &s, &wp)) == NULL)
		return (CMD_RETURN_ERROR);
	c = cmd_find_client(cmdq, NULL, 1);
@


1.31
log
@Remove format_create_flags and just pass flags to format_create.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.30 2015/11/18 14:27:44 nicm Exp $ */
d92 1
a92 1
	ft = format_create(0);
@


1.30
log
@Use __unused rather than rolling our own.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.29 2015/02/06 17:11:39 nicm Exp $ */
d92 1
a92 1
	ft = format_create();
@


1.29
log
@Add format_expand_time and use it instead of status_replace where
command execution is not needed.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.28 2015/02/01 23:43:23 nicm Exp $ */
d145 2
a146 2
cmd_pipe_pane_error_callback(
    unused struct bufferevent *bufev, unused short what, void *data)
@


1.28
log
@Remove two unused arguments from status_replace.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.27 2014/10/20 22:29:25 nicm Exp $ */
d25 1
d53 2
d56 1
a56 1
	char			*command;
d58 1
d60 1
a60 1
	if (cmd_find_pane(cmdq, args_get(args, 't'), NULL, &wp) == NULL)
d91 6
d101 2
d124 1
a124 2
		command = status_replace(c, NULL, args->argv[0], time(NULL), 0);
		execl(_PATH_BSHELL, "sh", "-c", command, (char *) NULL);
d138 2
@


1.27
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.26 2013/10/10 12:00:21 nicm Exp $ */
d112 1
a112 2
		command = status_replace(
		    c, NULL, NULL, NULL, args->argv[0], time(NULL), 0);
@


1.26
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.25 2013/03/24 09:54:10 nicm Exp $ */
a43 1
	NULL,
@


1.25
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.24 2013/03/24 09:27:20 nicm Exp $ */
a43 1
	NULL,
@


1.24
log
@Fix error reporting for client commands by adding a flag to
cmd_find_client to tell it whether or not to show errors, sometimes it's
needed and sometimes not.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.23 2013/03/22 10:31:22 nicm Exp $ */
d35 1
a35 1
enum cmd_retval	 cmd_pipe_pane_exec(struct cmd *, struct cmd_ctx *);
d50 1
a50 1
cmd_pipe_pane_exec(struct cmd *self, struct cmd_ctx *ctx)
d58 1
a58 1
	if (cmd_find_pane(ctx, args_get(args, 't'), NULL, &wp) == NULL)
d60 1
a60 1
	c = cmd_find_client(ctx, NULL, 1);
d85 1
a85 1
		ctx->error(ctx, "socketpair error: %s", strerror(errno));
d92 1
a92 1
		ctx->error(ctx, "fork error: %s", strerror(errno));
@


1.23
log
@No more lint means no more ARGSUSED.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.22 2012/07/11 07:10:15 nicm Exp $ */
d60 1
a60 1
	c = cmd_find_client(ctx, NULL);
@


1.22
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.21 2011/10/27 22:41:03 nicm Exp $ */
a133 1
/* ARGSUSED */
@


1.21
log
@Missing -o on usage for pipe-pane, from Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.20 2011/07/30 17:52:32 nicm Exp $ */
d35 1
a35 1
int	cmd_pipe_pane_exec(struct cmd *, struct cmd_ctx *);
d49 1
a49 1
int
d59 1
a59 1
		return (-1);
d72 1
a72 1
		return (0);
d81 1
a81 1
		return (0);
d86 1
a86 1
		return (-1);
d93 1
a93 1
		return (-1);
d130 1
a130 1
		return (0);
@


1.20
log
@Do not require a client here, or pipe-pane will not work from the
command line.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.19 2011/03/29 19:30:16 nicm Exp $ */
d42 1
a42 1
	CMD_TARGET_PANE_USAGE "[-o] [command]",
@


1.19
log
@Change -t on display-message to be target-pane for the #[A-Z]
replacements and add -c as target-client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.18 2011/01/08 01:52:36 nicm Exp $ */
a57 3
	if ((c = cmd_find_client(ctx, NULL)) == NULL)
		return (-1);

d60 1
@


1.18
log
@Move all calls to fcntl(...O_NONBLOCK) into a function and clear the
flag on the stdio file descriptors before closing them (fixes things
like "tmux ls && cat").
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.17 2011/01/04 00:42:47 nicm Exp $ */
d116 2
a117 1
		command = status_replace(c, NULL, args->argv[0], time(NULL), 0);
@


1.17
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.16 2010/10/16 08:31:55 nicm Exp $ */
d56 1
a56 1
	int			 old_fd, pipe_fd[2], null_fd, mode;
d130 1
a130 4
		if ((mode = fcntl(wp->pipe_fd, F_GETFL)) == -1)
			fatal("fcntl failed");
		if (fcntl(wp->pipe_fd, F_SETFL, mode|O_NONBLOCK) == -1)
			fatal("fcntl failed");
@


1.16
log
@Trying to set FD_CLOEXEC on every fd is a lost cause, just use
closefrom() before exec.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.15 2010/08/19 18:29:01 nicm Exp $ */
d41 1
d43 4
a46 6
	CMD_ARG01, "o",
	cmd_target_init,
	cmd_target_parse,
	cmd_pipe_pane_exec,
	cmd_target_free,
	cmd_target_print
d52 1
a52 1
	struct cmd_target_data	*data = self->data;
d61 1
a61 1
	if (cmd_find_pane(ctx, data->target, NULL, &wp) == NULL)
d73 1
a73 1
	if (data->arg == NULL || *data->arg == '\0')
d82 1
a82 1
	if (cmd_check_flag(data->chflags, 'o') && old_fd != -1)
d116 1
a116 1
		command = status_replace(c, NULL, data->arg, time(NULL), 0);
@


1.15
log
@Do not call event_del() for signals after fork(), just use sigaction()
directly instead - calling libevent functions after fork() w/o
event_reinit() is a bad idea, even if in this case it was harmless.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.14 2010/06/14 23:06:13 nicm Exp $ */
d115 2
a133 2
			fatal("fcntl failed");
		if (fcntl(wp->pipe_fd, F_SETFD, FD_CLOEXEC) == -1)
@


1.14
log
@Last change erroneously used the target argument for looking up the
client which caused pipe-pane to fail when used from the command
line. Instead pass NULL which should use the current client.

Spotted by Tiago Cunha.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.13 2010/06/05 16:34:30 nicm Exp $ */
d100 1
a100 1
		clear_signals();
@


1.13
log
@Support the status_replace # replacement sequences in the pipe-pane
command, thanks to Andrea Barisani.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.12 2010/05/04 17:28:16 nicm Exp $ */
d59 1
a59 1
	if ((c = cmd_find_client(ctx, data->target)) == NULL)
@


1.12
log
@Put this back in with the initialisation in the right order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.11 2010/05/04 08:48:06 nicm Exp $ */
d26 1
d54 1
d56 1
d59 3
d115 2
a116 1
		execl(_PATH_BSHELL, "sh", "-c", data->arg, (char *) NULL);
@


1.11
log
@Revert last change, it appears to be broken somehow.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.9 2009/12/03 22:50:10 nicm Exp $ */
d94 1
a94 1
		server_signal_clear();
@


1.10
log
@Make signal handler setup/teardown two common functions instead of six,
and reset SIGCHLD after fork to fix problems with some shells. From
Romain Francois.
@
text
@d94 1
a94 1
		clear_signals();
@


1.9
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.8 2009/11/26 21:37:13 nicm Exp $ */
d94 1
a94 1
		server_signal_clear();
@


1.8
log
@Remove a couple of unused arguments where possible, and add /* ARGSUSED */ to
the rest to reduce lint output.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.7 2009/11/13 19:53:29 nicm Exp $ */
d90 1
a90 1
		return (-1);		
d117 1
a117 1
		
d121 1
a121 1
		
d127 1
a127 1
			fatal("fcntl failed");	
@


1.7
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.6 2009/11/13 18:59:14 nicm Exp $ */
d132 1
@


1.6
log
@Unreachable statement, found by lint.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.5 2009/11/04 22:43:11 nicm Exp $ */
d41 1
a41 1
	CMD_ARG01, CMD_CHFLAG('o'),
d77 1
a77 1
	if (data->chflags & CMD_CHFLAG('o') && old_fd != -1)
@


1.5
log
@Convert the window pane (pty master side) fd over to use a bufferevent.

The evbuffer API is very similar to the existing tmux buffer API so this was
remarkably painless. Not many possible ways to do it, I suppose.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.4 2009/11/04 22:02:38 nicm Exp $ */
a129 2

	return (0);
@


1.4
log
@Switch window pane pipe redirect fd over to a bufferevent.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.3 2009/11/04 20:50:11 nicm Exp $ */
d116 1
a116 1
		wp->pipe_off = BUFFER_USED(wp->in);
@


1.3
log
@Initial changes to move tmux to libevent.

This moves the client-side loops are pretty much fully over to event-based only
(tmux.c and client.c) but server-side (server.c and friends) treats libevent as
a sort of clever poll, waking up after every event to run various things.

Moving the server stuff over to bufferevents and timers and so on will come
later.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.2 2009/10/21 18:12:31 nicm Exp $ */
d20 1
d36 2
d62 1
a62 1
		buffer_destroy(wp->pipe_buf);
d81 2
a82 2
	if (pipe(pipe_fd) != 0) {
		ctx->error(ctx, "pipe error: %s", strerror(errno));
a115 1
		wp->pipe_buf = buffer_create(BUFSIZ);
d118 4
d132 11
@


1.2
log
@Nuke dead store.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-pipe-pane.c,v 1.1 2009/10/11 10:04:27 nicm Exp $ */
d91 1
a91 1
		sigreset();
@


1.1
log
@Add a pipe-pane command to allow a pane to be piped to a shell command, for
example:

	pipe-pane 'cat >~/out'

No arguments stops outputing and closes the pipe; the -o flag toggles a pipe
and on and off (useful for key bindings).

Suggested by espie@@.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-select-pane.c,v 1.7 2009/07/30 13:45:56 nicm Exp $ */
a49 1
	struct winlink		*wl;
d53 1
a53 1
	if ((wl = cmd_find_pane(ctx, data->target, NULL, &wp)) == NULL)
@

