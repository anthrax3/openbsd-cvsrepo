head	1.31;
access;
symbols
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.26.0.2
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.31
date	2017.04.22.10.22.39;	author nicm;	state Exp;
branches;
next	1.30;
commitid	RXMp6wwG5a5Y82bo;

1.30
date	2016.10.16.19.04.05;	author nicm;	state Exp;
branches;
next	1.29;
commitid	pxm6osuE99zELpkU;

1.29
date	2016.10.13.22.48.51;	author nicm;	state Exp;
branches;
next	1.28;
commitid	1GCC1n59gejVg5Ih;

1.28
date	2016.10.13.10.01.49;	author nicm;	state Exp;
branches;
next	1.27;
commitid	AFoah05fh4b2e28V;

1.27
date	2016.10.10.21.51.39;	author nicm;	state Exp;
branches;
next	1.26;
commitid	TaZ3kOtGiWwKofka;

1.26
date	2016.03.01.12.02.54;	author nicm;	state Exp;
branches;
next	1.25;
commitid	DNRtqSE6EwQYHJix;

1.25
date	2016.01.19.15.59.12;	author nicm;	state Exp;
branches;
next	1.24;
commitid	P3qmSOx6KrDBsb0c;

1.24
date	2015.12.14.00.31.54;	author nicm;	state Exp;
branches;
next	1.23;
commitid	rE682EC14v4gpeFy;

1.23
date	2015.12.13.21.53.57;	author nicm;	state Exp;
branches;
next	1.22;
commitid	gsQkQsSyBCSmU9ax;

1.22
date	2015.12.13.14.32.38;	author nicm;	state Exp;
branches;
next	1.21;
commitid	uzMkp8Z4FE6WB6s6;

1.21
date	2015.08.30.15.43.40;	author nicm;	state Exp;
branches;
next	1.20;
commitid	uXV0qaBWQpBShfys;

1.20
date	2015.06.04.11.43.51;	author nicm;	state Exp;
branches;
next	1.19;
commitid	rAvOUA4CI6VK3gQ6;

1.19
date	2014.10.20.22.29.25;	author nicm;	state Exp;
branches;
next	1.18;
commitid	Gq8hgMoG3t1Wy1Zv;

1.18
date	2013.10.10.12.00.24;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.28.15.08.12;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.24.09.57.59;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.24.09.54.10;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.11.07.10.15;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.08.21.12.52;	author nicm;	state Exp;
branches;
next	1.12;

1.12
date	2011.01.04.00.42.47;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.03.22.50.10;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.13.19.53.29;	author nicm;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.30.17.29.12;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.30.13.45.56;	author nicm;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.26.12.58.44;	author nicm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.20.07.13.31;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.19.13.21.40;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.14.07.23.36;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.13.23.11.35;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.03.07.51.24;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.22.58.49;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Get rid of the extra layer of flags and cmd_prepare() and just store the
CMD_FIND_* flags in the cmd_entry and call it for the command. Commands
with special requirements call it themselves and update the target for
hooks to use.
@
text
@/* $OpenBSD: cmd-swap-pane.c,v 1.30 2016/10/16 19:04:05 nicm Exp $ */

/*
 * Copyright (c) 2009 Nicholas Marriott <nicholas.marriott@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "tmux.h"

/*
 * Swap two panes.
 */

static enum cmd_retval	cmd_swap_pane_exec(struct cmd *, struct cmdq_item *);

const struct cmd_entry cmd_swap_pane_entry = {
	.name = "swap-pane",
	.alias = "swapp",

	.args = { "dDs:t:U", 0, 0 },
	.usage = "[-dDU] " CMD_SRCDST_PANE_USAGE,

	.source = { 's', CMD_FIND_PANE, CMD_FIND_DEFAULT_MARKED },
	.target = { 't', CMD_FIND_PANE, 0 },

	.flags = 0,
	.exec = cmd_swap_pane_exec
};

static enum cmd_retval
cmd_swap_pane_exec(struct cmd *self, struct cmdq_item *item)
{
	struct window		*src_w, *dst_w;
	struct window_pane	*tmp_wp, *src_wp, *dst_wp;
	struct layout_cell	*src_lc, *dst_lc;
	u_int			 sx, sy, xoff, yoff;

	dst_w = item->target.wl->window;
	dst_wp = item->target.wp;
	src_w = item->source.wl->window;
	src_wp = item->source.wp;
	server_unzoom_window(dst_w);

	if (args_has(self->args, 'D')) {
		src_w = dst_w;
		src_wp = TAILQ_NEXT(dst_wp, entry);
		if (src_wp == NULL)
			src_wp = TAILQ_FIRST(&dst_w->panes);
	} else if (args_has(self->args, 'U')) {
		src_w = dst_w;
		src_wp = TAILQ_PREV(dst_wp, window_panes, entry);
		if (src_wp == NULL)
			src_wp = TAILQ_LAST(&dst_w->panes, window_panes);
	}
	server_unzoom_window(src_w);

	if (src_wp == dst_wp)
		return (CMD_RETURN_NORMAL);

	tmp_wp = TAILQ_PREV(dst_wp, window_panes, entry);
	TAILQ_REMOVE(&dst_w->panes, dst_wp, entry);
	TAILQ_REPLACE(&src_w->panes, src_wp, dst_wp, entry);
	if (tmp_wp == src_wp)
		tmp_wp = dst_wp;
	if (tmp_wp == NULL)
		TAILQ_INSERT_HEAD(&dst_w->panes, src_wp, entry);
	else
		TAILQ_INSERT_AFTER(&dst_w->panes, tmp_wp, src_wp, entry);

	src_lc = src_wp->layout_cell;
	dst_lc = dst_wp->layout_cell;
	src_lc->wp = dst_wp;
	dst_wp->layout_cell = src_lc;
	dst_lc->wp = src_wp;
	src_wp->layout_cell = dst_lc;

	src_wp->window = dst_w;
	dst_wp->window = src_w;

	sx = src_wp->sx; sy = src_wp->sy;
	xoff = src_wp->xoff; yoff = src_wp->yoff;
	src_wp->xoff = dst_wp->xoff; src_wp->yoff = dst_wp->yoff;
	window_pane_resize(src_wp, dst_wp->sx, dst_wp->sy);
	dst_wp->xoff = xoff; dst_wp->yoff = yoff;
	window_pane_resize(dst_wp, sx, sy);

	if (!args_has(self->args, 'd')) {
		if (src_w != dst_w) {
			window_set_active_pane(src_w, dst_wp);
			window_set_active_pane(dst_w, src_wp);
		} else {
			tmp_wp = dst_wp;
			if (!window_pane_visible(tmp_wp))
				tmp_wp = src_wp;
			window_set_active_pane(src_w, tmp_wp);
		}
	} else {
		if (src_w->active == src_wp)
			window_set_active_pane(src_w, dst_wp);
		if (dst_w->active == dst_wp)
			window_set_active_pane(dst_w, src_wp);
	}
	if (src_w != dst_w) {
		if (src_w->last == src_wp)
			src_w->last = NULL;
		if (dst_w->last == dst_wp)
			dst_w->last = NULL;
	}
	server_redraw_window(src_w);
	server_redraw_window(dst_w);

	return (CMD_RETURN_NORMAL);
}
@


1.30
log
@Mass rename struct cmd_q to struct cmdq_item and related.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.29 2016/10/13 22:48:51 nicm Exp $ */
d38 2
a39 2
	.sflag = CMD_PANE_MARKED,
	.tflag = CMD_PANE,
d53 4
a56 4
	dst_w = item->state.tflag.wl->window;
	dst_wp = item->state.tflag.wp;
	src_w = item->state.sflag.wl->window;
	src_wp = item->state.sflag.wp;
@


1.29
log
@Trying to do hooks generically is way too complicated and unreliable and
confusing, particularly trying to automatically figure out what target
hooks should be using. So simplify it:

- drop before hooks entirely, they don't seem to be very useful;

- commands with special requirements now fire their own after hook (for
  example, if they change session or window, or if they have -t and -s
  and need to choose which one the hook uses as current target);

- commands with no special requirements can have the CMD_AFTERHOOK flag
  added and they will use the -t state.

At the moment new-session, new-window, split-window fire their own hook,
and display-message uses the flag. The remaining commands still need to
be looked at.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.28 2016/10/13 10:01:49 nicm Exp $ */
d29 1
a29 1
static enum cmd_retval	 cmd_swap_pane_exec(struct cmd *, struct cmd_q *);
d46 1
a46 1
cmd_swap_pane_exec(struct cmd *self, struct cmd_q *cmdq)
d53 4
a56 4
	dst_w = cmdq->state.tflag.wl->window;
	dst_wp = cmdq->state.tflag.wp;
	src_w = cmdq->state.sflag.wl->window;
	src_wp = cmdq->state.sflag.wp;
@


1.28
log
@Some improvements and bug fixes for hooks:

- Prepare the state again before the "after" hooks are run, because the
  command may have killed or moved windows.

- Use the hooks list from the newly prepared target, not the old hooks
  list (only matters for new-session really).

- Correctly detect an invalid current state and ignore it in
  cmd_find_target ("killw; swapw").

- Change neww, new, killp, killw, splitw, swapp, swapw to update the
  current state (used if no explicit target is given) to something more
  useful after they have finished. For example, neww changes it to the
  newly created window.

Hooks are still relatively new and primitive so there are likely to be
more changes to come.

Parts based on bug reports from Uwe Werler and Iblis Lin.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.27 2016/10/10 21:51:39 nicm Exp $ */
a125 7

	cmd_find_clear_state(&cmdq->current, NULL, 0);
	cmdq->current.s = cmdq->state.tflag.s;
	cmdq->current.wl = cmdq->state.tflag.wl;
	cmdq->current.w = dst_w;
	cmdq->current.wp = src_wp;
	cmd_find_log_state(__func__, &cmdq->current);
@


1.27
log
@Add static in cmd-* and fix a few other nits.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.26 2016/03/01 12:02:54 nicm Exp $ */
d126 7
@


1.26
log
@Remove unused variables, from Michal Mazurek.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.25 2016/01/19 15:59:12 nicm Exp $ */
d29 1
a29 1
enum cmd_retval	 cmd_swap_pane_exec(struct cmd *, struct cmd_q *);
d45 1
a45 1
enum cmd_retval
@


1.25
log
@I no longer use my SourceForge address so replace it.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.24 2015/12/14 00:31:54 nicm Exp $ */
a47 1
	struct winlink          *src_wl, *dst_wl;
d53 1
a53 2
	dst_wl = cmdq->state.tflag.wl;
	dst_w = dst_wl->window;
d55 1
a55 2
	src_wl = cmdq->state.sflag.wl;
	src_w = src_wl->window;
a59 1
		src_wl = dst_wl;
a64 1
		src_wl = dst_wl;
@


1.24
log
@Instead of combined flags for -c, -s, -t, split into different sets
using an enum and simplify the parsing code.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.23 2015/12/13 21:53:57 nicm Exp $ */
d4 1
a4 1
 * Copyright (c) 2009 Nicholas Marriott <nicm@@users.sourceforge.net>
@


1.23
log
@Use member names in cmd_entry definitions so I stop getting confused
about the order.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.22 2015/12/13 14:32:38 nicm Exp $ */
d38 4
a41 1
	.flags = CMD_PANE_MARKED_S|CMD_PANE_T,
a47 1
	struct args		*args = self->args;
a56 1
	src_wp = cmdq->state.sflag.wp;
d59 1
d62 8
a69 1
	if (!args_has(args, 's')) {
d71 3
a73 9
		if (args_has(self->args, 'D')) {
			src_wp = TAILQ_NEXT(dst_wp, entry);
			if (src_wp == NULL)
				src_wp = TAILQ_FIRST(&dst_w->panes);
		} else if (args_has(self->args, 'U')) {
			src_wp = TAILQ_PREV(dst_wp, window_panes, entry);
			if (src_wp == NULL)
				src_wp = TAILQ_LAST(&dst_w->panes, window_panes);
		}
@


1.22
log
@Instead of every command resolving the target (-t or -s) itself, prepare
the state (client, session, winlink, pane) for it it before entering the
command. Each command provides some flags that tell the prepare step
what it is expecting.

This is a requirement for having hooks on commands (for example, if you
hook "select-window -t1:2", the hook command should to operate on window
1:2 not whatever it thinks is the current window), and should allow some
other target improvements.

The old cmd_find_* functions remain for the moment but that layer will
be dropped later.

Joint work with Thomas Adam.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.21 2015/08/30 15:43:40 nicm Exp $ */
d32 8
a39 5
	"swap-pane", "swapp",
	"dDs:t:U", 0, 0,
	"[-dDU] " CMD_SRCDST_PANE_USAGE,
	CMD_PANE_MARKED_S|CMD_PANE_T,
	cmd_swap_pane_exec
@


1.21
log
@Some style nits and dead assignments.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.20 2015/06/04 11:43:51 nicm Exp $ */
d35 1
a35 1
	0,
d43 1
a43 1
	struct winlink		*src_wl, *dst_wl;
d49 1
a49 3
	dst_wl = cmd_find_pane(cmdq, args_get(args, 't'), NULL, &dst_wp);
	if (dst_wl == NULL)
		return (CMD_RETURN_ERROR);
d51 4
a66 6
		} else {
			src_wl = cmd_find_pane_marked(cmdq, NULL, NULL,
			    &src_wp);
			if (src_wl == NULL)
				return (CMD_RETURN_ERROR);
			src_w = src_wl->window;
a67 6
	} else {
		src_wl = cmd_find_pane_marked(cmdq, args_get(args, 's'), NULL,
		    &src_wp);
		if (src_wl == NULL)
			return (CMD_RETURN_ERROR);
		src_w = src_wl->window;
@


1.20
log
@Add support for a single "marked pane". There is one marked pane in the
server at a time; it may be toggled or cleared with select-pane -m and
-M (the border is highlighted). A new target '~' or '{marked}' specifies
the marked pane to commands and it is the default target for the
swap-pane and join-pane -s flag (this makes them much simpler to use -
mark the source pane and then change to the target pane to run swapp or
joinp).
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.19 2014/10/20 22:29:25 nicm Exp $ */
a60 1
			src_wl = dst_wl;
a64 1
			src_wl = dst_wl;
@


1.19
log
@Instead of setting up the default keys by building the key struct
directly with a helper function in the cmd_entry, include a table of
bind-key commands and pass them through the command parser and a
temporary cmd_q.

As well as being smaller, this will allow default bindings to be command
sequences which will probably be needed soon.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.18 2013/10/10 12:00:24 nicm Exp $ */
d61 1
d66 1
d68 2
a69 1
			src_wl = cmd_find_pane(cmdq, NULL, NULL, &src_wp);
d75 2
a76 1
		src_wl = cmd_find_pane(cmdq, args_get(args, 's'), NULL, &src_wp);
@


1.18
log
@Remove the barely-used and unnecessary command check() function.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.17 2013/03/28 15:08:12 nicm Exp $ */
a28 1
void		 cmd_swap_pane_key_binding(struct cmd *, int);
a35 1
	cmd_swap_pane_key_binding,
a37 10

void
cmd_swap_pane_key_binding(struct cmd *self, int key)
{
	self->args = args_create(0);
	if (key == '{')
		args_set(self->args, 'U', NULL);
	else if (key == '}')
		args_set(self->args, 'D', NULL);
}
@


1.17
log
@If -s to swap-pane is not given, use the current pane.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.16 2013/03/24 09:57:59 nicm Exp $ */
a37 1
	NULL,
@


1.16
log
@Add resize-pane -Z to temporary zoom the active pane to occupy the full
window or unzoom (restored to the normal layout) if it already zoomed,
bound to C-b z by default. The pane is unzoomed on pretty much any
excuse whatsoever.

We considered making this a new layout but the requirements are quite
different from layouts so decided it is better as a special case. Each
current layout cell is saved, a temporary one-cell layout generated and
all except the active pane set to NULL.

Prompted by suggestions and scripts from several. Thanks to Aaron Jensen
and Thiago Padilha for testing an earlier version.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.15 2013/03/24 09:54:10 nicm Exp $ */
d78 6
a83 2
		} else
			return (CMD_RETURN_NORMAL);
@


1.15
log
@Add a command queue to standardize and simplify commands that call other
commands and allow a command to block execution of subsequent
commands. This allows run-shell and if-shell to be synchronous which has
been much requested.

Each client has a default command queue and commands are consumed one at
a time from it. A command may suspend execution from the queue by
returning CMD_RETURN_WAIT and then resume it by calling cmd_continue() -
for example run-shell does this from the callback that is fired after
the job is freed.

When the command queue becomes empty, command clients are automatically
exited (unless attaching). A callback is also fired - this is used for
nested commands in, for example, if-shell which can block execution of
the client's cmdq until a new cmdq becomes empty.

Also merge all the old error/info/print functions together and lose the
old curclient/cmdclient distinction - a cmdq is bound to one client (or
none if in the configuration file), this is a command client if
c->session is NULL otherwise an attached client.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.14 2012/07/11 07:10:15 nicm Exp $ */
d66 1
d86 1
@


1.14
log
@Make command exec functions return an enum rather than -1/0/1 values and
add a new value to mean "leave client running but don't attach" to fix
problems with using some commands in a command sequence. Most of the
work by Thomas Adam, problem reported by "jspenguin" on SF bug 3535531.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.13 2011/05/08 21:12:52 nicm Exp $ */
d30 1
a30 1
enum cmd_retval	 cmd_swap_pane_exec(struct cmd *, struct cmd_ctx *);
d53 1
a53 1
cmd_swap_pane_exec(struct cmd *self, struct cmd_ctx *ctx)
d62 1
a62 1
	dst_wl = cmd_find_pane(ctx, args_get(args, 't'), NULL, &dst_wp);
d80 1
a80 1
		src_wl = cmd_find_pane(ctx, args_get(args, 's'), NULL, &src_wp);
@


1.13
log
@Reset last pane on swap-pane across windows, fixes crash noticed by hsim
at gmx.li.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.12 2011/01/04 00:42:47 nicm Exp $ */
d29 2
a30 2
void	cmd_swap_pane_key_binding(struct cmd *, int);
int	cmd_swap_pane_exec(struct cmd *, struct cmd_ctx *);
d52 1
a52 1
int
d64 1
a64 1
		return (-1);
d78 1
a78 1
			return (0);
d82 1
a82 1
			return (-1);
d87 1
a87 1
		return (0);
d141 1
a141 1
	return (0);
@


1.12
log
@Clean up and simplify tmux command argument parsing.

Originally, tmux commands were parsed in the client process into a
struct with the command data which was then serialised and sent to the
server to be executed. The parsing was later moved into the server (an
argv was sent from the client), but the parse step and intermediate
struct was kept.

This change removes that struct and the separate parse step. Argument
parsing and printing is now common to all commands (in arguments.c) with
each command left with just an optional check function (to validate the
arguments at parse time), the exec function and a function to set up any
key bindings (renamed from the old init function).

This is overall more simple and consistent.

There should be no changes to any commands behaviour or syntax although
as this touches every command please watch for any unexpected changes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.11 2009/12/03 22:50:10 nicm Exp $ */
d131 6
@


1.11
log
@Massive spaces->tabs and trailing whitespace cleanup, hopefully for the last
time now I've configured emacs to make them displayed in really annoying
colours...
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.10 2009/11/13 19:53:29 nicm Exp $ */
d29 1
a29 1
void	cmd_swap_pane_init(struct cmd *, int);
d34 1
d36 4
a39 6
	0, "dDU",
	cmd_swap_pane_init,
	cmd_srcdst_parse,
	cmd_swap_pane_exec,
	cmd_srcdst_free,
	cmd_srcdst_print
d43 1
a43 1
cmd_swap_pane_init(struct cmd *self, int key)
d45 1
a45 5
	struct cmd_target_data	*data;

	cmd_srcdst_init(self, key);
	data = self->data;

d47 1
a47 1
		cmd_set_flag(&data->chflags, 'U');
d49 1
a49 1
		cmd_set_flag(&data->chflags, 'D');
a51 1

d55 1
a55 1
	struct cmd_srcdst_data	*data = self->data;
d62 2
a63 4
	if (data == NULL)
		return (0);

	if ((dst_wl = cmd_find_pane(ctx, data->dst, NULL, &dst_wp)) == NULL)
d67 1
a67 1
	if (data->src == NULL) {
d69 1
a69 1
		if (cmd_check_flag(data->chflags, 'D')) {
d73 1
a73 1
		} else if (cmd_check_flag(data->chflags, 'U')) {
d80 1
a80 1
		src_wl = cmd_find_pane(ctx, data->src, NULL, &src_wp);
d116 1
a116 1
	if (!cmd_check_flag(data->chflags, 'd')) {
@


1.10
log
@Get rid of the ugly CMD_CHFLAG macro and use a const string (eg "dDU") in the
command entry structs and a couple of functions to check/set the flags.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.9 2009/07/30 17:29:12 nicm Exp $ */
d113 1
a113 1
	
@


1.9
log
@Remove some dead code found by clang.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.8 2009/07/30 13:45:56 nicm Exp $ */
d35 1
a35 1
	0, CMD_CHFLAG('d')|CMD_CHFLAG('D')|CMD_CHFLAG('U'),
d52 1
a52 1
		data->chflags |= CMD_CHFLAG('U');
d54 1
a54 1
		data->chflags |= CMD_CHFLAG('D');
d57 1
d77 1
a77 1
		if (data->chflags & CMD_CHFLAG('D')) {
d81 1
a81 1
		} else if (data->chflags & CMD_CHFLAG('U')) {
d124 1
a124 1
	if (!(data->chflags & CMD_CHFLAG('d'))) {
@


1.8
log
@Merge pane number into the target specification for pane commands. Instead of
using -p index, a target pane is now addressed with the normal -t window form
but suffixed with a period and a pane index, for example :0.2 or
mysess:mywin.1. An unadorned number such as -t 1 is tried as a pane index in
the current window, if that fails the same rules are followed as for a target
window and the current pane in that window used.

As a side-effect this now means that swap-pane can swap panes between different
windows.

Note that this changes the syntax of the break-pane, clear-history, kill-pane,
resize-pane, select-pane and swap-pane commands.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.7 2009/07/26 12:58:44 nicm Exp $ */
a74 1
		src_wl = dst_wl;
@


1.7
log
@Make all messages sent between the client and server fixed size.

This is the first of two changes to make the protocol more resilient and less
sensitive to other changes in the code, particularly with commands. The client
now packs argv into a buffer and sends it to the server for parsing, rather
than doing it itself and sending the parsed command data.

As a side-effect this also removes a lot of now-unused command marshalling
code.

Mixing a server without this change and a client with or vice versa will cause
tmux to hang or crash, please ensure that tmux is entirely killed before
upgrading.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.6 2009/07/20 07:13:31 nicm Exp $ */
d29 1
a29 1
int	cmd_swap_pane_parse(struct cmd *, int, char **, char **);
a30 12
void	cmd_swap_pane_free(struct cmd *);
void	cmd_swap_pane_init(struct cmd *, int);
size_t	cmd_swap_pane_print(struct cmd *, char *, size_t);

struct cmd_swap_pane_data {
	char	*target;
        int	 src;
	int	 dst;
	int	 flag_detached;
	int	 flag_up;
	int	 flag_down;
};
d34 2
a35 2
	"[-dDU] [-t target-window] [-p src-index] [-q dst-index]",
	0, 0,
d37 1
a37 1
	cmd_swap_pane_parse,
d39 2
a40 2
	cmd_swap_pane_free,
	cmd_swap_pane_print
d46 1
a46 26
	struct cmd_swap_pane_data	 *data;

	self->data = data = xmalloc(sizeof *data);
	data->target = NULL;
	data->src = -1;
	data->dst = -1;
	data->flag_detached = 0;
	data->flag_up = 0;
	data->flag_down = 0;

	switch (key) {
	case '{':
		data->flag_up = 1;
		break;
	case '}':
		data->flag_down = 1;
		break;
	}
}

int
cmd_swap_pane_parse(struct cmd *self, int argc, char **argv, char **cause)
{
	struct cmd_swap_pane_data	*data;
	int				 opt, n;
	const char			*errstr;
d48 1
a48 1
	self->entry->init(self, 0);
d51 4
a54 59
	while ((opt = getopt(argc, argv, "dDt:p:q:U")) != -1) {
		switch (opt) {
		case 'd':
			data->flag_detached = 1;
			break;
		case 'D':
			data->flag_up = 0;
			data->flag_down = 1;
			data->dst = -1;
			break;
		case 't':
			if (data->target == NULL)
				data->target = xstrdup(optarg);
			break;
		case 'p':
			if (data->src == -1) {
				n = strtonum(optarg, 0, INT_MAX, &errstr);
				if (errstr != NULL) {
					xasprintf(cause, "src %s", errstr);
					goto error;
				}
				data->src = n;
			}
			break;
		case 'q':
			if (data->dst == -1) {
				n = strtonum(optarg, 0, INT_MAX, &errstr);
				if (errstr != NULL) {
					xasprintf(cause, "dst %s", errstr);
					goto error;
				}
				data->dst = n;
			}
			data->flag_up = 0;
			data->flag_down = 0;
			break;
		case 'U':
			data->flag_up = 1;
			data->flag_down = 0;
			data->dst = -1;
			break;

		default:
			goto usage;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc != 0)
		goto usage;

	return (0);

usage:
	xasprintf(cause, "usage: %s %s", self->entry->name, self->entry->usage);

error:
	self->entry->free(self);
	return (-1);
d60 6
a65 6
	struct cmd_swap_pane_data	*data = self->data;
	struct winlink			*wl;
	struct window			*w;
	struct window_pane		*tmp_wp, *src_wp, *dst_wp;
	struct layout_cell		*lc;
	u_int				 sx, sy, xoff, yoff;
d70 1
a70 1
	if ((wl = cmd_find_window(ctx, data->target, NULL)) == NULL)
d72 1
a72 1
	w = wl->window;
d74 16
a89 6
	if (data->src == -1)
		src_wp = w->active;
	else {
		src_wp = window_pane_at_index(w, data->src);
		if (src_wp == NULL) {
			ctx->error(ctx, "no pane: %d", data->src);
d91 1
a91 19
		}
	}
	if (data->dst == -1)
		dst_wp = w->active;
	else {
		dst_wp = window_pane_at_index(w, data->dst);
		if (dst_wp == NULL) {
			ctx->error(ctx, "no pane: %d", data->dst);
			return (-1);
		}
	}

	if (data->dst == -1 && data->flag_up) {
		if ((dst_wp = TAILQ_PREV(src_wp, window_panes, entry)) == NULL)
			dst_wp = TAILQ_LAST(&w->panes, window_panes);
	}
	if (data->dst == -1 && data->flag_down) {
		if ((dst_wp = TAILQ_NEXT(src_wp, entry)) == NULL)
			dst_wp = TAILQ_FIRST(&w->panes);
d98 2
a99 2
	TAILQ_REMOVE(&w->panes, dst_wp, entry);
	TAILQ_REPLACE(&w->panes, src_wp, dst_wp, entry);
d103 1
a103 1
		TAILQ_INSERT_HEAD(&w->panes, src_wp, entry);
d105 1
a105 1
		TAILQ_INSERT_AFTER(&w->panes, tmp_wp, src_wp, entry);
d107 9
a115 7
	lc = src_wp->layout_cell;
	src_wp->layout_cell = dst_wp->layout_cell;
	if (src_wp->layout_cell != NULL)
		src_wp->layout_cell->wp = src_wp;
	dst_wp->layout_cell = lc;
	if (dst_wp->layout_cell != NULL)
		dst_wp->layout_cell->wp = dst_wp;
d124 15
a138 5
	if (!data->flag_detached) {
		tmp_wp = dst_wp;
		if (!window_pane_visible(tmp_wp))
			tmp_wp = src_wp;
		window_set_active_pane(w, tmp_wp);
d140 2
a141 1
	server_redraw_window(w);
a143 38
}

void
cmd_swap_pane_free(struct cmd *self)
{
	struct cmd_swap_pane_data	*data = self->data;

	if (data->target != NULL)
		xfree(data->target);
	xfree(data);
}

size_t
cmd_swap_pane_print(struct cmd *self, char *buf, size_t len)
{
	struct cmd_swap_pane_data	*data = self->data;
	size_t				 off = 0;

	off += xsnprintf(buf, len, "%s", self->entry->name);
	if (data == NULL)
		return (off);
	if (off < len &&
	    (data->flag_down || data->flag_up || data->flag_detached)) {
		off += xsnprintf(buf + off, len - off, " -");
		if (off < len && data->flag_detached)
			off += xsnprintf(buf + off, len - off, "d");
		if (off < len && data->flag_up)
			off += xsnprintf(buf + off, len - off, "D");
		if (off < len && data->flag_down)
			off += xsnprintf(buf + off, len - off, "U");
	}
	if (off < len && data->target != NULL)
		off += cmd_prarg(buf + off, len - off, " -t ", data->target);
	if (off < len && data->src != -1)
		off += xsnprintf(buf + off, len - off, " -p %d", data->src);
	if (off < len && data->dst != -1)
		off += xsnprintf(buf + off, len - off, " -q %d", data->dst);
	return (off);
@


1.6
log
@Move the offsets as well when swapping panes.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.5 2009/07/19 13:21:40 nicm Exp $ */
a30 2
void	cmd_swap_pane_send(struct cmd *, struct buffer *);
void	cmd_swap_pane_recv(struct cmd *, struct buffer *);
a50 2
	cmd_swap_pane_send,
	cmd_swap_pane_recv,
a230 19
}

void
cmd_swap_pane_send(struct cmd *self, struct buffer *b)
{
	struct cmd_swap_pane_data	*data = self->data;

	buffer_write(b, data, sizeof *data);
	cmd_send_string(b, data->target);
}

void
cmd_swap_pane_recv(struct cmd *self, struct buffer *b)
{
	struct cmd_swap_pane_data	*data;

	self->data = data = xmalloc(sizeof *data);
	buffer_read(b, data, sizeof *data);
	data->target = cmd_recv_string(b);
@


1.5
log
@Improved layout code.

Each window now has a tree of layout cells associated with it. In this tree,
each node is either a horizontal or vertical cell containing a list of other
cells running from left-to-right or top-to-bottom, or a leaf cell which is
associated with a pane.

The major functional changes are:

- panes may now be split arbitrarily both horizontally (splitw -h, C-b %) and
  vertically (splitw -v, C-b ");
- panes may be resized both horizontally and vertically (resizep -L/-R/-U/-D,
  bound to C-b left/right/up/down and C-b M-left/right/up/down);
- layouts are now applied and then may be modified by resizing or splitting
  panes, rather than being fixed and reapplied when the window is resized or
  panes are added;
- manual-vertical layout is no longer necessary, and active-only layout is gone
  (but may return in future);
- the main-pane layouts now reduce the size of the main pane to fit all panes
  if possible.

Thanks to all who tested.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.4 2009/07/14 07:23:36 nicm Exp $ */
d161 1
a161 1
	u_int				 xx, yy;
a211 2
	xx = src_wp->xoff;
	yy = src_wp->yoff;
d219 3
a221 2
	xx = src_wp->sx;
	yy = src_wp->sy;
d223 2
a224 1
	window_pane_resize(dst_wp, xx, yy);
@


1.4
log
@Get rid of the PANE_HIDDEN flag in favour of a function, and moving the
decision for whether or not a pane should be drawn out of the layout code and
into the redraw code.

This is needed for the new layout design, getting it in now to make that easier
to work on.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.3 2009/07/13 23:11:35 nicm Exp $ */
d160 1
d211 1
d214 6
a219 4
 	src_wp->xoff = dst_wp->xoff;
 	src_wp->yoff = dst_wp->yoff;
 	dst_wp->xoff = xx;
 	dst_wp->yoff = yy;
a230 1
		layout_refresh(w, 0);
d232 1
@


1.3
log
@Having fixed flags for single-character getopt options is a bit hard to
maintain and is only going to get worse as more are used. So instead, add a new
uint64_t member to cmd_entry which is a bitmask of upper and lowercase options
accepted by the command.

This means new single character options can be used without the need to add it
explicitly to the list.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.2 2009/06/03 07:51:24 nicm Exp $ */
a160 1
	int				 flags;
a211 1
	flags = src_wp->flags;
a213 2
	src_wp->flags &= ~PANE_HIDDEN;
	src_wp->flags |= dst_wp->flags & PANE_HIDDEN;
a215 2
	dst_wp->flags &= ~PANE_HIDDEN;
	dst_wp->flags |= flags & PANE_HIDDEN;
d224 1
a224 1
		if (tmp_wp->flags & PANE_HIDDEN)
@


1.2
log
@When swapping pane positions, swap the PANE_HIDDEN flag as well, otherwise tmux
crashes when trying to find the new active pane.

While here, nuke an unused pane flag.

Fixes PR 6160, reported by and a slightly different version of diff tested by
ralf.horstmann at gmx.de.
@
text
@d1 1
a1 1
/* $OpenBSD: cmd-swap-pane.c,v 1.1 2009/06/01 22:58:49 nicm Exp $ */
d49 1
a49 1
	0,
@


1.1
log
@Import tmux, a terminal multiplexor allowing (among other things) a single
terminal to be switched between several different windows and programs
displayed on one terminal be detached from one terminal and moved to another.

ok deraadt pirofti
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d161 1
d213 1
d216 2
d220 2
d229 4
a232 1
		window_set_active_pane(w, dst_wp);
@

