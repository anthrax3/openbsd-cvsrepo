head	1.17;
access;
symbols
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.13.0.10
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.8
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.6
	OPENBSD_2_8:1.13.0.4
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.10.0.6
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.4
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2003.08.04.07.31.02;	author hin;	state dead;
branches;
next	1.16;

1.16
date	2002.06.28.22.28.17;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.12.06.07.16;	author mpech;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.10.06.52.03;	author hugh;	state Exp;
branches;
next	1.13;

1.13
date	2000.02.25.22.09.14;	author hin;	state Exp;
branches;
next	1.12;

1.12
date	99.08.16.19.51.26;	author art;	state Exp;
branches;
next	1.11;

1.11
date	99.05.23.17.19.21;	author aaron;	state Exp;
branches;
next	1.10;

1.10
date	98.03.09.22.17.32;	author art;	state Exp;
branches;
next	1.9;

1.9
date	98.02.25.15.57.48;	author art;	state Exp;
branches;
next	1.8;

1.8
date	98.01.20.15.32.19;	author art;	state Exp;
branches;
next	1.7;

1.7
date	97.06.29.11.10.33;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.06.11.10.23.12;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.03.27.00.30.52;	author weingart;	state Exp;
branches;
next	1.4;

1.4
date	96.06.26.05.37.46;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.17.07.17.30;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.16.22.20.29;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.53;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.53;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@No longer needed. bye bye.

ok deraadt@@ millert@@ henning@@
@
text
@/*	$OpenBSD: krb_passwd.c,v 1.16 2002/06/28 22:28:17 deraadt Exp $	*/
/* $KTH: kpasswd.c,v 1.25 1997/05/02 14:28:51 assar Exp $ */

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/*
 *  Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 *  Export of this software from the United States of America is assumed
 *  to require a specific license from the United States Government.
 *  It is the responsibility of any person or organization contemplating
 *  export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

/*
 * change your password with kerberos
 */

#ifdef KERBEROS

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <netinet/in.h>
#include <des.h>
#include <kerberosIV/krb.h>
#include <kerberosIV/kadm.h>
#include <kerberosIV/kadm_err.h>
#include <netdb.h>
#include <signal.h>
#include <pwd.h>
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <com_err.h>

char realm[REALM_SZ];

extern void usage(int value);
extern int get_pw_new_pwd(char *pword, int pwlen, krb_principal *pr,
    int print_realm);

int
krb_passwd(int argc, char **argv)
{
	char pword[MAX_KPW_LEN], tktstring[MAXPATHLEN];
	krb_principal default_principal;
	krb_principal principal;
	int realm_given = 0;	/* True if realm was give on cmdline */
	int use_default = 1;	/* True if we should use default name */
	int status;		/* return code */
	int c;

	seteuid(getuid());

	memset(&principal, 0, sizeof(principal));
	memset(&default_principal, 0, sizeof(default_principal));

	krb_get_default_principal(default_principal.name,
	    default_principal.instance, default_principal.realm);

	while ((c = getopt(argc, argv, "u:n:i:r:h")) != -1) {
		switch (c) {
		case 'u':
			status = krb_parse_name (optarg, &principal);
			if (status != KSUCCESS)
				errx(2, "%s", krb_get_err_text(status));
			if (principal.realm[0])
				realm_given++;
			else if (krb_get_lrealm(principal.realm, 1) != KSUCCESS)
				errx(1, "Could not find default realm!");
			break;
		case 'n':
			if (k_isname(optarg))
				strlcpy(principal.name, optarg,
				    sizeof(principal.name));
			else {
				warnx("Bad name: %s", optarg);
				usage(1);
			}
			break;
		case 'i':
			if (k_isinst(optarg))
				strlcpy(principal.instance, optarg,
				    sizeof(principal.instance));
			else {
				warnx("Bad instance: %s", optarg);
				usage(1);
			}
			break;
		case 'r':
			if (k_isrealm(optarg)) {
				strlcpy(principal.realm, optarg,
				    sizeof(principal.realm));
				realm_given++;
			} else {
				warnx("Bad realm: %s", optarg);
				usage(1);
			}
			break;
		case 'h':
			usage(0);
			break;
		default:
			usage(1);
			break;
		}
		use_default = 0;
	}
	if (optind < argc) {
		use_default = 0;
		status = krb_parse_name(argv[optind], &principal);
		if (status != KSUCCESS)
			errx(1, "%s", krb_get_err_text (status));
	}

	if (use_default) {
		strlcpy(principal.name, default_principal.name, ANAME_SZ);
		strlcpy(principal.instance, default_principal.instance, INST_SZ);
		strlcpy(principal.realm, default_principal.realm, REALM_SZ);
	} else {
		if (!principal.name[0])
			strlcpy(principal.name, default_principal.name, ANAME_SZ);
		if (!principal.realm[0])
			strlcpy(principal.realm, default_principal.realm, REALM_SZ);
	}

	snprintf(tktstring, sizeof(tktstring), "%s_cpw_%ld",
	    TKT_ROOT, (long)getpid());
	krb_set_tkt_string(tktstring);

	if (get_pw_new_pwd(pword, sizeof(pword), &principal, realm_given)) {
		dest_tkt();
		exit(1);
	}

	status = kadm_init_link (PWSERV_NAME, KRB_MASTER, principal.realm);
	if (status != KADM_SUCCESS)
		com_err(argv[0], status, "while initializing");
	else {
		des_cblock newkey;
		char *pw_msg; /* message from server */

		des_string_to_key(pword, &newkey);
		status = kadm_change_pw_plain((unsigned char*)&newkey, pword, &pw_msg);
		memset(newkey, 0, sizeof(newkey));

		if (status == KADM_INSECURE_PW)
			warnx("Insecure password: %s", pw_msg);
		else if (status != KADM_SUCCESS)
			com_err(argv[0], status, " attempting to change password.");
	}
	memset(pword, 0, sizeof(pword));

	if (status != KADM_SUCCESS)
		fprintf(stderr,"Password NOT changed.\n");
	else
		printf("Password changed.\n");

	dest_tkt();
	if (status)
		return 2;
	else
		return 0;
}

#endif /* KERBEROS */
@


1.16
log
@various cleanups; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.15 2002/06/12 06:07:16 mpech Exp $	*/
@


1.15
log
@a real pid_t cleanup.

espie@@ ok for make/,
deraadt@@ one extra eye,
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.14 2002/05/10 06:52:03 hugh Exp $	*/
d16 1
a16 1
/* 
d67 1
a67 1
	    int print_realm);
d72 80
a151 62
    krb_principal principal;
    krb_principal default_principal;
    int realm_given = 0;	/* True if realm was give on cmdline */
    int use_default = 1;	/* True if we should use default name */
    int status;			/* return code */
    char pword[MAX_KPW_LEN];
    int c;
    char tktstring[MAXPATHLEN];

    seteuid(getuid());
    
    memset (&principal, 0, sizeof(principal));
    memset (&default_principal, 0, sizeof(default_principal));
    
    krb_get_default_principal (default_principal.name,
			       default_principal.instance,
			       default_principal.realm);

    while ((c = getopt(argc, argv, "u:n:i:r:h")) != -1) {
	switch (c) {
	case 'u':
	    status = krb_parse_name (optarg, &principal);
	    if (status != KSUCCESS)
		errx (2, "%s", krb_get_err_text(status));
	    if (principal.realm[0])
		realm_given++;
	    else if (krb_get_lrealm(principal.realm, 1) != KSUCCESS)
		errx (1, "Could not find default realm!");
	    break;
	case 'n':
	    if (k_isname(optarg))
		strncpy(principal.name, optarg, sizeof(principal.name) - 1);
	    else {
		warnx("Bad name: %s", optarg);
		usage(1);
	    }
	    break;
	case 'i':
	    if (k_isinst(optarg))
		strncpy(principal.instance,
			optarg,
			sizeof(principal.instance) - 1);
	    else {
		warnx("Bad instance: %s", optarg);
		usage(1);
	    }
	    break;
	case 'r':
	    if (k_isrealm(optarg)) {
		strncpy(principal.realm, optarg, sizeof(principal.realm) - 1);
		realm_given++; 
	    } else {
		warnx("Bad realm: %s", optarg);
		usage(1);
	    }
	    break;
	case 'h':
	    usage(0);
	    break;
	default:
	    usage(1);
	    break;
d153 8
a160 20
	use_default = 0;
    }
    if (optind < argc) {
	use_default = 0;
	status = krb_parse_name (argv[optind], &principal);
	if(status != KSUCCESS)
	    errx (1, "%s", krb_get_err_text (status));
    }

    if (use_default) {
	strncpy(principal.name, default_principal.name, ANAME_SZ - 1);
	principal.name[ANAME_SZ - 1] = '\0';
	strncpy(principal.instance, default_principal.instance, INST_SZ - 1);
	principal.instance[INST_SZ - 1] = '\0';
	strncpy(principal.realm, default_principal.realm, REALM_SZ - 1);
	principal.realm[REALM_SZ - 1] = '\0';
    } else {
	if (!principal.name[0]) {
	    strncpy(principal.name, default_principal.name, ANAME_SZ - 1);
	    principal.name[ANAME_SZ - 1] = '\0';
d162 16
a177 3
	if (!principal.realm[0]) {
	    strncpy(principal.realm, default_principal.realm, REALM_SZ - 1);
	    principal.realm[REALM_SZ - 1] = '\0';
d179 1
a179 1
    }
d181 10
a190 38
    snprintf(tktstring, sizeof(tktstring),
	     "%s_cpw_%ld", TKT_ROOT, (long)getpid());
    krb_set_tkt_string(tktstring);
    
    if (get_pw_new_pwd(pword, sizeof(pword), &principal,
		       realm_given)) {
	dest_tkt ();
	exit(1);
    }
    
    status = kadm_init_link (PWSERV_NAME, KRB_MASTER, principal.realm);
    if (status != KADM_SUCCESS) 
	com_err(argv[0], status, "while initializing");
    else {
	des_cblock newkey;
	char *pw_msg; /* message from server */

	des_string_to_key(pword, &newkey);
	status = kadm_change_pw_plain((unsigned char*)&newkey, pword, &pw_msg);
	memset(newkey, 0, sizeof(newkey));
      
	if (status == KADM_INSECURE_PW)
	    warnx ("Insecure password: %s", pw_msg);
	else if (status != KADM_SUCCESS)
	    com_err(argv[0], status, " attempting to change password.");
    }
    memset(pword, 0, sizeof(pword));

    if (status != KADM_SUCCESS)
	fprintf(stderr,"Password NOT changed.\n");
    else
	printf("Password changed.\n");

    dest_tkt();
    if (status)
	return 2;
    else 
	return 0;
@


1.14
log
@Fixups for -Wall from panda@@omatis.com in system/2634.
Checked by deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.13 2000/02/25 22:09:14 hin Exp $	*/
d163 1
a163 1
	     "%s_cpw_%u", TKT_ROOT, (unsigned)getpid());
@


1.13
log
@TKT_ROOT has changed from a string to a function in newer KerberosIV
versions.
(Ok deraadt@@)
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.12 1999/08/16 19:51:26 art Exp $	*/
d66 2
@


1.12
log
@inculde com_err.h
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.11 1999/05/23 17:19:21 aaron Exp $	*/
d161 1
a161 1
	     TKT_ROOT "_cpw_%u", (unsigned)getpid());
@


1.11
log
@getopt(3) returns -1, not EOF
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.10 1998/03/09 22:17:32 art Exp $	*/
d61 1
@


1.10
log
@drop root-privilegies when changing kerberos password.
This allows non-root to change kerberos passwords.
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.9 1998/02/25 15:57:48 art Exp $	*/
d87 1
a87 1
    while ((c = getopt(argc, argv, "u:n:i:r:h")) != EOF) {
@


1.9
log
@nicer copyright.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d77 2
@


1.8
log
@Use new method to change kerberos passwords.
@
text
@d1 1
d4 12
d17 19
a35 19
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */
@


1.7
log
@new location of des.h
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.6 1997/06/11 10:23:12 deraadt Exp $	*/
d3 23
a25 31
/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
a27 5
#ifndef lint
/*static char sccsid[] = "from: @@(#)krb_passwd.c	5.4 (Berkeley) 3/1/91";*/
static char rcsid[] = "$OpenBSD: krb_passwd.c,v 1.6 1997/06/11 10:23:12 deraadt Exp $";
#endif /* not lint */

d37 2
a44 1
#include "kpasswd_proto.h"
d49 1
a49 49
#define	PROTO	"tcp"

static struct timeval timeout = { CLIENT_KRB_TIMEOUT, 0 };
static struct kpasswd_data proto_data;
static des_cblock okey;
static Key_schedule osched;
KTEXT_ST ticket;
Key_schedule random_schedule;
long authopts;
char realm[REALM_SZ], krbhst[MAX_HSTNM];
int sock;

krb_passwd()
{
	struct servent *se;
	struct hostent *host;
	struct sockaddr_in sin;
	CREDENTIALS cred;
	int fdsn;
	fd_set *fdsp;
	int rval;
	char pass[_PASSWORD_LEN], password[_PASSWORD_LEN];
	static void finish();

	static struct rlimit rl = { 0, 0 };

	(void)signal(SIGHUP, SIG_IGN);
	(void)signal(SIGINT, SIG_IGN);
	(void)signal(SIGTSTP, SIG_IGN);

	if (setrlimit(RLIMIT_CORE, &rl) < 0) {
		warn("setrlimit");
		return(1);
	}

	if ((se = getservbyname(SERVICE, PROTO)) == NULL) {
		warnx("couldn't find entry for service %s/%s", SERVICE, PROTO);
		return(1);
	}

	if ((rval = krb_get_lrealm(realm,1)) != KSUCCESS) {
		warnx("couldn't get local Kerberos realm: %s", krb_err_txt[rval]);
		return(1);
	}

	if ((rval = krb_get_krbhst(krbhst, realm, 1)) != KSUCCESS) {
		warnx("couldn't get Kerberos host: %s", krb_err_txt[rval]);
		return(1);
	}
d51 1
a51 195
	if ((host = gethostbyname(krbhst)) == NULL) {
		warnx("couldn't get host entry for krb host %s", krbhst);
		return(1);
	}

	sin.sin_family = host->h_addrtype;
	bcopy(host->h_addr, (char *) &sin.sin_addr, host->h_length);
	sin.sin_port = se->s_port;

	if ((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) {
		warn("socket");
		return(1);
	}

	if (connect(sock, (struct sockaddr *) &sin, sizeof(sin)) < 0) {
		warn("connect");
		(void)close(sock);
		return(1);
	}

	rval = krb_sendauth(
		authopts,		/* NOT mutual */
		sock,
		&ticket,		/* (filled in) */
		SERVICE,
		krbhst,			/* instance (krbhst) */
		realm,			/* dest realm */
		(u_long) getpid(),	/* checksum */
		NULL,			/* msg data */
		NULL,			/* credentials */ 
		NULL,			/* schedule */
		NULL,			/* local addr */
		NULL,			/* foreign addr */
		"KPWDV0.1"
	);

	if (rval != KSUCCESS) {
		warnx("Kerberos sendauth error: %s", krb_err_txt[rval]);
		return(1);
	}

	krb_get_cred("krbtgt", realm, realm, &cred);

	(void)printf("Changing Kerberos password for %s.%s@@%s.\n",
	    cred.pname, cred.pinst, realm);

	if (des_read_pw_string(pass,
	    sizeof(pass)-1, "Old Kerberos password:", 0)) {
		warnx("error reading old Kerberos password");
		return(1);
	}

	(void)des_string_to_key(pass, &okey);
	(void)des_key_sched(&okey, osched);
	(void)desrw_set_key(&okey, osched);

	/* wait on the verification string */

	fdsn = howmany(sock+1, NFDBITS) * sizeof(fd_mask);
	if ((fdsp = (fd_set *)malloc(fdsn)) == NULL)
		err(1, "malloc");
	memset(fdsp, 0, fdsn);
	FD_SET(sock, fdsp);

	rval =
	    select(sock + 1, fdsp, (fd_set *) 0, (fd_set *) 0, &timeout);

	if ((rval < 1) || !FD_ISSET(sock, fdsp)) {
		free(fdsp);
		if(rval == 0) {
			warnx("timed out (aborted)");
			cleanup();
			return(1);
		}
		warnx("select failed (aborted)");
		cleanup();
		return(1);
	}
	free(fdsp);

	/* read verification string */

	if (des_read(sock, &proto_data, sizeof(proto_data)) !=
	    sizeof(proto_data)) {
		warnx("couldn't read verification string (aborted)");
		cleanup();
		return(1);
	}

	(void)signal(SIGHUP, finish);
	(void)signal(SIGINT, finish);

	if (strcmp(SECURE_STRING, proto_data.secure_msg) != 0) {
		cleanup();
		/* don't complain loud if user just hit return */
		if (pass == NULL || (!*pass))
			return(0);
		warnx("Sorry");
		return(1);
	}

	(void)des_key_sched(&proto_data.random_key, random_schedule);
	(void)desrw_set_key(&proto_data.random_key, random_schedule);
	(void)bzero(pass, sizeof(pass));

	if (des_read_pw_string(pass,
	    sizeof(pass)-1, "New Kerberos password:", 0)) {
		warnx("error reading new Kerberos password (aborted)");
		cleanup();
		return(1);
	}

	if (des_read_pw_string(password,
	    sizeof(password)-1, "Retype new Kerberos password:", 0)) {
		warnx("error reading new Kerberos password (aborted)");
		cleanup();
		return(1);
	}

	if (strcmp(password, pass) != 0) {
		warnx("password mismatch (aborted)");
		cleanup();
		return(1);
	}

	if (strlen(pass) == 0)
		(void)printf("using NULL password\n");

	send_update(sock, password, SECURE_STRING);

	/* wait for ACK */

	fdsn = howmany(sock+1, NFDBITS) * sizeof(fd_mask);
	if ((fdsp = (fd_set *)malloc(fdsn)) == NULL)
		err(1, "malloc");
	memset(fdsp, 0, fdsn);
	FD_SET(sock, fdsp);

	rval =
	    select(sock + 1, fdsp, (fd_set *) 0, (fd_set *) 0, &timeout);
	if ((rval < 1) || !FD_ISSET(sock, fdsp)) {
		free(fdsp);
		if(rval == 0) {
			warnx("timed out reading ACK (aborted)");
			cleanup();
			exit(1);
		}
		warnx("select failed (aborted)");
		cleanup();
		exit(1);
	}
	free(fdsp);
	recv_ack(sock);
	cleanup();
	exit(0);
}

send_update(dest, pwd, str)
	int dest;
	char *pwd, *str;
{
	static struct update_data ud;

	(void)strncpy(ud.secure_msg, str, _PASSWORD_LEN);
	(void)strncpy(ud.pw, pwd, sizeof(ud.pw));
	if (des_write(dest, &ud, sizeof(ud)) != sizeof(ud)) {
		warnx("couldn't write pw update (abort)");
		bzero((char *)&ud, sizeof(ud));
		cleanup();
		exit(1);
	}
}

recv_ack(remote)
	int remote;
{
	int cc;
	char buf[BUFSIZ];

	cc = des_read(remote, buf, sizeof(buf));
	if (cc <= 0) {
		warnx("error reading acknowledgement (aborted)");
		cleanup();
		exit(1);
	}
	(void)printf("%s", buf);
}

cleanup()
{
	(void)bzero((char *)&proto_data, sizeof(proto_data));
	(void)bzero((char *)okey, sizeof(okey));
	(void)bzero((char *)osched, sizeof(osched));
	(void)bzero((char *)random_schedule, sizeof(random_schedule));
}
d53 2
a54 2
static void
finish()
d56 95
a150 1
	(void)close(sock);
d152 30
@


1.6
log
@dynamic fd_set
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.5 1997/03/27 00:30:52 weingart Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: krb_passwd.c,v 1.5 1997/03/27 00:30:52 weingart Exp $";
d48 1
a48 1
#include <kerberosIV/des.h>
@


1.5
log
@Slight cleanup, more needed
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_passwd.c,v 1.4 1996/06/26 05:37:46 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: krb_passwd.c,v 1.4 1996/06/26 05:37:46 deraadt Exp $";
d79 2
a80 1
	fd_set readfds;
d169 5
a173 2
	FD_ZERO(&readfds);
	FD_SET(sock, &readfds);
d176 1
a176 1
	    select(sock + 1, &readfds, (fd_set *) 0, (fd_set *) 0, &timeout);
d178 2
a179 1
	if ((rval < 1) || !FD_ISSET(sock, &readfds)) {
d189 1
d243 5
a247 2
	FD_ZERO(&readfds);
	FD_SET(sock, &readfds);
d250 3
a252 2
	    select(sock + 1, &readfds, (fd_set *) 0, (fd_set *) 0, &timeout);
	if ((rval < 1) || !FD_ISSET(sock, &readfds)) {
d262 1
@


1.4
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: krb_passwd.c,v 1.3 1996/04/17 07:17:30 tholo Exp $";
d53 1
d59 1
d91 1
a91 2
		(void)fprintf(stderr,
		    "passwd: setrlimit: %s\n", strerror(errno));
d96 1
a96 3
		(void)fprintf(stderr,
		    "passwd: couldn't find entry for service %s/%s\n",
		    SERVICE, PROTO);
d101 1
a101 3
		(void)fprintf(stderr,
		    "passwd: couldn't get local Kerberos realm: %s\n",
		    krb_err_txt[rval]);
d106 1
a106 3
		(void)fprintf(stderr,
		    "passwd: couldn't get Kerberos host: %s\n",
		    krb_err_txt[rval]);
d111 1
a111 3
		(void)fprintf(stderr,
		    "passwd: couldn't get host entry for krb host %s\n",
		    krbhst);
d120 1
a120 1
		(void)fprintf(stderr, "passwd: socket: %s\n", strerror(errno));
d125 1
a125 1
		(void)fprintf(stderr, "passwd: connect: %s\n", strerror(errno));
d147 1
a147 2
		(void)fprintf(stderr, "passwd: Kerberos sendauth error: %s\n",
		    krb_err_txt[rval]);
d158 1
a158 2
		(void)fprintf(stderr,
		    "passwd: error reading old Kerberos password\n");
d176 1
a176 1
			(void)fprintf(stderr, "passwd: timed out (aborted)\n");
d180 1
a180 1
		(void)fprintf(stderr, "passwd: select failed (aborted)\n");
d189 1
a189 2
		(void)fprintf(stderr,
		    "passwd: couldn't read verification string (aborted)\n");
d202 1
a202 1
		(void)fprintf(stderr, "Sorry\n");
d212 1
a212 2
		(void)fprintf(stderr,
		    "passwd: error reading new Kerberos password (aborted)\n");
d219 1
a219 2
		(void)fprintf(stderr,
		    "passwd: error reading new Kerberos password (aborted)\n");
d225 1
a225 2
		(void)fprintf(stderr,
		    "passwd: password mismatch (aborted)\n");
d244 1
a244 2
			(void)fprintf(stderr,
			    "passwd: timed out reading ACK (aborted)\n");
d248 1
a248 1
		(void)fprintf(stderr, "passwd: select failed (aborted)\n");
d266 1
a266 2
		(void)fprintf(stderr,
		    "passwd: couldn't write pw update (abort)\n");
d281 1
a281 2
		(void)fprintf(stderr,
		    "passwd: error reading acknowledgement (aborted)\n");
@


1.3
log
@Make setting of Kerberos password work properly
@
text
@d1 2
d38 1
a38 1
static char rcsid[] = "$Id: krb_passwd.c,v 1.2 1995/12/16 22:20:29 tholo Exp $";
@


1.2
log
@Make it possible to build without SKEY support
Add support for building with kerberosIV
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: krb_passwd.c,v 1.1.1.1 1995/10/18 08:45:53 deraadt Exp $";
d171 1
a171 1
	(void)des_set_key(&okey, osched);
d215 1
a215 1
	(void)des_set_key(&proto_data.random_key, random_schedule);
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
static char rcsid[] = "$Id: krb_passwd.c,v 1.1 1994/07/27 03:28:19 brezak Exp $";
d169 3
a171 3
	(void)des_string_to_key(pass, okey);
	(void)des_key_sched(okey, osched);
	(void)des_set_key(okey, osched);
d214 2
a215 2
	(void)des_key_sched(proto_data.random_key, random_schedule);
	(void)des_set_key(proto_data.random_key, random_schedule);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

