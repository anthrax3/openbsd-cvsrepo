head	1.8;
access;
symbols
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2008.01.02.13.46.27;	author chl;	state dead;
branches;
next	1.7;

1.7
date	2007.03.20.03.50.39;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.01.02.56.28;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.28.22.28.17;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.29.01.58.14;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	99.08.16.19.49.03;	author art;	state Exp;
branches;
next	1.2;

1.2
date	98.02.24.20.46.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	98.01.20.15.32.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove unused file

unused function initially spotted by tobias@@, then I realized the whole file was unused.

ok millert@@ tobias@@
@
text
@/* $OpenBSD: new_pwd.c,v 1.7 2007/03/20 03:50:39 tedu Exp $ */
/* $KTH: new_pwd.c,v 1.11 1997/05/02 14:28:54 assar Exp $ */

/*
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <netinet/in.h>
#include <des.h>
#include <kerberosIV/krb.h>
#include <kerberosIV/kadm.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#ifdef NOENCRYPTION
#define read_long_pw_string placebo_read_pw_string
#else
#define read_long_pw_string des_read_pw_string
#endif

static char *
check_pw(char *pword)
{
	char *t;

	if (strlen(pword) == 0)
		return "Null passwords are not allowed - Please enter a longer password.";

	if (strlen(pword) < MIN_KPW_LEN)
		return "Password is to short - Please enter a longer password.";

	if (strcmp(pword, "s/key") == 0)
		return "That password collides with a system feature. Choose another.\n";

	/* Don't allow all lower case passwords regardless of length */
	for (t = pword; islower(*t); t++)
		;
	if (*t == 0)
		return "Please don't use an all-lower case password.\n"
		    "\tUnusual capitalization, delimiter characters or "
		    "digits are suggested.";
	return NULL;
}

int
get_pw_new_pwd(char *pword, int pwlen, krb_principal *pr, int print_realm)
{
	char ppromp[40+ANAME_SZ+INST_SZ+REALM_SZ]; /* for the password prompt */
	char npromp[40+ANAME_SZ+INST_SZ+REALM_SZ]; /* for the password prompt */
	char p[MAX_K_NAME_SZ];
	char local_realm[REALM_SZ];
	int status;
	char *expl;
	char *q;

	/*
	 * We don't care about failure; this is to determine whether or
	 * not to print the realm in the prompt for a new password.
	 */
	krb_get_lrealm(local_realm, 1);

	if (strcmp(local_realm, pr->realm))
		print_realm++;
	krb_unparse_name_r(pr, p);
	if (print_realm == 0 && (q = strrchr(p, '@@')))
		*q = 0;

	snprintf(ppromp, sizeof(ppromp), "Old password for %s:", p);
	if (read_long_pw_string(pword, pwlen-1, ppromp, 0)) {
		fprintf(stderr, "Error reading old password.\n");
		return -1;
	}

	status = krb_get_pw_in_tkt(pr->name, pr->instance, pr->realm,
	    PWSERV_NAME, KADM_SINST, 1, pword);
	if (status != KSUCCESS) {
		if (status == INTK_BADPW) {
			printf("Incorrect old password.\n");
			return -1;
		} else {
			fprintf(stderr, "Kerberos error: %s\n",
			    krb_get_err_text(status));
			return -1;
		}
	}

	memset(pword, 0, pwlen);

	do {
		char verify[MAX_KPW_LEN];
		snprintf(npromp, sizeof(npromp), "New Password for %s:",p);
		if (read_long_pw_string(pword, pwlen-1, npromp, 0)) {
			fprintf(stderr,
			    "Error reading new password, password unchanged.\n");
			return -1;
		}
		expl = check_pw (pword);
		if (expl) {
			printf("\n\t%s\n\n", expl);
			continue;
		}

		/* Now we got an ok password, verify it. */
		snprintf(npromp, sizeof(npromp),
		    "Verifying New Password for %s:", p);
		if (read_long_pw_string(verify, MAX_KPW_LEN-1, npromp, 0)) {
			fprintf(stderr,
			    "Error reading new password, password unchanged.\n");
			return -1;
		}
		if (strcmp(pword, verify) != 0) {
			printf("Verify failure - try again\n");
			expl = "";		/* continue */
		}
	} while (expl);
	return 0;
}
@


1.7
log
@remove some bogus *p tests from charles longeau
ok deraadt millert
@
text
@d1 1
a1 1
/* $OpenBSD: new_pwd.c,v 1.6 2005/05/01 02:56:28 deraadt Exp $ */
@


1.6
log
@knf
@
text
@d1 1
a1 1
/* $OpenBSD: new_pwd.c,v 1.5 2002/06/28 22:28:17 deraadt Exp $ */
d76 1
a76 1
	for (t = pword; *t && islower(*t); t++)
@


1.5
log
@various cleanups; ok millert
@
text
@d1 1
a1 1
/* $OpenBSD: new_pwd.c,v 1.4 2001/01/29 01:58:14 niklas Exp $ */
d62 1
a62 1
check_pw (char *pword)
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/* $OpenBSD: new_pwd.c,v 1.11 1997/05/02 14:28:54 assar Exp $ */
d8 1
a8 1
 * 
d12 1
a12 1
 * 
d15 1
a15 1
 * 
d19 1
a19 1
 * 
d24 1
a24 1
 * 
d28 1
a28 1
 * 
d68 1
a68 1
    
d71 1
a71 1
    
d95 1
a95 1
    
d98 1
a98 1
	 * not to print the realm in the prompt for a new password. 
d101 1
a101 1
    
d114 1
a114 1
	status = krb_get_pw_in_tkt(pr->name, pr->instance, pr->realm, 
d126 1
@


1.3
log
@inculude ctype.h for islower()
@
text
@d1 1
@


1.2
log
@catch special password "s/key" and refuse it
@
text
@d52 1
@


1.1
log
@Use new method to change kerberos passwords.
@
text
@d62 4
a65 2
    if (strlen(pword) == 0)
	return "Null passwords are not allowed - Please enter a longer password.";
d67 2
a68 2
    if (strlen(pword) < MIN_KPW_LEN)
	return "Password is to short - Please enter a longer password.";
d70 4
a73 3
    /* Don't allow all lower case passwords regardless of length */
    {
	char *t;
d75 1
a75 1
	    ;
d77 4
a80 6
	    return "Please don't use an all-lower case password.\n"
	      "\tUnusual capitalization, delimiter characters or "
	      "digits are suggested.";
    }

    return NULL;
d86 7
a92 8
    char ppromp[40+ANAME_SZ+INST_SZ+REALM_SZ]; /* for the password prompt */
    char npromp[40+ANAME_SZ+INST_SZ+REALM_SZ]; /* for the password prompt */
    
    char p[MAX_K_NAME_SZ];
    
    char local_realm[REALM_SZ];
    int status;
    char *expl;
d94 5
a98 5
    /*
     * We don't care about failure; this is to determine whether or
     * not to print the realm in the prompt for a new password. 
     */
    krb_get_lrealm(local_realm, 1);
d100 2
a101 5
    if (strcmp(local_realm, pr->realm))
	print_realm++;
    
    {
	char *q;
d103 7
a109 16
	if(print_realm == 0 && (q = strrchr(p, '@@')))
	    *q = 0;
    }

    snprintf(ppromp, sizeof(ppromp), "Old password for %s:", p);
    if (read_long_pw_string(pword, pwlen-1, ppromp, 0)) {
	fprintf(stderr, "Error reading old password.\n");
	return -1;
    }

    status = krb_get_pw_in_tkt(pr->name, pr->instance, pr->realm, 
			       PWSERV_NAME, KADM_SINST, 1, pword);
    if (status != KSUCCESS) {
	if (status == INTK_BADPW) {
	    printf("Incorrect old password.\n");
	    return -1;
d111 12
a122 3
	else {
	    fprintf(stderr, "Kerberos error: %s\n", krb_get_err_text(status));
	    return -1;
d124 1
a124 2
    }
    memset(pword, 0, pwlen);
d126 28
a153 26
    do {
	char verify[MAX_KPW_LEN];
	snprintf(npromp, sizeof(npromp), "New Password for %s:",p);
	if (read_long_pw_string(pword, pwlen-1, npromp, 0)) {
	    fprintf(stderr,
		    "Error reading new password, password unchanged.\n");
	    return -1;
        }
	expl = check_pw (pword);
	if (expl) {
	    printf("\n\t%s\n\n", expl);
	    continue;
	}
	/* Now we got an ok password, verify it. */
	snprintf(npromp, sizeof(npromp), "Verifying New Password for %s:", p);
	if (read_long_pw_string(verify, MAX_KPW_LEN-1, npromp, 0)) {
	    fprintf(stderr,
		    "Error reading new password, password unchanged.\n");
	    return -1;
        }
	if (strcmp(pword, verify) != 0) {
	    printf("Verify failure - try again\n");
	    expl = "";		/* continue */
	}
    } while (expl);
    return 0;
@

