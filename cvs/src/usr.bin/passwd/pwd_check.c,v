head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.15.0.8
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.12
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.18
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.16
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.14
	OPENBSD_5_0:1.12.0.12
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.10
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2017.08.21.21.41.13;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	GetnLYY8Up3nxFbI;

1.15
date	2015.12.09.19.39.10;	author mmcc;	state Exp;
branches;
next	1.14;
commitid	vYfMHQk0uPOMI7wA;

1.14
date	2015.11.26.19.01.47;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	0NbTNVgy2y455HVw;

1.13
date	2013.03.02.09.07.37;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.06.05.35.56;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.01.00.05.10;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.04.15.36.03;	author moritz;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.13.21.29.12;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.13.21.09.48;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.14.22.53.18;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.28.22.28.17;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.27.21.12.54;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.18.21.09.23;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.24.21.07.04;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.24.20.50.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.01.22.27.51;	author provos;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Use waitpid()/EINTR idiom for the specific pid, rather than generic wait(),
in case the parent process was started with a dangling child.  This style
ensures any potential parent:child interlock isn't disrupted due to the
"wrong" child being waited on first.  Then the other other childs can safely
zombie.
ok millert jca brynet
@
text
@/*	$OpenBSD: pwd_check.c,v 1.15 2015/12/09 19:39:10 mmcc Exp $	*/

/*
 * Copyright 2000 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <errno.h>
#include <err.h>
#include <regex.h>
#include <grp.h>
#include <paths.h>
#include <login_cap.h>
#include <signal.h>

int pwd_check(login_cap_t *, char *);
int pwd_gettries(login_cap_t *);

struct pattern {
	char *match;
	int flags;
	char *response;
};

struct pattern patterns[] = {
	{
		"^[0-9]*$",
		REG_EXTENDED|REG_NOSUB,
		"Please don't use all-digit passwords."
	},
	{
		"^[a-z]{1,9}$",
		REG_EXTENDED|REG_NOSUB,
		"Please don't use an all-lower case password."
	},
	{
		"^[a-z]{1,6}[0-9]+$",
		REG_EXTENDED|REG_NOSUB|REG_ICASE,
		"Please use a more complicated password."
	},
	{
		"^([a-z][0-9]){1,4}$",
		REG_EXTENDED|REG_NOSUB|REG_ICASE,
		"Please use a more complicated password."
	},
	{
		"^([0-9][a-z]){1,4}$",
		REG_EXTENDED|REG_NOSUB|REG_ICASE,
		"Please use a more complicated password."
	}
};

int
pwd_check(login_cap_t *lc, char *password)
{
	regex_t rgx;
	int i, res, min_len;
	char *checker;
	char *argp[] = { "sh", "-c", NULL, NULL};
	int pipefds[2];
	pid_t child;
	uid_t uid;
	gid_t gid;

	min_len = (int)login_getcapnum(lc, "minpasswordlen", 6, 6);
	if (min_len > 0 && strlen(password) < min_len) {
		printf("Please enter a longer password.\n");
		return (0);
	}

	/* External password check program */
	checker = login_getcapstr(lc, "passwordcheck", NULL, NULL);

	/* Pipes are only used for external checker */
	if (checker != NULL && pipe(pipefds) == -1) {
		warn("pipe");
		goto out;
	}

	/* Check password in low-privileged child */
	switch (child = fork()) {
	case -1:
		warn("fork");
		goto out;
	case 0:
		(void)signal(SIGINT, SIG_DFL);
		(void)signal(SIGQUIT, SIG_DFL);
		uid = getuid();
		gid = getgid();
		if (setresgid(gid, gid, gid) == -1) {
			warn("setresgid");
			exit(1);
		}
		if (setgroups(1, &gid) == -1) {
			warn("setgroups");
			exit(1);
		}
		if (setresuid(uid, uid, uid) == -1) {
			warn("setresuid");
			exit(1);
		}

		if (checker == NULL) {
			if (pledge("stdio", NULL) == -1)
				err(1, "pledge");

			for (i = 0; i < sizeof(patterns) / sizeof(*patterns); i++) {
				int ret;

				if (regcomp(&rgx, patterns[i].match,
				    patterns[i].flags) != 0)
					continue;
				ret = regexec(&rgx, password, 0, NULL, 0);
				regfree(&rgx);
				if (ret == 0) {
					printf("%s\n", patterns[i].response);
					exit(1);
				}
			}
			/* no external checker in use, accept the password */
			exit(0);
		}

		if (pledge("stdio exec", NULL) == -1)
			err(1, "pledge");

		/* Otherwise, pass control to checker program */
		argp[2] = checker;
		if (dup2(pipefds[0], STDIN_FILENO) == -1) {
			warn("dup2");
			exit(1);
		}
		close(pipefds[0]);
		close(pipefds[1]);

		if (execv(_PATH_BSHELL, argp) == -1) {
			warn("exec");
			exit(1);
		}
		/* NOTREACHED */
	default:
		break; /* parent continues below */
	}

	if (checker != NULL) {
		/* Send the password to STDIN of child */
		close(pipefds[0]);
		write(pipefds[1], password, strlen(password) + 1);
		close(pipefds[1]);
	}

	/* get the return value from the child */
	while (waitpid(child, &res, 0) == -1) {
		if (errno != EINTR)
			break;
	}
	if (WIFEXITED(res) && WEXITSTATUS(res) == 0) {
		free(checker);
		return (1);
	}

 out:
	free(checker);
	printf("Please use a different password. Unusual capitalization,\n");
	printf("control characters, or digits are suggested.\n");

	return (0);
}

int
pwd_gettries(login_cap_t *lc)
{
	quad_t ntries;

	if ((ntries = login_getcapnum(lc, "passwordtries", -1, -1)) != -1) {
		if (ntries >= 0 && ntries <= INT_MAX)
			return((int)ntries);
		fprintf(stderr,
		    "Warning: pwdtries out of range in /etc/login.conf");
	}

	/*
	 * If no amount of tries is specified, return a default of 3,
	 * meaning that after 3 attempts where the user is foiled by the
	 * password checks, it will no longer be checked and they can set
	 * it to whatever they like.  This is the historic BSD behavior.
	 */
	return (3);
}
@


1.15
log
@Remove NULL-checks before free(). ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.14 2015/11/26 19:01:47 deraadt Exp $	*/
d141 2
d146 1
a146 1
				res = regexec(&rgx, password, 0, NULL, 0);
d148 1
a148 1
				if (res == 0) {
d186 5
a190 2
	wait(&child);
	if (WIFEXITED(child) && WEXITSTATUS(child) == 0) {
@


1.14
log
@Delete YP password related code.  As a result, these can also be
pledged.  Keep an eye out for regressions, because they could be
uncomfortable.
ok beck semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.13 2013/03/02 09:07:37 ajacoutot Exp $	*/
d186 1
a186 2
		if (checker != NULL)
			free(checker);
d191 1
a191 2
	if (checker != NULL)
		free(checker);
@


1.13
log
@When using an external password quality check program, do not run the
patterns checks which may contradict the rules set by the external
helper.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.12 2008/11/06 05:35:56 djm Exp $	*/
d137 3
d154 3
@


1.12
log
@-Wall -Wshadow clean, no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.11 2005/05/01 00:05:10 djm Exp $	*/
d136 11
a146 9
		for (i = 0; i < sizeof(patterns) / sizeof(*patterns); i++) {
			if (regcomp(&rgx, patterns[i].match,
			    patterns[i].flags) != 0)
				continue;
			res = regexec(&rgx, password, 0, NULL, 0);
			regfree(&rgx);
			if (res == 0) {
				printf("%s\n", patterns[i].response);
				exit(1);
d148 2
a150 4

		/* If no external checker in use, accept the password */
		if (checker == NULL)
			exit(0);
@


1.11
log
@run password strength checking regexes as user; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.10 2005/03/04 15:36:03 moritz Exp $	*/
d48 3
@


1.10
log
@make :passwordtries=0:\ in login.conf work.
from Ross Richardson. closes PR 4133.

ok henning@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.9 2004/07/13 21:29:12 millert Exp $	*/
d47 1
d89 1
d92 2
d101 1
a101 12
	for (i = 0; i < sizeof(patterns) / sizeof(struct pattern); i++) {
		if (regcomp(&rgx, patterns[i].match, patterns[i].flags) != 0)
			continue;
		res = regexec(&rgx, password, 0, NULL, 0);
		regfree(&rgx);
		if (!res) {
			printf("%s\nUnusual capitalization, control characters or digits are suggested.\n", patterns[i].response);
			return (0);
		}
	}

	/* If no external checker is specified, just accept the password */
a102 2
	if (checker == NULL)
		return (1);
d104 2
a105 2
	/* Okay, now pass control to an external program */
	if (pipe(pipefds) == -1) {
d110 38
a147 7
	child = fork();
	if (child == 0) {
		char *argp[] = { "sh", "-c", NULL, NULL};

		/* Drop privileges */
		seteuid(getuid());
		setuid(getuid());
d149 4
a152 1
		if (dup2(pipefds[0], STDIN_FILENO) == -1)
d154 1
a154 1

d158 2
a159 2
		argp[2] = checker;
		if (execv(_PATH_BSHELL, argp) == -1)
d161 4
a164 4
		/* NOT REACHED */
	} else if (child == -1) {
		warn("fork");
		goto out;
a165 1
	close(pipefds[0]);
d167 6
a172 3
	/* Send the password to STDIN of child */
	write(pipefds[1], password, strlen(password) + 1);
	close(pipefds[1]);
d177 2
a178 1
		free(checker);
d183 2
a184 1
	free(checker);
d187 1
@


1.9
log
@Simplify some things now that we only have login.conf to worry about
and fix two bugs introduced in the last commit (a duplicate free
and reversed logic for the default cipher types).
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.8 2004/07/13 21:09:48 millert Exp $	*/
d167 1
a167 1
		if (ntries > 0 && ntries <= INT_MAX)
@


1.8
log
@passwd.conf has been deprecated since login.conf was imported.
Today it finally dies.  Based on a diff from Gabriel Kihlman.
@
text
@d1 2
a2 1
/*	$OpenBSD: pwd_check.c,v 1.7 2004/03/14 22:53:18 tedu Exp $	*/
d87 1
a87 1
	char *option;
d91 1
a91 1
	min_len = (int) login_getcapnum(lc, "minpasswordlen", 6, 6);
d97 1
a97 1
	for (i = 0; i < sizeof(patterns)/sizeof(struct pattern); i++) {
d108 3
a110 2
	/* If no checker is specified in login.conf we accept the password */
	if ((option = login_getcapstr(lc, "passwordcheck", NULL, NULL)) == NULL)
d133 1
a133 1
		argp[2] = option;
a141 1
	free(option);
d149 2
a150 1
	if (WIFEXITED(child) && WEXITSTATUS(child) == 0)
d152 1
d155 1
a155 1
	free(option);
a165 3
	/*
	 * Check login.conf
	 */
d167 4
a170 6
		if (ntries > INT_MAX || ntries < 0) {
			fprintf(stderr,
			    "Warning: pwdtries out of range in /etc/login.conf");
			goto out;
		}
		return((int)ntries);
d174 4
a177 4
	 * If no amount of tries is specified, return a default of
	 * 3, meaning that after 3 attempts where the user is foiled
	 * by the password checks, it will no longer be checked and
	 * they can set it to whatever they like.
d179 1
a179 2
	out:
		return (3);
@


1.7
log
@use pid_t for fork return.  started by Joris Vink
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.6 2002/06/28 22:28:17 deraadt Exp $	*/
a44 2
#include <pwd.h>
#include <util.h>
d82 1
a82 1
pwd_check(struct passwd *pwd, login_cap_t *lc, char *password)
d86 1
a86 1
	char *cp, option[LINE_MAX];
d107 2
a108 38
	/* Okay, now pass control to an external program */

	/*
	 * Check login.conf, falling back onto the deprecated passwd.conf
	 */
	if ((cp = login_getcapstr(lc, "passwordcheck", NULL, NULL)) != NULL) {
		strlcpy(option, cp, sizeof(option));
		free(cp);
	} else {
		pw_getconf(option, LINE_MAX, pwd->pw_name, "pwdcheck");

		/* Try to find an entry for the group */
		if (*option == 0) {
			struct group *grp;
			char grpkey[LINE_MAX];

			grp = getgrgid(pwd->pw_gid);
			if (grp != NULL) {
				snprintf(grpkey, LINE_MAX, ":%s",
				    grp->gr_name);
				pw_getconf(option, LINE_MAX, grpkey,
				    "pwdcheck");
			}
			if (grp != NULL && *option == 0 &&
			    strchr(pwd->pw_name, '.') == NULL) {
				snprintf(grpkey, LINE_MAX, ".%s",
				    grp->gr_name);
				pw_getconf(option, LINE_MAX, grpkey,
				    "pwdcheck");
			}
			if (*option == 0)
				pw_getconf(option, LINE_MAX, "default",
				    "pwdcheck");
		}
	}

	/* If no checker is specified, we accept the password */
	if (*option == 0)
d111 1
d140 1
d152 1
d159 1
a159 1
pwd_gettries(struct passwd *pwd, login_cap_t *lc)
a160 2
	char option[LINE_MAX];
	char *ep = option;
a161 1
	long lval;
d164 1
a164 1
	 * Check login.conf, falling back onto the deprecated passwd.conf
d175 2
a176 40
	pw_getconf(option, LINE_MAX, pwd->pw_name, "pwdtries");

	/* Try to find an entry for the group */
	if (*option == 0) {
		struct group *grp;
		char grpkey[LINE_MAX];

		grp = getgrgid(pwd->pw_gid);
		if (grp != NULL) {
			snprintf(grpkey, LINE_MAX, ":%s", grp->gr_name);
			pw_getconf(option, LINE_MAX, grpkey, "pwdtries");
		}
		if (grp != NULL && *option == 0 &&
		    strchr(pwd->pw_name, '.') == NULL) {
			snprintf(grpkey, LINE_MAX, ".%s", grp->gr_name);
			pw_getconf(option, LINE_MAX, grpkey, "pwdtries");
		}
		if (*option == 0)
			pw_getconf(option, LINE_MAX, "default", "pwdtries");
	}

	if (*option == 0)
		goto out;

	errno = 0;
	lval = strtol(option, &ep, 10);
	if (option[0] == '\0' || *ep != '\0') {
		fprintf(stderr,
		    "Warning: Bad pwdtries line in /etc/passwd.conf");
		goto out;
	}
	if ((errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN)) ||
	    (lval > INT_MAX || lval < 0)) {
		fprintf(stderr,
		    "Warning: pwdtries out of range in /etc/passwd.conf");
		goto out;
	}
	return((int) lval);

	/* If no amount of tries is specified, return a default of
@


1.6
log
@various cleanups; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.5 2002/05/27 21:12:54 itojun Exp $	*/
d90 1
d154 2
a155 2
	res = fork();
	if (res == 0) {
d172 1
a172 1
	} else if (res == -1) {
d183 2
a184 2
	wait(&res);
	if (WIFEXITED(res) && WEXITSTATUS(res) == 0)
d194 1
a194 1
pwd_gettries( struct passwd *pwd, login_cap_t *lc )
@


1.5
log
@support ":" prefix as group name, as username can contain ".".
(still support "." as welll).  passwd.conf support will go away in a
couple of months anyways... ok by millert
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.4 2001/06/18 21:09:23 millert Exp $	*/
d57 1
a57 1
		"^[0-9]*$", 
d90 1
a90 1
	
d126 1
a126 1
				snprintf(grpkey, LINE_MAX-1, ":%s",
a127 1
				grpkey[LINE_MAX-1] = 0;
d133 1
a133 1
				snprintf(grpkey, LINE_MAX-1, ".%s",
a134 1
				grpkey[LINE_MAX-1] = 0;
d143 1
a143 1
	
d156 1
a156 1
		
d187 2
a188 1
	printf("Please use a different password.\nUnusual capitalization, control characters or digits are suggested.\n");
d192 2
a193 1
int pwd_gettries( struct passwd *pwd, login_cap_t *lc )
d196 1
a196 1
	char *ep = option; 
d198 1
d206 1
a206 1
			    "Warning: pwdtries out of range in /etc/login.conf");   
d221 1
a221 2
			snprintf(grpkey, LINE_MAX-1, ":%s", grp->gr_name);
			grpkey[LINE_MAX-1] = 0;
d226 1
a226 2
			snprintf(grpkey, LINE_MAX-1, ".%s", grp->gr_name);
			grpkey[LINE_MAX-1] = 0;
d232 1
a232 1
	
d235 13
a247 17
	else {
		long lval;
		errno = 0;
		lval = strtol(option, &ep, 10);
		if (option[0] == '\0' || *ep != '\0') {
			fprintf(stderr, 
				"Warning: Bad pwdtries line in /etc/passwd.conf");   
			goto out;
		}
		if ((errno == ERANGE && (lval == LONG_MAX
					 || lval == LONG_MIN)) ||
		    (lval > INT_MAX || lval < 0)) {
			fprintf(stderr, 
				"Warning: pwdtries out of range in /etc/passwd.conf");   
			goto out;
		}
		return((int) lval);
d249 1
d251 1
a251 1
	/* If no amount of tries is specified, return a default of 
a258 2
  

@


1.4
log
@o move passwd.conf variables into login.conf
o no longer install passwd.conf (but it is used if it exists and the
  needed info is not in login.conf)
o added passwordtime and minpasswordlen login.conf variables
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.3 2000/11/24 21:07:04 millert Exp $	*/
d126 8
d220 6
@


1.3
log
@Include err.h and util.h
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.2 2000/11/24 20:50:20 millert Exp $	*/
d47 1
d84 1
a84 1
pwd_check(struct passwd *pwd, char *password)
d87 2
a88 2
	int i, res;
	char    option[LINE_MAX];
d91 2
a92 1
	if (strlen(password) <= 5) {
a108 1
	pw_getconf(option, LINE_MAX, pwd->pw_name, "pwdcheck");
d110 25
a134 10
	/* Try to find an entry for the group */
	if (*option == 0) {
	        struct group *grp;
	        char grpkey[LINE_MAX];

	        grp = getgrgid(pwd->pw_gid);
	        if (grp != NULL) {
                        snprintf(grpkey, LINE_MAX-1, ".%s", grp->gr_name);
			grpkey[LINE_MAX-1] = 0;
			pw_getconf(option, LINE_MAX, grpkey, "pwdcheck");
a135 2
		if (*option == 0)
		        pw_getconf(option, LINE_MAX, "default", "pwdcheck");
d185 2
a186 1
int pwd_gettries( struct passwd *pwd ) {
d189 13
d207 2
a208 2
	        struct group *grp;
	        char grpkey[LINE_MAX];
d210 3
a212 3
	        grp = getgrgid(pwd->pw_gid);
	        if (grp != NULL) {
                        snprintf(grpkey, LINE_MAX-1, ".%s", grp->gr_name);
d217 1
a217 1
		        pw_getconf(option, LINE_MAX, "default", "pwdtries");
d233 1
a233 1
		    (lval > INT_MAX || lval < INT_MIN)) {
@


1.2
log
@Include strings.h for strlen() prototype
Include errno.h, not sys/errno.h since this is userland
@
text
@d1 1
a1 1
/*	$OpenBSD: pwd_check.c,v 1.1 2000/08/01 22:27:51 provos Exp $	*/
d41 1
d46 1
@


1.1
log
@integrate password quality checking, disallow all digit passwords motivated
by Solar Designer.  External password checking program can be spawned now,
number of password trials configurable.  work by me and Bob Beck.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a31 1
#include <stdio.h>
d34 2
d37 1
d40 1
a44 1
#include <sys/errno.h>
@

