head	1.8;
access;
symbols
	OPENBSD_3_3:1.6.0.8
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2003.07.14.02.21.37;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2003.06.03.02.56.07;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.12.05.17.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.12.04.00.16.52;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.08.06.20.41.07;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.07.10.14.09.54;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.32.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.06;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@toast this piece of junk
@
text
@/*	$OpenBSD: filter.c,v 1.7 2003/06/03 02:56:07 millert Exp $	*/
/*	$NetBSD: filter.c,v 1.3 1995/09/02 06:15:28 jtc Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)filter.c	8.1 (Berkeley) 6/6/93";
#endif
static char rcsid[] = "$OpenBSD: filter.c,v 1.7 2003/06/03 02:56:07 millert Exp $";
#endif /* not lint */

#include <sys/param.h>
#include <pwd.h>
#include <unistd.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include "error.h"
#include "pathnames.h"

char	*lint_libs[] = {
	IG_FILE1,
	IG_FILE2,
	IG_FILE3,
	IG_FILE4,
	0
};
int	lexsort();
/*
 *	Read the file ERRORNAME of the names of functions in lint
 *	to ignore complaints about.
 */
void
getignored(auxname)
	char	*auxname;
{
	reg	int	i;
	FILE	*fyle;
	char	inbuffer[256];
	uid_t	uid;
	char	filename[MAXPATHLEN];
	char	*username;
	struct	passwd *passwdentry;

	nignored = 0;
	if (auxname == 0){	/* use the default */
		if ( (username = (char *)getlogin()) == NULL){
			username = "Unknown";
			uid = getuid();
			if ( (passwdentry = (struct passwd *)getpwuid(uid)) == NULL){
				return;
			}
		} else {
			if ( (passwdentry = (struct passwd *)getpwnam(username)) == NULL)
				return;
		}
		strlcpy(filename, passwdentry->pw_dir, sizeof(filename));
		(void)strlcat(filename, ERRORNAME, sizeof(filename));
	} else
		(void)strlcpy(filename, auxname, sizeof filename);
#ifdef FULLDEBUG
	printf("Opening file \"%s\" to read names to ignore.\n",
		filename);
#endif
	if ( (fyle = fopen(filename, "r")) == NULL){
#ifdef FULLDEBUG
		warn("Can't open file \"%s\"", filename);
#endif
		return;
	}
	/*
	 *	Make the first pass through the file, counting lines
	 */
	for (nignored = 0;
	    fgets(inbuffer, sizeof(inbuffer)-1, fyle) != NULL; nignored++)
		continue;
	names_ignored = (char **)Calloc(nignored+1, sizeof (char *));
	fclose(fyle);
	if (freopen(filename, "r", fyle) == NULL){
#ifdef FULLDEBUG
		warn("Failure to open \"%s\" for second read.", filename);
#endif
		nignored = 0;
		return;
	}
	for (i=0; i < nignored &&
	    (fgets (inbuffer, sizeof(inbuffer)-1, fyle) != NULL); i++){
		names_ignored[i] = strsave(inbuffer);
		(void)substitute(names_ignored[i], '\n', '\0');
	}
	qsort(names_ignored, nignored, sizeof *names_ignored, lexsort);
#ifdef FULLDEBUG
	printf("Names to ignore follow.\n");
	for (i=0; i < nignored; i++){
		printf("\tIgnore: %s\n", names_ignored[i]);
	}
#endif
}

int lexsort(cpp1, cpp2)
	char	**cpp1, **cpp2;
{
	return(strcmp(*cpp1, *cpp2));
}

int search_ignore(key)
	char	*key;
{
	reg	int	ub, lb;
	reg	int	halfway;
		int	order;

	if (nignored == 0)
		return(-1);
	for(lb = 0, ub = nignored - 1; ub >= lb; ){
		halfway = (ub + lb)/2;
		if ( (order = strcmp(key, names_ignored[halfway])) == 0)
			return(halfway);
		if (order < 0)	/*key is less than probe, throw away above*/
			ub = halfway - 1;
		 else
			lb = halfway + 1;
	}
	return(-1);
}

/*
 *	Tell if the error text is to be ignored.
 *	The error must have been canonicalized, with
 *	the file name the zeroth entry in the errorv,
 *	and the linenumber the second.
 *	Return the new categorization of the error class.
 */
Errorclass
discardit(errorp)
	Eptr	errorp;
{
		int	language;
	reg	int	i;
	Errorclass	errorclass = errorp->error_e_class;

	switch(errorclass){
		case	C_SYNC:
		case	C_NONSPEC:
		case	C_UNKNOWN:	return(errorclass);
		default:	;
	}
	if(errorp->error_lgtext < 2){
		return(C_NONSPEC);
	}
	language = errorp->error_language;
	if(language == INLINT){
		if (errorclass != C_NONSPEC){	/* no file */
			for(i=0; lint_libs[i] != 0; i++){
				if (strcmp(errorp->error_text[0], lint_libs[i]) == 0){
					return(C_DISCARD);
				}
			}
		}
		/* check if the argument to the error message is to be ignored*/
		if (ispunct(lastchar(errorp->error_text[2])))
			clob_last(errorp->error_text[2], '\0');
		if (search_ignore(errorp->error_text[errorclass == C_NONSPEC ? 0 : 2]) >= 0){
			return(C_NULLED);
		}
	}
	return(errorclass);
}
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.6 2001/07/12 05:17:02 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: filter.c,v 1.6 2001/07/12 05:17:02 deraadt Exp $";
@


1.6
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.5 1999/12/04 00:16:52 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: filter.c,v 1.5 1999/12/04 00:16:52 deraadt Exp $";
@


1.5
log
@avoid overflows
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.4 1999/08/06 20:41:07 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: filter.c,v 1.4 1999/08/06 20:41:07 deraadt Exp $";
d66 1
d167 3
a169 2
Errorclass discardit(errorp)
	reg	Eptr	errorp;
@


1.4
log
@uid_t and gid_t, and use %u
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.3 1998/07/10 14:09:54 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: filter.c,v 1.3 1998/07/10 14:09:54 mickey Exp $";
d44 1
a44 1
#include <sys/types.h>
d73 1
a73 1
	char	filename[128];
d89 2
a90 2
		strcpy(filename, passwdentry->pw_dir);
		(void)strcat(filename, ERRORNAME);
d92 1
a92 1
		(void)strcpy(filename, auxname);
d106 2
a107 1
	for (nignored = 0; fgets(inbuffer, 255, fyle) != NULL; nignored++)
d118 2
a119 1
	for (i=0; i < nignored && (fgets (inbuffer, 255, fyle) != NULL); i++){
@


1.3
log
@use err/warn
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.2 1996/06/26 05:32:42 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: filter.c,v 1.2 1996/06/26 05:32:42 deraadt Exp $";
d70 6
a75 6
		FILE	*fyle;
		char	inbuffer[256];
		int	uid;
		char	filename[128];
		char	*username;
		struct	passwd *passwdentry;
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.3 1995/09/02 06:15:28 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: filter.c,v 1.3 1995/09/02 06:15:28 jtc Exp $";
a60 1
extern	char*	processname;
d99 1
a99 2
		fprintf(stderr, "%s: Can't open file \"%s\"\n",
			processname, filename);
d112 1
a112 2
		fprintf(stderr, "%s: Failure to open \"%s\" for second read.\n",
			processname, filename);
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: filter.c,v 1.3 1995/09/02 06:15:28 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
