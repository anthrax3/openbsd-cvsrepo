head	1.11;
access;
symbols
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2003.07.14.02.21.37;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2003.06.10.22.20.46;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.07;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.14.21.35.00;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.06.51.41;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.12.05.17.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.12.02.32.49;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.30.16.00.12;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.07.10.14.09.55;	author mickey;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	96.06.26.05.32.44;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.06;	author deraadt;	state Exp;
branches;
next	;

1.3.8.1
date	2000.10.06.21.16.12;	author jason;	state Exp;
branches;
next	;


desc
@@


1.11
log
@toast this piece of junk
@
text
@/*	$OpenBSD: main.c,v 1.10 2003/06/10 22:20:46 deraadt Exp $	*/
/*	$NetBSD: main.c,v 1.3 1995/09/02 06:15:37 jtc Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)main.c	8.1 (Berkeley) 6/6/93";
#endif
static char rcsid[] = "$OpenBSD: main.c,v 1.10 2003/06/10 22:20:46 deraadt Exp $";
#endif /* not lint */

#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <err.h>
#include "error.h"
#include "pathnames.h"

int	nerrors = 0;
Eptr	er_head;
Eptr	*errors;

int	nfiles = 0;
Eptr	**files;	/* array of pointers into errors*/
int	language = INCC;

char	*currentfilename = "????";
char	im_on[] = _PATH_TTY;	/* my tty name */

boolean	query = FALSE;		/* query the operator if touch files */
boolean	notouch = FALSE;	/* don't touch ANY files */
boolean	piflag	= FALSE;	/* this is not pi */
boolean	terse	= FALSE;	/* Terse output */

char	*suffixlist = ".*";	/* initially, can touch any file */

int	errorsort();
void	onintr();
void	usage();

/*
 *	error [-I ignorename] [-n] [-q] [-t suffixlist] [-s] [-v] [infile]
 *	
 *	-T:	terse output
 *
 *	-I:	the following name, `ignorename' contains a list of
 *		function names that are not to be treated as hard errors.
 *		Default: ~/.errorsrc
 *
 *	-n:	don't touch ANY files!
 *
 *	-q:	The user is to be queried before touching each
 *		file; if not specified, all files with hard, non
 *		ignorable errors are touched (assuming they can be).
 *
 *	-t:	touch only files ending with the list of suffices, each
 *		suffix preceded by a dot.
 *		eg, -t .c.y.l
 *		will touch only files ending with .c, .y or .l
 *
 *	-s:	print a summary of the error's categories.
 *
 *	-v:	after touching all files, overlay vi(1), ex(1) or ed(1)
 *		on top of error, entered in the first file with
 *		an error in it, with the appropriate editor
 *		set up to use the "next" command to get the other
 *		files containing errors.
 *
 *	-p:	(obsolete: for older versions of pi without bug
 *		fix regarding printing out the name of the main file
 *		with an error in it)
 *		Take the following argument and use it as the name of
 *		the pascal source file, suffix .p
 *
 *	-S:	show the errors in unsorted order
 *		(as they come from the error file)
 *
 *	infile:	The error messages come from this file.
 *		Default: stdin
 */
int
main(int argc, char *argv[])
{
	char *ignorename = 0;
	char **ed_argv;		/* return from touchfiles */
	int ch, ed_argc;
	boolean	show_errors = FALSE;
	boolean	Show_Errors = FALSE;
	boolean	pr_summary = FALSE;
	boolean	edit_files = FALSE;

	errorfile = stdin;
	while ((ch = getopt(argc, argv, "STnqsvI:t:")) != -1)
		switch (ch) {
		case 'S':
			Show_Errors = TRUE;
			break;
		case 'T':
			terse = TRUE;
			break;
		case 'n':
			notouch = TRUE;
			break;
		case 'q':
			query = TRUE;
			break;
		case 's':
			pr_summary = TRUE;
			break;
		case 'v':
			edit_files = TRUE;
			break;
		case 'I':
			ignorename = optarg;
			break;
		case 't':
			suffixlist = optarg;
			break;
		default:
			usage();
		}

	argc -= optind;
	argv += optind;

	if (notouch)
		suffixlist = NULL;

	if (argc > 1) {
		if (argc > 3)
			errx(3, "Only takes 0 or 1 arguments.");
		if ((errorfile = fopen(argv[1], "r")) == NULL)
			err(4, "%s", argv[1]);
	}

	if ((queryfile = fopen(im_on, "r")) == NULL) {
		if (query) {
			errx(9, "Can't open \"%s\" to query the user.", im_on);
			exit(9);
		}
	}

	if (signal(SIGINT, onintr) == SIG_IGN)
		signal(SIGINT, SIG_IGN);
	if (signal(SIGTERM, onintr) == SIG_IGN)
		signal(SIGTERM, SIG_IGN);

	getignored(ignorename);
	eaterrors(&nerrors, &errors);

	if (Show_Errors)
		printerrors(TRUE, nerrors, errors);

	qsort(errors, nerrors, sizeof(Eptr), errorsort);

	if (show_errors)
		printerrors(FALSE, nerrors, errors);

	findfiles(nerrors, errors, &nfiles, &files);

#define P(msg, arg) fprintf(stdout, msg, arg)

	if (pr_summary) {
		if (nunknown)
			P("%d Errors are unclassifiable.\n", nunknown);
		if (nignore)
			P("%d Errors are classifiable, but totally discarded.\n",nignore);
		if (nsyncerrors)
			P("%d Errors are synchronization errors.\n", nsyncerrors);
		if (nignore)
			P("%d Errors are discarded because they refer to sacrosinct files.\n", ndiscard);
		if (nnulled)
			P("%d Errors are nulled because they refer to specific functions.\n", nnulled);
		if (nnonspec)
			P("%d Errors are not specific to any file.\n", nnonspec);
		if (nthisfile)
			P("%d Errors are specific to a given file, but not to a line.\n", nthisfile);
		if (ntrue)
			P("%d Errors are true errors, and can be inserted into the files.\n", ntrue);
	}

	filenames(nfiles, files);
	fflush(stdout);

	if (touchfiles(nfiles, files, &ed_argc, &ed_argv) && edit_files)
		forkvi(ed_argc, ed_argv);
	exit(0);
}

void
forkvi(int argc, char **argv)
{
	if (query) {
		switch (inquire(terse ? "Edit? " :
		    "Do you still want to edit the files you touched? ")) {
		case Q_NO:
		case Q_no:
			return;
		default:
			break;
		}
	}

	/*
	 *	ed_agument's first argument is
	 *	a vi/ex compatible search argument
	 *	to find the first occurance of ###
	 */
	try("vi", argc, argv);
	try("ex", argc, argv);
	try("ed", argc - 1, argv + 1);
	fprintf(stdout, "Can't find any editors.\n");
}

void
try(char *name, int argc, char **argv)
{
	argv[0] = name;
	wordvprint(stdout, argc, argv);
	fprintf(stdout, "\n");
	fflush(stderr);
	fflush(stdout);
	sleep(2);

	if (freopen(im_on, "r", stdin) == NULL)
		return;
	if (freopen(im_on, "w", stdout) == NULL)
		return;

	execvp(name, argv);
}

int
errorsort(Eptr *epp1, Eptr *epp2)
{
	reg Eptr ep1, ep2;
	int order;

	/*
	 *	Sort by:
	 *	1) synchronization, non specific, discarded errors first;
	 *	2) nulled and true errors last
	 *	    a) grouped by similar file names
	 *	    b) grouped in ascending line number
	 */
	ep1 = *epp1; ep2 = *epp2;
	if (ep1 == 0 || ep2 == 0)
		return (0);

	if ((NOTSORTABLE(ep1->error_e_class)) ^
	    (NOTSORTABLE(ep2->error_e_class))) {
		return (NOTSORTABLE(ep1->error_e_class) ? -1 : 1);
	}

	if (NOTSORTABLE(ep1->error_e_class))	/* then both are */
		return (ep1->error_no - ep2->error_no);

	order = strcmp(ep1->error_text[0], ep2->error_text[0]);
	if (order == 0)
		return (ep1->error_line - ep2->error_line);

	return (order);
}

void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr,
	    "usage: %s [-STnsqv] [-I ignorefile] [-t suffixlist] [name]\n",
	    __progname);
	exit(1);
}
@


1.10
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.9 2003/06/03 02:56:07 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: main.c,v 1.9 2003/06/03 02:56:07 millert Exp $";
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.8 2002/06/14 21:35:00 todd Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: main.c,v 1.8 2002/06/14 21:35:00 todd Exp $";
d119 1
a119 3
main(argc, argv)
	int argc;
	char *argv[];
d228 1
a228 3
forkvi(argc, argv)
	int	argc;
	char	**argv;
d253 1
a253 4
try(name, argc, argv)
	char *name;
	int argc;
	char **argv;
d270 2
a271 2
int errorsort(epp1, epp2)
	Eptr *epp1, *epp2;
d303 1
a303 1
usage()
@


1.8
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.7 2002/03/14 06:51:41 mpech Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: main.c,v 1.7 2002/03/14 06:51:41 mpech Exp $";
@


1.7
log
@Remove \n from err/errx/warn/warnx().

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.6 2001/07/12 05:17:02 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.6 2001/07/12 05:17:02 deraadt Exp $";
d251 1
a251 1
	 *	a vi/ex compatabile search argument
@


1.6
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.5 2000/08/12 02:32:49 aaron Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.5 2000/08/12 02:32:49 aaron Exp $";
d174 1
a174 1
			errx(3, "Only takes 0 or 1 arguments.\n");
@


1.5
log
@- Convert to using getopt().
- Sync man page options with actual program/usage.
- KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.4 2000/06/30 16:00:12 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.4 2000/06/30 16:00:12 millert Exp $";
d56 1
d230 1
d233 1
d260 1
@


1.4
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.3 1998/07/10 14:09:55 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.3 1998/07/10 14:09:55 mickey Exp $";
d79 2
a114 3
 *	-E:	show the errors in sorted order; intended for
 *		debugging.
 *
d121 1
d123 2
a124 2
	int	argc;
	char	*argv[];
d126 3
a128 4
	char	*cp;
	char	*ignorename = 0;
	int	ed_argc;
	char	**ed_argv;		/*return from touchfiles*/
d135 22
a156 4
	if (argc > 1) for(; (argc > 1) && (argv[1][0] == '-'); argc--, argv++){
		for (cp = argv[1] + 1; *cp; cp++) switch(*cp){
		default:
			errx(1, "-%c: Unknown flag", *cp);
a157 7

		case 'n':	notouch = TRUE;	break;
		case 'q':	query = TRUE;	break;
		case 'S':	Show_Errors = TRUE;	break;
		case 's':	pr_summary = TRUE;	break;
		case 'v':	edit_files = TRUE;	break;
		case 'T':	terse = TRUE;	break;
d159 1
a159 9
			*cp-- = 0; argv++; argc--;
			if (argc > 1){
				suffixlist = argv[1];
			}
			break;
		case 'I':	/*ignore file name*/
			*cp-- = 0; argv++; argc--;
			if (argc > 1)
				ignorename = argv[1];
d161 2
d164 4
a167 1
	}	
d169 3
a171 2
		suffixlist = 0;
	if (argc > 1){
d173 2
a174 2
			errx(3, "Only takes 0 or 1 arguments\n");
		if ( (errorfile = fopen(argv[1], "r")) == NULL)
d177 3
a179 2
	if ( (queryfile = fopen(im_on, "r")) == NULL){
		if (query){
d184 1
d189 1
d192 1
d195 1
d197 1
d200 1
d202 1
d204 18
a221 17
	if (pr_summary){
	    if (nunknown)
	      P("%d Errors are unclassifiable.\n", nunknown);
	    if (nignore)
	      P("%d Errors are classifiable, but totally discarded.\n",nignore);
	    if (nsyncerrors)
	      P("%d Errors are synchronization errors.\n", nsyncerrors);
	    if (nignore)
	      P("%d Errors are discarded because they refer to sacrosinct files.\n", ndiscard);
	    if (nnulled)
	      P("%d Errors are nulled because they refer to specific functions.\n", nnulled);
	    if (nnonspec)
	      P("%d Errors are not specific to any file.\n", nnonspec);
	    if (nthisfile)
	      P("%d Errors are specific to a given file, but not to a line.\n", nthisfile);
	    if (ntrue)
	      P("%d Errors are true errors, and can be inserted into the files.\n", ntrue);
d223 1
d226 1
d235 3
a237 4
	if (query){
		switch(inquire(terse
		    ? "Edit? "
		    : "Do you still want to edit the files you touched? ")){
d245 1
d253 1
a253 1
	try("ed", argc-1, argv+1);
d258 3
a260 3
	char	*name;
	int	argc;
	char	**argv;
d268 1
d273 1
d278 1
a278 1
		Eptr	*epp1, *epp2;
d280 3
a282 2
	reg	Eptr	ep1, ep2;
		int	order;
d285 4
a288 4
	 *	1)	synchronization, non specific, discarded errors first;
	 *	2)	nulled and true errors last
	 *		a)	grouped by similar file names
	 *			1)	grouped in ascending line number
d292 5
a296 3
		return(0);
	if ( (NOTSORTABLE(ep1->error_e_class)) ^ (NOTSORTABLE(ep2->error_e_class))){
		return(NOTSORTABLE(ep1->error_e_class) ? -1 : 1);
d298 1
d300 2
a301 1
		return(ep1->error_no - ep2->error_no);
d303 15
a317 4
	if (order == 0){
		return(ep1->error_line - ep2->error_line);
	}
	return(order);
@


1.3
log
@use err/warn
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.2 1996/06/26 05:32:44 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.2 1996/06/26 05:32:44 deraadt Exp $";
d167 1
a167 1
			err(4, argv[1]);
@


1.3.8.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.4 2000/06/30 16:00:12 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.4 2000/06/30 16:00:12 millert Exp $";
d167 1
a167 1
			err(4, "%s", argv[1]);
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.3 1995/09/02 06:15:37 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.3 1995/09/02 06:15:37 jtc Exp $";
a67 1
char	*processname;
a134 2
	processname = argv[0];

d139 1
a139 2
			fprintf(stderr, "%s: -%c: Unknown flag\n",
				processname, *cp);
d164 4
a167 10
		if (argc > 3){
			fprintf(stderr, "%s: Only takes 0 or 1 arguments\n",
				processname);
			exit(3);
		}
		if ( (errorfile = fopen(argv[1], "r")) == NULL){
			fprintf(stderr, "%s: %s: No such file or directory for reading errors.\n",
				processname, argv[1]);
			exit(4);
		}
d171 1
a171 3
			fprintf(stderr,
				"%s: Can't open \"%s\" to query the user.\n",
				processname, im_on);
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: main.c,v 1.3 1995/09/02 06:15:37 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
