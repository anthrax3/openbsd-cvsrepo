head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.12
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.8
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.6
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.20
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.18
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.16
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.14
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.07.08.21.32.44;	author tedu;	state dead;
branches;
next	1.10;
commitid	CcntlYsF2xYomLQo;

1.10
date	2011.04.30.16.45.22;	author lum;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.35;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.19.16.11.59;	author moritz;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.17.10.55.16;	author moritz;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.19.19.06.40;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.25.21.08.59;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.10.22.20.44;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.07.20.19.57.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.31.25;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.54;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.54;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@every succesful hackathon must begin with a sacrifice.
@
text
@/*	$OpenBSD: asa.c,v 1.10 2011/04/30 16:45:22 lum Exp $	*/
/*	$NetBSD: asa.c,v 1.10 1995/04/21 03:01:41 cgd Exp $	*/

/*
 * Copyright (c) 1993,94 Winning Strategies, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Winning Strategies, Inc.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void asa(FILE *);
__dead void usage(void);

int
main(int argc, char *argv[])
{
	int ch, exval = 0;
	FILE *fp;

	while ((ch = getopt(argc, argv, "")) != -1) {
		switch(ch) {
		default:
			usage();
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (!argc)
		asa(stdin);
	else
		for (; *argv != NULL; argv++) {
			if ((fp = fopen(*argv, "r")) == NULL) {
				warn("%s", *argv);
				exval = 1;
				continue;
			}
			asa(fp);
			fclose(fp);
		}

	exit(exval);
}

void
asa(FILE *f)
{
	char *buf, *lbuf = NULL;
	size_t len;
	int firstline = 1;

	while ((buf = fgetln(f, &len)) != NULL) {
		if (buf[len - 1] == '\n')
			buf[len - 1] = '\0';
		else {
			if ((lbuf = malloc(len + 1)) == NULL)
				err(1, NULL);
			memcpy(lbuf, buf, len);
			lbuf[len] = '\0';
			buf = lbuf;
		}
		/* special case the first line  */
		if (firstline) {
			firstline = 0;
			switch (buf[0]) {
			case '0':
				putchar ('\n');
				break;
			case '1':
				putchar ('\f');
				break;
			}
		} else {
			switch (buf[0]) {
			default:
			case ' ':
				putchar ('\n');
				break;
			case '0':
				putchar ('\n');
				putchar ('\n');
				break;
			case '1':
				putchar ('\f');
				break;
			case '+':
				putchar ('\r');
				break;
			}
		}
		if (buf[0] && buf[1]) {
			fputs (&buf[1], stdout);
		}
	}
	free(lbuf);

	if (!firstline)
		putchar ('\n');
}

__dead void
usage(void)
{
	extern char *__progname;
	fprintf(stderr, "usage: %s [file ...]\n", __progname);
	exit(1);
}
@


1.10
log
@return >0 when file is not found. (from FreeBSD)
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.9 2009/10/27 23:59:35 deraadt Exp $	*/
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.8 2007/05/19 16:11:59 moritz Exp $	*/
d46 1
a46 1
	int ch;
d65 1
d72 1
a72 1
	exit(0);
@


1.8
log
@- Rewrite argument handling to not pass closed fd's to asa()
- Reorder fgetln() handling to prevent duplicate code
- Some more cleanup

Initial diff from Tobias Stoeckmann.

ok jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.7 2007/05/17 10:55:16 moritz Exp $	*/
a32 4

#ifndef lint
static char rcsid[] = "$OpenBSD: asa.c,v 1.7 2007/05/17 10:55:16 moritz Exp $";
#endif
@


1.7
log
@Fix fgetln(3) handling of lines without trailing newline.
From Tobias Stoeckmann.

ok ray@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.6 2006/03/19 19:06:40 robert Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: asa.c,v 1.6 2006/03/19 19:06:40 robert Exp $";
d38 1
a41 1
#include <err.h>
d44 2
a45 2
static void asa(FILE *);
static void usage(void);
d63 6
a68 5
	fp = stdin;
	do {
		if (*argv) {
			if (!(fp = fopen(*argv, "r"))) {
				warn ("%s", *argv);
d71 2
a73 5
		if (fp)
			asa (fp);
		if (fp && fp != stdin)
			(void)fclose(fp);
	} while (*argv++);
d75 1
a75 1
	exit (0);
d78 1
a78 1
static void
d83 1
d85 1
a85 1
	if ((buf = fgetln (f, &len)) != NULL) {
d96 9
a104 22
		switch (buf[0]) {
		case '0':
			putchar ('\n');
			break;
		case '1':
			putchar ('\f');
			break;
		}

		if (buf[0] && buf[1]) {
			fputs (&buf[1], stdout);
		}

		while ((buf = fgetln(f, &len)) != NULL) {
			if (buf[len - 1] == '\n')
				buf[len - 1] = '\0';
			else {
				if ((lbuf = malloc(len + 1)) == NULL)
					err(1, NULL);
				memcpy(lbuf, buf, len);
				lbuf[len] = '\0';
				buf = lbuf;
d106 1
a122 4

			if (buf[0] && buf[1]) {
				fputs (&buf[1], stdout);
			}
d124 5
a128 1
		free(lbuf);
d130 1
a131 1
	}
d134 1
a134 1
static void
@


1.6
log
@use getopt(3)
from Jasper Lievisse Adriaanse <jasper@@nedbsd.nl>; ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.5 2003/06/25 21:08:59 deraadt Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: asa.c,v 1.5 2003/06/25 21:08:59 deraadt Exp $";
d40 1
d83 1
a83 1
	char *buf;
d87 9
a95 1
		buf[len - 1] = '\0';
d111 9
a119 1
			buf[len - 1] = '\0';
d141 1
@


1.5
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.4 2003/06/10 22:20:44 deraadt Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: asa.c,v 1.4 2003/06/10 22:20:44 deraadt Exp $";
d41 1
d44 1
d49 1
d52 9
a60 2
	/* skip progname */
	argv++;
d127 8
@


1.4
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.3 1998/07/20 19:57:17 deraadt Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: asa.c,v 1.3 1998/07/20 19:57:17 deraadt Exp $";
d42 1
a42 1
static void asa();
@


1.3
log
@stupid SIGSEGV
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.2 1996/06/26 05:31:25 deraadt Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: asa.c,v 1.2 1996/06/26 05:31:25 deraadt Exp $";
d45 1
a45 3
main (argc, argv)
	int argc;
	char **argv;
d70 1
a70 2
asa(f)
	FILE *f;
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: asa.c,v 1.10 1995/04/21 03:01:41 cgd Exp $	*/
d35 1
a35 1
static char rcsid[] = "$OpenBSD: asa.c,v 1.10 1995/04/21 03:01:41 cgd Exp $";
d54 4
a57 4
        fp = stdin;
        do {
                if (*argv) {
                        if (!(fp = fopen(*argv, "r"))) {
d60 7
a66 6
                        }
                }
                asa (fp);
                if (fp != stdin)
                        (void)fclose(fp);
        } while (*argv++);
@


1.1
log
@Initial revision
@
text
@d1 1
d35 1
a35 1
static char rcsid[] = "$NetBSD: asa.c,v 1.10 1995/04/21 03:01:41 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
