head	1.27;
access;
symbols
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.20.0.10
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.12
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.10
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.8
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.6
	OPENBSD_5_0:1.19.0.4
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.24
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.20
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.18
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.16
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.14
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.12
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.10
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.8
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.6
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.4
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.10.0.4
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2015.10.21.16.06.57;	author millert;	state Exp;
branches;
next	1.26;
commitid	s2DZTdNXdq9anJGE;

1.26
date	2015.10.12.19.56.47;	author naddy;	state Exp;
branches;
next	1.25;
commitid	7OTpmgaqDxhP3OFM;

1.25
date	2015.10.11.23.29.56;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	WvBaIC1iwRohzqGl;

1.24
date	2015.10.10.22.06.41;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	JUg57fmxwrNSJEAq;

1.23
date	2015.10.09.01.37.09;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	sbrB3Q5CNxcwZpfU;

1.22
date	2015.10.07.17.27.35;	author semarie;	state Exp;
branches;
next	1.21;
commitid	RTmum6WLJf8Tq7Sr;

1.21
date	2015.10.07.16.11.40;	author semarie;	state Exp;
branches;
next	1.20;
commitid	EMHPL6YNPp8EK8E1;

1.20
date	2013.08.22.04.43.41;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2010.11.15.10.57.49;	author otto;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.50;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2004.08.18.21.24.27;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.10.22.20.54;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.03.02.56.23;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.14.03.13.07;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.07.21.14.28;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.27.59;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.19.19.02.18;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.31.17.42.26;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.22.17.07.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.21.21.54.51;	author ericj;	state Exp;
branches;
next	1.7;

1.7
date	99.07.18.01.22.16;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.08.20.05.37.21;	author denny;	state Exp;
branches;
next	1.5;

1.5
date	97.07.28.17.38.53;	author flipk;	state Exp;
branches;
next	1.4;

1.4
date	97.03.25.21.28.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.13.50;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.43.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.53;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.53;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Style fixes; from Ilya Kaliman
@
text
@/*	$OpenBSD: who.c,v 1.26 2015/10/12 19:56:47 naddy Exp $	*/
/*	$NetBSD: who.c,v 1.4 1994/12/07 04:28:49 jtc Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Michael Fischbein.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <paths.h>
#include <pwd.h>
#include <utmp.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <err.h>
#include <locale.h>

void  output(struct utmp *);
void  output_labels(void);
void  who_am_i(FILE *);
void  usage(void);
FILE *file(char *);

int only_current_term;		/* show info about the current terminal only */
int show_term;			/* show term state */
int show_idle;			/* show idle time */
int show_labels;		/* show column labels */
int show_quick;			/* quick, names only */

#define NAME_WIDTH	8
#define HOST_WIDTH	45

int hostwidth = HOST_WIDTH;
char *mytty;

int
main(int argc, char *argv[])
{
	struct utmp usr;
	FILE *ufp;
	char *t;
	int c;

	setlocale(LC_ALL, "");

	if (pledge("stdio rpath getpw", NULL) == -1)
		err(1, "pledge");

	if ((mytty = ttyname(0))) {
		/* strip any directory component */
		if ((t = strrchr(mytty, '/')))
			mytty = t + 1;
	}

	only_current_term = show_term = show_idle = show_labels = 0;
	show_quick = 0;
	while ((c = getopt(argc, argv, "HmqTu")) != -1) {
		switch (c) {
		case 'H':
			show_labels = 1;
			break;
		case 'm':
			only_current_term = 1;
			break;
		case 'q':
			show_quick = 1;
			break;
		case 'T':
			show_term = 1;
			break;
		case 'u':
			show_idle = 1;
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (show_quick) {
		only_current_term = show_term = show_idle = show_labels = 0;
	}
	
	if (show_term)
		hostwidth -= 2;
	if (show_idle)
		hostwidth -= 6;

	if (show_labels)
		output_labels();

	switch (argc) {
	case 0:					/* who */
		ufp = file(_PATH_UTMP);

		if (only_current_term) {
			who_am_i(ufp);
		} else if (show_quick) {
			int count = 0;
	
			while (fread((char *)&usr, sizeof(usr), 1, ufp) == 1) {
				if (*usr.ut_name && *usr.ut_line) {
					(void)printf("%-*.*s ", NAME_WIDTH,
						UT_NAMESIZE, usr.ut_name);
					if ((++count % 8) == 0)
						(void) printf("\n");
				}
			}
			if (count % 8)
				(void) printf("\n");
			(void) printf ("# users=%d\n", count);
		} else {
			/* only entries with both name and line fields */
			while (fread((char *)&usr, sizeof(usr), 1, ufp) == 1)
				if (*usr.ut_name && *usr.ut_line)
					output(&usr);
		}
		break;
	case 1:					/* who utmp_file */
		ufp = file(*argv);

		if (only_current_term) {
			who_am_i(ufp);
		} else if (show_quick) {
			int count = 0;

			while (fread((char *)&usr, sizeof(usr), 1, ufp) == 1) {
				if (*usr.ut_name && *usr.ut_line) {
					(void)printf("%-*.*s ", NAME_WIDTH,
						UT_NAMESIZE, usr.ut_name);
					if ((++count % 8) == 0)
						(void) printf("\n");
				}
			}
			if (count % 8)
				(void) printf("\n");
			(void) printf ("# users=%d\n", count);
		} else {
			/* all entries */
			while (fread((char *)&usr, sizeof(usr), 1, ufp) == 1)
				output(&usr);
		}
		break;
	case 2:					/* who am i */
		ufp = file(_PATH_UTMP);
		who_am_i(ufp);
		break;
	default:
		usage();
		/* NOTREACHED */
	}
	exit(0);
}

void
who_am_i(FILE *ufp)
{
	struct utmp usr;
	struct passwd *pw;

	/* search through the utmp and find an entry for this tty */
	if (mytty) {
		while (fread((char *)&usr, sizeof(usr), 1, ufp) == 1)
			if (*usr.ut_name && !strcmp(usr.ut_line, mytty)) {
				output(&usr);
				return;
			}
		/* well, at least we know what the tty is */
		(void)strncpy(usr.ut_line, mytty, UT_LINESIZE);
	} else
		(void)strncpy(usr.ut_line, "tty??", UT_LINESIZE);

	pw = getpwuid(getuid());
	(void)strncpy(usr.ut_name, pw ? pw->pw_name : "?", UT_NAMESIZE);
	(void)time(&usr.ut_time);
	*usr.ut_host = '\0';
	output(&usr);
}

void
output(struct utmp *up)
{
	struct stat sb;
	char line[sizeof(_PATH_DEV) + sizeof (up->ut_line)];
	char state = '?';
	static time_t now = 0;
	time_t idle = 0;

	if (show_term || show_idle) {
		if (now == 0)
			time(&now);
		
		memset(line, 0, sizeof line);
		strlcpy(line, _PATH_DEV, sizeof line);
		strlcat(line, up->ut_line, sizeof line);

		if (stat(line, &sb) == 0) {
			state = (sb.st_mode & 020) ? '+' : '-';
			idle = now - sb.st_atime;
		} else {
			state = '?';
			idle = 0;
		}
		
	}

	(void)printf("%-*.*s ", NAME_WIDTH, UT_NAMESIZE, up->ut_name);

	if (show_term) {
		(void)printf("%c ", state);
	}

	(void)printf("%-*.*s ", UT_LINESIZE, UT_LINESIZE, up->ut_line);
	(void)printf("%.12s ", ctime(&up->ut_time) + 4);

	if (show_idle) {
		if (idle < 60) 
			(void)printf("  .   ");
		else if (idle < (24 * 60 * 60))
			(void)printf("%02d:%02d ", 
				     ((int)idle / (60 * 60)),
				     ((int)idle % (60 * 60)) / 60);
		else
			(void)printf(" old  ");
	}
	
	if (*up->ut_host)
		printf("  (%.*s)", hostwidth, up->ut_host);
	(void)putchar('\n');
}

void
output_labels(void)
{
	(void)printf("%-*.*s ", NAME_WIDTH, UT_NAMESIZE, "USER");

	if (show_term)
		(void)printf("S ");

	(void)printf("%-*.*s ", UT_LINESIZE, UT_LINESIZE, "LINE");
	(void)printf("WHEN         ");

	if (show_idle)
		(void)printf("IDLE  ");

	(void)printf("  %.*s", hostwidth, "FROM");

	(void)putchar('\n');
}

FILE *
file(char *name)
{
	FILE *ufp;

	if (!(ufp = fopen(name, "r"))) {
		err(1, "%s", name);
		/* NOTREACHED */
	}
	if (show_term || show_idle) {
		if (pledge("stdio rpath getpw", NULL) == -1)
			err(1, "pledge");
	} else {
		if (pledge("stdio getpw", NULL) == -1)
			err(1, "pledge");
	}
	return(ufp);
}

void
usage(void)
{
	(void)fprintf(stderr, "usage: who [-HmqTu] [file]\n       who am i\n");
	exit(1);
}
@


1.26
log
@ttyname() no longer does ioctl TIOCGETA, so pledge("tty") is no longer
needed here.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.25 2015/10/11 23:29:56 deraadt Exp $	*/
d80 1
a80 1
	if (mytty = ttyname(0)) {
@


1.25
log
@fix regression: ttyname() failure not handled right
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.24 2015/10/10 22:06:41 deraadt Exp $	*/
d77 1
a77 1
	if (pledge("stdio rpath getpw tty", NULL) == -1)
@


1.24
log
@another pledge argument reorder for sake of re-audit
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.23 2015/10/09 01:37:09 deraadt Exp $	*/
d80 5
a84 4
	mytty = ttyname(0);
	/* strip any directory component */
	if ((t = strrchr(mytty, '/')))
		mytty = t + 1;
@


1.23
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.22 2015/10/07 17:27:35 semarie Exp $	*/
d77 1
a77 1
	if (pledge("stdio getpw rpath tty", NULL) == -1)
d293 1
a293 1
		if (pledge("stdio getpw rpath", NULL) == -1)
@


1.22
log
@from previous commit: "ioctl" is used for grab ttyname(0)

with a function's name like that "tty" should be a better request (more strict)

pointed by and ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.21 2015/10/07 16:11:40 semarie Exp $	*/
d77 2
a78 2
	if (tame("stdio getpw rpath tty", NULL) == -1)
		err(1, "tame");
d293 2
a294 2
		if (tame("stdio getpw rpath", NULL) == -1)
			err(1, "tame");
d296 2
a297 2
		if (tame("stdio getpw", NULL) == -1)
			err(1, "tame");
@


1.21
log
@enable tame(2) in who(1).

some refactor to grab ttyname(0) early and use it later.
gradually drop tame requests when no more needed.

"ioctl" is used for grab ttyname(0)
"rpath" is for -T and -u flag, that used stat(2) to get terminal status

initial patch from deraadt with help from guenther

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.20 2013/08/22 04:43:41 guenther Exp $	*/
d77 1
a77 1
	if (tame("stdio getpw rpath ioctl", NULL) == -1)
@


1.20
log
@Correct format string mismatches turned up by -Wformat=2

suggestions and ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.19 2010/11/15 10:57:49 otto Exp $	*/
d65 1
d72 1
d77 8
a191 2
	char *p;
	char *t;
d194 1
a194 4
	if ((p = ttyname(0))) {
		/* strip any directory component */
		if ((t = strrchr(p, '/')))
			p = t + 1;
d196 1
a196 1
			if (*usr.ut_name && !strcmp(usr.ut_line, p)) {
d201 1
a201 1
		(void)strncpy(usr.ut_line, p, UT_LINESIZE);
d291 7
@


1.19
log
@show more of the host, but be careful not to go over 80 cols; ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.18 2009/10/27 23:59:50 deraadt Exp $	*/
d248 2
a249 2
				     (idle / (60 * 60)),
				     (idle % (60 * 60)) / 60);
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.17 2004/08/18 21:24:27 jmc Exp $	*/
d62 3
a64 1
#define HOST_WIDTH	32
d105 5
d255 1
a255 1
		printf("  (%.*s)", HOST_WIDTH, up->ut_host);
d273 1
a273 1
	(void)printf("  %.*s", HOST_WIDTH, "FROM");
@


1.17
log
@- Xr w 1
- sort options and sync usage()
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.16 2003/06/10 22:20:54 deraadt Exp $	*/
a34 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)who.c	8.1 (Berkeley) 6/6/93";
#endif
static char rcsid[] = "$OpenBSD: who.c,v 1.16 2003/06/10 22:20:54 deraadt Exp $";
#endif /* not lint */
@


1.16
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.15 2003/06/03 02:56:23 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: who.c,v 1.15 2003/06/03 02:56:23 millert Exp $";
d299 1
a299 1
	(void)fprintf(stderr, "usage: who [-mqTuH] [ file ]\n       who am i\n");
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.14 2003/04/14 03:13:07 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: who.c,v 1.14 2003/04/14 03:13:07 deraadt Exp $";
d78 1
a78 3
main(argc, argv)
	int argc;
	char **argv;
d184 1
a184 2
who_am_i(ufp)
	FILE *ufp;
d214 1
a214 2
output(up)
	struct utmp *up;
d266 1
a266 1
output_labels()
d285 1
a285 2
file(name)
	char *name;
d297 1
a297 1
usage()
@


1.14
log
@strlcat, but i memset 0 before to be safe
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.13 2003/04/07 21:14:28 deraadt Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d46 1
a46 1
static char rcsid[] = "$OpenBSD: who.c,v 1.13 2003/04/07 21:14:28 deraadt Exp $";
@


1.13
log
@inlined strcpy, should be strncpy anyways; millert ok, from Hans-Joerg.Hoexer@@yerbouti.franken.de
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.12 2002/02/16 21:27:59 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.12 2002/02/16 21:27:59 millert Exp $";
d234 3
a236 2
		strcpy(line, _PATH_DEV);
		strncat(line, up->ut_line, sizeof (up->ut_line));
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.11 2001/11/19 19:02:18 mpech Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.11 2001/11/19 19:02:18 mpech Exp $";
d211 1
a211 1
		(void)strcpy(usr.ut_line, "tty??");
@


1.11
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.10 2001/01/31 17:42:26 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.10 2001/01/31 17:42:26 deraadt Exp $";
d66 5
a70 5
void  output		__P((struct utmp *));
void  output_labels	__P((void));
void  who_am_i		__P((FILE *));
void  usage		__P((void));
FILE *file		__P((char *));
@


1.10
log
@move utmp to large format, usernames to 32 chars; downsj
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.9 2000/03/22 17:07:37 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.9 2000/03/22 17:07:37 millert Exp $";
d195 1
a195 1
	register char *p;
@


1.9
log
@Avoid the chdir entirely by prefixing _PATH_DEV to the tty name when
doing a stat.  This makes the -T and -u flags work in confunction with
a file argument.
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.8 2000/03/21 21:54:51 ericj Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.8 2000/03/21 21:54:51 ericj Exp $";
d78 3
d137 1
a137 1
					(void)printf("%-*.*s ", UT_NAMESIZE,
d163 1
a163 1
					(void)printf("%-*.*s ", UT_NAMESIZE,
d247 1
a247 1
	(void)printf("%-*.*s ", UT_NAMESIZE, UT_NAMESIZE, up->ut_name);
d268 1
a268 1
		printf("\t(%.*s)", UT_HOSTSIZE, up->ut_host);
d275 1
a275 1
	(void)printf("%-*.*s ", UT_NAMESIZE, UT_NAMESIZE, "USER");
d286 1
a286 1
	(void)printf("\t%.*s", UT_HOSTSIZE, "FROM");
@


1.8
log
@only chdir() if needed. This affected having who reading different file
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.7 1999/07/18 01:22:16 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.7 1999/07/18 01:22:16 deraadt Exp $";
d55 1
a119 7
	if (show_term || show_idle) {
		if (chdir("/dev")) {
			err(1, "cannot change directory to /dev");
			/* NOTREACHED */
		}
	}

d222 1
a222 1
	char line[sizeof (up->ut_line) + 1];
d231 2
a232 2
		strncpy(line, up->ut_line, sizeof (up->ut_line));
		line[sizeof (up->ut_line)] = '\0';
@


1.7
log
@indent
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.6 1997/08/20 05:37:21 denny Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.6 1997/08/20 05:37:21 denny Exp $";
d119 5
a123 3
	if (chdir("/dev")) {
		err(1, "cannot change directory to /dev");
		/* NOTREACHED */
@


1.6
log
@Add -q (quick), the only X/Open option I can work up enthusiasm to implement.
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.5 1997/07/28 17:38:53 flipk Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.5 1997/07/28 17:38:53 flipk Exp $";
d235 1
a235 1
		strncpy (line, up->ut_line, sizeof (up->ut_line));
@


1.5
log
@1) Prototypes. pretty.
2) setlocale(LC_ALL, "") from kleink@@netbsd
3) Add XPG4.2 `-H' flag (show column headers) from kleink@@netbsd
4) initialize flag variables before getopt
5) some Wall cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.4 1997/03/25 21:28:12 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.4 1997/03/25 21:28:12 deraadt Exp $";
d75 1
d89 2
a90 1
	while ((c = getopt(argc, argv, "HmTu")) != -1) {
d92 3
d98 3
a106 3
		case 'H':
			show_labels = 1;
			break;
d115 4
d133 14
d159 14
d308 1
a308 1
	(void)fprintf(stderr, "usage: who [-mTuH] [ file ]\n       who am i\n");
@


1.4
log
@correct string empty test; yokota@@freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.3 1997/01/17 07:13:50 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.3 1997/01/17 07:13:50 millert Exp $";
d63 7
a70 3
void output __P((struct utmp *));
void who_am_i __P((FILE *));
void usage __P((void));
d74 1
d82 1
a82 1
	FILE *ufp, *file();
d85 4
a88 1
	while ((c = getopt(argc, argv, "mTu")) != -1) {
d99 3
d115 3
d163 1
a163 1
	if (p = ttyname(0)) {
d165 1
a165 1
		if (t = strrchr(p, '/'))
d190 1
a190 1
	char state;
d192 1
a192 1
	time_t idle;
d236 19
d271 1
a271 1
	(void)fprintf(stderr, "usage: who [-mTu] [ file ]\n       who am i\n");
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.2 1996/06/26 05:43:00 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.2 1996/06/26 05:43:00 deraadt Exp $";
d154 1
a154 1
			if (usr.ut_name && !strcmp(usr.ut_line, p)) {
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: who.c,v 1.4 1994/12/07 04:28:49 jtc Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: who.c,v 1.4 1994/12/07 04:28:49 jtc Exp $";
d151 1
a151 1
		if (t = rindex(p, '/'))
@


1.1
log
@Initial revision
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: who.c,v 1.4 1994/12/07 04:28:49 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
