head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.14
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.16
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.12
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.22
	OPENBSD_5_0:1.3.0.20
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.18
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.16
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.03.14.07.35.53;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.03.21.15.06;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.29.11.02.53;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.25.19.34.22;	author otto;	state Exp;
branches;
next	;


desc
@@


1.4
log
@repair function when used with different scales; from AIDA Shinra, thanks!
@
text
@/*      $OpenBSD: bc.library,v 1.3 2007/02/03 21:15:06 otto Exp $	*/

/*
 * Copyright (C) Caldera International Inc.  2001-2002.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code and documentation must retain the above
 *    copyright notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed or owned by Caldera
 *      International, Inc.
 * 4. Neither the name of Caldera International, Inc. nor the names of other
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
 * INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE FOR ANY DIRECT,
 * INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *	@@(#)bc.library	5.1 (Berkeley) 4/17/91
 */

scale = 20
define e(x) {
	auto a, b, c, d, e, g, t, w, y, r

	r = ibase
	ibase = A
	t = scale
	scale = 0
	if (x > 0) scale = (0.435*x)/1
	scale = scale + t + length(scale + t) + 1

	w = 0
	if (x < 0) {
		x = -x
		w = 1
	}
	y = 0
	while (x > 2) {
		x = x/2
		y = y + 1
	}

	a = 1
	b = 1
	c = b
	d = 1
	e = 1
	for (a = 1; 1 == 1; a++) {
		b = b*x
		c = c*a + b
		d = d*a
		g = c/d
		if (g == e) {
			g = g/1
			while (y--) {
				g = g*g
			}
			scale = t
			ibase = r
			if (w == 1) return (1/g)
			return (g/1)
		}
		e = g
	}
}

define l(x) {
	auto a, b, c, d, e, f, g, u, s, t, r
	r = ibase
	ibase = A
	if (x <= 0) {
		a = (1 - 10^scale)
		ibase = r
		return (a)
	}
	t = scale

	f = 1
	if (x < 1) {
		s = scale(x)
	} else {
		s = length(x)-scale(x)
	}
	scale = 0
	a = (2.31*s)/1 /* estimated integer part of the answer */
	s = t + length(a) + 2 /* estimated length of the answer */
	while (x > 2) {
		scale = 0
		scale = (length(x) + scale(x))/2 + 1
		if (scale < s) scale = s
		x = sqrt(x)
		f = f*2
	}
	while (x < .5) {
		scale = 0
		scale = scale(x)/2 + 1
		if (scale < s) scale = s
		x = sqrt(x)
		f = f*2
	}

	scale = 0
	scale = t + length(f) + length((1.05*(t+length(f))/1)) + 1
	u = (x - 1)/(x + 1)
	s = u*u
	scale = t + 2
	b = 2*f
	c = b
	d = 1
	e = 1
	for (a = 3; 1 == 1 ; a = a + 2) {
		b = b*s
		c = c*a + d*b
		d = d*a
		g = c/d
		if (g == e) {
			scale = t
			ibase = r
			return (u*c/d)
		}
		e = g
	}
}

define s(x) {
	auto a, b, c, s, t, y, p, n, i, r
	r = ibase
	ibase = A
	t = scale
	y = x/.7853
	s = t + length(y) - scale(y)
	if (s < t) s = t
	scale = s
	p = a(1)

	scale = 0
	if (x >= 0) n = (x/(2*p) + 1)/2
	if (x < 0) n = (x/(2*p) - 1)/2
	x = x - 4*n*p
	if (n % 2 != 0) x = -x

	scale = t + length(1.2*t) - scale(1.2*t)
	y = -x*x
	a = x
	b = 1
	s = x
	for (i =3 ; 1 == 1; i = i + 2) {
		a = a*y
		b = b*i*(i - 1)
		c = a/b
		if (c == 0) {
			scale = t
			ibase = r
			return (s/1)
		}
		s = s + c
	}
}

define c(x) {
	auto t, r
	r = ibase
	ibase = A
	t = scale
	scale = scale + 1
	x = s(x + 2*a(1))
	scale = t
	ibase = r
	return (x/1)
}

define a(x) {
	auto a, b, c, d, e, f, g, s, t, r
	if (x == 0) return(0)

	r = ibase
	ibase = A
	if (x == 1) {
		if (scale < 52) {
			 a = .7853981633974483096156608458198757210492923498437764/1
			 ibase = r
			 return (a)
		}
	}
	t = scale
	f = 1
	while (x > .5) {
		scale = scale + 1
		x = -(1 - sqrt(1. + x*x))/x
		f = f*2
	}
	while (x < -.5) {
		scale = scale + 1
		x = -(1 - sqrt(1. + x*x))/x
		f = f*2
	}
	s = -x*x
	b = f
	c = f
	d = 1
	e = 1
	for (a = 3; 1 == 1; a = a + 2) {
		b = b*s
		c = c*a + d*b
		d = d*a
		g = c/d
		if (g == e) {
			ibase = r
			scale = t
			return (x*c/d)
		}
		e = g
	}
}

define j(n,x) {
	auto a, b, c, d, e, g, i, s, k, t, r

	r = ibase
	ibase = A
	t = scale
	k = 1.36*x + 1.16*t - n
	k = length(k) - scale(k)
	if (k > 0) scale = scale + k

	s = -x*x/4
	if (n < 0) {
		n = -n
		x = -x
	}
	a = 1
	c = 1
	for (i = 1; i <= n; i++) {
		a = a*x
		c = c*2*i
	}
	b = a
	d = 1
	e = 1
	for (i = 1; 1; i++) {
		a = a*s
		b = b*i*(n + i) + a
		c = c*i*(n + i)
		g = b/c
		if (g == e) {
			ibase = r
			scale = t
			return (g/1)
		}
		e = g
	}
}
@


1.3
log
@Save and restore not only scale, but ibase as well. Problem noted my
Karel Kulhavy.
@
text
@d1 1
a1 1
/*      $OpenBSD: bc.library,v 1.2 2007/01/29 11:02:53 otto Exp $	*/
d48 3
a50 1
	scale = t + .434*x + 1
d99 8
a106 2
	scale = scale + scale(x) - length(x) + 1
	s = scale
d108 3
a110 2
		s = s + (length(x) - scale(x))/2 + 1
		if (s > 0) scale = s
d115 3
a117 2
		s = s + (length(x) - scale(x))/2 + 1
		if (s > 0) scale = s
d122 2
a123 1
	scale = t + length(f) - scale(f) + 1
a124 2

	scale = scale + 1.1*length(t) - 1.1*scale(t)
d126 1
@


1.2
log
@whitespace, no change in code produced by bc -dl
@
text
@d1 1
a1 1
/*      $OpenBSD: bc.library,v 1.1 2003/09/25 19:34:22 otto Exp $	*/
d43 1
a43 1
	auto a, b, c, d, e, g, t, w, y
d45 2
d77 3
a79 2
			if (w == 1) return(1/g)
			return(g/1)
d86 8
a93 2
	auto a, b, c, d, e, f, g, u, s, t
	if (x <= 0) return (1 - 10^scale)
d128 1
d136 3
a138 1
	auto a, b, c, s, t, y, p, n, i
d163 1
d171 3
a173 1
	auto t
d178 1
d183 1
a183 1
	auto a, b, c, d, e, f, g, s, t
d185 3
d190 3
a192 1
			return(.7853981633974483096156608458198757210492923498437764/1)
d218 1
d227 1
a227 1
	auto a,b,c,d,e,g,i,s,k,t
d229 2
d256 1
@


1.1
log
@bc.library and bc.1 manual page using the Caldera license.

ok deraadt@@
@
text
@d1 1
a1 1
/*      $OpenBSD$	*/
d42 1
a42 1
define e(x){
d49 1
a49 1
	if(x<0){
d54 1
a54 1
	while(x>2){
d59 9
a67 9
	a=1
	b=1
	c=b
	d=1
	e=1
	for(a=1;1==1;a++){
		b=b*x
		c=c*a+b
		d=d*a
d69 1
a69 1
		if(g == e){
d71 1
a71 1
			while(y--){
d75 1
a75 1
			if(w==1) return(1/g)
d78 1
a78 1
		e=g
d82 1
a82 1
define l(x){
d84 1
a84 1
	if(x <=0) return(1-10^scale)
d87 1
a87 1
	f=1
d89 4
a92 4
	s=scale
	while(x > 2){
		s = s + (length(x)-scale(x))/2 + 1
		if(s>0) scale = s
d94 1
a94 1
		f=f*2
d96 3
a98 3
	while(x < .5){
		s = s + (length(x)-scale(x))/2 + 1
		if(s>0) scale = s
d100 1
a100 1
		f=f*2
d104 1
a104 1
	u = (x-1)/(x+1)
d112 6
a117 6
	for(a=3;1==1;a=a+2){
		b=b*s
		c=c*a+d*b
		d=d*a
		g=c/d
		if(g==e){
d119 1
a119 1
			return(u*c/d)
d121 1
a121 1
		e=g
d125 1
a125 1
define s(x){
d130 1
a130 1
	if(s<t) s=t
d135 2
a136 2
	if(x>=0) n = (x/(2*p)+1)/2
	if(x<0) n = (x/(2*p)-1)/2
d138 1
a138 1
	if(n%2!=0) x = -x
d145 1
a145 1
	for(i=3; 1==1; i=i+2){
d147 1
a147 1
		b = b*i*(i-1)
d149 5
a153 2
		if(c==0){scale=t; return(s/1)}
		s = s+c
d157 1
a157 1
define c(x){
d160 2
a161 2
	scale = scale+1
	x = s(x+2*a(1))
d163 1
a163 1
	return(x/1)
d166 1
a166 1
define a(x){
d168 3
a170 3
	if(x==0) return(0)
	if(x==1) {
		if(scale<52) {
d175 2
a176 2
	f=1
	while(x > .5){
d178 2
a179 2
		x= -(1-sqrt(1.+x*x))/x
		f=f*2
d181 1
a181 1
	while(x < -.5){
d183 2
a184 2
		x = -(1-sqrt(1.+x*x))/x
		f=f*2
d191 6
a196 6
	for(a=3;1==1;a=a+2){
		b=b*s
		c=c*a+d*b
		d=d*a
		g=c/d
		if(g==e){
d198 1
a198 1
			return(x*c/d)
d200 1
a200 1
		e=g
d204 1
a204 1
define j(n,x){
d210 1
a210 1
	if(k>0) scale = scale + k
d212 9
a220 9
	s= -x*x/4
	if(n<0){
		n= -n
		x= -x
	}
	a=1
	c=1
	for(i=1;i<=n;i++){
		a=a*x
d223 9
a231 9
	b=a
	d=1
	e=1
	for(i=1;1;i++){
		a=a*s
		b=b*i*(n+i) + a
		c=c*i*(n+i)
		g=b/c
		if(g==e){
d233 1
a233 1
			return(g/1)
d235 1
a235 1
		e=g
@

