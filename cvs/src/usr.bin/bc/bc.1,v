head	1.32;
access;
symbols
	OPENBSD_6_2:1.32.0.6
	OPENBSD_6_2_BASE:1.32
	OPENBSD_6_1:1.32.0.8
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.32.0.4
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.30.0.10
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.30.0.6
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.30.0.4
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.29.0.8
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.29.0.6
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.4
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.2
	OPENBSD_5_0:1.28.0.2
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.25.0.4
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.23.0.6
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.2
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.22.0.6
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.4
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.2
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.20.0.6
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.4
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.2
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.18.0.4
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15;
locks; strict;
comment	@.\" @;


1.32
date	2015.11.17.05.45.35;	author mmcc;	state Exp;
branches;
next	1.31;
commitid	soqJL4WtPxpknRxu;

1.31
date	2015.11.15.17.39.20;	author mmcc;	state Exp;
branches;
next	1.30;
commitid	gxx1A6XHtp6sIvM4;

1.30
date	2014.01.14.07.42.42;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2011.08.30.12.25.09;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2011.03.07.09.56.51;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.07.08.11.15;	author otto;	state Exp;
branches;
next	1.26;

1.26
date	2010.10.18.14.42.16;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2010.01.02.19.48.56;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.16.15.09.54;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2009.02.08.17.15.09;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2007.05.31.19.20.07;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.30.04.41.33;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.29.08.27.25;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.30.20.34.25;	author jaredy;	state Exp;
branches;
next	1.18;

1.18
date	2004.10.19.07.36.51;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2004.08.25.21.59.59;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.21.08.21.42;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.02.09.00.48;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.17.11.21.00;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.12.19.35.54;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.11.19.49.40;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.11.09.16.53;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.09.19.27.27;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.22.12.24.41;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.20.09.27.48;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.19.19.21.48;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.18.19.57.10;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.26.13.47.16;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.26.11.21.26;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.26.07.30.09;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.26.07.02.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.25.19.34.22;	author otto;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Clarify sentence about `quit` in BUGS section.

From schwarze@@, "yes, please" -jmc@@
@
text
@.\"	$OpenBSD: bc.1,v 1.31 2015/11/15 17:39:20 mmcc Exp $
.\"
.\" Copyright (C) Caldera International Inc.  2001-2002.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code and documentation must retain the above
.\"    copyright notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed or owned by Caldera
.\"	International, Inc.
.\" 4. Neither the name of Caldera International, Inc. nor the names of other
.\"    contributors may be used to endorse or promote products derived from
.\"    this software without specific prior written permission.
.\"
.\" USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
.\" INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE FOR ANY DIRECT,
.\" INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	@@(#)bc.1	6.8 (Berkeley) 8/8/91
.\"
.Dd $Mdocdate: November 15 2015 $
.Dt BC 1
.Os
.Sh NAME
.Nm bc
.Nd arbitrary-precision arithmetic language and calculator
.Sh SYNOPSIS
.Nm bc
.Op Fl cl
.Op Fl e Ar expression
.Op Ar file ...
.Sh DESCRIPTION
.Nm
is an interactive processor for a language which resembles
C but provides unlimited precision arithmetic.
It takes input from any expressions on the command line and
any files given, then reads the standard input.
.Pp
Options available:
.Bl -tag -width Ds
.It Fl c
.Nm
is actually a preprocessor for
.Xr dc 1 ,
which it invokes automatically, unless the
.Fl c
.Pq compile only
option is present.
In this case the generated
.Xr dc 1
instructions are sent to the standard output,
instead of being interpreted by a running
.Xr dc 1
process.
.It Fl e Ar expression
Evaluate
.Ar expression .
If multiple
.Fl e
options are specified, they are processed in the order given,
separated by newlines.
.It Fl l
Allow specification of an arbitrary precision math library.
The definitions in the library are available to command line
expressions.
.El
.Pp
The syntax for
.Nm
programs is as follows:
.Sq L
means letter a-z;
.Sq E
means expression;
.Sq S
means statement.
As a non-portable extension, it is possible to use long names
in addition to single letter names.
A long name is a sequence starting with a lowercase letter
followed by any number of lowercase letters and digits.
The underscore character
.Pq Sq _
counts as a letter.
.Pp
Comments
.Bd -unfilled -offset indent -compact
are enclosed in /* and */
are enclosed in # and the next newline
.Ed
.Pp
The newline is not part of the line comment,
which in itself is a non-portable extension.
.Pp
Names
.Bd -unfilled -offset indent -compact
simple variables: L
array elements: L [ E ]
The words `ibase', `obase', and `scale'
The word `last' or a single dot
.Ed
.Pp
Other operands
.Bd -unfilled -offset indent -compact
arbitrarily long numbers with optional sign and decimal point
( E )
sqrt ( E )
length ( E )	number of significant decimal digits
scale ( E )	number of digits right of decimal point
L ( E , ... , E )
.Ed
.Pp
The sequence
.Sq \e<newline><whitespace>
is ignored within numbers.
.Pp
Operators
.Pp
The following arithmetic and logical operators can be used.
The semantics of the operators is the same as in the C language.
They are listed in order of decreasing precedence.
Operators in the same group have the same precedence.
.Bl -column "= += \-= *= /= %= ^=" "Associativity" "multiply, divide, modulus" -offset indent
.It Sy "Operator" Ta Sy "Associativity" Ta Sy "Description"
.It "++ \-\-" Ta "none" Ta "increment, decrement"
.It "\-" Ta "none" Ta "unary minus"
.It "^" Ta "right" Ta "power"
.It "* / %" Ta "left" Ta "multiply, divide, modulus"
.It "+ \-" Ta "left" Ta "plus, minus"
.It "= += -= *= /= %= ^=" Ta "right" Ta "assignment"
.It "== <= >= != < >" Ta "none" Ta "relational"
.It "!" Ta "none" Ta "boolean not"
.It "&&" Ta "left" Ta "boolean and"
.It "||" Ta "left" Ta "boolean or"
.El
.Pp
Note the following:
.Bl -bullet -offset indent
.It
The relational operators may appear in any expression.
The
.St -p1003.1-2008
standard only allows them in the conditional expression of an
.Sq if ,
.Sq while
or
.Sq for
statement.
.It
The relational operators have a lower precedence than the assignment
operators.
This has the consequence that the expression
.Sy a = b < c
is interpreted as
.Sy (a = b) < c ,
which is probably not what the programmer intended.
.It
In contrast with the C language, the relational operators all have
the same precedence, and are non-associative.
The expression
.Sy a < b < c
will produce a syntax error.
.It
The boolean operators (!, && and ||) are non-portable extensions.
.It
The boolean not
(!) operator has much lower precedence than the same operator in the
C language.
This has the consequence that the expression
.Sy !a < b
is interpreted as
.Sy !(a < b) .
Prudent programmers use parentheses when writing expressions involving
boolean operators.
.El
.Pp
Statements
.Bd -unfilled -offset indent -compact
E
{ S ; ... ; S }
if ( E ) S
if ( E ) S else S
while ( E ) S
for ( E ; E ; E ) S
null statement
break
continue
quit
a string of characters, enclosed in double quotes
print E ,..., E
.Ed
.Pp
A string may contain any character, except double quote.
The if statement with an else branch is a non-portable extension.
All three E's in a for statement may be empty.
This is a non-portable extension.
The continue and print statements are also non-portable extensions.
.Pp
The print statement takes a list of comma-separated expressions.
Each expression in the list is evaluated and the computed
value is printed and assigned to the variable `last'.
No trailing newline is printed.
The expression may also be a string enclosed in double quotes.
Within these strings the following escape sequences may be used:
.Sq \ea
for bell (alert),
.Sq \eb
for backspace,
.Sq \ef
for formfeed,
.Sq \en
for newline,
.Sq \er
for carriage return,
.Sq \et
for tab,
.Sq \eq
for double quote and
.Sq \e\e
for backslash.
Any other character following a backslash will be ignored.
Strings will not be assigned to `last'.
.Pp
Function definitions
.Bd -unfilled -offset indent
define L ( L ,..., L ) {
	auto L, ... , L
	S; ... S
	return ( E )
}
.Ed
.Pp
As a non-portable extension, the opening brace of the define statement
may appear on the next line.
The return statement may also appear in the following forms:
.Bd -unfilled -offset indent
return
return ()
return E
.Ed
.Pp
The first two are equivalent to the statement
.Dq return 0 .
The last form is a non-portable extension.
Not specifying a return statement is equivalent to writing
.Dq return (0) .
.Pp
Functions available in the math library, which is loaded by specifying the
.Fl l
flag on the command line
.Pp
.Bl -tag -width j(n,x) -offset indent -compact
.It s(x)
sine
.It c(x)
cosine
.It e(x)
exponential
.It l(x)
log
.It a(x)
arctangent
.It j(n,x)
Bessel function
.El
.Pp
All function arguments are passed by value.
.Pp
The value of a statement that is an expression is printed
unless the main operator is an assignment.
The value printed is assigned to the special variable `last'.
This is a non-portable extension.
A single dot may be used as a synonym for `last'.
Either semicolons or newlines may separate statements.
Assignment to
.Ar scale
influences the number of digits to be retained on arithmetic
operations in the manner of
.Xr dc 1 .
Assignments to
.Ar ibase
or
.Ar obase
set the input and output number radix respectively.
.Pp
The same letter may be used as an array, a function,
and a simple variable simultaneously.
All variables are global to the program.
`Auto' variables are pushed down during function calls.
When using arrays as function arguments
or defining them as automatic variables,
empty square brackets must follow the array name.
.Pp
For example
.Bd -literal -offset indent
scale = 20
define e(x){
	auto a, b, c, i, s
	a = 1
	b = 1
	s = 1
	for(i=1; 1==1; i++){
		a = a*x
		b = b*i
		c = a/b
		if(c == 0) return(s)
		s = s+c
	}
}
.Ed
.Pp
defines a function to compute an approximate value of
the exponential function and
.Pp
.Dl for(i=1; i<=10; i++) e(i)
.Pp
prints approximate values of the exponential function of
the first ten integers.
.Bd -literal -offset indent
$ bc -l -e 'scale = 500; 2 * a(2^10000)' -e quit
.Ed
.Pp
prints an approximation of pi.
.Sh COMMAND LINE EDITING
.Nm
supports interactive command line editing, via the
.Xr editline 3
library.
It is enabled by default if input is from a tty.
Previous lines can be recalled and edited with the arrow keys,
and other GNU Emacs-style editing keys may be used as well.
.Pp
The
.Xr editline 3
library is configured with a
.Pa .editrc
file \- refer to
.Xr editrc 5
for more information.
.Sh FILES
.Bl -tag -width /usr/share/misc/bc.library -compact
.It Pa /usr/share/misc/bc.library
math library, read when the
.Fl l
option is specified on the command line.
.El
.Sh SEE ALSO
.Xr dc 1
.Sh STANDARDS
The
.Nm
utility is compliant with the
.St -p1003.1-2008
specification.
.Pp
The flags
.Op Fl ce ,
as well as the parts noted above,
are extensions to that specification.
.Sh HISTORY
The
.Nm
command first appeared in
.At v6 .
A complete rewrite of the
.Nm
command first appeared in
.Ox 3.5 .
.Sh AUTHORS
.An -nosplit
The original version of the
.Nm
command was written by
.An Robert Morris
and
.An Lorinda Cherry .
The current version of the
.Nm
utility was written by
.An Otto Moerbeek .
.Sh BUGS
The
.Ql quit
statement is interpreted when read, not when executed.
.Pp
Some non-portable extensions, as found in the GNU version of the
.Nm
utility are not implemented (yet).
@


1.31
log
@'.Ql Quit' -> '.Ql quit' because only the lowercase command is valid.
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.30 2014/01/14 07:42:42 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate: January 14 2014 $
d397 1
d399 1
a399 1
is interpreted when read, not when executed.
@


1.30
log
@update references to posix-2008, and point STANDARDS to some of the extension
notes listed in DESCRIPTION, for completeness sake;

ok otto sobrado
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.29 2011/08/30 12:25:09 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate: August 30 2011 $
d397 1
a397 1
.Ql Quit
@


1.29
log
@in column lists, enforce the following ordering:

	.Bl -column header1 header2 ... <Bl flags>

mixing things up confuses mandoc, and adding flags in can screw up the list.
this hopefully just makes things a bit safer (and more consistent).

(one more bit of work left and all column lists should format how we want)
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.28 2011/03/07 09:56:51 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate: March 7 2011 $
d157 1
a157 1
.St -p1003.2
d372 2
a373 1
.Op Fl ce
@


1.28
log
@no Pp before/after Sh;
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.27 2011/03/07 08:11:15 otto Exp $
d138 1
a138 2
.Bl -column -offset indent "= += \-= *= /= %= ^=" "Associativity" \
"multiply, divide, modulus"
@


1.27
log
@add editline support; from freebsd. ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.27 2011/03/07 08:09:25 otto Exp $
a355 1
.Pp
@


1.26
log
@remove references to now removed usd/psd/smm docs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.25 2010/01/02 19:48:56 schwarze Exp $
d37 1
a37 1
.Dd $Mdocdate: January 2 2010 $
d340 17
@


1.25
log
@The .Os macro is not optional.  Even with groff(1),
forgetting it lets the footer line look incomplete and unbalanced.
Markup error found by mandoc(1), also required to fix the mandoc build.
ok jmc@@ sobrado@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.24 2009/07/16 15:09:54 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate: July 16 2009 $
a348 3
.Pp
"BC \- An Arbitrary Precision Desk-Calculator Language",
.Pa /usr/share/doc/usd/06.bc/ .
@


1.24
log
@fix word order;
from gb, documentation/6191
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.23 2009/02/08 17:15:09 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate: February 8 2009 $
d39 1
@


1.23
log
@bump the posix reference in STANDARDS to IEEE Std 1003.1-2008, with a few
updates to follow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.22 2007/05/31 19:20:07 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate: May 31 2007 $
d364 1
a364 1
first command appeared in
@


1.22
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.21 2007/05/30 04:41:33 jmc Exp $
d37 1
a37 1
.Dd $Mdocdate$
d355 1
a355 1
.St -p1003.1-2004
@


1.21
log
@- use a consistent text for STANDARDS
- note which options are extensions to POSIX
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.20 2005/10/29 08:27:25 jmc Exp $
d37 1
a37 1
.Dd August 8, 1991
@


1.20
log
@do not put a .Pp before a display;
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.19 2005/09/30 20:34:25 jaredy Exp $
d354 2
a355 2
utility is expected to conform to the
.St -p1003.2
d357 4
@


1.19
log
@deploy .An -nosplit; ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.18 2004/10/19 07:36:51 otto Exp $
a333 1
.Pp
@


1.18
log
@Implement -e expression, for command line expression evaluation.
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.17 2004/08/25 21:59:59 jmc Exp $
d368 1
@


1.17
log
@typos from -f (PR #3907);
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.16 2004/04/21 08:21:42 jmc Exp $
d45 1
d51 2
a52 2
It takes input from any files given, then reads
the standard input.
d70 7
d78 3
a80 2
Allow specification
of an arbitrary precision math library.
d334 6
@


1.16
log
@point people to usd doc;
ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.15 2003/12/02 09:00:48 otto Exp $
d175 1
a175 1
This has the consquence that the expression
d177 1
a177 1
is interpeted as
@


1.15
log
@Describe long variable names, a non-portable extension.

help and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.14 2003/11/17 11:21:00 otto Exp $
d334 3
a336 6
.Rs
.%B USD:06
.%A L. L. Cherry
.%A R. Morris
.%T "BC \- An arbitrary precision desk-calculator language"
.Re
@


1.14
log
@Document non-portable extensions:
o boolean operators !, && and ||.
o allow relational operators to appear in any expression, not just
  conditional expressions.

help and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.13 2003/11/12 19:35:54 jmc Exp $
d83 7
@


1.13
log
@kill some .Pp's before displays;
ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.12 2003/11/11 19:49:40 otto Exp $
d116 59
a174 6
.Bd -unfilled -offset indent -compact
+  \-  *  /  %  ^ (`%' is remainder; `^' is power)
++   \-\-         (prefix and postfix; apply to names)
==  <=  >=  !=  <  >
=  +=  \-=  *=  /=  %=  ^=
.Ed
d328 1
a328 2
.%B USD
.%V 06
a359 7
No
.Sq && ,
.Sq \(or\(or ,
or
.Sq \&!
operators.
.Pp
@


1.12
log
@Some syntactic sugar (all non-portable extensions):
- a line comment, starting with #
- opening brace of define statement may be on next line
- return expression, equivalent to return (expression)

tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.11 2003/11/11 09:16:53 otto Exp $
d171 1
a171 2
.Pp
.Bd -unfilled -offset indent -compact
a181 1
.Pp
@


1.11
log
@Document new 'print' statement, plus some tweaks.

help and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.10 2003/11/09 19:27:27 otto Exp $
d87 1
d90 3
d179 16
@


1.10
log
@Introduce `last' as a synonym for `.' and document them.
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.9 2003/10/22 12:24:41 otto Exp $
d107 4
d132 1
d135 1
d139 26
a164 1
The continue statement is also a non-portable extension.
d167 1
d176 3
a178 4
The sequence
.Sq \e\<newline><whitespace>
is ignored within numbers.
A string may contain any character, except double quote.
a179 3
Functions in
.Fl lm
math library
d247 7
d257 2
d272 1
a272 1
command appeared in
d274 15
@


1.9
log
@Implement if ... else statement. If you do not use 'else', code generated
is still classic dc(1) compatible. If you do use 'else', you'll need a dc(1)
that implements the new extended comparison operators like '=xey'.
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.8 2003/10/20 09:27:48 jmc Exp $
d94 1
d171 3
@


1.8
log
@tweaks;
ok otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.7 2003/10/19 19:21:48 otto Exp $
d119 1
d129 1
@


1.7
log
@Allow the expressions in for (E ; E ; E ) to be empty.
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.6 2003/10/18 19:57:10 otto Exp $
d128 1
a128 1
The E's in a for statement may all three be empty.
d130 1
a130 1
The continue statement also is a non-portable extension.
a237 1
.Pp
@


1.6
log
@o Fix assignment operators (+=, -=, ... )
o Implement "continue" in loops. If continue is not used, generated code is
  still "classic" dc(1) compatible. If continue is used, you'll need a dc(1)
  that implements the J and M operators.
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.5 2003/09/26 13:47:16 otto Exp $
d128 4
a238 2
.Ql For
statements must have all three E's.
@


1.5
log
@File args are optional. Document strings and \<newline><whitespace> in
numbers.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.4 2003/09/26 11:21:26 jmc Exp $
d123 1
d125 1
a125 1
a string of letters, enclosed in double quotes
d140 1
a140 1
The newline character may be part part of a string.
@


1.4
log
@cleanup, and an ammendment from otto@@;
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.3 2003/09/26 07:30:09 otto Exp $
d45 1
a45 1
.Ar
d124 1
d135 5
@


1.3
log
@Add a line saying we should conform to Posix. Also warn we do not have
non-portable extensions from GNU bc(1).
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.2 2003/09/26 07:02:52 deraadt Exp $
d40 1
a40 1
.Nm \&bc
d43 2
a44 3
.Nm \&bc
.Op Fl c
.Op Fl l
d47 1
a47 1
.Nm \&Bc
d54 1
a54 4
.Bl -tag -width flag
.It Fl l
allow specification
of an arbitrary precision math library.
d56 1
a56 1
.Nm \&Bc
d58 1
a58 1
.Ar \&dc 1 ,
d61 1
a61 1
compile only.
d63 9
a71 3
In this case the
.Ar \&dc
input is sent to the standard output instead.
d75 8
a82 4
.Nm \&bc
programs is as follows;
L means letter a-z,
E means expression, S means statement.
d86 1
a86 1
are enclosed in /* and */.
d98 2
a99 2
arbitrarily long numbers with optional sign and decimal point.
\&( E \&)
d108 4
a111 4
\&+  \-  *  /  %  ^ (% is remainder; ^ is power)
\&++   \-\-         (prefix and postfix; apply to names)
\&==  <=  >=  !=  <  >
\&=  +=  \-=  *=  /=  %=  ^=
d136 1
a136 1
.Fl l
d162 1
a162 1
.Xr \&dc 1 .
d174 1
a174 1
or defining them as automatic variables
a201 6
.Sh FILES
.\" /usr/lib/lib.b	mathematical library
.Bl -tag -width xxxxx -compact
.It Xr \&dc 1
Desk calculator Proper.
.El
d203 1
a203 1
.Xr \&dc 1
d214 1
a214 1
specification. 
d217 1
a217 1
.Nm \&bc
d221 6
a226 1
No &&, \(or\\(or, or ! operators.
d229 1
a229 1
statement must have all three E's.
@


1.2
log
@spacing
@
text
@d1 1
a1 1
.\"	$OpenBSD: bc.1,v 1.1 2003/09/25 19:34:22 otto Exp $
d209 6
d228 4
@


1.1
log
@bc.library and bc.1 manual page using the Caldera license.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d70 1
a70 1
.El 
@

