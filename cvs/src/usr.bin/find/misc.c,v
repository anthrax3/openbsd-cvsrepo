head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.10
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.26
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.22
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.20
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.4.0.18
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.16
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.07.14.17.18.48;	author millert;	state Exp;
branches;
next	1.14;
commitid	WgN1riAcy7DueRDB;

1.14
date	2015.07.14.16.58.22;	author millert;	state Exp;
branches;
next	1.13;
commitid	tRPWskg39BVqg3Ff;

1.13
date	2015.07.14.16.16.07;	author millert;	state Exp;
branches;
next	1.12;
commitid	goKpXN1ztZYHq4lV;

1.12
date	2014.05.18.08.10.00;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.38;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.26.22.22.26;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.26.07.27.29;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.19.19.02.13;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.17.19.50.53;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.16.23.54.38;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.30.23.54.08;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.24.03.46.05;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.33.12;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Don't dereference a freed pointer when updating the value of p.
Noted by tedu@@
@
text
@/*	$OpenBSD: misc.c,v 1.14 2015/07/14 16:58:22 millert Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Cimarron D. Taylor of the University of California, Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/uio.h>

#include <err.h>
#include <errno.h>
#include <fts.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "find.h"
 
/*
 * brace_subst --
 *	Replace occurrences of {} in s1 with s2 and return the result string.
 */
void
brace_subst(char *orig, char **store, char *path, int len)
{
	int plen;
	char ch, *p;

	plen = strlen(path);
	for (p = *store; (ch = *orig); ++orig)
		if (ch == '{' && orig[1] == '}') {
			while ((p - *store) + plen > len) {
				ptrdiff_t p_off;
				char *newstore;

				p_off = (p - *store);
				newstore = reallocarray(*store, len, 2);
				if (newstore == NULL)
					err(1, NULL);
				p = newstore + p_off;
				*store = newstore;
				len *= 2;
			}
			memmove(p, path, plen);
			p += plen;
			++orig;
		} else
			*p++ = ch;
	*p = '\0';
}

/*
 * queryuser --
 *	print a message to standard error and then read input from standard
 *	input. If the input is 'y' then 1 is returned.
 */
int
queryuser(char **argv)
{
	int ch, first, nl;

	(void)fprintf(stderr, "\"%s", *argv);
	while (*++argv)
		(void)fprintf(stderr, " %s", *argv);
	(void)fprintf(stderr, "\"? ");
	(void)fflush(stderr);

	first = ch = getchar();
	for (nl = 0;;) {
		if (ch == '\n') {
			nl = 1;
			break;
		}
		if (ch == EOF)
			break;
		ch = getchar();
	}

	if (!nl) {
		(void)fprintf(stderr, "\n");
		(void)fflush(stderr);
	}
        return (first == 'y');
}
 
/*
 * emalloc --
 *	malloc with error checking.
 */
void *
emalloc(size_t len)
{
	void *p;

	if ((p = malloc(len)))
		return (p);
	err(1, NULL);
}

void *
ereallocarray(void *oldp, size_t sz1, size_t sz2)
{
	void *p;

	if ((p = reallocarray(oldp, sz1, sz2)) != NULL)
		return (p);
	err(1, NULL);
}

/*
 * show_path --
 *	called on SIGINFO
 */
/* ARGSUSED */
void
show_path(int signo)
{
	int save_errno = errno;
	extern FTSENT *entry;
	struct iovec iov[3];

	if (entry != NULL) {
		iov[0].iov_base = "find path: ";
		iov[0].iov_len = strlen(iov[0].iov_base);
		iov[1].iov_base = entry->fts_path;
		iov[1].iov_len = entry->fts_pathlen;
		iov[2].iov_base = "\n";
		iov[2].iov_len = strlen(iov[2].iov_base);
		writev(STDERR_FILENO, iov, 3);
		errno = save_errno;
	}
}
@


1.14
log
@Convert the last remaining realloc() in find to reallocarray().
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.12 2014/05/18 08:10:00 espie Exp $	*/
d42 1
d64 1
d67 1
d71 1
a71 1
				p = (p - *store) + newstore;
@


1.13
log
@In brace_subst() if we realloc() the store, update p so that it
points into the new store, not the old one.  From Gregor Best.
@
text
@a62 1
				int newlen = len * 2;
d65 2
a66 1
				if (!(newstore = realloc(*store, newlen)))
d70 1
a70 1
				len = newlen;
@


1.12
log
@use reallocarray
okay chl@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.11 2009/10/27 23:59:38 deraadt Exp $	*/
d68 1
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.10 2003/09/26 22:22:26 tedu Exp $	*/
d118 1
a118 1
emalloc(u_int len)
d123 10
@


1.10
log
@better realloc.  ok deraadt@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.9 2003/06/26 07:27:29 deraadt Exp $	*/
a33 5

#ifndef lint
/*static char sccsid[] = "from: @@(#)misc.c	8.1 (Berkeley) 6/6/93";*/
static char rcsid[] = "$OpenBSD: misc.c,v 1.9 2003/06/26 07:27:29 deraadt Exp $";
#endif /* not lint */
@


1.9
log
@bring protypes into scope.  this requires some quirky handling, but in
the end everything is much clearer; ok tedu (itojun might like to see
how ifconfig looks after this)
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.8 2003/06/03 02:56:08 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.8 2003/06/03 02:56:08 millert Exp $";
d67 5
a71 2
			while ((p - *store) + plen > len)
				if (!(*store = realloc(*store, len *= 2)))
d73 3
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.7 2001/11/19 19:02:13 mpech Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.7 2001/11/19 19:02:13 mpech Exp $";
d42 1
d59 1
a59 3
brace_subst(orig, store, path, len)
	char *orig, **store, *path;
	int len;
d84 1
a84 2
queryuser(argv)
	char **argv;
d117 1
a117 2
emalloc(len)
	u_int len;
d132 1
a132 2
show_path(sig)
	int sig;
d136 1
d139 7
a145 3
		write(STDERR_FILENO, "find path: ", 11);
		write(STDERR_FILENO, entry->fts_path, entry->fts_pathlen);
		write(STDERR_FILENO, "\n", 1);
@


1.7
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.6 2001/11/17 19:50:53 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.6 2001/11/17 19:50:53 millert Exp $";
@


1.6
log
@o Block signals when running fts_read() so the SIGINFO handler will
  be sure to have a valid "entry" pointer
o In SIGINFO handler, do nothing if "entry" is NULL (Theo)
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.5 2001/11/16 23:54:38 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.5 2001/11/16 23:54:38 deraadt Exp $";
d66 2
a67 2
	register int plen;
	register char ch, *p;
d90 1
a90 1
	register char **argv;
@


1.5
log
@errno safety in signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.4 1997/06/30 23:54:08 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.4 1997/06/30 23:54:08 millert Exp $";
d145 6
a150 4
	write(STDERR_FILENO, "find path: ", 11);
	write(STDERR_FILENO, entry->fts_path, entry->fts_pathlen);
	write(STDERR_FILENO, "\n", 1);
	errno = save_errno;
@


1.4
log
@Some -Wall cleanliness.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.3 1996/10/24 03:46:05 tholo Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.3 1996/10/24 03:46:05 tholo Exp $";
d142 1
d148 1
@


1.3
log
@Respond to SIGINFO; from PR #42
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.2 1996/06/26 05:33:12 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.2 1996/06/26 05:33:12 deraadt Exp $";
d70 1
a70 1
	for (p = *store; ch = *orig; ++orig)
d128 1
a128 1
	if (p = malloc(len))
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.1.1.1 1995/10/18 08:45:14 deraadt Exp $";
d53 1
d131 16
@


1.1
log
@Initial revision
@
text
@d1 2
d41 1
a41 1
static char rcsid[] = "$Id: misc.c,v 1.3 1993/12/30 21:15:28 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
