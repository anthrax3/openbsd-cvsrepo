head	1.21;
access;
symbols
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.17.0.26
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.18
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.22
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.20
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.12
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.8
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.15.0.6
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.4
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.16
	OPENBSD_2_8:1.7.0.14
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.01.21.11.32.04;	author guenther;	state Exp;
branches;
next	1.20;
commitid	DpBZlpar7mq0CJFq;

1.20
date	2016.03.16.15.41.11;	author krw;	state Exp;
branches;
next	1.19;
commitid	JEVxsRygqcjPtWTf;

1.19
date	2015.11.17.15.01.28;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	wuK9DgzKP4MsvsAP;

1.18
date	2015.08.20.22.32.42;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	0Dp7Dy9FuNZesYo2;

1.17
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.03.29.11.27.33;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.22.23.22.37;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.12.02.14.36;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.10.22.20.51;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.30.21.27.23;	author vincent;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.52;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.02.02.05.59;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.12.12.03.03;	author heko;	state Exp;
branches;
next	1.7;

1.7
date	97.09.11.11.09.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.02.11.18.10.57;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.11.03.22.25.58;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.06.26.05.39.16;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.07.05.53.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.43.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@The POSIX APIs that that sockaddrs all ignore the s*_len field in the
incoming socket, so userspace doesn't need to set it unless it has its
own reasons for tracking the size along with the sockaddr.

ok phessler@@ deraadt@@ florian@@
@
text
@/*	$OpenBSD: showmount.c,v 1.20 2016/03/16 15:41:11 krw Exp $	*/
/*	$NetBSD: showmount.c,v 1.7 1996/05/01 18:14:10 cgd Exp $	*/

/*
 * Copyright (c) 1989, 1993, 1995
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Rick Macklem at The University of Guelph.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/file.h>
#include <sys/socket.h>
#include <sys/socketvar.h>

#include <netdb.h>
#include <rpc/rpc.h>
#include <rpc/pmap_clnt.h>
#include <rpc/pmap_prot.h>
#include <nfs/rpcv2.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <vis.h>
#include <err.h>

/* Constant defs */
#define	ALL	1
#define	DIRS	2

#define	DODUMP		0x1
#define	DOEXPORTS	0x2

struct mountlist {
	struct mountlist *ml_left;
	struct mountlist *ml_right;
	char	ml_host[RPCMNT_NAMELEN+1];
	char	ml_dirp[RPCMNT_PATHLEN+1];
};

struct grouplist {
	struct grouplist *gr_next;
	char	gr_name[RPCMNT_NAMELEN+1];
};

struct exportslist {
	struct exportslist *ex_next;
	struct grouplist *ex_groups;
	char	ex_dirp[RPCMNT_PATHLEN+1];
};

static struct mountlist *mntdump;
static struct exportslist *exports;
static int type = 0;

void	print_dump(struct mountlist *);
void	usage(void);
int	xdr_mntdump(XDR *, struct mountlist **);
int	xdr_exports(XDR *, struct exportslist **);

/*
 * This command queries the NFS mount daemon for it's mount list and/or
 * it's exports list and prints them out.
 * See "NFS: Network File System Protocol Specification, RFC1094, Appendix A"
 * and the "Network File System Protocol XXX.."
 * for detailed information on the protocol.
 */
int
main(int argc, char *argv[])
{
	struct exportslist *exp;
	struct grouplist *grp;
	struct sockaddr_in clnt_sin;
	struct hostent *hp;
	struct timeval timeout;
	int rpcs = 0, mntvers = 1;
	enum clnt_stat estat;
	CLIENT *client;
	char *host;
	int ch, clnt_sock;

	if (pledge("stdio rpath inet dns", NULL) == -1)
		err(1, "pledge");

	while ((ch = getopt(argc, argv, "ade3")) != -1)
		switch (ch) {
		case 'a':
			if (type == 0) {
				type = ALL;
				rpcs |= DODUMP;
			} else
				usage();
			break;
		case 'd':
			if (type == 0) {
				type = DIRS;
				rpcs |= DODUMP;
			} else
				usage();
			break;
		case 'e':
			rpcs |= DOEXPORTS;
			break;
		case '3':
			mntvers = 3;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc > 0)
		host = *argv;
	else
		host = "localhost";

	if (rpcs == 0)
		rpcs = DODUMP;

	if ((hp = gethostbyname(host)) == NULL) {
		fprintf(stderr, "showmount: unknown host %s\n", host);
		exit(1);
	}
	bzero(&clnt_sin, sizeof clnt_sin);
	clnt_sin.sin_family = AF_INET;
	bcopy(hp->h_addr, (char *)&clnt_sin.sin_addr, hp->h_length);
	clnt_sock = RPC_ANYSOCK;
	client = clnttcp_create(&clnt_sin, RPCPROG_MNT, mntvers,
	    &clnt_sock, 0, 0);
	if (client == NULL) {
		clnt_pcreateerror("showmount: clnttcp_create");
		exit(1);
	}
	timeout.tv_sec = 30;
	timeout.tv_usec = 0;

	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");

	if (rpcs & DODUMP) {
		estat = clnt_call(client, RPCMNT_DUMP, xdr_void, NULL,
		    xdr_mntdump, (char *)&mntdump, timeout);
		if (estat != RPC_SUCCESS) {
			fprintf(stderr, "showmount: Can't do Mountdump rpc: ");
			clnt_perrno(estat);
			exit(1);
		}
	}
	if (rpcs & DOEXPORTS) {
		estat = clnt_call(client, RPCMNT_EXPORT, xdr_void, NULL,
		    xdr_exports, (char *)&exports, timeout);
		if (estat != RPC_SUCCESS) {
			fprintf(stderr, "showmount: Can't do Exports rpc: ");
			clnt_perrno(estat);
			exit(1);
		}
	}

	/* Now just print out the results */
	if (rpcs & DODUMP) {
		switch (type) {
		case ALL:
			printf("All mount points on %s:\n", host);
			break;
		case DIRS:
			printf("Directories on %s:\n", host);
			break;
		default:
			printf("Hosts on %s:\n", host);
			break;
		}
		print_dump(mntdump);
	}
	if (rpcs & DOEXPORTS) {
		char	vp[(RPCMNT_PATHLEN+1)*4];
		char	vn[(RPCMNT_NAMELEN+1)*4];

		printf("Exports list on %s:\n", host);
		exp = exports;
		while (exp) {
			strnvis(vp, exp->ex_dirp, sizeof vp, VIS_CSTYLE);
			printf("%-34s ", vp);
			grp = exp->ex_groups;
			if (grp == NULL) {
				printf("Everyone\n");
			} else {
				while (grp) {
					strnvis(vn, grp->gr_name, sizeof vn,
					    VIS_CSTYLE);
					printf("%s ", vn);
					grp = grp->gr_next;
				}
				printf("\n");
			}
			exp = exp->ex_next;
		}
	}

	exit(0);
}

/*
 * Xdr routine for retrieving the mount dump list
 */
int
xdr_mntdump(XDR *xdrsp, struct mountlist **mlp)
{
	struct mountlist *mp, **otp = NULL, *tp;
	int bool, val, val2;
	char *strp;

	*mlp = NULL;
	if (!xdr_bool(xdrsp, &bool))
		return (0);
	while (bool) {
		mp = malloc(sizeof(struct mountlist));
		if (mp == NULL)
			return (0);
		mp->ml_left = mp->ml_right = NULL;
		strp = mp->ml_host;
		if (!xdr_string(xdrsp, &strp, RPCMNT_NAMELEN))
			return (0);
		strp = mp->ml_dirp;
		if (!xdr_string(xdrsp, &strp, RPCMNT_PATHLEN))
			return (0);

		/*
		 * Build a binary tree on sorted order of either host or dirp.
		 * Drop any duplications.
		 */
		if (*mlp == NULL) {
			*mlp = mp;
		} else {
			tp = *mlp;
			while (tp) {
				val = strcmp(mp->ml_host, tp->ml_host);
				val2 = strcmp(mp->ml_dirp, tp->ml_dirp);
				switch (type) {
				case ALL:
					if (val == 0) {
						if (val2 == 0) {
							free((caddr_t)mp);
							goto next;
						}
						val = val2;
					}
					break;
				case DIRS:
					if (val2 == 0) {
						free((caddr_t)mp);
						goto next;
					}
					val = val2;
					break;
				default:
					if (val == 0) {
						free((caddr_t)mp);
						goto next;
					}
					break;
				}
				if (val < 0) {
					otp = &tp->ml_left;
					tp = tp->ml_left;
				} else {
					otp = &tp->ml_right;
					tp = tp->ml_right;
				}
			}
			*otp = mp;
		}
next:
		if (!xdr_bool(xdrsp, &bool))
			return (0);
	}
	return (1);
}

/*
 * Xdr routine to retrieve exports list
 */
int
xdr_exports(XDR *xdrsp, struct exportslist **exp)
{
	struct exportslist *ep;
	struct grouplist *gp;
	int bool, grpbool;
	char *strp;

	*exp = NULL;
	if (!xdr_bool(xdrsp, &bool))
		return (0);
	while (bool) {
		ep = malloc(sizeof(struct exportslist));
		if (ep == NULL)
			return (0);
		ep->ex_groups = NULL;
		strp = ep->ex_dirp;
		if (!xdr_string(xdrsp, &strp, RPCMNT_PATHLEN))
			return (0);
		if (!xdr_bool(xdrsp, &grpbool))
			return (0);
		while (grpbool) {
			gp = malloc(sizeof(struct grouplist));
			if (gp == NULL)
				return (0);
			strp = gp->gr_name;
			if (!xdr_string(xdrsp, &strp, RPCMNT_NAMELEN))
				return (0);
			gp->gr_next = ep->ex_groups;
			ep->ex_groups = gp;
			if (!xdr_bool(xdrsp, &grpbool))
				return (0);
		}
		ep->ex_next = *exp;
		*exp = ep;
		if (!xdr_bool(xdrsp, &bool))
			return (0);
	}
	return (1);
}

void
usage(void)
{

	fprintf(stderr, "usage: showmount [-3ade] [host]\n");
	exit(1);
}

/*
 * Print the binary tree in inorder so that output is sorted.
 */
void
print_dump(struct mountlist *mp)
{
	char	vn[(RPCMNT_NAMELEN+1)*4];
	char	vp[(RPCMNT_PATHLEN+1)*4];

	if (mp == NULL)
		return;
	if (mp->ml_left)
		print_dump(mp->ml_left);
	switch (type) {
	case ALL:
		strvis(vn, mp->ml_host, VIS_CSTYLE);
		strvis(vp, mp->ml_dirp, VIS_CSTYLE);
		printf("%s:%s\n", vn, vp);
		break;
	case DIRS:
		strvis(vp, mp->ml_dirp, VIS_CSTYLE);
		printf("%s\n", vp);
		break;
	default:
		strvis(vn, mp->ml_host, VIS_CSTYLE);
		printf("%s\n", vn);
		break;
	}
	if (mp->ml_right)
		print_dump(mp->ml_right);
}
@


1.20
log
@More "(<blah> *)0" -> NULL, avoiding any stdarg functions.

Feedback millert@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.19 2015/11/17 15:01:28 deraadt Exp $	*/
a152 1
	clnt_sin.sin_len = sizeof clnt_sin;
@


1.19
log
@pledge "stdio rpath inet dns" at the head, then after RPC is connected
"stdio rpath"
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.18 2015/08/20 22:32:42 deraadt Exp $	*/
d170 1
a170 1
		estat = clnt_call(client, RPCMNT_DUMP, xdr_void, (char *)0,
d179 1
a179 1
		estat = clnt_call(client, RPCMNT_EXPORT, xdr_void, (char *)0,
d241 1
a241 1
	*mlp = (struct mountlist *)0;
d248 1
a248 1
		mp->ml_left = mp->ml_right = (struct mountlist *)0;
d319 1
a319 1
	*exp = (struct exportslist *)0;
d326 1
a326 1
		ep->ex_groups = (struct grouplist *)0;
@


1.18
log
@Do not cast result of malloc/calloc/realloc* if stdlib.h is in scope
ok krw millert
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.17 2009/10/27 23:59:43 deraadt Exp $	*/
d52 1
d109 3
d165 3
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.16 2007/03/29 11:27:33 jmc Exp $	*/
d238 1
a238 1
		mp = (struct mountlist *)malloc(sizeof(struct mountlist));
d316 1
a316 1
		ep = (struct exportslist *)malloc(sizeof(struct exportslist));
d326 1
a326 2
			gp = (struct grouplist *)malloc(
			    sizeof(struct grouplist));
@


1.16
log
@tidy up SYNOPSIS and usage(); from Igor Sobrado
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.15 2005/12/22 23:22:37 deraadt Exp $	*/
a34 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1989, 1993, 1995\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)showmount.c	8.3 (Berkeley) 3/29/95";
#endif
static char rcsid[] = "$OpenBSD: showmount.c,v 1.15 2005/12/22 23:22:37 deraadt Exp $";
#endif /* not lint */
@


1.15
log
@gaurantee a space after the first string; janus@@area319.de
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.14 2003/12/12 02:14:36 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.14 2003/12/12 02:14:36 deraadt Exp $";
d363 1
a363 1
	fprintf(stderr, "usage: showmount [-ade3] host\n");
@


1.14
log
@reomve some junk
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.13 2003/06/10 22:20:51 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.13 2003/06/10 22:20:51 deraadt Exp $";
d217 1
a217 1
			printf("%-35s", vp);
@


1.13
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.12 2003/06/03 02:56:16 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.12 2003/06/03 02:56:16 millert Exp $";
d122 1
a122 1
		switch((char)ch) {
a142 1
		case '?':
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.11 2003/04/30 21:27:23 vincent Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.11 2003/04/30 21:27:23 vincent Exp $";
d108 1
a108 3
main(argc, argv)
	int argc;
	char **argv;
d242 1
a242 3
xdr_mntdump(xdrsp, mlp)
	XDR *xdrsp;
	struct mountlist **mlp;
d319 1
a319 3
xdr_exports(xdrsp, exp)
	XDR *xdrsp;
	struct exportslist **exp;
d361 1
a361 1
usage()
d372 1
a372 2
print_dump(mp)
	struct mountlist *mp;
@


1.11
log
@strvis -> strnvis

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.10 2002/02/16 21:27:52 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d46 1
a46 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.10 2002/02/16 21:27:52 millert Exp $";
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.9 2001/12/02 02:05:59 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.9 2001/12/02 02:05:59 deraadt Exp $";
d223 1
a223 1
			strvis(vp, exp->ex_dirp, VIS_CSTYLE);
d230 2
a231 1
					strvis(vn, grp->gr_name, VIS_CSTYLE);
@


1.9
log
@remove some };
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.8 2001/08/12 12:03:03 heko Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.8 2001/08/12 12:03:03 heko Exp $";
d99 4
a102 4
void	print_dump __P((struct mountlist *));
void	usage __P((void));
int	xdr_mntdump __P((XDR *, struct mountlist **));
int	xdr_exports __P((XDR *, struct exportslist **));
@


1.8
log
@#(endif|else) foo is incorrect, make it #endif /* foo */
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.7 1997/09/11 11:09:56 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.7 1997/09/11 11:09:56 deraadt Exp $";
d213 1
a213 1
		};
d405 1
a405 1
	};
@


1.7
log
@extra semi; uninit var
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.6 1997/02/11 18:10:57 deraadt Exp $	*/
d44 1
a44 1
#endif not lint
d50 2
a51 2
static char rcsid[] = "$OpenBSD: showmount.c,v 1.6 1997/02/11 18:10:57 deraadt Exp $";
#endif not lint
@


1.6
log
@use RPC over TCP; Michael.Eriksson@@era-t.ericsson.se
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.5 1996/11/03 22:25:58 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.5 1996/11/03 22:25:58 deraadt Exp $";
d251 1
a251 1
	struct mountlist *mp, **otp, *tp;
d304 1
a304 1
				};
@


1.5
log
@vis
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.4 1996/06/26 05:39:16 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.4 1996/06/26 05:39:16 deraadt Exp $";
d118 6
a123 1
	int estat, rpcs = 0, mntvers = 1;
d125 1
a125 1
	int ch;
d164 22
a185 4
	if (rpcs & DODUMP)
		if ((estat = callrpc(host, RPCPROG_MNT, mntvers,
			RPCMNT_DUMP, xdr_void, (char *)0,
			xdr_mntdump, (char *)&mntdump)) != 0) {
d190 5
a194 4
	if (rpcs & DOEXPORTS)
		if ((estat = callrpc(host, RPCPROG_MNT, mntvers,
			RPCMNT_EXPORT, xdr_void, (char *)0,
			xdr_exports, (char *)&exports)) != 0) {
d199 1
d349 2
a350 1
			gp = (struct grouplist *)malloc(sizeof(struct grouplist));
@


1.4
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: showmount.c,v 1.7 1996/05/01 18:14:10 cgd Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: showmount.c,v 1.7 1996/05/01 18:14:10 cgd Exp $";
d68 1
d192 3
d198 2
a199 1
			printf("%-35s", exp->ex_dirp);
d205 2
a206 1
					printf("%s ", grp->gr_name);
d358 2
d367 3
a369 1
		printf("%s:%s\n", mp->ml_host, mp->ml_dirp);
d372 2
a373 1
		printf("%s\n", mp->ml_dirp);
d376 2
a377 1
		printf("%s\n", mp->ml_host);
@


1.3
log
@pretty up output
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: showmount.c,v 1.7 1996/05/01 18:14:10 cgd Exp $";
@


1.2
log
@sync to netbsd 960418
@
text
@d1 1
a1 1
/*	$NetBSD: showmount.c,v 1.6 1996/04/01 21:32:19 mark Exp $	*/
d49 1
a49 1
static char rcsid[] = "$NetBSD: showmount.c,v 1.6 1996/04/01 21:32:19 mark Exp $";
d161 1
a162 1
			fprintf(stderr, ": Can't do Mountdump rpc\n");
d169 1
a170 1
			fprintf(stderr, ": Can't do Exports rpc\n");
d340 1
a340 1
	fprintf(stderr, "usage: showmount [-ade] host\n");
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: showmount.c,v 1.5 1995/08/31 22:26:08 jtc Exp $	*/
d49 1
a49 1
static char rcsid[] = "$NetBSD: showmount.c,v 1.5 1995/08/31 22:26:08 jtc Exp $";
d117 2
a118 1
	char ch, *host;
d120 1
a120 1
	while ((ch = getopt(argc, argv, "ade3")) != EOF)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
