head	1.27;
access;
symbols
	OPENBSD_5_7:1.26.0.18
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.22
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.20
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.16
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.14
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.12
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.10
	OPENBSD_5_0:1.26.0.8
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.6
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.26.0.4
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.23.0.2
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.17.0.10
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.8
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.6
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.4
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SUDO_1_6_0:1.1.1.1
	COURTESAN:1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.26;
commitid	8ra5qnWqy2bUhcZn;

1.26
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2009.06.21.14.48.42;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2009.04.11.11.48.06;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2008.11.25.17.02.27;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2008.07.31.16.44.03;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2007.12.03.15.09.48;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2007.10.17.04.26.05;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.29.17.29.05;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.31.18.47.49;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.12.19.13.21;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.05.00.23.57;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.03.19.15.34;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.15.21.23.54;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.17.01.03.21;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.14.00.11.44;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.21.17.58.44;	author millert;	state Exp;
branches
	1.6.2.1
	1.6.4.1;
next	1.5;

1.5
date	2000.06.05.14.01.15;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.27.03.44.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.24.04.22.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.12.10.06.45.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches;
next	;

1.6.2.1
date	2002.01.18.17.20.23;	author millert;	state Exp;
branches;
next	;

1.6.4.1
date	2002.01.18.16.14.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 1993-1996, 1998-2005, 2007-2009
 *	Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#ifndef _SUDO_SUDO_H
#define _SUDO_SUDO_H

#include <pathnames.h>
#include <limits.h>
#include "compat.h"
#include "defaults.h"
#include "error.h"
#include "list.h"
#include "logging.h"
#include "sudo_nss.h"

/*
 * Info pertaining to the invoking user.
 */
struct sudo_user {
    struct passwd *pw;
    struct passwd *_runas_pw;
    struct group *_runas_gr;
    struct stat *cmnd_stat;
    char *path;
    char *shell;
    char *tty;
    char *ttypath;
    char *host;
    char *shost;
    char *prompt;
    char *cmnd;
    char *cmnd_args;
    char *cmnd_base;
    char *cmnd_safe;
    char *class_name;
    char *krb5_ccname;
    char *display;
    char *askpass;
    int   ngroups;
    GETGROUPS_T *groups;
    struct list_member *env_vars;
#ifdef HAVE_SELINUX
    char *role;
    char *type;
#endif
    char  cwd[PATH_MAX];
};

/*
 * Return values for sudoers_lookup(), also used as arguments for log_auth()
 * Note: cannot use '0' as a value here.
 */
/* XXX - VALIDATE_SUCCESS and VALIDATE_FAILURE instead? */
#define VALIDATE_ERROR          0x001
#define VALIDATE_OK		0x002
#define VALIDATE_NOT_OK		0x004
#define FLAG_CHECK_USER		0x010
#define FLAG_NO_USER		0x020
#define FLAG_NO_HOST		0x040
#define FLAG_NO_CHECK		0x080

/*
 * Pseudo-boolean values
 */
#undef TRUE
#define TRUE                     1
#undef FALSE
#define FALSE                    0

/*
 * find_path()/load_cmnd() return values
 */
#define FOUND                    1
#define NOT_FOUND                0
#define NOT_FOUND_DOT		-1

/*
 * Various modes sudo can be in (based on arguments) in hex
 */
#define MODE_RUN		0x00000001
#define MODE_EDIT		0x00000002
#define MODE_VALIDATE		0x00000004
#define MODE_INVALIDATE		0x00000008
#define MODE_KILL		0x00000010
#define MODE_VERSION		0x00000020
#define MODE_HELP		0x00000040
#define MODE_LIST		0x00000080
#define MODE_CHECK		0x00000100
#define MODE_LISTDEFS		0x00000200
#define MODE_MASK		0x0000ffff

/* Mode flags */
#define MODE_BACKGROUND		0x00010000
#define MODE_SHELL		0x00020000
#define MODE_LOGIN_SHELL	0x00040000
#define MODE_IMPLIED_SHELL	0x00080000
#define MODE_RESET_HOME		0x00100000
#define MODE_PRESERVE_GROUPS	0x00200000
#define MODE_PRESERVE_ENV	0x00400000
#define MODE_NONINTERACTIVE	0x00800000

/*
 * Used with set_perms()
 */
#define PERM_ROOT                0x00
#define PERM_USER                0x01
#define PERM_FULL_USER           0x02
#define PERM_SUDOERS             0x03
#define PERM_RUNAS               0x04
#define PERM_FULL_RUNAS          0x05
#define PERM_TIMESTAMP           0x06
#define PERM_NOEXIT              0x10 /* flag */
#define PERM_MASK                0xf0

/*
 * Shortcuts for sudo_user contents.
 */
#define user_name		(sudo_user.pw->pw_name)
#define user_passwd		(sudo_user.pw->pw_passwd)
#define user_uid		(sudo_user.pw->pw_uid)
#define user_gid		(sudo_user.pw->pw_gid)
#define user_dir		(sudo_user.pw->pw_dir)
#define user_shell		(sudo_user.shell)
#define user_ngroups		(sudo_user.ngroups)
#define user_groups		(sudo_user.groups)
#define user_tty		(sudo_user.tty)
#define user_ttypath		(sudo_user.ttypath)
#define user_cwd		(sudo_user.cwd)
#define user_cmnd		(sudo_user.cmnd)
#define user_args		(sudo_user.cmnd_args)
#define user_base		(sudo_user.cmnd_base)
#define user_stat		(sudo_user.cmnd_stat)
#define user_path		(sudo_user.path)
#define user_prompt		(sudo_user.prompt)
#define user_host		(sudo_user.host)
#define user_shost		(sudo_user.shost)
#define user_ccname		(sudo_user.krb5_ccname)
#define user_display		(sudo_user.display)
#define user_askpass		(sudo_user.askpass)
#define safe_cmnd		(sudo_user.cmnd_safe)
#define login_class		(sudo_user.class_name)
#define runas_pw		(sudo_user._runas_pw)
#define runas_gr		(sudo_user._runas_gr)
#define user_role		(sudo_user.role)
#define user_type		(sudo_user.type)

/*
 * We used to use the system definition of PASS_MAX or _PASSWD_LEN,
 * but that caused problems with various alternate authentication
 * methods.  So, we just define our own and assume that it is >= the
 * system max.
 */
#define SUDO_PASS_MAX	256

/*
 * Flags for lock_file()
 */
#define SUDO_LOCK	1		/* lock a file */
#define SUDO_TLOCK	2		/* test & lock a file (non-blocking) */
#define SUDO_UNLOCK	4		/* unlock a file */

/*
 * Flags for tgetpass()
 */
#define TGP_ECHO	0x01		/* leave echo on when reading passwd */
#define TGP_STDIN	0x02		/* read from stdin, not /dev/tty */
#define TGP_ASKPASS	0x04		/* read from askpass helper program */

struct lbuf;
struct passwd;
struct timespec;
struct timeval;

/*
 * Function prototypes
 */
#define YY_DECL int yylex __P((void))

#ifndef HAVE_CLOSEFROM
void closefrom		__P((int));
#endif
#ifndef HAVE_GETCWD
char *getcwd		__P((char *, size_t size));
#endif
#ifndef HAVE_UTIMES
int utimes		__P((const char *, const struct timeval *));
#endif
#ifdef HAVE_FUTIME
int futimes		__P((int, const struct timeval *));
#endif
#ifndef HAVE_SNPRINTF
int snprintf		__P((char *, size_t, const char *, ...))
			    __printflike(3, 4);
#endif
#ifndef HAVE_VSNPRINTF
int vsnprintf		__P((char *, size_t, const char *, va_list))
			    __printflike(3, 0);
#endif
#ifndef HAVE_ASPRINTF
int asprintf		__P((char **, const char *, ...))
			    __printflike(2, 3);
#endif
#ifndef HAVE_VASPRINTF
int vasprintf		__P((char **, const char *, va_list))
			    __printflike(2, 0);
#endif
#ifndef HAVE_STRCASECMP
int strcasecmp		__P((const char *, const char *));
#endif
#ifndef HAVE_STRLCAT
size_t strlcat		__P((char *, const char *, size_t));
#endif
#ifndef HAVE_STRLCPY
size_t strlcpy		__P((char *, const char *, size_t));
#endif
#ifndef HAVE_MEMRCHR
void *memrchr		__P((const void *, int, size_t));
#endif
#ifndef HAVE_MKSTEMP
int mkstemp		__P((char *));
#endif
#ifndef HAVE_SETENV
int setenv		__P((const char *, const char *, int));
#endif
#ifndef HAVE_UNSETENV
int unsetenv		__P((const char *));
#endif
char *sudo_goodpath	__P((const char *, struct stat *));
char *tgetpass		__P((const char *, int, int));
int find_path		__P((char *, char **, struct stat *, char *));
int tty_present		__P((void));
void check_user		__P((int, int));
void verify_user	__P((struct passwd *, char *));
#ifdef HAVE_LDAP
int sudo_ldap_open	__P((struct sudo_nss *));
int sudo_ldap_close	__P((struct sudo_nss *));
int sudo_ldap_setdefs	__P((struct sudo_nss *));
int sudo_ldap_lookup	__P((struct sudo_nss *, int, int));
int sudo_ldap_parse	__P((struct sudo_nss *));
int sudo_ldap_display_cmnd __P((struct sudo_nss *, struct passwd *));
int sudo_ldap_display_defaults __P((struct sudo_nss *, struct passwd *, struct lbuf *));
int sudo_ldap_display_bound_defaults __P((struct sudo_nss *, struct passwd *, struct lbuf *));
int sudo_ldap_display_privs __P((struct sudo_nss *, struct passwd *, struct lbuf *));
#endif
int sudo_file_open	__P((struct sudo_nss *));
int sudo_file_close	__P((struct sudo_nss *));
int sudo_file_setdefs	__P((struct sudo_nss *));
int sudo_file_lookup	__P((struct sudo_nss *, int, int));
int sudo_file_parse	__P((struct sudo_nss *));
int sudo_file_display_cmnd __P((struct sudo_nss *, struct passwd *));
int sudo_file_display_defaults __P((struct sudo_nss *, struct passwd *, struct lbuf *));
int sudo_file_display_bound_defaults __P((struct sudo_nss *, struct passwd *, struct lbuf *));
int sudo_file_display_privs __P((struct sudo_nss *, struct passwd *, struct lbuf *));
int set_perms		__P((int));
void remove_timestamp	__P((int));
int check_secureware	__P((char *));
void sia_attempt_auth	__P((void));
void pam_attempt_auth	__P((void));
int yyparse		__P((void));
void pass_warn		__P((FILE *));
void *emalloc		__P((size_t));
void *emalloc2		__P((size_t, size_t));
void *erealloc		__P((void *, size_t));
void *erealloc3		__P((void *, size_t, size_t));
char *estrdup		__P((const char *));
int easprintf		__P((char **, const char *, ...))
			    __printflike(2, 3);
int evasprintf		__P((char **, const char *, va_list))
			    __printflike(2, 0);
void efree		__P((void *));
void dump_defaults	__P((void));
void dump_auth_methods	__P((void));
void init_envtables	__P((void));
void read_env_file	__P((const char *, int));
int lock_file		__P((int, int));
int touch		__P((int, char *, struct timespec *));
int user_is_exempt	__P((void));
void set_fqdn		__P((void));
char *sudo_getepw	__P((const struct passwd *));
int pam_prep_user	__P((struct passwd *));
void zero_bytes		__P((volatile void *, size_t));
int gettime		__P((struct timespec *));
FILE *open_sudoers	__P((const char *, int, int *));
void display_privs	__P((struct sudo_nss_list *, struct passwd *));
int display_cmnd	__P((struct sudo_nss_list *, struct passwd *));
int get_ttycols		__P((void));
char *sudo_parseln	__P((FILE *));
void sudo_setgrent	__P((void));
void sudo_endgrent	__P((void));
void sudo_setpwent	__P((void));
void sudo_endpwent	__P((void));
void sudo_setspent	__P((void));
void sudo_endspent	__P((void));
void cleanup		__P((int));
struct passwd *sudo_getpwnam __P((const char *));
struct passwd *sudo_fakepwnam __P((const char *, gid_t));
struct passwd *sudo_getpwuid __P((uid_t));
struct group *sudo_getgrnam __P((const char *));
struct group *sudo_fakegrnam __P((const char *));
struct group *sudo_getgrgid __P((gid_t));
#ifdef HAVE_SELINUX
void selinux_exec __P((char *, char *, char **, int));
#endif
#ifdef HAVE_GETUSERATTR
void aix_setlimits __P((char *));
#endif
YY_DECL;

/* Only provide extern declarations outside of sudo.c. */
#ifndef _SUDO_MAIN
extern struct sudo_user sudo_user;
extern struct passwd *auth_pw, *list_pw;

extern int tgetpass_flags;
extern int long_list;
extern uid_t timestamp_uid;
#endif
#ifndef errno
extern int errno;
#endif

#endif /* _SUDO_SUDO_H */
@


1.26
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.25
log
@Upgrade to sudo 1.7.2
@
text
@a19 2
 *
 * $Sudo: sudo.h,v 1.273 2009/05/25 12:02:41 millert Exp $
@


1.24
log
@Update to sudo 1.7.1
@
text
@d2 1
a2 1
 * Copyright (c) 1993-1996, 1998-2005, 2007-2008
d21 1
a21 1
 * $Sudo: sudo.h,v 1.270 2009/03/01 00:58:40 millert Exp $
d132 2
d274 1
a274 1
void set_perms		__P((int));
d303 1
a303 1
FILE *open_sudoers	__P((const char *, int *));
@


1.23
log
@Even if neither stdin nor stdout are ttys we may still have /dev/tty
available to us.
@
text
@d21 1
a21 1
 * $Sudo: sudo.h,v 1.269 2008/11/25 17:01:34 millert Exp $
d240 6
a305 2
void sudo_setenv	__P((const char *, const char *, int));
void sudo_unsetenv	__P((const char *));
@


1.22
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d21 1
a21 1
 * $Sudo: sudo.h,v 1.268 2008/08/20 11:41:22 millert Exp $
d243 1
@


1.21
log
@Update to sudo 1.6.9p17
@
text
@d2 2
a3 1
 * Copyright (c) 1993-1996,1998-2007 Todd C. Miller <Todd.Miller@@courtesan.com>
d21 1
a21 1
 * $Sudo: sudo.h,v 1.209.2.14 2008/02/09 14:44:48 millert Exp $
d31 2
d34 1
d42 1
a47 1
    char  cwd[PATH_MAX];
a49 1
    char **runas;
d56 4
a59 1
    int ngroups;
d66 1
d78 3
a80 6
#define FLAG_NOPASS		0x020
#define FLAG_NO_USER		0x040
#define FLAG_NO_HOST		0x080
#define FLAG_NO_CHECK		0x100
#define FLAG_NOEXEC		0x200
#define FLAG_SETENV		0x400
a88 6
#undef IMPLIED
#define IMPLIED                  2
#undef NOMATCH
#define NOMATCH                 -1
#undef UNSPEC
#define UNSPEC                  -2
d100 21
a120 16
#define MODE_RUN		0x0001
#define MODE_EDIT		0x0002
#define MODE_VALIDATE		0x0004
#define MODE_INVALIDATE		0x0008
#define MODE_KILL		0x0010
#define MODE_VERSION		0x0020
#define MODE_HELP		0x0040
#define MODE_LIST		0x0080
#define MODE_LISTDEFS		0x0100
#define MODE_BACKGROUND		0x0200
#define MODE_SHELL		0x0400
#define MODE_LOGIN_SHELL	0x0800
#define MODE_IMPLIED_SHELL	0x1000
#define MODE_RESET_HOME		0x2000
#define MODE_PRESERVE_GROUPS	0x4000
#define MODE_PRESERVE_ENV	0x8000
a146 1
#define user_runas		(sudo_user.runas)
d155 3
d161 1
d185 1
d187 1
d235 1
a235 1
VOID *memrchr		__P((const VOID *, int, size_t));
d243 1
a243 1
void check_user		__P((int));
a244 1
int sudoers_lookup	__P((int));
d246 19
a264 3
int sudo_ldap_check	__P((int));
void sudo_ldap_list_matches __P((void));
#endif
d272 4
a275 4
VOID *emalloc		__P((size_t));
VOID *emalloc2		__P((size_t, size_t));
VOID *erealloc		__P((VOID *, size_t));
VOID *erealloc3		__P((VOID *, size_t, size_t));
d281 1
a281 1
void efree		__P((VOID *));
d285 1
a289 1
int set_runaspw		__P((char *));
d292 1
a292 1
void zero_bytes		__P((volatile VOID *, size_t));
d294 20
d315 4
a318 1
void selinux_exec	__P((char *, char *, char **, char **, int));
d325 1
a325 1
extern struct passwd *auth_pw;
a326 1
extern FILE *sudoers_fp;
d328 1
@


1.20
log
@update to sudo 1.6.9p9
@
text
@d20 1
a20 1
 * $Sudo: sudo.h,v 1.209.2.13 2007/11/27 23:41:23 millert Exp $
d56 4
d156 2
d271 3
@


1.19
log
@Update to sudo 1.6.9p6
@
text
@d20 1
a20 1
 * $Sudo: sudo.h,v 1.209.2.11 2007/09/13 23:06:51 millert Exp $
d54 1
a54 1
    gid_t *groups;
d81 2
@


1.18
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d20 1
a20 1
 * $Sudo: sudo.h,v 1.209.2.10 2007/07/06 14:14:34 millert Exp $
d42 1
d136 1
@


1.17
log
@update to sudo 1.6.8p5
@
text
@d2 1
a2 1
 * Copyright (c) 1993-1996,1998-2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d20 1
a20 1
 * $Sudo: sudo.h,v 1.213 2004/09/08 15:48:23 millert Exp $
d52 3
d71 1
d93 1
a93 1
 * Various modes sudo can be in (based on arguments) in octal
d95 16
a110 15
#define MODE_RUN                 000001
#define MODE_VALIDATE            000002
#define MODE_INVALIDATE          000004
#define MODE_KILL                000010
#define MODE_VERSION             000020
#define MODE_HELP                000040
#define MODE_LIST                000100
#define MODE_LISTDEFS            000200
#define MODE_BACKGROUND          000400
#define MODE_SHELL               001000
#define MODE_LOGIN_SHELL         002000
#define MODE_IMPLIED_SHELL       004000
#define MODE_RESET_HOME          010000
#define MODE_PRESERVE_GROUPS     020000
#define MODE_EDIT                040000
d116 6
a121 7
#define PERM_FULL_ROOT           0x01
#define PERM_USER                0x02
#define PERM_FULL_USER           0x03
#define PERM_SUDOERS             0x04
#define PERM_RUNAS               0x05
#define PERM_FULL_RUNAS          0x06
#define PERM_TIMESTAMP           0x07
d132 2
d192 2
a193 1
int snprintf		__P((char *, size_t, const char *, ...));
d196 2
a197 1
int vsnprintf		__P((char *, size_t, const char *, va_list));
d200 2
a201 1
int asprintf		__P((char **, const char *, ...));
d204 2
a205 1
int vasprintf		__P((char **, const char *, va_list));
d216 6
d232 1
a232 3
void set_perms_nosuid	__P((int));
void set_perms_posix	__P((int));
void set_perms_suid	__P((int));
d244 5
a248 2
int easprintf		__P((char **, const char *, ...));
int evasprintf		__P((char **, const char *, va_list));
a270 2

extern void (*set_perms) __P((int));
@


1.16
log
@Update to sudo 1.6.8p1
@
text
@d164 4
@


1.15
log
@#ifndef errno declaration. ok millert@@
@
text
@d2 1
a2 2
 * Copyright (c) 1993-1996,1998-2003 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
d4 11
a14 28
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d20 1
a20 1
 * $Sudo: sudo.h,v 1.194 2003/04/16 00:42:10 millert Exp $
d27 1
d38 1
d42 1
a42 1
    char  cwd[MAXPATHLEN];
a46 1
    char *cmnd_safe;
d49 2
d59 9
a67 7
#define VALIDATE_ERROR          0x01
#define VALIDATE_OK		0x02
#define VALIDATE_NOT_OK		0x04
#define FLAG_NOPASS		0x10
#define FLAG_NO_USER		0x20
#define FLAG_NO_HOST		0x40
#define FLAG_NO_CHECK		0x80
d70 1
a70 1
 * Boolean values
d76 4
d101 5
a105 3
#define MODE_IMPLIED_SHELL       002000
#define MODE_RESET_HOME          004000
#define MODE_PRESERVE_GROUPS     010000
d116 2
a117 1
#define PERM_TIMESTAMP           0x06
d133 2
a158 12
 * Flags for sudoers_lookup:
 *  PASSWD_NEVER:  user never has to give a passwd
 *  PASSWD_ALL:    no passwd needed if all entries for host have NOPASSWD flag
 *  PASSWD_ANY:    no passwd needed if any entry for host has a NOPASSWD flag
 *  PASSWD_ALWAYS: passwd always needed
 */
#define PWCHECK_NEVER	0x01
#define PWCHECK_ALL	0x02
#define PWCHECK_ANY	0x04
#define PWCHECK_ALWAYS	0x08

/*
d175 6
d202 1
a202 1
char *sudo_goodpath	__P((const char *));
d204 2
a205 2
int find_path		__P((char *, char **, char *));
void check_user		__P((void));
d208 4
d232 1
a232 1
int touch		__P((char *, time_t));
d235 2
a236 1
char *sudo_getepw	__P((struct passwd *));
d239 1
@


1.14
log
@Use closefrom() if it exists; from the sudo cvs repo
@
text
@d257 1
d259 1
@


1.13
log
@Get rid of volatile variables that were a vain attempt to prevent the
compiler from optimizing away memset() calls.  Instead, add a new function,
zero_bytes(), to clear buffers with sensitive contents.
Taken from the sudo cvs repo, man.
@
text
@d185 3
@


1.12
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@d240 1
@


1.11
log
@Sync with my sudo cvs repo:
 o update to sudo 1.6.7p2
 o use warn/err throughout
@
text
@d34 5
a38 1
 * $Sudo: sudo.h,v 1.193 2003/04/02 18:25:19 millert Exp $
@


1.10
log
@update to what will soon be sudo 1.6.7
@
text
@d34 1
a34 1
 * $Sudo: sudo.h,v 1.192 2003/03/15 20:31:02 millert Exp $
d239 1
a239 1
#ifndef _SUDO_SUDO_C
a242 2
extern int Argc;
extern char **Argv;
@


1.9
log
@update to sudo 1.6.5
@
text
@d2 1
a2 1
 * Copyright (c) 1993-1996,1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d34 1
a34 1
 * $Sudo: sudo.h,v 1.184 2002/01/16 21:27:09 millert Exp $
d119 1
d199 6
d211 3
a213 2
void set_perms_posix	__P((int, int));
void set_perms_fallback	__P((int, int));
d221 1
d223 1
a226 1
void dump_badenv	__P((void));
d247 1
d249 1
a249 1
extern void (*set_perms) __P((int, int));
@


1.8
log
@sync with sudo 1.6.4-final
@
text
@d34 1
a34 1
 * $Sudo: sudo.h,v 1.183 2002/01/13 18:28:09 millert Exp $
d116 3
a118 2
#define PERM_SUDOERS             0x03
#define PERM_RUNAS	         0x04
@


1.7
log
@Update to sudo 1.6.4
@
text
@d34 1
a34 1
 * $Sudo: sudo.h,v 1.182 2001/12/31 17:18:05 millert Exp $
d114 2
a115 2
#define PERM_USER                0x01
#define PERM_FULL_USER           0x02
@


1.6
log
@A few updates from the sudo developement tree:
- Add bsd authentication support (currently disabled)
- Always check setenv() return value
- Fix umask disabling
@
text
@d2 1
a2 1
 * Copyright (c) 1994-1996,1998-2000 Todd C. Miller <Todd.Miller@@courtesan.com>
d34 1
a34 1
 * $Sudo: sudo.h,v 1.172 2000/03/07 04:29:46 millert Exp $
d50 3
d96 13
a108 12
#define MODE_RUN                 00001
#define MODE_VALIDATE            00002
#define MODE_INVALIDATE          00004
#define MODE_KILL                00010
#define MODE_VERSION             00020
#define MODE_HELP                00040
#define MODE_LIST                00100
#define MODE_LISTDEFS            00200
#define MODE_BACKGROUND          00400
#define MODE_SHELL               01000
#define MODE_IMPLIED_SHELL       02000
#define MODE_RESET_HOME          04000
a125 1
#define user_shell		(sudo_user.pw->pw_shell)
d127 1
d133 1
d139 1
a181 3
#if !defined(HAVE_PUTENV) && !defined(HAVE_SETENV)
int putenv		__P((const char *));
#endif
a197 1
void sudo_setenv		__P((char *, char *));
d199 1
a199 1
int find_path		__P((char *, char **));
d203 2
a204 1
void set_perms		__P((int, int));
d216 1
d219 1
d225 1
d237 2
@


1.6.2.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1993-1996,1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d34 1
a34 1
 * $Sudo: sudo.h,v 1.184 2002/01/16 21:27:09 millert Exp $
a49 3
    struct passwd *_runas_pw;
    char *path;
    char *shell;
d93 12
a104 13
#define MODE_RUN                 000001
#define MODE_VALIDATE            000002
#define MODE_INVALIDATE          000004
#define MODE_KILL                000010
#define MODE_VERSION             000020
#define MODE_HELP                000040
#define MODE_LIST                000100
#define MODE_LISTDEFS            000200
#define MODE_BACKGROUND          000400
#define MODE_SHELL               001000
#define MODE_IMPLIED_SHELL       002000
#define MODE_RESET_HOME          004000
#define MODE_PRESERVE_GROUPS     010000
d110 4
a113 5
#define PERM_FULL_ROOT           0x01
#define PERM_USER                0x02
#define PERM_FULL_USER           0x03
#define PERM_SUDOERS             0x04
#define PERM_RUNAS               0x05
d122 1
a123 1
#define user_shell		(sudo_user.shell)
a128 1
#define user_path		(sudo_user.path)
a133 1
#define runas_pw		(sudo_user._runas_pw)
d176 3
d195 1
d197 1
a197 1
int find_path		__P((char *, char **, char *));
d201 1
a201 2
void set_perms_posix	__P((int, int));
void set_perms_fallback	__P((int, int));
a212 1
void dump_badenv	__P((void));
a214 1
void init_envtables	__P((void));
a219 1
int pam_prep_user	__P((struct passwd *));
a230 2

extern void (*set_perms) __P((int, int));
@


1.6.4.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1993-1996,1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d34 1
a34 1
 * $Sudo: sudo.h,v 1.184 2002/01/16 21:27:09 millert Exp $
a49 3
    struct passwd *_runas_pw;
    char *path;
    char *shell;
d93 12
a104 13
#define MODE_RUN                 000001
#define MODE_VALIDATE            000002
#define MODE_INVALIDATE          000004
#define MODE_KILL                000010
#define MODE_VERSION             000020
#define MODE_HELP                000040
#define MODE_LIST                000100
#define MODE_LISTDEFS            000200
#define MODE_BACKGROUND          000400
#define MODE_SHELL               001000
#define MODE_IMPLIED_SHELL       002000
#define MODE_RESET_HOME          004000
#define MODE_PRESERVE_GROUPS     010000
d110 4
a113 5
#define PERM_FULL_ROOT           0x01
#define PERM_USER                0x02
#define PERM_FULL_USER           0x03
#define PERM_SUDOERS             0x04
#define PERM_RUNAS               0x05
d122 1
a123 1
#define user_shell		(sudo_user.shell)
a128 1
#define user_path		(sudo_user.path)
a133 1
#define runas_pw		(sudo_user._runas_pw)
d176 3
d195 1
d197 1
a197 1
int find_path		__P((char *, char **, char *));
d201 1
a201 2
void set_perms_posix	__P((int, int));
void set_perms_fallback	__P((int, int));
a212 1
void dump_badenv	__P((void));
a214 1
void init_envtables	__P((void));
a219 1
int pam_prep_user	__P((struct passwd *));
a230 2

extern void (*set_perms) __P((int, int));
@


1.5
log
@Update to sudo 1.6.3p4
@
text
@d195 1
a195 1
int sudo_setenv		__P((char *, char *));
@


1.4
log
@sudo 1.6.3; see http://www.courtesan.com/sudo/current.html for a list
of changes.
@
text
@d199 1
a199 1
void verify_user	__P((char *));
d211 2
a212 2
void easprintf		__P((char **, const char *, ...));
void evasprintf		__P((char **, const char *, va_list));
d225 1
@


1.3
log
@sudo 1.6.2
@
text
@d34 1
a34 1
 * $Sudo: sudo.h,v 1.168 2000/01/17 23:46:26 millert Exp $
d59 1
d133 1
d163 6
d217 1
d219 1
d229 1
@


1.2
log
@sudo 1.6.1
@
text
@d2 1
a2 1
 * Copyright (c) 1994-1996,1998-1999 Todd C. Miller <Todd.Miller@@courtesan.com>
d34 1
a34 1
 * $Sudo: sudo.h,v 1.164 1999/12/02 20:31:24 millert Exp $
d102 2
a103 1
#define MODE_RESET_HOME          02000
d147 12
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
 * $Sudo: sudo.h,v 1.163 1999/09/08 08:06:17 millert Exp $
d196 1
@


1.1.1.1
log
@sudo 1.6, now with a BSD license
@
text
@@
