head	1.22;
access;
symbols
	OPENBSD_5_7:1.21.0.18
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.22
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.20
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.16
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.14
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.12
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.10
	OPENBSD_5_0:1.21.0.8
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.6
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.4
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	SUDO_1_6_0:1.1.1.1
	COURTESAN:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.21;
commitid	8ra5qnWqy2bUhcZn;

1.21
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2009.06.21.14.48.42;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.11.11.48.06;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.09.22.20.32;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2008.11.25.17.02.27;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.31.16.44.04;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2008.01.21.19.44.29;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2007.10.17.15.40.54;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2007.10.17.04.26.05;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.15.21.23.54;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.13.21.58.52;	author millert;	state Exp;
branches
	1.6.4.1
	1.6.6.1;
next	1.5;

1.5
date	2000.03.27.03.44.39;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.27.03.25.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.24.04.22.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.12.10.06.45.12;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches;
next	;

1.6.4.1
date	2002.01.18.17.20.23;	author millert;	state Exp;
branches;
next	;

1.6.6.1
date	2002.01.18.16.14.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 1996, 1998-2005, 2007-2009
 *	Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#ifdef __TANDEM
# include <floss.h>
#endif

#include <config.h>

#include <sys/types.h>
#include <sys/param.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# if defined(HAVE_MEMORY_H) && !defined(STDC_HEADERS)
#  include <memory.h>
# endif
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <pwd.h>
#include <errno.h>
#include <signal.h>
#include <fcntl.h>

#include "sudo.h"

static volatile sig_atomic_t signo;

static void handler __P((int));
static char *getln __P((int, char *, size_t, int));
static char *sudo_askpass __P((const char *));

extern int term_restore __P((int));
extern int term_noecho __P((int));
extern int term_raw __P((int));

/*
 * Like getpass(3) but with timeout and echo flags.
 */
char *
tgetpass(prompt, timeout, flags)
    const char *prompt;
    int timeout;
    int flags;
{
    sigaction_t sa, savealrm, saveint, savehup, savequit, saveterm;
    sigaction_t savetstp, savettin, savettou;
    char *pass;
    static char buf[SUDO_PASS_MAX + 1];
    int input, output, save_errno, neednl;;

    (void) fflush(stdout);

    /* If using a helper program to get the password, run it instead. */
    if (ISSET(flags, TGP_ASKPASS) && user_askpass)
	return(sudo_askpass(prompt));

restart:
    signo = 0;
    pass = NULL;
    save_errno = 0;
    /* Open /dev/tty for reading/writing if possible else use stdin/stderr. */
    if (ISSET(flags, TGP_STDIN) ||
	(input = output = open(_PATH_TTY, O_RDWR|O_NOCTTY)) == -1) {
	input = STDIN_FILENO;
	output = STDERR_FILENO;
    }

    /*
     * Catch signals that would otherwise cause the user to end
     * up with echo turned off in the shell.
     */
    zero_bytes(&sa, sizeof(sa));
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_INTERRUPT;	/* don't restart system calls */
    sa.sa_handler = handler;
    (void) sigaction(SIGALRM, &sa, &savealrm);
    (void) sigaction(SIGINT, &sa, &saveint);
    (void) sigaction(SIGHUP, &sa, &savehup);
    (void) sigaction(SIGQUIT, &sa, &savequit);
    (void) sigaction(SIGTERM, &sa, &saveterm);
    (void) sigaction(SIGTSTP, &sa, &savetstp);
    (void) sigaction(SIGTTIN, &sa, &savettin);
    (void) sigaction(SIGTTOU, &sa, &savettou);

    if (def_pwfeedback)
	neednl = term_raw(input);
    else
	neednl = term_noecho(input);

    /* No output if we are already backgrounded. */
    if (signo != SIGTTOU && signo != SIGTTIN) {
	if (prompt)
	    (void) write(output, prompt, strlen(prompt));

	if (timeout > 0)
	    alarm(timeout);
	pass = getln(input, buf, sizeof(buf), def_pwfeedback);
	alarm(0);
	save_errno = errno;

	if (neednl)
	    (void) write(output, "\n", 1);
    }

    /* Restore old tty settings and signals. */
    term_restore(input);
    (void) sigaction(SIGALRM, &savealrm, NULL);
    (void) sigaction(SIGINT, &saveint, NULL);
    (void) sigaction(SIGHUP, &savehup, NULL);
    (void) sigaction(SIGQUIT, &savequit, NULL);
    (void) sigaction(SIGTERM, &saveterm, NULL);
    (void) sigaction(SIGTSTP, &savetstp, NULL);
    (void) sigaction(SIGTTIN, &savettin, NULL);
    (void) sigaction(SIGTTOU, &savettou, NULL);
    if (input != STDIN_FILENO)
	(void) close(input);

    /*
     * If we were interrupted by a signal, resend it to ourselves
     * now that we have restored the signal handlers.
     */
    if (signo) {
	kill(getpid(), signo);
	switch (signo) {
	    case SIGTSTP:
	    case SIGTTIN:
	    case SIGTTOU:
		goto restart;
	}
    }

    if (save_errno)
	errno = save_errno;
    return(pass);
}

/*
 * Fork a child and exec sudo-askpass to get the password from the user.
 */
static char *
sudo_askpass(prompt)
    const char *prompt;
{
    static char buf[SUDO_PASS_MAX + 1], *pass;
    sigaction_t sa, saved_sa_pipe;
    int pfd[2];
    pid_t pid;

    if (pipe(pfd) == -1)
	error(1, "unable to create pipe");

    if ((pid = fork()) == -1)
	error(1, "unable to fork");

    if (pid == 0) {
	/* child, point stdout to output side of the pipe and exec askpass */
	(void) dup2(pfd[1], STDOUT_FILENO);
	set_perms(PERM_FULL_USER);
	closefrom(STDERR_FILENO + 1);
	execl(user_askpass, user_askpass, prompt, (char *)NULL);
	warning("unable to run %s", user_askpass);
	_exit(255);
    }

    /* Ignore SIGPIPE in case child exits prematurely */
    zero_bytes(&sa, sizeof(sa));
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;
    sa.sa_handler = SIG_IGN;
    (void) sigaction(SIGPIPE, &sa, &saved_sa_pipe);

    /* Get response from child (askpass) and restore SIGPIPE handler */
    (void) close(pfd[1]);
    pass = getln(pfd[0], buf, sizeof(buf), 0);
    (void) close(pfd[0]);
    (void) sigaction(SIGPIPE, &saved_sa_pipe, NULL);

    return(pass);
}

extern int term_erase, term_kill;

static char *
getln(fd, buf, bufsiz, feedback)
    int fd;
    char *buf;
    size_t bufsiz;
    int feedback;
{
    size_t left = bufsiz;
    ssize_t nr = -1;
    char *cp = buf;
    char c = '\0';

    if (left == 0) {
	errno = EINVAL;
	return(NULL);			/* sanity */
    }

    while (--left) {
	nr = read(fd, &c, 1);
	if (nr != 1 || c == '\n' || c == '\r')
	    break;
	if (feedback) {
	    if (c == term_kill) {
		while (cp > buf) {
		    (void) write(fd, "\b \b", 3);
		    --cp;
		}
		left = bufsiz;
		continue;
	    } else if (c == term_erase) {
		if (cp > buf) {
		    (void) write(fd, "\b \b", 3);
		    --cp;
		    left++;
		}
		continue;
	    }
	    (void) write(fd, "*", 1);
	}
	*cp++ = c;
    }
    *cp = '\0';
    if (feedback) {
	/* erase stars */
	while (cp > buf) {
	    (void) write(fd, "\b \b", 3);
	    --cp;
	}
    }

    return(nr == 1 ? buf : NULL);
}

static void
handler(s)
    int s;
{
    if (s != SIGALRM)
	signo = s;
}

int
tty_present()
{
    int fd;

    if ((fd = open(_PATH_TTY, O_RDWR|O_NOCTTY)) != -1)
	close(fd);
    return(fd != -1);
}
@


1.21
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.20
log
@Upgrade to sudo 1.7.2
@
text
@a58 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.131 2009/05/25 12:02:42 millert Exp $";
#endif /* lint */

@


1.19
log
@Update to sudo 1.7.1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2005, 2007-2008
d60 1
a60 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.130 2009/02/15 20:53:49 millert Exp $";
@


1.18
log
@sync with sudo cvs repo
@
text
@a29 4
#ifdef HAVE_SYS_BSDTYPES_H
# include <sys/bsdtypes.h>
#endif /* HAVE_SYS_BSDTYPES_H */
#include <sys/time.h>
a55 10
#ifdef HAVE_TERMIOS_H
# include <termios.h>
#else
# ifdef HAVE_TERMIO_H
#  include <termio.h>
# else
#  include <sgtty.h>
#  include <sys/ioctl.h>
# endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */
d60 1
a60 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.126 2008/12/09 20:55:49 millert Exp $";
a62 37
#ifndef TCSASOFT
# define TCSASOFT	0
#endif
#ifndef ECHONL
# define ECHONL	0
#endif

#ifndef _POSIX_VDISABLE
# ifdef VDISABLE
#  define _POSIX_VDISABLE	VDISABLE
# else
#  define _POSIX_VDISABLE	0
# endif
#endif

/*
 * Compat macros for non-termios systems.
 */
#ifndef HAVE_TERMIOS_H
# ifdef HAVE_TERMIO_H
#  undef termios
#  define termios		termio
#  define tcgetattr(f, t)	ioctl(f, TCGETA, t)
#  define tcsetattr(f, a, t)	ioctl(f, a, t)
#  undef TCSAFLUSH
#  define TCSAFLUSH		TCSETAF
# else
#  undef termios
#  define termios		sgttyb
#  define c_lflag		sg_flags
#  define tcgetattr(f, t)	ioctl(f, TIOCGETP, t)
#  define tcsetattr(f, a, t)	ioctl(f, a, t)
#  undef TCSAFLUSH
#  define TCSAFLUSH		TIOCSETP
# endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */

d66 1
a66 1
static char *getln __P((int, char *, size_t));
d69 4
a83 1
    struct termios term, oterm;
d86 1
a86 1
    int input, output, save_errno;
d122 4
a125 13
    /* Turn echo off/on as specified by flags.  */
    if (tcgetattr(input, &oterm) == 0) {
	(void) memcpy(&term, &oterm, sizeof(term));
	if (!ISSET(flags, TGP_ECHO))
	    CLR(term.c_lflag, ECHO|ECHONL);
#ifdef VSTATUS
	term.c_cc[VSTATUS] = _POSIX_VDISABLE;
#endif
	(void) tcsetattr(input, TCSAFLUSH|TCSASOFT, &term);
    } else {
	zero_bytes(&term, sizeof(term));
	zero_bytes(&oterm, sizeof(oterm));
    }
d134 1
a134 1
	pass = getln(input, buf, sizeof(buf));
d138 1
a138 1
	if (!ISSET(term.c_lflag, ECHO))
d143 1
a143 5
    if (memcmp(&term, &oterm, sizeof(term)) != 0) {
	while (tcsetattr(input, TCSAFLUSH|TCSASOFT, &oterm) == -1 &&
	    errno == EINTR)
	    continue;
    }
d211 1
a211 1
    pass = getln(pfd[0], buf, sizeof(buf));
d218 2
d221 1
a221 1
getln(fd, buf, bufsiz)
d225 1
d227 1
d232 1
a232 1
    if (bufsiz == 0) {
d237 1
a237 1
    while (--bufsiz) {
d241 18
d262 7
@


1.17
log
@Even if neither stdin nor stdout are ttys we may still have /dev/tty
available to us.
@
text
@d74 1
a74 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.125 2008/11/25 17:01:34 millert Exp $";
d118 1
a118 1
static char *sudo_askpass(const char *);
@


1.16
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d74 1
a74 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.124 2008/11/08 15:30:42 millert Exp $";
d311 10
@


1.15
log
@Update to sudo 1.6.9p17
@
text
@d2 2
a3 1
 * Copyright (c) 1996, 1998-2005 Todd C. Miller <Todd.Miller@@courtesan.com>
d74 1
a74 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.111.2.7 2008/06/21 00:27:01 millert Exp $";
d118 1
d137 5
d157 1
d180 2
a181 2
	memset(&term, 0, sizeof(term));
	memset(&oterm, 0, sizeof(oterm));
d235 44
d285 3
a287 2
    char c, *cp;
    ssize_t nr;
d294 4
a297 3
    cp = buf;
    nr = -1;
    while (--bufsiz && (nr = read(fd, &c, 1)) == 1 && c != '\n' && c != '\r')
d299 1
d301 2
a302 1
    return(nr == -1 ? NULL : buf);
@


1.14
log
@update to sudo 1.6.9p12
@
text
@d73 1
a73 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.111.2.6 2008/01/16 18:03:24 millert Exp $";
a88 8
#endif

/*
 * QNX 6 (at least) has issues with TCSAFLUSH.
 */
#ifdef __QNX__
#undef TCSAFLUSH
#define	TCSAFLUSH	TCSADRAIN
@


1.13
log
@Use TCSAFLUSH not TCSADRAIN when turning off echo and use TCSANOW when
restoring it.
@
text
@d73 1
a73 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.111.2.5 2007/10/17 15:39:43 millert Exp $";
a109 2
#  undef TCSANOW
#  define TCSANOW		TCSETA
a117 2
#  undef TCSANOW
#  define TCSANOW		TIOCSETN
d201 1
a201 1
	while (tcsetattr(input, TCSANOW|TCSASOFT, &oterm) == -1 &&
@


1.12
log
@Update to sudo 1.6.9p6
@
text
@d73 1
a73 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.111.2.4 2007/10/08 16:01:10 millert Exp $";
d92 1
a92 1
 * Abstract method of getting at the term flags.
d94 9
a102 8
#undef TERM
#undef tflags
#ifdef HAVE_TERMIOS_H
# define TERM			termios
# define tflags			c_lflag
# define term_getattr(f, t)	tcgetattr(f, t)
# define term_setattr(f, t)	tcsetattr(f, TCSADRAIN|TCSASOFT, t)
#else
d104 8
a111 4
# define TERM			termio
# define tflags			c_lflag
# define term_getattr(f, t)	ioctl(f, TCGETA, t)
# define term_setattr(f, t)	ioctl(f, TCSETAF, t)
d113 9
a121 4
#  define TERM			sgttyb
#  define tflags		sg_flags
#  define term_getattr(f, t)	ioctl(f, TIOCGETP, t)
#  define term_setattr(f, t)	ioctl(f, TIOCSETP, t)
d141 1
a141 1
    struct TERM term, oterm;
d175 1
a175 1
    if (term_getattr(input, &oterm) == 0) {
d178 1
a178 1
	    CLR(term.tflags, (ECHO | ECHONL));
d182 1
a182 1
	(void) term_setattr(input, &term);
d199 1
a199 1
	if (!ISSET(term.tflags, ECHO))
d204 5
a208 2
    if (memcmp(&term, &oterm, sizeof(term)) != 0)
	(void) term_setattr(input, &oterm);
@


1.11
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d73 1
a73 1
__unused static const char rcsid[] = "$Sudo: tgetpass.c,v 1.111.2.2 2007/06/12 01:26:35 millert Exp $";
d138 3
d178 10
a187 2
    if (prompt)
	(void) write(output, prompt, strlen(prompt));
d189 3
a191 8
    if (timeout > 0)
	alarm(timeout);
    pass = getln(input, buf, sizeof(buf));
    alarm(0);
    save_errno = errno;

    if (!ISSET(term.tflags, ECHO))
	(void) write(output, "\n", 1);
a216 1
		signo = 0;
d221 2
a222 1
    errno = save_errno;
@


1.10
log
@Update to sudo 1.6.8p1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d25 1
a25 1
#include "config.h"
d73 1
a73 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.111 2004/06/06 23:58:11 millert Exp $";
d100 1
a100 1
# define term_setattr(f, t)	tcsetattr(f, TCSAFLUSH|TCSASOFT, t)
@


1.9
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@d2 1
a2 2
 * Copyright (c) 1996, 1998-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
d4 11
a14 28
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d21 4
a31 3
#ifdef HAVE_SYS_SELECT_H
# include <sys/select.h>
#endif /* HAVE_SYS_SELECT_H */
d73 1
a73 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.105 2003/04/16 00:42:10 millert Exp $";
a116 1
static char *tgetline __P((int, char *, size_t, int));
d118 1
d129 1
a129 1
    sigaction_t sa, saveint, savehup, savequit, saveterm;
d131 2
a134 2
    struct TERM term, oterm;
    char *pass;
d136 1
d139 1
a139 1
    if ((flags & TGP_STDIN) ||
d147 1
a147 2
     * up with echo turned off in the shell.  Don't worry about
     * things like SIGALRM and SIGPIPE for now.
d150 1
a150 1
    sa.sa_flags = 0;		/* don't restart system calls */
d152 1
d164 2
a165 2
	if (!(flags & TGP_ECHO))
	    term.tflags &= ~(ECHO | ECHONL);
d178 4
a181 1
    pass = tgetline(input, buf, sizeof(buf), timeout);
d184 1
a184 1
    if (!(term.tflags & ECHO))
d190 1
d206 1
a206 1
	kill(getpid(), signo); 
a219 3
/*
 * Get a line of input (optionally timing out) and place it in buf.
 */
d221 1
a221 1
tgetline(fd, buf, bufsiz, timeout)
a224 1
    int timeout;
d226 2
a227 6
    fd_set *readfds = NULL;
    struct timeval tv;
    size_t left;
    char *cp;
    char c;
    int n;
d235 3
a237 40
    left = bufsiz;

    /*
     * Timeout of <= 0 means no timeout.
     */
    if (timeout > 0) {
	/* Setup for select(2) */
	n = howmany(fd + 1, NFDBITS) * sizeof(fd_mask);
	readfds = (fd_set *) emalloc(n);
	(void) memset((VOID *)readfds, 0, n);

	/* Set timeout for select */
	tv.tv_sec = timeout;
	tv.tv_usec = 0;

	while (--left) {
	    FD_SET(fd, readfds);

	    /* Make sure there is something to read (or timeout) */
	    while ((n = select(fd + 1, readfds, 0, 0, &tv)) == -1 &&
		errno == EAGAIN)
		;
	    if (n <= 0) {
		free(readfds);
		return(NULL);		/* timeout or interrupt */
	    }

	    /* Read a character, exit loop on error, EOF or EOL */
	    n = read(fd, &c, 1);
	    if (n != 1 || c == '\n' || c == '\r')
		break;
	    *cp++ = c;
	}
	free(readfds);
    } else {
	/* Keep reading until out of space, EOF, error, or newline */
	n = -1;
	while (--left && (n = read(fd, &c, 1)) == 1 && c != '\n' && c != '\r')
	    *cp++ = c;
    }
d239 1
a239 2

    return(n == -1 ? NULL : buf);
d242 2
a243 1
static void handler(s)
d246 2
a247 1
    signo = s;
@


1.8
log
@update to what will soon be sudo 1.6.7
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d33 4
d90 1
a90 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.104 2002/12/13 18:20:34 millert Exp $";
@


1.7
log
@Update to sudo 1.6.4
@
text
@d86 1
a86 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.103 2001/12/17 23:56:47 millert Exp $";
a156 3
    if (prompt)
	(void) write(output, prompt, strlen(prompt));

d186 3
@


1.6
log
@update to sudo 1.6.3p5
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2000 Todd C. Miller <Todd.Miller@@courtesan.com>
d37 9
d48 6
a53 1
#include <stdlib.h>
d55 10
d66 1
a66 1
#include <unistd.h>
a67 6
#ifdef HAVE_STRING_H
#include <string.h>
#endif /* HAVE_STRING_H */
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif /* HAVE_STRINGS_H */
a68 9
#include <sys/param.h>
#include <sys/types.h>
#ifdef HAVE_SYS_BSDTYPES_H
#include <sys/bsdtypes.h>
#endif /* HAVE_SYS_BSDTYPES_H */
#ifdef HAVE_SYS_SELECT_H
#include <sys/select.h>
#endif /* HAVE_SYS_SELECT_H */
#include <sys/time.h>
d73 1
a73 1
#include <termios.h>
d75 6
a80 6
#ifdef HAVE_TERMIO_H
#include <termio.h>
#else
#include <sgtty.h>
#include <sys/ioctl.h>
#endif /* HAVE_TERMIO_H */
d86 1
a86 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.95 2000/02/27 03:48:56 millert Exp $";
d90 13
a102 2
#define TCSASOFT	0
#endif /* TCSASOFT */
d119 1
a119 1
# define term_setattr(f, t)	ioctl(f, TCSETA, t)
d128 2
d131 1
d142 4
d147 1
a147 2
    int input, output;
    static char buf[SUDO_PASS_MAX + 1];
d149 1
d160 16
d177 12
a188 10
    (void) term_getattr(input, &oterm);
    (void) memcpy(&term, &oterm, sizeof(term));
    if ((flags & TGP_ECHO) && !(term.tflags & ECHO))
	term.tflags |= ECHO;
    else if (!(flags & TGP_ECHO) && (term.tflags & ECHO))
	term.tflags &= ~ECHO;
    (void) term_setattr(input, &term);

    buf[0] = '\0';
    tgetline(input, buf, sizeof(buf), timeout);
d190 2
a191 2
    /* Restore old tty flags.  */
    (void) term_setattr(input, &oterm);
d193 1
a193 1
    if (!(flags & TGP_ECHO))
d196 10
d209 17
a225 1
    return(buf);
a237 2
    size_t left;
    int n;
d240 2
d243 1
a243 1
    char *cp;
d245 2
a246 1
    if (bufsiz == 0)
d248 1
d271 1
a271 1
		errno == EINTR)
d273 4
a276 2
	    if (n == 0)
		return(NULL);		/* timeout */
d287 1
d293 7
a299 1
    return(cp == buf ? NULL : buf);
@


1.6.4.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d37 15
a52 1
#include <sys/param.h>
d54 1
a54 1
# include <sys/bsdtypes.h>
d57 1
a57 1
# include <sys/select.h>
a59 23
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# if defined(HAVE_MEMORY_H) && !defined(STDC_HEADERS)
#  include <memory.h>
# endif
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <pwd.h>
d64 4
a67 1
# include <termios.h>
d69 3
a71 6
# ifdef HAVE_TERMIO_H
#  include <termio.h>
# else
#  include <sgtty.h>
#  include <sys/ioctl.h>
# endif /* HAVE_TERMIO_H */
d77 1
a77 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.103 2001/12/17 23:56:47 millert Exp $";
d81 2
a82 13
# define TCSASOFT	0
#endif
#ifndef ECHONL
# define ECHONL	0
#endif

#ifndef _POSIX_VDISABLE
# ifdef VDISABLE
#  define _POSIX_VDISABLE	VDISABLE
# else
#  define _POSIX_VDISABLE	0
# endif
#endif
d99 1
a99 1
# define term_setattr(f, t)	ioctl(f, TCSETAF, t)
a107 2
static volatile sig_atomic_t signo;

a108 1
static void handler __P((int));
d119 2
a120 2
    sigaction_t sa, saveint, savehup, savequit, saveterm;
    sigaction_t savetstp, savettin, savettou;
a121 3
    int input, output, save_errno;
    struct TERM term, oterm;
    char *pass;
a122 1
restart:
d133 8
a140 15
    /*
     * Catch signals that would otherwise cause the user to end
     * up with echo turned off in the shell.  Don't worry about
     * things like SIGALRM and SIGPIPE for now.
     */
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;		/* don't restart system calls */
    sa.sa_handler = handler;
    (void) sigaction(SIGINT, &sa, &saveint);
    (void) sigaction(SIGHUP, &sa, &savehup);
    (void) sigaction(SIGQUIT, &sa, &savequit);
    (void) sigaction(SIGTERM, &sa, &saveterm);
    (void) sigaction(SIGTSTP, &sa, &savetstp);
    (void) sigaction(SIGTTIN, &sa, &savettin);
    (void) sigaction(SIGTTOU, &sa, &savettou);
d142 2
a143 13
    /* Turn echo off/on as specified by flags.  */
    if (term_getattr(input, &oterm) == 0) {
	(void) memcpy(&term, &oterm, sizeof(term));
	if (!(flags & TGP_ECHO))
	    term.tflags &= ~(ECHO | ECHONL);
#ifdef VSTATUS
	term.c_cc[VSTATUS] = _POSIX_VDISABLE;
#endif
	(void) term_setattr(input, &term);
    } else {
	memset(&term, 0, sizeof(term));
	memset(&oterm, 0, sizeof(oterm));
    }
d145 2
a146 2
    pass = tgetline(input, buf, sizeof(buf), timeout);
    save_errno = errno;
d148 1
a148 1
    if (!(term.tflags & ECHO))
a150 10
    /* Restore old tty settings and signals. */
    if (memcmp(&term, &oterm, sizeof(term)) != 0)
	(void) term_setattr(input, &oterm);
    (void) sigaction(SIGINT, &saveint, NULL);
    (void) sigaction(SIGHUP, &savehup, NULL);
    (void) sigaction(SIGQUIT, &savequit, NULL);
    (void) sigaction(SIGTERM, &saveterm, NULL);
    (void) sigaction(SIGTSTP, &savetstp, NULL);
    (void) sigaction(SIGTTIN, &savettin, NULL);
    (void) sigaction(SIGTTOU, &savettou, NULL);
d154 1
a154 17
    /*
     * If we were interrupted by a signal, resend it to ourselves
     * now that we have restored the signal handlers.
     */
    if (signo) {
	kill(getpid(), signo); 
	switch (signo) {
	    case SIGTSTP:
	    case SIGTTIN:
	    case SIGTTOU:
		signo = 0;
		goto restart;
	}
    }

    errno = save_errno;
    return(pass);
d167 2
d171 1
a171 1
    size_t left;
a172 2
    char c;
    int n;
d174 1
a174 2
    if (bufsiz == 0) {
	errno = EINVAL;
a175 1
    }
d198 1
a198 1
		errno == EAGAIN)
d200 2
a201 4
	    if (n <= 0) {
		free(readfds);
		return(NULL);		/* timeout or interrupt */
	    }
a211 1
	n = -1;
d217 1
a217 7
    return(n == -1 ? NULL : buf);
}

static void handler(s)
    int s;
{
    signo = s;
@


1.6.6.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d37 15
a52 1
#include <sys/param.h>
d54 1
a54 1
# include <sys/bsdtypes.h>
d57 1
a57 1
# include <sys/select.h>
a59 23
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# if defined(HAVE_MEMORY_H) && !defined(STDC_HEADERS)
#  include <memory.h>
# endif
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <pwd.h>
d64 4
a67 1
# include <termios.h>
d69 3
a71 6
# ifdef HAVE_TERMIO_H
#  include <termio.h>
# else
#  include <sgtty.h>
#  include <sys/ioctl.h>
# endif /* HAVE_TERMIO_H */
d77 1
a77 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.103 2001/12/17 23:56:47 millert Exp $";
d81 2
a82 13
# define TCSASOFT	0
#endif
#ifndef ECHONL
# define ECHONL	0
#endif

#ifndef _POSIX_VDISABLE
# ifdef VDISABLE
#  define _POSIX_VDISABLE	VDISABLE
# else
#  define _POSIX_VDISABLE	0
# endif
#endif
d99 1
a99 1
# define term_setattr(f, t)	ioctl(f, TCSETAF, t)
a107 2
static volatile sig_atomic_t signo;

a108 1
static void handler __P((int));
d119 2
a120 2
    sigaction_t sa, saveint, savehup, savequit, saveterm;
    sigaction_t savetstp, savettin, savettou;
a121 3
    int input, output, save_errno;
    struct TERM term, oterm;
    char *pass;
a122 1
restart:
d133 8
a140 15
    /*
     * Catch signals that would otherwise cause the user to end
     * up with echo turned off in the shell.  Don't worry about
     * things like SIGALRM and SIGPIPE for now.
     */
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;		/* don't restart system calls */
    sa.sa_handler = handler;
    (void) sigaction(SIGINT, &sa, &saveint);
    (void) sigaction(SIGHUP, &sa, &savehup);
    (void) sigaction(SIGQUIT, &sa, &savequit);
    (void) sigaction(SIGTERM, &sa, &saveterm);
    (void) sigaction(SIGTSTP, &sa, &savetstp);
    (void) sigaction(SIGTTIN, &sa, &savettin);
    (void) sigaction(SIGTTOU, &sa, &savettou);
d142 2
a143 13
    /* Turn echo off/on as specified by flags.  */
    if (term_getattr(input, &oterm) == 0) {
	(void) memcpy(&term, &oterm, sizeof(term));
	if (!(flags & TGP_ECHO))
	    term.tflags &= ~(ECHO | ECHONL);
#ifdef VSTATUS
	term.c_cc[VSTATUS] = _POSIX_VDISABLE;
#endif
	(void) term_setattr(input, &term);
    } else {
	memset(&term, 0, sizeof(term));
	memset(&oterm, 0, sizeof(oterm));
    }
d145 2
a146 2
    pass = tgetline(input, buf, sizeof(buf), timeout);
    save_errno = errno;
d148 1
a148 1
    if (!(term.tflags & ECHO))
a150 10
    /* Restore old tty settings and signals. */
    if (memcmp(&term, &oterm, sizeof(term)) != 0)
	(void) term_setattr(input, &oterm);
    (void) sigaction(SIGINT, &saveint, NULL);
    (void) sigaction(SIGHUP, &savehup, NULL);
    (void) sigaction(SIGQUIT, &savequit, NULL);
    (void) sigaction(SIGTERM, &saveterm, NULL);
    (void) sigaction(SIGTSTP, &savetstp, NULL);
    (void) sigaction(SIGTTIN, &savettin, NULL);
    (void) sigaction(SIGTTOU, &savettou, NULL);
d154 1
a154 17
    /*
     * If we were interrupted by a signal, resend it to ourselves
     * now that we have restored the signal handlers.
     */
    if (signo) {
	kill(getpid(), signo); 
	switch (signo) {
	    case SIGTSTP:
	    case SIGTTIN:
	    case SIGTTOU:
		signo = 0;
		goto restart;
	}
    }

    errno = save_errno;
    return(pass);
d167 2
d171 1
a171 1
    size_t left;
a172 2
    char c;
    int n;
d174 1
a174 2
    if (bufsiz == 0) {
	errno = EINVAL;
a175 1
    }
d198 1
a198 1
		errno == EAGAIN)
d200 2
a201 4
	    if (n <= 0) {
		free(readfds);
		return(NULL);		/* timeout or interrupt */
	    }
a211 1
	n = -1;
d217 1
a217 7
    return(n == -1 ? NULL : buf);
}

static void handler(s)
    int s;
{
    signo = s;
@


1.5
log
@sudo 1.6.3; see http://www.courtesan.com/sudo/current.html for a list
of changes.
@
text
@d131 1
a131 1
	(void) write(output, prompt, strlen(prompt) + 1);
@


1.4
log
@Fixed a bug that caused an infinite loop when the password
timeout was disabled.
@
text
@d76 4
d84 23
a106 3
#ifndef lint
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.93 2000/01/17 23:46:26 millert Exp $";
#endif /* lint */
d114 1
a114 1
tgetpass(prompt, timeout, echo_off)
d117 1
a117 1
    int echo_off;
d119 1
a119 9
#ifdef HAVE_TERMIOS_H
    struct termios term;
#else
#ifdef HAVE_TERMIO_H
    struct termio term;
#else
    struct sgttyb ttyb;
#endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */
d124 2
a125 1
    if ((input = output = open(_PATH_TTY, O_RDWR|O_NOCTTY)) == -1) {
d133 8
a140 23
    if (echo_off) {
#ifdef HAVE_TERMIOS_H
	(void) tcgetattr(input, &term);
	if ((echo_off = (term.c_lflag & ECHO))) {
	    term.c_lflag &= ~ECHO;
	    (void) tcsetattr(input, TCSAFLUSH|TCSASOFT, &term);
	}
#else
#ifdef HAVE_TERMIO_H
	(void) ioctl(input, TCGETA, &term);
	if ((echo_off = (term.c_lflag & ECHO))) {
	    term.c_lflag &= ~ECHO;
	    (void) ioctl(input, TCSETA, &term);
	}
#else
	(void) ioctl(input, TIOCGETP, &ttyb);
	if ((echo_off = (ttyb.sg_flags & ECHO))) {
	    ttyb.sg_flags &= ~ECHO;
	    (void) ioctl(input, TIOCSETP, &ttyb);
	}
#endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */
    }
d145 2
a146 18
#ifdef HAVE_TERMIOS_H
    if (echo_off) {
	term.c_lflag |= ECHO;
	(void) tcsetattr(input, TCSAFLUSH|TCSASOFT, &term);
    }
#else
#ifdef HAVE_TERMIO_H
    if (echo_off) {
	term.c_lflag |= ECHO;
	(void) ioctl(input, TCSETA, &term);
    }
#else
    if (echo_off) {
	ttyb.sg_flags |= ECHO;
	(void) ioctl(input, TIOCSETP, &ttyb);
    }
#endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */
d148 1
a148 1
    if (echo_off)
@


1.3
log
@sudo 1.6.2
@
text
@d226 1
a226 1
	while (--left && (n = read(fd, &c, 1)) == 1 && (c != '\n' || c != '\r'))
@


1.2
log
@sudo 1.6.1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998, 1999 Todd C. Miller <Todd.Miller@@courtesan.com>
d81 1
a81 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.91 1999/12/05 02:18:47 millert Exp $";
d219 1
a219 1
	    if (n != 1 || c == '\n')
d226 1
a226 1
	while (--left && (n = read(fd, &c, 1)) == 1 && c != '\n')
@


1.1
log
@Initial revision
@
text
@d81 1
a81 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.90 1999/11/01 15:58:46 millert Exp $";
d191 3
a201 1
	FD_SET(fd, readfds);
d207 21
a227 8
	/*
	 * Make sure there is something to read or timeout
	 */
	while ((n = select(fd + 1, readfds, 0, 0, &tv)) == -1 &&
	    errno == EINTR)
	    ;
	if (n == 0)
	    return(NULL);		/* timeout */
a228 8
    if (readfds)
	free(readfds);

    /* Keep reading until out of space, EOF, error, or newline */
    cp = buf;
    left = bufsiz;
    while (--left && (n = read(fd, &c, 1)) == 1 && c != '\n')
	*cp++ = c;
@


1.1.1.1
log
@sudo 1.6, now with a BSD license
@
text
@@
