head	1.12;
access;
symbols
	OPENBSD_5_7:1.11.0.18
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SUDO_1_6_0:1.1.1.1
	COURTESAN:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.11;
commitid	8ra5qnWqy2bUhcZn;

1.11
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.16.18.09.13;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.17.58.44;	author millert;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2000.06.05.14.01.15;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.27.03.44.38;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches;
next	;

1.4.2.1
date	2002.01.18.17.20.23;	author millert;	state Exp;
branches;
next	;

1.4.4.1
date	2002.01.18.16.14.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 1996, 1998-2005 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#include <config.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# if defined(HAVE_MEMORY_H) && !defined(STDC_HEADERS)
#  include <memory.h>
# endif
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <pwd.h>
#include <grp.h>
#ifdef HAVE_GETSPNAM
# include <shadow.h>
#endif /* HAVE_GETSPNAM */
#ifdef HAVE_GETPRPWNAM
# ifdef __hpux
#  undef MAXINT
#  include <hpsecurity.h>
# else
#  include <sys/security.h>
# endif /* __hpux */
# include <prot.h>
#endif /* HAVE_GETPRPWNAM */
#ifdef HAVE_GETPWANAM
# include <sys/label.h>
# include <sys/audit.h>
# include <pwdadj.h>
#endif /* HAVE_GETPWANAM */
#ifdef HAVE_GETAUTHUID
# include <auth.h>
#endif /* HAVE_GETAUTHUID */

#include "sudo.h"

/*
 * Exported for auth/secureware.c
 */
#if defined(HAVE_GETPRPWNAM) && defined(__alpha)
int crypt_type = INT_MAX;
#endif /* HAVE_GETPRPWNAM && __alpha */

/*
 * Return a copy of the encrypted password for the user described by pw.
 * If shadow passwords are in use, look in the shadow file.
 */
char *
sudo_getepw(pw)
    const struct passwd *pw;
{
    char *epw;

    /* If there is a function to check for shadow enabled, use it... */
#ifdef HAVE_ISCOMSEC
    if (!iscomsec())
	return(estrdup(pw->pw_passwd));
#endif /* HAVE_ISCOMSEC */
#ifdef HAVE_ISSECURE
    if (!issecure())
	return(estrdup(pw->pw_passwd));
#endif /* HAVE_ISSECURE */

    epw = NULL;
#ifdef HAVE_GETPRPWNAM
    {
	struct pr_passwd *spw;

	if ((spw = getprpwnam(pw->pw_name)) && spw->ufld.fd_encrypt) {
# ifdef __alpha
	    crypt_type = spw->ufld.fd_oldcrypt;
# endif /* __alpha */
	    epw = estrdup(spw->ufld.fd_encrypt);
	}
	if (epw)
	    return(epw);
    }
#endif /* HAVE_GETPRPWNAM */
#ifdef HAVE_GETSPNAM
    {
	struct spwd *spw;

	if ((spw = getspnam(pw->pw_name)) && spw->sp_pwdp)
	    epw = estrdup(spw->sp_pwdp);
	if (epw)
	    return(epw);
    }
#endif /* HAVE_GETSPNAM */
#ifdef HAVE_GETSPWUID
    {
	struct s_passwd *spw;

	if ((spw = getspwuid(pw->pw_uid)) && spw->pw_passwd)
	    epw = estrdup(spw->pw_passwd);
	if (epw)
	    return(epw);
    }
#endif /* HAVE_GETSPWUID */
#ifdef HAVE_GETPWANAM
    {
	struct passwd_adjunct *spw;

	if ((spw = getpwanam(pw->pw_name)) && spw->pwa_passwd)
	    epw = estrdup(spw->pwa_passwd);
	if (epw)
	    return(epw);
    }
#endif /* HAVE_GETPWANAM */
#ifdef HAVE_GETAUTHUID
    {
	AUTHORIZATION *spw;

	if ((spw = getauthuid(pw->pw_uid)) && spw->a_password)
	    epw = estrdup(spw->a_password);
	if (epw)
	    return(epw);
    }
#endif /* HAVE_GETAUTHUID */

    /* Fall back on normal password. */
    return(estrdup(pw->pw_passwd));
}

void
sudo_setspent()
{
#ifdef HAVE_GETPRPWNAM
    setprpwent();
#endif
#ifdef HAVE_GETSPNAM
    setspent();
#endif
#ifdef HAVE_GETSPWUID
    setspwent();
#endif
#ifdef HAVE_GETPWANAM
    setpwaent();
#endif
#ifdef HAVE_GETAUTHUID
    setauthent();
#endif
}

void
sudo_endspent()
{
#ifdef HAVE_GETPRPWNAM
    endprpwent();
#endif
#ifdef HAVE_GETSPNAM
    endspent();
#endif
#ifdef HAVE_GETSPWUID
    endspwent();
#endif
#ifdef HAVE_GETPWANAM
    endpwaent();
#endif
#ifdef HAVE_GETAUTHUID
    endauthent();
#endif
}
@


1.11
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.10
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@a72 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: getspwuid.c,v 1.78 2005/02/12 22:56:06 millert Exp $";
#endif /* lint */

@


1.9
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d49 1
d74 1
a74 1
__unused static const char rcsid[] = "$Sudo: getspwuid.c,v 1.65.2.2 2007/06/12 01:28:41 millert Exp $";
d78 1
a78 1
 * Global variables (yuck)
a83 1

a108 1
	setprpwent();
a114 1
	endprpwent();
a122 1
	setspent();
a124 1
	endspent();
a132 1
	setspwent();
a134 1
	endspwent();
a142 1
	setpwaent();
a144 1
	endpwaent();
a152 1
	setauthent();
a154 1
	endauthent();
d164 2
a165 7
/*
 * Dynamically allocate space for a struct password and the constituent parts
 * that we care about.  Fills in pw_passwd from shadow file if necessary.
 */
struct passwd *
sudo_pwdup(pw)
    const struct passwd *pw;
d167 11
a177 28
    char *cp;
    const char *pw_passwd, *pw_shell;
    size_t nsize, psize, csize, gsize, dsize, ssize, total;
    struct passwd *newpw;

    /* Get shadow password if available. */
    pw_passwd = sudo_getepw(pw);

    /* If shell field is empty, expand to _PATH_BSHELL. */
    pw_shell = (pw->pw_shell == NULL || pw->pw_shell[0] == '\0')
	? _PATH_BSHELL : pw->pw_shell;

    /* Allocate in one big chunk for easy freeing. */
    nsize = psize = csize = gsize = dsize = ssize = 0;
    total = sizeof(struct passwd);
    if (pw->pw_name) {
	    nsize = strlen(pw->pw_name) + 1;
	    total += nsize;
    }
    if (pw_passwd) {
	    psize = strlen(pw_passwd) + 1;
	    total += psize;
    }
#ifdef HAVE_LOGIN_CAP_H
    if (pw->pw_class) {
	    csize = strlen(pw->pw_class) + 1;
	    total += csize;
    }
d179 2
a180 38
    if (pw->pw_gecos) {
	    gsize = strlen(pw->pw_gecos) + 1;
	    total += gsize;
    }
    if (pw->pw_dir) {
	    dsize = strlen(pw->pw_dir) + 1;
	    total += dsize;
    }
    if (pw_shell) {
	    ssize = strlen(pw_shell) + 1;
	    total += ssize;
    }
    if ((cp = malloc(total)) == NULL)
	    return (NULL);
    newpw = (struct passwd *)cp;

    /*
     * Copy in passwd contents and make strings relative to space
     * at the end of the buffer.
     */
    (void)memcpy(newpw, pw, sizeof(struct passwd));
    cp += sizeof(struct passwd);
    if (nsize) {
	    (void)memcpy(cp, pw->pw_name, nsize);
	    newpw->pw_name = cp;
	    cp += nsize;
    }
    if (psize) {
	    (void)memcpy(cp, pw_passwd, psize);
	    newpw->pw_passwd = cp;
	    cp += psize;
    }
#ifdef HAVE_LOGIN_CAP_H
    if (csize) {
	    (void)memcpy(cp, pw->pw_class, csize);
	    newpw->pw_class = cp;
	    cp += csize;
    }
a181 17
    if (gsize) {
	    (void)memcpy(cp, pw->pw_gecos, gsize);
	    newpw->pw_gecos = cp;
	    cp += gsize;
    }
    if (dsize) {
	    (void)memcpy(cp, pw->pw_dir, dsize);
	    newpw->pw_dir = cp;
	    cp += dsize;
    }
    if (ssize) {
	    (void)memcpy(cp, pw_shell, ssize);
	    newpw->pw_shell = cp;
	    cp += ssize;
    }

    return (newpw);
d184 2
a185 7
/*
 * Get a password entry by uid and allocate space for it.
 * Fills in pw_passwd from shadow file if necessary.
 */
struct passwd *
sudo_getpwuid(uid)
    uid_t uid;
d187 15
a201 22
    struct passwd *pw;

    if ((pw = getpwuid(uid)) == NULL)
	return(NULL);
    else
	return(sudo_pwdup(pw));
}

/*
 * Get a password entry by name and allocate space for it.
 * Fills in pw_passwd from shadow file if necessary.
 */
struct passwd *
sudo_getpwnam(name)
    const char *name;
{
    struct passwd *pw;

    if ((pw = getpwnam(name)) == NULL)
	return(NULL);
    else
	return(sudo_pwdup(pw));
@


1.8
log
@Update to sudo 1.6.8p1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d21 1
a21 1
#include "config.h"
d73 1
a73 1
static const char rcsid[] = "$Sudo: getspwuid.c,v 1.65 2004/02/13 21:36:43 millert Exp $";
@


1.7
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@a2 1
 * All rights reserved.
d4 3
a6 3
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
d8 7
a14 24
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d73 1
a73 1
static const char rcsid[] = "$Sudo: getspwuid.c,v 1.63 2003/04/16 00:42:10 millert Exp $";
a84 6
 * Local functions not visible outside getspwuid.c
 */
static struct passwd *sudo_pwdup	__P((struct passwd *));


/*
d90 1
a90 1
    struct passwd *pw;
d178 1
a178 1
static struct passwd *
d180 1
a180 1
    struct passwd *pw;
d182 11
a192 1
    struct passwd *local_pw;
d194 32
a225 2
    /* Allocate space for a local copy of pw. */
    local_pw = (struct passwd *) emalloc(sizeof(struct passwd));
d228 2
a229 1
     * Copy the struct passwd and the interesting strings...
d231 12
a242 4
    (void) memcpy(local_pw, pw, sizeof(struct passwd));
    local_pw->pw_name = estrdup(pw->pw_name);
    local_pw->pw_dir = estrdup(pw->pw_dir);
    local_pw->pw_gecos = estrdup(pw->pw_gecos);
d244 5
a248 1
    local_pw->pw_class = estrdup(pw->pw_class);
d250 15
d266 1
a266 10
    /* If shell field is empty, expand to _PATH_BSHELL. */
    if (local_pw->pw_shell[0] == '\0')
	local_pw->pw_shell = _PATH_BSHELL;
    else
	local_pw->pw_shell = estrdup(pw->pw_shell);

    /* pw_passwd gets a shadow password if applicable */
    local_pw->pw_passwd = sudo_getepw(pw);

    return(local_pw);
@


1.6
log
@update to sudo 1.6.4p2
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d33 4
d91 1
a91 1
static const char rcsid[] = "$Sudo: getspwuid.c,v 1.62 2002/01/15 23:43:59 millert Exp $";
@


1.5
log
@Update to sudo 1.6.4
@
text
@d87 1
a87 1
static const char rcsid[] = "$Sudo: getspwuid.c,v 1.61 2001/12/14 19:52:47 millert Exp $";
a100 1
static char *sudo_getshell		__P((struct passwd *));
a104 20
 * Return the user's shell based on either the SHELL environment variable
 * (already assigned to user_shell) or, failing that, the passwd(5) entry.
 */
static char *
sudo_getshell(pw)
    struct passwd *pw;
{
    char *pw_shell;

    if ((pw_shell = user_shell) == NULL)
	pw_shell = pw->pw_shell;

    /* empty string "" means bourne shell */
    if (*pw_shell == '\0')
	pw_shell = _PATH_BSHELL;

    return(pw_shell);
}

/*
d218 5
a222 2
    /* pw_shell is a special case since we overide with $SHELL */
    local_pw->pw_shell = estrdup(sudo_getshell(pw));
@


1.4
log
@A few updates from the sudo developement tree:
- Add bsd authentication support (currently disabled)
- Always check setenv() return value
- Fix umask disabling
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998, 1999 Todd C. Miller <Todd.Miller@@courtesan.com>
d37 3
d43 5
d50 3
d54 4
a58 3
#ifdef HAVE_STRINGS_H
# include <strings.h>
#endif /* HAVE_STRINGS_H */
a61 3
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
d87 1
a87 1
static const char rcsid[] = "$Sudo: getspwuid.c,v 1.56 2000/02/18 17:56:26 millert Exp $";
a89 4
#ifndef STDC_HEADERS
extern char *getenv     __P((const char *));
#endif /* !STDC_HEADERS */

d106 2
a107 2
 * Return the user's shell based on either the SHELL
 * environment variable or the passwd(5) entry (in that order).
d115 1
a115 1
    if ((pw_shell = getenv("SHELL")) == NULL)
d126 2
a127 2
 * Return the encrypted password for the user described by pw.  If shadow
 * passwords are in use, look in the shadow file.
d133 1
d138 1
a138 1
	return(pw->pw_passwd);
d142 1
a142 1
	return(pw->pw_passwd);
d145 1
d150 2
a151 2
	spw = getprpwnam(pw->pw_name);
	if (spw != NULL && spw->ufld.fd_encrypt != NULL) {
d155 1
a155 1
	    return(spw->ufld.fd_encrypt);
d157 3
d166 1
d168 4
a171 1
	    return(spw->sp_pwdp);
d178 1
d180 4
a183 1
	    return(spw->pw_passwd);
d190 1
d192 4
a195 1
	    return(spw->pwa_passwd);
d202 1
d204 4
a207 1
	    return(spw->a_password);
d212 1
a212 1
    return(pw->pw_passwd);
d243 1
a243 1
    local_pw->pw_passwd = estrdup(sudo_getepw(pw));
@


1.4.2.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
a36 3
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
a39 5
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
a41 3
# if defined(HAVE_MEMORY_H) && !defined(STDC_HEADERS)
#  include <memory.h>
# endif
a42 4
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
d44 3
d50 3
d78 1
a78 1
static const char rcsid[] = "$Sudo: getspwuid.c,v 1.62 2002/01/15 23:43:59 millert Exp $";
d81 4
d96 1
d101 22
a122 2
 * Return a copy of the encrypted password for the user described by pw.
 * If shadow passwords are in use, look in the shadow file.
a127 1
    char *epw;
d132 1
a132 1
	return(estrdup(pw->pw_passwd));
d136 1
a136 1
	return(estrdup(pw->pw_passwd));
a138 1
    epw = NULL;
d143 2
a144 2
	setprpwent();
	if ((spw = getprpwnam(pw->pw_name)) && spw->ufld.fd_encrypt) {
d148 1
a148 1
	    epw = estrdup(spw->ufld.fd_encrypt);
a149 3
	endprpwent();
	if (epw)
	    return(epw);
a155 1
	setspent();
d157 1
a157 4
	    epw = estrdup(spw->sp_pwdp);
	endspent();
	if (epw)
	    return(epw);
a163 1
	setspwent();
d165 1
a165 4
	    epw = estrdup(spw->pw_passwd);
	endspwent();
	if (epw)
	    return(epw);
a171 1
	setpwaent();
d173 1
a173 4
	    epw = estrdup(spw->pwa_passwd);
	endpwaent();
	if (epw)
	    return(epw);
a179 1
	setauthent();
d181 1
a181 4
	    epw = estrdup(spw->a_password);
	endauthent();
	if (epw)
	    return(epw);
d186 1
a186 1
    return(estrdup(pw->pw_passwd));
d213 2
a214 5
    /* If shell field is empty, expand to _PATH_BSHELL. */
    if (local_pw->pw_shell[0] == '\0')
	local_pw->pw_shell = _PATH_BSHELL;
    else
	local_pw->pw_shell = estrdup(pw->pw_shell);
d217 1
a217 1
    local_pw->pw_passwd = sudo_getepw(pw);
@


1.4.4.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
a36 3
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
a39 5
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
a41 3
# if defined(HAVE_MEMORY_H) && !defined(STDC_HEADERS)
#  include <memory.h>
# endif
a42 4
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
d44 3
d50 3
d78 1
a78 1
static const char rcsid[] = "$Sudo: getspwuid.c,v 1.62 2002/01/15 23:43:59 millert Exp $";
d81 4
d96 1
d101 22
a122 2
 * Return a copy of the encrypted password for the user described by pw.
 * If shadow passwords are in use, look in the shadow file.
a127 1
    char *epw;
d132 1
a132 1
	return(estrdup(pw->pw_passwd));
d136 1
a136 1
	return(estrdup(pw->pw_passwd));
a138 1
    epw = NULL;
d143 2
a144 2
	setprpwent();
	if ((spw = getprpwnam(pw->pw_name)) && spw->ufld.fd_encrypt) {
d148 1
a148 1
	    epw = estrdup(spw->ufld.fd_encrypt);
a149 3
	endprpwent();
	if (epw)
	    return(epw);
a155 1
	setspent();
d157 1
a157 4
	    epw = estrdup(spw->sp_pwdp);
	endspent();
	if (epw)
	    return(epw);
a163 1
	setspwent();
d165 1
a165 4
	    epw = estrdup(spw->pw_passwd);
	endspwent();
	if (epw)
	    return(epw);
a171 1
	setpwaent();
d173 1
a173 4
	    epw = estrdup(spw->pwa_passwd);
	endpwaent();
	if (epw)
	    return(epw);
a179 1
	setauthent();
d181 1
a181 4
	    epw = estrdup(spw->a_password);
	endauthent();
	if (epw)
	    return(epw);
d186 1
a186 1
    return(estrdup(pw->pw_passwd));
d213 2
a214 5
    /* If shell field is empty, expand to _PATH_BSHELL. */
    if (local_pw->pw_shell[0] == '\0')
	local_pw->pw_shell = _PATH_BSHELL;
    else
	local_pw->pw_shell = estrdup(pw->pw_shell);
d217 1
a217 1
    local_pw->pw_passwd = sudo_getepw(pw);
@


1.3
log
@Update to sudo 1.6.3p4
@
text
@a112 1
#ifdef _PATH_BSHELL
a115 1
#endif /* _PATH_BSHELL */
d208 4
@


1.2
log
@sudo 1.6.3; see http://www.courtesan.com/sudo/current.html for a list
of changes.
@
text
@d96 2
a97 1
static char *sudo_getshell	__P((struct passwd *));
d195 3
a197 3
struct passwd *
sudo_getpwuid(uid)
    uid_t uid;
d199 1
a199 4
    struct passwd *pw, *local_pw;

    if ((pw = getpwuid(uid)) == NULL)
	return(NULL);
d218 32
@


1.1
log
@Initial revision
@
text
@d78 1
a78 1
static const char rcsid[] = "$Sudo: getspwuid.c,v 1.55 1999/10/07 21:20:57 millert Exp $";
a96 1
static char *sudo_getepw	__P((struct passwd *));
d125 1
a125 1
static char *
@


1.1.1.1
log
@sudo 1.6, now with a BSD license
@
text
@@
