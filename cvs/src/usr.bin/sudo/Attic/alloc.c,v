head	1.13;
access;
symbols
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	SUDO_1_6_0:1.1.1.1
	COURTESAN:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.12;
commitid	8ra5qnWqy2bUhcZn;

1.12
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.17.04.26.04;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.26.16.10.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.28.15.10.50;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.03.19.15.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.15.21.23.53;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.14.00.11.44;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.05.14.01.15;	author millert;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches;
next	;

1.2.4.1
date	2002.01.18.17.20.22;	author millert;	state Exp;
branches;
next	;

1.2.6.1
date	2002.01.18.16.14.44;	author millert;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 1999-2005, 2007
 *	Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#include <config.h>

#include <sys/types.h>
#include <sys/param.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#if defined(HAVE_MALLOC_H) && !defined(STDC_HEADERS)
# include <malloc.h>
#endif /* HAVE_MALLOC_H && !STDC_HEADERS */
#ifdef HAVE_INTTYPES_H
# include <inttypes.h>
#endif

#include "sudo.h"

/*
 * If there is no SIZE_MAX or SIZE_T_MAX we have to assume that size_t
 * could be signed (as it is on SunOS 4.x).  This just means that
 * emalloc2() and erealloc3() cannot allocate huge amounts on such a
 * platform but that is OK since sudo doesn't need to do so anyway.
 */
#ifndef SIZE_MAX
# ifdef SIZE_T_MAX
#  define SIZE_MAX	SIZE_T_MAX
# else
#  define SIZE_MAX	INT_MAX
# endif /* SIZE_T_MAX */
#endif /* SIZE_MAX */

/*
 * emalloc() calls the system malloc(3) and exits with an error if
 * malloc(3) fails.
 */
void *
emalloc(size)
    size_t size;
{
    void *ptr;

    if (size == 0)
	errorx(1, "internal error, tried to emalloc(0)");

    if ((ptr = malloc(size)) == NULL)
	errorx(1, "unable to allocate memory");
    return(ptr);
}

/*
 * emalloc2() allocates nmemb * size bytes and exits with an error
 * if overflow would occur or if the system malloc(3) fails.
 */
void *
emalloc2(nmemb, size)
    size_t nmemb;
    size_t size;
{
    void *ptr;

    if (nmemb == 0 || size == 0)
	errorx(1, "internal error, tried to emalloc2(0)");
    if (nmemb > SIZE_MAX / size)
	errorx(1, "internal error, emalloc2() overflow");

    size *= nmemb;
    if ((ptr = malloc(size)) == NULL)
	errorx(1, "unable to allocate memory");
    return(ptr);
}

/*
 * erealloc() calls the system realloc(3) and exits with an error if
 * realloc(3) fails.  You can call erealloc() with a NULL pointer even
 * if the system realloc(3) does not support this.
 */
void *
erealloc(ptr, size)
    void *ptr;
    size_t size;
{

    if (size == 0)
	errorx(1, "internal error, tried to erealloc(0)");

    ptr = ptr ? realloc(ptr, size) : malloc(size);
    if (ptr == NULL)
	errorx(1, "unable to allocate memory");
    return(ptr);
}

/*
 * erealloc3() realloc(3)s nmemb * size bytes and exits with an error
 * if overflow would occur or if the system malloc(3)/realloc(3) fails.
 * You can call erealloc() with a NULL pointer even if the system realloc(3)
 * does not support this.
 */
void *
erealloc3(ptr, nmemb, size)
    void *ptr;
    size_t nmemb;
    size_t size;
{

    if (nmemb == 0 || size == 0)
	errorx(1, "internal error, tried to erealloc3(0)");
    if (nmemb > SIZE_MAX / size)
	errorx(1, "internal error, erealloc3() overflow");

    size *= nmemb;
    ptr = ptr ? realloc(ptr, size) : malloc(size);
    if (ptr == NULL)
	errorx(1, "unable to allocate memory");
    return(ptr);
}

/*
 * estrdup() is like strdup(3) except that it exits with an error if
 * malloc(3) fails.  NOTE: unlike strdup(3), estrdup(NULL) is legal.
 */
char *
estrdup(src)
    const char *src;
{
    char *dst = NULL;
    size_t size;

    if (src != NULL) {
	size = strlen(src) + 1;
	dst = (char *) emalloc(size);
	(void) memcpy(dst, src, size);
    }
    return(dst);
}

/*
 * easprintf() calls vasprintf() and exits with an error if vasprintf()
 * returns -1 (out of memory).
 */
int
#ifdef __STDC__
easprintf(char **ret, const char *fmt, ...)
#else
easprintf(ret, fmt, va_alist)
    char **ret;
    const char *fmt;
    va_dcl
#endif
{
    int len;
    va_list ap;
#ifdef __STDC__
    va_start(ap, fmt);
#else
    va_start(ap);
#endif
    len = vasprintf(ret, fmt, ap);
    va_end(ap);

    if (len == -1)
	errorx(1, "unable to allocate memory");
    return(len);
}

/*
 * evasprintf() calls vasprintf() and exits with an error if vasprintf()
 * returns -1 (out of memory).
 */
int
evasprintf(ret, format, args)
    char **ret;
    const char *format;
    va_list args;
{
    int len;

    if ((len = vasprintf(ret, format, args)) == -1)
	errorx(1, "unable to allocate memory");
    return(len);
}

/*
 * Wrapper for free(3) so we can depend on C89 semantics.
 */
void
efree(ptr)
    void *ptr;
{
    if (ptr != NULL)
	free(ptr);
}
@


1.12
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.11
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@a50 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: alloc.c,v 1.33 2008/11/09 14:13:12 millert Exp $";
#endif /* lint */

@


1.10
log
@Update to sudo 1.6.9p6
@
text
@d2 2
a3 1
 * Copyright (c) 1999-2005 Todd C. Miller <Todd.Miller@@courtesan.com>
a44 5
#ifdef HAVE_ERR_H
# include <err.h>
#else
# include "emul/err.h"
#endif /* HAVE_ERR_H */
d52 1
a52 1
__unused static const char rcsid[] = "$Sudo: alloc.c,v 1.23.2.4 2007/09/11 12:20:15 millert Exp $";
d73 1
a73 1
VOID *
d77 1
a77 1
    VOID *ptr;
d80 1
a80 1
	errx(1, "internal error, tried to emalloc(0)");
d82 2
a83 2
    if ((ptr = (VOID *) malloc(size)) == NULL)
	errx(1, "unable to allocate memory");
d91 1
a91 1
VOID *
d96 1
a96 1
    VOID *ptr;
d99 1
a99 1
	errx(1, "internal error, tried to emalloc2(0)");
d101 1
a101 1
	errx(1, "internal error, emalloc2() overflow");
d104 2
a105 2
    if ((ptr = (VOID *) malloc(size)) == NULL)
	errx(1, "unable to allocate memory");
d114 1
a114 1
VOID *
d116 1
a116 1
    VOID *ptr;
d121 1
a121 1
	errx(1, "internal error, tried to erealloc(0)");
d123 1
a123 1
    ptr = ptr ? (VOID *) realloc(ptr, size) : (VOID *) malloc(size);
d125 1
a125 1
	errx(1, "unable to allocate memory");
d135 1
a135 1
VOID *
d137 1
a137 1
    VOID *ptr;
d143 1
a143 1
	errx(1, "internal error, tried to erealloc3(0)");
d145 1
a145 1
	errx(1, "internal error, erealloc3() overflow");
d148 1
a148 1
    ptr = ptr ? (VOID *) realloc(ptr, size) : (VOID *) malloc(size);
d150 1
a150 1
	errx(1, "unable to allocate memory");
d198 1
a198 1
	errx(1, "unable to allocate memory");
d215 1
a215 1
	errx(1, "unable to allocate memory");
d224 1
a224 1
    VOID *ptr;
@


1.9
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d49 3
d56 1
a56 1
__unused static const char rcsid[] = "$Sudo: alloc.c,v 1.23.2.3 2007/06/12 01:43:01 millert Exp $";
@


1.8
log
@Update to sudo 1.6.8p1
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2003 Todd C. Miller <Todd.Miller@@courtesan.com>
d21 1
a21 1
#include "config.h"
d53 1
a53 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.23 2004/06/01 16:23:32 millert Exp $";
d182 3
a184 1
easprintf(va_alist)
a192 3
    char **ret;
    const char *fmt;

a193 2
    ret = va_arg(ap, char **);
    fmt = va_arg(ap, const char *);
d218 11
@


1.7
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@a2 1
 * All rights reserved.
d4 11
a14 28
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a48 1
#include <limits.h>
d53 1
a53 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.20 2003/04/16 00:42:09 millert Exp $";
d66 1
a66 5
#  ifdef INT_MAX
#   define SIZE_MAX	INT_MAX
#  else
#   define SIZE_MAX	0x7fffffff
#  endif /* ULONG_MAX */
@


1.6
log
@Sync with my sudo cvs repo:
 o update to sudo 1.6.7p2
 o use warn/err throughout
@
text
@d33 4
d72 1
a72 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.19 2003/04/02 18:25:19 millert Exp $";
@


1.5
log
@update to what will soon be sudo 1.6.7
@
text
@d58 5
d68 1
a68 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.18 2003/03/15 20:31:01 millert Exp $";
a88 2
extern char **Argv;		/* from sudo.c */

d99 5
a103 9
    if (size == 0) {
	(void) fprintf(stderr, "%s: internal error, tried to emalloc(0)\n",
	    Argv[0]);
	exit(1);
    }
    if ((ptr = (VOID *) malloc(size)) == NULL) {
	(void) fprintf(stderr, "%s: cannot allocate memory!\n", Argv[0]);
	exit(1);
    }
d118 5
a122 10
    if (nmemb == 0 || size == 0) {
	(void) fprintf(stderr, "%s: internal error, tried to emalloc2(0)\n",
	    Argv[0]);
	exit(1);
    }
    if (nmemb > SIZE_MAX / size) {
	(void) fprintf(stderr, "%s: internal error, emalloc2() overflow\n",
	    Argv[0]);
	exit(1);
    }
d124 2
a125 4
    if ((ptr = (VOID *) malloc(size)) == NULL) {
	(void) fprintf(stderr, "%s: cannot allocate memory!\n", Argv[0]);
	exit(1);
    }
d140 3
a142 5
    if (size == 0) {
	(void) fprintf(stderr, "%s: internal error, tried to erealloc(0)\n",
	    Argv[0]);
	exit(1);
    }
d144 2
a145 4
    if (ptr == NULL) {
	(void) fprintf(stderr, "%s: cannot allocate memory!\n", Argv[0]);
	exit(1);
    }
d162 5
a166 10
    if (nmemb == 0 || size == 0) {
	(void) fprintf(stderr, "%s: internal error, tried to erealloc3(0)\n",
	    Argv[0]);
	exit(1);
    }
    if (nmemb > SIZE_MAX / size) {
	(void) fprintf(stderr, "%s: internal error, erealloc3() overflow\n",
	    Argv[0]);
	exit(1);
    }
d169 2
a170 4
    if (ptr == NULL) {
	(void) fprintf(stderr, "%s: cannot allocate memory!\n", Argv[0]);
	exit(1);
    }
d220 2
a221 4
    if (len == -1) {
	(void) fprintf(stderr, "%s: cannot allocate memory!\n", Argv[0]);
	exit(1);
    }
d237 2
a238 4
    if ((len = vasprintf(ret, format, args)) == -1) {
	(void) fprintf(stderr, "%s: cannot allocate memory!\n", Argv[0]);
	exit(1);
    }
@


1.4
log
@sync with sudo 1.6.4-final
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d58 1
d63 1
a63 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.11 2002/01/09 16:56:04 millert Exp $";
d66 18
d96 34
d148 37
d202 1
d205 3
a207 2
	dst = (char *) emalloc(strlen(src) + 1);
	(void) strcpy(dst, src);
@


1.3
log
@Update to sudo 1.6.4
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
a60 8
#ifndef STDC_HEADERS
#if !defined(__GNUC__) && !defined(HAVE_MALLOC_H)
extern VOID *malloc	__P((size_t));
#endif /* !__GNUC__ && !HAVE_MALLOC_H */
#endif /* !STDC_HEADERS */

extern char **Argv;		/* from sudo.c */

d62 1
a62 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.10 2001/12/14 19:52:47 millert Exp $";
d65 1
d77 1
a77 1
    if ((ptr = malloc(size)) == NULL) {
d95 2
a96 1
    if ((ptr = ptr ? realloc(ptr, size) : malloc(size)) == NULL) {
@


1.2
log
@Update to sudo 1.6.3p4
@
text
@d2 1
a2 1
 * Copyright (c) 1999 Todd C. Miller <Todd.Miller@@courtesan.com>
d37 2
d41 6
a46 1
#include <stdlib.h>
d49 5
a53 1
#include <string.h>
a54 3
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif /* HAVE_STRINGS_H */
d56 1
a56 1
#include <malloc.h>
a57 2
#include <sys/param.h>
#include <sys/types.h>
d70 1
a70 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.8 1999/07/31 16:19:44 millert Exp $";
@


1.2.4.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
a36 2
#include <sys/types.h>
#include <sys/param.h>
d39 1
a39 6
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
d42 1
a42 5
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
d44 3
d48 1
a48 1
# include <malloc.h>
d50 2
d55 8
d64 1
a64 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.11 2002/01/09 16:56:04 millert Exp $";
a66 1
extern char **Argv;		/* from sudo.c */
d78 1
a78 1
    if ((ptr = (VOID *) malloc(size)) == NULL) {
d96 1
a96 2
    ptr = ptr ? (VOID *) realloc(ptr, size) : (VOID *) malloc(size);
    if (ptr == NULL) {
@


1.2.6.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
a36 2
#include <sys/types.h>
#include <sys/param.h>
d39 1
a39 6
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
d42 1
a42 5
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
d44 3
d48 1
a48 1
# include <malloc.h>
d50 2
d55 8
d64 1
a64 1
static const char rcsid[] = "$Sudo: alloc.c,v 1.11 2002/01/09 16:56:04 millert Exp $";
a66 1
extern char **Argv;		/* from sudo.c */
d78 1
a78 1
    if ((ptr = (VOID *) malloc(size)) == NULL) {
d96 1
a96 2
    ptr = ptr ? (VOID *) realloc(ptr, size) : (VOID *) malloc(size);
    if (ptr == NULL) {
@


1.1
log
@Initial revision
@
text
@d124 1
a124 1
void
d151 1
d158 1
a158 1
void
d164 1
d166 1
a166 1
    if (vasprintf(ret, format, args) == -1) {
d170 1
@


1.1.1.1
log
@sudo 1.6, now with a BSD license
@
text
@@
