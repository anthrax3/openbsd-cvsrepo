head	1.11;
access;
symbols
	OPENBSD_5_7:1.10.0.18
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	SUDO_1_6_0:1.1.1.1
	COURTESAN:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.10;
commitid	8ra5qnWqy2bUhcZn;

1.10
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.21.14.48.42;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.11.11.48.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.31.16.44.03;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.27.03.44.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.24.04.22.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 1996, 1998-2000, 2004, 2007-2009
 *	Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SUDO_PARSE_H
#define _SUDO_PARSE_H

#undef UNSPEC
#define UNSPEC	-1
#undef DENY
#define DENY	 0
#undef ALLOW
#define ALLOW	 1
#undef IMPLIED
#define IMPLIED	 2

/*
 * A command with args. XXX - merge into struct member.
 */
struct sudo_command {
    char *cmnd;
    char *args;
};

/*
 * Tags associated with a command.
 * Possible valus: TRUE, FALSE, UNSPEC.
 */
struct cmndtag {
    __signed char nopasswd;
    __signed char noexec;
    __signed char setenv;
    __signed char extra;
};

/*
 * SELinux-specific container struct.
 * Currently just contains a role and type.
 */
struct selinux_info {
    char *role;
    char *type;
};

/*
 * The parses sudoers file is stored as a collection of linked lists,
 * modelled after the yacc grammar.
 *
 * Other than the alias struct, which is stored in a red-black tree,
 * the data structure used is basically a doubly-linked tail queue without
 * a separate head struct--the first entry acts as the head where the prev
 * pointer does double duty as the tail pointer.  This makes it possible
 * to trivally append sub-lists.  In addition, the prev pointer is always
 * valid (even if it points to itself).  Unlike a circle queue, the next
 * pointer of the last entry is NULL and does not point back to the head.
 *
 * Note that each list struct must contain a "prev" and "next" pointer as
 * the first two members of the struct (in that order).
 */

/*
 * Tail queue list head structure.
 */
TQ_DECLARE(defaults)
TQ_DECLARE(userspec)
TQ_DECLARE(member)
TQ_DECLARE(privilege)
TQ_DECLARE(cmndspec)

/*
 * Structure describing a user specification and list thereof.
 */
struct userspec {
    struct userspec *prev, *next;
    struct member_list users;		/* list of users */
    struct privilege_list privileges;	/* list of privileges */
};

/*
 * Structure describing a privilege specification.
 */
struct privilege {
    struct privilege *prev, *next;
    struct member_list hostlist;	/* list of hosts */
    struct cmndspec_list cmndlist;	/* list of Cmnd_Specs */
};

/*
 * Structure describing a linked list of Cmnd_Specs.
 */
struct cmndspec {
    struct cmndspec *prev, *next;
    struct member_list runasuserlist;	/* list of runas users */
    struct member_list runasgrouplist;	/* list of runas groups */
    struct member *cmnd;		/* command to allow/deny */
    struct cmndtag tags;		/* tag specificaion */
#ifdef HAVE_SELINUX
    char *role, *type;			/* SELinux role and type */
#endif
};

/*
 * Generic structure to hold users, hosts, commands.
 */
struct member {
    struct member *prev, *next;
    char *name;				/* member name */
    short type;				/* type (see gram.h) */
    short negated;			/* negated via '!'? */
};

struct runascontainer {
    struct member *runasusers;
    struct member *runasgroups;
};

/*
 * Generic structure to hold {User,Host,Runas,Cmnd}_Alias
 * Aliases are stored in a red-black tree, sorted by name and type.
 */
struct alias {
    char *name;				/* alias name */
    unsigned short type;		/* {USER,HOST,RUNAS,CMND}ALIAS */
    unsigned short seqno;		/* sequence number */
    struct member_list members;		/* list of alias members */
};

/*
 * Structure describing a Defaults entry and a list thereof.
 */
struct defaults {
    struct defaults *prev, *next;
    char *var;				/* variable name */
    char *val;				/* variable value */
    struct member_list binding;		/* user/host/runas binding */
    int type;				/* DEFAULTS{,_USER,_RUNAS,_HOST} */
    int op;				/* TRUE, FALSE, '+', '-' */
};

/*
 * Parsed sudoers info.
 */
extern struct userspec_list userspecs;
extern struct defaults_list defaults;

/*
 * Alias sequence number to avoid loops.
 */
extern unsigned int alias_seqno;

/*
 * Prototypes
 */
char *alias_add		__P((char *, int, struct member *));
int addr_matches	__P((char *));
int cmnd_matches	__P((struct member *));
int cmndlist_matches	__P((struct member_list *));
int command_matches	__P((char *, char *));
int hostlist_matches	__P((struct member_list *));
int hostname_matches	__P((char *, char *, char *));
int netgr_matches	__P((char *, char *, char *, char *));
int no_aliases		__P((void));
int runaslist_matches	__P((struct member_list *, struct member_list *));
int userlist_matches	__P((struct passwd *, struct member_list *));
int usergr_matches	__P((char *, char *, struct passwd *));
int userpw_matches	__P((char *, char *, struct passwd *));
int group_matches	__P((char *, struct group *));
struct alias *alias_find __P((char *, int));
struct alias *alias_remove __P((char *, int));
void alias_free		__P((void *));
void alias_apply	__P((int (*)(void *, void *), void *));
void init_aliases	__P((void));
void init_lexer		__P((void));
void init_parser	__P((char *, int));
int alias_compare	__P((const void *, const void *));

#endif /* _SUDO_PARSE_H */
@


1.10
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.9
log
@Upgrade to sudo 1.7.2
@
text
@a15 2
 *
 * $Sudo: parse.h,v 1.49 2009/05/25 12:02:41 millert Exp $
@


1.8
log
@Update to sudo 1.7.1
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2000, 2004, 2007-2008
d17 1
a17 1
 * $Sudo: parse.h,v 1.47 2009/04/05 16:25:04 millert Exp $
d188 1
@


1.7
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d17 1
a17 1
 * $Sudo: parse.h,v 1.44 2008/11/09 14:13:12 millert Exp $
a170 1
int alias_remove	__P((char *, int));
d183 3
a185 1
struct alias *find_alias __P((char *, int));
d189 1
@


1.6
log
@Update to sudo 1.6.9p17
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998-2000, 2004, 2007
d17 1
a17 1
 * $Sudo: parse.h,v 1.14.2.2 2008/02/09 14:44:48 millert Exp $
d23 8
a30 18
/*
 * Data structure used in parsing sudoers;
 * top of stack values are the ones that
 * apply when parsing is done & can be
 * accessed by *_matches macros
 */
#define STACKINCREMENT (32)
struct matchstack {
	int user;
	int cmnd;
	int host;
	int runas;
	int nopass;
	int noexec;
	int setenv;
	char *role;
	char *type;
};
d33 1
a33 2
 * Data structure describing a command in the
 * sudoers file.
d41 11
d60 33
a92 7
#define user_matches	(match[top-1].user)
#define cmnd_matches	(match[top-1].cmnd)
#define host_matches	(match[top-1].host)
#define runas_matches	(match[top-1].runas)
#define no_passwd	(match[top-1].nopass)
#define no_execve	(match[top-1].noexec)
#define setenv_ok	(match[top-1].setenv)
d95 35
a129 18
 * Structure containing command matches if "sudo -l" is used.
 */
struct command_match {
    char *runas;
    size_t runas_len;
    size_t runas_size;
    char *cmnd;
    size_t cmnd_len;
    size_t cmnd_size;
    char *role;
    size_t role_len;
    size_t role_size;
    char *type;
    size_t type_len;
    size_t type_size;
    int nopasswd;
    int noexecve;
    int setenv;
d133 2
a134 1
 * Structure describing an alias match in parser.
d136 6
a141 5
typedef struct {
    int type;
    char *name;
    int val;
} aliasinfo;
d144 1
a144 1
 * Structure containing Cmnd_Alias's if "sudo -l" is used.
d146 7
a152 6
struct generic_alias {
    int type;
    char *alias;
    char *entries;
    size_t entries_size;
    size_t entries_len;
d155 10
a164 3
/* The matching stack and number of entries on it. */
extern struct matchstack *match;
extern int top;
d169 1
d171 3
d175 1
d178 4
d183 5
a187 1
int usergr_matches	__P((char *, char *, struct passwd *));
@


1.5
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d17 1
a17 1
 * $Sudo: parse.h,v 1.14.2.1 2007/06/23 21:36:48 millert Exp $
d38 2
d51 9
d78 6
@


1.4
log
@Update to sudo 1.6.8p1
@
text
@d2 2
a3 1
 * Copyright (c) 1996,1998-2000,2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d17 1
a17 1
 * $Sudo: parse.h,v 1.14 2004/08/02 18:44:58 millert Exp $
d37 1
d55 1
d69 1
@


1.3
log
@sudo 1.6.3; see http://www.courtesan.com/sudo/current.html for a list
of changes.
@
text
@d2 1
a2 2
 * Copyright (c) 1996, 1998-2000 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
d4 11
a14 3
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
d16 1
a16 26
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Sudo: parse.h,v 1.9 2000/03/23 04:38:20 millert Exp $
d35 1
d52 1
d65 1
d96 1
a96 1
int command_matches	__P((char *, char *, char *, char *));
d99 2
a100 1
int usergr_matches	__P((char *, char *));
@


1.2
log
@sudo 1.6.2
@
text
@d34 1
a34 1
 * $Sudo: parse.h,v 1.7 2000/01/17 23:46:25 millert Exp $
d112 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1996, 1998, 1999 Todd C. Miller <Todd.Miller@@courtesan.com>
d34 1
a34 1
 * $Sudo: parse.h,v 1.5 1999/09/08 08:06:15 millert Exp $
d112 1
a112 1
int netgr_matches	__P((char *, char *, char *));
@


1.1.1.1
log
@sudo 1.6, now with a BSD license
@
text
@@
