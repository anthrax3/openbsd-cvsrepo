head	1.14;
access;
symbols
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.20
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.18
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.14
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_3_0:1.2.0.2;
locks; strict;
comment	@# @;


1.14
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.13;
commitid	8ra5qnWqy2bUhcZn;

1.13
date	2015.02.10.12.59.01;	author millert;	state Exp;
branches;
next	1.12;
commitid	qN7FSJzA8nOOyheQ;

1.12
date	2010.06.02.19.30.10;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.21.14.48.41;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.11.11.48.06;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.14.11.53.05;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.05.23.55.56;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.15.14.22.39;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.26.16.10.15;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.28.15.10.50;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.01.15.47.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.15.21.23.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.08.15.44.25;	author millert;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	;

1.2.2.1
date	2002.01.18.16.14.44;	author millert;	state Exp;
branches;
next	;

1.2.4.1
date	2002.01.18.17.20.22;	author millert;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove sudo, it is now in ports.
@
text
@dnl Local m4 macros for autoconf (used by sudo)
dnl
dnl Copyright (c) 1994-1996, 1998-2005, 2007-2009
dnl	Todd C. Miller <Todd.Miller@@courtesan.com>
dnl
dnl XXX - should cache values in all cases!!!
dnl
dnl checks for programs

dnl
dnl check for sendmail
dnl
AC_DEFUN(SUDO_PROG_SENDMAIL, [AC_MSG_CHECKING(for sendmail)
if test -f "/usr/sbin/sendmail"; then
    AC_MSG_RESULT(/usr/sbin/sendmail)
    SUDO_DEFINE(_PATH_SUDO_SENDMAIL, "/usr/sbin/sendmail")
elif test -f "/usr/lib/sendmail"; then
    AC_MSG_RESULT(/usr/lib/sendmail)
    SUDO_DEFINE(_PATH_SUDO_SENDMAIL, "/usr/lib/sendmail")
elif test -f "/usr/etc/sendmail"; then
    AC_MSG_RESULT(/usr/etc/sendmail)
    SUDO_DEFINE(_PATH_SUDO_SENDMAIL, "/usr/etc/sendmail")
elif test -f "/usr/ucblib/sendmail"; then
    AC_MSG_RESULT(/usr/ucblib/sendmail)
    SUDO_DEFINE(_PATH_SUDO_SENDMAIL, "/usr/ucblib/sendmail")
elif test -f "/usr/local/lib/sendmail"; then
    AC_MSG_RESULT(/usr/local/lib/sendmail)
    SUDO_DEFINE(_PATH_SUDO_SENDMAIL, "/usr/local/lib/sendmail")
elif test -f "/usr/local/bin/sendmail"; then
    AC_MSG_RESULT(/usr/local/bin/sendmail)
    SUDO_DEFINE(_PATH_SUDO_SENDMAIL, "/usr/local/bin/sendmail")
else
    AC_MSG_RESULT(not found)
fi
])dnl

dnl
dnl check for vi
dnl
AC_DEFUN(SUDO_PROG_VI, [AC_MSG_CHECKING(for vi)
if test -f "/usr/bin/vi"; then
    AC_MSG_RESULT(/usr/bin/vi)
    SUDO_DEFINE(_PATH_VI, "/usr/bin/vi")
elif test -f "/usr/ucb/vi"; then
    AC_MSG_RESULT(/usr/ucb/vi)
    SUDO_DEFINE(_PATH_VI, "/usr/ucb/vi")
elif test -f "/usr/bsd/vi"; then
    AC_MSG_RESULT(/usr/bsd/vi)
    SUDO_DEFINE(_PATH_VI, "/usr/bsd/vi")
elif test -f "/bin/vi"; then
    AC_MSG_RESULT(/bin/vi)
    SUDO_DEFINE(_PATH_VI, "/bin/vi")
elif test -f "/usr/local/bin/vi"; then
    AC_MSG_RESULT(/usr/local/bin/vi)
    SUDO_DEFINE(_PATH_VI, "/usr/local/bin/vi")
else
    AC_MSG_RESULT(not found)
fi
])dnl

dnl
dnl check for mv
dnl
AC_DEFUN(SUDO_PROG_MV, [AC_MSG_CHECKING(for mv)
if test -f "/usr/bin/mv"; then
    AC_MSG_RESULT(/usr/bin/mv)
    SUDO_DEFINE(_PATH_MV, "/usr/bin/mv")
elif test -f "/bin/mv"; then
    AC_MSG_RESULT(/bin/mv)
    SUDO_DEFINE(_PATH_MV, "/bin/mv")
elif test -f "/usr/ucb/mv"; then
    AC_MSG_RESULT(/usr/ucb/mv)
    SUDO_DEFINE(_PATH_MV, "/usr/ucb/mv")
elif test -f "/usr/sbin/mv"; then
    AC_MSG_RESULT(/usr/sbin/mv)
    SUDO_DEFINE(_PATH_MV, "/usr/sbin/mv")
else
    AC_MSG_RESULT(not found)
fi
])dnl

dnl
dnl check for bourne shell
dnl
AC_DEFUN(SUDO_PROG_BSHELL, [AC_MSG_CHECKING(for bourne shell)
if test -f "/bin/sh"; then
    AC_MSG_RESULT(/bin/sh)
    SUDO_DEFINE(_PATH_BSHELL, "/bin/sh")
elif test -f "/usr/bin/sh"; then
    AC_MSG_RESULT(/usr/bin/sh)
    SUDO_DEFINE(_PATH_BSHELL, "/usr/bin/sh")
elif test -f "/sbin/sh"; then
    AC_MSG_RESULT(/sbin/sh)
    SUDO_DEFINE(_PATH_BSHELL, "/sbin/sh")
elif test -f "/usr/sbin/sh"; then
    AC_MSG_RESULT(/usr/sbin/sh)
    SUDO_DEFINE(_PATH_BSHELL, "/usr/sbin/sh")
elif test -f "/bin/ksh"; then
    AC_MSG_RESULT(/bin/ksh)
    SUDO_DEFINE(_PATH_BSHELL, "/bin/ksh")
elif test -f "/usr/bin/ksh"; then
    AC_MSG_RESULT(/usr/bin/ksh)
    SUDO_DEFINE(_PATH_BSHELL, "/usr/bin/ksh")
elif test -f "/bin/bash"; then
    AC_MSG_RESULT(/bin/bash)
    SUDO_DEFINE(_PATH_BSHELL, "/bin/bash")
elif test -f "/usr/bin/bash"; then
    AC_MSG_RESULT(/usr/bin/bash)
    SUDO_DEFINE(_PATH_BSHELL, "/usr/bin/bash")
else
    AC_MSG_RESULT(not found)
fi
])dnl

dnl
dnl Where the log file goes, use /var/log if it exists, else /{var,usr}/adm
dnl
AC_DEFUN(SUDO_LOGFILE, [AC_MSG_CHECKING(for log file location)
if test -n "$with_logpath"; then
    AC_MSG_RESULT($with_logpath)
    SUDO_DEFINE_UNQUOTED(_PATH_SUDO_LOGFILE, "$with_logpath")
elif test -d "/var/log"; then
    AC_MSG_RESULT(/var/log/sudo.log)
    SUDO_DEFINE(_PATH_SUDO_LOGFILE, "/var/log/sudo.log")
elif test -d "/var/adm"; then
    AC_MSG_RESULT(/var/adm/sudo.log)
    SUDO_DEFINE(_PATH_SUDO_LOGFILE, "/var/adm/sudo.log")
elif test -d "/usr/adm"; then
    AC_MSG_RESULT(/usr/adm/sudo.log)
    SUDO_DEFINE(_PATH_SUDO_LOGFILE, "/usr/adm/sudo.log")
else
    AC_MSG_RESULT(unknown, you will have to set _PATH_SUDO_LOGFILE by hand)
fi
])dnl

dnl
dnl Where the log file goes, use /var/log if it exists, else /{var,usr}/adm
dnl
AC_DEFUN(SUDO_TIMEDIR, [AC_MSG_CHECKING(for timestamp file location)
if test -n "$with_timedir"; then
    AC_MSG_RESULT($with_timedir)
    SUDO_DEFINE_UNQUOTED(_PATH_SUDO_TIMEDIR, "$with_timedir")
    timedir="$with_timedir"
elif test -d "/var/run"; then
    AC_MSG_RESULT(/var/run/sudo)
    SUDO_DEFINE(_PATH_SUDO_TIMEDIR, "/var/run/sudo")
    timedir="/var/run/sudo"
elif test -d "/var/adm"; then
    AC_MSG_RESULT(/var/adm/sudo)
    SUDO_DEFINE(_PATH_SUDO_TIMEDIR, "/var/adm/sudo")
    timedir="/var/adm/sudo"
else
    AC_MSG_RESULT(/usr/adm/sudo)
    SUDO_DEFINE(_PATH_SUDO_TIMEDIR, "/usr/adm/sudo")
    timedir="/usr/adm/sudo"
fi
])dnl

dnl
dnl SUDO_CHECK_TYPE(TYPE, DEFAULT)
dnl XXX - should require the check for unistd.h...
dnl
AC_DEFUN(SUDO_CHECK_TYPE,
[AC_REQUIRE([AC_HEADER_STDC])dnl
AC_MSG_CHECKING(for $1)
AC_CACHE_VAL(sudo_cv_type_$1,
[AC_EGREP_CPP($1, [#include <sys/types.h>
#include <stdio.h>
#if STDC_HEADERS
#include <stdlib.h>
#endif
#if HAVE_UNISTD_H
#include <unistd.h>
#endif], sudo_cv_type_$1=yes, sudo_cv_type_$1=no)])dnl
AC_MSG_RESULT($sudo_cv_type_$1)
if test $sudo_cv_type_$1 = no; then
  AC_DEFINE($1, $2, [Define if your system lacks the $1 type.])
fi
])

dnl
dnl Check for size_t declation
dnl
AC_DEFUN(SUDO_TYPE_SIZE_T,
[SUDO_CHECK_TYPE(size_t, int)])

dnl
dnl Check for ssize_t declation
dnl
AC_DEFUN(SUDO_TYPE_SSIZE_T,
[SUDO_CHECK_TYPE(ssize_t, int)])

dnl
dnl Check for dev_t declation
dnl
AC_DEFUN(SUDO_TYPE_DEV_T,
[SUDO_CHECK_TYPE(dev_t, int)])

dnl
dnl Check for ino_t declation
dnl
AC_DEFUN(SUDO_TYPE_INO_T,
[SUDO_CHECK_TYPE(ino_t, unsigned int)])

dnl
dnl Detect time zone file directory, if any.
dnl
AC_DEFUN([SUDO_TZDIR], [AC_MSG_CHECKING(time zone data directory)
tzdir="$with_tzdir"
if test -z "$tzdir"; then
    tzdir=no
    for d in /usr/share /usr/share/lib /usr/lib /etc; do
	if test -d "$d/zoneinfo"; then
	    tzdir="$d/zoneinfo"
	    break
	fi
    done
fi
AC_MSG_RESULT([$tzdir])
if test "${tzdir}" != "no"; then
    SUDO_DEFINE_UNQUOTED(_PATH_ZONEINFO, "$tzdir")
fi
])dnl

dnl
dnl check for working fnmatch(3)
dnl
AC_DEFUN(SUDO_FUNC_FNMATCH,
[AC_MSG_CHECKING([for working fnmatch with FNM_CASEFOLD])
AC_CACHE_VAL(sudo_cv_func_fnmatch,
[rm -f conftestdata; > conftestdata
AC_TRY_RUN([#include <fnmatch.h>
main() { exit(fnmatch("/*/bin/echo *", "/usr/bin/echo just a test", FNM_CASEFOLD)); }], [sudo_cv_func_fnmatch=yes], [sudo_cv_func_fnmatch=no],
  [sudo_cv_func_fnmatch=no])
rm -f core core.* *.core])
AC_MSG_RESULT($sudo_cv_func_fnmatch)
AS_IF([test $sudo_cv_func_fnmatch = yes], [$1], [$2])])

dnl
dnl check for isblank(3)
dnl
AC_DEFUN([SUDO_FUNC_ISBLANK],
  [AC_CACHE_CHECK([for isblank], [sudo_cv_func_isblank],
    [AC_TRY_LINK([#include <ctype.h>], [return (isblank('a'));],
    sudo_cv_func_isblank=yes, sudo_cv_func_isblank=no)])
] [
  if test "$sudo_cv_func_isblank" = "yes"; then
    AC_DEFINE(HAVE_ISBLANK, 1, [Define if you have isblank(3).])
  else
    AC_LIBOBJ(isblank)
  fi
])

dnl
dnl check unsetenv() return value
dnl
AC_DEFUN([SUDO_FUNC_UNSETENV_VOID],
  [AC_CACHE_CHECK([whether unsetenv returns void], [sudo_cv_func_unsetenv_void],
    [AC_RUN_IFELSE([AC_LANG_PROGRAM(
      [AC_INCLUDES_DEFAULT
        int unsetenv();
      ], [
        [return unsetenv("FOO") != 0;]
      ])
    ],
    [sudo_cv_func_unsetenv_void=no],
    [sudo_cv_func_unsetenv_void=yes],
    [sudo_cv_func_unsetenv_void=yes])])
    if test $sudo_cv_func_unsetenv_void = yes; then
      AC_DEFINE(UNSETENV_VOID, 1,
        [Define to 1 if the `unsetenv' function returns void instead of `int'.])
    fi
  ])

dnl
dnl check putenv() argument for const
dnl
AC_DEFUN([SUDO_FUNC_PUTENV_CONST],
[AC_CACHE_CHECK([whether putenv has a const argument],
sudo_cv_func_putenv_const,
[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT
int putenv(const char *string) {return 0;}], [])],
    [sudo_cv_func_putenv_const=yes],
    [sudo_cv_func_putenv_const=no])
  ])
  if test $sudo_cv_func_putenv_const = yes; then
    AC_DEFINE(PUTENV_CONST, 1, [Define to 1 if the `putenv' has a const argument.])
  fi
])

dnl
dnl check for sa_len field in struct sockaddr
dnl
AC_DEFUN(SUDO_SOCK_SA_LEN,
[AC_MSG_CHECKING(for sa_len field in struct sockaddr)
AC_CACHE_VAL(sudo_cv_sock_sa_len,
[AC_TRY_RUN([#include <sys/types.h>
#include <sys/socket.h>
main() {
struct sockaddr s;
s.sa_len = 0;
exit(0);
}], sudo_cv_sock_sa_len=yes, sudo_cv_sock_sa_len=no,
  sudo_cv_sock_sa_len=no)
rm -f core core.* *.core])dnl
AC_MSG_RESULT($sudo_cv_sock_sa_len)
if test $sudo_cv_sock_sa_len = yes; then
  AC_DEFINE(HAVE_SA_LEN, 1, [Define if your struct sockadr has an sa_len field.])
fi
])

dnl
dnl check for max length of uid_t in string representation.
dnl we can't really trust UID_MAX or MAXUID since they may exist
dnl only for backwards compatibility.
dnl
AC_DEFUN(SUDO_UID_T_LEN,
[AC_REQUIRE([AC_TYPE_UID_T])
AC_MSG_CHECKING(max length of uid_t)
AC_CACHE_VAL(sudo_cv_uid_t_len,
[rm -f conftestdata
AC_TRY_RUN(
[#include <stdio.h>
#include <pwd.h>
#include <limits.h>
#include <sys/types.h>
#include <sys/param.h>
main() {
  FILE *f;
  char b[1024];
  uid_t u = (uid_t) -1;

  if ((f = fopen("conftestdata", "w")) == NULL)
    exit(1);

  (void) sprintf(b, "%lu", (unsigned long) u);
  (void) fprintf(f, "%d\n", strlen(b));
  (void) fclose(f);
  exit(0);
}], sudo_cv_uid_t_len=`cat conftestdata`, sudo_cv_uid_t_len=10)
])
rm -f conftestdata
AC_MSG_RESULT($sudo_cv_uid_t_len)
AC_DEFINE_UNQUOTED(MAX_UID_T_LEN, $sudo_cv_uid_t_len, [Define to the max length of a uid_t in string context (excluding the NUL).])
])

dnl
dnl Check for presence of long long and for sizeof(long long) == sizeof(long)
dnl
AC_DEFUN(SUDO_TYPE_LONG_LONG,
[AC_CHECK_TYPES(long long, [AC_DEFINE(HAVE_LONG_LONG, 1, [Define if your compiler supports the "long long" type.])]
[AC_MSG_CHECKING(for long and long long equivalence)
AC_CACHE_VAL(sudo_cv_type_long_is_quad,
[AC_TRY_RUN([
main() {
if (sizeof(long long) == sizeof(long)) exit(0);
else exit(1);
}], [sudo_cv_type_long_is_quad=yes],
[sudo_cv_type_long_is_quad=no], [sudo_cv_type_long_is_quad=no])
rm -f core core.* *.core])dnl
AC_MSG_RESULT($sudo_cv_type_long_is_quad)
if test $sudo_cv_type_long_is_quad = yes; then
  AC_DEFINE(LONG_IS_QUAD, 1, [Define if sizeof(long) == sizeof(long long).])
fi
])])

dnl
dnl append a libpath to an LDFLAGS style variable
dnl
AC_DEFUN(SUDO_APPEND_LIBPATH, [
    if test X"$with_rpath" = X"yes"; then
	case "$host" in
	    *-*-hpux*)	$1="${$1} -L$2 -Wl,+b,$2"
			;;
	    *)		$1="${$1} -L$2 -Wl,-R$2"
			;;
	esac
    else
	$1="${$1} -L$2"
    fi
    if test X"$blibpath" != X"" -a "$1" = "SUDO_LDFLAGS"; then
	blibpath_add="${blibpath_add}:$2"
    fi
])

dnl
dnl private versions of AC_DEFINE and AC_DEFINE_UNQUOTED that don't support
dnl tracing that we use to define paths for pathnames.h so autoheader doesn't
dnl put them in config.h.in.  An awful hack.
dnl
m4_define([SUDO_DEFINE],
[cat >>confdefs.h <<\EOF
[@@%:@@define] $1 m4_if($#, 2, [$2], $#, 3, [$2], 1)
EOF
])

m4_define([SUDO_DEFINE_UNQUOTED],
[cat >>confdefs.h <<EOF
[@@%:@@define] $1 m4_if($#, 2, [$2], $#, 3, [$2], 1)
EOF
])
@


1.13
log
@Sanity check TZ environment variable; backport from sudo 1.8.12
@
text
@@


1.12
log
@Update to sudo 1.7.2p7
@
text
@d206 20
@


1.11
log
@Upgrade to sudo 1.7.2
@
text
@d352 6
a357 1
	$1="${$1} -L$2 -R$2"
@


1.10
log
@Update to sudo 1.7.1
@
text
@d3 2
a4 1
dnl Copyright (c) 1994-1996,1998-2004 Todd C. Miller <Todd.Miller@@courtesan.com>
@


1.9
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d222 1
a222 1
  [AC_CACHE_CHECK([for isblank], sudo_cv_func_isblank,
d230 37
@


1.8
log
@update to sudo 1.6.9p5
@
text
@d3 1
a3 1
dnl Copyright (c) 1994-1996,1998-2007 Todd C. Miller <Todd.Miller@@courtesan.com>
a158 9
dnl check for fullly working void
dnl
AC_DEFUN(SUDO_FULL_VOID, [AC_MSG_CHECKING(for full void implementation)
AC_TRY_COMPILE(, [void *foo;
foo = (void *)0; (void *)"test";], AC_DEFINE(VOID, void, [Define to "void" if your compiler supports void pointers, else use "char"].)
AC_MSG_RESULT(yes), AC_DEFINE(VOID, char)
AC_MSG_RESULT(no))])

dnl
d228 2
@


1.7
log
@Update to sudo 1.6.9p4.  Basically IPv6 support and improved man pages.
@
text
@a330 23
dnl Add a (potentially exclusive) auth method
dnl $1 - auth name
dnl $2 - object file to add to AUTH_OBJS
dnl $3 - set if method is exclusive
dnl
AC_DEFUN(SUDO_ADD_AUTH, [
if test X"$AUTH_EXCL" != X""; then
    AC_MSG_ERROR(["cannot mix $1 with an exclusive authentication method such as $AUTH_EXCL"])
elif test X"$3" != X"" -a X"$AUTH_OBJS" != X"" -a X"$AUTH_OBJS" != X"passwd.o"; then
    _AUTH=`echo "$AUTH_OBJS" | sed 's/\.o//g'`
    AC_MSG_ERROR(["cannot mix $1 with other authentication methods (such as $_AUTH)"])
fi
if test X"$3" != X""; then
    AUTH_OBJS="$2"
    AUTH_EXCL="$1"
elif test X"$AUTH_OBJS" = X""; then
    AUTH_OBJS="$2"
else
    AUTH_OBJS="$AUTH_OBJS $2"
fi
])

dnl
@


1.6
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d232 1
a232 1
    [AC_TRY_LINK([#include <ctype.h>], [(void)isblank(1);],
@


1.5
log
@Update to sudo 1.6.8p1
@
text
@d1 1
a1 1
dnl Local m4 macors for autoconf (used by sudo)
d3 1
a3 1
dnl Copyright (c) 1994-1996,1998-2003 Todd C. Miller <Todd.Miller@@courtesan.com>
d217 1
a217 1
[AC_MSG_CHECKING(for working fnmatch with FNM_CASEFOLD)
d221 3
a223 4
main() { exit(fnmatch("/*/bin/echo *", "/usr/bin/echo just a test", FNM_CASEFOLD)); }
], sudo_cv_func_fnmatch=yes, sudo_cv_func_fnmatch=no,
  sudo_cv_func_fnmatch=no)
rm -f core core.* *.core])dnl
d225 1
a225 6
if test $sudo_cv_func_fnmatch = yes; then
  [$1]
else
  [$2]
fi
])
d297 1
a297 2
dnl check for "long long"
dnl XXX hard to cache since it includes 2 tests
d299 16
a314 4
AC_DEFUN(SUDO_LONG_LONG, [AC_MSG_CHECKING(for long long support)
AC_TRY_LINK(, [long long foo = 1000; foo /= 10;], AC_DEFINE(HAVE_LONG_LONG, 1, [Define if your compiler supports the "long long" type.])
[AC_TRY_RUN([main() {if (sizeof(long long) == sizeof(long)) exit(0); else exit(1);}], AC_DEFINE(LONG_IS_QUAD, 1, [Define if sizeof(long) == sizeof(long long).]))]
AC_MSG_RESULT(yes), AC_MSG_RESULT(no))])
d328 23
@


1.4
log
@Update to sudo 1.6.7p1; fixes false positives in the oflow detection
of expand_prompt() introduced in sudo 1.6.7.
@
text
@d147 4
d152 3
a154 3
    AC_MSG_RESULT(/tmp/.odus)
    SUDO_DEFINE(_PATH_SUDO_TIMEDIR, "/tmp/.odus")
    timedir="/tmp/.odus"
a211 24

dnl
dnl check for POSIX utime() using struct utimbuf
dnl
AC_DEFUN(SUDO_FUNC_UTIME_POSIX,
[AC_MSG_CHECKING(for POSIX utime)
AC_CACHE_VAL(sudo_cv_func_utime_posix,
[rm -f conftestdata; > conftestdata
AC_TRY_RUN([#include <sys/types.h>
#include <sys/time.h>
#include <utime.h>
main() {
struct utimbuf ut;
ut.actime = ut.modtime = time(0);
utime("conftestdata", &ut);
exit(0);
}], sudo_cv_func_utime_posix=yes, sudo_cv_func_utime_posix=no,
  sudo_cv_func_utime_posix=no)
rm -f core core.* *.core])dnl
AC_MSG_RESULT($sudo_cv_func_utime_posix)
if test $sudo_cv_func_utime_posix = yes; then
  AC_DEFINE(HAVE_UTIME_POSIX, 1, [Define if you have a POSIX utime() (uses struct utimbuf).])
fi
])
@


1.3
log
@update to what will soon be sudo 1.6.7
@
text
@d332 14
@


1.2
log
@sync with sudo 1.6.4rc2
@
text
@d3 1
a3 1
dnl Copyright (c) 1994-1996,1998-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d311 1
a311 1
  (void) sprintf(b, "%u", u);
@


1.2.4.1
log
@update to sudo 1.6.5p1
@
text
@@


1.2.2.1
log
@update to sudo 1.6.5p1
@
text
@@


1.1
log
@Update to sudo 1.6.4
@
text
@d3 1
a3 1
dnl Copyright (c) 1994-1996,1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
@

