head	1.48;
access;
symbols
	OPENBSD_5_7:1.47.0.2
	OPENBSD_5_7_BASE:1.47
	OPENBSD_5_6:1.46.0.20
	OPENBSD_5_6_BASE:1.46
	OPENBSD_5_5:1.46.0.18
	OPENBSD_5_5_BASE:1.46
	OPENBSD_5_4:1.46.0.14
	OPENBSD_5_4_BASE:1.46
	OPENBSD_5_3:1.46.0.12
	OPENBSD_5_3_BASE:1.46
	OPENBSD_5_2:1.46.0.10
	OPENBSD_5_2_BASE:1.46
	OPENBSD_5_1_BASE:1.46
	OPENBSD_5_1:1.46.0.8
	OPENBSD_5_0:1.46.0.6
	OPENBSD_5_0_BASE:1.46
	OPENBSD_4_9:1.46.0.4
	OPENBSD_4_9_BASE:1.46
	OPENBSD_4_8:1.46.0.2
	OPENBSD_4_8_BASE:1.46
	OPENBSD_4_7:1.43.0.2
	OPENBSD_4_7_BASE:1.43
	OPENBSD_4_6:1.38.0.4
	OPENBSD_4_6_BASE:1.38
	OPENBSD_4_5:1.36.0.2
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.34.0.2
	OPENBSD_4_4_BASE:1.34
	OPENBSD_4_3:1.33.0.2
	OPENBSD_4_3_BASE:1.33
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.22.0.10
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.8
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.6
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.4
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.2
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.20.0.4
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	SUDO_1_6_0:1.1.1.1
	COURTESAN:1.1.1;
locks; strict;
comment	@# @;


1.48
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.47;
commitid	8ra5qnWqy2bUhcZn;

1.47
date	2015.02.10.12.59.01;	author millert;	state Exp;
branches;
next	1.46;
commitid	qN7FSJzA8nOOyheQ;

1.46
date	2010.07.08.21.11.31;	author millert;	state Exp;
branches;
next	1.45;

1.45
date	2010.06.02.19.30.10;	author millert;	state Exp;
branches;
next	1.44;

1.44
date	2010.04.13.23.22.01;	author millert;	state Exp;
branches;
next	1.43;

1.43
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.42;

1.42
date	2010.03.01.11.36.47;	author millert;	state Exp;
branches;
next	1.41;

1.41
date	2010.02.23.14.43.05;	author millert;	state Exp;
branches;
next	1.40;

1.40
date	2010.02.13.14.20.14;	author millert;	state Exp;
branches;
next	1.39;

1.39
date	2009.12.07.18.43.10;	author millert;	state Exp;
branches;
next	1.38;

1.38
date	2009.06.21.14.48.42;	author millert;	state Exp;
branches;
next	1.37;

1.37
date	2009.04.11.11.48.06;	author millert;	state Exp;
branches;
next	1.36;

1.36
date	2008.12.09.22.20.32;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	2008.07.31.16.44.03;	author millert;	state Exp;
branches;
next	1.33;

1.33
date	2008.01.21.19.44.29;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2008.01.07.14.10.08;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2007.12.21.01.16.52;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2007.12.03.15.09.47;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.25.16.08.12;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2007.10.17.04.26.04;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2007.09.07.14.25.33;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2007.09.06.11.38.02;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2007.09.05.23.55.57;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2007.08.15.14.22.39;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2004.11.29.17.29.05;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2004.01.12.19.13.20;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.08.20.55.05;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.04.07.03.31.10;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.03.19.15.34;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.01.15.47.51;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.15.21.23.54;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.10.03.53.32;	author david;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.25.15.49.03;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.23.23.03.24;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.17.01.03.21;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.16.18.09.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.08.15.44.25;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.21.17.58.44;	author millert;	state Exp;
branches
	1.6.2.1
	1.6.4.1;
next	1.5;

1.5
date	2000.03.27.03.44.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.28.01.10.20;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.24.04.22.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.12.10.06.45.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches;
next	;

1.6.2.1
date	2002.01.18.17.20.23;	author millert;	state Exp;
branches;
next	;

1.6.4.1
date	2002.01.18.16.14.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.48
log
@Remove sudo, it is now in ports.
@
text
@dnl
dnl Process this file with GNU autoconf to produce a configure script.
dnl
dnl Copyright (c) 1994-1996,1998-2010 Todd C. Miller <Todd.Miller@@courtesan.com>
dnl
AC_INIT([sudo], [1.7.2p8], [http://www.sudo.ws/bugs/], [sudo])
AC_CONFIG_HEADER(config.h pathnames.h)
dnl
dnl This won't work before AC_INIT
dnl
AC_MSG_NOTICE([Configuring Sudo version $PACKAGE_VERSION])
dnl
dnl Variables that get substituted in the Makefile and man pages
dnl
AC_SUBST(HAVE_BSM_AUDIT)
AC_SUBST(SHELL)
AC_SUBST(LIBTOOL)
AC_SUBST(CFLAGS)
AC_SUBST(PROGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(SUDO_LDFLAGS)
AC_SUBST(SUDO_OBJS)
AC_SUBST(LIBS)
AC_SUBST(SUDO_LIBS)
AC_SUBST(NET_LIBS)
AC_SUBST(AFS_LIBS)
AC_SUBST(GETGROUPS_LIB)
AC_SUBST(OSDEFS)
AC_SUBST(AUTH_OBJS)
AC_SUBST(MANTYPE)
AC_SUBST(MAN_POSTINSTALL)
AC_SUBST(SUDOERS_MODE)
AC_SUBST(SUDOERS_UID)
AC_SUBST(SUDOERS_GID)
AC_SUBST(DEV)
AC_SUBST(SELINUX)
AC_SUBST(BAMAN)
AC_SUBST(LCMAN)
AC_SUBST(SEMAN)
AC_SUBST(devdir)
AC_SUBST(mansectsu)
AC_SUBST(mansectform)
AC_SUBST(mansrcdir)
AC_SUBST(NOEXECFILE)
AC_SUBST(NOEXECDIR)
AC_SUBST(noexec_file)
AC_SUBST(INSTALL_NOEXEC)
AC_SUBST(DONT_LEAK_PATH_INFO)
AC_SUBST(BSDAUTH_USAGE)
AC_SUBST(SELINUX_USAGE)
AC_SUBST(LDAP)
AC_SUBST(LOGINCAP_USAGE)
AC_SUBST(NONUNIX_GROUPS_IMPL)
dnl
dnl Variables that get substituted in docs (not overridden by environment)
dnl
AC_SUBST(timedir)dnl initial value from SUDO_TIMEDIR
AC_SUBST(timeout)
AC_SUBST(password_timeout)
AC_SUBST(sudo_umask)
AC_SUBST(passprompt)
AC_SUBST(long_otp_prompt)
AC_SUBST(lecture)
AC_SUBST(logfac)
AC_SUBST(goodpri)
AC_SUBST(badpri)
AC_SUBST(loglen)
AC_SUBST(ignore_dot)
AC_SUBST(mail_no_user)
AC_SUBST(mail_no_host)
AC_SUBST(mail_no_perms)
AC_SUBST(mailto)
AC_SUBST(mailsub)
AC_SUBST(badpass_message)
AC_SUBST(fqdn)
AC_SUBST(runas_default)
AC_SUBST(env_editor)
AC_SUBST(passwd_tries)
AC_SUBST(tty_tickets)
AC_SUBST(insults)
AC_SUBST(root_sudo)
AC_SUBST(path_info)
AC_SUBST(ldap_conf)
AC_SUBST(ldap_secret)
AC_SUBST(nsswitch_conf)
AC_SUBST(netsvc_conf)
AC_SUBST(secure_path)
dnl
dnl Initial values for above
dnl
timeout=5
password_timeout=5
sudo_umask=0022
passprompt="Password:"
long_otp_prompt=off
lecture=once
logfac=local2
goodpri=notice
badpri=alert
loglen=80
ignore_dot=off
mail_no_user=on
mail_no_host=off
mail_no_perms=off
mailto=root
mailsub='*** SECURITY information for %h ***'
badpass_message='Sorry, try again.'
fqdn=off
runas_default=root
env_editor=off
passwd_tries=3
tty_tickets=off
insults=off
root_sudo=on
path_info=on
secure_path="not set"
INSTALL_NOEXEC=
devdir='$(srcdir)'
dnl
dnl Initial values for Makefile variables listed above
dnl May be overridden by environment variables..
dnl
PROGS="sudo visudo"
: ${MANTYPE='man'}
: ${mansrcdir='.'}
: ${SUDOERS_MODE='0440'}
: ${SUDOERS_UID='0'}
: ${SUDOERS_GID='0'}
DEV="#"
LDAP="#"
SELINUX="#"
BAMAN='.\" '
LCMAN='.\" '
SEMAN='.\" '
AUTH_OBJS=
AUTH_REG=
AUTH_EXCL=
AUTH_EXCL_DEF=
AUTH_DEF=passwd

dnl
dnl Other vaiables
dnl
CHECKSHADOW=true
shadow_defs=
shadow_funcs=
shadow_libs=
shadow_libs_optional=

dnl
dnl Override default configure dirs...
dnl
if test X"$prefix" = X"NONE"; then
    test "$mandir" = '${datarootdir}/man' && mandir='$(prefix)/man'
else
    test "$mandir" = '${datarootdir}/man' && mandir='$(datarootdir)/man'
fi
test "$bindir" = '${exec_prefix}/bin' && bindir='$(exec_prefix)/bin'
test "$sbindir" = '${exec_prefix}/sbin' && sbindir='$(exec_prefix)/sbin'
test "$sysconfdir" = '${prefix}/etc' -a X"$with_stow" != X"yes" && sysconfdir='/etc'

dnl
dnl Deprecated --with options (these all warn or generate an error)
dnl

AC_ARG_WITH(otp-only, [AS_HELP_STRING([--with-otp-only], [deprecated])],
[case $with_otp_only in
    yes)	with_passwd="no"
		AC_MSG_NOTICE([--with-otp-only option deprecated, treating as --without-passwd])
		;;
esac])

AC_ARG_WITH(alertmail, [AS_HELP_STRING([--with-alertmail], [deprecated])],
[case $with_alertmail in
    *)		with_mailto="$with_alertmail"
		AC_MSG_NOTICE([--with-alertmail option deprecated, treating as --mailto])
		;;
esac])

dnl
dnl Options for --with
dnl

AC_ARG_WITH(CC, [AS_HELP_STRING([--with-CC], [C compiler to use])],
[case $with_CC in
    yes)	AC_MSG_ERROR(["must give --with-CC an argument."])
		;;
    no)		AC_MSG_ERROR(["illegal argument: --without-CC."])
		;;
    *)		CC=$with_CC
		;;
esac])

AC_ARG_WITH(rpath, [AS_HELP_STRING([--with-rpath], [pass -R flag in addition to -L for lib paths])],
[case $with_rpath in
    yes|no)	;;
    *)		AC_MSG_ERROR(["--with-rpath does not take an argument."])
		;;
esac])

AC_ARG_WITH(blibpath, [AS_HELP_STRING([--with-blibpath[=PATH]], [pass -blibpath flag to ld for additional lib paths])],
[case $with_blibpath in
    yes|no)	;;
    *)		AC_MSG_NOTICE([will pass -blibpath:${with_blibpath} to the loader.])
		;;
esac])

dnl
dnl Handle BSM auditing support.
dnl
AC_ARG_WITH(bsm-audit, [AS_HELP_STRING([--with-bsm-audit], [enable BSM audit support])],
[case $with_bsm_audit in
    yes)	AC_DEFINE(HAVE_BSM_AUDIT)
		SUDO_LIBS="${SUDO_LIBS} -lbsm"
		SUDO_OBJS="${SUDO_OBJS} bsm_audit.o"
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-bsm-audit does not take an argument."])
		;;
esac])

AC_ARG_WITH(incpath, [AS_HELP_STRING([--with-incpath], [additional places to look for include files])],
[case $with_incpath in
    yes)	AC_MSG_ERROR(["must give --with-incpath an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-incpath not supported."])
		;;
    *)		AC_MSG_NOTICE([Adding ${with_incpath} to CPPFLAGS])
		for i in ${with_incpath}; do
		    CPPFLAGS="${CPPFLAGS} -I${i}"
		done
		;;
esac])

AC_ARG_WITH(libpath, [AS_HELP_STRING([--with-libpath], [additional places to look for libraries])],
[case $with_libpath in
    yes)	AC_MSG_ERROR(["must give --with-libpath an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-libpath not supported."])
		;;
    *)		AC_MSG_NOTICE([Adding ${with_libpath} to LDFLAGS])
		;;
esac])

AC_ARG_WITH(libraries, [AS_HELP_STRING([--with-libraries], [additional libraries to link with])],
[case $with_libraries in
    yes)	AC_MSG_ERROR(["must give --with-libraries an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-libraries not supported."])
		;;
    *)		AC_MSG_NOTICE([Adding ${with_libraries} to LIBS])
		;;
esac])

AC_ARG_WITH(devel, [AS_HELP_STRING([--with-devel], [add development options])],
[case $with_devel in
    yes)	AC_MSG_NOTICE([Setting up for development: -Wall, flex, yacc])
		PROGS="${PROGS} testsudoers"
		OSDEFS="${OSDEFS} -DSUDO_DEVEL"
		DEV=""
		devdir=.
		;;
    no)		;;
    *)		AC_MSG_WARN([Ignoring unknown argument to --with-devel: $with_devel])
		;;
esac])

AC_ARG_WITH(efence, [AS_HELP_STRING([--with-efence], [link with -lefence for malloc() debugging])],
[case $with_efence in
    yes)	AC_MSG_NOTICE([Sudo will link with -lefence (Electric Fence)])
		LIBS="${LIBS} -lefence"
		if test -f /usr/local/lib/libefence.a; then
		    with_libpath="${with_libpath} /usr/local/lib"
		fi
		;;
    no)		;;
    *)		AC_MSG_WARN([Ignoring unknown argument to --with-efence: $with_efence])
		;;
esac])

AC_ARG_WITH(csops, [AS_HELP_STRING([--with-csops], [add CSOps standard options])],
[case $with_csops in
    yes)	AC_MSG_NOTICE([Adding CSOps standard options])
		CHECKSIA=false
		with_ignore_dot=yes
		insults=on
		with_classic_insults=yes
		with_csops_insults=yes
		with_env_editor=yes
		: ${mansectsu='8'}
		: ${mansectform='5'}
		;;
    no)		;;
    *)		AC_MSG_WARN([Ignoring unknown argument to --with-csops: $with_csops])
		;;
esac])

AC_ARG_WITH(passwd, [AS_HELP_STRING([--without-passwd], [don't use passwd/shadow file for authentication])],
[case $with_passwd in
    yes|no)	AC_MSG_CHECKING(whether to use shadow/passwd file authentication)
		AC_MSG_RESULT($with_passwd)
		AUTH_DEF=""
		test "$with_passwd" = "yes" && AUTH_REG="$AUTH_REG passwd"
		;;
    *)		AC_MSG_ERROR(["Sorry, --with-passwd does not take an argument."])
		;;
esac])

AC_ARG_WITH(skey, [AS_HELP_STRING([--with-skey[=DIR]], [enable S/Key support ])],
[case $with_skey in
    no)		with_skey=""
		;;
    *)		AC_DEFINE(HAVE_SKEY)
		AC_MSG_CHECKING(whether to try S/Key authentication)
		AC_MSG_RESULT(yes)
		AUTH_REG="$AUTH_REG S/Key"
		;;
esac])

AC_ARG_WITH(opie, [AS_HELP_STRING([--with-opie[=DIR]], [enable OPIE support ])],
[case $with_opie in
    no)		with_opie=""
		;;
    *)		AC_DEFINE(HAVE_OPIE)
		AC_MSG_CHECKING(whether to try NRL OPIE authentication)
		AC_MSG_RESULT(yes)
		AUTH_REG="$AUTH_REG NRL_OPIE"
		;;
esac])

AC_ARG_WITH(long-otp-prompt, [AS_HELP_STRING([--with-long-otp-prompt], [use a two line OTP (skey/opie) prompt])],
[case $with_long_otp_prompt in
    yes)	AC_DEFINE(LONG_OTP_PROMPT)
		AC_MSG_CHECKING(whether to use a two line prompt for OTP authentication)
		AC_MSG_RESULT(yes)
		long_otp_prompt=on
		;;
    no)		long_otp_prompt=off
		;;
    *)		AC_MSG_ERROR(["--with-long-otp-prompt does not take an argument."])
		;;
esac])

AC_ARG_WITH(SecurID, [AS_HELP_STRING([--with-SecurID[[=DIR]]], [enable SecurID support])],
[case $with_SecurID in
    no)		with_SecurID="";;
    *)		AC_DEFINE(HAVE_SECURID)
		AC_MSG_CHECKING(whether to use SecurID for authentication)
		AC_MSG_RESULT(yes)
		AUTH_EXCL="$AUTH_EXCL SecurID"
		;;
esac])

AC_ARG_WITH(fwtk, [AS_HELP_STRING([--with-fwtk[[=DIR]]], [enable FWTK AuthSRV support])],
[case $with_fwtk in
    no)		with_fwtk="";;
    *)		AC_DEFINE(HAVE_FWTK)
		AC_MSG_CHECKING(whether to use FWTK AuthSRV for authentication)
		AC_MSG_RESULT(yes)
		AUTH_EXCL="$AUTH_EXCL FWTK"
		;;
esac])

AC_ARG_WITH(kerb4, [AS_HELP_STRING([--with-kerb4[[=DIR]]], [enable Kerberos IV support])],
[case $with_kerb4 in
    no)		with_kerb4="";;
    *)		AC_MSG_CHECKING(whether to try kerberos IV authentication)
		AC_MSG_RESULT(yes)
		AUTH_REG="$AUTH_REG kerb4"
		;;
esac])

AC_ARG_WITH(kerb5, [AS_HELP_STRING([--with-kerb5[[=DIR]]], [enable Kerberos V support])],
[case $with_kerb5 in
    no)		with_kerb5="";;
    *)		AC_MSG_CHECKING(whether to try Kerberos V authentication)
		AC_MSG_RESULT(yes)
		AUTH_REG="$AUTH_REG kerb5"
		;;
esac])

AC_ARG_WITH(aixauth, [AS_HELP_STRING([--with-aixauth], [enable AIX general authentication support])],
[case $with_aixauth in
    yes)	AUTH_EXCL="$AUTH_EXCL AIX_AUTH";;
    no)		;;
    *)		AC_MSG_ERROR(["--with-aixauth does not take an argument."])
		;;
esac])

AC_ARG_WITH(pam, [AS_HELP_STRING([--with-pam], [enable PAM support])],
[case $with_pam in
    yes)	AUTH_EXCL="$AUTH_EXCL PAM";;
    no)		;;
    *)		AC_MSG_ERROR(["--with-pam does not take an argument."])
		;;
esac])

AC_ARG_WITH(AFS, [AS_HELP_STRING([--with-AFS], [enable AFS support])],
[case $with_AFS in
    yes)	AC_DEFINE(HAVE_AFS)
		AC_MSG_CHECKING(whether to try AFS (kerberos) authentication)
		AC_MSG_RESULT(yes)
		AUTH_REG="$AUTH_REG AFS"
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-AFS does not take an argument."])
		;;
esac])

AC_ARG_WITH(DCE, [AS_HELP_STRING([--with-DCE], [enable DCE support])],
[case $with_DCE in
    yes)	AC_DEFINE(HAVE_DCE)
		AC_MSG_CHECKING(whether to try DCE (kerberos) authentication)
		AC_MSG_RESULT(yes)
		AUTH_REG="$AUTH_REG DCE"
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-DCE does not take an argument."])
		;;
esac])

AC_ARG_WITH(logincap, [AS_HELP_STRING([--with-logincap], [enable BSD login class support])],
[case $with_logincap in
    yes|no)	;;
    *)		AC_MSG_ERROR(["--with-logincap does not take an argument."])
		;;
esac])

AC_ARG_WITH(bsdauth, [AS_HELP_STRING([--with-bsdauth], [enable BSD authentication support])],
[case $with_bsdauth in
    yes)	AUTH_EXCL="$AUTH_EXCL BSD_AUTH";;
    no)		;;
    *)		AC_MSG_ERROR(["--with-bsdauth does not take an argument."])
		;;
esac])

AC_ARG_WITH(project, [AS_HELP_STRING([--with-project], [enable Solaris project support])],
[case $with_project in
    yes|no)	;;
    no)	;;
    *)		AC_MSG_ERROR(["--with-project does not take an argument."])
		;;
esac])

AC_MSG_CHECKING(whether to lecture users the first time they run sudo)
AC_ARG_WITH(lecture, [AS_HELP_STRING([--without-lecture], [don't print lecture for first-time sudoer])],
[case $with_lecture in
    yes|short|always)	lecture=once
		;;
    no|none|never)	lecture=never
		;;
    *)		AC_MSG_ERROR(["unknown argument to --with-lecture: $with_lecture"])
		;;
esac])
if test "$lecture" = "once"; then
    AC_MSG_RESULT(yes)
else
    AC_DEFINE(NO_LECTURE)
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether sudo should log via syslog or to a file by default)
AC_ARG_WITH(logging, [AS_HELP_STRING([--with-logging], [log via syslog, file, or both])],
[case $with_logging in
    yes)	AC_MSG_ERROR(["must give --with-logging an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-logging not supported."])
		;;
    syslog)	AC_DEFINE(LOGGING, SLOG_SYSLOG)
		AC_MSG_RESULT(syslog)
		;;
    file)	AC_DEFINE(LOGGING, SLOG_FILE)
		AC_MSG_RESULT(file)
		;;
    both)	AC_DEFINE(LOGGING, SLOG_BOTH)
		AC_MSG_RESULT(both)
		;;
    *)		AC_MSG_ERROR(["unknown argument to --with-logging: $with_logging"])
		;;
esac], [AC_DEFINE(LOGGING, SLOG_SYSLOG) AC_MSG_RESULT(syslog)])

AC_MSG_CHECKING(which syslog facility sudo should log with)
AC_ARG_WITH(logfac, [AS_HELP_STRING([--with-logfac], [syslog facility to log with (default is "local2")])],
[case $with_logfac in
    yes)	AC_MSG_ERROR(["must give --with-logfac an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-logfac not supported."])
		;;
    authpriv|auth|daemon|user|local0|local1|local2|local3|local4|local5|local6|local7)		logfac=$with_logfac
		;;
    *)		AC_MSG_ERROR(["$with_logfac is not a supported syslog facility."])
		;;
esac])
AC_DEFINE_UNQUOTED(LOGFAC, "$logfac", [The syslog facility sudo will use.])
AC_MSG_RESULT($logfac)

AC_MSG_CHECKING(at which syslog priority to log commands)
AC_ARG_WITH(goodpri, [AS_HELP_STRING([--with-goodpri], [syslog priority for commands (def is "notice")])],
[case $with_goodpri in
    yes)	AC_MSG_ERROR(["must give --with-goodpri an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-goodpri not supported."])
		;;
    alert|crit|debug|emerg|err|info|notice|warning)
		goodpri=$with_goodpri
		;;
    *)		AC_MSG_ERROR(["$with_goodpri is not a supported syslog priority."])
		;;
esac])
AC_DEFINE_UNQUOTED(PRI_SUCCESS, "$goodpri", [The syslog priority sudo will use for successful attempts.])
AC_MSG_RESULT($goodpri)

AC_MSG_CHECKING(at which syslog priority to log failures)
AC_ARG_WITH(badpri, [AS_HELP_STRING([--with-badpri], [syslog priority for failures (def is "alert")])],
[case $with_badpri in
    yes)	AC_MSG_ERROR(["must give --with-badpri an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-badpri not supported."])
		;;
    alert|crit|debug|emerg|err|info|notice|warning)
		badpri=$with_badpri
		;;
    *)		AC_MSG_ERROR([$with_badpri is not a supported syslog priority.])
		;;
esac])
AC_DEFINE_UNQUOTED(PRI_FAILURE, "$badpri", [The syslog priority sudo will use for unsuccessful attempts/errors.])
AC_MSG_RESULT($badpri)

AC_ARG_WITH(logpath, [AS_HELP_STRING([--with-logpath], [path to the sudo log file])],
[case $with_logpath in
    yes)	AC_MSG_ERROR(["must give --with-logpath an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-logpath not supported."])
		;;
esac])

AC_MSG_CHECKING(how long a line in the log file should be)
AC_ARG_WITH(loglen, [AS_HELP_STRING([--with-loglen], [maximum length of a log file line (default is 80)])],
[case $with_loglen in
    yes)	AC_MSG_ERROR(["must give --with-loglen an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-loglen not supported."])
		;;
    [[0-9]]*)	loglen=$with_loglen
		;;
    *)		AC_MSG_ERROR(["you must enter a number, not $with_loglen"])
		;;
esac])
AC_DEFINE_UNQUOTED(MAXLOGFILELEN, $loglen, [The max number of chars per log file line (for line wrapping).])
AC_MSG_RESULT($loglen)

AC_MSG_CHECKING(whether sudo should ignore '.' or '' in \$PATH)
AC_ARG_WITH(ignore-dot, [AS_HELP_STRING([--with-ignore-dot], [ignore '.' in the PATH])],
[case $with_ignore_dot in
    yes)	ignore_dot=on
		;;
    no)		ignore_dot=off
		;;
    *)		AC_MSG_ERROR(["--with-ignore-dot does not take an argument."])
		;;
esac])
if test "$ignore_dot" = "on"; then
    AC_DEFINE(IGNORE_DOT_PATH)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to send mail when a user is not in sudoers)
AC_ARG_WITH(mail-if-no-user, [AS_HELP_STRING([--without-mail-if-no-user], [do not send mail if user not in sudoers])],
[case $with_mail_if_no_user in
    yes)	mail_no_user=on
		;;
    no)		mail_no_user=off
		;;
    *)		AC_MSG_ERROR(["--with-mail-if-no-user does not take an argument."])
		;;
esac])
if test "$mail_no_user" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NO_USER)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to send mail when user listed but not for this host)
AC_ARG_WITH(mail-if-no-host, [AS_HELP_STRING([--with-mail-if-no-host], [send mail if user in sudoers but not for this host])],
[case $with_mail_if_no_host in
    yes)	mail_no_host=on
		;;
    no)		mail_no_host=off
		;;
    *)		AC_MSG_ERROR(["--with-mail-if-no-host does not take an argument."])
		;;
esac])
if test "$mail_no_host" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NO_HOST)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to send mail when a user tries a disallowed command)
AC_ARG_WITH(mail-if-noperms, [AS_HELP_STRING([--with-mail-if-noperms], [send mail if user not allowed to run command])],
[case $with_mail_if_noperms in
    yes)	mail_noperms=on
		;;
    no)		mail_noperms=off
		;;
    *)		AC_MSG_ERROR(["--with-mail-if-noperms does not take an argument."])
		;;
esac])
if test "$mail_noperms" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NOT_OK)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(who should get the mail that sudo sends)
AC_ARG_WITH(mailto, [AS_HELP_STRING([--with-mailto], [who should get sudo mail (default is "root")])],
[case $with_mailto in
    yes)	AC_MSG_ERROR(["must give --with-mailto an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-mailto not supported."])
		;;
    *)		mailto=$with_mailto
		;;
esac])
AC_DEFINE_UNQUOTED(MAILTO, "$mailto", [The user or email address that sudo mail is sent to.])
AC_MSG_RESULT([$mailto])

AC_ARG_WITH(mailsubject, [AS_HELP_STRING([--with-mailsubject], [subject of sudo mail])],
[case $with_mailsubject in
    yes)	AC_MSG_ERROR(["must give --with-mailsubject an argument."])
		;;
    no)		AC_MSG_WARN([Sorry, --without-mailsubject not supported.])
		;;
    *)		mailsub="$with_mailsubject"
		AC_MSG_CHECKING(sudo mail subject)
		AC_MSG_RESULT([Using alert mail subject: $mailsub])
		;;
esac])
AC_DEFINE_UNQUOTED(MAILSUBJECT, "$mailsub", [The subject of the mail sent by sudo to the MAILTO user/address.])

AC_MSG_CHECKING(for bad password prompt)
AC_ARG_WITH(passprompt, [AS_HELP_STRING([--with-passprompt], [default password prompt])],
[case $with_passprompt in
    yes)	AC_MSG_ERROR(["must give --with-passprompt an argument."])
		;;
    no)		AC_MSG_WARN([Sorry, --without-passprompt not supported.])
		;;
    *)		passprompt="$with_passprompt"
esac])
AC_MSG_RESULT($passprompt)
AC_DEFINE_UNQUOTED(PASSPROMPT, "$passprompt", [The default password prompt.])

AC_MSG_CHECKING(for bad password message)
AC_ARG_WITH(badpass-message, [AS_HELP_STRING([--with-badpass-message], [message the user sees when the password is wrong])],
[case $with_badpass_message in
    yes)	AC_MSG_ERROR(["Must give --with-badpass-message an argument."])
		;;
    no)		AC_MSG_WARN([Sorry, --without-badpass-message not supported.])
		;;
    *)		badpass_message="$with_badpass_message"
		;;
esac])
AC_DEFINE_UNQUOTED(INCORRECT_PASSWORD, "$badpass_message", [The message given when a bad password is entered.])
AC_MSG_RESULT([$badpass_message])

AC_MSG_CHECKING(whether to expect fully qualified hosts in sudoers)
AC_ARG_WITH(fqdn, [AS_HELP_STRING([--with-fqdn], [expect fully qualified hosts in sudoers])],
[case $with_fqdn in
    yes)	fqdn=on
		;;
    no)		fqdn=off
		;;
    *)		AC_MSG_ERROR(["--with-fqdn does not take an argument."])
		;;
esac])
if test "$fqdn" = "on"; then
    AC_DEFINE(FQDN)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_ARG_WITH(timedir, [AS_HELP_STRING([--with-timedir], [path to the sudo timestamp dir])],
[case $with_timedir in
    yes)	AC_MSG_ERROR(["must give --with-timedir an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-timedir not supported."])
		;;
esac])

AC_ARG_WITH(tzdir, [AS_HELP_STRING([--with-tzdir=DIR], [path to the time zone data directory])],
[case $with_tzdir in
    yes)	AC_MSG_ERROR(["must give --with-tzdir an argument."])
		;;
esac])

AC_ARG_WITH(sendmail, [AS_HELP_STRING([--with-sendmail], [set path to sendmail])
AS_HELP_STRING([--without-sendmail], [do not send mail at all])],
[case $with_sendmail in
    yes)	with_sendmail=""
		;;
    no)		;;
    *)		SUDO_DEFINE_UNQUOTED(_PATH_SUDO_SENDMAIL, "$with_sendmail")
		;;
esac])

AC_ARG_WITH(sudoers-mode, [AS_HELP_STRING([--with-sudoers-mode], [mode of sudoers file (defaults to 0440)])],
[case $with_sudoers_mode in
    yes)	AC_MSG_ERROR(["must give --with-sudoers-mode an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-sudoers-mode not supported."])
		;;
    [[1-9]]*)	SUDOERS_MODE=0${with_sudoers_mode}
		;;
    0*)		SUDOERS_MODE=$with_sudoers_mode
		;;
    *)		AC_MSG_ERROR(["you must use an octal mode, not a name."])
		;;
esac])

AC_ARG_WITH(sudoers-uid, [AS_HELP_STRING([--with-sudoers-uid], [uid that owns sudoers file (defaults to 0)])],
[case $with_sudoers_uid in
    yes)	AC_MSG_ERROR(["must give --with-sudoers-uid an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-sudoers-uid not supported."])
		;;
    [[0-9]]*)	SUDOERS_UID=$with_sudoers_uid
		;;
    *)		AC_MSG_ERROR(["you must use an unsigned numeric uid, not a name."])
		;;
esac])

AC_ARG_WITH(sudoers-gid, [AS_HELP_STRING([--with-sudoers-gid], [gid that owns sudoers file (defaults to 0)])],
[case $with_sudoers_gid in
    yes)	AC_MSG_ERROR(["must give --with-sudoers-gid an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-sudoers-gid not supported."])
		;;
    [[0-9]]*)	SUDOERS_GID=$with_sudoers_gid
		;;
    *)		AC_MSG_ERROR(["you must use an unsigned numeric gid, not a name."])
		;;
esac])

AC_MSG_CHECKING(for umask programs should be run with)
AC_ARG_WITH(umask, [AS_HELP_STRING([--with-umask], [umask with which the prog should run (default is 022)])
AS_HELP_STRING([--without-umask], [Preserves the umask of the user invoking sudo.])],
[case $with_umask in
    yes)	AC_MSG_ERROR(["must give --with-umask an argument."])
		;;
    no)		sudo_umask=0777
		;;
    [[0-9]]*)	sudo_umask=$with_umask
		;;
    *)		AC_MSG_ERROR(["you must enter a numeric mask."])
		;;
esac])
AC_DEFINE_UNQUOTED(SUDO_UMASK, $sudo_umask, [The umask that the root-run prog should use.])
if test "$sudo_umask" = "0777"; then
    AC_MSG_RESULT(user)
else
    AC_MSG_RESULT($sudo_umask)
fi

AC_MSG_CHECKING(for default user to run commands as)
AC_ARG_WITH(runas-default, [AS_HELP_STRING([--with-runas-default], [User to run commands as (default is "root")])],
[case $with_runas_default in
    yes)	AC_MSG_ERROR(["must give --with-runas-default an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-runas-default not supported."])
		;;
    *)		runas_default="$with_runas_default"
		;;
esac])
AC_DEFINE_UNQUOTED(RUNAS_DEFAULT, "$runas_default", [The user sudo should run commands as by default.])
AC_MSG_RESULT([$runas_default])

AC_ARG_WITH(exempt, [AS_HELP_STRING([--with-exempt=group], [no passwd needed for users in this group])],
[case $with_exempt in
    yes)	AC_MSG_ERROR(["must give --with-exempt an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-exempt not supported."])
		;;
    *)		AC_DEFINE_UNQUOTED(EXEMPTGROUP, "$with_exempt", [If defined, users in this group need not enter a passwd (ie "sudo").])
		AC_MSG_CHECKING(for group to be exempt from password)
		AC_MSG_RESULT([$with_exempt])
		;;
esac])

AC_MSG_CHECKING(for editor that visudo should use)
AC_ARG_WITH(editor, [AS_HELP_STRING([--with-editor=path], [Default editor for visudo (defaults to vi)])],
[case $with_editor in
    yes)	AC_MSG_ERROR(["must give --with-editor an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-editor not supported."])
		;;
    *)		AC_DEFINE_UNQUOTED(EDITOR, "$with_editor", [A colon-separated list of pathnames to be used as the editor for visudo.])
		AC_MSG_RESULT([$with_editor])
		;;
esac], [AC_DEFINE(EDITOR, _PATH_VI) AC_MSG_RESULT(vi)])

AC_MSG_CHECKING(whether to obey EDITOR and VISUAL environment variables)
AC_ARG_WITH(env-editor, [AS_HELP_STRING([--with-env-editor], [Use the environment variable EDITOR for visudo])],
[case $with_env_editor in
    yes)	env_editor=on
		;;
    no)		env_editor=off
		;;
    *)		AC_MSG_ERROR(["--with-env-editor does not take an argument."])
		;;
esac])
if test "$env_editor" = "on"; then
    AC_DEFINE(ENV_EDITOR)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(number of tries a user gets to enter their password)
AC_ARG_WITH(passwd-tries, [AS_HELP_STRING([--with-passwd-tries], [number of tries to enter password (default is 3)])],
[case $with_passwd_tries in
    yes)	;;
    no)		AC_MSG_ERROR(["--without-editor not supported."])
		;;
    [[1-9]]*)	passwd_tries=$with_passwd_tries
		;;
    *)		AC_MSG_ERROR(["you must enter the numer of tries, > 0"])
		;;
esac])
AC_DEFINE_UNQUOTED(TRIES_FOR_PASSWORD, $passwd_tries, [The number of tries a user gets to enter their password.])
AC_MSG_RESULT($passwd_tries)

AC_MSG_CHECKING(time in minutes after which sudo will ask for a password again)
AC_ARG_WITH(timeout, [AS_HELP_STRING([--with-timeout], [minutes before sudo asks for passwd again (def is 5 minutes)])],
[case $with_timeout in
    yes)	;;
    no)		timeout=0
		;;
    [[0-9]]*)	timeout=$with_timeout
		;;
    *)		AC_MSG_ERROR(["you must enter the numer of minutes."])
		;;
esac])
AC_DEFINE_UNQUOTED(TIMEOUT, $timeout, [The number of minutes before sudo asks for a password again.])
AC_MSG_RESULT($timeout)

AC_MSG_CHECKING(time in minutes after the password prompt will time out)
AC_ARG_WITH(password-timeout, [AS_HELP_STRING([--with-password-timeout], [passwd prompt timeout in minutes (default is 5 minutes)])],
[case $with_password_timeout in
    yes)	;;
    no)		password_timeout=0
		;;
    [[0-9]]*)	password_timeout=$with_password_timeout
		;;
    *)		AC_MSG_ERROR(["you must enter the numer of minutes."])
		;;
esac])
AC_DEFINE_UNQUOTED(PASSWORD_TIMEOUT, $password_timeout, [The passwd prompt timeout (in minutes).])
AC_MSG_RESULT($password_timeout)

AC_MSG_CHECKING(whether to use per-tty ticket files)
AC_ARG_WITH(tty-tickets, [AS_HELP_STRING([--with-tty-tickets], [use a different ticket file for each tty])],
[case $with_tty_tickets in
    yes)	tty_tickets=on
		;;
    no)		tty_tickets=off
		;;
    *)		AC_MSG_ERROR(["--with-tty-tickets does not take an argument."])
		;;
esac])
if test "$tty_tickets" = "on"; then
    AC_DEFINE(USE_TTY_TICKETS)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to include insults)
AC_ARG_WITH(insults, [AS_HELP_STRING([--with-insults], [insult the user for entering an incorrect password])],
[case $with_insults in
    yes)	insults=on
		with_classic_insults=yes
		with_csops_insults=yes
		;;
    no)		insults=off
		;;
    *)		AC_MSG_ERROR(["--with-insults does not take an argument."])
		;;
esac])
if test "$insults" = "on"; then
    AC_DEFINE(USE_INSULTS)
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_ARG_WITH(all-insults, [AS_HELP_STRING([--with-all-insults], [include all the sudo insult sets])],
[case $with_all_insults in
    yes)	with_classic_insults=yes
		with_csops_insults=yes
		with_hal_insults=yes
		with_goons_insults=yes
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-all-insults does not take an argument."])
		;;
esac])

AC_ARG_WITH(classic-insults, [AS_HELP_STRING([--with-classic-insults], [include the insults from the "classic" sudo])],
[case $with_classic_insults in
    yes)	AC_DEFINE(CLASSIC_INSULTS)
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-classic-insults does not take an argument."])
		;;
esac])

AC_ARG_WITH(csops-insults, [AS_HELP_STRING([--with-csops-insults], [include CSOps insults])],
[case $with_csops_insults in
    yes)	AC_DEFINE(CSOPS_INSULTS)
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-csops-insults does not take an argument."])
		;;
esac])

AC_ARG_WITH(hal-insults, [AS_HELP_STRING([--with-hal-insults], [include 2001-like insults])],
[case $with_hal_insults in
    yes)	AC_DEFINE(HAL_INSULTS)
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-hal-insults does not take an argument."])
		;;
esac])

AC_ARG_WITH(goons-insults, [AS_HELP_STRING([--with-goons-insults], [include the insults from the "Goon Show"])],
[case $with_goons_insults in
    yes)	AC_DEFINE(GOONS_INSULTS)
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-goons-insults does not take an argument."])
		;;
esac])

AC_ARG_WITH(nsswitch, [AS_HELP_STRING([--with-nsswitch[[=PATH]]], [path to nsswitch.conf])],
[case $with_nsswitch in
    no)		;;
    yes)	with_nsswitch="/etc/nsswitch.conf"
		;;
    *)		;;
esac])

AC_ARG_WITH(ldap, [AS_HELP_STRING([--with-ldap[[=DIR]]], [enable LDAP support])],
[case $with_ldap in
    no)		;;
    *)		AC_DEFINE(HAVE_LDAP)
		AC_MSG_CHECKING(whether to use sudoers from LDAP)
		AC_MSG_RESULT(yes)
		;;
esac])

AC_ARG_WITH(ldap-conf-file, [AS_HELP_STRING([--with-ldap-conf-file], [path to LDAP configuration file])])
SUDO_DEFINE_UNQUOTED(_PATH_LDAP_CONF, "${with_ldap_conf_file-/etc/ldap.conf}", [Path to the ldap.conf file])
ldap_conf=${with_ldap_conf_file-'/etc/ldap.conf'}

AC_ARG_WITH(ldap-secret-file, [AS_HELP_STRING([--with-ldap-secret-file], [path to LDAP secret password file])])
SUDO_DEFINE_UNQUOTED(_PATH_LDAP_SECRET, "${with_ldap_secret_file-/etc/ldap.secret}", [Path to the ldap.secret file])
ldap_secret=${with_ldap_secret_file-'/etc/ldap.secret'}

AC_ARG_WITH(pc-insults, [AS_HELP_STRING([--with-pc-insults], [replace politically incorrect insults with less offensive ones])],
[case $with_pc_insults in
    yes)	AC_DEFINE(PC_INSULTS)
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-pc-insults does not take an argument."])
		;;
esac])

dnl include all insult sets on one line
if test "$insults" = "on"; then
    AC_MSG_CHECKING(which insult sets to include)
    i=""
    test "$with_goons_insults" = "yes" && i="goons ${i}"
    test "$with_hal_insults" = "yes" && i="hal ${i}"
    test "$with_csops_insults" = "yes" && i="csops ${i}"
    test "$with_classic_insults" = "yes" && i="classic ${i}"
    AC_MSG_RESULT([$i])
fi

AC_MSG_CHECKING(whether to override the user's path)
AC_ARG_WITH(secure-path, [AS_HELP_STRING([--with-secure-path], [override the user's path with a built-in one])],
[case $with_secure_path in
    yes)	with_secure_path="/bin:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc"
		AC_DEFINE_UNQUOTED(SECURE_PATH, "$with_secure_path")
		AC_MSG_RESULT([$with_secure_path])
		secure_path="set to $with_secure_path"
		;;
    no)		AC_MSG_RESULT(no)
		;;
    *)		AC_DEFINE_UNQUOTED(SECURE_PATH, "$with_secure_path")
		AC_MSG_RESULT([$with_secure_path])
		secure_path="set to F<$with_secure_path>"
		;;
esac], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to get ip addresses from the network interfaces)
AC_ARG_WITH(interfaces, [AS_HELP_STRING([--without-interfaces], [don't try to read the ip addr of ether interfaces])],
[case $with_interfaces in
    yes)	AC_MSG_RESULT(yes)
		;;
    no)		AC_DEFINE(STUB_LOAD_INTERFACES)
		AC_MSG_RESULT(no)
		;;
    *)		AC_MSG_ERROR(["--with-interfaces does not take an argument."])
		;;
esac], AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether stow should be used)
AC_ARG_WITH(stow, [AS_HELP_STRING([--with-stow], [properly handle GNU stow packaging])],
[case $with_stow in
    yes)	AC_MSG_RESULT(yes)
		AC_DEFINE(USE_STOW)
		;;
    no)		AC_MSG_RESULT(no)
		;;
    *)		AC_MSG_ERROR(["--with-stow does not take an argument."])
		;;
esac], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to use an askpass helper)
AC_ARG_WITH(askpass, [AS_HELP_STRING([--with-askpass=PATH], [Fully qualified pathname of askpass helper])],
[case $with_askpass in
    yes)	AC_MSG_ERROR(["--with-askpass takes a path as an argument."])
		;;
    no)		;;
    *)		AC_DEFINE_UNQUOTED(_PATH_SUDO_ASKPASS, "$with_askpass", [The fully qualified pathname of askpass])
		;;
esac], AC_MSG_RESULT(no))

dnl
dnl If enabled, set LIBVAS_SO, LIBVAS_RPATH and USING_NONUNIX_GROUPS
dnl
AC_ARG_WITH(libvas, [AS_HELP_STRING([--with-libvas=NAME], [Name of the libvas shared library (default=libvas.so)])],
[case $with_libvas in
    yes)	with_libvas=libvas.so
		;;
    no)		;;
    *)		AC_DEFINE_UNQUOTED([LIBVAS_SO], ["$with_libvas"], [The name of libvas.so])
		;;
esac
if test X"$with_libvas" != X"no"; then
    AC_DEFINE_UNQUOTED([LIBVAS_SO], ["$with_libvas"], [The name of libvas.so])
    AC_DEFINE(USING_NONUNIX_GROUPS)
    NONUNIX_GROUPS_IMPL="vasgroups.o"
    AC_ARG_WITH([libvas-rpath],
       [AS_HELP_STRING([--with-libvas-rpath=PATH],
		       [Path to look for libvas in [default=/opt/quest/lib]])],
       [LIBVAS_RPATH=$withval],
       [LIBVAS_RPATH=/opt/quest/lib])
    dnl
    dnl Some platforms require libdl for dlopen()
    dnl
    AC_CHECK_LIB([dl], [main])
fi
])

dnl
dnl Options for --enable
dnl

AC_MSG_CHECKING(whether to do user authentication by default)
AC_ARG_ENABLE(authentication,
[AS_HELP_STRING([--disable-authentication], [Do not require authentication by default])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(yes)
		;;
    no)		AC_MSG_RESULT(no)
		AC_DEFINE(NO_AUTHENTICATION)
		;;
    *)		AC_MSG_RESULT(no)
    		AC_MSG_WARN([Ignoring unknown argument to --enable-authentication: $enableval])
		;;
  esac
], AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether to disable running the mailer as root)
AC_ARG_ENABLE(root-mailer,
[AS_HELP_STRING([--disable-root-mailer], [Don't run the mailer as root, run as the user])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(no)
		;;
    no)		AC_MSG_RESULT(yes)
		AC_DEFINE(NO_ROOT_MAILER)
		;;
    *)		AC_MSG_RESULT(no)
    		AC_MSG_WARN([Ignoring unknown argument to --enable-root-mailer: $enableval])
		;;
  esac
], AC_MSG_RESULT(no))

AC_ARG_ENABLE(setreuid,
[AS_HELP_STRING([--disable-setreuid], [Don't try to use the setreuid() function])],
[ case "$enableval" in
    no)		SKIP_SETREUID=yes
		;;
    *)		;;
  esac
])

AC_ARG_ENABLE(setresuid,
[AS_HELP_STRING([--disable-setresuid], [Don't try to use the setresuid() function])],
[ case "$enableval" in
    no)		SKIP_SETRESUID=yes
		;;
    *)		;;
  esac
])

AC_MSG_CHECKING(whether to disable shadow password support)
AC_ARG_ENABLE(shadow,
[AS_HELP_STRING([--disable-shadow], [Never use shadow passwords])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(no)
		;;
    no)		AC_MSG_RESULT(yes)
		CHECKSHADOW="false"
		;;
    *)		AC_MSG_RESULT(no)
    		AC_MSG_WARN([Ignoring unknown argument to --enable-shadow: $enableval])
		;;
  esac
], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether root should be allowed to use sudo)
AC_ARG_ENABLE(root-sudo,
[AS_HELP_STRING([--disable-root-sudo], [Don't allow root to run sudo])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(yes)
		;;
    no)		AC_DEFINE(NO_ROOT_SUDO)
		AC_MSG_RESULT(no)
		root_sudo=off
		;;
    *)		AC_MSG_ERROR(["--enable-root-sudo does not take an argument."])
		;;
  esac
], AC_MSG_RESULT(yes))

AC_MSG_CHECKING(whether to log the hostname in the log file)
AC_ARG_ENABLE(log-host,
[AS_HELP_STRING([--enable-log-host], [Log the hostname in the log file])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(yes)
		AC_DEFINE(HOST_IN_LOG)
		;;
    no)		AC_MSG_RESULT(no)
		;;
    *)		AC_MSG_RESULT(no)
    		AC_MSG_WARN([Ignoring unknown argument to --enable-log-host: $enableval])
		;;
  esac
], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to invoke a shell if sudo is given no arguments)
AC_ARG_ENABLE(noargs-shell,
[AS_HELP_STRING([--enable-noargs-shell], [If sudo is given no arguments run a shell])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(yes)
		AC_DEFINE(SHELL_IF_NO_ARGS)
		;;
    no)		AC_MSG_RESULT(no)
		;;
    *)		AC_MSG_RESULT(no)
    		AC_MSG_WARN([Ignoring unknown argument to --enable-noargs-shell: $enableval])
		;;
  esac
], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to set \$HOME to target user in shell mode)
AC_ARG_ENABLE(shell-sets-home,
[AS_HELP_STRING([--enable-shell-sets-home], [Set $HOME to target user in shell mode])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(yes)
		AC_DEFINE(SHELL_SETS_HOME)
		;;
    no)		AC_MSG_RESULT(no)
		;;
    *)		AC_MSG_RESULT(no)
    		AC_MSG_WARN([Ignoring unknown argument to --enable-shell-sets-home: $enableval])
		;;
  esac
], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to disable 'command not found' messages)
AC_ARG_ENABLE(path_info,
[AS_HELP_STRING([--disable-path-info], [Print 'command not allowed' not 'command not found'])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(no)
		;;
    no)		AC_MSG_RESULT(yes)
		AC_DEFINE(DONT_LEAK_PATH_INFO)
		path_info=off
		;;
    *)		AC_MSG_RESULT(no)
		AC_MSG_WARN([Ignoring unknown argument to --enable-path-info: $enableval])
		;;
  esac
], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to enable environment debugging)
AC_ARG_ENABLE(env_debug,
[AS_HELP_STRING([--enable-env-debug], [Whether to enable environment debugging.])],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(yes)
		AC_DEFINE(ENV_DEBUG)
		;;
    no)		AC_MSG_RESULT(no)
		;;
    *)		AC_MSG_RESULT(no)
    		AC_MSG_WARN([Ignoring unknown argument to --enable-env-debug: $enableval])
		;;
  esac
], AC_MSG_RESULT(no))

AC_ARG_WITH(selinux, [AS_HELP_STRING([--with-selinux], [enable SELinux support])],
[case $with_selinux in
    yes)	SELINUX_USAGE="[[-r role]] [[-t type]] "
    		AC_DEFINE(HAVE_SELINUX)
		SUDO_LIBS="${SUDO_LIBS} -lselinux"
		SUDO_OBJS="${SUDO_OBJS} selinux.o"
		PROGS="${PROGS} sesh"
		SELINUX=""
		SEMAN=""
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-selinux does not take an argument."])
		;;
esac])

dnl
dnl gss_krb5_ccache_name() may not work on Heimdal so we don't use it by default
dnl
AC_ARG_ENABLE(gss_krb5_ccache_name,
[AS_HELP_STRING([--enable-gss-krb5-ccache-name], [Use GSS-API to set the Kerberos V cred cache name])],
[check_gss_krb5_ccache_name=$enableval], [check_gss_krb5_ccache_name=no])

dnl
dnl If we don't have egrep we can't do anything...
dnl
AC_CHECK_PROG(EGREPPROG, egrep, egrep)
if test -z "$EGREPPROG"; then
    AC_MSG_ERROR([Sorry, configure requires egrep to run.])
fi

dnl
dnl Prevent configure from adding the -g flag unless in devel mode
dnl
if test "$with_devel" != "yes"; then
    ac_cv_prog_cc_g=no
fi

dnl
dnl C compiler checks
dnl
AC_ISC_POSIX
AC_PROG_CPP

dnl
dnl Libtool magic; enable shared libs and disable static libs
dnl
AC_CANONICAL_HOST
AC_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

dnl
dnl Defer with_noexec until after libtool magic runs
dnl
if test "$enable_shared" = "no"; then
    with_noexec=no
else
    eval _shrext="$shrext_cmds"
fi
AC_MSG_CHECKING(path to sudo_noexec.so)
AC_ARG_WITH(noexec, [AS_HELP_STRING([--with-noexec[=PATH]], [fully qualified pathname of sudo_noexec.so])],
[case $with_noexec in
    yes)	with_noexec="$libexecdir/sudo_noexec$_shrext"
		;;
    no)		;;
    *)		;;
esac], [with_noexec="$libexecdir/sudo_noexec$_shrext"])
AC_MSG_RESULT($with_noexec)
NOEXECFILE="sudo_noexec$_shrext"
NOEXECDIR="`echo $with_noexec|sed 's:^\(.*\)/[[^/]]*:\1:'`"

dnl
dnl It is now safe to modify CFLAGS and CPPFLAGS
dnl
if test "$with_devel" = "yes" -a -n "$GCC"; then
    CFLAGS="${CFLAGS} -Wall"
fi

dnl
dnl Find programs we use
dnl
AC_CHECK_PROG(UNAMEPROG, uname, uname)
AC_CHECK_PROG(TRPROG, tr, tr)
AC_CHECK_PROG(NROFFPROG, nroff, nroff)
if test -z "$NROFFPROG"; then
    MANTYPE="cat"
    mansrcdir='$(srcdir)'
fi

dnl
dnl What kind of beastie are we being run on?
dnl Barf if config.cache was generated on another host.
dnl
if test -n "$sudo_cv_prev_host"; then
    if test "$sudo_cv_prev_host" != "$host"; then
	AC_MSG_ERROR([config.cache was created on a different host; remove it and re-run configure.])
    else
	AC_MSG_CHECKING(previous host type)
	AC_CACHE_VAL(sudo_cv_prev_host, sudo_cv_prev_host="$host")
	AC_MSG_RESULT([$sudo_cv_prev_host])
    fi
else
    # this will produce no output since there is no cached value
    AC_CACHE_VAL(sudo_cv_prev_host, sudo_cv_prev_host="$host")
fi

dnl
dnl We want to be able to differentiate between different rev's
dnl
if test -n "$host_os"; then
    OS=`echo $host_os | sed 's/[[0-9]].*//'`
    OSREV=`echo $host_os | sed 's/^[[^0-9\.]]*\([[0-9\.]]*\).*$/\1/'`
    OSMAJOR=`echo $OSREV | sed 's/\..*$//'`
else
    OS="unknown"
    OSREV=0
    OSMAJOR=0
fi

case "$host" in
    *-*-sunos4*)
		# getcwd(3) opens a pipe to getpwd(1)!?!
		BROKEN_GETCWD=1

		# system headers lack prototypes but gcc helps...
		if test -n "$GCC"; then
		    OSDEFS="${OSDEFS} -D__USE_FIXED_PROTOTYPES__"
		fi

		shadow_funcs="getpwanam issecure"
		;;
    *-*-solaris2*)
		# To get the crypt(3) prototype (so we pass -Wall)
		OSDEFS="${OSDEFS} -D__EXTENSIONS__"
		# AFS support needs -lucb
		if test "$with_AFS" = "yes"; then
		    AFS_LIBS="-lc -lucb"
		fi
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		: ${with_rpath='yes'}
		test -z "$with_pam" && AUTH_EXCL_DEF="PAM"
		;;
    *-*-aix*)
		# To get all prototypes (so we pass -Wall)
		OSDEFS="${OSDEFS} -D_XOPEN_EXTENDED_SOURCE -D_ALL_SOURCE"
		SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-bI:\$(srcdir)/aixcrypt.exp"
		if test X"$with_blibpath" != X"no"; then
		    AC_MSG_CHECKING([if linker accepts -Wl,-blibpath])
		    O_LDFLAGS="$LDFLAGS"
		    LDFLAGS="$O_LDFLAGS -Wl,-blibpath:/usr/lib:/lib"
		    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[]])], [
			if test -n "$with_blibpath" -a "$with_blibpath" != "yes"; then
			    blibpath="$with_blibpath"
			elif test -n "$GCC"; then
			    blibpath="/usr/lib:/lib:/usr/local/lib"
			else
			    blibpath="/usr/lib:/lib"
			fi
			AC_MSG_RESULT(yes)
		    ], [AC_MSG_RESULT(no)])
		fi
		LDFLAGS="$O_LDFLAGS"

		# Use authenticate(3) as the default authentication method
		if test X"$with_aixauth" = X""; then
		    AC_CHECK_FUNCS(authenticate, [AUTH_EXCL_DEF="AIX_AUTH"])
		fi

		# AIX analog of nsswitch.conf, enabled by default
		AC_ARG_WITH(netsvc, [AS_HELP_STRING([--with-netsvc[[=PATH]]], [path to netsvc.conf])],
		[case $with_netsvc in
		    no)		;;
		    yes)	with_netsvc="/etc/netsvc.conf"
				;;
		    *)		;;
		esac])
		if test -z "$with_nsswitch" -a -z "$with_netsvc"; then
		    with_netsvc="/etc/netsvc.conf"
		fi

		# AIX-specific functions
		AC_CHECK_FUNCS(getuserattr)
		SUDO_OBJS="$SUDO_OBJS aix.o"
		;;
    *-*-hiuxmpp*)
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		;;
    *-*-hpux*)
		# AFS support needs -lBSD
		if test "$with_AFS" = "yes"; then
		    AFS_LIBS="-lc -lBSD"
		fi
		: ${mansectsu='1m'}
		: ${mansectform='4'}

		# HP-UX bundled compiler can't generate shared objects
		if test "x$ac_cv_prog_cc_c89" = "xno"; then
		    with_noexec=no
		fi

		# Use the +DAportable flag if it is supported
		_CFLAGS="$CFLAGS"
		CFLAGS="$CFLAGS +DAportable"
		AC_CACHE_CHECK([whether $CC understands +DAportable],
		    [sudo_cv_var_daportable],
		    [AC_TRY_LINK([], [], [sudo_cv_var_daportable=yes],
				 [sudo_cv_var_daportable=no])]
		)
		if test X"$sudo_cv_var_daportable" != X"yes"; then
		    CFLAGS="$_CFLAGS"
		fi

		case "$host" in
			*-*-hpux[1-8].*)
			    AC_DEFINE(BROKEN_SYSLOG)

			    # Not sure if setuid binaries are safe in < 9.x
			    if test -n "$GCC"; then
				SUDO_LDFLAGS="${SUDO_LDFLAGS} -static"
			    else
				SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-a,archive"
			    fi
			;;
			*-*-hpux9.*)
			    AC_DEFINE(BROKEN_SYSLOG)

			    shadow_funcs="getspwuid"

			    # DCE support (requires ANSI C compiler)
			    if test "$with_DCE" = "yes"; then
				# order of libs in 9.X is important. -lc_r must be last
				SUDO_LIBS="${SUDO_LIBS} -ldce -lM -lc_r"
				LIBS="${LIBS} -ldce -lM -lc_r"
				CPPFLAGS="${CPPFLAGS} -D_REENTRANT -I/usr/include/reentrant"
			    fi
			;;
			*-*-hpux10.*)
			    shadow_funcs="getprpwnam iscomsec"
			    shadow_libs="-lsec"
			;;
			*)
			    shadow_funcs="getspnam iscomsec"
			    shadow_libs="-lsec"
			    test -z "$with_pam" && AUTH_EXCL_DEF="PAM"
			;;
		esac
		;;
    *-dec-osf*)
		# ignore envariables wrt dynamic lib path
		SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-no_library_replacement"

		: ${CHECKSIA='true'}
		AC_MSG_CHECKING(whether to disable sia support on Digital UNIX)
		AC_ARG_ENABLE(sia,
		[AS_HELP_STRING([--disable-sia], [Disable SIA on Digital UNIX])],
		[ case "$enableval" in
		    yes)	AC_MSG_RESULT(no)
				CHECKSIA=true
				;;
		    no)		AC_MSG_RESULT(yes)
				CHECKSIA=false
				;;
		    *)		AC_MSG_RESULT(no)
				AC_MSG_WARN([Ignoring unknown argument to --enable-sia: $enableval])
				;;
		  esac
		], AC_MSG_RESULT(no))

		shadow_funcs="getprpwnam dispcrypt"
		# OSF/1 4.x and higher need -ldb too
		if test $OSMAJOR -lt 4; then
		    shadow_libs="-lsecurity -laud -lm"
		else
		    shadow_libs="-lsecurity -ldb -laud -lm"
		fi

		# use SIA by default, if we have it
		test "$CHECKSIA" = "true" && AUTH_EXCL_DEF="SIA"

		#
		# Some versions of Digital Unix ship with a broken
		# copy of prot.h, which we need for shadow passwords.
		# XXX - make should remove this as part of distclean
		#
		AC_MSG_CHECKING([for broken prot.h])
		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <sys/types.h>
#include <sys/security.h>
#include <prot.h>
		]], [[exit(0);]])], [AC_MSG_RESULT(no)], [AC_MSG_RESULT([yes, fixing locally])
		sed 's:<acl.h>:<sys/acl.h>:g' < /usr/include/prot.h > prot.h
		])
		: ${mansectsu='8'}
		: ${mansectform='4'}
		;;
    *-*-irix*)
		OSDEFS="${OSDEFS} -D_BSD_TYPES"
		if test -z "$NROFFPROG"; then
		    MAN_POSTINSTALL='	/bin/rm -f $(mandirsu)/sudo.$(mansectsu).z $(mandirsu)/visudo.$(mansectsu).z $(mandirform)/sudoers.$(mansectform).z ; /usr/bin/pack $(mandirsu)/sudo.$(mansectsu) $(mandirsu)/visudo.$(mansectsu) $(mandirform)/sudoers.$(mansectform)'
		    if test "$prefix" = "/usr/local" -a "$mandir" = '$(prefix)/man'; then
			if test -d /usr/share/catman/local; then
			    mandir="/usr/share/catman/local"
			else
			    mandir="/usr/catman/local"
			fi
		    fi
		else
		    if test "$prefix" = "/usr/local" -a "$mandir" = '$(prefix)/man'; then
			if test -d "/usr/share/man/local"; then
			    mandir="/usr/share/man/local"
			else
			    mandir="/usr/man/local"
			fi
		    fi
		fi
		# IRIX <= 4 needs -lsun
		if test "$OSMAJOR" -le 4; then
		    AC_CHECK_LIB(sun, getpwnam, [LIBS="${LIBS} -lsun"])
		fi
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		;;
    *-*-linux*|*-*-k*bsd*-gnu)
		OSDEFS="${OSDEFS} -D_GNU_SOURCE"
		# Some Linux versions need to link with -lshadow
		shadow_funcs="getspnam"
		shadow_libs_optional="-lshadow"
		test -z "$with_pam" && AUTH_EXCL_DEF="PAM"
		;;
    *-convex-bsd*)
		OSDEFS="${OSDEFS} -D_CONVEX_SOURCE"
		if test -z "$GCC"; then
		    CFLAGS="${CFLAGS} -D__STDC__"
		fi

		shadow_defs="-D_AUDIT -D_ACL -DSecureWare"
		shadow_funcs="getprpwnam"
		shadow_libs="-lprot"
		;;
    *-*-ultrix*)
		OS="ultrix"
		shadow_funcs="getauthuid"
		shadow_libs="-lauth"
		;;
    *-*-riscos*)
		LIBS="${LIBS} -lsun -lbsd"
		CPPFLAGS="${CPPFLAGS} -I/usr/include -I/usr/include/bsd"
		OSDEFS="${OSDEFS} -D_MIPS"
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		;;
    *-*-isc*)
		OSDEFS="${OSDEFS} -D_ISC"
		LIB_CRYPT=1
		SUDO_LIBS="${SUDO_LIBS} -lcrypt"
		LIBS="${LIBS} -lcrypt"

		shadow_funcs="getspnam"
		shadow_libs="-lsec"

		: ${mansectsu='1m'}
		: ${mansectform='4'}
		;;
    *-*-sco*|*-sco-*)
		shadow_funcs="getprpwnam"
		shadow_libs="-lprot -lx"
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		;;
    m88k-motorola-sysv*)
		# motorolla's cc (a variant of gcc) does -O but not -O2
		CFLAGS=`echo $CFLAGS | sed 's/-O2/-O/g'`
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		;;
    *-sequent-sysv*)
		shadow_funcs="getspnam"
		shadow_libs="-lsec"
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		: ${with_rpath='yes'}
		;;
    *-ncr-sysv4*|*-ncr-sysvr4*)
		AC_CHECK_LIB(c89, strcasecmp, AC_DEFINE(HAVE_STRCASECMP) [LIBS="${LIBS} -lc89"; ac_cv_func_strcasecmp=yes])
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		: ${with_rpath='yes'}
		;;
    *-ccur-sysv4*|*-ccur-sysvr4*)
		LIBS="${LIBS} -lgen"
		SUDO_LIBS="${SUDO_LIBS} -lgen"
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		: ${with_rpath='yes'}
		;;
    *-*-bsdi*)
		SKIP_SETREUID=yes
		# Use shlicc for BSD/OS [23].x unless asked to do otherwise
		if test "${with_CC+set}" != set -a "$ac_cv_prog_CC" = gcc; then
		    case "$OSMAJOR" in
			2|3)	AC_MSG_NOTICE([using shlicc as CC])
				ac_cv_prog_CC=shlicc
				CC="$ac_cv_prog_CC"
				;;
		    esac
		fi
		# Check for newer BSD auth API (just check for >= 3.0?)
		if test -z "$with_bsdauth"; then
		    AC_CHECK_FUNCS(auth_challenge, [AUTH_EXCL_DEF="BSD_AUTH"])
		fi
		;;
    *-*-freebsd*)
		# FreeBSD has a real setreuid(2) starting with 2.1 and
		# backported to 2.0.5.  We just take 2.1 and above...
		case "$OSREV" in
		0.*|1.*|2.0*)
		    SKIP_SETREUID=yes
		    ;;
		esac
		if test "$with_skey" = "yes"; then
		     SUDO_LIBS="${SUDO_LIBS} -lmd"
		fi
		CHECKSHADOW="false"
		test -z "$with_pam" && AUTH_EXCL_DEF="PAM"
		: ${with_logincap='maybe'}
		;;
    *-*-*openbsd*)
		# OpenBSD has a real setreuid(2) starting with 3.3 but
		# we will use setreuid(2) instead.
		SKIP_SETREUID=yes
		CHECKSHADOW="false"
		# OpenBSD >= 3.0 supports BSD auth
		if test -z "$with_bsdauth"; then
		    case "$OSREV" in
		    [0-2].*)
			;;
		    *)
			AUTH_EXCL_DEF="BSD_AUTH"
			;;
		    esac
		fi
		: ${with_logincap='maybe'}
		;;
    *-*-*netbsd*)
		# NetBSD has a real setreuid(2) starting with 1.3.2
		case "$OSREV" in
		0.9*|1.[012]*|1.3|1.3.1)
		    SKIP_SETREUID=yes
		    ;;
		esac
		CHECKSHADOW="false"
		test -z "$with_pam" && AUTH_EXCL_DEF="PAM"
		: ${with_logincap='maybe'}
		;;
    *-*-dragonfly*)
		if test "$with_skey" = "yes"; then
		     SUDO_LIBS="${SUDO_LIBS} -lmd"
		fi
		CHECKSHADOW="false"
		test -z "$with_pam" && AUTH_EXCL_DEF="PAM"
		: ${with_logincap='yes'}
		;;
    *-*-*bsd*)
		CHECKSHADOW="false"
		;;
    *-*-darwin*)
		SKIP_SETREUID=yes
		CHECKSHADOW="false"
		test -z "$with_pam" && AUTH_EXCL_DEF="PAM"
		: ${with_logincap='yes'}
		;;
    *-*-nextstep*)
		# lockf() on is broken on the NeXT -- use flock instead
		ac_cv_func_lockf=no
		ac_cv_func_flock=yes
		;;
    *-*-*sysv4*)
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		: ${with_rpath='yes'}
		;;
    *-*-sysv*)
		: ${mansectsu='1m'}
		: ${mansectform='4'}
		;;
    *-gnu*)
		OSDEFS="${OSDEFS} -D_GNU_SOURCE"
		;;
esac

dnl
dnl Check for mixing mutually exclusive and regular auth methods
dnl
AUTH_REG=${AUTH_REG# }
AUTH_EXCL=${AUTH_EXCL# }
if test -n "$AUTH_EXCL"; then
    set -- $AUTH_EXCL
    if test $# != 1; then
	AC_MSG_ERROR([More than one mutually exclusive authentication method specified: $AUTH_EXCL])
    fi
    if test -n "$AUTH_REG"; then
	AC_MSG_ERROR([Cannot mix mutually exclusive ($AUTH_EXCL) and regular ($AUTH_REG) authentication methods])
    fi
fi
dnl
dnl Only one of S/Key and OPIE may be specified
dnl
if test X"${with_skey}${with_opie}" = X"yesyes"; then
    AC_MSG_ERROR(["cannot use both S/Key and OPIE"])
fi

dnl
dnl Use BSD-style man sections by default
dnl
: ${mansectsu='8'}
: ${mansectform='5'}

dnl
dnl Add in any libpaths or libraries specified via configure
dnl
if test -n "$with_libpath"; then
    for i in ${with_libpath}; do
	SUDO_APPEND_LIBPATH(LDFLAGS, [$i])
    done
fi
if test -n "$with_libraries"; then
    for i in ${with_libraries}; do
	case $i in
	    -l*)	;;
	    *.a)	;;
	    *.o)	;;
	    *)	i="-l${i}";;
	esac
	LIBS="${LIBS} ${i}"
    done
fi

dnl
dnl C compiler checks (to be done after os checks)
dnl
AC_PROG_GCC_TRADITIONAL
AC_C_CONST
AC_C_VOLATILE
dnl
dnl Program checks
dnl
AC_PROG_YACC
AC_PATH_PROG([FLEX], [flex], [flex])
SUDO_PROG_MV
SUDO_PROG_BSHELL
if test -z "$with_sendmail"; then
    SUDO_PROG_SENDMAIL
fi
if test -z "$with_editor"; then
    SUDO_PROG_VI
fi
dnl
dnl Header file checks
dnl
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_HEADER_TIME
AC_CHECK_HEADERS(malloc.h paths.h utime.h netgroup.h sys/sockio.h sys/bsdtypes.h sys/select.h)
dnl ultrix termio/termios are broken
if test "$OS" != "ultrix"; then
    AC_SYS_POSIX_TERMIOS
    if test "$ac_cv_sys_posix_termios" = "yes"; then
	AC_DEFINE(HAVE_TERMIOS_H)
    else
	AC_CHECK_HEADERS(termio.h)
    fi
fi
if test ${with_logincap-'no'} != "no"; then
    AC_CHECK_HEADERS(login_cap.h, [LOGINCAP_USAGE='[[-c class|-]] '; LCMAN=""
	case "$OS" in
	    freebsd|netbsd)	SUDO_LIBS="${SUDO_LIBS} -lutil"
	    ;;
	esac
    ])
fi
if test ${with_project-'no'} != "no"; then
    AC_CHECK_HEADER(project.h, AC_DEFINE(HAVE_PROJECT_H)
	[SUDO_LIBS="${SUDO_LIBS} -lproject"], -)
fi
dnl
dnl typedef checks
dnl
AC_TYPE_MODE_T
AC_TYPE_UID_T
AC_CHECK_TYPE([__signed char], [], [AC_CHECK_TYPE([signed char], [AC_DEFINE(__signed, signed)], [AC_DEFINE(__signed, [])])])
AC_CHECK_TYPE([sig_atomic_t], [], [AC_DEFINE(sig_atomic_t, int)], [#include <sys/types.h>
#include <signal.h>])
AC_CHECK_TYPES([sigaction_t], [AC_DEFINE(HAVE_SIGACTION_T)], [], [#include <sys/types.h>
#include <signal.h>])
AC_CHECK_TYPE([struct timespec], [AC_DEFINE(HAVE_TIMESPEC)], [], [#include <sys/types.h>
#if TIME_WITH_SYS_TIME
# include <sys/time.h>
#endif
#include <time.h>])
AC_CHECK_TYPES([struct in6_addr], [AC_DEFINE(HAVE_IN6_ADDR)], [], [#include <sys/types.h>
#include <netinet/in.h>])
SUDO_TYPE_SIZE_T
SUDO_TYPE_SSIZE_T
SUDO_TYPE_DEV_T
SUDO_TYPE_INO_T
SUDO_UID_T_LEN
SUDO_TYPE_LONG_LONG
SUDO_SOCK_SA_LEN
dnl
dnl only set RETSIGTYPE if it is not set already
dnl
case "$DEFS" in
    *"RETSIGTYPE"*)	;;
    *)			AC_TYPE_SIGNAL;;
esac
dnl
dnl Function checks
dnl
AC_FUNC_GETGROUPS
AC_CHECK_FUNCS(strchr strrchr memchr memcpy memset sysconf tzset \
	       strftime setrlimit initgroups getgroups fstat gettimeofday \
	       setlocale getaddrinfo setsid setenv setrlimit64)
AC_CHECK_FUNCS(unsetenv, SUDO_FUNC_UNSETENV_VOID)
SUDO_FUNC_PUTENV_CONST
if test -z "$SKIP_SETRESUID"; then
    AC_CHECK_FUNCS(setresuid, [SKIP_SETREUID=yes])
fi
if test -z "$SKIP_SETREUID"; then
    AC_CHECK_FUNCS(setreuid, [SKIP_SETEUID=yes])
fi
if test -z "$SKIP_SETEUID"; then
    AC_CHECK_FUNCS(seteuid)
fi
if test X"$with_interfaces" != X"no"; then
    AC_CHECK_FUNCS(getifaddrs, [AC_CHECK_FUNCS(freeifaddrs)])
fi
if test -z "$BROKEN_GETCWD"; then
    AC_REPLACE_FUNCS(getcwd)
fi
AC_CHECK_FUNCS(glob, [AC_MSG_CHECKING(for GLOB_BRACE and GLOB_TILDE in glob.h)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <glob.h>]], [[int i = GLOB_BRACE | GLOB_TILDE; (void)i;]])], [AC_DEFINE(HAVE_EXTENDED_GLOB)
    AC_MSG_RESULT(yes)], [AC_LIBOBJ(glob)
    AC_MSG_RESULT(no)])], [AC_LIBOBJ(glob)])
AC_CHECK_FUNCS(lockf flock, [break])
AC_CHECK_FUNCS(waitpid wait3, [break])
AC_CHECK_FUNCS(innetgr _innetgr, [AC_CHECK_FUNCS(getdomainname) [break]])
AC_CHECK_FUNCS(utimes, [AC_CHECK_FUNCS(futimes futimesat, [break])], [AC_CHECK_FUNCS(futime) AC_LIBOBJ(utimes)])
SUDO_FUNC_FNMATCH([AC_DEFINE(HAVE_FNMATCH)], [AC_LIBOBJ(fnmatch)])
SUDO_FUNC_ISBLANK
AC_REPLACE_FUNCS(memrchr strerror strcasecmp sigaction strlcpy strlcat)
AC_CHECK_FUNCS(closefrom, [], [AC_LIBOBJ(closefrom)
    AC_CHECK_DECL(F_CLOSEM, AC_DEFINE(HAVE_FCNTL_CLOSEM), [],
	[ #include <limits.h>
	  #include <fcntl.h> ])
])
AC_CHECK_FUNCS(mkstemp, [], [SUDO_OBJS="${SUDO_OBJS} mkstemp.o"
    AC_CHECK_FUNCS(random lrand48, [break])
])
AC_CHECK_FUNCS(snprintf vsnprintf asprintf vasprintf, , [NEED_SNPRINTF=1])
if test X"$ac_cv_type_struct_timespec" != X"no"; then
    AC_CHECK_MEMBER([struct stat.st_mtim], [AC_DEFINE(HAVE_ST_MTIM)]
	[AC_CHECK_MEMBER([struct stat.st_mtim.st__tim], AC_DEFINE(HAVE_ST__TIM))],
	[AC_CHECK_MEMBER([struct stat.st_mtimespec], AC_DEFINE([HAVE_ST_MTIMESPEC]))])
    AC_MSG_CHECKING([for two-parameter timespecsub])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
#include <sys/time.h>]], [[struct timespec ts1, ts2;
ts1.tv_sec = 1; ts1.tv_nsec = 0; ts2.tv_sec = 0; ts2.tv_nsec = 0;
#ifndef timespecsub
#error missing timespecsub
#endif
timespecsub(&ts1, &ts2);]])], [AC_DEFINE(HAVE_TIMESPECSUB2)
    AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)])
fi
dnl
dnl Check for the dirfd function/macro.  If not found, look for dd_fd in DIR.
dnl
AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
#include <$ac_header_dirent>]], [[DIR *d; (void)dirfd(d);]])], [AC_DEFINE(HAVE_DIRFD)], [AC_TRY_LINK([#include <sys/types.h>
#include <$ac_header_dirent>], [DIR d; memset(&d, 0, sizeof(d)); return(d.dd_fd);], [AC_DEFINE(HAVE_DD_FD)])])
dnl
dnl If NEED_SNPRINTF is set, add snprintf.c to LIBOBJS
dnl (it contains snprintf, vsnprintf, asprintf, and vasprintf)
dnl
if test -n "$NEED_SNPRINTF"; then
    AC_LIBOBJ(snprintf)
fi
dnl
dnl If socket(2) not in libc, check -lsocket and -linet
dnl May need to link with *both* -lnsl and -lsocket due to unresolved symbols
dnl In this case we look for main(), not socket() to avoid using a cached value
dnl
AC_CHECK_FUNC(socket, , [AC_CHECK_LIB(socket, socket, [NET_LIBS="${NET_LIBS} -lsocket"; LIBS="${LIBS} -lsocket"], AC_CHECK_LIB(inet, socket, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find socket() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, socket, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl)))])
dnl
dnl If inet_addr(3) not in libc, check -lnsl and -linet
dnl May need to link with *both* -lnsl and -lsocket due to unresolved symbols
dnl
AC_CHECK_FUNC(inet_addr, , [AC_CHECK_FUNC(__inet_addr, , AC_CHECK_LIB(nsl, inet_addr, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, inet_addr, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find inet_addr() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, inet_addr, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl))))])
dnl
dnl If syslog(3) not in libc, check -lsocket, -lnsl and -linet
dnl
AC_CHECK_FUNC(syslog, , [AC_CHECK_LIB(socket, syslog, [NET_LIBS="${NET_LIBS} -lsocket"; LIBS="${LIBS} -lsocket"], AC_CHECK_LIB(nsl, syslog, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, syslog, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"])))])
dnl
dnl Check for getprogname() or __progname
dnl
AC_CHECK_FUNCS(getprogname, , [
    AC_MSG_CHECKING([for __progname])
    AC_CACHE_VAL(sudo_cv___progname, [
    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[extern char *__progname; (void)puts(__progname);]])], [sudo_cv___progname=yes], [sudo_cv___progname=no])])
    if test "$sudo_cv___progname" = "yes"; then
	AC_DEFINE(HAVE___PROGNAME)
    else
	AC_LIBOBJ(getprogname)
    fi
    AC_MSG_RESULT($sudo_cv___progname)
])

dnl
dnl nsswitch.conf and its equivalents
dnl
netsvc_conf='/etc/netsvc.conf'
nsswitch_conf='/etc/nsswitch.conf'
if test ${with_netsvc-"no"} != "no"; then
    SUDO_DEFINE_UNQUOTED(_PATH_NETSVC_CONF, "${with_netsvc-/etc/netsvc.conf}")
    netsvc_conf=${with_netsvc-/etc/netsvc.conf}
elif test ${with_nsswitch-"yes"} != "no"; then
    SUDO_DEFINE_UNQUOTED(_PATH_NSSWITCH_CONF, "${with_nsswitch-/etc/nsswitch.conf}")
    nsswitch_conf=${with_nsswitch-/etc/nsswitch.conf}
fi

dnl
dnl Mutually exclusive auth checks come first, followed by
dnl non-exclusive ones.  Note: passwd must be last of all!
dnl

dnl
dnl Convert default authentication methods to with_* if
dnl no explicit authentication scheme was specified.
dnl
if test -z "${AUTH_EXCL}${AUTH_REG}" -a -n "$AUTH_EXCL_DEF"; then
    for auth in $AUTH_EXCL_DEF; do
	case $auth in
	    AIX_AUTH)	with_aixauth=maybe;;
	    BSD_AUTH)	with_bsdauth=maybe;;
	    PAM)	with_pam=maybe;;
	    SIA)	CHECKSIA=true;;
	esac
    done
fi

dnl
dnl PAM support.  Systems that use PAM by default set with_pam=default
dnl and we do the actual tests here.
dnl
if test ${with_pam-"no"} != "no"; then
    dnl
    dnl Some platforms need libdl for dlopen
    dnl
    case "$LIBS" in
	*-ldl*)	SUDO_LIBS="${SUDO_LIBS} -lpam"
		;;
	*)	AC_CHECK_LIB([dl], [main], [SUDO_LIBS="${SUDO_LIBS} -lpam -ldl"], [SUDO_LIBS="${SUDO_LIBS} -lpam"])
		ac_cv_lib_dl=ac_cv_lib_dl_main
		;;
    esac

    dnl
    dnl Some PAM implementations (MacOS X for example) put the PAM headers
    dnl in /usr/include/pam instead of /usr/include/security...
    dnl
    AC_CHECK_HEADERS([security/pam_appl.h] [pam/pam_appl.h], [with_pam=yes; break])
    if test "$with_pam" = "yes"; then
	AC_DEFINE(HAVE_PAM)
	AUTH_OBJS="$AUTH_OBJS pam.o";
	AUTH_EXCL=PAM
	AC_MSG_CHECKING(whether to use PAM session support)
	AC_ARG_ENABLE(pam_session,
	[AS_HELP_STRING([--disable-pam-session], [Disable PAM session support])],
	    [ case "$enableval" in
		yes)	AC_MSG_RESULT(yes)
			;;
		no)		AC_MSG_RESULT(no)
			    AC_DEFINE([NO_PAM_SESSION], [], [PAM session support disabled])
			    ;;
		*)		AC_MSG_RESULT(no)
			    AC_MSG_WARN([Ignoring unknown argument to --enable-pam-session: $enableval])
			    ;;
	    esac], AC_MSG_RESULT(yes))
	case $host in
	    *-*-linux*|*-*-solaris*)
		    # dgettext() may be defined to dgettext_libintl in the
		    # header file, so first check that it links w/ additional
		    # libs, then try with -lintl
		    AC_LINK_IFELSE([AC_LANG_PROGRAM(
		    [[#include <libintl.h>]], [(void)dgettext((char *)0, (char *)0);])],
		    [AC_DEFINE(HAVE_DGETTEXT)],
		    [AC_CHECK_LIB(intl, dgettext, [LIBS="${LIBS} -lintl"]
			[AC_DEFINE(HAVE_DGETTEXT)])])
		    ;;
	esac
    fi
fi

dnl
dnl AIX general authentication
dnl If set to "maybe" only enable if no other exclusive method in use.
dnl
if test ${with_aixauth-'no'} != "no"; then
    if test X"$with_aixauth" != X"maybe" -o X"$AUTH_EXCL" = X""; then
	AC_MSG_NOTICE([using AIX general authentication])
	AC_DEFINE(HAVE_AIXAUTH)
	AUTH_OBJS="$AUTH_OBJS aix_auth.o";
	SUDO_LIBS="${SUDO_LIBS} -ls"
	AUTH_EXCL=AIX_AUTH
    fi
fi

dnl
dnl BSD authentication
dnl If set to "maybe" only enable if no other exclusive method in use.
dnl
if test ${with_bsdauth-'no'} != "no"; then
    AC_CHECK_HEADER(bsd_auth.h, AC_DEFINE(HAVE_BSD_AUTH_H)
	[AUTH_OBJS="$AUTH_OBJS bsdauth.o"]
	[BSDAUTH_USAGE='[[-a auth_type]] ']
	[AUTH_EXCL=BSD_AUTH; BAMAN=""],
	[AC_MSG_ERROR([BSD authentication was specified but bsd_auth.h could not be found])])
fi

dnl
dnl SIA authentication for Tru64 Unix
dnl
if test ${CHECKSIA-'false'} = "true"; then
    AC_CHECK_FUNCS(sia_ses_init, [found=true], [found=false])
    if test "$found" = "true"; then
	AUTH_EXCL=SIA
	AUTH_OBJS="$AUTH_OBJS sia.o"
    fi
fi

dnl
dnl extra FWTK libs + includes
dnl
if test ${with_fwtk-'no'} != "no"; then
    if test "$with_fwtk" != "yes"; then
	SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_fwtk}])
	CPPFLAGS="${CPPFLAGS} -I${with_fwtk}"
	with_fwtk=yes
    fi
    SUDO_LIBS="${SUDO_LIBS} -lauth -lfwall"
    AUTH_OBJS="$AUTH_OBJS fwtk.o"
fi

dnl
dnl extra SecurID lib + includes
dnl
if test ${with_SecurID-'no'} != "no"; then
    if test "$with_SecurID" != "yes"; then
	:
    elif test -d /usr/ace/examples; then
	with_SecurID=/usr/ace/examples
    else
	with_SecurID=/usr/ace
    fi
    CPPFLAGS="${CPPFLAGS} -I${with_SecurID}"
    _LDFLAGS="${LDFLAGS}"
    SUDO_APPEND_LIBPATH(LDFLAGS, [${with_SecurID}])
    #
    # Determine whether to use the new or old SecurID API
    #
    AC_CHECK_LIB(aceclnt, SD_Init,
	[
	    AUTH_OBJS="$AUTH_OBJS securid5.o";
	    SUDO_LIBS="${SUDO_LIBS} -laceclnt -lpthread"
	]
	[
	    SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_SecurID}])
	], [
	    AUTH_OBJS="$AUTH_OBJS securid.o";
	    SUDO_LIBS="${SUDO_LIBS} ${with_SecurID}/sdiclient.a"
	],
	[
	    -lpthread
	]
    )
    LDFLAGS="${_LDFLAGS}"
fi

dnl
dnl Non-mutually exclusive auth checks come next.
dnl Note: passwd must be last of all!
dnl

dnl
dnl Convert default authentication methods to with_* if
dnl no explicit authentication scheme was specified.
dnl
if test -z "${AUTH_EXCL}" -a -n "$AUTH_DEF"; then
    for auth in $AUTH_DEF; do
	case $auth in
	    passwd)	: ${with_passwd='maybe'};;
	esac
    done
fi

dnl
dnl Kerberos IV
dnl
if test ${with_kerb4-'no'} != "no"; then
    AC_DEFINE(HAVE_KERB4)
    dnl
    dnl Use the specified directory, if any, else search for correct inc dir
    dnl
    O_LDFLAGS="$LDFLAGS"
    if test "$with_kerb4" = "yes"; then
	found=no
	O_CPPFLAGS="$CPPFLAGS"
	for dir in "" "kerberosIV/" "krb4/" "kerberos4/" "kerberosv4/"; do
	    CPPFLAGS="$O_CPPFLAGS -I/usr/include/${dir}"
	    AC_PREPROC_IFELSE([#include <krb.h>], [found=yes; break])
	done
	test X"$found" = X"no" && CPPFLAGS="$O_CPPFLAGS"
    else
	SUDO_APPEND_LIBPATH(LDFLAGS, [${with_kerb4}/lib])
	SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_kerb4}/lib])
	CPPFLAGS="$CPPFLAGS -I${with_kerb4}/include"
	AC_CHECK_HEADER([krb.h], [found=yes], [found=no])
    fi
    if test X"$found" = X"no"; then
	AC_MSG_WARN([Unable to locate Kerberos IV include files, you will have to edit the Makefile and add -I/path/to/krb/includes to CPPFLAGS])
    fi

    dnl
    dnl Check for -ldes vs. -ldes425
    dnl
    AC_CHECK_LIB(des, des_cbc_encrypt, [K4LIBS="-ldes"], [
	AC_CHECK_LIB(des425, des_cbc_encrypt, [K4LIBS="-ldes425"], [K4LIBS=""])
    ])
    dnl
    dnl Try to determine whether we have KTH or MIT/CNS Kerberos IV
    dnl
    AC_MSG_CHECKING(whether we are using KTH Kerberos IV)
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <krb.h>]], [[const char *tmp = krb4_version;]])], [
	    AC_MSG_RESULT(yes)
	    K4LIBS="${K4LIBS} -lcom_err"
	    AC_CHECK_LIB(roken, main, [K4LIBS="${K4LIBS} -lroken"])
	], [
	    AC_MSG_RESULT(no)
	]
    )
    dnl
    dnl The actual Kerberos IV lib might be -lkrb or -lkrb4
    dnl
    AC_CHECK_LIB(krb, main, [K4LIBS="-lkrb $K4LIBS"], [
	AC_CHECK_LIB(krb4, main, [K4LIBS="-lkrb4 $K4LIBS"],
	    [K4LIBS="-lkrb $K4LIBS"]
	    [AC_MSG_WARN([Unable to locate Kerberos IV libraries, you will have to edit the Makefile and add -L/path/to/krb/libs to SUDO_LDFLAGS and possibly add Kerberos libs to SUDO_LIBS])]
	, [$K4LIBS])
    ], [$K4LIBS])
    LDFLAGS="$O_LDFLAGS"
    SUDO_LIBS="${SUDO_LIBS} $K4LIBS"
    AUTH_OBJS="$AUTH_OBJS kerb4.o"
fi

dnl
dnl Kerberos V
dnl There is an easy way and a hard way...
dnl
if test ${with_kerb5-'no'} != "no"; then
    AC_CHECK_PROG(KRB5CONFIG, krb5-config, yes, "")
    if test -n "$KRB5CONFIG"; then
	AC_DEFINE(HAVE_KERB5)
	AUTH_OBJS="$AUTH_OBJS kerb5.o"
	CPPFLAGS="$CPPFLAGS `krb5-config --cflags`"
	SUDO_LIBS="$SUDO_LIBS `krb5-config --libs`"
	dnl
	dnl Try to determine whether we have Heimdal or MIT Kerberos
	dnl
	AC_MSG_CHECKING(whether we are using Heimdal)
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <krb5.h>]], [[const char *tmp = heimdal_version;]])], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_HEIMDAL)
	    ], [
		AC_MSG_RESULT(no)
	    ]
	)
    fi
fi
if test ${with_kerb5-'no'} != "no" -a -z "$KRB5CONFIG"; then
    AC_DEFINE(HAVE_KERB5)
    dnl
    dnl Use the specified directory, if any, else search for correct inc dir
    dnl
    if test "$with_kerb5" = "yes"; then
	found=no
	O_CPPFLAGS="$CPPFLAGS"
	for dir in "" "kerberosV/" "krb5/" "kerberos5/" "kerberosv5/"; do
	    CPPFLAGS="$O_CPPFLAGS -I/usr/include/${dir}"
	    AC_PREPROC_IFELSE([#include <krb5.h>], [found=yes; break])
	done
	if test X"$found" = X"no"; then
	    CPPFLAGS="$O_CPPFLAGS"
	    AC_MSG_WARN([Unable to locate Kerberos V include files, you will have to edit the Makefile and add -I/path/to/krb/includes to CPPFLAGS])
	fi
    else
	dnl XXX - try to include krb5.h here too
	SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_kerb5}/lib])
	CPPFLAGS="$CPPFLAGS -I${with_kerb5}/include"
    fi

    dnl
    dnl Try to determine whether we have Heimdal or MIT Kerberos
    dnl
    AC_MSG_CHECKING(whether we are using Heimdal)
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <krb5.h>]], [[const char *tmp = heimdal_version;]])], [
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_HEIMDAL)
	    # XXX - need to check whether -lcrypo is needed!
	    SUDO_LIBS="${SUDO_LIBS} -lkrb5 -lcrypto -ldes -lcom_err -lasn1"
	    AC_CHECK_LIB(roken, main, [SUDO_LIBS="${SUDO_LIBS} -lroken"])
	], [
	    AC_MSG_RESULT(no)
	    SUDO_LIBS="${SUDO_LIBS} -lkrb5 -lk5crypto -lcom_err"
	    AC_CHECK_LIB(krb5support, main, [SUDO_LIBS="${SUDO_LIBS} -lkrb5support"])
    ])
    AUTH_OBJS="$AUTH_OBJS kerb5.o"
    _LIBS="$LIBS"
    LIBS="${LIBS} ${SUDO_LIBS}"
    AC_CHECK_FUNCS(krb5_verify_user krb5_init_secure_context)
    AC_CHECK_FUNCS(krb5_get_init_creds_opt_alloc, [
	AC_CACHE_CHECK([whether krb5_get_init_creds_opt_free takes a context],
	    sudo_cv_krb5_get_init_creds_opt_free_two_args, [
		AC_TRY_COMPILE([#include <krb5.h>],
		    [krb5_get_init_creds_opt_free(NULL, NULL);],
		    [sudo_cv_krb5_get_init_creds_opt_free_two_args=yes],
		    [sudo_cv_krb5_get_init_creds_opt_free_two_args=no]
		)
	    ]
	)
    ])
    if test X"$sudo_cv_krb5_get_init_creds_opt_free_two_args" = X"yes"; then
  	AC_DEFINE(HAVE_KRB5_GET_INIT_CREDS_OPT_FREE_TWO_ARGS)
    fi
    LIBS="$_LIBS"
fi

dnl
dnl extra AFS libs and includes
dnl
if test ${with_AFS-'no'} = "yes"; then

    # looks like the "standard" place for AFS libs is /usr/afsws/lib
    AFSLIBDIRS="/usr/lib/afs /usr/afsws/lib /usr/afsws/lib/afs"
    for i in $AFSLIBDIRS; do
	if test -d ${i}; then
	    SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [$i])
	    FOUND_AFSLIBDIR=true
	fi
    done
    if test -z "$FOUND_AFSLIBDIR"; then
	AC_MSG_WARN([Unable to locate AFS libraries, you will have to edit the Makefile and add -L/path/to/afs/libs to SUDO_LDFLAGS or rerun configure with the --with-libpath options.])
    fi

    # Order is important here.  Note that we build AFS_LIBS from right to left
    # since AFS_LIBS may be initialized with BSD compat libs that must go last
    AFS_LIBS="-laudit ${AFS_LIBS}"
    for i in $AFSLIBDIRS; do
	if test -f ${i}/util.a; then
	    AFS_LIBS="${i}/util.a ${AFS_LIBS}"
	    FOUND_UTIL_A=true
	    break;
	fi
    done
    if test -z "$FOUND_UTIL_A"; then
	AFS_LIBS="-lutil ${AFS_LIBS}"
    fi
    AFS_LIBS="-lkauth -lprot -lubik -lauth -lrxkad -lsys -ldes -lrx -llwp -lcom_err ${AFS_LIBS}"

    # AFS includes may live in /usr/include on some machines...
    for i in /usr/afsws/include; do
	if test -d ${i}; then
	    CPPFLAGS="${CPPFLAGS} -I${i}"
	    FOUND_AFSINCDIR=true
	fi
    done

    if test -z "$FOUND_AFSLIBDIR"; then
	AC_MSG_WARN([Unable to locate AFS include dir, you may have to edit the Makefile and add -I/path/to/afs/includes to CPPFLAGS or rerun configure with the --with-incpath options.])
    fi

    AUTH_OBJS="$AUTH_OBJS afs.o"
fi

dnl
dnl extra DCE obj + lib
dnl Order of libs in HP-UX 10.x is important, -ldce must be last.
dnl
if test ${with_DCE-'no'} = "yes"; then
    DCE_OBJS="${DCE_OBJS} dce_pwent.o"
    SUDO_LIBS="${SUDO_LIBS} -ldce"
    AUTH_OBJS="$AUTH_OBJS dce.o"
fi

dnl
dnl extra S/Key lib and includes
dnl
if test ${with_skey-'no'} = "yes"; then
    O_LDFLAGS="$LDFLAGS"
    if test "$with_skey" != "yes"; then
	CPPFLAGS="${CPPFLAGS} -I${with_skey}/include"
	SUDO_APPEND_LIBPATH(LDFLAGS, [${with_skey}/lib])
	SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_skey}/lib])
	AC_PREPROC_IFELSE([#include <skey.h>], [found=yes], [found=no])
    else
	found=no
	O_CPPFLAGS="$CPPFLAGS"
	for dir in "" "/usr/local" "/usr/contrib"; do
	    test -n "$dir" && CPPFLAGS="$O_CPPFLAGS -I${dir}/include"
	    AC_PREPROC_IFELSE([#include <skey.h>], [found=yes; break])
	done
	if test "$found" = "no" -o -z "$dir"; then
	    CPPFLAGS="$O_CPPFLAGS"
	else
	    SUDO_APPEND_LIBPATH(LDFLAGS, [${dir}/lib])
	    SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${dir}/lib])
	fi
    fi
    if test "$found" = "no"; then
	AC_MSG_WARN([Unable to locate skey.h, you will have to edit the Makefile and add -I/path/to/skey/includes to CPPFLAGS])
    fi
    AC_CHECK_LIB(skey, main, [found=yes], [AC_MSG_WARN([Unable to locate libskey.a, you will have to edit the Makefile and add -L/path/to/skey/lib to SUDO_LDFLAGS])])
    AC_CHECK_LIB(skey, skeyaccess, AC_DEFINE(HAVE_SKEYACCESS))
    LDFLAGS="$O_LDFLAGS"
    SUDO_LIBS="${SUDO_LIBS} -lskey"
    AUTH_OBJS="$AUTH_OBJS rfc1938.o"
fi

dnl
dnl extra OPIE lib and includes
dnl
if test ${with_opie-'no'} = "yes"; then
    O_LDFLAGS="$LDFLAGS"
    if test "$with_opie" != "yes"; then
	CPPFLAGS="${CPPFLAGS} -I${with_opie}/include"
	SUDO_APPEND_LIBPATH(LDFLAGS, [${with_opie}/lib])
	SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_opie}/lib])
	AC_PREPROC_IFELSE([#include <opie.h>], [found=yes], [found=no])
    else
	found=no
	O_CPPFLAGS="$CPPFLAGS"
	for dir in "" "/usr/local" "/usr/contrib"; do
	    test -n "$dir" && CPPFLAGS="$O_CPPFLAGS -I${dir}/include"
	    AC_PREPROC_IFELSE([#include <opie.h>], [found=yes; break])
	done
	if test "$found" = "no" -o -z "$dir"; then
	    CPPFLAGS="$O_CPPFLAGS"
	else
	    SUDO_APPEND_LIBPATH(LDFLAGS, [${dir}/lib])
	    SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${dir}/lib])
	fi
    fi
    if test "$found" = "no"; then
	AC_MSG_WARN([Unable to locate opie.h, you will have to edit the Makefile and add -I/path/to/opie/includes to CPPFLAGS])
    fi
    AC_CHECK_LIB(opie, main, [found=yes], [AC_MSG_WARN([Unable to locate libopie.a, you will have to edit the Makefile and add -L/path/to/opie/lib to SUDO_LDFLAGS])])
    LDFLAGS="$O_LDFLAGS"
    SUDO_LIBS="${SUDO_LIBS} -lopie"
    AUTH_OBJS="$AUTH_OBJS rfc1938.o"
fi

dnl
dnl Check for shadow password routines if we have not already done so.
dnl If there is a specific list of functions to check we do that first.
dnl Otherwise, we check for SVR4-style and then SecureWare-style.
dnl
if test ${with_passwd-'no'} != "no"; then
    dnl
    dnl if crypt(3) not in libc, look elsewhere
    dnl
    if test -z "$LIB_CRYPT" -a "$with_passwd" != "no"; then
	AC_SEARCH_LIBS([crypt], [crypt crypt_d ufc], [test -n "$ac_lib" && SUDO_LIBS="${SUDO_LIBS} $ac_res"])
    fi

    if test "$CHECKSHADOW" = "true" -a -n "$shadow_funcs"; then
	_LIBS="$LIBS"
	LIBS="$LIBS $shadow_libs"
	found=no
	AC_CHECK_FUNCS($shadow_funcs, [found=yes])
	if test "$found" = "yes"; then
	    SUDO_LIBS="$SUDO_LIBS $shadow_libs"
	elif test -n "$shadow_libs_optional"; then
	    LIBS="$LIBS $shadow_libs_optional"
	    AC_CHECK_FUNCS($shadow_funcs, [found=yes])
	    if test "$found" = "yes"; then
		SUDO_LIBS="$SUDO_LIBS $shadow_libs $shadow_libs_optional"
	    fi
	fi
	if test "$found" = "yes"; then
	    case "$shadow_funcs" in
		*getprpwnam*) SECUREWARE=1;;
	    esac
	    test -n "$shadow_defs" && OSDEFS="${OSDEFS} $shadow_defs"
	else
	    LIBS="$_LIBS"
	fi
	CHECKSHADOW=false
    fi
    if test "$CHECKSHADOW" = "true"; then
	AC_SEARCH_LIBS([getspnam], [gen], [AC_DEFINE(HAVE_GETSPNAM)] [CHECKSHADOW=false; test -n "$ac_lib" && SUDO_LIBS="${SUDO_LIBS} $ac_res"])
    fi
    if test "$CHECKSHADOW" = "true"; then
	AC_SEARCH_LIBS([getprpwnam], [sec security prot], [AC_DEFINE(HAVE_GETPRPWNAM)] [CHECKSHADOW=false; SECUREWARE=1; test -n "$ac_lib" && SUDO_LIBS="${SUDO_LIBS} $ac_res"])
    fi
    if test -n "$SECUREWARE"; then
	AC_CHECK_FUNCS(bigcrypt set_auth_parameters initprivs)
	AUTH_OBJS="$AUTH_OBJS secureware.o"
    fi
fi

dnl
dnl extra lib and .o file for LDAP support
dnl
if test ${with_ldap-'no'} != "no"; then
    _LDFLAGS="$LDFLAGS"
    if test "$with_ldap" != "yes"; then
	SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_ldap}/lib])
	SUDO_APPEND_LIBPATH(LDFLAGS, [${with_ldap}/lib])
	CPPFLAGS="${CPPFLAGS} -I${with_ldap}/include"
	with_ldap=yes
    fi
    SUDO_OBJS="${SUDO_OBJS} ldap.o"
    LDAP=""

    AC_MSG_CHECKING([for LDAP libraries])
    LDAP_LIBS=""
    _LIBS="$LIBS"
    found=no
    for l in -lldap -llber '-lssl -lcrypto'; do
	LIBS="${LIBS} $l"
	LDAP_LIBS="${LDAP_LIBS} $l"
	AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
	#include <lber.h>
	#include <ldap.h>]], [[(void)ldap_init(0, 0)]])], [found=yes; break])
    done
    dnl if nothing linked just try with -lldap
    if test "$found" = "no"; then
	LIBS="${_LIBS} -lldap"
	LDAP_LIBS="-lldap"
	AC_MSG_RESULT([not found, using -lldap])
    else
	AC_MSG_RESULT([$LDAP_LIBS])
    fi
    dnl check if we need to link with -llber for ber_set_option
    OLIBS="$LIBS"
    AC_SEARCH_LIBS([ber_set_option], [lber], [found=yes], [found=no])
    if test X"$found" = X"yes" -a X"$LIBS" != X"$OLIBS"; then
	LDAP_LIBS="$LDAP_LIBS -llber"
    fi
    dnl check if ldap.h includes lber.h for us
    AC_MSG_CHECKING([whether lber.h is needed])
    AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
    #include <ldap.h>]], [[(void)ldap_init(0, 0)]])], [AC_MSG_RESULT([no])], [
    AC_MSG_RESULT([yes])
    AC_DEFINE(HAVE_LBER_H)])

    AC_CHECK_HEADERS([sasl/sasl.h] [sasl.h], [AC_CHECK_FUNCS(ldap_sasl_interactive_bind_s)], [break])
    AC_CHECK_HEADERS([ldap_ssl.h] [mps/ldap_ssl.h], [break], [], [#include <ldap.h>])
    AC_CHECK_FUNCS(ldap_initialize ldap_start_tls_s ldapssl_init ldapssl_set_strength ldap_search_ext_s ldap_unbind_ext_s ldap_str2dn ldap_create ldap_sasl_bind_s ldap_ssl_client_init ldap_start_tls_s_np)

    if test X"$check_gss_krb5_ccache_name" = X"yes"; then
	AC_CHECK_LIB(gssapi, gss_krb5_ccache_name,
	    AC_DEFINE(HAVE_GSS_KRB5_CCACHE_NAME)
	    [LDAP_LIBS="${LDAP_LIBS} -lgssapi"],
	    AC_CHECK_LIB(gssapi_krb5, gss_krb5_ccache_name,
		AC_DEFINE(HAVE_GSS_KRB5_CCACHE_NAME)
		[LDAP_LIBS="${LDAP_LIBS} -lgssapi_krb5"])
	)

	# gssapi headers may be separate or part of Kerberos V
	found=no
	O_CPPFLAGS="$CPPFLAGS"
	for dir in "" "kerberosV" "krb5" "kerberos5" "kerberosv5"; do
	    test X"$dir" != X"" && CPPFLAGS="$O_CPPFLAGS -I/usr/include/${dir}"
	    AC_PREPROC_IFELSE([#include <gssapi/gssapi.h>], [found="gssapi/gssapi.h"; break], [AC_PREPROC_IFELSE([#include <gssapi.h>], [found="gssapi.h"; break])])
	done
	if test X"$found" != X"no"; then
	    AC_CHECK_HEADERS([$found])
	    if test X"$found" = X"gssapi/gssapi.h"; then
		AC_CHECK_HEADERS([gssapi/gssapi_krb5.h])
	    fi
	else
	    CPPFLAGS="$O_CPPFLAGS"
	    AC_MSG_WARN([Unable to locate gssapi.h, you will have to edit the Makefile and add -I/path/to/gssapi/includes to CPPFLAGS])
	fi
    fi

    SUDO_LIBS="${SUDO_LIBS} ${LDAP_LIBS}"
    LIBS="$_LIBS"
    LDFLAGS="$_LDFLAGS"
fi

dnl
dnl Add LIBVAS_RPATH to LDFLAGS
dnl GNU ld accepts -R/path/ as an alias for -rpath /path/
dnl
if test X"$LIBVAS_RPATH" != X""; then
    if test -n "$blibpath"; then
	blibpath_add="${blibpath_add}:$LIBVAS_RPATH"
    else
	case "$host" in
	    *-*-hpux*)	LDFLAGS="$LDFLAGS -Wl,+b,$LIBVAS_RPATH"
			;;
	    *)		LDFLAGS="$LDFLAGS -Wl,-R$LIBVAS_RPATH"
			;;
	esac
    fi
fi

dnl
dnl Add $blibpath to SUDO_LDFLAGS if specified by the user or if we
dnl added -L dirpaths to SUDO_LDFLAGS.
dnl
if test -n "$blibpath"; then
    if test -n "$blibpath_add"; then
    	SUDO_LDFLAGS="$SUDO_LDFLAGS -Wl,-blibpath:${blibpath}${blibpath_add}"
    elif test -n "$with_blibpath" -a "$with_blibpath" != "yes"; then
    	SUDO_LDFLAGS="$SUDO_LDFLAGS -Wl,-blibpath:${blibpath}"
    fi
fi

dnl
dnl Check for log file and timestamp locations
dnl
SUDO_LOGFILE
SUDO_TIMEDIR
SUDO_TZDIR

dnl
dnl Use passwd (and secureware) auth modules?
dnl
case "$with_passwd" in
yes|maybe)
    AUTH_OBJS="$AUTH_OBJS passwd.o"
    ;;
*)
    AC_DEFINE(WITHOUT_PASSWD)
    if test -z "$AUTH_OBJS"; then
	AC_MSG_ERROR([no authentication methods defined.])
    fi
    ;;
esac
AUTH_OBJS=${AUTH_OBJS# }
_AUTH=`echo "$AUTH_OBJS" | sed 's/\.o//g'`
AC_MSG_NOTICE([using the following authentication methods: $_AUTH])

dnl
dnl LIBS may contain duplicates from SUDO_LIBS or NET_LIBS so prune it.
dnl
if test -n "$LIBS"; then
    L="$LIBS"
    LIBS=
    for l in ${L}; do
	dupe=0
	for sl in ${SUDO_LIBS} ${NET_LIBS}; do
	    test $l = $sl && dupe=1
	done
	test $dupe = 0 && LIBS="${LIBS} $l"
    done
fi

dnl
dnl Set exec_prefix
dnl
test "$exec_prefix" = "NONE" && exec_prefix='$(prefix)'

dnl
dnl Defer setting _PATH_SUDO_NOEXEC until after exec_prefix is set
dnl XXX - this is gross!
dnl
if test X"$with_noexec" != X"no" -o X"$with_selinux" != X"no"; then
    oexec_prefix="$exec_prefix"
    if test "$exec_prefix" = '$(prefix)'; then
	if test "$prefix" = "NONE"; then
	    exec_prefix="$ac_default_prefix"
	else
	    exec_prefix="$prefix"
	fi
    fi
    if test X"$with_noexec" != X"no"; then
	PROGS="${PROGS} sudo_noexec.la"
	INSTALL_NOEXEC="install-noexec"

	eval noexec_file="$with_noexec"
	AC_DEFINE_UNQUOTED(_PATH_SUDO_NOEXEC, "$noexec_file", [The fully qualified pathname of sudo_noexec.so])
    fi
    if test X"$with_selinux" != X"no"; then
	eval sesh_file="$libexecdir/sesh"
	AC_DEFINE_UNQUOTED(_PATH_SUDO_SESH, "$sesh_file", [The fully qualified pathname of sesh])
    fi
    exec_prefix="$oexec_prefix"
fi

dnl
dnl Substitute into the Makefile and man pages
dnl
AC_CONFIG_FILES([Makefile sudo.man visudo.man sudoers.man sudoers.ldap.man sudo_usage.h])
AC_OUTPUT

dnl
dnl Spew any text the user needs to know about
dnl
if test "$with_pam" = "yes"; then
    case $host in
	*-*-linux*)
	    AC_MSG_NOTICE([You will need to customize sample.pam and install it as /etc/pam.d/sudo])
	    ;;
    esac
fi

dnl
dnl Autoheader templates
dnl
AH_TEMPLATE(BROKEN_SYSLOG, [Define to 1 if the `syslog' function returns a non-zero int to denote failure.])
AH_TEMPLATE(CLASSIC_INSULTS, [Define to 1 if you want the insults from the "classic" version sudo.])
AH_TEMPLATE(CSOPS_INSULTS, [Define to 1 if you want insults culled from the twisted minds of CSOps.])
AH_TEMPLATE(DONT_LEAK_PATH_INFO, [Define to 1 if you want sudo to display "command not allowed" instead of "command not found" when a command cannot be found.])
AH_TEMPLATE(ENV_EDITOR, [Define to 1 if you want visudo to honor the EDITOR and VISUAL env variables.])
AH_TEMPLATE(ENV_DEBUG, [Whether to enable environment debugging.])
AH_TEMPLATE(FQDN, [Define to 1 if you want to require fully qualified hosts in sudoers.])
AH_TEMPLATE(GOONS_INSULTS, [Define to 1 if you want insults from the "Goon Show".])
AH_TEMPLATE(HAL_INSULTS, [Define to 1 if you want 2001-like insults.])
AH_TEMPLATE(HAVE_AFS, [Define to 1 if you use AFS.])
AH_TEMPLATE(HAVE_AIXAUTH, [Define to 1 if you use AIX general authentication.])
AH_TEMPLATE(HAVE_BSD_AUTH_H, [Define to 1 if you use BSD authentication.])
AH_TEMPLATE(HAVE_BSM_AUDIT, [Define to 1 to enable BSM auditing.])
AH_TEMPLATE(HAVE_DCE, [Define to 1 if you use OSF DCE.])
AH_TEMPLATE(HAVE_DD_FD, [Define to 1 if your `DIR' contains dd_fd.])
AH_TEMPLATE(HAVE_DIRFD, [Define to 1 if you have the `dirfd' function or macro.])
AH_TEMPLATE(HAVE_DGETTEXT, [Define to 1 if you have the `dgettext' function.])
AH_TEMPLATE(HAVE_DISPCRYPT, [Define to 1 if you have the `dispcrypt' function.])
AH_TEMPLATE(HAVE_EXTENDED_GLOB, [Define to 1 if your glob.h defines the GLOB_BRACE and GLOB_TILDE flags.])
AH_TEMPLATE(HAVE_FCNTL_CLOSEM, [Define to 1 if your system has the F_CLOSEM fcntl.])
AH_TEMPLATE(HAVE_FNMATCH, [Define to 1 if you have the `fnmatch' function.])
AH_TEMPLATE(HAVE_FWTK, [Define to 1 if you use the FWTK authsrv daemon.])
AH_TEMPLATE(HAVE_GETAUTHUID, [Define to 1 if you have the `getauthuid' function. (ULTRIX 4.x  shadow passwords)])
AH_TEMPLATE(HAVE_GETPRPWNAM, [Define to 1 if you have the `getprpwnam' function.  (SecureWare-style shadow passwords)])
AH_TEMPLATE(HAVE_GETPWANAM, [Define to 1 if you have the `getpwanam' function. (SunOS 4.x shadow passwords)])
AH_TEMPLATE(HAVE_GETSPNAM, [Define to 1 if you have the `getspnam' function (SVR4-style shadow passwords)])
AH_TEMPLATE(HAVE_GETSPWUID, [Define to 1 if you have the `getspwuid' function. (HP-UX <= 9.X shadow passwords)])
AH_TEMPLATE(HAVE_GSS_KRB5_CCACHE_NAME, [Define to 1 if you have the `gss_krb5_ccache_name' function.])
AH_TEMPLATE(HAVE_HEIMDAL, [Define to 1 if your Kerberos is Heimdal.])
AH_TEMPLATE(HAVE_IN6_ADDR, [Define to 1 if <netinet/in.h> contains struct in6_addr.])
AH_TEMPLATE(HAVE_ISCOMSEC, [Define to 1 if you have the `iscomsec' function. (HP-UX >= 10.x check for shadow enabled)])
AH_TEMPLATE(HAVE_ISSECURE, [Define to 1 if you have the `issecure' function. (SunOS 4.x check for shadow enabled)])
AH_TEMPLATE(HAVE_KERB4, [Define to 1 if you use Kerberos IV.])
AH_TEMPLATE(HAVE_KERB5, [Define to 1 if you use Kerberos V.])
AH_TEMPLATE(HAVE_KRB5_GET_INIT_CREDS_OPT_ALLOC, [Define to 1 if you have the `krb5_get_init_creds_opt_alloc' function.])
AH_TEMPLATE(HAVE_KRB5_GET_INIT_CREDS_OPT_FREE_TWO_ARGS, [Define to 1 if your `krb5_get_init_creds_opt_free' function takes two arguments.])
AH_TEMPLATE(HAVE_KRB5_INIT_SECURE_CONTEXT, [Define to 1 if you have the `krb5_init_secure_context' function.])
AH_TEMPLATE(HAVE_KRB5_VERIFY_USER, [Define to 1 if you have the `krb5_verify_user' function.])
AH_TEMPLATE(HAVE_LBER_H, [Define to 1 if your LDAP needs <lber.h>. (OpenLDAP does not)])
AH_TEMPLATE(HAVE_LDAP, [Define to 1 if you use LDAP for sudoers.])
AH_TEMPLATE(HAVE_OPIE, [Define to 1 if you use NRL OPIE.])
AH_TEMPLATE(HAVE_PAM, [Define to 1 if you use PAM authentication.])
AH_TEMPLATE(HAVE_PROJECT_H, [Define to 1 if you have the <project.h> header file.])
AH_TEMPLATE(HAVE_SECURID, [Define to 1 if you use SecurID for authentication.])
AH_TEMPLATE(HAVE_SELINUX, [Define to 1 to enable SELinux RBAC support.])
AH_TEMPLATE(HAVE_SIGACTION_T, [Define to 1 if <signal.h> has the sigaction_t typedef.])
AH_TEMPLATE(HAVE_SKEY, [Define to 1 if you use S/Key.])
AH_TEMPLATE(HAVE_SKEYACCESS, [Define to 1 if your S/Key library has skeyaccess().])
AH_TEMPLATE(HAVE_ST__TIM, [Define to 1 if your struct stat uses an st__tim union])
AH_TEMPLATE(HAVE_ST_MTIM, [Define to 1 if your struct stat has an st_mtim member])
AH_TEMPLATE(HAVE_ST_MTIMESPEC, [Define to 1 if your struct stat has an st_mtimespec member])
AH_TEMPLATE(HAVE_TERMIOS_H, [Define to 1 if you have the <termios.h> header file and the `tcgetattr' function.])
AH_TEMPLATE(HAVE_TIMESPEC, [Define to 1 if you have struct timespec in sys/time.h])
AH_TEMPLATE(HAVE_TIMESPECSUB2, [Define to 1 if you have a timespecsub macro or function that takes two arguments (not three)])
AH_TEMPLATE(HAVE___PROGNAME, [Define to 1 if your crt0.o defines the __progname symbol for you.])
AH_TEMPLATE(HOST_IN_LOG, [Define to 1 if you want the hostname to be entered into the log file.])
AH_TEMPLATE(IGNORE_DOT_PATH, [Define to 1 if you want to ignore '.' and empty PATH elements])
AH_TEMPLATE(LOGGING, [Define to SLOG_SYSLOG, SLOG_FILE, or SLOG_BOTH.])
AH_TEMPLATE(LONG_OTP_PROMPT, [Define to 1 if you want a two line OTP (S/Key or OPIE) prompt.])
AH_TEMPLATE(NO_AUTHENTICATION, [Define to 1 if you don't want sudo to prompt for a password by default.])
AH_TEMPLATE(NO_LECTURE, [Define to 1 if you don't want users to get the lecture the first they user sudo.])
AH_TEMPLATE(NO_ROOT_MAILER, [Define to avoid runing the mailer as root.])
AH_TEMPLATE(NO_ROOT_SUDO, [Define to 1 if root should not be allowed to use sudo.])
AH_TEMPLATE(PC_INSULTS, [Define to 1 to replace politically incorrect insults with less offensive ones.])
AH_TEMPLATE(SECURE_PATH, [Define to 1 to override the user's path with a built-in one.])
AH_TEMPLATE(SEND_MAIL_WHEN_NOT_OK, [Define to 1 to send mail when the user is not allowed to run a command.])
AH_TEMPLATE(SEND_MAIL_WHEN_NO_HOST, [Define to 1 to send mail when the user is not allowed to run sudo on this host.])
AH_TEMPLATE(SEND_MAIL_WHEN_NO_USER, [Define to 1 to send mail when the user is not in the sudoers file.])
AH_TEMPLATE(SHELL_IF_NO_ARGS, [Define to 1 if you want sudo to start a shell if given no arguments.])
AH_TEMPLATE(SHELL_SETS_HOME, [Define to 1 if you want sudo to set $HOME in shell mode.])
AH_TEMPLATE(STUB_LOAD_INTERFACES, [Define to 1 if the code in interfaces.c does not compile for you.])
AH_TEMPLATE(USE_INSULTS, [Define to 1 if you want to insult the user for entering an incorrect password.])
AH_TEMPLATE(USE_STOW, [Define to 1 if you use GNU stow packaging.])
AH_TEMPLATE(USE_TTY_TICKETS, [Define to 1 if you want a different ticket file for each tty.])
AH_TEMPLATE(WITHOUT_PASSWD, [Define to avoid using the passwd/shadow file for authentication.])
AH_TEMPLATE(sig_atomic_t, [Define to `int' if <signal.h> does not define.])
AH_TEMPLATE(__signed, [Define to `signed' or nothing if compiler does not support a signed type qualifier.])
AH_TEMPLATE(USING_NONUNIX_GROUPS, [Define to 1 if using a non-Unix group lookup implementation.])

dnl
dnl Bits to copy verbatim into config.h.in
dnl
AH_TOP([#ifndef _SUDO_CONFIG_H
#define _SUDO_CONFIG_H])

AH_BOTTOM([/*
 * Macros to pull sec and nsec parts of mtime from struct stat.
 * We need to be able to convert between timeval and timespec
 * so the last 3 digits of tv_nsec are not significant.
 */
#ifdef HAVE_ST_MTIM
# ifdef HAVE_ST__TIM
#  define mtim_getsec(_x)	((_x).st_mtim.st__tim.tv_sec)
#  define mtim_getnsec(_x)	(((_x).st_mtim.st__tim.tv_nsec / 1000) * 1000)
# else
#  define mtim_getsec(_x)	((_x).st_mtim.tv_sec)
#  define mtim_getnsec(_x)	(((_x).st_mtim.tv_nsec / 1000) * 1000)
# endif
#else
# ifdef HAVE_ST_MTIMESPEC
#  define mtim_getsec(_x)	((_x).st_mtimespec.tv_sec)
#  define mtim_getnsec(_x)	(((_x).st_mtimespec.tv_nsec / 1000) * 1000)
# else
#  define mtim_getsec(_x)	((_x).st_mtime)
#  define mtim_getnsec(_x)	(0)
# endif /* HAVE_ST_MTIMESPEC */
#endif /* HAVE_ST_MTIM */

/*
 * Emulate a subset of waitpid() if we don't have it.
 */
#ifdef HAVE_WAITPID
# define sudo_waitpid(p, s, o)	waitpid(p, s, o)
#else
# ifdef HAVE_WAIT3
#  define sudo_waitpid(p, s, o)	wait3(s, o, NULL)
# endif
#endif

/* GNU stow needs /etc/sudoers to be a symlink. */
#ifdef USE_STOW
# define stat_sudoers	stat
#else
# define stat_sudoers	lstat
#endif

/* Macros to set/clear/test flags. */
#undef SET
#define SET(t, f)	((t) |= (f))
#undef CLR
#define CLR(t, f)	((t) &= ~(f))
#undef ISSET
#define ISSET(t, f)     ((t) & (f))

/* New ANSI-style OS defs for HP-UX and ConvexOS. */
#if defined(hpux) && !defined(__hpux)
# define __hpux		1
#endif /* hpux */

#if defined(convex) && !defined(__convex__)
# define __convex__	1
#endif /* convex */

/* BSD compatibility on some SVR4 systems. */
#ifdef __svr4__
# define BSD_COMP
#endif /* __svr4__ */

#endif /* _SUDO_CONFIG_H */])
@


1.47
log
@Sanity check TZ environment variable; backport from sudo 1.8.12
@
text
@@


1.46
log
@Update sudo to version 1.7.2p8
@
text
@d697 6
d2569 1
@


1.45
log
@Update to sudo 1.7.2p7
@
text
@d6 1
a6 1
AC_INIT([sudo], [1.7.2p7], [http://www.sudo.ws/bugs/], [sudo])
@


1.44
log
@Update to sudo 1.7.2p6
@
text
@d6 1
a6 1
AC_INIT([sudo], [1.7.2p6], [http://www.sudo.ws/bugs/], [sudo])
d16 1
d1048 1
a1048 1
    *)		AC_DEFINE_UNQUOTED([LIBVAS_SO], ["$with_with_libvas"], [The name of libvas.so])
d1060 4
d1984 1
a1984 1
    dnl Linux may need this
d1986 7
a1992 2
    AC_CHECK_LIB([dl], [main], [SUDO_LIBS="${SUDO_LIBS} -lpam -ldl"], [SUDO_LIBS="${SUDO_LIBS} -lpam"])
    ac_cv_lib_dl=ac_cv_lib_dl_main
d2537 6
a2542 1
	LDFLAGS="$LDFLAGS -R$LIBVAS_RPATH"
d2654 1
@


1.43
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@d6 1
a6 1
AC_INIT([sudo], [1.7.2p5], [http://www.sudo.ws/bugs/], [sudo])
a2446 1
	LDAP=""
d2449 1
@


1.42
log
@update to sudo 1.7.2p5
@
text
@a2 1
dnl $Sudo: configure.in,v 1.549 2009/06/13 20:52:50 millert Exp $
@


1.41
log
@bump patchlevel
@
text
@d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-2009 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT([sudo], [1.7.2p4], [http://www.sudo.ws/bugs/], [sudo])
@


1.40
log
@Update to sudo 1.7.2p3
@
text
@d7 1
a7 1
AC_INIT([sudo], [1.7.2p3], [http://www.sudo.ws/bugs/], [sudo])
@


1.39
log
@update to sudo 1.7.2p2
@
text
@d7 1
a7 1
AC_INIT([sudo], [1.7.2p2], [http://www.sudo.ws/bugs/], [sudo])
d1844 1
a1844 1
	       setlocale getaddrinfo setsid setenv)
@


1.38
log
@Upgrade to sudo 1.7.2
@
text
@d7 1
a7 1
AC_INIT([sudo], [1.7.2], [http://www.sudo.ws/bugs/], [sudo])
d88 1
d117 1
d993 4
a996 2
    yes)	AC_DEFINE_UNQUOTED(SECURE_PATH, "/bin:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc")
		AC_MSG_RESULT([:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc])
d1002 1
d2242 1
a2242 1
	    AC_CHECK_LIB(krb5support, main, [SUDO_LIBS="${SUDO_LIBS} -lkrb5support,"])
d2247 12
a2258 14
    AC_CHECK_FUNCS(krb5_verify_user krb5_init_secure_context krb5_get_init_creds_opt_alloc)
    AC_CACHE_CHECK(whether krb5_get_init_creds_opt_free takes a two argument2,
	sudo_cv_krb5_get_init_creds_opt_free_two_args, [
	    AC_TRY_COMPILE([#include <krb5.h>],
		[
		    krb5_context context = NULL;
		    krb5_get_init_creds_opt *opts = NULL;
		    krb5_get_init_creds_opt_free(context, opts);
		],
		[sudo_cv_krb5_get_init_creds_opt_free_two_args=yes],
		[sudo_cv_krb5_get_init_creds_opt_free_two_args=no]
	    )
	]
    )
d2669 1
a2669 1
AH_TEMPLATE(HAVE_KRB5_GET_INIT_CREDS_OPT_FREE_TWO_ARGS, [Define to 1 if your `krb5_get_init_creds_opt_alloc' function takes two arguments.])
@


1.37
log
@Update to sudo 1.7.1
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.546 2009/04/10 20:59:42 millert Exp $
d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-2008 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT([sudo], [1.7])
d12 1
a12 1
AC_MSG_NOTICE([Configuring Sudo version 1.7])
d54 1
d165 1
a165 1
AC_ARG_WITH(otp-only, [  --with-otp-only         deprecated],
d172 1
a172 1
AC_ARG_WITH(alertmail, [  --with-alertmail        deprecated],
d183 1
a183 1
AC_ARG_WITH(CC, [  --with-CC               C compiler to use],
d193 1
a193 1
AC_ARG_WITH(rpath, [  --with-rpath            pass -R flag in addition to -L for lib paths],
d200 1
a200 1
AC_ARG_WITH(blibpath, [  --with-blibpath[=PATH]    pass -blibpath flag to ld for additional lib paths],
d210 1
a210 1
AC_ARG_WITH(bsm-audit, [  --with-bsm-audit        enable BSM audit support],
d221 1
a221 1
AC_ARG_WITH(incpath, [  --with-incpath          additional places to look for include files],
d234 1
a234 1
AC_ARG_WITH(libpath, [  --with-libpath          additional places to look for libraries],
d244 1
a244 1
AC_ARG_WITH(libraries, [  --with-libraries        additional libraries to link with],
d254 1
a254 1
AC_ARG_WITH(devel, [  --with-devel            add development options],
d267 1
a267 1
AC_ARG_WITH(efence, [  --with-efence           link with -lefence for malloc() debugging],
d280 1
a280 1
AC_ARG_WITH(csops, [  --with-csops            add CSOps standard options],
d297 1
a297 1
AC_ARG_WITH(passwd, [  --without-passwd        don't use passwd/shadow file for authentication],
d308 1
a308 1
AC_ARG_WITH(skey, [  --with-skey[=DIR]         enable S/Key support ],
d319 1
a319 1
AC_ARG_WITH(opie, [  --with-opie[=DIR]         enable OPIE support ],
d330 1
a330 1
AC_ARG_WITH(long-otp-prompt, [  --with-long-otp-prompt  use a two line OTP (skey/opie) prompt],
d343 1
a343 1
AC_ARG_WITH(SecurID, [  --with-SecurID[[=DIR]]    enable SecurID support],
d353 1
a353 1
AC_ARG_WITH(fwtk, [  --with-fwtk[[=DIR]]       enable FWTK AuthSRV support],
d363 1
a363 1
AC_ARG_WITH(kerb4, [  --with-kerb4[[=DIR]]      enable Kerberos IV support],
d372 1
a372 1
AC_ARG_WITH(kerb5, [  --with-kerb5[[=DIR]]      enable Kerberos V support],
d381 1
a381 1
AC_ARG_WITH(aixauth, [  --with-aixauth          enable AIX general authentication support],
d389 1
a389 1
AC_ARG_WITH(pam, [  --with-pam              enable PAM support],
d397 1
a397 1
AC_ARG_WITH(AFS, [  --with-AFS              enable AFS support],
d409 1
a409 1
AC_ARG_WITH(DCE, [  --with-DCE              enable DCE support],
d421 1
a421 1
AC_ARG_WITH(logincap, [  --with-logincap         enable BSD login class support],
d428 1
a428 1
AC_ARG_WITH(bsdauth, [  --with-bsdauth          enable BSD authentication support],
d436 1
a436 1
AC_ARG_WITH(project, [  --with-project          enable Solaris project support],
d445 1
a445 1
AC_ARG_WITH(lecture, [  --without-lecture       don't print lecture for first-time sudoer],
d462 1
a462 1
AC_ARG_WITH(logging, [  --with-logging          log via syslog, file, or both],
d482 1
a482 1
AC_ARG_WITH(logfac, [  --with-logfac           syslog facility to log with (default is "local2")],
d497 1
a497 1
AC_ARG_WITH(goodpri, [  --with-goodpri          syslog priority for commands (def is "notice")],
d513 1
a513 1
AC_ARG_WITH(badpri, [  --with-badpri           syslog priority for failures (def is "alert")],
d528 1
a528 1
AC_ARG_WITH(logpath, [  --with-logpath          path to the sudo log file],
d537 1
a537 1
AC_ARG_WITH(loglen, [  --with-loglen           maximum length of a log file line (default is 80)],
d552 1
a552 1
AC_ARG_WITH(ignore-dot, [  --with-ignore-dot       ignore '.' in the PATH],
d569 1
a569 1
AC_ARG_WITH(mail-if-no-user, [  --without-mail-if-no-user do not send mail if user not in sudoers],
d586 1
a586 1
AC_ARG_WITH(mail-if-no-host, [  --with-mail-if-no-host  send mail if user in sudoers but not for this host],
d603 1
a603 1
AC_ARG_WITH(mail-if-noperms, [  --with-mail-if-noperms  send mail if user not allowed to run command],
d620 1
a620 1
AC_ARG_WITH(mailto, [  --with-mailto           who should get sudo mail (default is "root")],
d632 1
a632 1
AC_ARG_WITH(mailsubject, [  --with-mailsubject      subject of sudo mail],
d646 1
a646 1
AC_ARG_WITH(passprompt, [  --with-passprompt       default password prompt],
d658 1
a658 1
AC_ARG_WITH(badpass-message, [  --with-badpass-message  message the user sees when the password is wrong],
d671 1
a671 1
AC_ARG_WITH(fqdn, [  --with-fqdn             expect fully qualified hosts in sudoers],
d687 1
a687 1
AC_ARG_WITH(timedir, [  --with-timedir          path to the sudo timestamp dir],
d695 2
a696 2
AC_ARG_WITH(sendmail, [  --with-sendmail=path    set path to sendmail
  --without-sendmail      do not send mail at all],
d705 1
a705 1
AC_ARG_WITH(sudoers-mode, [  --with-sudoers-mode     mode of sudoers file (defaults to 0440)],
d719 1
a719 1
AC_ARG_WITH(sudoers-uid, [  --with-sudoers-uid      uid that owns sudoers file (defaults to 0)],
d731 1
a731 1
AC_ARG_WITH(sudoers-gid, [  --with-sudoers-gid      gid that owns sudoers file (defaults to 0)],
d744 2
a745 2
AC_ARG_WITH(umask, [  --with-umask            umask with which the prog should run (default is 022)
  --without-umask         Preserves the umask of the user invoking sudo.],
d764 1
a764 1
AC_ARG_WITH(runas-default, [  --with-runas-default    User to run commands as (default is "root")],
d776 1
a776 1
AC_ARG_WITH(exempt, [  --with-exempt=group     no passwd needed for users in this group],
d789 1
a789 1
AC_ARG_WITH(editor, [  --with-editor=path      Default editor for visudo (defaults to vi)],
d801 1
a801 1
AC_ARG_WITH(env-editor, [  --with-env-editor       Use the environment variable EDITOR for visudo],
d818 1
a818 1
AC_ARG_WITH(passwd-tries, [  --with-passwd-tries     number of tries to enter password (default is 3)],
d832 1
a832 1
AC_ARG_WITH(timeout, [  --with-timeout          minutes before sudo asks for passwd again (def is 5 minutes)],
d846 1
a846 1
AC_ARG_WITH(password-timeout, [  --with-password-timeout passwd prompt timeout in minutes (default is 5 minutes)],
d860 1
a860 1
AC_ARG_WITH(tty-tickets, [  --with-tty-tickets      use a different ticket file for each tty],
d877 1
a877 1
AC_ARG_WITH(insults, [  --with-insults          insult the user for entering an incorrect password],
d895 1
a895 1
AC_ARG_WITH(all-insults, [  --with-all-insults      include all the sudo insult sets],
d907 1
a907 1
AC_ARG_WITH(classic-insults, [  --with-classic-insults  include the insults from the "classic" sudo],
d916 1
a916 1
AC_ARG_WITH(csops-insults, [  --with-csops-insults    include CSOps insults],
d925 1
a925 1
AC_ARG_WITH(hal-insults, [  --with-hal-insults      include 2001-like insults],
d934 1
a934 1
AC_ARG_WITH(goons-insults, [  --with-goons-insults    include the insults from the "Goon Show"],
d943 1
a943 1
AC_ARG_WITH(nsswitch, [  --with-nsswitch[[=PATH]]  path to nsswitch.conf],
d951 1
a951 1
AC_ARG_WITH(ldap, [  --with-ldap[[=DIR]]       enable LDAP support],
d960 1
a960 1
AC_ARG_WITH(ldap-conf-file, [  --with-ldap-conf-file   path to LDAP configuration file])
d964 1
a964 1
AC_ARG_WITH(ldap-secret-file, [  --with-ldap-secret-file path to LDAP secret password file])
d968 1
a968 1
AC_ARG_WITH(pc-insults, [  --with-pc-insults       replace politically incorrect insults with less offensive ones],
d989 1
a989 1
AC_ARG_WITH(secure-path, [  --with-secure-path      override the user's path with a built-in one],
d1002 1
a1002 1
AC_ARG_WITH(interfaces, [  --without-interfaces    don't try to read the ip addr of ether interfaces],
d1014 1
a1014 1
AC_ARG_WITH(stow, [  --with-stow             properly handle GNU stow packaging],
d1026 1
a1026 1
AC_ARG_WITH(askpass, [  --with-askpass=PATH     Fully qualified pathname of askpass helper],
d1036 23
d1064 1
a1064 2
[  --disable-authentication
                          Do not require authentication by default],
d1079 1
a1079 1
[  --disable-root-mailer   Don't run the mailer as root, run as the user],
d1093 1
a1093 1
[  --disable-setreuid      Don't try to use the setreuid() function],
d1102 1
a1102 1
[  --disable-setresuid     Don't try to use the setresuid() function],
d1112 1
a1112 1
[  --disable-shadow        Never use shadow passwords],
d1127 1
a1127 1
[  --disable-root-sudo     Don't allow root to run sudo],
d1142 1
a1142 1
[  --enable-log-host       Log the hostname in the log file],
d1157 1
a1157 1
[  --enable-noargs-shell   If sudo is given no arguments run a shell],
d1172 1
a1172 2
[  --enable-shell-sets-home
                          Set $HOME to target user in shell mode],
d1187 1
a1187 1
[  --disable-path-info     Print 'command not allowed' not 'command not found'],
d1203 1
a1203 1
[  --enable-env-debug      Whether to enable environment debugging.],
d1216 1
a1216 1
AC_ARG_WITH(selinux, [  --with-selinux          enable SELinux support],
d1234 3
a1236 2
AC_ARG_ENABLE(gss_krb5_ccache_name, [  --enable-gss-krb5-ccache-name
                          Use GSS-API to set the Kerberos V cred cache name], [check_gss_krb5_ccache_name=$enableval], [check_gss_krb5_ccache_name=no])
d1264 1
d1276 1
a1276 1
AC_ARG_WITH(noexec, [  --with-noexec[=PATH]      fully qualified pathname of sudo_noexec.so],
d1386 1
a1386 1
		AC_ARG_WITH(netsvc, [  --with-netsvc[[=PATH]]  path to netsvc.conf],
d1417 13
d1472 1
a1472 1
		[  --disable-sia           Disable SIA on Digital UNIX],
d1765 1
d1991 1
a1991 1
	[  --disable-pam-session   Disable PAM session support],
d2481 1
a2481 1
    AC_CHECK_HEADERS([sasl/sasl.h] [sasl.h], [AC_CHECK_FUNCS(ldap_sasl_interactive_bind_s), [break]])
d2518 12
d2708 1
@


1.36
log
@sync with sudo cvs repo
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.538 2008/12/09 21:13:01 millert Exp $
d16 1
d86 1
d206 14
a948 6
if test ${with_nsswitch-"yes"} != "no"; then
    SUDO_DEFINE_UNQUOTED(_PATH_NSSWITCH_CONF, "${with_nsswitch-/etc/nsswitch.conf}")
    nsswitch_conf=${with_nsswitch-/etc/nsswitch.conf}
else
    nsswitch_conf='/etc/nsswitch.conf'
fi
d952 1
a952 1
    no)		with_ldap="";;
d1179 15
a1239 1
AC_CANONICAL_TARGET([])
d1361 12
d1801 3
a1803 1
	       setlocale getaddrinfo setsid)
d1899 13
d2443 1
a2443 2
    AC_CHECK_FUNCS(ldap_initialize ldap_start_tls_s ldap_sasl_interactive_bind_s ldapssl_init ldapssl_set_strength ldap_search_ext_s ldap_unbind_ext_s ldap_str2dn ldap_create ldap_sasl_bind_s)
    AC_CHECK_HEADERS([sasl/sasl.h])
d2445 1
d2593 1
@


1.35
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.535 2008/10/23 16:06:22 millert Exp $
d1353 4
a2573 1
AH_TEMPLATE(HAVE_SIA, [Define to 1 if you use SIA authentication.])
@


1.34
log
@Update to sudo 1.6.9p17
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.53 2008/06/22 20:23:56 millert Exp $
d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-2007 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT([sudo], [1.6.9])
d12 1
a12 1
AC_MSG_NOTICE([Configuring Sudo version 1.6.9])
d40 1
d49 4
d82 3
d114 1
d126 1
d243 1
d926 14
d948 8
a955 4
AC_ARG_WITH(ldap-conf-file, [  --with-ldap-conf-file   path to LDAP configuration file],
[AC_DEFINE_UNQUOTED(_PATH_LDAP_CONF, "$with_ldap_conf_file", [Path to the ldap.conf file])])
AC_ARG_WITH(ldap-secret-file, [  --with-ldap-secret-file path to LDAP secret password file],
[AC_DEFINE_UNQUOTED(_PATH_LDAP_SECRET, "$with_ldap_secret_file", [Path to the ldap.secret file])])
d1014 10
d1140 1
a1140 1
                          set $HOME to target user in shell mode],
d1171 2
a1172 1
    yes)	AC_DEFINE(HAVE_SELINUX)
d1185 6
d1336 4
a1702 1
AC_CHECK_HEADERS([err.h], [], [AC_LIBOBJ(err)])
d1713 1
a1713 1
    AC_CHECK_HEADERS(login_cap.h, [LCMAN=""
d1729 2
a1730 1
AC_CHECK_TYPES([sig_atomic_t], , [AC_DEFINE(sig_atomic_t, int)], [#include <sys/types.h>
a1744 1
SUDO_FULL_VOID
a1783 1
AC_CHECK_FUNCS(lsearch, [], [AC_CHECK_LIB([compat], [lsearch], [AC_CHECK_HEADER([search.h], [AC_DEFINE(HAVE_LSEARCH)] [LIBS="${LIBS} -lcompat"], [AC_LIBOBJ(lsearch)], -)], [AC_LIBOBJ(lsearch)])])
a1841 7
dnl Bison and DCE use alloca(3), if not in libc, use the sudo one (from gcc)
dnl (gcc includes its own alloca(3) but other compilers may not)
dnl
if test "$with_DCE" = "yes" -o "$ac_cv_prog_YACC" = "bison -y"; then
    AC_FUNC_ALLOCA
fi
dnl
d1903 1
a1903 1
			    AC_DEFINE(NO_PAM_SESSION)
d1945 1
d2138 1
d2149 17
a2165 1
    AC_CHECK_FUNCS(krb5_verify_user krb5_init_secure_context)
d2352 1
d2388 2
a2389 1
    AC_CHECK_FUNCS(ldap_initialize ldap_start_tls_s ldapssl_init ldapssl_set_strength)
d2392 27
a2421 2
    # XXX - OpenLDAP has deprecated ldap_get_values()
    CPPFLAGS="${CPPFLAGS} -DLDAP_DEPRECATED"
d2481 1
a2481 2
dnl Defer setting _PATH_SUDO_NOEXEC and _PATH_SUDO_SESH
dnl until after exec_prefix is set
d2510 1
a2510 1
AC_CONFIG_FILES([Makefile sudo.man visudo.man sudoers.man])
d2552 1
d2559 4
d2602 1
@


1.33
log
@update to sudo 1.6.9p12
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.43 2008/01/21 16:46:50 millert Exp $
d36 4
d43 1
d117 4
d139 5
a143 1
test "$mandir" = '${prefix}/man' && mandir='$(prefix)/man'
d1130 14
d1190 1
d1413 1
a1413 1
    *-*-linux*)
d1664 1
a1664 1
    AC_CHECK_HEADERS(login_cap.h, [
d1712 1
a1712 1
	       setlocale getaddrinfo)
d1767 1
a1767 1
#include <$ac_header_dirent>]], [[DIR d; (void)dirfd(&d);]])], [AC_DEFINE(HAVE_DIRFD)], [AC_TRY_LINK([#include <sys/types.h>
d1870 7
a1876 2
		    AC_CHECK_FUNCS(dgettext, [],
			[AC_CHECK_LIB(intl, dgettext, [LIBS="${LIBS} -lintl"]
d1904 1
a1904 2
	[BSDAUTH_USAGE='[[-a auth_type]] ']
	[AUTH_EXCL=BSD_AUTH],
d2331 1
a2331 1
    SUDO_LIBS="${SUDO_LIBS}${LDAP_LIBS}"
d2395 2
a2396 1
dnl Defer setting _PATH_SUDO_NOEXEC until after exec_prefix is set
d2399 1
a2399 4
if test "$with_noexec" != "no"; then
    PROGS="${PROGS} sudo_noexec.la"
    INSTALL_NOEXEC="install-noexec"

d2408 11
a2418 2
    eval noexec_file="$with_noexec"
    AC_DEFINE_UNQUOTED(_PATH_SUDO_NOEXEC, "$noexec_file", [The fully qualified pathname of sudo_noexec.so])
d2479 1
@


1.32
log
@Update to sudo 1.6.9p11
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.36 2008/01/03 16:05:42 millert Exp $
d2277 2
a2278 1
	LDAP_LIBS=" -lldap"
d2283 7
a2289 1
    dnl try again w/o explicitly including lber.h
d2296 2
a2297 1
    AC_CHECK_FUNCS(ldap_initialize ldap_start_tls_s ldapssl_init)
@


1.31
log
@update to sudo 1.6.9p10
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.34 2007/12/19 19:29:29 millert Exp $
d1722 3
a1724 1
    AC_CHECK_MEMBER([struct stat.st_mtim], AC_DEFINE(HAVE_ST_MTIM), [AC_CHECK_MEMBER([struct stat.st_mtimespec], AC_DEFINE([HAVE_ST_MTIMESPEC]))])
d2436 1
d2477 7
a2483 2
# define mtim_getsec(_x)	((_x).st_mtim.tv_sec)
# define mtim_getnsec(_x)	(((_x).st_mtim.tv_nsec / 1000) * 1000)
@


1.30
log
@update to sudo 1.6.9p9
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.30 2007/12/02 00:35:20 millert Exp $
d912 1
a912 1
AC_ARG_WITH(ldap-secret-file, [  --with-ldap-secret-file path to LDAP secret pasdword file],
d2067 1
a2067 1
	
d2287 1
a2287 1
    AC_CHECK_FUNCS(ldap_initialize ldap_start_tls_s)
@


1.29
log
@Update to sudo 1.6.9p7
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.27 2007/10/24 16:43:25 millert Exp $
d27 1
d1681 1
d1838 7
d2407 1
@


1.28
log
@Update to sudo 1.6.9p6
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.24 2007/10/09 00:06:05 millert Exp $
d1635 6
a1640 1
    AC_CHECK_HEADERS(login_cap.h)
d1658 4
a1661 4
# include <time.h>
#else
# include <sys/time.h>
#endif])
a2067 10
dnl Some systems put login_cap(3) in libutil
dnl
if test ${with_logincap-'no'} = "yes"; then
    case "$OS" in
	freebsd|netbsd)	SUDO_LIBS="${SUDO_LIBS} -lutil"
	;;
    esac
fi

dnl
d2409 1
@


1.27
log
@fix a configure bug introduced in the last commit
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.23 2007/09/06 16:19:57 millert Exp $
d1818 13
@


1.26
log
@sync with re-rolled 1.6.9p5 tarball
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.22 2007/09/06 11:18:04 millert Exp $
a120 1
CHECKSIA=
@


1.25
log
@update to sudo 1.6.9p5
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.21 2007/09/05 22:16:57 millert Exp $
d121 1
a121 1
CHECKSIA=true
d1314 1
d1320 1
@


1.24
log
@Update to sudo 1.6.9p4.  Basically IPv6 support and improved man pages.
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.18 2007/08/15 13:48:51 millert Exp $
d111 5
a115 1
AUTH_OBJS=passwd.o
d141 1
a141 1
    yes)	AUTH_OBJS=`echo "$AUTH_OBJS"|sed -e 's/^passwd\.o *//'`
d258 4
a261 4
    yes)	;;
    no)		AUTH_OBJS=`echo "$AUTH_OBJS"|sed -e 's/^passwd\.o *//'`
		AC_MSG_CHECKING(whether to use shadow/passwd file authentication)
		AC_MSG_RESULT(no)
d271 1
a271 4
    *)		if test -n "$with_opie"; then
		    AC_MSG_ERROR(["cannot use both S/Key and OPIE"])
		fi
    		AC_DEFINE(HAVE_SKEY)
d274 1
a274 1
		SUDO_ADD_AUTH([S/Key], [rfc1938.o])
d282 1
a282 4
    *)		if test -n "$with_skey"; then
		    AC_MSG_ERROR(["cannot use both S/Key and OPIE"])
		fi
		AC_DEFINE(HAVE_OPIE)
d285 1
a285 1
		SUDO_ADD_AUTH([NRL OPIE], [rfc1938.o])
d308 1
a308 1
		# AUTH_OBJS updated later
d318 1
a318 1
		SUDO_ADD_AUTH([FWTK AuthSRV], [fwtk.o], [true])
d327 1
d336 1
d342 2
a343 1
    yes|no)	;;
d350 2
a351 1
    yes|no)	;;
d361 1
a361 1
		SUDO_ADD_AUTH([AFS], [afs.o])
d373 1
a373 1
		SUDO_ADD_AUTH([DCE], [dce.o])
d389 2
a390 1
    yes|no)	;;
a1139 1
dnl XXX - disable static, require shared
d1143 2
a1144 2
LT_PREREQ([1.9f])
LT_INIT([disable-static])
d1235 1
a1235 1
		: ${with_pam='maybe'}
d1258 1
a1258 1
		# check for authenticate(3)
d1260 1
a1260 1
		    AC_CHECK_FUNCS(authenticate, [with_aixauth=maybe])
d1306 1
a1306 1
			    : ${with_pam='maybe'}
d1316 1
a1316 1
		[  --disable-sia           Never use SIA on Digital UNIX],
d1338 9
a1346 11
		if test "$CHECKSIA" = "true"; then
		    AC_CHECK_FUNCS(sia_ses_init, [found=true], [found=false])
		    if test "$found" = "true"; then
			SUDO_ADD_AUTH([SIA], [sia.o], [true])
			CHECKSHADOW=false
		    fi
		fi
		if test "$CHECKSHADOW" = "true"; then
		    # prot.h is included when using shadow passwords
		    AC_MSG_CHECKING([for broken prot.h])
		    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
d1350 3
a1352 4
		    ]], [[exit(0);]])], [AC_MSG_RESULT(no)], [AC_MSG_RESULT([yes, fixing locally])
		    sed 's:<acl.h>:<sys/acl.h>:g' < /usr/include/prot.h > prot.h
		    ])
		fi
d1388 1
a1388 1
		: ${with_pam='maybe'}
d1469 1
a1469 1
		    AC_CHECK_FUNCS(auth_challenge, [with_bsdauth=maybe])
d1483 2
a1484 4
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
		: ${with_pam='maybe'}
d1491 1
a1491 3
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
d1498 1
a1498 1
			with_bsdauth=maybe
d1511 2
a1512 3
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
a1513 2
		dnl future versions of NetBSD (> 2.0) may include pam
		: ${with_pam='maybe'}
d1519 2
a1520 4
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
		: ${with_pam='yes'}
d1524 1
a1524 3
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
d1528 2
a1529 4
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
		: ${with_pam='yes'}
d1552 21
a1738 6
dnl if crypt(3) not in libc, look elsewhere
dnl
if test -z "$LIB_CRYPT" -a "$with_pam" != "yes"; then
    AC_CHECK_FUNC(crypt, , [AC_CHECK_LIB(crypt, crypt, [SUDO_LIBS="${SUDO_LIBS} -lcrypt"; LIBS="${LIBS} -lcrypt"], AC_CHECK_LIB(crypt_d, crypt, [SUDO_LIBS="${SUDO_LIBS} -lcrypt_d"; LIBS="${LIBS} -lcrypt_d"], AC_CHECK_LIB(ufc, crypt, [SUDO_LIBS="${SUDO_LIBS} -lufc"; LIBS="${LIBS} -lufc"])))])
fi
dnl
d1776 146
d1925 1
a1925 1
if test -n "$with_kerb4"; then
d1978 1
a1978 1
    SUDO_ADD_AUTH([Kerberos 4], [kerb4.o])
d1985 1
a1985 1
if test "$with_kerb5" = "yes"; then
d1989 1
a1989 1
	SUDO_ADD_AUTH([Kerberos 5], [kerb5.o])
d1999 1
a1999 1
	    ] , [
d2005 1
a2005 1
if test -n "$with_kerb5" -a -z "$KRB5CONFIG"; then
d2041 1
a2041 1
    SUDO_ADD_AUTH([Kerberos 5], [kerb5.o])
d2051 1
a2051 1
if test "$with_logincap" = "yes"; then
a2058 63
dnl PAM support.  Systems that might support PAM set with_pam=maybe
dnl and we do that actual tests here.
dnl
if test ${with_pam-'no'} != "no"; then
    dnl
    dnl Linux may need this
    dnl
    AC_CHECK_LIB([dl], [main], [SUDO_LIBS="${SUDO_LIBS} -lpam -ldl"], [SUDO_LIBS="${SUDO_LIBS} -lpam"])
    ac_cv_lib_dl=ac_cv_lib_dl_main

    dnl
    dnl Some PAM implementations (MacOS X for example) put the PAM headers
    dnl in /usr/include/pam instead of /usr/include/security...
    dnl
    AC_CHECK_HEADERS([security/pam_appl.h] [pam/pam_appl.h], [with_pam=yes; break])
    if test "$with_pam" = "yes"; then
	AC_DEFINE(HAVE_PAM)
	SUDO_ADD_AUTH([PAM], [pam.o], [true])
	CHECKSHADOW=false
    fi
fi

dnl
dnl Check for shadow password routines if we have not already done so.
dnl If there is a specific list of functions to check we do that first.
dnl Otherwise, we check for SVR4-style and then SecureWare-style.
dnl
if test "$CHECKSHADOW" = "true" -a -n "$shadow_funcs"; then
    _LIBS="$LIBS"
    LIBS="$LIBS $shadow_libs"
    found=no
    AC_CHECK_FUNCS($shadow_funcs, [found=yes])
    if test "$found" = "yes"; then
	SUDO_LIBS="$SUDO_LIBS $shadow_libs"
    elif test -n "$shadow_libs_optional"; then
	LIBS="$LIBS $shadow_libs_optional"
	AC_CHECK_FUNCS($shadow_funcs, [found=yes])
	if test "$found" = "yes"; then
	    SUDO_LIBS="$SUDO_LIBS $shadow_libs $shadow_libs_optional"
	fi
    fi
    if test "$found" = "yes"; then
	case "$shadow_funcs" in
	    *getprpwnam*) SECUREWARE=1;;
	esac
	test -n "$shadow_defs" && OSDEFS="${OSDEFS} $shadow_defs"
    else
	LIBS="$_LIBS"
    fi
    CHECKSHADOW=false
fi
if test "$CHECKSHADOW" = "true"; then
    AC_CHECK_FUNCS(getspnam, [CHECKSHADOW="false"], [AC_CHECK_LIB(gen, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lgen"; LIBS="${LIBS} -lgen"])])
fi
if test "$CHECKSHADOW" = "true"; then
    AC_CHECK_FUNC(getprpwnam, [AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1], AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"], AC_CHECK_LIB(security, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsecurity"; LIBS="${LIBS} -lsecurity"], AC_CHECK_LIB(prot, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lprot"; LIBS="${LIBS} -lprot"])))])
fi
if test -n "$SECUREWARE"; then
    AC_CHECK_FUNCS(bigcrypt set_auth_parameters initprivs)
    SUDO_ADD_AUTH([SecureWare], [secureware.o])
fi

dnl
d2061 1
a2061 1
if test "$with_AFS" = "yes"; then
d2101 2
d2109 1
a2109 1
if test "$with_DCE" = "yes"; then
d2112 1
d2118 1
a2118 1
if test -n "$with_skey"; then
d2146 1
d2152 1
a2152 1
if test -n "$with_opie"; then
d2179 1
d2183 3
a2185 1
dnl extra SecurID lib + includes
d2187 6
a2192 7
if test ${with_SecurID-'no'} != "no"; then
    if test "$with_SecurID" != "yes"; then
	:
    elif test -d /usr/ace/examples; then
	with_SecurID=/usr/ace/examples
    else
	with_SecurID=/usr/ace
a2193 23
    CPPFLAGS="${CPPFLAGS} -I${with_SecurID}"
    _LDFLAGS="${LDFLAGS}"
    SUDO_APPEND_LIBPATH(LDFLAGS, [${with_SecurID}])
    #
    # Determine whether to use the new or old SecurID API
    #
    AC_CHECK_LIB(aceclnt, SD_Init,
	[
	    SUDO_ADD_AUTH([SecurID 5], [securid5.o], true)
	    SUDO_LIBS="${SUDO_LIBS} -laceclnt -lpthread"
	]
	[
	    SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_SecurID}])
	], [
	    SUDO_ADD_AUTH([SecurID], [securid.o], true)
	    SUDO_LIBS="${SUDO_LIBS} ${with_SecurID}/sdiclient.a"
	],
	[
	    -lpthread
	]
    )
    LDFLAGS="${_LDFLAGS}"
fi
d2195 26
a2220 8
dnl
dnl extra FWTK libs + includes
dnl
if test -n "$with_fwtk"; then
    if test "$with_fwtk" != "yes"; then
	SUDO_APPEND_LIBPATH(SUDO_LDFLAGS, [${with_fwtk}])
	CPPFLAGS="${CPPFLAGS} -I${with_fwtk}"
	with_fwtk=yes
d2222 2
a2223 13
    SUDO_LIBS="${SUDO_LIBS} -lauth -lfwall"
fi

dnl
dnl AIX general authentication
dnl If set to "maybe" only enable if no other exclusive method in use.
dnl
if test ${with_aixauth-'no'} != "no"; then
    if test X"$with_aixauth" != X"maybe" -o X"$AUTH_EXCL" = X""; then
	AC_MSG_NOTICE([using AIX general authentication])
	AC_DEFINE(HAVE_AIXAUTH)
	SUDO_ADD_AUTH([AIX general authentication], [aix_auth.o], [true])
	SUDO_LIBS="${SUDO_LIBS} -ls"
d2225 3
a2227 10
fi

dnl
dnl BSD authentication
dnl If set to "maybe" only enable if no other exclusive method in use.
dnl
if test ${with_bsdauth-'no'} != "no"; then
    if test X"$with_bsdauth" != X"maybe" -o X"$AUTH_EXCL" = X""; then
	AC_CHECK_HEADER(bsd_auth.h, AC_DEFINE(HAVE_BSD_AUTH_H)
	    [SUDO_ADD_AUTH([BSD authentication], [bsdauth.o], [true])], -)
d2234 1
a2234 1
if test -n "$with_ldap"; then
d2299 3
a2301 2
case "$AUTH_OBJS" in
*passwd.o*)
d2310 1
@


1.23
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.413.2.15 2007/07/22 22:43:50 millert Exp $
d1150 1
a1150 1
    eval _shrext="$shrext"
d1669 1
a1669 1
	       setlocale)
d1723 1
a1723 1
#include <$ac_header_dirent>], [DIR d; (void)&d.dd_fd;], [AC_DEFINE(HAVE_DD_FD)])])
@


1.22
log
@update to sudo 1.6.8p5
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.420 2004/09/08 15:49:25 millert Exp $
d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT(sudo, 1.6.8)
d10 1
a10 1
dnl This won't work before AC_INIT()
d12 1
a12 1
AC_MSG_NOTICE([Configuring Sudo version 1.6.8])
d17 17
a33 17
AC_SUBST(CFLAGS)dnl
AC_SUBST(PROGS)dnl
AC_SUBST(CPPFLAGS)dnl
AC_SUBST(LDFLAGS)dnl
AC_SUBST(SUDO_LDFLAGS)dnl
AC_SUBST(SUDO_OBJS)dnl
AC_SUBST(LIBS)dnl
AC_SUBST(SUDO_LIBS)dnl
AC_SUBST(NET_LIBS)dnl
AC_SUBST(AFS_LIBS)dnl
AC_SUBST(OSDEFS)dnl
AC_SUBST(AUTH_OBJS)dnl
AC_SUBST(MANTYPE)dnl
AC_SUBST(MAN_POSTINSTALL)dnl
AC_SUBST(SUDOERS_MODE)dnl
AC_SUBST(SUDOERS_UID)dnl
AC_SUBST(SUDOERS_GID)dnl
d41 1
d70 1
d98 1
d105 5
a109 5
test -n "$MANTYPE" || MANTYPE="man"
test -n "$mansrcdir" || mansrcdir="."
test -n "$SUDOERS_MODE" || SUDOERS_MODE=0440
test -n "$SUDOERS_UID" || SUDOERS_UID=0
test -n "$SUDOERS_GID" || SUDOERS_GID=0
d111 1
d118 4
d137 1
a137 2
    yes)	with_passwd=no
		AC_DEFINE(WITHOUT_PASSWD)
d165 1
a165 2
    yes)	;;
    no)		;;
d170 1
a170 1
AC_ARG_WITH(blibpath, [  --with-blibpath[=PATH]  pass -blibpath flag to ld for additional lib paths],
d172 1
a172 2
    yes)	;;
    no)		;;
d244 2
a245 2
		test -n "$mansectsu" || mansectsu=8
		test -n "$mansectform" || mansectform=5
d255 1
a255 1
    no)		AC_DEFINE(WITHOUT_PASSWD)
d263 1
a263 1
AC_ARG_WITH(skey, [  --with-skey[=DIR]       enable S/Key support ],
d265 2
a266 1
    no)		with_skey="";;
d273 1
a273 1
		AUTH_OBJS="${AUTH_OBJS} rfc1938.o"
d277 1
a277 1
AC_ARG_WITH(opie, [  --with-opie[=DIR]       enable OPIE support ],
d279 2
a280 1
    no)		with_opie="";;
d287 1
a287 1
		AUTH_OBJS="${AUTH_OBJS} rfc1938.o"
d310 1
a310 1
		with_passwd=no
d320 1
a320 2
		with_passwd=no
		AUTH_OBJS="fwtk.o"
d340 4
a343 10
AC_ARG_WITH(authenticate, [  --with-authenticate     enable AIX general authentication support],
[case $with_authenticate in
    yes)	AC_DEFINE(HAVE_AUTHENTICATE)
		AC_MSG_CHECKING(whether to use AIX general authentication)
		AC_MSG_RESULT(yes)
		with_passwd=no
		AUTH_OBJS="aix_auth.o"
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-authenticate does not take an argument."])
d349 1
a349 7
    yes)	AC_DEFINE(HAVE_PAM)
		AC_MSG_CHECKING(whether to use PAM authentication)
		AC_MSG_RESULT(yes)
		with_passwd=no
		AUTH_OBJS="pam.o"
		;;
    no)		;;
d359 1
a359 1
		AUTH_OBJS="${AUTH_OBJS} afs.o"
d371 1
a371 1
		AUTH_OBJS="${AUTH_OBJS} dce.o"
d387 2
a388 1
    yes)	with_logincap=yes
d390 7
a396 2
    no)		;;
    *)		AC_MSG_ERROR(["--with-bsdauth does not take an argument."])
a814 11
AC_ARG_WITH(execv, [  --with-execv            use execv() instead of execvp()],
[case $with_execv in
    yes)	AC_MSG_CHECKING(whether to use execvp or execv)
		AC_MSG_RESULT(execv)
		AC_DEFINE(USE_EXECV)
		;;
    no)		;;
    *)		AC_MSG_ERROR(["--with-execv does not take an argument."])
		;;
esac])

d899 1
a899 1
AC_ARG_WITH(ldap, [  --with-ldap[[=DIR]]     enable LDAP support],
d909 2
d1014 1
a1014 1
[  --disable-setresuid      Don't try to use the setresuid() function],
a1021 15
AC_MSG_CHECKING(whether to disable use of POSIX saved ids)
AC_ARG_ENABLE(saved-ids,
[  --disable-saved-ids     Don't try to use POSIX saved ids],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(no)
		;;
    no)		AC_MSG_RESULT(yes)
		AC_DEFINE(NO_SAVED_IDS)
		;;
    *)		AC_MSG_RESULT(no)
    		AC_MSG_WARN([Ignoring unknown argument to --enable-saved-ids: $enableval])
		;;
  esac
], AC_MSG_RESULT(no))

d1106 1
d1117 1
a1117 1
AC_CHECK_PROG(EGREPPROG, egrep, egrep, )
a1132 1
AC_PROG_CC_STDC
d1137 1
d1140 3
a1142 4
AC_CANONICAL_SYSTEM
AC_ENABLE_SHARED
AC_DISABLE_STATIC
AC_PROG_LIBTOOL
d1153 1
a1153 1
AC_ARG_WITH(noexec, [  --with-noexec[=PATH]    fully qualified pathname of sudo_noexec.so],
d1173 3
a1175 3
AC_CHECK_PROG(UNAMEPROG, uname, uname, )
AC_CHECK_PROG(TRPROG, tr, tr, )
AC_CHECK_PROG(NROFFPROG, nroff, nroff, )
d1203 2
a1204 1
    OSREV=`echo $host_os | sed 's/^[[^0-9]]*\([[0-9]][[0-9]]*\).*$/\1/'`
d1208 1
d1218 1
a1218 1
		    CPPFLAGS="${CPPFLAGS} -D__USE_FIXED_PROTOTYPES__"
d1221 1
a1221 5
		# check for password adjunct functions (shadow passwords)
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_FUNCS(getpwanam issecure, , [break])
		    CHECKSHADOW="false"
		fi
d1225 1
a1225 1
		CPPFLAGS="${CPPFLAGS} -D__EXTENSIONS__"
d1230 4
a1233 3
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		test -n "$with_rpath" || with_rpath=yes
d1237 1
a1237 2
		CPPFLAGS="${CPPFLAGS} -D_XOPEN_EXTENDED_SOURCE"
		SUDO_DEFINE(_ALL_SOURCE)
d1242 2
a1243 2
		    LDFLAGS="$LDFLAGS -Wl,-blibpath:/usr/lib:/lib"
		    AC_TRY_LINK([], [], [
d1255 5
d1262 2
a1263 6
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"; SECUREWARE=1], AC_CHECK_LIB(security, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [SUDO_LIBS="${SUDO_LIBS} -lsecurity"; LIBS="${LIBS} -lsecurity"; SECUREWARE=1]))
		    CHECKSHADOW="false"
		fi
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1270 2
a1271 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1287 1
a1287 4
			    if test "$CHECKSHADOW" = "true"; then
				AC_CHECK_FUNCS(getspwuid)
				CHECKSHADOW="false"
			    fi
d1298 2
a1299 4
			    if test "$CHECKSHADOW" = "true"; then
				AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) AC_CHECK_LIB(sec, iscomsec, AC_DEFINE(HAVE_ISCOMSEC)) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"; SECUREWARE=1])
				CHECKSHADOW="false"
			    fi
d1302 3
a1304 4
			if test "$CHECKSHADOW" = "true"; then
			    AC_CHECK_LIB(sec, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"])
			    CHECKSHADOW="false"
			fi
d1327 9
a1335 2
		# use SIA by default, if we have it, else SecureWare
		# unless overridden on the command line
d1337 5
a1341 4
		    AC_CHECK_FUNC(sia_ses_init, [AC_DEFINE(HAVE_SIA)] [
		    if test -n "$with_skey" -o -n "$with_opie" -o -n "$with_otp_only" -o -n "$with_long_otp_prompt" -o -n "$with_SecurID" -o -n "$with_fwtk" -o -n "$with_kerb4" -o -n "$with_kerb5" -o -n "$with_pam" -o -n "$with_AFS" -o -n "$with_DCE"; then
			AC_MSG_ERROR(["you cannot mix SIA and other authentication schemes.  You can turn off SIA support via the --disable-sia option"])
		    fi]; CHECKSHADOW=false)
d1344 3
a1346 14
		    AC_CHECK_LIB(security, getprpwnam, SECUREWARE=1)
		    CHECKSHADOW="false"
		fi

		if test -n "$SECUREWARE"; then
		    AC_DEFINE(HAVE_GETPRPWNAM)
		    # -ldb includes bogus versions of snprintf/vsnprintf
		    AC_CHECK_FUNCS(snprintf, , [NEED_SNPRINTF=1])
		    AC_CHECK_FUNCS(vsnprintf, , [NEED_SNPRINTF=1])
		    # 4.x and higher need -ldb too...
		    AC_CHECK_LIB(db, dbopen, [SUDO_LIBS="${SUDO_LIBS} -lsecurity -ldb -laud -lm"; LIBS="${LIBS} -lsecurity -ldb -laud -lm"], [SUDO_LIBS="${SUDO_LIBS} -lsecurity -ldb -laud -lm"; LIBS="${LIBS} -lsecurity -ldb -laud -lm"])
		    AC_CHECK_FUNCS(dispcrypt)
		    AC_MSG_CHECKING([for broken /usr/include/prot.h])
		    AC_TRY_COMPILE([
d1350 1
a1350 2
		    ], [exit(0);], AC_MSG_RESULT(no),
		    [AC_MSG_RESULT([yes, fixing locally])
a1352 3
		elif test "$CHECKSIA" = "true"; then
		    with_passwd=no
		    AUTH_OBJS="sia.o"
d1354 2
a1355 2
		test -n "$mansectsu" || mansectsu=8
		test -n "$mansectform" || mansectform=4
d1358 1
a1358 1
		CPPFLAGS="${CPPFLAGS} -D_BSD_TYPES"
d1378 1
a1378 1
		if test "$OSREV" -le 4; then
d1381 2
a1382 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1385 1
d1387 3
a1389 4
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_FUNCS(getspnam, , [AC_CHECK_LIB(shadow, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lshadow"; LIBS="${LIBS} -lshadow"])])
		    CHECKSHADOW="false"
		fi
d1392 1
a1392 1
		SUDO_DEFINE(_CONVEX_SOURCE)
d1397 3
a1399 4
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [SUDO_LIBS="${SUDO_LIBS} -lprot"; LIBS="${LIBS} -lprot"; OSDEFS="${OSDEFS} -D_AUDIT -D_ACL -DSecureWare"; SECUREWARE=1])
		    CHECKSHADOW="false"
		fi
d1403 2
a1404 4
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_LIB(auth, getauthuid, AC_DEFINE(HAVE_GETAUTHUID) [SUDO_LIBS="${SUDO_LIBS} -lauth"; LIBS="${LIBS} -lauth"])
		    CHECKSHADOW="false"
		fi
d1410 2
a1411 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1419 5
a1423 6
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_LIB(sec, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"])
		    CHECKSHADOW="false"
		fi
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1426 4
a1429 7
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_LIB(prot, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [SUDO_LIBS="${SUDO_LIBS} -lprot -lx"; LIBS="${LIBS} -lprot -lx"; SECUREWARE=1], , -lx)
		    AC_CHECK_LIB(gen, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lgen"; LIBS="${LIBS} -lgen"])
		    CHECKSHADOW="false"
		fi
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1434 2
a1435 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1438 5
a1442 7
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_LIB(sec, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"])
		    CHECKSHADOW="false"
		fi
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		test -n "$with_rpath" || with_rpath=yes
d1446 3
a1448 3
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		test -n "$with_rpath" || with_rpath=yes
d1453 3
a1455 3
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		test -n "$with_rpath" || with_rpath=yes
d1461 1
a1461 1
		    case "$OSREV" in
d1468 4
d1476 1
a1476 1
		case "`echo $host_os | sed 's/^freebsd\([[0-9\.]]*\).*$/\1/'`" in
a1480 3
		if test "$with_logincap" = "yes"; then
		    SUDO_LIBS="${SUDO_LIBS} -lutil"
		fi
d1487 2
d1491 2
d1497 11
d1511 1
a1511 1
		case "`echo $host_os | sed 's/^netbsd\([[0-9\.]]*\).*$/\1/'`" in
d1519 13
d1543 2
d1552 3
a1554 3
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		test -n "$with_rpath" || with_rpath=yes
d1557 5
a1561 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1568 2
a1569 2
test -n "$mansectsu" || mansectsu=8
test -n "$mansectform" || mansectform=5
a1591 11
dnl Check for shadow password routines if we have not already done so.
dnl We check for SVR4-style first and then SecureWare-style.
dnl
if test "$CHECKSHADOW" = "true"; then
    AC_CHECK_FUNCS(getspnam, [CHECKSHADOW="false"], [AC_CHECK_LIB(gen, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lgen"; LIBS="${LIBS} -lgen"])])
fi
if test "$CHECKSHADOW" = "true"; then
    AC_CHECK_FUNC(getprpwnam, [AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1], AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"], AC_CHECK_LIB(security, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsecurity"; LIBS="${LIBS} -lsecurity"], AC_CHECK_LIB(prot, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lprot"; LIBS="${LIBS} -lprot"])))])
fi

dnl
d1614 1
d1616 1
a1616 1
AC_CHECK_HEADERS(err.h, , [AC_LIBOBJ(err)])
d1626 1
a1626 1
if test "$with_logincap" = "yes"; then
d1629 3
a1631 2
if test "$with_bsdauth" = "yes"; then
    AC_CHECK_HEADER(bsd_auth.h, AC_DEFINE(HAVE_BSD_AUTH_H) [with_passwd=no; AUTH_OBJS=bsdauth.o], -)
d1640 1
a1640 1
AC_CHECK_TYPES([sigaction_t], [AC_DEFINE(HAVE_SIGACTION_T)], ,[#include <sys/types.h>
d1642 7
a1648 3
AC_CHECK_TYPE([struct timespec], [AC_DEFINE(HAVE_TIMESPEC)], , [#include <sys/types.h>
#include <sys/time.h>
#include <time.h>])
d1655 1
a1655 1
SUDO_LONG_LONG
d1668 2
a1669 2
	       strftime setrlimit initgroups fstat gettimeofday)
AC_CHECK_FUNCS(seteuid, , [AC_DEFINE(NO_SAVED_IDS)])
d1674 4
a1677 1
    AC_CHECK_FUNCS(setreuid)
a1681 3
if test -n "$SECUREWARE"; then
    AC_CHECK_FUNCS(bigcrypt set_auth_parameters initprivs)
fi
d1685 4
d1692 1
a1692 1
AC_CHECK_FUNCS(lsearch, , [AC_CHECK_LIB(compat, lsearch, AC_CHECK_HEADER(search.h, AC_DEFINE(HAVE_LSEARCH) [LIBS="${LIBS} -lcompat"], AC_LIBOBJ(lsearch), -), AC_LIBOBJ(lsearch))])
d1694 1
a1694 1
SUDO_FUNC_FNMATCH(AC_DEFINE(HAVE_FNMATCH), AC_LIBOBJ(fnmatch))
d1696 9
a1704 1
AC_REPLACE_FUNCS(strerror strcasecmp sigaction strlcpy strlcat closefrom)
d1709 2
a1710 2
    AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/time.h>], [struct timespec ts1, ts2;
d1715 2
a1716 3
timespecsub(&ts1, &ts2);],
	[AC_DEFINE(HAVE_TIMESPECSUB2)
	AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no)])
d1721 3
a1723 3
AC_TRY_LINK([#include <sys/types.h>
#include <$ac_header_dirent>], [DIR d; (void)dirfd(&d);], [AC_DEFINE(HAVE_DIRFD)], [AC_TRY_LINK([#include <sys/types.h>
#include <$ac_header_dirent>], [DIR d; (void)&d.dd_fd;], [AC_DEFINE(HAVE_DD_FD)], [])])
d1767 1
a1767 2
    AC_TRY_LINK(, [extern char *__progname; (void)puts(__progname);],
    [sudo_cv___progname=yes], [sudo_cv___progname=no])])
d1789 1
a1789 1
	    AC_PREPROC_IFELSE([#include <krb.h>], [found=yes; break], )
d1812 1
a1812 2
    AC_TRY_COMPILE([#include <krb.h>], [const char *tmp = krb4_version;],
	[
d1831 1
a1831 1
    AUTH_OBJS="${AUTH_OBJS} kerb4.o"
d1842 1
a1842 1
	AUTH_OBJS="${AUTH_OBJS} kerb5.o"
d1849 1
a1849 2
	AC_TRY_COMPILE([#include <krb5.h>], [const char *tmp = heimdal_version;],
	    [
d1852 2
d1868 1
a1868 1
	    AC_PREPROC_IFELSE([#include <krb5.h>], [found=yes; break], )
d1884 1
a1884 2
    AC_TRY_COMPILE([#include <krb5.h>], [const char *tmp = heimdal_version;],
	[
d1887 1
a1887 1
	    SUDO_LIBS="${SUDO_LIBS} -lkrb5 -ldes -lcom_err -lasn1"
d1892 17
a1908 3
	]
    )
    AUTH_OBJS="${AUTH_OBJS} kerb5.o"
d1912 2
a1913 1
dnl Extra PAM foolishness
d1915 1
a1915 1
if test "$with_pam" = "yes"; then
d1919 3
a1921 1
    AC_HAVE_LIBRARY(dl, SUDO_LIBS="${SUDO_LIBS} -lpam -ldl", SUDO_LIBS="${SUDO_LIBS} -lpam")
d1926 46
a1971 1
    AC_CHECK_HEADERS([pam/pam_appl.h])
d2043 1
a2043 1
	    AC_PREPROC_IFELSE([#include <skey.h>], [found=yes; break], )
d2076 1
a2076 1
	    AC_PREPROC_IFELSE([#include <opie.h>], [found=yes; break], )
d2096 1
a2096 1
if test -n "$with_SecurID" -a "$with_SecurID" != "no"; then
d2112 1
a2112 1
	    AUTH_OBJS="securid5.o"
d2118 1
a2118 1
	    AUTH_OBJS="securid.o"
d2141 2
a2142 1
dnl extra 'authenticate' lib (AIX only?)
d2144 18
a2161 2
if test "$with_authenticate" = "yes"; then
    SUDO_LIBS="${SUDO_LIBS} -ls"
d2168 1
a2170 1
	_LDFLAGS="$LDFLAGS"
d2184 1
a2184 1
	AC_TRY_LINK([#include <sys/types.h>
d2186 1
a2186 1
	#include <ldap.h>], [(void)ldap_init(0, 0)], [found=yes; break], [])
d2188 1
a2188 1
    dnl if nothing linked just try with -ldap
d2190 2
a2191 2
	LDAP_LIBS=" -ldap"
	AC_MSG_RESULT([not found, using -ldap])
d2197 2
a2198 2
    AC_TRY_LINK([#include <sys/types.h>
    #include <ldap.h>], [(void)ldap_init(0, 0)], [AC_MSG_RESULT([no])], [
d2207 2
d2232 4
a2235 1
if test "$with_passwd" = "no"; then
d2240 4
a2243 7
else
    if test -n "$SECUREWARE"; then
	AUTH_OBJS="${AUTH_OBJS} passwd.o secureware.o"
    else
	AUTH_OBJS="${AUTH_OBJS} passwd.o"
    fi
fi
d2289 2
a2290 1
AC_OUTPUT([Makefile sudo.man visudo.man sudoers.man])
d2315 1
a2315 1
AH_TEMPLATE(HAVE_AUTHENTICATE, [Define to 1 if you use AIX general authentication.])
d2320 3
d2339 1
a2358 1
AH_TEMPLATE(NO_SAVED_IDS, [Define to avoid using POSIX saved ids.])
a2366 1
AH_TEMPLATE(USE_EXECV, [Define to 1 if you wish to use execv() instead of execvp() when running programs.])
a2370 1
AH_TEMPLATE(WITHOUT_PASSWD, [Define to avoid using the passwd/shadow file for authentication.])
a2375 18
AH_VERBATIM([_GNU_SOURCE],
[/* Enable GNU extensions on systems that have them. */
#ifndef _GNU_SOURCE
# define _GNU_SOURCE	1
#endif])

AH_VERBATIM([_ALL_SOURCE],
[/* Enable non-POSIX extensions on AIX. */
#ifndef _ALL_SOURCE
# undef _ALL_SOURCE
#endif])

AH_VERBATIM([_CONVEX_SOURCE],
[/* Enable non-POSIX extensions on ConvexOS. */
#ifndef _CONVEX_SOURCE
# undef _CONVEX_SOURCE
#endif])

d2381 2
d2386 1
a2386 1
# define mtim_getnsec(_x)	((_x).st_mtim.tv_nsec)
d2390 1
a2390 1
#  define mtim_getnsec(_x)	((_x).st_mtimespec.tv_nsec)
a2413 6

#ifdef USE_EXECV
# define EXECV	execv
#else
# define EXECV	execvp
#endif /* USE_EXECV */
@


1.21
log
@Update to sudo 1.6.8p1
@
text
@d1686 1
a1686 1
	       strftime setrlimit initgroups fstat)
d1712 13
a1724 1
AC_CHECK_FUNCS(getttimeofday, [AC_CHECK_MEMBER([struct stat.st_mtim], AC_DEFINE(HAVE_ST_MTIM), [AC_CHECK_MEMBER([struct stat.st_mtimespec], AC_DEFINE([HAVE_ST_MTIMESPEC]))])])
d2272 1
@


1.20
log
@Use closefrom() if it exists; from the sudo cvs repo
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.383 2003/04/13 19:48:15 millert Exp $
d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-2003 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT(sudo, 1.6.7p5)
d12 1
a12 1
AC_MSG_NOTICE([Configuring Sudo version 1.6.7p5])
d16 1
d22 1
d38 3
d68 1
d77 1
a77 1
lecture=on
d95 2
d130 1
a130 1
		AC_DEFINE(WITHOUT_PASSWD, 1, [Define to avoid using the passwd/shadow file for authentication.])
d173 1
a173 1
[case $with_incpath in  
d186 1
a186 1
[case $with_libpath in  
d196 1
a196 1
[case $with_libraries in  
d206 1
a206 1
[case $with_devel in  
d218 1
a218 1
[case $with_efence in  
d231 1
a231 1
[case $with_csops in  
d264 1
a264 1
    		AC_DEFINE(HAVE_SKEY, 1, [Define if you use S/Key.])
d277 1
a277 1
		AC_DEFINE(HAVE_OPIE, 1, [Define if you use NRL OPIE.])
d286 1
a286 1
    yes)	AC_DEFINE(LONG_OTP_PROMPT, 1, [Define if you want a two line OTP (S/Key or OPIE) prompt.])
d300 1
a300 1
    *)		AC_DEFINE(HAVE_SECURID, 1, [Define if you use SecurID.])
d310 1
a310 1
    *)		AC_DEFINE(HAVE_FWTK, 1, [Define if you use the FWTK authsrv daemon.])
d336 1
a336 1
    yes)	AC_DEFINE(HAVE_AUTHENTICATE, 1, [Define if you use AIX general authentication.])
d349 1
a349 1
    yes)	AC_DEFINE(HAVE_PAM, 1, [Define if you use PAM.])
d362 1
a362 1
    yes)	AC_DEFINE(HAVE_AFS, 1, [Define if you use AFS.])
d374 1
a374 1
    yes)	AC_DEFINE(HAVE_DCE, 1, [Define if you use OSF DCE.])
d402 2
a403 2
[case $with_lecture in  
    yes|short)	lecture=on
d405 1
a405 1
    no|none)	lecture=off
d410 1
a410 1
if test "$lecture" = "on"; then
d413 1
a413 1
    AC_DEFINE(NO_LECTURE, 1, [Define if you don't want users to get the lecture the first they user sudo.])
d419 1
a419 1
[case $with_logging in  
d424 1
a424 1
    syslog)	AC_DEFINE(LOGGING, SLOG_SYSLOG, [Define to SLOG_SYSLOG, SLOG_FILE, or SLOG_BOTH.])
d439 1
a439 1
[case $with_logfac in  
d454 1
a454 1
[case $with_goodpri in  
d470 1
a470 1
[case $with_badpri in  
d485 1
a485 1
[case $with_logpath in  
d494 1
a494 1
[case $with_loglen in  
d509 1
a509 1
[case $with_ignore_dot in  
d518 1
a518 1
    AC_DEFINE(IGNORE_DOT_PATH, 1, [Define if you want to ignore '.' and empty \$PATH elements])
d526 1
a526 1
[case $with_mail_if_no_user in  
d535 1
a535 1
    AC_DEFINE(SEND_MAIL_WHEN_NO_USER, 1, [Define to send mail when the user is not in the sudoers file.])
d543 1
a543 1
[case $with_mail_if_no_host in  
d552 1
a552 1
    AC_DEFINE(SEND_MAIL_WHEN_NO_HOST, 1, [Define to send mail when the user is not allowed to run sudo on this host.])
d560 1
a560 1
[case $with_mail_if_noperms in  
d569 1
a569 1
    AC_DEFINE(SEND_MAIL_WHEN_NOT_OK, 1, [Define to send mail when the user is not allowed to run a command.])
d577 1
a577 1
[case $with_mailto in  
d589 1
a589 1
[case $with_mailsubject in  
d603 1
a603 1
[case $with_passprompt in  
d615 1
a615 1
[case $with_badpass_message in  
d628 1
a628 1
[case $with_fqdn in  
d637 1
a637 1
    AC_DEFINE(FQDN, 1, [Define if you want to require fully qualified hosts in sudoers.])
d644 1
a644 1
[case $with_timedir in  
d653 1
a653 1
[case $with_sendmail in  
d662 1
a662 1
[case $with_sudoers_mode in  
d676 1
a676 1
[case $with_sudoers_uid in  
d688 1
a688 1
[case $with_sudoers_gid in  
d702 1
a702 1
[case $with_umask in  
d721 1
a721 1
[case $with_runas_default in  
d733 1
a733 1
[case $with_exempt in  
d746 1
a746 1
[case $with_editor in  
d758 1
a758 1
[case $with_env_editor in  
d767 1
a767 1
    AC_DEFINE(ENV_EDITOR, 1, [Define if you want visudo to honor the EDITOR and VISUAL env variables.])
d775 1
a775 1
[case $with_passwd_tries in  
d789 1
a789 1
[case $with_timeout in  
d803 1
a803 1
[case $with_password_timeout in  
d816 1
a816 1
[case $with_execv in  
d819 1
a819 1
		AC_DEFINE(USE_EXECV, 1, [Define if you wish to use execv() instead of execvp() when running programs.])
d828 1
a828 1
[case $with_tty_tickets in  
d837 1
a837 1
    AC_DEFINE(USE_TTY_TICKETS, 1, [Define if you want a different ticket file for each tty.])
d845 1
a845 1
[case $with_insults in  
d856 1
a856 1
    AC_DEFINE(USE_INSULTS, 1, [Define if you want to insult the user for entering an incorrect password.])
d863 1
a863 1
[case $with_all_insults in  
d875 2
a876 2
[case $with_classic_insults in  
    yes)	AC_DEFINE(CLASSIC_INSULTS, 1, [Define if you want the insults from the "classic" version sudo.])
d884 2
a885 2
[case $with_csops_insults in  
    yes)	AC_DEFINE(CSOPS_INSULTS, 1, [Define if you want insults culled from the twisted minds of CSOps.])
d893 2
a894 2
[case $with_hal_insults in  
    yes)	AC_DEFINE(HAL_INSULTS, 1, [Define if you want 2001-like insults.])
d902 2
a903 2
[case $with_goons_insults in  
    yes)	AC_DEFINE(GOONS_INSULTS, 1, [Define if you want insults from the "Goon Show".])
d910 20
d943 2
a944 2
[case $with_secure_path in  
    yes)	AC_DEFINE_UNQUOTED(SECURE_PATH, "/bin:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc", [Define to override the user's path with a built-in one.])
d956 1
a956 1
[case $with_interfaces in  
d959 1
a959 1
    no)		AC_DEFINE(STUB_LOAD_INTERFACES, 1, [Define if the code in interfaces.c does not compile for you.])
d970 1
a970 1
		AC_DEFINE(USE_STOW, 1, [Define if you use stow packaging.])
d990 1
a990 1
		AC_DEFINE(NO_AUTHENTICATION, 1, [Define if you don't want sudo to prompt for a password by default.])
d1005 1
a1005 1
		AC_DEFINE(NO_ROOT_MAILER, 1, [Define to avoid runing the mailer as root.])
d1038 1
a1038 1
		AC_DEFINE(NO_SAVED_IDS, 1, [Define to avoid using POSIX saved ids.])
d1064 1
a1064 1
[ case "$enableval" in  
d1067 1
a1067 1
    no)		AC_DEFINE(NO_ROOT_SUDO, 1, [Define if root should not be allowed to use sudo.])
d1069 1
d1081 1
a1081 1
		AC_DEFINE(HOST_IN_LOG, 1, [Define if you want the hostname to be entered into the log file.])
d1096 1
a1096 1
		AC_DEFINE(SHELL_IF_NO_ARGS, 1, [Define if you want sudo to start a shell if given no arguments.])
d1112 1
a1112 1
		AC_DEFINE(SHELL_SETS_HOME, 1, [Define if you want sudo to set $HOME in shell mode.])
d1129 1
a1129 1
		AC_DEFINE(DONT_LEAK_PATH_INFO, 1, [Define if you want sudo to display "command not allowed" instead of "command not found" when a command cannot be found.])
a1153 1
dnl XXX - the cross-compiler check gets false positives so we override it
a1155 2
ac_cv_prog_cc_cross="no"
cross_compiling="no"
a1156 2
ac_cv_prog_cc_cross="no"
cross_compiling="no"
d1160 28
a1198 1
AC_CHECK_PROG(SEDPROG, sed, sed, )
a1208 1
AC_CANONICAL_HOST
a1245 2
		    AH_TEMPLATE([HAVE_GETPWANAM], [Define if you have the `getpwanam' function. (SunOS 4.x shadow passwords)])
		    AH_TEMPLATE([HAVE_ISSECURE], [Define if you have the `issecure' function. (SunOS 4.x check for shadow enabled)])
d1290 1
a1290 6
    *-*-hpux1[[0-9]]*)
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) AC_CHECK_LIB(sec, iscomsec, AC_DEFINE(HAVE_ISCOMSEC, 1, [Define if you have the `iscomsec' function. (HP-UX >= 10.x check for shadow enabled)])) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"; SECUREWARE=1])
		    CHECKSHADOW="false"
		fi

a1296 3
		;;
    *-*-hpux9*)
		AC_DEFINE(BROKEN_SYSLOG, 1, [Define if the `syslog' function returns a non-zero int to denote failure.])
d1298 40
a1337 37
		if test "$CHECKSHADOW" = "true"; then
		    AC_CHECK_FUNCS(getspwuid)
		    AH_TEMPLATE([HAVE_GETSPWUID], [Define if you have the `getspwuid' function. (HP-UX <= 9.X shadow passwords)])
		    CHECKSHADOW="false"
		fi

		# DCE support (requires ANSI C compiler)
		if test "$with_DCE" = "yes"; then
		    # order of libs in 9.X is important. -lc_r must be last
		    SUDO_LIBS="${SUDO_LIBS} -ldce -lM -lc_r"
		    LIBS="${LIBS} -ldce -lM -lc_r"
		    CPPFLAGS="${CPPFLAGS} -D_REENTRANT -I/usr/include/reentrant"
		fi

		# AFS support needs -lBSD
		if test "$with_AFS" = "yes"; then
		    AFS_LIBS="-lc -lBSD"
		fi
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		;;
    *-*-hpux*)
		AC_DEFINE(BROKEN_SYSLOG)

		# Not sure if setuid binaries are safe in < 9.x
		if test -n "$GCC"; then
		    SUDO_LDFLAGS="${SUDO_LDFLAGS} -static"
		else
		    SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-a,archive"
		fi

		# AFS support needs -lBSD
		if test "$with_AFS" = "yes"; then
		    AFS_LIBS="-lc -lBSD"
		fi
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1361 1
a1361 1
		    AC_CHECK_FUNC(sia_ses_init, [AC_DEFINE(HAVE_SIA, 1, [Define if you use SIA.])] [
d1372 1
a1372 1
		    AC_DEFINE(HAVE_GETPRPWNAM, 1, [Define if you have the `getprpwnam' function.  (SecureWare-style shadow passwords)])
d1443 1
a1443 1
		    AC_CHECK_LIB(auth, getauthuid, AC_DEFINE(HAVE_GETAUTHUID, 1, [Define if you have the `getauthuid' function.  (ULTRIX 4.x shadow passwords)]) [SUDO_LIBS="${SUDO_LIBS} -lauth"; LIBS="${LIBS} -lauth"])
d1609 1
a1609 1
    AC_CHECK_FUNCS(getspnam, [CHECKSHADOW="false"], [AC_CHECK_LIB(gen, getspnam, AC_DEFINE(HAVE_GETSPNAM, 1, [Define if you have the `getspnam' function (SVR4-style shadow passwords)]) [SUDO_LIBS="${SUDO_LIBS} -lgen"; LIBS="${LIBS} -lgen"])])
d1644 1
a1644 1
	AC_DEFINE(HAVE_TERMIOS_H, 1, [Define if you have the <termios.h> header file and the `tcgetattr' function.])
d1653 1
a1653 1
    AC_CHECK_HEADER(bsd_auth.h, AC_DEFINE(HAVE_BSD_AUTH_H, 1, [Define if you use BSD authentication.]) [with_passwd=no; AUTH_OBJS=bsdauth.o], -)
d1660 1
a1660 1
AC_CHECK_TYPES([sig_atomic_t], , [AC_DEFINE(sig_atomic_t, int, [Define to `int' if <signal.h> does not define.])], [#include <sys/types.h>
d1662 1
a1662 1
AC_CHECK_TYPES([sigaction_t], [AC_DEFINE(HAVE_SIGACTION_T, 1, [Define if <signal.h> has the sigaction_t typedef.])], ,[#include <sys/types.h>
d1664 3
d1687 1
d1707 2
a1708 2
AC_CHECK_FUNCS(utime, [SUDO_FUNC_UTIME_POSIX], [AC_LIBOBJ(utime)])
SUDO_FUNC_FNMATCH(AC_DEFINE(HAVE_FNMATCH, 1, [Define if you have the `fnmatch' function.]), AC_LIBOBJ(fnmatch))
d1712 7
d1729 1
a1729 1
if test -z "$LIB_CRYPT"; then
d1765 1
a1765 1
	AC_DEFINE(HAVE___PROGNAME, 1, [Define if your crt0.o defines the __progname symbol for you.])
d1775 1
a1775 1
    AC_DEFINE(HAVE_KERB4, 1, [Define if you use Kerberos IV.])
d1838 1
a1838 1
	AC_DEFINE(HAVE_KERB5, 1, [Define if you use Kerberos V.])
d1849 1
a1849 1
		AC_DEFINE(HAVE_HEIMDAL, 1, [Define if your Kerberos is Heimdal.])
d1855 1
a1855 1
    AC_DEFINE(HAVE_KERB5, 1, [Define if you use Kerberos V.])
d1883 1
a1883 1
	    AC_DEFINE(HAVE_HEIMDAL, 1, [Define if your Kerberos is Heimdal.])
d1895 1
a1895 1
dnl PAM libs
d1898 3
d1902 5
d1991 1
a1991 1
    AC_CHECK_LIB(skey, skeyaccess, AC_DEFINE(HAVE_SKEYACCESS, 1, [Define if your S/Key library has skeyaccess().]))
d2083 45
d2149 1
a2149 1
    AC_DEFINE(WITHOUT_PASSWD, 1. [Define to avoid using the passwd/shadow file for authentication.])
d2182 21
d2219 69
a2287 1
dnl Special bits for autoheader   
d2311 16
d2338 1
a2338 1
#ifdef HAVE_STOW
a2343 7
/* Solaris doesn't use const qualifiers in PAM. */
#ifdef sun
# define PAM_CONST
#else
# define PAM_CONST	const
#endif

d2345 1
a2345 1
# define EXEC	execv
d2347 1
a2347 1
# define EXEC	execvp
d2349 8
@


1.19
log
@Update to 1.6.7p5
@
text
@d1663 1
a1663 1
AC_REPLACE_FUNCS(strerror strcasecmp sigaction strlcpy strlcat)
@


1.18
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@d7 1
a7 1
AC_INIT(sudo, 1.6.7p4)
d12 1
a12 1
AC_MSG_NOTICE([Configuring Sudo version 1.6.7p4])
d1509 6
@


1.17
log
@Sync with sudo 1.6.7p3; fixes kerberos 5 compilation issues w/ MIT kerberos.
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.382 2003/04/04 17:45:24 millert Exp $
d7 1
a7 1
AC_INIT(sudo, 1.6.7p3)
d12 1
a12 1
AC_MSG_NOTICE([Configuring Sudo version 1.6.7p3])
d914 1
a914 1
AC_ARG_WITH(secure-path, [  --with-secure-path      override the user's path with a builtin one],
d916 1
a916 1
    yes)	AC_DEFINE_UNQUOTED(SECURE_PATH, "/bin:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc", [Define to override the user's path with a builtin one.])
@


1.16
log
@Sync with my sudo cvs repo:
 o update to sudo 1.6.7p2
 o use warn/err throughout
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.381 2003/04/02 18:45:35 millert Exp $
d7 1
a7 1
AC_INIT(sudo, 1.6.7p2)
d12 1
a12 1
AC_MSG_NOTICE([Configuring Sudo version 1.6.7p2])
d1782 10
d1823 1
@


1.15
log
@Update to sudo 1.6.7p1; fixes false positives in the oflow detection
of expand_prompt() introduced in sudo 1.6.7.
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.378 2003/03/24 16:05:59 millert Exp $
d7 1
a7 1
AC_INIT(sudo, 1.6.7)
d12 1
a12 1
AC_MSG_NOTICE([Configuring Sudo version 1.6.7])
d1590 1
d1696 15
a1710 1

d1773 1
d1775 10
a1784 1
if test -n "$with_kerb5"; then
@


1.14
log
@update to what will soon be sudo 1.6.7
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.367 2003/03/15 20:31:01 millert Exp $
d12 1
a12 1
echo "Configuring Sudo version 1.6.7"
d123 1
a123 1
		AC_MSG_WARN([--with-otp-only option deprecated, treating as --without-passwd])
d130 1
a130 1
		AC_MSG_WARN([--with-alertmail option deprecated, treating as --mailto])
d148 16
d170 1
a170 1
    *)		echo "Adding ${with_incpath} to CPPFLAGS"
d183 1
a183 4
    *)		echo "Adding ${with_libpath} to LDFLAGS"
		for i in ${with_libpath}; do
		    LDFLAGS="${LDFLAGS} -L${i}"
		done
d193 1
a193 10
    *)		echo "Adding ${with_libraries} to LIBS"
		for i in ${with_libraries}; do
		    case $i in
			-l*)	;;
			*.a)	;;
			*.o)	;;
			*)	i="-l${i}";;
		    esac
		    LIBS="${LIBS} ${i}"
		done
d199 1
a199 1
    yes)	echo 'Setting up for development: -Wall, flex, yacc'
d205 1
a205 1
    *)		echo "Ignoring unknown argument to --with-devel: $with_devel"
d211 1
a211 1
    yes)	echo 'Sudo will link with -lefence (Electric Fence)'
d214 1
a214 1
		    LDFLAGS="${LDFLAGS} -L/usr/local/lib"
d218 1
a218 1
    *)		echo "Ignoring unknown argument to --with-efence: $with_efence"
d224 1
a224 1
    yes)	echo 'Adding CSOps standard options'
d231 2
d235 1
a235 1
    *)		echo "Ignoring unknown argument to --with-csops: $with_csops"
d250 1
a250 1
AC_ARG_WITH(skey, [  --with-skey             enable S/Key support ],
d252 2
a253 1
    yes)	if test -n "$with_opie"; then
a260 3
    no)		;;
    *)		echo "Ignoring unknown argument to --with-skey: $with_skey"
		;;
d263 1
a263 1
AC_ARG_WITH(opie, [  --with-opie             enable OPIE support ],
d265 2
a266 1
    yes)	if test -n "$with_skey"; then
a273 3
    no)		;;
    *)		echo "Ignoring unknown argument to --with-opie: $with_opie"
		;;
d289 1
a289 1
AC_ARG_WITH(SecurID, [  --with-SecurID          enable SecurID support],
d291 1
a291 1
    no)		;;
d299 1
a299 1
AC_ARG_WITH(fwtk, [  --with-fwtk             enable FWTK AuthSRV support],
d301 1
a301 1
    no)		;;
a306 5
		if test "$with_fwtk" != "yes"; then
		    SUDO_LDFLAGS="${SUDO_LDFLAGS} -L${with_fwtk}"
		    CPPFLAGS="${CPPFLAGS} -I${with_fwtk}"
		    with_fwtk=yes
		fi
d310 1
a310 1
AC_ARG_WITH(kerb4, [  --with-kerb4            enable kerberos v4 support],
d312 2
a313 1
    yes)	AC_MSG_CHECKING(whether to try Kerberos 4 authentication)
a315 3
    no)		;;
    *)		AC_MSG_ERROR(["--with-kerb4 does not take an argument."])
		;;
d318 1
a318 1
AC_ARG_WITH(kerb5, [  --with-kerb5            enable kerberos v5 support],
d320 2
a321 1
    yes)	AC_MSG_CHECKING(whether to try Kerberos 5 authentication)
a323 3
    no)		;;
    *)		AC_MSG_ERROR(["--with-kerb5 does not take an argument."])
		;;
d584 1
a584 1
    no)		echo "Sorry, --without-mailsubject not supported."
d598 1
a598 1
    no)		echo "Sorry, --without-passprompt not supported."
d610 1
a610 1
    no)		echo "Sorry, --without-badpass-message not supported."
d965 1
a965 1
    		echo "Ignoring unknown argument to --enable-authentication: $enableval"
d980 1
a980 1
    		echo "Ignoring unknown argument to --enable-root-mailer: $enableval"
d1013 1
a1013 1
    		echo "Ignoring unknown argument to --enable-saved-ids: $enableval"
d1028 1
a1028 1
    		echo "Ignoring unknown argument to --enable-shadow: $enableval"
d1057 1
a1057 1
    		echo "Ignoring unknown argument to --enable-log-host: $enableval"
d1072 1
a1072 1
    		echo "Ignoring unknown argument to --enable-noargs-shell: $enableval"
d1088 1
a1088 1
    		echo "Ignoring unknown argument to --enable-shell-sets-home: $enableval"
d1103 1
a1103 1
		echo "Ignoring unknown argument to --enable-path-info: $enableval"
d1113 1
a1113 2
    echo "Sorry, configure requires egrep to run."
    exit
d1161 1
a1161 5
	echo ""
	echo "Fatal Error: config.cache exists from another platform!"
	echo "Please remove it and re-run configure."
	echo ""
	exit 1
d1165 1
a1165 1
	echo $sudo_cv_prev_host
d1210 1
d1217 16
d1310 1
a1310 1
				echo "Ignoring unknown argument to --enable-sia: $enableval"
d1446 1
d1452 1
d1459 1
d1466 1
a1466 1
			2|3)	echo 'using shlicc as CC'
d1518 5
d1536 20
d1697 1
a1697 1
dnl Kerberos 5
d1699 14
a1712 10
if test "$with_kerb5" = "yes"; then
    AC_DEFINE(HAVE_KERB5, 1, [Define if you use Kerberos V.])
    if test -f "/usr/local/include/krb5.h"; then
	CPPFLAGS="$CPPFLAGS -I/usr/local/include"
    elif test -f "/usr/local/kerberos/include/krb5.h"; then
	CPPFLAGS="$CPPFLAGS -I/usr/local/kerberos/include"
    elif test -f "/usr/krb5/include/krb5.h"; then
	CPPFLAGS="$CPPFLAGS -I/usr/krb5/include"
    elif test -f "/usr/local/krb5/include/krb5.h"; then
	CPPFLAGS="$CPPFLAGS -I/usr/local/krb5/include"
d1714 7
a1720 1
	echo 'Unable to locate kerberos 5 include files, you will have to edit the Makefile and add -I/path/to/krb/includes to CPPFLAGS'
d1723 52
a1774 8
    if test -f "/usr/local/lib/libkrb5.a"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/local/lib"
    elif test -f "/usr/local/kerberos/lib/libkrb5.a"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/local/kerberos/lib"
    elif test -f "/usr/krb5/lib/libkrb5.a"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/krb5/lib"
    elif test -f "/usr/local/krb5/lib/libkrb5.a"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/local/krb5/lib"
d1776 3
a1778 1
	echo 'Unable to locate kerberos 5 libraries, you will have to edit the Makefile and add -L/path/to/krb/libs to SUDO_LDFLAGS'
d1781 14
a1794 1
    SUDO_LIBS="${SUDO_LIBS} -lkrb5 -lk5crypto -lcom_err"
a1805 31
dnl Find kerberos 4 includes and libs or complain
dnl
if test "$with_kerb4" = "yes"; then
    AC_DEFINE(HAVE_KERB4, 1, [Define if you use Kerberos IV.])
    if test -f "/usr/include/kerberosIV/krb.h"; then
	CPPFLAGS="${CPPFLAGS} -I/usr/include/kerberosIV"
    elif test -f "/usr/local/include/kerberosIV/krb.h"; then
	CPPFLAGS="${CPPFLAGS} -I/usr/local/include/kerberosIV"
    elif test -f "/usr/kerberos/include/krb.h"; then
	CPPFLAGS="${CPPFLAGS} -I/usr/kerberos/include"
    elif test -f "/usr/local/kerberos/include/krb.h"; then
	CPPFLAGS="${CPPFLAGS} -I/usr/local/kerberos/include"
    else
	echo 'Unable to locate kerberos 4 include files, you will have to edit the Makefile and add -I/path/to/krb/includes to CPPFLAGS'
    fi

    if test -d "/usr/kerberos/lib"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/kerberos/lib"
    elif test -d "/usr/lib/kerberos"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/lib/kerberos"
    elif test -f "/usr/local/lib/libkrb.a"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/local/lib"
    elif test ! -f "/usr/lib/libkrb.a"; then
	echo 'Unable to locate kerberos 4 libraries, you will have to edit the Makefile and add -L/path/to/krb/libs to SUDO_LDFLAGS'
    fi

    AC_HAVE_LIBRARY(des, SUDO_LIBS="${SUDO_LIBS} -lkrb -ldes", SUDO_LIBS="${SUDO_LIBS} -lkrb")
    AUTH_OBJS="${AUTH_OBJS} kerb4.o"
fi

dnl
d1814 1
a1814 1
	    SUDO_LDFLAGS="${SUDO_LDFLAGS} -L${i}"
d1819 1
a1819 1
	echo 'Unable to locate AFS libraries, you will have to edit the Makefile and add -L/path/to/afs/libs to SUDO_LDFLAGS or rerun configure with the --with-libpath options.'
d1846 1
a1846 1
	echo 'Unable to locate AFS include dir, you may have to edit the Makefile and add -I/path/to/afs/includes to CPPFLAGS or rerun configure with the --with-incpath options.'
d1862 7
a1868 10
if test "$with_skey" = "yes"; then
    SUDO_LIBS="${SUDO_LIBS} -lskey"
    if test -f /usr/include/skey.h -a -f /usr/lib/libskey.a; then
	:
    elif test -f /usr/local/include/skey.h; then
	CPPFLAGS="${CPPFLAGS} -I/usr/local/include"
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/local/lib"
    elif test "$with_csops" = "yes" -a -f /tools/cs/skey/include/skey.h -a -f /tools/cs/skey/lib/libskey.a; then
	CPPFLAGS="${CPPFLAGS} -I/tools/cs/skey/include"
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/tools/cs/skey/lib"
d1870 12
a1881 1
	echo 'Unable to locate libskey.a and/or skey.h, you will have to edit the Makefile and add -L/path/to/skey/lib to SUDO_LDFLAGS and/or -I/path/to/skey.h to CPPFLAGS'
d1883 4
d1888 2
d1895 7
a1901 7
if test "$with_opie" = "yes"; then
    SUDO_LIBS="${SUDO_LIBS} -lopie"
    if test -f /usr/include/opie.h -a -f /usr/lib/libopie.a; then
	:
    elif test -f /usr/local/include/opie.h; then
	CPPFLAGS="${CPPFLAGS} -I/usr/local/include"
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/local/lib"
d1903 15
a1917 1
	echo 'Unable to locate libopie.a and/or opie.h, you will have to edit the Makefile and add -L/path/to/opie/lib to SUDO_LDFLAGS and/or -I/path/to/opie.h to CPPFLAGS'
d1919 3
d1937 1
a1937 1
    LDFLAGS="${LDFLAGS} -L${with_SecurID}"
d1941 15
a1955 1
    AC_CHECK_LIB(aceclnt, SD_Init, [AUTH_OBJS="securid5.o"; SUDO_LIBS="${SUDO_LIBS} -laceclnt -lpthread"; SUDO_LDFLAGS="${SUDO_LDFLAGS} -L${with_SecurID}"], [AUTH_OBJS="securid.o"; SUDO_LIBS="${SUDO_LIBS} ${with_SecurID}/sdiclient.a"], [-lpthread])
d1962 6
a1967 1
if test "$with_fwtk" = "yes"; then
d1979 12
a2040 1
    echo ""
d2043 1
a2043 1
	    echo "You will need to customize sample.pam and install it as /etc/pam.d/sudo"
a2045 1
    echo ""
@


1.13
log
@spelling fixes
ok millert@@
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.349 2002/04/18 15:41:30 millert Exp $
d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT(sudo, 1.6.6)
d12 1
a12 1
echo "Configuring Sudo version 1.6.6"
a26 1
AC_SUBST(LIBOBJS)dnl
d113 1
a113 1
test "$sysconfdir" = '${prefix}/etc' && sysconfdir='/etc'
a293 1
		AUTH_OBJS="securid.o"
d481 1
a481 1
AC_MSG_RESULT(badpri)
d551 1
a551 1
    AC_DEFINE(SEND_MAIL_WHEN_NO_HOST, 1, [Define to send mail when the user is not not allowed to run sudo on this host.])
d568 1
a568 1
    AC_DEFINE(SEND_MAIL_WHEN_NOT_OK, 1, [Define to send mail when the user is not not allowed to run a command.])
d670 1
a670 1
    *)		AC_MSG_ERROR(["you must use a numeric uid, not a name."])
d682 1
a682 1
    *)		AC_MSG_ERROR(["you must use a numeric uid, not a name."])
d694 1
a694 1
    *)		AC_MSG_ERROR(["you must use a numeric gid, not a name."])
d788 1
a788 1
[echo $with_timeout; case $with_timeout in  
d945 12
d995 10
a1004 1
    no)		BROKEN_SETREUID=1
d1313 1
a1313 1
		    AC_CHECK_FUNC(sia_ses_init, AC_DEFINE(HAVE_SIA, 1, [Define if you use SIA.]) [
d1350 1
a1350 1
		    MAN_POSTINSTALL='	/bin/rm -f $(mandir8)/sudo.$(mansect8).z $(mandir8)/visudo.$(mansect8).z $(mandir5)/sudoers.$(mansect5).z ; /usr/bin/pack $(mandir8)/sudo.$(mansect8) $(mandir8)/visudo.$(mansect8) $(mandir5)/sudoers.$(mansect5)'
d1454 1
a1454 1
		BROKEN_SETREUID=yes
d1470 1
a1470 1
		    BROKEN_SETREUID=yes
d1484 1
a1484 1
		BROKEN_SETREUID=yes
d1493 1
a1493 1
		    BROKEN_SETREUID=yes
d1570 1
a1570 1
    AC_CHECK_HEADER(bsd_auth.h, AC_DEFINE(HAVE_BSD_AUTH_H, 1, [Define if you use BSD authentication.]) [with_passwd=no; AUTH_OBJS=bsdauth.o])
d1600 5
a1604 2
	       seteuid setegid strftime setrlimit initgroups fstat)
if test -z "$BROKEN_SETREUID"; then
d1608 1
a1608 1
    AC_CHECK_FUNCS(getifaddrs, AC_CHECK_FUNCS(freeifaddrs))
d1618 3
a1620 3
AC_CHECK_FUNCS(innetgr _innetgr, AC_CHECK_FUNCS(getdomainname) [break])
AC_CHECK_FUNCS(lsearch, , [AC_CHECK_LIB(compat, lsearch, AC_CHECK_HEADER(search.h, AC_DEFINE(HAVE_LSEARCH) [LIBS="${LIBS} -lcompat"], AC_LIBOBJ(lsearch)), AC_LIBOBJ(lsearch))])
AC_CHECK_FUNCS(utime, SUDO_FUNC_UTIME_POSIX, AC_LIBOBJ(utime))
d1623 1
a1623 1
AC_REPLACE_FUNCS(strerror strcasecmp sigaction)
d1700 1
a1700 1
    AC_HAVE_LIBRARY(dl, SUDO_LIBS="${SUDO_LIBS} -ldl -lpam", SUDO_LIBS="${SUDO_LIBS} -lpam")
d1827 3
a1829 5
	SUDO_LIBS="${SUDO_LIBS} ${with_SecurID}/sdiclient.a"
	CPPFLAGS="${CPPFLAGS} -I${with_SecurID}"
    elif test -f /usr/ace/examples/sdiclient.a; then
	SUDO_LIBS="${SUDO_LIBS} /usr/ace/examples/sdiclient.a"
	CPPFLAGS="${CPPFLAGS} -I/usr/ace/examples"
d1831 1
a1831 2
	SUDO_LIBS="${SUDO_LIBS} /usr/ace/sdiclient.a"
	CPPFLAGS="${CPPFLAGS} -I/usr/ace"
d1833 8
d1950 7
@


1.12
log
@Update to sudo 1.6.6
@
text
@d194 1
a194 1
AC_ARG_WITH(devel, [  --with-devel            add developement options],
d196 1
a196 1
    yes)	echo 'Setting up for developement: -Wall, flex, yacc'
@


1.11
log
@update to sudo 1.6.5p2
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.348 2002/01/22 02:01:09 millert Exp $
d7 1
a7 1
AC_INIT(sudo, 1.6.5)
d12 1
a12 1
echo "Configuring Sudo version 1.6.5"
@


1.10
log
@update to sudo 1.6.5
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.346 2002/01/16 23:37:34 millert Exp $
d982 9
d1435 1
d1447 7
d1471 6
a1476 1
		BROKEN_SETREUID=yes
d1586 1
a1586 1
    AC_CHECK_FUNCS(getifaddrs)
@


1.9
log
@update to sudo 1.6.4p2
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.344 2002/01/15 22:47:29 millert Exp $
d7 1
a7 1
AC_INIT(sudo, 1.6.4)
d12 1
a12 1
echo "Configuring Sudo version 1.6.4"
d967 15
d984 1
a984 1
[  --saved-ids             Don't try to use POSIX saved ids],
d1014 1
a1014 1
[  --disable-root-sudo     don't allow root to run sudo],
@


1.8
log
@sync with sudo 1.6.4rc2
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.342 2002/01/07 18:59:47 millert Exp $
d206 13
d966 15
@


1.7
log
@Update to sudo 1.6.4
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.341 2002/01/02 22:36:49 millert Exp $
d1354 6
@


1.6
log
@A few updates from the sudo developement tree:
- Add bsd authentication support (currently disabled)
- Always check setenv() return value
- Fix umask disabling
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.310 2000/03/24 20:14:04 millert Exp $
d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-1999 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT(sudo.h)
d12 1
a12 1
echo "Configuring Sudo version 1.6.3"
d14 1
a14 1
dnl Variables that get substituted in the Makefile
a32 1
AC_SUBST(TIMEDIR)
d38 53
d92 1
a92 1
dnl Some may be overridden by environment variables..
d123 1
a123 1
		AC_DEFINE(WITHOUT_PASSWD)
a130 1
		AC_DEFINE(WITHOUT_PASSWD)
d211 1
a211 1
		with_insults=yes
d237 1
a237 1
    		AC_DEFINE(HAVE_SKEY)
d252 1
a252 1
		AC_DEFINE(HAVE_OPIE)
d264 1
a264 1
    yes)	AC_DEFINE(LONG_OTP_PROMPT)
d267 3
a270 1
    no)		;;
d278 1
a278 1
    *)		AC_DEFINE(HAVE_SECURID)
a287 6
    yes)	AC_DEFINE(HAVE_FWTK)
		AC_MSG_CHECKING(whether to use FWTK AuthSRV for authentication)
		AC_MSG_RESULT(yes)
		with_passwd=no
		AUTH_OBJS="fwtk.o"
		;;
d289 1
a289 1
    *)		AC_DEFINE(HAVE_FWTK)
a291 2
		SUDO_LDFLAGS="${SUDO_LDFLAGS} -L${with_fwtk}"
    		CPPFLAGS="${CPPFLAGS} -I${with_fwtk}"
d294 5
a298 1
		with_fwtk=yes
d324 1
a324 1
    yes)	AC_DEFINE(HAVE_AUTHENTICATE)
d337 1
a337 1
    yes)	AC_DEFINE(HAVE_PAM)
d350 1
a350 1
    yes)	AC_DEFINE(HAVE_AFS)
d362 1
a362 1
    yes)	AC_DEFINE(HAVE_DCE)
d391 1
a391 1
    yes|short)	AC_MSG_RESULT(yes)
d393 1
a393 2
    no|none)	AC_DEFINE(NO_LECTURE)
		AC_MSG_RESULT(no)
d397 7
a403 1
esac], [AC_MSG_RESULT(yes)])
d412 1
a412 1
    syslog)	AC_DEFINE(LOGGING, SLOG_SYSLOG)
d426 1
a426 1
AC_ARG_WITH(logfac, [  --with-logfac           syslog facility to log with (default is local2)],
d432 1
a432 2
    authpriv|auth|daemon|user|local0|local1|local2|local3|local4|local5|local6|local7)		AC_DEFINE_UNQUOTED(LOGFAC, "$with_logfac")
		AC_MSG_RESULT([$with_logfac])
d436 3
a438 1
esac], [AC_DEFINE_UNQUOTED(LOGFAC, "local2") AC_MSG_RESULT("local2")])
d441 1
a441 1
AC_ARG_WITH(goodpri, [  --with-goodpri          syslog priority for commands (def is notice)],
d447 2
a448 2
    alert|crit|debug|emerg|err|info|notice|warning)		AC_DEFINE_UNQUOTED(PRI_SUCCESS, "$with_goodpri")
		AC_MSG_RESULT([$with_goodpri])
d452 3
a454 1
esac], [AC_DEFINE_UNQUOTED(PRI_SUCCESS, "notice") AC_MSG_RESULT("notice")])
d457 1
a457 1
AC_ARG_WITH(badpri, [  --with-badpri           syslog priority for failures (def is LOG_ALERT)],
d463 2
a464 2
    alert|crit|debug|emerg|err|info|notice|warning)		AC_DEFINE_UNQUOTED(PRI_FAILURE, "$with_badpri")
		AC_MSG_RESULT([$with_badpri])
d468 3
a470 1
esac], [AC_DEFINE_UNQUOTED(PRI_FAILURE, "alert") AC_MSG_RESULT("alert")])
d487 1
a487 2
    [[0-9]]*)	AC_DEFINE_UNQUOTED(MAXLOGFILELEN, $with_loglen)
		AC_MSG_RESULT([$with_loglen])
d491 3
a493 1
esac], [AC_DEFINE(MAXLOGFILELEN, 80) AC_MSG_RESULT(80)])
d498 1
a498 2
    yes)	AC_DEFINE(IGNORE_DOT_PATH)
		AC_MSG_RESULT(yes)
d500 1
a500 1
    no)		AC_MSG_RESULT(no)
d504 7
a510 25
esac], AC_MSG_RESULT(no))

AC_MSG_CHECKING(who should get the mail that sudo sends)
AC_ARG_WITH(mailto, [  --with-mailto           who should get sudo mail (default is "root")],
[case $with_mailto in  
    yes)	AC_MSG_ERROR(["must give --with-mailto an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-mailto not supported."])
		;;
    *)		AC_DEFINE_UNQUOTED(MAILTO, "$with_mailto")
		AC_MSG_RESULT([$with_mailto])
		;;
esac], [AC_DEFINE(MAILTO, "root") AC_MSG_RESULT(root)])

AC_ARG_WITH(mailsubject, [  --with-mailsubject      subject of sudo mail],
[case $with_mailsubject in  
    yes)	AC_MSG_ERROR(["must give --with-mailsubject an argument."])
		;;
    no)		echo "Sorry, --without-mailsubject not supported."
		;;
    *)		AC_DEFINE_UNQUOTED(MAILSUBJECT, "$with_mailsubject")
		AC_MSG_CHECKING(sudo mail subject)
		AC_MSG_RESULT([Using alert mail subject: $with_mailsubject])
		;;
esac], AC_DEFINE(MAILSUBJECT, "*** SECURITY information for %h ***"))
d515 1
a515 2
    yes)	AC_DEFINE(SEND_MAIL_WHEN_NO_USER)
		AC_MSG_RESULT(yes)
d517 1
a517 1
    no)		AC_MSG_RESULT(no)
d519 1
a519 1
    *)		AC_MSG_ERROR(["unknown argument to --with-mail-if-no-user: $with_mail_if_no_user"])
d521 7
a527 1
esac], [AC_DEFINE(SEND_MAIL_WHEN_NO_USER) AC_MSG_RESULT(yes)])
d532 1
a532 2
    yes)	AC_DEFINE(SEND_MAIL_WHEN_NO_HOST)
		AC_MSG_RESULT(yes)
d534 1
a534 1
    no)		AC_MSG_RESULT(no)
d536 1
a536 1
    *)		AC_MSG_ERROR(["unknown argument to --with-mail-if-no-host: $with_mail_if_no_host"])
d538 7
a544 1
esac], AC_MSG_RESULT(no))
d549 30
a578 2
    yes)	AC_DEFINE(SEND_MAIL_WHEN_NOT_OK)
		AC_MSG_RESULT(yes)
d580 1
a580 1
    no)		AC_MSG_RESULT(no)
d582 3
a584 1
    *)		AC_MSG_ERROR(["unknown argument to --with-mail-if-noperms: $with_mail_if_noperms"])
d586 2
a587 1
esac], AC_MSG_RESULT(no))
d596 4
a599 4
    *)		AC_DEFINE_UNQUOTED(PASSPROMPT, "$with_passprompt")
		AC_MSG_RESULT([$with_passprompt])
		;;
esac], [AC_DEFINE(PASSPROMPT, "Password:") AC_MSG_RESULT(Password:)])
d608 1
a608 2
    *)		AC_DEFINE_UNQUOTED(INCORRECT_PASSWORD, "$with_badpass_message")
		AC_MSG_RESULT([$with_badpass_message])
d610 3
a612 1
esac], [AC_DEFINE(INCORRECT_PASSWORD, ["Sorry, try again."]) AC_MSG_RESULT([Sorry, try again.])])
d617 1
a617 2
    yes)	AC_DEFINE(FQDN)
		AC_MSG_RESULT(yes)
d619 1
a619 1
    no)		AC_MSG_RESULT(no)
d623 7
a629 1
esac], AC_MSG_RESULT(no))
d645 1
a645 1
    *)		AC_DEFINE_UNQUOTED(_PATH_SENDMAIL, "$with_sendmail")
d688 1
a688 1
AC_ARG_WITH(umask, [  --with-umask            umask with which the prog should run (default is 0022)
d693 1
a693 1
    no)		AC_MSG_RESULT(user)
d695 1
a695 2
    [[0-9]]*)	AC_DEFINE_UNQUOTED(SUDO_UMASK, $with_umask)
		AC_MSG_RESULT([$with_umask])
d699 7
a705 1
esac], [AC_DEFINE(SUDO_UMASK, 0022) AC_MSG_RESULT(0022)])
d708 1
a708 1
AC_ARG_WITH(runas-default, [  --with-runas-default    User to run commands as (default is "root"],
d714 1
a714 2
    *)		AC_DEFINE_UNQUOTED(RUNAS_DEFAULT, "$with_runas_default")
		AC_MSG_RESULT([$with_runas_default])
d716 3
a718 1
esac], [AC_DEFINE(RUNAS_DEFAULT, "root") AC_MSG_RESULT(root)])
d726 1
a726 1
    *)		AC_DEFINE_UNQUOTED(EXEMPTGROUP, "$with_exempt")
d739 1
a739 1
    *)		AC_DEFINE_UNQUOTED(EDITOR, "$with_editor")
d747 1
a747 2
    yes)	AC_DEFINE(ENV_EDITOR)
		AC_MSG_RESULT(yes)
d749 1
a749 1
    no)		AC_MSG_RESULT(no)
d753 7
a759 1
esac], AC_MSG_RESULT(no))
d764 1
a764 3
    yes)	AC_DEFINE(TRIES_FOR_PASSWORD, 3)
		AC_MSG_RESULT(3)
		;;
d767 1
a767 2
    [[1-9]]*)	AC_DEFINE_UNQUOTED(TRIES_FOR_PASSWORD, $with_passwd_tries)
		AC_MSG_RESULT([$with_passwd_tries])
d771 3
a773 1
esac], [AC_DEFINE(TRIES_FOR_PASSWORD, 3) AC_MSG_RESULT(3)])
d776 1
a776 1
AC_ARG_WITH(timeout, [  --with-timeout          minutes before sudo asks for passwd again (def is 5)],
d778 2
a779 5
    yes)	AC_DEFINE(TIMEOUT, 5)
		AC_MSG_RESULT(5)
		;;
    no)		AC_DEFINE(TIMEOUT, 0)
		AC_MSG_RESULT([no timeout])
d781 1
a781 2
    [[0-9]]*)	AC_DEFINE_UNQUOTED(TIMEOUT, $with_timeout)
		AC_MSG_RESULT([$with_timeout])
d785 3
a787 1
esac], [AC_DEFINE(TIMEOUT, 5) AC_MSG_RESULT(5)])
d790 1
a790 1
AC_ARG_WITH(password-timeout, [  --with-password-timeout passwd prompt timeout in minutes (default is 5)],
d792 2
a793 5
    yes)	AC_DEFINE(PASSWORD_TIMEOUT, 5)
		AC_MSG_RESULT(5)
		;;
    no)		AC_DEFINE(PASSWORD_TIMEOUT, 0)
		AC_MSG_RESULT([no timeout])
d795 1
a795 2
    [[0-9]]*)	AC_DEFINE_UNQUOTED(PASSWORD_TIMEOUT, $with_password_timeout)
		AC_MSG_RESULT([$with_password_timeout])
d799 3
a801 1
esac], [AC_DEFINE(PASSWORD_TIMEOUT, 5) AC_MSG_RESULT(5)])
a802 1
AC_MSG_CHECKING(whether to use execvp or execv)
d805 1
a805 1
    yes)	AC_DEFINE(USE_EXECV)
d807 1
d809 1
a809 2
    no)		AC_MSG_RESULT(execvp)
		;;
d812 1
a812 1
esac], AC_MSG_RESULT(execvp))
d817 1
a817 2
    yes)	AC_DEFINE(USE_TTY_TICKETS)
		AC_MSG_RESULT(yes)
d819 1
a819 1
    no)		AC_MSG_RESULT(no)
d823 7
a829 1
esac], AC_MSG_RESULT(no))
d834 1
a834 2
    yes)	AC_DEFINE(USE_INSULTS)
		AC_MSG_RESULT(yes)
d838 1
a838 1
    no)		AC_MSG_RESULT(no)
d842 7
a848 1
esac], AC_MSG_RESULT(no))
d864 1
a864 1
    yes)	AC_DEFINE(CLASSIC_INSULTS)
d873 1
a873 1
    yes)	AC_DEFINE(CSOPS_INSULTS)
d882 1
a882 1
    yes)	AC_DEFINE(HAL_INSULTS)
d889 1
a889 1
AC_ARG_WITH(goons-insults, [  --with-goons-insults    include the insults from the \"Goon Show\"],
d891 1
a891 1
    yes)	AC_DEFINE(GOONS_INSULTS)
d899 1
a899 1
if test "$with_insults" = "yes"; then
d912 1
a912 1
    yes)	AC_DEFINE_UNQUOTED(SECURE_PATH, "/bin:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc")
d927 1
a927 1
    no)		AC_DEFINE(STUB_LOAD_INTERFACES)
d946 1
a946 1
		AC_DEFINE(NO_AUTHENTICATION)
d975 1
a975 1
    no)		AC_DEFINE(NO_ROOT_SUDO)
d988 1
a988 1
		AC_DEFINE(HOST_IN_LOG)
d1003 1
a1003 1
		AC_DEFINE(SHELL_IF_NO_ARGS)
d1016 1
a1016 1
                          set \$HOME to target user in shell mode],
d1019 1
a1019 1
		AC_DEFINE(SHELL_SETS_HOME)
d1036 1
a1036 1
		AC_DEFINE(DONT_LEAK_PATH_INFO)
d1054 7
d1064 1
d1067 1
a1067 1
AC_PROG_CC
a1070 1
AC_ISC_POSIX
d1136 3
a1138 1
		    AC_CHECK_FUNC(getpwanam, AC_DEFINE(HAVE_GETPWANAM) AC_CHECK_FUNCS(issecure))
d1149 2
a1150 2
		mansectsu=1m
		mansectform=4
d1155 1
a1155 1
		AC_DEFINE(_ALL_SOURCE)
d1163 2
a1164 2
		mansectsu=1m
		mansectform=4
a1166 16
		# uncomment this for a statically linked sudo
		# (XXX - should be an option to configure)
		#STATIC_SUDO=true

		# If using cc, run in ANSI mode if possible
		if test -z "$GCC"; then
		    $CC -Aa 2>&1 | grep 'A option is available only' >conftest.out
		    if test ! -s conftest.out; then
			CPPFLAGS="${CPPFLAGS} -Aa"
		    fi
		    rm -f conftest.out
		fi

		# Add -D_HPUX_SOURCE so we don't get strict ANSI headers
		CPPFLAGS="${CPPFLAGS} -D_HPUX_SOURCE"

d1168 1
a1168 1
		    AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) AC_CHECK_LIB(sec, iscomsec, AC_DEFINE(HAVE_ISCOMSEC)) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"; SECUREWARE=1])
a1171 8
		if test -n "$STATIC_SUDO"; then
		    if test -n "$GCC"; then
			SUDO_LDFLAGS="${SUDO_LDFLAGS} -static"
		    else
			SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-a,archive"
		    fi
		fi

d1176 2
a1177 2
		mansectsu=1m
		mansectform=4
d1180 1
a1180 17
		# uncomment this for a statically linked sudo
		# (XXX - should be an option to configure)
		#STATIC_SUDO=true

		# If using cc, run in ANSI mode if possible
		if test -z "$GCC"; then
		    $CC -Aa 2>&1 | grep 'A option is available only' >conftest.out
		    if test ! -s conftest.out; then
			CPPFLAGS="${CPPFLAGS} -Aa"
		    fi
		    rm -f conftest.out
		fi

		# Add -D_HPUX_SOURCE so we don't get strict ANSI headers
		CPPFLAGS="${CPPFLAGS} -D_HPUX_SOURCE"

		AC_DEFINE(BROKEN_SYSLOG)
d1184 1
a1187 8
		if test -n "$STATIC_SUDO"; then
		    if test -n "$GCC"; then
			SUDO_LDFLAGS="${SUDO_LDFLAGS} -static"
		    else
			SUDO_LDFLAGS="${SUDO_LDFLAGS} -Wl,-a,archive"
		    fi
		fi

d1200 2
a1201 2
		mansectsu=1m
		mansectform=4
a1203 1

d1217 2
a1218 2
		mansectsu=1m
		mansectform=4
d1242 1
a1242 1
		    AC_CHECK_FUNC(sia_ses_init, AC_DEFINE(HAVE_SIA) [
d1253 1
a1253 1
		    AC_DEFINE(HAVE_GETPRPWNAM)
d1255 2
a1256 2
		    AC_CHECK_FUNC(snprintf, AC_DEFINE(HAVE_SNPRINTF), NEED_SNPRINTF=1)
		    AC_CHECK_FUNC(vsnprintf, AC_DEFINE(HAVE_VSNPRINTF), NEED_SNPRINTF=1)
d1269 1
a1269 1
		else
d1273 2
a1274 2
		mansectsu=8
		mansectform=4
a1276 3
		# configure may not think irix has stdc headers
		# but it's good enough for sudo
		AC_DEFINE(STDC_HEADERS)
d1300 2
a1301 2
		mansectsu=1m
		mansectform=4
a1303 3
		# To get crypt(3) and vasprintf() prototypes (so we pass -Wall)
		AC_DEFINE(_GNU_SOURCE)

d1306 1
a1306 1
		    AC_CHECK_FUNC(getspnam, AC_DEFINE(HAVE_GETSPNAM), AC_CHECK_LIB(shadow, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lshadow"; LIBS="${LIBS} -lshadow"]))
d1311 1
a1311 1
		AC_DEFINE(_CONVEX_SOURCE)
d1324 1
a1324 1
		    AC_CHECK_LIB(auth, getauthuid, AC_DEFINE(HAVE_GETAUTHUID) [SUDO_LIBS="${SUDO_LIBS} -lauth"; LIBS="${LIBS} -lauth"])
d1332 2
a1333 2
		mansectsu=1m
		mansectform=4
d1345 2
a1346 2
		mansectsu=1m
		mansectform=4
d1348 1
a1348 1
    *-*-sco*)
d1354 2
a1355 2
		mansectsu=1m
		mansectform=4
d1362 7
a1368 2
		mansectsu=1m
		mansectform=4
d1370 1
a1370 1
    *-ccur-sysv4|*-ccur-sysvr4)
d1373 2
a1374 2
		mansectsu=1m
		mansectform=4
d1398 12
d1415 5
d1421 2
a1422 2
		mansectsu=1m
		mansectform=4
d1437 1
a1437 1
    AC_CHECK_FUNC(getspnam, AC_DEFINE(HAVE_GETSPNAM) [CHECKSHADOW="false"])
d1440 1
a1440 1
    AC_CHECK_FUNC(getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1], AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"], AC_CHECK_LIB(security, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsecurity"; LIBS="${LIBS} -lsecurity"], AC_CHECK_LIB(prot, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lprot"; LIBS="${LIBS} -lprot"]))))
d1448 1
d1453 2
d1458 3
a1460 3
SUDO_PROG_MV
SUDO_PROG_BSHELL
SUDO_PROG_VI
d1466 1
a1466 1
AC_CHECK_HEADERS(string.h strings.h unistd.h malloc.h paths.h utime.h netgroup.h sys/sockio.h sys/bsdtypes.h sys/select.h)
d1469 6
a1474 2
    AC_CHECK_HEADERS(termio.h)
    AC_CHECK_HEADERS(termios.h, AC_CHECK_FUNCS(tcgetattr))
d1480 1
a1480 1
    AC_CHECK_HEADER(bsd_auth.h, AC_DEFINE(HAVE_BSD_AUTH_H) [with_passwd=no; AUTH_OBJS=bsdauth.o])
a1481 1

d1487 4
d1509 8
a1516 1
AC_CHECK_FUNCS(strchr strrchr memchr memcpy memset sysconf sigaction tzset seteuid strftime setrlimit initgroups fstat)
d1518 1
a1518 3
    AC_CHECK_FUNCS(bigcrypt)
    AC_CHECK_FUNCS(set_auth_parameters)
    AC_CHECK_FUNCS(initprivs)
d1521 1
a1521 1
    AC_CHECK_FUNC(getcwd, AC_DEFINE(HAVE_GETCWD), LIBOBJS="$LIBOBJS getcwd.o")
d1523 9
a1531 13
AC_CHECK_FUNC(lockf, AC_DEFINE(HAVE_LOCKF), AC_CHECK_FUNCS(flock))
AC_CHECK_FUNC(waitpid, AC_DEFINE(HAVE_WAITPID), AC_CHECK_FUNCS(wait3))
AC_CHECK_FUNC(innetgr, AC_DEFINE(HAVE_INNETGR) AC_CHECK_FUNCS(getdomainname))
AC_CHECK_FUNC(lsearch, AC_DEFINE(HAVE_LSEARCH), AC_CHECK_LIB(compat, lsearch, AC_CHECK_HEADER(search.h, AC_DEFINE(HAVE_LSEARCH) [LIBS="${LIBS} -lcompat"], LIBOBJS="$LIBOBJS lsearch.o"), LIBOBJS="$LIBOBJS lsearch.o"))
AC_CHECK_FUNC(setenv, AC_DEFINE(HAVE_SETENV), AC_FUNC_CHECK(putenv, AC_DEFINE(HAVE_PUTENV), LIBOBJS="$LIBOBJS putenv.o"))
AC_CHECK_FUNC(utime, AC_DEFINE(HAVE_UTIME)
SUDO_FUNC_UTIME_POSIX, LIBOBJS="$LIBOBJS utime.o")
SUDO_FUNC_FNMATCH(AC_DEFINE(HAVE_FNMATCH), LIBOBJS="$LIBOBJS fnmatch.o")
AC_REPLACE_FUNCS(strerror strcasecmp)
AC_CHECK_FUNC(snprintf, AC_DEFINE(HAVE_SNPRINTF), NEED_SNPRINTF=1)
AC_CHECK_FUNC(vsnprintf, AC_DEFINE(HAVE_VSNPRINTF), NEED_SNPRINTF=1)
AC_CHECK_FUNC(asprintf, AC_DEFINE(HAVE_ASPRINTF), NEED_SNPRINTF=1)
AC_CHECK_FUNC(vasprintf, AC_DEFINE(HAVE_VASPRINTF), NEED_SNPRINTF=1)
d1537 1
a1537 1
    LIBOBJS="$LIBOBJS snprintf.o"
d1543 1
a1543 1
    AC_CHECK_FUNC(crypt, ,AC_CHECK_LIB(crypt, crypt, [SUDO_LIBS="${SUDO_LIBS} -lcrypt"; LIBS="${LIBS} -lcrypt"], AC_CHECK_LIB(crypt_d, crypt, [SUDO_LIBS="${SUDO_LIBS} -lcrypt_d"; LIBS="${LIBS} -lcrypt_d"], AC_CHECK_LIB(ufc, crypt, [SUDO_LIBS="${SUDO_LIBS} -lufc"; LIBS="${LIBS} -lufc"]))))
d1550 2
a1551 2
AC_CHECK_FUNC(socket, ,AC_CHECK_LIB(socket, socket, [NET_LIBS="${NET_LIBS} -lsocket"; LIBS="${LIBS} -lsocket"], AC_CHECK_LIB(inet, socket, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find socket() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, socket, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl))))
d1556 2
a1557 2
AC_CHECK_FUNC(inet_addr, , AC_CHECK_FUNC(__inet_addr, , AC_CHECK_LIB(nsl, inet_addr, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, inet_addr, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find inet_addr() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, inet_addr, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl)))))
d1561 1
a1561 1
AC_CHECK_FUNC(syslog, ,AC_CHECK_LIB(socket, syslog, [NET_LIBS="${NET_LIBS} -lsocket"; LIBS="${LIBS} -lsocket"], AC_CHECK_LIB(nsl, syslog, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, syslog, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"]))))
d1574 1
a1574 1
    AC_DEFINE(HAVE_KERB5)
d1579 2
d1591 2
d1614 1
a1614 1
    AC_DEFINE(HAVE_KERB4)
d1711 1
d1769 1
a1769 1
    AC_DEFINE(WITHOUT_PASSWD)
d1818 64
@


1.6.2.1
log
@update to sudo 1.6.5p1
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.346 2002/01/16 23:37:34 millert Exp $
d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT(sudo, 1.6.5)
d12 1
a12 1
echo "Configuring Sudo version 1.6.5"
d14 1
a14 1
dnl Variables that get substituted in the Makefile and man pages
d33 1
a38 53
dnl Variables that get substituted in docs (not overridden by environment)
dnl
AC_SUBST(timedir)dnl initial value from SUDO_TIMEDIR
AC_SUBST(timeout)
AC_SUBST(password_timeout)
AC_SUBST(sudo_umask)
AC_SUBST(passprompt)
AC_SUBST(long_otp_prompt)
AC_SUBST(lecture)
AC_SUBST(logfac)
AC_SUBST(goodpri)
AC_SUBST(badpri)
AC_SUBST(loglen)
AC_SUBST(ignore_dot)
AC_SUBST(mail_no_user)
AC_SUBST(mail_no_host)
AC_SUBST(mail_no_perms)
AC_SUBST(mailto)
AC_SUBST(mailsub)
AC_SUBST(badpass_message)
AC_SUBST(fqdn)
AC_SUBST(runas_default)
AC_SUBST(env_editor)
AC_SUBST(passwd_tries)
AC_SUBST(tty_tickets)
AC_SUBST(insults)
dnl
dnl Initial values for above
dnl
timeout=5
password_timeout=5
sudo_umask=0022
passprompt="Password:"
long_otp_prompt=off
lecture=on
logfac=local2
goodpri=notice
badpri=alert
loglen=80
ignore_dot=off
mail_no_user=on
mail_no_host=off
mail_no_perms=off
mailto=root
mailsub='*** SECURITY information for %h ***'
badpass_message='Sorry, try again.'
fqdn=off
runas_default=root
env_editor=off
passwd_tries=3
tty_tickets=off
insults=off
dnl
d40 1
a40 1
dnl May be overridden by environment variables..
d71 1
a71 1
		AC_DEFINE(WITHOUT_PASSWD, 1, [Define to avoid using the passwd/shadow file for authentication.])
d79 1
a154 13
AC_ARG_WITH(efence, [  --with-efence           link with -lefence for malloc() debugging],
[case $with_efence in  
    yes)	echo 'Sudo will link with -lefence (Electric Fence)'
		LIBS="${LIBS} -lefence"
		if test -f /usr/local/lib/libefence.a; then
		    LDFLAGS="${LDFLAGS} -L/usr/local/lib"
		fi
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-efence: $with_efence"
		;;
esac])

d160 1
a160 1
		insults=on
d186 1
a186 1
    		AC_DEFINE(HAVE_SKEY, 1, [Define if you use S/Key.])
d201 1
a201 1
		AC_DEFINE(HAVE_OPIE, 1, [Define if you use NRL OPIE.])
d213 1
a213 1
    yes)	AC_DEFINE(LONG_OTP_PROMPT, 1, [Define if you want a two line OTP (S/Key or OPIE) prompt.])
a215 3
		long_otp_prompt=on
		;;
    no)		long_otp_prompt=off
d217 1
d225 1
a225 1
    *)		AC_DEFINE(HAVE_SECURID, 1, [Define if you use SecurID.])
d235 6
d242 1
a242 1
    *)		AC_DEFINE(HAVE_FWTK, 1, [Define if you use the FWTK authsrv daemon.])
d245 2
d249 1
a249 5
		if test "$with_fwtk" != "yes"; then
		    SUDO_LDFLAGS="${SUDO_LDFLAGS} -L${with_fwtk}"
		    CPPFLAGS="${CPPFLAGS} -I${with_fwtk}"
		    with_fwtk=yes
		fi
d275 1
a275 1
    yes)	AC_DEFINE(HAVE_AUTHENTICATE, 1, [Define if you use AIX general authentication.])
d288 1
a288 1
    yes)	AC_DEFINE(HAVE_PAM, 1, [Define if you use PAM.])
d301 1
a301 1
    yes)	AC_DEFINE(HAVE_AFS, 1, [Define if you use AFS.])
d313 1
a313 1
    yes)	AC_DEFINE(HAVE_DCE, 1, [Define if you use OSF DCE.])
d342 1
a342 1
    yes|short)	lecture=on
d344 2
a345 1
    no|none)	lecture=off
d349 1
a349 7
esac])
if test "$lecture" = "on"; then
    AC_MSG_RESULT(yes)
else
    AC_DEFINE(NO_LECTURE, 1, [Define if you don't want users to get the lecture the first they user sudo.])
    AC_MSG_RESULT(no)
fi
d358 1
a358 1
    syslog)	AC_DEFINE(LOGGING, SLOG_SYSLOG, [Define to SLOG_SYSLOG, SLOG_FILE, or SLOG_BOTH.])
d372 1
a372 1
AC_ARG_WITH(logfac, [  --with-logfac           syslog facility to log with (default is "local2")],
d378 2
a379 1
    authpriv|auth|daemon|user|local0|local1|local2|local3|local4|local5|local6|local7)		logfac=$with_logfac
d383 1
a383 3
esac])
AC_DEFINE_UNQUOTED(LOGFAC, "$logfac", [The syslog facility sudo will use.])
AC_MSG_RESULT($logfac)
d386 1
a386 1
AC_ARG_WITH(goodpri, [  --with-goodpri          syslog priority for commands (def is "notice")],
d392 2
a393 2
    alert|crit|debug|emerg|err|info|notice|warning)
		goodpri=$with_goodpri
d397 1
a397 3
esac])
AC_DEFINE_UNQUOTED(PRI_SUCCESS, "$goodpri", [The syslog priority sudo will use for successful attempts.])
AC_MSG_RESULT($goodpri)
d400 1
a400 1
AC_ARG_WITH(badpri, [  --with-badpri           syslog priority for failures (def is "alert")],
d406 2
a407 2
    alert|crit|debug|emerg|err|info|notice|warning)
		badpri=$with_badpri
d411 1
a411 3
esac])
AC_DEFINE_UNQUOTED(PRI_FAILURE, "$badpri", [The syslog priority sudo will use for unsuccessful attempts/errors.])
AC_MSG_RESULT(badpri)
d428 2
a429 1
    [[0-9]]*)	loglen=$with_loglen
d433 1
a433 3
esac])
AC_DEFINE_UNQUOTED(MAXLOGFILELEN, $loglen, [The max number of chars per log file line (for line wrapping).])
AC_MSG_RESULT($loglen)
d438 2
a439 1
    yes)	ignore_dot=on
d441 1
a441 1
    no)		ignore_dot=off
d445 25
a469 7
esac])
if test "$ignore_dot" = "on"; then
    AC_DEFINE(IGNORE_DOT_PATH, 1, [Define if you want to ignore '.' and empty \$PATH elements])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d474 2
a475 1
    yes)	mail_no_user=on
d477 1
a477 1
    no)		mail_no_user=off
d479 1
a479 1
    *)		AC_MSG_ERROR(["--with-mail-if-no-user does not take an argument."])
d481 1
a481 7
esac])
if test "$mail_no_user" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NO_USER, 1, [Define to send mail when the user is not in the sudoers file.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d486 2
a487 1
    yes)	mail_no_host=on
d489 1
a489 1
    no)		mail_no_host=off
d491 1
a491 1
    *)		AC_MSG_ERROR(["--with-mail-if-no-host does not take an argument."])
d493 1
a493 7
esac])
if test "$mail_no_host" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NO_HOST, 1, [Define to send mail when the user is not not allowed to run sudo on this host.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d498 2
a499 1
    yes)	mail_noperms=on
d501 1
a501 1
    no)		mail_noperms=off
d503 1
a503 1
    *)		AC_MSG_ERROR(["--with-mail-if-noperms does not take an argument."])
d505 1
a505 33
esac])
if test "$mail_noperms" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NOT_OK, 1, [Define to send mail when the user is not not allowed to run a command.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(who should get the mail that sudo sends)
AC_ARG_WITH(mailto, [  --with-mailto           who should get sudo mail (default is "root")],
[case $with_mailto in  
    yes)	AC_MSG_ERROR(["must give --with-mailto an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-mailto not supported."])
		;;
    *)		mailto=$with_mailto
		;;
esac])
AC_DEFINE_UNQUOTED(MAILTO, "$mailto", [The user or email address that sudo mail is sent to.])
AC_MSG_RESULT([$mailto])

AC_ARG_WITH(mailsubject, [  --with-mailsubject      subject of sudo mail],
[case $with_mailsubject in  
    yes)	AC_MSG_ERROR(["must give --with-mailsubject an argument."])
		;;
    no)		echo "Sorry, --without-mailsubject not supported."
		;;
    *)		mailsub="$with_mailsubject"
		AC_MSG_CHECKING(sudo mail subject)
		AC_MSG_RESULT([Using alert mail subject: $mailsub])
		;;
esac])
AC_DEFINE_UNQUOTED(MAILSUBJECT, "$mailsub", [The subject of the mail sent by sudo to the MAILTO user/address.])
d514 4
a517 4
    *)		passprompt="$with_passprompt"
esac])
AC_MSG_RESULT($passprompt)
AC_DEFINE_UNQUOTED(PASSPROMPT, "$passprompt", [The default password prompt.])
d526 2
a527 1
    *)		badpass_message="$with_badpass_message"
d529 1
a529 3
esac])
AC_DEFINE_UNQUOTED(INCORRECT_PASSWORD, "$badpass_message", [The message given when a bad password is entered.])
AC_MSG_RESULT([$badpass_message])
d534 2
a535 1
    yes)	fqdn=on
d537 1
a537 1
    no)		fqdn=off
d541 1
a541 7
esac])
if test "$fqdn" = "on"; then
    AC_DEFINE(FQDN, 1, [Define if you want to require fully qualified hosts in sudoers.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d557 1
a557 1
    *)		SUDO_DEFINE_UNQUOTED(_PATH_SUDO_SENDMAIL, "$with_sendmail")
d600 1
a600 1
AC_ARG_WITH(umask, [  --with-umask            umask with which the prog should run (default is 022)
d605 1
a605 1
    no)		sudo_umask=0777
d607 2
a608 1
    [[0-9]]*)	sudo_umask=$with_umask
d612 1
a612 7
esac])
AC_DEFINE_UNQUOTED(SUDO_UMASK, $sudo_umask, [The umask that the root-run prog should use.])
if test "$sudo_umask" = "0777"; then
    AC_MSG_RESULT(user)
else
    AC_MSG_RESULT($sudo_umask)
fi
d615 1
a615 1
AC_ARG_WITH(runas-default, [  --with-runas-default    User to run commands as (default is "root")],
d621 2
a622 1
    *)		runas_default="$with_runas_default"
d624 1
a624 3
esac])
AC_DEFINE_UNQUOTED(RUNAS_DEFAULT, "$runas_default", [The user sudo should run commands as by default.])
AC_MSG_RESULT([$runas_default])
d632 1
a632 1
    *)		AC_DEFINE_UNQUOTED(EXEMPTGROUP, "$with_exempt", [If defined, users in this group need not enter a passwd (ie "sudo").])
d645 1
a645 1
    *)		AC_DEFINE_UNQUOTED(EDITOR, "$with_editor", [A colon-separated list of pathnames to be used as the editor for visudo.])
d653 2
a654 1
    yes)	env_editor=on
d656 1
a656 1
    no)		env_editor=off
d660 1
a660 7
esac])
if test "$env_editor" = "on"; then
    AC_DEFINE(ENV_EDITOR, 1, [Define if you want visudo to honor the EDITOR and VISUAL env variables.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d665 3
a667 1
    yes)	;;
d670 2
a671 1
    [[1-9]]*)	passwd_tries=$with_passwd_tries
d675 1
a675 3
esac])
AC_DEFINE_UNQUOTED(TRIES_FOR_PASSWORD, $passwd_tries, [The number of tries a user gets to enter their password.])
AC_MSG_RESULT($passwd_tries)
d678 1
a678 1
AC_ARG_WITH(timeout, [  --with-timeout          minutes before sudo asks for passwd again (def is 5 minutes)],
d680 5
a684 2
    yes)	;;
    no)		timeout=0
d686 2
a687 1
    [[0-9]]*)	timeout=$with_timeout
d691 1
a691 3
esac])
AC_DEFINE_UNQUOTED(TIMEOUT, $timeout, [The number of minutes before sudo asks for a password again.])
AC_MSG_RESULT($timeout)
d694 1
a694 1
AC_ARG_WITH(password-timeout, [  --with-password-timeout passwd prompt timeout in minutes (default is 5 minutes)],
d696 5
a700 2
    yes)	;;
    no)		password_timeout=0
d702 2
a703 1
    [[0-9]]*)	password_timeout=$with_password_timeout
d707 1
a707 3
esac])
AC_DEFINE_UNQUOTED(PASSWORD_TIMEOUT, $password_timeout, [The passwd prompt timeout (in minutes).])
AC_MSG_RESULT($password_timeout)
d709 1
d712 1
a712 1
    yes)	AC_MSG_CHECKING(whether to use execvp or execv)
a713 1
		AC_DEFINE(USE_EXECV, 1, [Define if you wish to use execv() instead of execvp() when running programs.])
d715 2
a716 1
    no)		;;
d719 1
a719 1
esac])
d724 2
a725 1
    yes)	tty_tickets=on
d727 1
a727 1
    no)		tty_tickets=off
d731 1
a731 7
esac])
if test "$tty_tickets" = "on"; then
    AC_DEFINE(USE_TTY_TICKETS, 1, [Define if you want a different ticket file for each tty.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d736 2
a737 1
    yes)	insults=on
d741 1
a741 1
    no)		insults=off
d745 1
a745 7
esac])
if test "$insults" = "on"; then
    AC_DEFINE(USE_INSULTS, 1, [Define if you want to insult the user for entering an incorrect password.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d761 1
a761 1
    yes)	AC_DEFINE(CLASSIC_INSULTS, 1, [Define if you want the insults from the "classic" version sudo.])
d770 1
a770 1
    yes)	AC_DEFINE(CSOPS_INSULTS, 1, [Define if you want insults culled from the twisted minds of CSOps.])
d779 1
a779 1
    yes)	AC_DEFINE(HAL_INSULTS, 1, [Define if you want 2001-like insults.])
d786 1
a786 1
AC_ARG_WITH(goons-insults, [  --with-goons-insults    include the insults from the "Goon Show"],
d788 1
a788 1
    yes)	AC_DEFINE(GOONS_INSULTS, 1, [Define if you want insults from the "Goon Show".])
d796 1
a796 1
if test "$insults" = "on"; then
d809 1
a809 1
    yes)	AC_DEFINE_UNQUOTED(SECURE_PATH, "/bin:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc", [Define to override the user's path with a builtin one.])
d824 1
a824 1
    no)		AC_DEFINE(STUB_LOAD_INTERFACES, 1, [Define if the code in interfaces.c does not compile for you.])
d843 1
a843 1
		AC_DEFINE(NO_AUTHENTICATION, 1, [Define if you don't want sudo to prompt for a password by default.])
a850 30
AC_MSG_CHECKING(whether to disable running the mailer as root)
AC_ARG_ENABLE(root-mailer,
[  --disable-root-mailer   Don't run the mailer as root, run as the user],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(no)
		;;
    no)		AC_MSG_RESULT(yes)
		AC_DEFINE(NO_ROOT_MAILER, 1, [Define to avoid runing the mailer as root.])
		;;
    *)		AC_MSG_RESULT(no)
    		echo "Ignoring unknown argument to --enable-root-mailer: $enableval"
		;;
  esac
], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to disable use of POSIX saved ids)
AC_ARG_ENABLE(saved-ids,
[  --disable-saved-ids     Don't try to use POSIX saved ids],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(no)
		;;
    no)		AC_MSG_RESULT(yes)
		AC_DEFINE(NO_SAVED_IDS, 1, [Define to avoid using POSIX saved ids.])
		;;
    *)		AC_MSG_RESULT(no)
    		echo "Ignoring unknown argument to --enable-saved-ids: $enableval"
		;;
  esac
], AC_MSG_RESULT(no))

d868 1
a868 1
[  --disable-root-sudo     Don't allow root to run sudo],
d872 1
a872 1
    no)		AC_DEFINE(NO_ROOT_SUDO, 1, [Define if root should not be allowed to use sudo.])
d885 1
a885 1
		AC_DEFINE(HOST_IN_LOG, 1, [Define if you want the hostname to be entered into the log file.])
d900 1
a900 1
		AC_DEFINE(SHELL_IF_NO_ARGS, 1, [Define if you want sudo to start a shell if given no arguments.])
d913 1
a913 1
                          set $HOME to target user in shell mode],
d916 1
a916 1
		AC_DEFINE(SHELL_SETS_HOME, 1, [Define if you want sudo to set $HOME in shell mode.])
d933 1
a933 1
		AC_DEFINE(DONT_LEAK_PATH_INFO, 1, [Define if you want sudo to display "command not allowed" instead of "command not found" when a command cannot be found.])
a950 7
dnl Prevent configure from adding the -g flag unless in devel mode
dnl
if test "$with_devel" != "yes"; then
    ac_cv_prog_cc_g=no
fi

dnl
a953 1
AC_ISC_POSIX
d956 1
a956 1
AC_PROG_CC_STDC
d960 1
d1026 1
a1026 3
		    AC_CHECK_FUNCS(getpwanam issecure, , [break])
		    AH_TEMPLATE([HAVE_GETPWANAM], [Define if you have the `getpwanam' function. (SunOS 4.x shadow passwords)])
		    AH_TEMPLATE([HAVE_ISSECURE], [Define if you have the `issecure' function. (SunOS 4.x check for shadow enabled)])
d1037 2
a1038 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1043 1
a1043 1
		SUDO_DEFINE(_ALL_SOURCE)
d1051 2
a1052 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1055 16
d1072 1
a1072 1
		    AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) AC_CHECK_LIB(sec, iscomsec, AC_DEFINE(HAVE_ISCOMSEC, 1, [Define if you have the `iscomsec' function. (HP-UX >= 10.x check for shadow enabled)])) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"; SECUREWARE=1])
d1076 8
d1088 2
a1089 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1092 17
a1108 1
		AC_DEFINE(BROKEN_SYSLOG, 1, [Define if the `syslog' function returns a non-zero int to denote failure.])
a1111 1
		    AH_TEMPLATE([HAVE_GETSPWUID], [Define if you have the `getspwuid' function. (HP-UX <= 9.X shadow passwords)])
d1115 8
d1135 2
a1136 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1139 1
d1153 2
a1154 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1178 1
a1178 1
		    AC_CHECK_FUNC(sia_ses_init, AC_DEFINE(HAVE_SIA, 1, [Define if you use SIA.]) [
d1189 1
a1189 1
		    AC_DEFINE(HAVE_GETPRPWNAM, 1, [Define if you have the `getprpwnam' function.  (SecureWare-style shadow passwords)])
d1191 2
a1192 2
		    AC_CHECK_FUNCS(snprintf, , [NEED_SNPRINTF=1])
		    AC_CHECK_FUNCS(vsnprintf, , [NEED_SNPRINTF=1])
d1205 1
a1205 1
		elif test "$CHECKSIA" = "true"; then
d1209 2
a1210 2
		test -n "$mansectsu" || mansectsu=8
		test -n "$mansectform" || mansectform=4
d1213 3
d1239 2
a1240 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1243 3
d1248 1
a1248 1
		    AC_CHECK_FUNCS(getspnam, , [AC_CHECK_LIB(shadow, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lshadow"; LIBS="${LIBS} -lshadow"])])
d1253 1
a1253 1
		SUDO_DEFINE(_CONVEX_SOURCE)
d1266 1
a1266 1
		    AC_CHECK_LIB(auth, getauthuid, AC_DEFINE(HAVE_GETAUTHUID, 1, [Define if you have the `getauthuid' function.  (ULTRIX 4.x shadow passwords)]) [SUDO_LIBS="${SUDO_LIBS} -lauth"; LIBS="${LIBS} -lauth"])
d1274 2
a1275 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1287 2
a1288 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1290 1
a1290 1
    *-*-sco*|*-sco-*)
d1296 2
a1297 8
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		;;
    m88k-motorola-sysv*)
		# motorolla's cc (a variant of gcc) does -O but not -O2
		CFLAGS=`echo $CFLAGS | sed 's/-O2/-O/g'`
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1304 2
a1305 7
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		;;
    *-ncr-sysv4*|*-ncr-sysvr4*)
		AC_CHECK_LIB(c89, strcasecmp, AC_DEFINE(HAVE_STRCASECMP) [LIBS="${LIBS} -lc89"; ac_cv_func_strcasecmp=yes])
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1307 1
a1307 1
    *-ccur-sysv4*|*-ccur-sysvr4*)
d1310 2
a1311 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
a1334 12
    *-*-*openbsd*)
		BROKEN_SETREUID=yes
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
		;;
    *-*-*netbsd*)
		BROKEN_SETREUID=yes
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
		;;
a1339 5
    *-*-nextstep*)
		# lockf() on is broken on the NeXT -- use flock instead
		ac_cv_func_lockf=no
		ac_cv_func_flock=yes
		;;
d1341 2
a1342 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1357 1
a1357 1
    AC_CHECK_FUNCS(getspnam, [CHECKSHADOW="false"], [AC_CHECK_LIB(gen, getspnam, AC_DEFINE(HAVE_GETSPNAM, 1, [Define if you have the `getspnam' function (SVR4-style shadow passwords)]) [SUDO_LIBS="${SUDO_LIBS} -lgen"; LIBS="${LIBS} -lgen"])])
d1360 1
a1360 1
    AC_CHECK_FUNC(getprpwnam, [AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1], AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"], AC_CHECK_LIB(security, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsecurity"; LIBS="${LIBS} -lsecurity"], AC_CHECK_LIB(prot, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lprot"; LIBS="${LIBS} -lprot"])))])
a1367 1
AC_C_VOLATILE
a1371 2
SUDO_PROG_MV
SUDO_PROG_BSHELL
d1375 3
a1377 3
if test -z "$with_editor"; then
    SUDO_PROG_VI
fi
d1383 1
a1383 1
AC_CHECK_HEADERS(malloc.h paths.h utime.h netgroup.h sys/sockio.h sys/bsdtypes.h sys/select.h)
d1386 2
a1387 6
    AC_SYS_POSIX_TERMIOS
    if test "$ac_cv_sys_posix_termios" = "yes"; then
	AC_DEFINE(HAVE_TERMIOS_H, 1, [Define if you have the <termios.h> header file and the `tcgetattr' function.])
    else
	AC_CHECK_HEADERS(termio.h)
    fi
d1393 1
a1393 1
    AC_CHECK_HEADER(bsd_auth.h, AC_DEFINE(HAVE_BSD_AUTH_H, 1, [Define if you use BSD authentication.]) [with_passwd=no; AUTH_OBJS=bsdauth.o])
d1395 1
a1400 4
AC_CHECK_TYPES([sig_atomic_t], , [AC_DEFINE(sig_atomic_t, int, [Define to `int' if <signal.h> does not define.])], [#include <sys/types.h>
#include <signal.h>])
AC_CHECK_TYPES([sigaction_t], [AC_DEFINE(HAVE_SIGACTION_T, 1, [Define if <signal.h> has the sigaction_t typedef.])], ,[#include <sys/types.h>
#include <signal.h>])
d1419 1
a1419 8
AC_CHECK_FUNCS(strchr strrchr memchr memcpy memset sysconf tzset \
	       seteuid setegid strftime setrlimit initgroups fstat)
if test -z "$BROKEN_SETREUID"; then
    AC_CHECK_FUNCS(setreuid)
fi
if test X"$with_interfaces" != X"no"; then
    AC_CHECK_FUNCS(getifaddrs)
fi
d1421 3
a1423 1
    AC_CHECK_FUNCS(bigcrypt set_auth_parameters initprivs)
d1426 1
a1426 1
    AC_REPLACE_FUNCS(getcwd)
d1428 13
a1440 9
AC_CHECK_FUNCS(lockf flock, [break])
AC_CHECK_FUNCS(waitpid wait3, [break])
AC_CHECK_FUNCS(innetgr _innetgr, AC_CHECK_FUNCS(getdomainname) [break])
AC_CHECK_FUNCS(lsearch, , [AC_CHECK_LIB(compat, lsearch, AC_CHECK_HEADER(search.h, AC_DEFINE(HAVE_LSEARCH) [LIBS="${LIBS} -lcompat"], AC_LIBOBJ(lsearch)), AC_LIBOBJ(lsearch))])
AC_CHECK_FUNCS(utime, SUDO_FUNC_UTIME_POSIX, AC_LIBOBJ(utime))
SUDO_FUNC_FNMATCH(AC_DEFINE(HAVE_FNMATCH, 1, [Define if you have the `fnmatch' function.]), AC_LIBOBJ(fnmatch))
SUDO_FUNC_ISBLANK
AC_REPLACE_FUNCS(strerror strcasecmp sigaction)
AC_CHECK_FUNCS(snprintf vsnprintf asprintf vasprintf, , [NEED_SNPRINTF=1])
d1446 1
a1446 1
    AC_LIBOBJ(snprintf)
d1452 1
a1452 1
    AC_CHECK_FUNC(crypt, , [AC_CHECK_LIB(crypt, crypt, [SUDO_LIBS="${SUDO_LIBS} -lcrypt"; LIBS="${LIBS} -lcrypt"], AC_CHECK_LIB(crypt_d, crypt, [SUDO_LIBS="${SUDO_LIBS} -lcrypt_d"; LIBS="${LIBS} -lcrypt_d"], AC_CHECK_LIB(ufc, crypt, [SUDO_LIBS="${SUDO_LIBS} -lufc"; LIBS="${LIBS} -lufc"])))])
d1459 2
a1460 2
AC_CHECK_FUNC(socket, , [AC_CHECK_LIB(socket, socket, [NET_LIBS="${NET_LIBS} -lsocket"; LIBS="${LIBS} -lsocket"], AC_CHECK_LIB(inet, socket, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find socket() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, socket, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl)))])
d1465 2
a1466 2
AC_CHECK_FUNC(inet_addr, , [AC_CHECK_FUNC(__inet_addr, , AC_CHECK_LIB(nsl, inet_addr, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, inet_addr, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find inet_addr() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, inet_addr, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl))))])
d1470 1
a1470 1
AC_CHECK_FUNC(syslog, , [AC_CHECK_LIB(socket, syslog, [NET_LIBS="${NET_LIBS} -lsocket"; LIBS="${LIBS} -lsocket"], AC_CHECK_LIB(nsl, syslog, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, syslog, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"])))])
d1483 1
a1483 1
    AC_DEFINE(HAVE_KERB5, 1, [Define if you use Kerberos V.])
a1487 2
    elif test -f "/usr/krb5/include/krb5.h"; then
	CPPFLAGS="$CPPFLAGS -I/usr/krb5/include"
a1497 2
    elif test -f "/usr/krb5/lib/libkrb5.a"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/krb5/lib"
d1519 1
a1519 1
    AC_DEFINE(HAVE_KERB4, 1, [Define if you use Kerberos IV.])
a1615 1
    AC_CHECK_LIB(skey, skeyaccess, AC_DEFINE(HAVE_SKEYACCESS, 1, [Define if your S/Key library has skeyaccess().]))
d1673 1
a1673 1
    AC_DEFINE(WITHOUT_PASSWD, 1. [Define to avoid using the passwd/shadow file for authentication.])
a1721 64

dnl
dnl Special bits for autoheader   
dnl
AH_VERBATIM([_GNU_SOURCE],
[/* Enable GNU extensions on systems that have them. */
#ifndef _GNU_SOURCE
# define _GNU_SOURCE	1
#endif])

AH_VERBATIM([_ALL_SOURCE],
[/* Enable non-POSIX extensions on AIX. */
#ifndef _ALL_SOURCE
# undef _ALL_SOURCE
#endif])

AH_VERBATIM([_CONVEX_SOURCE],
[/* Enable non-POSIX extensions on ConvexOS. */
#ifndef _CONVEX_SOURCE
# undef _CONVEX_SOURCE
#endif])

AH_TOP([#ifndef _SUDO_CONFIG_H
#define _SUDO_CONFIG_H])

AH_BOTTOM([/*
 * Emulate a subset of waitpid() if we don't have it.
 */
#ifdef HAVE_WAITPID
# define sudo_waitpid(p, s, o)	waitpid(p, s, o)
#else
# ifdef HAVE_WAIT3
#  define sudo_waitpid(p, s, o)	wait3(s, o, NULL)
# endif
#endif

/* Solaris doesn't use const qualifiers in PAM. */
#ifdef sun
# define PAM_CONST
#else
# define PAM_CONST	const
#endif

#ifdef USE_EXECV
# define EXEC	execv
#else
# define EXEC	execvp
#endif /* USE_EXECV */

/* New ANSI-style OS defs for HP-UX and ConvexOS. */
#if defined(hpux) && !defined(__hpux)
# define __hpux		1
#endif /* hpux */

#if defined(convex) && !defined(__convex__)
# define __convex__	1
#endif /* convex */

/* BSD compatibility on some SVR4 systems. */
#ifdef __svr4__
# define BSD_COMP
#endif /* __svr4__ */

#endif /* _SUDO_CONFIG_H */])
@


1.6.4.1
log
@update to sudo 1.6.5p1
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.346 2002/01/16 23:37:34 millert Exp $
d5 1
a5 1
dnl Copyright (c) 1994-1996,1998-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d7 1
a7 1
AC_INIT(sudo, 1.6.5)
d12 1
a12 1
echo "Configuring Sudo version 1.6.5"
d14 1
a14 1
dnl Variables that get substituted in the Makefile and man pages
d33 1
a38 53
dnl Variables that get substituted in docs (not overridden by environment)
dnl
AC_SUBST(timedir)dnl initial value from SUDO_TIMEDIR
AC_SUBST(timeout)
AC_SUBST(password_timeout)
AC_SUBST(sudo_umask)
AC_SUBST(passprompt)
AC_SUBST(long_otp_prompt)
AC_SUBST(lecture)
AC_SUBST(logfac)
AC_SUBST(goodpri)
AC_SUBST(badpri)
AC_SUBST(loglen)
AC_SUBST(ignore_dot)
AC_SUBST(mail_no_user)
AC_SUBST(mail_no_host)
AC_SUBST(mail_no_perms)
AC_SUBST(mailto)
AC_SUBST(mailsub)
AC_SUBST(badpass_message)
AC_SUBST(fqdn)
AC_SUBST(runas_default)
AC_SUBST(env_editor)
AC_SUBST(passwd_tries)
AC_SUBST(tty_tickets)
AC_SUBST(insults)
dnl
dnl Initial values for above
dnl
timeout=5
password_timeout=5
sudo_umask=0022
passprompt="Password:"
long_otp_prompt=off
lecture=on
logfac=local2
goodpri=notice
badpri=alert
loglen=80
ignore_dot=off
mail_no_user=on
mail_no_host=off
mail_no_perms=off
mailto=root
mailsub='*** SECURITY information for %h ***'
badpass_message='Sorry, try again.'
fqdn=off
runas_default=root
env_editor=off
passwd_tries=3
tty_tickets=off
insults=off
dnl
d40 1
a40 1
dnl May be overridden by environment variables..
d71 1
a71 1
		AC_DEFINE(WITHOUT_PASSWD, 1, [Define to avoid using the passwd/shadow file for authentication.])
d79 1
a154 13
AC_ARG_WITH(efence, [  --with-efence           link with -lefence for malloc() debugging],
[case $with_efence in  
    yes)	echo 'Sudo will link with -lefence (Electric Fence)'
		LIBS="${LIBS} -lefence"
		if test -f /usr/local/lib/libefence.a; then
		    LDFLAGS="${LDFLAGS} -L/usr/local/lib"
		fi
		;;
    no)		;;
    *)		echo "Ignoring unknown argument to --with-efence: $with_efence"
		;;
esac])

d160 1
a160 1
		insults=on
d186 1
a186 1
    		AC_DEFINE(HAVE_SKEY, 1, [Define if you use S/Key.])
d201 1
a201 1
		AC_DEFINE(HAVE_OPIE, 1, [Define if you use NRL OPIE.])
d213 1
a213 1
    yes)	AC_DEFINE(LONG_OTP_PROMPT, 1, [Define if you want a two line OTP (S/Key or OPIE) prompt.])
a215 3
		long_otp_prompt=on
		;;
    no)		long_otp_prompt=off
d217 1
d225 1
a225 1
    *)		AC_DEFINE(HAVE_SECURID, 1, [Define if you use SecurID.])
d235 6
d242 1
a242 1
    *)		AC_DEFINE(HAVE_FWTK, 1, [Define if you use the FWTK authsrv daemon.])
d245 2
d249 1
a249 5
		if test "$with_fwtk" != "yes"; then
		    SUDO_LDFLAGS="${SUDO_LDFLAGS} -L${with_fwtk}"
		    CPPFLAGS="${CPPFLAGS} -I${with_fwtk}"
		    with_fwtk=yes
		fi
d275 1
a275 1
    yes)	AC_DEFINE(HAVE_AUTHENTICATE, 1, [Define if you use AIX general authentication.])
d288 1
a288 1
    yes)	AC_DEFINE(HAVE_PAM, 1, [Define if you use PAM.])
d301 1
a301 1
    yes)	AC_DEFINE(HAVE_AFS, 1, [Define if you use AFS.])
d313 1
a313 1
    yes)	AC_DEFINE(HAVE_DCE, 1, [Define if you use OSF DCE.])
d342 1
a342 1
    yes|short)	lecture=on
d344 2
a345 1
    no|none)	lecture=off
d349 1
a349 7
esac])
if test "$lecture" = "on"; then
    AC_MSG_RESULT(yes)
else
    AC_DEFINE(NO_LECTURE, 1, [Define if you don't want users to get the lecture the first they user sudo.])
    AC_MSG_RESULT(no)
fi
d358 1
a358 1
    syslog)	AC_DEFINE(LOGGING, SLOG_SYSLOG, [Define to SLOG_SYSLOG, SLOG_FILE, or SLOG_BOTH.])
d372 1
a372 1
AC_ARG_WITH(logfac, [  --with-logfac           syslog facility to log with (default is "local2")],
d378 2
a379 1
    authpriv|auth|daemon|user|local0|local1|local2|local3|local4|local5|local6|local7)		logfac=$with_logfac
d383 1
a383 3
esac])
AC_DEFINE_UNQUOTED(LOGFAC, "$logfac", [The syslog facility sudo will use.])
AC_MSG_RESULT($logfac)
d386 1
a386 1
AC_ARG_WITH(goodpri, [  --with-goodpri          syslog priority for commands (def is "notice")],
d392 2
a393 2
    alert|crit|debug|emerg|err|info|notice|warning)
		goodpri=$with_goodpri
d397 1
a397 3
esac])
AC_DEFINE_UNQUOTED(PRI_SUCCESS, "$goodpri", [The syslog priority sudo will use for successful attempts.])
AC_MSG_RESULT($goodpri)
d400 1
a400 1
AC_ARG_WITH(badpri, [  --with-badpri           syslog priority for failures (def is "alert")],
d406 2
a407 2
    alert|crit|debug|emerg|err|info|notice|warning)
		badpri=$with_badpri
d411 1
a411 3
esac])
AC_DEFINE_UNQUOTED(PRI_FAILURE, "$badpri", [The syslog priority sudo will use for unsuccessful attempts/errors.])
AC_MSG_RESULT(badpri)
d428 2
a429 1
    [[0-9]]*)	loglen=$with_loglen
d433 1
a433 3
esac])
AC_DEFINE_UNQUOTED(MAXLOGFILELEN, $loglen, [The max number of chars per log file line (for line wrapping).])
AC_MSG_RESULT($loglen)
d438 2
a439 1
    yes)	ignore_dot=on
d441 1
a441 1
    no)		ignore_dot=off
d445 25
a469 7
esac])
if test "$ignore_dot" = "on"; then
    AC_DEFINE(IGNORE_DOT_PATH, 1, [Define if you want to ignore '.' and empty \$PATH elements])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d474 2
a475 1
    yes)	mail_no_user=on
d477 1
a477 1
    no)		mail_no_user=off
d479 1
a479 1
    *)		AC_MSG_ERROR(["--with-mail-if-no-user does not take an argument."])
d481 1
a481 7
esac])
if test "$mail_no_user" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NO_USER, 1, [Define to send mail when the user is not in the sudoers file.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d486 2
a487 1
    yes)	mail_no_host=on
d489 1
a489 1
    no)		mail_no_host=off
d491 1
a491 1
    *)		AC_MSG_ERROR(["--with-mail-if-no-host does not take an argument."])
d493 1
a493 7
esac])
if test "$mail_no_host" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NO_HOST, 1, [Define to send mail when the user is not not allowed to run sudo on this host.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d498 2
a499 1
    yes)	mail_noperms=on
d501 1
a501 1
    no)		mail_noperms=off
d503 1
a503 1
    *)		AC_MSG_ERROR(["--with-mail-if-noperms does not take an argument."])
d505 1
a505 33
esac])
if test "$mail_noperms" = "on"; then
    AC_DEFINE(SEND_MAIL_WHEN_NOT_OK, 1, [Define to send mail when the user is not not allowed to run a command.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(who should get the mail that sudo sends)
AC_ARG_WITH(mailto, [  --with-mailto           who should get sudo mail (default is "root")],
[case $with_mailto in  
    yes)	AC_MSG_ERROR(["must give --with-mailto an argument."])
		;;
    no)		AC_MSG_ERROR(["--without-mailto not supported."])
		;;
    *)		mailto=$with_mailto
		;;
esac])
AC_DEFINE_UNQUOTED(MAILTO, "$mailto", [The user or email address that sudo mail is sent to.])
AC_MSG_RESULT([$mailto])

AC_ARG_WITH(mailsubject, [  --with-mailsubject      subject of sudo mail],
[case $with_mailsubject in  
    yes)	AC_MSG_ERROR(["must give --with-mailsubject an argument."])
		;;
    no)		echo "Sorry, --without-mailsubject not supported."
		;;
    *)		mailsub="$with_mailsubject"
		AC_MSG_CHECKING(sudo mail subject)
		AC_MSG_RESULT([Using alert mail subject: $mailsub])
		;;
esac])
AC_DEFINE_UNQUOTED(MAILSUBJECT, "$mailsub", [The subject of the mail sent by sudo to the MAILTO user/address.])
d514 4
a517 4
    *)		passprompt="$with_passprompt"
esac])
AC_MSG_RESULT($passprompt)
AC_DEFINE_UNQUOTED(PASSPROMPT, "$passprompt", [The default password prompt.])
d526 2
a527 1
    *)		badpass_message="$with_badpass_message"
d529 1
a529 3
esac])
AC_DEFINE_UNQUOTED(INCORRECT_PASSWORD, "$badpass_message", [The message given when a bad password is entered.])
AC_MSG_RESULT([$badpass_message])
d534 2
a535 1
    yes)	fqdn=on
d537 1
a537 1
    no)		fqdn=off
d541 1
a541 7
esac])
if test "$fqdn" = "on"; then
    AC_DEFINE(FQDN, 1, [Define if you want to require fully qualified hosts in sudoers.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d557 1
a557 1
    *)		SUDO_DEFINE_UNQUOTED(_PATH_SUDO_SENDMAIL, "$with_sendmail")
d600 1
a600 1
AC_ARG_WITH(umask, [  --with-umask            umask with which the prog should run (default is 022)
d605 1
a605 1
    no)		sudo_umask=0777
d607 2
a608 1
    [[0-9]]*)	sudo_umask=$with_umask
d612 1
a612 7
esac])
AC_DEFINE_UNQUOTED(SUDO_UMASK, $sudo_umask, [The umask that the root-run prog should use.])
if test "$sudo_umask" = "0777"; then
    AC_MSG_RESULT(user)
else
    AC_MSG_RESULT($sudo_umask)
fi
d615 1
a615 1
AC_ARG_WITH(runas-default, [  --with-runas-default    User to run commands as (default is "root")],
d621 2
a622 1
    *)		runas_default="$with_runas_default"
d624 1
a624 3
esac])
AC_DEFINE_UNQUOTED(RUNAS_DEFAULT, "$runas_default", [The user sudo should run commands as by default.])
AC_MSG_RESULT([$runas_default])
d632 1
a632 1
    *)		AC_DEFINE_UNQUOTED(EXEMPTGROUP, "$with_exempt", [If defined, users in this group need not enter a passwd (ie "sudo").])
d645 1
a645 1
    *)		AC_DEFINE_UNQUOTED(EDITOR, "$with_editor", [A colon-separated list of pathnames to be used as the editor for visudo.])
d653 2
a654 1
    yes)	env_editor=on
d656 1
a656 1
    no)		env_editor=off
d660 1
a660 7
esac])
if test "$env_editor" = "on"; then
    AC_DEFINE(ENV_EDITOR, 1, [Define if you want visudo to honor the EDITOR and VISUAL env variables.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d665 3
a667 1
    yes)	;;
d670 2
a671 1
    [[1-9]]*)	passwd_tries=$with_passwd_tries
d675 1
a675 3
esac])
AC_DEFINE_UNQUOTED(TRIES_FOR_PASSWORD, $passwd_tries, [The number of tries a user gets to enter their password.])
AC_MSG_RESULT($passwd_tries)
d678 1
a678 1
AC_ARG_WITH(timeout, [  --with-timeout          minutes before sudo asks for passwd again (def is 5 minutes)],
d680 5
a684 2
    yes)	;;
    no)		timeout=0
d686 2
a687 1
    [[0-9]]*)	timeout=$with_timeout
d691 1
a691 3
esac])
AC_DEFINE_UNQUOTED(TIMEOUT, $timeout, [The number of minutes before sudo asks for a password again.])
AC_MSG_RESULT($timeout)
d694 1
a694 1
AC_ARG_WITH(password-timeout, [  --with-password-timeout passwd prompt timeout in minutes (default is 5 minutes)],
d696 5
a700 2
    yes)	;;
    no)		password_timeout=0
d702 2
a703 1
    [[0-9]]*)	password_timeout=$with_password_timeout
d707 1
a707 3
esac])
AC_DEFINE_UNQUOTED(PASSWORD_TIMEOUT, $password_timeout, [The passwd prompt timeout (in minutes).])
AC_MSG_RESULT($password_timeout)
d709 1
d712 1
a712 1
    yes)	AC_MSG_CHECKING(whether to use execvp or execv)
a713 1
		AC_DEFINE(USE_EXECV, 1, [Define if you wish to use execv() instead of execvp() when running programs.])
d715 2
a716 1
    no)		;;
d719 1
a719 1
esac])
d724 2
a725 1
    yes)	tty_tickets=on
d727 1
a727 1
    no)		tty_tickets=off
d731 1
a731 7
esac])
if test "$tty_tickets" = "on"; then
    AC_DEFINE(USE_TTY_TICKETS, 1, [Define if you want a different ticket file for each tty.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d736 2
a737 1
    yes)	insults=on
d741 1
a741 1
    no)		insults=off
d745 1
a745 7
esac])
if test "$insults" = "on"; then
    AC_DEFINE(USE_INSULTS, 1, [Define if you want to insult the user for entering an incorrect password.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
d761 1
a761 1
    yes)	AC_DEFINE(CLASSIC_INSULTS, 1, [Define if you want the insults from the "classic" version sudo.])
d770 1
a770 1
    yes)	AC_DEFINE(CSOPS_INSULTS, 1, [Define if you want insults culled from the twisted minds of CSOps.])
d779 1
a779 1
    yes)	AC_DEFINE(HAL_INSULTS, 1, [Define if you want 2001-like insults.])
d786 1
a786 1
AC_ARG_WITH(goons-insults, [  --with-goons-insults    include the insults from the "Goon Show"],
d788 1
a788 1
    yes)	AC_DEFINE(GOONS_INSULTS, 1, [Define if you want insults from the "Goon Show".])
d796 1
a796 1
if test "$insults" = "on"; then
d809 1
a809 1
    yes)	AC_DEFINE_UNQUOTED(SECURE_PATH, "/bin:/usr/ucb:/usr/bin:/usr/sbin:/sbin:/usr/etc:/etc", [Define to override the user's path with a builtin one.])
d824 1
a824 1
    no)		AC_DEFINE(STUB_LOAD_INTERFACES, 1, [Define if the code in interfaces.c does not compile for you.])
d843 1
a843 1
		AC_DEFINE(NO_AUTHENTICATION, 1, [Define if you don't want sudo to prompt for a password by default.])
a850 30
AC_MSG_CHECKING(whether to disable running the mailer as root)
AC_ARG_ENABLE(root-mailer,
[  --disable-root-mailer   Don't run the mailer as root, run as the user],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(no)
		;;
    no)		AC_MSG_RESULT(yes)
		AC_DEFINE(NO_ROOT_MAILER, 1, [Define to avoid runing the mailer as root.])
		;;
    *)		AC_MSG_RESULT(no)
    		echo "Ignoring unknown argument to --enable-root-mailer: $enableval"
		;;
  esac
], AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to disable use of POSIX saved ids)
AC_ARG_ENABLE(saved-ids,
[  --disable-saved-ids     Don't try to use POSIX saved ids],
[ case "$enableval" in
    yes)	AC_MSG_RESULT(no)
		;;
    no)		AC_MSG_RESULT(yes)
		AC_DEFINE(NO_SAVED_IDS, 1, [Define to avoid using POSIX saved ids.])
		;;
    *)		AC_MSG_RESULT(no)
    		echo "Ignoring unknown argument to --enable-saved-ids: $enableval"
		;;
  esac
], AC_MSG_RESULT(no))

d868 1
a868 1
[  --disable-root-sudo     Don't allow root to run sudo],
d872 1
a872 1
    no)		AC_DEFINE(NO_ROOT_SUDO, 1, [Define if root should not be allowed to use sudo.])
d885 1
a885 1
		AC_DEFINE(HOST_IN_LOG, 1, [Define if you want the hostname to be entered into the log file.])
d900 1
a900 1
		AC_DEFINE(SHELL_IF_NO_ARGS, 1, [Define if you want sudo to start a shell if given no arguments.])
d913 1
a913 1
                          set $HOME to target user in shell mode],
d916 1
a916 1
		AC_DEFINE(SHELL_SETS_HOME, 1, [Define if you want sudo to set $HOME in shell mode.])
d933 1
a933 1
		AC_DEFINE(DONT_LEAK_PATH_INFO, 1, [Define if you want sudo to display "command not allowed" instead of "command not found" when a command cannot be found.])
a950 7
dnl Prevent configure from adding the -g flag unless in devel mode
dnl
if test "$with_devel" != "yes"; then
    ac_cv_prog_cc_g=no
fi

dnl
a953 1
AC_ISC_POSIX
d956 1
a956 1
AC_PROG_CC_STDC
d960 1
d1026 1
a1026 3
		    AC_CHECK_FUNCS(getpwanam issecure, , [break])
		    AH_TEMPLATE([HAVE_GETPWANAM], [Define if you have the `getpwanam' function. (SunOS 4.x shadow passwords)])
		    AH_TEMPLATE([HAVE_ISSECURE], [Define if you have the `issecure' function. (SunOS 4.x check for shadow enabled)])
d1037 2
a1038 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1043 1
a1043 1
		SUDO_DEFINE(_ALL_SOURCE)
d1051 2
a1052 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1055 16
d1072 1
a1072 1
		    AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) AC_CHECK_LIB(sec, iscomsec, AC_DEFINE(HAVE_ISCOMSEC, 1, [Define if you have the `iscomsec' function. (HP-UX >= 10.x check for shadow enabled)])) [SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"; SECUREWARE=1])
d1076 8
d1088 2
a1089 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1092 17
a1108 1
		AC_DEFINE(BROKEN_SYSLOG, 1, [Define if the `syslog' function returns a non-zero int to denote failure.])
a1111 1
		    AH_TEMPLATE([HAVE_GETSPWUID], [Define if you have the `getspwuid' function. (HP-UX <= 9.X shadow passwords)])
d1115 8
d1135 2
a1136 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1139 1
d1153 2
a1154 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1178 1
a1178 1
		    AC_CHECK_FUNC(sia_ses_init, AC_DEFINE(HAVE_SIA, 1, [Define if you use SIA.]) [
d1189 1
a1189 1
		    AC_DEFINE(HAVE_GETPRPWNAM, 1, [Define if you have the `getprpwnam' function.  (SecureWare-style shadow passwords)])
d1191 2
a1192 2
		    AC_CHECK_FUNCS(snprintf, , [NEED_SNPRINTF=1])
		    AC_CHECK_FUNCS(vsnprintf, , [NEED_SNPRINTF=1])
d1205 1
a1205 1
		elif test "$CHECKSIA" = "true"; then
d1209 2
a1210 2
		test -n "$mansectsu" || mansectsu=8
		test -n "$mansectform" || mansectform=4
d1213 3
d1239 2
a1240 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1243 3
d1248 1
a1248 1
		    AC_CHECK_FUNCS(getspnam, , [AC_CHECK_LIB(shadow, getspnam, AC_DEFINE(HAVE_GETSPNAM) [SUDO_LIBS="${SUDO_LIBS} -lshadow"; LIBS="${LIBS} -lshadow"])])
d1253 1
a1253 1
		SUDO_DEFINE(_CONVEX_SOURCE)
d1266 1
a1266 1
		    AC_CHECK_LIB(auth, getauthuid, AC_DEFINE(HAVE_GETAUTHUID, 1, [Define if you have the `getauthuid' function.  (ULTRIX 4.x shadow passwords)]) [SUDO_LIBS="${SUDO_LIBS} -lauth"; LIBS="${LIBS} -lauth"])
d1274 2
a1275 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1287 2
a1288 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1290 1
a1290 1
    *-*-sco*|*-sco-*)
d1296 2
a1297 8
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		;;
    m88k-motorola-sysv*)
		# motorolla's cc (a variant of gcc) does -O but not -O2
		CFLAGS=`echo $CFLAGS | sed 's/-O2/-O/g'`
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1304 2
a1305 7
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
		;;
    *-ncr-sysv4*|*-ncr-sysvr4*)
		AC_CHECK_LIB(c89, strcasecmp, AC_DEFINE(HAVE_STRCASECMP) [LIBS="${LIBS} -lc89"; ac_cv_func_strcasecmp=yes])
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1307 1
a1307 1
    *-ccur-sysv4*|*-ccur-sysvr4*)
d1310 2
a1311 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
a1334 12
    *-*-*openbsd*)
		BROKEN_SETREUID=yes
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
		;;
    *-*-*netbsd*)
		BROKEN_SETREUID=yes
		if test "$CHECKSHADOW" = "true"; then
		    CHECKSHADOW="false"
		fi
		;;
a1339 5
    *-*-nextstep*)
		# lockf() on is broken on the NeXT -- use flock instead
		ac_cv_func_lockf=no
		ac_cv_func_flock=yes
		;;
d1341 2
a1342 2
		test -n "$mansectsu" || mansectsu=1m
		test -n "$mansectform" || mansectform=4
d1357 1
a1357 1
    AC_CHECK_FUNCS(getspnam, [CHECKSHADOW="false"], [AC_CHECK_LIB(gen, getspnam, AC_DEFINE(HAVE_GETSPNAM, 1, [Define if you have the `getspnam' function (SVR4-style shadow passwords)]) [SUDO_LIBS="${SUDO_LIBS} -lgen"; LIBS="${LIBS} -lgen"])])
d1360 1
a1360 1
    AC_CHECK_FUNC(getprpwnam, [AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1], AC_CHECK_LIB(sec, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsec"; LIBS="${LIBS} -lsec"], AC_CHECK_LIB(security, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lsecurity"; LIBS="${LIBS} -lsecurity"], AC_CHECK_LIB(prot, getprpwnam, AC_DEFINE(HAVE_GETPRPWNAM) [CHECKSHADOW="false"; SECUREWARE=1; SUDO_LIBS="${SUDO_LIBS} -lprot"; LIBS="${LIBS} -lprot"])))])
a1367 1
AC_C_VOLATILE
a1371 2
SUDO_PROG_MV
SUDO_PROG_BSHELL
d1375 3
a1377 3
if test -z "$with_editor"; then
    SUDO_PROG_VI
fi
d1383 1
a1383 1
AC_CHECK_HEADERS(malloc.h paths.h utime.h netgroup.h sys/sockio.h sys/bsdtypes.h sys/select.h)
d1386 2
a1387 6
    AC_SYS_POSIX_TERMIOS
    if test "$ac_cv_sys_posix_termios" = "yes"; then
	AC_DEFINE(HAVE_TERMIOS_H, 1, [Define if you have the <termios.h> header file and the `tcgetattr' function.])
    else
	AC_CHECK_HEADERS(termio.h)
    fi
d1393 1
a1393 1
    AC_CHECK_HEADER(bsd_auth.h, AC_DEFINE(HAVE_BSD_AUTH_H, 1, [Define if you use BSD authentication.]) [with_passwd=no; AUTH_OBJS=bsdauth.o])
d1395 1
a1400 4
AC_CHECK_TYPES([sig_atomic_t], , [AC_DEFINE(sig_atomic_t, int, [Define to `int' if <signal.h> does not define.])], [#include <sys/types.h>
#include <signal.h>])
AC_CHECK_TYPES([sigaction_t], [AC_DEFINE(HAVE_SIGACTION_T, 1, [Define if <signal.h> has the sigaction_t typedef.])], ,[#include <sys/types.h>
#include <signal.h>])
d1419 1
a1419 8
AC_CHECK_FUNCS(strchr strrchr memchr memcpy memset sysconf tzset \
	       seteuid setegid strftime setrlimit initgroups fstat)
if test -z "$BROKEN_SETREUID"; then
    AC_CHECK_FUNCS(setreuid)
fi
if test X"$with_interfaces" != X"no"; then
    AC_CHECK_FUNCS(getifaddrs)
fi
d1421 3
a1423 1
    AC_CHECK_FUNCS(bigcrypt set_auth_parameters initprivs)
d1426 1
a1426 1
    AC_REPLACE_FUNCS(getcwd)
d1428 13
a1440 9
AC_CHECK_FUNCS(lockf flock, [break])
AC_CHECK_FUNCS(waitpid wait3, [break])
AC_CHECK_FUNCS(innetgr _innetgr, AC_CHECK_FUNCS(getdomainname) [break])
AC_CHECK_FUNCS(lsearch, , [AC_CHECK_LIB(compat, lsearch, AC_CHECK_HEADER(search.h, AC_DEFINE(HAVE_LSEARCH) [LIBS="${LIBS} -lcompat"], AC_LIBOBJ(lsearch)), AC_LIBOBJ(lsearch))])
AC_CHECK_FUNCS(utime, SUDO_FUNC_UTIME_POSIX, AC_LIBOBJ(utime))
SUDO_FUNC_FNMATCH(AC_DEFINE(HAVE_FNMATCH, 1, [Define if you have the `fnmatch' function.]), AC_LIBOBJ(fnmatch))
SUDO_FUNC_ISBLANK
AC_REPLACE_FUNCS(strerror strcasecmp sigaction)
AC_CHECK_FUNCS(snprintf vsnprintf asprintf vasprintf, , [NEED_SNPRINTF=1])
d1446 1
a1446 1
    AC_LIBOBJ(snprintf)
d1452 1
a1452 1
    AC_CHECK_FUNC(crypt, , [AC_CHECK_LIB(crypt, crypt, [SUDO_LIBS="${SUDO_LIBS} -lcrypt"; LIBS="${LIBS} -lcrypt"], AC_CHECK_LIB(crypt_d, crypt, [SUDO_LIBS="${SUDO_LIBS} -lcrypt_d"; LIBS="${LIBS} -lcrypt_d"], AC_CHECK_LIB(ufc, crypt, [SUDO_LIBS="${SUDO_LIBS} -lufc"; LIBS="${LIBS} -lufc"])))])
d1459 2
a1460 2
AC_CHECK_FUNC(socket, , [AC_CHECK_LIB(socket, socket, [NET_LIBS="${NET_LIBS} -lsocket"; LIBS="${LIBS} -lsocket"], AC_CHECK_LIB(inet, socket, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find socket() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, socket, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl)))])
d1465 2
a1466 2
AC_CHECK_FUNC(inet_addr, , [AC_CHECK_FUNC(__inet_addr, , AC_CHECK_LIB(nsl, inet_addr, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, inet_addr, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find inet_addr() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, inet_addr, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl))))])
d1470 1
a1470 1
AC_CHECK_FUNC(syslog, , [AC_CHECK_LIB(socket, syslog, [NET_LIBS="${NET_LIBS} -lsocket"; LIBS="${LIBS} -lsocket"], AC_CHECK_LIB(nsl, syslog, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, syslog, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"])))])
d1483 1
a1483 1
    AC_DEFINE(HAVE_KERB5, 1, [Define if you use Kerberos V.])
a1487 2
    elif test -f "/usr/krb5/include/krb5.h"; then
	CPPFLAGS="$CPPFLAGS -I/usr/krb5/include"
a1497 2
    elif test -f "/usr/krb5/lib/libkrb5.a"; then
	SUDO_LDFLAGS="${SUDO_LDFLAGS} -L/usr/krb5/lib"
d1519 1
a1519 1
    AC_DEFINE(HAVE_KERB4, 1, [Define if you use Kerberos IV.])
a1615 1
    AC_CHECK_LIB(skey, skeyaccess, AC_DEFINE(HAVE_SKEYACCESS, 1, [Define if your S/Key library has skeyaccess().]))
d1673 1
a1673 1
    AC_DEFINE(WITHOUT_PASSWD, 1. [Define to avoid using the passwd/shadow file for authentication.])
a1721 64

dnl
dnl Special bits for autoheader   
dnl
AH_VERBATIM([_GNU_SOURCE],
[/* Enable GNU extensions on systems that have them. */
#ifndef _GNU_SOURCE
# define _GNU_SOURCE	1
#endif])

AH_VERBATIM([_ALL_SOURCE],
[/* Enable non-POSIX extensions on AIX. */
#ifndef _ALL_SOURCE
# undef _ALL_SOURCE
#endif])

AH_VERBATIM([_CONVEX_SOURCE],
[/* Enable non-POSIX extensions on ConvexOS. */
#ifndef _CONVEX_SOURCE
# undef _CONVEX_SOURCE
#endif])

AH_TOP([#ifndef _SUDO_CONFIG_H
#define _SUDO_CONFIG_H])

AH_BOTTOM([/*
 * Emulate a subset of waitpid() if we don't have it.
 */
#ifdef HAVE_WAITPID
# define sudo_waitpid(p, s, o)	waitpid(p, s, o)
#else
# ifdef HAVE_WAIT3
#  define sudo_waitpid(p, s, o)	wait3(s, o, NULL)
# endif
#endif

/* Solaris doesn't use const qualifiers in PAM. */
#ifdef sun
# define PAM_CONST
#else
# define PAM_CONST	const
#endif

#ifdef USE_EXECV
# define EXEC	execv
#else
# define EXEC	execvp
#endif /* USE_EXECV */

/* New ANSI-style OS defs for HP-UX and ConvexOS. */
#if defined(hpux) && !defined(__hpux)
# define __hpux		1
#endif /* hpux */

#if defined(convex) && !defined(__convex__)
# define __convex__	1
#endif /* convex */

/* BSD compatibility on some SVR4 systems. */
#ifdef __svr4__
# define BSD_COMP
#endif /* __svr4__ */

#endif /* _SUDO_CONFIG_H */])
@


1.5
log
@sudo 1.6.3; see http://www.courtesan.com/sudo/current.html for a list
of changes.
@
text
@d323 1
a323 1
AC_ARG_WITH(logincap, [  --with-logincap         enable login class support],
d325 8
a332 3
    yes)	AC_DEFINE(HAVE_LOGINCAP)
		AC_MSG_CHECKING(whether to try BSD login capabilities database)
		AC_MSG_RESULT(yes)
d335 1
a335 1
    *)		AC_MSG_ERROR(["--with-logincap does not take an argument."])
d1325 3
d1389 7
a1597 12
fi

dnl
dnl extra login capabilities libs and includes
dnl
if test "$with_logincap" = "yes"; then
    SUDO_LIBS="${SUDO_LIBS} -lutil"
    if test -f /usr/include/login_cap.h -a -f /usr/include/sys/types.h -a -f /usr/lib/libutil.a; then
	:
    else
	echo 'Unable to locate libutil.a and/or login_cap.h, you will have to edit the Makefile and add -L/path/to/libutil to SUDO_LDFLAGS and/or -I/path/to/login_cap.h to CPPFLAGS'
    fi
@


1.4
log
@1.6.2p1
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.300 2000/01/27 20:01:37 millert Exp $
d12 1
a12 1
echo "Configuring Sudo version 1.6.2"
d16 1
a16 2
AC_SUBST(CFLAGS)dnl must not initialize CFLAGS, it is magic
PROGS="sudo visudo"
a17 1
CPPFLAGS=""
a18 1
LDFLAGS=""
a19 1
SUDO_LDFLAGS=""
a20 1
LIBS=""
a21 1
SUDO_LIBS=""
a22 1
NET_LIBS=""
a23 1
AFS_LIBS=""
a24 1
OSDEFS=""
a25 1
AUTH_OBJS=""
a26 1
LIBOBJS=""
a27 1
MANTYPE="man"
a28 1
MAN_POSTINSTALL=""
a29 1
SUDOERS_MODE=0440
a30 1
SUDOERS_UID=0
a31 1
SUDOERS_GID=0
d33 15
d49 4
a52 1
AC_SUBST(DEV)
d151 1
a151 1
    *)		echo "Ignoring unknown argument to --with-devel: $with_csops"
d323 11
d973 1
d1032 2
d1046 2
d1083 2
d1130 2
d1148 2
d1204 2
d1234 2
d1269 2
d1282 2
d1291 2
d1299 2
d1305 2
d1309 16
a1324 6
		# Use shlicc for BSD/OS 2.x unless asked to do otherwise
		if test "$OSREV" -ge 2 -a "${with_CC+set}" != set -a \
			"$ac_cv_prog_CC" = "gcc"; then
		    echo 'using shlicc as CC'
		    ac_cv_prog_CC=shlicc
		    CC="$ac_cv_prog_CC"
d1332 4
d1339 6
d1450 2
a1451 2
AC_CHECK_FUNC(inet_addr, ,AC_CHECK_LIB(nsl, inet_addr, [NET_LIBS="${NET_LIBS} -lnsl"; LIBS="${LIBS} -lnsl"], AC_CHECK_LIB(inet, inet_addr, [NET_LIBS="${NET_LIBS} -linet"; LIBS="${LIBS} -linet"], AC_MSG_WARN(unable to find socket() trying -lsocket -lnsl)
AC_CHECK_LIB(socket, inet_addr, [NET_LIBS="${NET_LIBS} -lsocket -lnsl"; LIBS="${LIBS} -lsocket -lnsl"], , -lnsl))))
d1586 12
d1703 1
a1703 1
dnl Substitute into the Makefiles
d1705 1
a1705 1
AC_OUTPUT(Makefile)
@


1.3
log
@sudo 1.6.2
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.299 2000/01/19 19:07:24 millert Exp $
d1436 7
a1470 7
fi

dnl
dnl PAM libs
dnl
if test "$with_pam" = "yes"; then
    SUDO_LIBS="${SUDO_LIBS} -ldl -lpam"
@


1.2
log
@sudo 1.6.1
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.294 1999/12/09 04:04:45 millert Exp $
d12 1
a12 1
echo "Configuring Sudo version 1.6.1"
d1036 12
a1060 9
		# DCE support (requires ANSI C compiler)
		if test "$with_DCE" = "yes"; then
		    if test -n "$GCC"; then
			CPPFLAGS="${CPPFLAGS} -D_HPUX_SOURCE"
		    else
			CPPFLAGS="${CPPFLAGS} -Aa -D_HPUX_SOURCE"
		    fi
		fi

d1071 12
d1103 1
a1103 6

		    if test -n "$GCC"; then
			CPPFLAGS="${CPPFLAGS} -D_HPUX_SOURCE -D_REENTRANT -I/usr/include/reentrant"
		    else
			CPPFLAGS="${CPPFLAGS} -Aa -D_HPUX_SOURCE -D_REENTRANT -I/usr/include/reentrant"
		    fi
d1346 1
a1346 1
AC_CHECK_FUNCS(strchr strrchr memchr memcpy memset sysconf sigaction tzset seteuid ftruncate strftime setrlimit initgroups)
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
dnl $Sudo: configure.in,v 1.291 1999/11/08 22:45:42 millert Exp $
d12 1
a12 1
echo "Configuring Sudo version 1.6"
d1307 1
a1307 1
AC_CHECK_HEADERS(string.h strings.h unistd.h malloc.h paths.h utime.h fnmatch.h netgroup.h sys/sockio.h sys/bsdtypes.h sys/select.h)
d1336 1
a1336 1
AC_CHECK_FUNCS(strchr strrchr memchr memcpy memset sysconf sigaction tzset seteuid ftruncate strftime setrlimit)
@


1.1.1.1
log
@sudo 1.6, now with a BSD license
@
text
@@
