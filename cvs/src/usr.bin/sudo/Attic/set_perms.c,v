head	1.17;
access;
symbols
	OPENBSD_5_7:1.16.0.18
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.22
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.20
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.16
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.14
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.12
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.10
	OPENBSD_5_0:1.16.0.8
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_2_9:1.4.0.4
	OPENBSD_3_0:1.4.0.2;
locks; strict;
comment	@ * @;


1.17
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.16;
commitid	8ra5qnWqy2bUhcZn;

1.16
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.29.13.40.26;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.21.14.48.42;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2007.12.03.15.09.47;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.21.16.52.40;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.15.21.23.54;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.20.12.32.11;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.23.23.03.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.17.01.03.21;	author millert;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2002.01.16.18.09.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.14.00.11.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	;

1.4.2.1
date	2002.01.18.16.14.46;	author millert;	state Exp;
branches;
next	;

1.4.4.1
date	2002.01.18.17.20.23;	author millert;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 1994-1996,1998-2009 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#include <config.h>

#include <sys/types.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <pwd.h>
#include <errno.h>
#include <grp.h>
#ifdef HAVE_LOGIN_CAP_H
# include <login_cap.h>
#endif

#include "sudo.h"

#ifdef __TANDEM
# define ROOT_UID	65535
#else
# define ROOT_UID	0
#endif

/*
 * Prototypes
 */
static void runas_setup		__P((void));
static void runas_setgroups	__P((void));
static void restore_groups	__P((void));

static int current_perm = -1;

#ifdef HAVE_SETRESUID
/*
 * Set real and effective and saved uids and gids based on perm.
 * We always retain a saved uid of 0 unless we are headed for an exec().
 * We only flip the effective gid since it only changes for PERM_SUDOERS.
 * This version of set_perms() works fine with the "stay_setuid" option.
 */
int
set_perms(perm)
    int perm;
{
    const char *errstr;
    int noexit;

    noexit = ISSET(perm, PERM_NOEXIT);
    CLR(perm, PERM_MASK);

    if (perm == current_perm)
	return(1);

    switch (perm) {
	case PERM_ROOT:
				if (setresuid(ROOT_UID, ROOT_UID, ROOT_UID)) {
				    errstr = "setresuid(ROOT_UID, ROOT_UID, ROOT_UID)";
				    goto bad;
				}
				(void) setresgid(-1, user_gid, -1);
				if (current_perm == PERM_RUNAS)
				    restore_groups();
			      	break;

	case PERM_USER:
    	    	    	        (void) setresgid(-1, user_gid, -1);
				if (setresuid(user_uid, user_uid, ROOT_UID)) {
				    errstr = "setresuid(user_uid, user_uid, ROOT_UID)";
				    goto bad;
				}
			      	break;
				
	case PERM_FULL_USER:
				/* headed for exec() */
    	    	    	        (void) setgid(user_gid);
				if (setresuid(user_uid, user_uid, user_uid)) {
				    errstr = "setresuid(user_uid, user_uid, user_uid)";
				    goto bad;
				}
			      	break;
				
	case PERM_RUNAS:
				runas_setgroups();
				(void) setresgid(-1, runas_gr ?
				    runas_gr->gr_gid : runas_pw->pw_gid, -1);
				if (setresuid(-1, runas_pw ? runas_pw->pw_uid :
				    user_uid, -1)) {
				    errstr = "unable to change to runas uid";
				    goto bad;
				}
			      	break;

	case PERM_FULL_RUNAS:
				/* headed for exec(), assume euid == ROOT_UID */
				runas_setup();
				if (setresuid(def_stay_setuid ?
				    user_uid : runas_pw->pw_uid,
				    runas_pw->pw_uid, runas_pw->pw_uid)) {
				    errstr = "unable to change to runas uid";
				    goto bad;
				}
				break;

	case PERM_SUDOERS:
				/* assume euid == ROOT_UID, ruid == user */
				if (setresgid(-1, SUDOERS_GID, -1))
				    error(1, "unable to change to sudoers gid");

				/*
				 * If SUDOERS_UID == ROOT_UID and SUDOERS_MODE
				 * is group readable we use a non-zero
				 * uid in order to avoid NFS lossage.
				 * Using uid 1 is a bit bogus but should
				 * work on all OS's.
				 */
				if (SUDOERS_UID == ROOT_UID) {
				    if ((SUDOERS_MODE & 040) && setresuid(ROOT_UID, 1, ROOT_UID)) {
					errstr = "setresuid(ROOT_UID, 1, ROOT_UID)";
					goto bad;
				    }
				} else {
				    if (setresuid(ROOT_UID, SUDOERS_UID, ROOT_UID)) {
					errstr = "setresuid(ROOT_UID, SUDOERS_UID, ROOT_UID)";
					goto bad;
				    }
				}
			      	break;
	case PERM_TIMESTAMP:
				if (setresuid(ROOT_UID, timestamp_uid, ROOT_UID)) {
				    errstr = "setresuid(ROOT_UID, timestamp_uid, ROOT_UID)";
				    goto bad;
				}
			      	break;
    }

    current_perm = perm;
    return(1);
bad:
    warningx("%s: %s", errstr,
	errno == EAGAIN ? "too many processes" : strerror(errno));
    if (noexit)
	return(0);
    exit(1);
}

#else
# ifdef HAVE_SETREUID

/*
 * Set real and effective uids and gids based on perm.
 * We always retain a real or effective uid of ROOT_UID unless
 * we are headed for an exec().
 * This version of set_perms() works fine with the "stay_setuid" option.
 */
int
set_perms(perm)
    int perm;
{
    const char *errstr;
    int noexit;

    noexit = ISSET(perm, PERM_NOEXIT);
    CLR(perm, PERM_MASK);

    if (perm == current_perm)
	return(1);

    switch (perm) {
	case PERM_ROOT:
				if (setreuid(-1, ROOT_UID)) {
				    errstr = "setreuid(-1, ROOT_UID)";
				    goto bad;
				}
				if (setuid(ROOT_UID)) {
				    errstr = "setuid(ROOT_UID)";
				    goto bad;
				}
				(void) setregid(-1, user_gid);
				if (current_perm == PERM_RUNAS)
				    restore_groups();
			      	break;

	case PERM_USER:
    	    	    	        (void) setregid(-1, user_gid);
				if (setreuid(ROOT_UID, user_uid)) {
				    errstr = "setreuid(ROOT_UID, user_uid)";
				    goto bad;
				}
			      	break;
				
	case PERM_FULL_USER:
				/* headed for exec() */
    	    	    	        (void) setgid(user_gid);
				if (setreuid(user_uid, user_uid)) {
				    errstr = "setreuid(user_uid, user_uid)";
				    goto bad;
				}
			      	break;
				
	case PERM_RUNAS:
				runas_setgroups();
				(void) setregid(-1, runas_gr ?
				    runas_gr->gr_gid : runas_pw->pw_gid);
				if (setreuid(-1,
				    runas_pw ? runas_pw->pw_uid : user_uid)) {
				    errstr = "unable to change to runas uid";
				    goto bad;
				}
			      	break;

	case PERM_FULL_RUNAS:
				/* headed for exec(), assume euid == ROOT_UID */
				runas_setup();
				if (setreuid(def_stay_setuid ? user_uid :
				    runas_pw->pw_uid, runas_pw->pw_uid)) {
				    errstr = "unable to change to runas uid";
				    goto bad;
				}
				break;

	case PERM_SUDOERS:
				/* assume euid == ROOT_UID, ruid == user */
				if (setregid(-1, SUDOERS_GID))
				    error(1, "unable to change to sudoers gid");

				/*
				 * If SUDOERS_UID == ROOT_UID and SUDOERS_MODE
				 * is group readable we use a non-zero
				 * uid in order to avoid NFS lossage.
				 * Using uid 1 is a bit bogus but should
				 * work on all OS's.
				 */
				if (SUDOERS_UID == ROOT_UID) {
				    if ((SUDOERS_MODE & 040) && setreuid(ROOT_UID, 1)) {
					errstr = "setreuid(ROOT_UID, 1)";
					goto bad;
				    }
				} else {
				    if (setreuid(ROOT_UID, SUDOERS_UID)) {
					errstr = "setreuid(ROOT_UID, SUDOERS_UID)";
					goto bad;
				    }
				}
			      	break;
	case PERM_TIMESTAMP:
				if (setreuid(ROOT_UID, timestamp_uid)) {
				    errstr = "setreuid(ROOT_UID, timestamp_uid)";
				    goto bad;
				}
			      	break;
    }

    current_perm = perm;
    return(1);
bad:
    warningx("%s: %s", errstr,
	errno == EAGAIN ? "too many processes" : strerror(errno));
    if (noexit)
	return(0);
    exit(1);
}

# else /* !HAVE_SETRESUID && !HAVE_SETREUID */
# ifdef HAVE_SETEUID

/*
 * Set real and effective uids and gids based on perm.
 * NOTE: does not support the "stay_setuid" option.
 */
int
set_perms(perm)
    int perm;
{
    const char *errstr;
    int noexit;

    noexit = ISSET(perm, PERM_NOEXIT);
    CLR(perm, PERM_MASK);

    if (perm == current_perm)
	return(1);

    /*
     * Since we only have setuid() and seteuid() and semantics
     * for these calls differ on various systems, we set
     * real and effective uids to ROOT_UID initially to be safe.
     */
    if (seteuid(ROOT_UID)) {
	errstr = "seteuid(ROOT_UID)";
	goto bad;
    }
    if (setuid(ROOT_UID)) {
	errstr = "setuid(ROOT_UID)";
	goto bad;
    }

    switch (perm) {
	case PERM_ROOT:
				/* uid set above */
				(void) setegid(user_gid);
				if (current_perm == PERM_RUNAS)
				    restore_groups();
			      	break;

	case PERM_USER:
    	    	    	        (void) setegid(user_gid);
				if (seteuid(user_uid)) {
				    errstr = "seteuid(user_uid)";
				    goto bad;
				}
			      	break;
				
	case PERM_FULL_USER:
				/* headed for exec() */
    	    	    	        (void) setgid(user_gid);
				if (setuid(user_uid)) {
				    errstr = "setuid(user_uid)";
				    goto bad;
				}
			      	break;
				
	case PERM_RUNAS:
				runas_setgroups();
				(void) setegid(runas_gr ?
				    runas_gr->gr_gid : runas_pw->pw_gid);
				if (seteuid(runas_pw ? runas_pw->pw_uid : user_uid)) {
				    errstr = "unable to change to runas uid";
				    goto bad;
				}
			      	break;

	case PERM_FULL_RUNAS:
				/* headed for exec() */
				runas_setup();
				if (setuid(runas_pw->pw_uid)) {
				    errstr = "unable to change to runas uid";
				    goto bad;
				}
				break;

	case PERM_SUDOERS:
				if (setegid(SUDOERS_GID))
				    error(1, "unable to change to sudoers gid");

				/*
				 * If SUDOERS_UID == ROOT_UID and SUDOERS_MODE
				 * is group readable we use a non-zero
				 * uid in order to avoid NFS lossage.
				 * Using uid 1 is a bit bogus but should
				 * work on all OS's.
				 */
				if (SUDOERS_UID == ROOT_UID) {
				    if ((SUDOERS_MODE & 040) && seteuid(1)) {
					errstr = "seteuid(1)";
					goto bad;
				    }
				} else {
				    if (seteuid(SUDOERS_UID)) {
					errstr = "seteuid(SUDOERS_UID)";
					goto bad;
				    }
				}
			      	break;
	case PERM_TIMESTAMP:
				if (seteuid(timestamp_uid)) {
				    errstr = "seteuid(timestamp_uid)";
				    goto bad;
				}
			      	break;
    }

    current_perm = perm;
    return(1);
bad:
    warningx("%s: %s", errstr,
	errno == EAGAIN ? "too many processes" : strerror(errno));
    if (noexit)
	return(0);
    exit(1);
}

# else /* !HAVE_SETRESUID && !HAVE_SETREUID && !HAVE_SETEUID */

/*
 * Set uids and gids based on perm via setuid() and setgid().
 * NOTE: does not support the "stay_setuid" or timestampowner options.
 *       Also, SUDOERS_UID and SUDOERS_GID are not used.
 */
int
set_perms(perm)
    int perm;
{
    const char *errstr;
    int noexit;

    noexit = ISSET(perm, PERM_NOEXIT);
    CLR(perm, PERM_MASK);

    if (perm == current_perm)
	return(1);

    switch (perm) {
	case PERM_ROOT:
				if (setuid(ROOT_UID)) {
				    errstr = "setuid(ROOT_UID)";
				    goto bad;
				}
				if (current_perm == PERM_RUNAS)
				    restore_groups();
				break;

	case PERM_FULL_USER:
    	    	    	        (void) setgid(user_gid);
				if (setuid(user_uid)) {
				    errstr = "setuid(user_uid)";
				    goto bad;
				}
			      	break;
				
	case PERM_FULL_RUNAS:
				runas_setup();
				if (setuid(runas_pw->pw_uid)) {
				    errstr = "unable to change to runas uid";
				    goto bad;
				}
				break;

	case PERM_USER:
	case PERM_SUDOERS:
	case PERM_RUNAS:
	case PERM_TIMESTAMP:
				/* Unsupported since we can't set euid. */
				break;
    }

    current_perm = perm;
    return(1);
bad:
    warningx("%s: %s", errstr,
	errno == EAGAIN ? "too many processes" : strerror(errno));
    if (noexit)
	return(0);
    exit(1);
}
#  endif /* HAVE_SETEUID */
# endif /* HAVE_SETREUID */
#endif /* HAVE_SETRESUID */

#ifdef HAVE_INITGROUPS
static void
runas_setgroups()
{
    static int ngroups = -1;
#ifdef HAVE_GETGROUPS
    static GETGROUPS_T *groups;
#endif
    struct passwd *pw;

    if (def_preserve_groups)
	return;

    /*
     * Use stashed copy of runas groups if available, else initgroups and stash.
     */
    if (ngroups == -1) {
	pw = runas_pw ? runas_pw : sudo_user.pw;
	if (initgroups(pw->pw_name, pw->pw_gid) < 0)
	    log_error(USE_ERRNO|MSG_ONLY, "can't set runas group vector");
#ifdef HAVE_GETGROUPS
	if ((ngroups = getgroups(0, NULL)) > 0) {
	    groups = emalloc2(ngroups, sizeof(GETGROUPS_T));
	    if (getgroups(ngroups, groups) < 0)
		log_error(USE_ERRNO|MSG_ONLY, "can't get runas group vector");
	}
    } else {
	if (setgroups(ngroups, groups) < 0)
	    log_error(USE_ERRNO|MSG_ONLY, "can't set runas group vector");
#endif /* HAVE_GETGROUPS */
    }
}

static void
restore_groups()
{
    if (setgroups(user_ngroups, user_groups) < 0)
	log_error(USE_ERRNO|MSG_ONLY, "can't reset user group vector");
}

#else

static void
runas_setgroups()
{
    /* STUB */
}

static void
restore_groups()
{
    /* STUB */
}

#endif /* HAVE_INITGROUPS */

static void
runas_setup()
{
    gid_t gid;
#ifdef HAVE_LOGIN_CAP_H
    int flags;
    extern login_cap_t *lc;
#endif

    if (runas_pw->pw_name != NULL) {
	gid = runas_gr ? runas_gr->gr_gid : runas_pw->pw_gid;
#ifdef HAVE_GETUSERATTR
	aix_setlimits(runas_pw->pw_name);
#endif
#ifdef HAVE_PAM
	pam_prep_user(runas_pw);
#endif /* HAVE_PAM */

#ifdef HAVE_LOGIN_CAP_H
	if (def_use_loginclass) {
	    /*
             * We only use setusercontext() to set the nice value and rlimits.
	     */
	    flags = LOGIN_SETRESOURCES|LOGIN_SETPRIORITY;
	    if (setusercontext(lc, runas_pw, runas_pw->pw_uid, flags)) {
		if (runas_pw->pw_uid != ROOT_UID)
		    error(1, "unable to set user context");
		else
		    warning("unable to set user context");
	    }
	}
#endif /* HAVE_LOGIN_CAP_H */
	/*
	 * Initialize group vector
	 */
	runas_setgroups();
#ifdef HAVE_SETEUID
	if (setegid(gid))
	    warning("cannot set egid to runas gid");
#endif
	if (setgid(gid))
	    warning("cannot set gid to runas gid");
    }
}
@


1.16
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.15
log
@sync with sudo 1.7.2
@
text
@a53 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: set_perms.c,v 1.49 2009/06/25 12:44:33 millert Exp $";
#endif /* lint */

@


1.14
log
@Upgrade to sudo 1.7.2
@
text
@d55 1
a55 1
__unused static const char rcsid[] = "$Sudo: set_perms.c,v 1.48 2009/05/25 12:02:41 millert Exp $";
d580 5
a584 1
	if (setegid(gid) || setgid(gid))
@


1.13
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d2 1
a2 1
 * Copyright (c) 1994-1996,1998-2008 Todd C. Miller <Todd.Miller@@courtesan.com>
d55 1
a55 1
__unused static const char rcsid[] = "$Sudo: set_perms.c,v 1.44 2008/03/06 17:19:56 millert Exp $";
d80 1
a80 1
void
d85 4
d91 1
a91 1
	return;
d176 1
a176 1
    return;
d178 1
a178 1
    errorx(1, "%s: %s", errstr,
d180 3
d194 1
a194 1
void
d199 4
d205 1
a205 1
	return;
d293 1
a293 1
    return;
d295 1
a295 1
    errorx(1, "%s: %s", errstr,
d297 3
d309 1
a309 1
void
d314 4
d320 1
a320 1
	return;
d412 1
a412 1
    return;
d414 1
a414 1
    errorx(1, "%s: %s", errstr,
d416 3
d428 1
a428 1
void
d433 4
d439 1
a439 1
	return;
d476 1
a476 1
    return;
d478 1
a478 1
    errorx(1, "%s: %s", errstr,
d480 3
d493 1
d495 1
d508 6
a513 5
	if ((ngroups = getgroups(0, NULL)) < 0)
	    log_error(USE_ERRNO|MSG_ONLY, "can't get runas ngroups");
	groups = emalloc2(ngroups, sizeof(GETGROUPS_T));
	if (getgroups(ngroups, groups) < 0)
	    log_error(USE_ERRNO|MSG_ONLY, "can't get runas group vector");
d517 1
d565 1
a565 1
             * We only use setusercontext() set the nice value and rlimits.
a567 4
	    if (!def_preserve_groups)
		SET(flags, LOGIN_SETGROUP);
	    else if (setgid(gid))
		warning("cannot set gid to runas gid");
a575 2
	if (setgid(gid))
	    warning("cannot set gid to runas gid");
d580 2
@


1.12
log
@update to sudo 1.6.9p9
@
text
@d2 1
a2 1
 * Copyright (c) 1994-1996,1998-2006 Todd C. Miller <Todd.Miller@@courtesan.com>
a44 5
#ifdef HAVE_ERR_H
# include <err.h>
#else
# include "emul/err.h"
#endif /* HAVE_ERR_H */
d55 1
a55 1
__unused static const char rcsid[] = "$Sudo: set_perms.c,v 1.30.2.7 2007/11/27 23:41:23 millert Exp $";
d84 2
d91 4
a94 2
				if (setresuid(ROOT_UID, ROOT_UID, ROOT_UID))
				    errx(1, "setresuid(ROOT_UID, ROOT_UID, ROOT_UID) failed, your operating system may have a broken setresuid() function\nTry running configure with --disable-setresuid");
d102 4
a105 2
				if (setresuid(user_uid, user_uid, ROOT_UID))
				    err(1, "setresuid(user_uid, user_uid, ROOT_UID)");
d111 4
a114 2
				if (setresuid(user_uid, user_uid, user_uid))
				    err(1, "setresuid(user_uid, user_uid, user_uid)");
d119 7
a125 3
				(void) setresgid(-1, runas_pw->pw_gid, -1);
				if (setresuid(-1, runas_pw->pw_uid, -1))
				    err(1, "unable to change to runas uid");
d133 4
a136 2
				    runas_pw->pw_uid, runas_pw->pw_uid))
				    err(1, "unable to change to runas uid");
d142 1
a142 1
				    err(1, "unable to change to sudoers gid");
d152 4
a155 2
				    if ((SUDOERS_MODE & 040) && setresuid(ROOT_UID, 1, ROOT_UID))
					err(1, "setresuid(ROOT_UID, 1, ROOT_UID)");
d157 4
a160 2
				    if (setresuid(ROOT_UID, SUDOERS_UID, ROOT_UID))
					err(1, "setresuid(ROOT_UID, SUDOERS_UID, ROOT_UID)");
d164 4
a167 2
				if (setresuid(ROOT_UID, timestamp_uid, ROOT_UID))
				    err(1, "setresuid(ROOT_UID, timestamp_uid, ROOT_UID)");
d172 4
d191 2
d198 8
a205 4
				if (setreuid(-1, ROOT_UID))
				    errx(1, "setreuid(-1, ROOT_UID) failed, your operating system may have a broken setreuid() function\nTry running configure with --disable-setreuid");
				if (setuid(ROOT_UID))
				    err(1, "setuid(ROOT_UID)");
d213 4
a216 2
				if (setreuid(ROOT_UID, user_uid))
				    err(1, "setreuid(ROOT_UID, user_uid)");
d222 4
a225 2
				if (setreuid(user_uid, user_uid))
				    err(1, "setreuid(user_uid, user_uid)");
d230 7
a236 3
				(void) setregid(-1, runas_pw->pw_gid);
				if (setreuid(-1, runas_pw->pw_uid))
				    err(1, "unable to change to runas uid");
d243 4
a246 2
				    runas_pw->pw_uid, runas_pw->pw_uid))
				    err(1, "unable to change to runas uid");
d252 1
a252 1
				    err(1, "unable to change to sudoers gid");
d262 4
a265 2
				    if ((SUDOERS_MODE & 040) && setreuid(ROOT_UID, 1))
					err(1, "setreuid(ROOT_UID, 1)");
d267 4
a270 2
				    if (setreuid(ROOT_UID, SUDOERS_UID))
					err(1, "setreuid(ROOT_UID, SUDOERS_UID)");
d274 4
a277 2
				if (setreuid(ROOT_UID, timestamp_uid))
				    err(1, "setreuid(ROOT_UID, timestamp_uid)");
d282 4
d299 2
d309 8
a316 4
    if (seteuid(ROOT_UID))
	err(1, "seteuid(ROOT_UID)");
    if (setuid(ROOT_UID))
	err(1, "setuid(ROOT_UID)");
d328 4
a331 2
				if (seteuid(user_uid))
				    err(1, "seteuid(user_uid)");
d337 4
a340 2
				if (setuid(user_uid))
				    err(1, "setuid(user_uid)");
d345 6
a350 3
				(void) setegid(runas_pw->pw_gid);
				if (seteuid(runas_pw->pw_uid))
				    err(1, "unable to change to runas uid");
d356 4
a359 2
				if (setuid(runas_pw->pw_uid))
				    err(1, "unable to change to runas uid");
d364 1
a364 1
				    err(1, "unable to change to sudoers gid");
d374 4
a377 2
				    if ((SUDOERS_MODE & 040) && seteuid(1))
					err(1, "seteuid(1)");
d379 4
a382 2
				    if (seteuid(SUDOERS_UID))
					err(1, "seteuid(SUDOERS_UID)");
d386 4
a389 2
				if (seteuid(timestamp_uid))
				    err(1, "seteuid(timestamp_uid)");
d394 4
d411 2
d418 4
a421 2
				if (setuid(ROOT_UID))
					err(1, "setuid(ROOT_UID)");
d428 4
a431 2
				if (setuid(user_uid))
				    err(1, "setuid(user_uid)");
d436 4
a439 2
				if (setuid(runas_pw->pw_uid))
				    err(1, "unable to change to runas uid");
d451 4
d515 1
d522 4
d538 2
a539 2
	    else if (setgid(runas_pw->pw_gid))
		warn("cannot set gid to runas gid");
d542 1
a542 1
		    err(1, "unable to set user context");
d544 1
a544 1
		    warn("unable to set user context");
d548 2
a549 2
	if (setgid(runas_pw->pw_gid))
	    warn("cannot set gid to runas gid");
d551 1
a551 1
	 * Initialize group vector unless asked not to.
@


1.11
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d60 1
a60 1
__unused static const char rcsid[] = "$Sudo: set_perms.c,v 1.30.2.4 2007/07/06 14:16:22 millert Exp $";
d73 4
d89 3
d97 2
d115 1
d155 2
d172 3
d182 2
d200 1
d239 2
d254 3
d271 2
d289 1
d326 2
d341 2
d348 2
d371 2
d378 52
d446 1
a446 4
             * We don't have setusercontext() set the user since we
             * may only want to set the effective uid.  Depending on
             * sudoers and/or command line arguments we may not want
             * setusercontext() to call initgroups().
d459 1
a459 1
	} else
d461 6
a466 12
	{
	    if (setgid(runas_pw->pw_gid))
		warn("cannot set gid to runas gid");
#ifdef HAVE_INITGROUPS
	    /*
	     * Initialize group vector unless asked not to.
	     */
	    if (!def_preserve_groups &&
		initgroups(*user_runas, runas_pw->pw_gid) < 0)
		warn("cannot set group vector");
#endif /* HAVE_INITGROUPS */
	}
@


1.10
log
@Update to sudo 1.6.8p1
@
text
@d2 1
a2 1
 * Copyright (c) 1994-1996,1998-2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d21 1
a21 1
#include "config.h"
d45 5
d60 1
a60 1
static const char rcsid[] = "$Sudo: set_perms.c,v 1.30 2004/05/27 23:12:02 millert Exp $";
a72 85
static void fatal		__P((char *, int));

#if !defined(HAVE_SETRESUID) && !defined(HAVE_SETREUID) && \
    !defined(NO_SAVED_IDS) && defined(_SC_SAVED_IDS) && defined(_SC_VERSION)
/*
 * Set real and effective uids and gids based on perm.
 * Since we have POSIX saved IDs we can get away with just
 * toggling the effective uid/gid unless we are headed for an exec().
 */
void
set_perms_posix(perm)
    int perm;
{
    int error;

    switch (perm) {
	case PERM_ROOT:
				if (seteuid(ROOT_UID))
				    fatal("seteuid(ROOT_UID) failed, your operating system may have broken POSIX saved ID support\nTry running configure with --disable-saved-ids", 0);
			      	break;

	case PERM_FULL_ROOT:
				/* headed for exec() */
				(void) seteuid(ROOT_UID);
				if (setuid(ROOT_UID))
				    fatal("setuid(ROOT_UID)", 1);
			      	break;

	case PERM_USER:
    	    	    	        (void) setegid(user_gid);
				if (seteuid(user_uid))
				    fatal("seteuid(user_uid)", 1);
			      	break;

	case PERM_FULL_USER:
				/* headed for exec() */
				(void) setgid(user_gid);
				if (setuid(user_uid))
				    fatal("setuid(user_uid)", 1);
				break;
				
	case PERM_RUNAS:
				if (seteuid(runas_pw->pw_uid))
				    fatal("unable to change to runas uid", 1);
			      	break;

	case PERM_FULL_RUNAS:
				/* headed for exec(), assume euid == ROOT_UID */
				runas_setup();
				if (def_stay_setuid)
				    error = seteuid(runas_pw->pw_uid);
				else
				    error = setuid(runas_pw->pw_uid);
				if (error)
				    fatal("unable to change to runas uid", 1);
				break;

	case PERM_SUDOERS:
				/* assume euid == ROOT_UID, ruid == user */
				if (setegid(SUDOERS_GID))
				    fatal("unable to change to sudoers gid", 1);

				/*
				 * If SUDOERS_UID == ROOT_UID and SUDOERS_MODE
				 * is group readable we use a non-zero
				 * uid in order to avoid NFS lossage.
				 * Using uid 1 is a bit bogus but should
				 * work on all OS's.
				 */
				if (SUDOERS_UID == ROOT_UID) {
				    if ((SUDOERS_MODE & 040) && seteuid(1))
					fatal("seteuid(1)", 1);
				} else {
				    if (seteuid(SUDOERS_UID))
					fatal("seteuid(SUDOERS_UID)", 1);
				}
			      	break;
	case PERM_TIMESTAMP:
				if (seteuid(timestamp_uid))
				    fatal("seteuid(timestamp_uid)", 1);
			      	break;

    }
}
#endif /* !NO_SAVED_IDS && _SC_SAVED_IDS && _SC_VERSION */
d82 1
a82 1
set_perms_suid(perm)
a84 2
    int error;

a85 1
	case PERM_FULL_ROOT:
d88 2
a89 1
				    fatal("setresuid(ROOT_UID, ROOT_UID, ROOT_UID) failed, your operating system may have a broken setresuid() function\nTry running configure with --disable-setresuid", 0);
d95 1
a95 1
				    fatal("setresuid(user_uid, user_uid, ROOT_UID)", 1);
d102 1
a102 1
				    fatal("setresuid(user_uid, user_uid, user_uid)", 1);
d106 1
d108 1
a108 1
				    fatal("unable to change to runas uid", 1);
d114 1
a114 1
				error = setresuid(def_stay_setuid ?
d116 2
a117 3
				    runas_pw->pw_uid, runas_pw->pw_uid);
				if (error)
				    fatal("unable to change to runas uid", 1);
d123 1
a123 1
				    fatal("unable to change to sudoers gid", 1);
d134 1
a134 1
					fatal("setresuid(ROOT_UID, 1, ROOT_UID)", 1);
d137 1
a137 1
					fatal("setresuid(ROOT_UID, SUDOERS_UID, ROOT_UID)", 1);
d142 1
a142 1
				    fatal("setresuid(ROOT_UID, timestamp_uid, ROOT_UID)", 1);
d157 1
a157 1
set_perms_suid(perm)
a159 2
    int error;

a160 1
	case PERM_FULL_ROOT:
d163 1
a163 1
				    fatal("setreuid(-1, ROOT_UID) failed, your operating system may have a broken setreuid() function\nTry running configure with --disable-setreuid", 0);
d165 2
a166 1
				    fatal("setuid(ROOT_UID)", 1);
d172 1
a172 1
				    fatal("setreuid(ROOT_UID, user_uid)", 1);
d179 1
a179 1
				    fatal("setreuid(user_uid, user_uid)", 1);
d183 1
d185 1
a185 1
				    fatal("unable to change to runas uid", 1);
d191 3
a193 5
				error = setreuid(def_stay_setuid ?
				    user_uid : runas_pw->pw_uid,
				    runas_pw->pw_uid);
				if (error)
				    fatal("unable to change to runas uid", 1);
d199 1
a199 1
				    fatal("unable to change to sudoers gid", 1);
d210 1
a210 1
					fatal("setreuid(ROOT_UID, 1)", 1);
d213 1
a213 1
					fatal("setreuid(ROOT_UID, SUDOERS_UID)", 1);
d218 1
a218 1
				    fatal("setreuid(ROOT_UID, timestamp_uid)", 1);
d223 2
a224 2
# else
#  ifdef HAVE_SETREUID
d231 1
a231 1
set_perms_nosuid(perm)
a233 1

d235 3
a237 2
     * Since we only have setuid() and seteuid() we have to set
     * real and effective uids to ROOT_UID initially.
d239 2
d242 1
a242 1
	fatal("setuid(ROOT_UID)", 1);
d245 5
d253 1
a253 1
				    fatal("seteuid(user_uid)", 1);
d260 1
a260 1
				    fatal("setuid(user_uid)", 1);
d264 1
d266 1
a266 1
				    fatal("unable to change to runas uid", 1);
d270 1
a270 1
				/* headed for exec(), assume euid == ROOT_UID */
d273 1
a273 1
				    fatal("unable to change to runas uid", 1);
a276 1
				/* assume euid == ROOT_UID, ruid == user */
d278 1
a278 1
				    fatal("unable to change to sudoers gid", 1);
d289 1
a289 1
					fatal("seteuid(1)", 1);
d292 1
a292 1
					fatal("seteuid(SUDOERS_UID)", 1);
d297 1
a297 1
				    fatal("seteuid(timestamp_uid)", 1);
d302 1
a302 1
#  else
d310 1
a310 1
set_perms_nosuid(perm)
a314 1
	case PERM_FULL_ROOT:
d317 1
a317 1
					fatal("setuid(ROOT_UID)", 1);
d323 1
a323 1
				    fatal("setuid(user_uid)", 1);
d329 1
a329 1
				    fatal("unable to change to runas uid", 1);
d348 1
a348 1
    int error, flags;
d369 2
a370 4
		perror("cannot set gid to runas gid");
	    error = setusercontext(lc, runas_pw,
		runas_pw->pw_uid, flags);
	    if (error) {
d372 1
a372 1
		    fatal("unable to set user context", 1);
d374 1
a374 1
		    perror("unable to set user context");
d380 1
a380 1
		perror("cannot set gid to runas gid");
d387 1
a387 1
		perror("cannot set group vector");
a390 17
}

static void
fatal(str, printerr)
    char *str;
    int printerr;
{

    if (str) {
	if (printerr)
	    perror(str);
	else {
	    fputs(str, stderr);
	    fputc('\n', stderr);
	}
    }
    exit(1);
@


1.9
log
@Add explicit declaration of printerr variable in function header
(was defaulting to int which is OK but oh so K&R :-).  From Theo.
@
text
@d2 1
a2 2
 * Copyright (c) 1994-1996,1998-2003 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
d4 3
a6 3
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
d8 7
a14 24
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d55 1
a55 1
static const char rcsid[] = "$Sudo: set_perms.c,v 1.21 2003/04/16 00:42:10 millert Exp $";
d58 6
d85 2
a86 2
				if (seteuid(0))
				    fatal("seteuid(0) failed, your operating system may have broken POSIX saved ID support\nTry running configure with --disable-saved-ids", 0);
d91 3
a93 3
				(void) seteuid(0);
				if (setuid(0))
				    fatal("setuid(0)", 1);
d110 6
a115 1
				/* headed for exec(), assume euid == 0 */
d117 1
a117 1
				if (def_flag(I_STAY_SETUID))
d126 1
a126 1
				/* assume euid == 0, ruid == user */
d131 1
a131 1
				 * If SUDOERS_UID == 0 and SUDOERS_MODE
d137 1
a137 1
				if (SUDOERS_UID == 0) {
d170 2
a171 2
				if (setresuid(0, 0, 0))
				    fatal("setresuid(0, 0, 0) failed, your operating system may have a broken setresuid() function\nTry running configure with --disable-setresuid", 0);
d176 2
a177 2
				if (setresuid(user_uid, user_uid, 0))
				    fatal("setresuid(user_uid, user_uid, 0)", 1);
d188 6
a193 1
				/* headed for exec(), assume euid == 0 */
d195 1
a195 1
				error = setresuid(def_flag(I_STAY_SETUID) ?
d203 1
a203 1
				/* assume euid == 0, ruid == user */
d208 1
a208 1
				 * If SUDOERS_UID == 0 and SUDOERS_MODE
d214 3
a216 3
				if (SUDOERS_UID == 0) {
				    if ((SUDOERS_MODE & 040) && setresuid(0, 1, 0))
					fatal("setresuid(0, 1, 0)", 1);
d218 2
a219 2
				    if (setresuid(0, SUDOERS_UID, 0))
					fatal("setresuid(0, SUDOERS_UID, 0)", 1);
d223 2
a224 2
				if (setresuid(0, timestamp_uid, 0))
				    fatal("setresuid(0, timestamp_uid, 0)", 1);
d234 1
a234 1
 * We always retain a real or effective uid of 0 unless
d247 4
a250 2
				if (setreuid(0, 0))
				    fatal("setreuid(0, 0) failed, your operating system may have a broken setreuid() function\nTry running configure with --disable-setreuid", 0);
d255 2
a256 2
				if (setreuid(0, user_uid))
				    fatal("setreuid(0, user_uid)", 1);
d267 6
a272 1
				/* headed for exec(), assume euid == 0 */
d274 1
a274 1
				error = setreuid(def_flag(I_STAY_SETUID) ?
d282 1
a282 1
				/* assume euid == 0, ruid == user */
d287 1
a287 1
				 * If SUDOERS_UID == 0 and SUDOERS_MODE
d293 3
a295 3
				if (SUDOERS_UID == 0) {
				    if ((SUDOERS_MODE & 040) && setreuid(0, 1))
					fatal("setreuid(0, 1)", 1);
d297 2
a298 2
				    if (setreuid(0, SUDOERS_UID))
					fatal("setreuid(0, SUDOERS_UID)", 1);
d302 2
a303 2
				if (setreuid(0, timestamp_uid))
				    fatal("setreuid(0, timestamp_uid)", 1);
d309 1
d322 1
a322 1
     * real and effective uids to 0 initially.
d324 2
a325 2
    if (setuid(0))
	fatal("setuid(0)", 1);
d342 6
a347 1
				/* headed for exec(), assume euid == 0 */
d354 1
a354 1
				/* assume euid == 0, ruid == user */
d359 1
a359 1
				 * If SUDOERS_UID == 0 and SUDOERS_MODE
d365 1
a365 1
				if (SUDOERS_UID == 0) {
d379 41
d437 1
a437 1
	if (def_flag(I_USE_LOGINCLASS)) {
d445 2
a446 2
	    if (!def_flag(I_PRESERVE_GROUPS))
		flags |= LOGIN_SETGROUP;
d452 1
a452 1
		if (runas_pw->pw_uid != 0)
d466 1
a466 1
	    if (!def_flag(I_PRESERVE_GROUPS) &&
@


1.8
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@d425 1
@


1.7
log
@update to what will soon be sudo 1.6.7
@
text
@d33 4
d73 1
a73 1
static const char rcsid[] = "$Sudo: set_perms.c,v 1.20 2003/03/15 20:31:02 millert Exp $";
@


1.6
log
@Error out if setusercontext() fails and the runas user is not root.
Pointed out by deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1994-1996,1998-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d69 1
a69 1
static const char rcsid[] = "$Sudo: set_perms.c,v 1.12 2002/01/22 02:00:25 millert Exp $";
d78 2
a79 1
#if !defined(NO_SAVED_IDS) && defined(_SC_SAVED_IDS) && defined(_SC_VERSION)
d86 1
a86 1
set_perms_posix(perm, sudo_mode)
a87 1
    int sudo_mode;
d148 5
d157 73
a229 1
#ifdef HAVE_SETREUID
d234 1
d237 1
a237 1
set_perms_fallback(perm, sudo_mode)
a238 1
    int sudo_mode;
d245 2
a246 2
				if (setuid(0))
				    fatal("setuid(0) failed, your operating system may have broken POSIX saved ID support\nTry running configure with --disable-setreuid", 0);
d250 1
a250 1
    	    	    	        (void) setegid(user_gid);
d258 2
a259 2
				if (setuid(user_uid))
				    fatal("setuid(user_uid)", 1);
d265 3
a267 4
				if (def_flag(I_STAY_SETUID))
				    error = setreuid(user_uid, runas_pw->pw_uid);
				else
				    error = setuid(runas_pw->pw_uid);
d274 1
a274 1
				if (setegid(SUDOERS_GID))
d292 4
d299 1
a299 1
#else
d306 1
a306 1
set_perms_fallback(perm, sudo_mode)
a307 1
    int sudo_mode;
d312 1
a312 1
     * real and effective uidss to 0 initially.
d358 4
d364 2
a365 1
#endif /* HAVE_SETREUID */
d395 6
a400 2
	    if (error)
		perror("unable to set user context");
d404 2
a405 6
	    if (setgid(runas_pw->pw_gid)) {
		if (runas_pw->pw_gid != 0)
		    fatal("unable to set user context", 1);
		else
		    perror("cannot set gid to runas gid");
	    }
@


1.5
log
@update to sudo 1.6.5p2
@
text
@d316 6
a321 2
	    if (setgid(runas_pw->pw_gid))
		perror("cannot set gid to runas gid");
@


1.4
log
@update to sudo 1.6.5
@
text
@d69 1
a69 1
static const char rcsid[] = "$Sudo: set_perms.c,v 1.11 2002/01/16 21:27:09 millert Exp $";
d76 1
a76 1
static void fatal		__P((char *));
d94 1
a94 1
				    fatal("seteuid(0)");
d101 1
a101 1
				    fatal("setuid(0)");
d107 1
a107 1
				    fatal("seteuid(user_uid)");
d114 1
a114 1
				    fatal("setuid(user_uid)");
d125 1
a125 1
				    fatal("unable to change to runas uid");
d131 1
a131 1
				    fatal("unable to change to sudoers gid");
d142 1
a142 1
					fatal("seteuid(1)");
d145 1
a145 1
					fatal("seteuid(SUDOERS_UID)");
d169 1
a169 1
				    fatal("setuid(0)");
d175 1
a175 1
				    fatal("setreuid(0, user_uid)");
d182 1
a182 1
				    fatal("setuid(user_uid)");
d193 1
a193 1
				    fatal("unable to change to runas uid");
d199 1
a199 1
				    fatal("unable to change to sudoers gid");
d210 1
a210 1
					fatal("setreuid(0, 1)");
d213 1
a213 1
					fatal("setreuid(0, SUDOERS_UID)");
d236 1
a236 1
	fatal("setuid(0)");
d242 1
a242 1
				    fatal("seteuid(user_uid)");
d249 1
a249 1
				    fatal("setuid(user_uid)");
d256 1
a256 1
				    fatal("unable to change to runas uid");
d262 1
a262 1
				    fatal("unable to change to sudoers gid");
d273 1
a273 1
					fatal("seteuid(1)");
d276 1
a276 1
					fatal("seteuid(SUDOERS_UID)");
d331 1
a331 1
fatal(str)
d335 8
a342 2
    if (str)
	perror(str);
@


1.4.4.1
log
@update to sudo 1.6.5p1
@
text
@@


1.4.2.1
log
@update to sudo 1.6.5p1
@
text
@@


1.3
log
@update to sudo 1.6.4p2
@
text
@d69 1
a69 1
static const char rcsid[] = "$Sudo: set_perms.c,v 1.10 2002/01/15 22:47:29 millert Exp $";
d109 7
d178 7
d243 7
@


1.2
log
@sync with sudo 1.6.4-final
@
text
@d69 1
a69 1
static const char rcsid[] = "$Sudo: set_perms.c,v 1.9 2002/01/13 18:28:09 millert Exp $";
d78 1
a78 1
#if defined(_SC_SAVED_IDS) && defined(_SC_VERSION)
d143 1
a143 1
#endif /* _SC_SAVED_IDS && _SC_VERSION */
@


1.1
log
@Update to sudo 1.6.4
@
text
@d69 1
a69 1
static const char rcsid[] = "$Sudo: set_perms.c,v 1.8 2001/12/31 17:18:05 millert Exp $";
d96 8
a109 7
	case PERM_FULL_USER:
				/* headed for exec() */
    	    	    	        (void) setgid(user_gid);
				if (setuid(user_uid))
				    fatal("setuid(user_uid)");
			      	break;

d159 1
d164 1
a170 9
	case PERM_FULL_USER:
				/* headed for exec() */
    	    	    	        (void) setgid(user_gid);
				if (setuid(user_uid)) {
				    fatal("setuid(user_uid)");
				    exit(1);
				}
			      	break;

a230 7
	case PERM_FULL_USER:
				/* headed for exec() */
    	    	    	        (void) setgid(user_gid);
				if (setuid(user_uid))
				    fatal("setuid(user_uid)");
			      	break;

@

