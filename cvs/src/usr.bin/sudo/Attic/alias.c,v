head	1.7;
access;
symbols
	OPENBSD_5_7:1.6.0.16
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.20
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.18
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.14
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.12
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.10
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.6;
commitid	8ra5qnWqy2bUhcZn;

1.6
date	2010.06.02.19.30.10;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.21.14.48.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.11.11.48.06;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.18.16.01.48;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 2004-2005m, 2007-2009
 *	Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <config.h>

#include <sys/types.h>
#include <sys/param.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */

#include "sudo.h"
#include "parse.h"
#include "redblack.h"
#include <gram.h>

/*
 * Globals
 */
struct rbtree *aliases;
unsigned int alias_seqno;

/*
 * Comparison function for the red-black tree.
 * Aliases are sorted by name with the type used as a tie-breaker.
 */
int
alias_compare(v1, v2)
    const void *v1, *v2;
{
    const struct alias *a1 = (const struct alias *)v1;
    const struct alias *a2 = (const struct alias *)v2;
    int res;

    if (v1 == NULL)
	res = -1;
    else if (v2 == NULL)
	res = 1;
    else if ((res = strcmp(a1->name, a2->name)) == 0)
	res = a1->type - a2->type;
    return(res);
}

/*
 * Search the tree for an alias with the specified name and type.
 * Returns a pointer to the alias structure or NULL if not found.
 */
struct alias *
alias_find(name, type)
    char *name;
    int type;
{
    struct alias key;
    struct rbnode *node;
    struct alias *a = NULL;

    key.name = name;
    key.type = type;
    if ((node = rbfind(aliases, &key)) != NULL) {
	    /*
	     * Compare the global sequence number with the one stored
	     * in the alias.  If they match then we've seen this alias
	     * before and found a loop.
	     */
	    a = node->data;
	    if (a->seqno == alias_seqno)
		return(NULL);
	    a->seqno = alias_seqno;
    }
    return(a);
}

/*
 * Add an alias to the aliases redblack tree.
 * Returns NULL on success and an error string on failure.
 */
char *
alias_add(name, type, members)
    char *name;
    int type;
    struct member *members;
{
    static char errbuf[512];
    struct alias *a;

    a = emalloc(sizeof(*a));
    a->name = name;
    a->type = type;
    a->seqno = 0;
    list2tq(&a->members, members);
    if (rbinsert(aliases, a)) {
	snprintf(errbuf, sizeof(errbuf), "Alias `%s' already defined", name);
	alias_free(a);
	return(errbuf);
    }
    return(NULL);
}

/*
 * Apply a function to each alias entry and pass in a cookie.
 */
void
alias_apply(func, cookie)
    int (*func) __P((void *, void *));
    void *cookie;
{
    rbapply(aliases, func, cookie, inorder);
}

/*
 * Returns TRUE if there are no aliases, else FALSE.
 */
int
no_aliases()
{
    return(rbisempty(aliases));
}

/*
 * Free memory used by an alias struct and its members.
 */
void
alias_free(v)
    void *v;
{
    struct alias *a = (struct alias *)v;
    struct member *m;
    struct sudo_command *c;
    void *next;

    efree(a->name);
    for (m = a->members.first; m != NULL; m = next) {
	next = m->next;
	if (m->type == COMMAND) {
		c = (struct sudo_command *) m->name;
		efree(c->cmnd);
		efree(c->args);
	}
	efree(m->name);
	efree(m);
    }
    efree(a);
}

/*
 * Find the named alias, remove it from the tree and return it.
 */
struct alias *
alias_remove(name, type)
    char *name;
    int type;
{
    struct rbnode *node;
    struct alias key, *a;

    key.name = name;
    key.type = type;
    if ((node = rbfind(aliases, &key)) == NULL)
	return(NULL);
    a = rbdelete(aliases, node);
    return(a);
}

void
init_aliases()
{
    if (aliases != NULL)
	rbdestroy(aliases, alias_free);
    aliases = rbcreate(alias_compare);
}
@


1.6
log
@Update to sudo 1.7.2p7
@
text
@@


1.5
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@d124 1
a125 1
	snprintf(errbuf, sizeof(errbuf), "Alias `%s' already defined", name);
@


1.4
log
@Upgrade to sudo 1.7.2
@
text
@a48 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: alias.c,v 1.18 2009/05/25 12:02:41 millert Exp $";
#endif /* lint */

@


1.3
log
@Update to sudo 1.7.1
@
text
@d2 1
a2 1
 * Copyright (c) 2004-2005m, 2007-2008
d50 1
a50 1
__unused static const char rcsid[] = "$Sudo: alias.c,v 1.17 2009/04/05 16:25:04 millert Exp $";
@


1.2
log
@when destroying an alias, free the correct data pointer
@
text
@d50 1
a50 1
__unused static const char rcsid[] = "$Sudo: alias.c,v 1.14 2008/11/18 13:29:58 millert Exp $";
a59 6
 * Local protoypes
 */
static int   alias_compare	__P((const void *, const void *));
static void  alias_free		__P((void *));

/*
d63 1
a63 1
static int
d85 1
a85 1
find_alias(name, type)
d158 1
a158 1
static void
d182 1
a182 1
 * Find the named alias, delete it from the tree and recover its resources.
d184 1
a184 1
int
d195 1
a195 1
	return(FALSE);
d197 1
a197 2
    alias_free(a);
    return(TRUE);
@


1.1
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d50 1
a50 1
__unused static const char rcsid[] = "$Sudo: alias.c,v 1.13 2008/11/09 14:13:12 millert Exp $";
d196 1
a196 1
    struct alias key;
d202 2
a203 2
    rbdelete(aliases, node);
    alias_free(node->data);
@

