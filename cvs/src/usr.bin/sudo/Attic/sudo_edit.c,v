head	1.10;
access;
symbols
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.9;
commitid	8ra5qnWqy2bUhcZn;

1.9
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.07.18.43.11;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.31.16.44.03;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.05.23.55.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.29.17.29.05;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.17.18.14.06;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 2004-2008 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <config.h>

#include <sys/types.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <ctype.h>
#include <pwd.h>
#include <signal.h>
#include <errno.h>
#include <fcntl.h>
#if TIME_WITH_SYS_TIME
# include <time.h>
#endif
#ifndef HAVE_TIMESPEC
# include <emul/timespec.h>
#endif

#include "sudo.h"

extern sigaction_t saved_sa_int, saved_sa_quit, saved_sa_tstp;
extern char **environ;

static char *find_editor();

/*
 * Wrapper to allow users to edit privileged files with their own uid.
 */
int
sudo_edit(argc, argv, envp)
    int argc;
    char **argv;
    char **envp;
{
    ssize_t nread, nwritten;
    pid_t kidpid, pid;
    const char *tmpdir;
    char **nargv, **ap, *editor, *cp;
    char buf[BUFSIZ];
    int error, i, ac, ofd, tfd, nargc, rval, tmplen, wasblank;
    struct stat sb;
    struct timespec ts1, ts2;
    struct tempfile {
	char *tfile;
	char *ofile;
	struct timespec omtim;
	off_t osize;
    } *tf;

    /*
     * Find our temporary directory, one of /var/tmp, /usr/tmp, or /tmp
     */
    if (stat(_PATH_VARTMP, &sb) == 0 && S_ISDIR(sb.st_mode))
	tmpdir = _PATH_VARTMP;
#ifdef _PATH_USRTMP
    else if (stat(_PATH_USRTMP, &sb) == 0 && S_ISDIR(sb.st_mode))
	tmpdir = _PATH_USRTMP;
#endif
    else
	tmpdir = _PATH_TMP;
    tmplen = strlen(tmpdir);
    while (tmplen > 0 && tmpdir[tmplen - 1] == '/')
	tmplen--;

    /*
     * Close password, shadow, and group files before we try to open
     * user-specified files to prevent the opening of things like /dev/fd/4
     */
    sudo_endpwent();
    sudo_endgrent();

    /*
     * For each file specified by the user, make a temporary version
     * and copy the contents of the original to it.
     */
    tf = emalloc2(argc - 1, sizeof(*tf));
    zero_bytes(tf, (argc - 1) * sizeof(*tf));
    for (i = 0, ap = argv + 1; i < argc - 1 && *ap != NULL; i++, ap++) {
	error = -1;
	set_perms(PERM_RUNAS);
	if ((ofd = open(*ap, O_RDONLY, 0644)) != -1 || errno == ENOENT) {
	    if (ofd == -1) {
		zero_bytes(&sb, sizeof(sb));		/* new file */
		error = 0;
	    } else {
#ifdef HAVE_FSTAT
		error = fstat(ofd, &sb);
#else
		error = stat(tf[i].ofile, &sb);
#endif
	    }
	}
	set_perms(PERM_ROOT);
	if (error || (ofd != -1 && !S_ISREG(sb.st_mode))) {
	    if (error)
		warning("%s", *ap);
	    else
		warningx("%s: not a regular file", *ap);
	    if (ofd != -1)
		close(ofd);
	    argc--;
	    i--;
	    continue;
	}
	tf[i].ofile = *ap;
	tf[i].omtim.tv_sec = mtim_getsec(sb);
	tf[i].omtim.tv_nsec = mtim_getnsec(sb);
	tf[i].osize = sb.st_size;
	if ((cp = strrchr(tf[i].ofile, '/')) != NULL)
	    cp++;
	else
	    cp = tf[i].ofile;
	easprintf(&tf[i].tfile, "%.*s/%s.XXXXXXXX", tmplen, tmpdir, cp);
	set_perms(PERM_USER);
	tfd = mkstemp(tf[i].tfile);
	set_perms(PERM_ROOT);
	if (tfd == -1) {
	    warning("mkstemp");
	    goto cleanup;
	}
	if (ofd != -1) {
	    while ((nread = read(ofd, buf, sizeof(buf))) != 0) {
		if ((nwritten = write(tfd, buf, nread)) != nread) {
		    if (nwritten == -1)
			warning("%s", tf[i].tfile);
		    else
			warningx("%s: short write", tf[i].tfile);
		    goto cleanup;
		}
	    }
	    close(ofd);
	}
	/*
	 * We always update the stashed mtime because the time
	 * resolution of the filesystem the temporary file is on may
	 * not match that of the filesystem where the file to be edited
	 * resides.  It is OK if touch() fails since we only use the info
	 * to determine whether or not a file has been modified.
	 */
	(void) touch(tfd, NULL, &tf[i].omtim);
#ifdef HAVE_FSTAT
	error = fstat(tfd, &sb);
#else
	error = stat(tf[i].tfile, &sb);
#endif
	if (!error) {
	    tf[i].omtim.tv_sec = mtim_getsec(sb);
	    tf[i].omtim.tv_nsec = mtim_getnsec(sb);
	}
	close(tfd);
    }
    if (argc == 1)
	return(1);			/* no files readable, you lose */

    environ = envp;
    editor = find_editor();

    /*
     * Allocate space for the new argument vector and fill it in.
     * The EDITOR and VISUAL environment variables may contain command
     * line args so look for those and alloc space for them too.
     */
    nargc = argc;
    for (wasblank = FALSE, cp = editor; *cp != '\0'; cp++) {
	if (isblank((unsigned char) *cp))
	    wasblank = TRUE;
	else if (wasblank) {
	    wasblank = FALSE;
	    nargc++;
	}
    }
    nargv = (char **) emalloc2(nargc + 1, sizeof(char *));
    ac = 0;
    for ((cp = strtok(editor, " \t")); cp != NULL; (cp = strtok(NULL, " \t")))
	nargv[ac++] = cp;
    for (i = 0; i < argc - 1 && ac < nargc; )
	nargv[ac++] = tf[i++].tfile;
    nargv[ac] = NULL;

    /* Allow the editor to be suspended. */
    (void) sigaction(SIGTSTP, &saved_sa_tstp, NULL);

    /*
     * Fork and exec the editor with the invoking user's creds,
     * keeping track of the time spent in the editor.
     */
    gettime(&ts1);
    kidpid = fork();
    if (kidpid == -1) {
	warning("fork");
	goto cleanup;
    } else if (kidpid == 0) {
	/* child */
	(void) sigaction(SIGINT, &saved_sa_int, NULL);
	(void) sigaction(SIGQUIT, &saved_sa_quit, NULL);
	set_perms(PERM_FULL_USER);
	closefrom(def_closefrom);
	execvp(nargv[0], nargv);
	warning("unable to execute %s", nargv[0]);
	_exit(127);
    }

    /*
     * Wait for status from the child.  Most modern kernels
     * will not let an unprivileged child process send a
     * signal to its privileged parent so we have to request
     * status when the child is stopped and then send the
     * same signal to our own pid.
     */
    do {
#ifdef sudo_waitpid
        pid = sudo_waitpid(kidpid, &i, WUNTRACED);
#else
	pid = wait(&i);
#endif
	if (pid == kidpid) {
	    if (WIFSTOPPED(i))
		kill(getpid(), WSTOPSIG(i));
	    else
		break;
	}
    } while (pid != -1 || errno == EINTR);
    gettime(&ts2);
    if (pid == -1 || !WIFEXITED(i))
	rval = 1;
    else
	rval = WEXITSTATUS(i);

    /* Copy contents of temp files to real ones */
    for (i = 0; i < argc - 1; i++) {
	error = -1;
	set_perms(PERM_USER);
	if ((tfd = open(tf[i].tfile, O_RDONLY, 0644)) != -1) {
#ifdef HAVE_FSTAT
	    error = fstat(tfd, &sb);
#else
	    error = stat(tf[i].tfile, &sb);
#endif
	}
	set_perms(PERM_ROOT);
	if (error || !S_ISREG(sb.st_mode)) {
	    if (error)
		warning("%s", tf[i].tfile);
	    else
		warningx("%s: not a regular file", tf[i].tfile);
	    warningx("%s left unmodified", tf[i].ofile);
	    if (tfd != -1)
		close(tfd);
	    continue;
	}
	if (tf[i].osize == sb.st_size && tf[i].omtim.tv_sec == mtim_getsec(sb)
	    && tf[i].omtim.tv_nsec == mtim_getnsec(sb)) {
	    /*
	     * If mtime and size match but the user spent no measurable
	     * time in the editor we can't tell if the file was changed.
	     */
#ifdef HAVE_TIMESPECSUB2
	    timespecsub(&ts1, &ts2);
#else
	    timespecsub(&ts1, &ts2, &ts2);
#endif
	    if (timespecisset(&ts2)) {
		warningx("%s unchanged", tf[i].ofile);
		unlink(tf[i].tfile);
		close(tfd);
		continue;
	    }
	}
	set_perms(PERM_RUNAS);
	ofd = open(tf[i].ofile, O_WRONLY|O_TRUNC|O_CREAT, 0644);
	set_perms(PERM_ROOT);
	if (ofd == -1) {
	    warning("unable to write to %s", tf[i].ofile);
	    warningx("contents of edit session left in %s", tf[i].tfile);
	    close(tfd);
	    continue;
	}
	while ((nread = read(tfd, buf, sizeof(buf))) > 0) {
	    if ((nwritten = write(ofd, buf, nread)) != nread) {
		if (nwritten == -1)
		    warning("%s", tf[i].ofile);
		else
		    warningx("%s: short write", tf[i].ofile);
		break;
	    }
	}
	if (nread == 0) {
	    /* success, got EOF */
	    unlink(tf[i].tfile);
	} else if (nread < 0) {
	    warning("unable to read temporary file");
	    warningx("contents of edit session left in %s", tf[i].tfile);
	} else {
	    warning("unable to write to %s", tf[i].ofile);
	    warningx("contents of edit session left in %s", tf[i].tfile);
	}
	close(ofd);
    }

    return(rval);
cleanup:
    /* Clean up temp files and return. */
    for (i = 0; i < argc - 1; i++) {
	if (tf[i].tfile != NULL)
	    unlink(tf[i].tfile);
    }
    return(1);
}

/*
 * Determine which editor to use.  We don't bother restricting this
 * based on def_env_editor or def_editor since the editor runs with
 * the uid of the invoking user, not the runas (privileged) user.
 */
static char *
find_editor()
{
    char *cp, *editor = NULL, **ev, *ev0[4];

    ev0[0] = "SUDO_EDITOR";
    ev0[1] = "VISUAL";
    ev0[2] = "EDITOR";
    ev0[3] = NULL;
    for (ev = ev0; *ev != NULL; ev++) {
	if ((editor = getenv(*ev)) != NULL && *editor != '\0') {
	    if ((cp = strrchr(editor, '/')) != NULL)
		cp++;
	    else
		cp = editor;
	    /* Ignore "sudoedit" and "sudo" to avoid an endless loop. */
	    if (strncmp(cp, "sudo", 4) != 0 ||
		(cp[4] != ' ' && cp[4] != '\0' && strcmp(cp + 4, "edit") != 0)) {
		editor = estrdup(editor);
		break;
	    }
	}
	editor = NULL;
    }
    if (editor == NULL) {
	editor = estrdup(def_editor);
	if ((cp = strchr(editor, ':')) != NULL)
	    *cp = '\0';			/* def_editor could be a path */
    }
    return(editor);
}
@


1.9
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.8
log
@update to sudo 1.7.2p2
@
text
@a57 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: sudo_edit.c,v 1.39 2009/09/30 13:50:58 millert Exp $";
#endif /* lint */

@


1.7
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d59 1
a59 1
__unused static const char rcsid[] = "$Sudo: sudo_edit.c,v 1.37 2008/11/09 14:13:12 millert Exp $";
a173 1
#ifdef HAVE_FSTAT
d175 4
a178 3
	 * If we are unable to set the mtime on the temp file to the value
	 * of the original file just make the stashed mtime match the temp
	 * file's mtime.  It is better than nothing and we only use the info
d181 9
a189 6
	if (touch(tfd, NULL, &tf[i].omtim) == -1) {
	    if (fstat(tfd, &sb) == 0) {
		tf[i].omtim.tv_sec = mtim_getsec(sb);
		tf[i].omtim.tv_nsec = mtim_getnsec(sb);
	    }
	    /* XXX - else error? */
a190 1
#endif
d238 1
a238 1
	closefrom(def_closefrom + 1);
@


1.6
log
@Update to sudo 1.6.9p17
@
text
@d2 1
a2 1
 * Copyright (c) 2004-2005 Todd C. Miller <Todd.Miller@@courtesan.com>
a43 5
#ifdef HAVE_ERR_H
# include <err.h>
#else
# include "emul/err.h"
#endif /* HAVE_ERR_H */
a45 1
#include <grp.h>
d59 1
a59 1
__unused static const char rcsid[] = "$Sudo: sudo_edit.c,v 1.6.2.9 2008/06/21 00:47:52 millert Exp $";
d65 2
d70 2
a71 1
int sudo_edit(argc, argv, envp)
a81 1
    sigaction_t sa;
d107 7
d118 1
a118 1
    memset(tf, 0, (argc - 1) * sizeof(*tf));
a121 6

	/*
	 * We close the password file before we try to open the user-specified
	 * path to prevent the opening of things like /dev/fd/4.
	 */
	endpwent();
d124 1
a124 1
		memset(&sb, 0, sizeof(sb));		/* new file */
d137 1
a137 1
		warn("%s", *ap);
d139 1
a139 1
		warnx("%s: not a regular file", *ap);
d159 1
a159 1
	    warn("mkstemp");
d166 1
a166 1
			warn("%s", tf[i].tfile);
d168 1
a168 1
			warnx("%s: short write", tf[i].tfile);
a193 5
    /*
     * Determine which editor to use.  We don't bother restricting this
     * based on def_env_editor or def_editor since the editor runs with
     * the uid of the invoking user, not the runas (privileged) user.
     */
d195 1
a195 8
    if (((editor = getenv("VISUAL")) != NULL && *editor != '\0') ||
	((editor = getenv("EDITOR")) != NULL && *editor != '\0')) {
	editor = estrdup(editor);
    } else {
	editor = estrdup(def_editor);
	if ((cp = strchr(editor, ':')) != NULL)
	    *cp = '\0';			/* def_editor could be a path */
    }
a219 3
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_RESTART;
    sa.sa_handler = SIG_DFL;
d229 1
a229 1
	warn("fork");
d236 1
a236 3
	endpwent();
	endgrent();
	closefrom(STDERR_FILENO + 1);
d238 1
a238 1
	warn("unable to execute %s", nargv[0]);
d282 1
a282 1
		warn("%s", tf[i].tfile);
d284 2
a285 2
		warnx("%s: not a regular file", tf[i].tfile);
	    warnx("%s left unmodified", tf[i].ofile);
d302 1
a302 1
		warnx("%s unchanged", tf[i].ofile);
d312 2
a313 2
	    warn("unable to write to %s", tf[i].ofile);
	    warnx("contents of edit session left in %s", tf[i].tfile);
d320 1
a320 1
		    warn("%s", tf[i].ofile);
d322 1
a322 1
		    warnx("%s: short write", tf[i].ofile);
d330 2
a331 2
	    warn("unable to read temporary file");
	    warnx("contents of edit session left in %s", tf[i].tfile);
d333 2
a334 2
	    warn("unable to write to %s", tf[i].ofile);
	    warnx("contents of edit session left in %s", tf[i].tfile);
d347 37
@


1.5
log
@update to sudo 1.6.9p5
@
text
@d65 1
a65 1
__unused static const char rcsid[] = "$Sudo: sudo_edit.c,v 1.6.2.8 2007/09/03 20:28:31 millert Exp $";
d68 1
a68 1
extern sigaction_t saved_sa_int, saved_sa_quit, saved_sa_tstp, saved_sa_chld;
d234 1
a234 1
    /* We wait for our own children and can be suspended. */
a237 1
    (void) sigaction(SIGCHLD, &sa, NULL);
a252 1
	(void) sigaction(SIGCHLD, &saved_sa_chld, NULL);
@


1.4
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d65 1
a65 1
__unused static const char rcsid[] = "$Sudo: sudo_edit.c,v 1.6.2.7 2007/07/08 18:44:41 millert Exp $";
d138 1
a138 1
	if (error || !S_ISREG(sb.st_mode)) {
@


1.3
log
@update to sudo 1.6.8p5
@
text
@d2 1
a2 1
 * Copyright (c) 2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d17 1
a17 1
#include "config.h"
d51 1
d55 6
a60 1
#include <time.h>
d65 1
a65 1
static const char rcsid[] = "$Sudo: sudo_edit.c,v 1.16 2004/09/15 16:16:20 millert Exp $";
d69 1
d74 1
a74 1
int sudo_edit(argc, argv)
d77 1
d84 1
a84 1
    int i, ac, ofd, tfd, nargc, rval, tmplen;
a112 2
     * XXX - It would be nice to lock the original files but that means
     *       keeping an extra fd open for each file.
d117 1
d119 11
a129 2
	ofd = open(*ap, O_RDONLY, 0644);
	if (ofd != -1) {
d131 1
a131 1
	    if (fstat(ofd, &sb) != 0) {
d133 1
a133 1
	    if (stat(tf[i].ofile, &sb) != 0) {
a134 2
		close(ofd);	/* XXX - could reset errno */
		ofd = -1;
d138 2
a139 2
	if (ofd == -1) {
	    if (errno != ENOENT) {
d141 4
a144 8
		argc--;
		i--;
		continue;
	    }
	    memset(&sb, 0, sizeof(sb));
	} else if (!S_ISREG(sb.st_mode)) {
	    warnx("%s: not a regular file", *ap);
	    close(ofd);
d202 1
d218 5
a222 2
    for (cp = editor + 1; *cp != '\0'; cp++) {
	if (isblank((unsigned char)cp[0]) && !isblank((unsigned char)cp[-1]))
d224 1
d256 3
d267 1
a267 1
     * signal to its privileged parent to we have to request
d292 1
d294 7
a300 1
	tfd = open(tf[i].tfile, O_RDONLY, 0644);
d302 5
a306 2
	if (tfd < 0) {
	    warn("unable to read %s", tf[i].tfile);
d308 2
d312 6
a317 14
#ifdef HAVE_FSTAT
	if (fstat(tfd, &sb) == 0) {
	    if (!S_ISREG(sb.st_mode)) {
		warnx("%s: not a regular file", tf[i].tfile);
		warnx("%s left unmodified", tf[i].ofile);
		continue;
	    }
	    if (tf[i].osize == sb.st_size &&
		tf[i].omtim.tv_sec == mtim_getsec(sb) &&
		tf[i].omtim.tv_nsec == mtim_getnsec(sb)) {
		/*
		 * If mtime and size match but the user spent no measurable
		 * time in the editor we can't tell if the file was changed.
		 */
d319 1
a319 1
		timespecsub(&ts1, &ts2);
d321 1
a321 1
		timespecsub(&ts1, &ts2, &ts2);
d323 5
a327 6
		if (timespecisset(&ts2)) {
		    warnx("%s unchanged", tf[i].ofile);
		    unlink(tf[i].tfile);
		    close(tfd);
		    continue;
		}
a329 1
#endif
@


1.2
log
@Update to sudo 1.6.8p4
@
text
@d296 3
d300 1
@


1.1
log
@Update to sudo 1.6.8p1
@
text
@d76 1
a76 1
    int i, ac, ofd, tfd, nargc, rval;
d98 3
d147 1
a147 1
	easprintf(&tf[i].tfile, "%s%s.XXXXXXXX", tmpdir, cp);
@

