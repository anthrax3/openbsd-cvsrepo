head	1.6;
access;
symbols
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.5;
commitid	8ra5qnWqy2bUhcZn;

1.5
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.31.21.13.43;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 2004-2005 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <config.h>

#include <errno.h>
#ifndef HAVE_TIMESPEC
# include <time.h>
#endif
#ifdef __STDC__
# include <stdarg.h>
#else
# include <varargs.h>
#endif

#include <compat.h>

/*
 * Dummy versions of the execve() family of syscalls.  We don't need
 * to stub out all of them, just the ones that correspond to actual
 * system calls (which varies by OS).  Note that it is still possible
 * to access the real syscalls via the syscall() interface but very
 * few programs actually do that.
 */

#ifndef errno
extern int errno;
#endif

#define DUMMY_BODY				\
{						\
    errno = EACCES;				\
    return(-1);					\
}

#ifdef __STDC__

#define DUMMY2(fn, t1, t2)			\
int						\
fn(t1 a1, t2 a2)				\
DUMMY_BODY

#define DUMMY3(fn, t1, t2, t3)			\
int						\
fn(t1 a1, t2 a2, t3 a3)				\
DUMMY_BODY

#define DUMMY_VA(fn, t1, t2)			\
int						\
fn(t1 a1, t2 a2, ...)				\
DUMMY_BODY

#else /* !__STDC__ */

#define DUMMY2(fn, t1, t2)			\
int						\
fn(a1, a2)					\
t1 a1; t2 a2;					\
DUMMY_BODY

#define DUMMY3(fn, t1, t2, t3)			\
int						\
fn(a1, a2, a3)					\
t1 a1; t2 a2; t3 a3;				\
DUMMY_BODY

#define DUMMY_VA(fn, t1, t2)			\
int						\
fn(a1, a2, va_alist)				\
t1 a1; t2 a2; va_dcl				\
DUMMY_BODY

#endif /* !__STDC__ */

DUMMY_VA(execl, const char *, const char *)
DUMMY_VA(_execl, const char *, const char *)
DUMMY_VA(__execl, const char *, const char *)
DUMMY_VA(execle, const char *, const char *)
DUMMY_VA(_execle, const char *, const char *)
DUMMY_VA(__execle, const char *, const char *)
DUMMY_VA(execlp, const char *, const char *)
DUMMY_VA(_execlp, const char *, const char *)
DUMMY_VA(__execlp, const char *, const char *)
DUMMY2(execv, const char *, char * const *)
DUMMY2(_execv, const char *, char * const *)
DUMMY2(__execv, const char *, char * const *)
DUMMY2(execvp, const char *, char * const *)
DUMMY2(_execvp, const char *, char * const *)
DUMMY2(__execvp, const char *, char * const *)
DUMMY3(execvP, const char *, const char *, char * const *)
DUMMY3(_execvP, const char *, const char *, char * const *)
DUMMY3(__execvP, const char *, const char *, char * const *)
DUMMY3(execve, const char *, char * const *, char * const *)
DUMMY3(_execve, const char *, char * const *, char * const *)
DUMMY3(__execve, const char *, char * const *, char * const *)
DUMMY3(fexecve, int , char * const *, char * const *)
DUMMY3(_fexecve, int , char * const *, char * const *)
DUMMY3(__fexecve, int , char * const *, char * const *)
@


1.5
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.4
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@a30 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: sudo_noexec.c,v 1.12 2005/03/12 23:43:40 millert Exp $";
#endif /* lint */

@


1.3
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d32 1
a32 1
__unused static const char rcsid[] = "$Sudo: sudo_noexec.c,v 1.5.2.2 2007/06/12 00:56:43 millert Exp $";
@


1.2
log
@update to sudo 1.6.8p8
@
text
@d17 1
a17 1
#include "config.h"
d20 3
d29 2
d32 1
a32 1
static const char rcsid[] = "$Sudo: sudo_noexec.c,v 1.11 2005/03/10 15:09:28 millert Exp $";
@


1.1
log
@Update to sudo 1.6.8p1
@
text
@d2 1
a2 1
 * Copyright (c) 2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d20 5
d27 1
a27 1
static const char rcsid[] = "$Sudo: sudo_noexec.c,v 1.5 2004/02/13 21:36:43 millert Exp $";
d42 4
a45 7
#define DUMMY(fn, args, atypes)	\
int				\
fn args				\
    atypes			\
{				\
    errno = EACCES;		\
    return(-1);			\
d48 63
a110 12
DUMMY(execve, (path, argv, envp),
      const char *path; char *const argv[]; char *const envp[];)
DUMMY(_execve, (path, argv, envp),
      const char *path; char *const argv[]; char *const envp[];)
DUMMY(execv, (path, argv, envp),
      const char *path; char *const argv[];)
DUMMY(_execv, (path, argv, envp),
      const char *path; char *const argv[];)
DUMMY(fexecve, (fd, argv, envp),
      int fd; char *const argv[]; char *const envp[];)
DUMMY(_fexecve, (fd, argv, envp),
      int fd; char *const argv[]; char *const envp[];)
@

