head	1.13;
access;
symbols
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.8.0.6
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.13
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.12;
commitid	8ra5qnWqy2bUhcZn;

1.12
date	2013.11.06.21.30.56;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.22.16.33.42;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.05.00.23.57;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.15.21.23.54;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.23.23.03.24;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.21.17.58.45;	author millert;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2002.01.18.17.20.23;	author millert;	state Exp;
branches;
next	;

1.1.4.1
date	2002.01.18.16.14.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 2000-2005, 2007-2008, 2010
 *	Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#include <config.h>

#include <sys/types.h>
#include <sys/param.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <ctype.h>
#include <pwd.h>
#include <signal.h>

#include <login_cap.h>
#include <bsd_auth.h>

#include "sudo.h"
#include "sudo_auth.h"

#ifndef LOGIN_DEFROOTCLASS
# define LOGIN_DEFROOTCLASS	"daemon"
#endif

extern char *login_style;		/* from sudo.c */

struct bsdauth_state {
    auth_session_t *as;
    login_cap_t *lc;
};

int
bsdauth_init(pw, promptp, auth)
    struct passwd *pw;
    char **promptp;
    sudo_auth *auth;
{
    static struct bsdauth_state state;

    /* Get login class based on auth user, which may not be invoking user. */
    if (pw->pw_class && *pw->pw_class)
       state.lc = login_getclass(pw->pw_class);
    else
       state.lc = login_getclass(pw->pw_uid ? LOGIN_DEFCLASS : LOGIN_DEFROOTCLASS);
    if (state.lc == NULL) {
	log_error(USE_ERRNO|NO_MAIL,
	    "unable to get login class for user %s", pw->pw_name);
	return(AUTH_FATAL);
    }

    if ((state.as = auth_open()) == NULL) {
	log_error(USE_ERRNO|NO_MAIL,
	    "unable to begin bsd authentication");
	login_close(state.lc);
	return(AUTH_FATAL);
    }

    /* XXX - maybe sanity check the auth style earlier? */
    login_style = login_getstyle(state.lc, login_style, "auth-sudo");
    if (login_style == NULL) {
	log_error(NO_MAIL, "invalid authentication type");
	auth_close(state.as);
	login_close(state.lc);
	return(AUTH_FATAL);
    }

     if (auth_setitem(state.as, AUTHV_STYLE, login_style) < 0 ||
	auth_setitem(state.as, AUTHV_NAME, pw->pw_name) < 0 ||
	auth_setitem(state.as, AUTHV_CLASS, login_class) < 0) {
	log_error(NO_MAIL, "unable to setup authentication");
	auth_close(state.as);
	login_close(state.lc);
	return(AUTH_FATAL);
    }

    auth->data = (void *) &state;
    return(AUTH_SUCCESS);
}

int
bsdauth_verify(pw, prompt, auth)
    struct passwd *pw;
    char *prompt;
    sudo_auth *auth;
{
    char *pass;
    char *s;
    size_t len;
    int authok = 0;
    sigaction_t sa, osa;
    auth_session_t *as = ((struct bsdauth_state *) auth->data)->as;

    /* save old signal handler */
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_RESTART;
    sa.sa_handler = SIG_DFL;
    (void) sigaction(SIGCHLD, &sa, &osa);

    /*
     * If there is a challenge then print that instead of the normal
     * prompt.  If the user just hits return we prompt again with echo
     * turned on, which is useful for challenge/response things like
     * S/Key.
     */
    if ((s = auth_challenge(as)) == NULL) {
	pass = tgetpass(prompt, def_passwd_timeout * 60, tgetpass_flags);
    } else {
	pass = tgetpass(s, def_passwd_timeout * 60, tgetpass_flags);
	if (pass && *pass == '\0') {
	    if ((prompt = strrchr(s, '\n')))
		prompt++;
	    else
		prompt = s;

	    /*
	     * Append '[echo on]' to the last line of the challenge and
	     * reprompt with echo turned on.
	     */
	    len = strlen(prompt) - 1;
	    while (isspace(prompt[len]) || prompt[len] == ':')
		prompt[len--] = '\0';
	    easprintf(&s, "%s [echo on]: ", prompt);
	    pass = tgetpass(s, def_passwd_timeout * 60,
		tgetpass_flags | TGP_ECHO);
	    free(s);
	}
    }

    if (pass) {
	authok = auth_userresponse(as, pass, 1);
	zero_bytes(pass, strlen(pass));
    }

    /* restore old signal handler */
    (void) sigaction(SIGCHLD, &osa, NULL);

    if (authok)
	return(AUTH_SUCCESS);

    if (!pass)
	return(AUTH_INTR);

    if ((s = auth_getvalue(as, "errormsg")) != NULL)
	log_error(NO_MAIL, "%s", s);
    return(AUTH_FAILURE);
}

int
bsdauth_cleanup(pw, auth)
    struct passwd *pw;
    sudo_auth *auth;
{
    struct bsdauth_state *state = auth->data;

    if (state != NULL) {
	auth_close(state->as);
	login_close(state->lc);
    }

    return(AUTH_SUCCESS);
}
@


1.12
log
@Back port remainder of use_loginclass fix from sudo 1.7.9.
@
text
@@


1.11
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@d2 2
a3 1
 * Copyright (c) 2000-2005, 2007-2008 Todd C. Miller <Todd.Miller@@courtesan.com>
d55 4
d61 5
d72 12
a83 2
    static auth_session_t *as;
    extern login_cap_t *lc;			/* from sudo.c */
d85 2
a86 2
    if ((as = auth_open()) == NULL) {
	log_error(USE_ERRNO|NO_EXIT|NO_MAIL,
d88 1
d93 1
a93 1
    login_style = login_getstyle(lc, login_style, "auth-sudo");
d95 3
a97 2
	log_error(NO_EXIT|NO_MAIL, "invalid authentication type");
	auth_close(as);
d101 6
a106 5
     if (auth_setitem(as, AUTHV_STYLE, login_style) < 0 ||
	auth_setitem(as, AUTHV_NAME, pw->pw_name) < 0 ||
	auth_setitem(as, AUTHV_CLASS, login_class) < 0) {
	log_error(NO_EXIT|NO_MAIL, "unable to setup authentication");
	auth_close(as);
d110 1
a110 1
    auth->data = (void *) as;
d125 1
a125 1
    auth_session_t *as = (auth_session_t *) auth->data;
d178 1
a178 1
	log_error(NO_EXIT|NO_MAIL, "%s", s);
d187 1
a187 1
    auth_session_t *as = (auth_session_t *) auth->data;
d189 4
a192 1
    auth_close(as);
@


1.10
log
@sync with sudo repo
@
text
@a53 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: bsdauth.c,v 1.23 2008/11/09 14:13:13 millert Exp $";
#endif /* lint */

@


1.9
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2005 Todd C. Miller <Todd.Miller@@courtesan.com>
d55 1
a55 1
__unused static const char rcsid[] = "$Sudo: bsdauth.c,v 1.21 2008/03/30 21:36:51 millert Exp $";
a106 1
    extern int nil_pw;
a143 3
    if (!pass || *pass == '\0')		/* ^C or empty password */
	nil_pw = 1;

d154 3
@


1.8
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@d55 1
a55 1
__unused static const char rcsid[] = "$Sudo: bsdauth.c,v 1.16.2.2 2007/06/12 01:28:42 millert Exp $";
d91 1
a91 1
    auth->data = (VOID *) as;
d149 1
a149 1
	authok = auth_userresponse(as, (char *)pass, 1);
@


1.7
log
@Update to sudo 1.6.8p1
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2004 Todd C. Miller <Todd.Miller@@courtesan.com>
d21 1
a21 1
#include "config.h"
d55 1
a55 1
static const char rcsid[] = "$Sudo: bsdauth.c,v 1.16 2004/06/07 00:02:56 millert Exp $";
@


1.6
log
@Get rid of volatile variables that were a vain attempt to prevent the
compiler from optimizing away memset() calls.  Instead, add a new function,
zero_bytes(), to clear buffers with sensitive contents.
Taken from the sudo cvs repo, man.
@
text
@d2 1
a2 2
 * Copyright (c) 2000-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
 * All rights reserved.
d4 11
a14 28
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d55 1
a55 1
static const char rcsid[] = "$Sudo: bsdauth.c,v 1.11 2003/04/16 00:42:10 millert Exp $";
d70 1
a70 1
	log_error(USE_ERRNO|NO_EXIT|NO_MAIL, 
d122 1
a122 1
	pass = tgetpass(prompt, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
d124 1
a124 1
	pass = tgetpass(s, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
d139 1
a139 1
	    pass = tgetpass(s, def_ival(I_PASSWD_TIMEOUT) * 60,
@


1.5
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@d119 1
a119 1
    volatile char *pass;
d168 1
a168 1
	memset(pass, 0, strlen(pass));
@


1.4
log
@update to what will soon be sudo 1.6.7
@
text
@d33 4
d73 1
a73 1
static const char rcsid[] = "$Sudo: bsdauth.c,v 1.10 2003/03/15 20:37:44 millert Exp $";
@


1.3
log
@update to sudo 1.6.5p2
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d69 1
a69 1
static const char rcsid[] = "$Sudo: bsdauth.c,v 1.8 2002/01/22 03:37:55 millert Exp $";
d115 2
a116 1
    char *s, *pass;
d163 1
a163 1
	authok = auth_userresponse(as, pass, 1);
@


1.2
log
@Update to sudo 1.6.4
@
text
@d60 1
d69 1
a69 1
static const char rcsid[] = "$Sudo: bsdauth.c,v 1.6 2001/12/14 19:52:53 millert Exp $";
d117 2
a118 2
    int authok;
    sig_t childkiller;
d123 4
a126 1
    childkiller = signal(SIGCHLD, SIG_DFL);
d161 4
a164 1
    authok = pass ? auth_userresponse(as, pass, 1) : 0;
d167 1
a167 1
    (void)signal(SIGCHLD, childkiller);
@


1.1
log
@A few updates from the sudo developement tree:
- Add bsd authentication support (currently disabled)
- Always check setenv() return value
- Fix umask disabling
@
text
@d2 1
a2 1
 * Copyright (c) 2000 Todd C. Miller <Todd.Miller@@courtesan.com>
d37 2
d41 6
a46 1
#include <stdlib.h>
d48 7
d56 1
a56 1
#include <unistd.h>
a57 6
#ifdef HAVE_STRING_H
#include <string.h>
#endif /* HAVE_STRING_H */
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif /* HAVE_STRINGS_H */
a58 2
#include <sys/param.h>
#include <sys/types.h>
d68 1
a68 1
static const char rcsid[] = "$Sudo: bsdauth.c,v 1.3 2000/10/30 03:45:11 millert Exp $";
d131 1
a131 1
	pass = tgetpass(prompt, def_ival(I_PW_TIMEOUT) * 60, tgetpass_flags);
d133 2
a134 2
	pass = tgetpass(s, def_ival(I_PW_TIMEOUT) * 60, tgetpass_flags);
	if (!pass || *pass == '\0') {
d148 1
a148 1
	    pass = tgetpass(s, def_ival(I_PW_TIMEOUT) * 60,
d154 2
a155 2
    if (!pass || *pass == '\0')
	nil_pw = 1;			/* empty password */
d157 1
a157 1
    authok = auth_userresponse(as, pass, 1);
@


1.1.2.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
a36 2
#include <sys/types.h>
#include <sys/param.h>
d39 1
a39 6
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
d41 3
d45 1
a45 5
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
d47 3
a49 3
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
d51 2
d62 1
a62 1
static const char rcsid[] = "$Sudo: bsdauth.c,v 1.6 2001/12/14 19:52:53 millert Exp $";
d125 1
a125 1
	pass = tgetpass(prompt, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
d127 2
a128 2
	pass = tgetpass(s, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
	if (pass && *pass == '\0') {
d142 1
a142 1
	    pass = tgetpass(s, def_ival(I_PASSWD_TIMEOUT) * 60,
d148 2
a149 2
    if (!pass || *pass == '\0')		/* ^C or empty password */
	nil_pw = 1;
d151 1
a151 1
    authok = pass ? auth_userresponse(as, pass, 1) : 0;
@


1.1.4.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 2000-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
a36 2
#include <sys/types.h>
#include <sys/param.h>
d39 1
a39 6
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
d41 3
d45 1
a45 5
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
d47 3
a49 3
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
d51 2
d62 1
a62 1
static const char rcsid[] = "$Sudo: bsdauth.c,v 1.6 2001/12/14 19:52:53 millert Exp $";
d125 1
a125 1
	pass = tgetpass(prompt, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
d127 2
a128 2
	pass = tgetpass(s, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
	if (pass && *pass == '\0') {
d142 1
a142 1
	    pass = tgetpass(s, def_ival(I_PASSWD_TIMEOUT) * 60,
d148 2
a149 2
    if (!pass || *pass == '\0')		/* ^C or empty password */
	nil_pw = 1;
d151 1
a151 1
    authok = pass ? auth_userresponse(as, pass, 1) : 0;
@


