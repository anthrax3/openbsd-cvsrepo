head	1.14;
access;
symbols
	OPENBSD_5_7:1.13.0.18
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.22
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SUDO_1_6_0:1.1.1.1
	COURTESAN:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.13;
commitid	8ra5qnWqy2bUhcZn;

1.13
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.22.16.33.42;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.05.00.23.57;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.03.19.15.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.15.21.23.54;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.23.23.03.24;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.03.03.49.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.27.03.44.39;	author millert;	state Exp;
branches
	1.2.6.1
	1.2.8.1;
next	1.1;

1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.18.16.29.01;	author millert;	state Exp;
branches;
next	;

1.2.6.1
date	2002.01.18.17.20.23;	author millert;	state Exp;
branches;
next	;

1.2.8.1
date	2002.01.18.16.14.46;	author millert;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 1999-2005, 2008 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#include <config.h>

#include <sys/types.h>
#include <sys/param.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <pwd.h>

#include <auth.h>
#include <firewall.h>

#include "sudo.h"
#include "sudo_auth.h"

int
fwtk_init(pw, promptp, auth)
    struct passwd *pw;
    char **promptp;
    sudo_auth *auth;
{
    static Cfg *confp;			/* Configuration entry struct */
    char resp[128];			/* Response from the server */

    if ((confp = cfg_read("sudo")) == (Cfg *)-1) {
	warningx("cannot read fwtk config");
	return(AUTH_FATAL);
    }

    if (auth_open(confp)) {
	warningx("cannot connect to authentication server");
	return(AUTH_FATAL);
    }

    /* Get welcome message from auth server */
    if (auth_recv(resp, sizeof(resp))) {
	warningx("lost connection to authentication server");
	return(AUTH_FATAL);
    }
    if (strncmp(resp, "Authsrv ready", 13) != 0) {
	warningx("authentication server error:\n%s", resp);
	return(AUTH_FATAL);
    }

    return(AUTH_SUCCESS);
}

int
fwtk_verify(pw, prompt, auth)
    struct passwd *pw;
    char *prompt;
    sudo_auth *auth;
{
    char *pass;				/* Password from the user */
    char buf[SUDO_PASS_MAX + 12];	/* General prupose buffer */
    char resp[128];			/* Response from the server */
    int error;

    /* Send username to authentication server. */
    (void) snprintf(buf, sizeof(buf), "authorize %s 'sudo'", pw->pw_name);
restart:
    if (auth_send(buf) || auth_recv(resp, sizeof(resp))) {
	warningx("lost connection to authentication server");
	return(AUTH_FATAL);
    }

    /* Get the password/response from the user. */
    if (strncmp(resp, "challenge ", 10) == 0) {
	(void) snprintf(buf, sizeof(buf), "%s\nResponse: ", &resp[10]);
	pass = tgetpass(buf, def_passwd_timeout * 60, tgetpass_flags);
	if (pass && *pass == '\0') {
	    pass = tgetpass("Response [echo on]: ",
		def_passwd_timeout * 60, tgetpass_flags | TGP_ECHO);
	}
    } else if (strncmp(resp, "chalnecho ", 10) == 0) {
	pass = tgetpass(&resp[10], def_passwd_timeout * 60, tgetpass_flags);
    } else if (strncmp(resp, "password", 8) == 0) {
	pass = tgetpass(prompt, def_passwd_timeout * 60,
	    tgetpass_flags);
    } else if (strncmp(resp, "display ", 8) == 0) {
	fprintf(stderr, "%s\n", &resp[8]);
	strlcpy(buf, "response dummy", sizeof(buf));
	goto restart;
    } else {
	warningx("%s", resp);
	return(AUTH_FATAL);
    }
    if (!pass) {			/* ^C or error */
	return(AUTH_INTR);
    }

    /* Send the user's response to the server */
    (void) snprintf(buf, sizeof(buf), "response '%s'", pass);
    if (auth_send(buf) || auth_recv(resp, sizeof(resp))) {
	warningx("lost connection to authentication server");
	error = AUTH_FATAL;
	goto done;
    }

    if (strncmp(resp, "ok", 2) == 0) {
	error = AUTH_SUCCESS;
	goto done;
    }

    /* Main loop prints "Permission Denied" or insult. */
    if (strcmp(resp, "Permission Denied.") != 0)
	warningx("%s", resp);
    error = AUTH_FAILURE;
done:
    zero_bytes(pass, strlen(pass));
    zero_bytes(buf, strlen(buf));
    return(error);
}

int
fwtk_cleanup(pw, auth)
    struct passwd *pw;
    sudo_auth *auth;
{

    auth_close();
    return(AUTH_SUCCESS);
}
@


1.13
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.12
log
@sync with sudo repo
@
text
@a51 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: fwtk.c,v 1.29 2008/11/09 14:13:13 millert Exp $";
#endif /* lint */

@


1.11
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2005 Todd C. Miller <Todd.Miller@@courtesan.com>
d53 1
a53 1
__unused static const char rcsid[] = "$Sudo: fwtk.c,v 1.27 2005/02/12 22:56:07 millert Exp $";
a97 1
    extern int nil_pw;
d129 2
a130 4
	nil_pw = 1;
	return(AUTH_FAILURE);
    } else if (*pass == '\0')		/* empty password */
	nil_pw = 1;
@


1.10
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@a43 5
#ifdef HAVE_ERR_H
# include <err.h>
#else
# include "emul/err.h"
#endif /* HAVE_ERR_H */
d53 1
a53 1
__unused static const char rcsid[] = "$Sudo: fwtk.c,v 1.23.2.2 2007/06/12 01:28:42 millert Exp $";
d66 1
a66 1
	warnx("cannot read fwtk config");
d71 1
a71 1
	warnx("cannot connect to authentication server");
d77 1
a77 1
	warnx("lost connection to authentication server");
d81 1
a81 1
	warnx("authentication server error:\n%s", resp);
d104 1
a104 1
	warnx("lost connection to authentication server");
d126 1
a126 1
	warnx("%s", resp);
d138 1
a138 1
	warnx("lost connection to authentication server");
d150 1
a150 1
	warnx("%s", resp);
@


1.9
log
@Update to sudo 1.6.8p1
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2003 Todd C. Miller <Todd.Miller@@courtesan.com>
d21 1
a21 1
#include "config.h"
d58 1
a58 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.23 2004/02/13 21:36:47 millert Exp $";
@


1.8
log
@Get rid of volatile variables that were a vain attempt to prevent the
compiler from optimizing away memset() calls.  Instead, add a new function,
zero_bytes(), to clear buffers with sensitive contents.
Taken from the sudo cvs repo, man.
@
text
@a2 1
 * All rights reserved.
d4 11
a14 28
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d58 1
a58 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.19 2003/04/16 00:42:10 millert Exp $";
d107 1
d116 1
a116 1
	pass = tgetpass(buf, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
d119 1
a119 1
		def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags | TGP_ECHO);
d121 2
d124 1
a124 1
	pass = tgetpass(prompt, def_ival(I_PASSWD_TIMEOUT) * 60,
d126 4
@


1.7
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@d117 2
a118 2
    volatile char *pass;		/* Password from the user */
    volatile char buf[SUDO_PASS_MAX + 12]; /* General prupose buffer */
d169 2
a170 2
    memset(pass, 0, strlen(pass));
    memset(buf, 0, strlen(buf));
@


1.6
log
@Sync with my sudo cvs repo:
 o update to sudo 1.6.7p2
 o use warn/err throughout
@
text
@d33 4
d76 1
a76 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.18 2003/04/02 18:25:29 millert Exp $";
@


1.5
log
@update to what will soon be sudo 1.6.7
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d58 5
d72 1
a72 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.17 2003/03/15 20:37:44 millert Exp $";
d85 1
a85 1
	(void) fprintf(stderr, "%s: cannot read fwtk config.\n", Argv[0]);
d90 1
a90 2
	(void) fprintf(stderr, "%s: cannot connect to authentication server.\n",
	    Argv[0]);
d96 1
a96 2
	(void) fprintf(stderr,
	    "%s: lost connection to authentication server.\n", Argv[0]);
d100 1
a100 2
	(void) fprintf(stderr,
	    "%s: authentication server error.\n%s\n", Argv[0], resp);
d122 1
a122 2
	(void) fprintf(stderr,
	    "%s: lost connection to authentication server.\n", Argv[0]);
d138 1
a138 1
	(void) fprintf(stderr, "%s: %s\n", Argv[0], resp);
d150 1
a150 2
	(void) fprintf(stderr,
	    "%s: lost connection to authentication server.\n", Argv[0]);
d162 1
a162 1
	fprintf(stderr, "%s: %s\n", Argv[0], resp);
@


1.4
log
@update to sudo 1.6.5p2
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d67 1
a67 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.15 2002/01/21 22:25:14 millert Exp $";
d111 2
a112 2
    char *pass;				/* Password from the user */
    char buf[SUDO_PASS_MAX + 12];	/* General prupose buffer */
@


1.3
log
@Update to sudo 1.6.4
@
text
@d67 1
a67 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.14 2001/12/14 19:52:53 millert Exp $";
d114 1
d151 2
a152 1
	return(AUTH_FATAL);
d155 4
a158 2
    if (strncmp(resp, "ok", 2) == 0)
	return(AUTH_SUCCESS);
d163 5
a167 1
    return(AUTH_FAILURE);
@


1.2
log
@sudo 1.6.3; see http://www.courtesan.com/sudo/current.html for a list
of changes.
@
text
@d2 1
a2 1
 * Copyright (c) 1999 Todd C. Miller <Todd.Miller@@courtesan.com>
d37 2
d41 6
a46 1
#include <stdlib.h>
d48 7
d56 1
a56 1
#include <unistd.h>
a57 8
#ifdef HAVE_STRING_H
#include <string.h>
#endif /* HAVE_STRING_H */
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif /* HAVE_STRINGS_H */
#include <sys/param.h>
#include <sys/types.h>
d67 1
a67 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.10 2000/02/27 03:49:06 millert Exp $";
d127 5
a131 2
	pass = tgetpass(buf, def_ival(I_PW_TIMEOUT) * 60,
	    tgetpass_flags | TGP_ECHO);
d133 2
a134 1
	pass = tgetpass(prompt, def_ival(I_PW_TIMEOUT) * 60, tgetpass_flags);
d139 5
a143 2
    if (!pass || *pass == '\0')
	nil_pw = 1;			/* empty password */
@


1.2.6.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
a36 2
#include <sys/types.h>
#include <sys/param.h>
d39 1
a39 6
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
d41 3
d45 1
a45 5
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
d47 5
a51 3
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
d61 1
a61 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.14 2001/12/14 19:52:53 millert Exp $";
d121 2
a122 5
	pass = tgetpass(buf, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
	if (pass && *pass == '\0') {
	    pass = tgetpass("Response [echo on]: ",
		def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags | TGP_ECHO);
	}
d124 1
a124 2
	pass = tgetpass(prompt, def_ival(I_PASSWD_TIMEOUT) * 60,
	    tgetpass_flags);
d129 2
a130 5
    if (!pass) {			/* ^C or error */
	nil_pw = 1;
	return(AUTH_FAILURE);
    } else if (*pass == '\0')		/* empty password */
	nil_pw = 1;
@


1.2.8.1
log
@update to sudo 1.6.5p1
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2001 Todd C. Miller <Todd.Miller@@courtesan.com>
a36 2
#include <sys/types.h>
#include <sys/param.h>
d39 1
a39 6
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
d41 3
d45 1
a45 5
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
d47 5
a51 3
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
d61 1
a61 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.14 2001/12/14 19:52:53 millert Exp $";
d121 2
a122 5
	pass = tgetpass(buf, def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
	if (pass && *pass == '\0') {
	    pass = tgetpass("Response [echo on]: ",
		def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags | TGP_ECHO);
	}
d124 1
a124 2
	pass = tgetpass(prompt, def_ival(I_PASSWD_TIMEOUT) * 60,
	    tgetpass_flags);
d129 2
a130 5
    if (!pass) {			/* ^C or error */
	nil_pw = 1;
	return(AUTH_FAILURE);
    } else if (*pass == '\0')		/* empty password */
	nil_pw = 1;
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
static const char rcsid[] = "$Sudo: fwtk.c,v 1.9 1999/10/12 00:53:41 millert Exp $";
d121 2
a122 1
	pass = tgetpass(buf, def_ival(I_PW_TIMEOUT) * 60, 0);
d124 1
a124 1
	pass = tgetpass(prompt, def_ival(I_PW_TIMEOUT) * 60, 1);
@


1.1.1.1
log
@sudo 1.6, now with a BSD license
@
text
@@
