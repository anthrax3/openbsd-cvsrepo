head	1.9;
access;
symbols
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.07.03.21.51.54;	author millert;	state dead;
branches;
next	1.8;
commitid	8ra5qnWqy2bUhcZn;

1.8
date	2010.03.04.12.21.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.22.16.33.42;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.14.11.58.08;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.26.16.10.16;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.28.15.10.51;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.19.21.57.17;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.03.19.15.34;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.15.21.23.54;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove sudo, it is now in ports.
@
text
@/*
 * Copyright (c) 1999-2005, 2007 Todd C. Miller <Todd.Miller@@courtesan.com>
 * Copyright (c) 2002 Michael Stroucken <michael@@stroucken.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F39502-99-1-0512.
 */

#include <config.h>

#include <sys/types.h>
#include <sys/param.h>
#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif /* STDC_HEADERS */
#ifdef HAVE_STRING_H
# include <string.h>
#else
# ifdef HAVE_STRINGS_H
#  include <strings.h>
# endif
#endif /* HAVE_STRING_H */
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif /* HAVE_UNISTD_H */
#include <pwd.h>

/* Needed for SecurID v5.0 Authentication on UNIX */
#define UNIX 1
#include <acexport.h>
#include <sdacmvls.h>

#include "sudo.h"
#include "sudo_auth.h"

/*
 * securid_init - Initialises communications with ACE server
 * Arguments in:
 *     pw - UNUSED
 *     promptp - UNUSED
 *     auth - sudo authentication structure
 *
 * Results out:
 *     auth - auth->data contains pointer to new SecurID handle
 *     return code - Fatal if initialization unsuccessful, otherwise
 *                   success.
 */
int
securid_init(pw, promptp, auth)
    struct passwd *pw;
    char **promptp;
    sudo_auth *auth;
{
    static SDI_HANDLE sd_dat;			/* SecurID handle */

    auth->data = (void *) &sd_dat;		/* For method-specific data */

    /* Start communications */
    if (AceInitialize() != SD_FALSE)
	return(AUTH_SUCCESS);

    warningx("failed to initialise the ACE API library");
    return(AUTH_FATAL);
}

/*
 * securid_setup - Initialises a SecurID transaction and locks out other
 *     ACE servers
 *
 * Arguments in:
 *     pw - struct passwd for username
 *     promptp - UNUSED
 *     auth - sudo authentication structure for SecurID handle
 *
 * Results out:
 *     return code - Success if transaction started correctly, fatal
 *                   otherwise
 */
int
securid_setup(pw, promptp, auth)
    struct passwd *pw;
    char **promptp;
    sudo_auth *auth;
{
    SDI_HANDLE *sd = (SDI_HANDLE *) auth->data;
    int retval;

    /* Re-initialize SecurID every time. */
    if (SD_Init(sd) != ACM_OK) {
	warningx("unable to contact the SecurID server");
	return(AUTH_FATAL);
    }

    /* Lock new PIN code */
    retval = SD_Lock(*sd, pw->pw_name);

    switch (retval) {
	case ACM_OK:
		warningx("User ID locked for SecurID Authentication");
		return(AUTH_SUCCESS);

        case ACE_UNDEFINED_USERNAME:
		warningx("invalid username length for SecurID");
		return(AUTH_FATAL);

	case ACE_ERR_INVALID_HANDLE:
		warningx("invalid Authentication Handle for SecurID");
		return(AUTH_FATAL);

	case ACM_ACCESS_DENIED:
		warningx("SecurID communication failed");
		return(AUTH_FATAL);

	default:
		warningx("unknown SecurID error");
		return(AUTH_FATAL);
	}
}

/*
 * securid_verify - Authenticates user and handles ACE responses
 *
 * Arguments in:
 *     pw - struct passwd for username
 *     pass - UNUSED
 *     auth - sudo authentication structure for SecurID handle
 *
 * Results out:
 *     return code - Success on successful authentication, failure on
 *                   incorrect authentication, fatal on errors
 */
int
securid_verify(pw, pass, auth)
    struct passwd *pw;
    char *pass;
    sudo_auth *auth;
{
    SDI_HANDLE *sd = (SDI_HANDLE *) auth->data;
    int rval;

    pass = (char *) tgetpass("Enter your PASSCODE: ",
	def_passwd_timeout * 60, tgetpass_flags);

    /* Have ACE verify password */
    switch (SD_Check(*sd, pass, pw->pw_name)) {
	case ACM_OK:
		rval = AUTH_SUCESS;
		break;

	case ACE_UNDEFINED_PASSCODE:
		warningx("invalid passcode length for SecurID");
		rval = AUTH_FATAL;
		break;

	case ACE_UNDEFINED_USERNAME:
		warningx("invalid username length for SecurID");
		rval = AUTH_FATAL;
		break;

	case ACE_ERR_INVALID_HANDLE:
		warningx("invalid Authentication Handle for SecurID");
		rval = AUTH_FATAL;
		break;

	case ACM_ACCESS_DENIED:
		rval = AUTH_FAILURE;
		break;

	case ACM_NEXT_CODE_REQUIRED:
                /* Sometimes (when current token close to expire?)
                   ACE challenges for the next token displayed
                   (entered without the PIN) */
        	pass = (char *) tgetpass("\
!!! ATTENTION !!!\n\
Wait for the token code to change, \n\
then enter the new token code.\n", \
		def_passwd_timeout * 60, tgetpass_flags);

		if (SD_Next(*sd, pass) == ACM_OK) {
			rval = AUTH_SUCCESS;
			break;
		}

		rval = AUTH_FAILURE;
		break;

	case ACM_NEW_PIN_REQUIRED:
                /*
		 * This user's SecurID has not been activated yet,
                 * or the pin has been reset
		 */
		/* XXX - Is setting up a new PIN within sudo's scope? */
		SD_Pin(*sd, "");
		fprintf(stderr, "Your SecurID access has not yet been set up.\n");
		fprintf(stderr, "Please set up a PIN before you try to authenticate.\n");
		rval = AUTH_FATAL;
		break;

	default:
		warningx("unknown SecurID error");
		rval = AUTH_FATAL;
		break;
    }

    /* Free resources */
    SD_Close(*sd);

    /* Return stored state to calling process */
    return(rval);
}
@


1.8
log
@Remove old $Sudo$ tags; the main sudo tree no longer lives in cvs.
@
text
@@


1.7
log
@sync with sudo repo
@
text
@a57 4
#ifndef lint
__unused static const char rcsid[] = "$Sudo: securid5.c,v 1.13 2008/11/09 14:13:13 millert Exp $";
#endif /* lint */

@


1.6
log
@Upgrade to sudo 1.7.  See the WHATSNEW files for details.
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2005 Todd C. Miller <Todd.Miller@@courtesan.com>
d59 1
a59 1
__unused static const char rcsid[] = "$Sudo: securid5.c,v 1.12 2007/08/31 23:30:07 millert Exp $";
@


1.5
log
@Update to sudo 1.6.9p1.  Note that the environment handling in sudo
1.6.9 has changed relative to older versions.  Sudo now starts
commands with a minimal environment containing the variables in the
env_keep and env_check lists.  This behavior is configurable in the
sudoers file.  Please see the "SECURITY NOTES" section in the sudo
manual.
@
text
@a47 5
#ifdef HAVE_ERR_H
# include <err.h>
#else
# include "emul/err.h"
#endif /* HAVE_ERR_H */
d59 1
a59 1
__unused static const char rcsid[] = "$Sudo: securid5.c,v 1.6.2.2 2007/06/12 00:56:44 millert Exp $";
d82 1
a82 1
    auth->data = (VOID *) &sd_dat;		/* For method-specific data */
d88 1
a88 1
    warnx("failed to initialise the ACE API library");
d116 1
a116 1
	warnx("unable to contact the SecurID server");
d125 1
a125 1
		warnx("User ID locked for SecurID Authentication");
d129 1
a129 1
		warnx("invalid username length for SecurID");
d133 1
a133 1
		warnx("invalid Authentication Handle for SecurID");
d137 1
a137 1
		warnx("SecurID communication failed");
d141 1
a141 1
		warnx("unknown SecurID error");
d177 1
a177 1
		warnx("invalid passcode length for SecurID");
d182 1
a182 1
		warnx("invalid username length for SecurID");
d187 1
a187 1
		warnx("invalid Authentication Handle for SecurID");
d226 1
a226 1
		warnx("unknown SecurID error");
@


1.4
log
@Update to sudo 1.6.8p1
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2003 Todd C. Miller <Todd.Miller@@courtesan.com>
d25 1
a25 1
#include "config.h"
d64 1
a64 1
static const char rcsid[] = "$Sudo: securid5.c,v 1.6 2004/02/13 21:36:47 millert Exp $";
d129 4
d145 3
a147 3
	case ACM_OK:
		warnx("User ID locked for SecurID Authentication");
		return(AUTH_SUCCESS);
d177 4
d194 1
d227 5
@


1.3
log
@sync w/ the sudo cvs tree and sudo 1.6.7p4
@
text
@a3 1
 * All rights reserved.
d5 11
a15 28
 * This code is derived from software contributed by Michael Stroucken
 * <michael@@stroucken.org>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * 4. Products derived from this software may not be called "Sudo" nor
 *    may "Sudo" appear in their names without specific prior written
 *    permission from the author.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
d64 1
a64 1
static const char rcsid[] = "$Sudo: securid5.c,v 1.4 2003/04/16 00:42:10 millert Exp $";
d169 1
a169 1
	def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
d199 1
a199 1
		def_ival(I_PASSWD_TIMEOUT) * 60, tgetpass_flags);
@


1.2
log
@Sync with my sudo cvs repo:
 o update to sudo 1.6.7p2
 o use warn/err throughout
@
text
@d37 4
d82 1
a82 1
static const char rcsid[] = "$Sudo: securid5.c,v 1.3 2003/04/02 18:25:30 millert Exp $";
@


1.1
log
@update to what will soon be sudo 1.6.7
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2002 Todd C. Miller <Todd.Miller@@courtesan.com>
d62 5
d78 1
a78 1
static const char rcsid[] = "$Sudo: securid5.c,v 1.2 2002/05/20 20:51:23 millert Exp $";
d107 1
a107 1
    fprintf(stderr, "Failed to initialise ACE API library.\n");
d135 1
a135 1
	(void) fprintf(stderr, "%s: Cannot contact SecurID server\n", Argv[0]);
d144 1
a144 1
		fprintf(stderr, "Invalid username length for SecurID\n");
d148 1
a148 1
		fprintf(stderr, "Invalid Authentication Handle for SecurID\n");
d152 1
a152 1
		fprintf(stderr, "SecurID communication has failed\n");
d156 1
a156 1
		fprintf(stderr, "User ID locked for SecurID Authentication\n");
d188 1
a188 1
		fprintf(stderr, "Invalid passcode length for SecurID\n");
d193 1
a193 1
		fprintf(stderr, "Invalid username length for SecurID\n");
d198 1
a198 1
		fprintf(stderr, "Invalid Authentication Handle for SecurID\n");
@

