head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.6
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.01.21.10.03.27;	author krw;	state Exp;
branches;
next	1.20;
commitid	M7cBcRoxG7ILQnzu;

1.20
date	2017.01.21.08.51.00;	author krw;	state Exp;
branches;
next	1.19;
commitid	I8FGaaPQHGWhw6ux;

1.19
date	2016.09.13.15.27.47;	author millert;	state Exp;
branches;
next	1.18;
commitid	VQ0UkbfusTQOpS19;

1.18
date	2015.10.09.01.37.08;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	sbrB3Q5CNxcwZpfU;

1.17
date	2015.10.07.14.13.23;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	FXwhnuxFsBS73vmZ;

1.16
date	2015.02.06.23.21.59;	author millert;	state Exp;
branches;
next	1.15;
commitid	STdsVrA5MGLlnbLm;

1.15
date	2014.05.20.01.25.23;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2013.11.26.13.19.07;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.40;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.17.10.42.08;	author sobrado;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.25.17.00.35;	author niallo;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.10.22.20.47;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.10;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.01.00.51.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.48;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.15;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.12.10.01.18;	author art;	state Exp;
branches;
next	1.4;

1.4
date	99.12.21.05.52.46;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.42.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.36.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.34;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Nuke more whitespace caught in the headlights of "warning:"
rectification.
@
text
@/*	$OpenBSD: look.c,v 1.20 2017/01/21 08:51:00 krw Exp $	*/
/*	$NetBSD: look.c,v 1.7 1995/08/31 22:41:02 jtc Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * David Hitz of Auspex Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * look -- find lines in a sorted list.
 *
 * The man page said that TABs and SPACEs participate in -d comparisons.
 * In fact, they were ignored.  This implements historic practice, not
 * the manual page.
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>

#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <err.h>

#include "pathnames.h"

#define	EQUAL		0
#define	GREATER		1
#define	LESS		(-1)

int dflag, fflag;

char	*binary_search(char *, char *, char *);
int	 compare(char *, char *, char *);
char	*linear_search(char *, char *, char *);
int	 look(char *, char *, char *);
void	 print_from(char *, char *, char *);
void	 usage(void);

int
main(int argc, char *argv[])
{
	struct stat sb;
	int ch, fd, termchar;
	char *back, *file, *front, *string, *p;

	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");

	file = _PATH_WORDS;
	termchar = '\0';
	while ((ch = getopt(argc, argv, "dft:")) != -1)
		switch(ch) {
		case 'd':
			dflag = 1;
			break;
		case 'f':
			fflag = 1;
			break;
		case 't':
			termchar = *optarg;
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	switch (argc) {
	case 2:				/* Don't set -df for user. */
		string = *argv++;
		file = *argv;
		break;
	case 1:				/* But set -df by default. */
		dflag = fflag = 1;
		string = *argv;
		break;
	default:
		usage();
	}

	if (termchar != '\0' && (p = strchr(string, termchar)) != NULL)
		*++p = '\0';

	if ((fd = open(file, O_RDONLY, 0)) < 0 || fstat(fd, &sb))
		err(2, "%s", file);
	if (sb.st_size > SIZE_MAX)
		errc(2, EFBIG, "%s", file);
	if ((front = mmap(NULL,
	    (size_t)sb.st_size, PROT_READ, MAP_PRIVATE, fd, (off_t)0)) == MAP_FAILED)
		err(2, "%s", file);
	back = front + sb.st_size;
	exit(look(string, front, back));
}

int
look(char *string, char *front, char *back)
{
	int ch;
	char *readp, *writep;

	/* Reformat string to avoid doing it multiple times later. */
	for (readp = writep = string; (ch = *readp++);) {
		if (fflag)
			ch = tolower((unsigned char)ch);
		if (!dflag || isalnum((unsigned char)ch))
			*(writep++) = ch;
	}
	*writep = '\0';

	front = binary_search(string, front, back);
	front = linear_search(string, front, back);

	if (front)
		print_from(string, front, back);
	return (front ? 0 : 1);
}


/*
 * Binary search for "string" in memory between "front" and "back".
 *
 * This routine is expected to return a pointer to the start of a line at
 * *or before* the first word matching "string".  Relaxing the constraint
 * this way simplifies the algorithm.
 *
 * Invariants:
 *	front points to the beginning of a line at or before the first
 *	matching string.
 *
 *	back points to the beginning of a line at or after the first
 *	matching line.
 *
 * Base of the Invariants.
 *	front = NULL;
 *	back = EOF;
 *
 * Advancing the Invariants:
 *
 *	p = first newline after halfway point from front to back.
 *
 *	If the string at "p" is not greater than the string to match,
 *	p is the new front.  Otherwise it is the new back.
 *
 * Termination:
 *
 *	The definition of the routine allows it return at any point,
 *	since front is always at or before the line to print.
 *
 *	In fact, it returns when the chosen "p" equals "back".  This
 *	implies that there exists a string is least half as long as
 *	(back - front), which in turn implies that a linear search will
 *	be no more expensive than the cost of simply printing a string or two.
 *
 *	Trying to continue with binary search at this point would be
 *	more trouble than it's worth.
 */
#define	SKIP_PAST_NEWLINE(p, back) \
	while (p < back && *p++ != '\n');

char *
binary_search(char *string, char *front, char *back)
{
	char *p;

	p = front + (back - front) / 2;
	SKIP_PAST_NEWLINE(p, back);

	/*
	 * If the file changes underneath us, make sure we don't
	 * infinitely loop.
	 */
	while (p < back && back > front) {
		if (compare(string, p, back) == GREATER)
			front = p;
		else
			back = p;
		p = front + (back - front) / 2;
		SKIP_PAST_NEWLINE(p, back);
	}
	return (front);
}

/*
 * Find the first line that starts with string, linearly searching from front
 * to back.
 *
 * Return NULL for no such line.
 *
 * This routine assumes:
 *
 *	o front points at the first character in a line.
 *	o front is before or at the first line to be printed.
 */
char *
linear_search(char *string, char *front, char *back)
{
	while (front < back) {
		switch (compare(string, front, back)) {
		case EQUAL:		/* Found it. */
			return (front);
			break;
		case LESS:		/* No such string. */
			return (NULL);
			break;
		case GREATER:		/* Keep going. */
			break;
		}
		SKIP_PAST_NEWLINE(front, back);
	}
	return (NULL);
}

/*
 * Print as many lines as match string, starting at front.
 */
void
print_from(char *string, char *front, char *back)
{
	for (; front < back && compare(string, front, back) == EQUAL; ++front) {
		for (; front < back && *front != '\n'; ++front)
			if (putchar(*front) == EOF)
				err(2, "stdout");
		if (putchar('\n') == EOF)
			err(2, "stdout");
	}
}

/*
 * Return LESS, GREATER, or EQUAL depending on how the string1 compares with
 * string2 (s1 ??? s2).
 *
 *	o Matches up to len(s1) are EQUAL.
 *	o Matches up to len(s2) are GREATER.
 *
 * Compare understands about the -f and -d flags, and treats comparisons
 * appropriately.
 *
 * The string "s1" is null terminated.  The string s2 is '\n' terminated (or
 * "back" terminated).
 */
int
compare(char *s1, char *s2, char *back)
{
	int ch;

	for (; *s1 && s2 < back && *s2 != '\n'; ++s1, ++s2) {
		ch = *s2;
		if (fflag)
			ch = tolower((unsigned char)ch);
		if (dflag && !isalnum((unsigned char)ch)) {
			++s2;		/* Ignore character in comparison. */
			continue;
		}
		if (*s1 != ch)
			return (*s1 < ch ? LESS : GREATER);
	}
	return (*s1 ? GREATER : EQUAL);
}

void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: look [-df] [-t termchar] string [file]\n");
	exit(2);
}
@


1.20
log
@Accommodate gcc's suggestion that assignments used as truth values
should be enclosed in parentheses.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.19 2016/09/13 15:27:47 millert Exp $	*/
d38 1
a38 1
 * 
d156 1
a156 1
 * 
d160 1
a160 1
 * 
d162 1
a162 1
 * 	front points to the beginning of a line at or before the first 
d164 2
a165 2
 * 
 * 	back points to the beginning of a line at or after the first 
d167 1
a167 1
 * 
d169 1
a169 1
 * 	front = NULL; 
d171 1
a171 1
 * 
d173 4
a176 4
 * 
 * 	p = first newline after halfway point from front to back.
 * 
 * 	If the string at "p" is not greater than the string to match, 
d178 1
a178 1
 * 
d180 2
a181 2
 * 
 * 	The definition of the routine allows it return at any point, 
d183 4
a186 4
 * 
 * 	In fact, it returns when the chosen "p" equals "back".  This 
 *	implies that there exists a string is least half as long as 
 *	(back - front), which in turn implies that a linear search will 
d188 2
a189 2
 * 
 * 	Trying to continue with binary search at this point would be 
d221 1
a221 1
 * 
d223 1
a223 1
 * 
d225 2
a226 2
 * 
 * 	o front points at the first character in a line. 
d251 1
a251 1
void 
d266 2
a267 2
 * 
 * 	o Matches up to len(s1) are EQUAL. 
d269 1
a269 1
 * 
d272 1
a272 1
 * 
@


1.19
log
@Eliminate the FOLD and DICT macros.  There's no need to check for
isascii() with ANSI ctype macros/functions.  Eliminating the macros
makes the code clearer.  OK jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.18 2015/10/09 01:37:08 deraadt Exp $	*/
d137 1
a137 1
	for (readp = writep = string; ch = *readp++;) {
@


1.18
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.17 2015/10/07 14:13:23 deraadt Exp $	*/
a59 7
/*
 * FOLD and DICT convert characters to a normal form for comparison,
 * according to the user specified flags.
 * 
 * DICT expects integers because it uses a non-character value to
 * indicate a character which should not participate in comparisons.
 */
a62 4
#define NO_COMPARE	(-2)

#define	FOLD(c)	(isascii(c) && isupper(c) ? tolower(c) : (c))
#define	DICT(c)	(isascii(c) && isalnum(c) ? (c) : NO_COMPARE)
d139 2
a140 4
			ch = FOLD((unsigned char)ch);
		if (dflag)
			ch = DICT((unsigned char)ch);
		if (ch != NO_COMPARE)
d284 2
a285 5
			ch = FOLD((unsigned char)ch);
		if (dflag)
			ch = DICT((unsigned char)ch);

		if (ch == NO_COMPARE) {
@


1.17
log
@tame "stdio rpath", for the open with O_RDONLY.
ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.16 2015/02/06 23:21:59 millert Exp $	*/
d91 2
a92 2
	if (tame("stdio rpath", NULL) == -1)
		err(1, "tame");
@


1.16
log
@SIZE_MAX is standard, we should be using it in preference to the
obsolete SIZE_T_MAX.  OK miod@@ beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.15 2014/05/20 01:25:23 guenther Exp $	*/
d90 3
@


1.15
log
@Use errc/warnc to simplify code.
Also, in 'ftp', always put the error message last, after the hostname/ipaddr.

ok jsing@@ krw@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.14 2013/11/26 13:19:07 deraadt Exp $	*/
d51 1
a51 1
#include <limits.h>
d129 1
a129 1
	if (sb.st_size > SIZE_T_MAX)
@


1.14
log
@unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.13 2009/10/27 23:59:40 deraadt Exp $	*/
d130 1
a130 1
		errx(2, "%s: %s", file, strerror(EFBIG));
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.12 2009/06/17 10:42:08 sobrado Exp $	*/
d147 1
a147 1
			ch = FOLD(ch);
d149 1
a149 1
			ch = DICT(ch);
d294 1
a294 1
			ch = FOLD(ch);
d296 1
a296 1
			ch = DICT(ch);
@


1.12
log
@synchronize synopsis and usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.11 2005/06/25 17:00:35 niallo Exp $	*/
a34 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1991, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)look.c	8.2 (Berkeley) 5/4/95";
#endif
static char rcsid[] = "$OpenBSD: look.c,v 1.11 2005/06/25 17:00:35 niallo Exp $";
#endif /* not lint */
@


1.11
log
@Fix typo in a comment.

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.10 2003/06/10 22:20:47 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: look.c,v 1.10 2003/06/10 22:20:47 deraadt Exp $";
d324 2
a325 1
	(void)fprintf(stderr, "usage: look [-df] [-t char] string [file]\n");
@


1.10
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.9 2003/06/03 02:56:10 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: look.c,v 1.9 2003/06/03 02:56:10 millert Exp $";
d157 1
a157 1
	/* Reformat string string to avoid doing it multiple times later. */
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.8 2002/03/01 00:51:08 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: look.c,v 1.8 2002/03/01 00:51:08 millert Exp $";
d98 1
a98 3
main(argc, argv)
	int argc;
	char *argv[];
d152 1
a152 2
look(string, front, back)
	char *string, *front, *back;
d219 1
a219 2
binary_search(string, front, back)
	char *string, *front, *back;
d253 1
a253 2
linear_search(string, front, back)
	char *string, *front, *back;
d275 1
a275 2
print_from(string, front, back)
	char *string, *front, *back;
d300 1
a300 2
compare(s1, s2, back)
	char *s1, *s2, *back;
d322 1
a322 1
usage()
@


1.8
log
@Fix an err() that should really be errx()
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.7 2002/02/16 21:27:48 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d46 1
a46 1
static char rcsid[] = "$OpenBSD: look.c,v 1.7 2002/02/16 21:27:48 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.6 2001/11/19 19:02:15 mpech Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: look.c,v 1.6 2001/11/19 19:02:15 mpech Exp $";
d149 1
a149 1
		err(2, "%s: %s", file, strerror(EFBIG));
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.5 2000/10/12 10:01:18 art Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: look.c,v 1.5 2000/10/12 10:01:18 art Exp $";
d94 6
a99 6
char	*binary_search __P((char *, char *, char *));
int	 compare __P((char *, char *, char *));
char	*linear_search __P((char *, char *, char *));
int	 look __P((char *, char *, char *));
void	 print_from __P((char *, char *, char *));
void	 usage __P((void));
@


1.5
log
@Check the mmap return value against MAP_FAILED, not NULL.
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.4 1999/12/21 05:52:46 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: look.c,v 1.4 1999/12/21 05:52:46 millert Exp $";
d161 2
a162 2
	register int ch;
	register char *readp, *writep;
d227 1
a227 1
	register char *string, *front, *back;
d229 1
a229 1
	register char *p;
d285 1
a285 1
	register char *string, *front, *back;
d311 1
a311 1
	register char *s1, *s2, *back;
d313 1
a313 1
	register int ch;
@


1.4
log
@Use MAP_PRIVATE for mmap() flags instead of 0.  With UVM this defaults
to MAP_PRIVATE anyway but we want to avoid the kernel complaining...
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.3 1997/01/15 23:42:48 millert Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: look.c,v 1.3 1997/01/15 23:42:48 millert Exp $";
d151 1
a151 1
	    (size_t)sb.st_size, PROT_READ, MAP_PRIVATE, fd, (off_t)0)) == NULL)
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.2 1996/06/26 05:36:06 deraadt Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: look.c,v 1.2 1996/06/26 05:36:06 deraadt Exp $";
d151 1
a151 1
	    (size_t)sb.st_size, PROT_READ, 0, fd, (off_t)0)) == NULL)
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: look.c,v 1.7 1995/08/31 22:41:02 jtc Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: look.c,v 1.7 1995/08/31 22:41:02 jtc Exp $";
d112 1
a112 1
	while ((ch = getopt(argc, argv, "dft:")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 1
d50 1
a50 1
static char rcsid[] = "$NetBSD: look.c,v 1.7 1995/08/31 22:41:02 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
