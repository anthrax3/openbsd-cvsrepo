head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.6
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.22
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.20
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.12.31.16.13.01;	author millert;	state Exp;
branches;
next	1.20;
commitid	hCHJJlBGuCEPjlKM;

1.20
date	2015.10.09.01.37.08;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	sbrB3Q5CNxcwZpfU;

1.19
date	2015.10.07.14.37.11;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	7h0B8PEibzaC17RU;

1.18
date	2015.01.16.06.40.12;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	Uu5nFG3wCl0LACBb;

1.17
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.10.20.18.08.57;	author sobrado;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.25.11.20.34;	author chl;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.05.21.07.53;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.10.22.44.17;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.09.22.42.08;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.09.12.04.21;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.07.12.45.59;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.10.22.20.51;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.16;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.08.16.50.07;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.53;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.12.04.21.16.05;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.02.04.03.53.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.43.14;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.39.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove use of sysexits.h.
@
text
@/*	$OpenBSD: split.c,v 1.20 2015/10/09 01:37:08 deraadt Exp $	*/
/*	$NetBSD: split.c,v 1.5 1995/08/31 22:22:05 jtc Exp $	*/

/*
 * Copyright (c) 1987, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* MAXBSIZE */
#include <sys/types.h>

#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <regex.h>

#define DEFLINE	1000			/* Default num lines per file. */

ssize_t	 bytecnt;			/* Byte count to split on. */
long	 numlines;			/* Line count to split on. */
int	 file_open;			/* If a file open. */
int	 ifd = -1, ofd = -1;		/* Input/output file descriptors. */
char	 bfr[MAXBSIZE];			/* I/O buffer. */
char	 fname[PATH_MAX];		/* File name prefix. */
regex_t	 rgx;
int	 pflag;
int	 sufflen = 2;			/* File name suffix length. */

void newfile(void);
void split1(void);
void split2(void);
__dead void usage(void);

int
main(int argc, char *argv[])
{
	int ch, scale;
	char *ep, *p;
	const char *errstr;

	if (pledge("stdio rpath wpath cpath", NULL) == -1)
		err(1, "pledge");

	while ((ch = getopt(argc, argv, "0123456789a:b:l:p:-")) != -1)
		switch (ch) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			/*
			 * Undocumented kludge: split was originally designed
			 * to take a number after a dash.
			 */
			if (numlines == 0) {
				p = argv[optind - 1];
				if (p[0] == '-' && p[1] == ch && !p[2])
					numlines = strtol(++p, &ep, 10);
				else
					numlines =
					    strtol(argv[optind] + 1, &ep, 10);
				if (numlines <= 0 || *ep)
					errx(1, "%s: illegal line count",
					    optarg);
			}
			break;
		case '-':		/* Undocumented: historic stdin flag. */
			if (ifd != -1)
				usage();
			ifd = 0;
			break;
		case 'a':		/* suffix length. */
			sufflen = strtonum(optarg, 1, NAME_MAX, &errstr);
			if (errstr)
				errx(1, "%s: %s", optarg, errstr);
			break;
		case 'b':		/* Byte count. */
			if ((bytecnt = strtol(optarg, &ep, 10)) <= 0 ||
			    (*ep != '\0' && *ep != 'k' && *ep != 'm'))
				errx(1, "%s: illegal byte count", optarg);
			if (*ep == 'k')
				scale = 1024;
			else if (*ep == 'm')
				scale = 1048576;
			else
				scale = 1;
			if (bytecnt > SSIZE_MAX / scale)
				errx(1, "%s: byte count too large", optarg);
			bytecnt *= scale;
			break;
		case 'p' :      /* pattern matching. */
			if (regcomp(&rgx, optarg, REG_EXTENDED|REG_NOSUB) != 0)
				errx(1, "%s: illegal regexp", optarg);
			pflag = 1;
			break;
		case 'l':		/* Line count. */
			if (numlines != 0)
				usage();
			if ((numlines = strtol(optarg, &ep, 10)) <= 0 || *ep)
				errx(1, "%s: illegal line count", optarg);
			break;
		default:
			usage();
		}
	argv += optind;
	argc -= optind;

	if (*argv != NULL)
		if (ifd == -1) {		/* Input file. */
			if ((ifd = open(*argv, O_RDONLY, 0)) < 0)
				err(1, "%s", *argv);
			++argv;
		}
	if (*argv != NULL)			/* File name prefix. */
		(void)strlcpy(fname, *argv++, sizeof(fname));
	if (*argv != NULL)
		usage();

	if (strlen(fname) + sufflen >= sizeof(fname))
		errx(1, "suffix is too long");
	if (pflag && (numlines != 0 || bytecnt != 0))
		usage();

	if (numlines == 0)
		numlines = DEFLINE;
	else if (bytecnt != 0)
		usage();

	if (ifd == -1)				/* Stdin by default. */
		ifd = 0;

	if (bytecnt) {
		split1();
		exit (0);
	}
	split2();
	if (pflag)
		regfree(&rgx);
	exit(0);
}

/*
 * split1 --
 *	Split the input by bytes.
 */
void
split1(void)
{
	ssize_t bcnt, dist, len;
	char *C;

	for (bcnt = 0;;)
		switch ((len = read(ifd, bfr, MAXBSIZE))) {
		case 0:
			exit(0);
		case -1:
			err(1, "read");
			/* NOTREACHED */
		default:
			if (!file_open)
				newfile();
			if (bcnt + len >= bytecnt) {
				dist = bytecnt - bcnt;
				if (write(ofd, bfr, dist) != dist)
					err(1, "write");
				len -= dist;
				for (C = bfr + dist; len >= bytecnt;
				    len -= bytecnt, C += bytecnt) {
					newfile();
					if (write(ofd, C, bytecnt) != bytecnt)
						err(1, "write");
				}
				if (len != 0) {
					newfile();
					if (write(ofd, C, len) != len)
						err(1, "write");
				} else
					file_open = 0;
				bcnt = len;
			} else {
				bcnt += len;
				if (write(ofd, bfr, len) != len)
					err(1, "write");
			}
		}
}

/*
 * split2 --
 *	Split the input by lines.
 */
void
split2(void)
{
	long lcnt = 0;
	FILE *infp;

	/* Stick a stream on top of input file descriptor */
	if ((infp = fdopen(ifd, "r")) == NULL)
		err(1, "fdopen");

	/* Process input one line at a time */
	while (fgets(bfr, sizeof(bfr), infp) != NULL) {
		const int len = strlen(bfr);

		if (len == 0)
			continue;

		/* If line is too long to deal with, just write it out */
		if (bfr[len - 1] != '\n')
			goto writeit;

		/* Check if we need to start a new file */
		if (pflag) {
			regmatch_t pmatch;

			pmatch.rm_so = 0;
			pmatch.rm_eo = len - 1;
			if (regexec(&rgx, bfr, 0, &pmatch, REG_STARTEND) == 0)
				newfile();
		} else if (lcnt++ == numlines) {
			newfile();
			lcnt = 1;
		}

writeit:
		/* Open output file if needed */
		if (!file_open)
			newfile();

		/* Write out line */
		if (write(ofd, bfr, len) != len)
			err(1, "write");
	}

	/* EOF or error? */
	if (ferror(infp))
		err(1, "read");
	else
		exit(0);
}

/*
 * newfile --
 *	Open a new output file.
 */
void
newfile(void)
{
	static char *suffix, *sufftail;
	char *sptr;

	if (ofd == -1) {
		ofd = fileno(stdout);
		if (*fname == '\0') {
			*fname = 'x';	/* no name specified, use 'x' */
			memset(fname + 1, 'a', sufflen);
			suffix = fname;
			sufflen++;	/* treat 'x' as part of suffix */
		} else {
			suffix = fname + strlen(fname);
			memset(suffix, 'a', sufflen);
		}
		suffix[sufflen] = '\0';
		sufftail = suffix + sufflen - 1;
	} else {
		for (sptr = sufftail; sptr >= suffix; sptr--) {
			if (*sptr != 'z') {
				(*sptr)++;
				break;
			} else
				*sptr = 'a';
		}
		if (sptr < suffix)
			errx(1, "too many files");
	}

	if (!freopen(fname, "w", stdout))
		err(1, "%s", fname);
	file_open = 1;
}

__dead void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr, "usage: %s [-a suffix_length]\n"
	    "             [-b byte_count[k|m] | -l line_count | -p pattern] "
	    "[file [name]]\n", __progname);
	exit(1);
}
@


1.20
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.19 2015/10/07 14:37:11 deraadt Exp $	*/
a44 1
#include <sysexits.h>
d89 2
a90 2
					errx(EX_USAGE,
					    "%s: illegal line count", optarg);
d101 1
a101 1
				errx(EX_USAGE, "%s: %s", optarg, errstr);
d106 1
a106 2
				errx(EX_USAGE,
				    "%s: illegal byte count", optarg);
d114 1
a114 2
				errx(EX_USAGE, "%s: byte count too large",
				    optarg);
d119 1
a119 1
				errx(EX_USAGE, "%s: illegal regexp", optarg);
d126 1
a126 2
				errx(EX_USAGE,
				    "%s: illegal line count", optarg);
d137 1
a137 1
				err(EX_NOINPUT, "%s", *argv);
d146 1
a146 1
		errx(EX_USAGE, "suffix is too long");
d183 1
a183 1
			err(EX_IOERR, "read");
d191 1
a191 1
					err(EX_IOERR, "write");
d197 1
a197 1
						err(EX_IOERR, "write");
d202 1
a202 1
						err(EX_IOERR, "write");
d209 1
a209 1
					err(EX_IOERR, "write");
d226 1
a226 1
		err(EX_NOINPUT, "fdopen");
d259 1
a259 1
			err(EX_IOERR, "write");
d264 1
a264 1
		err(EX_IOERR, "read");
d301 1
a301 1
			errx(EX_DATAERR, "too many files");
d305 1
a305 1
		err(EX_IOERR, "%s", fname);
d317 1
a317 1
	exit(EX_USAGE);
@


1.19
log
@tame "stdio rpath wpath cpath" to support use of freopen() with "w"
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.18 2015/01/16 06:40:12 deraadt Exp $	*/
d71 2
a72 2
	if (tame("stdio rpath wpath cpath", NULL) == -1)
		err(1, "tame");
@


1.18
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.17 2009/10/27 23:59:43 deraadt Exp $	*/
d70 3
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.16 2007/10/20 18:08:57 sobrado Exp $	*/
d33 1
a33 1
#include <sys/param.h>
d54 1
a54 1
char	 fname[MAXPATHLEN];		/* File name prefix. */
@


1.16
log
@an usage message should fit on a 80-column display

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.15 2007/09/25 11:20:34 chl Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1987, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)split.c	8.3 (Berkeley) 4/25/94";
#else
static char rcsid[] = "$OpenBSD: split.c,v 1.15 2007/09/25 11:20:34 chl Exp $";
#endif
#endif /* not lint */
@


1.15
log
@handle empty strings returned by fgets

ok ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.14 2007/09/05 21:07:53 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.14 2007/09/05 21:07:53 millert Exp $";
d329 3
a331 3
	(void)fprintf(stderr, "usage: %s [-a suffix_length] "
	    "[-b byte_count[k|m] | -l line_count | -p pattern] [file [name]]\n",
	    __progname);
@


1.14
log
@The rewritten newfile() algorithm introduced in rev 1.12 was
incorrect.  This simpler version from Pete Honeyman passes all the
tests I thow at it.  OK deraadt@@ some time ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.13 2006/08/10 22:44:17 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.13 2006/08/10 22:44:17 millert Exp $";
d246 3
@


1.13
log
@Check for int oflow w/ -b option and unit suffixes, make usage() __dead,
use ssize_t not long for read/write length.  OK beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.12 2006/08/09 22:42:08 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.12 2006/08/09 22:42:08 millert Exp $";
d289 1
a289 1
	static int defname;
d292 6
a297 4
		if (fname[0] == '\0') {
			fname[0] = 'x';
			suffix = fname + 1;
			defname = 1;
d300 1
a300 1
			defname = 0;
a301 1
		memset(suffix, 'a', sufflen);
d304 4
a307 11
		--sufftail[0];		/* incremented later */
		ofd = fileno(stdout);
	}

	if (sufftail[0] == 'z') {
		int i;

		/* Increment the non-tail portion of the suffix. */
		for (i = sufflen - 2; i >= 0; i--) {
			if (suffix[i] != 'z') {
				suffix[i]++;
d309 2
a310 1
			}
d312 3
a314 10
		if (i < 0) {
			/* Hack to support y and z prefix if no name spec'd. */
			if (!defname || fname[0] == 'z')
				errx(EX_DATAERR, "too many files");
			++fname[0];
			memset(suffix, 'a', sufflen);
		} else
			sufftail[0] = 'a';	/* reset tail */
	} else
		++sufftail[0];
@


1.12
log
@Add -a option as per single unix.  Rewrote the code to generate
file names to be less blecherous, though it is still not pretty.
OK beck@@, with man page help from jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.11 2006/08/09 12:04:21 jmc Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.11 2006/08/09 12:04:21 jmc Exp $";
d53 1
d63 1
a63 1
long	 bytecnt;			/* Byte count to split on. */
d76 1
a76 1
void usage(void);
d81 1
a81 1
	int ch;
d121 1
a121 1
				bytecnt *= 1024;
d123 7
a129 1
				bytecnt *= 1048576;
d190 1
a190 2
	long bcnt;
	int dist, len;
d211 1
a211 2
					if (write(ofd,
					    C, (int)bytecnt) != bytecnt)
d333 1
a333 1
void
@


1.11
log
@- indicate that -b, -l, and -p are mutually exclusive
- tidy up the text somewhat
- make it clear that the original file is not changed

mostly this is based on a freebsd pr (33852),
submitted by gary w. swearingen
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.10 2005/09/07 12:45:59 jmc Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.10 2005/09/07 12:45:59 jmc Exp $";
d70 1
d82 1
d84 1
a84 1
	while ((ch = getopt(argc, argv, "0123456789b:l:p:-")) != -1)
d109 5
d153 2
d283 1
a283 1
	static long fnum;
a284 1
	static char *fpnt;
d289 1
a289 1
			fpnt = fname + 1;
d292 1
a292 1
			fpnt = fname + strlen(fname);
d295 4
d301 22
a322 14
	/*
	 * Hack to increase max files; original code wandered through
	 * magic characters.  Maximum files is 3 * 26 * 26 == 2028
	 */
#define MAXFILES	676
	if (fnum == MAXFILES) {
		if (!defname || fname[0] == 'z')
			errx(EX_DATAERR, "too many files");
		++fname[0];
		fnum = 0;
	}
	fpnt[0] = fnum / 26 + 'a';
	fpnt[1] = fnum % 26 + 'a';
	++fnum;
d333 3
a335 3
	(void)fprintf(stderr,
"usage: %s [-b byte_count[k|m] | -l line_count | -p pattern] [file [name]]\n",
__progname);
@


1.10
log
@split.1:
add the relevant arguments to the options synopsis for -b and -l;
tidy up the formatting of [-b byte_count[k|m]];
make SYNOPSIS arg for -l match its description;

split.c:
sync usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.9 2003/06/10 22:20:51 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.9 2003/06/10 22:20:51 deraadt Exp $";
d314 1
a314 1
"usage: %s [-b byte_count[k|m]] [-l line_count] [-p pattern] [file [name]]\n",
@


1.9
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.8 2003/06/03 02:56:16 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.8 2003/06/03 02:56:16 millert Exp $";
d314 1
a314 1
"usage: %s [-b byte_count] [-l line_count] [-p pattern] [file [prefix]]\n",
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.7 2002/12/08 16:50:07 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.7 2002/12/08 16:50:07 millert Exp $";
d77 1
a77 3
main(argc, argv)
	int argc;
	char *argv[];
d172 1
a172 1
split1()
d220 1
a220 1
split2()
d272 1
a272 1
newfile()
d309 1
a309 1
usage()
@


1.7
log
@GNU semantics say that if optstring begins with '-' then
each non-option shall be treated as arguments to option '\1'.

BSD getopt match '-' in optstring with a '-' on the command line.
This is used to support deprecated options like "su -" that would
otherwise prevent the use of getopt().

Resolving this simply requires that the leading '-' be moved somewhere
else (I moved it to the end of optstring) since position within
optstring is not meaningful.
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.6 2002/02/16 21:27:53 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: split.c,v 1.6 2002/02/16 21:27:53 millert Exp $";
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.5 1999/12/04 21:16:05 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: split.c,v 1.5 1999/12/04 21:16:05 deraadt Exp $";
d88 1
a88 1
	while ((ch = getopt(argc, argv, "-0123456789b:l:p:")) != -1)
@


1.5
log
@oflow
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.4 1999/02/04 03:53:48 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: split.c,v 1.4 1999/02/04 03:53:48 millert Exp $";
d75 4
a78 4
void newfile __P((void));
void split1 __P((void));
void split2 __P((void));
void usage __P((void));
@


1.4
log
@From FreeBSD:
    Add new option '-p pattern' for splitting files based on matching
    lines in the file with a regular expression. Useful for e.g.
    'cvs diff' output.  Also compile cleanly with -Wall and use
    defines from <sysexits.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.3 1997/01/15 23:43:14 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: split.c,v 1.3 1997/01/15 23:43:14 millert Ex $";
d148 1
a148 1
		(void)strcpy(fname, *argv++);
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.2 1996/06/26 05:39:28 deraadt Exp $	*/
d46 2
a48 1
static char rcsid[] = "$OpenBSD: split.c,v 1.2 1996/06/26 05:39:28 deraadt Exp $";
d52 1
d61 2
d72 2
d88 1
a88 1
	while ((ch = getopt(argc, argv, "-0123456789b:l:")) != -1)
d104 2
a105 2
					errx(1,
					    "%s: illegal line count.", optarg);
d115 3
a117 2
			    *ep != '\0' && *ep != 'k' && *ep != 'm')
				errx(1, "%s: illegal byte count.", optarg);
d123 5
d132 2
a133 1
				errx(1, "%s: illegal line count.", optarg);
d144 1
a144 1
				err(1, "%s", *argv);
d152 3
d157 1
a157 1
	else if (bytecnt)
d168 2
d185 1
a185 1
		switch (len = read(ifd, bfr, MAXBSIZE)) {
d189 1
a189 1
			err(1, "read");
d192 1
a192 1
			if (!file_open) {
a193 2
				file_open = 1;
			}
d197 1
a197 1
					err(1, "write");
d204 1
a204 1
						err(1, "write");
d206 1
a206 1
				if (len) {
d209 1
a209 1
						err(1, "write");
d216 1
a216 1
					err(1, "write");
d228 2
a229 3
	long lcnt;
	int len, bcnt;
	char *Ce, *Cs;
d231 19
a249 9
	for (lcnt = 0;;)
		switch (len = read(ifd, bfr, MAXBSIZE)) {
		case 0:
			exit(0);
		case -1:
			err(1, "read");
			/* NOTREACHED */
		default:
			if (!file_open) {
d251 3
a253 19
				file_open = 1;
			}
			for (Cs = Ce = bfr; len--; Ce++)
				if (*Ce == '\n' && ++lcnt == numlines) {
					bcnt = Ce - Cs + 1;
					if (write(ofd, Cs, bcnt) != bcnt)
						err(1, "write");
					lcnt = 0;
					Cs = Ce + 1;
					if (len)
						newfile();
					else
						file_open = 0;
				}
			if (Cs < Ce) {
				bcnt = Ce - Cs;
				if (write(ofd, Cs, bcnt) != bcnt)
					err(1, "write");
			}
d255 16
d302 1
a302 1
			errx(1, "too many files.");
d310 2
a311 1
		err(1, "%s", fname);
d317 2
d320 3
a322 2
"usage: split [-b byte_count] [-l line_count] [file [prefix]]\n");
	exit(1);
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: split.c,v 1.5 1995/08/31 22:22:05 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: split.c,v 1.5 1995/08/31 22:22:05 jtc Exp $";
d82 1
a82 1
	while ((ch = getopt(argc, argv, "-0123456789b:l:")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: split.c,v 1.5 1995/08/31 22:22:05 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
