head	1.33;
access;
symbols
	OPENBSD_6_0:1.33.0.2
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.32.0.4
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.30.0.4
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.24.0.4
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.2
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.10
	OPENBSD_5_0:1.22.0.8
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.6
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.2
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.20.0.8
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.6
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.4
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.4
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.18.0.4
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.14.0.4
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.33
date	2016.07.18.09.36.50;	author guenther;	state Exp;
branches;
next	1.32;
commitid	K5mI2UDdS4bCqHba;

1.32
date	2015.04.18.18.28.37;	author deraadt;	state Exp;
branches;
next	1.31;
commitid	6b2lLILbgCR1fvia;

1.31
date	2015.01.16.06.40.09;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	Uu5nFG3wCl0LACBb;

1.30
date	2014.05.24.17.04.16;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2014.04.07.21.42.56;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2014.04.04.21.34.47;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2013.11.06.17.26.55;	author sobrado;	state Exp;
branches;
next	1.26;

1.26
date	2013.06.05.08.19.40;	author sthen;	state Exp;
branches;
next	1.25;

1.25
date	2013.06.01.09.57.58;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2012.07.12.18.03.29;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2012.07.12.16.45.15;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.27.23.59.39;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2009.02.23.01.41.14;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2007.03.03.23.46.55;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.21.01.40.24;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2004.09.14.22.25.06;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.10.22.20.47;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.03.02.56.09;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.19.19.30.13;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.25.16.46.28;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.16.21.27.47;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.14.20.00.48;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.18.00.48.57;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.12.05.17.13;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.30.16.00.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.08.17.09.13.15;	author millert;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	98.04.25.02.54.44;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.06.19.03.23.03;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	97.06.18.09.44.09;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.42.40;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.21.08.11.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.34.46;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.27;	author deraadt;	state Exp;
branches;
next	;

1.8.4.1
date	2000.10.06.21.16.13;	author jason;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Add 'p' trace point for KTRFAC_PLEDGE, as noted by
Michal Mazurek <akfaew@@jasminek.net>

While here, fix handling of -t+ in ltrace.
@
text
@/*	$OpenBSD: ktrace.c,v 1.32 2015/04/18 18:28:37 deraadt Exp $	*/
/*	$NetBSD: ktrace.c,v 1.4 1995/08/31 23:01:44 jtc Exp $	*/

/*-
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* MAXCOMLEN */
#include <sys/signal.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/uio.h>
#include <sys/ktrace.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "ktrace.h"
#include "extern.h"

extern char *__progname;

static int rpid(const char *);
static void no_ktrace(int);
static void usage(void);

int	is_ltrace;

int
main(int argc, char *argv[])
{
	enum { NOTSET, CLEAR, CLEARALL } clear;
	int append, ch, fd, inherit, ops, pidset, trpoints;
	pid_t pid;
	char *tracefile, *tracespec;
	mode_t omask;
	struct stat sb;

	is_ltrace = strcmp(__progname, "ltrace") == 0;

	clear = NOTSET;
	append = ops = pidset = inherit = pid = 0;
	trpoints = is_ltrace ? KTRFAC_USER : DEF_POINTS;
	tracefile = DEF_TRACEFILE;
	tracespec = NULL;

	if (is_ltrace) {
		while ((ch = getopt(argc, argv, "af:it:u:")) != -1)
			switch ((char)ch) {
			case 'a':
				append = 1;
				break;
			case 'f':
				tracefile = optarg;
				break;
			case 'i':
				inherit = 1;
				break;
			case 't':
				trpoints = getpoints(optarg, KTRFAC_USER);
				if (trpoints < 0) {
					warnx("unknown facility in %s", optarg);
					usage();
				}
				break;
			case 'u':
				tracespec = optarg;
				break;
			default:
				usage();
			}
	} else {
		while ((ch = getopt(argc, argv, "aBCcdf:g:ip:t:")) != -1)
			switch ((char)ch) {
			case 'a':
				append = 1;
				break;
			case 'B':
				putenv("LD_BIND_NOW=");
				break;
			case 'C':
				clear = CLEARALL;
				pidset = 1;
				break;
			case 'c':
				clear = CLEAR;
				break;
			case 'd':
				ops |= KTRFLAG_DESCEND;
				break;
			case 'f':
				tracefile = optarg;
				break;
			case 'g':
				pid = -rpid(optarg);
				pidset = 1;
				break;
			case 'i':
				inherit = 1;
				break;
			case 'p':
				pid = rpid(optarg);
				pidset = 1;
				break;
			case 't':
				trpoints = getpoints(optarg, DEF_POINTS);
				if (trpoints < 0) {
					warnx("unknown facility in %s", optarg);
					usage();
				}
				break;
			default:
				usage();
			}
	}

	argv += optind;
	argc -= optind;
	
	if ((pidset && *argv) || (!pidset && !*argv && clear != CLEAR))
		usage();

	if (inherit)
		trpoints |= KTRFAC_INHERIT;

	(void)signal(SIGSYS, no_ktrace);
	if (clear != NOTSET) {
		if (clear == CLEARALL) {
			ops = KTROP_CLEAR | KTRFLAG_DESCEND;
			trpoints = ALL_POINTS;
			pid = 1;
		} else
			ops |= pid ? KTROP_CLEAR : KTROP_CLEARFILE;

		if (ktrace(tracefile, ops, trpoints, pid) < 0) {
			if (errno == ESRCH)
				err(1, "%d", pid);
			err(1, "%s", tracefile);
		}
		exit(0);
	}

	omask = umask(S_IRWXG|S_IRWXO);
	if (append) {
		if ((fd = open(tracefile, O_CREAT | O_WRONLY, DEFFILEMODE)) < 0)
			err(1, "%s", tracefile);
		if (fstat(fd, &sb) != 0 || sb.st_uid != getuid())
			errx(1, "Refuse to append to %s: not owned by you.",
			    tracefile);
	} else {
		if (unlink(tracefile) == -1 && errno != ENOENT)
			err(1, "unlink %s", tracefile);
		if ((fd = open(tracefile, O_CREAT | O_EXCL | O_WRONLY,
		    DEFFILEMODE)) < 0)
			err(1, "%s", tracefile);
	}
	(void)umask(omask);
	(void)close(fd);

	if (*argv) { 
		if (is_ltrace) {
			if (setenv("LD_TRACE_PLT", inherit ? "i" : "", 1) < 0)
				err(1, "setenv(LD_TRACE_PLT)");
			if (tracespec &&
			    setenv("LD_TRACE_PLTSPEC", tracespec, 1) < 0)
				err(1, "setenv(LD_TRACE_PLTSPEC)");
		}
		if (ktrace(tracefile, ops, trpoints, getpid()) < 0)
			err(1, "%s", tracefile);
		execvp(argv[0], &argv[0]);
		err(1, "exec of '%s' failed", argv[0]);
	}
	else if (ktrace(tracefile, ops, trpoints, pid) < 0) {
		if (errno == ESRCH)
			err(1, "%d", pid);
		err(1, "%s", tracefile);
	}
	exit(0);
}

static int
rpid(const char *p)
{
	const char *errstr;
	static int first;
	pid_t pid;

	if (first++) {
		warnx("only one -g or -p flag is permitted.");
		usage();
	}
	if (!*p) {
		warnx("illegal process id.");
		usage();
	}
	pid = strtonum(p, 1, INT_MAX, &errstr);
	if (errstr) {
		warnx("illegal process id: %s", errstr);
		usage();
	}
	return pid;
}

static void
usage(void)
{
	if (is_ltrace)
		fprintf(stderr, "usage: %s [-ai] [-f trfile] [-t trstr]"
		    " [-u trspec] command\n",
		    __progname);
	else
		fprintf(stderr, "usage: %s [-aBCcdi] [-f trfile] [-g pgid]"
		    " [-p pid] [-t trstr]\n"
		    "       %s [-adi] [-f trfile] [-t trstr] command\n",
		    __progname, __progname);
	exit(1);
}

/* ARGSUSED */
static void
no_ktrace(int signo)
{
	char buf[8192];

	snprintf(buf, sizeof(buf),
"error:\tktrace() system call not supported in the running kernel\n\tre-compile kernel with 'option KTRACE'\n");
	write(STDERR_FILENO, buf, strlen(buf));
	_exit(1);
}
@


1.32
log
@Convert many atoi() calls to strtonum(), adding range checks and failure
handling along the way.
Reviews by Brendan MacDonell, Jeremy Devenport, florian, doug, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.31 2015/01/16 06:40:09 deraadt Exp $	*/
d90 1
a90 1
				trpoints = getpoints(optarg);
d136 1
a136 1
				trpoints = getpoints(optarg);
@


1.31
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.30 2014/05/24 17:04:16 deraadt Exp $	*/
d214 1
d216 1
d226 6
a231 1
	return(atoi(p));
@


1.30
log
@when ktrace() return ESRCH, the error is regarding the pid, not the pathname
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.29 2014/04/07 21:42:56 jmc Exp $	*/
d33 2
a34 1
#include <sys/param.h>
@


1.29
log
@add -t to usage() for ltrace;
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.28 2014/04/04 21:34:47 miod Exp $	*/
d164 3
a166 1
		if (ktrace(tracefile, ops, trpoints, pid) < 0)
d168 1
d202 3
a204 1
	else if (ktrace(tracefile, ops, trpoints, pid) < 0)
d206 1
@


1.28
log
@Add the -t ktrace(1) option to ltrace(1), so that you can trigger both
library function call trace and other kernel events trace at the same time.

Suggested by kurt@@ a long time ago, I have been sitting on this diff for no
good reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.27 2013/11/06 17:26:55 sobrado Exp $	*/
d224 2
a225 2
		fprintf(stderr, "usage: %s [-ai] [-f trfile] [-u trspec]"
		    " command\n",
@


1.27
log
@fix spacing in usage()
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.26 2013/06/05 08:19:40 sthen Exp $	*/
d77 1
a77 1
		while ((ch = getopt(argc, argv, "af:iu:")) != -1)
d87 7
@


1.26
log
@typo in usage, comand/command; Arto Jonsson
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.25 2013/06/01 09:57:58 miod Exp $	*/
d218 1
a218 1
		    "  command\n",
@


1.25
log
@Introduce ltrace(1). This tool works with ld.so to inject utrace record for
each plt call, allowing to trace a binary linked against shared library at the
public function call level.

To do so, ltrace(1) sets up some environment variables to enable plt tracing
in ld.so, and invokes ktrace(2) for utrace events. ld.so will force lazy
binding and will send an utrace record in the plt resolver, without updating
the plt.

Minimal filtering capabilities are provided, inspired by Solaris' truss -u,
to limit tracing to libraries and/or symbol names. Non-traced libraries and
symbols will have the regular resolver processing, with the expected plt
update.

"Get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.24 2012/07/12 18:03:29 jmc Exp $	*/
d218 1
a218 1
		    "  comand\n",
@


1.24
log
@add -B to usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.23 2012/07/12 16:45:15 guenther Exp $	*/
d50 2
d56 2
d64 1
a64 1
	char *tracefile;
d68 2
d72 1
a72 1
	trpoints = DEF_POINTS;
d74 61
a134 36
	while ((ch = getopt(argc,argv,"aBCcdf:g:ip:t:")) != -1)
		switch((char)ch) {
		case 'a':
			append = 1;
			break;
		case 'B':
			putenv("LD_BIND_NOW=");
			break;
		case 'C':
			clear = CLEARALL;
			pidset = 1;
			break;
		case 'c':
			clear = CLEAR;
			break;
		case 'd':
			ops |= KTRFLAG_DESCEND;
			break;
		case 'f':
			tracefile = optarg;
			break;
		case 'g':
			pid = -rpid(optarg);
			pidset = 1;
			break;
		case 'i':
			inherit = 1;
			break;
		case 'p':
			pid = rpid(optarg);
			pidset = 1;
			break;
		case 't':
			trpoints = getpoints(optarg);
			if (trpoints < 0) {
				warnx("unknown facility in %s", optarg);
d137 2
a138 4
			break;
		default:
			usage();
		}
d144 1
a144 1
			
d180 7
d216 9
a224 3
	(void)fprintf(stderr,
	    "usage: ktrace [-aBCcdi] [-f trfile] [-g pgid] [-p pid] [-t trstr]\n"
	    "       ktrace [-adi] [-f trfile] [-t trstr] command\n");
@


1.23
log
@Add -B option to pass down LD_BIND_NOW to suppress ld.so blather

ok pirofti@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.22 2009/10/27 23:59:39 deraadt Exp $	*/
d181 1
a181 1
	    "usage: ktrace [-aCcdi] [-f trfile] [-g pgid] [-p pid] [-t trstr]\n"
@


1.22
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.21 2009/02/23 01:41:14 tedu Exp $	*/
d68 1
a68 1
	while ((ch = getopt(argc,argv,"aCcdf:g:ip:t:")) != -1)
d72 3
@


1.21
log
@matthew haub pointed out that pid may be used uninitialized in some contexts
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.20 2007/03/03 23:46:55 jmc Exp $	*/
a31 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1988, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)ktrace.c	8.2 (Berkeley) 4/28/95";
#endif
static char *rcsid = "$OpenBSD: ktrace.c,v 1.20 2007/03/03 23:46:55 jmc Exp $";
#endif /* not lint */
@


1.20
log
@let synopsis, options description, and usage() agree;
from Igor Sobrado, tweaked by myself
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.19 2005/12/21 01:40:24 millert Exp $	*/
d43 1
a43 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.19 2005/12/21 01:40:24 millert Exp $";
d78 1
a78 1
	append = ops = pidset = inherit = 0;
@


1.19
log
@Userland programs should include <errno.h> not <sys/errno.h>
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.18 2004/09/14 22:25:06 deraadt Exp $	*/
d43 1
a43 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.18 2004/09/14 22:25:06 deraadt Exp $";
d191 2
a192 1
"usage:\tktrace [-aCcdi] [-f trfile] [-g pgid] [-p pid] [-t [ceinsw]]\n\tktrace [-adi] [-f trfile] [-t [ceinsw]] command\n");
@


1.18
log
@ARGSUSED before signal handler with unused signo
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.17 2003/06/10 22:20:47 deraadt Exp $	*/
d43 1
a43 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.17 2003/06/10 22:20:47 deraadt Exp $";
a48 1
#include <sys/errno.h>
d53 1
@


1.17
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.16 2003/06/03 02:56:09 millert Exp $	*/
d43 1
a43 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.16 2003/06/03 02:56:09 millert Exp $";
d195 1
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.15 2003/02/19 19:30:13 deraadt Exp $	*/
d43 1
a43 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.15 2003/02/19 19:30:13 deraadt Exp $";
d68 1
a68 3
main(argc, argv)
	int argc;
	char **argv;
d172 1
a172 2
rpid(p)
	const char *p;
d188 1
a188 1
usage()
d196 1
a196 2
no_ktrace(sig)
	int sig;
@


1.15
log
@improve docs; raj@@cerias.purdue.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.14 2002/03/25 16:46:28 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.14 2002/03/25 16:46:28 deraadt Exp $";
@


1.14
log
@bring in prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.13 2002/02/16 21:27:47 millert Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.13 2002/02/16 21:27:47 millert Exp $";
d129 1
a129 1
	if ((pidset && *argv) || (!pidset && !*argv))
d198 1
a198 1
"usage:\tktrace [-aCcid] [-f trfile] [-g pgid] [-p pid] [-t [cenis]\n\tktrace [-aCcid] [-f trfile] [-t [cenis] command\n");
d209 1
a209 1
"error:\tktrace() system call not supported in the running kernel\n\tre-compile kernel with 'options KTRACE'\n");
@


1.13
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.12 2001/11/14 20:00:48 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.12 2001/11/14 20:00:48 deraadt Exp $";
d61 1
@


1.12
log
@get rid of signal race
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.11 2001/08/18 00:48:57 espie Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.11 2001/08/18 00:48:57 espie Exp $";
d66 3
a68 3
static int rpid __P((const char *));
static void no_ktrace __P((int));
static void usage __P((void));
@


1.11
log
@Add lots of missing prototypes, constify a few things. Add explicit ints.
Makes gcc much happier, less warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.10 2001/07/12 05:17:13 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.10 2001/07/12 05:17:13 deraadt Exp $";
d205 3
a207 1
	(void)fprintf(stderr,
d209 2
a210 1
	exit(1);
@


1.10
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.9 2000/06/30 16:00:15 millert Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.9 2000/06/30 16:00:15 millert Exp $";
d64 1
d66 3
a68 2
void no_ktrace __P((int));
void usage __P((void));
d128 1
a128 1
	if (pidset && *argv || !pidset && !*argv)
d176 1
a176 1
int
d178 1
a178 1
	char *p;
d193 1
a193 1
void
d201 1
a201 1
void
@


1.9
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.8 1999/08/17 09:13:15 millert Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.8 1999/08/17 09:13:15 millert Exp $";
d59 1
d68 1
d74 2
a75 1
	int append, ch, fd, inherit, ops, pid, pidset, trpoints;
d174 1
@


1.8
log
@More <sys/file.h> vs. <fcntl.h> and open() flags fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.7 1998/04/25 02:54:44 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.7 1998/04/25 02:54:44 deraadt Exp $";
d139 1
a139 1
			err(1, tracefile);
d146 1
a146 1
			err(1, tracefile);
d155 1
a155 1
			err(1, tracefile);
d162 1
a162 1
			err(1, tracefile);
d167 1
a167 1
		err(1, tracefile);
@


1.8.4.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.9 2000/06/30 16:00:15 millert Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.9 2000/06/30 16:00:15 millert Exp $";
d139 1
a139 1
			err(1, "%s", tracefile);
d146 1
a146 1
			err(1, "%s", tracefile);
d155 1
a155 1
			err(1, "%s", tracefile);
d162 1
a162 1
			err(1, "%s", tracefile);
d167 1
a167 1
		err(1, "%s", tracefile);
@


1.7
log
@fix usage; nathanw@@MIT.EDU
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.6 1997/06/19 03:23:03 angelos Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.6 1997/06/19 03:23:03 angelos Exp $";
a51 1
#include <sys/file.h>
d58 1
@


1.6
log
@Someone forgot to declare the "sb" variable...
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.5 1997/06/18 09:44:09 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.5 1997/06/18 09:44:09 deraadt Exp $";
d191 1
a191 1
"usage:\tktrace [-aCcid] [-f trfile] [-g pgid] [-p pid] [-t [acgn]\n\tktrace [-aCcid] [-f trfile] [-t [acgn] command\n");
@


1.5
log
@unlink ktrace file more carefully; wosch/joerg
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.4 1997/01/15 23:42:40 millert Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.4 1997/01/15 23:42:40 millert Exp $";
d75 1
@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.3 1996/09/21 08:11:03 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.3 1996/09/21 08:11:03 deraadt Exp $";
d143 13
a155 3
	if ((fd = open(tracefile, O_CREAT | O_WRONLY | (append ? 0 : O_TRUNC),
	    DEFFILEMODE)) < 0)
		err(1, tracefile);
d196 1
a196 1
        int sig;
d198 1
a198 1
        (void)fprintf(stderr,
d200 1
a200 1
        exit(1);
@


1.3
log
@gen ktrace.out with restrictive umask; from joerg@@freebsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.2 1996/06/26 05:34:46 deraadt Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.2 1996/06/26 05:34:46 deraadt Exp $";
d80 1
a80 1
	while ((ch = getopt(argc,argv,"aCcdf:g:ip:t:")) != EOF)
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: ktrace.c,v 1.4 1995/08/31 23:01:44 jtc Exp $	*/
d47 1
a47 1
static char *rcsid = "$OpenBSD: ktrace.c,v 1.4 1995/08/31 23:01:44 jtc Exp $";
d74 1
d142 1
d146 1
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char *rcsid = "$NetBSD: ktrace.c,v 1.4 1995/08/31 23:01:44 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
