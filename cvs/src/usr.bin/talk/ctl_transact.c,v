head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.22
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.14
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.18
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.16
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.26
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.22
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.20
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.02.01.07.29.25;	author mestre;	state Exp;
branches;
next	1.12;
commitid	Pn9SmnrokNcgT1A4;

1.12
date	2010.08.12.23.31.29;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.44;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.02.21.04.42;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.11.21.10.54;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.17;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.05.00.29.20;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.03.03.20.43.30;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.08.18.04.02.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.04.28.22.13.21;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.40.20;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.28.23.58.04;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.11;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove unused headers and sort the remaining
Remove lint-style comments
Swap hardcoded string on usage() for __progname

OK tb@@
@
text
@/*	$OpenBSD: ctl_transact.c,v 1.12 2010/08/12 23:31:29 tedu Exp $	*/
/*	$NetBSD: ctl_transact.c,v 1.3 1994/12/09 02:14:12 jtc Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/socket.h>
#include <netinet/in.h>

#include <errno.h>
#include <poll.h>

#include "talk.h"
#include "talk_ctl.h"

#define CTL_WAIT 2	/* time to wait for a response, in seconds */

/*
 * SOCKDGRAM is unreliable, so we must repeat messages if we have
 * not received an acknowledgement within a reasonable amount
 * of time
 */
void
ctl_transact(struct in_addr target, CTL_MSG msg, int type, CTL_RESPONSE *rp)
{
	struct pollfd pfd[1];
	int nready, cc;

	msg.type = type;
	daemon_addr.sin_addr = target;
	daemon_addr.sin_port = daemon_port;
	pfd[0].fd = ctl_sockt;
	pfd[0].events = POLLIN;

	/*
	 * Keep sending the message until a response of
	 * the proper type is obtained.
	 */
	do {
		/* resend message until a response is obtained */
		do {
			cc = sendto(ctl_sockt, (char *)&msg, sizeof (msg), 0,
			    (struct sockaddr *)&daemon_addr,
			    sizeof (daemon_addr));
			if (cc != sizeof (msg)) {
				if (errno == EINTR)
					continue;
				quit("Error on write to talk daemon", 1);
			}
			nready = poll(pfd, 1, CTL_WAIT * 1000);
			if (nready < 0) {
				if (errno == EINTR)
					continue;
				quit("Error waiting for daemon response", 1);
			}
		} while (nready == 0);
		/*
		 * Keep reading while there are queued messages
		 * (this is not necessary, it just saves extra
		 * request/acknowledgements being sent)
		 */
		do {
			cc = recv(ctl_sockt, (char *)rp, sizeof (*rp), 0);
			if (cc < 0) {
				if (errno == EINTR)
					continue;
				quit("Error on read from talk daemon", 1);
			}
			nready = poll(pfd, 1, 0);
		} while (nready > 0 && (rp->vers != TALK_VERSION ||
		    rp->type != type));
	} while (rp->vers != TALK_VERSION || rp->type != type);
	rp->id_num = ntohl(rp->id_num);
}
@


1.12
log
@some inconsequential cleanups.  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.11 2009/10/27 23:59:44 deraadt Exp $	*/
d33 3
a35 2
#include "talk.h"
#include <sys/time.h>
a36 1
#include <unistd.h>
d38 2
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.10 2004/03/02 21:04:42 tedu Exp $	*/
d48 1
a48 5
ctl_transact(target, msg, type, rp)
	struct in_addr target;
	CTL_MSG msg;
	int type;
	CTL_RESPONSE *rp;
@


1.10
log
@use socklen_t and better socket() checks.  from Andrey Matveev
-Wall for good measure
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.9 2003/08/11 21:10:54 deraadt Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)ctl_transact.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: ctl_transact.c,v 1.9 2003/08/11 21:10:54 deraadt Exp $";
#endif /* not lint */
@


1.9
log
@use poll to replace the fd_set overflows.  some input from fgsch; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.8 2003/06/03 02:56:17 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ctl_transact.c,v 1.8 2003/06/03 02:56:17 millert Exp $";
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.7 2001/09/05 00:29:20 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ctl_transact.c,v 1.7 2001/09/05 00:29:20 deraadt Exp $";
d44 1
d61 1
a61 1
	fd_set read_mask, ctl_mask;
a62 1
	struct timeval wait;
d67 2
a68 2
	FD_ZERO(&ctl_mask);
	FD_SET(ctl_sockt, &ctl_mask);
a74 2
		wait.tv_sec = CTL_WAIT;
		wait.tv_usec = 0;
d85 1
a85 2
			read_mask = ctl_mask;
			nready = select(ctl_sockt + 1, &read_mask, 0, 0, &wait);
d104 1
a104 4
			read_mask = ctl_mask;
			/* an immediate poll */
			timerclear(&wait);
			nready = select(ctl_sockt + 1, &read_mask, 0, 0, &wait);
@


1.7
log
@select for a more accurate size; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.6 1999/03/03 20:43:30 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ctl_transact.c,v 1.6 1999/03/03 20:43:30 millert Exp $";
@


1.6
log
@Print fatal errors to stderr after curses has finished instead of printing to the curses window which disapears immediately for terminals that can restore the screen.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.5 1998/08/18 04:02:10 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ctl_transact.c,v 1.5 1998/08/18 04:02:10 millert Exp $";
d92 1
a92 1
			nready = select(32, &read_mask, 0, 0, &wait);
d114 1
a114 1
			nready = select(32, &read_mask, 0, 0, &wait);
@


1.5
log
@Some changes inspired by FreeBSD...
 o Kill annoying spaces at the end of lines
 o sigaction, not sigvec
 o warn/err where sensible
 o hstrerror() not herror()
 o defaults for erase, kill, and werase if not set
 o kill a needless refresh() after the beeps that was messing up the screen
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.4 1998/04/28 22:13:21 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ctl_transact.c,v 1.4 1998/04/28 22:13:21 pjanzen Exp $";
d89 1
a89 1
				p_error("Error on write to talk daemon");
d96 1
a96 1
				p_error("Error waiting for daemon response");
d109 1
a109 1
				p_error("Error on read from talk daemon");
@


1.4
log
@NetBSD-based -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.3 1996/06/26 05:40:20 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ctl_transact.c,v 1.3 1996/06/26 05:40:20 deraadt Exp $";
d100 1
a100 1
		 * Keep reading while there are queued messages 
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl_transact.c,v 1.3 1994/12/09 02:14:12 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ctl_transact.c,v 1.3 1994/12/09 02:14:12 jtc Exp $";
d44 1
a44 2
#include <sys/types.h>
#include <sys/socket.h>
a45 2
#include <netinet/in.h>
#include <protocols/talkd.h>
d47 1
d54 1
a54 1
 * not recieved an acknowledgement within a reasonable amount
d57 1
d64 2
a65 1
	int read_mask, ctl_mask, nready, cc;
d71 2
a72 1
	ctl_mask = 1 << ctl_sockt;
@


1.2
log
@Deal again w/ the brain damaged osockaddr.
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: ctl_transact.c,v 1.3 1994/12/09 02:14:12 jtc Exp $";
@


1.1
log
@Initial revision
@
text
@a116 1
	rp->addr.sa_family = ntohs(rp->addr.sa_family);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
