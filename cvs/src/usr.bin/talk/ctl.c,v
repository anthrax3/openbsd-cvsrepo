head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.22
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.14
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.18
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.16
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.22
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.20
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.18
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.16
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.14
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.12
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.14
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.12
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.02.01.07.29.25;	author mestre;	state Exp;
branches;
next	1.12;
commitid	Pn9SmnrokNcgT1A4;

1.12
date	2010.08.12.23.31.29;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.44;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.09.11.05.00;	author chl;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.02.21.04.42;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.10.22.20.52;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.02.56.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.02.22.29.19;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.03.03.20.43.30;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.18.04.02.09;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.04.28.22.13.20;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.40.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.11;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove unused headers and sort the remaining
Remove lint-style comments
Swap hardcoded string on usage() for __progname

OK tb@@
@
text
@/*	$OpenBSD: ctl.c,v 1.12 2010/08/12 23:31:29 tedu Exp $	*/
/*	$NetBSD: ctl.c,v 1.3 1994/12/09 02:14:10 jtc Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * This file handles haggling with the various talk daemons to
 * get a socket to talk to. sockt is opened and connected in
 * the progress
 */

#include <sys/socket.h>
#include <arpa/inet.h>

#include "talk.h"

struct	sockaddr_in daemon_addr = { sizeof(daemon_addr), AF_INET };
struct	sockaddr_in ctl_addr = { sizeof(ctl_addr), AF_INET };
struct	sockaddr_in my_addr = { sizeof(my_addr), AF_INET };

	/* inet addresses of the two machines */
struct	in_addr my_machine_addr;
struct	in_addr his_machine_addr;

u_short daemon_port;	/* port number of the talk daemon */

int	ctl_sockt;
int	sockt;
int	invitation_waiting;

CTL_MSG msg;

void
open_sockt(void)
{
	socklen_t length;

	my_addr.sin_addr = my_machine_addr;
	my_addr.sin_port = 0;
	sockt = socket(AF_INET, SOCK_STREAM, 0);
	if (sockt == -1)
		quit("Bad socket", 1);
	if (bind(sockt, (struct sockaddr *)&my_addr, sizeof(my_addr)) != 0)
		quit("Binding local socket", 1);
	length = sizeof(my_addr);
	if (getsockname(sockt, (struct sockaddr *)&my_addr, &length) == -1)
		quit("Bad address for socket", 1);
}

/* open the ctl socket */
void
open_ctl(void)
{
	socklen_t length;

	ctl_addr.sin_port = 0;
	ctl_addr.sin_addr = my_machine_addr;
	ctl_sockt = socket(AF_INET, SOCK_DGRAM, 0);
	if (ctl_sockt == -1)
		quit("Bad socket", 1);
	if (bind(ctl_sockt,
	    (struct sockaddr *)&ctl_addr, sizeof(ctl_addr)) != 0)
		quit("Couldn't bind to control socket", 1);
	length = sizeof(ctl_addr);
	if (getsockname(ctl_sockt,
	    (struct sockaddr *)&ctl_addr, &length) == -1)
		quit("Bad address for ctl socket", 1);
}
@


1.12
log
@some inconsequential cleanups.  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.11 2009/10/27 23:59:44 deraadt Exp $	*/
d39 3
a42 2
#include <arpa/inet.h>
#include "talk_ctl.h"
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.10 2009/05/09 11:05:00 chl Exp $	*/
d55 1
a55 1
int	invitation_waiting = 0;
@


1.10
log
@remove unused function

from tobias@@

"just delete them" tedu@@, ok millert@@ tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.9 2004/03/02 21:04:42 tedu Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)ctl.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: ctl.c,v 1.9 2004/03/02 21:04:42 tedu Exp $";
#endif /* not lint */
@


1.9
log
@use socklen_t and better socket() checks.  from Andrey Matveev
-Wall for good measure
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.8 2003/06/10 22:20:52 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: ctl.c,v 1.8 2003/06/10 22:20:52 deraadt Exp $";
a100 13
}

/* print_addr is a debug print routine */
void
print_addr(struct sockaddr_in addr)
{
	int i;

	printf("addr = %s, port = %o, family = %o zero = ",
		inet_ntoa(addr.sin_addr), addr.sin_port, addr.sin_family);
	for (i = 0; i < 8; i++)
		printf("%o ", (int)addr.sin_zero[i]);
	putchar('\n');
@


1.8
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.7 2003/06/03 02:56:17 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ctl.c,v 1.7 2003/06/03 02:56:17 millert Exp $";
d69 1
a69 1
	int length;
d74 1
a74 1
	if (sockt <= 0)
d87 1
a87 1
	int length;
d92 1
a92 1
	if (ctl_sockt <= 0)
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.6 2002/06/02 22:29:19 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ctl.c,v 1.6 2002/06/02 22:29:19 deraadt Exp $";
d67 1
a67 1
open_sockt()
d85 1
a85 1
open_ctl()
d105 1
a105 2
print_addr(addr)
	struct sockaddr_in addr;
@


1.6
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.5 1999/03/03 20:43:30 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: ctl.c,v 1.5 1999/03/03 20:43:30 millert Exp $";
@


1.5
log
@Print fatal errors to stderr after curses has finished instead of printing to the curses window which disapears immediately for terminals that can restore the screen.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.4 1998/08/18 04:02:09 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ctl.c,v 1.4 1998/08/18 04:02:09 millert Exp $";
d116 2
a117 2
	for (i = 0; i<8;i++)
	printf("%o ", (int)addr.sin_zero[i]);
@


1.4
log
@Some changes inspired by FreeBSD...
 o Kill annoying spaces at the end of lines
 o sigaction, not sigvec
 o warn/err where sensible
 o hstrerror() not herror()
 o defaults for erase, kill, and werase if not set
 o kill a needless refresh() after the beeps that was messing up the screen
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.3 1998/04/28 22:13:20 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ctl.c,v 1.3 1998/04/28 22:13:20 pjanzen Exp $";
d79 1
a79 1
		p_error("Bad socket");
d81 1
a81 1
		p_error("Binding local socket");
d84 1
a84 1
		p_error("Bad address for socket");
d97 1
a97 1
		p_error("Bad socket");
d100 1
a100 1
		p_error("Couldn't bind to control socket");
d104 1
a104 1
		p_error("Bad address for ctl socket");
@


1.3
log
@NetBSD-based -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.2 1996/06/26 05:40:20 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ctl.c,v 1.2 1996/06/26 05:40:20 deraadt Exp $";
d89 1
a89 1
open_ctl() 
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: ctl.c,v 1.3 1994/12/09 02:14:10 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ctl.c,v 1.3 1994/12/09 02:14:10 jtc Exp $";
a49 4
#include <sys/types.h>
#include <sys/socket.h>
#include <protocols/talkd.h>
#include <netinet/in.h>
d51 1
d70 1
d88 1
d108 1
d114 2
a115 2
	printf("addr = %x, port = %o, family = %o zero = ",
		addr.sin_addr, addr.sin_port, addr.sin_family);
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: ctl.c,v 1.3 1994/12/09 02:14:10 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
