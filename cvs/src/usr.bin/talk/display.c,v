head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.12
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.26
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.22
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.20
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.18
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.16
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.14
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.12
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.10
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.02.01.07.29.25;	author mestre;	state Exp;
branches;
next	1.17;
commitid	Pn9SmnrokNcgT1A4;

1.17
date	2013.11.28.18.24.55;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.08.12.23.31.29;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.44;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.02.21.04.42;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.02.56.17;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.20.19.25.55;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.20.10.18.29;	author form;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.20.06.13.56;	author form;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.31.00.24.51;	author hugh;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.30.06.27.48;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	99.03.23.17.00.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.04.28.22.13.22;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	97.11.30.20.30.50;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.10.21.03.51.58;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.40.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.11;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove unused headers and sort the remaining
Remove lint-style comments
Swap hardcoded string on usage() for __progname

OK tb@@
@
text
@/*	$OpenBSD: display.c,v 1.17 2013/11/28 18:24:55 deraadt Exp $	*/
/*	$NetBSD: display.c,v 1.3 1994/12/09 02:14:13 jtc Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * The window 'manager', initializes curses and handles the actual
 * displaying of text
 */
#include <ctype.h>

#include "talk.h"

xwin_t	my_win;
xwin_t	his_win;
WINDOW	*line_win;

int	curses_initialized;
int	high_print;
bool	smooth_scroll;

/*
 * max HAS to be a function, it is called with
 * an argument of the form --foo at least once.
 */
int
max(int a, int b)
{

	return (a > b ? a : b);
}

/*
 * Display some text on somebody's window, processing some control
 * characters while we are at it.
 */
void
display(xwin_t *win, char *text, int size)
{
	int i;
	char cch;

	for (i = 0; i < size; i++) {
		/*
		 * Since we do not use curses's input routines we must
		 * convert '\r' -> '\n' ourselves.
		 */
		if (*text == '\r')
			*text = '\n';
		if (*text == '\n') {
			xscroll(win, 0);
			text++;
			continue;
		}
		/* erase character */
		if (*text == win->cerase) {
			wmove(win->x_win, win->x_line, max(--win->x_col, 0));
			getyx(win->x_win, win->x_line, win->x_col);
			waddch(win->x_win, ' ');
			wmove(win->x_win, win->x_line, win->x_col);
			getyx(win->x_win, win->x_line, win->x_col);
			text++;
			continue;
		}
		/*
		 * On word erase search backwards until we find
		 * the beginning of a word or the beginning of
		 * the line.
		 */
		if (*text == win->werase) {
			int endcol, xcol, i, c;

			endcol = win->x_col;
			xcol = endcol - 1;
			while (xcol >= 0) {
				c = readwin(win->x_win, win->x_line, xcol);
				if (c != ' ')
					break;
				xcol--;
			}
			while (xcol >= 0) {
				c = readwin(win->x_win, win->x_line, xcol);
				if (c == ' ')
					break;
				xcol--;
			}
			wmove(win->x_win, win->x_line, xcol + 1);
			for (i = xcol + 1; i < endcol; i++)
				waddch(win->x_win, ' ');
			wmove(win->x_win, win->x_line, xcol + 1);
			getyx(win->x_win, win->x_line, win->x_col);
			text++;
			continue;
		}
		/* line kill */
		if (*text == win->kill) {
			wmove(win->x_win, win->x_line, 0);
			wclrtoeol(win->x_win);
			getyx(win->x_win, win->x_line, win->x_col);
			text++;
			continue;
		}
		if (*text == '\f') {
			if (win == &my_win)
				wrefresh(curscr);
			text++;
			continue;
		}
		if (win->x_col == COLS-1) {
			/* check for wraparound */
			xscroll(win, 0);
		}
		if (*text != '\t' &&
		    ((!high_print && !isprint((unsigned char)*text)) ||
		      iscntrl((unsigned char)*text))) {
			waddch(win->x_win, '^');
			getyx(win->x_win, win->x_line, win->x_col);
			if (win->x_col == COLS-1) /* check for wraparound */
				xscroll(win, 0);
			cch = (*text & 63) + 64;
			waddch(win->x_win, cch);
		} else
			waddch(win->x_win, (unsigned char)(*text));
		getyx(win->x_win, win->x_line, win->x_col);
		text++;
	}
	wrefresh(win->x_win);
}

/*
 * Read the character at the indicated position in win
 */
int
readwin(WINDOW *win, int line, int col)
{
	int oldline, oldcol;
	int c;

	getyx(win, oldline, oldcol);
	wmove(win, line, col);
	c = winch(win);
	wmove(win, oldline, oldcol);
	return (c);
}

/*
 * Scroll a window, blanking out the line following the current line
 * so that the current position is obvious
 */
void
xscroll(xwin_t *win, int flag)
{

	if (flag == -1) {
		wmove(win->x_win, 0, 0);
		win->x_line = 0;
		win->x_col = 0;
		return;
	}
	win->x_col = 0;
	if (smooth_scroll) {
		if (++win->x_line == win->x_nlines) {
			--win->x_line;
			scroll(win->x_win);
		}
	} else {
		win->x_line = (win->x_line + 1) % win->x_nlines;
		wmove(win->x_win, win->x_line, win->x_col);
		wclrtoeol(win->x_win);
		wmove(win->x_win, (win->x_line + 1) % win->x_nlines,
		    win->x_col);
		wclrtoeol(win->x_win);
	}
	wmove(win->x_win, win->x_line, win->x_col);
}
@


1.17
log
@unsigned char for ctype
ok krw okan
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.16 2010/08/12 23:31:29 tedu Exp $	*/
d37 2
a39 1
#include <ctype.h>
@


1.16
log
@some inconsequential cleanups.  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.15 2009/10/27 23:59:44 deraadt Exp $	*/
d140 2
a141 1
		    ((!high_print && !isprint(*text)) || iscntrl(*text))) {
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.14 2004/03/02 21:04:42 tedu Exp $	*/
d44 3
a46 3
int	curses_initialized = 0;
int	high_print = 0;
bool	smooth_scroll = FALSE;
d50 1
a50 1
 * a argument of the form --foo at least once.
d53 1
a53 2
max(a,b)
	int a, b;
d64 1
a64 4
display(win, text, size)
	xwin_t *win;
	char *text;
	int size;
d159 1
a159 3
readwin(win, line, col)
	WINDOW *win;
	int line, col;
d176 1
a176 3
xscroll(win, flag)
	xwin_t *win;
	int flag;
@


1.14
log
@use socklen_t and better socket() checks.  from Andrey Matveev
-Wall for good measure
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.13 2003/06/03 02:56:17 millert Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)display.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: display.c,v 1.13 2003/06/03 02:56:17 millert Exp $";
#endif /* not lint */
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.12 2002/06/20 19:25:55 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: display.c,v 1.12 2002/06/20 19:25:55 millert Exp $";
@


1.12
log
@Add a -s option to enable the smooth scrolling in revision 1.10
The default behavior remains unchanged.
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.11 2002/06/20 10:18:29 form Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: display.c,v 1.11 2002/06/20 10:18:29 form Exp $";
@


1.11
log
@undo last commit; deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: display.c,v 1.9 2001/11/19 19:02:16 mpech Exp $";
d57 1
a203 1
	win->x_line = (win->x_line + 1) % win->x_nlines;
d205 13
a217 4
	wmove(win->x_win, win->x_line, win->x_col);
	wclrtoeol(win->x_win);
	wmove(win->x_win, (win->x_line + 1) % win->x_nlines, win->x_col);
	wclrtoeol(win->x_win);
@


1.10
log
@scrolling support.
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.9 2001/11/19 19:02:16 mpech Exp $	*/
d203 1
d205 4
a208 4
	if (++win->x_line == win->x_nlines) {
		--win->x_line;
		scroll(win->x_win);
	}
@


1.9
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.8 2000/12/31 00:24:51 hugh Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: display.c,v 1.8 2000/12/31 00:24:51 hugh Exp $";
a202 1
	win->x_line = (win->x_line + 1) % win->x_nlines;
d204 4
a207 4
	wmove(win->x_win, win->x_line, win->x_col);
	wclrtoeol(win->x_win);
	wmove(win->x_win, (win->x_line + 1) % win->x_nlines, win->x_col);
	wclrtoeol(win->x_win);
@


1.8
log
@Redress PR 1547. Provide an option to pass high characters without
escaping, and turn it off by default. Checked by angelos@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.7 2000/12/30 06:27:48 angelos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: display.c,v 1.7 2000/12/30 06:27:48 angelos Exp $";
d76 2
a77 2
	register xwin_t *win;
	register char *text;
d80 1
a80 1
	register int i;
d178 1
a178 1
	register int c;
d193 1
a193 1
	register xwin_t *win;
@


1.7
log
@Allow printing characters > 0x80, thus permitting other charsets
(dem0n@@istc.kiev.ua, PR 1547)
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.6 1999/03/23 17:00:38 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: display.c,v 1.6 1999/03/23 17:00:38 millert Exp $";
a54 3
#undef isprint
#define isprint(n) ((unsigned char)(n)>31)

d56 1
d153 2
a154 1
		if (!isprint(*text) && *text != '\t') {
@


1.6
log
@Don't bother calling nl() in init_display, just do the '\r' -> '\n' conversion
ourselves in display().  Since we don't use the curses input routines we
have to do the conversion by hand.  This is cheap because input processing
is done on a per-character basis.  Closes PR 783.
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.5 1998/04/28 22:13:22 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: display.c,v 1.5 1998/04/28 22:13:22 pjanzen Exp $";
d55 3
d163 1
a163 1
			waddch(win->x_win, *text);
@


1.5
log
@NetBSD-based -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.4 1997/11/30 20:30:50 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: display.c,v 1.4 1997/11/30 20:30:50 deraadt Exp $";
d83 7
a89 1
		if (*text == '\n' || *text == '\r') {
@


1.4
log
@treat \n and \r the same on input
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.2 1996/06/26 05:40:21 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: display.c,v 1.2 1996/06/26 05:40:21 deraadt Exp $";
d61 1
d73 1
d164 1
d167 1
d183 1
@


1.3
log
@talk messes up national characters; netbsd pr#2874, tron@@lyssa.owl.de
@
text
@d81 1
a81 1
		if (*text == '\n') {
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.3 1994/12/09 02:14:13 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: display.c,v 1.3 1994/12/09 02:14:13 jtc Exp $";
d49 1
d144 1
a144 1
		if (*text < ' ' && *text != '\t') {
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: display.c,v 1.3 1994/12/09 02:14:13 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
