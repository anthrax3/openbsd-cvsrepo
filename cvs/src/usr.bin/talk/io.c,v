head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.10
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.8
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.18.0.22
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.14
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.18
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.16
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.12
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.10
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.8
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.6
	OPENBSD_5_0:1.18.0.4
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.2
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.20
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.16
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.14
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.12
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.10
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.8
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.6
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.4
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.10
	OPENBSD_2_8:1.9.0.8
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.6
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.4
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.02.18.21.51.20;	author espie;	state Exp;
branches;
next	1.19;
commitid	yRJEjpww3KLynvtA;

1.19
date	2016.02.01.07.29.25;	author mestre;	state Exp;
branches;
next	1.18;
commitid	Pn9SmnrokNcgT1A4;

1.18
date	2010.08.12.23.31.29;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.44;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.04.13.02.33.08;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.02.21.04.42;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.11.21.10.54;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.10.22.20.53;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.17;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.21.06.16.44;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.05.00.29.20;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.03.03.20.43.30;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.03.03.15.42.46;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.08.18.04.02.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.08.18.02.54.23;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.04.28.22.13.28;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.04.27.15.45.50;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.40.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.21.41.26;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@finish conversion select -> poll, error messages count too, sloppy theo.

okay millert@@
@
text
@/*	$OpenBSD: io.c,v 1.19 2016/02/01 07:29:25 mestre Exp $	*/
/*	$NetBSD: io.c,v 1.4 1994/12/09 02:14:20 jtc Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * This file contains the I/O handling and the exchange of
 * edit characters. This connection itself is established in
 * ctl.c
 */

#include <sys/ioctl.h>

#include <errno.h>
#include <poll.h>
#include <unistd.h>

#include "talk.h"

#define A_LONG_TIME 1000000

volatile sig_atomic_t gotwinch;

/*
 * The routine to do the actual talking
 */
void
talk(void)
{
	struct pollfd fds[2];
	char buf[BUFSIZ];
	int nb;

#if defined(NCURSES_VERSION) || defined(beep)
	message("Connection established");
	beep();
	beep();
	beep();
#else
	message("Connection established\007\007\007");
#endif
	current_line = 0;

	/*
	 * Wait on both the other process (sockt_mask) and
	 * standard input ( STDIN_MASK )
	 */
	fds[0].fd = fileno(stdin);
	fds[0].events = POLLIN;
	fds[1].fd = sockt;
	fds[1].events = POLLIN;
	
	for (;;) {
		nb = poll(fds, 2, A_LONG_TIME * 1000);
		if (gotwinch) {
			resize_display();
			gotwinch = 0;
		}
		if (nb <= 0) {
			if (errno == EINTR)
				continue;
			/* panic, we don't know what happened */
			quit("Unexpected error from poll", 1);
		}
		if (fds[1].revents & POLLIN) {
			/* There is data on sockt */
			nb = read(sockt, buf, sizeof buf);
			if (nb <= 0)
				quit("Connection closed.  Exiting", 0);
			display(&his_win, buf, nb);
		}
		if (fds[0].revents & POLLIN) {
			/*
			 * We can't make the tty non_blocking, because
			 * curses's output routines would screw up
			 */
			ioctl(0, FIONREAD, &nb);
			nb = read(STDIN_FILENO, buf, nb);
			display(&my_win, buf, nb);
			/* might lose data here because sockt is non-blocking */
			write(sockt, buf, nb);
		}
	}
}

/*
 * Display string in the standard location
 */
void
message(char *string)
{
	wmove(my_win.x_win, current_line % my_win.x_nlines, 0);
	wprintw(my_win.x_win, "[%s]", string);
	wclrtoeol(my_win.x_win);
	current_line++;
	wmove(my_win.x_win, current_line % my_win.x_nlines, 0);
	wrefresh(my_win.x_win);
}
@


1.19
log
@Remove unused headers and sort the remaining
Remove lint-style comments
Swap hardcoded string on usage() for __progname

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.18 2010/08/12 23:31:29 tedu Exp $	*/
d90 1
a90 1
			quit("Unexpected error from select", 1);
@


1.18
log
@some inconsequential cleanups.  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.17 2009/10/27 23:59:44 deraadt Exp $	*/
a38 1
#include "talk.h"
d40 2
a41 2
#include <sys/time.h>
#include <stdio.h>
a42 1
#include <errno.h>
d44 2
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.16 2005/04/13 02:33:08 deraadt Exp $	*/
d49 1
a49 1
volatile sig_atomic_t gotwinch = 0;
@


1.16
log
@use STD{IN,OUT,ERR}_FILENO
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.15 2004/03/02 21:04:42 tedu Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)io.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: io.c,v 1.15 2004/03/02 21:04:42 tedu Exp $";
#endif /* not lint */
@


1.15
log
@use socklen_t and better socket() checks.  from Andrey Matveev
-Wall for good measure
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.14 2003/08/11 21:10:54 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: io.c,v 1.14 2003/08/11 21:10:54 deraadt Exp $";
d112 1
a112 1
			nb = read(0, buf, nb);
@


1.14
log
@use poll to replace the fd_set overflows.  some input from fgsch; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.13 2003/06/10 22:20:53 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: io.c,v 1.13 2003/06/10 22:20:53 deraadt Exp $";
@


1.13
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.12 2003/06/03 02:56:17 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: io.c,v 1.12 2003/06/03 02:56:17 millert Exp $";
d50 1
d54 1
a54 1
#define A_LONG_TIME 10000000
d64 2
a65 1
	fd_set read_template, read_set;
a66 3
	char buf[BUFSIZ];
	struct timeval wait;
	int maxfd = 0;
d82 5
a86 7
	FD_ZERO(&read_template);
	FD_SET(fileno(stdin), &read_template);
	if (fileno(stdin) > maxfd)
		maxfd = fileno(stdin);
	FD_SET(sockt, &read_template);
	if (sockt > maxfd)
		maxfd = sockt;
d88 1
a88 4
		read_set = read_template;
		wait.tv_sec = A_LONG_TIME;
		wait.tv_usec = 0;
		nb = select(maxfd + 1, &read_set, 0, 0, &wait);
d94 1
a94 2
			if (errno == EINTR) {
				read_set = read_template;
a95 1
			}
d99 1
a99 1
		if (FD_ISSET(sockt, &read_set)) {
d106 1
a106 1
		if (FD_ISSET(fileno(stdin), &read_set)) {
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.11 2002/06/21 06:16:44 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: io.c,v 1.11 2002/06/21 06:16:44 millert Exp $";
d61 1
a61 1
talk()
d132 1
a132 2
message(string)
	char *string;
@


1.11
log
@o Resize nicely when we receive SIGWINCH
o Also change some 0-2 to *_FILENO
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.10 2001/09/05 00:29:20 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: io.c,v 1.10 2001/09/05 00:29:20 deraadt Exp $";
@


1.10
log
@select for a more accurate size; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.9 1999/03/03 20:43:30 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: io.c,v 1.9 1999/03/03 20:43:30 millert Exp $";
d59 2
d99 4
@


1.9
log
@Print fatal errors to stderr after curses has finished instead of printing to the curses window which disapears immediately for terminals that can restore the screen.
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.8 1999/03/03 15:42:46 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: io.c,v 1.8 1999/03/03 15:42:46 millert Exp $";
d69 1
d86 3
d90 2
a91 1
	FD_SET(fileno(stdin), &read_template);
d96 1
a96 1
		nb = select(32, &read_set, 0, 0, &wait);
@


1.8
log
@kill bogus comment
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.7 1998/08/18 04:02:16 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: io.c,v 1.7 1998/08/18 04:02:16 millert Exp $";
d98 1
a98 2
			p_error("Unexpected error from select");
			quit();
d103 2
a104 4
			if (nb <= 0) {
				message("Connection closed. Exiting");
				quit();
			}
a118 17
}

/*
 * p_error prints the system error message on the standard location
 * on the screen and then exits. (i.e. a curses version of perror)
 */
void
p_error(string)
	char *string;
{
	wmove(my_win.x_win, current_line%my_win.x_nlines, 0);
	wprintw(my_win.x_win, "[%s : %s (%d)]\n",
	    string, strerror(errno), errno);
	wrefresh(my_win.x_win);
	move(LINES-1, 0);
	refresh();
	quit();
@


1.7
log
@Some changes inspired by FreeBSD...
 o Kill annoying spaces at the end of lines
 o sigaction, not sigvec
 o warn/err where sensible
 o hstrerror() not herror()
 o defaults for erase, kill, and werase if not set
 o kill a needless refresh() after the beeps that was messing up the screen
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.6 1998/08/18 02:54:23 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: io.c,v 1.6 1998/08/18 02:54:23 millert Exp $";
a71 3
	/*
	 * beep() doesn't flush output on its own.
	 */
@


1.6
log
@kill bogus cast to struct sgttyb *
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.5 1998/04/28 22:13:28 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: io.c,v 1.5 1998/04/28 22:13:28 pjanzen Exp $";
d45 1
a45 1
 * This file contains the I/O handling and the exchange of 
d70 1
a70 1
#ifdef NCURSES_VERSION
a77 1
	refresh();
d84 1
a84 1
	 * Wait on both the other process (sockt_mask) and 
d132 1
a132 1
p_error(string) 
@


1.5
log
@NetBSD-based -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.4 1998/04/27 15:45:50 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: io.c,v 1.4 1998/04/27 15:45:50 pjanzen Exp $";
d119 1
a119 1
			ioctl(0, FIONREAD, (struct sgttyb *) &nb);
@


1.4
log
@

Historically, talk pays no attention to hostnames, so if you've typed
'talk aaa@@b' and are waiting for a response, and user aaa@@c tries to talk
to you, you'll be transparently connected.  Now, talk will print the hostname
of the remote party if it's not the same host that you asked for.
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.3 1996/06/26 05:40:23 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: io.c,v 1.3 1996/06/26 05:40:23 deraadt Exp $";
d50 1
d55 1
a55 2
#include <string.h>
#include "talk.h"
a57 2
#define STDIN_MASK (1<<fileno(stdin))	/* the bit mask for standard
					   input */
d62 1
d65 2
a66 2
	register int read_template, sockt_mask;
	int read_set, nb;
a82 1
	sockt_mask = (1<<sockt);
d88 3
a90 1
	read_template = sockt_mask | STDIN_MASK;
d105 1
a105 1
		if (read_set & sockt_mask) { 
d114 1
a114 1
		if (read_set & STDIN_MASK) {
a127 3
extern	int errno;
extern	int sys_nerr;

d132 1
d148 1
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: io.c,v 1.4 1994/12/09 02:14:20 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: io.c,v 1.4 1994/12/09 02:14:20 jtc Exp $";
d73 3
d79 1
@


1.2
log
@Use beep() with ncurses
Use hline() with ncurses
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: io.c,v 1.4 1994/12/09 02:14:20 jtc Exp $";
@


1.1
log
@Initial revision
@
text
@d70 6
d77 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
