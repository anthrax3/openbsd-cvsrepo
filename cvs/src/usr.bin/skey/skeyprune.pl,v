head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.30
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.22
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.26
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.24
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.20
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.18
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.16
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.14
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.20
	OPENBSD_2_8:1.1.0.18
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.16
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2015.10.06.15.06.29;	author tim;	state Exp;
branches;
next	1.6;
commitid	Qbv6czwYzushvAv5;

1.6
date	2008.11.12.16.13.46;	author sobrado;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.17.21.56.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.01.52.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.16.18.27.34;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.20.22.19.58;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.09.28.00.00.41;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update path in comment; OK millert@@
@
text
@#!/usr/bin/perl -w
#
# Copyright (c) 1996, 2001, 2002 Todd C. Miller <Todd.Miller@@courtesan.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Sponsored in part by the Defense Advanced Research Projects
# Agency (DARPA) and Air Force Research Laboratory, Air Force
# Materiel Command, USAF, under agreement number F39502-99-1-0512.
#
# Prune commented out, bogus, and crufty entries from /etc/skey
# usage: skeyprune [days]
#
# $OpenBSD: skeyprune.pl,v 1.6 2008/11/12 16:13:46 sobrado Exp $
#

use POSIX qw(S_ISREG);
use Fcntl qw(:DEFAULT :flock);

# Keep out the stupid
die "Only root may run $0.\n" if $>;
die "usage: $0 [days]\n" if $#ARGV > 0;

# Pathnames
$skeydir = '/etc/skey';

# Remove entries that haven't been modified in this many days.
$days_old = $ARGV[0] || -1;

# Safe umask
umask(077);

# Current time
$now = time();

# Slurp mode
undef $/;

chdir($skeydir) || die "$0: Can't cd to $skeydir: $!\n";
opendir(SKEYDIR, ".") || die "$0: Can't open $skeydir: $!\n";
while (defined($user = readdir(SKEYDIR))) {
	next if $user =~ /^\./;
	if (!sysopen(SKEY, $user, 0, O_RDWR | O_NONBLOCK | O_NOFOLLOW)) {
	    warn "$0: Can't open $user: $!\n";
	    next;
	}
	if (!flock(SKEY, LOCK_EX)) {
		warn "$0: Can't lock $user: $!\n";
		close(SKEY);
		next;
	}

	if (!stat(SKEY)) {
		warn "$0: Can't stat $user: $!\n";
		close(SKEY);
		next;
	}

	# Sanity checks.
	if (!S_ISREG((stat(_))[2])) {
		warn "$0: $user is not a regular file\n";
		close(SKEY);
		next;
	}
	if (((stat(_))[2] & 07777) != 0600) {
		printf STDERR ("%s: Bad mode for %s: 0%o\n", $0, $user,
		    (stat(_))[2]);
		close(SKEY);
		next;
	}
	if ((stat(_))[3] != 1) {
		printf STDERR ("%s: Bad link count for %s: %d\n", $0, $user,
		    (stat(_))[3]);
		close(SKEY);
		next;
	}

	# Remove zero size entries
	if (-z _) {
		unlink($user) || warn "$0: Can't unlink $user: $!\n";
		close(SKEY);
		next;
	}

	# Prune out old entries if asked to
	if ($days_old > 0) {
		$then = (stat(_))[9];
		if (($now - $then) / (60 * 60 * 24) - 1 > $days_old) {
			unlink($user) || warn "$0: Can't unlink $user: $!\n";
			close(SKEY);
			next;
		}
	}

	# Read in the entry and check its contents.
	$entry = <SKEY>;
	if ($entry !~ /^\S+[\r\n]+\S+[\r\n]+\d+[\r\n]+[A-z0-9]+[\r\n]+[a-f0-9]+[\r\n]+$/) {
		warn "$0: Invalid entry for $user:\n$entry";
	}

	close(SKEY);
}
exit(0);
@


1.6
log
@Usage -> usage.
@
text
@d21 1
a21 1
# Prune commented out, bogus, and crufty entries from /etc/skeykeys
d24 1
a24 1
# $OpenBSD: skeyprune.pl,v 1.5 2003/06/17 21:56:26 millert Exp $
@


1.5
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d22 1
a22 1
# Usage: skeyprune [days]
d24 1
a24 1
# $OpenBSD: skeyprune.pl,v 1.4 2003/06/03 01:52:41 millert Exp $
d32 1
a32 1
die "Usage: $0 [days]\n" if $#ARGV > 0;
@


1.4
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d9 11
a19 7
# THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
# FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d24 1
a24 1
# $OpenBSD: skeyprune.pl,v 1.3 2002/05/16 18:27:34 millert Exp $
@


1.3
log
@Update for new S/Key file format
@
text
@a3 1
# All rights reserved.
d5 3
a7 10
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
d9 7
a15 10
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d20 1
a20 1
# $OpenBSD: skeyprune.pl,v 1.2 2001/06/20 22:19:58 millert Exp $
@


1.2
log
@o perl5'ified
o We now lock the skeys database as we ought to avoid problems.
o Safe temp file handling
o Weed out bogus records instead of ignoring them
o Add a hash type to old md4 entries w/o a hash type listed
@
text
@d3 1
a3 1
# Copyright (c) 1996, 2001 Todd C. Miller <Todd.Miller@@courtesan.com>
d31 1
a31 1
# $OpenBSD: skeyprune.pl,v 1.1 1996/09/28 00:00:41 millert Exp $
d34 1
a34 1
use File::Temp qw(:mktemp);
a35 1
use Time::Local;
d42 1
a42 6
$keyfile = '/etc/skeykeys';
$template = "$keyfile.XXXXXXXX";

# Quick mapping of month name -> number
%months = ('Jan', 0, 'Feb', 1, 'Mar', 2, 'Apr', 3, 'May', 4,  'Jun', 5,
	   'Jul', 6, 'Aug', 7, 'Sep', 8, 'Oct', 9, 'Nov', 10, 'Dec', 11);
d50 51
a100 34
# Open and lock the current key file
open(OLD, $keyfile) || die "$0: Can't open $keyfile: $!\n";
flock(OLD, LOCK_EX) || die "$0: Can't lock $keyfile: $!\n";

# Safely open temp file
($NEW, $temp) = mkstemp($template);
die "$0: Can't open tempfile $template: $!\n" unless $temp;

# Run at a high priority so we don't keep things locked for too long
setpriority(0, 0, -4);

while (<OLD>) {
	chomp();

	# Valid entry: 'username hash seq seed key date"
	if ( /^[^\s#]+\s+(\S+\s+)?[0-9]+\s+[A-z0-9]+\s+[a-f0-9]+\s+(Jan|Feb|Mar|Apr|May|Ju[nl]|Aug|Sep|Oct|Nov|Dec)\s+[0-9]+,\s*[0-9]+\s+[0-9]+:[0-9]+:[0-9]+$/ ) {

		@@entry = split(/[\s,:]+/, $_);
		# Prune out old entries if asked to
		if ($days_old > 0) {
			# build up time based on date string
			$sec = $date[10];
			$min = $date[9];
			$hours = $date[8];
			$mday = $date[6] - 1;
			$mon = $months{$date[5]};
			$year = $date[7] - 1900;

			$now = time();
			$then = timelocal($sec,$min,$hours,$mday,$mon,$year);
			if (($now - $then) / (60 * 60 * 24) - 1 > $days_old) {
				next;	# too old
			}
		}
d102 7
a108 3
		# Missing hash type?  Must be md4...
		if ($entry[1] =~ /^\d/) {
			splice(@@entry, 1, 0, "md4");
d110 1
d112 4
a115 8
		printf $NEW "%s %s %04d %-16s %s %4s %02d,%-4d %02d:%02d:%02d\n",
		    $entry[0], $entry[1], $entry[2], $entry[3], $entry[4],
		    $entry[5], $entry[6], $entry[7], $entry[8], $entry[9],
		    $entry[10] || do {
			warn "Can't write to $temp: $!\n";
			unlink($temp);
			exit(1);
		};
a116 3
}
close(OLD);
close($NEW);
d118 1
a118 13
# Set owner/group/mode on tempfile and move to real location.
($mode, $nlink, $uid, $gid) = (stat($keyfile))[2..5];
if (!defined($mode)) {
	unlink($temp);
	die "$0: Unable to stat $keyfile: $!\n";
}
if (!chmod($mode, $temp)) {
	unlink($temp);
	die "$0: Unable to set mode of $temp to $mode: $!\n";
}
if (!chown($uid, $gid, $temp)) {
	unlink($temp);
	die "$0: Unable to set owner of $temp to ($uid, $gid): $!\n";
a119 7
if ($nlink != 1) {
	$nlink--;
	warn "$0: Old $keyfile had $nlink hard links, those will be broken\n";
}
# Leave temp file in place if rename fails.  Might help in debugging.
rename($temp, $keyfile) || die "$0: Unable to rename $temp to $keyfile: $!\n";

@


1.1
log
@skeyprune -- new command to prune commented (zero'd) and crufty skey entries.
@
text
@d1 1
a1 1
#!/usr/bin/perl
d3 26
a28 1
# Prune commented out and crufty entries from skeykeys
d31 2
a32 2
# Todd C. Miller <Todd.Miller@@courtesan.com>
# $OpenBSD: $
d34 3
a36 2
# We need to be able convert to time_t
require 'timelocal.pl';
d40 1
a40 1
die "Usage: $0 [days]\n" if $#ARGC > 0;
d44 1
a44 1
$temp = "$keyfile.tmp$$";
d53 4
a56 1
# Open current key file
d58 1
d61 2
a62 3
umask(077);
unlink($temp);
open(NEW, ">$temp") || die "$0: Can't open tempfile $temp: $!\n";
d64 1
a64 1
# We need to be extra speedy to close the window where someone can hose us.
d68 35
a102 21
    # Ignore commented out entries
    if ( ! /^#[^\s#]+\s+(MD[0-9]+\s+)?[0-9]+\s+[A-z0-9_-]+\s+[a-f0-9]+\s+(Jan|Feb|Mar|Apr|May|Ju[nl]|Aug|Sep|Oct|Nov|Dec)\s+[0-9]+,\s*[0-9]+\s+[0-9]+:[0-9]+:[0-9]+$/ ) {
	/((Jan|Feb|Mar|Apr|May|Ju[nl]|Aug|Sep|Oct|Nov|Dec)\s+[0-9]+,\s*[0-9]+\s+[0-9]+:[0-9]+:[0-9]+)$/;

	# Prune out old entries if asked to
	if ($days_old > 0) {
	    # build up time based on date string
	    @@date = split(/[\s,:]/, $1);
	    $sec = $date[5];
	    $min = $date[4];
	    $hours = $date[3];
	    $mday = $date[1] - 1;
	    $mon = $months{$date[0]};
	    $year = $date[2] - 1900;

	    $now = time();
	    $then = &timelocal($sec,$min,$hours,$mday,$mon,$year);
	    if (($now - $then) / (60 * 60 * 24) - 1 <= $days_old) {
		print NEW $_ || do {
		    warn "Can't write to $temp: $!\n";
		    unlink($temp);
a103 6
	    }
	} else {
	    print NEW $_ || do {
		warn "Can't write to $temp: $!\n";
		unlink($temp);
	    };
a104 1
    }
d107 1
a107 1
close(NEW);
d112 2
a113 2
    unlink($temp);
    die "$0: Unable to stat $keyfile: $!\n";
d116 2
a117 2
    unlink($temp);
    die "$0: Unable to set mode of $temp to $mode: $!\n";
d120 6
a125 2
    unlink($temp);
    die "$0: Unable to set owner of $temp to ($uid, $gid): $!\n";
@

