head	1.19;
access;
symbols
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.10
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.8
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.14.0.10
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.6
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.14
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.12
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2014.07.09.19.04.03;	author tedu;	state dead;
branches;
next	1.18;
commitid	eAzXgBFfumEMgfe3;

1.18
date	2013.11.26.21.08.09;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.06.11.36.26;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.50;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.22.20.03.04;	author sobrado;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.10.14.29.53;	author tobias;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.26.09.04.18;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.21.15.27.19;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.02.56.24;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.08.16.50.07;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.24.02.25.48;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.23.22.09.37;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.23.21.47.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.18;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.20.14.20.29;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.12.07.08.18.38;	author bitblt;	state Exp;
branches;
next	1.3;

1.3
date	96.09.16.02.26.20;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.44.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.05;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Do you know what horrors lie beyond that wall?
No.
Then you go first.
@
text
@/*	$OpenBSD: xstr.c,v 1.18 2013/11/26 21:08:09 deraadt Exp $	*/
/*	$NetBSD: xstr.c,v 1.5 1994/12/24 16:57:59 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <signal.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include "pathnames.h"

/*
 * xstr - extract and hash strings in a C program
 *
 * Bill Joy UCB
 * November, 1978
 */

#define	BUCKETS	128

off_t	tellpt;
off_t	mesgpt;
char	*strings = "strings";
char	*array = 0;

int	cflg;
int	vflg;
int	readstd;

struct	hash {
	off_t	hpt;
	char	*hstr;
	struct	hash *hnext;
	short	hnew;
} bucket[BUCKETS];

void process(char *);
off_t yankstr(char **);
int octdigit(char);
void inithash(void);
int fgetNUL(char *, int, FILE *);
int xgetc(FILE *);
off_t hashit(char *, int);
void flushsh(void);
void found(int, off_t, char *);
void prstr(char *);
void xsdotc(void);
char lastchr(char *);
int istail(char *, char *);
void onintr(void);

int
main(int argc, char *argv[])
{
	int c;
	int fdesc;

	while ((c = getopt(argc, argv, "cvl:-")) != -1)
		switch (c) {
		case '-':
			readstd++;
			break;
		case 'c':
			cflg++;
			break;
		case 'v':
			vflg++;
			break;
		case 'l':
			array = optarg;
			break;
		default:
			fprintf(stderr,
			    "usage: xstr [-cv] [-l array] [-] [file ...]\n");
			exit(1);
		} 
	argc -= optind;
	argv += optind;

	if (array == 0)
		array = "xstr";

	if (signal(SIGINT, SIG_IGN) == SIG_DFL)
		signal(SIGINT, (void(*)(int))onintr);
	if (cflg || (argc == 0 && !readstd))
		inithash();
	else {
		strings = strdup (_PATH_TMPFILE);
		if (strings == NULL) {
			fprintf(stderr, "Unable to allocate memory: %s",
			    strerror (errno));
			exit(1);
		}
		fdesc = mkstemp (strings);
		if (fdesc < 0) {
			fprintf(stderr, "Unable to create temporary file.\n");
			exit(1);
		}
		close (fdesc);
	}

	while (readstd || argc > 0) {
		if (freopen("x.c", "w", stdout) == NULL) {
			perror("x.c");
			exit(1);
		}
		if (!readstd && freopen(argv[0], "r", stdin) == NULL) {
			perror(argv[0]);
			exit(2);
		}
		process("x.c");
		if (readstd == 0)
			argc--, argv++;
		else
			readstd = 0;
	}
	flushsh();
	if (cflg == 0)
		xsdotc();
	if (strings[0] == '/')
		unlink(strings);
	exit(0);
}

char linebuf[BUFSIZ];

void
process(char *name)
{
	char *cp;
	int c;
	int incomm = 0;
	int ret;

	printf("extern char\t%s[];\n", array);
	for (;;) {
		if (fgets(linebuf, sizeof linebuf, stdin) == NULL) {
			if (ferror(stdin)) {
				perror(name);
				exit(3);
			}
			break;
		}
		if (linebuf[0] == '#') {
			if (linebuf[1] == ' ' &&
			    isdigit((unsigned char)linebuf[2]))
				printf("#line%s", &linebuf[1]);
			else
				printf("%s", linebuf);
			continue;
		}
		for (cp = linebuf; (c = *cp++); )
			switch (c) {
			case '"':
				if (incomm)
					goto def;
				if ((ret = (int) yankstr(&cp)) == -1)
					goto out;
				printf("(&%s[%d])", array, ret);
				break;
			case '\'':
				if (incomm)
					goto def;
				putchar(c);
				if (*cp)
					putchar(*cp++);
				break;
			case '/':
				if (incomm || *cp != '*')
					goto def;
				incomm = 1;
				cp++;
				printf("/*");
				continue;
			case '*':
				if (incomm && *cp == '/') {
					incomm = 0;
					cp++;
					printf("*/");
					continue;
				}
				goto def;
			def:
			default:
				putchar(c);
				break;
			}
	}
out:
	if (ferror(stdout))
		perror("x.c"), onintr();
}

off_t
yankstr(char **cpp)
{
	char *cp = *cpp;
	int c, ch;
	char dbuf[BUFSIZ];
	char *dp = dbuf;
	char *tp;

	while ((c = *cp++)) {
		switch (c) {
		case '"':
			cp++;
			goto out;
		case '\\':
			c = *cp++;
			if (c == 0)
				break;
			if (c == '\n') {
				if (fgets(linebuf, sizeof linebuf, stdin)
				    == NULL) {
					if (ferror(stdin)) {
						perror("x.c");
						exit(3);
					}
					return(-1);
				}
				cp = linebuf;
				continue;
			}
			for (tp = "b\bt\tr\rn\nf\f\\\\\"\""; (ch = *tp++); tp++)
				if (c == ch) {
					c = *tp;
					goto gotc;
				}
			if (!octdigit(c)) {
				*dp++ = '\\';
				break;
			}
			c -= '0';
			if (!octdigit(*cp))
				break;
			c <<= 3, c += *cp++ - '0';
			if (!octdigit(*cp))
				break;
			c <<= 3, c += *cp++ - '0';
			break;
		}
gotc:
		*dp++ = c;
	}
out:
	*cpp = --cp;
	*dp = 0;
	return (hashit(dbuf, 1));
}

int
octdigit(char c)
{

	return (isdigit((unsigned char)c) && c != '8' && c != '9');
}

void
inithash(void)
{
	char buf[BUFSIZ];
	FILE *mesgread = fopen(strings, "r");

	if (mesgread == NULL)
		return;
	for (;;) {
		mesgpt = tellpt;
		if (fgetNUL(buf, sizeof buf, mesgread) == 0)
			break;
		hashit(buf, 0);
	}
	fclose(mesgread);
}

int
fgetNUL(char *obuf, int rmdr, FILE  *file)
{
	int c;
	char *buf = obuf;

	while (--rmdr > 0 && (c = xgetc(file)) != 0 && c != EOF)
		*buf++ = c;
	*buf++ = 0;
	return ((feof(file) || ferror(file)) ? 0 : 1);
}

int
xgetc(FILE *file)
{

	tellpt++;
	return (getc(file));
}


off_t
hashit(char *str, int new)
{
	int i;
	struct hash *hp, *hp0;

	hp = hp0 = &bucket[lastchr(str) & 0177];
	while (hp->hnext) {
		hp = hp->hnext;
		i = istail(str, hp->hstr);
		if (i >= 0)
			return (hp->hpt + i);
	}
	if ((hp = (struct hash *) calloc(1, sizeof (*hp))) == NULL) {
		perror("xstr");
		exit(8);
	}
	hp->hpt = mesgpt;
	if (!(hp->hstr = strdup(str))) {
		(void)fprintf(stderr, "xstr: %s\n", strerror(errno));
		exit(1);
	}
	mesgpt += strlen(hp->hstr) + 1;
	hp->hnext = hp0->hnext;
	hp->hnew = new;
	hp0->hnext = hp;
	return (hp->hpt);
}

void
flushsh(void)
{
	int i;
	struct hash *hp;
	FILE *mesgwrit;
	int old = 0, new = 0;

	for (i = 0; i < BUCKETS; i++)
		for (hp = bucket[i].hnext; hp != NULL; hp = hp->hnext)
			if (hp->hnew)
				new++;
			else
				old++;
	if (new == 0 && old != 0)
		return;
	mesgwrit = fopen(strings, old ? "r+" : "w");
	if (mesgwrit == NULL) {
		perror(strings);
		exit(4);
	}
	for (i = 0; i < BUCKETS; i++)
		for (hp = bucket[i].hnext; hp != NULL; hp = hp->hnext) {
			found(hp->hnew, hp->hpt, hp->hstr);
			if (hp->hnew) {
				fseek(mesgwrit, hp->hpt, SEEK_SET);
				fwrite(hp->hstr, strlen(hp->hstr) + 1, 1,
				    mesgwrit);
				if (ferror(mesgwrit)) {
					perror(strings);
					exit(4);
				}
			}
		}
	if (fclose(mesgwrit) == EOF) {
		perror(strings);
		exit(4);
	}
}

void
found(int new, off_t off, char *str)
{
	if (vflg == 0)
		return;
	if (!new)
		fprintf(stderr, "found at %d:", (int) off);
	else
		fprintf(stderr, "new at %d:", (int) off);
	prstr(str);
	fprintf(stderr, "\n");
}

void
prstr(char *cp)
{
	int c;

	while ((c = (*cp++ & 0377)))
		if (c < ' ')
			fprintf(stderr, "^%c", c + '`');
		else if (c == 0177)
			fprintf(stderr, "^?");
		else if (c > 0200)
			fprintf(stderr, "\\%03o", c);
		else
			fprintf(stderr, "%c", c);
}

void
xsdotc(void)
{
	FILE *strf = fopen(strings, "r");
	FILE *xdotcf;

	if (strf == NULL) {
		perror(strings);
		exit(5);
	}
	xdotcf = fopen("xs.c", "w");
	if (xdotcf == NULL) {
		perror("xs.c");
		exit(6);
	}
	fprintf(xdotcf, "char\t%s[] = {\n", array);
	for (;;) {
		int i, c;

		for (i = 0; i < 8; i++) {
			c = getc(strf);
			if (ferror(strf)) {
				perror(strings);
				onintr();
			}
			if (feof(strf)) {
				fprintf(xdotcf, "\n");
				goto out;
			}
			fprintf(xdotcf, "0x%02x,", c);
		}
		fprintf(xdotcf, "\n");
	}
out:
	fprintf(xdotcf, "};\n");
	fclose(xdotcf);
	fclose(strf);
}

char
lastchr(char *cp)
{

	while (cp[0] && cp[1])
		cp++;
	return (*cp);
}

int
istail(char *str, char *of)
{
	int d = strlen(of) - strlen(str);

	if (d < 0 || strcmp(&of[d], str) != 0)
		return (-1);
	return (d);
}

void
onintr(void)
{

	signal(SIGINT, SIG_IGN);
	if (strings[0] == '/')
		unlink(strings);
	unlink("x.c");
	unlink("xs.c");
	_exit(7);
}
@


1.18
log
@unsigned char casts for ctype
ok okan
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.17 2011/04/06 11:36:26 miod Exp $	*/
@


1.17
log
@Avoid using NULL in non-pointer contexts: use 0 for integer values and '\0'
for chars.
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.16 2009/10/27 23:59:50 deraadt Exp $	*/
d176 2
a177 1
			if (linebuf[1] == ' ' && isdigit(linebuf[2]))
d286 1
a286 1
	return (isdigit(c) && c != '8' && c != '9');
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.15 2009/10/22 20:03:04 sobrado Exp $	*/
d314 1
a314 1
	return ((feof(file) || ferror(file)) ? NULL : 1);
@


1.15
log
@wrap at 80 columns.
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.14 2007/09/10 14:29:53 tobias Exp $	*/
a31 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)xstr.c	8.1 (Berkeley) 6/9/93";
#endif
static char rcsid[] = "$OpenBSD: xstr.c,v 1.14 2007/09/10 14:29:53 tobias Exp $";
#endif /* not lint */
@


1.14
log
@Proper use of fseek/fseeko macros.

OK joris@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.13 2004/07/26 09:04:18 jmc Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.13 2004/07/26 09:04:18 jmc Exp $";
d394 2
a395 1
				fwrite(hp->hstr, strlen(hp->hstr) + 1, 1, mesgwrit);
@


1.13
log
@- document -v (verbose); from NetBSD (-r 1.16)
- order options
- simplify macros
- sync usage()
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.12 2004/06/21 15:27:19 avsm Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.12 2004/06/21 15:27:19 avsm Exp $";
d393 1
a393 1
				fseek(mesgwrit, hp->hpt, 0);
@


1.12
log
@dont compare int with NULL, compare to 0 instead, otto@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.11 2003/06/03 02:56:24 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.11 2003/06/03 02:56:24 millert Exp $";
d118 1
a118 1
			    "usage: xstr [-vc] [-l array] [-] [name ...]\n");
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.10 2002/12/08 16:50:07 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.10 2002/12/08 16:50:07 millert Exp $";
d311 1
a311 1
		if (fgetNUL(buf, sizeof buf, mesgread) == NULL)
@


1.10
log
@GNU semantics say that if optstring begins with '-' then
each non-option shall be treated as arguments to option '\1'.

BSD getopt match '-' in optstring with a '-' on the command line.
This is used to support deprecated options like "su -" that would
otherwise prevent the use of getopt().

Resolving this simply requires that the leading '-' be moved somewhere
else (I moved it to the end of optstring) since position within
optstring is not meaningful.
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.9 2002/02/24 02:25:48 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.9 2002/02/24 02:25:48 deraadt Exp $";
@


1.9
log
@bad doug, bad bad bad doug; zyrnix@@users.sourceforge.net
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.8 2002/02/23 22:09:37 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.8 2002/02/23 22:09:37 deraadt Exp $";
d106 1
a106 1
	while ((c = getopt(argc, argv, "-cvl:")) != -1)
@


1.8
log
@more cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.7 2002/02/23 21:47:32 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.7 2002/02/23 21:47:32 deraadt Exp $";
d199 1
a199 1
		for (cp = linebuf; (c = *cp); cp++)
@


1.7
log
@-Wall; zyrnix@@users.sourceforge.net
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.6 2001/11/19 19:02:18 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.6 2001/11/19 19:02:18 mpech Exp $";
d71 2
a72 2
char	*strings =	"strings";
char	*array =	0;
d121 3
a123 2
			fprintf(stderr, "usage: xstr [ -v ] [ -c ] [ -l array ] [ - ] [ name ... ]\n");
			exit (1);
d151 8
a158 4
		if (freopen("x.c", "w", stdout) == NULL)
			perror("x.c"), exit(1);
		if (!readstd && freopen(argv[0], "r", stdin) == NULL)
			perror(argv[0]), exit(2);
d164 1
a164 1
	};
d260 1
a260 1
				if (fgets(linebuf, sizeof linebuf, stdin) 
d389 4
a392 2
	if (mesgwrit == NULL)
		perror(strings), exit(4);
d399 4
a402 2
				if (ferror(mesgwrit))
					perror(strings), exit(4);
d405 4
a408 2
	if (fclose(mesgwrit) == EOF)
		perror(strings), exit(4);
d446 4
a449 2
	if (strf == NULL)
		perror(strings), exit(5);
d451 4
a454 2
	if (xdotcf == NULL)
		perror("xs.c"), exit(6);
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.5 2001/07/20 14:20:29 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.5 2001/07/20 14:20:29 deraadt Exp $";
d67 1
a67 1
#define	ignore(a)	((void) a)
a69 5
off_t	hashit();
void	onintr();
char	*savestr();
off_t	yankstr();

a71 1

d78 24
a101 3
main(argc, argv)
	int argc;
	char *argv[];
d131 2
a132 2
		signal(SIGINT, onintr);
	if (cflg || argc == 0 && !readstd)
d164 1
a164 1
		ignore(unlink(strings));
d170 2
a171 2
process(name)
	char *name;
d194 20
a213 29
		for (cp = linebuf; c = *cp++;) switch (c) {
			
		case '"':
			if (incomm)
				goto def;
			if ((ret = (int) yankstr(&cp)) == -1)
				goto out;
			printf("(&%s[%d])", array, ret);
			break;

		case '\'':
			if (incomm)
				goto def;
			putchar(c);
			if (*cp)
				putchar(*cp++);
			break;

		case '/':
			if (incomm || *cp != '*')
				goto def;
			incomm = 1;
			cp++;
			printf("/*");
			continue;

		case '*':
			if (incomm && *cp == '/') {
				incomm = 0;
d215 1
a215 1
				printf("*/");
d217 12
a229 7
			goto def;
		
def:
		default:
			putchar(c);
			break;
		}
d237 1
a237 2
yankstr(cpp)
	char **cpp;
d245 1
a245 1
	while (c = *cp++) {
a246 1

a249 1

d266 1
a266 1
			for (tp = "b\bt\tr\rn\nf\f\\\\\"\""; ch = *tp++; tp++)
d293 2
a294 2
octdigit(c)
	char c;
d300 2
a301 1
inithash()
d312 1
a312 1
		ignore(hashit(buf, 0));
d314 1
a314 1
	ignore(fclose(mesgread));
d317 2
a318 4
fgetNUL(obuf, rmdr, file)
	char *obuf;
	int rmdr;
	FILE *file;
d329 2
a330 2
xgetc(file)
	FILE *file;
a336 8
#define	BUCKETS	128

struct	hash {
	off_t	hpt;
	char	*hstr;
	struct	hash *hnext;
	short	hnew;
} bucket[BUCKETS];
d339 1
a339 3
hashit(str, new)
	char *str;
	int new;
d367 2
a368 1
flushsh()
d391 1
a391 1
				ignore(fwrite(hp->hstr, strlen(hp->hstr) + 1, 1, mesgwrit));
d400 2
a401 4
found(new, off, str)
	int new;
	off_t off;
	char *str;
d413 2
a414 2
prstr(cp)
	char *cp;
d418 1
a418 1
	while (c = (*cp++ & 0377))
d429 2
a430 1
xsdotc()
d460 2
a461 2
	ignore(fclose(xdotcf));
	ignore(fclose(strf));
d464 2
a465 2
lastchr(cp)
	char *cp;
d473 2
a474 2
istail(str, of)
	char *str, *of;
d484 1
a484 1
onintr()
d487 1
a487 1
	ignore(signal(SIGINT, SIG_IGN));
d489 3
a491 3
		ignore(unlink(strings));
	ignore(unlink("x.c"));
	ignore(unlink("xs.c"));
@


1.5
log
@safe signal handling, using _exit()
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.4 1996/12/07 08:18:38 bitblt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.4 1996/12/07 08:18:38 bitblt Exp $";
d159 2
a160 2
	register int c;
	register int incomm = 0;
d227 1
a227 1
	register char **cpp;
d229 2
a230 2
	register char *cp = *cpp;
	register int c, ch;
d232 2
a233 2
	register char *dp = dbuf;
	register char *tp;
d295 1
a295 1
	register FILE *mesgread = fopen(strings, "r");
d310 1
a310 1
	register int rmdr;
d313 2
a314 2
	register c;
	register char *buf = obuf;
d345 1
a345 1
	register struct hash *hp, *hp0;
d372 4
a375 4
	register int i;
	register struct hash *hp;
	register FILE *mesgwrit;
	register int old = 0, new = 0;
d418 1
a418 1
	register char *cp;
d420 1
a420 1
	register int c;
d435 2
a436 2
	register FILE *strf = fopen(strings, "r");
	register FILE *xdotcf;
d445 1
a445 1
		register int i, c;
d468 1
a468 1
	register char *cp;
d477 1
a477 1
	register char *str, *of;
d479 1
a479 1
	register int d = strlen(of) - strlen(str);
@


1.4
log
@Improved temporary file handling.
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.3 1996/09/16 02:26:20 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.3 1996/09/16 02:26:20 deraadt Exp $";
d495 1
a495 1
	exit(7);
@


1.3
log
@_PATH_TMP -> _PATH_TMPFILE; avoid /tmp//fooXXXX where possible too
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.2 1996/06/26 05:44:34 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.2 1996/06/26 05:44:34 deraadt Exp $";
d89 1
d119 15
a133 2
	else
		strings = mktemp(strdup(_PATH_TMPFILE));
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: xstr.c,v 1.5 1994/12/24 16:57:59 cgd Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: xstr.c,v 1.5 1994/12/24 16:57:59 cgd Exp $";
d119 1
a119 1
		strings = mktemp(strdup(_PATH_TMP));
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: xstr.c,v 1.5 1994/12/24 16:57:59 cgd Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
