head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.10
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.6
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.24
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.20
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.18
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.16
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.14
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.12
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.05.20.01.25.23;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2013.11.26.13.21.17;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2013.06.20.06.28.15;	author jsg;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.39;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.20.03.50.26;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.12.01.07.27;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.01.04.51.16;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.07.13.57.10;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.04.15.31.17;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.47;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.25.04.58.31;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.08.07.14.42;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.02.04.10.47;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.25.22.00.44;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.10.28.00.36.23;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.34.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Use errc/warnc to simplify code.
Also, in 'ftp', always put the error message last, after the hostname/ipaddr.

ok jsing@@ krw@@ millert@@
@
text
@/*	$OpenBSD: args.c,v 1.17 2013/11/26 13:21:17 deraadt Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.
 * Copyright (c) 1976 Board of Trustees of the University of Illinois.
 * Copyright (c) 1985 Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Argument scanning and profile reading code.  Default parameters are set
 * here as well.
 */

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "indent_globs.h"
#include <err.h>

/* profile types */
#define	PRO_SPECIAL	1	/* special case */
#define	PRO_BOOL	2	/* boolean */
#define	PRO_INT		3	/* integer */
#define	PRO_FONT	4	/* troff font */

/* profile specials for booleans */
#define	ON		1	/* turn it on */
#define	OFF		0	/* turn it off */

/* profile specials for specials */
#define	IGN		1	/* ignore it */
#define	CLI		2	/* case label indent (float) */
#define	STDIN		3	/* use stdin */
#define	KEY		4	/* type (keyword) */

char *option_source = "?";

/*
 * N.B.: because of the way the table here is scanned, options whose names are
 * substrings of other options must occur later; that is, with -lp vs -l, -lp
 * must be first.  Also, while (most) booleans occur more than once, the last
 * default value is the one actually assigned.
 */
struct pro {
    char       *p_name;		/* name, eg -bl, -cli */
    int         p_type;		/* type (int, bool, special) */
    int         p_default;	/* the default value (if int) */
    int         p_special;	/* depends on type */
    int        *p_obj;		/* the associated variable */
}           pro[] = {

	{ "T", PRO_SPECIAL, 0, KEY, 0 },
	{"bacc", PRO_BOOL, false, ON,
	 &blanklines_around_conditional_compilation },
	{"badp", PRO_BOOL, false, ON,
	 &blanklines_after_declarations_at_proctop },
	{"bad", PRO_BOOL, false, ON, &blanklines_after_declarations },
	{"bap", PRO_BOOL, false, ON, &blanklines_after_procs },
	{"bbb", PRO_BOOL, false, ON, &blanklines_before_blockcomments },
	{"bc", PRO_BOOL, true, OFF, &ps.leave_comma },
	{"bl", PRO_BOOL, true, OFF, &btype_2 },
	{"br", PRO_BOOL, true, ON, &btype_2 },
	{"bs", PRO_BOOL, false, ON, &Bill_Shannon },
	{"cdb", PRO_BOOL, true, ON, &comment_delimiter_on_blankline },
	{"cd", PRO_INT, 0, 0, &ps.decl_com_ind },
	{"ce", PRO_BOOL, true, ON, &cuddle_else },
	{"ci", PRO_INT, 0, 0, &continuation_indent },
	{"cli", PRO_SPECIAL, 0, CLI, 0 },
	{"c", PRO_INT, 33, 0, &ps.com_ind },
	{"di", PRO_INT, 16, 0, &ps.decl_indent },
	{"dj", PRO_BOOL, false, ON, &ps.ljust_decl },
	{"d", PRO_INT, 0, 0, &ps.unindent_displace },
	{"eei", PRO_BOOL, false, ON, &extra_expression_indent },
	{"ei", PRO_BOOL, true, ON, &ps.else_if },
	{"fbc", PRO_FONT, 0, 0, (int *) &blkcomf },
	{"fbx", PRO_FONT, 0, 0, (int *) &boxcomf },
	{"fb", PRO_FONT, 0, 0, (int *) &bodyf },
	{"fc1", PRO_BOOL, true, ON, &format_col1_comments },
	{"fc", PRO_FONT, 0, 0, (int *) &scomf },
	{"fk", PRO_FONT, 0, 0, (int *) &keywordf },
	{"fs", PRO_FONT, 0, 0, (int *) &stringf },
	{"ip", PRO_BOOL, true, ON, &ps.indent_parameters },
	{"i", PRO_INT, 8, 0, &ps.ind_size },
	{"lc", PRO_INT, 0, 0, &block_comment_max_col },
	{"lp", PRO_BOOL, true, ON, &lineup_to_parens },
	{"l", PRO_INT, 78, 0, &max_col },
	{"nbacc", PRO_BOOL, false, OFF,
	 &blanklines_around_conditional_compilation },
	{"nbadp", PRO_BOOL, false, OFF,
	 &blanklines_after_declarations_at_proctop },
	{"nbad", PRO_BOOL, false, OFF, &blanklines_after_declarations },
	{"nbap", PRO_BOOL, false, OFF, &blanklines_after_procs },
	{"nbbb", PRO_BOOL, false, OFF, &blanklines_before_blockcomments },
	{"nbc", PRO_BOOL, true, ON, &ps.leave_comma },
	{"nbs", PRO_BOOL, false, OFF, &Bill_Shannon },
	{"ncdb", PRO_BOOL, true, OFF, &comment_delimiter_on_blankline },
	{"nce", PRO_BOOL, true, OFF, &cuddle_else },
	{"ndj", PRO_BOOL, false, OFF, &ps.ljust_decl },
	{"neei", PRO_BOOL, false, OFF, &extra_expression_indent },
	{"nei", PRO_BOOL, true, OFF, &ps.else_if },
	{"nfc1", PRO_BOOL, true, OFF, &format_col1_comments },
	{"nip", PRO_BOOL, true, OFF, &ps.indent_parameters },
	{"nlp", PRO_BOOL, true, OFF, &lineup_to_parens },
	{"npcs", PRO_BOOL, false, OFF, &proc_calls_space },
	{"npro", PRO_SPECIAL, 0, IGN, 0 },
	{"npsl", PRO_BOOL, true, OFF, &procnames_start_line },
	{"nps", PRO_BOOL, false, OFF, &pointer_as_binop },
	{"nsc", PRO_BOOL, true, OFF, &star_comment_cont },
	{"nsob", PRO_BOOL, false, OFF, &swallow_optional_blanklines },
	{"nut", PRO_BOOL, true, OFF, &use_tabs},
	{"nv", PRO_BOOL, false, OFF, &verbose },
	{"pcs", PRO_BOOL, false, ON, &proc_calls_space },
	{"psl", PRO_BOOL, true, ON, &procnames_start_line },
	{"ps", PRO_BOOL, false, ON, &pointer_as_binop },
	{"sc", PRO_BOOL, true, ON, &star_comment_cont },
	{"sob", PRO_BOOL, false, ON, &swallow_optional_blanklines },
	{"st", PRO_SPECIAL, 0, STDIN, 0 },
	{"troff", PRO_BOOL, false, ON, &troff },
	{"ut", PRO_BOOL, true, ON, &use_tabs},
	{"v", PRO_BOOL, false, ON, &verbose },
	/* whew! */
	{ 0, 0, 0, 0, 0 }
};

void scan_profile(FILE *);
void set_option(char *);

/*
 * set_profile reads $HOME/.indent.pro and ./.indent.pro and handles arguments
 * given in these files.
 */
void
set_profile(void)
{
    FILE *f;
    char        fname[BUFSIZ];
    char	*home;
    static char prof[] = ".indent.pro";

    home = getenv("HOME");
    if (home != NULL && *home != '\0') {
	if (snprintf(fname, sizeof fname, "%s/%s", home, prof) >= sizeof fname) {
	    warnc(ENAMETOOLONG, "%s/%s", home, prof);
	    return;
	}
	if ((f = fopen(option_source = fname, "r")) != NULL) {
	    scan_profile(f);
	    (void) fclose(f);
	}
    }
    if ((f = fopen(option_source = prof, "r")) != NULL) {
	scan_profile(f);
	(void) fclose(f);
    }
    option_source = "Command line";
}

void
scan_profile(FILE *f)
{
    int i;
    char *p;
    char        buf[BUFSIZ];

    while (1) {
	for (p = buf;
	    (i = getc(f)) != EOF && (*p = i) > ' ' && p + 1 - buf < BUFSIZ;
	    ++p)
		;
	if (p != buf) {
	    *p = 0;
	    if (verbose)
		printf("profile: %s\n", buf);
	    set_option(buf);
	}
	else if (i == EOF)
	    return;
    }
}

char       *param_start;

int
eqin(char *s1, char *s2)
{
    while (*s1) {
	if (*s1++ != *s2++)
	    return (false);
    }
    param_start = s2;
    return (true);
}

/*
 * Set the defaults.
 */
void
set_defaults(void)
{
    struct pro *p;

    /*
     * Because ps.case_indent is a float, we can't initialize it from the
     * table:
     */
    ps.case_indent = 0.0;	/* -cli0.0 */
    for (p = pro; p->p_name; p++)
	if (p->p_type != PRO_SPECIAL && p->p_type != PRO_FONT)
	    *p->p_obj = p->p_default;
}

void
set_option(char *arg)
{
    struct pro *p;

    arg++;			/* ignore leading "-" */
    for (p = pro; p->p_name; p++)
	if (*p->p_name == *arg && eqin(p->p_name, arg))
	    goto found;
    errx(1, "%s: unknown parameter \"%s\"", option_source, arg - 1);
found:
    switch (p->p_type) {

    case PRO_SPECIAL:
	switch (p->p_special) {

	case IGN:
	    break;

	case CLI:
	    if (*param_start == 0)
		goto need_param;
	    ps.case_indent = atof(param_start);
	    break;

	case STDIN:
	    if (input == 0)
		input = stdin;
	    if (output == 0)
		output = stdout;
	    break;

	case KEY:
	    if (*param_start == 0)
		goto need_param;
	    {
		char *str;
		if ((str = strdup(param_start)) == NULL)
			err(1, NULL);
		addkey(str, 4);
	    }
	    break;

	default:
	    errx(1, "set_option: internal error: p_special %d", p->p_special);
	}
	break;

    case PRO_BOOL:
	if (p->p_special == OFF)
	    *p->p_obj = false;
	else
	    *p->p_obj = true;
	break;

    case PRO_INT:
	if (!isdigit((unsigned char)*param_start)) {
    need_param:
	    errx(1, "%s: ``%s'' requires a parameter", option_source, arg - 1);
	}
	*p->p_obj = atoi(param_start);
	if (*p->p_name == 'i' && *p->p_obj <= 0)
		errx(1, "%s: ``%s must be greater of zero''",
		    option_source, arg - 1);
	break;

    case PRO_FONT:
	parsefont((struct fstate *) p->p_obj, param_start);
	break;

    default:
	errx(1, "set_option: internal error: p_type %d", p->p_type);
    }
}
@


1.17
log
@unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.16 2013/06/20 06:28:15 jsg Exp $	*/
d171 1
a171 1
	    warnx("%s/%s: %s", home, prof, strerror(ENAMETOOLONG));
@


1.16
log
@add ut/nut flags to indent to enable/disable tabs.

based on FreeBSD svn rev 131184.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.15 2009/10/27 23:59:39 deraadt Exp $	*/
d296 1
a296 1
	if (!isdigit(*param_start)) {
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.14 2004/07/20 03:50:26 deraadt Exp $	*/
d138 1
d147 1
@


1.14
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.13 2003/06/12 01:07:27 deraadt Exp $	*/
a33 5

#ifndef lint
/*static char sccsid[] = "@@(#)args.c	8.1 (Berkeley) 6/6/93";*/
static char rcsid[] = "$OpenBSD: args.c,v 1.13 2003/06/12 01:07:27 deraadt Exp $";
#endif /* not lint */
@


1.13
log
@final bits of obvious UCB term 3 removal
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.12 2003/04/01 04:51:16 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: args.c,v 1.12 2003/04/01 04:51:16 deraadt Exp $";
d164 1
a164 1
set_profile()
d190 1
a190 2
scan_profile(f)
    FILE *f;
d215 1
a215 3
eqin(s1, s2)
    char *s1;
    char *s2;
d229 1
a229 1
set_defaults()
d244 1
a244 2
set_option(arg)
    char *arg;
@


1.12
log
@snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.11 2002/10/07 13:57:10 mickey Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: args.c,v 1.11 2002/10/07 13:57:10 mickey Exp $";
@


1.11
log
@misplaced break in the last
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.10 2002/10/04 15:31:17 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: args.c,v 1.10 2002/10/04 15:31:17 mickey Exp $";
d177 1
a177 1
	if (strlen(home) + sizeof(prof) + 1 > sizeof(fname)) {
a180 1
	sprintf(fname, "%s/%s", home, prof);
@


1.10
log
@some formatting from mickey.
From: Maxim Tsyplakov <tm@@openbsd.ru>
indent -i0 somefile.c dumps core in
 indent.c line 276
 ps.ind_level = ps.i_l_follow = col / ps.ind_size;
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.9 2002/02/16 21:27:47 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: args.c,v 1.9 2002/02/16 21:27:47 millert Exp $";
a312 1
	break;
d316 1
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.8 2001/11/19 19:02:14 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: args.c,v 1.8 2001/11/19 19:02:14 mpech Exp $";
d296 1
a296 2
	    errx(1, "set_option: internal error: p_special %d",
	        p->p_special);
d310 1
a310 2
	    errx(1, "%s: ``%s'' requires a parameter",
		    option_source, arg - 1);
d314 3
d323 1
a323 2
	errx(1, "set_option: internal error: p_type %d",
		p->p_type);
@


1.8
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.7 2001/06/25 04:58:31 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: args.c,v 1.7 2001/06/25 04:58:31 pjanzen Exp $";
d160 2
a161 2
void scan_profile __P((FILE *));
void set_option __P((char *));
@


1.7
log
@errx -> err if ENOMEM
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.6 2001/01/08 07:14:42 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: args.c,v 1.6 2001/01/08 07:14:42 pjanzen Exp $";
d255 1
a255 1
    register struct pro *p;
@


1.6
log
@Fix various warnings, merge lite-2, and tidy a bit; also, cast some
pointer arithmetic to int where needed.  Mostly from NetBSD.
Fix some buffer overflows pointed out in PR 1446 by gluk@@ptci.ru,
and check some {m,re}allocs.
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.5 2000/08/02 04:10:47 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: args.c,v 1.5 2000/08/02 04:10:47 millert Exp $";
d290 1
a290 1
			errx(1, "out of memory");
@


1.5
log
@$HOME paranoia: never use getenv("HOME") w/o checking for NULL and non-zero
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.4 1997/07/25 22:00:44 mickey Exp $	*/
d4 3
a7 2
 * Copyright (c) 1980 The Regents of the University of California.
 * Copyright (c) 1976 Board of Trustees of the University of Illinois.
d40 2
a41 2
/*static char sccsid[] = "from: @@(#)args.c	5.10 (Berkeley) 2/26/91";*/
static char rcsid[] = "$OpenBSD: args.c,v 1.4 1997/07/25 22:00:44 mickey Exp $";
d61 1
a61 1
#define PRO_FONT	4	/* troff font */
d160 2
a161 2
void scan_profile();
void set_option();
d170 1
a170 1
    register FILE *f;
d177 1
a177 1
	if (strlen(home) + sizeof(prof) > sizeof(fname)) {
d196 1
a196 1
    register FILE *f;
d198 2
a199 2
    register int i;
    register char *p;
d203 4
a206 1
	for (p = buf; (i = getc(f)) != EOF && (*p = i) > ' '; ++p);
d208 1
a208 1
	    *p++ = 0;
d222 2
a223 2
    register char *s1;
    register char *s2;
d239 1
a239 1
    register struct pro *p;
d253 1
a253 1
    register char *arg;
a255 1
    extern double atof();
d261 1
a261 2
    fprintf(stderr, "indent: %s: unknown parameter \"%s\"\n", option_source, arg - 1);
    exit(1);
d288 3
a290 2
		register char *str = (char *) malloc(strlen(param_start) + 1);
		strcpy(str, param_start);
d296 2
a297 3
	    fprintf(stderr, "\
indent: set_option: internal error: p_special %d\n", p->p_special);
	    exit(1);
d311 1
a311 1
	    fprintf(stderr, "indent: %s: ``%s'' requires a parameter\n",
a312 1
	    exit(1);
d322 1
a322 1
	fprintf(stderr, "indent: set_option: internal error: p_type %d\n",
a323 1
	exit(1);
@


1.4
log
@use err(3), some -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.3 1996/10/28 00:36:23 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: args.c,v 1.3 1996/10/28 00:36:23 millert Exp $";
d171 1
d174 11
a184 8
    if (strlen(getenv("HOME")) + sizeof(prof) > sizeof(fname)) {
	warnx("%s/%s: %s", getenv("HOME"), prof, strerror(ENAMETOOLONG));
	return;
    }
    sprintf(fname, "%s/%s", getenv("HOME"), prof);
    if ((f = fopen(option_source = fname, "r")) != NULL) {
	scan_profile(f);
	(void) fclose(f);
@


1.3
log
@Safe $HOME usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: args.c,v 1.2 1996/06/26 05:34:27 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: args.c,v 1.2 1996/06/26 05:34:27 deraadt Exp $";
d54 1
d88 69
a156 65
    "T", PRO_SPECIAL, 0, KEY, 0,
    "bacc", PRO_BOOL, false, ON, &blanklines_around_conditional_compilation,
    "badp", PRO_BOOL, false, ON, &blanklines_after_declarations_at_proctop,
    "bad", PRO_BOOL, false, ON, &blanklines_after_declarations,
    "bap", PRO_BOOL, false, ON, &blanklines_after_procs,
    "bbb", PRO_BOOL, false, ON, &blanklines_before_blockcomments,
    "bc", PRO_BOOL, true, OFF, &ps.leave_comma,
    "bl", PRO_BOOL, true, OFF, &btype_2,
    "br", PRO_BOOL, true, ON, &btype_2,
    "bs", PRO_BOOL, false, ON, &Bill_Shannon,
    "cdb", PRO_BOOL, true, ON, &comment_delimiter_on_blankline,
    "cd", PRO_INT, 0, 0, &ps.decl_com_ind,
    "ce", PRO_BOOL, true, ON, &cuddle_else,
    "ci", PRO_INT, 0, 0, &continuation_indent,
    "cli", PRO_SPECIAL, 0, CLI, 0,
    "c", PRO_INT, 33, 0, &ps.com_ind,
    "di", PRO_INT, 16, 0, &ps.decl_indent,
    "dj", PRO_BOOL, false, ON, &ps.ljust_decl,
    "d", PRO_INT, 0, 0, &ps.unindent_displace,
    "eei", PRO_BOOL, false, ON, &extra_expression_indent,
    "ei", PRO_BOOL, true, ON, &ps.else_if,
    "fbc", PRO_FONT, 0, 0, (int *) &blkcomf,
    "fbx", PRO_FONT, 0, 0, (int *) &boxcomf,
    "fb", PRO_FONT, 0, 0, (int *) &bodyf,
    "fc1", PRO_BOOL, true, ON, &format_col1_comments,
    "fc", PRO_FONT, 0, 0, (int *) &scomf,
    "fk", PRO_FONT, 0, 0, (int *) &keywordf,
    "fs", PRO_FONT, 0, 0, (int *) &stringf,
    "ip", PRO_BOOL, true, ON, &ps.indent_parameters,
    "i", PRO_INT, 8, 0, &ps.ind_size,
    "lc", PRO_INT, 0, 0, &block_comment_max_col,
    "lp", PRO_BOOL, true, ON, &lineup_to_parens,
    "l", PRO_INT, 78, 0, &max_col,
    "nbacc", PRO_BOOL, false, OFF, &blanklines_around_conditional_compilation,
    "nbadp", PRO_BOOL, false, OFF, &blanklines_after_declarations_at_proctop,
    "nbad", PRO_BOOL, false, OFF, &blanklines_after_declarations,
    "nbap", PRO_BOOL, false, OFF, &blanklines_after_procs,
    "nbbb", PRO_BOOL, false, OFF, &blanklines_before_blockcomments,
    "nbc", PRO_BOOL, true, ON, &ps.leave_comma,
    "nbs", PRO_BOOL, false, OFF, &Bill_Shannon,
    "ncdb", PRO_BOOL, true, OFF, &comment_delimiter_on_blankline,
    "nce", PRO_BOOL, true, OFF, &cuddle_else,
    "ndj", PRO_BOOL, false, OFF, &ps.ljust_decl,
    "neei", PRO_BOOL, false, OFF, &extra_expression_indent,
    "nei", PRO_BOOL, true, OFF, &ps.else_if,
    "nfc1", PRO_BOOL, true, OFF, &format_col1_comments,
    "nip", PRO_BOOL, true, OFF, &ps.indent_parameters,
    "nlp", PRO_BOOL, true, OFF, &lineup_to_parens,
    "npcs", PRO_BOOL, false, OFF, &proc_calls_space,
    "npro", PRO_SPECIAL, 0, IGN, 0,
    "npsl", PRO_BOOL, true, OFF, &procnames_start_line,
    "nps", PRO_BOOL, false, OFF, &pointer_as_binop,
    "nsc", PRO_BOOL, true, OFF, &star_comment_cont,
    "nsob", PRO_BOOL, false, OFF, &swallow_optional_blanklines,
    "nv", PRO_BOOL, false, OFF, &verbose,
    "pcs", PRO_BOOL, false, ON, &proc_calls_space,
    "psl", PRO_BOOL, true, ON, &procnames_start_line,
    "ps", PRO_BOOL, false, ON, &pointer_as_binop,
    "sc", PRO_BOOL, true, ON, &star_comment_cont,
    "sob", PRO_BOOL, false, ON, &swallow_optional_blanklines,
    "st", PRO_SPECIAL, 0, STDIN, 0,
    "troff", PRO_BOOL, false, ON, &troff,
    "v", PRO_BOOL, false, ON, &verbose,
    /* whew! */
    0, 0, 0, 0, 0
d159 3
d166 1
d189 1
d212 1
d228 1
d243 1
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: args.c,v 1.1.1.1 1995/10/18 08:45:24 deraadt Exp $";
d52 1
d164 4
@


1.1
log
@Initial revision
@
text
@d1 2
d40 1
a40 1
static char rcsid[] = "$Id: args.c,v 1.2 1993/08/01 18:14:36 mycroft Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
