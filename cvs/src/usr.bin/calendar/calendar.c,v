head	1.35;
access;
symbols
	OPENBSD_6_2_BASE:1.35
	OPENBSD_6_1:1.35.0.8
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.31.0.4
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.28.0.14
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.12
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.28.0.8
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.28.0.6
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.4
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.2
	OPENBSD_5_0:1.26.0.8
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.6
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.26.0.4
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.25.0.18
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.14
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.12
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.10
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.8
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.25.0.6
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.4
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.2
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.24.0.2
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.23.0.2
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.22.0.6
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.22.0.4
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	OPENBSD_3_3:1.19.0.2
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.18.0.2
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_8:1.13.0.2
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.12.0.6
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.12.0.4
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.12.0.2
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.10.0.6
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.35
date	2015.12.07.18.46.35;	author espie;	state Exp;
branches;
next	1.34;
commitid	IuVQXdcoW2Zw8wMf;

1.34
date	2015.11.21.12.50.58;	author semarie;	state Exp;
branches;
next	1.33;
commitid	JDPRzsctdoiAjmGw;

1.33
date	2015.11.16.17.49.35;	author pascal;	state Exp;
branches;
next	1.32;
commitid	6T27WTVAAi4I9ONo;

1.32
date	2015.10.23.11.43.16;	author zhuk;	state Exp;
branches;
next	1.31;
commitid	8WPctGg8P39mEwQm;

1.31
date	2015.04.18.18.28.37;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	6b2lLILbgCR1fvia;

1.30
date	2015.03.15.00.41.28;	author millert;	state Exp;
branches;
next	1.29;
commitid	IbVxlqGw2UipKdDr;

1.29
date	2015.02.08.23.40.34;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	yGZX28AeTChVE8eY;

1.28
date	2012.01.31.08.29.25;	author otto;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.12.21.23.00;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2009.10.27.23.59.36;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.16.16.45.11;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2005.08.09.12.32.58;	author mickey;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.10.15.31.01;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.09.08.39.53;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.10.22.20.45;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.03.02.56.06;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.12.08.16.50.07;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.23.03.07.21;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.16.21.27.44;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.26.20.38.55;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.03.15.53.00;	author pjanzen;	state Exp;
branches;
next	1.14;

1.14
date	2000.11.21.14.01.38;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.06.30.16.00.11;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	98.12.13.07.31.07;	author pjanzen;	state Exp;
branches
	1.12.6.1;
next	1.11;

1.11
date	98.11.04.11.32.02;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	97.09.15.07.12.03;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.09.08.23.49.57;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.08.26.23.37.21;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.06.20.08.41.53;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.15.23.42.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.12.05.06.04.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.12.04.09.06.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.09.16.16.36.04;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.31.45;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.57;	author deraadt;	state Exp;
branches;
next	;

1.12.6.1
date	2000.10.06.21.16.11;	author jason;	state Exp;
branches;
next	;


desc
@@


1.35
log
@tweak the code a bit and add a -w option to display day of week.
okay jmc@@, millert@@
@
text
@/*	$OpenBSD: calendar.c,v 1.34 2015/11/21 12:50:58 semarie Exp $	*/

/*
 * Copyright (c) 1989, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <err.h>
#include <errno.h>
#include <locale.h>
#include <login_cap.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <time.h>
#include <unistd.h>

#include "pathnames.h"
#include "calendar.h"

char *calendarFile = "calendar";  /* default calendar file */
char *calendarHome = ".calendar"; /* HOME */
char *calendarNoMail = "nomail";  /* don't sent mail if this file exists */

struct passwd *pw;
int doall = 0;
int daynames = 0;
time_t f_time = 0;
int bodun_always = 0;

int f_dayAfter = 0; /* days after current date */
int f_dayBefore = 0; /* days before current date */
int f_SetdayAfter = 0; /* calendar invoked with -A */

struct specialev spev[NUMEV];

void childsig(int);

int
main(int argc, char *argv[])
{
	int ch;
	const char *errstr;
	char *caldir;

	(void)setlocale(LC_ALL, "");

	while ((ch = getopt(argc, argv, "abwf:t:A:B:-")) != -1)
		switch (ch) {
		case '-':		/* backward contemptible */
		case 'a':
			if (getuid())
				errx(1, "%s", strerror(EPERM));
			doall = 1;
			break;

		case 'b':
			bodun_always = 1;
			break;

		case 'f': /* other calendar file */
		        calendarFile = optarg;
			break;

		case 't': /* other date, undocumented, for tests */
			if ((f_time = Mktime(optarg)) <= 0)
				errx(1, "specified date is outside allowed range");
			break;

		case 'A': /* days after current date */
			f_dayAfter = strtonum(optarg, 0, INT_MAX, &errstr);
			if (errstr)
				errx(1, "-A %s: %s", optarg, errstr);
			f_SetdayAfter = 1;
			break;

		case 'B': /* days before current date */
			f_dayBefore = strtonum(optarg, 0, INT_MAX, &errstr);
			if (errstr)
				errx(1, "-B %s: %s", optarg, errstr);
			break;

		case 'w':
			daynames = 1;
			break;

		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc)
		usage();

	if (doall) {
		if (pledge("stdio rpath tmppath fattr getpw id proc exec", NULL)
		    == -1)
			err(1, "pledge");
	} else {
		if (pledge("stdio rpath proc exec", NULL) == -1)
			err(1, "pledge");
	}

	/* use current time */
	if (f_time <= 0)
	    (void)time(&f_time);

	if (f_dayBefore) {
		/* Move back in time and only look forwards */
		f_dayAfter += f_dayBefore;
		f_time -= SECSPERDAY * f_dayBefore;
		f_dayBefore = 0;
	}
	settime(&f_time);

	if (doall) {
		pid_t kid, deadkid;
		int kidstat, kidreaped, runningkids;
		int acstat;
		struct stat sbuf;
		time_t t;
		unsigned int sleeptime;

		signal(SIGCHLD, childsig);
		runningkids = 0;
		t = time(NULL);
		while ((pw = getpwent()) != NULL) {
			acstat = 0;
			/* Avoid unnecessary forks.  The calendar file is only
			 * opened as the user later; if it can't be opened,
			 * it's no big deal.  Also, get to correct directory.
			 * Note that in an NFS environment root may get EACCES
			 * on a chdir(), in which case we have to fork.  As long as
			 * we can chdir() we can stat(), unless the user is
			 * modifying permissions while this is running.
			 */
			if (chdir(pw->pw_dir)) {
				if (errno == EACCES)
					acstat = 1;
				else
					continue;
			}
			if (stat(calendarFile, &sbuf) != 0) {
				if (chdir(calendarHome)) {
					if (errno == EACCES)
						acstat = 1;
					else
						continue;
				}
				if (stat(calendarNoMail, &sbuf) == 0 ||
				    stat(calendarFile, &sbuf) != 0)
					continue;
			}
			sleeptime = USERTIMEOUT;
			switch ((kid = fork())) {
			case -1:	/* error */
				warn("fork");
				continue;
			case 0:	/* child */
				(void)setpgid(getpid(), getpid());
				(void)setlocale(LC_ALL, "");
				if (setusercontext(NULL, pw, pw->pw_uid,
				    LOGIN_SETALL ^ LOGIN_SETLOGIN))
					err(1, "unable to set user context (uid %u)",
					    pw->pw_uid);
				if (acstat) {
					if (chdir(pw->pw_dir) ||
					    stat(calendarFile, &sbuf) != 0 ||
					    chdir(calendarHome) ||
					    stat(calendarNoMail, &sbuf) == 0 ||
					    stat(calendarFile, &sbuf) != 0)
						exit(0);
				}
				cal();
				exit(0);
			}
			/* parent: wait a reasonable time, then kill child if
			 * necessary.
			 */
			runningkids++;
			kidreaped = 0;
			do {
				sleeptime = sleep(sleeptime);
				/* Note that there is the possibility, if the sleep
				 * stops early due to some other signal, of the child
				 * terminating and not getting detected during the next
				 * sleep.  In that unlikely worst case, we just sleep
				 * too long for that user.
				 */
				for (;;) {
					deadkid = waitpid(-1, &kidstat, WNOHANG);
					if (deadkid <= 0)
						break;
					runningkids--;
					if (deadkid == kid) {
						kidreaped = 1;
						sleeptime = 0;
					}
				}
			} while (sleeptime);

			if (!kidreaped) {
				/* It doesn't _really_ matter if the kill fails, e.g.
				 * if there's only a zombie now.
				 */
				if (getpgid(kid) != getpgrp())
					(void)killpg(getpgid(kid), SIGTERM);
				else
					(void)kill(kid, SIGTERM);
				warnx("uid %u did not finish in time", pw->pw_uid);
			}
			if (time(NULL) - t >= SECSPERDAY)
				errx(2, "'calendar -a' took more than a day; "
				    "stopped at uid %u",
				    pw->pw_uid);
		}
		for (;;) {
			deadkid = waitpid(-1, &kidstat, WNOHANG);
			if (deadkid <= 0)
				break;
			runningkids--;
		}
		if (runningkids)
			warnx("%d child processes still running when "
			    "'calendar -a' finished", runningkids);
	} else if ((caldir = getenv("CALENDAR_DIR")) != NULL) {
		if(!chdir(caldir))
			cal();
	} else
		cal();

	exit(0);
}


void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: calendar [-abw] [-A num] [-B num] [-f calendarfile] "
	    "[-t [[[cc]yy]mm]dd]\n");
	exit(1);
}


void
childsig(int signo)
{
}
@


1.34
log
@add "getpw" promise to calendar(1) (in doall case only)

used with -a in order to iterate on all users using getpwent(3).

ok matthieu@@ pascal@@
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.33 2015/11/16 17:49:35 pascal Exp $	*/
d57 1
d78 1
a78 1
	while ((ch = getopt(argc, argv, "abf:t:A:B:-")) != -1)
d113 4
d271 1
a271 1
	    "usage: calendar [-ab] [-A num] [-B num] [-f calendarfile] "
@


1.33
log
@pledge calendar:

* "stdio rpath proc exec" in normal mode (execs cpp)
* "stdio rpath tmppath fattr id proc exec" in -a mode, which is typically
  run as root (hint hint)

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.32 2015/10/23 11:43:16 zhuk Exp $	*/
d122 1
a122 1
		if (pledge("stdio rpath tmppath fattr id proc exec", NULL)
@


1.32
log
@A bit of whitespace cleanup, to make further diffs smaller.
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.31 2015/04/18 18:28:37 deraadt Exp $	*/
d120 9
@


1.31
log
@Convert many atoi() calls to strtonum(), adding range checks and failure
handling along the way.
Reviews by Brendan MacDonell, Jeremy Devenport, florian, doug, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.30 2015/03/15 00:41:28 millert Exp $	*/
d186 1
a186 1
					    chdir(calendarHome) || 
@


1.30
log
@tzfile.h is an internal header that should never have been installed.
What's worse, the tzfile.h that gets installed is over 20 years old
and doesn't match the real tzfile.h in libc/time.  This makes the
tree safe for /usr/include/tzfile.h removal.  The TM_YEAR_BASE
define has been moved to time.h temporarily until its usage is
replaced by 1900 in the tree.  Actual removal of tzfile.h is pending
a ports build.  Based on a diff from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.29 2015/02/08 23:40:34 deraadt Exp $	*/
d44 1
d72 1
d100 3
a102 1
			f_dayAfter = atoi(optarg);
d107 3
a109 1
			f_dayBefore = atoi(optarg);
@


1.29
log
@in getopt() blocks, stop incrementing flag variable which are supposed
to just be 0/1
ok miod florian
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.28 2012/01/31 08:29:25 otto Exp $	*/
a44 1
#include <tzfile.h>
@


1.28
log
@also kill descendants on child timeout; from pjantzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.27 2011/09/12 21:23:00 jmc Exp $	*/
d86 1
a86 1
			bodun_always++;
@


1.27
log
@- (-t) use macros instead of punctuation, to avoid marking up the
whole argument as an Ar block
- (-t) remove a superfluous set of [] around "mm"

ok sobrado millert
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.26 2009/10/27 23:59:36 deraadt Exp $	*/
d172 1
d218 4
a221 1
				(void)kill(kid, SIGTERM);
@


1.26
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.25 2005/11/16 16:45:11 deraadt Exp $	*/
d249 1
a249 1
	    "[-t [[[cc]yy][mm]]dd]\n");
@


1.25
log
@knf & cleanup; mickey ok
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.24 2005/08/09 12:32:58 mickey Exp $	*/
a30 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)calendar.c  8.3 (Berkeley) 3/25/94";
#else
static const char rcsid[] = "$OpenBSD: calendar.c,v 1.24 2005/08/09 12:32:58 mickey Exp $";
#endif
#endif /* not lint */
@


1.24
log
@handle -A0 correctly; from koen@@egelink.nl
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.23 2004/12/10 15:31:01 mickey Exp $	*/
d42 1
a42 1
static const char rcsid[] = "$OpenBSD: calendar.c,v 1.23 2004/12/10 15:31:01 mickey Exp $";
d235 2
a236 1
				errx(2, "'calendar -a' took more than a day; stopped at uid %u",
d246 3
a248 4
			warnx(
"%d child processes still running when 'calendar -a' finished", runningkids);
	}
	else if ((caldir = getenv("CALENDAR_DIR")) != NULL) {
@


1.23
log
@cleanup extra includes and -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.22 2003/09/09 08:39:53 jmc Exp $	*/
d42 1
a42 1
static const char rcsid[] = "$OpenBSD: calendar.c,v 1.22 2003/09/09 08:39:53 jmc Exp $";
d76 1
d114 1
@


1.22
log
@sort the options in SYNOPSIS and sync usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.21 2003/06/10 22:20:45 deraadt Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.21 2003/06/10 22:20:45 deraadt Exp $";
@


1.21
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.20 2003/06/03 02:56:06 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.20 2003/06/03 02:56:06 millert Exp $";
d260 2
a261 2
	    "usage: calendar [-a] [-A num] [-b] [-B num] [-t [[[cc]yy][mm]]dd] "
	    "[-f calendarfile]\n");
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.19 2002/12/08 16:50:07 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.19 2002/12/08 16:50:07 millert Exp $";
d82 1
a82 3
main(argc, argv)
	int argc;
	char *argv[];
d257 1
a257 1
usage()
d267 1
a267 2
childsig(sig)
	int sig;
@


1.19
log
@GNU semantics say that if optstring begins with '-' then
each non-option shall be treated as arguments to option '\1'.

BSD getopt match '-' in optstring with a '-' on the command line.
This is used to support deprecated options like "su -" that would
otherwise prevent the use of getopt().

Resolving this simply requires that the leading '-' be moved somewhere
else (I moved it to the end of optstring) since position within
optstring is not meaningful.
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.18 2002/06/23 03:07:21 deraadt Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.18 2002/06/23 03:07:21 deraadt Exp $";
@


1.18
log
@uid_t and gid_t are unsigned
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.17 2002/02/16 21:27:44 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.17 2002/02/16 21:27:44 millert Exp $";
d95 1
a95 1
	while ((ch = getopt(argc, argv, "-abf:t:A:B:")) != -1)
@


1.17
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.16 2001/09/26 20:38:55 mickey Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.16 2001/09/26 20:38:55 mickey Exp $";
d193 2
a194 2
					err(1, "unable to set user context (uid %d)",
					    (int)pw->pw_uid);
d236 1
a236 1
				warnx("uid %d did not finish in time", (int)pw->pw_uid);
d239 2
a240 2
				errx(2, "'calendar -a' took more than a day; stopped at uid %d",
				    (int)pw->pw_uid);
@


1.16
log
@special procesing for cyrillic calendars (.ru, .ua, .by for now).
does not affect any existing behaviour for everything else.
old idea expressed by form@@; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.15 2001/09/03 15:53:00 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.15 2001/09/03 15:53:00 pjanzen Exp $";
d83 1
a83 1
void childsig __P((int));
@


1.15
log
@- Prevent users from hanging or killing 'calendar -a', at the cost of
one additional fork() per user who has a calendar file.  Side effect is
that root runs much less code.
- Use login caps so we don't, for example, give a user more processes than
he's allowed.
- tmpfile() rather than mkstemp() means never leaving junk behind.
- Don't let 'calendar -a' take more than a day.

Reviewed by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.14 2000/11/21 14:01:38 aaron Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.14 2000/11/21 14:01:38 aaron Exp $";
d76 1
d95 1
a95 1
	while ((ch = getopt(argc, argv, "-af:t:A:B:")) != -1)
d104 4
d266 1
a266 1
	    "usage: calendar [-a] [-A num] [-B num] [-t [[[cc]yy][mm]]dd] "
@


1.14
log
@Sync usage() output with man page; mpech@@prosoft.org.lv
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.13 2000/06/30 16:00:11 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.13 2000/06/30 16:00:11 millert Exp $";
d50 3
d56 1
d58 1
d69 4
d82 2
d89 1
a89 1
	int ch, i;
d142 10
d153 45
a197 5
			(void)setlocale(LC_ALL, "");
			(void)setegid(pw->pw_gid);
			(void)initgroups(pw->pw_name, pw->pw_gid);
			(void)seteuid(pw->pw_uid);
			if (!chdir(pw->pw_dir)) {
d199 33
a231 4
				/* Keep user settings from propogating */
				for (i = 0; i < NUMEV; i++)
					if (spev[i].uname != NULL)
						free(spev[i].uname);
d233 9
a241 1
			(void)seteuid(0);
d243 3
d264 7
@


1.13
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.12 1998/12/13 07:31:07 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.12 1998/12/13 07:31:07 pjanzen Exp $";
d160 2
a161 1
	    "usage: calendar [-a] [-A days] [-B days] [-f calendarfile] [-t [[[yy]yy][mm]]dd]\n");
@


1.12
log
@Show periodic events the correct number of times.
Calculate special events (Easter) correctly regardless of which year
they occur in (thus fixing user/562).
Keep locales and special event names from propogating from one user
to the next during "calendar -a".
Set up a framework to handle special events other than Easter (for instance,
Jewish events, eventually).
Various other fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.11 1998/11/04 11:32:02 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.11 1998/11/04 11:32:02 pjanzen Exp $";
d88 1
a88 1
				errx(1, strerror(EPERM));
@


1.12.6.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.13 2000/06/30 16:00:11 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.13 2000/06/30 16:00:11 millert Exp $";
d88 1
a88 1
				errx(1, "%s", strerror(EPERM));
@


1.11
log
@Various fixes, including closing user/630.
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.10 1997/09/15 07:12:03 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.10 1997/09/15 07:12:03 millert Exp $";
d58 1
d71 2
d78 1
a78 1
	int ch;
d81 1
a81 1
	(void) setlocale(LC_ALL, "");
d97 1
a97 1
			if ((f_time = Mktime (optarg)) <= 0)
d122 7
a128 1
	settime(f_time);
d132 1
d136 1
a136 1
			if (!chdir(pw->pw_dir))
d138 5
@


1.10
log
@Don't do a setlogin() as it affects everything in the session, not
just that process.
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.9 1997/09/08 23:49:57 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.9 1997/09/08 23:49:57 millert Exp $";
d94 2
a95 1
			f_time = Mktime (optarg);
@


1.9
log
@call setlogin(2)
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.8 1997/08/26 23:37:21 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.8 1997/08/26 23:37:21 millert Exp $";
d120 1
a120 1
	if (doall)
a123 1
			(void)setlogin(pw->pw_name);
d129 1
@


1.8
log
@Make -t option use a date string like date(1).
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.7 1997/06/20 08:41:53 deraadt Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.7 1997/06/20 08:41:53 deraadt Exp $";
d124 1
@


1.7
log
@sigh, who wrote this
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.6 1997/01/15 23:42:16 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.6 1997/01/15 23:42:16 millert Exp $";
d143 1
a143 1
		      "usage: calendar [-a] [-A days] [-B days] [-f calendarfile]\n");
@


1.6
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.5 1996/12/05 06:04:38 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.5 1996/12/05 06:04:38 millert Exp $";
d80 1
a80 1
	while ((ch = getopt(argc, argv, "?-af:t:A:B:")) != -1)
a88 1

a104 1
		case '?':
@


1.5
log
@FreeBSD calendar(1) + OpenBSD changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: $";
d80 1
a80 1
	while ((ch = getopt(argc, argv, "?-af:t:A:B:")) != EOF)
@


1.4
log
@security holes: seek and ye shall find
@
text
@d1 1
a1 2
/*	$OpenBSD: calendar.c,v 1.3 1996/09/16 16:36:04 millert Exp $	*/
/*	$NetBSD: calendar.c,v 1.8 1995/09/02 05:38:38 jtc Exp $	*/
d37 1
a37 1
static char copyright[] =
d44 3
a46 1
static char sccsid[] = "@@(#)calendar.c	8.4 (Berkeley) 1/7/95";
a47 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.3 1996/09/16 16:36:04 millert Exp $";
a49 7
#include <sys/param.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <sys/uio.h>
#include <sys/wait.h>

#include <ctype.h>
d52 1
a52 1
#include <fcntl.h>
d57 1
a57 1
#include <tzfile.h>
d61 1
d64 2
a65 1
int doall;
d67 2
a68 9
void	 cal __P((void));
void	 closecal __P((FILE *));
int	 getday __P((char *));
int	 getfield __P((char *, char **, int *));
int	 getmonth __P((char *));
int	 isnow __P((char *));
FILE	*opencal __P((void));
void	 settime __P((void));
void	 usage __P((void));
a74 1
	extern int optind;
d78 3
a80 1
	while ((ch = getopt(argc, argv, "-a")) != EOF)
d84 2
a85 4
			if (getuid()) {
				errno = EPERM;
				err(1, NULL);
			}
d88 18
d116 6
a121 1
	settime();
d132 2
a133 2
			if(!chdir(caldir))
				cal();
d136 1
a139 293
void
cal()
{
	register int printing;
	register char *p;
	FILE *fp;
	int ch;
	char buf[2048 + 1];

	if ((fp = opencal()) == NULL)
		return;
	for (printing = 0; fgets(buf, sizeof(buf), stdin) != NULL;) {
		if ((p = strchr(buf, '\n')) != NULL)
			*p = '\0';
		else
			while ((ch = getchar()) != '\n' && ch != EOF)
				;
		if (buf[0] == '\0')
			continue;
		if (buf[0] != '\t')
			printing = isnow(buf) ? 1 : 0;
		if (printing)
			(void)fprintf(fp, "%s\n", buf);
	}
	closecal(fp);
}

struct iovec header[] = {
	"From: ", 6,
	NULL, 0,
	" (Reminder Service)\nTo: ", 24,
	NULL, 0,
	"\nSubject: ", 10,
	NULL, 0,
	"'s Calendar\nPrecedence: bulk\n\n",  30,
};

/* 1-based month, 0-based days, cumulative */
int daytab[][14] = {
	0, -1, 30, 58, 89, 119, 150, 180, 211, 242, 272, 303, 333, 364,
	0, -1, 30, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365,
};
struct tm *tp;
int *cumdays, offset, yrdays;
char dayname[10];

void
settime()
{
	time_t now;

	(void)time(&now);
	tp = localtime(&now);
	if (isleap(tp->tm_year + 1900)) {
		yrdays = DAYSPERLYEAR;
		cumdays = daytab[1];
	} else {
		yrdays = DAYSPERNYEAR;
		cumdays = daytab[0];
	}
	/* Friday displays Monday's events */
	offset = tp->tm_wday == 5 ? 3 : 1;
	header[5].iov_base = dayname;
	header[5].iov_len = strftime(dayname, sizeof(dayname), "%A", tp);
}

/*
 * Possible date formats include any combination of:
 *	3-charmonth			(January, Jan, Jan)
 *	3-charweekday			(Friday, Monday, mon.)
 *	numeric month or day		(1, 2, 04)
 *
 * Any character may separate them, or they may not be separated.  Any line,
 * following a line that is matched, that starts with "whitespace", is shown
 * along with the matched line.
 */
int
isnow(endp)
	char *endp;
{
	int day, flags, month, v1, v2;

#define	F_ISMONTH	0x01
#define	F_ISDAY		0x02
	flags = 0;
	/* didn't recognize anything, skip it */
	if (!(v1 = getfield(endp, &endp, &flags)))
		return (0);
	if (flags & F_ISDAY || v1 > 12) {
		/* found a day */
		day = v1;
		month = tp->tm_mon + 1;
	} else if (flags & F_ISMONTH) {
		month = v1;
		/* if no recognizable day, assume the first */
		if (!(day = getfield(endp, &endp, &flags)))
			day = 1;
	} else {
		v2 = getfield(endp, &endp, &flags);
		if (flags & F_ISMONTH) {
			day = v1;
			month = v2;
		} else {
			/* F_ISDAY set, v2 > 12, or no way to tell */
			month = v1;
			/* if no recognizable day, assume the first */
			day = v2 ? v2 : 1;
		}
	}
	if (flags & F_ISDAY)
		day = tp->tm_mday + (((day - 1) - tp->tm_wday + 7) % 7);
	day = cumdays[month] + day;

	/* if today or today + offset days */
	if (day >= tp->tm_yday && day <= tp->tm_yday + offset)
		return (1);
	/* if number of days left in this year + days to event in next year */
	if (yrdays - tp->tm_yday + day <= offset)
		return (1);
	return (0);
}

int
getfield(p, endp, flags)
	char *p, **endp;
	int *flags;
{
	int val;
	char *start, savech;

	for (; !isdigit(*p) && !isalpha(*p) && *p != '*'; ++p)
		;
	if (*p == '*') {			/* `*' is current month */
		*flags |= F_ISMONTH;
		*endp = p+1;
		return (tp->tm_mon + 1);
	}
	if (isdigit(*p)) {
		val = strtol(p, &p, 10);	/* if 0, it's failure */
		for (; !isdigit(*p) && !isalpha(*p) && *p != '*'; ++p)
			;
		*endp = p;
		return (val);
	}
	for (start = p; isalpha(*++p);)
		;
	savech = *p;
	*p = '\0';
	if ((val = getmonth(start)) != 0)
		*flags |= F_ISMONTH;
	else if ((val = getday(start)) != 0)
		*flags |= F_ISDAY;
	else {
		*p = savech;
		return (0);
	}
	for (*p = savech; !isdigit(*p) && !isalpha(*p) && *p != '*'; ++p)
		;
	*endp = p;
	return (val);
}

char path[MAXPATHLEN];

FILE *
opencal()
{
	int fd, pdes[2];

	/* open up calendar file as stdin */
	if (!freopen("calendar", "r", stdin)) {
		if (doall)
			return (NULL);
		errx(1, "no calendar file.");
	}
	if (pipe(pdes) < 0) 
		return (NULL);
	switch (vfork()) {
	case -1:			/* error */
		(void)close(pdes[0]);
		(void)close(pdes[1]);
		return (NULL);
	case 0:
		/* child -- stdin already setup, set stdout to pipe input */
		if (pdes[1] != STDOUT_FILENO) {
			(void)dup2(pdes[1], STDOUT_FILENO);
			(void)close(pdes[1]);
		}
		(void)close(pdes[0]);
		(void)setuid(geteuid());
		(void)setgid(getegid());
		execl(_PATH_CPP, "cpp", "-P", "-I.", _PATH_INCLUDE, NULL);
		warn("execl: %s", _PATH_CPP);
		_exit(1);
	}
	/* parent -- set stdin to pipe output */
	(void)dup2(pdes[0], STDIN_FILENO);
	(void)close(pdes[0]);
	(void)close(pdes[1]);

	/* not reading all calendar files, just set output to stdout */
	if (!doall)
		return (stdout);

	/* set output to a temporary file, so if no output don't send mail */
	(void)snprintf(path, sizeof(path), "%s_calXXXXXX", _PATH_TMP);
	if ((fd = mkstemp(path)) < 0)
		return (NULL);
	return (fdopen(fd, "w+"));
}

void
closecal(fp)
	FILE *fp;
{
	struct stat sbuf;
	int nread, pdes[2], status;
	char buf[1024];

	if (!doall)
		return;

	(void)rewind(fp);
	if (fstat(fileno(fp), &sbuf) || !sbuf.st_size)
		goto done;
	if (pipe(pdes) < 0) 
		goto done;
	switch (vfork()) {
	case -1:			/* error */
		(void)close(pdes[0]);
		(void)close(pdes[1]);
		goto done;
	case 0:		
		/* child -- set stdin to pipe output */
		if (pdes[0] != STDIN_FILENO) {
			(void)dup2(pdes[0], STDIN_FILENO);
			(void)close(pdes[0]);
		}
		(void)close(pdes[1]);
		(void)setuid(geteuid());
		(void)setgid(getegid());
		execl(_PATH_SENDMAIL, "sendmail", "-i", "-t", "-F",
		    "\"Reminder Service\"", "-f", "root", NULL);
		warn("execl: %s", _PATH_SENDMAIL);
		_exit(1);
	}
	/* parent -- write to pipe input */
	(void)close(pdes[0]);

	header[1].iov_base = header[3].iov_base = pw->pw_name;
	header[1].iov_len = header[3].iov_len = strlen(pw->pw_name);
	writev(pdes[1], header, 7);
	while ((nread = read(fileno(fp), buf, sizeof(buf))) > 0)
		(void)write(pdes[1], buf, nread);
	(void)close(pdes[1]);
done:	(void)fclose(fp);
	(void)unlink(path);
	while (wait(&status) >= 0)
		;
}

static char *months[] = {
	"jan", "feb", "mar", "apr", "may", "jun",
	"jul", "aug", "sep", "oct", "nov", "dec", NULL,
};

int
getmonth(s)
	register char *s;
{
	register char **p;

	for (p = months; *p; ++p)
		if (!strncasecmp(s, *p, 3))
			return ((p - months) + 1);
	return (0);
}

static char *days[] = {
	"sun", "mon", "tue", "wed", "thu", "fri", "sat", NULL,
};

int
getday(s)
	register char *s;
{
	register char **p;

	for (p = days; *p; ++p)
		if (!strncasecmp(s, *p, 3))
			return ((p - days) + 1);
	return (0);
}
d144 2
a145 1
	(void)fprintf(stderr, "usage: calendar [-a]\n");
@


1.3
log
@/tmp// -> /tmp/
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.2 1996/06/26 05:31:45 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.2 1996/06/26 05:31:45 deraadt Exp $";
d115 1
d144 2
a145 1
			while ((ch = getchar()) != '\n' && ch != EOF);
d259 2
a260 1
	for (; !isdigit(*p) && !isalpha(*p) && *p != '*'; ++p);
d268 2
a269 1
		for (; !isdigit(*p) && !isalpha(*p) && *p != '*'; ++p);
d273 2
a274 1
	for (start = p; isalpha(*++p););
d285 2
a286 1
	for (*p = savech; !isdigit(*p) && !isalpha(*p) && *p != '*'; ++p);
d291 1
a291 1
char path[MAXPATHLEN + 1];
d318 2
d368 2
d386 2
a387 1
	while (wait(&status) >= 0);
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: calendar.c,v 1.8 1995/09/02 05:38:38 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: calendar.c,v 1.8 1995/09/02 05:38:38 jtc Exp $";
d326 1
a326 1
	(void)snprintf(path, sizeof(path), "%s/_calXXXXXX", _PATH_TMP);
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: calendar.c,v 1.8 1995/09/02 05:38:38 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
