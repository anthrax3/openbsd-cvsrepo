head	1.41;
access;
symbols
	OPENBSD_5_5:1.40.0.20
	OPENBSD_5_5_BASE:1.40
	OPENBSD_5_4:1.40.0.16
	OPENBSD_5_4_BASE:1.40
	OPENBSD_5_3:1.40.0.14
	OPENBSD_5_3_BASE:1.40
	OPENBSD_5_2:1.40.0.12
	OPENBSD_5_2_BASE:1.40
	OPENBSD_5_1_BASE:1.40
	OPENBSD_5_1:1.40.0.10
	OPENBSD_5_0:1.40.0.8
	OPENBSD_5_0_BASE:1.40
	OPENBSD_4_9:1.40.0.6
	OPENBSD_4_9_BASE:1.40
	OPENBSD_4_8:1.40.0.4
	OPENBSD_4_8_BASE:1.40
	OPENBSD_4_7:1.40.0.2
	OPENBSD_4_7_BASE:1.40
	OPENBSD_4_6:1.39.0.12
	OPENBSD_4_6_BASE:1.39
	OPENBSD_4_5:1.39.0.8
	OPENBSD_4_5_BASE:1.39
	OPENBSD_4_4:1.39.0.6
	OPENBSD_4_4_BASE:1.39
	OPENBSD_4_3:1.39.0.4
	OPENBSD_4_3_BASE:1.39
	OPENBSD_4_2:1.39.0.2
	OPENBSD_4_2_BASE:1.39
	OPENBSD_4_1:1.38.0.8
	OPENBSD_4_1_BASE:1.38
	OPENBSD_4_0:1.38.0.6
	OPENBSD_4_0_BASE:1.38
	OPENBSD_3_9:1.38.0.4
	OPENBSD_3_9_BASE:1.38
	OPENBSD_3_8:1.38.0.2
	OPENBSD_3_8_BASE:1.38
	OPENBSD_3_7:1.36.0.6
	OPENBSD_3_7_BASE:1.36
	OPENBSD_3_6:1.36.0.4
	OPENBSD_3_6_BASE:1.36
	OPENBSD_3_5:1.36.0.2
	OPENBSD_3_5_BASE:1.36
	OPENBSD_3_4:1.34.0.2
	OPENBSD_3_4_BASE:1.34
	OPENBSD_3_3:1.30.0.4
	OPENBSD_3_3_BASE:1.30
	OPENBSD_3_2:1.30.0.2
	OPENBSD_3_2_BASE:1.30
	OPENBSD_3_1:1.25.0.2
	OPENBSD_3_1_BASE:1.25
	OPENBSD_3_0:1.21.0.2
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_9:1.19.0.6
	OPENBSD_2_8:1.19.0.4
	OPENBSD_2_8_BASE:1.19
	OPENBSD_2_7:1.19.0.2
	OPENBSD_2_7_BASE:1.19
	OPENBSD_2_6:1.17.0.8
	OPENBSD_2_6_BASE:1.17
	OPENBSD_2_5:1.17.0.6
	OPENBSD_2_5_BASE:1.17
	OPENBSD_2_4:1.17.0.4
	OPENBSD_2_4_BASE:1.17
	OPENBSD_2_3:1.17.0.2
	OPENBSD_2_3_BASE:1.17
	OPENBSD_2_2:1.16.0.2
	OPENBSD_2_2_BASE:1.16
	OPENBSD_2_1:1.12.0.2
	OPENBSD_2_1_BASE:1.12
	OPENBSD_2_0:1.9.0.2
	OPENBSD_2_0_BASE:1.9
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.41
date	2014.04.19.14.58.50;	author tedu;	state dead;
branches;
next	1.40;

1.40
date	2009.10.27.23.59.43;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2007.03.20.15.48.10;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2005.07.04.01.54.10;	author djm;	state Exp;
branches;
next	1.37;

1.37
date	2005.04.01.04.06.40;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2004.01.17.21.42.48;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	2004.01.17.20.57.15;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	2003.08.11.20.43.31;	author millert;	state Exp;
branches;
next	1.33;

1.33
date	2003.08.11.20.10.00;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2003.06.03.02.56.15;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2003.04.08.22.11.56;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2002.08.12.02.31.43;	author itojun;	state Exp;
branches;
next	1.29;

1.29
date	2002.07.15.22.11.21;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2002.06.12.06.07.16;	author mpech;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.09.05.50.33;	author hin;	state Exp;
branches;
next	1.26;

1.26
date	2002.05.06.22.50.03;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2002.02.19.19.39.39;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.17.19.42.31;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2002.02.16.21.27.52;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.27.16.24.45;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2001.09.04.23.35.59;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2000.02.01.03.23.37;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.27.05.27.42;	author itojun;	state Exp;
branches;
next	1.17;

1.17
date	98.03.25.19.53.21;	author art;	state Exp;
branches;
next	1.16;

1.16
date	97.08.06.06.43.41;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.07.25.21.05.39;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	97.06.29.11.10.34;	author provos;	state Exp;
branches;
next	1.13;

1.13
date	97.06.23.09.13.07;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	97.03.26.19.41.59;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.01.15.23.43.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	96.12.22.03.26.02;	author tholo;	state Exp;
branches;
next	1.9;

1.9
date	96.09.02.21.28.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	96.08.30.02.20.57;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.08.11.08.46.44;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	96.07.24.17.31.08;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.07.22.10.09.04;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.06.26.05.38.49;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.17.07.16.43;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.16.22.20.36;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Once great men lived here... giants... gods... once, but long ago.
@
text
@/*	$OpenBSD: rsh.c,v 1.40 2009/10/27 23:59:43 deraadt Exp $	*/

/*-
 * Copyright (c) 1983, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/file.h>

#include <netinet/in.h>

#include <err.h>
#include <errno.h>
#include <netdb.h>
#include <poll.h>
#include <pwd.h>
#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "pathnames.h"

__dead void usage(void);
void sendsig(int);
char *copyargs(char **argv);
void talk(int, sigset_t *, int, int);

/*
 * rsh - remote shell
 */
int rfd2;

int
main(int argc, char *argv[])
{
	struct passwd *pw;
	struct servent *sp;
	sigset_t mask, omask;
	int argoff = 0, asrsh = 0, ch, dflag = 0, nflag = 0, one = 1, rem;
	char *args, *host = NULL, *user = NULL;
	pid_t pid = 0;
	extern char *__progname;
	uid_t uid;

	/* if called as something other than "rsh", use it as the host name */
	if (strcmp(__progname, "rsh") != 0)
		host = __progname;
	else
		asrsh = 1;

	/* handle "rsh host flags" */
	if (!host && argc > 2 && argv[1][0] != '-') {
		host = argv[1];
		argoff = 1;
	}

	while ((ch = getopt(argc - argoff, argv + argoff, "8KLdel:nw")) != -1)
		switch(ch) {
		case '8':	/* -8KLew are ignored to allow rlogin aliases */
		case 'K':
		case 'L':
		case 'e':
		case 'w':
			break;
		case 'd':
			dflag = 1;
			break;
		case 'l':
			user = optarg;
			break;
		case 'n':
			nflag = 1;
			break;
		default:
			usage();
		}
	optind += argoff;

	uid = getuid();

	/* if haven't gotten a host yet, do so */
	if (!host && !(host = argv[optind++]))
		usage();

	/* if no command, login to remote host via ssh. */
	if (!argv[optind]) {
		if (setresuid(uid, uid, uid) == -1)
			err(1, "setresuid");
		if (asrsh)
			*argv = "ssh";
		execv(_PATH_SSH, argv);
		errx(1, "can't exec %s", _PATH_SSH);
	}

	argc -= optind;
	argv += optind;

	if (geteuid() != 0)
		errx(1, "must be setuid root");
	if ((pw = getpwuid(uid)) == NULL)
		errx(1, "unknown user ID %u", uid);
	if (user == NULL)
		user = pw->pw_name;

	args = copyargs(argv);

	if ((sp = getservbyname("shell", "tcp")) == NULL)
		errx(1, "shell/tcp: unknown service");

	(void)unsetenv("RSH");		/* no tricks with rcmd(3) */

	rem = rcmd_af(&host, sp->s_port, pw->pw_name, user, args, &rfd2,
	    PF_UNSPEC);
	if (rem < 0)
		exit(1);
	if (rfd2 < 0)
		errx(1, "can't establish stderr");

	if (setresuid(uid, uid, uid) == -1)
		err(1, "setresuid");

	if (dflag) {
		if (setsockopt(rem, SOL_SOCKET, SO_DEBUG, &one,
		    sizeof(one)) < 0)
			warn("setsockopt");
		if (setsockopt(rfd2, SOL_SOCKET, SO_DEBUG, &one,
		    sizeof(one)) < 0)
			warn("setsockopt");
	}
	sigemptyset(&mask);
	sigaddset(&mask, SIGINT);
	sigaddset(&mask, SIGQUIT);
	sigaddset(&mask, SIGTERM);
	sigprocmask(SIG_BLOCK, &mask, &omask);
	if (signal(SIGINT, SIG_IGN) != SIG_IGN)
		(void)signal(SIGINT, sendsig);
	if (signal(SIGQUIT, SIG_IGN) != SIG_IGN)
		(void)signal(SIGQUIT, sendsig);
	if (signal(SIGTERM, SIG_IGN) != SIG_IGN)
		(void)signal(SIGTERM, sendsig);

	if (!nflag) {
		if ((pid = fork()) < 0)
			err(1, "fork");
	}

	(void)ioctl(rfd2, FIONBIO, &one);
	(void)ioctl(rem, FIONBIO, &one);

	talk(nflag, &omask, pid, rem);

	if (!nflag)
		(void)kill(pid, SIGKILL);

	return 0;
}

void
talk(int nflag, sigset_t *omask, pid_t pid, int rem)
{
	int cc, wc;
	char *bp;
	struct pollfd pfd[2];
	char buf[BUFSIZ];

	if (!nflag && pid == 0) {
		(void)close(rfd2);

reread:		errno = 0;
		if ((cc = read(STDIN_FILENO, buf, sizeof buf)) <= 0)
			goto done;
		bp = buf;

		pfd[0].fd = rem;
		pfd[0].events = POLLOUT;
rewrite:
		if (poll(pfd, 1, INFTIM) < 0) {
			if (errno != EINTR)
				err(1, "poll");
			goto rewrite;
		}
		if (pfd[0].revents & (POLLERR|POLLHUP|POLLNVAL))
			err(1, "poll");
		wc = write(rem, bp, cc);
		if (wc < 0) {
			if (errno == EWOULDBLOCK)
				goto rewrite;
			goto done;
		}
		bp += wc;
		cc -= wc;
		if (cc == 0)
			goto reread;
		goto rewrite;
done:
		(void)shutdown(rem, 1);
		exit(0);
	}

	sigprocmask(SIG_SETMASK, omask, NULL);
	pfd[1].fd = rfd2;
	pfd[1].events = POLLIN;
	pfd[0].fd = rem;
	pfd[0].events = POLLIN;
	do {
		if (poll(pfd, 2, INFTIM) < 0) {
			if (errno != EINTR)
				err(1, "poll");
			continue;
		}
		if ((pfd[0].revents & (POLLERR|POLLHUP|POLLNVAL)) ||
		    (pfd[1].revents & (POLLERR|POLLHUP|POLLNVAL)))
			err(1, "poll");
		if (pfd[1].revents & POLLIN) {
			errno = 0;
			cc = read(rfd2, buf, sizeof buf);
			if (cc <= 0) {
				if (errno != EWOULDBLOCK)
					pfd[1].revents = 0;
			} else
				(void)write(STDERR_FILENO, buf, cc);
		}
		if (pfd[0].revents & POLLIN) {
			errno = 0;
			cc = read(rem, buf, sizeof buf);
			if (cc <= 0) {
				if (errno != EWOULDBLOCK)
					pfd[0].revents = 0;
			} else
				(void)write(STDOUT_FILENO, buf, cc);
		}
	} while ((pfd[0].revents & POLLIN) || (pfd[1].revents & POLLIN));
}

void
sendsig(int signo)
{
	int save_errno = errno;

	(void)write(rfd2, &signo, 1);
	errno = save_errno;
}

char *
copyargs(char **argv)
{
	char **ap, *p, *args;
	size_t cc, len;

	cc = 0;
	for (ap = argv; *ap; ++ap)
		cc += strlen(*ap) + 1;
	if ((args = malloc(cc)) == NULL)
		err(1, NULL);
	for (p = args, ap = argv; *ap; ++ap) {
		len = strlcpy(p, *ap, cc);
		if (len >= cc)
			errx(1, "copyargs overflow");
		p += len;
		cc -= len;
		if (ap[1]) {
			*p++ = ' ';
			cc--;
		}
	}
	return(args);
}

__dead void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: rsh [-dn] [-l username] hostname [command]\n");
	exit(1);
}
@


1.40
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.39 2007/03/20 15:48:10 jmc Exp $	*/
@


1.39
log
@remove -K from usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.38 2005/07/04 01:54:10 djm Exp $	*/
a30 11

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1983, 1990 The Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/*static const char sccsid[] = "from: @@(#)rsh.c	5.24 (Berkeley) 7/1/91";*/
static const char rcsid[] = "$OpenBSD: rsh.c,v 1.38 2005/07/04 01:54:10 djm Exp $";
#endif /* not lint */
@


1.38
log
@make these use setres[ug]id for simple privilege dropping;
ok deraadt@@ millert@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.37 2005/04/01 04:06:40 deraadt Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: rsh.c,v 1.37 2005/04/01 04:06:40 deraadt Exp $";
d314 1
a314 1
	    "usage: rsh [-Kdn] [-l username] hostname [command]\n");
@


1.37
log
@move more stuff after revoke; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.36 2004/01/17 21:42:48 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: rsh.c,v 1.36 2004/01/17 21:42:48 millert Exp $";
d80 1
a80 1
	int argoff = 0, asrsh = 0, ch, dflag = 0, nflag = 0, one = 1, rem, uid;
d84 1
d120 2
d128 2
a129 2
		seteuid(getuid());
		setuid(getuid());
d141 1
a141 1
	if ((pw = getpwuid(uid = getuid())) == NULL)
d160 2
a161 2
	(void)seteuid(uid);
	(void)setuid(uid);
@


1.36
log
@Exec ssh not rlogin or telnet if the user calls us as "rsh host"
instead of "rsh host command".  requested and OK by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.35 2004/01/17 20:57:15 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: rsh.c,v 1.35 2004/01/17 20:57:15 millert Exp $";
d80 2
a81 2
	int argoff, asrsh, ch, dflag, nflag, one, rem, uid;
	char *args, *host, *user;
a84 4
	argoff = asrsh = dflag = nflag = 0;
	one = 1;
	host = user = NULL;

a153 1

d156 4
a167 3

	(void)seteuid(uid);
	(void)setuid(uid);
@


1.35
log
@Kill kerberos4 code; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.34 2003/08/11 20:43:31 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: rsh.c,v 1.34 2003/08/11 20:43:31 millert Exp $";
d127 1
a127 1
	/* if no command, login to remote host via rlogin or telnet. */
d132 3
a134 8
			*argv = "rlogin";
		execv(_PATH_RLOGIN, argv);
		if (errno == ENOENT) {
			if (asrsh)
				*argv = "telnet";
			execv(_PATH_TELNET, argv);
		}
		errx(1, "can't exec %s", _PATH_TELNET);
@


1.34
log
@Convert to use poll(2) instead of static select.
Input from deraadt@@ and fgsch@@; Ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.33 2003/08/11 20:10:00 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: rsh.c,v 1.33 2003/08/11 20:10:00 millert Exp $";
d64 1
a64 20
#ifdef KERBEROS
#include <des.h>
#include <kerberosIV/krb.h>

CREDENTIALS cred;
Key_schedule schedule;
int use_kerberos = 1, doencrypt;
char dst_realm_buf[REALM_SZ], *dest_realm;

void warning(const char *, ...);
void desrw_set_key(des_cblock *, des_key_schedule *);
int des_read(int, char *, int);
int des_write(int, void *, int);

int krcmd(char **, u_short, char *, char *, int *, char *);
int krcmd_mutual(char **, u_short, char *, char *, int *, char *,
    CREDENTIALS *, Key_schedule);
#endif

void usage(void);
a66 1

a76 2
	extern char *optarg;
	extern int optind;
d81 1
a81 1
	char *args, *host, *user, *p;
d83 1
d90 2
a91 6
	if ((p = strrchr(argv[0], '/')))
		++p;
	else
		p = argv[0];
	if (strcmp(p, "rsh"))
		host = p;
d101 1
a101 6
#ifdef KERBEROS
#define	OPTIONS	"8KLdek:l:nwx"
#else
#define	OPTIONS	"8KLdel:nw"
#endif
	while ((ch = getopt(argc - argoff, argv + argoff, OPTIONS)) != -1)
d103 1
d105 1
a105 5
#ifdef KERBEROS
			use_kerberos = 0;
#endif
			break;
		case 'L':	/* -8Lew are ignored to allow rlogin aliases */
a107 1
		case '8':
a114 6
#ifdef KERBEROS
		case 'k':
			dest_realm = dst_realm_buf;
			strncpy(dest_realm, optarg, REALM_SZ);
			break;
#endif
a117 7
#ifdef KERBEROS
		case 'x':
			doencrypt = 1;
			desrw_set_key(&cred.session, &schedule);
			break;
#endif
		case '?':
d147 1
a147 1
	if (!(pw = getpwuid(uid = getuid())))
d149 1
a149 1
	if (!user)
a151 6
#ifdef KERBEROS
	/* -x turns off -n */
	if (doencrypt)
		nflag = 0;
#endif

d154 1
a154 14
	sp = NULL;
#ifdef KERBEROS
	if (use_kerberos) {
		sp = getservbyname((doencrypt ? "ekshell" : "kshell"), "tcp");
		if (sp == NULL) {
			use_kerberos = 0;
			warning("can't get entry for %s/tcp service",
			    doencrypt ? "ekshell" : "kshell");
		}
	}
#endif
	if (sp == NULL)
		sp = getservbyname("shell", "tcp");
	if (sp == NULL)
d157 1
a157 1
	(void) unsetenv("RSH");		/* no tricks with rcmd(3) */
a158 32
#ifdef KERBEROS
try_connect:
	if (use_kerberos) {
		rem = KSUCCESS;
		errno = 0;
		if (dest_realm == NULL)
			dest_realm = krb_realmofhost(host);

		if (doencrypt)
			rem = krcmd_mutual(&host, sp->s_port, user, args,
			    &rfd2, dest_realm, &cred, schedule);
		else
			rem = krcmd(&host, sp->s_port, user, args, &rfd2,
			    dest_realm);
		if (rem < 0) {
			use_kerberos = 0;
			sp = getservbyname("shell", "tcp");
			if (sp == NULL)
				errx(1, "unknown service shell/tcp");
			if (errno == ECONNREFUSED)
				warning("remote host doesn't support Kerberos");
			if (errno == ENOENT)
				warning("can't provide Kerberos auth data");
			goto try_connect;
		}
	} else {
		if (doencrypt)
			errx("the -x flag requires Kerberos authentication");
		rem = rcmd_af(&host, sp->s_port, pw->pw_name, user, args,
		    &rfd2, PF_UNSPEC);
	}
#else
a160 2
#endif

d194 2
a195 7
#ifdef KERBEROS
	if (!doencrypt)
#endif
	{
		(void)ioctl(rfd2, FIONBIO, &one);
		(void)ioctl(rem, FIONBIO, &one);
	}
d229 3
a231 6
#ifdef KERBEROS
		if (doencrypt)
			wc = des_write(rem, bp, cc);
		else
#endif
			wc = write(rem, bp, cc);
d258 3
d263 1
a263 6
#ifdef KERBEROS
			if (doencrypt)
				cc = des_read(rfd2, buf, sizeof buf);
			else
#endif
				cc = read(rfd2, buf, sizeof buf);
d272 1
a272 6
#ifdef KERBEROS
			if (doencrypt)
				cc = des_read(rem, buf, sizeof buf);
			else
#endif
				cc = read(rem, buf, sizeof buf);
d287 1
a287 6
#ifdef KERBEROS
	if (doencrypt)
		(void)des_write(rfd2, &signo, 1);
	else
#endif
		(void)write(rfd2, &signo, 1);
a290 18
#ifdef KERBEROS
/* VARARGS */
void
warning(const char *fmt, ...)
{
	va_list ap;
	char myrealm[REALM_SZ];

	if (krb_get_lrealm(myrealm, 0) != KSUCCESS)
		return;
	(void)fprintf(stderr, "rsh: warning, using standard rsh: ");
	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);
	(void)fprintf(stderr, ".\n");
}
#endif

d316 1
a316 1
void
d320 1
a320 6
	    "usage: rsh [-Kdn%s]%s[-l username] hostname [command]\n",
#ifdef KERBEROS
	    "x", " [-k realm] ");
#else
	    "", " ");
#endif
@


1.33
log
@Cosmetic changes to make the code a tad more readable:
o constify rcsid and copyright
o use warn/err instead of doing it by hand
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.32 2003/06/03 02:56:15 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: rsh.c,v 1.32 2003/06/03 02:56:15 millert Exp $";
d49 3
d53 1
a53 1

d56 1
d59 1
d61 1
a61 4
#include <errno.h>
#include <err.h>
#include <string.h>
#include <stdarg.h>
d315 1
a315 1
	fd_set readfrom, ready, rembits;
d322 1
a322 1
		if ((cc = read(0, buf, sizeof buf)) <= 0)
d326 4
a329 5
rewrite:	FD_ZERO(&rembits);
		if (rem >= FD_SETSIZE)
			errx(1, "descriptor too large");
                FD_SET(rem, &rembits);
		if (select(rem + 1, 0, &rembits, 0, 0) < 0) {
d331 1
a331 1
				err(1, "select");
a333 2
		if (!FD_ISSET(rem, &rembits))
			goto rewrite;
d356 4
a359 7
	FD_ZERO(&readfrom);
	if (rfd2 >= FD_SETSIZE)
		errx(1, "descriptor too large");
	FD_SET(rfd2, &readfrom);
	if (rem >= FD_SETSIZE)
		errx(1, "descriptor too large");
	FD_SET(rem, &readfrom);
d361 1
a361 2
		FD_COPY(&readfrom, &ready);
		if (select(MAX(rfd2, rem) + 1, &ready, 0, 0, 0) < 0) {
d363 1
a363 1
				err(1, "select");
d366 1
a366 1
		if (FD_ISSET(rfd2, &ready)) {
d376 1
a376 1
					FD_CLR(rfd2, &readfrom);
d378 1
a378 1
				(void)write(2, buf, cc);
d380 1
a380 1
		if (FD_ISSET(rem, &ready)) {
d390 1
a390 1
					FD_CLR(rem, &readfrom);
d392 1
a392 1
				(void)write(1, buf, cc);
d394 1
a394 1
	} while (FD_ISSET(rem, &readfrom) || FD_ISSET(rfd2, &readfrom));
@


1.32
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.31 2003/04/08 22:11:56 millert Exp $	*/
d33 1
a33 1
char copyright[] =
d39 2
a40 2
/*static char sccsid[] = "from: @@(#)rsh.c	5.24 (Berkeley) 7/1/91";*/
static char rcsid[] = "$OpenBSD: rsh.c,v 1.31 2003/04/08 22:11:56 millert Exp $";
d184 1
a184 2
		(void)fprintf(stderr, "rsh: can't exec %s.\n", _PATH_TELNET);
		exit(1);
d190 4
a193 8
	if (geteuid()) {
		(void)fprintf(stderr, "rsh: must be setuid root.\n");
		exit(1);
	}
	if (!(pw = getpwuid(uid = getuid()))) {
		(void)fprintf(stderr, "rsh: unknown user id.\n");
		exit(1);
	}
d218 2
a219 4
	if (sp == NULL) {
		(void)fprintf(stderr, "rsh: shell/tcp: unknown service.\n");
		exit(1);
	}
d240 2
a241 5
			if (sp == NULL) {
				(void)fprintf(stderr,
				    "rsh: unknown service shell/tcp.\n");
				exit(1);
			}
d249 2
a250 5
		if (doencrypt) {
			(void)fprintf(stderr,
			    "rsh: the -x flag requires Kerberos authentication.\n");
			exit(1);
		}
d262 2
a263 4
	if (rfd2 < 0) {
		(void)fprintf(stderr, "rsh: can't establish stderr.\n");
		exit(1);
	}
d267 1
a267 2
			(void)fprintf(stderr, "rsh: setsockopt: %s.\n",
			    strerror(errno));
d270 1
a270 2
			(void)fprintf(stderr, "rsh: setsockopt: %s.\n",
			    strerror(errno));
d288 2
a289 6
		pid = fork();
		if (pid < 0) {
			(void)fprintf(stderr,
			    "rsh: fork: %s.\n", strerror(errno));
			exit(1);
		}
d329 2
a330 5
			if (errno != EINTR) {
				(void)fprintf(stderr,
				    "rsh: select: %s.\n", strerror(errno));
				exit(1);
			}
d367 2
a368 5
			if (errno != EINTR) {
				(void)fprintf(stderr,
				    "rsh: select: %s.\n", strerror(errno));
				exit(1);
			}
@


1.31
log
@Replace strcpy w/ strlcpy(); deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.30 2002/08/12 02:31:43 itojun Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.30 2002/08/12 02:31:43 itojun Exp $";
@


1.30
log
@die if FD_SET overruns.  (i don't have enough motive to change it to malloc
fd_set, rsh should be in graveyard)
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.29 2002/07/15 22:11:21 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.29 2002/07/15 22:11:21 deraadt Exp $";
d61 1
d469 1
a469 1
	int cc;
d474 2
a475 4
	if (!(args = malloc((u_int)cc))) {
		(void)fprintf(stderr, "rsh: %s.\n", strerror(ENOMEM));
		exit(1);
	}
d477 6
a482 3
		(void)strcpy(p, *ap);
		for (p = strcpy(p, *ap); *p; ++p);
		if (ap[1])
d484 2
@


1.29
log
@ansi and some bug fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.28 2002/06/12 06:07:16 mpech Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.28 2002/06/12 06:07:16 mpech Exp $";
d349 2
d385 2
d388 2
@


1.28
log
@a real pid_t cleanup.

espie@@ ok for make/,
deraadt@@ one extra eye,
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.27 2002/06/09 05:50:33 hin Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.27 2002/06/09 05:50:33 hin Exp $";
d77 1
a77 1
int des_write(int, char *, int);
d85 2
d96 1
a96 3
main(argc, argv)
	int argc;
	char **argv;
d104 1
a104 2
	char *p;
	char *args, *host, *user, *copyargs();
a105 1
	void sendsig();
d333 1
a333 5
talk(nflag, omask, pid, rem)
	int nflag;
	sigset_t *omask;
	pid_t pid;
	int rem;
d427 1
a427 2
sendsig(signo)
	char signo;
d459 1
a459 2
copyargs(argv)
	char **argv;
d461 1
a462 2
	char **ap, *p;
	char *args, *malloc();
@


1.27
log
@Sync usage with manpage
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.26 2002/05/06 22:50:03 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.26 2002/05/06 22:50:03 millert Exp $";
d103 1
a103 1
	int argoff, asrsh, ch, dflag, nflag, one, pid = 0, rem, uid;
d106 1
d336 1
a336 1
	int nflag, pid;
d338 1
@


1.26
log
@rlogin is gone but rsh remains (though its use is discouraged).
If someone uses the 'rsh foo' form and there is no rlogin installed,
use telnet instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.25 2002/02/19 19:39:39 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.25 2002/02/19 19:39:39 millert Exp $";
d491 1
a491 1
	    "usage: rsh [-nd%s]%s[-l login] host [command]\n",
@


1.25
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.24 2002/02/17 19:42:31 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.24 2002/02/17 19:42:31 millert Exp $";
d176 1
a176 1
	/* if no further arguments, must have been called as rlogin. */
d178 2
a181 2
		seteuid(getuid());
		setuid(getuid());
d183 6
a188 1
		(void)fprintf(stderr, "rsh: can't exec %s.\n", _PATH_RLOGIN);
@


1.24
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.23 2002/02/16 21:27:52 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.23 2002/02/16 21:27:52 millert Exp $";
a61 1
#ifdef __STDC__
a62 3
#else
#include <varargs.h>
#endif
a442 1
#ifdef __STDC__
a443 4
#else
warning(va_alist)
va_dcl
#endif
a445 3
#ifndef __STDC__
	char *fmt;
#endif
a450 1
#ifdef __STDC__
a451 4
#else
	va_start(ap);
	fmt = va_arg(ap, char *);
#endif
@


1.23
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.22 2001/11/19 19:02:16 mpech Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.22 2001/11/19 19:02:16 mpech Exp $";
d84 2
a85 2
int krcmd_mutual __P((char **, u_short, char *, char *, int *, char *,
		      CREDENTIALS *, Key_schedule));
@


1.22
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.21 2001/09/27 16:24:45 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.21 2001/09/27 16:24:45 deraadt Exp $";
d78 4
a81 4
void warning __P((const char *, ...));
void desrw_set_key __P((des_cblock *, des_key_schedule *));
int des_read __P((int, char *, int));
int des_write __P((int, char *, int));
d83 1
a83 1
int krcmd __P((char **, u_short, char *, char *, int *, char *));
d88 1
a88 1
void usage __P((void));
d90 1
a90 1
void talk __P((int, sigset_t *, int, int));
@


1.21
log
@oops
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.20 2001/09/04 23:35:59 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.20 2001/09/04 23:35:59 millert Exp $";
d90 1
a90 1
void talk __P((int, sigset_t *, int, register int));
d108 1
a108 1
	register char *p;
d336 1
a336 1
	register int rem;
d338 2
a339 2
	register int cc, wc;
	register char *bp;
d479 2
a480 2
	register int cc;
	register char **ap, *p;
@


1.20
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.19 2000/02/01 03:23:37 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.19 2000/02/01 03:23:37 deraadt Exp $";
d384 1
a384 1
	sigprocmask(SIG_SETMASK, &omask, NULL);
@


1.19
log
@no need to extern int errno if errno.h is included
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.18 2000/01/27 05:27:42 itojun Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.18 2000/01/27 05:27:42 itojun Exp $";
d90 1
a90 1
void talk __P((int, int, int, register int));
d106 1
a106 1
	int omask;
d295 5
a299 1
	omask = sigblock(sigmask(SIGINT)|sigmask(SIGQUIT)|sigmask(SIGTERM));
d324 1
a324 1
	talk(nflag, omask, pid, rem);
d335 1
a335 1
	int omask;
d384 1
a384 1
	(void)sigsetmask(omask);
@


1.18
log
@enable IPv6 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.17 1998/03/25 19:53:21 art Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.17 1998/03/25 19:53:21 art Exp $";
a94 1
extern int errno;
@


1.17
log
@fix a bug, use fd_set for select() and cleanup a bit.
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.16 1997/08/06 06:43:41 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.16 1997/08/06 06:43:41 deraadt Exp $";
d268 2
a269 1
		rem = rcmd(&host, sp->s_port, pw->pw_name, user, args, &rfd2);
d272 2
a273 1
	rem = rcmd(&host, sp->s_port, pw->pw_name, user, args, &rfd2);
@


1.16
log
@save errno in mangly handlers
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.15 1997/07/25 21:05:39 mickey Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.15 1997/07/25 21:05:39 mickey Exp $";
d58 2
d79 7
d88 4
d98 1
d108 1
a108 1
	int argoff, asrsh, ch, dflag, nflag, one, pid, rem, uid;
d118 1
a118 1
	if (p = strrchr(argv[0], '/'))
d168 1
a168 1
			desrw_set_key(&cred.session, schedule);
d323 2
a324 1
	exit(0);
d327 1
d335 1
a335 1
	int readfrom, ready, rembits;
d346 2
a347 1
rewrite:	rembits = 1 << rem;
d356 1
a356 1
		if ((rembits & (1 << rem)) == 0)
d380 3
a382 1
	readfrom = (1 << rfd2) | (1 << rem);
d384 1
a384 1
		ready = readfrom;
d393 1
a393 1
		if (ready & (1 << rfd2)) {
d403 1
a403 1
					readfrom &= ~(1 << rfd2);
d407 1
a407 1
		if (ready & (1 << rem)) {
d417 1
a417 1
					readfrom &= ~(1 << rem);
d421 1
a421 1
	} while (readfrom);
d494 2
a495 1
usage()
@


1.15
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.14 1997/06/29 11:10:34 provos Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.14 1997/06/29 11:10:34 provos Exp $";
d409 2
d417 1
@


1.14
log
@new location of des.h
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.13 1997/06/23 09:13:07 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.13 1997/06/23 09:13:07 deraadt Exp $";
d60 1
a60 1
#if __STDC__
d420 1
a420 1
#if __STDC__
d428 1
a428 1
#if !__STDC__
d436 1
a436 1
#if __STDC__
@


1.13
log
@sigblock mask is int, not long
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.12 1997/03/26 19:41:59 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.12 1997/03/26 19:41:59 deraadt Exp $";
d68 1
a68 1
#include <kerberosIV/des.h>
@


1.12
log
@calculate width for select() more carefully
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.11 1997/01/15 23:43:09 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.11 1997/01/15 23:43:09 millert Exp $";
d93 1
a93 1
	long omask;
d314 1
a314 1
	long omask;
@


1.11
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.10 1996/12/22 03:26:02 tholo Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.10 1996/12/22 03:26:02 tholo Exp $";
d331 1
a331 1
		if (select(16, 0, &rembits, 0, 0) < 0) {
d366 1
a366 1
		if (select(16, &ready, 0, 0, 0) < 0) {
@


1.10
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.9 1996/09/02 21:28:04 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.9 1996/09/02 21:28:04 millert Exp $";
d124 1
a124 1
	while ((ch = getopt(argc - argoff, argv + argoff, OPTIONS)) != EOF)
@


1.9
log
@unset $RSH so we don't loop de loop in rcmd().
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.8 1996/08/30 02:20:57 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.8 1996/08/30 02:20:57 millert Exp $";
d171 1
d278 1
@


1.8
log
@bail if euid != 0; keeps us from fork-bombing with rcmd that calls rsh(1).
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.7 1996/08/11 08:46:44 tholo Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.7 1996/08/11 08:46:44 tholo Exp $";
d216 2
@


1.7
log
@Be silent about Kerberos failure if local systel is not configured for
Kerberos
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.6 1996/07/24 17:31:08 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.6 1996/07/24 17:31:08 deraadt Exp $";
d104 1
a104 1
	if (p = rindex(argv[0], '/'))
d180 4
@


1.6
log
@normal uid before execv
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.5 1996/07/22 10:09:04 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.5 1996/07/22 10:09:04 deraadt Exp $";
d60 3
d64 1
d75 2
a76 1
extern char *krb_realmofhost();
d411 4
d417 1
d420 1
d422 2
d425 2
d428 3
d433 1
@


1.5
log
@rcsid cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: rsh.c,v 1.4 1996/06/26 05:38:49 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.4 1996/06/26 05:38:49 deraadt Exp $";
d166 1
@


1.4
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: rsh.c,v 1.3 1996/04/17 07:16:43 tholo Exp $";
a45 5

/*
 * $Source: /cvs/src/usr.bin/rsh/rsh.c,v $
 * $Header: /cvs/src/usr.bin/rsh/rsh.c,v 1.3 1996/04/17 07:16:43 tholo Exp $
 */
@


1.3
log
@Make encrypted remote shell work again.  Note that this is not a supported
configuration, and no port number is defined for it.
@
text
@d1 2
d44 1
a44 1
static char rcsid[] = "$Id: rsh.c,v 1.2 1995/12/16 22:20:36 tholo Exp $";
d49 1
a49 1
 * $Header: /cvs/src/usr.bin/rsh/rsh.c,v 1.2 1995/12/16 22:20:36 tholo Exp $
@


1.2
log
@Make it possible to build without SKEY support
Add support for building with kerberosIV
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rsh.c,v 1.1.1.1 1995/10/18 08:46:03 deraadt Exp $";
d47 1
a47 1
 * $Header: /cvs/src/usr.bin/rsh/rsh.c,v 1.1.1.1 1995/10/18 08:46:03 deraadt Exp $
d152 1
a152 1
			des_set_key(&cred.session, schedule);
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rsh.c,v 1.3 1995/06/27 00:31:00 jtc Exp $";
d46 2
a47 2
 * $Source: /a/cvsroot/src/usr.bin/rsh/rsh.c,v $
 * $Header: /a/cvsroot/src/usr.bin/rsh/rsh.c,v 1.3 1995/06/27 00:31:00 jtc Exp $
a117 1
#ifdef CRYPT
a119 3
#define	OPTIONS	"8KLdek:l:nw"
#endif
#else
a149 1
#ifdef CRYPT
d152 1
a152 1
			des_set_key(cred.session, schedule);
a154 1
#endif
a184 1
#ifdef CRYPT
a188 1
#endif
a217 1
#ifdef CRYPT
a221 1
#endif
a286 1
#ifdef CRYPT
a288 1
#endif
a330 1
#ifdef CRYPT
a334 1
#endif
a365 1
#ifdef CRYPT
a369 1
#endif
a379 1
#ifdef CRYPT
a383 1
#endif
a398 1
#ifdef CRYPT
a402 1
#endif
a451 1
#ifdef CRYPT
a452 3
#else
	    "", " [-k realm] ");
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
