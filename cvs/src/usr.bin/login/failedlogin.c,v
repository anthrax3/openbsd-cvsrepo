head	1.17;
access;
symbols
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.12
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.28
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.24
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.22
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.20
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.18
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.16
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.14
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.12
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.10
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2015.01.16.06.40.09;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	Uu5nFG3wCl0LACBb;

1.16
date	2013.06.01.21.06.39;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.40;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.17.21.56.25;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.01.52.41;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.02.01.15.08;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.48;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.06.18.12.05;	author pvalchev;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.02.04.05.44;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.01.18.33.49;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	99.08.17.09.13.15;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.04.20.23.05.41;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.07.13.02.11.35;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.06.21.22.13.59;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.03.26.20.28.08;	author art;	state Exp;
branches;
next	1.2;

1.2
date	96.12.04.04.04.41;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.11.09.20.17.15;	author millert;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: failedlogin.c,v 1.16 2013/06/01 21:06:39 deraadt Exp $	*/

/*
 * Copyright (c) 1996 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * failedlogin.c
 *	Log to failedlogin file and read from it, reporting the number of
 *	failed logins since the last good login and when/from where
 *	the last failed login was.
 */

#include <sys/stat.h>
#include <sys/time.h>

#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <utmp.h>

#include "pathnames.h"

struct badlogin {
	char	bl_line[UT_LINESIZE];	/* tty used */
	char	bl_name[UT_NAMESIZE];	/* remote username */
	char	bl_host[UT_HOSTSIZE];	/* remote host */
	time_t	bl_time;		/* time of the login attempt */
	size_t	count;			/* number of bad logins */
};

void	 log_failedlogin(uid_t, char *, char *, char *);
int	 check_failedlogin(uid_t);

/*
 * Log a bad login to the failedlogin file.
 */
void
log_failedlogin(uid_t uid, char *host, char *name, char *tty)
{
	struct badlogin failedlogin;
	int fd;

	/* Add O_CREAT if you want to create failedlogin if it doesn't exist */
	if ((fd = open(_PATH_FAILEDLOGIN, O_RDWR, S_IRUSR|S_IWUSR)) >= 0) {
		(void)lseek(fd, (off_t)uid * sizeof(failedlogin), SEEK_SET);

		/* Read in last bad login so can get the count */
		if (read(fd, (char *)&failedlogin, sizeof(failedlogin)) !=
			sizeof(failedlogin) || failedlogin.bl_time == 0)
			memset((void *)&failedlogin, 0, sizeof(failedlogin));

		(void)lseek(fd, (off_t)uid * sizeof(failedlogin), SEEK_SET);
		/* Increment count of bad logins */
		++failedlogin.count;
		(void)time(&failedlogin.bl_time);
		strncpy(failedlogin.bl_line, tty, sizeof(failedlogin.bl_line));
		if (host)
			strncpy(failedlogin.bl_host, host, sizeof(failedlogin.bl_host));
		else
			*failedlogin.bl_host = '\0';	/* NULL host field */
		if (name)
			strncpy(failedlogin.bl_name, name, sizeof(failedlogin.bl_name));
		else
			*failedlogin.bl_name = '\0';	/* NULL name field */
		(void)write(fd, (char *)&failedlogin, sizeof(failedlogin));
		(void)close(fd);
	}
}

/*
 * Check the failedlogin file and report about the number of unsuccessful
 * logins and info about the last one in lastlogin style.
 * NOTE: zeros the count field since this is assumed to be called after the
 * user has been validated.
 */
int
check_failedlogin(uid_t uid)
{
	struct badlogin failedlogin;
	int fd, was_bad = 0;

	(void)memset((void *)&failedlogin, 0, sizeof(failedlogin));

	if ((fd = open(_PATH_FAILEDLOGIN, O_RDWR, 0)) >= 0) {
		(void)lseek(fd, (off_t)uid * sizeof(failedlogin), SEEK_SET);
		if (read(fd, (char *)&failedlogin, sizeof(failedlogin)) ==
		    sizeof(failedlogin) && failedlogin.count > 0 ) {
			/* There was a bad login */
			was_bad = 1;
			if (failedlogin.count > 1)
				(void)printf("There have been %lu unsuccessful "
				    "login attempts to your account.\n",
				    (u_long)failedlogin.count);
			(void)printf("Last unsuccessful login: %.*s", 24-5,
				(char *)ctime(&failedlogin.bl_time));
			(void)printf(" on %.*s",
			    (int)sizeof(failedlogin.bl_line),
			    failedlogin.bl_line);
			if (*failedlogin.bl_host != '\0') {
				if (*failedlogin.bl_name != '\0')
					(void)printf(" from %.*s@@%.*s",
					    (int)sizeof(failedlogin.bl_name),
					    failedlogin.bl_name,
					    (int)sizeof(failedlogin.bl_host),
					    failedlogin.bl_host);
				else
					(void)printf(" from %.*s",
					    (int)sizeof(failedlogin.bl_host),
					    failedlogin.bl_host);
			}
			(void)putchar('\n');

			/* Reset since this is a good login and write record */
			failedlogin.count = 0;
			(void)lseek(fd, (off_t)uid * sizeof(failedlogin),
			    SEEK_SET);
			(void)write(fd, (char *)&failedlogin,
			    sizeof(failedlogin));
		}
		(void)close(fd);
	}
	return(was_bad);
}
@


1.16
log
@use the standardized names instead of S_IREAD and S_IWRITE
ok guenther dtucker
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.15 2009/10/27 23:59:40 deraadt Exp $	*/
a25 1
#include <sys/param.h>
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.14 2003/06/17 21:56:25 millert Exp $	*/
d59 1
a59 1
	if ((fd = open(_PATH_FAILEDLOGIN, O_RDWR, S_IREAD|S_IWRITE)) >= 0) {
@


1.14
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.13 2003/06/03 01:52:41 millert Exp $	*/
a17 4

#ifndef lint
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.13 2003/06/03 01:52:41 millert Exp $";
#endif /* not lint */
@


1.13
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.12 2002/07/02 01:15:08 deraadt Exp $	*/
d10 7
a16 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
 * FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d20 1
a20 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.12 2002/07/02 01:15:08 deraadt Exp $";
@


1.12
log
@KNF and signal race fixes; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.11 2002/02/16 21:27:48 millert Exp $	*/
a4 1
 * All rights reserved.
d6 3
a8 10
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d10 7
a16 10
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d20 1
a20 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.11 2002/02/16 21:27:48 millert Exp $";
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.10 2001/07/06 18:12:05 pvalchev Exp $	*/
d30 3
a32 3
#ifndef lint                                                              
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.10 2001/07/06 18:12:05 pvalchev Exp $";
#endif /* not lint */                                                        
d68 1
a68 3
log_failedlogin(uid, host, name, tty)
	uid_t uid;
	char *host, *name, *tty;
d107 1
a107 2
check_failedlogin(uid)
	uid_t uid;
a108 1
	int fd;
d110 1
a110 1
	int was_bad = 0;
d128 1
a128 1
			    failedlogin.bl_line); 
@


1.10
log
@missing prototypes; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.9 2000/03/02 04:05:44 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.9 2000/03/02 04:05:44 millert Exp $";
d61 2
a62 2
void	 log_failedlogin __P((uid_t, char *, char *, char *));
int	 check_failedlogin __P((uid_t));
@


1.9
log
@count is unsigned (size_t) so cast to u_long, not long
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.8 2000/03/01 18:33:49 deraadt Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.8 2000/03/01 18:33:49 deraadt Exp $";
d60 3
@


1.8
log
@Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.7 1999/08/17 09:13:15 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.7 1999/08/17 09:13:15 millert Exp $";
d122 3
a124 3
				printf("There have been %ld unsuccessful login "
				    "attempts to your account.\n",
				    (long)failedlogin.count);
@


1.7
log
@More <sys/file.h> vs. <fcntl.h> and open() flags fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.6 1999/04/20 23:05:41 pjanzen Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.6 1999/04/20 23:05:41 pjanzen Exp $";
d122 3
a124 2
				(void)printf("There have been %u unsuccessful login attempts to your account.\n",
					failedlogin.count);
@


1.6
log
@'unsuccessful' has 2 'c's.
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.5 1998/07/13 02:11:35 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.5 1998/07/13 02:11:35 millert Exp $";
a40 1
#include <sys/file.h>
d45 1
@


1.5
log
@ftpd: sleep for an indeterminate amount for non-existant logins
      to simulate a crypt, like login does.
Use SEEK_* not L_* and kill some 0L's used in lseek while we're there.
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.4 1998/06/21 22:13:59 millert Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.4 1998/06/21 22:13:59 millert Exp $";
d124 1
a124 1
			(void)printf("Last unsucessful login: %.*s", 24-5,
@


1.4
log
@Remove the advertising clause in my old license, it impedes free use
of the code as a large number of similar clauses makes it impossible
to write an ad for a product using the code...
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.3 1998/03/26 20:28:08 art Exp $	*/
d31 1
a31 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.3 1998/03/26 20:28:08 art Exp $";
d74 1
a74 1
		(void)lseek(fd, (off_t)uid * sizeof(failedlogin), L_SET);
d81 1
a81 1
		(void)lseek(fd, (off_t)uid * sizeof(failedlogin), L_SET);
d116 1
a116 1
		(void)lseek(fd, (off_t)uid * sizeof(failedlogin), L_SET);
d145 4
a148 2
			(void)lseek(fd, (off_t)uid * sizeof(failedlogin), L_SET);
			(void)write(fd, (char *)&failedlogin, sizeof(failedlogin));
@


1.3
log
@fix cleaning up of bad environment variables (LD_* and IFS),
-Wall cleanup and add ability to fetch AFS-tokens for those who
happen to have AFS.
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.2 1996/12/04 04:04:41 millert Exp $	*/
d15 1
a15 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Todd C. Miller.
 * 4. The name of the author may not be used to endorse or promote products
d31 1
a31 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.2 1996/12/04 04:04:41 millert Exp $";
@


1.2
log
@Implement -u (remote user) option for login (only root may use it).
We now store remote user in failedlogin struct too.
Also add REMOTEHOST and REMOTEUSER environmental vars.
@
text
@d1 1
a1 1
/*	$OpenBSD: failedlogin.c,v 1.1 1996/11/09 20:17:15 millert Exp $	*/
d34 1
a34 1
static char rcsid[] = "$OpenBSD: failedlogin.c,v 1.1 1996/11/09 20:17:15 millert Exp $";
d132 1
a132 1
			if (*failedlogin.bl_host != '\0')
d143 1
@


1.1
log
@Adds support for logging and reporting on failed login attempts
via sparse file /var/log/failedlogin.
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d34 1
a34 1
static char rcsid[] = "$OpenBSD: $";
a56 2
	size_t	count;			/* number of bad logins */
	time_t	bl_time;		/* time of the login attempt */
d58 1
d60 2
d68 1
a68 1
log_failedlogin(uid, host, tty)
d70 1
a70 1
	char *host, *tty;
d93 4
d133 10
a142 3
				(void)printf(" from %.*s",
				    (int)sizeof(failedlogin.bl_host),
				    failedlogin.bl_host);
@
