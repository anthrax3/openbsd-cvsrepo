head	1.33;
access;
symbols
	OPENBSD_6_1:1.33.0.6
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.33.0.4
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.2
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.32.0.6
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.32.0.2
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.31.0.14
	OPENBSD_5_6_BASE:1.31
	OPENBSD_5_5:1.31.0.12
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.8
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.31.0.6
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.4
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.2
	OPENBSD_5_0:1.30.0.4
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.30.0.2
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.29.0.18
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.14
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.16
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.29.0.12
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.29.0.10
	OPENBSD_4_4_BASE:1.29
	OPENBSD_4_3:1.29.0.8
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.29.0.6
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.29.0.4
	OPENBSD_4_1_BASE:1.29
	OPENBSD_4_0:1.29.0.2
	OPENBSD_4_0_BASE:1.29
	OPENBSD_3_9:1.28.0.12
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.28.0.10
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.28.0.8
	OPENBSD_3_7_BASE:1.28
	OPENBSD_3_6:1.28.0.6
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.28.0.4
	OPENBSD_3_5_BASE:1.28
	OPENBSD_3_4:1.28.0.2
	OPENBSD_3_4_BASE:1.28
	OPENBSD_3_3:1.22.0.4
	OPENBSD_3_3_BASE:1.22
	OPENBSD_3_2:1.22.0.2
	OPENBSD_3_2_BASE:1.22
	OPENBSD_3_1:1.21.0.4
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.21.0.2
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9_BASE:1.17
	OPENBSD_2_9:1.17.0.4
	OPENBSD_2_8:1.17.0.2
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.33
date	2015.11.03.16.21.47;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	UG385lvsmK16SP43;

1.32
date	2014.12.21.09.33.12;	author espie;	state Exp;
branches;
next	1.31;
commitid	cEHdgjDE2j8bVm3K;

1.31
date	2011.09.27.07.24.02;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2010.09.07.19.58.09;	author marco;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.20.20.27.45;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.30.22.13.33;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.30.22.10.21;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.30.21.47.21;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.30.21.42.50;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.12.14.36.43;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.03.02.56.10;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.28.14.37.12;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.27.11.40.33;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2001.09.18.13.39.52;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.17.08.11.13;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.15.14.01.39;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2000.07.24.23.08.25;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2000.07.04.17.28.38;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2000.07.02.01.17.00;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.11.15.54.44;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2000.01.15.14.26.00;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.12.17.49.53;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.11.14.06.12;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.05.16.06.14;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.12.21.22.30.48;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	99.11.20.17.49.00;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.09.14.08.35.17;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.09.06.13.29.32;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	99.09.06.13.10.48;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	97.12.10.20.24.16;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.36.14;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.15.01.12.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.33
log
@There really is no double standard. Treat m4 just like openssl, by
removing VMS and MSDOS support.
ok espie
@
text
@/*	$OpenBSD: mdef.h,v 1.32 2014/12/21 09:33:12 espie Exp $	*/
/*	$NetBSD: mdef.h,v 1.7 1996/01/13 23:25:27 pk Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ozan Yigit at York University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mdef.h	8.1 (Berkeley) 6/6/93
 */

#ifdef __GNUC__
# define UNUSED	__attribute__((__unused__))
#else
# define UNUSED
#endif

#define MACRTYPE        1
#define DEFITYPE        2
#define EXPRTYPE        3
#define SUBSTYPE        4
#define IFELTYPE        5
#define LENGTYPE        6
#define CHNQTYPE        7
#define SYSCTYPE        8
#define UNDFTYPE        9
#define INCLTYPE        10
#define SINCTYPE        11
#define PASTTYPE        12
#define SPASTYPE        13
#define INCRTYPE        14
#define IFDFTYPE        15
#define PUSDTYPE        16
#define POPDTYPE        17
#define SHIFTYPE        18
#define DECRTYPE        19
#define DIVRTYPE        20
#define UNDVTYPE        21
#define DIVNTYPE        22
#define MKTMTYPE        23
#define ERRPTYPE        24
#define M4WRTYPE        25
#define TRNLTYPE        26
#define DNLNTYPE        27
#define DUMPTYPE        28
#define CHNCTYPE        29
#define INDXTYPE        30
#define SYSVTYPE        31
#define EXITTYPE        32
#define DEFNTYPE        33
#define SELFTYPE	34
#define INDIRTYPE	35
#define BUILTINTYPE	36
#define PATSTYPE	37
#define FILENAMETYPE	38
#define LINETYPE	39
#define REGEXPTYPE	40
#define ESYSCMDTYPE	41
#define TRACEONTYPE	42
#define TRACEOFFTYPE	43
#define FORMATTYPE	44

#define BUILTIN_MARKER	"__builtin_"

#define TYPEMASK	63	/* Keep bits really corresponding to a type. */
#define RECDEF		256	/* Pure recursive def, don't expand it */
#define NOARGS		512	/* builtin needs no args */
#define NEEDARGS	1024	/* mark builtin that need args with this */

/*
 * m4 special characters
 */

#define ARGFLAG         '$'
#define LPAREN          '('
#define RPAREN          ')'
#define LQUOTE          '`'
#define RQUOTE          '\''
#define COMMA           ','
#define SCOMMT          '#'
#define ECOMMT          '\n'

/*
 * other important constants
 */

#define EOS             '\0'
#define MAXINP          10              /* maximum include files	    */
#define MAXOUT          10              /* maximum # of diversions	    */
#define BUFSIZE         4096            /* starting size of pushback buffer */
#define INITSTACKMAX    4096		/* starting size of call stack      */
#define STRSPMAX        4096            /* starting size of string space    */
#define MAXTOK          512		/* maximum chars in a tokn	    */
#define MAXCCHARS	5		/* max size of comment/quote delim  */

#define ALL             1
#define TOP             0

#define TRUE            1
#define FALSE           0
#define cycle           for(;;)

/*
 * m4 data structures
 */

typedef struct ndblock *ndptr;

struct macro_definition {
	struct macro_definition *next;
	char		*defn;	/* definition..               */
	unsigned int	type;	/* type of the entry..        */
};


struct ndblock {			/* hashtable structure         */
	unsigned int		builtin_type;
	unsigned int		trace_flags;
	struct macro_definition *d;
	char		name[1];	/* entry name..               */
};

typedef union {			/* stack structure */
	int	sfra;		/* frame entry  */
	char	*sstr;		/* string entry */
} stae;

struct input_file {
	FILE		*file;
	char		*name;
	unsigned long	lineno;
	unsigned long   synch_lineno;	/* used for -s */
	int		c;
};

#define STORAGE_STRSPACE 0
#define STORAGE_MACRO 1
#define STORAGE_OTHER 2

#define CURRENT_NAME	(infile[ilevel].name)
#define CURRENT_LINE	(infile[ilevel].lineno)
/*
 * macros for readibility and/or speed
 *
 *      gpbc()  - get a possibly pushed-back character
 *      pushf() - push a call frame entry onto stack
 *      pushs() - push a string pointer onto stack
 */
#define gpbc()	 (bp > bufbase) ? *--bp : obtain_char(infile+ilevel)
#define pushf(x)			\
	do {				\
		if (++sp == STACKMAX)	\
			enlarge_stack();\
		mstack[sp].sfra = (x);	\
		sstack[sp] = STORAGE_OTHER; \
	} while (0)

#define pushs(x)			\
	do {				\
		if (++sp == STACKMAX)	\
			enlarge_stack();\
		mstack[sp].sstr = (x);	\
		sstack[sp] = STORAGE_STRSPACE; \
	} while (0)

#define pushs1(x)			\
	do {				\
		if (++sp == STACKMAX)	\
			enlarge_stack();\
		mstack[sp].sstr = (x);	\
		sstack[sp] = STORAGE_OTHER; \
	} while (0)

#define pushdef(p)			\
	do {				\
		if (++sp == STACKMAX)	\
			enlarge_stack();\
		mstack[sp].sstr = macro_getdef(p)->defn;\
		sstack[sp] = STORAGE_MACRO; \
	} while (0)
		

/*
 *	    .				   .
 *	|   .	|  <-- sp		|  .  |
 *	+-------+			+-----+
 *	| arg 3 ----------------------->| str |
 *	+-------+			|  .  |
 *	| arg 2 ---PREVEP-----+		   .
 *	+-------+	      |
 *	    .		      |		|     |
 *	+-------+	      |		+-----+
 *	| plev	|  PARLEV     +-------->| str |
 *	+-------+			|  .  |
 *	| type	|  CALTYP		   .
 *	+-------+
 *	| prcf	---PREVFP--+
 *	+-------+	   |
 *	|   .	|  PREVSP  |
 *	    .		   |
 *	+-------+	   |
 *	|	<----------+
 *	+-------+
 *
 */
#define PARLEV  (mstack[fp].sfra)
#define CALTYP  (mstack[fp-2].sfra)
#define TRACESTATUS (mstack[fp-1].sfra)
#define PREVEP	(mstack[fp+3].sstr)
#define PREVSP	(fp-4)
#define PREVFP	(mstack[fp-3].sfra)
@


1.32
log
@fix test-redef2:
- introduce explicit STORAGE classes for the shadow stack entries
- delay freeing definitions if they're in-use, keep them in a simple array.

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.31 2011/09/27 07:24:02 espie Exp $	*/
a107 4

#ifdef msdos
#define system(str)	(-1)
#endif
@


1.31
log
@zap dead stuff
from Michael W. Bombardieri
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.30 2010/09/07 19:58:09 marco Exp $	*/
d166 4
d185 1
a185 1
		sstack[sp] = 0; \
d193 1
a193 1
		sstack[sp] = 1; \
d201 9
a209 1
		sstack[sp] = 0; \
d211 1
@


1.30
log
@Remove stray spaces.  No code change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.29 2006/03/20 20:27:45 espie Exp $	*/
a123 1
#define HASHSIZE        199             /* maximum size of hashtab	    */
@


1.29
log
@add limited support for format builtin in gnu-m4 mode, because I'm fed
up of patching it away in various autoconf derivatives.

okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.28 2003/06/30 22:13:33 espie Exp $	*/
d90 1
a90 1
 
d99 1
a99 1
 
d118 2
a119 2
#define MAXINP          10              /* maximum include files   	    */
#define MAXOUT          10              /* maximum # of diversions 	    */
d121 1
a121 1
#define INITSTACKMAX    4096           	/* starting size of call stack      */
d123 2
a124 2
#define MAXTOK          512          	/* maximum chars in a tokn 	    */
#define HASHSIZE        199             /* maximum size of hashtab 	    */
d126 1
a126 1
 
d129 1
a129 1
 
d137 1
a137 1
 
d139 1
a139 1
 
d148 1
a148 1
	unsigned int 		builtin_type;
d153 1
a153 1
 
d156 1
a156 1
	char 	*sstr;		/* string entry */
d160 3
a162 3
	FILE 		*file;
	char 		*name;
	unsigned long 	lineno;
d164 1
a164 1
	int 		c;
d176 2
a177 2
#define gpbc() 	 (bp > bufbase) ? *--bp : obtain_char(infile+ilevel)
#define pushf(x) 			\
d179 1
a179 1
		if (++sp == STACKMAX) 	\
d185 1
a185 1
#define pushs(x) 			\
d187 1
a187 1
		if (++sp == STACKMAX) 	\
d193 1
a193 1
#define pushs1(x) 			\
d195 1
a195 1
		if (++sp == STACKMAX) 	\
d207 1
a207 1
 *	| arg 2 ---PREVEP-----+ 	   .
d210 1
a210 1
 *	+-------+	      | 	+-----+
d216 1
a216 1
 *	+-------+  	   |
d218 1
a218 1
 *	    .	   	   |
@


1.28
log
@Fold trace status into the single hash table that's left.
Inline some macros/functions for speed.
So, this achieves the goal of one single lookup for macro/trace status,
which does speed up m4 in partial tracing situations somewhat.
This does also speed up m4 in large pushdef situations, since it no longer
has to lookup large chains of macros.

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.27 2003/06/30 22:10:21 espie Exp $	*/
d87 1
@


1.27
log
@replace old hash structure with open hashing.
make the stack structure of macro definitions explicit.
okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.26 2003/06/30 21:47:21 espie Exp $	*/
d145 6
a150 3
struct keyblk {
        char    *knam;          /* keyword name */
        int     ktyp;           /* keyword type */
d152 1
a152 1

@


1.26
log
@Make the trace status of a macro an actual argument that gets pushed
in the frame for the macro expansion.

(This will allow one single lookup to grab the macro definition and
the trace status)

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.25 2003/06/30 21:42:50 espie Exp $	*/
d140 1
@


1.25
log
@clean up internal lookup interface:
define an interface with explicit define/pushdef/popdef... and use it.
That way, most details of the hashtable are no longer visible.

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.24 2003/06/12 14:36:43 espie Exp $	*/
d220 2
a221 1
#define CALTYP  (mstack[fp-1].sfra)
d223 2
a224 2
#define PREVSP	(fp-3)
#define PREVFP	(mstack[fp-2].sfra)
@


1.24
log
@switch from linked list to hash table for traced macros.
speeds up recent autoconf somewhat, since it traces a large set
of individual macro.

(more rework of m4 internal interfaces to unify lookup tables in order)

okay fries@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.23 2003/06/03 02:56:10 millert Exp $	*/
d88 1
d139 1
a139 2
struct ndblock {		/* hastable structure         */
	char		*name;	/* entry name..               */
a141 2
	unsigned int 	hv;	/* hash function value..      */
	ndptr		nxtptr;	/* link to next entry..       */
d143 1
a143 3
 
#define nil     ((ndptr) 0)
 
@


1.23
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.22 2002/04/28 14:37:12 espie Exp $	*/
d37 6
@


1.22
log
@Implement -s.
Triggered by recent FreeBSD changes.

- emits #line directives at every file change (like FreeBSD)
- maintains a synch_lineno variable to verify when the output gets out
of synch with the input, so that it can emit #line to re-synch as well
(unlike FreeBSD)

To do: either handle \end-of-line, or recognize when a macro expansion
is in progress, so that line synch don't perturb cpp on multi-line
expansions.

With this, we should have a fully POSIX-compliant m4.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.21 2001/09/27 11:40:33 espie Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.21
log
@traceon/traceoff built-ins.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.20 2001/09/18 13:39:52 espie Exp $	*/
d160 1
@


1.20
log
@slightly buggy macros
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.19 2001/09/17 08:11:13 espie Exp $	*/
d83 3
@


1.19
log
@Remove STATIC memory optimization. It's buggy (see regression test trip)
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.18 2001/06/15 14:01:39 espie Exp $	*/
d176 1
a176 1
	} while (0);
d184 1
a184 1
	} while (0);
d192 1
a192 1
	} while (0);
@


1.18
log
@Kill MAXSTR, it's no longer used at all.
Define MAXTOK directly.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.17 2000/07/24 23:08:25 espie Exp $	*/
a84 1
#define STATIC          128	/* Name is statically allocated, don't free. */
@


1.17
log
@Implement esyscmd
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.16 2000/07/04 17:28:38 espie Exp $	*/
a113 1
#define MAXSTR          512             /* maximum size of string  	    */
d117 1
a117 1
#define MAXTOK          MAXSTR          /* maximum chars in a tokn 	    */
@


1.16
log
@Back out unwanted testing change
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.15 2000/07/02 01:17:00 espie Exp $	*/
d82 1
@


1.15
log
@Make the m4 machine stack dynamically sized.

Fix strspace automatic extension.
The assumption that simply updating the current pointer works is false,
there are cases where previous entries on the stack would absorp vast
amounts of string space, and overload the non-updated entries.

To fix it, we use a shadow copy of the stack, which only records which
entries are pointers within strspace, so that a resize can adjust all
those pointers at once.

Reviewed by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.14 2000/03/11 15:54:44 espie Exp $	*/
d116 1
a116 1
#define STRSPMAX        64             /* starting size of string space    */
@


1.14
log
@Add a few builtins for greater compatibility with gnu-m4, and extended
functionality.
* regular expressions,
* line-number reporting
* `meta'-macros, builtin and indir.

Reviewed by pjanzen@@, tested by fries@@ and a few others.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.13 2000/01/15 14:26:00 espie Exp $	*/
d115 2
a116 2
#define STACKMAX        4096            /* size of call stack      	    */
#define STRSPMAX        4096            /* starting size of string space    */
d171 23
a193 2
#define pushf(x) if (sp < STACKMAX) mstack[++sp].sfra = (x)
#define pushs(x) if (sp < STACKMAX) mstack[++sp].sstr = (x)
d220 1
a220 1
#define PREVEP	compute_prevep() 
@


1.13
log
@There is no need to waste short for holding EOF in the pushback buffer.
Now that the input_file structure is sufficiently fleshed out, just stop
EOF at the putback level, and make sure files at EOF STAY at EOF.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.12 2000/01/12 17:49:53 espie Exp $	*/
d76 6
@


1.12
log
@Use a proper abstract interface for file accesses, so that we can record
the file name and line number.

This yields more meaningful error messages, and the possibility for yet
more.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.11 2000/01/11 14:06:12 espie Exp $	*/
a146 2

typedef short pbent;		/* pushback entry; needs to hold chars + EOF */
@


1.11
log
@Don't recognize built-ins in contexts where they don't make sense.
Namely, it doesn't help to try and expand include if it's not followed
by parenthesis and a filename.

This should make applications like sendmail m4 scripts more sturdy for
unquoted machine names that happen to collide with built-ins.

The only drawback is that our m4 may now do intelligent things with scripts
that don't work on other systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.10 2000/01/05 16:06:14 espie Exp $	*/
d150 9
d166 1
a166 1
#define gpbc() 	 (bp > bufbase) ? *--bp : getc(infile[ilevel])
@


1.10
log
@Close PR-1021. make unix or vms `special' macros that expand to
themselves, with the proper quotes added.

Matches gnu-m4, not Solaris nor FreeBSD... better for robustness, as
it makes for more transparent expansions.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.9 1999/12/21 22:30:48 espie Exp $	*/
d80 2
@


1.9
log
@Recursive definitions are not the real problem.
Trying to expand them is.

So flag obvious recursive definitions for later, and give an error
only if we expand them.

(Some gnu-m4 files, including autoconf, do define some macros with
themselves as the replacement text, for use in test-if-set patterns)

Since type is no longer MACRTYPE, those macros end up in builtins...
but this is not a problem, since expanding them is an error.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.8 1999/11/20 17:49:00 espie Exp $	*/
d75 1
@


1.8
log
@Optimization: cache the hashed value to avoid negative comparisons.
With 2^32 possible hash values, this means that collisions no longer
incur supplementary string compares, which was most of the reason for
STREQ in the first place...
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.7 1999/09/14 08:35:17 espie Exp $	*/
d76 3
a78 1
#define STATIC          128
d125 6
a130 6
struct ndblock {                /* hastable structure         */
        char    *name;          /* entry name..               */
        char    *defn;          /* definition..               */
        int     type;           /* type of the entry..        */
	unsigned hv;
        ndptr   nxtptr;         /* link to next entry..       */
@


1.7
log
@Style: kill register and indent properly.
Let indx match netbsd flavor, to simplify diffs.
Show how many quotes were not closed.
Increase stack slightly, now that we're no longer bound by argspace.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.6 1999/09/06 13:29:32 espie Exp $	*/
d127 1
@


1.6
log
@Remove STRSPACE limitations.
A bit wasteful, but not too intrusive.

Also remove pushback buffer limitations, as this would be mostly useless
otherwise.

Incidentally, pushback buffer overflow detection in pbstr was wrong.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.4 1997/12/10 20:24:16 deraadt Exp $	*/
d104 1
a104 1
#define STACKMAX        1024            /* size of call stack      	    */
@


1.5
log
@Misc minor changes:
- use err.h and kill oops,
- use __progname and kill basename,
- let indx use strstr
- proper EOS decl
@
text
@d100 9
a108 9
#define MAXINP          10              /* maximum include files   */
#define MAXOUT          10              /* maximum # of diversions */
#define MAXSTR          512             /* maximum size of string  */
#define BUFSIZE         4096            /* size of pushback buffer */
#define STACKMAX        1024            /* size of call stack      */
#define STRSPMAX        4096            /* size of string space    */
#define MAXTOK          MAXSTR          /* maximum chars in a tokn */
#define HASHSIZE        199             /* maximum size of hashtab */
#define MAXCCHARS	5		/* max size of comment/quote delim */
d180 1
a180 1
#define PREVEP	(mstack[fp+3].sstr)
@


1.4
log
@cgd: add a typedef which describes elements in the push-back buffer.  Make
that typedef 'short'.  'char' (which was previously used) because char
may be unsigned and ((char)EOF) != EOF if that is the case.  That was
causing the (char)EOF (0xff) pushed back in main to be interepreted as
a character, and, in some cases, to be written to the output.  'short'
was used rather than 'signed char' because if the latter is used,
0xff characters in the input would confuse m4.  (No point in introducing
(more?) 8-bit lossage.)
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.3 1996/06/26 05:36:14 deraadt Exp $	*/
d99 1
a99 1
#define EOS             (char) 0
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: mdef.h,v 1.7 1996/01/13 23:25:27 pk Exp $	*/
d141 2
@


1.2
log
@from netbsd:
Handle multichar comment and quote delimiters (up to 5 characters, per the
manual page). Takes care of PR#485.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mdef.h,v 1.6 1995/09/28 05:37:39 tls Exp $	*/
d107 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
