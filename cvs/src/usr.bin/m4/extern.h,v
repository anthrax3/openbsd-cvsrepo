head	1.54;
access;
symbols
	OPENBSD_6_1_BASE:1.54
	OPENBSD_6_0:1.54.0.10
	OPENBSD_6_0_BASE:1.54
	OPENBSD_5_9:1.54.0.6
	OPENBSD_5_9_BASE:1.54
	OPENBSD_5_8:1.54.0.8
	OPENBSD_5_8_BASE:1.54
	OPENBSD_5_7:1.54.0.2
	OPENBSD_5_7_BASE:1.54
	OPENBSD_5_6:1.54.0.4
	OPENBSD_5_6_BASE:1.54
	OPENBSD_5_5:1.52.0.10
	OPENBSD_5_5_BASE:1.52
	OPENBSD_5_4:1.52.0.6
	OPENBSD_5_4_BASE:1.52
	OPENBSD_5_3:1.52.0.4
	OPENBSD_5_3_BASE:1.52
	OPENBSD_5_2:1.52.0.2
	OPENBSD_5_2_BASE:1.52
	OPENBSD_5_1_BASE:1.51
	OPENBSD_5_1:1.51.0.2
	OPENBSD_5_0:1.50.0.4
	OPENBSD_5_0_BASE:1.50
	OPENBSD_4_9:1.50.0.2
	OPENBSD_4_9_BASE:1.50
	OPENBSD_4_8:1.49.0.4
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.49.0.2
	OPENBSD_4_7_BASE:1.49
	OPENBSD_4_6:1.48.0.6
	OPENBSD_4_6_BASE:1.48
	OPENBSD_4_5:1.48.0.2
	OPENBSD_4_5_BASE:1.48
	OPENBSD_4_4:1.45.0.10
	OPENBSD_4_4_BASE:1.45
	OPENBSD_4_3:1.45.0.8
	OPENBSD_4_3_BASE:1.45
	OPENBSD_4_2:1.45.0.6
	OPENBSD_4_2_BASE:1.45
	OPENBSD_4_1:1.45.0.4
	OPENBSD_4_1_BASE:1.45
	OPENBSD_4_0:1.45.0.2
	OPENBSD_4_0_BASE:1.45
	OPENBSD_3_9:1.43.0.2
	OPENBSD_3_9_BASE:1.43
	OPENBSD_3_8:1.41.0.2
	OPENBSD_3_8_BASE:1.41
	OPENBSD_3_7:1.40.0.2
	OPENBSD_3_7_BASE:1.40
	OPENBSD_3_6:1.39.0.4
	OPENBSD_3_6_BASE:1.39
	OPENBSD_3_5:1.39.0.2
	OPENBSD_3_5_BASE:1.39
	OPENBSD_3_4:1.38.0.2
	OPENBSD_3_4_BASE:1.38
	OPENBSD_3_3:1.30.0.4
	OPENBSD_3_3_BASE:1.30
	OPENBSD_3_2:1.30.0.2
	OPENBSD_3_2_BASE:1.30
	OPENBSD_3_1:1.29.0.2
	OPENBSD_3_1_BASE:1.29
	OPENBSD_3_0:1.28.0.2
	OPENBSD_3_0_BASE:1.28
	OPENBSD_2_9_BASE:1.21
	OPENBSD_2_9:1.21.0.4
	OPENBSD_2_8:1.21.0.2
	OPENBSD_2_8_BASE:1.21
	OPENBSD_2_7:1.18.0.2
	OPENBSD_2_7_BASE:1.18
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.54
date	2014.05.12.19.11.19;	author espie;	state Exp;
branches;
next	1.53;

1.53
date	2014.04.28.12.34.11;	author espie;	state Exp;
branches;
next	1.52;

1.52
date	2012.04.12.17.00.11;	author espie;	state Exp;
branches;
next	1.51;

1.51
date	2011.09.27.07.24.02;	author espie;	state Exp;
branches;
next	1.50;

1.50
date	2010.09.07.19.58.09;	author marco;	state Exp;
branches;
next	1.49;

1.49
date	2009.10.14.17.19.47;	author sthen;	state Exp;
branches;
next	1.48;

1.48
date	2008.08.21.20.59.14;	author espie;	state Exp;
branches;
next	1.47;

1.47
date	2008.08.16.12.23.50;	author espie;	state Exp;
branches;
next	1.46;

1.46
date	2008.08.16.12.21.46;	author espie;	state Exp;
branches;
next	1.45;

1.45
date	2006.03.20.20.27.45;	author espie;	state Exp;
branches;
next	1.44;

1.44
date	2006.03.20.10.55.19;	author espie;	state Exp;
branches;
next	1.43;

1.43
date	2006.01.20.23.10.19;	author espie;	state Exp;
branches;
next	1.42;

1.42
date	2005.09.06.15.33.21;	author espie;	state Exp;
branches;
next	1.41;

1.41
date	2005.05.29.18.44.36;	author espie;	state Exp;
branches;
next	1.40;

1.40
date	2005.03.02.10.12.15;	author espie;	state Exp;
branches;
next	1.39;

1.39
date	2003.11.17.17.12.10;	author espie;	state Exp;
branches;
next	1.38;

1.38
date	2003.06.30.22.13.32;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2003.06.30.22.11.38;	author espie;	state Exp;
branches;
next	1.36;

1.36
date	2003.06.30.22.10.21;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2003.06.30.21.47.21;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2003.06.30.21.42.50;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.18.21.08.07;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2003.06.12.14.36.43;	author espie;	state Exp;
branches;
next	1.31;

1.31
date	2003.06.03.02.56.10;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2002.04.28.14.37.12;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2002.02.16.21.27.48;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2001.10.10.18.12.00;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2001.09.27.11.40.33;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2001.09.19.13.14.18;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2001.09.18.14.55.52;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2001.09.18.14.43.22;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2001.09.18.14.05.14;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2001.09.18.13.52.58;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2000.07.27.17.44.33;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2000.07.24.23.08.25;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2000.07.02.01.17.00;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2000.03.18.01.06.55;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.11.15.54.44;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2000.01.15.14.26.00;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2000.01.12.17.49.53;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2000.01.11.14.06.11;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	99.11.30.22.19.50;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	99.11.20.17.48.59;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	99.11.17.15.34.13;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	99.09.14.08.35.16;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.09.14.08.21.36;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	99.09.06.13.29.32;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.09.06.13.20.40;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.09.06.13.15.33;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	99.09.06.13.10.48;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	97.12.10.20.24.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.36.12;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.15.01.12.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.54
log
@adjust to ohash being in libutil now, and to the interface changes.
fix potential integer overflows in memory allocation (mostly for pedagogical
purposes, these are unlikely to overflow in practice)
move the rest of lst.lib stuff into its own directory.
@
text
@/*	$OpenBSD: extern.h,v 1.53 2014/04/28 12:34:11 espie Exp $	*/
/*	$NetBSD: extern.h,v 1.3 1996/01/13 23:25:24 pk Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ozan Yigit at York University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)extern.h	8.1 (Berkeley) 6/6/93
 */

/* eval.c */
extern void	eval(const char *[], int, int, int);
extern void	dodefine(const char *, const char *);
extern unsigned long expansion_id;

/* expr.c */
extern int	expr(const char *);

/* gnum4.c */
extern void	addtoincludepath(const char *);
extern struct input_file *fopen_trypath(struct input_file *, const char *);
extern void doindir(const char *[], int);
extern void dobuiltin(const char *[], int);
extern void dopatsubst(const char *[], int);
extern void doregexp(const char *[], int);

extern void doprintlineno(struct input_file *);
extern void doprintfilename(struct input_file *);

extern void doesyscmd(const char *);
extern void getdivfile(const char *);
extern void doformat(const char *[], int);

/* look.c */

#define FLAG_UNTRACED 0
#define FLAG_TRACED 1
#define FLAG_NO_TRACE 2

extern void	init_macros(void);
extern ndptr	lookup(const char *);
extern void mark_traced(const char *, int);
extern struct ohash macros;

extern struct macro_definition *lookup_macro_definition(const char *);
extern void	macro_define(const char *, const char *);
extern void	macro_pushdef(const char *, const char *);
extern void	macro_popdef(const char *);
extern void	macro_undefine(const char *);
extern void	setup_builtin(const char *, unsigned int);
extern void	macro_for_all(void (*)(const char *, struct macro_definition *));
#define macro_getdef(p)		((p)->d)
#define macro_name(p)		((p)->name)
#define macro_builtin_type(p)	((p)->builtin_type)
#define is_traced(p) ((p)->trace_flags == FLAG_NO_TRACE ? (trace_flags & TRACE_ALL) : (p)->trace_flags)

extern ndptr macro_getbuiltin(const char *);

/* main.c */
extern void outputstr(const char *);
extern void do_emit_synchline(void);
extern int exit_code;
#define emit_synchline() do { if (synch_lines) do_emit_synchline(); } while(0)

/* misc.c */
extern void	chrsave(int);
extern char	*compute_prevep(void);
extern void	getdiv(int);
extern ptrdiff_t indx(const char *, const char *);
extern void	initspaces(void);
extern void	killdiv(void);
extern void	onintr(int);
extern void	pbnum(int);
extern void	pbnumbase(int, int, int);
extern void	pbunsigned(unsigned long);
extern void	pbstr(const char *);
extern void	pushback(int);
extern void	*xalloc(size_t, const char *, ...);
extern void	*xcalloc(size_t, size_t, const char *, ...);
extern void	*xrealloc(void *, size_t, const char *, ...);
extern void	*xreallocarray(void *, size_t, size_t, const char *, ...);
extern char	*xstrdup(const char *);
extern void	usage(void);
extern void	resizedivs(int);
extern size_t	buffer_mark(void);
extern void	dump_buffer(FILE *, size_t);
extern void	__dead m4errx(int, const char *, ...);

extern int	obtain_char(struct input_file *);
extern void	set_input(struct input_file *, FILE *, const char *);
extern void	release_input(struct input_file *);

/* speeded-up versions of chrsave/pushback */
#define PUSHBACK(c)				\
	do {					\
		if (bp >= endpbb)		\
			enlarge_bufspace();	\
		*bp++ = (c);			\
	} while(0)

#define CHRSAVE(c)				\
	do {					\
		if (ep >= endest)		\
			enlarge_strspace();	\
		*ep++ = (c);			\
	} while(0)

/* and corresponding exposure for local symbols */
extern void enlarge_bufspace(void);
extern void enlarge_strspace(void);
extern unsigned char *endpbb;
extern char *endest;

/* trace.c */
extern unsigned int trace_flags;
#define TRACE_ALL	512
extern void trace_file(const char *);
extern size_t trace(const char **, int, struct input_file *);
extern void finish_trace(size_t);
extern void set_trace_flags(const char *);
extern FILE *traceout;

extern stae *mstack;		/* stack of m4 machine */
extern char *sstack;		/* shadow stack, for string space extension */
extern FILE *active;		/* active output file pointer */
extern struct input_file infile[];/* input file stack (0=stdin) */
extern FILE **outfile;		/* diversion array(0=bitbucket) */
extern int maxout;		/* maximum number of diversions */
extern int fp;			/* m4 call frame pointer */
extern int ilevel;		/* input file stack pointer */
extern int oindex;		/* diversion index. */
extern int sp;			/* current m4 stack pointer */
extern unsigned char *bp;	/* first available character */
extern unsigned char *buf;	/* push-back buffer */
extern unsigned char *bufbase;	/* buffer base for this ilevel */
extern unsigned char *bbase[];	/* buffer base per ilevel */
extern char ecommt[MAXCCHARS+1];/* end character for comment */
extern char *ep;		/* first free char in strspace */
extern char lquote[MAXCCHARS+1];/* left quote character (`) */
extern char **m4wraps;		/* m4wrap string default. */
extern int maxwraps;		/* size of m4wraps array */
extern int wrapindex;		/* current index in m4wraps */

extern char *null;		/* as it says.. just a null. */
extern char rquote[MAXCCHARS+1];/* right quote character (') */
extern char scommt[MAXCCHARS+1];/* start character for comment */
extern int  synch_lines;	/* line synchronisation directives */

extern int mimic_gnu;		/* behaves like gnu-m4 */
extern int prefix_builtins;	/* prefix builtin macros with m4_ */

@


1.53
log
@check for integer overflows in custom allocs, okay jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.52 2012/04/12 17:00:11 espie Exp $	*/
d106 1
a106 1
extern void	*xallocarray(size_t, size_t, const char *, ...);
@


1.52
log
@new m4 -g stuff:
- expr(`4**3')
- include(`hey I am not there') keeps going.

work with Baptiste Daroussin, who had the idea but didn't nail all details
right.

okay otto@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.51 2011/09/27 07:24:02 espie Exp $	*/
d105 4
a108 2
extern void	*xalloc(size_t, const char *fmt, ...);
extern void	*xrealloc(void *, size_t, const char *fmt, ...);
@


1.51
log
@zap dead stuff
from Michael W. Bombardieri
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.50 2010/09/07 19:58:09 marco Exp $	*/
d89 1
@


1.50
log
@Remove stray spaces.  No code change.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.49 2009/10/14 17:19:47 sthen Exp $	*/
a146 1
extern ndptr hashtab[];		/* hash table for macros etc. */
@


1.49
log
@Support the -P option from gnu m4, which prefixes builtins with the
string m4_. Feedback from jmc@@, Tobias Ulmer, Matthew Dempsky - thanks!
ok espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.48 2008/08/21 20:59:14 espie Exp $	*/
d47 1
a47 1
extern void 	addtoincludepath(const char *);
a59 1
 
d73 7
a79 7
extern void 	macro_define(const char *, const char *);
extern void 	macro_pushdef(const char *, const char *);
extern void 	macro_popdef(const char *);
extern void 	macro_undefine(const char *);
extern void 	setup_builtin(const char *, unsigned int);
extern void 	macro_for_all(void (*)(const char *, struct macro_definition *));
#define macro_getdef(p) 	((p)->d)
d93 1
a93 1
extern char 	*compute_prevep(void);
d96 1
a96 1
extern void 	initspaces(void);
d113 1
a113 1
extern int 	obtain_char(struct input_file *);
d124 1
a124 1
	
d154 1
a154 1
extern int fp; 			/* m4 call frame pointer */
@


1.48
log
@use unsigned char for buffers, allow differentiating between EOF and y".

okay otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.47 2008/08/16 12:23:50 espie Exp $	*/
d176 1
@


1.47
log
@not yet, committed too much
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.45 2006/03/20 20:27:45 espie Exp $	*/
d112 1
a112 1
extern void	m4errx(int, const char *, ...);
d136 1
a136 1
extern char *endpbb;
d159 4
a162 4
extern char *bp;		/* first available character */
extern char *buf;		/* push-back buffer */
extern char *bufbase;		/* buffer base for this ilevel */
extern char *bbase[];		/* buffer base per ilevel */
@


1.46
log
@argument parsing should only skip spaces outside of parenthesis.
Inside matching parenthesis, keep spaces as is (use chrsave instead of
pbstr, since there's no way it can be a further macro expansion).
Fixes a long-standing issue with autoconf (   --option -> --option),
matches other m4 than gnum4

okay millert@@, fries@@
@
text
@d112 1
a112 1
extern void	__dead m4errx(int, const char *, ...);
d136 1
a136 1
extern unsigned char *endpbb;
d159 4
a162 4
extern unsigned char *bp;	/* first available character */
extern unsigned char *buf;	/* push-back buffer */
extern unsigned char *bufbase;	/* buffer base for this ilevel */
extern unsigned char *bbase[];	/* buffer base per ilevel */
@


1.45
log
@add limited support for format builtin in gnu-m4 mode, because I'm fed
up of patching it away in various autoconf derivatives.

okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.44 2006/03/20 10:55:19 espie Exp $	*/
d112 1
a112 1
extern void	m4errx(int, const char *, ...);
d136 1
a136 1
extern char *endpbb;
d159 4
a162 4
extern char *bp;		/* first available character */
extern char *buf;		/* push-back buffer */
extern char *bufbase;		/* buffer base for this ilevel */
extern char *bbase[];		/* buffer base per ilevel */
@


1.44
log
@report function m4errx, that shows app-specific data (filename/linenumber)
before the error message. Use it to simplify code.

okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.43 2006/01/20 23:10:19 espie Exp $	*/
d58 2
a59 1
extern void	getdivfile(const char *);
@


1.43
log
@use stdint.h where appropriate. okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.42 2005/09/06 15:33:21 espie Exp $	*/
d111 1
@


1.42
log
@finally make our m4 SusV3-compliant.

- changecom and changequote have a simple definition (that matches gnu-m4,
coincidentally, so we no longer need two distinct modes for these)

- off-by-one bug in -s, this finally works.

- reorder main parser loop, so that we can use alphabetic constructs in
quotes/comments.

- rename putback to pushback, this matches comments, and makes more sense.

- more uniform (and updated) description of changequote/changecom.

- new, systematic regression tests of comments/quotes.

- framework to test -s: one perl script to reconstitute `full' files with
all line numbers, so that we can verify the output without needing a
complete match.

okay otto@@, fries@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.41 2005/05/29 18:44:36 espie Exp $	*/
d141 1
a141 1
extern ssize_t trace(const char **, int, struct input_file *);
@


1.41
log
@fix a few minor compatibility issues.
- let eval() handle a base and number of digits, like it's advertized to.
- in gnu-mode, undivert can take file names as arguments.
- in gnu-mode, map can handle reversed charsets.

Suggestions and okay otto@@, mostly prompted by looking at the regress
tests in newer gnu-m4.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.40 2005/03/02 10:12:15 espie Exp $	*/
d103 1
a103 1
extern void	putback(int);
d116 2
a117 2
/* speeded-up versions of chrsave/putback */
#define PUTBACK(c)				\
@


1.40
log
@let m4wrap handle multiple wraps, both in normal and gnu-mode.
based on Noah Misch's bug report.
okay otto, jmc.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.39 2003/11/17 17:12:10 espie Exp $	*/
d58 1
d100 1
@


1.39
log
@Modify xalloc so that it also takes err(3)-like arguments.
Write an xrealloc wrapper that works the same way, and use it as well.

People who feel like it may want to add more explicit error messages to
all the places m4 can fail allocating memory...

okay tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.38 2003/06/30 22:13:32 espie Exp $	*/
d162 4
a165 1
extern char *m4wraps;		/* m4wrap string default. */
@


1.38
log
@Fold trace status into the single hash table that's left.
Inline some macros/functions for speed.
So, this achieves the goal of one single lookup for macro/trace status,
which does speed up m4 in partial tracing situations somewhat.
This does also speed up m4 in large pushdef situations, since it no longer
has to lookup large chains of macros.

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.37 2003/06/30 22:11:38 espie Exp $	*/
d102 2
a103 1
extern void	*xalloc(size_t);
@


1.37
log
@add a flag for each macro name that records built-in status.
Fold built-in lookup into normal lookup.
okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.36 2003/06/30 22:10:21 espie Exp $	*/
d61 5
d68 2
d78 5
a82 2
extern const char *macro_name(ndptr);
extern struct macro_definition *macro_getdef(ndptr);
a83 1
extern int macro_builtin_type(ndptr);
d135 2
a136 2
extern void mark_traced(const char *, int);
extern int is_traced(const char *);
a139 1
extern int traced_macros;
a141 1
extern void init_trace(void);
@


1.36
log
@replace old hash structure with open hashing.
make the stack structure of macro definitions explicit.
okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.35 2003/06/30 21:47:21 espie Exp $	*/
d73 2
a77 1
extern int builtin_type(const char *);
@


1.35
log
@Make the trace status of a macro an actual argument that gets pushed
in the frame for the macro expansion.

(This will allow one single lookup to grab the macro definition and
the trace status)

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.34 2003/06/30 21:42:50 espie Exp $	*/
d61 1
@


1.34
log
@clean up internal lookup interface:
define an interface with explicit define/pushdef/popdef... and use it.
That way, most details of the hashtable are no longer visible.

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.33 2003/06/18 21:08:07 espie Exp $	*/
d39 1
a39 1
extern void	eval(const char *[], int, int);
@


1.33
log
@- store builtin name as definition for builtin macros.
this removes the need for code->name conversion, in exchange for
systematically testing the definition type, since we can no longer
rely on the defn being NULL.

- commonnalize the builtin-detection code, so that we can use it for pushdef
as well with define, so that pushdef handles builtins correctly as well.

okay fries@@, millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.32 2003/06/12 14:36:43 espie Exp $	*/
a60 2
extern ndptr	addent(const char *);
extern unsigned	hash(const char *);
d62 10
a71 1
extern void	remhash(const char *, int);
d159 1
@


1.32
log
@switch from linked list to hash table for traced macros.
speeds up recent autoconf somewhat, since it traces a large set
of individual macro.

(more rework of m4 internal interfaces to unify lookup tables in order)

okay fries@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.31 2003/06/03 02:56:10 millert Exp $	*/
a68 1
extern char *builtin_realname(int);
@


1.31
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.30 2002/04/28 14:37:12 espie Exp $	*/
d126 1
@


1.30
log
@Implement -s.
Triggered by recent FreeBSD changes.

- emits #line directives at every file change (like FreeBSD)
- maintains a synch_lineno variable to verify when the output gets out
of synch with the input, so that it can emit #line to re-synch as well
(unlike FreeBSD)

To do: either handle \end-of-line, or recognize when a macro expansion
is in progress, so that line synch don't perturb cpp on multi-line
expansions.

With this, we should have a fully POSIX-compliant m4.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.29 2002/02/16 21:27:48 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.29
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.28 2001/10/10 18:12:00 espie Exp $	*/
d74 2
d153 1
@


1.28
log
@Prototypes shouldn't mention argument name.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.27 2001/09/27 11:40:33 espie Exp $	*/
d43 2
a44 2
extern void	eval __P((const char *[], int, int));
extern void	dodefine __P((const char *, const char *));
d48 1
a48 1
extern int	expr __P((const char *));
d51 6
a56 6
extern void 	addtoincludepath __P((const char *));
extern struct input_file *fopen_trypath __P((struct input_file *, const char *));
extern void doindir __P((const char *[], int));
extern void dobuiltin __P((const char *[], int));
extern void dopatsubst __P((const char *[], int));
extern void doregexp __P((const char *[], int));
d58 2
a59 2
extern void doprintlineno __P((struct input_file *));
extern void doprintfilename __P((struct input_file *));
d61 1
a61 1
extern void doesyscmd __P((const char *));
d65 4
a68 4
extern ndptr	addent __P((const char *));
extern unsigned	hash __P((const char *));
extern ndptr	lookup __P((const char *));
extern void	remhash __P((const char *, int));
d71 3
a73 3
extern void outputstr __P((const char *));
extern int builtin_type __P((const char *));
extern char *builtin_realname __P((int));
d76 21
a96 21
extern void	chrsave __P((int));
extern char 	*compute_prevep __P((void));
extern void	getdiv __P((int));
extern ptrdiff_t indx __P((const char *, const char *));
extern void 	initspaces __P((void));
extern void	killdiv __P((void));
extern void	onintr __P((int));
extern void	pbnum __P((int));
extern void	pbunsigned __P((unsigned long));
extern void	pbstr __P((const char *));
extern void	putback __P((int));
extern void	*xalloc __P((size_t));
extern char	*xstrdup __P((const char *));
extern void	usage __P((void));
extern void	resizedivs __P((int));
extern size_t	buffer_mark __P((void));
extern void	dump_buffer __P((FILE *, size_t));

extern int 	obtain_char __P((struct input_file *));
extern void	set_input __P((struct input_file *, FILE *, const char *));
extern void	release_input __P((struct input_file *));
d114 2
a115 2
extern void enlarge_bufspace __P((void));
extern void enlarge_strspace __P((void));
d120 5
a124 5
extern void mark_traced __P((const char *, int));
extern int is_traced __P((const char *));
extern void trace_file __P((const char *));
extern ssize_t trace __P((const char **, int, struct input_file *));
extern void finish_trace __P((size_t));
d126 1
a126 1
extern void set_trace_flags __P((const char *));
@


1.27
log
@traceon/traceoff built-ins.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.26 2001/09/19 13:14:18 espie Exp $	*/
d51 2
a52 2
extern void 	addtoincludepath __P((const char *dirname));
extern struct input_file *fopen_trypath __P((struct input_file *, const char *filename));
d90 1
a90 1
extern void	resizedivs __P((int n));
@


1.26
log
@inline some very common putback/chrsave. Worth roughly 10%
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.25 2001/09/18 14:55:52 espie Exp $	*/
d120 1
a120 1
extern void mark_traced __P((const char *));
@


1.25
log
@Tracing facilities. Same style as gnu-m4, because it's mostly used for
autoconf right now.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.24 2001/09/18 14:43:22 espie Exp $	*/
d97 21
@


1.24
log
@instrumentation for tracing mode: macro expansion
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.23 2001/09/18 14:05:14 espie Exp $	*/
d98 9
@


1.23
log
@let defn(builtin) work enough so that
define(`newmacro', defn(builtin))
will work, as it should.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.22 2001/09/18 13:52:58 espie Exp $	*/
d45 1
d91 2
@


1.22
log
@One single point for all macros/builtin expansion.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.21 2000/07/27 17:44:33 espie Exp $	*/
d72 1
@


1.21
log
@Handle unlimited diverts for m4 -g.

Problem with autoconf noticed by d@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.20 2000/07/24 23:08:25 espie Exp $	*/
a43 1
extern void	expand __P((const char *[], int));
@


1.20
log
@Implement esyscmd
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.19 2000/07/02 01:17:00 espie Exp $	*/
d89 1
d101 2
a102 1
extern FILE *outfile[];		/* diversion array(0=bitbucket) */
@


1.19
log
@Make the m4 machine stack dynamically sized.

Fix strspace automatic extension.
The assumption that simply updating the current pointer works is false,
there are cases where previous entries on the stack would absorp vast
amounts of string space, and overload the non-updated entries.

To fix it, we use a shadow copy of the stack, which only records which
entries are pointers within strspace, so that a resize can adjust all
those pointers at once.

Reviewed by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.18 2000/03/18 01:06:55 espie Exp $	*/
d60 2
@


1.18
log
@Last needed m4 changes to bootstrap autoconf without gnu-m4.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.17 2000/03/11 15:54:44 espie Exp $	*/
d94 2
a95 1
extern stae mstack[];		/* stack of m4 machine */
@


1.17
log
@Add a few builtins for greater compatibility with gnu-m4, and extended
functionality.
* regular expressions,
* line-number reporting
* `meta'-macros, builtin and indir.

Reviewed by pjanzen@@, tested by fries@@ and a few others.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.16 2000/01/15 14:26:00 espie Exp $	*/
d114 1
@


1.16
log
@There is no need to waste short for holding EOF in the pushback buffer.
Now that the input_file structure is sufficiently fleshed out, just stop
EOF at the putback level, and make sure files at EOF STAY at EOF.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.15 2000/01/12 17:49:53 espie Exp $	*/
d53 8
d70 1
d81 1
d84 1
a84 1
extern char	*xalloc __P((size_t));
@


1.15
log
@Use a proper abstract interface for file accesses, so that we can record
the file name and line number.

This yields more meaningful error messages, and the possibility for yet
more.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.14 2000/01/11 14:06:11 espie Exp $	*/
d92 4
a95 4
extern pbent *bp;		/* first available character */
extern pbent *buf;		/* push-back buffer */
extern pbent *bufbase;		/* buffer base for this ilevel */
extern pbent *bbase[];		/* buffer base per ilevel */
@


1.14
log
@Don't recognize built-ins in contexts where they don't make sense.
Namely, it doesn't help to try and expand include if it's not followed
by parenthesis and a filename.

This should make applications like sendmail m4 scripts more sturdy for
unquoted machine names that happen to collide with built-ins.

The only drawback is that our m4 may now do intelligent things with scripts
that don't work on other systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.13 1999/11/30 22:19:50 espie Exp $	*/
d52 1
a52 1
extern FILE 	*fopen_trypath __P((const char *filename));
d78 5
d86 1
a86 1
extern FILE *infile[];		/* input file stack (0=stdin) */
@


1.13
log
@Clean up comment/quote recognition a little bit:
- use strlcpy to make clear that the strings are line terminated,
- remove the number of magic constants,
- use assert() for preconditions,
- use puts instead of looping over array of chars...
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.12 1999/11/20 17:48:59 espie Exp $	*/
d59 3
@


1.12
log
@Optimization: cache the hashed value to avoid negative comparisons.
With 2^32 possible hash values, this means that collisions no longer
incur supplementary string compares, which was most of the reason for
STREQ in the first place...
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.11 1999/11/17 15:34:13 espie Exp $	*/
d88 1
a88 1
extern char ecommt[];		/* end character for comment */
d90 1
a90 1
extern char lquote[];		/* left quote character (`) */
d93 2
a94 2
extern char rquote[];		/* right quote character (') */
extern char scommt[];		/* start character for comment */
@


1.11
log
@Turn warnings on,
Add missing prototypes,
Make local functions static,
Sort extern.h by file,
Constify all char * that can be,
Copy temp file name so that eval does not modify its arguments.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.10 1999/09/14 08:35:16 espie Exp $	*/
d56 1
a56 1
extern int	hash __P((const char *));
@


1.10
log
@Style: kill register and indent properly.
Let indx match netbsd flavor, to simplify diffs.
Show how many quotes were not closed.
Increase stack slightly, now that we're no longer bound by argspace.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.8 1999/09/06 13:29:32 espie Exp $	*/
d42 32
a73 33
char	*xalloc __P((unsigned long));
int	expr __P((char *));
ndptr	addent __P((char *));
void	chrsave __P((int));
void	dochc __P((char *[], int));
void	dochq __P((char *[], int));
void	dodefine __P((char *, char *));
void	dodefn __P((char *));
void	dodiv __P((int));
void	dodump __P((char *[], int));
void	doifelse __P((char *[], int));
int	doincl __P((char *));
int	dopaste __P((char *));
void	dopushdef __P((char *, char *));
void	dosub __P((char *[], int));
void	doundiv __P((char *[], int));
void	eval __P((char *[], int, int));
void	expand __P((char *[], int));
void	getdiv __P((int));
char	*xstrdup __P((const char *));
int	hash __P((char *));
ptrdiff_t	indx __P((const char *, const char *));
void	killdiv __P((void));
ndptr	lookup __P((char *));
void	map __P((char *, char *, char *, char *));
void	onintr __P((int));
void	pbnum __P((int));
void	pbstr __P((char *));
void	putback __P((int));
void	remhash __P((char *, int));
void	usage __P((void));
void initspaces __P((void));
char *compute_prevep __P((void));
a95 3
/* gnum4.c */
extern FILE *fopen_trypath __P((const char *filename));
extern void addtoincludepath __P((const char *dirname));
@


1.9
log
@Implement -I option and M4PATH environment variable
@
text
@@


1.8
log
@Remove STRSPACE limitations.
A bit wasteful, but not too intrusive.

Also remove pushback buffer limitations, as this would be mostly useless
otherwise.

Incidentally, pushback buffer overflow detection in pbstr was wrong.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.4 1997/12/10 20:24:12 deraadt Exp $	*/
d96 4
@


1.7
log
@Get rid of mktemp in the handling of diversion.

Simply put, mkstemp/unlink/rewind has the proper semantics under Unix,
and so we don't have to keep track about temp file names and remove them.
@
text
@d73 2
d86 1
a86 1
extern pbent buf[];		/* push-back buffer */
a89 2
extern char *endest;		/* end of string space */
extern pbent *endpbb;		/* end of push-back buffer */
@


1.6
log
@synch
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.5 1999/09/06 13:10:48 espie Exp $	*/
a91 1
extern char *m4temp;		/* filename for diversions */
@


1.5
log
@Misc minor changes:
- use err.h and kill oops,
- use __progname and kill basename,
- let indx use strstr
- proper EOS decl
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.4 1997/12/10 20:24:12 deraadt Exp $	*/
d63 1
a63 1
int	indx __P((char *, char *));
@


1.4
log
@cgd: add a typedef which describes elements in the push-back buffer.  Make
that typedef 'short'.  'char' (which was previously used) because char
may be unsigned and ((char)EOF) != EOF if that is the case.  That was
causing the (char)EOF (0xff) pushed back in main to be interepreted as
a character, and, in some cases, to be written to the output.  'short'
was used rather than 'signed char' because if the latter is used,
0xff characters in the input would confuse m4.  (No point in introducing
(more?) 8-bit lossage.)
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.3 1996/06/26 05:36:12 deraadt Exp $	*/
a41 1
char	*basename __P((char *));
a67 1
void	oops __P((const char *, ...));
a94 1
extern char *progname;		/* program name */
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.3 1996/01/13 23:25:24 pk Exp $	*/
d85 4
a88 4
extern char *bp;		/* first available character */
extern char buf[];		/* push-back buffer */
extern char *bufbase;		/* buffer base for this ilevel */
extern char *bbase[];		/* buffer base per ilevel */
d91 1
a91 1
extern char *endpbb;		/* end of push-back buffer */
@


1.2
log
@from netbsd:
Handle multichar comment and quote delimiters (up to 5 characters, per the
manual page). Takes care of PR#485.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: extern.h,v 1.2 1995/09/28 05:37:34 tls Exp $	*/
d88 1
a88 1
extern char ecommt;		/* end character for comment */
d92 1
a92 1
extern char lquote;		/* left quote character (`) */
d97 2
a98 2
extern char rquote;		/* right quote character (') */
extern char scommt;		/* start character for comment */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
