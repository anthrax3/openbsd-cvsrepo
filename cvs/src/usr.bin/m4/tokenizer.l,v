head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.8.0.22
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.18
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.14
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.16
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.12
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.10
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.6
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2017.06.17.01.55.16;	author bcallah;	state Exp;
branches;
next	1.9;
commitid	6LkPbuwFnKUakZt4;

1.9
date	2017.06.15.13.48.42;	author bcallah;	state Exp;
branches;
next	1.8;
commitid	cJah5U98w19KunxL;

1.8
date	2012.04.12.17.00.11;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.22.20.40.44;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.21.21.00.14;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.16.12.23.50;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.16.12.21.46;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.20.23.10.19;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.12.21.28.35;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.12.21.17.03;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Don't need to link with -ll or -ly.
ok millert@@ (who spotted and provided the -ll removal bits)
@
text
@%{
/* $OpenBSD: tokenizer.l,v 1.9 2017/06/15 13:48:42 bcallah Exp $ */
/*
 * Copyright (c) 2004 Marc Espie <espie@@cvs.openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include "parser.h"
#include <assert.h>
#include <stdlib.h>
#include <errno.h>
#include <stdint.h>
#include <limits.h>

extern void m4_warnx(const char *, ...);
extern int mimic_gnu;
extern int32_t yylval;

int32_t number(void);
int32_t parse_radix(void);
%}

delim 	[ \t\n]
ws	{delim}+
hex	0[xX][0-9a-fA-F]+
oct	0[0-7]*
dec	[1-9][0-9]*
radix	0[rR][0-9]+:[0-9a-zA-Z]+

%option noyywrap

%%
{ws}			{/* just skip it */}
{hex}|{oct}|{dec}	{ yylval = number(); return(NUMBER); }
{radix}			{ if (mimic_gnu) {
				yylval = parse_radix(); return(NUMBER);
			  } else {
			  	return(ERROR);
			  }
			}
"<="			{ return(LE); }
">="			{ return(GE); }
"<<"			{ return(LSHIFT); }
">>"			{ return(RSHIFT); }
"=="			{ return(EQ); }
"!="			{ return(NE); }
"&&"			{ return(LAND); }
"||"			{ return(LOR); }
"**"			{ if (mimic_gnu) { return (EXPONENT); } }
.			{ return yytext[0]; }
%%

int32_t
number()
{
	long l;

	errno = 0;
	l = strtol(yytext, NULL, 0);
	if (((l == LONG_MAX || l == LONG_MIN) && errno == ERANGE) ||
	    l > INT32_MAX || l < INT32_MIN)
		m4_warnx("numeric overflow in expr: %s", yytext);
	return l;
}

int32_t
parse_radix()
{
	long base;
	char *next;
	long l;
	int d;

	l = 0;
	base = strtol(yytext+2, &next, 0);
	if (base > 36 || next == NULL) {
		m4_warnx("error in number %s", yytext);
	} else {
		next++;
		while (*next != 0) {
			if (*next >= '0' && *next <= '9')
				d = *next - '0';
			else if (*next >= 'a' && *next <= 'z')
				d = *next - 'a' + 10;
			else {
				assert(*next >= 'A' && *next <= 'Z');
				d = *next - 'A' + 10;
			}
			if (d >= base) {
				m4_warnx("error in number %s", yytext);
				return 0;
			}
			l = base * l + d;
			next++;
		}
	}
	return l;
}

@


1.9
log
@Add -E flag (make warnings fatal), following the behavior of GNU m4 1.4.9+
Help and direction millert@@ espie@@ anton@@ deraadt@@

ok espie@@
@
text
@d2 1
a2 1
/* $OpenBSD: tokenizer.l,v 1.8 2012/04/12 17:00:11 espie Exp $ */
d39 2
@


1.8
log
@new m4 -g stuff:
- expr(`4**3')
- include(`hey I am not there') keeps going.

work with Baptiste Daroussin, who had the idea but didn't nail all details
right.

okay otto@@, miod@@
@
text
@d2 1
a2 1
/* $OpenBSD: tokenizer.l,v 1.7 2010/03/22 20:40:44 espie Exp $ */
d25 1
d69 2
a70 3
	    l > INT32_MAX || l < INT32_MIN) {
		fprintf(stderr, "m4: numeric overflow in expr: %s\n", yytext);
	}
d85 1
a85 1
		fprintf(stderr, "m4: error in number %s\n", yytext);
d98 1
a98 2
				fprintf(stderr, 
				    "m4: error in number %s\n", yytext);
@


1.7
log
@add more gnum4 support: regexps do weird things with empty patterns (this
is required for newer autoconf).
fix the tokenizer for gnu extensions, allowing digits out of range is
ridiculous.
add POSIX2008 mkstemp and document it (also documenting that mktemp is
safe, not posix...)
tidy the manpage, do extra .Nm m4 -> .Nm.
okay otto@@, miod@@, jmc@@
@
text
@d2 1
a2 1
/* $OpenBSD: tokenizer.l,v 1.6 2008/08/21 21:00:14 espie Exp $ */
d56 1
@


1.6
log
@gnu extension: 0rN:az   for  baseN numbers.

okay otto@@
@
text
@d2 1
a2 1
/* $OpenBSD: tokenizer.l,v 1.5 2008/08/16 12:23:50 espie Exp $ */
d19 1
d79 1
d89 1
a89 1
				l = base * l + *next - '0';
d91 11
a101 3
				l = base * l + *next - 'a' + 10;
			else if (*next >= 'A' && *next <= 'Z')
				l = base * l + *next - 'A' + 10;
@


1.5
log
@not yet, committed too much
@
text
@d2 1
a2 1
/* $OpenBSD: tokenizer.l,v 1.3 2006/01/20 23:10:19 espie Exp $ */
d24 1
d28 1
d36 1
d41 6
d70 8
d79 17
d97 1
@


1.4
log
@argument parsing should only skip spaces outside of parenthesis.
Inside matching parenthesis, keep spaces as is (use chrsave instead of
pbstr, since there's no way it can be a further macro expansion).
Fixes a long-standing issue with autoconf (   --option -> --option),
matches other m4 than gnum4

okay millert@@, fries@@
@
text
@a23 1
extern int mimic_gnu;
a26 1
int32_t parse_radix(void);
a33 1
radix	0[rR][0-9]+:[0-9a-zA-Z]+
a37 6
{radix}			{ if (mimic_gnu) {
				yylval = parse_radix(); return(NUMBER);
			  } else {
			  	return(ERROR);
			  }
			}
a60 8
}

int32_t
parse_radix()
{
	long base;
	char *next;
	long l;
a61 17
	l = 0;
	base = strtol(yytext+2, &next, 0);
	if (base > 36 || next == NULL) {
		fprintf(stderr, "m4: error in number %s\n", yytext);
	} else {
		next++;
		while (*next != 0) {
			if (*next >= '0' && *next <= '9')
				l = base * l + *next - '0';
			else if (*next >= 'a' && *next <= 'z')
				l = base * l + *next - 'a' + 10;
			else if (*next >= 'A' && *next <= 'Z')
				l = base * l + *next - 'A' + 10;
			next++;
		}
	}
	return l;
a62 1

@


1.3
log
@use stdint.h where appropriate. okay millert@@
@
text
@d2 1
a2 1
/* $OpenBSD: tokenizer.l,v 1.2 2004/05/12 21:28:35 espie Exp $ */
d24 1
d28 1
d36 1
d41 6
d70 8
d79 17
d97 1
@


1.2
log
@all numbers as one composite regexp.
@
text
@d2 1
a2 1
/* $OpenBSD: tokenizer.l,v 1.1 2004/05/12 21:17:03 espie Exp $ */
d21 1
a21 1
#include <sys/types.h>
d57 1
a57 1
	    l > 0x7fffffff || l < (-0x7fffffff - 1)) {
@


1.1
log
@replace hand-made expr() parser with a lex/yacc affair that is shorter,
easier to understand and extend, and better conformant to Single Unix 3
(especially doing all arithmetic as int32_t).

Comments and approval millert@@, otto@@, fries@@
@
text
@d2 1
a2 1
/* $OpenBSD$ */
d23 1
d36 11
a46 13
{ws}	{/* just skip it */}
{hex}	{ yylval = number(); return(NUMBER); }
{oct}	{ yylval = number(); return(NUMBER); }
{dec}	{ yylval = number(); return(NUMBER); }
"<="	{ return(LE); }
">="	{ return(GE); }
"<<"	{ return(LSHIFT); }
">>"	{ return(RSHIFT); }
"=="	{ return(EQ); }
"!="	{ return(NE); }
"&&"	{ return(LAND); }
"||"	{ return(LOR); }
.	{ return yytext[0]; }
a62 1

@

