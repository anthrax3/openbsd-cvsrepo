head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.18
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.16
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.12
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.8
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.10
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.18
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.16
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.14
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.12
	OPENBSD_5_0:1.19.0.10
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.8
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.6
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12;
locks; strict;
comment	@ * @;


1.20
date	2013.11.26.21.08.12;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2009.06.07.13.29.50;	author ray;	state Exp;
branches;
next	1.18;

1.18
date	2007.10.17.20.02.33;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.11.02.47.52;	author ray;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.25.05.02.17;	author ray;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.26.08.32.00;	author steven;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.25.03.20.32;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.10.14.32.51;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.20.08.38.18;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.15.06.58.06;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.02.19.30.23;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.28.05.57.46;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.27.05.00.28;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.27.04.43.01;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.27.04.33.31;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.27.04.31.06;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.27.04.28.08;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.27.04.18.07;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.27.04.06.16;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.27.04.04.56;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.20
log
@unsigned char casts for ctype
ok okan
@
text
@/*	$OpenBSD: edit.c,v 1.19 2009/06/07 13:29:50 ray Exp $ */

/*
 * Written by Raymond Lai <ray@@cyth.net>.
 * Public domain.
 */

#include <sys/types.h>
#include <sys/wait.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <paths.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "common.h"
#include "extern.h"

int editit(const char *);

/*
 * Execute an editor on the specified pathname, which is interpreted
 * from the shell.  This means flags may be included.
 *
 * Returns -1 on error, or the exit value on success.
 */
int
editit(const char *pathname)
{
	char *argp[] = {"sh", "-c", NULL, NULL}, *ed, *p;
	sig_t sighup, sigint, sigquit, sigchld;
	pid_t pid;
	int saved_errno, st, ret = -1;

	ed = getenv("VISUAL");
	if (ed == NULL || ed[0] == '\0')
		ed = getenv("EDITOR");
	if (ed == NULL || ed[0] == '\0')
		ed = _PATH_VI;
	if (asprintf(&p, "%s %s", ed, pathname) == -1)
		return (-1);
	argp[2] = p;

	sighup = signal(SIGHUP, SIG_IGN);
	sigint = signal(SIGINT, SIG_IGN);
	sigquit = signal(SIGQUIT, SIG_IGN);
	sigchld = signal(SIGCHLD, SIG_DFL);
	if ((pid = fork()) == -1)
		goto fail;
	if (pid == 0) {
		execv(_PATH_BSHELL, argp);
		_exit(127);
	}
	while (waitpid(pid, &st, 0) == -1)
		if (errno != EINTR)
			goto fail;
	if (!WIFEXITED(st))
		errno = EINTR;
	else
		ret = WEXITSTATUS(st);

 fail:
	saved_errno = errno;
	(void)signal(SIGHUP, sighup);
	(void)signal(SIGINT, sigint);
	(void)signal(SIGQUIT, sigquit);
	(void)signal(SIGCHLD, sigchld);
	free(p);
	errno = saved_errno;
	return (ret);
}

/*
 * Parse edit command.  Returns 0 on success, -1 on error.
 */
int
eparse(const char *cmd, const char *left, const char *right)
{
	FILE *file;
	size_t nread;
	int fd;
	char *filename;
	char buf[BUFSIZ], *text;

	/* Skip whitespace. */
	while (isspace((unsigned char)*cmd))
		++cmd;

	text = NULL;
	switch (*cmd) {
	case '\0':
		/* Edit empty file. */
		break;

	case 'b':
		/* Both strings. */
		if (left == NULL)
			goto RIGHT;
		if (right == NULL)
			goto LEFT;

		/* Neither column is blank, so print both. */
		if (asprintf(&text, "%s\n%s\n", left, right) == -1)
			err(2, "could not allocate memory");
		break;

	case 'l':
LEFT:
		/* Skip if there is no left column. */
		if (left == NULL)
			break;

		if (asprintf(&text, "%s\n", left) == -1)
			err(2, "could not allocate memory");

		break;

	case 'r':
RIGHT:
		/* Skip if there is no right column. */
		if (right == NULL)
			break;

		if (asprintf(&text, "%s\n", right) == -1)
			err(2, "could not allocate memory");

		break;

	default:
		return (-1);
	}

	/* Create temp file. */
	if (asprintf(&filename, "%s/sdiff.XXXXXXXXXX", tmpdir) == -1)
		err(2, "asprintf");
	if ((fd = mkstemp(filename)) == -1)
		err(2, "mkstemp");
	if (text != NULL) {
		size_t len;
		ssize_t nwritten;

		len = strlen(text);
		if ((nwritten = write(fd, text, len)) == -1 ||
		    nwritten != len) {
			warn("error writing to temp file");
			cleanup(filename);
		}
	}
	close(fd);

	/* text is no longer used. */
	free(text);

	/* Edit temp file. */
	if (editit(filename) == -1) {
		warn("error editing %s", filename);
		cleanup(filename);
	}

	/* Open temporary file. */
	if (!(file = fopen(filename, "r"))) {
		warn("could not open edited file: %s", filename);
		cleanup(filename);
	}

	/* Copy temporary file contents to output file. */
	for (nread = sizeof(buf); nread == sizeof(buf);) {
		size_t nwritten;

		nread = fread(buf, sizeof(*buf), sizeof(buf), file);
		/* Test for error or end of file. */
		if (nread != sizeof(buf) &&
		    (ferror(file) || !feof(file))) {
			warnx("error reading edited file: %s", filename);
			cleanup(filename);
		}

		/*
		 * If we have nothing to read, break out of loop
		 * instead of writing nothing.
		 */
		if (!nread)
			break;

		/* Write data we just read. */
		nwritten = fwrite(buf, sizeof(*buf), nread, outfp);
		if (nwritten != nread) {
			warnx("error writing to output file");
			cleanup(filename);
		}
	}

	/* We've reached the end of the temporary file, so remove it. */
	if (unlink(filename))
		warn("could not delete: %s", filename);
	fclose(file);

	free(filename);

	return (0);
}
@


1.19
log
@Don't leak FILE * if multiple -o flags are given.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.18 2007/10/17 20:02:33 deraadt Exp $ */
d91 1
a91 1
	while (isspace(*cmd))
@


1.18
log
@- Be more careful about pre-existing SIGCHLD handlers (or SIG_IGN) by
  temporarily restoring default behaviour.  This is not 100% ideal.
  But this fixes editor handling in mail... bah, it is really unfortunate
  that got broken
- refactor the restoration code as well, to make it simpler
ok ray
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.17 2007/05/11 02:47:52 ray Exp $ */
d191 1
a191 1
		nwritten = fwrite(buf, sizeof(*buf), nread, outfile);
@


1.17
log
@Sync with editit from sendbug.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.16 2007/04/25 05:02:17 ray Exp $ */
d36 1
a36 1
	sig_t sighup, sigint, sigquit;
d38 1
a38 1
	int saved_errno, st;
d52 1
d62 1
a62 5
	free(p);
	(void)signal(SIGHUP, sighup);
	(void)signal(SIGINT, sigint);
	(void)signal(SIGQUIT, sigquit);
	if (!WIFEXITED(st)) {
d64 2
a65 3
		return (-1);
	}
	return (WEXITSTATUS(st));
d72 1
d75 1
a75 1
	return (-1);
@


1.16
log
@Copy signal-safe edit function from sendbug.

OK millert@@, threatened by deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.15 2007/02/26 08:32:00 steven Exp $ */
d27 4
a30 1
 * Takes the name of a file and opens it with an editor.
d38 1
a38 1
	int st;
a48 1
 top:
d52 2
a53 14
	if ((pid = fork()) == -1) {
		int saved_errno = errno;

		(void)signal(SIGHUP, sighup);
		(void)signal(SIGINT, sigint);
		(void)signal(SIGQUIT, sigquit);
		if (saved_errno == EAGAIN) {
			sleep(1);
			goto top;
		}
		free(p);
		errno = saved_errno;
		return (-1);
	}
d58 3
a61 7
	for (;;) {
		if (waitpid(pid, &st, 0) == -1) {
			if (errno != EINTR)
				return (-1);
		} else
			break;
	}
d65 2
a66 2
	if (!WIFEXITED(st) || WEXITSTATUS(st) != 0) {
		errno = ECHILD;
d69 10
a78 1
	return (0);
d164 1
a164 4
		if (errno == ECHILD)
			warnx("editor terminated abnormally");
		else
			warn("error editing %s", filename);
@


1.15
log
@don't store write(2) return value in size_t; fixes test against -1.

ok ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.14 2006/05/25 03:20:32 ray Exp $ */
d13 3
d24 1
a24 1
static void edit(const char *);
d29 2
a30 2
static void
edit(const char *filename)
d32 2
a33 1
	int status;
d35 10
a44 1
	const char *editor;
d46 21
a66 16
	editor = getenv("VISUAL");
	if (editor == NULL)
		editor = getenv("EDITOR");
	if (editor == NULL)
		editor = "vi";

	/* Start editor on temporary file. */
	switch (pid = fork()) {
	case 0:
		/* child */
		execlp(editor, editor, filename, (void *)NULL);
		warn("could not execute editor: %s", editor);
		cleanup(filename);
	case -1:
		warn("could not fork");
		cleanup(filename);
d68 7
a74 6

	/* parent */
	/* Wait for editor to exit. */
	if (waitpid(pid, &status, 0) == -1) {
		warn("waitpid");
		cleanup(filename);
d76 6
a81 5

	/* Check that editor terminated normally. */
	if (!WIFEXITED(status)) {
		warn("%s terminated abnormally", editor);
		cleanup(filename);
d83 1
d168 7
a174 1
	edit(filename);
@


1.14
log
@Remove xmktemp() and uses plain old mkstemp(3), avoiding race
conditions.

OK moritz@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.13 2006/05/10 14:32:51 ray Exp $ */
d72 1
a72 1
	size_t nread, nwritten;
d132 1
d157 2
@


1.13
log
@Now that lint is smarter, remove /* NOTREACHED */ comments.

OK jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.12 2006/02/20 08:38:18 otto Exp $ */
d15 1
d73 1
d126 15
a140 1
	filename = xmktemp(text);
a183 1
	/* filename was malloc()ed in xmktemp(). */
@


1.12
log
@Move two functions to separate file; from Ray Lai; ok jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.11 2006/02/15 06:58:06 otto Exp $ */
a44 1
		/* NOTREACHED */
a47 1
		/* NOTREACHED */
a54 1
		/* NOTREACHED */
a60 1
		/* NOTREACHED */
a135 1
		/* NOTREACHED */
a145 1
			/* NOTREACHED */
a159 1
			/* NOTREACHED */
@


1.11
log
@delint; from Ray with input from me and jaredy@@; ok jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.10 2006/02/02 19:30:23 claudio Exp $ */
d17 1
a19 1
__dead static void cleanup(const char *);
a20 9
static char *xmktemp(const char *);

static void
cleanup(const char *filename)
{
	if (unlink(filename))
		err(2, "could not delete: %s", filename);
	exit(2);
}
a65 50
}

/*
 * Creates and returns the name of a temporary file.  Takes a string
 * (or NULL) is written to the temporary file.  The returned string
 * needs to be freed.
 */
static char *
xmktemp(const char *s)
{
	FILE *file;
	int fd;
	const char *tmpdir;
	char *filename;

	/* If TMPDIR is set, use it; otherwise use /tmp. */
	if (!(tmpdir = getenv("TMPDIR")))
		tmpdir = "/tmp";
	if (asprintf(&filename, "%s/sdiff.XXXXXXXXXX", tmpdir) == -1)
		err(2, "xmktemp");

	/* Create temp file. */
	if ((fd = mkstemp(filename)) == -1)
		err(2, "could not create temporary file");

	/* If we don't write anything to the file, just close. */
	if (s == NULL) {
		close(fd);

		return (filename);
	}

	/* Open temp file for writing. */
	if ((file = fdopen(fd, "w")) == NULL) {
		warn("could not open %s", filename);
		cleanup(filename);
		/* NOTREACHED */
	}

	/* Write to file. */
	if (fputs(s, file)) {
		warn("could not write to %s", filename);
		cleanup(filename);
		/* NOTREACHED */
	}

	/* Close temp file. */
	fclose(file);

	return (filename);
@


1.10
log
@In interactive mode force newline between left and right sets in the "e b"
command. OK tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.9 2005/12/28 05:57:46 deraadt Exp $ */
d135 1
a135 1
	const char *filename;
d235 1
a235 1
	free((void *)filename);
@


1.9
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.8 2005/12/27 05:00:28 deraadt Exp $ */
d156 1
a156 1
		if (asprintf(&text, "%s%s\n", left, right) == -1)
@


1.8
log
@goto labels after case statements make lint happier
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.7 2005/12/27 04:43:01 tedu Exp $ */
d152 1
a152 1
		if (right == NULL) 
@


1.7
log
@remove debug mode
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.6 2005/12/27 04:33:31 tedu Exp $ */
d160 1
a161 1
	case 'l':
d171 1
a172 1
	case 'r':
@


1.6
log
@if an allocation function fails, err will print "cannot allocate memory"
for us, just add the name of the function
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.5 2005/12/27 04:31:06 tedu Exp $ */
a10 1
#include <assert.h>
a136 2

	assert(cmd);
@


1.5
log
@close can't really fail, don't bother checking
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.4 2005/12/27 04:28:08 tedu Exp $ */
d95 1
a95 1
		err(2, "could not allocate memory");
@


1.4
log
@remove broken assert on argc, and put argc check in right place
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.3 2005/12/27 04:18:07 tedu Exp $ */
d103 1
a103 5
		if (close(fd)) {
			warn("could not close %s", filename);
			cleanup(filename);
			/* NOTREACHED */
		}
d123 1
a123 5
	if (fclose(file)) {
		warn("could not close %s", filename);
		cleanup(filename);
		/* NOTREACHED */
	}
d235 1
a235 2
	if (fclose(file))
		warn("could not close: %s", filename);
@


1.3
log
@variables in header should be extern, defined in a c file.
if cast for free is needed because of const nastiness, at least cast to void *
@
text
@d1 1
a1 1
/*	$OpenBSD: edit.c,v 1.2 2005/12/27 04:06:16 tedu Exp $ */
d247 1
a247 1
	free(filename);
@


1.2
log
@OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d247 1
a247 1
	free((char *)filename);
@


1.1
log
@add a public domain sdiff implementation contributed by ray lai
@
text
@d1 1
a1 1
/*	$Id: edit.c,v 1.4 2005/12/15 16:19:27 ray Exp $	*/
@

