head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.44
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.42
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.38
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.40
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.32
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.36
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.34
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.30
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.28
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2006.05.25.03.20.32;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.10.14.32.51;	author ray;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.11.07.12.42;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.20.08.38.18;	author otto;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove xmktemp() and uses plain old mkstemp(3), avoiding race
conditions.

OK moritz@@, otto@@
@
text
@/*	$OpenBSD: common.c,v 1.3 2006/05/10 14:32:51 ray Exp $	*/

/*
 * Written by Raymond Lai <ray@@cyth.net>.
 * Public domain.
 */

#include <err.h>
#include <stdlib.h>
#include <unistd.h>

#include "common.h"

void
cleanup(const char *filename)
{
	if (unlink(filename))
		err(2, "could not delete: %s", filename);
	exit(2);
}
@


1.3
log
@Now that lint is smarter, remove /* NOTREACHED */ comments.

OK jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.2 2006/03/11 07:12:42 ray Exp $	*/
a8 2
#include <paths.h>
#include <stdio.h>
a19 48
}

/*
 * Creates and returns the name of a temporary file.  Takes a string
 * (or NULL) is written to the temporary file.  The returned string
 * needs to be freed.
 */
char *
xmktemp(const char *s)
{
	FILE *file;
	int fd;
	const char *tmpdir;
	char *filename;

	/* If TMPDIR is set, use it; otherwise use _PATH_TMP. */
	if (!(tmpdir = getenv("TMPDIR")))
		tmpdir = _PATH_TMP;
	if (asprintf(&filename, "%s/sdiff.XXXXXXXXXX", tmpdir) == -1)
		err(2, "xmktemp");

	/* Create temp file. */
	if ((fd = mkstemp(filename)) == -1)
		err(2, "could not create temporary file");

	/* If we don't write anything to the file, just close. */
	if (s == NULL) {
		close(fd);

		return (filename);
	}

	/* Open temp file for writing. */
	if ((file = fdopen(fd, "w")) == NULL) {
		warn("could not open %s", filename);
		cleanup(filename);
	}

	/* Write to file. */
	if (fputs(s, file)) {
		warn("could not write to %s", filename);
		cleanup(filename);
	}

	/* Close temp file. */
	fclose(file);

	return (filename);
@


1.2
log
@/tmp -> _PATH_TMP

ok jaredy, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.1 2006/02/20 08:38:18 otto Exp $	*/
a57 1
		/* NOTREACHED */
a63 1
		/* NOTREACHED */
@


1.1
log
@Move two functions to separate file; from Ray Lai; ok jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d9 1
d37 1
a37 1
	/* If TMPDIR is set, use it; otherwise use /tmp. */
d39 1
a39 1
		tmpdir = "/tmp";
@

