head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.12.0.10
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.8
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.24
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.22
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.18
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.8
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.12
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.10
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.8
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.6
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.12.02.15.56.22;	author millert;	state Exp;
branches;
next	1.17;
commitid	fTMubrWaxIK4TBKX;

1.17
date	2014.03.08.01.05.39;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.01.10.23.01.29;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2014.01.08.23.12.57;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2014.01.08.22.30.32;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2014.01.08.21.40.25;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.01.21.21.39;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.08.03.18.59;	author pvalchev;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.02.56.24;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.28.00;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.10.00.22.00;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.16.06.29.44;	author pvalchev;	state Exp;
branches;
next	1.6;

1.6
date	99.08.04.18.31.25;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.04.21.23.45.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.03.31.04.56.00;	author etheisen;	state Exp;
branches;
next	1.3;

1.3
date	96.03.27.19.33.18;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.04.08.37.00;	author etheisen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.05;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove dead stores found by llvm checker and mark functions that
call done() as __dead to avoid false positives.  OK otto@@
@
text
@/*	$OpenBSD: defs.h,v 1.17 2014/03/08 01:05:39 tedu Exp $	*/
/*	$NetBSD: defs.h,v 1.6 1996/03/19 03:21:30 jtc Exp $	*/

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Robert Paul Corbett.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)defs.h	5.6 (Berkeley) 5/24/93
 */

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/*  machine-dependent definitions			*/
/*  the following definitions are for the Tahoe		*/
/*  they might have to be changed for other machines	*/

/*  MAXCHAR is the largest unsigned character value	*/
/*  MAXSHORT is the largest value of a C short		*/
/*  MINSHORT is the most negative value of a C short	*/
/*  MAXTABLE is the maximum table size			*/
/*  BITS_PER_WORD is the number of bits in a C unsigned	*/
/*  WORDSIZE computes the number of words needed to	*/
/*	store n bits					*/
/*  BIT returns the value of the n-th bit starting	*/
/*	from r (0-indexed)				*/
/*  SETBIT sets the n-th bit starting from r		*/

#define	MAXCHAR		255
#define	MAXSHORT	32767
#define MINSHORT	-32768
#define MAXTABLE	32500
#define BITS_PER_WORD	32
#define	WORDSIZE(n)	(((n)+(BITS_PER_WORD-1))/BITS_PER_WORD)
#define	BIT(r, n)	((((r)[(n)>>5])>>((n)&31))&1)
#define	SETBIT(r, n)	((r)[(n)>>5]|=((unsigned)1<<((n)&31)))


/*  character names  */

#define	NUL		'\0'    /*  the null character  */
#define	NEWLINE		'\n'    /*  line feed  */
#define	SP		' '     /*  space  */
#define	BS		'\b'    /*  backspace  */
#define	HT		'\t'    /*  horizontal tab  */
#define	VT		'\013'  /*  vertical tab  */
#define	CR		'\r'    /*  carriage return  */
#define	FF		'\f'    /*  form feed  */
#define	QUOTE		'\''    /*  single quote  */
#define	DOUBLE_QUOTE	'\"'    /*  double quote  */
#define	BACKSLASH	'\\'    /*  backslash  */


/* defines for constructing filenames */

#define CODE_SUFFIX	".code.c"
#define	DEFINES_SUFFIX	".tab.h"
#define	OUTPUT_SUFFIX	".tab.c"
#define	VERBOSE_SUFFIX	".output"


/* keyword codes */

#define TOKEN 0
#define LEFT 1
#define RIGHT 2
#define NONASSOC 3
#define MARK 4
#define TEXT 5
#define TYPE 6
#define START 7
#define UNION 8
#define IDENT 9
#define EXPECT 10


/*  symbol classes  */

#define UNKNOWN 0
#define TERM 1
#define NONTERM 2


/*  the undefined value  */

#define UNDEFINED (-1)


/*  action codes  */

#define SHIFT 1
#define REDUCE 2


/*  character macros  */

#define IS_IDENT(c)	(isalnum(c) || (c) == '_' || (c) == '.' || (c) == '$')
#define	NUMERIC_VALUE(c)	((c) - '0')


/*  symbol macros  */

#define ISTOKEN(s)	((s) < start_symbol)
#define ISVAR(s)	((s) >= start_symbol)


/*  storage allocation macros  */

#define	NEW(t)		((t*)allocate(sizeof(t)))
#define	NEW2(n,t)	((t*)allocate((n)*sizeof(t)))


/*  the structure of a symbol table entry  */

typedef struct bucket bucket;
struct bucket {
	struct bucket *link;
	struct bucket *next;
	char *name;
	char *tag;
	short value;
	short index;
	short prec;
	char class;
	char assoc;
};


/*  the structure of the LR(0) state machine  */

typedef struct core core;
struct core {
	struct core *next;
	struct core *link;
	short number;
	short accessing_symbol;
	short nitems;
	short items[1];
};


/*  the structure used to record shifts  */

typedef struct shifts shifts;
struct shifts {
	struct shifts *next;
	short number;
	short nshifts;
	short shift[1];
};


/*  the structure used to store reductions  */

typedef struct reductions reductions;
struct reductions {
	struct reductions *next;
	short number;
	short nreds;
	short rules[1];
};


/*  the structure used to represent parser actions  */

typedef struct action action;
struct action {
	struct action *next;
	short symbol;
	short number;
	short prec;
	char action_code;
	char assoc;
	char suppressed;
};


/* global variables */

extern char dflag;
extern char lflag;
extern char rflag;
extern char tflag;
extern char vflag;
extern char *symbol_prefix;

extern char *cptr;
extern char *line;
extern int lineno;
extern int outline;

extern char *banner[];
extern char *tables[];
extern char *header[];
extern char *body[];
extern char *trailer[];

extern char *action_file_name;
extern char *code_file_name;
extern char *defines_file_name;
extern char *input_file_name;
extern char *output_file_name;
extern char *text_file_name;
extern char *union_file_name;
extern char *verbose_file_name;

extern FILE *action_file;
extern FILE *code_file;
extern FILE *defines_file;
extern FILE *input_file;
extern FILE *output_file;
extern FILE *text_file;
extern FILE *union_file;
extern FILE *verbose_file;

extern int nitems;
extern int nrules;
extern int nsyms;
extern int ntokens;
extern int nvars;
extern int ntags;

extern char unionized;
extern char line_format[];

extern int   start_symbol;
extern char  **symbol_name;
extern short *symbol_value;
extern short *symbol_prec;
extern char  *symbol_assoc;

extern short *ritem;
extern short *rlhs;
extern short *rrhs;
extern short *rprec;
extern char  *rassoc;

extern short **derives;
extern char *nullable;

extern bucket *first_symbol;
extern bucket *last_symbol;

extern int nstates;
extern core *first_state;
extern shifts *first_shift;
extern reductions *first_reduction;
extern short *accessing_symbol;
extern core **state_table;
extern shifts **shift_table;
extern reductions **reduction_table;
extern unsigned *LA;
extern short *LAruleno;
extern short *lookaheads;
extern short *goto_map;
extern short *from_state;
extern short *to_state;

extern action **parser;
extern int SRtotal;
extern int SRexpect;
extern int RRtotal;
extern short *SRconflicts;
extern short *RRconflicts;
extern short *defred;
extern short *rules_used;
extern short nunused;
extern short final_state;

/* global functions */

extern void *allocate(size_t);
extern bucket *lookup(char *);
extern bucket *make_bucket(char *);
extern void set_first_derives(void);
extern void closure(short *, int);
extern void finalize_closure(void);

extern __dead void fatal(char *);

extern void reflexive_transitive_closure(unsigned *, int);
extern __dead void done(int);

extern __dead void no_space(void);
extern __dead void open_error(char *);
extern __dead void open_write_error(char *);
extern __dead void unexpected_EOF(void);
extern void print_pos(char *, char *);
extern __dead void syntax_error(int, char *, char *);
extern __dead void unterminated_comment(int, char *, char *);
extern __dead void unterminated_string(int, char *, char *);
extern __dead void unterminated_text(int, char *, char *);
extern __dead void unterminated_union(int, char *, char *);
extern __dead void over_unionized(char *);
extern __dead void illegal_tag(int, char *, char *);
extern __dead void illegal_character(char *);
extern __dead void used_reserved(char *);
extern __dead void tokenized_start(char *);
extern void retyped_warning(char *);
extern void reprec_warning(char *);
extern void revalued_warning(char *);
extern __dead void terminal_start(char *);
extern void restarted_warning(void);
extern __dead void no_grammar(void);
extern __dead void terminal_lhs(int);
extern void prec_redeclared(void);
extern __dead void unterminated_action(int, char *, char *);
extern void dollar_warning(int, int);
extern __dead void dollar_error(int, char *, char *);
extern __dead void untyped_lhs(void);
extern __dead void untyped_rhs(int, char *);
extern __dead void unknown_rhs(int);
extern void default_action_warning(void);
extern __dead void undefined_goal(char *);
extern void undefined_symbol_warning(char *);

extern void lalr(void);

extern void reader(void);
extern void lr0(void);
extern void free_nullable(void);
extern void free_derives(void);
extern void make_parser(void);
extern void verbose(void);
extern void output(void);
extern void free_parser(void);
extern void write_section(char *[]);

extern void create_symbol_table(void);
extern void free_symbol_table(void);
extern void free_symbols(void);


/* system variables */

extern char *__progname;
@


1.17
log
@reindent
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.16 2014/01/10 23:01:29 millert Exp $	*/
d309 1
a309 1
extern void fatal(char *);
d312 1
a312 1
extern void done(int);
d314 4
a317 4
extern void no_space(void);
extern void open_error(char *);
extern void open_write_error(char *);
extern void unexpected_EOF(void);
d319 10
a328 10
extern void syntax_error(int, char *, char *);
extern void unterminated_comment(int, char *, char *);
extern void unterminated_string(int, char *, char *);
extern void unterminated_text(int, char *, char *);
extern void unterminated_union(int, char *, char *);
extern void over_unionized(char *);
extern void illegal_tag(int, char *, char *);
extern void illegal_character(char *);
extern void used_reserved(char *);
extern void tokenized_start(char *);
d332 1
a332 1
extern void terminal_start(char *);
d334 2
a335 2
extern void no_grammar(void);
extern void terminal_lhs(int);
d337 1
a337 1
extern void unterminated_action(int, char *, char *);
d339 4
a342 4
extern void dollar_error(int, char *, char *);
extern void untyped_lhs(void);
extern void untyped_rhs(int, char *);
extern void unknown_rhs(int);
d344 1
a344 1
extern void undefined_goal(char *);
@


1.16
log
@Use strtoul() to do octal and hex character conversion instead of
custom code.
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.15 2014/01/08 23:12:57 millert Exp $	*/
d146 10
a155 11
struct bucket
{
    struct bucket *link;
    struct bucket *next;
    char *name;
    char *tag;
    short value;
    short index;
    short prec;
    char class;
    char assoc;
d162 7
a168 8
struct core
{
    struct core *next;
    struct core *link;
    short number;
    short accessing_symbol;
    short nitems;
    short items[1];
d175 5
a179 6
struct shifts
{
    struct shifts *next;
    short number;
    short nshifts;
    short shift[1];
d186 5
a190 6
struct reductions
{
    struct reductions *next;
    short number;
    short nreds;
    short rules[1];
d197 8
a204 9
struct action
{
    struct action *next;
    short symbol;
    short number;
    short prec;
    char action_code;
    char assoc;
    char suppressed;
@


1.15
log
@We still need to cast the resulting pointer in NEW and NEW2 as it
is used in pointer arithmetic.  Otherwise we do arithmetic on void
* and corrupt the heap.
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.14 2014/01/08 22:30:32 millert Exp $	*/
a127 1
#define	IS_OCTAL(c)	((c) >= '0' && (c) <= '7')
@


1.14
log
@Make allocate() take size_t and return void *.  This lets us drop
some more useless casts.  Also add missing arguments to a couple
of prototypes while here.  OK matthew@@ pelikan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.13 2014/01/08 21:40:25 millert Exp $	*/
d140 2
a141 2
#define	NEW(t)		(allocate(sizeof(t)))
#define	NEW2(n,t)	(allocate((n)*sizeof(t)))
@


1.13
log
@Remove CALLOC, MALLOC, FREE and REALLOC macros and just call calloc(),
nalloc(), free() and realloc() directly.  The macros were casting
to the wrong (pre-C89) types and there is no need for them in a C89
world.  OK matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.12 2011/04/01 21:21:39 nicm Exp $	*/
d140 2
a141 2
#define	NEW(t)		((t*)allocate(sizeof(t)))
#define	NEW2(n,t)	((t*)allocate((unsigned)((n)*sizeof(t))))
d308 3
a310 3
extern char *allocate();
extern bucket *lookup();
extern bucket *make_bucket();
@


1.12
log
@Add calls to some existing but previously unused free functions. Also
replace a loop with a memset. From Michael W Bombardieri.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.11 2005/06/08 03:18:59 pvalchev Exp $	*/
a139 3
#define CALLOC(k,n)	(calloc((unsigned)(k),(unsigned)(n)))
#define	FREE(x)		(free((char*)(x)))
#define MALLOC(n)	(malloc((unsigned)(n)))
a141 1
#define REALLOC(p,n)	(realloc((char*)(p),(unsigned)(n)))
@


1.11
log
@add open_write_error() to bail on fopen(3) failing to open for write, gains
more descriptive error messages, eg:
"cannot open target file y.tab.h for writing" as opposed to a generic error.
based on Alexander von Gernler <grunk@@pestilenz.org>, ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.10 2003/06/03 02:56:24 millert Exp $	*/
d361 2
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.9 2002/02/16 21:28:00 millert Exp $	*/
d326 1
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.8 2001/12/10 00:22:00 deraadt Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@bogus __dead
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.7 2001/07/16 06:29:44 pvalchev Exp $	*/
d319 3
a321 3
extern void set_first_derives __P((void));
extern void closure __P((short *, int));
extern void finalize_closure __P((void));
d323 1
a323 1
extern void fatal __P((char *));
d325 2
a326 2
extern void reflexive_transitive_closure __P((unsigned *, int));
extern void done __P((int));
d328 1
a328 1
extern void no_space __P((void));
d330 43
a372 43
extern void unexpected_EOF __P((void));
extern void print_pos __P((char *, char *));
extern void syntax_error __P((int, char *, char *));
extern void unterminated_comment __P((int, char *, char *));
extern void unterminated_string __P((int, char *, char *));
extern void unterminated_text __P((int, char *, char *));
extern void unterminated_union __P((int, char *, char *));
extern void over_unionized __P((char *));
extern void illegal_tag __P((int, char *, char *));
extern void illegal_character __P((char *));
extern void used_reserved __P((char *));
extern void tokenized_start __P((char *));
extern void retyped_warning __P((char *));
extern void reprec_warning __P((char *));
extern void revalued_warning __P((char *));
extern void terminal_start __P((char *));
extern void restarted_warning __P((void));
extern void no_grammar __P((void));
extern void terminal_lhs __P((int));
extern void prec_redeclared __P((void));
extern void unterminated_action __P((int, char *, char *));
extern void dollar_warning __P((int, int));
extern void dollar_error __P((int, char *, char *));
extern void untyped_lhs __P((void));
extern void untyped_rhs __P((int, char *));
extern void unknown_rhs __P((int));
extern void default_action_warning __P((void));
extern void undefined_goal __P((char *));
extern void undefined_symbol_warning __P((char *));

extern void lalr __P((void));

extern void reader __P((void));
extern void lr0 __P((void));
extern void make_parser __P((void));
extern void verbose __P((void));
extern void output __P((void));
extern void free_parser __P((void));
extern void write_section __P((char *[]));

extern void create_symbol_table __P((void));
extern void free_symbol_table __P((void));
extern void free_symbols __P((void));
@


1.7
log
@-Wall cleanup; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.6 1999/08/04 18:31:25 millert Exp $	*/
d332 1
a332 1
extern __dead void syntax_error __P((int, char *, char *));
@


1.6
log
@o Use __progname
o Use _PATH_TMP
o Use mkstemp() instead of mktemp()
o Really use 10 X's (one is eaten up by a letter)
o Correct manpage wrt temp file name
o Uncomment .Xr yyfix in man page since we ship it now
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.5 1996/04/21 23:45:06 deraadt Exp $	*/
d46 1
a46 1

d319 54
a376 1
extern int errno;
a377 9


/* system functions */

extern void free();
extern char *calloc();
extern char *malloc();
extern char *realloc();
extern char *strcpy();
@


1.5
log
@sync to netbsd 960418
@
text
@d1 1
a1 1
/*	$OpenBSD: defs.h,v 1.4 1996/03/31 04:56:00 etheisen Exp $	*/
a230 1
extern char *myname;
d324 1
@


1.4
log
@Fix 960317 NetBSD merge error.  Merge caused local OpenBSD mod lossage.

NetBSD's byacc %expect mods are buggy and don't handle syntax or semantic
errors.  Additionally, they do not mimic the BISON behavior they try to
emulate.  Our local OpenBSD %expect mods are much better.
@
text
@d1 40
a40 1
/*	$OpenBSD$	*/
@


1.3
log
@From NetBSD: merge of 960317
@
text
@@


1.2
log
@Yacc now understands %expect keyword.  This should help prevent yacc from
gagging on GNU bison grammer.
@
text
@d1 1
a1 1
/*	$Id: defs.h,v 1.1.1.1 1995/10/18 08:47:05 deraadt Exp $ */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: defs.h,v 1.4 1994/12/24 16:57:28 cgd Exp $ */
d69 1
d267 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
