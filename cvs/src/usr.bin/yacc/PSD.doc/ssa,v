head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.56
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.52
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.54
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.46
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.50
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.48
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.44
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.42
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.40
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.38
	OPENBSD_5_0:1.1.0.36
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.34
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.32
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.28
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.30
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.26
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.24
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.22
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.20
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.18
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.16
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.14
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.12
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.10
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.8
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.6
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2002.12.03.21.36.35;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.1
log
@caldera-licensed docs, now that they are free. need more work, thus not installed yet
@
text
@.\"	$OpenBSD$
.\"
.\" Copyright (C) Caldera International Inc.  2001-2002.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code and documentation must retain the above
.\"    copyright notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed or owned by Caldera
.\"	International, Inc.
.\" 4. Neither the name of Caldera International, Inc. nor the names of other
.\"    contributors may be used to endorse or promote products derived from
.\"    this software without specific prior written permission.
.\"
.\" USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
.\" INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE FOR ANY DIRECT,
.\" INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	@@(#)ssa	8.1 (Berkeley) 6/8/93
.\"
.SH
Appendix A:  A Simple Example
.PP
This example gives the complete Yacc specification for a small desk calculator;
the desk calculator has 26 registers, labeled ``a'' through ``z'', and accepts
arithmetic expressions made up of the operators +, \-, *, /,
% (mod operator), & (bitwise and), | (bitwise or), and assignment.
If an expression at the top level is an assignment, the value is not
printed; otherwise it is.
As in C, an integer that begins with 0 (zero) is assumed to be octal;
otherwise, it is assumed to be decimal.
.PP
As an example of a Yacc specification, the desk calculator
does a reasonable job of showing how precedences and ambiguities
are used, and demonstrating simple error recovery.
The major oversimplifications are that the
lexical analysis phase is much simpler than for most applications, and the
output is produced immediately, line by line.
Note the way that decimal and octal integers are read in by the grammar rules;
This job is probably better done by the lexical analyzer.
.sp
.nf
.ta .5i 1i 1.5i 2i 2.5i

%{
#  include  <stdio.h>
#  include  <ctype.h>

int  regs[26];
int  base;

%}

%start  list

%token  DIGIT  LETTER

%left  \'|\'
%left  \'&\'
%left  \'+\'  \'\-\'
%left  \'*\'  \'/\'  \'%\'
%left  UMINUS      /*  supplies  precedence  for  unary  minus  */

%%      /*  beginning  of  rules  section  */

list	:	/*  empty  */
	|	list  stat  \'\en\'
	|	list  error  \'\en\'
			{	yyerrok;  }
	;

stat	:	expr
			{	printf( "%d\en", $1 );  }
	|	LETTER  \'=\'  expr
			{	regs[$1]  =  $3;  }
	;

expr	:	\'(\'  expr  \')\'
			{	$$  =  $2;  }
	|	expr  \'+\'  expr
			{	$$  =  $1  +  $3;  }
	|	expr  \'\-\'  expr
			{	$$  =  $1  \-  $3;  }
	|	expr  \'*\'  expr
			{	$$  =  $1  *  $3;  }
	|	expr  \'/\'  expr
			{	$$  =  $1  /  $3;  }
	|	expr  \'%\'  expr
			{	$$  =  $1  %  $3;  }
	|	expr  \'&\'  expr
			{	$$  =  $1  &  $3;  }
	|	expr  \'|\'  expr
			{	$$  =  $1  |  $3;  }
	|	\'\-\'  expr        %prec  UMINUS
			{	$$  =  \-  $2;  }
	|	LETTER
			{	$$  =  regs[$1];  }
	|	number          
	;

number	:	DIGIT
			{	$$ = $1;    base  =  ($1==0)  ?  8  :  10;  }
	|	number  DIGIT
			{	$$  =  base * $1  +  $2;  }
	;

%%      /*  start  of  programs  */

yylex() {		/*  lexical  analysis  routine  */
              /*  returns  LETTER  for  a  lower  case  letter,  yylval = 0  through  25  */
              /*  return  DIGIT  for  a  digit,  yylval = 0  through  9  */
              /*  all  other  characters  are  returned  immediately  */

	int  c;

	while(  (c=getchar())  ==  \' \'  )  {	/*  skip  blanks  */  }

	/*  c  is  now  nonblank  */

	if(  islower(  c  )  )  {	
		yylval  =  c  \-  \'a\';
		return  (  LETTER  );
		}
	if(  isdigit(  c  )  )  {	
		yylval  =  c  \-  \'0\';
		return(  DIGIT  );
		}
	return(  c  );
	}
.fi
.bp
@
