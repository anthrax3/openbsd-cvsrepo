head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.40
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.36
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.38
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.30
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.34
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.32
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.28
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.26
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.24
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.22
	OPENBSD_5_0:1.2.0.20
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.18
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.16
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.14
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.8
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.0.16
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.14
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.12
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.10
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.8
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.6
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.01.17.07.58.51;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.03.21.36.35;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@realively -> relatively

``yep'' jmc@@
@
text
@.\"	$OpenBSD: ss0,v 1.1 2002/12/03 21:36:35 mickey Exp $
.\"
.\" Copyright (C) Caldera International Inc.  2001-2002.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code and documentation must retain the above
.\"    copyright notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed or owned by Caldera
.\"	International, Inc.
.\" 4. Neither the name of Caldera International, Inc. nor the names of other
.\"    contributors may be used to endorse or promote products derived from
.\"    this software without specific prior written permission.
.\"
.\" USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
.\" INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE FOR ANY DIRECT,
.\" INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	@@(#)ss0	8.1 (Berkeley) 6/8/93
.\"
.SH
0: Introduction
.PP
Yacc provides a general tool for imposing structure on the input to a computer program.
The Yacc user prepares a
specification of the input process; this includes rules
describing the input structure, code to be invoked when these
rules are recognized, and a low-level routine to do the
basic input.
Yacc then generates a function to control the input process.
This function, called a
.I parser ,
calls the user-supplied low-level input routine
(the
.I "lexical analyzer" )
to pick up the basic items
(called
.I tokens )
from the input stream.
These tokens are organized according to the input structure rules,
called
.I "grammar rules" \|;
when one of these rules has been recognized,
then user code supplied for this rule, an
.I action ,
is invoked; actions have the ability to return values and
make use of the values of other actions.
.PP
Yacc is written in a portable dialect of C
.\".[
.\"Ritchie Kernighan Language Prentice
.\".]
and the actions, and output subroutine, are in C as well.
Moreover, many of the syntactic conventions of Yacc follow C.
.PP
The heart of the input specification is a collection of grammar rules.
Each rule describes an allowable structure and gives it a name.
For example, one grammar rule might be
.DS
date  :  month\_name  day  \',\'  year   ;
.DE
Here,
.I date ,
.I month\_name ,
.I day ,
and
.I year
represent structures of interest in the input process;
presumably,
.I month\_name ,
.I day ,
and
.I year
are defined elsewhere.
The comma ``,'' is enclosed in single quotes; this implies that the
comma is to appear literally in the input.
The colon and semicolon merely serve as punctuation in the rule, and have
no significance in controlling the input.
Thus, with proper definitions, the input
.DS
July  4, 1776
.DE
might be matched by the above rule.
.PP
An important part of the input process is carried out by the
lexical analyzer.
This user routine reads the input stream, recognizing the lower level structures,
and communicates these tokens
to the parser.
For historical reasons, a structure recognized by the lexical analyzer is called a
.I "terminal symbol" ,
while the structure recognized by the parser is called a
.I "nonterminal symbol" .
To avoid confusion, terminal symbols will usually be referred to as
.I tokens .
.PP
There is considerable leeway in deciding whether to recognize structures using the lexical
analyzer or grammar rules.
For example, the rules
.DS
month\_name  :  \'J\' \'a\' \'n\'   ;
month\_name  :  \'F\' \'e\' \'b\'   ;

         . . .

month\_name  :  \'D\' \'e\' \'c\'   ;
.DE
might be used in the above example.
The lexical analyzer would only need to recognize individual letters, and
.I month\_name
would be a nonterminal symbol.
Such low-level rules tend to waste time and space, and may
complicate the specification beyond Yacc's ability to deal with it.
Usually, the lexical analyzer would
recognize the month names,
and return an indication that a
.I month\_name
was seen; in this case,
.I month\_name
would be a token.
.PP
Literal characters such as ``,'' must also be passed through the lexical
analyzer, and are also considered tokens.
.PP
Specification files are very flexible.
It is relatively easy to add to the above example the rule
.DS
date  :  month \'/\' day \'/\' year   ;
.DE
allowing
.DS
7 / 4 / 1776
.DE
as a synonym for
.DS
July 4, 1776
.DE
In most cases, this new rule could be ``slipped in'' to a working system with minimal effort,
and little danger of disrupting existing input.
.PP
The input being read may not conform to the
specifications.
These input errors are detected as early as is theoretically possible with a
left-to-right scan;
thus, not only is the chance of reading and computing with bad
input data substantially reduced, but the bad data can usually be quickly found.
Error handling,
provided as part of the input specifications,
permits the reentry of bad data,
or the continuation of the input process after skipping over the bad data.
.PP
In some cases, Yacc fails to produce a parser when given a set of
specifications.
For example, the specifications may be self contradictory, or they may
require a more powerful recognition mechanism than that available to Yacc.
The former cases represent design errors;
the latter cases
can often be corrected
by making
the lexical analyzer
more powerful, or by rewriting some of the grammar rules.
While Yacc cannot handle all possible specifications, its power
compares favorably with similar systems;
moreover, the
constructions which are difficult for Yacc to handle are
also frequently difficult for human beings to handle.
Some users have reported that the discipline of formulating valid
Yacc specifications for their input revealed errors of
conception or design early in the program development.
.PP
The theory underlying Yacc has been described elsewhere.
.\".[
.\"Aho Johnson Surveys LR Parsing
.\".]
.\".[
.\"Aho Johnson Ullman Ambiguous Grammars
.\".]
.\".[
.\"Aho Ullman Principles Compiler Design
.\".]
Yacc has been extensively used in numerous practical applications,
including
.I lint ,
.\".[
.\"Johnson Lint
.\".]
the Portable C Compiler,
.\".[
.\"Johnson Portable Compiler Theory
.\".]
and a system for typesetting mathematics.
.\".[
.\"Kernighan Cherry typesetting system CACM
.\".]
.PP
The next several sections describe the
basic process of preparing a Yacc specification;
Section 1 describes the preparation of grammar rules,
Section 2 the preparation of the user supplied actions associated with these rules,
and Section 3 the preparation of lexical analyzers.
Section 4 describes the operation of the parser.
Section 5 discusses various reasons why Yacc may be unable to produce a
parser from a specification, and what to do about it.
Section 6 describes a simple mechanism for
handling operator precedences in arithmetic expressions.
Section 7 discusses error detection and recovery.
Section 8 discusses the operating environment and special features
of the parsers Yacc produces.
Section 9 gives some suggestions which should improve the
style and efficiency of the specifications.
Section 10 discusses some advanced topics, and Section 11 gives
acknowledgements.
Appendix A has a brief example, and Appendix B gives a
summary of the Yacc input syntax.
Appendix C gives an example using some of the more advanced
features of Yacc, and, finally,
Appendix D describes mechanisms and syntax
no longer actively supported, but
provided for historical continuity with older versions of Yacc.
@


1.1
log
@caldera-licensed docs, now that they are free. need more work, thus not installed yet
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d142 1
a142 1
It is realively easy to add to the above example the rule
@

