head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.14
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.10
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.6
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.6
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.4
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.20
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.16
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2014.03.13.00.56.39;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.01.08.21.40.25;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2012.04.10.09.08.50;	author chl;	state Exp;
branches;
next	1.14;

1.14
date	2012.03.03.19.15.00;	author nicm;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.50;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2005.06.10.16.40.45;	author pvalchev;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.12.04.51.44;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.12.01.16.33;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.19.16.34.53;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.24;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.08.00.18.13;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.28.00;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.19.19.02.18;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.16.06.29.45;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.44.39;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.45.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.06;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@indentation style
@
text
@/* $OpenBSD: symtab.c,v 1.16 2014/01/08 21:40:25 millert Exp $	 */
/* $NetBSD: symtab.c,v 1.4 1996/03/19 03:21:48 jtc Exp $	 */

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Robert Paul Corbett.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "defs.h"

/* TABLE_SIZE is the number of entries in the symbol table. */
/* TABLE_SIZE must be a power of two.			    */

#define	TABLE_SIZE 1024


bucket **symbol_table;
bucket *first_symbol;
bucket *last_symbol;

int hash(char *);


int
hash(char *name)
{
	char *s;
	int c, k;

	assert(name && *name);
	s = name;
	k = *s;
	while ((c = *++s))
		k = (31 * k + c) & (TABLE_SIZE - 1);

	return (k);
}


bucket *
make_bucket(char *name)
{
	bucket *bp;

	assert(name);
	bp = malloc(sizeof(bucket));
	if (bp == NULL)
		no_space();
	bp->link = 0;
	bp->next = 0;
	bp->name = strdup(name);
	if (bp->name == NULL)
		no_space();
	bp->tag = 0;
	bp->value = UNDEFINED;
	bp->index = 0;
	bp->prec = 0;
	bp->class = UNKNOWN;
	bp->assoc = TOKEN;

	return (bp);
}


bucket *
lookup(char *name)
{
	bucket *bp, **bpp;

	bpp = symbol_table + hash(name);
	bp = *bpp;

	while (bp) {
		if (strcmp(name, bp->name) == 0)
			return (bp);
		bpp = &bp->link;
		bp = *bpp;
	}

	*bpp = bp = make_bucket(name);
	last_symbol->next = bp;
	last_symbol = bp;

	return (bp);
}


void
create_symbol_table(void)
{
	bucket *bp;

	symbol_table = calloc(TABLE_SIZE, sizeof(bucket *));
	if (symbol_table == NULL)
		no_space();

	bp = make_bucket("error");
	bp->index = 1;
	bp->class = TERM;

	first_symbol = bp;
	last_symbol = bp;
	symbol_table[hash("error")] = bp;
}


void
free_symbol_table(void)
{
	free(symbol_table);
	symbol_table = 0;
}


void
free_symbols(void)
{
	bucket *p, *q;

	for (p = first_symbol; p; p = q) {
		q = p->next;
		free(p);
	}
}
@


1.16
log
@Remove CALLOC, MALLOC, FREE and REALLOC macros and just call calloc(),
nalloc(), free() and realloc() directly.  The macros were casting
to the wrong (pre-C89) types and there is no need for them in a C89
world.  OK matthew@@
@
text
@d1 2
a2 2
/*	$OpenBSD: symtab.c,v 1.15 2012/04/10 09:08:50 chl Exp $	*/
/*	$NetBSD: symtab.c,v 1.4 1996/03/19 03:21:48 jtc Exp $	*/
d54 2
a55 2
    char *s;
    int c, k;
d57 5
a61 5
    assert(name && *name);
    s = name;
    k = *s;
    while ((c = *++s))
	k = (31*k + c) & (TABLE_SIZE - 1);
d63 1
a63 1
    return (k);
d70 1
a70 1
    bucket *bp;
d72 15
a86 13
    assert(name);
    bp = (bucket *) malloc(sizeof(bucket));
    if (bp == 0) no_space();
    bp->link = 0;
    bp->next = 0;
    bp->name = strdup(name);
    if (bp->name == 0) no_space();
    bp->tag = 0;
    bp->value = UNDEFINED;
    bp->index = 0;
    bp->prec = 0;
    bp-> class = UNKNOWN;
    bp->assoc = TOKEN;
d88 1
a88 1
    return (bp);
d95 1
a95 1
    bucket *bp, **bpp;
d97 1
a97 7
    bpp = symbol_table + hash(name);
    bp = *bpp;

    while (bp)
    {
	if (strcmp(name, bp->name) == 0) return (bp);
	bpp = &bp->link;
a98 1
    }
d100 10
a109 3
    *bpp = bp = make_bucket(name);
    last_symbol->next = bp;
    last_symbol = bp;
d111 1
a111 1
    return (bp);
d118 1
a118 4
    bucket *bp;

    symbol_table = calloc(TABLE_SIZE, sizeof(bucket *));
    if (symbol_table == NULL) no_space();
d120 11
a130 7
    bp = make_bucket("error");
    bp->index = 1;
    bp->class = TERM;

    first_symbol = bp;
    last_symbol = bp;
    symbol_table[hash("error")] = bp;
d137 2
a138 2
    free(symbol_table);
    symbol_table = 0;
d145 1
a145 1
    bucket *p, *q;
d147 4
a150 5
    for (p = first_symbol; p; p = q)
    {
	q = p->next;
	free(p);
    }
@


1.15
log
@remove unused variable.

ok nicm millert
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.14 2012/03/03 19:15:00 nicm Exp $	*/
d73 1
a73 1
    bp = (bucket *) MALLOC(sizeof(bucket));
d118 1
a118 1
    symbol_table = CALLOC(TABLE_SIZE, sizeof(bucket *));
d134 1
a134 1
    FREE(symbol_table);
d147 1
a147 1
	FREE(p);
@


1.14
log
@Replace some loops with calloc/memset. From Michael W Bombardieri.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.13 2009/10/27 23:59:50 deraadt Exp $	*/
a115 1
    int i;
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.12 2005/06/10 16:40:45 pvalchev Exp $	*/
d119 2
a120 4
    symbol_table = (bucket **) MALLOC(TABLE_SIZE*sizeof(bucket *));
    if (symbol_table == 0) no_space();
    for (i = 0; i < TABLE_SIZE; i++)
	symbol_table[i] = 0;
@


1.12
log
@-Wall clean; ok otto deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.11 2003/08/12 04:51:44 millert Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)symtab.c	5.3 (Berkeley) 6/1/90";
#else
static char rcsid[] = "$OpenBSD: symtab.c,v 1.11 2003/08/12 04:51:44 millert Exp $";
#endif
#endif /* not lint */
@


1.11
log
@Back out last commit, p->name is not always a malloc'ed object.
Pointed out by itojun@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.10 2003/08/12 01:16:33 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.10 2003/08/12 01:16:33 millert Exp $";
d68 1
a68 1
    while (c = *++s)
@


1.10
log
@plug memory leak; Patrick Latifi
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.9 2003/06/19 16:34:53 pvalchev Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.9 2003/06/19 16:34:53 pvalchev Exp $";
a157 1
	FREE(p->name);
@


1.9
log
@ansify; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.8 2003/06/03 02:56:24 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.8 2003/06/03 02:56:24 millert Exp $";
d158 1
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.7 2003/04/08 00:18:13 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.7 2003/04/08 00:18:13 deraadt Exp $";
d60 1
a60 2
hash(name)
char *name;
d76 1
a76 2
make_bucket(name)
char *name;
d99 1
a99 2
lookup(name)
char *name;
d122 1
a122 1
create_symbol_table()
d143 1
a143 1
free_symbol_table()
d151 1
a151 1
free_symbols()
@


1.7
log
@string cleaning; ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.6 2002/02/16 21:28:00 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.6 2002/02/16 21:28:00 millert Exp $";
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.5 2001/11/19 19:02:18 mpech Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.5 2001/11/19 19:02:18 mpech Exp $";
d91 1
a91 1
    bp->name = MALLOC(strlen(name) + 1);
a98 3

    if (bp->name == 0) no_space();
    strcpy(bp->name, name);
@


1.5
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.4 2001/07/16 06:29:45 pvalchev Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.4 2001/07/16 06:29:45 pvalchev Exp $";
d60 1
a60 1
int hash __P((char *));
@


1.4
log
@-Wall cleanup; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.3 1996/06/26 05:44:39 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.3 1996/06/26 05:44:39 deraadt Exp $";
d67 2
a68 2
    register char *s;
    register int c, k;
d84 1
a84 1
    register bucket *bp;
d111 1
a111 1
    register bucket *bp, **bpp;
d134 2
a135 2
    register int i;
    register bucket *bp;
d163 1
a163 1
    register bucket *p, *q;
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: symtab.c,v 1.4 1996/03/19 03:21:48 jtc Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: symtab.c,v 1.4 1996/03/19 03:21:48 jtc Exp $";
d60 2
d131 1
d152 1
d160 1
@


1.2
log
@sync to netbsd 960418
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: symtab.c,v 1.4 1996/03/19 03:21:48 jtc Exp $";
@


1.1
log
@Initial revision
@
text
@d1 38
d40 5
a44 1
static char rcsid[] = "$Id: symtab.c,v 1.3 1993/08/02 17:56:50 mycroft Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
