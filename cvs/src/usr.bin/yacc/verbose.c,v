head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.2
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.13.0.12
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2017.05.25.20.11.03;	author tedu;	state Exp;
branches;
next	1.13;
commitid	z7x0vVP30EN9CXhi;

1.13
date	2014.10.09.03.02.18;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	qlgFRitXWDoTjAoD;

1.12
date	2014.03.13.00.56.39;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.01.08.21.40.25;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.50;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.10.16.40.45;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.19.16.34.53;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.02.56.24;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.28.00;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.19.19.02.18;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.16.06.29.45;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.44.40;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.45.25;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.06;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@fix a variety of warnings. from Brian Callahan
@
text
@/* $OpenBSD: verbose.c,v 1.13 2014/10/09 03:02:18 deraadt Exp $	 */
/* $NetBSD: verbose.c,v 1.4 1996/03/19 03:21:50 jtc Exp $	 */

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Robert Paul Corbett.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "defs.h"

static short *null_rules;

void log_unused(void);
void log_conflicts(void);
void print_state(int);
void print_conflicts(int);
void print_core(int);
void print_nulls(int);
void print_actions(int);
void print_shifts(action *);
void print_reductions(action *, int);
void print_gotos(int);

void
verbose(void)
{
	int i;

	if (!vflag)
		return;

	null_rules = reallocarray(NULL, nrules, sizeof(short));
	if (null_rules == NULL)
		no_space();
	fprintf(verbose_file, "\f\n");
	for (i = 0; i < nstates; i++)
		print_state(i);
	free(null_rules);

	if (nunused)
		log_unused();
	if (SRtotal || RRtotal)
		log_conflicts();

	fprintf(verbose_file, "\n\n%d terminals, %d nonterminals\n", ntokens,
	    nvars);
	fprintf(verbose_file, "%d grammar rules, %d states\n", nrules - 2,
	    nstates);
}


void
log_unused(void)
{
	int i;
	short *p;

	fprintf(verbose_file, "\n\nRules never reduced:\n");
	for (i = 3; i < nrules; ++i) {
		if (!rules_used[i]) {
			fprintf(verbose_file, "\t%s :", symbol_name[rlhs[i]]);
			for (p = ritem + rrhs[i]; *p >= 0; ++p)
				fprintf(verbose_file, " %s", symbol_name[*p]);
			fprintf(verbose_file, "  (%d)\n", i - 2);
		}
	}
}


void
log_conflicts(void)
{
	int i;

	fprintf(verbose_file, "\n\n");
	for (i = 0; i < nstates; i++) {
		if (SRconflicts[i] || RRconflicts[i]) {
			fprintf(verbose_file, "State %d contains ", i);
			if (SRconflicts[i] == 1)
				fprintf(verbose_file, "1 shift/reduce conflict");
			else if (SRconflicts[i] > 1)
				fprintf(verbose_file, "%d shift/reduce conflicts",
				    SRconflicts[i]);
			if (SRconflicts[i] && RRconflicts[i])
				fprintf(verbose_file, ", ");
			if (RRconflicts[i] == 1)
				fprintf(verbose_file, "1 reduce/reduce conflict");
			else if (RRconflicts[i] > 1)
				fprintf(verbose_file, "%d reduce/reduce conflicts",
				    RRconflicts[i]);
			fprintf(verbose_file, ".\n");
		}
	}
}


void
print_state(int state)
{
	if (state)
		fprintf(verbose_file, "\n\n");
	if (SRconflicts[state] || RRconflicts[state])
		print_conflicts(state);
	fprintf(verbose_file, "state %d\n", state);
	print_core(state);
	print_nulls(state);
	print_actions(state);
}


void
print_conflicts(int state)
{
	int symbol, act = REDUCE, number = 0;
	action *p;

	symbol = -1;
	for (p = parser[state]; p; p = p->next) {
		if (p->suppressed == 2)
			continue;

		if (p->symbol != symbol) {
			symbol = p->symbol;
			number = p->number;
			if (p->action_code == SHIFT)
				act = SHIFT;
			else
				act = REDUCE;
		} else if (p->suppressed == 1) {
			if (state == final_state && symbol == 0) {
				fprintf(verbose_file,
				    "%d: shift/reduce conflict "
				    "(accept, reduce %d) on $end\n",
				    state, p->number - 2);
			} else {
				if (act == SHIFT) {
					fprintf(verbose_file,
					    "%d: shift/reduce conflict "
					    "(shift %d, reduce %d) on %s\n",
					    state, number, p->number - 2,
					    symbol_name[symbol]);
				} else {
					fprintf(verbose_file,
					    "%d: reduce/reduce conflict "
					    "(reduce %d, reduce %d) on %s\n",
					    state, number - 2, p->number - 2,
					    symbol_name[symbol]);
				}
			}
		}
	}
}


void
print_core(int state)
{
	int i;
	int k;
	int rule;
	core *statep;
	short *sp;
	short *sp1;

	statep = state_table[state];
	k = statep->nitems;

	for (i = 0; i < k; i++) {
		sp1 = sp = ritem + statep->items[i];

		while (*sp >= 0)
			++sp;
		rule = -(*sp);
		fprintf(verbose_file, "\t%s : ", symbol_name[rlhs[rule]]);

		for (sp = ritem + rrhs[rule]; sp < sp1; sp++)
			fprintf(verbose_file, "%s ", symbol_name[*sp]);

		putc('.', verbose_file);

		while (*sp >= 0) {
			fprintf(verbose_file, " %s", symbol_name[*sp]);
			sp++;
		}
		fprintf(verbose_file, "  (%d)\n", -2 - *sp);
	}
}


void
print_nulls(int state)
{
	action *p;
	int i, j, k, nnulls;

	nnulls = 0;
	for (p = parser[state]; p; p = p->next) {
		if (p->action_code == REDUCE &&
		    (p->suppressed == 0 || p->suppressed == 1)) {
			i = p->number;
			if (rrhs[i] + 1 == rrhs[i + 1]) {
				for (j = 0; j < nnulls && i > null_rules[j]; ++j)
					continue;

				if (j == nnulls) {
					++nnulls;
					null_rules[j] = i;
				} else if (i != null_rules[j]) {
					++nnulls;
					for (k = nnulls - 1; k > j; --k)
						null_rules[k] = null_rules[k - 1];
					null_rules[j] = i;
				}
			}
		}
	}

	for (i = 0; i < nnulls; ++i) {
		j = null_rules[i];
		fprintf(verbose_file, "\t%s : .  (%d)\n", symbol_name[rlhs[j]],
		    j - 2);
	}
	fprintf(verbose_file, "\n");
}


void
print_actions(int stateno)
{
	action *p;
	shifts *sp;
	int as;

	if (stateno == final_state)
		fprintf(verbose_file, "\t$end  accept\n");

	p = parser[stateno];
	if (p) {
		print_shifts(p);
		print_reductions(p, defred[stateno]);
	}
	sp = shift_table[stateno];
	if (sp && sp->nshifts > 0) {
		as = accessing_symbol[sp->shift[sp->nshifts - 1]];
		if (ISVAR(as))
			print_gotos(stateno);
	}
}


void
print_shifts(action * p)
{
	int count;
	action *q;

	count = 0;
	for (q = p; q; q = q->next) {
		if (q->suppressed < 2 && q->action_code == SHIFT)
			++count;
	}

	if (count > 0) {
		for (; p; p = p->next) {
			if (p->action_code == SHIFT && p->suppressed == 0)
				fprintf(verbose_file, "\t%s  shift %d\n",
				    symbol_name[p->symbol], p->number);
		}
	}
}


void
print_reductions(action * p, int pdefred)
{
	int k, anyreds;
	action *q;

	anyreds = 0;
	for (q = p; q; q = q->next) {
		if (q->action_code == REDUCE && q->suppressed < 2) {
			anyreds = 1;
			break;
		}
	}

	if (anyreds == 0)
		fprintf(verbose_file, "\t.  error\n");
	else {
		for (; p; p = p->next) {
			if (p->action_code == REDUCE && p->number != pdefred) {
				k = p->number - 2;
				if (p->suppressed == 0)
					fprintf(verbose_file, "\t%s  reduce %d\n",
					    symbol_name[p->symbol], k);
			}
		}

		if (pdefred > 0)
			fprintf(verbose_file, "\t.  reduce %d\n", pdefred - 2);
	}
}


void
print_gotos(int stateno)
{
	int i, k;
	int as;
	short *tto_state;
	shifts *sp;

	putc('\n', verbose_file);
	sp = shift_table[stateno];
	tto_state = sp->shift;
	for (i = 0; i < sp->nshifts; ++i) {
		k = tto_state[i];
		as = accessing_symbol[k];
		if (ISVAR(as))
			fprintf(verbose_file, "\t%s  goto %d\n",
			    symbol_name[as], k);
	}
}
@


1.13
log
@use reallocarray().  Leave the malloc/realloc cases in the skeleton
untouched because they have their own mult int overflow checks, and
placing reallocarray there causes some incredible fireworks in other
software.  Discussed with millert.
@
text
@d1 1
a1 1
/* $OpenBSD: verbose.c,v 1.12 2014/03/13 00:56:39 tedu Exp $	 */
d301 1
a301 1
print_reductions(action * p, int defred)
d318 1
a318 1
			if (p->action_code == REDUCE && p->number != defred) {
d326 2
a327 2
		if (defred > 0)
			fprintf(verbose_file, "\t.  reduce %d\n", defred - 2);
d337 1
a337 1
	short *to_state;
d342 1
a342 1
	to_state = sp->shift;
d344 1
a344 1
		k = to_state[i];
@


1.12
log
@indentation style
@
text
@d1 1
a1 1
/* $OpenBSD: verbose.c,v 1.11 2014/01/08 21:40:25 millert Exp $	 */
d59 1
a59 1
	null_rules = malloc(nrules * sizeof(short));
@


1.11
log
@Remove CALLOC, MALLOC, FREE and REALLOC macros and just call calloc(),
nalloc(), free() and realloc() directly.  The macros were casting
to the wrong (pre-C89) types and there is no need for them in a C89
world.  OK matthew@@
@
text
@d1 2
a2 2
/*	$OpenBSD: verbose.c,v 1.10 2009/10/27 23:59:50 deraadt Exp $	*/
/*	$NetBSD: verbose.c,v 1.4 1996/03/19 03:21:50 jtc Exp $	*/
d54 1
a54 1
    int i;
d56 2
a57 1
    if (!vflag) return;
d59 12
a70 11
    null_rules = (short *) malloc(nrules*sizeof(short));
    if (null_rules == 0) no_space();
    fprintf(verbose_file, "\f\n");
    for (i = 0; i < nstates; i++)
	print_state(i);
    free(null_rules);

    if (nunused)
	log_unused();
    if (SRtotal || RRtotal)
	log_conflicts();
d72 1
a72 1
    fprintf(verbose_file, "\n\n%d terminals, %d nonterminals\n", ntokens,
d74 2
a75 1
    fprintf(verbose_file, "%d grammar rules, %d states\n", nrules - 2, nstates);
d82 2
a83 2
    int i;
    short *p;
d85 8
a92 9
    fprintf(verbose_file, "\n\nRules never reduced:\n");
    for (i = 3; i < nrules; ++i)
    {
	if (!rules_used[i])
	{
	    fprintf(verbose_file, "\t%s :", symbol_name[rlhs[i]]);
	    for (p = ritem + rrhs[i]; *p >= 0; ++p)
		fprintf(verbose_file, " %s", symbol_name[*p]);
	    fprintf(verbose_file, "  (%d)\n", i - 2);
a93 1
    }
d100 1
a100 1
    int i;
d102 18
a119 19
    fprintf(verbose_file, "\n\n");
    for (i = 0; i < nstates; i++)
    {
	if (SRconflicts[i] || RRconflicts[i])
	{
	    fprintf(verbose_file, "State %d contains ", i);
	    if (SRconflicts[i] == 1)
		fprintf(verbose_file, "1 shift/reduce conflict");
	    else if (SRconflicts[i] > 1)
		fprintf(verbose_file, "%d shift/reduce conflicts",
			SRconflicts[i]);
	    if (SRconflicts[i] && RRconflicts[i])
		fprintf(verbose_file, ", ");
	    if (RRconflicts[i] == 1)
		fprintf(verbose_file, "1 reduce/reduce conflict");
	    else if (RRconflicts[i] > 1)
		fprintf(verbose_file, "%d reduce/reduce conflicts",
			RRconflicts[i]);
	    fprintf(verbose_file, ".\n");
a120 1
    }
d127 8
a134 8
    if (state)
	fprintf(verbose_file, "\n\n");
    if (SRconflicts[state] || RRconflicts[state])
	print_conflicts(state);
    fprintf(verbose_file, "state %d\n", state);
    print_core(state);
    print_nulls(state);
    print_actions(state);
d141 2
a142 2
    int symbol, act = REDUCE, number = 0;
    action *p;
d144 33
a176 35
    symbol = -1;
    for (p = parser[state]; p; p = p->next)
    {
	if (p->suppressed == 2)
	    continue;

	if (p->symbol != symbol)
	{
	    symbol = p->symbol;
	    number = p->number;
	    if (p->action_code == SHIFT)
		act = SHIFT;
	    else
		act = REDUCE;
	}
	else if (p->suppressed == 1)
	{
	    if (state == final_state && symbol == 0)
	    {
		fprintf(verbose_file, "%d: shift/reduce conflict \
(accept, reduce %d) on $end\n", state, p->number - 2);
	    }
	    else
	    {
		if (act == SHIFT)
		{
		    fprintf(verbose_file, "%d: shift/reduce conflict \
(shift %d, reduce %d) on %s\n", state, number, p->number - 2,
			    symbol_name[symbol]);
		}
		else
		{
		    fprintf(verbose_file, "%d: reduce/reduce conflict \
(reduce %d, reduce %d) on %s\n", state, number - 2, p->number - 2,
			    symbol_name[symbol]);
a177 1
	    }
a178 1
    }
d185 28
a212 27
    int i;
    int k;
    int rule;
    core *statep;
    short *sp;
    short *sp1;

    statep = state_table[state];
    k = statep->nitems;

    for (i = 0; i < k; i++)
    {
	sp1 = sp = ritem + statep->items[i];

	while (*sp >= 0) ++sp;
	rule = -(*sp);
	fprintf(verbose_file, "\t%s : ", symbol_name[rlhs[rule]]);

        for (sp = ritem + rrhs[rule]; sp < sp1; sp++)
	    fprintf(verbose_file, "%s ", symbol_name[*sp]);

	putc('.', verbose_file);

	while (*sp >= 0)
	{
	    fprintf(verbose_file, " %s", symbol_name[*sp]);
	    sp++;
a213 2
	fprintf(verbose_file, "  (%d)\n", -2 - *sp);
    }
d220 2
a221 2
    action *p;
    int i, j, k, nnulls;
d223 19
a241 23
    nnulls = 0;
    for (p = parser[state]; p; p = p->next)
    {
	if (p->action_code == REDUCE &&
		(p->suppressed == 0 || p->suppressed == 1))
	{
	    i = p->number;
	    if (rrhs[i] + 1 == rrhs[i+1])
	    {
		for (j = 0; j < nnulls && i > null_rules[j]; ++j)
		    continue;

		if (j == nnulls)
		{
		    ++nnulls;
		    null_rules[j] = i;
		}
		else if (i != null_rules[j])
		{
		    ++nnulls;
		    for (k = nnulls - 1; k > j; --k)
			null_rules[k] = null_rules[k-1];
		    null_rules[j] = i;
a242 1
	    }
a243 1
    }
d245 6
a250 7
    for (i = 0; i < nnulls; ++i)
    {
	j = null_rules[i];
	fprintf(verbose_file, "\t%s : .  (%d)\n", symbol_name[rlhs[j]],
		j - 2);
    }
    fprintf(verbose_file, "\n");
d257 18
a274 21
    action *p;
    shifts *sp;
    int as;

    if (stateno == final_state)
	fprintf(verbose_file, "\t$end  accept\n");

    p = parser[stateno];
    if (p)
    {
	print_shifts(p);
	print_reductions(p, defred[stateno]);
    }

    sp = shift_table[stateno];
    if (sp && sp->nshifts > 0)
    {
	as = accessing_symbol[sp->shift[sp->nshifts - 1]];
	if (ISVAR(as))
	    print_gotos(stateno);
    }
d279 1
a279 1
print_shifts(action *p)
d281 2
a282 2
    int count;
    action *q;
d284 12
a295 14
    count = 0;
    for (q = p; q; q = q->next)
    {
	if (q->suppressed < 2 && q->action_code == SHIFT)
	    ++count;
    }

    if (count > 0)
    {
	for (; p; p = p->next)
	{
	    if (p->action_code == SHIFT && p->suppressed == 0)
		fprintf(verbose_file, "\t%s  shift %d\n",
			    symbol_name[p->symbol], p->number);
a296 1
    }
d301 1
a301 1
print_reductions(action *p, int defred)
d303 22
a324 2
    int k, anyreds;
    action *q;
d326 3
a328 28
    anyreds = 0;
    for (q = p; q ; q = q->next)
    {
	if (q->action_code == REDUCE && q->suppressed < 2)
	{
	    anyreds = 1;
	    break;
	}
    }

    if (anyreds == 0)
	fprintf(verbose_file, "\t.  error\n");
    else
    {
	for (; p; p = p->next)
	{
	    if (p->action_code == REDUCE && p->number != defred)
	    {
		k = p->number - 2;
		if (p->suppressed == 0)
		    fprintf(verbose_file, "\t%s  reduce %d\n",
			    symbol_name[p->symbol], k);
	    }
	}

        if (defred > 0)
	    fprintf(verbose_file, "\t.  reduce %d\n", defred - 2);
    }
d335 15
a349 15
    int i, k;
    int as;
    short *to_state;
    shifts *sp;

    putc('\n', verbose_file);
    sp = shift_table[stateno];
    to_state = sp->shift;
    for (i = 0; i < sp->nshifts; ++i)
    {
	k = to_state[i];
	as = accessing_symbol[k];
	if (ISVAR(as))
	    fprintf(verbose_file, "\t%s  goto %d\n", symbol_name[as], k);
    }
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: verbose.c,v 1.9 2005/06/10 16:40:45 pvalchev Exp $	*/
d58 1
a58 1
    null_rules = (short *) MALLOC(nrules*sizeof(short));
d63 1
a63 1
    FREE(null_rules);
@


1.9
log
@-Wall clean; ok otto deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: verbose.c,v 1.8 2003/06/19 16:34:53 pvalchev Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)verbose.c	5.3 (Berkeley) 1/20/91";
#else
static char rcsid[] = "$OpenBSD: verbose.c,v 1.8 2003/06/19 16:34:53 pvalchev Exp $";
#endif
#endif /* not lint */
@


1.8
log
@ansify; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: verbose.c,v 1.7 2003/06/03 02:56:24 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: verbose.c,v 1.7 2003/06/03 02:56:24 millert Exp $";
d150 1
a150 1
    int symbol, act, number;
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: verbose.c,v 1.6 2002/02/16 21:28:00 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: verbose.c,v 1.6 2002/02/16 21:28:00 millert Exp $";
d60 1
a60 1
verbose()
d85 1
a85 1
log_unused()
d105 1
a105 1
log_conflicts()
d134 1
a134 2
print_state(state)
int state;
d148 1
a148 2
print_conflicts(state)
int state;
d196 1
a196 2
print_core(state)
int state;
d232 1
a232 2
print_nulls(state)
int state;
d276 1
a276 2
print_actions(stateno)
int stateno;
d303 1
a303 2
print_shifts(p)
action *p;
d328 1
a328 3
print_reductions(p, defred)
action *p;
int defred;
d365 1
a365 2
print_gotos(stateno)
int stateno;
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: verbose.c,v 1.5 2001/11/19 19:02:18 mpech Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: verbose.c,v 1.5 2001/11/19 19:02:18 mpech Exp $";
@


1.5
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: verbose.c,v 1.4 2001/07/16 06:29:45 pvalchev Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: verbose.c,v 1.4 2001/07/16 06:29:45 pvalchev Exp $";
d52 10
a61 10
void log_unused __P((void));
void log_conflicts __P((void));
void print_state __P((int));
void print_conflicts __P((int));
void print_core __P((int));
void print_nulls __P((int));
void print_actions __P((int));
void print_shifts __P((action *));
void print_reductions __P((action *, int));
void print_gotos __P((int));
@


1.4
log
@-Wall cleanup; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: verbose.c,v 1.3 1996/06/26 05:44:40 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: verbose.c,v 1.3 1996/06/26 05:44:40 deraadt Exp $";
d66 1
a66 1
    register int i;
d91 2
a92 2
    register int i;
    register short *p;
d111 1
a111 1
    register int i;
d156 2
a157 2
    register int symbol, act, number;
    register action *p;
d205 6
a210 6
    register int i;
    register int k;
    register int rule;
    register core *statep;
    register short *sp;
    register short *sp1;
d242 2
a243 2
    register action *p;
    register int i, j, k, nnulls;
d287 3
a289 3
    register action *p;
    register shifts *sp;
    register int as;
d313 1
a313 1
register action *p;
d315 2
a316 2
    register int count;
    register action *q;
d339 2
a340 2
register action *p;
register int defred;
d342 2
a343 2
    register int k, anyreds;
    register action *q;
d380 4
a383 4
    register int i, k;
    register int as;
    register short *to_state;
    register shifts *sp;
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: verbose.c,v 1.4 1996/03/19 03:21:50 jtc Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: verbose.c,v 1.4 1996/03/19 03:21:50 jtc Exp $";
d52 12
d88 1
d108 1
d137 1
d152 1
d201 1
d238 1
d283 1
d311 1
d337 1
d376 1
@


1.2
log
@sync to netbsd 960418
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: verbose.c,v 1.4 1996/03/19 03:21:50 jtc Exp $";
@


1.1
log
@Initial revision
@
text
@d1 38
d40 5
a44 1
static char rcsid[] = "$Id: verbose.c,v 1.3 1993/08/02 17:56:51 mycroft Exp $";
a48 1

a372 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
