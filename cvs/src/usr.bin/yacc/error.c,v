head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.12
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.14
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.8
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.6
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.4
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.03.08.01.05.39;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.01.08.22.55.59;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2011.09.22.16.21.23;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.50;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.08.03.18.59;	author pvalchev;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.19.16.34.53;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.24;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.19.03.24.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.18;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.16.06.29.44;	author pvalchev;	state Exp;
branches;
next	1.4;

1.4
date	99.08.04.18.31.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.44.36;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.45.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.05;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@reindent
@
text
@/*		$OpenBSD: error.c,v 1.13 2014/01/08 22:55:59 millert Exp $		*/
/*		$NetBSD: error.c,v 1.4 1996/03/19 03:21:32 jtc Exp $		*/

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Robert Paul Corbett.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* routines for printing error messages  */

#include "defs.h"


void
fatal(char *msg)
{
	fprintf(stderr, "%s: %s\n", input_file_name, msg);
	done(2);
}


void
no_space(void)
{
	fprintf(stderr, "%s: yacc is out of space\n", input_file_name);
	done(2);
}


void
open_error(char *filename)
{
	fprintf(stderr, "%s: cannot open source file %s\n",
	    input_file_name, filename);
	done(2);
}

void
open_write_error(char *filename)
{
	fprintf(stderr, "%s: cannot open target file %s for writing\n",
	    input_file_name, filename);
	done(2);
}

void
unexpected_EOF(void)
{
	fprintf(stderr, "%s:%d: unexpected end-of-file\n",
	    input_file_name, lineno);
	done(1);
}


void
print_pos(char *st_line, char *st_cptr)
{
	char *s;

	if (st_line == 0)
		return;
	for (s = st_line; *s != '\n'; ++s) {
		if (isprint((unsigned char)*s) || *s == '\t')
			putc(*s, stderr);
		else
			putc('?', stderr);
	}
	putc('\n', stderr);
	for (s = st_line; s < st_cptr; ++s) {
		if (*s == '\t')
			putc('\t', stderr);
		else
			putc(' ', stderr);
	}
	putc('^', stderr);
	putc('\n', stderr);
}

void
syntax_error(int st_lineno, char *st_line, char *st_cptr)
{
	fprintf(stderr, "%s:%d: syntax error\n",
	    input_file_name, st_lineno);
	print_pos(st_line, st_cptr);
	done(1);
}

void
unterminated_comment(int c_lineno, char *c_line, char *c_cptr)
{
	fprintf(stderr, "%s:%d: unmatched /*\n",
	    input_file_name, c_lineno);
	print_pos(c_line, c_cptr);
	done(1);
}

void
unterminated_string(int s_lineno, char *s_line, char *s_cptr)
{
	fprintf(stderr, "%s:%d:, unterminated string\n",
	    input_file_name, s_lineno);
	print_pos(s_line, s_cptr);
	done(1);
}

void
unterminated_text(int t_lineno, char *t_line, char *t_cptr)
{
	fprintf(stderr, "%s:%d: unmatched %%{\n",
	    input_file_name, t_lineno);
	print_pos(t_line, t_cptr);
	done(1);
}

void
unterminated_union(int u_lineno, char *u_line, char *u_cptr)
{
	fprintf(stderr, "%s:%d: unterminated %%union declaration\n",
	    input_file_name, u_lineno);
	print_pos(u_line, u_cptr);
	done(1);
}

void
over_unionized(char *u_cptr)
{
	fprintf(stderr, "%s:%d: too many %%union declarations\n",
	    input_file_name, lineno);
	print_pos(line, u_cptr);
	done(1);
}

void
illegal_tag(int t_lineno, char *t_line, char *t_cptr)
{
	fprintf(stderr, "%s:%d: illegal tag\n",
	    input_file_name, t_lineno);
	print_pos(t_line, t_cptr);
	done(1);
}


void
illegal_character(char *c_cptr)
{
	fprintf(stderr, "%s:%d: illegal character\n",
	    input_file_name, lineno);
	print_pos(line, c_cptr);
	done(1);
}


void
used_reserved(char *s)
{
	fprintf(stderr, "%s:%d: illegal use of reserved symbol %s\n",
	    input_file_name, lineno, s);
	done(1);
}

void
tokenized_start(char *s)
{
	fprintf(stderr, "%s:%d: the start symbol %s cannot be declared to be a token\n",
	    input_file_name, lineno, s);
	done(1);
}

void
retyped_warning(char *s)
{
	fprintf(stderr, "%s:%d: the type of %s has been redeclared\n",
	    input_file_name, lineno, s);
}

void
reprec_warning(char *s)
{
	fprintf(stderr, "%s:%d: the precedence of %s has been redeclared\n",
	    input_file_name, lineno, s);
}

void
revalued_warning(char *s)
{
	fprintf(stderr, "%s:%d: the value of %s has been redeclared\n",
	    input_file_name, lineno, s);
}

void
terminal_start(char *s)
{
	fprintf(stderr, "%s:%d: the start symbol %s is a token\n",
	    input_file_name, lineno, s);
	done(1);
}

void
restarted_warning(void)
{
	fprintf(stderr, "%s:%d: the start symbol has been redeclared\n",
	     input_file_name, lineno);
}

void
no_grammar(void)
{
	fprintf(stderr, "%s:%d: no grammar has been specified\n",
	    input_file_name, lineno);
	done(1);
}

void
terminal_lhs(int s_lineno)
{
	fprintf(stderr, "%s:%d: a token appears on the lhs of a production\n",
	    input_file_name, s_lineno);
	done(1);
}

void
prec_redeclared(void)
{
	fprintf(stderr, "%s:%d: conflicting %%prec specifiers\n",
	    input_file_name, lineno);
}

void
unterminated_action(int a_lineno, char *a_line, char *a_cptr)
{
	fprintf(stderr, "%s:%d: unterminated action\n",
	    input_file_name, a_lineno);
	print_pos(a_line, a_cptr);
	done(1);
}

void
dollar_warning(int a_lineno, int i)
{
	fprintf(stderr, "%s:%d: $%d references beyond the end of the current rule\n",
	    input_file_name, a_lineno, i);
}

void
dollar_error(int a_lineno, char *a_line, char *a_cptr)
{
	fprintf(stderr, "%s:%d: illegal $-name\n",
	    input_file_name, a_lineno);
	print_pos(a_line, a_cptr);
	done(1);
}


void
untyped_lhs(void)
{
	fprintf(stderr, "%s:%d: $$ is untyped\n",
	    input_file_name, lineno);
	done(1);
}

void
untyped_rhs(int i, char *s)
{
	fprintf(stderr, "%s:%d: $%d (%s) is untyped\n",
	    input_file_name, lineno, i, s);
	done(1);
}

void
unknown_rhs(int i)
{
	fprintf(stderr, "%s:%d: $%d is untyped\n",
	    input_file_name, lineno, i);
	done(1);
}

void
default_action_warning(void)
{
	fprintf(stderr, "%s:%d: the default action assigns an undefined value to $$\n",
	    input_file_name, lineno);
}

void
undefined_goal(char *s)
{
	fprintf(stderr, "%s: the start symbol %s is undefined\n", input_file_name, s);
	done(1);
}

void
undefined_symbol_warning(char *s)
{
	fprintf(stderr, "%s: the symbol %s is undefined\n", input_file_name, s);
}
@


1.13
log
@Add casts to unsigned char for ctype functions and other places
where a char is stored in an int.  Joint work with and OK deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD: error.c,v 1.12 2011/09/22 16:21:23 nicm Exp $	*/
/*	$NetBSD: error.c,v 1.4 1996/03/19 03:21:32 jtc Exp $	*/
d44 2
a45 2
    fprintf(stderr, "%s: %s\n", input_file_name, msg);
    done(2);
d52 2
a53 2
    fprintf(stderr, "%s: yacc is out of space\n", input_file_name);
    done(2);
d60 3
a62 3
    fprintf(stderr, "%s: cannot open source file %s\n",
	input_file_name, filename);
    done(2);
d68 3
a70 3
    fprintf(stderr, "%s: cannot open target file %s for writing\n",
	input_file_name, filename);
    done(2);
d76 1
a76 1
    fprintf(stderr, "%s:%d: unexpected end-of-file\n",
d78 1
a78 1
    done(1);
d85 1
a85 1
    char *s;
d87 17
a103 18
    if (st_line == 0) return;
    for (s = st_line; *s != '\n'; ++s)
    {
	if (isprint((unsigned char)*s) || *s == '\t')
	    putc(*s, stderr);
	else
	    putc('?', stderr);
    }
    putc('\n', stderr);
    for (s = st_line; s < st_cptr; ++s)
    {
	if (*s == '\t')
	    putc('\t', stderr);
	else
	    putc(' ', stderr);
    }
    putc('^', stderr);
    putc('\n', stderr);
d109 1
a109 1
    fprintf(stderr, "%s:%d: syntax error\n",
d111 2
a112 2
    print_pos(st_line, st_cptr);
    done(1);
d118 1
a118 1
    fprintf(stderr, "%s:%d: unmatched /*\n",
d120 2
a121 2
    print_pos(c_line, c_cptr);
    done(1);
d127 1
a127 1
    fprintf(stderr, "%s:%d:, unterminated string\n",
d129 2
a130 2
    print_pos(s_line, s_cptr);
    done(1);
d136 1
a136 1
    fprintf(stderr, "%s:%d: unmatched %%{\n",
d138 2
a139 2
    print_pos(t_line, t_cptr);
    done(1);
d145 1
a145 1
    fprintf(stderr, "%s:%d: unterminated %%union declaration\n",
d147 2
a148 2
    print_pos(u_line, u_cptr);
    done(1);
d154 1
a154 1
    fprintf(stderr, "%s:%d: too many %%union declarations\n",
d156 2
a157 2
    print_pos(line, u_cptr);
    done(1);
d163 1
a163 1
    fprintf(stderr, "%s:%d: illegal tag\n",
d165 2
a166 2
    print_pos(t_line, t_cptr);
    done(1);
d173 1
a173 1
    fprintf(stderr, "%s:%d: illegal character\n",
d175 2
a176 2
    print_pos(line, c_cptr);
    done(1);
d183 1
a183 1
    fprintf(stderr, "%s:%d: illegal use of reserved symbol %s\n",
d185 1
a185 1
    done(1);
d191 1
a191 1
     fprintf(stderr, "%s:%d: the start symbol %s cannot be declared to be a token\n",
d193 1
a193 1
     done(1);
d199 1
a199 1
    fprintf(stderr, "%s:%d: the type of %s has been redeclared\n",
d206 1
a206 1
    fprintf(stderr, "%s:%d: the precedence of %s has been redeclared\n",
d213 1
a213 1
    fprintf(stderr, "%s:%d: the value of %s has been redeclared\n",
d220 1
a220 1
    fprintf(stderr, "%s:%d: the start symbol %s is a token\n",
d222 1
a222 1
    done(1);
d228 1
a228 1
    fprintf(stderr, "%s:%d: the start symbol has been redeclared\n",
d235 1
a235 1
    fprintf(stderr, "%s:%d: no grammar has been specified\n",
d237 1
a237 1
    done(1);
d243 1
a243 1
    fprintf(stderr, "%s:%d: a token appears on the lhs of a production\n",
d245 1
a245 1
    done(1);
d251 1
a251 1
    fprintf(stderr, "%s:%d: conflicting %%prec specifiers\n",
d258 1
a258 1
    fprintf(stderr, "%s:%d: unterminated action\n",
d260 2
a261 2
    print_pos(a_line, a_cptr);
    done(1);
d267 1
a267 1
    fprintf(stderr, "%s:%d: $%d references beyond the end of the current rule\n",
d274 1
a274 1
    fprintf(stderr, "%s:%d: illegal $-name\n",
d276 2
a277 2
    print_pos(a_line, a_cptr);
    done(1);
d284 1
a284 1
    fprintf(stderr, "%s:%d: $$ is untyped\n",
d286 1
a286 1
    done(1);
d292 1
a292 1
    fprintf(stderr, "%s:%d: $%d (%s) is untyped\n",
d294 1
a294 1
    done(1);
d300 1
a300 1
    fprintf(stderr, "%s:%d: $%d is untyped\n",
d302 1
a302 1
    done(1);
d308 1
a308 1
    fprintf(stderr, "%s:%d: the default action assigns an undefined value to $$\n",
d315 2
a316 2
    fprintf(stderr, "%s: the start symbol %s is undefined\n", input_file_name, s);
    done(1);
d322 1
a322 1
    fprintf(stderr, "%s: the symbol %s is undefined\n", input_file_name, s);
@


1.12
log
@Make use of the filename argument to open_error(), pointed out by
Michael W Bombardieri.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.11 2009/10/27 23:59:50 deraadt Exp $	*/
d90 1
a90 1
	if (isprint(*s) || *s == '\t')
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.10 2005/06/08 03:18:59 pvalchev Exp $	*/
d60 2
a61 1
    fprintf(stderr, "%s: cannot open source file\n", input_file_name);
@


1.10
log
@add open_write_error() to bail on fopen(3) failing to open for write, gains
more descriptive error messages, eg:
"cannot open target file y.tab.h for writing" as opposed to a generic error.
based on Alexander von Gernler <grunk@@pestilenz.org>, ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.9 2003/06/19 16:34:53 pvalchev Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)error.c	5.3 (Berkeley) 6/1/90";
#else
static char rcsid[] = "$OpenBSD: error.c,v 1.9 2003/06/19 16:34:53 pvalchev Exp $";
#endif
#endif /* not lint */
@


1.9
log
@ansify; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.8 2003/06/03 02:56:24 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: error.c,v 1.8 2003/06/03 02:56:24 millert Exp $";
d72 7
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.7 2002/06/19 03:24:56 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: error.c,v 1.7 2002/06/19 03:24:56 deraadt Exp $";
d50 1
a50 2
fatal(msg)
char *msg;
d58 1
a58 1
no_space()
d66 1
a66 2
open_error(filename)
char *filename;
d74 1
a74 1
unexpected_EOF()
d83 1
a83 3
print_pos(st_line, st_cptr)
char *st_line;
char *st_cptr;
d108 1
a108 4
syntax_error(st_lineno, st_line, st_cptr)
int st_lineno;
char *st_line;
char *st_cptr;
d117 1
a117 4
unterminated_comment(c_lineno, c_line, c_cptr)
int c_lineno;
char *c_line;
char *c_cptr;
d126 1
a126 4
unterminated_string(s_lineno, s_line, s_cptr)
int s_lineno;
char *s_line;
char *s_cptr;
d135 1
a135 4
unterminated_text(t_lineno, t_line, t_cptr)
int t_lineno;
char *t_line;
char *t_cptr;
d144 1
a144 4
unterminated_union(u_lineno, u_line, u_cptr)
int u_lineno;
char *u_line;
char *u_cptr;
d153 1
a153 2
over_unionized(u_cptr)
char *u_cptr;
d162 1
a162 4
illegal_tag(t_lineno, t_line, t_cptr)
int t_lineno;
char *t_line;
char *t_cptr;
d172 1
a172 2
illegal_character(c_cptr)
char *c_cptr;
d182 1
a182 2
used_reserved(s)
char *s;
d190 1
a190 2
tokenized_start(s)
char *s;
d198 1
a198 2
retyped_warning(s)
char *s;
d205 1
a205 2
reprec_warning(s)
char *s;
d212 1
a212 2
revalued_warning(s)
char *s;
d219 1
a219 2
terminal_start(s)
char *s;
d227 1
a227 1
restarted_warning()
d234 1
a234 1
no_grammar()
d242 1
a242 2
terminal_lhs(s_lineno)
int s_lineno;
d250 1
a250 1
prec_redeclared()
d257 1
a257 4
unterminated_action(a_lineno, a_line, a_cptr)
int a_lineno;
char *a_line;
char *a_cptr;
d266 1
a266 3
dollar_warning(a_lineno, i)
int a_lineno;
int i;
d273 1
a273 4
dollar_error(a_lineno, a_line, a_cptr)
int a_lineno;
char *a_line;
char *a_cptr;
d283 1
a283 1
untyped_lhs()
d291 1
a291 3
untyped_rhs(i, s)
int i;
char *s;
d299 1
a299 2
unknown_rhs(i)
int i;
d307 1
a307 1
default_action_warning()
d314 1
a314 2
undefined_goal(s)
char *s;
d321 1
a321 2
undefined_symbol_warning(s)
char *s;
@


1.7
log
@have yacc spit out c compiler-like error messages, so that utilities which
expect those can cope.  I've wanted this for >12 years.
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.6 2001/11/19 19:02:18 mpech Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: error.c,v 1.6 2001/11/19 19:02:18 mpech Exp $";
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.5 2001/07/16 06:29:44 pvalchev Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: error.c,v 1.5 2001/07/16 06:29:44 pvalchev Exp $";
d57 1
a57 1
    fprintf(stderr, "%s: f - %s\n", __progname, msg);
d65 1
a65 1
    fprintf(stderr, "%s: f - out of space\n", __progname);
d74 1
a74 1
    fprintf(stderr, "%s: f - cannot open \"%s\"\n", __progname, filename);
d82 2
a83 2
    fprintf(stderr, "%s: e - line %d of \"%s\", unexpected end-of-file\n",
	    __progname, lineno, input_file_name);
d121 2
a122 2
    fprintf(stderr, "%s: e - line %d of \"%s\", syntax error\n",
	    __progname, st_lineno, input_file_name);
d133 2
a134 2
    fprintf(stderr, "%s: e - line %d of \"%s\", unmatched /*\n",
	    __progname, c_lineno, input_file_name);
d145 2
a146 2
    fprintf(stderr, "%s: e - line %d of \"%s\", unterminated string\n",
	    __progname, s_lineno, input_file_name);
d157 2
a158 2
    fprintf(stderr, "%s: e - line %d of \"%s\", unmatched %%{\n",
	    __progname, t_lineno, input_file_name);
d169 2
a170 2
    fprintf(stderr, "%s: e - line %d of \"%s\", unterminated %%union \
declaration\n", __progname, u_lineno, input_file_name);
d179 2
a180 2
    fprintf(stderr, "%s: e - line %d of \"%s\", too many %%union \
declarations\n", __progname, lineno, input_file_name);
d191 2
a192 2
    fprintf(stderr, "%s: e - line %d of \"%s\", illegal tag\n",
	    __progname, t_lineno, input_file_name);
d202 2
a203 2
    fprintf(stderr, "%s: e - line %d of \"%s\", illegal character\n",
	    __progname, lineno, input_file_name);
d213 2
a214 2
    fprintf(stderr, "%s: e - line %d of \"%s\", illegal use of reserved symbol \
%s\n", __progname, lineno, input_file_name, s);
d222 2
a223 2
     fprintf(stderr, "%s: e - line %d of \"%s\", the start symbol %s cannot be \
declared to be a token\n", __progname, lineno, input_file_name, s);
d231 2
a232 2
    fprintf(stderr, "%s: w - line %d of \"%s\", the type of %s has been \
redeclared\n", __progname, lineno, input_file_name, s);
d239 2
a240 2
    fprintf(stderr, "%s: w - line %d of \"%s\", the precedence of %s has been \
redeclared\n", __progname, lineno, input_file_name, s);
d247 2
a248 2
    fprintf(stderr, "%s: w - line %d of \"%s\", the value of %s has been \
redeclared\n", __progname, lineno, input_file_name, s);
d255 2
a256 2
    fprintf(stderr, "%s: e - line %d of \"%s\", the start symbol %s is a \
token\n", __progname, lineno, input_file_name, s);
d263 2
a264 2
    fprintf(stderr, "%s: w - line %d of \"%s\", the start symbol has been \
redeclared\n", __progname, lineno, input_file_name);
d270 2
a271 2
    fprintf(stderr, "%s: e - line %d of \"%s\", no grammar has been \
specified\n", __progname, lineno, input_file_name);
d279 2
a280 2
    fprintf(stderr, "%s: e - line %d of \"%s\", a token appears on the lhs \
of a production\n", __progname, s_lineno, input_file_name);
d287 2
a288 2
    fprintf(stderr, "%s: w - line %d of  \"%s\", conflicting %%prec \
specifiers\n", __progname, lineno, input_file_name);
d297 2
a298 2
    fprintf(stderr, "%s: e - line %d of \"%s\", unterminated action\n",
	    __progname, a_lineno, input_file_name);
d308 2
a309 2
    fprintf(stderr, "%s: w - line %d of \"%s\", $%d references beyond the \
end of the current rule\n", __progname, a_lineno, input_file_name, i);
d318 2
a319 2
    fprintf(stderr, "%s: e - line %d of \"%s\", illegal $-name\n",
	    __progname, a_lineno, input_file_name);
d328 2
a329 2
    fprintf(stderr, "%s: e - line %d of \"%s\", $$ is untyped\n",
	    __progname, lineno, input_file_name);
d338 2
a339 2
    fprintf(stderr, "%s: e - line %d of \"%s\", $%d (%s) is untyped\n",
	    __progname, lineno, input_file_name, i, s);
d347 2
a348 2
    fprintf(stderr, "%s: e - line %d of \"%s\", $%d is untyped\n",
	    __progname, lineno, input_file_name, i);
d355 2
a356 2
    fprintf(stderr, "%s: w - line %d of \"%s\", the default action assigns an \
undefined value to $$\n", __progname, lineno, input_file_name);
d363 1
a363 1
    fprintf(stderr, "%s: e - the start symbol %s is undefined\n", __progname, s);
d371 1
a371 1
    fprintf(stderr, "%s: w - the symbol %s is undefined\n", __progname, s);
@


1.5
log
@-Wall cleanup; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.4 1999/08/04 18:31:26 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: error.c,v 1.4 1999/08/04 18:31:26 millert Exp $";
d93 1
a93 1
    register char *s;
@


1.4
log
@o Use __progname
o Use _PATH_TMP
o Use mkstemp() instead of mktemp()
o Really use 10 X's (one is eaten up by a letter)
o Correct manpage wrt temp file name
o Uncomment .Xr yyfix in man page since we ship it now
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.3 1996/06/26 05:44:36 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: error.c,v 1.3 1996/06/26 05:44:36 deraadt Exp $";
d53 1
d62 1
d70 1
d79 1
d88 1
d115 1
a115 1

d127 1
a127 1

d139 1
a139 1

d151 1
a151 1

d163 1
a163 1

d175 1
a175 1

d185 1
a185 1

d198 1
d209 1
d218 1
a218 1

d227 1
a227 1

d235 1
a235 1

d243 1
a243 1

d251 1
a251 1

d260 1
a260 1

d267 1
a267 1

d275 1
a275 1

d284 1
a284 1

d291 1
a291 1

d303 1
a303 1

d312 1
a312 1

d325 1
d333 1
a333 1

d343 1
a343 1

d352 1
a352 1

d359 1
a359 1

d367 1
a367 1

@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: error.c,v 1.4 1996/03/19 03:21:32 jtc Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: error.c,v 1.4 1996/03/19 03:21:32 jtc Exp $";
d56 1
a56 1
    fprintf(stderr, "%s: f - %s\n", myname, msg);
d63 1
a63 1
    fprintf(stderr, "%s: f - out of space\n", myname);
d71 1
a71 1
    fprintf(stderr, "%s: f - cannot open \"%s\"\n", myname, filename);
d79 1
a79 1
	    myname, lineno, input_file_name);
d117 1
a117 1
	    myname, st_lineno, input_file_name);
d129 1
a129 1
	    myname, c_lineno, input_file_name);
d141 1
a141 1
	    myname, s_lineno, input_file_name);
d153 1
a153 1
	    myname, t_lineno, input_file_name);
d165 1
a165 1
declaration\n", myname, u_lineno, input_file_name);
d175 1
a175 1
declarations\n", myname, lineno, input_file_name);
d187 1
a187 1
	    myname, t_lineno, input_file_name);
d197 1
a197 1
	    myname, lineno, input_file_name);
d207 1
a207 1
%s\n", myname, lineno, input_file_name, s);
d216 1
a216 1
declared to be a token\n", myname, lineno, input_file_name, s);
d225 1
a225 1
redeclared\n", myname, lineno, input_file_name, s);
d233 1
a233 1
redeclared\n", myname, lineno, input_file_name, s);
d241 1
a241 1
redeclared\n", myname, lineno, input_file_name, s);
d249 1
a249 1
token\n", myname, lineno, input_file_name, s);
d257 1
a257 1
redeclared\n", myname, lineno, input_file_name);
d264 1
a264 1
specified\n", myname, lineno, input_file_name);
d273 1
a273 1
of a production\n", myname, s_lineno, input_file_name);
d281 1
a281 1
specifiers\n", myname, lineno, input_file_name);
d291 1
a291 1
	    myname, a_lineno, input_file_name);
d302 1
a302 1
end of the current rule\n", myname, a_lineno, input_file_name, i);
d312 1
a312 1
	    myname, a_lineno, input_file_name);
d321 1
a321 1
	    myname, lineno, input_file_name);
d331 1
a331 1
	    myname, lineno, input_file_name, i, s);
d340 1
a340 1
	    myname, lineno, input_file_name, i);
d348 1
a348 1
undefined value to $$\n", myname, lineno, input_file_name);
d355 1
a355 1
    fprintf(stderr, "%s: e - the start symbol %s is undefined\n", myname, s);
d363 1
a363 1
    fprintf(stderr, "%s: w - the symbol %s is undefined\n", myname, s);
@


1.2
log
@sync to netbsd 960418
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: error.c,v 1.4 1996/03/19 03:21:32 jtc Exp $";
@


1.1
log
@Initial revision
@
text
@d1 37
a37 1
/* routines for printing error messages  */
d40 5
a44 1
static char rcsid[] = "$Id: error.c,v 1.3 1993/08/02 17:56:37 mycroft Exp $";
d46 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
