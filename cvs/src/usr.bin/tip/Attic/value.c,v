head	1.34;
access;
symbols
	OPENBSD_5_7:1.33.0.14
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.18
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.16
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.12
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.33.0.10
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.33.0.8
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.6
	OPENBSD_5_0:1.33.0.4
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.2
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.32.0.2
	OPENBSD_4_8_BASE:1.32
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.12
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.8
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.12
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2015.04.24.18.05.21;	author nicm;	state dead;
branches;
next	1.33;
commitid	rYO6EyDAuDX1Hb8y;

1.33
date	2010.08.23.19.05.08;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2010.07.11.23.16.42;	author chl;	state Exp;
branches;
next	1.31;

1.31
date	2010.07.02.07.55.00;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2010.07.02.07.40.03;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.02.07.09.57;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2010.07.02.05.56.29;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.01.21.47.09;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.01.21.43.38;	author nicm;	state Exp;
branches;
next	1.25;

1.25
date	2010.07.01.21.28.01;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2010.07.01.20.24.19;	author chl;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.30.00.26.49;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.29.23.10.56;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.29.21.34.50;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.29.20.57.33;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.29.05.55.37;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.45;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.15.19.42.05;	author moritz;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.20.16.59.24;	author moritz;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.20.01.44.16;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.17.22.02.58;	author moritz;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.17.14.43.06;	author moritz;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.16.21.13.12;	author moritz;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.16.19.32.46;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.27.03.14.22;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.07.06.56.50;	author hugh;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.24.18.38.58;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.02.04.17.59.38;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.09.01.23.24.28;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.02.01.47.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.15.23.47.22;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.40.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Remove tip(1), superseded by cu(1).

ok deraadt sthen bmercer
@
text
@/*	$OpenBSD: value.c,v 1.33 2010/08/23 19:05:08 nicm Exp $	*/
/*	$NetBSD: value.c,v 1.6 1997/02/11 09:24:09 mrg Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <paths.h>

#include "tip.h"

/*
 * Variable manipulation.
 */

value_t vtable[] = {
	{ "beautify",	  V_BOOL,	       "be",     NULL, 0 },
	{ "baudrate",	  V_NUMBER,	       "ba",     NULL, 0 },
	{ "connect",      V_STRING|V_READONLY, "cm",     NULL, 0 },
	{ "device",       V_STRING|V_READONLY, "dv",     NULL, 0 },
	{ "eofread",	  V_STRING,	       "eofr",   NULL, 0 },
	{ "eofwrite",	  V_STRING,	       "eofw",   NULL, 0 },
	{ "eol",	  V_STRING,	       NULL,     NULL, 0 },
	{ "escape",	  V_CHAR,	       "es",     NULL, 0 },
	{ "exceptions",	  V_STRING,	       "ex",     NULL, 0 },
	{ "force",	  V_CHAR,	       "fo",     NULL, 0 },
	{ "framesize",	  V_NUMBER,	       "fr",     NULL, 0 },
	{ "host",	  V_STRING|V_READONLY, "ho",     NULL, 0 },
	{ "log",	  V_STRING,	       NULL,     NULL, 0 },
	{ "prompt",	  V_CHAR,	       "pr",     NULL, 0 },
	{ "raise",	  V_BOOL,	       "ra",     NULL, 0 },
	{ "raisechar",	  V_CHAR,	       "rc",     NULL, 0 },
	{ "record",	  V_STRING,	       "rec",    NULL, 0 },
	{ "remote",	  V_STRING|V_READONLY, NULL,     NULL, 0 },
	{ "script",	  V_BOOL,	       "sc",     NULL, 0 },
	{ "tabexpand",	  V_BOOL,	       "tab",    NULL, 0 },
	{ "verbose",	  V_BOOL,	       "verb",   NULL, 0 },
	{ "SHELL",	  V_STRING,	       NULL,     NULL, 0 },
	{ "HOME",	  V_STRING,	       NULL,	 NULL, 0 },
	{ "echocheck",	  V_BOOL,	       "ec",	 NULL, 0 },
	{ "disconnect",	  V_STRING,	       "di",	 NULL, 0 },
	{ "tandem",	  V_BOOL,	       "ta",	 NULL, 0 },
	{ "linedelay",	  V_NUMBER,	       "ldelay", NULL, 0 },
	{ "chardelay",	  V_NUMBER,	       "cdelay", NULL, 0 },
	{ "etimeout",	  V_NUMBER,	       "et",	 NULL, 0 },
	{ "rawftp",	  V_BOOL,	       "raw",	 NULL, 0 },
	{ "halfduplex",	  V_BOOL,	       "hdx",	 NULL, 0 },
	{ "localecho",	  V_BOOL,	       "le",	 NULL, 0 },
	{ "parity",	  V_STRING,	       "par",	 NULL, 0 },
	{ "hardwareflow", V_BOOL,	       "hf",	 NULL, 0 },
	{ "linedisc",	  V_NUMBER,	       "ld",	 NULL, 0 },
	{ "direct",	  V_BOOL,	       "dc",	 NULL, 0 },
	{ NULL,           0,	                NULL,    NULL, 0 },
};

static int	vlookup(char *);
static void	vtoken(char *);
static size_t	vprint(value_t *);
static void	vprintall(void);
static char    *vinterp(char *, int);

/* Get a string value. */
char *
vgetstr(int value)
{
	value_t	*vp = &vtable[value];
	int	 type;

	type = vp->v_flags & V_TYPEMASK;
	if (type != V_STRING)
		errx(1, "variable %s not a string", vp->v_name);
	return (vp->v_string);
}

/* Get a number value. */
int
vgetnum(int value)
{
	value_t	*vp = &vtable[value];
	int	 type;

	type = vp->v_flags & V_TYPEMASK;
	if (type != V_NUMBER && type != V_BOOL && type != V_CHAR)
		errx(1, "variable %s not a number", vp->v_name);
	return (vp->v_number);
}

/* Set a string value. */
void
vsetstr(int value, char *string)
{
	value_t	*vp = &vtable[value];
	int	 type;

	type = vp->v_flags & V_TYPEMASK;
	if (type != V_STRING)
		errx(1, "variable %s not a string", vp->v_name);

	if (value == RECORD && string != NULL)
		string = expand(string);

	free(vp->v_string);
	if (string != NULL) {
		vp->v_string = strdup(string);
		if (vp->v_string == NULL)
			err(1, "strdup");
	} else
		vp->v_string = NULL;
}

/* Set a number value. */
void
vsetnum(int value, int number)
{
	value_t	*vp = &vtable[value];
	int	 type;

	type = vp->v_flags & V_TYPEMASK;
	if (type != V_NUMBER && type != V_BOOL && type != V_CHAR)
		errx(1, "variable %s not a number", vp->v_name);

	vp->v_number = number;
}

/* Print a single variable and its value. */
static size_t
vprint(value_t *p)
{
	char	*cp;
	size_t	 width;

	width = size(p->v_name);
	switch (p->v_flags & V_TYPEMASK) {
	case V_BOOL:
		if (!p->v_number) {
			width++;
			putchar('!');
		}
		printf("%s", p->v_name);
		break;
	case V_STRING:
		printf("%s=", p->v_name);
		width++;
		if (p->v_string) {
			cp = interp(p->v_string);
			width += size(cp);
			printf("%s", cp);
		}
		break;
	case V_NUMBER:
		width += 6;
		printf("%s=%-5d", p->v_name, p->v_number);
		break;
	case V_CHAR:
		printf("%s=", p->v_name);
		width++;
		if (p->v_number) {
			cp = ctrl(p->v_number);
			width += size(cp);
			printf("%s", cp);
		}
		break;
	}
	return (width);
}

/* Print all variables. */
static void
vprintall(void)
{
	value_t	*vp;
	size_t	 width;

#define MIDDLE 35
	width = 0;
	for (vp = vtable; vp->v_name; vp++) {
		if (vp->v_flags & V_READONLY)
			continue;
		if (width > 0 && width < MIDDLE) {
			while (width++ < MIDDLE)
				putchar(' ');
		}
		width += vprint(vp);
		if (width > MIDDLE) {
			printf("\r\n");
			width = 0;
		}
	}
#undef MIDDLE
}

/* Find index of variable by name or abbreviation. */
static int
vlookup(char *s)
{
	value_t *vp;
	u_int	 i;

	for (i = 0; vtable[i].v_name != NULL; i++) {
		vp = &vtable[i];
		if (strcmp(vp->v_name, s) == 0 ||
		    (vp->v_abbrev != NULL && strcmp(vp->v_abbrev, s) == 0))
			return (i);
	}
	return (-1);
}

void
vinit(void)
{
	struct passwd	*pw;
	value_t		*vp;
	char		 file[FILENAME_MAX], *cp;
	int		 written;
	FILE		*fp;

	/* Clear the table and set the defaults. */
	for (vp = vtable; vp->v_name != NULL; vp++) {
		vp->v_string = NULL;
		vp->v_number = 0;
	}
	vsetnum(BEAUTIFY, 1);
	vsetnum(ESCAPE, '~');
	vsetnum(FORCE, CTRL('p'));
	vsetnum(PROMPT, '\n');
	vsetnum(TAND, 1);
	vsetnum(VERBOSE, 1);
	vsetstr(LOG, _PATH_ACULOG);

	/* Read environment variables. */
	if ((cp = getenv("HOME")) != NULL)
		vsetstr(HOME, cp);
	else {
		pw = getpwuid(getuid());
		if (pw != NULL && pw->pw_dir != NULL)
			vsetstr(HOME, pw->pw_dir);
		else
			vsetstr(HOME, "/");
	}
	if ((cp = getenv("SHELL")) != NULL)
		vsetstr(SHELL, cp);
	else
		vsetstr(SHELL, _PATH_BSHELL);

	/* Read the .tiprc file in the HOME directory. */
	written = snprintf(file, sizeof(file), "%s/.tiprc", vgetstr(HOME));
	if (written < 0 || written >= sizeof(file)) {
		(void)fprintf(stderr, "Home directory path too long: %s\n",
		    vgetstr(HOME));
	} else {
		if ((fp = fopen(file, "r")) != NULL) {
			char *tp;

			while (fgets(file, sizeof(file), fp) != NULL) {
				if (vflag)
					printf("set %s", file);
				if ((tp = strrchr(file, '\n')))
					*tp = '\0';
				vlex(file);
			}
			fclose(fp);
		}
	}
}

void
vlex(char *s)
{
	char *cp;

	if (strcmp(s, "all") == 0)
		vprintall();
	else {
		do {
			if ((cp = vinterp(s, ' ')))
				cp++;
			vtoken(s);
			s = cp;
		} while (s);
	}
}

/* Set a variable from a token. */
static void
vtoken(char *s)
{
	value_t 	*vp;
	int	 	i, value;
	char		*cp;
	const char	*cause;

	if ((cp = strchr(s, '='))) {
		*cp = '\0';
		if ((i = vlookup(s)) != -1) {
			vp = &vtable[i];
			if (vp->v_flags & V_READONLY) {
				printf("access denied\r\n");
				return;
			}
			cp++;
			switch (vp->v_flags & V_TYPEMASK) {
			case V_STRING:
				vsetstr(i, cp);
				break;
			case V_BOOL:
				vsetnum(i, 1);
				break;
			case V_NUMBER:
				value = strtonum(cp, 0, INT_MAX, &cause);
				if (cause != NULL) {
					printf("%s: number %s\r\n", s, cause);
					return;
				}
				vsetnum(i, value);
				break;
			case V_CHAR:
				if (cp[0] != '\0' && cp[1] != '\0') {
					printf("%s: character too big\r\n", s);
					return;
				}
				vsetnum(i, *cp);
			}
			vp->v_flags |= V_CHANGED;
			return;
		}
	} else if ((cp = strchr(s, '?'))) {
		*cp = '\0';
		if ((i = vlookup(s)) != -1) {
			if (vprint(&vtable[i]) > 0)
				printf("\r\n");
			return;
		}
	} else {
		if (*s != '!')
			i = vlookup(s);
		else
			i = vlookup(s + 1);
		if (i != -1) {
			vp = &vtable[i];
			if (vp->v_flags & V_READONLY) {
				printf("%s: access denied\r\n", s);
				return;
			}
			if ((vp->v_flags & V_TYPEMASK) != V_BOOL) {
				printf("%s: not a boolean\r\n", s);
				return;
			}
			vsetnum(i, *s != '!');
			vp->v_flags |= V_CHANGED;
			return;
		}
	}
	printf("%s: unknown variable\r\n", s);
}

static char *
vinterp(char *s, int stop)
{
	char *p = s, c;
	int num;

	while ((c = *s++) && c != stop) {
		switch (c) {

		case '^':
			if (*s)
				*p++ = *s++ - 0100;
			else
				*p++ = c;
			break;

		case '\\':
			num = 0;
			c = *s++;
			if (c >= '0' && c <= '7')
				num = (num<<3)+(c-'0');
			else {
				char *q = "n\nr\rt\tb\bf\f";

				for (; *q; q++)
					if (c == *q++) {
						*p++ = *q;
						goto cont;
					}
				*p++ = c;
			cont:
				break;
			}
			if ((c = *s++) >= '0' && c <= '7') {
				num = (num<<3)+(c-'0');
				if ((c = *s++) >= '0' && c <= '7')
					num = (num<<3)+(c-'0');
				else
					s--;
			} else
				s--;
			*p++ = num;
			break;

		default:
			*p++ = c;
		}
	}
	*p = '\0';
	return (c == stop ? s-1 : NULL);
}
@


1.33
log
@Clear options before setting up HOME and SHELL, not after. Fixes parsing
.tiprc reported by nick@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.32 2010/07/11 23:16:42 chl Exp $	*/
@


1.32
log
@remove unused variable and unused static prototype.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.31 2010/07/02 07:55:00 nicm Exp $	*/
d242 13
a268 13

	/* Clear the table and set the defaults. */
	for (vp = vtable; vp->v_name != NULL; vp++) {
		vp->v_string = NULL;
		vp->v_number = 0;
	}
	vsetnum(BEAUTIFY, 1);
	vsetnum(ESCAPE, '~');
	vsetnum(FORCE, CTRL('p'));
	vsetnum(PROMPT, '\n');
	vsetnum(TAND, 1);
	vsetnum(VERBOSE, 1);
	vsetstr(LOG, _PATH_ACULOG);
@


1.31
log
@Rewrite how printing all variables works to avoid using a global variable
accessed by many functions - instead do it in one function.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.30 2010/07/02 07:40:03 nicm Exp $	*/
a293 1
	value_t *p;
@


1.30
log
@Clear table and set defaults manually, also move table into value.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.29 2010/07/02 07:09:57 nicm Exp $	*/
a80 2
#define MIDDLE	35

d83 2
a84 1
static void	vprint(value_t *);
a86 2
static size_t col = 0;

d150 67
d297 3
a299 4
	if (strcmp(s, "all") == 0) {
		for (p = vtable; p->v_name; p++)
			vprint(p);
	} else {
a306 4
	if (col > 0) {
		printf("\r\n");
		col = 0;
	}
d355 2
a356 1
			vprint(&vtable[i]);
a379 51
}

static void
vprint(value_t *p)
{
	char *cp;

	if (col > 0 && col < MIDDLE)
		while (col++ < MIDDLE)
			putchar(' ');
	col += size(p->v_name);
	switch (p->v_flags & V_TYPEMASK) {

	case V_BOOL:
		if (!p->v_number) {
			col++;
			putchar('!');
		}
		printf("%s", p->v_name);
		break;

	case V_STRING:
		printf("%s=", p->v_name);
		col++;
		if (p->v_string) {
			cp = interp(p->v_string);
			col += size(cp);
			printf("%s", cp);
		}
		break;

	case V_NUMBER:
		col += 6;
		printf("%s=%-5d", p->v_name, p->v_number);
		break;

	case V_CHAR:
		printf("%s=", p->v_name);
		col++;
		if (p->v_number) {
			cp = ctrl(p->v_number);
			col += size(cp);
			printf("%s", cp);
		}
		break;
	}
	if (col >= MIDDLE) {
		col = 0;
		printf("\r\n");
		return;
	}
@


1.29
log
@Merge vassign and vtoken and make it much more strict on what it accepts.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.28 2010/07/02 05:56:29 nicm Exp $	*/
d33 2
d41 40
d130 1
a130 2
	if (!(vp->v_flags & V_INIT))
		free(vp->v_string);
a136 1
	vp->v_flags &= ~V_INIT;
d172 5
a176 3
	char file[FILENAME_MAX], *cp;
	int written;
	FILE *fp;
d179 1
a179 1
	if ((cp = getenv("HOME")))
d181 8
a188 1
	if ((cp = getenv("SHELL")))
d190 15
@


1.28
log
@Bye-bye vstring, and add value type checking code to vgetstr/vsetstr/etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.27 2010/07/01 21:47:09 nicm Exp $	*/
d41 4
a44 5
static value_t *vlookup(char *);
static void vassign(value_t *, char *);
static void vtoken(char *);
static void vprint(value_t *);
static char *vinterp(char *, int);
d113 16
a162 40
/*VARARGS1*/
static void
vassign(value_t *p, char *v)
{
	if (p->v_flags & V_READONLY) {
		printf("access denied\r\n");
		return;
	}

	switch (p->v_flags & V_TYPEMASK) {
	case V_STRING:
		if (p->v_string && strcmp(p->v_string, v) == 0)
			return;
		if (!(p->v_flags & V_INIT))
			free(p->v_string);
		if ((p->v_string = strdup(v)) == NULL) {
			printf("out of core\r\n");
			return;
		}
		p->v_flags &= ~V_INIT;
		break;
	case V_NUMBER:
		if (p->v_number == (int)(long)v)
			return;
		p->v_number = (int)(long)v;
		break;
	case V_BOOL:
		if (p->v_number == (*v != '!'))
			return;
		p->v_number = (*v != '!');
		break;
	case V_CHAR:
		if (p->v_number == *v)
			return;
		p->v_number = *v;
		break;
	}
	p->v_flags |= V_CHANGED;
}

d186 1
d190 4
a193 2
	value_t *p;
	char *cp;
d197 6
a202 1
		if ((p = vlookup(s))) {
d204 21
a224 6
			if ((p->v_flags & V_TYPEMASK) == V_NUMBER)
				vassign(p, (char *)(long)atoi(cp));
			else {
				if (strcmp(s, "record") == 0)
					cp = expand(cp);
				vassign(p, cp);
d226 1
d231 2
a232 2
		if ((p = vlookup(s))) {
			vprint(p);
d237 1
a237 1
			p = vlookup(s);
d239 13
a251 3
			p = vlookup(s+1);
		if (p != NULL) {
			vassign(p, s);
a306 13
}

static value_t *
vlookup(char *s)
{
	value_t *p;

	for (p = vtable; p->v_name; p++) {
		if (strcmp(p->v_name, s) == 0 ||
		    (p->v_abbrev && strcmp(p->v_abbrev, s) == 0))
			return (p);
	}
	return (NULL);
@


1.27
log
@Nix some warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.26 2010/07/01 21:43:38 nicm Exp $	*/
d53 7
a59 1
	return (vtable[value].v_string);
d66 7
a72 1
	return (vtable[value].v_number);
d79 19
a97 1
	vtable[value].v_string = string;
d104 8
a111 1
	vtable[value].v_number = number;
a362 21
}

/*
 * assign variable s with value v (for NUMBER or STRING or CHAR types)
 */
int
vstring(char *s, char *v)
{
	value_t *p;

	p = vlookup(s);
	if (p == 0)
		return (1);
	if ((p->v_flags & V_TYPEMASK) == V_NUMBER)
		vassign(p, (char *)(long)atoi(v));
	else {
		if (strcmp(s, "record") == 0)
			v = expand(v);
		vassign(p, v);
	}
	return (0);
@


1.26
log
@Split v_value into v_string/v_number, change macros to functions and lo let
there be type checking.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.25 2010/07/01 21:28:01 nicm Exp $	*/
d85 1
a85 1
	if (cp = getenv("HOME"))
d87 1
a87 1
	if (cp = getenv("SHELL"))
d195 1
a195 1
		if (p = vlookup(s)) {
@


1.25
log
@Change variable get/set macros to have better names and drop boolean/character
ones.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.24 2010/07/01 20:24:19 chl Exp $	*/
d35 4
d49 28
a76 3
/*
 * Variable manipulation
 */
d122 1
a122 1
		if (p->v_value && strcmp(p->v_value, v) == 0)
d125 2
a126 2
			free(p->v_value);
		if ((p->v_value = strdup(v)) == NULL) {
d133 1
a133 1
		if (p->v_value == v)
d135 1
a135 1
		p->v_value = v;
d138 1
a138 1
		if ((long)p->v_value == (*v != '!'))
d140 1
a140 1
		p->v_value = (char *)(long)(*v != '!');
d143 1
a143 1
		if ((char)(long)p->v_value == *v)
d145 2
a146 1
		p->v_value = (char *)(long)*v;
d224 1
a224 1
		if (!p->v_value) {
d234 2
a235 2
		if (p->v_value) {
			cp = interp(p->v_value);
d243 1
a243 1
		printf("%s=%-5ld", p->v_name, (long)p->v_value);
d249 2
a250 2
		if (p->v_value) {
			cp = ctrl((char)(long)p->v_value);
@


1.24
log
@remove unused variables
add missing headers needed for uu_unlock()

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.23 2010/06/30 00:26:49 nicm Exp $	*/
d57 1
a57 1
		value(HOME) = cp;
d59 1
a59 1
		value(SHELL) = cp;
d62 1
a62 1
	written = snprintf(file, sizeof(file), "%s/.tiprc", value(HOME));
d65 1
a65 1
		    value(HOME));
d104 1
a104 1
		if (number(p->v_value) == number(v))
d106 1
a106 1
		setnumber(p->v_value, number(v));
d109 1
a109 1
		if (boolean(p->v_value) == (*v != '!'))
d111 1
a111 1
		setboolean(p->v_value, (*v != '!'));
d114 1
a114 1
		if (character(p->v_value) == *v)
d116 1
a116 1
		setcharacter(p->v_value, *v);
d155 1
a155 1
				vassign(p, (char *)atoi(cp));
d194 1
a194 1
		if (!boolean(p->v_value)) {
d213 1
a213 1
		printf("%s=%-5ld", p->v_name, number(p->v_value));
d220 1
a220 1
			cp = ctrl(character(p->v_value));
d310 1
a310 1
		vassign(p, (char *)atoi(v));
@


1.23
log
@Only two variables - HOME and SHELL - are from the environment, so just fill
them in explicitly and get rid of the ENVIRON flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.22 2010/06/29 23:10:56 nicm Exp $	*/
a52 1
	value_t *p;
@


1.22
log
@For every variable which has a value table entry with IREMOTE, remove the
remote variable and always use the value from the vtable. This then allows the
IREMOTE flag to be removed.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.21 2010/06/29 21:34:50 nicm Exp $	*/
d56 7
a62 10
	for (p = vtable; p->v_name != NULL; p++) {
		if (p->v_flags & V_ENVIRON) {
			if ((cp = getenv(p->v_name)))
				p->v_value = cp;
		}
	}
	/*
	 * Read the .tiprc file in the HOME directory
	 *  for sets
	 */
d96 1
a96 1
		if (!(p->v_flags & (V_ENVIRON|V_INIT)))
d102 1
a102 1
		p->v_flags &= ~(V_ENVIRON|V_INIT);
@


1.21
log
@Merge v_type and v_access into one v_flags member in value_t, get rid of TRUE
and FALSE, and rename the other flags to have a V_ prefix.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.20 2010/06/29 20:57:33 nicm Exp $	*/
d57 1
a57 1
		if (p->v_flags & V_ENVIRON)
d60 1
a60 2
		if (p->v_flags & V_IREMOTE)
			setnumber(p->v_value, *address(p->v_value));
@


1.20
log
@tip is no longer setuid or setgid so get rid of the complicated
public/private/root permissions scheme for options in favour of a single
read-only bit.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.19 2010/06/29 05:55:37 nicm Exp $	*/
d57 1
a57 1
		if (p->v_type&ENVIRON)
d60 1
a60 1
		if (p->v_type&IREMOTE)
d91 1
a91 1
	if (p->v_access & READONLY) {
d96 2
a97 2
	switch (p->v_type&TMASK) {
	case STRING:
d100 1
a100 1
		if (!(p->v_type&(ENVIRON|INIT)))
d106 1
a106 1
		p->v_type &= ~(ENVIRON|INIT);
d108 1
a108 1
	case NUMBER:
d113 1
a113 1
	case BOOL:
d118 1
a118 1
	case CHAR:
d123 1
a123 1
	p->v_access |= CHANGED;
d159 1
a159 1
			if (p->v_type&NUMBER)
d196 1
a196 1
	switch (p->v_type&TMASK) {
d198 2
a199 2
	case BOOL:
		if (boolean(p->v_value) == FALSE) {
d206 1
a206 1
	case STRING:
d216 1
a216 1
	case NUMBER:
d221 1
a221 1
	case CHAR:
d243 1
a243 1
	for (p = vtable; p->v_name; p++)
d245 1
a245 1
		    (p->v_abrev && strcmp(p->v_abrev, s) == 0))
d247 1
d314 1
a314 1
	if (p->v_type&NUMBER)
@


1.19
log
@Replace "nice" strcmp() wrapper macro with strcmp.

ok jsing
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.18 2009/10/27 23:59:45 deraadt Exp $	*/
a40 1
static int vaccess(unsigned int, unsigned int);
a84 4
	/*
	 * To allow definition of exception prior to fork
	 */
	vtable[EXCEPTIONS].v_access &= ~(WRITE<<PUBLIC);
d91 1
a91 1
	if (!vaccess(p->v_access, WRITE)) {
d134 1
a134 2
			if (vaccess(p->v_access, READ))
				vprint(p);
d170 1
a170 1
		if ((p = vlookup(s)) && vaccess(p->v_access, READ)) {
a235 10
}

static int
vaccess(unsigned int mode, unsigned int rw)
{
	if (mode & (rw<<PUBLIC))
		return (1);
	if (mode & (rw<<PRIVATE))
		return (1);
	return ((mode & (rw<<ROOT)) && getuid() == 0);
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.17 2007/05/15 19:42:05 moritz Exp $	*/
d103 1
a103 1
		if (p->v_value && equal(p->v_value, v))
d137 1
a137 1
	if (equal(s, "all")) {
d260 2
a261 1
		if (equal(p->v_name, s) || (p->v_abrev && equal(p->v_abrev, s)))
@


1.17
log
@Remove useless NOxxx defines and use NULL instead.
No binary change.

OK ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.16 2007/02/20 16:59:24 moritz Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)value.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: value.c,v 1.16 2007/02/20 16:59:24 moritz Exp $";
#endif /* not lint */
@


1.16
log
@Remove wrong length check, which is off-by-one, and
let snprintf(3) decide, if the whole string fittet
into the buffer.

ok ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.15 2007/02/20 01:44:16 ray Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.15 2007/02/20 01:44:16 ray Exp $";
d114 1
a114 1
		if ((p->v_value = strdup(v)) == NOSTR) {
d192 1
a192 1
		if (p != NOVAL) {
@


1.15
log
@Change hard coded numbers to sizeof(buf).  Also change some
sizeof(buf) - 1 to sizeof(buf), since fgets takes the whole buffer size.

Based on diff from Charles Longeau <chl at tuxfamily dot org> long ago.

OK millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.14 2006/03/17 22:02:58 moritz Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.14 2006/03/17 22:02:58 moritz Exp $";
d60 1
d75 2
a76 1
	if (strlen(value(HOME)) + sizeof("/.tiprc") > sizeof(file)) {
a79 1
		snprintf(file, sizeof file, "%s/.tiprc", value(HOME));
@


1.14
log
@more delinting.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.13 2006/03/17 14:43:06 moritz Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.13 2006/03/17 14:43:06 moritz Exp $";
d82 1
a82 1
			while (fgets(file, sizeof(file)-1, fp) != NULL) {
@


1.13
log
@big prototype cleanup:

o make more functions static
o add all the prototypes to tip.h
o consistently declare functions in the cmd table

testing and ok dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.12 2006/03/16 21:13:12 moritz Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.12 2006/03/16 21:13:12 moritz Exp $";
d51 1
a51 1
static int col = 0;
@


1.12
log
@Fix bug that was uncovered by adding correct prototypes and
remove lots of names from func declarations. ok dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.11 2006/03/16 19:32:46 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.11 2006/03/16 19:32:46 deraadt Exp $";
d45 6
a50 1
static int vaccess(unsigned int mode, unsigned int rw);
d99 1
a99 1
void
a101 1

a136 3
static void vprint();
static void vtoken();

a165 1
	char *expand(char *);
a249 1

d271 1
a271 1
char *
a329 1
	char *expand(char *);
@


1.11
log
@first pass of cleanup of this mess; ok dhill
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.10 2003/06/03 02:56:18 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.10 2003/06/03 02:56:18 millert Exp $";
a201 1
	extern char *interp();
d222 1
a222 1
			cp = interp(p->v_value, NULL);
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.9 2002/05/27 03:14:22 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.9 2002/05/27 03:14:22 deraadt Exp $";
d44 2
a45 1
static value_t *vlookup();
d52 1
a52 1
vinit()
d54 1
d56 1
a56 3
	char *cp;
	FILE *f;
	char file[FILENAME_MAX];
d71 1
a71 1
			value(HOME));
d74 1
a74 1
		if ((f = fopen(file, "r")) != NULL) {
d77 1
a77 1
			while (fgets(file, sizeof(file)-1, f) != NULL) {
d84 1
a84 1
			fclose(f);
a92 2
static int vaccess();

d95 1
a95 3
vassign(p, v)
	value_t *p;
	char *v;
d102 1
a103 1

a114 1

a119 1

a124 1

d137 1
a137 2
vlex(s)
	char *s;
d140 1
a146 2
		char *cp;

d161 1
a161 2
vtoken(s)
	char *s;
d165 1
a165 1
	char *expand();
d172 1
a172 1
				vassign(p, atoi(cp));
d200 1
a200 2
vprint(p)
	value_t *p;
d202 1
a203 1
	extern char *interp(), *ctrl();
d253 1
a253 2
vaccess(mode, rw)
	unsigned int mode, rw;
d263 1
a263 2
vlookup(s)
	char *s;
d274 1
a274 3
vinterp(s, stop)
	char *s;
	char stop;
d279 1
a279 1
	while ((c = *s++) && c != stop)
d320 1
d329 1
a329 3
vstring(s,v)
	char *s;
	char *v;
d332 1
a332 1
	char *expand();
d334 1
a334 1
	p = vlookup(s); 
d338 1
a338 1
		vassign(p, atoi(v));
@


1.9
log
@unsigned vs unsigned int
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.8 2002/05/07 06:56:50 hugh Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.8 2002/05/07 06:56:50 hugh Exp $";
@


1.8
log
@Carefully applied -Wall fixups from <panda@@omatis.com>.
Also a little KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.7 2001/10/24 18:38:58 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: value.c,v 1.7 2001/10/24 18:38:58 millert Exp $";
d269 1
a269 1
	unsigned mode, rw;
@


1.7
log
@kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.6 1999/02/04 17:59:38 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: value.c,v 1.6 1999/02/04 17:59:38 deraadt Exp $";
@


1.6
log
@remove strcpy, even if safe
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.5 1997/09/01 23:24:28 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: value.c,v 1.5 1997/09/01 23:24:28 deraadt Exp $";
d57 2
a58 2
	register value_t *p;
	register char *cp;
d79 1
a79 1
			register char *tp;
d102 1
a102 1
	register value_t *p;
d149 1
a149 1
	register char *s;
d151 1
a151 1
	register value_t *p;
d158 1
a158 1
		register char *cp;
d175 1
a175 1
	register char *s;
d177 2
a178 2
	register value_t *p;
	register char *cp;
d215 1
a215 1
	register value_t *p;
d217 1
a217 1
	register char *cp;
d269 1
a269 1
	register unsigned mode, rw;
d280 1
a280 1
	register char *s;
d282 1
a282 1
	register value_t *p;
d292 1
a292 1
	register char *s;
d295 1
a295 1
	register char *p = s, c;
d314 1
a314 1
				register char *q = "n\nr\rt\tb\bf\f";
d348 2
a349 2
	register char *s;
	register char *v;
d351 1
a351 1
	register value_t *p;
@


1.5
log
@Wall pass, and oflow fix from eivind@@bitbox.follo.net
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.4 1997/04/02 01:47:04 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: value.c,v 1.4 1997/04/02 01:47:04 millert Exp $";
d77 1
a77 2
		strcpy(file, value(HOME));
		strcat(file, "/.tiprc");
@


1.4
log
@Merge in good changes from NetBSD:
    Compile in strcict ansi (some day I'll get around to -Wall)
    use set* functions instead of modifying the lvalue
    Change a few sprintf() to snprintf() where it coudl possibly matter.
    Replace zzhack stuff with something saner to make tip work on alpha
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.3 1996/10/15 23:47:22 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: value.c,v 1.3 1996/10/15 23:47:22 millert Exp $";
d54 1
d64 1
a64 1
			if (cp = getenv(p->v_name))
d85 1
a85 1
				if (tp = strrchr(file, '\n'))
d101 1
d148 1
d162 1
a162 1
			if (cp = vinterp(s, ' '))
d182 1
a182 1
	if (cp = strchr(s, '=')) {
d184 1
a184 1
		if (p = vlookup(s)) {
d195 1
a195 1
	} else if (cp = strchr(s, '?')) {
d247 1
a247 1
		printf("%s=%-5d", p->v_name, number(p->v_value));
d347 1
a347 1

@


1.3
log
@Possible buf oflow + index -> strchr.
@
text
@d1 2
a2 2
/*	$OpenBSD: value.c,v 1.2 1996/06/26 05:40:49 deraadt Exp $	*/
/*	$NetBSD: value.c,v 1.3 1994/12/08 09:31:17 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: value.c,v 1.2 1996/06/26 05:40:49 deraadt Exp $";
d66 1
a66 1
			number(p->v_value) = *address(p->v_value);
d73 1
a73 1
		fprintf(stderr, "Home directory path too long: %s\n",
d116 1
a116 1
		if ((p->v_value = malloc(size(v)+1)) == NOSTR) {
a120 1
		strcpy(p->v_value, v);
d126 1
a126 1
		number(p->v_value) = number(v);
d132 1
a132 1
		boolean(p->v_value) = (*v != '!');
d138 1
a138 1
		character(p->v_value) = *v;
d144 1
a149 1
	static void vtoken();
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: value.c,v 1.3 1994/12/08 09:31:17 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: value.c,v 1.3 1994/12/08 09:31:17 jtc Exp $";
d59 1
a59 1
	char file[256];
d72 17
a88 11
	strcpy(file, value(HOME));
	strcat(file, "/.tiprc");
	if ((f = fopen(file, "r")) != NULL) {
		register char *tp;

		while (fgets(file, sizeof(file)-1, f) != NULL) {
			if (vflag)
				printf("set %s", file);
			if (tp = rindex(file, '\n'))
				*tp = '\0';
			vlex(file);
a89 1
		fclose(f);
d180 1
a180 1
	if (cp = index(s, '=')) {
d193 1
a193 1
	} else if (cp = index(s, '?')) {
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: value.c,v 1.3 1994/12/08 09:31:17 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
