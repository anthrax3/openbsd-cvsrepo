head	1.43;
access;
symbols
	OPENBSD_5_7:1.42.0.16
	OPENBSD_5_7_BASE:1.42
	OPENBSD_5_6:1.42.0.20
	OPENBSD_5_6_BASE:1.42
	OPENBSD_5_5:1.42.0.18
	OPENBSD_5_5_BASE:1.42
	OPENBSD_5_4:1.42.0.14
	OPENBSD_5_4_BASE:1.42
	OPENBSD_5_3:1.42.0.12
	OPENBSD_5_3_BASE:1.42
	OPENBSD_5_2:1.42.0.10
	OPENBSD_5_2_BASE:1.42
	OPENBSD_5_1_BASE:1.42
	OPENBSD_5_1:1.42.0.8
	OPENBSD_5_0:1.42.0.6
	OPENBSD_5_0_BASE:1.42
	OPENBSD_4_9:1.42.0.4
	OPENBSD_4_9_BASE:1.42
	OPENBSD_4_8:1.42.0.2
	OPENBSD_4_8_BASE:1.42
	OPENBSD_4_7:1.32.0.2
	OPENBSD_4_7_BASE:1.32
	OPENBSD_4_6:1.27.0.12
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.8
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.6
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.4
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.26.0.4
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.2
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.21.0.6
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.4
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.2
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.19.0.2
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.18.0.2
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.4
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.43
date	2015.04.24.18.05.21;	author nicm;	state dead;
branches;
next	1.42;
commitid	rYO6EyDAuDX1Hb8y;

1.42
date	2010.07.02.07.32.16;	author nicm;	state Exp;
branches;
next	1.41;

1.41
date	2010.07.01.21.43.38;	author nicm;	state Exp;
branches;
next	1.40;

1.40
date	2010.07.01.21.28.01;	author nicm;	state Exp;
branches;
next	1.39;

1.39
date	2010.07.01.20.30.05;	author nicm;	state Exp;
branches;
next	1.38;

1.38
date	2010.07.01.20.24.19;	author chl;	state Exp;
branches;
next	1.37;

1.37
date	2010.06.29.23.38.05;	author nicm;	state Exp;
branches;
next	1.36;

1.36
date	2010.06.29.23.10.56;	author nicm;	state Exp;
branches;
next	1.35;

1.35
date	2010.06.29.21.34.50;	author nicm;	state Exp;
branches;
next	1.34;

1.34
date	2010.06.29.16.44.38;	author nicm;	state Exp;
branches;
next	1.33;

1.33
date	2010.06.29.16.41.56;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2010.02.07.20.16.47;	author nicm;	state Exp;
branches;
next	1.31;

1.31
date	2010.01.12.22.36.38;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2009.12.12.18.13.59;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2009.12.12.13.38.09;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2009.10.27.23.59.44;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.15.19.42.05;	author moritz;	state Exp;
branches;
next	1.26;

1.26
date	2006.06.06.23.24.52;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.17.19.39.46;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.17.14.43.06;	author moritz;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.16.21.13.12;	author moritz;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.16.19.32.46;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2005.03.11.22.16.16;	author otto;	state Exp;
branches;
next	1.20;

1.20
date	2004.11.07.09.48.08;	author otto;	state Exp;
branches;
next	1.19;

1.19
date	2004.05.26.18.17.58;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2004.02.20.20.34.32;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.20.18.15.32;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.12.06.07.16;	author mpech;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.07.06.56.50;	author hugh;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.24.18.38.58;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.26.06.07.28;	author pvalchev;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.09.17.58.41;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.12.05.17.23;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.09.07.04.55;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.20.06.19.33;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.09.01.23.24.23;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.08.22.22.42.07;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.04.02.01.47.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.10.15.23.47.20;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.40.41;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.12.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.43
log
@Remove tip(1), superseded by cu(1).

ok deraadt sthen bmercer
@
text
@/*	$OpenBSD: cmds.c,v 1.42 2010/07/02 07:32:16 nicm Exp $	*/
/*	$NetBSD: cmds.c,v 1.7 1997/02/11 09:24:03 mrg Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "tip.h"

#include <paths.h>
#include <util.h>
#include <vis.h>

/*
 * tip
 *
 * miscellaneous commands
 */

int	quant[] = { 60, 60, 24 };

char	null = '\0';
char	*sep[] = { "second", "minute", "hour" };
static char *argv[10];		/* argument vector for take and put */

static void	transfer(char *, int, char *);
static void	stopsnd(int);	/* SIGINT handler during file transfers */
static void	intcopy(int);	/* interrupt routine for file transfers */
static void	transmit(FILE *, char *, char *);
static void	send(int);
static void	execute(char *);
static int	args(char *, char **, int);
static void	prtime(char *, time_t);
static void	tandem(char *);
static void	hardwareflow(char *);
void		linedisc(char *);
static int	anyof(char *, char *);

/*
 * FTP - remote ==> local
 *  get a file from the remote host
 */
void
getfl(int c)
{
	char buf[256], *cp;

	putchar(c);
	/*
	 * get the UNIX receiving file's name
	 */
	if (prompt("Local file name? ", copyname, sizeof(copyname)))
		return;
	cp = expand(copyname);
	if ((sfd = creat(cp, 0666)) < 0) {
		printf("\r\n%s: cannot creat\r\n", copyname);
		return;
	}

	/*
	 * collect parameters
	 */
	if (prompt("List command for remote system? ", buf, sizeof(buf))) {
		unlink(copyname);
		return;
	}
	transfer(buf, sfd, vgetstr(EOFREAD));
}

/*
 * Cu-like take command
 */
void
cu_take(int c)
{
	int fd, argc;
	char line[BUFSIZ], *cp;

	if (prompt("[take] ", copyname, sizeof(copyname)))
		return;
	if ((argc = args(copyname, argv, sizeof(argv)/sizeof(argv[0]))) < 1 ||
	    argc > 2) {
		printf("usage: <take> from [to]\r\n");
		return;
	}
	if (argc == 1)
		argv[1] = argv[0];
	cp = expand(argv[1]);
	if ((fd = creat(cp, 0666)) < 0) {
		printf("\r\n%s: cannot create\r\n", argv[1]);
		return;
	}
	(void)snprintf(line, sizeof(line), "cat %s;echo ''|tr '\\012' '\\01'", argv[0]);
	transfer(line, fd, "\01");
}

static	jmp_buf intbuf;

/*
 * Bulk transfer routine --
 *  used by getfl(), cu_take(), and pipefile()
 */
static void
transfer(char *buf, int fd, char *eofchars)
{
	int ct, eof;
	char c, buffer[BUFSIZ];
	char *p = buffer;
	size_t cnt;
	time_t start;
	sig_t f;
	char r;

	if (vgetnum(FRAMESIZE) > BUFSIZ || vgetnum(FRAMESIZE) < 1) {
		printf("framesize must be >= 1 and <= %d\r\n", BUFSIZ);
		close(fd);
		return;
	}

	parwrite(FD, buf, size(buf));
	quit = 0;
	write(tipout_fd, "W", 1);
	read(tipout_fd, (char *)&ccc, 1);  /* Wait until read process stops */

	/*
	 * finish command
	 */
	r = '\r';
	parwrite(FD, &r, 1);
	do
		read(FD, &c, 1);
	while ((c&STRIP_PAR) != '\n');
	tcsetattr(0, TCSAFLUSH, &defchars);

	(void) setjmp(intbuf);
	f = signal(SIGINT, intcopy);
	start = time(0);
	for (ct = 0; !quit;) {
		eof = read(FD, &c, 1) <= 0;
		c &= STRIP_PAR;
		if (quit)
			continue;
		if (eof || any(c, eofchars))
			break;
		if (c == 0)
			continue;	/* ignore nulls */
		if (c == '\r')
			continue;
		*p++ = c;

		if (c == '\n' && vgetnum(VERBOSE))
			printf("\r%d", ++ct);
		if ((cnt = (p-buffer)) == vgetnum(FRAMESIZE)) {
			if (write(fd, buffer, cnt) != cnt) {
				printf("\r\nwrite error\r\n");
				quit = 1;
			}
			p = buffer;
		}
	}
	if ((cnt = (p-buffer)))
		if (write(fd, buffer, cnt) != cnt)
			printf("\r\nwrite error\r\n");

	if (vgetnum(VERBOSE))
		prtime(" lines transferred in ", time(0)-start);
	tcsetattr(0, TCSAFLUSH, &term);
	write(tipout_fd, (char *)&ccc, 1);
	signal(SIGINT, f);
	close(fd);
}

/*
 * FTP - remote ==> local process
 *   send remote input to local process via pipe
 */
/*ARGSUSED*/
void
pipefile(int c)
{
	int pdes[2];
	char buf[256];
	int status, p;
	pid_t cpid;

	if (prompt("Local command? ", buf, sizeof(buf)))
		return;

	if (pipe(pdes)) {
		printf("can't establish pipe\r\n");
		return;
	}

	if ((cpid = fork()) < 0) {
		printf("can't fork!\r\n");
		return;
	} else if (cpid) {
		if (prompt("List command for remote system? ", buf, sizeof(buf))) {
			close(pdes[0]), close(pdes[1]);
			kill (cpid, SIGKILL);
		} else {
			close(pdes[0]);
			signal(SIGPIPE, intcopy);
			transfer(buf, pdes[1], vgetstr(EOFREAD));
			signal(SIGPIPE, SIG_DFL);
			while ((p = wait(&status)) > 0 && p != cpid)
				;
		}
	} else {
		int f;

		dup2(pdes[0], 0);
		close(pdes[0]);
		for (f = 3; f < 20; f++)
			close(f);
		execute(buf);
		printf("can't execl!\r\n");
		exit(0);
	}
}

/*
 * Interrupt service routine for FTP
 */
/*ARGSUSED*/
static void
stopsnd(int signo)
{
	stop = 1;
	signal(SIGINT, SIG_IGN);
}

/*
 * FTP - local ==> remote
 *  send local file to remote host
 *  terminate transmission with pseudo EOF sequence
 */
void
sendfile(int c)
{
	FILE *fp;
	char *fnamex;

	putchar(c);
	/*
	 * get file name
	 */
	if (prompt("Local file name? ", fname, sizeof(fname)))
		return;

	/*
	 * look up file
	 */
	fnamex = expand(fname);
	if ((fp = fopen(fnamex, "r")) == NULL) {
		printf("%s: cannot open\r\n", fname);
		return;
	}
	transmit(fp, vgetstr(EOFWRITE), NULL);
	if (!vgetnum(ECHOCHECK))
		tcdrain(FD);
}

/*
 * Bulk transfer routine to remote host --
 *   used by sendfile() and cu_put()
 */
static void
transmit(FILE *fp, char *eofchars, char *command)
{
	char *pc, lastc;
	int c, ccount, lcount;
	time_t start_t, stop_t;
	sig_t f;

	write(tipout_fd, "W", 1);	/* put TIPOUT into a wait state */
	stop = 0;
	f = signal(SIGINT, stopsnd);
	tcsetattr(0, TCSAFLUSH, &defchars);
	read(tipout_fd, (char *)&ccc, 1);
	if (command != NULL) {
		for (pc = command; *pc; pc++)
			send(*pc);
		if (vgetnum(ECHOCHECK))
			read(FD, (char *)&c, 1);	/* trailing \n */
		else {
			tcdrain(FD);
			sleep(5); /* wait for remote stty to take effect */
		}
	}
	lcount = 0;
	lastc = '\0';
	start_t = time(0);
	while (1) {
		ccount = 0;
		do {
			c = getc(fp);
			if (stop)
				goto out;
			if (c == EOF)
				goto out;
			if (c == 0177 && !vgetnum(RAWFTP))
				continue;
			lastc = c;
			if (c < 040) {
				if (c == '\n') {
					if (!vgetnum(RAWFTP))
						c = '\r';
				} else if (c == '\t') {
					if (!vgetnum(RAWFTP)) {
						if (vgetnum(TABEXPAND)) {
							send(' ');
							while ((++ccount % 8) != 0)
								send(' ');
							continue;
						}
					}
				} else
					if (!vgetnum(RAWFTP))
						continue;
			}
			send(c);
		} while (c != '\r' && !vgetnum(RAWFTP));
		if (vgetnum(VERBOSE))
			printf("\r%d", ++lcount);
		if (vgetnum(ECHOCHECK)) {
			timedout = 0;
			alarm((unsigned int)vgetnum(ETIMEOUT));
			do {	/* wait for prompt */
				read(FD, (char *)&c, 1);
				if (timedout || stop) {
					if (timedout)
						printf("\r\ntimed out at eol\r\n");
					alarm(0);
					goto out;
				}
			} while ((c&STRIP_PAR) != vgetnum(PROMPT));
			alarm(0);
		}
	}
out:
	if (lastc != '\n' && !vgetnum(RAWFTP))
		send('\r');
	if (eofchars) {
		for (pc = eofchars; *pc; pc++)
			send(*pc);
	}
	stop_t = time(0);
	fclose(fp);
	signal(SIGINT, f);
	if (vgetnum(VERBOSE)) {
		if (vgetnum(RAWFTP))
			prtime(" chars transferred in ", stop_t-start_t);
		else
			prtime(" lines transferred in ", stop_t-start_t);
	}
	write(tipout_fd, (char *)&ccc, 1);
	tcsetattr(0, TCSAFLUSH, &term);
}

/*
 * Cu-like put command
 */
/*ARGSUSED*/
void
cu_put(int c)
{
	FILE *fp;
	char line[BUFSIZ];
	int argc;
	char *copynamex;

	if (prompt("[put] ", copyname, sizeof(copyname)))
		return;
	if ((argc = args(copyname, argv, sizeof(argv)/sizeof(argv[0]))) < 1 ||
	    argc > 2) {
		printf("usage: <put> from [to]\r\n");
		return;
	}
	if (argc == 1)
		argv[1] = argv[0];
	copynamex = expand(argv[0]);
	if ((fp = fopen(copynamex, "r")) == NULL) {
		printf("%s: cannot open\r\n", copynamex);
		return;
	}
	if (vgetnum(ECHOCHECK))
		(void)snprintf(line, sizeof(line), "cat>%s\r", argv[1]);
	else
		(void)snprintf(line, sizeof(line),
		    "stty -echo;cat>%s;stty echo\r", argv[1]);
	transmit(fp, "\04", line);
}

/*
 * FTP - send single character
 *  wait for echo & handle timeout
 */
static void
send(int c)
{
	char cc;
	int retry = 0;

	cc = c;
	parwrite(FD, &cc, 1);
	if (vgetnum(CDELAY) > 0 && c != '\r')
		usleep(vgetnum(CDELAY));
	if (!vgetnum(ECHOCHECK)) {
		if (vgetnum(LDELAY) > 0 && c == '\r')
			usleep(vgetnum(LDELAY));
		return;
	}
tryagain:
	timedout = 0;
	alarm((unsigned int)vgetnum(ETIMEOUT));
	read(FD, &cc, 1);
	alarm(0);
	if (timedout) {
		printf("\r\ntimeout error (%s)\r\n", ctrl(c));
		if (retry++ > 3)
			return;
		parwrite(FD, &null, 1); /* poke it */
		goto tryagain;
	}
}

/*ARGSUSED*/
void
timeout(int signo)
{
	int saved_errno = errno;

	signal(SIGALRM, timeout);
	timedout = 1;

	errno = saved_errno;
}

/*
 * Stolen from consh() -- puts a remote file on the output of a local command.
 *	Identical to consh() except for where stdout goes.
 */
void
pipeout(int c)
{
	char buf[256];
	int status, p;
	pid_t cpid;
	time_t start = time(NULL);

	putchar(c);
	if (prompt("Local command? ", buf, sizeof(buf)))
		return;
	write(tipout_fd, "W", 1);	/* put TIPOUT into a wait state */
	signal(SIGINT, SIG_IGN);
	signal(SIGQUIT, SIG_IGN);
	tcsetattr(0, TCSAFLUSH, &defchars);
	read(tipout_fd, (char *)&ccc, 1);
	/*
	 * Set up file descriptors in the child and
	 *  let it go...
	 */
	if ((cpid = fork()) < 0)
		printf("can't fork!\r\n");
	else if (cpid) {
		start = time(NULL);
		while ((p = wait(&status)) > 0 && p != cpid)
			;
	} else {
		int i;

		dup2(FD, 1);
		for (i = 3; i < 20; i++)
			close(i);
		signal(SIGINT, SIG_DFL);
		signal(SIGQUIT, SIG_DFL);
		execute(buf);
		printf("can't find `%s'\r\n", buf);
		exit(0);
	}
	if (vgetnum(VERBOSE))
		prtime("away for ", time(0)-start);
	write(tipout_fd, (char *)&ccc, 1);
	tcsetattr(0, TCSAFLUSH, &term);
	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_DFL);
}

/*
 * Fork a program with:
 *  0 <-> remote tty in
 *  1 <-> remote tty out
 *  2 <-> local tty stderr
 */
void
consh(int c)
{
	char buf[256];
	int status, p;
	pid_t cpid;
	time_t start = time(NULL);

	putchar(c);
	if (prompt("Local command? ", buf, sizeof(buf)))
		return;
	write(tipout_fd, "W", 1);	/* put TIPOUT into a wait state */
	signal(SIGINT, SIG_IGN);
	signal(SIGQUIT, SIG_IGN);
	tcsetattr(0, TCSAFLUSH, &defchars);
	read(tipout_fd, (char *)&ccc, 1);
	/*
	 * Set up file descriptors in the child and
	 *  let it go...
	 */
	if ((cpid = fork()) < 0)
		printf("can't fork!\r\n");
	else if (cpid) {
		start = time(0);
		while ((p = wait(&status)) > 0 && p != cpid)
			;
	} else {
		dup2(FD, 0);
		dup2(3, 1);
		closefrom(3);
		signal(SIGINT, SIG_DFL);
		signal(SIGQUIT, SIG_DFL);
		execute(buf);
		printf("can't find `%s'\r\n", buf);
		exit(0);
	}
	if (vgetnum(VERBOSE))
		prtime("away for ", time(0)-start);
	write(tipout_fd, (char *)&ccc, 1);
	tcsetattr(0, TCSAFLUSH, &term);
	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_DFL);
}

/*
 * Escape to local shell
 */
/*ARGSUSED*/
void
shell(int c)
{
	int status;
	char *cp;
	pid_t shpid;

	printf("[sh]\r\n");
	signal(SIGINT, SIG_IGN);
	signal(SIGQUIT, SIG_IGN);
	unraw();
	if ((shpid = fork())) {
		while (shpid != wait(&status));
		raw();
		printf("\r\n!\r\n");
		signal(SIGINT, SIG_DFL);
		signal(SIGQUIT, SIG_DFL);
		return;
	} else {
		signal(SIGQUIT, SIG_DFL);
		signal(SIGINT, SIG_DFL);
		if ((cp = strrchr(vgetstr(SHELL), '/')) == NULL)
			cp = vgetstr(SHELL);
		else
			cp++;
		execl(vgetstr(SHELL), cp, (char *)NULL);
		printf("\r\ncan't execl!\r\n");
		exit(1);
	}
}

/*
 * TIPIN portion of scripting
 *   initiate the conversation with TIPOUT
 */
void
setscript(void)
{
	char c;

	/*
	 * enable TIPOUT side for dialogue
	 */
	write(tipout_fd, "S", 1);
	if (vgetnum(SCRIPT))
		write(tipout_fd, vgetstr(RECORD), size(vgetstr(RECORD)));
	write(tipout_fd, "\n", 1);
	/*
	 * wait for TIPOUT to finish
	 */
	read(tipout_fd, &c, 1);
	if (c == 'n')
		printf("can't create %s\r\n", vgetstr(RECORD));
}

/*
 * Change current working directory of
 *   local portion of tip
 */
/*ARGSUSED*/
void
chdirectory(int c)
{
	char dirname[PATH_MAX];
	char *cp = dirname;

	if (prompt("[cd] ", dirname, sizeof(dirname))) {
		if (stoprompt)
			return;
		cp = vgetstr(HOME);
	}
	if (chdir(cp) < 0)
		printf("%s: bad directory\r\n", cp);
	printf("!\r\n");
}

void
tipabort(char *msg)
{
	signal(SIGTERM, SIG_IGN);
	kill(tipout_pid, SIGTERM);
	logent(vgetstr(HOST), vgetstr(DEVICE), "call terminated");
	if (msg != NULL)
		printf("\r\n%s", msg);
	printf("\r\n[EOT]\r\n");
	(void)uu_unlock(uucplock);
	unraw();
	exit(0);
}

/*ARGSUSED*/
void
finish(int c)
{
	char *dismsg;

	if ((dismsg = vgetstr(DISCONNECT)) != NULL) {
		write(FD, dismsg, strlen(dismsg));
		sleep(5);
	}
	tipabort(NULL);
}

/*ARGSUSED*/
static void
intcopy(int signo)
{
	raw();
	quit = 1;
	longjmp(intbuf, 1);
}

static void
execute(char *s)
{
	char *cp;

	if ((cp = strrchr(vgetstr(SHELL), '/')) == NULL)
		cp = vgetstr(SHELL);
	else
		cp++;
	execl(vgetstr(SHELL), cp, "-c", s, (char *)NULL);
}

static int
args(char *buf, char *a[], int num)
{
	char *p = buf, *start;
	char **parg = a;
	int n = 0;

	do {
		while (*p && (*p == ' ' || *p == '\t'))
			p++;
		start = p;
		if (*p)
			*parg = p;
		while (*p && (*p != ' ' && *p != '\t'))
			p++;
		if (p != start)
			parg++, n++;
		if (*p)
			*p++ = '\0';
	} while (*p && n < num);

	return(n);
}

static void
prtime(char *s, time_t a)
{
	int i;
	int nums[3];

	for (i = 0; i < 3; i++) {
		nums[i] = (int)(a % quant[i]);
		a /= quant[i];
	}
	printf("%s", s);
	while (--i >= 0)
		if (nums[i] || (i == 0 && nums[1] == 0 && nums[2] == 0))
			printf("%d %s%c ", nums[i], sep[i],
				nums[i] == 1 ? '\0' : 's');
	printf("\r\n!\r\n");
}

/*ARGSUSED*/
void
variable(int c)
{
	char	buf[256];

	if (prompt("[set] ", buf, sizeof(buf)))
		return;
	vlex(buf);
	if (vtable[BEAUTIFY].v_flags & V_CHANGED) {
		vtable[BEAUTIFY].v_flags &= ~V_CHANGED;
		write(tipout_fd, "B", 1);
	}
	if (vtable[SCRIPT].v_flags & V_CHANGED) {
		vtable[SCRIPT].v_flags &= ~V_CHANGED;
		setscript();
		/*
		 * So that "set record=blah script" doesn't
		 *  cause two transactions to occur.
		 */
		if (vtable[RECORD].v_flags & V_CHANGED)
			vtable[RECORD].v_flags &= ~V_CHANGED;
	}
	if (vtable[RECORD].v_flags & V_CHANGED) {
		vtable[RECORD].v_flags &= ~V_CHANGED;
		if (vgetnum(SCRIPT))
			setscript();
	}
	if (vtable[TAND].v_flags & V_CHANGED) {
		vtable[TAND].v_flags &= ~V_CHANGED;
		if (vgetnum(TAND))
			tandem("on");
		else
			tandem("off");
	}
	if (vtable[LECHO].v_flags & V_CHANGED) {
		vtable[LECHO].v_flags &= ~V_CHANGED;
		vsetnum(HALFDUPLEX, vgetnum(LECHO));
	}
	if (vtable[PARITY].v_flags & V_CHANGED) {
		vtable[PARITY].v_flags &= ~V_CHANGED;
		setparity(NULL);
	}
	if (vtable[HARDWAREFLOW].v_flags & V_CHANGED) {
		vtable[HARDWAREFLOW].v_flags &= ~V_CHANGED;
		if (vgetnum(HARDWAREFLOW))
			hardwareflow("on");
		else
			hardwareflow("off");
	}
	if (vtable[LINEDISC].v_flags & V_CHANGED) {
		vtable[LINEDISC].v_flags &= ~V_CHANGED;
		linedisc(NULL);
	}
}

/*ARGSUSED*/
void
listvariables(int c)
{
	value_t *p;
	char buf[BUFSIZ];

	puts("v\r");
	for (p = vtable; p->v_name; p++) {
		fputs(p->v_name, stdout);
		switch (p->v_flags & V_TYPEMASK) {
		case V_STRING:
			if (p->v_string) {
				strnvis(buf, p->v_string, sizeof(buf),
				    VIS_WHITE|VIS_OCTAL);
				printf(" %s", buf);
			}
			putchar('\r');
			putchar('\n');
			break;
		case V_NUMBER:
			printf(" %d\r\n", p->v_number);
			break;
		case V_BOOL:
			printf(" %s\r\n", p->v_number ? "true" : "false");
			break;
		case V_CHAR:
			vis(buf, p->v_number, VIS_WHITE|VIS_OCTAL, 0);
			printf(" %s\r\n", buf);
			break;
		}
	}
}

/*
 * Turn tandem mode on or off for remote tty.
 */
static void
tandem(char *option)
{
	struct termios	rmtty;

	tcgetattr(FD, &rmtty);
	if (strcmp(option, "on") == 0) {
		rmtty.c_iflag |= IXOFF;
		term.c_iflag |= IXOFF;
	} else {
		rmtty.c_iflag &= ~IXOFF;
		term.c_iflag &= ~IXOFF;
	}
	tcsetattr(FD, TCSADRAIN, &rmtty);
	tcsetattr(0, TCSADRAIN, &term);
}

/*
 * Turn hardware flow control on or off for remote tty.
 */
static void
hardwareflow(char *option)
{
	struct termios	rmtty;

	tcgetattr(FD, &rmtty);
	if (strcmp(option, "on") == 0)
		rmtty.c_iflag |= CRTSCTS;
	else
		rmtty.c_iflag &= ~CRTSCTS;
	tcsetattr(FD, TCSADRAIN, &rmtty);
}

/*
 * Change line discipline to the specified one.
 */
void
linedisc(char *option)
{
	int ld = (int)vgetnum(LINEDISC);

	ioctl(FD, TIOCSETD, &ld);
}

/*
 * Send a break.
 */
/*ARGSUSED*/
void
genbrk(int c)
{
	ioctl(FD, TIOCSBRK, NULL);
	sleep(1);
	ioctl(FD, TIOCCBRK, NULL);
}

/*
 * Suspend tip
 */
void
suspend(int c)
{
	unraw();
	kill(c == CTRL('y') ? getpid() : 0, SIGTSTP);
	raw();
}

/*
 *	expand a file name if it includes shell meta characters
 */
char *
expand(char name[])
{
	static char xname[BUFSIZ];
	char cmdbuf[BUFSIZ];
	int l;
	char *cp, *Shell;
	int s, pivec[2];
	pid_t pid;

	if (!anyof(name, "~{[*?$`'\"\\"))
		return(name);
	/* sigint = signal(SIGINT, SIG_IGN); */
	if (pipe(pivec) < 0) {
		perror("pipe");
		/* signal(SIGINT, sigint) */
		return(name);
	}
	(void)snprintf(cmdbuf, sizeof(cmdbuf), "echo %s", name);
	if ((pid = vfork()) == 0) {
		Shell = vgetstr(SHELL);
		if (Shell == NULL)
			Shell = _PATH_BSHELL;
		close(pivec[0]);
		close(1);
		dup(pivec[1]);
		close(pivec[1]);
		close(2);
		execl(Shell, Shell, "-c", cmdbuf, (char *)NULL);
		_exit(1);
	}
	if (pid == -1) {
		perror("fork");
		close(pivec[0]);
		close(pivec[1]);
		return(NULL);
	}
	close(pivec[1]);
	l = read(pivec[0], xname, BUFSIZ);
	close(pivec[0]);
	while (wait(&s) != pid);
		;
	s &= 0377;
	if (s != 0 && s != SIGPIPE) {
		fprintf(stderr, "\"Echo\" failed\n");
		return(NULL);
	}
	if (l < 0) {
		perror("read");
		return(NULL);
	}
	if (l == 0) {
		fprintf(stderr, "\"%s\": No match\n", name);
		return(NULL);
	}
	if (l == BUFSIZ) {
		fprintf(stderr, "Buffer overflow expanding \"%s\"\n", name);
		return(NULL);
	}
	xname[l] = 0;
	for (cp = &xname[l-1]; *cp == '\n' && cp > xname; cp--)
		;
	*++cp = '\0';
	return(xname);
}

/*
 * Are any of the characters in the two strings the same?
 */
static int
anyof(char *s1, char *s2)
{
	int c;

	while ((c = *s1++))
		if (any(c, s2))
			return(1);
	return(0);
}
@


1.42
log
@Merge almost-empty pathnames.h into tip.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.41 2010/07/01 21:43:38 nicm Exp $	*/
@


1.41
log
@Split v_value into v_string/v_number, change macros to functions and lo let
there be type checking.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.40 2010/07/01 21:28:01 nicm Exp $	*/
a33 1
#include "pathnames.h"
d35 1
@


1.40
log
@Change variable get/set macros to have better names and drop boolean/character
ones.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.39 2010/07/01 20:30:05 nicm Exp $	*/
d803 2
a804 2
			if (p->v_value) {
				strnvis(buf, p->v_value, sizeof(buf),
d812 1
a812 1
			printf(" %ld\r\n", (long)p->v_value);
d815 1
a815 1
			printf(" %s\r\n", p->v_value ? "true" : "false");
d818 1
a818 1
			vis(buf, (int)(long)p->v_value, VIS_WHITE|VIS_OCTAL, 0);
@


1.39
log
@Kill a couple of macros, move a few bits around in header.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.38 2010/07/01 20:24:19 chl Exp $	*/
d92 1
a92 1
	transfer(buf, sfd, value(EOFREAD));
d139 1
a139 1
	if (number(value(FRAMESIZE)) > BUFSIZ || number(value(FRAMESIZE)) < 1) {
d176 1
a176 1
		if (c == '\n' && boolean(value(VERBOSE)))
d178 1
a178 1
		if ((cnt = (p-buffer)) == number(value(FRAMESIZE))) {
d190 1
a190 1
	if (boolean(value(VERBOSE)))
d229 1
a229 1
			transfer(buf, pdes[1], value(EOFREAD));
d284 2
a285 2
	transmit(fp, value(EOFWRITE), NULL);
	if (!boolean(value(ECHOCHECK)))
d309 1
a309 1
		if (boolean(value(ECHOCHECK)))
d327 1
a327 1
			if (c == 0177 && !boolean(value(RAWFTP)))
d332 1
a332 1
					if (!boolean(value(RAWFTP)))
d335 2
a336 2
					if (!boolean(value(RAWFTP))) {
						if (boolean(value(TABEXPAND))) {
d344 1
a344 1
					if (!boolean(value(RAWFTP)))
d348 2
a349 2
		} while (c != '\r' && !boolean(value(RAWFTP)));
		if (boolean(value(VERBOSE)))
d351 1
a351 1
		if (boolean(value(ECHOCHECK))) {
d353 1
a353 1
			alarm((unsigned int)number(value(ETIMEOUT)));
d362 1
a362 1
			} while ((c&STRIP_PAR) != character(value(PROMPT)));
d367 1
a367 1
	if (lastc != '\n' && !boolean(value(RAWFTP)))
d376 2
a377 2
	if (boolean(value(VERBOSE))) {
		if (boolean(value(RAWFTP)))
d412 1
a412 1
	if (boolean(value(ECHOCHECK)))
d432 5
a436 5
	if (number(value(CDELAY)) > 0 && c != '\r')
		usleep(number(value(CDELAY)));
	if (!boolean(value(ECHOCHECK))) {
		if (number(value(LDELAY)) > 0 && c == '\r')
			usleep(number(value(LDELAY)));
d441 1
a441 1
	alarm((unsigned int)number(value(ETIMEOUT)));
d507 1
a507 1
	if (boolean(value(VERBOSE)))
d557 1
a557 1
	if (boolean(value(VERBOSE)))
d590 2
a591 2
		if ((cp = strrchr(value(SHELL), '/')) == NULL)
			cp = value(SHELL);
d594 1
a594 1
		execl(value(SHELL), cp, (char *)NULL);
d613 2
a614 2
	if (boolean(value(SCRIPT)))
		write(tipout_fd, value(RECORD), size(value(RECORD)));
d621 1
a621 1
		printf("can't create %s\r\n", value(RECORD));
d638 1
a638 1
		cp = value(HOME);
d650 1
a650 1
	logent(value(HOST), value(DEVICE), "call terminated");
d665 1
a665 1
	if ((dismsg = value(DISCONNECT)) != NULL) {
d686 2
a687 2
	if ((cp = strrchr(value(SHELL), '/')) == NULL)
		cp = value(SHELL);
d690 1
a690 1
	execl(value(SHELL), cp, "-c", s, (char *)NULL);
d760 1
a760 1
		if (boolean(value(SCRIPT)))
d765 1
a765 1
		if (boolean(value(TAND)))
d772 1
a772 1
		setboolean(value(HALFDUPLEX), boolean(value(LECHO)));
d780 1
a780 1
		if (boolean(value(HARDWAREFLOW)))
d812 1
a812 1
			printf(" %ld\r\n", number(p->v_value));
d815 1
a815 2
			printf(" %s\r\n",
			    !boolean(p->v_value) ? "false" : "true");
d818 1
a818 1
			vis(buf, character(p->v_value), VIS_WHITE|VIS_OCTAL, 0);
d867 1
a867 1
	int ld = (int)value(LINEDISC);
d918 1
a918 1
		Shell = value(SHELL);
@


1.38
log
@remove unused variables
add missing headers needed for uu_unlock()

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.37 2010/06/29 23:38:05 nicm Exp $	*/
d353 1
a353 1
			alarm((unsigned int)lvalue(ETIMEOUT));
d441 1
a441 1
	alarm((unsigned int)lvalue(ETIMEOUT));
@


1.37
log
@Add new read-only vtable entries for device and connection string and use those
instead of variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.36 2010/06/29 23:10:56 nicm Exp $	*/
d36 1
@


1.36
log
@For every variable which has a value table entry with IREMOTE, remove the
remote variable and always use the value from the vtable. This then allows the
IREMOTE flag to be removed.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.35 2010/06/29 21:34:50 nicm Exp $	*/
a646 1

d649 1
a649 1
	logent(value(HOST), DV, "call terminated");
@


1.35
log
@Merge v_type and v_access into one v_flags member in value_t, get rid of TRUE
and FALSE, and rename the other flags to have a V_ prefix.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.34 2010/06/29 16:44:38 nicm Exp $	*/
d772 1
a772 1
		HD = boolean(value(LECHO));
@


1.34
log
@Nuke -DCONNECT and -DACULOG which we always set, also trim huge useless comment
from Makefile.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.33 2010/06/29 16:41:56 nicm Exp $	*/
d744 2
a745 2
	if (vtable[BEAUTIFY].v_access&CHANGED) {
		vtable[BEAUTIFY].v_access &= ~CHANGED;
d748 2
a749 2
	if (vtable[SCRIPT].v_access&CHANGED) {
		vtable[SCRIPT].v_access &= ~CHANGED;
d755 2
a756 2
		if (vtable[RECORD].v_access&CHANGED)
			vtable[RECORD].v_access &= ~CHANGED;
d758 2
a759 2
	if (vtable[RECORD].v_access&CHANGED) {
		vtable[RECORD].v_access &= ~CHANGED;
d763 2
a764 2
	if (vtable[TAND].v_access&CHANGED) {
		vtable[TAND].v_access &= ~CHANGED;
d770 2
a771 2
	if (vtable[LECHO].v_access&CHANGED) {
		vtable[LECHO].v_access &= ~CHANGED;
d774 2
a775 2
	if (vtable[PARITY].v_access&CHANGED) {
		vtable[PARITY].v_access &= ~CHANGED;
d778 2
a779 2
	if (vtable[HARDWAREFLOW].v_access&CHANGED) {
		vtable[HARDWAREFLOW].v_access &= ~CHANGED;
d785 2
a786 2
	if (vtable[LINEDISC].v_access&CHANGED) {
		vtable[LINEDISC].v_access &= ~CHANGED;
d801 2
a802 2
		switch (p->v_type&TMASK) {
		case STRING:
d811 1
a811 1
		case NUMBER:
d814 1
a814 1
		case BOOL:
d818 1
a818 1
		case CHAR:
@


1.33
log
@Bye-bye acu which even UUCP-using naddy agrees "was obsolete 20 years ago" :-).
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.32 2010/02/07 20:16:47 nicm Exp $	*/
a513 1
#ifdef CONNECT
a562 1
#endif
@


1.32
log
@Change tipout to use poll(2) instead of the ghastly setup with signals/longjmp.

Tested/briefly read by mk@@, blambert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.31 2010/01/12 22:36:38 deraadt Exp $	*/
d652 1
a652 1
	disconnect(msg);
@


1.31
log
@save errno wrapping in a signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.30 2009/12/12 18:13:59 nicm Exp $	*/
d146 1
a146 1
	kill(tipout_pid, SIGIOT);
d300 1
a300 1
	kill(tipout_pid, SIGIOT);	/* put TIPOUT into a wait state */
d479 1
a479 1
	kill(tipout_pid, SIGIOT);	/* put TIPOUT into a wait state */
d532 1
a532 1
	kill(tipout_pid, SIGIOT);	/* put TIPOUT into a wait state */
d613 1
a613 1
	kill(tipout_pid, SIGEMT);
d748 1
a748 1
		kill(tipout_pid, SIGSYS);
@


1.30
log
@tip is not setuid or setgid anymore and there are no PRIV/EXPR commands, so
remove the code.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.29 2009/12/12 13:38:09 nicm Exp $	*/
d456 2
d460 2
@


1.29
log
@Use a socketpair instead of a pair of pipes.

looks ok to millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.28 2009/10/27 23:59:44 deraadt Exp $	*/
a590 1
		shell_uid();
a651 1
	daemon_uid();
a687 1
	shell_uid();
a924 1
		shell_uid();
@


1.28
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.27 2007/05/15 19:42:05 moritz Exp $	*/
d147 1
a147 1
	read(repdes[0], (char *)&ccc, 1);  /* Wait until read process stops */
d192 1
a192 1
	write(fildes[1], (char *)&ccc, 1);
d304 1
a304 1
	read(repdes[0], (char *)&ccc, 1);
d381 1
a381 1
	write(fildes[1], (char *)&ccc, 1);
d479 1
a479 1
	read(repdes[0], (char *)&ccc, 1);
d504 1
a504 1
	write(fildes[1], (char *)&ccc, 1);
d532 1
a532 1
	read(repdes[0], (char *)&ccc, 1);
d555 1
a555 1
	write(fildes[1], (char *)&ccc, 1);
d612 2
a613 2
		write(fildes[1], value(RECORD), size(value(RECORD)));
	write(fildes[1], "\n", 1);
d617 1
a617 1
	read(repdes[0], &c, 1);
@


1.27
log
@Remove useless NOxxx defines and use NULL instead.
No binary change.

OK ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.26 2006/06/06 23:24:52 deraadt Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)cmds.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.26 2006/06/06 23:24:52 deraadt Exp $";
#endif /* not lint */
@


1.26
log
@teach tip about line disciplines; tried by mbalmer too
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.25 2006/03/17 19:39:46 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.25 2006/03/17 19:39:46 deraadt Exp $";
d657 1
a657 1
	if (msg != NOSTR)
d672 1
a672 1
	if ((dismsg = value(DISCONNECT)) != NOSTR) {
d676 1
a676 1
	tipabort(NOSTR);
d784 1
a784 1
		setparity(NOSTR);
d795 1
a795 1
		linedisc(NOSTR);
d928 1
a928 1
		if (Shell == NOSTR)
d943 1
a943 1
		return(NOSTR);
d953 1
a953 1
		return(NOSTR);
d957 1
a957 1
		return(NOSTR);
d961 1
a961 1
		return(NOSTR);
d965 1
a965 1
		return(NOSTR);
@


1.25
log
@more cleanups; ok moritz
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.24 2006/03/17 14:43:06 moritz Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.24 2006/03/17 14:43:06 moritz Exp $";
d67 1
d793 4
d868 11
@


1.24
log
@big prototype cleanup:

o make more functions static
o add all the prototypes to tip.h
o consistently declare functions in the cmd table

testing and ok dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.23 2006/03/16 21:13:12 moritz Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.23 2006/03/16 21:13:12 moritz Exp $";
d136 1
a136 1
	int ct;
d139 1
a139 1
	int cnt, eof;
d358 1
a358 1
			alarm((unsigned int)value(ETIMEOUT));
d446 1
a446 1
	alarm((long)value(ETIMEOUT));
d458 1
a549 2
		int i;

d612 1
d678 1
@


1.23
log
@Fix bug that was uncovered by adding correct prototypes and
remove lots of names from func declarations. ok dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.22 2006/03/16 19:32:46 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.22 2006/03/16 19:32:46 deraadt Exp $";
d57 11
a67 3
void	timeout(int);		/* timeout function called on alarm */
void	stopsnd(int);		/* SIGINT handler during file transfers */
void	intcopy(int);		/* interrupt routine for file transfers */
d74 1
a74 1
getfl(char c)
d76 1
a76 1
	char buf[256], *cp, *expand(char *);
d104 1
a104 1
cu_take(char cc)
d107 1
a107 1
	char line[BUFSIZ], *expand(char *), *cp;
d133 1
a133 1
void
d207 1
d209 1
a209 1
pipefile(void)
d256 1
a256 1
void
a258 1

d269 1
a269 1
sendfile(char cc)
a272 1
	char *expand(char *);
d274 1
a274 1
	putchar(cc);
d298 1
a298 1
void
d394 1
d396 1
a396 1
cu_put(char cc)
a400 1
	char *expand(char *);
d429 1
a429 1
void
d572 1
d574 1
a574 1
shell(void)
d632 1
d634 1
a634 1
chdirectory(void)
d665 1
d667 1
a667 1
finish(void)
d678 1
a678 1
void
d686 1
a686 1
void
d699 1
a699 1
int
d723 1
a723 1
void
d741 1
d743 1
a743 1
variable(void)
d793 1
d795 1
a795 1
listvariables(void)
d831 1
a831 1
void
d851 1
a851 1
void
d867 1
d869 1
a869 1
genbrk(void)
a870 1

d880 1
a880 1
suspend(char c)
a881 1

a889 1

d960 1
a960 1
int
@


1.22
log
@first pass of cleanup of this mess; ok dhill
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.21 2005/03/11 22:16:16 otto Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.21 2005/03/11 22:16:16 otto Exp $";
d57 3
a59 3
void	timeout();		/* timeout function called on alarm */
void	stopsnd();		/* SIGINT handler during file transfers */
void	intcopy();		/* interrupt routine for file transfers */
@


1.21
log
@PR 4135: detect illegal frame sizes; fix file transfer when using
emecs editing mode on the remote end; print [EOT] on ~. again, by
making tip_abort able to finish. Largely from Hugo Villeneuve
<harpagon at jwales dot EINTR dotnet> ok deraadt@@ "looks good" miod@@
Man page tweaks by jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.20 2004/11/07 09:48:08 otto Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.20 2004/11/07 09:48:08 otto Exp $";
d68 2
a69 2
	char buf[256], *cp, *expand();
	
d81 1
a81 1
	
d99 1
a99 1
	char line[BUFSIZ], *expand(), *cp;
d126 1
a126 3
transfer(buf, fd, eofchars)
	char *buf, *eofchars;
	int fd;
d146 1
a146 1
	
d153 1
a153 1
		read(FD, &c, 1); 
d156 1
a156 1
	
d200 1
a200 1
pipefile()
d246 1
d248 1
a248 1
stopsnd()
d261 1
a261 2
sendfile(cc)
	char cc;
d263 1
a263 1
	FILE *fd;
d265 1
a265 1
	char *expand();
d278 1
a278 1
	if ((fd = fopen(fnamex, "r")) == NULL) {
d282 1
a282 1
	transmit(fd, value(EOFWRITE), NULL);
d292 1
a292 3
transmit(fd, eofchars, command)
	FILE *fd;
	char *eofchars, *command;
d320 1
a320 1
			c = getc(fd);
d332 1
a332 2
				}
				else if (c == '\t') {
d351 1
a351 1
			alarm((long)value(ETIMEOUT));
d372 1
a372 1
	fclose(fd);
d388 1
a388 2
cu_put(cc)
	char cc;
d390 1
a390 1
	FILE *fd;
d393 1
a393 1
	char *expand();
d406 1
a406 1
	if ((fd = fopen(copynamex, "r")) == NULL) {
d415 1
a415 1
	transmit(fd, "\04", line);
d452 1
a452 1
timeout()
d463 1
a463 1
pipeout(c)
d602 1
a602 1
setscript()
d625 1
a625 1
chdirectory()
d641 1
a641 2
tipabort(msg)
	char *msg;
d657 1
a657 1
finish()
d669 1
a669 1
intcopy()
d677 1
a677 2
execute(s)
	char *s;
d690 1
a690 3
args(buf, a, num)
	char *buf, *a[];
	int num;
d714 1
a714 3
prtime(s, a)
	char *s;
	time_t a;
d732 1
a732 1
variable()
d765 4
a768 4
 	if (vtable[LECHO].v_access&CHANGED) {
 		vtable[LECHO].v_access &= ~CHANGED;
 		HD = boolean(value(LECHO));
 	}
d783 1
a783 1
listvariables()
d813 1
a813 1
        }
d820 1
a820 2
tandem(option)
	char *option;
d840 1
a840 2
hardwareflow(option)
	char *option;
d856 1
a856 1
genbrk()
d868 1
a868 2
suspend(c)
	char c;
d881 1
a881 2
expand(name)
	char name[];
d951 1
a951 2
anyof(s1, s2)
	char *s1, *s2;
@


1.20
log
@Do not ignore SIGCHLD, repairing hangs after a subshell is executed
via ~! or ~C. While there, fix description of fd's available to the
command executed by ~C in man page and comments. This has been wrong
since at least 4.4BSD... Spotted by Hugo Villeneuve. PR 3971.  ok
and help millert@@; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.19 2004/05/26 18:17:58 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.19 2004/05/26 18:17:58 deraadt Exp $";
d115 1
a115 1
	(void)snprintf(line, sizeof(line), "cat %s;echo \01", argv[0]);
d138 6
d651 1
@


1.19
log
@if one process is killed, kill the other ourself; various ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.18 2004/02/20 20:34:32 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.18 2004/02/20 20:34:32 deraadt Exp $";
d513 1
a513 1
 *  2 <-> local tty out
d546 1
a546 2
		for (i = 3; i < 20; i++)
			close(i);
@


1.18
log
@bring back old cdelay & ldelay code, make it work; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.17 2003/09/20 18:15:32 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.17 2003/09/20 18:15:32 millert Exp $";
d66 1
a66 2
getfl(c)
	char c;
d96 1
a96 2
cu_take(cc)
	char cc;
d140 1
a140 1
	kill(pid, SIGIOT);
d297 1
a297 1
	kill(pid, SIGIOT);	/* put TIPOUT into a wait state */
d423 1
a423 2
send(c)
	int c;
d473 1
a473 1
	kill(pid, SIGIOT);	/* put TIPOUT into a wait state */
d516 1
a516 1
consh(c)
d526 1
a526 1
	kill(pid, SIGIOT);	/* put TIPOUT into a wait state */
d567 1
a567 1
shell()
d609 1
a609 1
	kill(pid, SIGEMT);
d646 1
a646 1
	kill(pid, SIGTERM);
d747 1
a747 1
		kill(pid, SIGSYS);
@


1.17
log
@Implement hardwareflow varable in tip(1) like Solaris and hf in /etc/remote.
Based on PR 3411 from Matthew Gream
Also document "tandem" variable (XON/XOFF) in tip man page.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.16 2003/06/03 02:56:18 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.16 2003/06/03 02:56:18 millert Exp $";
a432 1
#ifdef notdef
d434 1
a434 2
		nap(number(value(CDELAY)));
#endif
a435 1
#ifdef notdef
d437 1
a437 2
			nap(number(value(LDELAY)));
#endif
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.15 2002/06/12 06:07:16 mpech Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.15 2002/06/12 06:07:16 mpech Exp $";
d786 7
d819 1
a819 1
			    boolean(p->v_value) == '!' ? "false" : "true");
d848 17
@


1.15
log
@a real pid_t cleanup.

espie@@ ok for make/,
deraadt@@ one extra eye,
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.14 2002/05/07 06:56:50 hugh Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.14 2002/05/07 06:56:50 hugh Exp $";
@


1.14
log
@Carefully applied -Wall fixups from <panda@@omatis.com>.
Also a little KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.13 2001/10/24 18:38:58 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: cmds.c,v 1.13 2001/10/24 18:38:58 millert Exp $";
d204 1
a204 1
	int cpid, pdes[2];
d207 1
d477 2
a478 1
	int cpid, status, p;
d530 2
a531 1
	int cpid, status, p;
d580 1
a580 1
	int shpid, status;
d582 1
d882 1
a882 1
	int pid, l;
d885 1
@


1.13
log
@kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.12 2001/09/26 06:07:28 pvalchev Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.12 2001/09/26 06:07:28 pvalchev Exp $";
d738 1
a738 1
		if (nums[i] || i == 0 && nums[1] == 0 && nums[2] == 0)
@


1.12
log
@Wall cleanup w/ some fixes; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.11 2001/09/09 17:58:41 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.11 2001/09/09 17:58:41 millert Exp $";
d136 1
a136 1
	register int ct;
d139 1
a139 1
	register int cnt, eof;
a206 1
	extern int errno;
d232 1
a232 1
		register int f;
d498 1
a498 1
		register int i;
d550 1
a550 1
		register int i;
d636 1
a636 1
	register char *cp = dirname;
d688 1
a688 1
	register char *cp;
d703 3
a705 3
	register char *p = buf, *start;
	register char **parg = a;
	register int n = 0;
d729 1
a729 1
	register int i;
d878 2
a879 2
	register int pid, l;
	register char *cp, *Shell;
d944 1
a944 1
	register char *s1, *s2;
d946 1
a946 1
	register int c;
@


1.11
log
@Add ~v escape to print all variables and their values.
In cu, the phone number argument is optional.
However, *some* argument must be specified and this is not currently
obvious from the man page or usage warning.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.10 2001/07/12 05:17:23 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.10 2001/07/12 05:17:23 deraadt Exp $";
d809 1
a809 1
			printf(" %d\r\n", number(p->v_value));
@


1.10
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.9 2001/07/09 07:04:55 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.9 2001/07/09 07:04:55 deraadt Exp $";
d47 2
d787 34
@


1.9
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.8 2000/04/20 06:19:33 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.8 2000/04/20 06:19:33 deraadt Exp $";
d377 1
a377 1
	if (boolean(value(VERBOSE)))
d382 1
d728 1
a728 1
	register i;
@


1.8
log
@avoid naming something pwrite()
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.7 1997/09/01 23:24:23 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.7 1997/09/01 23:24:23 deraadt Exp $";
d597 1
a597 1
		execl(value(SHELL), cp, 0);
d693 1
a693 1
	execl(value(SHELL), cp, "-c", s, 0);
d865 1
a865 1
		execl(Shell, Shell, "-c", cmdbuf, 0);
@


1.7
log
@Wall pass, and oflow fix from eivind@@bitbox.follo.net
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.6 1997/08/22 22:42:07 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.6 1997/08/22 22:42:07 millert Exp $";
d142 1
a142 1
	pwrite(FD, buf, size(buf));
d151 1
a151 1
	pwrite(FD, &r, 1);
d433 1
a433 1
	pwrite(FD, &cc, 1);
d454 1
a454 1
		pwrite(FD, &null, 1); /* poke it */
@


1.6
log
@Buf oflow fix from Warner Losh <imp@@rover.village.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.5 1997/04/02 01:47:01 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.5 1997/04/02 01:47:01 millert Exp $";
d67 1
d98 1
d107 2
a108 1
	if ((argc = args(copyname, argv)) < 1 || argc > 2) {
d124 1
d129 1
d132 1
d136 1
a136 1
	register char *p = buffer;
d183 1
a183 1
	if (cnt = (p-buffer))
d199 1
d259 1
d291 1
d389 1
d401 2
a402 1
	if ((argc = args(copyname, argv)) < 1 || argc > 2) {
d425 1
d427 1
a427 1
	char c;
d470 1
d475 1
a475 1
	time_t start;
d492 1
a492 1
		start = time(0);
d522 1
d527 1
a527 1
	time_t start;
d572 1
a575 1
	extern char **environ;
d582 1
a582 1
	if (shpid = fork()) {
d607 1
d630 1
d646 1
d662 1
d682 1
d696 2
a697 1
args(buf, a)
d699 1
d717 1
a717 1
	} while (*p);
d722 1
d742 1
d782 1
a782 1
		setparity();
d789 1
d810 1
d822 1
d842 1
a842 1
	register int pid, l, rc;
d844 1
a844 1
	int s, pivec[2], (*sigint)();
d906 1
a906 1

d912 1
a912 1
	while (c = *s1++)
@


1.5
log
@Merge in good changes from NetBSD:
    Compile in strcict ansi (some day I'll get around to -Wall)
    use set* functions instead of modifying the lvalue
    Change a few sprintf() to snprintf() where it coudl possibly matter.
    Replace zzhack stuff with something saner to make tip work on alpha
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.4 1996/10/15 23:47:20 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.4 1996/10/15 23:47:20 millert Exp $";
d76 1
a76 1
	if (prompt("Local file name? ", copyname))
d87 1
a87 1
	if (prompt("List command for remote system? ", buf)) {
d103 1
a103 1
	if (prompt("[take] ", copyname))
d200 1
a200 1
	if (prompt("Local command? ", buf))
d212 1
a212 1
		if (prompt("List command for remote system? ", buf)) {
d263 1
a263 1
	if (prompt("Local file name? ", fname))
d389 1
a389 1
	if (prompt("[put] ", copyname))
d465 1
a465 1
	if (prompt("Local command? ", buf))
d516 1
a516 1
	if (prompt("Local command? ", buf))
d617 1
a617 1
	char dirname[80];
d620 1
a620 1
	if (prompt("[cd] ", dirname)) {
d724 1
a724 1
	if (prompt("[set] ", buf))
@


1.4
log
@Possible buf oflow + index -> strchr.
@
text
@d1 2
a2 2
/*	$OpenBSD: cmds.c,v 1.3 1996/06/26 05:40:41 deraadt Exp $	*/
/*	$NetBSD: cmds.c,v 1.6 1995/10/29 00:49:38 pk Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.3 1996/06/26 05:40:41 deraadt Exp $";
d116 1
a116 1
	snprintf(line, sizeof(line), "cat %s;echo \01", argv[0]);
d403 1
a403 1
		snprintf(line, sizeof(line), "cat>%s\r", argv[1]);
d405 2
a406 1
		snprintf(line, sizeof(line), "stty -echo;cat>%s;stty echo\r", argv[1]);
d828 1
a828 1
	snprintf(cmdbuf, sizeof(cmdbuf), "echo %s", name);
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: cmds.c,v 1.6 1995/10/29 00:49:38 pk Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cmds.c,v 1.6 1995/10/29 00:49:38 pk Exp $";
d116 1
a116 1
	sprintf(line, "cat %s;echo \01", argv[0]);
d403 1
a403 1
		sprintf(line, "cat>%s\r", argv[1]);
d405 1
a405 1
		sprintf(line, "stty -echo;cat>%s;stty echo\r", argv[1]);
d577 1
a577 1
		if ((cp = rindex(value(SHELL), '/')) == NULL)
d668 1
a668 1
	if ((cp = rindex(value(SHELL), '/')) == NULL)
d827 1
a827 1
	sprintf(cmdbuf, "echo %s", name);
@


1.2
log
@from netbsd:
Convert to termios (from Scott Reynolds; PR#1621).
8-bit patches (from Matthieu Herrb; PR#1384).
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: cmds.c,v 1.6 1995/10/29 00:49:38 pk Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cmds.c,v 1.5 1995/09/26 06:02:08 jtc Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: cmds.c,v 1.5 1995/09/26 06:02:08 jtc Exp $";
d147 2
a148 2
	while ((c&0177) != '\n');
	ioctl(0, TIOCSETC, &defchars);
d155 1
a155 1
		c &= 0177;
d182 1
a182 1
	ioctl(0, TIOCSETC, &tchars);
d274 2
a275 6
	if (!boolean(value(ECHOCHECK))) {
		struct sgttyb buf;

		ioctl(FD, TIOCGETP, &buf);	/* this does a */
		ioctl(FD, TIOCSETP, &buf);	/*   wflushtty */
	}
d294 1
a294 1
	ioctl(0, TIOCSETC, &defchars);
d302 1
a302 4
			struct sgttyb buf;

			ioctl(FD, TIOCGETP, &buf);	/* this does a */
			ioctl(FD, TIOCSETP, &buf);	/*   wflushtty */
d353 1
a353 1
			} while ((c&0177) != character(value(PROMPT)));
d373 1
a373 1
	ioctl(0, TIOCSETC, &tchars);
d468 1
a468 1
	ioctl(0, TIOCSETC, &defchars);
d495 1
a495 1
	ioctl(0, TIOCSETC, &tchars);
d519 1
a519 1
	ioctl(0, TIOCSETC, &defchars);
d547 1
a547 1
	ioctl(0, TIOCSETC, &tchars);
d767 1
a767 1
	struct sgttyb rmtty;
d769 4
a772 4
	ioctl(FD, TIOCGETP, &rmtty);
	if (strcmp(option,"on") == 0) {
		rmtty.sg_flags |= TANDEM;
		arg.sg_flags |= TANDEM;
d774 2
a775 2
		rmtty.sg_flags &= ~TANDEM;
		arg.sg_flags &= ~TANDEM;
d777 2
a778 2
	ioctl(FD, TIOCSETP, &rmtty);
	ioctl(0,  TIOCSETP, &arg);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
