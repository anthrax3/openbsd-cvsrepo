head	1.34;
access;
symbols
	OPENBSD_5_7:1.33.0.16
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.20
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.18
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.14
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.33.0.12
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.33.0.10
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.8
	OPENBSD_5_0:1.33.0.6
	OPENBSD_5_0_BASE:1.33
	OPENBSD_4_9:1.33.0.4
	OPENBSD_4_9_BASE:1.33
	OPENBSD_4_8:1.33.0.2
	OPENBSD_4_8_BASE:1.33
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.12
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.8
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.16
	OPENBSD_2_8:1.7.0.14
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2015.04.24.18.05.21;	author nicm;	state dead;
branches;
next	1.33;
commitid	rYO6EyDAuDX1Hb8y;

1.33
date	2010.08.01.20.27.51;	author nicm;	state Exp;
branches;
next	1.32;

1.32
date	2010.07.11.23.16.42;	author chl;	state Exp;
branches;
next	1.31;

1.31
date	2010.07.02.07.32.16;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2010.07.02.05.56.29;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.02.05.52.48;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2010.07.01.23.41.42;	author nicm;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.01.21.28.01;	author nicm;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.01.20.24.19;	author chl;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.29.23.38.05;	author nicm;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.29.23.32.52;	author nicm;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.29.23.20.38;	author nicm;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.29.23.10.56;	author nicm;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.29.17.42.35;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.29.16.41.56;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.29.05.55.37;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.44;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.15.19.42.05;	author moritz;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.06.23.24.52;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.17.14.43.06;	author moritz;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.16.19.32.46;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.20.18.15.32;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.07.06.56.50;	author hugh;	state Exp;
branches;
next	1.10;

1.10
date	2001.10.24.18.38.58;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.09.19.30.49;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.12.05.17.24;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.09.07.12.23.59;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.09.01.23.24.25;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.04.20.23.29.33;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.04.02.01.47.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.15.23.47.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.40.46;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Remove tip(1), superseded by cu(1).

ok deraadt sthen bmercer
@
text
@/*	$OpenBSD: remote.c,v 1.33 2010/08/01 20:27:51 nicm Exp $	*/
/*	$NetBSD: remote.c,v 1.5 1997/04/20 00:02:45 mellon Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>

#include "tip.h"

static char	*db_array[3] = { _PATH_REMOTE, 0, 0 };

#define cgetflag(f)	(cgetcap(bp, f, ':') != NULL)

char *
getremote(char *host)
{
	char   *bp, *rempath, *strval;
	int	stat;
	long	val;

	rempath = getenv("REMOTE");
	if (rempath != NULL) {
		if (*rempath != '/')
			/* we have an entry */
			cgetset(rempath);
		else {	/* we have a path */
			db_array[1] = rempath;
			db_array[2] = _PATH_REMOTE;
		}
	}

	if ((stat = cgetent(&bp, db_array, host)) < 0) {
		if (vgetstr(DEVICE) != NULL ||
		    (host[0] == '/' && access(host, R_OK | W_OK) == 0)) {
			if (vgetstr(DEVICE) == NULL)
				vsetstr(DEVICE, host);
			vsetstr(HOST, host);
			if (!vgetnum(BAUDRATE))
				vsetnum(BAUDRATE, DEFBR);
			vsetnum(FRAMESIZE, DEFFS);
			return (vgetstr(DEVICE));
		}
		switch (stat) {
		case -1:
			fprintf(stderr, "%s: unknown host %s\n", __progname,
			    host);
			break;
		case -2:
			fprintf(stderr,
			    "%s: can't open host description file\n",
			    __progname);
			break;
		case -3:
			fprintf(stderr,
			    "%s: possible reference loop in host description file\n", __progname);
			break;
		}
		exit(3);
	}

	/* String options. Use if not already set. */
	if (vgetstr(DEVICE) == NULL && cgetstr(bp, "dv", &strval) >= 0)
		vsetstr(DEVICE, strval);
	if (vgetstr(CONNECT) == NULL && cgetstr(bp, "cm", &strval) >= 0)
		vsetstr(CONNECT, strval);
	if (vgetstr(DISCONNECT) == NULL && cgetstr(bp, "di", &strval) >= 0)
		vsetstr(DISCONNECT, strval);
	if (vgetstr(EOL) == NULL && cgetstr(bp, "el", &strval) >= 0)
		vsetstr(EOL, strval);
	if (vgetstr(EOFREAD) == NULL && cgetstr(bp, "ie", &strval) >= 0)
		vsetstr(EOFREAD, strval);
	if (vgetstr(EOFWRITE) == NULL && cgetstr(bp, "oe", &strval) >= 0)
		vsetstr(EOFWRITE, strval);
	if (vgetstr(EXCEPTIONS) == NULL && cgetstr(bp, "ex", &strval) >= 0)
		vsetstr(EXCEPTIONS, strval);
	if (vgetstr(RECORD) == NULL && cgetstr(bp, "re", &strval) >= 0)
		vsetstr(RECORD, strval);
	if (vgetstr(PARITY) == NULL && cgetstr(bp, "pa", &strval) >= 0)
		vsetstr(PARITY, strval);

	/* Numbers with default values. Set if currently zero (XXX ugh). */
	if (vgetnum(BAUDRATE) == 0) {
		if (cgetnum(bp, "br", &val) < 0)
			vsetnum(BAUDRATE, DEFBR);
		else
			vsetnum(BAUDRATE, val);
	}
	if (vgetnum(LINEDISC) == 0) { /* XXX relies on TTYDISC == 0 */
		if (cgetnum(bp, "ld", &val) < 0)
			vsetnum(LINEDISC, TTYDISC);
		else
			vsetnum(LINEDISC, val);
	}
	if (vgetnum(FRAMESIZE) == 0) {
		if (cgetnum(bp, "fs", &val) < 0)
			vsetnum(FRAMESIZE, DEFFS);
		else
			vsetnum(FRAMESIZE, val);
	}

	/* Numbers - default values already set in vinit() or zero. */
	if (cgetnum(bp, "es", &val) >= 0)
		vsetnum(ESCAPE, val);
	if (cgetnum(bp, "fo", &val) >= 0)
		vsetnum(FORCE, val);
	if (cgetnum(bp, "pr", &val) >= 0)
		vsetnum(PROMPT, val);
	if (cgetnum(bp, "rc", &val) >= 0)
		vsetnum(RAISECHAR, val);

	/* Numbers - default is zero. */
	if (cgetnum(bp, "dl", &val) < 0)
		vsetnum(LDELAY, 0);
	else
		vsetnum(LDELAY, val);
	if (cgetnum(bp, "cl", &val) < 0)
		vsetnum(CDELAY, 0);
	else
		vsetnum(CDELAY, val);
	if (cgetnum(bp, "et", &val) < 0)
		vsetnum(ETIMEOUT, 0);
	else
		vsetnum(ETIMEOUT, val);

	/* Flag options. */
	if (cgetflag("hd")) /* XXX overrides command line */
		vsetnum(HALFDUPLEX, 1);
	if (cgetflag("ra"))
		vsetnum(RAISE, 1);
	if (cgetflag("ec"))
		vsetnum(ECHOCHECK, 1);
	if (cgetflag("be"))
		vsetnum(BEAUTIFY, 1);
	if (cgetflag("nb"))
		vsetnum(BEAUTIFY, 0);
	if (cgetflag("sc"))
		vsetnum(SCRIPT, 1);
	if (cgetflag("tb"))
		vsetnum(TABEXPAND, 1);
	if (cgetflag("vb")) /* XXX overrides command line */
		vsetnum(VERBOSE, 1);
	if (cgetflag("nv")) /* XXX overrides command line */
		vsetnum(VERBOSE, 0);
	if (cgetflag("ta"))
		vsetnum(TAND, 1);
	if (cgetflag("nt"))
		vsetnum(TAND, 0);
	if (cgetflag("rw"))
		vsetnum(RAWFTP, 1);
	if (cgetflag("hd"))
		vsetnum(HALFDUPLEX, 1);
	if (cgetflag("dc"))
		vsetnum(DC, 1);
	if (cgetflag("hf"))
		vsetnum(HARDWAREFLOW, 1);

	if (vgetstr(RECORD) == NULL)
		vsetstr(RECORD, "tip.record");
	if (vgetstr(EXCEPTIONS) == NULL)
		vsetstr(EXCEPTIONS, "\t\n\b\f");

	vsetstr(HOST, host);
	if (vgetstr(DEVICE) == NULL) {
		fprintf(stderr, "%s: missing device spec\n", host);
		exit(3);
	}
	return (vgetstr(DEVICE));
}
@


1.33
log
@Make parsing of /etc/remote work again (some of the options were the
wrong type), try to make it clearer what comes from where, and add a few
XXX.

Currently there is a mess of default options set in vinit(), default
options set in getremote(), stuff read from /etc/remote and options read
from the command-line, and there remains the problems with leftover
options from rotation. This all needs to be sorted out properly later.

Noticed while trying to find a possible problem reported by miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.32 2010/07/11 23:16:42 chl Exp $	*/
@


1.32
log
@remove unused variable and unused static prototype.

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.31 2010/07/02 07:32:16 nicm Exp $	*/
d90 16
a105 35
	if (cgetstr(bp, "dv", &strval) < 0)
		strval = NULL;
	vsetstr(DEVICE, strval);
	if (cgetstr(bp, "cm", &strval) < 0)
		strval = NULL;
	vsetstr(CONNECT, strval);
	if (cgetstr(bp, "di", &strval) < 0)
		strval = NULL;
	vsetstr(DISCONNECT, strval);
	if (cgetstr(bp, "el", &strval) < 0)
		strval = NULL;
	vsetstr(EOL, strval);
	if (cgetstr(bp, "ie", &strval) < 0)
		strval = NULL;
	vsetstr(EOFREAD, strval);
	if (cgetstr(bp, "oe", &strval) < 0)
		strval = NULL;
	vsetstr(EOFWRITE, strval);
	if (cgetstr(bp, "ex", &strval) < 0)
		strval = NULL;
	vsetstr(EXCEPTIONS, strval);
	if (cgetstr(bp, "re", &strval) < 0)
		strval = NULL;
	vsetstr(RECORD, strval);
	if (cgetstr(bp, "pa", &strval) < 0)
		strval = NULL;
	vsetstr(PARITY, strval);

	if (cgetstr(bp, "es", &strval) >= 0 && strval != NULL)
		vsetstr(ESCAPE, strval);
	if (cgetstr(bp, "fo", &strval) >= 0 && strval != NULL)
		vsetstr(FORCE, strval);
	if (cgetstr(bp, "pr", &strval) >= 0 && strval != NULL)
		vsetstr(PROMPT, strval);
	if (cgetstr(bp, "rc", &strval) >= 0 && strval != NULL)
d107 2
d110 3
a112 2
	if (!vgetnum(BAUDRATE)) {
		if (cgetnum(bp, "br", &val) == -1)
d117 2
a118 2
	if (!vgetnum(LINEDISC)) {
		if (cgetnum(bp, "ld", &val) == -1)
d123 24
a146 2
	if (cgetnum(bp, "fs", &val) == -1)
		vsetnum(FRAMESIZE, DEFFS);
d148 5
a152 5
		vsetnum(FRAMESIZE, val);
	if (vgetstr(DEVICE) == NULL) {
		fprintf(stderr, "%s: missing device spec\n", host);
		exit(3);
	}
d154 2
a155 2
	vsetstr(HOST, host);
	if (cgetflag("hd"))
d169 1
a169 1
	if (cgetflag("vb"))
d171 1
a171 1
	if (cgetflag("nv"))
d185 1
a189 12
	if (cgetnum(bp, "dl", &val) == -1)
		vsetnum(LDELAY, 0);
	else
		vsetnum(LDELAY, val);
	if (cgetnum(bp, "cl", &val) == -1)
		vsetnum(CDELAY, 0);
	else
		vsetnum(CDELAY, val);
	if (cgetnum(bp, "et", &val) == -1)
		vsetnum(ETIMEOUT, 0);
	else
		vsetnum(ETIMEOUT, val);
d191 5
@


1.31
log
@Merge almost-empty pathnames.h into tip.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.30 2010/07/02 05:56:29 nicm Exp $	*/
a41 2

static void	getremcap(char *);
@


1.30
log
@Bye-bye vstring, and add value type checking code to vgetstr/vsetstr/etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.29 2010/07/02 05:52:48 nicm Exp $	*/
a36 1
#include "pathnames.h"
@


1.29
log
@Rewrite hunt() to put the "rotary action" into it rather than remote.c, and so
it isn't so stupid (returning a char * as a long which goes into an int to use
as a flag, ugh).
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.28 2010/07/01 23:41:42 nicm Exp $	*/
d122 1
a122 1
		vstring("es", strval);
d124 1
a124 1
		vstring("fo", strval);
d126 1
a126 1
		vstring("pr", strval);
d128 1
a128 1
		vstring("rc", strval);
@


1.28
log
@Don't overwrite the device name with the fake cu%d host.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.27 2010/07/01 21:28:01 nicm Exp $	*/
d46 2
a47 2
static void
getremcap(char *host)
d67 2
d73 1
a73 1
			return;
a197 1
}
a198 30
char *
getremote(char *host)
{
	char *cp;
	static char *next;
	static int lookedup = 0;

	if (!lookedup) {
		if (host == NULL && (host = getenv("HOST")) == NULL) {
			fprintf(stderr, "%s: no host specified\n", __progname);
			exit(3);
		}
		getremcap(host);
		next = vgetstr(DEVICE);
		lookedup++;
	}
	/*
	 * We return a new device each time we're called (to allow
	 *   a rotary action to be simulated)
	 */
	if (next == NULL)
		return (NULL);
	if ((cp = strchr(next, ',')) == NULL) {
		vsetstr(DEVICE, next);
		next = NULL;
	} else {
		*cp++ = '\0';
		vsetstr(DEVICE, next);
		next = cp;
	}
@


1.27
log
@Change variable get/set macros to have better names and drop boolean/character
ones.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.26 2010/07/01 20:24:19 chl Exp $	*/
a66 1
			vsetstr(DEVICE, host);
@


1.26
log
@remove unused variables
add missing headers needed for uu_unlock()

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.25 2010/06/29 23:38:05 nicm Exp $	*/
d65 1
a65 1
		if (value(DEVICE) != NULL ||
d67 5
a71 5
			value(DEVICE) = host;
			value(HOST) = host;
			if (!number(value(BAUDRATE)))
				setnumber(value(BAUDRATE), DEFBR);
			setnumber(value(FRAMESIZE), DEFFS);
d92 27
a118 9
	cgetstr(bp, "dv", &value(DEVICE));
	cgetstr(bp, "cm", &value(CONNECT));
	cgetstr(bp, "di", &value(DISCONNECT));
	cgetstr(bp, "el", &value(EOL));
	cgetstr(bp, "ie", &value(EOFREAD));
	cgetstr(bp, "oe", &value(EOFWRITE));
	cgetstr(bp, "ex", &value(EXCEPTIONS));
	cgetstr(bp, "re", &value(RECORD));
	cgetstr(bp, "pa", &value(PARITY));
d128 2
a129 2
	
	if (!number(value(BAUDRATE))) {
d131 1
a131 1
			setnumber(value(BAUDRATE), DEFBR);
d133 1
a133 1
			setnumber(value(BAUDRATE), val);
d135 1
a135 1
	if (!number(value(LINEDISC))) {
d137 1
a137 1
			setnumber(value(LINEDISC), TTYDISC);
d139 1
a139 1
			setnumber(value(LINEDISC), val);
d142 1
a142 1
		setnumber(value(FRAMESIZE), DEFFS);
d144 2
a145 2
		setnumber(value(FRAMESIZE), val);
	if (value(DEVICE) == NULL) {
d150 1
a150 1
	value(HOST) = host;
d152 1
a152 1
		setboolean(value(HALFDUPLEX), 1);
d154 1
a154 1
		setboolean(value(RAISE), 1);
d156 1
a156 1
		setboolean(value(ECHOCHECK), 1);
d158 1
a158 1
		setboolean(value(BEAUTIFY), 1);
d160 1
a160 1
		setboolean(value(BEAUTIFY), 0);
d162 1
a162 1
		setboolean(value(SCRIPT), 1);
d164 1
a164 1
		setboolean(value(TABEXPAND), 1);
d166 1
a166 1
		setboolean(value(VERBOSE), 1);
d168 1
a168 1
		setboolean(value(VERBOSE), 0);
d170 1
a170 1
		setboolean(value(TAND), 1);
d172 1
a172 1
		setboolean(value(TAND), 0);
d174 1
a174 1
		setboolean(value(RAWFTP), 1);
d176 1
a176 1
		setboolean(value(HALFDUPLEX), 1);
d178 1
a178 1
		setboolean(value(DC), 1);
d180 5
a184 5
		setboolean(value(HARDWAREFLOW), 1);
	if (value(RECORD) == NULL)
		value(RECORD) = "tip.record";
	if (value(EXCEPTIONS) == NULL)
		value(EXCEPTIONS) = "\t\n\b\f";
d186 1
a186 1
		setnumber(value(LDELAY), 0);
d188 1
a188 1
		setnumber(value(LDELAY), val);
d190 1
a190 1
		setnumber(value(CDELAY), 0);
d192 1
a192 1
		setnumber(value(CDELAY), val);
d194 1
a194 1
		setnumber(value(ETIMEOUT), 0);
d196 1
a196 1
		setnumber(value(ETIMEOUT), val);
d212 1
a212 1
		next = value(DEVICE);
d222 1
a222 1
		value(DEVICE) = next;
d226 1
a226 1
		value(DEVICE) = next;
d229 1
a229 1
	return (value(DEVICE));
@


1.25
log
@Add new read-only vtable entries for device and connection string and use those
instead of variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.24 2010/06/29 23:32:52 nicm Exp $	*/
d49 1
a49 1
	char  **p, ***q, *bp, *rempath, *strval;
@


1.24
log
@Since dial-up is no longer supported, no need to store a phone number, or
accept one to cu(1).
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.23 2010/06/29 23:20:38 nicm Exp $	*/
a39 12
/*
 * Attributes to be gleened from remote host description
 *   data base.
 */
static char **caps[] = {
	&DV, &CM, &DI, 0
};

static char *capstrings[] = {
	"dv", "cm", "di", 0
};

d65 3
a67 2
		if ((DV != NULL) ||
		    (host[0] == '/' && access(DV = host, R_OK | W_OK) == 0)) {
d92 3
a94 5
	for (p = capstrings, q = caps; *p != NULL; p++, q++) {
		if (**q == NULL)
			cgetstr(bp, *p, *q);
	}

d127 1
a127 1
	if (DV == NULL) {
d194 1
a194 1
		next = DV;
d204 1
a204 1
		DV = next;
d208 1
a208 1
		DV = next;
d211 1
a211 1
	return (DV);
@


1.23
log
@Do the same for di, es, fo, rc and remove their remote variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.22 2010/06/29 23:10:56 nicm Exp $	*/
d45 1
a45 1
	&DV, &CM, &PN, &DI, 0
d49 1
a49 1
	"dv", "cm", "pn", "di", 0
@


1.22
log
@For every variable which has a value table entry with IREMOTE, remove the
remote variable and always use the value from the vtable. This then allows the
IREMOTE flag to be removed.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.21 2010/06/29 17:42:35 nicm Exp $	*/
d45 1
a45 1
	&DV, &CM, &PN, &PR, &DI, &ES, &FO, &RC, 0
d49 1
a49 1
	"dv", "cm", "pn", "pr", "di", "es", "fo", "rc", 0
d61 1
a61 1
	char  **p, ***q, *bp, *rempath;
d115 9
a179 8
	if (ES != NULL)
		vstring("es", ES);
	if (FO != NULL)
		vstring("fo", FO);
	if (PR != NULL)
		vstring("pr", PR);
	if (RC != NULL)
		vstring("rc", RC);
@


1.21
log
@Now that there is no dial-up support, all connections are hardwired so drop the
flag and ignore the -t option to cu(1).
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.20 2010/06/29 16:41:56 nicm Exp $	*/
d45 1
a45 2
	&DV, &CM, &EL, &IE, &OE, &PN, &PR, &DI,
	&ES, &EX, &FO, &RC, &RE, &PA
d49 1
a49 2
	"dv", "cm", "el", "ie", "oe", "pn", "pr",
	"di", "es", "ex", "fo", "rc", "re", "pa", 0
d61 3
a63 2
	char **p, ***q, *bp, *rempath;
	int   stat;
d79 4
a82 4
			HO = host;
			if (!BR)
				BR = DEFBR;
			FS = DEFFS;
d103 1
a103 1
	for (p = capstrings, q = caps; *p != NULL; p++, q++)
d106 25
a130 6
	if (!BR && (cgetnum(bp, "br", &BR) == -1))
		BR = DEFBR;
	if (!LD && (cgetnum(bp, "ld", &LD) == -1))
		LD = TTYDISC;
	if (cgetnum(bp, "fs", &FS) == -1)
		FS = DEFFS;
d136 3
a138 6
	HD = cgetflag("hd");
	HO = host;

	/*
	 * see if uppercase mode should be turned on initially
	 */
d167 4
a170 4
	if (RE == NULL)
		RE = (char *)"tip.record";
	if (EX == NULL)
		EX = (char *)"\t\n\b\f";
d179 12
a190 6
	if (cgetnum(bp, "dl", &DL) == -1)
		DL = 0;
	if (cgetnum(bp, "cl", &CL) == -1)
		CL = 0;
	if (cgetnum(bp, "et", &ET) == -1)
		ET = 10;
@


1.20
log
@Bye-bye acu which even UUCP-using naddy agrees "was obsolete 20 years ago" :-).
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.19 2010/06/29 05:55:37 nicm Exp $	*/
a80 1
			HW = 1;
d119 1
a120 6
	/*
	 * This effectively eliminates the "hw" attribute
	 *   from the description file
	 */
	HW = 1;
	HO = host;
@


1.19
log
@Replace "nice" strcmp() wrapper macro with strcmp.

ok jsing
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.18 2009/10/27 23:59:44 deraadt Exp $	*/
d45 1
a45 1
	&AT, &DV, &CM, &CU, &EL, &IE, &OE, &PN, &PR, &DI,
d50 1
a50 1
	"at", "dv", "cm", "cu", "el", "ie", "oe", "pn", "pr",
a79 1
			CU = DV;
a81 1
			DU = 0;
a113 4
	if (DU < 0)
		DU = 0;
	else
		DU = cgetflag("du");
a117 10
	if (DU && CU == NULL)
		CU = DV;
	if (DU && PN == NULL) {
		fprintf(stderr, "%s: missing phone number\n", host);
		exit(3);
	}
	if (DU && AT == NULL) {
		fprintf(stderr, "%s: missing acu type\n", host);
		exit(3);
	}
d125 1
a125 2
	if (!HW)
		HW = (CU == NULL) || (DU && strcmp(DV, CU) == 0);
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.17 2007/05/15 19:42:05 moritz Exp $	*/
d142 1
a142 1
		HW = (CU == NULL) || (DU && equal(DV, CU));
@


1.17
log
@Remove useless NOxxx defines and use NULL instead.
No binary change.

OK ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.16 2006/06/06 23:24:52 deraadt Exp $	*/
a32 13

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1992, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)remote.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: remote.c,v 1.16 2006/06/06 23:24:52 deraadt Exp $";
#endif /* not lint */
@


1.16
log
@teach tip about line disciplines; tried by mbalmer too
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.15 2006/03/17 14:43:06 moritz Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: remote.c,v 1.15 2006/03/17 14:43:06 moritz Exp $";
d133 1
a133 1
	if (DV == NOSTR) {
d137 1
a137 1
	if (DU && CU == NOSTR)
d139 1
a139 1
	if (DU && PN == NOSTR) {
d143 1
a143 1
	if (DU && AT == NOSTR) {
d155 1
a155 1
		HW = (CU == NOSTR) || (DU && equal(DV, CU));
d188 1
a188 1
	if (RE == NOSTR)
d190 1
a190 1
	if (EX == NOSTR)
d192 1
a192 1
	if (ES != NOSTR)
d194 1
a194 1
	if (FO != NOSTR)
d196 1
a196 1
	if (PR != NOSTR)
d198 1
a198 1
	if (RC != NOSTR)
d216 1
a216 1
		if (host == NOSTR && (host = getenv("HOST")) == NOSTR) {
d228 2
a229 2
	if (next == NOSTR)
		return (NOSTR);
d232 1
a232 1
		next = NOSTR;
@


1.15
log
@big prototype cleanup:

o make more functions static
o add all the prototypes to tip.h
o consistently declare functions in the cmd table

testing and ok dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.14 2006/03/16 19:32:46 deraadt Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: remote.c,v 1.14 2006/03/16 19:32:46 deraadt Exp $";
d125 2
@


1.14
log
@first pass of cleanup of this mess; ok dhill
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.13 2003/09/20 18:15:32 millert Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: remote.c,v 1.13 2003/09/20 18:15:32 millert Exp $";
d70 2
@


1.13
log
@Implement hardwareflow varable in tip(1) like Solaris and hf in /etc/remote.
Based on PR 3411 from Matthew Gream
Also document "tandem" variable (XON/XOFF) in tip man page.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.12 2003/06/03 02:56:18 millert Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: remote.c,v 1.12 2003/06/03 02:56:18 millert Exp $";
d72 1
a72 2
getremcap(host)
	char *host;
d74 1
a74 3
	char **p, ***q;
	char *bp;
	char *rempath;
d100 1
a100 1
		switch(stat) {
d106 1
a106 1
			fprintf(stderr, 
d111 1
a111 1
			fprintf(stderr, 
d205 1
a205 2
getremote(host)
	char *host;
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.11 2002/05/07 06:56:50 hugh Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: remote.c,v 1.11 2002/05/07 06:56:50 hugh Exp $";
d185 2
@


1.11
log
@Carefully applied -Wall fixups from <panda@@omatis.com>.
Also a little KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.10 2001/10/24 18:38:58 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: remote.c,v 1.10 2001/10/24 18:38:58 millert Exp $";
@


1.10
log
@kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.9 2001/09/09 19:30:49 millert Exp $	*/
d39 1
a39 1
static char copyright[] =
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.9 2001/09/09 19:30:49 millert Exp $";
d96 2
a97 2
		if (DV ||
		    host[0] == '/' && access(DV = host, R_OK | W_OK) == 0) {
@


1.9
log
@implement some more command line options for cu and use getopt(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.8 2001/07/12 05:17:24 deraadt Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.8 2001/07/12 05:17:24 deraadt Exp $";
d77 1
a77 1
	register char *host;
d79 1
a79 1
	register char **p, ***q;
d213 1
a213 1
	register char *cp;
@


1.8
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.7 1997/09/07 12:23:59 provos Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.7 1997/09/07 12:23:59 provos Exp $";
d109 2
a110 1
			fprintf(stderr, "tip: unknown host %s\n", host);
d114 2
a115 1
			    "tip: can't open host description file\n");
d119 1
a119 1
			    "tip: possible reference loop in host description file\n");
d219 1
a219 1
			fprintf(stderr, "tip: no host specified\n");
@


1.7
log
@check for acu type
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.6 1997/09/01 23:24:25 deraadt Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.6 1997/09/01 23:24:25 deraadt Exp $";
d85 1
a85 1
	if (rempath != NULL)
d93 1
@


1.6
log
@Wall pass, and oflow fix from eivind@@bitbox.follo.net
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.5 1997/04/20 23:29:33 millert Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.5 1997/04/20 23:29:33 millert Exp $";
d141 4
@


1.5
log
@Incorporate some NetBSD changes:
tip.c
    getchar() returns an int [important since EOF == -1] (thorpej)
    Set CLOCAL if dc flag is set (mellon)
tip.h
    Change booleans from char to short so that comparisons against negative
    values work as expected on systems with unsigned chars. (thorpej)
    Add boolean for dc flag (mellon)
hunt.c
    Set O_NONBLOCK if dc flag set. Don't set HUPCL if dc flag is set. (mellon)
remote.c
    Add boolean for dc flag (mellon)
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.4 1997/04/02 01:47:02 millert Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.4 1997/04/02 01:47:02 millert Exp $";
d75 1
a75 1
static
@


1.4
log
@Merge in good changes from NetBSD:
    Compile in strcict ansi (some day I'll get around to -Wall)
    use set* functions instead of modifying the lvalue
    Change a few sprintf() to snprintf() where it coudl possibly matter.
    Replace zzhack stuff with something saner to make tip work on alpha
@
text
@d1 2
a2 2
/*	$OpenBSD: remote.c,v 1.3 1996/10/15 23:47:21 millert Exp $	*/
/*	$NetBSD: remote.c,v 1.4 1996/12/29 10:34:08 cgd Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.3 1996/10/15 23:47:21 millert Exp $";
d180 2
@


1.3
log
@Possible buf oflow + index -> strchr.
@
text
@d1 2
a2 2
/*	$OpenBSD: remote.c,v 1.2 1996/06/26 05:40:46 deraadt Exp $	*/
/*	$NetBSD: remote.c,v 1.3 1994/12/08 09:31:03 jtc Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.2 1996/06/26 05:40:46 deraadt Exp $";
d157 1
a157 1
		boolean(value(RAISE)) = 1;
d159 1
a159 1
		boolean(value(ECHOCHECK)) = 1;
d161 1
a161 1
		boolean(value(BEAUTIFY)) = 1;
d163 1
a163 1
		boolean(value(BEAUTIFY)) = 0;
d165 1
a165 1
		boolean(value(SCRIPT)) = 1;
d167 1
a167 1
		boolean(value(TABEXPAND)) = 1;
d169 1
a169 1
		boolean(value(VERBOSE)) = 1;
d171 1
a171 1
		boolean(value(VERBOSE)) = 0;
d173 1
a173 1
		boolean(value(TAND)) = 1;
d175 1
a175 1
		boolean(value(TAND)) = 0;
d177 1
a177 1
		boolean(value(RAWFTP)) = 1;
d179 1
a179 1
		boolean(value(HALFDUPLEX)) = 1;
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: remote.c,v 1.3 1994/12/08 09:31:03 jtc Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: remote.c,v 1.3 1994/12/08 09:31:03 jtc Exp $";
d223 1
a223 1
	if ((cp = index(next, ',')) == NULL) {
@


1.1
log
@Initial revision
@
text
@d1 1
d48 1
a48 1
static char rcsid[] = "$NetBSD: remote.c,v 1.3 1994/12/08 09:31:03 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
