head	1.16;
access;
symbols
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.12
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.8
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.18
	OPENBSD_2_8:1.6.0.16
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.14
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2010.06.29.16.41.57;	author nicm;	state dead;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.45;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.16.03.14.41;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.17.19.17.13;	author moritz;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.17.14.43.06;	author moritz;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.04.21.50.00;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.07.06.56.50;	author hugh;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.24.18.38.58;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.26.06.07.28;	author pvalchev;	state Exp;
branches;
next	1.6;

1.6
date	97.04.02.01.47.06;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.01.17.07.13.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.11.03.18.33.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.40.53;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.12.25;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Bye-bye acu which even UUCP-using naddy agrees "was obsolete 20 years ago" :-).
@
text
@/*	$OpenBSD: hayes.c,v 1.15 2009/10/27 23:59:45 deraadt Exp $	*/
/*	$NetBSD: hayes.c,v 1.6 1997/02/11 09:24:17 mrg Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Routines for calling up on a Hayes Modem
 * (based on the old VenTel driver).
 * The modem is expected to be strapped for "echo".
 * Also, the switches enabling the DTR and CD lines
 * must be set correctly.
 * NOTICE:
 * The easy way to hang up a modem is always simply to
 * clear the DTR signal. However, if the +++ sequence
 * (which switches the modem back to local mode) is sent
 * before modem is hung up, removal of the DTR signal
 * has no effect (except that it prevents the modem from
 * recognizing commands).
 * (by Helge Skrivervik, Calma Company, Sunnyvale, CA. 1984) 
 */
/*
 * TODO:
 * It is probably not a good idea to switch the modem
 * state between 'verbose' and terse (status messages).
 * This should be kicked out and we should use verbose 
 * mode only. This would make it consistent with normal
 * interactive use thru the command 'tip dialer'.
 */
#include "tip.h"

#include <termios.h>
#include <sys/ioctl.h>

#define	min(a,b)	((a < b) ? a : b)

static	int dialtimeout = 0;
static	jmp_buf timeoutbuf;

#define DUMBUFLEN	40
static char dumbuf[DUMBUFLEN];

#define	DIALING		1
#define IDLE		2
#define CONNECTED	3
#define	FAILED		4
static	int state = IDLE;

static void	sigALRM(int);
static char	gobble(char *);
static void	error_rep(char);
static void	goodbye(void);
static int	hay_sync(void);

int
hay_dialer(char *num, char *acu)
{
	char *cp;
	int connected = 0;
	char dummy;
	struct termios cntrl;
#ifdef ACULOG
	char line[80];
#endif
	if (hay_sync() == 0)		/* make sure we can talk to the modem */
		return(0);
	if (boolean(value(VERBOSE)))
		printf("\ndialing...");
	fflush(stdout);
	tcgetattr(FD, &cntrl);
	cntrl.c_cflag |= HUPCL;
	tcsetattr(FD, TCSANOW, &cntrl);
	tcflush(FD, TCIOFLUSH);
	write(FD, "ATv0\r", 5);	/* tell modem to use short status codes */
	gobble("\r");
	gobble("\r");
	write(FD, "ATTD", 4);	/* send dial command */
	for (cp = num; *cp; cp++)
		if (*cp == '=')
			*cp = ',';
	write(FD, num, strlen(num));
	state = DIALING;
	write(FD, "\r", 1);
	connected = 0;
	if (gobble("\r")) {
		if ((dummy = gobble("01234")) != '1')
			error_rep(dummy);
		else
			connected = 1;
	}
	if (connected)
		state = CONNECTED;
	else {
		state = FAILED;
		return (connected);	/* lets get out of here.. */
	}
	tcflush(FD, TCIOFLUSH);
#ifdef ACULOG
	if (dialtimeout) {
		(void)snprintf(line, sizeof line, "%ld second dial timeout",
			number(value(DIALTIMEOUT)));
		logent(value(HOST), num, "hayes", line);
	}
#endif
	if (dialtimeout)
		hay_disconnect();	/* insurance */
	return (connected);
}

void
hay_disconnect(void)
{
	/* first hang up the modem*/
#ifdef DEBUG
	printf("\rdisconnecting modem....\n\r");
#endif
	ioctl(FD, TIOCCDTR, 0);
	sleep(1);
	ioctl(FD, TIOCSDTR, 0);
	goodbye();
}

void
hay_abort(void)
{
	write(FD, "\r", 1);	/* send anything to abort the call */
	hay_disconnect();
}

/*ARGSUSED*/
static void
sigALRM(int signo)
{
	printf("\07timeout waiting for reply\n\r");
	dialtimeout = 1;
	longjmp(timeoutbuf, 1);
}

static char
gobble(char *match)
{
	char c;
	sig_t f;
	int i, status = 0;

	f = signal(SIGALRM, sigALRM);
	dialtimeout = 0;
#ifdef DEBUG
	printf("\ngobble: waiting for %s\n", match);
#endif
	do {
		if (setjmp(timeoutbuf)) {
			signal(SIGALRM, f);
			return (0);
		}
		alarm(number(value(DIALTIMEOUT)));
		read(FD, &c, 1);
		alarm(0);
		c &= 0177;
#ifdef DEBUG
		printf("%c 0x%x ", c, c);
#endif
		for (i = 0; i < strlen(match); i++)
			if (c == match[i])
				status = c;
	} while (status == 0);
	signal(SIGALRM, SIG_DFL);
#ifdef DEBUG
	printf("\n");
#endif
	return (status);
}

static void
error_rep(char c)
{
	printf("\n\r");
	switch (c) {

	case '0':
		printf("OK");
		break;

	case '1':
		printf("CONNECT");
		break;

	case '2':
		printf("RING");
		break;

	case '3':
		printf("NO CARRIER");
		break;

	case '4':
		printf("ERROR in input");
		break;

	case '5':
		printf("CONNECT 1200");
		break;

	default:
		printf("Unknown Modem error: %c (0x%x)", c, c);
	}
	printf("\n\r");
	return;
}

/*
 * set modem back to normal verbose status codes.
 */
static void
goodbye(void)
{
	int len;

	tcflush(FD, TCIOFLUSH);
	if (hay_sync()) {
#ifdef DEBUG
		ssize_t rlen;
#else
		char c;
#endif

		sleep(1);
#ifndef DEBUG
		tcflush(FD, TCIOFLUSH);
#endif
		write(FD, "ATH0\r", 5);		/* insurance */
#ifndef DEBUG
		c = gobble("03");
		if (c != '0' && c != '3') {
			printf("cannot hang up modem\n\r");
			printf("please use 'tip dialer' to make sure the line is hung up\n\r");
		}
#endif
		sleep(1);
		ioctl(FD, FIONREAD, &len);
#ifdef DEBUG
		printf("goodbye1: len=%d -- ", len);
		rlen = read(FD, dumbuf, min(len, DUMBUFLEN));
		dumbuf[rlen] = '\0';
		printf("read (%zd): %s\r\n", rlen, dumbuf);
#endif
		write(FD, "ATv1\r", 5);
		sleep(1);
#ifdef DEBUG
		ioctl(FD, FIONREAD, &len);
		printf("goodbye2: len=%d -- ", len);
		rlen = read(FD, dumbuf, min(len, DUMBUFLEN));
		dumbuf[rlen] = '\0';
		printf("read (%zd): %s\r\n", rlen, dumbuf);
#endif
	}
	tcflush(FD, TCIOFLUSH);
	ioctl(FD, TIOCCDTR, 0);		/* clear DTR (insurance) */
	close(FD);
}

#define MAXRETRY	5

static int
hay_sync(void)
{
	int len, retry = 0;

	while (retry++ <= MAXRETRY) {
		write(FD, "AT\r", 3);
		sleep(1);
		ioctl(FD, FIONREAD, &len);
		if (len) {
			len = read(FD, dumbuf, min(len, DUMBUFLEN));
			if (strchr(dumbuf, '0') || 
		   	(strchr(dumbuf, 'O') && strchr(dumbuf, 'K')))
				return(1);
#ifdef DEBUG
			dumbuf[len] = '\0';
			printf("hay_sync: (\"%s\") %d\n\r", dumbuf, retry);
#endif
		}
		ioctl(FD, TIOCCDTR, 0);
		ioctl(FD, TIOCSDTR, 0);
	}
	printf("Cannot synchronize with hayes...\n\r");
	return(0);
}
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.14 2007/05/16 03:14:41 ray Exp $	*/
@


1.14
log
@Add missing ssize_t rlen, used when DEBUG is defined, and only
define c when DEBUG is undefined.  From Pav Lucistnik <pav at
FreeBSD>.

While here, correct format strings to match ssize_t.

OK moritz@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.13 2006/03/17 19:17:13 moritz Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)hayes.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: hayes.c,v 1.13 2006/03/17 19:17:13 moritz Exp $";
#endif /* not lint */
@


1.13
log
@ansification and correct prototypes. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.12 2006/03/17 14:43:06 moritz Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: hayes.c,v 1.12 2006/03/17 14:43:06 moritz Exp $";
a250 1
	char c;
d254 6
d278 1
a278 1
		printf("read (%d): %s\r\n", rlen, dumbuf);
d287 1
a287 1
		printf("read (%d): %s\r\n", rlen, dumbuf);
@


1.12
log
@big prototype cleanup:

o make more functions static
o add all the prototypes to tip.h
o consistently declare functions in the cmd table

testing and ok dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.11 2003/06/03 02:56:18 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: hayes.c,v 1.11 2003/06/03 02:56:18 millert Exp $";
a69 1
static	void sigALRM();
a71 5
static 	char gobble();
static	void error_rep(char c);
int	hay_sync(void);
void	hay_disconnect(void);
void	goodbye(void);
d82 6
d89 1
a89 3
hay_dialer(num, acu)
	char *num;
	char *acu;
a142 1

d144 1
a144 1
hay_disconnect()
d157 1
a157 1
hay_abort()
a158 1

d163 1
d165 1
a165 1
sigALRM()
a166 1

d173 1
a173 2
gobble(match)
	char *match;
d220 1
a220 1
	
d224 1
a224 1
	
d228 1
a228 1
	
d232 1
a232 1
	
d236 1
a236 1
	
d247 2
a248 2
void
goodbye()
d292 2
a293 2
int
hay_sync()
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.10 2003/04/04 21:50:00 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: hayes.c,v 1.10 2003/04/04 21:50:00 deraadt Exp $";
d71 1
a71 1
static	int timeout = 0;
d134 1
a134 1
	if (timeout) {
d140 1
a140 1
	if (timeout)
d172 1
a172 1
	timeout = 1;
d185 1
a185 1
	timeout = 0;
@


1.10
log
@some easy string fixes; tdeval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.9 2002/05/07 06:56:50 hugh Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: hayes.c,v 1.9 2002/05/07 06:56:50 hugh Exp $";
@


1.9
log
@Carefully applied -Wall fixups from <panda@@omatis.com>.
Also a little KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.8 2001/10/24 18:38:58 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: hayes.c,v 1.8 2001/10/24 18:38:58 millert Exp $";
d139 1
a139 1
		(void)sprintf(line, "%ld second dial timeout",
@


1.8
log
@kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.7 2001/09/26 06:07:28 pvalchev Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: hayes.c,v 1.7 2001/09/26 06:07:28 pvalchev Exp $";
d78 5
d217 1
a217 2
error_rep(c)
	char c;
@


1.7
log
@Wall cleanup w/ some fixes; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.6 1997/04/02 01:47:06 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: hayes.c,v 1.6 1997/04/02 01:47:06 millert Exp $";
d89 1
a89 1
	register char *num;
d92 2
a93 2
	register char *cp;
	register int connected = 0;
d177 1
a177 1
	register char *match;
d213 1
a213 1
	register char c;
@


1.6
log
@Merge in good changes from NetBSD:
    Compile in strcict ansi (some day I'll get around to -Wall)
    use set* functions instead of modifying the lvalue
    Change a few sprintf() to snprintf() where it coudl possibly matter.
    Replace zzhack stuff with something saner to make tip work on alpha
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.5 1997/01/17 07:13:36 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: hayes.c,v 1.5 1997/01/17 07:13:36 millert Exp $";
d87 1
d134 1
a134 1
		(void)sprintf(line, "%d second dial timeout",
d145 1
a147 3
	char c;
	int len, rlen;

d158 1
a161 2
	char c;

d211 1
d252 1
d255 1
a255 1
	int len, rlen;
d297 1
@


1.5
log
@r?index -> strr?chr
@
text
@d1 2
a2 2
/*	$OpenBSD: hayes.c,v 1.4 1996/11/03 18:33:02 millert Exp $	*/
/*	$NetBSD: hayes.c,v 1.5 1996/11/01 23:56:33 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: hayes.c,v 1.4 1996/11/03 18:33:02 millert Exp $";
d133 1
a133 1
		sprintf(line, "%d second dial timeout",
@


1.4
log
@Translate '=' in phone number strings into ',' (to generate delays)
like other dialers do.  From NetBSD (cgd).
@
text
@d1 1
a1 1
/*	$OpenBSD: hayes.c,v 1.3 1996/06/26 05:40:53 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: hayes.c,v 1.3 1996/06/26 05:40:53 deraadt Exp $";
d307 2
a308 2
			if (index(dumbuf, '0') || 
		   	(index(dumbuf, 'O') && index(dumbuf, 'K')))
@


1.3
log
@rcsid
@
text
@d1 2
a2 2
/*	$OpenBSD: hayes.c,v 1.4 1995/10/29 00:49:54 pk Exp $	*/
/*	$NetBSD: hayes.c,v 1.4 1995/10/29 00:49:54 pk Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: hayes.c,v 1.4 1995/10/29 00:49:54 pk Exp $";
d111 3
@


1.2
log
@from netbsd:
Convert to termios (from Scott Reynolds; PR#1621).
8-bit patches (from Matthieu Herrb; PR#1384).
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: hayes.c,v 1.4 1995/10/29 00:49:54 pk Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: hayes.c,v 1.3 1994/12/08 09:31:42 jtc Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: hayes.c,v 1.3 1994/12/08 09:31:42 jtc Exp $";
d68 3
d93 1
d102 4
a105 2
	ioctl(FD, TIOCHPCL, 0);
	ioctl(FD, TIOCFLUSH, 0);	/* get rid of garbage */
d126 1
a126 1
	ioctl(FD, TIOCFLUSH, 0);
d254 1
a254 1
	ioctl(FD, TIOCFLUSH, &len);	/* get rid of trash */
d258 1
a258 1
		ioctl(FD, TIOCFLUSH, 0);
d286 1
a286 1
	ioctl(FD, TIOCFLUSH, 0);	/* clear the input buffer */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
