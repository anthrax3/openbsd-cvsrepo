head	1.14;
access;
symbols
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.16
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.12
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2010.06.29.16.41.57;	author nicm;	state dead;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.45;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.17.19.17.13;	author moritz;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.17.14.43.06;	author moritz;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.04.21.50.00;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.07.06.56.50;	author hugh;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.26.06.07.28;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	97.04.02.01.47.08;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.17.07.13.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.40.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.12.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Bye-bye acu which even UUCP-using naddy agrees "was obsolete 20 years ago" :-).
@
text
@/*	$OpenBSD: ventel.c,v 1.13 2009/10/27 23:59:45 deraadt Exp $	*/
/*	$NetBSD: ventel.c,v 1.6 1997/02/11 09:24:21 mrg Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Routines for calling up on a Ventel Modem
 * The Ventel is expected to be strapped for local echo (just like uucp)
 */
#include "tip.h"
#include <termios.h>
#include <sys/ioctl.h>

#define	MAXRETRY	5

static	int dialtimeout = 0;
static	jmp_buf timeoutbuf;

static void	echo(char *);
static void	sigALRM(int);
static int	gobble(char, char *);
static int	vensync(int);

/*
 * some sleep calls have been replaced by this macro
 * because some ventel modems require two <cr>s in less than
 * a second in order to 'wake up'... yes, it is dirty...
 */
#define delay(num,denom) busyloop(CPUSPEED*num/denom)
#define CPUSPEED 1000000	/* VAX 780 is 1MIPS */
#define DELAY(n) do { long N = (n); while (--N > 0); } while (0)
#define busyloop(n) do { DELAY(n); } while (0)

int
ven_dialer(char *num, char *acu)
{
	char *cp;
	int connected = 0;
	char *msg, line[80];
	struct termios	cntrl;

	/*
	 * Get in synch with a couple of carriage returns
	 */
	if (!vensync(FD)) {
		printf("can't synchronize with ventel\n");
#ifdef ACULOG
		logent(value(HOST), num, "ventel", "can't synch up");
#endif
		return (0);
	}
	if (boolean(value(VERBOSE)))
		printf("\ndialing...");
	fflush(stdout);
	tcgetattr(FD, &cntrl);
	cntrl.c_cflag |= HUPCL;
	tcsetattr(FD, TCSANOW, &cntrl);
	echo("#k$\r$\n$D$I$A$L$:$ ");
	for (cp = num; *cp; cp++) {
		delay(1, 10);
		write(FD, cp, 1);
	}
	delay(1, 10);
	write(FD, "\r", 1);
	gobble('\n', line);
	if (gobble('\n', line))
		connected = gobble('!', line);
	tcflush(FD, TCIOFLUSH);
#ifdef ACULOG
	if (dialtimeout) {
		(void)snprintf(line, sizeof line, "%ld second dial timeout",
			number(value(DIALTIMEOUT)));
		logent(value(HOST), num, "ventel", line);
	}
#endif
	if (dialtimeout)
		ven_disconnect();	/* insurance */
	if (connected || dialtimeout || !boolean(value(VERBOSE)))
		return (connected);
	/* call failed, parse response for user */
	cp = strchr(line, '\r');
	if (cp)
		*cp = '\0';
	for (cp = line; (cp = strchr(cp, ' ')) != NULL; cp++)
		if (cp[1] == ' ')
			break;
	if (cp) {
		while (*cp == ' ')
			cp++;
		msg = cp;
		while (*cp) {
			if (isupper(*cp))
				*cp = tolower(*cp);
			cp++;
		}
		printf("%s...", msg);
	}
	return (connected);
}

void
ven_disconnect(void)
{
	close(FD);
}

void
ven_abort(void)
{
	write(FD, "\03", 1);
	close(FD);
}

static void
echo(char *s)
{
	char c;

	while ((c = *s++) != NULL)
		switch (c) {
		case '$':
			read(FD, &c, 1);
			s++;
			break;

		case '#':
			c = *s++;
			write(FD, &c, 1);
			break;

		default:
			write(FD, &c, 1);
			read(FD, &c, 1);
		}
}

/*ARGSUSED*/
static void
sigALRM(int signo)
{
	printf("\07timeout waiting for reply\n");
	dialtimeout = 1;
	longjmp(timeoutbuf, 1);
}

static int
gobble(char match, char response[])
{
	char *cp = response;
	sig_t f;
	char c;

	f = signal(SIGALRM, sigALRM);
	dialtimeout = 0;
	do {
		if (setjmp(timeoutbuf)) {
			signal(SIGALRM, f);
			*cp = '\0';
			return (0);
		}
		alarm(number(value(DIALTIMEOUT)));
		read(FD, cp, 1);
		alarm(0);
		c = (*cp++ &= 0177);
#ifdef notdef
		if (boolean(value(VERBOSE)))
			putchar(c);
#endif
	} while (c != '\n' && c != match);
	signal(SIGALRM, SIG_DFL);
	*cp = '\0';
	return (c == match);
}

#define min(a,b)	((a)>(b)?(b):(a))
/*
 * This convoluted piece of code attempts to get
 * the ventel in sync.  If you don't have FIONREAD
 * there are gory ways to simulate this.
 */
static int
vensync(int fd)
{
	int already = 0, nread;
	char buf[60];

	/*
	 * Toggle DTR to force anyone off that might have left
	 * the modem connected, and insure a consistent state
	 * to start from.
	 *
	 * If you don't have the ioctl calls to diddle directly
	 * with DTR, you can always try setting the baud rate to 0.
	 */
	ioctl(FD, TIOCCDTR, 0);
	sleep(1);
	ioctl(FD, TIOCSDTR, 0);
	while (already < MAXRETRY) {
		/*
		 * After reseting the modem, send it two \r's to
		 * autobaud on. Make sure to delay between them
		 * so the modem can frame the incoming characters.
		 */
		write(fd, "\r", 1);
		delay(1,10);
		write(fd, "\r", 1);
		sleep(2);
		if (ioctl(fd, FIONREAD, (caddr_t)&nread) < 0) {
			perror("tip: ioctl");
			continue;
		}
		while (nread > 0) {
			read(fd, buf, min(nread, 60));
			if ((buf[nread - 1] & 0177) == '$')
				return (1);
			nread -= min(nread, 60);
		}
		sleep(1);
		already++;
	}
	return (0);
}
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.12 2006/03/17 19:17:13 moritz Exp $	*/
@


1.12
log
@ansification and correct prototypes. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.11 2006/03/17 14:43:06 moritz Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)ventel.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: ventel.c,v 1.11 2006/03/17 14:43:06 moritz Exp $";
#endif /* not lint */
@


1.11
log
@big prototype cleanup:

o make more functions static
o add all the prototypes to tip.h
o consistently declare functions in the cmd table

testing and ok dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.10 2003/06/03 02:56:18 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: ventel.c,v 1.10 2003/06/03 02:56:18 millert Exp $";
a49 1
static	void sigALRM();
d53 4
a56 3
static	int gobble(), vensync();
static	void echo();
void	ven_disconnect();
d69 1
a69 3
ven_dialer(num, acu)
	char *num;
	char *acu;
d136 1
a136 1
ven_disconnect()
a137 1

d142 1
a142 1
ven_abort()
a143 1

d149 1
a149 2
echo(s)
	char *s;
d171 1
d173 1
a173 1
sigALRM()
d181 1
a181 3
gobble(match, response)
	char match;
	char response[];
d216 1
a216 1
vensync(fd)
a256 1

@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.9 2003/04/04 21:50:00 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: ventel.c,v 1.9 2003/04/04 21:50:00 deraadt Exp $";
d51 1
a51 1
static	int timeout = 0;
d106 1
a106 1
	if (timeout) {
d112 1
a112 1
	if (timeout)
d114 1
a114 1
	if (connected || timeout || !boolean(value(VERBOSE)))
d180 1
a180 1
	timeout = 1;
d194 1
a194 1
	timeout = 0;
@


1.9
log
@some easy string fixes; tdeval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.8 2002/05/07 06:56:50 hugh Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: ventel.c,v 1.8 2002/05/07 06:56:50 hugh Exp $";
@


1.8
log
@Carefully applied -Wall fixups from <panda@@omatis.com>.
Also a little KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.7 2001/11/19 19:02:16 mpech Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: ventel.c,v 1.7 2001/11/19 19:02:16 mpech Exp $";
d111 1
a111 1
		(void)sprintf(line, "%ld second dial timeout",
@


1.7
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.6 2001/09/26 06:07:28 pvalchev Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ventel.c,v 1.6 2001/09/26 06:07:28 pvalchev Exp $";
d60 1
d124 1
a124 1
	for (cp = line; cp = strchr(cp, ' '); cp++)
d162 11
a172 1
	while (c = *s++) switch (c) {
d174 4
a177 14
	case '$':
		read(FD, &c, 1);
		s++;
		break;

	case '#':
		c = *s++;
		write(FD, &c, 1);
		break;

	default:
		write(FD, &c, 1);
		read(FD, &c, 1);
	}
@


1.6
log
@Wall cleanup w/ some fixes; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.5 1997/04/02 01:47:08 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ventel.c,v 1.5 1997/04/02 01:47:08 millert Exp $";
d68 1
a68 1
#define DELAY(n) do { register long N = (n); while (--N > 0); } while (0)
d73 1
a73 1
	register char *num;
d76 2
a77 2
	register char *cp;
	register int connected = 0;
d157 1
a157 1
	register char *s;
d189 1
a189 1
	register char match;
d192 1
a192 1
	register char *cp = response;
@


1.5
log
@Merge in good changes from NetBSD:
    Compile in strcict ansi (some day I'll get around to -Wall)
    use set* functions instead of modifying the lvalue
    Change a few sprintf() to snprintf() where it coudl possibly matter.
    Replace zzhack stuff with something saner to make tip work on alpha
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.4 1997/01/17 07:13:38 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ventel.c,v 1.4 1997/01/17 07:13:38 millert Exp $";
d68 2
a69 2
#define	DELAY(n)	{ register long N = (n); while (--N > 0); }
busyloop(n) { DELAY(n); }
d71 1
d110 1
a110 1
		(void)sprintf(line, "%d second dial timeout",
d140 1
d147 1
@


1.4
log
@r?index -> strr?chr
@
text
@d1 2
a2 2
/*	$OpenBSD: ventel.c,v 1.3 1996/06/26 05:40:57 deraadt Exp $	*/
/*	$NetBSD: ventel.c,v 1.4 1995/10/29 00:50:04 pk Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ventel.c,v 1.3 1996/06/26 05:40:57 deraadt Exp $";
d58 3
a77 2
	static int gobble(), vensync();
	static void echo();
d109 1
a109 1
		sprintf(line, "%d second dial timeout",
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: ventel.c,v 1.4 1995/10/29 00:50:04 pk Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: ventel.c,v 1.4 1995/10/29 00:50:04 pk Exp $";
d74 1
a74 1
	char *msg, *index(), line[80];
d118 1
a118 1
	cp = index(line, '\r');
d121 1
a121 1
	for (cp = line; cp = index(cp, ' '); cp++)
@


1.2
log
@from netbsd:
Convert to termios (from Scott Reynolds; PR#1621).
8-bit patches (from Matthieu Herrb; PR#1384).
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: ventel.c,v 1.4 1995/10/29 00:50:04 pk Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: ventel.c,v 1.3 1994/12/08 09:31:52 jtc Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: ventel.c,v 1.3 1994/12/08 09:31:52 jtc Exp $";
d48 2
d76 1
d91 3
a93 1
	ioctl(FD, TIOCHPCL, 0);
d104 1
a104 1
	ioctl(FD, TIOCFLUSH);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
