head	1.17;
access;
symbols
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.16
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.12
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.10
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.8
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.16
	OPENBSD_2_8:1.6.0.14
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2010.06.29.16.41.57;	author nicm;	state dead;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.45;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.17.19.17.13;	author moritz;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.17.14.43.06;	author moritz;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.02.56.18;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.04.21.50.00;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.07.06.56.50;	author hugh;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.55;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.24.18.38.58;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.26.06.07.28;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.04.23.35.59;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.09.01.23.24.28;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.04.02.01.47.06;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.17.07.13.34;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.40.52;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.12.23;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Bye-bye acu which even UUCP-using naddy agrees "was obsolete 20 years ago" :-).
@
text
@/*	$OpenBSD: courier.c,v 1.16 2009/10/27 23:59:45 deraadt Exp $	*/
/*	$NetBSD: courier.c,v 1.7 1997/02/11 09:24:16 mrg Exp $	*/

/*
 * Copyright (c) 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Routines for calling up on a Courier modem.
 * Derived from Hayes driver.
 */
#include "tip.h"
#include <sys/ioctl.h>
#include <stdio.h>

#define	MAXRETRY	5

static	int dialtimeout = 0;
static	int connected = 0;
static	jmp_buf timeoutbuf;

static void	sigALRM(int);
static int	cour_swallow(char *);
static int	cour_connect(void);
static int	coursync(void);
static void	cour_write(int, char *, int);
static void	cour_nap(void);
#ifdef DEBUG
static void	cour_verbose_read(void);
#endif

int
cour_dialer(char *num, char *acu)
{
	char *cp;
#ifdef ACULOG
	char line[80];
#endif
	struct termios cntrl;

	if (boolean(value(VERBOSE)))
		printf("Using \"%s\"\n", acu);

	tcgetattr(FD, &cntrl);
	cntrl.c_cflag |= HUPCL;
	tcsetattr(FD, TCSAFLUSH, &cntrl);
	/*
	 * Get in synch.
	 */
	if (!coursync()) {
badsynch:
		printf("can't synchronize with courier\n");
#ifdef ACULOG
		logent(value(HOST), num, "courier", "can't synch up");
#endif
		return (0);
	}
	cour_write(FD, "AT E0\r", 6);	/* turn off echoing */
	sleep(1);
#ifdef DEBUG
	if (boolean(value(VERBOSE)))
		cour_verbose_read();
#endif
	tcflush(FD, TCIOFLUSH);
	cour_write(FD, "AT C1 E0 H0 Q0 X6 V1\r", 21);
	if (!cour_swallow("\r\nOK\r\n"))
		goto badsynch;
	fflush(stdout);
	cour_write(FD, "AT D", 4);
	for (cp = num; *cp; cp++)
		if (*cp == '=')
			*cp = ',';
	cour_write(FD, num, strlen(num));
	cour_write(FD, "\r", 1);
	connected = cour_connect();
#ifdef ACULOG
	if (dialtimeout) {
		(void)snprintf(line, sizeof line, "%ld second dial timeout",
			number(value(DIALTIMEOUT)));
		logent(value(HOST), num, "cour", line);
	}
#endif
	if (dialtimeout)
		cour_disconnect();
	return (connected);
}

void
cour_disconnect(void)
{
	 /* first hang up the modem*/
	ioctl(FD, TIOCCDTR, 0);
	sleep(1);
	ioctl(FD, TIOCSDTR, 0);
	coursync();				/* reset */
	close(FD);
}

void
cour_abort(void)
{
	cour_write(FD, "\r", 1);	/* send anything to abort the call */
	cour_disconnect();
}

/*ARGSUSED*/
static void
sigALRM(int signo)
{
	printf("\07timeout waiting for reply\n");
	dialtimeout = 1;
	longjmp(timeoutbuf, 1);
}

static int
cour_swallow(char *match)
{
	sig_t f;
	char c;

	f = signal(SIGALRM, sigALRM);
	dialtimeout = 0;
	do {
		if (*match =='\0') {
			signal(SIGALRM, f);
			return (1);
		}
		if (setjmp(timeoutbuf)) {
			signal(SIGALRM, f);
			return (0);
		}
		alarm(number(value(DIALTIMEOUT)));
		read(FD, &c, 1);
		alarm(0);
		c &= 0177;
#ifdef DEBUG
		if (boolean(value(VERBOSE)))
			putchar(c);
#endif
	} while (c == *match++);
#ifdef DEBUG
	if (boolean(value(VERBOSE)))
		fflush(stdout);
#endif
	signal(SIGALRM, SIG_DFL);
	return (0);
}

struct baud_msg {
	char *msg;
	int baud;
} baud_msg[] = {
	{ "",		B300 },
	{ " 1200",	B1200 },
	{ " 2400",	B2400 },
	{ " 9600",	B9600 },
	{ " 9600/ARQ",	B9600 },
	{ 0,		0 },
};

static int
cour_connect(void)
{
	char c;
	int nc, nl, n;
	char dialer_buf[64];
	struct baud_msg *bm;
	sig_t f;

	if (cour_swallow("\r\n") == 0)
		return (0);
	f = signal(SIGALRM, sigALRM);
again:
	nc = 0; nl = sizeof(dialer_buf)-1;
	bzero(dialer_buf, sizeof(dialer_buf));
	dialtimeout = 0;
	for (nc = 0, nl = sizeof(dialer_buf)-1 ; nl > 0 ; nc++, nl--) {
		if (setjmp(timeoutbuf))
			break;
		alarm(number(value(DIALTIMEOUT)));
		n = read(FD, &c, 1);
		alarm(0);
		if (n <= 0)
			break;
		c &= 0x7f;
		if (c == '\r') {
			if (cour_swallow("\n") == 0)
				break;
			if (!dialer_buf[0])
				goto again;
			if (strcmp(dialer_buf, "RINGING") == 0 &&
			    boolean(value(VERBOSE))) {
#ifdef DEBUG
				printf("%s\r\n", dialer_buf);
#endif
				goto again;
			}
			if (strncmp(dialer_buf, "CONNECT",
				    sizeof("CONNECT")-1) != 0)
				break;
			for (bm = baud_msg ; bm->msg ; bm++)
				if (strcmp(bm->msg,
				    dialer_buf+sizeof("CONNECT")-1) == 0) {
					struct termios	cntrl;

					tcgetattr(FD, &cntrl);
					cfsetospeed(&cntrl, bm->baud);
					cfsetispeed(&cntrl, bm->baud);
					tcsetattr(FD, TCSAFLUSH, &cntrl);
					signal(SIGALRM, f);
#ifdef DEBUG
					if (boolean(value(VERBOSE)))
						printf("%s\r\n", dialer_buf);
#endif
					return (1);
				}
			break;
		}
		dialer_buf[nc] = c;
#ifdef notdef
		if (boolean(value(VERBOSE)))
			putchar(c);
#endif
	}
	printf("%s\r\n", dialer_buf);
	signal(SIGALRM, f);
	return (0);
}

/*
 * This convoluted piece of code attempts to get
 * the courier in sync.
 */
static int
coursync(void)
{
	int already = 0;
	int len;
	char buf[40];

	while (already++ < MAXRETRY) {
		tcflush(FD, TCIOFLUSH);
		cour_write(FD, "\rAT Z\r", 6);	/* reset modem */
		bzero(buf, sizeof(buf));
		sleep(1);
		ioctl(FD, FIONREAD, &len);
		if (len) {
			len = read(FD, buf, sizeof(buf));
#ifdef DEBUG
			buf[len] = '\0';
			printf("coursync: (\"%s\")\n\r", buf);
#endif
			if (strchr(buf, '0') || 
		   	   (strchr(buf, 'O') && strchr(buf, 'K')))
				return(1);
		}
		/*
		 * If not strapped for DTR control,
		 * try to get command mode.
		 */
		sleep(1);
		cour_write(FD, "+++", 3);
		sleep(1);
		/*
		 * Toggle DTR to force anyone off that might have left
		 * the modem connected.
		 */
		ioctl(FD, TIOCCDTR, 0);
		sleep(1);
		ioctl(FD, TIOCSDTR, 0);
	}
	cour_write(FD, "\rAT Z\r", 6);
	return (0);
}

static void
cour_write(int fd, char *cp, int n)
{
#ifdef notdef
	if (boolean(value(VERBOSE)))
		write(1, cp, n);
#endif
	tcdrain(fd);
	cour_nap();
	for ( ; n-- ; cp++) {
		write(fd, cp, 1);
		tcdrain(fd);
		cour_nap();
	}
}

#ifdef DEBUG
static void
cour_verbose_read(void)
{
	int n = 0;
	char buf[BUFSIZ];

	if (ioctl(FD, FIONREAD, &n) < 0)
		return;
	if (n <= 0)
		return;
	if (read(FD, buf, n) != n)
		return;
	write(1, buf, n);
}
#endif

/* Give the courier 50 milliseconds between characters */
static void
cour_nap(void)
{
	struct timespec ts;

	ts.tv_sec = 0;
	ts.tv_nsec = 50 * 1000000;

	nanosleep(&ts, NULL);
}
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.15 2006/03/17 19:17:13 moritz Exp $	*/
@


1.15
log
@ansification and correct prototypes. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.14 2006/03/17 14:43:06 moritz Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)courier.c	8.1 (Berkeley) 6/6/93";
#endif
static const char rcsid[] = "$OpenBSD: courier.c,v 1.14 2006/03/17 14:43:06 moritz Exp $";
#endif /* not lint */
@


1.14
log
@big prototype cleanup:

o make more functions static
o add all the prototypes to tip.h
o consistently declare functions in the cmd table

testing and ok dhill@@
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.13 2003/06/03 02:56:18 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: courier.c,v 1.13 2003/06/03 02:56:18 millert Exp $";
a49 2
static	void cour_write(int fd, char *cp, int n);
static	void sigALRM();
a52 2
static	int coursync(), cour_connect(), cour_swallow();
void	cour_nap();
d54 9
a62 1
void cour_disconnect(void);
d65 1
a65 3
cour_dialer(num, acu)
	char *num;
	char *acu;
d121 1
a121 1
cour_disconnect()
d132 1
a132 1
cour_abort()
d138 1
d140 1
a140 1
sigALRM()
d148 1
a148 2
cour_swallow(match)
	char *match;
d194 1
a194 1
cour_connect()
d267 1
a267 1
coursync()
d309 1
a309 4
cour_write(fd, cp, n)
int fd;
char *cp;
int n;
d325 2
a326 1
cour_verbose_read()
d342 2
a343 2
void
cour_nap()
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.12 2003/04/04 21:50:00 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: courier.c,v 1.12 2003/04/04 21:50:00 deraadt Exp $";
d52 1
a52 1
static	int timeout = 0;
d107 1
a107 1
	if (timeout) {
d113 1
a113 1
	if (timeout)
d140 1
a140 1
	timeout = 1;
d152 1
a152 1
	timeout = 0;
d206 1
a206 1
	timeout = 0;
@


1.12
log
@some easy string fixes; tdeval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.11 2002/05/07 06:56:50 hugh Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: courier.c,v 1.11 2002/05/07 06:56:50 hugh Exp $";
@


1.11
log
@Carefully applied -Wall fixups from <panda@@omatis.com>.
Also a little KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.10 2002/02/16 21:27:55 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: courier.c,v 1.10 2002/02/16 21:27:55 millert Exp $";
d112 1
a112 1
		(void)sprintf(line, "%ld second dial timeout",
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.9 2001/10/24 18:38:58 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: courier.c,v 1.9 2001/10/24 18:38:58 millert Exp $";
d54 1
d58 1
a58 1
static	jmp_buf timeoutbuf, intbuf;
d187 6
a192 6
	"",		B300,
	" 1200",	B1200,
	" 2400",	B2400,
	" 9600",	B9600,
	" 9600/ARQ",	B9600,
	0,		0,
@


1.9
log
@kill register
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.8 2001/09/26 06:07:28 pvalchev Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: courier.c,v 1.8 2001/09/26 06:07:28 pvalchev Exp $";
d61 1
a61 1
void cour_disconnect __P((void));
@


1.8
log
@Wall cleanup w/ some fixes; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.7 2001/09/04 23:35:59 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: courier.c,v 1.7 2001/09/04 23:35:59 millert Exp $";
d65 1
a65 1
	register char *num;
d68 1
a68 1
	register char *cp;
d149 1
a149 1
	register char *match;
@


1.7
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.6 1997/09/01 23:24:28 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: courier.c,v 1.6 1997/09/01 23:24:28 deraadt Exp $";
d111 1
a111 1
		(void)sprintf(line, "%d second dial timeout",
a257 1
error1:
a258 1
error:
d309 1
@


1.6
log
@Wall pass, and oflow fix from eivind@@bitbox.follo.net
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.5 1997/04/02 01:47:06 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: courier.c,v 1.5 1997/04/02 01:47:06 millert Exp $";
a59 1
static	void cour_napx();
d345 1
a345 11
/*
 * Code stolen from /usr/src/lib/libc/gen/sleep.c
 */
#define mask(s) (1<<((s)-1))
#define setvec(vec, a) \
        vec.sv_handler = a; vec.sv_mask = vec.sv_onstack = 0

static napms = 50; /* Give the courier 50 milliseconds between characters */

static int ringring;

d349 4
a352 23
	int omask;
        struct itimerval itv, oitv;
        register struct itimerval *itp = &itv;
        struct sigvec vec, ovec;

        timerclear(&itp->it_interval);
        timerclear(&itp->it_value);
        if (setitimer(ITIMER_REAL, itp, &oitv) < 0)
                return;
        setvec(ovec, SIG_DFL);
        omask = sigblock(mask(SIGALRM));
        itp->it_value.tv_sec = napms/1000;
	itp->it_value.tv_usec = ((napms%1000)*1000);
        setvec(vec, cour_napx);
        ringring = 0;
        (void) sigvec(SIGALRM, &vec, &ovec);
        (void) setitimer(ITIMER_REAL, itp, (struct itimerval *)0);
        while (!ringring)
                sigpause(omask &~ mask(SIGALRM));
        (void) sigvec(SIGALRM, &ovec, (struct sigvec *)0);
        (void) setitimer(ITIMER_REAL, &oitv, (struct itimerval *)0);
	(void) sigsetmask(omask);
}
d354 1
a354 4
static void
cour_napx()
{
        ringring = 1;
@


1.5
log
@Merge in good changes from NetBSD:
    Compile in strcict ansi (some day I'll get around to -Wall)
    use set* functions instead of modifying the lvalue
    Change a few sprintf() to snprintf() where it coudl possibly matter.
    Replace zzhack stuff with something saner to make tip work on alpha
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.4 1997/01/17 07:13:34 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: courier.c,v 1.4 1997/01/17 07:13:34 millert Exp $";
d59 1
d62 3
d122 1
d133 1
d150 2
a151 2
  register char *match;
  {
d357 1
@


1.4
log
@r?index -> strr?chr
@
text
@d1 2
a2 2
/*	$OpenBSD: courier.c,v 1.3 1996/06/26 05:40:52 deraadt Exp $	*/
/*	$NetBSD: courier.c,v 1.5 1995/10/29 00:49:50 pk Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: courier.c,v 1.3 1996/06/26 05:40:52 deraadt Exp $";
d58 2
a59 1
static	int coursync();
a69 1
	static int cour_connect(), cour_swallow();
d108 1
a108 1
		sprintf(line, "%d second dial timeout",
a352 2
	
        static void cour_napx();
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: courier.c,v 1.5 1995/10/29 00:49:50 pk Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: courier.c,v 1.5 1995/10/29 00:49:50 pk Exp $";
d283 2
a284 2
			if (index(buf, '0') || 
		   	   (index(buf, 'O') && index(buf, 'K')))
@


1.2
log
@from netbsd:
Convert to termios (from Scott Reynolds; PR#1621).
8-bit patches (from Matthieu Herrb; PR#1384).
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: courier.c,v 1.5 1995/10/29 00:49:50 pk Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: courier.c,v 1.4 1994/12/08 09:31:35 jtc Exp $	*/
d40 1
a40 1
static char rcsid[] = "$NetBSD: courier.c,v 1.4 1994/12/08 09:31:35 jtc Exp $";
d48 1
d67 1
d73 3
a75 1
	ioctl(FD, TIOCHPCL, 0);
d93 1
a93 1
	ioctl(FD, TIOCFLUSH, 0);	/* flush any clutter */
a192 1
	struct sgttyb sb;
d231 6
a236 9
					if (ioctl(FD, TIOCGETP, &sb) < 0) {
						perror("TIOCGETP");
						goto error;
					}
					sb.sg_ispeed = sb.sg_ospeed = bm->baud;
					if (ioctl(FD, TIOCSETP, &sb) < 0) {
						perror("TIOCSETP");
						goto error;
					}
d271 1
a271 1
		ioctl(FD, TIOCFLUSH, 0);	/* flush any clutter */
a309 1
	struct sgttyb sb;
d314 1
a314 2
	ioctl(fd, TIOCGETP, &sb);
	ioctl(fd, TIOCSETP, &sb);
d318 1
a318 2
		ioctl(fd, TIOCGETP, &sb);
		ioctl(fd, TIOCSETP, &sb);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
