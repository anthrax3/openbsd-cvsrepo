head	1.7;
access;
symbols
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	98.11.16.03.08.41;	author millert;	state dead;
branches;
next	1.6;

1.6
date	98.10.16.18.51.21;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.04.25.04.30.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.25.22.13.24;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.13.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.41.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ncurses tset plus hacks to make $TERMCAP still get set
@
text
@/*	$OpenBSD: term.c,v 1.6 1998/10/16 18:51:21 millert Exp $	*/
/*	$NetBSD: term.c,v 1.6 1994/12/07 05:08:12 jtc Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)term.c	8.1 (Berkeley) 6/9/93";
#endif
static char rcsid[] = "$OpenBSD: term.c,v 1.6 1998/10/16 18:51:21 millert Exp $";
#endif /* not lint */

#include <sys/types.h>
#include <errno.h>
#include <ttyent.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <err.h>
#include "extern.h"

char    tbuf[1024];      		/* Termcap entry. */

char	*askuser __P((char *));
char	*ttys __P((char *));

/*
 * Figure out what kind of terminal we're dealing with, and then read in
 * its termcap entry.
 */
char *
get_termcap_entry(userarg, tcapbufp)
	char *userarg, **tcapbufp;
{
	struct ttyent *t;
	int rval;
	char *p, *ttype, *ttypath;

	if (userarg) {
		ttype = userarg;
		goto found;
	}

	/* Try the environment. */
	if (ttype = getenv("TERM"))
		goto map;

	/* Try ttyname(3); check for dialup or other mapping. */
	if (ttypath = ttyname(STDERR_FILENO)) {
		if (p = strrchr(ttypath, '/'))
			++p;
		else
			p = ttypath;
		if ((t = getttynam(p))) {
			ttype = t->ty_type;
			goto map;
		}
	}

	/* If still undefined, use "unknown". */
	ttype = "unknown";

map:	ttype = mapped(ttype);

	/*
	 * If not a path, remove TERMCAP from the environment so we get a
	 * real entry from /etc/termcap.  This prevents us from being fooled
	 * by out of date stuff in the environment.
	 */
found:	if ((p = getenv("TERMCAP")) != NULL && *p != '/')
		unsetenv("TERMCAP");

	/*
	 * ttype now contains a pointer to the type of the terminal.
	 * If the first character is '?', ask the user.
	 */
	if (ttype[0] == '?')
		if (ttype[1] != '\0')
			ttype = askuser(ttype + 1);
		else
			ttype = askuser(NULL);

	/* Find the termcap entry.  If it doesn't exist, ask the user. */
	while ((rval = tgetent(tbuf, ttype)) == 0) {
		warnx("terminal type %s is unknown", ttype);
		ttype = askuser(NULL);
	}
	if (rval == -1)
		warnx("termcap: %s", strerror(errno ? errno : ENOENT));
	*tcapbufp = *tbuf ? tbuf : NULL;
	return (ttype);
}

/* Prompt the user for a terminal type. */
char *
askuser(dflt)
	char *dflt;
{
	static char answer[256];
	char *p;

	/* We can get recalled; if so, don't continue uselessly. */
	if (feof(stdin) || ferror(stdin))
		exit(1);
	for (;;) {
		if (dflt)
			(void)fprintf(stderr, "Terminal type? [%s] ", dflt);
		else
			(void)fprintf(stderr, "Terminal type? ");

		if (fgets(answer, sizeof(answer), stdin) == NULL) {
			if (dflt == NULL) {
				(void)putc('\n', stderr);
				exit(1);
			}
			return (dflt);
		}

		if (p = strchr(answer, '\n'))
			*p = '\0';
		if (answer[0])
			return (answer);
		if (dflt != NULL)
			return (dflt);
	}
}
@


1.6
log
@don't dump core when linked against ncurses
@
text
@d1 1
a1 1
/*	$OpenBSD: term.c,v 1.5 1998/04/25 04:30:38 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: term.c,v 1.5 1998/04/25 04:30:38 millert Exp $";
@


1.5
log
@fix some minor nits:
    o no need to flush stderr as it is not buffered
    o use putc to print a newline, not fprintf
    o set histchars to be null when we set noglob (and undo of course).
@
text
@d1 1
a1 1
/*	$OpenBSD: term.c,v 1.4 1997/07/25 22:13:24 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: term.c,v 1.4 1997/07/25 22:13:24 mickey Exp $";
d122 1
a122 1
	*tcapbufp = tbuf;
@


1.4
log
@user err(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: term.c,v 1.3 1997/01/17 07:13:44 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: term.c,v 1.3 1997/01/17 07:13:44 millert Exp $";
a141 1
		(void)fflush(stderr);
d145 1
a145 1
				(void)fprintf(stderr, "\n");
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: term.c,v 1.2 1996/06/26 05:41:57 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: term.c,v 1.2 1996/06/26 05:41:57 deraadt Exp $";
d51 1
d117 1
a117 2
		(void)fprintf(stderr,
		    "tset: terminal type %s is unknown\n", ttype);
d121 1
a121 1
		err("termcap: %s", strerror(errno ? errno : ENOENT));
d135 1
a135 2
	if (feof(stdin) || ferror(stdin)) {
		(void)fprintf(stderr, "\n");
a136 1
	}
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: term.c,v 1.6 1994/12/07 05:08:12 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: term.c,v 1.6 1994/12/07 05:08:12 jtc Exp $";
d81 1
a81 1
		if (p = rindex(ttypath, '/'))
d154 1
a154 1
		if (p = index(answer, '\n'))
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: term.c,v 1.6 1994/12/07 05:08:12 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
