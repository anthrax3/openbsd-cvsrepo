head	1.2;
access;
symbols
	OPENBSD_4_7:1.1.1.1.0.46
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.48
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.44
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.42
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.40
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.38
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.36
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.34
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.32
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.30
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.28
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.26
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.24
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.22
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.20
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.18
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.16
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.14
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.12
	OPENBSD_2_8:1.1.1.1.0.10
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	ian_1998-Sep-28:1.1.1.1
	ian:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.07.01.02.32.41;	author ian;	state dead;
branches;
next	1.1;

1.1
date	98.09.28.16.01.27;	author ian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.28.16.01.27;	author ian;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove a long-dead skeleton found under the floorboards.
"go for it" tedu@@, "kill it" deraadt@@
@
text
@#print
The problem is to produce a function
	bitct(x)
which examines the bits in x, returning a count of
the number of 1-bits.  There are various ways of doing
this job: here are two.
(1) a sane way.  Shift the word x right 16 times (you are
on UNIX) and check the rightmost bit each time, counting
the number of times it is '1'.
(2) a machine-independent (sort of) way.  The logical
bitwise AND of x and x-1 contains one fewer one bit than x itself.
Loop anding x and x-1 until you get zero.
Program either algorithm.  Compile and test it.  Leave it on
a file bitct.c and type "ready".
#once #create tzaqc.c
main()
{
	int x;
	x=23069;
	if (bitct(x) != goodct(x)) 
		return(1);
	x=0;
	if (bitct(x) != goodct(x)) 
		return(1);
	x=16384;
	if (bitct(x) != goodct(x)) 
		return(1);
	x = -1;
	if (bitct(x) != goodct(x)) 
		return(1);
	x= -200;
	if (bitct(x) != goodct(x)) 
		return(1);
	return(0);
}
goodct(x)
{
	int k, i;
	for(k=i=0; i<16; i++)
		{
		k =+ (x&1);
		x= x>>1;
		}
	return(k);
}
#user
cc tzaqc.c bitct.o
a.out
#succeed
/*  a possible solution */
bitct(x)
{
	int k, i;

	for(i=k=0; i<16; i++) {
		if (x&1)
			k++;
		x >>= 1;
	}
	return(k);
}
/* by the way, if you really care about
this problem a table lookup by whole bytes
is faster */
#log
#next
42.1a 10
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import BTL learn(1) lessons/C
@
text
@@
