head	1.2;
access;
symbols
	OPENBSD_4_7:1.1.1.1.0.46
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.48
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.44
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.42
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.40
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.38
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.36
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.34
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.32
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.30
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.28
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.26
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.24
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.22
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.20
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.18
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.16
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.14
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.12
	OPENBSD_2_8:1.1.1.1.0.10
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	ian_1998-Sep-28:1.1.1.1
	ian:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.07.01.02.32.42;	author ian;	state dead;
branches;
next	1.1;

1.1
date	98.09.28.16.01.49;	author ian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.28.16.01.49;	author ian;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove a long-dead skeleton found under the floorboards.
"go for it" tedu@@, "kill it" deraadt@@
@
text
@#print
You can also make equations that are ________indented a fixed amount from
the left margin, with the command
  .EQ I
Again, if there is an equation number, it follows the I.

Convert all the equations in "Example" to indented ones.
(Naturally I've changed it.)
You can do this with a single editor command.

Print "Example" with neqn and nroff -ms,
then type "ready".
#once #create Ref
.LP
     EQUIVALENCES OF ONE SORT AND ANOTHER
.LP
.EQ I (2.01)
bold x sup { n alpha } (t) ~->~ bold x sup alpha ( bold X ,t).
.EN
.sp
.EQ I (2.02)
sum from n F( bold x sup { n alpha } (t))
~->~ 1 over OMEGA INT F( bold x sup alpha ( bold X ,t))d bold \|X
.EN
.EQ I (2.03)
bold x ( bold X ,t) ~==~
sum from  { alpha =1} to  N
rho sup alpha  over rho sup 0 bold x sup alpha ( bold X ,t)
.EN
.EQ I (2.08)
sum from  {alpha =1} to  N
U sup { mu alpha } V sup { mu alpha } ~=~ delta sup { mu nu }
.EN
.EQ I (2.06)
bold y sup { T mu } ( bold X ,t) 
~==~ sum from  {alpha =1} to  N
U sup { mu alpha }
bold x sup alpha
( bold X ,t)
.EN
.EQ I
~ partial over {partial d} 
 ( epsilon sub 0 bold E sup T times  bold B ) sub i  
- m sub ij,\|j ~=~
-q sup D E sub i sup T
-( bold ~j sup D times bold B ) sub i
.EN
#once #create Example
.LP
     EQUIVALENCES OF ONE SORT AND ANOTHER
.LP
.EQ (2.01)
bold x sup { n alpha } (t) ~->~ bold x sup alpha ( bold X ,t).
.EN
.sp
.EQ (2.02)
sum from n F( bold x sup { n alpha } (t))
~->~ 1 over OMEGA INT F( bold x sup alpha ( bold X ,t))d bold \|X
.EN
.EQ (2.03)
bold x ( bold X ,t) ~==~
sum from  { alpha =1} to  N
rho sup alpha  over rho sup 0 bold x sup alpha ( bold X ,t)
.EN
.EQ (2.08)
sum from  {alpha =1} to  N
U sup { mu alpha } V sup { mu alpha } ~=~ delta sup { mu nu }
.EN
.EQ (2.06)
bold y sup { T mu } ( bold X ,t) 
~==~ sum from  {alpha =1} to  N
U sup { mu alpha }
bold x sup alpha
( bold X ,t)
.EN
.EQ
~ partial over {partial d} 
 ( epsilon sub 0 bold E sup T times  bold B ) sub i  
- m sub ij,\|j ~=~
-q sup D E sub i sup T
-( bold ~j sup D times bold B ) sub i
.EN
#user
#cmp Ref Example
#log
#next
2.1a 10
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import BTL learn(1) lessons/eqn
@
text
@@
