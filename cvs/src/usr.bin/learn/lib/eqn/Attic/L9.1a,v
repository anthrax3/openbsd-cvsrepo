head	1.2;
access;
symbols
	OPENBSD_4_7:1.1.1.1.0.46
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.48
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.44
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.42
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.40
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.38
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.36
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.34
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.32
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.30
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.28
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.26
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.24
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.22
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.20
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.18
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.16
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.14
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.12
	OPENBSD_2_8:1.1.1.1.0.10
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	ian_1998-Sep-28:1.1.1.1
	ian:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.07.01.02.32.43;	author ian;	state dead;
branches;
next	1.1;

1.1
date	98.09.28.16.01.52;	author ian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.28.16.01.52;	author ian;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove a long-dead skeleton found under the floorboards.
"go for it" tedu@@, "kill it" deraadt@@
@
text
@#once #create message
.ND
.tr %$
.EQ
delim $$
.EN
.LP
The next step is to learn about "diacriticals", which
is a big word for funny marks on symbols, like
a bar over something ($x bar$), or a tilde or hat on
something ($x tilde ,~a hat$), or perhaps a dot 
or dotdot ($T dot ,~U dotdot$), or even an
underlining like $abc under$.

These are all easy.  Each funny character
has a name, and all you have to do is put the name
after the thing you want the character on.
Thus
  x hat makes $x hat$
  y bar makes $y bar$
  T dot makes $T dot$
  x tilde makes $x tilde$ (notice that we spell tilde)
  u dotdot makes $u dotdot$ (looks ugly on a terminal)
.br
and
  i under makes $i under$.

Except for "bar" and "under", these are almost always
attached to just a single letter.
If you want to put a bar over something longer, like
${2 pi +1} bar$, simply enclose the thing in braces:

  {2 pi +1} bar

Modify "Example" to produce output that looks like this,
then type "ready".
.pl 1
#once #create Ref
.EQ
delim $$
.EN
.LP
Let $x bar$, $y bar$, and $z bar$ be the components of $pi bar$.
Let ${alpha +1} bar$ be the mean value of $alpha hat$.
.pl 1
#once #create Example
.EQ
delim $$
.EN
.LP
Let x bar, y bar, and z bar be the components of pi bar.
Let alpha +1 bar be the mean value of alpha hat.
.pl 1
#
#once neqn Ref | nroff >X1 &
#once neqn message Ref | nroff -T$term %s/tinyms -
#user
neqn Example | nroff >X2
#cmp X1 X2
#fail
Don't forget to set delimiters at the beginning,
and get the spaces right around the dollar signs.
#log
#next
9.1b 10
9.2a 5
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import BTL learn(1) lessons/eqn
@
text
@@
