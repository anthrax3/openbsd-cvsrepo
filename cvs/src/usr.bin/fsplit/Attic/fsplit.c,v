head	1.21;
access;
symbols
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.6
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.4
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.6
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.2
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.18
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.16
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.14
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2014.07.11.08.07.14;	author tedu;	state dead;
branches;
next	1.20;
commitid	jHPkC6785xysFV6E;

1.20
date	2013.11.26.13.18.55;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2012.03.04.04.05.15;	author fgsch;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.38;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2008.11.01.22.39.04;	author sobrado;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.02.15.19.32;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.26.21.42.11;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.25.21.19.19;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.10.22.20.46;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.02.56.08;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.05.17.18.46;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.25.00.04.09;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.46;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.30.16.00.13;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.30.02.28.37;	author espie;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	99.12.06.00.34.26;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.11.16.06.21.58;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.07.10.21.44.51;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.33.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.16;	author deraadt;	state Exp;
branches;
next	;

1.6.2.1
date	2000.10.06.21.16.12;	author jason;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Marion, don't look at it. Shut your eyes, Marion.
Don't look at it, no matter what happens!
@
text
@/*	$OpenBSD: fsplit.c,v 1.20 2013/11/26 13:18:55 deraadt Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Asa Romberger and Jerry Berkman.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/fcntl.h>
#include <err.h>

void badparms(void);
void get_name(char *, int);
int lname(char *, size_t);
int get_line(void);
int lend(void);
int scan_name(char *, char *);
int saveit(char *);

/*
 *	usage:		fsplit [-e efile] ... [file]
 *
 *	split single file containing source for several fortran programs
 *		and/or subprograms into files each containing one
 *		subprogram unit.
 *	each separate file will be named using the corresponding subroutine,
 *		function, block data or program name if one is found; otherwise
 *		the name will be of the form mainNNN.f or blkdtaNNN.f .
 *		If a file of that name exists, it is saved in a name of the
 *		form zzz000.f .
 *	If -e option is used, then only those subprograms named in the -e
 *		option are split off; e.g.:
 *			fsplit -esub1 -e sub2 prog.f
 *		isolates sub1 and sub2 in sub1.f and sub2.f.  The space
 *		after -e is optional.
 *
 *	Modified Feb., 1983 by Jerry Berkman, Computing Services, U.C. Berkeley.
 *		- added comments
 *		- more function types: double complex, character*(*), etc.
 *		- fixed minor bugs
 *		- instead of all unnamed going into zNNN.f, put mains in
 *		  mainNNN.f, block datas in blkdtaNNN.f, dups in zzzNNN.f .
 */

#define BSZ 512
char    buf[BSZ];
FILE   *ifp;
char    x[] = "zzz000.f", mainp[] = "main000.f", blkp[] = "blkdta000.f";
char   *look(char *, char *), *skiplab(char *), *functs(char *);

#define TRUE 1
#define FALSE 0
int     extr = FALSE, extrknt = -1;
int maxextrknt;

int *extrfnd;
char **extrnames;
struct stat sbuf;

#define trim(p)	while (*p == ' ' || *p == '\t') p++

int
main(int argc, char *argv[])
{
	FILE *ofp;	/* output file */
	int rv;	/* 1 if got card in output file, 0 otherwise */
	char *ptr;
	int     nflag,		/* 1 if got name of subprog., 0 otherwise */
	        retval, i;
	/* must be as large as max(sizeof(x), sizeof(mainp), sizeof(blockp)) */
	char    name[20];	

	maxextrknt = 100;
	extrnames = calloc(sizeof(char *), maxextrknt);
	if (extrnames == NULL)
		errx(1, "out of memory");
	/* scan -e options */
	while (argc > 1 && argv[1][0] == '-' && argv[1][1] == 'e') {
		extr = TRUE;
		ptr = argv[1] + 2;
		if (!*ptr) {
			argc--;
			argv++;
			if (argc <= 1)
				badparms();
			ptr = argv[1];
		}
		extrknt = extrknt + 1;
		if (extrknt >= maxextrknt) {
			extrnames = realloc(extrnames, 
			    sizeof(char *) * maxextrknt);
			if (extrnames == NULL)
				errx(1, "too many -e arguments");
		}
		if ((extrnames[extrknt] = strdup(ptr)) == NULL)
			errx(1, "out of memory");
		argc--;
		argv++;
	}

	extrfnd = calloc(extrknt+1, sizeof(int));
	if (extrfnd == NULL)
		errx(1, "out of memory");

	if (argc > 2)
		badparms();
	else
		if (argc == 2) {
			if ((ifp = fopen(argv[1], "r")) == NULL)
				err(1, "%s", argv[1]);
		} else
			ifp = stdin;
	for (;;) {
		int fd;

		/* look for a temp file that doesn't correspond to an existing
		 * file */
		get_name(x, 3);

		fd = open(x, O_CREAT|O_EXCL|O_RDWR, 0666);
		if (fd == -1)
			err(1, "%s", x);
		ofp = fdopen(fd, "w");
		if (ofp == NULL) {
			close(fd);
			unlink(x);
			err(1, "%s", x);
		}
		nflag = 0;
		rv = 0;
		while (get_line() > 0) {
			rv = 1;
			fprintf(ofp, "%s", buf);
			if (lend())	/* look for an 'end' statement */
				break;
			if (nflag == 0)	/* if no name yet, try and find one */
				nflag = lname(name, sizeof name);
		}
		fclose(ofp);
		if (rv == 0) {	/* no lines in file, forget the file */
			unlink(x);
			retval = 0;
			for (i = 0; i <= extrknt; i++)
				if (!extrfnd[i]) {
					retval = 1;
					warnx("%s not found", extrnames[i]);
				}
			exit(retval);
		}
		if (nflag) {	/* rename the file */
			if (saveit(name)) {
				if (stat(name, &sbuf) < 0) {
					link(x, name);
					unlink(x);
					printf("%s\n", name);
					continue;
				} else
					if (strcmp(name, x) == 0) {
						printf("%s\n", x);
						continue;
					}
				printf("%s already exists, put in %s\n", name, x);
				continue;
			} else
				unlink(x);
			continue;
		}
		if (!extr)
			printf("%s\n", x);
		else
			unlink(x);
	}
}

void
badparms(void)
{
	fprintf(stderr, "usage: fsplit [-e efile] ... [file]\n");
	exit(1);
}

int
saveit(char *name)
{
	int     i;
	size_t 	n;

	if (!extr)
		return (1);

	n = strlen(name);
	if (n < 2)
		return (0);

	for (i = 0; i <= extrknt; i++)
		if (strncmp(name, extrnames[i], n - 2) == 0 &&
		extrnames[i][n-2] == '\0') {
			extrfnd[i] = TRUE;
			return (1);
		}
	return (0);
}

void
get_name(char *name, int letters)
{
	char *ptr;

	while (stat(name, &sbuf) >= 0) {
		for (ptr = name + letters + 2; ptr >= name + letters; ptr--) {
			(*ptr)++;
			if (*ptr <= '9')
				break;
			*ptr = '0';
		}
		if (ptr < name + letters)
			errx(1, "ran out of file names");
	}
}

int
get_line(void)
{
	int c;
	char *ptr;

	for (ptr = buf; ptr < &buf[BSZ];) {
		c = getc(ifp);
		*ptr = c;
		if (feof(ifp))
			return (-1);
		if (*ptr++ == '\n') {
			*ptr = 0;
			return (1);
		}
	}
	while (getc(ifp) != '\n' && feof(ifp) == 0);
	warnx("line truncated to %d characters", BSZ);
	return (1);
}

/* return 1 for 'end' alone on card (up to col. 72),  0 otherwise */
int
lend(void)
{
	char *p;

	if ((p = skiplab(buf)) == 0)
		return (0);
	trim(p);
	if (*p != 'e' && *p != 'E')
		return (0);
	p++;
	trim(p);
	if (*p != 'n' && *p != 'N')
		return (0);
	p++;
	trim(p);
	if (*p != 'd' && *p != 'D')
		return (0);
	p++;
	trim(p);
	if (p - buf >= 72 || *p == '\n')
		return (1);
	return (0);
}

/* check for keywords for subprograms
 * return 0 if comment card, 1 if found
 * name and put in arg string. invent name for unnamed
 * block datas and main programs.
 */
int
lname(char *s, size_t len)
{
#define LINESIZE 80
	char *ptr, *p;
	char    line[LINESIZE], *iptr = line;

	/* first check for comment cards */
	if (buf[0] == 'c' || buf[0] == 'C' || buf[0] == '*')
		return (0);
	ptr = buf;
	while (*ptr == ' ' || *ptr == '\t')
		ptr++;
	if (*ptr == '\n')
		return (0);


	ptr = skiplab(buf);
	if (ptr == 0)
		return (0);


	/* copy to buffer and converting to lower case */
	p = ptr;
	while (*p && p <= &buf[71]) {
		*iptr = tolower((unsigned char)*p);
		iptr++;
		p++;
	}
	*iptr = '\n';

	if ((ptr = look(line, "subroutine")) != 0 ||
	    (ptr = look(line, "function")) != 0 ||
	    (ptr = functs(line)) != 0) {
		if (scan_name(s, ptr))
			return (1);
		strlcpy(s, x, len);
	} else if ((ptr = look(line, "program")) != 0) {
		if (scan_name(s, ptr))
			return (1);
		get_name(mainp, 4);
		strlcpy(s, mainp, len);
	} else if ((ptr = look(line, "blockdata")) != 0) {
		if (scan_name(s, ptr))
			return (1);
		get_name(blkp, 6);
		strlcpy(s, blkp, len);
	} else if ((ptr = functs(line)) != 0) {
		if (scan_name(s, ptr))
			return (1);
		strlcpy(s, x, len);
	} else {
		get_name(mainp, 4);
		strlcpy(s, mainp, len);
	}
	return (1);
}

int
scan_name(char *s, char *ptr)
{
	char   *sptr;

	/* scan off the name */
	trim(ptr);
	sptr = s;
	while (*ptr != '(' && *ptr != '\n') {
		if (*ptr != ' ' && *ptr != '\t')
			*sptr++ = *ptr;
		ptr++;
	}

	if (sptr == s)
		return (0);

	*sptr++ = '.';
	*sptr++ = 'f';
	*sptr++ = 0;
	return (1);
}

char   *
functs(char *p)
{
	char *ptr;

/*      look for typed functions such as: real*8 function,
                character*16 function, character*(*) function  */

	if ((ptr = look(p, "character")) != 0 ||
	    (ptr = look(p, "logical")) != 0 ||
	    (ptr = look(p, "real")) != 0 ||
	    (ptr = look(p, "integer")) != 0 ||
	    (ptr = look(p, "doubleprecision")) != 0 ||
	    (ptr = look(p, "complex")) != 0 ||
	    (ptr = look(p, "doublecomplex")) != 0) {
		while (*ptr == ' ' || *ptr == '\t' || *ptr == '*'
		    || (*ptr >= '0' && *ptr <= '9')
		    || *ptr == '(' || *ptr == ')')
			ptr++;
		ptr = look(ptr, "function");
		return (ptr);
	} else
		return (0);
}

/*
 * if first 6 col. blank, return ptr to col. 7,
 * if blanks and then tab, return ptr after tab,
 * else return 0 (labelled statement, comment or continuation
 */
char   *
skiplab(char *p)
{
	char *ptr;

	for (ptr = p; ptr < &p[6]; ptr++) {
		if (*ptr == ' ')
			continue;
		if (*ptr == '\t') {
			ptr++;
			break;
		}
		return (0);
	}
	return (ptr);
}

/*
 * return 0 if m doesn't match initial part of s;
 * otherwise return ptr to next char after m in s
 */
char   *
look(char *s, char *m)
{
	char *sp, *mp;

	sp = s;
	mp = m;
	while (*mp) {
		trim(sp);
		if (*sp++ != *mp++)
			return (0);
	}
	return (sp);
}
@


1.20
log
@unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.19 2012/03/04 04:05:15 fgsch Exp $	*/
@


1.19
log
@In preparation for getline and getdelim additions to libc, rename getline()
occurrences to get_line().
Based on a diff from Jan Klemkow <j-dot-klemkow-at-wemelug-dot-de> to tech.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.18 2009/10/27 23:59:38 deraadt Exp $	*/
d331 1
a331 1
		*iptr = tolower(*p);
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.17 2008/11/01 22:39:04 sobrado Exp $	*/
d48 1
a48 1
int getline(void);
d164 1
a164 1
		while (getline() > 0) {
d255 1
a255 1
getline(void)
@


1.17
log
@fix the synopsis of the command; spacing.

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.16 2007/09/02 15:19:32 deraadt Exp $	*/
a33 11

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif				/* not lint */

#ifndef lint
/*static char sccsid[] = "from: @@(#)fsplit.c	8.1 (Berkeley) 6/6/93";*/
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.16 2007/09/02 15:19:32 deraadt Exp $";
#endif				/* not lint */
@


1.16
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.15 2003/06/26 21:42:11 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.15 2003/06/26 21:42:11 deraadt Exp $";
d222 1
a222 1
	fprintf(stderr, "usage:  fsplit [-e efile] ... [file]\n");
@


1.15
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.14 2003/06/25 21:19:19 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.14 2003/06/25 21:19:19 deraadt Exp $";
d118 1
a118 1
	extrnames = malloc(sizeof(char *) * maxextrknt);
@


1.14
log
@protos
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.13 2003/06/10 22:20:46 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.13 2003/06/10 22:20:46 deraadt Exp $";
d56 1
a56 1
void badparms();
@


1.13
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.12 2003/06/03 02:56:08 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.12 2003/06/03 02:56:08 millert Exp $";
d93 1
a93 1
char   *look(), *skiplab(), *functs();
d285 1
d311 6
a316 4
/*		check for keywords for subprograms
		return 0 if comment card, 1 if found
		name and put in arg string. invent name for unnamed
		block datas and main programs.		*/
d422 6
a427 3
/* 	if first 6 col. blank, return ptr to col. 7,
	if blanks and then tab, return ptr after tab,
	else return 0 (labelled statement, comment or continuation */
d444 5
a448 2
/* 	return 0 if m doesn't match initial part of s;
	otherwise return ptr to next char after m in s */
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.11 2003/04/05 17:18:46 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.11 2003/04/05 17:18:46 deraadt Exp $";
d107 1
a107 2
main(argc, argv)
	char  **argv;
d220 1
a220 1
badparms()
d227 1
a227 2
saveit(name)
	char   *name;
d249 1
a249 3
get_name(name, letters)
	char   *name;
	int     letters;
d266 1
a266 1
getline()
d287 1
a287 1
lend()
d315 1
a315 3
lname(s, len)
	char   *s;
	size_t len;
d373 1
a373 2
scan_name(s, ptr)
	char   *s, *ptr;
d396 1
a396 2
functs(p)
	char   *p;
d423 1
a423 2
skiplab(p)
	char   *p;
d441 1
a441 2
look(s, m)
	char   *s, *m;
@


1.11
log
@string fixes; ok henning miod
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.10 2002/02/25 00:04:09 deraadt Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.10 2002/02/25 00:04:09 deraadt Exp $";
@


1.10
log
@getchar returns an int
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.9 2002/02/16 21:27:46 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.9 2002/02/16 21:27:46 millert Exp $";
d62 1
a62 1
int lname(char *);
d186 1
a186 1
				nflag = lname(name);
d323 1
a323 1
lname(s)
d325 1
d360 19
a378 22
		strcpy(s, x);
	} else
		if ((ptr = look(line, "program")) != 0) {
			if (scan_name(s, ptr))
				return (1);
			get_name(mainp, 4);
			strcpy(s, mainp);
		} else
			if ((ptr = look(line, "blockdata")) != 0) {
				if (scan_name(s, ptr))
					return (1);
				get_name(blkp, 6);
				strcpy(s, blkp);
			} else
				if ((ptr = functs(line)) != 0) {
					if (scan_name(s, ptr))
						return (1);
					strcpy(s, x);
				} else {
					get_name(mainp, 4);
					strcpy(s, mainp);
				}
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.8 2001/11/19 19:02:14 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.8 2001/11/19 19:02:14 mpech Exp $";
d276 1
d280 2
a281 1
		*ptr = getc(ifp);
@


1.8
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.7 2000/06/30 16:00:13 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.7 2000/06/30 16:00:13 millert Exp $";
d60 7
a66 7
void badparms __P(());
void get_name __P((char *, int));
int lname __P((char *));
int getline __P((void));
int lend __P((void));
int scan_name __P((char *, char *));
int saveit __P((char *));
@


1.7
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.6 2000/01/30 02:28:37 espie Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.6 2000/01/30 02:28:37 espie Exp $";
d114 3
a116 3
	register FILE *ofp;	/* output file */
	register int rv;	/* 1 if got card in output file, 0 otherwise */
	register char *ptr;
d259 1
a259 1
	register char *ptr;
d276 1
a276 1
	register char *ptr;
d295 1
a295 1
	register char *p;
d325 1
a325 1
	register char *ptr, *p;
d410 1
a410 1
	register char *ptr;
d438 1
a438 1
	register char *ptr;
d457 1
a457 1
	register char *sp, *mp;
@


1.6
log
@Clean up a few issues with fsplit, including security of temp files.

Thanks to Matthieu Herb, Paul Janzen, and Ted Scharlemann.
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.5 1999/12/06 00:34:26 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.5 1999/12/06 00:34:26 deraadt Exp $";
d171 1
a171 1
			err(1, x);
d176 1
a176 1
			err(1, x);
@


1.6.2.1
log
@Pull in patch from current (even more to come):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.7 2000/06/30 16:00:13 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.7 2000/06/30 16:00:13 millert Exp $";
d171 1
a171 1
			err(1, "%s", x);
d176 1
a176 1
			err(1, "%s", x);
@


1.5
log
@KNF.  overflows exist, and are not easy to fix
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.4 1998/11/16 06:21:58 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.4 1998/11/16 06:21:58 deraadt Exp $";
d54 1
d57 1
d101 5
a105 2
int     extr = FALSE, extrknt = -1, extrfnd[100];
char    extrbuf[1000], *extrnames[100];
d119 2
a120 1
	char    name[20], *extrptr = extrbuf;
d122 4
d138 8
a145 5
		extrnames[extrknt] = extrptr;
		extrfnd[extrknt] = FALSE;
		while (*ptr)
			*extrptr++ = *ptr++;
		*extrptr++ = 0;
d150 4
d159 1
a159 1
				err(1, argv[1]);
d163 2
d168 10
a177 1
		ofp = fopen(x, "w");
d227 2
a228 1
	err(1, "usage:  fsplit [-e efile] ... [file]");
d236 1
a236 1
	char    fname[50], *fptr = fname;
d240 5
a244 4
	while (*name)
		*fptr++ = *name++;
	*--fptr = 0;
	*--fptr = 0;
d246 2
a247 1
		if (strcmp(fname, extrnames[i]) == 0) {
d346 1
a346 1
		*iptr = isupper(*p) ? tolower(*p) : *p;
@


1.4
log
@more -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.3 1998/07/10 21:44:51 mickey Exp $	*/
d43 1
a43 1
#endif /* not lint */
d47 2
a48 2
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.3 1998/07/10 21:44:51 mickey Exp $";
#endif /* not lint */
d58 7
a64 7
void 	badparms __P(());
void	get_name __P((char *, int));
int	lname __P((char *));
int	getline __P((void));
int	lend __P((void));
int	scan_name __P((char *, char *));
int	saveit __P((char *));
d80 1
a80 1
 *		isolates sub1 and sub2 in sub1.f and sub2.f.  The space 
d92 4
a95 6
char buf[BSZ];
FILE *ifp;
char 	x[]="zzz000.f",
	mainp[]="main000.f",
	blkp[]="blkdta000.f";
char *look(), *skiplab(), *functs();
d99 2
a100 5
int	extr = FALSE,
	extrknt = -1,
	extrfnd[100];
char	extrbuf[1000],
	*extrnames[100];
d107 1
a107 1
char **argv;
d112 3
a114 5
	int nflag,		/* 1 if got name of subprog., 0 otherwise */
		retval,
		i;
	char name[20],
		*extrptr = extrbuf;
d116 2
a117 2
	/*  scan -e options */
	while ( argc > 1  && argv[1][0] == '-' && argv[1][1] == 'e') {
d120 1
a120 1
		if(!*ptr) {
d123 2
a124 1
			if(argc <= 1) badparms();
d130 2
a131 1
		while(*ptr) *extrptr++ = *ptr++;
a138 4
	else if (argc == 2) {
		if ((ifp = fopen(argv[1], "r")) == NULL)
			err(1, argv[1]);
	}
d140 46
a185 30
		ifp = stdin;
    for(;;) {
	/* look for a temp file that doesn't correspond to an existing file */
	get_name(x, 3);
	ofp = fopen(x, "w");
	nflag = 0;
	rv = 0;
	while (getline() > 0) {
		rv = 1;
		fprintf(ofp, "%s", buf);
		if (lend())		/* look for an 'end' statement */
			break;
		if (nflag == 0)		/* if no name yet, try and find one */
			nflag = lname(name);
	}
	fclose(ofp);
	if (rv == 0) {			/* no lines in file, forget the file */
		unlink(x);
		retval = 0;
		for ( i = 0; i <= extrknt; i++ )
			if(!extrfnd[i]) {
				retval = 1;
				warnx("%s not found", extrnames[i]);
			}
		exit( retval );
	}
	if (nflag) {			/* rename the file */
		if(saveit(name)) {
			if (stat(name, &sbuf) < 0 ) {
				link(x, name);
a186 7
				printf("%s\n", name);
				continue;
			} else if (strcmp(name, x) == 0) {
				printf("%s\n", x);
				continue;
			}
			printf("%s already exists, put in %s\n", name, x);
d188 4
a191 1
		} else
a192 1
			continue;
a193 5
	if(!extr)
		printf("%s\n", x);
	else
		unlink(x);
    }
d204 1
a204 1
char *name;
d206 2
a207 3
	int i;
	char	fname[50],
		*fptr = fname;
d209 4
a212 2
	if(!extr) return(1);
	while(*name) *fptr++ = *name++;
d215 2
a216 2
	for ( i=0 ; i<=extrknt; i++ ) 
		if( strcmp(fname, extrnames[i]) == 0 ) {
d218 1
a218 1
			return(1);
d220 1
a220 1
	return(0);
d225 2
a226 2
char *name;
int letters;
d237 1
a237 1
		if(ptr < name + letters)
d247 1
a247 1
	for (ptr = buf; ptr < &buf[BSZ]; ) {
d256 1
a256 1
	while (getc(ifp) != '\n' && feof(ifp) == 0) ;
a259 1

d269 2
a270 1
	if (*p != 'e' && *p != 'E') return(0);
d273 2
a274 1
	if (*p != 'n' && *p != 'N') return(0);
d277 2
a278 1
	if (*p != 'd' && *p != 'D') return(0);
d285 1
a285 2

/*		check for keywords for subprograms	
d291 1
a291 1
char *s;
d293 1
a293 1
#	define LINESIZE 80 
d295 1
a295 1
	char	line[LINESIZE], *iptr = line;
d298 2
a299 1
	if(buf[0] == 'c' || buf[0] == 'C' || buf[0] == '*') return(0);
d301 4
a304 2
	while (*ptr == ' ' || *ptr == '\t') ptr++;
	if(*ptr == '\n') return(0);
d312 1
a312 1
	/*  copy to buffer and converting to lower case */
d314 4
a317 4
	while (*p && p <= &buf[71] ) {
	   *iptr = isupper(*p) ? tolower(*p) : *p;
	   iptr++;
	   p++;
d324 25
a348 18
		if(scan_name(s, ptr)) return(1);
		strcpy( s, x);
	} else if((ptr = look(line, "program")) != 0) {
		if(scan_name(s, ptr)) return(1);
		get_name( mainp, 4);
		strcpy( s, mainp);
	} else if((ptr = look(line, "blockdata")) != 0) {
		if(scan_name(s, ptr)) return(1);
		get_name( blkp, 6);
		strcpy( s, blkp);
	} else if((ptr = functs(line)) != 0) {
		if(scan_name(s, ptr)) return(1);
		strcpy( s, x);
	} else {
		get_name( mainp, 4);
		strcpy( s, mainp);
	}
	return(1);
d353 1
a353 1
char *s, *ptr;
d355 1
a355 1
	char *sptr;
d366 2
a367 1
	if (sptr == s) return(0);
d372 1
a372 1
	return(1);
d375 3
a377 2
char *functs(p)
char *p;
d379 1
a379 1
        register char *ptr;
d384 15
a398 15
        if((ptr = look(p,"character")) != 0 ||
           (ptr = look(p,"logical")) != 0 ||
           (ptr = look(p,"real")) != 0 ||
           (ptr = look(p,"integer")) != 0 ||
           (ptr = look(p,"doubleprecision")) != 0 ||
           (ptr = look(p,"complex")) != 0 ||
           (ptr = look(p,"doublecomplex")) != 0 ) {
                while ( *ptr == ' ' || *ptr == '\t' || *ptr == '*'
			|| (*ptr >= '0' && *ptr <= '9')
			|| *ptr == '(' || *ptr == ')') ptr++;
		ptr = look(ptr,"function");
		return(ptr);
	}
        else
                return(0);
a399 1

d403 3
a405 2
char *skiplab(p)
char *p;
a419 1

d422 3
a424 2
char *look(s, m)
char *s, *m;
d428 2
a429 1
	sp = s; mp = m;
@


1.3
log
@err/warn
@
text
@d1 1
a1 1
/*	$OpenBSD: fsplit.c,v 1.2 1996/06/26 05:33:30 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.2 1996/06/26 05:33:30 deraadt Exp $";
d52 1
d58 8
d115 1
a115 1
	register rv;		/* 1 if got card in output file, 0 otherwise */
d199 1
d205 1
d225 1
d244 1
d264 1
d290 1
d295 1
a295 1
	register char *ptr, *p, *sptr;
d342 1
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: fsplit.c,v 1.4 1995/09/28 05:15:07 perry Exp $";
d55 1
d101 1
d136 2
a137 4
		if ((ifp = fopen(argv[1], "r")) == NULL) {
			fprintf(stderr, "fsplit: cannot open %s\n", argv[1]);
			exit(1);
		}
d162 1
a162 2
				fprintf( stderr, "fsplit: %s not found\n",
					extrnames[i]);
d192 1
a192 2
	fprintf(stderr, "fsplit: usage:  fsplit [-e efile] ... [file] \n");
	exit(1);
d227 2
a228 4
		if(ptr < name + letters) {
			fprintf( stderr, "fsplit: ran out of file names\n");
			exit(1);
		}
d246 1
a246 1
	fprintf(stderr, "line truncated to %d characters\n", BSZ);
@


1.1
log
@Initial revision
@
text
@d1 2
d47 1
a47 1
static char rcsid[] = "$NetBSD: fsplit.c,v 1.4 1995/09/28 05:15:07 perry Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
