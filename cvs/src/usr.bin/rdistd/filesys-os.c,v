head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.28
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.24
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.22
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.20
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.18
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.16
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.6.0.18
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.16
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.14
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.12
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2015.01.20.09.00.16;	author guenther;	state Exp;
branches;
next	1.12;
commitid	0Y0sKBv6c3xIKoav;

1.12
date	2015.01.16.06.40.11;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	Uu5nFG3wCl0LACBb;

1.11
date	2014.07.05.10.21.24;	author guenther;	state Exp;
branches;
next	1.10;
commitid	r8EYE1OfDRw3QDRj;

1.10
date	2009.10.27.23.59.42;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.02.56.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.14.01.34.35;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.05.20.31.58;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.02.04.23.18.57;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.06.26.21.20.47;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.06.17.20.37.53;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.38.21;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.13.22.23.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.02.03.12.12.55;	author dm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Split out from rdist/defs.h the client-only and server-only bits into
 rdist/client.h and rdistd/server.h
Only put #includes in .h files that are necessary for the .h to be used;
 all other #includes go in the .c files
Move all extern variable declarations to the .h files, renaming local
 variables to avoid shadowing
Replace me_type member of mntent_t with an "is NFS?" flag bit
@
text
@/*	$OpenBSD: filesys-os.c,v 1.12 2015/01/16 06:40:11 deraadt Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/mount.h>
#include <stdlib.h>
#include <string.h>

#include "server.h"

/*
 * OS specific file system routines
 */

static struct statfs   *mnt = NULL;
static int 		entries_left;

/*
 * getfsstat() version of get mount info routines.
 */
int
setmountent(void)
{
	long size;

	size = getfsstat(NULL, 0, MNT_WAIT);
	if (size == -1)
		return (0);

	free(mnt);
	size *= sizeof(struct statfs);
	mnt = xmalloc(size);

	entries_left = getfsstat(mnt, size, MNT_WAIT);
	if (entries_left == -1)
		return (0);

	return (1);
}

/*
 * getfsstat() version of getmountent()
 */
mntent_t *
getmountent(void)
{
	static mntent_t mntstruct;
	static char remote_dev[HOST_NAME_MAX+1 + PATH_MAX + 1];

	if (!entries_left)
		return (NULL);

	memset(&mntstruct, 0, sizeof(mntstruct));

	if (mnt->f_flags & MNT_RDONLY)
		mntstruct.me_flags |= MEFLAG_READONLY;

	if (strcmp(mnt->f_fstypename, "nfs") == 0) {
		strlcpy(remote_dev, mnt->f_mntfromname, sizeof(remote_dev));
		mntstruct.me_path = remote_dev;
		mntstruct.me_flags |= MEFLAG_NFS;
	} else
		mntstruct.me_path = mnt->f_mntonname;

	mnt++;
	entries_left--;

	return (&mntstruct);
}

/*
 * Done with iterations
 */
void
endmountent(void)
{
	free(mnt);
	mnt = NULL;
}

/*
 * Make a new (copy) of a mntent structure.
 */
mntent_t *
newmountent(const mntent_t *old)
{
	mntent_t *new;

	new = xmalloc(sizeof *new);
	new->me_path = xstrdup(old->me_path);
	new->me_flags = old->me_flags;

	return (new);
}
@


1.12
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: filesys-os.c,v 1.11 2014/07/05 10:21:24 guenther Exp $	*/
d34 2
d37 1
a37 1
#include "defs.h"
d89 2
a90 2
		mntstruct.me_type = METYPE_NFS;
	} else {
a91 2
		mntstruct.me_type = METYPE_OTHER;
	}
a118 1
	new->me_type = xstrdup(old->me_type);
@


1.11
log
@Assume we have getfsstat(); simplify the interface to the *mountent()
wrappers
@
text
@d1 1
a1 1
/*	$OpenBSD: filesys-os.c,v 1.10 2009/10/27 23:59:42 deraadt Exp $	*/
d32 1
a32 1
#include <sys/param.h>
d74 1
a74 1
	static char remote_dev[MAXHOSTNAMELEN+MAXPATHLEN+1];
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: filesys-os.c,v 1.9 2003/06/03 02:56:15 millert Exp $	*/
d32 3
a40 1
#if 	FSI_TYPE == FSI_GETFSSTAT
a41 8
#endif	/* FSI_GETFSSTAT */

#if	FSI_TYPE == FSI_MNTCTL
static struct vmount   *mnt = NULL;
#endif	/* FSI_MNTCTL */

#if	(FSI_TYPE == FSI_MNTCTL) || (FSI_TYPE == FSI_GETFSSTAT)
static char 	       *mntbuf = NULL;
a42 25
#endif	/* FSI_MNTCTL || FSI_GETFSSTAT */

#if	FSI_TYPE == FSI_MNTCTL
/*
 * AIX version of setmountent()
 */
FILE *
setmountent(const char *file, const char *mode)
{
	ulong size;

	if (mntbuf)
		(void) free(mntbuf);

	mntctl(MCTL_QUERY, sizeof(size), &size);
	mntbuf = (char *) xmalloc(size);

	entries_left = mntctl(MCTL_QUERY, size, mntbuf);
	if (!entries_left)
		return(NULL);

	mnt = (struct vmount *)mntbuf;
	return((FILE *) 1);
}
#endif	/* FSI_MNTCTL */
a43 1
#if	FSI_TYPE == FSI_GETFSSTAT
d47 2
a48 2
FILE *
setmountent(const char *file, const char *mode)
a51 3
	if (mntbuf)
		(void) free(mntbuf);

d54 3
a56 1
		return (NULL);
d58 1
a58 1
	mntbuf = (char *) xmalloc(size);
d60 1
a60 1
	entries_left = getfsstat((struct statfs *)mntbuf, size, MNT_WAIT);
d62 1
a62 3
		return(NULL);

	mnt = (struct statfs *) mntbuf;
d64 1
a64 1
	return((FILE *) 1);
a65 1
#endif	/* FSI_GETFSSTAT */
a66 38
#if	FSI_TYPE == FSI_MNTCTL
/* 
 * AIX version of getmountent() 
 */
/*
 * Iterate over mount entries
 */
mntent_t *
getmountent(FILE *fptr)
{
	static mntent_t mntstruct;

	if (!entries_left)
		return((mntent_t*)0);

	bzero((char *) &mntstruct, sizeof(mntstruct));

	if (mnt->vmt_flags & MNT_READONLY)
		mntstruct.me_flags |= MEFLAG_READONLY;

	mntstruct.me_path = vmt2dataptr(mnt, VMT_STUB);
	switch ((ulong)(struct vmount*)mnt->vmt_gfstype) {
	      case MNT_NFS:
		mntstruct.me_type = METYPE_NFS;
		break;
	      default:
		mntstruct.me_type = METYPE_OTHER;
		break;
	}

	mnt = (struct vmount*)((mnt->vmt_length)+(char *)mnt);
	entries_left--;

	return(&mntstruct);
}
#endif	/* FSI_MNTCTL */

#if	FSI_TYPE == FSI_GETFSSTAT
d71 1
a71 1
getmountent(FILE *fptr)
d77 1
a77 1
		return((mntent_t*)0);
d79 1
a79 1
	bzero((char *) &mntstruct, sizeof(mntstruct));
a80 1
#if	defined(MNT_RDONLY)
a82 5
#endif
#if	defined(M_RDONLY)
	if (mnt->f_flags & M_RDONLY)
		mntstruct.me_flags |= MEFLAG_READONLY;
#endif
d84 1
a84 6
#ifdef HAVE_FSTYPENAME
	if (strcmp(mnt->f_fstypename, "nfs") == 0)
#else
	if (mnt->f_type == MOUNT_NFS)
#endif	/* HAVE_FSTYPENAME */
	{
d96 1
a96 1
	return(&mntstruct);
a97 1
#endif
a98 1
#if	(FSI_TYPE == FSI_MNTCTL) || (FSI_TYPE == FSI_GETFSSTAT)
d103 1
a103 1
endmountent(FILE *fptr)
d105 1
a106 16

	if (mntbuf) {
		(void) free(mntbuf);
		mntbuf = NULL;
	}
}
#endif	/* FSI_MNTCTL || FSI_GETFSSTAT */

#if	FSI_TYPE == FSI_GETMNTENT2
/*
 * Prepare to iterate over mounted filesystem list
 */
FILE *
setmountent(const char *file, const char *mode)
{
	return(fopen(file, mode));
a109 145
 * Done with iteration
 */
void
endmountent(FILE *fptr)
{
	fclose(fptr);
}

/*
 * Iterate over mount entries
 */
mntent_t *
getmountent(FILE *fptr)
{
	static mntent_t me;
	static struct mnttab mntent;

	bzero((char *)&me, sizeof(mntent_t));

#if     defined(UNICOS)
        if (getmntent(fptr, &mntent) != NULL) {
#else
        if (getmntent(fptr, &mntent) != -1) {
#endif
		me.me_path = mntent.mnt_mountp;
		me.me_type = mntent.mnt_fstype;
		if (mntent.mnt_mntopts && hasmntopt(&mntent, MNTOPT_RO))
			me.me_flags |= MEFLAG_READONLY;

#if	defined(MNTTYPE_IGNORE)
		if (strcmp(mntent.mnt_fstype, MNTTYPE_IGNORE) == 0)
			me.me_flags |= MEFLAG_IGNORE;
#endif	/* MNTTYPE_IGNORE */
#if	defined(MNTTYPE_SWAP)
		if (strcmp(mntent.mnt_fstype, MNTTYPE_SWAP) == 0)
			me.me_flags |= MEFLAG_IGNORE;
#endif	/* MNTTYPE_SWAP */

		return(&me);
	} else
		return(NULL);
}
#endif	/* FSI_GETMNTNET2 */

#if	FSI_TYPE == FSI_GETMNTENT
/*
 * Prepare to iterate over mounted filesystem list
 */
FILE *
setmountent(const char *file, const char *mode)
{
	return(setmntent(file, mode));
}

/*
 * Done with iteration
 */
void
endmountent(FILE *fptr)
{
	endmntent(fptr);
}

/*
 * Iterate over mount entries
 */
mntent_t *
getmountent(FILE *fptr)
{
	static mntent_t me;
	struct mntent *mntent;

	bzero((char *)&me, sizeof(mntent_t));

	if ((mntent = getmntent(fptr)) != NULL) {
		me.me_path = mntent->mnt_dir;
		me.me_type = mntent->mnt_type;
		if (mntent->mnt_opts && hasmntopt(mntent, MNTOPT_RO))
			me.me_flags |= MEFLAG_READONLY;

#if	defined(MNTTYPE_IGNORE)
		if (strcmp(mntent->mnt_type, MNTTYPE_IGNORE) == 0)
			me.me_flags |= MEFLAG_IGNORE;
#endif	/* MNTTYPE_IGNORE */
#if	defined(MNTTYPE_SWAP)
		if (strcmp(mntent->mnt_type, MNTTYPE_SWAP) == 0)
			me.me_flags |= MEFLAG_IGNORE;
#endif	/* MNTTYPE_SWAP */

		return(&me);
	} else
		return(NULL);
}
#endif	/* FSI_GETMNTNET */

#if	FSI_TYPE == FSI_GETMNT
/*
 * getmnt() interface (Ultrix)
 */

#include <sys/fs_types.h>

static int startmounts = 0;

FILE *
setmountent(const char *file, const char *mode)
{
	startmounts = 0;
	return((FILE *) 1);
}

void
endmountent(FILE *fptr)
{
	/* NOOP */
}

/*
 * Iterate over mounted filesystems using getmnt()
 */
mntent_t *
getmountent(FILE *fptr)
{
	struct fs_data fs_data;
	static mntent_t me;

	if (getmnt(&startmounts, &fs_data, sizeof(fs_data), NOSTAT_MANY, 
		   NULL) <= 0)
		return(NULL);

	bzero((char *)&me, sizeof(mntent_t));
	me.me_path = fs_data.fd_path;
	if (fs_data.fd_fstype == GT_NFS)
		me.me_type = METYPE_NFS;
	else
		me.me_type = METYPE_OTHER;

	if (fs_data.fd_flags & M_RONLY)
		me.me_flags |= MEFLAG_READONLY;

	return(&me);
}
#endif	/* FSI_GETMNT */

/*
d117 1
a117 4
	if (!old)
		return(NULL);

	new = (mntent_t *) xcalloc(1, sizeof(mntent_t));
d122 1
a122 1
	return(new);
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: filesys-os.c,v 1.8 2003/05/14 01:34:35 millert Exp $	*/
a32 16
#ifndef lint
#if 0
static char RCSid[] __attribute__((__unused__)) = 
"$From: filesys-os.c,v 1.5 1999/08/04 15:57:33 christos Exp $";
#else
static char RCSid[] __attribute__((__unused__)) = 
"$OpenBSD: filesys-os.c,v 1.8 2003/05/14 01:34:35 millert Exp $";
#endif

static char sccsid[] __attribute__((__unused__)) =
"@@(#)filesys-os.c";

static char copyright[] __attribute__((__unused__)) =
"@@(#) Copyright (c) 1983 Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */
@


1.8
log
@ o Sync w/ freerdist 0.92 minus the compress option
 o KNF and ANSIfy the function headers

Sparse file support is currently a no-op since it didn't work.
Proper sparse file support will be added later.
@
text
@d1 1
a1 1
/*	$OpenBSD: filesys-os.c,v 1.7 2003/04/05 20:31:58 deraadt Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d39 1
a39 1
"$OpenBSD: filesys-os.c,v 1.7 2003/04/05 20:31:58 deraadt Exp $";
@


1.7
log
@strings; ok miod ho krw
@
text
@d1 1
a1 1
/*	$OpenBSD: filesys-os.c,v 1.6 1999/02/04 23:18:57 millert Exp $	*/
d36 1
d39 2
a40 2
static char RCSid[] = 
"$From: filesys-os.c,v 6.17 1996/01/17 21:02:45 mcooper Exp mcooper $";
d42 2
a43 2
static char RCSid[] = 
"$OpenBSD: filesys-os.c,v 1.6 1999/02/04 23:18:57 millert Exp $";
d46 2
a47 1
static char sccsid[] = "@@(#)filesys-os.c";
d49 1
a49 1
static char copyright[] =
a57 3
#include "defs.h"
#include "filesys.h"

a59 5
#if	FSTYPENAME
#define	f_type_eq(a, b) (! strcmp (((struct statfs *) (a))->f_fstypename, (b)))
#else	/* !FSTYPENAME */
#define	f_type_eq(a, b) (((struct statfs *) a)->f_type == (b))
#endif	/* !FSTYPENAME */
d75 2
a76 4
FILE *setmountent(file, mode)
	/*ARGSUSED*/
	char *file;
	char *mode;
d99 2
a100 4
FILE *setmountent(file, mode)
	/*ARGSUSED*/
	char *file;
	char *mode;
d130 2
a131 3
mntent_t *getmountent(fptr)
	/*ARGSUSED*/
	FILE *fptr;
d164 2
a165 3
mntent_t *getmountent(fptr)
	/*ARGSUSED*/
	FILE *fptr;
d183 8
a190 3
	if (f_type_eq(mnt, MOUNT_NFS)) {
		(void) snprintf(remote_dev, sizeof remote_dev,
		    "%s", mnt->f_mntfromname);
d209 2
a210 3
void endmountent(fptr)
	/*ARGSUSED*/
	FILE *fptr;
d225 2
a226 4
FILE *setmountent(file, mode)
	/*ARGSUSED*/
	char *file;
	char *mode;
d234 2
a235 3
void endmountent(fptr)
	/*ARGSUSED*/
	FILE *fptr;
d243 2
a244 2
mntent_t *getmountent(fptr)
	FILE *fptr;
d280 2
a281 4
FILE *setmountent(file, mode)
	/*ARGSUSED*/
	char *file;
	char *mode;
d289 2
a290 3
void endmountent(fptr)
	/*ARGSUSED*/
	FILE *fptr;
d298 2
a299 2
mntent_t *getmountent(fptr)
	FILE *fptr;
d306 1
a306 1
	if (mntent = getmntent(fptr)) {
d336 2
a337 4
FILE *setmountent(file, mode)
	/*ARGSUSED*/
	char *file;
	char *mode;
d340 1
a340 1
	return(stdin);		/* XXX - need to return something! */
d343 2
a344 3
void endmountent(fptr)
	/*ARGSUSED*/
	FILE *fptr;
d352 2
a353 3
mntent_t *getmountent(fptr)
	/*ARGSUSED*/
	FILE *fptr;
d379 2
a380 2
mntent_t *newmountent(old)
	mntent_t *old;
@


1.6
log
@Fix a serious memory consumption problem when running over directories
that contain many hard-linked files; johnh@@isi.edu
Also add an xstrdup() that behaves like xmalloc() on failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: filesys-os.c,v 1.5 1998/06/26 21:20:47 millert Exp $	*/
d42 1
a42 1
"$OpenBSD: filesys-os.c,v 1.5 1998/06/26 21:20:47 millert Exp $";
d196 2
a197 1
		(void) sprintf(remote_dev, "%s", mnt->f_mntfromname);
@


1.5
log
@rdist 6.1.4 + OpenBSD patches + some -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
"$OpenBSD$";
d405 2
a406 2
	new->me_path = strdup(old->me_path);
	new->me_type = strdup(old->me_type);
@


1.4
log
@(foo *)NULL -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: filesys-os.c,v 1.3 1996/06/26 05:38:21 deraadt Exp $	*/
d37 1
d39 5
a43 1
"$OpenBSD: filesys-os.c,v 1.3 1996/06/26 05:38:21 deraadt Exp $";
d62 1
a62 1
#define f_type_eq(a, b) (! strcmp (((struct statfs *) (a))->f_fstypename, (b)))
d65 1
a65 1
#endif /* !FSTYPENAME */
d86 1
a86 1
	u_int size;
d112 1
a112 1
	int size;
d155 1
a155 1
	switch ((struct vmount*)mnt->vmt_gfstype) {
d195 1
a195 1
	if (f_type_eq (mnt, MOUNT_NFS)) {
d199 1
a199 2
	}
	else {
d355 1
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
"$OpenBSD: filesys-os.c,v 1.2 1996/06/13 22:23:06 deraadt Exp $";
d91 1
a91 1
		return((FILE *)NULL);
d112 1
a112 1
	size = getfsstat((struct statfs *) NULL, 0, MNT_WAIT);
d114 1
a114 1
		return ((FILE *)NULL);
d120 1
a120 1
		return((FILE *) NULL);
d219 1
a219 1
		mntbuf = (char *) NULL;
d278 1
a278 1
		return((mntent_t *) NULL);
d332 1
a332 1
		return((mntent_t *) NULL);
d371 2
a372 2
		   (char *) NULL) <= 0)
		return((mntent_t *) NULL);
d397 1
a397 1
		return((mntent_t *) NULL);
@


1.2
log
@long botches
@
text
@d1 2
d38 1
a38 1
"$Id: filesys-os.c,v 1.1 1996/02/03 12:12:55 dm Exp $";
@


1.1
log
@rdist 6.1.1
@
text
@d36 1
a36 1
"$Id: filesys-os.c,v 6.17 1996/01/17 21:02:45 mcooper Exp $";
a53 1
typedef u_long 		ulong;
d79 1
a79 1
	ulong size;
d105 1
a105 1
	ulong size;
d111 2
d148 1
a148 1
	switch ((ulong)(struct vmount*)mnt->vmt_gfstype) {
@
