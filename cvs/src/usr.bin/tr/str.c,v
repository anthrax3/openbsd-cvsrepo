head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.20
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.16
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.12
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.14
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.12
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2012.12.05.23.20.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.27.23.59.46;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.03.01.31.11;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.15.22.12.19;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.02.56.20;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.55;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.19.19.02.17;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	98.12.07.18.23.29;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.07.25.21.14.04;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.13.40;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.41.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.26;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.26;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@/*	$OpenBSD: str.c,v 1.11 2009/10/27 23:59:46 deraadt Exp $	*/
/*	$NetBSD: str.c,v 1.7 1995/08/31 22:13:47 jtc Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>

#include <errno.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <err.h>

#include "extern.h"

static int	backslash(STR *);
static int	bracket(STR *);
static int	c_class(const void *, const void *);
static void	genclass(STR *);
static void	genequiv(STR *);
static int	genrange(STR *);
static void	genseq(STR *);

int
next(s)
	STR *s;
{
	int ch;

	switch (s->state) {
	case EOS:
		return (0);
	case INFINITE:
		return (1);
	case NORMAL:
		switch (ch = *s->str) {
		case '\0':
			s->state = EOS;
			return (0);
		case '\\':
			s->lastch = backslash(s);
			break;
		case '[':
			if (bracket(s))
				return (next(s));
			/* FALLTHROUGH */
		default:
			++s->str;
			s->lastch = ch;
			break;
		}

		/* We can start a range at any time. */
		if (s->str[0] == '-' && genrange(s))
			return (next(s));
		return (1);
	case RANGE:
		if (s->cnt-- == 0) {
			s->state = NORMAL;
			return (next(s));
		}
		++s->lastch;
		return (1);
	case SEQUENCE:
		if (s->cnt-- == 0) {
			s->state = NORMAL;
			return (next(s));
		}
		return (1);
	case SET:
		if ((s->lastch = s->set[s->cnt++]) == OOBCH) {
			s->state = NORMAL;
			return (next(s));
		}
		return (1);
	default:
		return 0;
	}
	/* NOTREACHED */
}

static int
bracket(s)
	STR *s;
{
	char *p;

	switch (s->str[1]) {
	case ':':				/* "[:class:]" */
		if ((p = strstr((char *)s->str + 2, ":]")) == NULL)
			return (0);
		*p = '\0';
		s->str += 2;
		genclass(s);
		s->str = (unsigned char *)p + 2;
		return (1);
	case '=':				/* "[=equiv=]" */
		if ((p = strstr((char *)s->str + 2, "=]")) == NULL)
			return (0);
		s->str += 2;
		genequiv(s);
		return (1);
	default:				/* "[\###*n]" or "[#*n]" */
		if ((p = strpbrk((char *)s->str + 2, "*]")) == NULL)
			return (0);
		if (p[0] != '*' || strchr(p, ']') == NULL)
			return (0);
		s->str += 1;
		genseq(s);
		return (1);
	}
	/* NOTREACHED */
}

typedef struct {
	char *name;
	int (*func)(int);
	int *set;
} CLASS;

static CLASS classes[] = {
	{ "alnum",  isalnum,  },
	{ "alpha",  isalpha,  },
	{ "blank",  isblank,  },
	{ "cntrl",  iscntrl,  },
	{ "digit",  isdigit,  },
	{ "graph",  isgraph,  },
	{ "lower",  islower,  },
	{ "print",  isprint,  },
	{ "punct",  ispunct,  },
	{ "space",  isspace,  },
	{ "upper",  isupper,  },
	{ "xdigit", isxdigit, },
};

static void
genclass(s)
	STR *s;
{
	int cnt, (*func)(int);
	CLASS *cp, tmp;
	int *p;

	tmp.name = (char *)s->str;
	if ((cp = (CLASS *)bsearch(&tmp, classes, sizeof(classes) /
	    sizeof(CLASS), sizeof(CLASS), c_class)) == NULL)
		errx(1, "unknown class %s", s->str);

	if ((cp->set = p = calloc(NCHARS + 1, sizeof(int))) == NULL)
		errx(1, "no memory for a class");
	for (cnt = 0, func = cp->func; cnt < NCHARS; ++cnt)
		if ((func)(cnt))
			*p++ = cnt;
	*p = OOBCH;

	s->cnt = 0;
	s->state = SET;
	s->set = cp->set;
}

static int
c_class(a, b)
	const void *a, *b;
{
	return (strcmp(((CLASS *)a)->name, ((CLASS *)b)->name));
}

/*
 * English doesn't have any equivalence classes, so for now
 * we just syntax check and grab the character.
 */
static void
genequiv(s)
	STR *s;
{
	if (*s->str == '\\') {
		s->equiv[0] = backslash(s);
		if (*s->str != '=')
			errx(1, "misplaced equivalence equals sign");
	} else {
		s->equiv[0] = s->str[0];
		if (s->str[1] != '=')
			errx(1, "misplaced equivalence equals sign");
	}
	s->str += 2;
	s->cnt = 0;
	s->state = SET;
	s->set = s->equiv;
}

static int
genrange(s)
	STR *s;
{
	int stopval;
	unsigned char *savestart;

	savestart = s->str;
	stopval = *++s->str == '\\' ? backslash(s) : *s->str++;
	if (stopval < (u_char)s->lastch) {
		s->str = savestart;
		return (0);
	}
	s->cnt = stopval - s->lastch + 1;
	s->state = RANGE;
	--s->lastch;
	return (1);
}

static void
genseq(s)
	STR *s;
{
	char *ep;

	if (s->which == STRING1)
		errx(1, "sequences only valid in string2");

	if (*s->str == '\\')
		s->lastch = backslash(s);
	else
		s->lastch = *s->str++;
	if (*s->str != '*')
		errx(1, "misplaced sequence asterisk");

	switch (*++s->str) {
	case '\\':
		s->cnt = backslash(s);
		break;
	case ']':
		s->cnt = 0;
		++s->str;
		break;
	default:
		if (isdigit(*s->str)) {
			s->cnt = strtol((char *)s->str, &ep, 0);
			if (*ep == ']') {
				s->str = (unsigned char *)ep + 1;
				break;
			}
		}
		errx(1, "illegal sequence count");
		/* NOTREACHED */
	}

	s->state = s->cnt ? SEQUENCE : INFINITE;
}

/*
 * Translate \??? into a character.  Up to 3 octal digits, if no digits either
 * an escape code or a literal character.
 */
static int
backslash(s)
	STR *s;
{
	int ch, cnt, val;

	for (cnt = val = 0;;) {
		ch = *++s->str;
		if (!isascii(ch) || !isdigit(ch))
			break;
		val = val * 8 + ch - '0';
		if (++cnt == 3) {
			++s->str;
			break;
		}
	}
	if (cnt)
		return (val);
	if (ch != '\0')
		++s->str;
	switch (ch) {
		case 'a':			/* escape characters */
			return ('\7');
		case 'b':
			return ('\b');
		case 'f':
			return ('\f');
		case 'n':
			return ('\n');
		case 'r':
			return ('\r');
		case 't':
			return ('\t');
		case 'v':
			return ('\13');
		case '\0':			/*  \" -> \ */
			s->state = EOS;
			return ('\\');
		default:			/* \x" -> x */
			return (ch);
	}
}
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.10 2006/04/03 01:31:11 djm Exp $	*/
a32 1
#include <sys/cdefs.h>
@


1.10
log
@some more malloc(x * y); bzero() -> calloc(x, y) whacking from
adobriyan AT gmail.com
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.9 2004/09/15 22:12:19 deraadt Exp $	*/
a31 7

#ifndef lint
#if 0
static char sccsid[] = "@@(#)str.c	8.2 (Berkeley) 4/28/95";
#endif
static char rcsid[] = "$OpenBSD: str.c,v 1.9 2004/09/15 22:12:19 deraadt Exp $";
#endif /* not lint */
@


1.9
log
@signed and unsigned char wiggles
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.8 2003/06/03 02:56:20 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: str.c,v 1.8 2003/06/03 02:56:20 millert Exp $";
d186 1
a186 1
	if ((cp->set = p = malloc((NCHARS + 1) * sizeof(int))) == NULL)
a187 1
	bzero(p, (NCHARS + 1) * sizeof(int));
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.7 2002/02/16 21:27:55 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: str.c,v 1.7 2002/02/16 21:27:55 millert Exp $";
d127 1
a127 1
		if ((p = strstr(s->str + 2, ":]")) == NULL)
d132 1
a132 1
		s->str = p + 2;
d135 1
a135 1
		if ((p = strstr(s->str + 2, "=]")) == NULL)
d141 1
a141 1
		if ((p = strpbrk(s->str + 2, "*]")) == NULL)
d181 1
a181 1
	tmp.name = s->str;
d234 1
a234 1
	char *savestart;
d274 1
a274 1
			s->cnt = strtol(s->str, &ep, 0);
d276 1
a276 1
				s->str = ep + 1;
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.6 2001/11/19 19:02:17 mpech Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: str.c,v 1.6 2001/11/19 19:02:17 mpech Exp $";
@


1.6
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.5 1998/12/07 18:23:29 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: str.c,v 1.5 1998/12/07 18:23:29 deraadt Exp $";
d57 7
a63 7
static int	backslash __P((STR *));
static int	bracket __P((STR *));
static int	c_class __P((const void *, const void *));
static void	genclass __P((STR *));
static void	genequiv __P((STR *));
static int	genrange __P((STR *));
static void	genseq __P((STR *));
d158 1
a158 1
	int (*func) __P((int));
d181 1
a181 1
	int cnt, (*func) __P((int));
@


1.5
log
@fix [:print:]
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.4 1997/07/25 21:14:04 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: str.c,v 1.4 1997/07/25 21:14:04 mickey Exp $";
d67 1
a67 1
	register STR *s;
d69 1
a69 1
	register int ch;
d125 1
a125 1
	register STR *s;
d127 1
a127 1
	register char *p;
d181 1
a181 1
	register int cnt, (*func) __P((int));
d297 1
a297 1
	register STR *s;
d299 1
a299 1
	register int ch, cnt, val;
@


1.4
log
@use err(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.3 1997/01/17 07:13:40 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: str.c,v 1.3 1997/01/17 07:13:40 millert Exp $";
d170 1
a170 1
	{ "print",  isupper,  },
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.2 1996/06/26 05:41:49 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: str.c,v 1.2 1996/06/26 05:41:49 deraadt Exp $";
d53 1
d117 2
d188 1
a188 1
		err("unknown class %s", s->str);
d191 1
a191 1
		err("%s", strerror(errno));
d221 1
a221 1
			err("misplaced equivalence equals sign");
d225 1
a225 1
			err("misplaced equivalence equals sign");
d259 1
a259 1
		err("sequences only valid in string2");
d266 1
a266 1
		err("misplaced sequence asterisk");
d284 1
a284 1
		err("illegal sequence count");
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.7 1995/08/31 22:13:47 jtc Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: str.c,v 1.7 1995/08/31 22:13:47 jtc Exp $";
d144 1
a144 1
		if (p[0] != '*' || index(p, ']') == NULL)
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: str.c,v 1.7 1995/08/31 22:13:47 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
