head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.10
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6;
locks; strict;
comment	@ * @;


1.12
date	2016.02.05.12.59.12;	author jca;	state Exp;
branches;
next	1.11;
commitid	v30u3NP05whdZ8Iq;

1.11
date	2016.02.05.12.58.33;	author jca;	state Exp;
branches;
next	1.10;
commitid	nW8U5y1sx49Z5Yqv;

1.10
date	2015.11.19.06.07.16;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	8KgI09DhfxJPyzWk;

1.9
date	2015.08.14.14.31.49;	author stsp;	state Exp;
branches;
next	1.8;
commitid	fh7RLECpwPZnShgf;

1.8
date	2013.11.15.22.20.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.13.20.44.21;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2013.07.01.00.39.14;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.16.19.46.59;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.16.18.09.47;	author jca;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.16.15.09.03;	author jca;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.05.14.56.45;	author stsp;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.14.27.50;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Sort includes.
@
text
@/*	$OpenBSD: locale.c,v 1.11 2016/02/05 12:58:33 jca Exp $	*/
/*
 * Copyright (c) 2013 Stefan Sperling <stsp@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

extern char		*__progname;

struct category_name {
	int category;
	const char *name;
} categories[] = {
	{ LC_COLLATE,	"LC_COLLATE" },
	{ LC_CTYPE,	"LC_CTYPE" },
	{ LC_MONETARY,	"LC_MONETARY" },
	{ LC_NUMERIC,	"LC_NUMERIC" },
	{ LC_TIME,	"LC_TIME" },
	{ LC_MESSAGES,	"LC_MESSAGES" },
	{ 0, 		NULL},
};

static void
put_assignment(const char *name, const char *value, int double_quoted)
{
	char c;

	fputs(name, stdout);
	putchar('=');
	if (double_quoted)
		putchar('"');
	if (value != NULL)
		while ((c = *value++) != '\0')
			switch (c) {
			case ' ': case '\t': case '\n': case '\'':
			case '(': case ')': case '<': case '>':
			case '&': case ';': case '|': case '~':
				if (!double_quoted)
			case '"': case '\\': case '$': case '`': 
					putchar('\\');
			default:
				putchar(c);
				break;
			}
	if (double_quoted)
		putchar('"');
	putchar('\n');
}

static void
show_current_locale(void)
{
	char *lang, *lc_all;
	int i;

	lang = getenv("LANG");
	lc_all = getenv("LC_ALL");

	put_assignment("LANG", lang, 0);
	for (i = 0; categories[i].name != NULL; i++) {
		if (lc_all == NULL && getenv(categories[i].name))
			put_assignment(categories[i].name,
			    getenv(categories[i].name), 0);
		else
			put_assignment(categories[i].name,
			    setlocale(categories[i].category, NULL), 1);
	}
	put_assignment("LC_ALL", lc_all, 0);
}

const char * const some_locales[] = {
	"C",
	"C.UTF-8",
	"POSIX",
	"POSIX.UTF-8",
	"Pig.UTF-8",
	"ar_SD.UTF-8",
	"ar_SY.UTF-8",
	"ca_ES.UTF-8",
	"cs_CZ.UTF-8",
	"da_DK.UTF-8",
	"de_AT.UTF-8",
	"de_CH.UTF-8",
	"de_DE.UTF-8",
	"el_GR.UTF-8",
	"en_AU.UTF-8",
	"en_CA.UTF-8",
	"en_GB.UTF-8",
	"en_US.UTF-8",
	"es_AR.UTF-8",
	"es_BO.UTF-8",
	"es_CH.UTF-8",
	"es_CO.UTF-8",
	"es_CR.UTF-8",
	"es_CU.UTF-8",
	"es_DO.UTF-8",
	"es_EC.UTF-8",
	"es_ES.UTF-8",
	"es_GQ.UTF-8",
	"es_GT.UTF-8",
	"es_HN.UTF-8",
	"es_MX.UTF-8",
	"es_NI.UTF-8",
	"es_PA.UTF-8",
	"es_PE.UTF-8",
	"es_PR.UTF-8",
	"es_PY.UTF-8",
	"es_SV.UTF-8",
	"es_US.UTF-8",
	"es_UY.UTF-8",
	"es_VE.UTF-8",
	"fa_IR.UTF-8",
	"fi_FI.UTF-8",
	"fr_BE.UTF-8",
	"fr_CA.UTF-8",
	"fr_CH.UTF-8",
	"fr_FR.UTF-8",
	"hu_HU.UTF-8",
	"hy_AM.UTF-8",
	"is_IS.UTF-8",
	"it_CH.UTF-8",
	"it_IT.UTF-8",
	"ja_JP.UTF-8",
	"ko_KR.UTF-8",
	"lt_LT.UTF-8",
	"nl_BE.UTF-8",
	"nl_NL.UTF-8",
	"no_NO.UTF-8",
	"pl_PL.UTF-8",
	"pt_PT.UTF-8",
	"ro_RO.UTF-8",
	"ru_RU.UTF-8",
	"sk_SK.UTF-8",
	"sl_SI.UTF-8",
	"sv_SE.UTF-8",
	"tr_TR.UTF-8",
	"uk_UA.UTF-8",
	"zh_CN.UTF-8",
	"zh_TW.UTF-8",
	NULL
};

static void
show_locales(void)
{
	int i = 0;

	while (some_locales[i])
		puts(some_locales[i++]);
}

static void
usage(void)
{
	fprintf(stderr, "usage: %s [-a | -m]\n", __progname);
	exit(1);
}

int
main(int argc, char *argv[])
{
	int opt, aflag = 0, mflag = 0;

	setlocale(LC_ALL, "");

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	if (argc == 1) {
		show_current_locale();
		return 0;
	}

	while ((opt = getopt(argc, argv, "am")) != -1) {
		switch (opt) {
		case 'a':
			aflag = 1;
			break;
		case 'm':
			mflag = 1;
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 0 || (aflag && mflag))
		usage();
	else if (aflag)
		show_locales();
	else if (mflag)
		printf("UTF-8\n");

	return 0;
}
@


1.11
log
@No need for pledge("rpath")
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.10 2015/11/19 06:07:16 deraadt Exp $	*/
d18 2
a22 1
#include <locale.h>
a23 1
#include <err.h>
@


1.10
log
@pledge "stdio rpath".  Might not need "rpath", but ...
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.9 2015/08/14 14:31:49 stsp Exp $	*/
d183 1
a183 1
	if (pledge("stdio rpath", NULL) == -1)
@


1.9
log
@Remove charsets other than UTF-8 from locale(1) output.
ok mpi tedu phessler zhuk, and discussed with many at c2k15
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.8 2013/11/15 22:20:04 millert Exp $	*/
d23 1
d182 3
@


1.8
log
@Include unistd.h as it is the standard location for getopt().
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.7 2013/11/13 20:44:21 deraadt Exp $	*/
a91 1
	"Pig.ISO8859-1",
a94 3
	"bg_BG.CP1251",
	"ca_ES.ISO8859-1",
	"ca_ES.ISO8859-15",
a95 1
	"cs_CZ.ISO8859-2",
a96 2
	"da_DK.ISO8859-1",
	"da_DK.ISO8859-15",
a97 2
	"de_AT.ISO8859-1",
	"de_AT.ISO8859-15",
a98 2
	"de_CH.ISO8859-1",
	"de_CH.ISO8859-15",
a99 2
	"de_DE.ISO8859-1",
	"de_DE.ISO8859-15",
a100 1
	"el_GR.ISO8859-7",
a101 2
	"en_AU.ISO8859-1",
	"en_AU.ISO8859-15",
a102 2
	"en_CA.ISO8859-1",
	"en_CA.ISO8859-15",
a103 2
	"en_GB.ISO8859-1",
	"en_GB.ISO8859-15",
a104 2
	"en_US.ISO8859-1",
	"en_US.ISO8859-15",
a105 2
	"es_AR.ISO8859-1",
	"es_AR.ISO8859-15",
a106 2
	"es_BO.ISO8859-1",
	"es_BO.ISO8859-15",
a107 2
	"es_CH.ISO8859-1",
	"es_CH.ISO8859-15",
a108 2
	"es_CO.ISO8859-1",
	"es_CO.ISO8859-15",
a109 2
	"es_CR.ISO8859-1",
	"es_CR.ISO8859-15",
a110 2
	"es_CU.ISO8859-1",
	"es_CU.ISO8859-15",
a111 2
	"es_DO.ISO8859-1",
	"es_DO.ISO8859-15",
a112 2
	"es_EC.ISO8859-1",
	"es_EC.ISO8859-15",
a113 2
	"es_ES.ISO8859-1",
	"es_ES.ISO8859-15",
a114 2
	"es_GQ.ISO8859-1",
	"es_GQ.ISO8859-15",
a115 2
	"es_GT.ISO8859-1",
	"es_GT.ISO8859-15",
a116 2
	"es_HN.ISO8859-1",
	"es_HN.ISO8859-15",
a117 2
	"es_MX.ISO8859-1",
	"es_MX.ISO8859-15",
a118 2
	"es_NI.ISO8859-1",
	"es_NI.ISO8859-15",
a119 2
	"es_PA.ISO8859-1",
	"es_PA.ISO8859-15",
a120 2
	"es_PE.ISO8859-1",
	"es_PE.ISO8859-15",
a121 2
	"es_PR.ISO8859-1",
	"es_PR.ISO8859-15",
a122 2
	"es_PY.ISO8859-1",
	"es_PY.ISO8859-15",
a123 2
	"es_SV.ISO8859-1",
	"es_SV.ISO8859-15",
a124 2
	"es_US.ISO8859-1",
	"es_US.ISO8859-15",
a125 2
	"es_UY.ISO8859-1",
	"es_UY.ISO8859-15",
a126 2
	"es_VE.ISO8859-1",
	"es_VE.ISO8859-15",
a128 2
	"fi_FI.ISO8859-1",
	"fi_FI.ISO8859-15",
a129 2
	"fr_BE.ISO8859-1",
	"fr_BE.ISO8859-15",
a130 2
	"fr_CA.ISO8859-1",
	"fr_CA.ISO8859-15",
a131 2
	"fr_CH.ISO8859-1",
	"fr_CH.ISO8859-15",
a132 2
	"fr_FR.ISO8859-1",
	"fr_FR.ISO8859-15",
a133 2
	"hr_HR.ISO8859-2",
	"hu_HU.ISO8859-2",
a134 1
	"hy_AM.ARMSCII-8",
a135 2
	"is_IS.ISO8859-1",
	"is_IS.ISO8859-15",
a136 2
	"it_CH.ISO8859-1",
	"it_CH.ISO8859-15",
a137 2
	"it_IT.ISO8859-1",
	"it_IT.ISO8859-15",
a140 2
	"lt_LT.ISO8859-13",
	"lt_LT.ISO8859-4",
a141 2
	"nl_BE.ISO8859-1",
	"nl_BE.ISO8859-15",
a142 2
	"nl_NL.ISO8859-1",
	"nl_NL.ISO8859-15",
a143 2
	"no_NO.ISO8859-1",
	"no_NO.ISO8859-15",
a144 1
	"pl_PL.ISO8859-2",
a145 2
	"pt_PT.ISO8859-1",
	"pt_PT.ISO8859-15",
a147 3
	"ru_RU.CP866",
	"ru_RU.ISO8859-5",
	"ru_RU.KOI8-R",
a148 1
	"sk_SK.ISO8859-2",
a149 1
	"sl_SI.ISO8859-2",
a150 2
	"sv_SE.ISO8859-1",
	"sv_SE.ISO8859-15",
a151 1
	"tr_TR.ISO8859-9",
a152 1
	"uk_UA.KOI8-U",
a168 15
show_charsets(void)
{
	char *charset;
	char charsets[sizeof(LOCALE_CHARSETS)];
	char *s = charsets;

	bcopy(LOCALE_CHARSETS, charsets, sizeof(charsets));
	do {
		charset = strsep(&s, " \t");
		if (charset && charset[0])
			printf("%s\n", charset);
	} while (charset);
}

static void
d207 1
a207 1
		show_charsets();
@


1.7
log
@handle proto warnings
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.6 2013/07/01 00:39:14 fgsch Exp $	*/
d22 1
@


1.6
log
@update list of locales after adding Turkish.
requested and ok stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.5 2013/06/16 19:46:59 guenther Exp $	*/
d38 1
a38 1
void
d65 2
a66 2
void
show_current_locale()
d263 1
a263 1
void
d272 1
a272 1
void
d287 1
a287 1
void
@


1.5
log
@Quote values in the variable assignments, to be bulletproof in the face
of insane settings

ok matthew@@ jca@@ stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.4 2013/06/16 18:09:47 jca Exp $	*/
d254 2
@


1.4
log
@Oops, I undid rev. 1.2
Spotted by stsp@@ (sorry)
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.3 2013/06/16 15:09:03 jca Exp $	*/
d39 27
d74 1
a74 1
	printf("LANG=%s\n", lang ? lang : "");
d77 2
a78 2
			printf("%s=%s\n", categories[i].name,
			    getenv(categories[i].name));
d80 2
a81 2
			printf("%s=\"%s\"\n", categories[i].name,
			    setlocale(categories[i].category, NULL));
d83 1
a83 1
	printf("LC_ALL=%s\n", lc_all ? lc_all : "");
@


1.3
log
@Improve locale(1) output formatting.

Quote LC_* variables "that are not set in the environment or are
overridden by LC_ALL" when printing them, and just print an empty string
for LC_ALL if it is unset.
With input and ok from guenther@@ stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locale.c,v 1.1 2013/06/03 14:27:50 stsp Exp $	*/
d64 2
a65 1
	"Pig",
@


1.2
log
@Add charset to Pig locale name. Without charset the Pig locale won't work.
@
text
@a34 1
	{ LC_ALL,	"LC_ALL" },
d41 1
a41 1
	char *lang = getenv("LANG");
d44 3
d48 9
a56 3
	for (i = 0; categories[i].name != NULL; i++)
		printf("%s=%s\n", categories[i].name,
		    setlocale(categories[i].category, NULL));
d64 1
a64 2
	"Pig.ISO8859-1",
	"Pig.UTF-8",
@


1.1
log
@Add a minimal implementation of the locale(1) utility.
Can be used to check the current locale configuration and
provides a list of locales supported by the system.
help and ok matthew, schwarze
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 2
a57 1
	"Pig",
@

