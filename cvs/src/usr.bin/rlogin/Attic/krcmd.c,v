head	1.11;
access;
symbols
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.16
	OPENBSD_2_8:1.7.0.14
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2002.05.06.22.23.53;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2002.02.17.19.42.31;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.51;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.17.02.13.30;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	97.06.29.11.10.37;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	96.11.11.05.59.46;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.08.11.19.19.58;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.07.22.10.09.25;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.38.32;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.16.22.20.33;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.00;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.00;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@rlogin: Lived with Joy
@
text
@/*	$OpenBSD: krcmd.c,v 1.10 2002/02/17 19:42:31 millert Exp $	*/
/*	$NetBSD: krcmd.c,v 1.2 1995/03/21 07:58:36 cgd Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)krcmd.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.10 2002/02/17 19:42:31 millert Exp $";
#endif
#endif /* not lint */

/*
 *	$Header: /mit/kerberos/ucb/mit/kcmd/RCS/krcmd.c,v 5.1
 *		89/07/25 15:38:44 kfall Exp Locker: kfall 
 */

#ifdef KERBEROS
#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>

#include <des.h>
#include <kerberosIV/krb.h>

#include <stdio.h>

#define	SERVICE_NAME	"rcmd"

int	kcmd(int *, char **, u_short, char *, char *, char *, int *,
	    KTEXT, char *, char *, CREDENTIALS *, Key_schedule, MSG_DAT *,
	    struct sockaddr_in *, struct sockaddr_in *, long);
int	krcmd(char **, u_short, char *, char *, int *, char *);
int	krcmd_mutual(char **, u_short, char *, char *, int *, char *,
	    CREDENTIALS *, Key_schedule);

/*
 * krcmd: simplified version of Athena's "kcmd"
 *	returns a socket attached to the destination, -1 or krb error on error 
 *	if fd2p is non-NULL, another socket is filled in for it
 */

int
krcmd(ahost, rport, remuser, cmd, fd2p, realm)
	char	**ahost;
	u_short	rport;
	char	*remuser, *cmd;
	int	*fd2p;
	char	*realm;
{
	int		sock = -1, err = 0;
	KTEXT_ST	ticket;
	long		authopts = 0L;
	char myrealm[REALM_SZ];

	err = kcmd(
		&sock,
		ahost,
		rport,
		NULL,	/* locuser not used */
		remuser,
		cmd,
		fd2p,
		&ticket,
		SERVICE_NAME,
		realm,
		(CREDENTIALS *)  NULL,		/* credentials not used */
		(void *) NULL,		/* key schedule not used */
		(MSG_DAT *) NULL,		/* MSG_DAT not used */
		(struct sockaddr_in *) NULL,	/* local addr not used */
		(struct sockaddr_in *) NULL,	/* foreign addr not used */
		authopts
	);

	if (err > KSUCCESS && err < MAX_KRB_ERRORS) {
		if (krb_get_lrealm(myrealm, 0) == KSUCCESS)
			fprintf(stderr, "krcmd: %s\n", krb_err_txt[err]);
		return(-1);
	}
	if (err < 0)
		return(-1);
	return(sock);
}

int
krcmd_mutual(ahost, rport, remuser, cmd, fd2p, realm, cred, sched)
	char		**ahost;
	u_short		rport;
	char		*remuser, *cmd;
	int		*fd2p;
	char		*realm;
	CREDENTIALS	*cred;
	Key_schedule	sched;
{
	int		sock, err;
	KTEXT_ST	ticket;
	MSG_DAT		msg_dat;
	struct sockaddr_in	laddr, faddr;
	long authopts = KOPT_DO_MUTUAL;
	char myrealm[REALM_SZ];

	err = kcmd(
		&sock,
		ahost,
		rport,
		NULL,	/* locuser not used */
		remuser,
		cmd,
		fd2p,
		&ticket,
		SERVICE_NAME,
		realm,
		cred,		/* filled in */
		sched,		/* filled in */
		&msg_dat,	/* filled in */
		&laddr,		/* filled in */
		&faddr,		/* filled in */
		authopts
	);

	if (err > KSUCCESS && err < MAX_KRB_ERRORS) {
		if (krb_get_lrealm(myrealm, 0) == KSUCCESS)
			fprintf(stderr, "krcmd_mutual: %s\n", krb_err_txt[err]);
		return(-1);
	}

	if (err < 0)
		return (-1);
	return(sock);
}
#endif /* KERBEROS */
@


1.10
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: krcmd.c,v 1.9 2002/02/16 21:27:51 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.9 2002/02/16 21:27:51 millert Exp $";
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: krcmd.c,v 1.8 2001/07/17 02:13:30 pvalchev Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.8 2001/07/17 02:13:30 pvalchev Exp $";
d63 1
a63 1
int	kcmd __P((int *, char **, u_short, char *, char *, char *, int *,
d65 1
a65 1
	    struct sockaddr_in *, struct sockaddr_in *, long));
d67 2
a68 2
int	krcmd_mutual __P((char **, u_short, char *, char *, int *, char *,
	    CREDENTIALS *, Key_schedule));
@


1.8
log
@missing prototypes; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: krcmd.c,v 1.7 1997/06/29 11:10:37 provos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.7 1997/06/29 11:10:37 provos Exp $";
d66 1
a66 1
int	krcmd __P((char **, u_short, char *, char *, int *, char *));
@


1.7
log
@new location of des.h
@
text
@d1 1
a1 1
/*	$OpenBSD: krcmd.c,v 1.6 1996/11/11 05:59:46 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.6 1996/11/11 05:59:46 mickey Exp $";
d66 3
@


1.6
log
@type casts
@
text
@d1 1
a1 1
/*	$OpenBSD: krcmd.c,v 1.5 1996/08/11 19:19:58 tholo Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.5 1996/08/11 19:19:58 tholo Exp $";
d56 1
a56 1
#include <kerberosIV/des.h>
@


1.5
log
@Be quiet about Kerberos failures if Kerberos has not been set up locally
@
text
@d1 1
a1 1
/*	$OpenBSD: krcmd.c,v 1.4 1996/07/22 10:09:25 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.4 1996/07/22 10:09:25 deraadt Exp $";
d98 1
a98 1
		(bit_64 *) NULL,		/* key schedule not used */
@


1.4
log
@rcsid cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: krcmd.c,v 1.3 1996/06/26 05:38:32 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.3 1996/06/26 05:38:32 deraadt Exp $";
d84 1
d106 2
a107 1
		fprintf(stderr, "krcmd: %s\n", krb_err_txt[err]);
d130 1
d152 2
a153 1
		fprintf(stderr, "krcmd_mutual: %s\n", krb_err_txt[err]);
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: krcmd.c,v 1.2 1995/03/21 07:58:36 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: krcmd.c,v 1.2 1995/03/21 07:58:36 cgd Exp $";
a45 1
 *	$Source: /a/cvsroot/src/usr.bin/rlogin/krcmd.c,v 
a47 3
 * static char *rcsid_kcmd_c =
 * "$Header: /mit/kerberos/ucb/mit/kcmd/RCS/krcmd.c,v 5.1 89/07/25 15:38:44
 *	kfall Exp Locker: kfall ";
@


1.2
log
@Make it possible to build without SKEY support
Add support for building with kerberosIV
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: krcmd.c,v 1.2 1995/03/21 07:58:36 cgd Exp $";
@


1.1
log
@Initial revision
@
text
@a54 1
#ifdef CRYPT
a55 1
#endif
a115 1
#ifdef CRYPT
a159 1
#endif /* CRYPT */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
