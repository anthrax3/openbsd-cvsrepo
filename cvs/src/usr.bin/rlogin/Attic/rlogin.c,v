head	1.31;
access;
symbols
	OPENBSD_3_1:1.30.0.2
	OPENBSD_3_1_BASE:1.30
	OPENBSD_3_0:1.25.0.2
	OPENBSD_3_0_BASE:1.25
	OPENBSD_2_9_BASE:1.22
	OPENBSD_2_9:1.22.0.6
	OPENBSD_2_8:1.22.0.4
	OPENBSD_2_8_BASE:1.22
	OPENBSD_2_7:1.22.0.2
	OPENBSD_2_7_BASE:1.22
	OPENBSD_2_6:1.21.0.6
	OPENBSD_2_6_BASE:1.21
	OPENBSD_2_5:1.21.0.4
	OPENBSD_2_5_BASE:1.21
	OPENBSD_2_4:1.21.0.2
	OPENBSD_2_4_BASE:1.21
	OPENBSD_2_3:1.19.0.2
	OPENBSD_2_3_BASE:1.19
	OPENBSD_2_2:1.18.0.2
	OPENBSD_2_2_BASE:1.18
	OPENBSD_2_1:1.12.0.2
	OPENBSD_2_1_BASE:1.12
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.31
date	2002.05.06.22.23.53;	author deraadt;	state dead;
branches;
next	1.30;

1.30
date	2002.02.19.19.39.39;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2002.02.17.19.42.31;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2002.02.16.21.27.51;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.26;

1.26
date	2001.11.16.23.57.12;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2001.10.02.01.14.55;	author art;	state Exp;
branches;
next	1.24;

1.24
date	2001.09.04.23.35.59;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2001.07.03.23.47.05;	author jasoni;	state Exp;
branches;
next	1.22;

1.22
date	2000.01.27.05.27.42;	author itojun;	state Exp;
branches;
next	1.21;

1.21
date	98.07.12.08.07.12;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	98.06.03.16.20.33;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	98.03.25.20.22.08;	author art;	state Exp;
branches;
next	1.18;

1.18
date	97.09.03.18.01.01;	author kstailey;	state Exp;
branches;
next	1.17;

1.17
date	97.08.31.18.00.43;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	97.08.06.06.43.40;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.07.25.21.05.38;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	97.06.29.11.10.37;	author provos;	state Exp;
branches;
next	1.13;

1.13
date	97.06.23.09.15.07;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	97.01.17.07.13.13;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	97.01.15.23.43.06;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	96.12.22.03.26.01;	author tholo;	state Exp;
branches;
next	1.9;

1.9
date	96.11.11.05.59.47;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	96.08.11.19.20.01;	author tholo;	state Exp;
branches;
next	1.7;

1.7
date	96.07.27.10.34.31;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.06.26.05.38.33;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.06.20.03.19.22;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.06.19.10.03.43;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.17.07.15.21;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.16.22.20.34;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.00;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.00;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.31
log
@rlogin: Lived with Joy
@
text
@/*	$OpenBSD: rlogin.c,v 1.30 2002/02/19 19:39:39 millert Exp $	*/
/*	$NetBSD: rlogin.c,v 1.8 1995/10/05 09:07:22 mycroft Exp $	*/

/*
 * Copyright (c) 1983, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1990, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)rlogin.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.30 2002/02/19 19:39:39 millert Exp $";
#endif
#endif /* not lint */

/*
 * rlogin - remote login
 */
#include <sys/param.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/wait.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>

#include <errno.h>
#include <fcntl.h>
#include <netdb.h>
#include <pwd.h>
#include <setjmp.h>
#include <termios.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdarg.h>

#ifdef KERBEROS
#include <des.h>
#include <kerberosIV/krb.h>

CREDENTIALS cred;
des_key_schedule schedule;
int use_kerberos = 1, doencrypt;
char dst_realm_buf[REALM_SZ], *dest_realm = NULL;

int des_read(int, char *, int);
int des_write(int, char *, int);

int krcmd(char **, u_short, char *, char *, int *, char *);
int krcmd_mutual(char **, u_short, char *, char *, int *, char *,
    CREDENTIALS *, Key_schedule);
#endif

#ifndef TIOCPKT_WINDOW
#define	TIOCPKT_WINDOW	0x80
#endif

/* concession to Sun */
#ifndef SIGUSR1
#define	SIGUSR1	30
#endif

#ifndef CCEQ
#define CCEQ(val, c)	(c == val ? val != _POSIX_VDISABLE : 0)
#endif

int eight, rem;
struct termios deftty;

int noescape;
u_char escapechar = '~';

#ifdef OLDSUN
struct winsize {
	unsigned short ws_row, ws_col;
	unsigned short ws_xpixel, ws_ypixel;
};
#else
#define	get_window_size(fd, wp)	ioctl(fd, TIOCGWINSZ, wp)
#endif
struct	winsize winsize;

void		catch_child(int);
void		copytochild(int);
__dead void	doit(sigset_t *);
__dead void	done(int);
__dead void	sig_done(int);
void		echo(char);
u_int		getescape(char *);
void		lostpeer(int);
void		mode(int);
void		msg(char *);
void		oob(int);
int		reader(sigset_t *);
void		sendwindow(void);
void		setsignal(int);
void		sigwinch(int);
void		stop(int);
__dead void	usage(void) __attribute__((__noreturn__));
void		writer(void);
void		writeroob(int);

#ifdef	KERBEROS
void		warning(const char *, ...);
void		desrw_set_key(des_cblock *, des_key_schedule *);
#endif
#ifdef OLDSUN
int		get_window_size(int, struct winsize *);
#endif

int
main(argc, argv)
	int argc;
	char *argv[];
{
	extern char *optarg;
	extern int optind;
	struct passwd *pw;
	struct servent *sp;
	struct termios tty;
	sigset_t mask, omask;
	int argoff, ch, dflag, one, uid;
	char *host, *p, *user, term[64];
	struct sockaddr_storage ss;
	socklen_t sslen;

	argoff = dflag = 0;
	one = 1;
	host = user = NULL;

	if ((p = strrchr(argv[0], '/')))
		++p;
	else
		p = argv[0];

	if (strcmp(p, "rlogin"))
		host = p;

	/* handle "rlogin host flags" */
	if (!host && argc > 2 && argv[1][0] != '-') {
		host = argv[1];
		argoff = 1;
	}

#ifdef KERBEROS
#define	OPTIONS	"8EKLde:k:l:x"
#else
#define	OPTIONS	"8EKLde:l:"
#endif
	while ((ch = getopt(argc - argoff, argv + argoff, OPTIONS)) != -1)
		switch(ch) {
		case '8':
			eight = 1;
			break;
		case 'E':
			noescape = 1;
			break;
		case 'K':
#ifdef KERBEROS
			use_kerberos = 0;
#endif
			break;
		case 'd':
			dflag = 1;
			break;
		case 'e':
			noescape = 0;
			escapechar = getescape(optarg);
			break;
#ifdef KERBEROS
		case 'k':
			(void)strlcpy(dst_realm_buf, optarg, 
			    sizeof(dst_realm_buf));
			dest_realm = dst_realm_buf;
			break;
#endif
		case 'l':
			user = optarg;
			break;
#ifdef KERBEROS
		case 'x':
			doencrypt = 1;
			desrw_set_key(&cred.session, &schedule);
			break;
#endif
		case '?':
		default:
			usage();
		}
	optind += argoff;
	argc -= optind;
	argv += optind;

	/* if haven't gotten a host yet, do so */
	if (!host && !(host = *argv++))
		usage();

	if (*argv)
		usage();

	if (!(pw = getpwuid(uid = getuid()))) {
		(void)fprintf(stderr, "rlogin: unknown user id.\n");
		exit(1);
	}
	if (!user)
		user = pw->pw_name;

	sp = NULL;
#ifdef KERBEROS
	if (use_kerberos) {
		sp = getservbyname((doencrypt ? "eklogin" : "klogin"), "tcp");
		if (sp == NULL) {
			use_kerberos = 0;
			warning("can't get entry for %s/tcp service",
			    doencrypt ? "eklogin" : "klogin");
		}
	}
#endif
	if (sp == NULL)
		sp = getservbyname("login", "tcp");
	if (sp == NULL) {
		(void)fprintf(stderr, "rlogin: login/tcp: unknown service.\n");
		exit(1);
	}

	(void)strlcpy(term, (p = getenv("TERM")) ? p : "network",
	    sizeof(term));

	/*
	 * Add "/baud" only if there is room left; ie. do not send "/19"
	 * for 19200 baud with a particularily long $TERM
	 */
	if (tcgetattr(0, &tty) == 0) {
		char baud[20];		/* more than enough.. */

		(void)sprintf(baud, "/%d", cfgetospeed(&tty));
		if (strlen(term) + strlen(baud) < sizeof(term) - 1)
			(void)strcat(term, baud);
	}

	(void)get_window_size(0, &winsize);

	(void)signal(SIGPIPE, lostpeer);
	/* will use SIGUSR1 for window size hack, so hold it off */
	sigemptyset(&mask);
	sigaddset(&mask, SIGURG);
	sigaddset(&mask, SIGUSR1);
	sigprocmask(SIG_BLOCK, &mask, &omask);
	/*
	 * We set SIGURG and SIGUSR1 below so that an
	 * incoming signal will be held pending rather than being
	 * discarded. Note that these routines will be ready to get
	 * a signal by the time that they are unblocked below.
	 */
	(void)signal(SIGURG, copytochild);
	(void)signal(SIGUSR1, writeroob);

#ifdef KERBEROS
try_connect:
	if (use_kerberos) {
		struct hostent *hp;

		/* Fully qualify hostname (needed for krb_realmofhost). */
		hp = gethostbyname(host);
		if (hp != NULL && !(host = strdup(hp->h_name))) {
			(void)fprintf(stderr, "rlogin: %s\n",
			    strerror(ENOMEM));
			exit(1);
		}

		rem = KSUCCESS;
		errno = 0;
		if (dest_realm == NULL)
			dest_realm = krb_realmofhost(host);

		if (doencrypt)
			rem = krcmd_mutual(&host, sp->s_port, user, term, 0,
			    dest_realm, &cred, schedule);
		else
			rem = krcmd(&host, sp->s_port, user, term, 0,
			    dest_realm);
		if (rem < 0) {
			use_kerberos = 0;
			sp = getservbyname("login", "tcp");
			if (sp == NULL) {
				(void)fprintf(stderr,
				    "rlogin: unknown service login/tcp.\n");
				exit(1);
			}
			if (errno == ECONNREFUSED)
				warning("remote host doesn't support Kerberos");
			if (errno == ENOENT)
				warning("can't provide Kerberos auth data");
			goto try_connect;
		}
	} else {
		if (doencrypt) {
			(void)fprintf(stderr,
			    "rlogin: the -x flag requires Kerberos authentication.\n");
			exit(1);
		}
		rem = rcmd_af(&host, sp->s_port, pw->pw_name, user, term, 0,
		    PF_UNSPEC);
	}
#else
	rem = rcmd_af(&host, sp->s_port, pw->pw_name, user, term, 0, PF_UNSPEC);
#endif /* KERBEROS */

	if (rem < 0)
		exit(1);

	if (dflag &&
	    setsockopt(rem, SOL_SOCKET, SO_DEBUG, &one, sizeof(one)) < 0)
		(void)fprintf(stderr, "rlogin: setsockopt: %s.\n",
		    strerror(errno));

	sslen = sizeof(ss);
	if (getsockname(rem, (struct sockaddr *)&ss, &sslen) == 0 &&
	    ss.ss_family == AF_INET) {
		one = IPTOS_LOWDELAY;
		if (setsockopt(rem, IPPROTO_IP, IP_TOS, (char *)&one,
		    sizeof(int)) < 0)
			perror("rlogin: setsockopt TOS (ignored)");
	}

	(void)seteuid(uid);
	(void)setuid(uid);
	doit(&omask);
	/*NOTREACHED*/

	return 0;
}

pid_t child;

void
doit(omask)
	sigset_t *omask;
{
	struct sigaction sa;

	(void)signal(SIGINT, SIG_IGN);
	setsignal(SIGHUP);
	setsignal(SIGQUIT);
	mode(1);
	child = fork();
	if (child == -1) {
		(void)fprintf(stderr, "rlogin: fork: %s.\n", strerror(errno));
		done(1);
	}
	if (child == 0) {
		(void)signal(SIGCHLD, SIG_DFL);
		if (reader(omask) == 0) {
			msg("connection closed.");
			exit(0);
		}
		sleep(1);

		msg("\aconnection closed.");
		exit(1);
	}

	/*
	 * Use sigaction() instead of signal() to avoid getting SIGCHLDs
	 * for stopped children.
	 */
	memset(&sa, 0, sizeof sa);
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART | SA_NOCLDSTOP;
	sa.sa_handler = catch_child;
	(void)sigaction(SIGCHLD, &sa, NULL);

	/*
	 * We may still own the socket, and may have a pending SIGURG (or might
	 * receive one soon) that we really want to send to the reader.  When
	 * one of these comes in, the trap copytochild simply copies such
	 * signals to the child. We can now unblock SIGURG and SIGUSR1
	 * that were set above.
	 */
	(void)sigprocmask(SIG_SETMASK, omask, NULL);
	writer();
	msg("closed connection.");
	done(0);
}

/* trap a signal, unless it is being ignored. */
void
setsignal(sig)
	int sig;
{
	sigset_t mask, omask;

	sigemptyset(&mask);
	sigaddset(&mask, sig);
	sigprocmask(SIG_BLOCK, &mask, &omask);

	if (signal(sig, exit) == SIG_IGN)
		(void)signal(sig, SIG_IGN);

	sigprocmask(SIG_SETMASK, &omask, NULL);
}

__dead void
done(status)
	int status;
{
	int w, wstatus;

	mode(0);
	if (child > 0) {
		/* make sure catch_child does not snap it up */
		(void)signal(SIGCHLD, SIG_DFL);
		if (kill(child, SIGKILL) >= 0)
			while ((w = wait(&wstatus)) > 0 && w != child)
				;
	}
	exit(status);
}

__dead void
sig_done(status)
	int status;
{
	int w, wstatus;

	mode(0);
	if (child > 0) {
		/* make sure catch_child does not snap it up */
		(void)signal(SIGCHLD, SIG_DFL);
		if (kill(child, SIGKILL) >= 0)
			while ((w = wait(&wstatus)) > 0 && w != child)
				;
	}
	_exit(status);
}

int dosigwinch;

/*
 * This is called when the reader process gets the out-of-band (urgent)
 * request to turn on the window-changing protocol.
 */
void
writeroob(signo)
	int signo;
{
	if (dosigwinch == 0) {
		sendwindow();
		(void)signal(SIGWINCH, sigwinch);
	}
	dosigwinch = 1;
}

void
catch_child(signo)
	int signo;
{
	int save_errno = errno;
	int status;
	pid_t pid;

	for (;;) {
		pid = wait3(&status, WNOHANG, NULL);
		if (pid == 0)
			break;
		/* if the child (reader) dies, just quit */
		if (pid == child && !WIFSTOPPED(status)) {
			child = -1;
			if (WIFEXITED(status))
				sig_done(WEXITSTATUS(status));
			sig_done(WTERMSIG(status));
		}
	}
	errno = save_errno;
}

/*
 * writer: write to remote: 0 -> line.
 * ~.				terminate
 * ~^Z				suspend rlogin process.
 * ~<delayed-suspend char>	suspend rlogin process, but leave reader alone.
 */
void
writer()
{
	int bol, local, n;
	char c;

	bol = 1;			/* beginning of line */
	local = 0;
	for (;;) {
		n = read(STDIN_FILENO, &c, 1);
		if (n <= 0) {
			if (n < 0 && errno == EINTR)
				continue;
			break;
		}
		/*
		 * If we're at the beginning of the line and recognize a
		 * command character, then we echo locally.  Otherwise,
		 * characters are echo'd remotely.  If the command character
		 * is doubled, this acts as a force and local echo is
		 * suppressed.
		 */
		if (bol) {
			bol = 0;
			if (!noescape && c == escapechar) {
				local = 1;
				continue;
			}
		} else if (local) {
			local = 0;
			if (c == '.' || CCEQ(deftty.c_cc[VEOF], c)) {
				echo(c);
				break;
			}
			if (CCEQ(deftty.c_cc[VSUSP], c)) {
				bol = 1;
				echo(c);
				stop(1);
				continue;
			}
			if (CCEQ(deftty.c_cc[VDSUSP], c)) {
				bol = 1;
				echo(c);
				stop(0);
				continue;
			}
			if (c != escapechar) {
#ifdef KERBEROS
				if (doencrypt)
					(void)des_write(rem,
					    (char *)&escapechar, 1);
				else
#endif
					(void)write(rem, &escapechar, 1);
			}
		}

#ifdef KERBEROS
		if (doencrypt) {
			if (des_write(rem, &c, 1) == 0) {
				msg("line gone");
				break;
			}
		} else
#endif
			if (write(rem, &c, 1) == 0) {
				msg("line gone");
				break;
			}
		bol = CCEQ(deftty.c_cc[VKILL], c) ||
		    CCEQ(deftty.c_cc[VEOF], c) ||
		    CCEQ(deftty.c_cc[VINTR], c) ||
		    CCEQ(deftty.c_cc[VSUSP], c) ||
		    c == '\r' || c == '\n';
	}
}

void
echo(char c)
{
	char *p;
	char buf[8];

	p = buf;
	c &= 0177;
	*p++ = escapechar;
	if (c < ' ') {
		*p++ = '^';
		*p++ = c + '@@';
	} else if (c == 0177) {
		*p++ = '^';
		*p++ = '?';
	} else
		*p++ = c;
	*p++ = '\r';
	*p++ = '\n';
	(void)write(STDOUT_FILENO, buf, p - buf);
}

void
stop(all)
	int all;
{
	mode(0);
	(void)kill(all ? 0 : getpid(), SIGTSTP);
	mode(1);
	sigwinch(0);			/* check for size changes */
}

void
sigwinch(signo)
	int signo;
{
	struct winsize ws;

	if (dosigwinch && get_window_size(0, &ws) == 0 &&
	    bcmp(&ws, &winsize, sizeof(ws))) {
		winsize = ws;
		sendwindow();
	}
}

/*
 * Send the window size to the server via the magic escape
 */
void
sendwindow()
{
	struct winsize *wp;
	char obuf[4 + sizeof (struct winsize)];

	wp = (struct winsize *)(obuf+4);
	obuf[0] = 0377;
	obuf[1] = 0377;
	obuf[2] = 's';
	obuf[3] = 's';
	wp->ws_row = htons(winsize.ws_row);
	wp->ws_col = htons(winsize.ws_col);
	wp->ws_xpixel = htons(winsize.ws_xpixel);
	wp->ws_ypixel = htons(winsize.ws_ypixel);

#ifdef KERBEROS
	if(doencrypt)
		(void)des_write(rem, obuf, sizeof(obuf));
	else
#endif
		(void)write(rem, obuf, sizeof(obuf));
}

/*
 * reader: read from remote: line -> 1
 */
#define	READING	1
#define	WRITING	2

jmp_buf rcvtop;
pid_t ppid;
int rcvcnt, rcvstate;
char rcvbuf[8 * 1024];

void
oob(signo)
	int signo;
{
	struct termios tty;
	int atmark, n, rcvd;
	int save_errno = errno;
	char waste[BUFSIZ], mark;

	rcvd = 0;
	while (recv(rem, &mark, 1, MSG_OOB) < 0) {
		switch (errno) {
		case EWOULDBLOCK:
			/*
			 * Urgent data not here yet.  It may not be possible
			 * to send it yet if we are blocked for output and
			 * our input buffer is full.
			 */
			if (rcvcnt < sizeof(rcvbuf)) {
				n = read(rem, rcvbuf + rcvcnt,
				    sizeof(rcvbuf) - rcvcnt);
				if (n <= 0) {
					errno = save_errno;
					return;
				}
				rcvd += n;
			} else {
				n = read(rem, waste, sizeof(waste));
				if (n <= 0) {
					errno = save_errno;
					return;
				}
			}
			continue;
		default:
			errno = save_errno;
			return;
		}
	}
	if (mark & TIOCPKT_WINDOW && ppid > 1) {
		/* Let server know about window size changes */
		(void)kill(ppid, SIGUSR1);
	}
	if (!eight && (mark & TIOCPKT_NOSTOP)) {
		(void)tcgetattr(0, &tty);
		tty.c_iflag &= ~IXON;
		(void)tcsetattr(0, TCSANOW, &tty);
	}
	if (!eight && (mark & TIOCPKT_DOSTOP)) {
		(void)tcgetattr(0, &tty);
		tty.c_iflag |= (deftty.c_iflag & IXON);
		(void)tcsetattr(0, TCSANOW, &tty);
	}
	if (mark & TIOCPKT_FLUSHWRITE) {
		(void)tcflush(1, TCIOFLUSH);
		for (;;) {
			if (ioctl(rem, SIOCATMARK, &atmark) < 0) {
				(void)fprintf(stderr, "rlogin: ioctl: %s.\n",
				    strerror(errno));
				break;
			}
			if (atmark)
				break;
			n = read(rem, waste, sizeof (waste));
			if (n <= 0)
				break;
		}
		/*
		 * Don't want any pending data to be output, so clear the recv
		 * buffer.  If we were hanging on a write when interrupted,
		 * don't want it to restart.  If we were reading, restart
		 * anyway.
		 */
		rcvcnt = 0;
		longjmp(rcvtop, 1);
	}

	/* oob does not do FLUSHREAD (alas!) */

	/*
	 * If we filled the receive buffer while a read was pending, longjmp
	 * to the top to restart appropriately.  Don't abort a pending write,
	 * however, or we won't know how much was written.
	 */
	if (rcvd && rcvstate == READING)
		longjmp(rcvtop, 1);
	errno = save_errno;
}

/* reader: read from remote: line -> 1 */
int
reader(omask)
	sigset_t *omask;
{
	pid_t pid;
	int n, remaining;
	char *bufp;

	pid = getpid();		/* modern systems use positives for pid */
	(void)signal(SIGTTOU, SIG_IGN);
	(void)signal(SIGURG, oob);
	ppid = getppid();
	(void)fcntl(rem, F_SETOWN, pid);
	(void)setjmp(rcvtop);
	(void)sigprocmask(SIG_SETMASK, omask, NULL);
	bufp = rcvbuf;
	for (;;) {
		while ((remaining = rcvcnt - (bufp - rcvbuf)) > 0) {
			rcvstate = WRITING;
			n = write(STDOUT_FILENO, bufp, remaining);
			if (n < 0) {
				if (errno != EINTR)
					return (-1);
				continue;
			}
			bufp += n;
		}
		bufp = rcvbuf;
		rcvcnt = 0;
		rcvstate = READING;

#ifdef KERBEROS
		if (doencrypt)
			rcvcnt = des_read(rem, rcvbuf, sizeof(rcvbuf));
		else
#endif
			rcvcnt = read(rem, rcvbuf, sizeof (rcvbuf));
		if (rcvcnt == 0)
			return (0);
		if (rcvcnt < 0) {
			if (errno == EINTR)
				continue;
			(void)fprintf(stderr, "rlogin: read: %s.\n",
			    strerror(errno));
			return (-1);
		}
	}
}

void
mode(f)
	int f;
{
	struct termios tty;

	switch (f) {
	case 0:
		(void)tcsetattr(0, TCSANOW, &deftty);
		break;
	case 1:
		(void)tcgetattr(0, &deftty);
		tty = deftty;
		/* This is loosely derived from sys/compat/tty_compat.c. */
		tty.c_lflag &= ~(ECHO|ICANON|ISIG|IEXTEN);
		tty.c_iflag &= ~ICRNL;
		tty.c_oflag &= ~OPOST;
		tty.c_cc[VMIN] = 1;
		tty.c_cc[VTIME] = 0;
		if (eight) {
			tty.c_iflag &= IXOFF;
			tty.c_cflag &= ~(CSIZE|PARENB);
			tty.c_cflag |= CS8;
		}
		(void)tcsetattr(0, TCSANOW, &tty);
		break;
	default:
		return;
	}
}

void
lostpeer(signo)
	int signo;
{
	(void)signal(SIGPIPE, SIG_IGN);
	msg("\aconnection closed.");
	done(1);
}

/* copy SIGURGs to the child process. */
void
copytochild(signo)
	int signo;
{
	int save_errno = errno;
	(void)kill(child, SIGURG);
	errno = save_errno;
}

void
msg(str)
	char *str;
{
	(void)fprintf(stderr, "rlogin: %s\r\n", str);
}

#ifdef KERBEROS
/* VARARGS */
void
warning(const char *fmt, ...)
{
	char myrealm[REALM_SZ];
	va_list ap;

	if (krb_get_lrealm(myrealm, 0) != KSUCCESS)
		return;
	(void)fprintf(stderr, "rlogin: warning, using standard rlogin: ");
	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);
	(void)fprintf(stderr, ".\n");
}
#endif

__dead void
usage()
{
	(void)fprintf(stderr,
	    "usage: rlogin [ -%s]%s[-e char] [ -l username ] host\n",
#ifdef KERBEROS
	    "8EKLx", " [-k realm] ");
#else
	    "8EL", " ");
#endif
	exit(1);
}

/*
 * The following routine provides compatibility (such as it is) between older
 * Suns and others.  Suns have only a `ttysize', so we convert it to a winsize.
 */
#ifdef OLDSUN
int
get_window_size(fd, wp)
	int fd;
	struct winsize *wp;
{
	struct ttysize ts;
	int error;

	if ((error = ioctl(0, TIOCGSIZE, &ts)) != 0)
		return (error);
	wp->ws_row = ts.ts_lines;
	wp->ws_col = ts.ts_cols;
	wp->ws_xpixel = 0;
	wp->ws_ypixel = 0;
	return (0);
}
#endif

u_int
getescape(p)
	char *p;
{
	long val;
	int len;

	if ((len = strlen(p)) == 1)	/* use any single char, including '\' */
		return ((u_int)*p);
					/* otherwise, \nnn */
	if (*p == '\\' && len >= 2 && len <= 4) {
		val = strtol(++p, NULL, 8);
		for (;;) {
			if (!*++p)
				return ((u_int)val);
			if (*p < '0' || *p > '8')
				break;
		}
	}
	msg("illegal option value -- e");
	usage();
	/* NOTREACHED */
}
@


1.30
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.29 2002/02/17 19:42:31 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.29 2002/02/17 19:42:31 millert Exp $";
@


1.29
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.28 2002/02/16 21:27:51 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.28 2002/02/16 21:27:51 millert Exp $";
a75 2

#ifdef __STDC__
a76 3
#else
#include <varargs.h>
#endif
a601 1
#ifdef __STDC__
a602 4
#else
echo(c)
	char c;
#endif
a882 1
#ifdef __STDC__
a883 5
#else
warning(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
a890 1
#ifdef __STDC__
a891 3
#else
	va_start(ap);
#endif
@


1.28
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.27 2001/11/19 19:02:16 mpech Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.27 2001/11/19 19:02:16 mpech Exp $";
d96 2
a97 2
int krcmd_mutual __P((char **, u_short, char *, char *, int *, char *,
		      CREDENTIALS *, Key_schedule));
@


1.27
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.26 2001/11/16 23:57:12 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.26 2001/11/16 23:57:12 deraadt Exp $";
d92 2
a93 2
int des_read __P((int, char *, int));
int des_write __P((int, char *, int));
d95 1
a95 1
int krcmd __P((char **, u_short, char *, char *, int *, char *));
d129 19
a147 19
void		catch_child __P((int));
void		copytochild __P((int));
__dead void	doit __P((sigset_t *));
__dead void	done __P((int));
__dead void	sig_done __P((int));
void		echo __P((char));
u_int		getescape __P((char *));
void		lostpeer __P((int));
void		mode __P((int));
void		msg __P((char *));
void		oob __P((int));
int		reader __P((sigset_t *));
void		sendwindow __P((void));
void		setsignal __P((int));
void		sigwinch __P((int));
void		stop __P((int));
__dead void	usage __P((void)) __attribute__((__noreturn__));
void		writer __P((void));
void		writeroob __P((int));
d150 2
a151 2
void		warning __P((const char *, ...));
void		desrw_set_key __P((des_cblock *, des_key_schedule *));
d154 1
a154 1
int		get_window_size __P((int, struct winsize *));
@


1.26
log
@signal handler is now safe, does not end up calling exit()
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.25 2001/10/02 01:14:55 art Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.25 2001/10/02 01:14:55 art Exp $";
d532 1
a532 1
	register int bol, local, n;
d608 1
a608 1
echo(register char c)
d611 1
a611 1
	register char c;
d614 1
a614 1
	register char *p;
d956 1
a956 1
	register char *p;
@


1.25
log
@Be a bit more careful when sending signals to the parent.
Don't send SIGUSR1 to init.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.24 2001/09/04 23:35:59 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.24 2001/09/04 23:35:59 millert Exp $";
d133 1
d466 17
d516 2
a517 2
				done(WEXITSTATUS(status));
			done(WTERMSIG(status));
@


1.24
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.23 2001/07/03 23:47:05 jasoni Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.23 2001/07/03 23:47:05 jasoni Exp $";
d715 1
a715 1
	if (mark & TIOCPKT_WINDOW) {
@


1.23
log
@-Wall cleanup
strncpy -> strlcpy
- with input from millert@@, ok millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.22 2000/01/27 05:27:42 itojun Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.22 2000/01/27 05:27:42 itojun Exp $";
d131 1
a131 1
__dead void	doit __P((int));
d139 1
a139 1
int		reader __P((int));
d166 1
a166 1
	int omask;
d290 4
a293 1
	omask = sigblock(sigmask(SIGURG) | sigmask(SIGUSR1));
d373 1
a373 1
	doit(omask);
d383 1
a383 1
	int omask;
d425 1
a425 1
	(void)sigsetmask(omask);
d436 5
a440 1
	int omask = sigblock(sigmask(sig));
d444 2
a445 1
	(void)sigsetmask(omask);
d768 1
a768 1
	int omask;
d780 1
a780 1
	(void)sigsetmask(omask);
@


1.22
log
@enable IPv6 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.21 1998/07/12 08:07:12 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.21 1998/07/12 08:07:12 deraadt Exp $";
d144 1
a144 1
__dead void	usage __P((void));
d217 2
a218 3
			(void)strncpy(dst_realm_buf, optarg,
			    sizeof dst_realm_buf-1);
			dst_realm_buf[sizeof dst_realm_buf-1] = '\0';
d271 2
a272 3
	(void)strncpy(term, (p = getenv("TERM")) ? p : "network",
	    sizeof(term) - 1);
	term[sizeof(term) - 1] = '\0';
@


1.21
log
@strncpy correctly; remove old code
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.20 1998/06/03 16:20:33 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.20 1998/06/03 16:20:33 deraadt Exp $";
d169 2
d346 2
a347 1
		rem = rcmd(&host, sp->s_port, pw->pw_name, user, term, 0);
d350 1
a350 1
	rem = rcmd(&host, sp->s_port, pw->pw_name, user, term, 0);
d360 9
a368 3
	one = IPTOS_LOWDELAY;
	if (setsockopt(rem, IPPROTO_IP, IP_TOS, (char *)&one, sizeof(int)) < 0)
		perror("rlogin: setsockopt TOS (ignored)");
@


1.20
log
@zero sigaction before use
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.19 1998/03/25 20:22:08 art Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.19 1998/03/25 20:22:08 art Exp $";
d215 3
a218 1
			(void)strncpy(dest_realm, optarg, REALM_SZ);
a758 1
#if BSD >= 43 || defined(SUNOS4)
a759 3
#else
	pid = -getpid();	/* old broken systems use negatives */
#endif
@


1.19
log
@satisfy -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.18 1997/09/03 18:01:01 kstailey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.18 1997/09/03 18:01:01 kstailey Exp $";
d400 1
@


1.18
log
@Brain damage on theo's part.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.17 1997/08/31 18:00:43 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.17 1997/08/31 18:00:43 deraadt Exp $";
d91 7
d363 2
d539 1
a539 1
			if (c != escapechar)
d547 1
@


1.17
log
@SIGCHLD cleanup from bde. type fixes, union wait removal, -Wall cleanup,
and pid reuse race fixed by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.16 1997/08/06 06:43:40 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.16 1997/08/06 06:43:40 deraadt Exp $";
d383 4
a394 4

		msg("\aconnection closed.");
		exit(1);
	}
@


1.16
log
@save errno in mangly handlers
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.15 1997/07/25 21:05:38 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.15 1997/07/25 21:05:38 mickey Exp $";
d167 1
a167 1
	if (p = strrchr(argv[0], '/'))
d358 1
a358 1
int child;
d364 1
d376 1
d382 10
a403 1
	(void)signal(SIGCHLD, catch_child);
d432 2
a433 1
			while ((w = wait(&wstatus)) > 0 && w != child);
a458 1
	union wait status;
d460 2
a461 1
	int pid;
d464 1
a464 1
		pid = wait3((int *)&status, WNOHANG|WUNTRACED, NULL);
d468 6
a473 2
		if (pid < 0 || (pid == child && !WIFSTOPPED(status)))
			done((int)(status.w_termsig | status.w_retcode));
a591 1
	(void)signal(SIGCHLD, SIG_IGN);
a592 1
	(void)signal(SIGCHLD, catch_child);
d644 2
a645 1
int ppid, rcvcnt, rcvstate;
d742 2
a743 1
	int pid, n, remaining;
@


1.15
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.14 1997/06/29 11:10:37 provos Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.14 1997/06/29 11:10:37 provos Exp $";
d448 1
d454 1
a454 1
			return;
d459 1
a459 1
	/* NOTREACHED */
d639 1
d654 2
a655 1
				if (n <= 0)
d657 1
d661 2
a662 1
				if (n <= 0)
d664 1
d668 1
d719 1
d820 1
d822 1
@


1.14
log
@new location of des.h
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.13 1997/06/23 09:15:07 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.13 1997/06/23 09:15:07 deraadt Exp $";
d544 1
a544 1
#if __STDC__
d825 1
a825 1
#if __STDC__
@


1.13
log
@sigblock mask is int, not long
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.12 1997/01/17 07:13:13 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.12 1997/01/17 07:13:13 millert Exp $";
d84 1
a84 1
#include <kerberosIV/des.h>
@


1.12
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.11 1997/01/15 23:43:06 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.11 1997/01/15 23:43:06 millert Exp $";
d124 1
a124 1
__dead void	doit __P((long));
d159 1
a159 1
	long omask;
d362 1
a362 1
	long omask;
@


1.11
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.10 1996/12/22 03:26:01 tholo Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.10 1996/12/22 03:26:01 tholo Exp $";
d167 1
a167 1
	if (p = rindex(argv[0], '/'))
@


1.10
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.9 1996/11/11 05:59:47 mickey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.9 1996/11/11 05:59:47 mickey Exp $";
d186 1
a186 1
	while ((ch = getopt(argc - argoff, argv + argoff, OPTIONS)) != EOF)
@


1.9
log
@type casts
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.8 1996/08/11 19:20:01 tholo Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.8 1996/08/11 19:20:01 tholo Exp $";
d352 1
@


1.8
log
@Be quiet about Kerberos failures if Kerberos has not been set up locally
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.7 1996/07/27 10:34:31 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.7 1996/07/27 10:34:31 deraadt Exp $";
d88 1
a88 1
Key_schedule schedule;
d143 1
d218 1
a218 1
			desrw_set_key(&cred.session, schedule);
@


1.7
log
@VMIN=1/VTIME=0; netbsd pr#2546
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.6 1996/06/26 05:38:33 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.6 1996/06/26 05:38:33 deraadt Exp $";
d831 1
d834 2
@


1.6
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: rlogin.c,v 1.8 1995/10/05 09:07:22 mycroft Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: rlogin.c,v 1.8 1995/10/05 09:07:22 mycroft Exp $";
d782 2
@


1.5
log
@max 64 chars for TERM; rlogind accepts no more
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: rlogin.c,v 1.8 1995/10/05 09:07:22 mycroft Exp $";
@


1.4
log
@do not overflow term buffer, noted initially by darren reed. my own fix
@
text
@d159 1
a159 1
	char *host, *p, *user, term[1024];
@


1.3
log
@Make encrypted Kerberos logins work
@
text
@d259 8
a266 1
	(void)strcpy(term, (p = getenv("TERM")) ? p : "network");
d268 5
a272 2
		(void)strcat(term, "/");
		(void)sprintf(term + strlen(term), "%d", cfgetospeed(&tty));
@


1.2
log
@Make it possible to build without SKEY support
Add support for building with kerberosIV
@
text
@d216 1
a216 1
			des_set_key(&cred.session, schedule);
@


1.1
log
@Initial revision
@
text
@a85 2
#include "krb.h"

a212 1
#ifdef CRYPT
d216 1
a216 1
			des_set_key(cred.session, schedule);
a218 1
#endif
a296 1
#ifdef CRYPT
a300 1
#endif /* CRYPT */
a317 1
#ifdef CRYPT
a322 1
#endif /* CRYPT */
a500 1
#ifdef CRYPT
a506 1
#endif
a509 1
#ifdef CRYPT
a517 1
#endif
a600 1
#ifdef CRYPT
a605 1
#endif
a735 1
#ifdef CRYPT
a740 1
#endif
a837 1
#ifdef CRYPT
a838 3
#else
	    "8EKL", " [-k realm] ");
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
