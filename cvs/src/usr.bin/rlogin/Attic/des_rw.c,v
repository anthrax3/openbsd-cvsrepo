head	1.11;
access;
symbols
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.16
	OPENBSD_2_8:1.7.0.14
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2002.05.06.22.23.53;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.51;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.19.19.02.16;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.17.02.13.29;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	97.06.29.11.10.36;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.06.24.01.51.13;	author dgregor;	state Exp;
branches;
next	1.5;

1.5
date	96.11.11.05.59.44;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.06.26.05.38.30;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.17.07.15.17;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.16.22.20.31;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.00;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.00;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@rlogin: Lived with Joy
@
text
@/*	$OpenBSD: des_rw.c,v 1.10 2002/02/16 21:27:51 millert Exp $	*/
/*	$NetBSD: des_rw.c,v 1.2 1995/03/21 07:58:30 cgd Exp $	*/

/*-
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)des_rw.c	8.1 (Berkeley) 6/6/93";
#else
static char rcsid[] = "$OpenBSD: des_rw.c,v 1.10 2002/02/16 21:27:51 millert Exp $";
#endif
#endif /* not lint */

#ifdef KERBEROS
#include <sys/param.h>

#include <des.h>
#include <kerberosIV/krb.h>

#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

void	desrw_set_key(des_cblock *, des_key_schedule *);
void	desrw_clear_key(void);
int	des_read(int, char *, int);
int	des_write(int, char *, int);

static unsigned char	des_inbuf[10240], storage[10240], *store_ptr;
static des_cblock 	*key;
static des_key_schedule	*key_schedule;

/*
 * NB: These routines will not function properly if NBIO
 * 	is set
 */

/*
 * des_set_key
 *
 * Set des encryption/decryption key for use by the des_read and
 * des_write routines
 *
 * The inkey parameter is actually the DES initial vector,
 * and the insched is the DES Key unwrapped for faster decryption
 */
static int nstored = 0;

void
desrw_set_key(inkey, insched)
	des_cblock 	*inkey;
	des_key_schedule*insched;
{
	key = inkey;
	key_schedule = insched;
	nstored = 0;
}

void
desrw_clear_key()
{
	bzero((char *) key, sizeof(C_Block));
	bzero((char *) key_schedule, sizeof(Key_schedule));
}
	

int
des_read(fd, buf, len)
	int fd;
	char *buf;
	int len;
{
	long net_len, rd_len;
	int nreturned = 0;

	if (nstored >= len) {
		(void) bcopy(store_ptr, buf, len);
		store_ptr += len;
		nstored -= len;
		return(len);
	} else if (nstored) {
		(void) bcopy(store_ptr, buf, nstored);
		nreturned += nstored;
		buf += nstored;
		len -= nstored;
		nstored = 0;
	}
	
	if (krb_net_read(fd, (char *)&net_len, sizeof(net_len)) !=
	    sizeof(net_len)) {
		/* XXX can't read enough, pipe
		   must have closed */
		return(0);
	}
	net_len = ntohl(net_len);
	if (net_len <= 0 || net_len > sizeof(des_inbuf)) {
		/* preposterous length; assume out-of-sync; only
		   recourse is to close connection, so return 0 */
		return(0);
	}
	/* the writer tells us how much real data we are getting, but
	   we need to read the pad bytes (8-byte boundary) */
	rd_len = roundup(net_len, 8);
	if (krb_net_read(fd, (char *)des_inbuf, rd_len) != rd_len) {
		/* pipe must have closed, return 0 */
		return(0);
	}
	(void) des_pcbc_encrypt((des_cblock *)des_inbuf,	/* inbuf */
			    (des_cblock *)storage,		/* outbuf */
			    rd_len,				/* length */
			    *key_schedule,			/* DES key */
			    key,				/* IV */
			    DECRYPT);				/* direction */

	if(net_len < 8)
		store_ptr = storage + 8 - net_len;
	else
		store_ptr = storage;

	nstored = net_len;
	if (nstored > len) {
		(void) bcopy(store_ptr, buf, len);
		nreturned += len;
		store_ptr += len;
		nstored -= len;
	} else {
		(void) bcopy(store_ptr, buf, nstored);
		nreturned += nstored;
		nstored = 0;
	}
	
	return(nreturned);
}

static unsigned char	des_outbuf[10240];	/* > longest write */

int
des_write(fd, buf, len)
	int fd;
	char *buf;
	int len;
{
	static	int	seeded = 0;
	static	char	garbage_buf[8];
	long net_len, garbage;

	if(len < 8) {
		if(!seeded) {
			seeded = 1;
			srandom((int) time(NULL));
		}
		garbage = random();
		/* insert random garbage */
		(void) bcopy(&garbage, garbage_buf, MIN(sizeof(long),8));
		/* this "right-justifies" the data in the buffer */
		(void) bcopy(buf, garbage_buf + 8 - len, len);
	}
	/* pcbc_encrypt outputs in 8-byte (64 bit) increments */

	(void) des_pcbc_encrypt((des_cblock *)((len < 8) ? garbage_buf : buf),
			    (des_cblock *)des_outbuf,
			    (len < 8) ? 8 : len,
			    *key_schedule,		/* DES key */
			    key,			/* IV */
			    ENCRYPT);

	/* tell the other end the real amount, but send an 8-byte padded
	   packet */
	net_len = htonl(len);
	(void) write(fd, &net_len, sizeof(net_len));
	(void) write(fd, des_outbuf, roundup(len,8));
	return(len);
}
#endif /* KERBEROS */
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: des_rw.c,v 1.9 2001/11/19 19:02:16 mpech Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: des_rw.c,v 1.9 2001/11/19 19:02:16 mpech Exp $";
@


1.9
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: des_rw.c,v 1.8 2001/07/17 02:13:29 pvalchev Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: des_rw.c,v 1.8 2001/07/17 02:13:29 pvalchev Exp $";
d56 4
a59 4
void	desrw_set_key __P((des_cblock *, des_key_schedule *));
void	desrw_clear_key __P((void));
int	des_read __P((int, char *, int));
int	des_write __P((int, char *, int));
@


1.8
log
@missing prototypes; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: des_rw.c,v 1.7 1997/06/29 11:10:36 provos Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: des_rw.c,v 1.7 1997/06/29 11:10:36 provos Exp $";
d102 1
a102 1
	register char *buf;
@


1.7
log
@new location of des.h
@
text
@d1 1
a1 1
/*	$OpenBSD: des_rw.c,v 1.6 1997/06/24 01:51:13 dgregor Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: des_rw.c,v 1.6 1997/06/24 01:51:13 dgregor Exp $";
d55 5
@


1.6
log
@(long *)0 -> NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: des_rw.c,v 1.5 1996/11/11 05:59:44 mickey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: des_rw.c,v 1.5 1996/11/11 05:59:44 mickey Exp $";
d48 1
a48 1
#include <kerberosIV/des.h>
@


1.5
log
@type casts
@
text
@d1 1
a1 1
/*	$OpenBSD: des_rw.c,v 1.4 1996/06/26 05:38:30 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: des_rw.c,v 1.4 1996/06/26 05:38:30 deraadt Exp $";
d177 1
a177 1
			srandom((int) time((long *)0));
@


1.4
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: des_rw.c,v 1.2 1995/03/21 07:58:30 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: des_rw.c,v 1.2 1995/03/21 07:58:30 cgd Exp $";
d57 2
a58 2
static bit_64		*key;
static u_char		*key_schedule;
d78 2
a79 2
	bit_64		*inkey;
	u_char		*insched;
d138 2
a139 2
			    key_schedule,			/* DES key */
			    (des_cblock *)key,			/* IV */
d190 2
a191 2
			    key_schedule,		/* DES key */
			    (des_cblock *)key,		/* IV */
@


1.3
log
@Make encrypted Kerberos logins work
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: des_rw.c,v 1.2 1995/03/21 07:58:30 cgd Exp $";
@


1.2
log
@Make it possible to build without SKEY support
Add support for building with kerberosIV
@
text
@d55 3
a57 11
static des_cblock	des_inbuf[10240], storage[10240], *store_ptr;
static des_cblock	*key;
static des_key_schedule	key_schedule;

/* XXX these should be in a kerberos include file */
int	krb_net_read __P((int, char *, int));
#ifdef notdef
/* XXX too hard to make this work */
int	des_pcbc_encrypt __P((des_cblock *, des_cblock *, long,
	    des_key_schedule, des_cblock *, int));
#endif
d73 1
d75 4
a78 4
int
des_set_key(inkey, insched)
	des_cblock		*inkey;
	des_key_schedule	insched;
d81 2
a82 3
	bcopy(insched, key_schedule, sizeof(key_schedule));

	return 0;
d86 1
a86 1
des_clear_key()
d99 1
a100 2
	long net_len, rd_len;
	int nstored = 0;
d134 6
a139 6
	(void) des_pcbc_encrypt(des_inbuf,	/* inbuf */
			    storage,		/* outbuf */
			    net_len,		/* length */
			    key_schedule,	/* DES key */
			    key,		/* IV */
			    DECRYPT);		/* direction */
d161 1
a161 1
static	des_cblock des_outbuf[10240];	/* > longest write */
d170 1
a170 1
	static	des_cblock	garbage_buf[8];
d186 2
a187 2
	(void) des_pcbc_encrypt((len < 8) ? garbage_buf : (des_cblock *)buf,
			    des_outbuf,
d189 2
a190 2
			    key_schedule,	/* DES key */
			    key,		/* IV */
@


1.1
log
@Initial revision
@
text
@a43 1
#ifdef CRYPT
d55 3
a57 3
static unsigned char	des_inbuf[10240], storage[10240], *store_ptr;
static bit_64		*key;
static u_char		*key_schedule;
d82 1
a82 1
void
d84 2
a85 2
	bit_64		*inkey;
	u_char		*insched;
d88 3
a90 1
	key_schedule = insched;
d170 1
a170 1
static	unsigned char des_outbuf[10240];	/* > longest write */
d179 1
a179 1
	static	char	garbage_buf[8];
d195 1
a195 1
	(void) des_pcbc_encrypt((len < 8) ? garbage_buf : buf,
a209 1
#endif /* CRYPT */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
