head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.11.17.18.25.02;	author tobias;	state Exp;
branches;
next	1.8;
commitid	FhbAgvR7WtTmuXiY;

1.8
date	2015.09.25.16.16.26;	author tedu;	state Exp;
branches;
next	1.7;
commitid	ufT3acxBNu7Ulbo5;

1.7
date	2015.06.17.20.50.10;	author nicm;	state Exp;
branches;
next	1.6;
commitid	cmfhUvqj2nJhmKMW;

1.6
date	2015.04.29.04.00.25;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	bgNifxVaPtXhk3GY;

1.5
date	2015.02.05.12.59.57;	author millert;	state Exp;
branches;
next	1.4;
commitid	DTQbfd4poqBW8iSJ;

1.4
date	2013.08.19.20.21.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2010.08.04.21.28.17;	author ray;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.07.08.39.13;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.29.18.24.56;	author ray;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Merge xmalloc.[ch] files across base, skipping OpenSSH for now.

ok nicm
@
text
@/* $OpenBSD: xmalloc.c,v 1.8 2015/09/25 16:16:26 tedu Exp $ */
/*
 * Author: Tatu Ylonen <ylo@@cs.hut.fi>
 * Copyright (c) 1995 Tatu Ylonen <ylo@@cs.hut.fi>, Espoo, Finland
 *                    All rights reserved
 * Versions of malloc and friends that check their results, and never return
 * failure (they call fatal if they encounter an error).
 *
 * As far as I am concerned, the code I have written for this software
 * can be used freely for any purpose.  Any derived versions of this
 * software must be clearly marked as such, and if the derived work is
 * incompatible with the protocol description in the RFC file, it must be
 * called by a name other than "ssh" or "Secure Shell".
 */

#include <err.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "xmalloc.h"

void *
xmalloc(size_t size)
{
	void *ptr;

	if (size == 0)
		errx(2, "xmalloc: zero size");
	ptr = malloc(size);
	if (ptr == NULL)
		err(2, "xmalloc: allocating %zu bytes", size);
	return ptr;
}

void *
xcalloc(size_t nmemb, size_t size)
{
	void *ptr;

	ptr = calloc(nmemb, size);
	if (ptr == NULL)
		err(2, "xcalloc: allocating %zu * %zu bytes", nmemb, size);
	return ptr;
}

void *
xreallocarray(void *ptr, size_t nmemb, size_t size)
{
	void *new_ptr;

	new_ptr = reallocarray(ptr, nmemb, size);
	if (new_ptr == NULL)
		err(2, "xreallocarray: allocating %zu * %zu bytes",
		    nmemb, size);
	return new_ptr;
}

char *
xstrdup(const char *str)
{
	char *cp;

	if ((cp = strdup(str)) == NULL)
		err(2, "xstrdup");
	return cp;
}

int
xasprintf(char **ret, const char *fmt, ...)
{
	va_list ap;
	int i;

	va_start(ap, fmt);
	i = vasprintf(ret, fmt, ap);
	va_end(ap);

	if (i < 0 || *ret == NULL)
		err(2, "xasprintf");

	return i;
}
@


1.8
log
@xmalloc/free wrappers don't need to support 20 year old non comformance
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.7 2015/06/17 20:50:10 nicm Exp $ */
d30 2
d34 1
a34 1
		err(2, "xmalloc %zu", size);
d45 1
a45 2
		err(2, "xcalloc: out of memory (allocating %zu*%zu bytes)",
		    nmemb, size);
d56 2
a57 1
		err(2, "xrealloc %zu*%zu", nmemb, size);
d67 1
a67 1
		err(1, "xstrdup");
d84 1
a84 1
	return (i);
@


1.7
log
@Use strdup in xstrdup; from Fritjof Bornebusch.
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.6 2015/04/29 04:00:25 deraadt Exp $ */
a29 2
	if (size == 0)
		errx(2, "xmalloc: zero size");
d32 1
a32 1
		err(2, NULL);
a40 4
	if (size == 0 || nmemb == 0)
		errx(2, "xcalloc: zero size");
	if (SIZE_MAX / nmemb < size)
		errx(2, "xcalloc: nmemb * size > SIZE_MAX");
d43 2
a44 2
		errx(2, "xcalloc: out of memory (allocating %lu bytes)",
		    (u_long)(size * nmemb));
d55 1
a55 1
		err(2, NULL);
a58 8
void
xfree(void *ptr)
{
	if (ptr == NULL)
		err(2, NULL);
	free(ptr);
}

d80 1
a80 1
		err(2, NULL);
@


1.6
log
@Change internal xrealloc() to a idiom-following xreallocarray().
This loses a "new size is 0" failure case.  Probably not relevant;
and since we develop this in OpenBSD, we'll catch that before someone
else imports this...
ok millert
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.5 2015/02/05 12:59:57 millert Exp $ */
a75 1
	size_t len;
d78 2
a79 3
	len = strlen(str) + 1;
	cp = xmalloc(len);
	strlcpy(cp, str, len);
@


1.5
log
@Include stdint.h, not limits.h to get SIZE_MAX.  OK guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.4 2013/08/19 20:21:15 millert Exp $ */
d55 1
a55 1
xrealloc(void *ptr, size_t nmemb, size_t size)
a57 1
	size_t new_size = nmemb * size;
d59 1
a59 8
	if (new_size == 0)
		errx(2, "xrealloc: zero size");
	if (SIZE_MAX / nmemb < size)
		errx(2, "xrealloc: nmemb * size > SIZE_MAX");
	if (ptr == NULL)
		new_ptr = malloc(new_size);
	else
		new_ptr = realloc(ptr, new_size);
@


1.4
log
@Fix bogus errx(2, NULL) usage; malloc() failure should use err(2, NULL).
For size and overflow errors, use the same error messages as ecalloc().
OK otto@@
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.3 2010/08/04 21:28:17 ray Exp $ */
a16 1
#include <limits.h>
d18 1
@


1.3
log
@exit(2) on xcalloc failure. From Daniel Dickman <didickman () gmail
! com>, thanks!

OK deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.2 2009/06/07 08:39:13 ray Exp $ */
d31 1
a31 1
		errx(2, NULL);
d34 1
a34 1
		errx(2, NULL);
d61 1
a61 1
		errx(2, NULL);
d63 1
a63 1
		errx(2, NULL);
d69 1
a69 1
		errx(2, NULL);
d77 1
a77 1
		errx(2, NULL);
d104 1
a104 1
		errx(2, NULL);
@


1.2
log
@More cvs/diff/rcs convergence:
1. Mostly variable/function renaming, SIZE_T_MAX->SIZE_MAX, and
spacing.
2. One strchr -> strncspn.
3. diff had a weird thing where it set file[12] = ofile[12] but
never updated file or ofile, then if file and ofile were different
it freed it. I removed it.

OK millert
@
text
@d1 1
a1 1
/* $OpenBSD: xmalloc.c,v 1.1 2007/05/29 18:24:56 ray Exp $ */
d44 1
a44 1
		errx(1, "xcalloc: zero size");
d46 1
a46 1
		errx(1, "xcalloc: nmemb * size > SIZE_MAX");
d49 1
a49 1
		errx(1, "xcalloc: out of memory (allocating %lu bytes)",
@


1.1
log
@Bring in some changes from rcsdiff:
1. Replace all the e*alloc functions with the x*alloc versions.
2. Whitespace syncs according to style.
3. Remove the __inline stuff.
4. Remove the min/max functions, using the MAX/MIN macros instead.

OK millert@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d39 16
d62 1
a62 1
	if (SIZE_T_MAX / nmemb < size)
@

