head	1.8;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2017.07.07.19.06.15;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	RnLioC613A4crtsa;

1.7
date	2017.07.06.00.08.52;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	CvawmxXhCFb3pQqd;

1.6
date	2017.07.05.15.03.20;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	zLikkELVVpcrsPcx;

1.5
date	2017.02.12.14.13.23;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	CzVdYxgR4pgI2nog;

1.4
date	2015.01.01.15.34.43;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	0UIoTwpBD8c0UXRm;

1.3
date	2014.10.12.14.48.25;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	XKEb95vou4ZQHIKp;

1.2
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.18.10.25.28;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.8
log
@add parentheses to the output where required for disambiguation
@
text
@/*	$OpenBSD: eqn_term.c,v 1.7 2017/07/06 00:08:52 schwarze Exp $ */
/*
 * Copyright (c) 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2014, 2015, 2017 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/types.h>

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "mandoc.h"
#include "out.h"
#include "term.h"

static	const enum termfont fontmap[EQNFONT__MAX] = {
	TERMFONT_NONE, /* EQNFONT_NONE */
	TERMFONT_NONE, /* EQNFONT_ROMAN */
	TERMFONT_BOLD, /* EQNFONT_BOLD */
	TERMFONT_BOLD, /* EQNFONT_FAT */
	TERMFONT_UNDER /* EQNFONT_ITALIC */
};

static void	eqn_box(struct termp *, const struct eqn_box *);


void
term_eqn(struct termp *p, const struct eqn *ep)
{

	eqn_box(p, ep->root);
	p->flags &= ~TERMP_NOSPACE;
}

static void
eqn_box(struct termp *p, const struct eqn_box *bp)
{
	const struct eqn_box *child;
	int delim;

	/* Delimiters around this box? */

	if ((bp->type == EQN_LIST && bp->expectargs > 1) ||
	    (bp->type == EQN_PILE && (bp->prev || bp->next)) ||
	    (bp->parent != NULL && (bp->parent->pos == EQNPOS_SQRT ||
	    /* Diacritic followed by ^ or _. */
	    ((bp->top != NULL || bp->bottom != NULL) &&
	     bp->parent->type == EQN_SUBEXPR &&
	     bp->parent->pos != EQNPOS_OVER && bp->next != NULL) ||
	    /* Nested over, sub, sup, from, to. */
	    (bp->type == EQN_SUBEXPR && bp->pos != EQNPOS_SQRT &&
	     ((bp->parent->type == EQN_LIST && bp->expectargs == 1) ||
	      (bp->parent->type == EQN_SUBEXPR &&
	       bp->pos != EQNPOS_SQRT)))))) {
		if (bp->parent->type == EQN_SUBEXPR && bp->prev != NULL)
			p->flags |= TERMP_NOSPACE;
		term_word(p, bp->left != NULL ? bp->left : "(");
		p->flags |= TERMP_NOSPACE;
		delim = 1;
	} else
		delim = 0;

	/* Handle Fonts and text. */

	if (bp->font != EQNFONT_NONE)
		term_fontpush(p, fontmap[(int)bp->font]);

	if (bp->text != NULL)
		term_word(p, bp->text);

	/* Special box types. */

	if (bp->pos == EQNPOS_SQRT) {
		term_word(p, "sqrt");
		if (bp->first != NULL) {
			p->flags |= TERMP_NOSPACE;
			eqn_box(p, bp->first);
		}
	} else if (bp->type == EQN_SUBEXPR) {
		child = bp->first;
		eqn_box(p, child);
		p->flags |= TERMP_NOSPACE;
		term_word(p, bp->pos == EQNPOS_OVER ? "/" :
		    (bp->pos == EQNPOS_SUP ||
		     bp->pos == EQNPOS_TO) ? "^" : "_");
		p->flags |= TERMP_NOSPACE;
		child = child->next;
		if (child != NULL) {
			eqn_box(p, child);
			if (bp->pos == EQNPOS_FROMTO ||
			    bp->pos == EQNPOS_SUBSUP) {
				p->flags |= TERMP_NOSPACE;
				term_word(p, "^");
				p->flags |= TERMP_NOSPACE;
				child = child->next;
				if (child != NULL)
					eqn_box(p, child);
			}
		}
	} else {
		child = bp->first;
		if (bp->type == EQN_MATRIX &&
		    child != NULL &&
		    child->type == EQN_LIST &&
		    child->expectargs > 1)
			child = child->first;
		while (child != NULL) {
			eqn_box(p,
			    bp->type == EQN_PILE &&
			    child->type == EQN_LIST &&
			    child->expectargs > 1 &&
			    child->args == 1 ?
			    child->first : child);
			child = child->next;
		}
	}

	/* Handle Fonts and diacritics. */

	if (bp->font != EQNFONT_NONE)
		term_fontpop(p);
	if (bp->top != NULL) {
		p->flags |= TERMP_NOSPACE;
		term_word(p, bp->top);
	}
	if (bp->bottom != NULL) {
		p->flags |= TERMP_NOSPACE;
		term_word(p, "_");
	}

	/* Right delimiter after this box? */

	if (delim) {
		p->flags |= TERMP_NOSPACE;
		term_word(p, bp->right != NULL ? bp->right : ")");
		if (bp->parent->type == EQN_SUBEXPR && bp->next != NULL)
			p->flags |= TERMP_NOSPACE;
	}
}
@


1.7
log
@Fix operator precedence according to Brian W. Kernighan and Lorinda
L. Cherry, "Typesetting Mathematics - User's Guide (Second Edition)",
August 15, 1978, paragraph 23; swarm of bugs pointed out by bentley@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_term.c,v 1.6 2017/07/05 15:03:20 schwarze Exp $ */
d52 3
d58 10
a67 1
	    (bp->parent != NULL && bp->parent->pos == EQNPOS_SQRT)) {
d72 6
a77 1
	}
d84 2
d131 2
d143 4
a146 3
	if ((bp->type == EQN_LIST && bp->expectargs > 1) ||
	    (bp->type == EQN_PILE && (bp->prev || bp->next)) ||
	    (bp->parent != NULL && bp->parent->pos == EQNPOS_SQRT)) {
@


1.6
log
@The EQN_LISTONE box type is pointless.
Simplify by just using EQN_LIST with expectargs = 1.
Noticed while investigating a bug report from bentley@@.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_term.c,v 1.5 2017/02/12 14:13:23 schwarze Exp $ */
d114 8
a128 9
	}

	if (bp->top != NULL) {
		p->flags |= TERMP_NOSPACE;
		term_word(p, bp->top);
	}
	if (bp->bottom != NULL) {
		p->flags |= TERMP_NOSPACE;
		term_word(p, "_");
@


1.5
log
@Do not access a NULL pointer if a matrix or square root are empty.
Crashes found by tb@@ with afl(1).
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_term.c,v 1.4 2015/01/01 15:34:43 schwarze Exp $ */
d53 1
a53 1
	if (bp->type == EQN_LIST ||
d97 3
a99 1
		    child != NULL && child->type == EQN_LIST)
d105 1
d114 1
a114 1
	if (bp->type == EQN_LIST ||
@


1.4
log
@Don't dereference NULL pointers when formatting missing denominators,
subscripts, superscripts, or "from" or "to" arguments.
Found by jsg@@ with afl.
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_term.c,v 1.3 2014/10/12 14:48:25 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2014, 2015 Ingo Schwarze <schwarze@@openbsd.org>
d69 4
a72 2
		p->flags |= TERMP_NOSPACE;
		eqn_box(p, bp->first);
d96 2
a97 1
		if (bp->type == EQN_MATRIX && child->type == EQN_LIST)
@


1.3
log
@major upgrade to eqn(7) terminal output;
column vectors ("piles") and matrices are not yet pretty,
but everything else is now more or less readable
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d4 1
a4 1
 * Copyright (c) 2014 Ingo Schwarze <schwarze@@openbsd.org>
d80 1
a80 7
		eqn_box(p, child);
		if (bp->pos == EQNPOS_FROMTO ||
		    bp->pos == EQNPOS_SUBSUP) {
			p->flags |= TERMP_NOSPACE;
			term_word(p, "^");
			p->flags |= TERMP_NOSPACE;
			child = child->next;
d82 9
@


1.2
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: eqn_term.c,v 1.1 2011/09/18 10:25:28 schwarze Exp $ */
d4 1
d18 2
a43 1
	p->flags |= TERMP_NONOSPACE;
d45 1
a45 2
	term_word(p, " ");
	p->flags &= ~TERMP_NONOSPACE;
d51 1
d53 9
a61 1
	if (EQNFONT_NONE != bp->font)
a62 4
	if (bp->left)
		term_word(p, bp->left);
	if (EQN_SUBEXPR == bp->type)
		term_word(p, "(");
d64 1
a64 1
	if (bp->text)
d67 3
a69 1
	if (bp->first)
d71 31
d103 1
a103 5
	if (EQN_SUBEXPR == bp->type)
		term_word(p, ")");
	if (bp->right)
		term_word(p, bp->right);
	if (EQNFONT_NONE != bp->font)
d105 17
a121 3

	if (bp->next)
		eqn_box(p, bp->next);
@


1.1
log
@sync to version 1.11.5:
adding an implementation of the eqn(7) language
by kristaps@@

So far, only .EQ/.EN blocks are handled, in-line equations are not, and
rendering is not yet very pretty, but the parser is fairly complete.
@
text
@d1 1
a1 1
/*	$Id: eqn_term.c,v 1.1 2011/07/22 10:50:46 kristaps Exp $ */
a16 4
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

d36 1
d68 1
a68 1
	if (EQNFONT_NONE != bp->font) 
@

