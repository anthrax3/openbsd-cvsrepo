head	1.54;
access;
symbols
	OPENBSD_6_1:1.54.0.8
	OPENBSD_6_1_BASE:1.54
	OPENBSD_6_0:1.54.0.4
	OPENBSD_6_0_BASE:1.54
	OPENBSD_5_9:1.54.0.2
	OPENBSD_5_9_BASE:1.54
	OPENBSD_5_8:1.52.0.4
	OPENBSD_5_8_BASE:1.52
	OPENBSD_5_7:1.42.0.2
	OPENBSD_5_7_BASE:1.42
	OPENBSD_5_6:1.35.0.4
	OPENBSD_5_6_BASE:1.35
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.32.0.4
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.32.0.2
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.31.0.4
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.2
	OPENBSD_5_0:1.29.0.2
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.27.0.2
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.24.0.2
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.54
date	2015.11.07.13.57.55;	author schwarze;	state Exp;
branches;
next	1.53;
commitid	UKwSq7JMt0q6KNpK;

1.53
date	2015.10.22.21.53.49;	author schwarze;	state Exp;
branches;
next	1.52;
commitid	b31415iHGGouYvkz;

1.52
date	2015.04.23.15.35.39;	author schwarze;	state Exp;
branches;
next	1.51;
commitid	am2zU0fu81iRKMOO;

1.51
date	2015.04.19.14.57.16;	author schwarze;	state Exp;
branches;
next	1.50;
commitid	FaoA4UzPphKw0cyB;

1.50
date	2015.04.19.14.25.05;	author schwarze;	state Exp;
branches;
next	1.49;
commitid	E1gJfKuheBoo64Vb;

1.49
date	2015.04.19.13.50.10;	author schwarze;	state Exp;
branches;
next	1.48;
commitid	QSaLMe5iBgPB4hUe;

1.48
date	2015.04.18.17.28.08;	author schwarze;	state Exp;
branches;
next	1.47;
commitid	zD52rmYwzwgofy8v;

1.47
date	2015.04.18.17.01.28;	author schwarze;	state Exp;
branches;
next	1.46;
commitid	GslLZJxifCkaUipL;

1.46
date	2015.04.18.16.04.40;	author schwarze;	state Exp;
branches;
next	1.45;
commitid	6MYJ7cd8mhJ77AGH;

1.45
date	2015.04.02.23.47.43;	author schwarze;	state Exp;
branches;
next	1.44;
commitid	RJFkOLiS9gBqEEDl;

1.44
date	2015.04.02.22.06.17;	author schwarze;	state Exp;
branches;
next	1.43;
commitid	Rfx1oTaH3hZ7Zcyf;

1.43
date	2015.03.20.12.53.43;	author schwarze;	state Exp;
branches;
next	1.42;
commitid	CzYsL4bn7BxoEWtt;

1.42
date	2014.12.28.14.39.08;	author schwarze;	state Exp;
branches;
next	1.41;
commitid	6ZLiZAxCS3hyLbh4;

1.41
date	2014.11.28.05.51.29;	author schwarze;	state Exp;
branches;
next	1.40;
commitid	9LYX9vvoCC2fp5xR;

1.40
date	2014.11.27.14.31.29;	author deraadt;	state Exp;
branches;
next	1.39;
commitid	je75OeVgCvwQD2St;

1.39
date	2014.11.03.23.17.21;	author schwarze;	state Exp;
branches;
next	1.38;
commitid	GfJl4B0PeEJVZTrN;

1.38
date	2014.08.08.16.05.42;	author schwarze;	state Exp;
branches;
next	1.37;
commitid	2htU5KIJbrO78Dan;

1.37
date	2014.08.08.15.57.05;	author schwarze;	state Exp;
branches;
next	1.36;
commitid	kusPy8TfXLTHQJo8;

1.36
date	2014.08.08.15.32.17;	author schwarze;	state Exp;
branches;
next	1.35;
commitid	MxwVmw5souguneqK;

1.35
date	2014.07.07.19.17.39;	author schwarze;	state Exp;
branches;
next	1.34;
commitid	6LLMrl8zsEJSgCUt;

1.34
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.33;

1.33
date	2014.01.05.20.26.27;	author schwarze;	state Exp;
branches;
next	1.32;

1.32
date	2012.11.17.00.25.20;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2011.11.05.16.02.18;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2011.09.18.10.25.28;	author schwarze;	state Exp;
branches;
next	1.29;

1.29
date	2011.04.24.16.22.02;	author schwarze;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.21.22.59.54;	author schwarze;	state Exp;
branches;
next	1.27;

1.27
date	2011.01.16.02.56.47;	author schwarze;	state Exp;
branches;
next	1.26;

1.26
date	2010.12.01.23.02.57;	author schwarze;	state Exp;
branches;
next	1.25;

1.25
date	2010.08.20.00.53.35;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2010.07.13.01.09.12;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.27.21.54.41;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.26.17.56.43;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2010.05.24.02.27.31;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.23.22.45.00;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.16.00.54.03;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2010.05.15.18.06.02;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.08.01.52.07;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.25.16.32.19;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.02.11.37.07;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.29.22.56.52;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.26.01.22.05;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.25.23.23.01;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.22.23.58.00;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.21.40.07;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.21.21.11.36;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.22.23.17.39;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.22.20.14.37;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.22.15.15.37;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.12.20.30.27;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.07.00.54.46;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.23.22.05.42;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.14.23.00.57;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.20.30.40;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.54
log
@In private header files, __BEGIN_DECLS and __END_DECLS are pointless.
Because these work slightly differently on different systems,
they are becoming a maintenance burden in the portable version,
so delete them.

Besides, one of the chief design goals of the mandoc toolbox is to
make sure that nothing related to documentation requires C++.
Consequently, linking mandoc against any kind of C++ program would
defeat the purpose and is not supported.
I don't understand why kristaps@@ added them in the first place.
@
text
@/*	$OpenBSD: libman.h,v 1.53 2015/10/22 21:53:49 schwarze Exp $ */
/*
 * Copyright (c) 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2014, 2015 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define	MACRO_PROT_ARGS	  struct roff_man *man, \
			  int tok, \
			  int line, \
			  int ppos, \
			  int *pos, \
			  char *buf

struct	man_macro {
	void		(*fp)(MACRO_PROT_ARGS);
	int		  flags;
#define	MAN_SCOPED	 (1 << 0)  /* Optional next-line scope. */
#define	MAN_NSCOPED	 (1 << 1)  /* Allowed in next-line element scope. */
#define	MAN_BSCOPE	 (1 << 2)  /* Break next-line block scope. */
#define	MAN_JOIN	 (1 << 3)  /* Join arguments together. */
};

extern	const struct man_macro *const man_macros;


int		  man_hash_find(const char *);
void		  man_node_validate(struct roff_man *);
void		  man_state(struct roff_man *, struct roff_node *);
void		  man_unscope(struct roff_man *, const struct roff_node *);
@


1.53
log
@move man(7) validation into the dedicated validation phase, too
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.52 2015/04/23 15:35:39 schwarze Exp $ */
a36 1
__BEGIN_DECLS
a41 2

__END_DECLS
@


1.52
log
@Get rid of two empty wrapper functions.  No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.51 2015/04/19 14:57:16 schwarze Exp $ */
d40 2
a41 1
void		  man_valid_post(struct roff_man *);
@


1.51
log
@Unify trickier node handling functions.
* man_elem_alloc() -> roff_elem_alloc()
* man_block_alloc() -> roff_block_alloc()
The functions mdoc_elem_alloc() and mdoc_block_alloc() remain for
now because they need to do mdoc(7)-specific argument processing.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.50 2015/04/19 14:25:05 schwarze Exp $ */
a39 1
void		  man_macroend(struct roff_man *);
@


1.50
log
@Unify some node handling functions that use TOKEN_NONE.
* mdoc_word_alloc(), man_word_alloc() -> roff_word_alloc()
* mdoc_word_append(), man_word_append() -> roff_word_append()
* mdoc_addspan(), man_addspan() -> roff_addtbl()
* mdoc_addeqn(), man_addeqn() -> roff_addeqn()
Minus 50 lines of code, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.49 2015/04/19 13:50:10 schwarze Exp $ */
a38 2
void		  man_block_alloc(struct roff_man *, int, int, int);
void		  man_elem_alloc(struct roff_man *, int, int, int);
@


1.49
log
@Unify node handling functions:
* node_alloc() for mdoc and man_node_alloc() -> roff_node_alloc()
* node_append() for mdoc and man_node_append() -> roff_node_append()
* mdoc_head_alloc() and man_head_alloc() -> roff_head_alloc()
* mdoc_body_alloc() and man_body_alloc() -> roff_body_alloc()
* mdoc_node_unlink() and man_node_unlink() -> roff_node_unlink()
* mdoc_node_free() and man_node_free() -> roff_node_free()
* mdoc_node_delete() and man_node_delete() -> roff_node_delete()
Minus 130 lines of code, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.48 2015/04/18 17:28:08 schwarze Exp $ */
a38 2
void		  man_word_alloc(struct roff_man *, int, int, const char *);
void		  man_word_append(struct roff_man *, const char *);
@


1.48
log
@Unify {mdoc,man}_{alloc,reset,free}() into roff_man_{alloc,reset,free}().
Minus 80 lines of code, no functional change.
Written on the train from Koeln to Wolfsburg returning from p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.47 2015/04/18 17:01:28 schwarze Exp $ */
a41 2
void		  man_head_alloc(struct roff_man *, int, int, int);
void		  man_body_alloc(struct roff_man *, int, int, int);
@


1.47
log
@Move mdoc_hash_init() and man_hash_init() to libmandoc.h
and call them from mparse_alloc() and choose_parser(),
preparing unified allocation of struct roff_man.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.46 2015/04/18 16:04:40 schwarze Exp $ */
a44 1
void		  man_node_delete(struct roff_man *, struct roff_node *);
@


1.46
log
@Replace the structs mdoc and man by a unified struct roff_man.
Almost completely mechanical, no functional change.
Written on the train from Exeter to London returning from p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.45 2015/04/02 23:47:43 schwarze Exp $ */
a45 1
void		  man_hash_init(void);
@


1.45
log
@Third step towards parser unification:
Replace struct mdoc_meta and struct man_meta by a unified struct roff_meta.
Written of the train from London to Exeter on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.44 2015/04/02 22:06:17 schwarze Exp $ */
d19 1
a19 22
enum	man_next {
	MAN_NEXT_SIBLING = 0,
	MAN_NEXT_CHILD
};

struct	man {
	struct mparse	*parse; /* parse pointer */
	const char	*defos; /* default OS argument for .TH */
	int		 quick; /* abort parse early */
	int		 flags; /* parse flags */
#define	MAN_ELINE	(1 << 1) /* Next-line element scope. */
#define	MAN_BLINE	(1 << 2) /* Next-line block scope. */
#define	MAN_LITERAL	(1 << 4) /* Literal input. */
#define	MAN_NEWLINE	(1 << 6) /* first macro/text in a line */
	enum man_next	 next; /* where to put the next node */
	struct roff_node *last; /* the last parsed node */
	struct roff_node *first; /* the first parsed node */
	struct roff_meta meta; /* document meta-data */
	struct roff	*roff;
};

#define	MACRO_PROT_ARGS	  struct man *man, \
d39 7
a45 7
void		  man_word_alloc(struct man *, int, int, const char *);
void		  man_word_append(struct man *, const char *);
void		  man_block_alloc(struct man *, int, int, int);
void		  man_head_alloc(struct man *, int, int, int);
void		  man_body_alloc(struct man *, int, int, int);
void		  man_elem_alloc(struct man *, int, int, int);
void		  man_node_delete(struct man *, struct roff_node *);
d48 3
a50 3
void		  man_macroend(struct man *);
void		  man_valid_post(struct man *);
void		  man_unscope(struct man *, const struct roff_node *);
@


1.44
log
@Second step towards parser unification:
Replace struct mdoc_node and struct man_node by a unified struct roff_node.
To be able to use the tok member for both mdoc(7) and man(7) without
defining all the macros in roff.h, sacrifice a tiny bit of type safety
and make tok an int rather than an enum.
Almost mechanical, no functional change.
Written on the Eurostar from Bruxelles to London on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.43 2015/03/20 12:53:43 schwarze Exp $ */
d36 1
a36 1
	struct man_meta	 meta; /* document meta-data */
@


1.43
log
@Simplify by almost halving the number of macro flags:
1. MAN_EXPLICIT was used iff fp == blk_exp, so just test fp.
2. MAN_FSCOPED was used only for TP, so just test for TP.
3. MAN_NOCLOSE was completely unused.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.42 2014/12/28 14:39:08 schwarze Exp $ */
d10 1
a10 1
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
d12 1
a12 1
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
d34 2
a35 2
	struct man_node	*last; /* the last parsed node */
	struct man_node	*first; /* the first parsed node */
d41 1
a41 1
			  enum mant tok, \
d62 5
a66 5
void		  man_block_alloc(struct man *, int, int, enum mant);
void		  man_head_alloc(struct man *, int, int, enum mant);
void		  man_body_alloc(struct man *, int, int, enum mant);
void		  man_elem_alloc(struct man *, int, int, enum mant);
void		  man_node_delete(struct man *, struct man_node *);
d68 1
a68 1
enum mant	  man_hash_find(const char *);
d71 1
a71 1
void		  man_unscope(struct man *, const struct man_node *);
@


1.42
log
@mdoc(7) already uses the mandoc(1) -Ios argument in the footer line
when .Os has no argument, so do the same for man(7) when .TH has less
than four arguments; there is no reason to treat both differently.
Issue found following a question from Thomas Klausner <wiz at NetBSD>.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.41 2014/11/28 05:51:29 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2014 Ingo Schwarze <schwarze@@openbsd.org>
d50 4
a53 7
#define	MAN_SCOPED	 (1 << 0)
#define	MAN_EXPLICIT	 (1 << 1)	/* See blk_imp(). */
#define	MAN_FSCOPED	 (1 << 2)	/* See blk_imp(). */
#define	MAN_NSCOPED	 (1 << 3)	/* See in_line_eoln(). */
#define	MAN_NOCLOSE	 (1 << 4)	/* See blk_exp(). */
#define	MAN_BSCOPE	 (1 << 5)	/* Break BLINE scope. */
#define	MAN_JOIN	 (1 << 6)	/* Join arguments together. */
@


1.41
log
@Simplify by making many functions in the man(7) parser void,
and some cleanup; no functional change, minus 70 lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.40 2014/11/27 14:31:29 deraadt Exp $ */
d26 1
@


1.40
log
@remove unneccessary inclusion protection; ok schwarze
@
text
@d1 1
a1 1
/*	$OpenBSD: libman.h,v 1.39 2014/11/03 23:17:21 schwarze Exp $ */
d47 1
a47 1
	int		(*fp)(MACRO_PROT_ARGS);
d62 1
a62 1
int		  man_word_alloc(struct man *, int, int, const char *);
d64 4
a67 5
int		  man_block_alloc(struct man *, int, int, enum mant);
int		  man_head_alloc(struct man *, int, int, enum mant);
int		  man_tail_alloc(struct man *, int, int, enum mant);
int		  man_body_alloc(struct man *, int, int, enum mant);
int		  man_elem_alloc(struct man *, int, int, enum mant);
d71 3
a73 3
int		  man_macroend(struct man *);
int		  man_valid_post(struct man *);
int		  man_unscope(struct man *, const struct man_node *);
@


1.39
log
@Allow the five man(7) font macros to concatenate their line arguments,
the same way the mdoc(7) macros marked MDOC_JOIN do it.
In -Thtml, this removes bogus <br/> when the font macros are used
in no-fill mode; issue found by jsg@@ in the Xcursor(3) SYNOPSIS.
As a bonus, this slightly reduces the size of the syntax tree.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a17 2
#ifndef LIBMAN_H
#define LIBMAN_H
a76 2

#endif /*!LIBMAN_H*/
@


1.38
log
@Simplify man(7) validation:
Drop pre-handlers, they were almost unused.
Drop the needless complexity of allowing more than one post-handler.

This saves one internal interface function, one static function, one
private struct definition, sixteen static arrays, and 45 lines of code.
No functional change.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.37 2014/08/08 15:57:05 schwarze Exp $ */
d4 1
d57 1
d65 1
@


1.37
log
@demacrify: get rid of man_nmsg(), man_pmsg(), mdoc_nmsg(), mdoc_pmsg()
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.36 2014/08/08 15:32:17 schwarze Exp $ */
a72 1
int		  man_valid_pre(struct man *, struct man_node *);
@


1.36
log
@Simplify: replace one global flag by one local variable
and remove three unused global flags.  No functional change.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.35 2014/07/07 19:17:39 schwarze Exp $ */
a61 4
#define		  man_pmsg(man, l, p, t) \
		  mandoc_msg((t), (man)->parse, (l), (p), NULL)
#define		  man_nmsg(man, n, t) \
		  mandoc_msg((t), (man)->parse, (n)->line, (n)->pos, NULL)
@


1.35
log
@Simplify man_unscope(), removing 18 lines of code, that is,
removing one function argument, one function definition,
three function invocations and two pointless assert()s.
No functional change.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.34 2014/04/20 16:44:44 schwarze Exp $ */
a28 1
#define	MAN_HALT	(1 << 0) /* badness happened: die */
a30 1
#define	MAN_ILINE	(1 << 3) /* Ignored in next-line scope. */
a31 1
#define	MAN_BPLINE	(1 << 5)
@


1.34
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.33 2014/01/05 20:26:27 schwarze Exp $ */
d81 1
a81 2
int		  man_unscope(struct man *, const struct man_node *,
			enum mandocerr);
@


1.33
log
@Add an option -Q (quick) to mandocdb(8)
for accelerated generation of reduced-size databases.

Implement this by allowing the parsers to optionally
abort the parse sequence after the NAME section.

While here, garbage collect the unused void *arg attribute
of struct mparse and mparse_alloc().

This reduces the processing time of mandocdb(8) on /usr/share/man
by a factor of 2 and the database size by a factor of 4.
However, it still takes 5 times the time and 6 times the space
of makewhatis(8), so more work is clearly needed.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.32 2012/11/17 00:25:20 schwarze Exp $ */
d81 2
a82 2
int		  man_unscope(struct man *, 
			const struct man_node *, enum mandocerr);
@


1.32
log
@Cleanup naming of local variables to make the code easier on the eye:
Settle for "struct man *man", "struct mdoc *mdoc", "struct meta *meta"
and avoid the confusing "*m" which was sometimes this, sometimes that.
No functional change.

ok kristaps@@ some time ago
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.31 2011/11/05 16:02:18 schwarze Exp $ */
d27 1
@


1.31
log
@When the HEAD scope of .TP is broken by another block macro,
do not abort with a FATAL error, but report a regular ERROR,
remove the broken .TP from the syntax tree, and prod on.
Reported repeatedly by ports people, at least by brad@@ and jeremy@@.
Also fixes rendition(4) in Xenocara.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.30 2011/09/18 10:25:28 schwarze Exp $ */
d42 1
a42 1
#define	MACRO_PROT_ARGS	  struct man *m, \
d64 4
a67 4
#define		  man_pmsg(m, l, p, t) \
		  mandoc_msg((t), (m)->parse, (l), (p), NULL)
#define		  man_nmsg(m, n, t) \
		  mandoc_msg((t), (m)->parse, (n)->line, (n)->pos, NULL)
@


1.30
log
@sync to version 1.11.5:
adding an implementation of the eqn(7) language
by kristaps@@

So far, only .EQ/.EN blocks are handled, in-line equations are not, and
rendering is not yet very pretty, but the parser is fairly complete.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.29 2011/04/24 16:22:02 schwarze Exp $ */
d57 1
@


1.29
log
@Merge version 1.11.1:
Again lots of cleanup and maintenance work by kristaps@@.
- simplify error reporting: less function pointers, more mandoc_[v]msg
- main: split document parsing out of main.c into read.c
- roff, mdoc, man: improved recognition of control characters
- roff: better handling of if/else stack overflows
- roff: add some predefined strings for backward compatibility
- mdoc, man: empty sections are not errors
- mdoc: move delimiter handling to libmdoc
- some header restructuring and some minor features and fixes
This merge causes two minor regressions
that i will fix in separate commits right afterwards.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.28 2011/04/21 22:59:54 schwarze Exp $ */
d39 1
a39 1
	struct regset	*regs; /* registers */
@


1.28
log
@Merge version 1.10.10:
lots of cleanup and maintenance work by kristaps@@.
- move some main.c globals into struct curparse
- move mandoc_*alloc to mandoc.h such that all code can use them
- make mandoc_isdelim available to formatting frontends
- dissolve mdoc_strings.c, move the code where it is used
- make all error reporting functions void, their return values were useless
- and various minor cleanups and fixes
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.27 2011/01/16 02:56:47 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
a19 2
#include "man.h"

d26 1
a26 2
	void		*data; /* private application data */
	mandocmsg	 msg; /* output message handler */
d64 1
a64 1
		  (*(m)->msg)((t), (m)->data, (l), (p), NULL)
d66 1
a66 1
		  (*(m)->msg)((t), (m)->data, (n)->line, (n)->pos, NULL)
d70 1
d75 1
a75 1
enum	mant	  man_hash_find(const char *);
a76 7
int		  man_args(struct man *, int, int *, char *, char **);
#define	ARGS_ERROR	(-1)
#define	ARGS_EOLN	(0)
#define	ARGS_WORD	(1)
#define	ARGS_QWORD	(1)
void		  man_vmsg(struct man *, enum mandocerr,
			int, int, const char *, ...);
@


1.27
log
@If the first character of a free-form text input line is whitespace,
then it will start a new output line;
from kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.26 2010/12/01 23:02:57 schwarze Exp $ */
d84 1
a84 1
int		  man_vmsg(struct man *, enum mandocerr,
@


1.26
log
@Merge man_action.c into man_validate.c.
Same as for mdoc_action.c, but much simpler.
Work by kristaps@@, re-applying OpenBSD changes on top.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.25 2010/08/20 00:53:35 schwarze Exp $ */
d37 1
@


1.25
log
@Implement a simple, consistent user interface for error handling.
We now have sufficient practical experience to know what we want,
so this is intended to be final:
- provide -Wlevel (warning, error or fatal) to select what you care about
- provide -Wstop to stop after parsing a file with warnings you care about
- provide consistent exit status codes for those warnings you care about
- fully document what warnings, errors and fatal errors mean
- remove all other cruft from the user interface, less is more:
- remove all -f knobs along with the whole -f option
- remove the old -Werror because calling warnings "fatal" is silly
- always finish parsing each file, unless fatal errors prevent that
This commit also includes a couple of related simplifications behind
the scenes regarding error handling.
Feedback and OK  kristaps@@;  Joerg Sonnenberger (NetBSD) and
Sascha Wildner (DragonFly BSD) agree with the general direction.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.24 2010/07/13 01:09:12 schwarze Exp $ */
a86 2
int		  man_action_post(struct man *);
int		  man_action_pre(struct man *, struct man_node *);
@


1.24
log
@Merge release 1.10.4 (all code by kristaps@@), providing four new features:
1) Proper .Bk support: allow output line breaks at input line breaks,
but keep input lines together in the output, finally fixing
synopses like aucat(1), mail(1) and tmux(1).
2) Mostly finished -Tps (PostScript) output.
3) Implement -Thtml output for .Nm blocks and .Bk -words.
4) Allow iterative interpolation of user-defined roff(7) strings.
Also contains some minor bugfixes and some performance improvements.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.23 2010/06/27 21:54:41 schwarze Exp $ */
a29 1
	int		 pflags; /* parse flags (see man.h) */
@


1.23
log
@Full .nr nS support, unbreaking the kernel manuals.

Kristaps coded this from scratch after reading my .nr patch;
it is simpler and more powerful.

Registers live in struct regset in regs.h, struct man and struct mdoc
contain pointers to it.  The nS register is cleared when parsing .Sh.
Frontends respect the MDOC_SYNPRETTY flag set in mdoc node_alloc.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.22 2010/06/26 17:56:43 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009 Kristaps Dzonsons <kristaps@@bsd.lv>
a19 1
#include "regs.h"
@


1.22
log
@merge release 1.10.2
* bug fixes:
- interaction of ASCII_HYPH with special chars (found by Ulrich Spoerlein)
- handling of roff conditionals (found by Ulrich Spoerlein)
- .Bd -offset will no more default to 6n
* maintenance:
- more caching of .Bd and .Bl arguments for efficiency
- deconstify man(7) validation routines
- add FreeBSD library names (provided by Ulrich Spoerlein)
* start PostScript font-switching
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.21 2010/05/24 02:27:31 schwarze Exp $ */
d20 1
d29 2
a30 2
	void		*data;
	mandocmsg	 msg;
d39 5
a43 4
	enum man_next	 next;
	struct man_node	*last;
	struct man_node	*first;
	struct man_meta	 meta;
d46 6
a51 2
#define	MACRO_PROT_ARGS	  struct man *m, enum mant tok, int line, \
			  int ppos, int *pos, char *buf
@


1.21
log
@remove the now unused #define MAN_EL_USE,
forgotten when backing my .if/.ie/.el out of libman
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.20 2010/05/23 22:45:00 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009 Kristaps Dzonsons <kristaps@@kth.se>
d82 1
a82 1
int		  man_valid_pre(struct man *, const struct man_node *);
@


1.20
log
@Unified error and warning message system for all of mandoc,
featuring three message levels, as agreed during the mandoc hackathon:
* FATAL parser failure, cannot produce any output from this input file:
  eventually, we hope to convert most of these to ERRORs.
* ERROR, meaning mandoc cannot cope fully with the input syntax and will
  probably lose information or produce structurally garbled output;
  it will try to produce output anyway but exit non-zero at the end,
  which is eventually intended to make the ports infrastructure happy.
* WARNING, meaning you should clean up the input file, but output
  is probably mostly OK, so this will not cause error-exit at the end.
This commit is mostly just converting the old system to the new one; before
the classification will become really reliable, we must check all messages.

In particular,
* set up a new central message string table in main.c
* drop the old message string tables from man.c and mdoc.c
* get rid of the piece-meal merr enums in libman and libmdoc
* reduce number of error/warning functions from 16 to 6 (still a lot...)

While here, handle a few problems more gracefully:
* allow .Rv and .Ex to work without a prior .Nm
* allow .An to ignore extra arguments
* allow undeclared columns in .Bl -column

Written by kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.19 2010/05/16 00:54:03 schwarze Exp $ */
a37 1
#define	MAN_EL_USE	(1 << 6) /* Following .el will be used. */
@


1.19
log
@In theory, Kristaps never intended to write a roff parser,
but in practice, most real legacy man(7)uals are using so much
low level roff that we can't really get away without at least
partially handling some roff instructions.

As doing this in man(7) only has become messy and as even some
mdoc(7) pages need it, start a minimal partial roff preprocessor.
As a first step, move handling of .am[i], .de[i] and .ig there.
Do not use the roff preprocessor for new manuals!

Now that we have three main parser libraries - roff, man and mdoc -
each one having its own error handling is becoming messy, too.
Thus, start unifying message handling in one central place,
introducing a new generic function mmsg().

coded by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.18 2010/05/15 18:06:02 schwarze Exp $ */
d29 1
a29 1
	struct man_cb	 cb;
a44 24
enum	merr {
	WNPRINT = 0,
	WDATE,
	WLNSCOPE,
	WLNSCOPE2,
	WTSPACE,
	WTQUOTE,
	WNODATA,
	WNOTITLE,
	WESCAPE,
	WNUMFMT,
	WHEADARGS,
	WBODYARGS,
	WNHEADARGS,
	WMACROFORM,
	WEXITSCOPE,
	WNOSCOPE,
	WOLITERAL,
	WNLITERAL,
	WTITLECASE,
	WBADCOMMENT,
	WERRMAX
};

d62 4
a65 9
#define		  man_perr(m, l, p, t) \
		  man_err((m), (l), (p), 1, (t))
#define		  man_pwarn(m, l, p, t) \
		  man_err((m), (l), (p), 0, (t))
#define		  man_nerr(m, n, t) \
		  man_err((m), (n)->line, (n)->pos, 1, (t))
#define		  man_nwarn(m, n, t) \
		  man_err((m), (n)->line, (n)->pos, 0, (t))

d80 2
a81 3
int		  man_err(struct man *, int, int, int, enum merr);
int		  man_vwarn(struct man *, int, int, const char *, ...);
int		  man_verr(struct man *, int, int, const char *, ...);
d87 1
a87 2
			const struct man_node *, enum merr);
int		  man_brace_close(struct man *, int, int);
@


1.18
log
@removed restriction on integer manual sections in -man;
by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.17 2010/05/08 01:52:07 schwarze Exp $ */
a30 1
	int		 svflags; /* flags saved during roff blocks */
a39 1
	enum man_next	 svnext;
a63 2
	WROFFNEST,
	WROFFSCOPE,
@


1.17
log
@handle text lines beginning with \." as comments, like groff does,
even though this is not correct comment syntax (so warn, too)
reported by Claus Assmann on misc@@, fix by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.16 2010/04/25 16:32:19 schwarze Exp $ */
a48 1
	WMSEC,
@


1.16
log
@Implement roff conditional instructions .if .ie .el, in man(7) only for now;
fixing OpenBSD::PackageName(3p) and friends for espie@@.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.15 2010/04/02 11:37:07 schwarze Exp $ */
d70 1
@


1.15
log
@merge 1.9.20, keeping local patches
* prevent roff instructions in man(7) from clobbering scopes and line modes
  (noted by Sascha Wildner)
* handle leading punctuation in mdoc(7) blocks and line macros
  (looks good in principle, but is causing some fallout in OpenBSD,
   so i will disable it locally for now with the next commit)
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.14 2010/03/29 22:56:52 schwarze Exp $ */
d39 1
d122 1
@


1.14
log
@merge 1.9.19, keeping local patches
 * scoping fixes for roff instructions
 * accept apostroph in place of dot as a macro control character
 * accept tabs between the control character and the macro name
 * check that man(7) .TH titles use capital letters
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.13 2010/03/26 01:22:05 schwarze Exp $ */
d30 4
a33 3
	int		 pflags;
	int		 flags;
#define	MAN_HALT	(1 << 0)
d38 1
d40 1
@


1.13
log
@merge 1.9.17, keeping local patches

* much improved pod2man support and low-level roff robustness
* have -Tlint imply -Wall and -fstrict
* use fewer macros and more enum in libman
* and various bug fixes
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.12 2010/03/25 23:23:01 schwarze Exp $ */
d64 2
d116 2
a117 1
int		  man_unscope(struct man *, const struct man_node *);
@


1.12
log
@merge 1.9.16, keeping local patches

This is mostly cleanup by kristaps@@ after my rather hackish patch
to tolerate the non-text macros .na, .sp, .br in next-line scope;
plus some nesting issues fixed by him, all in man(7).
This survived a full  cd /usr/src; make man.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.11 2009/12/22 23:58:00 schwarze Exp $ */
d63 1
d67 1
a67 1
#define	MACRO_PROT_ARGS	  struct man *m, int tok, int line, \
d77 1
d94 5
a98 7
int		  man_block_alloc(struct man *, int, int, int);
int		  man_head_alloc(struct man *, int, int, int);
int		  man_body_alloc(struct man *, int, int, int);
int		  man_elem_alloc(struct man *, int, int, int);
void		  man_node_free(struct man_node *);
void		  man_node_freelist(struct man_node *);
void		  man_node_unlink(struct man *, struct man_node *);
d100 1
a100 1
int		  man_hash_find(const char *);
@


1.11
log
@sync to 1.9.12, mostly portability and refactoring:

correctness/functionality:
- bugfix: do not die when overstep hits the right margin
- new option: -fign-escape
- and various HTML features

portability:
- replace bzero(3) by memset(3), which is ANSI C
- replace err(3)/warn(3) by perror(3)/exit(3), which is ANSI C
- iuse argv[0] instead of __progname
- add time.h to various files for FreeBSD compilation

simplicity:
- do not allocate header/footer data dynamically in *_term.c
- provide and use malloc frontends that error out on failure

for full changelogs, see http://bsd.lv/cgi-bin/cvsweb.cgi/
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.10 2009/10/27 21:40:07 schwarze Exp $ */
d33 4
a36 3
#define	MAN_ELINE	(1 << 1) 	/* Next-line element scope. */
#define	MAN_BLINE	(1 << 2) 	/* Next-line block scope. */
#define	MAN_LITERAL	(1 << 3)	/* Literal input. */
d48 1
d75 1
d98 1
@


1.10
log
@sync to 1.9.11: adapt printing of dates to groff conventions,
NetBSD portability fixes and some minor bugfixes and feature enhancements;
also checked that my hyphenation code still works on top of this
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.9 2009/09/21 21:11:36 schwarze Exp $ */
a43 1
	WNMEM,
@


1.9
log
@sync to 1.9.5: lookup hashes are now static tables
shortening the code, and, according to kristaps@@, speeding it up
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.8 2009/08/22 23:17:39 schwarze Exp $ */
a56 1
	WMACRO,
@


1.8
log
@another large chunk of -man updates,
among others regarding .DT, .HP, .RS, .RE, .SH, .SS, and scoping,
now in sync vith release 1.9.1
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.7 2009/08/22 20:14:37 schwarze Exp $ */
a29 1
	void		*htab;
d97 2
a98 3
void		 *man_hash_alloc(void);
int		  man_hash_find(const void *, const char *);
void		  man_hash_free(void *);
@


1.7
log
@Kristaps@@ significantly overhauled libman.
I'm committing this in one large chunk because in contrast to -mdoc, -man
is mostly untested in OpenBSD anyway, so any fallout can be fixed in-tree.
Among others, improved support for .IP, .HP, and .TP.
Now in sync with release 1.9.0.
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.6 2009/08/22 15:15:37 schwarze Exp $ */
d36 1
d61 3
d74 2
d113 1
@


1.6
log
@sync to 1.8.4: support .sp in -man
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.5 2009/07/12 20:30:27 schwarze Exp $ */
d34 2
a35 1
#define	MAN_NLINE	(1 << 1)
d54 6
d63 11
a84 1
int		  man_err(struct man *, int, int, int, enum merr);
d86 3
a92 2
int		  man_macro(struct man *, int, 
			int, int, int *, char *);
d96 6
d105 1
d107 1
@


1.5
log
@sync to 1.7.23: unify the various "enum merr" into libman.h and libmdoc.h,
use it as a new argument to mdoc_err(), the same way as for for man_err(),
and use string tables instead of switch statements to select error messages
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.4 2009/07/07 00:54:46 schwarze Exp $ */
d52 1
@


1.4
log
@sync to 1.7.21: provide WESCAPE and MAN_IGN_ESCAPE,
to be used soon in man_validate.c
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.3 2009/06/23 22:05:42 schwarze Exp $ */
d42 1
a42 1
	WNPRINT,
d51 2
a52 1
	WESCAPE
d58 1
a58 1
		  man_err((m), l, p, 1, (t))
d60 1
a60 1
		  man_err((m), l, p, 0, (t))
@


1.3
log
@sync to 1.7.20: error reporting functions for -man
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.2 2009/06/14 23:00:57 schwarze Exp $ */
d50 2
a51 1
	WNOTITLE
@


1.2
log
@sync to 1.7.16: comments, whitespace and spelling fixes; no functional change
@
text
@d1 1
a1 1
/*	$Id: libman.h,v 1.9 2009/06/10 20:18:43 kristaps Exp $ */
d41 12
d55 10
@


1.1
log
@Initial check-in of mandoc for formatting manuals. ok deraadt@@
@
text
@d1 1
a1 1
/* $Id: libman.h,v 1.7 2009/03/26 14:38:11 kristaps Exp $ */
d3 1
a3 1
 * Copyright (c) 2009 Kristaps Dzonsons <kristaps@@openbsd.org>
d6 2
a7 3
 * purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all
 * copies.
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
@

