head	1.23;
access;
symbols
	OPENBSD_6_1:1.21.0.8
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.23
date	2017.07.08.17.52.42;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	1RJz61Tw2T8cTX39;

1.22
date	2017.06.08.18.11.15;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	iJqHiCg2x8ufqICJ;

1.21
date	2015.10.06.18.30.44;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	hxQV8O1pNUaef4ir;

1.20
date	2015.01.30.17.31.20;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	8uPgte1HahL1XRHj;

1.19
date	2015.01.30.04.08.37;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	KL58yWbJhw6UbgSB;

1.18
date	2015.01.30.02.08.37;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	vvSu12hfLARx94BX;

1.17
date	2015.01.28.17.30.37;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	B9i4oMLogJsiyrd5;

1.16
date	2015.01.28.15.02.25;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	Um2gz4HrZv1IOy6F;

1.15
date	2015.01.27.05.20.30;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	x93gRIdSgdjntkaE;

1.14
date	2015.01.26.00.54.09;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	vhh5zuNKcPCGcJgK;

1.13
date	2015.01.21.00.45.16;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	luBZukwvZIctwZsD;

1.12
date	2015.01.14.22.44.51;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	7qvZiyLLUmJiYfWk;

1.11
date	2014.11.28.19.25.03;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	1m1y3OocNVYDnyZE;

1.10
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2014.03.21.22.17.01;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.31.22.08.03;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.18.10.25.28;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.24.16.22.02;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.25.12.24.26;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.04.22.28.17;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.15.22.07.12;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.15.21.33.47;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.15.19.20.03;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Simplify by creating struct roff_node syntax tree nodes for tbl(7)
right from roff_parseln() rather than delegating to read.c,
similar to what i just did for eqn(7).

The interface function roff_span() becomes obsolete and is deleted,
the former interface function roff_addtbl() becomes static,
the interface functions tbl_read() and tbl_cdata() become void,
and minus twelve linus of code.

No functional change.
@
text
@/*	$OpenBSD: tbl.c,v 1.22 2017/06/08 18:11:15 schwarze Exp $ */
/*
 * Copyright (c) 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2011, 2015 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/types.h>

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "mandoc.h"
#include "mandoc_aux.h"
#include "libmandoc.h"
#include "libroff.h"


void
tbl_read(struct tbl_node *tbl, int ln, const char *p, int pos)
{
	const char	*cp;
	int		 active;

	/*
	 * In the options section, proceed to the layout section
	 * after a semicolon, or right away if there is no semicolon.
	 * Ignore semicolons in arguments.
	 */

	if (tbl->part == TBL_PART_OPTS) {
		tbl->part = TBL_PART_LAYOUT;
		active = 1;
		for (cp = p + pos; *cp != '\0'; cp++) {
			switch (*cp) {
			case '(':
				active = 0;
				continue;
			case ')':
				active = 1;
				continue;
			case ';':
				if (active)
					break;
				continue;
			default:
				continue;
			}
			break;
		}
		if (*cp == ';') {
			tbl_option(tbl, ln, p, &pos);
			if (p[pos] == '\0')
				return;
		}
	}

	/* Process the other section types.  */

	switch (tbl->part) {
	case TBL_PART_LAYOUT:
		tbl_layout(tbl, ln, p, pos);
		break;
	case TBL_PART_CDATA:
		tbl_cdata(tbl, ln, p, pos);
		break;
	default:
		tbl_data(tbl, ln, p, pos);
		break;
	}
}

struct tbl_node *
tbl_alloc(int pos, int line, struct mparse *parse)
{
	struct tbl_node	*tbl;

	tbl = mandoc_calloc(1, sizeof(*tbl));
	tbl->line = line;
	tbl->pos = pos;
	tbl->parse = parse;
	tbl->part = TBL_PART_OPTS;
	tbl->opts.tab = '\t';
	tbl->opts.decimal = '.';
	return tbl;
}

void
tbl_free(struct tbl_node *tbl)
{
	struct tbl_row	*rp;
	struct tbl_cell	*cp;
	struct tbl_span	*sp;
	struct tbl_dat	*dp;

	while ((rp = tbl->first_row) != NULL) {
		tbl->first_row = rp->next;
		while (rp->first != NULL) {
			cp = rp->first;
			rp->first = cp->next;
			free(cp->wstr);
			free(cp);
		}
		free(rp);
	}

	while ((sp = tbl->first_span) != NULL) {
		tbl->first_span = sp->next;
		while (sp->first != NULL) {
			dp = sp->first;
			sp->first = dp->next;
			free(dp->string);
			free(dp);
		}
		free(sp);
	}

	free(tbl);
}

void
tbl_restart(int line, int pos, struct tbl_node *tbl)
{
	if (tbl->part == TBL_PART_CDATA)
		mandoc_msg(MANDOCERR_TBLDATA_BLK, tbl->parse,
		    line, pos, "T&");

	tbl->part = TBL_PART_LAYOUT;
	tbl->line = line;
	tbl->pos = pos;
}

const struct tbl_span *
tbl_span(struct tbl_node *tbl)
{
	struct tbl_span	 *span;

	assert(tbl);
	span = tbl->current_span ? tbl->current_span->next
				 : tbl->first_span;
	if (span)
		tbl->current_span = span;
	return span;
}

int
tbl_end(struct tbl_node *tbl)
{
	struct tbl_span *sp;

	if (tbl->part == TBL_PART_CDATA)
		mandoc_msg(MANDOCERR_TBLDATA_BLK, tbl->parse,
		    tbl->line, tbl->pos, "TE");

	sp = tbl->first_span;
	while (sp != NULL && sp->first == NULL)
		sp = sp->next;
	if (sp == NULL) {
		mandoc_msg(MANDOCERR_TBLDATA_NONE, tbl->parse,
		    tbl->line, tbl->pos, NULL);
		return 0;
	}
	return 1;
}
@


1.22
log
@Implement w layout specifier (minimum column width).
Improve width calculation of text blocks.
Reduces the groff/mandoc diff in Base+Xenocara by about 800 lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.21 2015/10/06 18:30:44 schwarze Exp $ */
d32 1
a32 1
enum rofferr
d67 1
a67 1
				return ROFF_IGN;
d76 1
a76 1
		return ROFF_IGN;
d78 2
a79 1
		return tbl_cdata(tbl, ln, p, pos) ? ROFF_TBL : ROFF_IGN;
d81 1
a83 3

	tbl_data(tbl, ln, p, pos);
	return ROFF_TBL;
d160 1
a160 1
tbl_end(struct tbl_node **tblp)
a161 1
	struct tbl_node	*tbl;
a162 3

	tbl = *tblp;
	*tblp = NULL;
@


1.21
log
@modernize style: "return" is not a function; ok cmp(1)
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.20 2015/01/30 17:31:20 schwarze Exp $ */
d115 1
@


1.20
log
@Delete the redundant tbl span flags, just inspect the actual data
where needed, which is less fragile.
This fixes a subtle NULL pointer access to tp->tbl.cols:
Due to a bug in the man(7) parser, the first span of a table can
end up in a .TP head, in which case tblcalc() was never called.
Found by jsg@@ with afl.
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.19 2015/01/30 04:08:37 schwarze Exp $ */
d67 1
a67 1
				return(ROFF_IGN);
d76 1
a76 1
		return(ROFF_IGN);
d78 1
a78 1
		return(tbl_cdata(tbl, ln, p, pos) ? ROFF_TBL : ROFF_IGN);
d84 1
a84 1
	return(ROFF_TBL);
d99 1
a99 1
	return(tbl);
d156 1
a156 1
	return(span);
d178 1
a178 1
		return(0);
d180 1
a180 1
	return(1);
@


1.19
log
@Abolish struct tbl_head and replace it by an "int col" member in
struct tbl_cell.  No functional change, minus 40 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.18 2015/01/30 02:08:37 schwarze Exp $ */
a179 4

	if (tbl->last_span != NULL)
		tbl->last_span->flags |= TBL_SPAN_LAST;

@


1.18
log
@Auditing the tbl(7) code for more NULL pointer accesses, i came out
empty-handed; so this is just KNF and some code simplifications,
no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.17 2015/01/28 17:30:37 schwarze Exp $ */
a108 1
	struct tbl_head	*hp;
a128 5
	}

	while ((hp = tbl->first_head) != NULL) {
		tbl->first_head = hp->next;
		free(hp);
@


1.17
log
@* Polish tbl(7) error reporting.
* Do not print out macro names in tbl(7) data blocks.
* Like with GNU tbl, let empty tables cause a blank line.
* Avoid producing empty tables in -Tman.
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.16 2015/01/28 15:02:25 schwarze Exp $ */
d92 1
a92 1
	tbl = mandoc_calloc(1, sizeof(struct tbl_node));
d111 1
a111 1
	while (NULL != (rp = tbl->first_row)) {
d113 1
a113 1
		while (rp->first) {
d121 1
a121 1
	while (NULL != (sp = tbl->first_span)) {
d123 1
a123 1
		while (sp->first) {
d126 1
a126 2
			if (dp->string)
				free(dp->string);
d132 1
a132 1
	while (NULL != (hp = tbl->first_head)) {
@


1.16
log
@For now, it can't be helped that mandoc tbl(7) ignores high-level macros,
but stop throwing away their arguments.  This fixes information loss in a
handful of Xenocara manuals, at the price of a small amount of formatting
noise creeping through.
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.15 2015/01/27 05:20:30 schwarze Exp $ */
d144 3
a146 3
	if (TBL_PART_CDATA == tbl->part)
		mandoc_msg(MANDOCERR_TBLBLOCK, tbl->parse,
		    tbl->line, tbl->pos, NULL);
a150 4

	if (NULL == tbl->first_span || NULL == tbl->first_span->first)
		mandoc_msg(MANDOCERR_TBLNODATA, tbl->parse,
		    tbl->line, tbl->pos, NULL);
d166 1
a166 1
void
d175 4
d182 2
a183 2
	if (sp == NULL)
		mandoc_msg(MANDOCERR_TBLNODATA, tbl->parse,
d185 2
d188 1
a188 1
	if (tbl->last_span)
d191 1
a191 3
	if (TBL_PART_CDATA == tbl->part)
		mandoc_msg(MANDOCERR_TBLBLOCK, tbl->parse,
		    tbl->line, tbl->pos, NULL);
@


1.15
log
@Multiple parser and formatter fixes for line drawing in tbl(7).
* Allow mixing vertical line bars with the layout options
of the preceding layout cell.
* Correctly combine box options with layout lines.
* Correctly print vertical lines in data rows, with the right spacing.
* Correctly print cross markers and left and right ends of
horizontal lines even if vertical lines differ above and below.
* Avoid the bogus error message "no table data cells"
when a table data section starts with a horizontal line.
No increase in code size.
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.14 2015/01/26 00:54:09 schwarze Exp $ */
d33 1
a33 1
tbl_read(struct tbl_node *tbl, int ln, const char *p, int offs)
d47 1
a47 1
		for (cp = p; *cp != '\0'; cp++) {
d65 2
a66 2
			tbl_option(tbl, ln, p);
			if (*(p = cp + 1) == '\0')
d75 1
a75 1
		tbl_layout(tbl, ln, p);
d78 1
a78 1
		return(tbl_cdata(tbl, ln, p) ? ROFF_TBL : ROFF_IGN);
d83 1
a83 1
	tbl_data(tbl, ln, p);
@


1.14
log
@Improve (or rather, rewrite) tbl(7) option parsing.
* Allow the layout to start after the semicolon on the options line.
* Ignore leading commas.
* Option arguments cannot contain closing parentheses.
* Avoid needless UNSUPP messages.
* Better ERROR reporting.
* Delete unused "linesize" field in struct tbl_opts.
* No need for static buffers.
* Garbage collect one almost empty wrapper function.
Improved functionality, but minus 40 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.13 2015/01/21 00:45:16 schwarze Exp $ */
d174 1
d179 4
a182 1
	if (NULL == tbl->first_span || NULL == tbl->first_span->first)
@


1.13
log
@blank lines in tables do not need special handling; simplifies code
and reduces groff/mandoc differences in base by about 1%
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.12 2015/01/14 22:44:51 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2011 Ingo Schwarze <schwarze@@openbsd.org>
a34 1
	int		 len;
d36 1
a36 3

	cp = &p[offs];
	len = (int)strlen(cp);
d39 3
a41 4
	 * If we're in the options section and we don't have a
	 * terminating semicolon, assume we've moved directly into the
	 * layout section.  No need to report a warning: this is,
	 * apparently, standard behaviour.
d44 26
a69 3
	if (TBL_PART_OPTS == tbl->part && len)
		if (';' != cp[len - 1])
			tbl->part = TBL_PART_LAYOUT;
d71 1
a71 1
	/* Now process each logical section of the table.  */
a73 3
	case TBL_PART_OPTS:
		tbl_option(tbl, ln, p);
		return(ROFF_IGN);
a97 1
	tbl->opts.linesize = 12;
@


1.12
log
@simplify by getting rid of ROFF_ERR in tbl(7) parsing; no functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: tbl.c,v 1.11 2014/11/28 19:25:03 schwarze Exp $ */
d67 2
a68 5
	/*
	 * This only returns zero if the line is empty, so we ignore it
	 * and continue on.
	 */
	return(tbl_data(tbl, ln, p) ? ROFF_TBL : ROFF_IGN);
@


1.11
log
@Add some missing OpenBSD RCS markers
and a few missing <sys/types.h> inclusions; no code change.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d56 2
a57 1
		return(tbl_option(tbl, ln, p) ? ROFF_IGN : ROFF_ERR);
d59 2
a60 1
		return(tbl_layout(tbl, ln, p) ? ROFF_IGN : ROFF_ERR);
@


1.10
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.9 2014/03/21 22:17:01 schwarze Exp $ */
d18 2
@


1.9
log
@The files mandoc.c and mandoc.h contained both specialised low-level
functions used for multiple languages (mdoc, man, roff), for example
mandoc_escape(), mandoc_getarg(), mandoc_eos(), and generic auxiliary
functions.  Split the auxiliaries out into their own file and header.
While here, do some #include cleanup.
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.8 2013/05/31 22:08:03 schwarze Exp $ */
d29 1
d53 1
a53 1
	case (TBL_PART_OPTS):
d55 1
a55 1
	case (TBL_PART_LAYOUT):
d57 1
a57 1
	case (TBL_PART_CDATA):
d129 2
a130 2
		mandoc_msg(MANDOCERR_TBLBLOCK, tbl->parse, 
				tbl->line, tbl->pos, NULL);
d138 1
a138 1
				tbl->line, tbl->pos, NULL);
d163 2
a164 2
		mandoc_msg(MANDOCERR_TBLNODATA, tbl->parse, 
				tbl->line, tbl->pos, NULL);
d170 2
a171 2
		mandoc_msg(MANDOCERR_TBLBLOCK, tbl->parse, 
				tbl->line, tbl->pos, NULL);
a172 1

@


1.8
log
@More cleanup: Consistently use the name "struct tbl_node *tbl"
that is already used almost everywhere instead of gratuitiously
inventing different names at four places.  No functional change.
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.7 2011/09/18 10:25:28 schwarze Exp $ */
d25 1
@


1.7
log
@sync to version 1.11.5:
adding an implementation of the eqn(7) language
by kristaps@@

So far, only .EQ/.EN blocks are handled, in-line equations are not, and
rendering is not yet very pretty, but the parser is fairly complete.
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.6 2011/04/24 16:22:02 schwarze Exp $ */
d71 1
a71 1
	struct tbl_node	*p;
d73 9
a81 9
	p = mandoc_calloc(1, sizeof(struct tbl_node));
	p->line = line;
	p->pos = pos;
	p->parse = parse;
	p->part = TBL_PART_OPTS;
	p->opts.tab = '\t';
	p->opts.linesize = 12;
	p->opts.decimal = '.';
	return(p);
d85 1
a85 1
tbl_free(struct tbl_node *p)
d93 2
a94 2
	while (NULL != (rp = p->first_row)) {
		p->first_row = rp->next;
d103 2
a104 2
	while (NULL != (sp = p->first_span)) {
		p->first_span = sp->next;
d115 2
a116 2
	while (NULL != (hp = p->first_head)) {
		p->first_head = hp->next;
d120 1
a120 1
	free(p);
@


1.6
log
@Merge version 1.11.1:
Again lots of cleanup and maintenance work by kristaps@@.
- simplify error reporting: less function pointers, more mandoc_[v]msg
- main: split document parsing out of main.c into read.c
- roff, mdoc, man: improved recognition of control characters
- roff: better handling of if/else stack overflows
- roff: add some predefined strings for backward compatibility
- mdoc, man: empty sections are not errors
- mdoc: move delimiter handling to libmdoc
- some header restructuring and some minor features and fixes
This merge causes two minor regressions
that i will fix in separate commits right afterwards.
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.5 2011/01/25 12:24:26 schwarze Exp $ */
d153 1
a153 1
tbl_end(struct tbl_node *tbl)
d155 4
@


1.5
log
@Since tbl_data() can now produce multiple spans, let parsebuf()
generate man(7) or mdoc(7) nodes for all these spans,
not only for the last one.
Restores the horizontal lines in the cpu(4/hppa) tables.
ok kristaps@@
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.4 2011/01/04 22:28:17 schwarze Exp $ */
a24 1
#include "roff.h"
d69 1
a69 1
tbl_alloc(int pos, int line, void *data, const mandocmsg msg)
d76 1
a76 2
	p->data = data;
	p->msg = msg;
d127 2
a128 1
		TBL_MSG(tbl, MANDOCERR_TBLBLOCK, tbl->line, tbl->pos);
d135 2
a136 1
		TBL_MSG(tbl, MANDOCERR_TBLNODATA, tbl->line, tbl->pos);
d157 2
a158 1
		TBL_MSG(tbl, MANDOCERR_TBLNODATA, tbl->line, tbl->pos);
d164 2
a165 1
		TBL_MSG(tbl, MANDOCERR_TBLBLOCK, tbl->line, tbl->pos);
@


1.4
log
@Merge kristaps@@' cleaner tbl integration, removing mine;
there are still a few bugs, but fixing these will be easier in tree.
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.1 2010/12/28 10:51:03 kristaps Exp $ */
d4 1
d140 1
a140 1
tbl_span(const struct tbl_node *tbl)
d142 1
d145 5
a149 1
	return(tbl->last_span);
@


1.3
log
@Move tbl width calculation from plain strlen to mandoc terminal width
calculation routines.  This gives us mostly sane table column widths.
"move forward" deraadt@@
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.2 2010/10/15 21:33:47 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009 Kristaps Dzonsons <kristaps@@kth.se>
a16 2
#include <sys/queue.h>

a17 2
#include <errno.h>
#include <limits.h>
d21 1
d23 4
a26 23
#include "out.h"
#include "term.h"
#include "tbl.h"
#include "tbl_extern.h"


const	char *const	 errnames[ERR_MAX] = {
	"bad syntax",	 /* ERR_SYNTAX */
	"bad option"	 /* ERR_OPTION */
};

static	char		 buf[1024]; /* XXX */

static	enum tbl_tok	 tbl_next_char(char);
static	void		 tbl_init(struct tbl *);
static	void		 tbl_clear(struct tbl *);
static	struct tbl_head *tbl_head_alloc(struct tbl *);
static	void		 tbl_span_free(struct tbl_span *);
static	void		 tbl_data_free(struct tbl_data *);
static	void		 tbl_row_free(struct tbl_row *);

static	void		 headadj(const struct tbl_cell *, 
				struct tbl_head *);
d28 2
a29 2
static void
tbl_init(struct tbl *tbl)
d31 2
d34 2
a35 1
	bzero(tbl, sizeof(struct tbl));
d37 6
a42 9
	tbl->part = TBL_PART_OPTS;
	tbl->tab = '\t';
	tbl->linesize = 12;
	tbl->decimal = '.';

	TAILQ_INIT(&tbl->span);
	TAILQ_INIT(&tbl->row);
	TAILQ_INIT(&tbl->head);
}
d44 3
d48 1
a48 7
int
tbl_read(struct tbl *tbl, const char *f, int ln, const char *p, int len)
{
	
	if (len && TBL_PART_OPTS == tbl->part)
		if (';' != p[len - 1])
			tbl->part = TBL_PART_LAYOUT;
d52 1
a52 3
		return(tbl_option(tbl, f, ln, p));
	case (TBL_PART_CLAYOUT):
		/* FALLTHROUGH */
d54 3
a56 65
		return(tbl_layout(tbl, f, ln, p));
	case (TBL_PART_DATA):
		return(tbl_data(tbl, f, ln, p));
	case (TBL_PART_ERROR):
		break;
	}

	return(0);
}


int
tbl_close(struct termp *p, struct tbl *tbl, const char *f, int ln)
{

	if (TBL_PART_DATA != tbl->part) 
		return(tbl_errx(tbl, ERR_SYNTAX, f, ln, 0));
	if ( ! tbl_data_close(tbl, f, ln))
		return(0);
#if 1
	return(tbl_calc_term(p, tbl));
#else
	return(tbl_calc_tree(tbl));
#endif
}


int
tbl_write(struct termp *p, const struct tbl *tbl)
{

#if 1
	return(tbl_write_term(p, tbl));
#else
	return(tbl_write_tree(tbl));
#endif
}


static enum tbl_tok
tbl_next_char(char c)
{

	/*
	 * These are delimiting tokens.  They separate out words in the
	 * token stream.
	 */

	switch (c) {
	case ('('):
		return(TBL_TOK_OPENPAREN);
	case (')'):
		return(TBL_TOK_CLOSEPAREN);
	case (' '):
		return(TBL_TOK_SPACE);
	case ('\t'):
		return(TBL_TOK_TAB);
	case (';'):
		return(TBL_TOK_SEMICOLON);
	case ('.'):
		return(TBL_TOK_PERIOD);
	case (','):
		return(TBL_TOK_COMMA);
	case (0):
		return(TBL_TOK_NIL);
a60 50
	return(TBL_TOK_WORD);
}


const char *
tbl_last(void)
{

	return(buf);
}


int
tbl_last_uint(void)
{
	char		*ep;
	long		 lval;

	/* From OpenBSD's strtol(3).  Gross. */

	errno = 0;
	lval = strtol(buf, &ep, 10);
	if (buf[0] == 0 || *ep != 0)
		return(-1);
	if (errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN))
		return(-1);
	if (lval < 0 || lval > INT_MAX)
		return(-1);

	return((int)lval);
}


enum tbl_tok
tbl_next(const char *p, int *pos)
{
	int		 i;
	enum tbl_tok	 c;

	buf[0] = 0;

	if (TBL_TOK_WORD != (c = tbl_next_char(p[*pos]))) {
		if (TBL_TOK_NIL != c) {
			buf[0] = p[*pos];
			buf[1] = 0;
			(*pos)++;
		}
		return(c);
	}

d62 2
a63 3
	 * Copy words into a nil-terminated buffer.  For now, we use a
	 * static buffer.  Eventually this should be made into a dynamic
	 * one living in struct tbl.
d65 1
a65 11

	for (i = 0; i < 1023; i++, (*pos)++)
		if (TBL_TOK_WORD == tbl_next_char(p[*pos]))
			buf[i] = p[*pos];
		else
			break;

	assert(i < 1023);
	buf[i] = 0;

	return(TBL_TOK_WORD);
d68 2
a69 3

int
tbl_err(struct tbl *tbl)
d71 1
d73 9
a81 42
	(void)fprintf(stderr, "%s\n", strerror(errno));
	tbl->part = TBL_PART_ERROR;
	return(0);
}


/* ARGSUSED */
int
tbl_warnx(struct tbl *tbl, enum tbl_err tok, 
		const char *f, int line, int pos)
{

	(void)fprintf(stderr, "%s:%d:%d: %s\n", 
			f, line, pos + 1, errnames[tok]);

	/* TODO: -Werror */
	return(1);
}


int
tbl_errx(struct tbl *tbl, enum tbl_err tok, 
		const char *f, int line, int pos)
{

	(void)fprintf(stderr, "%s:%d:%d: %s\n", 
			f, line, pos + 1, errnames[tok]);

	tbl->part = TBL_PART_ERROR;
	return(0);
}


struct tbl *
tbl_alloc(void)
{
	struct tbl	*p;

	if (NULL == (p = malloc(sizeof(struct tbl))))
		return(NULL);

	tbl_init(p);
a84 1

d86 1
a86 1
tbl_free(struct tbl *p)
d88 14
a101 24

	tbl_clear(p);
	free(p);
}


void
tbl_reset(struct tbl *tbl)
{

	tbl_clear(tbl);
	tbl_init(tbl);
}


struct tbl_span *
tbl_span_alloc(struct tbl *tbl)
{
	struct tbl_span	*p, *pp;
	struct tbl_row	*row;

	if (NULL == (p = calloc(1, sizeof(struct tbl_span)))) {
		(void)tbl_err(tbl);
		return(NULL);
d104 10
a113 12
	TAILQ_INIT(&p->data);
	TAILQ_INSERT_TAIL(&tbl->span, p, entries);

	/* LINTED */
	pp = TAILQ_PREV(p, tbl_spanh, entries);

	if (pp) {
		row = TAILQ_NEXT(pp->row, entries);
		if (NULL == row)
			row = pp->row;
	} else {
		row = TAILQ_FIRST(&tbl->row);
d116 3
a118 15
	assert(row);
	p->row = row;
	p->tbl = tbl;
	return(p);
}


struct tbl_row *
tbl_row_alloc(struct tbl *tbl)
{
	struct tbl_row	*p;

	if (NULL == (p = calloc(1, sizeof(struct tbl_row)))) {
		(void)tbl_err(tbl);
		return(NULL);
d121 1
a121 4
	TAILQ_INIT(&p->cell);
	TAILQ_INSERT_TAIL(&tbl->row, p, entries);
	p->tbl = tbl;
	return(p);
d124 2
a125 33

static void
headadj(const struct tbl_cell *cell, struct tbl_head *head)
{
	if (TBL_CELL_VERT != cell->pos &&
			TBL_CELL_DVERT != cell->pos) {
		head->pos = TBL_HEAD_DATA;
		return;
	}
	if (TBL_CELL_VERT == cell->pos)
		if (TBL_HEAD_DVERT != head->pos)
			head->pos = TBL_HEAD_VERT;
	if (TBL_CELL_DVERT == cell->pos)
		head->pos = TBL_HEAD_DVERT;
}


static struct tbl_head *
tbl_head_alloc(struct tbl *tbl)
{
	struct tbl_head	*p;

	if (NULL == (p = calloc(1, sizeof(struct tbl_head)))) {
		(void)tbl_err(tbl);
		return(NULL);
	}
	p->tbl = tbl;
	return(p);
}


struct tbl_cell *
tbl_cell_alloc(struct tbl_row *rp, enum tbl_cellt pos)
d127 2
a128 73
	struct tbl_cell	*p, *pp;
	struct tbl_head	*h, *hp;

	if (NULL == (p = calloc(1, sizeof(struct tbl_cell)))) {
		(void)tbl_err(rp->tbl);
		return(NULL);
	}

	TAILQ_INSERT_TAIL(&rp->cell, p, entries);
	p->pos = pos;
	p->row = rp;

	/*
	 * This is a little bit complicated.  Here we determine the
	 * header the corresponds to a cell.  We add headers dynamically
	 * when need be or re-use them, otherwise.  As an example, given
	 * the following:
	 *
	 * 	1  c || l 
	 * 	2  | c | l
	 * 	3  l l
	 * 	3  || c | l |.
	 *
	 * We first add the new headers (as there are none) in (1); then
	 * in (2) we insert the first spanner (as it doesn't match up
	 * with the header); then we re-use the prior data headers,
	 * skipping over the spanners; then we re-use everything and add
	 * a last spanner.  Note that VERT headers are made into DVERT
	 * ones.
	 */

	/* LINTED */
	pp = TAILQ_PREV(p, tbl_cellh, entries);

	h = pp ? TAILQ_NEXT(pp->head, entries) : 
		TAILQ_FIRST(&rp->tbl->head);

	if (h) {
		/* Re-use data header. */
		if (TBL_HEAD_DATA == h->pos && 
				(TBL_CELL_VERT != p->pos &&
				 TBL_CELL_DVERT != p->pos)) {
			p->head = h;
			return(p);
		}

		/* Re-use spanner header. */
		if (TBL_HEAD_DATA != h->pos && 
				(TBL_CELL_VERT == p->pos ||
				 TBL_CELL_DVERT == p->pos)) {
			headadj(p, h);
			p->head = h;
			return(p);
		}

		/* Right-shift headers with a new spanner. */
		if (TBL_HEAD_DATA == h->pos && 
				(TBL_CELL_VERT == p->pos ||
				 TBL_CELL_DVERT == p->pos)) {
			if (NULL == (hp = tbl_head_alloc(rp->tbl)))
				return(NULL);
			TAILQ_INSERT_BEFORE(h, hp, entries);
			headadj(p, hp);
			p->head = hp;
			return(p);
		}

		h = TAILQ_NEXT(h, entries);
		if (h) {
			headadj(p, h);
			p->head = h;
			return(p);
		}
d130 3
a132 2
		/* Fall through to default case... */
	}
d134 2
a135 6
	if (NULL == (hp = tbl_head_alloc(rp->tbl)))
		return(NULL);
	TAILQ_INSERT_TAIL(&rp->tbl->head, hp, entries);
	headadj(p, hp);
	p->head = hp;
	return(p);
d138 2
a139 3

struct tbl_data *
tbl_data_alloc(struct tbl_span *sp)
a140 3
	struct tbl_data	*p;
	struct tbl_cell	*cp;
	struct tbl_data	*dp;
d142 2
a143 21
	if (NULL == (p = calloc(1, sizeof(struct tbl_data)))) {
		(void)tbl_err(sp->row->tbl);
		return(NULL);
	}

	cp = NULL;
	/* LINTED */
	if (NULL == (dp = TAILQ_LAST(&sp->data, tbl_datah)))
		cp = TAILQ_FIRST(&sp->row->cell);
	else if (dp->cell)
		cp = TAILQ_NEXT(dp->cell, entries);

	TAILQ_INSERT_TAIL(&sp->data, p, entries);

	if (cp && (TBL_CELL_VERT == cp->pos || 
				TBL_CELL_DVERT == cp->pos))
		cp = TAILQ_NEXT(cp, entries);

	p->span = sp;
	p->cell = cp;
	return(p);
d146 2
a147 28

static void
tbl_clear(struct tbl *p)
{
	struct tbl_span	*span;
	struct tbl_head	*head;
	struct tbl_row	*row;

	/* LINTED */
	while ((span = TAILQ_FIRST(&p->span))) {
		TAILQ_REMOVE(&p->span, span, entries);
		tbl_span_free(span);
	}
	/* LINTED */
	while ((row = TAILQ_FIRST(&p->row))) {
		TAILQ_REMOVE(&p->row, row, entries);
		tbl_row_free(row);
	}
	/* LINTED */
	while ((head = TAILQ_FIRST(&p->head))) {
		TAILQ_REMOVE(&p->head, head, entries);
		free(head);
	}
}


static void
tbl_span_free(struct tbl_span *p)
a148 9
	struct tbl_data	*data;

	/* LINTED */
	while ((data = TAILQ_FIRST(&p->data))) {
		TAILQ_REMOVE(&p->data, data, entries);
		tbl_data_free(data);
	}
	free(p);
}
d150 2
d153 2
a154 3
static void
tbl_data_free(struct tbl_data *p)
{
d156 2
a157 3
	if (p->string)
		free(p->string);
	free(p);
a159 13

static void
tbl_row_free(struct tbl_row *p)
{
	struct tbl_cell	*cell;

	/* LINTED */
	while ((cell = TAILQ_FIRST(&p->cell))) {
		TAILQ_REMOVE(&p->cell, cell, entries);
		free(cell);
	}
	free(p);
}
@


1.2
log
@Move tbl output from plain stdio to mandoc terminal output routines.
This fixes (1) all escape sequences and (2) some aspects of indentation.
Table column widths are still way off, though.
"move forward" deraadt@@
@
text
@d1 1
a1 1
/*	$Id: tbl.c,v 1.14 2009/09/12 16:05:34 kristaps Exp $ */
d93 1
a93 1
tbl_close(struct tbl *tbl, const char *f, int ln)
d101 1
a101 1
	return(tbl_calc_term(tbl));
@


1.1
log
@Import tbl parser and renderer written by kristaps@@.
Unchanged code from bsd.lv release 0.1.5, but without the main program.
Not yet linked to the build; next commit will integrate it into mandoc.
@
text
@d26 2
d109 1
a109 1
tbl_write(const struct tbl *tbl)
d113 1
a113 1
	return(tbl_write_term(tbl));
@

