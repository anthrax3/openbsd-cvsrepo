head	1.49;
access;
symbols
	OPENBSD_6_1:1.46.0.4
	OPENBSD_6_1_BASE:1.46
	OPENBSD_6_0:1.35.0.2
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.32.0.6
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.32.0.2
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.6
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.4
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.2
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.49
date	2017.07.08.14.51.01;	author schwarze;	state Exp;
branches;
next	1.48;
commitid	Gn9C5KmUiz1MgVXP;

1.48
date	2017.06.23.02.31.39;	author schwarze;	state Exp;
branches;
next	1.47;
commitid	5Ey5XxywubUI8LwI;

1.47
date	2017.05.04.22.07.44;	author schwarze;	state Exp;
branches;
next	1.46;
commitid	hU9bJPcS66QLg54n;

1.46
date	2017.03.15.11.29.50;	author schwarze;	state Exp;
branches;
next	1.45;
commitid	0AJYQsnYnWohs8XM;

1.45
date	2017.02.05.20.21.17;	author schwarze;	state Exp;
branches;
next	1.44;
commitid	k3leX1WuwjRY1lpC;

1.44
date	2017.02.05.19.29.03;	author schwarze;	state Exp;
branches;
next	1.43;
commitid	b6Pprk9VRxuYIyVr;

1.43
date	2017.02.05.18.13.28;	author schwarze;	state Exp;
branches;
next	1.42;
commitid	LLN2XeSKb4BTOEt6;

1.42
date	2017.01.29.14.02.19;	author schwarze;	state Exp;
branches;
next	1.41;
commitid	kwoDToz7gzAquXDa;

1.41
date	2017.01.26.18.28.04;	author schwarze;	state Exp;
branches;
next	1.40;
commitid	Yxdf4tUMRu7gtmiH;

1.40
date	2017.01.19.16.56.53;	author schwarze;	state Exp;
branches;
next	1.39;
commitid	jvwd5JdpRKFkEWTt;

1.39
date	2017.01.19.01.00.11;	author schwarze;	state Exp;
branches;
next	1.38;
commitid	JaaPsBMnLuMI8auG;

1.38
date	2017.01.18.19.22.18;	author schwarze;	state Exp;
branches;
next	1.37;
commitid	rkOTHV44amzifb9Y;

1.37
date	2017.01.17.15.32.39;	author schwarze;	state Exp;
branches;
next	1.36;
commitid	bt3XYYmdm9H0zf44;

1.36
date	2017.01.17.01.47.46;	author schwarze;	state Exp;
branches;
next	1.35;
commitid	Nv06v3QGWa6dYYKr;

1.35
date	2016.07.19.13.30.16;	author schwarze;	state Exp;
branches;
next	1.34;
commitid	vM0BMAmv88IMfvC0;

1.34
date	2015.11.07.13.57.55;	author schwarze;	state Exp;
branches;
next	1.33;
commitid	UKwSq7JMt0q6KNpK;

1.33
date	2015.10.13.22.57.49;	author schwarze;	state Exp;
branches;
next	1.32;
commitid	jXIG8UzKLXm2Z9i6;

1.32
date	2014.12.02.10.07.17;	author schwarze;	state Exp;
branches;
next	1.31;
commitid	G1dK13T4nePhhgx3;

1.31
date	2014.12.01.08.05.02;	author schwarze;	state Exp;
branches;
next	1.30;
commitid	dkxNPoJe0koFMMLd;

1.30
date	2014.11.27.14.31.29;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	je75OeVgCvwQD2St;

1.29
date	2014.10.28.17.35.42;	author schwarze;	state Exp;
branches;
next	1.28;
commitid	pNwmOla3ZQwLgu2f;

1.28
date	2014.10.10.15.25.06;	author schwarze;	state Exp;
branches;
next	1.27;
commitid	MpqXOG3dhTX11YQI;

1.27
date	2014.10.09.15.59.08;	author schwarze;	state Exp;
branches;
next	1.26;
commitid	Wy6YFSKH1ddfqJiG;

1.26
date	2014.10.09.15.49.09;	author schwarze;	state Exp;
branches;
next	1.25;
commitid	iJNkkDSk2T9uwIBd;

1.25
date	2014.10.07.18.17.05;	author schwarze;	state Exp;
branches;
next	1.24;
commitid	ovhOTvwzuIxZwsAn;

1.24
date	2014.09.17.19.53.35;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	yu4CTBzbPSexzENm;

1.23
date	2014.08.14.00.29.12;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	uJL3CbZ4GrgMUhuu;

1.22
date	2014.08.13.15.19.24;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	BUSBmHGCSGSyXokp;

1.21
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2013.08.08.20.07.24;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2012.05.28.13.00.51;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2011.10.09.17.59.56;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2011.09.18.10.25.28;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2011.05.29.21.22.18;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2011.01.31.03.04.26;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.16.19.41.16;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.09.14.30.48;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2011.01.04.22.28.17;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2010.12.25.13.23.03;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2010.12.22.00.33.25;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.19.09.22.35;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.25.18.05.54;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.13.01.09.12;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.07.23.15.05;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.18.02.11.26;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.24.02.08.14;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.22.23.58.00;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.27.21.40.07;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.21.19.13.50;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.49
log
@1. Eliminate struct eqn, instead use the existing members
of struct roff_node which is allocated for each equation anyway.
2. Do not keep a list of equation parsers, one parser is enough.
Minus fifty lines of code, no functional change.
@
text
@/*	$OpenBSD: html.h,v 1.48 2017/06/23 02:31:39 schwarze Exp $ */
/*
 * Copyright (c) 2008-2011, 2014 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2017 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

enum	htmltag {
	TAG_HTML,
	TAG_HEAD,
	TAG_BODY,
	TAG_META,
	TAG_TITLE,
	TAG_DIV,
	TAG_H1,
	TAG_H2,
	TAG_SPAN,
	TAG_LINK,
	TAG_BR,
	TAG_A,
	TAG_TABLE,
	TAG_COLGROUP,
	TAG_COL,
	TAG_TR,
	TAG_TD,
	TAG_LI,
	TAG_UL,
	TAG_OL,
	TAG_DL,
	TAG_DT,
	TAG_DD,
	TAG_PRE,
	TAG_VAR,
	TAG_CITE,
	TAG_B,
	TAG_I,
	TAG_CODE,
	TAG_SMALL,
	TAG_STYLE,
	TAG_MATH,
	TAG_MROW,
	TAG_MI,
	TAG_MN,
	TAG_MO,
	TAG_MSUP,
	TAG_MSUB,
	TAG_MSUBSUP,
	TAG_MFRAC,
	TAG_MSQRT,
	TAG_MFENCED,
	TAG_MTABLE,
	TAG_MTR,
	TAG_MTD,
	TAG_MUNDEROVER,
	TAG_MUNDER,
	TAG_MOVER,
	TAG_MAX
};

enum	htmlfont {
	HTMLFONT_NONE = 0,
	HTMLFONT_BOLD,
	HTMLFONT_ITALIC,
	HTMLFONT_BI,
	HTMLFONT_MAX
};

struct	tag {
	struct tag	 *next;
	enum htmltag	  tag;
};

struct	html {
	int		  flags;
#define	HTML_NOSPACE	 (1 << 0) /* suppress next space */
#define	HTML_IGNDELIM	 (1 << 1)
#define	HTML_KEEP	 (1 << 2)
#define	HTML_PREKEEP	 (1 << 3)
#define	HTML_NONOSPACE	 (1 << 4) /* never add spaces */
#define	HTML_LITERAL	 (1 << 5) /* literal (e.g., <PRE>) context */
#define	HTML_SKIPCHAR	 (1 << 6) /* skip the next character */
#define	HTML_NOSPLIT	 (1 << 7) /* do not break line before .An */
#define	HTML_SPLIT	 (1 << 8) /* break line before .An */
#define	HTML_NONEWLINE	 (1 << 9) /* No line break in nofill mode. */
#define	HTML_BUFFER	 (1 << 10) /* Collect a word to see if it fits. */
	size_t		  indent; /* current output indentation level */
	int		  noindent; /* indent disabled by <pre> */
	size_t		  col; /* current output byte position */
	size_t		  bufcol; /* current buf byte position */
	char		  buf[80]; /* output buffer */
	struct tag	 *tag; /* last open tag */
	struct rofftbl	  tbl; /* current table */
	struct tag	 *tblt; /* current open table scope */
	char		 *base_man; /* base for manpage href */
	char		 *base_includes; /* base for include href */
	char		 *style; /* style-sheet URI */
	struct tag	 *metaf; /* current open font scope */
	enum htmlfont	  metal; /* last used font */
	enum htmlfont	  metac; /* current font mode */
	int		  oflags; /* output options */
#define	HTML_FRAGMENT	 (1 << 0) /* don't emit HTML/HEAD/BODY */
};


struct	roff_node;
struct	tbl_span;
struct	eqn_box;

void		  roff_html_pre(struct html *, const struct roff_node *);

void		  print_gen_decls(struct html *);
void		  print_gen_head(struct html *);
struct tag	 *print_otag(struct html *, enum htmltag, const char *, ...);
void		  print_tagq(struct html *, const struct tag *);
void		  print_stagq(struct html *, const struct tag *);
void		  print_text(struct html *, const char *);
void		  print_tblclose(struct html *);
void		  print_tbl(struct html *, const struct tbl_span *);
void		  print_eqn(struct html *, const struct eqn_box *);
void		  print_paragraph(struct html *);
void		  print_endline(struct html *);

char		 *html_make_id(const struct roff_node *);
int		  html_strlen(const char *);
@


1.48
log
@Write text boxes as <mi>, <mn>, or <mo> as appropriate,
and write fontstyle or fontweight attributes where required.
Missing features reported by bentley@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.47 2017/05/04 22:07:44 schwarze Exp $ */
d118 1
a118 1
struct	eqn;
d130 1
a130 1
void		  print_eqn(struct html *, const struct eqn *);
@


1.47
log
@Start roff formatter modules for HTML and termininal output,
used by both the mdoc and man formatters, with the ultimate
goal of reducing code duplication between the two macro formatters.
Made possible by the parser unification.
Add the first formatting function (for the .br request).
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.46 2017/03/15 11:29:50 schwarze Exp $ */
d54 1
@


1.46
log
@Minimal support for deep linking into man(7) pages.
As the man(7) language does not provide semantic markup,
only .SH, .SS, and .UR become anchors for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.45 2017/02/05 20:21:17 schwarze Exp $ */
d118 2
@


1.45
log
@mark up .Ar, .Fa, .Va, .Ft, and .Vt with <var> rather than <i>;
suggested by bentley@@ long ago, but needed lots of cleanup first
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.44 2017/02/05 19:29:03 schwarze Exp $ */
d115 1
d131 1
@


1.44
log
@for .Rs, use <cite>
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.43 2017/02/05 18:13:28 schwarze Exp $ */
d44 1
@


1.43
log
@Improve <table> syntax:
The <col> element can only appear inside <colgroup>, so use <colgroup>.
The <tbody> element is optional and useless, so don't use it.
Even if we would ever need <thead> or <tfoot>, <tbody> would still be
optional and useless; besides, we will likely never need <thead> or <tfoot>,
simply because our languages don't support such functionality.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.42 2017/01/29 14:02:19 schwarze Exp $ */
d44 1
@


1.42
log
@eliminate one useless struct and one level of indirection;
no functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.41 2017/01/26 18:28:04 schwarze Exp $ */
d33 1
a33 1
	TAG_TBODY,
@


1.41
log
@Fix -man -Thtml formatting after .nf (which has nothing to do
with "literal", by the way, it means "no fill"):

* Use <pre> such that whitespace is preserved.
* Preserve lines breaks.
* For font alternating macros, avoid node recursion which required
scary juggling with the fill state.  Instead, simply print the text
children directly.

Missing feature first noticed by kristaps@@ in 2011,
the again reported by afresh1@@ in 2016,
and finally reported here: https://github.com/Debian/debiman/issues/21 ,
which i only found because of Shane Kerr's comment here:
https://plus.google.com/110314300533310775053/posts/H1eaw9Yskoc
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.40 2017/01/19 16:56:53 schwarze Exp $ */
a80 4
struct tagq {
	struct tag	 *head;
};

d99 1
a99 1
	struct tagq	  tags; /* stack of open tags */
@


1.40
log
@clean up markup of .Bd, .D1, .Dl, .Li, and .Ql;
in particular, stop abuse of <blockquote>
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.39 2017/01/19 01:00:11 schwarze Exp $ */
d130 1
@


1.39
log
@Implement line breaking of the generated HTML code at space characters
in filled text.  This does not affect HTML semantics, but makes the
HTML code even more humanly readable.

While here,
- collapse multiple consecutive space characters in filled text
- and insert a blank between style entries.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.38 2017/01/18 19:22:18 schwarze Exp $ */
a42 1
	TAG_BLOCKQUOTE,
@


1.38
log
@Make HTML output more human readable by overhauling line break logic
around tags and by introducing some simple indentation.
No change of HTML semantics intended.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.37 2017/01/17 15:32:39 schwarze Exp $ */
d98 2
a99 2
#define	HTML_NLDONE	 (1 << 10) /* Just started a new line of HTML. */
	int		  indent; /* current output indentation level */
d101 3
@


1.37
log
@Completely delete the buf field of struct html and all the buf*()
interfaces.  Such a static buffer was a bad idea in the first place,
causing unfixable truncation that was only prevented by triggering
an assertion failure.  Instead, let the small number of remaining
users allocate and free their own, temporary dynamic buffers,
or for the case of .Xr and .In, pass the original data to be
assembled in print_otag().
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.36 2017/01/17 01:47:46 schwarze Exp $ */
d98 3
@


1.36
log
@Simplify the usage of print_otag() by making it accept a variable
number of arguments.

Delete struct htmlpair and all the PAIR_*() macros.
Delete enum htmlattr, handle that in print_otag() instead.

Minus 190 lines of code; no functional change except better ordering
of attributes (class before style) in three cases.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.35 2016/07/19 13:30:16 schwarze Exp $ */
a103 2
	char		  buf[BUFSIZ]; /* see bufcat and friends */
	size_t		  buflen;
a124 13

void		  bufcat_fmt(struct html *, const char *, ...)
			__attribute__((__format__ (printf, 2, 3)));
void		  bufcat(struct html *, const char *);
void		  bufcat_id(struct html *, const char *);
void		  bufcat_style(struct html *,
			const char *, const char *);
void		  bufcat_su(struct html *, const char *,
			const struct roffsu *);
void		  bufinit(struct html *);
void		  buffmt_man(struct html *,
			const char *, const char *);
void		  buffmt_includes(struct html *, const char *);
@


1.35
log
@Use __attribute__((__format__ throughout.
Triggered by a smaller patch from Christos Zoulas.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.34 2015/11/07 13:57:55 schwarze Exp $ */
d4 1
a68 17
enum	htmlattr {
	ATTR_NAME,
	ATTR_REL,
	ATTR_HREF,
	ATTR_TYPE,
	ATTR_MEDIA,
	ATTR_CLASS,
	ATTR_STYLE,
	ATTR_ID,
	ATTR_COLSPAN,
	ATTR_CHARSET,
	ATTR_OPEN,
	ATTR_CLOSE,
	ATTR_MATHVARIANT,
	ATTR_MAX
};

a85 16
struct	htmlpair {
	enum htmlattr	  key;
	const char	 *val;
};

#define	PAIR_INIT(p, t, v) \
	do { \
		(p)->key = (t); \
		(p)->val = (v); \
	} while (/* CONSTCOND */ 0)

#define	PAIR_ID_INIT(p, v)	PAIR_INIT(p, ATTR_ID, v)
#define	PAIR_CLASS_INIT(p, v)	PAIR_INIT(p, ATTR_CLASS, v)
#define	PAIR_HREF_INIT(p, v)	PAIR_INIT(p, ATTR_HREF, v)
#define	PAIR_STYLE_INIT(p, h)	PAIR_INIT(p, ATTR_STYLE, (h)->buf)

d119 1
a119 2
struct tag	 *print_otag(struct html *, enum htmltag,
				int, const struct htmlpair *);
@


1.34
log
@In private header files, __BEGIN_DECLS and __END_DECLS are pointless.
Because these work slightly differently on different systems,
they are becoming a maintenance burden in the portable version,
so delete them.

Besides, one of the chief design goals of the mandoc toolbox is to
make sure that nothing related to documentation requires C++.
Consequently, linking mandoc against any kind of C++ program would
defeat the purpose and is not supported.
I don't understand why kristaps@@ added them in the first place.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.33 2015/10/13 22:57:49 schwarze Exp $ */
d161 2
a162 1
void		  bufcat_fmt(struct html *, const char *, ...);
@


1.33
log
@Major character table cleanup:
* Use ohash(3) rather than a hand-rolled hash table.
* Make the character table static in the chars.c module:
There is no need to pass a pointer around, we most certainly
never want to use two different character tables concurrently.
* No need to keep the characters in a separate file chars.in;
that merely encourages downstream porters to mess with them.
* Sort the characters to agree with the mandoc_chars(7) manual page.
* Specify Unicode codepoints in hex, not decimal (that's the detail
that originally triggered this patch).
No functional change, minus 100 LOC, and i don't see a performance change.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.32 2014/12/02 10:07:17 schwarze Exp $ */
a144 1
__BEGIN_DECLS
a173 2

__END_DECLS
@


1.32
log
@Fix the implementation and documentation of \c (continue text input line).
In particular, make it work in no-fill mode, too.
Reminded by Carsten dot Kunze at arcor dot de (Heirloom roff).
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.31 2014/12/01 08:05:02 schwarze Exp $ */
a132 1
	const struct mchars *symtab; /* character table */
@


1.31
log
@header cleanup:
* add missing forward declarations
* remove needless header inclusions
* some style unification
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.30 2014/11/27 14:31:29 deraadt Exp $ */
d129 1
@


1.30
log
@remove unneccessary inclusion protection; ok schwarze
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.29 2014/10/28 17:35:42 schwarze Exp $ */
a17 2
__BEGIN_DECLS

d144 5
@


1.29
log
@Make the character table available to libroff so it can check the
validity of character escape names and warn about unknown ones.
This requires mchars_spec2cp() to report unknown names again.
Fortunately, that doesn't require changing the calling code because
according to groff, invalid character escapes should not produce
output anyway, and now that we warn about them, that's fine.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.28 2014/10/10 15:25:06 schwarze Exp $ */
a16 2
#ifndef HTML_H
#define HTML_H
a173 2

#endif /*!HTML_H*/
@


1.28
log
@Partial eqn(7) rewrite by kristaps@@ in order to get operator precedence right.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.27 2014/10/09 15:59:08 schwarze Exp $ */
d136 1
a136 1
	struct mchars	 *symtab; /* character-escapes */
@


1.27
log
@parse and render "from" and "to" clauses in eqn, and render matrices;
written by kristaps@@ during EuroBSDCon
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.26 2014/10/09 15:49:09 schwarze Exp $ */
d85 1
@


1.26
log
@initial bits of MathML rendering for eqn(7) -Thtml;
written by kristaps@@ during EuroBSDCon
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.25 2014/10/07 18:17:05 schwarze Exp $ */
d66 3
@


1.25
log
@Switch HTML output to polyglot HTML5; have only one single -Thml mode.
Replace hard-coded widths and alignments with a minimal embedded stylesheet.
Do not use <p> because it cannot appear inside block macros.
Remove the "summary" attribute because it is not HTML5.

Written by kristaps@@ some months ago, finished during EuroBSDCon.
@
text
@d1 1
a1 1
/*	$OpenBSD: html.h,v 1.24 2014/09/17 19:53:35 schwarze Exp $ */
d53 13
d80 2
@


1.24
log
@implement .An -[no]split for -Thtml
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d3 1
a3 1
 * Copyright (c) 2008, 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
a46 1
	TAG_P,
d52 1
a56 2
	ATTR_HTTPEQUIV,
	ATTR_CONTENT,
a63 1
	ATTR_WIDTH,
a64 2
	ATTR_SUMMARY,
	ATTR_ALIGN,
d66 1
a101 6
#define	PAIR_SUMMARY_INIT(p, v)	PAIR_INIT(p, ATTR_SUMMARY, v)

enum	htmltype {
	HTML_HTML_4_01_STRICT,
	HTML_XHTML_1_0_STRICT
};
a125 1
	enum htmltype	  type; /* output media type */
d140 1
@


1.23
log
@Revert previous, as requested by kristaps@@.
The .Bf block can contain subblocks, so it has to render as an
element that can contain flow content.  But <em> cannot contain
flow content, only phrasing content.  Rendering .Em and .Bf differently
would by unfortunate, and closing out .Bf before subblocks and
re-opening it afterwards would merely complicate both the C code
of the program and the generated HTML code.  Besides, converting
.Em to semantic HTML markup would require some content to be put
into <em> and some into <i>, but we cannot automatically distinguish
which is which, so strictly speaking, we can't use semantic HTML
here but have to fall back to physical markup.  Wonders of HTML...
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.22 2014/08/13 15:19:24 schwarze Exp $ */
d122 2
@


1.22
log
@Use <em> for .Em and .Bf -emphasis.

The vast majority of .Em in real-world manuals is stress emphasis,
for which <em> is the correct markup.  Admittedly, there are some
instances of .Em usage for alternate quality, for which <i> would
be a better match.  Most of these are technical terms that neither
allow semantic markup nor are keywords - for the latter, .Sy would
be preferable.  A typical example is that the shell breaks input into
.Em words .
Alternate voice or mood, which would also require <i>, is almost
absent from manuals.
We cannot satisfy both stress emphasis and alternate quality, so
pick the one that fits more often and looks less wrong when off.

Patch from Guy Harris <guy at alum dot mit dot edu>.
ok bentley@@ joerg@@NetBSD
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.21 2014/04/20 16:44:44 schwarze Exp $ */
a52 1
	TAG_EM,
@


1.21
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.20 2013/08/08 20:07:24 schwarze Exp $ */
d53 1
@


1.20
log
@Implement the roff(7) font-escape sequence \f(BI "bold+italic".
This improves the formatting of about 40 base manuals
and reduces groff-mandoc formatting differences in base by about 5%.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.19 2012/05/28 13:00:51 schwarze Exp $ */
d108 1
a108 1
enum	htmltype { 
d130 1
a130 1
	size_t		  buflen; 
d141 1
a141 1
struct tag	 *print_otag(struct html *, enum htmltag, 
d153 1
a153 1
void		  bufcat_style(struct html *, 
d155 1
a155 1
void		  bufcat_su(struct html *, const char *, 
d158 1
a158 1
void		  buffmt_man(struct html *, 
@


1.19
log
@Implement the roff \z escape sequence, intended to output the next
character without advancing the cursor position; implement it to
simply skip the next character, as it will usually be overwritten.

With this change, the pod2man(1) preamble user-defined string \*:,
intended to render as a diaeresis or umlaut diacritic above the
preceding character, is rendered in a slightly less ugly way,
though still not correctly.  It was rendered as "z.." and is now
rendered as ".".

Given that the definition of \*: uses elaborate manual \h positioning,
there is little chance for mandoc(1) to ever render it correctly,
but at least we can refrain from printing out a spurious "z", and
we can make the \z do something semi-reasonable for easier cases.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.18 2011/10/09 17:59:56 schwarze Exp $ */
d78 1
@


1.18
log
@Sync to version 1.12.0; all code by kristaps@@:
Implement .Rv in -Tman.
Let -man -Tman work a bit like cat(1).
Add the -Ofragment option to -T[x]html.
Minor fixes in -T[x]html.
Lots of apropos(1) and -Tman code cleanup.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.17 2011/09/18 10:25:28 schwarze Exp $ */
d120 1
@


1.17
log
@sync to version 1.11.5:
adding an implementation of the eqn(7) language
by kristaps@@

So far, only .EQ/.EN blocks are handled, in-line equations are not, and
rendering is not yet very pretty, but the parser is fairly complete.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.16 2011/05/29 21:22:18 schwarze Exp $ */
d107 1
a107 1
enum	htmltype {
d128 1
a128 1
	size_t		  buflen;
d132 3
a134 1
	enum htmltype	  type;
@


1.16
log
@Merge release 1.11.3, almost all code by kristaps@@:
* Unicode output support (no Unicode input yet, though).
* Refactoring: completely handle predefined strings in roff.c.
- New function mandoc_escape() replaces a2roffdeco() and mandoc_special().
- Start using mandoc_getarg() in mdoc_argv.c.
- Clean up parsing of delimiters in mdoc(7).
* And many minor fixes and lots of cleanup.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.15 2011/01/31 03:04:26 schwarze Exp $ */
d144 1
@


1.15
log
@When in a <PRE>, don't print out the <BR> before lines that have
leading whitespace; from kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.14 2011/01/16 19:41:16 schwarze Exp $ */
d123 1
a123 1
	void		 *symtab; /* character-escapes */
d145 5
d152 1
a155 6
void		  buffmt(struct html *, const char *, ...);
void		  bufcat(struct html *, const char *);
void		  bufcat_style(struct html *, 
			const char *, const char *);
void		  bufncat(struct html *, const char *, size_t);
void		  bufinit(struct html *);
d157 1
a157 1
void		  html_idcat(char *, const char *, int);
@


1.14
log
@Merge from bsd.lv, original commit message by kristaps@@:
Change how -Thtml behaves with tables: use multiple rows, with widths
set by COL, until an external macro is encountered.  At this point in
time, close out the table and process the macro.  When the first table
row is again re-encountered, re-start the table.  This requires a bit of
tracking added to "struct html", but the change is very small and
follows the logic of meta-fonts.  This all follows a bug-report by
joerg@@.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.13 2011/01/09 14:30:48 schwarze Exp $ */
d114 1
a114 1
#define	HTML_NOSPACE	 (1 << 0)
d118 2
a119 1
#define	HTML_NONOSPACE	 (1 << 4)
@


1.13
log
@Sync tbl handling to bsd.lv release 1.10.9:
* .T} can be followed by a delimiter, then more data.
* Do not limit table column widths (improves terminfo(5)).
* Let numerical cells respect explicitly specified minimum cell widths.
* Let terminal output survive missing data cells.
* Parse and ignore arguments in parentheses on layout cell specifications.
* Move tbl_calc() into out.c such that it can be used by all frontends.
* Give tables an HTML class.
* Some cleanup in tbl -Thtml code.
All code by kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.12 2011/01/04 22:28:17 schwarze Exp $ */
d70 1
d121 1
d141 1
@


1.12
log
@Merge kristaps@@' cleaner tbl integration, removing mine;
there are still a few bugs, but fixing these will be easier in tree.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.11 2010/12/25 13:23:03 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
d118 7
a124 7
	struct tagq	  tags;
	void		 *symtab;
	char		 *base;
	char		 *base_man;
	char		 *base_includes;
	char		 *style;
	char		  buf[BUFSIZ];
a130 2

struct	roffsu;
@


1.11
log
@Yet another batch of -Thtml polishing from kristaps@@:
In particular, use <SMALL> for .SM and <CODE> for .Dl.
Use <B> for bold and <I> for italic in general.
Also call this mandoc 1.10.8 now, as it is functionally equivalent,
even though one one set of refactoring patches has not been merged
yet because it conflicts with our tbl(1) handling.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.10 2010/12/22 00:33:25 schwarze Exp $ */
d141 1
@


1.10
log
@More small -Thtml improvements by kristaps@@,
in particular, use <B>, <I> and <U> where appropriate.
Provide relative widths for header and footer lines.
Manuals: More concise short descriptions of output modes.
Correct a few places still talking about CSS2 to say CSS1.
Code examples should use .Dl, not .D1.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.9 2010/12/19 09:22:35 schwarze Exp $ */
d51 2
a52 1
	TAG_U,
d126 3
a128 3
	struct tag	 *metaf;
	enum htmlfont	  metal;
	enum htmlfont	  metac;
a135 1
struct tag	 *print_ofont(struct html *, enum htmlfont);
@


1.9
log
@Significant improvements to -Thtml by kristaps@@:
Use less <DIV>, use more <H1>, <H2>, <P>, <BR>, <PRE>, <UL>, <OL>, <DL> etc.
Triggered by input from Will Backman.
Remove CSS2 note in mandoc.1, which is no longer true.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.8 2010/07/25 18:05:54 schwarze Exp $ */
d49 3
a65 2
	ATTR_VALIGN,
	ATTR_TARGET,
d68 1
@


1.8
log
@Sync to bsd.lv; in particular, pull in lots of bug fixes.
new features:
* support the .in macro in man(7)
* support minimal PDF output
* support .Sm in mdoc(7) HTML output
* support .Vb and .nf in man(7) HTML output
* complete the mdoc(7) manual
bug fixes:
* do not let mdoc(7) .Pp produce a newline before/after .Sh; reported by jmc@@
* avoid double blank lines related to man(7) .sp and .br
* let man(7) .nf and .fi flush the line; reported by jsg@@ and naddy@@
* let "\ " produce a non-breaking space; reported by deraadt@@
* discard \m colour escape sequences; reported by J.C. Roberts
* map undefined 1-character-escapes to the literal character itself
maintenance:
* express mdoc(7) arguments in terms of an enum for additional type-safety
* simplify mandoc_special() and a2roffdeco()
* use strcspn in term_word() in place of a manual loop
* minor optimisations in the -Tps and -Thtml formatting frontends
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.7 2010/07/13 01:09:12 schwarze Exp $ */
d36 1
d43 6
a81 6
struct	ord {
	struct ord	 *next;
	const void	 *cookie;
	int		  pos;
};

a84 3
struct ordq {
	struct ord	 *head;
};
a115 1
	struct ordq	  ords;
@


1.7
log
@Merge release 1.10.4 (all code by kristaps@@), providing four new features:
1) Proper .Bk support: allow output line breaks at input line breaks,
but keep input lines together in the output, finally fixing
synopses like aucat(1), mail(1) and tmux(1).
2) Mostly finished -Tps (PostScript) output.
3) Implement -Thtml output for .Nm blocks and .Bk -words.
4) Allow iterative interpolation of user-defined roff(7) strings.
Also contains some minor bugfixes and some performance improvements.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.6 2010/04/07 23:15:05 schwarze Exp $ */
d116 1
@


1.6
log
@Merge the good parts of 1.9.23,
avoid the bad parts of 1.9.23, and keep local patches.

Input in general:
 * Basic handling of roff-style font escapes \f, \F.
 * Quoted punctuation does not count as punctuation.

mdoc(7) parser:
 * Make .Pf callable; noted by Claus Assmann.
 * Let .Bd and .Bl ignore unknown arguments; noted by deraadt@@.
 * Do not warn when .Er is used outside certain sections.
 * Replace mdoc_node_free[list] by mdoc_node_delete.
 * Replace #define by enum for rew*() return values.

man(7) parser:
 * When .TH is missing, use default section and date.

Output in general:
 * Curly braces do not count as punctuation.
 * No space after .Fl w/o args when a macro follows on the same line.

HTML output:
 * Unify PAIR_*_INIT macros, introduce new PAIR_ID_INIT().
 * Print whitespace after, not before .Vt .Fn .Ft .Fo.

Checked that all manuals in base still build.
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.5 2010/02/18 02:11:26 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@kth.se>
d113 3
a115 1
#define	HTML_IGNDELIM	 (1 << 2)
@


1.5
log
@sync to release 1.9.15:
 * corrected .Vt handling (spotted by Joerg Sonnenberger)
 * corrected .Xr argument handling (based on my patch)
 * removed \\ escape sequence (because it is for low-level roff only)
 * warn about trailing whitespace (suggested by jmc@@)
 * -Txhtml support
 * and some general cleanup and doc improvements
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.4 2009/12/24 02:08:14 schwarze Exp $ */
d93 11
a103 12
#define	PAIR_CLASS_INIT(p, v) \
	do { (p)->key = ATTR_CLASS; \
	(p)->val = (v); } while (/* CONSTCOND */ 0)
#define	PAIR_HREF_INIT(p, v) \
	do { (p)->key = ATTR_HREF; \
	(p)->val = (v); } while (/* CONSTCOND */ 0)
#define	PAIR_STYLE_INIT(p, h) \
	do { (p)->key = ATTR_STYLE; \
	(p)->val = (h)->buf; } while (/* CONSTCOND */ 0)
#define	PAIR_SUMMARY_INIT(p, v) \
	do { (p)->key = ATTR_SUMMARY; \
	(p)->val = (v); } while (/* CONSTCOND */ 0)
@


1.4
log
@sync to 1.9.14: rewrite escape sequence handling:
- new function a2roffdeco
- font modes (\f) only affect the current stack point
- implement scaling (\s)
- implement space suppression (\c)
- implement non-breaking space (\~) in -Tascii
- many manual improvements
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.3 2009/12/22 23:58:00 schwarze Exp $ */
a30 1
	TAG_P,
a41 1
	TAG_BASE,
d106 5
d127 1
d132 1
a132 1
void		  print_gen_doctype(struct html *);
@


1.3
log
@sync to 1.9.12, mostly portability and refactoring:

correctness/functionality:
- bugfix: do not die when overstep hits the right margin
- new option: -fign-escape
- and various HTML features

portability:
- replace bzero(3) by memset(3), which is ANSI C
- replace err(3)/warn(3) by perror(3)/exit(3), which is ANSI C
- iuse argv[0] instead of __progname
- add time.h to various files for FreeBSD compilation

simplicity:
- do not allocate header/footer data dynamically in *_term.c
- provide and use malloc frontends that error out on failure

for full changelogs, see http://bsd.lv/cgi-bin/cvsweb.cgi/
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.2 2009/10/27 21:40:07 schwarze Exp $ */
d65 7
a110 1
#define	HTML_NEWLINE	 (1 << 1)
d121 3
d130 1
@


1.2
log
@sync to 1.9.11: adapt printing of dates to groff conventions,
NetBSD portability fixes and some minor bugfixes and feature enhancements;
also checked that my hyphenation code still works on top of this
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.1 2009/10/21 19:13:50 schwarze Exp $ */
d61 1
d97 3
d138 2
@


1.1
log
@sync to 1.9.9, featuring:
 * -Thtml output mode
 * roff scaling units
 * and some minor fixes
for full changelogs, see http://bsd.lv/cgi-bin/cvsweb.cgi/
@
text
@d1 1
a1 1
/*	$Id: html.h,v 1.13 2009/10/13 10:21:24 kristaps Exp $ */
d65 1
a66 1
	SLIST_ENTRY(tag)  entry;
d70 2
a72 2
	const void	 *cookie;
	SLIST_ENTRY(ord)  entry;
d75 6
a80 2
SLIST_HEAD(tagq, tag);
SLIST_HEAD(ordq, ord);
@

