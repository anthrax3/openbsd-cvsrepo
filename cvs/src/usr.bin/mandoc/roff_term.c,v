head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2017.05.08.15.33.43;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	wam7mxa5wtd9m7Af;

1.5
date	2017.05.07.17.30.58;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	pfMPALNhm77dpGFF;

1.4
date	2017.05.05.15.16.26;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	sNJdFUhzoVfGBx2p;

1.3
date	2017.05.05.13.17.04;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	GvSRKa33jIoa4JAJ;

1.2
date	2017.05.05.02.06.17;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	JMX1RJlA2uFuu13l;

1.1
date	2017.05.04.22.07.44;	author schwarze;	state Exp;
branches;
next	;
commitid	hU9bJPcS66QLg54n;


desc
@@


1.6
log
@Basic implementation of the roff(7) .ti (temporary indent) request.
Needed by about four dozen ports (thanks to naddy@@ for the research).
@
text
@/*	$OpenBSD: roff_term.c,v 1.5 2017/05/07 17:30:58 schwarze Exp $ */
/*
 * Copyright (c) 2010, 2014, 2015, 2017 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/types.h>

#include <assert.h>
#include <stddef.h>

#include "roff.h"
#include "out.h"
#include "term.h"

#define	ROFF_TERM_ARGS struct termp *p, const struct roff_node *n

typedef	void	(*roff_term_pre_fp)(ROFF_TERM_ARGS);

static	void	  roff_term_pre_br(ROFF_TERM_ARGS);
static	void	  roff_term_pre_ft(ROFF_TERM_ARGS);
static	void	  roff_term_pre_ll(ROFF_TERM_ARGS);
static	void	  roff_term_pre_sp(ROFF_TERM_ARGS);
static	void	  roff_term_pre_ta(ROFF_TERM_ARGS);
static	void	  roff_term_pre_ti(ROFF_TERM_ARGS);

static	const roff_term_pre_fp roff_term_pre_acts[ROFF_MAX] = {
	roff_term_pre_br,  /* br */
	roff_term_pre_ft,  /* ft */
	roff_term_pre_ll,  /* ft */
	roff_term_pre_sp,  /* sp */
	roff_term_pre_ta,  /* ta */
	roff_term_pre_ti,  /* ti */
};


void
roff_term_pre(struct termp *p, const struct roff_node *n)
{
	assert(n->tok < ROFF_MAX);
	(*roff_term_pre_acts[n->tok])(p, n);
}

static void
roff_term_pre_br(ROFF_TERM_ARGS)
{
	term_newln(p);
	if (p->flags & TERMP_BRIND) {
		p->offset = p->rmargin;
		p->rmargin = p->maxrmargin;
		p->flags &= ~(TERMP_NOBREAK | TERMP_BRIND);
	}
}

static void
roff_term_pre_ft(ROFF_TERM_ARGS)
{
	switch (*n->child->string) {
	case '4':
	case '3':
	case 'B':
		term_fontrepl(p, TERMFONT_BOLD);
		break;
	case '2':
	case 'I':
		term_fontrepl(p, TERMFONT_UNDER);
		break;
	case 'P':
		term_fontlast(p);
		break;
	case '1':
	case 'C':
	case 'R':
		term_fontrepl(p, TERMFONT_NONE);
		break;
	default:
		break;
	}
}

static void
roff_term_pre_ll(ROFF_TERM_ARGS)
{
	term_setwidth(p, n->child != NULL ? n->child->string : NULL);
}

static void
roff_term_pre_sp(ROFF_TERM_ARGS)
{
	struct roffsu	 su;
	int		 len;

	if (n->child != NULL) {
		if (a2roffsu(n->child->string, &su, SCALE_VS) == 0)
			su.scale = 1.0;
		len = term_vspan(p, &su);
	} else
		len = 1;

	if (len < 0)
		p->skipvsp -= len;
	else
		while (len--)
			term_vspace(p);

	roff_term_pre_br(p, n);
}

static void
roff_term_pre_ta(ROFF_TERM_ARGS)
{
	term_tab_set(p, NULL);
	for (n = n->child; n != NULL; n = n->next)
		term_tab_set(p, n->string);
}

static void
roff_term_pre_ti(ROFF_TERM_ARGS)
{
	struct roffsu	 su;
	const char	*cp;
	int		 len, sign;

	roff_term_pre_br(p, n);

	if (n->child == NULL)
		return;
	cp = n->child->string;
	if (*cp == '+') {
		sign = 1;
		cp++;
	} else if (*cp == '-') {
		sign = -1;
		cp++;
	} else
		sign = 0;

	if (a2roffsu(cp, &su, SCALE_EM) == 0)
		return;
	len = term_hspan(p, &su) / 24;

	if (sign == 0) {
		p->ti = len - p->offset;
		p->offset = len;
	} else if (sign == 1) {
		p->ti = len;
		p->offset += len;
	} else if ((size_t)len < p->offset) {
		p->ti = -len;
		p->offset -= len;
	} else {
		p->ti = -p->offset;
		p->offset = 0;
	}
}
@


1.5
log
@Basic implementation of the roff(7) .ta (define tab stops) request.
This is the first feature made possible by the parser reorganization.
Improves the formatting of the SYNOPSIS in many Xenocara GL manuals.
Also important for ports, as reported by many, including naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff_term.c,v 1.4 2017/05/05 15:16:26 schwarze Exp $ */
d35 1
d43 1
d125 40
@


1.4
log
@Move .sp to the roff modules.  Enough infrastructure is in place
now that this actually saves code: -70 LOC.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff_term.c,v 1.3 2017/05/05 13:17:04 schwarze Exp $ */
d34 1
d40 2
a41 1
	roff_term_pre_sp,  /* br */
d115 8
@


1.3
log
@move .ll to the roff modules
@
text
@d1 1
a1 1
/*	$OpenBSD: roff_term.c,v 1.2 2017/05/05 02:06:17 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2010, 2014, 2017 Ingo Schwarze <schwarze@@openbsd.org>
d33 1
d39 1
d91 22
@


1.2
log
@Move handling of the roff(7) .ft request from the man(7)
modules to the new roff(7) modules.  As a side effect,
mdoc(7) now handles .ft, too.  Of course, do not use that.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff_term.c,v 1.1 2017/05/04 22:07:44 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2010, 2017 Ingo Schwarze <schwarze@@openbsd.org>
d20 1
d32 1
d37 1
d83 6
@


1.1
log
@Start roff formatter modules for HTML and termininal output,
used by both the mdoc and man formatters, with the ultimate
goal of reducing code duplication between the two macro formatters.
Made possible by the parser unification.
Add the first formatting function (for the .br request).
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d3 1
a3 1
 * Copyright (c) 2017 Ingo Schwarze <schwarze@@openbsd.org>
d30 1
d34 1
d53 26
@

