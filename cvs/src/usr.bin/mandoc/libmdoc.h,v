head	1.83;
access;
symbols
	OPENBSD_6_1:1.80.0.4
	OPENBSD_6_1_BASE:1.80
	OPENBSD_6_0:1.79.0.4
	OPENBSD_6_0_BASE:1.79
	OPENBSD_5_9:1.79.0.2
	OPENBSD_5_9_BASE:1.79
	OPENBSD_5_8:1.76.0.4
	OPENBSD_5_8_BASE:1.76
	OPENBSD_5_7:1.68.0.2
	OPENBSD_5_7_BASE:1.68
	OPENBSD_5_6:1.56.0.4
	OPENBSD_5_6_BASE:1.56
	OPENBSD_5_5:1.53.0.4
	OPENBSD_5_5_BASE:1.53
	OPENBSD_5_4:1.51.0.4
	OPENBSD_5_4_BASE:1.51
	OPENBSD_5_3:1.51.0.2
	OPENBSD_5_3_BASE:1.51
	OPENBSD_5_2:1.50.0.2
	OPENBSD_5_2_BASE:1.50
	OPENBSD_5_1_BASE:1.48
	OPENBSD_5_1:1.48.0.2
	OPENBSD_5_0:1.46.0.2
	OPENBSD_5_0_BASE:1.46
	OPENBSD_4_9:1.43.0.2
	OPENBSD_4_9_BASE:1.43
	OPENBSD_4_8:1.41.0.2
	OPENBSD_4_8_BASE:1.41
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7;
locks; strict;
comment	@ * @;


1.83
date	2017.05.30.16.21.07;	author schwarze;	state Exp;
branches;
next	1.82;
commitid	Zn7xAcrTZ4bBHMvf;

1.82
date	2017.04.29.12.43.55;	author schwarze;	state Exp;
branches;
next	1.81;
commitid	7BLUwozNEzUO8xfK;

1.81
date	2017.04.24.23.06.09;	author schwarze;	state Exp;
branches;
next	1.80;
commitid	2CfzvK3gmiJH7vY0;

1.80
date	2017.02.16.02.59.42;	author schwarze;	state Exp;
branches;
next	1.79;
commitid	Qmey25xun8rVuoB9;

1.79
date	2015.11.07.13.57.55;	author schwarze;	state Exp;
branches;
next	1.78;
commitid	UKwSq7JMt0q6KNpK;

1.78
date	2015.10.20.02.00.49;	author schwarze;	state Exp;
branches;
next	1.77;
commitid	v6RrmxwM663z4mTF;

1.77
date	2015.10.17.00.19.58;	author schwarze;	state Exp;
branches;
next	1.76;
commitid	67CJSTzbNGkiWCoU;

1.76
date	2015.04.23.15.35.39;	author schwarze;	state Exp;
branches;
next	1.75;
commitid	am2zU0fu81iRKMOO;

1.75
date	2015.04.19.14.25.05;	author schwarze;	state Exp;
branches;
next	1.74;
commitid	E1gJfKuheBoo64Vb;

1.74
date	2015.04.19.13.50.10;	author schwarze;	state Exp;
branches;
next	1.73;
commitid	QSaLMe5iBgPB4hUe;

1.73
date	2015.04.18.17.28.08;	author schwarze;	state Exp;
branches;
next	1.72;
commitid	zD52rmYwzwgofy8v;

1.72
date	2015.04.18.17.01.28;	author schwarze;	state Exp;
branches;
next	1.71;
commitid	GslLZJxifCkaUipL;

1.71
date	2015.04.18.16.04.40;	author schwarze;	state Exp;
branches;
next	1.70;
commitid	6MYJ7cd8mhJ77AGH;

1.70
date	2015.04.02.23.47.43;	author schwarze;	state Exp;
branches;
next	1.69;
commitid	RJFkOLiS9gBqEEDl;

1.69
date	2015.04.02.22.06.17;	author schwarze;	state Exp;
branches;
next	1.68;
commitid	Rfx1oTaH3hZ7Zcyf;

1.68
date	2015.02.02.04.26.03;	author schwarze;	state Exp;
branches;
next	1.67;
commitid	aVQDMaIveEZUjjaV;

1.67
date	2014.11.29.03.37.28;	author schwarze;	state Exp;
branches;
next	1.66;
commitid	aqtIRSBVUjLd0Mqm;

1.66
date	2014.11.28.23.20.55;	author schwarze;	state Exp;
branches;
next	1.65;
commitid	t9mCLXjRHJDgC7uT;

1.65
date	2014.11.28.18.35.37;	author schwarze;	state Exp;
branches;
next	1.64;
commitid	C7yrJvu6v6cTTSgM;

1.64
date	2014.11.28.17.23.34;	author schwarze;	state Exp;
branches;
next	1.63;
commitid	KPB6oZLXpckMtSIh;

1.63
date	2014.11.28.04.46.30;	author schwarze;	state Exp;
branches;
next	1.62;
commitid	epKhps1CyqFfkqD1;

1.62
date	2014.11.28.03.13.58;	author schwarze;	state Exp;
branches;
next	1.61;
commitid	ImMvSGeZONzvc96J;

1.61
date	2014.11.28.01.05.40;	author schwarze;	state Exp;
branches;
next	1.60;
commitid	AyxWGi7Dr0LL0dRV;

1.60
date	2014.11.27.14.31.29;	author deraadt;	state Exp;
branches;
next	1.59;
commitid	je75OeVgCvwQD2St;

1.59
date	2014.11.17.06.44.35;	author schwarze;	state Exp;
branches;
next	1.58;
commitid	eO1CUhWjZNit4m47;

1.58
date	2014.08.08.15.57.05;	author schwarze;	state Exp;
branches;
next	1.57;
commitid	kusPy8TfXLTHQJo8;

1.57
date	2014.08.08.15.32.17;	author schwarze;	state Exp;
branches;
next	1.56;
commitid	MxwVmw5souguneqK;

1.56
date	2014.07.09.11.30.07;	author schwarze;	state Exp;
branches;
next	1.55;
commitid	WErJgzRtDKBz19TC;

1.55
date	2014.07.02.03.47.07;	author schwarze;	state Exp;
branches;
next	1.54;
commitid	p4pNII1v0bYCswy0;

1.54
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.53;

1.53
date	2014.01.05.20.26.27;	author schwarze;	state Exp;
branches;
next	1.52;

1.52
date	2013.10.21.23.32.32;	author schwarze;	state Exp;
branches;
next	1.51;

1.51
date	2012.11.17.00.25.20;	author schwarze;	state Exp;
branches;
next	1.50;

1.50
date	2012.07.18.11.09.30;	author schwarze;	state Exp;
branches;
next	1.49;

1.49
date	2012.05.24.23.33.23;	author schwarze;	state Exp;
branches;
next	1.48;

1.48
date	2011.12.02.01.45.43;	author schwarze;	state Exp;
branches;
next	1.47;

1.47
date	2011.09.18.10.25.28;	author schwarze;	state Exp;
branches;
next	1.46;

1.46
date	2011.05.29.21.22.18;	author schwarze;	state Exp;
branches;
next	1.45;

1.45
date	2011.04.24.16.22.02;	author schwarze;	state Exp;
branches;
next	1.44;

1.44
date	2011.04.21.22.59.54;	author schwarze;	state Exp;
branches;
next	1.43;

1.43
date	2010.12.01.22.02.29;	author schwarze;	state Exp;
branches;
next	1.42;

1.42
date	2010.08.20.00.53.35;	author schwarze;	state Exp;
branches;
next	1.41;

1.41
date	2010.07.13.01.09.12;	author schwarze;	state Exp;
branches;
next	1.40;

1.40
date	2010.07.01.22.31.52;	author schwarze;	state Exp;
branches;
next	1.39;

1.39
date	2010.06.29.17.10.29;	author schwarze;	state Exp;
branches;
next	1.38;

1.38
date	2010.06.27.21.54.41;	author schwarze;	state Exp;
branches;
next	1.37;

1.37
date	2010.06.06.20.30.08;	author schwarze;	state Exp;
branches;
next	1.36;

1.36
date	2010.05.24.00.00.10;	author schwarze;	state Exp;
branches;
next	1.35;

1.35
date	2010.05.23.22.45.00;	author schwarze;	state Exp;
branches;
next	1.34;

1.34
date	2010.05.15.18.25.50;	author schwarze;	state Exp;
branches;
next	1.33;

1.33
date	2010.05.15.16.48.12;	author schwarze;	state Exp;
branches;
next	1.32;

1.32
date	2010.05.15.13.12.55;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2010.05.15.12.30.59;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2010.05.14.14.47.44;	author schwarze;	state Exp;
branches;
next	1.29;

1.29
date	2010.05.14.01.54.37;	author schwarze;	state Exp;
branches;
next	1.28;

1.28
date	2010.05.08.01.52.07;	author schwarze;	state Exp;
branches;
next	1.27;

1.27
date	2010.04.07.23.15.05;	author schwarze;	state Exp;
branches;
next	1.26;

1.26
date	2010.04.03.16.30.42;	author schwarze;	state Exp;
branches;
next	1.25;

1.25
date	2010.04.02.12.39.47;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2009.12.22.23.58.00;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2009.10.21.19.13.50;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.19.16.27.52;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2009.09.21.21.11.37;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2009.08.22.22.39.55;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2009.08.22.21.55.06;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2009.08.22.19.43.33;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2009.07.26.22.48.41;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2009.07.26.02.17.29;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2009.07.18.19.44.38;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2009.07.13.00.33.40;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2009.07.12.22.35.08;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.12.21.45.44;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2009.07.12.21.08.29;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2009.07.12.20.30.27;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.12.19.05.52;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.12.18.35.57;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.19.07.20.19;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.18.22.16.56;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.15.18.41.13;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.15.02.19.32;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.14.23.00.57;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.15.20.10.20;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.20.30.40;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.83
log
@Macro argument quoting does not prevent recognition of punctuation
and of called macros.

This bug affects almost all macros, and fixing it simplifies the
code.  It is amazing that the bogus ARGS_QWORD feature got implemented
in the first place, and then carrier along for more than eight years
without anybody ever noticing that it was pointless.

Reported by Leah Neukirchen <leah at vuxu dot org>, found on Void Linux.
@
text
@/*	$OpenBSD: libmdoc.h,v 1.82 2017/04/29 12:43:55 schwarze Exp $ */
/*
 * Copyright (c) 2008, 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2013, 2014, 2015, 2017 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define	MACRO_PROT_ARGS	struct roff_man *mdoc, \
			enum roff_tok tok, \
			int line, \
			int ppos, \
			int *pos, \
			char *buf

struct	mdoc_macro {
	void		(*fp)(MACRO_PROT_ARGS);
	int		  flags;
#define	MDOC_CALLABLE	 (1 << 0)
#define	MDOC_PARSED	 (1 << 1)
#define	MDOC_EXPLICIT	 (1 << 2)
#define	MDOC_PROLOGUE	 (1 << 3)
#define	MDOC_IGNDELIM	 (1 << 4)
#define	MDOC_JOIN	 (1 << 5)
};

enum	margserr {
	ARGS_ERROR,
	ARGS_EOLN, /* end-of-line */
	ARGS_WORD, /* normal word */
	ARGS_PUNCT, /* series of punctuation */
	ARGS_PHRASE /* Bl -column phrase */
};

/*
 * A punctuation delimiter is opening, closing, or "middle mark"
 * punctuation.  These govern spacing.
 * Opening punctuation (e.g., the opening parenthesis) suppresses the
 * following space; closing punctuation (e.g., the closing parenthesis)
 * suppresses the leading space; middle punctuation (e.g., the vertical
 * bar) can do either.  The middle punctuation delimiter bends the rules
 * depending on usage.
 */
enum	mdelim {
	DELIM_NONE = 0,
	DELIM_OPEN,
	DELIM_MIDDLE,
	DELIM_CLOSE,
	DELIM_MAX
};

extern	const struct mdoc_macro *const mdoc_macros;


void		  mdoc_macro(MACRO_PROT_ARGS);
void		  mdoc_elem_alloc(struct roff_man *, int, int,
			enum roff_tok, struct mdoc_arg *);
struct roff_node *mdoc_block_alloc(struct roff_man *, int, int,
			enum roff_tok, struct mdoc_arg *);
void		  mdoc_tail_alloc(struct roff_man *, int, int,
			enum roff_tok);
struct roff_node *mdoc_endbody_alloc(struct roff_man *, int, int,
			enum roff_tok, struct roff_node *);
void		  mdoc_node_relink(struct roff_man *, struct roff_node *);
void		  mdoc_node_validate(struct roff_man *);
void		  mdoc_state(struct roff_man *, struct roff_node *);
void		  mdoc_state_reset(struct roff_man *);
const char	 *mdoc_a2arch(const char *);
const char	 *mdoc_a2att(const char *);
enum roff_sec	  mdoc_a2sec(const char *);
const char	 *mdoc_a2st(const char *);
void		  mdoc_argv(struct roff_man *, int, enum roff_tok,
			struct mdoc_arg **, int *, char *);
enum margserr	  mdoc_args(struct roff_man *, int,
			int *, char *, enum roff_tok, char **);
enum mdelim	  mdoc_isdelim(const char *);
@


1.82
log
@Parser unification: use nice ohashes for all three request and macro tables;
no functional change, minus two source files, minus 200 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.81 2017/04/24 23:06:09 schwarze Exp $ */
a41 1
	ARGS_QWORD, /* quoted word */
@


1.81
log
@Continue parser unification:
* Make enum rofft an internal interface as enum roff_tok in "roff.h".
* Represent mdoc and man macros in enum roff_tok.
* Make TOKEN_NONE a proper enum value and use it throughout.
* Put the prologue macros first in the macro tables.
* Unify mdoc_macroname[] and man_macroname[] into roff_name[].
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.80 2017/02/16 02:59:42 schwarze Exp $ */
a78 1
enum roff_tok	  mdoc_hash_find(const char *);
@


1.80
log
@Remove the ENDBODY_NOSPACE flag, simplifying the code.

Comparing to groff output, it appears that all cases where it was used
and made a difference actually require the opposite, ENDBODY_SPACE.

I have no idea why i added it back in 2010; maybe to compensate for
some other bug that has long been fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.79 2015/11/07 13:57:55 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2013, 2014, 2015 Ingo Schwarze <schwarze@@openbsd.org>
d20 1
a20 1
			int tok, \
d68 1
a68 1
			int, struct mdoc_arg *);
d70 5
a74 4
			int, struct mdoc_arg *);
void		  mdoc_tail_alloc(struct roff_man *, int, int, int);
struct roff_node *mdoc_endbody_alloc(struct roff_man *, int, int, int,
			struct roff_node *);
d79 1
a79 1
int		  mdoc_hash_find(const char *);
d84 1
a84 1
void		  mdoc_argv(struct roff_man *, int, int,
d87 1
a87 1
			int *, char *, int, char **);
@


1.79
log
@In private header files, __BEGIN_DECLS and __END_DECLS are pointless.
Because these work slightly differently on different systems,
they are becoming a maintenance burden in the portable version,
so delete them.

Besides, one of the chief design goals of the mandoc toolbox is to
make sure that nothing related to documentation requires C++.
Consequently, linking mandoc against any kind of C++ program would
defeat the purpose and is not supported.
I don't understand why kristaps@@ added them in the first place.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.78 2015/10/20 02:00:49 schwarze Exp $ */
d73 1
a73 1
			struct roff_node *, enum mdoc_endbody);
@


1.78
log
@In order to become able to generate syntax tree nodes on the roff(7)
level, validation must be separated from parsing and rewinding.
This first big step moves calling of the mdoc(7) post_*() functions
out of the parser loop into their own mdoc_validate() pass, while
using a new mdoc_state() module to make syntax tree state handling
available to both the parser loop and the validation pass.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.77 2015/10/17 00:19:58 schwarze Exp $ */
a64 1
__BEGIN_DECLS
a87 2

__END_DECLS
@


1.77
log
@Very tricky diff to fix macro interpretation and spacing around tabs
in .Bl -column; it took me more than a day to get this right.
Triggered by a loosely related bug report from tim@@.

The lesson for you is:  Use .Ta macros in .Bl -column, avoid tabs,
or you are in for surprises:  The last word before a tab is not
interpreted as a macro (unless there is a blank in between), the
first word after a tab isn't either (unless there is a blank in
between), and a blank after a tab causes a leading blank in the
respective output cell.  Yes, "blank", "tab", "blank tab" and "tab
blank" all have different semantics; if you write code relying on
that, good luck maintaining it afterwards...
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.76 2015/04/23 15:35:39 schwarze Exp $ */
d76 3
d80 1
d82 1
a83 1
const char	 *mdoc_a2arch(const char *);
@


1.76
log
@Get rid of two empty wrapper functions.  No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.75 2015/04/19 14:25:05 schwarze Exp $ */
d43 1
a43 3
	ARGS_PHRASE, /* Ta'd phrase (-column) */
	ARGS_PPHRASE, /* tabbed phrase (-column) */
	ARGS_PEND /* last phrase (-column) */
@


1.75
log
@Unify some node handling functions that use TOKEN_NONE.
* mdoc_word_alloc(), man_word_alloc() -> roff_word_alloc()
* mdoc_word_append(), man_word_append() -> roff_word_append()
* mdoc_addspan(), man_addspan() -> roff_addtbl()
* mdoc_addeqn(), man_addeqn() -> roff_addeqn()
Minus 50 lines of code, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.74 2015/04/19 13:50:10 schwarze Exp $ */
a85 1
void		  mdoc_macroend(struct roff_man *);
@


1.74
log
@Unify node handling functions:
* node_alloc() for mdoc and man_node_alloc() -> roff_node_alloc()
* node_append() for mdoc and man_node_append() -> roff_node_append()
* mdoc_head_alloc() and man_head_alloc() -> roff_head_alloc()
* mdoc_body_alloc() and man_body_alloc() -> roff_body_alloc()
* mdoc_node_unlink() and man_node_unlink() -> roff_node_unlink()
* mdoc_node_free() and man_node_free() -> roff_node_free()
* mdoc_node_delete() and man_node_delete() -> roff_node_delete()
Minus 130 lines of code, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.73 2015/04/18 17:28:08 schwarze Exp $ */
a69 2
void		  mdoc_word_alloc(struct roff_man *, int, int, const char *);
void		  mdoc_word_append(struct roff_man *, const char *);
a81 2
void		  mdoc_valid_pre(struct roff_man *, struct roff_node *);
void		  mdoc_valid_post(struct roff_man *);
a83 1
void		  mdoc_argv_free(struct mdoc_arg *);
@


1.73
log
@Unify {mdoc,man}_{alloc,reset,free}() into roff_man_{alloc,reset,free}().
Minus 80 lines of code, no functional change.
Written on the train from Koeln to Wolfsburg returning from p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.72 2015/04/18 17:01:28 schwarze Exp $ */
a75 1
struct roff_node *mdoc_head_alloc(struct roff_man *, int, int, int);
a76 1
struct roff_node *mdoc_body_alloc(struct roff_man *, int, int, int);
@


1.72
log
@Move mdoc_hash_init() and man_hash_init() to libmandoc.h
and call them from mparse_alloc() and choose_parser(),
preparing unified allocation of struct roff_man.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.71 2015/04/18 16:04:40 schwarze Exp $ */
a80 1
void		  mdoc_node_delete(struct roff_man *, struct roff_node *);
@


1.71
log
@Replace the structs mdoc and man by a unified struct roff_man.
Almost completely mechanical, no functional change.
Written on the train from Exeter to London returning from p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.70 2015/04/02 23:47:43 schwarze Exp $ */
a82 1
void		  mdoc_hash_init(void);
@


1.70
log
@Third step towards parser unification:
Replace struct mdoc_meta and struct man_meta by a unified struct roff_meta.
Written of the train from London to Exeter on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.69 2015/04/02 22:06:17 schwarze Exp $ */
d19 1
a19 31
enum	mdoc_next {
	MDOC_NEXT_SIBLING = 0,
	MDOC_NEXT_CHILD
};

struct	mdoc {
	struct mparse	 *parse; /* parse pointer */
	const char	 *defos; /* default argument for .Os */
	int		  quick; /* abort parse early */
	int		  flags; /* parse flags */
#define	MDOC_LITERAL	 (1 << 1) /* in a literal scope */
#define	MDOC_PBODY	 (1 << 2) /* in the document body */
#define	MDOC_NEWLINE	 (1 << 3) /* first macro/text in a line */
#define	MDOC_PHRASELIT	 (1 << 4) /* literal within a partila phrase */
#define	MDOC_PPHRASE	 (1 << 5) /* within a partial phrase */
#define	MDOC_FREECOL	 (1 << 6) /* `It' invocation should close */
#define	MDOC_SYNOPSIS	 (1 << 7) /* SYNOPSIS-style formatting */
#define	MDOC_KEEP	 (1 << 8) /* in a word keep */
#define	MDOC_SMOFF	 (1 << 9) /* spacing is off */
#define	MDOC_NODELIMC	 (1 << 10) /* disable closing delimiter handling */
	enum mdoc_next	  next; /* where to put the next node */
	struct roff_node *last; /* the last node parsed */
	struct roff_node *first; /* the first node parsed */
	struct roff_node *last_es; /* the most recent Es node */
	struct roff_meta  meta; /* document meta-data */
	enum roff_sec	  lastnamed;
	enum roff_sec	  lastsec;
	struct roff	 *roff;
};

#define	MACRO_PROT_ARGS	struct mdoc *mdoc, \
d70 3
a72 3
void		  mdoc_word_alloc(struct mdoc *, int, int, const char *);
void		  mdoc_word_append(struct mdoc *, const char *);
void		  mdoc_elem_alloc(struct mdoc *, int, int,
d74 1
a74 1
struct roff_node *mdoc_block_alloc(struct mdoc *, int, int,
d76 4
a79 4
struct roff_node *mdoc_head_alloc(struct mdoc *, int, int, int);
void		  mdoc_tail_alloc(struct mdoc *, int, int, int);
struct roff_node *mdoc_body_alloc(struct mdoc *, int, int, int);
struct roff_node *mdoc_endbody_alloc(struct mdoc *, int, int, int,
d81 2
a82 2
void		  mdoc_node_delete(struct mdoc *, struct roff_node *);
void		  mdoc_node_relink(struct mdoc *, struct roff_node *);
d88 3
a90 3
void		  mdoc_valid_pre(struct mdoc *, struct roff_node *);
void		  mdoc_valid_post(struct mdoc *);
void		  mdoc_argv(struct mdoc *, int, int,
d93 1
a93 1
enum margserr	  mdoc_args(struct mdoc *, int,
d95 1
a95 1
void		  mdoc_macroend(struct mdoc *);
@


1.69
log
@Second step towards parser unification:
Replace struct mdoc_node and struct man_node by a unified struct roff_node.
To be able to use the tok member for both mdoc(7) and man(7) without
defining all the macros in roff.h, sacrifice a tiny bit of type safety
and make tok an int rather than an enum.
Almost mechanical, no functional change.
Written on the Eurostar from Bruxelles to London on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.68 2015/02/02 04:26:03 schwarze Exp $ */
d43 1
a43 1
	struct mdoc_meta  meta; /* document meta-data */
@


1.68
log
@Get rid of all calls to rew_sub() in blk_exp_close(); only ten calls
remain in other functions.  As a bonus, this fixes an assertion failure
jsg@@ found some time ago with afl (test case 982) and improves minor
details in error reporting.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.67 2014/11/29 03:37:28 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2013, 2014 Ingo Schwarze <schwarze@@openbsd.org>
d10 1
a10 1
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
d12 1
a12 1
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
d40 3
a42 3
	struct mdoc_node *last; /* the last node parsed */
	struct mdoc_node *first; /* the first node parsed */
	struct mdoc_node *last_es; /* the most recent Es node */
d44 2
a45 2
	enum mdoc_sec	  lastnamed;
	enum mdoc_sec	  lastsec;
d50 1
a50 1
			enum mdoct tok, \
d103 10
a112 10
			enum mdoct, struct mdoc_arg *);
struct mdoc_node *mdoc_block_alloc(struct mdoc *, int, int,
			enum mdoct, struct mdoc_arg *);
struct mdoc_node *mdoc_head_alloc(struct mdoc *, int, int, enum mdoct);
void		  mdoc_tail_alloc(struct mdoc *, int, int, enum mdoct);
struct mdoc_node *mdoc_body_alloc(struct mdoc *, int, int, enum mdoct);
struct mdoc_node *mdoc_endbody_alloc(struct mdoc *, int, int, enum mdoct,
			struct mdoc_node *, enum mdoc_endbody);
void		  mdoc_node_delete(struct mdoc *, struct mdoc_node *);
void		  mdoc_node_relink(struct mdoc *, struct mdoc_node *);
d114 1
a114 1
enum mdoct	  mdoc_hash_find(const char *);
d118 1
a118 1
void		  mdoc_valid_pre(struct mdoc *, struct mdoc_node *);
d120 1
a120 1
void		  mdoc_argv(struct mdoc *, int, enum mdoct,
d124 1
a124 1
			int *, char *, enum mdoct, char **);
@


1.67
log
@Provide a helper function macro_or_word() and use it to prune the
same chunk of argument parsing code out of five of the eight callback
functions.  The other three have too much special handling to
participate.
As a bonus, let lookup() and mdoc_args() deal with line macros and
retire the lookup_raw() helper and the mdoc_zargs() internal interface
function.
No functional change, minus 40 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.66 2014/11/28 23:20:55 schwarze Exp $ */
d109 1
a109 1
void		  mdoc_endbody_alloc(struct mdoc *, int, int, enum mdoct,
@


1.66
log
@Fold the loop around mdoc_argv() into the function itself,
it was the same in all four cases.  As a bonus, get rid
of one enum type that was used for internal communication.
No functional change, minus 40 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.65 2014/11/28 18:35:37 schwarze Exp $ */
a124 2
enum margserr	  mdoc_zargs(struct mdoc *, int,
			int *, char *, char **);
@


1.65
log
@Retire support for CSRG supplementary document titles.  These are
long obsolete and were never written in mdoc(7) in the first place.
Removes 100 lines from source files.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.64 2014/11/28 17:23:34 schwarze Exp $ */
a77 7
enum	margverr {
	ARGV_ERROR,
	ARGV_EOLN, /* end of line */
	ARGV_ARG, /* valid argument */
	ARGV_WORD /* normal word (or bad argument---same thing) */
};

d120 1
a120 1
enum margverr	  mdoc_argv(struct mdoc *, int, enum mdoct,
@


1.64
log
@Remove bulky, irrelevant library description string tables
not used by a single manual in OpenBSD and just print library names;
will remain in the portable version for use by FreeBSD and NetBSD.
Removes 150 lines from source tree and 16 Kilobytes (4%) from binary.
Bloat found by deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.63 2014/11/28 04:46:30 schwarze Exp $ */
a124 1
const char	 *mdoc_a2vol(const char *);
@


1.63
log
@Simplify by making the mdoc parser callbacks void, and some cleanup;
no functional change, minus 50 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.62 2014/11/28 03:13:58 schwarze Exp $ */
a122 1
const char	 *mdoc_a2lib(const char *);
@


1.62
log
@Simplify the code by making various mdoc parser helper functions void.
No functional change, minus 130 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.61 2014/11/28 01:05:40 schwarze Exp $ */
d57 1
a57 1
	int		(*fp)(MACRO_PROT_ARGS);
d106 1
a106 1
int		  mdoc_macro(MACRO_PROT_ARGS);
d136 1
a136 1
int		  mdoc_macroend(struct mdoc *);
@


1.61
log
@Simplify code by making mdoc validation handlers void.
No functional change, minus 90 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.60 2014/11/27 14:31:29 deraadt Exp $ */
d107 1
a107 2
int		  mdoc_word_alloc(struct mdoc *,
			int, int, const char *);
d109 1
a109 1
int		  mdoc_elem_alloc(struct mdoc *, int, int,
d111 1
a111 1
int		  mdoc_block_alloc(struct mdoc *, int, int,
d113 4
a116 4
int		  mdoc_head_alloc(struct mdoc *, int, int, enum mdoct);
int		  mdoc_tail_alloc(struct mdoc *, int, int, enum mdoct);
int		  mdoc_body_alloc(struct mdoc *, int, int, enum mdoct);
int		  mdoc_endbody_alloc(struct mdoc *, int, int, enum mdoct,
d119 1
a119 1
int		  mdoc_node_relink(struct mdoc *, struct mdoc_node *);
@


1.60
log
@remove unneccessary inclusion protection; ok schwarze
@
text
@d1 1
a1 1
/*	$OpenBSD: libmdoc.h,v 1.59 2014/11/17 06:44:35 schwarze Exp $ */
d128 2
a129 2
int		  mdoc_valid_pre(struct mdoc *, struct mdoc_node *);
int		  mdoc_valid_post(struct mdoc *);
@


1.59
log
@Multiple fixes with respect to in-line macros:
* .No selects the default font; relevant e.g. in .Bf blocks
* no need to force empty .Li elements
* closing delimiters as leading macro arguments do not suppress space
* opening delimiters at the end of a macro line do not suppress space
* correctly handle delimiter spacing in -Tman
As a side effect, these fixes let mandoc warn about empty .No macros
as requested by bentley@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a17 2
#ifndef LIBMDOC_H
#define LIBMDOC_H
a140 2

#endif /*!LIBMDOC_H*/
@


1.58
log
@demacrify: get rid of man_nmsg(), man_pmsg(), mdoc_nmsg(), mdoc_pmsg()
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.57 2014/08/08 15:32:17 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2013 Ingo Schwarze <schwarze@@openbsd.org>
d40 1
@


1.57
log
@Simplify: replace one global flag by one local variable
and remove three unused global flags.  No functional change.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.56 2014/07/09 11:30:07 schwarze Exp $ */
a106 4
#define		  mdoc_pmsg(mdoc, l, p, t) \
		  mandoc_msg((t), (mdoc)->parse, (l), (p), NULL)
#define		  mdoc_nmsg(mdoc, n, t) \
		  mandoc_msg((t), (mdoc)->parse, (n)->line, (n)->pos, NULL)
@


1.56
log
@mark defos as const; nobody needs to change it,
and it is occasionally useful to be able to pass literal strings
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.55 2014/07/02 03:47:07 schwarze Exp $ */
a30 1
#define	MDOC_HALT	 (1 << 0) /* error in parse: halt */
@


1.55
log
@Implement the obsolete macros .En .Es .Fr .Ot for backward compatibility,
since this is hardly more complicated than explicitly ignoring them
as we did in the past.  Of course, do not use them!
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.54 2014/04/20 16:44:44 schwarze Exp $ */
d28 1
a28 1
	char		 *defos; /* default argument for .Os */
@


1.54
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.53 2014/01/05 20:26:27 schwarze Exp $ */
d44 1
@


1.53
log
@Add an option -Q (quick) to mandocdb(8)
for accelerated generation of reduced-size databases.

Implement this by allowing the parsers to optionally
abort the parse sequence after the NAME section.

While here, garbage collect the unused void *arg attribute
of struct mparse and mparse_alloc().

This reduces the processing time of mandocdb(8) on /usr/share/man
by a factor of 2 and the database size by a factor of 4.
However, it still takes 5 times the time and 6 times the space
of makewhatis(8), so more work is clearly needed.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.52 2013/10/21 23:32:32 schwarze Exp $ */
d112 1
a112 1
int		  mdoc_word_alloc(struct mdoc *, 
d115 1
a115 1
int		  mdoc_elem_alloc(struct mdoc *, int, int, 
d117 1
a117 1
int		  mdoc_block_alloc(struct mdoc *, int, int, 
d140 1
a140 1
enum margserr	  mdoc_zargs(struct mdoc *, int, 
@


1.52
log
@There are three kinds of input lines: text lines, macros taking
positional arguments (like Dt Fn Xr) and macros taking text as
arguments (like Nd Sh Em %T An).  In the past, even the latter put
each word of their arguments into its own MDOC_TEXT node; instead,
concatenate arguments unless delimiters, keeps or spacing mode
prevent that.  Regarding mandoc(1), this is internal refactoring,
no output change intended.

Once we will switch mandocdb(8) from DB to SQLite in the future,
this is going to be required to support search expressions crossing
word boundaries, and it will reduce both database sizes and build
times by a bit more than 5% each.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.51 2012/11/17 00:25:20 schwarze Exp $ */
d29 1
@


1.51
log
@Cleanup naming of local variables to make the code easier on the eye:
Settle for "struct man *man", "struct mdoc *mdoc", "struct meta *meta"
and avoid the confusing "*m" which was sometimes this, sometimes that.
No functional change.

ok kristaps@@ some time ago
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.50 2012/07/18 11:09:30 schwarze Exp $ */
d4 1
d38 2
d63 2
a64 2
#define	MDOC_IGNDELIM	 (1 << 4) 
	/* Reserved words in arguments treated as text. */
d113 1
@


1.50
log
@Fix handling of paragraph macros inside lists:
* When they are trailing the last item, move them outside the list.
* When they are trailing any other none-compact item, drop them.

Improves formatting of 40 pages, e.g. grep(1), ksh(1), netstat(1),
ath(4), bsd.port.mk(5), pf.conf(5), mount(8), crypto(9).
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.49 2012/05/24 23:33:23 schwarze Exp $ */
d46 1
a46 1
#define	MACRO_PROT_ARGS	struct mdoc *m, \
d103 4
a106 4
#define		  mdoc_pmsg(m, l, p, t) \
		  mandoc_msg((t), (m)->parse, (l), (p), NULL)
#define		  mdoc_nmsg(m, n, t) \
		  mandoc_msg((t), (m)->parse, (n)->line, (n)->pos, NULL)
d117 2
a118 3
int		  mdoc_endbody_alloc(struct mdoc *m, int line, int pos,
			enum mdoct tok, struct mdoc_node *body,
			enum mdoc_endbody end);
@


1.49
log
@Support -Ios='OpenBSD 5.1' to override uname(3) as the source of the
default value for the mdoc(7) .Os macro.
Needed for man.cgi on the OpenBSD website.

Problem with man.cgi first noticed by deraadt@@;
beck@@ and deraadt@@ agree with the way to solve the issue.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.48 2011/12/02 01:45:43 schwarze Exp $ */
d121 1
@


1.48
log
@In man(7), when no explicit volume name is given, use the default
volume name for the respective manual section, just like in mdoc(7).
This gives us nicer page headers for cvs(1), lynx(1), tic(1),
mkhybrid(8), and many curses(3) manuals.

ok kristaps@@

To not break compatibility, i wrote a corresponding patch for GNU troff
which Werner Lemberg accepted upstream at rev. 1.65 of:
http://cvs.savannah.gnu.org/viewvc/groff/tmac/an-old.tmac?root=groff
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.47 2011/09/18 10:25:28 schwarze Exp $ */
d27 1
@


1.47
log
@sync to version 1.11.5:
adding an implementation of the eqn(7) language
by kristaps@@

So far, only .EQ/.EN blocks are handled, in-line equations are not, and
rendering is not yet very pretty, but the parser is fairly complete.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.46 2011/05/29 21:22:18 schwarze Exp $ */
a126 1
const char	 *mdoc_a2msec(const char *);
@


1.46
log
@Merge release 1.11.3, almost all code by kristaps@@:
* Unicode output support (no Unicode input yet, though).
* Refactoring: completely handle predefined strings in roff.c.
- New function mandoc_escape() replaces a2roffdeco() and mandoc_special().
- Start using mandoc_getarg() in mdoc_argv.c.
- Clean up parsing of delimiters in mdoc(7).
* And many minor fixes and lots of cleanup.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.45 2011/04/24 16:22:02 schwarze Exp $ */
d42 1
a42 1
	struct regset	 *regs; /* registers */
@


1.45
log
@Merge version 1.11.1:
Again lots of cleanup and maintenance work by kristaps@@.
- simplify error reporting: less function pointers, more mandoc_[v]msg
- main: split document parsing out of main.c into read.c
- roff, mdoc, man: improved recognition of control characters
- roff: better handling of if/else stack overflows
- roff: add some predefined strings for backward compatibility
- mdoc, man: empty sections are not errors
- mdoc: move delimiter handling to libmdoc
- some header restructuring and some minor features and fixes
This merge causes two minor regressions
that i will fix in separate commits right afterwards.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.44 2011/04/21 22:59:54 schwarze Exp $ */
d65 7
a71 7
	ARGS_EOLN,
	ARGS_WORD,
	ARGS_PUNCT,
	ARGS_QWORD,
	ARGS_PHRASE,
	ARGS_PPHRASE,
	ARGS_PEND
d76 3
a78 3
	ARGV_EOLN,
	ARGV_ARG,
	ARGV_WORD
d136 1
a136 5
			int *, char *, int, char **);
#define	ARGS_DELIM	(1 << 1)
#define	ARGS_TABSEP	(1 << 2)
#define	ARGS_NOWARN	(1 << 3)

a137 2

#define	DELIMSZ	  6 /* hint: max possible size of a delimiter */
@


1.44
log
@Merge version 1.10.10:
lots of cleanup and maintenance work by kristaps@@.
- move some main.c globals into struct curparse
- move mandoc_*alloc to mandoc.h such that all code can use them
- make mandoc_isdelim available to formatting frontends
- dissolve mdoc_strings.c, move the code where it is used
- make all error reporting functions void, their return values were useless
- and various minor cleanups and fixes
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.43 2010/12/01 22:02:29 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
a19 2
#include "mdoc.h"

d26 2
a27 3
	void		 *data; /* private application data */
	mandocmsg	  msg; /* message callback */
	int		  flags;
d81 17
d103 1
a103 1
		  (*(m)->msg)((t), (m)->data, (l), (p), NULL)
d105 1
a105 3
		  (*(m)->msg)((t), (m)->data, (n)->line, (n)->pos, NULL)
void		  mdoc_vmsg(struct mdoc *, enum mandocerr, 
			int, int, const char *, ...);
a132 1
void		  mdoc_argn_free(struct mdoc_arg *, int);
d142 3
@


1.43
log
@Merge mdoc_action.c into mdoc_validate.c, because having two places to do
basically the same things just causes code duplication and confusion.
Work by kristaps@@, including a few bugfixes he found during the merge,
and reapplying OpenBSD changes on top.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.42 2010/08/20 00:53:35 schwarze Exp $ */
a83 7
enum	mdelim {
	DELIM_NONE = 0,
	DELIM_OPEN,
	DELIM_MIDDLE,
	DELIM_CLOSE
};

d92 1
a92 1
int		  mdoc_vmsg(struct mdoc *, enum mandocerr, 
a109 6
enum mdelim	  mdoc_iscdelim(char);
enum mdelim	  mdoc_isdelim(const char *);
size_t		  mdoc_isescape(const char *);
enum	mdoc_sec  mdoc_str2sec(const char *);
time_t		  mdoc_atotime(const char *);
size_t		  mdoc_macro2len(enum mdoct);
@


1.42
log
@Implement a simple, consistent user interface for error handling.
We now have sufficient practical experience to know what we want,
so this is intended to be final:
- provide -Wlevel (warning, error or fatal) to select what you care about
- provide -Wstop to stop after parsing a file with warnings you care about
- provide consistent exit status codes for those warnings you care about
- fully document what warnings, errors and fatal errors mean
- remove all other cruft from the user interface, less is more:
- remove all -f knobs along with the whole -f option
- remove the old -Werror because calling warnings "fatal" is silly
- always finish parsing each file, unless fatal errors prevent that
This commit also includes a couple of related simplifications behind
the scenes regarding error handling.
Feedback and OK  kristaps@@;  Joerg Sonnenberger (NetBSD) and
Sascha Wildner (DragonFly BSD) agree with the general direction.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.41 2010/07/13 01:09:12 schwarze Exp $ */
a130 3
int		  mdoc_action_pre(struct mdoc *, 
			struct mdoc_node *);
int		  mdoc_action_post(struct mdoc *);
@


1.41
log
@Merge release 1.10.4 (all code by kristaps@@), providing four new features:
1) Proper .Bk support: allow output line breaks at input line breaks,
but keep input lines together in the output, finally fixing
synopses like aucat(1), mail(1) and tmux(1).
2) Mostly finished -Tps (PostScript) output.
3) Implement -Thtml output for .Nm blocks and .Bk -words.
4) Allow iterative interpolation of user-defined roff(7) strings.
Also contains some minor bugfixes and some performance improvements.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.40 2010/07/01 22:31:52 schwarze Exp $ */
a38 1
	int		  pflags;
@


1.40
log
@In the mdoc(7) parser, inspect roff registers early such that all parts
of the parser can use the resulting cues.  In particular, this allows
to use .nr nS to force SYNOPSIS-style .Nm indentation outside the
SYNOPSIS as needed by ifconfig(8).

To actually make this useable, .Pp must rewind .Nm, or the rest of the
section would end up indented.  Implement a quick hack for now,
a generic solution can be designed later.

ok kristaps@@ sobrado@@
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.39 2010/06/29 17:10:29 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@bsd.lv>
a19 1
#include "regs.h"
@


1.39
log
@Support for badly nested blocks, written around the time of
the Rostock mandoc hackathon and tested and polished since,
supporting constructs like:

.Ao Bo    Ac    Bc        (exp breaking exp)
.Aq Bo    eol   Bc        (imp breaking exp)
.Ao Bq    Ac    eol       (exp breaking imp)
.Ao Bo So Bc    Ac  Sc    (double break, inner before outer)
.Ao Bo So Ac    Bc  Sc    (double break, outer before inner)
.Ao Bo    Ac So Bc  Sc    (broken breaker)
.Ao Bo So Bc Do Ac  Sc Dc (broken double breaker)

There are still two known issues which are tricky:

1) Breaking two identical explicit blocks (Ao Bo Bo Ac or Aq Bo Bo eol)
fails outright, triggering a bogus syntax error.
2) Breaking a block by two identical explicit blocks (Ao Ao Bo Ac Ac Bc
or Ao Ao Bq Ac Ac eol) still has a minor rendering error left:
"<ao1 <ao2 [bo ac2> ac1> bc]>" should not have the final ">".

We can fix these later in the tree, let's not grow this diff too large.

"get it in" kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.38 2010/06/27 21:54:41 schwarze Exp $ */
d39 1
@


1.38
log
@Full .nr nS support, unbreaking the kernel manuals.

Kristaps coded this from scratch after reading my .nr patch;
it is simpler and more powerful.

Registers live in struct regset in regs.h, struct man and struct mdoc
contain pointers to it.  The nS register is cleared when parsing .Sh.
Frontends respect the MDOC_SYNPRETTY flag set in mdoc node_alloc.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.37 2010/06/06 20:30:08 schwarze Exp $ */
d112 3
@


1.37
log
@Merge bsd.lv version 1.10.1 (to be released soon).

The main step forward is that this now has *much* better .Bl -column
support, now supporting many manuals that previously errored out
without producing any output.

Other fixes include:
* do not die from multiple list types, use the first and warn
* in .Bl without a type, default to -item
* various tweaks to .Dt
* fix .In, .Fd, .Ft, .Fn and .Fo formatting
* some documentation fixes and additions
* and fix a couple of bugs reported by Ulrich Spoerlein:
* better support for roff block-end "\}" without a preceding dot
* .In must not break the line outside SYNOPSIS
* spelling in some error messages

While merging, fix one regression in .In spacing
that needs to go to bsd.lv, too.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.36 2010/05/24 00:00:10 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@kth.se>
d20 1
d29 2
a30 2
	void		 *data;
	mandocmsg	  msg;
d40 4
a43 4
	enum mdoc_next	  next;
	struct mdoc_node *last;
	struct mdoc_node *first;
	struct mdoc_meta  meta;
d46 1
d49 6
a54 2
#define	MACRO_PROT_ARGS	struct mdoc *m, enum mdoct tok, \
			int line, int ppos, int *pos, char *buf
@


1.36
log
@Increase performance by saving the list type in struct mdoc_node.
This will eventually be used so that mdoc_macro can know whether to
dump list line arguments into the body (`Bl -column' overflowing).
Remove a2list() and arg_listtype() because of this.

From kristaps@@.

While merging, fix a regression in mdoc_term.c, print_bvspace():
The bsd.lv version of this broke vertical spacing in .Bl -column.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.35 2010/05/23 22:45:00 schwarze Exp $ */
d37 1
d121 1
a121 2
int		  mdoc_valid_pre(struct mdoc *, 
			const struct mdoc_node *);
@


1.35
log
@Unified error and warning message system for all of mandoc,
featuring three message levels, as agreed during the mandoc hackathon:
* FATAL parser failure, cannot produce any output from this input file:
  eventually, we hope to convert most of these to ERRORs.
* ERROR, meaning mandoc cannot cope fully with the input syntax and will
  probably lose information or produce structurally garbled output;
  it will try to produce output anyway but exit non-zero at the end,
  which is eventually intended to make the ports infrastructure happy.
* WARNING, meaning you should clean up the input file, but output
  is probably mostly OK, so this will not cause error-exit at the end.
This commit is mostly just converting the old system to the new one; before
the classification will become really reliable, we must check all messages.

In particular,
* set up a new central message string table in main.c
* drop the old message string tables from man.c and mdoc.c
* get rid of the piece-meal merr enums in libman and libmdoc
* reduce number of error/warning functions from 16 to 6 (still a lot...)

While here, handle a few problems more gracefully:
* allow .Rv and .Ex to work without a prior .Nm
* allow .An to ignore extra arguments
* allow undeclared columns in .Bl -column

Written by kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.34 2010/05/15 18:25:50 schwarze Exp $ */
d124 1
a124 1
			const struct mdoc_node *);
@


1.34
log
@allow non-numeric manual sections in -mdoc;
while here, allow LIBRARY in section 9;
by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.33 2010/05/15 16:48:12 schwarze Exp $ */
d29 1
a29 1
	struct mdoc_cb	  cb;
a45 56
enum	merr {
	ETAILWS = 0,
	EQUOTPARM,
	EQUOTTERM,
	EARGVAL,	
	EBODYPROL,
	EPROLBODY,
	ETEXTPROL,
	ENOBLANK,
	ETOOLONG,
	EESCAPE,
	EPRINT,
	ENODAT,
	ENOPROLOGUE,
	ELINE,
	EATT,
	ENAME,
	ELISTTYPE,
	EDISPTYPE,
	EMULTIDISP,
	EMULTILIST,
	ESECNAME,
	ENAMESECINC,
	EARGREP,
	EBOOL,
	ECOLMIS,
	ENESTDISP,
	EMISSWIDTH,
	EWRONGMSEC,
	ESECOOO,
	ESECREP,
	EBADSTAND,
	ENOMULTILINE,
	EMULTILINE,
	ENOLINE,
	EPROLOOO,
	EPROLREP,
	EBADMSEC,
	EFONT,
	EBADDATE,
	ENUMFMT,
	ENOWIDTH,
	EUTSNAME,
	EOBS,
	EIMPBRK,
	EIGNE,
	EOPEN,
	EQUOTPHR,
	ENOCTX,
	ELIB,
	EBADCHILD,
	ENOTYPE,
	EBADCOMMENT,
	MERRMAX
};

d89 6
a94 13
#define		  mdoc_perr(m, l, p, t) \
		  mdoc_err((m), (l), (p), 1, (t))
#define		  mdoc_pwarn(m, l, p, t) \
		  mdoc_err((m), (l), (p), 0, (t))
#define		  mdoc_nerr(m, n, t) \
		  mdoc_err((m), (n)->line, (n)->pos, 1, (t))
#define		  mdoc_nwarn(m, n, t) \
		  mdoc_err((m), (n)->line, (n)->pos, 0, (t))

int		  mdoc_err(struct mdoc *, int, int, int, enum merr);
int		  mdoc_verr(struct mdoc *, int, int, const char *, ...);
int		  mdoc_vwarn(struct mdoc *, int, int, const char *, ...);

@


1.33
log
@various improvements regarding errors and warnings Joerg Sonnenberger:
* If the last -column .Bl isn't specified, it is auto-sized.
* An invalid .St argument should be a warning, not an error.
  Just put the argument into the output.
* An invalid .At argument should be a warning, not an error.
  Just print the argument, like new groff does.
* Remove warnings concerning manual section (like 1, 6, 8).
  It was only used for .Ex and not really useful.
* Remove warnings concerning page section (like SYNOPSIS).
  These were only used for .Fd and .Lb and not really useful.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.32 2010/05/15 13:12:55 schwarze Exp $ */
d83 1
a83 1
	EBADSEC,
@


1.32
log
@proper handling of quoted tab-separated column lists
by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.31 2010/05/15 12:30:59 schwarze Exp $ */
a82 1
	EBADMSEC,
@


1.31
log
@Distinguish OPEN, MIDDLE and CLOSE delimiters (using an enum).
Only OPEN are drawn before the beginning of a macro;
this is new, before this, MIDDLE ('|') were drawn in front, too.
Only CLOSE are pushed after the end of a macro (as before).
ok kristaps@@

This allows us to finally enable handling of leading punctuation
without regressions.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.30 2010/05/14 14:47:44 schwarze Exp $ */
d35 2
d198 3
a200 3
#define	ARGS_DELIM	(1 << 1)	/* See args(). */
#define	ARGS_TABSEP	(1 << 2)	/* See args(). */
#define	ARGS_NOWARN	(1 << 3)	/* See args(). */
@


1.30
log
@Merge 1.9.25, keeping local patches;
this does not merge kristaps' end-of-sentences handling yet,
i will check that separately.  This one includes:
* handle \*(Ba as a delimiter
* introduce ARGS_PEND for .Bl -column .It end-of-line special casing
* section ordering: expect EXIT STATUS at the right place
* line break fixes in SYNOPSIS
* allow literal contexts to have arbitrary line lengths
* the input file column number can not be used to identify the beginning
  of a line because white space is allowed after the initial '.'
* proper leading spaces in -man -Tascii mode
* do not let Lb break lines in -mdoc -Thtml LIBRARY
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.29 2010/05/14 01:54:37 schwarze Exp $ */
d133 7
d170 2
a171 2
int		  mdoc_iscdelim(char);
int		  mdoc_isdelim(const char *);
@


1.29
log
@merge 1.9.24, keeping local patches; some changes:
* preserve multiple consecutive space characters in input
* do not restrict .Cd and .Rv to certain sections (requested by Joerg)
* do not run lookup() on quoted words
* enum return types for mdoc_args and mdoc_argv
* fix auto-closing of LINK tag in -Txhtml (from Daniel Friesel)
* various lint and manual fixes
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.28 2010/05/08 01:52:07 schwarze Exp $ */
d31 4
a34 3
#define	MDOC_HALT	 (1 << 0)	/* Error in parse. Halt. */
#define	MDOC_LITERAL	 (1 << 1)	/* In a literal scope. */
#define	MDOC_PBODY	 (1 << 2)	/* In the document body. */
d122 2
a123 1
	ARGS_PPHRASE
d166 1
a166 1
enum	mdoc_sec  mdoc_atosec(const char *);
@


1.28
log
@handle text lines beginning with \." as comments, like groff does,
even though this is not correct comment syntax (so warn, too)
reported by Claus Assmann on misc@@, fix by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.27 2010/04/07 23:15:05 schwarze Exp $ */
d114 17
d166 1
a166 2

size_t		  mdoc_macro2len(int);
d179 1
a179 1
int		  mdoc_argv(struct mdoc *, int, enum mdoct,
a180 4
#define	ARGV_ERROR	(-1)
#define	ARGV_EOLN	(0)
#define	ARGV_ARG	(1)
#define	ARGV_WORD	(2)
d183 1
a183 1
int		  mdoc_args(struct mdoc *, int,
d185 1
a185 1
int		  mdoc_zargs(struct mdoc *, int, 
d190 1
a190 6
#define	ARGS_ERROR	(-1)
#define	ARGS_EOLN	(0)
#define	ARGS_WORD	(1)
#define	ARGS_PUNCT	(2)
#define	ARGS_QWORD	(3)
#define	ARGS_PHRASE	(4)
@


1.27
log
@Merge the good parts of 1.9.23,
avoid the bad parts of 1.9.23, and keep local patches.

Input in general:
 * Basic handling of roff-style font escapes \f, \F.
 * Quoted punctuation does not count as punctuation.

mdoc(7) parser:
 * Make .Pf callable; noted by Claus Assmann.
 * Let .Bd and .Bl ignore unknown arguments; noted by deraadt@@.
 * Do not warn when .Er is used outside certain sections.
 * Replace mdoc_node_free[list] by mdoc_node_delete.
 * Replace #define by enum for rew*() return values.

man(7) parser:
 * When .TH is missing, use default section and date.

Output in general:
 * Curly braces do not count as punctuation.
 * No space after .Fl w/o args when a macro follows on the same line.

HTML output:
 * Unify PAIR_*_INIT macros, introduce new PAIR_ID_INIT().
 * Print whitespace after, not before .Vt .Fn .Ft .Fo.

Checked that all manuals in base still build.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.26 2010/04/03 16:30:42 schwarze Exp $ */
d96 1
@


1.26
log
@When two conflicting list types are specified for the same list,
use the first, discard the second, and warn.  No need to bail out.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.25 2010/04/02 12:39:47 schwarze Exp $ */
d140 1
a140 2
void		  mdoc_node_free(struct mdoc_node *);
void		  mdoc_node_freelist(struct mdoc_node *);
@


1.25
log
@merge 1.9.22, keeping local patches
* convert mdoc tokens from #define to enum
* fix a segfault with .Xo/.Xc in explicit blocks
* Thorn is \*(Th, not \*(TH; noticed by Joerg Sonnenberger
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.24 2009/12/22 23:58:00 schwarze Exp $ */
d170 1
@


1.24
log
@sync to 1.9.12, mostly portability and refactoring:

correctness/functionality:
- bugfix: do not die when overstep hits the right margin
- new option: -fign-escape
- and various HTML features

portability:
- replace bzero(3) by memset(3), which is ANSI C
- replace err(3)/warn(3) by perror(3)/exit(3), which is ANSI C
- iuse argv[0] instead of __progname
- add time.h to various files for FreeBSD compilation

simplicity:
- do not allocate header/footer data dynamically in *_term.c
- provide and use malloc frontends that error out on failure

for full changelogs, see http://bsd.lv/cgi-bin/cvsweb.cgi/
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.23 2009/10/21 19:13:50 schwarze Exp $ */
d99 2
a100 2
#define	MACRO_PROT_ARGS	struct mdoc *m, int tok, int line, \
			int ppos, int *pos, char *buf
d134 1
a134 1
			int, struct mdoc_arg *);
d136 4
a139 4
			int, struct mdoc_arg *);
int		  mdoc_head_alloc(struct mdoc *, int, int, int);
int		  mdoc_tail_alloc(struct mdoc *, int, int, int);
int		  mdoc_body_alloc(struct mdoc *, int, int, int);
d143 1
a143 1
int		  mdoc_hash_find(const char *);
d163 1
a163 1
int		  mdoc_argv(struct mdoc *, int, int,
d171 1
a171 1
			int *, char *, int, char **);
@


1.23
log
@sync to 1.9.9, featuring:
 * -Thtml output mode
 * roff scaling units
 * and some minor fixes
for full changelogs, see http://bsd.lv/cgi-bin/cvsweb.cgi/
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.22 2009/10/19 16:27:52 schwarze Exp $ */
a46 1
	EMALLOC,
@


1.22
log
@sync to 1.9.6: multiple improvements to references (.Rs)
 * validate and order .Rs child nodes
 * underline book title (.%B) and issuer (.%I)
 * enclose title of article (.%T) in quotes
 * avoid calling mdoc_verr directly, use a proper error code instead
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.21 2009/09/21 21:11:37 schwarze Exp $ */
d96 1
@


1.21
log
@sync to 1.9.5: lookup hashes are now static tables
shortening the code, and, according to kristaps@@, speeding it up
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.20 2009/08/22 22:39:55 schwarze Exp $ */
d95 1
@


1.20
log
@sync to 1.9.1: correctly flag delimiter whitespace
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.19 2009/08/22 21:55:06 schwarze Exp $ */
a29 1
	void		 *htab;
d141 2
a142 3
void		 *mdoc_hash_alloc(void);
int		  mdoc_hash_find(const void *, const char *);
void		  mdoc_hash_free(void *);
@


1.19
log
@sync to 1.9.1: set mdoc_next flags in mdoc_*_alloc routines, where they belong
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.18 2009/08/22 19:43:33 schwarze Exp $ */
d174 4
a177 1
			int *, char *, char **);
a183 1

@


1.18
log
@sync to 1.9.0: polishing the core code of mdoc macro handling
1) If a macro is not parsed, do not parse it.  Of course, without
parsing it, we cannot produce "macro-like parameter" warnings,
but these were useless anyway.
2) If a macro is not callable, do not print a useless warning when
it occurs as a parameter, just display the raw characters.
3) Below .Bl -column, check whether macros are callable.
4) Like groff, allow whitespace after the initial dot on macro lines.
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.17 2009/07/26 22:48:41 schwarze Exp $ */
d99 1
a99 1
#define	MACRO_PROT_ARGS	struct mdoc *mdoc, int tok, int line, \
@


1.17
log
@sync to 1.8.1: rewrite quoted literal handling correctly,
rewrite TABSEP handling in a simpler way,
and retire ECOLEMPTY, ARGS_QUOTED and ARGS_ARGVLIKE
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.16 2009/07/26 02:17:29 schwarze Exp $ */
a49 1
	ENOCALL,
a89 1
	EMACPARM,
a94 1
	ESPACE,
@


1.16
log
@sync to 1.8.1: removed excessively verbose EARGVPARM warning
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.15 2009/07/18 19:44:38 schwarze Exp $ */
a45 1
	ECOLEMPTY,
d176 2
@


1.15
log
@sync to 1.8.0: move mdoc_a2att, mdoc_a2st, and mdoc_a2lib to libmdoc
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.14 2009/07/13 00:33:40 schwarze Exp $ */
a46 1
	EARGVPARM,
@


1.14
log
@sync to 1.7.24: mdoc_nwarn/mdoc_nerr got mixed up;
fix from joerg at netbsd via kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.13 2009/07/12 22:35:08 schwarze Exp $ */
d100 1
d157 3
@


1.13
log
@sync to 1.7.23: pass warning code to mdoc_pwarn() instead of warning message
define additional warning macro mdoc_nwarn()
remove obsolete warning functions mdoc_warn(), pwarn(), vwarn(), nwarn()
remove various now unused "enum mdoc_warn" and "enum mwarn"
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.12 2009/07/12 21:45:44 schwarze Exp $ */
d126 2
a128 2
#define		  mdoc_nwarn(m, n, t) \
		  mdoc_err((m), (n)->line, (n)->pos, 1, (t))
@


1.12
log
@sync to 1.7.23: pass error code to mdoc_perr() instead of error string
and use the so improved mdoc_nerr() at many places;
get rid of now unused static functions perr()
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.11 2009/07/12 21:08:29 schwarze Exp $ */
a120 3
int		  mdoc_warn(struct mdoc *, enum mdoc_warn, const char *, ...);
int		  mdoc_pwarn(struct mdoc *, int, int,
			enum mdoc_warn,const char *, ...);
d123 2
d127 2
@


1.11
log
@sync to 1.7.23: pass error code to mdoc_nerr() instead of error string
and use the so improved mdoc_nerr() at many places
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.10 2009/07/12 20:30:27 schwarze Exp $ */
d124 2
a125 1
int		  mdoc_perr(struct mdoc *, int, int, const char *, ...);
@


1.10
log
@sync to 1.7.23: unify the various "enum merr" into libman.h and libmdoc.h,
use it as a new argument to mdoc_err(), the same way as for for man_err(),
and use string tables instead of switch statements to select error messages
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.9 2009/07/12 19:05:52 schwarze Exp $ */
a120 6
/* 
 * When GCC2 is deprecated, most of these can be reverted to #define
 * as mdoc_vXXX using __VA_ARGS__.  Until then, use real functions.
 */
int		  mdoc_nerr(struct mdoc *, const struct mdoc_node *,
			const char *, ...);
d125 2
@


1.9
log
@sync to 1.7.23: third step to get rid of enum mdoc_warn:
mdoc_verr is not using enum mdoc_warn, so use it at a few more places
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.8 2009/07/12 18:35:57 schwarze Exp $ */
d44 58
a127 1
int		  mdoc_err(struct mdoc *, const char *, ...);
d132 1
@


1.8
log
@sync to 1.7.23: second step to get rid of enum mdoc_warn:
remove type from mdoc_vwarn arguments, and use this function where apropriate
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.7 2009/06/19 07:20:19 schwarze Exp $ */
a66 2
int		  mdoc_verr(struct mdoc *, int, int, 
			const char *, ...);
d75 1
@


1.7
log
@sync to 1.7.19: more elegant section handling
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.6 2009/06/18 22:16:56 schwarze Exp $ */
a66 2
int		  mdoc_vwarn(struct mdoc *, int, int, 
			enum mdoc_warn, const char *, ...);
d76 3
@


1.6
log
@complete sync to 1.7.17: garbage collect unused functions
mdoc_msg, mdoc_pmsg, mdoc_vmsg, and mdoc_nwarn
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.5 2009/06/15 18:41:13 schwarze Exp $ */
d32 3
a34 2
#define	MDOC_HALT	 (1 << 0)
#define	MDOC_LITERAL	 (1 << 1)
@


1.5
log
@bring back miod@@'s "real functions" patch (rev. 1.2)
which was erroneously backed out in rev. 1.4, sorry;
ok kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.4 2009/06/15 02:19:32 schwarze Exp $ */
d62 4
a67 2
void		  mdoc_vmsg(struct mdoc *, int, int, 
			const char *, ...);
a69 2
int		  mdoc_nwarn(struct mdoc *, const struct mdoc_node *,
			enum mdoc_warn, const char *, ...);
a73 2
void		  mdoc_msg(struct mdoc *, const char *, ...);
void		  mdoc_pmsg(struct mdoc *, int, int, const char *, ...);
@


1.4
log
@sync to 1.7.16:
reduce code duplication in warning and error reporting functions
while here, garbage collect three unused function prototypes
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.3 2009/06/14 23:00:57 schwarze Exp $ */
a57 32
#define	mdoc_nwarn(mdoc, node, type, fmt, ...) \
		  mdoc_vwarn((mdoc), (node)->line, \
		  (node)->pos, (type), (fmt), ##__VA_ARGS__)

#define	mdoc_nerr(mdoc, node, fmt, ...) \
		  mdoc_verr((mdoc), (node)->line, \
		  (node)->pos, (fmt), ##__VA_ARGS__)

#define	mdoc_warn(mdoc, type, fmt, ...) \
		  mdoc_vwarn((mdoc), (mdoc)->last->line, \
		  (mdoc)->last->pos, (type), (fmt), ##__VA_ARGS__)

#define	mdoc_err(mdoc, fmt, ...) \
		  mdoc_verr((mdoc), (mdoc)->last->line, \
		  (mdoc)->last->pos, (fmt), ##__VA_ARGS__)

#define	mdoc_msg(mdoc, fmt, ...) \
		  mdoc_vmsg((mdoc), (mdoc)->last->line, \
		  (mdoc)->last->pos, (fmt), ##__VA_ARGS__)

#define	mdoc_pmsg(mdoc, line, pos, fmt, ...) \
		  mdoc_vmsg((mdoc), (line), \
	  	  (pos), (fmt), ##__VA_ARGS__)

#define	mdoc_pwarn(mdoc, line, pos, type, fmt, ...) \
		  mdoc_vwarn((mdoc), (line), \
	  	  (pos), (type), (fmt), ##__VA_ARGS__)

#define	mdoc_perr(mdoc, line, pos, fmt, ...) \
		  mdoc_verr((mdoc), (line), \
	  	  (pos), (fmt), ##__VA_ARGS__)

d68 11
@


1.3
log
@sync to 1.7.16: comments, whitespace and spelling fixes; no functional change
@
text
@d1 1
a1 1
/*	$Id: libmdoc.h,v 1.7 2009/06/10 20:18:43 kristaps Exp $ */
d58 32
a99 11
int		  mdoc_nwarn(struct mdoc *, const struct mdoc_node *,
			enum mdoc_warn, const char *, ...);
int		  mdoc_nerr(struct mdoc *, const struct mdoc_node *,
			const char *, ...);
int		  mdoc_warn(struct mdoc *, enum mdoc_warn, const char *, ...);
int		  mdoc_err(struct mdoc *, const char *, ...);
void		  mdoc_msg(struct mdoc *, const char *, ...);
void		  mdoc_pmsg(struct mdoc *, int, int, const char *, ...);
int		  mdoc_pwarn(struct mdoc *, int, int,
			enum mdoc_warn,const char *, ...);
int		  mdoc_perr(struct mdoc *, int, int, const char *, ...);
a146 4
/* FIXME: get rid of these. */
int		  xstrlcpys(char *, const struct mdoc_node *, size_t);
void	 	 *xrealloc(void *, size_t);
char	 	 *xstrdup(const char *);
@


1.2
log
@Replace variadic macros with real functions, so that this compiles on
platforms still using gcc 2.
ok deraadt@@
@
text
@d1 1
a1 1
/* $Id: libmdoc.h,v 1.1 2009/04/06 20:30:40 kristaps Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@openbsd.org>
d6 2
a7 3
 * purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all
 * copies.
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
@


1.1
log
@Initial check-in of mandoc for formatting manuals. ok deraadt@@
@
text
@d1 1
a1 1
/* $Id: libmdoc.h,v 1.4 2009/04/02 06:51:44 kristaps Exp $ */
a59 32
#define	mdoc_nwarn(mdoc, node, type, fmt, ...) \
		  mdoc_vwarn((mdoc), (node)->line, \
		  (node)->pos, (type), (fmt), ##__VA_ARGS__)

#define	mdoc_nerr(mdoc, node, fmt, ...) \
		  mdoc_verr((mdoc), (node)->line, \
		  (node)->pos, (fmt), ##__VA_ARGS__)

#define	mdoc_warn(mdoc, type, fmt, ...) \
		  mdoc_vwarn((mdoc), (mdoc)->last->line, \
		  (mdoc)->last->pos, (type), (fmt), ##__VA_ARGS__)

#define	mdoc_err(mdoc, fmt, ...) \
		  mdoc_verr((mdoc), (mdoc)->last->line, \
		  (mdoc)->last->pos, (fmt), ##__VA_ARGS__)

#define	mdoc_msg(mdoc, fmt, ...) \
		  mdoc_vmsg((mdoc), (mdoc)->last->line, \
		  (mdoc)->last->pos, (fmt), ##__VA_ARGS__)

#define	mdoc_pmsg(mdoc, line, pos, fmt, ...) \
		  mdoc_vmsg((mdoc), (line), \
	  	  (pos), (fmt), ##__VA_ARGS__)

#define	mdoc_pwarn(mdoc, line, pos, type, fmt, ...) \
		  mdoc_vwarn((mdoc), (line), \
	  	  (pos), (type), (fmt), ##__VA_ARGS__)

#define	mdoc_perr(mdoc, line, pos, fmt, ...) \
		  mdoc_verr((mdoc), (line), \
	  	  (pos), (fmt), ##__VA_ARGS__)

d70 11
@

