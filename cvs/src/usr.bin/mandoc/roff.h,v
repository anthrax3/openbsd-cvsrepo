head	1.22;
access;
symbols
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.22
date	2017.02.16.02.59.42;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	Qmey25xun8rVuoB9;

1.21
date	2017.01.10.13.46.53;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	aFt8sLe7F06PjFYh;

1.20
date	2017.01.10.12.54.28;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	vzXxeQWxUqXTMW9w;

1.19
date	2016.01.08.17.48.04;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	DoGoemryKYV644MI;

1.18
date	2015.11.07.13.57.55;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	UKwSq7JMt0q6KNpK;

1.17
date	2015.10.17.00.19.58;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	67CJSTzbNGkiWCoU;

1.16
date	2015.04.23.16.17.04;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	DWHgiJTn6DvDpekX;

1.15
date	2015.04.19.13.59.37;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	aS3h5dIgZk0f7675;

1.14
date	2015.04.18.16.34.03;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	PxhkeHVIvdTMOTs6;

1.13
date	2015.04.18.16.04.40;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	6MYJ7cd8mhJ77AGH;

1.12
date	2015.04.02.23.47.43;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	RJFkOLiS9gBqEEDl;

1.11
date	2015.04.02.22.06.17;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	Rfx1oTaH3hZ7Zcyf;

1.10
date	2015.04.02.21.03.18;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	lmErjWY2O9ooA6RY;

1.9
date	2011.04.24.16.22.02;	author schwarze;	state dead;
branches;
next	1.8;

1.8
date	2011.03.20.23.36.42;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.04.22.28.17;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.25.22.23.31;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.26.22.28.57;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2010.08.20.00.53.35;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.27.21.54.42;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.20.00.58.02;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.16.00.54.03;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove the ENDBODY_NOSPACE flag, simplifying the code.

Comparing to groff output, it appears that all cases where it was used
and made a difference actually require the opposite, ENDBODY_SPACE.

I have no idea why i added it back in 2010; maybe to compensate for
some other bug that has long been fixed.
@
text
@/*	$OpenBSD: roff.h,v 1.21 2017/01/10 13:46:53 schwarze Exp $	*/
/*
 * Copyright (c) 2008, 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2013, 2014, 2015, 2017 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

struct	mdoc_arg;
union	mdoc_data;

enum	roff_macroset {
	MACROSET_NONE = 0,
	MACROSET_MDOC,
	MACROSET_MAN
};

enum	roff_sec {
	SEC_NONE = 0,
	SEC_NAME,
	SEC_LIBRARY,
	SEC_SYNOPSIS,
	SEC_DESCRIPTION,
	SEC_CONTEXT,
	SEC_IMPLEMENTATION,	/* IMPLEMENTATION NOTES */
	SEC_RETURN_VALUES,
	SEC_ENVIRONMENT,
	SEC_FILES,
	SEC_EXIT_STATUS,
	SEC_EXAMPLES,
	SEC_DIAGNOSTICS,
	SEC_COMPATIBILITY,
	SEC_ERRORS,
	SEC_SEE_ALSO,
	SEC_STANDARDS,
	SEC_HISTORY,
	SEC_AUTHORS,
	SEC_CAVEATS,
	SEC_BUGS,
	SEC_SECURITY,
	SEC_CUSTOM,
	SEC__MAX
};

enum	roff_type {
	ROFFT_ROOT,
	ROFFT_BLOCK,
	ROFFT_HEAD,
	ROFFT_BODY,
	ROFFT_TAIL,
	ROFFT_ELEM,
	ROFFT_TEXT,
	ROFFT_TBL,
	ROFFT_EQN
};

enum	roff_next {
	ROFF_NEXT_SIBLING = 0,
	ROFF_NEXT_CHILD
};

/*
 * Indicates that a BODY's formatting has ended, but
 * the scope is still open.  Used for badly nested blocks.
 */
enum	mdoc_endbody {
	ENDBODY_NOT = 0,
	ENDBODY_SPACE	/* Is broken: append a space. */
};

struct	roff_node {
	struct roff_node *parent;  /* Parent AST node. */
	struct roff_node *child;   /* First child AST node. */
	struct roff_node *last;    /* Last child AST node. */
	struct roff_node *next;    /* Sibling AST node. */
	struct roff_node *prev;    /* Prior sibling AST node. */
	struct roff_node *head;    /* BLOCK */
	struct roff_node *body;    /* BLOCK/ENDBODY */
	struct roff_node *tail;    /* BLOCK */
	struct mdoc_arg	 *args;    /* BLOCK/ELEM */
	union mdoc_data	 *norm;    /* Normalized arguments. */
	char		 *string;  /* TEXT */
	const struct tbl_span *span; /* TBL */
	const struct eqn *eqn;	   /* EQN */
	int		  line;    /* Input file line number. */
	int		  pos;     /* Input file column number. */
	int		  tok;     /* Request or macro ID. */
#define	TOKEN_NONE	 (-1)	   /* No request or macro. */
	int		  flags;
#define	NODE_VALID	 (1 << 0)  /* Has been validated. */
#define	NODE_ENDED	 (1 << 1)  /* Gone past body end mark. */
#define	NODE_EOS	 (1 << 2)  /* At sentence boundary. */
#define	NODE_LINE	 (1 << 3)  /* First macro/text on line. */
#define	NODE_SYNPRETTY	 (1 << 4)  /* SYNOPSIS-style formatting. */
#define	NODE_BROKEN	 (1 << 5)  /* Must validate parent when ending. */
#define	NODE_DELIMO	 (1 << 6)
#define	NODE_DELIMC	 (1 << 7)
#define	NODE_NOSRC	 (1 << 8)  /* Generated node, not in input file. */
#define	NODE_NOPRT	 (1 << 9)  /* Shall not print anything. */
	int		  prev_font; /* Before entering this node. */
	int		  aux;     /* Decoded node data, type-dependent. */
	enum roff_type	  type;    /* AST node type. */
	enum roff_sec	  sec;     /* Current named section. */
	enum mdoc_endbody end;     /* BODY */
};

struct	roff_meta {
	char		 *msec;    /* Manual section, usually a digit. */
	char		 *vol;     /* Manual volume title. */
	char		 *os;      /* Operating system. */
	char		 *arch;    /* Machine architecture. */
	char		 *title;   /* Manual title, usually CAPS. */
	char		 *name;    /* Leading manual name. */
	char		 *date;    /* Normalized date. */
	int		  hasbody; /* Document is not empty. */
};

struct	roff_man {
	struct roff_meta  meta;    /* Document meta-data. */
	struct mparse	 *parse;   /* Parse pointer. */
	struct roff	 *roff;    /* Roff parser state data. */
	const char	 *defos;   /* Default operating system. */
	struct roff_node *first;   /* The first node parsed. */
	struct roff_node *last;    /* The last node parsed. */
	struct roff_node *last_es; /* The most recent Es node. */
	int		  quick;   /* Abort parse early. */
	int		  flags;   /* Parse flags. */
#define	MDOC_LITERAL	 (1 << 1)  /* In a literal scope. */
#define	MDOC_PBODY	 (1 << 2)  /* In the document body. */
#define	MDOC_NEWLINE	 (1 << 3)  /* First macro/text in a line. */
#define	MDOC_PHRASE	 (1 << 4)  /* In a Bl -column phrase. */
#define	MDOC_PHRASELIT	 (1 << 5)  /* Literal within a phrase. */
#define	MDOC_FREECOL	 (1 << 6)  /* `It' invocation should close. */
#define	MDOC_SYNOPSIS	 (1 << 7)  /* SYNOPSIS-style formatting. */
#define	MDOC_KEEP	 (1 << 8)  /* In a word keep. */
#define	MDOC_SMOFF	 (1 << 9)  /* Spacing is off. */
#define	MDOC_NODELIMC	 (1 << 10) /* Disable closing delimiter handling. */
#define	MAN_ELINE	 (1 << 11) /* Next-line element scope. */
#define	MAN_BLINE	 (1 << 12) /* Next-line block scope. */
#define	MDOC_PHRASEQF	 (1 << 13) /* Quote first word encountered. */
#define	MDOC_PHRASEQL	 (1 << 14) /* Quote last word of this phrase. */
#define	MDOC_PHRASEQN	 (1 << 15) /* Quote first word of the next phrase. */
#define	MAN_LITERAL	  MDOC_LITERAL
#define	MAN_NEWLINE	  MDOC_NEWLINE
	enum roff_macroset macroset; /* Kind of high-level macros used. */
	enum roff_sec	  lastsec; /* Last section seen. */
	enum roff_sec	  lastnamed; /* Last standard section seen. */
	enum roff_next	  next;    /* Where to put the next node. */
};


void		 deroff(char **, const struct roff_node *);
@


1.21
log
@unify names of AST node flags; no change of cpp output
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.20 2017/01/10 12:54:28 schwarze Exp $	*/
d78 1
a78 2
	ENDBODY_SPACE,	/* Is broken: append a space. */
	ENDBODY_NOSPACE	/* Is broken: don't append a space. */
@


1.20
log
@Introduce flags NODE_NOSRC and NODE_NOPRT for AST nodes.
Use them to mark generated nodes and nodes that shall not produce output.
Let -Ttree output mode display these new flags.
Use NODE_NOSRC for .Ar, .Mt, and .Pa default arguments.
Use NODE_NOPRT for .Dd, .Dt, and .Os.

These will help to make handling of text production macros more rigorous.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.19 2016/01/08 17:48:04 schwarze Exp $	*/
d101 8
a108 11
#define	MDOC_VALID	 (1 << 0)  /* Has been validated. */
#define	MDOC_ENDED	 (1 << 1)  /* Gone past body end mark. */
#define MDOC_EOS	 (1 << 2)  /* At sentence boundary. */
#define	MDOC_LINE	 (1 << 3)  /* First macro/text on line. */
#define MDOC_SYNPRETTY	 (1 << 4)  /* SYNOPSIS-style formatting. */
#define MDOC_BROKEN	 (1 << 5)  /* Must validate parent when ending. */
#define	MDOC_DELIMO	 (1 << 6)
#define	MDOC_DELIMC	 (1 << 7)
#define	MAN_VALID	  MDOC_VALID
#define	MAN_EOS		  MDOC_EOS
#define	MAN_LINE	  MDOC_LINE
@


1.19
log
@Delete the redundant "nchild" member of struct roff_node, replacing
most uses by one, a few by two pointer checks, and only one by a
tiny loop - not only making data smaller, but code shorter as well.

This gets rid of an implicit invariant that confused both static
analysis tools and human auditors.  No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.18 2015/11/07 13:57:55 schwarze Exp $	*/
d4 1
a4 1
 * Copyright (c) 2013, 2014, 2015 Ingo Schwarze <schwarze@@openbsd.org>
d112 2
@


1.18
log
@In private header files, __BEGIN_DECLS and __END_DECLS are pointless.
Because these work slightly differently on different systems,
they are becoming a maintenance burden in the portable version,
so delete them.

Besides, one of the chief design goals of the mandoc toolbox is to
make sure that nothing related to documentation requires C++.
Consequently, linking mandoc against any kind of C++ program would
defeat the purpose and is not supported.
I don't understand why kristaps@@ added them in the first place.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.17 2015/10/17 00:19:58 schwarze Exp $	*/
a95 1
	int		  nchild;  /* Number of child nodes. */
@


1.17
log
@Very tricky diff to fix macro interpretation and spacing around tabs
in .Bl -column; it took me more than a day to get this right.
Triggered by a loosely related bug report from tim@@.

The lesson for you is:  Use .Ta macros in .Bl -column, avoid tabs,
or you are in for surprises:  The last word before a tab is not
interpreted as a macro (unless there is a blank in between), the
first word after a tab isn't either (unless there is a blank in
between), and a blank after a tab causes a leading blank in the
respective output cell.  Yes, "blank", "tab", "blank tab" and "tab
blank" all have different semantics; if you write code relying on
that, good luck maintaining it afterwards...
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.16 2015/04/23 16:17:04 schwarze Exp $	*/
a163 1
__BEGIN_DECLS
a165 2

__END_DECLS
@


1.16
log
@Unify mdoc_deroff() and man_deroff() into a common function deroff().
No functional change except that for mdoc(7), it now skips leading
escape sequences just like it already did for man(7).
Escape sequences rarely occur in mdoc(7) code and if they do,
skipping them is an improvement in this context.
Minus 30 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.15 2015/04/19 13:59:37 schwarze Exp $	*/
d144 2
a145 2
#define	MDOC_PHRASELIT	 (1 << 4)  /* Literal within a partial phrase. */
#define	MDOC_PPHRASE	 (1 << 5)  /* Within a partial phrase. */
d153 3
@


1.15
log
@Decouple the token code for "no request or macro" from the individual
high-level parsers to allow further unification of functions that
only need to recognize this code, but that don't care about different
high-level macrosets beyond that.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.14 2015/04/18 16:34:03 schwarze Exp $	*/
d160 6
@


1.14
log
@Profit from the unified struct roff_man and reduce the number of
arguments of mparse_result() by one.  No functional change.
Written on the ICE Bruxelles-Koeln on the way back from p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.13 2015/04/18 16:04:40 schwarze Exp $	*/
d100 1
@


1.13
log
@Replace the structs mdoc and man by a unified struct roff_man.
Almost completely mechanical, no functional change.
Written on the train from Exeter to London returning from p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.12 2015/04/02 23:47:43 schwarze Exp $	*/
d22 6
d154 1
@


1.12
log
@Third step towards parser unification:
Replace struct mdoc_meta and struct man_meta by a unified struct roff_meta.
Written of the train from London to Exeter on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.11 2015/04/02 22:06:17 schwarze Exp $	*/
d4 1
a4 1
 * Copyright (c) 2014, 2015 Ingo Schwarze <schwarze@@openbsd.org>
d61 5
d122 29
@


1.11
log
@Second step towards parser unification:
Replace struct mdoc_node and struct man_node by a unified struct roff_node.
To be able to use the tok member for both mdoc(7) and man(7) without
defining all the macros in roff.h, sacrifice a tiny bit of type safety
and make tok an int rather than an enum.
Almost mechanical, no functional change.
Written on the Eurostar from Bruxelles to London on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: roff.h,v 1.10 2015/04/02 21:03:18 schwarze Exp $	*/
d106 11
@


1.10
log
@First step towards parser unification:
Replace enum mdoc_type and enum man_type by a unified enum roff_type.
Almost mechanical, no functional change.
Written on the ICE train from Frankfurt to Bruxelles on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 30
d59 47
@


1.9
log
@Merge version 1.11.1:
Again lots of cleanup and maintenance work by kristaps@@.
- simplify error reporting: less function pointers, more mandoc_[v]msg
- main: split document parsing out of main.c into read.c
- roff, mdoc, man: improved recognition of control characters
- roff: better handling of if/else stack overflows
- roff: add some predefined strings for backward compatibility
- mdoc, man: empty sections are not errors
- mdoc: move delimiter handling to libmdoc
- some header restructuring and some minor features and fixes
This merge causes two minor regressions
that i will fix in separate commits right afterwards.
@
text
@d1 1
a1 1
/*	$Id: roff.h,v 1.8 2011/03/20 23:36:42 schwarze Exp $ */
d3 2
a4 1
 * Copyright (c) 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
d10 1
a10 1
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
d12 1
a12 1
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
a17 2
#ifndef ROFF_H
#define ROFF_H
d19 10
a28 10
enum	rofferr {
	ROFF_CONT, /* continue processing line */
	ROFF_RERUN, /* re-run roff interpreter with offset */
	ROFF_APPEND, /* re-run main parser, appending next line */
	ROFF_REPARSE, /* re-run main parser on the result */
	ROFF_SO, /* include another file */
	ROFF_IGN, /* ignore current line */
	ROFF_TBL, /* a table row was successfully parsed */
	ROFF_EQN, /* an equation was successfully parsed */
	ROFF_ERR /* badness: puke and stop */
a29 17

__BEGIN_DECLS

struct	roff;

void	 	  roff_free(struct roff *);
struct	roff	 *roff_alloc(struct regset *, void *, mandocmsg);
void		  roff_reset(struct roff *);
enum	rofferr	  roff_parseln(struct roff *, int, 
			char **, size_t *, int, int *);
void		  roff_endparse(struct roff *);
const struct tbl_span *roff_span(const struct roff *);
const struct eqn *roff_eqn(const struct roff *);

__END_DECLS

#endif /*!ROFF_H*/
@


1.8
log
@Import the foundation for eqn(7) support.
Written by kristaps@@.

For now, i'm adding one line to each of the four frontends
to just pass the input text through to the output,
not yet interpreting any of then eqn keywords.
@
text
@d1 1
a1 1
/*	$Id: roff.h,v 1.7 2011/01/04 22:28:17 schwarze Exp $ */
@


1.7
log
@Merge kristaps@@' cleaner tbl integration, removing mine;
there are still a few bugs, but fixing these will be easier in tree.
@
text
@d1 1
a1 1
/*	$Id: roff.h,v 1.6 2010/11/25 22:23:31 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
d28 1
d43 1
@


1.6
log
@Implement the .de (define macro) roff instruction.
This fixes various Xenocara manuals.
Do not define your own macros in new manuals, though:
this code exists purely to cope with existing and old stuff.

Like in both traditional and GNU roff, the .de and .ds (define string)
roff instructions share the same string table, so one can abuse strings
as macros and vice versa.  This implementation supports multi-line
user-defined macros and user-defined macros taking up to 9 arguments.

Project started near the end of p2k10, now mature for production,
but there is still room for future improvements in various respects.
@
text
@d1 1
a1 1
/*	$Id: roff.h,v 1.5 2010/10/26 22:28:57 schwarze Exp $ */
d27 1
d40 2
a41 1
int		  roff_endparse(struct roff *);
@


1.5
log
@Support .so (low-level roff "switch source file"),
needed for Xenocara and various ports.
Accept only relative paths and no ascension to the parent directory
as suggested by Joerg Sonnenberger; code looked over by Joerg, too.
Useful discussions with various people, among others espie@@.
@
text
@d1 1
a1 1
/*	$Id: roff.h,v 1.4 2010/08/20 00:53:35 schwarze Exp $ */
d23 2
@


1.4
log
@Implement a simple, consistent user interface for error handling.
We now have sufficient practical experience to know what we want,
so this is intended to be final:
- provide -Wlevel (warning, error or fatal) to select what you care about
- provide -Wstop to stop after parsing a file with warnings you care about
- provide consistent exit status codes for those warnings you care about
- fully document what warnings, errors and fatal errors mean
- remove all other cruft from the user interface, less is more:
- remove all -f knobs along with the whole -f option
- remove the old -Werror because calling warnings "fatal" is silly
- always finish parsing each file, unless fatal errors prevent that
This commit also includes a couple of related simplifications behind
the scenes regarding error handling.
Feedback and OK  kristaps@@;  Joerg Sonnenberger (NetBSD) and
Sascha Wildner (DragonFly BSD) agree with the general direction.
@
text
@d1 1
a1 1
/*	$Id: roff.h,v 1.3 2010/06/27 21:54:42 schwarze Exp $ */
d23 1
@


1.3
log
@Full .nr nS support, unbreaking the kernel manuals.

Kristaps coded this from scratch after reading my .nr patch;
it is simpler and more powerful.

Registers live in struct regset in regs.h, struct man and struct mdoc
contain pointers to it.  The nS register is cleared when parsing .Sh.
Frontends respect the MDOC_SYNPRETTY flag set in mdoc node_alloc.
@
text
@d1 1
a1 1
/*	$Id: roff.h,v 1.2 2010/05/20 00:58:02 schwarze Exp $ */
d32 1
a32 1
struct	roff	 *roff_alloc(struct regset *, mandocmsg, void *);
@


1.2
log
@Support nested roff instructions:
* allow roff_parseln() to be re-run
* allow roff_parseln() to manipulate the line buffer offset
* support the offset in the man and mdoc libraries
* adapt .if, .ie, .el, .ig, .am* and .de* support
* interpret some instructions even in conditional-negative context
Coded by kristaps during the last day of the mandoc hackathon.

To avoid regressions in the OpenBSD tree, commit this together
with some small local additions:
* detect roff block end "\}" even on macro lines
* actually implement the ".if n" conditional
* ignore .ds, .rm and .tr in libroff

Also back my old .if/.ie/.el-handling out of libman, reverting:
man.h 1.15 man.c 1.25 man_macro.c 1.15 man_validate.c 1.19
man_action.c 1.15 man_term.c 1.28 man_html.c 1.9.
@
text
@d1 1
a1 1
/*	$Id: roff.h,v 1.1 2010/05/16 00:54:03 schwarze Exp $ */
d32 1
a32 1
struct	roff	 *roff_alloc(mandocmsg, void *);
@


1.1
log
@In theory, Kristaps never intended to write a roff parser,
but in practice, most real legacy man(7)uals are using so much
low level roff that we can't really get away without at least
partially handling some roff instructions.

As doing this in man(7) only has become messy and as even some
mdoc(7) pages need it, start a minimal partial roff preprocessor.
As a first step, move handling of .am[i], .de[i] and .ig there.
Do not use the roff preprocessor for new manuals!

Now that we have three main parser libraries - roff, man and mdoc -
each one having its own error handling is becoming messy, too.
Thus, start unifying message handling in one central place,
introducing a new generic function mmsg().

coded by kristaps@@
@
text
@d1 1
a1 1
/*	$Id$ */
d21 4
a24 3
	ROFF_CONT, /* re-process line with libmdoc or libman */
	ROFF_IGN, /* ignore line */
	ROFF_ERR, /* badness */
d34 2
a35 1
enum	rofferr	  roff_parseln(struct roff *, int, char **, size_t *);
@

