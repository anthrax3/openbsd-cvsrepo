head	1.12;
access;
symbols
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.12
date	2017.07.08.14.51.01;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	Gn9C5KmUiz1MgVXP;

1.11
date	2017.07.05.15.03.20;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	zLikkELVVpcrsPcx;

1.10
date	2017.06.23.22.59.27;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	eVKefR4C2zgOZ8bs;

1.9
date	2017.06.23.02.31.39;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	5Ey5XxywubUI8LwI;

1.8
date	2017.06.20.17.24.09;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	0zrcQOD2y2LNXh12;

1.7
date	2017.01.17.01.47.46;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	Nv06v3QGWa6dYYKr;

1.6
date	2014.10.12.19.10.56;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	oFUg4cCWEgutyqUr;

1.5
date	2014.10.10.15.25.06;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	MpqXOG3dhTX11YQI;

1.4
date	2014.10.09.15.59.08;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	Wy6YFSKH1ddfqJiG;

1.3
date	2014.10.09.15.49.09;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	iJNkkDSk2T9uwIBd;

1.2
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.18.10.25.28;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.12
log
@1. Eliminate struct eqn, instead use the existing members
of struct roff_node which is allocated for each equation anyway.
2. Do not keep a list of equation parsers, one parser is enough.
Minus fifty lines of code, no functional change.
@
text
@/*	$OpenBSD: eqn_html.c,v 1.11 2017/07/05 15:03:20 schwarze Exp $ */
/*
 * Copyright (c) 2011, 2014 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2017 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/types.h>

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "mandoc.h"
#include "out.h"
#include "html.h"

static void
eqn_box(struct html *p, const struct eqn_box *bp)
{
	struct tag	*post, *row, *cell, *t;
	const struct eqn_box *child, *parent;
	const char	*cp;
	size_t		 i, j, rows;
	enum htmltag	 tag;
	enum eqn_fontt	 font;

	if (NULL == bp)
		return;

	post = NULL;

	/*
	 * Special handling for a matrix, which is presented to us in
	 * column order, but must be printed in row-order.
	 */
	if (EQN_MATRIX == bp->type) {
		if (NULL == bp->first)
			goto out;
		if (bp->first->type != EQN_LIST ||
		    bp->first->expectargs == 1) {
			eqn_box(p, bp->first);
			goto out;
		}
		if (NULL == (parent = bp->first->first))
			goto out;
		/* Estimate the number of rows, first. */
		if (NULL == (child = parent->first))
			goto out;
		for (rows = 0; NULL != child; rows++)
			child = child->next;
		/* Print row-by-row. */
		post = print_otag(p, TAG_MTABLE, "");
		for (i = 0; i < rows; i++) {
			parent = bp->first->first;
			row = print_otag(p, TAG_MTR, "");
			while (NULL != parent) {
				child = parent->first;
				for (j = 0; j < i; j++) {
					if (NULL == child)
						break;
					child = child->next;
				}
				cell = print_otag(p, TAG_MTD, "");
				/*
				 * If we have no data for this
				 * particular cell, then print a
				 * placeholder and continue--don't puke.
				 */
				if (NULL != child)
					eqn_box(p, child->first);
				print_tagq(p, cell);
				parent = parent->next;
			}
			print_tagq(p, row);
		}
		goto out;
	}

	switch (bp->pos) {
	case EQNPOS_TO:
		post = print_otag(p, TAG_MOVER, "");
		break;
	case EQNPOS_SUP:
		post = print_otag(p, TAG_MSUP, "");
		break;
	case EQNPOS_FROM:
		post = print_otag(p, TAG_MUNDER, "");
		break;
	case EQNPOS_SUB:
		post = print_otag(p, TAG_MSUB, "");
		break;
	case EQNPOS_OVER:
		post = print_otag(p, TAG_MFRAC, "");
		break;
	case EQNPOS_FROMTO:
		post = print_otag(p, TAG_MUNDEROVER, "");
		break;
	case EQNPOS_SUBSUP:
		post = print_otag(p, TAG_MSUBSUP, "");
		break;
	case EQNPOS_SQRT:
		post = print_otag(p, TAG_MSQRT, "");
		break;
	default:
		break;
	}

	if (bp->top || bp->bottom) {
		assert(NULL == post);
		if (bp->top && NULL == bp->bottom)
			post = print_otag(p, TAG_MOVER, "");
		else if (bp->top && bp->bottom)
			post = print_otag(p, TAG_MUNDEROVER, "");
		else if (bp->bottom)
			post = print_otag(p, TAG_MUNDER, "");
	}

	if (EQN_PILE == bp->type) {
		assert(NULL == post);
		if (bp->first != NULL &&
		    bp->first->type == EQN_LIST &&
		    bp->first->expectargs > 1)
			post = print_otag(p, TAG_MTABLE, "");
	} else if (bp->type == EQN_LIST && bp->expectargs > 1 &&
	    bp->parent && bp->parent->type == EQN_PILE) {
		assert(NULL == post);
		post = print_otag(p, TAG_MTR, "");
		print_otag(p, TAG_MTD, "");
	}

	if (bp->text != NULL) {
		assert(post == NULL);
		tag = TAG_MI;
		cp = bp->text;
		if (isdigit((unsigned char)cp[0]) ||
		    (cp[0] == '.' && isdigit((unsigned char)cp[1]))) {
			tag = TAG_MN;
			while (*++cp != '\0') {
				if (*cp != '.' &&
				    isdigit((unsigned char)*cp) == 0) {
					tag = TAG_MI;
					break;
				}
			}
		} else if (*cp != '\0' && isalpha((unsigned char)*cp) == 0) {
			tag = TAG_MO;
			while (*cp != '\0') {
				if (cp[0] == '\\' && cp[1] != '\0') {
					cp++;
					mandoc_escape(&cp, NULL, NULL);
				} else if (isalnum((unsigned char)*cp)) {
					tag = TAG_MI;
					break;
				} else
					cp++;
			}
		}
		font = bp->font;
		if (bp->text[0] != '\0' &&
		    (((tag == TAG_MN || tag == TAG_MO) &&
		      font == EQNFONT_ROMAN) ||
		     (tag == TAG_MI && font == (bp->text[1] == '\0' ?
		      EQNFONT_ITALIC : EQNFONT_ROMAN))))
			font = EQNFONT_NONE;
		switch (font) {
		case EQNFONT_NONE:
			post = print_otag(p, tag, "");
			break;
		case EQNFONT_ROMAN:
			post = print_otag(p, tag, "?", "fontstyle", "normal");
			break;
		case EQNFONT_BOLD:
		case EQNFONT_FAT:
			post = print_otag(p, tag, "?", "fontweight", "bold");
			break;
		case EQNFONT_ITALIC:
			post = print_otag(p, tag, "?", "fontstyle", "italic");
			break;
		default:
			abort();
		}
		print_text(p, bp->text);
	} else if (NULL == post) {
		if (NULL != bp->left || NULL != bp->right)
			post = print_otag(p, TAG_MFENCED, "??",
			    "open", bp->left == NULL ? "" : bp->left,
			    "close", bp->right == NULL ? "" : bp->right);
		if (NULL == post)
			post = print_otag(p, TAG_MROW, "");
		else
			print_otag(p, TAG_MROW, "");
	}

	eqn_box(p, bp->first);

out:
	if (NULL != bp->bottom) {
		t = print_otag(p, TAG_MO, "");
		print_text(p, bp->bottom);
		print_tagq(p, t);
	}
	if (NULL != bp->top) {
		t = print_otag(p, TAG_MO, "");
		print_text(p, bp->top);
		print_tagq(p, t);
	}

	if (NULL != post)
		print_tagq(p, post);

	eqn_box(p, bp->next);
}

void
print_eqn(struct html *p, const struct eqn_box *bp)
{
	struct tag	*t;

	t = print_otag(p, TAG_MATH, "c", "eqn");

	p->flags |= HTML_NONOSPACE;
	eqn_box(p, bp);
	p->flags &= ~HTML_NONOSPACE;

	print_tagq(p, t);
}
@


1.11
log
@The EQN_LISTONE box type is pointless.
Simplify by just using EQN_LIST with expectargs = 1.
Noticed while investigating a bug report from bentley@@.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_html.c,v 1.10 2017/06/23 22:59:27 schwarze Exp $ */
d228 1
a228 1
print_eqn(struct html *p, const struct eqn *ep)
d235 1
a235 1
	eqn_box(p, ep->root);
@


1.10
log
@Consistently treat character escape sequences as operators,
not as letters, even if their names contain letters.

This is certainly not perfect, but code to recognize that \(*a is
not an operator but a letter would need a huge table, or Unicode
character property support, which won't happen at this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_html.c,v 1.9 2017/06/23 02:31:39 schwarze Exp $ */
d52 2
a53 1
		if (EQN_LIST != bp->first->type) {
d133 3
a135 1
		if (bp->first != NULL && bp->first->type == EQN_LIST)
d137 1
a137 1
	} else if (bp->type == EQN_LIST &&
@


1.9
log
@Write text boxes as <mi>, <mn>, or <mo> as appropriate,
and write fontstyle or fontweight attributes where required.
Missing features reported by bentley@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_html.c,v 1.8 2017/06/20 17:24:09 schwarze Exp $ */
d35 1
a35 1
	const unsigned char *cp;
d144 3
a146 2
		cp = (unsigned char *)bp->text;
		if (isdigit(cp[0]) || (cp[0] == '.' && isdigit(cp[1]))) {
d149 2
a150 1
				if (*cp != '.' && !isdigit(*cp)) {
d155 1
a155 1
		} else if (*cp != '\0' && isalpha(*cp) == 0) {
d157 5
a161 2
			while (*++cp != '\0') {
				if (isalnum(*cp)) {
d164 2
a165 1
				}
@


1.8
log
@KNF: remove parentheses from switch case labels; no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_html.c,v 1.7 2017/01/17 01:47:46 schwarze Exp $ */
d21 1
d35 1
d37 2
d141 45
a185 3
	if (NULL != bp->text) {
		assert(NULL == post);
		post = print_otag(p, TAG_MI, "");
@


1.7
log
@Simplify the usage of print_otag() by making it accept a variable
number of arguments.

Delete struct htmlpair and all the PAIR_*() macros.
Delete enum htmlattr, handle that in print_otag() instead.

Minus 190 lines of code; no functional change except better ordering
of attributes (class before style) in three cases.
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_html.c,v 1.6 2014/10/12 19:10:56 schwarze Exp $ */
d88 1
a88 1
	case (EQNPOS_TO):
d91 1
a91 1
	case (EQNPOS_SUP):
d94 1
a94 1
	case (EQNPOS_FROM):
d97 1
a97 1
	case (EQNPOS_SUB):
d100 1
a100 1
	case (EQNPOS_OVER):
d103 1
a103 1
	case (EQNPOS_FROMTO):
d106 1
a106 1
	case (EQNPOS_SUBSUP):
d109 1
a109 1
	case (EQNPOS_SQRT):
@


1.6
log
@Improve error handling in the eqn(7) parser.
Get rid of the first fatal error, MANDOCERR_EQNSYNT.
In eqn(7), there is no need to be bug-compatible with groff, so there
is no need to abondon the whole equation in case of a syntax error.

In particular:
* Skip "back", "delim", "down", "fwd", "gfont", "gsize", "left",
  "right", "size", and "up" without arguments.
* Skip "gsize" and "size" with a non-numeric argument.
* Skip closing delimiters that are not open.
* Skip "above" outside piles.
* For diacritic marks and binary operators without a left operand,
  default to an empty box.
* Let piles and matrices take one argument rather than insisting
  on a braced list.  Let HTML output handle that, too.
* When rewinding, if the root box is guaranteed to match
  the termination condition, no error handling is needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: eqn_html.c,v 1.5 2014/10/10 15:25:06 schwarze Exp $ */
d4 1
a32 1
	struct htmlpair	 tag[2];
d60 1
a60 1
		post = print_otag(p, TAG_MTABLE, 0, NULL);
d63 1
a63 1
			row = print_otag(p, TAG_MTR, 0, NULL);
d71 1
a71 2
				cell = print_otag
					(p, TAG_MTD, 0, NULL);
d89 1
a89 1
		post = print_otag(p, TAG_MOVER, 0, NULL);
d92 1
a92 1
		post = print_otag(p, TAG_MSUP, 0, NULL);
d95 1
a95 1
		post = print_otag(p, TAG_MUNDER, 0, NULL);
d98 1
a98 1
		post = print_otag(p, TAG_MSUB, 0, NULL);
d101 1
a101 1
		post = print_otag(p, TAG_MFRAC, 0, NULL);
d104 1
a104 1
		post = print_otag(p, TAG_MUNDEROVER, 0, NULL);
d107 1
a107 1
		post = print_otag(p, TAG_MSUBSUP, 0, NULL);
d110 1
a110 1
		post = print_otag(p, TAG_MSQRT, 0, NULL);
d119 1
a119 1
			post = print_otag(p, TAG_MOVER, 0, NULL);
d121 1
a121 1
			post = print_otag(p, TAG_MUNDEROVER, 0, NULL);
d123 1
a123 1
			post = print_otag(p, TAG_MUNDER, 0, NULL);
d129 1
a129 1
			post = print_otag(p, TAG_MTABLE, 0, NULL);
d133 2
a134 2
		post = print_otag(p, TAG_MTR, 0, NULL);
		print_otag(p, TAG_MTD, 0, NULL);
d139 1
a139 1
		post = print_otag(p, TAG_MI, 0, NULL);
d142 4
a145 7
		if (NULL != bp->left || NULL != bp->right) {
			PAIR_INIT(&tag[0], ATTR_OPEN,
			    NULL == bp->left ? "" : bp->left);
			PAIR_INIT(&tag[1], ATTR_CLOSE,
			    NULL == bp->right ? "" : bp->right);
			post = print_otag(p, TAG_MFENCED, 2, tag);
		}
d147 1
a147 1
			post = print_otag(p, TAG_MROW, 0, NULL);
d149 1
a149 1
			print_otag(p, TAG_MROW, 0, NULL);
d156 1
a156 1
		t = print_otag(p, TAG_MO, 0, NULL);
d161 1
a161 1
		t = print_otag(p, TAG_MO, 0, NULL);
a174 1
	struct htmlpair	 tag;
d177 1
a177 2
	PAIR_CLASS_INIT(&tag, "eqn");
	t = print_otag(p, TAG_MATH, 1, &tag);
@


1.5
log
@Partial eqn(7) rewrite by kristaps@@ in order to get operator precedence right.
@
text
@d1 1
a1 1
/*	$OpenBSD$
d48 4
a51 1
		assert(EQN_LIST == bp->first->type);
a53 1
		assert(EQN_PILE == parent->type);
d129 4
a132 2
		post = print_otag(p, TAG_MTABLE, 0, NULL);
	} else if (bp->parent && EQN_PILE == bp->parent->type) {
@


1.4
log
@parse and render "from" and "to" clauses in eqn, and render matrices;
written by kristaps@@ during EuroBSDCon
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.3 2014/10/09 15:49:09 schwarze Exp $ */
d17 2
d28 2
a29 40
static	const enum htmltag fontmap[EQNFONT__MAX] = {
	TAG_SPAN, /* EQNFONT_NONE */
	TAG_SPAN, /* EQNFONT_ROMAN */
	TAG_B, /* EQNFONT_BOLD */
	TAG_B, /* EQNFONT_FAT */
	TAG_I /* EQNFONT_ITALIC */
};

static const struct eqn_box *
	eqn_box(struct html *, const struct eqn_box *, int);


void
print_eqn(struct html *p, const struct eqn *ep)
{
	struct htmlpair	 tag;
	struct tag	*t;

	PAIR_CLASS_INIT(&tag, "eqn");
	t = print_otag(p, TAG_MATH, 1, &tag);

	p->flags |= HTML_NONOSPACE;
	eqn_box(p, ep->root, 1);
	p->flags &= ~HTML_NONOSPACE;

	print_tagq(p, t);
}

/*
 * This function is fairly brittle.
 * This is because the eqn syntax doesn't play so nicely with recusive
 * formats, e.g.,
 *     foo sub bar sub baz
 * ...needs to resolve into
 *     <msub> foo <msub> bar, baz </msub> </msub>
 * In other words, we need to embed some recursive work.
 * FIXME: this does NOT handle right-left associativity or precedence!
 */
static const struct eqn_box *
eqn_box(struct html *p, const struct eqn_box *bp, int next)
d31 1
a31 1
	struct tag	*post, *pilet, *tmp;
d33 2
a34 1
	int		 skiptwo;
d37 1
a37 1
		return(NULL);
d39 1
a39 2
	post = pilet = NULL;
	skiptwo = 0;
d42 2
a43 4
	 * If we're a "row" under a pile, then open up the piling
	 * context here.
	 * We do this first because the pile surrounds the content of
	 * the contained expression.
d45 39
a83 8
	if (NULL != bp->parent && bp->parent->pile != EQNPILE_NONE) {
		pilet = print_otag(p, TAG_MTR, 0, NULL);
		print_otag(p, TAG_MTD, 0, NULL);
	}
	if (NULL != bp->parent && bp->parent->type == EQN_MATRIX) {
		pilet = print_otag(p, TAG_MTABLE, 0, NULL);
		print_otag(p, TAG_MTR, 0, NULL);
		print_otag(p, TAG_MTD, 0, NULL);
a85 17
	/*
	 * If we're establishing a pile, start the table mode now.
	 * If we've already in a pile row, then don't override "pilet",
	 * because we'll be closed out anyway.
	 */
	if (bp->pile != EQNPILE_NONE) {
		tmp = print_otag(p, TAG_MTABLE, 0, NULL);
		pilet = (NULL == pilet) ? tmp : pilet;
	}

	/*
	 * Positioning.
	 * This is the most complicated part, and actually doesn't quite
	 * work (FIXME) because it doesn't account for associativity.
	 * Setting "post" will mean that we're only going to process a
	 * single or double following expression.
	 */
a103 1
		skiptwo = 1;
d107 3
a109 1
		skiptwo = 1;
d115 18
a132 2
	/*t = EQNFONT_NONE == bp->font ? NULL :
	    print_otag(p, fontmap[(int)bp->font], 0, NULL);*/
d135 4
a138 36
		assert(NULL == bp->first);
		/*
		 * We have text.
		 * This can be a number, a function, a variable, or
		 * pretty much anything else.
		 * First, check for some known functions.
		 * If we're going to create a structural node (e.g.,
		 * sqrt), then set the "post" variable only if it's not
		 * already set.
		 */
		if (0 == strcmp(bp->text, "sqrt")) {
			tmp = print_otag(p, TAG_MSQRT, 0, NULL);
			post = (NULL == post) ? tmp : post;
		} else if (0 == strcmp(bp->text, "+") ||
			   0 == strcmp(bp->text, "-") ||
			   0 == strcmp(bp->text, "=") ||
			   0 == strcmp(bp->text, "(") ||
			   0 == strcmp(bp->text, ")") ||
			   0 == strcmp(bp->text, "/")) {
			tmp = print_otag(p, TAG_MO, 0, NULL);
			print_text(p, bp->text);
			print_tagq(p, tmp);
		} else {
			tmp = print_otag(p, TAG_MI, 0, NULL);
			print_text(p, bp->text);
			print_tagq(p, tmp);
		}
	} else if (NULL != bp->first) {
		assert(NULL == bp->text);
		/* 
		 * If we're a "fenced" component (i.e., having
		 * brackets), then process those brackets now.
		 * Otherwise, introduce a dummy row (if we're not
		 * already in a table context).
		 */
		tmp = NULL;
d141 1
a141 1
				NULL != bp->left ? bp->left : "");
d143 6
a148 2
				NULL != bp->right ? bp->right : "");
			tmp = print_otag(p, TAG_MFENCED, 2, tag);
a149 5
		} else if (NULL == pilet)
			tmp = print_otag(p, TAG_MROW, 0, NULL);
		eqn_box(p, bp->first, 1);
		if (NULL != tmp)
			print_tagq(p, tmp);
d152 15
a166 9
	/*
	 * If a positional context, invoke the "next" context.
	 * This is recursive and will return the end of the recursive
	 * chain of "next" contexts.
	 */
	if (NULL != post) {
		bp = eqn_box(p, bp->next, 0);
		if (skiptwo)
			bp = eqn_box(p, bp->next, 0);
a167 1
	}
d169 15
a183 6
	/* 
	 * If we're being piled (either directly, in the table, or
	 * indirectly in a table row), then close that out.
	 */
	if (NULL != pilet)
		print_tagq(p, pilet);
d185 1
a185 6
	/*
	 * If we're normally processing, then grab the next node.
	 * If we're in a recursive context, then don't seek to the next
	 * node; further recursion has already been handled.
	 */
	return(next ? eqn_box(p, bp->next, 1) : bp);
@


1.3
log
@initial bits of MathML rendering for eqn(7) -Thtml;
written by kristaps@@ during EuroBSDCon
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.2 2014/04/20 16:44:44 schwarze Exp $ */
d87 5
d111 3
d118 2
a119 1
		/* FALLTHROUGH */
d126 4
a130 1
		/* This requires two elements. */
@


1.2
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.1 2011/09/18 10:25:28 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
d34 2
a35 1
static void	eqn_box(struct html *, const struct eqn_box *);
d45 1
a45 1
	t = print_otag(p, TAG_SPAN, 1, &tag);
d48 1
a48 1
	eqn_box(p, ep->root);
d54 12
a65 2
static void
eqn_box(struct html *p, const struct eqn_box *bp)
d67 138
a204 21
	struct tag	*t;

	t = EQNFONT_NONE == bp->font ? NULL :
	    print_otag(p, fontmap[(int)bp->font], 0, NULL);

	if (bp->left)
		print_text(p, bp->left);

	if (bp->text)
		print_text(p, bp->text);

	if (bp->first)
		eqn_box(p, bp->first);

	if (NULL != t)
		print_tagq(p, t);
	if (bp->right)
		print_text(p, bp->right);

	if (bp->next)
		eqn_box(p, bp->next);
@


1.1
log
@sync to version 1.11.5:
adding an implementation of the eqn(7) language
by kristaps@@

So far, only .EQ/.EN blocks are handled, in-line equations are not, and
rendering is not yet very pretty, but the parser is fairly complete.
@
text
@d1 1
a1 1
/*	$Id: eqn_html.c,v 1.1 2011/07/23 22:57:13 kristaps Exp $ */
a16 4
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

d34 1
a35 1
static void	eqn_box(struct html *, const struct eqn_box *);
d58 2
a59 2
	t = EQNFONT_NONE == bp->font ? NULL : 
		print_otag(p, fontmap[(int)bp->font], 0, NULL);
d63 1
a63 1
	
@

