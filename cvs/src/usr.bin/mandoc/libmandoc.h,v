head	1.51;
access;
symbols
	OPENBSD_6_1:1.51.0.4
	OPENBSD_6_1_BASE:1.51
	OPENBSD_6_0:1.49.0.2
	OPENBSD_6_0_BASE:1.49
	OPENBSD_5_9:1.48.0.2
	OPENBSD_5_9_BASE:1.48
	OPENBSD_5_8:1.46.0.4
	OPENBSD_5_8_BASE:1.46
	OPENBSD_5_7:1.41.0.2
	OPENBSD_5_7_BASE:1.41
	OPENBSD_5_6:1.28.0.4
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.19.0.6
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.4
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.2
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.51
date	2017.02.18.13.43.34;	author schwarze;	state Exp;
branches;
next	1.50;
commitid	WXZP71GulY1lQoUX;

1.50
date	2017.02.09.17.19.07;	author schwarze;	state Exp;
branches;
next	1.49;
commitid	M8rq0bbAM3ikHus0;

1.49
date	2016.07.19.13.30.16;	author schwarze;	state Exp;
branches;
next	1.48;
commitid	vM0BMAmv88IMfvC0;

1.48
date	2015.11.07.13.57.55;	author schwarze;	state Exp;
branches;
next	1.47;
commitid	UKwSq7JMt0q6KNpK;

1.47
date	2015.10.13.22.57.49;	author schwarze;	state Exp;
branches;
next	1.46;
commitid	jXIG8UzKLXm2Z9i6;

1.46
date	2015.04.19.14.25.05;	author schwarze;	state Exp;
branches;
next	1.45;
commitid	E1gJfKuheBoo64Vb;

1.45
date	2015.04.19.13.50.10;	author schwarze;	state Exp;
branches;
next	1.44;
commitid	QSaLMe5iBgPB4hUe;

1.44
date	2015.04.18.17.28.08;	author schwarze;	state Exp;
branches;
next	1.43;
commitid	zD52rmYwzwgofy8v;

1.43
date	2015.04.18.17.01.28;	author schwarze;	state Exp;
branches;
next	1.42;
commitid	GslLZJxifCkaUipL;

1.42
date	2015.04.18.16.04.40;	author schwarze;	state Exp;
branches;
next	1.41;
commitid	6MYJ7cd8mhJ77AGH;

1.41
date	2015.01.15.04.26.06;	author schwarze;	state Exp;
branches;
next	1.40;
commitid	TgtfgXU8Rz8XgmeH;

1.40
date	2015.01.14.22.57.57;	author schwarze;	state Exp;
branches;
next	1.39;
commitid	pB8ZvBlUeO92L1BP;

1.39
date	2014.12.28.14.39.08;	author schwarze;	state Exp;
branches;
next	1.38;
commitid	6ZLiZAxCS3hyLbh4;

1.38
date	2014.12.21.00.17.24;	author daniel;	state Exp;
branches;
next	1.37;
commitid	9YJCK9rUVKVOLAne;

1.37
date	2014.12.01.08.05.02;	author schwarze;	state Exp;
branches;
next	1.36;
commitid	dkxNPoJe0koFMMLd;

1.36
date	2014.11.28.06.26.46;	author schwarze;	state Exp;
branches;
next	1.35;
commitid	M5K1YnX7vRaFkPkc;

1.35
date	2014.11.27.14.31.29;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	je75OeVgCvwQD2St;

1.34
date	2014.11.01.06.02.43;	author schwarze;	state Exp;
branches;
next	1.33;
commitid	3fBnp5rg5xbTeWnZ;

1.33
date	2014.11.01.04.07.25;	author schwarze;	state Exp;
branches;
next	1.32;
commitid	dQ52Fm35XZoT76Y1;

1.32
date	2014.10.30.00.05.02;	author schwarze;	state Exp;
branches;
next	1.31;
commitid	dxVoXRJjO1zZjAXI;

1.31
date	2014.10.28.17.35.42;	author schwarze;	state Exp;
branches;
next	1.30;
commitid	pNwmOla3ZQwLgu2f;

1.30
date	2014.10.16.01.10.06;	author schwarze;	state Exp;
branches;
next	1.29;
commitid	3N6FMKugsVoc1dko;

1.29
date	2014.09.06.22.38.35;	author schwarze;	state Exp;
branches;
next	1.28;
commitid	TDPFPNCkor60BTJO;

1.28
date	2014.07.09.11.30.07;	author schwarze;	state Exp;
branches;
next	1.27;
commitid	WErJgzRtDKBz19TC;

1.27
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.26;

1.26
date	2014.03.19.21.50.59;	author schwarze;	state Exp;
branches;
next	1.25;

1.25
date	2014.01.06.21.33.00;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2014.01.05.20.26.27;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2013.12.30.00.52.18;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2013.12.15.21.18.00;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2013.10.03.22.04.08;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2013.10.03.19.32.25;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2012.07.07.18.27.36;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2012.06.02.23.18.30;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2012.05.24.23.33.23;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2011.12.02.01.45.43;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.18.15.54.48;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.18.10.25.28;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.17.13.45.28;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.29.21.22.18;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.24.16.22.02;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.21.22.59.54;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.07.01.35.33;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2011.01.03.22.27.21;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.16.00.34.33;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.26.17.56.43;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.26.02.39.58;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.14.19.52.43;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.23.22.30.17;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.22.23.58.00;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.08.00.04.10;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.51
log
@preconv_encode() can take a const input buffer;
diff from <christos at NetBSD>
@
text
@/*	$OpenBSD: libmandoc.h,v 1.50 2017/02/09 17:19:07 schwarze Exp $ */
/*
 * Copyright (c) 2009, 2010, 2011, 2012 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2013, 2014, 2015 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

enum	rofferr {
	ROFF_CONT, /* continue processing line */
	ROFF_RERUN, /* re-run roff interpreter with offset */
	ROFF_APPEND, /* re-run main parser, appending next line */
	ROFF_REPARSE, /* re-run main parser on the result */
	ROFF_SO, /* include another file */
	ROFF_IGN, /* ignore current line */
	ROFF_TBL, /* a table row was successfully parsed */
	ROFF_EQN /* an equation was successfully parsed */
};

struct	buf {
	char	*buf;
	size_t	 sz;
};


struct	mparse;
struct	tbl_span;
struct	eqn;
struct	roff;
struct	roff_man;

void		 mandoc_msg(enum mandocerr, struct mparse *,
			int, int, const char *);
void		 mandoc_vmsg(enum mandocerr, struct mparse *,
			int, int, const char *, ...)
			__attribute__((__format__ (__printf__, 5, 6)));
char		*mandoc_getarg(struct mparse *, char **, int, int *);
char		*mandoc_normdate(struct mparse *, char *, int, int);
int		 mandoc_eos(const char *, size_t);
int		 mandoc_strntoi(const char *, size_t, int);
const char	*mandoc_a2msec(const char*);

void		 mdoc_hash_init(void);
int		 mdoc_parseln(struct roff_man *, int, char *, int);
void		 mdoc_endparse(struct roff_man *);

void		 man_hash_init(void);
int		 man_parseln(struct roff_man *, int, char *, int);
void		 man_endparse(struct roff_man *);

int		 preconv_cue(const struct buf *, size_t);
int		 preconv_encode(const struct buf *, size_t *,
			struct buf *, size_t *, int *);

void		 roff_free(struct roff *);
struct roff	*roff_alloc(struct mparse *, int);
void		 roff_reset(struct roff *);
void		 roff_man_free(struct roff_man *);
struct roff_man	*roff_man_alloc(struct roff *, struct mparse *,
			const char *, int);
void		 roff_man_reset(struct roff_man *);
enum rofferr	 roff_parseln(struct roff *, int, struct buf *, int *);
void		 roff_endparse(struct roff *);
void		 roff_setreg(struct roff *, const char *, int, char sign);
int		 roff_getreg(const struct roff *, const char *);
char		*roff_strdup(const struct roff *, const char *);
int		 roff_getcontrol(const struct roff *,
			const char *, int *);
int		 roff_getformat(const struct roff *);

const struct tbl_span	*roff_span(const struct roff *);
const struct eqn	*roff_eqn(const struct roff *);
@


1.50
log
@Be consistent in protecting __attribute__ attributes with __;
from Christos Zoulas <christos @@ NetBSD>.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.49 2016/07/19 13:30:16 schwarze Exp $ */
d62 1
a62 1
int		 preconv_encode(struct buf *, size_t *,
@


1.49
log
@Use __attribute__((__format__ throughout.
Triggered by a smaller patch from Christos Zoulas.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.48 2015/11/07 13:57:55 schwarze Exp $ */
d46 1
a46 1
			__attribute__((__format__ (printf, 5, 6)));
@


1.48
log
@In private header files, __BEGIN_DECLS and __END_DECLS are pointless.
Because these work slightly differently on different systems,
they are becoming a maintenance burden in the portable version,
so delete them.

Besides, one of the chief design goals of the mandoc toolbox is to
make sure that nothing related to documentation requires C++.
Consequently, linking mandoc against any kind of C++ program would
defeat the purpose and is not supported.
I don't understand why kristaps@@ added them in the first place.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.47 2015/10/13 22:57:49 schwarze Exp $ */
a40 1
struct	roff_node;
d45 2
a46 1
			int, int, const char *, ...);
@


1.47
log
@Major character table cleanup:
* Use ohash(3) rather than a hand-rolled hash table.
* Make the character table static in the chars.c module:
There is no need to pass a pointer around, we most certainly
never want to use two different character tables concurrently.
* No need to keep the characters in a separate file chars.in;
that merely encourages downstream porters to mess with them.
* Sort the characters to agree with the mandoc_chars(7) manual page.
* Specify Unicode codepoints in hex, not decimal (that's the detail
that originally triggered this patch).
No functional change, minus 100 LOC, and i don't see a performance change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.46 2015/04/19 14:25:05 schwarze Exp $ */
a34 1
__BEGIN_DECLS
a82 2

__END_DECLS
@


1.46
log
@Unify some node handling functions that use TOKEN_NONE.
* mdoc_word_alloc(), man_word_alloc() -> roff_word_alloc()
* mdoc_word_append(), man_word_append() -> roff_word_append()
* mdoc_addspan(), man_addspan() -> roff_addtbl()
* mdoc_addeqn(), man_addeqn() -> roff_addeqn()
Minus 50 lines of code, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.45 2015/04/19 13:50:10 schwarze Exp $ */
a37 1
struct	mchars;
d67 1
a67 1
struct roff	*roff_alloc(struct mparse *, const struct mchars *, int);
@


1.45
log
@Unify node handling functions:
* node_alloc() for mdoc and man_node_alloc() -> roff_node_alloc()
* node_append() for mdoc and man_node_append() -> roff_node_append()
* mdoc_head_alloc() and man_head_alloc() -> roff_head_alloc()
* mdoc_body_alloc() and man_body_alloc() -> roff_body_alloc()
* mdoc_node_unlink() and man_node_unlink() -> roff_node_unlink()
* mdoc_node_free() and man_node_free() -> roff_node_free()
* mdoc_node_delete() and man_node_delete() -> roff_node_delete()
Minus 130 lines of code, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.44 2015/04/18 17:28:08 schwarze Exp $ */
a57 2
void		 mdoc_addspan(struct roff_man *, const struct tbl_span *);
void		 mdoc_addeqn(struct roff_man *, const struct eqn *);
a61 2
void		 man_addspan(struct roff_man *, const struct tbl_span *);
void		 man_addeqn(struct roff_man *, const struct eqn *);
@


1.44
log
@Unify {mdoc,man}_{alloc,reset,free}() into roff_man_{alloc,reset,free}().
Minus 80 lines of code, no functional change.
Written on the train from Koeln to Wolfsburg returning from p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.43 2015/04/18 17:01:28 schwarze Exp $ */
a55 1
void		 mdoc_node_delete(struct roff_man *, struct roff_node *);
a61 1
void		 man_node_delete(struct roff_man *, struct roff_node *);
@


1.43
log
@Move mdoc_hash_init() and man_hash_init() to libmandoc.h
and call them from mparse_alloc() and choose_parser(),
preparing unified allocation of struct roff_man.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.42 2015/04/18 16:04:40 schwarze Exp $ */
d43 1
a54 4
void		 mdoc_free(struct roff_man *);
struct roff_man	*mdoc_alloc(struct roff *, struct mparse *,
			const char *, int);
void		 mdoc_reset(struct roff_man *);
d56 1
a61 4
void		 man_free(struct roff_man *);
struct roff_man	*man_alloc(struct roff *, struct mparse *,
			const char *, int);
void		 man_reset(struct roff_man *);
d63 1
d76 4
@


1.42
log
@Replace the structs mdoc and man by a unified struct roff_man.
Almost completely mechanical, no functional change.
Written on the train from Exeter to London returning from p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.41 2015/01/15 04:26:06 schwarze Exp $ */
d58 1
d68 1
@


1.41
log
@Fatal errors no longer exist.
If a file can be opened, mandoc will produce some output;
at worst, the output may be almost empty.
Simplifies error handling and frees a message type for future use.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.40 2015/01/14 22:57:57 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2013, 2014 Ingo Schwarze <schwarze@@openbsd.org>
d10 1
a10 1
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
d12 1
a12 1
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
d42 1
a42 2
struct	mdoc;
struct	man;
d54 2
a55 2
void		 mdoc_free(struct mdoc *);
struct	mdoc	*mdoc_alloc(struct roff *, struct mparse *,
d57 5
a61 5
void		 mdoc_reset(struct mdoc *);
int		 mdoc_parseln(struct mdoc *, int, char *, int);
void		 mdoc_endparse(struct mdoc *);
void		 mdoc_addspan(struct mdoc *, const struct tbl_span *);
void		 mdoc_addeqn(struct mdoc *, const struct eqn *);
d63 2
a64 2
void		 man_free(struct man *);
struct	man	*man_alloc(struct roff *, struct mparse *,
d66 5
a70 5
void		 man_reset(struct man *);
int		 man_parseln(struct man *, int, char *, int);
void		 man_endparse(struct man *);
void		 man_addspan(struct man *, const struct tbl_span *);
void		 man_addeqn(struct man *, const struct eqn *);
@


1.40
log
@downgrade ".so with absolute path" from FATAL to ERROR;
allows to get rid of ROFF_ERR
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.39 2014/12/28 14:39:08 schwarze Exp $ */
d60 1
a60 1
int		 mdoc_endparse(struct mdoc *);
d69 1
a69 1
int		 man_endparse(struct man *);
@


1.39
log
@mdoc(7) already uses the mandoc(1) -Ios argument in the footer line
when .Os has no argument, so do the same for man(7) when .TH has less
than four arguments; there is no reason to treat both differently.
Issue found following a question from Thomas Klausner <wiz at NetBSD>.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.38 2014/12/21 00:17:24 daniel Exp $ */
d27 1
a27 2
	ROFF_EQN, /* an equation was successfully parsed */
	ROFF_ERR /* badness: puke and stop */
@


1.38
log
@Fix build with -Werror -std=c99 -pedantic.

ok schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.37 2014/12/01 08:05:02 schwarze Exp $ */
d66 2
a67 1
struct	man	*man_alloc(struct roff *, struct mparse *, int);
@


1.37
log
@header cleanup:
* add missing forward declarations
* remove needless header inclusions
* some style unification
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.36 2014/11/28 06:26:46 schwarze Exp $ */
a39 1
enum	mandocerr;
@


1.36
log
@Simplify by making the eqn and tbl steering functions void;
no functional change, minus 15 lines of code.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.35 2014/11/27 14:31:29 deraadt Exp $ */
d38 5
@


1.35
log
@remove unneccessary inclusion protection; ok schwarze
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.34 2014/11/01 06:02:43 schwarze Exp $ */
d58 2
a59 2
int		 mdoc_addspan(struct mdoc *, const struct tbl_span *);
int		 mdoc_addeqn(struct mdoc *, const struct eqn *);
d66 2
a67 2
int		 man_addspan(struct man *, const struct tbl_span *);
int		 man_addeqn(struct man *, const struct eqn *);
@


1.34
log
@Use struct buf in libroff, it is very natural there
and reduces the number of arguments of many functions.
While here, sprinkle some KNF.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.33 2014/11/01 04:07:25 schwarze Exp $ */
a17 2
#ifndef LIBMANDOC_H
#define LIBMANDOC_H
a88 2

#endif /*!LIBMANDOC_H*/
@


1.33
log
@Refactor, no functional change: Remove the parse point from struct buf.
Some functions need multiple parse points, some none at all,
and it varies whether any of them need to be passed around.
So better pass them as a separate argument, and only when needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.32 2014/10/30 00:05:02 schwarze Exp $ */
d78 1
a78 2
enum rofferr	 roff_parseln(struct roff *, int,
			char **, size_t *, int, int *);
@


1.32
log
@support UTF-8 and ISO-8859-1 input by integrating modified parts
of kristaps@@' version of the preconv(1) utility into mandoc(1);
positive feedback from bentley@@ and no concern raised when shown on tech@@
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.31 2014/10/28 17:35:42 schwarze Exp $ */
a35 1
	size_t	 offs;
d71 3
a73 2
int		 preconv_cue(const struct buf *);
int		 preconv_encode(struct buf *, struct buf *, int *);
@


1.31
log
@Make the character table available to libroff so it can check the
validity of character escape names and warn about unknown ones.
This requires mchars_spec2cp() to report unknown names again.
Fortunately, that doesn't require changing the calling code because
according to groff, invalid character escapes should not produce
output anyway, and now that we warn about them, that's fine.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.30 2014/10/16 01:10:06 schwarze Exp $ */
d33 6
d71 3
@


1.30
log
@Implement in-line equations, much needed by Xenocara manuals.
Put the steering into the roff parser rather than into the mdoc
parser such that it works for all macro languages and on both text
and macro lines.
Line breaks and blank characters generated before and after in-line
equations are not perfect yet, but let's do one thing at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: libmandoc.h,v 1.29 2014/09/06 22:38:35 schwarze Exp $ */
d67 1
a67 1
struct roff	*roff_alloc(struct mparse *, int);
@


1.29
log
@Move main format autodetection from the parser dispatcher to the
roff parser where .Dd and .TH are already detected, anyway.  This
improves robustness because it correctly handles whitespace or an
alternate control character before Dd.  In the parser dispatcher,
provide a fallback looking ahead in the input buffer instead of
always assuming man(7).  This corrects autodetection when Dd is
preceded by other macros or macro-like handled requests like .ll.

Triggered by reports from Daniel Levai about issues on Slackware Linux.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a77 6
#if 0
char		 roff_eqndelim(const struct roff *);
void		 roff_openeqn(struct roff *, const char *,
			int, int, const char *);
int		 roff_closeeqn(struct roff *);
#endif
@


1.28
log
@mark defos as const; nobody needs to change it,
and it is occasionally useful to be able to pass literal strings
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.27 2014/04/20 16:44:44 schwarze Exp $ */
d77 1
@


1.27
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.26 2014/03/19 21:50:59 schwarze Exp $ */
d50 2
a51 1
struct	mdoc	*mdoc_alloc(struct roff *, struct mparse *, char *, int);
@


1.26
log
@Generalize the mparse_alloc() and roff_alloc() functions by giving
them an "options" argument, replacing the existing "inttype" and
"quick" arguments, preparing for a future MPARSE_SO option.
Store this argument in struct mparse and struct roff, replacing the
existing "inttype", "parsetype", and "quick" members.
No functional change except one tiny cosmetic fix in roff_TH().
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.25 2014/01/06 21:33:00 schwarze Exp $ */
d39 1
a39 1
void		 mandoc_msg(enum mandocerr, struct mparse *, 
d41 1
a41 1
void		 mandoc_vmsg(enum mandocerr, struct mparse *, 
d49 1
a49 1
void	 	 mdoc_free(struct mdoc *);
d52 1
a52 1
int	 	 mdoc_parseln(struct mdoc *, int, char *, int);
d57 1
a57 1
void	 	 man_free(struct man *);
d60 1
a60 1
int	 	 man_parseln(struct man *, int, char *, int);
d65 1
a65 1
void	 	 roff_free(struct roff *);
d68 1
a68 1
enum rofferr	 roff_parseln(struct roff *, int, 
d74 1
a74 1
int		 roff_getcontrol(const struct roff *, 
d78 1
a78 1
void		 roff_openeqn(struct roff *, const char *, 
@


1.25
log
@Another 25% speedup for mandocdb(8) -Q mode, found with gprof(1).
For /usr/share/man, we only need 56% of the time of makewhatis(8) now.

In groff, user-defined macros clashing with mdoc(7) or man(7)
standard macros are cleared when parsing the .Dd or .TH macro,
respectively.  Of course, we continue doing that in standard mode
to assure full groff bug compatibility.

However, in -Q mode, full groff bug compatibility makes no sense
when it's unreasonably expensive, so skip this step in -Q mode.
Real-world manuals hardly ever redefine standard macros,
that's terrible style, and if they do, it's pointless to do so
before .Dd or .TH because it has no effect.  Even if someone does,
it's extremely unlikely to break mandocdb(8) -Q parsing because we
abort the parse sequence after the NAME section, anyway.

So if you manually redefine .Sh, .Nm, .Nd, or .SH in a way that doesn't
work at all and rely on .Dd or .TH to fix it up for you, your broken
manual will no longer get a perfect apropos(1) entry until you re-run
mandocdb(8) without -Q.  It think that consequence is acceptable
in order to get a 25% speedup for everyone else.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.24 2014/01/05 20:26:27 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2013 Ingo Schwarze <schwarze@@openbsd.org>
d66 1
a66 1
struct roff	*roff_alloc(enum mparset, struct mparse *, int);
@


1.24
log
@Add an option -Q (quick) to mandocdb(8)
for accelerated generation of reduced-size databases.

Implement this by allowing the parsers to optionally
abort the parse sequence after the NAME section.

While here, garbage collect the unused void *arg attribute
of struct mparse and mparse_alloc().

This reduces the processing time of mandocdb(8) on /usr/share/man
by a factor of 2 and the database size by a factor of 4.
However, it still takes 5 times the time and 6 times the space
of makewhatis(8), so more work is clearly needed.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.23 2013/12/30 00:52:18 schwarze Exp $ */
d66 1
a66 1
struct roff	*roff_alloc(enum mparset, struct mparse *);
@


1.23
log
@Simplify: Remove an unused argument from the mandoc_eos() function.
No functional change.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.22 2013/12/15 21:18:00 schwarze Exp $ */
d50 1
a50 1
struct	mdoc	*mdoc_alloc(struct roff *, struct mparse *, char *);
d58 1
a58 1
struct	man	*man_alloc(struct roff *, struct mparse *);
@


1.22
log
@The "value" argument to the roff(7) .nr requests ends right before
the first non-digit character.  While here, implement and document
an optional sign, requesting increment or decrement, as documented
in the Ossanna/Kernighan/Ritter troff manual and supported by groff.

Reported by bentley@@ on discuss at mdocml.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.21 2013/10/03 22:04:08 schwarze Exp $ */
d45 1
a45 1
int		 mandoc_eos(const char *, size_t, int);
@


1.21
log
@Expand references to number registers in exactly the same way as
references to user-defined strings.  While here, make number registers
signed int, like in groff.

Inspired by NetBSD roff.c rev. 1.8 and read.c rev. 1.7
written by Christos Zoulas on March 21, 2013, but implemented
in a completely different way, without hacking into read.c,
where this functionality really doesn't belong.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.20 2013/10/03 19:32:25 schwarze Exp $ */
d71 1
a71 1
void		 roff_setreg(struct roff *, const char *, int);
@


1.20
log
@Support setting arbitrary roff(7) number registers,
preserving read support for the ".nr nS" SYNOPSIS state register;
read support for arbitrary registers is still not available.

Inspired by NetBSD roff.c rev. 1.18 (Christos Zoulas, March 21, 2013),
but implemented differently.  I don't want to have yet another different
implementation of a hash table in mandoc - it would be the second one
in roff.c alone and the fifth one in mandoc grand total.
Instead, i designed and implemented roff_setreg() and roff_getreg()
to be similar to roff_setstrn() and roff_getstrn().

Once we feel the need to optimize, we can introduce one common
hash table implementation for everything in mandoc.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.19 2012/07/07 18:27:36 schwarze Exp $ */
d71 2
a72 2
void		 roff_setreg(struct roff *, const char *, unsigned int);
unsigned int	 roff_getreg(const struct roff *, const char *);
@


1.19
log
@Support the .cc request; code by kristaps@@, tests by me.
Needed for sqlite3(1) as reported by espie@@.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.18 2012/06/02 23:18:30 schwarze Exp $ */
d4 1
a32 5
enum	regs {
	REG_nS = 0, /* nS register */
	REG__MAX
};

d71 2
a72 3
int		 roff_regisset(const struct roff *, enum regs);
unsigned int	 roff_regget(const struct roff *, enum regs);
void		 roff_regunset(struct roff *, enum regs);
@


1.18
log
@In groff, trying to redefine standard man(7) macros before .TH has no effect;
after .TH, it works.  Trying to redefine standard mdoc(7) macros before .Dd
works when calling groff with the -mdoc command line option, but does not
when calling groff with -mandoc; after .Dd, it always works.

Arguably, one might call that buggy behaviour in groff, but it is very
unlikely that anybody will change groff in this respect (certainly, i'm
not volunteering).  So let's be bug-compatible.

This fixes the vertical spacing in sox(1).
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.17 2012/05/24 23:33:23 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
a49 1
int		 mandoc_getcontrol(const char *, int *);
d79 2
@


1.17
log
@Support -Ios='OpenBSD 5.1' to override uname(3) as the source of the
default value for the mdoc(7) .Os macro.
Needed for man.cgi on the OpenBSD website.

Problem with man.cgi first noticed by deraadt@@;
beck@@ and deraadt@@ agree with the way to solve the issue.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.16 2011/12/02 01:45:43 schwarze Exp $ */
d71 1
a71 1
struct roff	*roff_alloc(struct mparse *);
@


1.16
log
@In man(7), when no explicit volume name is given, use the default
volume name for the respective manual section, just like in mdoc(7).
This gives us nicer page headers for cvs(1), lynx(1), tic(1),
mkhybrid(8), and many curses(3) manuals.

ok kristaps@@

To not break compatibility, i wrote a corresponding patch for GNU troff
which Werner Lemberg accepted upstream at rev. 1.65 of:
http://cvs.savannah.gnu.org/viewvc/groff/tmac/an-old.tmac?root=groff
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.15 2011/09/18 15:54:48 schwarze Exp $ */
d55 1
a55 1
struct	mdoc	*mdoc_alloc(struct roff *, struct mparse *);
@


1.15
log
@sync to version 1.11.7 from kristaps@@
main new feature: support the roff(7) .tr request
plus various bugfixes and some refactoring

regressions are so minor that it's better to get this in
and fix them in the tree
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.14 2011/09/18 10:25:28 schwarze Exp $ */
d52 1
@


1.14
log
@sync to version 1.11.5:
adding an implementation of the eqn(7) language
by kristaps@@

So far, only .EQ/.EN blocks are handled, in-line equations are not, and
rendering is not yet very pretty, but the parser is fairly complete.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.13 2011/09/17 13:45:28 schwarze Exp $ */
a49 1
int		 mandoc_hyph(const char *, const char *);
d78 1
@


1.13
log
@Change the mandocdb(8) interface to better agree with makewhatis(8);
in particular, allow recursing multiple directories and create
multiple databases in one call.
This commit includes some reorganization, and exposing mandoc_strdup
as a utility function in mandoc.h.
written by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.12 2011/05/29 21:22:18 schwarze Exp $ */
a36 29
/*
 * A register (struct reg) can consist of many types: this consists of
 * normalised types from the original string form.  For the time being,
 * there's only an unsigned integer type.
 */
union	regval {
	unsigned  u; /* unsigned integer */
};

/*
 * A single register entity.  If "set" is zero, the value of the
 * register should be the default one, which is per-register.  It's
 * assumed that callers know which type in "v" corresponds to which
 * register value.
 */
struct	reg {
	int		  set; /* whether set or not */
	union regval	  v; /* parsed data */
};

/*
 * The primary interface to setting register values is in libroff,
 * although libmdoc and libman from time to time will manipulate
 * registers (such as `.Sh SYNOPSIS' enabling REG_nS).
 */
struct	regset {
	struct reg	  regs[REG__MAX];
};

d52 1
a52 1
int		 mandoc_strntou(const char *, size_t, int);
d55 1
a55 1
struct	mdoc	*mdoc_alloc(struct regset *, struct mparse *);
d63 1
a63 1
struct	man	*man_alloc(struct regset *, struct mparse *);
d71 1
a71 1
struct roff	*roff_alloc(struct regset *, struct mparse *);
d76 9
@


1.12
log
@Merge release 1.11.3, almost all code by kristaps@@:
* Unicode output support (no Unicode input yet, though).
* Refactoring: completely handle predefined strings in roff.c.
- New function mandoc_escape() replaces a2roffdeco() and mandoc_special().
- Start using mandoc_getarg() in mdoc_argv.c.
- Clean up parsing of delimiters in mdoc(7).
* And many minor fixes and lots of cleanup.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.11 2011/04/24 16:22:02 schwarze Exp $ */
a75 1
char		*mandoc_strdup(const char *);
@


1.11
log
@Merge version 1.11.1:
Again lots of cleanup and maintenance work by kristaps@@.
- simplify error reporting: less function pointers, more mandoc_[v]msg
- main: split document parsing out of main.c into read.c
- roff, mdoc, man: improved recognition of control characters
- roff: better handling of if/else stack overflows
- roff: add some predefined strings for backward compatibility
- mdoc, man: empty sections are not errors
- mdoc: move delimiter handling to libmdoc
- some header restructuring and some minor features and fixes
This merge causes two minor regressions
that i will fix in separate commits right afterwards.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.10 2011/04/21 22:59:54 schwarze Exp $ */
a75 1
int		 mandoc_special(char *);
d82 1
@


1.10
log
@Merge version 1.10.10:
lots of cleanup and maintenance work by kristaps@@.
- move some main.c globals into struct curparse
- move mandoc_*alloc to mandoc.h such that all code can use them
- make mandoc_isdelim available to formatting frontends
- dissolve mdoc_strings.c, move the code where it is used
- make all error reporting functions void, their return values were useless
- and various minor cleanups and fixes
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.9 2011/03/07 01:35:33 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
d20 46
d68 8
d78 2
a79 2
char		*mandoc_getarg(char **, mandocmsg, void *, int, int *);
char		*mandoc_normdate(char *, mandocmsg, void *, int, int);
d82 27
@


1.9
log
@Clean up date handling,
as a first step to get rid of the frequent petty warnings in this area:
 - always store dates as strings, not as seconds since the Epoch
 - for input, try the three most common formats everywhere
 - for unrecognized format, just pass the date though verbatim
 - when there is no date at all, still use the current date
Originally triggered by a one-line patch from Tim van der Molen,
<tbvdm at xs4all dot nl>, which is included here.
Feedback and OK on manual parts from jmc@@.
"please check this in" kristaps@@
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.8 2011/01/03 22:27:21 schwarze Exp $ */
a22 1
void		*mandoc_calloc(size_t, size_t);
a23 2
void		*mandoc_malloc(size_t);
void		*mandoc_realloc(void *, size_t);
@


1.8
log
@Unify roff macro argument parsing (in roff.c, roff_userdef()) and man macro
argument parsing (in man_argv.c, man_args()), both having different bugs,
to use one common macro argument parser (in mandoc.c, mandoc_getarg()),
because from the point of view of roff, man macros are just roff macros,
hence their arguments are parsed in exactly the same way.

While doing so, fix these bugs:
 * Escaped blanks (i.e. those preceded by an odd number of backslashes)
   were mishandled as argument separators in unquoted arguments to
   user-defined roff macros.
 * Unescaped blanks preceded by an even number of backslashes were not
   recognized as argument separators in unquoted arguments to man macros.
 * Escaped backslashes (i.e. pairs of backslashes) were not reduced
   to single backslashes both in unquoted and quoted arguments both
   to user-defined roff macros and to man macros.
 * Escaped quotes (i.e. pairs of quotes inside quoted arguments) were
   not reduced to single quotes in man macros.

OK kristaps@@

Note that mdoc macro argument parsing is yet another beast for no good
reason and is probably afflicted by similar bugs.  But i don't attempt
to fix that right now because it is intricately entangled with lots of
unrelated high-level mdoc(7) functionality, like delimiter handling and
column list phrase handling.  Disentagling that would waste too much
time now.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.7 2010/07/16 00:34:33 schwarze Exp $ */
d28 1
a28 5
time_t		 mandoc_a2time(int, const char *);
#define		 MTIME_CANONICAL	(1 << 0)
#define		 MTIME_REDUCED		(1 << 1)
#define		 MTIME_MDOCDATE		(1 << 2)
#define		 MTIME_ISO_8601		(1 << 3)
@


1.7
log
@Text ending in a full stop, exclamation mark or question mark
should not flag the end of a sentence if:

1) The punctuation is followed by closing delimiters
and not preceded by alphanumeric characters, like in
"There is no full stop (.) in this sentence"

or

2) The punctuation is a child of a macro
and not preceded by alphanumeric characters, like in
"There is no full stop
.Pq \&.
in this sentence"

jmc@@ and sobrado@@ like this
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.6 2010/06/26 17:56:43 schwarze Exp $ */
d27 1
@


1.6
log
@merge release 1.10.2
* bug fixes:
- interaction of ASCII_HYPH with special chars (found by Ulrich Spoerlein)
- handling of roff conditionals (found by Ulrich Spoerlein)
- .Bd -offset will no more default to 6n
* maintenance:
- more caching of .Bd and .Bl arguments for efficiency
- deconstify man(7) validation routines
- add FreeBSD library names (provided by Ulrich Spoerlein)
* start PostScript font-switching
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.5 2010/05/26 02:39:58 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009 Kristaps Dzonsons <kristaps@@bsd.lv>
d32 1
a32 1
int		 mandoc_eos(const char *, size_t);
@


1.5
log
@When a word does not fully fit onto the output line, but it contains
at least one hyphen, we already had support for breaking the line a the
last fitting hyphen.  This patch improves this functionality by only
breaking at hyphens in free-form text, and by not breaking at hyphens
* at the beginning or end of a word   or
* immediately preceded or followed by another hyphen   or
* escaped by a preceding backslash.

Before this patch, differences in break-at-hyphen support were one
of the major sources of noise in automatic comparisons to mdoc(7)
groff output.  Now, the remaining differences are hard to find among
the noise coming from other sources.

Where there are still differences, what we do seems to be better than
what groff does, see e.g. the chio(1) exchange and position commands
for one of the now rare examples.

idea and coding by kristaps@@

Besides, this was the last substantial code difference left
between bsd.lv and openbsd.org.  We are now in full sync.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.4 2010/05/14 19:52:43 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2009 Kristaps Dzonsons <kristaps@@kth.se>
d22 1
a22 1
int		 mandoc_special(const char *);
@


1.4
log
@Integrate kristaps@@' end-of-sentence (EOS) framework
which is simpler and more powerful than mine, and remove mine.

* man(7) now has EOS handling, too
* put EOS detection into its own function in libmandoc
* use node and termp flags to communicate the EOS condition
* no more EOS pseudo-macro
* no more non-printable EOS marker character on the formatter level

This slightly breaks EOS detection after trailing punctuation
in mdoc(7) macros, but that will be restored soon.
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.3 2009/12/23 22:30:17 schwarze Exp $ */
d33 1
@


1.3
log
@sync to 1.9.13: minor fixes:

correctness/functionality:
 - bugfix: properly ignore lines with only a dot in -man
 - bugfix: .Bl -ohang doesn't allow -width, warn about this
 - improve date string handling by new function mandoc_a2time
 - some HTML improvements
 - significant documentation additions in man.7 and mdoc.7

portability:
 - replace __dead by __attribute__((noreturn))
 - bugfix: correct .Dx rendering
 - some more library names for NetBSD

simplicity:
 - replace hand-rolled putchar(3)-loops by fwrite(3)
 - replace single-character printf(3) by putchar(3)
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.2 2009/12/22 23:58:00 schwarze Exp $ */
d32 1
@


1.2
log
@sync to 1.9.12, mostly portability and refactoring:

correctness/functionality:
- bugfix: do not die when overstep hits the right margin
- new option: -fign-escape
- and various HTML features

portability:
- replace bzero(3) by memset(3), which is ANSI C
- replace err(3)/warn(3) by perror(3)/exit(3), which is ANSI C
- iuse argv[0] instead of __progname
- add time.h to various files for FreeBSD compilation

simplicity:
- do not allocate header/footer data dynamically in *_term.c
- provide and use malloc frontends that error out on failure

for full changelogs, see http://bsd.lv/cgi-bin/cvsweb.cgi/
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.1 2009/07/08 00:04:10 schwarze Exp $ */
d27 5
@


1.1
log
@sync to 1.7.21: unified escape sequence validation for mdoc and man
checking is still incomplete, but a bit better, in particular for man
now in sync with 1.7.22: the only 1.7.22 diff was already in
@
text
@d1 1
a1 1
/*	$Id: libmandoc.h,v 1.1 2009/07/04 09:01:55 kristaps Exp $ */
d23 4
@

