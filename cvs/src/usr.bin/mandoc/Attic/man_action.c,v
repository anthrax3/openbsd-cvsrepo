head	1.29;
access;
symbols
	OPENBSD_4_8:1.24.0.2
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.29
date	2010.12.01.23.02.59;	author schwarze;	state dead;
branches;
next	1.28;

1.28
date	2010.11.29.02.26.45;	author schwarze;	state Exp;
branches;
next	1.27;

1.27
date	2010.11.29.00.12.02;	author schwarze;	state Exp;
branches;
next	1.26;

1.26
date	2010.10.15.21.33.47;	author schwarze;	state Exp;
branches;
next	1.25;

1.25
date	2010.10.15.20.45.03;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2010.07.25.18.05.54;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.06.18.08.41;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.24.13.42.58;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2010.05.24.12.38.08;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.23.22.45.00;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.23.20.57.16;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2010.05.20.00.58.02;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.16.00.54.03;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2010.05.15.18.06.02;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.25.16.32.19;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.26.01.22.05;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.25.23.23.01;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.02.01.00.39;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.23.22.30.17;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.22.23.58.00;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.21.40.07;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.18.22.46.14;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.22.23.17.40;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.22.20.14.37;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.22.15.15.37;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.23.22.05.42;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.18.23.34.53;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.14.23.00.57;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.20.30.40;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Merge man_action.c into man_validate.c.
Same as for mdoc_action.c, but much simpler.
Work by kristaps@@, re-applying OpenBSD changes on top.
@
text
@/*	$Id: man_action.c,v 1.28 2010/11/29 02:26:45 schwarze Exp $ */
/*
 * Copyright (c) 2008, 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "mandoc.h"
#include "libman.h"
#include "libmandoc.h"

#include "out.h"
#include "term.h"
#include "tbl.h"

struct	actions {
	int	(*post)(struct man *);
};

static	int	  post_TH(struct man *);
static	int	  post_fi(struct man *);
static	int	  post_nf(struct man *);
static	int	  post_AT(struct man *);
static	int	  post_UC(struct man *);
static	int	  post_TS(struct man *);

const	struct actions man_actions[MAN_MAX] = {
	{ NULL }, /* br */
	{ post_TH }, /* TH */
	{ NULL }, /* SH */
	{ NULL }, /* SS */
	{ NULL }, /* TP */
	{ NULL }, /* LP */
	{ NULL }, /* PP */
	{ NULL }, /* P */
	{ NULL }, /* IP */
	{ NULL }, /* HP */
	{ NULL }, /* SM */
	{ NULL }, /* SB */
	{ NULL }, /* BI */
	{ NULL }, /* IB */
	{ NULL }, /* BR */
	{ NULL }, /* RB */
	{ NULL }, /* R */
	{ NULL }, /* B */
	{ NULL }, /* I */
	{ NULL }, /* IR */
	{ NULL }, /* RI */
	{ NULL }, /* na */
	{ NULL }, /* i */
	{ NULL }, /* sp */
	{ post_nf }, /* nf */
	{ post_fi }, /* fi */
	{ NULL }, /* r */
	{ NULL }, /* RE */
	{ NULL }, /* RS */
	{ NULL }, /* DT */
	{ post_UC }, /* UC */
	{ NULL }, /* PD */
	{ post_AT }, /* AT */
	{ NULL }, /* in */
	{ post_TS }, /* TS */
	{ NULL }, /* TE */
	{ NULL }, /* ft */
};


int
man_action_post(struct man *m)
{

	if (MAN_ACTED & m->last->flags)
		return(1);
	m->last->flags |= MAN_ACTED;

	switch (m->last->type) {
	case (MAN_TEXT):
		/* FALLTHROUGH */
	case (MAN_ROOT):
		return(1);
	default:
		break;
	}

	if (NULL == man_actions[m->last->tok].post)
		return(1);
	return((*man_actions[m->last->tok].post)(m));
}


static int
post_fi(struct man *m)
{

	if ( ! (MAN_LITERAL & m->flags))
		if ( ! man_nmsg(m, m->last, MANDOCERR_NOSCOPE))
			return(0);
	m->flags &= ~MAN_LITERAL;
	return(1);
}


static int
post_nf(struct man *m)
{

	if (MAN_LITERAL & m->flags)
		if ( ! man_nmsg(m, m->last, MANDOCERR_SCOPEREP))
			return(0);
	m->flags |= MAN_LITERAL;
	return(1);
}


static int
post_TH(struct man *m)
{
	struct man_node	*n;

	if (m->meta.title)
		free(m->meta.title);
	if (m->meta.vol)
		free(m->meta.vol);
	if (m->meta.source)
		free(m->meta.source);
	if (m->meta.msec)
		free(m->meta.msec);
	if (m->meta.rawdate)
		free(m->meta.rawdate);

	m->meta.title = m->meta.vol = m->meta.rawdate =
		m->meta.msec = m->meta.source = NULL;
	m->meta.date = 0;

	/* ->TITLE<- MSEC DATE SOURCE VOL */

	n = m->last->child;
	assert(n);
	m->meta.title = mandoc_strdup(n->string);

	/* TITLE ->MSEC<- DATE SOURCE VOL */

	n = n->next;
	assert(n);
	m->meta.msec = mandoc_strdup(n->string);

	/* TITLE MSEC ->DATE<- SOURCE VOL */

	/*
	 * Try to parse the date.  If this works, stash the epoch (this
	 * is optimal because we can reformat it in the canonical form).
	 * If it doesn't parse, isn't specified at all, or is an empty
	 * string, then use the current date.
	 */

	n = n->next;
	if (n && n->string && *n->string) {
		m->meta.date = mandoc_a2time
			(MTIME_ISO_8601, n->string);
		if (0 == m->meta.date) {
			if ( ! man_nmsg(m, n, MANDOCERR_BADDATE))
				return(0);
			m->meta.rawdate = mandoc_strdup(n->string);
		}
	} else
		m->meta.date = time(NULL);

	/* TITLE MSEC DATE ->SOURCE<- VOL */

	if (n && (n = n->next))
		m->meta.source = mandoc_strdup(n->string);

	/* TITLE MSEC DATE SOURCE ->VOL<- */

	if (n && (n = n->next))
		m->meta.vol = mandoc_strdup(n->string);

	/*
	 * Remove the `TH' node after we've processed it for our
	 * meta-data.
	 */
	man_node_delete(m, m->last);
	return(1);
}


static int
post_AT(struct man *m)
{
	static const char * const unix_versions[] = {
	    "7th Edition",
	    "System III",
	    "System V",
	    "System V Release 2",
	};

	const char	*p, *s;
	struct man_node	*n, *nn;

	n = m->last->child;

	if (NULL == n || MAN_TEXT != n->type)
		p = unix_versions[0];
	else {
		s = n->string;
		if (0 == strcmp(s, "3"))
			p = unix_versions[0];
		else if (0 == strcmp(s, "4"))
			p = unix_versions[1];
		else if (0 == strcmp(s, "5")) {
			nn = n->next;
			if (nn && MAN_TEXT == nn->type && nn->string[0])
				p = unix_versions[3];
			else
				p = unix_versions[2];
		} else
			p = unix_versions[0];
	}

	if (m->meta.source)
		free(m->meta.source);

	m->meta.source = mandoc_strdup(p);

	return(1);
}


static int
post_UC(struct man *m)
{
	static const char * const bsd_versions[] = {
	    "3rd Berkeley Distribution",
	    "4th Berkeley Distribution",
	    "4.2 Berkeley Distribution",
	    "4.3 Berkeley Distribution",
	    "4.4 Berkeley Distribution",
	};

	const char	*p, *s;
	struct man_node	*n;

	n = m->last->child;

	if (NULL == n || MAN_TEXT != n->type)
		p = bsd_versions[0];
	else {
		s = n->string;
		if (0 == strcmp(s, "3"))
			p = bsd_versions[0];
		else if (0 == strcmp(s, "4"))
			p = bsd_versions[1];
		else if (0 == strcmp(s, "5"))
			p = bsd_versions[2];
		else if (0 == strcmp(s, "6"))
			p = bsd_versions[3];
		else if (0 == strcmp(s, "7"))
			p = bsd_versions[4];
		else
			p = bsd_versions[0];
	}

	if (m->meta.source)
		free(m->meta.source);

	m->meta.source = mandoc_strdup(p);

	return(1);
}


static int
post_TS(struct man *m)
{

	if (MAN_HEAD == m->last->type)
		m->last->parent->data.TS = tbl_alloc();

	return(1);
}
@


1.28
log
@Now that we have proper .de support in the roff(7) library,
it is time to remove the .Sp, .Vb, and .Ve kludge
that was added to the man(7) library to build Perl manuals.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.27 2010/11/29 00:12:02 schwarze Exp $ */
@


1.27
log
@Implement the roff .ft (change font) request for man(7).
Of course, we don't want to encourage low-level physical markup,
but pod2man(1) writes such requests, so Perl manuals contain them,
and some Xenocara and lots and lots of ports manuals use them as well.
In base and Xenocara, this will reduce mandoc -Tlint ERROR noise;
in ports, it will improve rendering of many manuals.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.26 2010/10/15 21:33:47 schwarze Exp $ */
a73 3
	{ NULL }, /* Sp */
	{ post_nf }, /* Vb */
	{ post_fi }, /* Ve */
@


1.26
log
@Move tbl output from plain stdio to mandoc terminal output routines.
This fixes (1) all escape sequences and (2) some aspects of indentation.
Table column widths are still way off, though.
"move forward" deraadt@@
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.25 2010/10/15 20:45:03 schwarze Exp $ */
d81 1
@


1.25
log
@Minimal glue to integrate tbl into the mandoc man(7) parser and formatter.
The output dosn't look nice yet, escape handling is still missing,
but will follow soon.
"move forward aggressively :-)" deraadt@@
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.24 2010/07/25 18:05:54 schwarze Exp $ */
d26 2
@


1.24
log
@Sync to bsd.lv; in particular, pull in lots of bug fixes.
new features:
* support the .in macro in man(7)
* support minimal PDF output
* support .Sm in mdoc(7) HTML output
* support .Vb and .nf in man(7) HTML output
* complete the mdoc(7) manual
bug fixes:
* do not let mdoc(7) .Pp produce a newline before/after .Sh; reported by jmc@@
* avoid double blank lines related to man(7) .sp and .br
* let man(7) .nf and .fi flush the line; reported by jsg@@ and naddy@@
* let "\ " produce a non-breaking space; reported by deraadt@@
* discard \m colour escape sequences; reported by J.C. Roberts
* map undefined 1-character-escapes to the literal character itself
maintenance:
* express mdoc(7) arguments in terms of an enum for additional type-safety
* simplify mandoc_special() and a2roffdeco()
* use strcspn in term_word() in place of a manual loop
* minor optimisations in the -Tps and -Thtml formatting frontends
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.23 2010/06/06 18:08:41 schwarze Exp $ */
d26 2
d37 1
d77 2
d281 11
@


1.23
log
@Merge bsd.lv release 1.10.0,
which is mostly the post-hackathon release,
bringing in the OpenBSD changes to bsd.lv,
but which also has a few additional minor fixes:

* .Lb is an in-line macro, not in_line_eoln
* .Bt, .Ud now warn when discarding arguments
* allow bad -man dates to flow verbatim into the front-ends
- so far all reported by Ulrich Spoerlein
* .Ar, .Fl and .Li starting with closing punctuation emit an empty element
* empty .Li macros print nothing, but may cause spacing
* proper EOS handling for .Bt, .Ex, .Rv, and .Ud.
* cleanup: collapse posts_xr into posts_wtext (which is the same)
* efficiency: very simple table lookup for roff.c
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.22 2010/05/24 13:42:58 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@bsd.lv>
d73 1
@


1.22
log
@plug second meta.source leak in .UT handling; from kristaps@@
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.21 2010/05/24 12:38:08 schwarze Exp $ */
d136 2
d139 1
a139 1
	m->meta.title = m->meta.vol = 
d157 7
d165 1
a165 1
	if (n) {
d171 1
a171 1
			m->meta.date = time(NULL);
@


1.21
log
@fix memory leak for .AT; from kristaps@@
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.20 2010/05/23 22:45:00 schwarze Exp $ */
d261 3
@


1.20
log
@Unified error and warning message system for all of mandoc,
featuring three message levels, as agreed during the mandoc hackathon:
* FATAL parser failure, cannot produce any output from this input file:
  eventually, we hope to convert most of these to ERRORs.
* ERROR, meaning mandoc cannot cope fully with the input syntax and will
  probably lose information or produce structurally garbled output;
  it will try to produce output anyway but exit non-zero at the end,
  which is eventually intended to make the ports infrastructure happy.
* WARNING, meaning you should clean up the input file, but output
  is probably mostly OK, so this will not cause error-exit at the end.
This commit is mostly just converting the old system to the new one; before
the classification will become really reliable, we must check all messages.

In particular,
* set up a new central message string table in main.c
* drop the old message string tables from man.c and mdoc.c
* get rid of the piece-meal merr enums in libman and libmdoc
* reduce number of error/warning functions from 16 to 6 (still a lot...)

While here, handle a few problems more gracefully:
* allow .Rv and .Ex to work without a prior .Nm
* allow .An to ignore extra arguments
* allow undeclared columns in .Bl -column

Written by kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.19 2010/05/23 20:57:16 schwarze Exp $ */
d218 3
@


1.19
log
@implement .AT and .UC; from Joerg Sonnenberger
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.18 2010/05/20 00:58:02 schwarze Exp $ */
d22 1
d104 1
a104 1
		if ( ! man_nwarn(m, m->last, WNLITERAL))
d116 1
a116 1
		if ( ! man_nwarn(m, m->last, WOLITERAL))
d160 1
a160 1
			if ( ! man_nwarn(m, n, WDATE))
@


1.18
log
@Support nested roff instructions:
* allow roff_parseln() to be re-run
* allow roff_parseln() to manipulate the line buffer offset
* support the offset in the man and mdoc libraries
* adapt .if, .ie, .el, .ig, .am* and .de* support
* interpret some instructions even in conditional-negative context
Coded by kristaps during the last day of the mandoc hackathon.

To avoid regressions in the OpenBSD tree, commit this together
with some small local additions:
* detect roff block end "\}" even on macro lines
* actually implement the ".if n" conditional
* ignore .ds, .rm and .tr in libroff

Also back my old .if/.ie/.el-handling out of libman, reverting:
man.h 1.15 man.c 1.25 man_macro.c 1.15 man_validate.c 1.19
man_action.c 1.15 man_term.c 1.28 man_html.c 1.9.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.17 2010/05/16 00:54:03 schwarze Exp $ */
d32 2
d66 1
a66 1
	{ NULL }, /* UC */
d71 1
d181 79
@


1.17
log
@In theory, Kristaps never intended to write a roff parser,
but in practice, most real legacy man(7)uals are using so much
low level roff that we can't really get away without at least
partially handling some roff instructions.

As doing this in man(7) only has become messy and as even some
mdoc(7) pages need it, start a minimal partial roff preprocessor.
As a first step, move handling of .am[i], .de[i] and .ig there.
Do not use the roff preprocessor for new manuals!

Now that we have three main parser libraries - roff, man and mdoc -
each one having its own error handling is becoming messy, too.
Thus, start unifying message handling in one central place,
introducing a new generic function mmsg().

coded by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.16 2010/05/15 18:06:02 schwarze Exp $ */
a68 3
	{ NULL }, /* if */
	{ NULL }, /* ie */
	{ NULL }, /* el */
@


1.16
log
@removed restriction on integer manual sections in -man;
by kristaps@@
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.15 2010/04/25 16:32:19 schwarze Exp $ */
a29 1
static	int	  post_de(struct man *);
a68 6
	{ post_de }, /* de */
	{ post_de }, /* dei */
	{ post_de }, /* am */
	{ post_de }, /* ami */
	{ post_de }, /* ig */
	{ NULL }, /* . */
a105 14
	return(1);
}


static int
post_de(struct man *m)
{

	/*
	 * XXX: for the time being, we indiscriminately remove roff
	 * instructions from the parse stream.
	 */
	if (MAN_BLOCK == m->last->type)
		man_node_delete(m, m->last);
@


1.15
log
@Implement roff conditional instructions .if .ie .el, in man(7) only for now;
fixing OpenBSD::PackageName(3p) and friends for espie@@.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.14 2010/03/26 01:22:05 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@kth.se>
a126 1

a146 2
	char		*ep;
	long		 lval;
d154 2
d157 2
a158 2
	m->meta.title = m->meta.vol = m->meta.source = NULL;
	m->meta.msec = 0;
d171 1
a171 6

	lval = strtol(n->string, &ep, 10);
	if (n->string[0] != '\0' && *ep == '\0')
		m->meta.msec = (int)lval;
	else if ( ! man_nwarn(m, n, WMSEC))
		return(0);
a178 1

@


1.14
log
@merge 1.9.17, keeping local patches

* much improved pod2man support and low-level roff robustness
* have -Tlint imply -Wall and -fstrict
* use fewer macros and more enum in libman
* and various bug fixes
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.13 2010/03/25 23:23:01 schwarze Exp $ */
d76 3
@


1.13
log
@merge 1.9.16, keeping local patches

This is mostly cleanup by kristaps@@ after my rather hackish patch
to tolerate the non-text macros .na, .sp, .br in next-line scope;
plus some nesting issues fixed by him, all in man(7).
This survived a full  cd /usr/src; make man.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.12 2010/03/02 01:00:39 schwarze Exp $ */
a16 1
#include <sys/utsname.h>
d30 1
d70 6
d115 15
d201 5
a205 3
	n = m->last;
	man_node_unlink(m, n);
	man_node_freelist(n);
@


1.12
log
@Accept the non-standard macros .Sp (similar to .sp)
and .Vb/.Ve (similar to .nf/.fi) in man(7) mode.
These are not intended to be used manually, but they allow us to
properly render man(7) code autogenerated by pod2man(1),
making Perl and OpenSSL happy in our tree.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.11 2009/12/23 22:30:17 schwarze Exp $ */
d180 2
a181 18
	/* 
	 * The end document shouldn't have the prologue macros as part
	 * of the syntax tree (they encompass only meta-data).  
	 */

	if (m->last->parent->child == m->last) {
		m->last->parent->child = NULL;
		n = m->last;
		m->last = m->last->parent;
		m->next = MAN_NEXT_CHILD;
	} else {
		assert(m->last->prev);
		m->last->prev->next = NULL;
		n = m->last;
		m->last = m->last->prev;
		m->next = MAN_NEXT_SIBLING;
	}

@


1.11
log
@sync to 1.9.13: minor fixes:

correctness/functionality:
 - bugfix: properly ignore lines with only a dot in -man
 - bugfix: .Bl -ohang doesn't allow -width, warn about this
 - improve date string handling by new function mandoc_a2time
 - some HTML improvements
 - significant documentation additions in man.7 and mdoc.7

portability:
 - replace __dead by __attribute__((noreturn))
 - bugfix: correct .Dx rendering
 - some more library names for NetBSD

simplicity:
 - replace hand-rolled putchar(3)-loops by fwrite(3)
 - replace single-character printf(3) by putchar(3)
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.10 2009/12/22 23:58:00 schwarze Exp $ */
d67 3
@


1.10
log
@sync to 1.9.12, mostly portability and refactoring:

correctness/functionality:
- bugfix: do not die when overstep hits the right margin
- new option: -fign-escape
- and various HTML features

portability:
- replace bzero(3) by memset(3), which is ANSI C
- replace err(3)/warn(3) by perror(3)/exit(3), which is ANSI C
- iuse argv[0] instead of __progname
- add time.h to various files for FreeBSD compilation

simplicity:
- do not allocate header/footer data dynamically in *_term.c
- provide and use malloc frontends that error out on failure

for full changelogs, see http://bsd.lv/cgi-bin/cvsweb.cgi/
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.9 2009/10/27 21:40:07 schwarze Exp $ */
a68 2
static	time_t	  man_atotime(const char *);

d154 11
a164 5
	if (NULL == (n = n->next))
		m->meta.date = time(NULL);
	else if (0 == (m->meta.date = man_atotime(n->string))) {
		if ( ! man_nwarn(m, n, WDATE))
			return(0);
a165 1
	}
a196 21
}


static time_t
man_atotime(const char *p)
{
	struct tm	 tm;
	char		*pp;

	memset(&tm, 0, sizeof(struct tm));

	if ((pp = strptime(p, "%b %d %Y", &tm)) && 0 == *pp)
		return(mktime(&tm));
	if ((pp = strptime(p, "%d %b %Y", &tm)) && 0 == *pp)
		return(mktime(&tm));
	if ((pp = strptime(p, "%b %d, %Y", &tm)) && 0 == *pp)
		return(mktime(&tm));
	if ((pp = strptime(p, "%b %Y", &tm)) && 0 == *pp)
		return(mktime(&tm));

	return(0);
@


1.9
log
@sync to 1.9.11: adapt printing of dates to groff conventions,
NetBSD portability fixes and some minor bugfixes and feature enhancements;
also checked that my hyphenation code still works on top of this
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.8 2009/09/18 22:46:14 schwarze Exp $ */
a19 1
#include <errno.h>
d24 1
d141 1
a141 3

	if (NULL == (m->meta.title = strdup(n->string)))
		return(man_nerr(m, n, WNMEM));
a147 1
	errno = 0;
d167 1
a167 2
		if (NULL == (m->meta.source = strdup(n->string)))
			return(man_nerr(m, n, WNMEM));
d172 1
a172 2
		if (NULL == (m->meta.vol = strdup(n->string)))
			return(man_nerr(m, n, WNMEM));
d203 1
a203 1
	bzero(&tm, sizeof(struct tm));
@


1.8
log
@sync to 1.9.2: Add .UC libman macro for compatibility, has no effect.
Correct .UC and .DT to not print their arguments.
Document that .UC and .DT should not be used.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.7 2009/08/22 23:17:40 schwarze Exp $ */
d66 1
@


1.7
log
@another large chunk of -man updates,
among others regarding .DT, .HP, .RS, .RE, .SH, .SS, and scoping,
now in sync vith release 1.9.1
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.6 2009/08/22 20:14:37 schwarze Exp $ */
d65 1
@


1.6
log
@Kristaps@@ significantly overhauled libman.
I'm committing this in one large chunk because in contrast to -mdoc, -man
is mostly untested in OpenBSD anyway, so any fallout can be fixed in-tree.
Among others, improved support for .IP, .HP, and .TP.
Now in sync with release 1.9.0.
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.5 2009/08/22 15:15:37 schwarze Exp $ */
a29 1

d31 2
a32 1
static	time_t	  man_atotime(const char *);
d59 6
a64 3
	{ NULL }, /* nf */
	{ NULL }, /* fi */
	{ NULL }, /* r*/
d67 2
d80 1
a80 1
		break;
d82 2
a84 4
	default:
		if (NULL == man_actions[m->last->tok].post)
			break;
		return((*man_actions[m->last->tok].post)(m));
d86 27
@


1.5
log
@sync to 1.8.4: support .sp in -man
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.4 2009/06/23 22:05:42 schwarze Exp $ */
d59 3
a152 1
		assert(MAN_ROOT == m->last->parent->type);
a156 1
		assert(m->last == m->first);
@


1.4
log
@sync to 1.7.20: error reporting functions for -man
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.3 2009/06/18 23:34:53 schwarze Exp $ */
d58 1
@


1.3
log
@sync to 1.7.19: improved comment handling
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.2 2009/06/14 23:00:57 schwarze Exp $ */
d107 1
a107 2
		return(man_verr(m, n->line, n->pos, 
					"memory exhausted"));
d118 1
a118 1
	else if ( ! man_vwarn(m, n->line, n->pos, "invalid section"))
d126 1
a126 1
		if ( ! man_vwarn(m, n->line, n->pos, "invalid date"))
d135 1
a135 2
			return(man_verr(m, n->line, n->pos, 
						"memory exhausted"));
d141 1
a141 2
			return(man_verr(m, n->line, n->pos, 
						"memory exhausted"));
d174 1
a174 1
	(void)memset(&tm, 0, sizeof(struct tm));
@


1.2
log
@sync to 1.7.16: comments, whitespace and spelling fixes; no functional change
@
text
@d1 1
a1 1
/*	$Id: man_action.c,v 1.11 2009/06/10 20:18:43 kristaps Exp $ */
d35 1
a35 1
	{ NULL }, /* __ */
a55 1
	{ NULL }, /* br */
@


1.1
log
@Initial check-in of mandoc for formatting manuals. ok deraadt@@
@
text
@d1 1
a1 1
/* $Id: man_action.c,v 1.9 2009/04/05 16:34:22 kristaps Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@openbsd.org>
d6 2
a7 3
 * purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all
 * copies.
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
@

