head	1.44;
access;
symbols
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6;
locks; strict;
comment	@.\" @;


1.44
date	2010.08.01.20.37.51;	author schwarze;	state dead;
branches;
next	1.43;

1.43
date	2010.08.01.00.09.48;	author schwarze;	state Exp;
branches;
next	1.42;

1.42
date	2010.07.31.22.07.11;	author schwarze;	state Exp;
branches;
next	1.41;

1.41
date	2010.07.25.18.05.54;	author schwarze;	state Exp;
branches;
next	1.40;

1.40
date	2010.07.15.23.46.58;	author schwarze;	state Exp;
branches;
next	1.39;

1.39
date	2010.07.13.01.09.13;	author schwarze;	state Exp;
branches;
next	1.38;

1.38
date	2010.07.01.15.36.59;	author schwarze;	state Exp;
branches;
next	1.37;

1.37
date	2010.06.27.13.33.43;	author schwarze;	state Exp;
branches;
next	1.36;

1.36
date	2010.06.26.17.56.43;	author schwarze;	state Exp;
branches;
next	1.35;

1.35
date	2010.06.08.00.11.47;	author schwarze;	state Exp;
branches;
next	1.34;

1.34
date	2010.06.06.20.30.08;	author schwarze;	state Exp;
branches;
next	1.33;

1.33
date	2010.06.06.18.08.41;	author schwarze;	state Exp;
branches;
next	1.32;

1.32
date	2010.05.16.02.06.50;	author schwarze;	state Exp;
branches;
next	1.31;

1.31
date	2010.05.15.18.25.50;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2010.05.15.16.48.12;	author schwarze;	state Exp;
branches;
next	1.29;

1.29
date	2010.05.15.15.37.53;	author schwarze;	state Exp;
branches;
next	1.28;

1.28
date	2010.05.14.19.52.43;	author schwarze;	state Exp;
branches;
next	1.27;

1.27
date	2010.05.14.14.47.44;	author schwarze;	state Exp;
branches;
next	1.26;

1.26
date	2010.05.14.01.54.37;	author schwarze;	state Exp;
branches;
next	1.25;

1.25
date	2010.04.07.23.15.05;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.02.12.39.47;	author schwarze;	state Exp;
branches;
next	1.23;

1.23
date	2010.02.26.12.51.25;	author schwarze;	state Exp;
branches;
next	1.22;

1.22
date	2010.02.18.02.11.26;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2010.01.02.02.42.06;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2009.12.24.02.08.14;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2009.12.23.22.30.17;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.21.40.07;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.21.19.13.50;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.19.20.44.35;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.22.23.17.40;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2009.08.22.19.45.39;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2009.08.22.16.41.45;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.22.15.44.02;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.09.21.59.41;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.09.16.36.45;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.26.23.18.08;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.18.21.03.18;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.07.00.10.44;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.24.00.16.52;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.21.19.09.58;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.18.23.34.53;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.18.01.19.02;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.14.23.00.57;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.20.30.40;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.44
log
@Move the new mdoc(7) manual written by kristaps@@, replacing the old one
which had much less information, such that the new one gets installed.
No change to the build system required, no text change in this commit.
Doing the big move early even though a few more improvements will follow.
The duplicate information in mdoc.samples(7) will be cleaned up post-release.
ok jmc@@, and kristaps@@ agreed with the plan, too
@
text
@.\"	$Id: mdoc.7,v 1.43 2010/08/01 00:09:48 schwarze Exp $
.\"
.\" Copyright (c) 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
.\" Copyright (c) 2010 Ingo Schwarze <schwarze@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: August 1 2010 $
.Dt MDOC 7
.Os
.Sh NAME
.Nm mdoc
.Nd mdoc language reference
.Sh DESCRIPTION
The
.Nm mdoc
language is used to format
.Bx
.Ux
manuals.
In this reference document, we describe its syntax, structure, and
usage.
Our reference implementation is mandoc; the
.Sx COMPATIBILITY
section describes compatibility with other troff \-mdoc implementations.
.Pp
An
.Nm
document follows simple rules: lines beginning with the control
character
.Sq \.
are parsed for macros.
Other lines are interpreted within the scope of
prior macros:
.Bd -literal -offset indent
\&.Sh Macro lines change control state.
Other lines are interpreted within the current state.
.Ed
.Sh LANGUAGE SYNTAX
.Nm
documents may contain only graphable 7-bit ASCII characters, the space
character, and, in certain circumstances, the tab character.
All manuals must have
.Ux
line terminators.
.Ss Comments
Text following a
.Sq \e\*q ,
whether in a macro or free-form text line, is ignored to the end of
line.
A macro line with only a control character and comment escape,
.Sq \&.\e\*q ,
is also ignored.
Macro lines with only a control character and optionally whitespace are
stripped from input.
.Ss Reserved Characters
Within a macro line, the following characters are reserved:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&.
.Pq period
.It \&,
.Pq comma
.It \&:
.Pq colon
.It \&;
.Pq semicolon
.It \&(
.Pq left-parenthesis
.It \&)
.Pq right-parenthesis
.It \&[
.Pq left-bracket
.It \&]
.Pq right-bracket
.It \&?
.Pq question
.It \&!
.Pq exclamation
.It \&|
.Pq vertical bar
.El
.Pp
Use of reserved characters is described in
.Sx MACRO SYNTAX .
For general use in macro lines, these characters can either be escaped
with a non-breaking space
.Pq Sq \e&
or, if applicable, an appropriate escape sequence can be used.
.Ss Special Characters
Special characters may occur in both macro and free-form lines.
Sequences begin with the escape character
.Sq \e
followed by either an open-parenthesis
.Sq \&(
for two-character sequences; an open-bracket
.Sq \&[
for n-character sequences (terminated at a close-bracket
.Sq \&] ) ;
or a single one-character sequence.
See
.Xr mandoc_char 7
for a complete list.
Examples include
.Sq \e(em
.Pq em-dash
and
.Sq \ee
.Pq back-slash .
.Ss Text Decoration
Terms may be text-decorated using the
.Sq \ef
escape followed by an indicator: B (bold), I, (italic), R (Roman), or P
(revert to previous mode):
.Pp
.D1 \efBbold\efR \efIitalic\efP
.Pp
A numerical representation 3, 2, or 1 (bold, italic, and Roman,
respectively) may be used instead.
A text decoration is valid within
the current font scope only: if a macro opens a font scope alongside
its own scope, such as
.Sx \&Bf
.Cm \&Sy ,
in-scope invocations of
.Sq \ef
are only valid within the font scope of the macro.
If
.Sq \ef
is specified outside of any font scope, such as in unenclosed, free-form
text, it will affect the remainder of the document.
.Pp
Note this form is
.Em not
recommended for
.Nm ,
which encourages semantic annotation.
.Ss Predefined Strings
Historically,
.Xr groff 1
also defined a set of package-specific
.Dq predefined strings ,
which, like
.Sx Special Characters ,
mark special output characters and strings by way of input codes.
Predefined strings are escaped with the slash-asterisk,
.Sq \e* :
single-character
.Sq \e*X ,
two-character
.Sq \e*(XX ,
and N-character
.Sq \e*[N] .
See
.Xr mandoc_char 7
for a complete list.
Examples include
.Sq \e*(Am
.Pq ampersand
and
.Sq \e*(Ba
.Pq vertical bar .
.Ss Whitespace
Whitespace consists of the space character.
In free-form lines, whitespace is preserved within a line; un-escaped
trailing spaces are stripped from input (unless in a literal context).
Blank free-form lines, which may include whitespace, are only permitted
within literal contexts.
.Pp
In macro lines, whitespace delimits arguments and is discarded.
If arguments are quoted, whitespace within the quotes is retained.
.Ss Quotation
Macro arguments may be quoted with double-quotes to group
space-delimited terms or to retain blocks of whitespace.
A quoted argument begins with a double-quote preceded by whitespace.
The next double-quote not pair-wise adjacent to another double-quote
terminates the literal, regardless of surrounding whitespace.
.Pp
Note that any quoted text, even if it would cause a macro invocation
when unquoted, is considered literal text.
Thus, the following produces
.Sq Op "Fl a" :
.Bd -literal -offset indent
\&.Op "Fl a"
.Ed
.Pp
In free-form mode, quotes are regarded as opaque text.
.Ss Dates
There are several macros in
.Nm
that require a date argument.
The canonical form for dates is the American format:
.Pp
.D1 Cm Month Day , Year
.Pp
The
.Cm Day
value is an optionally zero-padded numeral.
The
.Cm Month
value is the full month name.
The
.Cm Year
value is the full four-digit year.
.Pp
Reduced form dates are broken-down canonical form dates:
.Pp
.D1 Cm Month , Year
.D1 Cm Year
.Pp
Some examples of valid dates follow:
.Pp
.D1 "May, 2009" Pq reduced form
.D1 "2009" Pq reduced form
.D1 "May 20, 2009" Pq canonical form
.Ss Scaling Widths
Many macros support scaled widths for their arguments, such as
stipulating a two-inch list indentation with the following:
.Bd -literal -offset indent
\&.Bl -tag -width 2i
.Ed
.Pp
The syntax for scaled widths is
.Sq Li [+-]?[0-9]*.[0-9]*[:unit:] ,
where a decimal must be preceded or proceeded by at least one digit.
Negative numbers, while accepted, are truncated to zero.
The following scaling units are accepted:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It c
centimetre
.It i
inch
.It P
pica (~1/6 inch)
.It p
point (~1/72 inch)
.It f
synonym for
.Sq u
.It v
default vertical span
.It m
width of rendered
.Sq m
.Pq em
character
.It n
width of rendered
.Sq n
.Pq en
character
.It u
default horizontal span
.It M
mini-em (~1/100 em)
.El
.Pp
Using anything other than
.Sq m ,
.Sq n ,
.Sq u ,
or
.Sq v
is necessarily non-portable across output media.
See
.Sx COMPATIBILITY .
.Ss Sentence Spacing
When composing a manual, make sure that your sentences end at the end of
a line.
By doing so, front-ends will be able to apply the proper amount of
spacing after the end of sentence (unescaped) period, exclamation mark,
or question mark followed by zero or more non-sentence closing
delimiters (
.Ns Sq \&) ,
.Sq \&] ,
.Sq \&' ,
.Sq \&" ) .
.Pp
The proper spacing is also intelligently preserved if a sentence ends at
the boundary of a macro line, e.g.,
.Pp
.D1 \&Xr mandoc 1 \.
.D1 \&Fl T \&Ns \&Cm ascii \.
.Sh MANUAL STRUCTURE
A well-formed
.Nm
document consists of a document prologue followed by one or more
sections.
.Pp
The prologue, which consists of the
.Sx \&Dd ,
.Sx \&Dt ,
and
.Sx \&Os
macros in that order, is required for every document.
.Pp
The first section (sections are denoted by
.Sx \&Sh )
must be the NAME section, consisting of at least one
.Sx \&Nm
followed by
.Sx \&Nd .
.Pp
Following that, convention dictates specifying at least the
.Em SYNOPSIS
and
.Em DESCRIPTION
sections, although this varies between manual sections.
.Pp
The following is a well-formed skeleton
.Nm
file:
.Bd -literal -offset indent
\&.Dd $\&Mdocdate$
\&.Dt mdoc 7
\&.Os
\&.Sh NAME
\&.Nm foo
\&.Nd a description goes here
\&.\e\*q The next is for sections 2, 3, & 9 only.
\&.\e\*q .Sh LIBRARY
\&.Sh SYNOPSIS
\&.Nm foo
\&.Op Fl options
\&.Ar
\&.Sh DESCRIPTION
The
\&.Nm
utility processes files ...
\&.\e\*q .Sh IMPLEMENTATION NOTES
\&.\e\*q The next is for sections 2, 3, & 9 only.
\&.\e\*q .Sh RETURN VALUES
\&.\e\*q The next is for sections 1, 6, 7, & 8 only.
\&.\e\*q .Sh ENVIRONMENT
\&.\e\*q .Sh FILES
\&.\e\*q The next is for sections 1 & 8 only.
\&.\e\*q .Sh EXIT STATUS
\&.\e\*q .Sh EXAMPLES
\&.\e\*q The next is for sections 1, 4, 6, 7, & 8 only.
\&.\e\*q .Sh DIAGNOSTICS
\&.\e\*q The next is for sections 2, 3, & 9 only.
\&.\e\*q .Sh ERRORS
\&.\e\*q .Sh SEE ALSO
\&.\e\*q .Xr foobar 1
\&.\e\*q .Sh STANDARDS
\&.\e\*q .Sh HISTORY
\&.\e\*q .Sh AUTHORS
\&.\e\*q .Sh CAVEATS
\&.\e\*q .Sh BUGS
\&.\e\*q .Sh SECURITY CONSIDERATIONS
.Ed
.Pp
The sections in a
.Nm
document are conventionally ordered as they appear above.
Sections should be composed as follows:
.Bl -ohang -offset Ds
.It Em NAME
The name(s) and a one-line description of the documented material.
The syntax for this as follows:
.Bd -literal -offset indent
\&.Nm name0
\&.Nm name1
\&.Nm name2
\&.Nd a one-line description
.Ed
.Pp
The
.Sx \&Nm
macro(s) must precede the
.Sx \&Nd
macro.
.Pp
See
.Sx \&Nm
and
.Sx \&Nd .
.It Em LIBRARY
The name of the library containing the documented material, which is
assumed to be a function in a section 2, 3, or 9 manual.
The syntax for this is as follows:
.Bd -literal -offset indent
\&.Lb libarm
.Ed
.Pp
See
.Sx \&Lb .
.It Em SYNOPSIS
Documents the utility invocation syntax, function call syntax, or device
configuration.
.Pp
For the first, utilities (sections 1, 6, and 8), this is
generally structured as follows:
.Bd -literal -offset indent
\&.Nm foo
\&.Op Fl v
\&.Op Fl o Ar file
\&.Op Ar
\&.Nm bar
\&.Op Fl v
\&.Op Fl o Ar file
\&.Op Ar
.Ed
.Pp
For the second, function calls (sections 2, 3, 9):
.Bd -literal -offset indent
\&.Vt extern const char *global;
\&.In header.h
\&.Ft "char *"
\&.Fn foo "const char *src"
\&.Ft "char *"
\&.Fn bar "const char *src"
.Ed
.Pp
And for the third, configurations (section 4):
.Bd -literal -offset indent
\&.Cd \*qit* at isa? port 0x2e\*q
\&.Cd \*qit* at isa? port 0x4e\*q
.Ed
.Pp
Manuals not in these sections generally don't need a
.Em SYNOPSIS .
.Pp
Some macros are displayed differently in the
.Em SYNOPSIS
section, particularly
.Sx \&Nm ,
.Sx \&Cd ,
.Sx \&Fd ,
.Sx \&Fn ,
.Sx \&Fo ,
.Sx \&In ,
.Sx \&Vt ,
and
.Sx \&Ft .
All of these macros are output on their own line.
If two such dissimilar macros are pair-wise invoked (except for
.Sx \&Ft
before
.Sx \&Fo
or
.Sx \&Fn ) ,
they are separated by a vertical space, unless in the case of
.Sx \&Fo ,
.Sx \&Fn ,
and
.Sx \&Ft ,
which are always separated by vertical space.
.Pp
When text and macros following an
.Sx \&Nm
macro starting an input line span multiple output lines,
all output lines but the first will be indented to align
with the text immediately following the
.Sx \&Nm
macro, up to the next
.Sx \&Nm ,
.Sx \&Sh ,
or
.Sx \&Ss
macro or the end of an enclosing block, whichever comes first.
.It Em DESCRIPTION
This expands upon the brief, one-line description in
.Em NAME .
It usually contains a break-down of the options (if documenting a
command), such as:
.Bd -literal -offset indent
The arguments are as follows:
\&.Bl \-tag \-width Ds
\&.It Fl v
Print verbose information.
\&.El
.Ed
.Pp
Manuals not documenting a command won't include the above fragment.
.It Em IMPLEMENTATION NOTES
Implementation-specific notes should be kept here.
This is useful when implementing standard functions that may have side
effects or notable algorithmic implications.
.It Em RETURN VALUES
This section is the dual of
.Em EXIT STATUS ,
which is used for commands.
It documents the return values of functions in sections 2, 3, and 9.
.Pp
See
.Sx \&Rv .
.It Em ENVIRONMENT
Lists the environment variables used by the utility,
and explains the syntax and semantics of their values.
The
.Xr environ 7
manual provides examples of typical content and formatting.
.Pp
See
.Sx \&Ev .
.It Em FILES
Documents files used.
It's helpful to document both the file name and a short description of how
the file is used (created, modified, etc.).
.Pp
See
.Sx \&Pa .
.It Em EXIT STATUS
Command exit status for section 1, 6, and 8 manuals.
This section is the dual of
.Em RETURN VALUES ,
which is used for functions.
Historically, this information was described in
.Em DIAGNOSTICS ,
a practise that is now discouraged.
.Pp
See
.Sx \&Ex .
.It Em EXAMPLES
Example usages.
This often contains snippets of well-formed, well-tested invocations.
Make doubly sure that your examples work properly!
.It Em DIAGNOSTICS
Documents error conditions.
This is most useful in section 4 manuals.
Historically, this section was used in place of
.Em EXIT STATUS
for manuals in sections 1, 6, and 8; however, this practise is
discouraged.
.Pp
See
.Sx \&Bl
.Fl diag .
.It Em ERRORS
Documents error handling in sections 2, 3, and 9.
.Pp
See
.Sx \&Er .
.It Em SEE ALSO
References other manuals with related topics.
This section should exist for most manuals.
Cross-references should conventionally be ordered first by section, then
alphabetically.
.Pp
See
.Sx \&Xr .
.It Em STANDARDS
References any standards implemented or used.
If not adhering to any standards, the
.Em HISTORY
section should be used instead.
.Pp
See
.Sx \&St .
.It Em HISTORY
The history of any manual without a
.Em STANDARDS
section should be described in this section.
.It Em AUTHORS
Credits to authors, if applicable, should appear in this section.
Authors should generally be noted by both name and email address.
.Pp
See
.Sx \&An .
.It Em CAVEATS
Common misuses and misunderstandings should be explained
in this section.
.It Em BUGS
Known bugs, limitations and work-arounds should be described
in this section.
.It Em SECURITY CONSIDERATIONS
Documents any security precautions that operators should consider.
.El
.Sh MACRO SYNTAX
Macros are one to three three characters in length and begin with a
control character,
.Sq \&. ,
at the beginning of the line.
An arbitrary amount of whitespace may sit between the control character
and the macro name.
Thus, the following are equivalent:
.Bd -literal -offset indent
\&.Pp
\&.\ \ \ \&Pp
.Ed
.Pp
The syntax of a macro depends on its classification.
In this section,
.Sq \-arg
refers to macro arguments, which may be followed by zero or more
.Sq parm
parameters;
.Sq \&Yo
opens the scope of a macro; and if specified,
.Sq \&Yc
closes it out.
.Pp
The
.Em Callable
column indicates that the macro may be called subsequent to the initial
line-macro.
If a macro is not callable, then its invocation after the initial line
macro is interpreted as opaque text, such that
.Sq \&.Fl \&Sh
produces
.Sq Fl \&Sh .
.Pp
The
.Em Parsed
column indicates whether the macro may be followed by further
(ostensibly callable) macros.
If a macro is not parsed, subsequent macro invocations on the line
will be interpreted as opaque text.
.Pp
The
.Em Scope
column, if applicable, describes closure rules.
.Ss Block full-explicit
Multi-line scope closed by an explicit closing macro.
All macros contains bodies; only
.Sx \&Bf
contains a head.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB
\(lBbody...\(rB
\&.Yc
.Ed
.Pp
.Bl -column -compact -offset indent "MacroX" "CallableX" "ParsedX" "closed by XXX"
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&Bd  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ed
.It Sx \&Bf  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ef
.It Sx \&Bk  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Ek
.It Sx \&Bl  Ta    \&No     Ta    \&No     Ta    closed by Sx \&El
.It Sx \&Ed  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bd
.It Sx \&Ef  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bf
.It Sx \&Ek  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bk
.It Sx \&El  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Bl
.El
.Ss Block full-implicit
Multi-line scope closed by end-of-file or implicitly by another macro.
All macros have bodies; some
.Po
.Sx \&It Fl bullet ,
.Fl hyphen ,
.Fl dash ,
.Fl enum ,
.Fl item
.Pc
don't have heads; only one
.Po
.Sx \&It
in
.Sx \&Bl Fl column
.Pc
has multiple heads.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead... \(lBTa head...\(rB\(rB
\(lBbody...\(rB
.Ed
.Pp
.Bl -column -compact -offset indent "MacroX" "CallableX" "ParsedX" "closed by XXXXXXXXXXX"
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&It  Ta    \&No     Ta    Yes      Ta    closed by Sx \&It , Sx \&El
.It Sx \&Nd  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Sh
.It Sx \&Nm  Ta    \&No     Ta  Yes Ta closed by Sx \&Nm , Sx \&Sh , Sx \&Ss
.It Sx \&Sh  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Sh
.It Sx \&Ss  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Sh , Sx \&Ss
.El
.Pp
Note that the
.Sx \&Nm
macro is a
.Sx Block full-implicit
macro only when invoked as the first macro
in a
.Em SYNOPSIS
section line, else it is
.Sx In-line .
.Ss Block partial-explicit
Like block full-explicit, but also with single-line scope.
Each has at least a body and, in limited circumstances, a head
.Po
.Sx \&Fo ,
.Sx \&Eo
.Pc
and/or tail
.Pq Sx \&Ec .
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB
\(lBbody...\(rB
\&.Yc \(lBtail...\(rB

\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB \
\(lBbody...\(rB \&Yc \(lBtail...\(rB
.Ed
.Pp
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Sx \&Ac  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Ao
.It Sx \&Ao  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Ac
.It Sx \&Bc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Bo
.It Sx \&Bo  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Bc
.It Sx \&Brc Ta    Yes      Ta    Yes      Ta    opened by Sx \&Bro
.It Sx \&Bro Ta    Yes      Ta    Yes      Ta    closed by Sx \&Brc
.It Sx \&Dc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Do
.It Sx \&Do  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Dc
.It Sx \&Ec  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Eo
.It Sx \&Eo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Ec
.It Sx \&Fc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Fo
.It Sx \&Fo  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Fc
.It Sx \&Oc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Oo
.It Sx \&Oo  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Oc
.It Sx \&Pc  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Po
.It Sx \&Po  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Pc
.It Sx \&Qc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Oo
.It Sx \&Qo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Oc
.It Sx \&Re  Ta    \&No     Ta    \&No     Ta    opened by Sx \&Rs
.It Sx \&Rs  Ta    \&No     Ta    \&No     Ta    closed by Sx \&Re
.It Sx \&Sc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&So
.It Sx \&So  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Sc
.It Sx \&Xc  Ta    Yes      Ta    Yes      Ta    opened by Sx \&Xo
.It Sx \&Xo  Ta    Yes      Ta    Yes      Ta    closed by Sx \&Xc
.El
.Ss Block partial-implicit
Like block full-implicit, but with single-line scope closed by
.Sx Reserved Characters
or end of line.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBbody...\(rB \(lBres...\(rB
.Ed
.Pp
.Bl -column "MacroX" "CallableX" "ParsedX" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed
.It Sx \&Aq  Ta    Yes      Ta    Yes
.It Sx \&Bq  Ta    Yes      Ta    Yes
.It Sx \&Brq Ta    Yes      Ta    Yes
.It Sx \&D1  Ta    \&No     Ta    \&Yes
.It Sx \&Dl  Ta    \&No     Ta    Yes
.It Sx \&Dq  Ta    Yes      Ta    Yes
.It Sx \&Op  Ta    Yes      Ta    Yes
.It Sx \&Pq  Ta    Yes      Ta    Yes
.It Sx \&Ql  Ta    Yes      Ta    Yes
.It Sx \&Qq  Ta    Yes      Ta    Yes
.It Sx \&Sq  Ta    Yes      Ta    Yes
.It Sx \&Vt  Ta    Yes      Ta    Yes
.El
.Pp
Note that the
.Sx \&Vt
macro is a
.Sx Block partial-implicit
only when invoked as the first macro
in a
.Em SYNOPSIS
section line, else it is
.Sx In-line .
.Ss In-line
Closed by
.Sx Reserved Characters ,
end of line, fixed argument lengths, and/or subsequent macros.
In-line macros have only text children.
If a number (or inequality) of arguments is
.Pq n ,
then the macro accepts an arbitrary number of arguments.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB \(lbres...\(rb

\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB Yc...

\&.Yo \(lB\-arg \(lBval...\(rB\(rB arg0 arg1 argN
.Ed
.Pp
.Bl -column "MacroX" "CallableX" "ParsedX" "Arguments" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Arguments
.It Sx \&%A  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%B  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%C  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%D  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%I  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%J  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%N  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%O  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%P  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%Q  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%R  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%T  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%U  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&%V  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&Ad  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&An  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Ap  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Ar  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&At  Ta    Yes      Ta    Yes      Ta    1
.It Sx \&Bsx Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Bt  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Bx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Cd  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Cm  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Db  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&Dd  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Dt  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Dv  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Dx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Em  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&En  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Er  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Es  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Ev  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Ex  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Fa  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Fd  Ta    \&No     Ta    \&No     Ta    >0
.It Sx \&Fl  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Fn  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Fr  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ft  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Fx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Hf  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ic  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&In  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Lb  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&Li  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Lk  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Lp  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Ms  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Mt  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Nm  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&No  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Ns  Ta    Yes      Ta    Yes      Ta    0
.It Sx \&Nx  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Os  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ot  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Ox  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Pa  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Pf  Ta    Yes      Ta    Yes      Ta    1
.It Sx \&Pp  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Rv  Ta    \&No     Ta    \&No     Ta    n
.It Sx \&Sm  Ta    \&No     Ta    \&No     Ta    1
.It Sx \&St  Ta    \&No     Ta    Yes      Ta    1
.It Sx \&Sx  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Sy  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Tn  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Ud  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&Ux  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Va  Ta    Yes      Ta    Yes      Ta    n
.It Sx \&Vt  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&Xr  Ta    Yes      Ta    Yes      Ta    >0
.It Sx \&br  Ta    \&No     Ta    \&No     Ta    0
.It Sx \&sp  Ta    \&No     Ta    \&No     Ta    1
.El
.Sh REFERENCE
This section is a canonical reference of all macros, arranged
alphabetically.
For the scoping of individual macros, see
.Sx MACRO SYNTAX .
.Ss \&%A
Author name of an
.Sx \&Rs
block.
Multiple authors should each be accorded their own
.Sx \%%A
line.
Author names should be ordered with full or abbreviated forename(s)
first, then full surname.
.Ss \&%B
Book title of an
.Sx \&Rs
block.
This macro may also be used in a non-bibliographic context when
referring to book titles.
.Ss \&%C
Publication city or location of an
.Sx \&Rs
block.
.Pp
.Em Remarks :
this macro is not implemented in
.Xr groff 1 .
.Ss \&%D
Publication date of an
.Sx \&Rs
block.
This should follow the reduced or canonical form syntax described in
.Sx Dates .
.Ss \&%I
Publisher or issuer name of an
.Sx \&Rs
block.
.Ss \&%J
Journal name of an
.Sx \&Rs
block.
.Ss \&%N
Issue number (usually for journals) of an
.Sx \&Rs
block.
.Ss \&%O
Optional information of an
.Sx \&Rs
block.
.Ss \&%P
Book or journal page number of an
.Sx \&Rs
block.
.Ss \&%Q
Institutional author (school, government, etc.) of an
.Sx \&Rs
block.
Multiple institutional authors should each be accorded their own
.Sx \&%Q
line.
.Ss \&%R
Technical report name of an
.Sx \&Rs
block.
.Ss \&%T
Article title of an
.Sx \&Rs
block.
This macro may also be used in a non-bibliographical context when
referring to article titles.
.Ss \&%U
URI of reference document.
.Ss \&%V
Volume number of an
.Sx \&Rs
block.
.Ss \&Ac
Close an
.Sx \&Ao
block.
Does not have any tail arguments.
.Ss \&Ad
Memory address.
Do not use this for postal addresses.
.Pp
Examples:
.D1 \&.Ad [0,$]
.D1 \&.Ad 0x00000000
.Ss \&An
Author name.
Requires either the name of an author or one of the following arguments:
.Pp
.Bl -tag -width "-nosplitX" -offset indent -compact
.It Fl split
Start a new output line before each subsequent invocation of
.Sx \&An .
.It Fl nosplit
The opposite of
.Fl split .
.El
.Pp
The default is
.Fl nosplit .
The effect of selecting either of the
.Fl split
modes ends at the beginning of the
.Em AUTHORS
section.
In the
.Em AUTHORS
section, the default is
.Fl nosplit
for the first author listing and
.Fl split
for all other author listings.
.Pp
Examples:
.D1 \&.An -nosplit
.D1 \&.An Kristaps Dzonsons \&Aq kristaps@@bsd.lv
.Ss \&Ao
Begin a block enclosed by angle brackets.
Does not have any head arguments.
.Pp
Examples:
.D1 \&.Fl -key= \&Ns \&Ao \&Ar val \&Ac
.Pp
See also
.Sx \&Aq .
.Ss \&Ap
Inserts an apostrophe without any surrounding whitespace.
This is generally used as a grammatical device when referring to the verb
form of a function.
.Pp
Examples:
.D1 \&.Fn execve \&Ap d
.Ss \&Aq
Encloses its arguments in angle brackets.
.Pp
Examples:
.D1 \&.Fl -key= \&Ns \&Aq \&Ar val
.Pp
.Em Remarks :
this macro is often abused for rendering URIs, which should instead use
.Sx \&Lk
or
.Sx \&Mt ,
or to note pre-processor
.Dq Li #include
statements, which should use
.Sx \&In .
.Pp
See also
.Sx \&Ao .
.Ss \&Ar
Command arguments.
If an argument is not provided, the string
.Dq file ...\&
is used as a default.
.Pp
Examples:
.D1 \&.Fl o \&Ns \&Ar file1
.D1 \&.Ar
.D1 \&.Ar arg1 , arg2 .
.Ss \&At
Formats an AT&T version.
Accepts one optional argument:
.Pp
.Bl -tag -width "v[1-7] | 32vX" -offset indent -compact
.It Cm v[1-7] | 32v
A version of
.At .
.It Cm V[.[1-4]]?
A version of
.At V .
.El
.Pp
Note that these arguments do not begin with a hyphen.
.Pp
Examples:
.D1 \&.At
.D1 \&.At V.1
.Pp
See also
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
.Sx \&Ox ,
and
.Sx \&Ux .
.Ss \&Bc
Close a
.Sx \&Bo
block.
Does not have any tail arguments.
.Ss \&Bd
Begin a display block.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Bd
.Fl Ns Ar type
.Op Fl offset Ar width
.Op Fl compact
.Ed
.Pp
Display blocks are used to select a different indentation and
justification than the one used by the surrounding text.
They may contain both macro lines and free-form text lines.
By default, a display block is preceded by a vertical space.
.Pp
The
.Ar type
must be one of the following:
.Bl -tag -width 13n -offset indent
.It Fl centered
Centre-justify each line.
Using this display type is not recommended; many
.Nm
implementations render it poorly.
.It Fl filled
Left- and right-justify the block.
.It Fl literal
Do not justify the block at all.
Preserve white space as it appears in the input.
.It Fl ragged
Only left-justify the block.
.It Fl unfilled
An alias for
.Fl literal .
.El
.Pp
The
.Ar type
must be provided first.
Additional arguments may follow:
.Bl -tag -width 13n -offset indent
.It Fl offset Ar width
Indent the display by the
.Ar width ,
which may be one of the following:
.Bl -item
.It
One of the pre-defined strings
.Cm indent ,
the width of standard indentation;
.Cm indent-two ,
twice
.Cm indent ;
.Cm left ,
which has no effect;
.Cm right ,
which justifies to the right margin; or
.Cm center ,
which aligns around an imagined centre axis.
.It
A macro invocation, which selects a predefined width
associated with that macro.
The most popular is the imaginary macro
.Ar \&Ds ,
which resolves to
.Sy 6n .
.It
A width using the syntax described in
.Sx Scaling Widths .
.It
An arbitrary string, which indents by the length of this string.
.El
.Pp
When the argument is missing,
.Fl offset
is ignored.
.It Fl compact
Do not assert vertical space before the display.
.El
.Pp
Examples:
.Bd -literal -offset indent
\&.Bd \-literal \-offset indent \-compact
   Hello       world.
\&.Ed
.Ed
.Pp
See also
.Sx \&D1
and
.Sx \&Dl .
.Ss \&Bf
Change the font mode for a scoped block of text.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Bf
.Oo
.Fl emphasis | literal | symbolic |
.Cm \&Em | \&Li | \&Sy
.Oc
.Ed
.Pp
The
.Fl emphasis
and
.Cm \&Em
argument are equivalent, as are
.Fl symbolic
and
.Cm \&Sy,
and
.Fl literal
and
.Cm \&Li .
Without an argument, this macro does nothing.
The font mode continues until broken by a new font mode in a nested
scope or
.Sx \&Ef
is encountered.
.Pp
See also
.Sx \&Li ,
.Sx \&Ef ,
.Sx \&Em ,
and
.Sx \&Sy .
.Ss \&Bk
Keep the output generated from each macro input line together
on one single output line.
Line breaks in free-form text lines are unaffected.
The syntax is as follows:
.Pp
.D1 Pf \. Sx \&Bk Fl words
.Pp
The
.Fl words
argument is required; additional arguments are ignored.
.Pp
The following example will not break within each
.Sx \&Op
macro line:
.Bd -literal -offset indent
\&.Bk \-words
\&.Op Fl f Ar flags
\&.Op Fl o Ar output
\&.Ek
.Ed
.Pp
Be careful in using over-long lines within a keep block!
Doing so will clobber the right margin.
.Ss \&Bl
Begin a list.
Lists consist of items started by the
.Sx \&It
macro, containing a head or a body or both.
The list syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Bl
.Fl Ns Ar type
.Op Fl width Ar val
.Op Fl offset Ar val
.Op Fl compact
.Op HEAD ...
.Ed
.Pp
The list
.Ar type
is mandatory and must be specified first.
The
.Fl width
and
.Fl offset
arguments accept
.Sx Scaling Widths
or use the length of the given string.
The
.Fl offset
is a global indentation for the whole list, affecting both item heads
and bodies.
For those list types supporting it, the
.Fl width
argument requests an additional indentation of item bodies,
to be added to the
.Fl offset .
Unless the
.Fl compact
argument is specified, list entries are separated by vertical space.
.Pp
A list must specify one of the following list types:
.Bl -tag -width 12n -offset indent
.It Fl bullet
No item heads can be specified, but a bullet will be printed at the head
of each item.
Item bodies start on the same output line as the bullet
and are indented according to the
.Fl width
argument.
.It Fl column
A columnated list.
The
.Fl width
argument has no effect; instead, each argument specifies the width
of one column, using either the
.Sx Scaling Widths
syntax or the string length of the argument.
If the first line of the body of a
.Fl column
list is not an
.Sx \&It
macro line,
.Sx \&It
contexts spanning one input line each are implied until an
.Sx \&It
macro line is encountered, at which point items start being interpreted as
described in the
.Sx \&It
documentation.
.It Fl dash
Like
.Fl bullet ,
except that dashes are used in place of bullets.
.It Fl diag
Like
.Fl inset ,
except that item heads are not parsed for macro invocations.
.\" but with additional formatting to the head.
.It Fl enum
A numbered list.
Formatted like
.Fl bullet ,
except that cardinal numbers are used in place of bullets,
starting at 1.
.It Fl hang
Like
.Fl tag ,
except that the first lines of item bodies are not indented, but follow
the item heads like in
.Fl inset
lists.
.It Fl hyphen
Synonym for
.Fl dash .
.It Fl inset
Item bodies follow items heads on the same line, using normal inter-word
spacing.
Bodies are not indented, and the
.Fl width
argument is ignored.
.It Fl item
No item heads can be specified, and none are printed.
Bodies are not indented, and the
.Fl width
argument is ignored.
.It Fl ohang
Item bodies start on the line following item heads and are not indented.
The
.Fl width
argument is ignored.
.It Fl tag
Item bodies are indented according to the
.Fl width
argument.
When an item head fits inside the indentation, the item body follows
this head on the same output line.
Otherwise, the body starts on the output line following the head.
.El
.Pp
See also
.Sx \&El
and
.Sx \&It .
.Ss \&Bo
Begin a block enclosed by square brackets.
Does not have any head arguments.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Bo 1 ,
\&.Dv BUFSIZ \&Bc
.Ed
.Pp
See also
.Sx \&Bq .
.Ss \&Bq
Encloses its arguments in square brackets.
.Pp
Examples:
.D1 \&.Bq 1 , \&Dv BUFSIZ
.Pp
.Em Remarks :
this macro is sometimes abused to emulate optional arguments for
commands; the correct macros to use for this purpose are
.Sx \&Op ,
.Sx \&Oo ,
and
.Sx \&Oc .
.Pp
See also
.Sx \&Bo .
.Ss \&Brc
Close a
.Sx \&Bro
block.
Does not have any tail arguments.
.Ss \&Bro
Begin a block enclosed by curly braces.
Does not have any head arguments.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Bro 1 , ... ,
\&.Va n \&Brc
.Ed
.Pp
See also
.Sx \&Brq .
.Ss \&Brq
Encloses its arguments in curly braces.
.Pp
Examples:
.D1 \&.Brq 1 , ... , \&Va n
.Pp
See also
.Sx \&Bro .
.Ss \&Bsx
Format the BSD/OS version provided as an argument, or a default value if
no argument is provided.
.Pp
Examples:
.D1 \&.Bsx 1.0
.D1 \&.Bsx
.Pp
See also
.Sx \&At ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
.Sx \&Ox ,
and
.Sx \&Ux .
.Ss \&Bt
Prints
.Dq is currently in beta test.
.Ss \&Bx
Format the BSD version provided as an argument, or a default value if no
argument is provided.
.Pp
Examples:
.D1 \&.Bx 4.4
.D1 \&.Bx
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
.Sx \&Ox ,
and
.Sx \&Ux .
.Ss \&Cd
Kernel configuration declaration.
This denotes strings accepted by
.Xr config 8 .
.Pp
Examples:
.D1 \&.Cd device le0 at scode?
.Pp
.Em Remarks :
this macro is commonly abused by using quoted literals to retain
whitespace and align consecutive
.Sx \&Cd
declarations.
This practise is discouraged.
.Ss \&Cm
Command modifiers.
Useful when specifying configuration options or keys.
.Pp
Examples:
.D1 \&.Cm ControlPath
.D1 \&.Cm ControlMaster
.Pp
See also
.Sx \&Fl .
.Ss \&D1
One-line indented display.
This is formatted by the default rules and is useful for simple indented
statements.
It is followed by a newline.
.Pp
Examples:
.D1 \&.D1 \&Fl abcdefgh
.Pp
See also
.Sx \&Bd
and
.Sx \&Dl .
.Ss \&Db
Switch debugging mode.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Db Cm on | off
.Pp
This macro is ignored by
.Xr mandoc 1 .
.Ss \&Dc
Close a
.Sx \&Do
block.
Does not have any tail arguments.
.Ss \&Dd
Document date.
This is the mandatory first macro of any
.Nm
manual.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Dd Op Ar date
.Pp
The
.Ar date
may be either
.Ar $\&Mdocdate$ ,
which signifies the current manual revision date dictated by
.Xr cvs 1 ,
or instead a valid canonical date as specified by
.Sx Dates .
If a date does not conform or is empty, the current date is used.
.Pp
Examples:
.D1 \&.Dd $\&Mdocdate$
.D1 \&.Dd $\&Mdocdate: July 21 2007$
.D1 \&.Dd July 21, 2007
.Pp
See also
.Sx \&Dt
and
.Sx \&Os .
.Ss \&Dl
One-line intended display.
This is formatted as literal text and is useful for commands and
invocations.
It is followed by a newline.
.Pp
Examples:
.D1 \&.Dl % mandoc mdoc.7 \e(ba less
.Pp
See also
.Sx \&Bd
and
.Sx \&D1 .
.Ss \&Do
Begin a block enclosed by double quotes.
Does not have any head arguments.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Do
April is the cruellest month
\&.Dc
\e(em T.S. Eliot
.Ed
.Pp
See also
.Sx \&Dq .
.Ss \&Dq
Encloses its arguments in
.Dq typographic
double-quotes.
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Dq April is the cruellest month
\e(em T.S. Eliot
.Ed
.Pp
See also
.Sx \&Qq ,
.Sx \&Sq ,
and
.Sx \&Do .
.Ss \&Dt
Document title.
This is the mandatory second macro of any
.Nm
file.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Dt
.Oo
.Ar title
.Oo
.Ar section
.Op Ar volume | arch
.Oc
.Oc
.Ed
.Pp
Its arguments are as follows:
.Bl -tag -width Ds -offset Ds
.It Ar title
The document's title (name), defaulting to
.Dq UNKNOWN
if unspecified.
It should be capitalised.
.It Ar section
The manual section.
This may be one of
.Ar 1
.Pq utilities ,
.Ar 2
.Pq system calls ,
.Ar 3
.Pq libraries ,
.Ar 3p
.Pq Perl libraries ,
.Ar 4
.Pq devices ,
.Ar 5
.Pq file formats ,
.Ar 6
.Pq games ,
.Ar 7
.Pq miscellaneous ,
.Ar 8
.Pq system utilities ,
.Ar 9
.Pq kernel functions ,
.Ar X11
.Pq X Window System ,
.Ar X11R6
.Pq X Window System ,
.Ar unass
.Pq unassociated ,
.Ar local
.Pq local system ,
.Ar draft
.Pq draft manual ,
or
.Ar paper
.Pq paper .
It should correspond to the manual's filename suffix and defaults to
.Dq 1
if unspecified.
.It Ar volume
This overrides the volume inferred from
.Ar section .
This field is optional, and if specified, must be one of
.Ar USD
.Pq users' supplementary documents ,
.Ar PS1
.Pq programmers' supplementary documents ,
.Ar AMD
.Pq administrators' supplementary documents ,
.Ar SMM
.Pq system managers' manuals ,
.Ar URM
.Pq users' reference manuals ,
.Ar PRM
.Pq programmers' reference manuals ,
.Ar KM
.Pq kernel manuals ,
.Ar IND
.Pq master index ,
.Ar MMI
.Pq master index ,
.Ar LOCAL
.Pq local manuals ,
.Ar LOC
.Pq local manuals ,
or
.Ar CON
.Pq contributed manuals .
.It Ar arch
This specifies a specific relevant architecture.
If
.Ar volume
is not provided, it may be used in its place, else it may be used
subsequent that.
It, too, is optional.
It must be one of
.Ar alpha ,
.Ar amd64 ,
.Ar amiga ,
.Ar arc ,
.Ar arm ,
.Ar armish ,
.Ar aviion ,
.Ar hp300 ,
.Ar hppa ,
.Ar hppa64 ,
.Ar i386 ,
.Ar landisk ,
.Ar loongson ,
.Ar luna88k ,
.Ar mac68k ,
.Ar macppc ,
.Ar mvme68k ,
.Ar mvme88k ,
.Ar mvmeppc ,
.Ar pmax ,
.Ar sgi ,
.Ar socppc ,
.Ar sparc ,
.Ar sparc64 ,
.Ar sun3 ,
.Ar vax ,
or
.Ar zaurus .
.El
.Pp
Examples:
.D1 \&.Dt FOO 1
.D1 \&.Dt FOO 4 KM
.D1 \&.Dt FOO 9 i386
.Pp
See also
.Sx \&Dd
and
.Sx \&Os .
.Ss \&Dv
Defined variables such as preprocessor constants.
.Pp
Examples:
.D1 \&.Dv BUFSIZ
.D1 \&.Dv STDOUT_FILENO
.Pp
See also
.Sx \&Er .
.Ss \&Dx
Format the DragonFly BSD version provided as an argument, or a default
value if no argument is provided.
.Pp
Examples:
.D1 \&.Dx 2.4.1
.D1 \&.Dx
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Fx ,
.Sx \&Nx ,
.Sx \&Ox ,
and
.Sx \&Ux .
.Ss \&Ec
Close a scope started by
.Sx \&Eo .
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Ec Op Ar TERM
.Pp
The
.Ar TERM
argument is used as the enclosure tail, for example, specifying \e(rq
will emulate
.Sx \&Dc .
.Ss \&Ed
End a display context started by
.Sx \&Bd .
.Ss \&Ef
End a font mode context started by
.Sx \&Bf .
.Ss \&Ek
End a keep context started by
.Sx \&Bk .
.Ss \&El
End a list context started by
.Sx \&Bl .
.Pp
See also
.Sx \&Bl
and
.Sx \&It .
.Ss \&Em
Denotes text that should be emphasised.
Note that this is a presentation term and should not be used for
stylistically decorating technical terms.
.Pp
Examples:
.D1 \&.Em Warnings!
.D1 \&.Em Remarks :
.Pp
See also
.Sx \&Bf ,
.Sx \&Sy ,
and
.Sx \&Li .
.Ss \&En
This macro is obsolete and not implemented in
.Xr mandoc 1 .
.Ss \&Eo
An arbitrary enclosure.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Eo Op Ar TERM
.Pp
The
.Ar TERM
argument is used as the enclosure head, for example, specifying \e(lq
will emulate
.Sx \&Do .
.Ss \&Er
Display error constants.
.Pp
Examples:
.D1 \&.Er EPERM
.D1 \&.Er ENOENT
.Pp
See also
.Sx \&Dv .
.Ss \&Es
This macro is obsolete and not implemented.
.Ss \&Ev
Environmental variables such as those specified in
.Xr environ 7 .
.Pp
Examples:
.D1 \&.Ev DISPLAY
.D1 \&.Ev PATH
.Ss \&Ex
Insert a standard sentence regarding exit values.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Ex Fl std Op Ar utility
.Pp
When
.Ar utility
is not specified, the document's name set by
.Sx \&Nm
is used.
.Pp
See also
.Sx \&Rv .
.Ss \&Fa
Function argument.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Sx \&Fa
.Op Cm argtype
.Cm argname
.Ed
.Pp
This may be invoked for names with or without the corresponding type.
It is also used to specify the field name of a structure.
Most often, the
.Sx \&Fa
macro is used in the
.Em SYNOPSIS
within
.Sx \&Fo
section when documenting multi-line function prototypes.
If invoked with multiple arguments, the arguments are separated by a
comma.
Furthermore, if the following macro is another
.Sx \&Fa ,
the last argument will also have a trailing comma.
.Pp
Examples:
.D1 \&.Fa \(dqconst char *p\(dq
.D1 \&.Fa \(dqint a\(dq \(dqint b\(dq \(dqint c\(dq
.D1 \&.Fa foo
.Pp
See also
.Sx \&Fo .
.Ss \&Fc
End a function context started by
.Sx \&Fo .
.Ss \&Fd
Historically used to document include files.
This usage has been deprecated in favour of
.Sx \&In .
Do not use this macro.
.Pp
See also
.Sx MANUAL STRUCTURE
and
.Sx \&In .
.Ss \&Fl
Command-line flag.
Used when listing arguments to command-line utilities.
Prints a fixed-width hyphen
.Sq \-
directly followed by each argument.
If no arguments are provided, a hyphen is printed followed by a space.
If the argument is a macro, a hyphen is prefixed to the subsequent macro
output.
.Pp
Examples:
.D1 \&.Fl a b c
.D1 \&.Fl \&Pf a b
.D1 \&.Fl
.D1 \&.Op \&Fl o \&Ns \&Ar file
.Pp
See also
.Sx \&Cm .
.Ss \&Fn
A function name.
Its syntax is as follows:
.Bd -ragged -offset indent
.Pf \. Ns Sx \&Fn
.Op Cm functype
.Cm funcname
.Op Oo Cm argtype Oc Cm argname
.Ed
.Pp
Function arguments are surrounded in parenthesis and
are delimited by commas.
If no arguments are specified, blank parenthesis are output.
.Pp
Examples:
.D1 \&.Fn "int funcname" "int arg0" "int arg1"
.D1 \&.Fn funcname "int arg0"
.D1 \&.Fn funcname arg0
.Bd -literal -offset indent -compact
\&.Ft functype
\&.Fn funcname
.Ed
.Pp
See also
.Sx MANUAL STRUCTURE
and
.Sx \&Ft .
.Ss \&Fo
Begin a function block.
This is a multi-line version of
.Sx \&Fn .
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Fo Cm funcname
.Pp
Invocations usually occur in the following context:
.Bd -ragged -offset indent
.Pf \. Sx \&Ft Cm functype
.br
.Pf \. Sx \&Fo Cm funcname
.br
.Pf \. Sx \&Fa Oo Cm argtype Oc Cm argname
.br
\.\.\.
.br
.Pf \. Sx \&Fc
.Ed
.Pp
A
.Sx \&Fo
scope is closed by
.Pp
See also
.Sx MANUAL STRUCTURE ,
.Sx \&Fa ,
.Sx \&Fc ,
and
.Sx \&Ft .
.Ss \&Ft
A function type.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Ft Cm functype
.Pp
Examples:
.D1 \&.Ft int
.Bd -literal -offset indent -compact
\&.Ft functype
\&.Fn funcname
.Ed
.Pp
See also
.Sx MANUAL STRUCTURE ,
.Sx \&Fn ,
and
.Sx \&Fo .
.Ss \&Fx
Format the FreeBSD version provided as an argument, or a default value
if no argument is provided.
.Pp
Examples:
.D1 \&.Fx 7.1
.D1 \&.Fx
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Nx ,
.Sx \&Ox ,
and
.Sx \&Ux .
.Ss \&Hf
This macro is obsolete and not implemented.
.Ss \&Ic
Designate an internal or interactive command.
This is similar to
.Sx \&Cm
but used for instructions rather than values.
.Pp
Examples:
.D1 \&.Ic hash
.D1 \&.Ic alias
.Pp
Note that using
.Sx \&Bd No Fl literal
or
.Sx \&D1
is preferred for displaying code; the
.Sx \&Ic
macro is used when referring to specific instructions.
.Ss \&In
An
.Dq include
file.
In the
.Em SYNOPSIS
section (only if invoked as the line macro), the first argument is
preceded by
.Dq #include ,
the arguments is enclosed in angle brackets.
.Pp
Examples:
.D1 \&.In sys/types
.Pp
See also
.Sx MANUAL STRUCTURE .
.Ss \&It
A list item.
The syntax of this macro depends on the list type.
.Pp
Lists
of type
.Fl hang ,
.Fl ohang ,
.Fl inset ,
and
.Fl diag
have the following syntax:
.Pp
.D1 Pf \. Sx \&It Cm args
.Pp
Lists of type
.Fl bullet ,
.Fl dash ,
.Fl enum ,
.Fl hyphen
and
.Fl item
have the following syntax:
.Pp
.D1 Pf \. Sx \&It
.Pp
with subsequent lines interpreted within the scope of the
.Sx \&It
until either a closing
.Sx \&El
or another
.Sx \&It .
.Pp
The
.Fl tag
list has the following syntax:
.Pp
.D1 Pf \. Sx \&It Op Cm args
.Pp
Subsequent lines are interpreted as with
.Fl bullet
and family.
The line arguments correspond to the list's left-hand side; body
arguments correspond to the list's contents.
.Pp
The
.Fl column
list is the most complicated.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&It Op Cm args
.Pp
The
.Cm args
are phrases, a mix of macros and text corresponding to a line column,
delimited by tabs or the special
.Sq \&Ta
pseudo-macro.
Lines subsequent the
.Sx \&It
are interpreted within the scope of the last phrase.
Calling the pseudo-macro
.Sq \&Ta
will open a new phrase scope (this must occur on a macro line to be
interpreted as a macro).
Note that the tab phrase delimiter may only be used within the
.Sx \&It
line itself.
Subsequent this, only the
.Sq \&Ta
pseudo-macro may be used to delimit phrases.
Furthermore, note that quoted sections propagate over tab-delimited
phrases on an
.Sx \&It ,
for example,
.Pp
.D1 .It \(dqcol1 ; <TAB> col2 ;\(dq \&;
.Pp
will preserve the semicolon whitespace except for the last.
.Pp
See also
.Sx \&Bl .
.Ss \&Lb
Specify a library.
The syntax is as follows:
.Pp
.D1 Pf \. Sx \&Lb Cm library
.Pp
The
.Cm library
parameter may be a system library, such as
.Cm libz
or
.Cm libpam ,
in which case a small library description is printed next to the linker
invocation; or a custom library, in which case the library name is
printed in quotes.
This is most commonly used in the
.Em SYNOPSIS
section as described in
.Sx MANUAL STRUCTURE .
.Pp
Examples:
.D1 \&.Lb libz
.D1 \&.Lb mdoc
.Ss \&Li
Denotes text that should be in a literal font mode.
Note that this is a presentation term and should not be used for
stylistically decorating technical terms.
.Pp
See also
.Sx \&Bf ,
.Sx \&Sy ,
and
.Sx \&Em .
.Ss \&Lk
Format a hyperlink.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Lk Cm uri Op Cm name
.Pp
Examples:
.D1 \&.Lk http://bsd.lv "The BSD.lv Project"
.D1 \&.Lk http://bsd.lv
.Pp
See also
.Sx \&Mt .
.Ss \&Lp
Synonym for
.Sx \&Pp .
.Ss \&Ms
Display a mathematical symbol.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Ms Cm symbol
.Pp
Examples:
.D1 \&.Ms sigma
.D1 \&.Ms aleph
.Ss \&Mt
Format a
.Dq mailto:
hyperlink.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Mt Cm address
.Pp
Examples:
.D1 \&.Mt discuss@@manpages.bsd.lv
.Ss \&Nd
A one-line description of the manual's content.
This may only be invoked in the
.Em SYNOPSIS
section subsequent the
.Sx \&Nm
macro.
.Pp
Examples:
.D1 \&.Sx \&Nd mdoc language reference
.D1 \&.Sx \&Nd format and display UNIX manuals
.Pp
The
.Sx \&Nd
macro technically accepts child macros and terminates with a subsequent
.Sx \&Sh
invocation.
Do not assume this behaviour: some
.Xr whatis 1
database generators are not smart enough to parse more than the line
arguments and will display macros verbatim.
.Pp
See also
.Sx \&Nm .
.Ss \&Nm
The name of the manual page, or \(em in particular in section 1, 6,
and 8 pages \(em of an additional command or feature documented in
the manual page.
When first invoked, the
.Sx \&Nm
macro expects a single argument, the name of the manual page.
Usually, the first invocation happens in the
.Em NAME
section of the page.
The specified name will be remembered and used whenever the macro is
called again without arguments later in the page.
The
.Sx \&Nm
macro uses
.Sx Block full-implicit
semantics when invoked as the first macro on an input line in the
.Em SYNOPSIS
section; otherwise, it uses ordinary
.Sx In-line
semantics.
.Pp
Examples:
.Bd -literal -offset indent
\&.Sh SYNOPSIS
\&.Nm cat
\&.Op Fl benstuv
\&.Op Ar
.Ed
.Pp
In the
.Em SYNOPSIS
of section 2, 3 and 9 manual pages, use the
.Sx \&Fn
macro rather than
.Sx \&Nm
to mark up the name of the manual page.
.Ss \&No
A
.Dq noop
macro used to terminate prior macro contexts.
.Pp
Examples:
.D1 \&.Sx \&Fl ab \&No cd \&Fl ef
.Ss \&Ns
Suppress a space.
Following invocation, text is interpreted as free-form text until a
macro is encountered.
.Pp
Examples:
.D1 \&.Fl o \&Ns \&Ar output
.Pp
See also
.Sx \&No
and
.Sx \&Sm .
.Ss \&Nx
Format the NetBSD version provided as an argument, or a default value if
no argument is provided.
.Pp
Examples:
.D1 \&.Nx 5.01
.D1 \&.Nx
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Ox ,
and
.Sx \&Ux .
.Ss \&Oc
Close multi-line
.Sx \&Oo
context.
.Ss \&Oo
Multi-line version of
.Sx \&Op .
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Oo
\&.Op Fl flag Ns Ar value
\&.Oc
.Ed
.Ss \&Op
Command-line option.
Used when listing options to command-line utilities.
Prints the argument(s) in brackets.
.Pp
Examples:
.D1 \&.Op \&Fl a \&Ar b
.D1 \&.Op \&Ar a | b
.Pp
See also
.Sx \&Oo .
.Ss \&Os
Document operating system version.
This is the mandatory third macro of
any
.Nm
file.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Os Op Cm system
.Pp
The optional
.Cm system
parameter specifies the relevant operating system or environment.
Left unspecified, it defaults to the local operating system version.
This is the suggested form.
.Pp
Examples:
.D1 \&.Os
.D1 \&.Os KTH/CSC/TCS
.D1 \&.Os BSD 4.3
.Pp
See also
.Sx \&Dd
and
.Sx \&Dt .
.Ss \&Ot
Unknown usage.
.Pp
.Em Remarks :
this macro has been deprecated.
.Ss \&Ox
Format the OpenBSD version provided as an argument, or a default value
if no argument is provided.
.Pp
Examples:
.D1 \&.Ox 4.5
.D1 \&.Ox
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
and
.Sx \&Ux .
.Ss \&Pa
A file-system path.
.Pp
Examples:
.D1 \&.Pa /usr/bin/mandoc
.D1 \&.Pa /usr/share/man/man7/mdoc.7
.Pp
See also
.Sx \&Lk .
.Ss \&Pc
Close parenthesised context opened by
.Sx \&Po .
.Ss \&Pf
Removes the space
.Pq Dq prefix
between its arguments.
Its syntax is as follows:
.Pp
.D1 Pf \. \&Pf Cm prefix suffix
.Pp
The
.Cm suffix
argument may be a macro.
.Pp
Examples:
.D1 \&.Pf \e. \&Sx \&Pf \&Cm prefix suffix
.Ss \&Po
Multi-line version of
.Sx \&Pq .
.Ss \&Pp
Break a paragraph.
This will assert vertical space between prior and subsequent macros
and/or text.
.Ss \&Pq
Parenthesised enclosure.
.Pp
See also
.Sx \&Po .
.Ss \&Qc
Close quoted context opened by
.Sx \&Qo .
.Ss \&Ql
Format a single-quoted literal.
See also
.Sx \&Qq
and
.Sx \&Sq .
.Ss \&Qo
Multi-line version of
.Sx \&Qq .
.Ss \&Qq
Encloses its arguments in
.Dq typewriter
double-quotes.
Consider using
.Sx \&Dq .
.Pp
See also
.Sx \&Dq ,
.Sx \&Sq ,
and
.Sx \&Qo .
.Ss \&Re
Close an
.Sx \&Rs
block.
Does not have any tail arguments.
.Ss \&Rs
Begin a bibliographic
.Pq Dq reference
block.
Does not have any head arguments.
The block macro may only contain
.Sx \&%A ,
.Sx \&%B ,
.Sx \&%C ,
.Sx \&%D ,
.Sx \&%I ,
.Sx \&%J ,
.Sx \&%N ,
.Sx \&%O ,
.Sx \&%P ,
.Sx \&%Q ,
.Sx \&%R ,
.Sx \&%T ,
.Sx \&%U ,
and
.Sx \&%V
child macros (at least one must be specified).
.Pp
Examples:
.Bd -literal -offset indent -compact
\&.Rs
\&.%A J. E. Hopcroft
\&.%A J. D. Ullman
\&.%B Introduction to Automata Theory, Languages, and Computation
\&.%I Addison-Wesley
\&.%C Reading, Massachusettes
\&.%D 1979
\&.Re
.Ed
.Pp
If an
.Sx \&Rs
block is used within a SEE ALSO section, a vertical space is asserted
before the rendered output, else the block continues on the current
line.
.Ss \&Rv
Inserts text regarding a function call's return value.
This macro must consist of the
.Fl std
argument followed by an optional
.Ar function .
If
.Ar function
is not provided, the document's name as stipulated by the first
.Sx \&Nm
is provided.
.Pp
See also
.Sx \&Ex .
.Ss \&Sc
Close single-quoted context opened by
.Sx \&So .
.Ss \&Sh
Begin a new section.
For a list of conventional manual sections, see
.Sx MANUAL STRUCTURE .
These sections should be used unless it's absolutely necessary that
custom sections be used.
.Pp
Section names should be unique so that they may be keyed by
.Sx \&Sx .
.Pp
See also
.Sx \&Pp ,
.Sx \&Ss ,
and
.Sx \&Sx .
.Ss \&Sm
Switches the spacing mode for output generated from macros.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Sm Cm on | off
.Pp
By default, spacing is
.Cm on .
When switched
.Cm off ,
no white space is inserted between macro arguments and between the
output generated from adjacent macros, but free-form text lines
still get normal spacing between words and sentences.
.Ss \&So
Multi-line version of
.Sx \&Sq .
.Ss \&Sq
Encloses its arguments in
.Dq typewriter
single-quotes.
.Pp
See also
.Sx \&Dq ,
.Sx \&Qq ,
and
.Sx \&So .
.Ss \&Ss
Begin a new sub-section.
Unlike with
.Sx \&Sh ,
there's no convention for sub-sections.
Conventional sections, as described in
.Sx MANUAL STRUCTURE ,
rarely have sub-sections.
.Pp
Sub-section names should be unique so that they may be keyed by
.Sx \&Sx .
.Pp
See also
.Sx \&Pp ,
.Sx \&Sh ,
and
.Sx \&Sx .
.Ss \&St
Replace an abbreviation for a standard with the full form.
The following standards are recognised:
.Pp
.Bl -tag -width "-p1003.1g-2000X" -compact
.It \-p1003.1-88
.St -p1003.1-88
.It \-p1003.1-90
.St -p1003.1-90
.It \-p1003.1-96
.St -p1003.1-96
.It \-p1003.1-2001
.St -p1003.1-2001
.It \-p1003.1-2004
.St -p1003.1-2004
.It \-p1003.1-2008
.St -p1003.1-2008
.It \-p1003.1
.St -p1003.1
.It \-p1003.1b
.St -p1003.1b
.It \-p1003.1b-93
.St -p1003.1b-93
.It \-p1003.1c-95
.St -p1003.1c-95
.It \-p1003.1g-2000
.St -p1003.1g-2000
.It \-p1003.1i-95
.St -p1003.1i-95
.It \-p1003.2-92
.St -p1003.2-92
.It \-p1003.2a-92
.St -p1003.2a-92
.It \-p1387.2-95
.St -p1387.2-95
.It \-p1003.2
.St -p1003.2
.It \-p1387.2
.St -p1387.2
.It \-isoC
.St -isoC
.It \-isoC-90
.St -isoC-90
.It \-isoC-amd1
.St -isoC-amd1
.It \-isoC-tcor1
.St -isoC-tcor1
.It \-isoC-tcor2
.St -isoC-tcor2
.It \-isoC-99
.St -isoC-99
.It \-iso9945-1-90
.St -iso9945-1-90
.It \-iso9945-1-96
.St -iso9945-1-96
.It \-iso9945-2-93
.St -iso9945-2-93
.It \-ansiC
.St -ansiC
.It \-ansiC-89
.St -ansiC-89
.It \-ansiC-99
.St -ansiC-99
.It \-ieee754
.St -ieee754
.It \-iso8802-3
.St -iso8802-3
.It \-ieee1275-94
.St -ieee1275-94
.It \-xpg3
.St -xpg3
.It \-xpg4
.St -xpg4
.It \-xpg4.2
.St -xpg4.2
.St -xpg4.3
.It \-xbd5
.St -xbd5
.It \-xcu5
.St -xcu5
.It \-xsh5
.St -xsh5
.It \-xns5
.St -xns5
.It \-xns5.2
.St -xns5.2
.It \-xns5.2d2.0
.St -xns5.2d2.0
.It \-xcurses4.2
.St -xcurses4.2
.It \-susv2
.St -susv2
.It \-susv3
.St -susv3
.It \-svid4
.St -svid4
.El
.Ss \&Sx
Reference a section or sub-section.
The referenced section or sub-section name must be identical to the
enclosed argument, including whitespace.
.Pp
Examples:
.D1 \&.Sx MANUAL STRUCTURE
.Ss \&Sy
Format enclosed arguments in symbolic
.Pq Dq boldface .
Note that this is a presentation term and should not be used for
stylistically decorating technical terms.
.Pp
See also
.Sx \&Bf ,
.Sx \&Li ,
and
.Sx \&Em .
.Ss \&Tn
Format a tradename.
.Pp
Examples:
.D1 \&.Tn IBM
.Ss \&Ud
Prints out
.Dq currently under development.
.Ss \&Ux
Format the UNIX name.
Accepts no argument.
.Pp
Examples:
.D1 \&.Ux
.Pp
See also
.Sx \&At ,
.Sx \&Bsx ,
.Sx \&Bx ,
.Sx \&Dx ,
.Sx \&Fx ,
.Sx \&Nx ,
and
.Sx \&Ox .
.Ss \&Va
A variable name.
.Pp
Examples:
.D1 \&.Va foo
.D1 \&.Va const char *bar ;
.Ss \&Vt
A variable type.
This is also used for indicating global variables in the
.Em SYNOPSIS
section, in which case a variable name is also specified.
Note that it accepts
.Sx Block partial-implicit
syntax when invoked as the first macro in the
.Em SYNOPSIS
section, else it accepts ordinary
.Sx In-line
syntax.
.Pp
Note that this should not be confused with
.Sx \&Ft ,
which is used for function return types.
.Pp
Examples:
.D1 \&.Vt unsigned char
.D1 \&.Vt extern const char * const sys_signame[] \&;
.Pp
See also
.Sx MANUAL STRUCTURE
and
.Sx \&Va .
.Ss \&Xc
Close a scope opened by
.Sx \&Xo .
.Ss \&Xo
Open an extension scope.
This macro originally existed to extend the 9-argument limit of troff;
since this limit has been lifted, the macro has been deprecated.
.Ss \&Xr
Link to another manual
.Pq Qq cross-reference .
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&Xr Cm name section
.Pp
The
.Cm name
and
.Cm section
are the name and section of the linked manual.
If
.Cm section
is followed by non-punctuation, an
.Sx \&Ns
is inserted into the token stream.
This behaviour is for compatibility with
.Xr groff 1 .
.Pp
Examples:
.D1 \&.Xr mandoc 1
.D1 \&.Xr mandoc 1 \&;
.D1 \&.Xr mandoc 1 \&Ns s behaviour
.Ss \&br
Emits a line-break.
This macro should not be used; it is implemented for compatibility with
historical manuals.
.Pp
Consider using
.Sx \&Pp
in the event of natural paragraph breaks.
.Ss \&sp
Emits vertical space.
This macro should not be used; it is implemented for compatibility with
historical manuals.
Its syntax is as follows:
.Pp
.D1 Pf \. Sx \&sp Op Cm height
.Pp
The
.Cm height
argument must be formatted as described in
.Sx Scaling Widths .
If unspecified,
.Sx \&sp
asserts a single vertical space.
.Sh COMPATIBILITY
This section documents compatibility between mandoc and other other
troff implementations, at this time limited to GNU troff
.Pq Qq groff .
The term
.Qq historic groff
refers to groff versions before the
.Pa doc.tmac
file re-write
.Pq somewhere between 1.15 and 1.19 .
.Pp
Heirloom troff, the other significant troff implementation accepting
\-mdoc, is similar to historic groff.
.Pp
.Bl -dash -compact
.It
An empty
.Sq \&Dd
macro in groff prints
.Dq Epoch .
In mandoc, it resolves to the current date.
.It
The \es (font size), \em (font colour), and \eM (font filling colour)
font decoration escapes are all discarded in mandoc.
.It
Old groff fails to assert a newline before
.Sx \&Bd Fl ragged compact .
.It
groff behaves inconsistently when encountering
.Pf non- Sx \&Fa
children of
.Sx \&Fo
regarding spacing between arguments.
In mandoc, this is not the case: each argument is consistently followed
by a single space and the trailing
.Sq \&)
suppresses prior spacing.
.It
groff behaves inconsistently when encountering
.Sx \&Ft
and
.Sx \&Fn
in the
.Em SYNOPSIS :
at times newline(s) are suppressed depending on whether a prior
.Sx \&Fn
has been invoked.
In mandoc, this is not the case.
See
.Sx \&Ft
and
.Sx \&Fn
for the normalised behaviour.
.It
Historic groff does not break before an
.Sx \&Fn
when not invoked as the line macro in the
.Em SYNOPSIS
section.
.It
Historic groff formats the
.Sx \&In
badly: trailing arguments are trashed and
.Em SYNOPSIS
is not specially treated.
.It
groff does not accept the
.Sq \&Ta
pseudo-macro as a line macro.
mandoc does.
.It
The comment syntax
.Sq \e\."
is no longer accepted.
.It
In groff, the
.Sx \&Pa
macro does not format its arguments when used in the FILES section under
certain list types.
mandoc does.
.It
Historic groff does not print a dash for empty
.Sx \&Fl
arguments.
mandoc and newer groff implementations do.
.It
groff behaves irregularly when specifying
.Sq \ef
.Sx Text Decoration
within line-macro scopes.
mandoc follows a consistent system.
.It
In mandoc, negative scaling units are truncated to zero; groff would
move to prior lines.
Furthermore, the
.Sq f
scaling unit, while accepted, is rendered as the default unit.
.It
In quoted literals, groff allowed pair-wise double-quotes to produce a
standalone double-quote in formatted output.
This idiosyncratic behaviour is not applicable in mandoc.
.It
Display offsets
.Sx \&Bd
.Fl offset Ar center
and
.Fl offset Ar right
are disregarded in mandoc.
Furthermore, troff specifies a
.Fl file Ar file
argument that is not supported in mandoc.
Lastly, since text is not right-justified in mandoc (or even groff),
.Fl ragged
and
.Fl filled
are aliases, as are
.Fl literal
and
.Fl unfilled .
.It
Historic groff has many un-callable macros.
Most of these (excluding some block-level macros) are now callable.
.It
The vertical bar
.Sq \(ba
made historic groff
.Qq go orbital
but has been a proper delimiter since then.
.It
.Sx \&It Fl nested
is assumed for all lists (it wasn't in historic groff): any list may be
nested and
.Fl enum
lists will restart the sequence only for the sub-list.
.It
Some manuals use
.Sx \&Li
incorrectly by following it with a reserved character and expecting the
delimiter to render.
This is not supported in mandoc.
.It
In groff, the
.Sx \&Cd ,
.Sx \&Er ,
.Sx \&Ex ,
and
.Sx \&Rv
macros were stipulated only to occur in certain manual sections.
mandoc does not have these restrictions.
.It
Newer groff and mandoc print
.Qq AT&T UNIX
prior to unknown arguments of
.Sx \&At ;
older groff did nothing.
.El
.Sh SEE ALSO
.Xr mandoc 1 ,
.Xr mandoc_char 7
.Sh AUTHORS
The
.Nm
reference was written by
.An Kristaps Dzonsons Aq kristaps@@bsd.lv .
@


1.43
log
@Sync to bsd.lv:
State that we parse and ignore \s and \m font size and colour control
sequences, and remove the detailed, irrelevant documentation.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.42 2010/07/31 22:07:11 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 31 2010 $
@


1.42
log
@Major cleanup (but there is still more to come):
* rewrite .An, .Bd, .Bk, .Bl, .Ex descriptions
* correct "parsable" to "parsed"
* and various formatting and wording tweaks
This commit includes a patch from kristaps@@ explaining empty .Dd.
Feedback and OK jmc@@ and kristaps@@.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.41 2010/07/25 18:05:54 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 25 2010 $
d143 1
a143 22
Text may also be sized with the
.Sq \es
escape, whose syntax is one of
.Sq \es+-n
for one-digit numerals;
.Sq \es(+-nn
or
.Sq \es+-(nn
for two-digit numerals; and
.Sq \es[+-N] ,
.Sq \es+-[N] ,
.Sq \es'+-N' ,
or
.Sq \es+-'N'
for arbitrary-digit numerals:
.Pp
.D1 \es+1bigger\es-1
.D1 \es[+10]much bigger\es[-10]
.D1 \es+(10much bigger\es-(10
.D1 \es+'100'much much bigger\es-'100'
.Pp
Note these forms are
d2727 3
d2777 1
a2777 1
.Sq \e."
@


1.41
log
@Sync to bsd.lv; in particular, pull in lots of bug fixes.
new features:
* support the .in macro in man(7)
* support minimal PDF output
* support .Sm in mdoc(7) HTML output
* support .Vb and .nf in man(7) HTML output
* complete the mdoc(7) manual
bug fixes:
* do not let mdoc(7) .Pp produce a newline before/after .Sh; reported by jmc@@
* avoid double blank lines related to man(7) .sp and .br
* let man(7) .nf and .fi flush the line; reported by jsg@@ and naddy@@
* let "\ " produce a non-breaking space; reported by deraadt@@
* discard \m colour escape sequences; reported by J.C. Roberts
* map undefined 1-character-escapes to the literal character itself
maintenance:
* express mdoc(7) arguments in terms of an enum for additional type-safety
* simplify mandoc_special() and a2roffdeco()
* use strcspn in term_word() in place of a manual loop
* minor optimisations in the -Tps and -Thtml formatting frontends
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.40 2010/07/15 23:46:58 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 15 2010 $
d96 1
a96 1
For general use in macro lines, these characters must either be escaped
d99 1
a99 1
or, if applicable, an appropriate escape sequence used.
d204 1
a204 1
Macro arguments may be quoted with a double-quote to group
d210 2
a211 8
This produces tokens
.Sq a" ,
.Sq b c ,
.Sq de ,
and
.Sq fg" .
Note that any quoted term, be it argument or macro, is indiscriminately
considered literal text.
d213 1
a213 1
.Sq \&Em a :
d215 1
a215 1
\&.Em "Em a"
d322 1
a322 1
The prologue, which consists of (in order) the
d327 1
a327 1
macros, is required for every document.
d391 1
a391 1
The name(s) and a short description of the documented material.
d397 1
a397 1
\&.Nd a short description
d490 1
a490 1
.Sx \&Sx ,
d521 5
a525 2
Documents any usages of environment variables, e.g.,
.Xr environ 7 .
d531 1
a531 1
It's helpful to document both the file and a short description of how
d589 1
a589 1
Authors should generally be noted by both name and an e-mail address.
d594 1
a594 1
Explanations of common misuses and misunderstandings should be explained
d597 2
a598 1
Extant bugs should be described in this section.
d604 1
a604 1
control character ,
d637 1
a637 1
.Em Parsable
d640 1
a640 1
If a macro is not parsable, subsequent macro invocations on the line
d657 2
a658 2
.Bl -column -compact -offset indent "MacroX" "CallableX" "ParsableX" "closed by XXX"
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
d680 3
a682 1
.Sx \&It Fl column
d690 2
a691 2
.Bl -column -compact -offset indent "MacroX" "CallableX" "ParsableX" "closed by XXXXXXXXXXX"
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
d726 2
a727 2
.Bl -column "MacroX" "CallableX" "ParsableX" "closed by XXXX" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
d761 2
a762 2
.Bl -column "MacroX" "CallableX" "ParsableX" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsable
d802 2
a803 2
.Bl -column "MacroX" "CallableX" "ParsableX" "Arguments" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Arguments
d829 1
a829 1
.It Sx \&Dd  Ta    \&No     Ta    \&No     Ta    >0
d957 1
a957 1
Closes an
d962 2
a963 2
Address construct: usually in the context of an computational address in
memory, not a physical (post) address.
d970 1
a970 2
This macro may alternatively accepts the following arguments, although
these may not be specified along with a parameter:
d974 2
a975 1
Renders a line break before each author listing.
d981 7
d990 3
a992 4
section, the default is not to split the first author
listing, but all subsequent author listings, whether or not they're
interspersed by other macros or text, are split.
Thus, specifying
d994 1
a994 4
will cause the first listing also to be split.
If not in the
.Em AUTHORS
section, the default is not to split.
d998 1
a998 14
.D1 \&.An J. D. Ullman .
.Pp
.Em Remarks :
the effects of
.Fl split
or
.Fl nosplit
are re-set when entering the
.Em AUTHORS
section, so if one specifies
.Sx \&An Fl nosplit
in the general document body, it must be re-specified in the
.Em AUTHORS
section.
d1000 1
a1000 1
Begins a block enclosed by angled brackets.
d1016 1
a1016 1
Encloses its arguments in angled brackets.
d1036 1
a1036 1
.Dq file ...
d1045 1
a1045 1
Accepts at most one parameter:
d1052 2
a1053 2
A system version of
.At .
d1056 1
a1056 1
Note that these parameters do not begin with a hyphen.
d1072 1
a1072 1
Closes a
d1077 1
a1077 1
Begins a display block.
d1081 1
a1081 1
.Fl type
d1086 4
a1089 4
A display is collection of macros or text which may be collectively
offset or justified in a manner different from that
of the enclosing context.
By default, the block is preceded by a vertical space.
d1091 14
a1104 3
Each display is associated with a type, which must be one of the
following arguments:
.Bl -tag -width 12n -offset indent
d1108 2
a1109 8
Do not justify the block at all.
.It Fl filled
Left- and right-justify the block.
.It Fl literal
Alias for
.Fl unfilled .
.It Fl centered
Centre-justify each line.
d1112 9
a1120 7
The type must be provided first.
Secondary arguments are as follows:
.Bl -tag -width 12n -offset indent
.It Fl offset Ar val
Offset by the value of
.Ar val ,
which is interpreted as one of the following, specified in order:
d1123 2
a1124 2
As one of the pre-defined strings
.Ar indent ,
d1126 1
a1126 1
.Ar indent-two ,
d1128 2
a1129 2
.Ar indent ;
.Ar left ,
d1131 3
a1133 3
.Ar right ,
which justifies to the right margin; and
.Ar center ,
d1136 2
a1137 1
As a precalculated width for a named macro.
d1141 1
a1141 1
.Ar 6n .
d1143 1
a1143 1
As a scaling unit following the syntax described in
d1146 1
a1146 1
As the calculated string length of the opaque string.
d1149 3
a1151 1
If not provided an argument, it will be ignored.
d1153 1
a1153 1
Do not assert a vertical space before the block.
d1158 1
a1158 1
\&.Bd \-unfilled \-offset two-indent \-compact
d1199 1
d1203 4
a1206 2
Begins a collection of macros or text not breaking the line.
Its syntax is as follows:
a1209 1
Subsequent arguments are ignored.
d1212 1
a1212 1
argument is required.
d1214 1
a1214 2
Each line within a keep block is kept intact, so the following example
will not break within each
d1227 5
a1231 2
Begins a list composed of one or more list entries.
Its syntax is as follows:
d1234 1
a1234 1
.Fl type
d1241 8
a1248 4
A list is associated with a type, which is a required argument.
Other arguments are
.Fl width ,
defined per-type as accepting a literal or
d1250 14
a1263 11
value;
.Fl offset ,
also accepting a literal or
.Sx Scaling Widths
value setting the list's global offset; and
.Fl compact ,
suppressing the default vertical space printed before each list entry.
A list entry is specified by the
.Sx \&It
macro, which consists of a head and optional body (depending on the list
type).
d1267 4
a1270 4
A list offset by a bullet.
The head of list entries must be empty.
List entry bodies are positioned after the bullet.
The
d1272 1
a1272 1
argument varies the width of list bodies' left-margins.
d1277 2
a1278 5
argument has no effect.
The number of columns is specified as parameters to the
.Sx \&Bl
macro.
These dictate the width of columns either as
d1280 2
a1281 2
or literal text.
If the initial macro of a
a1283 2
.Sx \&It ,
an
d1285 3
a1287 1
context spanning each line is implied until an
d1289 1
a1289 1
line macro is encountered, at which point list bodies are interpreted as
d1294 3
a1296 6
A list offset by a dash (hyphen).
The head of list entries must be empty.
List entry bodies are positioned past the dash.
The
.Fl width
argument varies the width of list bodies' left-margins.
d1300 2
a1301 4
but with additional formatting to the head.
The
.Fl width
argument varies the width of list bodies' left-margins.
d1303 5
a1307 6
An enumerated list offset by the enumeration from 1.
The head of list entries must be empty.
List entry bodies are positioned after the enumeration.
The
.Fl width
argument varies the width of list bodies' left-margins.
d1311 4
a1314 5
but instead of list bodies positioned after the head, they trail the
head text.
The
.Fl width
argument varies the width of list bodies' left-margins.
d1319 3
a1321 2
List bodies follow the list head.
The
d1325 2
a1326 3
This produces blocks of text.
The head of list entries must be empty.
The
d1330 1
a1330 1
List bodies are positioned on the line following the head.
d1335 1
a1335 2
A list offset by list entry heads.
List entry bodies are positioned after the head as specified by the
d1338 3
d1344 2
d1348 1
a1348 1
Begins a block enclosed by square brackets.
d1376 1
a1376 1
Closes a
d1381 1
a1381 1
Begins a block enclosed by curly braces.
d1438 1
a1438 1
Configuration declaration.
d1475 1
a1475 2
Start a debugging context.
This macro is parsed, but generally ignored.
d1479 3
d1483 1
a1483 1
Closes a
d1494 1
a1494 1
.D1 Pf \. Sx \&Dd Cm date
d1497 2
a1498 2
.Cm date
field may be either
d1504 1
a1504 1
If a date does not conform, the current date is used instead.
d1529 1
a1529 1
Begins a block enclosed by double quotes.
d1567 1
a1567 1
.Cm title
d1569 2
a1570 2
.Cm section
.Op Cm volume | arch
d1577 1
a1577 1
.It Cm title
d1582 1
a1582 1
.It Cm section
d1621 1
a1621 1
.It Cm volume
d1650 1
a1650 1
.It Cm arch
d1653 1
a1653 1
.Cm volume
d1728 1
a1728 1
.D1 Pf \. Sx \&Ec Op Cm TERM
d1731 1
a1731 1
.Cm TERM
d1739 1
a1739 1
Ends a font mode context started by
d1742 1
a1742 1
Ends a keep context started by
d1745 1
a1745 1
Ends a list context started by
d1767 2
a1768 1
This macro is obsolete and not implemented.
d1773 1
a1773 1
.D1 Pf \. Sx \&Eo Op Cm TERM
d1776 1
a1776 1
.Cm TERM
d1799 6
a1804 6
Inserts text regarding a utility's exit value.
This macro must consist of the
.Fl std
argument followed by an optional
.Ar utility .
If
d1806 1
a1806 1
is not provided, the document's name as stipulated in
d1808 1
a1808 1
is provided.
d1844 1
a1844 1
Ends a function context started by
d1995 1
a1995 1
the arguments is enclosed in angled braces.
d2249 1
a2249 1
Closes multi-line
d2383 1
a2383 1
Closes a
d2388 1
a2388 1
Begins a bibliographic
d2741 6
@


1.40
log
@document .Sm; prodded by kristaps@@
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.39 2010/07/13 01:09:13 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 13 2010 $
d30 4
a33 2
manuals.  In this reference document, we describe its syntax, structure,
and usage.  Our reference implementation is mandoc; the
d42 2
a43 1
are parsed for macros.  Other lines are interpreted within the scope of
d52 2
a53 2
character, and, in certain circumstances, the tab character.  All
manuals must have
d58 1
a58 1
.Sq \e" ,
d60 6
a65 4
line.  A macro line with only a control character and comment escape,
.Sq \&.\e" ,
is also ignored.  Macro lines with only a control character and optionally
whitespace are stripped from input.
d474 2
a475 2
All of these macros are output on their own line.  If two such
dissimilar macros are pair-wise invoked (except for
d887 2
a888 1
block.  Multiple authors should each be accorded their own
d890 3
a892 2
line.  Author names should be ordered with full or abbreviated
forename(s) first, then full surname.
d896 2
a897 1
block.  This macro may also be used in a non-bibliographic context when
d910 2
a911 2
block.  This should follow the reduced or canonical form syntax
described in
d936 2
a937 1
block.  Multiple institutional authors should each be accorded their own
d947 3
a949 2
block.  This macro may also be used in a non-bibliographical context
when referring to article titles.
d959 2
a960 1
block.  Does not have any tail arguments.
d972 2
a973 1
.Bl -tag -width 12n -offset indent
d981 3
a983 1
In the AUTHORS section, the default is not to split the first author
d989 3
a991 1
If not in the AUTHORS section, the default is not to split.
d1002 3
a1004 1
are re-set when entering the AUTHORS section, so if one specifies
d1006 2
a1007 1
in the general document body, it must be re-specified in the AUTHORS
d1019 1
a1019 1
Inserts an apostrophe without any surrounding white-space.
d1021 4
a1024 4
form of a function:
.Bd -literal -offset indent
\&.Fn execve Ap d
.Ed
d1056 2
a1057 1
.Bl -tag -width 12n -offset indent
d1084 2
a1085 1
block.  Does not have any tail arguments.
d1334 2
a1335 2
A list offset by list entry heads.  List entry bodies are positioned
after the head as specified by the
d1347 1
a1347 1
.Bd -literal -offset indent
d1373 2
a1374 1
block.  Does not have any tail arguments.
d1380 1
a1380 1
.Bd -literal -offset indent
d1442 1
a1442 1
white-space and align consecutive
d1478 2
a1479 1
block.  Does not have any tail arguments.
d1515 1
a1515 1
.D1 \&.Dl % mandoc mdoc.7 | less
d1522 2
a1523 2
Begins a block enclosed by double quotes.  Does not have any head
arguments.
d1526 6
a1531 1
.D1 \&.D1 \&Do April is the cruellest month \&Dc \e(em T.S. Eliot
d1536 3
a1538 1
Encloses its arguments in double quotes.
d1547 3
d1572 1
a1572 1
.Qq UNKNOWN
d1612 1
a1612 1
.Qq 1
d1753 6
d1791 2
a1792 2
Inserts text regarding a utility's exit values.
This macro must have first the
d1794 1
a1794 1
argument specified, then an optional
d1801 3
d1923 1
d1980 1
a1980 1
.Qq include
d1986 1
a1986 1
.Qq #include ,
d2058 2
a2059 2
interpreted as a macro).  Note that the tab phrase delimiter may only be
used within the
d2103 6
d2125 8
d2135 1
a2135 1
.Qq mailto:
d2206 1
a2206 1
.Qq noop
d2212 11
d2249 1
a2249 1
.Bd -literal -offset indent
d2326 1
a2326 1
.Pq Qq prefix
d2351 2
d2354 5
d2360 2
d2363 11
d2420 13
d2434 2
d2437 14
d2465 2
d2468 9
d2478 16
d2495 96
d2592 6
d2599 10
d2610 4
d2696 7
d2704 14
a2872 68
.\"
.\" XXX: this really isn't the place for these caveats.
.\" .
.\" .
.\" .Sh CAVEATS
.\" There are many ambiguous parts of mdoc.
.\" .
.\" .Pp
.\" .Bl -dash -compact
.\" .It
.\" .Sq \&Fa
.\" should be
.\" .Sq \&Va
.\" as function arguments are variables.
.\" .It
.\" .Sq \&Ft
.\" should be
.\" .Sq \&Vt
.\" as function return types are still types.  Furthermore, the
.\" .Sq \&Ft
.\" should be removed and
.\" .Sq \&Fo ,
.\" which ostensibly follows it, should follow the same convention as
.\" .Sq \&Va .
.\" .It
.\" .Sq \&Va
.\" should formalise that only one or two arguments are acceptable: a
.\" variable name and optional, preceding type.
.\" .It
.\" .Sq \&Fd
.\" is ambiguous.  It's commonly used to indicate an include file in the
.\" synopsis section.
.\" .Sq \&In
.\" should be used, instead.
.\" .It
.\" Only the
.\" .Sq \-literal
.\" argument to
.\" .Sq \&Bd
.\" makes sense.  The remaining ones should be removed.
.\" .It
.\" The
.\" .Sq \&Xo
.\" and
.\" .Sq \&Xc
.\" macros should be deprecated.
.\" .It
.\" The
.\" .Sq \&Dt
.\" macro lacks clarity.  It should be absolutely clear which title will
.\" render when formatting the manual page.
.\" .It
.\" A
.\" .Sq \&Lx
.\" should be provided for Linux (\(`a la
.\" .Sq \&Ox ,
.\" .Sq \&Nx
.\" etc.).
.\" .It
.\" There's no way to refer to references in
.\" .Sq \&Rs/Re
.\" blocks.
.\" .It
.\" The \-split and \-nosplit dictates via
.\" .Sq \&An
.\" are re-set when entering and leaving the AUTHORS section.
.\" .El
.\" .
@


1.39
log
@Merge release 1.10.4 (all code by kristaps@@), providing four new features:
1) Proper .Bk support: allow output line breaks at input line breaks,
but keep input lines together in the output, finally fixing
synopses like aucat(1), mail(1) and tmux(1).
2) Mostly finished -Tps (PostScript) output.
3) Implement -Thtml output for .Nm blocks and .Bk -words.
4) Allow iterative interpolation of user-defined roff(7) strings.
Also contains some minor bugfixes and some performance improvements.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.38 2010/07/01 15:36:59 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 1 2010 $
d2335 12
@


1.38
log
@Improve .Nm indentation in the SYNOPSIS;
kristaps@@ will do the missing HTML part soon.
"looks nicer" jmc@@
"seems perfect to me" sobrado@@
"slap it in" kristaps@@
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.37 2010/06/27 13:33:43 schwarze Exp $
d3 2
a4 1
.\" Copyright (c) 2009 Kristaps Dzonsons <kristaps@@bsd.lv>
d18 1
a18 1
.Dd $Mdocdate: June 27 2010 $
d1067 8
d1099 1
a1099 1
.It Fl offset Ar width
d1101 1
a1101 1
.Ar width ,
d1112 1
a1112 1
which has no effect ;
a1132 4
.It Fl file Ar file
Prepend the file
.Ar file
before any text or macros within the block.
d1147 33
d1181 9
a1189 12
Begins a keep block, containing a collection of macros or text
to be kept together in the output.
One argument is required; additional arguments are ignored.
Currently, the only argument implemented is
.Fl words ,
requesting to keep together all words of the contained text
on the same output line.
A
.Fl lines
argument to keep together all lines of the contained text
on the same page has been desired for a long time,
but has never been implemented.
d1191 4
a1194 1
Examples:
d1197 2
a1198 1
\&.Op o Ar output_file
d1201 3
d1206 10
d1684 11
d1696 2
d1699 2
d1721 1
d1723 10
d1743 1
d1794 2
d1917 1
d1919 16
d2057 3
d2073 2
d2087 23
d2148 6
d2173 3
d2177 9
d2187 10
d2245 8
d2254 2
d2257 13
d2271 2
d2274 3
d2278 4
d2362 5
d2524 1
a2524 1
Furthermore, the
d2526 1
a2526 1
argument is not supported in mandoc.
@


1.37
log
@Document .Bk/.Ek; reminded by kristaps@@.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.36 2010/06/26 17:56:43 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 26 2010 $
d481 13
d688 1
d692 10
d1985 36
@


1.36
log
@merge release 1.10.2
* bug fixes:
- interaction of ASCII_HYPH with special chars (found by Ulrich Spoerlein)
- handling of roff conditionals (found by Ulrich Spoerlein)
- .Bd -offset will no more default to 6n
* maintenance:
- more caching of .Bd and .Bl arguments for efficiency
- deconstify man(7) validation routines
- add FreeBSD library names (provided by Ulrich Spoerlein)
* start PostScript font-switching
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.35 2010/06/08 00:11:47 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 8 2010 $
d1119 19
d1611 2
@


1.35
log
@Merge more bits that will be going into 1.10.1:

Clean up vertical spacing in the SYNOPSIS, making the code much more
systematic; this doesn't solve all SYNOPSIS problems yet, in particular
not those related to keeps, indentation and the low-level .nr roff
instruction, but it's a nice step forward and i couldn't find relevant
regressions.  (from kristaps)

Besides,
* make the output width configurable (default: -Owidth=80) (kristaps)
* use mmap with MAP_SHARED (from Joerg Sonnenberger)
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.34 2010/06/06 20:30:08 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 6 2010 $
d1097 1
a1097 4
If unset, it will revert to the value of
.Ar 8n
as described in
.Sx Scaling Widths .
d2169 3
d2246 1
a2246 1
Display types
d2248 1
a2248 1
.Fl center
d2250 3
a2252 4
.Fl right
are aliases for
.Fl left
in mandoc.  Furthermore, the
d2254 1
a2254 1
argument is ignored.
@


1.34
log
@Merge bsd.lv version 1.10.1 (to be released soon).

The main step forward is that this now has *much* better .Bl -column
support, now supporting many manuals that previously errored out
without producing any output.

Other fixes include:
* do not die from multiple list types, use the first and warn
* in .Bl without a type, default to -item
* various tweaks to .Dt
* fix .In, .Fd, .Ft, .Fn and .Fo formatting
* some documentation fixes and additions
* and fix a couple of bugs reported by Ulrich Spoerlein:
* better support for roff block-end "\}" without a preceding dot
* .In must not break the line outside SYNOPSIS
* spelling in some error messages

While merging, fix one regression in .In spacing
that needs to go to bsd.lv, too.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.33 2010/06/06 18:08:41 schwarze Exp $
d58 1
a58 1
is also ignored.  Macro lines with only a control charater and optionally
d170 1
a170 1
demark special output characters and strings by way of input codes.
d336 5
a340 2
Following that, convention dictates specifying at least the SYNOPSIS and
DESCRIPTION sections, although this varies between manual sections.
d456 4
a459 2
See
.Sx \&Op ,
d461 1
d463 16
d480 1
a480 2
and
.Sx \&Vt .
d976 1
a976 1
This is generally used as a grammatic device when referring to the verb
d1680 2
d1711 1
a1711 4
If invoked in the
.Em SYNOPSIS
section, vertical space is asserted before and after the macro.
In all cases, the function arguments are surrounded in parenthesis and
d1725 1
a1725 3
.Sx \&Fa ,
.Sx \&Fo ,
.Sx \&Fc ,
a1748 8
In the
.Em SYNOPSIS
section, a
.Sx \&Fo
block is surrounded by vertical space unless
.Sx \&Ft
is the prior macro, in which case it is preceded by only a newline.
.Pp
d1754 1
a1757 3
.Sx \&Fn .
.Sx \&Fc .
.Ss \&Fr
a1763 11
If invoked before a
.Sx \&Fo
or
.Sx \&Fn
in the
.Em SYNOPSIS
section, a line-break will follow.
Furthermore, if invoked in the
.Em SYNOPSIS
section, it will assert vertical space prior to its arguments.
.Pp
d1772 2
a1773 2
.Sx \&Fo ,
.Sx \&Fc ,
d1775 1
a1775 1
.Sx \&Fn .
d1804 1
a1804 2
the arguments is enclosed in angled braces, and a newline is asserted.
In all other invocations, only angled braces will enclose the argument.
d1806 1
a1806 1
Examples
d1808 3
d1882 1
a1882 1
Furthermore, note that quoted sections propogate over tab-delimited
d1887 1
a1887 1
.D1 .It \(dqcol1 ; <TAB> col2 ;\(dq ;
d2100 2
a2101 1
This is also used for indicating global variables in the SYNOPSIS
d2105 3
a2107 2
syntax when invoked as the first macro in the SYNOPSIS section, else it
accepts ordinary
d2117 1
a2117 1
.D1 \&.Vt extern const char * const sys_signame[] ;
d2120 1
a2120 1
.Sx \&Ft
d2152 1
a2152 1
.D1 \&.Xr mandoc 1 ;
d2188 1
a2188 1
at times newline(s) are suppressed dependong on whether a prior
d2253 1
a2253 1
in manodc.  Furthermore, the
@


1.33
log
@Merge bsd.lv release 1.10.0,
which is mostly the post-hackathon release,
bringing in the OpenBSD changes to bsd.lv,
but which also has a few additional minor fixes:

* .Lb is an in-line macro, not in_line_eoln
* .Bt, .Ud now warn when discarding arguments
* allow bad -man dates to flow verbatim into the front-ends
- so far all reported by Ulrich Spoerlein
* .Ar, .Fl and .Li starting with closing punctuation emit an empty element
* empty .Li macros print nothing, but may cause spacing
* proper EOS handling for .Bt, .Ex, .Rv, and .Ud.
* cleanup: collapse posts_xr into posts_wtext (which is the same)
* efficiency: very simple table lookup for roff.c
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.32 2010/05/16 02:06:50 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: May 16 2010 $
d36 1
a36 1
document follows simple rules:  lines beginning with the control
d125 1
a125 1
the current font scope only:  if a macro opens a font scope alongside
a345 1
\&.
a350 1
\&.
a354 1
\&.
d1139 12
a1150 16
List entry bodies must be left empty.
Column bodies have the following syntax:
.Pp
.D1 .It col1 <TAB> ... coln
.D1 .It col1 Ta ... coln
.D1 .It col1 <TAB> col2 Ta coln
.Pp
where columns may be separated by tabs, the literal string
.Qq Ta ,
or a mixture of both.
These are equivalent except that quoted sections propogate over tabs,
for example,
.Pp
.D1 .It \(dqcol1 ; <TAB> col2 ;\(dq ;
.Pp
will preserve the semicolon whitespace except for the last.
d1205 3
d1335 5
d1349 1
a1349 1
Its calling syntax is as follows:
d1351 1
a1351 1
.D1 \. Ns Sx \&Dd Cm date
d1410 11
a1420 3
Its calling syntax is as follows:
.Pp
.D1 \. Ns Sx \&Dt Cm title section Op Cm volume | arch
d1425 4
a1428 2
The document's title (name).
This should be capitalised and is required.
d1465 3
a1467 2
It is also required and should correspond to the manual's filename
suffix.
a1538 1
.D1 \&.Dt FOO 9 KM i386
d1575 7
d1621 30
d1653 7
d1679 31
d1711 38
d1751 28
d1799 13
d1813 81
d1896 1
a1896 1
The calling syntax is as follows:
d1898 1
a1898 1
.D1 \. Ns Sx \&Lb Cm library
d1920 1
a1920 1
The calling syntax is as follows:
d1922 1
a1922 1
.D1 \. Ns Sx \&Lk Cm uri Op Cm name
d1933 9
d1971 2
a1972 1
file.  Its calling syntax is as follows:
d1974 1
a1974 1
.D1 \. Ns Sx \&Os Op Cm system
d2046 1
d2132 1
a2132 1
Its calling syntax is
d2134 1
a2134 1
.D1 \. Ns Sx \&Xr Cm name section
d2171 43
a2283 5
.It
In groff, the
.Sx \&Fo
macro only produces the first parameter.
This is not the case in mandoc.
@


1.32
log
@sync to bsd.lv: enable .Bl documentation
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.31 2010/05/15 18:25:50 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: May 15 2010 $
d734 3
a736 1
in a SYNOPSIS section line, else it is
d1649 22
d1823 2
@


1.31
log
@allow non-numeric manual sections in -mdoc;
while here, allow LIBRARY in section 9;
by kristaps@@
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.30 2010/05/15 16:48:12 schwarze Exp $
d1103 107
a1209 54
.\" Begins a list composed of one or more list entries.  A list entry is
.\" specified by the
.\" .Sx \&It
.\" macro, which consists of a head and optional body.  By default, a list
.\" is preceded by a blank line.  A list must specify one of the following
.\" list types:
.\" .Bl -tag -width 12n
.\" .It Fl bullet
.\" A list offset by a bullet.  The head of list entries must be empty.
.\" List entry bodies are justified after the bullet.
.\" .It Fl column
.\" A columnated list.  The number of columns is specified as arguments to
.\" the
.\" .Sx \&Bl
.\" macro (the deprecated form of following the invocation of
.\" .Fl column
.\" is also accepted).  Arguments dictate the width of columns specified in
.\" list entries.  List entry bodies must be left empty.  Columns specified
.\" in the list entry head are justified to their position in the sequence
.\" of columns.
.\" .It Fl dash
.\" A list offset by a dash (hyphen).  The head of list entries must be
.\" empty.  List entry bodies are justified past the dash.
.\" .It Fl diag
.\" Like
.\" .Fl inset
.\" lists, but with additional formatting to the head.
.\" .It Fl enum
.\" A list offset by a number indicating list entry position.  The head of
.\" list entries must be empty.  List entry bodies are justified past the
.\" enumeration.
.\" .It Fl hang
.\" Like
.\" .Fl tag ,
.\" but instead of list bodies justifying to the head on the first line,
.\" they trail the head text.
.\" .It Fl hyphen
.\" Synonym for
.\" .Fl dash .
.\" .It Fl inset
.\" Like
.\" .Fl tag ,
.\" but list entry bodies aren't justified.
.\" .It Fl item
.\" An un-justified list.  This produces blocks of text.
.\" .It Fl ohang
.\" List bodies are placed on the line following the head.
.\" .It Fl tag
.\" A list offset by list entry heads.  List entry bodies are justified
.\" after the head.
.\" .El
.\" .Pp
.\" More...
.\" .
@


1.30
log
@various improvements regarding errors and warnings Joerg Sonnenberger:
* If the last -column .Bl isn't specified, it is auto-sized.
* An invalid .St argument should be a warning, not an error.
  Just put the argument into the output.
* An invalid .At argument should be a warning, not an error.
  Just print the argument, like new groff does.
* Remove warnings concerning manual section (like 1, 6, 8).
  It was only used for .Ex and not really useful.
* Remove warnings concerning page section (like SYNOPSIS).
  These were only used for .Fd and .Lb and not really useful.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.29 2010/05/15 15:37:53 schwarze Exp $
d350 1
a350 1
\&.\e\*q The next is for sections 2 & 3 only.
d412 1
a412 1
assumed to be a function in a section 2 or 3 manual.
@


1.29
log
@more end-of-sentence (EOS) handling:
* recognize the end of quoted sentences, and of those in parantheses
* detect EOS in append_delims, so it works after all macros
by kristaps@@
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.28 2010/05/14 19:52:43 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: May 14 2010 $
d1914 1
d1916 1
a1916 1
.Sx \&Ex
d1919 6
@


1.28
log
@Integrate kristaps@@' end-of-sentence (EOS) framework
which is simpler and more powerful than mine, and remove mine.

* man(7) now has EOS handling, too
* put EOS detection into its own function in libmandoc
* use node and termp flags to communicate the EOS condition
* no more EOS pseudo-macro
* no more non-printable EOS marker character on the formatter level

This slightly breaks EOS detection after trailing punctuation
in mdoc(7) macros, but that will be restored soon.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.27 2010/05/14 14:47:44 schwarze Exp $
d304 12
a315 1
or question mark.
@


1.27
log
@Merge 1.9.25, keeping local patches;
this does not merge kristaps' end-of-sentences handling yet,
i will check that separately.  This one includes:
* handle \*(Ba as a delimiter
* introduce ARGS_PEND for .Bl -column .It end-of-line special casing
* section ordering: expect EXIT STATUS at the right place
* line break fixes in SYNOPSIS
* allow literal contexts to have arbitrary line lengths
* the input file column number can not be used to identify the beginning
  of a line because white space is allowed after the initial '.'
* proper leading spaces in -man -Tascii mode
* do not let Lb break lines in -mdoc -Thtml LIBRARY
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.26 2010/05/14 01:54:37 schwarze Exp $
d299 6
@


1.26
log
@merge 1.9.24, keeping local patches; some changes:
* preserve multiple consecutive space characters in input
* do not restrict .Cd and .Rv to certain sections (requested by Joerg)
* do not run lookup() on quoted words
* enum return types for mdoc_args and mdoc_argv
* fix auto-closing of LINK tag in -Txhtml (from Daniel Friesel)
* various lint and manual fixes
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.25 2010/04/07 23:15:05 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: April 7 2010 $
d104 2
a105 1
or a single one-character sequence.  See
d107 2
a108 1
for a complete list.  Examples include
d123 2
a124 1
respectively) may be used instead.  A text decoration is valid within
d131 2
a132 1
are only valid within the font scope of the macro.  If
d181 2
a182 1
for a complete list.  Examples include
d195 2
a196 2
In macro lines, whitespace delimits arguments and is discarded.  If
arguments are quoted, whitespace within the quotes is retained.
d199 4
a202 4
space-delimited terms or to retain blocks of whitespace.  A quoted
argument begins with a double-quote preceded by whitespace.  The next
double-quote not pair-wise adjacent to another double-quote terminates
the literal, regardless of surrounding whitespace.
d211 2
a212 1
considered literal text.  Thus, the following produces
d222 2
a223 2
that require a date argument.  The canonical form for dates is the
American format:
d229 2
a230 1
value is an optionally zero-padded numeral.  The
d232 2
a233 1
value is the full month name.  The
d257 2
a258 2
Negative numbers, while accepted, are truncated to zero.  The following
scaling units are accepted:
d296 2
a297 1
is necessarily non-portable across output media.  See
a345 2
\&.\e\*q The next is for sections 1 & 8 only.
\&.\e\*q .Sh EXIT STATUS
d351 2
d370 2
a371 2
document are conventionally ordered as they appear above.  Sections
should be composed as follows:
d374 2
a375 2
The name(s) and a short description of the documented material.  The
syntax for this as follows:
d395 2
a396 2
assumed to be a function in a section 2 or 3 manual.  The syntax for
this is as follows:
d461 3
a463 14
Implementation-specific notes should be kept here.  This is useful when
implementing standard functions that may have side effects or notable
algorithmic implications.
.It Em EXIT STATUS
Command exit status for section 1, 6, and 8 manuals.  This section is
the dual of
.Em RETURN VALUES ,
which is used for functions.  Historically, this information was
described in
.Em DIAGNOSTICS ,
a practise that is now discouraged.
.Pp
See
.Sx \&Ex .
d467 2
a468 2
which is used for commands.  It documents the return values of functions
in sections 2, 3, and 9.
d479 3
a481 2
Documents files used.  It's helpful to document both the file and a
short description of how the file is used (created, modified, etc.).
d485 11
d497 3
a499 3
Example usages.  This often contains snippets of well-formed,
well-tested invocations.  Make doubly sure that your examples work
properly!
d501 2
a502 1
Documents error conditions.  This is most useful in section 4 manuals.
d517 4
a520 3
References other manuals with related topics.  This section should exist
for most manuals.  Cross-references should conventionally be ordered
first by section, then alphabetically.
d525 2
a526 2
References any standards implemented or used.  If not adhering to any
standards, the
d554 4
a557 3
at the beginning of the line.  An arbitrary amount of whitespace may
sit between the control character and the macro name.  Thus, the
following are equivalent:
d563 2
a564 1
The syntax of a macro depends on its classification.  In this section,
d577 3
a579 2
line-macro.  If a macro is not callable, then its invocation after the
initial line macro is interpreted as opaque text, such that
d587 3
a589 2
(ostensibly callable) macros.  If a macro is not parsable, subsequent
macro invocations on the line will be interpreted as opaque text.
d595 2
a596 2
Multi-line scope closed by an explicit closing macro.  All macros
contains bodies; only
d644 2
a645 2
Like block full-explicit, but also with single-line scope.  Each
has at least a body and, in limited circumstances, a head
d722 3
a724 3
end of line, fixed argument lengths, and/or subsequent macros.  In-line
macros have only text children.  If a number (or inequality) of
arguments is
d814 2
a815 1
alphabetically.  For the scoping of individual macros, see
d896 3
a898 2
Author name.  This macro may alternatively accepts the following
arguments, although these may not be specified along with a parameter:
d909 2
a910 1
interspersed by other macros or text, are split.  Thus, specifying
d912 2
a913 2
will cause the first listing also to be split.  If not in the AUTHORS
section, the default is not to split.
d929 2
a930 2
Begins a block enclosed by angled brackets.  Does not have any head
arguments.
d938 3
a940 3
Inserts an apostrophe without any surrounding white-space.  This is
generally used as a grammatic device when referring to the verb form of
a function:
d963 2
a964 1
Command arguments.  If an argument is not provided, the string
d973 2
a974 1
Formats an AT&T version.  Accepts at most one parameter:
d1004 5
a1008 4
Begins a display block.  A display is collection of macros or text which
may be collectively offset or justified in a manner different from that
of the enclosing context.  By default, the block is preceded by a
vertical space.
d1026 2
a1027 1
The type must be provided first.  Secondary arguments are as follows:
d1048 2
a1049 2
As a precalculated width for a named macro.  The most popular is the
imaginary macro
d1141 2
a1142 2
Begins a block enclosed by square brackets.  Does not have any head
arguments.
d1173 2
a1174 2
Begins a block enclosed by curly braces.  Does not have any head
arguments.
d1230 2
a1231 1
Configuration declaration.  This denotes strings accepted by
d1241 2
a1242 1
declarations.  This practise is discouraged.
d1244 2
a1245 2
Command modifiers.  Useful when specifying configuration options or
keys.
d1254 4
a1257 2
One-line indented display.  This is formatted by the default rules and
is useful for simple indented statements.  It is followed by a newline.
d1272 2
a1273 1
Document date.  This is the mandatory first macro of any
d1275 2
a1276 1
manual.  Its calling syntax is as follows:
d1300 4
a1303 2
One-line intended display.  This is formatted as literal text and is
useful for commands and invocations.  It is followed by a newline.
d1333 2
a1334 1
Document title.  This is the mandatory second macro of any
d1336 2
a1337 1
file.  Its calling syntax is as follows:
d1344 2
a1345 2
The document's title (name).  This should be capitalised and is
required.
d1347 2
a1348 1
The manual section.  This may be one of
d1414 2
a1415 1
This specifies a specific relevant architecture.  If
d1418 3
a1420 1
subsequent that.  It, too, is optional.  It must be one of
d1493 3
a1495 3
Denotes text that should be emphasised.  Note that this is a
presentation term and should not be used for stylistically decorating
technical terms.
d1520 2
a1521 2
Inserts text regarding a utility's exit values.  This macro must have
first the
d1534 3
a1536 2
Command-line flag.  Used when listing arguments to command-line
utilities.  Prints a fixed-width hyphen
d1538 4
a1541 3
directly followed by each argument.  If no arguments are provided, a hyphen is
printed followed by a space.  If the argument is a macro, a hyphen is
prefixed to the subsequent macro output.
d1579 2
a1580 1
Format a hyperlink.  The calling syntax is as follows:
d1618 2
a1619 1
Document operating system version.  This is the mandatory third macro of
d1628 3
a1630 3
parameter specifies the relevant operating system or environment.  Left
unspecified, it defaults to the local operating system version.  This is
the suggested form.
d1676 2
a1677 1
block.  Does not have any tail arguments.
d1681 3
a1683 2
block.  Does not have any head arguments.  The block macro may only
contain
d1730 2
a1731 1
Format the UNIX name.  Accepts no argument.
d1747 4
a1750 3
A variable type.  This is also used for indicating global variables in the
SYNOPSIS section, in which case a variable name is also specified.  Note that
it accepts
d1773 3
a1775 3
Open an extension scope.  This macro originally existed to extend the
9-argument limit of troff; since this limit has been lifted, the macro
has been deprecated.
d1787 2
a1788 1
are the name and section of the linked manual.  If
d1792 2
a1793 2
is inserted into the token stream.  This behaviour is for compatibility
with
d1825 2
a1826 1
certain list types.  mandoc does.
d1830 2
a1831 1
arguments.  mandoc and newer groff implementations do.
d1836 2
a1837 1
within line-macro scopes.  mandoc follows a consistent system.
d1840 2
a1841 1
move to prior lines.  Furthermore, the
d1846 2
a1847 2
standalone double-quote in formatted output.  This idiosyncratic
behaviour is not applicable in mandoc.
d1858 2
a1859 2
argument is ignored.  Lastly, since text is not right-justified in
mandoc (or even groff),
d1868 2
a1869 2
Historic groff has many un-callable macros.  Most of these (excluding
some block-level macros) are now callable.
d1886 2
a1887 1
delimiter to render.  This is not supported in mandoc.
d1891 2
a1892 2
macro only produces the first parameter.  This is not the case in
mandoc.
d1899 2
a1900 2
macros were stipulated only to occur in certain manual sections.  mandoc
does not have these restrictions.
@


1.25
log
@Merge the good parts of 1.9.23,
avoid the bad parts of 1.9.23, and keep local patches.

Input in general:
 * Basic handling of roff-style font escapes \f, \F.
 * Quoted punctuation does not count as punctuation.

mdoc(7) parser:
 * Make .Pf callable; noted by Claus Assmann.
 * Let .Bd and .Bl ignore unknown arguments; noted by deraadt@@.
 * Do not warn when .Er is used outside certain sections.
 * Replace mdoc_node_free[list] by mdoc_node_delete.
 * Replace #define by enum for rew*() return values.

man(7) parser:
 * When .TH is missing, use default section and date.

Output in general:
 * Curly braces do not count as punctuation.
 * No space after .Fl w/o args when a macro follows on the same line.

HTML output:
 * Unify PAIR_*_INIT macros, introduce new PAIR_ID_INIT().
 * Print whitespace after, not before .Vt .Fn .Ft .Fo.

Checked that all manuals in base still build.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.24 2010/04/02 12:39:47 schwarze Exp $
d3 1
a3 1
.\" Copyright (c) 2009 Kristaps Dzonsons <kristaps@@kth.se>
d17 1
a17 1
.Dd $Mdocdate: April 2 2010 $
a19 2
.
.
a22 2
.
.
d30 1
a30 3
and usage.  Our reference implementation is
.Xr mandoc 1 .
The
d32 1
a32 3
section describes compatibility with
.Xr groff 1 .
.
a44 2
.
.
a51 2
.
.
a59 2
.
.
a86 1
.
a93 2
.
.
a111 2
.
.
a158 2
.
.
a182 2
.
.
d184 5
a188 9
In non-literal free-form lines, consecutive blocks of whitespace are
pruned from input and added later in the output filter, if applicable:
.Bd -literal -offset indent
These     spaces   are    pruned       from    input.
\&.Bd \-literal
These         are              not.
\&.Ed
.Ed
.
a191 9
.
.Pp
Blank lines are only permitted within literal contexts, as are lines
containing only whitespace.  Tab characters are only acceptable when
delimiting
.Sq \&Bl \-column
or when in a literal context.
.
.
a197 1
.
a210 1
.
a212 1
.
a238 1
.
a244 1
.
a289 2
.
.
a383 1
.
a393 1
.
a436 1
.
a450 1
.
a454 1
.
a465 1
.
a473 1
.
a479 1
.
a485 1
.
a489 1
.
a499 1
.
a504 1
.
a511 1
.
a519 1
.
a523 1
.
a529 1
.
a532 1
.
a534 1
.
a536 1
.
a537 2
.
.
a548 1
.
a558 1
.
a567 1
.
a573 1
.
a577 2
.
.
a587 1
.
a599 2
.
.
a618 1
.
a626 2
.
.
a643 1
.
a671 2
.
.
a678 1
.
a702 2
.
.
a717 1
.
a795 2
.
.
a799 1
.
a806 1
.
a811 1
.
a819 1
.
a825 1
.
a829 1
.
a833 1
.
a837 1
.
a841 1
.
a845 1
.
a851 1
.
a855 1
.
a860 1
.
a862 1
.
a866 1
.
a870 1
.
a877 1
.
a908 1
.
a917 1
.
a924 1
.
a942 1
.
a951 1
.
a977 1
.
a981 1
.
a1059 1
.
a1128 1
.
a1144 1
.
a1148 1
.
a1160 1
.
a1168 1
.
a1185 1
.
a1188 1
.
a1205 1
.
d1207 1
a1207 2
Configuration declaration (suggested for use only in section four
manuals).  This denotes strings accepted by
a1217 1
.
a1227 1
.
a1238 1
.
a1243 1
.
a1269 1
.
a1280 1
.
a1289 1
.
a1300 1
.
a1423 1
.
a1432 1
.
a1449 1
.
a1454 1
.
a1462 1
.
a1473 1
.
a1474 1
.
a1481 1
.
a1511 1
.
a1532 1
.
a1549 1
.
a1573 1
.
a1599 1
.
a1604 1
.
a1621 1
.
a1631 1
.
a1635 1
.
a1673 1
.
a1700 1
.
a1723 1
.
a1726 1
.
a1730 1
.
a1753 1
.
a1755 2
.
.
d1757 3
a1759 3
This section documents compatibility with other roff implementations, at
this time limited to
.Xr groff 1 .
d1762 1
a1762 1
refers to those versions before the
d1766 3
a1768 1
.
d1776 1
a1776 3
In
.Xr groff 1 ,
the
d1779 1
a1779 1
certain list types.  This irregular behaviour has been discontinued.
d1781 1
a1781 3
Historic
.Xr groff 1
does not print a dash for empty
d1783 1
a1783 1
arguments.  This behaviour has been discontinued.
d1785 1
a1785 2
.Xr groff 1
behaves strangely (even between versions) when specifying
d1787 2
a1788 2
escapes within line-macro scopes.  These aberrations have been
normalised.
d1790 2
a1791 5
Negative scaling units are now truncated to zero instead of creating
interesting conditions, such as with
.Sx \&sp
.Fl 1i .
Furthermore, the
d1797 1
a1797 1
behaviour is no longer applicable.
d1805 2
a1806 2
.Fl left .
The
d1808 2
a1809 1
argument is ignored.  Since text is not right-justified,
a1817 4
Blocks of whitespace are stripped from both macro and free-form text
lines (except when in literal mode), while groff would retain whitespace
in free-form text lines.
.It
d1819 1
a1819 2
some block-level macros) are now callable, conforming to the
non-historic groff version.
d1825 1
a1825 1
but is a proper delimiter in this implementation.
d1827 1
a1827 2
.Sx \&It
.Fl nested
d1836 1
a1836 1
delimiter to render.  This is not supported.
d1840 10
a1849 1
macro only produces the first parameter.  This is no longer the case.
a1850 2
.
.
a1853 2
.
.
d1858 1
a1858 1
.An Kristaps Dzonsons Aq kristaps@@kth.se .
@


1.24
log
@merge 1.9.22, keeping local patches
* convert mdoc tokens from #define to enum
* fix a segfault with .Xo/.Xc in explicit blocks
* Thorn is \*(Th, not \*(TH; noticed by Joerg Sonnenberger
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.23 2010/02/26 12:51:25 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: February 26 2010 $
d863 1
a863 1
.It Sx \&Pf  Ta    \&No     Ta    Yes      Ta    1
d977 2
a978 4
.Bd -literal -offset indent
\&.Ad [0,$]
\&.Ad 0x00000000
.Ed
d999 2
a1000 5
.Bd -literal -offset indent
\&.An -nosplit
\&.An J. E. Hopcraft ,
\&.An J. D. Ullman .
.Ed
d1017 1
a1017 3
.Bd -literal -offset indent
\&.Fl -key= Ns Ao Ar val Ac
.Ed
d1034 1
a1034 3
.Bd -literal -offset indent
\&.Fl -key= Ns Aq Ar val
.Ed
d1055 3
a1057 5
.Bd -literal -offset indent
\&.Fl o Ns Ar file1
\&.Ar
\&.Ar arg1 , arg2 .
.Ed
d1073 2
a1074 4
.Bd -literal -offset indent
\&.At
\&.At V.1
.Ed
d1234 1
a1234 1
\&.Dv BUFSIZ Bc
d1244 1
a1244 3
.Bd -literal -offset indent
\&.Bq 1 , Dv BUFSIZ
.Ed
d1269 1
a1269 1
\&.Va n Brc
d1279 1
a1279 3
.Bd -literal -offset indent
\&.Brq 1 , ... , Va n
.Ed
d1289 2
a1290 4
.Bd -literal -offset indent
\&.Bsx 1.0
\&.Bsx
.Ed
d1311 2
a1312 4
.Bd -literal -offset indent
\&.Bx 4.4
\&.Bx
.Ed
d1330 1
a1330 3
.Bd -literal -offset indent
\&.Cd device le0 at scode?
.Ed
d1343 2
a1344 4
.Bd -literal -offset indent
\&.Cm ControlPath
\&.Cm ControlMaster
.Ed
d1354 1
a1354 3
.Bd -literal -offset indent
\&.D1 Fl abcdefgh
.Ed
d1385 3
a1387 5
.Bd -literal -offset indent
\&.Dd $\&Mdocdate$
\&.Dd $\&Mdocdate: July 21 2007$
\&.Dd July 21, 2007
.Ed
d1399 1
a1399 3
.Bd -literal -offset indent
\&.Dl % mandoc mdoc.7 | less
.Ed
d1411 1
a1411 3
.Bd -literal -offset indent
\&.D1 Do April is the cruellest month Dc \e(em T.S. Eliot
.Ed
d1420 1
a1420 1
.Bd -literal -offset indent
d1542 4
a1545 6
.Bd -literal -offset indent
\&.Dt FOO 1
\&.Dt FOO 4 KM
\&.Dt FOO 9 i386
\&.Dt FOO 9 KM i386
.Ed
d1556 2
a1557 4
.Bd -literal -offset indent
\&.Dv BUFSIZ
\&.Dv STDOUT_FILENO
.Ed
d1567 2
a1568 4
.Bd -literal -offset indent
\&.Dx 2.4.1
\&.Dx
.Ed
d1585 1
d1592 2
a1593 4
.Bd -literal -offset indent
\&.Ed Warnings!
\&.Ed Remarks :
.Ed
d1598 1
a1598 1
Error constants (suggested for use only in section two manuals).
d1601 2
a1602 4
.Bd -literal -offset indent
\&.Er EPERM
\&.Er ENOENT
.Ed
d1614 2
a1615 4
.Bd -literal -offset indent
\&.Ev DISPLAY
\&.Ev PATH
.Ed
d1635 3
a1637 2
before each delimited argument.  If no arguments are provided, a hyphen
is still printed.
d1640 4
a1643 5
.Bd -literal -offset indent
\&.Fl a b c
\&.Fl
\&.Op Fl o Ns Ar file
.Ed
d1657 2
a1658 4
.Bd -literal -offset indent
\&.Fx 7.1
\&.Fx
.Ed
d1682 2
a1683 4
.Bd -literal -offset indent
\&.Lk http://bsd.lv "The BSD.lv Project"
\&.Lk http://bsd.lv
.Ed
d1700 2
a1701 4
.Bd -literal -offset indent
\&.Nx 5.01
\&.Nx
.Ed
d1731 3
a1733 5
.Bd -literal -offset indent
\&.Os
\&.Os KTH/CSC/TCS
\&.Os BSD 4.3
.Ed
d1751 2
a1752 4
.Bd -literal -offset indent
\&.Ox 4.5
\&.Ox
.Ed
d1802 1
a1802 1
.Bd -literal -offset indent
d1835 1
a1835 3
.Bd -literal -offset indent
\&.Ux
.Ed
d1863 2
a1864 4
.Bd -literal -offset indent
\&.Vt unsigned char
\&.Vt extern const char * const sys_signame[] ;
.Ed
d1900 3
a1902 5
.Bd -literal -offset indent
\&.Xr mandoc 1
\&.Xr mandoc 1 ;
\&.Xr mandoc 1 s behaviour
.Ed
@


1.23
log
@Old news: there is an experimental "loongson" port.
This commit corresponds to what jmc@@ did in share/tmac/mdoc/doc-common
and share/man/man7/mdoc.samples.7 on January 24.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.22 2010/02/18 02:11:26 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: February 18 2010 $
d1930 3
d1934 4
@


1.22
log
@sync to release 1.9.15:
 * corrected .Vt handling (spotted by Joerg Sonnenberger)
 * corrected .Xr argument handling (based on my patch)
 * removed \\ escape sequence (because it is for low-level roff only)
 * warn about trailing whitespace (suggested by jmc@@)
 * -Txhtml support
 * and some general cleanup and doc improvements
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.21 2010/01/02 02:42:06 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: January 2 2010 $
d1556 1
@


1.21
log
@complete the sync to 1.9.15-pre2: mostly minor fixes
 * bugfix: do not restore TERMP flags when leaving lists, just reset them
 * and a few HTML fixes
 * clarity: return width from a2width, not width+2, and adapt to it
 * manual: document .Bl and .Fl
 * portability: no need to escape '%' in macro names
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.20 2009/12/24 02:08:14 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: December 24 2009 $
d135 1
a135 1
(revert to previous mode):  
d173 1
a173 1
Note these forms are 
d175 1
a175 1
recommended for 
d181 1
a181 1
Historically, 
d183 1
a183 1
also defined a set of package-specific 
d185 1
a185 1
which, like 
d346 1
a346 1
The first section (sections are denoted by 
d423 1
a423 1
See 
d441 1
a441 1
configuration. 
d472 1
a472 1
Manuals not in these sections generally don't need a 
d475 1
a475 1
See 
d484 1
a484 1
This expands upon the brief, one-line description in 
d686 1
a686 1
.Pc 
d773 1
d775 8
d875 1
a875 1
.It Sx \&Xr  Ta    Yes      Ta    Yes      Ta    >0, <3
d878 1
a878 1
.El   
d1038 1
a1038 1
Encloses its arguments in angled brackets.  
d1085 1
a1085 1
\&.At 
d1254 1
a1254 1
Encloses its arguments in square brackets.  
d1401 1
a1401 1
The 
d1450 1
a1450 1
Encloses its arguments in double quotes.  
d1904 24
d1931 25
d1985 1
a1985 1
Historic 
d1987 1
a1987 1
does not print a dash for empty 
@


1.20
log
@sync to 1.9.14: rewrite escape sequence handling:
- new function a2roffdeco
- font modes (\f) only affect the current stack point
- implement scaling (\s)
- implement space suppression (\c)
- implement non-breaking space (\~) in -Tascii
- many manual improvements
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.19 2009/12/23 22:30:17 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: December 23 2009 $
d422 5
d437 1
a437 2
.Sx \&Lb
for details.
d474 8
d495 1
d551 2
a552 1
.Sx \&Bl No \-diag .
d1177 54
a1230 1
.
d1666 16
d1916 17
d1942 1
a1942 1
.Cm \-1i .
@


1.19
log
@sync to 1.9.13: minor fixes:

correctness/functionality:
 - bugfix: properly ignore lines with only a dot in -man
 - bugfix: .Bl -ohang doesn't allow -width, warn about this
 - improve date string handling by new function mandoc_a2time
 - some HTML improvements
 - significant documentation additions in man.7 and mdoc.7

portability:
 - replace __dead by __attribute__((noreturn))
 - bugfix: correct .Dx rendering
 - some more library names for NetBSD

simplicity:
 - replace hand-rolled putchar(3)-loops by fwrite(3)
 - replace single-character printf(3) by putchar(3)
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.18 2009/10/27 21:40:07 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: October 27 2009 $
d134 42
a175 2
escape followed by an indicator: B (bold), I, (italic), or P and R
(Roman, or reset).  This form is not recommended for 
d177 1
a177 1
which encourages semantic, not presentation, annotation.
d1833 6
d1841 2
a1842 1
.Sq \&sp -1i .
d1852 2
a1853 1
.Sx \&Bd Fl center
d1883 2
a1884 1
.Sx \&It Fl nested
@


1.18
log
@sync to 1.9.11: adapt printing of dates to groff conventions,
NetBSD portability fixes and some minor bugfixes and feature enhancements;
also checked that my hyphenation code still works on top of this
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.17 2009/10/21 19:13:50 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: October 21 2009 $
d215 2
a216 3
that require a date argument.  The 
.Em canonical form
for dates is the American format:
d228 1
a228 7
The
.Em non-canonical form
is the same as the canonical form, but without the comma between the
.Cm Day
and
.Cm Year
field.
d230 2
a231 5
Lastly,
.Em reduced form
dates range from only a
.Cm Year
to the full canonical or non-canonical form.
a237 1
.D1 "May 20 2009" Pq non-canonical form
d366 12
a377 3
.Bl -tag -width Ds -offset Ds
.It NAME
Must contain at least one
d379 166
a544 28
followed by
.Sx \&Nd .
The name needs re-stating since one
.Nm
documents can be used for more than one utility or function, such as
.Xr grep 1
also being referenced as
.Xr egrep 1
and
.Xr fgrep 1 .
.It LIBRARY
.It SYNOPSIS
.It DESCRIPTION
.It IMPLEMENTATION NOTES
.It EXIT STATUS
.It RETURN VALUES
.It ENVIRONMENT
.It FILES
.It EXAMPLES
.It DIAGNOSTICS
.It ERRORS
.It SEE ALSO
.It STANDARDS
.It HISTORY
.It AUTHORS
.It CAVEATS
.It BUGS
.It SECURITY CONSIDERATIONS
d849 2
a850 1
block.  This should follow the reduced syntax for 
a851 2
Canonical or non-canonical form is not necessary since publications are
often referenced only by year, or month and year.
d1290 1
a1290 1
.Xr cvs 1
d1293 1
d1483 1
a1483 1
Format the DragonFlyBSD version provided as an argument, or a default
@


1.17
log
@sync to 1.9.9, featuring:
 * -Thtml output mode
 * roff scaling units
 * and some minor fixes
for full changelogs, see http://bsd.lv/cgi-bin/cvsweb.cgi/
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.16 2009/10/19 20:44:35 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: October 19 2009 $
d614 1
d617 1
d761 3
d951 1
a951 1
.Ar Ds ,
d1454 13
d1568 1
a1568 1
block.  Does not have any head arguments.  The block macro and may only
@


1.16
log
@sync to 1.9.7: compatibility fix; from joerg at netbsd dot org
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.15 2009/08/22 23:17:40 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: August 22 2009 $
d76 1
d212 91
d305 1
a305 1
Each
d307 14
a320 7
document must begin with a document prologue, containing, in order,
.Sq \&Dd ,
.Sq \&Dt ,
and
.Sq \&Os ,
then the NAME section containing at least one
.Sq \&Nm
d322 8
a329 1
.Sq \&Nd :
a371 1
.
d373 37
a409 2
Subsequent SYNOPSIS and DESCRIPTION sections are strongly encouraged,
but non-compulsory.
d417 6
a422 5
sit between the control character and the macro name.  Thus,
.Sq \&.Pp
and
.Sq \&.\ \ \ \&Pp
are equivalent.  Macro names are two or three characters in length.
d461 1
a461 1
.Pq Sq \&Bf
d472 8
a479 8
.It \&Bd     Ta    \&No     Ta    \&No     Ta    closed by \&Ed
.It \&Bf     Ta    \&No     Ta    \&No     Ta    closed by \&Ef
.It \&Bk     Ta    \&No     Ta    \&No     Ta    closed by \&Ek
.It \&Bl     Ta    \&No     Ta    \&No     Ta    closed by \&El
.It \&Ed     Ta    \&No     Ta    \&No     Ta    opened by \&Bd
.It \&Ef     Ta    \&No     Ta    \&No     Ta    opened by \&Bf
.It \&Ek     Ta    \&No     Ta    \&No     Ta    opened by \&Bk
.It \&El     Ta    \&No     Ta    \&No     Ta    opened by \&Bl
d487 5
a491 5
.Sq \&It \-bullet ,
.Sq \-hyphen ,
.Sq \-dash ,
.Sq \-enum ,
.Sq \-item
d493 5
a497 3
don't have heads, while
.Sq \&It \-column
may have multiple heads.
d506 4
a509 4
.It \&It     Ta    \&No     Ta    Yes      Ta    closed by \&It, \&El
.It \&Nd     Ta    \&No     Ta    \&No     Ta    closed by \&Sh
.It \&Sh     Ta    \&No     Ta    \&No     Ta    closed by \&Sh
.It \&Ss     Ta    \&No     Ta    \&No     Ta    closed by \&Sh, \&Ss
d516 4
a519 1
.Pq So \&Fo Sc , So \&Eo Sc
d521 1
a521 1
.Pq So \&Ec Sc .
d534 24
a557 24
.It \&Ac     Ta    Yes      Ta    Yes      Ta    opened by \&Ao
.It \&Ao     Ta    Yes      Ta    Yes      Ta    closed by \&Ac
.It \&Bc     Ta    Yes      Ta    Yes      Ta    closed by \&Bo
.It \&Bo     Ta    Yes      Ta    Yes      Ta    opened by \&Bc
.It \&Brc    Ta    Yes      Ta    Yes      Ta    opened by \&Bro
.It \&Bro    Ta    Yes      Ta    Yes      Ta    closed by \&Brc
.It \&Dc     Ta    Yes      Ta    Yes      Ta    opened by \&Do
.It \&Do     Ta    Yes      Ta    Yes      Ta    closed by \&Dc
.It \&Ec     Ta    Yes      Ta    Yes      Ta    opened by \&Eo
.It \&Eo     Ta    Yes      Ta    Yes      Ta    closed by \&Ec
.It \&Fc     Ta    Yes      Ta    Yes      Ta    opened by \&Fo
.It \&Fo     Ta    \&No     Ta    \&No     Ta    closed by \&Fc
.It \&Oc     Ta    Yes      Ta    Yes      Ta    closed by \&Oo
.It \&Oo     Ta    Yes      Ta    Yes      Ta    opened by \&Oc
.It \&Pc     Ta    Yes      Ta    Yes      Ta    closed by \&Po
.It \&Po     Ta    Yes      Ta    Yes      Ta    opened by \&Pc
.It \&Qc     Ta    Yes      Ta    Yes      Ta    opened by \&Oo
.It \&Qo     Ta    Yes      Ta    Yes      Ta    closed by \&Oc
.It \&Re     Ta    \&No     Ta    \&No     Ta    opened by \&Rs
.It \&Rs     Ta    \&No     Ta    \&No     Ta    closed by \&Re
.It \&Sc     Ta    Yes      Ta    Yes      Ta    opened by \&So
.It \&So     Ta    Yes      Ta    Yes      Ta    closed by \&Sc
.It \&Xc     Ta    Yes      Ta    Yes      Ta    opened by \&Xo
.It \&Xo     Ta    Yes      Ta    Yes      Ta    closed by \&Xc
d572 11
a582 11
.It \&Aq     Ta    Yes      Ta    Yes
.It \&Bq     Ta    Yes      Ta    Yes
.It \&Brq    Ta    Yes      Ta    Yes
.It \&D1     Ta    \&No     Ta    \&Yes
.It \&Dl     Ta    \&No     Ta    Yes
.It \&Dq     Ta    Yes      Ta    Yes
.It \&Op     Ta    Yes      Ta    Yes
.It \&Pq     Ta    Yes      Ta    Yes
.It \&Ql     Ta    Yes      Ta    Yes
.It \&Qq     Ta    Yes      Ta    Yes
.It \&Sq     Ta    Yes      Ta    Yes
d605 72
a676 72
.It \&%A     Ta    \&No     Ta    \&No     Ta    >0
.It \&%B     Ta    \&No     Ta    \&No     Ta    >0
.It \&%C     Ta    \&No     Ta    \&No     Ta    >0
.It \&%D     Ta    \&No     Ta    \&No     Ta    >0
.It \&%I     Ta    \&No     Ta    \&No     Ta    >0
.It \&%J     Ta    \&No     Ta    \&No     Ta    >0
.It \&%N     Ta    \&No     Ta    \&No     Ta    >0
.It \&%O     Ta    \&No     Ta    \&No     Ta    >0
.It \&%P     Ta    \&No     Ta    \&No     Ta    >0
.It \&%R     Ta    \&No     Ta    \&No     Ta    >0
.It \&%T     Ta    \&No     Ta    \&No     Ta    >0
.It \&%V     Ta    \&No     Ta    \&No     Ta    >0
.It \&Ad     Ta    Yes      Ta    Yes      Ta    n
.It \&An     Ta    Yes      Ta    Yes      Ta    n
.It \&Ap     Ta    Yes      Ta    Yes      Ta    0
.It \&Ar     Ta    Yes      Ta    Yes      Ta    n
.It \&At     Ta    Yes      Ta    Yes      Ta    1
.It \&Bsx    Ta    Yes      Ta    Yes      Ta    n
.It \&Bt     Ta    \&No     Ta    \&No     Ta    0
.It \&Bx     Ta    Yes      Ta    Yes      Ta    n
.It \&Cd     Ta    Yes      Ta    Yes      Ta    >0
.It \&Cm     Ta    Yes      Ta    Yes      Ta    n
.It \&Db     Ta    \&No     Ta    \&No     Ta    1
.It \&Dd     Ta    \&No     Ta    \&No     Ta    >0
.It \&Dt     Ta    \&No     Ta    \&No     Ta    n
.It \&Dv     Ta    Yes      Ta    Yes      Ta    n
.It \&Dx     Ta    Yes      Ta    Yes      Ta    n
.It \&Em     Ta    Yes      Ta    Yes      Ta    >0
.It \&En     Ta    \&No     Ta    \&No     Ta    0
.It \&Er     Ta    Yes      Ta    Yes      Ta    >0
.It \&Es     Ta    \&No     Ta    \&No     Ta    0
.It \&Ev     Ta    Yes      Ta    Yes      Ta    n
.It \&Ex     Ta    \&No     Ta    \&No     Ta    n
.It \&Fa     Ta    Yes      Ta    Yes      Ta    n
.It \&Fd     Ta    \&No     Ta    \&No     Ta    >0
.It \&Fl     Ta    Yes      Ta    Yes      Ta    n
.It \&Fn     Ta    Yes      Ta    Yes      Ta    >0
.It \&Fr     Ta    \&No     Ta    \&No     Ta    n
.It \&Ft     Ta    Yes      Ta    Yes      Ta    n
.It \&Fx     Ta    Yes      Ta    Yes      Ta    n
.It \&Hf     Ta    \&No     Ta    \&No     Ta    n
.It \&Ic     Ta    Yes      Ta    Yes      Ta    >0
.It \&In     Ta    \&No     Ta    \&No     Ta    n
.It \&Lb     Ta    \&No     Ta    \&No     Ta    1
.It \&Li     Ta    Yes      Ta    Yes      Ta    n
.It \&Lk     Ta    Yes      Ta    Yes      Ta    n
.It \&Lp     Ta    \&No     Ta    \&No     Ta    0
.It \&Ms     Ta    Yes      Ta    Yes      Ta    >0
.It \&Mt     Ta    Yes      Ta    Yes      Ta    >0
.It \&Nm     Ta    Yes      Ta    Yes      Ta    n
.It \&No     Ta    Yes      Ta    Yes      Ta    0
.It \&Ns     Ta    Yes      Ta    Yes      Ta    0
.It \&Nx     Ta    Yes      Ta    Yes      Ta    n
.It \&Os     Ta    \&No     Ta    \&No     Ta    n
.It \&Ot     Ta    \&No     Ta    \&No     Ta    n
.It \&Ox     Ta    Yes      Ta    Yes      Ta    n
.It \&Pa     Ta    Yes      Ta    Yes      Ta    n
.It \&Pf     Ta    \&No     Ta    Yes      Ta    1
.It \&Pp     Ta    \&No     Ta    \&No     Ta    0
.It \&Rv     Ta    \&No     Ta    \&No     Ta    n
.It \&Sm     Ta    \&No     Ta    \&No     Ta    1
.It \&St     Ta    \&No     Ta    Yes      Ta    1
.It \&Sx     Ta    Yes      Ta    Yes      Ta    >0
.It \&Sy     Ta    Yes      Ta    Yes      Ta    >0
.It \&Tn     Ta    Yes      Ta    Yes      Ta    >0
.It \&Ud     Ta    \&No     Ta    \&No     Ta    0
.It \&Ux     Ta    Yes      Ta    Yes      Ta    n
.It \&Va     Ta    Yes      Ta    Yes      Ta    n
.It \&Vt     Ta    Yes      Ta    Yes      Ta    >0
.It \&Xr     Ta    Yes      Ta    Yes      Ta    >0, <3
.It \&br     Ta    \&No     Ta    \&No     Ta    0
.It \&sp     Ta    \&No     Ta    \&No     Ta    1
d680 945
d1639 6
a1644 8
The
.Sq \-split
or
.Sq \-nosplit
argument to 
.Sq \&An
applies to the whole document, not just to the current section as it
does in groff.
d1650 6
d1657 9
a1665 2
.Sq \&sp
macro does not accept negative numbers.
d1681 1
a1681 1
.Sq \&It \-nested
d1684 1
a1684 1
.Sq \-enum
a1686 8
.Sq \&It \-column
syntax where column widths may be preceded by other arguments (instead
of proceeded) is not supported.
.It
The
.Sq \&At
macro only accepts a single parameter.
.It
d1688 1
a1688 1
.Sq \&Li
d1693 1
a1693 1
.Sq \&Fo
d1708 68
a1775 66
.
.
.Sh CAVEATS
There are many ambiguous parts of mdoc.
.
.Pp
.Bl -dash -compact
.It
.Sq \&Fa
should be
.Sq \&Va
as function arguments are variables.
.It
.Sq \&Ft
should be
.Sq \&Vt
as function return types are still types.  Furthermore, the
.Sq \&Ft
should be removed and
.Sq \&Fo ,
which ostensibly follows it, should follow the same convention as
.Sq \&Va .
.It
.Sq \&Va
should formalise that only one or two arguments are acceptable: a
variable name and optional, preceding type.
.It
.Sq \&Fd
is ambiguous.  It's commonly used to indicate an include file in the
synopsis section.
.Sq \&In
should be used, instead.
.It
Only the
.Sq \-literal
argument to
.Sq \&Bd
makes sense.  The remaining ones should be removed.
.It
The
.Sq \&Xo
and
.Sq \&Xc
macros should be deprecated.
.It
The
.Sq \&Dt
macro lacks clarity.  It should be absolutely clear which title will
render when formatting the manual page.
.It
A
.Sq \&Lx
should be provided for Linux (\(`a la
.Sq \&Ox ,
.Sq \&Nx
etc.).
.It
There's no way to refer to references in
.Sq \&Rs/Re
blocks.
.It
The \-split and \-nosplit dictates via
.Sq \&An
are re-set when entering and leaving the AUTHORS section.
.El
.
@


1.15
log
@another large chunk of -man updates,
among others regarding .DT, .HP, .RS, .RE, .SH, .SS, and scoping,
now in sync vith release 1.9.1
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.14 2009/08/22 19:45:39 schwarze Exp $
d300 1
a300 1
.Sq \&.Fl Sh
d302 1
a302 1
.Sq Fl Sh .
@


1.14
log
@sync to 1.9.0: improve documentation of parsed and callable macros;
the diff is large because kristaps@@ reindented macro calls
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.13 2009/08/22 16:41:45 schwarze Exp $
d23 2
a24 2
. Nm mdoc
. Nd mdoc language reference
d29 1
a29 1
. Nm mdoc
d31 2
a32 2
. Bx
. Ux
d35 1
a35 1
. Xr mandoc 1 .
d37 1
a37 1
. Sx COMPATIBILITY
d39 3
a41 2
. Xr groff 1 .
. Pp
d43 1
a43 1
. Nm
d46 1
a46 1
. Sq \.
d49 1
a49 1
. Bd -literal -offset indent
d52 1
a52 1
. Ed
d56 1
a56 1
. Nm
d60 1
a60 1
. Ux
d64 1
a64 1
. Ss Comments
d66 1
a66 1
.  Sq \e" ,
d69 3
a71 2
.  Sq \&.\e" ,
is also ignored.
d74 1
a74 1
. Ss Reserved Characters
d76 26
a101 25
.  Bl -tag -width Ds -offset indent -compact
.   It \&.
.    Pq period
.   It \&,
.    Pq comma
.   It \&:
.    Pq colon
.   It \&;
.    Pq semicolon
.   It \&(
.    Pq left-parenthesis
.   It \&)
.    Pq right-parenthesis
.   It \&[
.    Pq left-bracket
.   It \&]
.    Pq right-bracket
.   It \&?
.    Pq question
.   It \&!
.    Pq exclamation
.   It \&|
.    Pq vertical bar
.  El
.  Pp
d103 1
a103 1
.  Sx MACRO SYNTAX .
d106 1
a106 1
.  Pq Sq \e&
d110 1
a110 1
. Ss Special Characters
d113 1
a113 1
.  Sq \e
d115 1
a115 1
.  Sq \&(
d117 1
a117 1
.  Sq \&[
d119 1
a119 1
.  Sq \&] ) ;
d121 1
a121 1
.  Xr mandoc_char 7
d123 2
a124 2
.  Sq \e(em
.  Pq em-dash
d126 2
a127 2
.  Sq \ee
.  Pq back-slash .
d130 1
a130 1
. Ss Text Decoration
d132 1
a132 1
.  Sq \ef
d135 1
a135 1
.  Nm ,
d139 1
a139 1
. Ss Predefined Strings
d141 1
a141 1
.  Xr groff 1
d143 1
a143 1
.  Dq predefined strings ,
d145 1
a145 1
.  Sx Special Characters ,
d148 1
a148 1
.  Sq \e* :
d150 1
a150 1
.  Sq \e*X ,
d152 1
a152 1
.  Sq \e*(XX ,
d154 1
a154 1
.  Sq \e*[N] .
d156 1
a156 1
.  Xr mandoc_char 7
d158 2
a159 2
.  Sq \e*(Am
.  Pq ampersand
d161 2
a162 2
.  Sq \e*(Ba
.  Pq vertical bar .
d165 1
a165 1
. Ss Whitespace
d168 1
a168 1
.  Bd -literal -offset indent
d173 3
a175 2
.  Ed
.  Pp
d178 2
a179 1
.  Pp
d183 1
a183 1
.  Sq \&Bl \-column
d187 1
a187 1
. Ss Quotation
d193 2
a194 1
.  Pp
d196 3
a198 3
.  Sq a" ,
.  Sq b c ,
.  Sq de ,
d200 1
a200 1
.  Sq fg" .
d203 2
a204 2
.  Sq \&Em a :
.  Bd -literal -offset indent
d206 3
a208 2
.  Ed
.  Pp
d214 1
a214 1
. Nm
d216 2
a217 2
. Sq \&Dd ,
. Sq \&Dt ,
d219 1
a219 1
. Sq \&Os ,
d221 1
a221 1
. Sq \&Nm
d223 2
a224 2
. Sq \&Nd :
. Bd -literal -offset indent
d228 1
d230 38
a267 4
\&.Nm mdoc
\&.Nd mdoc language reference
. Ed
. Pp
d275 1
a275 1
. Sq \&. ,
d278 1
a278 1
. Sq \&.Pp
d280 1
a280 1
. Sq \&.\ \ \ \&Pp
d282 2
a283 1
. Pp
d285 1
a285 1
. Sq \-arg
d287 1
a287 1
. Sq parm
d289 1
a289 1
. Sq \&Yo
d291 1
a291 1
. Sq \&Yc
d293 2
a294 1
. Pp
d296 1
a296 1
. Em Callable
d300 1
a300 1
. Sq \&.Fl Sh
d302 3
a304 2
. Sq Fl Sh .
. Pp
d306 1
a306 1
. Em Parsable
d310 2
a311 1
. Pp
d313 1
a313 1
. Em Scope
d317 1
a317 1
. Ss Block full-explicit
d320 1
a320 1
.  Pq Sq \&Bf
d322 1
a322 1
.  Bd -literal -offset indent
d326 14
a339 13
.  Ed
.  Pp
.  Bl -column -compact -offset indent "MacroX" "CallableX" "ParsableX" "closed by XXX"
.   It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.   It \&Bd     Ta    \&No     Ta    \&No     Ta    closed by \&Ed
.   It \&Bf     Ta    \&No     Ta    \&No     Ta    closed by \&Ef
.   It \&Bk     Ta    \&No     Ta    \&No     Ta    closed by \&Ek
.   It \&Bl     Ta    \&No     Ta    \&No     Ta    closed by \&El
.   It \&Ed     Ta    \&No     Ta    \&No     Ta    opened by \&Bd
.   It \&Ef     Ta    \&No     Ta    \&No     Ta    opened by \&Bf
.   It \&Ek     Ta    \&No     Ta    \&No     Ta    opened by \&Bk
.   It \&El     Ta    \&No     Ta    \&No     Ta    opened by \&Bl
.  El
d342 1
a342 1
. Ss Block full-implicit
d345 7
a351 7
.  Po
.   Sq \&It \-bullet ,
.   Sq \-hyphen ,
.   Sq \-dash ,
.   Sq \-enum ,
.   Sq \-item
.  Pc
d353 1
a353 1
.  Sq \&It \-column
d355 1
a355 1
.  Bd -literal -offset indent
d358 1
a358 9
.  Ed
.  Pp
.  Bl -column -compact -offset indent "MacroX" "CallableX" "ParsableX" "closed by XXXXXXXXXXX"
.   It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.   It \&It     Ta    \&No     Ta    Yes      Ta    closed by \&It, \&El
.   It \&Nd     Ta    \&No     Ta    \&No     Ta    closed by \&Sh
.   It \&Sh     Ta    \&No     Ta    \&No     Ta    closed by \&Sh
.   It \&Ss     Ta    \&No     Ta    \&No     Ta    closed by \&Sh, \&Ss
.  El
d360 8
d369 2
a370 1
. Ss Block partial-explicit
d373 1
a373 1
.  Pq So \&Fo Sc , So \&Eo Sc
d375 2
a376 2
.  Pq So \&Ec Sc .
.  Bd -literal -offset indent
d383 30
a412 29
.  Ed
.  Pp
.  Bl -column "MacroX" "CallableX" "ParsableX" "closed by XXXX" -compact -offset indent
.   It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.   It \&Ac     Ta    Yes      Ta    Yes      Ta    opened by \&Ao
.   It \&Ao     Ta    Yes      Ta    Yes      Ta    closed by \&Ac
.   It \&Bc     Ta    Yes      Ta    Yes      Ta    closed by \&Bo
.   It \&Bo     Ta    Yes      Ta    Yes      Ta    opened by \&Bc
.   It \&Brc    Ta    Yes      Ta    Yes      Ta    opened by \&Bro
.   It \&Bro    Ta    Yes      Ta    Yes      Ta    closed by \&Brc
.   It \&Dc     Ta    Yes      Ta    Yes      Ta    opened by \&Do
.   It \&Do     Ta    Yes      Ta    Yes      Ta    closed by \&Dc
.   It \&Ec     Ta    Yes      Ta    Yes      Ta    opened by \&Eo
.   It \&Eo     Ta    Yes      Ta    Yes      Ta    closed by \&Ec
.   It \&Fc     Ta    Yes      Ta    Yes      Ta    opened by \&Fo
.   It \&Fo     Ta    \&No     Ta    \&No     Ta    closed by \&Fc
.   It \&Oc     Ta    Yes      Ta    Yes      Ta    closed by \&Oo
.   It \&Oo     Ta    Yes      Ta    Yes      Ta    opened by \&Oc
.   It \&Pc     Ta    Yes      Ta    Yes      Ta    closed by \&Po
.   It \&Po     Ta    Yes      Ta    Yes      Ta    opened by \&Pc
.   It \&Qc     Ta    Yes      Ta    Yes      Ta    opened by \&Oo
.   It \&Qo     Ta    Yes      Ta    Yes      Ta    closed by \&Oc
.   It \&Re     Ta    \&No     Ta    \&No     Ta    opened by \&Rs
.   It \&Rs     Ta    \&No     Ta    \&No     Ta    closed by \&Re
.   It \&Sc     Ta    Yes      Ta    Yes      Ta    opened by \&So
.   It \&So     Ta    Yes      Ta    Yes      Ta    closed by \&Sc
.   It \&Xc     Ta    Yes      Ta    Yes      Ta    opened by \&Xo
.   It \&Xo     Ta    Yes      Ta    Yes      Ta    closed by \&Xc
.  El
d415 1
a415 1
. Ss Block partial-implicit
d417 1
a417 1
.  Sx Reserved Characters
d419 1
a419 1
.  Bd -literal -offset indent
d421 1
a421 16
.  Ed
.  Pp
.  Bl -column "MacroX" "CallableX" "ParsableX" -compact -offset indent
.   It Em Macro Ta Em Callable Ta Em Parsable
.   It \&Aq     Ta    Yes      Ta    Yes
.   It \&Bq     Ta    Yes      Ta    Yes
.   It \&Brq    Ta    Yes      Ta    Yes
.   It \&D1     Ta    \&No     Ta    \&Yes
.   It \&Dl     Ta    \&No     Ta    Yes
.   It \&Dq     Ta    Yes      Ta    Yes
.   It \&Op     Ta    Yes      Ta    Yes
.   It \&Pq     Ta    Yes      Ta    Yes
.   It \&Ql     Ta    Yes      Ta    Yes
.   It \&Qq     Ta    Yes      Ta    Yes
.   It \&Sq     Ta    Yes      Ta    Yes
.  El
d423 15
d439 2
a440 1
. Ss In-line
d442 1
a442 1
.  Sx Reserved Characters ,
d446 1
a446 1
.  Pq n ,
d448 1
a448 1
.  Bd -literal -offset indent
d454 78
a531 77
.  Ed
.  Pp
.  Bl -column "MacroX" "CallableX" "ParsableX" "Arguments" -compact -offset indent
.   It Em Macro Ta Em Callable Ta Em Parsable Ta Em Arguments
.   It \&%A     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%B     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%C     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%D     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%I     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%J     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%N     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%O     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%P     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%R     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%T     Ta    \&No     Ta    \&No     Ta    >0
.   It \&%V     Ta    \&No     Ta    \&No     Ta    >0
.   It \&Ad     Ta    Yes      Ta    Yes      Ta    n
.   It \&An     Ta    Yes      Ta    Yes      Ta    n
.   It \&Ap     Ta    Yes      Ta    Yes      Ta    0
.   It \&Ar     Ta    Yes      Ta    Yes      Ta    n
.   It \&At     Ta    Yes      Ta    Yes      Ta    1
.   It \&Bsx    Ta    Yes      Ta    Yes      Ta    n
.   It \&Bt     Ta    \&No     Ta    \&No     Ta    0
.   It \&Bx     Ta    Yes      Ta    Yes      Ta    n
.   It \&Cd     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Cm     Ta    Yes      Ta    Yes      Ta    n
.   It \&Db     Ta    \&No     Ta    \&No     Ta    1
.   It \&Dd     Ta    \&No     Ta    \&No     Ta    >0
.   It \&Dt     Ta    \&No     Ta    \&No     Ta    n
.   It \&Dv     Ta    Yes      Ta    Yes      Ta    n
.   It \&Dx     Ta    Yes      Ta    Yes      Ta    n
.   It \&Em     Ta    Yes      Ta    Yes      Ta    >0
.   It \&En     Ta    \&No     Ta    \&No     Ta    0
.   It \&Er     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Es     Ta    \&No     Ta    \&No     Ta    0
.   It \&Ev     Ta    Yes      Ta    Yes      Ta    n
.   It \&Ex     Ta    \&No     Ta    \&No     Ta    0
.   It \&Fa     Ta    Yes      Ta    Yes      Ta    n
.   It \&Fd     Ta    \&No     Ta    \&No     Ta    >0
.   It \&Fl     Ta    Yes      Ta    Yes      Ta    n
.   It \&Fn     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Fr     Ta    \&No     Ta    \&No     Ta    n
.   It \&Ft     Ta    Yes      Ta    Yes      Ta    n
.   It \&Fx     Ta    Yes      Ta    Yes      Ta    n
.   It \&Hf     Ta    \&No     Ta    \&No     Ta    n
.   It \&Ic     Ta    Yes      Ta    Yes      Ta    >0
.   It \&In     Ta    \&No     Ta    \&No     Ta    n
.   It \&Lb     Ta    \&No     Ta    \&No     Ta    1
.   It \&Li     Ta    Yes      Ta    Yes      Ta    n
.   It \&Lk     Ta    Yes      Ta    Yes      Ta    n
.   It \&Lp     Ta    \&No     Ta    \&No     Ta    0
.   It \&Ms     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Mt     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Nm     Ta    Yes      Ta    Yes      Ta    n
.   It \&No     Ta    Yes      Ta    Yes      Ta    0
.   It \&Ns     Ta    Yes      Ta    Yes      Ta    0
.   It \&Nx     Ta    Yes      Ta    Yes      Ta    n
.   It \&Os     Ta    \&No     Ta    \&No     Ta    n
.   It \&Ot     Ta    \&No     Ta    \&No     Ta    n
.   It \&Ox     Ta    Yes      Ta    Yes      Ta    n
.   It \&Pa     Ta    Yes      Ta    Yes      Ta    n
.   It \&Pf     Ta    \&No     Ta    Yes      Ta    1
.   It \&Pp     Ta    \&No     Ta    \&No     Ta    0
.   It \&Rv     Ta    \&No     Ta    \&No     Ta    0
.   It \&Sm     Ta    \&No     Ta    \&No     Ta    1
.   It \&St     Ta    \&No     Ta    Yes      Ta    1
.   It \&Sx     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Sy     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Tn     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Ud     Ta    \&No     Ta    \&No     Ta    0
.   It \&Ux     Ta    Yes      Ta    Yes      Ta    n
.   It \&Va     Ta    Yes      Ta    Yes      Ta    n
.   It \&Vt     Ta    Yes      Ta    Yes      Ta    >0
.   It \&Xr     Ta    Yes      Ta    Yes      Ta    >0, <3
.   It \&br     Ta    \&No     Ta    \&No     Ta    0
.   It \&sp     Ta    \&No     Ta    \&No     Ta    1
.  El   
d537 1
a537 1
. Xr groff 1 .
d539 1
a539 1
. Qq historic groff
d541 1
a541 1
. Pa doc.tmac
d543 5
a547 4
. Pq somewhere between 1.15 and 1.19 .
. Pp
. Bl -dash -compact
.  It
d549 1
a549 1
.   Sq \-split
d551 1
a551 1
.   Sq \-nosplit
d553 1
a553 1
.   Sq \&An
d556 1
a556 1
.  It
d560 1
a560 1
.  It
d562 1
a562 1
.   Sq \&sp
d564 1
a564 1
.  It
d568 1
a568 1
.  It
d572 1
a572 1
.  It
d574 1
a574 1
.   Sq \(ba
d576 1
a576 1
.   Qq go orbital
d578 2
a579 2
.  It
.   Sq \&It \-nested
d582 1
a582 1
.   Sq \-enum
d584 2
a585 2
.  It
.   Sq \&It \-column
d588 1
a588 1
.  It
d590 1
a590 1
.   Sq \&At
d592 1
a592 1
.  It
d594 1
a594 1
.   Sq \&Li
d597 1
a597 1
.  It
d599 1
a599 1
.   Sq \&Fo
d601 1
a601 1
. El
d605 2
a606 2
. Xr mandoc 1 ,
. Xr mandoc_char 7
d611 1
a611 1
. Nm
d613 1
a613 1
. An Kristaps Dzonsons Aq kristaps@@kth.se .
d618 5
a622 4
. Pp
. Bl -dash -compact
.  It
.   Sq \&Fa
d624 1
a624 1
.   Sq \&Va
d626 2
a627 2
.  It
.   Sq \&Ft
d629 1
a629 1
.   Sq \&Vt
d631 1
a631 1
.   Sq \&Ft
d633 1
a633 1
.   Sq \&Fo ,
d635 3
a637 3
.   Sq \&Va .
.  It
.   Sq \&Va
d640 2
a641 2
.  It
.   Sq \&Fd
d644 1
a644 1
.   Sq \&In
d646 1
a646 1
.  It
d648 1
a648 1
.   Sq \-literal
d650 1
a650 1
.   Sq \&Bd
d652 1
a652 1
.  It
d654 1
a654 1
.   Sq \&Xo
d656 1
a656 1
.   Sq \&Xc
d658 1
a658 1
.  It
d660 1
a660 1
.   Sq \&Dt
d663 1
a663 1
.  It
d665 1
a665 1
.   Sq \&Lx
d667 2
a668 2
.   Sq \&Ox ,
.   Sq \&Nx
d670 1
a670 1
.  It
d672 1
a672 1
.   Sq \&Rs/Re
d674 1
a674 1
.  It
d676 1
a676 1
.   Sq \&An
d678 1
a678 1
. El
@


1.13
log
@sync to 1.8.5: clean up sections describing escape sequences
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.12 2009/08/22 15:44:02 schwarze Exp $
d20 2
a21 1
.\" SECTION---------------------------------------------
d23 4
a26 3
.Nm mdoc
.Nd mdoc language reference
.\" SECTION---------------------------------------------
d29 1
a29 1
.Nm mdoc
d31 2
a32 2
.Bx
.Ux
d35 1
a35 1
.Xr mandoc 1 .
d37 1
a37 1
.Sx COMPATIBILITY
d39 2
a40 3
.Xr groff 1 .
.\" PARAGRAPH------------
.Pp
d42 1
a42 1
.Nm
d45 1
a45 1
.Sq \.
d48 1
a48 1
.Bd -literal -offset indent
d51 3
a53 2
.Ed
.\" SECTION---------------------------------------------
d55 1
a55 1
.Nm
d59 1
a59 1
.Ux
d61 3
a63 2
.\" SUB-SECTION----------------------
.Ss Comments
d65 1
a65 1
.Sq \e" ,
d68 1
a68 1
.Sq \&.\e" ,
d70 3
a72 2
.\" SUB-SECTION----------------------
.Ss Reserved Characters
d74 25
a98 26
.Bl -tag -width Ds -offset indent -compact
.It \&.
.Pq period
.It \&,
.Pq comma
.It \&:
.Pq colon
.It \&;
.Pq semicolon
.It \&(
.Pq left-parenthesis
.It \&)
.Pq right-parenthesis
.It \&[
.Pq left-bracket
.It \&]
.Pq right-bracket
.It \&?
.Pq question
.It \&!
.Pq exclamation
.It \&|
.Pq vertical bar
.El
.\" PARAGRAPH------------
.Pp
d100 1
a100 1
.Sx MACRO SYNTAX .
d103 1
a103 1
.Pq Sq \e&
d105 3
a107 2
.\" SUB-SECTION----------------------
.Ss Special Characters
d110 1
a110 1
.Sq \e
d112 1
a112 1
.Sq \&(
d114 1
a114 1
.Sq \&[
d116 1
a116 1
.Sq \&] ) ;
d118 1
a118 1
.Xr mandoc_char 7
d120 2
a121 2
.Sq \e(em
.Pq em-dash
d123 5
a127 4
.Sq \ee
.Pq back-slash .
.\" SUB-SECTION----------------------
.Ss Text Decoration
d129 1
a129 1
.Sq \ef
d132 1
a132 1
.Nm ,
d134 3
a136 2
.\" SUB-SECTION----------------------
.Ss Predefined Strings
d138 1
a138 1
.Xr groff 1
d140 1
a140 1
.Dq predefined strings ,
d142 1
a142 1
.Sx Special Characters ,
d145 1
a145 1
.Sq \e* :
d147 1
a147 1
.Sq \e*X ,
d149 1
a149 1
.Sq \e*(XX ,
d151 1
a151 1
.Sq \e*[N] .
d153 1
a153 1
.Xr mandoc_char 7
d155 2
a156 2
.Sq \e*(Am
.Pq ampersand
d158 5
a162 4
.Sq \e*(Ba
.Pq vertical bar .
.\" SUB-SECTION----------------------
.Ss Whitespace
d165 1
a165 1
.Bd -literal -offset indent
d170 2
a171 3
.Ed
.\" PARAGRAPH------------
.Pp
d174 1
a174 2
.\" PARAGRAPH------------
.Pp
d178 1
a178 1
.Sq \&Bl \-column
d180 3
a182 2
.\" SUB-SECTION----------------------
.Ss Quotation
d188 1
a188 2
.\" PARAGRAPH------------
.Pp
d190 3
a192 3
.Sq a" ,
.Sq b c ,
.Sq de ,
d194 1
a194 1
.Sq fg" .
d197 2
a198 2
.Sq \&Em a :
.Bd -literal -offset indent
d200 2
a201 3
.Ed
.\" PARAGRAPH------------
.Pp
d203 2
a204 1
.\" SECTION---------------------------------------------
d207 1
a207 1
.Nm
d209 2
a210 2
.Sq \&Dd ,
.Sq \&Dt ,
d212 1
a212 1
.Sq \&Os ,
d214 1
a214 1
.Sq \&Nm
d216 2
a217 2
.Sq \&Nd :
.Bd -literal -offset indent
d224 2
a225 3
.Ed
.\" PARAGRAPH------------
.Pp
d228 2
a229 1
.\" SECTION---------------------------------------------
d231 10
a240 5
Every line beginning with the control character
.Sq \.
is processed for macros, two- or three-character sequences.
.\" PARAGRAPH------------
.Pp
d242 1
a242 1
.Sq \-arg
d244 1
a244 1
.Sq parm
d246 1
a246 1
.Sq \&Yo
d248 1
a248 1
.Sq \&Yc
d250 1
a250 2
.\" PARAGRAPH------------
.Pp
d252 1
a252 1
.Em Callable
d254 8
a261 2
line-macro.  The
.Em Parsable
d263 5
a267 2
(ostensibly callable) macros.  The
.Em Scope
d269 3
a271 2
.\" SUB-SECTION----------------------
.Ss Block full-explicit
d274 1
a274 1
.Pq Sq \&Bf
d276 1
a276 1
.Bd -literal -offset indent
d280 16
a295 16
.Ed
.\" PARAGRAPH------------
.Pp
.Bl -column -compact -offset indent "MacroX" "CallableX" "ParsableX" "closed by XXX"
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.It \&Bd     Ta    \&No     Ta    \&No     Ta    closed by \&Ed
.It \&Bf     Ta    \&No     Ta    \&No     Ta    closed by \&Ef
.It \&Bk     Ta    \&No     Ta    \&No     Ta    closed by \&Ek
.It \&Bl     Ta    \&No     Ta    \&No     Ta    closed by \&El
.It \&Ed     Ta    \&No     Ta    \&No     Ta    opened by \&Bd
.It \&Ef     Ta    \&No     Ta    \&No     Ta    opened by \&Bf
.It \&Ek     Ta    \&No     Ta    \&No     Ta    opened by \&Bk
.It \&El     Ta    \&No     Ta    \&No     Ta    opened by \&Bl
.El
.\" SUB-SECTION----------------------
.Ss Block full-implicit
d298 7
a304 7
.Po
.Sq \&It \-bullet ,
.Sq \-hyphen ,
.Sq \-dash ,
.Sq \-enum ,
.Sq \-item
.Pc
d306 1
a306 1
.Sq \&It \-column
d308 1
a308 1
.Bd -literal -offset indent
d311 12
a322 12
.Ed
.\" PARAGRAPH------------
.Pp
.Bl -column -compact -offset indent "MacroX" "CallableX" "ParsableX" "closed by XXXXXXXXXXX"
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.It \&It     Ta    \&No     Ta    Yes      Ta    closed by \&It, \&El
.It \&Nd     Ta    \&No     Ta    \&No     Ta    closed by \&Sh
.It \&Sh     Ta    \&No     Ta    \&No     Ta    closed by \&Sh
.It \&Ss     Ta    \&No     Ta    \&No     Ta    closed by \&Sh, \&Ss
.El
.\" SUB-SECTION----------------------
.Ss Block partial-explicit
d325 1
a325 1
.Pq So \&Fo Sc , So \&Eo Sc
d327 2
a328 2
.Pq So \&Ec Sc .
.Bd -literal -offset indent
d335 32
a366 32
.Ed
.\" PARAGRAPH------------
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" "closed by XXXX" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.It \&Ac     Ta    Yes      Ta    Yes      Ta    opened by \&Ao
.It \&Ao     Ta    Yes      Ta    Yes      Ta    closed by \&Ac
.It \&Bc     Ta    Yes      Ta    Yes      Ta    closed by \&Bo
.It \&Bo     Ta    Yes      Ta    Yes      Ta    opened by \&Bc
.It \&Brc    Ta    Yes      Ta    Yes      Ta    opened by \&Bro
.It \&Bro    Ta    Yes      Ta    Yes      Ta    closed by \&Brc
.It \&Dc     Ta    Yes      Ta    Yes      Ta    opened by \&Do
.It \&Do     Ta    Yes      Ta    Yes      Ta    closed by \&Dc
.It \&Ec     Ta    Yes      Ta    Yes      Ta    opened by \&Eo
.It \&Eo     Ta    Yes      Ta    Yes      Ta    closed by \&Ec
.It \&Fc     Ta    Yes      Ta    Yes      Ta    opened by \&Fo
.It \&Fo     Ta    \&No     Ta    \&No     Ta    closed by \&Fc
.It \&Oc     Ta    Yes      Ta    Yes      Ta    closed by \&Oo
.It \&Oo     Ta    Yes      Ta    Yes      Ta    opened by \&Oc
.It \&Pc     Ta    Yes      Ta    Yes      Ta    closed by \&Po
.It \&Po     Ta    Yes      Ta    Yes      Ta    opened by \&Pc
.It \&Qc     Ta    Yes      Ta    Yes      Ta    opened by \&Oo
.It \&Qo     Ta    Yes      Ta    Yes      Ta    closed by \&Oc
.It \&Re     Ta    \&No     Ta    \&No     Ta    opened by \&Rs
.It \&Rs     Ta    \&No     Ta    \&No     Ta    closed by \&Re
.It \&Sc     Ta    Yes      Ta    Yes      Ta    opened by \&So
.It \&So     Ta    Yes      Ta    Yes      Ta    closed by \&Sc
.It \&Xc     Ta    Yes      Ta    Yes      Ta    opened by \&Xo
.It \&Xo     Ta    Yes      Ta    Yes      Ta    closed by \&Xc
.El
.\" SUB-SECTION----------------------
.Ss Block partial-implicit
d368 1
a368 1
.Sx Reserved Characters
d370 1
a370 1
.Bd -literal -offset indent
d372 19
a390 19
.Ed
.\" PARAGRAPH------------
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsable
.It \&Aq     Ta    Yes      Ta    Yes
.It \&Bq     Ta    Yes      Ta    Yes
.It \&Brq    Ta    Yes      Ta    Yes
.It \&D1     Ta    \&No     Ta    \&Yes
.It \&Dl     Ta    \&No     Ta    Yes
.It \&Dq     Ta    Yes      Ta    Yes
.It \&Op     Ta    Yes      Ta    Yes
.It \&Pq     Ta    Yes      Ta    Yes
.It \&Ql     Ta    Yes      Ta    Yes
.It \&Qq     Ta    Yes      Ta    Yes
.It \&Sq     Ta    Yes      Ta    Yes
.El
.\" SUB-SECTION----------------------
.Ss In-line
d392 1
a392 1
.Sx Reserved Characters ,
d396 1
a396 1
.Pq n ,
d398 1
a398 1
.Bd -literal -offset indent
d404 79
a482 79
.Ed
.\" PARAGRAPH------------
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" "Arguments" -compact -offset indent
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Arguments
.It \&%A     Ta    \&No     Ta    \&No     Ta    >0
.It \&%B     Ta    \&No     Ta    \&No     Ta    >0
.It \&%C     Ta    \&No     Ta    \&No     Ta    >0
.It \&%D     Ta    \&No     Ta    \&No     Ta    >0
.It \&%I     Ta    \&No     Ta    \&No     Ta    >0
.It \&%J     Ta    \&No     Ta    \&No     Ta    >0
.It \&%N     Ta    \&No     Ta    \&No     Ta    >0
.It \&%O     Ta    \&No     Ta    \&No     Ta    >0
.It \&%P     Ta    \&No     Ta    \&No     Ta    >0
.It \&%R     Ta    \&No     Ta    \&No     Ta    >0
.It \&%T     Ta    \&No     Ta    \&No     Ta    >0
.It \&%V     Ta    \&No     Ta    \&No     Ta    >0
.It \&Ad     Ta    Yes      Ta    Yes      Ta    n
.It \&An     Ta    Yes      Ta    Yes      Ta    n
.It \&Ap     Ta    Yes      Ta    Yes      Ta    0
.It \&Ar     Ta    Yes      Ta    Yes      Ta    n
.It \&At     Ta    Yes      Ta    Yes      Ta    1
.It \&Bsx    Ta    Yes      Ta    Yes      Ta    n
.It \&Bt     Ta    \&No     Ta    \&No     Ta    0
.It \&Bx     Ta    Yes      Ta    Yes      Ta    n
.It \&Cd     Ta    Yes      Ta    Yes      Ta    >0
.It \&Cm     Ta    Yes      Ta    Yes      Ta    n
.It \&Db     Ta    \&No     Ta    \&No     Ta    1
.It \&Dd     Ta    \&No     Ta    \&No     Ta    >0
.It \&Dt     Ta    \&No     Ta    \&No     Ta    n
.It \&Dv     Ta    Yes      Ta    Yes      Ta    n
.It \&Dx     Ta    Yes      Ta    Yes      Ta    n
.It \&Em     Ta    Yes      Ta    Yes      Ta    >0
.It \&En     Ta    \&No     Ta    \&No     Ta    0
.It \&Er     Ta    Yes      Ta    Yes      Ta    >0
.It \&Es     Ta    \&No     Ta    \&No     Ta    0
.It \&Ev     Ta    Yes      Ta    Yes      Ta    n
.It \&Ex     Ta    \&No     Ta    \&No     Ta    0
.It \&Fa     Ta    Yes      Ta    Yes      Ta    n
.It \&Fd     Ta    \&No     Ta    \&No     Ta    >0
.It \&Fl     Ta    Yes      Ta    Yes      Ta    n
.It \&Fn     Ta    Yes      Ta    Yes      Ta    >0
.It \&Fr     Ta    \&No     Ta    \&No     Ta    n
.It \&Ft     Ta    Yes      Ta    Yes      Ta    n
.It \&Fx     Ta    Yes      Ta    Yes      Ta    n
.It \&Hf     Ta    \&No     Ta    \&No     Ta    n
.It \&Ic     Ta    Yes      Ta    Yes      Ta    >0
.It \&In     Ta    \&No     Ta    \&No     Ta    n
.It \&Lb     Ta    \&No     Ta    \&No     Ta    1
.It \&Li     Ta    Yes      Ta    Yes      Ta    n
.It \&Lk     Ta    Yes      Ta    Yes      Ta    n
.It \&Lp     Ta    \&No     Ta    \&No     Ta    0
.It \&Ms     Ta    Yes      Ta    Yes      Ta    >0
.It \&Mt     Ta    Yes      Ta    Yes      Ta    >0
.It \&Nm     Ta    Yes      Ta    Yes      Ta    n
.It \&No     Ta    Yes      Ta    Yes      Ta    0
.It \&Ns     Ta    Yes      Ta    Yes      Ta    0
.It \&Nx     Ta    Yes      Ta    Yes      Ta    n
.It \&Os     Ta    \&No     Ta    \&No     Ta    n
.It \&Ot     Ta    \&No     Ta    \&No     Ta    n
.It \&Ox     Ta    Yes      Ta    Yes      Ta    n
.It \&Pa     Ta    Yes      Ta    Yes      Ta    n
.It \&Pf     Ta    \&No     Ta    Yes      Ta    1
.It \&Pp     Ta    \&No     Ta    \&No     Ta    0
.It \&Rv     Ta    \&No     Ta    \&No     Ta    0
.It \&Sm     Ta    \&No     Ta    \&No     Ta    1
.It \&St     Ta    \&No     Ta    Yes      Ta    1
.It \&Sx     Ta    Yes      Ta    Yes      Ta    >0
.It \&Sy     Ta    Yes      Ta    Yes      Ta    >0
.It \&Tn     Ta    Yes      Ta    Yes      Ta    >0
.It \&Ud     Ta    \&No     Ta    \&No     Ta    0
.It \&Ux     Ta    Yes      Ta    Yes      Ta    n
.It \&Va     Ta    Yes      Ta    Yes      Ta    n
.It \&Vt     Ta    Yes      Ta    Yes      Ta    >0
.It \&Xr     Ta    Yes      Ta    Yes      Ta    >0, <3
.It \&br     Ta    \&No     Ta    \&No     Ta    0
.It \&sp     Ta    \&No     Ta    \&No     Ta    1
.El
.\" SECTION---------------------------------------------
d486 1
a486 1
.Xr groff 1 .
d488 1
a488 1
.Qq historic groff
d490 1
a490 1
.Pa doc.tmac
d492 4
a495 14
.Pq somewhere between 1.15 and 1.19 .
.\" PARAGRAPH------------
.Pp
.Bl -dash -compact
.\" LIST-ITEM
.It
The POSIX.1
.Sq \&St
macro produce
.Dq POSIX
instead of
.Dq POSIX.1 .
.\" LIST-ITEM
.It
d497 1
a497 1
.Sq \-split
d499 1
a499 1
.Sq \-nosplit
d501 1
a501 1
.Sq \&An
d504 1
a504 2
.\" LIST-ITEM
.It
d508 1
a508 2
.\" LIST-ITEM
.It
d510 1
a510 1
.Sq \&sp
d512 1
a512 2
.\" LIST-ITEM
.It
d516 1
a516 2
.\" LIST-ITEM
.It
d520 1
a520 2
.\" LIST-ITEM
.It
d522 1
a522 1
.Sq \(ba
d524 1
a524 1
.Qq go orbital
d526 2
a527 3
.\" LIST-ITEM
.It
.Sq \&It \-nested
d530 1
a530 1
.Sq \-enum
d532 2
a533 3
.\" LIST-ITEM
.It
.Sq \&It \-column
d536 1
a536 2
.\" LIST-ITEM
.It
d538 1
a538 1
.Sq \&At
d540 1
a540 2
.\" LIST-ITEM
.It
d542 1
a542 1
.Sq \&Li
d545 1
a545 2
.\" LIST-ITEM
.It
d547 1
a547 1
.Sq \&Fo
d549 3
a551 2
.El
.\" SECTION---------------------------------------------
d553 4
a556 3
.Xr mandoc 1 ,
.Xr mandoc_char 7
.\" SECTION---------------------------------------------
d559 1
a559 1
.Nm
d561 3
a563 2
.An Kristaps Dzonsons Aq kristaps@@kth.se .
.\" SECTION---------------------------------------------
d566 4
a569 6
.\" PARAGRAPH------------
.Pp
.Bl -dash -compact
.\" LIST-ITEM
.It
.Sq \&Fa
d571 1
a571 1
.Sq \&Va
d573 2
a574 3
.\" LIST-ITEM
.It
.Sq \&Ft
d576 1
a576 1
.Sq \&Vt
d578 1
a578 1
.Sq \&Ft
d580 1
a580 1
.Sq \&Fo ,
d582 3
a584 4
.Sq \&Va .
.\" LIST-ITEM
.It
.Sq \&Va
d587 2
a588 3
.\" LIST-ITEM
.It
.Sq \&Fd
d591 1
a591 1
.Sq \&In
d593 1
a593 2
.\" LIST-ITEM
.It
d595 1
a595 1
.Sq \-literal
d597 1
a597 1
.Sq \&Bd
d599 1
a599 2
.\" LIST-ITEM
.It
d601 1
a601 1
.Sq \&Xo
d603 1
a603 1
.Sq \&Xc
d605 1
a605 2
.\" LIST-ITEM
.It
d607 1
a607 1
.Sq \&Dt
d610 1
a610 2
.\" LIST-ITEM
.It
d612 1
a612 1
.Sq \&Lx
d614 2
a615 2
.Sq \&Ox ,
.Sq \&Nx
d617 1
a617 2
.\" LIST-ITEM
.It
d619 1
a619 1
.Sq \&Rs/Re
d621 1
a621 2
.\" LIST-ITEM
.It
d623 1
a623 1
.Sq \&An
d625 2
a626 1
.El
@


1.12
log
@sync to 1.8.4: The .St -p1003.1* macros produce "POSIX" instead of "POSIX.1";
agreed with jmc@@ to leave this for now (because it agrees with our in-tree
groff) and adapt it to new groff conventions after the main switch
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.11 2009/08/09 21:59:41 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: August 9 2009 $
d114 1
a114 1
.Xr mandoc_char 1
d121 3
a123 10
.\" PARAGRAPH------------
.Pp
An alternative escape sequence is
the slash-asterisk,
.Sq \e* ,
but this method is discouraged for compatibility reasons.
.\" PARAGRAPH------------
.Pp
Terms may
also be text-decorated using the
d126 28
a153 1
(Roman, or reset).  This form is not recommended.
a506 9
Some character sequences in groff are not handled depending on escape
style, e.g.,
.Sq \e(ba
and
.Sq \e*(Ba
may not be interchanged.  This is no longer the case: all character
sequences resolve to the same symbol, regardless the escape style.
.\" LIST-ITEM
.It
a546 6
If an special-character control character is escaped
.Sq \e\e ,
it will obviously not render the subsequent sequence.  Even newer
versions of groff seem to dither on this.
.\" LIST-ITEM
.It
d631 1
a631 1
The \-split and \-nosplit arguments to
d633 1
a633 1
are inane.
@


1.11
log
@sync to 1.8.4: full .An -[no]split support
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.10 2009/08/09 16:36:45 schwarze Exp $
d457 8
@


1.10
log
@sync to 1.8.1: make .Cd parsed
kristaps@@ says many SYNOPSIS sections use this; my impression is
that's not in OpenBSD, but it won't do much harm here, either
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.9 2009/07/26 23:18:08 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: July 26 2009 $
d457 10
@


1.9
log
@sync to 1.8.1: describe corrected handling of quoted literals,
remove trailing whitespace and much minor cleanup
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.8 2009/07/18 21:03:18 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate$
d390 1
a390 1
.It \&Cd     Ta    Yes      Ta    \&No     Ta    >0
@


1.8
log
@sync to 1.8.0: lots of minor changes
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.7 2009/07/07 00:10:44 schwarze Exp $
d16 2
a17 2
.\" 
.Dd $Mdocdate: July 7 2009 $
d28 2
a29 2
language is used to format 
.Bx 
d36 1
a36 1
section describes compatibility with 
d43 1
a43 1
character 
d52 1
a52 1
.Sh INPUT ENCODING
d58 1
a58 1
line termination.  
d90 1
a90 1
.Pq exclamation 
d92 1
a92 1
.Pq vertical bar 
d101 1
a101 1
or, if applicable, an appropriate escape sequence used.  
d107 1
a107 1
followed by either an open-parenthesis 
d115 4
a118 4
for a complete list.  Examples include 
.Sq \e(em 
.Pq em-dash 
and 
d136 12
a147 3
In general, consecutive blocks of whitespace are pruned from input.
These are later re-added, when applicable, by 
.Xr mandoc 1 .
d150 3
a152 5
Blank lines are permitted within
.Sq \&Bd \-literal
or
.Sq \&Bd \-unfilled
contexts.  Tab characters are only acceptable when delimiting 
d154 25
a178 5
and in
.Sq \&Bd \-literal
or
.Sq \&Bd \-unfilled
contexts.
d183 1
a183 1
document must begin with a document prologue, containing, in order, 
d187 5
a191 2
.Sq \&Os 
(using this manual as an example):
a199 6
.Pp
Following these, the document body must begin with the NAME section
containing at least one 
.Sq \&Nm
followed by 
.Sq \&Nd .
d203 1
a203 85
but non-compulsory. 
.\" SUB-SECTION----------------------
.\" .Ss Classification
.\" Macros are classified by their scope rules: block full-explicit (BFE),
.\" block partial-explicit (BPE), block full-implicit (BFI), block
.\" partial-implicit (BPI), and in-line.
.\" SUB-SECTION----------------------
.\" .Ss Scope
.\" .Bl -inset 
.\" .\" LIST-ITEM
.\" .It Em Block
.\" macros enclose other block macros, in-line macros or text, and
.\" may span multiple lines.
.\" .Bl -inset -offset indent
.\" .\" LIST-ITEM
.\" .It Em Full-block
.\" macros always span multiple lines.  They consist of zero or 
.\" more
.\" .Qq heads ,
.\" subsequent macros or text on the same line following invocation; an
.\" optional
.\" .Qq body ,
.\" which spans subsequent lines of text or macros; and an optional
.\" .Qq tail ,
.\" macros or text on the same line following closure.
.\" .\" LIST-ITEM
.\" .It Em Partial-block
.\" macros may span multiple lines.  They consists of a optional
.\" .Qq head ,
.\" text immediately following invocation; always a 
.\" .Qq body ,
.\" text or macros following the head on the same and subsequent lines; and
.\" optionally a
.\" .Qq tail ,
.\" text immediately following closure.
.\" .\" LIST-ITEM
.\" .It Em In-line
.\" macros may only enclose text and span at most a single line. 
.\" .El
.\" .El
.\" SUB-SECTION----------------------
.\" .Ss Closure
.\" Closure of a macro's scope depends first on its classification, then
.\" on whether it's parsable.  In this table,
.\" .Sq BFE
.\" refers to block full-explicit and so on.
.\" .\" PARAGRAPH------------
.\" .Pp
.\" .Bl -tag -width 12n -offset indent -compact
.\" .It BPE , BFE
.\" corresponding explicit closure macro
.\" .It BFI
.\" end-of-file or a corresponding implicit closure macro
.\" .It BPI
.\" end-of-line (body may be closed by >0 space-separated
.\" .Sx Reserved Characters ,
.\" although block scope will still be open)
.\" .It INL
.\" end-of-line
.\" .El
.\" PARAGRAPH------------
.\" .Pp
.\" If a macro (block or in-line) is parsable, it may also be closed out by
.\" one of the following scenarios (unless specifically noted otherwise):
.\" .\" PARAGRAPH------------
.\" .Pp
.\" .Bl -dash -offset indent -compact
.\" .It 
.\" a sequence of >0 space-separated
.\" .Sx Reserved Characters ,
.\" .It
.\" another macro,
.\" .It
.\" end-of-line, or
.\" .It
.\" completion of a set number of arguments.
.\" .El
.\" PARAGRAPH------------
.\" .Pp
.\" If >0 space-separated
.\" .Sx Reserved Characters
.\" are followed by non-reserved characters, the behaviour differs per
.\" macro.  In general, scope of the macro is closed and re-opened:
.\" subsequent tokens are interpreted as if the scope had just been opened.
.\" In other circumstances, scope is simply closed out.
d206 1
a206 1
Every line beginning with the control character 
d208 1
a208 1
is processed for macros, two- or three-character semantic annotations.
d211 2
a212 2
The syntax of macro depends on its classification.  In this section,
.Sq \-arg 
d225 2
a226 2
line-macro.  The 
.Qq Parsable
d238 2
a239 2
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB 
\(lBbody...\(rB 
d247 3
a250 3
.It \&Bl     Ta    \&No     Ta    \&No     Ta    closed by \&El
.It \&El     Ta    \&No     Ta    \&No     Ta    opened by \&Bl
.It \&Bf     Ta    \&No     Ta    \&No     Ta    closed by \&Ef
a251 1
.It \&Bk     Ta    \&No     Ta    \&No     Ta    closed by \&Ek
d253 1
d258 1
a258 1
All macros have bodies; some 
d260 2
a261 2
.Sq \&It \-bullet , 
.Sq \-hyphen , 
d264 1
a264 1
.Sq \-item 
d266 1
a266 1
don't have heads, while 
d270 2
a271 2
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead... \(lBTa head...\(rB\(rB 
\(lBbody...\(rB 
d277 1
a280 1
.It \&It     Ta    \&No     Ta    Yes      Ta    closed by \&It, \&El
d285 1
a285 1
has at least a body and, in limited circumstances, a head 
d287 1
a287 1
and/or tail 
d290 3
a292 3
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB 
\(lBbody...\(rB 
\&.Yc \(lBtail...\(rB 
d295 1
a295 1
\(lBbody...\(rB \&Yc \(lBtail...\(rB 
d301 1
a302 1
.It \&Ac     Ta    Yes      Ta    Yes      Ta    opened by \&Ao
d305 3
a307 2
.It \&Pc     Ta    Yes      Ta    Yes      Ta    closed by \&Po
.It \&Po     Ta    Yes      Ta    Yes      Ta    opened by \&Pc
d309 4
a312 5
.It \&Dc     Ta    Yes      Ta    Yes      Ta    opened by \&Do
.It \&Xo     Ta    Yes      Ta    Yes      Ta    closed by \&Xc
.It \&Xc     Ta    Yes      Ta    Yes      Ta    opened by \&Xo
.It \&Bro    Ta    Yes      Ta    Yes      Ta    closed by \&Brc
.It \&Brc    Ta    Yes      Ta    Yes      Ta    opened by \&Bro
d315 2
a316 6
.It \&So     Ta    Yes      Ta    Yes      Ta    closed by \&Sc
.It \&Sc     Ta    Yes      Ta    Yes      Ta    opened by \&So
.It \&Fc     Ta    Yes      Ta    Yes      Ta    opened by \&Fo
.It \&Fo     Ta    \&No     Ta    \&No     Ta    closed by \&Fc
.It \&Ec     Ta    Yes      Ta    Yes      Ta    opened by \&Eo
.It \&Eo     Ta    Yes      Ta    Yes      Ta    closed by \&Ec
d321 4
d328 2
a329 2
Like block full-implicit, but with single-line scope closed by 
.Sx Reserved Characters 
a338 1
.It \&Op     Ta    Yes      Ta    Yes
d340 3
d344 1
d346 1
a348 4
.It \&Brq    Ta    Yes      Ta    Yes
.It \&D1     Ta    \&No     Ta    \&Yes
.It \&Dl     Ta    \&No     Ta    Yes
.It \&Ql     Ta    Yes      Ta    Yes
d352 1
a352 1
Closed by 
d357 1
a357 1
.Pq n , 
a369 29
.It \&Dd     Ta    \&No     Ta    \&No     Ta    >0
.It \&Dt     Ta    \&No     Ta    \&No     Ta    n
.It \&Os     Ta    \&No     Ta    \&No     Ta    n
.It \&Pp     Ta    \&No     Ta    \&No     Ta    0
.It \&Ad     Ta    Yes      Ta    Yes      Ta    n
.It \&An     Ta    Yes      Ta    Yes      Ta    n
.It \&Ar     Ta    Yes      Ta    Yes      Ta    n
.It \&Cd     Ta    Yes      Ta    \&No     Ta    >0
.It \&Cm     Ta    Yes      Ta    Yes      Ta    n
.It \&Dv     Ta    Yes      Ta    Yes      Ta    n
.It \&Er     Ta    Yes      Ta    Yes      Ta    >0
.It \&Ev     Ta    Yes      Ta    Yes      Ta    n
.It \&Ex     Ta    \&No     Ta    \&No     Ta    0
.It \&Fa     Ta    Yes      Ta    Yes      Ta    n
.It \&Fd     Ta    \&No     Ta    \&No     Ta    >0
.It \&Fl     Ta    Yes      Ta    Yes      Ta    n
.It \&Fn     Ta    Yes      Ta    Yes      Ta    >0
.It \&Ft     Ta    Yes      Ta    Yes      Ta    n
.It \&Ic     Ta    Yes      Ta    Yes      Ta    >0
.It \&In     Ta    \&No     Ta    \&No     Ta    n
.It \&Li     Ta    Yes      Ta    Yes      Ta    n
.It \&Nm     Ta    Yes      Ta    Yes      Ta    n
.It \&Ot     Ta    \&No     Ta    \&No     Ta    n
.It \&Pa     Ta    Yes      Ta    Yes      Ta    n
.It \&Rv     Ta    \&No     Ta    \&No     Ta    0
.It \&St     Ta    \&No     Ta    Yes      Ta    1
.It \&Va     Ta    Yes      Ta    Yes      Ta    n
.It \&Vt     Ta    Yes      Ta    Yes      Ta    >0
.It \&Xr     Ta    Yes      Ta    Yes      Ta    >0, <3
d382 4
d388 1
d390 2
d393 4
d398 11
d410 7
d418 2
d423 2
d426 1
d428 2
d431 1
d435 1
d437 5
a441 12
.It \&Dx     Ta    Yes      Ta    Yes      Ta    n
.It \&Bt     Ta    \&No     Ta    \&No     Ta    0
.It \&Hf     Ta    \&No     Ta    \&No     Ta    n
.It \&Fr     Ta    \&No     Ta    \&No     Ta    n
.It \&Ud     Ta    \&No     Ta    \&No     Ta    0
.It \&Lb     Ta    \&No     Ta    \&No     Ta    1
.It \&Ap     Ta    Yes      Ta    Yes      Ta    0
.It \&Lp     Ta    \&No     Ta    \&No     Ta    0
.It \&Lk     Ta    Yes      Ta    Yes      Ta    n
.It \&Mt     Ta    Yes      Ta    Yes      Ta    >0
.It \&Es     Ta    \&No     Ta    \&No     Ta    0
.It \&En     Ta    \&No     Ta    \&No     Ta    0
d446 1
a446 1
this time limited to 
d448 1
a448 1
The term 
d450 1
a450 1
refers to those versions before the 
d452 1
a452 1
file re-write 
d459 10
d470 1
a470 1
style, e.g., 
d488 1
a488 1
The vertical bar 
d495 1
a495 1
.Sq \&.It \-nested
d502 1
a502 1
.Sq \&.It \-column
d507 2
a508 2
The 
.Sq \&.At
d513 1
a513 1
.Sq \&.Li
d524 2
a525 2
In groff, the 
.Sq \&.Fo
d536 1
a536 1
utility was written by 
d546 3
a548 3
.Sq \&.Fa
should be 
.Sq \&.Va
d552 1
a552 1
.Sq \&.Ft
d554 1
a554 1
.Sq \&.Vt
d556 1
a556 1
.Sq \&.Ft
d558 1
a558 1
.Sq \&.Fo ,
d560 1
a560 1
.Sq \&.Va .
d563 1
a563 1
.Sq \&.Va
d568 1
a568 1
.Sq \&.Fd
d570 2
a571 2
synopsis section.  
.Sq \&.In
d578 1
a578 1
.Sq \&.Bd
d582 2
a583 2
The 
.Sq \&.Xo
d585 1
a585 1
.Sq \&.Xc
d590 1
a590 1
.Sq \&.Dt
d596 4
a599 4
.Sq \&.Lx
should be provided for Linux (\(`a la 
.Sq \&.Ox ,
.Sq \&.Nx 
d604 1
a604 1
.Sq \&.Rs/.Re
d608 2
a609 2
The \-split and \-nosplit arguments to 
.Sq \&.An
@


1.7
log
@sync to 1.7.21:
document the \fX escapes (not recommended)
add some more details about escape sequences
document white space handling
simplify some explanations, don't talk about ontologies
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.6 2009/06/24 00:16:52 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 24 2009 $
d20 1
a20 1
.\" SECTION
d24 1
a24 1
.\" SECTION
d31 2
a32 4
manuals.  In this reference document, we describe the syntax and
structure of the 
.Nm
language.  Our reference implementation is
d38 1
a38 1
.\" PARAGRAPH
d47 1
a47 1
.Bd -literal -offset XXX
d51 1
a51 1
.\" SECTION
d55 3
a57 6
character
.Sq \  ,
and, in certain circumstances, the tab character
.Sq \et .
All manuals must have
.Sq \en
d59 1
a59 17
.Pp
The only time a blank line is acceptable is within
the context of 
.Sq \&.Bd \-literal
or
.Sq \&.Bd \-unfilled .
.Pp
Tab characters 
.Pq \et
are only acceptable when delimiting 
.Sq \&.Bl \-column 
and in
.Sq \&.Bd \-literal
or
.Sq \&.Bd \-unfilled
contexts.
.\" SUB-SECTION
d61 7
a67 9
Anything following a
.Sq \e" 
delimiter is considered a comment (unless the 
.Sq \e
itself has been escaped) and is ignored to the end of line.
Furthermore, a macro line with only a control character
.Sq \. ,
optionally followed by whitespace, is ignored.
.\" SUB-SECTION
d70 1
a70 1
.Bl -tag -width Ds -offset XXXX -compact
d94 1
a94 1
.\" PARAGRAPH
d97 3
a99 3
.Sx Closure .
For general non-reserved use, characters must either be escaped with a
non-breaking space
d101 2
a102 2
or, if applicable, an appropriate escape-sequence used.  
.\" SUB-SECTION
d104 2
a105 1
Special character sequences begin with the escape character
d113 9
a121 1
or a single one-character sequence.
d123 2
a124 1
Characters may alternatively be escaped by a slash-asterisk,
d126 2
a127 1
with the same combinations as described above.
d129 2
a130 1
Terms may also be text-decorated using the
d132 3
a134 3
escape followed by a text-decoration letter: B (bold), I, (italic), or P
and R (Roman, or reset).  This form is not recommended.
.\" SUB-SECTION
d136 2
a137 3
Unless in literal mode or specifically escaped, consecutive blocks of
whitespace are pruned from input.  These are later re-added, if
applicable, by a front-end utility such as
d139 15
a153 2
.\" SECTION
.Sh STRUCTURE
d156 3
a158 3
document must begin with the document prologue, containing, in order, 
.Sq \&.Dd ,
.Sq \&.Dt ,
d160 11
a170 1
.Sq \&.Os .
d173 97
a269 4
.Sq \&.Nm
followed by a
.Sq \&.Nd
macro.
d271 10
a280 62
At least one free-form or macro line must follow this prologue.
.\"
.Ss Classification
Macros are classified by their scope rules.  Some macros are allowed to
deviate from their classifications to preserve backward-compatibility
with old macro combinations still found in the manual corpus.  These are
specifically noted on a per-macro basis.
.\" SUB-SECTION
.Ss Scope
.Bl -inset 
.\" LIST-ITEM
.It Em Block
macros enclose other block macros, in-line macros or text, and
may span multiple lines.
.Bl -inset -offset XXXX
.\" LIST-ITEM
.It Em Full-block
macros always span multiple lines.  They consist of zero or 
more
.Qq heads ,
subsequent macros or text on the same line following invocation; an
optional
.Qq body ,
which spans subsequent lines of text or macros; and an optional
.Qq tail ,
macros or text on the same line following closure.
.\" LIST-ITEM
.It Em Partial-block
macros may span multiple lines.  They consists of a optional
.Qq head ,
text immediately following invocation; always a 
.Qq body ,
text or macros following the head on the same and subsequent lines; and
optionally a
.Qq tail ,
text immediately following closure.
.\" LIST-ITEM
.It Em In-line
macros may only enclose text and span at most a single line. 
.El
.El
.\" SUB-SECTION
.Ss Closure
Closure of a macro's scope depends first on its classification, then
on whether it's parsable.  In this table,
.Sq BFE
refers to block full-explicit and so on.
.\" PARAGRAPH
.Pp
.Bl -tag -width 12n -offset XXXX -compact
.It BPE , BFE
corresponding explicit closure macro
.It BFI
end-of-file or a corresponding implicit closure macro
.It BPI
end-of-line (body may be closed by >0 space-separated
.Sx Reserved Characters ,
although block scope will still be open)
.It INL
end-of-line
.El
.\" PARAGRAPH
d282 17
a298 47
If a macro (block or in-line) is parsable, it may also be closed out by
one of the following scenarios (unless specifically noted otherwise):
.\" PARAGRAPH
.Pp
.Bl -dash -offset XXXX -compact
.It 
a sequence of >0 space-separated
.Sx Reserved Characters ,
.It
another macro,
.It
end-of-line, or
.It
completion of a set number of arguments.
.El
.\" PARAGRAPH
.Pp
If >0 space-separated
.Sx Reserved Characters
are followed by non-reserved characters, the behaviour differs per
macro.  In general, scope of the macro is closed and re-opened:
subsequent tokens are interpreted as if the scope had just been opened.
In other circumstances, scope is simply closed out.
.\" SECTION
.Sh SYNTAX
Macros are two or three characters in length.  The syntax of macro
invocation depends on its classification.  
.Qq \-arg
refers to the macro arguments (which may contain zero or more values).
In these illustrations, 
.Sq \&.Yo
opens the scope of a macro, and if specified,
.Sq \&.Yc
closes it out (closure may be implicit at end-of-line or end-of-file).
.\" PARAGRAPH
.Pp
Block full-explicit (may contain head, body, tail).
.Bd -literal -offset XXXX
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBhead...\(rB 
\(lBbody...\(rB 
\&.Yc \(lBtail...\(rB 
.Ed
.\" PARAGRAPH
.Pp
Block full-implicit (may contain zero or more heads, body, no tail).
.Bd -literal -offset XXXX
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBhead... \(lBTa head...\(rB\(rB 
d302 1
a302 1
.\" PARAGRAPH
d304 12
a315 36
Block partial-explicit (may contain head, multi-line body, tail).
.Bd -literal -offset XXXX
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBhead...\(rB 
\(lBbody...\(rB 
\&.Yc \(lBtail...\(rB 

\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBhead...\(rB \
\(lBbody...\(rB \&Yc \(lBtail...\(rB 
.Ed
.\" PARAGRAPH
.Pp
Block partial-implicit (no head, body, no tail).  Note that the body
section may be followed by zero or more 
.Sx Reserved Words .
These are in the block scope, but not in the body scope.
.Bd -literal -offset XXXX
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBbody...\(rB \(lBreserved...\(rB
.Ed
.\" PARAGRAPH
.Pp
In-lines have \(>=0 scoped arguments.
.Bd -literal -offset XXX
\&.Yy \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB

\&.Yy \(lB\-arg \(lBval...\(rB\(rB arg0 arg1 argN
.Ed
.\" SECTION
.Sh MACROS
This section contains a complete list of all 
.Nm
macros, arranged by classification.  A 
.Qq callable
macro is invoked subsequent to the initial macro-line macro.  A
.Qq parsable
macro may be followed by further (ostensibly callable) macros.
.\" SUB-SECTION
d317 2
a318 3
The head of these macros follows invocation; the body is the content of
subsequent lines prior to closure.  None of these macros have tails;
some 
d320 1
a320 1
.Sq \&.It \-bullet , 
d326 8
a333 1
don't have heads.
d335 6
a340 5
.Bl -column -compact -offset XXXX "MacroX" "CallableX" "ParsableX" "Closing"
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Closing
.It \&.Sh    Ta    \&No    Ta    \&No    Ta    \&.Sh
.It \&.Ss    Ta    \&No    Ta    \&No    Ta    \&.Sh, \&.Ss
.It \&.It    Ta    \&No    Ta    Yes     Ta    \&.It, \&.El
d342 16
a357 5
.\" SUB-SECTION
.Ss Block full-explicit
None of these macros are callable or parsed.  The last column indicates
the explicit scope rules.  All contains bodies, some may contain heads 
.Pq So \&Bf Sc .
d359 1
a359 1
.Bl -column -compact -offset XXXX "MacroX" "CallableX" "ParsableX" "closed by XXX"
d361 24
a384 8
.It \&.Bd    Ta    \&No    Ta    \&No    Ta    closed by \&.Ed
.It \&.Ed    Ta    \&No    Ta    \&No    Ta    opened by \&.Bd
.It \&.Bl    Ta    \&No    Ta    \&No    Ta    closed by \&.El
.It \&.El    Ta    \&No    Ta    \&No    Ta    opened by \&.Bl
.It \&.Bf    Ta    \&No    Ta    \&No    Ta    closed by \&.Ef
.It \&.Ef    Ta    \&No    Ta    \&No    Ta    opened by \&.Bf
.It \&.Bk    Ta    \&No    Ta    \&No    Ta    closed by \&.Ek
.It \&.Ek    Ta    \&No    Ta    \&No    Ta    opened by \&.Bk
d386 1
a386 1
.\" SUB-SECTION
d388 7
a394 2
All of these are callable and parsed for further macros.  Their scopes
close at the invocation's end-of-line.
d396 1
a396 1
.Bl -column "MacroX" "CallableX" "ParsableX" -compact -offset XXXX
d398 18
a415 68
.It \&.Aq    Ta    Yes   Ta    Yes
.It \&.Op    Ta    Yes   Ta    Yes
.It \&.Bq    Ta    Yes   Ta    Yes
.It \&.Dq    Ta    Yes   Ta    Yes
.It \&.Pq    Ta    Yes   Ta    Yes
.It \&.Qq    Ta    Yes   Ta    Yes
.It \&.Sq    Ta    Yes   Ta    Yes
.It \&.Brq   Ta    Yes   Ta    Yes
.It \&.D1    Ta    \&No  Ta    \&Yes
.It \&.Dl    Ta    \&No  Ta    Yes
.It \&.Ql    Ta    Yes   Ta    Yes
.El
.\" PARAGRAPH
.Pp
The
.Sq \&.Op
may be broken by 
.Sq \&.Oc 
as in the following example:
.Bd -literal -offset XXXX
\&.Oo
\&.Op Fl a Oc
.Ed
.Pp
In the above example, the scope of
.Sq \&.Op
is technically broken by 
.Sq \&.Oc ,
however, due to the overwhelming existence of this sequence, it's
allowed.
.\" SUB-SECTION
.Ss Block partial-explicit
Each of these contains at least a body and, in limited circumstances, a
head 
.Pq So \&.Fo Sc , So \&.Eo Sc
and/or tail 
.Pq So \&.Ec Sc .
.Pp
.Bl -column "MacroX" "CallableX" "ParsableX" "closed by XXXX" -compact -offset XXXX
.It Em Macro Ta Em Callable Ta Em Parsable Ta Em Scope
.It \&.Ao    Ta    Yes   Ta    Yes    Ta    closed by \&.Ac
.It \&.Ac    Ta    Yes   Ta    Yes    Ta    opened by \&.Ao
.It \&.Bc    Ta    Yes   Ta    Yes    Ta    closed by \&.Bo
.It \&.Bo    Ta    Yes   Ta    Yes    Ta    opened by \&.Bc
.It \&.Pc    Ta    Yes   Ta    Yes    Ta    closed by \&.Po
.It \&.Po    Ta    Yes   Ta    Yes    Ta    opened by \&.Pc
.It \&.Do    Ta    Yes   Ta    Yes    Ta    closed by \&.Dc
.It \&.Dc    Ta    Yes   Ta    Yes    Ta    opened by \&.Do
.It \&.Xo    Ta    Yes   Ta    Yes    Ta    closed by \&.Xc
.It \&.Xc    Ta    Yes   Ta    Yes    Ta    opened by \&.Xo
.It \&.Bro   Ta    Yes   Ta    Yes    Ta    closed by \&.Brc
.It \&.Brc   Ta    Yes   Ta    Yes    Ta    opened by \&.Bro
.It \&.Oc    Ta    Yes   Ta    Yes    Ta    closed by \&.Oo
.It \&.Oo    Ta    Yes   Ta    Yes    Ta    opened by \&.Oc
.It \&.So    Ta    Yes   Ta    Yes    Ta    closed by \&.Sc
.It \&.Sc    Ta    Yes   Ta    Yes    Ta    opened by \&.So
.It \&.Fc    Ta    Yes   Ta    Yes    Ta    opened by \&.Fo
.It \&.Fo    Ta    \&No  Ta    \&No   Ta    closed by \&.Fc
.It \&.Ec    Ta    Yes   Ta    Yes    Ta    opened by \&.Eo
.It \&.Eo    Ta    Yes   Ta    Yes    Ta    closed by \&.Ec
.It \&.Qc    Ta    Yes   Ta    Yes    Ta    opened by \&.Oo
.It \&.Qo    Ta    Yes   Ta    Yes    Ta    closed by \&.Oc
.It \&.Re    Ta    \&No  Ta    \&No   Ta    opened by \&.Rs
.It \&.Rs    Ta    \&No  Ta    \&No   Ta    closed by \&.Re
.El
.\" SUB-SECTION
.Ss In-line 
In-line macros have only text children.  If a number (or inequality) of
d419 8
d428 1
a428 1
.Bl -column "MacroX" "CallableX" "ParsableX" "Arguments" -compact -offset XXXX
d430 70
a499 71
.It \&.Dd    Ta    \&No  Ta    \&No    Ta    >0
.It \&.Dt    Ta    \&No  Ta    \&No    Ta    n
.It \&.Os    Ta    \&No  Ta    \&No    Ta    n
.It \&.Pp    Ta    \&No  Ta    \&No    Ta    0
.It \&.Ad    Ta    Yes   Ta    Yes     Ta    n
.It \&.An    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ar    Ta    Yes   Ta    Yes     Ta    n
.It \&.Cd    Ta    Yes   Ta    \&No    Ta    >0
.It \&.Cm    Ta    Yes   Ta    Yes     Ta    n
.It \&.Dv    Ta    Yes   Ta    Yes     Ta    n
.It \&.Er    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Ev    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ex    Ta    \&No  Ta    \&No    Ta    0
.It \&.Fa    Ta    Yes   Ta    Yes     Ta    n
.It \&.Fd    Ta    \&No  Ta    \&No    Ta    >0
.It \&.Fl    Ta    Yes   Ta    Yes     Ta    n
.It \&.Fn    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Ft    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ic    Ta    Yes   Ta    Yes     Ta    >0
.It \&.In    Ta    \&No  Ta    \&No    Ta    n
.It \&.Li    Ta    Yes   Ta    Yes     Ta    n
.It \&.Nd    Ta    \&No  Ta    \&No    Ta    n
.It \&.Nm    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ot    Ta    \&No  Ta    \&No    Ta    n
.It \&.Pa    Ta    Yes   Ta    Yes     Ta    n
.It \&.Rv    Ta    \&No  Ta    \&No    Ta    0
.It \&.St    Ta    \&No  Ta    Yes     Ta    1
.It \&.Va    Ta    Yes   Ta    Yes     Ta    n
.It \&.Vt    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Xr    Ta    Yes   Ta    Yes     Ta    >0, <3
.It \&.%A    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%B    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%C    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%D    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%I    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%J    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%N    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%O    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%P    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%R    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%T    Ta    \&No  Ta    \&No    Ta    >0
.It \&.%V    Ta    \&No  Ta    \&No    Ta    >0
.It \&.At    Ta    Yes   Ta    Yes     Ta    1
.It \&.Bsx   Ta    Yes   Ta    Yes     Ta    n
.It \&.Bx    Ta    Yes   Ta    Yes     Ta    n
.It \&.Db    Ta    \&No  Ta    \&No    Ta    1
.It \&.Em    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Fx    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ms    Ta    Yes   Ta    Yes     Ta    >0
.It \&.No    Ta    Yes   Ta    Yes     Ta    0
.It \&.Ns    Ta    Yes   Ta    Yes     Ta    0
.It \&.Nx    Ta    Yes   Ta    Yes     Ta    n
.It \&.Ox    Ta    Yes   Ta    Yes     Ta    n
.It \&.Pf    Ta    \&No  Ta    Yes     Ta    1
.It \&.Sm    Ta    \&No  Ta    \&No    Ta    1
.It \&.Sx    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Sy    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Tn    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Ux    Ta    Yes   Ta    Yes     Ta    n
.It \&.Dx    Ta    Yes   Ta    Yes     Ta    n
.It \&.Bt    Ta    \&No  Ta    \&No    Ta    0
.It \&.Hf    Ta    \&No  Ta    \&No    Ta    n
.It \&.Fr    Ta    \&No  Ta    \&No    Ta    n
.It \&.Ud    Ta    \&No  Ta    \&No    Ta    0
.It \&.Lb    Ta    \&No  Ta    \&No    Ta    1
.It \&.Ap    Ta    Yes   Ta    Yes     Ta    0
.It \&.Lp    Ta    \&No  Ta    \&No    Ta    0
.It \&.Lk    Ta    Yes   Ta    Yes     Ta    n
.It \&.Mt    Ta    Yes   Ta    Yes     Ta    >0
.It \&.Es    Ta    \&No  Ta    \&No    Ta    0
.It \&.En    Ta    \&No  Ta    \&No    Ta    0
d501 1
a501 9
.Pp
The
.Sq \&.Ot ,
.Sq \&.Fr ,
.Sq \&.Es 
and
.Sq \&.En ,
macros are obsolete.
.\" SECTION
d512 1
d570 5
d576 1
a576 1
.\" SECTION
d580 1
a580 1
.\" SECTION
d586 1
a586 1
.\" SECTION
d589 1
@


1.6
log
@sync to 1.7.20: minimum requirements for -mdoc documents;
while merging, avoid having two STRUCTURE sections;
the fix for the latter problem was also submitted upstream
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.5 2009/06/21 19:09:58 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 21 2009 $
d31 2
a32 2
manuals.  In this reference document, we describe the syntax, ontology
and structure of the 
d139 12
a150 1
with the same combinations as described above.  This form is deprecated.  
d167 7
a173 5
Macros are classified in an ontology described by their scope rules.
Some macros are allowed to deviate from their classifications to
preserve backward-compatibility with old macro combinations still found
in the manual corpus.  These are specifically noted on a per-macro
basis.
d312 1
a312 1
macros, arranged ontologically.  A 
d530 14
d550 1
a550 1
.Sq \(Ba
d579 4
a582 5
If an special-character control character 
.Sq \e 
is escaped, it will
obviously not render the sequence.  Even newer versions of groff seem to
dither on this.
@


1.5
log
@sync to 1.7.19: .Bl -column  now correctly handles tail entries,
for example:  .Bl -column -compact -offset ... args ...
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.4 2009/06/18 23:34:53 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 18 2009 $
d142 14
d295 1
a295 1
.\"
d635 5
@


1.4
log
@sync to 1.7.19: improved comment handling
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.3 2009/06/18 01:19:02 schwarze Exp $
d93 1
a93 1
.Bl -tag -width 12n -offset XXXX -compact
d304 1
a304 1
.Bl -column "MacroX" "CallableX" "ParsableX" "Closing" -compact -offset XXXX
d316 1
a316 1
.Bl -column "MacroX" "CallableX" "ParsableX" "closed by XXX" -compact -offset XXXX
@


1.3
log
@sync to 1.7.16: make a couple of macros callable, reserve "|",
and some tweaks to .Lk
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.2 2009/06/14 23:00:57 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 14 2009 $
d80 10
@


1.2
log
@sync to 1.7.16: comments, whitespace and spelling fixes; no functional change
@
text
@d1 1
a1 1
.\"	$Id: mdoc.7,v 1.28 2009/06/12 12:40:44 kristaps Exp $
d17 1
a17 1
.Dd $Mdocdate$
d34 6
a39 1
language.
d104 2
d403 1
a403 1
.It \&.An    Ta    \&No  Ta    Yes     Ta    n
d415 1
a415 1
.It \&.Ft    Ta    \&No  Ta    Yes     Ta    n
d446 1
a446 1
.It \&.Ms    Ta    \&No  Ta    Yes     Ta    >0
d465 2
a466 2
.It \&.Lk    Ta    \&No  Ta    Yes     Ta    >0
.It \&.Mt    Ta    \&No  Ta    Yes     Ta    >0
d480 9
a488 5
The mdoc language was traditionally a 
.Qq roff
macro package; most existing manuals were written with mdoc syntax
dictated by system-dependent roff installations.  This section documents
compatibility with these systems.
d493 10
a502 4
.Sq \&.Fo
and
.Sq \&.St
historically weren't always callable.  Both are now correctly callable.
d506 2
a507 1
is assumed for all lists: any list may be nested and
d513 1
a513 1
syntax where column widths may be preceeded by other arguments (instead
a521 12
The system-name macros (
.Ns Sq \&.At ,
.Sq \&.Bsx ,
.Sq \&.Bx ,
.Sq \&.Fx ,
.Sq \&.Nx ,
.Sq \&.Ox ,
and
.Sq \&.Ux )
are callable.
.\" LIST-ITEM
.It
d528 5
a532 2
.Sq \&.Cd
is callable.
@


1.1
log
@Initial check-in of mandoc for formatting manuals. ok deraadt@@
@
text
@d1 1
a1 1
.\" $Id: mdoc.7,v 1.19 2009/03/27 14:56:15 kristaps Exp $
d3 1
a3 1
.\" Copyright (c) 2009 Kristaps Dzonsons <kristaps@@openbsd.org>
d6 2
a7 3
.\" purpose with or without fee is hereby granted, provided that the
.\" above copyright notice and this permission notice appear in all
.\" copies.
d9 7
a15 8
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
.\" AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
.\" DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
.\" PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
.\" TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
.Dt mdoc 7
d534 1
a534 1
.An Kristaps Dzonsons Aq kristaps@@openbsd.org .
d537 1
a537 1
There are several ambiguous parts of mdoc.
d561 1
a561 1
variable name and optional, preceeding type.
@

