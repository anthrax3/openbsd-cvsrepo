head	1.23;
access;
symbols
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2;
locks; strict;
comment	@ * @;


1.23
date	2014.08.27.00.06.08;	author schwarze;	state dead;
branches;
next	1.22;
commitid	52PkSro00emV8qcw;

1.22
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.11.15.45.39;	author schwarze;	state Exp;
branches;
next	1.20;

1.20
date	2014.01.06.03.02.39;	author schwarze;	state Exp;
branches;
next	1.19;

1.19
date	2013.12.31.03.41.09;	author schwarze;	state Exp;
branches;
next	1.18;

1.18
date	2013.12.31.00.40.19;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2013.07.12.11.01.42;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2012.04.15.11.54.47;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2012.01.05.22.07.42;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2011.12.28.01.17.01;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2011.12.26.12.45.58;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2011.12.12.01.59.13;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2011.12.09.00.44.15;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.29.22.30.56;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.28.00.16.38;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.26.16.41.35;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.18.01.10.03;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.17.14.52.32;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.16.13.23.27;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.13.11.07.10;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.13.09.58.21;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.09.17.59.56;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.06.23.04.16;	author schwarze;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Add an implementation of man(1) into the /usr/bin/mandoc binary and
provide a unified set of command line options for mandoc(1), man(1),
apropos(1), and whatis(1), each option doing the same for all four.
Not adding any completely new options, only extending exiting ones
from one tool to the others.  New options are:
* apropos & whatis -acfkw  (in the past, these were man(1) only)
* apropos & whatis -a -IOTW  (in the past, mandoc(1) only)
* mandoc -ac  (in the past, man(1) only)
* man -IOTW  (in the past, mandoc(1) only)

Before we can decide whether or not we want to replace src/usr.bin/man
with this implementation, considerable bugfixing, testing, and
performance measurements are needed, which i'd rather do in the tree
than outside.  Note that these bugs only affect the new man(1) mode,
existing mandoc(1), apropos(1), and whatis(1) is fine.

The new functionality in mandoc(1), apropos(1), and whatis(1)
is fully enabled.  To play with the new man(1), you can try:
# mv /usr/bin/man /usr/bin/oman
# ln -s /usr/bin/mandoc /usr/bin/man

Positive feedback about the general direction from sthen@@ and jmc@@,
and deraadt@@ is not against it.
@
text
@/*	$Id: apropos.c,v 1.22 2014/04/20 16:44:44 schwarze Exp $ */
/*
 * Copyright (c) 2012 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2013 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/param.h>

#include <assert.h>
#include <getopt.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "manpath.h"
#include "mansearch.h"


int
apropos(int argc, char *argv[])
{
	int		 ch, whatis;
	struct mansearch search;
	size_t		 i, sz;
	struct manpage	*res;
	struct manpaths	 paths;
	char		*defpaths, *auxpaths;
	char		*conf_file;
	char		*progname;
	const char	*outkey;
	extern char	*optarg;
	extern int	 optind;

	progname = strrchr(argv[0], '/');
	if (progname == NULL)
		progname = argv[0];
	else
		++progname;

	whatis = (0 == strncmp(progname, "whatis", 6));

	memset(&paths, 0, sizeof(struct manpaths));
	memset(&search, 0, sizeof(struct mansearch));

	auxpaths = defpaths = NULL;
	conf_file = NULL;
	outkey = "Nd";

	while (-1 != (ch = getopt(argc, argv, "C:M:m:O:S:s:")))
		switch (ch) {
		case 'C':
			conf_file = optarg;
			break;
		case 'M':
			defpaths = optarg;
			break;
		case 'm':
			auxpaths = optarg;
			break;
		case 'O':
			outkey = optarg;
			break;
		case 'S':
			search.arch = optarg;
			break;
		case 's':
			search.sec = optarg;
			break;
		default:
			goto usage;
		}

	argc -= optind;
	argv += optind;

	if (0 == argc)
		goto usage;

	search.deftype = whatis ? TYPE_Nm : TYPE_Nm | TYPE_Nd;
	search.flags = whatis ? MANSEARCH_WHATIS : 0;

	manpath_parse(&paths, conf_file, defpaths, auxpaths);
	mansearch_setup(1);
	ch = mansearch(&search, &paths, argc, argv, outkey, &res, &sz);
	manpath_free(&paths);

	if (0 == ch)
		goto usage;

	for (i = 0; i < sz; i++) {
		printf("%s - %s\n", res[i].names,
		    NULL == res[i].output ? "" : res[i].output);
		free(res[i].file);
		free(res[i].names);
		free(res[i].output);
	}

	free(res);
	mansearch_setup(0);
	return(sz ? EXIT_SUCCESS : EXIT_FAILURE);
usage:
	fprintf(stderr, "usage: %s [-C file] [-M path] [-m path] "
			"[-O outkey] "
			"[-S arch] [-s section]%s ...\n", progname,
			whatis ? " name" : "\n               expression");
	return(EXIT_FAILURE);
}
@


1.22
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.21 2014/04/11 15:45:39 schwarze Exp $ */
@


1.21
log
@Further apropos(1) speed optimization was trickier than anticipated.
Contrary to what i initially thought, almost all time is now spent
inside sqlite3(3) routines, and i found no easy way calling less of them.
However, sqlite(3) spends substantial time in malloc(3), and even more
(twice that) in its immediate malloc wrapper, sqlite3MemMalloc(),
keeping track of all individual malloc chunk sizes.  Typically about
90% of the malloced memory is used for purposes of the pagecache.

By providing an mmap(3) MAP_ANON SQLITE_CONFIG_PAGECACHE, execution
time decreases by 20-25% for simple (Nd and/or Nm) queries, 10-20% for
non-NAME queries, and even apropos(1) resident memory size as reported
by top(1) decreases by 20% for simple and by 60% for non-NAME queries.
The new function, mansearch_setup(), spends no measurable time.

The pagesize chosen is optimal:
* Substantially smaller pages yield no gain at all.
* Larger pages provide no additional benefit and just waste memory.

The chosen number of pages in the cache is a compromise:
* For simple queries, a handful of pages would suffice to get the full
speed effect, at an apropos(1) resident memory size of about 2.0 MB.
* For non-NAME queries, a large pagecache with 2k pages (2.5 MB) might
gain a few more percent in speed, but at the expense of doubling the
apropos(1) resident memory size for *all* queries.
* The chosen number of 256 pages (330 kB) allows nearly full speed gain
for all queries at the price of a 15% resident memory size increase.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.20 2014/01/06 03:02:39 schwarze Exp $ */
d31 1
d64 1
a64 1
		case ('C'):
d67 1
a67 1
		case ('M'):
d70 1
a70 1
		case ('m'):
d73 1
a73 1
		case ('O'):
d76 1
a76 1
		case ('S'):
d79 1
a79 1
		case ('s'):
@


1.20
log
@Drop Nd from the mpages table, it is still in the keys table.
This shrinks the database in standard mode by 3%, in -Q mode by 9%,
without loss of functionality.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.19 2013/12/31 03:41:09 schwarze Exp $ */
d95 1
d111 1
@


1.19
log
@Experimental feature to let apropos(1) show different keys than .Nd.
This really takes us beyond what grep -R /usr/*/man/ can do
because now you can search for pages by *one* criterion and then
display the contents of *another* macro from those pages, like in
$ apropos -O Ox Fa~wchar
to get an impression how long wide character handling is available.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.18 2013/12/31 00:40:19 schwarze Exp $ */
d42 1
a42 1
	char		*outkey;
d59 1
a59 1
	outkey = NULL;
a102 1
		    NULL == outkey ? res[i].desc :
a105 1
		free(res[i].desc);
@


1.18
log
@Replace the Berkeley-DB based mandocdb(8) by an SQLite3-based version,
aiming for more flexible development and optimization options.
Kristaps started this during the summer 2012, i did some very heavy
bugfixing during t2k13 and finally, during the last few days,
got it to a state where it is ripe for in-tree development.
Beware, neither the user interfaces nor the database formats
are expected to be stable just yet.

Will not be installed or activated until further discussion.
No functional change to mandoc(1).

"As long as it remains off until we decide the cost, fine." deraadt@@
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.17 2013/07/12 11:01:42 schwarze Exp $ */
d4 1
d42 1
d59 1
d61 1
a61 1
	while (-1 != (ch = getopt(argc, argv, "C:M:m:S:s:")))
d72 3
d95 1
a95 1
	ch = mansearch(&search, &paths, argc, argv, &res, &sz);
d102 3
a104 1
		printf("%s - %s\n", res[i].names, res[i].desc);
d108 1
d115 1
@


1.17
log
@Simple partial sync to bsd.lv:
* Without arguments, show the usage line and EXIT_FAILURE.
* Resolve some gratuitious differences (order, parantheses, white space, etc).
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.16 2012/04/15 11:54:47 schwarze Exp $ */
d3 1
a3 2
 * Copyright (c) 2011, 2012 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2011 Ingo Schwarze <schwarze@@openbsd.org>
d21 1
d25 1
a26 2
#include "apropos_db.h"
#include "mandoc.h"
d28 1
a28 5

static	int	 cmp(const void *, const void *);
static	void	 list(struct res *, size_t, void *);

static	char	*progname;
d33 4
a36 2
	int		 ch, rc, whatis;
	struct res	*res;
a37 3
	size_t		 terms, ressz;
	struct opts	 opts;
	struct expr	*e;
d40 1
d53 1
a53 1
	memset(&opts, 0, sizeof(struct opts));
a54 2
	ressz = 0;
	res = NULL;
a56 1
	e = NULL;
d70 1
a70 1
			opts.arch = optarg;
d73 1
a73 1
			opts.cat = optarg;
d85 2
a86 1
	rc = 0;
d89 2
d92 2
a93 7
	e = whatis ? termcomp(argc, argv, &terms) :
		     exprcomp(argc, argv, &terms);
		
	if (NULL == e) {
		fprintf(stderr, "%s: Bad expression\n", progname);
		goto out;
	}
d95 5
a99 7
	rc = apropos_search
		(paths.sz, paths.paths, &opts, 
		 e, terms, NULL, &ressz, &res, list);

	if (0 == rc) {
		fprintf(stderr, "%s: Bad database\n", progname);
		goto out;
d102 2
a103 6
out:
	manpath_free(&paths);
	resfree(res, ressz);
	exprfree(e);
	return(rc ? EXIT_SUCCESS : EXIT_FAILURE);

a108 28
}

/* ARGSUSED */
static void
list(struct res *res, size_t sz, void *arg)
{
	size_t		 i;

	qsort(res, sz, sizeof(struct res), cmp);

	for (i = 0; i < sz; i++) {
		if ( ! res[i].matched)
			continue;
		printf("%s(%s%s%s) - %.70s\n",
				res[i].title,
				res[i].cat,
				*res[i].arch ? "/" : "",
				*res[i].arch ? res[i].arch : "",
				res[i].desc);
	}
}

static int
cmp(const void *p1, const void *p2)
{

	return(strcasecmp(((const struct res *)p1)->title,
				((const struct res *)p2)->title));
@


1.16
log
@Simplify by not pre-filtering the result vector for satisfied matches:
we can do this in the frontend; from kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.15 2012/01/05 22:07:42 schwarze Exp $ */
d46 1
a47 1
	extern char	*optarg;
d55 1
a55 1
	whatis = 0 == strncmp(progname, "whatis", 6);
d84 1
a84 7
			fprintf(stderr,
			    "usage: %s [-C file] [-M path] [-m path]"
			    " [-S arch] [-s section]%s ...\n",
			    progname,
			    whatis ? " name" :
				"\n               expression");
			return(EXIT_FAILURE);
d90 2
a91 2
	if (0 == argc) 
		return(EXIT_SUCCESS);
d113 1
d119 6
@


1.15
log
@Small tweaks for precision; lots of feedback from jmc@@.
Update usage() as well; reminded by jmc@@.
Mention the manwhere(1) predecessor in 1BSD; suggested by kristaps@@.
OK jmc@@.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.14 2011/12/28 01:17:01 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
d18 2
d39 1
d41 1
a41 1
	size_t		 terms;
d60 2
d112 2
a113 6
		(paths.sz, paths.paths,
		 &opts, e, terms, NULL, list);

	if (0 == rc)
		fprintf(stderr, "%s: Error reading "
				"manual database\n", progname);
d115 4
d121 1
a122 1

d130 1
a130 1
	int		 i;
d134 5
a138 2
	for (i = 0; i < (int)sz; i++)
		printf("%s(%s%s%s) - %.*s\n", res[i].title,
d142 2
a143 1
				70, res[i].desc);
@


1.14
log
@Some parsing improvements from kristaps@@:
* Accept multiple lines in cat page NAME parsing.
* Do not trim the description to 70 characters in the database.
* Instead, limit the length of the description during output.
* In man(7), accept \-\- as a Nm-Nd separator; occurs in 3p.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.13 2011/12/26 12:45:58 schwarze Exp $ */
a29 1
static	void	 usage(void);
d79 6
a84 1
			usage();
a142 14
}

static void
usage(void)
{

	fprintf(stderr, "usage: %s "
			"[-C file] "
			"[-M path] "
			"[-m path] "
			"[-S arch] "
			"[-s section] "
			"expression ...\n",
			progname);
@


1.13
log
@Document whatis(1) -S and -s; leading, trailing, and double colons
in the MANPATH; and the new whatis.index file.
Include some synching to apropos(1) and to the usage() string.
Use some feedback from jmc@@.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.12 2011/12/12 01:59:13 schwarze Exp $ */
d126 1
a126 1
		printf("%s(%s%s%s) - %s\n", res[i].title,
d130 1
a130 1
				res[i].desc);
@


1.12
log
@implement -C (alternative config file) for apropos(1) and mandocdb(8);
ok kristaps@@
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.11 2011/12/09 00:44:15 schwarze Exp $ */
d147 2
a148 2
			"[-M manpath] "
			"[-m manpath] "
@


1.11
log
@sort output case-insensitively; from kristaps@@
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.10 2011/11/29 22:30:56 schwarze Exp $ */
d43 1
d59 1
d62 1
a62 1
	while (-1 != (ch = getopt(argc, argv, "M:m:S:s:")))
d64 3
d92 1
a92 1
	manpath_parse(&paths, defpaths, auxpaths);
d146 1
d151 1
a151 1
			"expression...\n",
@


1.10
log
@Sync to bsd.lv, mostly from kristaps@@.
Make `-i' only apply to regular expressions.
For substring matches, always use strcasestr().
Also, improve some manuals and comments.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.9 2011/11/28 00:16:38 schwarze Exp $ */
d132 1
a132 1
	return(strcmp(((const struct res *)p1)->title,
@


1.9
log
@Implement whatis(1) as a special apropos(1) mode as a part of
the mandoc(1) binary; not yet enabled for the general public.
Intended to replace src/usr.bin/whatis at a later time.
Coded by kristaps@@, with a few tweaks by me.

To test this:
 $ mandocdb  # unless you have already done so earlier
 $ sudo ln -s /usr/bin/mandoc /usr/bin/whatis.m
 $ whatis.m mandoc apropos whatis
 $ whatis.m man
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.8 2011/11/26 16:41:35 schwarze Exp $ */
d141 2
a142 2
			"[-M path] "
			"[-m path] "
@


1.8
log
@Resync to bsd.lv, most code from kristaps@@.
In particular, support the MANPATH environment variable
and don't confuse index record numbers when working with
multiple mandoc databases at once.
Besides, remove lots of gratuitious code and whitespace differences.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.7 2011/11/18 01:10:03 schwarze Exp $ */
d37 1
a37 1
	int		 ch, rc;
d52 2
a58 1
	rc = 0;
d76 1
a76 1
			goto out;
d82 4
a85 4
	if (0 == argc) {
		rc = 1;
		goto out;
	}
d89 4
a92 1
	if (NULL == (e = exprcomp(argc, argv, &terms))) {
@


1.7
log
@Support parenthised subexpressions in apropos(1);
written by kristaps@@, massive conflict resolution by me.
Lightly tested, putting it in for polishing it in-tree.
This concludes p2k11 for me, thanks robert@@!
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.6 2011/11/17 14:52:32 schwarze Exp $ */
d4 1
a19 1
#include <limits.h>
a24 1
#include "man_conf.h"
d26 1
d37 2
a38 2
	struct man_conf	 dirs;
	int		 ch, use_man_conf;
d42 1
a45 4
	memset(&dirs, 0, sizeof(struct man_conf));
	memset(&opts, 0, sizeof(struct opts));
	use_man_conf = 1;

d52 8
a59 1
	while (-1 != (ch = getopt(argc, argv, "M:m:S:s:"))) 
d62 2
a63 2
			use_man_conf = 0;
			/* FALLTHROUGH */
d65 1
a65 1
			manpath_parse(&dirs, optarg);
d75 1
a75 1
			return(EXIT_FAILURE);
d81 6
a86 2
	if (0 == argc) 
		return(EXIT_SUCCESS);
d89 2
a90 2
		fprintf(stderr, "Bad expression\n");
		return(EXIT_FAILURE);
d93 7
a99 11
	/*
	 * Configure databases.
	 * The keyword database is a btree that allows for duplicate
	 * entries.
	 * The index database is a recno.
	 */

	if (use_man_conf)
		man_conf_parse(&dirs);
	ch = apropos_search(dirs.argc, dirs.argv, &opts,
			e, terms, NULL, list);
d101 2
a102 1
	man_conf_free(&dirs);
d104 2
a105 3
	if (0 == ch)
		fprintf(stderr, "%s: Database error\n", progname);
	return(ch ? EXIT_SUCCESS : EXIT_FAILURE);
d117 2
a118 2
		printf("%s(%s%s%s) - %s\n", res[i].title, 
				res[i].cat, 
d141 1
a141 1
			"expression...\n", 
@


1.6
log
@Minimal man.conf(5) _whatdb support for mandocdb(8) and apropos(1),
and add the standard options -M and -m to apropos(1).
Including a bugfix to prevent mandocdb(8) from leaking
database file descriptors.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.5 2011/11/16 13:23:27 schwarze Exp $ */
d29 1
a29 1
static	void	 list(struct rec *, size_t, void *);
d94 1
a94 1
	apropos_search(dirs.argc, dirs.argv, &opts,
d99 3
a101 1
	return(EXIT_SUCCESS);
d106 1
a106 1
list(struct rec *res, size_t sz, void *arg)
d110 1
a110 1
	qsort(res, sz, sizeof(struct rec), cmp);
d124 2
a125 2
	return(strcmp(((const struct rec *)p1)->title,
				((const struct rec *)p2)->title));
d137 1
a137 1
			"EXPR\n", 
@


1.5
log
@Support multiple search terms, and logical operations -a and -o
to combine them.  The default remains -o; usual precedence applies.
No explicit grouping by parentheses yet.
from kristaps@@
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.4 2011/11/13 11:07:10 schwarze Exp $ */
d25 1
d37 2
a38 1
	int		 ch;
d45 1
d47 1
d55 1
a55 1
	while (-1 != (ch = getopt(argc, argv, "S:s:"))) 
d57 6
d92 6
a97 1
	apropos_search(&opts, e, terms, NULL, list);
d131 2
a132 1
			"[-I] "
@


1.4
log
@Rewrite the expression parser for a more concise syntax:

 apropos [search_type[,...]=]substring
 apropos search_type[,...][,i]~regex

... and expression evaluation must take the search type into account.

This allows to:
* drop the global -I option and
* drop the enum match, just using a boolean int.

"go ahead" kristaps@@
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.3 2011/11/13 09:58:21 schwarze Exp $ */
d37 1
d70 1
a70 1
	if (NULL == (e = exprcomp(argc, argv))) {
d82 1
a82 1
	apropos_search(&opts, e, NULL, list);
@


1.3
log
@Split the common code to be reused by other mandocdb clients,
for example the future man.cgi, out of apropos.c (which still
contains the apropos(1) main program, command line handling, and
the terminal output formatter) into apropos_db.{h,c} (which now
contains the database searching backend code).

While here,
* Drop the -e option; to search for exact strings, use REs.
* Drop the -r option (more changes related to this coming soon).
* Use the traditional -s and -S instead of inventing our own options.
* Drop the sort option (at least for now), it got in the way.

Written by kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.2 2011/10/09 17:59:56 schwarze Exp $ */
d36 1
a36 1
	int		 ch, cs;
d50 1
a50 3
	cs = 0;

	while (-1 != (ch = getopt(argc, argv, "S:s:I"))) 
a57 3
		case ('I'):
			cs = 1;
			break;
d69 1
a69 1
	if (NULL == (e = exprcomp(cs, argv, argc))) {
@


1.2
log
@Sync to version 1.12.0; all code by kristaps@@:
Implement .Rv in -Tman.
Let -man -Tman work a bit like cat(1).
Add the -Ofragment option to -T[x]html.
Minor fixes in -T[x]html.
Lots of apropos(1) and -Tman code cleanup.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.1 2011/10/06 23:04:16 schwarze Exp $ */
d3 1
a3 1
* Copyright (c) 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
a16 2
#include <sys/types.h>

a17 2
#include <errno.h>
#include <fcntl.h>
a19 3
#include <regex.h>
#include <stdarg.h>
#include <stdint.h>
a22 2
#include <unistd.h>
#include <db.h>
d24 1
d27 2
a28 113
#define	MAXRESULTS	 256

/* Bit-fields.  See mandocdb.8. */

#define TYPE_NAME	  0x01
#define TYPE_FUNCTION	  0x02
#define TYPE_UTILITY	  0x04
#define TYPE_INCLUDES	  0x08
#define TYPE_VARIABLE	  0x10
#define TYPE_STANDARD	  0x20
#define TYPE_AUTHOR	  0x40
#define TYPE_CONFIG	  0x80
#define TYPE_DESC	  0x100
#define TYPE_XREF	  0x200
#define TYPE_PATH	  0x400
#define TYPE_ENV	  0x800
#define TYPE_ERR	  0x1000

enum	match {
	MATCH_SUBSTR = 0,
	MATCH_REGEX,
	MATCH_EXACT
};

enum	sort {
	SORT_TITLE = 0,
	SORT_CAT,
	SORT__MAX
};

struct	opts {
	enum sort	 sort; /* output sorting */
	const char	*arch; /* restrict to architecture */
	const char	*cat; /* restrict to category */
	int		 types; /* only types in bitmask */
	int		 insens; /* case-insensitive match */
	enum match	 match; /* match type */
};

struct	type {
	int		 mask;
	const char	*name; /* command-line type name */
};

struct	rec {
	char		*file; /* file in file-system */
	char		*cat; /* category (3p, 3, etc.) */
	char		*title; /* title (FOO, etc.) */
	char		*arch; /* arch (or empty string) */
	char		*desc; /* description (from Nd) */
	recno_t		 rec; /* record in index */
};

struct	res {
	char		*arch; /* architecture */
	char		*desc; /* free-form description */
	char		*keyword; /* matched keyword */
	int	 	 types; /* bitmask of field selectors */
	char		*cat; /* manual section */
	char		*title; /* manual section */
	char		*uri; /* formatted uri of file */
	recno_t		 rec; /* unique id of underlying manual */
	/*
	 * Maintain a binary tree for checking the uniqueness of `rec'
	 * when adding elements to the results array.
	 * Since the results array is dynamic, use offset in the array
	 * instead of a pointer to the structure.
	 */
	int		 lhs;
	int		 rhs;
};

struct	state {
	DB		 *db; /* database */
	DB		 *idx; /* index */
	const char	 *dbf; /* database name */
	const char	 *idxf; /* index name */
};

static	const char * const sorts[SORT__MAX] = {
	"cat", /* SORT_CAT */
	"title", /* SORT_TITLE */
};

static	const struct type types[] = {
	{ TYPE_NAME, "name" },
	{ TYPE_FUNCTION, "func" },
	{ TYPE_UTILITY, "utility" },
	{ TYPE_INCLUDES, "incl" },
	{ TYPE_VARIABLE, "var" },
	{ TYPE_STANDARD, "stand" },
	{ TYPE_AUTHOR, "auth" },
	{ TYPE_CONFIG, "conf" },
	{ TYPE_DESC, "desc" },
	{ TYPE_XREF, "xref" },
	{ TYPE_PATH, "path" },
	{ TYPE_ENV, "env" },
	{ TYPE_ERR, "err" },
	{ INT_MAX, "all" },
	{ 0, NULL }
};

static	void	 buf_alloc(char **, size_t *, size_t);
static	void	 buf_dup(struct mchars *, char **, const char *);
static	void	 buf_redup(struct mchars *, char **, 
			size_t *, const char *);
static	int	 sort_cat(const void *, const void *);
static	int	 sort_title(const void *, const void *);
static	int	 state_getrecord(struct state *, 
			recno_t, struct rec *);
static	void	 state_output(const struct res *, int);
static	int	 state_search(struct state *, 
			const struct opts *, char *);
d36 1
a36 5
	BTREEINFO	 info;
	int		 ch, i, rc;
	const char	*dbf, *idxf;
	struct state	 state;
	char		*q, *v;
d38 1
a42 6
	memset(&state, 0, sizeof(struct state));

	dbf = "mandoc.db";
	idxf = "mandoc.index";
	q = NULL;
	rc = EXIT_FAILURE;
d50 1
a50 1
	opts.match = MATCH_SUBSTR;
d52 1
a52 1
	while (-1 != (ch = getopt(argc, argv, "a:c:eIrs:t:"))) 
d54 1
a54 1
		case ('a'):
d57 1
a57 1
		case ('c'):
a59 3
		case ('e'):
			opts.match = MATCH_EXACT;
			break;
d61 1
a61 4
			opts.insens = 1;
			break;
		case ('r'):
			opts.match = MATCH_REGEX;
a62 31
		case ('s'):
			for (i = 0; i < SORT__MAX; i++) {
				if (strcmp(optarg, sorts[i])) 
					continue;
				opts.sort = (enum sort)i;
				break;
			}

			if (i < SORT__MAX)
				break;

			fprintf(stderr, "%s: Bad sort\n", optarg);
			return(EXIT_FAILURE);
		case ('t'):
			while (NULL != (v = strsep(&optarg, ","))) {
				if ('\0' == *v)
					continue;
				for (i = 0; types[i].mask; i++) {
					if (strcmp(types[i].name, v))
						continue;
					break;
				}
				if (0 == types[i].mask)
					break;
				opts.types |= types[i].mask;
			}
			if (NULL == v)
				break;
			
			fprintf(stderr, "%s: Bad type\n", v);
			return(EXIT_FAILURE);
d71 2
a72 5
	if (0 == argc || '\0' == **argv) {
		usage();
		goto out;
	} else
		q = *argv;
d74 4
a77 2
	if (0 == opts.types)
		opts.types = TYPE_NAME | TYPE_DESC;
d86 3
a88 244
	memset(&info, 0, sizeof(BTREEINFO));
	info.flags = R_DUP;

	state.db = dbopen(dbf, O_RDONLY, 0, DB_BTREE, &info);
	if (NULL == state.db) {
		perror(dbf);
		goto out;
	}

	state.idx = dbopen(idxf, O_RDONLY, 0, DB_RECNO, NULL);
	if (NULL == state.idx) {
		perror(idxf);
		goto out;
	}

	/* Main search function. */

	rc = state_search(&state, &opts, q) ?
		EXIT_SUCCESS : EXIT_FAILURE;
out:
	if (state.db)
		(*state.db->close)(state.db);
	if (state.idx)
		(*state.idx->close)(state.idx);

	return(rc);
}

static int
state_search(struct state *p, const struct opts *opts, char *q)
{
	int		 leaf, root, len, ch, dflag, rc;
	struct mchars	*mc;
	char		*buf;
	size_t		 bufsz;
	recno_t		 rec;
	uint32_t	 fl;
	DBT		 key, val;
	struct res	*res;
	regex_t		 reg;
	regex_t		*regp;
	char		 filebuf[10];
	struct rec	 record;

	rc = 0;
	root = leaf = -1;
	res = NULL;
	len = 0;
	buf = NULL;
	bufsz = 0;
	regp = NULL;

	/*
	 * Configure how we scan through results to see if we match:
	 * whether by regexp or exact matches.
	 */

	switch (opts->match) {
	case (MATCH_REGEX):
		ch = REG_EXTENDED | REG_NOSUB | 
			(opts->insens ? REG_ICASE : 0);

		if (0 != regcomp(&reg, q, ch)) {
			fprintf(stderr, "%s: Bad pattern\n", q);
			return(0);
		}

		regp = &reg;
		dflag = R_FIRST;
		break;
	case (MATCH_EXACT):
		key.data = q;
		key.size = strlen(q) + 1;
		dflag = R_CURSOR;
		break;
	default:
		dflag = R_FIRST;
		break;
	}

	mc = mchars_alloc();

	/*
	 * Iterate over the entire keyword database.
	 * For each record, we must first translate the key into UTF-8.
	 * Following that, make sure it's acceptable.
	 * Lastly, add it to the available records.
	 */

	while (0 == (ch = (*p->db->seq)(p->db, &key, &val, dflag))) {
		dflag = R_NEXT;

		/* 
		 * Keys must be sized as such: the keyword must be
		 * non-empty (nil terminator plus one character) and the
		 * value must be 8 (recno_t---uint32_t---index reference
		 * and a uint32_t flag field).
		 */

		if (key.size < 2 || 8 != val.size) {
			fprintf(stderr, "%s: Bad database\n", p->dbf);
			goto out;
		}

		buf_redup(mc, &buf, &bufsz, (char *)key.data);

		fl = *(uint32_t *)val.data;

		if ( ! (fl & opts->types))
			continue;

		switch (opts->match) {
		case (MATCH_REGEX):
			if (regexec(regp, buf, 0, NULL, 0))
				continue;
			break;
		case (MATCH_EXACT):
			if (opts->insens && strcasecmp(buf, q))
				goto send;
			if ( ! opts->insens && strcmp(buf, q))
				goto send;
			break;
		default:
			if (opts->insens && NULL == strcasestr(buf, q))
				continue;
			if ( ! opts->insens && NULL == strstr(buf, q))
				continue;
			break;
		}

		/*
		 * Now look up the file itself in our index.  The file's
		 * indexed by its recno for fast lookups.
		 */

		memcpy(&rec, val.data + 4, sizeof(recno_t));

		if ( ! state_getrecord(p, rec, &record))
			goto out;

		/* If we're in a different section, skip... */

		if (opts->cat && strcasecmp(opts->cat, record.cat))
			continue;
		if (opts->arch && strcasecmp(opts->arch, record.arch))
			continue;

		/* 
		 * Do a binary search to dedupe the results tree of the
		 * same record: we don't print the same file.
		 */

		for (leaf = root; leaf >= 0; )
			if (rec > res[leaf].rec && res[leaf].rhs >= 0)
				leaf = res[leaf].rhs;
			else if (rec < res[leaf].rec && res[leaf].lhs >= 0)
				leaf = res[leaf].lhs;
			else 
				break;

		if (leaf >= 0 && res[leaf].rec == rec)
			continue;

		res = mandoc_realloc
			(res, (len + 1) * sizeof(struct res));

		/*
		 * Now we have our filename, keywords, types, and all
		 * other necessary information.  
		 * Process it and add it to our list of results.
		 */

		filebuf[9] = '\0';
		snprintf(filebuf, 10, "%u", record.rec);
		assert('\0' == filebuf[9]);

		res[len].rec = record.rec;
		res[len].types = fl;
		res[len].lhs = res[len].rhs = -1;

		buf_dup(mc, &res[len].keyword, buf);
		buf_dup(mc, &res[len].uri, filebuf);
		buf_dup(mc, &res[len].cat, record.cat);
		buf_dup(mc, &res[len].arch, record.arch);
		buf_dup(mc, &res[len].title, record.title);
		buf_dup(mc, &res[len].desc, record.desc);

		if (leaf >= 0) {
			if (record.rec > res[leaf].rec)
				res[leaf].rhs = len;
			else
				res[leaf].lhs = len;
		} else
			root = len;

		len++;
	}

	if (ch < 0) {
		perror(p->dbf);
		goto out;
	} 
send:
	/* Sort our results. */

	if (SORT_CAT == opts->sort)
		qsort(res, len, sizeof(struct res), sort_cat);
	else
		qsort(res, len, sizeof(struct res), sort_title);

	state_output(res, len);
	rc = 1;
out:
	for (len-- ; len >= 0; len--) {
		free(res[len].keyword);
		free(res[len].title);
		free(res[len].cat);
		free(res[len].arch);
		free(res[len].desc);
		free(res[len].uri);
	}

	free(res);
	free(buf);
	mchars_free(mc);

	if (regp)
		regfree(regp);

	return(rc);
}

/*
 * Track allocated buffer size for buf_redup().
 */
static inline void
buf_alloc(char **buf, size_t *bufsz, size_t sz)
{

	if (sz < *bufsz) 
		return;

	*bufsz = sz + 1024;
	*buf = mandoc_realloc(*buf, *bufsz);
d91 1
a91 3
/*
 * Like buf_redup() but throwing away the buffer size.
 */
d93 1
a93 1
buf_dup(struct mchars *mc, char **buf, const char *val)
d95 1
a95 77
	size_t		 bufsz;

	bufsz = 0;
	*buf = NULL;
	buf_redup(mc, buf, &bufsz, val);
}

/*
 * Normalise strings from the index and database.
 * These strings are escaped as defined by mandoc_char(7) along with
 * other goop in mandoc.h (e.g., soft hyphens).
 */
static void
buf_redup(struct mchars *mc, char **buf, 
		size_t *bufsz, const char *val)
{
	size_t		 sz;
	const char	*seq, *cpp;
	int		 len, pos;
	enum mandoc_esc	 esc;
	const char	 rsv[] = { '\\', ASCII_NBRSP, ASCII_HYPH, '\0' };

	/* Pre-allocate by the length of the input */

	buf_alloc(buf, bufsz, strlen(val) + 1);

	pos = 0;

	while ('\0' != *val) {
		/*
		 * Halt on the first escape sequence.
		 * This also halts on the end of string, in which case
		 * we just copy, fallthrough, and exit the loop.
		 */
		if ((sz = strcspn(val, rsv)) > 0) {
			memcpy(&(*buf)[pos], val, sz);
			pos += (int)sz;
			val += (int)sz;
		}

		if (ASCII_HYPH == *val) {
			(*buf)[pos++] = '-';
			val++;
			continue;
		} else if (ASCII_NBRSP == *val) {
			(*buf)[pos++] = ' ';
			val++;
			continue;
		} else if ('\\' != *val)
			break;

		/* Read past the slash. */

		val++;

		/*
		 * Parse the escape sequence and see if it's a
		 * predefined character or special character.
		 */

		esc = mandoc_escape(&val, &seq, &len);
		if (ESCAPE_ERROR == esc)
			break;

		cpp = ESCAPE_SPECIAL == esc ? 
			mchars_spec2str(mc, seq, len, &sz) : NULL;

		if (NULL == cpp)
			continue;

		/* Copy the rendered glyph into the stream. */

		buf_alloc(buf, bufsz, sz);

		memcpy(&(*buf)[pos], cpp, sz);
		pos += (int)sz;
	}
d97 1
a97 2
	(*buf)[pos] = '\0';
}
d99 1
a99 6
static void
state_output(const struct res *res, int sz)
{
	int		 i;

	for (i = 0; i < sz; i++)
a106 54
static void
usage(void)
{

	fprintf(stderr, "usage: %s "
			"[-eIr] "
			"[-a arch] "
			"[-c cat] "
			"[-s sort] "
			"[-t type[,...]] "
			"key\n", progname);
}

static int
state_getrecord(struct state *p, recno_t rec, struct rec *rp)
{
	DBT		key, val;
	size_t		sz;
	int		rc;

	key.data = &rec;
	key.size = sizeof(recno_t);

	rc = (*p->idx->get)(p->idx, &key, &val, 0);
	if (rc < 0) {
		perror(p->idxf);
		return(0);
	} else if (rc > 0)
		goto err;

	rp->file = (char *)val.data;
	if ((sz = strlen(rp->file) + 1) >= val.size)
		goto err;

	rp->cat = (char *)val.data + (int)sz;
	if ((sz += strlen(rp->cat) + 1) >= val.size)
		goto err;

	rp->title = (char *)val.data + (int)sz;
	if ((sz += strlen(rp->title) + 1) >= val.size)
		goto err;

	rp->arch = (char *)val.data + (int)sz;
	if ((sz += strlen(rp->arch) + 1) >= val.size)
		goto err;

	rp->desc = (char *)val.data + (int)sz;
	rp->rec = rec;
	return(1);
err:
	fprintf(stderr, "%s: Corrupt index\n", p->idxf);
	return(0);
}

d108 1
a108 1
sort_title(const void *p1, const void *p2)
d111 2
a112 2
	return(strcmp(((const struct res *)p1)->title,
		      ((const struct res *)p2)->title));
d115 2
a116 2
static int
sort_cat(const void *p1, const void *p2)
a117 1
	int		 rc;
d119 6
a124 4
	rc = strcmp(((const struct res *)p1)->cat,
			((const struct res *)p2)->cat);

	return(0 == rc ? sort_title(p1, p2) : rc);
@


1.1
log
@1) Import the future apropos(1) replacement written by kristaps@@.
2) Link both that one and mandocdb(8) into the mandoc(1) binary.
3) Install a /usr/bin/mandocdb hardlink and the mandocdb(8) manual.

Do not replace /usr/bin/apropos by a hardlink yet because it is
not ready for production, and ports integration is still missing.
Development will be done in the tree, even the user interfaces
are still subject to change at this point.

Both jmc@@ and deraadt@@ agree with getting this in.
@
text
@d1 1
a1 1
/*	$Id: apropos.c,v 1.18 2011/07/12 15:57:41 kristaps Exp $ */
d35 1
a35 1
#define	MAXRESULTS	 100
d37 15
a51 13
#define TYPE_NAME	0x01
#define TYPE_FUNCTION	0x02
#define TYPE_UTILITY	0x04
#define TYPE_INCLUDES	0x08
#define TYPE_VARIABLE	0x10
#define TYPE_STANDARD	0x20
#define TYPE_AUTHOR	0x40
#define TYPE_CONFIG	0x80
#define TYPE_DESC	0x100
#define TYPE_XREF	0x200
#define TYPE_PATH	0x400
#define	TYPE_ENV	0x800
#define	TYPE_ERR	0x1000
d76 1
a76 1
	const char	*name;
d80 6
a85 6
	char		*file;
	char		*cat;
	char		*title;
	char		*arch;
	char		*desc;
	recno_t		 rec;
d97 8
a111 2
	void		(*err)(const char *);
	void		(*errx)(const char *, ...);
a140 1
static	void	 error(const char *, ...);
d143 2
a144 6
static	void	 state_destroy(struct state *);
static	int	 state_getrecord(struct state *, recno_t, struct rec *);
static	int	 state_init(struct state *, 
			const char *, const char *,
			void (*err)(const char *),
			void (*errx)(const char *, ...));
d146 1
a146 1
static	void	 state_search(struct state *, 
a147 1

d150 1
a150 1
static	const char	 *progname;
d155 2
a156 1
	int		 ch, i;
d165 1
d170 1
d208 1
a208 1
			error("%s: Bad sort\n", optarg);
d226 1
a226 1
			error("%s: Bad type\n", v);
d238 1
a238 1
		return(EXIT_FAILURE);
d245 14
a258 3
	if ( ! state_init(&state, dbf, idxf, perror, error)) {
		state_destroy(&state);
		return(EXIT_FAILURE);
d261 15
a275 2
	state_search(&state, &opts, q);
	state_destroy(&state);
d277 1
a277 1
	return(EXIT_SUCCESS);
d280 1
a280 1
static void
d283 1
a283 1
	int		 i, len, ch, rflags, dflag;
d290 1
a290 1
	struct res	 res[MAXRESULTS];
d296 3
a301 1
	ch = 0;
d304 5
d311 1
a311 1
		rflags = REG_EXTENDED | REG_NOSUB | 
d314 3
a316 3
		if (0 != regcomp(&reg, q, rflags)) {
			error("%s: Bad pattern\n", q);
			return;
d332 1
a332 4
	if (NULL == (mc = mchars_alloc())) {
		perror(NULL);
		exit(EXIT_FAILURE);
	}
d341 1
a341 4
	while (len < MAXRESULTS) {
		if ((ch = (*p->db->seq)(p->db, &key, &val, dflag)))
			break;

d352 2
a353 2
			error("%s: Corrupt database\n", p->dbf);
			exit(EXIT_FAILURE);
d390 1
a390 1
			exit(EXIT_FAILURE);
d399 4
a402 1
		/* FIXME: this needs to be changed.  Ugh.  Linear. */
d404 6
a409 2
		for (i = 0; i < len; i++)
			if (res[i].rec == record.rec)
d412 1
a412 1
		if (i < len)
d415 3
d430 1
d438 9
a449 1
send:
d452 1
a452 1
		exit(EXIT_FAILURE);
d454 2
d457 1
a457 2
	switch (opts->sort) {
	case (SORT_CAT):
d459 1
a459 2
		break;
	default:
a460 2
		break;
	}
d463 2
a464 1

d474 1
d480 2
d495 1
a495 4
	if (NULL == (*buf = realloc(*buf, *bufsz))) {
		perror(NULL);
		exit(EXIT_FAILURE);
	}
a585 10
error(const char *fmt, ...)
{
	va_list		 ap;

	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);
}

static void
a611 42
state_init(struct state *p, 
		const char *dbf, const char *idxf,
		void (*err)(const char *),
		void (*errx)(const char *, ...))
{
	BTREEINFO	 info;

	memset(p, 0, sizeof(struct state));
	memset(&info, 0, sizeof(BTREEINFO));

	info.flags = R_DUP;

	p->dbf = dbf;
	p->idxf = idxf;
	p->err = err;

	p->db = dbopen(p->dbf, O_RDONLY, 0, DB_BTREE, &info);
	if (NULL == p->db) {
		(*err)(p->dbf);
		return(0);
	}

	p->idx = dbopen(p->idxf, O_RDONLY, 0, DB_RECNO, NULL);
	if (NULL == p->idx) {
		(*err)(p->idxf);
		return(0);
	}

	return(1);
}

static void
state_destroy(struct state *p)
{

	if (p->db)
		(*p->db->close)(p->db);
	if (p->idx)
		(*p->idx->close)(p->idx);
}

static int
d623 1
a623 4
		(*p->err)(p->idxf);
		return(0);
	} else if (rc > 0) {
		(*p->errx)("%s: Corrupt index\n", p->idxf);
d625 2
a626 1
	}
d629 2
a630 4
	if ((sz = strlen(rp->file) + 1) >= val.size) {
		(*p->errx)("%s: Corrupt index\n", p->idxf);
		return(0);
	}
d633 2
a634 4
	if ((sz += strlen(rp->cat) + 1) >= val.size) {
		(*p->errx)("%s: Corrupt index\n", p->idxf);
		return(0);
	}
d637 2
a638 4
	if ((sz += strlen(rp->title) + 1) >= val.size) {
		(*p->errx)("%s: Corrupt index\n", p->idxf);
		return(0);
	}
d641 2
a642 4
	if ((sz += strlen(rp->arch) + 1) >= val.size) {
		(*p->errx)("%s: Corrupt index\n", p->idxf);
		return(0);
	}
d647 3
@

