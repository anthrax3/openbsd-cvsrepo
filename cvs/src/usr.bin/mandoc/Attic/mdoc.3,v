head	1.18;
access;
symbols
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@.\" @;


1.18
date	2011.04.24.16.22.02;	author schwarze;	state dead;
branches;
next	1.17;

1.17
date	2011.03.20.23.36.42;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2011.01.09.13.16.48;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2011.01.04.22.28.17;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2010.12.22.00.33.25;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.23.17.11.31;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.20.00.53.35;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.13.01.09.13;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.29.17.10.29;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.27.21.54.42;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.06.20.30.08;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.26.02.55.16;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.18.02.11.26;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.20.10.15.04;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.09.17.20.17;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.08.00.20.13;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.14.23.00.57;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.20.30.40;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Merge version 1.11.1:
Again lots of cleanup and maintenance work by kristaps@@.
- simplify error reporting: less function pointers, more mandoc_[v]msg
- main: split document parsing out of main.c into read.c
- roff, mdoc, man: improved recognition of control characters
- roff: better handling of if/else stack overflows
- roff: add some predefined strings for backward compatibility
- mdoc, man: empty sections are not errors
- mdoc: move delimiter handling to libmdoc
- some header restructuring and some minor features and fixes
This merge causes two minor regressions
that i will fix in separate commits right afterwards.
@
text
@.\"	$Id: mdoc.3,v 1.17 2011/03/20 23:36:42 schwarze Exp $
.\"
.\" Copyright (c) 2009, 2010, 2011 Kristaps Dzonsons <kristaps@@bsd.lv>
.\" Copyright (c) 2010 Ingo Schwarze <schwarze@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: March 20 2011 $
.Dt MDOC 3
.Os
.Sh NAME
.Nm mdoc ,
.Nm mdoc_addeqn ,
.Nm mdoc_addspan ,
.Nm mdoc_alloc ,
.Nm mdoc_endparse ,
.Nm mdoc_free ,
.Nm mdoc_meta ,
.Nm mdoc_node ,
.Nm mdoc_parseln ,
.Nm mdoc_reset
.Nd mdoc macro compiler library
.Sh SYNOPSIS
.In mandoc.h
.In mdoc.h
.Vt extern const char * const * mdoc_macronames;
.Vt extern const char * const * mdoc_argnames;
.Ft int
.Fo mdoc_addeqn
.Fa "struct mdoc *mdoc"
.Fa "const struct eqn *eqn"
.Fc
.Ft int
.Fo mdoc_addspan 
.Fa "struct mdoc *mdoc"
.Fa "const struct tbl_span *span"
.Fc
.Ft "struct mdoc *"
.Fo mdoc_alloc
.Fa "struct regset *regs"
.Fa "void *data"
.Fa "mandocmsg msgs"
.Fc
.Ft int
.Fn mdoc_endparse "struct mdoc *mdoc"
.Ft void
.Fn mdoc_free "struct mdoc *mdoc"
.Ft "const struct mdoc_meta *"
.Fn mdoc_meta "const struct mdoc *mdoc"
.Ft "const struct mdoc_node *"
.Fn mdoc_node "const struct mdoc *mdoc"
.Ft int
.Fo mdoc_parseln
.Fa "struct mdoc *mdoc"
.Fa "int line"
.Fa "char *buf"
.Fc
.Ft int
.Fn mdoc_reset "struct mdoc *mdoc"
.Sh DESCRIPTION
The
.Nm mdoc
library parses lines of
.Xr mdoc 7
input
into an abstract syntax tree (AST).
.Pp
In general, applications initiate a parsing sequence with
.Fn mdoc_alloc ,
parse each line in a document with
.Fn mdoc_parseln ,
close the parsing session with
.Fn mdoc_endparse ,
operate over the syntax tree returned by
.Fn mdoc_node
and
.Fn mdoc_meta ,
then free all allocated memory with
.Fn mdoc_free .
The
.Fn mdoc_reset
function may be used in order to reset the parser for another input
sequence.
.Ss Types
.Bl -ohang
.It Vt struct mdoc
An opaque type.
Its values are only used privately within the library.
.It Vt struct mdoc_node
A parsed node.
See
.Sx Abstract Syntax Tree
for details.
.El
.Ss Functions
If
.Fn mdoc_addeqn ,
.Fn mdoc_addspan ,
.Fn mdoc_parseln ,
or
.Fn mdoc_endparse
return 0, calls to any function but
.Fn mdoc_reset
or
.Fn mdoc_free
will raise an assertion.
.Bl -ohang
.It Fn mdoc_addeqn
Add an equation to the parsing stream.
Returns 0 on failure, 1 on success.
.It Fn mdoc_addspan
Add a table span to the parsing stream.
Returns 0 on failure, 1 on success.
.It Fn mdoc_alloc
Allocates a parsing structure.
The
.Fa data
pointer is passed to
.Fa msgs .
Always returns a valid pointer.
The pointer must be freed with
.Fn mdoc_free .
.It Fn mdoc_reset
Reset the parser for another parse routine.
After its use,
.Fn mdoc_parseln
behaves as if invoked for the first time.
If it returns 0, memory could not be allocated.
.It Fn mdoc_free
Free all resources of a parser.
The pointer is no longer valid after invocation.
.It Fn mdoc_parseln
Parse a nil-terminated line of input.
This line should not contain the trailing newline.
Returns 0 on failure, 1 on success.
The input buffer
.Fa buf
is modified by this function.
.It Fn mdoc_endparse
Signals that the parse is complete.
Returns 0 on failure, 1 on success.
.It Fn mdoc_node
Returns the first node of the parse.
.It Fn mdoc_meta
Returns the document's parsed meta-data.
.El
.Ss Variables
.Bl -ohang
.It Va mdoc_macronames
An array of string-ified token names.
.It Va mdoc_argnames
An array of string-ified token argument names.
.El
.Ss Abstract Syntax Tree
The
.Nm
functions produce an abstract syntax tree (AST) describing input in a
regular form.
It may be reviewed at any time with
.Fn mdoc_nodes ;
however, if called before
.Fn mdoc_endparse ,
or after
.Fn mdoc_endparse
or
.Fn mdoc_parseln
fail, it may be incomplete.
.Pp
This AST is governed by the ontological
rules dictated in
.Xr mdoc 7
and derives its terminology accordingly.
.Qq In-line
elements described in
.Xr mdoc 7
are described simply as
.Qq elements .
.Pp
The AST is composed of
.Vt struct mdoc_node
nodes with block, head, body, element, root and text types as declared
by the
.Va type
field.
Each node also provides its parse point (the
.Va line ,
.Va sec ,
and
.Va pos
fields), its position in the tree (the
.Va parent ,
.Va child ,
.Va nchild ,
.Va next
and
.Va prev
fields) and some type-specific data, in particular, for nodes generated
from macros, the generating macro in the
.Va tok
field.
.Pp
The tree itself is arranged according to the following normal form,
where capitalised non-terminals represent nodes.
.Pp
.Bl -tag -width "ELEMENTXX" -compact
.It ROOT
\(<- mnode+
.It mnode
\(<- BLOCK | ELEMENT | TEXT
.It BLOCK
\(<- HEAD [TEXT] (BODY [TEXT])+ [TAIL [TEXT]]
.It ELEMENT
\(<- TEXT*
.It HEAD
\(<- mnode*
.It BODY
\(<- mnode* [ENDBODY mnode*]
.It TAIL
\(<- mnode*
.It TEXT
\(<- [[:printable:],0x1e]*
.El
.Pp
Of note are the TEXT nodes following the HEAD, BODY and TAIL nodes of
the BLOCK production: these refer to punctuation marks.
Furthermore, although a TEXT node will generally have a non-zero-length
string, in the specific case of
.Sq \&.Bd \-literal ,
an empty line will produce a zero-length string.
Multiple body parts are only found in invocations of
.Sq \&Bl \-column ,
where a new body introduces a new phrase.
.Ss Badly-nested Blocks
The ENDBODY node is available to end the formatting associated
with a given block before the physical end of that block.
It has a non-null
.Va end
field, is of the BODY
.Va type ,
has the same
.Va tok
as the BLOCK it is ending, and has a
.Va pending
field pointing to that BLOCK's BODY node.
It is an indirect child of that BODY node
and has no children of its own.
.Pp
An ENDBODY node is generated when a block ends while one of its child
blocks is still open, like in the following example:
.Bd -literal -offset indent
\&.Ao ao
\&.Bo bo ac
\&.Ac bc
\&.Bc end
.Ed
.Pp
This example results in the following block structure:
.Bd -literal -offset indent
BLOCK Ao
	HEAD Ao
	BODY Ao
		TEXT ao
		BLOCK Bo, pending -> Ao
			HEAD Bo
			BODY Bo
				TEXT bo
				TEXT ac
				ENDBODY Ao, pending -> Ao
				TEXT bc
TEXT end
.Ed
.Pp
Here, the formatting of the
.Sq \&Ao
block extends from TEXT ao to TEXT ac,
while the formatting of the
.Sq \&Bo
block extends from TEXT bo to TEXT bc.
It renders as follows in
.Fl T Ns Cm ascii
mode:
.Pp
.Dl <ao [bo ac> bc] end
.Pp
Support for badly-nested blocks is only provided for backward
compatibility with some older
.Xr mdoc 7
implementations.
Using badly-nested blocks is
.Em strongly discouraged :
the
.Fl T Ns Cm html
and
.Fl T Ns Cm xhtml
front-ends are unable to render them in any meaningful way.
Furthermore, behaviour when encountering badly-nested blocks is not
consistent across troff implementations, especially when using  multiple
levels of badly-nested blocks.
.Sh EXAMPLES
The following example reads lines from stdin and parses them, operating
on the finished parse tree with
.Fn parsed .
This example does not error-check nor free memory upon failure.
.Bd -literal -offset indent
struct regset regs;
struct mdoc *mdoc;
const struct mdoc_node *node;
char *buf;
size_t len;
int line;

bzero(&regs, sizeof(struct regset));
line = 1;
mdoc = mdoc_alloc(&regs, NULL, NULL);
buf = NULL;
alloc_len = 0;

while ((len = getline(&buf, &alloc_len, stdin)) >= 0) {
    if (len && buflen[len - 1] = '\en')
        buf[len - 1] = '\e0';
    if ( ! mdoc_parseln(mdoc, line, buf))
        errx(1, "mdoc_parseln");
    line++;
}

if ( ! mdoc_endparse(mdoc))
    errx(1, "mdoc_endparse");
if (NULL == (node = mdoc_node(mdoc)))
    errx(1, "mdoc_node");

parsed(mdoc, node);
mdoc_free(mdoc);
.Ed
.Pp
To compile this, execute
.Pp
.Dl % cc main.c libmdoc.a libmandoc.a
.Pp
where
.Pa main.c
is the example file.
.Sh SEE ALSO
.Xr mandoc 1 ,
.Xr mdoc 7
.Sh AUTHORS
The
.Nm
library was written by
.An Kristaps Dzonsons Aq kristaps@@bsd.lv .
@


1.17
log
@Import the foundation for eqn(7) support.
Written by kristaps@@.

For now, i'm adding one line to each of the four frontends
to just pass the input text through to the output,
not yet interpreting any of then eqn keywords.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.16 2011/01/09 13:16:48 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 9 2011 $
@


1.16
log
@Make sure coding errors cannot make us miss fatal parsing errors
by assert(3)ing valid parser state in the main parsing functions;
from kristaps@@.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.15 2011/01/04 22:28:17 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: January 4 2011 $
d23 2
d39 5
d107 1
d118 3
@


1.15
log
@Merge kristaps@@' cleaner tbl integration, removing mine;
there are still a few bugs, but fixing these will be easier in tree.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.14 2010/12/22 00:33:25 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: December 22 2010 $
d99 10
d119 2
a120 2
Returns NULL on failure.
If non-NULL, the pointer must be freed with
a139 5
Note that if
.Fn mdoc_endparse
is called subsequent to
.Fn mdoc_node ,
the resulting tree is incomplete.
a142 5
Note that if
.Fn mdoc_parseln
or
.Fn mdoc_endparse
return 0, the tree will be incomplete.
a144 5
If this information has not yet been supplied or
.Fn mdoc_parseln
or
.Fn mdoc_endparse
return 0, the data will be incomplete.
@


1.14
log
@More small -Thtml improvements by kristaps@@,
in particular, use <B>, <I> and <U> where appropriate.
Provide relative widths for header and footer lines.
Manuals: More concise short descriptions of output modes.
Correct a few places still talking about CSS2 to say CSS1.
Code examples should use .Dl, not .D1.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.13 2010/10/23 17:11:31 schwarze Exp $
d3 1
a3 1
.\" Copyright (c) 2009, 2010 Kristaps Dzonsons <kristaps@@bsd.lv>
d18 1
a18 1
.Dd $Mdocdate: October 23 2010 $
d36 5
d100 3
@


1.13
log
@sync library manuals to bsd.lv
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.12 2010/08/20 00:53:35 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: August 20 2010 $
d333 1
a333 1
.D1 % cc main.c libmdoc.a libmandoc.a
@


1.12
log
@Implement a simple, consistent user interface for error handling.
We now have sufficient practical experience to know what we want,
so this is intended to be final:
- provide -Wlevel (warning, error or fatal) to select what you care about
- provide -Wstop to stop after parsing a file with warnings you care about
- provide consistent exit status codes for those warnings you care about
- fully document what warnings, errors and fatal errors mean
- remove all other cruft from the user interface, less is more:
- remove all -f knobs along with the whole -f option
- remove the old -Werror because calling warnings "fatal" is silly
- always finish parsing each file, unless fatal errors prevent that
This commit also includes a couple of related simplifications behind
the scenes regarding error handling.
Feedback and OK  kristaps@@;  Joerg Sonnenberger (NetBSD) and
Sascha Wildner (DragonFly BSD) agree with the general direction.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.11 2010/07/13 01:09:13 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: July 13 2010 $
a81 13
See the
.Sx EXAMPLES
section for a simple example.
.Pp
This section further defines the
.Sx Types ,
.Sx Functions
and
.Sx Variables
available to programmers.
Following that, the
.Sx Abstract Syntax Tree
section documents the output tree.
a82 5
Both functions (see
.Sx Functions )
and variables (see
.Sx Variables )
may use the following types:
d85 1
a85 2
An opaque type defined in
.Pa mdoc.c .
a88 2
Defined in
.Pa mdoc.h .
a91 3
.It Vt mandocmsg
A function callback type defined in
.Pa mandoc.h .
a93 1
Function descriptions follow:
a143 1
The following variables are also defined:
d331 5
a335 1
Please see
d337 1
a337 1
in the source archive for a rigorous reference.
@


1.11
log
@Merge release 1.10.4 (all code by kristaps@@), providing four new features:
1) Proper .Bk support: allow output line breaks at input line breaks,
but keep input lines together in the output, finally fixing
synopses like aucat(1), mail(1) and tmux(1).
2) Mostly finished -Tps (PostScript) output.
3) Implement -Thtml output for .Nm blocks and .Bk -words.
4) Allow iterative interpolation of user-defined roff(7) strings.
Also contains some minor bugfixes and some performance improvements.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.10 2010/06/29 17:10:29 schwarze Exp $
d18 1
a18 1
.Dd $Mdocdate: June 29 2010 $
a39 1
.Fa "int pflags"
a125 4
The
.Fa pflags
arguments are defined in
.Pa mdoc.h .
d336 1
a336 1
mdoc = mdoc_alloc(&regs, NULL, 0, NULL);
@


1.10
log
@Support for badly nested blocks, written around the time of
the Rostock mandoc hackathon and tested and polished since,
supporting constructs like:

.Ao Bo    Ac    Bc        (exp breaking exp)
.Aq Bo    eol   Bc        (imp breaking exp)
.Ao Bq    Ac    eol       (exp breaking imp)
.Ao Bo So Bc    Ac  Sc    (double break, inner before outer)
.Ao Bo So Ac    Bc  Sc    (double break, outer before inner)
.Ao Bo    Ac So Bc  Sc    (broken breaker)
.Ao Bo So Bc Do Ac  Sc Dc (broken double breaker)

There are still two known issues which are tricky:

1) Breaking two identical explicit blocks (Ao Bo Bo Ac or Aq Bo Bo eol)
fails outright, triggering a bogus syntax error.
2) Breaking a block by two identical explicit blocks (Ao Ao Bo Ac Ac Bc
or Ao Ao Bq Ac Ac eol) still has a minor rendering error left:
"<ao1 <ao2 [bo ac2> ac1> bc]>" should not have the final ">".

We can fix these later in the tree, let's not grow this diff too large.

"get it in" kristaps@@
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.9 2010/06/27 21:54:42 schwarze Exp $
d3 2
a4 1
.\" Copyright (c) 2009-2010 Kristaps Dzonsons <kristaps@@bsd.lv>
d18 1
a18 1
.Dd $Mdocdate: June 27 2010 $
a32 1
.In regs.h
d260 4
a263 4
.Ss Badly nested blocks
A special kind of node is available to end the formatting
associated with a given block before the physical end of that block.
Such an ENDBODY node has a non-null
d300 7
a306 3
Here, the formatting of the Ao block extends from TEXT ao to TEXT ac,
while the formatting of the Bo block extends from TEXT bo to TEXT bc,
rendering like this in
d309 1
d311 2
a312 1
Support for badly nested blocks is only provided for backward
d316 10
a325 9
Using them in new code is stronly discouraged:
Some frontends, in particular
.Fl T Ns Cm html ,
are unable to render them in any meaningful way,
many other
.Xr mdoc 7
implementations do not support them, and even for those that do,
the behaviour is not well-defined, in particular when using multiple
levels of badly nested blocks.
@


1.9
log
@Full .nr nS support, unbreaking the kernel manuals.

Kristaps coded this from scratch after reading my .nr patch;
it is simpler and more powerful.

Registers live in struct regset in regs.h, struct man and struct mdoc
contain pointers to it.  The nS register is cleared when parsing .Sh.
Frontends respect the MDOC_SYNPRETTY flag set in mdoc node_alloc.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.8 2010/06/06 20:30:08 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: June 6 2010 $
d220 1
d224 4
a227 1
fields) and some type-specific data.
d242 1
a242 1
\(<- mnode+
d244 1
a244 1
\(<- mnode+
d246 1
a246 1
\(<- mnode+
d260 59
@


1.8
log
@Merge bsd.lv version 1.10.1 (to be released soon).

The main step forward is that this now has *much* better .Bl -column
support, now supporting many manuals that previously errored out
without producing any output.

Other fixes include:
* do not die from multiple list types, use the first and warn
* in .Bl without a type, default to -item
* various tweaks to .Dt
* fix .In, .Fd, .Ft, .Fn and .Fo formatting
* some documentation fixes and additions
* and fix a couple of bugs reported by Ulrich Spoerlein:
* better support for roff block-end "\}" without a preceding dot
* .In must not break the line outside SYNOPSIS
* spelling in some error messages

While merging, fix one regression in .In spacing
that needs to go to bsd.lv, too.
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.7 2010/05/26 02:55:16 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: May 26 2010 $
d32 1
d37 6
a42 1
.Fn mdoc_alloc "void *data" "int pflags" "mandocmsg msgs"
d52 5
a56 1
.Fn mdoc_parseln "struct mdoc *mdoc" "int line" "char *buf"
d262 1
d269 1
d271 1
a271 1
mdoc = mdoc_alloc(NULL, 0, NULL);
@


1.7
log
@sync manuals
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.40 2010/05/25 22:16:59 kristaps Exp $
d17 1
a17 1
.Dd $Mdocdate: May 25 2010 $
d224 1
a224 3
\(<- (HEAD [TEXT])+ [BODY [TEXT]] [TAIL [TEXT]]
.It BLOCK
\(<- BODY [TEXT] [TAIL [TEXT]]
d238 1
a238 2
the BLOCK production.
These refer to punctuation marks.
d243 3
@


1.6
log
@sync to release 1.9.15:
 * corrected .Vt handling (spotted by Joerg Sonnenberger)
 * corrected .Xr argument handling (based on my patch)
 * removed \\ escape sequence (because it is for low-level roff only)
 * warn about trailing whitespace (suggested by jmc@@)
 * -Txhtml support
 * and some general cleanup and doc improvements
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.5 2009/10/20 10:15:04 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: October 20 2009 $
a19 1
.\" SECTION
d21 1
a22 1
.Nm mdoc_parseln ,
d24 2
d27 1
a27 2
.Nm mdoc_meta ,
.Nm mdoc_free ,
a29 1
.\" SECTION
d31 1
d36 1
a36 1
.Fn mdoc_alloc "void *data" "int pflags" "const struct mdoc_cb *cb"
d38 1
a38 1
.Fn mdoc_reset "struct mdoc *mdoc"
d41 4
a46 4
.Ft "const struct mdoc_node *"
.Fn mdoc_node "const struct mdoc *mdoc"
.Ft "const struct mdoc_meta *"
.Fn mdoc_meta "const struct mdoc *mdoc"
d48 1
a48 2
.Fn mdoc_endparse "struct mdoc *mdoc"
.\" SECTION
d54 2
a55 4
input (and
.Em only
mdoc) into an abstract syntax tree (AST).
.\" PARAGRAPH
d72 2
a73 1
sequence.  See the
d75 1
a75 2
section for a full example.
.\" PARAGRAPH
d82 2
a83 1
available to programmers.  Following that, the
a85 1
.\" SUBSECTION
a92 1
.\" LIST-ITEM
a96 5
.\" LIST-ITEM
.It Vt struct mdoc_cb
A set of message callbacks defined in
.Pa mdoc.h .
.\" LIST-ITEM
d98 2
a99 1
A parsed node.  Defined in
d104 3
a107 1
.\" SUBSECTION
a110 1
.\" LIST-ITEM
d112 2
a113 1
Allocates a parsing structure.  The
d115 2
a116 3
pointer is passed to callbacks in
.Fa cb ,
which are documented further in the header file.
d121 2
a122 1
Returns NULL on failure.  If non-NULL, the pointer must be freed with
a123 1
.\" LIST-ITEM
d125 2
a126 1
Reset the parser for another parse routine.  After its use,
d128 2
a129 3
behaves as if invoked for the first time.  If it returns 0, memory could
not be allocated.
.\" LIST-ITEM
d131 2
a132 3
Free all resources of a parser.  The pointer is no longer valid after
invocation.
.\" LIST-ITEM
d134 4
a137 2
Parse a nil-terminated line of input.  This line should not contain the
trailing newline.  Returns 0 on failure, 1 on success.  The input buffer
a139 1
.\" LIST-ITEM
d141 2
a142 1
Signals that the parse is complete.  Note that if
d146 2
a147 2
the resulting tree is incomplete.  Returns 0 on failure, 1 on success.
.\" LIST-ITEM
d149 2
a150 1
Returns the first node of the parse.  Note that if
d156 2
a157 2
Returns the document's parsed meta-data.  If this information has not
yet been supplied or
a162 1
.\" SUBSECTION
a165 1
.\" LIST-ITEM
a167 1
.\" LIST-ITEM
a170 1
.\" SUBSECTION
d175 2
a176 1
regular form.  It may be reviewed at any time with
a184 1
.\" PARAGRAPH
a194 1
.\" PARAGRAPH
d201 2
a202 1
field.  Each node also provides its parse point (the
a213 1
.\" PARAGRAPH
a218 1
.\" LIST-ITEM
d236 1
a236 1
\(<- [[:alpha:]]*
a237 1
.\" PARAGRAPH
d240 4
a243 3
the BLOCK production.  These refer to punctuation marks.  Furthermore,
although a TEXT node will generally have a non-zero-length string, in
the specific case of
a245 1
.\" SECTION
d279 4
a282 1
.\" SECTION
a285 1
.\" SECTION
d289 1
a289 1
utility was written by
a290 36
.\" SECTION
.Sh CAVEATS
.Bl -dash -compact
.\" LIST-ITEM
.It
The
.Sq \&.Xc
and
.Sq \&.Xo
macros aren't handled when used to span lines for the
.Sq \&.It
macro.
.\" LIST-ITEM
.It
The
.Sq \&.Bsx
macro family doesn't yet understand version arguments.
.\" LIST-ITEM
.It
If not given a value, the \-offset argument to
.Sq \&.Bd
and
.Sq \&.Bl
should be the width of
.Qq <string> ;
instead, a value of
.Li 10n
is provided.
.\" LIST-ITEM
.It
Columns widths in
.Sq \&.Bl \-column
should default to width
.Qq <stringx>
if not included.
.El
@


1.5
log
@sync to 1.9.7: use .In instead of .Fd #include
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.4 2009/08/09 17:20:17 schwarze Exp $
d3 1
a3 1
.\" Copyright (c) 2009 Kristaps Dzonsons <kristaps@@kth.se>
d17 1
a17 1
.Dd $Mdocdate: August 9 2009 $
d95 1
a95 1
.Bl -ohang -offset "XXXX"
d116 1
a116 1
.Bl -ohang -offset "XXXX"
d171 1
a171 1
.Bl -ohang -offset "XXXX"
d228 1
a228 1
.Bl -tag -width "ELEMENTXX" -compact -offset "XXXX"
d262 2
a263 5
Note that, if the last line of the file isn't newline-terminated, this
will truncate the file's last character (see
.Xr fgetln 3 ) .
Further, this example does not error-check nor free memory upon failure.
.Bd -literal -offset "XXXX"
d272 2
d275 6
a280 5
while ((buf = fgetln(fp, &len))) {
	buf[len - 1] = '\\0';
	if ( ! mdoc_parseln(mdoc, line, buf))
		errx(1, "mdoc_parseln");
	line++;
d284 1
a284 1
	errx(1, "mdoc_endparse");
d286 1
a286 1
	errx(1, "mdoc_node");
d300 1
a300 1
.An Kristaps Dzonsons Aq kristaps@@kth.se .
@


1.4
log
@sync to 1.8.2: remove trailing whitespace
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.3 2009/07/08 00:20:13 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate$
d32 1
a32 1
.Fd #include <mdoc.h>
@


1.3
log
@sync to 1.7.23: fixed const-nesses
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.2 2009/06/14 23:00:57 schwarze Exp $
d16 2
a17 2
.\" 
.Dd $Mdocdate: June 14 2009 $
d53 1
a53 1
library parses lines of 
d62 1
a62 1
parse each line in a document with 
d67 1
a67 1
.Fn mdoc_node 
d80 1
a80 1
This section further defines the 
d82 1
a82 1
.Sx Functions 
d86 1
a86 1
.Sx Abstract Syntax Tree 
d109 1
a109 1
See 
d122 2
a123 2
.Fa cb , 
which are documented further in the header file.  
d132 1
a132 1
Reset the parser for another parse routine.  After its use, 
d143 1
a143 1
trailing newline.  Returns 0 on failure, 1 on success.  The input buffer 
d148 1
a148 1
Signals that the parse is complete.  Note that if 
d155 1
a155 1
Returns the first node of the parse.  Note that if 
d162 1
a162 1
yet been supplied or 
d181 1
a181 1
The 
d189 1
a189 1
.Fn mdoc_endparse 
d192 1
a192 1
fail, it may be incomplete.  
d198 1
a198 1
and derives its terminology accordingly.  
d202 1
a202 1
are described simply as 
d206 1
a206 1
The AST is composed of 
d219 1
a219 1
.Va next 
d221 1
a221 1
.Va prev 
d254 1
a254 1
the specific case of 
d260 1
a260 1
on the finished parse tree with 
d263 1
a263 1
will truncate the file's last character (see 
d299 1
a299 1
utility was written by 
d306 1
a306 1
The 
d312 1
a312 1
macro. 
d315 1
a315 1
The 
d324 1
a324 1
should be the width of 
d326 1
a326 1
instead, a value of 
a335 8
.\" LIST-ITEM
.It
List-width suffix
.Qq m
isn't handled.
.\" LIST-ITEM
.It
Contents of the SYNOPSIS section aren't checked.
@


1.2
log
@sync to 1.7.16: comments, whitespace and spelling fixes; no functional change
@
text
@d1 1
a1 1
.\"	$Id: mdoc.3,v 1.30 2009/06/11 07:26:35 kristaps Exp $
d17 1
a17 1
.Dd $Mdocdate$
d44 1
a44 1
.Fn mdoc_node "struct mdoc *mdoc"
d46 1
a46 1
.Fn mdoc_meta "struct mdoc *mdoc"
d268 1
a268 1
struct mdoc_node *node;
@


1.1
log
@Initial check-in of mandoc for formatting manuals. ok deraadt@@
@
text
@d1 1
a1 1
.\" $Id: mdoc.3,v 1.26 2009/03/31 13:50:19 kristaps Exp $
d3 1
a3 1
.\" Copyright (c) 2009 Kristaps Dzonsons <kristaps@@openbsd.org>
d6 2
a7 3
.\" purpose with or without fee is hereby granted, provided that the
.\" above copyright notice and this permission notice appear in all
.\" copies.
d9 7
a15 8
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
.\" AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
.\" DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
.\" PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
.\" TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
.Dt mdoc 3
d300 1
a300 1
.An Kristaps Dzonsons Aq kristaps@@openbsd.org .
@

