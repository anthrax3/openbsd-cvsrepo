head	1.24;
access;
symbols
	OPENBSD_6_1:1.22.0.6
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.12
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.8
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.6
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.4
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.24
date	2017.04.29.12.43.55;	author schwarze;	state dead;
branches;
next	1.23;
commitid	7BLUwozNEzUO8xfK;

1.23
date	2017.04.24.23.06.09;	author schwarze;	state Exp;
branches;
next	1.22;
commitid	2CfzvK3gmiJH7vY0;

1.22
date	2016.07.15.18.02.32;	author schwarze;	state Exp;
branches;
next	1.21;
commitid	NgDdzKtKRT5DJZ6U;

1.21
date	2015.10.06.18.30.44;	author schwarze;	state Exp;
branches;
next	1.20;
commitid	hxQV8O1pNUaef4ir;

1.20
date	2015.04.19.13.59.37;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	aS3h5dIgZk0f7675;

1.19
date	2015.04.18.17.01.28;	author schwarze;	state Exp;
branches;
next	1.18;
commitid	GslLZJxifCkaUipL;

1.18
date	2015.04.02.22.06.17;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	Rfx1oTaH3hZ7Zcyf;

1.17
date	2015.04.02.21.03.18;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	lmErjWY2O9ooA6RY;

1.16
date	2014.11.28.19.25.03;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	1m1y3OocNVYDnyZE;

1.15
date	2014.04.20.16.44.44;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2014.03.21.22.17.01;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.18.15.54.48;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.24.16.22.02;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.31.23.42.04;	author schwarze;	state Exp;
branches;
next	1.10;

1.10
date	2010.05.23.22.45.00;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.14.01.54.37;	author schwarze;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.02.12.39.47;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.02.00.38.59;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.21.21.11.37;	author schwarze;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.09.18.01.15;	author schwarze;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.01.08.13;	author schwarze;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.18.23.34.53;	author schwarze;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.14.23.00.57;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.20.30.40;	author kristaps;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Parser unification: use nice ohashes for all three request and macro tables;
no functional change, minus two source files, minus 200 lines of code.
@
text
@/*	$OpenBSD: mdoc_hash.c,v 1.23 2017/04/24 23:06:09 schwarze Exp $ */
/*
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@bsd.lv>
 * Copyright (c) 2015, 2017 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/types.h>

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "mandoc.h"
#include "roff.h"
#include "mdoc.h"
#include "libmandoc.h"
#include "libmdoc.h"

static	unsigned char	 table[27 * 12];


void
mdoc_hash_init(void)
{
	int		 i, j, major;
	const char	*p;

	if (*table != '\0')
		return;

	memset(table, UCHAR_MAX, sizeof(table));

	for (i = 0; i < (int)(MDOC_MAX - MDOC_Dd); i++) {
		p = roff_name[MDOC_Dd + i];

		if (isalpha((unsigned char)p[1]))
			major = 12 * (tolower((unsigned char)p[1]) - 97);
		else
			major = 12 * 26;

		for (j = 0; j < 12; j++)
			if (UCHAR_MAX == table[major + j]) {
				table[major + j] = (unsigned char)i;
				break;
			}

		assert(j < 12);
	}
}

enum roff_tok
mdoc_hash_find(const char *p)
{
	int		  major, i, j;

	if (0 == p[0])
		return TOKEN_NONE;
	if ( ! isalpha((unsigned char)p[0]) && '%' != p[0])
		return TOKEN_NONE;

	if (isalpha((unsigned char)p[1]))
		major = 12 * (tolower((unsigned char)p[1]) - 97);
	else if ('1' == p[1])
		major = 12 * 26;
	else
		return TOKEN_NONE;

	if (p[2] && p[3])
		return TOKEN_NONE;

	for (j = 0; j < 12; j++) {
		if (UCHAR_MAX == (i = table[major + j]))
			break;
		if (strcmp(p, roff_name[MDOC_Dd + i]) == 0)
			return MDOC_Dd + i;
	}

	return TOKEN_NONE;
}
@


1.23
log
@Continue parser unification:
* Make enum rofft an internal interface as enum roff_tok in "roff.h".
* Represent mdoc and man macros in enum roff_tok.
* Make TOKEN_NONE a proper enum value and use it throughout.
* Put the prologue macros first in the macro tables.
* Unify mdoc_macroname[] and man_macroname[] into roff_name[].
@
text
@d1 1
a1 1
/*	$OpenBSD: mdoc_hash.c,v 1.22 2016/07/15 18:02:32 schwarze Exp $ */
@


1.22
log
@add missing prototypes, no code change;
noticed by Christos Zoulas with -Wmissing-prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: mdoc_hash.c,v 1.21 2015/10/06 18:30:44 schwarze Exp $ */
d4 1
a4 1
 * Copyright (c) 2015 Ingo Schwarze <schwarze@@openbsd.org>
d47 2
a48 2
	for (i = 0; i < (int)MDOC_MAX; i++) {
		p = mdoc_macronames[i];
d65 1
a65 1
int
d88 2
a89 2
		if (0 == strcmp(p, mdoc_macronames[i]))
			return i;
@


1.21
log
@modernize style: "return" is not a function; ok cmp(1)
@
text
@d1 1
a1 1
/*	$OpenBSD: mdoc_hash.c,v 1.20 2015/04/19 13:59:37 schwarze Exp $ */
d27 1
d30 1
@


1.20
log
@Decouple the token code for "no request or macro" from the individual
high-level parsers to allow further unification of functions that
only need to recognize this code, but that don't care about different
high-level macrosets beyond that.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdoc_hash.c,v 1.19 2015/04/18 17:01:28 schwarze Exp $ */
d4 1
d69 1
a69 1
		return(TOKEN_NONE);
d71 1
a71 1
		return(TOKEN_NONE);
d78 1
a78 1
		return(TOKEN_NONE);
d81 1
a81 1
		return(TOKEN_NONE);
d87 1
a87 1
			return(i);
d90 1
a90 1
	return(TOKEN_NONE);
@


1.19
log
@Move mdoc_hash_init() and man_hash_init() to libmandoc.h
and call them from mparse_alloc() and choose_parser(),
preparing unified allocation of struct roff_man.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdoc_hash.c,v 1.18 2015/04/02 22:06:17 schwarze Exp $ */
d68 1
a68 1
		return(MDOC_MAX);
d70 1
a70 1
		return(MDOC_MAX);
d77 1
a77 1
		return(MDOC_MAX);
d80 1
a80 1
		return(MDOC_MAX);
d89 1
a89 1
	return(MDOC_MAX);
@


1.18
log
@Second step towards parser unification:
Replace struct mdoc_node and struct man_node by a unified struct roff_node.
To be able to use the tok member for both mdoc(7) and man(7) without
defining all the macros in roff.h, sacrifice a tiny bit of type safety
and make tok an int rather than an enum.
Almost mechanical, no functional change.
Written on the Eurostar from Bruxelles to London on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdoc_hash.c,v 1.17 2015/04/02 21:03:18 schwarze Exp $ */
a32 4
/*
 * XXX - this hash has global scope, so if intended for use as a library
 * with multiple callers, it will need re-invocation protection.
 */
d38 3
@


1.17
log
@First step towards parser unification:
Replace enum mdoc_type and enum man_type by a unified enum roff_type.
Almost mechanical, no functional change.
Written on the ICE train from Frankfurt to Bruxelles on the way to p2k15.
@
text
@d1 1
a1 1
/*	$OpenBSD: mdoc_hash.c,v 1.16 2014/11/28 19:25:03 schwarze Exp $ */
d63 1
a63 1
enum mdoct
d87 1
a87 1
			return((enum mdoct)i);
@


1.16
log
@Add some missing OpenBSD RCS markers
and a few missing <sys/types.h> inclusions; no code change.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d26 1
@


1.15
log
@KNF: case (FOO):  ->  case FOO, remove /* LINTED */ and /* ARGSUSED */,
remove trailing whitespace and blanks before tabs, improve some indenting;
no functional change
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.14 2014/03/21 22:17:01 schwarze Exp $ */
@


1.14
log
@The files mandoc.c and mandoc.h contained both specialised low-level
functions used for multiple languages (mdoc, man, roff), for example
mandoc_escape(), mandoc_getarg(), mandoc_eos(), and generic auxiliary
functions.  Split the auxiliaries out into their own file and header.
While here, do some #include cleanup.
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.13 2011/09/18 15:54:48 schwarze Exp $ */
d31 1
d76 1
a76 1
	else 
@


1.13
log
@sync to version 1.11.7 from kristaps@@
main new feature: support the roff(7) .tr request
plus various bugfixes and some refactoring

regressions are so minor that it's better to get this in
and fix them in the tree
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.12 2011/04/24 16:22:02 schwarze Exp $ */
a26 1
#include "mandoc.h"
@


1.12
log
@Merge version 1.11.1:
Again lots of cleanup and maintenance work by kristaps@@.
- simplify error reporting: less function pointers, more mandoc_[v]msg
- main: split document parsing out of main.c into read.c
- roff, mdoc, man: improved recognition of control characters
- roff: better handling of if/else stack overflows
- roff: add some predefined strings for backward compatibility
- mdoc, man: empty sections are not errors
- mdoc: move delimiter handling to libmdoc
- some header restructuring and some minor features and fixes
This merge causes two minor regressions
that i will fix in separate commits right afterwards.
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.11 2010/07/31 23:42:04 schwarze Exp $ */
d30 1
a30 1
static	u_char		 table[27 * 13];
d47 2
a48 2
		if (isalpha((u_char)p[1]))
			major = 13 * (tolower((u_char)p[1]) - 97);
d50 1
a50 1
			major = 13 * 26;
d52 1
a52 1
		for (j = 0; j < 13; j++)
d54 1
a54 1
				table[major + j] = (u_char)i;
d58 1
a58 1
		assert(j < 13);
d69 1
a69 1
	if ( ! isalpha((u_char)p[0]) && '%' != p[0])
d72 2
a73 2
	if (isalpha((u_char)p[1]))
		major = 13 * (tolower((u_char)p[1]) - 97);
d75 1
a75 1
		major = 13 * 26;
d82 1
a82 1
	for (j = 0; j < 13; j++) {
@


1.11
log
@Correct Copyright lines in the rarely touched files:
* add missing years (only where substantial changes were committed)
* update Kristaps' email address in the remaining places
No code changes.
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.10 2010/05/23 22:45:00 schwarze Exp $ */
d26 1
@


1.10
log
@Unified error and warning message system for all of mandoc,
featuring three message levels, as agreed during the mandoc hackathon:
* FATAL parser failure, cannot produce any output from this input file:
  eventually, we hope to convert most of these to ERRORs.
* ERROR, meaning mandoc cannot cope fully with the input syntax and will
  probably lose information or produce structurally garbled output;
  it will try to produce output anyway but exit non-zero at the end,
  which is eventually intended to make the ports infrastructure happy.
* WARNING, meaning you should clean up the input file, but output
  is probably mostly OK, so this will not cause error-exit at the end.
This commit is mostly just converting the old system to the new one; before
the classification will become really reliable, we must check all messages.

In particular,
* set up a new central message string table in main.c
* drop the old message string tables from man.c and mdoc.c
* get rid of the piece-meal merr enums in libman and libmdoc
* reduce number of error/warning functions from 16 to 6 (still a lot...)

While here, handle a few problems more gracefully:
* allow .Rv and .Ex to work without a prior .Nm
* allow .An to ignore extra arguments
* allow undeclared columns in .Bl -column

Written by kristaps@@.
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.9 2010/05/14 01:54:37 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@kth.se>
@


1.9
log
@merge 1.9.24, keeping local patches; some changes:
* preserve multiple consecutive space characters in input
* do not restrict .Cd and .Rv to certain sections (requested by Joerg)
* do not run lookup() on quoted words
* enum return types for mdoc_args and mdoc_argv
* fix auto-closing of LINK tag in -Txhtml (from Daniel Friesel)
* various lint and manual fixes
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.8 2010/04/02 12:39:47 schwarze Exp $ */
d26 1
@


1.8
log
@merge 1.9.22, keeping local patches
* convert mdoc tokens from #define to enum
* fix a segfault with .Xo/.Xc in explicit blocks
* Thorn is \*(Th, not \*(TH; noticed by Joerg Sonnenberger
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.7 2010/03/02 00:38:59 schwarze Exp $ */
d42 1
a42 1
	for (i = 0; i < MDOC_MAX; i++) {
@


1.7
log
@Proper inter-sentence spacing for mdoc(7).
When a text line or a non-block macro line in the source code ends
in any of ".!?", consider that an end of sentence (EOS).
This makes Jason's rule "new sentence, new line" even more important.
Let the parser detect the EOS and insert a token into the AST.
Let the -Tascii frontend render the EOS token as a double space before
the next word.
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.6 2009/09/21 21:11:37 schwarze Exp $ */
d60 1
a60 1
int
d84 1
a84 1
			return(i);
@


1.6
log
@sync to 1.9.5: lookup hashes are now static tables
shortening the code, and, according to kristaps@@, speeding it up
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.5 2009/08/09 18:01:15 schwarze Exp $ */
d28 1
a28 1
static	u_char		 table[27 * 12];
d46 1
a46 1
			major = 12 * (tolower((u_char)p[1]) - 97);
d48 1
a48 1
			major = 12 * 26;
d50 1
a50 1
		for (j = 0; j < 12; j++)
d56 1
a56 1
		assert(j < 12);
d71 1
a71 1
		major = 12 * (tolower((u_char)p[1]) - 97);
d73 1
a73 1
		major = 12 * 26;
d80 1
a80 1
	for (j = 0; j < 12; j++) {
@


1.5
log
@sync to 1.8.3: u_char needs <sys/types.h>;
found in FreeBSD by uqs at sporlein dot net
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.4 2009/07/26 01:08:13 schwarze Exp $ */
d21 1
d28 1
a28 27
#define	ADJUST_MAJOR(x) 					\
	do if (37 == (x))					\
		(x) = 0; 		/* %   -> 00 */		\
	else if (91 > (x)) 					\
		(x) -= 64; 		/* A-Z -> 01 - 26 */	\
	else 							\
		(x) -= 70;		/* a-z -> 27 - 52 */	\
	while (/*CONSTCOND*/0)

#define ADJUST_MINOR(y)						\
	do if (49 == (y))					\
		(y) = 0;		/* 1   -> 00 */		\
	else if (91 > (y))					\
		(y) -= 65;		/* A-Z -> 00 - 25 */	\
	else 							\
		(y) -= 97;		/* a-z -> 00 - 25 */	\
	while (/*CONSTCOND*/0)

#define INDEX(maj, min) 					\
	((maj) * 26 * 3) + ((min) * 3)

#define	SLOTCMP(slot, val)					\
	(mdoc_macronames[(slot)][0] == (val)[0] && 		\
	 mdoc_macronames[(slot)][1] == (val)[1] && 		\
	 (0 == (val)[2] || 					\
	  mdoc_macronames[(slot)][2] == (val)[2]))

d30 4
d35 1
a35 10
mdoc_hash_free(void *htab)
{

	free(htab);
}



void *
mdoc_hash_alloc(void)
d37 2
a38 2
	int		  i, major, minor, ind;
	const void	**htab;
d40 1
a40 3
	htab = calloc(26 * 3 * 52, sizeof(struct mdoc_macro *));
	if (NULL == htab) 
		return(NULL);
d43 1
a43 16
		major = mdoc_macronames[i][0];
		assert(isalpha((u_char)major) || 37 == major);

		ADJUST_MAJOR(major);

		minor = mdoc_macronames[i][1];
		assert(isalpha((u_char)minor) || 49 == minor);

		ADJUST_MINOR(minor);

		ind = INDEX(major, minor);

		if (NULL == htab[ind]) {
			htab[ind] = &mdoc_macros[i];
			continue;
		}
d45 10
a54 4
		if (NULL == htab[++ind]) {
			htab[ind] = &mdoc_macros[i];
			continue;
		}
d56 1
a56 2
		assert(NULL == htab[++ind]);
		htab[ind] = &mdoc_macros[i];
a57 2

	return((void *)htab);
a59 1

d61 1
a61 1
mdoc_hash_find(const void *arg, const char *tmp)
d63 1
a63 2
	int		  major, minor, ind, slot;
	const void	**htab;
d65 1
a65 4
	htab = /* LINTED */
		(const void **)arg;

	if (0 == (major = tmp[0]))
d67 1
a67 1
	if (0 == (minor = tmp[1]))
d70 5
a74 1
	if (tmp[2] && tmp[3])
d77 1
a77 3
	if (37 != major && ! isalpha((u_char)major))
		return(MDOC_MAX);
	if (49 != minor && ! isalpha((u_char)minor))
d80 5
a84 26
	ADJUST_MAJOR(major);
	ADJUST_MINOR(minor);

	ind = INDEX(major, minor);

	if (ind < 0 || ind >= 26 * 3 * 52)
		return(MDOC_MAX);

	if (htab[ind]) {
		slot = htab[ind] - /* LINTED */
			(void *)mdoc_macros;
		assert(0 == (size_t)slot % sizeof(struct mdoc_macro));
		slot /= sizeof(struct mdoc_macro);
		if (SLOTCMP(slot, tmp))
			return(slot);
		ind++;
	}

	if (htab[ind]) {
		slot = htab[ind] - /* LINTED */
			(void *)mdoc_macros;
		assert(0 == (size_t)slot % sizeof(struct mdoc_macro));
		slot /= sizeof(struct mdoc_macro);
		if (SLOTCMP(slot, tmp))
			return(slot);
		ind++;
a86 9
	if (NULL == htab[ind]) 
		return(MDOC_MAX);
	slot = htab[ind] - /* LINTED */
		(void *)mdoc_macros;
	assert(0 == (size_t)slot % sizeof(struct mdoc_macro));
	slot /= sizeof(struct mdoc_macro);
	if (SLOTCMP(slot, tmp))
		return(slot);

a88 1

@


1.4
log
@sync to 1.8.1: modify macro hash tables to deal with lowercase macro names;
kristaps@@ thinks the tables are too sparse and need more work later
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.3 2009/06/18 23:34:53 schwarze Exp $ */
d17 2
@


1.3
log
@sync to 1.7.19: improved comment handling
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.2 2009/06/14 23:00:57 schwarze Exp $ */
d25 27
a51 5
/*
 * Routines for the perfect-hash hashtable used by the parser to look up
 * tokens by their string-ified names (`.Fl' -> MDOC_Fl).  The
 * allocation penalty for this is 27 * 26 * sizeof(ptr). 
 */
d61 1
d68 1
a68 1
	htab = calloc(27 * 26 * 3, sizeof(struct mdoc_macro *));
d74 1
a74 2
		assert((major >= 65 && major <= 90) ||
				major == 37);
d76 1
a76 4
		if (major == 37) 
			major = 0;
		else
			major -= 64;
d79 1
a79 10
		assert((minor >= 65 && minor <= 90) ||
				(minor == 49) ||
				(minor >= 97 && minor <= 122));

		if (minor == 49)
			minor = 0;
		else if (minor <= 90)
			minor -= 65;
		else 
			minor -= 97;
d81 1
a81 2
		assert(major >= 0 && major < 27);
		assert(minor >= 0 && minor < 26);
d83 1
a83 1
		ind = (major * 27 * 3) + (minor * 3);
d112 1
a112 1
	if (0 == tmp[0] || 0 == tmp[1])
d114 3
d120 1
a120 1
	if ( ! (tmp[0] == 37 || (tmp[0] >= 65 && tmp[0] <= 90)))
d122 1
a122 4

	if ( ! ((tmp[1] >= 65 && tmp[1] <= 90) ||
				(tmp[1] == 49) ||
				(tmp[1] >= 97 && tmp[1] <= 122)))
d125 2
a126 4
	if (tmp[0] == 37)
		major = 0;
	else
		major = tmp[0] - 64;
d128 1
a128 6
	if (tmp[1] == 49)
		minor = 0;
	else if (tmp[1] <= 90)
		minor = tmp[1] - 65;
	else
		minor = tmp[1] - 97;
d130 1
a130 2
	ind = (major * 27 * 3) + (minor * 3);
	if (ind < 0 || ind >= (27 * 26 * 3))
d138 1
a138 4
		if (mdoc_macronames[slot][0] == tmp[0] && 
				mdoc_macronames[slot][1] == tmp[1] && 
				(0 == tmp[2] ||
				 mdoc_macronames[slot][2] == tmp[2]))
d148 1
a148 4
		if (mdoc_macronames[slot][0] == tmp[0] && 
				mdoc_macronames[slot][1] == tmp[1] && 
				(0 == tmp[2] ||
				 mdoc_macronames[slot][2] == tmp[2]))
d159 1
a159 4
	if (mdoc_macronames[slot][0] == tmp[0] && 
			mdoc_macronames[slot][1] == tmp[1] && 
			(0 == tmp[2] ||
			 mdoc_macronames[slot][2] == tmp[2]))
@


1.2
log
@sync to 1.7.16: comments, whitespace and spelling fixes; no functional change
@
text
@d1 1
a1 1
/*	$Id: mdoc_hash.c,v 1.4 2009/06/10 20:18:43 kristaps Exp $ */
d49 1
a49 1
	for (i = 1; i < MDOC_MAX; i++) {
@


1.1
log
@Initial check-in of mandoc for formatting manuals. ok deraadt@@
@
text
@d1 1
a1 1
/* $Id: mdoc_hash.c,v 1.2 2009/04/02 06:51:44 kristaps Exp $ */
d3 1
a3 1
 * Copyright (c) 2008, 2009 Kristaps Dzonsons <kristaps@@openbsd.org>
d6 2
a7 3
 * purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all
 * copies.
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
@

