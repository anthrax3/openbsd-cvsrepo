head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6;
locks; strict;
comment	@ * @;


1.18
date	2017.02.09.17.19.07;	author schwarze;	state Exp;
branches;
next	1.17;
commitid	M8rq0bbAM3ikHus0;

1.17
date	2017.01.09.17.49.55;	author schwarze;	state Exp;
branches;
next	1.16;
commitid	8edGWa3bQBtupYYK;

1.16
date	2016.11.08.16.23.37;	author schwarze;	state Exp;
branches;
next	1.15;
commitid	dMU1kd0O5LDcrfX8;

1.15
date	2016.11.08.15.57.12;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	RAbcsw7kqLkcpGum;

1.14
date	2016.11.08.15.27.06;	author schwarze;	state Exp;
branches;
next	1.13;
commitid	ikIuSGPiPmGR1v0y;

1.13
date	2016.07.20.13.02.44;	author schwarze;	state Exp;
branches;
next	1.12;
commitid	2wum6Y1AfbEZDpvc;

1.12
date	2016.07.08.20.41.13;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	eyBEYQth64IT7AlL;

1.11
date	2015.11.20.21.58.32;	author schwarze;	state Exp;
branches;
next	1.10;
commitid	TwsVYiu2UT81vO9f;

1.10
date	2015.10.13.15.50.15;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	ZofM5WCqJbf4KjAB;

1.9
date	2015.10.11.21.59.48;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	WZer3pE917VGrrq1;

1.8
date	2015.10.06.18.30.44;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	hxQV8O1pNUaef4ir;

1.7
date	2015.08.29.15.28.19;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	TYiWbHETM2dWRI3Q;

1.6
date	2015.07.28.18.38.05;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	tPMQyF0qSW5rKa17;

1.5
date	2015.07.25.14.28.40;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	a9T6R454FMso2EzW;

1.4
date	2015.07.25.14.01.39;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	lD6FFKt12knszHBX;

1.3
date	2015.07.21.03.26.02;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	YpvHQL0o4VwZB5CS;

1.2
date	2015.07.18.03.40.51;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	8OC4IlpLpHbFTmTf;

1.1
date	2015.07.17.22.35.36;	author schwarze;	state Exp;
branches;
next	;
commitid	Ik50obX3Gy0LFoMQ;


desc
@@


1.18
log
@Be consistent in protecting __attribute__ attributes with __;
from Christos Zoulas <christos @@ NetBSD>.
@
text
@/*	$OpenBSD: tag.c,v 1.17 2017/01/09 17:49:55 schwarze Exp $ */
/*
 * Copyright (c) 2015, 2016 Ingo Schwarze <schwarze@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/types.h>

#include <signal.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "mandoc_aux.h"
#include "mandoc_ohash.h"
#include "tag.h"

struct tag_entry {
	size_t	*lines;
	size_t	 maxlines;
	size_t	 nlines;
	int	 prio;
	char	 s[];
};

static	void	 tag_signal(int) __attribute__((__noreturn__));

static struct ohash	 tag_data;
static struct tag_files	 tag_files;


/*
 * Prepare for using a pager.
 * Not all pagers are capable of using a tag file,
 * but for simplicity, create it anyway.
 */
struct tag_files *
tag_init(void)
{
	struct sigaction	 sa;
	int			 ofd;

	ofd = -1;
	tag_files.tfd = -1;
	tag_files.tcpgid = -1;

	/* Clean up when dying from a signal. */

	memset(&sa, 0, sizeof(sa));
	sigfillset(&sa.sa_mask);
	sa.sa_handler = tag_signal;
	sigaction(SIGHUP, &sa, NULL);
	sigaction(SIGINT, &sa, NULL);
	sigaction(SIGTERM, &sa, NULL);

	/*
	 * POSIX requires that a process calling tcsetpgrp(3)
	 * from the background gets a SIGTTOU signal.
	 * In that case, do not stop.
	 */

	sa.sa_handler = SIG_IGN;
	sigaction(SIGTTOU, &sa, NULL);

	/* Save the original standard output for use by the pager. */

	if ((tag_files.ofd = dup(STDOUT_FILENO)) == -1)
		goto fail;

	/* Create both temporary output files. */

	(void)strlcpy(tag_files.ofn, "/tmp/man.XXXXXXXXXX",
	    sizeof(tag_files.ofn));
	(void)strlcpy(tag_files.tfn, "/tmp/man.XXXXXXXXXX",
	    sizeof(tag_files.tfn));
	if ((ofd = mkstemp(tag_files.ofn)) == -1)
		goto fail;
	if ((tag_files.tfd = mkstemp(tag_files.tfn)) == -1)
		goto fail;
	if (dup2(ofd, STDOUT_FILENO) == -1)
		goto fail;
	close(ofd);

	/*
	 * Set up the ohash table to collect output line numbers
	 * where various marked-up terms are documented.
	 */

	mandoc_ohash_init(&tag_data, 4, offsetof(struct tag_entry, s));
	return &tag_files;

fail:
	tag_unlink();
	if (ofd != -1)
		close(ofd);
	if (tag_files.ofd != -1)
		close(tag_files.ofd);
	if (tag_files.tfd != -1)
		close(tag_files.tfd);
	*tag_files.ofn = '\0';
	*tag_files.tfn = '\0';
	tag_files.ofd = -1;
	tag_files.tfd = -1;
	return NULL;
}

/*
 * Set the line number where a term is defined,
 * unless it is already defined at a higher priority.
 */
void
tag_put(const char *s, int prio, size_t line)
{
	struct tag_entry	*entry;
	size_t			 len;
	unsigned int		 slot;

	/* Sanity checks. */

	if (tag_files.tfd <= 0)
		return;
	if (s[0] == '\\' && (s[1] == '&' || s[1] == 'e'))
		s += 2;
	if (*s == '\0' || strchr(s, ' ') != NULL)
		return;

	slot = ohash_qlookup(&tag_data, s);
	entry = ohash_find(&tag_data, slot);

	if (entry == NULL) {

		/* Build a new entry. */

		len = strlen(s) + 1;
		entry = mandoc_malloc(sizeof(*entry) + len);
		memcpy(entry->s, s, len);
		entry->lines = NULL;
		entry->maxlines = entry->nlines = 0;
		ohash_insert(&tag_data, slot, entry);

	} else {

		/* Handle priority 0 entries. */

		if (prio == 0) {
			if (entry->prio == 0)
				entry->prio = -1;
			return;
		}

		/* A better entry is already present, ignore the new one. */

		if (entry->prio > 0 && entry->prio < prio)
			return;

		/* The existing entry is worse, clear it. */

		if (entry->prio < 1 || entry->prio > prio)
			entry->nlines = 0;
	}

	/* Remember the new line. */

	if (entry->maxlines == entry->nlines) {
		entry->maxlines += 4;
		entry->lines = mandoc_reallocarray(entry->lines,
		    entry->maxlines, sizeof(*entry->lines));
	}
	entry->lines[entry->nlines++] = line;
	entry->prio = prio;
}

/*
 * Write out the tags file using the previously collected
 * information and clear the ohash table while going along.
 */
void
tag_write(void)
{
	FILE			*stream;
	struct tag_entry	*entry;
	size_t			 i;
	unsigned int		 slot;

	if (tag_files.tfd <= 0)
		return;
	stream = fdopen(tag_files.tfd, "w");
	entry = ohash_first(&tag_data, &slot);
	while (entry != NULL) {
		if (stream != NULL && entry->prio >= 0)
			for (i = 0; i < entry->nlines; i++)
				fprintf(stream, "%s %s %zu\n",
				    entry->s, tag_files.ofn, entry->lines[i]);
		free(entry->lines);
		free(entry);
		entry = ohash_next(&tag_data, &slot);
	}
	ohash_delete(&tag_data);
	if (stream != NULL)
		fclose(stream);
}

void
tag_unlink(void)
{
	pid_t	 tc_pgid;

	if (tag_files.tcpgid != -1) {
		tc_pgid = tcgetpgrp(tag_files.ofd);
		if (tc_pgid == tag_files.pager_pid ||
		    tc_pgid == getpgid(0) ||
		    getpgid(tc_pgid) == -1)
			(void)tcsetpgrp(tag_files.ofd, tag_files.tcpgid);
	}
	if (*tag_files.ofn != '\0')
		unlink(tag_files.ofn);
	if (*tag_files.tfn != '\0')
		unlink(tag_files.tfn);
}

static void
tag_signal(int signum)
{
	struct sigaction	 sa;

	tag_unlink();
	memset(&sa, 0, sizeof(sa));
	sigemptyset(&sa.sa_mask);
	sa.sa_handler = SIG_DFL;
	sigaction(signum, &sa, NULL);
	kill(getpid(), signum);
	/* NOTREACHED */
	_exit(1);
}
@


1.17
log
@Use stdout rather than stdin for controlling the terminal
such that "cat foo.mdoc | man -l" works.
Issue reported by Christian Neukirchen <chneukirchen at gmail dot com>
and also tested by him on Void Linux with both glibc and musl.
The patch makes sense to millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: tag.c,v 1.16 2016/11/08 16:23:37 schwarze Exp $ */
d39 1
a39 1
static	void	 tag_signal(int) __attribute__((noreturn));
@


1.16
log
@implement tag priority 0, which will tag only keys that appear as
tag candidates exactly once, and use it for .Em and .Sy;
written on the TGV Toulouse-Paris
@
text
@d1 1
a1 1
/*	$OpenBSD: tag.c,v 1.15 2016/11/08 15:57:12 schwarze Exp $ */
d222 1
a222 1
		tc_pgid = tcgetpgrp(STDIN_FILENO);
d226 1
a226 1
			(void)tcsetpgrp(STDIN_FILENO, tag_files.tcpgid);
@


1.15
log
@skip leading \& and \e in tags
@
text
@d1 1
a1 1
/*	$OpenBSD: tag.c,v 1.14 2016/11/08 15:27:06 schwarze Exp $ */
d156 8
d166 1
a166 1
		if (entry->prio < prio)
d171 1
a171 1
		if (entry->prio > prio)
d203 1
a203 1
		if (stream != NULL)
@


1.14
log
@support more than one tag entry for the same search term;
general idea discussed with bcook@@ during l2k16
@
text
@d1 1
a1 1
/*	$OpenBSD: tag.c,v 1.13 2016/07/20 13:02:44 schwarze Exp $ */
d131 7
a137 1
	if (tag_files.tfd <= 0 || strchr(s, ' ') != NULL)
@


1.13
log
@tag_signal() is dead; from LLVM via Christos Zoulas
@
text
@d1 1
a1 1
/*	$OpenBSD: tag.c,v 1.12 2016/07/08 20:41:13 schwarze Exp $ */
d3 1
a3 1
 * Copyright (c) 2015 Ingo Schwarze <schwarze@@openbsd.org>
d32 3
a34 1
	size_t	 line;
d133 1
d136 1
d138 3
d144 2
d147 22
a168 3
	} else if (entry->prio <= prio)
		return;
	entry->line = line;
d181 1
d190 4
a193 2
			fprintf(stream, "%s %s %zu\n",
			    entry->s, tag_files.ofn, entry->line);
@


1.12
log
@POSIX requires that a process calling tcsetpgrp(3) from the background
gets a SIGTTOU signal.  In that case, do not stop.
Portability issue found while testing on commercial Solaris 9/10/11.
Thanks to opencsw.org for providing me with a testing environment.
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.11 2015/11/20 21:58:32 schwarze Exp $    */
d37 1
a37 1
static	void	 tag_signal(int);
@


1.11
log
@Fix multiple issues regarding process group and signal mask handling
found by tb@@ and millert@@; parts of the code, in particular in tag.c,
by millert@@; OK millert@@.
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.10 2015/10/13 15:50:15 schwarze Exp $    */
d58 18
a86 6
	memset(&sa, 0, sizeof(sa));
	sigfillset(&sa.sa_mask);
	sa.sa_handler = tag_signal;
	sigaction(SIGHUP, &sa, NULL);
	sigaction(SIGINT, &sa, NULL);
	sigaction(SIGTERM, &sa, NULL);
@


1.10
log
@Reduce the amount of code by moving the three copies of the ohash
callback functions into one common place, preparing for the use of
ohash for some additional purposes.  No functional change.
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.9 2015/10/11 21:59:48 schwarze Exp $    */
d51 1
d56 1
d69 6
a74 3
	signal(SIGHUP, tag_signal);
	signal(SIGINT, tag_signal);
	signal(SIGTERM, tag_signal);
d162 1
d164 7
d180 1
d183 4
a186 1
	signal(signum, SIG_DFL);
@


1.9
log
@Drop tags containing a blank character:
They don't work, they break other tags in weird ways, and even
if they could be made to work, they would be mostly useless.
Issue reported by naddy@@, thanks.
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.8 2015/10/06 18:30:44 schwarze Exp $    */
a26 2
#include <ohash.h>

d28 1
a37 3
static	void	*tag_alloc(size_t, void *);
static	void	 tag_free(void *, void *);
static	void	*tag_calloc(size_t, size_t, void *);
a50 1
	struct ohash_info	 tag_info;
d83 1
a83 6
	tag_info.alloc = tag_alloc;
	tag_info.calloc = tag_calloc;
	tag_info.free = tag_free;
	tag_info.key_offset = offsetof(struct tag_entry, s);
	tag_info.data = NULL;
	ohash_init(&tag_data, 4, &tag_info);
a172 24
}

/*
 * Memory management callback functions for ohash.
 */
static void *
tag_alloc(size_t sz, void *arg)
{

	return mandoc_malloc(sz);
}

static void *
tag_calloc(size_t nmemb, size_t sz, void *arg)
{

	return mandoc_calloc(nmemb, sz);
}

static void
tag_free(void *p, void *arg)
{

	free(p);
@


1.8
log
@modernize style: "return" is not a function; ok cmp(1)
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.7 2015/08/29 15:28:19 schwarze Exp $    */
d122 1
a122 1
	if (tag_files.tfd <= 0)
@


1.7
log
@Portability: including <ohash.h> requires including <stdint.h> before.
Noticed by Svyatoslav Mishyn <juef and openmailbox dot org>, Crux Linux.
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.6 2015/07/28 18:38:05 schwarze Exp $    */
d94 1
a94 1
	return(&tag_files);
d108 1
a108 1
	return(NULL);
d192 1
a192 1
	return(mandoc_malloc(sz));
d199 1
a199 1
	return(mandoc_calloc(nmemb, sz));
@


1.6
log
@Remove the hack of scrolling forward and backward with +G1G that
many (jmc@@, millert@@, espie@@, deraadt@@) considered revolting.
Instead, when using a pager, since we are using a temporary file
for tags anyway, use another temporary file for the formatted
page(s), as suggested by millert@@ and similar to what the traditional
BSD man(1) did, except that we use only one single temporary output
file rather than one for each formatted manual page, such that
searching (both with / and :t) works across all the displayed files.
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.5 2015/07/25 14:28:40 schwarze Exp $    */
d21 1
@


1.5
log
@Simplify and make tag_put() more efficient by integrating tag_get()
into it and by only handling NUL-terminated strings.
Minus 25 lines of code, no functional change.
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.4 2015/07/25 14:01:39 schwarze Exp $    */
d43 1
a43 2
static char		*tag_fn = NULL;
static int		 tag_fd = -1;
d47 3
a49 3
 * Set up the ohash table to collect output line numbers
 * where various marked-up terms are documented and create
 * the temporary tags file, saving the name for the pager.
d51 1
a51 1
char *
d55 1
d57 14
a70 1
	tag_fn = mandoc_strdup("/tmp/man.XXXXXXXXXX");
d74 12
a85 5
	if ((tag_fd = mkstemp(tag_fn)) == -1) {
		free(tag_fn);
		tag_fn = NULL;
		return(NULL);
	}
d93 15
a107 1
	return(tag_fn);
d121 1
a121 1
	if (tag_fd == -1)
d147 1
a147 1
	if (tag_fd == -1)
d149 1
a149 1
	stream = fdopen(tag_fd, "w");
d153 2
a154 1
			fprintf(stream, "%s - %zu\n", entry->s, entry->line);
d167 4
a170 2
	if (tag_fn != NULL)
		unlink(tag_fn);
@


1.4
log
@basic support for tag priorities; written at YYC
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.3 2015/07/21 03:26:02 schwarze Exp $    */
d77 2
a78 22
 * Return the line number where a term is defined,
 * or 0 if the term is unknown.
 */
size_t
tag_get(const char *s, size_t len, int prio)
{
	struct tag_entry	*entry;
	const char		*end;
	unsigned int		 slot;

	if (tag_fd == -1)
		return(0);
	if (len == 0)
		len = strlen(s);
	end = s + len;
	slot = ohash_qlookupi(&tag_data, s, &end);
	entry = ohash_find(&tag_data, slot);
	return((entry == NULL || prio < entry->prio) ? 0 : entry->line);
}

/*
 * Set the line number where a term is defined.
d81 1
a81 1
tag_put(const char *s, size_t len, int prio, size_t line)
d84 1
a84 1
	const char		*end;
d89 1
a89 4
	if (len == 0)
		len = strlen(s);
	end = s + len;
	slot = ohash_qlookupi(&tag_data, s, &end);
d92 2
a93 1
		entry = mandoc_malloc(sizeof(*entry) + len + 1);
a94 1
		entry->s[len] = '\0';
d96 2
a97 1
	}
@


1.3
log
@When creation of the temporary tags file fails, call the pager
without the -T option, because otherwise the pager won't even start.
Fixing a bug reported by jca@@.

While here, shorten the code by two lines
and delete one internal interface function.
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.2 2015/07/18 03:40:51 schwarze Exp $    */
d33 1
d81 1
a81 1
tag_get(const char *s, size_t len)
d94 1
a94 1
	return(entry == NULL ? 0 : entry->line);
d101 1
a101 1
tag_put(const char *s, size_t len, size_t line)
d121 1
@


1.2
log
@clean up the temporary file when the process dies from a signal
@
text
@d1 1
a1 1
/*      $OpenBSD: tag.c,v 1.1 2015/07/17 22:35:36 schwarze Exp $    */
d51 1
a51 1
void
d63 1
a63 1
		return;
a71 6
}

char *
tag_filename(void)
{

@


1.1
log
@Initial, still somewhat experimental implementation to leverage
less(1) -T and :t ctags(1)-like functionality to jump to the
definitions of various terms inside manual pages.
To be polished in the tree, so bear with me and report issues.

Technically, if less(1) is used as a pager, information is collected
by the mdoc(7) terminal formatter, first stored using the ohash
library, then ultimately written to a temporary file which is passed
to less via -T.  No change intended for other output formatters or
when running without a pager.

Based on an idea from Kristaps using feedback from many, in particular
phessler@@ nicm@@ millert@@ halex@@ doug@@ kspillner@@ deraadt@@.
@
text
@d1 1
a1 1
/*      $OpenBSD$    */
d19 1
d36 1
d57 3
d160 11
@

