head	1.26;
access;
symbols
	OPENBSD_6_2:1.26.0.2
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.12
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.8
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.14.0.10
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.8
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.6
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.16
	OPENBSD_2_8:1.6.0.14
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2017.06.08.17.14.02;	author bluhm;	state Exp;
branches;
next	1.25;
commitid	Tn39fPOY4RhDBu57;

1.25
date	2017.06.07.20.53.59;	author bluhm;	state Exp;
branches;
next	1.24;
commitid	LIcASwnR6ZAP0y3z;

1.24
date	2017.03.11.18.33.21;	author guenther;	state Exp;
branches;
next	1.23;
commitid	V3ITJrLxaVlLWKXK;

1.23
date	2015.10.09.01.37.08;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	sbrB3Q5CNxcwZpfU;

1.22
date	2015.10.07.14.05.07;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	l74D63ZDJIfuh9qq;

1.21
date	2015.03.15.00.41.28;	author millert;	state Exp;
branches;
next	1.20;
commitid	IbVxlqGw2UipKdDr;

1.20
date	2015.01.16.06.40.09;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Uu5nFG3wCl0LACBb;

1.19
date	2013.11.27.13.32.02;	author okan;	state Exp;
branches;
next	1.18;

1.18
date	2013.11.26.13.19.05;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.39;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.07.16.18.43.05;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2007.07.16.18.40.18;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2004.09.14.22.54.54;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.26.21.59.11;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.10.22.20.47;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.02.56.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.47;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.19.19.02.14;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.18.17.17.39;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.12.05.17.15;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.06.02.02.39.42;	author flipk;	state Exp;
branches;
next	1.5;

1.5
date	97.03.03.03.25.10;	author flipk;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.42.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.26.05.34.54;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.02.56.44;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.45.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.45.28;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@ASLR, W^X, and guard pages trigger processor traps that result in
SIGILL, SIGBUS, SIGSEGV signals.  Make such memory violations visible
in lastcomm(1).  This also works if a programm tries to hide them
with a signal handler.  Manual kill -SEGV does not generate false
positives.
OK deraadt@@
@
text
@/*	$OpenBSD: lastcomm.c,v 1.25 2017/06/07 20:53:59 bluhm Exp $	*/
/*	$NetBSD: lastcomm.c,v 1.9 1995/10/22 01:43:42 ghudson Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>	/* NODEV */
#include <sys/stat.h>
#include <sys/acct.h>

#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <utmp.h>
#include <pwd.h>
#include "pathnames.h"

time_t	 expand(u_int);
char	*flagbits(int);
char	*getdev(dev_t);
int	 requested(char *[], struct acct *);
void	 usage(void);

#define SECSPERMIN	(60)
#define SECSPERHOUR	(60 * 60)

int
main(int argc, char *argv[])
{
	char *p;
	struct acct ab;
	struct stat sb;
	FILE *fp;
	off_t size;
	time_t t;
	double delta;
	int ch;
	char *acctfile;

	if (pledge("stdio rpath getpw", NULL) == -1)
		err(1, "pledge");

	acctfile = _PATH_ACCT;
	while ((ch = getopt(argc, argv, "f:")) != -1)
		switch(ch) {
		case 'f':
			acctfile = optarg;
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	/* Open the file. */
	if ((fp = fopen(acctfile, "r")) == NULL || fstat(fileno(fp), &sb))
		err(1, "%s", acctfile);

	/*
	 * Round off to integral number of accounting records, probably
	 * not necessary, but it doesn't hurt.
	 */
	size = sb.st_size - sb.st_size % sizeof(struct acct);

	/* Check if any records to display. */
	if (size < sizeof(struct acct))
		exit(0);

	/*
	 * Seek to before the last entry in the file; use lseek(2) in case
	 * the file is bigger than a "long".
	 */
	size -= sizeof(struct acct);
	if (lseek(fileno(fp), size, SEEK_SET) == -1)
		err(1, "%s", acctfile);

	for (;;) {
		if (fread(&ab, sizeof(struct acct), 1, fp) != 1)
			err(1, "%s", acctfile);

		if (ab.ac_comm[0] == '\0') {
			ab.ac_comm[0] = '?';
			ab.ac_comm[1] = '\0';
		} else
			for (p = &ab.ac_comm[0];
			    p < &ab.ac_comm[sizeof ab.ac_comm] && *p; ++p)
				if (!isprint((unsigned char)*p))
					*p = '?';
		if (!*argv || requested(argv, &ab))
		{
			t = expand(ab.ac_utime) + expand(ab.ac_stime);
			(void)printf("%-*.*s %-7s %-*.*s %-*.*s %6.2f secs %.16s",
			    (int)sizeof ab.ac_comm,
			    (int)sizeof ab.ac_comm,
			    ab.ac_comm, flagbits(ab.ac_flag), UT_NAMESIZE,
			    UT_NAMESIZE, user_from_uid(ab.ac_uid, 0),
			    UT_LINESIZE, UT_LINESIZE, getdev(ab.ac_tty),
			    t / (double)AHZ, ctime(&ab.ac_btime));
			delta = expand(ab.ac_etime) / (double)AHZ;
			printf(" (%1.0f:%02.0f:%05.2f)\n",
			    delta / SECSPERHOUR,
			    fmod(delta, (double)SECSPERHOUR) / SECSPERMIN,
			    fmod(delta, (double)SECSPERMIN));
		}

		if (size == 0)
			break;
		/* seek to previous entry */
		if (fseek(fp, 2 * -(long)sizeof(struct acct), SEEK_CUR) == -1)
			err(1, "%s", acctfile);
		size -= sizeof(struct acct);
	}
	exit(0);
}

time_t
expand(u_int t)
{
	time_t nt;

	nt = t & 017777;
	t >>= 13;
	while (t) {
		t--;
		nt <<= 3;
	}
	return (nt);
}

char *
flagbits(int f)
{
	static char flags[20] = "-";
	char *p;

#define	BIT(flag, ch)	if (f & flag) *p++ = ch

	p = flags + 1;
	BIT(ASU, 'S');
	BIT(AFORK, 'F');
	BIT(ACOMPAT, 'C');
	BIT(ACORE, 'D');
	BIT(AXSIG, 'X');
	BIT(APLEDGE, 'P');
	BIT(ATRAP, 'T');
	*p = '\0';
	return (flags);
}

int
requested(char *argv[], struct acct *acp)
{
	do {
		if (!strcmp(user_from_uid(acp->ac_uid, 0), *argv))
			return (1);
		if (!strcmp(getdev(acp->ac_tty), *argv))
			return (1);
		if (!strncmp(acp->ac_comm, *argv, sizeof acp->ac_comm))
			return (1);
	} while (*++argv);
	return (0);
}

char *
getdev(dev_t dev)
{
	static dev_t lastdev = (dev_t)-1;
	static char *lastname;

	if (dev == NODEV)			/* Special case. */
		return ("__");
	if (dev == lastdev)			/* One-element cache. */
		return (lastname);
	lastdev = dev;
	if ((lastname = devname(dev, S_IFCHR)) == NULL)
		lastname = "??";
	return (lastname);
}

void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: lastcomm [-f file] [command ...] [user ...] [terminal ...]\n");
	exit(1);
}
@


1.25
log
@Add an acct(5) flag for pledge violations.  Then lastcomm(1) shows
when something went wrong.  This allows to monitor whether the
system is under attack and that the attack has been prevented by
OpenBSD pledge(2).
OK deraadt@@ millert@@ jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.24 2017/03/11 18:33:21 guenther Exp $	*/
d177 1
@


1.24
log
@Use sizeof directly instead of a macro from the scary <struct.h>

ok visa@@ mpi@@ millert@@ kettenis@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.23 2015/10/09 01:37:08 deraadt Exp $	*/
d176 1
@


1.23
log
@Change all tame callers to namechange to pledge(2).
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.22 2015/10/07 14:05:07 deraadt Exp $	*/
a43 1
#include <struct.h>
d118 1
a118 1
			    p < &ab.ac_comm[fldsiz(acct, ac_comm)] && *p; ++p)
d125 2
a126 2
			    (int)fldsiz(acct, ac_comm),
			    (int)fldsiz(acct, ac_comm),
d188 1
a188 1
		if (!strncmp(acp->ac_comm, *argv, fldsiz(acct, ac_comm)))
@


1.22
log
@tame "stdio rpath getpw". getpw is for user_from_uid(), which is a libc
cache on top of the getpw* functions.
ok semarie, who didn't spot the getpw need :)
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.21 2015/03/15 00:41:28 millert Exp $	*/
d72 2
a73 2
	if (tame("stdio rpath getpw", NULL) == -1)
		err(1, "tame");
@


1.21
log
@tzfile.h is an internal header that should never have been installed.
What's worse, the tzfile.h that gets installed is over 20 years old
and doesn't match the real tzfile.h in libc/time.  This makes the
tree safe for /usr/include/tzfile.h removal.  The TM_YEAR_BASE
define has been moved to time.h temporarily until its usage is
replaced by 1900 in the tree.  Actual removal of tzfile.h is pending
a ports build.  Based on a diff from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.20 2015/01/16 06:40:09 deraadt Exp $	*/
d71 3
@


1.20
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.19 2013/11/27 13:32:02 okan Exp $	*/
a44 1
#include <tzfile.h>
d55 3
@


1.19
log
@remove erroneous char cast to switch expression processing getopt(3);
not used in any cases.

ok deraadt@@, guenther@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.18 2013/11/26 13:19:05 deraadt Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.18
log
@unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.17 2009/10/27 23:59:39 deraadt Exp $	*/
d72 1
a72 1
		switch((char)ch) {
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.16 2007/07/16 18:43:05 jmc Exp $	*/
d115 1
a115 1
				if (!isprint(*p))
@


1.16
log
@oops, missed a bit from tobias' diff - add "usage: " to usage();
from Tobias Stoeckmann
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.15 2007/07/16 18:40:18 jmc Exp $	*/
a31 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)lastcomm.c	8.2 (Berkeley) 4/29/95";
#endif
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.15 2007/07/16 18:40:18 jmc Exp $";
#endif /* not lint */
@


1.15
log
@sync usage(); from Tobias Stoeckmann
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.14 2004/09/14 22:54:54 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.14 2004/09/14 22:54:54 deraadt Exp $";
d223 1
a223 1
	    "lastcomm [-f file] [command ...] [user ...] [terminal ...]\n");
@


1.14
log
@lint begs for proactive casting, so we give it
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.13 2003/06/26 21:59:11 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.13 2003/06/26 21:59:11 deraadt Exp $";
d223 1
a223 1
	    "lastcomm [ -f file ] [command ...] [user ...] [tty ...]\n");
@


1.13
log
@more proto fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.12 2003/06/10 22:20:47 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.12 2003/06/10 22:20:47 deraadt Exp $";
d143 2
a144 2
			    fmod(delta, SECSPERHOUR) / SECSPERMIN,
			    fmod(delta, SECSPERMIN));
@


1.12
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.11 2003/06/03 02:56:09 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.11 2003/06/03 02:56:09 millert Exp $";
d61 1
a68 1
char	*user_from_uid();
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.10 2002/02/16 21:27:47 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.10 2002/02/16 21:27:47 millert Exp $";
d71 1
a71 3
main(argc, argv)
	int argc;
	char *argv[];
d158 1
a158 2
expand(t)
	u_int t;
d172 1
a172 2
flagbits(f)
	int f;
d190 1
a190 3
requested(argv, acp)
	char *argv[];
	struct acct *acp;
d204 1
a204 2
getdev(dev)
	dev_t dev;
d220 1
a220 1
usage()
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.9 2001/11/19 19:02:14 mpech Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.9 2001/11/19 19:02:14 mpech Exp $";
@


1.9
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.8 2001/07/18 17:17:39 pvalchev Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.8 2001/07/18 17:17:39 pvalchev Exp $";
d67 5
a71 5
time_t	 expand __P((u_int));
char	*flagbits __P((int));
char	*getdev __P((dev_t));
int	 requested __P((char *[], struct acct *));
void	 usage __P((void));
@


1.8
log
@-Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.7 2001/07/12 05:17:15 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.7 2001/07/12 05:17:15 deraadt Exp $";
d79 1
a79 1
	register char *p;
d167 1
a167 1
	register time_t nt;
d180 1
a180 1
	register int f;
d199 2
a200 2
	register char *argv[];
	register struct acct *acp;
@


1.7
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.6 1997/06/02 02:39:42 flipk Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.6 1997/06/02 02:39:42 flipk Exp $";
d147 1
a147 1
			printf(" (%1.0lf:%02.0f:%05.2f)\n",
@


1.6
log
@mm, didn't quite get it the first time.
rearrange seek/test/print logic to avoid seeking to before
beginning of file.  netbsd/PR #3634, John F. Woods <jfw@@jfwhome.funhouse.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.5 1997/03/03 03:25:10 flipk Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.5 1997/03/03 03:25:10 flipk Exp $";
d140 6
a145 5
				fldsiz(acct, ac_comm), fldsiz(acct, ac_comm),
				ab.ac_comm, flagbits(ab.ac_flag), UT_NAMESIZE,
				UT_NAMESIZE, user_from_uid(ab.ac_uid, 0),
				UT_LINESIZE, UT_LINESIZE, getdev(ab.ac_tty),
				t / (double)AHZ, ctime(&ab.ac_btime));
d147 4
a150 4
			printf(" (%1.0lf:%02.0lf:%05.2lf)\n",
				delta / SECSPERHOUR,
				fmod(delta, SECSPERHOUR) / SECSPERMIN,
				fmod(delta, SECSPERMIN));
@


1.5
log
@don't try to fseek to before the beginning of the file;
showed up after the fix to sys_lseek concerning negative offsets.
avoids '/var/account/acct: Invalid argument' messages.
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.4 1997/01/15 23:42:41 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.4 1997/01/15 23:42:41 millert Exp $";
a127 5
		if (fseek(fp, 2 * -(long)sizeof(struct acct), SEEK_CUR) == -1)
			err(1, "%s", acctfile);

		size -= sizeof(struct acct);

d136 15
a150 14
		if (*argv && !requested(argv, &ab))
			continue;

		t = expand(ab.ac_utime) + expand(ab.ac_stime);
		(void)printf("%-*.*s %-7s %-*.*s %-*.*s %6.2f secs %.16s",
		    fldsiz(acct, ac_comm), fldsiz(acct, ac_comm), ab.ac_comm,
		    flagbits(ab.ac_flag), UT_NAMESIZE, UT_NAMESIZE,
		    user_from_uid(ab.ac_uid, 0), UT_LINESIZE, UT_LINESIZE,
		    getdev(ab.ac_tty), t / (double)AHZ, ctime(&ab.ac_btime));
		delta = expand(ab.ac_etime) / (double)AHZ;
		printf(" (%1.0lf:%02.0lf:%05.2lf)\n",
		    delta / SECSPERHOUR,
		    fmod(delta, SECSPERHOUR) / SECSPERMIN,
		    fmod(delta, SECSPERMIN));
d154 4
@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.3 1996/06/26 05:34:54 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.3 1996/06/26 05:34:54 deraadt Exp $";
a130 2
		if (size == 0)
			break;
d155 3
@


1.3
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: lastcomm.c,v 1.9 1995/10/22 01:43:42 ghudson Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lastcomm.c,v 1.9 1995/10/22 01:43:42 ghudson Exp $";
d90 1
a90 1
	while ((ch = getopt(argc, argv, "f:")) != EOF)
@


1.2
log
@from netbsd; also print elapsed time
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: lastcomm.c,v 1.9 1995/10/22 01:43:42 ghudson Exp $";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: lastcomm.c,v 1.7.2.1 1995/10/12 06:55:13 jtc Exp $	*/
d46 1
a46 1
static char rcsid[] = "$NetBSD: lastcomm.c,v 1.7.2.1 1995/10/12 06:55:13 jtc Exp $";
d56 1
d61 1
d84 1
d146 1
a146 1
		(void)printf("%-*.*s %-7s %-*.*s %-*.*s %6.2f secs %.16s\n",
d151 5
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
