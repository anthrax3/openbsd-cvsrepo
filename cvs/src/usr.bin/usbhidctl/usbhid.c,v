head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.10
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.8
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.14
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.12
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.10
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.01.09.02.01.34;	author jcs;	state Exp;
branches;
next	1.13;
commitid	8XkMZef8QCQy7F6H;

1.13
date	2016.01.08.16.59.33;	author jcs;	state Exp;
branches;
next	1.12;
commitid	65aIhoAglhQXQZgp;

1.12
date	2015.12.22.19.46.16;	author mmcc;	state Exp;
branches;
next	1.11;
commitid	hvorvNyf4siAdMmW;

1.11
date	2013.11.27.00.13.23;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.08.02.13.57.32;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.16.18.37.19;	author jakemsr;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.05.42.21;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.04.05.21.27;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.04.00.47.32;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.03.21.01.25;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.10.00.09.17;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.02.20.12.07;	author nate;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.30.07.10.42;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.02.17.55.29;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.14
log
@revert previous now that they are found in usbhid.h again
@
text
@/*	$OpenBSD: usbhid.c,v 1.13 2016/01/08 16:59:33 jcs Exp $	*/
/*      $NetBSD: usbhid.c,v 1.22 2002/02/20 20:30:42 christos Exp $ */

/*
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by David Sainty <David.Sainty@@dtsp.co.nz>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbhid.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <usbhid.h>

/*
 * Zero if not in a verbose mode.  Greater levels of verbosity
 * are indicated by values larger than one.
 */
unsigned int verbose;

/* Parser tokens */
#define DELIM_USAGE '.'
#define DELIM_PAGE ':'
#define DELIM_SET '='

static int reportid;

struct Susbvar {
	/* Variable name, not NUL terminated */
	char const *variable;
	size_t varlen;

	char const *value; /* Value to set variable to */

#define MATCH_ALL		(1 << 0)
#define MATCH_COLLECTIONS	(1 << 1)
#define MATCH_NODATA		(1 << 2)
#define MATCH_CONSTANTS		(1 << 3)
#define MATCH_WASMATCHED	(1 << 4)
#define MATCH_SHOWPAGENAME	(1 << 5)
#define MATCH_SHOWNUMERIC	(1 << 6)
#define MATCH_WRITABLE		(1 << 7)
#define MATCH_SHOWVALUES	(1 << 8)
	unsigned int mflags;

	/* Workspace for hidmatch() */
	ssize_t matchindex;

	int (*opfunc)(struct hid_item *item, struct Susbvar *var,
		      u_int32_t const *collist, size_t collen, u_char *buf);
};

struct Sreport {
	struct usb_ctl_report *buffer;

	enum {srs_uninit, srs_clean, srs_dirty} status;
	int report_id;
	size_t size;
};

static struct {
	int uhid_report;
	hid_kind_t hid_kind;
	char const *name;
} const reptoparam[] = {
#define REPORT_INPUT 0
	{ UHID_INPUT_REPORT, hid_input, "input" },
#define REPORT_OUTPUT 1
	{ UHID_OUTPUT_REPORT, hid_output, "output" },
#define REPORT_FEATURE 2
	{ UHID_FEATURE_REPORT, hid_feature, "feature" }
#define REPORT_MAXVAL 2
};

/*
 * Extract 16-bit unsigned usage ID from a numeric string.  Returns -1
 * if string failed to parse correctly.
 */
static int
strtousage(const char *nptr, size_t nlen)
{
	char *endptr;
	long result;
	char numstr[16];

	if (nlen >= sizeof(numstr) || !isdigit((unsigned char)*nptr))
		return -1;

	/*
	 * We use strtol() here, but unfortunately strtol() requires a
	 * NUL terminated string - which we don't have - at least not
	 * officially.
	 */
	memcpy(numstr, nptr, nlen);
	numstr[nlen] = '\0';

	result = strtol(numstr, &endptr, 0);

	if (result < 0 || result > 0xffff || endptr != &numstr[nlen])
		return -1;

	return result;
}

struct usagedata {
	char const *page_name;
	char const *usage_name;
	size_t page_len;
	size_t usage_len;
	int isfinal;
	u_int32_t usage_id;
};

/*
 * Test a rule against the current usage data.  Returns -1 on no
 * match, 0 on partial match and 1 on complete match.
 */
static int
hidtestrule(struct Susbvar *var, struct usagedata *cache)
{
	char const *varname;
	ssize_t matchindex, pagesplit;
	size_t strind, varlen;
	int numusage;
	u_int32_t usage_id;

	matchindex = var->matchindex;
	varname = var->variable;
	varlen = var->varlen;

	usage_id = cache->usage_id;

	/*
	 * Parse the current variable name, locating the end of the
	 * current 'usage', and possibly where the usage page name
	 * ends.
	 */
	pagesplit = -1;
	for (strind = matchindex; strind < varlen; strind++) {
		if (varname[strind] == DELIM_USAGE)
			break;
		if (varname[strind] == DELIM_PAGE)
			pagesplit = strind;
	}

	if (cache->isfinal && strind != varlen)
		/*
		 * Variable name is too long (hit delimiter instead of
		 * end-of-variable).
		 */
		return -1;

	if (pagesplit >= 0) {
		/*
		 * Page name was specified, determine whether it was
		 * symbolic or numeric.  
		 */
		char const *strstart;
		int numpage;

		strstart = &varname[matchindex];

		numpage = strtousage(strstart, pagesplit - matchindex);

		if (numpage >= 0) {
			/* Valid numeric */

			if (numpage != HID_PAGE(usage_id))
				/* Numeric didn't match page ID */
				return -1;
		} else {
			/* Not a valid numeric */

			/*
			 * Load and cache the page name if and only if
			 * it hasn't already been loaded (it's a
			 * fairly expensive operation).
			 */
			if (cache->page_name == NULL) {
				cache->page_name = hid_usage_page(HID_PAGE(usage_id));
				cache->page_len = strlen(cache->page_name);
			}

			/*
			 * Compare specified page name to actual page
			 * name.
			 */
			if (cache->page_len !=
			    (size_t)(pagesplit - matchindex) ||
			    memcmp(cache->page_name,
				   &varname[matchindex],
				   cache->page_len) != 0)
				/* Mismatch, page name wrong */
				return -1;
		}

		/* Page matches, discard page name */
		matchindex = pagesplit + 1;
	}

	numusage = strtousage(&varname[matchindex], strind - matchindex);

	if (numusage >= 0) {
		/* Valid numeric */

		if (numusage != HID_USAGE(usage_id))
			/* Numeric didn't match usage ID */
			return -1;
	} else {
		/* Not a valid numeric */

		/* Load and cache the usage name */
		if (cache->usage_name == NULL) {
			cache->usage_name = hid_usage_in_page(usage_id);
			cache->usage_len = strlen(cache->usage_name);
		}

		/*
		 * Compare specified usage name to actual usage name
		 */
		if (cache->usage_len != (size_t)(strind - matchindex) ||
		    memcmp(cache->usage_name, &varname[matchindex],
			   cache->usage_len) != 0)
			/* Mismatch, usage name wrong */
			return -1;
	}

	if (cache->isfinal)
		/* Match */
		return 1;

	/*
	 * Partial match: Move index past this usage string +
	 * delimiter
	 */
	var->matchindex = strind + 1;

	return 0;
}

/*
 * hidmatch() determines whether the item specified in 'item', and
 * nested within a hierarchy of collections specified in 'collist'
 * matches any of the rules in the list 'varlist'.  Returns the
 * matching rule on success, or NULL on no match.
 */
static struct Susbvar*
hidmatch(u_int32_t const *collist, size_t collen, struct hid_item *item,
	 struct Susbvar *varlist, size_t vlsize)
{
	size_t colind, vlactive, vlind;
	int iscollection;

	/*
	 * Keep track of how many variables are still "active".  When
	 * the active count reaches zero, don't bother to continue
	 * looking for matches.
	 */
	vlactive = vlsize;

	iscollection = item->kind == hid_collection ||
		item->kind == hid_endcollection;

	for (vlind = 0; vlind < vlsize; vlind++) {
		struct Susbvar *var;

		var = &varlist[vlind];

		var->matchindex = 0;

		if (!(var->mflags & MATCH_COLLECTIONS) && iscollection) {
			/* Don't match collections for this variable */
			var->matchindex = -1;
			vlactive--;
		} else if (!iscollection && !(var->mflags & MATCH_CONSTANTS) &&
			   (item->flags & HIO_CONST)) {
			/*
			 * Don't match constants for this variable,
			 * but ignore the constant bit on collections.
			 */
			var->matchindex = -1;
			vlactive--;
		} else if ((var->mflags & MATCH_WRITABLE) &&
			   ((item->kind != hid_output &&
			     item->kind != hid_feature) ||
			    (item->flags & HIO_CONST))) {
			/*
			 * If we are only matching writable items, if
			 * this is not an output or feature kind, or
			 * it is a constant, reject it.
			 */
			var->matchindex = -1;
			vlactive--;
		} else if (var->mflags & MATCH_ALL) {
			/* Match immediately */
			return &varlist[vlind];
		}
	}

	/*
	 * Loop through each usage in the collection list, including
	 * the 'item' itself on the final iteration.  For each usage,
	 * test which variables named in the rule list are still
	 * applicable - if any.
	 */
	for (colind = 0; vlactive > 0 && colind <= collen; colind++) {
		struct usagedata cache;

		cache.isfinal = (colind == collen);
		if (cache.isfinal)
			cache.usage_id = item->usage;
		else
			cache.usage_id = collist[colind];

		cache.usage_name = NULL;
		cache.page_name = NULL;

		/*
		 * Loop through each rule, testing whether the rule is
		 * still applicable or not.  For each rule,
		 * 'matchindex' retains the current match state as an
		 * index into the variable name string, or -1 if this
		 * rule has been proven not to match.
		 */
		for (vlind = 0; vlind < vlsize; vlind++) {
			struct Susbvar *var;
			int matchres;

			var = &varlist[vlind];

			if (var->matchindex < 0)
				/* Mismatch at a previous level */
				continue;

			matchres = hidtestrule(var, &cache);

			if (matchres < 0) {
				/* Bad match */
				var->matchindex = -1;
				vlactive--;
				continue;
			} else if (matchres > 0) {
				/* Complete match */
				return var;
			}
		}
	}

	return NULL;
}

static void
allocreport(struct Sreport *report, report_desc_t rd, int repindex)
{
	int reptsize;

	reptsize = hid_report_size(rd, reptoparam[repindex].hid_kind, reportid);
	if (reptsize < 0)
		errx(1, "Negative report size");
	report->size = reptsize;

	if (report->size > 0) {
		/*
		 * Allocate a buffer with enough space for the
		 * report in the variable-sized data field.
		 */
		report->buffer = malloc(sizeof(*report->buffer) -
					sizeof(report->buffer->ucr_data) +
					report->size);
		if (report->buffer == NULL)
			err(1, NULL);
	} else
		report->buffer = NULL;

	report->status = srs_clean;
}

static void
freereport(struct Sreport *report)
{
	free(report->buffer);
	report->status = srs_uninit;
}

static void
getreport(struct Sreport *report, int hidfd, report_desc_t rd, int repindex)
{
	if (report->status == srs_uninit) {
		allocreport(report, rd, repindex);
		if (report->size == 0)
			return;

		report->buffer->ucr_report = reptoparam[repindex].uhid_report;
		if (ioctl(hidfd, USB_GET_REPORT, report->buffer) < 0)
			err(1, "USB_GET_REPORT (probably not supported by "
			    "device)");
	}
}

static void
setreport(struct Sreport *report, int hidfd, int repindex)
{
	if (report->status == srs_dirty) {
		report->buffer->ucr_report = reptoparam[repindex].uhid_report;

		if (ioctl(hidfd, USB_SET_REPORT, report->buffer) < 0)
			err(1, "USB_SET_REPORT(%s)",
			    reptoparam[repindex].name);

		report->status = srs_clean;
	}
}

/* ARGSUSED1 */
static int
varop_value(struct hid_item *item, struct Susbvar *var,
	    u_int32_t const *collist, size_t collen, u_char *buf)
{
	printf("%d\n", hid_get_data(buf, item));
	return 0;
}

/* ARGSUSED1 */
static int
varop_display(struct hid_item *item, struct Susbvar *var,
	      u_int32_t const *collist, size_t collen, u_char *buf)
{
	size_t colitem;
	int val, i;

	for (i = 0; i < item->report_count; i++) {
		for (colitem = 0; colitem < collen; colitem++) {
			if (var->mflags & MATCH_SHOWPAGENAME)
				printf("%s:",
				    hid_usage_page(HID_PAGE(collist[colitem])));
			printf("%s.", hid_usage_in_page(collist[colitem]));
		}
		if (var->mflags & MATCH_SHOWPAGENAME)
			printf("%s:", hid_usage_page(HID_PAGE(item->usage)));
		val = hid_get_data(buf, item);
		item->pos += item->report_size;
		if (item->usage_minimum != 0 || item->usage_maximum != 0) {
			val += item->usage_minimum;
			printf("%s=1", hid_usage_in_page(val));
		} else {
			printf("%s=%d%s", hid_usage_in_page(item->usage),
			       val, item->flags & HIO_CONST ? " (const)" : "");
		}
		if (item->report_count > 1)
			printf(" [%d]", i);
		printf("\n");
	}
	return 0;
}

/* ARGSUSED1 */
static int
varop_modify(struct hid_item *item, struct Susbvar *var,
	     u_int32_t const *collist, size_t collen, u_char *buf)
{
	u_int dataval;

	dataval = (u_int)strtol(var->value, NULL, 10);

	hid_set_data(buf, item, dataval);

	if (var->mflags & MATCH_SHOWVALUES)
		/* Display set value */
		varop_display(item, var, collist, collen, buf);

	return 1;
}

static void
reportitem(char const *label, struct hid_item const *item, unsigned int mflags)
{
	int isconst = item->flags & HIO_CONST,
	    isvar = item->flags & HIO_VARIABLE;
	printf("%s size=%d count=%d%s%s page=%s", label,
	       item->report_size, item->report_count,
	       isconst ? " Const" : "",
	       !isvar && !isconst ? " Array" : "",
	       hid_usage_page(HID_PAGE(item->usage)));
	if (item->usage_minimum != 0 || item->usage_maximum != 0) {
		printf(" usage=%s..%s", hid_usage_in_page(item->usage_minimum),
		       hid_usage_in_page(item->usage_maximum));
		if (mflags & MATCH_SHOWNUMERIC)
			printf(" (%u:0x%x..%u:0x%x)",
			       HID_PAGE(item->usage_minimum),
			       HID_USAGE(item->usage_minimum),
			       HID_PAGE(item->usage_maximum),
			       HID_USAGE(item->usage_maximum));
	} else {
		printf(" usage=%s", hid_usage_in_page(item->usage));
		if (mflags & MATCH_SHOWNUMERIC)
			printf(" (%u:0x%x)",
			       HID_PAGE(item->usage), HID_USAGE(item->usage));
	}
	printf(", logical range %d..%d",
	       item->logical_minimum, item->logical_maximum);
	if (item->physical_minimum != item->physical_maximum)
		printf(", physical range %d..%d",
		       item->physical_minimum, item->physical_maximum);
	if (item->unit)
		printf(", unit=0x%02x exp=%d", item->unit,
		       item->unit_exponent);
	printf("\n");
}

/* ARGSUSED1 */
static int
varop_report(struct hid_item *item, struct Susbvar *var,
	     u_int32_t const *collist, size_t collen, u_char *buf)
{
	switch (item->kind) {
	case hid_collection:
		printf("Collection page=%s usage=%s",
		       hid_usage_page(HID_PAGE(item->usage)),
		       hid_usage_in_page(item->usage));
		if (var->mflags & MATCH_SHOWNUMERIC)
			printf(" (%u:0x%x)\n",
			       HID_PAGE(item->usage), HID_USAGE(item->usage));
		else
			printf("\n");
		break;
	case hid_endcollection:
		printf("End collection\n");
		break;
	case hid_input:
		reportitem("Input  ", item, var->mflags);
		break;
	case hid_output:
		reportitem("Output ", item, var->mflags);
		break;
	case hid_feature:
		reportitem("Feature", item, var->mflags);
		break;
	}

	return 0;
}

static void
devloop(int hidfd, report_desc_t rd, struct Susbvar *varlist, size_t vlsize)
{
	u_char *dbuf;
	struct hid_data *hdata;
	size_t collind, dlen;
	struct hid_item hitem;
	u_int32_t colls[128];
	struct Sreport inreport;

	allocreport(&inreport, rd, REPORT_INPUT);

	if (inreport.size <= 0)
		errx(1, "Input report descriptor invalid length");

	dlen = inreport.size;
	dbuf = inreport.buffer->ucr_data;

	for (;;) {
		ssize_t readlen;

		readlen = read(hidfd, dbuf, dlen);
		if (readlen < 0)
			err(1, "Device read error");
		if (dlen != (size_t)readlen)
			errx(1, "Unexpected response length: %lu != %lu",
			     (unsigned long)readlen, (unsigned long)dlen);

		collind = 0;
		hdata = hid_start_parse(rd, 1 << hid_input, reportid);
		if (hdata == NULL)
			errx(1, "Failed to start parser");

		while (hid_get_item(hdata, &hitem)) {
			struct Susbvar *matchvar;

			switch (hitem.kind) {
			case hid_collection:
				if (collind >= (sizeof(colls) / sizeof(*colls)))
					errx(1, "Excessive nested collections");
				colls[collind++] = hitem.usage;
				break;
			case hid_endcollection:
				if (collind == 0)
					errx(1, "Excessive collection ends");
				collind--;
				break;
			case hid_input:
				break;
			case hid_output:
			case hid_feature:
				errx(1, "Unexpected non-input item returned");
			}

			if (reportid != -1 && hitem.report_ID != reportid)
				continue;

			matchvar = hidmatch(colls, collind, &hitem,
					    varlist, vlsize);

			if (matchvar != NULL)
				matchvar->opfunc(&hitem, matchvar,
						 colls, collind,
						 inreport.buffer->ucr_data);
		}
		hid_end_parse(hdata);
		printf("\n");
	}
	/* NOTREACHED */
}

static void
devshow(int hidfd, report_desc_t rd, struct Susbvar *varlist, size_t vlsize,
	int kindset)
{
	struct hid_data *hdata;
	size_t collind, repind, vlind;
	struct hid_item hitem;
	u_int32_t colls[128];
	struct Sreport reports[REPORT_MAXVAL + 1];


	for (repind = 0; repind < (sizeof(reports) / sizeof(*reports));
	     repind++) {
		reports[repind].status = srs_uninit;
		reports[repind].buffer = NULL;
	}

	collind = 0;
	hdata = hid_start_parse(rd, kindset, reportid);
	if (hdata == NULL)
		errx(1, "Failed to start parser");

	while (hid_get_item(hdata, &hitem)) {
		struct Susbvar *matchvar;
		int repindex;

		if (verbose > 3)
			printf("item: kind=%d repid=%d usage=0x%x\n",
			       hitem.kind, hitem.report_ID, hitem.usage);
		repindex = -1;
		switch (hitem.kind) {
		case hid_collection:
			if (collind >= (sizeof(colls) / sizeof(*colls)))
				errx(1, "Excessive nested collections");
			colls[collind++] = hitem.usage;
			break;
		case hid_endcollection:
			if (collind == 0)
				errx(1, "Excessive collection ends");
			collind--;
			break;
		case hid_input:
			repindex = REPORT_INPUT;
			break;
		case hid_output:
			repindex = REPORT_OUTPUT;
			break;
		case hid_feature:
			repindex = REPORT_FEATURE;
			break;
		}

		if (reportid != -1 && hitem.report_ID != reportid)
			continue;

		matchvar = hidmatch(colls, collind, &hitem, varlist, vlsize);

		if (matchvar != NULL) {
			u_char *bufdata;
			struct Sreport *repptr;

			matchvar->mflags |= MATCH_WASMATCHED;

			if (repindex >= 0)
				repptr = &reports[repindex];
			else
				repptr = NULL;

			if (repptr != NULL &&
			    !(matchvar->mflags & MATCH_NODATA))
				getreport(repptr, hidfd, rd, repindex);

			bufdata = (repptr == NULL || repptr->buffer == NULL) ?
				NULL : repptr->buffer->ucr_data;

			if (matchvar->opfunc(&hitem, matchvar, colls, collind,
					     bufdata))
				repptr->status = srs_dirty;
		}
	}
	hid_end_parse(hdata);

	for (repind = 0; repind < (sizeof(reports) / sizeof(*reports));
	     repind++) {
		setreport(&reports[repind], hidfd, repind);
		freereport(&reports[repind]);
	}

	/* Warn about any items that we couldn't find a match for */
	for (vlind = 0; vlind < vlsize; vlind++) {
		struct Susbvar *var;

		var = &varlist[vlind];

		if (var->variable != NULL &&
		    !(var->mflags & MATCH_WASMATCHED))
			warnx("Failed to match: %.*s", (int)var->varlen,
			      var->variable);
	}
}

static void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s -f device [-t table] [-alv]\n",
	    __progname);
	fprintf(stderr, "       %s -f device [-t table] [-v] -r\n",
	    __progname);
	fprintf(stderr,
	    "       %s -f device [-t table] [-lnv] name ...\n",
	    __progname);
	fprintf(stderr,
	    "       %s -f device [-t table] -w name=value ...\n",
	    __progname);
	exit(1);
}

int
main(int argc, char **argv)
{
	char const *dev;
	char const *table;
	size_t varnum;
	int aflag, lflag, nflag, rflag, wflag;
	int ch, hidfd;
	report_desc_t repdesc;
	char devnamebuf[PATH_MAX];
	struct Susbvar variables[128];

	wflag = aflag = nflag = verbose = rflag = lflag = 0;
	dev = NULL;
	table = NULL;
	while ((ch = getopt(argc, argv, "?af:lnrt:vw")) != -1) {
		switch (ch) {
		case 'a':
			aflag = 1;
			break;
		case 'f':
			dev = optarg;
			break;
		case 'l':
			lflag = 1;
			break;
		case 'n':
			nflag = 1;
			break;
		case 'r':
			rflag = 1;
			break;
		case 't':
			table = optarg;
			break;
		case 'v':
			verbose++;
			break;
		case 'w':
			wflag = 1;
			break;
		case '?':
		default:
			usage();
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;
	if (dev == NULL || (lflag && (wflag || rflag))) {
		/*
		 * No device specified, or attempting to loop and set
		 * or dump report at the same time
		 */
		usage();
		/* NOTREACHED */
	}

	if (argc == 0 && rflag == 0)
		aflag = 1;

	for (varnum = 0; varnum < (size_t)argc; varnum++) {
		char const *name, *valuesep;
		struct Susbvar *svar;

		svar = &variables[varnum];
		name = argv[varnum];
		valuesep = strchr(name, DELIM_SET);

		svar->variable = name;
		svar->mflags = 0;

		if (valuesep == NULL) {
			/* Read variable */
			if (wflag)
				errx(1, "Must not specify -w to read variables");
			svar->value = NULL;
			svar->varlen = strlen(name);

			if (nflag) {
				/* Display value of variable only */
				svar->opfunc = varop_value;
			} else {
				/* Display name and value of variable */
				svar->opfunc = varop_display;

				if (verbose >= 1)
					/* Show page names in verbose modes */
					svar->mflags |= MATCH_SHOWPAGENAME;
			}
		} else {
			/* Write variable */
			if (!wflag)
				errx(2, "Must specify -w to set variables");
			svar->mflags |= MATCH_WRITABLE;
			if (verbose >= 1)
				/*
				 * Allow displaying of set value in
				 * verbose mode.  This isn't
				 * particularly useful though, so
				 * don't bother documenting it.
				 */
				svar->mflags |= MATCH_SHOWVALUES;
			svar->varlen = valuesep - name;
			svar->value = valuesep + 1;
			svar->opfunc = varop_modify;
		}
	}

	if (aflag || rflag) {
		struct Susbvar *svar;

		svar = &variables[varnum++];

		svar->variable = NULL;
		svar->mflags = MATCH_ALL;

		if (rflag) {
			/*
			 * Dump report descriptor.  Do dump collection
			 * items also, and hint that it won't be
			 * necessary to get the item status.
			 */
			svar->opfunc = varop_report;
			svar->mflags |= MATCH_COLLECTIONS | MATCH_NODATA;

			switch (verbose) {
			default:
				/* Level 2: Show item numerics and constants */
				svar->mflags |= MATCH_SHOWNUMERIC;
				/* FALLTHROUGH */
			case 1:
				/* Level 1: Just show constants */
				svar->mflags |= MATCH_CONSTANTS;
				/* FALLTHROUGH */
			case 0:
				break;
			}
		} else {
			/* Display name and value of variable */
			svar->opfunc = varop_display;

			switch (verbose) {
			default:
				/* Level 2: Show constants and page names */
				svar->mflags |= MATCH_CONSTANTS;
				/* FALLTHROUGH */
			case 1:
				/* Level 1: Just show page names */
				svar->mflags |= MATCH_SHOWPAGENAME;
				/* FALLTHROUGH */
			case 0:
				break;
			}
		}
	}

	if (varnum == 0) {
		/* Nothing to do...  Display usage information. */
		usage();
		/* NOTREACHED */
	}

	if (hid_start(table) == -1)
		errx(1, "hid_init");

	if (dev[0] != '/') {
		snprintf(devnamebuf, sizeof(devnamebuf), "/dev/%s%s",
			 isdigit((unsigned char)dev[0]) ? "uhid" : "", dev);
		dev = devnamebuf;
	}

	hidfd = open(dev, wflag ? O_RDWR : O_RDONLY);
	if (hidfd < 0)
		err(1, "%s", dev);

	if (ioctl(hidfd, USB_GET_REPORT_ID, &reportid) < 0)
		reportid = -1;
	if (verbose > 1)
		printf("report ID=%d\n", reportid);
	repdesc = hid_get_report_desc(hidfd);
	if (repdesc == 0)
		errx(1, "USB_GET_REPORT_DESC");

	if (lflag) {
		devloop(hidfd, repdesc, variables, varnum);
		/* NOTREACHED */
	}

	if (rflag)
		/* Report mode header */
		printf("Report descriptor:\n");

	devshow(hidfd, repdesc, variables, varnum,
		1 << hid_input |
		1 << hid_output |
		1 << hid_feature);

	if (rflag) {
		/* Report mode trailer */
		size_t repindex;
		for (repindex = 0;
		     repindex < (sizeof(reptoparam) / sizeof(*reptoparam));
		     repindex++) {
			int size;
			size = hid_report_size(repdesc,
					       reptoparam[repindex].hid_kind,
					       reportid);
			printf("Total %7s size %d bytes\n",
			       reptoparam[repindex].name, size);
		}
	}

	hid_dispose_report_desc(repdesc);
	exit(0);
	/* NOTREACHED */
}
@


1.13
log
@redefine 3 UHID_* vars that moved
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.12 2015/12/22 19:46:16 mmcc Exp $	*/
a47 4

#define UHID_INPUT_REPORT 0x01
#define UHID_OUTPUT_REPORT 0x02
#define UHID_FEATURE_REPORT 0x03
@


1.12
log
@remove a NULL-check before free()
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.11 2013/11/27 00:13:23 deraadt Exp $	*/
d48 4
@


1.11
log
@unsigned char for ctype
ok okan
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.10 2010/08/02 13:57:32 miod Exp $	*/
d415 1
a415 2
	if (report->buffer != NULL)
		free(report->buffer);
@


1.10
log
@Only open with O_RDWR if we are actually chaging a report descriptor, other
operations only need O_RDONLY.
ok blambert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.9 2008/10/16 18:37:19 jakemsr Exp $	*/
d936 1
a936 1
			 isdigit(dev[0]) ? "uhid" : "", dev);
@


1.9
log
@
make -a the default when no other options besides the required
-f are used

input from and ok sthen@@, jmc@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.8 2008/06/26 05:42:21 ray Exp $	*/
d940 1
a940 1
	hidfd = open(dev, O_RDWR);
@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.7 2004/10/04 05:21:27 jsg Exp $	*/
d755 1
a755 1
	fprintf(stderr, "Usage: %s -f device [-t table] [-lv] -a\n",
d825 3
@


1.7
log
@hierarchy is spelt hierarchy, ok djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.6 2004/06/04 00:47:32 deraadt Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@knf + new interface: hid_start() is non-exit non-stderr spewing version of hid_init(); ok matthieu millert
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.5 2004/04/03 21:01:25 jmc Exp $	*/
d284 1
a284 1
 * nested within a heirarchy of collections specified in 'collist'
@


1.5
log
@- correct SYNOPSIS
- sync usage()
- some small tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.4 2002/05/10 00:09:17 nate Exp $	*/
d935 2
a936 1
	hid_init(table);
@


1.4
log
@Update usb userland stuff to reflect hid changes in the kernel.
This adds the new program usbhidaction which can be used to assign actions
to events that occur on a uhid device.  For example, you can now make the
volume buttons on some newer keyboards actually do something.
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.3 2002/05/02 20:12:07 nate Exp $	*/
d762 1
a762 1
	fprintf(stderr, "Usage: %s -f device [-t tablefile] [-l] [-v] -a\n",
d764 1
a764 1
	fprintf(stderr, "       %s -f device [-t tablefile] [-v] -r\n",
d767 1
a767 1
	    "       %s -f device [-t tablefile] [-l] [-n] [-v] name ...\n",
d770 1
a770 1
	    "       %s -f device [-t tablefile] -w name=value ...\n",
@


1.3
log
@userland portion of prefixing usb structure members to avoid name clashes.
From NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: usbhid.c,v 1.2 2001/12/30 07:10:42 pvalchev Exp $	*/
/*      $NetBSD: usbhid.c,v 1.17 2001/03/28 03:17:42 simonb Exp $ */
d5 1
a5 1
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
d56 6
d67 1
a67 3
/* Zero if not in a verbose mode.  Greater levels of verbosity are
   indicated by values larger than one. */
static unsigned int verbose;
d84 1
d116 172
d292 1
a292 1
	size_t vlind, colind, vlactive;
d341 6
d348 1
a348 6
		char const *usage_name, *page_name;
		size_t usage_len, page_len;
		int final;
		u_int32_t usage_id;

		final = (colind == collen);
d350 3
a352 2
		if (final)
			usage_id = item->usage;
d354 1
a354 1
			usage_id = collist[colind];
d356 2
a357 4
		usage_name = hid_usage_in_page(usage_id);
		usage_len = strlen(usage_name);

		page_name = NULL;
d359 7
a366 3
			ssize_t matchindex, pagesplit;
			size_t varlen, strind;
			char const *varname;
d368 1
d372 1
a372 5
			matchindex = var->matchindex;
			varname = var->variable;
			varlen = var->varlen;

			if (matchindex < 0)
d376 1
a376 7
			pagesplit = -1;
			for (strind = matchindex; strind < varlen; strind++) {
				if (varname[strind] == DELIM_USAGE)
					break;
				if (varname[strind] == DELIM_PAGE)
					pagesplit = strind;
			}
d378 2
a379 6
			if (final && strind != varlen) {
				/*
				 * Variable name is too long (hit
				 * delimiter instead of
				 * end-of-variable)
				 */
d383 3
a386 38

			if (pagesplit >= 0) {
				if (page_name == NULL) {
					page_name = hid_usage_page(HID_PAGE(usage_id));
					page_len = strlen(page_name);
				}
				if (page_len !=
				    (size_t)(pagesplit - matchindex) ||
				    memcmp(page_name, &varname[matchindex],
					   page_len) != 0) {
					/* Mismatch, page name wrong */
					var->matchindex = -1;
					vlactive--;
					continue;
				}

				/* Page matches, discard page name */
				matchindex = pagesplit + 1;
			}

			if (usage_len != strind - matchindex ||
			    memcmp(usage_name, &varname[matchindex],
				   usage_len) != 0) {
				/* Mismatch, usage name wrong */
				var->matchindex = -1;
				vlactive--;
				continue;
			}

			if (final)
				/* Match */
				return var;

			/*
			 * Partial match: Move index past this usage
			 * string + delimiter
			 */
			var->matchindex = matchindex + usage_len + 1;
d398 1
a398 2
	reptsize = hid_report_size(rd, reptoparam[repindex].hid_kind,
				   &report->report_id);
d437 2
a438 1
			err(1, "USB_GET_REPORT");
d471 1
d473 7
a479 1
	for (colitem = 0; colitem < collen; colitem++) {
d481 13
a493 3
			printf("%s:",
			       hid_usage_page(HID_PAGE(collist[colitem])));
		printf("%s.", hid_usage_in_page(collist[colitem]));
a494 6

	if (var->mflags & MATCH_SHOWPAGENAME)
		printf("%s:", hid_usage_page(HID_PAGE(item->usage)));
	printf("%s=%d%s\n", hid_usage_in_page(item->usage),
	       hid_get_data(buf, item),
	       (item->flags & HIO_CONST) ? " (const)" : "");
d509 2
a510 6
	if (verbose >= 1)
		/*
		 * Allow displaying of set value in verbose mode.
		 * This isn't particularly useful though, so don't
		 * bother documenting it.
		 */
d519 3
a521 1
	printf("%s size=%d count=%d page=%s usage=%s%s", label,
d523 18
a540 6
	       hid_usage_page(HID_PAGE(item->usage)),
	       hid_usage_in_page(item->usage),
	       item->flags & HIO_CONST ? " Const" : "");
	if (mflags & MATCH_SHOWNUMERIC)
		printf(" (%u/0x%x)",
		       HID_PAGE(item->usage), HID_USAGE(item->usage));
d559 1
a559 1
		printf("Collection page=%s usage=%s\n",
d562 5
d588 1
d590 1
a593 3
	size_t dlen;
	u_char *dbuf;
	size_t collind;
d607 5
a611 3
		if (readlen < 0 || dlen != (size_t)readlen)
			err(1, "bad read %ld != %ld",
			    (long)readlen, (long)dlen);
d614 1
a614 1
		hdata = hid_start_parse(rd, 1 << hid_input);
d639 3
d661 1
a663 2
	size_t collind, repind, vlind;

d674 1
a674 3
	hdata = hid_start_parse(rd, kindset |
				(1 << hid_collection) |
				(1 << hid_endcollection));
d682 3
d708 3
d778 5
a782 1
	int hidfd;
a784 4
	char const *dev;
	int ch, wflag, aflag, nflag, rflag, lflag;
	size_t varnum;
	char const *table;
d867 8
d947 4
a968 11
#if 0
	{
		size_t repindex;
		for (repindex = 0;
		     repindex < (sizeof(reptoparam) / sizeof(*reptoparam));
		     repindex++)
			devshow(hidfd, repdesc, variables, varnum,
				1 << reptoparam[repindex].hid_kind);
	}
#endif

d975 1
a975 1
			int report_id, size;
d978 3
a980 5
					       &report_id);
			size -= report_id != 0;
			printf("Total %7s size %s%d bytes\n",
			       reptoparam[repindex].name,
			       report_id && size ? "1+" : "", size);
@


1.2
log
@libusb has been renamed
@
text
@d1 1
a1 1
/*	$OpenBSD: usbhid.c,v 1.1 2001/09/02 17:55:29 pvalchev Exp $	*/
d277 1
a277 1
					sizeof(report->buffer->data) +
d303 1
a303 1
		report->buffer->report = reptoparam[repindex].uhid_report;
d313 1
a313 1
		report->buffer->report = reptoparam[repindex].uhid_report;
d443 1
a443 1
	dbuf = inreport.buffer->data;
d485 1
a485 1
						 inreport.buffer->data);
d563 1
a563 1
				NULL : repptr->buffer->data;
@


1.1
log
@program to manipulate USB HID devices
from NetBSD, reviewed by jakob
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 1
#include <usb.h>
@

