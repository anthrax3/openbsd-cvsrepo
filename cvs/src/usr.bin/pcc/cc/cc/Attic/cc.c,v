head	1.19;
access;
symbols
	ragge20070915:1.1.1.1 ragge:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2007.10.07.17.58.51;	author otto;	state dead;
branches;
next	1.18;

1.18
date	2007.10.04.07.05.01;	author gilles;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.04.06.30.10;	author gilles;	state Exp;
branches;
next	1.16;

1.16
date	2007.10.03.08.10.38;	author otto;	state Exp;
branches;
next	1.15;

1.15
date	2007.10.01.18.51.02;	author otto;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.28.08.48.58;	author ragge;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.27.20.00.23;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.24.16.04.01;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.23.18.36.30;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.19.21.42.06;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.19.16.08.33;	author todd;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.19.15.21.07;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.19.15.00.01;	author todd;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.18.07.16.01;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.17.18.29.20;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.17.07.40.06;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.16.18.44.56;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.15.22.04.38;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.15.18.12.32;	author otto;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.09.15.18.12.32;	author otto;	state Exp;
branches;
next	;


desc
@@


1.19
log
@reorg pcc tree; requested by and ok deraadt@@; ok ragge@@
@
text
@/*	$OpenBSD: cc.c,v 1.18 2007/10/04 07:05:01 gilles Exp $	*/
/*
 * Copyright(C) Caldera International Inc. 2001-2002. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code and documentation must retain the above
 * copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditionsand the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 * 	This product includes software developed or owned by Caldera
 *	International, Inc.
 * Neither the name of Caldera International, Inc. nor the names of other
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
 * INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OFLIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Front-end to the C compiler.
 *
 * Brief description of its syntax:
 * - Files that end with .c are passed via cpp->ccom->as->ld
 * - Files that end with .i are passed via ccom->as->ld
 * - Files that end with .s are passed as->ld
 * - Files that end with .o are passed directly to ld
 * - Multiple files may be given on the command line.
 * - Unrecognized options are all sent directly to ld.
 * -c or -S cannot be combined with -o if multiple files are given.
 *
 * This file should be rewritten readable.
 */
#include <sys/types.h>
#include <sys/wait.h>

#include <stdio.h>
#include <ctype.h>
#include <signal.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdarg.h>
#include <libgen.h>
#include <errno.h>

#include "../../config.h"

#include "ccconfig.h"
/* C command */

#define	MKS(x) _MKS(x)
#define _MKS(x) #x

/*
 * Many specific definitions, should be declared elsewhere.
 */
#define	STDINC	  "/usr/include"

#define SBSIZE 10000
#define MAXINC 100
#define MAXFIL 10000
#define MAXLIB 10000
#define MAXAV  10000
#define MAXOPT 100
char	*tmp3;
char	*tmp4;
char	*outfile;
char *copy(char *as),*setsuf(char *as, char ch);
int getsuf(char []);
int main(int, char *[]);
void error(char *, ...);
void errorx(int eval, char *, ...);
int nodup(char **, char *);
int callsys(char [], char *[]);
int cunlink(char *);
void dexit(int eval);
void idexit(int);
char *gettmp();
char	*av[MAXAV];
char	*clist[MAXFIL];
char	*llist[MAXLIB];
char	alist[20];
char	*xlist[100];
int	xnum;
int	Cflag;
int	dflag;
int	pflag;
int	sflag;
int	cflag;
int	eflag;
int	gflag;
int	vflag;
int	tflag;
int	Eflag;
int	Oflag;
int	kflag;	/* generate PIC/pic code */
#define F_PIC	1
#define F_pic	2
int	Mflag;	/* dependencies only */
int	pgflag;
int	exfail;
int	Xflag;
int	nostartfiles, Bstatic;
int	nostdinc, nostdlib;
int	onlyas;
int	pthreads;

char	*pass0;
char	*passp = LIBEXECDIR "/cpp";
char	*Bflag;
char *cppadd[] = CPPADD;
char *dynlinker[] = DYNLINKER;
char *crt0file = CRT0FILE;
char *startfiles[] = STARTFILES;
char *endfiles[] = ENDFILES;
char *mach = DEFMACH;
struct cppmd {
	char *mach;
	char *cppmdadd[MAXCPPMDARGS];
};

struct cppmd cppmds[] = CPPMDADDS;
#ifdef LIBCLIBS
char *libclibs[] = LIBCLIBS;
#else
char *libclibs[] = { "-lc", NULL };
#endif
#ifndef STARTLABEL
#define STARTLABEL "__start"
#endif

int
main(int argc, char *argv[])
{
	char *t, *u;
	char *assource;
	char **pv, *ptemp[MAXOPT], **pvt;
	int nc, nl, i, j, k, c, nxo, na;

	i = nc = nl = nxo = 0;
	pv = ptemp;
	while(++i < argc) {
		if (argv[i][0] == '-') {
			switch (argv[i][1]) {
			default:
				goto passa;
				
			case 'B': /* other search paths for binaries */
				Bflag = &argv[i][2];
				break;
				
			case 'b':
				if (strncmp(argv[i+1], "?", 1) == 0) {
					/* show machine targets */
					printf("Available machine targets:");
					for (j=0; cppmds[j].mach; j++)
						printf(" %s",cppmds[j].mach);
					printf("\n");
					exit(0);
				}
				for (j=0; cppmds[j].mach; j++)
					if (strcmp(argv[i+1],cppmds[j].mach) == 0)
						mach = cppmds[j].mach;
				break;
				
			case 'X':
				Xflag++;
				break;
			case 'W': /* Ignore (most of) W-flags */
				if (strncmp(argv[i], "-Wl,", 4) == 0) {
					/* options to the linker */
					t = &argv[i][4];
					while ((u = strchr(t, ','))) {
						*u++ = 0;
						llist[nl++] = t;
						t = u;
					}
					llist[nl++] = t;
				}
				break;
				
			case 'f': /* GCC compatibility flags */
				if (strcmp(argv[i], "-fPIC") == 0)
					kflag = F_PIC;
				if (strcmp(argv[i], "-fpic") == 0)
					kflag = F_pic;
				/* silently ignore the rest */
				break;
				
			case 'g': /* create debug output */
				gflag++;
				break;
				
			case 'i':
				if (strcmp(argv[i], "-isystem") == 0) {
					*pv++ = "-S";
					*pv++ = argv[++i];
				} else if (strcmp(argv[i], "-include") == 0) {
					*pv++ = "-i";
					*pv++ = argv[++i];
				} else
					goto passa;
				break;
				
			case 'k': /* generate PIC code */
				kflag = F_pic;
				break;
				
			case 'n': /* handle -n flags */
				if (strcmp(argv[i], "-nostdinc") == 0)
					nostdinc++;
				else if (strcmp(argv[i], "-nostdlib") == 0) {
					nostdlib++;
					nostartfiles++;
				} else if (strcmp(argv[i], "-nostartfiles") == 0)
					nostartfiles = 1;
				else
					goto passa;
				break;
				
			case 'p':
				if (strcmp(argv[i], "-pg") == 0)
					pgflag++;
				else if (strcmp(argv[i], "-pthread") == 0)
					pthreads++;
				else if (strcmp(argv[i], "-pipe") == 0)
					/* NOTHING YET */;
				else
					errorx(1, "unknown option %s", argv[i]);
				break;
				
			case 'x':
				xlist[xnum++] = argv[i];
				break;
			case 't':
				tflag++;
				break;
			case 'S':
				sflag++;
				cflag++;
				break;
			case 'o':
				if (outfile)
					errorx(8, "too many -o");
				outfile = argv[++i];
				break;
			case 'O':
				Oflag++;
				break;
			case 'E':
				Eflag++;
				break;
			case 'P':
				pflag++;
				*pv++ = argv[i];
			case 'c':
				cflag++;
				break;
				
#if 0
			case '2':
				if(argv[i][2] == '\0')
					pref = "/lib/crt2.o";
				else {
					pref = "/lib/crt20.o";
				}
				break;
#endif
			case 'C':
				Cflag = 1;
				break;
			case 'D':
			case 'I':
			case 'U':
				*pv++ = argv[i];
				if (argv[i][2] == 0)
					*pv++ = argv[++i];
				if (pv >= ptemp+MAXOPT)
				{
					error("Too many DIU options");
					--pv;
				}
				break;
				
			case 'M':
				Mflag++;
				break;
				
			case 'd':
				dflag++;
				strlcpy(alist, argv[i], sizeof (alist));
				break;
			case 'v':
				printf("%s\n", VERSSTR);
				vflag++;
				break;
				
			case 's':
				if (strcmp(argv[i], "-static") == 0)
					Bstatic = 1;
				else
					goto passa;
				break;
			}
		} else {
		passa:
			t = argv[i];
			if (*argv[i] == '-' && argv[i][1] == 'L')
				;
			else if((c=getsuf(t))=='c' || c=='S' || c=='i' ||
			    c=='s'|| Eflag) {
				clist[nc++] = t;
				if (nc>=MAXFIL)
					{
					error("Too many source files");
					exit(1);
					}
				t = setsuf(t, 'o');
			}
			if (nodup(llist, t)) {
				llist[nl++] = t;
				if (nl >= MAXLIB)
					{
					error("Too many object/library files");
					exit(1);
					}
				if (getsuf(t)=='o')
					nxo++;
			}
		}
	}
	/* Sanity checking */
	if (nc == 0 && nl == 0)
		errorx(8, "no input files");
	if (outfile && (cflag || sflag || Eflag) && nc > 1)
		errorx(8, "-o given with -c || -E || -S and more than one file");
	if (outfile && clist[0] && strcmp(outfile, clist[0]) == 0)
		errorx(8, "output file will be clobbered");
#if 0
	for(i=0, j=0; i<nc; i++) {
		if((c=getsuf(clist[i]))=='c' || c=='S') {
			j++;
			break;
		}
	}
	if (j==0 && Eflag)
		errorx(8, "no file to be preprocessed");
#endif

	if (gflag) Oflag = 0;
#if 0
	if (proflag)
		pref = "/lib/mcrt0.o";
#endif
	if(nc==0)
		goto nocom;
	if (pflag==0) {
		tmp3 = gettmp();
		tmp4 = gettmp();
	}
	if (signal(SIGINT, SIG_IGN) != SIG_IGN)	/* interrupt */
		signal(SIGINT, idexit);
	if (signal(SIGTERM, SIG_IGN) != SIG_IGN)	/* terminate */
		signal(SIGTERM, idexit);
	asprintf(&pass0, "%s%s%s", LIBEXECDIR, "/ccom_", mach);
	pvt = pv;
	for (i=0; i<nc; i++) {
		/*
		 * C preprocessor
		 */
		if (nc>1 && !Eflag)
			printf("%s:\n", clist[i]);
		onlyas = 0;
		assource = tmp3;
		if (getsuf(clist[i])=='i') {
			if(Eflag)
				continue;
			goto com;
		} else if (getsuf(clist[i])=='s') {
			assource = clist[i];
			onlyas = 1;
			goto assemble;
		} else if (getsuf(clist[i])=='S') {
			assource = clist[i];
			onlyas = 1;
		}
		if (pflag)
			tmp4 = setsuf(clist[i], 'i');
		na = 0;
		av[na++] = "cpp";
		if (vflag)
			av[na++] = "-v";
		av[na++] = "-D__PCC__=" MKS(PCC_MAJOR);
		av[na++] = "-D__PCC_MINOR__=" MKS(PCC_MINOR);
		av[na++] = "-D__PCC_MINORMINOR__=" MKS(PCC_MINORMINOR);
		if (getsuf(clist[i])=='S')
			av[na++] = "-D__ASSEMBLER__";
		if (pthreads)
			av[na++] = "-D_PTHREADS";
		if (Cflag)
			av[na++] = "-C";
		if (Mflag)
			av[na++] = "-M";
		if (dflag)
			av[na++] = alist;
		for (j = 0; cppadd[j]; j++)
			av[na++] = cppadd[j];
		for (k = 0; cppmds[k].mach; k++) {
			if (strcmp(cppmds[k].mach, mach) != 0)
				continue;
			for (j = 0; cppmds[k].cppmdadd[j]; j++)
				av[na++] = cppmds[k].cppmdadd[j];
			break;
		}
		if (tflag)
			av[na++] = "-t";
		for(pv=ptemp; pv <pvt; pv++)
			av[na++] = *pv;
		if (!nostdinc)
			av[na++] = "-S", av[na++] = STDINC;
		av[na++] = clist[i];
		if (!Eflag && !Mflag)
			av[na++] = tmp4;
		if (Eflag && outfile)
			 av[na++] = outfile;
		av[na++]=0;
		if (callsys(passp, av))
			{exfail++; eflag++;}
		if (Eflag || Mflag)
			continue;
		if (onlyas)
			goto assemble;

		/*
		 * C compiler
		 */
	com:
		na = 0;
		av[na++]= "ccom";
		if (vflag)
			av[na++] = "-v";
		if (gflag)
			av[na++] = "-g";
		if (kflag)
			av[na++] = "-k";
		if (Oflag) {
			av[na++] = "-xtemps";
			av[na++] = "-xdeljumps";
		}
		for (j = 0; j < xnum; j++)
			av[na++] = xlist[j];
		av[na++] = tmp4;
		if (pflag || exfail)
			{
			cflag++;
			continue;
			}
		if(sflag) {
			if (outfile)
				assource = tmp3 = outfile;
			else
				assource = tmp3 = setsuf(clist[i], 's');
		}
		av[na++] = tmp3;
#if 0
		if (proflag) {
			av[3] = "-XP";
			av[4] = 0;
		} else
			av[3] = 0;
#endif
		av[na++] = NULL;
		if (callsys(pass0, av)) {
			cflag++;
			eflag++;
			continue;
		}
		if (sflag)
			continue;

		/*
		 * Assembler
		 */
	assemble:
		na = 0;
		av[na++] = "as";
		if (vflag)
			av[na++] = "-v";
		if (kflag)
			av[na++] = "-k";
		av[na++] = "-o";
		if (outfile && cflag)
			av[na++] = outfile;
		else
			av[na++] = setsuf(clist[i], 'o');
		av[na++] = onlyas ? tmp4 : assource;
		if (dflag)
			av[na++] = alist;
		av[na++] = 0;
		if (callsys("/bin/as", av)) {
			cflag++;
			eflag++;
			cunlink(tmp4);
			continue;
		}
		cunlink(tmp4);
	}

	if (Eflag || Mflag)
		dexit(eflag);

	/*
	 * Linker
	 */
nocom:
	if (cflag==0 && nl!=0) {
		j = 0;
		av[j++] = "ld";
		if (vflag)
			av[j++] = "-v";
		av[j++] = "-X";
		av[j++] = "-d";
		av[j++] = "-e";
		av[j++] = STARTLABEL;
		if (Bstatic == 0) { /* Dynamic linkage */
			for (i = 0; dynlinker[i]; i++)
				av[j++] = dynlinker[i];
		} else
			av[j++] = "-Bstatic";
		if (outfile) {
			av[j++] = "-o";
			av[j++] = outfile;
		}
		if (!nostartfiles) {
			av[j++] = crt0file;
			for (i = 0; startfiles[i]; i++)
				av[j++] = startfiles[i];
		}
		i = 0;
		while(i<nl) {
			av[j++] = llist[i++];
			if (j >= MAXAV)
				error("Too many ld options");
		}
		if (gflag)
			av[j++] = "-g";
#if 0
		if (gflag)
			av[j++] = "-lg";
#endif
		if (pthreads)
			av[j++] = "-lpthread";
		if (!nostdlib)
			for (i = 0; libclibs[i]; i++)
				av[j++] = libclibs[i];
		if (!nostartfiles) {
			for (i = 0; endfiles[i]; i++)
				av[j++] = endfiles[i];
		}
		av[j++] = 0;
		eflag |= callsys("/bin/ld", av);
		if (nc==1 && nxo==1 && eflag==0)
			cunlink(setsuf(clist[0], 'o'));
		else if (nc > 0 && eflag == 0) {
			/* remove .o files XXX ugly */
			for (i = 0; i < nc; i++)
				cunlink(setsuf(clist[i], 'o'));
		}
	}
	dexit(eflag);
	return 0;
}

/*
 * exit and cleanup after interrupt.
 */
void
idexit(int arg)
{
	dexit(100);
}

/*
 * exit and cleanup.
 */
void
dexit(int eval)
{
	if (!pflag && !Xflag) {
		if (sflag==0)
			cunlink(tmp3);
		cunlink(tmp4);
	}
	exit(eval);
}

static void
ccerror(char *s, va_list ap)
{
	vfprintf(Eflag ? stderr : stdout, s, ap);
	putc('\n', Eflag? stderr : stdout);
	exfail++;
	cflag++;
	eflag++;
}

/*
 * complain a bit.
 */
void
error(char *s, ...)
{
	va_list ap;

	va_start(ap, s);
	ccerror(s, ap);
	va_end(ap);
}

/*
 * complain a bit and then exit.
 */
void
errorx(int eval, char *s, ...)
{
	va_list ap;

	va_start(ap, s);
	ccerror(s, ap);
	va_end(ap);
	dexit(eval);
}

int
getsuf(as)
char as[];
{
	register char *s;

	if ((s = strrchr(as, '.')) && s[1] != '\0' && s[2] == '\0')
		return s[1];
	return(0);
}

/*
 * Get basename of string s and change its suffix to ch.
 */
char *
setsuf(char *s, char ch)
{
	s = copy(basename(s));
	s[strlen(s) - 1] = ch;
	return(s);
}

int
callsys(char f[], char *v[])
{
	int status;
	pid_t t;
	char *s;

	if (vflag) {
		fprintf(stderr, "%s ", f);
		for (t = 1; v[t]; t++)
			fprintf(stderr, "%s ", v[t]);
		fprintf(stderr, "\n");
	}

	if ((t=fork())==0) {
		if (Bflag) {
			size_t len = strlen(Bflag) + 8;
			char *a = malloc(len);
			if (a == NULL)
				errorx(1, "callsys: malloc failed\n");
			if ((s = strrchr(f, '/'))) {
				strlcpy(a, Bflag, len);
				strlcat(a, s, len);
				execv(a, v);
			}
		}
		execv(f, v);
		if ((s = strrchr(f, '/')))
			execvp(s+1, v);
		printf("Can't find %s\n", f);
		exit(100);
	} else
		if (t == -1) {
			printf("Try again\n");
			return(100);
		}
	while(t!=wait(&status));
	if ((t=(status&0377)) != 0 && t!=14) {
		if (t!=2)		/* interrupt */
			errorx(8, "Fatal error in %s", f);
		dexit(eflag);
	}
	return((status>>8) & 0377);
}

char *
copy(char *as)
{
	char *p;

	if ((p = strdup(as)) == NULL)
		errorx(8, "no space for file names");

	return p;
}

int
nodup(l, os)
char **l, *os;
{
	register char *t, *s;
	register int c;

	s = os;
	if (getsuf(s) != 'o')
		return(1);
	while((t = *l++)) {
		while((c = *s++))
			if (c != *t++)
				break;
		if (*t=='\0' && c=='\0')
			return(0);
		s = os;
	}
	return(1);
}

int
cunlink(f)
char *f;
{
	if (f==0 || Xflag)
		return(0);
	return(unlink(f));
}

char *
gettmp()
{
	char *sfn = strdup("/tmp/ctm.XXXXXX");
	int fd = -1;

	if ((fd = mkstemp(sfn)) == -1) {
		fprintf(stderr, "%s: %s\n", sfn, strerror(errno));
		exit(8);
	}
	close(fd);

	return sfn;
}
@


1.18
log
@strncpy -> strlcpy

ok ragge
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.17 2007/10/04 06:30:10 gilles Exp $	*/
@


1.17
log
@fix indentation on options parsing

ok otto and ragge
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.16 2007/10/03 08:10:38 otto Exp $	*/
d309 1
a309 1
				strncpy(alist, argv[i], 19);
@


1.16
log
@pull form ragge's repo:
Pass -g onto linker.  From Laurent Desnogues.
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.15 2007/10/01 18:51:02 otto Exp $	*/
d161 18
a178 13
		if (argv[i][0] == '-')
		switch (argv[i][1]) {
		default:
			goto passa;

		case 'B': /* other search paths for binaries */
			Bflag = &argv[i][2];
			break;

		case 'b':
			if (strncmp(argv[i+1], "?", 1) == 0) {
				/* show machine targets */
				printf("Available machine targets:");
d180 16
a195 18
					printf(" %s",cppmds[j].mach);
				printf("\n");
				exit(0);
			}
			for (j=0; cppmds[j].mach; j++)
				if (strcmp(argv[i+1],cppmds[j].mach) == 0)
					mach = cppmds[j].mach;
			break;

		case 'X':
			Xflag++;
			break;
		case 'W': /* Ignore (most of) W-flags */
			if (strncmp(argv[i], "-Wl,", 4) == 0) {
				/* options to the linker */
				t = &argv[i][4];
				while ((u = strchr(t, ','))) {
					*u++ = 0;
a196 1
					t = u;
d198 26
a223 8
				llist[nl++] = t;
			}
			break;

		case 'f': /* GCC compatibility flags */
			if (strcmp(argv[i], "-fPIC") == 0)
				kflag = F_PIC;
			if (strcmp(argv[i], "-fpic") == 0)
d225 53
a277 73
			/* silently ignore the rest */
			break;

		case 'g': /* create debug output */
			gflag++;
			break;

		case 'i':
			if (strcmp(argv[i], "-isystem") == 0) {
				*pv++ = "-S";
				*pv++ = argv[++i];
			} else if (strcmp(argv[i], "-include") == 0) {
				*pv++ = "-i";
				*pv++ = argv[++i];
			} else
				goto passa;
			break;

		case 'k': /* generate PIC code */
			kflag = F_pic;
			break;

		case 'n': /* handle -n flags */
			if (strcmp(argv[i], "-nostdinc") == 0)
				nostdinc++;
			else if (strcmp(argv[i], "-nostdlib") == 0) {
				nostdlib++;
				nostartfiles++;
			} else if (strcmp(argv[i], "-nostartfiles") == 0)
				nostartfiles = 1;
			else
				goto passa;
			break;

		case 'p':
			if (strcmp(argv[i], "-pg") == 0)
				pgflag++;
			else if (strcmp(argv[i], "-pthread") == 0)
				pthreads++;
			else if (strcmp(argv[i], "-pipe") == 0)
				/* NOTHING YET */;
			else
				errorx(1, "unknown option %s", argv[i]);
			break;

		case 'x':
			xlist[xnum++] = argv[i];
			break;
		case 't':
			tflag++;
			break;
		case 'S':
			sflag++;
			cflag++;
			break;
		case 'o':
			if (outfile)
				errorx(8, "too many -o");
			outfile = argv[++i];
			break;
		case 'O':
			Oflag++;
			break;
		case 'E':
			Eflag++;
			break;
		case 'P':
			pflag++;
			*pv++ = argv[i];
		case 'c':
			cflag++;
			break;

d279 7
a285 7
		case '2':
			if(argv[i][2] == '\0')
				pref = "/lib/crt2.o";
			else {
				pref = "/lib/crt20.o";
			}
			break;
d287 10
a296 10
		case 'C':
			Cflag = 1;
			break;
		case 'D':
		case 'I':
		case 'U':
			*pv++ = argv[i];
			if (argv[i][2] == 0)
				*pv++ = argv[++i];
			if (pv >= ptemp+MAXOPT)
d298 2
a299 2
				error("Too many DIU options");
				--pv;
d301 22
a322 21
			break;

		case 'M':
			Mflag++;
			break;

		case 'd':
			dflag++;
			strncpy(alist, argv[i], 19);
			break;
		case 'v':
			printf("%s\n", VERSSTR);
			vflag++;
			break;

		case 's':
			if (strcmp(argv[i], "-static") == 0)
				Bstatic = 1;
			else
				goto passa;
			break;
@


1.15
log
@pull fro ragge's repo:
-C support for cc and deljumps optimization; both by Stefan Kempf
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.14 2007/09/28 08:48:58 ragge Exp $	*/
d230 1
a230 1
			if (strcmp(argv[i], "-nostdlib") == 0) {
d562 2
@


1.14
log
@Wrap MAXFIL to 10000, so make depend works.
This should be dynamic but, ... not now.
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.13 2007/09/27 20:00:23 otto Exp $	*/
d103 1
d287 3
a292 1
		case 'C':
d298 1
a298 1
				error("Too many DIUC options");
d417 2
d465 1
@


1.13
log
@flag usage checks and -E with outfile. from Jeremy C. Reed via ragge's
repo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.61 2007/09/26 14:48:47 ragge Exp $	*/
d79 1
a79 1
#define MAXFIL 100
@


1.12
log
@pull from ragge's repo: -v flag and reg class check
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.11 2007/09/23 18:36:30 otto Exp $	*/
d349 2
a350 2
	if (outfile && (cflag || sflag) && nc > 1)
		errorx(8, "-o given with -c || -S and more than one file");
d436 2
@


1.11
log
@Pull form ragge's repo:
Patch to understand .i files (no preprocessing), from Arthur Loiret.
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.10 2007/09/19 21:42:06 todd Exp $	*/
d405 2
d450 2
d496 2
d528 2
@


1.10
log
@the missing piece of my commit earlier, cc now calls ccom_<arch>
caught by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.9 2007/09/19 16:08:33 todd Exp $	*/
d41 1
d324 1
a324 1
			else if((c=getsuf(t))=='c' || c=='S' ||
d353 10
d389 5
a393 1
		if (getsuf(clist[i])=='s') {
d445 1
@


1.9
log
@oops, put back -pipe support
noticed by Mike Belopuhov .. mkb at crypt dot org dot ru, thanks
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.8 2007/09/19 15:21:07 todd Exp $	*/
d124 1
a124 1
char	*pass0 = LIBEXECDIR "/ccom";
d368 1
@


1.8
log
@add '-b machine' to cc for multiarch support
ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.7 2007/09/19 15:00:01 todd Exp $	*/
d242 2
@


1.7
log
@my -fpic flags support, pullup from pcc
thanks to Miod for inspiring this version
ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.6 2007/09/18 07:16:01 otto Exp $	*/
d132 7
a138 1
char *cppmdadd[] = CPPMDADD;
d154 1
a154 1
	int nc, nl, i, j, c, nxo, na;
d168 14
d400 7
a406 2
		for (j = 0; cppmdadd[j]; j++)
			av[na++] = cppmdadd[j];
@


1.6
log
@some $OpenBSD$s got lost again in the latest merge, noted by Dries
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.5 2007/09/17 18:29:20 otto Exp $	*/
d112 3
a114 1
int	kflag;	/* generate PIC code */
d180 3
a182 1
				kflag++;
d202 1
a202 1
			kflag++;
a221 2
			else if (strcmp(argv[i], "-pipe") == 0)
				/* NOTHING YET */;
@


1.5
log
@merge from ragge's repo:
Add -dM for preprocessor, by Todd T. Fries.
@
text
@d1 1
a1 1
/*	$Id: cc.c,v 1.56 2007/09/16 19:42:49 ragge Exp $	*/
@


1.4
log
@checked malloc/calloc calls. from ragge's repo, originally from Stefan
Kempf.
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.3 2007/09/16 18:44:56 otto Exp $	*/
d374 2
@


1.3
log
@Process (and ignore for now) -pipe
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.2 2007/09/15 22:04:38 ray Exp $	*/
d608 4
a611 3
callsys(f, v)
char f[], *v[]; {
	int t, status;
d623 1
a623 1
			int len = strlen(Bflag) + 8;
d625 2
@


1.2
log
@$OpenBSD$

Requested by otto.
@
text
@d1 1
a1 1
/*	$OpenBSD: cc.c,v 1.1.1.1 2007/09/15 18:12:32 otto Exp $	*/
d218 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id: cc.c,v 1.54 2007/09/15 09:29:45 ragge Exp $	*/
@


1.1.1.1
log
@Import ragge's version of PCC into our tree, so we can hack on it more
easy. ok deraadt@@ miod@@
@
text
@@
