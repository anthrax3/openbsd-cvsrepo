head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2012.04.12.11.51.13;	author pirofti;	state dead;
branches;
next	1.5;

1.5
date	2008.04.11.20.45.52;	author stefan;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.22.14.05.04;	author stefan;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.16.09.00.13;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.01.10.52.58;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.20.10.01.38;	author otto;	state Exp;
branches;
next	;


desc
@@


1.6
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*	$OpenBSD: order.c,v 1.5 2008/04/11 20:45:52 stefan Exp $	*/
/*
 * Copyright (c) 2003 Anders Magnusson (ragge@@ludd.luth.se).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <assert.h>

# include "pass2.h"

#include <string.h>

int canaddr(NODE *);

/*
 * Check size of offset in OREG.  Called by oregok() to see if an
 * OREG can be generated.
 *
 * returns 0 if it can, 1 otherwise.
 */
int
notoff(TWORD t, int r, CONSZ off, char *cp)
{
#if 0
	if (off >= 32767 || off <= -32768)
		printf("; notoff %lld TOO BIG!\n", off);
#endif
	if (cp && cp[0]) return 1;
	return (off >= 32768 || off <= -32769);
}

/*
 * Generate instructions for an OREG.
 * Called by swmatch().
 */
void
offstar(NODE *p, int shape)
{
	NODE *r;

	if (x2debug)
		printf("offstar(%p)\n", p);

	if (isreg(p))
		return; /* Is already OREG */

	r = p->n_right;
	if( p->n_op == PLUS || p->n_op == MINUS ){
		if( r->n_op == ICON ){
			if (isreg(p->n_left) == 0)
				(void)geninsn(p->n_left, INAREG);
			/* Converted in ormake() */
			return;
		}
	}
	(void)geninsn(p, INAREG);
}

/*
 * Unable to convert to OREG (notoff() returned failure).  Output
 * suitable instructions to replace OREG.
 */
void
myormake(NODE *q)
{
	NODE *p;

	if (x2debug)
		printf("myormake(%p)\n", q);

        p = q->n_left;

	/*
	 * This handles failed OREGs conversions, due to the offset
	 * being too large for an OREG.
	 */
	if ((p->n_op == PLUS || p->n_op == MINUS) && p->n_right->n_op == ICON) {
		if (isreg(p->n_left) == 0)
			(void)geninsn(p->n_left, INAREG);
		if (isreg(p->n_right) == 0)
			(void)geninsn(p->n_right, INAREG);
		(void)geninsn(p, INAREG);
	} else if (p->n_op == REG) {
		q->n_op = OREG;
		q->n_lval = p->n_lval;
		q->n_rval = p->n_rval;
		tfree(p);
	}
}

/*
 * Shape matches for UMUL.  Cooperates with offstar().
 */
int
shumul(NODE *p)
{

	if (x2debug)
		printf("shumul(%p)\n", p);

	/* Turns currently anything into OREG on x86 */
	return SOREG;
}

/*
 * Rewrite operations on binary operators (like +, -, etc...).
 * Called as a result of table lookup.
 */
int
setbin(NODE *p)
{

	if (x2debug)
		printf("setbin(%p)\n", p);
	return 0;

}

/* setup for assignment operator */
int
setasg(NODE *p, int cookie)
{
	if (x2debug)
		printf("setasg(%p)\n", p);
	return(0);
}

/* setup for unary operator */
int
setuni(NODE *p, int cookie)
{
	return 0;
}

/*
 * Special handling of some instruction register allocation.
 */
struct rspecial *
nspecial(struct optab *q)
{
	if (x2debug)
		printf("nspecial: op=%d, visit=0x%x: %s", q->op, q->visit, q->cstring);

	switch (q->op) {

	/* soft-float stuff */
        case RS:
        case LS:
                if (q->lshape == SBREG) {
                        static struct rspecial s[] = {
                                { NLEFT, R3R4 },
                                { NRIGHT, R5 },
                                { NRES, R3R4 },
                                { 0 },
                        };
                        return s;
                } else if (q->lshape == SAREG) {
                        static struct rspecial s[] = {
                                { NLEFT, R3 },
                                { NRIGHT, R4 },
                                { NRES, R3 },
                                { 0 },
                        };
                        return s;
                }

		cerror("nspecial LS/RS");
		break;

	case UMINUS:
	case SCONV:
		if (q->lshape == SBREG && q->rshape == SAREG) {
			static struct rspecial s[] = {
				{ NLEFT, R3R4 },
				{ NRES, R3 },
				{ 0 }
			};
			return s;
		} else if (q->lshape == SAREG && q->rshape == SBREG) {
			static struct rspecial s[] = {
				{ NLEFT, R3 },
				{ NRES, R3R4 },
				{ 0 }
			};
			return s;
		} else if (q->lshape == SAREG && q->rshape == SAREG) {
			static struct rspecial s[] = {
				{ NLEFT, R3 },
				{ NRES, R3 },
				{ 0 }
			};
			return s;
		} else if (q->lshape == SBREG && q->rshape == SBREG) {
			static struct rspecial s[] = {
				{ NLEFT, R3R4 },
				{ NRES, R3R4 },
				{ 0 }
			};
			return s;
		} else if (q->lshape == SCREG && q->rshape == SBREG) {
			static struct rspecial s[] = {
				{ NLEFT, F1 },
				{ NEVER, F0 }, /* stomped on */
				{ NRES, R3R4 },
				{ 0 }
			};
			return s;
		} else if (q->lshape == SBREG && q->rshape == SCREG) {
			static struct rspecial s[] = {
				{ NLEFT, R3R4 },
				{ NEVER, F0 }, /* stomped on */
				{ NRES, F1 },
				{ 0 }
			};
			return s;
		} else {
			static struct rspecial s[] = {
				{ NOLEFT, R0 },
				{ 0 } };
			return s;
		}

		break;

	case OPLOG:
		if (q->lshape == SBREG) {
			static struct rspecial s[] = {
				{ NLEFT, R3R4 },
				{ NRIGHT, R5R6 },
				{ NRES, R3 },
				{ 0 }
			};
			return s;
		} else if (q->lshape == SAREG) {
			static struct rspecial s[] = {
				{ NLEFT, R3 },
				{ NRIGHT, R4 },
				{ NRES, R3 },
				{ 0 }
			};
			return s;
		}

		cerror("nspecial oplog");
		break;

	case PLUS:
	case MINUS:
	case MUL:
	case DIV:
	case MOD:
		if (q->lshape == SBREG && 
		    (q->ltype & (TDOUBLE|TLDOUBLE|TLONGLONG|TULONGLONG))) {
			static struct rspecial s[] = {
				{ NLEFT, R3R4 },
				{ NRIGHT, R5R6 },
				{ NRES, R3R4 },
				{ 0 }
			};
			return s;
		} else if (q->lshape == SAREG && q->ltype & TFLOAT) {
			static struct rspecial s[] = {
				{ NLEFT, R3 },
				{ NRIGHT, R4 },
				{ NRES, R3 },
				{ 0 }
			};
			return s;
		} else if (q->lshape == SAREG) {
			static struct rspecial s[] = {
				{ NOLEFT, R0 },
				{ 0 } };
			return s;
		}

		cerror("nspecial mul");
		break;

	case STASG:
		{
			static struct rspecial s[] = {
				{ NEVER, R3 },
				{ NRIGHT, R4 },
				{ NEVER, R5 },
				{ 0 } };
			return s;
		}
		break;

	case OPLTYPE:
		{
			if (q->visit & SAREG) {
				static struct rspecial s[] = {
					{ NEVER, R0 },
//					{ NRES, R3 }, // hack - i don't know why
					{ 0 } };
				return s;
			}
		}
		break;

	case ASSIGN:
		if (q->lshape & SNAME) {
			static struct rspecial s[] = {
				{ NEVER, R0 },
				{ 0 } };
			return s;
		} else if (q->rshape & SNAME) {
			static struct rspecial s[] = {
				{ NOLEFT, R0 },
				{ 0 } };
			return s;
		} else if (q->lshape & SOREG) {
			static struct rspecial s[] = {
				{ NOLEFT, R0 },
				{ 0 } };
			return s;
		} else if (q->rshape & SOREG) {
			static struct rspecial s[] = {
				{ NORIGHT, R0 },
				{ 0 } };
			return s;
		}
		/* fallthough */

	case UMUL:
	case AND:
	case OR:
	case ER:
		{
			static struct rspecial s[] = {
				{ NOLEFT, R0 },
				{ 0 } };
			return s;
		}

	default:
		break;
	}

	comperr("nspecial entry %d: %s", q - table, q->cstring);
	return 0; /* XXX gcc */
}

/*
 * Set evaluation order of a binary node if it differs from default.
 */
int
setorder(NODE *p)
{
	return 0; /* nothing differs on x86 */
}

/*
 * Set registers "live" at function calls (like arguments in registers).
 * This is for liveness analysis of registers.
 */
int *
livecall(NODE *p)
{
	static int r[] = { R10, R9, R8, R7, R6, R5, R4, R3, R30, R31, -1 };
	int num = 1;

        if (p->n_op != CALL && p->n_op != FORTCALL && p->n_op != STCALL)
                return &r[8-0];

        for (p = p->n_right; p->n_op == CM; p = p->n_left)
                num += szty(p->n_right->n_type);
        num += szty(p->n_right->n_type);

        num = (num > 8 ? 8 : num);

        return &r[8 - num];
}

/*
 * Signal whether the instruction is acceptable for this target.
 */
int
acceptable(struct optab *op)
{
	if ((op->visit & FEATURE_PIC) != 0)
		return (kflag != 0);
	return features(op->visit & 0xffff0000);
}
@


1.5
log
@Sync with master repo. Reminded by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@Sync with main repo.
@
text
@d1 1
a1 1
/*	$OpenBSD: order.c,v 1.3 2007/11/16 09:00:13 otto Exp $	*/
d37 6
a42 3
/* is it legal to make an OREG or NAME entry which has an
 * offset of off, (from a register of r), if the
 * resulting thing had type t */
d46 4
d51 1
a51 1
	return !(off < 32768 && off > -32769);  /* YES */
d55 2
a56 2
 * Turn a UMUL-referenced node into OREG.
 * Be careful about register classes, this is a place where classes change.
a76 9
		/* usually for arraying indexing: */
		if (r->n_op == LS && r->n_right->n_op == ICON &&
		    r->n_right->n_lval == 2 && p->n_op == PLUS) {
			if (isreg(p->n_left) == 0)
				(void)geninsn(p->n_left, INAREG);
			if (isreg(r->n_left) == 0)
				(void)geninsn(r->n_left, INAREG);
			return;
		}
d82 2
a83 1
 * Do the actual conversion of offstar-found OREGs into real OREGs.
d88 1
a88 3
#if 1
	NODE *p, *r;
#endif
a92 13
#if 1	/* XXX remove this and add UMUL(SAREG) to table.c !!! */
	p = q->n_left;
	if (q->n_op != OREG && p->n_op == REG) {
		q->n_op = OREG;
		q->n_lval = 0;
		q->n_rval = p->n_rval;
		tfree(p);
		return;
	}
#endif

#if 1
	/* usually for array indexing */
a93 11
        if (p->n_op == PLUS && (r = p->n_right)->n_op == LS &&
            r->n_right->n_op == ICON && r->n_right->n_lval == 2 &&
            p->n_left->n_op == REG && r->n_left->n_op == REG) {
		if (isreg(p->n_left) == 0)
			(void)geninsn(p->n_left, INAREG);
                q->n_op = OREG;
                q->n_lval = 0;
                q->n_rval = p->n_left->n_rval;
                tfree(p);
        }
#endif
d95 4
a98 1
#if 0
a110 2
#endif
	(void)geninsn(p, INAREG);
a162 1

d168 133
a347 1
	case SCONV:
a348 1
	case MINUS:
a351 1
	case PLUS:
d375 1
d383 11
a393 1
	static int r[] = { R3, R4, R5, R6, R7, R8, R9, R10, -1 };
d395 1
a395 1
	return &r[0];
d404 3
a406 1
	return 1;
@


1.3
log
@sync tree with master repo; Nov 16 2007
@
text
@d1 1
a1 1
/*	$OpenBSD: order.c,v 1.3 2007/11/12 19:03:28 ragge Exp $	*/
d96 1
a96 1
#if 1
a153 12
 * Rewrite increment/decrement operation.
 */
int
setincr(NODE *p)
{
	if (x2debug)
		printf("setincr(%p)\n", p);

	return(0);
}

/*
d195 11
d260 1
a260 1
	comperr("nspecial entry %d", q - table);
d279 1
a279 1
	static int r[1] = { -1 }; /* Terminate with -1 */
d284 8
@


1.2
log
@Pull from master repo, commit by myself:
next step for ELFABI, hello world works with ELFABI, but register
pairs still produce wrong assembly; with Dale Rahn
@
text
@d1 1
a1 1
/*	$OpenBSD: order.c,v 1.2 2007/10/31 00:47:23 gmcgarry Exp $	*/
d273 12
@


1.1
log
@Start of a powerpc backend by Gregory McGarry. Not complete yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: order.c,v 1.1 2007/10/19 18:34:53 gmcgarry Exp $	*/
d43 1
a43 1
//	if (cp) return 1;
d70 1
d89 2
a90 2
#if 0
	NODE *p;
d96 26
a122 1
	p = q->n_left;
d136 1
@

