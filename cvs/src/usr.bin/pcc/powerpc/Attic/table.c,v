head	1.11;
access;
symbols
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.16
	OPENBSD_5_0:1.10.0.14
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.12
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.10
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.6
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9;
locks; strict;
comment	@ * @;


1.11
date	2012.04.12.11.51.13;	author pirofti;	state dead;
branches;
next	1.10;

1.10
date	2008.04.11.20.45.52;	author stefan;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.24.14.08.06;	author stefan;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.24.13.38.06;	author stefan;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.24.09.27.02;	author stefan;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.24.00.44.59;	author stefan;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.22.21.20.43;	author stefan;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.19.22.59.03;	author stefan;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.01.10.52.58;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.21.17.45.44;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.20.10.01.38;	author otto;	state Exp;
branches;
next	;


desc
@@


1.11
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*	$OpenBSD: table.c,v 1.10 2008/04/11 20:45:52 stefan Exp $	*/
/*-
 * Copyright (c) 2007 Gregory McGarry <g.mcgarry@@ieee.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * A template has five logical sections:
 *
 *	1) subtree (operator); goal to achieve (cookie)
 *	2) left node descendent of operator (node class; type)
 *	3) right node descendent of operator (node class; type)
 *	4) resource requirements (number of scratch registers);
 *	   subtree rewriting rule
 *	5) emitted instructions
 */

#include "pass2.h"

#define TUWORD	TUNSIGNED|TULONG
#define TSWORD	TINT|TLONG
#define TWORD	TUWORD|TSWORD

#if defined(ELFABI)
#define HA16(x)	# x "@@ha"
#define LO16(x)	# x "@@l"
#elif defined(MACHOABI)
#define HA16(x)	"ha16(" # x ")"
#define LO16(x)	"lo16(" # x ")"
#else
#error undefined ABI
#endif

struct optab table[] = {
/* First entry must be an empty entry */
{ -1, FOREFF, SANY, TANY, SANY, TANY, 0, 0, "", },

/* PCONVs are not necessary */
{ PCONV,	INAREG,
	SAREG,	TWORD|TPOINT,
	SAREG,	TWORD|TPOINT,
		0,	RLEFT,
		COM "pointer conversion\n", },

/*
 * Conversions of integral types
 */

{ SCONV,	INAREG,
	SAREG,	TCHAR|TUCHAR,
	SAREG,	TCHAR|TUCHAR,
		0,	RLEFT,
		COM "convert between (u)char and (u)char\n", },

{ SCONV,	INAREG,
	SAREG,	TSHORT|TUSHORT,
	SAREG,	TSHORT|TUSHORT,
		0,	RLEFT,
		COM "convert between (u)short and (u)short\n", },

{ SCONV,	INAREG,
	SAREG,	TPOINT|TWORD,
	SAREG,	TWORD,
		0,	RLEFT,
		COM "convert a pointer/word to an int\n", },

{ SCONV,	INAREG,
	SAREG,	TPOINT,
	SAREG,	TPOINT,
		0,	RLEFT,
		COM "convert pointers\n", },

{ SCONV,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		0,	RLEFT,
		COM "convert (u)longlong to (u)longlong\n", },

{ SCONV,	INAREG,
	SAREG,	TCHAR,
	SAREG,	TSHORT|TSWORD,
		NASL|NAREG,	RESC1,
		"	extsb A1,AL" COM "convert char to short/int\n", },

{ SCONV,	INAREG,
	SAREG,	TUCHAR,
	SAREG,	TSHORT|TSWORD,
		0,	RLEFT,
		COM "convert uchar to short/int\n", },

{ SCONV,	INAREG,
	SAREG,	TUCHAR,
	SAREG,	TUSHORT|TUWORD,
		0,	RLEFT,
		COM "convert uchar to ushort/unsigned\n", },

/* XXX is this necessary? */
{ SCONV,	INAREG,
	SAREG,	TCHAR,
	SAREG,	TUSHORT|TUWORD,
		NSPECIAL|NAREG|NASL,	RESC1,
		"	extsb A1,AL" COM "convert char to ushort/unsigned\n", },

{ SCONV,	INBREG | FEATURE_BIGENDIAN,
	SAREG,	TUCHAR|TUSHORT|TUNSIGNED,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG,		RESC1,
		"	mr U1,AL" COM "convert uchar/ushort/uint to (u)longlong\n"
		"	li A1,0\n", },

{ SCONV,	INBREG,
	SAREG,	TUCHAR|TUSHORT|TUNSIGNED,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG,		RESC1,
		"	mr A1,AL" COM "convert uchar/ushort/uint to (u)longlong\n"
		"	li U1,0\n", },

{ SCONV,	INBREG | FEATURE_BIGENDIAN,
	SAREG,	TCHAR|TSHORT|TSWORD,
	SBREG,	TULONGLONG|TLONGLONG,
		NBREG,		RESC1,
		"	mr U1,AL" COM "convert char/short/int to ulonglong\n"
		"	srawi A1,AL,31\n", },

{ SCONV,	INBREG,
	SAREG,	TCHAR|TSHORT|TSWORD,
	SBREG,	TULONGLONG|TLONGLONG,
		NBREG,		RESC1,
		"	mr A1,AL" COM "convert char/short/int to ulonglong\n"
		"	srawi U1,AL,31\n", },

{ SCONV,	INAREG,
	SAREG,	TSHORT|TUSHORT,
	SAREG,	TCHAR|TUCHAR,
		NSPECIAL|NAREG|NASL,	RESC1,
		"	andi. A1,AL,255" COM "convert (u)short to (u)char\n", },

/* XXX is this really necessary? */
{ SCONV,	INAREG,
	SAREG,	TSHORT,
	SAREG,	TWORD,
		NAREG|NASL,	RESC1,
		"	extsh A1,AL" COM "convert short to int\n", },

{ SCONV,	INAREG,
	SAREG,	TUSHORT,
	SAREG,	TWORD,
		NSPECIAL|NAREG|NASL,	RESC1,
		COM "convert ushort to word\n", },

{ SCONV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	andi. A1,AL,255" COM "convert (u)int to (u)char\n", },

{ SCONV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TSHORT|TUSHORT,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	andi. A1,AL,65535" COM "convert (u)int to (u)short\n", },

{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TCHAR|TUCHAR,
		NAREG|NSPECIAL,	RESC1,
		"	andi. A1,AL,255" COM "(u)longlong to (u)char\n", },

{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TSHORT|TUSHORT,
		NAREG|NSPECIAL,	RESC1,
		"	andi. A1,AL,65535" COM "(u)longlong to (u)short\n", },

{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TWORD,
		NAREG,		RESC1,
		"	mr A1,AL" COM "convert (u)longlong to (u)int/long\n", },

/* conversions on load from memory */

{ SCONV,	INAREG,
	SOREG,	TCHAR,
	SAREG,	TWORD,
		NASL|NAREG|NSPECIAL,	RESC1,
		"	lbz A1,AL" COM "convert char to int/long\n"
		"	extsb A1,A1\n", },

{ SCONV,	INAREG,
	SOREG,	TUCHAR,
	SAREG,	TWORD,
		NASL|NAREG|NSPECIAL,	RESC1,
		"	lbz A1,AL" COM "convert uchar to int/long\n", },

{ SCONV,	INAREG,
	SOREG,	TSHORT,
	SAREG,	TWORD,
		NASL|NAREG|NSPECIAL,	RESC1,
		"	lha A1,AL" COM "convert short to int/long\n", },

{ SCONV,	INAREG,
	SOREG,	TUSHORT,
	SAREG,	TWORD,
		NASL|NAREG|NSPECIAL,	RESC1,
		"	lhz A1,AL" COM "convert ushort to int/long\n", },

{ SCONV,	INAREG,
	SOREG,	TLONGLONG|TULONGLONG,
	SAREG,	TCHAR|TUCHAR,
		NAREG|NSPECIAL,	RESC1,
		"	lwz A1,AL" COM "(u)longlong to (u)char\n"
		"	andi. A1,A1,255\n", },

{ SCONV,	INAREG,
	SOREG,	TLONGLONG|TULONGLONG,
	SAREG,	TSHORT|TUSHORT,
		NAREG|NSPECIAL,	RESC1,
		"	lwz A1,AL" COM "(u)longlong to (u)short\n"
		"	andi. A1,A1,65535\n", },

{ SCONV,	INAREG,
	SOREG,	TLONGLONG|TULONGLONG,
	SAREG,	TWORD,
		NAREG|NSPECIAL,	RESC1,
		"	lwz A1,AL" COM "(u)longlong to (u)int\n", },

/*
 * floating-point conversions
 *
 * There doesn't appear to be an instruction to move values between
 * the floating-point registers and the general-purpose registers.
 * So values are bounced into memory...
 */

{ SCONV,	INCREG | FEATURE_HARDFLOAT,
	SCREG,	TFLOAT,
	SCREG,	TDOUBLE|TLDOUBLE,
		0,	RLEFT,
		COM "convert float to (l)double\n", },

/* soft-float */
{ SCONV,	INBREG,
	SAREG,	TFLOAT,
	SBREG,	TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_HARDFLOAT,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TFLOAT,
		NCREG,	RESC1,
		"	frsp A1,AL" COM "convert (l)double to float\n", },

/* soft-float */
{ SCONV,	INAREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_HARDFLOAT,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TDOUBLE|TLDOUBLE,
		0,	RLEFT,
		COM "convert (l)double to (l)double\n", },

/* soft-float */
{ SCONV,	INBREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TDOUBLE|TLDOUBLE,
		0,	RLEFT,
		COM "convert (l)double to (l)double (soft-float)\n", },

{ SCONV,	INCREG | FEATURE_HARDFLOAT,
	SAREG,	TWORD,
	SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
		2*NCREG|NAREG,	RESC3,
		"ZC", },

/* soft-float */
{ SCONV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

/* soft-float */
{ SCONV,	INBREG,
	SAREG,	TWORD,
	SBREG,	TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ SCONV,	INAREG | FEATURE_HARDFLOAT,
	SOREG,	TFLOAT|TDOUBLE|TLDOUBLE,
	SAREG,	TWORD,
		2*NCREG|NAREG,	RESC1,
		"ZC", },

/* soft-float */
{ SCONV,	INAREG,
	SAREG,	TFLOAT,
	SAREG,	TWORD,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

/* soft-float */
{ SCONV,	INAREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SAREG,	TWORD,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },
	
{ SCONV,	INCREG | FEATURE_HARDFLOAT,
	SBREG,	TLONGLONG|TULONGLONG,
	SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
		NSPECIAL|NCREG,	RESC1,
		"ZF", },

/* soft-float */
{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

/* soft-float */
{ SCONV,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ SCONV,	INBREG | FEATURE_HARDFLOAT,
	SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
	SBREG,	TLONGLONG|TULONGLONG,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

/* soft-float */
{ SCONV,	INBREG,
	SAREG,	TFLOAT,
	SBREG,	TLONGLONG|TULONGLONG,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

/* soft-float */
{ SCONV,	INBREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TLONGLONG|TULONGLONG,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

/*
 * Subroutine calls.
 */

{ CALL,		FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	0,
		"	bl CL" COM "call (args, no result) to scon\n", },

{ UCALL,	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	0,
		"	bl CL" COM "call (no args, no result) to scon\n", },

{ CALL,		INAREG,
	SCON,	TANY,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result) to scon\n", },

{ UCALL,	INAREG,
	SCON,	TANY,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result) to scon\n", },

{ CALL,		INBREG,
	SCON,	TANY,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result) to scon\n", },

{ UCALL,	INBREG,
	SCON,	TANY,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result) to scon\n", },

{ CALL,		INCREG | FEATURE_HARDFLOAT,
	SCON,	TANY,
	SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
		NCREG|NCSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result) to scon\n", },

{ UCALL,	INCREG | FEATURE_HARDFLOAT,
	SCON,	TANY,
	SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
		NCREG|NCSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result) to scon\n", },

{ CALL,		INAREG,
	SCON,	TANY,
	SAREG,	TFLOAT,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result) to scon\n", },

{ UCALL,	INAREG,
	SCON,	TANY,
	SAREG,	TFLOAT,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result) to scon\n", },

{ CALL,		INBREG,
	SCON,	TANY,
	SBREG,	TDOUBLE|TLDOUBLE,
		NBREG|NBSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result) to scon\n", },

{ UCALL,	INBREG,
	SCON,	TANY,
	SBREG,	TDOUBLE|TLDOUBLE,
		NBREG|NBSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result) to scon\n", },



{ CALL,		FOREFF,
	SAREG,	TANY,
	SANY,	TANY,
		0,	0,
		"	mtctr AL" COM "call (args, no result) to reg\n"
		"	bctrl\n", },

{ UCALL,	FOREFF,
	SAREG,	TANY,
	SANY,	TANY,
		0,	0,
		"	mtctr AL" COM "call (no args, no result) to reg\n"
		"	bctrl\n", },

{ CALL,		INAREG,
	SAREG,	TANY,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG,	RESC1,
		"	mtctr AL" COM "call (args, result) to reg\n"
		"	bctrl\n", },

{ UCALL,	INAREG,
	SAREG,	TANY,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG,	RESC1,
		"	mtctr AL" COM "call (no args, result) to reg\n"
		"	bctrl\n", },

/* struct return */
{ USTCALL,	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	0,
		"	bl CL\n", },

{ USTCALL,	INAREG,
	SCON,	TANY,
	SANY,	TANY,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL\n", },

{ USTCALL,	INAREG,
	SAREG,	TANY,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG,	RESC1,
		"	mtctr AL"
		"	bctrl\n", },

{ STCALL,	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	0,
		"	bl CL\n", },

{ STCALL,	INAREG,
	SCON,	TANY,
	SANY,	TANY,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL\n", },

{ STCALL,	INAREG,
	SAREG,	TANY,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	mtctr AL"
		"	bctrl\n", },

/*
 * The next rules handle all binop-style operators.
 */

/* XXX AL cannot be R0 */
{ PLUS,		INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SSCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	addi A1,AL,AR" COM "addition of constant\n", },

/* XXX AL cannot be R0 */
{ PLUS,		INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SSCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	addic. A1,AL,AR" COM "addition of constant\n", },

{ PLUS,		INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SSCON,	TANY,
		NBREG|NBSL,	RESC1,
		"	addic A1,AL,AR" COM "64-bit addition of constant\n"
		"	addze U1,UL\n", },

{ PLUS,		INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	add A1,AL,AR\n", },

{ PLUS,		INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	add. A1,AL,AR\n", },

{ PLUS,		INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	addc A1,AL,AR" COM "64-bit add\n"
		"	adde U1,UL,UR\n", },

{ PLUS,		INCREG | FEATURE_HARDFLOAT,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NCREG,		RESC1,
		"	fadds A1,AL,AR" COM "float add\n", },

{ PLUS,		INAREG,
	SAREG,	TFLOAT,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ PLUS,		INCREG | FEATURE_HARDFLOAT,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TDOUBLE|TLDOUBLE,
		NCREG|NCSL,	RESC1,
		"	fadd A1,AL,AR" COM "(l)double add\n", },

/* soft-float */
{ PLUS,		INBREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG|NBSL,	RESC1,
		"ZF", },

{ MINUS,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SSCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	addi A1,AL,-AR\n", },

{ MINUS,	INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SSCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	addic. A1,AL,-AR\n", },

{ MINUS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SSCON,	TANY,
		NBREG|NBSL,	RESC1,
		"	addic A1,AL,-AR\n"
		"	addme U1,UL\n", },

{ MINUS,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	subf A1,AR,AL\n", },

{ MINUS,	INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	subf. A1,AR,AL\n", },

{ MINUS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	subfc A1,AR,AL" COM "64-bit subtraction\n"
		"	subfe U1,UR,UL\n", },

{ MINUS,	INCREG | FEATURE_HARDFLOAT,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NCREG,	RESC1,
		"	fsubs A1,AL,AR\n", },

{ MINUS,	INAREG,
	SAREG,	TFLOAT,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ MINUS,		INCREG | FEATURE_HARDFLOAT,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TDOUBLE|TLDOUBLE,
		NCREG|NCSL,	RESC1,
		"	fsub A1,AL,AR" COM "(l)double sub\n", },

/* soft-float */
{ MINUS,		INBREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG|NBSL,	RESC1,
		"ZF", },


/*
 * The next rules handle all shift operators.
 */

{ LS,	INAREG,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	slw A1,AL,AR" COM "left shift\n", },

{ LS,	INAREG|FORCC,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	slw. A1,AL,AR" COM "left shift\n", },

{ LS,	INAREG,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SCON,	TANY,
		NAREG|NASL,	RESC1,
		"	slwi A1,AL,AR" COM "left shift by constant\n", },

{ LS,	INAREG|FORCC,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SCON,	TANY,
		NAREG|NASL,	RESC1,
		"	slwi. A1,AL,AR" COM "left shift by constant\n", },

{ LS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SCON,	TANY,
		NBREG,	RESC1,
		"ZO", },

{ LS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TANY,
		NSPECIAL|NBREG,	RESC1,
		"ZE", },

{ RS,	INAREG,
	SAREG,	TUWORD|TUSHORT|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	srw A1,AL,AR" COM "right shift\n", },

{ RS,	INAREG,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	sraw A1,AL,AR" COM "arithmetic right shift\n", },

{ RS,	INAREG|FORCC,
	SAREG,	TUWORD|TUSHORT|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	srw. A1,AL,AR" COM "right shift\n", },

{ RS,	INAREG|FORCC,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	sraw. A1,AL,AR" COM "arithmetic right shift\n", },

{ RS,	INAREG,
	SAREG,	TUWORD|TUSHORT|TUCHAR,
	SCON,	TANY,
		NAREG|NASL,	RESC1,
		"	srwi A1,AL,AR" COM "right shift by constant\n", },

{ RS,	INAREG,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SCON,	TANY,
		NAREG|NASL,	RESC1,
		"	srawi A1,AL,AR" COM "arithmetic right shift by constant\n", },

{ RS,	INAREG|FORCC,
	SAREG,	TUWORD|TUSHORT|TUCHAR,
	SCON,	TANY,
		NAREG|NASL,	RESC1,
		"	srwi. A1,AL,AR" COM "right shift by constant\n", },

{ RS,	INAREG|FORCC,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SCON,	TANY,
		NAREG|NASL,	RESC1,
		"	srawi. A1,AL,AR" COM "right shift by constant\n", },

{ RS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SCON,	TANY,
		NBREG,	RESC1,
		"ZO" },

{ RS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TANY,
		NSPECIAL|NBREG,	RESC1,
		"ZE", },

/*
 * The next rules takes care of assignments. "=".
 */

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SSCON,		TANY,
		0,	RDEST,
		"	li AL,AR\n", },

{ ASSIGN,	FOREFF|INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SSCON,		TANY,
		0,	RDEST,
		"	li AL,AR\n"
		"	li UL,UR\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SCON,		TANY,
		0,	RDEST,
		"	lis AL," HA16(AR) "\n"
		"	addi AL,AL," LO16(AR) "\n", },

{ ASSIGN,	FOREFF|INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SCON,		TANY,
		0,	RDEST,
		"	lis AL," HA16(AR) "\n"
		"	addi AL,AL," LO16(AR) "\n"
		"	lis UL," HA16(UR) "\n"\
		"	addi UL,UL," LO16(UR) "\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD|TPOINT,
	SOREG,		TWORD|TPOINT,
		NSPECIAL,	RDEST,
		"	lwz AL,AR" COM "assign oreg to reg\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD|TPOINT,
	SNAME,		TWORD|TPOINT,
		NSPECIAL,	RDEST,
		"	lis AL," HA16(AR) COM "assign sname to reg\n"
		"	lwz AL," LO16(AR) "(AL)\n", },

{ ASSIGN,	FOREFF|INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SOREG,		TLONGLONG|TULONGLONG,
		NSPECIAL,	RDEST,
		"	lwz AL,AR" COM "assign llong to reg\n"
		"	lwz UL,UR\n" },

{ ASSIGN,	FOREFF|INAREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SNAME,		TLONGLONG|TULONGLONG,
		NSPECIAL,	RDEST,
		"	lis AL," HA16(AR) COM "assign 64-bit sname to reg\n"
		"	lwz AL," LO16(AR) "(AL)\n"
		"	lis UL," HA16(UR) "\n"
		"	lwz UL," LO16(UR) "(UL)\n", },

{ ASSIGN,	FOREFF|INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SOREG,		TSWORD,
		NSPECIAL,	RDEST,
		"	lwz AL,AR" COM "load int/pointer into llong\n"
		"	srawi UL,AR,31\n" },

{ ASSIGN,	FOREFF|INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SOREG,		TUNSIGNED|TPOINT,
		NSPECIAL,	RDEST,
		"	lwz AL,AR" COM "load uint/pointer into (u)llong\n"
		"	li UL,0\n" },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TUCHAR,
	SOREG,		TUCHAR,
		NSPECIAL,	RDEST,
		"	lbz AL,AR\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TUCHAR,
	SNAME,		TUCHAR,
		NSPECIAL,	RDEST,
		"	lis AL," HA16(AR) COM "assign uchar sname to reg\n"
		"	lbz AL," LO16(AR) "(AL)\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TCHAR,
	SOREG,		TCHAR,
		NSPECIAL,	RDEST,
		"	lbz AL,AR\n"
		"	extsb AL,AL\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TCHAR,
	SNAME,		TCHAR,
		NSPECIAL,	RDEST,
		"	lis AL," HA16(AR) COM "assign char sname to reg\n"
		"	lbz AL," LO16(AR) "(AL)\n"
		"	extsb AL,AL\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD|TPOINT,
	SOREG,		TSHORT,
		NSPECIAL,	RDEST,
		"	lha AL,AR\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD|TPOINT,
	SOREG,		TUSHORT,
		NSPECIAL,	RDEST,
		"	lhz AL,AR\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD,
	SNAME,		TSHORT,
		NSPECIAL,	RDEST,
		"	lis AL," HA16(AR) "\n"
		"	lha AL," LO16(AR) "(AL)\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD,
	SNAME,		TUSHORT,
		NSPECIAL,	RDEST,
		"	lis AL," HA16(AR) "\n"
		"	lhz AL," LO16(AR) "(AL)\n", },

{ ASSIGN,	FOREFF|INAREG,
	SOREG,		TWORD|TPOINT,
	SAREG,		TWORD|TPOINT,
		NSPECIAL,	RDEST,
		"	stw AR,AL\n", },

{ ASSIGN,	FOREFF|INAREG,
	SNAME,		TWORD|TPOINT,
	SAREG,		TWORD|TPOINT,
		NAREG|NSPECIAL,	RDEST,
		"	lis A1," HA16(AL) COM "assign reg to sname\n"
		"	stw AR," LO16(AL) "(A1)\n", },

{ ASSIGN,	FOREFF|INBREG,
	SOREG,		TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		NSPECIAL,	RDEST,
		"	stw AR,AL" COM "store 64-bit value\n"
		"	stw UR,UL\n", },

{ ASSIGN,	FOREFF|INBREG,
	SNAME,		TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		NBREG|NSPECIAL,	RDEST,
		"	lis A1," HA16(AL) COM "assign reg to 64-bit sname\n"
		"	stw AR," LO16(AL) "(A1)\n"
		"	lis U1," HA16(UL) "\n"
		"	stw UR," LO16(UL) "(U1)\n", },

{ ASSIGN,	FOREFF|INAREG,
	SOREG,		TCHAR|TUCHAR,
	SAREG,		TCHAR|TUCHAR,
		NSPECIAL,	RDEST,
		"	stb AR,AL\n", },

{ ASSIGN,	FOREFF|INAREG,
	SNAME,		TCHAR|TUCHAR,
	SAREG,		TCHAR|TUCHAR,
		NAREG|NSPECIAL,	RDEST,
		"	lis A1," HA16(AL) "\n"
		"	stb AR," LO16(AL) "(A1)\n", },

{ ASSIGN,	FOREFF|INAREG,
	SOREG,		TSHORT|TUSHORT,
	SAREG,		TSHORT|TUSHORT,
		NSPECIAL,	RDEST,
		"	sth AR,AL\n", },

{ ASSIGN,	FOREFF|INAREG,
	SNAME,		TSHORT|TUSHORT,
	SAREG,		TSHORT|TUSHORT,
		NAREG|NSPECIAL,	RDEST,
		"	lis A1," HA16(AL) "\n"
		"	sth AR," LO16(AL) "(A1)\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		0,	RDEST,
		"	mr AL,AR" COM "assign AR to AL\n", },

{ ASSIGN,      FOREFF|INBREG,
        SBREG,	TLONGLONG|TULONGLONG,
        SBREG,	TLONGLONG|TULONGLONG,
                0,  RDEST,
		"	mr AL,AR" COM "assign UR:AR to UL:AL\n"
                "	mr UL,UR\n", },

{ ASSIGN,	FOREFF|INAREG,
	SFLD,		TANY,
	SAREG,		TANY,
		3*NAREG,	RDEST,
		"	lis A3," HA16(M) COM "bit-field assignment\n"
		"	addi A3,A3," LO16(M) "\n"
		"	lwz A2,AL\n"
		"	slwi A1,AR,H\n"
		"	and A1,A1,A3\n"
		"	not A3,A3\n"
		"	and A2,A2,A3\n"
		"	or A2,A2,A1\n"
		"	stw A2,AL\n"
		"F	mr AD,AR\n"
		"F	slwi AD,AD,32-S\n"
		"F	srwi AD,AD,32-S\n", },

{ STASG,	INAREG|FOREFF,
	SOREG|SNAME,	TANY,
	SAREG,		TPTRTO|TANY,
		NSPECIAL,	RRIGHT,
		"ZQ", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SOREG,		TFLOAT,
	SCREG,		TFLOAT,
		0,	RDEST,
		"	stfs AR,AL" COM "store float\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INAREG,
	SOREG,		TFLOAT,
	SAREG,		TFLOAT,
		0,	RDEST,
		"	stw AR,AL" COM "store float (soft-float)\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SNAME,		TFLOAT,
	SCREG,		TFLOAT,
		NAREG,	RDEST,
		"	lis A1," HA16(AL) "\n"
		"	stfs AR," LO16(AL) "(A1)\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INAREG,
	SNAME,		TFLOAT,
	SAREG,		TFLOAT,
		NAREG,	RDEST,
		"	lis A1," HA16(AL) "\n"
		"	stw AR," LO16(AL) "(A1)\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SCREG,		TFLOAT,
	SOREG,		TFLOAT,
		0,	RDEST,
		"	lfs AL,AR" COM "load float\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TFLOAT,
	SOREG,		TFLOAT,
		0,	RDEST,
		"	lwz AL,AR" COM "load float (soft-float)\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SCREG,		TFLOAT,
	SNAME,		TFLOAT,
		NAREG,	RDEST,
		"	lis A1," HA16(AR) "\n"
		"	lfs AL," LO16(AR) "(A1)\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TFLOAT,
	SNAME,		TFLOAT,
		NAREG,	RDEST,
		"	lis A1," HA16(AR) "\n"
		"	lwz AL," LO16(AR) "(A1)\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SCREG,		TFLOAT,
	SCREG,		TFLOAT,
		0,	RDEST,
		"	fmr AL,AR" COM "assign AR to AL\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TFLOAT,
	SAREG,		TFLOAT,
		0,	RDEST,
		"	mr AL,AR" COM "assign AR to AL\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SOREG,		TDOUBLE|TLDOUBLE,
	SCREG,		TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	stfd AR,AL" COM "store (l)double\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INBREG,
	SOREG,		TDOUBLE|TLDOUBLE,
	SBREG,		TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	stw AR,AL" COM "store (l)double (soft-float)\n"
		"	stw UR,UL\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SNAME,		TDOUBLE|TLDOUBLE,
	SCREG,		TDOUBLE|TLDOUBLE,
		NAREG,	RDEST,
		"	lis A1," HA16(AL) "\n"
		"	stfd AR," LO16(AL) "(A1)\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INBREG,
	SNAME,		TDOUBLE|TLDOUBLE,
	SBREG,		TDOUBLE|TLDOUBLE,
		NAREG,	RDEST,
		"	lis A1," HA16(AL) "\n"
		"	stw AR," LO16(AL) "(A1)\n"
		"	lis A1," HA16(UL) "\n"
		"	stw UR," LO16(UL) "(A1)\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SCREG,		TDOUBLE|TLDOUBLE,
	SOREG,		TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	lfd AL,AR" COM "load (l)double\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INBREG,
	SBREG,		TDOUBLE|TLDOUBLE,
	SOREG,		TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	lwz AL,AR" COM "load (l)double (soft-float)\n"
		"	lwz UL,UR\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SCREG,		TDOUBLE|TLDOUBLE,
	SNAME,		TDOUBLE|TLDOUBLE,
		NAREG,	RDEST,
		"	lis A1," HA16(AR) "\n"
		"	lfd AL," LO16(AR) "(A1)\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INBREG,
	SBREG,		TDOUBLE|TLDOUBLE,
	SNAME,		TDOUBLE|TLDOUBLE,
		NAREG,	RDEST,
		"	lis A1," HA16(AR) "\n"
		"	lwz AL," LO16(AR) "(A1)\n"
		"	lis A1," HA16(UR) "\n"
		"	lwz UL," LO16(UR) "(A1)\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_HARDFLOAT,
	SCREG,		TDOUBLE|TLDOUBLE,
	SCREG,		TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	fmr AL,AR" COM "assign AR to AL\n", },

/* soft-float */
{ ASSIGN,	FOREFF|INBREG,
	SBREG,		TDOUBLE|TLDOUBLE,
	SBREG,		TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	mr AL,AR" COM "assign AR to AL\n"
		"	mr UL,UR\n", },

/*
 * DIV/MOD/MUL 
 */

{ DIV,	INAREG,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
		NAREG|NASL,	RESC1,
		"	divwu A1,AL,AR\n", },

{ DIV,	INAREG|FORCC,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
		NAREG|NASL,	RESC1|RESCC,
		"	divwu. A1,AL,AR\n", },

{ DIV,	INAREG,
	SAREG,	TWORD|TSHORT|TCHAR,
	SAREG,	TWORD|TSHORT|TCHAR,
		NAREG|NASL,	RESC1,
		"	divw A1,AL,AR\n", },

{ DIV,	INAREG|FORCC,
	SAREG,	TWORD|TSHORT|TCHAR,
	SAREG,	TWORD|TSHORT|TCHAR,
		NAREG|NASL,	RESC1|RESCC,
		"	divw. A1,AL,AR\n", },

{ DIV,	INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		NSPECIAL|NBREG,	RESC1,
		"ZE", },

{ DIV, INCREG | FEATURE_HARDFLOAT,
	SCREG,		TFLOAT,
	SCREG,		TFLOAT,
		NCREG|NCSR,	RESC1,
		"	fdivs A1,AL,AR" COM "float divide\n", },

/* soft-float */
{ DIV, INAREG,
	SAREG,		TFLOAT,
	SAREG,		TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ DIV, INCREG | FEATURE_HARDFLOAT,
	SCREG,		TDOUBLE|TLDOUBLE,
	SCREG,		TDOUBLE|TLDOUBLE,
		NCREG|NCSR,	RESC1,
		"	fdiv A1,AL,AR" COM "(l)double divide\n", },

/* soft-float */
{ DIV, INBREG,
	SBREG,		TDOUBLE|TLDOUBLE,
	SBREG,		TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ MOD,	INAREG,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
		NAREG,	RESC1,
		"	divwu A1,AL,AR" COM "unsigned modulo\n"
		"	mullw A1,A1,AR\n"
		"	subf A1,A1,AL\n", },

{ MOD,	INAREG,
	SAREG,	TWORD|TSHORT|TCHAR,
	SAREG,	TWORD|TSHORT|TCHAR,
		NAREG,	RESC1,
		"	divw A1,AL,AR" COM "signed modulo\n"
		"	mullw A1,A1,AR\n"
		"	subf A1,A1,AL\n", },

{ MOD,	INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		NSPECIAL|NBREG,	RESC1,
		"ZE", },

{ MUL,	INAREG,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SSCON,		TANY,
		NAREG|NASL,	RESC1,
		"	mulli A1,AL,AR\n", },

{ MUL,	INAREG|FORCC,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SSCON,		TANY,
		NAREG|NASL,	RESC1|RESCC,
		"	mulli. A1,AL,AR\n", },

{ MUL,	INAREG,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	mullw A1,AL,AR\n", },

{ MUL,	INAREG|FORCC,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1|RESCC,
		"	mullw. A1,AL,AR\n", },

{ MUL,	INBREG,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NBREG,	RESC1,
		"	mullw A1,AL,AR\n"
		"	mulhw U1,AL,AR\n", },

{ MUL,	INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		NBREG,	RESC1,
		"	mullw A1,AL,AR\n"
		"	mulhw U1,AL,AR\n", },

{ MUL, INCREG | FEATURE_HARDFLOAT,
	SCREG,		TFLOAT,
	SCREG,		TFLOAT,
		NCREG|NCSR,	RESC1,
		"	fmuls A1,AL,AR" COM "float multiply\n", },

/* soft-float */
{ MUL, INAREG,
	SAREG,		TFLOAT,
	SAREG,		TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ MUL, INCREG | FEATURE_HARDFLOAT,
	SCREG,		TDOUBLE|TLDOUBLE,
	SCREG,		TDOUBLE|TLDOUBLE,
		NCREG|NCSR,	RESC1,
		"	fmul A1,AL,AR" COM "(l)double multiply\n", },

/* soft-float */
{ MUL, INBREG,
	SBREG,		TDOUBLE|TLDOUBLE,
	SBREG,		TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

/*
 * Indirection operators.
 */

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TWORD|TPOINT,
		NAREG|NSPECIAL,	RESC1,
		"	lwz A1,AL" COM "word load\n", },

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TCHAR,
		NAREG|NSPECIAL,	RESC1,
		"	lbz A1,AL" COM "char load\n"
		"	extsb A1,A1\n", },

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TUCHAR,
		NAREG|NSPECIAL,	RESC1,
		"	lbz A1,AL" COM "uchar load\n", },

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TSHORT,
		NAREG|NSPECIAL,	RESC1,
		"	lha A1,AL" COM "short load\n", },

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TUSHORT,
		NAREG|NSPECIAL,	RESC1,
		"	lhz A1,AL" COM "ushort load\n", },

{ UMUL, INBREG,
	SANY,		TANY,
	SOREG|SNAME,	TLONGLONG|TULONGLONG,
		NBREG,	RESC1,
		"	lwz A1,AL" COM "64-bit load\n"
		"	lwz U1,UL\n", },

{ UMUL, INCREG | FEATURE_HARDFLOAT,
	SANY,		TANY,
	SOREG|SNAME,	TFLOAT,
		NCREG,	RESC1,
		"	lfs A1,AL" COM "float load\n", },

{ UMUL, INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TFLOAT,
		NAREG,	RESC1,
		"	lwz A1,AL" COM "float load (soft-float)\n", },

{ UMUL, INCREG | FEATURE_HARDFLOAT,
	SANY,		TANY,
	SOREG|SNAME,	TDOUBLE|TLDOUBLE,
		NCREG,	RESC1,
		"	lfd A1,AL" COM "(l)double load\n", },

{ UMUL, INBREG,
	SANY,		TANY,
	SOREG|SNAME,	TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"	lwz A1,AL" COM "(l)double load (soft-float)\n"
		"	lwz U1,UL\n", },

#if 0
{ UMUL, INAREG,
	SANY,		TANY,
	SAREG,		TWORD|TPOINT,
		NAREG,	RESC1,
		"	lwz A1,(AL)" COM "word load\n", },
#endif

/*
 * Logical/branching operators
 */

/* compare with constant */
{ OPLOG,	FORCC,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SSCON,	TANY,
		0, 	RESCC,
		"	cmpwi AL,AR\n", },

/* compare with constant */
{ OPLOG,	FORCC,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
	SSCON,	TANY,
		0, 	RESCC,
		"	cmplwi AL,AR\n", },

/* compare with register */
{ OPLOG,	FORCC,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SAREG,	TSWORD|TSHORT|TCHAR,
		0, 	RESCC,
		"	cmpw AL,AR\n", },

/* compare with register */
{ OPLOG,	FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		0, 	RESCC,
		"	cmplw AL,AR\n", },

/* compare with register */
{ OPLOG,	FORCC,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		0, 	RESCC,
		"ZD", },

/* compare with register */
{ OPLOG,	FORCC | FEATURE_HARDFLOAT,
	SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
	SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
		0,	RESCC,
		"	fcmpu 0,AL,AR\n", },

/* soft-float */
{ OPLOG,	FORCC,
	SAREG,	TFLOAT,
	SAREG,	TFLOAT,
		NSPECIAL,	RESCC,
		"ZF\n", },

/* soft-float */
{ OPLOG,	FORCC,
	SBREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TDOUBLE|TLDOUBLE,
		NSPECIAL,	RESCC,
		"ZF", },

{ OPLOG,	FORCC,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"diediedie!", },

/* AND/OR/ER */
{ AND,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	and A1,AL,AR\n", },

{ AND,	INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	and. A1,AL,AR\n", },

/* AR must be positive */
{ AND,	INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SPCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	andi. A1,AL,AR\n", },

{ AND,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	and A1,AL,AR" COM "64-bit and\n"
		"	and U1,UL,UR\n" },

{ AND,	INBREG|FORCC,
	SBREG,	TLONGLONG|TULONGLONG,
	SPCON,	TANY,
		NBREG|NBSL,	RESC1|RESCC,
		"	andi. A1,AL,AR" COM "64-bit and with constant\n"
		"	li U1,0\n" },

{ OR,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	or A1,AL,AR\n", },

{ OR,	INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	or. A1,AL,AR\n", },

{ OR,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SPCON,	TANY,
		NAREG|NASL,	RESC1,
		"	ori A1,AL,AR\n", },

{ OR,	INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SPCON,	TANY,
		NAREG|NASL,	RESC1|RESCC,
		"	ori. A1,AL,AR\n", },

{ OR,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	or A1,AL,AR" COM "64-bit or\n"
		"	or U1,UL,UR\n" },

{ OR,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SPCON,	TANY,
		NBREG|NBSL,	RESC1,
		"	ori A1,AL,AR" COM "64-bit or with constant\n" },

{ OR,	INBREG|FORCC,
	SBREG,	TLONGLONG|TULONGLONG,
	SPCON,	TANY,
		NBREG|NBSL,	RESC1|RESCC,
		"	ori. A1,AL,AR" COM "64-bit or with constant\n" },

{ ER,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	xor A1,AL,AR\n", },

{ ER,	INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	xor. A1,AL,AR\n", },

{ ER,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SPCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	xori A1,AL,AR\n", },

{ ER,	INAREG|FORCC,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SPCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
		"	xori. A1,AL,AR\n", },

{ ER,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	xor A1,AL,AR" COM "64-bit xor\n"
		"	xor U1,UL,UR\n" },

{ ER,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SPCON,	TANY,
		NBREG|NBSL,	RESC1,
		"	xori A1,AL,AR" COM "64-bit xor with constant\n" },

{ ER,	INBREG|FORCC,
	SBREG,	TLONGLONG|TULONGLONG,
	SPCON,	TANY,
		NBREG|NBSL,	RESC1|RESCC,
		"	xori. A1,AL,AR" COM "64-bit xor with constant\n" },

/*
 * Jumps.
 */
{ GOTO, 	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	RNOP,
		"	ba LL\n", },

{ GOTO, 	FOREFF,
	SAREG,	TANY,
	SANY,	TANY,
		0,	RNOP,
		"	mtctr AL\n"
		"	bctr\n", },

/*
 * Convert LTYPE to reg.
 */

#if defined(ELFABI)
{ OPLTYPE,	INAREG | FEATURE_PIC,
	SANY,		TANY,
	SNAME,		TANY,
		NAREG,	RESC1,
		"	lwz A1,AL" COM "elfabi pic load\n", },
#endif

{ OPLTYPE,      INBREG,
        SANY,   	TANY,
        SOREG,		TLONGLONG|TULONGLONG,
                NBREG,  RESC1,
                "	lwz A1,AL" COM "load llong from memory\n"
		"	lwz U1,UL\n", },

{ OPLTYPE,      INBREG,
        SANY,   	TANY,
        SNAME,		TLONGLONG|TULONGLONG,
                NBREG,  RESC1,
		"	lis A1," HA16(AL) COM "load llong from sname\n"
		"	lwz A1," LO16(AL) "(A1)\n"
		"	lis U1," HA16(UL) "\n"
		"	lwz U1," LO16(UL) "(U1)\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG,		TWORD|TPOINT,
		NAREG,	RESC1,
		"	lwz A1,AL" COM "load word from memory\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SNAME,		TWORD|TPOINT,
		NAREG|NSPECIAL,	RESC1,
		"	lis A1," HA16(AL) COM "load word from sname\n"
		"	lwz A1," LO16(AL) "(A1)\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG,		TCHAR,
		NAREG,	RESC1,
		"	lbz A1,AL" COM "load char from memory\n"
		"	extsb A1,A1\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SNAME,		TCHAR,
		NAREG|NSPECIAL,	RESC1,
		"	lis A1," HA16(AL) COM "load char from sname\n"
		"	lbz A1," LO16(AL) "(A1)\n"
		"	extsb A1,A1\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG,		TUCHAR,
		NAREG,	RESC1,
		"	lbz A1,AL" COM "load uchar from memory\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SNAME,		TUCHAR,
		NAREG|NSPECIAL,	RESC1,
		"	lis A1," HA16(AL) COM "load uchar from sname\n"
		"	lbz A1," LO16(AL) "(A1)\n", },

/* load short from memory */
{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG,		TSHORT,
		NAREG,	RESC1,
		"	lha A1,AL" COM "load short from memory\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG,		TUSHORT,
		NAREG,	RESC1,
		"	lhz A1,AL" COM "load ushort from memory\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SNAME,		TSHORT,
		NAREG|NSPECIAL,	RESC1,
		"	lis A1," HA16(AL) COM "load short from sname\n"
		"	lha A1," LO16(AL) "(A1)\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SNAME,		TUSHORT,
		NAREG|NSPECIAL,	RESC1,
		"	lis A1," HA16(AL) COM "load ushort from sname\n"
		"	lhz A1," LO16(AL) "(A1)\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SSCON,		TANY,
		NAREG,	RESC1,
		"	li A1,AL" COM "load 16-bit constant\n", },

{ OPLTYPE,	INBREG,
	SANY,	TANY,
	SSCON,	TANY,
		NBREG,	RESC1,
		"	li A1,AL" COM "load 16-bit constant\n"
		"	li U1,UL\n", },

{ OPLTYPE,	INAREG,
	SANY,	TANY,
	SCON,	TANY,
		NAREG|NASL,	RESC1,
		"	lis A1," HA16(AL) COM "load constant into register\n"
		"	addi A1,A1," LO16(AL) "\n", },

{ OPLTYPE,	INBREG,
	SANY,	TANY,
	SCON,	TANY,
		NBREG,	RESC1,
		"	lis A1," HA16(AL) COM "load constant into register\n"
		"	addi A1,A1," LO16(AL) "\n"
		"	lis U1," HA16(UL) "\n"
		"	addi U1,U1," LO16(UL) "\n", },

{ OPLTYPE,	INAREG,
	SANY,	TANY,
	SAREG,	TANY,
		NAREG,	RESC1,
		"	mr A1,AL" COM "load AL into A1\n" },

{ OPLTYPE,      INBREG,
        SANY,   TANY,
        SBREG,	TANY,
                NBREG,  RESC1,
		"	mr A1,AL" COM "load UL:AL into U1:A1\n"
                "       mr U1,UL\n", },

{ OPLTYPE,      INCREG,
        SANY,   TANY,
        SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
                NCREG,  RESC1,
		"	fmr A1,AL" COM "load AL into A1\n", },

{ OPLTYPE,	INCREG | FEATURE_HARDFLOAT,
	SANY,		TANY,
	SOREG,		TFLOAT,
		NCREG,	RESC1,
		"	lfs A1,AL" COM "load float\n", },

/* soft-float */
{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG,		TFLOAT,
		NAREG,	RESC1,
		"	lwz A1,AL" COM "load float (soft-float)\n", },

{ OPLTYPE,	INCREG | FEATURE_HARDFLOAT,
	SANY,		TANY,
	SNAME,		TFLOAT,
		NCREG|NAREG,	RESC2,
		"	lis A1," HA16(AL) COM "load sname\n"
		"	lfs A2," LO16(AL) "(A1)\n", },

/* soft-float */
{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SNAME,		TFLOAT,
		NAREG,	RESC1,
		"	lis A1," HA16(AL) COM "load sname (soft-float)\n"
		"	lwz A1," LO16(AL) "(A1)\n", },

{ OPLTYPE,	INCREG | FEATURE_HARDFLOAT,
	SANY,		TANY,
	SOREG,		TDOUBLE|TLDOUBLE,
		NCREG,	RESC1,
		"	lfd A1,AL" COM "load (l)double\n", },

/* soft-float */
{ OPLTYPE,	INBREG,
	SANY,		TANY,
	SOREG,		TDOUBLE|TLDOUBLE,
		NBREG,	RESC1,
		"	lwz A1,AL" COM "load (l)double (soft-float)\n"
		"	lwz U1,UL\n", },

{ OPLTYPE,	INCREG | FEATURE_HARDFLOAT,
	SANY,		TANY,
	SNAME,		TDOUBLE|TLDOUBLE,
		NCREG|NAREG,	RESC2,
		"	lis A1," HA16(AL) COM "load sname\n"
		"	lfd A2," LO16(AL) "(A1)\n", },

{ OPLTYPE,	INBREG,
	SANY,		TANY,
	SNAME,		TDOUBLE|TLDOUBLE,
		NBREG,	RESC1,
		"	lis A1," HA16(AL) COM "load sname (soft-float)\n"
		"	lwz A1," LO16(AL) "(A1)\n"
		"	lis U1," HA16(UL) "\n"
		"	lwz U1," LO16(UL) "(U1)\n", },


/*
 * Negate a word.
 */

{ UMINUS,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SANY,	TANY,
		NAREG|NASL,	RESC1,
		"	neg A1,AL\n", },

{ UMINUS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SANY,	TANY,
		NBREG|NBSL,	RESC1,
		"	subfic A1,AL,0\n"
		"	subfze U1,UL\n", },

{ UMINUS,	INCREG | FEATURE_HARDFLOAT,
	SCREG,	TFLOAT|TDOUBLE|TLDOUBLE,
	SANY,	TANY,
		NCREG|NCSL,	RESC1,
		"	fneg A1,AL\n", },

{ UMINUS,	INAREG,
	SAREG,	TFLOAT,
	SANY,	TANY,
		NAREG|NASL,	RESC1,
		"	xoris A1,AL,0x8000" COM "(soft-float)\n", },

{ UMINUS,	INBREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SANY,	TANY,
		NBREG|NBSL,	RESC1,
		"	xoris U1,UL,0x8000" COM "(soft-float)\n"
		"	mr A1,AL\n", },

{ COMPL,	INAREG,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SANY,	TANY,
		NAREG|NASL,	RESC1,
		"	not A1,AL\n", },

{ COMPL,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SANY,	TANY,
		NBREG|NBSL,	RESC1,
		"	not A1,AL\n"
		"	not U1,UL\n", },

/*
 * Arguments to functions.
 */

#if 0
{ STARG,	FOREFF,
	SAREG|SOREG|SNAME|SCON,	TANY,
	SANY,	TSTRUCT,
		NSPECIAL|NAREG,	0,
		"ZF", },
#endif

# define DF(x) FORREW,SANY,TANY,SANY,TANY,REWRITE,x,""

{ UMUL, DF( UMUL ), },

{ ASSIGN, DF(ASSIGN), },

{ STASG, DF(STASG), },

{ FLD, DF(FLD), },

{ OPLEAF, DF(NAME), },

/* { INIT, DF(INIT), }, */

{ OPUNARY, DF(UMINUS), },

{ OPANY, DF(BITYPE), },

{ FREE,	FREE,	FREE,	FREE,	FREE,	FREE,	FREE,	FREE,	"help; I'm in trouble\n" },
};

int tablesize = sizeof(table)/sizeof(table[0]);
@


1.10
log
@Sync with master repo. Reminded by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.9
log
@Pull from master repo:
chars are sign-extended with extsb, not extsh.
@
text
@d1 1
a2 2
 * $OpenBSD: table.c,v 1.8 2007/11/24 13:38:06 stefan Exp $
 *
d35 1
a35 1
#ifdef ELFABI
d38 1
a38 2
#define COM	"	# "
#else
d41 2
a42 1
#define COM	"	; "
a59 1
/* convert (u)char to (u)char */
a65 1
/* convert (u)short to (u)short */
a71 1
/* convert pointers to (u)int/(u)long */
a77 1
/* convert pointers to pointers */
a83 1
/* convert (u)longlong to (u)longlong */
a89 1
/* convert char to short */
a95 1
/* convert uchar to short */
d99 1
a99 1
		NASL|NAREG,	RESC1,
a101 1
/* convert uchar to ushort/uint/ulong */
d105 2
a106 2
		0,		RLEFT,
		COM "convert uchar (AL) to ushort/unsigned (A1)\n", },
a108 1
/* convert char to ushort/uint/ulong */
d112 9
a120 2
		NASL|NAREG|NSPECIAL,	RESC1,
		"	extsb A1,AL" COM "convert char (AL) to ushort/unsigned (A1)\n", },
a121 1
/* convert uchar/ushort/uint to (u)longlong */
d129 7
a135 1
/* convert char/short/int to (u)longlong */
a142 1
/* convert (u)short to (u)char  */
a149 1
/* convert short to (u)int */
a155 1
/* convert ushort to (u)int. */
d159 1
a159 1
		NASL|NAREG|NSPECIAL,	RESC1,
a161 1
/* convert (u)int to (u)char */
a167 1
/* convert (u)int to (u)short */
a173 1
/* convert (u)longlong to (u)char */
a179 1
/* convert (u)longlong to (u)short*/
a185 1
/* convert (u)longlong to (u)int */
a193 1
/* char */
a200 1
/* uchar */
a206 1
/* short */
a212 1
/* ushort */
a218 1
/* (u)longlong to (u)char */
a225 1
/* (u)longlong to (u)short */
a232 1
/* (u)longlong to (u)int */
d239 126
a364 1
/* XXX where are the other OREG conversions? endianness problems? */
d371 2
a372 2
	SCON|SNAME,	TANY,
	SANY,		TANY,
d374 1
a374 1
		"	bl CL" COM "call (args, no result) to scon/sname (CL)\n", },
d377 2
a378 2
	SCON|SNAME,	TANY,
	SANY,		TANY,
d380 1
a380 1
		"	bl CL" COM "call (no args, no result) to scon/sname (CL)\n", },
d383 8
a390 2
	SCON|SNAME,	TANY,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT,
d392 1
a392 1
		"	bl CL" COM "call (args, result in r3) to scon/sname (CL)\n", },
d395 8
a402 2
	SCON|SNAME,	TANY,
	SBREG,		TLONGLONG|TULONGLONG,
d404 19
a422 1
		"	bl CL" COM "call (args, result in r3:r4) to scon/sname (CL)\n", },
d425 2
a426 2
	SCON|SNAME,	TANY,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT,
d428 7
a434 1
		"	bl CL" COM "call (no args, result in r3) to scon/sname (CL)\n", },
d437 2
a438 2
	SCON|SNAME,	TANY,
	SBREG,		TLONGLONG|TULONGLONG,
d440 31
a470 1
		"	bl CL" COM "call (no args, result in r3:r4) to scon/sname (CL)\n", },
d476 2
a477 2
		NAREG|NASL,	0,
		"ZP	call CL\n", },
d483 1
a483 1
		"ZP	call CL\n", },
d486 5
a490 4
	SNAME|SAREG,	TANY,
	SANY,	TANY,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"ZP	call *AL\n", },
d495 2
a496 2
		NAREG|NASL,	0,
		"ZP	call CL\n", },
d502 1
a502 1
		"ZP	call CL\n", },
d505 5
a509 4
	SNAME|SAREG,	TANY,
	SANY,	TANY,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"ZP	call *AL\n", },
d517 1
a517 1
	SAREG,	TWORD|TPOINT,
d524 1
a524 1
	SAREG,	TWORD|TPOINT,
d537 2
a538 2
	SAREG,	TWORD|TPOINT,
	SAREG,	TWORD|TPOINT,
d543 2
a544 2
	SAREG,	TWORD|TPOINT,
	SAREG,	TWORD|TPOINT,
d555 25
d581 1
a581 1
	SAREG,	TWORD|TPOINT,
d587 1
a587 1
	SAREG,	TWORD|TPOINT,
d600 2
a601 2
	SAREG,	TWORD|TPOINT,
	SAREG,	TWORD|TPOINT,
d606 2
a607 2
	SAREG,	TWORD|TPOINT,
	SAREG,	TWORD|TPOINT,
d618 26
d676 7
a682 1
		"ZO" },
d685 1
d687 5
d694 1
a694 1
		"	srw A1,AL,AR" COM "right shift\n", },
d697 1
d699 5
d706 1
a706 1
		"	srw. A1,AL,AR" COM "right shift\n", },
d709 1
a709 1
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d714 6
d721 1
a721 1
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d726 6
d738 6
a747 1
/* assign 16-bit constant to register */
d749 1
a749 1
	SAREG,		TANY,
a753 1
/* assign 16-bit constant to register */
d755 1
a755 1
	SBREG,		TANY,
a760 1
/* assign constant to register */
d762 1
a762 1
	SAREG,		TANY,
a767 1
/* assign constant to register */
d769 1
a769 1
	SBREG,		TANY,
a776 1
/* assign memory to register */
d781 1
a781 1
		"	lwz AL,AR\n", },
a782 1
/* assign memory to register */
a789 1
/* assign memory to register */
a805 1
/* assign memory to register */
a812 1
/* assign memory to register */
d818 1
a818 1
		"	li UL, 0\n" },
a819 1
/* assign memory to register */
a825 1
/* assign memory to register */
a832 1
/* assign memory to register */
a839 1
/* assign memory to register */
a847 1
/* assign memory to register */
a853 1
/* assign memory to register */
a859 1
/* assign memory to register */
a866 1
/* assign memory to register */
a873 1
/* assign register to memory */
a879 1
/* assign register to memory */
a886 1
/* assign register to memory */
a893 1
/* assign register to memory */
a902 1
/* assign register to memory */
a908 1
/* assign register to memory */
a915 1
/* assign register to memory */
a921 1
/* assign register to memory */
a928 1
/* assign register to register */
d942 82
a1023 5
#if 0
/* assign register to memory */
{ ASSIGN,	FOREFF,
	SAREG,		TPOINT,
	SAREG,		TWORD,
d1025 1
a1025 2
		"	stw AR,0(AL)" COM "indirect assign\n", },
#endif
d1027 1
a1027 1
#if 0
d1029 30
a1058 2
	SFLD,	TANY,
	SAREG,	TANY,
d1060 18
a1077 1
		"ZE", },
d1079 6
a1084 6
{ ASSIGN,	FOREFF,
	SFLD,	TANY,
	SAREG,	TANY,
		NAREG,	0,
		"ZE", },
#endif
d1086 15
a1100 8
/* Do not generate memcpy if return from funcall */
#if 0
{ STASG,	INAREG|FOREFF,
	SOREG|SNAME|SAREG,	TPTRTO|TSTRUCT,
	SFUNCALL,	TPTRTO|TSTRUCT,
		0,	RRIGHT,
		"", },
#endif
d1102 7
a1108 5
{ STASG,	INAREG|FOREFF,
	SOREG,	TANY,
	SAREG,	TPTRTO|TANY,
		NSPECIAL,	RRIGHT,
		"ZQ", },
d1115 2
a1116 2
	SAREG,	TSWORD,
	SAREG,	TWORD,
d1118 7
a1124 1
		"	divw A1,AL,AR\n", },
d1127 2
a1128 2
	SAREG,	TUWORD|TPOINT,
	SAREG,	TUWORD|TPOINT,
d1130 39
a1168 1
		"	divwu A1,AL,AR\n", },
d1171 2
a1172 2
	SAREG,	TSWORD,
	SAREG,	TSWORD,
d1174 1
a1174 1
		"	divw A1,AL,AR" COM "signed modulo\n"
d1179 2
a1180 2
	SAREG,	TWORD|TPOINT,
	SAREG,	TUWORD|TPOINT,
d1182 1
a1182 1
		"	divwu A1,AL,AR" COM "unsigned modulo\n"
d1186 6
d1198 6
d1210 6
d1230 26
d1262 1
a1262 1
	SOREG,		TWORD|TPOINT,
d1268 1
a1268 1
	SOREG,		TCHAR,
d1275 1
a1275 1
	SOREG,		TUCHAR,
d1281 1
a1281 1
	SOREG,		TSHORT,
d1287 1
a1287 1
	SOREG,		TUSHORT,
d1293 2
a1294 2
	SOREG,		TLONGLONG|TULONGLONG,
		NBREG, RESC1,
d1298 32
a1329 1
/* XXX UMUL of SNAME and AREG !!! */
d1358 2
a1359 2
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
d1367 1
a1367 1
		0, 	0,
d1370 21
d1399 2
a1400 2
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d1405 2
a1406 2
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d1412 1
a1412 1
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TCHAR,
d1432 2
a1433 2
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d1438 2
a1439 2
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d1444 3
a1446 3
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TCHAR,
	SSCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1,
d1450 3
a1452 3
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TCHAR,
	SSCON,	TANY,
		NAREG|NASL|NSPECIAL,	RESC1|RESCC,
d1464 1
a1464 1
	SSCON,	TANY,
d1470 1
a1470 1
	SSCON,	TANY,
d1475 2
a1476 2
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d1481 2
a1482 2
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d1487 2
a1488 2
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TCHAR,
	SSCON,	TANY,
d1493 2
a1494 2
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TCHAR,
	SSCON,	TANY,
d1507 1
a1507 1
	SSCON,	TANY,
d1513 1
a1513 1
	SSCON,	TANY,
d1537 8
a1560 1
/* load word from memory */
d1563 1
a1563 1
	SOREG,	TWORD|TPOINT,
a1566 1
/* load word from memory */
a1573 1
/* load char from memory */
a1580 1
/* load char from memory */
a1588 1
/* load uchar from memory */
a1594 1
/* load uchar from memory */
a1608 1
/* load ushort from memory */
a1614 1
/* load short from memory */
a1621 1
/* load ushort from memory */
a1628 1
/* load from 16-bit constant */
a1634 1
/* load from 16-bit constant */
a1641 1
/* load from constant */
d1645 1
a1645 1
		NAREG|NASL|NSPECIAL,	RESC1,
a1648 1
/* load from constant */
a1657 1
/* load from register */
a1663 1
/* load from register */
d1666 1
a1666 1
        SBREG,	TLONGLONG|TULONGLONG,
d1671 65
d1753 19
a1787 42

#if 0
{ FUNARG,	FOREFF,
	SCON|SAREG|SNAME|SOREG,	TWORD|TPOINT,
	SANY,	TWORD|TPOINT,
		0,	RNULL,
		"	pushl AL\n", },

{ FUNARG,	FOREFF,
	SCON,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SANY,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		0,	RNULL,
		"	pushl AL\n", },

{ FUNARG,	FOREFF,
	SAREG|SNAME|SOREG,	TSHORT,
	SANY,	TSHORT,
		NAREG,	0,
		"	movswl AL,ZN\n	pushl ZN\n", },
#endif

{ FUNARG,	FOREFF,
	SAREG|SNAME|SOREG,	TUSHORT,
	SANY,	TUSHORT,
		NAREG,	0,
		"	movzwl AL,ZN\n	pushl ZN\n", },

#if 0
{ FUNARG,	FOREFF,
	SHCH|SNAME|SOREG,	TCHAR,
	SANY,			TCHAR,
		NAREG,	0,
		"	movsbl AL,A1\n	pushl A1\n", },
#endif

#if 0
{ FUNARG,	FOREFF,
	SHCH|SNAME|SOREG,	TUCHAR,
	SANY,	TUCHAR,
		NAREG,	0,
		"	movzbl AL,A1\n	pushl A1\n", },
#endif
@


1.8
log
@Pull from master repo:
No need to sign-extend unsigned shorts loaded from memory.
@
text
@d2 1
a2 1
 * $OpenBSD: table.c,v 1.7 2007/11/24 09:27:02 stefan Exp $
d123 1
a123 1
		"	extsh A1,AL" COM "convert char (AL) to ushort/unsigned (A1)\n", },
@


1.7
log
@Pull from master repo:
More missing newlines.
@
text
@d2 1
a2 1
 * $OpenBSD: table.c,v 1.6 2007/11/24 00:44:59 stefan Exp $
d597 1
a597 1
	SOREG,		TSHORT|TUSHORT,
d604 8
a611 1
	SNAME,		TSHORT|TUSHORT,
d616 8
d822 7
a828 1
	SOREG,		TSHORT|TUSHORT,
d830 1
a830 1
		"	lha A1,AL" COM "(u)short load\n", },
d1089 8
a1096 1
/* load (u)short from memory */
d1099 1
a1099 1
	SOREG,		TSHORT|TUSHORT,
d1101 1
a1101 1
		"	lha A1,AL" COM "load (u)short from memory\n", },
d1103 1
a1103 1
/* load (u)short from memory */
d1106 1
a1106 1
	SNAME,		TSHORT|TUSHORT,
d1108 1
a1108 1
		"	lis A1," HA16(AL) COM "load (u)short from sname\n"
d1110 8
@


1.6
log
@Add newline after comment. The following instruction would not be
recognized by the assembler otherwise.
@
text
@d2 1
a2 1
 * $OpenBSD: table.c,v 1.5 2007/11/22 21:20:43 stefan Exp $
d354 1
a354 1
		"	addze U1,UL", },
d654 1
a654 1
		"	lis A1," HA16(AL)
d1158 1
a1158 1
		"	not A1,AL"
@


1.5
log
@Pull from master repo:
Fix the other rule that did not load small negative 64-bit constants
correctly. The error shows up if you compile
main(){long long = -1;} with -xtemps.
@
text
@d2 1
a2 1
 * $OpenBSD: table.c,v 1.4 2007/11/19 22:59:03 stefan Exp $
d168 1
a168 1
		"	andi. A1,AL,255" COM "convert (u)int to (u)char", },
@


1.4
log
@Pull from master repo:

>Fix type conversion problems observed by stefan@@
>Some other typos too.

and

>- Add rules for conversion from (u)long long to (u){char,short,int}
>- Fix loading ushorts from mem. They don't need to be sign-extended.
>- Fix a rule that didn't load small negative 64-bit values into
>  registers correctly (there's at least one more of it left).
>- Add $Id$
>
>ok gmcgarry, otto
@
text
@d2 1
a2 1
 * $OpenBSD$
d494 1
a494 1
		"	li UL,0\n", },
@


1.3
log
@Pull from master repo, commit by myself:
next step for ELFABI, hello world works with ELFABI, but register
pairs still produce wrong assembly; with Dale Rahn
@
text
@d63 2
a64 2
	INAREG,	TCHAR|TUCHAR,
	INAREG,	TCHAR|TUCHAR,
d70 2
a71 2
	INAREG,	TSHORT|TUSHORT,
	INAREG,	TSHORT|TUSHORT,
a95 1

d123 1
a123 1
		"	andi. A1,AL,255" COM "convert char (AL) to ushort/unsigned (A1)\n", },
d133 1
a133 1
/* convert char/short/int to ulonglong */
d136 1
a136 1
	SBREG,	TULONGLONG,
d138 1
a138 9
		"	andi. A1,AL,255" COM "convert char/short/int to ulonglong\n"
		"	li U1,0\n", },

/* convert char/short/int to longlong */
{ SCONV,	INBREG,
	SAREG,	TCHAR|TSHORT|TSWORD,
	SBREG,	TLONGLONG,
		NBREG|NBSL,		RESC1,
		"	mr A1,AL" COM "convert char/short/int to longlong\n"
d149 1
a149 1
/* convert short to int */
d153 2
a154 2
		NAREG|NASL|NSPECIAL,	RESC1,
		"	andi. A1,AL,65535" COM "convert short to int\n", },
d177 21
d215 1
a215 1
/* short, ushort */
d217 1
a217 1
	SOREG,	TSHORT|TUSHORT,
d220 33
a252 1
		"	lha A1,AL" COM "convert (u)short to int/long\n", },
d385 1
a385 1
		"	addi. A1,AL,-AR\n", },
d719 2
a720 2
	SOREG|SNAME,	TANY,
	SAREG|SOREG|SNAME,	TPTRTO|TANY,
d807 1
a807 1
	SOREG,		TSHORT,
d809 1
a809 8
		"	lhz A1,AL" COM "short load\n"
		"	extsh A1,A1\n", },

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG,		TUSHORT,
		NAREG|NSPECIAL,	RESC1,
		"	lhz A1,AL" COM "ushort load\n", },
d818 2
d1009 1
a1009 1
                "	lwz A1,AL" COM "load long from memory\n"
d1016 1
a1016 1
		"	lis A1," HA16(AL) COM "load long from sname\n"
d1041 2
a1042 1
		"	lbz A1,AL" COM "load char from memory\n" },
d1047 1
a1047 1
	SNAME,		TCHAR|TUCHAR,
d1049 3
a1051 2
		"	lis A1," HA16(AL) COM "load (u)char from sname\n"
		"	lbz A1," LO16(AL) "(A1)\n", },
d1056 1
a1056 1
	SOREG,		TCHAR|TUCHAR,
d1058 1
a1058 1
		"	lbz A1,AL" COM "load (u)char from memory\n", },
d1060 9
a1068 1
/* load short from memory */
d1075 1
a1075 1
/* load short from memory */
d1078 1
a1078 1
	SOREG,		TSHORT|TUSHORT,
d1096 1
a1096 1
		"	li U1,0\n", },
d1137 1
a1137 1
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
d1143 1
a1143 1
	SBREG,	TLONGLONG|TULONGLONG,
@


1.2
log
@our as wants # as a comment char
@
text
@d1 3
a3 2
/*
 * $OpenBSD: table.c,v 1.1 2007/10/20 10:01:38 otto Exp $
d36 10
d55 1
a55 1
		"	# pointer conversion", },
d66 8
a73 1
		"	# convert a between (u)uchar and (u)char\n", },
d80 1
a80 1
		"	# convert a pointer/word to an int\n", },
d87 1
a87 1
		"	# convert pointers\n", },
d94 1
a94 1
		"	# convert (u)longlong to (u)longlong\n", },
d102 1
a102 1
		"	extsb	A1,AL	# convert char to short/int\n", },
d109 1
a109 1
		"	# convert uchar to short/int\n", },
d111 1
a111 2
#if 0
/* convert char to short in memory */
d113 4
a116 6
	SOREG,	TCHAR,
	SAREG,	TSHORT|TSWORD,
		NASL|NAREG|NSPECIAL,	RESC1,
		"	lbz A1,AL	# convert char to short/int\n"
		"	extsb A1,A1\n", },
#endif
d118 2
a119 1
/* convert (u)char to ushort/uint/ulong */
d121 1
a121 1
	SAREG,	TCHAR|TUCHAR,
d124 1
a124 19
		"	andi. A1,AL,255	# convert (u)char (AL) to ushort/unsigned (A1)\n", },

#if 0
/* convert uchar to short/int/long in memory */
{ SCONV,	INAREG,
	SOREG,	TUCHAR,
	SAREG,	TSHORT|TSWORD,
		NASL|NAREG|NSPECIAL,	RESC1,
		"	lbz A1,AL	# convert uchar to short/int\n", },
#endif

#if 0
/* convert (u)char to ushort/uint/ulong in memory */
{ SCONV,	INAREG,
	SOREG,	TCHAR|TUCHAR,
	SAREG,	TUSHORT|TUWORD|TULONG,
		NASL|NAREG,	RESC1,
		"	lbz A1,AL	# convert (u)char to ushort/unsigned/ulong\n", },
#endif
d131 1
a131 1
		"	mr A1,AL	# convert uchar/ushort/uint to (u)longlong\n"
d139 1
a139 1
		"	mr A1,AL	# convert char/short/int to ulonglong\n"
d147 1
a147 1
		"	mr A1,AL	# convert char/short/int to longlong\n"
d155 1
a155 10
		"	andi. A1,AL,255	# convert (u)short to (u)char\n", },

#if 0
/* convert (u)short to (u)char */
{ SCONV,	INAREG,
	SOREG,	TSHORT|TUSHORT,
	SAREG,	TCHAR|TUCHAR,
		NSPECIAL|NAREG|NASL,	RESC1,
		"	lbz	A1,AL	# convert (u)short to (u)char\n", },
#endif
d157 1
d163 1
a163 10
		"	andi. A1,AL,63356	# convert short to int\n", },

#if 0
/* convert (u)short to uint int memory */
{ SCONV,	INAREG,
	SOREG,	TUSHORT|TSHORT,
	SAREG,	TWORD,
		NAREG|NASL|NSPECIAL,	RESC1,
		"	lha A1,AL	# convert (u)short to int\n", },
#endif
d170 1
a170 1
		"	andi. A1,AL,65535	# convert ushort to word\n", },
d177 1
a177 8
		"	andi. A1,AL,255		# convert (u)int to (u)char", },

/* convert (u)int to (u)char */
{ SCONV,        INAREG,
        SAREG,  TWORD,
        SANY,   TCHAR|TUCHAR,
	0,	RLEFT,
		"	# convert (u)int to (u)char\n", },
d184 25
a208 1
		"	andi. A1,AL,65535	# convert (u)int to (u)short\n", },
d218 1
a218 1
		"	bl CL	# call (args, no result) to scon/sname (CL)\n", },
d224 1
a224 1
		"	bl CL	# call (no args, no result) to scon/sname (CL)\n", },
d230 1
a230 1
		"	bl CL	# call (args, result in r3) to scon/sname (CL)\n", },
d236 1
a236 1
		"	bl CL	# call (args, result in r3:r4) to scon/sname (CL)\n", },
d242 1
a242 1
		"	bl CL	# call (no args, result in r3) to scon/sname (CL)\n", },
d248 1
a248 1
		"	bl CL	# call (no args, result in r3:r4) to scon/sname (CL)\n", },
d294 3
a296 3
	SONE,	TANY,
		NSPECIAL,	RLEFT,
		"	addi AL,AL,AR	# 1\n", },
d299 1
a299 1
{ PLUS,		INAREG,
d302 2
a303 2
		NAREG|NASL|NSPECIAL,	RESC1,
		"	addi A1,AL,AR		# addition of constant\n", },
d309 1
a309 1
		"	addic A1,AL,AR		# 64-bit addition of constant\n"
d318 6
d328 1
a328 1
		"	addc A1,AL,AR		# 64-bit add\n"
d333 1
a333 1
	SONE,	TANY,
d335 1
a335 1
		"	addi A1,AL,-1\n", },
d337 1
a337 1
{ MINUS,	INAREG,
d340 2
a341 2
		NAREG|NASL|NSPECIAL,	RESC1,
		"	addi A1,AL,AR\n", },
d347 1
a347 1
		"	addic A1,AL,-AR"
d356 6
d366 1
a366 1
		"	subfc A1,AR,AL		# 64-bit subtraction\n"
d377 7
a383 1
		"	slw A1,AL,AR		# left shift\n", },
d389 7
a395 1
		"	slwi A1,AL,AR		# left shift by constant\n", },
d407 7
a413 1
		"	srw A1,AL,AR		# right shift\n", },
d419 7
a425 1
		"	srwi A1,AL,AR		# right shift by constant\n", },
d457 2
a458 2
		"	lis AL,ha16(AR)\n"
		"	addi AL,AL,lo16(AR)\n", },
d465 4
a468 4
		"	lis AL,ha16(AR)\n"
		"	addi AL,AL,lo16(AR)\n"
		"	lis UL,ha16(UR)\n"\
		"	addi UL,UL,lo16(UR)\n", },
d482 2
a483 2
		"	lis AL,ha16(AR)		# assign sname to reg\n"
		"	lwz AL,lo16(AR)(AL)\n", },
d490 1
a490 1
		"	lwz AL,AR		# assign llong to reg\n"
d497 4
a500 4
		"	lis AL,ha16(AR)		# assign 64-bit sname to reg\n"
		"	lwz AL,lo16(AR)(AL)\n"
		"	lis UL,ha16(UR)\n"
		"	lwz UL,lo16(UR)(UL)\n", },
d507 1
a507 1
		"	lwz AL,AR		# load int/pointer into llong\n"
d515 1
a515 1
		"	lwz AL,AR		# load uint/pointer into (u)llong\n"
d530 2
a531 2
		"	lis AL,ha16(AR)		# assign uchar sname to reg\n"
		"	lbz AL,lo16(AR)(AL)\n", },
d546 2
a547 2
		"	lis AL,ha16(AR)		# assign char sname to reg\n"
		"	lbz AL,lo16(AR)(AL)\n"
d562 2
a563 2
		"	lis AL,ha16(AR)\n"
		"	lha AL,lo16(AR)(AL)\n", },
d577 2
a578 2
		"	lis A1,ha16(AL)		# assign reg to sname\n"
		"	stw AR,lo16(AL)(A1)\n", },
d585 1
a585 1
		"	stw AR,AL		# store 64-bit value\n"
d593 4
a596 4
		"	lis A1,ha16(AL)		# assign reg to 64-bit sname\n"
		"	stw AR,lo16(AL)(A1)\n"
		"	lis U1,ha16(UL)\n"
		"	stw UR,lo16(UL)(U1)\n", },
d610 2
a611 2
		"	lis A1,ha16(AL)"
		"	stb AR,lo16(AL)(A1)\n", },
d625 2
a626 2
		"	lis A1,ha16(AL)\n"
		"	sth AR,lo16(AL)(A1)\n", },
d633 1
a633 1
		"	mr AL,AR	# assign AR to AL\n", },
d639 1
a639 1
		"	mr AL,AR	# assign UR:AR to UL:AL\n"
d643 9
d700 1
a700 1
		"	divw A1,AL,AR		# signed modulo\n"
d708 1
a708 1
		"	divwu A1,AL,AR		# unsigned modulo\n"
d743 2
a744 2
	SANY,		TPOINT|TWORD,
	SOREG,		TPOINT|TWORD,
d746 1
a746 1
		"	lwz A1,AL		# word load\n", },
d752 1
a752 1
		"	lbz A1,AL		# char load\n"
d759 1
a759 1
		"	lbz A1,AL		# uchar load\n", },
d765 1
a765 1
		"	lhz A1,AL		# short load\n"
d772 1
a772 1
		"	lhz A1,AL		# ushort load\n", },
d778 1
a778 1
		"	lwz A1,AL		# 64-bit load\n"
d787 1
a787 1
	SAREG,	TANY,
d792 7
d801 2
a802 2
	SAREG,	TWORD|TPOINT|TSHORT|TCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TCHAR,
d808 7
d830 6
d837 1
a837 1
		"	and A1,AL,AR\n", },
a838 1
#if 0
d840 5
a844 6
{ AND,	INAREG,
	SAREG,		TWORD|TSHORT|TUSHORT|TCHAR|TCHAR,
	SSCON,	TANY,
		0,	RLEFT,
		"	andi. AL,AL,AR\n", },
#endif
d850 1
a850 1
		"	and A1,AL,AR		# 64-bit and\n"
d853 1
a853 1
{ AND,	INBREG,
d855 4
a858 4
	SSCON,	TANY,
		0,	RLEFT,
		"	andi. AL,AL,AR		# 64-bit and with constant\n"
		"	li UL,0\n" },
d866 6
d875 8
a882 2
		0,	RLEFT,
		"	ori AL,AL,AR\n", },
d887 3
a889 3
		0,	RLEFT,
		"	or AL,AL,AR		# 64-bit or\n"
		"	or UL,UL,UR\n" },
d894 8
a901 2
		0,	RLEFT,
		"	ori AL,AL,AR		# 64-bit or with constant\n" },
d909 6
d918 8
a925 2
		0,	RLEFT,
		"	xori AL,AL,AR\n", },
d931 1
a931 1
		"	xor A1,AL,AR		# 64-bit xor\n"
d937 8
a944 2
		0,	RLEFT,
		"	xori AL,AL,AR		# 64-bit xor with constant\n" },
a954 1
#ifdef GCC_COMPAT
d959 2
a960 2
		"	ba *AL\n", },
#endif
d970 1
a970 1
                "	lwz A1,AL	# load long from memory\n"
d977 4
a980 4
		"	lis A1,ha16(AL)		# load long from sname\n"
		"	lwz A1,lo16(AL)(A1)\n"
		"	lis U1,ha16(UL)\n"
		"	lwz U1,lo16(UL)(U1)\n", },
d987 1
a987 1
		"	lwz A1,AL		# load word from memory\n", },
d994 2
a995 2
		"	lis A1,ha16(AL)		# load word from sname\n"
		"	lwz A1,lo16(AL)(A1)\n", },
d1002 1
a1002 2
		"	lbz A1,AL		# load char from memory\n"
		"	extsb A1,A1\n", },
d1007 1
a1007 1
	SNAME,		TCHAR,
d1009 2
a1010 3
		"	lis A1,ha16(AL)		# load char from sname\n"
		"	lbz A1,lo16(AL)(A1)\n"
		"	extsb A1,A1\n", },
d1015 1
a1015 1
	SOREG,		TUCHAR,
d1017 1
a1017 9
		"	lbz A1,AL		# load uchar from memory\n", },

/* load uchar from memory */
{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SNAME,		TUCHAR,
		NAREG|NSPECIAL,	RESC1,
		"	lis A1,ha16(AL)		# load uchar from sname"
		"	lbz A1,lo16(AL)(A1)\n", },
d1024 1
a1024 1
		"	lha A1,AL		# load (u)short from memory\n", },
d1031 2
a1032 2
		"	lis A1,ha16(AL)		# load (u)short from sname\n"
		"	lha A1,lo16(AL)(A1)\n", },
d1039 1
a1039 1
		"	li A1,AL		# load 16-bit constant\n", },
d1046 1
a1046 1
		"	li A1,AL		# load 16-bit constant\n"
d1054 2
a1055 2
		"	lis A1,ha16(AL)	# load constant into register\n"
		"	addi A1,A1,lo16(AL)\n", },
d1062 4
a1065 4
		"	lis A1,ha16(AL)	# load constant into register\n"
		"	addi A1,A1,lo16(AL)\n"
		"	lis U1,ha16(UL)\n"
		"	addi U1,U1,lo16(UL)\n", },
d1072 1
a1072 1
		"	mr A1,AL	# load AL into A1\n" },
d1079 1
a1079 1
		"	mr A1,AL	# load UL:AL into U1:A1\n"
a1080 1

@


1.1
log
@Start of a powerpc backend by Gregory McGarry. Not complete yet.
@
text
@d2 1
a2 1
 * $OpenBSD$
d44 1
a44 1
		"	; pointer conversion", },
d55 1
a55 1
		"	; convert a between (u)uchar and (u)char\n", },
d62 1
a62 1
		"	; convert a pointer/word to an int\n", },
d69 1
a69 1
		"	; convert pointers\n", },
d76 1
a76 1
		"	; convert (u)longlong to (u)longlong\n", },
d84 1
a84 1
		"	extsb	A1,AL	; convert char to short/int\n", },
d91 1
a91 1
		"	; convert uchar to short/int\n", },
d99 1
a99 1
		"	lbz A1,AL	; convert char to short/int\n"
d108 1
a108 1
		"	andi. A1,AL,255	; convert (u)char (AL) to ushort/unsigned (A1)\n", },
d116 1
a116 1
		"	lbz A1,AL	; convert uchar to short/int\n", },
d125 1
a125 1
		"	lbz A1,AL	; convert (u)char to ushort/unsigned/ulong\n", },
d133 1
a133 1
		"	mr A1,AL	; convert uchar/ushort/uint to (u)longlong\n"
d141 1
a141 1
		"	mr A1,AL	; convert char/short/int to ulonglong\n"
d149 1
a149 1
		"	mr A1,AL	; convert char/short/int to longlong\n"
d157 1
a157 1
		"	andi. A1,AL,255	; convert (u)short to (u)char\n", },
d165 1
a165 1
		"	lbz	A1,AL	; convert (u)short to (u)char\n", },
d173 1
a173 1
		"	andi. A1,AL,63356	; convert short to int\n", },
d181 1
a181 1
		"	lha A1,AL	; convert (u)short to int\n", },
d189 1
a189 1
		"	andi. A1,AL,65535	; convert ushort to word\n", },
d196 1
a196 1
		"	andi. A1,AL,255		; convert (u)int to (u)char", },
d203 1
a203 1
		"	; convert (u)int to (u)char\n", },
d210 1
a210 1
		"	andi. A1,AL,65535	; convert (u)int to (u)short\n", },
d220 1
a220 1
		"	bl CL	; call (args, no result) to scon/sname (CL)\n", },
d226 1
a226 1
		"	bl CL	; call (no args, no result) to scon/sname (CL)\n", },
d232 1
a232 1
		"	bl CL	; call (args, result in r3) to scon/sname (CL)\n", },
d238 1
a238 1
		"	bl CL	; call (args, result in r3:r4) to scon/sname (CL)\n", },
d244 1
a244 1
		"	bl CL	; call (no args, result in r3) to scon/sname (CL)\n", },
d250 1
a250 1
		"	bl CL	; call (no args, result in r3:r4) to scon/sname (CL)\n", },
d298 1
a298 1
		"	addi AL,AL,AR	; 1\n", },
d305 1
a305 1
		"	addi A1,AL,AR		; addition of constant\n", },
d311 1
a311 1
		"	addic A1,AL,AR		; 64-bit addition of constant\n"
d324 1
a324 1
		"	addc A1,AL,AR		; 64-bit add\n"
d356 1
a356 1
		"	subfc A1,AR,AL		; 64-bit subtraction\n"
d367 1
a367 1
		"	slw A1,AL,AR		; left shift\n", },
d373 1
a373 1
		"	slwi A1,AL,AR		; left shift by constant\n", },
d385 1
a385 1
		"	srw A1,AL,AR		; right shift\n", },
d391 1
a391 1
		"	srwi A1,AL,AR		; right shift by constant\n", },
d448 1
a448 1
		"	lis AL,ha16(AR)		; assign sname to reg\n"
d456 1
a456 1
		"	lwz AL,AR		; assign llong to reg\n"
d463 1
a463 1
		"	lis AL,ha16(AR)		; assign 64-bit sname to reg\n"
d473 1
a473 1
		"	lwz AL,AR		; load int/pointer into llong\n"
d481 1
a481 1
		"	lwz AL,AR		; load uint/pointer into (u)llong\n"
d496 1
a496 1
		"	lis AL,ha16(AR)		; assign uchar sname to reg\n"
d512 1
a512 1
		"	lis AL,ha16(AR)		; assign char sname to reg\n"
d543 1
a543 1
		"	lis A1,ha16(AL)		; assign reg to sname\n"
d551 1
a551 1
		"	stw AR,AL		; store 64-bit value\n"
d559 1
a559 1
		"	lis A1,ha16(AL)		; assign reg to 64-bit sname\n"
d599 1
a599 1
		"	mr AL,AR	; assign AR to AL\n", },
d605 1
a605 1
		"	mr AL,AR	; assign UR:AR to UL:AL\n"
d657 1
a657 1
		"	divw A1,AL,AR		; signed modulo\n"
d665 1
a665 1
		"	divwu A1,AL,AR		; unsigned modulo\n"
d703 1
a703 1
		"	lwz A1,AL		; word load\n", },
d709 1
a709 1
		"	lbz A1,AL		; char load\n"
d716 1
a716 1
		"	lbz A1,AL		; uchar load\n", },
d722 1
a722 1
		"	lhz A1,AL		; short load\n"
d729 1
a729 1
		"	lhz A1,AL		; ushort load\n", },
d735 1
a735 1
		"	lwz A1,AL		; 64-bit load\n"
d789 1
a789 1
		"	and A1,AL,AR		; 64-bit and\n"
d796 1
a796 1
		"	andi. AL,AL,AR		; 64-bit and with constant\n"
d815 1
a815 1
		"	or AL,AL,AR		; 64-bit or\n"
d822 1
a822 1
		"	ori AL,AL,AR		; 64-bit or with constant\n" },
d840 1
a840 1
		"	xor A1,AL,AR		; 64-bit xor\n"
d847 1
a847 1
		"	xori AL,AL,AR		; 64-bit xor with constant\n" },
d874 1
a874 1
                "	lwz A1,AL	; load long from memory\n"
d881 1
a881 1
		"	lis A1,ha16(AL)		; load long from sname\n"
d891 1
a891 1
		"	lwz A1,AL		; load word from memory\n", },
d898 1
a898 1
		"	lis A1,ha16(AL)		; load word from sname\n"
d906 1
a906 1
		"	lbz A1,AL		; load char from memory\n"
d914 1
a914 1
		"	lis A1,ha16(AL)		; load char from sname\n"
d923 1
a923 1
		"	lbz A1,AL		; load uchar from memory\n", },
d930 1
a930 1
		"	lis A1,ha16(AL)		; load uchar from sname"
d938 1
a938 1
		"	lha A1,AL		; load (u)short from memory\n", },
d945 1
a945 1
		"	lis A1,ha16(AL)		; load (u)short from sname\n"
d953 1
a953 1
		"	li A1,AL		; load 16-bit constant\n", },
d960 1
a960 1
		"	li A1,AL		; load 16-bit constant\n"
d968 1
a968 1
		"	lis A1,ha16(AL)	; load constant into register\n"
d976 1
a976 1
		"	lis A1,ha16(AL)	; load constant into register\n"
d986 1
a986 1
		"	mr A1,AL	; load AL into A1\n" },
d993 1
a993 1
		"	mr A1,AL	; load UL:AL into U1:A1\n"
@

