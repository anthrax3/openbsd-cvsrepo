head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.12.11.51.12;	author pirofti;	state dead;
branches;
next	1.3;

1.3
date	2008.04.11.20.45.52;	author stefan;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.22.12.38.56;	author stefan;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.25.18.45.06;	author otto;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*      $OpenBSD: code.c,v 1.3 2008/04/11 20:45:52 stefan Exp $    */
/*
 * Copyright (c) 2007 Gregory McGarry (g.mcgarry@@ieee.org).
 * Copyright (c) 2003 Anders Magnusson (ragge@@ludd.luth.se).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  Stuff for pass1.
 */

#include <assert.h>

#include "pass1.h"
#include "pass2.h"

int lastloc = -1;
/*
 * Define everything needed to print out some data (or text).
 * This means segment, alignment, visibility, etc.
 */
void
defloc(struct symtab *sp)
{
	extern char *nextsect;
	static char *loctbl[] = { "text", "data", "section .rodata" };
	TWORD t;
	int s;

	if (sp == NULL) {
		lastloc = -1;
		return;
	}
	t = sp->stype;
	s = ISFTN(t) ? PROG : ISCON(cqual(t, sp->squal)) ? PROG : DATA;
	if (nextsect) {
		printf("\t.section %s\n", nextsect);
		nextsect = NULL;
		s = -1;
	} else if (s != lastloc)
		printf("\t.%s\n", loctbl[s]);
	lastloc = s;
	while (ISARY(t))
		t = DECREF(t);
	if (t > UCHAR)
		printf("\t.align %d\n", t > USHORT ? 4 : 2);
#ifdef USE_GAS
	if (ISFTN(t))
		printf("\t.type %s,%%function\n", exname(sp->soname));
#endif
	if (sp->sclass == EXTDEF)
		printf("\t.global %s\n", exname(sp->soname));
	if (ISFTN(t))
		return;
	if (sp->slevel == 0)
		printf("%s:\n", exname(sp->soname));
	else
		printf(LABFMT ":\n", sp->soffset);
}

/* Put a symbol in a temporary
 * used by bfcode() and its helpers
 */
static void
putintemp(struct symtab *sym)
{
        NODE *p;

        spname = sym;
        p = tempnode(0, sym->stype, sym->sdf, sym->ssue);
        p = buildtree(ASSIGN, p, buildtree(NAME, 0, 0));
        sym->soffset = regno(p->n_left);
        sym->sflags |= STNODE;
        ecomp(p);
}

/* setup a 64-bit parameter (double/ldouble/longlong)
 * used by bfcode() */
static void
param_64bit(struct symtab *sym, int *argoffp, int dotemps)
{
        int argoff = *argoffp;
        NODE *p, *q;
        int navail;

#if ALLONGLONG == 64
	/* alignment */
	++argoff;
	argoff &= ~1;
	*argoffp = argoff;
#endif

        navail = NARGREGS - argoff;

        if (navail < 2) {
		/* half in and half out of the registers */
		if (features(FEATURE_BIGENDIAN)) {
			cerror("movearg_64bit");
			p = q = NULL;
		} else {
        		q = block(REG, NIL, NIL, INT, 0, MKSUE(INT));
		        regno(q) = R0 + argoff;
			if (dotemps) {
				q = block(SCONV, q, NIL,
				    ULONGLONG, 0, MKSUE(ULONGLONG));
				spname = sym;
		                p = buildtree(NAME, 0, 0);
				p->n_type = ULONGLONG;
				p->n_df = 0;
				p->n_sue = MKSUE(ULONGLONG);
				p = block(LS, p, bcon(32), ULONGLONG,
				    0, MKSUE(ULONGLONG));
				q = block(PLUS, p, q, ULONGLONG,
				    0, MKSUE(ULONGLONG));
				p = tempnode(0, ULONGLONG,
				    0, MKSUE(ULONGLONG));
				sym->soffset = regno(p);
				sym->sflags |= STNODE;
			} else {
                		spname = sym;
		                p = buildtree(NAME, 0, 0);
				regno(p) = sym->soffset;
				p->n_type = INT;
				p->n_df = 0;
				p->n_sue = MKSUE(INT);
			}
		}
	        p = buildtree(ASSIGN, p, q);
		ecomp(p);
	        *argoffp = argoff + 2;
		return;
        }

        q = block(REG, NIL, NIL, sym->stype, sym->sdf, sym->ssue);
        regno(q) = R0R1 + argoff;
        if (dotemps) {
                p = tempnode(0, sym->stype, sym->sdf, sym->ssue);
                sym->soffset = regno(p);
                sym->sflags |= STNODE;
        } else {
                spname = sym;
                p = buildtree(NAME, 0, 0);
        }
        p = buildtree(ASSIGN, p, q);
        ecomp(p);
        *argoffp = argoff + 2;
}

/* setup a 32-bit param on the stack
 * used by bfcode() */
static void
param_32bit(struct symtab *sym, int *argoffp, int dotemps)
{
        NODE *p, *q;

        q = block(REG, NIL, NIL, sym->stype, sym->sdf, sym->ssue);
        regno(q) = R0 + (*argoffp)++;
        if (dotemps) {
                p = tempnode(0, sym->stype, sym->sdf, sym->ssue);
                sym->soffset = regno(p);
                sym->sflags |= STNODE;
        } else {
                spname = sym;
                p = buildtree(NAME, 0, 0);
        }
        p = buildtree(ASSIGN, p, q);
        ecomp(p);
}

/* setup a double param on the stack
 * used by bfcode() */
static void
param_double(struct symtab *sym, int *argoffp, int dotemps)
{
        NODE *p, *q, *t;
        int tmpnr;

	/*
	 * we have to dump the float from the general register
	 * into a temp, since the register allocator doesn't like
	 * floats to be in CLASSA.  This may not work for -xtemps.
	 */

        t = tempnode(0, ULONGLONG, 0, MKSUE(ULONGLONG));
        tmpnr = regno(t);
        q = block(REG, NIL, NIL, INT, 0, MKSUE(INT));
        q->n_rval = R0R1 + (*argoffp)++;
        p = buildtree(ASSIGN, t, q);
        ecomp(p);

        if (dotemps) {
                sym->soffset = tmpnr;
                sym->sflags |= STNODE;
        } else {
                q = tempnode(tmpnr, sym->stype, sym->sdf, sym->ssue);
                spname = sym;
                p = buildtree(NAME, 0, 0);
                p = buildtree(ASSIGN, p, q);
                ecomp(p);
        }
}

/* setup a float param on the stack
 * used by bfcode() */
static void
param_float(struct symtab *sym, int *argoffp, int dotemps)
{
        NODE *p, *q, *t;
        int tmpnr;

	/*
	 * we have to dump the float from the general register
	 * into a temp, since the register allocator doesn't like
	 * floats to be in CLASSA.  This may not work for -xtemps.
	 */

        t = tempnode(0, INT, 0, MKSUE(INT));
        tmpnr = regno(t);
        q = block(REG, NIL, NIL, INT, 0, MKSUE(INT));
        q->n_rval = R0 + (*argoffp)++;
        p = buildtree(ASSIGN, t, q);
        ecomp(p);

        if (dotemps) {
                sym->soffset = tmpnr;
                sym->sflags |= STNODE;
        } else {
                q = tempnode(tmpnr, sym->stype, sym->sdf, sym->ssue);
                spname = sym;
                p = buildtree(NAME, 0, 0);
                p = buildtree(ASSIGN, p, q);
                ecomp(p);
        }
}

int rvnr;

/*
 * Beginning-of-function code:
 *
 * 'sp' is an array of indices in symtab for the arguments
 * 'cnt' is the number of arguments
 */
void
bfcode(struct symtab **sp, int cnt)
{
	NODE *p, *q;
	union arglist *usym;
	int saveallargs = 0;
	int i, argoff = 0;

        /*
         * Detect if this function has ellipses and save all
         * argument registers onto stack.
         */
        usym = cftnsp->sdf->dfun;
        while (usym && usym->type != TNULL) {
                if (usym->type == TELLIPSIS) {
                        saveallargs = 1;
                        break;
                }
                ++usym;
        }

	/* if returning a structure, more the hidden argument into a TEMP */
        if (cftnsp->stype == STRTY+FTN || cftnsp->stype == UNIONTY+FTN) {
		p = tempnode(0, PTR+STRTY, 0, cftnsp->ssue);
		rvnr = regno(p);
		q = block(REG, NIL, NIL, PTR+STRTY, 0, cftnsp->ssue);
		q->n_rval = R0 + argoff++;
		p = buildtree(ASSIGN, p, q);
		ecomp(p);
	}

        /* recalculate the arg offset and create TEMP moves */
        for (i = 0; i < cnt; i++) {

                if ((argoff >= NARGREGS) && !xtemps) {
                        break;
                } else if (argoff > NARGREGS) {
                        putintemp(sp[i]);
                } else if (sp[i]->stype == STRTY || sp[i]->stype == UNIONTY) {
			cerror("unimplemented structure arguments");
                } else if (DEUNSIGN(sp[i]->stype) == LONGLONG) {
                        param_64bit(sp[i], &argoff, xtemps && !saveallargs);
                } else if (sp[i]->stype == DOUBLE || sp[i]->stype == LDOUBLE) {
			if (features(FEATURE_HARDFLOAT))
	                        param_double(sp[i], &argoff,
				    xtemps && !saveallargs);
			else
	                        param_64bit(sp[i], &argoff,
				    xtemps && !saveallargs);
                } else if (sp[i]->stype == FLOAT) {
			if (features(FEATURE_HARDFLOAT))
                        	param_float(sp[i], &argoff,
				    xtemps && !saveallargs);
			else
                        	param_32bit(sp[i], &argoff,
				    xtemps && !saveallargs);
                } else {
                        param_32bit(sp[i], &argoff, xtemps && !saveallargs);
		}
        }

        /* if saveallargs, save the rest of the args onto the stack */
        while (saveallargs && argoff < NARGREGS) {
      		NODE *p, *q;
		int off = ARGINIT/SZINT + argoff;
		q = block(REG, NIL, NIL, INT, 0, MKSUE(INT));
		regno(q) = R0 + argoff++;
		p = block(REG, NIL, NIL, INT, 0, MKSUE(INT));
		regno(p) = FPREG;
		p = block(PLUS, p, bcon(4*off), INT, 0, MKSUE(INT));
		p = block(UMUL, p, NIL, INT, 0, MKSUE(INT));
		p = buildtree(ASSIGN, p, q);
		ecomp(p);
	}

}

/*
 * End-of-Function code:
 */
void
efcode()
{
	NODE *p, *q;
	int tempnr;

	if (cftnsp->stype != STRTY+FTN && cftnsp->stype != UNIONTY+FTN)
		return;

	/*
	 * At this point, the address of the return structure on
	 * has been FORCEd to RETREG, which is R0.
	 * We want to copy the contents from there to the address
	 * we placed into the tempnode "rvnr".
	 */

	/* move the pointer out of R0 to a tempnode */
	q = block(REG, NIL, NIL, PTR+STRTY, 0, cftnsp->ssue);
	q->n_rval = R0;
	p = tempnode(0, PTR+STRTY, 0, cftnsp->ssue);
	tempnr = regno(p);
	p = buildtree(ASSIGN, p, q);
	ecomp(p);

	/* get the address from the tempnode */
	q = tempnode(tempnr, PTR+STRTY, 0, cftnsp->ssue);
	q = buildtree(UMUL, q, NIL);
	
	/* now, get the structure destination */
	p = tempnode(rvnr, PTR+STRTY, 0, cftnsp->ssue);
	p = buildtree(UMUL, p, NIL);

	/* struct assignment */
	p = buildtree(ASSIGN, p, q);
	ecomp(p);
}

/*
 * Beginning-of-code: finished generating function prologue
 *
 * by now, the automatics and register variables are allocated
 */
void
bccode()
{
	SETOFF(autooff, SZINT);
}

/*
 * End-of-job: called just before final exit.
 */
void
ejobcode(int flag )
{
#define OSB(x) __STRING(x)
#define OS OSB(TARGOS)
	printf("\t.ident \"%s (%s)\"\n", VERSSTR, OS);
}

/*
 * Beginning-of-job: called before compilation starts
 *
 * Initialise data structures specific for the local machine.
 */
void
bjobcode()
{
}

/*
 * Compute the alignment of object with type 't'.
 */
int
fldal(unsigned int t)
{
	uerror("illegal field type");
	return(ALINT);
}

/*
 * fix up type of field p
 */
void
fldty(struct symtab *p)
{
}

/*
 * Build target-dependent switch tree/table.
 *
 * Return 1 if successfull, otherwise return 0 and the
 * target-independent tree will be used.
 */
int
mygenswitch(int num, TWORD type, struct swents **p, int n)
{
	return 0;
}


/*
 * Straighten a chain of CM ops so that the CM nodes
 * only appear on the left node.
 *
 *          CM               CM
 *        CM  CM           CM  b
 *       x y  a b        CM  a
 *                      x  y
 */
static NODE *
straighten(NODE *p)
{
	NODE *r = p->n_right;

	if (p->n_op != CM || r->n_op != CM)
		return p;

	p->n_right = r->n_left;
	r->n_left = p;

	return r;
}


/* push arg onto the stack */
/* called by moveargs() */
static NODE *
pusharg(NODE *p, int *regp)
{
        NODE *q;
        int sz;

        /* convert to register size, if smaller */
        sz = tsize(p->n_type, p->n_df, p->n_sue);
        if (sz < SZINT)
                p = block(SCONV, p, NIL, INT, 0, MKSUE(INT));

        q = block(REG, NIL, NIL, INT, 0, MKSUE(INT));
        regno(q) = SP;

	if (szty(p->n_type) == 1) {
		++(*regp);
		q = block(MINUSEQ, q, bcon(4), INT, 0, MKSUE(INT));
	} else {
		(*regp) += 2;
		q = block(MINUSEQ, q, bcon(8), INT, 0, MKSUE(INT));
	}

	q = block(UMUL, q, NIL, p->n_type, p->n_df, p->n_sue);

	return buildtree(ASSIGN, q, p);
}

/* setup call stack with 32-bit argument */
/* called from moveargs() */
static NODE *
movearg_32bit(NODE *p, int *regp)
{
	int reg = *regp;
	NODE *q;

	q = block(REG, NIL, NIL, p->n_type, p->n_df, p->n_sue);
	regno(q) = reg++;
	q = buildtree(ASSIGN, q, p);

	*regp = reg;
	return q;
}

/* setup call stack with 64-bit argument */
/* called from moveargs() */
static NODE *
movearg_64bit(NODE *p, int *regp)
{
        int reg = *regp;
        NODE *q, *r;

#if ALLONGLONG == 64
        /* alignment */
        ++reg;
        reg &= ~1;
	*regp = reg;
#endif

        if (reg > R3) {
                q = pusharg(p, regp);
	} else if (reg == R3) {
		/* half in and half out of the registers */
		r = tcopy(p);
		if (features(FEATURE_BIGENDIAN)) {
			q = buildtree(RS, p, bcon(32));
			q = block(SCONV, q, NIL, INT, 0, MKSUE(INT));
		} else {
			q = block(SCONV, p, NIL, INT, 0, MKSUE(INT));
		}
		q = movearg_32bit(q, regp);
		if (features(FEATURE_BIGENDIAN)) {
			r = block(SCONV, r, NIL, INT, 0, MKSUE(INT));
		} else {
			r = buildtree(RS, r, bcon(32));
			r = block(SCONV, r, NIL, INT, 0, MKSUE(INT));
		}
		r = pusharg(r, regp);
		q = straighten(block(CM, q, r, p->n_type, p->n_df, p->n_sue));
        } else {
                q = block(REG, NIL, NIL, p->n_type, p->n_df, p->n_sue);
                regno(q) = R0R1 + (reg - R0);
                q = buildtree(ASSIGN, q, p);
                *regp = reg + 2;
        }

        return q;
}

/* setup call stack with float/double argument */
/* called from moveargs() */
static NODE *
movearg_float(NODE *p, int *regp)
{
	NODE *r, *l;
	int tmpnr;

        /*
         * Floats are passed in the general registers for
	 * compatibily with libraries compiled to handle soft-float.
         */

        l = tempnode(0, p->n_type, p->n_df, p->n_sue);
	tmpnr = regno(l);
        l = buildtree(ASSIGN, l, p);
        ecomp(l);

	if (p->n_type == FLOAT) {
	        r = tempnode(tmpnr, INT, 0, MKSUE(INT));
		r = movearg_32bit(r, regp);
	} else {
	        r = tempnode(tmpnr, ULONGLONG, 0, MKSUE(ULONGLONG));
		r = movearg_64bit(r, regp);
	}

	return r;
}

static NODE *
moveargs(NODE *p, int *regp)
{
        NODE *r, **rp;
        int reg;

        if (p->n_op == CM) {
                p->n_left = moveargs(p->n_left, regp);
                r = p->n_right;
                rp = &p->n_right;
        } else {
                r = p;
                rp = &p;
        }

        reg = *regp;

        if (reg > R3) {
                *rp = pusharg(r, regp);
        } else if (DEUNSIGN(r->n_type) == LONGLONG) {
                *rp = movearg_64bit(r, regp);
	} else if (r->n_type == DOUBLE || r->n_type == LDOUBLE) {
		*rp = movearg_float(r, regp);
	} else if (r->n_type == FLOAT) {
		*rp = movearg_float(r, regp);
        } else {
                *rp = movearg_32bit(r, regp);
        }

	if ((*rp)->n_op == CM && r != p)
		p = straighten(p);

        return p;
}

/*
 * Called with a function call with arguments as argument.
 * This is done early in buildtree() and only done once.
 */
NODE *
funcode(NODE *p)
{
	int reg = R0;
	int ty;

	ty = DECREF(p->n_left->n_type);
	if (ty == STRTY+FTN || ty == UNIONTY+FTN)
		reg = R1;

	p->n_right = moveargs(p->n_right, &reg);

	return p;
}
@


1.3
log
@Sync with master repo. Reminded by otto@@
@
text
@d1 1
a1 1
/*      $OpenBSD$    */
@


1.2
log
@Sync with main repo.
@
text
@d1 1
a1 1
/*      $OpenBSD: code.c,v 1.1 2007/11/25 18:45:06 otto Exp $    */
d39 1
d41 2
a42 1
 * Modify the alignment in the data section to become a multiple of n.
d45 1
a45 1
defalign(int n)
d47 7
a53 2
	n /= SZCHAR;
	if (n == 1)
d55 26
a80 1
	printf("\t.align %d\n", n);
d83 2
a84 2
/*
 * Define the current location as an internal label.
d86 143
a228 2
void
deflab(int label)
d230 26
a255 1
        printf(LABFMT ":\n", label);
d258 2
d261 4
a264 1
 * Define the current location in the data section to be the name p->sname
d267 1
a267 1
defnam(struct symtab *p)
d269 71
a339 1
	char *c = p->sname;
a340 6
#ifdef GCC_COMPAT
	c = gcc_findname(p);
#endif
	if (p->sclass == EXTDEF)
		printf("\t.global %s\n", exname(c));
	printf("%s:\n", exname(c));
a342 2
int rvnr;

d366 1
a366 1
	tempnr = p->n_lval;
a383 55
 * Beginning-of-function code:
 *
 * 'a' is an array of indices in symtab for the arguments
 * 'n' is the number of arguments
 */
void
bfcode(struct symtab **sp, int cnt)
{
        NODE *p, *q;
        int i, n, start = 0;

	/* if returning a structure, more the hidden argument into a TEMP */
        if (cftnsp->stype == STRTY+FTN || cftnsp->stype == UNIONTY+FTN) {
		p = tempnode(0, PTR+STRTY, 0, cftnsp->ssue);
		rvnr = p->n_lval;
		q = block(REG, NIL, NIL, PTR+STRTY, 0, cftnsp->ssue);
		q->n_rval = R0 + start++;
		p = buildtree(ASSIGN, p, q);
		ecomp(p);
	}

        /* recalculate the arg offset and create TEMP moves */
        for (n = start, i = 0; i < cnt; i++) {
		int sz = szty(sp[i]->stype);
                if (n + sz <= 4) {
			/* put stack args in temps */
			p = tempnode(0, sp[i]->stype, sp[i]->sdf, sp[i]->ssue);
			spname = sp[i];
			q = block(REG, NIL, NIL,
			    sp[i]->stype, sp[i]->sdf, sp[i]->ssue);
			q->n_rval = (sz == 2 ? R0R1 + n : R0+n);
			p = buildtree(ASSIGN, p, q);
			sp[i]->soffset = p->n_left->n_lval;
			sp[i]->sflags |= STNODE;
                       	ecomp(p);
                } else {
                        sp[i]->soffset -= SZINT * 4;
                        if (xtemps) {
                                /* put stack args in temps if optimizing */
                                spname = sp[i];
                                p = tempnode(0, sp[i]->stype,
                                    sp[i]->sdf, sp[i]->ssue);
                                p = buildtree(ASSIGN, p, buildtree(NAME, 0, 0));
                                sp[i]->soffset = p->n_left->n_lval;
                                sp[i]->sflags |= STNODE;
                                ecomp(p);
                        }
		
                }
                n += szty(sp[i]->stype);
        }
}


/*
d402 1
a402 1
	printf("\t.ident \"%s (%s)\"\n", PACKAGE_STRING, OS);
a415 33
 * Output ascii string: print character 't' at position 'i' until 't' == -1.
 */
void
bycode(int t, int i)
{
	static int lastoctal = 0;

	/* put byte i+1 in a string */

	if (t < 0) {
		if (i != 0)
			puts("\"");
	} else {
		if (i == 0)
			printf("\t.ascii \"");
		if (t == '\\' || t == '"') {
			lastoctal = 0;
			putchar('\\');
			putchar(t);
		} else if (t < 040 || t >= 0177) {
			lastoctal++;
			printf("\\%o",t);
		} else if (lastoctal && '0' <= t && t <= '9') {
			lastoctal = 0;
			printf("\"\n\t.ascii \"%c", t);
		} else {	
			lastoctal = 0;
			putchar(t);
		}
	}
}

/*
a444 2
static int regoff[7];
static TWORD ftype;
d447 7
a453 1
 * calculate stack size and offsets
d455 2
a456 2
static int
offcalc(struct interpass_prolog *ipp)
d458 10
a467 1
	int i, j, addto;
a468 4
#ifdef PCC_DEBUG
	if (x2debug)
		printf("offcalc: p2maxautooff=%d\n", p2maxautooff);
#endif
d470 7
a476 1
	addto = p2maxautooff;
d478 4
a481 7
	// space is always allocated on the stack to save the permanents
	for (i = ipp->ipp_regs, j = 0; i ; i >>= 1, j++) {
		if (i & 1) {
			addto += SZINT/SZCHAR;
			regoff[j] = addto;
		}
	}
d483 2
a484 4
#if 0
	addto += 7;
	addto &= ~7;
#endif
d486 7
a492 4
#ifdef PCC_DEBUG
	if (x2debug)
		printf("offcalc: addto=%d\n", addto);
#endif
d494 1
a494 1
	addto -= AUTOINIT / SZCHAR;
d496 1
a496 1
	return addto;
d499 4
a502 2
void
prologue(struct interpass_prolog *ipp)
d504 2
a505 2
	int i, j;
	int addto;
d507 3
a509 13
#ifdef PCC_DEBUG
	if (x2debug)
		printf("prologue: type=%d, lineno=%d, name=%s, vis=%d, ipptype=%d, regs=0x%x, autos=%d, tmpnum=%d, lblnum=%d\n",
			ipp->ipp_ip.type,
			ipp->ipp_ip.lineno,
			ipp->ipp_name,
			ipp->ipp_vis,
			ipp->ipp_type,
			ipp->ipp_regs,
			ipp->ipp_autos,
			ipp->ip_tmpnum,
			ipp->ip_lblnum);
#endif
d511 3
a513 1
	ftype = ipp->ipp_type;
d515 7
a521 5
	printf("\t.align 2\n");
	if (ipp->ipp_vis)
		printf("\t.global %s\n", exname(ipp->ipp_name));
	printf("\t.type %s,%%function\n", exname(ipp->ipp_name));
	printf("%s:\n", exname(ipp->ipp_name));
d523 6
a528 5
	/*
	 * We here know what register to save and how much to 
	 * add to the stack.
	 */
	addto = offcalc(ipp);
d530 10
a539 11
	printf("\tmov %s,%s\n", rnames[IP], rnames[SP]);
	printf("\tstmfd %s!,{%s,%s,%s,%s}\n", rnames[SP], rnames[FP],
	    rnames[IP], rnames[LR], rnames[PC]);
	printf("\tsub %s,%s,#4\n", rnames[FP], rnames[IP]);
	if (addto)
		printf("\tsub %s,%s,#%d\n", rnames[SP], rnames[SP], addto);

	for (i = ipp->ipp_regs, j = 0; i; i >>= 1, j++) {
		if (i & 1) {
			printf("\tstr %s,[%s,#-%d]\n",
			    rnames[j], rnames[FP], regoff[j]);
d541 15
a555 1
	}
d557 1
d560 24
a583 14
void
eoftn(struct interpass_prolog *ipp)
{
	int i, j;

	if (ipp->ipp_ip.ip_lbl == 0)
		return; /* no code needs to be generated */

	/* return from function code */
	for (i = ipp->ipp_regs, j = 0; i ; i >>= 1, j++) {
		if (i & 1)
			printf("\tldr %s,[%s,#-%d]\n",
			    rnames[j], rnames[FP], regoff[j]);
			
d586 1
a586 9
	/* struct return needs special treatment */
	if (ftype == STRTY || ftype == UNIONTY) {
		assert(0);
	} else {
		printf("\tldmea %s,{%s,%s,%s}\n", rnames[FP], rnames[FP],
		    rnames[SP], rnames[PC]);
	}
	printf("\t.size %s,.-%s\n", exname(ipp->ipp_name),
	    exname(ipp->ipp_name));
d589 5
a593 6
char *rnames[] = {
	"r0", "r1", "r2", "r3","r4","r5", "r6", "r7", "r8",
	"r9", "r10", "fp", "ip", "sp", "lr", "pc",
	"r0r1", "r1r2", "r2r3", "r3r4", "r4r5", "r5r6",
	"r6r7", "r7r8", "r8r9", "r9r10",
};
d595 7
a601 12
static void
moveargs(NODE **n, int *regp)
{
        NODE *r = *n;
        NODE *t;
	int sz;
	int regnum;

        if (r->n_op == CM) {
                moveargs(&r->n_left, regp);
                n = &r->n_right;
                r = r->n_right;
d604 1
a604 2
 	regnum = *regp;
	sz = szty(r->n_type);
d606 8
a613 17
        if (regnum + sz <= R4) {
                t = block(REG, NIL, NIL, r->n_type, r->n_df, r->n_sue);
		switch (r->n_type) {
		case DOUBLE:
		case LDOUBLE:
#if defined(ARM_HAS_FPA) || defined(ARM_HAS_VFP)
	                t->n_rval = regnum + F0;
			break;
#endif
		case LONGLONG:
		case ULONGLONG:
	                t->n_rval = regnum + R0R1;
			break;
		default:
			t->n_rval = regnum;
		}
		t = buildtree(ASSIGN, t, r);
d615 1
a615 1
                t = block(FUNARG, r, NIL, r->n_type, r->n_df, r->n_sue);
d618 4
a621 2
        *n = t;
	*regp += sz;
d631 1
a631 1
	int regnum = R0;
d636 3
a638 1
		regnum = R1;
a639 1
	moveargs(&p->n_right, &regnum);
@


1.1
log
@arm backend from Gregory McGarry, untested
@
text
@d1 1
a1 1
/*      $OpenBSD: code.c,v 1.4 2007/11/22 18:36:44 gmcgarry Exp $    */
d135 1
a135 1
		q->n_rval = start++;
@

