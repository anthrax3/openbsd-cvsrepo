head	1.3;
access;
symbols
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.04.12.11.51.12;	author pirofti;	state dead;
branches;
next	1.2;

1.2
date	2008.04.11.20.45.52;	author stefan;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.25.18.45.06;	author otto;	state Exp;
branches;
next	;


desc
@@


1.3
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*	$OpenBSD: table.c,v 1.2 2008/04/11 20:45:52 stefan Exp $	*/
/*-
 * Copyright (c) 2007 Gregory McGarry <g.mcgarry@@ieee.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * A template has five logical sections:
 *
 *	1) subtree (operator); goal to achieve (cookie)
 *	2) left node descendent of operator (node class; type)
 *	3) right node descendent of operator (node class; type)
 *	4) resource requirements (number of scratch registers);
 *	   subtree rewriting rule
 *	5) emitted instructions
 */

#include "pass2.h"

#define TUWORD	TUNSIGNED|TULONG
#define TSWORD	TINT|TLONG
#define TWORD	TUWORD|TSWORD

struct optab table[] = {
/* First entry must be an empty entry */
{ -1, FOREFF, SANY, TANY, SANY, TANY, 0, 0, "", },

/* PCONVs are not necessary */
{ PCONV,	INAREG,
	SAREG,	TWORD|TPOINT,
	SAREG,	TWORD|TPOINT,
		0,	RLEFT,
		COM "pointer conversion\n", },


/*
 * Conversions of integral types
 *
 * For each deunsigned type, they look something like this:
 *
 * signed -> bigger signed	- nothing to do
 * signed -> bigger unsigned	- clear the top bits (of source type)
 *
 * signed -> smaller signed	- sign-extend the bits (to dest type)
 * signed -> smaller unsigned	- clear the top bits (of dest type)
 * unsigned -> smaller signed	- sign-extend top bits (to dest type)
 * unsigned -> smaller unsigned	- clear the top bits (of dest type)
 *
 * unsigned -> bigger		- nothing to do
 */

{ SCONV,	INAREG,
	SAREG,	TCHAR,
	SAREG,	TSWORD|TSHORT,
		0,	RLEFT,
		COM "convert char to short/int\n", },

{ SCONV,	INAREG,
	SAREG,	TCHAR,
	SAREG,	TUWORD|TUSHORT|TUCHAR,
		NAREG|NASL,	RESC1,
		"	and A1,AL,#255" COM "convert char to uchar/ushort/uint\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SAREG,	TUCHAR,
	SAREG,	TCHAR,
		NAREG|NASL,	RESC1,
		"	sxtb A1,AL" COM "convert uchar to char\n", },

{ SCONV,	INAREG,
	SAREG,	TUCHAR,
	SAREG,	TCHAR,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl #24" COM "convert uchar to char\n"
		"	mov A1,A1,asr #24\n", },

{ SCONV,	INAREG,
	SAREG,	TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT,
		0,	RLEFT,
		COM "convert uchar to (u)short/(u)int\n", },

{ SCONV,	INAREG,
	SAREG,	TSHORT,
	SAREG,	TSWORD,
		0,	RLEFT,
		COM "convert short to int\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SAREG,	TSHORT,
	SAREG,	TUWORD,
		NAREG|NASL,	RESC1,
		"	uxth A1,AL" COM "convert short to uint\n", },

{ SCONV,	INAREG,
	SAREG,	TSHORT,
	SAREG,	TUWORD,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl #16" COM "convert short to uint\n"
		"	mov A1,AL,lsr #16\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SAREG,	TUSHORT,
	SAREG,	TSHORT,
		NAREG|NASL,	RESC1,
		"	sxth A1,AL" COM "convert ushort to short\n", },

{ SCONV,	INAREG,
	SAREG,	TUSHORT,
	SAREG,	TSHORT,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl #16" COM "convert ushort to short\n"
		"	mov A1,A1,asr #16\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SAREG,	TSHORT|TUSHORT,
	SAREG,	TCHAR,
		NAREG|NASL,	RESC1,
		"	sxtb A1,AL" COM "convert (u)short to char\n", },

{ SCONV,	INAREG,
	SAREG,	TSHORT|TUSHORT,
	SAREG,	TCHAR,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl #24" COM "convert (u)short to char\n"
		"	mov A1,A1,asr #24\n", },

{ SCONV,	INAREG,
	SAREG,	TSHORT|TUSHORT,
	SAREG,	TCHAR,
		NAREG|NASL,	RESC1,
		"	sxtb A1,AL" COM "convert (u)short to char\n", },

{ SCONV,	INAREG,
	SAREG,	TSHORT|TUSHORT,
	SAREG,	TUCHAR,
		NAREG|NASL,	RESC1,
		"	and A1,AL,#255" COM "convert (u)short to uchar\n", },

{ SCONV,	INAREG,
	SAREG,	TUSHORT,
	SAREG,	TWORD,
		0,	RLEFT,
		COM "convert ushort to (u)int\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SAREG,	TWORD,
	SAREG,	TCHAR,
		NAREG|NASL,	RESC1,
		"	sxtb A1,AL" COM "convert (u)int to char\n", },

{ SCONV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TCHAR,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl #24" COM "convert (u)int to char\n"
		"	mov A1,A1,asr #24\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SAREG,	TWORD,
	SAREG,	TSHORT,
		NAREG|NASL,	RESC1,
		"	sxth A1,AL" COM "convert (u)int to short\n", },

{ SCONV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TSHORT,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl #16" COM "convert (u)int to short\n"
		"	mov A1,A1,asr #16\n", },

{ SCONV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TUCHAR,
		NAREG|NASL,	RESC1,
		"	and A1,AL,#255" COM "convert uchar to char\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SAREG,	TWORD,
	SAREG,	TUSHORT,
		NAREG|NASL,	RESC1,
		"	uxth A1,AL" COM "convert int to ushort\n", },

{ SCONV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TUSHORT,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl #16" COM "convert int to ushort\n"
		"	mov A1,AL,lsr #16\n", },

{ SCONV,	INAREG,
	SAREG,	TPOINT|TWORD,
	SAREG,	TWORD|TPOINT,
		0,	RLEFT,
		COM "convert between pointers and words\n", },

{ SCONV,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		0,	RLEFT,
		COM "convert (u)longlong to (u)longlong\n", },

/* convert (u)char/(u)short/(u)int to longlong */
{ SCONV,	INBREG,
	SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,		RESC1,
		"	mov A1,AL" COM "convert (u)char/(u)short/(u)int to (u)longlong\n"
		"	mov U1,AL,asr #31\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TCHAR,
		NAREG,		RESC1,
		"	sxtb A1,AL" COM "convert (u)longlong to char\n", },

{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TCHAR,
		NAREG,		RESC1,
		"	mov A1,AL,asl #24" COM "convert (u)longlong to char\n"
		"	mov A1,A1,asr #24\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TSHORT,
		NAREG,		RESC1,
		"	sxth A1,AL" COM "convert (u)longlong to short\n", },

{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TSHORT,
		NAREG,		RESC1,
		"	mov A1,AL,asl #16" COM "convert (u)longlong to short\n"
		"	mov A1,A1,asr #16\n", },

{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TWORD,
		NAREG,		RESC1,
		"	mov A1,AL" COM "convert (u)longlong to (u)int\n", },

{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TUCHAR,
		NAREG,		RESC1,
		"	and A1,AL,#255" COM "convert (u)longlong to uchar\n", },

{ SCONV,	INAREG | FEATURE_EXTEND,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TUSHORT,
		NAREG,		RESC1,
		"	uxth A1,AL" COM "convert (u)longlong to ushort\n", },

{ SCONV,	INAREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TUSHORT,
		NAREG,		RESC1,
		"	mov A1,AL,asl #16" COM "convert (u)longlong to ushort\n"
		"	mov A1,A1,lsr #16\n", },

/* conversions on load from memory */

/* char */
{ SCONV,	INAREG,
	SOREG,	TCHAR,
	SAREG,	TWORD,
		NASL|NAREG,	RESC1,
		"	ldrsb A1,AL" COM "convert char to int/long\n", },

/* uchar */
{ SCONV,	INAREG,
	SOREG,	TUCHAR,
	SAREG,	TWORD,
		NASL|NAREG,	RESC1,
		"	ldrb A1,AL" COM "convert uchar to int/long\n", },
 
/* short */
{ SCONV,	INAREG | FEATURE_HALFWORDS,
	SOREG,	TSHORT,
	SAREG,	TWORD,
		NASL|NAREG,	RESC1,
		"	ldrsh A1,AL" COM "convert short to int/long\n", },

/* ushort */
{ SCONV,	INAREG | FEATURE_HALFWORDS,
	SOREG,	TSHORT,
	SAREG,	TWORD,
		NASL|NAREG,	RESC1,
		"	ldrh A1,AL" COM "convert ushort to int/long\n", },

/* short */
{ SCONV,	INAREG,
	SOREG,	TSHORT|TUSHORT,
	SAREG,	TWORD,
		2*NAREG|NASL,	RESC1,
		"ZH", },

{ SCONV,	INAREG | FEATURE_FPA,
	SCREG,	TFLOAT,
	SAREG,	TWORD,
		NAREG,		RESC1,
		"	fix AL,AR" COM "convert float to int\n", },

{ SCONV,	INAREG | FEATURE_VFP,
	SCREG,	TFLOAT,
	SAREG,	TSWORD,
		NAREG,		RESC1,
		"	ftosis AL,AR" COM "convert float to int\n", },

{ SCONV,	INAREG | FEATURE_VFP,
	SCREG,	TFLOAT,
	SAREG,	TSWORD,
		NAREG,		RESC1,
		"	ftouis AL,AR" COM "convert float to int\n", },

{ SCONV,	INAREG,
	SAREG,	TFLOAT,
	SAREG,	TWORD,
		NSPECIAL|NAREG,		RESC1,
		"ZF", },

{ SCONV,	INBREG | FEATURE_FPA,
	SCREG,	TFLOAT,
	SBREG,	TULONGLONG|TLONGLONG,
		NBREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INBREG | FEATURE_VFP,
	SCREG,	TFLOAT,
	SBREG,	TULONGLONG|TLONGLONG,
		NBREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INBREG,
	SAREG,	TFLOAT,
	SBREG,	TULONGLONG|TLONGLONG,
		NSPECIAL|NBREG,		RESC1,
		"ZF", },

{ SCONV,	INAREG | FEATURE_FPA,
	SCREG,	TDOUBLE|TLDOUBLE,
	SAREG,	TWORD,
		NAREG,		RESC1,
		"	fix AL,AR" COM "convert double/ldouble to int\n", },

{ SCONV,	INAREG | FEATURE_VFP,
	SCREG,	TDOUBLE|TLDOUBLE,
	SAREG,	TSWORD,
		NAREG,		RESC1,
		"	ftosid AL,AR" COM "convert double/ldouble to int\n", },

{ SCONV,	INAREG | FEATURE_VFP,
	SCREG,	TDOUBLE|TLDOUBLE,
	SAREG,	TUWORD,
		NAREG,		RESC1,
		"	ftouid AL,AR" COM "convert double/ldouble to int\n", },

{ SCONV,	INAREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SAREG,	TWORD,
		NSPECIAL|NAREG,		RESC1,
		"ZF", },

{ SCONV,	INBREG | FEATURE_FPA,
	SCREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INBREG | FEATURE_VFP,
	SCREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TULONGLONG|TLONGLONG,
		NBREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INBREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TULONGLONG|TLONGLONG,
		NSPECIAL|NBREG,		RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_FPA,
	SAREG,	TWORD,
	SCREG,	TFLOAT,
		NCREG,		RESC1,
		"	flts AL,AR" COM "convert int to float\n" },

{ SCONV,	INCREG | FEATURE_VFP,
	SAREG,	TSWORD,
	SCREG,	TFLOAT,
		NCREG,		RESC1,
		"	fsitos AL,AR" COM "convert int to float\n" },

{ SCONV,	INCREG | FEATURE_VFP,
	SAREG,	TUWORD,
	SCREG,	TFLOAT,
		NCREG,		RESC1,
		"	fuitos AL,AR" COM "convert int to float\n" },

{ SCONV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,		RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_FPA,
	SBREG,	TULONGLONG|TLONGLONG,
	SCREG,	TFLOAT,
		NCREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INCREG | FEATURE_VFP,
	SBREG,	TULONGLONG|TLONGLONG,
	SCREG,	TFLOAT,
		NCREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INAREG,
	SBREG,	TULONGLONG|TLONGLONG,
	SAREG,	TFLOAT,
		NAREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INCREG | FEATURE_FPA,
	SAREG,	TWORD,
	SCREG,	TDOUBLE,
		NCREG,		RESC1,
		"	fltd AL,AR" COM "convert int to double\n" },

{ SCONV,	INCREG | FEATURE_VFP,
	SAREG,	TSWORD,
	SCREG,	TDOUBLE,
		NCREG,		RESC1,
		"	fsitod AL,AR" COM "convert int to double\n" },

{ SCONV,	INCREG | FEATURE_VFP,
	SAREG,	TUWORD,
	SCREG,	TDOUBLE,
		NCREG,		RESC1,
		"	fuitod AL,AR" COM "convert int to double\n" },

{ SCONV,	INBREG,
	SAREG,	TWORD,
	SBREG,	TDOUBLE,
		NSPECIAL|NBREG,		RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_FPA,
	SBREG,	TLONGLONG|TULONGLONG,
	SCREG,	TDOUBLE,
		NCREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INCREG | FEATURE_VFP,
	SBREG,	TLONGLONG|TULONGLONG,
	SCREG,	TDOUBLE,
		NCREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TDOUBLE,
		NSPECIAL|NBREG,		RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_FPA,
	SAREG,	TWORD,
	SCREG,	TLDOUBLE,
		NCREG,		RESC1,
		"	flte AL,AR" COM "convert int to ldouble\n" },

{ SCONV,	INCREG | FEATURE_VFP,
	SAREG,	TSWORD,
	SCREG,	TLDOUBLE,
		NCREG,		RESC1,
		"	fsitod AL,AR" COM "convert int to ldouble\n" },

{ SCONV,	INCREG | FEATURE_VFP,
	SAREG,	TUWORD,
	SCREG,	TLDOUBLE,
		NCREG,		RESC1,
		"	fuitod AL,AR" COM "convert uint to ldouble\n" },

{ SCONV,	INBREG,
	SAREG,	TWORD,
	SBREG,	TLDOUBLE,
		NSPECIAL|NBREG,		RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_FPA,
	SBREG,	TLONGLONG|TULONGLONG,
	SCREG,	TLDOUBLE,
		NCREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INCREG | FEATURE_VFP,
	SBREG,	TLONGLONG|TULONGLONG,
	SCREG,	TLDOUBLE,
		NCREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLDOUBLE,
		NSPECIAL|NBREG,		RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_FPA,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TFLOAT,
		NCREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INCREG | FEATURE_VFP,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TFLOAT,
		NCREG,		RESC1,
		"	fcvtds AL,AR" COM "convert float to double\n" },

{ SCONV,	INAREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,		RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_FPA,
	SCREG,	TFLOAT,
	SCREG,	TDOUBLE|TLDOUBLE,
		NCREG,		RESC1,
		COM "unimplemented\n", },

{ SCONV,	INCREG | FEATURE_VFP,
	SCREG,	TFLOAT,
	SCREG,	TDOUBLE|TLDOUBLE,
		NCREG,		RESC1,
		"	fcvtsd AL,AR" COM "convert float to double\n" },

{ SCONV,	INBREG,
	SAREG,	TFLOAT,
	SBREG,	TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG,		RESC1,
		"ZF", },

{ SCONV,	INCREG | FEATURE_FPA,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TDOUBLE|TLDOUBLE,
		0,		RLEFT,
		COM "convert (l)double to (l)double", },

{ SCONV,	INCREG | FEATURE_VFP,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TDOUBLE|TLDOUBLE,
		0,		RLEFT,
		COM "convert (l)double to (l)double", },

{ SCONV,	INBREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TDOUBLE|TLDOUBLE,
		0,		RLEFT,
		COM "convert (l)double to (l)double", },

/*
 * Subroutine calls.
 */

{ CALL,		FOREFF,
	SCON|SNAME,	TANY,
	SANY,		TANY,
		0,	0,
		"	bl CL" COM "call (args, no result) to scon/sname (CL)\n"
		"ZC", },

{ UCALL,	FOREFF,
	SCON|SNAME,	TANY,
	SANY,		TANY,
		0,	0,
		"	bl CL" COM "call (no args, no result) to scon/sname (CL)\n", },

{ CALL,		INAREG,
	SCON|SNAME,	TANY,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result in r0) to scon/sname (CL)\n"
		"ZC", },

{ CALL,		INBREG,
	SCON|SNAME,	TANY,
	SBREG,		TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result in r0:r1) to scon/sname (CL)\n"
		"ZC", },

{ CALL,		INCREG | FEATURE_FPA,
	SCON|SNAME,	TANY,
	SCREG,		TFLOAT,
		NCREG|NCSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result r0) to scon/sname (CL)\n"
		"ZC", },

{ CALL,		INCREG | FEATURE_FPA,
	SCON|SNAME,	TANY,
	SCREG,		TDOUBLE|TLDOUBLE,
		NCREG|NCSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result in r0:r1) to scon/sname (CL)\n"
		"ZC", },

{ CALL,		INAREG,
	SCON|SNAME,	TANY,
	SAREG,		TFLOAT,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result r0) to scon/sname (CL)\n"
		"ZC", },

{ CALL,		INBREG,
	SCON|SNAME,	TANY,
	SBREG,		TDOUBLE|TLDOUBLE,
		NBREG|NBSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (args, result in r0:r1) to scon/sname (CL)\n"
		"ZC", },

{ UCALL,	INAREG,
	SCON|SNAME,	TANY,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result in r0) to scon/sname (CL)\n", },

{ UCALL,	INBREG,
	SCON|SNAME,	TANY,
	SBREG,		TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result in r0:r1) to scon/sname (CL)\n", },

{ UCALL,	INCREG | FEATURE_FPA,
	SCON|SNAME,	TANY,
	SCREG,		TFLOAT,
		NCREG|NCSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result in r0) to scon/sname (CL)\n", },

{ UCALL,	INCREG | FEATURE_FPA,
	SCON|SNAME,	TANY,
	SCREG,		TDOUBLE|TLDOUBLE,
		NCREG|NCSL,	RESC1,	/* should be 0 */
		"	bl CL" COM "call (no args, result in r0:r1) to scon/sname (CL)\n", },

{ CALL,		FOREFF,
	SAREG,	TANY,
	SANY,		TANY,
		0,	0,
		"	mov lr,pc\n"
		"	mov pc,AL\n"
		"ZC", },

{ UCALL,	FOREFF,
	SAREG,	TANY,
	SANY,		TANY,
		0,	0,
		"	mov lr,pc\n"
		"	mov pc,AL\n", },

{ CALL,		INAREG,
	SAREG,	TANY,
	SANY,		TANY,
		INAREG,	RESC1,
		"	mov lr,pc\n"
		"	mov pc,AL\n"
		"ZC", },

{ UCALL,	INAREG,
	SAREG,	TANY,
	SANY,		TANY,
		INAREG,	RESC1,
		"	mov lr,pc\n"
		"	mov pc,AL\n", },

/* struct return */
{ USTCALL,	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	0,
		"	bl CL\n", },

{ USTCALL,	INAREG,
	SCON,	TANY,
	SANY,	TANY,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL\n", },

{ USTCALL,	INAREG,
	SNAME|SAREG,	TANY,
	SANY,		TANY,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	mov lr,pc\n"
		"	mov pc,AL\n", },

{ STCALL,	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	0,
		"	bl CL\n"
		"ZC", },

{ STCALL,	INAREG,
	SCON,	TANY,
	SANY,	TANY,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	bl CL\n"
		"ZC", },

{ STCALL,	INAREG,
	SNAME|SAREG,	TANY,
	SANY,	TANY,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	mov lr,pc\n"
		"	mov pc,AL\n"
		"ZC", },

/*
 * The next rules handle all binop-style operators.
 */

{ PLUS,		INAREG,
	SAREG,	TWORD|TPOINT,
	SCCON,	TANY,
		NAREG,	RESC1,
		"	add A1,AL,AR" COM "addition of constant\n", },

{ PLUS,		INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SSCON,	TANY,
		NBREG|NBSL,	RESC1,
		"	adds A1,AL,AR" COM "64-bit addition of constant\n"
		"	adc U1,UL,UR\n", },

{ PLUS,		INAREG,
	SAREG,	TWORD|TPOINT,
	SAREG,	TWORD|TPOINT,
		NAREG|NASL,	RESC1,
		"	add A1,AL,AR" COM "addition\n", },

{ PLUS,		INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	adds A1,AL,AR" COM "64-bit addition\n"
		"	adc U1,UL,UR\n", },

{ PLUS,		INCREG | FEATURE_FPA,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NCREG,	RESC1,
		"	adfs A1,AL,AR" COM "float add\n", },

{ PLUS,		INCREG | FEATURE_VFP,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NCREG,	RESC1,
		"	fadds A1,AL,AR" COM "float add\n", },

{ PLUS,		INAREG,
	SAREG,	TFLOAT,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ PLUS,		INCREG | FEATURE_FPA,
	SCREG,	TDOUBLE,
	SCREG,	TDOUBLE,
		NCREG,	RESC1,
		"	adfd A1,AL,AR" COM "double add\n", },

{ PLUS,		INCREG | FEATURE_VFP,
	SCREG,	TDOUBLE,
	SCREG,	TDOUBLE,
		NCREG,	RESC1,
		"	faddd A1,AL,AR" COM "double add\n", },

{ PLUS,		INBREG,
	SBREG,	TDOUBLE,
	SBREG,	TDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ PLUS,		INCREG | FEATURE_FPA,
	SCREG,	TLDOUBLE,
	SCREG,	TLDOUBLE,
		NCREG,	RESC1,
		"	adfe A1,AL,AR" COM "ldouble add\n", },

{ PLUS,		INCREG | FEATURE_VFP,
	SCREG,	TLDOUBLE,
	SCREG,	TLDOUBLE,
		NCREG,	RESC1,
		"	faddd A1,AL,AR" COM "ldouble add\n", },

{ PLUS,		INBREG,
	SBREG,	TLDOUBLE,
	SBREG,	TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ MINUS,	INAREG,
	SAREG,	TWORD|TPOINT,
	SCCON,	TANY,
		NAREG|NASL,	RESC1,
		"	sub A1,AL,AR" COM "subtraction of constant\n", },

{ MINUS,	INAREG,
	SAREG,	TWORD|TPOINT,
	SAREG,	TWORD|TPOINT,
		NAREG|NASL,	RESC1,
		"	sub A1,AL,AR" COM "subtraction\n", },

{ MINUS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SCCON,	TANY,
		NBREG|NBSL,	RESC1,
		"	subs A1,AL,AR" COM "64-bit subtraction of constant\n"
		"	rsc  U1,UL,AR\n", },

{ MINUS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	subs A1,AL,AR" COM "64-bit subtraction\n"
		"	sbc  U1,UL,AR\n", },

{ MINUS,	INCREG | FEATURE_FPA,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NCREG,	RESC1,
		"	sufs A1,AL,AR" COM "float subtraction\n", },

{ MINUS,	INCREG | FEATURE_VFP,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NCREG,	RESC1,
		"	fsubs A1,AL,AR" COM "float subtraction\n", },

{ MINUS,	INAREG,
	SAREG,	TFLOAT,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ MINUS,	INCREG | FEATURE_FPA,
	SCREG,	TDOUBLE,
	SCREG,	TDOUBLE,
		NCREG,	RESC1,
		"	sufd A1,AL,AR" COM "double subtraction\n", },

{ MINUS,	INCREG | FEATURE_VFP,
	SCREG,	TDOUBLE,
	SCREG,	TDOUBLE,
		NCREG,	RESC1,
		"	fsubd A1,AL,AR" COM "double subtraction\n", },

{ MINUS,	INBREG,
	SBREG,	TDOUBLE,
	SBREG,	TDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ MINUS,	INCREG | FEATURE_FPA,
	SCREG,	TLDOUBLE,
	SCREG,	TLDOUBLE,
		NCREG,	RESC1,
		"	sufe A1,AL,AR" COM "ldouble subtraction\n", },

{ MINUS,	INCREG | FEATURE_VFP,
	SCREG,	TLDOUBLE,
	SCREG,	TLDOUBLE,
		NCREG,	RESC1,
		"	fsubd A1,AL,AR" COM "double subtraction\n", },

{ MINUS,	INBREG,
	SBREG,	TLDOUBLE,
	SBREG,	TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

/*
 * The next rules handle all shift operators.
 */

{ LS,	INAREG,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TANY,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl AR" COM "left shift\n", },

{ LS,	INAREG,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SCCON,	TANY,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asl AR" COM "left shift by constant\n", },

{ LS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SCON,	TANY,
		NBREG,	RESC1,
		"ZO" },

{ LS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TANY,
		NSPECIAL|NBREG,	RESC1,
		"ZE" },

{ RS,	INAREG,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SAREG,	TANY,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asr AR" COM "right shift\n", },

{ RS,	INAREG,
	SAREG,	TUWORD|TUSHORT|TUCHAR,
	SAREG,	TANY,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,lsr AR" COM "right shift\n", },

{ RS,	INAREG,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SCCON,	TANY,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,asr AR" COM "right shift by constant\n", },

{ RS,	INAREG,
	SAREG,	TUWORD|TUSHORT|TUCHAR,
	SCCON,	TANY,
		NAREG|NASL,	RESC1,
		"	mov A1,AL,lsr AR" COM "right shift by constant\n", },

{ RS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SCON,	TANY,
		NBREG,	RESC1,
		"ZO" },

{ RS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SAREG,	TANY,
		NSPECIAL|NBREG,	RESC1,
		"ZE" },


/*
 * The next rules takes care of assignments. "=".
 */

{ ASSIGN,	FOREFF|INAREG,
	SOREG|SNAME,	TWORD|TPOINT,
	SAREG,		TWORD|TPOINT,
		0,	RDEST,
		"	str AR,AL" COM "assign word\n", },

{ ASSIGN,	FOREFF|INBREG,
	SOREG|SNAME,	TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		0,	RDEST,
		"	str AR,AL" COM "assign 64-bit value\n"
		"	str UR,UL\n", },

/* XXX don't know if this works */
{ ASSIGN,	FOREFF|INBREG,
	SAREG,		TPTRTO|TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		0,	RDEST,
		"	stmdb AL,{AR-UR}" COM "assign 64-bit value\n", },

{ ASSIGN,	FOREFF|INAREG,
	SOREG|SNAME,	TCHAR|TUCHAR,
	SAREG,		TCHAR|TUCHAR,
		0,	RDEST,
		"	strb AR,AL" COM "assign (u)char\n", },

{ ASSIGN,	FOREFF|INAREG | FEATURE_HALFWORDS,
	SOREG|SNAME,	TSHORT|TUSHORT,
	SAREG,		TSHORT|TUSHORT,
		0,	RDEST,
		"	strh AR,AL" COM "assign (u)short\n", },

{ ASSIGN,	FOREFF|INAREG,
	SOREG|SNAME,	TSHORT|TUSHORT,
	SAREG,		TSHORT|TUSHORT,
		NAREG|NASL,	RDEST,
		"ZH", },

{ ASSIGN, 	FOREFF|INCREG | FEATURE_FPA,
	SOREG|SNAME,	TFLOAT,
	SCREG,		TFLOAT,
		0,	RDEST,
		"	stfs AR,AL" COM "assign float\n", },

{ ASSIGN, 	FOREFF|INCREG | FEATURE_VFP,
	SOREG|SNAME,	TFLOAT,
	SCREG,		TFLOAT,
		0,	RDEST,
		COM "unimplemented\n", },

{ ASSIGN, 	FOREFF|INAREG,
	SOREG|SNAME,	TFLOAT,
	SAREG,		TFLOAT,
		0,	RDEST,
		"	str AR,AL" COM "assign float (soft-float)\n", },

{ ASSIGN, 	FOREFF|INCREG | FEATURE_FPA,
	SOREG|SNAME,	TDOUBLE,
	SCREG,		TDOUBLE,
		0,	RDEST,
		"	stfd AR,AL" COM "assign double\n", },

{ ASSIGN, 	FOREFF|INCREG | FEATURE_VFP,
	SOREG|SNAME,	TDOUBLE,
	SCREG,		TDOUBLE,
		0,	RDEST,
		COM "unimplemented\n", },

{ ASSIGN, 	FOREFF|INBREG,
	SOREG|SNAME,	TDOUBLE,
	SBREG,		TDOUBLE,
		0,	RDEST,
		"	str AR,AL" COM "assign double (soft-float)\n"
		"	str UR,UL\n", },

{ ASSIGN, 	FOREFF|INCREG | FEATURE_FPA,
	SOREG|SNAME,	TLDOUBLE,
	SCREG,		TLDOUBLE,
		0,	RDEST,
		"	stfe AR,AL" COM "assign ldouble\n", },

{ ASSIGN, 	FOREFF|INCREG | FEATURE_VFP,
	SOREG|SNAME,	TLDOUBLE,
	SCREG,		TLDOUBLE,
		0,	RDEST,
		COM "not implemented", },

{ ASSIGN, 	FOREFF|INBREG,
	SOREG|SNAME,	TLDOUBLE,
	SBREG,		TLDOUBLE,
		0,	RDEST,
		"	str AR,AL" COM "assign ldouble (soft-float)\n"
		"	str UR,UL\n", },

/* assign register to register */
{ ASSIGN,	FOREFF|INAREG,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		0,	RDEST,
		"	mov AL,AR" COM "assign AR to AL\n", },

{ ASSIGN,      FOREFF|INBREG,
        SBREG,	TLONGLONG|TULONGLONG,
        SBREG,	TLONGLONG|TULONGLONG,
                0,	RDEST,
		"	mov AL,AR" COM "assign UR:AR to UL:AL\n"
                "	mov UL,UR\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_FPA,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		0,	RDEST,
		"	mvf AL,AR" COM "assign float reg to float reg\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_VFP,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		0,	RDEST,
		"	fcpys AL,AR" COM "assign float reg to float reg\n", },

{ ASSIGN,	FOREFF|INAREG,
	SAREG,	TFLOAT,
	SAREG,	TFLOAT,
		0,	RDEST,
		"	mov AL,AR" COM "assign float reg to float reg\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_FPA,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	mvf AL,AR" COM "assign float reg to float reg\n", },

{ ASSIGN,	FOREFF|INCREG | FEATURE_VFP,
	SCREG,	TDOUBLE|TLDOUBLE,
	SCREG,	TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	fcpyd AL,AR" COM "assign float reg to float reg\n", },

{ ASSIGN,	FOREFF|INBREG,
	SBREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TDOUBLE|TLDOUBLE,
		0,	RDEST,
		"	mov AL,AR" COM "assign (l)double reg to (l)double reg\n"
		"	mov UL,UR\n", },

{ ASSIGN,	FOREFF|INAREG,
	SFLD,		TANY,
	SOREG|SNAME,	TANY,
		3*NAREG,	RDEST,
		"	ldr A1,AR" COM "bit-field assignment\n"
		"	ldr A2,AL\n"
		"	ldr A3,=M\n"
		"	mov A1,A1,asl H\n"
		"	and A1,A1,A3\n"
		"	bic A2,A2,A3\n"
		"	orr A3,A2,A1\n"
		"	str A3,AL\n"
		"F	ldr AD,AR\n"
		"FZB", },

{ ASSIGN,	FOREFF|INAREG,
	SFLD,	TANY,
	SAREG,	TANY,
		3*NAREG,	RDEST,
		"	ldr A2,AL" COM "bit-field assignment\n"
		"	ldr A3,=M\n"
		"	mov A1,AR,asl H\n"
		"	and A1,A1,A3\n"
		"	bic A2,A2,A3\n"
		"	orr A3,A2,A1\n"
		"	str A3,AL\n"
		"F	mov AD,AR\n"
		"FZB", },

{ STASG,	INAREG|FOREFF,
	SOREG|SNAME,	TANY,
	SAREG,	TPTRTO|TANY,
		NSPECIAL,	RRIGHT,
		"ZQ", },

/*
 * DIV/MOD/MUL 
 */

{ DIV,	INAREG,
	SAREG,	TWORD,
	SAREG,	TWORD,
		NSPECIAL|NAREG|NASL,	RESC1,
		"ZE", },

{ DIV,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NSPECIAL|NBREG|NBSL,	RESC1,
		"ZE", },

{ DIV,	INCREG | FEATURE_FPA,
	SCREG,		TFLOAT,
	SCREG,		TFLOAT,
		NCREG,	RESC1,
		"	dvfs A1,AL,AL" COM "fast (float) divide\n", },

{ DIV,	INCREG | FEATURE_VFP,
	SCREG,		TFLOAT,
	SCREG,		TFLOAT,
		NCREG,	RESC1,
		"	fdivs A1,AL,AL" COM "fast (float) divide\n", },

{ DIV,	INAREG,
	SAREG,		TFLOAT,
	SAREG,		TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ DIV,	INCREG | FEATURE_FPA,
	SCREG,		TDOUBLE,
	SCREG,		TDOUBLE,
		NCREG,	RESC1,
		"	dvfd A1,AL,AL" COM "double divide\n", },

{ DIV,	INCREG | FEATURE_VFP,
	SCREG,		TDOUBLE,
	SCREG,		TDOUBLE,
		NCREG,	RESC1,
		"	fdivd A1,AL,AL" COM "double divide\n", },

{ DIV,	INBREG,
	SBREG,		TDOUBLE,
	SBREG,		TDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ DIV,	INCREG | FEATURE_FPA,
	SCREG,		TLDOUBLE,
	SCREG,		TLDOUBLE,
		NCREG,	RESC1,
		"	dvfe A1,AL,AR" COM "long double load\n", },

{ DIV,	INCREG | FEATURE_VFP,
	SCREG,		TLDOUBLE,
	SCREG,		TLDOUBLE,
		NCREG,	RESC1,
		"	fdivd A1,AL,AL" COM "double divide\n", },

{ DIV,	INBREG,
	SBREG,		TLDOUBLE,
	SBREG,		TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ MOD,	INAREG,
	SAREG,	TWORD,
	SAREG,	TWORD,
		NSPECIAL|NAREG,	RESC1,
		"ZE", },

{ MOD,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NSPECIAL|NBREG,	RESC1,
		"ZE", },

{ MUL,	INAREG | FEATURE_MUL,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG,	RESC1,
		"	mul A1,AL,AR\n", },

{ MUL,	INAREG,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,		TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NSPECIAL|NAREG,	RESC1,
		"ZE", },

{ MUL,	INBREG | FEATURE_MULL,
	SAREG,		TUWORD|TPOINT|TUSHORT|TUCHAR,
	SAREG,		TUWORD|TPOINT|TUSHORT|TUCHAR,
		NBREG,	RESC1,
		"	smull U1,A1,AL,AR\n", },

{ MUL,	INBREG | FEATURE_MUL,
	SAREG,		TUWORD|TPOINT|TUSHORT|TUCHAR,
	SAREG,		TUWORD|TPOINT|TUSHORT|TUCHAR,
		NBREG,	RESC1,
		"	mul A1,AL,AR\n"
		"	mov U1,A1,asr #31\n", },

{ MUL,	INBREG,
	SAREG,		TUWORD|TPOINT|TUSHORT|TUCHAR,
	SAREG,		TUWORD|TPOINT|TUSHORT|TUCHAR,
		NSPECIAL|NBREG,	RESC1,
		"ZE", },

{ MUL,	INBREG | FEATURE_MULL,
	SAREG,		TSWORD|TSHORT|TCHAR,
	SAREG,		TSWORD|TSHORT|TCHAR,
		NBREG,	RESC1,
		"	umull U1,A1,AL,AR\n", },

{ MUL,	INBREG | FEATURE_MUL,
	SAREG,		TSWORD|TSHORT|TCHAR,
	SAREG,		TSWORD|TSHORT|TCHAR,
		NBREG,	RESC1,
		"	mul A1,AL,AR\n"
		"	mov U1,#0\n", },

{ MUL,	INBREG,
	SAREG,		TSWORD|TSHORT|TCHAR,
	SAREG,		TSWORD|TSHORT|TCHAR,
		NSPECIAL|NBREG,	RESC1,
		"ZE", },

{ MUL,	INBREG | FEATURE_MULL,
	SBREG,		TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		NBREG,	RESC1,
		"	umull U1,A1,AL,AR\n", },

{ MUL,	INBREG | FEATURE_MUL,
	SBREG,		TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		NBREG,	RESC1,
		"	mul A1,AL,AR\n"
		"	mov U1,A1,asr #31\n", },

{ MUL,	INBREG,
	SBREG,		TLONGLONG|TULONGLONG,
	SBREG,		TLONGLONG|TULONGLONG,
		NSPECIAL|NBREG,	RESC1,
		"ZE", },

{ MUL,	INCREG | FEATURE_FPA,
	SCREG,		TFLOAT,
	SCREG,		TFLOAT,
		NCREG,	RESC1,
		"	fmls A1,AL,AL" COM "fast (float) multiply\n", },

{ MUL,	INCREG | FEATURE_VFP,
	SCREG,		TFLOAT,
	SCREG,		TFLOAT,
		NCREG,	RESC1,
		"	fmuls A1,AL,AL" COM "float multiply\n", },

{ MUL,	INAREG,
	SAREG,		TFLOAT,
	SAREG,		TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ MUL,	INCREG | FEATURE_FPA,
	SCREG,		TDOUBLE|TLDOUBLE,
	SCREG,		TDOUBLE|TLDOUBLE,
		NCREG,	RESC1,
		"	mufd A1,AL,AL" COM "fast (l)double multiply\n", },

{ MUL,	INCREG | FEATURE_VFP,
	SCREG,		TDOUBLE|TLDOUBLE,
	SCREG,		TDOUBLE|TLDOUBLE,
		NCREG,	RESC1,
		"	muld A1,AL,AL" COM "(l)double multiply\n", },

{ MUL,	INBREG,
	SBREG,		TDOUBLE|TLDOUBLE,
	SBREG,		TDOUBLE|TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

/*
 * Indirection operators.
 */

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TWORD|TPOINT,
		NAREG,	RESC1,
		"	ldr A1,AL" COM "word load\n", },

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TCHAR,
		NAREG,	RESC1,
		"	ldrsb A1,AL" COM "char load\n", },

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TUCHAR,
		NAREG,	RESC1,
		"	ldrb A1,AL" COM "uchar load\n", },

{ UMUL,	INAREG | FEATURE_HALFWORDS,
	SANY,		TANY,
	SOREG|SNAME,	TUSHORT,
		NAREG,	RESC1,
		"	ldrh A1,AL" COM "short load\n", },

{ UMUL,	INAREG | FEATURE_HALFWORDS,
	SANY,		TANY,
	SOREG|SNAME,	TSHORT,
		NAREG,	RESC1,
		"	ldrsh A1,AL" COM "short load\n", },

{ UMUL,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TSHORT|TUSHORT,
		2*NAREG|NASL,	RESC1,
		"ZH", },

{ UMUL, INBREG,
	SANY,		TANY,
	SOREG|SNAME,	TLONGLONG|TULONGLONG,
		NBREG,	RESC1,
		"	ldr A1,AL" COM "64-bit load\n"
		"	ldr U1,UL\n", },

{ UMUL, INCREG | FEATURE_FPA,
	SANY,		TANY,
	SOREG|SNAME,	TFLOAT,
		NCREG,	RESC1,
		"	ldfs A1,AL" COM "float load\n", },

{ UMUL, INCREG | FEATURE_VFP,
	SANY,		TANY,
	SOREG|SNAME,	TFLOAT,
		NCREG,	RESC1,
		COM "not implemented\n", },

{ UMUL, INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TFLOAT,
		NAREG,	RESC1,
		"	ldr A1,AL" COM "float load\n", },

{ UMUL, INCREG | FEATURE_FPA,
	SANY,		TANY,
	SOREG|SNAME,	TDOUBLE,
		NCREG,	RESC1,
		"	ldfd A1,AL" COM "double load\n", },

{ UMUL, INCREG | FEATURE_VFP,
	SANY,		TANY,
	SOREG|SNAME,	TDOUBLE,
		NCREG,	RESC1,
		COM "not implemented\n", },

{ UMUL, INBREG,
	SANY,		TANY,
	SOREG|SNAME,	TDOUBLE,
		NBREG,	RESC1,
		"	ldr A1,AL" COM "double load\n"
		"	ldr U1,UL\n", },

{ UMUL, INCREG | FEATURE_FPA,
	SANY,		TANY,
	SOREG|SNAME,	TLDOUBLE,
		NCREG,	RESC1,
		"	ldfe A1,AL" COM "long double load\n", },

{ UMUL, INCREG | FEATURE_VFP,
	SANY,		TANY,
	SOREG|SNAME,	TLDOUBLE,
		NCREG,	RESC1,
		COM "not implemented\n", },

{ UMUL, INBREG,
	SANY,		TANY,
	SOREG|SNAME,	TLDOUBLE,
		NBREG,	RESC1,
		"	ldr A1,AL" COM "long double load (soft-float)\n"
		"	ldr U1,UL\n", },

/*
 * Logical/branching operators
 */

/* compare with register */
{ OPLOG,	FORCC,
	SAREG,	TSWORD|TSHORT|TCHAR,
	SAREG,	TSWORD|TSHORT|TCHAR,
		0, 	RESCC,
		"	cmp AL,AR" COM "AR-AL (sets flags)\n", },

/* compare with register */
{ OPLOG,	FORCC,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
	SAREG,	TUWORD|TPOINT|TUSHORT|TUCHAR,
		0, 	RESCC,
		"	cmp AL,AR" COM "AR-AL (sets flags)\n", },

/* compare with register */
{ OPLOG,	FORCC,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		0, 	RESCC,
		"ZD", },

{ OPLOG,	FORCC | FEATURE_FPA,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NSPECIAL,	RESCC,
		"	cmfs AL,AR" COM "float compare\n", },

{ OPLOG,	FORCC | FEATURE_VFP,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		0,	RESCC,
		"	fcmps AL,AR" COM "float compare\n", },

{ OPLOG,	FORCC,
	SAREG,	TFLOAT,
	SAREG,	TFLOAT,
		NSPECIAL,	RESCC,
		"ZF", },

{ OPLOG,	FORCC | FEATURE_FPA,
	SCREG,	TDOUBLE,
	SCREG,	TDOUBLE,
		NSPECIAL,	RESCC,
		"	cmfd AL,AR" COM "double compare\n", },

{ OPLOG,	FORCC | FEATURE_VFP,
	SCREG,	TDOUBLE,
	SCREG,	TDOUBLE,
		0,	RESCC,
		"	fcmpd AL,AR" COM "double compare\n", },

{ OPLOG,	FORCC,
	SBREG,	TDOUBLE,
	SBREG,	TDOUBLE,
		NSPECIAL,	RESCC,
		"ZF", },

{ OPLOG,	FORCC | FEATURE_FPA,
	SCREG,	TLDOUBLE,
	SCREG,	TLDOUBLE,
		NSPECIAL,	RESCC,
		"	cmfe AL,AR" COM "ldouble compare\n", },

{ OPLOG,	FORCC | FEATURE_VFP,
	SCREG,	TLDOUBLE,
	SCREG,	TLDOUBLE,
		0,	RESCC,
		"	fcmpd AL,AR" COM "double compare\n", },

{ OPLOG,	FORCC,
	SBREG,	TLDOUBLE,
	SBREG,	TLDOUBLE,
		NSPECIAL,	RESCC,
		"ZF", },

/* AND/OR/ER */
{ AND,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1|RESCC,
		"	and A1,AL,AR" COM "64-bit and\n"
		"	and U1,UL,UR\n", },

{ OR,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	orr A1,AL,AR" COM "64-bit or\n"
		"	orr U1,UL,UR\n" },

{ ER,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	eor A1,AL,AR" COM "64-bit xor\n"
		"	eor U1,UL,UR\n" },

{ OPSIMP,	INAREG,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1|RESCC,
		"	O A1,AL,AR\n", },

{ OPSIMP,	INAREG|FORCC,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	Os A1,AL,AR\n", },


/*
 * Jumps.
 */
{ GOTO, 	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	RNOP,
		"	b LL\n", },

#if 0
{ GOTO, 	FOREFF,
	SAREG,	TANY,
	SANY,	TANY,
		0,	RNOP,
		"	mov pc,AL\n", },
#endif

/*
 * Convert LTYPE to reg.
 */

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TWORD|TPOINT,
		NAREG,	RESC1,
		"	ldr A1,AL" COM "load word from memory\n", },

{ OPLTYPE,      INBREG,
        SANY,   	TANY,
        SOREG|SNAME,	TLONGLONG|TULONGLONG,
                NBREG,  RESC1,
                "	ldr A1,AL" COM "load long long from memory\n"
		"	ldr U1,UL\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TCHAR,
		NAREG,	RESC1,
		"	ldrsb A1,AL" COM "load char from memory\n" },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TUCHAR,
		NAREG,	RESC1,
		"	ldrb A1,AL" COM "load uchar from memory\n", },

{ OPLTYPE,	INAREG | FEATURE_HALFWORDS,
	SANY,		TANY,
	SOREG|SNAME,	TSHORT,
		NAREG,	RESC1,
		"	ldrsh A1,AL" COM "load short from memory\n", },

{ OPLTYPE,	INAREG | FEATURE_HALFWORDS,
	SANY,		TANY,
	SOREG|SNAME,	TUSHORT,
		NAREG,	RESC1,
		"	ldrh A1,AL" COM "load ushort from memory\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TSHORT|TUSHORT,
		2*NAREG,	RESC1,
		"ZH", },

#if 0
{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SCON,		TPOINT,
		NAREG,	RESC1,
		"	ldr A1,AL" COM "load integer constant\n", },
#endif

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SCON,		TANY,
		NAREG,	RESC1,
		"ZI", },

{ OPLTYPE,	INBREG,
	SANY,	TANY,
	SCON,	TANY,
		NBREG,	RESC1,
		"ZJ", },

{ OPLTYPE,	INAREG,
	SANY,	TANY,
	SAREG,	TANY,
		NAREG,	RESC1,
		"	mov A1,AL" COM "load AL into A1\n" },

{ OPLTYPE,      INBREG,
        SANY,   TANY,
        SBREG,	TLONGLONG|TULONGLONG,
                NBREG,  RESC1,
		"	mov A1,AL" COM "load UL:AL into U1:A1\n"
                "       mov U1,UL\n", },

{ OPLTYPE,	INCREG | FEATURE_FPA,
	SANY,		TANY,
	SOREG|SNAME,	TFLOAT,
		NCREG,	RESC1,
		"	ldfs A1,AL" COM "load float\n", },

{ OPLTYPE,	INCREG | FEATURE_VFP,
	SANY,		TANY,
	SOREG|SNAME,	TFLOAT,
		NCREG,	RESC1,
		COM "not implemented\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SOREG|SNAME,	TFLOAT,
		NAREG,	RESC1,
		"	ldr A1,AL" COM "load float (soft-float)\n", },

{ OPLTYPE,	INCREG | FEATURE_FPA,
	SANY,		TANY,
	SOREG|SNAME,	TDOUBLE,
		NCREG,	RESC1,
		"	ldfd A1,AL" COM "load double\n", },

{ OPLTYPE,	INCREG | FEATURE_VFP,
	SANY,		TANY,
	SOREG|SNAME,	TDOUBLE,
		NCREG,	RESC1,
		COM "not implemented\n" },

{ OPLTYPE,	INBREG,
	SANY,		TANY,
	SOREG|SNAME,	TDOUBLE,
		NBREG,	RESC1,
		"	ldr A1,AL" COM "load double (soft-float)\n"
		"	ldr U1,UL\n", },

{ OPLTYPE,	INCREG | FEATURE_FPA,
	SANY,		TANY,
	SOREG|SNAME,	TLDOUBLE,
		NCREG,	RESC1,
		"	ldfe A1,AL" COM "load ldouble\n", },

{ OPLTYPE,	INCREG | FEATURE_VFP,
	SANY,		TANY,
	SOREG|SNAME,	TLDOUBLE,
		NCREG,	RESC1,
		COM "not implemented\n", },

{ OPLTYPE,	INBREG,
	SANY,		TANY,
	SOREG|SNAME,	TLDOUBLE,
		NBREG,	RESC1,
		"	ldr A1,AL" COM "load ldouble (soft-float)\n"
		"	ldr U1,UL\n", },

/*
 * Negate a word.
 */

{ UMINUS,	INAREG,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG,	TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	rsb A1,AL,#0" COM "negation\n", },

{ UMINUS,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SBREG,	TLONGLONG|TULONGLONG,
		NBREG|NBSL,	RESC1,
		"	rsbs A1,AL,#0" COM "64-bit negation\n"
		"	rsc U1,UL,#0\n", },

{ UMINUS,	INCREG | FEATURE_FPA,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NCREG,	RESC1,
		"	mvfs A1,AL" COM "float negation\n", },

{ UMINUS,	INCREG | FEATURE_VFP,
	SCREG,	TFLOAT,
	SCREG,	TFLOAT,
		NCREG,	RESC1,
		"	negs A1,AL" COM "float negation\n", },

{ UMINUS,	INAREG,
	SAREG,	TFLOAT,
	SAREG,	TFLOAT,
		NSPECIAL|NAREG,	RESC1,
		"ZF", },

{ UMINUS,	INCREG | FEATURE_FPA,
	SCREG,	TDOUBLE,
	SCREG,	TDOUBLE,
		NCREG,	RESC1,
		"	mvfd A1,AL" COM "double negation\n", },

{ UMINUS,	INCREG | FEATURE_VFP,
	SCREG,	TDOUBLE,
	SCREG,	TDOUBLE,
		NCREG,	RESC1,
		"	negd A1,AL" COM "double negation\n", },

{ UMINUS,	INBREG,
	SBREG,	TDOUBLE,
	SBREG,	TDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ UMINUS,	INCREG | FEATURE_FPA,
	SCREG,	TLDOUBLE,
	SCREG,	TLDOUBLE,
		NCREG,	RESC1,
		"	mvfe A1,AL" COM "ldouble negation\n", },

{ UMINUS,	INCREG | FEATURE_VFP,
	SCREG,	TLDOUBLE,
	SCREG,	TLDOUBLE,
		NCREG,	RESC1,
		"	negd A1,AL" COM "ldouble negation\n", },

{ UMINUS,	INBREG,
	SBREG,	TLDOUBLE,
	SBREG,	TLDOUBLE,
		NSPECIAL|NBREG,	RESC1,
		"ZF", },

{ COMPL,	INAREG,
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
	SANY,	TANY,
		NAREG|NASL,	RESC1,
		"	mvn A1,AL" COM "complement\n", },

{ COMPL,	INBREG,
	SBREG,	TLONGLONG|TULONGLONG,
	SANY,	TANY,
		NBREG|NBSL,	RESC1,
		"	mvn A1,AL" COM "64-bit complement\n"
		"	mvn U1,UL\n", },

/*
 * Arguments to functions.
 */

{ FUNARG,       FOREFF,
        SAREG,  TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
        SANY,   TWORD|TPOINT|TSHORT|TUSHORT|TCHAR|TUCHAR,
                0,      0,
		"	stmfd sp!,{AL}" COM "save function arg to stack\n", },

{ FUNARG,       FOREFF,
        SBREG,  TLONGLONG|TULONGLONG,
        SANY,	TLONGLONG|TULONGLONG,
                0,      0,
		"	stmfd sp!,{AL,UL}" COM "save function arg to stack (endianness problem here?)\n", },

{ FUNARG,	FOREFF,
	SCREG,	TFLOAT,
	SANY,	TFLOAT,
		0,	0,
		"	stmfd sp!,{AL}" COM "save function arg to stack\n", },

{ FUNARG,       FOREFF,
        SCREG,  TDOUBLE|TLDOUBLE,
        SANY,  TDOUBLE|TLDOUBLE,
                0,      0,
		"	stmfd sp!,{AL,UL}" COM "save function arg to stack (endianness problem here?)\n", },

# define DF(x) FORREW,SANY,TANY,SANY,TANY,REWRITE,x,""

{ UMUL, DF( UMUL ), },

{ ASSIGN, DF(ASSIGN), },

{ STASG, DF(STASG), },

{ FLD, DF(FLD), },

{ OPLEAF, DF(NAME), },

/* { INIT, DF(INIT), }, */

{ OPUNARY, DF(UMINUS), },

{ OPANY, DF(BITYPE), },

{ FREE,	FREE,	FREE,	FREE,	FREE,	FREE,	FREE,	FREE,	"help; I'm in trouble\n" },
};

int tablesize = sizeof(table)/sizeof(table[0]);
@


1.2
log
@Sync with master repo. Reminded by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@arm backend from Gregory McGarry, untested
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.7 2007/11/22 18:36:44 gmcgarry Exp $	*/
a34 26
#if defined(ARM_HAS_FPA) || defined(ARM_HAS_VFP)
#define INFREG	INCREG
#define NFREG	NCREG
#define SFREG	SCREG
#define NFSL	NCSL
#define NFSR	NCSR
#define INXREG	INCREG
#define NXREG	NCREG
#define SXREG	SCREG
#define NXSL	NCSL
#define NXSR	NCSR
#else
#define INFREG	INAREG
#define NFREG	NAREG
#define SFREG	SAREG
#define NFSL	NASL
#define NFSR	NASR
#define INXREG	INBREG
#define NXREG	NBREG
#define SXREG	SBREG
#define NXSL	NBSL
#define NXSR	NBSR
#endif

#define COM	"	@@ "

d46 1
d64 3
a66 3
	INAREG,	TCHAR,
	INAREG,	TSWORD|TSHORT,
		NAREG|NASL,	RESC1,
d70 2
a71 2
	INAREG,	TCHAR,
	INAREG,	TUWORD|TUSHORT|TUCHAR,
d75 6
d82 2
a83 2
	INAREG,	TUCHAR,
	INAREG,	TCHAR,
d89 2
a90 2
	INAREG,	TUCHAR,
	INAREG,	TWORD|TSHORT|TUSHORT,
d95 2
a96 2
	INAREG,	TSHORT,
	INAREG,	TSWORD,
d100 6
d107 2
a108 2
	INAREG,	TSHORT,
	INAREG,	TUWORD,
d113 6
d120 2
a121 2
	INAREG,	TUSHORT,
	INAREG,	TSHORT,
d126 6
d133 2
a134 2
	INAREG,	TSHORT|TUSHORT,
	INAREG,	TCHAR,
d140 8
a147 2
	INAREG,	TSHORT|TUSHORT,
	INAREG,	TUCHAR,
d152 8
a159 2
	INAREG,	TUSHORT,
	INAREG,	TWORD,
d161 1
a161 1
		COM "convert ushort to (u)int\n", },
d164 2
a165 2
	INAREG,	TWORD,
	INAREG,	TCHAR,
d170 6
d177 2
a178 2
	INAREG,	TWORD,
	INAREG,	TSHORT,
d184 2
a185 2
	INAREG,	TWORD,
	INAREG,	TUCHAR,
d189 6
d196 2
a197 2
	INAREG,	TWORD,
	INAREG,	TUSHORT,
d222 6
d235 6
d260 6
d290 1
a290 1
{ SCONV,	INAREG,
d297 1
a297 1
{ SCONV,	INAREG,
d303 1
d305 13
a317 1
	SFREG,	TFLOAT,
d319 1
a319 4
		NSPECIAL|NAREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	fix AL,AR" COM "convert float to int\n", },
#elifdef ARM_HAS_VFP
d321 6
a326 3
#else
		"ZF", },
#endif
d329 2
a330 2
	SFREG,	TFLOAT,
	SAREG,	TUWORD,
a331 5
#ifdef ARM_HAS_FPA
		"	fix AL,AR" COM "convert float to int\n", },
#elifdef ARM_HAS_VFP
		"	ftouis AL,AR" COM "convert float to int\n", },
#else
d333 12
a344 1
#endif
d347 3
a349 6
	SFREG,	TFLOAT,
	SBREG,	TULONGLONG,
		NSPECIAL|NAREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
a350 1
#endif
d352 5
a356 9
{ SCONV,	INBREG,
	SFREG,	TFLOAT,
	SBREG,	TLONGLONG,
		NSPECIAL|NAREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
		"ZF", },
#endif
d358 2
a359 2
{ SCONV,	INAREG,
	SXREG,	TDOUBLE|TLDOUBLE,
d361 1
a361 4
		NSPECIAL|NAREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	fix AL,AR" COM "convert double/ldouble to int\n", },
#elifdef ARM_HAS_VFP
a362 3
#else
		"ZF", },
#endif
d364 2
a365 2
{ SCONV,	INAREG,
	SXREG,	TDOUBLE|TLDOUBLE,
d367 1
a367 4
		NSPECIAL|NAREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	fix AL,AR" COM "convert double/ldouble to int\n", },
#elifdef ARM_HAS_VFP
a368 3
#else
		"ZF", },
#endif
d370 3
a372 3
{ SCONV,	INBREG,
	SXREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TULONGLONG,
a373 3
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
d375 12
a386 1
#endif
d389 3
a391 6
	SXREG,	TDOUBLE|TLDOUBLE,
	SBREG,	TLONGLONG,
		NSPECIAL|NAREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
a392 1
#endif
d394 7
a400 1
{ SCONV,	INFREG,
d402 2
a403 5
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	flts AL,AR" COM "convert int to float\n" },
#elifdef ARM_HAS_VFP
a404 3
#else
		"ZF", },
#endif
d406 1
a406 1
{ SCONV,	INFREG,
d408 2
a409 5
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	flts AL,AR" COM "convert int to float\n" },
#elifdef ARM_HAS_VFP
d411 5
a415 1
#else
a416 1
#endif
d418 17
a434 9
{ SCONV,	INFREG,
	SBREG,	TLONGLONG,
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
		"ZF", },
#endif
d436 5
a440 9
{ SCONV,	INFREG,
	SBREG,	TULONGLONG,
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
		"ZF", },
#endif
d442 1
a442 1
{ SCONV,	INXREG,
d444 2
a445 5
	SXREG,	TDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	fltd AL,AR" COM "convert int to double\n" },
#elifdef ARM_HAS_VFP
a446 3
#else
		"ZF", },
#endif
d448 1
a448 1
{ SCONV,	INXREG,
d450 2
a451 5
	SXREG,	TDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	fltd AL,AR" COM "convert int to double\n" },
#elifdef ARM_HAS_VFP
d453 5
a457 1
#else
a458 1
#endif
d460 16
a475 7
{ SCONV,	INXREG,
	SBREG,	TLONGLONG,
	SXREG,	TDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
a476 1
#endif
d478 5
a482 9
{ SCONV,	INXREG,
	SBREG,	TULONGLONG,
	SXREG,	TDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
		"ZF", },
#endif
d484 1
a484 1
{ SCONV,	INXREG,
d486 2
a487 5
	SXREG,	TLDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	flte AL,AR" COM "convert int to ldouble\n" },
#elifdef ARM_HAS_VFP
a488 3
#else
		"ZF", },
#endif
d490 1
a490 1
{ SCONV,	INXREG,
d492 8
a499 7
	SXREG,	TLDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
		"	flte AL,AR" COM "convert int to ldouble\n" },
#elifdef ARM_HAS_VFP
		"	fuitod AL,AR" COM "convert int to ldouble\n" },
#else
a500 1
#endif
d502 5
d508 5
a512 9
{ SCONV,	INXREG,
	SBREG,	TLONGLONG,
	SXREG,	TLDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
		"ZF", },
#endif
d514 4
a517 7
{ SCONV,	INXREG,
	SBREG,	TULONGLONG,
	SXREG,	TLDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
#else
a518 1
#endif
d520 10
a529 6
{ SCONV,	INFREG,
	SXREG,	TDOUBLE,
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
a530 3
#else
		"ZF", },
#endif
d532 4
a535 8
{ SCONV,	INFREG,
	SXREG,	TLDOUBLE,
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
		"	fcvtds AL,AR" COM "convert float to double\n" },
#else
a536 1
#endif
d538 10
a547 6
{ SCONV,	INXREG,
	SFREG,	TFLOAT,
	SXREG,	TDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
d549 5
a553 1
#else
a554 1
#endif
d556 11
a566 10
{ SCONV,	INXREG,
	SFREG,	TFLOAT,
	SXREG,	TLDOUBLE,
		NSPECIAL|NXREG,		RESC1,
#ifdef ARM_HAS_FPA
#elifdef ARM_HAS_VFP
		"	fcvtsd AL,AR" COM "convert float to double\n" },
#else
		"ZF", },
#endif
d568 3
a570 3
{ SCONV,	INXREG,
	SXREG,	TDOUBLE|TLDOUBLE,
	SXREG,	TDOUBLE|TLDOUBLE,
d605 1
a605 1
{ CALL,		INFREG,
d607 2
a608 2
	SFREG,		TFLOAT,
		NFREG|NASL,	RESC1,	/* should be 0 */
d612 1
a612 1
{ CALL,		INXREG,
d614 16
a629 2
	SXREG,		TDOUBLE|TLDOUBLE,
		NXREG|NXSL,	RESC1,	/* should be 0 */
d645 1
a645 1
{ UCALL,	INFREG,
d647 2
a648 2
	SFREG,		TFLOAT,
		NFREG|NFSL,	RESC1,	/* should be 0 */
d651 1
a651 1
{ UCALL,	INXREG,
d653 2
a654 2
	SXREG,		TDOUBLE|TLDOUBLE,
		NXREG|NXSL,	RESC1,	/* should be 0 */
d672 15
d691 1
a691 1
		NAREG|NASL,	0,
d710 1
a710 1
		NAREG|NASL,	0,
d759 4
a762 5
{ PLUS,		INFREG,
	SFREG,	TFLOAT,
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,	RESC1,
#ifdef ARM_HAS_FPA
d764 5
a768 1
#elifdef ARM_HAS_VFP
d770 5
a774 1
#else
a775 1
#endif
d777 4
a780 5
{ PLUS,		INXREG,
	SXREG,	TDOUBLE,
	SXREG,	TDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d782 5
a786 1
#elifdef ARM_HAS_VFP
d788 5
a792 1
#else
a793 1
#endif
d795 4
a798 5
{ PLUS,		INXREG,
	SXREG,	TLDOUBLE,
	SXREG,	TLDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d800 5
a804 1
#elifdef ARM_HAS_VFP
d806 5
a810 1
#else
a811 1
#endif
d823 1
a823 1
		"	sub A1,AR,AL" COM "subtraction\n", },
d839 4
a842 5
{ MINUS,	INFREG,
	SFREG,	TFLOAT,
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,	RESC1,
#ifdef ARM_HAS_FPA
d844 5
a848 1
#elifdef ARM_HAS_VFP
d850 5
a854 1
#else
a855 1
#endif
d857 4
a860 5
{ MINUS,	INXREG,
	SXREG,	TDOUBLE,
	SXREG,	TDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d862 5
a866 1
#elifdef ARM_HAS_VFP
d868 5
a872 1
#else
a873 1
#endif
d875 4
a878 5
{ MINUS,	INXREG,
	SXREG,	TLDOUBLE,
	SXREG,	TLDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d880 5
a884 1
#elifdef ARM_HAS_VFP
d886 5
a890 1
#else
a891 1
#endif
d899 1
a899 1
	SAREG,	TWORD|TSHORT|TUSHORT|TCHAR|TUCHAR,
d915 6
d923 1
a923 1
	SAREG,	TSWORD|TSHORT|TCHAR,
d929 1
a929 1
	SAREG,	TUWORD|TUSHORT|TUCHAR,
d951 7
d988 1
a988 1
{ ASSIGN,	FOREFF|INAREG,
d994 7
a1000 1
{ ASSIGN, 	FOREFF|INFREG,
d1002 1
a1002 1
	SFREG,		TFLOAT,
a1003 1
#ifdef ARM_HAS_FPA
a1004 4
#elifdef ARM_HAS_VFP
#else
		"	str AR,AL" COM "assign float\n", },
#endif
d1006 13
a1018 1
{ ASSIGN, 	FOREFF|INXREG,
d1020 1
a1020 1
	SXREG,		TDOUBLE,
a1021 1
#ifdef ARM_HAS_FPA
d1023 12
a1034 3
#elifdef ARM_HAS_VFP
#else
		"	str AR,AL" COM "assign double\n"
a1035 1
#endif
d1037 1
a1037 1
{ ASSIGN, 	FOREFF|INXREG,
d1039 1
a1039 1
	SXREG,		TLDOUBLE,
a1040 1
#ifdef ARM_HAS_FPA
d1042 12
a1053 3
#elifdef ARM_HAS_VFP
#else
		"	str AR,AL" COM "assign ldouble\n"
a1054 1
#endif
d1070 3
a1072 3
{ ASSIGN,	FOREFF|INFREG,
	SFREG,	TFLOAT,
	SFREG,	TFLOAT,
a1073 1
#ifdef ARM_HAS_FPA
d1075 5
a1079 1
#elifdef ARM_HAS_VFP
d1081 5
a1085 1
#else
a1086 1
#endif
d1088 3
a1090 3
{ ASSIGN,	FOREFF|INXREG,
	SXREG,	TDOUBLE|TLDOUBLE,
	SXREG,	TDOUBLE|TLDOUBLE,
a1091 1
#ifdef ARM_HAS_FPA
d1093 5
a1097 1
#elifdef ARM_HAS_VFP
d1099 5
a1103 1
#else
a1105 1
#endif
a1106 1
#if 0
d1108 13
a1120 4
	SFLD,	TANY,
	SAREG,	TANY,
		NAREG,	RDEST,
		"ZE", },
d1122 1
a1122 1
{ ASSIGN,	FOREFF,
d1125 10
a1134 3
		NAREG,	0,
		"ZE", },
#endif
d1158 4
a1161 5
{ DIV,	INFREG,
	SFREG,		TFLOAT,
	SFREG,		TFLOAT,
		NSPECIAL|NFREG,	RESC1,
#ifdef ARM_HAS_FPA
d1163 5
a1167 1
#elifdef ARM_HAS_VFP
d1169 5
a1173 1
#else
a1174 1
#endif
d1176 4
a1179 5
{ DIV,	INXREG,
	SXREG,		TDOUBLE,
	SXREG,		TDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d1181 5
a1185 1
#elifdef ARM_HAS_VFP
d1187 5
a1191 1
#else
a1192 1
#endif
d1194 10
a1203 7
{ DIV,	INXREG,
	SXREG,		TLDOUBLE,
	SXREG,		TLDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
		"	dvfe A1,AL,AL" COM "ldouble divide\n", },
#elifdef ARM_HAS_VFP
d1205 5
a1209 1
#else
a1210 1
#endif
d1224 6
d1234 14
a1247 1
		"	mul A1,AL,AR\n", },
d1253 12
a1264 3
#ifdef ARM_HAS_MULL
		"	smull U1,A1,AL,AR\n", },
#else
d1266 1
a1266 2
		"	mul U1,AL,AR\n", },
#endif
d1272 6
a1277 1
#ifdef ARM_HAS_MULL
d1279 5
a1283 1
#else
d1285 1
a1285 2
		"	mul U1,AL,AR\n", },
#endif
d1291 1
a1291 6
#ifdef ARM_HAS_MULL
		"	umull U1,A1,AL,AR\n", },
#else
		"	mul A1,AL,AR\n"
		"	mul U1,AL,AR\n", },
#endif
d1293 4
a1296 5
{ MUL,	INFREG,
	SFREG,		TFLOAT,
	SFREG,		TFLOAT,
		NSPECIAL|NFREG,	RESC1,
#ifdef ARM_HAS_FPA
d1298 5
a1302 1
#elifdef ARM_HAS_VFP
d1304 5
a1308 1
#else
a1309 1
#endif
d1311 4
a1314 5
{ MUL,	INXREG,
	SXREG,		TDOUBLE|TLDOUBLE,
	SXREG,		TDOUBLE|TLDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d1316 5
a1320 1
#elifdef ARM_HAS_VFP
d1322 5
a1326 1
#else
a1327 1
#endif
d1351 1
a1351 1
{ UMUL,	INAREG,
d1357 1
a1357 1
{ UMUL,	INAREG,
d1363 6
d1376 1
a1376 1
{ UMUL, INFREG,
d1379 1
a1379 2
		NFREG,	RESC1,
#ifdef ARM_HAS_FPA
d1381 11
a1391 2
#elifdef ARM_HAS_VFP
#else
a1392 1
#endif
d1394 13
a1406 1
{ UMUL, INXREG,
d1409 1
a1409 5
		NXREG,	RESC1,
#ifdef ARM_HAS_FPA
		"	ldfd AL" COM "double load\n", },
#elifdef ARM_HAS_VFP
#else
a1411 1
#endif
d1413 13
a1425 1
{ UMUL, INXREG,
d1428 2
a1429 6
		NXREG,	RESC1,
#ifdef ARM_HAS_FPA
		"	ldfe AL" COM "long double load\n", },
#elifdef ARM_HAS_VFP
#else
		"	ldr A1,AL" COM "long double load\n"
a1430 1
#endif
d1457 3
a1459 3
{ OPLOG,	FORCC,
	SFREG,	TFLOAT,
	SFREG,	TFLOAT,
a1460 1
#ifdef ARM_HAS_FPA
d1462 5
a1466 1
#elifdef ARM_HAS_VFP
d1468 5
a1472 1
#else
a1473 1
#endif
d1475 3
a1477 3
{ OPLOG,	FORCC,
	SXREG,	TDOUBLE,
	SXREG,	TDOUBLE,
a1478 1
#ifdef ARM_HAS_FPA
d1480 5
a1484 1
#elifdef ARM_HAS_VFP
d1486 5
a1490 1
#else
a1491 1
#endif
d1493 3
a1495 3
{ OPLOG,	FORCC,
	SXREG,	TLDOUBLE,
	SXREG,	TLDOUBLE,
a1496 1
#ifdef ARM_HAS_FPA
d1498 5
a1502 1
#elifdef ARM_HAS_VFP
d1504 5
a1508 1
#else
a1509 1
#endif
d1592 1
a1592 1
{ OPLTYPE,	INAREG,
d1598 1
a1598 1
{ OPLTYPE,	INAREG,
d1606 14
d1622 1
a1622 1
		"	ldr A1,ZI" COM "load integer constant\n", },
d1643 1
a1643 1
{ OPLTYPE,	INFREG,
d1646 1
a1646 2
		NFREG,	RESC1,
#ifdef ARM_HAS_FPA
a1647 4
#elifdef ARM_HAS_VFP
#else
		"	ldr A1,AL" COM "load float\n", },
#endif
d1649 13
a1661 1
{ OPLTYPE,	INXREG,
d1664 1
a1664 2
		NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d1666 12
a1677 3
#elifdef ARM_HAS_VFP
#else
		"	ldr A1,AL" COM "load double\n"
a1678 1
#endif
d1680 1
a1680 1
{ OPLTYPE,	INXREG,
d1683 1
a1683 2
		NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d1685 12
a1696 3
#elifdef ARM_HAS_VFP
#else
		"	ldr A1,AL" COM "load ldouble\n"
a1697 1
#endif
d1707 1
a1707 1
		"	neg A1,AL" COM "negation\n", },
d1716 4
a1719 5
{ UMINUS,	INFREG,
	SFREG,	TFLOAT,
	SFREG,	TFLOAT,
		NSPECIAL|NFREG,	RESC1,
#ifdef ARM_HAS_FPA
d1721 5
a1725 1
#elifdef ARM_HAS_VFP
d1727 5
a1731 1
#else
a1732 1
#endif
d1734 4
a1737 5
{ UMINUS,	INXREG,
	SXREG,	TDOUBLE,
	SXREG,	TDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d1739 5
a1743 1
#elifdef ARM_HAS_VFP
d1745 5
a1749 1
#else
a1750 1
#endif
d1752 4
a1755 5
{ UMINUS,	INXREG,
	SXREG,	TLDOUBLE,
	SXREG,	TLDOUBLE,
		NSPECIAL|NXREG,	RESC1,
#ifdef ARM_HAS_FPA
d1757 5
a1761 1
#elifdef ARM_HAS_VFP
d1763 5
a1767 1
#else
a1768 1
#endif
d1800 1
a1800 1
	SFREG,	TFLOAT,
d1806 1
a1806 1
        SXREG,  TDOUBLE|TLDOUBLE,
@

