head	1.3;
access;
symbols
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.18
	OPENBSD_5_0:1.2.0.16
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.14
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2012.04.12.11.51.13;	author pirofti;	state dead;
branches;
next	1.2;

1.2
date	2007.11.16.09.00.13;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.07.17.58.52;	author otto;	state Exp;
branches;
next	;


desc
@@


1.3
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*	$OpenBSD: table.c,v 1.2 2007/11/16 09:00:13 otto Exp $	*/
/*
 * Copyright (c) 2003 Anders Magnusson (ragge@@ludd.luth.se).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


# include "pass2.h"

# define TLL TLONGLONG|TULONGLONG
# define ANYSIGNED TINT|TLONG|TSHORT|TCHAR
# define ANYUSIGNED TUNSIGNED|TULONG|TUSHORT|TUCHAR
# define ANYFIXED ANYSIGNED|ANYUSIGNED
# define TUWORD TUNSIGNED|TULONG
# define TSWORD TINT|TLONG
# define TWORD TUWORD|TSWORD

struct optab table[] = {
{ -1, FORREW,SANY,TANY,SANY,TANY,REWRITE,-1,"", },
/*
 * A bunch of pointer conversions.
 * First pointer to integer.
 */
/* Convert char pointer to int */
{ SCONV,	INAREG,
	SAREG|SAREG,	TPTRTO|TCHAR|TUCHAR,
	SANY,	TWORD,
		NAREG,	RLEFT,
		"	lsh AL,2\n"
		"	move A1,AL\n"
		"	lsh A1,-040\n"
		"	trz A1,074\n"
		"	ior AL,A1\n"
		"	tlz AL,0740000\n", },

/* Convert short pointer to int */
{ SCONV,	INAREG,
	SAREG|SAREG,	TPTRTO|TSHORT|TUSHORT,
	SANY,	TWORD,
		NAREG,	RLEFT,
		"	lsh AL,2\n"
		"	move A1,AL\n"
		"	lsh A1,-041\n"
		"	trz A1,2\n"
		"	ior AL,A1\n"
		"	tlz AL,0740000\n", },

/* Convert int/unsigned/long/ulong/struct/union/func ptr to int */
{ SCONV,	INAREG,
	SAREG|SAREG,	TPTRTO|TWORD|TSTRUCT|TPOINT,
	SANY,		TWORD,
		0,	RLEFT,
		"	lsh AL,2\n", },

/*
 * Convert int/long to pointers.
 */
/* Convert int to char pointer */
{ PCONV,	INAREG,
	SAREG,	TWORD,
	SANY,	TPTRTO|TCHAR|TUCHAR,
		NAREG,	RLEFT,
		"	move A1,AL\n"
		"	lsh A1,036\n"
		"	tlo A1,0700000\n"
		"	tlz A1,0040000\n"
		"	lsh AL,-2\n"
		"	ior AL,A1\n", },

/* Convert int/long to short pointer */
{ PCONV,	INAREG,
	SAREG,	TWORD,
	SANY,	TPTRTO|TSHORT|TUSHORT,
		NAREG,	RLEFT,
		"	move A1,AL\n"
		"	lsh AL,-2\n"
		"	tlo AL,0750000\n"
		"	lsh A1,035\n"
		"	tlz A1,0760000\n"
		"	add AL,A1\n", },

/* Convert int/long to int/struct/multiple ptr */
{ PCONV,	INAREG,
	SAREG,	TWORD,
	SANY,	TPOINT|TWORD|TSTRUCT,
		0,	RLEFT,
		"	lsh AL,-2\n", },

/*
 * Pointer to pointer conversions.
 */
/* Convert char ptr to short ptr */
{ PCONV,	INAREG,
	SAREG,	TPTRTO|TCHAR|TUCHAR,
	SANY,	TPTRTO|TSHORT|TUSHORT,
		0,	RLEFT,
		"	tlo AL,050000\n"
		"	tlne AL,020000\n"
		"	tlz AL,010000\n", },

/* Convert char/short pointer to int/struct/multiple ptr */
{ PCONV,	INAREG,
	SAREG,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SANY,	TPOINT|TWORD|TSTRUCT,
		0,	RLEFT,
		"	tlz AL,0770000\n", },

/* Convert short pointer to char ptr */
{ PCONV,	INAREG,
	SAREG,	TPTRTO|TSHORT|TUSHORT,
	SANY,	TPTRTO|TCHAR|TUCHAR,
		0,	RLEFT,
		"	tlz AL,050000\n", },

/* Convert int/struct/foo pointer to char ptr */
{ PCONV,	INAREG,
	SAREG,	TPOINT|TWORD|TSTRUCT,
	SANY,	TPTRTO|TCHAR|TUCHAR,
		0,	RLEFT,
		"	tlo AL,0700000\n", },

/* Convert int/struct/foo pointer to short ptr */
{ PCONV,	INAREG,
	SAREG,	TPTRTO|TWORD|TSTRUCT,
	SANY,	TPTRTO|TSHORT|TUSHORT,
		0,	RLEFT,
		"	tlo AL,0750000\n", },

/*
 * A bunch conversions of integral<->integral types
 */

/* convert short/char to int. This is done when register is loaded */
{ SCONV,	INAREG,
	SAREG,	TSHORT|TUSHORT|TCHAR|TUCHAR|TWORD,
	SANY,	TWORD,
		0,	RLEFT,
		"", },

/* convert int to short/char. This is done when register is loaded */
{ SCONV,	INAREG,
	SAREG,	TWORD,
	SANY,	TSHORT|TUSHORT|TCHAR|TUCHAR|TWORD,
		0,	RLEFT,
		"", },

/* convert int/long to unsigned long long */
{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
	SANY,	TULONGLONG,
		NAREG|NASL,	RESC1,
		"	move U1,AL\n"
		"	setz A1,\n"
		"	tlze U1,0400000\n"
		"	tro A1,01\n" , },

/* convert int/long to long long */
{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
	SANY,	TLONGLONG,
		NAREG|NASL,	RESC1,
		"	move U1,AL\n"
		"	move A1,U1\n"
		"	ash A1,-043\n", },

/* convert uchar/ushort to (unsigned) long long */
{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TUCHAR|TUSHORT,
	SANY,				TLL,
		NAREG|NASL,	RESC1,
		"	move U1,AL\n"
		"	setz A1,\n", },

/* convert long long to int/long */
{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TLL,
	SANY,	TWORD,
		NAREG|NASL,	RESC1,
		"	move A1,UL\n", },

/* convert long long to unsigned char - XXX - signed char */
{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TLL,
	SANY,	TCHAR|TUCHAR,
		NAREG|NASL,	RESC1,
		"	move A1,UL\n"
		"	andi A1,0777\n", },

/* convert long long to short - XXX - signed short */
{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TLL,
	SANY,	TSHORT|TUSHORT,
		NAREG|NASL,	RESC1,
		"	move A1,UL\n"
		"	hrrz A1,A1\n", },

/* floating point conversions */
{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TDOUBLE|TFLOAT,
	SANY,	TWORD,
		NAREG|NASL,	RESC1,
		"	fix A1,AL\n", },

{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
	SANY,	TFLOAT,
		NAREG|NASL,	RESC1,
		"	fltr A1,AL\n", },

{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
	SANY,	TDOUBLE,
		NAREG|NASL,	RESC1,
		"	fltr A1,AL\n	setz U1,\n", },

{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TDOUBLE,
	SANY,	TFLOAT,
		NAREG|NASL,	RESC1,
		"	move A1,AL\n", },

{ SCONV,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TFLOAT,
	SANY,	TDOUBLE,
		NAREG|NASL,	RESC1,
		"	move A1,AL\n	setz U1,\n", },

/*
 * Subroutine calls.
 */

{ UCALL,	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	0,	/* should be 0 */
		"	pushj 017,AL\nZB", },

{ CALL,	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	0,	/* should be 0 */
		"	pushj 017,AL\nZB", },

{ UCALL,	INAREG,
	SCON,	TANY,
	SANY,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT|TFLOAT|TDOUBLE|TLL|TPOINT,
		NAREG,	RESC1,	/* should be 0 */
		"	pushj 017,AL\nZB", },

{ UCALL,	INAREG,
	SAREG|SAREG,	TANY,
	SANY,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT|TFLOAT|TDOUBLE|TLL|TPOINT,
		NAREG|NASL,	RESC1,	/* should be 0 */
		"	pushj 017,(AL)\nZB", },

{ UCALL,	INAREG,
	SNAME|SOREG,	TANY,
	SANY,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT|TFLOAT|TDOUBLE|TLL|TPOINT,
		NAREG,	RESC1,	/* should be 0 */
		"	pushj 017,@@AL\nZB", },

/*
 * MOVE nodes are usually inserted late (at register assignment).
 */
{ MOVE,		FOREFF,
	SANY,	TWORD,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
		0,	RRIGHT,
		"	move AR,AL\n", },

{ MOVE,		FOREFF,
	SANY,	TLL,
	SAREG|SAREG|SNAME|SOREG,	TLL,
		0,	RRIGHT,
		"	dmove AR,AL\n", },

#ifdef notyet
/*
 * INCR can be slightly optimized.
 */
{ INCR,		INAREG,
	SAREG|SAREG|SNAME|SOREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TPTRTO,
	SONE,	TANY,
		NAREG,	RESC1,
		"	move A1,AL\n"
		"	ibp AL\n", },

/* Fix check of return value */
{ INCR,		FOREFF,
	SAREG|SAREG|SNAME|SOREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TPTRTO,
	SONE,	TANY,
		0,	0,
		"	ibp AL\n", },
#endif

/*
 * PLUS operators.
 */
/* Add a value to a char/short pointer */
{ PLUS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG|SNAME|SOREG,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|SAREG,			TWORD,
		0,	RRIGHT,
		"	adjbp AR,AL\n", },

/* No more search for char/short pointer addition */
{ PLUS,	INAREG|INAREG|FOREFF,
	SANY,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SANY,	TANY,
		REWRITE, 0,
		"DIEDIEDIE!\n", },

/* Add char/short/int to register */
{ PLUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TWORD,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
		0,	RLEFT,
		"	add AL,AR\n", },

/* Add char/short/int to memory */
{ PLUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
	SAREG|SAREG,			TWORD,
		0,	RLEFT,
		"	addm AR,AL\n", },

/* Add a small constant to a register */
{ PLUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD|TPOINT,
	SUSHCON,	TWORD,
		0,	RLEFT,
		"	addi AL,AR\n", },

/* Add a larger constant to a register */
{ PLUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD|TPOINT,
	SCON,	TWORD,
		0,	RLEFT,
		"	add AL,[ .long AR ]\n", },

/* Add long long to register */
{ PLUS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,			TLL,
	SAREG|SAREG|SNAME|SOREG,	TLL,
		0,	RLEFT,
		"	dadd AL,AR\n", },

/* Add int (or int pointer) to register */
{ PLUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TWORD|TPOINT,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
		0,	RLEFT,
		"	add AL,AR # foo \n", },

/* char/short are allowed to be added if they are in registers */
{ PLUS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	add AL,AR\n", },

/* get address of an memory position into a register */
{ PLUS,	INAREG|INAREG,
	SAREG|SAREG,	TWORD|TPTRTO,
	SCON,		TANY,
		NAREG,	RESC1,
		"	xmovei A1,AR(AL)\n", },

/* Safety belt for plus */
{ PLUS,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

/*
 * MINUS operators.
 */
/* Rewrite subtracts from char/short pointers (to negative adds) */
{ MINUS,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TCHAR|TUCHAR|TSHORT|TUSHORT|TPTRTO,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

/* Subtract char/short/int word in memory from reg */
{ MINUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TWORD|TPOINT,
	SAREG|SAREG|SNAME|SOREG,	TWORD|TPOINT,
		0,	RLEFT,
		"	sub AL,AR\n", },

/* Subtract a small constant from reg */
{ MINUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TWORD|TPOINT,
	SUSHCON,	TWORD|TPOINT,
		0,	RLEFT,
		"	subi AL,AR\n", },

/* Subtract a large constant from reg */
{ MINUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TWORD|TPOINT,
	SCON,	TWORD|TPOINT,
		0,	RLEFT,
		"	sub AL,[ .long AR ]\n", },

/* Subtract char/short/int word in memory from reg, save in memory */
{ MINUS,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TWORD,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
		0,	RRIGHT,
		"	subm AL,AR\n", },

/* Subtract long long from register */
{ MINUS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,			TLL,
	SAREG|SAREG|SNAME|SOREG,	TLL,
		0,	RLEFT,
		"	dsub AL,AR\n", },

/* char/short are allowed to be subtracted if they are in registers */
{ MINUS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	sub AL,AR\n", },

/* Safety belt for plus */
{ MINUS,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

/*
 * AND/OR/ER operators.
 * Simpler that the ops above in that they only work on integral types.
 */
/* And char/short/int with integer memory */
{ AND,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
		0,	RLEFT,
		"	and AL,AR\n", },

/* And char/short/int with register */
{ AND,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	and AL,AR\n", },

/* And char/short/int with small constant */
{ AND,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SUSHCON,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	andi AL,AR\n", },

/* And char/short/int with large constant */
{ AND,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SCON,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	and AL,[ .long AR ]\n", },

/* long long AND */
{ AND,	INAREG|FOREFF,
	SAREG|SAREG,			TLL,
	SAREG|SAREG|SNAME|SOREG,	TLL,
		0,	RLEFT,
		"	and AL,AR\n"
		"	and UL,UR\n", },

/* Safety belt for AND */
{ AND,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },


/* OR char/short/int with integer memory */
{ OR,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
		0,	RLEFT,
		"	ior AL,AR\n", },

/* OR char/short/int with register */
{ OR,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	ior AL,AR\n", },

/* OR char/short/int with small constant */
{ OR,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SUSHCON,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	iori AL,AR\n", },

/* OR char/short/int with large constant */
{ OR,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SCON,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	ior AL,[ .long AR ]\n", },

/* long long OR */
{ OR,	INAREG|FOREFF,
	SAREG|SAREG,			TLL,
	SAREG|SAREG|SNAME|SOREG,	TLL,
		0,	RLEFT,
		"	ior AL,AR\n"
		"	ior UL,UR\n", },

/* Safety belt for OR */
{ OR,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },


/* ER char/short/int with integer memory */
{ ER,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
		0,	RLEFT,
		"	xor AL,AR\n", },

/* ER char/short/int with register */
{ ER,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|SAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	xor AL,AR\n", },

/* ER char/short/int with small constant */
{ ER,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SUSHCON,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	xori AL,AR\n", },

/* ER char/short/int with large constant */
{ ER,	FOREFF|INAREG|INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SCON,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
		0,	RLEFT,
		"	xor AL,[ .long AR ]\n", },

/* long long ER */
{ ER,	INAREG|FOREFF,
	SAREG|SAREG,			TLL,
	SAREG|SAREG|SNAME|SOREG,	TLL,
		0,	RLEFT,
		"	xor AL,AR\n"
		"	xor UL,UR\n", },

/* Safety belt for ER */
{ ER,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

/*
 * The next rules handle all shift operators.
 */
{ LS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
		0,	RLEFT,
		"	lsh AL,(AR)\n", },

{ LS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SNAME|SOREG,	TWORD,
		0,	RLEFT,
		"	lsh AL,@@AR\n", },

{ LS,       INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TLL,
	SCON,		TANY,
		0,	RLEFT,
		"	ashc AL,ZH\n", },

{ LS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TLL,
	SAREG|SAREG /* |SNAME|SOREG */,	TANY,
		0,	RLEFT,
		"	ashc AL,(AR)\n", },

{ RS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TSWORD,
	SCON,		TWORD,
		0,	RLEFT,
		"	ash AL,-ZH\n", },

{ RS,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TUWORD,
	SCON,		TWORD,
		0,	RLEFT,
		"	lsh AL,-ZH\n", },

/* Safety belt for LS/RS */
{ LS,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

{ RS,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

/*
 * The next rules takes care of assignments. "=".
 */
/* Match zeroed registers first */
{ ASSIGN,	INAREG|FOREFF,
	SAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT|TWORD|TPOINT,
	SZERO,	TANY,
		0,	RDEST,
		"	setz AL,\n", },

{ ASSIGN,	FOREFF,
	SAREG|SNAME|SOREG,	TWORD|TPOINT,
	SZERO,	TANY,
		0,	0,
		"	setzm AL\n", },

{ ASSIGN,	INAREG|FOREFF,
	SAREG|SAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT|TWORD|TPOINT,
	SMONE,	TANY,
		0,	RDEST,
		"	setom AL\n", },

{ ASSIGN,	FOREFF,
	SAREG|SNAME|SOREG,	TWORD|TPOINT,
	SMONE,	TANY,
		0,	0,
		"	setom AL\n", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,		TWORD|TPOINT,
	SCON,		TWORD|TPOINT,
		0,	RDEST,
		"	ZC\n", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SAREG|SNAME|SOREG,	TWORD|TPOINT|TFLOAT,
	SAREG|SAREG,		TUCHAR|TUSHORT|TWORD|TPOINT|TFLOAT,
		0,	RDEST,
		"	movem AR,AL\n", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SAREG|SNAME|SOREG,	TWORD|TPOINT|TFLOAT,
	SAREG|SAREG,		TSHORT,
		0,	RDEST,
		"	hrrem AR,AL\n", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT|TWORD|TPOINT,
	SAREG|SAREG|SNAME|SOREG,	TWORD|TPOINT,
		0,	RDEST,
		"	move AL,AR\n", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT,
	SAREG|SAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT,
		0,	RDEST,
		"	move AL,AR\n", },

{ ASSIGN,	INBREG|FOREFF,
	SBREG|SNAME|SOREG,	TLL|TDOUBLE,
	SBREG,		TLL|TDOUBLE,
		0,	RDEST,
		"	dmovem AR,AL\n", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SOREG|SNAME,	TSHORT|TUSHORT|TCHAR|TUCHAR,
	SAREG|SAREG,	TANY,
		0,	RDEST,
		"ZV", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TUSHORT|TUCHAR,
	SOREG,		TANY,
		0,	RDEST,
		"	ldb AL,Zg\n", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TSHORT|TUSHORT|TCHAR|TUCHAR,
	SSCON,		TANY,
		0,	RDEST,
		"	movei AL,AR\n", },

{ ASSIGN,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TSHORT|TUSHORT|TCHAR|TUCHAR,
	SCON,		TANY,
		0,	RDEST,
		"	move AL,[ .long AR]\n", },

/*
 * DIV/MOD/MUL 
 * These can be done way more efficient.
 */
/* long long div. XXX - work only with unsigned */
{ DIV,	INBREG,
	SBREG|SNAME|SOREG,	TLL,
	SBREG|SNAME|SOREG,	TLL,
		(2*NBREG)|NBSL,	RESC1,
		"	dmove A2,AL ; dmove A1,[ .long 0,0 ]\n"
		"	ddiv A1,AR\n", },

/* long long div. with constant. XXX - work only with unsigned */
{ DIV,	INBREG,
	SBREG|SNAME|SOREG,	TLL,
	SCON,	TLL,
		(2*NBREG)|NBSL,	RESC1,
		"	dmove A2,AL ; dmove A1,[ .long 0,0 ]\n"
		"	ddiv A1,ZP\n", },

/* Simple divide. XXX - fix so next reg can be free */
{ DIV,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
		0,	RRIGHT,
		"	idivm AL,AR\n", },

/* Safety belt for DIV */
{ DIV,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

/* long long MOD */
{ MOD,	INBREG,
	SBREG|SNAME|SOREG,	TLL,
	SBREG|SNAME|SOREG,	TLL,
		2*NBREG|NBSL,	RESC2,
		"	dmove A2,AL ; dmove A1,[ .long 0,0 ]\n"
		"	ddiv A1,AR\n", },

/* integer MOD */
{ MOD,	INAREG,
	SAREG|SNAME|SOREG,	TWORD,
	SAREG|SNAME|SOREG,	TWORD,
		2*NAREG|NASL,	RESC2,
		"	move A2,AL\n"
		"	setz A1,\n"
		"	idiv A1,AR\n", },

/* integer MOD for char/short */
{ MOD,	INAREG,
	SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
		2*NAREG|NASL,	RESC2,
		"	move A2,AL\n"
		"	setz A1,\n"
		"	idiv A1,AR\n", },

/* Safety belt for MOD */
{ MOD,	FOREFF,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

/* long long MUL */
{ MUL,	INBREG,
	SBREG|SNAME|SOREG,	TLL,
	SBREG|SNAME|SOREG,	TLL,
		2*NBREG|NBSL,	RESC2,
		"	dmove A1,AL\n"
		"	dmul A1,AR\n", },

/* integer multiply to memory*/
{ MUL,	INAREG|INAREG|FOREFF,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
	SAREG|SAREG,			TWORD,
		0,		RLEFT,
		"	imulm AR,AL\n", },

/* integer multiply */
{ MUL,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,			TWORD,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
		0,		RLEFT,
		"	imul AL,AR\n", },

/* integer multiply for char/short */
{ MUL,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|SAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
		0,		RLEFT,
		"	imul AL,AR\n", },

/* integer multiply with small constant */
{ MUL,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TWORD,
	SUSHCON,	TWORD,
		0,		RLEFT,
		"	imuli AL,AR\n", },

/* integer multiply with large constant */
{ MUL,	INAREG|INAREG|FOREFF,
	SAREG|SAREG,	TWORD,
	SCON,		TWORD,
		0,		RLEFT,
		"	imul AL,[ .long AR ]\n", },

/* Safety belt for MUL */
{ MUL,	FORREW|FOREFF|INAREG|INAREG,
	SANY,	TANY,
	SANY,	TANY,
		REWRITE,	0,
		"DIEDIEDIE", },

/* read an indirect long long value into register */
{ UMUL,	INAREG,
	SAREG|SAREG,	TPTRTO|TLL|TWORD,
	SANY,		TLL,
		NAREG|NASL,	RESC1,
		"	dmove A1,(AL)\n", },

/* read an indirect integer value into register */
{ UMUL,	INAREG,
	SAREG|SAREG,	TWORD|TPOINT,
	SANY,		TWORD|TPOINT,
		NAREG|NASL,	RESC1,
		"	move A1,(AL)\n", },

/* read an indirect value into register */
{ UMUL,	INAREG,
	SOREG,	TWORD|TPOINT,
	SANY,	TWORD|TPOINT,
		NAREG,	RESC1,
		"	move A1,@@AL\n", },

/* read an indirect value into register */
{ UMUL,	INAREG,
	SAREG|SAREG|SOREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TPTRTO,
	SANY,	TCHAR|TUCHAR|TSHORT|TUSHORT,
		NAREG|NASL,	RESC1,
		"	ldb A1,AL\n", },

#ifdef notyet
/* Match tree shape for ildb */
{ UMUL,	INAREG,
	SANY,	TANY,
	SILDB,	TUCHAR|TCHAR|TPTRTO,
		NAREG,	RESC1,
		"	ildb A1,ZA\n", },
#endif

/* Match char/short pointers first, requires special handling */
{ OPLOG,	FORCC,
	SAREG|SAREG,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|SAREG,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
		0, 	RESCC,
		"ZZ", },

/* Can check anything by just comparing if EQ/NE */
{ OPLOG,	FORCC,
	SAREG|SAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SZERO,	TANY,
		0, 	RESCC,
		"	jumpZe AL,LC # bu\n", },

{ EQ,		FORCC,
	SAREG|SAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|SAREG|SOREG|SNAME|SCON,	TWORD|TPOINT,
		0, 	RESCC,
		"ZR", },

{ NE,		FORCC,
	SAREG|SAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|SAREG|SOREG|SNAME|SCON,	TWORD|TPOINT,
		0, 	RESCC,
		"ZR", },

{ OPLOG,	FORCC,
	SAREG|SAREG,	TWORD,
	SAREG|SAREG|SOREG|SNAME|SCON,	TSWORD,
		0, 	RESCC,
		"ZR", },

{ OPLOG,	FORCC,
	SAREG|SAREG,	TCHAR|TUCHAR,
	SCON,		TANY,
		0, 	RESCC,
		"ZR", },

{ OPLOG,	FORCC,
	SAREG|SAREG,	TWORD|TPOINT|TFLOAT,
	SAREG|SAREG|SOREG|SNAME|SCON,	TWORD|TPOINT|TFLOAT,
		0, 	RESCC,
		"ZR", },

{ OPLOG,	FORCC,
	SAREG|SAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|SAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
		0, 	RESCC,
		"ZR", },

{ OPLOG,	FORCC,  
	SAREG|SAREG,	TLL|TDOUBLE, /* XXX - does double work here? */
	SAREG|SAREG|SOREG|SNAME,	TLL|TDOUBLE,
		0,	RESCC,
		"ZQ", },

/*
 * Jumps.
 */
{ GOTO, 	FOREFF,
	SCON,	TANY,
	SANY,	TANY,
		0,	RNOP,
		"	jrst LL\n", },

/*
 * Convert LTYPE to reg.
 */
{ OPLTYPE,	INBREG,
	SANY,	TANY,
	SMONE,	TLL,
		NBREG,	RESC1,
		"	seto A1,\n	seto U1,\n", },

{ OPLTYPE,	INAREG,
	SANY,	TANY,
	SMONE,	TANY,
		NAREG,	RESC1,
		"	seto A1,\n", },

{ OPLTYPE,	INBREG,
	SANY,	TANY,
	SZERO,	TLL,
		NBREG,	RESC1,
		"	setz A1,\n	setz U1,\n", },

{ OPLTYPE,	INAREG,
	SANY,	TANY,
	SZERO,	TANY,
		NAREG,	RESC1,
		"	setz A1,\n", },

{ OPLTYPE,	INBREG,
	SANY,		TANY,
	SUSHCON,	TLL,
		NBREG,	RESC1,
		"	setz A1,\n	movei U1,AR\n", },

{ OPLTYPE,	INAREG,
	SANY,		TANY,
	SUSHCON,	ANYFIXED,
		NAREG,	RESC1,
		"	movei A1,AR\n", },

{ OPLTYPE,	INAREG,
	SANY,	ANYFIXED,
	SNSHCON,	ANYFIXED,
		NAREG,	RESC1,
		"	hrroi A1,AR\n", },

{ OPLTYPE,	INAREG,
	SANY,	ANYFIXED,
	SCON,	ANYFIXED,
		NAREG|NASR,	RESC1,
		"	ZD A1,ZE	# suspekt\n", },

{ OPLTYPE,	INAREG,
	SANY,	TWORD|TPOINT|TFLOAT,
	SAREG|SAREG|SOREG|SNAME,	TWORD|TPOINT|TFLOAT,
		NAREG|NASR,	RESC1,
		"	move A1,AR\n", },

{ OPLTYPE,	INBREG,
	SANY,	TLL,
	SCON,	TLL,
		NBREG,	RESC1,
		"	dmove A1,ZO\n", },

{ OPLTYPE,	INBREG,
	SANY,	TLL|TDOUBLE,
	SANY,	TLL|TDOUBLE,
		NBREG|NBSR,	RESC1,
		"	dmove A1,AR\n", },

{ OPLTYPE,	INAREG,
	SOREG,		TSHORT|TUSHORT|TCHAR|TUCHAR,
	SOREG,		TSHORT|TUSHORT|TCHAR|TUCHAR,
		NASR,	RESC1,
		"ZU", },

{ OPLTYPE,	INAREG,
	SNAME,	TUCHAR,
	SNAME,	TUCHAR,
		NAREG|NASR,	RESC1,
		"	ldb A1,[ .long AL ]\n" },

{ OPLTYPE,	INAREG,
	SNAME,	TCHAR,
	SNAME,	TCHAR,
		NAREG|NASR,	RESC1,
		"	ldb A1,[ .long AL ]\n"
		"	ash A1,033\n"
		"	ash A1,-033\n", },
		
{ OPLTYPE,	INAREG,
	SANY,	TANY,
	SNAME,	TSHORT|TUSHORT,
		NAREG|NASR,	RESC1,
		"Zi", },

{ OPLTYPE,	INAREG,
	SANY,	TWORD|TPOINT,
	SCON,	TWORD|TPOINT,
		NAREG|NASR,	RESC1,
		"Zc", },

{ OPLTYPE,	INAREG,
	SAREG|SAREG,	TUSHORT|TUCHAR,
	SAREG|SAREG,	TUSHORT|TUCHAR|TWORD,
		NAREG,	RESC1,
		"	move A1,AL\n", },

/*
 * Negate a word.
 */
{ UMINUS,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
	SANY,	TWORD,
		NAREG|NASL,	RESC1,
		"	movn A1,AL\n", },

{ UMINUS,	INAREG,
	SAREG|SAREG,	TWORD,
	SANY,	TCHAR|TUCHAR|TSHORT|TUSHORT,
		0,	RLEFT,
		"	movn AL,AL\n", },

{ UMINUS,	INAREG,
	SAREG|SNAME|SOREG,	TLL,
	SANY,	TLL,
		NAREG|NASR,	RESC1,
		"	dmovn A1,AL\n", },

{ COMPL,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TLL,
	SANY,	TANY,
		NAREG|NASL,	RESC1,
		"	setcm A1,AL\n"
		"	setcm U1,UL\n", },

{ COMPL,	INAREG,
	SAREG|SAREG|SNAME|SOREG,	TWORD,
	SANY,	TANY,
		NAREG|NASL,	RESC1,
		"	setcm A1,AL\n", },

{ COMPL,	INAREG,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT,
	SANY,	TCHAR|TUCHAR|TSHORT|TUSHORT,
		NAREG|NASL,	RESC1,
		"	setcm A1,AL\n", },

/*
 * Arguments to functions.
 */
{ FUNARG,	FOREFF,
	SAREG|SNAME|SOREG,	TWORD|TPOINT|TFLOAT,
	SANY,	TANY,
		0,	RNULL,
		"	push 017,AL\n", },

{ FUNARG,	FOREFF,
	SAREG|SAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT,
	SANY,	TANY,
		0,	RNULL,
		"	push 017,AL\n", },

{ FUNARG,	FOREFF,
	SCON,	TCHAR|TUCHAR|TSHORT|TUSHORT|TPOINT|TWORD,
	SANY,	TANY,
		0,	RNULL,
		"	push 017,[ .long AL]\n", },

{ FUNARG,	FOREFF,
	SBREG,	TLL|TDOUBLE,
	SANY,		TANY,
		0,	RNULL,
		"	push 017,AL\n	push 017,UL\n", },

{ STARG,	FOREFF,
	SAREG|SOREG|SNAME|SCON, TANY, 
	SANY,   TSTRUCT,
		0, 0, 
		"ZG", },


# define DF(x) FORREW,SANY,TANY,SANY,TANY,REWRITE,x,""

{ UMUL, DF( UMUL ), },

{ ASSIGN, DF(ASSIGN), },

{ OPLEAF, DF(NAME), },

{ OPUNARY, DF(UMINUS), },

{ FREE, FREE, FREE,	FREE, FREE, FREE, FREE, FREE, "help; I'm in trouble\n" },
};

int tablesize = sizeof(table)/sizeof(table[0]);
@


1.2
log
@sync tree with master repo; Nov 16 2007
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.95 2007/11/12 18:59:27 ragge Exp $	*/
@


1.1
log
@reorg pcc tree; requested by and ok deraadt@@; ok ragge@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.2 2007/09/15 22:04:38 ray Exp $	*/
d47 2
a48 2
{ SCONV,	INTAREG,
	SAREG|STAREG,	TPTRTO|TCHAR|TUCHAR,
d59 2
a60 2
{ SCONV,	INTAREG,
	SAREG|STAREG,	TPTRTO|TSHORT|TUSHORT,
d71 2
a72 2
{ SCONV,	INTAREG,
	SAREG|STAREG,	TPTRTO|TWORD|TSTRUCT|TPOINT,
d81 2
a82 2
{ PCONV,	INTAREG,
	STAREG,	TWORD,
d93 2
a94 2
{ PCONV,	INTAREG,
	STAREG,	TWORD,
d105 2
a106 2
{ PCONV,	INTAREG,
	STAREG,	TWORD,
d115 2
a116 2
{ PCONV,	INTAREG,
	STAREG,	TPTRTO|TCHAR|TUCHAR,
d124 2
a125 2
{ PCONV,	INTAREG,
	STAREG,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
d131 2
a132 2
{ PCONV,	INTAREG,
	STAREG,	TPTRTO|TSHORT|TUSHORT,
d138 2
a139 2
{ PCONV,	INTAREG,
	STAREG,	TPOINT|TWORD|TSTRUCT,
d145 2
a146 2
{ PCONV,	INTAREG,
	STAREG,	TPTRTO|TWORD|TSTRUCT,
d156 2
a157 2
{ SCONV,	INTAREG,
	STAREG,	TSHORT|TUSHORT|TCHAR|TUCHAR|TWORD,
d163 2
a164 2
{ SCONV,	INTAREG,
	STAREG,	TWORD,
d170 2
a171 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d180 2
a181 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d189 2
a190 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TUCHAR|TUSHORT,
d197 2
a198 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d204 2
a205 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d212 2
a213 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d220 2
a221 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TDOUBLE|TFLOAT,
d226 2
a227 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d232 2
a233 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d238 2
a239 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TDOUBLE,
d244 2
a245 2
{ SCONV,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TFLOAT,
d251 1
a251 1
 * Store constant initializers.
d253 2
a254 6
{ INIT, FOREFF,
	SCON,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SANY,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
		0,	RNOP,
		"	.long Zd\n", },
{ INIT,	FOREFF,
d256 3
a258 3
	SANY,	TWORD|TPOINT,
		0,	RNOP,
		"	.long CL\n", },
d260 1
a260 1
{ INIT,	FOREFF,
d262 3
a264 3
	SANY,	TLL,
		0,	RNOP,
		"	.long UL\n	.long CL\n", },
d266 1
a266 5
/*
 * Subroutine calls.
 */

{ UCALL,	INTAREG,
d272 2
a273 2
{ UCALL,	INTAREG,
	SAREG|STAREG,	TANY,
d278 1
a278 1
{ UCALL,	INTAREG,
d289 1
a289 1
	STAREG|SAREG|SNAME|SOREG,	TWORD,
d295 1
a295 1
	STAREG|SAREG|SNAME|SOREG,	TLL,
d299 1
d303 2
a304 2
{ INCR,		INTAREG,
	STAREG|SAREG|SNAME|SOREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TPTRTO,
a309 1
#ifdef notyet
d312 1
a312 1
	STAREG|SAREG|SNAME|SOREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TPTRTO,
d322 3
a324 3
{ PLUS,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG,			TWORD,
d329 1
a329 1
{ PLUS,	INAREG|INTAREG|FOREFF,
d336 3
a338 3
{ PLUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TWORD,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d343 3
a345 3
{ PLUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
	SAREG|STAREG,			TWORD,
d350 2
a351 2
{ PLUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD|TPOINT,
d357 2
a358 2
{ PLUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD|TPOINT,
d364 3
a366 3
{ PLUS,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,			TLL,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d371 3
a373 3
{ PLUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TWORD|TPOINT,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d378 3
a380 3
{ PLUS,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d385 2
a386 2
{ PLUS,	INAREG|INTAREG,
	SAREG|STAREG,	TWORD|TPTRTO,
d392 1
a392 1
{ PLUS,	FORREW|FOREFF|INAREG|INTAREG,
d402 1
a402 1
{ MINUS,	FORREW|FOREFF|INAREG|INTAREG,
d405 1
a405 1
		REWRITE,	BITYPE,
d409 3
a411 3
{ MINUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TWORD|TPOINT,
	SAREG|STAREG|SNAME|SOREG,	TWORD|TPOINT,
d416 2
a417 2
{ MINUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TWORD|TPOINT,
d423 2
a424 2
{ MINUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TWORD|TPOINT,
d430 3
a432 3
{ MINUS,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TWORD,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d437 3
a439 3
{ MINUS,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,			TLL,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d444 3
a446 3
{ MINUS,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d451 1
a451 1
{ MINUS,	FORREW|FOREFF|INAREG|INTAREG,
d462 3
a464 3
{ AND,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d469 3
a471 3
{ AND,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d476 2
a477 2
{ AND,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d483 2
a484 2
{ AND,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d491 2
a492 2
	SAREG|STAREG,			TLL,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d498 1
a498 1
{ AND,	FORREW|FOREFF|INAREG|INTAREG,
d506 3
a508 3
{ OR,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d513 3
a515 3
{ OR,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d520 2
a521 2
{ OR,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d527 2
a528 2
{ OR,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d535 2
a536 2
	SAREG|STAREG,			TLL,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d542 1
a542 1
{ OR,	FORREW|FOREFF|INAREG|INTAREG,
d550 3
a552 3
{ ER,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d557 3
a559 3
{ ER,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
	SAREG|STAREG,			TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d564 2
a565 2
{ ER,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d571 2
a572 2
{ ER,	FOREFF|INAREG|INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TWORD,
d579 2
a580 2
	SAREG|STAREG,			TLL,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d586 1
a586 1
{ ER,	FORREW|FOREFF|INAREG|INTAREG,
d595 3
a597 3
{ LS,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
d601 2
a602 2
{ LS,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
d607 2
a608 2
{ LS,       INTAREG|INAREG|FOREFF,
	STAREG|SAREG,	TLL,
d613 3
a615 3
{ LS,	INTAREG|INAREG|FOREFF,
	STAREG|SAREG,	TLL,
	SAREG|STAREG /* |SNAME|SOREG */,	TANY,
d619 2
a620 2
{ RS,	INTAREG|INAREG|FOREFF,
	STAREG|SAREG,	TSWORD,
d625 2
a626 2
{ RS,	INTAREG|INAREG|FOREFF,
	STAREG|SAREG,	TUWORD,
d632 1
a632 1
{ LS,	FORREW|FOREFF|INAREG|INTAREG,
d638 1
a638 1
{ RS,	FORREW|FOREFF|INAREG|INTAREG,
d648 2
a649 2
{ ASSIGN,	INTAREG|FOREFF,
	SAREG|STAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT|TWORD|TPOINT,
d651 1
a651 1
		0,	RLEFT,
d660 2
a661 2
{ ASSIGN,	INTAREG|FOREFF,
	SAREG|STAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT|TWORD|TPOINT,
d663 1
a663 1
		0,	RLEFT,
d672 2
a673 2
{ ASSIGN,	INAREG|INTAREG|FOREFF,
	STAREG|SAREG,		TWORD|TPOINT,
d675 1
a675 1
		0,	RLEFT,
d678 1
a678 1
{ ASSIGN,	INAREG|INTAREG|FOREFF,
d680 2
a681 2
	SAREG|STAREG,		TUCHAR|TUSHORT|TWORD|TPOINT|TFLOAT,
		0,	RRIGHT,
d684 1
a684 1
{ ASSIGN,	INAREG|INTAREG|FOREFF,
d686 2
a687 2
	SAREG|STAREG,		TSHORT,
		0,	0,
d690 4
a693 4
{ ASSIGN,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT|TWORD|TPOINT,
	SAREG|STAREG|SNAME|SOREG,	TWORD|TPOINT,
		0,	RLEFT,
d696 4
a699 4
{ ASSIGN,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT,
	SAREG|STAREG,	TUCHAR|TUSHORT|TCHAR|TSHORT,
		0,	RLEFT,
d702 4
a705 4
{ ASSIGN,	INAREG|INTAREG|FOREFF,
	SAREG|SNAME|SOREG,	TLL|TDOUBLE,
	SAREG|STAREG,		TLL|TDOUBLE,
		0,	RRIGHT,
d708 1
a708 1
{ ASSIGN,	INAREG|INTAREG|FOREFF,
d710 2
a711 2
	SAREG|STAREG,	TANY,
		0,	RRIGHT,
d714 2
a715 2
{ ASSIGN,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TUSHORT|TUCHAR,
d717 1
a717 1
		0,	RLEFT,
d720 2
a721 2
{ ASSIGN,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TSHORT|TUSHORT|TCHAR|TUCHAR,
d723 1
a723 1
		0,	RLEFT,
d726 2
a727 2
{ ASSIGN,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TSHORT|TUSHORT|TCHAR|TUCHAR,
d729 1
a729 1
		0,	RLEFT,
d737 4
a740 4
{ DIV,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TLL,
	SAREG|STAREG|SNAME|SOREG,	TLL,
		(2*NAREG)|NASL,	RESC1,
d745 2
a746 2
{ DIV,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d748 1
a748 1
		(2*NAREG)|NASL,	RESC1,
d753 3
a755 3
{ DIV,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
d760 1
a760 1
{ DIV,	FORREW|FOREFF|INAREG|INTAREG,
d767 4
a770 4
{ MOD,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TLL,
	SAREG|STAREG|SNAME|SOREG,	TLL,
		2*NAREG|NASL,	RESC2,
d775 3
a777 3
{ MOD,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d784 3
a786 3
{ MOD,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
d793 1
a793 1
{ MOD,	FORREW|FOREFF|INAREG|INTAREG,
d800 4
a803 4
{ MUL,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TLL,
	SAREG|STAREG|SNAME|SOREG,	TLL,
		2*NAREG|NASL,	RESC2,
d808 3
a810 3
{ MUL,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
	SAREG|STAREG,			TWORD,
d815 3
a817 3
{ MUL,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG,			TWORD,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d822 3
a824 3
{ MUL,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG,	TWORD|TCHAR|TUCHAR|TSHORT|TUSHORT,
d829 2
a830 2
{ MUL,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG,	TWORD,
d836 2
a837 2
{ MUL,	INTAREG|INAREG|FOREFF,
	SAREG|STAREG,	TWORD,
d843 1
a843 1
{ MUL,	FORREW|FOREFF|INAREG|INTAREG,
d850 2
a851 2
{ UMUL,	INTAREG,
	SAREG|STAREG,	TPTRTO|TLL|TWORD,
d857 2
a858 2
{ UMUL,	INTAREG,
	SAREG|STAREG,	TWORD|TPOINT,
d864 1
a864 1
{ UMUL,	INTAREG,
d871 2
a872 2
{ UMUL,	INTAREG,
	SAREG|STAREG|SOREG,	TCHAR|TUCHAR|TSHORT|TUSHORT|TPTRTO,
d879 1
a879 1
{ UMUL,	INTAREG,
d888 2
a889 2
	SAREG|STAREG,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG,	TPTRTO|TCHAR|TUCHAR|TSHORT|TUSHORT,
d895 1
a895 1
	SAREG|STAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
d901 2
a902 2
	SAREG|STAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG|SOREG|SNAME|SCON,	TWORD|TPOINT,
d907 2
a908 2
	SAREG|STAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG|SOREG|SNAME|SCON,	TWORD|TPOINT,
d913 2
a914 2
	SAREG|STAREG,	TWORD,
	SAREG|STAREG|SOREG|SNAME|SCON,	TSWORD,
d919 1
a919 1
	SAREG|STAREG,	TCHAR|TUCHAR,
d925 2
a926 2
	SAREG|STAREG,	TWORD|TPOINT|TFLOAT,
	SAREG|STAREG|SOREG|SNAME|SCON,	TWORD|TPOINT|TFLOAT,
d931 2
a932 2
	SAREG|STAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
	SAREG|STAREG,	TWORD|TPOINT|TCHAR|TUCHAR|TSHORT|TUSHORT,
d937 2
a938 2
	SAREG|STAREG,	TLL|TDOUBLE, /* XXX - does double work here? */
	SAREG|STAREG|SOREG|SNAME,	TLL|TDOUBLE,
d954 1
a954 1
{ OPLTYPE,	INAREG|INTAREG,
d957 1
a957 1
		NAREG,	RESC1,
d960 1
a960 1
{ OPLTYPE,	INAREG|INTAREG,
d966 1
a966 1
{ OPLTYPE,	INAREG|INTAREG,
d969 1
a969 1
		NAREG,	RESC1,
d972 1
a972 1
{ OPLTYPE,	INAREG|INTAREG,
d978 1
a978 1
{ OPLTYPE,	INAREG|INTAREG,
d981 1
a981 1
		NAREG,	RESC1,
d984 1
a984 1
{ OPLTYPE,	INAREG|INTAREG,
d990 1
a990 1
{ OPLTYPE,	INAREG|INTAREG,
d996 1
a996 1
{ OPLTYPE,	INAREG|INTAREG,
d1002 1
a1002 1
{ OPLTYPE,	INAREG|INTAREG,
d1004 1
a1004 1
	SAREG|STAREG|SOREG|SNAME,	TWORD|TPOINT|TFLOAT,
d1008 1
a1008 1
{ OPLTYPE,	INAREG|INTAREG,
d1011 1
a1011 1
		NAREG,	RESC1,
d1014 1
a1014 1
{ OPLTYPE,	INAREG|INTAREG,
d1017 1
a1017 1
		NAREG|NASR,	RESC1,
d1020 1
a1020 1
{ OPLTYPE,	INAREG|INTAREG,
d1023 1
a1023 1
		NAREG|NASR,	RESC1,
d1026 1
a1026 1
{ OPLTYPE,	INAREG|INTAREG,
d1032 1
a1032 1
{ OPLTYPE,	INAREG|INTAREG,
d1040 1
a1040 1
{ OPLTYPE,	INAREG|INTAREG,
d1046 1
a1046 1
{ OPLTYPE,	INAREG|INTAREG,
d1053 2
a1054 2
	SAREG|STAREG,	TUSHORT|TUCHAR,
	SAREG|STAREG,	TUSHORT|TUCHAR|TWORD,
d1061 2
a1062 2
{ UMINUS,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d1067 2
a1068 2
{ UMINUS,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG,	TWORD,
d1073 2
a1074 2
{ UMINUS,	INAREG|INTAREG|FOREFF,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d1079 2
a1080 2
{ COMPL,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TLL,
d1086 2
a1087 2
{ COMPL,	INTAREG,
	SAREG|STAREG|SNAME|SOREG,	TWORD,
d1092 2
a1093 2
{ COMPL,	INTAREG,
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT,
d1108 1
a1108 1
	SAREG|STAREG,	TCHAR|TUCHAR|TSHORT|TUSHORT,
d1120 1
a1120 1
	SAREG|STAREG,	TLL|TDOUBLE,
d1125 6
a1135 4
{ INCR, DF(INCR), },

{ DECR, DF(INCR), },

a1138 2

{ INIT, DF(INIT), },
@

