head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.14
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.7
date	2012.04.12.11.51.12;	author pirofti;	state dead;
branches;
next	1.6;

1.6
date	2008.08.17.18.40.12;	author ragge;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.11.20.45.52;	author stefan;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.12.17.26.16;	author ragge;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.20.18.24.11;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.07.18.36.58;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.07.17.58.51;	author otto;	state Exp;
branches;
next	;


desc
@@


1.7
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*      $OpenBSD: gcc_compat.c,v 1.6 2008/08/17 18:40:12 ragge Exp $     */
/*
 * Copyright (c) 2004 Anders Magnusson (ragge@@ludd.luth.se).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Routines to support some of the gcc extensions to C.
 */
#ifdef GCC_COMPAT

#include "pass1.h"
#include "cgram.h"

#include <string.h>

static struct kw {
	char *name, *ptr;
	int rv;
} kw[] = {
/*
 * Do NOT change the order of these entries unless you know 
 * what you're doing!
 */
/* 0 */	{ "__asm", NULL, C_ASM },
/* 1 */	{ "__signed", NULL, 0 },
/* 2 */	{ "__inline", NULL, C_FUNSPEC },
/* 3 */	{ "__const", NULL, 0 },
/* 4 */	{ "__asm__", NULL, C_ASM },
/* 5 */	{ "__inline__", NULL, C_FUNSPEC },
/* 6 */	{ "__thread", NULL, 0 },
/* 7 */	{ "__FUNCTION__", NULL, 0 },
/* 8 */	{ "__volatile", NULL, 0 },
/* 9 */	{ "__volatile__", NULL, 0 },
/* 10 */{ "__restrict", NULL, -1 },
	{ NULL, NULL, 0 },
};

void
gcc_init()
{
	struct kw *kwp;

	for (kwp = kw; kwp->name; kwp++)
		kwp->ptr = addname(kwp->name);

}

#define	TS	"\n#pragma tls\n# %d\n"
#define	TLLEN	sizeof(TS)+10
/*
 * See if a string matches a gcc keyword.
 */
int
gcc_keyword(char *str, NODE **n)
{
	char tlbuf[TLLEN], *tw;
	struct kw *kwp;
	int i;

	for (i = 0, kwp = kw; kwp->name; kwp++, i++)
		if (str == kwp->ptr)
			break;
	if (kwp->name == NULL)
		return 0;
	if (kwp->rv)
		return kwp->rv;
	switch (i) {
	case 1: /* __signed */
		*n = mkty((TWORD)SIGNED, 0, MKSUE(SIGNED));
		return C_TYPE;
	case 3: /* __const */
		*n = block(QUALIFIER, NIL, NIL, CON, 0, 0);
		return C_QUALIFIER;
	case 6: /* __thread */
		snprintf(tlbuf, TLLEN, TS, lineno);
		tw = &tlbuf[strlen(tlbuf)];
		while (tw > tlbuf)
			cunput(*--tw);
		return -1;
	case 7: /* __FUNCTION__ */
		if (cftnsp == NULL) {
			uerror("__FUNCTION__ outside function");
			yylval.strp = "";
		} else
			yylval.strp = cftnsp->sname; /* XXX - not C99 */
		return C_STRING;
	case 8: /* __volatile */
	case 9: /* __volatile__ */
		*n = block(QUALIFIER, NIL, NIL, VOL, 0, 0);
		return C_QUALIFIER;
	}
	cerror("gcc_keyword");
	return 0;
}
#endif
@


1.6
log
@Updates from master repo.  Can now compile both userland and kernel.
(with some patches...)
@
text
@d1 1
a1 1
/*      $OpenBSD: gcc_compat.c,v 1.5 2008/04/11 20:45:52 stefan Exp $     */
@


1.5
log
@Sync with master repo. Reminded by otto@@
@
text
@d1 1
a1 1
/*      $OpenBSD$     */
d47 11
a57 7
	{ "__asm", NULL, C_ASM },
	{ "__signed", NULL, 0 },
	{ "__inline", NULL, C_FUNSPEC },
	{ "__const", NULL, 0 },
	{ "__asm__", NULL, C_ASM },
	{ "__inline__", NULL, C_FUNSPEC },
	{ "__thread", NULL, 0 },
d103 11
@


1.4
log
@Large update from master repo:
> Pragma not position dependent
> Accept declarations anywhere in the C code.
> Just typing "a;" is not allowed anymore when declaring variables.
> Change to new initializer handling.
> Use symtab entry, not name to identify inline functions.
> Remove "suse" symtab element and replace it with output name.
> Print out strings directly, do not store them until end.
> Make prtdcon() target dependent to allow for float constants in code.
@
text
@d1 1
a1 1
/*      $OpenBSD: gcc_compat.c,v 1.3 2007/10/20 18:24:11 otto Exp $     */
d53 1
d67 2
d75 1
d93 6
@


1.3
log
@pull in exname() changes from ragge's repo. we're now back in sync
@
text
@d1 1
a1 1
/*      $OpenBSD: gcc_compat.c,v 1.9 2007/10/06 07:57:38 ragge Exp $     */
a91 38
}

static struct ren {
	struct ren *next;
	char *old, *new;
} *renp;
/*
 * Save a name for later renaming of a variable.
 */
void
gcc_rename(struct symtab *sp, char *newname)
{
	struct ren *ren = permalloc(sizeof(struct ren));

	sp->sflags |= SRENAME;
	ren->old = sp->sname;
	ren->new = newstring(newname, strlen(newname)+1);
	ren->next = renp;
	renp = ren;
}

/*
 * Get a renamed variable.
 */
char *
gcc_findname(struct symtab *sp)
{
	struct ren *w;

	if ((sp->sflags & SRENAME) == 0)
		return sp->sname;

	for (w = renp; w; w = w->next) {
		if (w->old == sp->sname)
			return w->new;
	}
	cerror("gcc_findname %s", sp->sname);
	return NULL;
@


1.2
log
@merge from ragge's repo:
Add __inline__ as gcc-compatible keyword.
@
text
@d1 1
a1 1
/*	$OpenBSD: gcc_compat.c,v 1.1 2007/10/07 17:58:51 otto Exp $	*/
d122 1
a122 1
		return exname(sp->sname);
d126 1
a126 1
			return exname(w->new);
@


1.1
log
@reorg pcc tree; requested by and ok deraadt@@; ok ragge@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gcc_compat.c,v 1.2 2007/09/15 22:04:38 ray Exp $	*/
d43 4
d52 1
@

