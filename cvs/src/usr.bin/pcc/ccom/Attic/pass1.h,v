head	1.11;
access;
symbols
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.14
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8;
locks; strict;
comment	@ * @;


1.11
date	2012.04.12.11.51.12;	author pirofti;	state dead;
branches;
next	1.10;

1.10
date	2008.08.17.18.40.13;	author ragge;	state Exp;
branches;
next	1.9;

1.9
date	2008.04.11.20.45.52;	author stefan;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.12.17.26.16;	author ragge;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.07.21.04.47;	author stefan;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.22.22.56.31;	author stefan;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.22.15.06.43;	author stefan;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.18.17.39.55;	author ragge;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.16.09.00.12;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.07.18.34.41;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.07.17.58.51;	author otto;	state Exp;
branches;
next	;


desc
@@


1.11
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*	$OpenBSD: pass1.h,v 1.10 2008/08/17 18:40:13 ragge Exp $	*/
/*
 * Copyright(C) Caldera International Inc. 2001-2002. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code and documentation must retain the above
 * copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditionsand the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 * 	This product includes software developed or owned by Caldera
 *	International, Inc.
 * Neither the name of Caldera International, Inc. nor the names of other
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
 * INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OFLIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"

#include <sys/types.h>
#include <stdarg.h>
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif

#include "manifest.h"

#include "protos.h"
#include "ccconfig.h"

/*
 * Storage classes
 */
#define SNULL		0
#define AUTO		1
#define EXTERN		2
#define STATIC		3
#define REGISTER	4
#define EXTDEF		5
/* #define LABEL	6*/
/* #define ULABEL	7*/
#define MOS		8
#define PARAM		9
#define STNAME		10
#define MOU		11
#define UNAME		12
#define TYPEDEF		13
#define FORTRAN		14
#define ENAME		15
#define MOE		16
#define UFORTRAN 	17
#define USTATIC		18
#define ILABEL		19

	/* field size is ORed in */
#define FIELD		0100
#define FLDSIZ		077
extern	char *scnames(int);

/*
 * Symbol table flags
 */
#define	SNORMAL		0
#define	STAGNAME	01
#define	SLBLNAME	02
#define	SMOSNAME	03
#define	SSTRING		04
#define	NSTYPES		05
#define	SMASK		07

/* #define SSET		00010 */
/* #define SREF		00020 */
#define SNOCREAT	00040	/* don't create a symbol in lookup() */
#define STEMP		00100	/* Allocate symtab from temp or perm mem */
#define	SDYNARRAY	00200	/* symbol is dynamic array on stack */
#define	SINLINE		00400	/* function is of type inline */
#define	STNODE		01000	/* symbol shall be a temporary node */
#define	SASG		04000	/* symbol is assigned to already */
#define	SLOCAL1		010000
#define	SLOCAL2		020000
#define	SLOCAL3		040000

	/* alignment of initialized quantities */
#ifndef AL_INIT
#define	AL_INIT ALINT
#endif

struct rstack;
struct symtab;
union arglist;

/*
 * Dimension/prototype information.
 * 	ddim > 0 holds the dimension of an array.
 *	ddim < 0 is a dynamic array and refers to a tempnode.
 */
union dimfun {
	int	ddim;		/* Dimension of an array */
	union arglist *dfun;	/* Prototype index */
};

/*
 * Struct/union/enum definition.
 * The first element (size) is used for other types as well.
 */
struct suedef {
	int	suesize;	/* Size of the struct */
	struct	symtab *sylnk;	/* the list of elements */
	int	suealign;	/* Alignment of this struct */
};

/*
 * Argument list member info when storing prototypes.
 */
union arglist {
	TWORD type;
	union dimfun *df;
	struct suedef *sue;
};
#define TNULL		INCREF(FARG) /* pointer to FARG -- impossible type */
#define TELLIPSIS 	INCREF(INCREF(FARG))

/*
 * Symbol table definition.
 *
 * The symtab_hdr struct is used to save label info in NAME and ICON nodes.
 */
struct symtab_hdr {
	struct	symtab *h_next;	/* link to other symbols in the same scope */
	int	h_offset;	/* offset or value */
	char	h_sclass;	/* storage class */
	char	h_slevel;	/* scope level */
	short	h_sflags;		/* flags, see below */
};

struct	symtab {
	struct	symtab_hdr hdr;
	char	*sname;		/* Symbol name */
	char	*soname;	/* Written-out name */
	TWORD	stype;		/* type word */
	TWORD	squal;		/* qualifier word */
	union	dimfun *sdf;	/* ptr to the dimension/prototype array */
	struct	suedef *ssue;	/* ptr to the definition table */
};

#define	snext	hdr.h_next
#define	soffset	hdr.h_offset
#define	sclass	hdr.h_sclass
#define	slevel	hdr.h_slevel
#define	sflags	hdr.h_sflags

#define	MKSUE(type)  &btdims[type]
extern struct suedef btdims[];

/*
 * External definitions
 */
struct swents {			/* switch table */
	struct swents *next;	/* Next struct in linked list */
	CONSZ	sval;		/* case value */
	int	slab;		/* associated label */
};
int mygenswitch(int, TWORD, struct swents **, int);

extern	int blevel;
extern	int instruct, got_type;
extern	int oldstyle;

extern	int lineno, nerrors;

extern	char *ftitle;
extern	struct symtab *cftnsp;
extern	int autooff, maxautooff, argoff, strucoff;
extern	int brkflag;

extern	OFFSZ inoff;

extern	int reached;
extern	int isinlining;

extern	int sdebug, idebug, pdebug;

/* various labels */
extern	int brklab;
extern	int contlab;
extern	int flostat;
extern	int retlab;

/* pragma globals */
extern int pragma_allpacked, pragma_packed, pragma_aligned;
extern char *pragma_renamed;

/*
 * Flags used in the (elementary) flow analysis ...
 */
#define FBRK		02
#define FCONT		04
#define FDEF		010
#define FLOOP		020

/*	mark an offset which is undefined */

#define NOOFFSET	(-10201)

/* declarations of various functions */
extern	NODE
	*buildtree(int, NODE *, NODE *r),
	*mkty(unsigned, union dimfun *, struct suedef *),
	*rstruct(char *, int),
	*dclstruct(struct rstack *),
	*strend(int gtype, char *),
	*tymerge(NODE *, NODE *),
	*stref(NODE *),
	*offcon(OFFSZ, TWORD, union dimfun *, struct suedef *),
	*bcon(int),
	*xbcon(CONSZ, struct symtab *, TWORD),
	*bpsize(NODE *),
	*convert(NODE *, int),
	*pconvert(NODE *),
	*oconvert(NODE *),
	*ptmatch(NODE *),
	*tymatch(NODE *),
	*makety(NODE *, TWORD, TWORD, union dimfun *, struct suedef *),
	*block(int, NODE *, NODE *, TWORD, union dimfun *, struct suedef *),
	*doszof(NODE *),
	*talloc(void),
	*optim(NODE *),
	*clocal(NODE *),
	*ccopy(NODE *),
	*tempnode(int, TWORD, union dimfun *, struct suedef *),
	*doacall(NODE *, NODE *);
NODE	*intprom(NODE *);
OFFSZ	tsize(TWORD, union dimfun *, struct suedef *),
	psize(NODE *);
NODE *	typenode(NODE *new);
void	spalloc(NODE *, NODE *, OFFSZ);
char	*exname(char *);
extern struct rstack *rpole;

int oalloc(struct symtab *, int *);
void deflabel(char *);
void gotolabel(char *);
unsigned int esccon(char **);
void inline_start(struct symtab *);
void inline_end(void);
void inline_addarg(struct interpass *);
void inline_ref(struct symtab *);
void inline_prtout(void);
void ftnarg(NODE *);
struct rstack *bstruct(char *, int);
void moedef(char *);
void beginit(struct symtab *);
void simpleinit(struct symtab *, NODE *);
struct symtab *lookup(char *, int);
struct symtab *getsymtab(char *, int);
char *addstring(char *);
char *addname(char *);
void symclear(int);
struct symtab *hide(struct symtab *);
void soumemb(NODE *, char *, int);
int talign(unsigned int, struct suedef *);
void bfcode(struct symtab **, int);
int chkftn(union arglist *, union arglist *);
void branch(int);
void cbranch(NODE *, NODE *);
void extdec(struct symtab *);
void defzero(struct symtab *);
int falloc(struct symtab *, int, int, NODE *);
TWORD ctype(TWORD);  
void ninval(CONSZ, int, NODE *);
void infld(CONSZ, int, CONSZ);
void zbits(CONSZ, int);
void instring(struct symtab *);
void inwstring(struct symtab *);
void plabel(int);
void bjobcode(void);
void ejobcode(int);
void calldec(NODE *, NODE *);
int cisreg(TWORD);
char *tmpsprintf(char *, ...);
char *tmpvsprintf(char *, va_list);
void asginit(NODE *);
void desinit(NODE *);
void endinit(void);
void sspinit(void);
void sspstart(void);
void sspend(void);
void ilbrace(void);
void irbrace(void);
void scalinit(NODE *);
void p1print(char *, ...);
char *copst(int);
int cdope(int);
void myp2tree(NODE *);
void lcommprint(void);
void lcommdel(struct symtab *);
NODE *funcode(NODE *);
struct symtab *enumhd(char *);
NODE *enumdcl(struct symtab *);
NODE *enumref(char *);
CONSZ icons(NODE *);
int mypragma(char **);
void fixdef(struct symtab *);
int cqual(TWORD, TWORD);
void defloc(struct symtab *);
int fldchk(int);
int nncon(NODE *);
void cunput(char);
NODE *nametree(struct symtab *sp);
void *inlalloc(int size);
void pass1_lastchance(struct interpass *);
void fldty(struct symtab *p);

#ifdef GCC_COMPAT
void gcc_init(void);
int gcc_keyword(char *, NODE **);
#endif

#ifdef STABS
void stabs_init(void);
void stabs_file(char *);
void stabs_line(int);
void stabs_rbrac(int);
void stabs_lbrac(int);
void stabs_func(struct symtab *);
void stabs_newsym(struct symtab *);
void stabs_chgsym(struct symtab *);
void stabs_struct(struct symtab *, struct suedef *);
#endif

#ifndef CHARCAST
/* to make character constants into character connstants */
/* this is a macro to defend against cross-compilers, etc. */
#define CHARCAST(x) (char)(x)
#endif

/*
 * C compiler first pass extra defines.
 */
#define	QUALIFIER	(MAXOP+1)
#define	CLASS		(MAXOP+2)
#define	RB		(MAXOP+3)
#define	DOT		(MAXOP+4)
#define	ELLIPSIS	(MAXOP+5)
#define	TYPE		(MAXOP+6)
#define	LB		(MAXOP+7)
#define	COMOP		(MAXOP+8)
#define	QUEST		(MAXOP+9)
#define	COLON		(MAXOP+10)
#define	ANDAND		(MAXOP+11)
#define	OROR		(MAXOP+12)
#define	NOT		(MAXOP+13)
#define	CAST		(MAXOP+14)
/* #define	STRING		(MAXOP+15) */

/* The following must be in the same order as their NOASG counterparts */
#define	PLUSEQ		(MAXOP+16)
#define	MINUSEQ		(MAXOP+17)
#define	DIVEQ		(MAXOP+18)
#define	MODEQ		(MAXOP+19)
#define	MULEQ		(MAXOP+20)
#define	ANDEQ		(MAXOP+21)
#define	OREQ		(MAXOP+22)
#define	EREQ		(MAXOP+23)
#define	LSEQ		(MAXOP+24)
#define	RSEQ		(MAXOP+25)

#define	UNASG		(-(PLUSEQ-PLUS))+

#define INCR		(MAXOP+26)
#define DECR		(MAXOP+27)
/*
 * The following types are only used in pass1.
 */
#define SIGNED		(MAXTYPES+1)
#define BOOL		(MAXTYPES+2)
#define	FCOMPLEX	(MAXTYPES+3)
#define	COMPLEX		(MAXTYPES+4)
#define	LCOMPLEX	(MAXTYPES+5)

#define coptype(o)	(cdope(o)&TYFLG)
#define clogop(o)	(cdope(o)&LOGFLG)
#define casgop(o)	(cdope(o)&ASGFLG)

@


1.10
log
@Updates from master repo.  Can now compile both userland and kernel.
(with some patches...)
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.9 2008/04/11 20:45:52 stefan Exp $	*/
@


1.9
log
@Sync with master repo. Reminded by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 2
d40 1
d42 1
d89 8
a96 8
#define SSET		00010
#define SREF		00020
#define SNOCREAT	00040
#define STEMP		00100
#define	SDYNARRAY	00200
#define	SINLINE		00400
#define	STNODE		01000
#define	SASG		04000
a198 4
/* 	tunnel to buildtree for name id's */

extern	struct symtab *spname;

d208 1
a208 1
extern int pragma_packed, pragma_aligned;
d225 1
a225 1
	*buildtree(int, NODE *l, NODE *r),
d230 1
a230 1
	*tymerge(NODE *typ, NODE *idp),
d242 1
a242 1
	*block(int, NODE *, NODE *r, TWORD, union dimfun *, struct suedef *),
d248 2
a249 2
	*tempnode(int, TWORD type, union dimfun *df, struct suedef *sue),
	*doacall(NODE *f, NODE *a);
d258 1
a258 1
int oalloc(struct symtab *p, int *poff);
d261 2
a262 2
unsigned int esccon(char **sptr);
void inline_start(struct symtab *sp);
d265 1
a265 1
void inline_ref(struct symtab *sp);
d272 2
a273 2
struct symtab *lookup(char *name, int s);
struct symtab *getsymtab(char *name, int flags);
d276 2
a277 3
char *newstring(char *, int len);
void symclear(int level);
struct symtab *hide(struct symtab *p);
d283 1
a283 1
void cbranch(NODE *p, NODE *q);
d286 1
a286 1
int falloc(struct symtab *p, int w, int new, NODE *pty);
d288 6
a293 6
void ninval(CONSZ off, int fsz, NODE *);
void infld(CONSZ off, int fsz, CONSZ);
void zbits(CONSZ off, int fsz);
void instring(struct symtab *sp);
void inwstring(struct symtab *sp);
void plabel(int lab);
d298 2
a299 2
char *tmpsprintf(char *fmt, ...);
char *tmpvsprintf(char *fmt, va_list ap);
d303 3
d308 2
a309 2
void scalinit(NODE *p);
void p1print(char *fmt, ...);
d322 1
a322 1
int cqual(TWORD t, TWORD q);
d324 1
a324 1
int fldchk(int sz);
d326 5
a330 2
void cunput(char c);

d346 1
a346 1
void stabs_struct(struct symtab *p, struct suedef *sue);
d395 3
a397 1

@


1.8
log
@Large update from master repo:
> Pragma not position dependent
> Accept declarations anywhere in the C code.
> Just typing "a;" is not allowed anymore when declaring variables.
> Change to new initializer handling.
> Use symtab entry, not name to identify inline functions.
> Remove "suse" symtab element and replace it with output name.
> Print out strings directly, do not store them until end.
> Make prtdcon() target dependent to allow for float constants in code.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.7 2008/01/07 21:04:47 stefan Exp $	*/
d93 3
d122 1
a122 1
	struct	symtab **suelem;/* points to the list of elements */
a211 6
 * Flags used in structures/unions
 */
#define INSTRUCT	02
#define INUNION		04

/*
d256 1
d279 1
a306 1
int ftoint(NODE *, CONSZ **);
d322 4
@


1.7
log
@Pull from master repo:
Use proper type for ix, code and match in lookup(). ok ragge@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.6 2007/12/22 22:56:31 stefan Exp $	*/
a91 3
#ifdef GCC_COMPAT
#define	SRENAME		02000	/* Node is renamed */
#endif
a93 4
#ifndef FIXDEF
#define FIXDEF(p)
#endif

d149 2
a150 1
	char	*sname;
a154 1
	int	suse;		/* line number of last use of the variable */
a185 1
extern	int lastloc;
d204 4
d231 2
a232 3
	*dclstruct(struct rstack *, int),
	*strend(char *),
	*wstrend(char *),
d237 1
a250 1
	*btsize(TWORD, union dimfun *, struct suedef *),
a261 2
void deflab1(int);
void setloc1(int);
d264 1
a264 1
void inline_start(char *name);
d267 1
a267 1
void inline_ref(char *);
a279 1
void schedremove(struct symtab *p);
d287 1
a287 2
void commdec(struct symtab *);
void lcommdec(struct symtab *);
d293 2
a294 3
void indata(CONSZ, int);
void instring(char *);
void defnam(struct symtab *);
d320 4
a327 2
void gcc_rename(struct symtab *sp, char *newname);
char *gcc_findname(struct symtab *sp);
@


1.6
log
@Sync with main repo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.5 2007/11/22 15:06:43 stefan Exp $	*/
d38 1
@


1.5
log
@Pull from master repo:

Put the genswitch() code that is found in most backends into
the MI part. The backend version is renamed to mygenswitch()
and can provide improved translations for switch statements.

Improved implementation of the switch constraints/semantics
described in the standard.

ok ragge@@, otto@@

With help and comments from ragge and gmcgarry
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.4 2007/11/18 17:39:55 ragge Exp $	*/
d328 1
@


1.4
log
@(Large) update from master repo:
> Use structure assignment instead of calling memcpy directly in struct return.
> Rewrite enum handling.
> In C99 enums are treated like INTs so convert them early to int.
> Move the enum tag handling out of defid(), tags are in their own namespace.
> This will be done with struct/union tags also.
> Comment out enum types.
> Remove ENUMTY/MOETY from target code.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.3 2007/11/16 09:00:12 otto Exp $	*/
d180 1
a180 1
void genswitch(int, struct swents **, int);
d257 1
@


1.3
log
@sync tree with master repo; Nov 16 2007
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.127 2007/11/12 18:56:25 ragge Exp $	*/
d137 2
a138 2
#define TNULL		INCREF(MOETY) /* pointer to MOETY -- impossible type */
#define TELLIPSIS 	INCREF(INCREF(MOETY))
d324 3
@


1.2
log
@Merge from ragge's repo:
Add initial support for packed/aligned/rename pragmas.
Still missing:  Support for architectures with strict alignment.
TODO: Cleanup the rename stuff so that it's not depending on gcc
compat.
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.1 2007/10/07 17:58:51 otto Exp $	*/
d323 1
@


1.1
log
@reorg pcc tree; requested by and ok deraadt@@; ok ragge@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pass1.h,v 1.2 2007/09/15 22:04:38 ray Exp $	*/
d234 1
a234 1
	*dclstruct(struct rstack *),
@

