head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.7
date	2012.04.12.11.51.12;	author pirofti;	state dead;
branches;
next	1.6;

1.6
date	2009.12.17.17.52.54;	author ragge;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.17.18.40.13;	author ragge;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.21.18.58.02;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.12.18.14.14;	author stefan;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.12.07.22.44;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.07.17.58.51;	author otto;	state Exp;
branches;
next	;


desc
@@


1.7
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*	$OpenBSD: cpy.y,v 1.6 2009/12/17 17:52:54 ragge Exp $	*/

/*
 * Copyright (c) 2004 Anders Magnusson (ragge@@ludd.luth.se).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright(C) Caldera International Inc. 2001-2002. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code and documentation must retain the above
 * copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 * 	This product includes software developed or owned by Caldera
 *	International, Inc.
 * Neither the name of Caldera International, Inc. nor the names of other
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
 * INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OFLIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

%{

#include "cpp.h"

void yyerror(char *);
int yylex(void);
int setd(int l, int r);

#define	EVALUNARY(tok, l, r) l.nd_val = tok r.nd_val; l.op = r.op
#define	EVALBIN(tok, d, l, r)	\
	d.op = setd(l.op, r.op); d.nd_val = l.nd_val tok r.nd_val
#define	EVALUBIN(tok, d, l, r, t)				\
	d.op = setd(l.op, r.op);				\
	if (d.op == NUMBER) d.nd_val = l.nd_val tok r.nd_val;	\
	else d.nd_uval = l.nd_uval tok r.nd_uval;		\
	if (t && d.op) d.op = NUMBER
#define	XEVALUBIN(tok, d, l, r)					\
	if (r.nd_val) { EVALUBIN(tok, d, l, r, 0); } else d.op = 0
%}

%term stop
%term EQ NE LE GE LS RS
%term ANDAND OROR IDENT NUMBER UNUMBER DEFINED
/*
 * The following terminals are not used in the yacc code.
 */
%term STRING WSPACE CMNT

%left ','
%right '?' ':'
%left OROR
%left ANDAND
%left '|' '^'
%left '&'
%binary EQ NE
%binary '<' '>' LE GE
%left LS RS
%left '+' '-'
%left '*' '/' '%'
%right '!' '~' UMINUS
%left '('

%union {
	struct nd node;
}

%type <node>	term e NUMBER UNUMBER

%%
S:	e '\n'	{ 
		if ($1.op == 0)
			error("division by zero");
		return $1.nd_val;
	}

e:	  e '*' e
		{ EVALUBIN(*, $$, $1, $3, 0); }
	| e '/' e
		{ XEVALUBIN(/, $$, $1, $3); }
	| e '%' e
		{ XEVALUBIN(%, $$, $1, $3); }
	| e '+' e
		{ EVALBIN(+, $$, $1, $3); }
	| e '-' e
		{ EVALBIN(-, $$, $1, $3); }
	| e LS e
		{ EVALBIN(<<, $$, $1, $3); }
	| e RS e
		{ EVALUBIN(>>, $$, $1, $3, 0); }
	| e '<' e
		{ EVALUBIN(<, $$, $1, $3, 1); }
	| e '>' e
		{ EVALUBIN(>, $$, $1, $3, 1); }
	| e LE e
		{ EVALUBIN(<=, $$, $1, $3, 1); }
	| e GE e
		{ EVALUBIN(>=, $$, $1, $3, 1); }
	| e EQ e
		{ EVALUBIN(==, $$, $1, $3, 1); }
	| e NE e
		{ EVALUBIN(!=, $$, $1, $3, 1); }
	| e '&' e
		{ EVALBIN(&, $$, $1, $3); }
	| e '^' e
		{ EVALBIN(^, $$, $1, $3); }
	| e '|' e
		{ EVALBIN(|, $$, $1, $3); }
	| e ANDAND e {
		$$ = $1;
		if ($1.nd_val) {
			$$.op = setd($1.op, $3.op);
			$$.nd_val = ($3.nd_val != 0);
		}
		if ($$.op == UNUMBER) $$.op = NUMBER;
	}
	| e OROR e {
		if ($1.nd_val != 0) {
			$$.nd_val = ($1.nd_val != 0);
			$$.op = $1.op;
		} else {
			$$.nd_val = ($3.nd_val != 0);
			$$.op = setd($1.op, $3.op);
		}
		if ($$.op == UNUMBER) $$.op = NUMBER;
	}
	| e '?' e ':' e {
		if ($1.op == 0)
			$$ = $1;
		else if ($1.nd_val)
			$$ = $3;
		else
			$$ = $5;
	}
	| e ',' e {
		$$.op = setd($1.op, $3.op);
		$$.nd_val = $3.nd_val;
		if ($$.op) $$.op =  $3.op;
	}
	| term
		{$$ = $1;}
term:
	  '-' term %prec UMINUS
		{ EVALUNARY(-, $$, $2); }
	| '+' term %prec UMINUS
		{$$ = $2;}
	| '!' term
		{ $$.nd_val = ! $2.nd_val; $$.op = $2.op ? NUMBER : 0; }
	| '~' term
		{ EVALUNARY(~, $$, $2); }
	| '(' e ')'
		{$$ = $2;}
	| DEFINED '(' NUMBER ')'
		{$$= $3;}
	| DEFINED NUMBER
		{$$ = $2;}
	| NUMBER
		{$$ = $1;}
%%

void
yyerror(char *err)
{
	error(err);
}

/*
 * Set return type of an expression.
 */
int
setd(int l, int r)
{
	if (!l || !r)
		return 0; /* div by zero involved */
	if (l == UNUMBER || r == UNUMBER)
		return UNUMBER;
	return NUMBER;
}

@


1.6
log
@Update from master repo.  Many bugfixes + significant speedyps.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpy.y,v 1.5 2008/08/17 18:40:13 ragge Exp $	*/
@


1.5
log
@Updates from master repo.  Can now compile both userland and kernel.
(with some patches...)
@
text
@d1 1
a1 1
/*	$OpenBSD: cpy.y,v 1.4 2007/10/21 18:58:02 otto Exp $	*/
d86 1
a86 1
%term ANDAND OROR IDENT NUMBER UNUMBER
d90 1
a90 1
%term STRING FPOINT WSPACE VA_ARGS CONCAT MKSTR ELLIPS CMNT
d194 4
@


1.4
log
@Pull from ragge's repo:
More fixes to cpp arithmetic, sanitychecked by otto and stefan.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpy.y,v 1.15 2007/10/18 20:41:41 ragge Exp $	*/
d90 1
a90 1
%term STRING FPOINT WSPACE VA_ARGS CONCAT MKSTR ELLIPS
@


1.3
log
@From master repo:
> Add zero checks when dividing or taking modulo. ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpy.y,v 1.2 2007/10/12 07:22:44 otto Exp $	*/
a64 3
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
d70 12
a81 1
struct val eval(struct nd *);
d86 1
a86 1
%term ANDAND OROR IDENT NUMBER
a92 1
%right '='
d104 1
a104 1
%left '(' '.'
d107 1
a107 2
	struct val val;
	struct nd *node;
d110 1
a110 2
%type <val>	NUMBER
%type <node>	term e
d113 5
a117 2
S:	e '\n'	{ return(eval($1).v.val != 0);}

d120 1
a120 1
		{$$ = mknode('*', $1, $3);}
d122 1
a122 1
		{$$ = mknode('/', $1, $3);}
d124 1
a124 1
		{$$ = mknode('%', $1, $3);}
d126 1
a126 1
		{$$ = mknode('+', $1, $3);}
d128 1
a128 1
		{$$ = mknode('-', $1, $3);}
d130 1
a130 1
		{$$ = mknode(LS, $1, $3);}
d132 1
a132 1
		{$$ = mknode(RS, $1, $3);}
d134 1
a134 1
		{$$ = mknode('<', $1, $3);}
d136 1
a136 1
		{$$ = mknode('>', $1, $3);}
d138 1
a138 1
		{$$ = mknode(LE, $1, $3);}
d140 1
a140 1
		{$$ = mknode(GE, $1, $3);}
d142 1
a142 1
		{$$ = mknode(EQ, $1, $3);}
d144 1
a144 1
		{$$ = mknode(NE, $1, $3);}
d146 1
a146 1
		{$$ = mknode('&', $1, $3);}
d148 1
a148 1
		{$$ = mknode('^', $1, $3);}
d150 19
a168 5
		{$$ = mknode('|', $1, $3);}
	| e ANDAND e
		{$$ = mknode(ANDAND, $1, $3);}
	| e OROR e
		{$$ = mknode(OROR, $1, $3);}
d170 12
a181 4
		struct nd *n = mknode(':', $3, $5);
		$$ = mknode('?', $1, n);}
	| e ',' e
		{$$ = mknode(',', $1, $3);}
d186 1
a186 1
		{$$ = mknode(UMINUS, $2, NULL);}
d190 1
a190 1
		{$$ = mknode('!', $2, NULL);}
d192 1
a192 1
		{$$ = mknode('~', $2, NULL);}
d196 1
a196 1
		{$$= mknum($1);}
d205 5
a209 2
struct nd *
mknode(int op, struct nd *left, struct nd *right)
d211 5
a215 9
	struct nd *r = malloc(sizeof(*r));
	if (r == NULL) 
		error("out of mem");

	r->op = op;
	r->nd_left = left;
	r->nd_right = right;

	return r;
a217 121
struct nd *
mknum(struct val val)
{
	struct nd *r = malloc(sizeof(*r));
	if (r == NULL) 
		error("out of mem");

	r->op = NUMBER;
	r->n.v = val;
	return r;
}

#define EVALUNARY(tok, op, t, x)				\
	case (tok): if (t) ret.v.uval = op x.v.uval;		\
		else ret.v.val = op x.v.val;			\
		ret.type = t;					\
		break;

#define EVALBIN(tok, op, t, x, y, r) 				\
	case (tok): if (t) ret.v.uval = x.v.uval op y.v.uval;	\
		else ret.v.val = x.v.val op y.v.val;		\
		ret.type = r;					\
		break;

struct val
eval(struct nd *tree)
{
	struct val ret, l, r;
	int t;

	switch (tree->op) {
	case NUMBER:
		ret.type = tree->nd_type;
		if (ret.type)
			ret.v.uval = tree->nd_uval;
		else
			ret.v.val = tree->nd_val;
		goto out;
	case LS:
	case RS:
		r = eval(tree->nd_right);
		/* FALLTHROUGH */
	case UMINUS:
	case '~':
	case '!':
		l = eval(tree->nd_left);
		switch (tree->op) {
			EVALBIN(LS, <<, l.type, l, r, l.type);
			EVALBIN(RS, >>, l.type, l, r, l.type);
			EVALUNARY(UMINUS, -, l.type, l);
			EVALUNARY('~', ~, l.type, l);
			EVALUNARY('!', !, 0, l);
		}
		goto out;
	case '?':
		l = eval(tree->nd_left);
		// XXX mem leak
		if (l.v.val)
			ret = eval(tree->nd_right->nd_left);
		else
			ret = eval(tree->nd_right->nd_right);
		goto out;
	case OROR:
		l = eval(tree->nd_left);
		// XXX mem leak
		if (l.v.val)
			ret = l;
		else
			ret = eval(tree->nd_right);
		ret.type = 0;
		goto out;
	case ANDAND:
		l = eval(tree->nd_left);
		// XXX mem leak
		if (l.v.val)
			ret = eval(tree->nd_right);
		else
			ret = l;
		ret.type = 0;
		goto out;
	case ',':
		// XXX mem leak
		ret = eval(tree->nd_right);
		goto out;
	}

	l = eval(tree->nd_left);
	r = eval(tree->nd_right);
	t = l.type || r.type;
	if (tree->op == '/' || tree->op == '%') {
		if ((t && r.v.uval == 0) || (!t && r.v.val == 0)) {
			warning(tree->op == '/' ? "division by zero" :
		                "modulus by zero");
			if (t)
				ret.v.uval = 0;
			else
				ret.v.val = 0;
			ret.type = t;
			goto out;
		}
	}
	switch (tree->op) {
		EVALBIN(EQ, ==, t, l, r, 0);
		EVALBIN(NE, !=, t, l, r, 0);
		EVALBIN('<', <, t, l, r, 0);
		EVALBIN('>', >, t, l, r, 0);
		EVALBIN(GE, >=, t, l, r, 0);
		EVALBIN(LE, <=, t, l, r, 0);
		EVALBIN('+', +, t, l, r, t);
		EVALBIN('-', -, t, l, r, t);
		EVALBIN('*', *, t, l, r, t);
		EVALBIN('/', /, t, l, r, t);
		EVALBIN('%', %, t, l, r, t);
		EVALBIN('&', &, t, l, r, t);
		EVALBIN('|', |, t, l, r, t);
		EVALBIN('^', ^, t, l, r, t);
	}
out:
	free(tree);
	return ret;
}
@


1.2
log
@rewrite of constant expression evaluation; taking into account
signed vs unsigned and shortcutting of && and ||
ok ragge@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpy.y,v 1.1 2007/10/07 17:58:51 otto Exp $	*/
d278 12
a299 1
		// XXX check /,% by zero
@


1.1
log
@reorg pcc tree; requested by and ok deraadt@@; ok ragge@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpy.y,v 1.2 2007/09/15 22:04:39 ray Exp $	*/
d68 3
d73 1
d100 2
a101 1
	long long val;
d104 2
a105 1
%type <val> term NUMBER e
d108 1
a108 1
S:	e '\n'	{ return($1 != 0);}
d112 1
a112 1
		{$$ = $1 * $3;}
d114 1
a114 1
		{$$ = $1 / $3;}
d116 1
a116 1
		{$$ = $1 % $3;}
d118 1
a118 1
		{$$ = $1 + $3;}
d120 1
a120 1
		{$$ = $1 - $3;}
d122 1
a122 1
		{$$ = $1 << $3;}
d124 1
a124 1
		{$$ = $1 >> $3;}
d126 1
a126 1
		{$$ = $1 < $3;}
d128 1
a128 1
		{$$ = $1 > $3;}
d130 1
a130 1
		{$$ = $1 <= $3;}
d132 1
a132 1
		{$$ = $1 >= $3;}
d134 1
a134 1
		{$$ = $1 == $3;}
d136 1
a136 1
		{$$ = $1 != $3;}
d138 1
a138 1
		{$$ = $1 & $3;}
d140 1
a140 1
		{$$ = $1 ^ $3;}
d142 1
a142 1
		{$$ = $1 | $3;}
d144 1
a144 1
		{$$ = $1 && $3;}
d146 4
a149 3
		{$$ = $1 || $3;}
	| e '?' e ':' e
		{$$ = $1 ? $3 : $5;}
d151 1
a151 1
		{$$ = $3;}
d156 3
a158 1
		{$$ = -$2;}
d160 1
a160 1
		{$$ = !$2;}
d162 1
a162 1
		{$$ = ~$2;}
d166 1
a166 1
		{$$= $1;}
a168 2
#include "cpp.h"

d173 125
@

