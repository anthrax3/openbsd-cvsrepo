head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.14
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.8
date	2012.04.12.11.51.13;	author pirofti;	state dead;
branches;
next	1.7;

1.7
date	2008.08.17.18.40.13;	author ragge;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.22.22.56.31;	author stefan;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.09.18.56.17;	author ragge;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.17.12.00.37;	author ragge;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.29.16.38.55;	author ragge;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.27.14.19.18;	author ragge;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.07.17.58.52;	author otto;	state Exp;
branches;
next	;


desc
@@


1.8
log
@tedu(tm) pcc.

Message sent. Okay deraadt@@.
@
text
@/*	$OpenBSD: local2.c,v 1.7 2008/08/17 18:40:13 ragge Exp $	*/
/*
 * Copyright(C) Caldera International Inc. 2001-2002. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code and documentation must retain the above
 * copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditionsand the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 * 	This product includes software developed or owned by Caldera
 *	International, Inc.
 * Neither the name of Caldera International, Inc. nor the names of other
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * USE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENSE BY CALDERA
 * INTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL CALDERA INTERNATIONAL, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OFLIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

# include "pass2.h"
# include "ctype.h"
/* a lot of the machine dependent parts of the second pass */

static void prtype(NODE *n);
static void acon(NODE *p);

/*
 * Print out the prolog assembler.
 * addto and regoff are already calculated.
 */
void
prologue(struct interpass_prolog *ipp)
{
	if (ipp->ipp_vis)
		printf("	.globl %s\n", ipp->ipp_name);
	printf("	.align 4\n");
	printf("%s:\n", ipp->ipp_name);
	printf("	.word 0x%x\n", ipp->ipp_regs);
	if (p2maxautooff)
		printf("	subl2 $%d,%%sp\n", p2maxautooff);
}

/*
 * Called after all instructions in a function are emitted.
 * Generates code for epilog here.
 */
void
eoftn(struct interpass_prolog *ipp)
{
	if (ipp->ipp_ip.ip_lbl == 0)
		return; /* no code needs to be generated */
	printf("	ret\n");
}

struct hoptab { int opmask; char * opstring; } ioptab[] = {

	{ PLUS,	"add", },
	{ MINUS,	"sub", },
	{ MUL,	"mul", },
	{ DIV,	"div", },
	{ OR,	"bis", },
	{ ER,	"xor", },
	{ AND,	"bic", },
	{ -1, ""     },
};

void
hopcode( f, o ){
	/* output the appropriate string from the above table */

	register struct hoptab *q;

	for( q = ioptab;  q->opmask>=0; ++q ){
		if( q->opmask == o ){
			printf( "%s", q->opstring );
/* tbl
			if( f == 'F' ) printf( "e" );
			else if( f == 'D' ) printf( "d" );
   tbl */
/* tbl */
			switch( f ) {
				case 'L':
				case 'W':
				case 'B':
				case 'D':
				case 'F':
					printf("%c", tolower(f));
					break;

				}
/* tbl */
			return;
			}
		}
	cerror( "no hoptab for %s", opst[o] );
	}

char *
rnames[] = {  /* keyed to register number tokens */

	"r0", "r1", "r2", "r3", "r4", "r5",
	"r6", "r7", "r8", "r9", "r10", "r11",
	"ap", "fp", "sp", "pc",
	/* The concatenated regs has the name of the lowest */
	"r0", "r1", "r2", "r3", "r4", "r5",
	"r6", "r7", "r8", "r9", "r10"
	};

int
tlen(p) NODE *p;
{
	switch(p->n_type) {
		case CHAR:
		case UCHAR:
			return(1);

		case SHORT:
		case USHORT:
			return(2);

		case DOUBLE:
		case LDOUBLE:
		case LONGLONG:
		case ULONGLONG:
			return(8);

		default:
			return(4);
		}
}

static int
mixtypes(NODE *p, NODE *q)
{
	TWORD tp, tq;

	tp = p->n_type;
	tq = q->n_type;

	return( (tp==FLOAT || tp==DOUBLE) !=
		(tq==FLOAT || tq==DOUBLE) );
}

void
prtype(NODE *n)
{
	switch (n->n_type)
		{
		case DOUBLE:
			printf("d");
			return;

		case FLOAT:
			printf("f");
			return;

		case LONG:
		case ULONG:
		case INT:
		case UNSIGNED:
			printf("l");
			return;

		case SHORT:
		case USHORT:
			printf("w");
			return;

		case CHAR:
		case UCHAR:
			printf("b");
			return;

		default:
			if ( !ISPTR( n->n_type ) ) cerror("zzzcode- bad type");
			else {
				printf("l");
				return;
				}
		}
}

void
zzzcode( p, c ) register NODE *p; {
	int m;
	int val;
	switch( c ){

	case 'N':  /* logical ops, turned into 0-1 */
		/* use register given by register 1 */
		cbgen( 0, m=getlab());
		deflab( p->n_label );
		printf( "	clrl	%s\n", rnames[getlr( p, '1' )->n_rval] );
		deflab( m );
		return;

	case 'A':
		{
		register NODE *l, *r;

		if (xdebug) e2print(p, 0, &val, &val);
		r = getlr(p, 'R');
		if (optype(p->n_op) == LTYPE || p->n_op == UMUL) {
			l = resc;
			l->n_type = (r->n_type==FLOAT || r->n_type==DOUBLE ? DOUBLE : INT);
		} else
			l = getlr(p, 'L');
		if (r->n_op == ICON  && r->n_name[0] == '\0') {
			if (r->n_lval == 0) {
				printf("clr");
				prtype(l);
				printf("	");
				adrput(stdout, l);
				return;
			}
			if (r->n_lval < 0 && r->n_lval >= -63) {
				printf("mneg");
				prtype(l);
				r->n_lval = -r->n_lval;
				goto ops;
			}
			r->n_type = (r->n_lval < 0 ?
					(r->n_lval >= -128 ? CHAR
					: (r->n_lval >= -32768 ? SHORT
					: INT )) : r->n_type);
			r->n_type = (r->n_lval >= 0 ?
					(r->n_lval <= 63 ? INT
					: ( r->n_lval <= 127 ? CHAR
					: (r->n_lval <= 255 ? UCHAR
					: (r->n_lval <= 32767 ? SHORT
					: (r->n_lval <= 65535 ? USHORT
					: INT ))))) : r->n_type );
			}
		if (l->n_op == REG && l->n_type != FLOAT && l->n_type != DOUBLE)
			l->n_type = INT;
		if (!mixtypes(l,r))
			{
			if (tlen(l) == tlen(r))
				{
				printf("mov");
				prtype(l);
				goto ops;
				}
			else if (tlen(l) > tlen(r) && ISUNSIGNED(r->n_type))
				{
				printf("movz");
				}
			else
				{
				printf("cvt");
				}
			}
		else
			{
			printf("cvt");
			}
		prtype(r);
		prtype(l);
	ops:
		printf("	");
		adrput(stdout, r);
		printf(",");
		adrput(stdout, l);
		return;
		}

	case 'C':	/* num words pushed on arg stack */
		if (p->n_op == STCALL || p->n_op == USTCALL)
			p->n_qual++;
		printf("$%d", p->n_qual);
		break;

	case 'D':	/* INCR and DECR */
		zzzcode(p->n_left, 'A');
		printf("\n	");

#if 0
	case 'E':	/* INCR and DECR, FOREFF */
		if (p->n_right->n_lval == 1)
			{
			printf("%s", (p->n_op == INCR ? "inc" : "dec") );
			prtype(p->n_left);
			printf("	");
			adrput(stdout, p->n_left);
			return;
			}
		printf("%s", (p->n_op == INCR ? "add" : "sub") );
		prtype(p->n_left);
		printf("2	");
		adrput(stdout, p->n_right);
		printf(",");
		adrput(p->n_left);
		return;
#endif

	case 'F':	/* register type of right operand */
		{
		register NODE *n;
		extern int xdebug;
		register int ty;

		n = getlr( p, 'R' );
		ty = n->n_type;

		if (xdebug) printf("->%d<-", ty);

		if ( ty==DOUBLE) printf("d");
		else if ( ty==FLOAT ) printf("f");
		else printf("l");
		return;
		}

	case 'J': /* jump or ret? */
		{
			extern struct interpass_prolog *epp;
			struct interpass *ip =
			    DLIST_PREV((struct interpass *)epp, qelem);
			if (ip->type != IP_DEFLAB ||
			    ip->ip_lbl != getlr(p, 'L')->n_lval)
				expand(p, FOREFF, "jbr	LL");
			else
				printf("ret");
		}
		break;

	case 'L':	/* type of left operand */
	case 'R':	/* type of right operand */
		{
		register NODE *n;
		extern int xdebug;

		n = getlr ( p, c);
		if (xdebug) printf("->%d<-", n->n_type);

		prtype(n);
		return;
		}

	case 'Z':	/* complement mask for bit instr */
		printf("$%Ld", ~p->n_right->n_lval);
		return;

	case 'U':	/* 32 - n, for unsigned right shifts */
		printf("$" CONFMT, 32 - p->n_right->n_lval );
		return;

	case 'T':	/* rounded structure length for arguments */
		{
		int size;

		size = p->n_stsize;
		SETOFF( size, 4);
		printf("$%d", size);
		return;
		}

	case 'S':  /* structure assignment */
		{
			register NODE *l, *r;
			register int size;

			l = r = NULL; /* XXX gcc */
			if( p->n_op == STASG ){
				l = p->n_left;
				r = p->n_right;

				}
			else if( p->n_op == STARG ){  /* store an arg into a temporary */
				l = getlr( p, '3' );
				r = p->n_left;
				}
			else cerror( "STASG bad" );

			if( r->n_op == ICON ) r->n_op = NAME;
			else if( r->n_op == REG ) r->n_op = OREG;
			else if( r->n_op != OREG ) cerror( "STASG-r" );

			size = p->n_stsize;

			if( size <= 0 || size > 65535 )
				cerror("structure size <0=0 or >65535");

			switch(size) {
				case 1:
					printf("	movb	");
					break;
				case 2:
					printf("	movw	");
					break;
				case 4:
					printf("	movl	");
					break;
				case 8:
					printf("	movq	");
					break;
				default:
					printf("	movc3	$%d,", size);
					break;
			}
			adrput(stdout, r);
			printf(",");
			adrput(stdout, l);
			printf("\n");

			if( r->n_op == NAME ) r->n_op = ICON;
			else if( r->n_op == OREG ) r->n_op = REG;

			}
		break;

	default:
		comperr("illegal zzzcode '%c'", c);
		}
	}

void
rmove( int rt,int  rs, TWORD t ){
	printf( "	%s	%s,%s\n",
		(t==FLOAT ? "movf" : (t==DOUBLE ? "movd" : "movl")),
		rnames[rs], rnames[rt] );
	}

#if 0
setregs(){ /* set up temporary registers */
	fregs = 6;	/* tbl- 6 free regs on VAX (0-5) */
	;
	}

szty(t){ /* size, in registers, needed to hold thing of type t */
	return( (t==DOUBLE||t==FLOAT) ? 2 : 1 );
	}
#endif

int
rewfld( p ) NODE *p; {
	return(1);
	}

#if 0
callreg(p) NODE *p; {
	return( R0 );
	}

base( p ) register NODE *p; {
	register int o = p->op;

	if( (o==ICON && p->name[0] != '\0')) return( 100 ); /* ie no base reg */
	if( o==REG ) return( p->rval );
    if( (o==PLUS || o==MINUS) && p->left->op == REG && p->right->op==ICON)
		return( p->left->rval );
    if( o==OREG && !R2TEST(p->rval) && (p->type==INT || p->type==UNSIGNED || ISPTR(p->type)) )
		return( p->rval + 0200*1 );
	if( o==INCR && p->left->op==REG ) return( p->left->rval + 0200*2 );
	if( o==ASG MINUS && p->left->op==REG) return( p->left->rval + 0200*4 );
	if( o==UNARY MUL && p->left->op==INCR && p->left->left->op==REG
	  && (p->type==INT || p->type==UNSIGNED || ISPTR(p->type)) )
		return( p->left->left->rval + 0200*(1+2) );
	return( -1 );
	}

offset( p, tyl ) register NODE *p; int tyl; {

	if( tyl==1 && p->op==REG && (p->type==INT || p->type==UNSIGNED) ) return( p->rval );
	if( (p->op==LS && p->left->op==REG && (p->left->type==INT || p->left->type==UNSIGNED) &&
	      (p->right->op==ICON && p->right->name[0]=='\0')
	      && (1<<p->right->lval)==tyl))
		return( p->left->rval );
	return( -1 );
	}
#endif

#if 0
void
makeor2( p, q, b, o) register NODE *p, *q; register int b, o; {
	register NODE *t;
	NODE *f;

	p->n_op = OREG;
	f = p->n_left; 	/* have to free this subtree later */

	/* init base */
	switch (q->n_op) {
		case ICON:
		case REG:
		case OREG:
			t = q;
			break;

		case MINUS:
			q->n_right->n_lval = -q->n_right->n_lval;
		case PLUS:
			t = q->n_right;
			break;

		case UMUL:
			t = q->n_left->n_left;
			break;

		default:
			cerror("illegal makeor2");
			t = NULL; /* XXX gcc */
	}

	p->n_lval = t->n_lval;
	p->n_name = t->n_name;

	/* init offset */
	p->n_rval = R2PACK( (b & 0177), o, (b>>7) );

	tfree(f);
	return;
	}

int
canaddr( p ) NODE *p; {
	register int o = p->n_op;

	if( o==NAME || o==REG || o==ICON || o==OREG || (o==UMUL && shumul(p->n_left)) ) return(1);
	return(0);
	}

shltype( o, p ) register NODE *p; {
	return( o== REG || o == NAME || o == ICON || o == OREG || ( o==UMUL && shumul(p->n_left)) );
	}
#endif

int
fldexpand(NODE *p, int cookie, char **cp)
{
	return 0;
}

int
flshape( p ) register NODE *p; {
	return( p->n_op == REG || p->n_op == NAME || p->n_op == ICON ||
		(p->n_op == OREG && (!R2TEST(p->n_rval) || tlen(p) == 1)) );
	}

int
shtemp( p ) register NODE *p; {
	if( p->n_op == STARG ) p = p->n_left;
	return( p->n_op==NAME || p->n_op ==ICON || p->n_op == OREG || (p->n_op==UMUL && shumul(p->n_left)) );
	}

int
shumul( p ) register NODE *p; {
	register int o;
	extern int xdebug;

	if (xdebug) {
		 printf("\nshumul:op=%d,lop=%d,rop=%d", p->n_op, p->n_left->n_op, p->n_right->n_op);
		printf(" prname=%s,plty=%d, prlval=%lld\n", p->n_right->n_name, p->n_left->n_type, p->n_right->n_lval);
		}


	o = p->n_op;
	if( o == NAME || (o == OREG && !R2TEST(p->n_rval)) || o == ICON ) return( STARNM );

#ifdef notyet
	if( ( o == INCR || o == ASG MINUS ) &&
	    ( p->n_left->n_op == REG && p->n_right->n_op == ICON ) &&
	    p->n_right->n_name[0] == '\0' )
		{
		switch (p->n_left->n_type)
			{
			case CHAR|PTR:
			case UCHAR|PTR:
				o = 1;
				break;

			case SHORT|PTR:
			case USHORT|PTR:
				o = 2;
				break;

			case INT|PTR:
			case UNSIGNED|PTR:
			case LONG|PTR:
			case ULONG|PTR:
			case FLOAT|PTR:
				o = 4;
				break;

			case DOUBLE|PTR:
				o = 8;
				break;

			default:
				if ( ISPTR(p->n_left->n_type) ) {
					o = 4;
					break;
					}
				else return(0);
			}
		return( p->n_right->n_lval == o ? STARREG : 0);
		}
#endif

	return( 0 );
	}

void
adrcon( val ) CONSZ val; {
	printf( "$" );
	printf( CONFMT, val );
	}

void
conput(FILE *fp, NODE *p)
{
	switch( p->n_op ){

	case ICON:
		acon( p );
		return;

	case REG:
		printf( "%s", rnames[p->n_rval] );
		return;

	default:
		cerror( "illegal conput" );
		}
	}

void
insput( p ) register NODE *p; {
	cerror( "insput" );
	}

void
upput( p , size) register NODE *p; {
	cerror( "upput" );
	}

void
adrput(FILE *fp, NODE *p)
{
	register int r;
	/* output an address, with offsets, from p */

	if( p->n_op == FLD ){
		p = p->n_left;
		}
	switch( p->n_op ){

	case NAME:
		acon( p );
		return;

	case ICON:
		/* addressable value of the constant */
		if (p->n_name[0] == '\0') /* uses xxxab */
			printf("$");
		acon(p);
		return;

	case REG:
		printf( "%s", rnames[p->n_rval] );
		return;

	case OREG:
		r = p->n_rval;
		if( R2TEST(r) ){ /* double indexing */
			register int flags;

			flags = R2UPK3(r);
			if( flags & 1 ) printf("*");
			if( flags & 4 ) printf("-");
			if( p->n_lval != 0 || p->n_name[0] != '\0' ) acon(p);
			if( R2UPK1(r) != 100) printf( "(%s)", rnames[R2UPK1(r)] );
			if( flags & 2 ) printf("+");
			printf( "[%s]", rnames[R2UPK2(r)] );
			return;
			}
		if( r == AP ){  /* in the argument region */
			if( p->n_lval <= 0 || p->n_name[0] != '\0' ) werror( "bad arg temp" );
			printf( CONFMT, p->n_lval );
			printf( "(ap)" );
			return;
			}
		if( p->n_lval != 0 || p->n_name[0] != '\0') acon( p );
		printf( "(%s)", rnames[p->n_rval] );
		return;

	case UMUL:
		/* STARNM or STARREG found */
		if( tshape(p, STARNM) ) {
			printf( "*" );
			adrput(0,  p->n_left);
			}
		else {	/* STARREG - really auto inc or dec */
			register NODE *q;

/* tbl
			p = p->n_left;
			p->n_left->n_op = OREG;
			if( p->n_op == INCR ) {
				adrput( p->n_left );
				printf( "+" );
				}
			else {
				printf( "-" );
				adrput( p->n_left );
				}
   tbl */
#ifdef notyet
			printf("%c(%s)%c", (p->n_left->n_op==INCR ? '\0' : '-'),
				rnames[p->n_left->n_left->n_rval], 
				(p->n_left->n_op==INCR ? '+' : '\0') );
#else
			printf("%c(%s)%c", '-',
				rnames[p->n_left->n_left->n_rval], 
				'\0' );
#endif
			p->n_op = OREG;
			p->n_rval = p->n_left->n_left->n_rval;
			q = p->n_left;
#ifdef notyet

			p->n_lval = (p->n_left->n_op == INCR ? -p->n_left->n_right->n_lval : 0);
#else
			p->n_lval = 0;
#endif
			p->n_name[0] = '\0';
			tfree(q);
		}
		return;

	default:
		cerror( "illegal address" );
		return;
	}

}

/*
 * print out a constant
 */
void
acon(NODE *p)
{

	if (p->n_name[0] == '\0') {
		printf(CONFMT, p->n_lval);
	} else if( p->n_lval == 0 ) {
		printf("%s", p->n_name);
	} else {
		printf("%s+", p->n_name);
		printf(CONFMT, p->n_lval);
	}
}

#if 0
genscall( p, cookie ) register NODE *p; {
	/* structure valued call */
	return( gencall( p, cookie ) );
	}

/* tbl */
int gc_numbytes;
/* tbl */

gencall( p, cookie ) register NODE *p; {
	/* generate the call given by p */
	register NODE *p1, *ptemp;
	register temp, temp1;
	register m;

	if( p->right ) temp = argsize( p->right );
	else temp = 0;

	if( p->op == STCALL || p->op == UNARY STCALL ){
		/* set aside room for structure return */

		if( p->stsize > temp ) temp1 = p->stsize;
		else temp1 = temp;
		}

	if( temp > maxargs ) maxargs = temp;
	SETOFF(temp1,4);

	if( p->right ){ /* make temp node, put offset in, and generate args */
		ptemp = talloc();
		ptemp->op = OREG;
		ptemp->lval = -1;
		ptemp->rval = SP;
		ptemp->name[0] = '\0';
		ptemp->rall = NOPREF;
		ptemp->su = 0;
		genargs( p->right, ptemp );
		nfree(ptemp);
		}

	p1 = p->left;
	if( p1->op != ICON ){
		if( p1->op != REG ){
			if( p1->op != OREG || R2TEST(p1->rval) ){
				if( p1->op != NAME ){
					order( p1, INAREG );
					}
				}
			}
		}

/*
	if( p1->op == REG && p->rval == R5 ){
		cerror( "call register overwrite" );
		}
 */
/* tbl
	setup gc_numbytes so reference to ZC works */

	gc_numbytes = temp;
/* tbl */

	p->op = UNARY CALL;
	m = match( p, INTAREG|INTBREG );
/* tbl
	switch( temp ) {
	case 0:
		break;
	case 2:
		printf( "	tst	(sp)+\n" );
		break;
	case 4:
		printf( "	cmp	(sp)+,(sp)+\n" );
		break;
	default:
		printf( "	add	$%d,sp\n", temp);
		}
   tbl */
	return(m != MDONE);
	}
#endif

static char *
ccbranches[] = {
	"jeql",
	"jneq",
	"jleq",
	"jlss",
	"jgeq",
	"jgtr",
	"jlequ",
	"jlssu",
	"jgequ",
	"jgtru",
};

/*
 * printf conditional and unconditional branches
 */
void
cbgen(int o, int lab)
{

	if (o == 0) {
		printf("	jbr     " LABFMT "\n", lab);
	} else {
		if (o > UGT)
			comperr("bad conditional branch: %s", opst[o]);
		printf("\t%s\t" LABFMT "\n", ccbranches[o-EQ], lab);
	}
}

static void
optim2(NODE *p)
{
	/* do local tree transformations and optimizations */

	register NODE *r;

	switch( p->n_op ) {

	case AND:
		/* commute L and R to eliminate compliments and constants */
		if( (p->n_left->n_op==ICON&&p->n_left->n_name[0]==0) || p->n_left->n_op==COMPL ) {
			r = p->n_left;
			p->n_left = p->n_right;
			p->n_right = r;
			}
#if 0
	case ASG AND:
		/* change meaning of AND to ~R&L - bic on pdp11 */
		r = p->n_right;
		if( r->op==ICON && r->name[0]==0 ) { /* compliment constant */
			r->lval = ~r->lval;
			}
		else if( r->op==COMPL ) { /* ~~A => A */
			r->op = FREE;
			p->right = r->left;
			}
		else { /* insert complement node */
			p->right = talloc();
			p->right->op = COMPL;
			p->right->rall = NOPREF;
			p->right->type = r->type;
			p->right->left = r;
			p->right->right = NULL;
			}
		break;
#endif
		}
	}

void
myreader(struct interpass *ipole)
{
	struct interpass *ip;

	DLIST_FOREACH(ip, ipole, qelem) {
		if (ip->type != IP_NODE)
			continue;
		walkf(ip->ip_node, optim2);
	}
}

void
mycanon(NODE *p)
{
}

void
myoptim(struct interpass *ip)
{
}

/*
 * Return argument size in regs.
 */
static int
argsiz(NODE *p)
{
	TWORD t = p->n_type;

	if (t == STRTY || t == UNIONTY)
		return p->n_stsize/(SZINT/SZCHAR);
	return szty(t);
}

/*
 * Last chance to do something before calling a function.
 */
void
lastcall(NODE *p)
{
	NODE *op = p;
	int size = 0;

	/* Calculate argument sizes */
	p->n_qual = 0;
	if (p->n_op != CALL && p->n_op != FORTCALL && p->n_op != STCALL)
		return;
	for (p = p->n_right; p->n_op == CM; p = p->n_left)
		size += argsiz(p->n_right);
	size += argsiz(p);
	op->n_qual = size; /* XXX */
}

/*
 * Return a class suitable for a specific type.
 */
int
gclass(TWORD t)
{
	return (szty(t) == 2 ? CLASSB : CLASSA);
}

/*
 * For class c, find worst-case displacement of the number of
 * registers in the array r[] indexed by class.
 */
int
COLORMAP(int c, int *r)
{
	int num;

	switch (c) {
	case CLASSA:
		/* there are 12 classa, so min 6 classb are needed to block */
		num = r[CLASSB] * 2;
		num += r[CLASSA];
		return num < 12;
	case CLASSB:
		/* 6 classa may block all classb */
		num = r[CLASSB] + r[CLASSA];
		return num < 6;
	}
	comperr("COLORMAP");
	return 0; /* XXX gcc */
}

/*
 * Special shapes.
 */
int
special(NODE *p, int shape)
{
	return SRNOPE;
}

/*
 * Target-dependent command-line options.
 */
void
mflags(char *str)
{
}
/*
 * Do something target-dependent for xasm arguments.
 * Supposed to find target-specific constraints and rewrite them.
 */
int
myxasm(struct interpass *ip, NODE *p)
{
	return 0;
}
@


1.7
log
@Updates from master repo.  Can now compile both userland and kernel.
(with some patches...)
@
text
@d1 1
a1 1
/*	$OpenBSD: local2.c,v 1.6 2007/12/22 22:56:31 stefan Exp $	*/
@


1.6
log
@Sync with main repo.
@
text
@d1 1
a1 1
/*	$OpenBSD: local2.c,v 1.5 2007/12/09 18:56:17 ragge Exp $	*/
d1025 9
@


1.5
log
@Updates from master repo:
- Add acceptable() and mflags().
- Remove unused functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: local2.c,v 1.4 2007/11/17 12:00:37 ragge Exp $	*/
d542 6
@


1.4
log
@Updates from master repo:
Replace ugly target macros with function calls (gmcgarry).
@
text
@d1 1
a1 1
/*	$OpenBSD: local2.c,v 1.3 2007/10/29 16:38:55 ragge Exp $	*/
d1011 8
@


1.3
log
@From master repo:
> calls argument numbers are in registers, not bytes.
> If a jump is to the return label, emit ret insn instead.
> Add ADDROF table entry.
> Remove some unused entries.
> Do a Z call for emitted GOTOs.
> Only create constants for function names, they are called by name anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: local2.c,v 1.2 2007/10/27 14:19:18 ragge Exp $	*/
d927 10
@


1.2
log
@Sync with master repo: At least compiles now.
@
text
@d1 1
a1 1
/*	$OpenBSD: local2.c,v 1.1 2007/10/07 17:58:52 otto Exp $	*/
a42 2
# define BITMASK(n) ((1L<<n)-1)

d284 4
a287 8
		{
			int pr = p->n_qual;

			if (p->n_op == STCALL || p->n_op == USTCALL)
				pr += 4;
			printf("$%d", pr);
			break;
		}
d329 13
d930 1
a930 1
 * Return argument size in bytes.
d938 2
a939 2
		return p->n_stsize;
	return szty(t) * (SZINT/SZCHAR);
a999 8
	switch (shape) {
	case SNCON:
		if (p->n_name[0] != '\0')
			return SRDIR;
		break;
	default:
		comperr("special");
	}
@


1.1
log
@reorg pcc tree; requested by and ok deraadt@@; ok ragge@@
@
text
@d1 1
a1 1
/*	$OpenBSD: local2.c,v 1.2 2007/09/15 22:04:38 ray Exp $	*/
d36 1
a36 1
# include "mfile2"
d40 3
d45 15
a59 3
where(c){
	fprintf( stderr, "%s, line %d: ", filename, lineno );
	}
d61 11
a71 15
lineid( l, fn ) char *fn; {
	/* identify line l and file fn */
	printf( "#	line %d, file %s\n", l, fn );
	}

eobl2(){
	OFFSZ spoff;	/* offset from stack pointer */

	spoff = maxoff;
	if( spoff >= AUTOINIT ) spoff -= AUTOINIT;
	spoff /= SZCHAR;
	SETOFF(spoff,4);
	printf( "	.set	.F%d,%Ld\n", ftnno, spoff );
	maxargs = -1;
	}
d75 9
a83 15
	ASG PLUS, "add",
	ASG MINUS, "sub",
	ASG MUL, "mul",
	ASG DIV, "div",
	ASG OR, "bis",
	ASG ER,	"xor",
	ASG AND, "bic",
	PLUS,	"add",
	MINUS,	"sub",
	MUL,	"mul",
	DIV,	"div",
	OR,	"bis",
	ER,	"xor",
	AND,	"bic",
	-1, ""    };
d85 1
d119 1
a119 2
	"r0", "r1",
	"r2", "r3", "r4", "r5",
d122 3
a124 9

	};

int rstatus[] = {
	SAREG|STAREG, SAREG|STAREG,
	SAREG|STAREG, SAREG|STAREG, SAREG|STAREG, SAREG|STAREG,
	SAREG, SAREG, SAREG, SAREG, SAREG, SAREG,
	SAREG, SAREG, SAREG, SAREG,

d127 1
d130 1
a130 1
	switch(p->type) {
d140 3
d150 2
a151 1
mixtypes(p, q) NODE *p, *q;
d153 1
a153 1
	register tp, tq;
d155 2
a156 2
	tp = p->type;
	tq = q->type;
d162 2
a163 1
prtype(n) NODE *n;
d165 1
a165 1
	switch (n->type)
d193 1
a193 1
			if ( !ISPTR( n->type ) ) cerror("zzzcode- bad type");
d201 1
d203 2
a204 2
	register m;
	CONSZ val;
d209 3
a211 3
		cbgen( 0, m=getlab(), 'I' );
		deflab( p->label );
		printf( "	clrl	%s\n", rnames[getlr( p, '1' )->rval] );
a214 5
	case 'I':
	case 'P':
		cbgen( p->op, p->label, c );
		return;

d219 1
a219 1
		if (xdebug) eprint(p, 0, &val, &val);
d221 1
a221 2
		if (optype(p->op) == LTYPE || p->op == UNARY MUL)
			{
d223 2
a224 3
			l->type = (r->type==FLOAT || r->type==DOUBLE ? DOUBLE : INT);
			}
		else
d226 2
a227 4
		if (r->op == ICON  && r->name[0] == '\0')
			{
			if (r->lval == 0)
				{
d231 1
a231 1
				adrput(l);
d233 2
a234 3
				}
			if (r->lval < 0 && r->lval >= -63)
				{
d237 1
a237 1
				r->lval = -r->lval;
a238 12
				}
			r->type = (r->lval < 0 ?
					(r->lval >= -128 ? CHAR
					: (r->lval >= -32768 ? SHORT
					: INT )) : r->type);
			r->type = (r->lval >= 0 ?
					(r->lval <= 63 ? INT
					: ( r->lval <= 127 ? CHAR
					: (r->lval <= 255 ? UCHAR
					: (r->lval <= 32767 ? SHORT
					: (r->lval <= 65535 ? USHORT
					: INT ))))) : r->type );
d240 14
a253 2
		if (l->op == REG && l->type != FLOAT && l->type != DOUBLE)
			l->type = INT;
d262 1
a262 1
			else if (tlen(l) > tlen(r) && ISUNSIGNED(r->type))
d279 1
a279 1
		adrput(r);
d281 1
a281 1
		adrput(l);
d287 1
a287 2
		extern int gc_numbytes;
		extern int xdebug;
d289 4
a292 4
		if (xdebug) printf("->%d<-",gc_numbytes);

		printf("$%d", gc_numbytes/(SZLONG/SZCHAR) );
		return;
d296 1
a296 1
		zzzcode(p->left, 'A');
d299 1
d301 1
a301 1
		if (p->right->lval == 1)
d303 2
a304 2
			printf("%s", (p->op == INCR ? "inc" : "dec") );
			prtype(p->left);
d306 1
a306 1
			adrput(p->left);
d309 2
a310 2
		printf("%s", (p->op == INCR ? "add" : "sub") );
		prtype(p->left);
d312 1
a312 1
		adrput(p->right);
d314 1
a314 1
		adrput(p->left);
d316 1
d325 1
a325 1
		ty = n->type;
d342 1
a342 1
		if (xdebug) printf("->%d<-", n->type);
d349 1
a349 1
		printf("$%Ld", ~p->right->lval);
d353 1
a353 1
		printf("$%d", 32 - p->right->lval );
d360 1
a360 1
		size = p->stsize;
d369 1
a369 1
			register size;
d371 4
a374 3
			if( p->op == STASG ){
				l = p->left;
				r = p->right;
d377 1
a377 1
			else if( p->op == STARG ){  /* store an arg into a temporary */
d379 1
a379 1
				r = p->left;
d383 3
a385 3
			if( r->op == ICON ) r->op = NAME;
			else if( r->op == REG ) r->op = OREG;
			else if( r->op != OREG ) cerror( "STASG-r" );
d387 1
a387 1
			size = p->stsize;
d409 1
a409 1
			adrput(r);
d411 1
a411 1
			adrput(l);
d414 2
a415 2
			if( r->op == NAME ) r->op = ICON;
			else if( r->op == OREG ) r->op = REG;
d421 1
a421 1
		cerror( "illegal zzzcode" );
d425 2
a426 1
rmove( rt, rs, t ){
d432 1
a432 9
struct respref
respref[] = {
	INTAREG|INTBREG,	INTAREG|INTBREG,
	INAREG|INBREG,	INAREG|INBREG|SOREG|STARREG|STARNM|SNAME|SCON,
	INTEMP,	INTEMP,
	FORARG,	FORARG,
	INTEMP,	INTAREG|INAREG|INTBREG|INBREG|SOREG|STARREG|STARNM,
	0,	0 };

d441 1
d443 1
d448 1
d479 1
d481 2
a484 1
	register int i;
d487 2
a488 2
	p->op = OREG;
	f = p->left; 	/* have to free this subtree later */
d491 1
a491 1
	switch (q->op) {
d499 1
a499 1
			q->right->lval = -q->right->lval;
d501 1
a501 6
			t = q->right;
			break;

		case INCR:
		case ASG MINUS:
			t = q->left;
d504 2
a505 2
		case UNARY MUL:
			t = q->left->left;
d510 1
d513 2
a514 3
	p->lval = t->lval;
	for(i=0; i<NCHNAM; ++i)
		p->name[i] = t->name[i];
d517 1
a517 1
	p->rval = R2PACK( (b & 0177), o, (b>>7) );
d523 1
d525 1
a525 1
	register int o = p->op;
d527 1
a527 1
	if( o==NAME || o==REG || o==ICON || o==OREG || (o==UNARY MUL && shumul(p->left)) ) return(1);
d532 1
a532 1
	return( o== REG || o == NAME || o == ICON || o == OREG || ( o==UNARY MUL && shumul(p->left)) );
d534 1
d536 1
d538 2
a539 2
	return( p->op == REG || p->op == NAME || p->op == ICON ||
		(p->op == OREG && (!R2TEST(p->rval) || tlen(p) == 1)) );
d542 1
d544 2
a545 2
	if( p->op == STARG ) p = p->left;
	return( p->op==NAME || p->op ==ICON || p->op == OREG || (p->op==UNARY MUL && shumul(p->left)) );
d548 1
d550 1
a550 1
	register o;
d554 2
a555 2
		 printf("\nshumul:op=%d,lop=%d,rop=%d", p->op, p->left->op, p->right->op);
		printf(" prname=%s,plty=%d, prlval=%D\n", p->right->name, p->left->type, p->right->lval);
d559 2
a560 2
	o = p->op;
	if( o == NAME || (o == OREG && !R2TEST(p->rval)) || o == ICON ) return( STARNM );
d562 1
d564 2
a565 2
	    ( p->left->op == REG && p->right->op == ICON ) &&
	    p->right->name[0] == '\0' )
d567 1
a567 1
		switch (p->left->type)
d592 1
a592 1
				if ( ISPTR(p->left->type) ) {
d598 1
a598 1
		return( p->right->lval == o ? STARREG : 0);
d600 1
d605 1
d611 4
a614 2
conput( p ) register NODE *p; {
	switch( p->op ){
d621 1
a621 1
		printf( "%s", rnames[p->rval] );
d629 1
d634 2
a635 1
upput( p ) register NODE *p; {
d639 3
a641 1
adrput( p ) register NODE *p; {
d645 2
a646 2
	if( p->op == FLD ){
		p = p->left;
d648 1
a648 1
	switch( p->op ){
d656 3
a658 2
		printf( "$" );
		acon( p );
d662 1
a662 1
		printf( "%s", rnames[p->rval] );
d666 1
a666 1
		r = p->rval;
d673 1
a673 1
			if( p->lval != 0 || p->name[0] != '\0' ) acon(p);
d680 2
a681 2
			if( p->lval <= 0 || p->name[0] != '\0' ) werror( "bad arg temp" );
			printf( CONFMT, p->lval );
d685 2
a686 2
		if( p->lval != 0 || p->name[0] != '\0') acon( p );
		printf( "(%s)", rnames[p->rval] );
d689 1
a689 1
	case UNARY MUL:
d693 1
a693 1
			adrput( p->left);
d699 4
a702 4
			p = p->left;
			p->left->op = OREG;
			if( p->op == INCR ) {
				adrput( p->left );
d707 1
a707 1
				adrput( p->left );
d710 19
a728 8
			printf("%c(%s)%c", (p->left->op==INCR ? '\0' : '-'),
				rnames[p->left->left->rval], 
				(p->left->op==INCR ? '+' : '\0') );
			p->op = OREG;
			p->rval = p->left->left->rval;
			q = p->left;
			p->lval = (p->left->op == INCR ? -p->left->right->lval : 0);
			p->name[0] = '\0';
a735 3

		}

d738 1
a738 13
acon( p ) register NODE *p; { /* print out a constant */

	if( p->name[0] == '\0' ){
		printf( CONFMT, p->lval);
		}
	else if( p->lval == 0 ) {
		printf( "%.8s", p->name );
		}
	else {
		printf( "%.8s+", p->name );
		printf( CONFMT, p->lval );
		}
	}
d741 5
a745 2
aacon( p ) register NODE *p; { /* print out a constant */
/*
d747 7
a753 15
	if( p->name[0] == '\0' ){
		printf( CONFMT, p->lval);
		return( 0 );
		}
	else if( p->lval == 0 ) {
		printf( "$%.8s", p->name );
		return( 1 );
		}
	else {
		printf( "$(" );
		printf( CONFMT, p->lval );
		printf( "+" );
		printf( "%.8s)", p->name );
		return(1);
		}
d755 1
a755 1
 */
d757 1
d795 1
a795 1
		ptemp->op = FREE;
d838 1
d840 1
a840 2
/* tbl */
char *
d842 11
a852 12
	"	jeql	L%d\n",
	"	jneq	L%d\n",
	"	jleq	L%d\n",
	"	jlss	L%d\n",
	"	jgeq	L%d\n",
	"	jgtr	L%d\n",
	"	jlequ	L%d\n",
	"	jlssu	L%d\n",
	"	jgequ	L%d\n",
	"	jgtru	L%d\n",
	};
/* tbl */
d854 6
a859 1
cbgen( o, lab, mode ) { /*   printf conditional and unconditional branches */
d861 6
a866 7
/* tbl */
	if( o == 0 ) printf( "	jbr     L%d\n", lab );
/* tbl */
	else {
		if( o > UGT ) cerror( "bad conditional branch: %s", opst[o] );
		printf( ccbranches[o-EQ], lab );
		}
d868 1
d870 3
a872 14
nextcook( p, cookie ) NODE *p; {
	/* we have failed to match p with cookie; try another */
	if( cookie == FORREW ) return( 0 );  /* hopeless! */
	if( !(cookie&(INTAREG|INTBREG)) ) return( INTAREG|INTBREG );
	if( !(cookie&INTEMP) && asgop(p->op) ) return( INTEMP|INAREG|INTAREG|INTBREG|INBREG );
	return( FORREW );
	}

lastchance( p, cook ) NODE *p; {
	/* forget it! */
	return(0);
	}

optim2( p ) register NODE *p; {
d877 1
a877 1
	switch( p->op ) {
d881 4
a884 4
		if( (p->left->op==ICON&&p->left->name[0]==0) || p->left->op==COMPL ) {
			r = p->left;
			p->left = p->right;
			p->right = r;
d886 1
d889 1
a889 1
		r = p->right;
d906 1
a906 1

d910 4
d915 4
a918 3
# ifndef ONEPASS
main( argc, argv ) char *argv[]; {
	return( mainp2( argc, argv ) );
d920 83
a1002 1
# endif
@

