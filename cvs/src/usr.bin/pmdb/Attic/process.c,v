head	1.14;
access;
symbols
	OPENBSD_5_2:1.13.0.38
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.36
	OPENBSD_5_0:1.13.0.34
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.32
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.30
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.26
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.28
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.24
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.22
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.20
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.18
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.16
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	PMDB:1.1.1.1
	PMBD_4_1:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2012.08.30.15.53.47;	author kettenis;	state dead;
branches;
next	1.13;

1.13
date	2003.08.18.17.55.57;	author jfb;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.02.20.38.38;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.30.18.03.01;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.08.18.27.57;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.31.02.38.39;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.22.03.06.00;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.22.01.26.08;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.22.01.20.50;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.09.04.33.42;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.09.02.44.13;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.19.07.26.58;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.15.16.41.06;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.15.16.30.32;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.15.16.30.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Move pmdb to the attic.

It's unfinished.  It will never be finished.
It's unfinishable.  deraadt@@
@
text
@/*	$OpenBSD: process.c,v 1.13 2003/08/18 17:55:57 jfb Exp $	*/
/*
 * Copyright (c) 2002 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/types.h>
#include <sys/ptrace.h>
#include <sys/wait.h>
#include <sys/stat.h>

#include <machine/reg.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "pmdb.h"
#include "core.h"
#include "symbol.h"
#include "break.h"

int
process_load(struct pstate *ps)
{
	if (ps->ps_state == LOADED)
		return (0);

	if (access(*ps->ps_argv, R_OK|X_OK) < 0) {
		fprintf(stderr, "%s: %s.\n", *ps->ps_argv,
		    strerror(errno));
		return (1);
	}

	if (stat(ps->ps_argv[0], &(ps->exec_stat)) < 0)
		err(1, "stat()");

	if ((ps->ps_flags & PSF_SYMBOLS) == 0) {
		sym_init_exec(ps, ps->ps_argv[0]);
		ps->ps_flags |= PSF_SYMBOLS;
	}

	ps->ps_state = LOADED;

	if (ps->ps_pid != 0) {
		/* attach to an already running process */
		if (ptrace(PT_ATTACH, ps->ps_pid, (caddr_t) 0, 0) < 0)
			err(1, "failed to ptrace process");
		ps->ps_state = STOPPED;
		ps->ps_flags |= PSF_ATCH;
	}

	return (0);
}


int
process_setargv(struct pstate *ps, int argc, char **argv)
{
	int i;

	if (ps->ps_argv != NULL) {
		for (i = 0; i < ps->ps_argc; i++)
			free(ps->ps_argv[i]);
		free(ps->ps_argv);
	}

	ps->ps_argv = (char **)calloc((argc + 1), sizeof(char *));
	if (ps->ps_argv == NULL) {
		warn("failed to allocate argument vector");
		return (-1);
	}

	ps->ps_argc = argc;
	for (i = 0; i < argc; i++) {
		ps->ps_argv[i] = strdup(argv[i]);
		if (ps->ps_argv[i] == NULL) {
			warn("failed to copy argument");
			return (-1);
		}
	}

	ps->ps_argv[i] = NULL;
	return (0);
}


int
process_run(struct pstate *ps)
{
	int status;

	if ((ps->ps_state == RUNNING) || (ps->ps_state == STOPPED)) {
		warnx("process is already running");
		return 0;
	}

	switch (ps->ps_pid = fork()) {
	case 0:
		if (ptrace(PT_TRACE_ME, getpid(), NULL, 0) != 0)
			err(1, "ptrace(PT_TRACE_ME)");
		execvp(*ps->ps_argv, ps->ps_argv);
		err(1, "exec");
		/* NOTREACHED */
	case -1:
		err(1, "fork");
		/* NOTREACHED */
	default:
		warnx("process started with PID %d", ps->ps_pid);
		break;
	}

	ps->ps_state = LOADED;

	if (wait(&status) == 0)
		err(1, "wait");

	return (0);
}


int
process_kill(struct pstate *ps)
{
	switch(ps->ps_state) {
	case RUNNING:
	case STOPPED:
		if (ptrace(PT_KILL, ps->ps_pid, NULL, 0) != 0)
			err(1, "ptrace(PT_KILL)");
		return (1);
	default:
		return (0);
	}
}

int
process_read(struct pstate *ps, off_t from, void *to, size_t size)
{
	struct ptrace_io_desc piod;

	if (((ps->ps_state == NONE) || (ps->ps_state == LOADED) ||
	    (ps->ps_state == TERMINATED)) && (ps->ps_flags & PSF_CORE)) {
		return core_read(ps, from, to, size);
	} else {
		piod.piod_op = PIOD_READ_D;
		piod.piod_offs = (void *)(long)from;
		piod.piod_addr = to;
		piod.piod_len = size;

		return (ptrace(PT_IO, ps->ps_pid, (caddr_t)&piod, 0) < 0?
		    -1 : piod.piod_len);
	}
}

int
process_write(struct pstate *ps, off_t to, void *from, size_t size)
{
	struct ptrace_io_desc piod;

	if ((ps->ps_state == NONE) && (ps->ps_flags & PSF_CORE)) {
		return core_write(ps, to, from, size);
	} else {
		piod.piod_op = PIOD_WRITE_D;
		piod.piod_offs = (void *)(long)to;
		piod.piod_addr = from;
		piod.piod_len = size;

		return (ptrace(PT_IO, ps->ps_pid, (caddr_t)&piod, 0) < 0?
		    -1 : piod.piod_len);
	}
}

int
process_getregs(struct pstate *ps, struct reg *r)
{

	if (ps->ps_flags & PSF_CORE) {
		memcpy(r, ps->ps_core->regs, sizeof(*r));

		return (0);
	}

	return (ptrace(PT_GETREGS, ps->ps_pid, (caddr_t)r, 0));
}

int
cmd_process_kill(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;

	process_kill(ps);

	return (1);
}

int
process_bkpt_main(struct pstate *ps, void *arg)
{
	sym_update(ps);

	return (BKPT_DEL_CONT);
}

int
cmd_process_run(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;

	if (ps->ps_state == NONE) {
		reg main_addr;

		if (process_load(ps) != 0)
			return (0);

		if (sym_lookup(ps, "main", &main_addr))
			warnx("no main");
		else if (bkpt_add_cb(ps, main_addr, process_bkpt_main, NULL))
			warn("no bkpt at main 0x%lx", main_addr);
	}

	if (ps->ps_state != LOADED) {
		fprintf(stderr, "Process already running.\n");
		return (0);
	}

	process_run(ps);
	/*
	 * XXX - there isn't really any difference between STOPPED and
	 * LOADED, we should probably get rid of one.
	 */
	ps->ps_state = STOPPED;
	ps->ps_signum = 0;

	return (cmd_process_cont(argc, argv, arg));
}

int
cmd_process_cont(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;
	int signum;
	int req = (ps->ps_flags & PSF_STEP) ? PT_STEP : PT_CONTINUE;

	if (ps->ps_state != STOPPED) {
		fprintf(stderr, "Process not loaded and stopped %d\n",
		    ps->ps_state);
		return (0);
	}

	/* Catch SIGINT and SIGTRAP, pass all other signals. */
	switch (ps->ps_signum) {
	case SIGINT:
	case SIGTRAP:
		signum = 0;
		break;
	default:
		signum = ps->ps_signum;
		break;
	}

	if (ptrace(req, ps->ps_pid, (caddr_t)ps->ps_npc, signum) != 0) {
		err(1, "ptrace(%s)", req == PT_STEP ? "PT_STEP":"PT_CONTINUE");
	}

	ps->ps_state = RUNNING;
	ps->ps_npc = 1;

	return (1);
}

int
cmd_process_setenv(int argc, char **argv, void *arg)
{
	if (setenv(argv[1], argv[2], 1))
		err(1, "setenv");

	return (0);
}
@


1.13
log
@when given only an executable name without a valid path, resolve the
actual executable path from the PATH environment, so the calls to access()
and stat() work correctly when loading the process

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.12 2003/08/02 20:38:38 mickey Exp $	*/
@


1.12
log
@check return value from process_{read,write} proper
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.11 2003/05/30 18:03:01 miod Exp $	*/
d77 31
@


1.11
log
@Handle process_load() failure. This prevents "pmdb foo" to dump core upon
run command, if foo does not exist.
ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.10 2002/08/08 18:27:57 art Exp $	*/
d143 2
a144 1
		return (ptrace(PT_IO, ps->ps_pid, (caddr_t)&piod, 0));
d161 2
a162 1
		return (ptrace(PT_IO, ps->ps_pid, (caddr_t)&piod, 0));
@


1.10
log
@implement setenv.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.9 2002/07/31 02:38:39 art Exp $	*/
d56 1
a56 1
		return (0);
d203 3
a205 1
		process_load(ps);
@


1.9
log
@unbreak process_getregs
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.8 2002/07/22 03:06:00 art Exp $	*/
d258 9
@


1.8
log
@KNF and unbreak PT_GETREGS
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.7 2002/07/22 01:26:08 art Exp $	*/
d168 1
a168 4
	if (ps->ps_state == STOPPED) {
		if (ptrace(PT_GETREGS, ps->ps_pid, (caddr_t)r, 0) != 0)
			return (-1);
	} else if (ps->ps_flags & PSF_CORE) {
a169 2
	} else
		return (-1);
d171 4
a174 1
	return (0);
@


1.7
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.6 2002/07/22 01:20:50 art Exp $	*/
d137 1
a137 2
	}
	else {
d152 1
a152 1
	if ((ps->ps_state == NONE) && (ps->ps_flags & PSF_CORE))
d154 1
a154 1
	else {
d169 1
a169 1
		if (ptrace(PT_GETREGS, ps->ps_pid, (caddr_t)&r, 0) != 0)
@


1.6
log
@Support for reading from core files.
From Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.5 2002/06/09 04:33:42 fgsch Exp $	*/
d172 1
a172 2
	}
	else if (ps->ps_flags & PSF_CORE) {
d174 1
a174 2
	}
	else
d177 1
a177 1
	return 0;
@


1.5
log
@some knf.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.4 2002/06/09 02:44:13 todd Exp $	*/
d32 2
d43 1
a49 2
	int status;

d62 7
a75 14
	else {
		switch (ps->ps_pid = fork()) {
		case 0:
			if (ptrace(PT_TRACE_ME, getpid(), NULL, 0) != 0)
				err(1, "ptrace(PT_TRACE_ME)");
			execvp(*ps->ps_argv, ps->ps_argv);
			err(1, "exec");
			/* NOTREACHED */
		case -1:
			err(1, "fork");
			/* NOTREACHED */
		default:
			break;
		}
d77 12
a88 1
		ps->ps_state = LOADED;
d91 13
a103 3
	if ((ps->ps_flags & PSF_SYMBOLS) == 0) {
		sym_init_exec(ps, ps->ps_argv[0]);
		ps->ps_flags |= PSF_SYMBOLS;
d106 2
d114 1
a118 1
	case LOADED:
d130 53
d220 1
@


1.4
log
@provide '-p <pid>' (process attach); thanks to
Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.3 2002/03/19 07:26:58 fgsch Exp $	*/
d94 1
a94 1
	return 0;
d106 1
a106 1
		return 1;
d108 1
a108 1
		return 0;
d119 1
a119 1
	return 1;
d127 1
a127 1
	return BKPT_DEL_CONT;
d147 1
a147 1
		return 0;
@


1.3
log
@o check if the file is exists, is readable and executable before going
  further.
o rearrange includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.2 2002/03/15 16:41:06 jason Exp $	*/
d30 2
d58 26
a83 12
	switch (ps->ps_pid = fork()) {
	case 0:
		if (ptrace(PT_TRACE_ME, getpid(), NULL, 0) != 0)
			err(1, "ptrace(PT_TRACE_ME)");
		execvp(*ps->ps_argv, ps->ps_argv);
		err(1, "exec");
		/* NOTREACHED */
	case -1:
		err(1, "fork");
		/* NOTREACHED */
	default:
		break;
a93 1
	ps->ps_state = LOADED;
@


1.2
log
@s/$PMDB$/$OpenBSD$/
@
text
@d1 1
a1 1
/*	$OpenBSD: process.c,v 1.19 2002/03/11 23:39:49 art Exp $	*/
d30 4
d35 1
a35 2
#include <stdio.h>
#include <signal.h>
a36 1
#include <err.h>
d49 6
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$PMDB: process.c,v 1.19 2002/03/11 23:39:49 art Exp $	*/
@


1.1.1.1
log
@Import pmdb 4.1.

(see http://www.blahonga.org/~art/openbsd/pmdb.html for more info).

The development repository now moves here out from my local repository.
@
text
@@
