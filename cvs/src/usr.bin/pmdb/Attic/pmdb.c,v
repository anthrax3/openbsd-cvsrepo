head	1.23;
access;
symbols
	OPENBSD_5_2:1.22.0.18
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.16
	OPENBSD_5_0:1.22.0.14
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.12
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.10
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.6
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.8
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.4
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.2
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.14
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.12
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.10
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.8
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.6
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	PMDB:1.1.1.1
	PMBD_4_1:1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2012.08.30.15.53.47;	author kettenis;	state dead;
branches;
next	1.22;

1.22
date	2008.05.01.21.18.13;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.06.19.16.05;	author sobrado;	state Exp;
branches;
next	1.20;

1.20
date	2006.12.20.06.45.10;	author steven;	state Exp;
branches;
next	1.19;

1.19
date	2003.08.18.17.55.57;	author jfb;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.02.20.38.38;	author mickey;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.10.22.20.49;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.15.00.11.03;	author jfb;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.05.18.16.21;	author pvalchev;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.29.00.03.00;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.28.23.33.27;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.08.18.27.57;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.22.23.26.05;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.22.01.20.50;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.09.04.33.42;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.09.02.44.13;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.05.18.02.27;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.19.23.17.58;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.19.23.10.57;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.15.18.21.20;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.15.18.04.41;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.15.16.41.06;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.15.16.30.32;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.15.16.30.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Move pmdb to the attic.

It's unfinished.  It will never be finished.
It's unfinishable.  deraadt@@
@
text
@/*	$OpenBSD: pmdb.c,v 1.22 2008/05/01 21:18:13 miod Exp $	*/
/*
 * Copyright (c) 2002 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/types.h>
#include <sys/ptrace.h>
#include <sys/wait.h>

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <err.h>
#include <errno.h>
#include <string.h>
#include <paths.h>

#include "pmdb.h"
#include "symbol.h"
#include "clit.h"
#include "break.h"
#include "core.h"

static int cmd_show_registers(int, char **, void *);
static int cmd_show_backtrace(int, char **, void *);
static int cmd_examine(int, char **, void *);
static int cmd_quit(int, char **, void *);

struct clit cmds[] = {
	/* debugging info commands. */
	{ "regs", "show registers", 0, 0, cmd_show_registers, (void *)-1 },
	{ "trace", "show backtrace", 0, 0, cmd_show_backtrace, (void *)-1 },
	{ "x", "examine memory", 1, 16, cmd_examine, (void *)-1 },

	/* Process handling commands. */
	{ "run", "run process", 0, 0, cmd_process_run, (void *)-1 },
	{ "continue", "continue process", 0, 0, cmd_process_cont, (void *)-1 },
	{ "kill", "kill process", 0, 0, cmd_process_kill, (void *)-1 },
	{ "setenv", "set env variables", 2, 2, cmd_process_setenv, (void *)-1 },

	/* signal handling commands. */
	{ "signal", "ignore signal", 2, 2, cmd_signal_ignore, (void *)-1 },
	{ "sigstate", "show signal state", 0, 0, cmd_signal_show, (void *)-1 },

	/* breakpoints */
	{ "break", "set breakpoint", 1, 1, cmd_bkpt_add, (void *)-1 },
	{ "step", "single step one insn", 0, 0, cmd_sstep, (void *)-1 },

	/* symbols */
	{ "sym_load", "load symbol table", 2, 2, cmd_sym_load, (void *)-1 },

	/* misc commands. */
	{ "help", "print help", 0, 1, cmd_help, NULL },
	{ "quit", "quit", 0, 0, cmd_quit, (void *)-1 },
	{ "exit", "quit", 0, 0, cmd_quit, (void *)-1 },
};

#define NCMDS	sizeof(cmds)/sizeof(cmds[0])

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-c core] [-p pid] program ...\n",
	    __progname);
	exit(1);
}

int
main(int argc, char **argv)
{
	struct pstate ps;
	int i, c;
	int status;
	void *cm;
	char *pmenv, *core, *perr, execpath[MAXPATHLEN];
	int level;
	pid_t pid;

	core = NULL;
	pid = 0;

	while ((c = getopt(argc, argv, "c:p:")) != -1) {
		switch(c) {
			case 'c':
				core = optarg;
				break;
			case 'p':
				pid = (pid_t) strtol(optarg, &perr, 10);
				if (*perr != '\0')
					errx(1, "invalid PID");
				break;
			case '?':
			default:
				usage();
				/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (argc == 0)
		usage();

	if ((pmenv = getenv("IN_PMDB")) != NULL) {
		level = atoi(pmenv);
		level++;
	} else
		level = 0;

	if (level > 0)
		asprintf(&prompt_add, "(%d)", level);
	asprintf(&pmenv, "%d", level);
	setenv("IN_PMDB", pmenv, 1);
	if (pmenv)
		free(pmenv);

	if (getexecpath(argv[0], execpath, sizeof(execpath)) == -1) {
		err(1, "cannot find `%s'", argv[0]);
	}
	argv[0] = execpath;

	memset(&ps, 0, sizeof(ps));
	process_setargv(&ps, argc, argv);

	ps.ps_pid = pid;
	ps.ps_state = NONE;
	ps.ps_flags = 0;
	ps.ps_signum = 0;
	ps.ps_npc = 1;
	TAILQ_INIT(&ps.ps_bkpts);
	TAILQ_INIT(&ps.ps_sstep_cbs);

	signal(SIGINT, SIG_IGN);

	for (i = 0; i < NCMDS; i++)
		if (cmds[i].arg == (void *)-1)
			cmds[i].arg = &ps;

	md_def_init();
	init_sigstate(&ps);

	if ((core != NULL) && (read_core(core, &ps) < 0))
		warnx("failed to load core file");

	if (process_load(&ps) < 0)
		errx(1, "failed to load process");

	cm = cmdinit(cmds, NCMDS);
	while (ps.ps_state != TERMINATED) {
		int signum;
		int stopped;
		int cont;

		if (ps.ps_state == STOPPED) {
			sym_update(&ps);
		}

		if (ps.ps_state != RUNNING && cmdloop(cm) == 0) {
			cmd_quit(0, NULL, &ps);
		}

		if (ps.ps_state == TERMINATED)
			break;

		if (ps.ps_state == NONE || ps.ps_state == LOADED)
			continue;

		if (wait(&status) == 0)
			err(1, "wait");
		if (WIFEXITED(status)) {
			if ((ps.ps_flags & PSF_KILL) == 0) {
				ps.ps_state = NONE;
			} else {
				ps.ps_state = TERMINATED;
			}
			fprintf(stderr, "process exited with status %d\n",
			    WEXITSTATUS(status));
			continue;
		}
		if (WIFSIGNALED(status)) {
			signum = WTERMSIG(status);
			stopped = 0;
		} else {
			signum = WSTOPSIG(status);
			stopped = 1;
		}
		cont = 0;
		if (stopped)
			cont = bkpt_check(&ps);
		process_signal(&ps, signum, stopped, cont);
	}

	cmdend(cm);

	sym_destroy(&ps);

	return (0);
}


static int
cmd_show_registers(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;
	char buf[256];
	int i;
	reg *rg;

	if (ps->ps_state != STOPPED) {
		if (ps->ps_flags & PSF_CORE) {
			/* dump registers from core */
			core_printregs(ps);
			return (0);
		}
		fprintf(stderr, "process not stopped\n");
		return (0);
	}

	rg = alloca(sizeof(*rg) * md_def.nregs);

	if (md_getregs(ps, rg))
		err(1, "can't get registers");
	for (i = 0; i < md_def.nregs; i++)
		printf("%s:\t0x%.*lx\t%s\n", md_def.md_reg_names[i],
		    (int)(sizeof(reg) * 2), (long)rg[i],
		    sym_print(ps, rg[i], buf, sizeof(buf)));
	return (0);
}

static int
cmd_show_backtrace(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;
	int i;

	if (ps->ps_state != STOPPED && !(ps->ps_flags & PSF_CORE)) {
		fprintf(stderr, "process not stopped\n");
		return (0);
	}

	/* no more than 100 frames */
	for (i = 0; i < 100; i++) {
		struct md_frame mfr;
		char namebuf[1024], *name;
		reg offs;
		int j;

		mfr.nargs = -1;

		if (md_getframe(ps, i, &mfr))
			break;

		name = sym_name_and_offset(ps, mfr.pc, namebuf,
		    sizeof(namebuf), &offs);
		if (name == NULL) {
			snprintf(namebuf, sizeof(namebuf), "0x%lx", mfr.pc);
			name = namebuf;
			offs = 0;
		}

		printf("%s(", name);
		for (j = 0; j < mfr.nargs; j++) {
			printf("0x%lx", mfr.args[j]);
			if (j < mfr.nargs - 1)
				printf(", ");
		}
		if (offs == 0) {
			printf(")\n");
		} else {
			printf(")+0x%lx\n", offs);
		}
	}

	return (0);
}

static int
cmd_quit(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;

	if ((ps->ps_flags & PSF_ATCH)) {
		if ((ps->ps_flags & PSF_ATCH) &&
		    ptrace(PT_DETACH, ps->ps_pid, NULL, 0) < 0)
			err(1, "ptrace(PT_DETACH)");
	} else {
		ps->ps_flags |= PSF_KILL;

		if (process_kill(ps))
			return (1);
	}

	ps->ps_state = TERMINATED;
	return (1);
}

static int
cmd_examine(int argc, char **argv, void *arg)
{
	struct pstate *ps = arg;
	char buf[256];
	reg addr, val;
	int i;

	for (i = 1; argv[i]; i++) {

		addr = strtoul(argv[i], NULL, 0);
		if (!addr) {	/* assume it's a symbol */
			if (sym_lookup(ps, argv[i], &addr)) {
				warn( "Can't find: %s", argv[i]);
				return (0);
			}
		}

        	if (process_read(ps, addr, &val, sizeof(val)) < 0) {
			warn("Can't read process contents at 0x%lx", addr);
			return (0);
		}

		printf("%s:\t%s\n", argv[i],
		    sym_print(ps, val, buf, sizeof(buf)));
	}

	return (0);
}

/*
 * Perform command completion.
 * Pretty simple. if there are spaces in "buf", the last string is a symbol
 * otherwise it's a command.
 */
int
cmd_complt(char *buf, size_t buflen)
{
	struct clit *match;
	char *start;
	int command;
	int i, j, len;
	int onlymatch;

	command = (strchr(buf, ' ') == NULL);

	if (!command) {
		/* XXX - can't handle symbols yet. */
		return (-1);
	}

	start = buf;
	len = strlen(buf);

	match = NULL;
	for (i = 0; i < sizeof(cmds) / sizeof(cmds[i]); i++) {
		if (strncmp(start, cmds[i].cmd, len) == 0) {
			struct clit *cmdp;

			cmdp = &cmds[i];
			if (match == NULL) {
				onlymatch = 1;
				match = cmdp;
				strlcpy(buf, match->cmd, buflen);
				continue;
			}
			onlymatch = 0;
			for (j = len; j < buflen; j++) {
				if (buf[j] != cmdp->cmd[j]) {
					buf[j] = '\0';
					break;
				}
				if (cmdp->cmd[j] == '\0')
					break;
			}
		}
	}

	/*
	 * Be nice. If there could be arguments for this command and it's
	 * the only match append a space.
	 */
	if (match && onlymatch /*&& match->maxargc > 0*/)
		strlcat(buf, " ", buflen);

	return (match && onlymatch) ? 0 : -1;
}

/*
 * The "standard" wrapper
 */
void *
emalloc(size_t sz)
{
	void *ret;
	if ((ret = malloc(sz)) == NULL)
		err(1, "malloc");
	return (ret);
}


/*
 * Find the first valid path to the executable whose name is <ename>.
 * The resulting path is stored in <dst>, up to <dlen> - 1 bytes, and is
 * NUL-terminated.  If <dst> is too small, the result will be truncated to
 * fit, but getexecpath() will return -1.
 * Returns 0 on success, -1 on failure.
 */

int
getexecpath(const char *ename, char *dst, size_t dlen)
{
	char *envp, *pathenv, *pp, *pfp;
	struct stat pstat;

	if (stat(ename, &pstat) == 0) {
		if (strlcpy(dst, ename, dlen) >= dlen)
			return (-1);
		return (0);
	}

	if (strchr(ename, '/') != NULL) {
		/* don't bother looking in PATH */
		return (-1);
	}

	envp = getenv("PATH");
	if (envp == NULL)
		envp = _PATH_DEFPATH;

	pathenv = strdup(envp);
	if (pathenv == NULL) {
		warn("failed to allocate PATH buffer");
		return (-1);
	}

	for (pp = pathenv; (pfp = strsep(&pp, ":")) != NULL; ) {
		/* skip cwd, was already tested */
		if (*pfp == '\0')
			continue;

		if (snprintf(dst, dlen, "%s/%s", pfp, ename) >= (int)dlen)
			continue;

		if (stat(dst, &pstat) != -1) {
			free(pathenv);
			return (0);
		}
	}

	free(pathenv);
	return (-1);
}
@


1.22
log
@In the main loop, do not call wait() if there is no child process yet;
misinterpreting the ``returned'' status could lead to segfauts, as reported
by ``Filth'' (hygdrasil, gmail dot com)

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.21 2007/08/06 19:16:05 sobrado Exp $	*/
@


1.21
log
@the ellipsis is not an optional argument; while here, sync the usage
and synopsis of commands

lots of good ideas by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.20 2006/12/20 06:45:10 steven Exp $	*/
d188 3
@


1.20
log
@remove unneeded #include

ok mbalmer@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.19 2003/08/18 17:55:57 jfb Exp $	*/
d87 1
a87 1
	fprintf(stderr, "Usage: %s [-c core] [-p pid] <program> args\n",
@


1.19
log
@when given only an executable name without a valid path, resolve the
actual executable path from the PATH environment, so the calls to access()
and stat() work correctly when loading the process

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.18 2003/08/02 20:38:38 mickey Exp $	*/
a29 1
#include <sys/endian.h>
@


1.18
log
@check return value from process_{read,write} proper
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.17 2003/06/10 22:20:49 deraadt Exp $	*/
d39 1
d100 1
a100 1
	char *pmenv, *core, *perr;
d142 8
a151 2
	ps.ps_argc = argc;
	ps.ps_argv = argv;
d417 54
@


1.17
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.16 2003/05/15 00:11:03 jfb Exp $	*/
d330 1
a330 1
        	if (process_read(ps, addr, &val, sizeof(val))) {
@


1.16
log
@Get rid of read_from_pid() and write_to_pid(), they were
replaced by the more generic process_read() and process_write()

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.15 2003/04/05 18:16:21 pvalchev Exp $	*/
d83 1
a83 1
usage()
@


1.15
log
@free value after asprintf; ok art
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.14 2003/03/29 00:03:00 mickey Exp $	*/
a214 27
/* XXX - move to some other file. */
int
read_from_pid(pid_t pid, off_t from, void *to, size_t size)
{
	struct ptrace_io_desc piod;

	piod.piod_op = PIOD_READ_D;
	piod.piod_offs = (void *)(long)from;
	piod.piod_addr = to;
	piod.piod_len = size;

	return (ptrace(PT_IO, pid, (caddr_t)&piod, 0));
}


int
write_to_pid(pid_t pid, off_t to, void *from, size_t size)
{
	struct ptrace_io_desc piod;

	piod.piod_op = PIOD_WRITE_D;
	piod.piod_offs = (void *)(long)to;
	piod.piod_addr = from;
	piod.piod_len = size;

	return (ptrace(PT_IO, pid, (caddr_t)&piod, 0));
}
@


1.14
log
@implement memory examine command. takes both symbol or address
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.13 2003/03/28 23:33:27 mickey Exp $	*/
d138 2
@


1.13
log
@do not core dump on stripped executables. revmap the registers printed to the symbols even for cores (already happens for live executables); art@@ said it should wait until after the release and so it is already after the release now
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.12 2002/08/08 18:27:57 art Exp $	*/
d48 1
d55 1
d335 30
@


1.12
log
@implement setenv.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.11 2002/07/22 23:26:05 fgsch Exp $	*/
d250 1
a250 1
			core_printregs(ps->ps_core);
@


1.11
log
@check argc after getopt(), otherwise we may go ahead even if we only got
flags; from Jean-Francois Brousseau <krapht@@secureops.com>.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.10 2002/07/22 01:20:50 art Exp $	*/
d59 1
@


1.10
log
@Support for reading from core files.
From Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.9 2002/06/09 04:33:42 fgsch Exp $	*/
a99 4
	if (argc < 2) {
		usage();
	}

d121 3
@


1.9
log
@some knf.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.8 2002/06/09 02:44:13 todd Exp $	*/
d156 2
a157 1
	process_load(&ps);
d159 2
a160 2
	if (core != NULL)
		read_core(core, &ps);
d274 1
a274 1
	if (ps->ps_state != STOPPED) {
@


1.8
log
@provide '-p <pid>' (process attach); thanks to
Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.7 2002/06/05 18:02:27 fgsch Exp $	*/
d84 2
a85 1
	fprintf(stderr, "Usage: %s [-c core] [-p pid] <program> args\n", __progname);
d107 1
a107 1
	while((c = getopt(argc, argv, "c:p:")) != -1) {
d114 1
a114 1
				if(*perr != '\0')
d327 1
a327 1
			return 1;
d331 1
a331 1
	return 1;
d352 1
a352 1
		return -1;
@


1.7
log
@core support from Jean-Francois Brousseau <krapht@@secureops.com> with
a few tweaks of mine. tested on sparc64 and i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.6 2002/03/19 23:17:58 fgsch Exp $	*/
d84 1
a84 1
	fprintf(stderr, "Usage: %s [-c core] <program> args\n", __progname);
d95 1
a95 1
	char *pmenv, *core;
d97 1
d104 1
d106 1
a106 1
	while ((c = getopt(argc, argv, "c:")) != -1) {
d111 5
d136 1
a136 1
	ps.ps_pid = 0;
d318 6
a323 1
	ps->ps_flags |= PSF_KILL;
d325 3
a327 2
	if (process_kill(ps))
		return 1;
@


1.6
log
@o don't need a var to keep the number of commands; use a define.
o remove extra arg after dale commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.5 2002/03/19 23:10:57 drahn Exp $	*/
d30 1
a39 2
#include <sys/endian.h>

d44 1
d79 9
a90 1
	extern const char *__progname;
d92 1
a92 1
	int i;
d95 1
a95 1
	char *pmenv;
d99 1
a99 2
		fprintf(stderr, "Usage: %s <program> args\n", __progname);
		exit(1);
d102 16
d131 2
a132 2
	ps.ps_argc = --argc;
	ps.ps_argv = ++argv;
d150 3
d239 5
d245 1
a245 1
		return 0;
d256 1
a256 1
	return 0;
d267 1
a267 1
		return 0;
d302 2
a303 1
	return 0;
d379 1
a379 1
 * The "stadard" wrapper
@


1.5
log
@Do not print offset if no symbol found for address. ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.4 2002/03/15 18:21:20 art Exp $	*/
d77 2
d84 1
a84 1
	int i, ncmds;
d118 1
a118 3
	ncmds = sizeof(cmds)/sizeof(cmds[0]);

	for (i = 0; i < ncmds; i++)
d127 1
a127 1
	cm = cmdinit(cmds, ncmds);
d266 1
a266 1
			printf(")\n", offs);
@


1.4
log
@Oops. Adapt to one more change in PT_IO.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.3 2002/03/15 18:04:41 art Exp $	*/
d256 1
d265 5
a269 1
		printf(")+0x%lx\n", offs);
@


1.3
log
@Add a command 'sym_load' to load a symbol table at some offset.
We are in a desperate need of a better command line interface, the top level
is starting to get crowded.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.2 2002/03/15 16:41:06 jason Exp $	*/
d187 1
a187 1
	return (ptrace(PT_IO, pid, (caddr_t)&piod, 0) != size);
d201 1
a201 1
	return (ptrace(PT_IO, pid, (caddr_t)&piod, 0) != size);
@


1.2
log
@s/$PMDB$/$OpenBSD$/
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.c,v 1.41 2002/03/12 14:24:30 art Exp $	*/
d67 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$PMDB: pmdb.c,v 1.41 2002/03/12 14:24:30 art Exp $	*/
@


1.1.1.1
log
@Import pmdb 4.1.

(see http://www.blahonga.org/~art/openbsd/pmdb.html for more info).

The development repository now moves here out from my local repository.
@
text
@@
