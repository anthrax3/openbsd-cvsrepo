head	1.8;
access;
symbols
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	PMDB:1.1.1.1
	PMBD_4_1:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2012.08.30.15.53.47;	author kettenis;	state dead;
branches;
next	1.7;

1.7
date	2003.08.18.17.55.57;	author jfb;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.15.00.11.03;	author jfb;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.08.18.27.57;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.22.01.20.50;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.05.18.02.27;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.15.16.41.06;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.15.16.30.32;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.15.16.30.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Move pmdb to the attic.

It's unfinished.  It will never be finished.
It's unfinishable.  deraadt@@
@
text
@/*	$OpenBSD: pmdb.h,v 1.7 2003/08/18 17:55:57 jfb Exp $	*/
/*
 * Copyright (c) 2002 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/signal.h>		/* for NSIG */
#include <sys/queue.h>
#include <sys/ptrace.h>
#include <sys/stat.h>

#include <err.h>

/* XXX - ugh, yuck, bleah. */
#ifndef PT_STEP
#define PT_STEP PT_CONTINUE
#endif

/*
 * Process handling.
 */

struct breakpoint;
struct callback;
struct corefile;
struct sym_table;
struct sym_ops;
struct reg;

/* XXX - should be machdep some day. */
typedef unsigned long reg;

/* The state for a debugged process. */
struct pstate {
	pid_t ps_pid;
	enum { NONE, LOADED, RUNNING, STOPPED, TERMINATED } ps_state;
	int ps_argc;
	char **ps_argv;
	int ps_flags;
	int ps_signum;
	int ps_sigstate[NSIG];
	reg ps_npc;
	TAILQ_HEAD(,sym_table) ps_syms;	/* all symbols tables in a list */
	struct sym_table *ps_sym_exe;	/* symbol table for the executable */
	struct sym_ops *ps_sops;	/* operations on symbol tables */
	struct stat exec_stat;		/* stat of the exec file */
	struct corefile *ps_core;	/* core file data */
	TAILQ_HEAD(,breakpoint) ps_bkpts; /* breakpoints */
	TAILQ_HEAD(,callback) ps_sstep_cbs; /* single step actions */
};

/* flags in ps_flags */
#define PSF_SYMBOLS	0x02		/* basic symbols loaded */
#define PSF_KILL	0x04		/* kill this process asap */
#define PSF_STEP	0x08		/* next continue should sstep */
#define PSF_CORE	0x10		/* core file loaded */
#define PSF_ATCH	0x20		/* process attached with PT_ATTACH */

/* ps_sigstate */
#define SS_STOP		0x00
#define SS_IGNORE	0x01

/* misc helper functions */
int getexecpath(const char *, char *, size_t);
int process_kill(struct pstate *);

/* process.c */
int process_load(struct pstate *);
int process_setargv(struct pstate *, int, char **);
int process_run(struct pstate *);
int process_read(struct pstate *, off_t, void *, size_t);
int process_write(struct pstate *, off_t, void *, size_t);
int process_getregs(struct pstate *, struct reg *);

int cmd_process_run(int, char **, void *);
int cmd_process_cont(int, char **, void *);
int cmd_process_kill(int, char **, void *);
int cmd_process_setenv(int, char **, void *);

/* signal.c */
void init_sigstate(struct pstate *);
void process_signal(struct pstate *, int, int, int);
int cmd_signal_ignore(int, char **, void *);
int cmd_signal_show(int, char **, void *);

/*
 * Machine dependent stuff.
 */
/* register names */
struct md_def {
	const char **md_reg_names;	/* array of register names */
	const int nregs;		/* number of registers */
	const int pcoff;		/* offset of the pc */
};
extern struct md_def md_def;
void md_def_init(void);

#define MDF_MAX_ARGS	16

struct md_frame {
	reg pc, fp;
	int nargs;
	reg args[MDF_MAX_ARGS];
};

/*
 * Return the registers for the process "ps" in the frame "frame".
 */
int md_getframe(struct pstate *, int, struct md_frame *);
int md_getregs(struct pstate *, reg *);

/* misc */
void *emalloc(size_t);
@


1.7
log
@when given only an executable name without a valid path, resolve the
actual executable path from the PATH environment, so the calls to access()
and stat() work correctly when loading the process

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.h,v 1.6 2003/05/15 00:11:03 jfb Exp $	*/
@


1.6
log
@Get rid of read_from_pid() and write_to_pid(), they were
replaced by the more generic process_read() and process_write()

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.h,v 1.5 2002/08/08 18:27:57 art Exp $	*/
d84 1
d89 1
@


1.5
log
@implement setenv.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.h,v 1.4 2002/07/22 01:20:50 art Exp $	*/
a84 2
int read_from_pid(pid_t pid, off_t from, void *to, size_t size);
int write_to_pid(pid_t pid, off_t to, void *from, size_t size);
@


1.4
log
@Support for reading from core files.
From Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.h,v 1.3 2002/06/05 18:02:27 fgsch Exp $	*/
d98 1
@


1.3
log
@core support from Jean-Francois Brousseau <krapht@@secureops.com> with
a few tweaks of mine. tested on sparc64 and i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.h,v 1.2 2002/03/15 16:41:06 jason Exp $	*/
d48 1
d90 5
@


1.2
log
@s/$PMDB$/$OpenBSD$/
@
text
@d1 1
a1 1
/*	$OpenBSD: pmdb.h,v 1.26 2002/03/11 23:39:49 art Exp $	*/
d30 2
d45 1
d65 2
d75 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$PMDB: pmdb.h,v 1.26 2002/03/11 23:39:49 art Exp $	*/
@


1.1.1.1
log
@Import pmdb 4.1.

(see http://www.blahonga.org/~art/openbsd/pmdb.html for more info).

The development repository now moves here out from my local repository.
@
text
@@
