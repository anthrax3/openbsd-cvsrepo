head	1.12;
access;
symbols
	OPENBSD_5_2:1.11.0.22
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.20
	OPENBSD_5_0:1.11.0.18
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.16
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.14
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	PMDB:1.1.1.1
	PMBD_4_1:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2012.08.30.15.53.47;	author kettenis;	state dead;
branches;
next	1.11;

1.11
date	2007.07.24.21.11.02;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.25.20.07.09;	author pvalchev;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.22.01.20.50;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.11.06.34.38;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.09.04.59.04;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.29.19.32.18;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.19.21.19.39;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.19.21.17.52;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.15.17.49.51;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.15.16.41.06;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.15.16.30.32;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.15.16.30.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Move pmdb to the attic.

It's unfinished.  It will never be finished.
It's unfinishable.  deraadt@@
@
text
@/*	$OpenBSD: aout_syms.c,v 1.11 2007/07/24 21:11:02 deraadt Exp $	*/
/*
 * Copyright (c) 2002 Federico Schwindt <fgsch@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/param.h>
#include <sys/ptrace.h>
#include <sys/mman.h>
#include <sys/stat.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <err.h>

#include <a.out.h>
#include <link.h>

#include "pmdb.h"
#include "symbol.h"

struct aout_symbol_handle {
	struct sym_table	ash_st;
	int		ash_fd;
	char	       *ash_strtab;
	u_int32_t	ash_strsize;
	struct nlist   *ash_symtab;
	int		ash_symsize;
};

#define ASH_TO_ST(ash) (&(ash)->ash_st)
#define ST_TO_ASH(st) ((struct aout_symbol_handle *)(st))

struct sym_table *aout_open(const char *);
void aout_close(struct sym_table *);
char *aout_name_and_off(struct sym_table *, reg, reg *);
int aout_lookup(struct pstate *, const char *, reg *);
void aout_update(struct pstate *);

struct sym_ops aout_sops = {
	aout_open,
	aout_close,
	aout_name_and_off,
	aout_lookup,
	aout_update
};	

int
sym_check_aout(const char *name, struct pstate *ps)
{
	struct exec ahdr;
	int error = 0;
	int fd;

	if ((fd = open(name, O_RDONLY)) < 0)
		return (1);

	if (pread(fd, &ahdr, sizeof(ahdr), 0) != sizeof(ahdr)) {
		error = 1;
	}

	if (!error && N_BADMAG(ahdr)) {
		error = 1;
	}

	close(fd);

	if (!error)
		ps->ps_sops = &aout_sops;

	return (error);
}

struct sym_table *
aout_open(const char *name)
{
	struct aout_symbol_handle *ash;
	struct stat sb;
	u_int32_t symoff, stroff;
	struct exec ahdr;

	if ((ash = malloc(sizeof(*ash))) == NULL) {
		return NULL;
	}

	memset(ash, 0, sizeof(*ash));
	ash->ash_fd = -1;

	if ((ash->ash_fd = open(name, O_RDONLY)) < 0) {
		warn("open(%s)", name);
		goto fail;
	}

	if (pread(ash->ash_fd, &ahdr, sizeof(ahdr), 0) != sizeof(ahdr)) {
		warn("pread(header)");
		goto fail;
	}

	if (N_BADMAG(ahdr)) {
		warnx("Bad magic.");
		goto fail;
	}

	/* Don't go further for stripped files. */
	if (fstat(ash->ash_fd, &sb) < 0 || N_SYMOFF(ahdr) == sb.st_size ||
	    N_STROFF(ahdr) == sb.st_size)
		goto fail;

	symoff = N_SYMOFF(ahdr);
	ash->ash_symsize = ahdr.a_syms;
	stroff = N_STROFF(ahdr);

	if (ahdr.a_syms == 0) {
		warnx("No symbol table");
		goto fail;
	}

	if (pread(ash->ash_fd, &ash->ash_strsize, sizeof(u_int32_t),
	    stroff) != sizeof(u_int32_t)) {
		warn("pread(strsize)");
		goto fail;
	}

	if ((ash->ash_strtab = mmap(NULL, ash->ash_strsize, PROT_READ,
	    MAP_SHARED, ash->ash_fd, stroff)) == MAP_FAILED) {
		warn("mmap(strtab)");
		goto fail;
	}

	if ((ash->ash_symtab = mmap(NULL, ash->ash_symsize, PROT_READ,
	    MAP_SHARED, ash->ash_fd, symoff)) == MAP_FAILED) {
		warn("mmap(symtab)");
		goto fail;
	}

	return (ASH_TO_ST(ash));
fail:

	aout_close(ASH_TO_ST(ash));
	return (NULL);
}

void
aout_close(struct sym_table *st)
{
	struct aout_symbol_handle *ash = ST_TO_ASH(st);

	if (ash->ash_fd != -1)
		close(ash->ash_fd);

	munmap(ash->ash_strtab, ash->ash_strsize);
	munmap(ash->ash_symtab, ash->ash_symsize);
	free(ash);
}

char *
aout_name_and_off(struct sym_table *st, reg pc, reg *offs)
{
	struct aout_symbol_handle *ash = ST_TO_ASH(st);
	struct nlist *s, *bests = NULL;
	int bestoff = 0;
	int nsyms, i;
	char *symn;

#define SYMVAL(S) (unsigned long)((S)->n_value + st->st_offs)

	nsyms = ash->ash_symsize / sizeof(struct nlist);

	bests = NULL;
	for (i = 0; i < nsyms; i++) {
		s = &ash->ash_symtab[i];

		if (s->n_value == 0 ||
		    s->n_un.n_strx == 0)
			continue;

		symn = &ash->ash_strtab[s->n_un.n_strx];
		if (SYMVAL(s) <= pc && SYMVAL(s) > bestoff &&
		    symn[0] != '\0' && strcmp(symn, "gcc2_compiled.")) {
			bests = s;
			bestoff = SYMVAL(s);
		}
	}

	if ((s = bests) == NULL)
		return (NULL);

	*offs = pc - SYMVAL(s);

	return &ash->ash_strtab[s->n_un.n_strx];
}

static struct nlist *
aout_lookup_table(struct aout_symbol_handle *ash, const char *name)
{
	int nsyms, i;
	char *symn;
	struct nlist *s = NULL;

	nsyms = ash->ash_symsize / sizeof(struct nlist);
	for (i = 0; i < nsyms; i++) {
		s = &ash->ash_symtab[i];
		symn = &ash->ash_strtab[s->n_un.n_strx];
		if (strcmp(name, symn) == 0)
			break;
	}

	if (i == nsyms)
		return (NULL);

	return (s);
}

int
aout_lookup(struct pstate *ps, const char *name, reg *res)
{
	struct sym_table *st;
	struct nlist *s = NULL;
	int first = 1;
	char *sname = (char *)name;

restart:
	TAILQ_FOREACH(st, &ps->ps_syms, st_list) {
		if ((s = aout_lookup_table(ST_TO_ASH(st), sname)) != NULL)
			break;
	}

	if (!first)
		free(sname);

	if (s == NULL) {
		if (first) {
			if (asprintf(&sname, "_%s", sname) != -1) {
				first = 0;
				goto restart;
			}
		}

		return (-1);
	}

	*res = s->n_value + st->st_offs;
	return (0);
}

/*
 * Called after execution started so that we can load any dynamic symbols.
 */
void
aout_update(struct pstate *ps)
{
	struct _dynamic dyn;
	struct so_debug sdeb;
	struct section_dispatch_table sdt;
	struct so_map som;
	off_t somp;
	reg addr;
	struct nlist *s;

	if ((s = aout_lookup_table(ST_TO_ASH(ps->ps_sym_exe), "__DYNAMIC")) == NULL) {
		warnx("Can't find __DYNAMIC");
		return;
	}
	addr = s->n_value + ps->ps_sym_exe->st_offs;

	if (process_read(ps, addr, &dyn, sizeof(dyn)) < 0) {
		warn("Can't read __DYNAMIC");
		return;
	}

	if (dyn.d_version != LD_VERSION_BSD) {
		warn("Can't handle __DYNAMIC version %d", dyn.d_version);
		return;
	}

	if (process_read(ps, (off_t)(reg)dyn.d_debug, &sdeb, sizeof(sdeb)) < 0) {
		warn("Can't read __DYNAMIC.d_debug");
		return;
	}

	if (sdeb.dd_version != 0) {
		warn("Can't handle so_debug version %d", sdeb.dd_version);
		return;
	}

	if (process_read(ps, (off_t)(reg)dyn.d_un.d_sdt, &sdt, sizeof(sdt)) < 0) {
		warn("Can't read section dispatch table");
		return;
	}

	somp = (off_t)(reg)sdt.sdt_loaded;
	while (somp) {
		char fname[MAXPATHLEN];
		int i;

		if (process_read(ps, somp, &som, sizeof(som)) < 0) {
			warn("Can't read so_map");
			break;
		}
		somp = (off_t)(reg)som.som_next;
		if (process_read(ps, (off_t)(reg)som.som_path, fname,
		    sizeof(fname)) < 0) {
			warn("Can't read so filename");
			continue;
		}
		
		/* sanity check the file name */
		for (i = 0; i < MAXPATHLEN; i++)
			if (fname[i] == '\0')
				break;
		if (i == MAXPATHLEN) {
			warnx("so filename invalid");
			continue;
		}

		if (st_open(ps, fname, (reg)som.som_addr) == NULL)
			warn("symbol loading failed");
	}
}
@


1.11
log
@same uninit variable bug as in elf_syms.c
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.10 2003/04/25 20:07:09 pvalchev Exp $	*/
@


1.10
log
@check asprintf return value for error, as the pointer is not guaranteed
to be NULL in such case; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.9 2002/07/22 01:20:50 art Exp $	*/
d241 1
a241 1
	struct nlist *s;
@


1.9
log
@Support for reading from core files.
From Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.8 2002/06/11 06:34:38 art Exp $	*/
d256 1
a256 2
			asprintf(&sname, "_%s", sname);
			if (sname != NULL) {
@


1.8
log
@Fail if no symbol table is found, don't crash.
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.7 2002/06/09 04:59:04 fgsch Exp $	*/
a275 1
	pid_t pid = ps->ps_pid;
d290 1
a290 1
	if (read_from_pid(pid, addr, &dyn, sizeof(dyn)) < 0) {
d300 1
a300 1
	if (read_from_pid(pid, (off_t)(reg)dyn.d_debug, &sdeb, sizeof(sdeb)) < 0) {
d310 1
a310 1
	if (read_from_pid(pid, (off_t)(reg)dyn.d_un.d_sdt, &sdt, sizeof(sdt)) < 0) {
d320 1
a320 1
		if (read_from_pid(pid, somp, &som, sizeof(som)) < 0) {
d325 1
a325 1
		if (read_from_pid(pid, (off_t)(reg)som.som_path, fname,
@


1.7
log
@don't go further on stripped binaries; been in my tree for ever.
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.6 2002/03/29 19:32:18 deraadt Exp $	*/
d135 5
@


1.6
log
@remove the IGNORE_PREAD_ERRORS backwards compat goo which really, REALLY, just is not needed, come on
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.5 2002/03/19 21:19:39 fgsch Exp $	*/
d27 5
a38 5
#include <sys/param.h>
#include <sys/ptrace.h>
#include <sys/mman.h>

#include <sys/types.h>
d101 1
d126 5
@


1.5
log
@check error before checking the magic.
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.4 2002/03/19 21:17:52 fgsch Exp $	*/
a44 5
#if defined(__OpenBSD__) && (OpenBSD < 200106)
/* OpenBSD prior to 2.9 have a broken pread on big-endian archs. */
#define IGNORE_PREAD_ERRORS
#endif

a81 1
#ifndef IGNORE_PREAD_ERRORS
a82 1
#endif
a116 1
#ifndef IGNORE_PREAD_ERRORS
a118 1
#endif
a131 1
#ifndef IGNORE_PREAD_ERRORS
a133 1
#endif
@


1.4
log
@prepare to support both formats simultaneously.
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.3 2002/03/15 17:49:51 art Exp $	*/
d92 1
a92 1
	if (N_BADMAG(ahdr)) {
@


1.3
log
@Move the linking offset from the symbol format dependent structs
to struct sym_table.
Allow callers to specify linking offset to st_open.
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.2 2002/03/15 16:41:06 jason Exp $	*/
d80 1
d84 1
a84 1
		return (-1);
d88 1
a88 1
		return (-1);
d93 1
a93 1
		return (-1);
d98 2
a99 1
	ps->ps_sops = &aout_sops;
d101 1
a101 1
	return (0);
@


1.2
log
@s/$PMDB$/$OpenBSD$/
@
text
@d1 1
a1 1
/*	$OpenBSD: aout_syms.c,v 1.17 2002/03/11 21:46:12 art Exp $	*/
a56 1
	int		ash_offs;
d186 1
a186 1
#define SYMVAL(S) (unsigned long)((S)->n_value + ash->ash_offs)
d264 1
a264 1
	*res = s->n_value + ST_TO_ASH(st)->ash_offs;
d287 1
a287 1
	addr = s->n_value + ST_TO_ASH(ps->ps_sym_exe)->ash_offs;
a315 1
		struct sym_table *st;
d339 1
a339 2
		st = st_open(ps, fname);
		if (st == NULL) {
a340 3
			continue;
		}
		ST_TO_ASH(st)->ash_offs = (int)som.som_addr;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$PMDB: aout_syms.c,v 1.17 2002/03/11 21:46:12 art Exp $	*/
@


1.1.1.1
log
@Import pmdb 4.1.

(see http://www.blahonga.org/~art/openbsd/pmdb.html for more info).

The development repository now moves here out from my local repository.
@
text
@@
