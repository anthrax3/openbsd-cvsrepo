head	1.10;
access;
symbols
	OPENBSD_5_2:1.8.0.38
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.36
	OPENBSD_5_0:1.8.0.34
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.32
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.30
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.26
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2012.08.30.15.53.47;	author kettenis;	state dead;
branches;
next	1.9;

1.9
date	2012.08.29.21.52.45;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.30.20.53.29;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.14.22.18.24;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.16.00.02.46;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.15.22.05.06;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.22.02.54.23;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.22.01.20.50;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.19.21.32.10;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.15.19.48.19;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Move pmdb to the attic.

It's unfinished.  It will never be finished.
It's unfinishable.  deraadt@@
@
text
@/*	$OpenBSD: hppa.c,v 1.9 2012/08/29 21:52:45 kettenis Exp $	*/

/*
 * Copyright (c) 2002-2003 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


#include <sys/param.h>
#include <sys/ptrace.h>
#include <machine/reg.h>
#include <string.h>
#include "pmdb.h"

static const char *md_reg_names[] = {
	"%psw", "%r1",  "%rp",  "%r3",  "%r4",  "%r5",  "%r6",  "%r7",
	"%r8",  "%r9",  "%r10", "%r11", "%r12", "%r13", "%r14", "%r15",
	"%r16", "%r17", "%r18", "%r19", "%r20", "%r21", "%r22", "%r23",
	"%r24", "%r25", "%r26", "%r27", "%r28", "%r29", "%r30", "%r31",
	"%sar", "%pcsqh", "%pcsqt", "%pcoqh", "%pcoqt",
	"%sr0", "%sr1", "%sr2", "%sr3", "%sr4", "%sr5", "%sr6", "%sr7",
	"%cr26", "%cr27"
};

struct md_def md_def = { md_reg_names, 47, 35 };

void
md_def_init(void)
{
	/* no need to do anything */
}

int
md_getframe(struct pstate *ps, int frame, struct md_frame *fram)
{
	reg fr[16];
	struct reg r;
	reg fp, pc, rp;
	int i;

	if (process_getregs(ps, &r))
		return (-1);

	rp = r.r_regs[2];
	fp = r.r_regs[3];
	pc = r.r_pcoqh;

	for (i = 0; i < frame; i++) {

		if (!fp)
			return (-1);

		if (process_read(ps, fp-15*4, &fr, sizeof(fr)) < 0)
			return (-1);

		pc = rp;
		fp = fr[15];
		rp = fr[10];
	}
	fram->pc = pc;
	fram->fp = fp;

	if (frame != 0) {
		fram->nargs = 4;	/* XXX real number is in the symtab */
		fram->args[3] = fr[3];
		fram->args[2] = fr[4];
		fram->args[1] = fr[5];
		fram->args[0] = fr[6];
	}

	return (0);
}

int
md_getregs(struct pstate *ps, reg *regs)
{
	struct reg r;

	if (process_getregs(ps, &r))
		return (-1);

	memcpy(regs, &r, sizeof(r));

	return (0);
}
@


1.9
log
@Adjust for changes to "struct reg".
@
text
@d1 1
a1 1
/*	$OpenBSD: hppa.c,v 1.8 2003/05/30 20:53:29 mickey Exp $	*/
@


1.8
log
@kill an unused variable
@
text
@d1 1
a1 1
/*	$OpenBSD: hppa.c,v 1.7 2003/03/14 22:18:24 mickey Exp $	*/
d33 1
d37 1
a37 1
	"%sar", "%r1",  "%rp",  "%r3",  "%r4",  "%r5",  "%r6",  "%r7",
d41 3
a43 1
	"%pc", "%npc"
d46 1
a46 1
struct md_def md_def = { md_reg_names, 34, 32 };
d67 1
a67 1
	pc = r.r_pc;
@


1.7
log
@make fetching regs and stack trace really work
@
text
@d1 1
a1 1
/*	$OpenBSD: hppa.c,v 1.6 2003/01/16 00:02:46 mickey Exp $	*/
a95 1
	int i;
@


1.6
log
@match the funky regs order between getregs and reg_names
@
text
@d1 1
a1 1
/*	$OpenBSD: hppa.c,v 1.5 2003/01/15 22:05:06 mickey Exp $	*/
a35 1
	"%pc", "%npc",
d39 2
a40 1
	"%r24", "%r25", "%r26", "%r27", "%r28", "%r29", "%r30", "%r31"
d43 1
a43 1
struct md_def md_def = { md_reg_names, 34, 0 };
d54 1
a54 1
	reg fr[32];
a61 6
	if (frame == 0) {
		fram->pc = r.r_pc;
		fram->fp = r.r_regs[3];
		return (0);
	}

d66 4
a69 1
	for (i = 1; i < frame; i++) {
d71 1
a71 1
		if (process_read(ps, fp-60, &fr, sizeof(fr)) < 0)
d81 7
a87 5
	fram->nargs = 4;		/* XXX real number is in the symtab */
	fram->args[3] = fr[23];
	fram->args[2] = fr[24];
	fram->args[1] = fr[25];
	fram->args[0] = fr[26];
d101 1
a101 5
	regs[0] = r.r_pc;
	regs[1] = r.r_npc;

	for (i = 0; i < 32; i++)
		regs[2 + i] = r.r_regs[i];
@


1.5
log
@make it compile, becomes useful now
@
text
@d1 1
a1 1
/*	$OpenBSD: hppa.c,v 1.4 2002/07/22 02:54:23 art Exp $	*/
d36 1
d40 1
a40 2
	"%r24", "%r25", "%r26", "%r27", "%r28", "%r29", "%r30", "%r31",
	"%pc", "%npc"
@


1.4
log
@Use process_getregs everywhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: hppa.c,v 1.3 2002/07/22 01:20:50 art Exp $	*/
d4 1
a4 1
 * Copyright (c) 2002 Michael Shalayeff
d54 1
a54 1
	reg fr[16];
d64 1
a64 1
		fram->fp = r.r_reg[3];
d68 2
a69 2
	rp = r.r_reg[2];
	fp = r.r_reg[3];
d85 4
a88 4
	fram->args[0] = fr.r_arg0;
	fram->args[1] = fr.r_arg1;
	fram->args[2] = fr.r_arg2;
	fram->args[3] = fr.r_arg3;
d106 1
a106 1
		regs[2 + i] = r.r_out[i];
@


1.3
log
@Support for reading from core files.
From Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: hppa.c,v 1.2 2002/03/19 21:32:10 fgsch Exp $	*/
d59 1
a59 1
	if (ptrace(PT_GETREGS, ps->ps_pid, (caddr_t)&r, 0) != 0)
d99 1
a99 1
	if (ptrace(PT_GETREGS, ps->ps_pid, (caddr_t)&r, 0) != 0)
@


1.2
log
@a bit of style.
@
text
@d1 1
a1 1
/*	$OpenBSD: hppa.c,v 1.1 2002/03/15 19:48:19 mickey Exp $	*/
d74 1
a74 1
		if (read_from_pid(ps->ps_pid, fp-60, &fr, sizeof(fr)) < 0)
@


1.1
log
@dunno, smth like this
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
a60 1
		return -1;
d65 1
a65 1
		return 0;
d75 2
a76 1
			return -1;
d90 1
a90 1
	return 0;
d100 2
a101 1
		return -1;
d104 1
d108 1
a108 1
	return 0;
@

