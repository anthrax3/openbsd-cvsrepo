head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.30
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.26
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.24
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.22
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.20
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.18
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.16
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.14
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.12
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.10
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.18
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.14
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.12
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.10
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.8
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.6
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2016.01.06.22.28.52;	author millert;	state Exp;
branches;
next	1.16;
commitid	adBvXLg05bJxz6yx;

1.16
date	2015.12.07.20.39.19;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	gtDERb7QyXwKGs62;

1.15
date	2015.11.19.07.53.31;	author bentley;	state Exp;
branches;
next	1.14;
commitid	aNUlDSFtbBwW1Tdz;

1.14
date	2015.01.16.06.40.14;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	Uu5nFG3wCl0LACBb;

1.13
date	2014.11.12.16.29.04;	author millert;	state Exp;
branches;
next	1.12;
commitid	T0XpHzXjuQBl1V3E;

1.12
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.11;
commitid	06bi6U3x4gFFf2G1;

1.11
date	2013.12.01.16.47.59;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2013.05.03.20.43.25;	author kili;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.12.15.13.30.17;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.57;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.29.01.58.43;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.08.20.22.56.05;	author michaels;	state Exp;
branches;
next	1.4;

1.4
date	96.08.16.17.58.35;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.07.24.16.15.53;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.35.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove the numeric identifiers at the beginning of the messages
which used to be used as the message number to lookup in the
catalog.  From Martijn van Duren
@
text
@/*	$OpenBSD: ex_init.c,v 1.16 2015/12/07 20:39:19 mmcc Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/queue.h>
#include <sys/stat.h>

#include <bitstring.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "../common/common.h"
#include "tag.h"
#include "pathnames.h"

enum rc { NOEXIST, NOPERM, RCOK };
static enum rc	exrc_isok(SCR *, struct stat *, int *, char *, int, int);

static int ex_run_file(SCR *, int, char *);

/*
 * ex_screen_copy --
 *	Copy ex screen.
 *
 * PUBLIC: int ex_screen_copy(SCR *, SCR *);
 */
int
ex_screen_copy(SCR *orig, SCR *sp)
{
	EX_PRIVATE *oexp, *nexp;

	/* Create the private ex structure. */
	CALLOC_RET(orig, nexp, 1, sizeof(EX_PRIVATE));
	sp->ex_private = nexp;

	/* Initialize queues. */
	TAILQ_INIT(&nexp->tq);
	TAILQ_INIT(&nexp->tagfq);

	if (orig == NULL) {
	} else {
		oexp = EXP(orig);

		if (oexp->lastbcomm != NULL &&
		    (nexp->lastbcomm = strdup(oexp->lastbcomm)) == NULL) {
			msgq(sp, M_SYSERR, NULL);
			return(1);
		}
		if (ex_tag_copy(orig, sp))
			return (1);
	}
	return (0);
}

/*
 * ex_screen_end --
 *	End a vi screen.
 *
 * PUBLIC: int ex_screen_end(SCR *);
 */
int
ex_screen_end(SCR *sp)
{
	EX_PRIVATE *exp;
	int rval;

	if ((exp = EXP(sp)) == NULL)
		return (0);

	rval = 0;

	/* Close down script connections. */
	if (F_ISSET(sp, SC_SCRIPT) && sscr_end(sp))
		rval = 1;

	if (argv_free(sp))
		rval = 1;

	if (exp->ibp != NULL)
		free(exp->ibp);

	if (exp->lastbcomm != NULL)
		free(exp->lastbcomm);

	if (ex_tag_free(sp))
		rval = 1;

	/* Free private memory. */
	free(exp);
	sp->ex_private = NULL;

	return (rval);
}

/*
 * ex_optchange --
 *	Handle change of options for ex.
 *
 * PUBLIC: int ex_optchange(SCR *, int, char *, u_long *);
 */
int
ex_optchange(SCR *sp, int offset, char *str, u_long *valp)
{
	switch (offset) {
	case O_TAGS:
		return (ex_tagf_alloc(sp, str));
	}
	return (0);
}

/*
 * ex_exrc --
 *	Read the EXINIT environment variable and the startup exrc files,
 *	and execute their commands.
 *
 * PUBLIC: int ex_exrc(SCR *);
 */
int
ex_exrc(SCR *sp)
{
	struct stat hsb, lsb;
	char *p, path[PATH_MAX];
	int fd;

	/*
	 * Source the system, environment, $HOME and local .exrc values.
	 * Vi historically didn't check $HOME/.exrc if the environment
	 * variable EXINIT was set.  This is all done before the file is
	 * read in, because things in the .exrc information can set, for
	 * example, the recovery directory.
	 *
	 * !!!
	 * While nvi can handle any of the options settings of historic vi,
	 * the converse is not true.  Since users are going to have to have
	 * files and environmental variables that work with both, we use nvi
	 * versions of both the $HOME and local startup files if they exist,
	 * otherwise the historic ones.
	 *
	 * !!!
	 * For a discussion of permissions and when what .exrc files are
	 * read, see the comment above the exrc_isok() function below.
	 *
	 * !!!
	 * If the user started the historic of vi in $HOME, vi read the user's
	 * .exrc file twice, as $HOME/.exrc and as ./.exrc.  We avoid this, as
	 * it's going to make some commands behave oddly, and I can't imagine
	 * anyone depending on it.
	 */
	switch (exrc_isok(sp, &hsb, &fd, _PATH_SYSEXRC, 1, 0)) {
	case NOEXIST:
	case NOPERM:
		break;
	case RCOK:
		if (ex_run_file(sp, fd, _PATH_SYSEXRC))
			return (1);
		break;
	}

	/* Run the commands. */
	if (EXCMD_RUNNING(sp->gp))
		(void)ex_cmd(sp);
	if (F_ISSET(sp, SC_EXIT | SC_EXIT_FORCE))
		return (0);

	if ((p = getenv("NEXINIT")) != NULL) {
		if (ex_run_str(sp, "NEXINIT", p, strlen(p), 1, 0))
			return (1);
	} else if ((p = getenv("EXINIT")) != NULL) {
		if (ex_run_str(sp, "EXINIT", p, strlen(p), 1, 0))
			return (1);
	} else if ((p = getenv("HOME")) != NULL && *p) {
		(void)snprintf(path, sizeof(path), "%s/%s", p, _PATH_NEXRC);
		switch (exrc_isok(sp, &hsb, &fd, path, 0, 1)) {
		case NOEXIST:
			(void)snprintf(path,
			    sizeof(path), "%s/%s", p, _PATH_EXRC);
			if (exrc_isok(sp, &hsb, &fd, path, 0, 1) == RCOK &&
			    ex_run_file(sp, fd, path))
				return (1);
			break;
		case NOPERM:
			break;
		case RCOK:
			if (ex_run_file(sp, fd, path))
				return (1);
			break;
		}
	}

	/* Run the commands. */
	if (EXCMD_RUNNING(sp->gp))
		(void)ex_cmd(sp);
	if (F_ISSET(sp, SC_EXIT | SC_EXIT_FORCE))
		return (0);

	/* Previous commands may have set the exrc option. */
	if (O_ISSET(sp, O_EXRC)) {
		switch (exrc_isok(sp, &lsb, &fd, _PATH_NEXRC, 0, 0)) {
		case NOEXIST:
			if (exrc_isok(sp, &lsb, &fd, _PATH_EXRC, 0, 0)
			    == RCOK) {
				if (lsb.st_dev != hsb.st_dev ||
				    lsb.st_ino != hsb.st_ino) {
					if (ex_run_file(sp, fd, _PATH_EXRC))
						return (1);
				} else
					close(fd);
			}
			break;
		case NOPERM:
			break;
		case RCOK:
			if (lsb.st_dev != hsb.st_dev ||
			    lsb.st_ino != hsb.st_ino) {
				if (ex_run_file(sp, fd, _PATH_NEXRC))
					return (1);
			} else
				close(fd);
			break;
		}
		/* Run the commands. */
		if (EXCMD_RUNNING(sp->gp))
			(void)ex_cmd(sp);
		if (F_ISSET(sp, SC_EXIT | SC_EXIT_FORCE))
			return (0);
	}

	return (0);
}

/*
 * ex_run_file --
 *	Set up a file of ex commands to run.
 */
static int
ex_run_file(SCR *sp, int fd, char *name)
{
	ARGS *ap[2], a;
	EXCMD cmd;

	ex_cinit(&cmd, C_SOURCE, 0, OOBLNO, OOBLNO, 0, ap);
	ex_cadd(&cmd, &a, name, strlen(name));
	return (ex_sourcefd(sp, &cmd, fd));
}

/*
 * ex_run_str --
 *	Set up a string of ex commands to run.
 *
 * PUBLIC: int ex_run_str(SCR *, char *, char *, size_t, int, int);
 */
int
ex_run_str(SCR *sp, char *name, char *str, size_t len, int ex_flags,
    int nocopy)
{
	GS *gp;
	EXCMD *ecp;

	gp = sp->gp;
	if (EXCMD_RUNNING(gp)) {
		CALLOC_RET(sp, ecp, 1, sizeof(EXCMD));
		LIST_INSERT_HEAD(&gp->ecq, ecp, q);
	} else
		ecp = &gp->excmd;

	F_INIT(ecp,
	    ex_flags ? E_BLIGNORE | E_NOAUTO | E_NOPRDEF | E_VLITONLY : 0);

	if (nocopy)
		ecp->cp = str;
	else
		if ((ecp->cp = v_strdup(sp, str, len)) == NULL)
			return (1);
	ecp->clen = len;

	if (name == NULL)
		ecp->if_name = NULL;
	else {
		if ((ecp->if_name = v_strdup(sp, name, strlen(name))) == NULL)
			return (1);
		ecp->if_lno = 1;
		F_SET(ecp, E_NAMEDISCARD);
	}

	return (0);
}

/*
 * exrc_isok --
 *	Open and check a .exrc file for source-ability.
 *
 * !!!
 * Historically, vi read the $HOME and local .exrc files if they were owned
 * by the user's real ID, or the "sourceany" option was set, regardless of
 * any other considerations.  We no longer support the sourceany option as
 * it's a security problem of mammoth proportions.  We require the system
 * .exrc file to be owned by root, the $HOME .exrc file to be owned by the
 * user's effective ID (or that the user's effective ID be root) and the
 * local .exrc files to be owned by the user's effective ID.  In all cases,
 * the file cannot be writeable by anyone other than its owner.
 *
 * In O'Reilly ("Learning the VI Editor", Fifth Ed., May 1992, page 106),
 * it notes that System V release 3.2 and later has an option "[no]exrc".
 * The behavior is that local .exrc files are read only if the exrc option
 * is set.  The default for the exrc option was off, so, by default, local
 * .exrc files were not read.  The problem this was intended to solve was
 * that System V permitted users to give away files, so there's no possible
 * ownership or writeability test to ensure that the file is safe.
 *
 * POSIX 1003.2-1992 standardized exrc as an option.  It required the exrc
 * option to be off by default, thus local .exrc files are not to be read
 * by default.  The Rationale noted (incorrectly) that this was a change
 * to historic practice, but correctly noted that a default of off improves
 * system security.  POSIX also required that vi check the effective user
 * ID instead of the real user ID, which is why we've switched from historic
 * practice.
 *
 * We initialize the exrc variable to off.  If it's turned on by the system
 * or $HOME .exrc files, and the local .exrc file passes the ownership and
 * writeability tests, then we read it.  This breaks historic 4BSD practice,
 * but it gives us a measure of security on systems where users can give away
 * files.
 */
static enum rc
exrc_isok(SCR *sp, struct stat *sbp, int *fdp, char *path, int rootown,
    int rootid)
{
	enum { ROOTOWN, OWN, WRITER } etype;
	uid_t euid;
	int nf1, nf2;
	char *a, *b, buf[PATH_MAX];

	if ((*fdp = open(path, O_RDONLY, 0)) < 0) {
		if (errno == ENOENT)
                        /* This is the only case where ex_exrc()
                         * should silently try the next file, for
                         * example .exrc after .nexrc.
			 */
			return (NOEXIST);

		msgq_str(sp, M_SYSERR, path, "%s");
		return (NOPERM);
	}

	if (fstat(*fdp, sbp)) {
		msgq_str(sp, M_SYSERR, path, "%s");
		close(*fdp);
		return (NOPERM);
	}

	/* Check ownership permissions. */
	euid = geteuid();
	if (!(rootown && sbp->st_uid == 0) &&
	    !(rootid && euid == 0) && sbp->st_uid != euid) {
		etype = rootown ? ROOTOWN : OWN;
		goto denied;
	}

	/* Check writeability. */
	if (sbp->st_mode & (S_IWGRP | S_IWOTH)) {
		etype = WRITER;
		goto denied;
	}
	return (RCOK);

denied:	a = msg_print(sp, path, &nf1);
	if (strchr(path, '/') == NULL && getcwd(buf, sizeof(buf)) != NULL) {
		b = msg_print(sp, buf, &nf2);
		switch (etype) {
		case ROOTOWN:
			msgq(sp, M_ERR,
			    "%s/%s: not sourced: not owned by you or root",
			    b, a);
			break;
		case OWN:
			msgq(sp, M_ERR,
			    "%s/%s: not sourced: not owned by you", b, a);
			break;
		case WRITER:
			msgq(sp, M_ERR,
    "%s/%s: not sourced: writable by a user other than the owner", b, a);
			break;
		}
		if (nf2)
			FREE_SPACE(sp, b, 0);
	} else
		switch (etype) {
		case ROOTOWN:
			msgq(sp, M_ERR,
			    "%s: not sourced: not owned by you or root", a);
			break;
		case OWN:
			msgq(sp, M_ERR,
			    "%s: not sourced: not owned by you", a);
			break;
		case WRITER:
			msgq(sp, M_ERR,
	    "%s: not sourced: writable by a user other than the owner", a);
			break;
		}

	if (nf1)
		FREE_SPACE(sp, a, 0);
	close(*fdp);
	return (NOPERM);
}
@


1.16
log
@Remove needless type casts and corresponding type parameters from
allocation macros. No binary change.

ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.15 2015/11/19 07:53:31 bentley Exp $	*/
d386 1
a386 1
			    "125|%s/%s: not sourced: not owned by you or root",
d391 1
a391 1
			    "126|%s/%s: not sourced: not owned by you", b, a);
d395 1
a395 1
    "127|%s/%s: not sourced: writable by a user other than the owner", b, a);
d404 1
a404 1
			    "128|%s: not sourced: not owned by you or root", a);
d408 1
a408 1
			    "129|%s: not sourced: not owned by you", a);
d412 1
a412 1
	    "130|%s: not sourced: writable by a user other than the owner", a);
@


1.15
log
@Remove cscope support in vi.

It makes no sense to keep support for a non-base tool in base, especially
for a feature that few if any people use.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.14 2015/01/16 06:40:14 deraadt Exp $	*/
d47 1
a47 1
	CALLOC_RET(orig, nexp, EX_PRIVATE *, 1, sizeof(EX_PRIVATE));
d275 1
a275 1
		CALLOC_RET(sp, ecp, EXCMD *, 1, sizeof(EXCMD));
@


1.14
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.13 2014/11/12 16:29:04 millert Exp $	*/
a52 1
	LIST_INIT(&nexp->cscq);
@


1.13
log
@Remove more portability bits for older systems; from Martin Natano
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.12 2014/11/12 04:28:41 bentley Exp $	*/
a13 1
#include <sys/param.h>
d137 1
a137 1
	char *p, path[MAXPATHLEN];
d346 1
a346 1
	char *a, *b, buf[MAXPATHLEN];
@


1.12
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.11 2013/12/01 16:47:59 krw Exp $	*/
a14 1
#include <sys/types.h>		/* XXX: param.h may not have included types.h */
@


1.11
log
@Change the tag queue from CIRCLEQ to TAILQ.

Fixes & ok zhuk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.10 2013/05/03 20:43:25 kili Exp $	*/
d44 1
a44 2
ex_screen_copy(orig, sp)
	SCR *orig, *sp;
d79 1
a79 2
ex_screen_end(sp)
	SCR *sp;
d119 1
a119 5
ex_optchange(sp, offset, str, valp)
	SCR *sp;
	int offset;
	char *str;
	u_long *valp;
d136 1
a136 2
ex_exrc(sp)
	SCR *sp;
d253 1
a253 4
ex_run_file(sp, fd, name)
	SCR *sp;
	int fd;
	char *name;
d270 2
a271 5
ex_run_str(sp, name, str, len, ex_flags, nocopy)
	SCR *sp;
	char *name, *str;
	size_t len;
	int ex_flags, nocopy;
d342 2
a343 6
exrc_isok(sp, sbp, fdp, path, rootown, rootid)
	SCR *sp;
	struct stat *sbp;
	int *fdp;
	char *path;
	int rootown, rootid;
@


1.10
log
@Use open(2) / fstat(2) instead of stat(2) / open(2) for checking
proper permissions of "local" .exrc or .nexrc files.

With some hints and fixes from deraadt@@ and tobias@@.

ok millert@@ tobias@@

(more tweaks suggested by millert@@ and some cleanup will be done
in separate diffs)
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.9 2009/10/27 23:59:47 deraadt Exp $	*/
d54 1
a54 1
	CIRCLEQ_INIT(&nexp->tq);
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.8 2002/12/15 13:30:17 henning Exp $	*/
d20 1
d33 1
a33 1
static enum rc	exrc_isok(SCR *, struct stat *, char *, int, int);
d35 1
a35 1
static int ex_run_file(SCR *, char *);
d147 1
d173 1
a173 1
	switch (exrc_isok(sp, &hsb, _PATH_SYSEXRC, 1, 0)) {
d178 1
a178 1
		if (ex_run_file(sp, _PATH_SYSEXRC))
d197 1
a197 1
		switch (exrc_isok(sp, &hsb, path, 0, 1)) {
d201 2
a202 2
			if (exrc_isok(sp,
			    &hsb, path, 0, 1) == RCOK && ex_run_file(sp, path))
d208 1
a208 1
			if (ex_run_file(sp, path))
d222 1
a222 1
		switch (exrc_isok(sp, &lsb, _PATH_NEXRC, 0, 0)) {
d224 9
a232 5
			if (exrc_isok(sp, &lsb, _PATH_EXRC, 0, 0) == RCOK &&
			    (lsb.st_dev != hsb.st_dev ||
			    lsb.st_ino != hsb.st_ino) &&
			    ex_run_file(sp, _PATH_EXRC))
				return (1);
d237 6
a242 4
			if ((lsb.st_dev != hsb.st_dev ||
			    lsb.st_ino != hsb.st_ino) &&
			    ex_run_file(sp, _PATH_NEXRC))
				return (1);
d260 1
a260 1
ex_run_file(sp, name)
d262 1
d270 1
a270 1
	return (ex_source(sp, &cmd));
d320 1
a320 1
 *	Check a .exrc file for source-ability.
d355 1
a355 1
exrc_isok(sp, sbp, path, rootown, rootid)
d358 1
d367 17
a383 3
	/* Check for the file's existence. */
	if (stat(path, sbp))
		return (NOEXIST);
d438 1
@


1.8
log
@more writable spelling; torh
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.7 2002/02/16 21:27:57 millert Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)ex_init.c	10.26 (Berkeley) 8/12/96";
#endif /* not lint */
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_init.c,v 1.6 2001/01/29 01:58:43 niklas Exp $	*/
d395 1
a395 1
    "127|%s/%s: not sourced: writeable by a user other than the owner", b, a);
d412 1
a412 1
	    "130|%s: not sourced: writeable by a user other than the owner", a);
@


1.6
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
static enum rc	exrc_isok __P((SCR *, struct stat *, char *, int, int));
d38 1
a38 1
static int ex_run_file __P((SCR *, char *));
d44 1
a44 1
 * PUBLIC: int ex_screen_copy __P((SCR *, SCR *));
d80 1
a80 1
 * PUBLIC: int ex_screen_end __P((SCR *));
d121 1
a121 1
 * PUBLIC: int ex_optchange __P((SCR *, int, char *, u_long *));
d142 1
a142 1
 * PUBLIC: int ex_exrc __P((SCR *));
d272 1
a272 1
 * PUBLIC: int ex_run_str __P((SCR *, char *, char *, size_t, int, int));
@


1.5
log
@nvi 1.74
@
text
@d1 2
@


1.4
log
@nvi 1.73
@
text
@d13 1
a13 1
static const char sccsid[] = "@@(#)ex_init.c	10.25 (Berkeley) 7/10/96";
a57 1
	TAILQ_INIT(&nexp->cdq);
a107 3
	if (ex_cdfree(sp))
		rval = 1;

a128 2
	case O_CDPATH:
		return (ex_cdalloc(sp, str));
@


1.3
log
@bring vi/ex up to 1.71
@
text
@d13 1
a13 1
static const char sccsid[] = "@@(#)ex_init.c	10.24 (Berkeley) 6/30/96";
d189 6
d220 1
a220 1
	/* Run the commands, they may set the exrc edit option. */
d226 1
@


1.2
log
@new vi
@
text
@d13 1
a13 1
static const char sccsid[] = "@@(#)ex_init.c	10.22 (Berkeley) 5/15/96";
d190 1
a190 1
		if (ex_run_str(sp, "NEXINIT", p, strlen(p), 1, 1))
d193 1
a193 1
		if (ex_run_str(sp, "EXINIT", p, strlen(p), 1, 1))
d293 1
a293 2
	else {
		/* See ex.h for a discussion of SEARCH_TERMINATION. */
a295 1
	}
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)ex_init.c	8.18 (Berkeley) 8/17/94";
d16 2
a17 1
#include <sys/types.h>
d19 1
a19 1
#include <sys/time.h>
d22 1
a22 1
#include <errno.h>
a23 1
#include <signal.h>
d27 5
a31 1
#include <termios.h>
d33 2
a34 3
#include "compat.h"
#include <db.h>
#include <regex.h>
d36 1
a36 3
#include "vi.h"
#include "excmd.h"
#include "tag.h"
d41 2
d55 1
a55 1
	TAILQ_INIT(&nexp->tagq);
d57 1
a58 1
	CIRCLEQ_INIT(&nexp->rangeq);
a60 1
		nexp->at_lbuf_set = 0;
a63 3
		nexp->at_lbuf = oexp->at_lbuf;
		nexp->at_lbuf_set = oexp->at_lbuf_set;

d69 1
a69 2

		if (ex_tagcopy(orig, sp))
d78 2
d88 3
d92 4
a95 1
	exp = EXP(sp);
d101 1
a101 1
		FREE(exp->ibp, exp->ibp_len);
d104 1
a104 1
		FREE(exp->lastbcomm, strlen(exp->lastbcomm) + 1);
d106 1
a106 1
	if (ex_tagfree(sp))
d113 1
a113 1
	FREE(exp, sizeof(EX_PRIVATE));
d120 27
a146 2
 * ex_init --
 *	Initialize ex.
d149 1
a149 1
ex_init(sp, ep)
a150 1
	EXF *ep;
d152 2
a153 1
	size_t len;
d156 22
a177 3
	 * The default address is the last line of the file.  If the address
	 * set bit is on for this file, load the address, ensuring that it
	 * exists.
d179 9
a187 3
	if (F_ISSET(sp->frp, FR_CURSORSET)) {
		sp->lno = sp->frp->lno;
		sp->cno = sp->frp->cno;
d189 46
a234 2
		if (file_gline(sp, ep, sp->lno, &len) == NULL) {
			if (file_lline(sp, ep, &sp->lno))
d236 7
a242 11
			if (sp->lno == 0)
				sp->lno = 1;
			sp->cno = 0;
		} else if (sp->cno >= len)
			sp->cno = 0;
	} else {
		if (file_lline(sp, ep, &sp->lno))
			return (1);
		if (sp->lno == 0)
			sp->lno = 1;
		sp->cno = 0;
d245 18
a262 2
	/* Display the status line. */
	return (msg_status(sp, ep, sp->lno, 0));
d266 4
a269 2
 * ex_end --
 *	End ex session.
d272 1
a272 1
ex_end(sp)
d274 3
d278 31
d313 34
a346 2
 * ex_optchange --
 *	Handle change of options for vi.
d348 2
a349 2
int
ex_optchange(sp, opt)
d351 3
a353 1
	int opt;
d355 21
a375 5
	switch (opt) {
	case O_CDPATH:
		return (ex_cdalloc(sp, O_STR(sp, O_CDPATH)));
	case O_TAGS:
		return (ex_tagalloc(sp, O_STR(sp, O_TAGS)));
d377 41
a417 1
	return (0);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
