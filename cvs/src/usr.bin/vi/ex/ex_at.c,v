head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.8
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.6
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.05.27.09.18.12;	author martijn;	state Exp;
branches;
next	1.13;
commitid	01nAnartGL7onLD3;

1.13
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.12;
commitid	ruCZ2IKF0FB0ebCr;

1.12
date	2015.12.07.20.39.19;	author mmcc;	state Exp;
branches;
next	1.11;
commitid	gtDERb7QyXwKGs62;

1.11
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.10;
commitid	06bi6U3x4gFFf2G1;

1.10
date	2013.12.01.13.42.42;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2013.11.25.23.27.11;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.19.12.16;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.57;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.01.58.41;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.09.17.17.19.02;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.07.24.16.15.51;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.35.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: ex_at.c,v 1.12 2015/12/07 20:39:19 mmcc Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>

#include <bitstring.h>
#include <ctype.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "../common/common.h"

/*
 * ex_at -- :@@[@@ | buffer]
 *	    :*[* | buffer]
 *
 *	Execute the contents of the buffer.
 *
 * PUBLIC: int ex_at(SCR *, EXCMD *);
 */
int
ex_at(SCR *sp, EXCMD *cmdp)
{
	CB *cbp;
	CHAR_T name;
	EXCMD *ecp;
	RANGE *rp;
	TEXT *tp;
	size_t len;
	char *p;

	/*
	 * !!!
	 * Historically, [@@*]<carriage-return> and [@@*][@@*] executed the most
	 * recently executed buffer in ex mode.
	 */
	name = FL_ISSET(cmdp->iflags, E_C_BUFFER) ? cmdp->buffer : '@@';
	if (name == '@@' || name == '*') {
		if (!F_ISSET(sp, SC_AT_SET)) {
			ex_emsg(sp, NULL, EXM_NOPREVBUF);
			return (1);
		}
		name = sp->at_lbuf;
	}
	sp->at_lbuf = name;
	F_SET(sp, SC_AT_SET);

	CBNAME(sp, cbp, name);
	if (cbp == NULL) {
		ex_emsg(sp, KEY_NAME(sp, name), EXM_EMPTYBUF);
		return (1);
	}

	/*
	 * !!!
	 * Historically the @@ command took a range of lines, and the @@ buffer
	 * was executed once per line.  The historic vi could be trashed by
	 * this because it didn't notice if the underlying file changed, or,
	 * for that matter, if there were no more lines on which to operate.
	 * For example, take a 10 line file, load "%delete" into a buffer,
	 * and enter :8,10@@<buffer>.
	 *
	 * The solution is a bit tricky.  If the user specifies a range, take
	 * the same approach as for global commands, and discard the command
	 * if exit or switch to a new file/screen.  If the user doesn't specify
	 * the  range, continue to execute after a file/screen switch, which
	 * means @@ buffers are still useful in a multi-screen environment.
	 */
	CALLOC_RET(sp, ecp, 1, sizeof(EXCMD));
	TAILQ_INIT(&ecp->rq);
	CALLOC_RET(sp, rp, 1, sizeof(RANGE));
	rp->start = cmdp->addr1.lno;
	if (F_ISSET(cmdp, E_ADDR_DEF)) {
		rp->stop = rp->start;
		FL_SET(ecp->agv_flags, AGV_AT_NORANGE);
	} else {
		rp->stop = cmdp->addr2.lno;
		FL_SET(ecp->agv_flags, AGV_AT);
	}
	TAILQ_INSERT_HEAD(&ecp->rq, rp, q);

	/*
	 * Buffers executed in ex mode or from the colon command line in vi
	 * were ex commands.  We can't push it on the terminal queue, since
	 * it has to be executed immediately, and we may be in the middle of
	 * an ex command already.  Push the command on the ex command stack.
	 * Build two copies of the command.  We need two copies because the
	 * ex parser may step on the command string when it's parsing it.
	 */
	len = 0;
	TAILQ_FOREACH_REVERSE(tp, &cbp->textq, _texth, q) {
		len += tp->len + 1;
	}

	MALLOC_RET(sp, ecp->cp, len * 2);
	ecp->o_cp = ecp->cp;
	ecp->o_clen = len;
	ecp->cp[len] = '\0';

	/* Copy the buffer into the command space. */
	p = ecp->cp + len;
	TAILQ_FOREACH_REVERSE(tp, &cbp->textq, _texth, q) {
		memcpy(p, tp->lb, tp->len);
		p += tp->len;
		*p++ = '\n';
	}

	LIST_INSERT_HEAD(&sp->gp->ecq, ecp, q);
	return (0);
}
@


1.13
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d38 1
a38 1
	char name;
@


1.12
log
@Remove needless type casts and corresponding type parameters from
allocation macros. No binary change.

ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_at.c,v 1.11 2014/11/12 04:28:41 bentley Exp $	*/
d38 1
a38 1
	CHAR_T name;
@


1.11
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_at.c,v 1.10 2013/12/01 13:42:42 krw Exp $	*/
d82 1
a82 1
	CALLOC_RET(sp, ecp, EXCMD *, 1, sizeof(EXCMD));
d84 1
a84 1
	CALLOC_RET(sp, rp, RANGE *, 1, sizeof(RANGE));
d108 1
a108 1
	MALLOC_RET(sp, ecp->cp, char *, len * 2);
@


1.10
log
@Convert the ranges CIRCLEQ to TAILQ.

ok zhuk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_at.c,v 1.9 2013/11/25 23:27:11 krw Exp $	*/
d35 1
a35 3
ex_at(sp, cmdp)
	SCR *sp;
	EXCMD *cmdp;
@


1.9
log
@Replace _texth CIRCLEQ with TAILQ. One down, five to go.

Read, tested, fixed and ok'd zhuk@@ pelikan@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_at.c,v 1.8 2009/10/27 23:59:47 deraadt Exp $	*/
d85 1
a85 1
	CIRCLEQ_INIT(&ecp->rq);
d95 1
a95 1
	CIRCLEQ_INSERT_HEAD(&ecp->rq, rp, q);
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_at.c,v 1.7 2005/10/17 19:12:16 otto Exp $	*/
d105 2
a106 2
	for (len = 0, tp = CIRCLEQ_LAST(&cbp->textq);
	    tp != CIRCLEQ_END(&cbp->textq); tp = CIRCLEQ_PREV(tp, q))
d108 1
d116 2
a117 2
	for (p = ecp->cp + len, tp = CIRCLEQ_LAST(&cbp->textq);
	    tp != CIRCLEQ_END(&cbp->textq); tp = CIRCLEQ_PREV(tp, q)) {
@


1.7
log
@Use queue macros instead of directly accessing fields. ok pat@@ "put it
in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_at.c,v 1.6 2002/02/16 21:27:57 millert Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)ex_at.c	10.12 (Berkeley) 9/15/96";
#endif /* not lint */
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_at.c,v 1.5 2001/01/29 01:58:41 niklas Exp $	*/
d109 2
a110 2
	for (len = 0, tp = cbp->textq.cqh_last;
	    tp != (void *)&cbp->textq; tp = tp->q.cqe_prev)
d119 2
a120 2
	for (p = ecp->cp + len, tp = cbp->textq.cqh_last;
	    tp != (void *)&cbp->textq; tp = tp->q.cqe_prev) {
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
 * PUBLIC: int ex_at __P((SCR *, EXCMD *));
@


1.4
log
@nvi 1.76:
        + Fix bug where ^V didn't keep input mapping from happening.
        + Fix a core dump bug in the R command.
        + Give up on licensing: no more shareware, adware, whatever.
        + Fix cursor positioning bug for C, S and c$ in an empty file.
@
text
@d1 2
@


1.3
log
@bring vi/ex up to 1.71
@
text
@d13 1
a13 1
static const char sccsid[] = "@@(#)ex_at.c	10.11 (Berkeley) 6/30/96";
d119 1
a119 1
		memmove(p, tp->lb, tp->len);
@


1.2
log
@new vi
@
text
@d13 1
a13 1
static const char sccsid[] = "@@(#)ex_at.c	10.10 (Berkeley) 4/27/96";
d111 1
a111 2
	/* See ex.h for a discussion of SEARCH_TERMINATION. */
	MALLOC_RET(sp, ecp->cp, char *, len * 2 + SEARCH_TERMINATION);
d117 1
a117 1
	for (p = ecp->cp + len + SEARCH_TERMINATION, tp = cbp->textq.cqh_last;
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)ex_at.c	8.27 (Berkeley) 8/17/94";
a17 1
#include <sys/time.h>
a21 1
#include <signal.h>
a24 1
#include <termios.h>
d26 1
a26 6
#include "compat.h"
#include <db.h>
#include <regex.h>

#include "vi.h"
#include "excmd.h"
d33 2
d37 1
a37 1
ex_at(sp, ep, cmdp)
d39 1
a39 2
	EXF *ep;
	EXCMDARG *cmdp;
d42 3
a44 1
	EX_PRIVATE *exp;
d46 2
a47 3
	int name;

	exp = EXP(sp);
d52 1
a52 3
	 * recently executed buffer in ex mode.  In vi mode, only @@@@ repeated
	 * the last buffer.  We change historic practice and make @@* work from
	 * vi mode as well, it's simpler and more consistent.
d54 1
a54 1
	name = F_ISSET(cmdp, E_BUFFER) ? cmdp->buffer : '@@';
d56 2
a57 2
		if (!exp->at_lbuf_set) {
			msgq(sp, M_ERR, "No previous buffer to execute");
d60 1
a60 1
		name = exp->at_lbuf;
d62 2
d67 1
a67 1
		msgq(sp, M_ERR, "Buffer %s is empty", KEY_NAME(sp, name));
d71 27
a97 3
	/* Save for reuse. */
	exp->at_lbuf = name;
	exp->at_lbuf_set = 1;
d100 6
a105 5
	 * !!!
	 * Historic practice is that if the buffer was cut in line mode,
	 * <newlines> were appended to each line as it was pushed onto
	 * the stack.  If the buffer was cut in character mode, <newlines>
	 * were appended to all lines but the last one.
d107 1
a107 1
	for (tp = cbp->textq.cqh_last;
d109 17
a125 5
		if ((F_ISSET(cbp, CB_LMODE) ||
		    tp->q.cqe_next != (void *)&cbp->textq) &&
		    term_push(sp, "\n", 1, 0) ||
		    term_push(sp, tp->lb, tp->len, 0))
			return (1);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
