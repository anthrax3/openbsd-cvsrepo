head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.18
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.05.27.09.18.12;	author martijn;	state Exp;
branches;
next	1.12;
commitid	01nAnartGL7onLD3;

1.12
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.11;
commitid	ruCZ2IKF0FB0ebCr;

1.11
date	2016.01.06.22.29.38;	author millert;	state Exp;
branches;
next	1.10;
commitid	RiORzAsItDrPYyBm;

1.10
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.9;
commitid	06bi6U3x4gFFf2G1;

1.9
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.22.03.09.15;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.11.06.58.00;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.19.19.39.39;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.18.20.35.13;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.29.01.58.43;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.35.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: ex_print.c,v 1.11 2016/01/06 22:29:38 millert Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>

#include <bitstring.h>
#include <ctype.h>
#include <limits.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

#include "../common/common.h"

static int ex_prchars(SCR *, const char *, size_t *, size_t, u_int, int);

/*
 * ex_list -- :[line [,line]] l[ist] [count] [flags]
 *
 *	Display the addressed lines such that the output is unambiguous.
 *
 * PUBLIC: int ex_list(SCR *, EXCMD *);
 */
int
ex_list(SCR *sp, EXCMD *cmdp)
{
	if (ex_print(sp, cmdp,
	    &cmdp->addr1, &cmdp->addr2, cmdp->iflags | E_C_LIST))
		return (1);
	sp->lno = cmdp->addr2.lno;
	sp->cno = cmdp->addr2.cno;
	return (0);
}

/*
 * ex_number -- :[line [,line]] nu[mber] [count] [flags]
 *
 *	Display the addressed lines with a leading line number.
 *
 * PUBLIC: int ex_number(SCR *, EXCMD *);
 */
int
ex_number(SCR *sp, EXCMD *cmdp)
{
	if (ex_print(sp, cmdp,
	    &cmdp->addr1, &cmdp->addr2, cmdp->iflags | E_C_HASH))
		return (1);
	sp->lno = cmdp->addr2.lno;
	sp->cno = cmdp->addr2.cno;
	return (0);
}

/*
 * ex_pr -- :[line [,line]] p[rint] [count] [flags]
 *
 *	Display the addressed lines.
 *
 * PUBLIC: int ex_pr(SCR *, EXCMD *);
 */
int
ex_pr(SCR *sp, EXCMD *cmdp)
{
	if (ex_print(sp, cmdp, &cmdp->addr1, &cmdp->addr2, cmdp->iflags))
		return (1);
	sp->lno = cmdp->addr2.lno;
	sp->cno = cmdp->addr2.cno;
	return (0);
}

/*
 * ex_print --
 *	Print the selected lines.
 *
 * PUBLIC: int ex_print(SCR *, EXCMD *, MARK *, MARK *, u_int32_t);
 */
int
ex_print(SCR *sp, EXCMD *cmdp, MARK *fp, MARK *tp, u_int32_t flags)
{
	recno_t from, to;
	size_t col, len;
	char *p, buf[10];

	NEEDFILE(sp, cmdp);

	for (from = fp->lno, to = tp->lno; from <= to; ++from) {
		col = 0;

		/*
		 * Display the line number.  The %6 format is specified
		 * by POSIX 1003.2, and is almost certainly large enough.
		 * Check, though, just in case.
		 */
		if (LF_ISSET(E_C_HASH)) {
			if (from <= 999999) {
				snprintf(buf, sizeof(buf), "%6lu  ", (ulong)from);
				p = buf;
			} else
				p = "TOOBIG  ";
			if (ex_prchars(sp, p, &col, 8, 0, 0))
				return (1);
		}

		/*
		 * Display the line.  The format for E_C_PRINT isn't very good,
		 * especially in handling end-of-line tabs, but they're almost
		 * backward compatible.
		 */
		if (db_get(sp, from, DBG_FATAL, &p, &len))
			return (1);

		if (len == 0 && !LF_ISSET(E_C_LIST))
			(void)ex_puts(sp, "\n");
		else if (ex_ldisplay(sp, p, len, col, flags))
			return (1);

		if (INTERRUPTED(sp))
			break;
	}
	return (0);
}

/*
 * ex_ldisplay --
 *	Display a line without any preceding number.
 *
 * PUBLIC: int ex_ldisplay(SCR *, const char *, size_t, size_t, u_int);
 */
int
ex_ldisplay(SCR *sp, const char *p, size_t len, size_t col, u_int flags)
{
	if (len > 0 && ex_prchars(sp, p, &col, len, LF_ISSET(E_C_LIST), 0))
		return (1);
	if (!INTERRUPTED(sp) && LF_ISSET(E_C_LIST)) {
		p = "$";
		if (ex_prchars(sp, p, &col, 1, LF_ISSET(E_C_LIST), 0))
			return (1);
	}
	if (!INTERRUPTED(sp))
		(void)ex_puts(sp, "\n");
	return (0);
}

/*
 * ex_scprint --
 *	Display a line for the substitute with confirmation routine.
 *
 * PUBLIC: int ex_scprint(SCR *, MARK *, MARK *);
 */
int
ex_scprint(SCR *sp, MARK *fp, MARK *tp)
{
	const char *p;
	size_t col, len;

	col = 0;
	if (O_ISSET(sp, O_NUMBER)) {
		p = "        ";
		if (ex_prchars(sp, p, &col, 8, 0, 0))
			return (1);
	}

	if (db_get(sp, fp->lno, DBG_FATAL, (char **)&p, &len))
		return (1);

	if (ex_prchars(sp, p, &col, fp->cno, 0, ' '))
		return (1);
	p += fp->cno;
	if (ex_prchars(sp,
	    p, &col, tp->cno == fp->cno ? 1 : tp->cno - fp->cno, 0, '^'))
		return (1);
	if (INTERRUPTED(sp))
		return (1);
	p = "[ynq]";
	if (ex_prchars(sp, p, &col, 5, 0, 0))
		return (1);
	(void)ex_fflush(sp);
	return (0);
}

/*
 * ex_prchars --
 *	Local routine to dump characters to the screen.
 */
static int
ex_prchars(SCR *sp, const char *p, size_t *colp, size_t len, u_int flags,
    int repeatc)
{
	CHAR_T ch, *kp;
	size_t col, tlen, ts;

	if (O_ISSET(sp, O_LIST))
		LF_SET(E_C_LIST);
	ts = O_VAL(sp, O_TABSTOP);
	for (col = *colp; len--;)
		if ((ch = *p++) == '\t' && !LF_ISSET(E_C_LIST))
			for (tlen = ts - col % ts;
			    col < sp->cols && tlen--; ++col) {
				(void)ex_printf(sp,
				    "%c", repeatc ? repeatc : ' ');
				if (INTERRUPTED(sp))
					goto intr;
			}
		else {
			kp = KEY_NAME(sp, ch);
			tlen = KEY_LEN(sp, ch);
			if (!repeatc  && col + tlen < sp->cols) {
				(void)ex_puts(sp, kp);
				col += tlen;
			} else
				for (; tlen--; ++kp, ++col) {
					if (col == sp->cols) {
						col = 0;
						(void)ex_puts(sp, "\n");
					}
					(void)ex_printf(sp,
					    "%c", repeatc ? repeatc : *kp);
					if (INTERRUPTED(sp))
						goto intr;
				}
		}
intr:	*colp = col;
	return (0);
}

/*
 * ex_printf --
 *	Ex's version of printf.
 *
 * PUBLIC: int ex_printf(SCR *, const char *, ...);
 */
int
ex_printf(SCR *sp, const char *fmt, ...)
{
	EX_PRIVATE *exp;
	va_list ap;
	size_t n;

	exp = EXP(sp);

	va_start(ap, fmt);
	n = vsnprintf(exp->obp + exp->obp_len,
	    sizeof(exp->obp) - exp->obp_len, fmt, ap);
	va_end(ap);
	if (n >= sizeof(exp->obp) - exp->obp_len)
		n = sizeof(exp->obp) - exp->obp_len - 1;
	exp->obp_len += n;

	/* Flush when reach a <newline> or half the buffer. */
	if (exp->obp[exp->obp_len - 1] == '\n' ||
	    exp->obp_len > sizeof(exp->obp) / 2)
		(void)ex_fflush(sp);
	return (n);
}

/*
 * ex_puts --
 *	Ex's version of puts.
 *
 * PUBLIC: int ex_puts(SCR *, const char *);
 */
int
ex_puts(SCR *sp, const char *str)
{
	EX_PRIVATE *exp;
	int doflush, n;

	exp = EXP(sp);

	/* Flush when reach a <newline> or the end of the buffer. */
	for (doflush = n = 0; *str != '\0'; ++n) {
		if (exp->obp_len > sizeof(exp->obp))
			(void)ex_fflush(sp);
		if ((exp->obp[exp->obp_len++] = *str++) == '\n')
			doflush = 1;
	}
	if (doflush)
		(void)ex_fflush(sp);
	return (n);
}

/*
 * ex_fflush --
 *	Ex's version of fflush.
 *
 * PUBLIC: int ex_fflush(SCR *sp);
 */
int
ex_fflush(SCR *sp)
{
	EX_PRIVATE *exp;

	exp = EXP(sp);

	if (exp->obp_len != 0) {
		sp->gp->scr_msg(sp, M_NONE, exp->obp, exp->obp_len);
		exp->obp_len = 0;
	}
	return (0);
}
@


1.12
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d199 1
a199 1
	char ch, *kp;
@


1.11
log
@Remove the msg_cat() function and adjust its former callers.
From Martijn van Duren
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_print.c,v 1.10 2014/11/12 04:28:41 bentley Exp $	*/
d199 1
a199 1
	CHAR_T ch, *kp;
@


1.10
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_print.c,v 1.9 2009/10/27 23:59:47 deraadt Exp $	*/
d184 1
a184 1
	p = "[ynq]";		/* XXX: should be msg_cat. */
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_print.c,v 1.8 2006/04/22 03:09:15 ray Exp $	*/
d36 1
a36 3
ex_list(sp, cmdp)
	SCR *sp;
	EXCMD *cmdp;
d54 1
a54 3
ex_number(sp, cmdp)
	SCR *sp;
	EXCMD *cmdp;
d72 1
a72 3
ex_pr(sp, cmdp)
	SCR *sp;
	EXCMD *cmdp;
d88 1
a88 5
ex_print(sp, cmdp, fp, tp, flags)
	SCR *sp;
	EXCMD *cmdp;
	MARK *fp, *tp;
	u_int32_t flags;
d140 1
a140 5
ex_ldisplay(sp, p, len, col, flags)
	SCR *sp;
	const char *p;
	size_t len, col;
	u_int flags;
d161 1
a161 3
ex_scprint(sp, fp, tp)
	SCR *sp;
	MARK *fp, *tp;
d196 2
a197 6
ex_prchars(sp, p, colp, len, flags, repeatc)
	SCR *sp;
	const char *p;
	size_t *colp, len;
	u_int flags;
	int repeatc;
d273 1
a273 3
ex_puts(sp, str)
	SCR *sp;
	const char *str;
d299 1
a299 2
ex_fflush(sp)
	SCR *sp;
@


1.8
log
@Removes unused variables and rename variables shadowing external
variables.  No binary change.

Found by lint.

OK otto@@ and jaredy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_print.c,v 1.7 2006/03/11 06:58:00 ray Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)ex_print.c	10.18 (Berkeley) 5/12/96";
#endif /* not lint */
@


1.7
log
@Silence 39 warnings.

ok miod, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_print.c,v 1.6 2002/02/19 19:39:39 millert Exp $	*/
a103 1
	GS *gp;
a109 1
	gp = sp->gp;
a223 1
	GS *gp;
a227 1
	gp = sp->gp;
@


1.6
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_print.c,v 1.5 2002/02/16 21:27:57 millert Exp $	*/
d122 1
a122 1
				snprintf(buf, sizeof(buf), "%6ld  ", from);
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_print.c,v 1.4 2001/08/18 20:35:13 millert Exp $	*/
d24 1
a27 6
#ifdef __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

a270 1
#ifdef __STDC__
a271 6
#else
ex_printf(sp, fmt, va_alist)
	SCR *sp;
	const char *fmt;
	va_dcl
#endif
a278 1
#ifdef __STDC__
a279 3
#else
	va_start(ap);
#endif
@


1.4
log
@Range check snprintf() return value
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_print.c,v 1.3 2001/01/29 01:58:43 niklas Exp $	*/
d35 1
a35 1
static int ex_prchars __P((SCR *, const char *, size_t *, size_t, u_int, int));
d42 1
a42 1
 * PUBLIC: int ex_list __P((SCR *, EXCMD *));
d62 1
a62 1
 * PUBLIC: int ex_number __P((SCR *, EXCMD *));
d82 1
a82 1
 * PUBLIC: int ex_pr __P((SCR *, EXCMD *));
d100 1
a100 1
 * PUBLIC: int ex_print __P((SCR *, EXCMD *, MARK *, MARK *, u_int32_t));
d158 1
a158 1
 * PUBLIC: int ex_ldisplay __P((SCR *, const char *, size_t, size_t, u_int));
d183 1
a183 1
 * PUBLIC: int ex_scprint __P((SCR *, MARK *, MARK *));
d273 1
a273 1
 * PUBLIC: int ex_printf __P((SCR *, const char *, ...));
d314 1
a314 1
 * PUBLIC: int ex_puts __P((SCR *, const char *));
d342 1
a342 1
 * PUBLIC: int ex_fflush __P((SCR *sp));
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d296 1
a296 1
	exp->obp_len += n = vsnprintf(exp->obp + exp->obp_len,
d299 3
@


1.2
log
@new vi
@
text
@d1 2
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)ex_print.c	8.16 (Berkeley) 8/17/94";
a17 1
#include <sys/time.h>
a21 1
#include <signal.h>
a23 1
#include <termios.h>
d25 7
a31 3
#include "compat.h"
#include <db.h>
#include <regex.h>
d33 1
a33 2
#include "vi.h"
#include "excmd.h"
d39 2
d43 1
a43 1
ex_list(sp, ep, cmdp)
d45 1
a45 2
	EXF *ep;
	EXCMDARG *cmdp;
d47 2
a48 2
	if (ex_print(sp, ep,
	    &cmdp->addr1, &cmdp->addr2, cmdp->flags | E_F_LIST))
d59 2
d63 1
a63 1
ex_number(sp, ep, cmdp)
d65 1
a65 2
	EXF *ep;
	EXCMDARG *cmdp;
d67 2
a68 2
	if (ex_print(sp, ep,
	    &cmdp->addr1, &cmdp->addr2, cmdp->flags | E_F_HASH))
d79 2
d83 1
a83 1
ex_pr(sp, ep, cmdp)
d85 1
a85 2
	EXF *ep;
	EXCMDARG *cmdp;
d87 1
a87 1
	if (ex_print(sp, ep, &cmdp->addr1, &cmdp->addr2, cmdp->flags))
d97 2
d101 1
a101 1
ex_print(sp, ep, fp, tp, flags)
d103 1
a103 1
	EXF *ep;
d105 1
a105 1
	register int flags;
d107 1
d110 3
a112 1
	char *p;
d114 1
a114 1
	F_SET(sp, S_INTERRUPTIBLE);
d116 2
d123 9
a131 7
		if (LF_ISSET(E_F_HASH))
			if (from <= 999999)
				col = ex_printf(EXCOOKIE, "%6ld  ", from);
			else
				col = ex_printf(EXCOOKIE, "TOOBIG  ");
		else
			col = 0;
d134 1
a134 1
		 * Display the line.  The format for E_F_PRINT isn't very good,
d138 1
a138 2
		if ((p = file_gline(sp, ep, from, &len)) == NULL) {
			GETLINE_ERR(sp, from);
a139 1
		}
d141 2
a142 2
		if (len == 0 && !LF_ISSET(E_F_LIST))
			(void)ex_printf(EXCOOKIE, "\n");
a148 1

d154 3
a156 1
 *	Display a line.
d159 1
a159 1
ex_ldisplay(sp, lp, len, col, flags)
d161 1
a161 1
	CHAR_T *lp;
d165 63
d229 2
a230 2
	u_long ts;
	size_t tlen;
d232 3
d236 2
a237 8
	for (;; --len) {
		if (len > 0)
			ch = *lp++;
		else if (LF_ISSET(E_F_LIST))
			ch = '$';
		else
			break;
		if (ch == '\t' && !LF_ISSET(E_F_LIST))
d239 6
a244 2
			    col < sp->cols && tlen--; ++col)
				(void)ex_printf(EXCOOKIE, " ");
d248 2
a249 2
			if (col + tlen < sp->cols) {
				(void)ex_printf(EXCOOKIE, "%s", kp);
d255 1
a255 1
						(void)ex_printf(EXCOOKIE, "\n");
d257 4
a260 1
					(void)ex_printf(EXCOOKIE, "%c", *kp);
d263 87
a349 2
		if (len == 0)
			break;
a350 1
	(void)ex_printf(EXCOOKIE, "\n");
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
