head	1.8;
access;
symbols
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.34
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.30
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.28
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.26
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.24
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.22
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.20
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2014.11.20.08.50.53;	author bentley;	state dead;
branches;
next	1.7;
commitid	DAfFYTGOAzdEQS6z;

1.7
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.6;
commitid	06bi6U3x4gFFf2G1;

1.6
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.29.01.58.43;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.17.17.19.04;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.08.16.17.58.36;	author michaels;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.35.55;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove the vi perl api.

There have been various build errors for coming on two years now.
It doesn't work and nobody has expressed any interest in saving it.

From natano; ok millert@@
@
text
@/*	$OpenBSD: ex_perl.c,v 1.7 2014/11/12 04:28:41 bentley Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 * Copyright (c) 1995
 *	George V. Neville-Neil. All rights reserved.
 * Copyright (c) 1996
 *	Sven Verdoolaege. All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/time.h>

#include <bitstring.h>
#include <ctype.h>
#include <limits.h>
#include <stdio.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>

#include "../common/common.h"

/* 
 * ex_perl -- :[line [,line]] perl [command]
 *	Run a command through the perl interpreter.
 *
 * ex_perldo -- :[line [,line]] perldo [command]
 *	Run a set of lines through the perl interpreter.
 *
 * PUBLIC: int ex_perl(SCR*, EXCMD *);
 */
int 
ex_perl(SCR *sp, EXCMD *cmdp)
{
#ifdef HAVE_PERL_INTERP
	CHAR_T *p;
	size_t len;

	/* Skip leading white space. */
	if (cmdp->argc != 0)
		for (p = cmdp->argv[0]->bp,
		    len = cmdp->argv[0]->len; len > 0; --len, ++p)
			if (!isblank(*p))
				break;
	if (cmdp->argc == 0 || len == 0) {
		ex_emsg(sp, cmdp->cmd->usage, EXM_USAGE);
		return (1);
	}
	return (cmdp->cmd == &cmds[C_PERLCMD] ?
	    perl_ex_perl(sp, p, len, cmdp->addr1.lno, cmdp->addr2.lno) :
	    perl_ex_perldo(sp, p, len, cmdp->addr1.lno, cmdp->addr2.lno));
#else
	msgq(sp, M_ERR, "306|Vi was not loaded with a Perl interpreter");
	return (1);
#endif
}
@


1.7
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_perl.c,v 1.6 2009/10/27 23:59:47 deraadt Exp $	*/
@


1.6
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_perl.c,v 1.5 2002/02/16 21:27:57 millert Exp $	*/
d42 1
a42 3
ex_perl(sp, cmdp)
	SCR *sp;
	EXCMD *cmdp;
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_perl.c,v 1.4 2001/01/29 01:58:43 niklas Exp $	*/
a16 4

#ifndef lint
static const char sccsid[] = "@@(#)ex_perl.c	8.10 (Berkeley) 9/15/96";
#endif /* not lint */
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 1
 * PUBLIC: int ex_perl __P((SCR*, EXCMD *));
@


1.3
log
@nvi 1.76:
        + Fix bug where ^V didn't keep input mapping from happening.
        + Fix a core dump bug in the R command.
        + Give up on licensing: no more shareware, adware, whatever.
        + Fix cursor positioning bug for C, S and c$ in an empty file.
@
text
@d1 2
@


1.2
log
@nvi 1.73
@
text
@d17 1
a17 1
static const char sccsid[] = "@@(#)ex_perl.c	8.9 (Berkeley) 7/19/96";
a26 1
#include <signal.h>
@


1.1
log
@new vi
@
text
@d17 1
a17 1
static const char sccsid[] = "@@(#)ex_perl.c	8.6 (Berkeley) 3/18/96";
a34 24
#ifdef HAVE_PERL_INTERP
#include <EXTERN.h>
#include <perl.h>
#include <XSUB.h>

static int perl_eval(string)
	char *string;
{
	char *argv[2];

	argv[0] = string;
	argv[1] = NULL;
	perl_call_argv("_eval_", G_EVAL | G_DISCARD | G_KEEPERR, argv);
}
#else

static void
noperl(scrp)
	SCR *scrp;
{
	msgq(scrp, M_ERR, "306|Vi was not loaded with a Perl interpreter");
}
#endif

d39 1
a39 50
 * PUBLIC: int ex_perl __P((SCR*, EXCMD *));
 */
int 
ex_perl(scrp, cmdp)
	SCR *scrp;
	EXCMD *cmdp;
{
#ifdef HAVE_PERL_INTERP
	CHAR_T *p;
	GS *gp;
	STRLEN length;
	size_t len;
	char *err, buf[64];

	/* Initialize the interpreter. */
	gp = scrp->gp;
	if (gp->perl_interp == NULL && perl_init(gp))
		return (1);

	/* Skip leading white space. */
	if (cmdp->argc != 0)
		for (p = cmdp->argv[0]->bp,
		    len = cmdp->argv[0]->len; len > 0; --len, ++p)
			if (!isblank(*p))
				break;
	if (cmdp->argc == 0 || len == 0) {
		ex_emsg(scrp, cmdp->cmd->usage, EXM_USAGE);
		return (1);
	}

	(void)snprintf(buf, sizeof(buf),
	    "$VI::ScreenId=%d;$VI::StartLine=%lu;$VI::StopLine=%lu",
	    scrp->id, cmdp->addr1.lno, cmdp->addr2.lno);
	perl_eval(buf);
	perl_eval(cmdp->argv[0]->bp);
	err = SvPV(GvSV(errgv),length);
	if (!length)
		return (0);

	err[length - 1] = '\0';
	msgq(scrp, M_ERR, "perl: %s", err);
	return (1);
#else
	noperl(scrp);
	return (1);
#endif /* HAVE_PERL_INTERP */
}

/* 
 * ex_perldo -- :[line [,line]] perl [command]
d42 1
a42 1
 * PUBLIC: int ex_perldo __P((SCR*, EXCMD *));
d45 2
a46 2
ex_perldo(scrp, cmdp)
	SCR *scrp;
a50 2
	GS *gp;
	STRLEN length;
a51 8
	int i;
	char *str, *argv[2];
	dSP;

	/* Initialize the interpreter. */
	gp = scrp->gp;
	if (gp->perl_interp == NULL && perl_init(gp))
		return (1);
d60 1
a60 1
		ex_emsg(scrp, cmdp->cmd->usage, EXM_USAGE);
d63 3
a65 28

	argv[0] = cmdp->argv[0]->bp;
	argv[1] = NULL;

	ENTER;
	SAVETMPS;
	for (i = cmdp->addr1.lno; i <= cmdp->addr2.lno; i++) {
		/*api_gline(scrp, i, argv+1, &len);*/
		api_gline(scrp, i, &str, &len);
		sv_setpvn(perl_get_sv("_", FALSE),str,len);
		perl_call_argv("_eval_", G_SCALAR | G_EVAL | G_KEEPERR, argv);
		str = SvPV(GvSV(errgv),length);
		if (length) break;
		SPAGAIN;
		if(SvTRUEx(POPs)) {
			str = SvPV(perl_get_sv("_", FALSE),len);
			api_sline(scrp, i, str, len);
		}
		PUTBACK;
	}
	FREETMPS;
	LEAVE;
	if (!length)
		return (0);

	str[length - 1] = '\0';
	msgq(scrp, M_ERR, "perl: %s", str);
	return (1);
d67 1
a67 1
	noperl(scrp);
d69 1
a69 1
#endif /* HAVE_PERL_INTERP */
@
