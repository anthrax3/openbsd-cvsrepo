head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.4
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2017.04.18.01.45.35;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	Pd2TRHz7UBFr9JGt;

1.13
date	2015.12.07.20.39.19;	author mmcc;	state Exp;
branches;
next	1.12;
commitid	gtDERb7QyXwKGs62;

1.12
date	2014.11.20.08.50.53;	author bentley;	state Exp;
branches;
next	1.11;
commitid	DAfFYTGOAzdEQS6z;

1.11
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.10;
commitid	06bi6U3x4gFFf2G1;

1.10
date	2013.11.28.22.12.40;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2013.11.25.23.27.11;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.19.12.16;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.57;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.01.58.31;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.09.17.17.18.56;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.08.16.17.58.24;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.34.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@free(NULL) is ok so use it; from Michael W. Bombardieri
@
text
@/*	$OpenBSD: screen.c,v 1.13 2015/12/07 20:39:19 mmcc Exp $	*/

/*-
 * Copyright (c) 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/time.h>

#include <bitstring.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "common.h"
#include "../vi/vi.h"

/*
 * screen_init --
 *	Do the default initialization of an SCR structure.
 *
 * PUBLIC: int screen_init(GS *, SCR *, SCR **);
 */
int
screen_init(GS *gp, SCR *orig, SCR **spp)
{
	SCR *sp;
	size_t len;

	*spp = NULL;
	CALLOC_RET(orig, sp, 1, sizeof(SCR));
	*spp = sp;

/* INITIALIZED AT SCREEN CREATE. */
	sp->id = ++gp->id;
	sp->refcnt = 1;

	sp->gp = gp;				/* All ref the GS structure. */

	sp->ccnt = 2;				/* Anything > 1 */

	/*
	 * XXX
	 * sp->defscroll is initialized by the opts_init() code because
	 * we don't have the option information yet.
	 */

	TAILQ_INIT(&sp->tiq);

/* PARTIALLY OR COMPLETELY COPIED FROM PREVIOUS SCREEN. */
	if (orig == NULL) {
		sp->searchdir = NOTSET;
	} else {
		/* Alternate file name. */
		if (orig->alt_name != NULL &&
		    (sp->alt_name = strdup(orig->alt_name)) == NULL)
			goto mem;

		/* Last executed at buffer. */
		if (F_ISSET(orig, SC_AT_SET)) {
			F_SET(sp, SC_AT_SET);
			sp->at_lbuf = orig->at_lbuf;
		}

		/* Retain searching/substitution information. */
		sp->searchdir = orig->searchdir == NOTSET ? NOTSET : FORWARD;
		if (orig->re != NULL && (sp->re =
		    v_strdup(sp, orig->re, orig->re_len)) == NULL)
			goto mem;
		sp->re_len = orig->re_len;
		if (orig->subre != NULL && (sp->subre =
		    v_strdup(sp, orig->subre, orig->subre_len)) == NULL)
			goto mem;
		sp->subre_len = orig->subre_len;
		if (orig->repl != NULL && (sp->repl =
		    v_strdup(sp, orig->repl, orig->repl_len)) == NULL)
			goto mem;
		sp->repl_len = orig->repl_len;
		if (orig->newl_len) {
			len = orig->newl_len * sizeof(size_t);
			MALLOC(sp, sp->newl, len);
			if (sp->newl == NULL) {
mem:				msgq(orig, M_SYSERR, NULL);
				goto err;
			}
			sp->newl_len = orig->newl_len;
			sp->newl_cnt = orig->newl_cnt;
			memcpy(sp->newl, orig->newl, len);
		}

		if (opts_copy(orig, sp))
			goto err;

		F_SET(sp, F_ISSET(orig, SC_EX | SC_VI));
	}

	if (ex_screen_copy(orig, sp))		/* Ex. */
		goto err;
	if (v_screen_copy(orig, sp))		/* Vi. */
		goto err;

	*spp = sp;
	return (0);

err:	screen_end(sp);
	return (1);
}

/*
 * screen_end --
 *	Release a screen, no matter what had (and had not) been
 *	initialized.
 *
 * PUBLIC: int screen_end(SCR *);
 */
int
screen_end(SCR *sp)
{
	int rval;
	SCR *tsp;

	/* If multiply referenced, just decrement the count and return. */
	 if (--sp->refcnt != 0)
		 return (0);

	/*
	 * Remove the screen from the displayed and hidden queues.
	 *
	 * If a created screen failed during initialization, it may not
	 * be linked into a queue.
	 */
	TAILQ_FOREACH(tsp, &sp->gp->dq, q) {
		if (tsp == sp) {
			TAILQ_REMOVE(&sp->gp->dq, sp, q);
			break;
		}
	}
	TAILQ_FOREACH(tsp, &sp->gp->hq, q) {
		if (tsp == sp) {
			TAILQ_REMOVE(&sp->gp->hq, sp, q);
			break;
		}
	}

	/* The screen is no longer real. */
	F_CLR(sp, SC_SCR_EX | SC_SCR_VI);

	rval = 0;
	if (v_screen_end(sp))			/* End vi. */
		rval = 1;
	if (ex_screen_end(sp))			/* End ex. */
		rval = 1;

	/* Free file names. */
	{ char **ap;
		if (!F_ISSET(sp, SC_ARGNOFREE) && sp->argv != NULL) {
			for (ap = sp->argv; *ap != NULL; ++ap)
				free(*ap);
			free(sp->argv);
		}
	}

	/* Free any text input. */
	if (TAILQ_FIRST(&sp->tiq) != NULL)
		text_lfree(&sp->tiq);

	/* Free alternate file name. */
	free(sp->alt_name);

	/* Free up search information. */
	free(sp->re);
	if (F_ISSET(sp, SC_RE_SEARCH))
		regfree(&sp->re_c);
	free(sp->subre);
	if (F_ISSET(sp, SC_RE_SUBST))
		regfree(&sp->subre_c);
	free(sp->repl);
	free(sp->newl);

	/* Free all the options */
	opts_free(sp);

	/* Free the screen itself. */
	free(sp);

	return (rval);
}

/*
 * screen_next --
 *	Return the next screen in the queue.
 *
 * PUBLIC: SCR *screen_next(SCR *);
 */
SCR *
screen_next(SCR *sp)
{
	GS *gp;
	SCR *next;

	/* Try the display queue, without returning the current screen. */
	gp = sp->gp;
	TAILQ_FOREACH(next, &gp->dq, q)
		if (next != sp)
			return (next);

	/* Try the hidden queue; if found, move screen to the display queue. */
	if (!TAILQ_EMPTY(&gp->hq)) {
		next = TAILQ_FIRST(&gp->hq);
		TAILQ_REMOVE(&gp->hq, next, q);
		TAILQ_INSERT_HEAD(&gp->dq, next, q);
		return (next);
	}
	return (NULL);
}
@


1.13
log
@Remove needless type casts and corresponding type parameters from
allocation macros. No binary change.

ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: screen.c,v 1.12 2014/11/20 08:50:53 bentley Exp $	*/
d179 1
a179 2
	if (sp->alt_name != NULL)
		free(sp->alt_name);
d182 1
a182 2
	if (sp->re != NULL)
		free(sp->re);
d185 1
a185 2
	if (sp->subre != NULL)
		free(sp->subre);
d188 2
a189 4
	if (sp->repl != NULL)
		free(sp->repl);
	if (sp->newl != NULL)
		free(sp->newl);
@


1.12
log
@Remove the vi perl api.

There have been various build errors for coming on two years now.
It doesn't work and nobody has expressed any interest in saving it.

From natano; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: screen.c,v 1.11 2014/11/12 04:28:41 bentley Exp $	*/
d42 1
a42 1
	CALLOC_RET(orig, sp, SCR *, 1, sizeof(SCR));
d92 1
a92 1
			MALLOC(sp, sp->newl, size_t *, len);
@


1.11
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: screen.c,v 1.10 2013/11/28 22:12:40 krw Exp $	*/
a159 4
#ifdef HAVE_PERL_INTERP
	if (perl_screen_end(sp))		/* End perl. */
		rval = 1;
#endif
@


1.10
log
@Convert the display screens and hidden screens CIRCLEQ's to TAILQ's.

ok pelikan@@ zhuk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: screen.c,v 1.9 2013/11/25 23:27:11 krw Exp $	*/
d36 1
a36 3
screen_init(gp, orig, spp)
	GS *gp;
	SCR *orig, **spp;
d128 1
a128 2
screen_end(sp)
	SCR *sp;
d216 1
a216 2
screen_next(sp)
	SCR *sp;
@


1.9
log
@Replace _texth CIRCLEQ with TAILQ. One down, five to go.

Read, tested, fixed and ok'd zhuk@@ pelikan@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: screen.c,v 1.8 2009/10/27 23:59:47 deraadt Exp $	*/
d134 1
d141 1
a141 1
	 * Remove the screen from the displayed queue.
d144 1
a144 1
	 * be linked into the chain.
d146 12
a157 2
	if (CIRCLEQ_NEXT(sp, q) != NULL)
		CIRCLEQ_REMOVE(&sp->gp->dq, sp, q);
d227 1
a227 1
	CIRCLEQ_FOREACH(next, &gp->dq, q)
d229 1
a229 3
			break;
	if (next != (void *)&gp->dq)
		return (next);
d232 4
a235 4
	if (CIRCLEQ_FIRST(&gp->hq) != CIRCLEQ_END(&gp->hq)) {
		next = CIRCLEQ_FIRST(&gp->hq);
		CIRCLEQ_REMOVE(&gp->hq, next, q);
		CIRCLEQ_INSERT_HEAD(&gp->dq, next, q);
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: screen.c,v 1.7 2005/10/17 19:12:16 otto Exp $	*/
d61 1
a61 1
	CIRCLEQ_INIT(&sp->tiq);
d171 1
a171 1
	if (CIRCLEQ_FIRST(&sp->tiq) != NULL)
@


1.7
log
@Use queue macros instead of directly accessing fields. ok pat@@ "put it
in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: screen.c,v 1.6 2002/02/16 21:27:57 millert Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)screen.c	10.15 (Berkeley) 9/15/96";
#endif /* not lint */
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: screen.c,v 1.5 2001/01/29 01:58:31 niklas Exp $	*/
d149 1
a149 1
	if (sp->q.cqe_next != NULL)
d175 1
a175 1
	if (sp->tiq.cqh_first != NULL)
d220 1
a220 2
	for (next = gp->dq.cqh_first;
	    next != (void *)&gp->dq; next = next->q.cqe_next)
d227 2
a228 2
	if (gp->hq.cqh_first != (void *)&gp->hq) {
		next = gp->hq.cqh_first;
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
a37 1
 * PUBLIC: int screen_init __P((GS *, SCR *, SCR **));
d131 1
a131 1
 * PUBLIC: int screen_end __P((SCR *));
d209 1
a209 1
 * PUBLIC: SCR *screen_next __P((SCR *));
@


1.4
log
@nvi 1.76:
        + Fix bug where ^V didn't keep input mapping from happening.
        + Fix a core dump bug in the R command.
        + Give up on licensing: no more shareware, adware, whatever.
        + Fix cursor positioning bug for C, S and c$ in an empty file.
@
text
@d1 2
@


1.3
log
@nvi 1.73
@
text
@d13 1
a13 1
static const char sccsid[] = "@@(#)screen.c	10.14 (Berkeley) 7/19/96";
d103 1
a103 1
			memmove(sp->newl, orig->newl, len);
@


1.2
log
@new vi
@
text
@d13 1
a13 1
static const char sccsid[] = "@@(#)screen.c	10.13 (Berkeley) 5/10/96";
d154 4
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)screen.c	8.67 (Berkeley) 8/17/94";
a22 1
#include <signal.h>
a25 1
#include <termios.h>
d28 2
a29 8
#include "compat.h"
#include <db.h>
#include <regex.h>

#include "vi.h"
#include "../vi/vcmd.h"
#include "excmd.h"
#include "../ex/tag.h"
d34 2
d38 2
a39 1
screen_init(orig, spp, flags)
a40 1
	u_int flags;
d50 2
a51 1
	sp->gp = __global_list;			/* All ref the GS structure. */
d53 1
a53 2
	LIST_INIT(&sp->msgq);
	CIRCLEQ_INIT(&sp->frefq);
a56 2
	FD_ZERO(&sp->rdfd);

d63 1
a63 2
	sp->tiqp = &sp->__tiq;
	CIRCLEQ_INIT(&sp->__tiq);
a67 19

		switch (flags & S_SCREENS) {
		case S_EX:
			if (sex_screen_init(sp))
				return (1);
			break;
		case S_VI_CURSES:
			if (svi_screen_init(sp))
				return (1);
			break;
		case S_VI_XAW:
			if (xaw_screen_init(sp))
				return (1);
			break;
		default:
			abort();
		}

		sp->flags = flags;
d69 1
d74 4
a77 8
		/* Retain all searching/substitution information. */
		if (F_ISSET(orig, S_SRE_SET)) {
			F_SET(sp, S_SRE_SET);
			sp->sre = orig->sre;
		}
		if (F_ISSET(orig, S_SUBRE_SET)) {
			F_SET(sp, S_SUBRE_SET);
			sp->subre = orig->subre;
d79 2
d82 12
a93 8

		if (orig->repl_len) {
			MALLOC(sp, sp->repl, char *, orig->repl_len);
			if (sp->repl == NULL)
				goto mem;
			sp->repl_len = orig->repl_len;
			memmove(sp->repl, orig->repl, orig->repl_len);
		}
d97 4
a100 2
			if (sp->newl == NULL)
				goto mem;
d106 2
a107 36
		sp->saved_vi_mode = orig->saved_vi_mode;

		if (opts_copy(orig, sp)) {
mem:			msgq(orig, M_SYSERR, "new screen attributes");
			(void)screen_end(sp);
			return (1);
		}

		sp->s_bell		= orig->s_bell;
		sp->s_bg		= orig->s_bg;
		sp->s_busy		= orig->s_busy;
		sp->s_change		= orig->s_change;
		sp->s_clear		= orig->s_clear;
		sp->s_colpos		= orig->s_colpos;
		sp->s_column		= orig->s_column;
		sp->s_confirm		= orig->s_confirm;
		sp->s_crel		= orig->s_crel;
		sp->s_edit		= orig->s_edit;
		sp->s_end		= orig->s_end;
		sp->s_ex_cmd		= orig->s_ex_cmd;
		sp->s_ex_run		= orig->s_ex_run;
		sp->s_ex_write		= orig->s_ex_write;
		sp->s_fg		= orig->s_fg;
		sp->s_fill		= orig->s_fill;
		sp->s_get		= orig->s_get;
		sp->s_key_read		= orig->s_key_read;
		sp->s_fmap		= orig->s_fmap;
		sp->s_optchange		= orig->s_optchange;
		sp->s_position		= orig->s_position;
		sp->s_rabs		= orig->s_rabs;
		sp->s_rcm		= orig->s_rcm;
		sp->s_refresh		= orig->s_refresh;
		sp->s_scroll		= orig->s_scroll;
		sp->s_split		= orig->s_split;
		sp->s_suspend		= orig->s_suspend;
		sp->s_window		= orig->s_window;
d109 1
a109 1
		F_SET(sp, F_ISSET(orig, S_SCREENS));
d112 4
a115 10
	if (xaw_screen_copy(orig, sp))		/* Init S_VI_XAW screen. */
		return (1);
	if (svi_screen_copy(orig, sp))		/* Init S_VI_CURSES screen. */
		return (1);
	if (sex_screen_copy(orig, sp))		/* Init S_EX screen. */
		return (1);
	if (v_screen_copy(orig, sp))		/* Init vi. */
		return (1);
	if (ex_screen_copy(orig, sp))		/* Init ex. */
		return (1);
d119 3
d126 4
a129 1
 *	Release a screen.
d137 16
a153 6
	if (xaw_screen_end(sp))			/* End S_VI_XAW screen. */
		rval = 1;
	if (svi_screen_end(sp))			/* End S_VI_CURSES screen. */
		rval = 1;
	if (sex_screen_end(sp))			/* End S_EX screen. */
		rval = 1;
a158 12
	/* Free FREF's. */
	{ FREF *frp;
		while ((frp = sp->frefq.cqh_first) != (FREF *)&sp->frefq) {
			CIRCLEQ_REMOVE(&sp->frefq, frp, q);
			if (frp->name != NULL)
				free(frp->name);
			if (frp->tname != NULL)
				free(frp->tname);
			FREE(frp, sizeof(FREF));
		}
	}

d161 1
a161 1
		if (!F_ISSET(sp, S_ARGNOFREE) && sp->argv != NULL) {
d169 2
a170 5
	text_lfree(&sp->__tiq);

	/* Free any script information. */
	if (F_ISSET(sp, S_SCRIPT))
		sscr_end(sp);
d177 8
d186 1
a186 1
		FREE(sp->repl, sp->repl_len);
d188 1
a188 1
		FREE(sp->newl, sp->newl_len);
d193 2
a194 21
	/*
	 * Free the message chain last, so previous failures have a place
	 * to put messages.  Copy messages to (in order) a related screen,
	 * any screen, the global area.
	 */
	{ SCR *c_sp; MSG *mp, *next;
		if ((c_sp = sp->q.cqe_prev) != (void *)&sp->gp->dq) {
			if (F_ISSET(sp, S_BELLSCHED))
				F_SET(c_sp, S_BELLSCHED);
		} else if ((c_sp = sp->q.cqe_next) != (void *)&sp->gp->dq) {
			if (F_ISSET(sp, S_BELLSCHED))
				F_SET(c_sp, S_BELLSCHED);
		} else if ((c_sp =
		    sp->gp->hq.cqh_first) != (void *)&sp->gp->hq) {
			if (F_ISSET(sp, S_BELLSCHED))
				F_SET(c_sp, S_BELLSCHED);
		} else {
			c_sp = NULL;
			if (F_ISSET(sp, S_BELLSCHED))
				F_SET(sp->gp, G_BELLSCHED);
		}
d196 2
a197 10
		for (mp = sp->msgq.lh_first; mp != NULL; mp = next) {
			if (!F_ISSET(mp, M_EMPTY))
				msg_app(sp->gp, c_sp,
				    mp->flags & M_INV_VIDEO, mp->mbuf, mp->len);
			next = mp->q.le_next;
			if (mp->mbuf != NULL)
				FREE(mp->mbuf, mp->blen);
			FREE(mp, sizeof(MSG));
		}
	}
d199 12
a210 4
	/* Remove the screen from the displayed queue. */
	SIGBLOCK(sp->gp);
	CIRCLEQ_REMOVE(&sp->gp->dq, sp, q);
	SIGUNBLOCK(sp->gp);
d212 8
a219 2
	/* Free the screen itself. */
	FREE(sp, sizeof(SCR));
d221 8
a228 1
	return (rval);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
