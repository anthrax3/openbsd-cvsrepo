head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.54
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.58
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.56
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.52
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.50
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.48
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.46
	OPENBSD_5_0:1.4.0.44
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.42
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.40
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.36
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.38
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.34
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.32
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.30
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.28
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.26
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.24
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.22
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.04.24.21.48.31;	author brynet;	state Exp;
branches;
next	1.4;
commitid	snOxq6D74oYtevTu;

1.4
date	2001.01.29.01.58.29;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.08.16.17.58.20;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.33.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@struct timespec/clock_gettime(3) conversion for vi(1).

ok guenther@@
@
text
@/*	$OpenBSD: exf.h,v 1.4 2001/01/29 01:58:29 niklas Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 *
 *	@@(#)exf.h	10.7 (Berkeley) 7/9/96
 */
					/* Undo direction. */
/*
 * exf --
 *	The file structure.
 */
struct _exf {
	int	 refcnt;		/* Reference count. */

					/* Underlying database state. */
	DB	*db;			/* File db structure. */
	char	*c_lp;			/* Cached line. */
	size_t	 c_len;			/* Cached line length. */
	recno_t	 c_lno;			/* Cached line number. */
	recno_t	 c_nlines;		/* Cached lines in the file. */

	DB	*log;			/* Log db structure. */
	char	*l_lp;			/* Log buffer. */
	size_t	 l_len;			/* Log buffer length. */
	recno_t	 l_high;		/* Log last + 1 record number. */
	recno_t	 l_cur;			/* Log current record number. */
	MARK	 l_cursor;		/* Log cursor position. */
	dir_t	 lundo;			/* Last undo direction. */

	LIST_HEAD(_markh, _lmark) marks;/* Linked list of file MARK's. */

	dev_t	 mdev;			/* Device. */
	ino_t	 minode;		/* Inode. */
	struct timespec	mtim;		/* Last modification time. */

	int	 fcntl_fd;		/* Fcntl locking fd; see exf.c. */

	/*
	 * Recovery in general, and these fields specifically, are described
	 * in recover.c.
	 */
#define	RCV_PERIOD	120		/* Sync every two minutes. */
	char	*rcv_path;		/* Recover file name. */
	char	*rcv_mpath;		/* Recover mail file name. */
	int	 rcv_fd;		/* Locked mail file descriptor. */

#define	F_DEVSET	0x001		/* mdev/minode fields initialized. */
#define	F_FIRSTMODIFY	0x002		/* File not yet modified. */
#define	F_MODIFIED	0x004		/* File is currently dirty. */
#define	F_MULTILOCK	0x008		/* Multiple processes running, lock. */
#define	F_NOLOG		0x010		/* Logging turned off. */
#define	F_RCV_NORM	0x020		/* Don't delete recovery files. */
#define	F_RCV_ON	0x040		/* Recovery is possible. */
#define	F_UNDO		0x080		/* No change since last undo. */
	u_int8_t flags;
};

/* Flags to db_get(). */
#define	DBG_FATAL	0x001	/* If DNE, error message. */
#define	DBG_NOCACHE	0x002	/* Ignore the front-end cache. */

/* Flags to file_init() and file_write(). */
#define	FS_ALL		0x001	/* Write the entire file. */
#define	FS_APPEND	0x002	/* Append to the file. */
#define	FS_FORCE	0x004	/* Force is set. */
#define	FS_OPENERR	0x008	/* Open failed, try it again. */
#define	FS_POSSIBLE	0x010	/* Force could have been set. */
#define	FS_SETALT	0x020	/* Set alternate file name. */

/* Flags to rcv_sync(). */
#define	RCV_EMAIL	0x01	/* Send the user email, IFF file modified. */
#define	RCV_ENDSESSION	0x02	/* End the file session. */
#define	RCV_PRESERVE	0x04	/* Preserve backup file, IFF file modified. */
#define	RCV_SNAPSHOT	0x08	/* Snapshot the recovery, and send email. */
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a37 4
	/*
	 * XXX
	 * Mtime should be a struct timespec, but time_t is more portable.
	 */
d40 1
a40 1
	time_t	 mtime;			/* Last modification time. */
@


1.3
log
@nvi 1.73
@
text
@d1 2
@


1.2
log
@new vi
@
text
@d9 1
a9 1
 *	@@(#)exf.h	10.6 (Berkeley) 3/6/96
d55 8
a62 7
#define	F_FIRSTMODIFY	0x001		/* File not yet modified. */
#define	F_MODIFIED	0x002		/* File is currently dirty. */
#define	F_MULTILOCK	0x004		/* Multiple processes running, lock. */
#define	F_NOLOG		0x008		/* Logging turned off. */
#define	F_RCV_NORM	0x010		/* Don't delete recovery files. */
#define	F_RCV_ON	0x020		/* Recovery is possible. */
#define	F_UNDO		0x040		/* No change since last undo. */
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 15
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d9 1
a9 13
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)exf.h	8.35 (Berkeley) 8/4/94
d32 1
a32 1
	enum direction lundo;		/* Last undo direction. */
d36 6
a53 1
	struct timeval rcv_tod;		/* ITIMER_REAL: recovery time-of-day. */
d65 11
a75 29
#define	GETLINE_ERR(sp, lno) {						\
	msgq(sp, M_ERR,							\
	    "Error: %s/%d: unable to retrieve line %u",			\
	    tail(__FILE__), __LINE__, lno);				\
}

/* EXF routines. */
FREF	*file_add __P((SCR *, CHAR_T *));
int	 file_end __P((SCR *, EXF *, int));
int	 file_init __P((SCR *, FREF *, char *, int));
int	 file_m1 __P((SCR *, EXF *, int, int));
int	 file_m2 __P((SCR *, EXF *, int));
int	 file_m3 __P((SCR *, EXF *, int));

enum lockt { LOCK_FAILED, LOCK_SUCCESS, LOCK_UNAVAIL };
enum lockt
	 file_lock __P((char *, int *, int, int));

#define	FS_ALL		0x01	/* Write the entire file. */
#define	FS_APPEND	0x02	/* Append to the file. */
#define	FS_FORCE	0x04	/* Force is set. */
#define	FS_POSSIBLE	0x08	/* Force could be set. */
int	 file_write __P((SCR *, EXF *, MARK *, MARK *, char *, int));

/* Recovery routines. */
int	 rcv_init __P((SCR *, EXF *));
int	 rcv_list __P((SCR *));
int	 rcv_on __P((SCR *, EXF *));
int	 rcv_read __P((SCR *, FREF *));
d77 1
a81 11
int	 rcv_sync __P((SCR *, EXF *, u_int));
int	 rcv_tmp __P((SCR *, EXF *, char *));

/* DB interface routines */
int	 file_aline __P((SCR *, EXF *, int, recno_t, char *, size_t));
int	 file_dline __P((SCR *, EXF *, recno_t));
char	*file_gline __P((SCR *, EXF *, recno_t, size_t *));
int	 file_iline __P((SCR *, EXF *, recno_t, char *, size_t));
int	 file_lline __P((SCR *, EXF *, recno_t *));
char	*file_rline __P((SCR *, EXF *, recno_t, size_t *));
int	 file_sline __P((SCR *, EXF *, recno_t, char *, size_t));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
