head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.05.27.09.18.11;	author martijn;	state Exp;
branches;
next	1.12;
commitid	01nAnartGL7onLD3;

1.12
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.11;
commitid	ruCZ2IKF0FB0ebCr;

1.11
date	2015.12.07.20.39.19;	author mmcc;	state Exp;
branches;
next	1.10;
commitid	gtDERb7QyXwKGs62;

1.10
date	2015.01.16.06.40.14;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	Uu5nFG3wCl0LACBb;

1.9
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.8;
commitid	06bi6U3x4gFFf2G1;

1.8
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.19.12.16;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.17.19.42.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.57;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.29.01.58.32;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	99.11.26.22.49.08;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.34.17;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: seq.c,v 1.11 2015/12/07 20:39:19 mmcc Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/queue.h>

#include <bitstring.h>
#include <ctype.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "common.h"

#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

/*
 * seq_set --
 *	Internal version to enter a sequence.
 *
 * PUBLIC: int seq_set(SCR *, CHAR_T *,
 * PUBLIC:    size_t, CHAR_T *, size_t, CHAR_T *, size_t, seq_t, int);
 */
int
seq_set(SCR *sp, CHAR_T *name, size_t nlen, CHAR_T *input, size_t ilen,
    CHAR_T *output, size_t olen, seq_t stype, int flags)
{
	CHAR_T *p;
	SEQ *lastqp, *qp;
	int sv_errno;

	/*
	 * An input string must always be present.  The output string
	 * can be NULL, when set internally, that's how we throw away
	 * input.
	 *
	 * Just replace the output field if the string already set.
	 */
	if ((qp =
	    seq_find(sp, &lastqp, NULL, input, ilen, stype, NULL)) != NULL) {
		if (LF_ISSET(SEQ_NOOVERWRITE))
			return (0);
		if (output == NULL || olen == 0) {
			p = NULL;
			olen = 0;
		} else if ((p = v_strdup(sp, output, olen)) == NULL) {
			sv_errno = errno;
			goto mem1;
		}
		if (qp->output != NULL)
			free(qp->output);
		qp->olen = olen;
		qp->output = p;
		return (0);
	}

	/* Allocate and initialize SEQ structure. */
	CALLOC(sp, qp, 1, sizeof(SEQ));
	if (qp == NULL) {
		sv_errno = errno;
		goto mem1;
	}

	/* Name. */
	if (name == NULL || nlen == 0)
		qp->name = NULL;
	else if ((qp->name = v_strdup(sp, name, nlen)) == NULL) {
		sv_errno = errno;
		goto mem2;
	}
	qp->nlen = nlen;

	/* Input. */
	if ((qp->input = v_strdup(sp, input, ilen)) == NULL) {
		sv_errno = errno;
		goto mem3;
	}
	qp->ilen = ilen;

	/* Output. */
	if (output == NULL) {
		qp->output = NULL;
		olen = 0;
	} else if ((qp->output = v_strdup(sp, output, olen)) == NULL) {
		sv_errno = errno;
		free(qp->input);
mem3:		if (qp->name != NULL)
			free(qp->name);
mem2:		free(qp);
mem1:		errno = sv_errno;
		msgq(sp, M_SYSERR, NULL);
		return (1);
	}
	qp->olen = olen;

	/* Type, flags. */
	qp->stype = stype;
	qp->flags = flags;

	/* Link into the chain. */
	if (lastqp == NULL) {
		LIST_INSERT_HEAD(&sp->gp->seqq, qp, q);
	} else {
		LIST_INSERT_AFTER(lastqp, qp, q);
	}

	/* Set the fast lookup bit. */
	if (qp->input[0] < MAX_BIT_SEQ)
		bit_set(sp->gp->seqb, qp->input[0]);

	return (0);
}

/*
 * seq_delete --
 *	Delete a sequence.
 *
 * PUBLIC: int seq_delete(SCR *, CHAR_T *, size_t, seq_t);
 */
int
seq_delete(SCR *sp, CHAR_T *input, size_t ilen, seq_t stype)
{
	SEQ *qp;

	if ((qp = seq_find(sp, NULL, NULL, input, ilen, stype, NULL)) == NULL)
		return (1);
	return (seq_mdel(qp));
}

/*
 * seq_mdel --
 *	Delete a map entry, without lookup.
 *
 * PUBLIC: int seq_mdel(SEQ *);
 */
int
seq_mdel(SEQ *qp)
{
	LIST_REMOVE(qp, q);
	if (qp->name != NULL)
		free(qp->name);
	free(qp->input);
	if (qp->output != NULL)
		free(qp->output);
	free(qp);
	return (0);
}

/*
 * seq_find --
 *	Search the sequence list for a match to a buffer, if ispartial
 *	isn't NULL, partial matches count.
 *
 * PUBLIC: SEQ *seq_find
 * PUBLIC:(SCR *, SEQ **, EVENT *, CHAR_T *, size_t, seq_t, int *);
 */
SEQ *
seq_find(SCR *sp, SEQ **lastqp, EVENT *e_input, CHAR_T *c_input, size_t ilen,
    seq_t stype, int *ispartialp)
{
	SEQ *lqp, *qp;
	int diff;

	/*
	 * Ispartialp is a location where we return if there was a
	 * partial match, i.e. if the string were extended it might
	 * match something.
	 *
	 * XXX
	 * Overload the meaning of ispartialp; only the terminal key
	 * search doesn't want the search limited to complete matches,
	 * i.e. ilen may be longer than the match.
	 */
	if (ispartialp != NULL)
		*ispartialp = 0;
	for (lqp = NULL, qp = LIST_FIRST(&sp->gp->seqq);
	    qp != NULL; lqp = qp, qp = LIST_NEXT(qp, q)) {
		/*
		 * Fast checks on the first character and type, and then
		 * a real comparison.
		 */
		if (e_input == NULL) {
			if (qp->input[0] > c_input[0])
				break;
			if (qp->input[0] < c_input[0] ||
			    qp->stype != stype || F_ISSET(qp, SEQ_FUNCMAP))
				continue;
			diff = memcmp(qp->input, c_input, MINIMUM(qp->ilen, ilen));
		} else {
			if (qp->input[0] > e_input->e_c)
				break;
			if (qp->input[0] < e_input->e_c ||
			    qp->stype != stype || F_ISSET(qp, SEQ_FUNCMAP))
				continue;
			diff =
			    e_memcmp(qp->input, e_input, MINIMUM(qp->ilen, ilen));
		}
		if (diff > 0)
			break;
		if (diff < 0)
			continue;
		/*
		 * If the entry is the same length as the string, return a
		 * match.  If the entry is shorter than the string, return a
		 * match if called from the terminal key routine.  Otherwise,
		 * keep searching for a complete match.
		 */
		if (qp->ilen <= ilen) {
			if (qp->ilen == ilen || ispartialp != NULL) {
				if (lastqp != NULL)
					*lastqp = lqp;
				return (qp);
			}
			continue;
		}
		/*
		 * If the entry longer than the string, return partial match
		 * if called from the terminal key routine.  Otherwise, no
		 * match.
		 */
		if (ispartialp != NULL)
			*ispartialp = 1;
		break;
	}
	if (lastqp != NULL)
		*lastqp = lqp;
	return (NULL);
}

/*
 * seq_close --
 *	Discard all sequences.
 *
 * PUBLIC: void seq_close(GS *);
 */
void
seq_close(GS *gp)
{
	SEQ *qp;

	while ((qp = LIST_FIRST(&gp->seqq)) != NULL) {
		if (qp->name != NULL)
			free(qp->name);
		if (qp->input != NULL)
			free(qp->input);
		if (qp->output != NULL)
			free(qp->output);
		LIST_REMOVE(qp, q);
		free(qp);
	}
}

/*
 * seq_dump --
 *	Display the sequence entries of a specified type.
 *
 * PUBLIC: int seq_dump(SCR *, seq_t, int);
 */
int
seq_dump(SCR *sp, seq_t stype, int isname)
{
	CHAR_T *p;
	GS *gp;
	SEQ *qp;
	int cnt, len, olen;

	cnt = 0;
	gp = sp->gp;
	LIST_FOREACH(qp, &gp->seqq, q) {
		if (stype != qp->stype || F_ISSET(qp, SEQ_FUNCMAP))
			continue;
		++cnt;
		for (p = qp->input,
		    olen = qp->ilen, len = 0; olen > 0; --olen, ++p)
			len += ex_puts(sp, KEY_NAME(sp, *p));
		for (len = STANDARD_TAB - len % STANDARD_TAB; len > 0;)
			len -= ex_puts(sp, " ");

		if (qp->output != NULL)
			for (p = qp->output,
			    olen = qp->olen, len = 0; olen > 0; --olen, ++p)
				len += ex_puts(sp, KEY_NAME(sp, *p));
		else
			len = 0;

		if (isname && qp->name != NULL) {
			for (len = STANDARD_TAB - len % STANDARD_TAB; len > 0;)
				len -= ex_puts(sp, " ");
			for (p = qp->name,
			    olen = qp->nlen; olen > 0; --olen, ++p)
				(void)ex_puts(sp, KEY_NAME(sp, *p));
		}
		(void)ex_puts(sp, "\n");
	}
	return (cnt);
}

/*
 * seq_save --
 *	Save the sequence entries to a file.
 *
 * PUBLIC: int seq_save(SCR *, FILE *, char *, seq_t);
 */
int
seq_save(SCR *sp, FILE *fp, char *prefix, seq_t stype)
{
	CHAR_T *p;
	SEQ *qp;
	size_t olen;
	int ch;

	/* Write a sequence command for all keys the user defined. */
	LIST_FOREACH(qp, &sp->gp->seqq, q) {
		if (stype != qp->stype || !F_ISSET(qp, SEQ_USERDEF))
			continue;
		if (prefix)
			(void)fprintf(fp, "%s", prefix);
		for (p = qp->input, olen = qp->ilen; olen > 0; --olen) {
			ch = *p++;
			if (ch == CH_LITERAL || ch == '|' ||
			    isblank(ch) || KEY_VAL(sp, ch) == K_NL)
				(void)putc(CH_LITERAL, fp);
			(void)putc(ch, fp);
		}
		(void)putc(' ', fp);
		if (qp->output != NULL)
			for (p = qp->output,
			    olen = qp->olen; olen > 0; --olen) {
				ch = *p++;
				if (ch == CH_LITERAL || ch == '|' ||
				    KEY_VAL(sp, ch) == K_NL)
					(void)putc(CH_LITERAL, fp);
				(void)putc(ch, fp);
			}
		(void)putc('\n', fp);
	}
	return (0);
}

/*
 * e_memcmp --
 *	Compare a string of EVENT's to a string of CHAR_T's.
 *
 * PUBLIC: int e_memcmp(CHAR_T *, EVENT *, size_t);
 */
int
e_memcmp(CHAR_T *p1, EVENT *ep, size_t n)
{
	if (n != 0) {
                do {
                        if (*p1++ != ep->e_c)
                                return (*--p1 - ep->e_c);
			++ep;
                } while (--n != 0);
        }
        return (0);
}
@


1.12
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d32 2
a33 2
 * PUBLIC: int seq_set(SCR *, char *,
 * PUBLIC:    size_t, char *, size_t, char *, size_t, seq_t, int);
d36 2
a37 2
seq_set(SCR *sp, char *name, size_t nlen, char *input, size_t ilen,
    char *output, size_t olen, seq_t stype, int flags)
d39 1
a39 1
	char *p;
d119 1
a119 1
	if ((unsigned char) qp->input[0] < MAX_BIT_SEQ)
d129 1
a129 1
 * PUBLIC: int seq_delete(SCR *, char *, size_t, seq_t);
d132 1
a132 1
seq_delete(SCR *sp, char *input, size_t ilen, seq_t stype)
d166 1
a166 1
 * PUBLIC:(SCR *, SEQ **, EVENT *, char *, size_t, seq_t, int *);
d169 1
a169 1
seq_find(SCR *sp, SEQ **lastqp, EVENT *e_input, char *c_input, size_t ilen,
d273 1
a273 1
	char *p;
d318 1
a318 1
	char *p;
d353 1
a353 1
 *	Compare a string of EVENT's to a string of chars.
d355 1
a355 1
 * PUBLIC: int e_memcmp(char *, EVENT *, size_t);
d358 1
a358 1
e_memcmp(char *p1, EVENT *ep, size_t n)
@


1.11
log
@Remove needless type casts and corresponding type parameters from
allocation macros. No binary change.

ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seq.c,v 1.10 2015/01/16 06:40:14 deraadt Exp $	*/
d32 2
a33 2
 * PUBLIC: int seq_set(SCR *, CHAR_T *,
 * PUBLIC:    size_t, CHAR_T *, size_t, CHAR_T *, size_t, seq_t, int);
d36 2
a37 2
seq_set(SCR *sp, CHAR_T *name, size_t nlen, CHAR_T *input, size_t ilen,
    CHAR_T *output, size_t olen, seq_t stype, int flags)
d39 1
a39 1
	CHAR_T *p;
d119 1
a119 1
	if (qp->input[0] < MAX_BIT_SEQ)
d129 1
a129 1
 * PUBLIC: int seq_delete(SCR *, CHAR_T *, size_t, seq_t);
d132 1
a132 1
seq_delete(SCR *sp, CHAR_T *input, size_t ilen, seq_t stype)
d166 1
a166 1
 * PUBLIC:(SCR *, SEQ **, EVENT *, CHAR_T *, size_t, seq_t, int *);
d169 1
a169 1
seq_find(SCR *sp, SEQ **lastqp, EVENT *e_input, CHAR_T *c_input, size_t ilen,
d273 1
a273 1
	CHAR_T *p;
d318 1
a318 1
	CHAR_T *p;
d353 1
a353 1
 *	Compare a string of EVENT's to a string of CHAR_T's.
d355 1
a355 1
 * PUBLIC: int e_memcmp(CHAR_T *, EVENT *, size_t);
d358 1
a358 1
e_memcmp(CHAR_T *p1, EVENT *ep, size_t n)
@


1.10
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: seq.c,v 1.9 2014/11/12 04:28:41 bentley Exp $	*/
d69 1
a69 1
	CALLOC(sp, qp, SEQ *, 1, sizeof(SEQ));
@


1.9
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seq.c,v 1.8 2009/10/27 23:59:47 deraadt Exp $	*/
a13 1
#include <sys/param.h>
d26 2
d199 1
a199 1
			diff = memcmp(qp->input, c_input, MIN(qp->ilen, ilen));
d207 1
a207 1
			    e_memcmp(qp->input, e_input, MIN(qp->ilen, ilen));
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: seq.c,v 1.7 2005/10/17 19:12:16 otto Exp $	*/
d35 2
a36 6
seq_set(sp, name, nlen, input, ilen, output, olen, stype, flags)
	SCR *sp;
	CHAR_T *name, *input, *output;
	size_t nlen, ilen, olen;
	seq_t stype;
	int flags;
d131 1
a131 5
seq_delete(sp, input, ilen, stype)
	SCR *sp;
	CHAR_T *input;
	size_t ilen;
	seq_t stype;
d147 1
a147 2
seq_mdel(qp)
	SEQ *qp;
d168 2
a169 8
seq_find(sp, lastqp, e_input, c_input, ilen, stype, ispartialp)
	SCR *sp;
	SEQ **lastqp;
	EVENT *e_input;
	CHAR_T *c_input;
	size_t ilen;
	seq_t stype;
	int *ispartialp;
d247 1
a247 2
seq_close(gp)
	GS *gp;
d270 1
a270 4
seq_dump(sp, stype, isname)
	SCR *sp;
	seq_t stype;
	int isname;
d315 1
a315 5
seq_save(sp, fp, prefix, stype)
	SCR *sp;
	FILE *fp;
	char *prefix;
	seq_t stype;
d357 1
a357 4
e_memcmp(p1, ep, n)
	CHAR_T *p1;
	EVENT *ep;
	size_t n;
@


1.7
log
@Use queue macros instead of directly accessing fields. ok pat@@ "put it
in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seq.c,v 1.6 2002/02/17 19:42:34 millert Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)seq.c	10.10 (Berkeley) 3/30/96";
#endif /* not lint */
@


1.6
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: seq.c,v 1.5 2002/02/16 21:27:57 millert Exp $	*/
d205 2
a206 2
	for (lqp = NULL, qp = sp->gp->seqq.lh_first;
	    qp != NULL; lqp = qp, qp = qp->q.le_next) {
d271 1
a271 1
	while ((qp = gp->seqq.lh_first) != NULL) {
d302 1
a302 1
	for (qp = gp->seqq.lh_first; qp != NULL; qp = qp->q.le_next) {
d350 1
a350 1
	for (qp = sp->gp->seqq.lh_first; qp != NULL; qp = qp->q.le_next) {
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: seq.c,v 1.4 2001/01/29 01:58:32 niklas Exp $	*/
d35 2
a36 2
 * PUBLIC: int seq_set __P((SCR *, CHAR_T *,
 * PUBLIC:    size_t, CHAR_T *, size_t, CHAR_T *, size_t, seq_t, int));
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d136 1
a136 1
 * PUBLIC: int seq_delete __P((SCR *, CHAR_T *, size_t, seq_t));
d156 1
a156 1
 * PUBLIC: int seq_mdel __P((SEQ *));
d178 1
a178 1
 * PUBLIC:    __P((SCR *, SEQ **, EVENT *, CHAR_T *, size_t, seq_t, int *));
d263 1
a263 1
 * PUBLIC: void seq_close __P((GS *));
d287 1
a287 1
 * PUBLIC: int seq_dump __P((SCR *, seq_t, int));
d335 1
a335 1
 * PUBLIC: int seq_save __P((SCR *, FILE *, char *, seq_t));
d381 1
a381 1
 * PUBLIC: int e_memcmp __P((CHAR_T *, EVENT *, size_t));
@


1.3
log
@o Update README files etc. from nvi-1.79 so they have the correct info
o make port.h empty since we there is nothing we lack
o include <sys/param.h>, not <sys/types.h> in files that use MIN/MAX macros
o add perl api support since we have libperl (off by default)
@
text
@d1 2
@


1.2
log
@new vi
@
text
@d16 1
a16 1
#include <sys/types.h>
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)seq.c	8.33 (Berkeley) 8/17/94";
a17 1
#include <sys/time.h>
a22 1
#include <signal.h>
a25 5
#include <termios.h>

#include "compat.h"
#include <db.h>
#include <regex.h>
d27 1
a27 2
#include "vi.h"
#include "excmd.h"
d32 3
d41 1
a41 1
	enum seqtype stype;
d55 4
a58 1
	if ((qp = seq_find(sp, &lastqp, input, ilen, stype, NULL)) != NULL) {
d105 1
a105 1
mem2:		FREE(qp, sizeof(SEQ));
d133 2
d141 1
a141 1
	enum seqtype stype;
d145 1
a145 1
	if ((qp = seq_find(sp, NULL, input, ilen, stype, NULL)) == NULL)
d153 2
d166 1
a166 1
	FREE(qp, sizeof(SEQ));
d174 3
d179 1
a179 1
seq_find(sp, lastqp, input, ilen, stype, ispartialp)
d182 2
a183 1
	CHAR_T *input;
d185 1
a185 1
	enum seqtype stype;
d205 20
a224 9
		/* Fast checks on the first character and type. */
		if (qp->input[0] > input[0])
			break;
		if (qp->input[0] < input[0] ||
		    qp->stype != stype || F_ISSET(qp, SEQ_FUNCMAP))
			continue;

		/* Check on the real comparison. */
		diff = memcmp(qp->input, input, MIN(qp->ilen, ilen));
d258 24
d284 2
d290 1
a290 1
	enum seqtype stype;
d294 1
d299 2
a300 1
	for (qp = sp->gp->seqq.lh_first; qp != NULL; qp = qp->q.le_next) {
d306 1
a306 1
			len += ex_printf(EXCOOKIE, "%s", KEY_NAME(sp, *p));
d308 1
a308 1
			len -= ex_printf(EXCOOKIE, " ");
d313 1
a313 2
				len +=
				    ex_printf(EXCOOKIE, "%s", KEY_NAME(sp, *p));
d319 1
a319 1
				len -= ex_printf(EXCOOKIE, " ");
d322 1
a322 2
				(void)ex_printf(EXCOOKIE,
				    "%s", KEY_NAME(sp, *p));
d324 1
a324 1
		(void)ex_printf(EXCOOKIE, "\n");
d332 2
d340 1
a340 1
	enum seqtype stype;
d349 1
a349 2
		if (stype != qp->stype ||
		    F_ISSET(qp, SEQ_FUNCMAP) || !F_ISSET(qp, SEQ_USERDEF))
d373 22
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
