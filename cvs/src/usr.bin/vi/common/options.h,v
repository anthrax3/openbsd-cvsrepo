head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.48
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.44
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.40
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.42
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.34
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.38
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.36
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.32
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.30
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.28
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.26
	OPENBSD_5_0:1.8.0.24
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.22
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.20
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.16
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.18
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.14
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.12
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.10
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.16
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.14
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.12
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.10
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2006.01.08.21.05.39;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.57;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.29.01.58.31;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.22.00.16.27;	author naddy;	state Exp;
branches;
next	1.4;

1.4
date	97.07.27.22.28.09;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.10.16.01.18.21;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.08.16.17.58.23;	author michaels;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.34.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Explicit braces around macro fields and logical operations, gets rid of 148
warnings, no functional change.

From Ray Lai.
@
text
@/*	$OpenBSD: options.h,v 1.7 2002/02/16 21:27:57 millert Exp $	*/

/*-
 * Copyright (c) 1991, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1991, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 *
 *	@@(#)options.h	10.19 (Berkeley) 10/10/96
 */

/*
 * Edit option information.  Historically, if you set a boolean or numeric
 * edit option value to its "default" value, it didn't show up in the :set
 * display, i.e. it wasn't considered "changed".  String edit options would
 * show up as changed, regardless.  We maintain a parallel set of values
 * which are the default values and never consider an edit option changed
 * if it was reset to the default value.
 *
 * Macros to retrieve boolean, integral and string option values, and to
 * set, clear and test boolean option values.  Some options (secure, lines,
 * columns, terminal type) are global in scope, and are therefore stored
 * in the global area.  The offset in the global options array is stored
 * in the screen's value field.  This is set up when the options are first
 * initialized.
 */
#define	O_V(sp, o, fld)							\
	(F_ISSET(&(sp)->opts[(o)], OPT_GLOBAL) ?			\
	    (sp)->gp->opts[(sp)->opts[(o)].o_cur.val].fld :		\
	    (sp)->opts[(o)].fld)

/* Global option macros. */
#define	OG_CLR(gp, o)		((gp)->opts[(o)].o_cur.val) = 0
#define	OG_SET(gp, o)		((gp)->opts[(o)].o_cur.val) = 1
#define	OG_STR(gp, o)		((gp)->opts[(o)].o_cur.str)
#define	OG_VAL(gp, o)		((gp)->opts[(o)].o_cur.val)
#define	OG_ISSET(gp, o)		OG_VAL((gp), (o))

#define	OG_D_STR(gp, o)		((gp)->opts[(o)].o_def.str)
#define	OG_D_VAL(gp, o)		((gp)->opts[(o)].o_def.val)

/*
 * Flags to o_set(); need explicit OS_STR as can be setting the value to
 * NULL.
 */
#define	OS_DEF		0x01		/* Set the default value. */
#define	OS_NOFREE	0x02		/* Don't free the old string. */
#define	OS_STR		0x04		/* Set to string argument. */
#define	OS_STRDUP	0x08		/* Copy then set to string argument. */

struct _option {
	union {
		u_long	 val;		/* Value or boolean. */
		char	*str;		/* String. */
	} o_cur;
#define	O_CLR(sp, o)		o_set((sp), (o), 0, NULL, 0)
#define	O_SET(sp, o)		o_set((sp), (o), 0, NULL, 1)
#define	O_STR(sp, o)		O_V((sp), (o), o_cur.str)
#define	O_VAL(sp, o)		O_V((sp), (o), o_cur.val)
#define	O_ISSET(sp, o)		O_VAL((sp), (o))

	union {
		u_long	 val;		/* Value or boolean. */
		char	*str;		/* String. */
	} o_def;
#define	O_D_CLR(sp, o)		o_set((sp), (o), OS_DEF, NULL, 0)
#define	O_D_SET(sp, o)		o_set((sp), (o), OS_DEF, NULL, 1)
#define	O_D_STR(sp, o)		O_V((sp), (o), o_def.str)
#define	O_D_VAL(sp, o)		O_V((sp), (o), o_def.val)
#define	O_D_ISSET(sp, o)	O_D_VAL((sp), (o))

#define	OPT_GLOBAL	0x01		/* Option is global. */
#define	OPT_SELECTED	0x02		/* Selected for display. */
	u_int8_t flags;
};

/* List of option names, associated update functions and information. */
struct _optlist {
	char	*name;			/* Name. */
					/* Change function. */
	int	(*func)(SCR *, OPTION *, char *, u_long *);
					/* Type of object. */
	enum { OPT_0BOOL, OPT_1BOOL, OPT_NUM, OPT_STR } type;

#define	OPT_ADISP	0x001		/* Always display the option. */
#define	OPT_ALWAYS	0x002		/* Always call the support function. */
#define	OPT_NDISP	0x004		/* Never display the option. */
#define	OPT_NOSAVE	0x008		/* Mkexrc command doesn't save. */
#define	OPT_NOSET	0x010		/* Option may not be set. */
#define	OPT_NOUNSET	0x020		/* Option may not be unset. */
#define	OPT_NOZERO	0x040		/* Option may not be set to 0. */
#define	OPT_EARLYSET	0x080		/* Func called after value is set */
	u_int8_t flags;
};

/* Option argument to opts_dump(). */
enum optdisp { NO_DISPLAY, ALL_DISPLAY, CHANGED_DISPLAY, SELECT_DISPLAY };

/* Options array. */
extern OPTLIST const optlist[];

#include "options_def.h"
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: options.h,v 1.6 2001/01/29 01:58:31 niklas Exp $	*/
d39 1
a39 1
#define	OG_ISSET(gp, o)		OG_VAL(gp, o)
d58 5
a62 5
#define	O_CLR(sp, o)		o_set(sp, o, 0, NULL, 0)
#define	O_SET(sp, o)		o_set(sp, o, 0, NULL, 1)
#define	O_STR(sp, o)		O_V(sp, o, o_cur.str)
#define	O_VAL(sp, o)		O_V(sp, o, o_cur.val)
#define	O_ISSET(sp, o)		O_VAL(sp, o)
d68 5
a72 5
#define	O_D_CLR(sp, o)		o_set(sp, o, OS_DEF, NULL, 0)
#define	O_D_SET(sp, o)		o_set(sp, o, OS_DEF, NULL, 1)
#define	O_D_STR(sp, o)		O_V(sp, o, o_def.str)
#define	O_D_VAL(sp, o)		O_V(sp, o, o_def.val)
#define	O_D_ISSET(sp, o)	O_D_VAL(sp, o)
@


1.6
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d83 1
a83 1
	int	(*func) __P((SCR *, OPTION *, char *, u_long *));
@


1.5
log
@Fix noprint/print/octal options; from NetBSD.
reviewed by millert@@
@
text
@d1 2
@


1.4
log
@Update to 1.79 and install as vi/ex/view.
@
text
@d92 1
@


1.3
log
@nvi 1.78:
        + Fix bugs when both the leftright scrolling and number edit options
          were on.
        + Fix bug where splitting in the middle of the screen could repaint
          incorrectly.
        + Fix first-nul in input bug, where random garbage was inserted.
        + Correct search and mark-as-motion-command bug, it's a line mode
          action if the search starts at or before the first non<blank>.
        + Fix bug autoindent bug, where ^D could shift too far in the line.
        + Fix core dump where ! command called from the .exrc file.
        + Add the -S command-line option, which initializes vi to have the
          secure edit option preset.
@
text
@d9 1
a9 1
 *	@@(#)options.h	10.18 (Berkeley) 10/1/96
d42 4
a45 1
/* Flags to o_set(). */
d48 2
a49 2
#define	OS_STR		0x04		/* Set to the str value. */
#define	OS_STRDUP	0x08		/* Copy and set to the str value. */
@


1.2
log
@nvi 1.73
@
text
@d9 1
a9 1
 *	@@(#)options.h	10.17 (Berkeley) 7/2/96
d44 1
a44 1
#define	OS_FREE		0x02		/* Free old string if set. */
@


1.1
log
@new vi
@
text
@d9 1
a9 1
 *	@@(#)options.h	10.16 (Berkeley) 5/16/96
d86 1
a86 1
#define	OPT_NOSET	0x010		/* Option may not be unset. */
@
