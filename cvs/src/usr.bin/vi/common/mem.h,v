head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.38
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.36
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.32
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.30
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.28
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.26
	OPENBSD_5_0:1.5.0.24
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.22
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.20
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.16
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.18
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.14
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.12
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.20
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.18
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.16
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.14
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.12
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.07.14.03.01;	author martijn;	state Exp;
branches;
next	1.8;
commitid	6JASklK20pYJHbuU;

1.8
date	2016.02.03.01.47.25;	author mmcc;	state Exp;
branches;
next	1.7;
commitid	VKVsS1OkAAi8PXjr;

1.7
date	2015.12.07.20.39.19;	author mmcc;	state Exp;
branches;
next	1.6;
commitid	gtDERb7QyXwKGs62;

1.6
date	2014.10.14.22.23.12;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mpIoFH2QkbUBhYb5;

1.5
date	2006.01.08.21.05.39;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.29.01.58.30;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.24.16.15.20;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.34.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.38;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Free memory if realloc fails. The application is most likely to terminate after
a failure, but if it does not we better clean up after ourselfs.

OK deraadt@@ and stefan@@
@
text
@/*	$OpenBSD: mem.h,v 1.8 2016/02/03 01:47:25 mmcc Exp $	*/

/*-
 * Copyright (c) 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 *
 *	@@(#)mem.h	10.7 (Berkeley) 3/30/96
 */

/* Increase the size of a malloc'd buffer.  Two versions, one that
 * returns, one that jumps to an error label.
 */
#define	BINC_GOTO(sp, lp, llen, nlen) {					\
	void *L__bincp;							\
	if ((nlen) > (llen)) {						\
		if ((L__bincp = binc((sp), (lp), &(llen), (nlen)))	\
		    == NULL)						\
			goto alloc_err;					\
		/*							\
		 * !!!							\
		 * Possible pointer conversion.				\
		 */							\
		(lp) = L__bincp;					\
	}								\
}
#define	BINC_RET(sp, lp, llen, nlen) {					\
	void *L__bincp;							\
	if ((nlen) > (llen)) {						\
		if ((L__bincp = binc((sp), (lp), &(llen), (nlen)))	\
		    == NULL)						\
			return (1);					\
		/*							\
		 * !!!							\
		 * Possible pointer conversion.				\
		 */							\
		(lp) = L__bincp;					\
	}								\
}

/*
 * Get some temporary space, preferably from the global temporary buffer,
 * from a malloc'd buffer otherwise.  Two versions, one that returns, one
 * that jumps to an error label.
 */
#define	GET_SPACE_GOTO(sp, bp, blen, nlen) {				\
	GS *L__gp = (sp) == NULL ? NULL : (sp)->gp;			\
	if (L__gp == NULL || F_ISSET(L__gp, G_TMP_INUSE)) {		\
		(bp) = NULL;						\
		(blen) = 0;						\
		BINC_GOTO((sp), (bp), (blen), (nlen)); 			\
	} else {							\
		BINC_GOTO((sp), L__gp->tmp_bp, L__gp->tmp_blen, (nlen));\
		(bp) = L__gp->tmp_bp;					\
		(blen) = L__gp->tmp_blen;				\
		F_SET(L__gp, G_TMP_INUSE);				\
	}								\
}
#define	GET_SPACE_RET(sp, bp, blen, nlen) {				\
	GS *L__gp = (sp) == NULL ? NULL : (sp)->gp;			\
	if (L__gp == NULL || F_ISSET(L__gp, G_TMP_INUSE)) {		\
		(bp) = NULL;						\
		(blen) = 0;						\
		BINC_RET((sp), (bp), (blen), (nlen));			\
	} else {							\
		BINC_RET((sp), L__gp->tmp_bp, L__gp->tmp_blen, (nlen));	\
		(bp) = L__gp->tmp_bp;					\
		(blen) = L__gp->tmp_blen;				\
		F_SET(L__gp, G_TMP_INUSE);				\
	}								\
}

/*
 * Add space to a GET_SPACE returned buffer.  Two versions, one that
 * returns, one that jumps to an error label.
 */
#define	ADD_SPACE_GOTO(sp, bp, blen, nlen) {				\
	GS *L__gp = (sp) == NULL ? NULL : (sp)->gp;			\
	if (L__gp == NULL || (bp) == L__gp->tmp_bp) {			\
		F_CLR(L__gp, G_TMP_INUSE);				\
		BINC_GOTO((sp), L__gp->tmp_bp, L__gp->tmp_blen, (nlen));\
		(bp) = L__gp->tmp_bp;					\
		(blen) = L__gp->tmp_blen;				\
		F_SET(L__gp, G_TMP_INUSE);				\
	} else								\
		BINC_GOTO((sp), (bp), (blen), (nlen));			\
}
#define	ADD_SPACE_RET(sp, bp, blen, nlen) {				\
	GS *L__gp = (sp) == NULL ? NULL : (sp)->gp;			\
	if (L__gp == NULL || (bp) == L__gp->tmp_bp) {			\
		F_CLR(L__gp, G_TMP_INUSE);				\
		BINC_RET((sp), L__gp->tmp_bp, L__gp->tmp_blen, (nlen));	\
		(bp) = L__gp->tmp_bp;					\
		(blen) = L__gp->tmp_blen;				\
		F_SET(L__gp, G_TMP_INUSE);				\
	} else								\
		BINC_RET((sp), (bp), (blen), (nlen));			\
}

/* Free a GET_SPACE returned buffer. */
#define	FREE_SPACE(sp, bp, blen) {					\
	GS *L__gp = (sp) == NULL ? NULL : (sp)->gp;			\
	if (L__gp != NULL && (bp) == L__gp->tmp_bp)			\
		F_CLR(L__gp, G_TMP_INUSE);				\
	else								\
		free(bp);						\
}

/*
 * Malloc a buffer, casting the return pointer.  Various versions.
 */
#define	CALLOC(sp, p, nmemb, size) {					\
	if (((p) = calloc((nmemb), (size))) == NULL)			\
		msgq((sp), M_SYSERR, NULL);				\
}
#define	CALLOC_GOTO(sp, p, nmemb, size) {				\
	if (((p) = calloc((nmemb), (size))) == NULL)			\
		goto alloc_err;						\
}
#define	CALLOC_RET(sp, p, nmemb, size) {				\
	if (((p) = calloc((nmemb), (size))) == NULL) {			\
		msgq((sp), M_SYSERR, NULL);				\
		return (1);						\
	}								\
}

#define	MALLOC(sp, p, size) {						\
	if (((p) = malloc(size)) == NULL)				\
		msgq((sp), M_SYSERR, NULL);				\
}
#define	MALLOC_GOTO(sp, p, size) {					\
	if (((p) = malloc(size)) == NULL)				\
		goto alloc_err;						\
}
#define	MALLOC_RET(sp, p, size) {					\
	if (((p) = malloc(size)) == NULL) {				\
		msgq((sp), M_SYSERR, NULL);				\
		return (1);						\
	}								\
}

#define	REALLOC(sp, p, size) {						\
	void *tmpp;							\
	if (((tmpp) = (realloc((p), (size)))) == NULL) {		\
		msgq((sp), M_SYSERR, NULL);				\
		free(p);						\
	}								\
	p = tmpp;							\
}

#define	REALLOCARRAY(sp, p, nelem, size) {				\
	void *tmpp;							\
	if (((tmpp) = (reallocarray((p), (nelem), (size)))) == NULL) {	\
		msgq((sp), M_SYSERR, NULL);				\
		free(p);						\
	}								\
	p = tmpp;							\
}

/*
 * Versions of memmove(3) and memset(3) that use the size of the
 * initial pointer to figure out how much memory to manipulate.
 */
#define	MEMMOVE(p, t, len)	memmove((p), (t), (len) * sizeof(*(p)))
#define	MEMSET(p, value, len)	memset((p), (value), (len) * sizeof(*(p)))
@


1.8
log
@Remove needless alias macros for malloc and calloc. No binary change. I
got this upstreamed a few weeks ago.

ok tb (less a few style tweaks), martijn (who suggested style tweaks)
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.h,v 1.7 2015/12/07 20:39:19 mmcc Exp $	*/
d146 2
a147 1
	if (((p) = (realloc((p), (size)))) == NULL)			\
d149 3
d155 2
a156 1
	if (((p) = (reallocarray((p), (nelem), (size)))) == NULL)	\
d158 3
@


1.7
log
@Remove needless type casts and corresponding type parameters from
allocation macros. No binary change.

ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.h,v 1.6 2014/10/14 22:23:12 deraadt Exp $	*/
a122 3
#define	CALLOC_NOMSG(sp, p, nmemb, size) {				\
	(p) = calloc((nmemb), (size));					\
}
a136 3
}
#define	MALLOC_NOMSG(sp, p, size) {					\
	(p) = malloc(size);						\
@


1.6
log
@create a REALLOCARRAY macro, and use it where it gives us overflow
protection for free
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.h,v 1.5 2006/01/08 21:05:39 miod Exp $	*/
a113 7
 *
 * !!!
 * The cast should be unnecessary, malloc(3) and friends return void *'s,
 * which is all we need.  However, some systems that nvi needs to run on
 * don't do it right yet, resulting in the compiler printing out roughly
 * a million warnings.  After awhile, it seemed easier to put the casts
 * in instead of explaining it all the time.
d115 2
a116 2
#define	CALLOC(sp, p, cast, nmemb, size) {				\
	if (((p) = (cast)calloc((nmemb), (size))) == NULL)		\
d119 2
a120 2
#define	CALLOC_GOTO(sp, p, cast, nmemb, size) {				\
	if (((p) = (cast)calloc((nmemb), (size))) == NULL)		\
d123 2
a124 2
#define	CALLOC_NOMSG(sp, p, cast, nmemb, size) {			\
	(p) = (cast)calloc((nmemb), (size));				\
d126 2
a127 2
#define	CALLOC_RET(sp, p, cast, nmemb, size) {				\
	if (((p) = (cast)calloc((nmemb), (size))) == NULL) {		\
d133 2
a134 2
#define	MALLOC(sp, p, cast, size) {					\
	if (((p) = (cast)malloc(size)) == NULL)				\
d137 2
a138 2
#define	MALLOC_GOTO(sp, p, cast, size) {				\
	if (((p) = (cast)malloc(size)) == NULL)				\
d141 2
a142 2
#define	MALLOC_NOMSG(sp, p, cast, size) {				\
	(p) = (cast)malloc(size);					\
d144 2
a145 2
#define	MALLOC_RET(sp, p, cast, size) {					\
	if (((p) = (cast)malloc(size)) == NULL) {			\
d151 2
a152 2
#define	REALLOC(sp, p, cast, size) {					\
	if (((p) = (cast)(realloc((p), (size)))) == NULL)		\
d156 2
a157 2
#define	REALLOCARRAY(sp, p, cast, nelem, size) {			\
	if (((p) = (cast)(reallocarray((p), (nelem), (size)))) == NULL)	\
@


1.5
log
@Explicit braces around macro fields and logical operations, gets rid of 148
warnings, no functional change.

From Ray Lai.
@
text
@d1 1
a1 1
/*	$OpenBSD: mem.h,v 1.4 2001/01/29 01:58:30 niklas Exp $	*/
d157 1
a157 4
/*
 * XXX
 * Don't depend on realloc(NULL, size) working.
 */
d159 6
a164 2
	if (((p) = (cast)((p) == NULL ?					\
	    malloc(size) : realloc((p), (size)))) == NULL)		\
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 3
a21 2
	if ((nlen) > llen) {						\
		if ((L__bincp = binc(sp, lp, &(llen), nlen)) == NULL)	\
d27 1
a27 1
		lp = L__bincp;						\
d32 3
a34 2
	if ((nlen) > llen) {						\
		if ((L__bincp = binc(sp, lp, &(llen), nlen)) == NULL)	\
d40 1
a40 1
		lp = L__bincp;						\
d52 3
a54 3
		bp = NULL;						\
		blen = 0;						\
		BINC_GOTO(sp, bp, blen, nlen); 				\
d56 3
a58 3
		BINC_GOTO(sp, L__gp->tmp_bp, L__gp->tmp_blen, nlen);	\
		bp = L__gp->tmp_bp;					\
		blen = L__gp->tmp_blen;					\
d65 3
a67 3
		bp = NULL;						\
		blen = 0;						\
		BINC_RET(sp, bp, blen, nlen);				\
d69 3
a71 3
		BINC_RET(sp, L__gp->tmp_bp, L__gp->tmp_blen, nlen);	\
		bp = L__gp->tmp_bp;					\
		blen = L__gp->tmp_blen;					\
d82 1
a82 1
	if (L__gp == NULL || bp == L__gp->tmp_bp) {			\
d84 3
a86 3
		BINC_GOTO(sp, L__gp->tmp_bp, L__gp->tmp_blen, nlen);	\
		bp = L__gp->tmp_bp;					\
		blen = L__gp->tmp_blen;					\
d89 1
a89 1
		BINC_GOTO(sp, bp, blen, nlen);				\
d93 1
a93 1
	if (L__gp == NULL || bp == L__gp->tmp_bp) {			\
d95 3
a97 3
		BINC_RET(sp, L__gp->tmp_bp, L__gp->tmp_blen, nlen);	\
		bp = L__gp->tmp_bp;					\
		blen = L__gp->tmp_blen;					\
d100 1
a100 1
		BINC_RET(sp, bp, blen, nlen);				\
d106 1
a106 1
	if (L__gp != NULL && bp == L__gp->tmp_bp)			\
d123 2
a124 2
	if ((p = (cast)calloc(nmemb, size)) == NULL)			\
		msgq(sp, M_SYSERR, NULL);				\
d127 1
a127 1
	if ((p = (cast)calloc(nmemb, size)) == NULL)			\
d131 1
a131 1
	p = (cast)calloc(nmemb, size);					\
d134 2
a135 2
	if ((p = (cast)calloc(nmemb, size)) == NULL) {			\
		msgq(sp, M_SYSERR, NULL);				\
d141 2
a142 2
	if ((p = (cast)malloc(size)) == NULL)				\
		msgq(sp, M_SYSERR, NULL);				\
d145 1
a145 1
	if ((p = (cast)malloc(size)) == NULL)				\
d149 1
a149 1
	p = (cast)malloc(size);						\
d152 2
a153 2
	if ((p = (cast)malloc(size)) == NULL) {				\
		msgq(sp, M_SYSERR, NULL);				\
d162 3
a164 3
	if ((p = (cast)(p == NULL ?					\
	    malloc(size) : realloc(p, size))) == NULL)			\
		msgq(sp, M_SYSERR, NULL);				\
d171 2
a172 2
#define	MEMMOVE(p, t, len)	memmove(p, t, (len) * sizeof(*(p)))
#define	MEMSET(p, value, len)	memset(p, value, (len) * sizeof(*(p)))
@


1.3
log
@bring vi/ex up to 1.71
@
text
@d1 2
@


1.2
log
@new vi
@
text
@d102 1
a102 1
	if (L__gp != NULL && (CHAR_T *)bp == (CHAR_T *)L__gp->tmp_bp)			\
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 15
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d9 1
a9 13
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mem.h	8.8 (Berkeley) 8/16/94
d16 1
a16 1
	void *__bincp;							\
d18 2
a19 2
		if ((__bincp = binc(sp, lp, &(llen), nlen)) == NULL)	\
			goto binc_err;					\
d24 1
a24 1
		lp = __bincp;						\
d28 1
a28 1
	void *__bincp;							\
d30 1
a30 1
		if ((__bincp = binc(sp, lp, &(llen), nlen)) == NULL)	\
d36 1
a36 1
		lp = __bincp;						\
d46 2
a47 2
	GS *__gp = (sp)->gp;						\
	if (F_ISSET(__gp, G_TMP_INUSE)) {				\
d52 4
a55 4
		BINC_GOTO(sp, __gp->tmp_bp, __gp->tmp_blen, nlen);	\
		bp = __gp->tmp_bp;					\
		blen = __gp->tmp_blen;					\
		F_SET(__gp, G_TMP_INUSE);				\
d59 2
a60 2
	GS *__gp = (sp)->gp;						\
	if (F_ISSET(__gp, G_TMP_INUSE)) {				\
d65 4
a68 4
		BINC_RET(sp, __gp->tmp_bp, __gp->tmp_blen, nlen);	\
		bp = __gp->tmp_bp;					\
		blen = __gp->tmp_blen;					\
		F_SET(__gp, G_TMP_INUSE);				\
d77 7
a83 7
	GS *__gp = (sp)->gp;						\
	if (bp == __gp->tmp_bp) {					\
		F_CLR(__gp, G_TMP_INUSE);				\
		BINC_GOTO(sp, __gp->tmp_bp, __gp->tmp_blen, nlen);	\
		bp = __gp->tmp_bp;					\
		blen = __gp->tmp_blen;					\
		F_SET(__gp, G_TMP_INUSE);				\
d88 7
a94 7
	GS *__gp = (sp)->gp;						\
	if (bp == __gp->tmp_bp) {					\
		F_CLR(__gp, G_TMP_INUSE);				\
		BINC_RET(sp, __gp->tmp_bp, __gp->tmp_blen, nlen);	\
		bp = __gp->tmp_bp;					\
		blen = __gp->tmp_blen;					\
		F_SET(__gp, G_TMP_INUSE);				\
a98 10
/* Free memory, optionally making pointers unusable. */
#ifdef DEBUG
#define	FREE(p, sz) {							\
	memset(p, 0xff, sz);						\
	free(p);							\
}
#else
#define	FREE(p, sz)	free(p);
#endif

d101 3
a103 2
	if (bp == sp->gp->tmp_bp)					\
		F_CLR(sp->gp, G_TMP_INUSE);				\
d105 1
a105 1
		FREE(bp, blen);						\
a117 3
#define	CALLOC_NOMSG(sp, p, cast, nmemb, size) {			\
	p = (cast)calloc(nmemb, size);					\
}
d122 7
d135 1
a135 3
#define	MALLOC_NOMSG(sp, p, cast, size) {				\
	p = (cast)malloc(size);						\
}
d140 7
a168 2

void	*binc __P((SCR *, void *, size_t *, size_t));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
