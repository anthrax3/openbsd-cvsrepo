head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.80
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.78
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.74
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.76
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.68
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.72
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.70
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.66
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.64
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.62
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.60
	OPENBSD_5_0:1.5.0.58
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.56
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.54
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.50
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.52
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.48
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.46
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.44
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.42
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.40
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.38
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.36
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.34
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.32
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.30
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.28
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.26
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.24
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.22
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.20
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.18
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.5
date	97.07.27.22.28.10;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.08.20.22.55.49;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.07.24.16.15.26;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.34.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to 1.79 and install as vi/ex/view.
@
text
@List of things that should be added:
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

+ X11 (Tk, Motif, Xaw) interface.
+ Interpreted language (Perl, Scheme, Tcl/Rush, Python)
+ Additional ports: Windows, Windows NT, MSDOS
+ Forms editing package; use RE's to verify field contents.
+ Internationalization, including wide character and multibyte support.
+ Support for single line window editing, including full editing
  capability on the vi colon command line.
+ Rob Pike's sam style RE's.
+ Right-to-left and bottom to top text support.
+ Quitall command, to leave all windows.  A ! will force the quit.

List of suggested features:
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
+ It would be nice to have the completion mechanism found in tcsh versions
  >= 6.03.  For instance, the completion for the `:cd' command will be
  directories only.  The completion for the `:set' command will be all
  options not set at that moment, and for `:set un' will be all options
  that are set at that moment.  The completion for `:< count' will be the
  flags.

+ Add an command-line option to initially split the screen based on the
  number of file arguments, e.g., "nvi -a file1 file2" would initialize
  a two edit-buffer display.

+ Add a "push" command that would push a file on the tags stack.
  (Essentially make tags a special case of the stack, and make
  the stack more general purpose.)

+ Make :script just run a command and edit the output, and :interactive,
  which allows interactive shell session, instead of just the current
  :script.

+ Add tagging information to the man page so that users can display
  the part of the man page that discusses the command in which they're
  interested.

+ Add a zone option so that you can declare that top/bottom few lines
  of the screen aren't filled except by accident, so that the text
  you ask for is always concentrated in the center of the screen.

+ Change
	:di[splay] tags		-> :tags
	:di[splay] screens	-> :screens
	:di[splay] buffers	-> :buffers

+ A macro record function.  Add the ability to record a sequence
  of keystrokes into a named buffer for later use.  Handy when
  you're trying to build a semi-complex macro.

+ The semantics of :split, :bg, and :fg aren't right.  Someone needs to
  rethink how they should interact.  The main problem arises when users
  want to get a window into a new file.  Currently, the necessary sequence
  is  ":split newfile|^W|:bg".  It would be nice if you could simply
  background the current screen and edit a new one.

+ An option to turn on a ``quarter plane'' model so that you can
  go as far to the right or down as you wish.  The File or the
  current line is only extended if you actually put down a char at
  the new location.  Very handy for ascii graphics and tables.

+ Some way of replacing the command bindings.  For this to work
  cleanly the notion of a command must be separate from that of a
  key.  (Simulate the Rand editor?)

+ Vertical splitting, so you can see files side by side.

+ Tracking.  Two or more files are associated so that when one file
  is scrolled up/down/left/right other files track by the same amount.
  Tracking may be constrained such that two files only track vertically
  or horizontally.  This is relatively easy to implement.

+ A status file so that the next time invocation of the editor returns
  to the same place, with the same number of windows etc.  In case of
  change of the screen size, reasonable defaults are used.  For each
  window size and location of the window, name of the file and position
  in it, any tab settings, any other settings for the window (such as
  insert/overwrite mode, auto indent etc).  Last search RE and maybe
  direction.  If a file does not exist the next time you invoke the
  editor, its window is left in the same place but with some default
  message.
@


1.4
log
@nvi 1.74
@
text
@d5 1
a5 1
+ Interpreted language (Perl5, Scheme, Tcl/Rush, Python)
@


1.3
log
@bring vi/ex up to 1.71
@
text
@a43 5
+ Add "set searchdir" for a list of directories to look in for
  files to edit.  The semantic is that ":e foo" is replaced with
  the file name that is found, so there's no confusion as to
  which file is written.

@


1.2
log
@new vi
@
text
@a3 1
+ Some way to read both the EXINIT variable *and* the .exrc files.
d17 6
a22 2
+ Add a tab listing, e.g. "set tabs=8,16,32,64", so that ^T moves
  to specific screen locations.
d24 3
a26 6
+ Filename completion.  While on the subject of completion, it would be
  nice to have the completion mechanism found in tcsh version >= 6.03.
  For instance, the completion for the `:cd' command will be directories
  only.  The completion for the `:set' command will be all options not
  set at that moment, and for `:set un' will be all options that are set
  at that moment.  The completion for `:< count' will be the flags.
@


1.1
log
@Initial revision
@
text
@d4 1
d6 2
a7 3
+ Interpreted language (Perl5, Scheme, Tcl)
+ Ports: Windows, Windows NT, MSDOS
+ Message catalogs.
d9 1
a9 1
+ Internationalization, including wide character support.
d13 2
d18 3
a34 4

+ Add versioning based on a "set version" variable, that would
  create backup copies when the file was written back, i.e. the
  ":w" and autowrite's would copy the original.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
