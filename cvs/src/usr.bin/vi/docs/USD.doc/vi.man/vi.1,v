head	1.74;
access;
symbols
	OPENBSD_6_2:1.74.0.2
	OPENBSD_6_2_BASE:1.74
	OPENBSD_6_1:1.66.0.4
	OPENBSD_6_1_BASE:1.66
	OPENBSD_6_0:1.64.0.4
	OPENBSD_6_0_BASE:1.64
	OPENBSD_5_9:1.64.0.2
	OPENBSD_5_9_BASE:1.64
	OPENBSD_5_8:1.59.0.4
	OPENBSD_5_8_BASE:1.59
	OPENBSD_5_7:1.57.0.2
	OPENBSD_5_7_BASE:1.57
	OPENBSD_5_6:1.56.0.14
	OPENBSD_5_6_BASE:1.56
	OPENBSD_5_5:1.56.0.12
	OPENBSD_5_5_BASE:1.56
	OPENBSD_5_4:1.56.0.8
	OPENBSD_5_4_BASE:1.56
	OPENBSD_5_3:1.56.0.6
	OPENBSD_5_3_BASE:1.56
	OPENBSD_5_2:1.56.0.4
	OPENBSD_5_2_BASE:1.56
	OPENBSD_5_1_BASE:1.56
	OPENBSD_5_1:1.56.0.2
	OPENBSD_5_0:1.54.0.2
	OPENBSD_5_0_BASE:1.54
	OPENBSD_4_9:1.48.0.2
	OPENBSD_4_9_BASE:1.48
	OPENBSD_4_8:1.45.0.2
	OPENBSD_4_8_BASE:1.45
	OPENBSD_4_7:1.42.0.2
	OPENBSD_4_7_BASE:1.42
	OPENBSD_4_6:1.40.0.4
	OPENBSD_4_6_BASE:1.40
	OPENBSD_4_5:1.38.0.2
	OPENBSD_4_5_BASE:1.38
	OPENBSD_4_4:1.37.0.6
	OPENBSD_4_4_BASE:1.37
	OPENBSD_4_3:1.37.0.4
	OPENBSD_4_3_BASE:1.37
	OPENBSD_4_2:1.37.0.2
	OPENBSD_4_2_BASE:1.37
	OPENBSD_4_1:1.35.0.10
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.35.0.8
	OPENBSD_4_0_BASE:1.35
	OPENBSD_3_9:1.35.0.6
	OPENBSD_3_9_BASE:1.35
	OPENBSD_3_8:1.35.0.4
	OPENBSD_3_8_BASE:1.35
	OPENBSD_3_7:1.35.0.2
	OPENBSD_3_7_BASE:1.35
	OPENBSD_3_6:1.28.0.2
	OPENBSD_3_6_BASE:1.28
	OPENBSD_3_5:1.27.0.2
	OPENBSD_3_5_BASE:1.27
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.6
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.4
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.10.0.6
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.4
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7;
locks; strict;
comment	@# @;


1.74
date	2017.08.22.20.27.18;	author anton;	state Exp;
branches;
next	1.73;
commitid	QvWmq3nDsDcutn2L;

1.73
date	2017.07.05.18.56.33;	author schwarze;	state Exp;
branches;
next	1.72;
commitid	HxAqRGFqU1NPphSw;

1.72
date	2017.07.05.12.23.46;	author schwarze;	state Exp;
branches;
next	1.71;
commitid	6Uf34f1vswX7Dip7;

1.71
date	2017.07.03.14.30.11;	author jmc;	state Exp;
branches;
next	1.70;
commitid	8cgyFuR4Whv6KOEd;

1.70
date	2017.07.03.07.01.14;	author bentley;	state Exp;
branches;
next	1.69;
commitid	EvNQUli77WiHPwr6;

1.69
date	2017.06.30.14.42.05;	author bentley;	state Exp;
branches;
next	1.68;
commitid	pFWuvWkjb60wY7ul;

1.68
date	2017.06.20.07.32.56;	author bentley;	state Exp;
branches;
next	1.67;
commitid	cR0KCBnJvgbucrpG;

1.67
date	2017.06.15.06.44.47;	author bentley;	state Exp;
branches;
next	1.66;
commitid	1hRg81mqmowwvLyF;

1.66
date	2016.08.08.15.09.33;	author sobrado;	state Exp;
branches;
next	1.65;
commitid	6RogTCg666XVbMWO;

1.65
date	2016.08.01.18.27.35;	author bentley;	state Exp;
branches;
next	1.64;
commitid	NOKOkHbanuF52TAH;

1.64
date	2016.02.09.07.41.12;	author jmc;	state Exp;
branches;
next	1.63;
commitid	LLIa1LWkKvSotwan;

1.63
date	2016.01.06.22.41.53;	author millert;	state Exp;
branches;
next	1.62;
commitid	Euj3gmOaDkHrgTHh;

1.62
date	2015.11.24.10.28.14;	author bentley;	state Exp;
branches;
next	1.61;
commitid	fR19JxljUS7FFrGN;

1.61
date	2015.11.19.07.53.31;	author bentley;	state Exp;
branches;
next	1.60;
commitid	aNUlDSFtbBwW1Tdz;

1.60
date	2015.09.14.20.06.58;	author schwarze;	state Exp;
branches;
next	1.59;
commitid	r87YNrjEWwl7OkJ0;

1.59
date	2015.03.17.10.08.18;	author bentley;	state Exp;
branches;
next	1.58;
commitid	5PmOERRMF1v4ixN7;

1.58
date	2015.03.13.19.58.41;	author jmc;	state Exp;
branches;
next	1.57;
commitid	OcwhWBKGs3Yn7EeA;

1.57
date	2015.02.28.21.51.57;	author bentley;	state Exp;
branches;
next	1.56;
commitid	NNu2UZnsd5zmNVYD;

1.56
date	2012.01.17.08.18.36;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2011.12.28.01.52.33;	author schwarze;	state Exp;
branches;
next	1.54;

1.54
date	2011.07.29.13.24.50;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2011.05.16.16.41.58;	author jmc;	state Exp;
branches;
next	1.52;

1.52
date	2011.05.02.11.14.11;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2011.04.12.18.08.00;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2011.03.31.20.40.51;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2011.03.17.11.34.53;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2010.10.18.14.42.16;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2010.09.29.07.44.57;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2010.09.24.06.40.12;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2010.07.25.20.23.41;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2010.07.18.21.45.01;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2010.07.15.20.51.38;	author schwarze;	state Exp;
branches;
next	1.42;

1.42
date	2009.11.22.17.12.40;	author nicm;	state Exp;
branches;
next	1.41;

1.41
date	2009.10.20.09.54.47;	author sobrado;	state Exp;
branches;
next	1.40;

1.40
date	2009.04.27.19.41.10;	author mk;	state Exp;
branches;
next	1.39;

1.39
date	2009.04.19.13.12.28;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2009.02.08.17.15.10;	author jmc;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.31.19.20.19;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2007.05.30.04.41.34;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2005.03.10.18.03.45;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2005.01.09.01.44.35;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2005.01.09.01.37.32;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2005.01.09.01.30.54;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2005.01.08.00.25.58;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2005.01.07.15.04.02;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2004.10.04.21.45.59;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2004.04.09.12.12.44;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.19.08.14.52;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2004.02.09.21.16.06;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2004.01.30.23.22.38;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2004.01.24.12.24.36;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2004.01.16.13.08.32;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2004.01.15.11.17.04;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2004.01.07.12.46.48;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2004.01.07.11.58.21;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2004.01.07.10.36.45;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.02.21.37.48;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.02.09.37.41;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.31.18.56.21;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.31.13.40.35;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.15.21.34.53;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.12.18.15.16;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.15.15.41.19;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.29.01.58.34;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	99.06.05.01.21.49;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.03.10.21.25.29;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	98.07.24.00.43.57;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	97.07.27.22.28.11;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	96.09.22.01.03.21;	author downsj;	state dead;
branches;
next	1.5;

1.5
date	96.08.23.13.18.15;	author michaels;	state Exp;
branches;
next	1.4;

1.4
date	96.08.20.22.55.54;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.08.16.17.58.28;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.07.24.16.15.34;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.34.47;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.74
log
@Do not treat comma as part of the command modifier.

ok schwarze@@
@
text
@.\"	$OpenBSD: vi.1,v 1.73 2017/07/05 18:56:33 schwarze Exp $
.\"
.\" Copyright (c) 1994
.\"     The Regents of the University of California.  All rights reserved.
.\" Copyright (c) 1994, 1995, 1996
.\"	Keith Bostic.  All rights reserved.
.\"
.\" The vi program is freely redistributable.
.\" You are welcome to copy, modify and share it with others
.\" under the conditions listed in the LICENSE file.
.\" If any company (not individual!) finds vi sufficiently useful
.\" that you would have purchased it, or if any company wishes to
.\" redistribute it, contributions to the authors would be appreciated.
.\"
.\"     @@(#)vi.1	8.51 (Berkeley) 10/10/96
.\"
.Dd $Mdocdate: July 5 2017 $
.Dt VI 1
.Os
.Sh NAME
.Nm ex , vi , view
.Nd text editors
.Sh SYNOPSIS
.Nm ex
.Op Fl FRrSsv
.Op Fl c Ar cmd
.Op Fl t Ar tag
.Op Fl w Ar size
.Op Ar
.Nm vi\ \&
.Op Fl eFRrS
.Op Fl c Ar cmd
.Op Fl t Ar tag
.Op Fl w Ar size
.Op Ar
.Nm view
.Op Fl eFrS
.Op Fl c Ar cmd
.Op Fl t Ar tag
.Op Fl w Ar size
.Op Ar
.Sh DESCRIPTION
.Nm ex
is a line-oriented text editor;
.Nm vi
is a screen-oriented text editor.
.Nm ex
and
.Nm vi
are different interfaces to the same program,
and it is possible to switch back and forth during an edit session.
.Nm view
is the equivalent of using the
.Fl R
.Pq read-only
option of
.Nm vi .
.Pp
This manual page is the one provided with the
.Nm nex Ns / Ns Nm nvi
versions of the
.Nm ex Ns / Ns Nm vi
text editors.
.Nm nex Ns / Ns Nm nvi
are intended as bug-for-bug compatible replacements for the original
Fourth Berkeley Software Distribution
.Pq 4BSD
.Nm ex
and
.Nm vi
programs.
For the rest of this manual page,
.Nm nex Ns / Ns Nm nvi
is used only when it's necessary to distinguish it from the historic
implementations of
.Nm ex Ns / Ns Nm vi .
.Pp
This manual page is intended for users already familiar with
.Nm ex Ns / Ns Nm vi .
Anyone else should almost certainly read a good tutorial on the
editor before this manual page.
If you're in an unfamiliar environment,
and you absolutely have to get work done immediately,
read the section after the options description, entitled
.Sx FAST STARTUP .
It's probably enough to get you going.
.Pp
The following options are available:
.Bl -tag -width "-w size "
.It Fl c Ar cmd
Execute
.Ar cmd
on the first file loaded.
Particularly useful for initial positioning in the file, although
.Ar cmd
is not limited to positioning commands.
This is the POSIX 1003.2 interface for the historic
.Dq +cmd
syntax.
.Nm nex Ns / Ns Nm nvi
supports both the old and new syntax.
.It Fl e
Start editing in ex mode, as if the command name were
.Nm ex .
.It Fl F
Don't copy the entire file when first starting to edit.
(The default is to make a copy in case someone else modifies
the file during your edit session.)
.It Fl R
Start editing in read-only mode, as if the command name was
.Nm view ,
or the
.Cm readonly
option was set.
.It Fl r
Recover the specified files or, if no files are specified,
list the files that could be recovered.
If no recoverable files by the specified name exist,
the file is edited as if the
.Fl r
option had not been specified.
.It Fl S
Run with the
.Cm secure
edit option set, disallowing all access to external programs.
.It Fl s
Enter batch mode; applicable only to
.Nm ex
edit sessions.
Batch mode is useful when running
.Nm ex
scripts.
Prompts, informative messages and other user oriented messages are turned off,
and no startup files or environment variables are read.
This is the POSIX 1003.2 interface for the historic
.Dq -
argument.
.Nm nex Ns / Ns Nm nvi
supports both the old and new syntax.
.It Fl t Ar tag
Start editing at the specified
.Ar tag
(see
.Xr ctags 1 ) .
.It Fl v
Start editing in vi mode, as if the command name was
.Nm vi .
.It Fl w Ar size
Set the initial window size to the specified number of lines.
.El
.Pp
Command input for
.Nm ex Ns / Ns Nm vi
is read from the standard input.
In the
.Nm vi
interface, it is an error if standard input is not a terminal.
In the
.Nm ex
interface, if standard input is not a terminal,
.Nm ex
will read commands from it regardless; however, the session will be a
batch mode session, exactly as if the
.Fl s
option had been specified.
.Sh FAST STARTUP
This section will tell you the minimum amount that you need to
do simple editing tasks using
.Nm vi .
If you've never used any screen editor before,
you're likely to have problems even with this simple introduction.
In that case you should find someone that already knows
.Nm vi
and have them walk you through this section.
.Pp
.Nm vi
is a screen editor.
This means that it takes up almost the entire screen,
displaying part of the file on each screen line,
except for the last line of the screen.
The last line of the screen is used for you to give commands to
.Nm vi ,
and for
.Nm vi
to give information to you.
.Pp
The other fact that you need to understand is that
.Nm vi
is a modeful editor,
i.e. you are either entering text or you are executing commands,
and you have to be in the right mode to do one or the other.
You will be in command mode when you first start editing a file.
There are commands that switch you into input mode.
There is only one key that takes you out of input mode,
and that is the
.Aq escape
key.
.Pp
Key names are written using angle brackets, e.g.\&
.Aq escape
means the
.Dq escape
key, usually labeled
.Dq Esc
on your
terminal's keyboard.
If you're ever confused as to which mode you're in,
keep entering the
.Aq escape
key until
.Nm vi
beeps at you.
Generally,
.Nm vi
will beep at you if you try and do something that's not allowed.
It will also display error messages.
.Pp
To start editing a file, enter the following command:
.Pp
.Dl $ vi file
.Pp
The command you should enter as soon as you start editing is:
.Pp
.Dl :set verbose showmode
.Pp
This will make the editor give you verbose error messages and display
the current mode at the bottom of the screen.
.Pp
The commands to move around the file are:
.Bl -tag -width Ds
.It Cm h
Move the cursor left one character.
.It Cm j
Move the cursor down one line.
.It Cm k
Move the cursor up one line.
.It Cm l
Move the cursor right one character.
.It Aq Cm cursor-arrows
The cursor arrow keys should work, too.
.It Cm / Ns text
Search for the string
.Dq text
in the file,
and move the cursor to its first character.
.El
.Pp
The commands to enter new text are:
.Bl -tag -width "<escape>"
.It Cm a
Append new text, after the cursor.
.It Cm i
Insert new text, before the cursor.
.It Cm O
Open a new line above the line the cursor is on, and start entering text.
.It Cm o
Open a new line below the line the cursor is on, and start entering text.
.It Aq Cm escape
Once you've entered input mode using one of the
.Cm a ,
.Cm i ,
.Cm O
or
.Cm o
commands, use
.Aq Cm escape
to quit entering text and return to command mode.
.El
.Pp
The commands to copy text are:
.Bl -tag -width Ds
.It Cm p
Append the copied line after the line the cursor is on.
.It Cm yy
Copy the line the cursor is on.
.El
.Pp
The commands to delete text are:
.Bl -tag -width Ds
.It Cm dd
Delete the line the cursor is on.
.It Cm x
Delete the character the cursor is on.
.El
.Pp
The commands to write the file are:
.Bl -tag -width Ds
.It Cm :w
Write the file back to the file with the name that you originally used
as an argument on the
.Nm vi
command line.
.It Cm :w Ar file_name
Write the file back to the file with the name
.Ar file_name .
.El
.Pp
The commands to quit editing and exit the editor are:
.Bl -tag -width Ds
.It Cm :q
Quit editing and leave
.Nm vi
(if you've modified the file, but not saved your changes,
.Nm vi
will refuse to quit).
.It Cm :q!
Quit, discarding any modifications that you may have made.
.El
.Pp
One final caution:
Unusual characters can take up more than one column on the screen,
and long lines can take up more than a single screen line.
The above commands work on
.Dq physical
characters and lines,
i.e. they affect the entire line no matter how many screen lines it takes up
and the entire character no matter how many screen columns it takes up.
.Sh REGULAR EXPRESSIONS
.Nm ex Ns / Ns Nm vi
supports regular expressions
.Pq REs ,
as documented in
.Xr re_format 7 ,
for line addresses, as the first part of the
.Nm ex Cm substitute ,
.Cm global
and
.Cm v
commands, and in search patterns.
Basic regular expressions
.Pq BREs
are enabled by default;
extended regular expressions
.Pq EREs
are used if the
.Cm extended
option is enabled.
The use of regular expressions can be largely disabled using the
.Cm magic
option.
.Pp
The following strings have special meanings in the
.Nm ex Ns / Ns Nm vi
version of regular expressions:
.Bl -bullet -offset 6u
.It
An empty regular expression is equivalent to the last regular expression used.
.It
.Sq \e<
matches the beginning of the word.
.It
.Sq \e>
matches the end of the word.
.It
.Sq ~
matches the replacement part of the last
.Cm s
command.
.El
.Sh BUFFERS
A buffer is an area where commands can save changed or deleted text
for later use.
.Nm vi
buffers are named with a single character preceded by a double quote,
for example
.Pf \&" Aq c ;
.Nm ex
buffers are the same,
but without the double quote.
.Nm nex Ns / Ns Nm nvi
permits the use of any character without another meaning in the position where
a buffer name is expected.
.Pp
All buffers are either in
.Em line mode
or
.Em character mode .
Inserting a buffer in line mode into the text creates new lines for each of the
lines it contains, while a buffer in character mode creates new lines for any
lines
.Em other
than the first and last lines it contains.
The first and last lines are inserted at the current cursor position, becoming
part of the current line.
If there is more than one line in the buffer,
the current line itself will be split.
All
.Nm ex
commands which store text into buffers do so in line mode.
The behaviour of
.Nm vi
commands depend on their associated motion command:
.Bl -bullet -offset 6u
.It
.Aq Cm control-A ,
.Cm h ,
.Cm l ,
.Cm ,\& ,
.Cm 0 ,
.Cm B ,
.Cm E ,
.Cm F ,
.Cm T ,
.Cm W ,
.Cm ^ ,
.Cm b ,
.Cm e ,
.Cm f
and
.Cm t
make the destination buffer character-oriented.
.It
.Cm j ,
.Aq Cm control-M ,
.Cm k ,
.Cm ' ,
.Cm - ,
.Cm G ,
.Cm H ,
.Cm L ,
.Cm M ,
.Cm _
and
.Cm |\&
make the destination buffer line-oriented.
.It
.Cm $ ,
.Cm % ,
.Cm ` ,
.Cm (\& ,
.Cm )\& ,
.Cm / ,
.Cm ?\& ,
.Cm [[ ,
.Cm ]] ,
.Cm {
and
.Cm }
make the destination buffer character-oriented, unless the starting and
end positions are the first and last characters on a line.
In that case, the buffer is line-oriented.
.El
.Pp
The
.Nm ex
command
.Cm display buffers
displays the current mode for each buffer.
.Pp
Buffers named
.Sq a
through
.Sq z
may be referred to using their uppercase equivalent, in which case new content
will be appended to the buffer, instead of replacing it.
.Pp
Buffers named
.Sq 1
through
.Sq 9
are special.
A region of text modified using the
.Cm c
.Pq change
or
.Cm d
.Pq delete
commands is placed into the numeric buffer
.Sq 1
if no other buffer is specified and if it meets one of the following conditions:
.Bl -bullet -offset 6u
.It
It includes characters from more than one line.
.It
It is specified using a line-oriented motion.
.It
It is specified using one of the following motion commands:
.Aq Cm control-A ,
.Cm ` Ns Aq Cm character ,
.Cm n ,
.Cm N ,
.Cm % ,
.Cm / ,
.Cm { ,
.Cm } ,
.Cm \&( ,
.Cm \&) ,
and
.Cm \&? .
.El
.Pp
Before this copy is done, the previous contents of buffer
.Sq 1
are moved into buffer
.Sq 2 ,
.Sq 2
into buffer
.Sq 3 ,
and so on.
The contents of buffer
.Sq 9
are discarded.
Note that this rotation occurs
.Em regardless
of the user specifying another buffer.
In
.Nm vi ,
text may be explicitly stored into the numeric buffers.
In this case, the buffer rotation occurs before the replacement of the buffer's
contents.
The numeric buffers are only available in
.Nm vi
mode.
.Sh VI COMMANDS
The following section describes the commands available in the command
mode of the
.Nm vi
editor.
The following words have a special meaning in the commands
description:
.Pp
.Bl -tag -width bigword -compact -offset 3u
.It Ar bigword
A set of non-whitespace characters.
.It Ar buffer
Temporary area where commands may place text.
If not specified, the default buffer is used.
See also
.Sx BUFFERS ,
above.
.It Ar count
A positive number used to specify the desired number of iterations
of a command.
It defaults to 1 if not specified.
.It Ar motion
A cursor movement command which indicates the other end of the affected region
of text, the first being the current cursor position.
Repeating the command character makes it affect the whole
current line.
.It Ar word
A sequence of letters, digits or underscores.
.El
.Pp
.Ar buffer
and
.Ar count ,
if both present, may be specified in any order.
.Ar motion
and
.Ar count ,
if both present, are effectively multiplied together
and considered part of the motion.
.Pp
.Bl -tag -width Ds -compact
.It Xo
.Aq Cm control-A
.Xc
Search forward
for the word starting at the cursor position.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-B
.Xc
Page backwards
.Ar count
screens.
Two lines of overlap are maintained, if possible.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-D
.Xc
Scroll forward
.Ar count
lines.
If
.Ar count
is not given, scroll forward the number of lines specified by the last
.Aq Cm control-D
or
.Aq Cm control-U
command.
If this is the first
.Aq Cm control-D
command, scroll half the number of lines in the current screen.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-E
.Xc
Scroll forward
.Ar count
lines, leaving the current line and column as is, if possible.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-F
.Xc
Page forward
.Ar count
screens.
Two lines of overlap are maintained, if possible.
.Pp
.It Aq Cm control-G
Display the following file information:
the file name (as given to
.Nm vi ) ;
whether the file has been modified since it was last written;
if the file is readonly;
the current line number;
the total number of lines in the file;
and the current line number as a percentage of the total lines in the file.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-H
.Xc
.It Xo
.Op Ar count
.Cm h
.Xc
Move the cursor back
.Ar count
characters in the current line.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-J
.Xc
.It Xo
.Op Ar count
.Aq Cm control-N
.Xc
.It Xo
.Op Ar count
.Cm j
.Xc
Move the cursor down
.Ar count
lines without changing the current column.
.Pp
.It Aq Cm control-L
.It Aq Cm control-R
Repaint the screen.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-M
.Xc
.It Xo
.Op Ar count
.Cm +
.Xc
Move the cursor down
.Ar count
lines to the first non-blank character of that line.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-P
.Xc
.It Xo
.Op Ar count
.Cm k
.Xc
Move the cursor up
.Ar count
lines, without changing the current column.
.Pp
.It Aq Cm control-T
Return to the most recent tag context.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-U
.Xc
Scroll backwards
.Ar count
lines.
If
.Ar count
is not given, scroll backwards the number of lines specified by the last
.Aq Cm control-D
or
.Aq Cm control-U
command.
If this is the first
.Aq Cm control-U
command, scroll half the number of lines in the current screen.
.Pp
.It Aq Cm control-W
Switch to the next lower screen in the window,
or to the first screen if there are no lower screens in the window.
.Pp
.It Xo
.Op Ar count
.Aq Cm control-Y
.Xc
Scroll backwards
.Ar count
lines, leaving the current line and column as is, if possible.
.Pp
.It Aq Cm control-Z
Suspend the current editor session.
.Pp
.It Aq Cm escape
Execute the
.Nm ex
command being entered, or cancel it if it is only partial.
.Pp
.It Aq Cm control-]
Push a tag reference onto the tag stack.
.Pp
.It Aq Cm control-^
Switch to the most recently edited file.
.Pp
.It Xo
.Op Ar count
.Aq Cm space
.Xc
.It Xo
.Op Ar count
.Cm l
.Xc
Move the cursor forward
.Ar count
characters without changing the current line.
.Pp
.It Xo
.Op Ar count
.Cm !\&
.Ar motion shell-argument(s)
.Aq Li carriage-return
.Xc
Replace the lines spanned by
.Ar count
and
.Ar motion
with the output
.Pq standard output and standard error
of the program named by the
.Cm shell
option, called with a
.Fl c
flag followed by the
.Ar shell-argument(s)
.Pq bundled into a single argument .
Within
.Ar shell-argument(s) ,
the
.Sq % ,
.Sq #
and
.Sq !\&
characters are expanded to the current file name,
the previous current file name,
and the command text of the previous
.Cm !\&
or
.Cm :!
commands, respectively.
The special meaning of
.Sq % ,
.Sq #
and
.Sq !\&
can be overridden by escaping them with a backslash.
.Pp
.It Xo
.Op Ar count
.Cm #
.Sm off
.Cm # | + | -
.Sm on
.Xc
Increment
.Pq trailing So # Sc or So + Sc
or decrement
.Pq trailing Sq -
the number under the cursor by
.Ar count ,
starting at the cursor position or at the first non-blank
character following it.
Numbers with a leading
.Sq 0x
or
.Sq 0X
are interpreted as hexadecimal numbers.
Numbers with a leading
.Sq 0
are interpreted as octal numbers unless they contain a non-octal digit.
Other numbers may be prefixed with a
.Sq +
or
.Sq -
sign.
.Pp
.It Xo
.Op Ar count
.Cm $
.Xc
Move the cursor to the end of a line.
If
.Ar count
is specified, additionally move the cursor down
.Ar count
\- 1 lines.
.Pp
.It Cm %
Move to the parenthesis, square bracket or curly brace matching
the one found at the cursor position or the closest to the right of it.
.Pp
.It Cm &
Repeat the previous substitution command on the current line.
.Pp
.It Xo
.Cm ' Ns Aq Ar character
.Xc
.It Xo
.Cm ` Ns Aq Ar character
.Xc
Return to the cursor position marked by the character
.Ar character ,
or, if
.Ar character
is
.Sq '
or
.Sq ` ,
to the position of the cursor before the last of the following commands:
.Aq Cm control-A ,
.Aq Cm control-T ,
.Aq Cm control-] ,
.Cm % ,
.Cm ' ,
.Cm ` ,
.Cm (\& ,
.Cm )\& ,
.Cm / ,
.Cm ?\& ,
.Cm G ,
.Cm H ,
.Cm L ,
.Cm [[ ,
.Cm ]] ,
.Cm { ,
.Cm } .
The first form returns to the first non-blank character of the line marked by
.Ar character .
The second form returns to the line and column marked by
.Ar character .
.Pp
.It Xo
.Op Ar count
.Cm \&(
.Xc
.It Xo
.Op Ar count
.Cm \&)
.Xc
Move
.Ar count
sentences backward or forward, respectively.
A sentence is an area of text that begins with the first nonblank character
following the previous sentence, paragraph, or section
boundary and continues until the next period, exclamation mark,
or question mark character, followed by any number of closing parentheses,
brackets, double or single quote characters, followed by
either an end-of-line or two whitespace characters.
Groups of empty lines
.Pq or lines containing only whitespace characters
are treated as a single sentence.
.Pp
.It Xo
.Op Ar count
.Cm ,\&
.Xc
Reverse find character
(i.e. the last
.Cm F ,
.Cm f ,
.Cm T
or
.Cm t
command)
.Ar count
times.
.Pp
.It Xo
.Op Ar count
.Cm -
.Xc
Move to the first non-blank character of the previous line,
.Ar count
times.
.Pp
.It Xo
.Op Ar count
.Cm .\&
.Xc
Repeat the last
.Nm vi
command that modified text.
.Ar count
replaces both the
.Ar count
argument of the repeated command and that of the associated
.Ar motion .
If the
.Cm .\&
command repeats the
.Cm u
command, the change log is rolled forward or backward, depending on the action
of the
.Cm u
command.
.Pp
.It Xo
.Pf / Ar RE
.Aq Li carriage-return
.Xc
.It Xo
.Pf / Ar RE Ns /
.Op Ar offset
.Op Cm z
.Aq Li carriage-return
.Xc
.It Xo
.Pf ? Ar RE
.Aq Li carriage-return
.Xc
.It Xo
.Pf ? Ar RE ? Op Ar offset
.Op Cm z
.Aq Li carriage-return
.Xc
.It Cm N
.It Cm n
Search forward
.Pq Sq /
or backward
.Pq Sq ?\&
for a regular expression.
.Cm n
and
.Cm N
repeat the last search in the same or opposite directions, respectively.
If
.Ar RE
is empty, the last search regular expression is used.
If
.Ar offset
is specified, the cursor is placed
.Ar offset
lines before or after the matched regular expression.
If either
.Cm n
or
.Cm N
commands are used as motion components for the
.Cm !\&
command, there will be no prompt for the text of the command and the previous
.Cm !\&
will be executed.
Multiple search patterns may be grouped together by delimiting them with
semicolons and zero or more whitespace characters.
These patterns are evaluated from left to right with the final cursor position
determined by the last search pattern.
A
.Cm z
command may be appended to the closed search expressions to reposition the
result line.
.Pp
.It Cm 0
Move to the first character in the current line.
.Pp
.It Cm :\&
Execute an
.Nm ex
command.
.Pp
.It Xo
.Op Ar count
.Cm ;\&
.Xc
Repeat the last character find
(i.e. the last
.Cm F ,
.Cm f ,
.Cm T
or
.Cm t
command)
.Ar count
times.
.Pp
.It Xo
.Op Ar count
.Cm <
.Ar motion
.Xc
.It Xo
.Op Ar count
.Cm >
.Ar motion
.Xc
Shift
.Ar count
lines left or right, respectively, by an amount of
.Cm shiftwidth .
.Pp
.It Cm @@ Ar buffer
Execute a named
.Ar buffer
as
.Nm vi
commands.
The buffer may include
.Nm ex
commands too, but they must be expressed as a
.Cm \&:
command.
If
.Ar buffer
is
.Sq @@
or
.Sq * ,
then the last buffer executed shall be used.
.Pp
.It Xo
.Op Ar count
.Cm A
.Xc
Enter input mode, appending the text after the end of the line.
If a
.Ar count
argument is given,
the characters input are repeated
.Ar count
\- 1 times after input mode is exited.
.Pp
.It Xo
.Op Ar count
.Cm B
.Xc
Move backwards
.Ar count
bigwords.
.Pp
.It Xo
.Op Ar buffer
.Cm C
.Xc
Change text from the current position to the end-of-line.
If
.Ar buffer
is specified,
.Dq yank
the deleted text into
.Ar buffer .
.Pp
.It Xo
.Op Ar buffer
.Cm D
.Xc
Delete text from the current position to the end-of-line.
If
.Ar buffer
is specified,
.Dq yank
the deleted text into
.Ar buffer .
.Pp
.It Xo
.Op Ar count
.Cm E
.Xc
Move forward
.Ar count
end-of-bigwords.
.Pp
.It Xo
.Op Ar count
.Cm F Aq Ar character
.Xc
Search
.Ar count
times backward through the current line for
.Ar character .
.Pp
.It Xo
.Op Ar count
.Cm G
.Xc
Move to line
.Ar count ,
or the last line of the file if
.Ar count
is not specified.
.Pp
.It Xo
.Op Ar count
.Cm H
.Xc
Move to the screen line
.Ar count
\- 1 lines below the top of the screen.
.Pp
.It Xo
.Op Ar count
.Cm I
.Xc
Enter input mode, inserting the text at the beginning of the line.
If a
.Ar count
argument is given,
the characters input are repeated
.Ar count
\- 1 more times.
.Pp
.It Xo
.Op Ar count
.Cm J
.Xc
Join
.Ar count
lines with the current line.
The spacing between two joined lines is set to two whitespace characters if the
former ends with a question mark, a period or an exclamation mark.
It is set to one whitespace character otherwise.
.Pp
.It Xo
.Op Ar count
.Cm L
.Xc
Move to the screen line
.Ar count
\- 1 lines above the bottom of the screen.
.Pp
.It Cm M
Move to the screen line in the middle of the screen.
.Pp
.It Xo
.Op Ar count
.Cm O
.Xc
Enter input mode, appending text in a new line above the current line.
If a
.Ar count
argument is given,
the characters input are repeated
.Ar count
\- 1 more times.
.Pp
.It Xo
.Op Ar buffer
.Cm P
.Xc
Insert text from
.Ar buffer
before the current column if
.Ar buffer
is character-oriented or before the current line if it is line-oriented.
.Pp
.It Cm Q
Exit
.Nm vi
.Pq or visual
mode and switch to
.Nm ex
mode.
.Pp
.It Xo
.Op Ar count
.Cm R
.Xc
Enter input mode, replacing the characters in the current line.
If a
.Ar count
argument is given,
the characters input are repeated
.Ar count
\- 1 more times upon exit from insert mode.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm S
.Xc
Substitute
.Ar count
lines.
If
.Ar buffer
is specified,
.Dq yank
the deleted text into
.Ar buffer .
.Pp
.It Xo
.Op Ar count
.Cm T
.Aq Ar character
.Xc
Search backwards,
.Ar count
times, through the current line for the character after the specified
.Ar character .
.Pp
.It Cm U
Restore the current line to its state before the cursor last moved to it.
.Pp
.It Xo
.Op Ar count
.Cm W
.Xc
Move forward
.Ar count
bigwords.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm X
.Xc
Delete
.Ar count
characters before the cursor, on the current line.
If
.Ar buffer
is specified,
.Dq yank
the deleted text into
.Ar buffer .
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm Y
.Xc
Copy (or
.Dq yank )
.Ar count
lines into
.Ar buffer .
.Pp
.It Cm ZZ
Write the file and exit
.Nm vi
if there are no more files to edit.
Entering two
.Dq quit
commands in a row ignores any remaining file to edit.
.Pp
.It Xo
.Op Ar count
.Cm [[
.Xc
Back up
.Ar count
section boundaries.
.Pp
.It Xo
.Op Ar count
.Cm ]]
.Xc
Move forward
.Ar count
section boundaries.
.Pp
.It Cm ^
Move to the first non-blank character on the current line.
.Pp
.It Xo
.Op Ar count
.Cm _
.Xc
Move down
.Ar count
\- 1 lines, to the first non-blank character.
.Pp
.It Xo
.Op Ar count
.Cm a
.Xc
Enter input mode, appending the text after the cursor.
If a
.Ar count
argument is given,
the characters input are repeated
.Ar count
\-1 more times.
.Pp
.It Xo
.Op Ar count
.Cm b
.Xc
Move backwards
.Ar count
words.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm c
.Ar motion
.Xc
Change the region of text described by
.Ar count
and
.Ar motion .
If
.Ar buffer
is specified,
.Dq yank
the changed text into
.Ar buffer .
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm d
.Ar motion
.Xc
Delete the region of text described by
.Ar count
and
.Ar motion .
If
.Ar buffer
is specified,
.Dq yank
the deleted text into
.Ar buffer .
.Pp
.It Xo
.Op Ar count
.Cm e
.Xc
Move forward
.Ar count
end-of-words.
.Pp
.It Xo
.Op Ar count
.Cm f Aq Ar character
.Xc
Search forward,
.Ar count
times, through the rest of the current line for
.Aq Ar character .
.Pp
.It Xo
.Op Ar count
.Cm i
.Xc
Enter input mode, inserting the text before the cursor.
If a
.Ar count
argument is given,
the characters input are repeated
.Ar count
\-1 more times.
.Pp
.It Xo
.Cm m
.Aq Ar character
.Xc
Save the current context
.Pq line and column
as
.Aq Ar character .
.Pp
.It Xo
.Op Ar count
.Cm o
.Xc
Enter input mode, appending text in a new line under the current line.
If a
.Ar count
argument is given,
the characters input are repeated
.Ar count
\- 1 more times.
.Pp
.It Xo
.Op Ar buffer
.Cm p
.Xc
Append text from
.Ar buffer .
Text is appended after the current column if
.Ar buffer
is character oriented, or the after current line otherwise.
.Pp
.It Xo
.Op Ar count
.Cm r
.Aq Ar character
.Xc
Replace
.Ar count
characters by
.Ar character .
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm s
.Xc
Substitute
.Ar count
characters in the current line starting with the current character.
If
.Ar buffer
is specified,
.Dq yank
the substituted text into
.Ar buffer .
.Pp
.It Xo
.Op Ar count
.Cm t
.Aq Ar character
.Xc
Search forward,
.Ar count
times, through the current line for the character immediately before
.Aq Ar character .
.Pp
.It Cm u
Undo the last change made to the file.
If repeated, the
.Cm u
command alternates between these two states.
The
.Cm .\&
command, when used immediately after
.Cm u ,
causes the change log to be rolled forward or backward, depending on the action
of the
.Cm u
command.
.Pp
.It Xo
.Op Ar count
.Cm w
.Xc
Move forward
.Ar count
words.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm x
.Xc
Delete
.Ar count
characters at the current cursor position, but no more than there are till the
end of the line.
.Pp
.It Xo
.Op Ar buffer
.Op Ar count
.Cm y
.Ar motion
.Xc
Copy (or
.Dq yank )
a text region specified by
.Ar count
and
.Ar motion
into a buffer.
.Pp
.It Xo
.Op Ar count1
.Cm z
.Op Ar count2
.Cm type
.Xc
Redraw, optionally repositioning and resizing the screen.
If
.Ar count2
is specified, limit the screen size to
.Ar count2
lines.
The following
.Cm type
characters may be used:
.Bl -tag -width Ds
.It Cm +
If
.Ar count1
is specified, place the line
.Ar count1
at the top of the screen.
Otherwise, display the screen after the current screen.
.It Aq Cm carriage-return
Place the line
.Ar count1
at the top of the screen.
.It Cm .\&
Place the line
.Ar count1
in the center of the screen.
.It Cm -
Place the line
.Ar count1
at the bottom of the screen.
.It Cm ^
If
.Ar count1
is given,
display the screen before the screen before
.Ar count1
.Pq i.e. 2 screens before .
Otherwise, display the screen before the current screen.
.El
.Pp
.It Xo
.Op Ar count
.Cm {\&
.Xc
Move backward
.Ar count
paragraphs.
.Pp
.It Xo
.Op Ar column
.Cm |\&
.Xc
Move to a specific
.Ar column
position on the current line.
If
.Ar column
is omitted,
move to the start of the current line.
.Pp
.It Xo
.Op Ar count
.Cm }\&
.Xc
Move forward
.Ar count
paragraphs.
.Pp
.It Xo
.Op Ar count
.Cm ~
.Ar motion
.Xc
If the
.Cm tildeop
option is not set, reverse the case of the next
.Ar count
character(s) and no
.Ar motion
can be specified.
Otherwise
.Ar motion
is mandatory and
.Cm ~
reverses the case of the characters in a text region specified by the
.Ar count
and
.Ar motion .
.Pp
.It Aq Cm interrupt
Interrupt the current operation.
The
.Aq interrupt
character is usually
.Aq control-C .
.El
.Sh VI TEXT INPUT COMMANDS
The following section describes the commands available in the text input mode
of the
.Nm vi
editor.
.Pp
.Bl -tag -width Ds -compact
.It Aq Cm nul
Replay the previous input.
.Pp
.It Aq Cm control-D
Erase to the previous
.Ar shiftwidth
column boundary.
.Pp
.It Cm ^ Ns Aq Cm control-D
Erase all of the autoindent characters, and reset the autoindent level.
.Pp
.It Cm 0 Ns Aq Cm control-D
Erase all of the autoindent characters.
.Pp
.It Aq Cm control-T
Insert sufficient
.Aq tab
and
.Aq space
characters to move forward to the next
.Ar shiftwidth
column boundary.
.Pp
.It Aq Cm erase
.It Aq Cm control-H
Erase the last character.
.Pp
.It Aq Cm literal next
Escape the next character from any special meaning.
The
.Aq literal\ \&next
character is usually
.Aq control-V .
.Pp
.It Aq Cm escape
Resolve all text input into the file, and return to command mode.
.Pp
.It Aq Cm line erase
Erase the current line.
.Pp
.It Aq Cm control-W
.It Aq Cm word erase
Erase the last word.
The definition of word is dependent on the
.Cm altwerase
and
.Cm ttywerase
options.
.Pp
.Sm off
.It Xo
.Aq Cm control-X
.Bq Cm 0-9A-Fa-f
.Cm +
.Xc
.Sm on
Insert a character with the specified hexadecimal value into the text.
.Pp
.It Aq Cm interrupt
Interrupt text input mode, returning to command mode.
The
.Aq interrupt
character is usually
.Aq control-C .
.El
.Sh EX COMMANDS
The following section describes the commands available in the
.Nm ex
editor.
In each entry below, the tag line is a usage synopsis for the command.
.Pp
.Bl -tag -width Ds -compact
.It Aq Cm end-of-file
Scroll the screen.
.Pp
.It Cm !\& Ar argument(s)
.It Xo
.Op Ar range
.Cm !\&
.Ar argument(s)
.Xc
Execute a shell command, or filter lines through a shell command.
.Pp
.It Cm \&"
A comment.
.Pp
.It Xo
.Op Ar range
.Cm nu Ns Op Cm mber
.Op Ar count
.Op Ar flags
.Xc
.It Xo
.Op Ar range
.Cm #
.Op Ar count
.Op Ar flags
.Xc
Display the selected lines, each preceded with its line number.
.Pp
.It Cm @@ Ar buffer
.It Cm * Ar buffer
Execute a buffer.
.Pp
.It Xo
.Op Ar range
.Cm < Ns Op Cm < ...
.Op Ar count
.Op Ar flags
.Xc
Shift lines left.
.Pp
.It Xo
.Op Ar line
.Cm =
.Op Ar flags
.Xc
Display the line number of
.Ar line .
If
.Ar line
is not specified, display the line number of the last line in the file.
.Pp
.It Xo
.Op Ar range
.Cm > Ns Op Cm > ...
.Op Ar count
.Op Ar flags
.Xc
Shift lines right.
.Pp
.It Xo
.Cm ab Ns Op Cm breviate
.Ar lhs rhs
.Xc
.Nm vi
only.
Add
.Ar lhs
as an abbreviation for
.Ar rhs
to the abbreviation list.
.Pp
.It Xo
.Op Ar line
.Cm a Ns Op Cm ppend Ns
.Op Cm !\&
.Xc
The input text is appended after the specified line.
.Pp
.It Cm ar Ns Op Cm gs
Display the argument list.
.Pp
.It Cm bg
.Nm vi
only.
Background the current screen.
.Pp
.It Xo
.Op Ar range
.Cm c Ns Op Cm hange Ns
.Op Cm !\&
.Op Ar count
.Xc
The input text replaces the specified range.
.Pp
.It Xo
.Cm chd Ns Op Cm ir Ns
.Op Cm !\&
.Op Ar directory
.Xc
.It Xo
.Cm cd Ns Op Cm !\&
.Op Ar directory
.Xc
Change the current working directory.
.Pp
.It Xo
.Op Ar range
.Cm co Ns Op Cm py
.Ar line
.Op Ar flags
.Xc
.It Xo
.Op Ar range
.Cm t
.Ar line
.Op Ar flags
.Xc
Copy the specified lines after the destination
.Ar line .
.Pp
.It Xo
.Op Ar range
.Cm d Ns Op Cm elete
.Op Ar buffer
.Op Ar count
.Op Ar flags
.Xc
Delete the lines from the file.
.Pp
.It Xo
.Cm di Ns Op Cm splay
.Cm b Ns Oo Cm uffers Oc |
.Cm s Ns Oo Cm creens Oc |
.Cm t Ns Op Cm ags
.Xc
Display buffers, screens or tags.
.Pp
.It Xo
.Op Cm Ee Ns
.Op Cm dit Ns
.Op Cm !\&
.Op Ar +cmd
.Op Ar file
.Xc
.It Xo
.Op Cm Ee Ns
.Cm x Ns Op Cm !\&
.Op Ar +cmd
.Op Ar file
.Xc
Edit a different file.
.Pp
.It Xo
.Cm exu Ns Op Cm sage
.Op Ar command
.Xc
Display usage for an
.Nm ex
command.
.Pp
.It Xo
.Cm f Ns Op Cm ile
.Op Ar file
.Xc
Display and optionally change the file name.
.Pp
.It Xo
.Op Cm Ff Ns
.Cm g
.Op Ar name
.Xc
.Nm vi
mode only.
Foreground the specified screen.
.Pp
.It Xo
.Op Ar range
.Cm g Ns Op Cm lobal
.No / Ns Ar pattern Ns /
.Op Ar commands
.Xc
.It Xo
.Op Ar range
.Cm v
.No / Ns Ar pattern Ns /
.Op Ar commands
.Xc
Apply commands to lines matching
.Pq Sq global
or not matching
.Pq Sq v
a pattern.
.Pp
.It Cm he Ns Op Cm lp
Display a help message.
.Pp
.It Xo
.Op Ar line
.Cm i Ns Op Cm nsert Ns
.Op Cm !\&
.Xc
The input text is inserted before the specified line.
.Pp
.It Xo
.Op Ar range
.Cm j Ns Op Cm oin Ns
.Op Cm !\&
.Op Ar count
.Op Ar flags
.Xc
Join lines of text together.
.Pp
.It Xo
.Op Ar range
.Cm l Ns Op Cm ist
.Op Ar count
.Op Ar flags
.Xc
Display the lines unambiguously.
.Pp
.It Xo
.Cm map Ns Op Cm !\&
.Op Ar lhs rhs
.Xc
Define or display maps (for
.Nm vi
only).
.Pp
.It Xo
.Op Ar line
.Cm ma Ns Op Cm rk
.Aq Ar character
.Xc
.It Xo
.Op Ar line
.Cm k Aq Ar character
.Xc
Mark the line with the mark
.Aq Ar character .
.Pp
.It Xo
.Op Ar range
.Cm m Ns Op Cm ove
.Ar line
.Xc
Move the specified lines after the target line.
.Pp
.It Xo
.Cm mk Ns Op Cm exrc Ns
.Op Cm !\&
.Ar file
.Xc
Write the abbreviations, editor options and maps to the specified
.Ar file .
.Pp
.It Xo
.Op Cm Nn Ns
.Op Cm ext Ns
.Op Cm !\&
.Op Ar file ...
.Xc
Edit the next file from the argument list.
.\" .Pp
.\" .It Xo
.\" .Op Ar line
.\" .Cm o Ns Op Cm pen
.\" .No / Ns Ar pattern Ns /
.\" .Op Ar flags
.\" .Xc
.\" Enter open mode.
.Pp
.It Cm pre Ns Op Cm serve
Save the file in a form that can later be recovered using the
.Nm ex
.Fl r
option.
.Pp
.It Xo
.Op Cm \&Pp Ns
.Cm rev Ns Op Cm ious Ns
.Op Cm !\&
.Xc
Edit the previous file from the argument list.
.Pp
.It Xo
.Op Ar range
.Cm p Ns Op Cm rint
.Op Ar count
.Op Ar flags
.Xc
Display the specified lines.
.Pp
.It Xo
.Op Ar line
.Cm pu Ns Op Cm t
.Op Ar buffer
.Xc
Append buffer contents to the current line.
.Pp
.It Xo
.Cm q Ns Op Cm uit Ns
.Op Cm !\&
.Xc
End the editing session.
.Pp
.It Xo
.Op Ar line
.Cm r Ns Op Cm ead Ns
.Op Cm !\&
.Op Ar file
.Xc
Read a file.
.Pp
.It Xo
.Cm rec Ns Op Cm over
.Ar file
.Xc
Recover
.Ar file
if it was previously saved.
.Pp
.It Xo
.Cm res Ns Op Cm ize
.Op Cm + Ns | Ns Cm - Ns
.Ar size
.Xc
.Nm vi
mode only.
Grow or shrink the current screen.
.Pp
.It Xo
.Cm rew Ns Op Cm ind Ns
.Op Cm !\&
.Xc
Rewind the argument list.
.Pp
.It Xo
.Op Ar range
.Sm off
.Cm s
.Oo Cm / Ar pattern Cm / Ar replace Cm /
.Op Ar options
.Op Ar count
.Op Ar flags
.Oc
.Sm on
.Xc
.It Xo
.Op Ar range
.Sm off
.Cm &
.Op Ar options
.Op Ar count
.Op Ar flags
.Sm on
.Xc
.It Xo
.Op Ar range
.Sm off
.Cm ~
.Op Ar options
.Op Ar count
.Op Ar flags
.Sm on
.Xc
Substitute the regular expression
.Ar pattern
with
.Ar replace .
When invoked as
.Cm & ,
or if
.Cm / Ns Ar pattern Ns Cm / Ns Ar replace Ns Cm /
is omitted,
.Ar pattern
and
.Ar replace
from the most recent
.Cm s
command are used.
.Cm ~
behaves like
.Cm & ,
except the pattern used is the most recent regular expression used by any
command.
.Pp
The
.Ar replace
field may contain any of the following sequences:
.Bl -tag -width Ds
.It Sq &
The text matched by
.Ar pattern .
.It Sq \(a~
The replacement part of the previous
.Cm s
command.
.It Sq %
If this is the entire
.Ar replace
pattern, the replacement part of the previous
.Cm s
command.
.It Sq \e#
Where
.Sq #
is an integer from 1 to 9, the text matched by the #'th subexpression in
.Ar pattern .
.It Sq \eL
Causes the characters up to the end of the line of the next occurrence of
.Sq \eE
or
.Sq \ee
to be converted to lowercase.
.It Sq \el
Causes the next character to be converted to lowercase.
.It Sq \eU
Causes the characters up to the end of the line of the next occurrence of
.Sq \eE
or
.Sq \ee
to be converted to uppercase.
.It Sq \eu
Causes the next character to be converted to uppercase.
.El
.Pp
The
.Ar options
field may contain any of the following characters:
.Bl -tag -width Ds
.It Sq c
Prompt for confirmation before each replacement is done.
.It Sq g
Replace all instances of
.Ar pattern
in a line, not just the first.
.El
.Pp
.It Xo
.Cm se Ns Op Cm t
.Sm off
.Op option Oo = Oo value Oc Oc \ \&...
.Sm on
.Pf \ \& Op nooption ...
.Op option? ...
.Op Ar all
.Xc
Display or set editor options.
.Pp
.It Cm sh Ns Op Cm ell
Run a shell program.
.Pp
.It Xo
.Cm so Ns Op Cm urce
.Ar file
.Xc
Read and execute
.Nm ex
commands from a file.
.Pp
.It Xo
.Cm su Ns Op Cm spend Ns
.Op Cm !\&
.Xc
.It Xo
.Cm st Ns Op Cm op Ns
.Op Cm !\&
.Xc
.It Aq Cm suspend
Suspend the edit session.
The
.Aq suspend
character is usually
.Aq control-Z .
.Pp
.It Xo
.Op Cm Tt Ns
.Cm a Ns Op Cm g Ns
.Op Cm !\&
.Ar tagstring
.Xc
Edit the file containing the specified tag.
.Pp
.It Xo
.Cm tagn Ns Op Cm ext Ns
.Op Cm !\&
.Xc
Edit the file containing the next context for the current tag.
.Pp
.It Xo
.Cm tagp Ns Op Cm op Ns
.Op Cm !\&
.Op Ar file | number
.Xc
Pop to the specified tag in the tags stack.
.Pp
.It Xo
.Cm tagpr Ns Op Cm ev Ns
.Op Cm !\&
.Xc
Edit the file containing the previous context for the current tag.
.Pp
.It Xo
.Cm tagt Ns Op Cm op Ns
.Op Cm !\&
.Xc
Pop to the least recent tag on the tags stack, clearing the stack.
.Pp
.It Xo
.Cm una Ns Op Cm bbreviate
.Ar lhs
.Xc
.Nm vi
only.
Delete an abbreviation.
.Pp
.It Cm u Ns Op Cm ndo
Undo the last change made to the file.
.Pp
.It Xo
.Cm unm Ns Op Cm ap Ns
.Op Cm !\&
.Ar lhs
.Xc
Unmap a mapped string.
.Pp
.It Cm ve Ns Op Cm rsion
Display the version of the
.Nm ex Ns / Ns Nm vi
editor.
.Pp
.It Xo
.Op Ar line
.Cm vi Ns Op Cm sual
.Op Ar type
.Op Ar count
.Op Ar flags
.Xc
.Nm ex
mode only.
Enter
.Nm vi .
.Pp
.It Xo
.Op Cm Vi Ns
.Cm i Ns Op Cm sual Ns
.Op Cm !\&
.Op Ar +cmd
.Op Ar file
.Xc
.Nm vi
mode only.
Edit a new file.
.Pp
.It Xo
.Cm viu Ns Op Cm sage
.Op Ar command
.Xc
Display usage for a
.Nm vi
command.
.Pp
.It Xo
.Op Ar range
.Cm w Ns Op Cm rite Ns
.Op Cm !\&
.Op >>
.Op Ar file
.Xc
.It Xo
.Op Ar range
.Cm w Ns Op Cm rite
.Op Cm !\&
.Op Ar file
.Xc
.It Xo
.Op Ar range
.Cm wn Ns Op Cm !\&
.Op >>
.Op Ar file
.Xc
.It Xo
.Op Ar range
.Cm wq Ns Op Cm !\&
.Op >>
.Op Ar file
.Xc
Write the file.
.Pp
.It Xo
.Op Ar range
.Cm x Ns Op Cm it Ns
.Op Cm !\&
.Op Ar file
.Xc
Exit the editor,
writing the file if it has been modified.
.Pp
.It Xo
.Op Ar range
.Cm ya Ns Op Cm nk
.Op Ar buffer
.Op Ar count
.Xc
Copy the specified lines to a buffer.
.Pp
.It Xo
.Op Ar line
.Cm z
.Op Ar type
.Op Ar count
.Op Ar flags
.Xc
Adjust the window.
.El
.Sh SET OPTIONS
There are a large number of options that may be set
.Pq or unset
to change the editor's behavior.
This section describes the options, their abbreviations and their
default values.
.Pp
In each entry below, the first part of the tag line is the full name
of the option, followed by any equivalent abbreviations.
The part in square brackets is the default value of the option.
Most of the options are boolean, i.e. they are either on or off,
and do not have an associated value.
.Pp
Options apply to both
.Nm ex
and
.Nm vi
modes, unless otherwise specified.
.Bl -tag -width Ds
.It Cm altwerase Bq off
.Nm vi
only.
Select an alternate word erase algorithm.
.It Cm autoindent , ai Bq off
Automatically indent new lines.
.It Cm autoprint , ap Bq on
.Nm ex
only.
Display the current line automatically.
.It Cm autowrite , aw Bq off
Write modified files automatically when changing files or suspending the editor
session.
.It Cm backup Bq \&"\&"
Back up files before they are overwritten.
.It Cm beautify , bf Bq off
Discard control characters.
.It Cm cdpath Bq "environment variable CDPATH, or current directory"
The directory paths used as path prefixes for the
.Cm cd
command.
.It Cm cedit Bq no default
Set the character to edit the colon command-line history.
.It Cm columns , co Bq 80
Set the number of columns in the screen.
.It Cm comment Bq off
.Nm vi
only.
Skip leading comments in shell, C and C++ language files.
.It Cm edcompatible , ed Bq off
Remember the values of the
.Sq c
and
.Sq g
suffixes to the
.Cm s , &
and
.Cm ~
commands, instead of initializing them as unset for each new command.
.It Cm escapetime Bq 1
The tenths of a second
.Nm ex Ns / Ns Nm vi
waits for a subsequent key to complete an
.Aq escape
key mapping.
.It Cm errorbells , eb Bq off
.Nm ex
only.
Announce error messages with a bell.
.It Cm exrc , ex Bq off
Read the startup files in the local directory.
.It Cm extended Bq off
Use extended regular expressions
.Pq EREs
rather than basic regular expressions
.Pq BREs .
See
.Xr re_format 7
for more information on regular expressions.
.It Cm filec Bq Aq tab
Set the character to perform file path completion on the colon command line.
.It Cm flash Bq off
Flash the screen instead of beeping the keyboard on error.
.It Cm hardtabs , ht Bq 0
Set the spacing between hardware tab settings.
This option currently has no effect.
.It Cm iclower Bq off
Makes all regular expressions case-insensitive,
as long as an upper-case letter does not appear in the search string.
.It Cm ignorecase , ic Bq off
Ignore case differences in regular expressions.
.It Cm keytime Bq 6
The tenths of a second
.Nm ex Ns / Ns Nm vi
waits for a subsequent key to complete a key mapping.
.It Cm leftright Bq off
.Nm vi
only.
Do left-right scrolling.
.It Cm lines , li Bq 24
.Nm vi
only.
Set the number of lines in the screen.
.It Cm list Bq off
Display lines in an unambiguous fashion.
.It Cm lock Bq on
Attempt to get an exclusive lock on any file being edited, read or written.
.It Cm magic Bq on
When turned off, all regular expression characters except for
.Sq ^
and
.Sq $
are treated as ordinary characters.
Preceding individual characters by
.Sq \e
re-enables them.
.It Cm matchtime Bq 7
.Nm vi
only.
The tenths of a second
.Nm ex Ns / Ns Nm vi
pauses on the matching character when the
.Cm showmatch
option is set.
.It Cm mesg Bq on
Permit messages from other users.
.It Cm noprint Bq \&"\&"
Characters that are never handled as printable characters.
.It Cm number , nu Bq off
Precede each line displayed with its current line number.
.It Cm octal Bq off
Display unknown characters as octal numbers, instead of the default
hexadecimal.
.It Cm open Bq on
.Nm ex
only.
If this option is not set, the
.Cm open
and
.Cm visual
commands are disallowed.
.It Cm paragraphs , para Bq "IPLPPPQPP LIpplpipbpBlBdPpLpIt"
.Nm vi
only.
Define additional paragraph boundaries for the
.Cm {\&
and
.Cm }\&
commands.
.It Cm path Bq \&"\&"
Define additional directories to search for files being edited.
.It Cm print Bq \&"\&"
Characters that are always handled as printable characters.
.It Cm prompt Bq on
.Nm ex
only.
Display a command prompt.
.It Cm readonly , ro Bq off
Mark the file and session as read-only.
.It Cm recdir Bq /tmp/vi.recover
The directory where recovery files are stored.
.It Cm remap Bq on
Remap keys until resolved.
.It Cm report Bq 5
Set the number of lines about which the editor reports changes or yanks.
.It Cm ruler Bq off
.Nm vi
only.
Display a row/column ruler on the colon command line.
.It Cm scroll , scr Bq "($LINES \- 1) / 2"
Set the number of lines scrolled.
.It Cm searchincr Bq off
Makes the
.Cm /
and
.Cm ?\&
commands incremental.
.It Cm sections , sect Bq "NHSHH HUnhshShSs"
.Nm vi
only.
Define additional section boundaries for the
.Cm [[
and
.Cm ]]
commands.
.It Cm secure Bq off
Turns off all access to external programs.
.It Cm shell , sh Bq "environment variable SHELL, or /bin/sh"
Select the shell used by the editor.
.It Cm shellmeta Bq ~{[*?$`'\&"\e
Set the meta characters checked to determine if file name expansion
is necessary.
.It Cm shiftwidth , sw Bq 8
Set the autoindent and shift command indentation width.
.It Cm showmatch , sm Bq off
.Nm vi
only.
Note matching
.Sq {
and
.Sq \&(
for
.Sq }
and
.Sq )\&
characters.
.It Cm showmode , smd Bq off
.Nm vi
only.
Display the current editor mode and a
.Dq modified
flag.
.It Cm sidescroll Bq 16
.Nm vi
only.
Set the amount a left-right scroll will shift.
.It Cm tabstop , ts Bq 8
This option sets tab widths for the editor display.
.It Cm taglength , tl Bq 0
Set the number of significant characters in tag names.
.It Cm tags , tag Bq tags
Set the list of tags files.
.It Xo
.Cm term , ttytype , tty
.Bq "environment variable TERM"
.Xc
Set the terminal type.
.It Cm terse Bq off
This option has historically made editor messages less verbose.
It has no effect in this implementation.
.It Cm tildeop Bq off
Modify the
.Cm ~
command to take an associated motion.
.It Cm timeout , to Bq on
Time out on keys which may be mapped.
.It Cm ttywerase Bq off
.Nm vi
only.
Select an alternate erase algorithm.
.It Cm verbose Bq off
.Nm vi
only.
Display an error message for every error.
.It Cm w300 Bq no default
.Nm vi
only.
Set the window size if the baud rate is less than 1200 baud.
.It Cm w1200 Bq no default
.Nm vi
only.
Set the window size if the baud rate is equal to 1200 baud.
.It Cm w9600 Bq no default
.Nm vi
only.
Set the window size if the baud rate is greater than 1200 baud.
.It Cm warn Bq on
.Nm ex
only.
This option causes a warning message to be printed on the terminal
if the file has been modified since it was last written, before a
.Cm !\&
command.
.It Xo
.Cm window , w , wi
.Bq "environment variable LINES \- 1"
.Xc
Set the window size for the screen.
.It Cm windowname Bq off
Change the icon/window name to the current file name even if it can't
be restored on editor exit.
.It Cm wraplen , wl Bq 0
.Nm vi
only.
Break lines automatically,
the specified number of columns from the left-hand margin.
If both the
.Cm wraplen
and
.Cm wrapmargin
edit options are set, the
.Cm wrapmargin
value is used.
.It Cm wrapmargin , wm Bq 0
.Nm vi
only.
Break lines automatically,
the specified number of columns from the right-hand margin.
If both the
.Cm wraplen
and
.Cm wrapmargin
edit options are set, the
.Cm wrapmargin
value is used.
.It Cm wrapscan , ws Bq on
Set searches to wrap around the end or beginning of the file.
.It Cm writeany , wa Bq off
Turn off file-overwriting checks.
.El
.Sh ENVIRONMENT
.Bl -tag -width "COLUMNS"
.It Ev COLUMNS
The number of columns on the screen.
This value overrides any system or terminal specific values.
If the
.Ev COLUMNS
environment variable is not set when
.Nm ex Ns / Ns Nm vi
runs, or the
.Cm columns
option is explicitly reset by the user,
.Nm ex Ns / Ns Nm vi
enters the value into the environment.
.It Ev EXINIT
A list of
.Nm ex
startup commands, read after
.Pa /etc/vi.exrc
unless the variable
.Ev NEXINIT
is also set.
.It Ev HOME
The user's home directory, used as the initial directory path for the startup
.Pa $HOME/.nexrc
and
.Pa $HOME/.exrc
files.
This value is also used as the default directory for the
.Nm vi
.Cm cd
command.
.It Ev LINES
The number of rows on the screen.
This value overrides any system or terminal specific values.
If the
.Ev LINES
environment variable is not set when
.Nm ex Ns / Ns Nm vi
runs, or the
.Cm lines
option is explicitly reset by the user,
.Nm ex Ns / Ns Nm vi
enters the value into the environment.
.It Ev NEXINIT
A list of
.Nm ex
startup commands, read after
.Pa /etc/vi.exrc .
.It Ev SHELL
The user's shell of choice (see also the
.Cm shell
option).
.It Ev TERM
The user's terminal type.
The default is the type
.Dq unknown .
If the
.Ev TERM
environment variable is not set when
.Nm ex Ns / Ns Nm vi
runs, or the
.Cm term
option is explicitly reset by the user,
.Nm ex Ns / Ns Nm vi
enters the value into the environment.
.El
.Sh ASYNCHRONOUS EVENTS
.Bl -tag -width "SIGWINCH" -compact
.It Dv SIGALRM
.Nm vi Ns / Ns Nm ex
uses this signal for periodic backups of file modifications and to display
.Dq busy
messages when operations are likely to take a long time.
.Pp
.It Dv SIGHUP
.It Dv SIGTERM
If the current buffer has changed since it was last written in its entirety,
the editor attempts to save the modified file so it can be later recovered.
See the
.Nm vi Ns / Ns Nm ex
reference manual section
.Sx Recovery
for more information.
.Pp
.It Dv SIGINT
When an interrupt occurs, the current operation is halted
and the editor returns to the command level.
If interrupted during text input,
the text already input is resolved into the file as if the text
input had been normally terminated.
.Pp
.It Dv SIGWINCH
The screen is resized.
See the
.Nm vi Ns / Ns Nm ex
reference manual section
.Sx Sizing the Screen
for more information.
.\" .Pp
.\" .It Dv SIGCONT
.\" .It Dv SIGTSTP
.\" .Nm vi Ns / Ns Nm ex
.\" ignores these signals.
.El
.Sh FILES
.Bl -tag -width "/tmp/vi.recover"
.It Pa /bin/sh
The default user shell.
.It Pa /etc/vi.exrc
System-wide
.Nm vi
startup file.
It is read for
.Nm ex
commands first in the startup sequence.
Must be owned by root or the user,
and writable only by the owner.
.It Pa /tmp
Temporary file directory.
.It Pa /tmp/vi.recover
The default recovery file directory.
.It Pa $HOME/.nexrc
First choice for user's home directory startup file, read for
.Nm ex
commands right after
.Pa /etc/vi.exrc
unless either
.Ev NEXINIT
or
.Ev EXINIT
are set.
Must be owned by root or the user,
and writable only by the owner.
.It Pa $HOME/.exrc
Second choice for user's home directory startup file, read for
.Nm ex
commands under the same conditions as
.Pa $HOME/.nexrc .
.It Pa .nexrc
First choice for local directory startup file, read for
.Nm ex
commands at the end of the startup sequence if the
.Cm exrc
option was turned on earlier.
Must be owned by the user
and writable only by the owner.
.It Pa .exrc
Second choice for local directory startup file, read for
.Nm ex
commands under the same conditions as
.Pa .nexrc .
.El
.Sh EXIT STATUS
The
.Nm ex
and
.Nm vi
utilities exit 0 on success,
and >0 if an error occurs.
.Sh SEE ALSO
.Xr ctags 1 ,
.Xr re_format 7
.Sh STANDARDS
.Nm nex Ns / Ns Nm nvi
is close to
.St -p1003.1-2008 .
It deviates in the following respects:
.Bl -bullet
.It
The
.Ic s
.Nm ex
command may not be called as
.Ic substitute .
.It
The
.Ic directory , redraw
and
.Ic slowopen
settings are not implemented.
.It
The
.Ic paragraphs
and
.Ic sections
settings default to values useful for editing
.Xr mdoc 7
manuals.
.It
The
.Ev TMPDIR
environment variable is ignored.
.It
In insert mode, entering
.Aq Ic control-H ,
.Aq Ic erase ,
or
.Aq Ic kill
following a backslash will not embed the control character in the text.
.El
.Sh HISTORY
The
.Nm ex
editor first appeared in
.Bx 1 .
The
.Nm nex Ns / Ns Nm nvi
replacements for the
.Nm ex Ns / Ns Nm vi
editor first appeared in
.Bx 4.4 .
.Sh AUTHORS
.An Bill Joy
wrote the original version of
.Nm ex
in 1977.
@


1.73
log
@avoid double space caused by end-of-sentence detection; requested by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.72 2017/07/05 12:23:46 schwarze Exp $
d2401 1
a2401 1
.It Cm number, nu Bq off
d2493 1
a2493 1
.It Cm tags, tag Bq tags
@


1.72
log
@nits about trailing punctuation found with mandoc -Tlint
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.71 2017/07/03 14:30:11 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 3 2017 $
d934 1
a934 2
.Pf ? Ar RE ?
.Op Ar offset
@


1.71
log
@markup fixes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.70 2017/07/03 07:01:14 bentley Exp $
d934 1
a934 1
.Pf ? Ar RE Ns ?\&
@


1.70
log
@Remove settings that were unimplemented for 20 years; update STANDARDS.

ok jmc@@ natano@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.69 2017/06/30 14:42:05 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: June 30 2017 $
d934 1
a934 1
.Pf ? Ar RE Ns ?
d2769 2
a2770 2
.Ic Aq control-H ,
.Ic Aq erase ,
d2772 1
a2772 1
.Ic Aq kill
@


1.69
log
@Add mdoc(7) macros to vi's built-in lists of roff paragraph/section macros.

ok jmc@@, no objection schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.68 2017/06/20 07:32:56 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: June 20 2017 $
a108 2
.\" .It Fl l
.\" Start editing with the lisp and showmatch options set.
a2376 5
.It Cm lisp Bq off
.Nm vi
only.
Modify various search commands and options to work with Lisp.
This option is not yet implemented.
a2399 5
.It Cm modelines , modeline Bq off
Read the first and last few lines of each file for
.Nm ex
commands.
This option will never be implemented.
a2414 5
.It Cm optimize , opt Bq on
.Nm vi
only.
Optimize text throughput to dumb terminals.
This option is not yet implemented
a2434 5
.It Cm redraw , re Bq off
.Nm vi
only.
Simulate an intelligent terminal on a dumb one.
This option is not yet implemented.
a2489 6
.It Cm slowopen , slow Bq off
Delay display updating during text input.
This option is not yet implemented.
.It Cm sourceany Bq off
Read startup files not owned by the current user.
This option will never be implemented.
d2741 34
a2774 3
That document differs from historical
.Nm ex Ns / Ns Nm vi
practice in several places; there are changes to be made on both sides.
@


1.68
log
@Better document the :s ex command and its variants.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.67 2017/06/15 06:44:47 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: June 15 2017 $
d2432 1
a2432 1
.It Cm paragraphs , para Bq "IPLPPPQPP LIpplpipbp"
d2473 1
a2473 1
.It Cm sections , sect Bq "NHSHH HUnhsh"
@


1.67
log
@"10th's of a second" -> "tenths of a second"

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.66 2016/08/08 15:09:33 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: August 8 2016 $
d359 1
a359 1
.Cm substitute
a1998 22
.Cm se Ns Op Cm t
.Sm off
.Op option Oo = Oo value Oc Oc \ \&...
.Sm on
.Pf \ \& Op nooption ...
.Op option? ...
.Op Ar all
.Xc
Display or set editor options.
.Pp
.It Cm sh Ns Op Cm ell
Run a shell program.
.Pp
.It Xo
.Cm so Ns Op Cm urce
.Ar file
.Xc
Read and execute
.Nm ex
commands from a file.
.Pp
.It Xo
a1999 1
.Cm s Ns Op Cm ubstitute
d2001 3
a2003 3
.Op / Ar pattern No / Ar replace  No /
.Sm on
.Pf \ \& Op Ar options
d2006 2
d2011 1
d2016 1
d2020 1
d2025 1
d2027 21
a2047 1
Make substitutions.
d2057 1
a2057 1
.Cm substitute
d2063 1
a2063 1
.Cm substitute
d2088 34
d2331 3
a2333 1
.Cm substitute
@


1.66
log
@/tmp and /var/tmp are the same, consistently use the former in both
build/recover and documentation.

ok millert@@, tb@@, martijn@@ and schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.65 2016/08/01 18:27:35 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: August 1 2016 $
d2297 1
a2297 1
The 10th's of a second
d2329 1
a2329 1
The 10th's of a second
d2361 1
a2361 1
The 10th's of a second
@


1.65
log
@Remove vi's "directory" option and TMPDIR support.

ok jung@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.64 2016/02/09 07:41:12 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: February 9 2016 $
d2411 1
a2411 1
.It Cm recdir Bq /var/tmp/vi.recover
d2669 1
a2669 1
.Bl -tag -width "/var/tmp/vi.recover"
d2683 1
a2683 1
.It Pa /var/tmp/vi.recover
@


1.64
log
@avoid special characters; from michael reed
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.63 2016/01/06 22:41:53 millert Exp $
d17 1
a17 1
.Dd $Mdocdate: January 6 2016 $
a2287 2
.It Cm directory , dir Bq "environment variable TMPDIR, or /tmp"
The directory where temporary files are created.
a2628 4
.It Ev TMPDIR
The location used to stored temporary files (see also the
.Cm directory
edit option).
@


1.63
log
@Remove msgcat from the documentation.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.62 2015/11/24 10:28:14 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: November 24 2015 $
d357 1
a357 1
.Sq \(a~
d2062 1
a2062 1
.It Sq \e\(sh
d2064 1
a2064 1
.Sq \(sh
d2353 1
a2353 1
.Sq \(ha
d2355 1
a2355 1
.Sq \(Do
@


1.62
log
@Turn on filename tab completion in vi by default.

From FreeBSD.

ok claudio@@ tb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.61 2015/11/19 07:53:31 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: November 19 2015 $
a2369 3
.It Cm msgcat Bq /usr/share/vi/catalog/
Selects a message catalog to be used to display error and informational
messages in a specified language.
@


1.61
log
@Remove cscope support in vi.

It makes no sense to keep support for a non-base tool in base, especially
for a feature that few if any people use.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.60 2015/09/14 20:06:58 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: September 14 2015 $
d2318 1
a2318 1
.It Cm filec Bq no default
@


1.60
log
@Avoid .Ns right after .Pf, it's pointless.
In some cases, do additional cleanup in the immediate vicinity.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.59 2015/03/17 10:08:18 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: March 17 2015 $
a1782 6
.Cm cs Ns Op Cm cope
.Cm add | find | help | kill | reset
.Xc
Execute a Cscope command.
.Pp
.It Xo
a1793 1
.Cm c Ns Oo Cm onnections Oc |
d1797 1
a1797 1
Display buffers, Cscope connections, screens or tags.
@


1.59
log
@Don't use the wrong escape for < and >. Tweak wording to match the page.

From Theo Buehler.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.58 2015/03/13 19:58:41 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 13 2015 $
d368 1
a368 1
.Pf \&" Ns Aq c ;
d922 1
a922 1
.Pf / Ns Ar RE
d926 1
a926 1
.Pf / Ns Ar RE Ns /
d932 1
a932 1
.Pf ?\& Ns Ar RE
d936 1
a936 1
.Pf ?\& Ns Ar RE Ns ?\&
@


1.58
log
@remove the first comma from constructs like ", and," and ", or,": you can use
"and" and "or" to join sentence clauses, and you can use commas, but both hinders
reading;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.57 2015/02/28 21:51:57 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: February 28 2015 $
d201 1
a201 1
Key names are written using less-than and greater-than signs, e.g.\&
d351 1
a351 1
.Sq \e\(la
d354 1
a354 1
.Sq \e\(ra
@


1.57
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.56 2012/01/17 08:18:36 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 17 2012 $
d118 1
a118 1
Recover the specified files, or, if no files are specified,
@


1.56
log
@flesh out the VI COMMANDS section somewhat;
diff from Alexis Fouilhe; help/ok sobrado
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.55 2011/12/28 01:52:33 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: December 28 2011 $
d2056 1
a2056 1
.It Sq \*(Am
d2738 1
a2738 1
and \*(Gt0 if an error occurs.
@


1.55
log
@These utilities were already part of 1BSD, and some authors are known.
All facts from the CSRG archive CD 1, also available from minnie.tuhs.org.
Feedback and OK sobrado@@, ok jmc@@.

Kirk McKusick writes:
"Bill usually used "Bill Joy" when listing author information. Only
occationally did he choose to use William Joy. So, I would recommend
using Bill Joy."

So i'm using that here even though some of the original files
related to this commit do contain the form "William Joy".
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.54 2011/07/29 13:24:50 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 29 2011 $
d392 54
d521 2
a522 1
In each command synopsis below, the following notation is used:
d524 3
a526 1
.Bl -tag -width buffer -compact -offset 3u
d533 4
d542 2
a543 4
.It Ar count
A positive number used to specify the desired number of iterations
of a command.
It defaults to 1 if not specified.
a557 1
.\" .Op Ar count
d561 1
a561 3
.\" .Ar count
.\" times
for the current word.
d570 1
d581 8
a588 1
is not given, scroll forward half the number of lines in the current screen.
d605 1
d608 8
a615 1
Display the file information.
d685 8
a692 1
is not given, scroll backwards half the number of lines in the current screen.
d710 1
a710 1
Execute
d712 1
a712 1
commands or cancel partial commands.
d738 33
a770 1
Replace text with results from a shell command.
d779 18
a796 3
Increment or decrement the number under the cursor.
If the trailing character is a
.Sq #
d798 2
a799 5
.Sq + ,
the number is incremented.
If the trailing character is a
.Sq - ,
the number is decremented.
d806 5
d813 2
a814 1
Move to the matching character.
d825 27
a851 3
Return to a context marked by the character
.Ar character .
The first form returns to the beginning of the line marked by
d853 1
a853 1
The second form returns to the first character of the context marked by
d882 7
d896 1
a896 1
Move to the first non-blank of the previous line,
d907 13
d928 1
d938 1
d953 3
d960 17
d991 7
d1011 3
a1013 1
Shift lines left or right, respectively, by an amount of
d1018 16
a1033 1
.Ar buffer .
d1045 1
a1045 1
\- 1 number of times.
a1056 1
.Op Ar count
d1124 1
a1124 1
\- 1 number of times.
d1130 6
a1135 1
Join lines.
d1158 1
a1158 1
\- 1 number of times.
d1164 5
a1168 1
Insert text from a buffer.
d1188 1
a1188 1
\- 1 number of times.
d1233 1
a1233 1
characters before the cursor.
d1249 2
a1250 3
lines into the specified
.Ar buffer ,
or the default buffer if none is specified.
d1254 5
a1258 1
.Nm vi .
d1297 1
a1297 1
\-1 number of times.
d1313 10
a1322 1
Change a region of text.
d1330 10
a1339 1
Delete a region of text.
d1368 1
a1368 1
\-1 number of times.
d1389 1
a1389 1
\- 1 number of times.
d1395 5
a1399 1
Append text from a buffer.
d1408 2
a1409 1
characters.
d1419 6
d1438 11
d1465 2
a1466 1
characters.
d1558 1
d1560 3
a1562 1
Reverse the case of the next
d1564 6
a1569 4
character(s).
.Pp
.It Xo
.Op Ar count
d1571 1
a1571 3
.Ar motion
.Xc
Reverse the case of the characters in a text region specified by the
a1574 3
Only in effect if the
.Cm tildeop
option is set.
d2277 2
a2278 1
Write modified files automatically when changing files.
@


1.54
log
@document vi/ex regular expressions, and where they differ from those
documented in re_format(7);

diff from alexis fouilhe, and verified/tweaked by sobrado;
ok millert otto
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.53 2011/05/16 16:41:58 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 16 2011 $
d2479 4
d2488 5
@


1.53
log
@better document some of the terminology used in the VI COMMANDS section;
from Alexis Fouilhe
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.52 2011/05/02 11:14:11 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 2 2011 $
d320 42
d1781 39
d2087 8
a2094 1
Treat certain characters specially in regular expressions.
@


1.52
log
@no need to escape `|'; as discussed with schwartze
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.51 2011/04/12 18:08:00 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 12 2011 $
a332 7
Where a
.Nm vi
command synopsis shows both a
.Bq Em buffer
and a
.Bq Em count ,
they may be presented in any order.
d385 1
a385 1
.Aq Cm character ,
a419 4
.Pp
There is also a buffer which the user cannot access.
Commands that store text in a buffer use it automatically, while commands that
take text from a buffer use it as a default source.
d425 29
a453 1
In each entry below, the tag line is a usage synopsis for the command character.
d663 1
a663 1
.Cm (\&
a664 4
Back up
.Ar count
sentences.
.Pp
d667 1
a667 1
.Cm )\&
d669 1
a669 1
Move forward
d671 10
a680 1
sentences.
d759 2
a760 1
.Pf \ \&< Ar motion
d764 2
a765 1
.Pf \ \&> Ar motion
d767 2
a768 1
Shift lines left or right.
@


1.51
log
@better document vi's startup (in terms of environment variables
and config files);

diff from Alexis Fouilhe
verified by millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.50 2011/03/31 20:40:51 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 31 2011 $
d1461 3
a1463 3
.Cm b Ns Oo Cm uffers Oc \&|
.Cm c Ns Oo Cm onnections Oc \&|
.Cm s Ns Oo Cm creens Oc \&|
@


1.50
log
@add a BUFFERS section, to explain how they work;
from Alexis Fouilhe - many thanks to him for his work on this
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.49 2011/03/17 11:34:53 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: March 17 2011 $
d2207 3
a2209 1
startup commands; read if the variable
d2211 1
a2211 1
is not set.
d2237 2
a2238 1
startup commands.
d2300 1
a2300 1
.Bl -tag -width "/var/tmp/vi.recover" -compact
d2307 5
d2317 11
a2327 1
First choice for user's home directory startup file.
d2329 4
a2332 1
Second choice for user's home directory startup file.
d2334 7
a2340 1
First choice for local directory startup file.
d2342 4
a2345 1
Second choice for local directory startup file.
@


1.49
log
@since we stopped installing the usd docs, it no longer makes
sense for DESCRIPTION to point to SEE ALSO;

from Alexis Fouilhe
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.48 2010/10/18 14:42:16 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 18 2010 $
d320 111
@


1.48
log
@remove references to now removed usd/psd/smm docs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.47 2010/09/29 07:44:57 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 29 2010 $
a81 3
See the
.Sx SEE ALSO
section below for a list of additional materials.
@


1.47
log
@various EXIT STATUS fixes; from Daniel Dickman
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.46 2010/09/24 06:40:12 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 24 2010 $
a2218 49
.Pp
The
.Qq Vi Quick Reference
card,
.Pa /usr/share/doc/usd/12.vi/vi.summary .
.Pp
.Qq \&An Introduction to Display Editing with Vi ,
.Pa /usr/share/doc/usd/12.vi/ .
This document is the closest thing available to an introduction to the
.Nm vi
screen editor.
.Pp
.Qq \&Ex Reference Manual ,
.Pa /usr/share/doc/usd/13.ex/ .
This document is the final reference for the
.Nm ex
editor.
.Pp
.Qq Ex: A Tutorial ,
.Pa /usr/share/doc/usd/11.edit/ .
This document is the closest thing available to an introduction to the
.Nm ex
editor.
.Pp
.Qq Vi/Ex Reference Manual ,
.Pa /usr/share/doc/usd/13.viref/ .
This document is the final reference for the
.Nm nex Ns / Ns Nm nvi
text editors.
.Pp
Roff source for all of these documents is distributed with
.Nm nex Ns / Ns Nm nvi
in the
.Pa vi/docs/USD.doc
directory of the
.Nm nex Ns / Ns Nm nvi
source code.
.Pp
The files
.Pa autowrite ,
.Pa input ,
.Pa quoting ,
and
.Pa structures
found in the
.Pa vi/docs/internals
directory of the
.Nm nex Ns / Ns Nm nvi
source code.
@


1.46
log
@add a little padding to make SYNOPSIS line up nicely;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.45 2010/07/25 20:23:41 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 25 2010 $
a170 3
.Pp
.Nm ex Ns / Ns Nm vi
exits 0 on success, or greater than 0 if an error occurs.
d2209 7
@


1.45
log
@^U scrolls backwards, not forwards; from marrob at lavabit com
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.44 2010/07/18 21:45:01 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 18 2010 $
d30 1
a30 1
.Nm vi
@


1.44
log
@remove some nasty hacks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.43 2010/07/15 20:51:38 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: July 15 2010 $
d449 1
a449 1
is not given, scroll forward half the number of lines in the current screen.
@


1.43
log
@More delimiters that need quoting inside macros, hunted down by jmc@@,
who asked me to commit because he is just running out of the door.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.42 2009/11/22 17:12:40 nicm Exp $
d17 1
a17 1
.Dd $Mdocdate: November 22 2009 $
d29 2
a30 2
.Op Ar file ...
.Nm vi\ \&
d35 1
a35 1
.Op Ar file ...
d41 1
a41 1
.Op Ar file ...
@


1.42
log
@Change the flash option to be off by default. Now that xterm has the flash
capability in terminfo, vi was using it instead of beeping, but it is too slow
for some machines.

ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.41 2009/10/20 09:54:47 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: October 20 2009 $
d1979 1
a1979 1
.Sq (
@


1.41
log
@ex(1) and vi(1) are different editors.  diff based on the original
printed edition of the User's Reference Manual from USENIX and
O'Reilly.  4.4BSD had exactly this, that is much more accurate than
our current description (while here, Jason observed that both FreeBSD
and NetBSD do the same).

tweaked by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.40 2009/04/27 19:41:10 mk Exp $
d17 1
a17 1
.Dd $Mdocdate: April 27 2009 $
d1844 1
a1844 1
.It Cm flash Bq on
@


1.40
log
@It's called `msgcat', not `mesgcat'.

speedy ok millert
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.39 2009/04/19 13:12:28 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: April 19 2009 $
d22 1
a22 1
.Nd text editor
@


1.39
log
@fix tagnext and tagprev; from patrick keshishian
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.38 2009/02/08 17:15:10 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: February 8 2009 $
d1887 1
a1887 1
.It Cm mesgcat Bq /usr/share/vi/catalog/
@


1.38
log
@bump the posix reference in STANDARDS to IEEE Std 1003.1-2008, with a few
updates to follow;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.37 2007/05/31 19:20:19 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: May 31 2007 $
d1634 1
a1634 2
.Op Cm Tt Ns
.Cm agn Ns Op Cm ext Ns
d1647 1
a1647 2
.Op Cm Tt Ns
.Cm agp Ns Op Cm rev Ns
@


1.37
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.36 2007/05/30 04:41:34 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate$
d2269 1
a2269 1
.St -p1003.1-2004 .
@


1.36
log
@- use a consistent text for STANDARDS
- note which options are extensions to POSIX
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.35 2005/03/10 18:03:45 jmc Exp $
d17 1
a17 1
.Dd October 10, 1996
@


1.35
log
@-v description comes before -w;
also a sentence tweak;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.34 2005/01/09 01:44:35 jmc Exp $
d2269 1
a2269 1
.St -p1003.2 .
@


1.34
log
@tidy up FAST STARTUP;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.33 2005/01/09 01:37:32 jmc Exp $
d84 1
a84 1
section below, for a list of additional materials.
a149 2
.It Fl w Ar size
Set the initial window size to the specified number of lines.
d153 2
@


1.33
log
@better example;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.32 2005/01/09 01:30:54 jmc Exp $
d206 2
a207 1
(Key names are written using less-than and greater-than signs, e.g.\&
d214 1
a214 1
terminal's keyboard.)
d221 1
a221 1
(Generally,
d224 1
a224 1
It will also display error messages.)
d230 1
a230 1
The command you should enter as soon as you start editing is
@


1.32
log
@better section reference;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.31 2005/01/08 00:25:58 jmc Exp $
d225 1
a225 1
To start editing a file, enter the command
d227 1
a227 1
.Dl vi file_name
@


1.31
log
@move the license into the body of the man page;
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.30 2005/01/07 15:04:02 millert Exp $
d88 1
a88 1
.Dq Fast Startup .
@


1.30
log
@Remove line in copyright declaration that conflicts with the LICENSE file.
OK bostic@@sleepycat.com
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.29 2004/10/04 21:45:59 jmc Exp $
d8 6
a13 1
.\" See the LICENSE file for redistribution information.
a2278 7
.Sh LICENSE
The vi program is freely redistributable.
You are welcome to copy, modify and share it with others
under the conditions listed in the LICENSE file.
If any company (not individual!) finds vi sufficiently useful
that you would have purchased it, or if any company wishes to redistribute it,
contributions to the authors would be appreciated.
@


1.29
log
@refer to re_format.7 rather than egrep.1 for a description of EREs;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.28 2004/04/09 12:12:44 jmc Exp $
a6 3
.\"
.\" This document may not be republished without written permission from
.\" Keith Bostic.
@


1.28
log
@ex is not a screen editor;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.27 2004/03/19 08:14:52 jmc Exp $
d1834 7
a1840 3
Regular expressions are extended (i.e.\&
.Xr egrep 1
style) expressions.
d2213 1
a2213 1
.Xr egrep 1
@


1.27
log
@clarify -c;

from Vincent Aymeric (NetBSD PR 24676);
ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.26 2004/02/09 21:16:06 jmc Exp $
d2232 1
a2232 1
screen editor.
@


1.26
log
@point people to ex tutorial;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.25 2004/01/30 23:22:38 jmc Exp $
d94 1
a94 1
immediately after starting the edit session.
@


1.25
log
@point people to 13.ex, and remove some unnecessarys from SEE ALSO;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.24 2004/01/24 12:24:36 jmc Exp $
d2228 3
a2230 4
.Qq Edit: A tutorial ,
found in the UNIX User's Manual Supplementary Documents
section of the 4.3BSD manual set.
This document is an introduction to a simple version of the
@


1.24
log
@make vi reference card and vi tutorial easier to find;
use -compact for FILES;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.23 2004/01/16 13:08:32 jmc Exp $
d2222 2
a2223 3
.Qq \&Ex Reference Manual (Version 3.7) ,
found in the UNIX User's Manual Supplementary Documents
section of both the 4.3BSD and 4.4BSD manual sets.
d2226 1
a2226 1
editor, as distributed in most historic 4BSD and System V systems.
d2239 1
a2239 1
text editors, as distributed in 4.4BSD and 4.4BSD-Lite.
@


1.23
log
@- point people to vi.ref now that it's installed (and get its name right);
- correct a path and Nm;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.22 2004/01/15 11:17:04 jmc Exp $
d2187 1
a2187 1
.Bl -tag -width "/var/tmp/vi.recover"
d2213 2
a2214 1
card.
d2216 2
a2217 3
.Qq An Introduction to Display Editing with Vi ,
found in the UNIX User's Manual Supplementary Documents
section of both the 4.3BSD and 4.4BSD manual sets.
@


1.22
log
@return documented lines option to original (default) value;
as pointed out by millert@@, it's terminal dependent;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.21 2004/01/07 12:46:48 jmc Exp $
d2236 2
a2237 3
.Qq Ex/Vi Reference Manual ,
found in the UNIX User's Manual Supplementary Documents
section of the 4.4BSD manual set.
d2245 1
a2245 1
.Pa vi/USD.doc
d2247 1
a2247 1
.Pa nex/nvi
@


1.21
log
@corrections to SET OPTIONS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.20 2004/01/07 11:58:21 jmc Exp $
d1857 1
a1857 1
.It Cm lines , li Bq 25
@


1.20
log
@s/environmental/environment/;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.19 2004/01/07 10:36:45 jmc Exp $
d1943 1
a1943 1
.It Cm scroll , scr Bq "window / 2"
d2024 12
a2035 12
.\" .It Cm w300 Bq no default
.\" .Nm vi
.\" only.
.\" Set the window size if the baud rate is less than 1200 baud.
.\" .It Cm w1200 Bq no default
.\" .Nm vi
.\" only.
.\" Set the window size if the baud rate is equal to 1200 baud.
.\" .It Cm w9600 Bq no default
.\" .Nm vi
.\" only.
.\" Set the window size if the baud rate is greater than 1200 baud.
@


1.19
log
@corrections to the EX COMMANDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.18 2004/01/02 21:37:48 jmc Exp $
d137 1
a137 1
and no startup files or environmental variables are read.
d2087 1
a2087 1
environmental variable is not set when
d2115 1
a2115 1
environmental variable is not set when
d2136 1
a2136 1
environmental variable is not set when
@


1.18
log
@some corrections/improvements to the VI COMMANDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.17 2004/01/02 09:37:41 jmc Exp $
d1276 1
a1276 1
.Cm ab Ns Op Cm brev
d1323 1
a1323 2
.Cm co Ns Op Cm py Ns
.Op Cm !\&
d1329 1
a1329 1
.Cm t Ns Op Cm !\&
d1411 3
a1413 1
.Pq or not matching
d1631 2
a1632 1
.Cm tagn Ns Op Cm ext Ns
d1645 2
a1646 1
.Cm tagp Ns Op Cm rev Ns
d1658 1
a1658 1
.Cm una Ns Op Cm bbrev
@


1.17
log
@use standard section ENVIRONMENT, rather than ENVIRONMENT VARIABLES;
from deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.16 2003/12/31 18:56:21 jmc Exp $
d378 4
a381 1
.It Aq Cm control-H
d490 1
d576 4
a579 1
.It / Ns Ar RE
d583 5
a588 1
.It ?\& Ns Ar RE
d592 1
d651 1
a651 1
number of times.
d726 6
d760 1
a760 1
number of times.
d786 1
a786 1
number of times.
d872 1
a872 1
Move to first non-blank character on the current line.
d892 1
a892 1
number of times.
d945 1
a945 1
number of times.
d961 6
@


1.16
log
@fix -r description now that millert has fixed the code;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.15 2003/12/31 13:40:35 jmc Exp $
d2053 1
a2053 1
.Sh ENVIRONMENTAL VARIABLES
@


1.15
log
@mdoc vi(1); also better document current behaviour and add some missing
commands;

feedback and ok millert@@ naddy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.14 2003/04/15 21:34:53 millert Exp $
d122 3
a124 4
.\" the file is edited as if the
.\" .Fl r
.\" option had not been specified.
exit the editor.
@


1.14
log
@No, vi does not ignore SIGQUIT
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.13 2003/01/12 18:15:16 deraadt Exp $
d15 31
a45 49
.TH VI 1 "October 10, 1996"
.UC
.SH NAME
ex, vi, view \- text editors
.SH SYNOPSIS
.B ex
[\c
.B -eFRrSsv\c
] [\c
.BI -c " cmd"\c
] [\c
.BI -t " tag"\c
] [\c
.BI -w " size"\c
] [file ...]
.br
.B vi
[\c
.B -eFlRrSv\c
] [\c
.BI -c " cmd"\c
] [\c
.BI -t " tag"\c
] [\c
.BI -w " size"\c
] [file ...]
.br
.B view
[\c
.B -eFRrSv\c
] [\c
.BI -c " cmd"\c
] [\c
.BI -t " tag"\c
] [\c
.BI -w " size"\c
] [file ...]
.SH LICENSE
The vi program is freely redistributable.  You are welcome to copy,
modify and share it with others under the conditions listed in the
LICENSE file.  If any company (not individual!) finds vi sufficiently
useful that you would have purchased it, or if any company wishes to
redistribute it, contributions to the authors would be appreciated.
.SH DESCRIPTION
.I \&Vi
is a screen oriented text editor.
.I \&Ex
is a line-oriented text editor.
.I \&Ex
d47 1
a47 1
.I \&vi
d50 1
a50 1
.I View
d52 5
a56 4
.B \-R
(read-only) option of
.IR \&vi .
.PP
d58 1
a58 1
.I nex/nvi
d60 1
a60 1
.I ex/vi
d62 1
a62 1
.I Nex/nvi
d64 3
a66 2
Fourth Berkeley Software Distribution (4BSD)
.I \&ex
d68 1
a68 1
.I \&vi
d71 1
a71 1
.I nex/nvi
d74 2
a75 2
.IR ex/vi .
.PP
d77 1
a77 1
.IR ex/vi .
d80 7
a86 3
If you're in an unfamiliar environment, and you absolutely have to
get work done immediately, read the section after the options
description, entitled ``Fast Startup''.
d88 1
a88 1
.PP
d90 2
a91 2
.TP
.B \-c
d93 1
a93 1
.B cmd
d96 1
a96 1
.B cmd
d98 4
a101 2
This is the POSIX 1003.2 interface for the historic ``+cmd'' syntax.
.I Nex/nvi
d103 1
a103 2
.TP
.B \-e
d105 2
a106 3
.IR \&ex .
.TP
.B \-F
d110 3
a112 5
.TP
.B \-l
Start editing with the lisp and showmatch options set.
.TP
.B \-R
d114 1
a114 1
.IR view ,
d116 1
a116 1
.B readonly
d118 1
a118 2
.TP
.B \-r
d122 5
a126 5
the file is edited as if the
.B \-r
option had not been specified.
.TP
.B \-S
d128 1
a128 1
.B secure
d130 1
a130 2
.TP
.B \-s
d132 1
a132 1
.I \&ex
d135 1
a135 1
.I \&ex
d137 1
a137 2
Prompts, informative messages and other user oriented messages
are turned off,
d139 4
a142 2
This is the POSIX 1003.2 interface for the historic ``\-'' argument.
.I \&Nex/nvi
d144 6
a149 7
.TP
.B \-t
Start editing at the specified tag.
(See
.IR ctags (1)).
.TP
.B \-w
d151 1
a151 2
.TP
.B \-v
d153 3
a155 4
.I \&vi
or
.IR view .
.PP
d157 1
a157 1
.I ex/vi
d160 1
a160 1
.I \&vi
d163 1
a163 1
.I \&ex
d165 1
a165 1
.I \&ex
d168 1
a168 1
.B \-s
d170 4
a173 4
.PP
.I Ex/vi
exits 0 on success, and greater than 0 if an error occurs.
.SH FAST STARTUP
d176 3
a178 3
.IR \&vi .
If you've never used any screen editor before, you're likely to have
problems even with this simple introduction.
d180 1
a180 1
.I \&vi
d182 2
a183 2
.PP
.I \&Vi
d185 3
a187 2
This means that it takes up almost the entire screen, displaying part
of the file on each screen line, except for the last line of the screen.
d189 1
a189 1
.IR \&vi ,
d191 1
a191 1
.I \&vi
d193 1
a193 1
.PP
d195 4
a198 4
.I \&vi
is a modeful editor, i.e. you are either entering text or you
are executing commands, and you have to be in the right mode
to do one or the other.
d202 10
a211 3
and that is the <escape> key.
(Key names are written using less-than and greater-than signs, e.g.
<escape> means the ``escape'' key, usually labeled ``esc'' on your
d214 4
a217 2
keep entering the <escape> key until
.I \&vi
d220 1
a220 1
.I \&vi
d223 5
a227 2
.PP
To start editing a file, enter the command ``vi file_name<carriage-return>''.
d229 3
a231 1
``:set verbose showmode<carriage-return>''.
d234 1
a234 1
.PP
d236 2
a237 2
.TP
.B h
d239 1
a239 2
.TP
.B j
d241 1
a241 2
.TP
.B k
d243 1
a243 2
.TP
.B l
d245 1
a245 2
.TP
.B <cursor-arrows>
d247 4
a250 3
.TP
.B /text<carriage-return>
Search for the string ``text'' in the file,
d252 2
a253 1
.PP
d255 10
a264 20
.TP
.B a
Append new text,
.I after
the cursor.
.TP
.B i
Insert new text,
.I before
the cursor.
.TP
.B o
Open a new line below the line the cursor is on, and start
entering text.
.TP
.B O
Open a new line above the line the cursor is on, and start
entering text.
.TP
.B <escape>
d266 3
a268 3
.BR \&a ,
.BR \&i ,
.BR \&O
d270 1
a270 1
.B \&o
d272 1
a272 1
.B <escape>
d274 2
a275 1
.PP
d277 4
a280 2
.TP
.B yy
d282 2
a283 4
.TP
.B p
Append the copied line after the line the cursor is on.
.PP
d285 2
a286 2
.TP
.B dd
d288 1
a288 2
.TP
.B x
d290 2
a291 1
.PP
d293 2
a294 2
.TP
.B :w<carriage-return>
d297 1
a297 1
.I \&vi
d299 5
a303 4
.TP
.B ":w file_name<carriage-return>"
Write the file back to the file with the name ``file_name''.
.PP
d305 6
a310 5
.TP
.B :q<carriage-return>
Quit editing and leave vi (if you've modified the file, but not
saved your changes,
.I \&vi
d312 1
a312 2
.TP
.B :q!<carriage-return>
d314 2
a315 1
.PP
d319 6
a324 5
The above commands work on ``physical'' characters and lines,
i.e. they affect the entire line no matter how many screen lines it
takes up and the entire character no matter how many screen columns
it takes up.
.SH VI COMMANDS
d327 1
a327 1
.I \&vi
d329 7
a335 5
In each entry below, the tag line is a usage synopsis for the command
character.
.PP
.TP
.B "[count] <control-A>"
d337 8
a344 4
.I count
times for the current word.
.TP
.B "[count] <control-B>"
d346 1
a346 1
.I count
d348 5
a352 2
.TP
.B "[count] <control-D>"
d354 1
a354 1
.I count
d356 8
a363 2
.TP
.B "[count] <control-E>"
d365 1
a365 1
.I count
d367 5
a371 2
.TP
.B "[count] <control-F>"
d373 1
a373 1
.I count
d375 2
a376 2
.TP
.B "<control-G>"
d378 6
a383 4
.TP
.B "<control-H>"
.TP
.B "[count] h"
d385 1
a385 1
.I count
d387 13
a399 6
.TP
.B "[count] <control-J>"
.TP
.B "[count] <control-N>"
.TP
.B "[count] j"
d401 1
a401 1
.I count
d403 3
a405 4
.TP
.B "<control-L>"
.TP
.B "<control-R>"
d407 9
a415 4
.TP
.B "[count] <control-M>"
.TP
.B "[count] +"
d417 11
a427 6
.I count
lines to the first nonblank character of that line.
.TP
.B "[count] <control-P>"
.TP
.B "[count] k"
d429 1
a429 1
.I count
d431 2
a432 2
.TP
.B "<control-T>"
d434 5
a438 2
.TP
.B "[count] <control-U>"
d440 1
a440 1
.I count
d442 12
a453 6
.TP
.B "<control-W>"
Switch to the next lower screen in the window, or to the first
screen if there are no lower screens in the window.
.TP
.B "[count] <control-Y>"
d455 1
a455 1
.I count
d457 2
a458 2
.TP
.B "<control-Z>"
d460 2
a461 2
.TP
.B "<escape>"
d463 1
a463 1
.I \&ex
d465 2
a466 2
.TP
.B "<control-]>"
d468 2
a469 2
.TP
.B "<control-^>"
d471 9
a479 4
.TP
.B "[count] <space>"
.TP
.B "[count] l"
d481 1
a481 1
.I count
d483 6
a488 2
.TP
.B "[count] ! motion shell-argument(s)"
d490 22
a511 5
.TP
.B "[count] # #|+|-"
Increment or decrement the cursor number.
.TP
.B "[count] $"
d513 2
a514 2
.TP
.B "%"
d516 2
a517 2
.TP
.B "&"
d519 7
a525 4
.TP
.B "'<character>"
.TP
.B "`<character>"
d527 10
a536 3
.IR <character> .
.TP
.B "[count] ("
d538 1
a538 1
.I count
d540 5
a544 2
.TP
.B "[count] )"
d546 1
a546 1
.I count
d548 5
a552 2
.TP
.B "[count] ,"
d554 1
a554 1
.I count
d556 7
a562 4
.TP
.B "[count] -"
Move to first nonblank of the previous line,
.I count
d564 5
a568 2
.TP
.B "[count] ."
d570 1
a570 1
.I \&vi
d572 29
a600 15
.TP
.B "/RE<carriage-return>"
.TP
.B "/RE/ [offset]<carriage-return>"
.TP
.B "?RE<carriage-return>"
.TP
.B "?RE? [offset]<carriage-return>"
.TP
.B "N"
.TP
.B "n"
Search forward or backward for a regular expression.
.TP
.B "0"
d602 10
a611 5
.TP
.B ":"
Execute an ex command.
.TP
.B "[count] ;"
d613 1
a613 1
.I count
d615 9
a623 4
.TP
.B "[count] < motion"
.TP
.B "[count] > motion"
d625 9
a633 5
.TP
.B "@@ buffer"
Execute a named buffer.
.TP
.B "[count] A"
d635 11
a645 2
.TP
.B "[count] B"
d647 1
a647 1
.I count
d649 6
a654 2
.TP
.B "[buffer] [count] C"
d656 11
a666 2
.TP
.B "[buffer] D"
d668 11
a678 2
.TP
.B "[count] E"
d680 1
a680 1
.I count
d682 5
a686 2
.TP
.B "[count] F <character>"
d688 1
a688 1
.I count
d690 6
a695 3
.IR <character> .
.TP
.B "[count] G"
d697 1
a697 1
.IR count ,
d699 1
a699 1
.I count
d701 5
a705 2
.TP
.B "[count] H"
d707 7
a713 4
.I "count - 1"
lines below the top of the screen.
.TP
.B "[count] I"
d715 5
a719 2
.TP
.B "[count] J"
d721 5
a725 2
.TP
.B "[count] L"
d727 4
a730 4
.I "count - 1"
lines above the bottom of the screen.
.TP
.B " M"
d732 5
a736 2
.TP
.B "[count] O"
d738 11
a748 2
.TP
.B "[buffer] P"
d750 2
a751 2
.TP
.B "Q"
d753 4
a756 3
.I \&vi
(or visual) mode and switch to
.I \&ex
d758 5
a762 2
.TP
.B "[count] R"
d764 12
a775 2
.TP
.B "[buffer] [count] S"
d777 1
a777 1
.I count
d779 12
a790 2
.TP
.B "[count] T <character>"
d792 11
a802 12
.I count
times,
through the current line for the character
.I after
the specified
.IR <character> .
.TP
.B "U"
Restore the current line to its state before the cursor last
moved to it.
.TP
.B "[count] W"
d804 1
a804 1
.I count
d806 6
a811 2
.TP
.B "[buffer] [count] X"
d813 1
a813 1
.I count
d815 20
a834 7
.TP
.B "[buffer] [count] Y"
Copy (or ``yank'')
.I count
lines into the specified buffer.
.TP
.B "ZZ"
d836 6
a841 3
.IR \&vi .
.TP
.B "[count] [["
d843 1
a843 1
.I count
d845 5
a849 2
.TP
.B "[count] ]]"
d851 1
a851 1
.I count
d853 8
a860 5
.TP
.B "\&^"
Move to first nonblank character on the current line.
.TP
.B "[count] _"
d862 7
a868 4
.I "count - 1"
lines, to the first nonblank character.
.TP
.B "[count] a"
d870 11
a880 2
.TP
.B "[count] b"
d882 1
a882 1
.I count
d884 7
a890 2
.TP
.B "[buffer] [count] c motion"
d892 7
a898 2
.TP
.B "[buffer] [count] d motion"
d900 5
a904 2
.TP
.B "[count] e"
d906 1
a906 1
.I count
d908 5
a912 2
.TP
.B "[count] f<character>"
d914 1
a914 1
.I count
d916 6
a921 3
.IR <character> .
.TP
.B "[count] i"
d923 20
a942 6
.TP
.B "m <character>"
Save the current context (line and column) as
.IR <character> .
.TP
.B "[count] o"
d944 5
a948 2
.TP
.B "[buffer] p"
d950 6
a955 2
.TP
.B "[count] r <character>"
d957 1
a957 1
.I count
d959 6
a964 2
.TP
.B "[buffer] [count] s"
d966 1
a966 1
.I count
d968 6
a973 2
.TP
.B "[count] t <character>"
d975 5
a979 6
.I count
times, through the current line for the character immediately
.I before
.IR <character> .
.TP
.B "u"
d981 5
a985 2
.TP
.B "[count] w"
d987 1
a987 1
.I count
d989 6
a994 2
.TP
.B "[buffer] [count] x"
d996 1
a996 1
.I count
d998 21
a1018 8
.TP
.B "[buffer] [count] y motion"
Copy (or ``yank'')
a text region specified by the
.I count
and motion into a buffer.
.TP
.B "[count1] z [count2] -|.|+|^|<carriage-return>"
d1020 42
a1061 2
.TP
.B "[count] {"
d1063 1
a1063 1
.I count
d1065 5
a1069 2
.TP
.B "[count] |"
d1071 1
a1071 1
.I column
d1073 9
a1081 2
.TP
.B "[count] }"
d1083 1
a1083 1
.I count
d1085 5
a1089 2
.TP
.B "[count] ~"
d1091 1
a1091 1
.I count
d1093 6
a1098 2
.TP
.B "[count] ~ motion"
d1100 1
a1100 1
.I count
d1102 6
a1107 3
.IR motion .
.TP
.B "<interrupt>"
d1109 9
a1117 4
.SH VI TEXT INPUT COMMANDS
The following section describes the commands available in the text
input mode of the
.I \&vi
d1119 3
a1121 3
.PP
.TP
.B "<nul>"
d1123 2
a1124 2
.TP
.B "<control-D>"
d1126 1
a1126 1
.B shiftwidth
d1128 2
a1129 2
.TP
.B "^<control-D>"
d1131 2
a1132 2
.TP
.B "0<control-D>"
d1134 2
a1135 2
.TP
.B "<control-T>"
d1137 1
a1137 1
.I <tab>
d1139 1
a1139 1
.I <space>
d1141 1
a1141 1
.B shiftwidth
d1143 3
a1145 4
.TP
.B "<erase>
.TP
.B "<control-H>"
d1147 9
a1155 5
.TP
.B "<literal next>"
Quote the next character.
.TP
.B "<escape>
d1157 2
a1158 2
.TP
.B "<line erase>"
d1160 3
a1162 4
.TP
.B "<control-W>"
.TP
.B "<word erase>"
d1165 1
a1165 1
.B altwerase
d1167 1
a1167 1
.B ttywerase
d1169 8
a1176 2
.TP
.B "<control-X>[0-9A-Fa-f]+"
d1178 2
a1179 2
.TP
.B "<interrupt>"
d1181 6
a1186 1
.SH EX COMMANDS
d1188 1
a1188 1
.I \&ex
d1191 3
a1193 3
.PP
.TP
.B "<end-of-file>"
d1195 7
a1201 4
.TP
.B "! argument(s)"
.TP
.B "[range]! argument(s)"
d1203 2
a1204 2
.TP
.B \&"
d1206 13
a1218 4
.TP
.B "[range] nu[mber] [count] [flags]"
.TP
.B "[range] # [count] [flags]"
d1220 3
a1222 4
.TP
.B "@@ buffer"
.TP
.B "* buffer"
d1224 45
a1268 2
.TP
.B "[line] a[ppend][!]"
d1270 15
a1284 2
.TP
.B "[range] c[hange][!] [count]"
d1286 32
a1317 2
.TP
.B "cs[cope] add | find | help | kill | reset"
d1319 8
a1326 2
.TP
.B "[range] d[elete] [buffer] [count] [flags]"
d1328 8
a1335 2
.TP
.B "di[splay] b[uffers] | c[onnections] | s[creens] | t[ags]"
d1337 14
a1350 4
.TP
.B "[Ee][dit][!] [+cmd] [file]"
.TP
.B "[Ee]x[!] [+cmd] [file]"
d1352 5
a1356 2
.TP
.B "exu[sage] [command]"
d1358 1
a1358 1
.I \&ex
d1360 5
a1364 2
.TP
.B "f[ile] [file]"
d1366 7
a1372 3
.TP
.B "[Ff]g [name]"
.I \&Vi
d1375 18
a1392 7
.TP
.B "[range] g[lobal] /pattern/ [commands]"
.TP
.B "[range] v /pattern/ [commands]"
Apply commands to lines matching (or not matching) a pattern.
.TP
.B "he[lp]"
d1394 6
a1399 2
.TP
.B "[line] i[nsert][!]"
d1401 8
a1408 2
.TP
.B "[range] j[oin][!] [count] [flags]"
d1410 7
a1416 2
.TP
.B "[range] l[ist] [count] [flags]"
d1418 5
a1422 2
.TP
.B "map[!] [lhs rhs]"
d1424 1
a1424 1
.I \&vi
d1426 10
a1435 4
.TP
.B "[line] ma[rk] <character>"
.TP
.B "[line] k <character>"
d1437 7
a1443 3
.IR <character> .
.TP
.B "[range] m[ove] line"
d1445 6
a1450 2
.TP
.B "mk[exrc][!] file"
d1452 8
a1459 3
file.
.TP
.B "[Nn][ext][!] [file ...]"
d1461 10
a1470 5
.TP
.B "[line] o[pen] /pattern/ [flags]"
Enter open mode.
.TP
.B "pre[serve]"
d1472 2
a1473 2
.I \&ex
.B \-r
d1475 6
a1480 2
.TP
.B "[Pp]rev[ious][!]"
d1482 7
a1488 2
.TP
.B "[range] p[rint] [count] [flags]"
d1490 6
a1495 2
.TP
.B "[line] pu[t] [buffer]"
d1497 5
a1501 2
.TP
.B "q[uit][!]"
d1503 7
a1509 2
.TP
.B "[line] r[ead][!] [file]"
d1511 5
a1515 2
.TP
.B "rec[over] file"
d1517 1
a1517 1
.I file
d1519 7
a1525 3
.TP
.B "res[ize] [+|-]size"
.I \&Vi
d1528 5
a1532 2
.TP
.B "rew[ind][!]"
d1534 10
a1543 2
.TP
.B "se[t] [option[=[value]] ...] [nooption ...] [option? ...] [all]"
d1545 2
a1546 2
.TP
.B "sh[ell]"
d1548 5
a1552 2
.TP
.B "so[urce] file"
d1554 1
a1554 1
.I \&ex
d1556 25
a1580 6
.TP
.B "[range] s[ubstitute] [/pattern/replace/] [options] [count] [flags]"
.TP
.B "[range] & [options] [count] [flags]"
.TP
.B "[range] ~ [options] [count] [flags]"
d1582 10
a1591 6
.TP
.B "su[spend][!]"
.TP
.B "st[op][!]"
.TP
.B <suspend>
d1593 11
a1603 2
.TP
.B "[Tt]a[g][!] tagstring"
d1605 5
a1609 2
.TP
.B "tagn[ext][!]"
d1611 6
a1616 2
.TP
.B "tagp[op][!] [file | number]"
d1618 5
a1622 2
.TP
.B "tagp[rev][!]"
d1624 23
a1646 2
.TP
.B "unm[ap][!] lhs"
d1648 2
a1649 2
.TP
.B "ve[rsion]"
d1651 1
a1651 1
.I \&ex/vi
d1653 9
a1661 3
.TP
.B "[line] vi[sual] [type] [count] [flags]"
.I \&Ex
d1664 10
a1673 4
.IR \&vi .
.TP
.B "[Vi]i[sual][!] [+cmd] [file]"
.I \&Vi
d1676 5
a1680 2
.TP
.B "viu[sage] [command]"
d1682 1
a1682 1
.I \&vi
d1684 26
a1709 8
.TP
.B "[range] w[rite][!] [>>] [file]"
.TP
.B "[range] w[rite] [!] [file]"
.TP
.B "[range] wn[!] [>>] [file]"
.TP
.B "[range] wq[!] [>>] [file]"
d1711 16
a1726 5
.TP
.B "[range] x[it][!] [file]"
Write the file if it has been modified.
.TP
.B "[range] ya[nk] [buffer] [count]"
d1728 8
a1735 2
.TP
.B "[line] z [type] [count] [flags]"
d1737 5
a1741 3
.SH SET OPTIONS
There are a large number of options that may be set (or unset) to
change the editor's behavior.
d1744 1
a1744 1
.PP
d1750 1
a1750 1
.PP
d1752 1
a1752 1
.I \&ex
d1754 1
a1754 1
.I \&vi
d1756 3
a1758 4
.PP
.TP
.B "altwerase [off]"
.I \&Vi
d1761 1
a1761 2
.TP
.B "autoindent, ai [off]"
d1763 2
a1764 3
.TP
.B "autoprint, ap [off]"
.I \&Ex
d1767 1
a1767 2
.TP
.B "autowrite, aw [off]"
d1769 3
a1771 11
.\" I cannot get a double quote to print between the square brackets
.\" to save my life.  The ONLY way I've been able to get this to work
.\" is with the .tr command.
.tr Q"
.ds ms backup [QQ]
.TP
.B "\*(ms"
.tr QQ
Backup files before they are overwritten.
.TP
.B "beautify, bf [off]"
d1773 1
a1773 2
.TP
.B "cdpath [environment variable CDPATH, or current directory]"
d1775 1
a1775 1
.B cd
d1777 1
a1777 2
.TP
.B "cedit [no default]"
d1779 1
a1779 2
.TP
.B "columns, co [80]"
d1781 2
a1782 3
.TP
.B "comment [off]"
.I \&Vi
d1785 1
a1785 2
.TP
.B "directory, dir [environment variable TMPDIR, or /tmp]"
d1787 16
a1802 9
.TP
.B "edcompatible, ed [off]"
Remember the values of the ``c'' and ``g'' suffixes to the
.B substitute
commands, instead of initializing them as unset for each new
command.
.TP
.B "errorbells, eb [off]"
.I \&Ex
d1805 1
a1805 2
.TP
.B "exrc, ex [off]"
d1807 3
a1809 4
.TP
.B "extended [off]"
Regular expressions are extended (i.e.
.IR egrep (1)\-\c
d1811 3
a1813 6
.TP
.B "filec [no default]"
Set the character to perform file path completion on the colon
command line.
.TP
.B "flash [on]"
d1815 1
a1815 2
.TP
.B "hardtabs, ht [8]"
d1817 3
a1819 3
.TP
.B "iclower [off]"
Makes all Regular Expressions case-insensitive,
d1821 1
a1821 2
.TP
.B "ignorecase, ic [off]"
d1823 1
a1823 2
.TP
.B "keytime [6]"
d1825 1
a1825 1
.I ex/vi
d1827 2
a1828 3
.TP
.B "leftright [off]"
.I \&Vi
d1831 2
a1832 3
.TP
.B "lines, li [24]"
.I \&Vi
d1835 2
a1836 3
.TP
.B "lisp [off]"
.I \&Vi
d1839 2
a1840 3
.I "This option is not yet implemented."
.TP
.B "list [off]"
d1842 3
a1844 6
.TP
.B "lock [on]"
Attempt to get an exclusive lock on any file being edited,
read or written.
.TP
.B "magic [on]"
d1846 2
a1847 3
.TP
.B "matchtime [7]"
.I \&Vi
d1850 1
a1850 1
.I ex/vi
d1852 1
a1852 1
.B showmatch
d1854 1
a1854 2
.TP
.B "mesg [on]"
d1856 4
a1859 2
.TP
.B "modelines, modeline [off]"
d1861 1
a1861 1
.I ex
d1863 2
a1864 9
.I "This option will never be implemented."
.\" I cannot get a double quote to print between the square brackets
.\" to save my life.  The ONLY way I've been able to get this to work
.\" is with the .tr command.
.tr Q"
.ds ms noprint [QQ]
.TP
.B "\*(ms"
.tr QQ
d1866 1
a1866 2
.TP
.B "number, nu [off]"
d1868 1
a1868 2
.TP
.B "octal [off]"
d1871 2
a1872 3
.TP
.B "open [on]"
.I \&Ex
d1875 1
a1875 1
.B open
d1877 1
a1877 1
.B visual
d1879 2
a1880 3
.TP
.B "optimize, opt [on]"
.I \&Vi
d1883 3
a1885 4
.I "This option is not yet implemented."
.TP
.B "paragraphs, para [IPLPPPQPP LIpplpipbp]"
.I \&Vi
d1888 1
a1888 1
.B \&{
d1890 1
a1890 1
.B \&}
d1892 1
a1892 2
.TP
.B "path []"
d1894 1
a1894 8
.\" I cannot get a double quote to print between the square brackets
.\" to save my life.  The ONLY way I've been able to get this to work
.\" is with the .tr command.
.tr Q"
.ds ms print [QQ]
.TP
.B "\*(ms"
.tr QQ
d1896 2
a1897 3
.TP
.B "prompt [on]"
.I \&Ex
d1900 1
a1900 2
.TP
.B "readonly, ro [off]"
d1902 1
a1902 2
.TP
.B "recdir [/var/tmp/vi.recover]"
d1904 2
a1905 3
.TP
.B "redraw, re [off]"
.I \&Vi
d1908 2
a1909 3
.I "This option is not yet implemented."
.TP
.B "remap [on]"
d1911 4
a1914 7
.TP
.B "report [5]"
Set the number of lines about which the editor reports changes
or yanks.
.TP
.B "ruler [off]"
.I \&Vi
d1917 1
a1917 2
.TP
.B "scroll, scr [window / 2]"
d1919 1
a1919 2
.TP
.B "searchincr [off]"
d1921 1
a1921 1
.B \&/
d1923 1
a1923 1
.B \&?
d1925 2
a1926 3
.TP
.B "sections, sect [NHSHH HUnhsh]"
.I \&Vi
d1929 1
a1929 1
.B \&[[
d1931 1
a1931 1
.B \&]]
d1933 1
a1933 2
.TP
.B "secure [off]"
d1935 1
a1935 2
.TP
.B "shell, sh [environment variable SHELL, or /bin/sh]"
d1937 1
a1937 8
.\" I cannot get a double quote to print between the square brackets
.\" to save my life.  The ONLY way I've been able to get this to work
.\" is with the .tr command.
.tr Q"
.ds ms shellmeta [~{[*?$`'Q\e]
.TP
.B "\*(ms"
.tr QQ
d1940 1
a1940 2
.TP
.B "shiftwidth, sw [8]"
d1942 20
a1961 13
.TP
.B "showmatch, sm [off]"
.I \&Vi
only.
Note matching ``{'' and ``('' for ``}'' and ``)'' characters.
.TP
.B "showmode, smd [off]"
.I \&Vi
only.
Display the current editor mode and a ``modified'' flag.
.TP
.B "sidescroll [16]"
.I \&Vi
d1964 1
a1964 2
.TP
.B "slowopen, slow [off]"
d1966 2
a1967 3
.I "This option is not yet implemented."
.TP
.B "sourceany [off]"
d1969 2
a1970 3
.I "This option will never be implemented."
.TP
.B "tabstop, ts [8]"
d1972 1
a1972 2
.TP
.B "taglength, tl [0]"
d1974 1
a1974 2
.TP
.B "tags, tag [tags /var/db/libc.tags /sys/kern/tags]"
d1976 4
a1979 2
.TP
.B "term, ttytype, tty [environment variable TERM]"
d1981 1
a1981 2
.TP
.B "terse [off]"
d1984 1
a1984 2
.TP
.B "tildeop [off]"
d1986 1
a1986 1
.B \&~
d1988 1
a1988 2
.TP
.B "timeout, to [on]"
d1990 2
a1991 3
.TP
.B "ttywerase [off]"
.I \&Vi
d1994 2
a1995 3
.TP
.B "verbose [off]"
.I \&Vi
d1998 14
a2011 18
.TP
.B "w300 [no default]"
.I \&Vi
only.
Set the window size if the baud rate is less than 1200 baud.
.TP
.B "w1200 [no default]"
.I \&Vi
only.
Set the window size if the baud rate is equal to 1200 baud.
.TP
.B "w9600 [no default]"
.I \&Vi
only.
Set the window size if the baud rate is greater than 1200 baud.
.TP
.B "warn [on]"
.I \&Ex
d2013 1
a2013 1
This option causes a warning message to be printed on the terminal 
d2015 1
a2015 1
.B \&!
d2017 4
a2020 2
.TP
.B "window, w, wi [environment variable LINES]"
d2022 1
a2022 2
.TP
.B "windowname [off]"
d2025 2
a2026 3
.TP
.B "wraplen, wl [0]"
.I \&Vi
d2028 2
a2029 2
Break lines automatically, the specified number of columns from the
left-hand margin.
d2031 1
a2031 1
.B wraplen
d2033 1
a2033 1
.B wrapmargin
d2035 1
a2035 1
.B wrapmargin
d2037 2
a2038 3
.TP
.B "wrapmargin, wm [0]"
.I \&Vi
d2040 2
a2041 2
Break lines automatically, the specified number of columns from the
right-hand margin.
d2043 1
a2043 1
.B wraplen
d2045 1
a2045 1
.B wrapmargin
d2047 1
a2047 1
.B wrapmargin
d2049 1
a2049 2
.TP
.B "wrapscan, ws [on]"
d2051 1
a2051 2
.TP
.B "writeany, wa [off]"
d2053 4
a2056 3
.SH ENVIRONMENTAL VARIABLES
.TP
.I COLUMNS
d2060 1
a2060 1
.I COLUMNS
d2062 1
a2062 1
.I ex/vi
d2064 1
a2064 1
.B columns
d2066 1
a2066 1
.I ex/vi
d2068 1
a2068 2
.TP
.I EXINIT
d2070 3
a2072 3
.I \&ex
startup commands, read if the variable
.I NEXINIT
d2074 5
a2078 4
.TP
.I HOME
The user's home directory, used as the initial directory path
for the startup ``$\fIHOME\fP/.nexrc'' and ``$\fIHOME\fP/.exrc''
d2081 2
a2082 2
.I \&vi
.B \&cd
d2084 1
a2084 2
.TP
.I LINES
d2088 1
a2088 1
.I LINES
d2090 1
a2090 1
.I ex/vi
d2092 1
a2092 1
.B lines
d2094 1
a2094 1
.I ex/vi
d2096 1
a2096 2
.TP
.I NEXINIT
d2098 1
a2098 1
.I \&ex
d2100 1
a2100 2
.TP
.I SHELL
d2102 1
a2102 1
.B shell
d2104 1
a2104 2
.TP
.I TERM
d2106 2
a2107 1
The default is the type ``unknown''.
d2109 1
a2109 1
.I TERM
d2111 1
a2111 1
.I ex/vi
d2113 1
a2113 1
.B term
d2115 1
a2115 1
.I ex/vi
d2117 1
a2117 2
.TP
.I TMPDIR
d2119 1
a2119 1
.B directory
d2121 13
a2133 13
.SH ASYNCHRONOUS EVENTS
.TP
SIGALRM
.I \&Vi/ex
uses this signal for periodic backups of file modifications and to
display ``busy'' messages when operations are likely to take a long time.
.TP
SIGHUP
.TP
SIGTERM
If the current buffer has changed since it was last written in its
entirety, the editor attempts to save the modified file so it can
be later recovered.
d2135 7
a2141 6
.I \&vi/ex
Reference manual section entitled ``Recovery'' for more information.
.TP
SIGINT
When an interrupt occurs,
the current operation is halted,
d2146 2
a2147 2
.TP
SIGWINCH
d2150 13
a2162 11
.I \&vi/ex
Reference manual section entitled ``Sizing the Screen'' for more information.
.TP
SIGCONT
.TP
SIGTSTP
.I \&Vi/ex
ignores these signals.
.SH FILES
.TP
/bin/sh
d2164 5
a2168 5
.TP
/etc/vi.exrc
System-wide vi startup file.
.TP
/tmp
d2170 1
a2170 2
.TP
/var/tmp/vi.recover
d2172 19
a2190 22
.TP
$HOME/.nexrc
1st choice for user's home directory startup file.
.TP
$HOME/.exrc
2nd choice for user's home directory startup file.
.TP
\&.nexrc
1st choice for local directory startup file.
.TP
\&.exrc
2nd choice for local directory startup file.
.SH SEE ALSO
.IR ctags (1),
.IR more (1),
.IR curses (3),
.IR dbopen (3)
.sp
The ``Vi Quick Reference'' card.
.sp
``An Introduction to Display Editing with Vi'', found in the
``UNIX User's Manual Supplementary Documents''
d2193 1
a2193 1
.I \&vi
d2195 3
a2197 4
.sp
``Ex Reference Manual (Version 3.7)'',
found in the
``UNIX User's Manual Supplementary Documents''
d2200 1
a2200 1
.I \&ex
d2202 3
a2204 4
.sp
``Edit: A tutorial'',
found in the
``UNIX User's Manual Supplementary Documents''
d2207 1
a2207 1
.I \&ex
d2209 3
a2211 4
.sp
``Ex/Vi Reference Manual'',
found in the
``UNIX User's Manual Supplementary Documents''
d2214 1
a2214 1
.I \&nex/nvi
d2216 3
a2218 4
.PP
.I Roff
source for all of these documents is distributed with
.I nex/nvi
d2220 1
a2220 1
.I nvi/USD.doc
d2222 1
a2222 1
.I nex/nvi
d2224 7
a2230 2
.sp
The files ``autowrite'', ``input'', ``quoting'' and ``structures''
d2232 1
a2232 1
.I nvi/docs/internals
d2234 1
a2234 1
.I nex/nvi
d2236 8
a2243 1
.SH HISTORY
d2245 1
a2245 1
.I nex/nvi
d2247 10
a2256 8
.I ex/vi
editor first appeared in 4.4BSD.
.SH STANDARDS
.I \&Nex/nvi
is close to IEEE Std1003.2 (``POSIX'').
That document differs from historical
.I ex/vi
practice in several places; there are changes to be made on both sides.
@


1.13
log
@typos; jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.12 2001/09/15 15:41:19 miod Exp $
a1513 2
.TP
SIGQUIT
@


1.12
log
@Obvious omissions.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vi.1,v 1.11 2001/01/29 01:58:34 niklas Exp $
d153 1
a153 1
Prompts, informative messages and other user oriented message
d280 1
a280 1
Once you've entered input mode using the one of the
d328 1
a328 1
One final caution.
d416 1
a416 1
Switch to the next lower screen in the window, or, to the first
d553 1
a553 1
not specified.
d1090 1
a1090 1
Remember the values of the ``c'' and ``g'' suffices to the
d1368 2
a1369 2
This option causes a warning message to the terminal if the file has
been modified, since it was last written, before a
@


1.11
log
@$OpenBSD$
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d410 1
a410 1
.B "<control-U>"
d419 1
a419 1
.B "<control-Y>"
@


1.10
log
@- remove trailing white space
- remove arguments from .Os macros
- remove arguments from .Nm macros, where appropriate
- some more Dq/Sq/Ql insanity
- still lots to do in the usr.bin tree... :/
@
text
@d1 2
@


1.9
log
@fix comma splices involving 'however'
@
text
@d7 1
a7 1
.\" Keith Bostic. 
d282 1
a282 1
or 
@


1.8
log
@
Man pages Xrefs.
@
text
@d105 1
a105 1
Particularly useful for initial positioning in the file, however
d182 1
a182 1
will read commands from it regardless, however, the session will be a
@


1.7
log
@Update to 1.79 and install as vi/ex/view.
@
text
@d1545 1
a1545 1
.IR more (3),
@


1.6
log
@vi -> nvi, ex -> nex
@
text
@d11 1
a11 1
.\"     @@(#)vi.1	8.49 (Berkeley) 8/20/96
d13 1
a13 1
.TH VI 1 "August 20, 1996"
d20 1
a20 1
.B -eFRrsv\c
d31 1
a31 1
.B -eFlRrv\c
d42 1
a42 1
.B -eFRrv\c
d139 5
d1082 1
a1082 1
Skip leading comments in shell and C-language files.
@


1.5
log
@nvi 1.75
@
text
@@


1.4
log
@nvi 1.74
@
text
@d11 1
a11 1
.\"     @@(#)vi.1	8.48 (Berkeley) 8/18/96
d13 1
a13 1
.TH VI 1 "August 18, 1996"
d51 5
a55 5
The vi program is shareware.  You are welcome to copy, modify and share
it with others under the conditions listed in the LICENSE file.  If your
company finds vi sufficiently useful that you would have purchased it,
or your company wishes to redistribute it, contributions to the authors
would be appreciated.
@


1.3
log
@nvi 1.73
@
text
@d3 1
a3 1
.\" Copyright (c) 1994, 1995
d6 2
a7 15
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
d9 1
a9 11
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
d11 1
a11 1
.\"     @@(#)vi.1	8.45 (Berkeley) 8/10/96
d13 1
a13 1
.TH VI 1 "August 10, 1996"
d50 6
@


1.2
log
@bring vi/ex up to 1.71
@
text
@d34 1
a34 1
.\"     @@(#)vi.1	8.44 (Berkeley) 6/28/96
d36 1
a36 1
.TH VI 1 "June 28, 1996"
d1223 3
@


1.1
log
@new vi
@
text
@d34 1
a34 1
.\"     @@(#)vi.1	8.39 (Berkeley) 5/18/96
d36 1
a36 1
.TH VI 1 "May 18, 1996"
d862 1
a862 1
.B "e[dit][!] [+cmd] [file]"
d864 1
a864 1
.B "ex[!] [+cmd] [file]"
d875 1
a875 1
.B "fg [name]"
d915 1
a915 1
.B "n[ext][!] [file ...]"
d927 1
a927 1
.B "prev[ious][!]"
d980 1
a980 1
.B "ta[g][!] tagstring"
d1006 1
a1006 1
.B "vi[sual][!] [+cmd] [file]"
d1094 1
a1094 1
Skip leading comments in files.
d1305 1
a1305 1
.B "showmode [off]"
d1339 1
a1339 1
.B "tildeop"
d1382 4
@
