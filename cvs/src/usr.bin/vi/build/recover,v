head	1.11;
access;
symbols
	OPENBSD_6_0:1.9.0.60
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.56
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.58
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.50
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.54
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.52
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.48
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.46
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.44
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.42
	OPENBSD_5_0:1.9.0.40
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.38
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.36
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.32
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.34
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.30
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.28
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.26
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.24
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.22
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.20
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.18
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.16
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.14
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2016.11.05.16.21.56;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	z20gNg2I8zUTgXVp;

1.10
date	2016.08.08.15.09.32;	author sobrado;	state Exp;
branches;
next	1.9;
commitid	6RogTCg666XVbMWO;

1.9
date	2001.11.06.23.31.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.05.22.43.49;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.11.04.56.52;	author millert;	state Exp;
branches
	1.7.2.1
	1.7.4.1;
next	1.6;

1.6
date	2000.04.21.17.06.13;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.20.15.24.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.09.21.24.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.20.18.19.45;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.10.11.20.07.19;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.27.23.29.12;	author downsj;	state Exp;
branches;
next	;

1.7.2.1
date	2001.11.14.21.29.39;	author miod;	state Exp;
branches;
next	;

1.7.4.1
date	2001.11.14.03.12.23;	author jason;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove syscall.ph from vi.recover

since perl-5.10 chdir supports fchdir

ok guenther@@
@
text
@#!/usr/bin/perl -w
#
# $OpenBSD: recover,v 1.10 2016/08/08 15:09:32 sobrado Exp $
#
# Script to (safely) recover nvi edit sessions.
#

use Fcntl;

$recoverdir = $ARGV[0] || "/tmp/vi.recover";
$sendmail = "/usr/sbin/sendmail";

die "Sorry, $0 must be run as root\n" if $>;

# Make the recovery dir if it does not already exist.
if (!sysopen(DIR, $recoverdir, O_RDONLY|O_NOFOLLOW) || !stat(DIR)) {
	die "Warning! $recoverdir is a symbolic link! (ignoring)\n"
	    if -l $recoverdir;
	mkdir($recoverdir, 01777) || die "Unable to create $recoverdir: $!\n";
	chmod(01777, $recoverdir);
	exit(0);
}

#
# Sanity check the vi recovery dir
#
die "Warning! $recoverdir is not a directory! (ignoring)\n"
    unless -d _;
die "$0: can't chdir to $recoverdir: $!\n" unless chdir DIR;
if (! -O _) {
	warn "Warning! $recoverdir is not owned by root! (fixing)\n";
	chown(0, 0, ".");
}
if (((stat(_))[2] & 07777) != 01777) {
	warn "Warning! $recoverdir is not mode 01777! (fixing)\n";
	chmod(01777, ".");
}

# Check editor backup files.
opendir(RECDIR, ".") || die "$0: can't open $recoverdir: $!\n";
foreach $file (readdir(RECDIR)) {
	next unless $file =~ /^vi\./;

	#
	# Unmodified vi editor backup files either have the
	# execute bit set or are zero length.  Delete them.
	# Anything that is not a normal file gets deleted too.
	#
	lstat($file) || die "$0: can't stat $file: $!\n";
	if (-x _ || ! -s _ || ! -f _) {
		unlink($file) unless -d _;
	}
}

#
# It is possible to get incomplete recovery files if the editor crashes
# at the right time.
#
rewinddir(RECDIR);
foreach $file (readdir(RECDIR)) {
	next unless $file =~ /^recover\./;

	if (!sysopen(RECFILE, $file, O_RDONLY|O_NOFOLLOW)) {
	    warn "$0: can't open $file: $!\n";
	    next;
	}

	#
	# Delete anything that is not a regular file as that is either
	# filesystem corruption from fsck or an exploit attempt.
	#
	if (!stat(RECFILE)) {
		warn "$0: can't stat $file: $!\n";
		close(RECFILE);
		next;
	}
	$owner = (stat(_))[4];
	if (! -f _ || ! -s _) {
		unlink($file) unless -d _;
		close(RECFILE);
		next;
	}

	#
	# Slurp in the recover.* file and search for X-vi-recover-path
	# (which should point to an existing vi.* file).
	#
	@@recfile = <RECFILE>;
	close(RECFILE);

	#
	# Delete any recovery files that have no (or more than one)
	# corresponding backup file.
	#
	@@backups = grep(m#^X-vi-recover-path:\s*\Q$recoverdir\E/+#, @@recfile);
	if (@@backups != 1) {
		unlink($file);
		next;
	}

	#
	# Make a copy of the backup file path.
	# We must not modify @@backups directly since it contains
	# references to data in @@recfile which we pipe to sendmail.
	#
	$backups[0] =~ m#^X-vi-recover-path:\s*\Q$recoverdir\E/+(.*)[\r\n]*$#;
	$backup = $1;

	#
	# If backup file is not rooted in the recover dir, ignore it.
	# If backup file owner doesn't match recovery file owner, ignore it.
	# If backup file is zero length or not a regular file, remove it.
	# Else send mail to the user.
	#
	if ($backup =~ m#/# || !lstat($backup)) {
		unlink($file);
	} elsif ($owner != 0 && (stat(_))[4] != $owner) {
		unlink($file);
	} elsif (! -f _ || ! -s _) {
		unlink($file, $backup);
	} else {
		open(SENDMAIL, "|$sendmail -t") ||
		    die "$0: can't run $sendmail -t: $!\n";
		print SENDMAIL @@recfile;
		close(SENDMAIL);
	}
}
closedir(RECDIR);
close(DIR);

exit(0);
@


1.10
log
@/tmp and /var/tmp are the same, consistently use the former in both
build/recover and documentation.

ok millert@@, tb@@, martijn@@ and schwarze@@
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.9 2001/11/06 23:31:08 millert Exp $
a8 1
require 'sys/syscall.ph';
a25 2
# Perl doesn't support fchdir, fchmod, or fchown so we call
# fchdir(2) via the syscall interface and then just modify ".".
d29 1
a29 2
die "$0: can't chdir to $recoverdir: $!\n"
    unless syscall(&SYS_fchdir, fileno(DIR)) == 0;
@


1.9
log
@change a stat() to lstat()
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.8 2001/11/05 22:43:49 millert Exp $
d11 1
a11 1
$recoverdir = $ARGV[0] || "/var/tmp/vi.recover";
@


1.8
log
@Add more sanity checks of path data in the vi recovery file; potential problems pointed out by lumpy@@the.whole.net
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.7 2001/01/11 04:56:52 millert Exp $
d119 1
a119 1
	if ($backup =~ m#/# || !stat($backup)) {
@


1.7
log
@grep() returns a list of aliases to entries in the original list
so modifying them directly results in a munged line in the resulting
mail message that gets sent out.  Similar to a patch from cazz@@wezl.org;
closes PR 1617
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.6 2000/04/21 17:06:13 millert Exp $
d81 1
d99 5
a103 2
	@@backups = grep(/^X-vi-recover-path:/, @@recfile);
	unlink($file) unless $#backups == 0;
d106 11
a116 1
	# If recovery file is zero length, remove it.
d119 5
a123 3
	$backups[0] =~ /^X-vi-recover-path:\s*(.*)[\r\n]*$/;
	$backup = $1;
	if (! -s $backup) {
@


1.7.2.1
log
@Errata #16
A security issue exists in the vi.recover script that may allow an attacker
to remove arbitrary zero-length files, regardless of ownership.
Fix (millert):
Add more sanity checks of path data in the vi recovery file; potential
problems pointed out by lumpy@@the.whole.net
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.7 2001/01/11 04:56:52 millert Exp $
a80 1
	$owner = (stat(_))[4];
d98 2
a99 5
	@@backups = grep(m#^X-vi-recover-path:\s*\Q$recoverdir\E/+#, @@recfile);
	if (@@backups != 1) {
		unlink($file);
		next;
	}
d102 2
a103 3
	# Make a copy of the backup file path.
	# We must not modify @@backups directly since it contains
	# references to data in @@recfile which we pipe to sendmail.
d105 1
a105 1
	$backups[0] =~ m#^X-vi-recover-path:\s*\Q$recoverdir\E/+(.*)[\r\n]*$#;
d107 1
a107 12

	#
	# If backup file is not rooted in the recover dir, ignore it.
	# If backup file owner doesn't match recovery file owner, ignore it.
	# If backup file is zero length or not a regular file, remove it.
	# Else send mail to the user.
	#
	if ($backup =~ m#/# || !lstat($backup)) {
		unlink($file);
	} elsif ($owner != 0 && (stat(_))[4] != $owner) {
		unlink($file);
	} elsif (! -f _ || ! -s _) {
@


1.7.4.1
log
@Pull in patch from current (Errata 007, shaken, not stirred):
Add more sanity checks of path data in the vi recovery file; potential problems
pointed out by lumpy@@the.whole.net
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.7 2001/01/11 04:56:52 millert Exp $
a80 1
	$owner = (stat(_))[4];
d98 2
a99 5
	@@backups = grep(m#^X-vi-recover-path:\s*\Q$recoverdir\E/+#, @@recfile);
	if (@@backups != 1) {
		unlink($file);
		next;
	}
d102 2
a103 3
	# Make a copy of the backup file path.
	# We must not modify @@backups directly since it contains
	# references to data in @@recfile which we pipe to sendmail.
d105 1
a105 1
	$backups[0] =~ m#^X-vi-recover-path:\s*\Q$recoverdir\E/+(.*)[\r\n]*$#;
d107 1
a107 12

	#
	# If backup file is not rooted in the recover dir, ignore it.
	# If backup file owner doesn't match recovery file owner, ignore it.
	# If backup file is zero length or not a regular file, remove it.
	# Else send mail to the user.
	#
	if ($backup =~ m#/# || !lstat($backup)) {
		unlink($file);
	} elsif ($owner != 0 && (stat(_))[4] != $owner) {
		unlink($file);
	} elsif (! -f _ || ! -s _) {
@


1.6
log
@Remove the races so that this is safe to run anytime.  We open
/var/tmp/vi.recover to get an fd and user O_NOFOLLOW to following a symlink.
Once we have a file handle we can use it to safely chdir to the right
place and form then on do operations relative to ".".  Also restrict
to root.
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.5 2000/04/20 15:24:24 millert Exp $
a92 1
	@@backups = grep(s/^X-vi-recover-path:\s*(.*)[\r\n]*$/$1/, @@recfile);
d95 2
a96 3
	# Delete any recovery files that are zero length, corrupted,
	# or that have no corresponding backup file.  Else send mail
	# to the user.
d98 11
a108 4
	if ($#backups != 0) {
		unlink($file);
	} elsif (! -s $backups[0]) {
		unlink($file, $backups[0]);
@


1.5
log
@If recover dir is not owned by root, chown it.  If the mode is not
01777, fix that too.  This is safe because the script is run before
user processes start.
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.4 2000/03/09 21:24:02 millert Exp $
a5 2
# NOTE: Assumes we are running *before* users may start processes.
#       If that is not the case then the chown and chmod below are not safe.
d9 1
d14 6
a19 2
# Make the recovery dir if it does not exist.
if (!lstat($recoverdir)) {
d25 1
d27 8
a34 5
if (-l _) {
	die "Warning! $recoverdir is a symbolic link! (ignoring)\n";
} elsif (! -d _) {
	die "Warning! $recoverdir is not a directory! (ignoring)\n";
} elsif (! -O _) {
d36 1
a36 1
	chown 0, 0, $recoverdir;
d40 1
a40 1
	chmod(01777, $recoverdir);
a41 1
chdir($recoverdir) || die "$0: can't chdir to $recoverdir: $!\n";
d48 1
d52 1
d59 2
a60 1
# It is possible to get incomplete recovery files, if the editor crashes
d62 1
d67 6
d75 6
a80 1
	lstat($file) || die "$0: can't stat $file: $!\n";
d83 1
d87 1
d90 1
a90 1
	sysopen(RECFILE, $file, O_RDONLY) || die "$0: can't open $file: $!\n";
d95 1
d99 1
d112 1
@


1.4
log
@Pull in fnctl modeul so we are sure to get O_* for sysopen().
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.3 2000/01/20 18:19:45 millert Exp $
d6 2
a24 2
} elsif (! -O _) {
	die "Warning! $recoverdir is not owned by root! (ignoring)\n";
d27 7
@


1.3
log
@Use sysopen() when opening recover files.  This is purely paranoia
since we check that the filename matches '^recover' and hence the
first character cannot play games with perl's magic open().
@
text
@d3 1
a3 1
# $OpenBSD: recover,v 1.2 1999/10/11 20:07:19 millert Exp $
d7 3
@


1.2
log
@Rewrite in perl for safety and paranoia.  It might have been possible
to play tricks with filesnames that include spaces.
@
text
@d3 1
a3 1
# $OpenBSD$
d57 1
a57 1
	open(RECFILE, $file) || die "$0: can't open $file: $!\n";
@


1.1
log
@move recover script ala 1.79.
@
text
@d1 1
a1 1
#!/bin/sh -
d3 1
a3 2
#	$OpenBSD: recover.script,v 1.3 1997/07/27 22:37:02 downsj Exp $
#	@@(#)recover.in	8.8 (Berkeley) 10/10/96
d5 1
a5 1
# Script to recover nvi edit sessions.
d7 2
a8 2
RECDIR="/var/tmp/vi.recover"
SENDMAIL="/usr/sbin/sendmail"
d10 16
a25 1
echo 'Recovering nvi editor sessions.'
d28 12
a39 15
vibackup=`echo $RECDIR/vi.*`
if [ "$vibackup" != "$RECDIR/vi.*" ]; then
	for i in $vibackup; do
		# Only test files that are readable.
		if test ! -r $i; then
			continue
		fi

		# Unmodified nvi editor backup files either have the
		# execute bit set or are zero length.  Delete them.
		if test -x $i -o ! -s $i; then
			rm $i
		fi
	done
fi
d43 36
a78 19
virecovery=`echo $RECDIR/recover.*`
if [ "$virecovery" != "$RECDIR/recover.*" ]; then
	for i in $virecovery; do
		# Only test files that are readable.
		if test ! -r $i; then
			continue
		fi

		# Delete any recovery files that are zero length, corrupted,
		# or that have no corresponding backup file.  Else send mail
		# to the user.
		recfile=`awk '/^X-vi-recover-path:/{print $2}' < $i`
		if test -n "$recfile" -a -s "$recfile"; then
			$SENDMAIL -t < $i
		else
			rm $i
		fi
	done
fi
@

