head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.58
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.50
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.54
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.52
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.48
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.46
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.44
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.42
	OPENBSD_5_0:1.8.0.40
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.38
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.36
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.32
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.34
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.30
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.28
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.26
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.24
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.22
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.20
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.18
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.16
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.14
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2016.05.27.09.18.12;	author martijn;	state Exp;
branches;
next	1.10;
commitid	01nAnartGL7onLD3;

1.10
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.9;
commitid	ruCZ2IKF0FB0ebCr;

1.9
date	2016.01.20.08.43.27;	author bentley;	state Exp;
branches;
next	1.8;
commitid	etzsUqpfZbRGvPEg;

1.8
date	2002.02.17.19.42.34;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.58;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.29.01.58.48;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.07.27.22.28.20;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.10.16.01.18.42;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.08.20.22.56.08;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.07.24.16.16.03;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.36.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: vi_extern.h,v 1.9 2016/01/20 08:43:27 bentley Exp $	*/

int cs_init(SCR *, VCS *);
int cs_next(SCR *, VCS *);
int cs_fspace(SCR *, VCS *);
int cs_fblank(SCR *, VCS *);
int cs_prev(SCR *, VCS *);
int cs_bblank(SCR *, VCS *);
int v_at(SCR *, VICMD *);
int v_chrepeat(SCR *, VICMD *);
int v_chrrepeat(SCR *, VICMD *);
int v_cht(SCR *, VICMD *);
int v_chf(SCR *, VICMD *);
int v_chT(SCR *, VICMD *);
int v_chF(SCR *, VICMD *);
int v_delete(SCR *, VICMD *);
int v_again(SCR *, VICMD *);
int v_exmode(SCR *, VICMD *);
int v_join(SCR *, VICMD *);
int v_shiftl(SCR *, VICMD *);
int v_shiftr(SCR *, VICMD *);
int v_suspend(SCR *, VICMD *);
int v_switch(SCR *, VICMD *);
int v_tagpush(SCR *, VICMD *);
int v_tagpop(SCR *, VICMD *);
int v_filter(SCR *, VICMD *);
int v_event_exec(SCR *, VICMD *);
int v_ex(SCR *, VICMD *);
int v_ecl_exec(SCR *);
int v_increment(SCR *, VICMD *);
int v_screen_copy(SCR *, SCR *);
int v_screen_end(SCR *);
int v_optchange(SCR *, int, char *, u_long *);
int v_iA(SCR *, VICMD *);
int v_ia(SCR *, VICMD *);
int v_iI(SCR *, VICMD *);
int v_ii(SCR *, VICMD *);
int v_iO(SCR *, VICMD *);
int v_io(SCR *, VICMD *);
int v_change(SCR *, VICMD *);
int v_Replace(SCR *, VICMD *);
int v_subst(SCR *, VICMD *);
int v_left(SCR *, VICMD *);
int v_cfirst(SCR *, VICMD *);
int v_first(SCR *, VICMD *);
int v_ncol(SCR *, VICMD *);
int v_zero(SCR *, VICMD *);
int v_mark(SCR *, VICMD *);
int v_bmark(SCR *, VICMD *);
int v_fmark(SCR *, VICMD *);
int v_match(SCR *, VICMD *);
int v_paragraphf(SCR *, VICMD *);
int v_paragraphb(SCR *, VICMD *);
int v_buildps(SCR *, char *, char *);
int v_Put(SCR *, VICMD *);
int v_put(SCR *, VICMD *);
int v_redraw(SCR *, VICMD *);
int v_replace(SCR *, VICMD *);
int v_right(SCR *, VICMD *);
int v_dollar(SCR *, VICMD *);
int v_screen(SCR *, VICMD *);
int v_lgoto(SCR *, VICMD *);
int v_home(SCR *, VICMD *);
int v_middle(SCR *, VICMD *);
int v_bottom(SCR *, VICMD *);
int v_up(SCR *, VICMD *);
int v_cr(SCR *, VICMD *);
int v_down(SCR *, VICMD *);
int v_hpageup(SCR *, VICMD *);
int v_hpagedown(SCR *, VICMD *);
int v_pagedown(SCR *, VICMD *);
int v_pageup(SCR *, VICMD *);
int v_lineup(SCR *, VICMD *);
int v_linedown(SCR *, VICMD *);
int v_searchb(SCR *, VICMD *);
int v_searchf(SCR *, VICMD *);
int v_searchN(SCR *, VICMD *);
int v_searchn(SCR *, VICMD *);
int v_searchw(SCR *, VICMD *);
int v_correct(SCR *, VICMD *, int);
int v_sectionf(SCR *, VICMD *);
int v_sectionb(SCR *, VICMD *);
int v_sentencef(SCR *, VICMD *);
int v_sentenceb(SCR *, VICMD *);
int v_status(SCR *, VICMD *);
int v_tcmd(SCR *, VICMD *, CHAR_T, u_int);
int v_txt(SCR *, VICMD *, MARK *,
   const char *, size_t, CHAR_T, recno_t, u_long, u_int32_t);
int v_txt_auto(SCR *, recno_t, TEXT *, size_t, TEXT *);
int v_ulcase(SCR *, VICMD *);
int v_mulcase(SCR *, VICMD *);
int v_Undo(SCR *, VICMD *);
int v_undo(SCR *, VICMD *);
void v_eof(SCR *, MARK *);
void v_eol(SCR *, MARK *);
void v_nomove(SCR *);
void v_sof(SCR *, MARK *);
void v_sol(SCR *);
int v_isempty(char *, size_t);
void v_emsg(SCR *, char *, vim_t);
int v_wordW(SCR *, VICMD *);
int v_wordw(SCR *, VICMD *);
int v_wordE(SCR *, VICMD *);
int v_worde(SCR *, VICMD *);
int v_wordB(SCR *, VICMD *);
int v_wordb(SCR *, VICMD *);
int v_xchar(SCR *, VICMD *);
int v_Xchar(SCR *, VICMD *);
int v_yank(SCR *, VICMD *);
int v_z(SCR *, VICMD *);
int vs_crel(SCR *, long);
int v_zexit(SCR *, VICMD *);
int vi(SCR **);
int vs_line(SCR *, SMAP *, size_t *, size_t *);
int vs_number(SCR *);
void vs_busy(SCR *, const char *, busy_t);
void vs_home(SCR *);
void vs_update(SCR *, const char *, const char *);
void vs_msg(SCR *, mtype_t, char *, size_t);
int vs_ex_resolve(SCR *, int *);
int vs_resolve(SCR *, SCR *, int);
int vs_repaint(SCR *, EVENT *);
int vs_refresh(SCR *, int);
int vs_column(SCR *, size_t *);
size_t vs_screens(SCR *, recno_t, size_t *);
size_t vs_columns(SCR *, char *, recno_t, size_t *, size_t *);
size_t vs_rcm(SCR *, recno_t, int);
size_t vs_colpos(SCR *, recno_t, size_t);
int vs_change(SCR *, recno_t, lnop_t);
int vs_sm_fill(SCR *, recno_t, pos_t);
int vs_sm_scroll(SCR *, MARK *, recno_t, scroll_t);
int vs_sm_1up(SCR *);
int vs_sm_1down(SCR *);
int vs_sm_next(SCR *, SMAP *, SMAP *);
int vs_sm_prev(SCR *, SMAP *, SMAP *);
int vs_sm_cursor(SCR *, SMAP **);
int vs_sm_position(SCR *, MARK *, u_long, pos_t);
recno_t vs_sm_nlines(SCR *, SMAP *, recno_t, size_t);
int vs_split(SCR *, SCR *, int);
int vs_discard(SCR *, SCR **);
int vs_fg(SCR *, SCR **, CHAR_T *, int);
int vs_bg(SCR *);
int vs_swap(SCR *, SCR **, char *);
int vs_resize(SCR *, long, adj_t);
@


1.10
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d86 1
a86 1
int v_tcmd(SCR *, VICMD *, char, u_int);
d88 1
a88 1
   const char *, size_t, char, recno_t, u_long, u_int32_t);
d141 1
a141 1
int vs_fg(SCR *, SCR **, char *, int);
@


1.9
log
@Remove ARG_CHAR_T, a relic from when the code was written K&R style.

ok millert@@ schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vi_extern.h,v 1.8 2002/02/17 19:42:34 millert Exp $	*/
d86 1
a86 1
int v_tcmd(SCR *, VICMD *, CHAR_T, u_int);
d88 1
a88 1
   const char *, size_t, CHAR_T, recno_t, u_long, u_int32_t);
d141 1
a141 1
int vs_fg(SCR *, SCR **, CHAR_T *, int);
@


1.8
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: vi_extern.h,v 1.7 2002/02/16 21:27:58 millert Exp $	*/
d86 1
a86 1
int v_tcmd(SCR *, VICMD *, ARG_CHAR_T, u_int);
d88 1
a88 1
   const char *, size_t, ARG_CHAR_T, recno_t, u_long, u_int32_t);
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: vi_extern.h,v 1.6 2001/01/29 01:58:48 niklas Exp $	*/
d87 2
a88 2
int v_txt __P((SCR *, VICMD *, MARK *,
   const char *, size_t, ARG_CHAR_T, recno_t, u_long, u_int32_t));
@


1.6
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 84
a86 84
int cs_init __P((SCR *, VCS *));
int cs_next __P((SCR *, VCS *));
int cs_fspace __P((SCR *, VCS *));
int cs_fblank __P((SCR *, VCS *));
int cs_prev __P((SCR *, VCS *));
int cs_bblank __P((SCR *, VCS *));
int v_at __P((SCR *, VICMD *));
int v_chrepeat __P((SCR *, VICMD *));
int v_chrrepeat __P((SCR *, VICMD *));
int v_cht __P((SCR *, VICMD *));
int v_chf __P((SCR *, VICMD *));
int v_chT __P((SCR *, VICMD *));
int v_chF __P((SCR *, VICMD *));
int v_delete __P((SCR *, VICMD *));
int v_again __P((SCR *, VICMD *));
int v_exmode __P((SCR *, VICMD *));
int v_join __P((SCR *, VICMD *));
int v_shiftl __P((SCR *, VICMD *));
int v_shiftr __P((SCR *, VICMD *));
int v_suspend __P((SCR *, VICMD *));
int v_switch __P((SCR *, VICMD *));
int v_tagpush __P((SCR *, VICMD *));
int v_tagpop __P((SCR *, VICMD *));
int v_filter __P((SCR *, VICMD *));
int v_event_exec __P((SCR *, VICMD *));
int v_ex __P((SCR *, VICMD *));
int v_ecl_exec __P((SCR *));
int v_increment __P((SCR *, VICMD *));
int v_screen_copy __P((SCR *, SCR *));
int v_screen_end __P((SCR *));
int v_optchange __P((SCR *, int, char *, u_long *));
int v_iA __P((SCR *, VICMD *));
int v_ia __P((SCR *, VICMD *));
int v_iI __P((SCR *, VICMD *));
int v_ii __P((SCR *, VICMD *));
int v_iO __P((SCR *, VICMD *));
int v_io __P((SCR *, VICMD *));
int v_change __P((SCR *, VICMD *));
int v_Replace __P((SCR *, VICMD *));
int v_subst __P((SCR *, VICMD *));
int v_left __P((SCR *, VICMD *));
int v_cfirst __P((SCR *, VICMD *));
int v_first __P((SCR *, VICMD *));
int v_ncol __P((SCR *, VICMD *));
int v_zero __P((SCR *, VICMD *));
int v_mark __P((SCR *, VICMD *));
int v_bmark __P((SCR *, VICMD *));
int v_fmark __P((SCR *, VICMD *));
int v_match __P((SCR *, VICMD *));
int v_paragraphf __P((SCR *, VICMD *));
int v_paragraphb __P((SCR *, VICMD *));
int v_buildps __P((SCR *, char *, char *));
int v_Put __P((SCR *, VICMD *));
int v_put __P((SCR *, VICMD *));
int v_redraw __P((SCR *, VICMD *));
int v_replace __P((SCR *, VICMD *));
int v_right __P((SCR *, VICMD *));
int v_dollar __P((SCR *, VICMD *));
int v_screen __P((SCR *, VICMD *));
int v_lgoto __P((SCR *, VICMD *));
int v_home __P((SCR *, VICMD *));
int v_middle __P((SCR *, VICMD *));
int v_bottom __P((SCR *, VICMD *));
int v_up __P((SCR *, VICMD *));
int v_cr __P((SCR *, VICMD *));
int v_down __P((SCR *, VICMD *));
int v_hpageup __P((SCR *, VICMD *));
int v_hpagedown __P((SCR *, VICMD *));
int v_pagedown __P((SCR *, VICMD *));
int v_pageup __P((SCR *, VICMD *));
int v_lineup __P((SCR *, VICMD *));
int v_linedown __P((SCR *, VICMD *));
int v_searchb __P((SCR *, VICMD *));
int v_searchf __P((SCR *, VICMD *));
int v_searchN __P((SCR *, VICMD *));
int v_searchn __P((SCR *, VICMD *));
int v_searchw __P((SCR *, VICMD *));
int v_correct __P((SCR *, VICMD *, int));
int v_sectionf __P((SCR *, VICMD *));
int v_sectionb __P((SCR *, VICMD *));
int v_sentencef __P((SCR *, VICMD *));
int v_sentenceb __P((SCR *, VICMD *));
int v_status __P((SCR *, VICMD *));
int v_tcmd __P((SCR *, VICMD *, ARG_CHAR_T, u_int));
d89 56
a144 56
int v_txt_auto __P((SCR *, recno_t, TEXT *, size_t, TEXT *));
int v_ulcase __P((SCR *, VICMD *));
int v_mulcase __P((SCR *, VICMD *));
int v_Undo __P((SCR *, VICMD *));
int v_undo __P((SCR *, VICMD *));
void v_eof __P((SCR *, MARK *));
void v_eol __P((SCR *, MARK *));
void v_nomove __P((SCR *));
void v_sof __P((SCR *, MARK *));
void v_sol __P((SCR *));
int v_isempty __P((char *, size_t));
void v_emsg __P((SCR *, char *, vim_t));
int v_wordW __P((SCR *, VICMD *));
int v_wordw __P((SCR *, VICMD *));
int v_wordE __P((SCR *, VICMD *));
int v_worde __P((SCR *, VICMD *));
int v_wordB __P((SCR *, VICMD *));
int v_wordb __P((SCR *, VICMD *));
int v_xchar __P((SCR *, VICMD *));
int v_Xchar __P((SCR *, VICMD *));
int v_yank __P((SCR *, VICMD *));
int v_z __P((SCR *, VICMD *));
int vs_crel __P((SCR *, long));
int v_zexit __P((SCR *, VICMD *));
int vi __P((SCR **));
int vs_line __P((SCR *, SMAP *, size_t *, size_t *));
int vs_number __P((SCR *));
void vs_busy __P((SCR *, const char *, busy_t));
void vs_home __P((SCR *));
void vs_update __P((SCR *, const char *, const char *));
void vs_msg __P((SCR *, mtype_t, char *, size_t));
int vs_ex_resolve __P((SCR *, int *));
int vs_resolve __P((SCR *, SCR *, int));
int vs_repaint __P((SCR *, EVENT *));
int vs_refresh __P((SCR *, int));
int vs_column __P((SCR *, size_t *));
size_t vs_screens __P((SCR *, recno_t, size_t *));
size_t vs_columns __P((SCR *, char *, recno_t, size_t *, size_t *));
size_t vs_rcm __P((SCR *, recno_t, int));
size_t vs_colpos __P((SCR *, recno_t, size_t));
int vs_change __P((SCR *, recno_t, lnop_t));
int vs_sm_fill __P((SCR *, recno_t, pos_t));
int vs_sm_scroll __P((SCR *, MARK *, recno_t, scroll_t));
int vs_sm_1up __P((SCR *));
int vs_sm_1down __P((SCR *));
int vs_sm_next __P((SCR *, SMAP *, SMAP *));
int vs_sm_prev __P((SCR *, SMAP *, SMAP *));
int vs_sm_cursor __P((SCR *, SMAP **));
int vs_sm_position __P((SCR *, MARK *, u_long, pos_t));
recno_t vs_sm_nlines __P((SCR *, SMAP *, recno_t, size_t));
int vs_split __P((SCR *, SCR *, int));
int vs_discard __P((SCR *, SCR **));
int vs_fg __P((SCR *, SCR **, CHAR_T *, int));
int vs_bg __P((SCR *));
int vs_swap __P((SCR *, SCR **, char *));
int vs_resize __P((SCR *, long, adj_t));
@


1.5
log
@Update to 1.79 and install as vi/ex/view.
@
text
@d1 2
@


1.4
log
@nvi 1.78:
        + Fix bugs when both the leftright scrolling and number edit options
          were on.
        + Fix bug where splitting in the middle of the screen could repaint
          incorrectly.
        + Fix first-nul in input bug, where random garbage was inserted.
        + Correct search and mark-as-motion-command bug, it's a line mode
          action if the search starts at or before the first non<blank>.
        + Fix bug autoindent bug, where ^D could shift too far in the line.
        + Fix core dump where ! command called from the .exrc file.
        + Add the -S command-line option, which initializes vi to have the
          secure edit option preset.
@
text
@d119 1
a119 1
int vs_resolve __P((SCR *, int));
@


1.3
log
@nvi 1.74
@
text
@d119 1
@


1.2
log
@bring vi/ex up to 1.71
@
text
@a118 1
int vs_resolve __P((SCR *, int));
@


1.1
log
@new vi
@
text
@d119 1
a119 1
int vs_resolve __P((SCR *));
d139 1
a139 1
int vs_fg __P((SCR *, CHAR_T *));
@
