head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.16
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.14
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.12
	OPENBSD_5_0:1.9.0.10
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.8
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.6
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.28
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.26
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.24
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.22
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.20
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.18
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.16
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.14
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.12
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.16
date	2016.05.27.09.18.12;	author martijn;	state Exp;
branches;
next	1.15;
commitid	01nAnartGL7onLD3;

1.15
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.14;
commitid	ruCZ2IKF0FB0ebCr;

1.14
date	2016.01.20.08.43.27;	author bentley;	state Exp;
branches;
next	1.13;
commitid	etzsUqpfZbRGvPEg;

1.13
date	2015.11.19.07.53.31;	author bentley;	state Exp;
branches;
next	1.12;
commitid	aNUlDSFtbBwW1Tdz;

1.12
date	2014.11.20.08.50.53;	author bentley;	state Exp;
branches;
next	1.11;
commitid	DAfFYTGOAzdEQS6z;

1.11
date	2014.11.14.20.26.13;	author tedu;	state Exp;
branches;
next	1.10;
commitid	WFlGLZb3PUIUZTHF;

1.10
date	2013.05.03.20.43.25;	author kili;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.10.14.03.18;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.12.06.07.17;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.17.19.42.34;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.58;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.01.58.47;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.08.20.22.56.08;	author michaels;	state Exp;
branches;
next	1.3;

1.3
date	96.08.16.17.58.42;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.07.24.16.16.01;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.36.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: ex_extern.h,v 1.14 2016/01/20 08:43:27 bentley Exp $	*/

int ex(SCR **);
int ex_cmd(SCR *);
int ex_range(SCR *, EXCMD *, int *);
int ex_is_abbrev(char *, size_t);
int ex_is_unmap(char *, size_t);
void ex_badaddr
(SCR *, EXCMDLIST const *, enum badaddr, enum nresult);
int ex_abbr(SCR *, EXCMD *);
int ex_unabbr(SCR *, EXCMD *);
int ex_append(SCR *, EXCMD *);
int ex_change(SCR *, EXCMD *);
int ex_insert(SCR *, EXCMD *);
int ex_next(SCR *, EXCMD *);
int ex_prev(SCR *, EXCMD *);
int ex_rew(SCR *, EXCMD *);
int ex_args(SCR *, EXCMD *);
char **ex_buildargv(SCR *, EXCMD *, char *);
int argv_init(SCR *, EXCMD *);
int argv_exp0(SCR *, EXCMD *, char *, size_t);
int argv_exp1(SCR *, EXCMD *, char *, size_t, int);
int argv_exp2(SCR *, EXCMD *, char *, size_t);
int argv_exp3(SCR *, EXCMD *, char *, size_t);
int argv_free(SCR *);
int ex_at(SCR *, EXCMD *);
int ex_bang(SCR *, EXCMD *);
int ex_cd(SCR *, EXCMD *);
int ex_delete(SCR *, EXCMD *);
int ex_display(SCR *, EXCMD *);
int ex_edit(SCR *, EXCMD *);
int ex_equal(SCR *, EXCMD *);
int ex_file(SCR *, EXCMD *);
int ex_filter(SCR *, EXCMD *, MARK *, MARK *, MARK *, char *, enum filtertype);
int ex_global(SCR *, EXCMD *);
int ex_v(SCR *, EXCMD *);
int ex_g_insdel(SCR *, lnop_t, recno_t);
int ex_screen_copy(SCR *, SCR *);
int ex_screen_end(SCR *);
int ex_optchange(SCR *, int, char *, u_long *);
int ex_exrc(SCR *);
int ex_run_str(SCR *, char *, char *, size_t, int, int);
int ex_join(SCR *, EXCMD *);
int ex_map(SCR *, EXCMD *);
int ex_unmap(SCR *, EXCMD *);
int ex_mark(SCR *, EXCMD *);
int ex_mkexrc(SCR *, EXCMD *);
int ex_copy(SCR *, EXCMD *);
int ex_move(SCR *, EXCMD *);
int ex_open(SCR *, EXCMD *);
int ex_preserve(SCR *, EXCMD *);
int ex_recover(SCR *, EXCMD *);
int ex_list(SCR *, EXCMD *);
int ex_number(SCR *, EXCMD *);
int ex_pr(SCR *, EXCMD *);
int ex_print(SCR *, EXCMD *, MARK *, MARK *, u_int32_t);
int ex_ldisplay(SCR *, const char *, size_t, size_t, u_int);
int ex_scprint(SCR *, MARK *, MARK *);
int ex_printf(SCR *, const char *, ...);
int ex_puts(SCR *, const char *);
int ex_fflush(SCR *sp);
int ex_put(SCR *, EXCMD *);
int ex_quit(SCR *, EXCMD *);
int ex_read(SCR *, EXCMD *);
int ex_readfp(SCR *, char *, FILE *, MARK *, recno_t *, int);
int ex_bg(SCR *, EXCMD *);
int ex_fg(SCR *, EXCMD *);
int ex_resize(SCR *, EXCMD *);
int ex_sdisplay(SCR *);
int ex_script(SCR *, EXCMD *);
int sscr_exec(SCR *, recno_t);
int sscr_check_input(SCR *);
int sscr_input(SCR *);
int sscr_end(SCR *);
int ex_set(SCR *, EXCMD *);
int ex_shell(SCR *, EXCMD *);
int ex_exec_proc(SCR *, EXCMD *, char *, const char *, int);
int proc_wait(SCR *, pid_t, const char *, int, int);
int ex_shiftl(SCR *, EXCMD *);
int ex_shiftr(SCR *, EXCMD *);
int ex_source(SCR *, EXCMD *);
int ex_sourcefd(SCR *, EXCMD *, int);
int ex_stop(SCR *, EXCMD *);
int ex_s(SCR *, EXCMD *);
int ex_subagain(SCR *, EXCMD *);
int ex_subtilde(SCR *, EXCMD *);
int re_compile(SCR *, char *, size_t, char **, size_t *, regex_t *, u_int);
void re_error(SCR *, int, regex_t *);
int ex_tag_first(SCR *, char *);
int ex_tag_push(SCR *, EXCMD *);
int ex_tag_next(SCR *, EXCMD *);
int ex_tag_prev(SCR *, EXCMD *);
int ex_tag_nswitch(SCR *, TAG *, int);
int ex_tag_Nswitch(SCR *, TAG *, int);
int ex_tag_pop(SCR *, EXCMD *);
int ex_tag_top(SCR *, EXCMD *);
int ex_tag_display(SCR *);
int ex_tag_copy(SCR *, SCR *);
int tagq_free(SCR *, TAGQ *);
void tag_msg(SCR *, tagmsg_t, char *);
int ex_tagf_alloc(SCR *, char *);
int ex_tag_free(SCR *);
int ex_txt(SCR *, TEXTH *, CHAR_T, u_int32_t);
int ex_undo(SCR *, EXCMD *);
int ex_help(SCR *, EXCMD *);
int ex_usage(SCR *, EXCMD *);
int ex_viusage(SCR *, EXCMD *);
void ex_cinit(EXCMD *, int, int, recno_t, recno_t, int, ARGS **);
void ex_cadd(EXCMD *, ARGS *, char *, size_t);
int ex_getline(SCR *, FILE *, size_t *);
int ex_ncheck(SCR *, int);
int ex_init(SCR *);
void ex_emsg(SCR *, char *, exm_t);
int ex_version(SCR *, EXCMD *);
int ex_visual(SCR *, EXCMD *);
int ex_wn(SCR *, EXCMD *);
int ex_wq(SCR *, EXCMD *);
int ex_write(SCR *, EXCMD *);
int ex_xit(SCR *, EXCMD *);
int ex_writefp(SCR *, char *, FILE *, MARK *, MARK *, u_long *, u_long *, int);
int ex_yank(SCR *, EXCMD *);
int ex_z(SCR *, EXCMD *);
@


1.15
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d103 1
a103 1
int ex_txt(SCR *, TEXTH *, char, u_int32_t);
@


1.14
log
@Remove ARG_CHAR_T, a relic from when the code was written K&R style.

ok millert@@ schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.13 2015/11/19 07:53:31 bentley Exp $	*/
d103 1
a103 1
int ex_txt(SCR *, TEXTH *, CHAR_T, u_int32_t);
@


1.13
log
@Remove cscope support in vi.

It makes no sense to keep support for a non-base tool in base, especially
for a feature that few if any people use.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.12 2014/11/20 08:50:53 bentley Exp $	*/
d103 1
a103 1
int ex_txt(SCR *, TEXTH *, ARG_CHAR_T, u_int32_t);
@


1.12
log
@Remove the vi perl api.

There have been various build errors for coming on two years now.
It doesn't work and nobody has expressed any interest in saving it.

From natano; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.11 2014/11/14 20:26:13 tedu Exp $	*/
a28 3
int ex_cscope(SCR *, EXCMD *);
int cscope_display(SCR *);
int cscope_search(SCR *, TAGQ *, TAG *);
@


1.11
log
@from natano:
The 'tcl' command in vi does nothing, except to print the message
"Vi was not loaded with a Tcl interpreter". Printing the standard
message for unknown commands would be equally descriptive with the
benefit of reducing code size.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.10 2013/05/03 20:43:25 kili Exp $	*/
a53 1
int ex_perl(SCR*, EXCMD *);
@


1.10
log
@Use open(2) / fstat(2) instead of stat(2) / open(2) for checking
proper permissions of "local" .exrc or .nexrc files.

With some hints and fixes from deraadt@@ and tobias@@.

ok millert@@ tobias@@

(more tweaks suggested by millert@@ and some cleanup will be done
in separate diffs)
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.9 2009/06/10 14:03:18 millert Exp $	*/
a106 1
int ex_tcl(SCR*, EXCMD *);
@


1.9
log
@Use poll() instead of select().  The sscr_check_input() bit is
adapted from nvi 1.81.  Tested by several people during the hackathon.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.8 2002/06/12 06:07:17 mpech Exp $	*/
d86 1
@


1.8
log
@a real pid_t cleanup.

espie@@ ok for make/,
deraadt@@ one extra eye,
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.7 2002/02/17 19:42:34 millert Exp $	*/
d76 1
@


1.7
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.6 2002/02/16 21:27:58 millert Exp $	*/
d81 1
a81 1
int proc_wait(SCR *, long, const char *, int, int);
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ex_extern.h,v 1.5 2001/01/29 01:58:47 niklas Exp $	*/
d37 1
a37 2
int ex_filter __P((SCR *, 
   EXCMD *, MARK *, MARK *, MARK *, char *, enum filtertype));
d89 1
a89 2
int re_compile __P((SCR *,
    char *, size_t, char **, size_t *, regex_t *, u_int));
d111 1
a111 2
void ex_cinit __P((EXCMD *,
   int, int, recno_t, recno_t, int, ARGS **));
d123 1
a123 2
int ex_writefp __P((SCR *,
   char *, FILE *, MARK *, MARK *, u_long *, u_long *, int));
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 5
a7 5
int ex __P((SCR **));
int ex_cmd __P((SCR *));
int ex_range __P((SCR *, EXCMD *, int *));
int ex_is_abbrev __P((char *, size_t));
int ex_is_unmap __P((char *, size_t));
d9 28
a36 28
   __P((SCR *, EXCMDLIST const *, enum badaddr, enum nresult));
int ex_abbr __P((SCR *, EXCMD *));
int ex_unabbr __P((SCR *, EXCMD *));
int ex_append __P((SCR *, EXCMD *));
int ex_change __P((SCR *, EXCMD *));
int ex_insert __P((SCR *, EXCMD *));
int ex_next __P((SCR *, EXCMD *));
int ex_prev __P((SCR *, EXCMD *));
int ex_rew __P((SCR *, EXCMD *));
int ex_args __P((SCR *, EXCMD *));
char **ex_buildargv __P((SCR *, EXCMD *, char *));
int argv_init __P((SCR *, EXCMD *));
int argv_exp0 __P((SCR *, EXCMD *, char *, size_t));
int argv_exp1 __P((SCR *, EXCMD *, char *, size_t, int));
int argv_exp2 __P((SCR *, EXCMD *, char *, size_t));
int argv_exp3 __P((SCR *, EXCMD *, char *, size_t));
int argv_free __P((SCR *));
int ex_at __P((SCR *, EXCMD *));
int ex_bang __P((SCR *, EXCMD *));
int ex_cd __P((SCR *, EXCMD *));
int ex_cscope __P((SCR *, EXCMD *));
int cscope_display __P((SCR *));
int cscope_search __P((SCR *, TAGQ *, TAG *));
int ex_delete __P((SCR *, EXCMD *));
int ex_display __P((SCR *, EXCMD *));
int ex_edit __P((SCR *, EXCMD *));
int ex_equal __P((SCR *, EXCMD *));
int ex_file __P((SCR *, EXCMD *));
d39 51
a89 51
int ex_global __P((SCR *, EXCMD *));
int ex_v __P((SCR *, EXCMD *));
int ex_g_insdel __P((SCR *, lnop_t, recno_t));
int ex_screen_copy __P((SCR *, SCR *));
int ex_screen_end __P((SCR *));
int ex_optchange __P((SCR *, int, char *, u_long *));
int ex_exrc __P((SCR *));
int ex_run_str __P((SCR *, char *, char *, size_t, int, int));
int ex_join __P((SCR *, EXCMD *));
int ex_map __P((SCR *, EXCMD *));
int ex_unmap __P((SCR *, EXCMD *));
int ex_mark __P((SCR *, EXCMD *));
int ex_mkexrc __P((SCR *, EXCMD *));
int ex_copy __P((SCR *, EXCMD *));
int ex_move __P((SCR *, EXCMD *));
int ex_open __P((SCR *, EXCMD *));
int ex_perl __P((SCR*, EXCMD *));
int ex_preserve __P((SCR *, EXCMD *));
int ex_recover __P((SCR *, EXCMD *));
int ex_list __P((SCR *, EXCMD *));
int ex_number __P((SCR *, EXCMD *));
int ex_pr __P((SCR *, EXCMD *));
int ex_print __P((SCR *, EXCMD *, MARK *, MARK *, u_int32_t));
int ex_ldisplay __P((SCR *, const char *, size_t, size_t, u_int));
int ex_scprint __P((SCR *, MARK *, MARK *));
int ex_printf __P((SCR *, const char *, ...));
int ex_puts __P((SCR *, const char *));
int ex_fflush __P((SCR *sp));
int ex_put __P((SCR *, EXCMD *));
int ex_quit __P((SCR *, EXCMD *));
int ex_read __P((SCR *, EXCMD *));
int ex_readfp __P((SCR *, char *, FILE *, MARK *, recno_t *, int));
int ex_bg __P((SCR *, EXCMD *));
int ex_fg __P((SCR *, EXCMD *));
int ex_resize __P((SCR *, EXCMD *));
int ex_sdisplay __P((SCR *));
int ex_script __P((SCR *, EXCMD *));
int sscr_exec __P((SCR *, recno_t));
int sscr_input __P((SCR *));
int sscr_end __P((SCR *));
int ex_set __P((SCR *, EXCMD *));
int ex_shell __P((SCR *, EXCMD *));
int ex_exec_proc __P((SCR *, EXCMD *, char *, const char *, int));
int proc_wait __P((SCR *, long, const char *, int, int));
int ex_shiftl __P((SCR *, EXCMD *));
int ex_shiftr __P((SCR *, EXCMD *));
int ex_source __P((SCR *, EXCMD *));
int ex_stop __P((SCR *, EXCMD *));
int ex_s __P((SCR *, EXCMD *));
int ex_subagain __P((SCR *, EXCMD *));
int ex_subtilde __P((SCR *, EXCMD *));
d92 21
a112 21
void re_error __P((SCR *, int, regex_t *));
int ex_tag_first __P((SCR *, char *));
int ex_tag_push __P((SCR *, EXCMD *));
int ex_tag_next __P((SCR *, EXCMD *));
int ex_tag_prev __P((SCR *, EXCMD *));
int ex_tag_nswitch __P((SCR *, TAG *, int));
int ex_tag_Nswitch __P((SCR *, TAG *, int));
int ex_tag_pop __P((SCR *, EXCMD *));
int ex_tag_top __P((SCR *, EXCMD *));
int ex_tag_display __P((SCR *));
int ex_tag_copy __P((SCR *, SCR *));
int tagq_free __P((SCR *, TAGQ *));
void tag_msg __P((SCR *, tagmsg_t, char *));
int ex_tagf_alloc __P((SCR *, char *));
int ex_tag_free __P((SCR *));
int ex_tcl __P((SCR*, EXCMD *));
int ex_txt __P((SCR *, TEXTH *, ARG_CHAR_T, u_int32_t));
int ex_undo __P((SCR *, EXCMD *));
int ex_help __P((SCR *, EXCMD *));
int ex_usage __P((SCR *, EXCMD *));
int ex_viusage __P((SCR *, EXCMD *));
d115 11
a125 11
void ex_cadd __P((EXCMD *, ARGS *, char *, size_t));
int ex_getline __P((SCR *, FILE *, size_t *));
int ex_ncheck __P((SCR *, int));
int ex_init __P((SCR *));
void ex_emsg __P((SCR *, char *, exm_t));
int ex_version __P((SCR *, EXCMD *));
int ex_visual __P((SCR *, EXCMD *));
int ex_wn __P((SCR *, EXCMD *));
int ex_wq __P((SCR *, EXCMD *));
int ex_write __P((SCR *, EXCMD *));
int ex_xit __P((SCR *, EXCMD *));
d128 2
a129 2
int ex_yank __P((SCR *, EXCMD *));
int ex_z __P((SCR *, EXCMD *));
@


1.4
log
@nvi 1.74
@
text
@d1 2
@


1.3
log
@nvi 1.73
@
text
@a26 2
int ex_cdalloc __P((SCR *, char *));
int ex_cdfree __P((SCR *));
@


1.2
log
@bring vi/ex up to 1.71
@
text
@a55 1
int ex_perldo __P((SCR*, EXCMD *));
@


1.1
log
@new vi
@
text
@d92 1
a92 1
    char *, char **, size_t *, regex_t *, u_int));
@
