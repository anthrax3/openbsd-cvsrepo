head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.34
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.30
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.28
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.26
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.24
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.22
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.20
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.01.06.22.28.52;	author millert;	state Exp;
branches;
next	1.7;
commitid	adBvXLg05bJxz6yx;

1.7
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.6;
commitid	06bi6U3x4gFFf2G1;

1.6
date	2009.10.27.23.59.48;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.29.01.58.53;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.24.16.16.07;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.37.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove the numeric identifiers at the beginning of the messages
which used to be used as the message number to lookup in the
catalog.  From Martijn van Duren
@
text
@/*	$OpenBSD: v_util.c,v 1.7 2014/11/12 04:28:41 bentley Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/time.h>

#include <bitstring.h>
#include <ctype.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "../common/common.h"
#include "vi.h"

/*
 * v_eof --
 *	Vi end-of-file error.
 *
 * PUBLIC: void v_eof(SCR *, MARK *);
 */
void
v_eof(SCR *sp, MARK *mp)
{
	recno_t lno;

	if (mp == NULL)
		v_emsg(sp, NULL, VIM_EOF);
	else {
		if (db_last(sp, &lno))
			return;
		if (mp->lno >= lno)
			v_emsg(sp, NULL, VIM_EOF);
		else
			msgq(sp, M_BERR, "Movement past the end-of-file");
	}
}

/*
 * v_eol --
 *	Vi end-of-line error.
 *
 * PUBLIC: void v_eol(SCR *, MARK *);
 */
void
v_eol(SCR *sp, MARK *mp)
{
	size_t len;

	if (mp == NULL)
		v_emsg(sp, NULL, VIM_EOL);
	else {
		if (db_get(sp, mp->lno, DBG_FATAL, NULL, &len))
			return;
		if (mp->cno == len - 1)
			v_emsg(sp, NULL, VIM_EOL);
		else
			msgq(sp, M_BERR, "Movement past the end-of-line");
	}
}

/*
 * v_nomove --
 *	Vi no cursor movement error.
 *
 * PUBLIC: void v_nomove(SCR *);
 */
void
v_nomove(SCR *sp)
{
	msgq(sp, M_BERR, "No cursor movement made");
}

/*
 * v_sof --
 *	Vi start-of-file error.
 *
 * PUBLIC: void v_sof(SCR *, MARK *);
 */
void
v_sof(SCR *sp, MARK *mp)
{
	if (mp == NULL || mp->lno == 1)
		msgq(sp, M_BERR, "Already at the beginning of the file");
	else
		msgq(sp, M_BERR, "Movement past the beginning of the file");
}

/*
 * v_sol --
 *	Vi start-of-line error.
 *
 * PUBLIC: void v_sol(SCR *);
 */
void
v_sol(SCR *sp)
{
	msgq(sp, M_BERR, "Already in the first column");
}

/*
 * v_isempty --
 *	Return if the line contains nothing but white-space characters.
 *
 * PUBLIC: int v_isempty(char *, size_t);
 */
int
v_isempty(char *p, size_t len)
{
	for (; len--; ++p)
		if (!isblank(*p))
			return (0);
	return (1);
}

/*
 * v_emsg --
 *	Display a few common vi messages.
 *
 * PUBLIC: void v_emsg(SCR *, char *, vim_t);
 */
void
v_emsg(SCR *sp, char *p, vim_t which)
{
	switch (which) {
	case VIM_COMBUF:
		msgq(sp, M_ERR,
		    "Buffers should be specified before the command");
		break;
	case VIM_EMPTY:
		msgq(sp, M_BERR, "The file is empty");
		break;
	case VIM_EOF:
		msgq(sp, M_BERR, "Already at end-of-file");
		break;
	case VIM_EOL:
		msgq(sp, M_BERR, "Already at end-of-line");
		break;
	case VIM_NOCOM:
	case VIM_NOCOM_B:
		msgq(sp,
		    which == VIM_NOCOM_B ? M_BERR : M_ERR,
		    "%s isn't a vi command", p);
		break;
	case VIM_WRESIZE:
		msgq(sp, M_ERR, "Window resize interrupted text input mode");
		break;
	case VIM_USAGE:
		msgq(sp, M_ERR, "Usage: %s", p);
		break;
	}
}
@


1.7
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: v_util.c,v 1.6 2009/10/27 23:59:48 deraadt Exp $	*/
d48 1
a48 1
			msgq(sp, M_BERR, "195|Movement past the end-of-file");
d71 1
a71 1
			msgq(sp, M_BERR, "196|Movement past the end-of-line");
d84 1
a84 1
	msgq(sp, M_BERR, "197|No cursor movement made");
d97 1
a97 1
		msgq(sp, M_BERR, "198|Already at the beginning of the file");
d99 1
a99 1
		msgq(sp, M_BERR, "199|Movement past the beginning of the file");
d111 1
a111 1
	msgq(sp, M_BERR, "200|Already in the first column");
d141 1
a141 1
		    "201|Buffers should be specified before the command");
d144 1
a144 1
		msgq(sp, M_BERR, "209|The file is empty");
d147 1
a147 1
		msgq(sp, M_BERR, "202|Already at end-of-file");
d150 1
a150 1
		msgq(sp, M_BERR, "203|Already at end-of-line");
d156 1
a156 1
		    "204|%s isn't a vi command", p);
d162 1
a162 1
		msgq(sp, M_ERR, "205|Usage: %s", p);
@


1.6
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: v_util.c,v 1.5 2002/02/16 21:27:58 millert Exp $	*/
d36 1
a36 3
v_eof(sp, mp)
	SCR *sp;
	MARK *mp;
d59 1
a59 3
v_eol(sp, mp)
	SCR *sp;
	MARK *mp;
d82 1
a82 2
v_nomove(sp)
	SCR *sp;
d94 1
a94 3
v_sof(sp, mp)
	SCR *sp;
	MARK *mp;
d109 1
a109 2
v_sol(sp)
	SCR *sp;
d121 1
a121 3
v_isempty(p, len)
	char *p;
	size_t len;
d136 1
a136 4
v_emsg(sp, p, which)
	SCR *sp;
	char *p;
	vim_t which;
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: v_util.c,v 1.4 2001/01/29 01:58:53 niklas Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)v_util.c	10.11 (Berkeley) 6/30/96";
#endif /* not lint */
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
a37 1
 * PUBLIC: void v_eof __P((SCR *, MARK *));
d62 1
a62 1
 * PUBLIC: void v_eol __P((SCR *, MARK *));
d87 1
a87 1
 * PUBLIC: void v_nomove __P((SCR *));
d100 1
a100 1
 * PUBLIC: void v_sof __P((SCR *, MARK *));
d117 1
a117 1
 * PUBLIC: void v_sol __P((SCR *));
d130 1
a130 1
 * PUBLIC: int v_isempty __P((char *, size_t));
d147 1
a147 1
 * PUBLIC: void v_emsg __P((SCR *, char *, vim_t));
@


1.3
log
@bring vi/ex up to 1.71
@
text
@d1 2
@


1.2
log
@new vi
@
text
@d13 1
a13 1
static const char sccsid[] = "@@(#)v_util.c	10.10 (Berkeley) 3/6/96";
d172 3
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)v_util.c	8.12 (Berkeley) 8/17/94";
a22 1
#include <signal.h>
a25 1
#include <termios.h>
d28 1
a28 4
#include "compat.h"
#include <db.h>
#include <regex.h>

a29 1
#include "vcmd.h"
d34 2
d38 1
a38 1
v_eof(sp, ep, mp)
a39 1
	EXF *ep;
d45 1
a45 1
		msgq(sp, M_BERR, "Already at end-of-file");
d47 1
a47 1
		if (file_lline(sp, ep, &lno))
d50 1
a50 1
			msgq(sp, M_BERR, "Already at end-of-file");
d52 1
a52 1
			msgq(sp, M_BERR, "Movement past the end-of-file");
d59 2
d63 1
a63 1
v_eol(sp, ep, mp)
a64 1
	EXF *ep;
d70 1
a70 1
		msgq(sp, M_BERR, "Already at end-of-line");
d72 1
a72 2
		if (file_gline(sp, ep, mp->lno, &len) == NULL) {
			GETLINE_ERR(sp, mp->lno);
a73 1
		}
d75 1
a75 1
			msgq(sp, M_BERR, "Already at end-of-line");
d77 1
a77 1
			msgq(sp, M_BERR, "Movement past the end-of-line");
d84 2
d91 1
a91 1
	msgq(sp, M_BERR, "No cursor movement made");
d97 2
d106 1
a106 1
		msgq(sp, M_BERR, "Already at the beginning of the file");
d108 1
a108 1
		msgq(sp, M_BERR, "Movement past the beginning of the file");
d114 2
d121 1
a121 1
	msgq(sp, M_BERR, "Already in the first column");
d127 2
d139 38
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
