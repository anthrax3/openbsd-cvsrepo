head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.34
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.30
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.28
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.26
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.24
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.22
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.20
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.18
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.27.09.18.12;	author martijn;	state Exp;
branches;
next	1.9;
commitid	01nAnartGL7onLD3;

1.9
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.8;
commitid	ruCZ2IKF0FB0ebCr;

1.8
date	2016.01.20.08.43.27;	author bentley;	state Exp;
branches;
next	1.7;
commitid	etzsUqpfZbRGvPEg;

1.7
date	2016.01.06.22.28.52;	author millert;	state Exp;
branches;
next	1.6;
commitid	adBvXLg05bJxz6yx;

1.6
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.5;
commitid	06bi6U3x4gFFf2G1;

1.5
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.58;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.29.01.58.50;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.36.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.47;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.47;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: v_ch.c,v 1.8 2016/01/20 08:43:27 bentley Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/time.h>

#include <bitstring.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>

#include "../common/common.h"
#include "vi.h"

static void notfound(SCR *, CHAR_T);
static void noprev(SCR *);

/*
 * v_chrepeat -- [count];
 *	Repeat the last F, f, T or t search.
 *
 * PUBLIC: int v_chrepeat(SCR *, VICMD *);
 */
int
v_chrepeat(SCR *sp, VICMD *vp)
{
	vp->character = VIP(sp)->lastckey;

	switch (VIP(sp)->csearchdir) {
	case CNOTSET:
		noprev(sp);
		return (1);
	case FSEARCH:
		return (v_chF(sp, vp));
	case fSEARCH:
		return (v_chf(sp, vp));
	case TSEARCH:
		return (v_chT(sp, vp));
	case tSEARCH:
		return (v_cht(sp, vp));
	default:
		abort();
	}
	/* NOTREACHED */
}

/*
 * v_chrrepeat -- [count],
 *	Repeat the last F, f, T or t search in the reverse direction.
 *
 * PUBLIC: int v_chrrepeat(SCR *, VICMD *);
 */
int
v_chrrepeat(SCR *sp, VICMD *vp)
{
	cdir_t savedir;
	int rval;

	vp->character = VIP(sp)->lastckey;
	savedir = VIP(sp)->csearchdir;

	switch (VIP(sp)->csearchdir) {
	case CNOTSET:
		noprev(sp);
		return (1);
	case FSEARCH:
		rval = v_chf(sp, vp);
		break;
	case fSEARCH:
		rval = v_chF(sp, vp);
		break;
	case TSEARCH:
		rval = v_cht(sp, vp);
		break;
	case tSEARCH:
		rval = v_chT(sp, vp);
		break;
	default:
		abort();
	}
	VIP(sp)->csearchdir = savedir;
	return (rval);
}

/*
 * v_cht -- [count]tc
 *	Search forward in the line for the character before the next
 *	occurrence of the specified character.
 *
 * PUBLIC: int v_cht(SCR *, VICMD *);
 */
int
v_cht(SCR *sp, VICMD *vp)
{
	if (v_chf(sp, vp))
		return (1);

	/*
	 * v_chf places the cursor on the character, where the 't'
	 * command wants it to its left.  We know this is safe since
	 * we had to move right for v_chf() to have succeeded.
	 */
	--vp->m_stop.cno;

	/*
	 * Make any necessary correction to the motion decision made
	 * by the v_chf routine.
	 */
	if (!ISMOTION(vp))
		vp->m_final = vp->m_stop;

	VIP(sp)->csearchdir = tSEARCH;
	return (0);
}

/*
 * v_chf -- [count]fc
 *	Search forward in the line for the next occurrence of the
 *	specified character.
 *
 * PUBLIC: int v_chf(SCR *, VICMD *);
 */
int
v_chf(SCR *sp, VICMD *vp)
{
	size_t len;
	u_long cnt;
	int isempty, key;
	char *endp, *p, *startp;

	/*
	 * !!!
	 * If it's a dot command, it doesn't reset the key for which we're
	 * searching, e.g. in "df1|f2|.|;", the ';' searches for a '2'.
	 */
	key = vp->character;
	if (!F_ISSET(vp, VC_ISDOT))
		VIP(sp)->lastckey = key;
	VIP(sp)->csearchdir = fSEARCH;

	if (db_eget(sp, vp->m_start.lno, &p, &len, &isempty)) {
		if (isempty)
			goto empty;
		return (1);
	}

	if (len == 0) {
empty:		notfound(sp, key);
		return (1);
	}

	endp = (startp = p) + len;
	p += vp->m_start.cno;
	for (cnt = F_ISSET(vp, VC_C1SET) ? vp->count : 1; cnt--;) {
		while (++p < endp && *p != key);
		if (p == endp) {
			notfound(sp, key);
			return (1);
		}
	}

	vp->m_stop.cno = p - startp;

	/*
	 * Non-motion commands move to the end of the range.
	 * Delete and yank stay at the start, ignore others.
	 */
	vp->m_final = ISMOTION(vp) ? vp->m_start : vp->m_stop;
	return (0);
}

/*
 * v_chT -- [count]Tc
 *	Search backward in the line for the character after the next
 *	occurrence of the specified character.
 *
 * PUBLIC: int v_chT(SCR *, VICMD *);
 */
int
v_chT(SCR *sp, VICMD *vp)
{
	if (v_chF(sp, vp))
		return (1);

	/*
	 * v_chF places the cursor on the character, where the 'T'
	 * command wants it to its right.  We know this is safe since
	 * we had to move left for v_chF() to have succeeded.
	 */
	++vp->m_stop.cno;
	vp->m_final = vp->m_stop;

	VIP(sp)->csearchdir = TSEARCH;
	return (0);
}

/*
 * v_chF -- [count]Fc
 *	Search backward in the line for the next occurrence of the
 *	specified character.
 *
 * PUBLIC: int v_chF(SCR *, VICMD *);
 */
int
v_chF(SCR *sp, VICMD *vp)
{
	size_t len;
	u_long cnt;
	int isempty, key;
	char *endp, *p;

	/*
	 * !!!
	 * If it's a dot command, it doesn't reset the key for which
	 * we're searching, e.g. in "df1|f2|.|;", the ';' searches
	 * for a '2'.
	 */
	key = vp->character;
	if (!F_ISSET(vp, VC_ISDOT))
		VIP(sp)->lastckey = key;
	VIP(sp)->csearchdir = FSEARCH;

	if (db_eget(sp, vp->m_start.lno, &p, &len, &isempty)) {
		if (isempty)
			goto empty;
		return (1);
	}

	if (len == 0) {
empty:		notfound(sp, key);
		return (1);
	}

	endp = p - 1;
	p += vp->m_start.cno;
	for (cnt = F_ISSET(vp, VC_C1SET) ? vp->count : 1; cnt--;) {
		while (--p > endp && *p != key);
		if (p == endp) {
			notfound(sp, key);
			return (1);
		}
	}

	vp->m_stop.cno = (p - endp) - 1;

	/*
	 * All commands move to the end of the range.  Motion commands
	 * adjust the starting point to the character before the current
	 * one.
	 */
	vp->m_final = vp->m_stop;
	if (ISMOTION(vp))
		--vp->m_start.cno;
	return (0);
}

static void
noprev(SCR *sp)
{
	msgq(sp, M_BERR, "No previous F, f, T or t search");
}

static void
notfound(SCR *sp, CHAR_T ch)
{
	msgq(sp, M_BERR, "%s not found", KEY_NAME(sp, ch));
}
@


1.9
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d26 1
a26 1
static void notfound(SCR *, char);
d275 1
a275 1
notfound(SCR *sp, char ch)
@


1.8
log
@Remove ARG_CHAR_T, a relic from when the code was written K&R style.

ok millert@@ schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: v_ch.c,v 1.7 2016/01/06 22:28:52 millert Exp $	*/
d26 1
a26 1
static void notfound(SCR *, CHAR_T);
d275 1
a275 1
notfound(SCR *sp, CHAR_T ch)
@


1.7
log
@Remove the numeric identifiers at the beginning of the messages
which used to be used as the message number to lookup in the
catalog.  From Martijn van Duren
@
text
@d1 1
a1 1
/*	$OpenBSD: v_ch.c,v 1.6 2014/11/12 04:28:41 bentley Exp $	*/
d26 1
a26 1
static void notfound(SCR *, ARG_CHAR_T);
d275 1
a275 1
notfound(SCR *sp, ARG_CHAR_T ch)
@


1.6
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: v_ch.c,v 1.5 2009/10/27 23:59:47 deraadt Exp $	*/
d271 1
a271 1
	msgq(sp, M_BERR, "178|No previous F, f, T or t search");
d277 1
a277 1
	msgq(sp, M_BERR, "179|%s not found", KEY_NAME(sp, ch));
@


1.5
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: v_ch.c,v 1.4 2002/02/16 21:27:58 millert Exp $	*/
d36 1
a36 3
v_chrepeat(sp, vp)
	SCR *sp;
	VICMD *vp;
d65 1
a65 3
v_chrrepeat(sp, vp)
	SCR *sp;
	VICMD *vp;
d104 1
a104 3
v_cht(sp, vp)
	SCR *sp;
	VICMD *vp;
d135 1
a135 3
v_chf(sp, vp)
	SCR *sp;
	VICMD *vp;
d191 1
a191 3
v_chT(sp, vp)
	SCR *sp;
	VICMD *vp;
d216 1
a216 3
v_chF(sp, vp)
	SCR *sp;
	VICMD *vp;
d269 1
a269 2
noprev(sp)
	SCR *sp;
d275 1
a275 3
notfound(sp, ch)
	SCR *sp;
	ARG_CHAR_T ch;
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: v_ch.c,v 1.3 2001/01/29 01:58:50 niklas Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)v_ch.c	10.8 (Berkeley) 3/6/96";
#endif /* not lint */
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 2
a31 2
static void notfound __P((SCR *, ARG_CHAR_T));
static void noprev __P((SCR *));
d37 1
a37 1
 * PUBLIC: int v_chrepeat __P((SCR *, VICMD *));
d68 1
a68 1
 * PUBLIC: int v_chrrepeat __P((SCR *, VICMD *));
d109 1
a109 1
 * PUBLIC: int v_cht __P((SCR *, VICMD *));
d142 1
a142 1
 * PUBLIC: int v_chf __P((SCR *, VICMD *));
d200 1
a200 1
 * PUBLIC: int v_chT __P((SCR *, VICMD *));
d227 1
a227 1
 * PUBLIC: int v_chF __P((SCR *, VICMD *));
@


1.2
log
@new vi
@
text
@d1 2
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)v_ch.c	8.15 (Berkeley) 8/17/94";
a21 1
#include <signal.h>
a23 5
#include <termios.h>

#include "compat.h"
#include <db.h>
#include <regex.h>
d25 1
a26 1
#include "vcmd.h"
d34 2
d38 1
a38 1
v_chrepeat(sp, ep, vp)
d40 1
a40 2
	EXF *ep;
	VICMDARG *vp;
d49 1
a49 1
		return (v_chF(sp, ep, vp));
d51 1
a51 1
		return (v_chf(sp, ep, vp));
d53 1
a53 1
		return (v_chT(sp, ep, vp));
d55 1
a55 1
		return (v_cht(sp, ep, vp));
d65 2
d69 1
a69 1
v_chrrepeat(sp, ep, vp)
d71 1
a71 2
	EXF *ep;
	VICMDARG *vp;
d73 1
a73 1
	enum cdirection savedir;
d84 1
a84 1
		rval = v_chf(sp, ep, vp);
d87 1
a87 1
		rval = v_chF(sp, ep, vp);
d90 1
a90 1
		rval = v_cht(sp, ep, vp);
d93 1
a93 1
		rval = v_chT(sp, ep, vp);
d106 2
d110 1
a110 1
v_cht(sp, ep, vp)
d112 1
a112 2
	EXF *ep;
	VICMDARG *vp;
d114 1
a114 1
	if (v_chf(sp, ep, vp))
d139 2
d143 1
a143 1
v_chf(sp, ep, vp)
d145 1
a145 2
	EXF *ep;
	VICMDARG *vp;
a147 1
	recno_t lno;
d149 1
a149 1
	int key;
d162 3
a164 8
	if ((p = file_gline(sp, ep, vp->m_start.lno, &len)) == NULL) {
		if (file_lline(sp, ep, &lno))
			return (1);
		if (lno == 0) {
			notfound(sp, key);
			return (1);
		}
		GETLINE_ERR(sp, vp->m_start.lno);
d169 1
a169 1
		notfound(sp, key);
d186 2
a187 2
	 * Non-motion commands move to the end of the range.  VC_D
	 * and VC_Y stay at the start.  Ignore VC_C and VC_DEF.
d197 2
d201 1
a201 1
v_chT(sp, ep, vp)
d203 1
a203 2
	EXF *ep;
	VICMDARG *vp;
d205 1
a205 1
	if (v_chF(sp, ep, vp))
d214 1
a214 11

	/*
	 * Make any necessary correction to the motion decision made
	 * by the v_chF routine.
	 *
	 * XXX
	 * If you change this, notice that v_chF changes vp->m_start
	 * AFTER setting vp->m_final.
	 */
	if (!F_ISSET(vp, VC_Y))
		vp->m_final = vp->m_stop;
d224 2
d228 1
a228 1
v_chF(sp, ep, vp)
d230 1
a230 2
	EXF *ep;
	VICMDARG *vp;
a231 1
	recno_t lno;
d234 1
a234 1
	int key;
d248 3
a250 8
	if ((p = file_gline(sp, ep, vp->m_start.lno, &len)) == NULL) {
		if (file_lline(sp, ep, &lno))
			return (1);
		if (lno == 0) {
			notfound(sp, key);
			return (1);
		}
		GETLINE_ERR(sp, vp->m_start.lno);
d255 1
a255 1
		notfound(sp, key);
d272 3
a274 4
	 * VC_D and non-motion commands move to the end of the range,
	 * VC_Y stays at the start.  Ignore VC_C and VC_DEF.  Motion
	 * commands adjust the starting point to the character before
	 * the current one.
d276 1
a276 1
	vp->m_final = F_ISSET(vp, VC_Y) ? vp->m_start : vp->m_stop;
d286 1
a286 1
	msgq(sp, M_BERR, "No previous F, f, T or t search");
d294 1
a294 1
	msgq(sp, M_BERR, "%s not found", KEY_NAME(sp, ch));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
