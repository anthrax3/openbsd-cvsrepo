head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.01.06.22.28.52;	author millert;	state Exp;
branches;
next	1.9;
commitid	adBvXLg05bJxz6yx;

1.9
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.8;
commitid	06bi6U3x4gFFf2G1;

1.8
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.08.21.05.40;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.58;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.01.58.49;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.07.21.02.06.27;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	96.08.16.17.58.44;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.36.41;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove the numeric identifiers at the beginning of the messages
which used to be used as the message number to lookup in the
catalog.  From Martijn van Duren
@
text
@/*	$OpenBSD: getc.c,v 1.9 2014/11/12 04:28:41 bentley Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/time.h>

#include <bitstring.h>
#include <ctype.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>

#include "../common/common.h"
#include "vi.h"

/*
 * Character stream routines --
 *	These routines return the file a character at a time.  There are two
 *	special cases.  First, the end of a line, end of a file, start of a
 *	file and empty lines are returned as special cases, and no character
 *	is returned.  Second, empty lines include lines that have only white
 *	space in them, because the vi search functions don't care about white
 *	space, and this makes it easier for them to be consistent.
 */

/*
 * cs_init --
 *	Initialize character stream routines.
 *
 * PUBLIC: int cs_init(SCR *, VCS *);
 */
int
cs_init(SCR *sp, VCS *csp)
{
	int isempty;

	if (db_eget(sp, csp->cs_lno, (char **) &csp->cs_bp, &csp->cs_len,
	    &isempty)) {
		if (isempty)
			msgq(sp, M_BERR, "Empty file");
		return (1);
	}
	if (csp->cs_len == 0 || v_isempty(csp->cs_bp, csp->cs_len)) {
		csp->cs_cno = 0;
		csp->cs_flags = CS_EMP;
	} else {
		csp->cs_flags = 0;
		csp->cs_ch = csp->cs_bp[csp->cs_cno];
	}
	return (0);
}

/*
 * cs_next --
 *	Retrieve the next character.
 *
 * PUBLIC: int cs_next(SCR *, VCS *);
 */
int
cs_next(SCR *sp, VCS *csp)
{
	char *p;

	switch (csp->cs_flags) {
	case CS_EMP:				/* EMP; get next line. */
	case CS_EOL:				/* EOL; get next line. */
		if (db_get(sp, ++csp->cs_lno, 0, &p, &csp->cs_len)) {
			--csp->cs_lno;
			csp->cs_flags = CS_EOF;
		} else {
			csp->cs_bp = p;
			if (csp->cs_len == 0 ||
			    v_isempty(csp->cs_bp, csp->cs_len)) {
				csp->cs_cno = 0;
				csp->cs_flags = CS_EMP;
			} else {
				csp->cs_flags = 0;
				csp->cs_ch = csp->cs_bp[csp->cs_cno = 0];
			}
		}
		break;
	case 0:
		if (csp->cs_cno == csp->cs_len - 1)
			csp->cs_flags = CS_EOL;
		else
			csp->cs_ch = csp->cs_bp[++csp->cs_cno];
		break;
	case CS_EOF:				/* EOF. */
		break;
	default:
		abort();
		/* NOTREACHED */
	}
	return (0);
}

/*
 * cs_fspace --
 *	If on a space, eat forward until something other than a
 *	whitespace character.
 *
 * XXX
 * Semantics of checking the current character were coded for the fword()
 * function -- once the other word routines are converted, they may have
 * to change.
 *
 * PUBLIC: int cs_fspace(SCR *, VCS *);
 */
int
cs_fspace(SCR *sp, VCS *csp)
{
	if (csp->cs_flags != 0 || !isblank(csp->cs_ch))
		return (0);
	for (;;) {
		if (cs_next(sp, csp))
			return (1);
		if (csp->cs_flags != 0 || !isblank(csp->cs_ch))
			break;
	}
	return (0);
}

/*
 * cs_fblank --
 *	Eat forward to the next non-whitespace character.
 *
 * PUBLIC: int cs_fblank(SCR *, VCS *);
 */
int
cs_fblank(SCR *sp, VCS *csp)
{
	for (;;) {
		if (cs_next(sp, csp))
			return (1);
		if (csp->cs_flags == CS_EOL || csp->cs_flags == CS_EMP ||
		    (csp->cs_flags == 0 && isblank(csp->cs_ch)))
			continue;
		break;
	}
	return (0);
}

/*
 * cs_prev --
 *	Retrieve the previous character.
 *
 * PUBLIC: int cs_prev(SCR *, VCS *);
 */
int
cs_prev(SCR *sp, VCS *csp)
{
	switch (csp->cs_flags) {
	case CS_EMP:				/* EMP; get previous line. */
	case CS_EOL:				/* EOL; get previous line. */
		if (csp->cs_lno == 1) {		/* SOF. */
			csp->cs_flags = CS_SOF;
			break;
		}
		if (db_get(sp,			/* The line should exist. */
		    --csp->cs_lno, DBG_FATAL, (char **) &csp->cs_bp,
		    &csp->cs_len)) {
			++csp->cs_lno;
			return (1);
		}
		if (csp->cs_len == 0 || v_isempty(csp->cs_bp, csp->cs_len)) {
			csp->cs_cno = 0;
			csp->cs_flags = CS_EMP;
		} else {
			csp->cs_flags = 0;
			csp->cs_cno = csp->cs_len - 1;
			csp->cs_ch = csp->cs_bp[csp->cs_cno];
		}
		break;
	case CS_EOF:				/* EOF: get previous char. */
	case 0:
		if (csp->cs_cno == 0)
			if (csp->cs_lno == 1)
				csp->cs_flags = CS_SOF;
			else
				csp->cs_flags = CS_EOL;
		else
			csp->cs_ch = csp->cs_bp[--csp->cs_cno];
		break;
	case CS_SOF:				/* SOF. */
		break;
	default:
		abort();
		/* NOTREACHED */
	}
	return (0);
}

/*
 * cs_bblank --
 *	Eat backward to the next non-whitespace character.
 *
 * PUBLIC: int cs_bblank(SCR *, VCS *);
 */
int
cs_bblank(SCR *sp, VCS *csp)
{
	for (;;) {
		if (cs_prev(sp, csp))
			return (1);
		if (csp->cs_flags == CS_EOL || csp->cs_flags == CS_EMP ||
		    (csp->cs_flags == 0 && isblank(csp->cs_ch)))
			continue;
		break;
	}
	return (0);
}
@


1.9
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getc.c,v 1.8 2009/10/27 23:59:47 deraadt Exp $	*/
d51 1
a51 1
			msgq(sp, M_BERR, "177|Empty file");
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: getc.c,v 1.7 2006/01/08 21:05:40 miod Exp $	*/
d44 1
a44 3
cs_init(sp, csp)
	SCR *sp;
	VCS *csp;
d71 1
a71 3
cs_next(sp, csp)
	SCR *sp;
	VCS *csp;
d121 1
a121 3
cs_fspace(sp, csp)
	SCR *sp;
	VCS *csp;
d141 1
a141 3
cs_fblank(sp, csp)
	SCR *sp;
	VCS *csp;
d161 1
a161 3
cs_prev(sp, csp)
	SCR *sp;
	VCS *csp;
d211 1
a211 3
cs_bblank(sp, csp)
	SCR *sp;
	VCS *csp;
@


1.7
log
@Explicit braces around macro fields and logical operations, gets rid of 148
warnings, no functional change.

From Ray Lai.
@
text
@d1 1
a1 1
/*	$OpenBSD: getc.c,v 1.6 2002/02/16 21:27:58 millert Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)getc.c	10.10 (Berkeley) 3/6/96";
#endif /* not lint */
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: getc.c,v 1.5 2001/01/29 01:58:49 niklas Exp $	*/
d159 1
a159 1
		    csp->cs_flags == 0 && isblank(csp->cs_ch))
d233 1
a233 1
		    csp->cs_flags == 0 && isblank(csp->cs_ch))
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
 * PUBLIC: int cs_init __P((SCR *, VCS *));
d74 1
a74 1
 * PUBLIC: int cs_next __P((SCR *, VCS *));
d126 1
a126 1
 * PUBLIC: int cs_fspace __P((SCR *, VCS *));
d148 1
a148 1
 * PUBLIC: int cs_fblank __P((SCR *, VCS *));
d170 1
a170 1
 * PUBLIC: int cs_prev __P((SCR *, VCS *));
d222 1
a222 1
 * PUBLIC: int cs_bblank __P((SCR *, VCS *));
@


1.4
log
@Get rid of compilation warnings.
@
text
@d1 2
@


1.3
log
@nvi 1.73
@
text
@d52 2
a53 1
	if (db_eget(sp, csp->cs_lno, &csp->cs_bp, &csp->cs_len, &isempty)) {
d183 2
a184 1
		    --csp->cs_lno, DBG_FATAL, &csp->cs_bp, &csp->cs_len)) {
@


1.2
log
@new vi
@
text
@d52 1
a52 1
	if (db_eget(sp, csp->cs_lno, (char **)&csp->cs_bp, &csp->cs_len, &isempty)) {
d182 1
a182 1
		    --csp->cs_lno, DBG_FATAL, (char **)&csp->cs_bp, &csp->cs_len)) {
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)getc.c	8.11 (Berkeley) 8/17/94";
a22 1
#include <signal.h>
d24 1
a24 5
#include <termios.h>

#include "compat.h"
#include <db.h>
#include <regex.h>
d26 1
a27 1
#include "vcmd.h"
d42 2
d46 1
a46 1
cs_init(sp, ep, csp)
a47 1
	EXF *ep;
d50 1
a50 1
	recno_t lno;
d52 3
a54 8
	if ((csp->cs_bp =
	    file_gline(sp, ep, csp->cs_lno, &csp->cs_len)) == NULL) {
		if (file_lline(sp, ep, &lno))
			return (1);
		if (lno == 0)
			msgq(sp, M_BERR, "Empty file");
		else
			GETLINE_ERR(sp, csp->cs_lno);
d70 2
d74 1
a74 1
cs_next(sp, ep, csp)
a75 1
	EXF *ep;
d78 1
a78 1
	recno_t slno;
d83 2
a84 10
		slno = csp->cs_lno;		/* Save current line. */
		if ((csp->cs_bp =
		    file_gline(sp, ep, ++csp->cs_lno, &csp->cs_len)) == NULL) {
			csp->cs_lno = slno;
			if (file_lline(sp, ep, &slno))
				return (1);
			if (slno > csp->cs_lno) {
				GETLINE_ERR(sp, csp->cs_lno);
				return (1);
			}
a85 4
		} else if (csp->cs_len == 0 ||
		    v_isempty(csp->cs_bp, csp->cs_len)) {
			csp->cs_cno = 0;
			csp->cs_flags = CS_EMP;
d87 9
a95 2
			csp->cs_flags = 0;
			csp->cs_ch = csp->cs_bp[csp->cs_cno = 0];
d122 2
d126 1
a126 1
cs_fspace(sp, ep, csp)
a127 1
	EXF *ep;
d133 1
a133 1
		if (cs_next(sp, ep, csp))
d144 2
d148 1
a148 1
cs_fblank(sp, ep, csp)
a149 1
	EXF *ep;
d153 1
a153 1
		if (cs_next(sp, ep, csp))
d166 2
d170 1
a170 1
cs_prev(sp, ep, csp)
a171 1
	EXF *ep;
a173 2
	recno_t slno;

d181 3
a183 5
		slno = csp->cs_lno;		/* Save current line. */
		if ((csp->cs_bp =		/* Line should exist. */
		    file_gline(sp, ep, --csp->cs_lno, &csp->cs_len)) == NULL) {
			GETLINE_ERR(sp, csp->cs_lno);
			csp->cs_lno = slno;
d195 1
d217 2
d221 1
a221 1
cs_bblank(sp, ep, csp)
a222 1
	EXF *ep;
d226 1
a226 1
		if (cs_prev(sp, ep, csp))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
