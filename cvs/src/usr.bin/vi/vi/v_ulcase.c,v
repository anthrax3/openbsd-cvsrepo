head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.34
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.30
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.28
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.26
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.24
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.22
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.20
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.18
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.27.09.18.12;	author martijn;	state Exp;
branches;
next	1.9;
commitid	01nAnartGL7onLD3;

1.9
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.8;
commitid	ruCZ2IKF0FB0ebCr;

1.8
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.7;
commitid	06bi6U3x4gFFf2G1;

1.7
date	2009.10.27.23.59.48;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.58;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.01.58.53;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.07.21.02.06.29;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	96.08.16.17.58.46;	author michaels;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.36.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.46.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.46.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: v_ulcase.c,v 1.8 2014/11/12 04:28:41 bentley Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/time.h>

#include <bitstring.h>
#include <ctype.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "../common/common.h"
#include "vi.h"

static int ulcase(SCR *, recno_t, CHAR_T *, size_t, size_t, size_t);

/*
 * v_ulcase -- [count]~
 *	Toggle upper & lower case letters.
 *
 * !!!
 * Historic vi didn't permit ~ to cross newline boundaries.  I can
 * think of no reason why it shouldn't, which at least lets the user
 * auto-repeat through a paragraph.
 *
 * !!!
 * In historic vi, the count was ignored.  It would have been better
 * if there had been an associated motion, but it's too late to make
 * that the default now.
 *
 * PUBLIC: int v_ulcase(SCR *, VICMD *);
 */
int
v_ulcase(SCR *sp, VICMD *vp)
{
	recno_t lno;
	size_t cno, lcnt, len;
	u_long cnt;
	char *p;

	lno = vp->m_start.lno;
	cno = vp->m_start.cno;

	for (cnt = F_ISSET(vp, VC_C1SET) ? vp->count : 1; cnt > 0; cno = 0) {
		/* SOF is an error, EOF is an infinite count sink. */
		if (db_get(sp, lno, 0, &p, &len)) {
			if (lno == 1) {
				v_emsg(sp, NULL, VIM_EMPTY);
				return (1);
			}
			--lno;
			break;
		}

		/* Empty lines decrement the count by one. */
		if (len == 0) {
			--cnt;
			vp->m_final.cno = 0;
			continue;
		}

		if (cno + cnt >= len) {
			lcnt = len - 1;
			cnt -= len - cno;

			vp->m_final.cno = len - 1;
		} else {
			lcnt = cno + cnt - 1;
			cnt = 0;

			vp->m_final.cno = lcnt + 1;
		}

		if (ulcase(sp, lno, p, len, cno, lcnt))
			return (1);

		if (cnt > 0)
			++lno;
	}

	vp->m_final.lno = lno;
	return (0);
}

/*
 * v_mulcase -- [count]~[count]motion
 *	Toggle upper & lower case letters over a range.
 *
 * PUBLIC: int v_mulcase(SCR *, VICMD *);
 */
int
v_mulcase(SCR *sp, VICMD *vp)
{
	CHAR_T *p;
	size_t len;
	recno_t lno;

	for (lno = vp->m_start.lno;;) {
		if (db_get(sp, lno, DBG_FATAL, (char **) &p, &len))
			return (1);
		if (len != 0 && ulcase(sp, lno, p, len,
		    lno == vp->m_start.lno ? vp->m_start.cno : 0,
		    !F_ISSET(vp, VM_LMODE) &&
		    lno == vp->m_stop.lno ? vp->m_stop.cno : len))
			return (1);

		if (++lno > vp->m_stop.lno)
			break;
	}

	/*
	 * XXX
	 * I didn't create a new motion command when I added motion semantics
	 * for ~.  While that's the correct way to do it, that choice would
	 * have required changes all over the vi directory for little gain.
	 * Instead, we pretend it's a yank command.  Note, this means that we
	 * follow the cursor motion rules for yank commands, but that seems
	 * reasonable to me.
	 */
	return (0);
}

/*
 * ulcase --
 *	Change part of a line's case.
 */
static int
ulcase(SCR *sp, recno_t lno, CHAR_T *lp, size_t len, size_t scno, size_t ecno)
{
	size_t blen;
	int change, rval;
	CHAR_T ch, *p, *t;
	char *bp;

	GET_SPACE_RET(sp, bp, blen, len);
	memmove(bp, lp, len);

	change = rval = 0;
	for (p = bp + scno, t = bp + ecno + 1; p < t; ++p) {
		ch = *(u_char *)p;
		if (islower(ch)) {
			*p = toupper(ch);
			change = 1;
		} else if (isupper(ch)) {
			*p = tolower(ch);
			change = 1;
		}
	}

	if (change && db_set(sp, lno, bp, len))
		rval = 1;

	FREE_SPACE(sp, bp, blen);
	return (rval);
}
@


1.9
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d29 1
a29 1
static int ulcase(SCR *, recno_t, char *, size_t, size_t, size_t);
d108 1
a108 1
	char *p;
d113 1
a113 1
		if (db_get(sp, lno, DBG_FATAL, &p, &len))
d142 1
a142 1
ulcase(SCR *sp, recno_t lno, char *lp, size_t len, size_t scno, size_t ecno)
d146 1
a146 1
	char ch, *p, *t;
@


1.8
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: v_ulcase.c,v 1.7 2009/10/27 23:59:48 deraadt Exp $	*/
d29 1
a29 1
static int ulcase(SCR *, recno_t, CHAR_T *, size_t, size_t, size_t);
d108 1
a108 1
	CHAR_T *p;
d113 1
a113 1
		if (db_get(sp, lno, DBG_FATAL, (char **) &p, &len))
d142 1
a142 1
ulcase(SCR *sp, recno_t lno, CHAR_T *lp, size_t len, size_t scno, size_t ecno)
d146 1
a146 1
	CHAR_T ch, *p, *t;
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: v_ulcase.c,v 1.6 2002/02/16 21:27:58 millert Exp $	*/
d48 1
a48 3
v_ulcase(sp, vp)
	SCR *sp;
	VICMD *vp;
d106 1
a106 3
v_mulcase(sp, vp)
	SCR *sp;
	VICMD *vp;
d142 1
a142 5
ulcase(sp, lno, lp, len, scno, ecno)
	SCR *sp;
	recno_t lno;
	CHAR_T *lp;
	size_t len, scno, ecno;
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: v_ulcase.c,v 1.5 2001/01/29 01:58:53 niklas Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)v_ulcase.c	10.7 (Berkeley) 3/6/96";
#endif /* not lint */
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 1
a33 1
static int ulcase __P((SCR *, recno_t, CHAR_T *, size_t, size_t, size_t));
d49 1
a49 1
 * PUBLIC: int v_ulcase __P((SCR *, VICMD *));
d109 1
a109 1
 * PUBLIC: int v_mulcase __P((SCR *, VICMD *));
@


1.4
log
@Get rid of compilation warnings.
@
text
@d1 2
@


1.3
log
@nvi 1.73
@
text
@d119 1
a119 1
		if (db_get(sp, lno, DBG_FATAL, &p, &len))
@


1.2
log
@new vi
@
text
@d119 1
a119 1
		if (db_get(sp, lno, DBG_FATAL, (char **)&p, &len))
@


1.1
log
@Initial revision
@
text
@d4 2
d7 1
a7 27
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d10 2
d13 1
a13 1
static char sccsid[] = "@@(#)v_ulcase.c	8.10 (Berkeley) 8/17/94";
a23 1
#include <signal.h>
a26 5
#include <termios.h>

#include "compat.h"
#include <db.h>
#include <regex.h>
d28 1
a29 1
#include "vcmd.h"
d31 1
a31 2
static int ulcase __P((SCR *, EXF *,
    recno_t, CHAR_T *, size_t, size_t, size_t));
d46 2
d50 1
a50 1
v_ulcase(sp, ep, vp)
d52 1
a52 2
	EXF *ep;
	VICMDARG *vp;
d62 8
a69 4
	/* EOF is an infinite count sink. */
	for (cnt =
	    F_ISSET(vp, VC_C1SET) ? vp->count : 1; cnt > 0; cno = 0, ++lno) {
		if ((p = file_gline(sp, ep, lno, &len)) == NULL)
d71 1
a75 1
			vp->m_final.lno = lno + 1;
d77 8
d86 2
a87 9
			if (cno + cnt >= len) {
				lcnt = len - 1;
				cnt -= len - cno;

				vp->m_final.lno = lno + 1;
				vp->m_final.cno = 0;
			} else {
				lcnt = cno + cnt - 1;
				cnt = 0;
d89 5
a93 3
				vp->m_final.lno = lno;
				vp->m_final.cno = lcnt + 1;
			}
d95 2
a96 3
			if (ulcase(sp, ep, lno, p, len, cno, lcnt))
				return (1);
		}
d99 1
a99 5
	/* Check to see if we tried to move past EOF. */
	if (file_gline(sp, ep, vp->m_final.lno, &len) == NULL) {
		(void)file_gline(sp, ep, --vp->m_final.lno, &len);
		vp->m_final.cno = len == 0 ? 0 : len - 1;
	}
d106 2
d110 1
a110 1
v_mulcase(sp, ep, vp)
d112 1
a112 2
	EXF *ep;
	VICMDARG *vp;
d119 1
a119 2
		if ((p = file_gline(sp, ep, lno, &len)) == NULL) {
			GETLINE_ERR(sp, lno);
d121 1
a121 3
		}
		if (len != 0 &&
		    ulcase(sp, ep, lno, p, len,
d148 1
a148 1
ulcase(sp, ep, lno, lp, len, scno, ecno)
a149 1
	EXF *ep;
d174 1
a174 1
	if (change && file_sline(sp, ep, lno, bp, len))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
