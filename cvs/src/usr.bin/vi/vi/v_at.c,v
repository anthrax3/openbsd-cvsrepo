head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.4
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.27.09.18.12;	author martijn;	state Exp;
branches;
next	1.10;
commitid	01nAnartGL7onLD3;

1.10
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.9;
commitid	ruCZ2IKF0FB0ebCr;

1.9
date	2014.11.12.04.28.41;	author bentley;	state Exp;
branches;
next	1.8;
commitid	06bi6U3x4gFFf2G1;

1.8
date	2013.11.25.23.27.11;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.27.23.59.47;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.08.21.05.40;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.17.19.12.16;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.58;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.29.01.58.50;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.06.23.22.40.51;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.36.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: v_at.c,v 1.9 2014/11/12 04:28:41 bentley Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 */

#include "config.h"

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/time.h>

#include <bitstring.h>
#include <ctype.h>
#include <limits.h>
#include <stdio.h>

#include "../common/common.h"
#include "vi.h"

/*
 * v_at -- @@
 *	Execute a buffer.
 *
 * PUBLIC: int v_at(SCR *, VICMD *);
 */
int
v_at(SCR *sp, VICMD *vp)
{
	CB *cbp;
	CHAR_T name;
	TEXT *tp;
	size_t len;
	char nbuf[20];

	/*
	 * !!!
	 * Historically, [@@*]<carriage-return> and [@@*][@@*] executed the most
	 * recently executed buffer in ex mode.  In vi mode, only @@@@ repeated
	 * the last buffer.  We change historic practice and make @@* work from
	 * vi mode as well, it's simpler and more consistent.
	 *
	 * My intent is that *[buffer] will, in the future, pass the buffer to
	 * whatever interpreter is loaded.
	 */
	name = F_ISSET(vp, VC_BUFFER) ? vp->buffer : '@@';
	if (name == '@@' || name == '*') {
		if (!F_ISSET(sp, SC_AT_SET)) {
			ex_emsg(sp, NULL, EXM_NOPREVBUF);
			return (1);
		}
		name = sp->at_lbuf;
	}
	F_SET(sp, SC_AT_SET);

	CBNAME(sp, cbp, name);
	if (cbp == NULL) {
		ex_emsg(sp, KEY_NAME(sp, name), EXM_EMPTYBUF);
		return (1);
	}

	/* Save for reuse. */
	sp->at_lbuf = name;

	/*
	 * The buffer is executed in vi mode, while in vi mode, so simply
	 * push it onto the terminal queue and continue.
	 *
	 * !!!
	 * Historic practice is that if the buffer was cut in line mode,
	 * <newlines> were appended to each line as it was pushed onto
	 * the stack.  If the buffer was cut in character mode, <newlines>
	 * were appended to all lines but the last one.
	 *
	 * XXX
	 * Historic practice is that execution of an @@ buffer could be
	 * undone by a single 'u' command, i.e. the changes were grouped
	 * together.  We don't get this right; I'm waiting for the new DB
	 * logging code to be available.
	 */
	TAILQ_FOREACH_REVERSE(tp, &cbp->textq, _texth, q)
		if (((F_ISSET(cbp, CB_LMODE) || TAILQ_NEXT(tp, q)) &&
		    v_event_push(sp, NULL, "\n", 1, 0)) ||
		    v_event_push(sp, NULL, tp->lb, tp->len, 0))
			return (1);

	/*
	 * !!!
	 * If any count was supplied, it applies to the first command in the
	 * at buffer.
	 */
	if (F_ISSET(vp, VC_C1SET)) {
		len = snprintf(nbuf, sizeof(nbuf), "%lu", vp->count);
		if (len >= sizeof(nbuf))
			len = sizeof(nbuf) - 1;
		if (v_event_push(sp, NULL, nbuf, len, 0))
			return (1);
	}
	return (0);
}
@


1.10
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d36 1
a36 1
	char name;
@


1.9
log
@Ansify vi.

ok bcallah@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: v_at.c,v 1.8 2013/11/25 23:27:11 krw Exp $	*/
d36 1
a36 1
	CHAR_T name;
@


1.8
log
@Replace _texth CIRCLEQ with TAILQ. One down, five to go.

Read, tested, fixed and ok'd zhuk@@ pelikan@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: v_at.c,v 1.7 2009/10/27 23:59:47 deraadt Exp $	*/
d33 1
a33 3
v_at(sp, vp)
	SCR *sp;
	VICMD *vp;
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: v_at.c,v 1.6 2006/01/08 21:05:40 miod Exp $	*/
d88 2
a89 3
	CIRCLEQ_FOREACH_REVERSE(tp, &cbp->textq, q)
		if (((F_ISSET(cbp, CB_LMODE) ||
		    CIRCLEQ_NEXT(tp, q) != CIRCLEQ_END(&cbp->textq)) &&
@


1.6
log
@Explicit braces around macro fields and logical operations, gets rid of 148
warnings, no functional change.

From Ray Lai.
@
text
@d1 1
a1 1
/*	$OpenBSD: v_at.c,v 1.5 2005/10/17 19:12:16 otto Exp $	*/
a12 4

#ifndef lint
static const char sccsid[] = "@@(#)v_at.c	10.8 (Berkeley) 4/27/96";
#endif /* not lint */
@


1.5
log
@Use queue macros instead of directly accessing fields. ok pat@@ "put it
in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: v_at.c,v 1.4 2002/02/16 21:27:58 millert Exp $	*/
d93 1
a93 1
		if ((F_ISSET(cbp, CB_LMODE) ||
d95 1
a95 1
		    v_event_push(sp, NULL, "\n", 1, 0) ||
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: v_at.c,v 1.3 2001/01/29 01:58:50 niklas Exp $	*/
d92 1
a92 2
	for (tp = cbp->textq.cqh_last;
	    tp != (void *)&cbp->textq; tp = tp->q.cqe_prev)
d94 1
a94 1
		    tp->q.cqe_next != (void *)&cbp->textq) &&
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
 * PUBLIC: int v_at __P((SCR *, VICMD *));
@


1.2
log
@Fix snprintf return value usage.
@
text
@d1 2
@


1.1
log
@new vi
@
text
@d105 2
@

