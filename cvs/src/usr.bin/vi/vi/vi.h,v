head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.32
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.30
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.28
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.26
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2016.05.27.09.18.12;	author martijn;	state Exp;
branches;
next	1.10;
commitid	01nAnartGL7onLD3;

1.10
date	2016.05.02.18.24.25;	author martijn;	state Exp;
branches;
next	1.9;
commitid	ruCZ2IKF0FB0ebCr;

1.9
date	2015.12.03.08.13.15;	author bentley;	state Exp;
branches;
next	1.8;
commitid	8xpEawOLDC1xOLPu;

1.8
date	2015.04.24.21.48.31;	author brynet;	state Exp;
branches;
next	1.7;
commitid	snOxq6D74oYtevTu;

1.7
date	2013.11.28.22.12.40;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.08.21.05.40;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.17.19.12.16;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.58;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.29.01.58.54;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.24.16.16.08;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.05.22.11.37.08;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revert CHAR_T removal. Some signedness flaws were introduced.
Found the hard way by jca@@
@
text
@/*	$OpenBSD: vi.h,v 1.9 2015/12/03 08:13:15 bentley Exp $	*/

/*-
 * Copyright (c) 1992, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
 *	Keith Bostic.  All rights reserved.
 *
 * See the LICENSE file for redistribution information.
 *
 *	@@(#)vi.h	10.19 (Berkeley) 6/30/96
 */

/* Definition of a vi "word". */
#define	inword(ch)	(isalnum(ch) || (ch) == '_')

typedef struct _vikeys VIKEYS;

/* Structure passed around to functions implementing vi commands. */
typedef struct _vicmd {
	CHAR_T	key;			/* Command key. */
	CHAR_T	buffer;			/* Buffer. */
	CHAR_T	character;		/* Character. */
	u_long	count;			/* Count. */
	u_long	count2;			/* Second count (only used by z). */
	EVENT	ev;			/* Associated event. */

#define	ISCMD(p, key)	((p) == &vikeys[(key)])
	VIKEYS const *kp;		/* Command/Motion VIKEYS entry. */
#define	ISMOTION(vp)	((vp)->rkp != NULL && F_ISSET((vp)->rkp, V_MOTION))
	VIKEYS const *rkp;		/* Related C/M VIKEYS entry. */

	/*
	 * Historic vi allowed "dl" when the cursor was on the last column,
	 * deleting the last character, and similarly allowed "dw" when
	 * the cursor was on the last column of the file.  It didn't allow
	 * "dh" when the cursor was on column 1, although these cases are
	 * not strictly analogous.  The point is that some movements would
	 * succeed if they were associated with a motion command, and fail
	 * otherwise.  This is part of the off-by-1 schizophrenia that
	 * plagued vi.  Other examples are that "dfb" deleted everything
	 * up to and including the next 'b' character, while "d/b" deleted
	 * everything up to the next 'b' character.  While this implementation
	 * regularizes the interface to the extent possible, there are many
	 * special cases that can't be fixed.  The special cases are handled
	 * by setting flags per command so that the underlying command and
	 * motion routines know what's really going on.
	 *
	 * The VM_* flags are set in the vikeys array and by the underlying
	 * functions (motion component or command) as well.  For this reason,
	 * the flags in the VICMD and VIKEYS structures live in the same name
	 * space.
	 */
#define	VM_CMDFAILED	0x00000001	/* Command failed. */
#define	VM_CUTREQ	0x00000002	/* Always cut into numeric buffers. */
#define	VM_LDOUBLE	0x00000004	/* Doubled command for line mode. */
#define	VM_LMODE	0x00000008	/* Motion is line oriented. */
#define	VM_COMMASK	0x0000000f	/* Mask for VM flags. */

	/*
	 * The VM_RCM_* flags are single usage, i.e. if you set one, you have
	 * to clear the others.
	 */
#define	VM_RCM		0x00000010	/* Use relative cursor movment (RCM). */
#define	VM_RCM_SET	0x00000020	/* RCM: set to current position. */
#define	VM_RCM_SETFNB	0x00000040	/* RCM: set to first non-blank (FNB). */
#define	VM_RCM_SETLAST	0x00000080	/* RCM: set to last character. */
#define	VM_RCM_SETNNB	0x00000100	/* RCM: set to next non-blank. */
#define	VM_RCM_MASK	0x000001f0	/* Mask for RCM flags. */

	/* Flags for the underlying function. */
#define	VC_BUFFER	0x00000200	/* The buffer was set. */
#define	VC_C1RESET	0x00000400	/* Reset C1SET flag for dot commands. */
#define	VC_C1SET	0x00000800	/* Count 1 was set. */
#define	VC_C2SET	0x00001000	/* Count 2 was set. */
#define	VC_ISDOT	0x00002000	/* Command was the dot command. */
	u_int32_t flags;

	/*
	 * There are four cursor locations that we worry about: the initial
	 * cursor position, the start of the range, the end of the range,
	 * and the final cursor position.  The initial cursor position and
	 * the start of the range are both m_start, and are always the same.
	 * All locations are initialized to the starting cursor position by
	 * the main vi routines, and the underlying functions depend on this.
	 *
	 * Commands that can be motion components set the end of the range
	 * cursor position, m_stop.  All commands must set the ending cursor
	 * position, m_final.  The reason that m_stop isn't the same as m_final
	 * is that there are situations where the final position of the cursor
	 * is outside of the cut/delete range (e.g. 'd[[' from the first column
	 * of a line).  The final cursor position often varies based on the
	 * direction of the movement, as well as the command.  The only special
	 * case that the delete code handles is that it will make adjustments
	 * if the final cursor position is deleted.
	 *
	 * The reason for all of this is that the historic vi semantics were
	 * defined command-by-command.  Every function has to roll its own
	 * starting and stopping positions, and adjust them if it's being used
	 * as a motion component.  The general rules are as follows:
	 *
	 *	1: If not a motion component, the final cursor is at the end
	 *	   of the range.
	 *	2: If moving backward in the file, delete and yank move the
	 *	   final cursor to the end of the range.
	 *	3: If moving forward in the file, delete and yank leave the
	 *	   final cursor at the start of the range.
	 *
	 * Usually, if moving backward in the file and it's a motion component,
	 * the starting cursor is decremented by a single character (or, in a
	 * few cases, to the end of the previous line) so that the starting
	 * cursor character isn't cut or deleted.  No cursor adjustment is
	 * needed for moving forward, because the cut/delete routines handle
	 * m_stop inclusively, i.e. the last character in the range is cut or
	 * deleted.  This makes cutting to the EOF/EOL reasonable.
	 *
	 * The 'c', '<', '>', and '!' commands are special cases.  We ignore
	 * the final cursor position for all of them: for 'c', the text input
	 * routines set the cursor to the last character inserted; for '<',
	 * '>' and '!', the underlying ex commands that do the operation will
	 * set the cursor for us, usually to something related to the first
	 * <nonblank>.
	 */
	MARK	 m_start;		/* mark: initial cursor, range start. */
	MARK	 m_stop;		/* mark: range end. */
	MARK	 m_final;		/* mark: final cursor position. */
} VICMD;

/* Vi command table structure. */
struct _vikeys {			/* Underlying function. */
	int	 (*func)(SCR *, VICMD *);
#define	V_ABS		0x00004000	/* Absolute movement, set '' mark. */
#define	V_ABS_C		0x00008000	/* V_ABS: if the line/column changed. */
#define	V_ABS_L		0x00010000	/* V_ABS: if the line changed. */
#define	V_CHAR		0x00020000	/* Character (required, trailing). */
#define	V_CNT		0x00040000	/* Count (optional, leading). */
#define	V_DOT		0x00080000	/* On success, sets dot command. */
#define	V_KEYW		0x00100000	/* Cursor referenced word. */
#define	V_MOTION	0x00200000	/* Motion (required, trailing). */
#define	V_MOVE		0x00400000	/* Command defines movement. */
#define	V_OBUF		0x00800000	/* Buffer (optional, leading). */
#define	V_RBUF		0x01000000	/* Buffer (required, trailing). */
#define	V_SECURE	0x02000000	/* Permission denied if O_SECURE set. */
	u_int32_t flags;
	char	*usage;			/* Usage line. */
	char	*help;			/* Help line. */
};
#define	MAXVIKEY	126		/* List of vi commands. */
extern VIKEYS const vikeys[MAXVIKEY + 1];
extern VIKEYS const tmotion;		/* XXX Hacked ~ command. */

/* Character stream structure, prototypes. */
typedef struct _vcs {
	recno_t	 cs_lno;		/* Line. */
	size_t	 cs_cno;		/* Column. */
	CHAR_T	*cs_bp;			/* Buffer. */
	size_t	 cs_len;		/* Length. */
	CHAR_T	 cs_ch;			/* Character. */
#define	CS_EMP	1			/* Empty line. */
#define	CS_EOF	2			/* End-of-file. */
#define	CS_EOL	3			/* End-of-line. */
#define	CS_SOF	4			/* Start-of-file. */
	int	 cs_flags;		/* Return flags. */
} VCS;

int	cs_bblank(SCR *, VCS *);
int	cs_fblank(SCR *, VCS *);
int	cs_fspace(SCR *, VCS *);
int	cs_init(SCR *, VCS *);
int	cs_next(SCR *, VCS *);
int	cs_prev(SCR *, VCS *);

/*
 * We use a single "window" for each set of vi screens.  The model would be
 * simpler with two windows (one for the text, and one for the modeline)
 * because scrolling the text window down would work correctly then, not
 * affecting the mode line.  As it is we have to play games to make it look
 * right.  The reason for this choice is that it would be difficult for
 * curses to optimize the movement, i.e. detect that the downward scroll
 * isn't going to change the modeline, set the scrolling region on the
 * terminal and only scroll the first part of the text window.
 *
 * Structure for mapping lines to the screen.  An SMAP is an array, with one
 * structure element per screen line, which holds information describing the
 * physical line which is displayed in the screen line.  The first two fields
 * (lno and off) are all that are necessary to describe a line.  The rest of
 * the information is useful to keep information from being re-calculated.
 *
 * The SMAP always has an entry for each line of the physical screen, plus a
 * slot for the colon command line, so there is room to add any screen into
 * another one at screen exit.
 *
 * Lno is the line number.  If doing the historic vi long line folding, off
 * is the screen offset into the line.  For example, the pair 2:1 would be
 * the first screen of line 2, and 2:2 would be the second.  In the case of
 * long lines, the screen map will tend to be staggered, e.g., 1:1, 1:2, 1:3,
 * 2:1, 3:1, etc.  If doing left-right scrolling, the off field is the screen
 * column offset into the lines, and can take on any value, as it's adjusted
 * by the user set value O_SIDESCROLL.
 */
typedef struct _smap {
	recno_t  lno;		/* 1-N: Physical file line number. */
	size_t	 coff;		/* 0-N: Column offset in the line. */
	size_t	 soff;		/* 1-N: Screen offset in the line. */

				/* vs_line() cache information. */
	size_t	 c_sboff;	/* 0-N: offset of first character byte. */
	size_t	 c_eboff;	/* 0-N: offset of  last character byte. */
	u_int8_t c_scoff;	/* 0-N: offset into the first character. */
	u_int8_t c_eclen;	/* 1-N: columns from the last character. */
	u_int8_t c_ecsize;	/* 1-N: size of the last character. */
} SMAP;
				/* Macros to flush/test cached information. */
#define	SMAP_CACHE(smp)		((smp)->c_ecsize != 0)
#define	SMAP_FLUSH(smp)		((smp)->c_ecsize = 0)

				/* Character search information. */
typedef enum { CNOTSET, FSEARCH, fSEARCH, TSEARCH, tSEARCH } cdir_t;

typedef enum { AB_NOTSET, AB_NOTWORD, AB_INWORD } abb_t;
typedef enum { Q_NOTSET, Q_VNEXT, Q_VTHIS } quote_t;

/* Vi private, per-screen memory. */
typedef struct _vi_private {
	VICMD	cmd;		/* Current command, motion. */
	VICMD	motion;

	/*
	 * !!!
	 * The saved command structure can be modified by the underlying
	 * vi functions, see v_Put() and v_put().
	 */
	VICMD	sdot;		/* Saved dot, motion command. */
	VICMD	sdotmotion;

	CHAR_T *keyw;		/* Keyword buffer. */
	size_t	klen;		/* Keyword length. */
	size_t	keywlen;	/* Keyword buffer length. */

	CHAR_T	rlast;		/* Last 'r' replacement character. */
	e_key_t	rvalue;		/* Value of last replacement character. */

	EVENT  *rep;		/* Input replay buffer. */
	size_t	rep_len;	/* Input replay buffer length. */
	size_t	rep_cnt;	/* Input replay buffer characters. */

	mtype_t	mtype;		/* Last displayed message type. */
	size_t	linecount;	/* 1-N: Output overwrite count. */
	size_t	lcontinue;	/* 1-N: Output line continue value. */
	size_t	totalcount;	/* 1-N: Output overwrite count. */

				/* Busy state. */
	int	busy_ref;	/* Busy reference count. */
	int	busy_ch;	/* Busy character. */
	size_t	busy_fx;	/* Busy character x coordinate. */
	size_t	busy_oldy;	/* Saved y coordinate. */
	size_t	busy_oldx;	/* Saved x coordinate. */
	struct timespec busy_ts;/* Busy timer. */

	char   *ps;		/* Paragraph plus section list. */

	u_long	u_ccnt;		/* Undo command count. */

	CHAR_T	lastckey;	/* Last search character. */
	cdir_t	csearchdir;	/* Character search direction. */

	SMAP   *h_smap;		/* First slot of the line map. */
	SMAP   *t_smap;		/* Last slot of the line map. */

	/*
	 * One extra slot is always allocated for the map so that we can use
	 * it to do vi :colon command input; see v_tcmd().
	 */
	recno_t	sv_tm_lno;	/* tcmd: saved TMAP lno field. */
	size_t	sv_tm_coff;	/* tcmd: saved TMAP coff field. */
	size_t	sv_tm_soff;	/* tcmd: saved TMAP soff field. */
	size_t	sv_t_maxrows;	/* tcmd: saved t_maxrows. */
	size_t	sv_t_minrows;	/* tcmd: saved t_minrows. */
	size_t	sv_t_rows;	/* tcmd: saved t_rows. */
#define	SIZE_HMAP(sp)	(VIP(sp)->srows + 1)

	/*
	 * Macros to get to the head/tail of the smap.  If the screen only has
	 * one line, HMAP can be equal to TMAP, so the code has to understand
	 * the off-by-one errors that can result.  If stepping through an SMAP
	 * and operating on each entry, use sp->t_rows as the count of slots,
	 * don't use a loop that compares <= TMAP.
	 */
#define	_HMAP(sp)	(VIP(sp)->h_smap)
#define	HMAP		_HMAP(sp)
#define	_TMAP(sp)	(VIP(sp)->t_smap)
#define	TMAP		_TMAP(sp)

	recno_t	ss_lno;	/* 1-N: vi_opt_screens cached line number. */
	size_t	ss_screens;	/* vi_opt_screens cached return value. */
#define	VI_SCR_CFLUSH(vip)	((vip)->ss_lno = OOBLNO)

	size_t	srows;		/* 1-N: rows in the terminal/window. */
	recno_t	olno;		/* 1-N: old cursor file line. */
	size_t	ocno;		/* 0-N: old file cursor column. */
	size_t	sc_col;		/* 0-N: LOGICAL screen column. */
	SMAP   *sc_smap;	/* SMAP entry where sc_col occurs. */

#define	VIP_CUR_INVALID	0x0001	/* Cursor position is unknown. */
#define	VIP_DIVIDER	0x0002	/* Divider line was displayed. */
#define	VIP_N_EX_PAINT	0x0004	/* Clear and repaint when ex finishes. */
#define	VIP_N_EX_REDRAW	0x0008	/* Schedule SC_SCR_REDRAW when ex finishes. */
#define	VIP_N_REFRESH	0x0010	/* Repaint (from SMAP) on the next refresh. */
#define	VIP_N_RENUMBER	0x0020	/* Renumber screen on the next refresh. */
#define	VIP_RCM_LAST	0x0040	/* Cursor drawn to the last column. */
#define	VIP_S_MODELINE	0x0080	/* Skip next modeline refresh. */
#define	VIP_S_REFRESH	0x0100	/* Skip next refresh. */
	u_int16_t flags;
} VI_PRIVATE;

/* Vi private area. */
#define	VIP(sp)	((VI_PRIVATE *)((sp)->vi_private))

#define	O_NUMBER_FMT	"%7lu "			/* O_NUMBER format, length. */
#define	O_NUMBER_LENGTH	8
#define	SCREEN_COLS(sp)				/* Screen columns. */	\
	((O_ISSET((sp), O_NUMBER) ? (sp)->cols - O_NUMBER_LENGTH : (sp)->cols))

/*
 * LASTLINE is the zero-based, last line in the screen.  Note that it is correct
 * regardless of the changes in the screen to permit text input on the last line
 * of the screen, or the existence of small screens.
 */
#define LASTLINE(sp) \
	((sp)->t_maxrows < (sp)->rows ? (sp)->t_maxrows : (sp)->rows - 1)

/*
 * Small screen (see vs_refresh.c, section 6a) and one-line screen test.
 * Note, both cannot be true for the same screen.
 */
#define	IS_SMALL(sp)	((sp)->t_minrows != (sp)->t_maxrows)
#define	IS_ONELINE(sp)	((sp)->rows == 1)

#define	HALFTEXT(sp)				/* Half text. */	\
	((sp)->t_rows == 1 ? 1 : (sp)->t_rows / 2)
#define	HALFSCREEN(sp)				/* Half text screen. */	\
	((sp)->t_maxrows == 1 ? 1 : (sp)->t_maxrows / 2)

/*
 * Next tab offset.
 *
 * !!!
 * There are problems with how the historical vi handled tabs.  For example,
 * by doing "set ts=3" and building lines that fold, you can get it to step
 * through tabs as if they were spaces and move inserted characters to new
 * positions when <esc> is entered.  I believe that nvi does tabs correctly,
 * but there are some historical incompatibilities.
 */
#define	TAB_OFF(c)	COL_OFF((c), O_VAL(sp, O_TABSTOP))

/* If more than one screen being shown. */
#define	IS_SPLIT(sp)	(TAILQ_NEXT((sp), q) || TAILQ_PREV((sp), _dqh, q))

/* Screen adjustment operations. */
typedef enum { A_DECREASE, A_INCREASE, A_SET } adj_t;

/* Screen position operations. */
typedef enum { P_BOTTOM, P_FILL, P_MIDDLE, P_TOP } pos_t;

/* Scrolling operations. */
typedef enum {
	CNTRL_B, CNTRL_D, CNTRL_E, CNTRL_F,
	CNTRL_U, CNTRL_Y, Z_CARAT, Z_PLUS
} scroll_t;

/* Vi common error messages. */
typedef enum {
	VIM_COMBUF, VIM_EMPTY, VIM_EOF, VIM_EOL,
	VIM_NOCOM, VIM_NOCOM_B, VIM_USAGE, VIM_WRESIZE
} vim_t;

#include "vi_extern.h"
@


1.10
log
@Remove CHAR_T in favor of native types.

schwarze@@ agrees with the direction.
Few tweaks and OK tb@@
@
text
@d21 3
a23 3
	char	key;			/* Command key. */
	char	buffer;			/* Buffer. */
	char	character;		/* Character. */
d156 1
a156 1
	char	*cs_bp;			/* Buffer. */
d158 1
a158 1
	char	 cs_ch;			/* Character. */
d236 1
a236 1
	char   *keyw;		/* Keyword buffer. */
d240 1
a240 1
	char	rlast;		/* Last 'r' replacement character. */
d264 1
a264 1
	char	lastckey;	/* Last search character. */
@


1.9
log
@After inserting a backslash, don't treat ^H ^? or ^U as special cases.
These days, ^V to escape is a universal feature and needing two
keystrokes to delete backslashes is really annoying.

ok tb@@ claudio@@ schwarze@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vi.h,v 1.8 2015/04/24 21:48:31 brynet Exp $	*/
d21 3
a23 3
	CHAR_T	key;			/* Command key. */
	CHAR_T	buffer;			/* Buffer. */
	CHAR_T	character;		/* Character. */
d156 1
a156 1
	CHAR_T	*cs_bp;			/* Buffer. */
d158 1
a158 1
	CHAR_T	 cs_ch;			/* Character. */
d236 1
a236 1
	CHAR_T *keyw;		/* Keyword buffer. */
d240 1
a240 1
	CHAR_T	rlast;		/* Last 'r' replacement character. */
d264 1
a264 1
	CHAR_T	lastckey;	/* Last search character. */
@


1.8
log
@struct timespec/clock_gettime(3) conversion for vi(1).

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vi.h,v 1.7 2013/11/28 22:12:40 krw Exp $	*/
d221 1
a221 1
typedef enum { Q_NOTSET, Q_BNEXT, Q_BTHIS, Q_VNEXT, Q_VTHIS } quote_t;
@


1.7
log
@Convert the display screens and hidden screens CIRCLEQ's to TAILQ's.

ok pelikan@@ zhuk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vi.h,v 1.6 2006/01/08 21:05:40 miod Exp $	*/
d258 1
a258 1
	struct timeval busy_tv;	/* Busy timer. */
@


1.6
log
@Explicit braces around macro fields and logical operations, gets rid of 148
warnings, no functional change.

From Ray Lai.
@
text
@d1 1
a1 1
/*	$OpenBSD: vi.h,v 1.5 2005/10/17 19:12:16 otto Exp $	*/
d357 1
a357 3
#define	IS_SPLIT(sp)							\
	(CIRCLEQ_NEXT((sp), q) != (void *)&(sp)->gp->dq ||		\
	CIRCLEQ_PREV((sp), q) != (void *)&(sp)->gp->dq)
@


1.5
log
@Use queue macros instead of directly accessing fields. ok pat@@ "put it
in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vi.h,v 1.4 2002/02/16 21:27:58 millert Exp $	*/
d28 1
a28 1
#define	ISCMD(p, key)	((p) == &vikeys[key])
d30 1
a30 1
#define	ISMOTION(vp)	(vp->rkp != NULL && F_ISSET(vp->rkp, V_MOTION))
d296 1
a296 1
#define	VI_SCR_CFLUSH(vip)	vip->ss_lno = OOBLNO
d322 1
a322 1
	((O_ISSET(sp, O_NUMBER) ? (sp)->cols - O_NUMBER_LENGTH : (sp)->cols))
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: vi.h,v 1.3 2001/01/29 01:58:54 niklas Exp $	*/
d358 2
a359 2
	((sp)->q.cqe_next != (void *)&(sp)->gp->dq ||			\
	(sp)->q.cqe_prev != (void *)&(sp)->gp->dq)
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d131 1
a131 1
	int	 (*func) __P((SCR *, VICMD *));
d166 6
a171 6
int	cs_bblank __P((SCR *, VCS *));
int	cs_fblank __P((SCR *, VCS *));
int	cs_fspace __P((SCR *, VCS *));
int	cs_init __P((SCR *, VCS *));
int	cs_next __P((SCR *, VCS *));
int	cs_prev __P((SCR *, VCS *));
@


1.2
log
@bring vi/ex up to 1.71
@
text
@d1 2
@


1.1
log
@new vi
@
text
@d9 1
a9 1
 *	@@(#)vi.h	10.18 (Berkeley) 5/4/96
d373 2
a374 2
	VIM_COMBUF, VIM_EMPTY, VIM_EOF, VIM_EOL, VIM_NOCOM, VIM_NOCOM_B,
	VIM_USAGE
@
