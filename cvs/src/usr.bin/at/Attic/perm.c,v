head	1.5;
access;
symbols
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.02.20.20.38.08;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2002.05.14.18.05.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.11.23.16.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.03.01.23.40.12;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Sync with ISC cron-current + my at(1) integration.
The at(1) code is now more tightly integrated into the cron codebase.
@
text
@/*	$OpenBSD: perm.c,v 1.4 2002/05/14 18:05:39 millert Exp $	*/

/* 
 * perm.c - check user permission for at(1)
 * Copyright (C) 1994  Thomas Koenig
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author(s) may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <errno.h>
#include <pwd.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "at.h"
#include "panic.h"
#include "pathnames.h"
#include "privs.h"

#ifndef lint
static const char rcsid[] = "$OpenBSD: perm.c,v 1.4 2002/05/14 18:05:39 millert Exp $";
#endif

static int check_for_user(FILE *, const char *);


static int
check_for_user(FILE *fp, const char *name)
{
	char *buffer;
	size_t len;
	int found = 0;

	len = strlen(name);
	if ((buffer = malloc(len + 2)) == NULL)
		panic("Insufficient virtual memory");

	while (fgets(buffer, len + 2, fp) != NULL) {
		if (strncmp(name, buffer, len) == 0 && buffer[len] == '\n') {
			found = 1;
			break;
		}
	}
	(void)fclose(fp);
	free(buffer);
	return (found);
}


int
check_permission(void)
{
	FILE *fp;
	uid_t uid = geteuid();
	struct passwd *pentry;

	if (uid==0)
		return 1;

	if ((pentry = getpwuid(uid)) == NULL) {
		perror("Cannot access password database");
		exit(EXIT_FAILURE);
	}

	PRIV_START;

	fp = fopen(_PATH_AT_ALLOW, "r");

	PRIV_END;

	if (fp != NULL) {
		return (check_for_user(fp, pentry->pw_name));
	} else {
		PRIV_START;

		fp = fopen(_PATH_AT_DENY, "r");

		PRIV_END;

		if (fp != NULL)
			return (!check_for_user(fp, pentry->pw_name));
		else
			perror(_PATH_AT_DENY);
	}
	return (0);
}
@


1.4
log
@Major changes:

Job names are now "runtime.queue" where runtime is when the job will run
in Unix time format.  This is what SysV at does and allows us to nuke
the .SEQ file.

Historic BSD options for atq and atrm are now implemented;
atq and atrm get their own man pages.

At no longer does anything with the -v flag.  We print the execution
time when jobs are submitted so there is no need.

Most *scanf() usage is gone (one remains in atrun).

Better sanity checks in atrun.

Random style/cleanup.

With these changes we have the best of both worlds; POSIX compliance with
the traditional BSD features.
@
text
@d1 1
a1 1
/*	$OpenBSD: perm.c,v 1.3 2002/05/11 23:16:44 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: perm.c,v 1.3 2002/05/11 23:16:44 millert Exp $";
@


1.3
log
@Pass -Wall and use ANSI function headers.
@
text
@d1 1
a1 1
/*	$OpenBSD: perm.c,v 1.2 2002/02/16 21:27:44 millert Exp $	*/
a27 2
/* System Headers */

a36 2
/* Local headers */

a41 2
/* File scope variables */

d43 1
a43 1
static const char rcsid[] = "$OpenBSD: perm.c,v 1.2 2002/02/16 21:27:44 millert Exp $";
a45 2
/* Function declarations */

a47 1
/* Local functions */
a71 2
/* Global functions */

d83 1
a83 1
		perror("Cannot access user database");
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: perm.c,v 1.1 1997/03/01 23:40:12 millert Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: perm.c,v 1.1 1997/03/01 23:40:12 millert Exp $";
d59 1
a59 3
check_for_user(fp, name)
	FILE *fp;
	const char *name;
d84 1
a84 1
check_permission()
d98 1
a98 1
	PRIV_START
d102 1
a102 1
	PRIV_END
d107 1
a107 1
		PRIV_START
d111 1
a111 1
		PRIV_END
@


1.1
log
@Merge in changes from at 2.9
@
text
@d1 1
a1 1
/*	$OpenBSD: at.c,v 1.6 1997/01/15 23:42:12 millert Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: perm.c,v 1.5 1997/02/22 19:54:08 peter Exp $";
d54 1
a54 1
static int check_for_user __P((FILE *, const char *));
@

