head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.24
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.16
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.20
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.18
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.14
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.12
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.10
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.22
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.22
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.20
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.11.03.16.28.43;	author millert;	state dead;
branches;
next	1.10;
commitid	z8wj3ewlVKG08mTz;

1.10
date	2010.07.02.23.40.09;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.17.22.09.11;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.20.21.10.19;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.20.20.38.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.04.00.13.54;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.11.23.16.44;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.03.01.23.40.12;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.03.39.24;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.31.31;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.54;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.54;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@It is only necessary to swap the effective gid when reading a file.
An attacker exploiting an overflow can change the egid themselves
so running with the egid of the user in other places just gives you
a false sense of security.  OK nicm@@ deraadt@@
@
text
@/*	$OpenBSD: privs.h,v 1.10 2010/07/02 23:40:09 krw Exp $	*/

/*
 *  privs.h - header for privileged operations
 *  Copyright (C) 1993  Thomas Koenig
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author(s) may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _PRIVS_H
#define _PRIVS_H

#include <unistd.h>

/* Relinquish privileges temporarily for a setuid or setgid program
 * with the option of getting them back later.  This is done by
 * utilizing POSIX saved user and groups ids (or setreuid amd setregid if
 * POSIX saved ids are not available).  Call RELINQUISH_PRIVS once
 * at the beginning of the main program.  This will cause all operations
 * to be executed with the real userid.  When you need the privileges
 * of the setuid/setgid invocation, call PRIV_START; when you no longer
 * need it, call PRIV_END.  Note that it is an error to call PRIV_START
 * and not PRIV_END within the same function.
 *
 * Use RELINQUISH_PRIVS_ROOT(a,b) if your program started out running
 * as root, and you want to drop back the effective userid to a
 * and the effective group id to b, with the option to get them back
 * later.
 *
 * Problems: Do not use return between PRIV_START and PRIV_END; this
 * will cause the program to continue running in an unprivileged
 * state.
 *
 * It is NOT safe to call exec(), system() or popen() with a user-
 * supplied program (i.e. without carefully checking PATH and any
 * library load paths) with relinquished privileges; the called program
 * can acquire them just as easily.  Set both effective and real userid
 * to the real userid before calling any of them.
 */

#ifndef MAIN_PROGRAM
extern
#endif
uid_t real_uid, effective_uid;

#ifndef MAIN_PROGRAM
extern
#endif
gid_t real_gid, effective_gid;

#ifdef HAVE_SAVED_UIDS

#define RELINQUISH_PRIVS do {			\
      real_uid = getuid();			\
      effective_uid = geteuid();		\
      real_gid = getgid();			\
      effective_gid = getegid();		\
      setegid(real_gid);			\
      seteuid(real_uid);			\
} while (0)

#define RELINQUISH_PRIVS_ROOT(a, b) do {	\
	real_uid = (a);				\
	effective_uid = geteuid();		\
	real_gid = (b);				\
	effective_gid = getegid();		\
	setegid(real_gid);			\
	seteuid(real_uid);			\
} while (0)

#define PRIV_START do {				\
	seteuid(effective_uid);			\
	setegid(effective_gid);			\
} while (0)

#define PRIV_END do {				\
	setegid(real_gid);			\
	seteuid(real_uid);			\
} while (0)

#else /* HAVE_SAVED_UIDS */

#define RELINQUISH_PRIVS do {			\
      real_uid = getuid();			\
      effective_uid = geteuid();		\
      real_gid = getgid();			\
      effective_gid = getegid();		\
      setregid(effective_gid, real_gid);	\
      setreuid(effective_uid, real_uid);	\
} while (0)

#define RELINQUISH_PRIVS_ROOT(a, b) do {	\
	real_uid = (a);				\
	effective_uid = geteuid();		\
	real_gid = (b);				\
	effective_gid = getegid();		\
	setregid(effective_gid, real_gid);	\
	setreuid(effective_uid, real_uid);	\
} while (0)

#define PRIV_START do {				\
	setreuid(real_uid, effective_uid);	\
	setregid(real_gid, effective_gid);	\
} while (0)

#define PRIV_END do {				\
	setregid(effective_gid, real_gid);	\
	setreuid(effective_uid, real_uid);	\
} while (0)

#endif /* HAVE_SAVED_UIDS */

#endif /* _PRIVS_H */
@


1.10
log
@'wether' -> 'whether' typo in license text.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: privs.h,v 1.9 2004/06/17 22:09:11 millert Exp $	*/
@


1.9
log
@Remove trailing whitespace and, for printf, uid/gid are unsigned
@
text
@d1 1
a1 1
/*	$OpenBSD: privs.h,v 1.8 2003/10/20 21:10:19 jmc Exp $	*/
d23 1
a23 1
 * THEORY OF LIABILITY, WETHER IN CONTRACT, STRICT LIABILITY, OR TORT
@


1.8
log
@typos from Jared Yanovich, slightly ammended;
@
text
@d1 1
a1 1
/*	$OpenBSD: privs.h,v 1.7 2003/02/20 20:38:08 millert Exp $	*/
d3 2
a4 2
/* 
 *  privs.h - header for privileged operations 
d64 1
a64 1
#ifndef MAIN_PROGRAM 
@


1.7
log
@Sync with ISC cron-current + my at(1) integration.
The at(1) code is now more tightly integrated into the cron codebase.
@
text
@d1 1
a1 1
/*	$OpenBSD: privs.h,v 1.6 2002/06/04 00:13:54 deraadt Exp $	*/
d37 1
a37 1
 * at the beginning of the main program.  This will cause all operatons
@


1.6
log
@spelling; raj@@cerias.purdue.edu
@
text
@d1 1
a1 2
/*	$OpenBSD: privs.h,v 1.5 2002/05/11 23:16:44 millert Exp $	*/
/*	$NetBSD: privs.h,v 1.3 1995/03/25 18:13:41 glass Exp $	*/
d35 2
a36 1
 * utilizing POSIX saved user and groups ids.  Call RELINQUISH_PRIVS once
d59 1
a59 1
#ifndef MAIN
d64 1
a64 1
#ifndef MAIN 
d69 2
d98 32
@


1.5
log
@Pass -Wall and use ANSI function headers.
@
text
@d1 1
a1 1
/*	$OpenBSD: privs.h,v 1.4 1997/03/01 23:40:12 millert Exp $	*/
d55 1
a55 1
 * can aquire them just as easily.  Set both effective and real userid
@


1.4
log
@Merge in changes from at 2.9
@
text
@d1 1
a1 1
/*	$OpenBSD: privs.h,v 1.3 1996/12/22 03:39:24 tholo Exp $	*/
d69 27
a95 27
#define RELINQUISH_PRIVS { \
      real_uid = getuid(); \
      effective_uid = geteuid(); \
      real_gid = getgid(); \
      effective_gid = getegid(); \
      setegid(real_gid); \
      seteuid(real_uid); \
}

#define RELINQUISH_PRIVS_ROOT(a, b) { \
	real_uid = (a); \
	effective_uid = geteuid(); \
	real_gid = (b); \
	effective_gid = getegid(); \
	setegid(real_gid); \
	seteuid(real_uid); \
}

#define PRIV_START { \
	seteuid(effective_uid); \
	setegid(effective_gid); \
}

#define PRIV_END { \
	setegid(real_gid); \
	seteuid(real_uid); \
}
d97 1
a97 1
#endif
@


1.3
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d1 1
a1 1
/*	$OpenBSD: privs.h,v 1.2 1996/06/26 05:31:31 deraadt Exp $	*/
d4 3
a6 4
/*
 * privs.h - header for privileged operations
 * Copyright (c) 1993 by Thomas Koenig
 * All rights reserved.
d20 1
a20 1
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
a26 1
 *
d34 3
a36 3
/* Relinquish privileges temporarily for a setuid program
 * with the option of getting them back later.  This is done by swapping
 * the real and effective userid BSD style.  Call RELINQUISH_PRIVS once
d39 1
a39 1
 * of the setuid invocation, call PRIV_START; when you no longer
d43 1
a43 1
 * Use RELINQUISH_PRIVS_ROOT(a) if your program started out running
a47 4
 * If you no longer need root privileges, but those of some other
 * userid, you can call REDUCE_PRIV(a) when your effective
 * is the user's.
 *
d64 5
d70 6
a75 3
	real_uid = getuid(); \
	effective_uid = geteuid(); \
	seteuid(real_uid); \
d78 1
a78 1
#define RELINQUISH_PRIVS_ROOT(a) { \
d81 3
d88 3
a90 1
	seteuid(effective_uid);
d92 2
a93 1
#define PRIV_END \
a96 5
#define REDUCE_PRIV(a) { \
	real_uid = effective_uid = (a); \
	seteuid(effective_uid); \
	setuid(real_uid); \
}
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: privs.h,v 1.3 1995/03/25 18:13:41 glass Exp $	*/
d90 1
a91 1
	real_uid = effective_uid = (a); \
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
