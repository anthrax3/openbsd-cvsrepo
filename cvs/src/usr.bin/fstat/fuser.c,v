head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.10
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.16
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.14
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2015.01.16.06.40.08;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	Uu5nFG3wCl0LACBb;

1.5
date	2014.10.26.06.03.24;	author guenther;	state Exp;
branches;
next	1.4;
commitid	8YVLuewhh9q5Kfie;

1.4
date	2014.07.10.14.25.29;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	I24l1zU5qlRTqxRc;

1.3
date	2013.10.22.16.40.28;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.19.12.56.19;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.08.16.04.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: fuser.c,v 1.5 2014/10/26 06:03:24 guenther Exp $	*/

/*
 * Copyright (c) 2009 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Copyright (c) 2002 Peter Werner <peterw@@ifost.org.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/queue.h>
#include <sys/stat.h>
#include <sys/sysctl.h>
#include <sys/ucred.h>
#define _KERNEL /* for DTYPE_VNODE */
#include <sys/file.h>
#undef _KERNEL

#include <err.h>
#include <fcntl.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "fstat.h"

/*
 * Returns 1 if the file watched (fa) is equivalent
 * to a file held by a process (kf), else 0.
 */
static int
match(struct filearg *fa, struct kinfo_file *kf)
{
	if (fa->dev == kf->va_fsid) {
		if (cflg)
			return (1);
		if (fa->ino == kf->va_fileid)
			return (1);
	}
	return (0);
}

/*
 * Examine kinfo_file struct and record the details if they
 * match a watched file.
 */
void
fuser_check(struct kinfo_file *kf)
{
	struct filearg *fa;
	struct fuser *fu;

	if (kf->f_type != DTYPE_VNODE)
		return;

	SLIST_FOREACH(fa, &fileargs, next) {
		if (!match(fa, kf))
			continue;

		/*
		 * This assumes that kinfo_files2 returns all files
		 * associated with a process in a contiguous block.
		 */
		if (TAILQ_EMPTY(&fa->fusers) || kf->p_pid !=
		    (fu = TAILQ_LAST(&fa->fusers, fuserhead))->pid) {
			fu = malloc(sizeof(*fu));
			if (fu == NULL)
				err(1, NULL);
			fu->pid = kf->p_pid;
			fu->uid = kf->p_uid;
			fu->flags = 0;
			TAILQ_INSERT_TAIL(&fa->fusers, fu, tq);
		}
		switch (kf->fd_fd) {
		case KERN_FILE_CDIR:
			fu->flags |= F_CWD;
			break;
		case KERN_FILE_RDIR:
			fu->flags |= F_ROOT;
			break;
		case KERN_FILE_TEXT:
			fu->flags |= F_TEXT;
			break;
		case KERN_FILE_TRACE:
			/* ignore */
			break;
		default:
			fu->flags |= F_OPEN;
			break;
		}
	}
}

/*
 * Print out the specfics for a given file/filesystem
 */
static void
printfu(struct fuser *fu)
{
	struct passwd *pwd;

	printf("%d", fu->pid);
	fflush(stdout);

	if (fu->flags & F_CWD)
		fprintf(stderr, "c");

	if (fu->flags & F_ROOT)
		fprintf(stderr, "r");

	if (fu->flags & F_TEXT)
		fprintf(stderr, "t");

	if (uflg) {
		pwd = getpwuid(fu->uid);
		if (pwd != NULL)
			fprintf(stderr, "(%s)", pwd->pw_name);
		else
			fprintf(stderr, "(%d)", fu->uid);
	}

	putchar(' ');
}

/*
 * For each file, print matching process info and optionally send a signal.
 */
void
fuser_run(void)
{
	struct filearg *fa;
	struct fuser *fu;
	pid_t mypid = getpid();

	SLIST_FOREACH(fa, &fileargs, next) {
		fprintf(stderr, "%s: ", fa->name);
		TAILQ_FOREACH(fu, &fa->fusers, tq) {
			printfu(fu);
			if (sflg && fu->pid != mypid) {
				kill(fu->pid, signo);
			}
		}
		fflush(stdout);
		fprintf(stderr, "\n");
	}
}
@


1.5
log
@Move the #define _KERNEL wrapping to only cover <sys/file.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: fuser.c,v 1.4 2014/07/10 14:25:29 deraadt Exp $	*/
a43 1
#include <sys/param.h>
@


1.4
log
@expected user.h fallout; _KERNEL case needs manual pull of ucred.h
@
text
@d1 1
a1 1
/*	$OpenBSD: fuser.c,v 1.3 2013/10/22 16:40:28 guenther Exp $	*/
d48 1
a49 1
#include <sys/ucred.h>
@


1.3
log
@- add UNIX-domain socket info to struct kinfo_file2
- convert netstat from kvm_getfiles() to kvm_getfile2() using that
- delete kvm_getfiles() and KERN_FILE as no longer used (bump libkvm's major)
- rename kvm_getfile2() to kvm_getfiles(), kinfo_file2 to kinfo_file
  and KERN_FILE2 to KERN_FILE.

ok deraadt@@, millert@@
ports scan sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fuser.c,v 1.2 2009/07/19 12:56:19 millert Exp $	*/
d49 1
@


1.2
log
@Hook up "text" (executable) output and implement for fuser too.
Man page bits adapted from FreeBSD.  OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fuser.c,v 1.1 2009/07/08 16:04:00 millert Exp $	*/
d68 1
a68 1
match(struct filearg *fa, struct kinfo_file2 *kf)
d80 1
a80 1
 * Examine kinfo_file2 struct and record the details if they
d84 1
a84 1
fuser_check(struct kinfo_file2 *kf)
@


1.1
log
@Add POSIX-compliant fuser mode to fstat.  Originally based on
a diff from Peter Werner but largely rewritten to use kinfo_file2.
OK deraadt@@ with man fixes from jmc@@ and sobrado@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d117 3
a120 1
		case KERN_FILE_TEXT:
d146 3
@

