head	1.22;
access;
symbols
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.16
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.14
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.14.0.16
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.12
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.10
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.8
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.6
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2015.12.04.19.15.54;	author jmc;	state Exp;
branches;
next	1.21;
commitid	ZURRPRECi6APlQuz;

1.21
date	2015.12.04.13.58.09;	author nicm;	state Exp;
branches;
next	1.20;
commitid	KGw4skw7jdcj3Exj;

1.20
date	2015.10.29.02.58.00;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	QeK56C0AyErOmnyD;

1.19
date	2015.01.16.06.40.06;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	Uu5nFG3wCl0LACBb;

1.18
date	2011.07.04.21.34.54;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.11.01.23.16.39;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.36;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.28.11.43.50;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.04.20.32.51;	author otto;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.26.21.25.34;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.21.22.32.02;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.10.22.20.45;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.02.56.06;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.44;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.12.05.16.56;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.18.18.17.58;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.22.22.22.22;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.09.01.10.37;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.03.05.04.47.45;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.42.17;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.26.05.31.48;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.44.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.44.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@remove -i from SYNOPSIS and usage();
@
text
@/*	$OpenBSD: cap_mkdb.c,v 1.21 2015/12/04 13:58:09 nicm Exp $	*/
/*	$NetBSD: cap_mkdb.c,v 1.5 1995/09/02 05:47:12 jtc Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>

#include <db.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>

#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))
#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))

void	 db_build(char **);
void	 dounlink(void);
void	 usage(void);
int	 igetnext(char **, char **);
int	 main(int, char *[]);

DB *capdbp;
int verbose;
char *capname, buf[8 * 1024];

HASHINFO openinfo = {
	4096,		/* bsize */
	16,		/* ffactor */
	256,		/* nelem */
	2048 * 1024,	/* cachesize */
	NULL,		/* hash() */
	0		/* lorder */
};

/*
 * cap_mkdb creates a capability hash database for quick retrieval of capability
 * records.  The database contains 2 types of entries: records and references
 * marked by the first byte in the data.  A record entry contains the actual
 * capability record whereas a reference contains the name (key) under which
 * the correct record is stored.
 */
int
main(int argc, char *argv[])
{
	int c;

	if (pledge("stdio rpath wpath cpath", NULL) == -1)
		err(1, "pledge");

	capname = NULL;
	while ((c = getopt(argc, argv, "f:iv")) != -1) {
		switch(c) {
		case 'f':
			capname = optarg;
			break;
		case 'v':
			verbose = 1;
			break;
		case '?':
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (*argv == NULL)
		usage();

	/*
	 * The database file is the first argument if no name is specified.
	 * Make arrangements to unlink it if we exit badly.
	 */
	(void)snprintf(buf, sizeof(buf), "%s.db", capname ? capname : *argv);
	if ((capname = strdup(buf)) == NULL)
		err(1, NULL);
	if ((capdbp = dbopen(capname, O_CREAT | O_TRUNC | O_RDWR,
	    DEFFILEMODE, DB_HASH, &openinfo)) == NULL)
		err(1, "%s", buf);

	if (atexit(dounlink))
		err(1, "atexit");

	db_build(argv);

	if (capdbp->close(capdbp) < 0)
		err(1, "%s", capname);
	capname = NULL;
	exit(0);
}

void
dounlink(void)
{
	if (capname != NULL)
		(void)unlink(capname);
}

/*
 * Any changes to these definitions should be made also in the getcap(3)
 * library routines.
 */
#define RECOK	(char)0
#define TCERR	(char)1
#define SHADOW	(char)2

/*
 * db_build() builds the name and capability databases according to the
 * details above.
 */
void
db_build(char **ifiles)
{
	DBT key, data;
	recno_t reccnt;
	size_t len, bplen;
	int st;
	char *bp, *p, *t, *capbeg, *capend;

	cgetusedb(0);		/* disable reading of .db files in getcap(3) */

	data.data = NULL;
	key.data = NULL;
	for (reccnt = 0, bplen = 0; (st = cgetnext(&bp, ifiles)) > 0;) {

		/*
		 * Allocate enough memory to store the size of the record plus
		 * a terminating NULL and one extra byte.
		 */
		len = strlen(bp);
		if (bplen <= len + 2) {
			int newbplen = bplen + MAXIMUM(256, len + 2);
			void *newdata;

			if ((newdata = realloc(data.data, newbplen)) == NULL)
				err(1, NULL);
			data.data = newdata;
			bplen = newbplen;
		}

		/* Find the end of the name field. */
		if ((p = strchr(bp, ':')) == NULL) {
			warnx("no name field: %.*s", (int)MINIMUM(len, 20), bp);
			continue;
		}

		/* First byte of stored record indicates status. */
		switch(st) {
		case 1:
			((char *)(data.data))[0] = RECOK;
			break;
		case 2:
			((char *)(data.data))[0] = TCERR;
			warnx("Record not tc expanded: %.*s", (int)(p - bp), bp);
			break;
		}

		/* Create the stored record. */
		t = (char *)data.data + 1;
		/* Copy the cap name and trailing ':' */
		len = p - bp + 1;
		memcpy(t, bp, len);
		t += len;

		/* Copy entry, collapsing empty fields. */
		capbeg = p + 1;
		while (*capbeg) {
			/* Skip empty fields. */
			if ((len = strspn(capbeg, ": \t\n\r")))
				capbeg += len;

			/* Find the end of this cap and copy it w/ : */
			capend = strchr(capbeg, ':');
			if (capend)
				len = capend - capbeg + 1;
			else
				len = strlen(capbeg);
			memcpy(t, capbeg, len);
			t += len;
			capbeg += len;
		}
		*t = '\0';
		data.size = t - (char *)data.data + 1;

		/* Store the record under the name field. */
		key.data = bp;
		key.size = p - bp;

		switch(capdbp->put(capdbp, &key, &data, R_NOOVERWRITE)) {
		case -1:
			err(1, "put");
			/* NOTREACHED */
		case 1:
			warnx("ignored duplicate: %.*s",
			    (int)key.size, (char *)key.data);
			continue;
		}
		++reccnt;

		/* If only one name, ignore the rest. */
		if ((p = strchr(bp, '|')) == NULL)
			continue;

		/* The rest of the names reference the entire name. */
		((char *)(data.data))[0] = SHADOW;
		(void) memmove(&((u_char *)(data.data))[1], key.data, key.size);
		data.size = key.size + 1;

		/* Store references for other names. */
		for (p = t = bp;; ++p) {
			if (p > t && (*p == ':' || *p == '|')) {
				key.size = p - t;
				key.data = t;

				/*
				 * If this is the last entry and contains any
				 * spaces, it is a description rather than an
				 * alias, so skip it and break.
				 */
				if (*p != '|' &&
				    memchr(key.data, ' ', key.size) != NULL)
					break;

				switch(capdbp->put(capdbp,
				    &key, &data, R_NOOVERWRITE)) {
				case -1:
					err(1, "put");
					/* NOTREACHED */
				case 1:
					warnx("ignored duplicate: %.*s",
					      (int)key.size, (char *)key.data);
				}
				t = p + 1;
			}
			if (*p == ':')
				break;
		}
		free(bp);
	}

	switch(st) {
	case -1:
		err(1, "file argument");
		/* NOTREACHED */
	case -2:
		errx(1, "potential reference loop detected");
		/* NOTREACHED */
	}

	if (verbose)
		(void)printf("cap_mkdb: %d capability records\n", reccnt);
}

void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: cap_mkdb [-v] [-f outfile] file1 [file2 ...]\n");
	exit(1);
}
@


1.21
log
@cap_mkdb no longer needs to understand terminfo files, so remove -i.

ok tedu millert
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.20 2015/10/29 02:58:00 deraadt Exp $	*/
d291 1
a291 1
	    "usage: cap_mkdb [-iv] [-f outfile] file1 [file2 ...]\n");
@


1.20
log
@Pretty sure this can pledge "stdio rpath wpath cpath".  Commiting to start
the review for regressions...
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.19 2015/01/16 06:40:06 deraadt Exp $	*/
d56 1
a56 1
int info, verbose;
a91 3
		case 'i':
			info = 1;
			break;
d151 1
a151 1
	char *bp, *p, *t, *out, ch;
d157 1
a157 2
	for (reccnt = 0, bplen = 0;
	     (st = (info ? igetnext(&bp, ifiles) : cgetnext(&bp, ifiles))) > 0;) {
d160 2
a161 3
		 * Allocate enough memory to store four times the size of the
		 * record (so an existing ':' can be expanded to '\072' for
		 * terminfo) plus a terminating NULL and one extra byte.
d164 2
a165 2
		if (bplen <= 4 * len + 2) {
			int newbplen = bplen + MAXIMUM(256, 4 * len + 2);
d175 1
a175 1
		if ((p = strchr(bp, info ? ',' : ':')) == NULL) {
d192 12
a203 37
		if (info) {
			/*
			 * The record separator is :, so it is necessary to
			 * change commas into colons. However, \, should be
			 * left alone, unless the \ is the last part of ^\.
			 */
			data.size = len + 2;
			out = ((char *) data.data) + 1;
			t = bp;
			while (t < bp + len) {
				switch (ch = *t++) {
				case '^':
				case '\\':
					*out++ = ch;
					if (*t != '\0')
						*out++ = *t++;
					break;
				case ':':
					memcpy(out, "\\072", 4);
					out += 4;
					data.size += 3; /* : already counted */
					break;
				case ',':
					*out++ = ':';
					break;
				default:
					*out++ = ch;
					break;
				}
			}
			*out++ = '\0';
			if (memchr((char *)data.data + 1, '\0', data.size - 2)) {
				warnx("NUL in entry: %.*s", (int)MINIMUM(len, 20), bp);
				continue;
			}
		} else {
			char *capbeg, *capend;
d205 7
a211 4
			t = (char *)data.data + 1;
			/* Copy the cap name and trailing ':' */
			len = p - bp + 1;
			memcpy(t, bp, len);
d213 1
a213 20

			/* Copy entry, collapsing empty fields. */
			capbeg = p + 1;
			while (*capbeg) {
				/* Skip empty fields. */
				if ((len = strspn(capbeg, ": \t\n\r")))
					capbeg += len;

				/* Find the end of this cap and copy it w/ : */
				capend = strchr(capbeg, ':');
				if (capend)
					len = capend - capbeg + 1;
				else
					len = strlen(capbeg);
				memcpy(t, capbeg, len);
				t += len;
				capbeg += len;
			}
			*t = '\0';
			data.size = t - (char *)data.data + 1;
d215 2
d244 1
a244 1
			if (p > t && (*p == (info ? ',' : ':') || *p == '|')) {
d268 1
a268 1
			if (*p == (info ? ',' : ':'))
@


1.19
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.18 2011/07/04 21:34:54 nicm Exp $	*/
d79 3
@


1.18
log
@Nuke a load of trailing whitespace; no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.17 2009/11/01 23:16:39 nicm Exp $	*/
a32 1
#include <sys/param.h>
d46 3
d167 1
a167 1
			int newbplen = bplen + MAX(256, 4 * len + 2);
d178 1
a178 1
			warnx("no name field: %.*s", (int)MIN(len, 20), bp);
d226 1
a226 1
				warnx("NUL in entry: %.*s", (int)MIN(len, 20), bp);
@


1.17
log
@If the last name field looks like a description rather than an alias (if it
contains spaces), ignore it. Knocks a few K off the termcap and terminfo
databases and gets rid of some warnings.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.16 2009/10/27 23:59:36 deraadt Exp $	*/
d292 1
a292 1
				if (*p != '|' && 
d295 1
a295 1
				
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.15 2009/08/28 11:43:50 nicm Exp $	*/
d286 10
@


1.15
log
@Change cap_mkdb and curses to be a better about reformatting terminfo entries
into the cap database format and back: rather than replacing all colons with
commas, only touch real separators (skip those with a leading \ or ^) and
replace an unadorned colon with a literal "\072".

Fixes problems with quite a few caps including acsc in "screen" (:s instead of
,s) and setab/initc in "xterm-256color" (wrongly concatenated together).

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.14 2006/03/04 20:32:51 otto Exp $	*/
a31 13

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1992, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)cap_mkdb.c	8.2 (Berkeley) 4/27/95";
#endif
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.14 2006/03/04 20:32:51 otto Exp $";
#endif /* not lint */
@


1.14
log
@Plug a mem leak; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.13 2003/09/26 21:25:34 tedu Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.13 2003/09/26 21:25:34 tedu Exp $";
d162 1
a162 1
	char *bp, *p, *t;
d172 3
a174 2
		 * Allocate enough memory to store record, terminating
		 * NULL and one extra byte.
d177 2
a178 2
		if (bplen <= len + 2) {
			int newbplen = bplen + MAX(256, len + 2);
d206 5
a210 1
			(void) memcpy(&((u_char *)(data.data))[1], bp, len + 1);
d212 24
a235 5
			for (t = memchr((char *)data.data + 1, ',', data.size - 1);
			     t;
			     t = memchr(t, ',', data.size - (t - (char *)data.data)))
				*t++ = ':';

@


1.13
log
@better realloc.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.12 2003/09/21 22:32:02 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.12 2003/09/21 22:32:02 millert Exp $";
d289 1
@


1.12
log
@Replace err(1, "") with err(1, NULL) to avoid a warning; Andrey Matveev
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.11 2003/06/10 22:20:45 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.11 2003/06/10 22:20:45 deraadt Exp $";
d177 4
a180 2
			bplen += MAX(256, len + 2);
			if ((data.data = realloc(data.data, bplen)) == NULL)
d182 2
@


1.11
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.10 2003/06/03 02:56:06 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.10 2003/06/03 02:56:06 millert Exp $";
d120 1
a120 1
		err(1, "");
d179 1
a179 1
				err(1, "");
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.9 2002/02/16 21:27:44 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.9 2002/02/16 21:27:44 millert Exp $";
d87 1
a87 3
main(argc, argv)
	int argc;
	char *argv[];
d137 1
a137 1
dounlink()
d156 1
a156 2
db_build(ifiles)
	char **ifiles;
d301 1
a301 1
usage()
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.8 2001/07/12 05:16:56 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.8 2001/07/12 05:16:56 deraadt Exp $";
@


1.8
log
@first pass at a -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.7 2001/06/18 18:17:58 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.7 2001/06/18 18:17:58 millert Exp $";
d64 5
a68 5
void	 db_build __P((char **));
void	 dounlink __P((void));
void	 usage __P((void));
int	 igetnext __P((char **, char **));
int	 main __P((int, char *[]));
@


1.7
log
@use cgetusedb(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.6 2000/09/22 22:22:22 naddy Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.6 2000/09/22 22:22:22 naddy Exp $";
d191 1
a191 1
			warnx("no name field: %.*s", MIN(len, 20), bp);
@


1.6
log
@- move break from loop on EOF in order to make cap_mkdb not ignore the final
  record in terminfo mode
- while we're here fix indentation, spelling
okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.5 2000/01/09 01:10:37 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.5 2000/01/09 01:10:37 millert Exp $";
d122 1
a122 1
	 * Make arrangements to unlink it if exit badly.
d170 2
@


1.5
log
@When storing termcap entry in the .db file, prune out empty entries like
:\t: since space may be tight with the 1023 character termcap limit.
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.4 1999/03/05 04:47:45 tholo Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.4 1999/03/05 04:47:45 tholo Exp $";
d106 1
a106 1
		    case 'i':
d158 1
a158 1
 * db_build() builds the name and capabilty databases according to the
@


1.4
log
@Merge cap_mkdb(1) and info_mkdb(1)
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.3 1997/01/15 23:42:17 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.3 1997/01/15 23:42:17 millert Exp $";
a204 2
		(void) memmove(&((u_char *)(data.data))[1], bp, len + 1);
		data.size = len + 2;
d206 2
d217 28
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.2 1996/06/26 05:31:48 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.2 1996/06/26 05:31:48 deraadt Exp $";
d61 1
d67 2
d71 2
a72 2
int verbose;
char *capdb, *capname, buf[8 * 1024];
d84 1
a84 1
 * Mkcapdb creates a capability hash database for quick retrieval of capability
d98 1
a98 1
	while ((c = getopt(argc, argv, "f:v")) != -1) {
d106 3
d158 1
a158 1
 * Db_build() builds the name and capabilty databases according to the
d173 2
a174 1
	for (reccnt = 0, bplen = 0; (st = cgetnext(&bp, ifiles)) > 0;) {
d188 1
a188 1
		if ((p = strchr(bp, ':')) == NULL) {
d200 1
a200 1
			warnx("Record not tc expanded: %.*s", p - bp, bp);
d205 1
a205 1
		memmove(&((u_char *)(data.data))[1], bp, len + 1);
d207 11
d229 1
a229 1
			    key.size, (char *)key.data);
d240 1
a240 1
		memmove(&((u_char *)(data.data))[1], key.data, key.size);
d245 1
a245 1
			if (p > t && (*p == ':' || *p == '|')) {
d255 1
a255 1
					    key.size, (char *)key.data);
d259 1
a259 1
			if (*p == ':')
d281 1
a281 1
	    "usage: cap_mkdb [-v] [-f outfile] file1 [file2 ...]\n");
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD: cap_mkdb.c,v 1.5 1995/09/02 05:47:12 jtc Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cap_mkdb.c,v 1.5 1995/09/02 05:47:12 jtc Exp $";
d95 1
a95 1
	while ((c = getopt(argc, argv, "f:v")) != EOF) {
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: cap_mkdb.c,v 1.5 1995/09/02 05:47:12 jtc Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
