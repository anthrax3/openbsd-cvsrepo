head	1.20;
access;
symbols
	OPENBSD_5_8:1.19.0.10
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.14.0.12
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.8
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.20
date	2015.12.04.13.58.09;	author nicm;	state dead;
branches;
next	1.19;
commitid	KGw4skw7jdcj3Exj;

1.19
date	2013.11.26.18.47.06;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.22.01.11.05;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.04.21.34.54;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.11.11.23.49.01;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.36;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.09.03.07.19;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.07.03.53.46;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.07.02.23.13;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.06.01.12.25;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.18.03.55.09;	author ray;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.10.05.20.35;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.20.09.23.26;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.10.22.20.45;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.04.16.24.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.44;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.19.19.02.13;	author mpech;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.18.18.17.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.22.22.22.22;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	99.03.05.04.47.45;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.20
log
@cap_mkdb no longer needs to understand terminfo files, so remove -i.

ok tedu millert
@
text
@/*	$OpenBSD: getinfo.c,v 1.19 2013/11/26 18:47:06 deraadt Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.
 * Copyright (c) 1996 SigmaSoft, Th. Lockert <tholo@@sigmasoft.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>

#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define	BFRAG		1024
#define	BSIZE		1024
#define	ESC		('[' & 037)	/* ASCII ESC */
#define	MAX_RECURSION	32		/* maximum getent recursion */
#define	SFRAG		100		/* cgetstr mallocs in SFRAG chunks */

#define RECOK	(char)0
#define TCERR	(char)1
#define	SHADOW	(char)2

static int 	 getent(char **, u_int *, char **, FILE *, char *, int);
static char	*igetcap(char *, char *, int);
static int	 igetmatch(char *, char *);
static int	 igetclose(void);

int	igetnext(char **, char **);

/*
 * Igetcap searches the capability record buf for the capability cap with
 * type `type'.  A pointer to the value of cap is returned on success, NULL
 * if the requested capability couldn't be found.
 *
 * Specifying a type of ',' means that nothing should follow cap (,cap,).
 * In this case a pointer to the terminating ',' or NUL will be returned if
 * cap is found.
 *
 * If (cap, '@@') or (cap, terminator, '@@') is found before (cap, terminator)
 * return NULL.
 */
static char *
igetcap(char *buf, char *cap, int type)
{
	char *bp, *cp;

	bp = buf;
	for (;;) {
		/*
		 * Skip past the current capability field - it's either the
		 * name field if this is the first time through the loop, or
		 * the remainder of a field whose name failed to match cap.
		 */
		for (;;)
			if (*bp == '\0')
				return (NULL);
			else
				if (*bp++ == ',')
					break;

		/*
		 * Try to match (cap, type) in buf.
		 */
		for (cp = cap; *cp == *bp && *bp != '\0'; cp++, bp++)
			continue;
		if (*cp != '\0')
			continue;
		if (*bp == '@@')
			return (NULL);
		if (type == ',') {
			if (*bp != '\0' && *bp != ',')
				continue;
			return(bp);
		}
		if (*bp != type)
			continue;
		bp++;
		return (*bp == '@@' ? NULL : bp);
	}
	/* NOTREACHED */
}

/*
 * Getent implements the functions of igetent.  If fp is non-NULL,
 * *db_array has already been opened and fp is the open file descriptor.  We
 * do this to save time and avoid using up file descriptors for use=
 * recursions.
 *
 * Getent returns the same success/failure codes as igetent.  On success, a
 * pointer to a malloc'ed capability record with all use= capabilities fully
 * expanded and its length (not including trailing ASCII NUL) are left in
 * *cap and *len.
 *
 * Basic algorithm:
 *	+ Allocate memory incrementally as needed in chunks of size BFRAG
 *	  for capability buffer.
 *	+ Recurse for each use=name and interpolate result.  Stop when all
 *	  names interpolated, a name can't be found, or depth exceeds
 *	  MAX_RECURSION.
 */
static int
getent(char **cap, u_int *len, char **db_array, FILE *fp, char *name, int depth)
{
	char *r_end, *rp, **db_p;
	int myfd, eof, foundit;
	char *record, *s;
	int tc_not_resolved;

	/*
	 * Return with ``loop detected'' error if we've recursed more than
	 * MAX_RECURSION times.
	 */
	if (depth > MAX_RECURSION)
		return (-3);

        /*
         * If no name we better have a record in cap
         */
        if (depth == 0 && name == NULL) {
                if ((record = malloc(*len + 1 + BFRAG)) == NULL)
                        return (-2);
                memcpy(record, *cap, *len);
                myfd = 0;
                db_p = db_array;
                rp = record + *len + 1;
                r_end = rp + BFRAG;
		*rp = '\0';
                goto exp_use;
        }

	/*
	 * Allocate first chunk of memory.
	 */
	if ((record = malloc(BFRAG)) == NULL) {
		errno = ENOMEM;
		return (-2);
	}
	r_end = record + BFRAG;
	foundit = 0;
	rp = NULL;
	myfd = -1;

	/*
	 * Loop through database array until finding the record.
	 */
	for (db_p = db_array; *db_p != NULL; db_p++) {
		eof = 0;

		/*
		 * Open database if not already open.
		 */

		if (fp != NULL) {
			(void)fseek(fp, 0L, SEEK_SET);
			myfd = 0;
		} else {
			fp = fopen(*db_p, "r");
			if (fp == NULL) {
				/* No error on unfound file. */
				continue;
			}
			myfd = 1;
		}
		/*
		 * Find the requested capability record ...
		 */
		{
		char buf[BUFSIZ];
		char *b_end, *bp;
		int c;

		/*
		 * Loop invariants:
		 *	There is always room for one more character in record.
		 *	R_end always points just past end of record.
		 *	Rp always points just past last character in record.
		 *	B_end always points just past last character in buf.
		 *	Bp always points at next character in buf.
		 */
		b_end = buf;
		bp = buf;
		for (;;) {

			/*
			 * Read in a record implementing line continuation.
			 */
			rp = record;
			for (;;) {
				if (bp >= b_end) {
					size_t n;

					n = fread(buf, 1, sizeof(buf), fp);
					if (n == 0) {
						eof = feof(fp);
						if (myfd)
							(void)fclose(fp);
						if (eof) {
							fp = NULL;
							break;
						}
						free(record);
						return (-2);
					}
					b_end = buf+n;
					bp = buf;
				}

				c = (unsigned char)*bp++;
				if (c == '\n') {
					if (bp >= b_end) {
						size_t n;

						n = fread(buf, 1, sizeof(buf), fp);
						if (n == 0) {
							eof = feof(fp);
							if (myfd)
								(void)fclose(fp);
							if (eof) {
								fp = NULL;
								break;
							}
							free(record);
							return (-2);
						}
						b_end = buf+n;
						bp = buf;
					}
					if (rp > record && isspace(*bp))
						continue;
					else
						break;
				}
				if (rp <= record || *(rp - 1) != ',' || !isspace(c))
					*rp++ = c;

				/*
				 * Enforce loop invariant: if no room
				 * left in record buffer, try to get
				 * some more.
				 */
				if (rp >= r_end) {
					size_t off;
					size_t newsize;

					off = rp - record;
					newsize = r_end - record + BFRAG;
					s = realloc(record, newsize);
					if (s == NULL) {
						free(record);
						errno = ENOMEM;
						if (myfd)
							(void)fclose(fp);
						return (-2);
					}
					record = s;
					r_end = record + newsize;
					rp = record + off;
				}
			}
			/* loop invariant lets us do this */
			*rp++ = '\0';

			/*
			 * Toss blank lines and comments.
			 */
			if (*record == '\0' || *record == '#')
				continue;

			/*
			 * See if this is the record we want ...
			 */
			if (igetmatch(record, name) == 0) {
				foundit = 1;
				break;	/* found it! */
			}

			/*
			 * If encountered eof check next file.
			 */
			if (eof)
				break;
		}
	}
		if (foundit)
			break;
	}

	if (!foundit) {
		free(record);
		return (-1);
	}

	/*
	 * Got the capability record, but now we have to expand all use=name
	 * references in it ...
	 */
exp_use: {
		char *newicap;
		int newilen;
		u_int ilen;
		int diff, iret, tclen;
		char *icap, *scan, *tc, *tcstart, *tcend;

		/*
		 * Loop invariants:
		 *	There is room for one more character in record.
		 *	R_end points just past end of record.
		 *	Rp points just past last character in record.
		 *	Scan points at remainder of record that needs to be
		 *	scanned for use=name constructs.
		 */
		scan = record;
		tc_not_resolved = 0;
		for (;;) {
			if ((tc = igetcap(scan, "use", '=')) == NULL)
				break;

			/*
			 * Find end of use=name and stomp on the trailing `,'
			 * (if present) so we can use it to call ourselves.
			 */
			s = tc + strcspn(tc, ",");
			if (*s == ',') {
				*s = '\0';
				++s;
			}
			tcstart = tc - 4;
			tclen = s - tcstart;
			tcend = s;

			iret = getent(&icap, &ilen, db_p, fp, tc, depth+1);
			newicap = icap;		/* Put into a register. */
			newilen = ilen;
			if (iret != 0) {
				/* an error */
				if (iret < -1) {
					if (myfd)
						(void)fclose(fp);
					free(record);
					return (iret);
				}
				if (iret == 1)
					tc_not_resolved = 1;
				/* couldn't resolve tc */
				if (iret == -1) {
					*(s - 1) = ',';
					scan = s - 1;
					tc_not_resolved = 1;
					continue;

				}
			}
			/* not interested in name field of tc'ed record */
			s = newicap + strcspn(newicap, ",");
			if (*s == ',')
				++s;
			newilen -= s - newicap;
			newicap = s;

			/* make sure interpolated record is `,'-terminated */
			s += newilen;
			if (*(s-1) != ',') {
				*s = ',';	/* overwrite NUL with , */
				newilen++;
			}

			/*
			 * Make sure there's enough room to insert the
			 * new record.
			 */
			diff = newilen - tclen;
			if (diff >= r_end - rp) {
				size_t off, tcoff, tcoffend;
				size_t newsize;

				off = rp - record;
				newsize = r_end - record + diff + BFRAG;
				tcoff = tcstart - record;
				tcoffend = tcend - record;
				s = realloc(record, newsize);
				if (s == NULL) {
					free(record);
					errno = ENOMEM;
					if (myfd)
						(void)fclose(fp);
					free(icap);
					return (-2);
				}
				record = s;
				r_end = record + newsize;
				rp = record + off;
				tcstart = record + tcoff;
				tcend = record + tcoffend;
			}

			/*
			 * Insert tc'ed record into our record.
			 */
			s = tcstart + newilen;
			bcopy(tcend, s, (size_t)(rp - tcend));
			bcopy(newicap, tcstart, (size_t)newilen);
			rp += diff;
			free(icap);

			/*
			 * Start scan on `,' so next igetcap works properly
			 * (igetcap always skips first field).
			 */
			scan = s-1;
		}

	}
	/*
	 * Close file (if we opened it), give back any extra memory, and
	 * return capability, length and success.
	 */
	if (myfd)
		(void)fclose(fp);
	*len = rp - record - 1;	/* don't count NUL */
	if (r_end > rp) {
		if ((s =
		     realloc(record, (size_t)(rp - record))) == NULL) {
			free(record);
			errno = ENOMEM;
			return (-2);
		} else
			record = s;
	}

	*cap = record;
	if (tc_not_resolved)
		return (1);
	return (0);
}

/*
 * Igetmatch will return 0 if name is one of the names of the capability
 * record buf, -1 if not.
 */
static int
igetmatch(char *buf, char *name)
{
	char *np, *bp;

	/*
	 * Start search at beginning of record.
	 */
	bp = buf;
	for (;;) {
		/*
		 * Try to match a record name.
		 */
		np = name;
		for (;;)
			if (*np == '\0') {
				if (*bp == '|' || *bp == ',' || *bp == '\0')
					return (0);
				else
					break;
			} else {
				if (*bp++ != *np++)
					break;
			}

		/*
		 * Match failed, skip to next name in record.
		 */
		bp--;	/* a '|' or ',' may have stopped the match */
		for (;;)
			if (*bp == '\0' || *bp == ',')
				return (-1);	/* match failed totally */
			else
				if (*bp++ == '|')
					break;	/* found next name */
	}
}

static FILE *pfp;
static int slash;
static char **dbp;

static int
igetclose(void)
{
	if (pfp != NULL) {
		(void)fclose(pfp);
		pfp = NULL;
	}
	dbp = NULL;
	slash = 0;
	return(0);
}

/*
 * Igetnext() gets either the first or next entry in the logical database
 * specified by db_array.  It returns 0 upon completion of the database, 1
 * upon returning an entry with more remaining, and -1 if an error occurs.
 */
int
igetnext(char **cap, char **db_array)
{
	int c, eof = 0, serrno, status = -1;
	char buf[BUFSIZ];
	char *b_end, *bp, *r_end, *rp;
	char *record = NULL;
	u_int len;
	off_t pos;

	if (dbp == NULL)
		dbp = db_array;

	if (pfp == NULL && (pfp = fopen(*dbp, "r")) == NULL)
		goto done;

	/*
	 * Allocate first chunk of memory.
	 */
	if ((record = malloc(BFRAG)) == NULL)
		goto done;
	r_end = record + BFRAG;

	/*
	 * Find the next capability record
	 */
	/*
	 * Loop invariants:
	 *	There is always room for one more character in record.
	 *	R_end always points just past end of record.
	 *	Rp always points just past last character in record.
	 *	B_end always points just past last character in buf.
	 *	Bp always points at next character in buf.
	 */
	b_end = buf;
	bp = buf;
	for (;;) {
		/*
		 * If encountered EOF check next file.
		 */
		if (eof) {
			(void)fclose(pfp);
			pfp = NULL;
			if (*++dbp == NULL) {
				status = 0;
				break;
			}
			if ((pfp = fopen(*dbp, "r")) == NULL)
				break;
			eof = 0;
		}

		/*
		 * Read in a record implementing line continuation.
		 */
		rp = record;
		for (;;) {
			if (bp >= b_end) {
				size_t n;

				n = fread(buf, 1, sizeof(buf), pfp);
				if (n == 0) {
					eof = feof(pfp);
					if (eof)
						break;
					else
						goto done;
				}
				b_end = buf + n;
				bp = buf;
			}

			c = (unsigned char)*bp++;
			if (c == '\n') {
				if (bp >= b_end) {
					size_t n;

					n = fread(buf, 1, sizeof(buf), pfp);
					if (n == 0) {
						eof = feof(pfp);
						if (eof)
							break;
						else
							goto done;
					}
					b_end = buf + n;
					bp = buf;
				}
				if (rp > record && isspace(*bp))
					continue;
				else
					break;
			}
			if (rp <= record || *(rp - 1) != ',' || !isspace(c))
				*rp++ = c;

			/*
			 * Enforce loop invariant: if no room
			 * left in record buffer, try to get
			 * some more.
			 */
			if (rp >= r_end) {
				size_t newsize, off;
				char *nrecord;

				off = rp - record;
				newsize = r_end - record + BFRAG;
				nrecord = realloc(record, newsize);
				if (nrecord == NULL)
					goto done;
				record = nrecord;
				r_end = record + newsize;
				rp = record + off;
			}
		}
		/* loop invariant lets us do this */
		*rp++ = '\0';

		/*
		 * Toss blank lines and comments.
		 */
		if (*record == '\0' || *record == '#')
			continue;

		/* rewind to end of record */
		fseeko(pfp, (off_t)(bp - b_end), SEEK_CUR);

		/* we pass the record to getent() in cap */
		*cap = record;
		len = rp - record;

		/* return value of getent() is one less than igetnext() */
		pos = ftello(pfp);
		status = getent(cap, &len, dbp, pfp, NULL, 0) + 1;
		if (status > 0)
			fseeko(pfp, pos, SEEK_SET);
		break;
	}
done:
	serrno = errno;
	free(record);
	if (status <= 0)
		(void)igetclose();
	errno = serrno;

	return (status);
}
@


1.19
log
@change a local char * to unsigned, to ease ctype handling
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.18 2011/07/22 01:11:05 millert Exp $	*/
@


1.18
log
@Speed up igetnext() by passing the record we want to parse in to
getent() as toprec.  Makesd cap_mkdb faster when building termino.db.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.17 2011/07/04 21:34:54 nicm Exp $	*/
d238 1
a238 1
				c = *bp++;
d601 1
a601 1
			c = *bp++;
@


1.17
log
@Nuke a load of trailing whitespace; no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.16 2009/11/11 23:49:01 nicm Exp $	*/
d53 1
a53 1
static int 	 getent(char **, u_int *, char **, int, char *, int);
d114 2
a115 2
 * Getent implements the functions of igetent.  If fd is non-negative,
 * *db_array has already been opened and fd is the open file descriptor.  We
d132 1
a132 1
getent(char **cap, u_int *len, char **db_array, int fd, char *name, int depth)
d146 15
d172 1
a175 1

d183 2
a184 2
		if (fd >= 0) {
			(void)lseek(fd, (off_t)0, SEEK_SET);
d187 2
a188 2
			fd = open(*db_p, O_RDONLY, 0);
			if (fd < 0) {
d215 1
a215 2
			 * Read in a line implementing (\, newline)
			 * line continuation.
d220 1
a220 1
					int n;
d222 3
a224 2
					n = read(fd, buf, sizeof(buf));
					if (n <= 0) {
d226 3
a228 7
							(void)close(fd);
						if (n < 0) {
							free(record);
							return (-2);
						} else {
							fd = -1;
							eof = 1;
d231 2
d241 1
a241 1
						int n;
d243 3
a245 2
						n = read(fd, buf, sizeof(buf));
						if (n <= 0) {
d247 3
a249 7
								(void)close(fd);
							if (n < 0) {
								free(record);
								return (-2);
							} else {
								fd = -1;
								eof = 1;
d252 2
d272 1
a272 1
					u_int pos;
d275 1
a275 1
					pos = rp - record;
d282 1
a282 1
							(void)close(fd);
d287 1
a287 1
					rp = record + pos;
d327 1
a327 1
	{
d361 1
a361 1
			iret = getent(&icap, &ilen, db_p, fd, tc, depth+1);
d368 1
a368 1
						(void)close(fd);
d403 1
a403 1
				u_int pos, tcpos, tcposend;
d406 1
a406 1
				pos = rp - record;
d408 2
a409 2
				tcpos = tcstart - record;
				tcposend = tcend - record;
d415 1
a415 1
						(void)close(fd);
d421 3
a423 3
				rp = record + pos;
				tcstart = record + tcpos;
				tcend = record + tcposend;
d448 1
a448 1
		(void)close(fd);
d530 1
a530 1
igetnext(char **bp, char **db_array)
d532 6
a537 4
	size_t len;
	int status, done;
	char *cp, *line, *rp, *np, buf[BSIZE], nbuf[BSIZE];
	u_int dummy;
d542 23
a564 4
	if (pfp == NULL && (pfp = fopen(*dbp, "r")) == NULL) {
		(void)igetclose();
		return (-1);
	}
d566 9
a574 17
		line = fgetln(pfp, &len);
		if (line == NULL) {
			if (ferror(pfp)) {
				(void)igetclose();
				return (-1);
			} else {
				(void)fclose(pfp);
				pfp = NULL;
				if (*++dbp == NULL) {
					(void)igetclose();
					return (0);
				} else if ((pfp =
				    fopen(*dbp, "r")) == NULL) {
					(void)igetclose();
					return (-1);
				} else
					continue;
d576 3
a578 5
		} else
			line[len - 1] = '\0';/* XXX - assumes newline */
		if (len == 1) {
			slash = 0;
			continue;
a579 12
		if (isspace(*line) ||
		    *line == ',' || *line == '#' || slash) {
			if (line[len - 2] == '\\')
				slash = 1;
			else
				slash = 0;
			continue;
		}
		if (line[len - 2] == '\\')
			slash = 1;
		else
			slash = 0;
d582 1
a582 1
		 * Line points to a name line.
d584 1
a584 2
		done = 0;
		np = nbuf;
d586 10
a595 5
			for (cp = line; *cp != '\0'; cp++) {
				if (*cp == ',') {
					*np++ = ',';
					done = 1;
					break;
d597 2
a598 1
				*np++ = *cp;
d600 13
a612 9
			if (done) {
				*np = '\0';
				break;
			} else { /* name field extends beyond the line */
				line = fgetln(pfp, &len);
				if (line == NULL) {
					if (ferror(pfp)) {
						(void)igetclose();
						return (-1);
d614 6
a619 6
					/* Move on to next file. */
					(void)fclose(pfp);
					pfp = NULL;
					++dbp;
					/* NUL terminate nbuf. */
					*np = '\0';
d621 21
a641 3
				} else
					/* XXX - assumes newline */
					line[len - 1] = '\0';
d644 11
a654 6
		rp = buf;
		for(cp = nbuf; *cp != '\0'; cp++)
			if (*cp == '|' || *cp == ',')
				break;
			else
				*rp++ = *cp;
d656 17
a672 4
		*rp = '\0';
		status = getent(bp, &dummy, db_array, -1, buf, 0);
		if (status == -2 || status == -3)
			(void)igetclose();
d674 1
a674 3
		return (status + 1);
	}
	/* NOTREACHED */
@


1.16
log
@Fix memory leaks found by parfait.

ok deraadt@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.15 2009/10/27 23:59:36 deraadt Exp $	*/
d35 1
a35 1
#include <errno.h>	
d138 1
a138 1
	
d207 1
a207 1
		
d224 1
a224 1
	
d255 1
a255 1
				 * Enforce loop invariant: if no room 
d280 1
a280 1
				
d286 1
a286 1
	
d364 1
a364 1
					*(s - 1) = ',';			
d368 1
a368 1
					
d429 1
a429 1
	
d439 1
a439 1
		if ((s = 
d447 1
a447 1
		
d452 1
a452 1
}	
d513 1
a513 1
 * Igetnext() gets either the first or next entry in the logical database 
d570 1
a570 1
		/* 
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.14 2007/05/09 03:07:19 deraadt Exp $	*/
d306 2
a307 1
	if (!foundit)
d309 1
@


1.14
log
@typo in license found by ray; verified repair using my old archives...
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.13 2007/05/07 03:53:46 ray Exp $	*/
a30 4

#ifndef lint
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.13 2007/05/07 03:53:46 ray Exp $";
#endif /* not lint */
@


1.13
log
@Compare chars with '\0', not NULL.
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.12 2007/05/07 02:23:13 ray Exp $	*/
d17 1
a17 1
 * 4. The name of the author may not be used to endorse or promote products
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.12 2007/05/07 02:23:13 ray Exp $";
@


1.12
log
@Replace manual loops with strcspn and plug realloc memory leaks.

OK jaredy@@ and moritz@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.11 2007/05/06 01:12:25 ray Exp $	*/
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.11 2007/05/06 01:12:25 ray Exp $";
d609 1
a609 1
		for(cp = nbuf; *cp != NULL; cp++)
@


1.11
log
@Grammar.
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.10 2006/03/18 03:55:09 ray Exp $	*/
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.10 2006/03/18 03:55:09 ray Exp $";
d140 1
a140 1
	char *record;
d269 3
a271 2
					record = realloc(record, newsize);
					if (record == NULL) {
d277 1
d318 1
a318 1
		char *newicap, *s;
d342 5
a346 9
			s = tc;
			for (;;)
				if (*s == '\0')
					break;
				else
					if (*s++ == ',') {
						*(s - 1) = '\0';
						break;
					}
d374 3
a376 7
			s = newicap;
			for (;;)
				if (*s == '\0')
					break;
				else
					if (*s++ == ',')
						break;
d400 3
a402 2
				record = realloc(record, newsize);
				if (record == NULL) {
d409 1
d440 2
a441 2
	if (r_end > rp)
		if ((record = 
d443 1
d446 3
a448 1
		}
@


1.10
log
@In all these cases pfp != NULL.  I also sneaked in some KNF.

Okay jaredy, millert@@, and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.9 2006/03/10 05:20:35 ray Exp $	*/
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.9 2006/03/10 05:20:35 ray Exp $";
d280 1
a280 1
				/* loop invariant let's us do this */
@


1.9
log
@Don't ferror() after fclose().
Don't dereference NULL pointer if file is truncated.
Sync with cgetnext(3).

ok otto and millert
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.8 2006/02/20 09:23:26 jmc Exp $	*/
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.8 2006/02/20 09:23:26 jmc Exp $";
d535 1
a535 1
	for(;;) {
d537 1
a537 1
		if (line == NULL && pfp) {
d592 1
a592 1
				if (line == NULL && pfp) {
@


1.8
log
@fix some typos in comments; from ray lai
ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.7 2003/06/10 22:20:45 deraadt Exp $	*/
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.7 2003/06/10 22:20:45 deraadt Exp $";
a537 1
			(void)fclose(pfp);
d542 2
d555 1
a555 1
			line[len - 1] = '\0';
a592 1
					(void)fclose(pfp);
d597 7
d605 1
@


1.7
log
@mostly ansi cleanup; pval ok
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.6 2003/06/04 16:24:45 deraadt Exp $	*/
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.6 2003/06/04 16:24:45 deraadt Exp $";
d65 1
a65 1
 * Cgetcap searches the capability record buf for the capability cap with
d458 1
a458 1
 * Cgetmatch will return 0 if name is one of the names of the capability
d516 1
a516 1
 * Cgetnext() gets either the first or next entry in the logical database 
@


1.6
log
@term 3 & 4 from tholo after permission
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.5 2002/02/16 21:27:44 millert Exp $	*/
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.5 2002/02/16 21:27:44 millert Exp $";
d77 1
a77 3
igetcap(buf, cap, type)
	char *buf, *cap;
	int type;
d136 1
a136 4
getent(cap, len, db_array, fd, name, depth)
	char **cap, **db_array, *name;
	u_int *len;
	int fd, depth;
d462 1
a462 2
igetmatch(buf, name)
	char *buf, *name;
d504 1
a504 1
igetclose()
d521 1
a521 3
igetnext(bp, db_array)
        char **bp;
	char **db_array;
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.4 2001/11/19 19:02:13 mpech Exp $	*/
a16 3
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by SigmaSoft, Th.  Lockert.
d33 1
a33 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.4 2001/11/19 19:02:13 mpech Exp $";
@


1.4
log
@kill more registers

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.3 2001/06/18 18:17:39 millert Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.3 2001/06/18 18:17:39 millert Exp $";
d60 4
a63 4
static int 	 getent __P((char **, u_int *, char **, int, char *, int));
static char	*igetcap __P((char *, char *, int));
static int	 igetmatch __P((char *, char *));
static int	 igetclose __P((void));
d65 1
a65 1
int	igetnext __P((char **, char **));
@


1.3
log
@kill useless include of db.h
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.2 2000/09/22 22:22:22 naddy Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.2 2000/09/22 22:22:22 naddy Exp $";
d84 1
a84 1
	register char *bp, *cp;
d146 1
a146 1
	register char *r_end, *rp, **db_p;
d196 2
a197 2
		register char *b_end, *bp;
		register int c;
d324 2
a325 2
		register char *newicap, *s;
		register int newilen;
d473 1
a473 1
	register char *np, *bp;
d531 1
a531 1
        register char **bp;
@


1.2
log
@- move break from loop on EOF in order to make cap_mkdb not ignore the final
  record in terminfo mode
- while we're here fix indentation, spelling
okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.1 1999/03/05 04:47:45 tholo Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.1 1999/03/05 04:47:45 tholo Exp $";
a41 1
#include <db.h>
@


1.1
log
@Merge cap_mkdb(1) and info_mkdb(1)
@
text
@d1 1
a1 1
/*	$OpenBSD: getinfo.c,v 1.4 1998/07/13 02:11:32 millert Exp $	*/
d36 1
a36 1
static char rcsid[] = "$OpenBSD: getinfo.c,v 1.4 1998/07/13 02:11:32 millert Exp $";
a290 6

			/*
			 * If encountered eof check next file.
			 */
			if (eof)
				break;
d305 6
@

