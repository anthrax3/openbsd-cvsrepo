head	1.9;
access;
symbols
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7;
locks; strict;
comment	@ * @;


1.9
date	2009.04.21.19.14.33;	author ratchov;	state dead;
branches;
next	1.8;

1.8
date	2009.04.13.16.05.50;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.03.19.44.58;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.21.21.29.01;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.17.10.39.53;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.17.07.19.27;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.11.19.39.35;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.28.23.00.08;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.27.00.26.33;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@move src/lib/libsndio/sndio.h into src/include where other include
files leave.

requested by deraadt@@, ok miod@@
@
text
@/*	$OpenBSD: sndio.h,v 1.8 2009/04/13 16:05:50 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef SNDIO_H
#define SNDIO_H

#include <sys/param.h>

/*
 * private ``handle'' structure
 */
struct sio_hdl;

/*
 * parameters of a full-duplex stream
 */
struct sio_par {
	unsigned bits;		/* bits per sample */
	unsigned bps;		/* bytes per sample */
	unsigned sig;		/* 1 = signed, 0 = unsigned */
	unsigned le;		/* 1 = LE, 0 = BE byte order */
	unsigned msb;		/* 1 = MSB, 0 = LSB aligned */
	unsigned rchan;		/* number channels for recording direction */
	unsigned pchan;		/* number channels for playback direction */
	unsigned rate;		/* frames per second */
	unsigned bufsz;		/* end-to-end buffer size */
#define SIO_IGNORE	0	/* pause during xrun */
#define SIO_SYNC	1	/* resync after xrun */
#define SIO_ERROR	2	/* terminate on xrun */
	unsigned xrun;		/* what to do on overruns/underruns */
	unsigned round;		/* optimal bufsz divisor */
	unsigned appbufsz;	/* minimum buffer size */
	int __pad[3];		/* for future use */
	int __magic;		/* for internal/debug purposes only */
};

/*
 * capabilities of a stream
 */
struct sio_cap {
#define SIO_NENC	8
#define SIO_NCHAN	8
#define SIO_NRATE	16
#define SIO_NCONF	4
	struct sio_enc {			/* allowed sample encodings */
		unsigned bits;
		unsigned bps;
		unsigned sig;
		unsigned le;
		unsigned msb;
	} enc[SIO_NENC];
	unsigned rchan[SIO_NCHAN];	/* allowed values for rchan */
	unsigned pchan[SIO_NCHAN];	/* allowed values for pchan */
	unsigned rate[SIO_NRATE];	/* allowed rates */
	int __pad[7];			/* for future use */
	unsigned nconf;			/* number of elements in confs[] */
	struct sio_conf {
		unsigned enc;		/* mask of enc[] indexes */
		unsigned rchan;		/* mask of chan[] indexes (rec) */
		unsigned pchan;		/* mask of chan[] indexes (play) */
		unsigned rate;		/* mask of rate[] indexes */
	} confs[SIO_NCONF];
};

#define SIO_XSTRINGS { "ignore", "sync", "error" }

/*
 * mode bitmap
 */
#define SIO_PLAY	1
#define SIO_REC		2

/*
 * maximum size of the encording string (the longest possible
 * encoding is ``s24le3msb'')
 */
#define SIO_ENCMAX	10

/*
 * default bytes per sample for the given bits per sample
 */
#define SIO_BPS(bits) (((bits) <= 8) ? 1 : (((bits) <= 16) ? 2 : 4))

/*
 * default value of "sio_par->le" flag
 */
#if BYTE_ORDER == LITTLE_ENDIAN
#define SIO_LE_NATIVE 1
#else
#define SIO_LE_NATIVE 0
#endif

/*
 * default device for the sun audio(4) back-end
 */
#define SIO_SUN_PATH	"/dev/audio"

/*
 * default socket name for the aucat(1) back-end
 */
#define SIO_AUCAT_PATH	"default"

/*
 * maximum value of volume, eg. for sio_setvol()
 */
#define SIO_MAXVOL 127

#ifdef __cplusplus
extern "C" {
#endif

struct pollfd;

int sio_strtoenc(struct sio_par *, char *);
int sio_enctostr(struct sio_par *, char *);
void sio_initpar(struct sio_par *);

struct sio_hdl *sio_open(char *, unsigned, int);
void sio_close(struct sio_hdl *);
int sio_setpar(struct sio_hdl *, struct sio_par *);
int sio_getpar(struct sio_hdl *, struct sio_par *);
int sio_getcap(struct sio_hdl *, struct sio_cap *);
void sio_onmove(struct sio_hdl *, void (*)(void *, int), void *);
size_t sio_write(struct sio_hdl *, void *, size_t);
size_t sio_read(struct sio_hdl *, void *, size_t);
int sio_start(struct sio_hdl *);
int sio_stop(struct sio_hdl *);
int sio_nfds(struct sio_hdl *);
int sio_pollfd(struct sio_hdl *, struct pollfd *, int);
int sio_revents(struct sio_hdl *, struct pollfd *);
int sio_eof(struct sio_hdl *);
int sio_setvol(struct sio_hdl *, unsigned);
void sio_onvol(struct sio_hdl *, void (*)(void *, unsigned), void *);

#ifdef __cplusplus
}
#endif

#endif /* !defined(SNDIO_H) */
@


1.8
log
@protypes in sndio.h make reference to struct pollfd; applications
that don't use sys/poll.h, wont compile with gcc2. Fix this by
declaring the pollfd structure

spotted by and ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio.h,v 1.7 2009/02/03 19:44:58 ratchov Exp $	*/
@


1.7
log
@in server mode, create /tmp/aucat-userid/ directory with
permissions 0700, and create sockets in it. This prevents
one local user to eavesdrop or disturb audio programs of
other users.

if you're using the ``-s socket'' option with an absolute
path as argument, please update it to use a socket name.

requested by many, bits from jakemsr and otto
ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio.h,v 1.6 2009/01/21 21:29:01 ratchov Exp $	*/
d124 2
@


1.6
log
@make declarations "C" to allow c++ code to compile
discussed with espie@@, ok jakemsr@@ and millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio.h,v 1.5 2009/01/17 10:39:53 ratchov Exp $	*/
d112 1
a112 1
 * default socket for the aucat(1) back-end
d114 1
a114 1
#define SIO_AUCAT_PATH	"/tmp/aucat.sock"
@


1.5
log
@cleanup: remove prototypes of inexistent functions, move few private
functions into private header file.
suggested by espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio.h,v 1.4 2008/12/17 07:19:27 ratchov Exp $	*/
d121 4
d145 4
@


1.4
log
@add a writable ``appbufsz'' field to the sa_par structure, containing
the program-part of the buffer size, ie the part that is subject to
underruns. Useful for apps like cdio(1) that don't have their own
rings, or to apps that have a minimum ring size constraint. Setting
the ``bufsz'' parameter becomes deprecated.
ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio.h,v 1.3 2008/11/11 19:39:35 ratchov Exp $	*/
a124 4
struct sio_hdl *sio_open_aucat(char *, unsigned, int);
struct sio_hdl *sio_open_sun(char *, unsigned, int);
struct sio_hdl *sio_open_wav(char *, unsigned, int);
struct sio_hdl *sio_open_raw(char *, unsigned, int);
a125 1

@


1.3
log
@expose a volume knob in the sndio API: add sio_setvol(3) and
sio_onvol(3) functions. The audio(4) backend tries to use the
inputs.dac, outputs.dac, outputs.output and outputs.master
controls (in this order). Add a sample file in
regress/lib/libsndio/vol/vol.c
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio.h,v 1.2 2008/10/28 23:00:08 jsg Exp $	*/
d31 9
a39 9
	unsigned bits;	/* bits per sample */
	unsigned bps;	/* bytes per sample */
	unsigned sig;	/* 1 = signed, 0 = unsigned */
	unsigned le;	/* 1 = LE, 0 = BE byte order */
	unsigned msb;	/* 1 = MSB, 0 = LSB aligned */
	unsigned rchan;	/* number channels for recording direction */
	unsigned pchan;	/* number channels for playback direction */
	unsigned rate;	/* frames per second */
	unsigned bufsz;	/* minimum buffer size */
d41 1
a41 1
#define SIO_SYNC		1	/* resync after xrun */
d43 5
a47 4
	unsigned xrun;	/* what to do on overruns/underruns */
	unsigned round;	/* optimal bufsz divisor */
	int __pad[4];	/* for future use */
	int __magic;	/* for internal/debug purposes only */
d54 1
a54 1
#define SIO_NENC		8
d83 2
a84 2
#define SIO_PLAY 1
#define SIO_REC	2
@


1.2
log
@sio_initpar() is supposed to return void like the documentation
says according to ratchov@@.  Make it so, and crank major.

ok ratchov@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio.h,v 1.1 2008/10/27 00:26:33 ratchov Exp $	*/
d115 5
d143 2
d146 1
a146 1
#endif /* !defined(LIBSIO_H) */
@


1.1
log
@rename libsa to libsndio
requested by many, "just go for it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: libsio.h,v 1.1 2008/10/26 08:49:44 ratchov Exp $	*/
d117 1
a117 1
int sio_initpar(struct sio_par *);
@

