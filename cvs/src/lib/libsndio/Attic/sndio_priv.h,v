head	1.9;
access;
symbols
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.9
date	2011.04.08.11.18.07;	author ratchov;	state dead;
branches;
next	1.8;

1.8
date	2009.07.25.11.15.56;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.15.13.06.40;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.15.13.04.52;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.17.10.39.53;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.21.10.03.25;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.17.10.00.50;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.11.19.39.35;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.27.00.26.33;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Clean up function naming: use sio_<backend>_ prefix for private
audio-related functions and put them in files named sio_<backend>.c
No behaviour changes.
@
text
@/*	$OpenBSD: sndio_priv.h,v 1.8 2009/07/25 11:15:56 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef SNDIO_PRIV_H
#define SNDIO_PRIV_H

#include <sys/param.h>
#include "sndio.h"

#ifdef DEBUG
#define DPRINTF(...)						\
	do {							\
		if (sio_debug > 0)				\
			fprintf(stderr, __VA_ARGS__);		\
	} while(0)
#define DPERROR(s)						\
	do {							\
		if (sio_debug > 0)				\
			perror(s);				\
	} while(0)
#else
#define DPRINTF(...) do {} while(0)
#define DPERROR(s) do {} while(0)
#endif

/*
 * private ``handle'' structure
 */
struct sio_hdl {
	struct sio_ops *ops;
	void (*move_cb)(void *, int);	/* call-back for realpos changes */
	void *move_addr;		/* user priv. data for move_cb */
	void (*vol_cb)(void *, unsigned); /* call-back for volume changes */
	void *vol_addr;			/* user priv. data for vol_cb */
	unsigned mode;			/* SIO_PLAY | SIO_REC */
	int started;			/* true if started */
	int nbio;			/* true if non-blocking io */
	int eof;			/* true if error occured */
#ifdef DEBUG
	unsigned long long pollcnt;	/* times sio_revents was called */
	unsigned long long wcnt;	/* bytes written with sio_write() */
	unsigned long long rcnt;	/* bytes read with sio_read() */
	long long realpos;
	struct timeval tv;
	struct sio_par par;
#endif
};

/*
 * operations every device should support
 */
struct sio_ops {
	void (*close)(struct sio_hdl *);
	int (*setpar)(struct sio_hdl *, struct sio_par *);
	int (*getpar)(struct sio_hdl *, struct sio_par *);
	int (*getcap)(struct sio_hdl *, struct sio_cap *);
	size_t (*write)(struct sio_hdl *, const void *, size_t);
	size_t (*read)(struct sio_hdl *, void *, size_t);
	int (*start)(struct sio_hdl *);
	int (*stop)(struct sio_hdl *);
	int (*pollfd)(struct sio_hdl *, struct pollfd *, int);
	int (*revents)(struct sio_hdl *, struct pollfd *);
	int (*setvol)(struct sio_hdl *, unsigned);
	void (*getvol)(struct sio_hdl *);
};

struct sio_hdl *sio_open_aucat(const char *, unsigned, int);
struct sio_hdl *sio_open_sun(const char *, unsigned, int);
void sio_create(struct sio_hdl *, struct sio_ops *, unsigned, int);
void sio_destroy(struct sio_hdl *);
void sio_onmove_cb(struct sio_hdl *, int);
void sio_onvol_cb(struct sio_hdl *, unsigned);

#ifdef DEBUG
extern int sio_debug;
#endif

#endif /* !defined(SNDIO_PRIV_H) */
@


1.8
log
@use const qualifier in libsndio, making it slightly more consistent
with open(2) and write(2) syscalls.
from Thomas Pfaff, jakemsr is fine with it
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio_priv.h,v 1.7 2009/05/15 13:06:40 ratchov Exp $	*/
@


1.7
log
@in headers, macro definitions come first, prototypes come next
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio_priv.h,v 1.6 2009/05/15 13:04:52 ratchov Exp $	*/
d70 1
a70 1
	size_t (*write)(struct sio_hdl *, void *, size_t);
d80 2
a81 2
struct sio_hdl *sio_open_aucat(char *, unsigned, int);
struct sio_hdl *sio_open_sun(char *, unsigned, int);
@


1.6
log
@if DEBUG is defined, use a global debug level rather
than a per-stream debug level. No behaviour change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio_priv.h,v 1.5 2009/01/17 10:39:53 ratchov Exp $	*/
d23 16
a88 14

#define DPRINTF(...)						\
	do {							\
		if (sio_debug > 0)				\
			fprintf(stderr, __VA_ARGS__);		\
	} while(0)
#define DPERROR(s)						\
	do {							\
		if (sio_debug > 0)				\
			perror(s);				\
	} while(0)
#else
#define DPRINTF(...) do {} while(0)
#define DPERROR(s) do {} while(0)
@


1.5
log
@cleanup: remove prototypes of inexistent functions, move few private
functions into private header file.
suggested by espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio_priv.h,v 1.4 2008/12/21 10:03:25 ratchov Exp $	*/
a36 1
	int debug;			/* debug flag */	
d72 3
a74 1
#define DPRINTF(hdl,...)					\
d76 1
a76 1
		if ((hdl)->debug)				\
d79 1
a79 1
#define DPERROR(hdl,s)						\
d81 1
a81 1
		if ((hdl)->debug)				\
d85 2
a86 2
#define DPRINTF(hdl,...) do {} while(0)
#define DPERROR(hdl,s) do {} while(0)
@


1.4
log
@fix more spelling errors and typos,
from Thomas Pfaff <tpfaff(at)@@tp76.info>, thanks
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio_priv.h,v 1.3 2008/12/17 10:00:50 ratchov Exp $	*/
d65 2
@


1.3
log
@stop using stderr in the library, wrap all diagnostic fprintfs
so they are visible only when the DEBUG macro is #defined
and SIO_DEBUG env. variable is set.
requested by many, discussed with jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio_priv.h,v 1.2 2008/11/11 19:39:35 ratchov Exp $	*/
d17 2
a18 2
#ifndef LIBSIO_PRIV_H
#define LIBSIO_PRIV_H
d86 1
a86 1
#endif /* !defined(LIBSIO_PRIV_H) */
@


1.2
log
@expose a volume knob in the sndio API: add sio_setvol(3) and
sio_onvol(3) functions. The audio(4) backend tries to use the
inputs.dac, outputs.dac, outputs.output and outputs.master
controls (in this order). Add a sample file in
regress/lib/libsndio/vol/vol.c
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio_priv.h,v 1.1 2008/10/27 00:26:33 ratchov Exp $	*/
d69 16
@


1.1
log
@rename libsa to libsndio
requested by many, "just go for it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: libsio_priv.h,v 1.1 2008/10/26 08:49:44 ratchov Exp $	*/
d28 4
a31 2
	void (*cb_pos)(void *, int);	/* call-back for realpos changes */
	void *cb_addr;			/* user priv. data */
d61 2
d68 1
@

