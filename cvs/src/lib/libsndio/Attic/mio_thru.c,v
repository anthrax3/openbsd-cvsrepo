head	1.13;
access;
symbols
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6;
locks; strict;
comment	@ * @;


1.13
date	2011.04.12.21.40.22;	author ratchov;	state dead;
branches;
next	1.12;

1.12
date	2010.10.23.10.48.55;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.21.18.57.42;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2010.07.21.23.00.16;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.06.01.12.45;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.24.06.15.54;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.22.17.43.30;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.22.22.26.49;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.21.16.48.03;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.40.45;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.38.20;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.25.11.15.56;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.27;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Use mio_<backend>_ prefix for private midi-related functions and put
them in files named mio_<backend>.c
No behaviour change.
@
text
@/*	$OpenBSD: mio_thru.c,v 1.12 2010/10/23 10:48:55 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>

#include <errno.h>
#include <fcntl.h>
#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "amsg.h"
#include "mio_priv.h"

#define THRU_SOCKET "midithru"

struct thru_hdl {
	struct mio_hdl mio;
	int fd;
};

static void thru_close(struct mio_hdl *);
static size_t thru_read(struct mio_hdl *, void *, size_t);
static size_t thru_write(struct mio_hdl *, const void *, size_t);
static int thru_pollfd(struct mio_hdl *, struct pollfd *, int);
static int thru_revents(struct mio_hdl *, struct pollfd *);

static struct mio_ops thru_ops = {
	thru_close,
	thru_write,
	thru_read,
	thru_pollfd,
	thru_revents,
};

static struct mio_hdl *
thru_open(const char *str, char *sock, unsigned mode, int nbio)
{
	extern char *__progname;
	char unit[4], *sep, *opt;
	struct amsg msg;
	int s, n, todo;
	unsigned char *data;
	struct thru_hdl *hdl;
	struct sockaddr_un ca;
	socklen_t len = sizeof(struct sockaddr_un);
	uid_t uid;

	sep = strchr(str, '.');
	if (sep == NULL) {
		opt = "default";
		strlcpy(unit, str, sizeof(unit));
	} else {
		opt = sep + 1;
		if (sep - str >= sizeof(unit)) {
			DPRINTF("thru_open: %s: too long\n", str);
			return NULL;
		}
		strlcpy(unit, str, opt - str);
	}
	DPRINTF("thru_open: trying %s -> %s.%s\n", str, unit, opt);
	uid = geteuid();
	if (strchr(str, '/') != NULL)
		return NULL;
	snprintf(ca.sun_path, sizeof(ca.sun_path),
	    "/tmp/aucat-%u/%s%s", uid, sock, unit);
	ca.sun_family = AF_UNIX;

	hdl = malloc(sizeof(struct thru_hdl));
	if (hdl == NULL)
		return NULL;
	mio_create(&hdl->mio, &thru_ops, mode, nbio);

	s = socket(AF_UNIX, SOCK_STREAM, 0);
	if (s < 0)
		goto bad_free;
	while (connect(s, (struct sockaddr *)&ca, len) < 0) {
		if (errno == EINTR)
			continue;
		DPERROR("thru_open: connect");
		/* try shared server */
		snprintf(ca.sun_path, sizeof(ca.sun_path),
		    "/tmp/aucat/%s%s", sock, unit);
		while (connect(s, (struct sockaddr *)&ca, len) < 0) {
			if (errno == EINTR)
				continue;
			DPERROR("thru_open: connect");
			goto bad_connect;
		}
		break;
 	}
	if (fcntl(s, F_SETFD, FD_CLOEXEC) < 0) {
		DPERROR("FD_CLOEXEC");
		goto bad_connect;
	}
	hdl->fd = s;

	/*
	 * say hello to server
	 */
	AMSG_INIT(&msg);
	msg.cmd = AMSG_HELLO;
	msg.u.hello.version = AMSG_VERSION;
	msg.u.hello.mode = mode;
	strlcpy(msg.u.hello.opt, opt, sizeof(msg.u.hello.opt));
	strlcpy(msg.u.hello.who, __progname, sizeof(msg.u.hello.who));
	n = write(s, &msg, sizeof(struct amsg));
	if (n < 0) {
		DPERROR("thru_open");
		goto bad_connect;
	}
	if (n != sizeof(struct amsg)) {
		DPRINTF("thru_open: short write\n");
		goto bad_connect;
	}
	todo = sizeof(struct amsg);
	data = (unsigned char *)&msg;
	while (todo > 0) {
		n = read(s, data, todo);
		if (n < 0) {
			DPERROR("thru_open");
			goto bad_connect;
		}
		if (n == 0) {
			DPRINTF("thru_open: eof\n");
			goto bad_connect;
		}
		todo -= n;
		data += n;
	}
	if (msg.cmd != AMSG_ACK) {
		DPRINTF("thru_open: proto error\n");
		goto bad_connect;
	}
	if (nbio && fcntl(hdl->fd, F_SETFL, O_NONBLOCK) < 0) {
		DPERROR("thru_open: fcntl(NONBLOCK)");
		goto bad_connect;
	}
	return (struct mio_hdl *)hdl;
 bad_connect:
	while (close(s) < 0 && errno == EINTR)
		; /* retry */
 bad_free:
	free(hdl);
	return NULL;
}

struct mio_hdl *
mio_open_thru(const char *str, unsigned mode, int nbio)
{
	return thru_open(str, "midithru", mode, nbio);
}

struct mio_hdl *
mio_open_aucat(const char *str, unsigned mode, int nbio)
{
	return thru_open(str, "softaudio", mode, nbio);
}

static void
thru_close(struct mio_hdl *sh)
{
	struct thru_hdl *hdl = (struct thru_hdl *)sh;
	int rc;

	do {
		rc = close(hdl->fd);
	} while (rc < 0 && errno == EINTR);
	free(hdl);
}

static size_t
thru_read(struct mio_hdl *sh, void *buf, size_t len)
{
	struct thru_hdl *hdl = (struct thru_hdl *)sh;
	ssize_t n;

	while ((n = read(hdl->fd, buf, len)) < 0) {
		if (errno == EINTR)
			continue;
		if (errno != EAGAIN) {
			DPERROR("thru_read: read");
			hdl->mio.eof = 1;
		}
		return 0;
	}
	if (n == 0) {
		DPRINTF("thru_read: eof\n");
		hdl->mio.eof = 1;
		return 0;
	}
	return n;
}

static size_t
thru_write(struct mio_hdl *sh, const void *buf, size_t len)
{
	struct thru_hdl *hdl = (struct thru_hdl *)sh;
	ssize_t n;

	while ((n = write(hdl->fd, buf, len)) < 0) {
		if (errno == EINTR)
			continue;
		if (errno != EAGAIN) {
			DPERROR("thru_write: write");
			hdl->mio.eof = 1;
		}
 		return 0;
	}
	return n;
}

static int
thru_pollfd(struct mio_hdl *sh, struct pollfd *pfd, int events)
{
	struct thru_hdl *hdl = (struct thru_hdl *)sh;

	pfd->fd = hdl->fd;
	pfd->events = events;
	return 1;
}

static int
thru_revents(struct mio_hdl *sh, struct pollfd *pfd)
{
	return pfd->revents;
}
@


1.12
log
@add forgotten ``static''
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.11 2010/10/21 18:57:42 ratchov Exp $	*/
@


1.11
log
@use MODE_xxx and XRUN_xxx macros everywhere, and zap corresponding
AMSG_xxx macros, which in turns simplifies the code
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.10 2010/07/21 23:00:16 ratchov Exp $	*/
d54 1
a54 1
struct mio_hdl *
@


1.10
log
@remove unnecessary ``return 0'' statements,
from Remco <remco at d-compu.dyndns.org>, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.9 2010/07/06 01:12:45 ratchov Exp $	*/
d122 1
a122 5
	msg.u.hello.proto = 0;
	if (mode & MIO_IN)
		msg.u.hello.proto |= AMSG_MIDIIN;
	if (mode & MIO_OUT)
		msg.u.hello.proto |= AMSG_MIDIOUT;
@


1.9
log
@Handle all streams the same way because there's no actual
difference between audio files and client connections. Clean up
the way command line options are handled and clarify this in the
manual page: stream parameters (-Ccehjmrtvx) must precede stream
definitions (-ios) and per-device parameters (-abz) and stream
definitions (-ios) must precede device definitions (-f). Since
there's no ``server'' and ``non-server'' modes anymore, make the
-l option just detach the process.

ok and help from jakemsr and jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.8 2010/04/24 06:15:54 ratchov Exp $	*/
a228 1
			return 0;
@


1.8
log
@remove trailing spaces, from Alexandr Shadchin, thanks
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.7 2010/04/22 17:43:30 ratchov Exp $	*/
d58 1
d67 13
d84 1
a84 1
	    "/tmp/aucat-%u/%s%s", uid, sock, str);
d101 1
a101 1
		    "/tmp/aucat/%s%s", sock, str);
d127 1
a127 1
	strlcpy(msg.u.hello.opt, "default", sizeof(msg.u.hello.opt));
@


1.7
log
@Allow multiple users to share the same aucat server. If aucat is
run by root, it binds a shared address to the socket, cranks the
process priority and drops privileges. sio_open(3) will try to
connect to the private socket first (if any), then to the shared
socket. Only one user may have connections to aucat at a given
time.

based on discussions with henning, pyr and others
ok jacek, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.6 2009/10/22 22:26:49 ratchov Exp $	*/
d62 1
a62 1
	struct sockaddr_un ca;	
d76 1
a76 1
	mio_create(&hdl->mio, &thru_ops, mode, nbio);	
d228 1
a228 1
	pfd->events = events;	
@


1.6
log
@set protocol version number for midi too. Fixes aucat refusing
control connections.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.5 2009/08/21 16:48:03 ratchov Exp $	*/
d85 11
a95 2
		goto bad_connect;
	}
@


1.5
log
@make aucat(1) expose a MIDI device to control server behaviour in
realtime.  For now only the playback volume of individual streams can be
changed/monitored. To each stream is assigned a MIDI channel; the volume
is changed/monitored using the standard controller number 7.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.4 2009/07/26 12:40:45 ratchov Exp $	*/
d98 1
@


1.4
log
@Make ``static'' few functions that are prototyped as static but are not
defined as such
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.3 2009/07/26 12:38:20 ratchov Exp $	*/
d55 1
a55 1
mio_open_thru(const char *str, unsigned mode, int nbio)
d70 1
a70 1
	    "/tmp/aucat-%u/midithru%s", uid, str);
d84 1
a84 1
		DPERROR("mio_open_thru: connect");
d103 1
d107 1
a107 1
		DPERROR("mio_open_thru");
d111 1
a111 1
		DPRINTF("mio_open_thru: short write\n");
d119 1
a119 1
			DPERROR("mio_open_thru");
d123 1
a123 1
			DPRINTF("mio_open_thru: eof\n");
d130 1
a130 1
		DPRINTF("mio_open_thru: proto error\n");
d134 1
a134 1
		DPERROR("mio_open_thru: fcntl(NONBLOCK)");
d144 12
@


1.3
log
@sort and space headers as per style(9)
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.2 2009/07/25 11:15:56 ratchov Exp $	*/
d209 1
a209 1
int
@


1.2
log
@use const qualifier in libsndio, making it slightly more consistent
with open(2) and write(2) syscalls.
from Thomas Pfaff, jakemsr is fine with it
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_thru.c,v 1.1 2009/07/25 08:44:27 ratchov Exp $	*/
d21 1
d26 1
a27 1
#include <stdlib.h>
a28 1
#include <sys/types.h>
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sun.c,v 1.17 2009/05/15 13:16:58 ratchov Exp $	*/
d42 1
a42 1
static size_t thru_write(struct mio_hdl *, void *, size_t);
d55 1
a55 1
mio_open_thru(char *str, unsigned mode, int nbio)
d181 1
a181 1
thru_write(struct mio_hdl *sh, void *buf, size_t len)
@

