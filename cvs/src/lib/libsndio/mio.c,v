head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.6
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.8
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7;
locks; strict;
comment	@ * @;


1.20
date	2015.11.22.12.01.23;	author ratchov;	state Exp;
branches;
next	1.19;
commitid	qJB6f577aQuApYmn;

1.19
date	2015.01.16.16.48.52;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	0DYulI8hhujBHMcR;

1.18
date	2013.11.13.22.38.22;	author ratchov;	state Exp;
branches;
next	1.17;

1.17
date	2012.11.23.07.03.28;	author ratchov;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.27.12.08.25;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2012.05.23.19.25.11;	author ratchov;	state Exp;
branches;
next	1.14;

1.14
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.15.08.05.22;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2011.10.17.21.09.11;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.06.07.30.20;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.16.10.52.22;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.12.21.40.22;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.24.06.15.54;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.21.16.48.03;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.27.06.30.34;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.13.33.30;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.13.10.05;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.38.20;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.25.11.15.56;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.26;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Don't remove the type component from the device string before passing
it to the *_open() functions. It's more flexible this way. No behaviour
change.
@
text
@/*	$OpenBSD: mio.c,v 1.19 2015/01/16 16:48:52 deraadt Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "debug.h"
#include "mio_priv.h"

struct mio_hdl *
mio_open(const char *str, unsigned int mode, int nbio)
{
	static char portany[] = MIO_PORTANY;
	struct mio_hdl *hdl;

#ifdef DEBUG
	_sndio_debug_init();
#endif
	if ((mode & (MIO_OUT | MIO_IN)) == 0)
		return NULL;
	if (str == NULL) /* backward compat */
		str = portany;
	if (strcmp(str, portany) == 0 && !issetugid()) {
		str = getenv("MIDIDEVICE");
		if (str == NULL)
			str = portany;
	}
	if (strcmp(str, portany) == 0) {
		hdl = _mio_aucat_open("midithru/0", mode, nbio);
		if (hdl != NULL)
			return hdl;
		return _mio_rmidi_open("rmidi/0", mode, nbio);
	}
	if (_sndio_parsetype(str, "snd") ||
	    _sndio_parsetype(str, "midithru") ||
	    _sndio_parsetype(str, "midi"))
		return _mio_aucat_open(str, mode, nbio);
	if (_sndio_parsetype(str, "rmidi"))
		return _mio_rmidi_open(str, mode, nbio);
	DPRINTF("mio_open: %s: unknown device type\n", str);
	return NULL;
}

void
_mio_create(struct mio_hdl *hdl, struct mio_ops *ops,
    unsigned int mode, int nbio)
{
	hdl->ops = ops;
	hdl->mode = mode;
	hdl->nbio = nbio;
	hdl->eof = 0;
}

void
mio_close(struct mio_hdl *hdl)
{
	hdl->ops->close(hdl);
}

static int
mio_psleep(struct mio_hdl *hdl, int event)
{
	struct pollfd pfd[MIO_MAXNFDS];
	int revents;
	int nfds;

	nfds = mio_nfds(hdl);
	if (nfds > MIO_MAXNFDS) {
		DPRINTF("mio_psleep: %d: too many descriptors\n", nfds);
		hdl->eof = 1;
		return 0;
	}
	for (;;) {
		nfds = mio_pollfd(hdl, pfd, event);
		while (poll(pfd, nfds, -1) < 0) {
			if (errno == EINTR)
				continue;
			DPERROR("mio_psleep: poll");
			hdl->eof = 1;
			return 0;
		}
		revents = mio_revents(hdl, pfd);
		if (revents & POLLHUP) {
			DPRINTF("mio_psleep: hang-up\n");
			return 0;
		}
		if (revents & event)
			break;
	}
	return 1;
}

size_t
mio_read(struct mio_hdl *hdl, void *buf, size_t len)
{
	unsigned int n;
	char *data = buf;
	size_t todo = len;

	if (hdl->eof) {
		DPRINTF("mio_read: eof\n");
		return 0;
	}
	if (!(hdl->mode & MIO_IN)) {
		DPRINTF("mio_read: not input device\n");
		hdl->eof = 1;
		return 0;
	}
	if (len == 0) {
		DPRINTF("mio_read: zero length read ignored\n");
		return 0;
	}
	while (todo > 0) {
		n = hdl->ops->read(hdl, data, todo);
		if (n == 0 && hdl->eof)
			break;
		data += n;
		todo -= n;
		if (n > 0 || hdl->nbio)
			break;
		if (!mio_psleep(hdl, POLLIN))
			break;
	}
	return len - todo;
}

size_t
mio_write(struct mio_hdl *hdl, const void *buf, size_t len)
{
	unsigned int n;
	const unsigned char *data = buf;
	size_t todo = len;

	if (hdl->eof) {
		DPRINTF("mio_write: eof\n");
		return 0;
	}
	if (!(hdl->mode & MIO_OUT)) {
		DPRINTF("mio_write: not output device\n");
		hdl->eof = 1;
		return 0;
	}
	if (len == 0) {
		DPRINTF("mio_write: zero length write ignored\n");
		return 0;
	}
	if (todo == 0) {
		DPRINTF("mio_write: zero length write ignored\n");
		return 0;
	}
	while (todo > 0) {
		n = hdl->ops->write(hdl, data, todo);
		if (n == 0) {
			if (hdl->nbio || hdl->eof)
				break;
			if (!mio_psleep(hdl, POLLOUT))
				break;
			continue;
		}
		data += n;
		todo -= n;
	}
	return len - todo;
}

int
mio_nfds(struct mio_hdl *hdl)
{
	return hdl->ops->nfds(hdl);
}

int
mio_pollfd(struct mio_hdl *hdl, struct pollfd *pfd, int events)
{
	if (hdl->eof)
		return 0;
	return hdl->ops->pollfd(hdl, pfd, events);
}

int
mio_revents(struct mio_hdl *hdl, struct pollfd *pfd)
{
	if (hdl->eof)
		return POLLHUP;
	return hdl->ops->revents(hdl, pfd);
}

int
mio_eof(struct mio_hdl *hdl)
{
	return hdl->eof;
}
@


1.19
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.18 2013/11/13 22:38:22 ratchov Exp $	*/
a37 1
	const char *p;
d52 1
a52 1
		hdl = _mio_aucat_open("/0", mode, nbio, 1);
d55 1
a55 11
		return _mio_rmidi_open("/0", mode, nbio);
	}
	if ((p = _sndio_parsetype(str, "snd")) != NULL ||
	    (p = _sndio_parsetype(str, "aucat")) != NULL)
		return _mio_aucat_open(p, mode, nbio, 0);
	if ((p = _sndio_parsetype(str, "midithru")) != NULL)
		return _mio_aucat_open(p, mode, nbio, 1);
	if ((p = _sndio_parsetype(str, "midi")) != NULL)
		return _mio_aucat_open(p, mode, nbio, 2);
	if ((p = _sndio_parsetype(str, "rmidi")) != NULL) {
		return _mio_rmidi_open(p, mode, nbio);
d57 6
@


1.18
log
@Prefix by '_' symbols that are not part of the API.

ok deraadt, guenther
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a17 1
#include <sys/param.h>
@


1.17
log
@Remplace aucat server by a new sndiod daemon aimed to be simpler
smaller and faster than aucat. It's a drop in replacement with the
following exceptions that don't affect the default setup:
  - The sample rate and the encoding are a per-device parameters
    thus -r and -e options must precede the corresponding -f option
  - MIDI thru boxes are dynamically created and no -M option
    is required anymore, so -M was removed.
  - MIDI ports are exposed with a new ``midi/N'' name, rather
    than abusing MIDI thru boxes.
with help from armani@@, ok deraadt@@
@
text
@d42 1
a42 1
	sndio_debug_init();
d54 1
a54 1
		hdl = mio_aucat_open("/0", mode, nbio, 1);
d57 1
a57 1
		return mio_rmidi_open("/0", mode, nbio);
d59 9
a67 9
	if ((p = sndio_parsetype(str, "snd")) != NULL ||
	    (p = sndio_parsetype(str, "aucat")) != NULL)
		return mio_aucat_open(p, mode, nbio, 0);
	if ((p = sndio_parsetype(str, "midithru")) != NULL)
		return mio_aucat_open(p, mode, nbio, 1);
	if ((p = sndio_parsetype(str, "midi")) != NULL)
		return mio_aucat_open(p, mode, nbio, 2);
	if ((p = sndio_parsetype(str, "rmidi")) != NULL) {
		return mio_rmidi_open(p, mode, nbio);
d74 1
a74 1
mio_create(struct mio_hdl *hdl, struct mio_ops *ops,
@


1.16
log
@make midi code use non-blocking i/o as does audio code, in order
to make both look similar
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.15 2012/05/23 19:25:11 ratchov Exp $	*/
d64 2
@


1.15
log
@Make the "default" string a valid device name that has the same effect
as NULL has. This will (hopefully) simplify ports where the user
passes the device string.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.14 2012/04/11 06:05:43 ratchov Exp $	*/
d64 1
a64 1
	if ((p = sndio_parsetype(str, "rmidi")) != NULL)
d66 1
d87 33
d123 4
d140 12
a151 1
	return hdl->ops->read(hdl, buf, len);
d157 4
d174 17
a190 1
	return hdl->ops->write(hdl, buf, len);
d196 1
a196 1
	return 1;
@


1.14
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.13 2011/11/15 08:05:22 ratchov Exp $	*/
d37 1
d46 3
a48 1
	if (str == NULL && !issetugid())
d50 4
a53 1
	if (str == NULL) {
@


1.13
log
@Add a "device number" component in sndio(7) device names, allowing a
single aucat instance to handle all audio and MIDI services. Since
this partially breaks compatibility, this is a opportunitiy to fix few
other design mistakes (eg ':' being used by inet6, type name vs api
name confusion, etc..). This leads to the following names:

        type[@@hostname][,unit]/devnum[.option]

The device number is the minor device number for direct hardware
access (ie the 'N' in /dev/audioN). For aucat, this is the occurence
number of the -f (or -M) option.

There's a compatibility hook to keep old names working if only one
aucat server is running.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.12 2011/10/17 21:09:11 ratchov Exp $	*/
d35 1
a35 1
mio_open(const char *str, unsigned mode, int nbio)
d65 2
a66 1
mio_create(struct mio_hdl *hdl, struct mio_ops *ops, unsigned mode, int nbio)
@


1.12
log
@Remove midicat since aucat can now be used instead of midicat
with almost the same syntax (roughly an extra -M option).
Thru boxes are created with aucat, and corresponding MIDI port
names have the "aucat" prefix instead of "midithru". The old
device name will still work some time for backward compatibility.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.11 2011/05/06 07:30:20 ratchov Exp $	*/
a36 3
	static char prefix_midithru[] = "midithru";
	static char prefix_rmidi[] = "rmidi";
	static char prefix_aucat[] = "aucat";
d38 1
a38 2
	char *sep;
	int len;
d48 1
a48 1
		hdl = mio_aucat_open("0", mode, nbio);
d51 1
a51 1
		return mio_rmidi_open("0", mode, nbio);
d53 7
a59 15
	sep = strchr(str, ':');
	if (sep == NULL) {
		DPRINTF("mio_open: %s: ':' missing in device name\n", str);
		return NULL;
	}
	len = sep - str;
	if (len == (sizeof(prefix_midithru) - 1) &&
	    memcmp(str, prefix_midithru, len) == 0)
		return mio_aucat_open(sep + 1, mode, nbio);
	if (len == (sizeof(prefix_aucat) - 1) &&
	    memcmp(str, prefix_aucat, len) == 0)
		return mio_aucat_open(sep + 1, mode, nbio);
	if (len == (sizeof(prefix_rmidi) - 1) &&
	    memcmp(str, prefix_rmidi, len) == 0)
		return mio_rmidi_open(sep + 1, mode, nbio);
@


1.11
log
@remove almost two years old hack to support legacy audio/midi
device names
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.10 2011/04/16 10:52:22 ratchov Exp $	*/
d52 1
a52 1
		hdl = mio_midithru_open("0", mode, nbio);
d65 1
a65 1
		return mio_midithru_open(sep + 1, mode, nbio);
@


1.10
log
@Make aucat audio and midi backends share the same code to communicate
with the server. As we're at it use the same protocol for midi and
audio. Now, both audio and midi code use the same SNDIO_DEBUG environment
variable to turn on/off DPRINTF's.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.9 2011/04/12 21:40:22 ratchov Exp $	*/
d41 1
a41 2
	struct stat sb;
	char *sep, buf[4];
d59 2
a60 9
		/*
		 * try legacy "/dev/rmidioxxx" device name
		 */
		if (stat(str, &sb) < 0 || !S_ISCHR(sb.st_mode)) {
			DPRINTF("mio_open: %s: missing ':' separator\n", str);
			return NULL;
		}
		snprintf(buf, sizeof(buf), "%u", minor(sb.st_rdev));
		return mio_rmidi_open(buf, mode, nbio);
a61 1

@


1.9
log
@Use mio_<backend>_ prefix for private midi-related functions and put
them in files named mio_<backend>.c
No behaviour change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.8 2010/04/24 06:15:54 ratchov Exp $	*/
d31 1
a33 7
#ifdef DEBUG
/*
 * debug level, -1 means uninitialized
 */
int mio_debug = -1;
#endif

d44 1
d46 1
a46 7
	char *dbg;

	if (mio_debug < 0) {
		dbg = issetugid() ? NULL : getenv("MIO_DEBUG");
		if (!dbg || sscanf(dbg, "%u", &mio_debug) != 1)
			mio_debug = 0;
	}
@


1.8
log
@remove trailing spaces, from Alexandr Shadchin, thanks
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.7 2009/08/21 16:48:03 ratchov Exp $	*/
d64 1
a64 1
		hdl = mio_open_thru("0", mode, nbio);
d67 1
a67 1
		return mio_open_rmidi("0", mode, nbio);
d79 1
a79 1
		return mio_open_rmidi(buf, mode, nbio);
d85 1
a85 1
		return mio_open_thru(sep + 1, mode, nbio);
d88 1
a88 1
		return mio_open_aucat(sep + 1, mode, nbio);
d91 1
a91 1
		return mio_open_rmidi(sep + 1, mode, nbio);
@


1.7
log
@make aucat(1) expose a MIDI device to control server behaviour in
realtime.  For now only the playback volume of individual streams can be
changed/monitored. To each stream is assigned a MIDI channel; the volume
is changed/monitored using the standard controller number 7.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.6 2009/07/27 06:30:34 ratchov Exp $	*/
d58 1
a58 1
#endif	
d75 1
a75 1
			DPRINTF("mio_open: %s: missing ':' separator\n", str); 
d165 1
a165 1
{	
@


1.6
log
@don't use ``return'' in sio_close() and mio_close()
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.5 2009/07/26 13:33:30 ratchov Exp $	*/
d45 1
d86 3
@


1.5
log
@use ``sizeof(string) - 1'' rather than ``strlen(string)'' on static
strings. suggested by Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.4 2009/07/26 13:10:05 ratchov Exp $	*/
d104 1
a104 1
	return hdl->ops->close(hdl);
@


1.4
log
@remove the (bogus) special case when mio_open() is called with
a midi device name starting with a separator
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.3 2009/07/26 12:38:20 ratchov Exp $	*/
d82 1
a82 1
	if (len == strlen(prefix_midithru) &&
d85 1
a85 1
	if (len == strlen(prefix_rmidi) &&
@


1.3
log
@sort and space headers as per style(9)
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.2 2009/07/25 11:15:56 ratchov Exp $	*/
a74 15
			return NULL;
		}
		snprintf(buf, sizeof(buf), "%u", minor(sb.st_rdev));
		return mio_open_rmidi(buf, mode, nbio);
	}
	if (sep == str) {
		/*
		 * legacy "/dev/rmidixxx" device name
		 */
		if (stat(str, &sb) < 0) {
			DPERROR("mio_open: stat");
			return NULL;
		}
		if (!S_ISCHR(sb.st_mode)) {
			DPRINTF("mio_open: %s: not a char dev\n", str);
@


1.2
log
@use const qualifier in libsndio, making it slightly more consistent
with open(2) and write(2) syscalls.
from Thomas Pfaff, jakemsr is fine with it
@
text
@d1 1
a1 1
/*	$OpenBSD: mio.c,v 1.1 2009/07/25 08:44:26 ratchov Exp $	*/
d17 1
d22 1
d27 1
a28 1
#include <stdlib.h>
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio.c,v 1.15 2009/05/15 13:04:52 ratchov Exp $	*/
d39 1
a39 1
mio_open(char *str, unsigned mode, int nbio)
d140 1
a140 1
mio_write(struct mio_hdl *hdl, void *buf, size_t len)
@

