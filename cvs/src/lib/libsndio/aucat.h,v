head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2015.11.22.12.01.23;	author ratchov;	state Exp;
branches;
next	1.6;
commitid	qJB6f577aQuApYmn;

1.6
date	2013.11.13.22.38.22;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.02.10.24.58;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.15.08.05.22;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.17.21.09.11;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.18.23.57.35;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.16.10.52.22;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Don't remove the type component from the device string before passing
it to the *_open() functions. It's more flexible this way. No behaviour
change.
@
text
@#ifndef AUCAT_H
#define AUCAT_H

#include "amsg.h"

struct aucat {
	int fd;				/* socket */
	struct amsg rmsg, wmsg;		/* temporary messages */
	size_t wtodo, rtodo;		/* bytes to complete the packet */
#define RSTATE_MSG	0		/* message being received */
#define RSTATE_DATA	1		/* data being received */
	unsigned rstate;		/* one of above */
#define WSTATE_IDLE	2		/* nothing to do */
#define WSTATE_MSG	3		/* message being transferred */
#define WSTATE_DATA	4		/* data being transferred */
	unsigned wstate;		/* one of above */
	unsigned maxwrite;		/* bytes we're allowed to write */
};

int _aucat_rmsg(struct aucat *, int *);
int _aucat_wmsg(struct aucat *, int *);
size_t _aucat_rdata(struct aucat *, void *, size_t, int *);
size_t _aucat_wdata(struct aucat *, const void *, size_t, unsigned, int *);
int _aucat_open(struct aucat *, const char *, unsigned);
void _aucat_close(struct aucat *, int);
int _aucat_pollfd(struct aucat *, struct pollfd *, int);
int _aucat_revents(struct aucat *, struct pollfd *);
int _aucat_setfl(struct aucat *, int, int *);

#endif /* !defined(AUCAT_H) */
@


1.6
log
@Prefix by '_' symbols that are not part of the API.

ok deraadt, guenther
@
text
@d24 1
a24 1
int _aucat_open(struct aucat *, const char *, unsigned, unsigned);
@


1.5
log
@Use dedicated messages for flow control instead of abusing clock tick
messages and enable flow control for MIDI. Since this requires protocol
version bump, both sndiod and libsndio must be kept up to date to work
together.
@
text
@d20 9
a28 9
int aucat_rmsg(struct aucat *, int *);
int aucat_wmsg(struct aucat *, int *);
size_t aucat_rdata(struct aucat *, void *, size_t, int *);
size_t aucat_wdata(struct aucat *, const void *, size_t, unsigned, int *);
int aucat_open(struct aucat *, const char *, unsigned, unsigned);
void aucat_close(struct aucat *, int);
int aucat_pollfd(struct aucat *, struct pollfd *, int);
int aucat_revents(struct aucat *, struct pollfd *);
int aucat_setfl(struct aucat *, int, int *);
@


1.4
log
@Add a "device number" component in sndio(7) device names, allowing a
single aucat instance to handle all audio and MIDI services. Since
this partially breaks compatibility, this is a opportunitiy to fix few
other design mistakes (eg ':' being used by inet6, type name vs api
name confusion, etc..). This leads to the following names:

        type[@@hostname][,unit]/devnum[.option]

The device number is the minor device number for direct hardware
access (ie the 'N' in /dev/audioN). For aucat, this is the occurence
number of the -f (or -M) option.

There's a compatibility hook to keep old names working if only one
aucat server is running.
@
text
@d17 1
@


1.3
log
@Remove midicat since aucat can now be used instead of midicat
with almost the same syntax (roughly an extra -M option).
Thru boxes are created with aucat, and corresponding MIDI port
names have the "aucat" prefix instead of "midithru". The old
device name will still work some time for backward compatibility.

ok deraadt
@
text
@d23 1
a23 1
int aucat_open(struct aucat *, const char *, unsigned);
@


1.2
log
@slightly cleanup by separating socket-specific code from
protocol specific code. No behaviour change
@
text
@d23 1
a23 1
int aucat_open(struct aucat *, const char *, unsigned, int);
@


1.1
log
@Make aucat audio and midi backends share the same code to communicate
with the server. As we're at it use the same protocol for midi and
audio. Now, both audio and midi code use the same SNDIO_DEBUG environment
variable to turn on/off DPRINTF's.
@
text
@d23 1
a23 1
int aucat_open(struct aucat *, const char *, char *, unsigned, int);
@

