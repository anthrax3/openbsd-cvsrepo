head	1.24;
access;
symbols
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.24
date	2016.01.09.08.27.24;	author ratchov;	state Exp;
branches;
next	1.23;
commitid	ScnbaRlQejqjUMct;

1.23
date	2015.12.20.11.29.29;	author ratchov;	state Exp;
branches;
next	1.22;
commitid	6m1XWJevm3uKBS61;

1.22
date	2015.11.30.02.41.45;	author ratchov;	state Exp;
branches;
next	1.21;
commitid	1n3movRoHLLZNH4X;

1.21
date	2015.11.24.11.03.18;	author ratchov;	state Exp;
branches;
next	1.20;
commitid	0iJyPS4tHK5WjOKD;

1.20
date	2015.11.22.12.01.23;	author ratchov;	state Exp;
branches;
next	1.19;
commitid	qJB6f577aQuApYmn;

1.19
date	2015.10.02.09.48.22;	author ratchov;	state Exp;
branches;
next	1.18;
commitid	wlyu2QA4h4oEsjiW;

1.18
date	2015.10.02.09.45.26;	author ratchov;	state Exp;
branches;
next	1.17;
commitid	qXiOnGsosyCwq3DG;

1.17
date	2015.10.02.09.40.57;	author ratchov;	state Exp;
branches;
next	1.16;
commitid	Jw5ZHptXjh7DRpJ1;

1.16
date	2015.10.02.09.30.04;	author ratchov;	state Exp;
branches;
next	1.15;
commitid	lugF0c3TKijEjIpt;

1.15
date	2015.02.16.06.07.56;	author ratchov;	state Exp;
branches;
next	1.14;
commitid	rcEISVsdnq2itdfq;

1.14
date	2014.08.15.03.51.40;	author guenther;	state Exp;
branches;
next	1.13;
commitid	ILfd29dGeQRUYnTr;

1.13
date	2013.11.13.22.38.22;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.27.12.08.25;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.15.08.05.22;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.16.10.52.22;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.12.21.40.22;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.21.23.00.16;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.24.06.15.54;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.01.08.32.23;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.26.12.40.45;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.38.20;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.25.11.15.56;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.26;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Make code fit in 80 columns, remove trailing spaces & tabs.
@
text
@/*	$OpenBSD: mio_rmidi.c,v 1.22 2015/11/30 02:41:45 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "debug.h"
#include "mio_priv.h"

#define DEVPATH_PREFIX	"/dev/rmidi"
#define DEVPATH_MAX 	(1 +		\
	sizeof(DEVPATH_PREFIX) - 1 +	\
	sizeof(int) * 3)

struct mio_rmidi_hdl {
	struct mio_hdl mio;
	int fd;
};

static void mio_rmidi_close(struct mio_hdl *);
static size_t mio_rmidi_read(struct mio_hdl *, void *, size_t);
static size_t mio_rmidi_write(struct mio_hdl *, const void *, size_t);
static int mio_rmidi_nfds(struct mio_hdl *);
static int mio_rmidi_pollfd(struct mio_hdl *, struct pollfd *, int);
static int mio_rmidi_revents(struct mio_hdl *, struct pollfd *);

static struct mio_ops mio_rmidi_ops = {
	mio_rmidi_close,
	mio_rmidi_write,
	mio_rmidi_read,
	mio_rmidi_nfds,
	mio_rmidi_pollfd,
	mio_rmidi_revents
};

int
mio_rmidi_getfd(const char *str, unsigned int mode, int nbio)
{
	const char *p;
	char path[DEVPATH_MAX];
	unsigned int devnum;
	int fd, flags;

#ifdef DEBUG
	_sndio_debug_init();
#endif
	p = _sndio_parsetype(str, "rmidi");
	if (p == NULL) {
		DPRINTF("mio_rmidi_getfd: %s: \"rsnd\" expected\n", str);
		return -1;
	}
	switch (*p) {
	case '/':
		p++;
		break;
	default:
		DPRINTF("mio_rmidi_getfd: %s: '/' expected\n", str);
		return -1;
	}
	p = _sndio_parsenum(p, &devnum, 255);
	if (p == NULL || *p != '\0') {
		DPRINTF("mio_rmidi_getfd: %s: number expected after '/'\n", str);
		return -1;
	}
	snprintf(path, sizeof(path), DEVPATH_PREFIX "%u", devnum);
	if (mode == (MIO_IN | MIO_OUT))
		flags = O_RDWR;
	else
		flags = (mode & MIO_OUT) ? O_WRONLY : O_RDONLY;
	while ((fd = open(path, flags | O_NONBLOCK | O_CLOEXEC)) < 0) {
		if (errno == EINTR)
			continue;
		DPERROR(path);
		return -1;
	}
	return fd;
}

struct mio_hdl *
mio_rmidi_fdopen(int fd, unsigned int mode, int nbio)
{
	struct mio_rmidi_hdl *hdl;

#ifdef DEBUG
	_sndio_debug_init();
#endif
	hdl = malloc(sizeof(struct mio_rmidi_hdl));
	if (hdl == NULL)
		return NULL;
	_mio_create(&hdl->mio, &mio_rmidi_ops, mode, nbio);
	hdl->fd = fd;
	return (struct mio_hdl *)hdl;
}

struct mio_hdl *
_mio_rmidi_open(const char *str, unsigned int mode, int nbio)
{
	struct mio_hdl *hdl;
	int fd;

	fd = mio_rmidi_getfd(str, mode, nbio);
	if (fd < 0)
		return NULL;
	hdl = mio_rmidi_fdopen(fd, mode, nbio);
	if (hdl != NULL)
		return hdl;
	while (close(fd) < 0 && errno == EINTR)
		; /* retry */
	return NULL;
}

static void
mio_rmidi_close(struct mio_hdl *sh)
{
	struct mio_rmidi_hdl *hdl = (struct mio_rmidi_hdl *)sh;
	int rc;

	do {
		rc = close(hdl->fd);
	} while (rc < 0 && errno == EINTR);
	free(hdl);
}

static size_t
mio_rmidi_read(struct mio_hdl *sh, void *buf, size_t len)
{
	struct mio_rmidi_hdl *hdl = (struct mio_rmidi_hdl *)sh;
	ssize_t n;

	while ((n = read(hdl->fd, buf, len)) < 0) {
		if (errno == EINTR)
			continue;
		if (errno != EAGAIN) {
			DPERROR("mio_rmidi_read: read");
			hdl->mio.eof = 1;
		}
		return 0;
	}
	if (n == 0) {
		DPRINTF("mio_rmidi_read: eof\n");
		hdl->mio.eof = 1;
		return 0;
	}
	return n;
}

static size_t
mio_rmidi_write(struct mio_hdl *sh, const void *buf, size_t len)
{
	struct mio_rmidi_hdl *hdl = (struct mio_rmidi_hdl *)sh;
	ssize_t n;

	while ((n = write(hdl->fd, buf, len)) < 0) {
		if (errno == EINTR)
			continue;
		if (errno != EAGAIN) {
			DPERROR("mio_rmidi_write: write");
			hdl->mio.eof = 1;
		}
		return 0;
	}
	return n;
}

static int
mio_rmidi_nfds(struct mio_hdl *sh)
{
	return 1;
}

static int
mio_rmidi_pollfd(struct mio_hdl *sh, struct pollfd *pfd, int events)
{
	struct mio_rmidi_hdl *hdl = (struct mio_rmidi_hdl *)sh;

	pfd->fd = hdl->fd;
	pfd->events = events;
	return 1;
}

static int
mio_rmidi_revents(struct mio_hdl *sh, struct pollfd *pfd)
{
	return pfd->revents;
}
@


1.23
log
@Expose internal functions necessary to open audio devices and midi
ports using existing file descriptors.
@
text
@d183 1
a183 1
 		return 0;
@


1.22
log
@MIO_IN needs O_RDONLY, not O_WRONLY
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 1
a59 1
static int
d67 3
d102 1
a102 1
static struct mio_hdl *
d107 3
@


1.21
log
@Fix confusion between SIO_xxx and MIO_xxx options (copy & paste error).
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.20 2015/11/22 12:01:23 ratchov Exp $	*/
d89 1
a89 1
		flags = (mode & MIO_IN) ? O_WRONLY : O_RDONLY;
@


1.20
log
@Don't remove the type component from the device string before passing
it to the *_open() functions. It's more flexible this way. No behaviour
change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.19 2015/10/02 09:48:22 ratchov Exp $	*/
d86 1
a86 1
	if (mode == (SIO_PLAY | SIO_REC))
d89 1
a89 1
		flags = (mode & SIO_PLAY) ? O_WRONLY : O_RDONLY;
@


1.19
log
@Validate that midi and audio device numbers are integers.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.18 2015/10/02 09:45:26 ratchov Exp $	*/
d59 2
a60 2
struct mio_hdl *
_mio_rmidi_open(const char *str, unsigned int mode, int nbio)
d62 1
a62 2
	int fd, flags;
	struct mio_rmidi_hdl *hdl;
d65 1
d67 6
a72 1
	switch (*str) {
d74 1
a74 1
		str++;
d77 2
a78 2
		DPRINTF("_mio_rmidi_open: %s: '/<devnum>' expected\n", str);
		return NULL;
d80 4
a83 4
	str = _sndio_parsenum(str, &devnum, 255);
	if (str == NULL || *str != '\0') {
		DPRINTF("_mio_rmidi_open: can't determine device number\n");
		return NULL;
a84 4
	hdl = malloc(sizeof(struct mio_rmidi_hdl));
	if (hdl == NULL)
		return NULL;
	_mio_create(&hdl->mio, &mio_rmidi_ops, mode, nbio);
d86 1
a86 1
	if (mode == (MIO_OUT | MIO_IN))
d89 1
a89 1
		flags = (mode & MIO_OUT) ? O_WRONLY : O_RDONLY;
d94 1
a94 1
		goto bad_free;
d96 12
d110 16
a125 2
 bad_free:
	free(hdl);
@


1.18
log
@As device path is known, use its size instead of PATH_MAX
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.17 2015/10/02 09:40:57 ratchov Exp $	*/
d65 1
d75 5
d84 1
a84 2

	snprintf(path, sizeof(path), DEVPATH_PREFIX "%s", str);
@


1.17
log
@Use macros for audio and midi device paths rather than hardcoded
strings. No object change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.16 2015/10/02 09:30:04 ratchov Exp $	*/
d34 4
d64 1
a64 1
	char path[PATH_MAX];
@


1.16
log
@fix typo in debug message
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.15 2015/02/16 06:07:56 ratchov Exp $	*/
d33 1
d75 1
a75 1
	snprintf(path, sizeof(path), "/dev/rmidi%s", str);
@


1.15
log
@Drop yet another hook for ':' char in midi device names.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.14 2014/08/15 03:51:40 guenther Exp $	*/
d66 1
a66 1
		DPRINTF("_sio_sun_open: %s: '/<devnum>' expected\n", str);
@


1.14
log
@Use O_CLOEXEC wherever we open a file and then call fcntl(F_SETFD, FD_CLOEXEC)
on it, simplifying error checking, reducing system calls, and improving
thread-safety for libraries.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.13 2013/11/13 22:38:22 ratchov Exp $	*/
a62 1
	case ':': /* XXX: for backward compat */
@


1.13
log
@Prefix by '_' symbols that are not part of the API.

ok deraadt, guenther
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d80 1
a80 1
	while ((fd = open(path, flags | O_NONBLOCK)) < 0) {
a85 4
	if (fcntl(fd, F_SETFD, FD_CLOEXEC) < 0) {
		DPERROR("FD_CLOEXEC");
		goto bad_close;
	}
a87 3
 bad_close:
	while (close(hdl->fd) < 0 && errno == EINTR)
		; /* retry */
@


1.12
log
@make midi code use non-blocking i/o as does audio code, in order
to make both look similar
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.11 2012/04/11 06:05:43 ratchov Exp $	*/
d55 1
a55 1
mio_rmidi_open(const char *str, unsigned int mode, int nbio)
d67 1
a67 1
		DPRINTF("sio_sun_open: %s: '/<devnum>' expected\n", str);
d73 1
a73 1
	mio_create(&hdl->mio, &mio_rmidi_ops, mode, nbio);
@


1.11
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.10 2011/11/15 08:05:22 ratchov Exp $	*/
d41 1
d49 1
d51 1
a51 1
	mio_rmidi_revents,
d80 1
a80 3
	if (nbio)
		flags |= O_NONBLOCK;
	while ((fd = open(path, flags)) < 0) {
d151 6
@


1.10
log
@Add a "device number" component in sndio(7) device names, allowing a
single aucat instance to handle all audio and MIDI services. Since
this partially breaks compatibility, this is a opportunitiy to fix few
other design mistakes (eg ':' being used by inet6, type name vs api
name confusion, etc..). This leads to the following names:

        type[@@hostname][,unit]/devnum[.option]

The device number is the minor device number for direct hardware
access (ie the 'N' in /dev/audioN). For aucat, this is the occurence
number of the -f (or -M) option.

There's a compatibility hook to keep old names working if only one
aucat server is running.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.9 2011/04/16 10:52:22 ratchov Exp $	*/
d53 1
a53 1
mio_rmidi_open(const char *str, unsigned mode, int nbio)
@


1.9
log
@Make aucat audio and midi backends share the same code to communicate
with the server. As we're at it use the same protocol for midi and
audio. Now, both audio and midi code use the same SNDIO_DEBUG environment
variable to turn on/off DPRINTF's.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.8 2011/04/12 21:40:22 ratchov Exp $	*/
d59 9
@


1.8
log
@Use mio_<backend>_ prefix for private midi-related functions and put
them in files named mio_<backend>.c
No behaviour change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.7 2010/07/21 23:00:16 ratchov Exp $	*/
d30 1
@


1.7
log
@remove unnecessary ``return 0'' statements,
from Remco <remco at d-compu.dyndns.org>, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.6 2010/04/24 06:15:54 ratchov Exp $	*/
d32 1
a32 3
#define RMIDI_PATH "/dev/rmidi0"

struct rmidi_hdl {
d37 12
a48 12
static void rmidi_close(struct mio_hdl *);
static size_t rmidi_read(struct mio_hdl *, void *, size_t);
static size_t rmidi_write(struct mio_hdl *, const void *, size_t);
static int rmidi_pollfd(struct mio_hdl *, struct pollfd *, int);
static int rmidi_revents(struct mio_hdl *, struct pollfd *);

static struct mio_ops rmidi_ops = {
	rmidi_close,
	rmidi_write,
	rmidi_read,
	rmidi_pollfd,
	rmidi_revents,
d52 1
a52 1
mio_open_rmidi(const char *str, unsigned mode, int nbio)
d55 1
a55 1
	struct rmidi_hdl *hdl;
d58 1
a58 1
	hdl = malloc(sizeof(struct rmidi_hdl));
d61 1
a61 1
	mio_create(&hdl->mio, &rmidi_ops, mode, nbio);
d91 1
a91 1
rmidi_close(struct mio_hdl *sh)
d93 1
a93 1
	struct rmidi_hdl *hdl = (struct rmidi_hdl *)sh;
d103 1
a103 1
rmidi_read(struct mio_hdl *sh, void *buf, size_t len)
d105 1
a105 1
	struct rmidi_hdl *hdl = (struct rmidi_hdl *)sh;
d112 1
a112 1
			DPERROR("rmidi_read: read");
d118 1
a118 1
		DPRINTF("rmidi_read: eof\n");
d126 1
a126 1
rmidi_write(struct mio_hdl *sh, const void *buf, size_t len)
d128 1
a128 1
	struct rmidi_hdl *hdl = (struct rmidi_hdl *)sh;
d135 1
a135 1
			DPERROR("rmidi_write: write");
d144 1
a144 1
rmidi_pollfd(struct mio_hdl *sh, struct pollfd *pfd, int events)
d146 1
a146 1
	struct rmidi_hdl *hdl = (struct rmidi_hdl *)sh;
d154 1
a154 1
rmidi_revents(struct mio_hdl *sh, struct pollfd *pfd)
@


1.6
log
@remove trailing spaces, from Alexandr Shadchin, thanks
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.5 2009/08/01 08:32:23 ratchov Exp $	*/
a138 1
			return 0;
@


1.5
log
@honor non-blocking flag in mio_open_rmidi(), fixes programs
eating 100% CPU while trying to use blocking i/o.
ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.4 2009/07/26 12:40:45 ratchov Exp $	*/
d68 1
a68 1
	else 
d152 1
a152 1
	pfd->events = events;	
@


1.4
log
@Make ``static'' few functions that are prototyped as static but are not
defined as such
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.3 2009/07/26 12:38:20 ratchov Exp $	*/
d70 3
a72 2

	while ((fd = open(path, flags | O_NONBLOCK)) < 0) {
@


1.3
log
@sort and space headers as per style(9)
from Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.2 2009/07/25 11:15:56 ratchov Exp $	*/
d155 1
a155 1
int
@


1.2
log
@use const qualifier in libsndio, making it slightly more consistent
with open(2) and write(2) syscalls.
from Thomas Pfaff, jakemsr is fine with it
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_rmidi.c,v 1.1 2009/07/25 08:44:26 ratchov Exp $	*/
d20 1
a20 1
#include <limits.h>
d23 1
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sun.c,v 1.17 2009/05/15 13:16:58 ratchov Exp $	*/
d40 1
a40 1
static size_t rmidi_write(struct mio_hdl *, void *, size_t);
d53 1
a53 1
mio_open_rmidi(char *str, unsigned mode, int nbio)
d126 1
a126 1
rmidi_write(struct mio_hdl *sh, void *buf, size_t len)
@

