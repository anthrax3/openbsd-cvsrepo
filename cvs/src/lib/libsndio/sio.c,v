head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.6
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.21
date	2016.01.09.08.27.24;	author ratchov;	state Exp;
branches;
next	1.20;
commitid	ScnbaRlQejqjUMct;

1.20
date	2015.11.22.12.01.23;	author ratchov;	state Exp;
branches;
next	1.19;
commitid	qJB6f577aQuApYmn;

1.19
date	2015.01.16.16.48.52;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	0DYulI8hhujBHMcR;

1.18
date	2014.08.10.09.11.07;	author jsg;	state Exp;
branches;
next	1.17;
commitid	u0xqJrJyNDFywvXl;

1.17
date	2014.03.05.20.40.49;	author ratchov;	state Exp;
branches;
next	1.16;

1.16
date	2013.12.20.08.51.28;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2013.11.13.22.38.22;	author ratchov;	state Exp;
branches;
next	1.14;

1.14
date	2013.08.24.12.32.34;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.03.03.13.32;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2013.02.01.09.02.16;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.27.11.58.08;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2012.05.23.19.25.11;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2012.05.11.07.50.27;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.15.08.05.22;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.09.17.34.14;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.06.10.25.17;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.06.07.30.20;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.03.20.15.23;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.16.10.52.22;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.08.11.18.07;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Make code fit in 80 columns, remove trailing spaces & tabs.
@
text
@/*	$OpenBSD: sio.c,v 1.19 2015/01/16 16:48:52 deraadt Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "debug.h"
#include "sio_priv.h"

#define SIO_PAR_MAGIC	0x83b905a4

void
sio_initpar(struct sio_par *par)
{
	memset(par, 0xff, sizeof(struct sio_par));
	par->__magic = SIO_PAR_MAGIC;
}

struct sio_hdl *
sio_open(const char *str, unsigned int mode, int nbio)
{
	static char devany[] = SIO_DEVANY;
	struct sio_hdl *hdl;

#ifdef DEBUG
	_sndio_debug_init();
#endif
	if ((mode & (SIO_PLAY | SIO_REC)) == 0)
		return NULL;
	if (str == NULL) /* backward compat */
		str = devany;
	if (strcmp(str, devany) == 0 && !issetugid()) {
		str = getenv("AUDIODEVICE");
		if (str == NULL)
			str = devany;
	}
	if (strcmp(str, devany) == 0) {
		hdl = _sio_aucat_open("snd/0", mode, nbio);
		if (hdl != NULL)
			return hdl;
		return _sio_sun_open("rsnd/0", mode, nbio);
	}
	if (_sndio_parsetype(str, "snd"))
		return _sio_aucat_open(str, mode, nbio);
	if (_sndio_parsetype(str, "rsnd"))
		return _sio_sun_open(str, mode, nbio);
	DPRINTF("sio_open: %s: unknown device type\n", str);
	return NULL;
}

void
_sio_create(struct sio_hdl *hdl, struct sio_ops *ops,
    unsigned int mode, int nbio)
{
	hdl->ops = ops;
	hdl->mode = mode;
	hdl->nbio = nbio;
	hdl->started = 0;
	hdl->eof = 0;
	hdl->move_cb = NULL;
	hdl->vol_cb = NULL;
}

void
sio_close(struct sio_hdl *hdl)
{
	hdl->ops->close(hdl);
}

int
sio_start(struct sio_hdl *hdl)
{
#ifdef DEBUG
	struct timespec ts;
#endif

	if (hdl->eof) {
		DPRINTF("sio_start: eof\n");
		return 0;
	}
	if (hdl->started) {
		DPRINTF("sio_start: already started\n");
		hdl->eof = 1;
		return 0;
	}
	hdl->cpos = 0;
	hdl->rused = hdl->wused = 0;
	if (!sio_getpar(hdl, &hdl->par))
		return 0;
#ifdef DEBUG
	hdl->pollcnt = 0;
	clock_gettime(CLOCK_MONOTONIC, &ts);
	hdl->start_nsec = 1000000000LL * ts.tv_sec + ts.tv_nsec;
#endif
	hdl->rdrop = hdl->wsil = 0;
	if (!hdl->ops->start(hdl))
		return 0;
	hdl->started = 1;
	return 1;
}

int
sio_stop(struct sio_hdl *hdl)
{
	if (hdl->eof) {
		DPRINTF("sio_stop: eof\n");
		return 0;
	}
	if (!hdl->started) {
		DPRINTF("sio_stop: not started\n");
		hdl->eof = 1;
		return 0;
	}
	if (!hdl->ops->stop(hdl))
		return 0;
#ifdef DEBUG
	DPRINTFN(2, "libsndio: polls: %llu, samples = %llu\n",
	    hdl->pollcnt, hdl->cpos);
#endif
	hdl->started = 0;
	return 1;
}

int
sio_setpar(struct sio_hdl *hdl, struct sio_par *par)
{
	if (hdl->eof) {
		DPRINTF("sio_setpar: eof\n");
		return 0;
	}
	if (par->__magic != SIO_PAR_MAGIC) {
		DPRINTF("sio_setpar: uninitialized sio_par structure\n");
		hdl->eof = 1;
		return 0;
	}
	if (hdl->started) {
		DPRINTF("sio_setpar: already started\n");
		hdl->eof = 1;
		return 0;
	}
	if (par->bufsz != ~0U) {
		DPRINTF("sio_setpar: setting bufsz is deprecated\n");
		par->appbufsz = par->bufsz;
		par->bufsz = ~0U;
	}
	if (par->rate != ~0U && par->appbufsz == ~0U)
		par->appbufsz = par->rate * 200 / 1000;
	return hdl->ops->setpar(hdl, par);
}

int
sio_getpar(struct sio_hdl *hdl, struct sio_par *par)
{
	if (hdl->eof) {
		DPRINTF("sio_getpar: eof\n");
		return 0;
	}
	if (hdl->started) {
		DPRINTF("sio_getpar: already started\n");
		hdl->eof = 1;
		return 0;
	}
	if (!hdl->ops->getpar(hdl, par)) {
		par->__magic = 0;
		return 0;
	}
	par->__magic = 0;
	return 1;
}

int
sio_getcap(struct sio_hdl *hdl, struct sio_cap *cap)
{
	if (hdl->eof) {
		DPRINTF("sio_getcap: eof\n");
		return 0;
	}
	if (hdl->started) {
		DPRINTF("sio_getcap: already started\n");
		hdl->eof = 1;
		return 0;
	}
	return hdl->ops->getcap(hdl, cap);
}

static int
sio_psleep(struct sio_hdl *hdl, int event)
{
	struct pollfd pfd[SIO_MAXNFDS];
	int revents;
	int nfds;

	nfds = sio_nfds(hdl);
	if (nfds > SIO_MAXNFDS) {
		DPRINTF("sio_psleep: %d: too many descriptors\n", nfds);
		hdl->eof = 1;
		return 0;
	}
	for (;;) {
		nfds = sio_pollfd(hdl, pfd, event);
		while (poll(pfd, nfds, -1) < 0) {
			if (errno == EINTR)
				continue;
			DPERROR("sio_psleep: poll");
			hdl->eof = 1;
			return 0;
		}
		revents = sio_revents(hdl, pfd);
		if (revents & POLLHUP) {
			DPRINTF("sio_psleep: hang-up\n");
			return 0;
		}
		if (revents & event)
			break;
	}
	return 1;
}

static int
sio_rdrop(struct sio_hdl *hdl)
{
#define DROP_NMAX 0x1000
	static char dummy[DROP_NMAX];
	ssize_t n, todo;

	while (hdl->rdrop > 0) {
		todo = hdl->rdrop;
		if (todo > DROP_NMAX)
			todo = DROP_NMAX;
		n = hdl->ops->read(hdl, dummy, todo);
		if (n == 0)
			return 0;
		hdl->rdrop -= n;
		DPRINTF("sio_rdrop: dropped %zu bytes\n", n);
	}
	return 1;
}

static int
sio_wsil(struct sio_hdl *hdl)
{
#define ZERO_NMAX 0x1000
	static char zero[ZERO_NMAX];
	ssize_t n, todo;

	while (hdl->wsil > 0) {
		todo = hdl->wsil;
		if (todo > ZERO_NMAX)
			todo = ZERO_NMAX;
		n = hdl->ops->write(hdl, zero, todo);
		if (n == 0)
			return 0;
		hdl->wsil -= n;
		DPRINTF("sio_wsil: inserted %zu bytes\n", n);
	}
	return 1;
}

size_t
sio_read(struct sio_hdl *hdl, void *buf, size_t len)
{
	unsigned int n;
	char *data = buf;
	size_t todo = len, maxread;

	if (hdl->eof) {
		DPRINTF("sio_read: eof\n");
		return 0;
	}
	if (!hdl->started || !(hdl->mode & SIO_REC)) {
		DPRINTF("sio_read: recording not started\n");
		hdl->eof = 1;
		return 0;
	}
	if (todo == 0) {
		DPRINTF("sio_read: zero length read ignored\n");
		return 0;
	}
	while (todo > 0) {
		if (!sio_rdrop(hdl))
			return 0;
		maxread = hdl->rused;
		if (maxread > todo)
			maxread = todo;
		n = maxread > 0 ? hdl->ops->read(hdl, data, maxread) : 0;
		if (n == 0) {
			if (hdl->nbio || hdl->eof || todo < len)
				break;
			if (!sio_psleep(hdl, POLLIN))
				break;
			continue;
		}
		data += n;
		todo -= n;
		hdl->rused -= n;
	}
	return len - todo;
}

size_t
sio_write(struct sio_hdl *hdl, const void *buf, size_t len)
{
	unsigned int n;
	const unsigned char *data = buf;
	size_t todo = len, maxwrite;

	if (hdl->eof) {
		DPRINTF("sio_write: eof\n");
		return 0;
	}
	if (!hdl->started || !(hdl->mode & SIO_PLAY)) {
		DPRINTF("sio_write: playback not started\n");
		hdl->eof = 1;
		return 0;
	}
	if (todo == 0) {
		DPRINTF("sio_write: zero length write ignored\n");
		return 0;
	}
	while (todo > 0) {
		if (!sio_wsil(hdl))
			return 0;
		maxwrite = hdl->par.bufsz * hdl->par.pchan * hdl->par.bps -
		    hdl->wused;
		if (maxwrite > todo)
			maxwrite = todo;
		n = maxwrite > 0 ? hdl->ops->write(hdl, data, maxwrite) : 0;
		if (n == 0) {
			if (hdl->nbio || hdl->eof)
				break;
			if (!sio_psleep(hdl, POLLOUT))
				break;
			continue;
		}
		data += n;
		todo -= n;
		hdl->wused += n;
	}
	return len - todo;
}

int
sio_nfds(struct sio_hdl *hdl)
{
	return hdl->ops->nfds(hdl);
}

int
sio_pollfd(struct sio_hdl *hdl, struct pollfd *pfd, int events)
{
	if (hdl->eof)
		return 0;
	if (!hdl->started)
		events = 0;
	return hdl->ops->pollfd(hdl, pfd, events);
}

int
sio_revents(struct sio_hdl *hdl, struct pollfd *pfd)
{
	int revents;
#ifdef DEBUG
	struct timespec ts0, ts1;

	if (_sndio_debug >= 4)
		clock_gettime(CLOCK_MONOTONIC, &ts0);
#endif
	if (hdl->eof)
		return POLLHUP;
#ifdef DEBUG
	hdl->pollcnt++;
#endif
	revents = hdl->ops->revents(hdl, pfd);
	if (!hdl->started)
		return revents & POLLHUP;
#ifdef DEBUG
	if (_sndio_debug >= 4) {
		clock_gettime(CLOCK_MONOTONIC, &ts1);
		DPRINTF("%09lld: sio_revents: revents = 0x%x, took %lldns\n",
		    1000000000LL * ts0.tv_sec +
		    ts0.tv_nsec - hdl->start_nsec,
		    revents,
		    1000000000LL * (ts1.tv_sec - ts0.tv_sec) +
		    ts1.tv_nsec - ts0.tv_nsec);
	}
#endif
	if ((hdl->mode & SIO_PLAY) && !sio_wsil(hdl))
		revents &= ~POLLOUT;
	if ((hdl->mode & SIO_REC) && !sio_rdrop(hdl))
		revents &= ~POLLIN;
	return revents;
}

int
sio_eof(struct sio_hdl *hdl)
{
	return hdl->eof;
}

void
sio_onmove(struct sio_hdl *hdl, void (*cb)(void *, int), void *addr)
{
	if (hdl->started) {
		DPRINTF("sio_onmove: already started\n");
		hdl->eof = 1;
		return;
	}
	hdl->move_cb = cb;
	hdl->move_addr = addr;
}

#ifdef DEBUG
void
_sio_printpos(struct sio_hdl *hdl)
{
	struct timespec ts;
	long long rpos, rdiff;
	long long cpos, cdiff;
	long long wpos, wdiff;
	unsigned rbpf, wbpf, rround, wround;

	clock_gettime(CLOCK_MONOTONIC, &ts);
	rbpf = (hdl->mode & SIO_REC) ? hdl->par.bps * hdl->par.rchan : 1;
	wbpf = (hdl->mode & SIO_PLAY) ? hdl->par.bps * hdl->par.pchan : 1;
	rround = hdl->par.round * rbpf;
	wround = hdl->par.round * wbpf;

	rpos = (hdl->mode & SIO_REC) ?
	    hdl->cpos * rbpf - hdl->rused : 0;
	wpos = (hdl->mode & SIO_PLAY) ?
	    hdl->cpos * wbpf + hdl->wused : 0;

	cdiff = hdl->cpos % hdl->par.round;
	cpos  = hdl->cpos / hdl->par.round;
	if (cdiff > hdl->par.round / 2) {
		cpos++;
		cdiff = cdiff - hdl->par.round;
	}
	rdiff = rpos % rround;
	rpos  = rpos / rround;
	if (rdiff > rround / 2) {
		rpos++;
		rdiff = rdiff - rround;
	}
	wdiff = wpos % wround;
	wpos  = wpos / wround;
	if (wdiff > wround / 2) {
		wpos++;
		wdiff = wdiff - wround;
	}
	DPRINTF("%011lld: "
	    "clk %+5lld%+5lld, wr %+5lld%+5lld rd: %+5lld%+5lld\n",
	    1000000000LL * ts.tv_sec + ts.tv_nsec - hdl->start_nsec,
	    cpos, cdiff, wpos, wdiff, rpos, rdiff);
}
#endif

void
_sio_onmove_cb(struct sio_hdl *hdl, int delta)
{
	hdl->cpos += delta;
	if (hdl->mode & SIO_REC)
		hdl->rused += delta * (hdl->par.bps * hdl->par.rchan);
	if (hdl->mode & SIO_PLAY)
		hdl->wused -= delta * (hdl->par.bps * hdl->par.pchan);
#ifdef DEBUG
	if (_sndio_debug >= 3)
		_sio_printpos(hdl);
	if ((hdl->mode & SIO_PLAY) && hdl->wused < 0) {
		DPRINTFN(1, "sndio: h/w failure: negative buffer usage\n");
		hdl->eof = 1;
		return;
	}
#endif
	if (hdl->move_cb)
		hdl->move_cb(hdl->move_addr, delta);
}

int
sio_setvol(struct sio_hdl *hdl, unsigned int ctl)
{
	if (hdl->eof)
		return 0;
	if (!hdl->ops->setvol)
		return 1;
	if (!hdl->ops->setvol(hdl, ctl))
		return 0;
	hdl->ops->getvol(hdl);
	return 1;
}

int
sio_onvol(struct sio_hdl *hdl, void (*cb)(void *, unsigned int), void *addr)
{
	if (hdl->started) {
		DPRINTF("sio_onvol: already started\n");
		hdl->eof = 1;
		return 0;
	}
	if (!hdl->ops->setvol)
		return 0;
	hdl->vol_cb = cb;
	hdl->vol_addr = addr;
	hdl->ops->getvol(hdl);
	return 1;
}

void
_sio_onvol_cb(struct sio_hdl *hdl, unsigned int ctl)
{
	if (hdl->vol_cb)
		hdl->vol_cb(hdl->vol_addr, ctl);
}
@


1.20
log
@Don't remove the type component from the device string before passing
it to the *_open() functions. It's more flexible this way. No behaviour
change.
@
text
@d155 1
a155 1
		DPRINTF("sio_setpar: use of uninitialized sio_par structure\n");
d438 1
a438 1
{	
d451 1
a451 1
	rpos = (hdl->mode & SIO_REC) ? 
@


1.19
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.18 2014/08/10 09:11:07 jsg Exp $	*/
a46 1
	const char *p;
d61 1
a61 1
		hdl = _sio_aucat_open("/0", mode, nbio);
d64 1
a64 8
		return _sio_sun_open("/0", mode, nbio);
	}
	if ((p = _sndio_parsetype(str, "snd")) != NULL ||
	    (p = _sndio_parsetype(str, "aucat")) != NULL)
		return _sio_aucat_open(p, mode, nbio);
	if ((p = _sndio_parsetype(str, "rsnd")) != NULL ||
	    (p = _sndio_parsetype(str, "sun")) != NULL) {
		return _sio_sun_open(p, mode, nbio);
d66 4
@


1.18
log
@debug level test for clock_gettime() calls should match
ok ratchov@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.17 2014/03/05 20:40:49 ratchov Exp $	*/
a17 1
#include <sys/param.h>
@


1.17
log
@- use relative read/write positions to keep track of buffer
  usage as seen by the caller
- refresh current position before reading/writing data, to keep the
  current position always consistent with read & write pointers
- fix confusion between processed samples by the hardware (as reported
  by GET{I,O}OFFS) and samples played as reported by GETINFO(). Fixes
  incorrect delta propagated after xruns in play-only and rec-only
  modes
- don't wait for POLLIN or POLLOUT to be set to refresh ring pointers,
  as they may not be set in certain cases. Fixes sndiod crash after
  few days of continuous playback.
- save current parameters instead of calling getpar() too often
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d393 1
a393 1
	if (_sndio_debug >= 2)
@


1.16
log
@Be less verbose when SNDIO_DEBUG=1 is set.
@
text
@d114 2
a115 1
#ifdef DEBUG
d118 2
a119 1
	hdl->pollcnt = hdl->wcnt = hdl->rcnt = hdl->cpos = 0;
d145 2
a146 2
	DPRINTFN(2, "libsndio: polls: %llu, written = %llu, read: %llu\n",
	    hdl->pollcnt, hdl->wcnt, hdl->rcnt);
d292 1
a292 1
	size_t todo = len;
a306 2
	if (!sio_rdrop(hdl))
		return 0;
d308 6
a313 1
		n = hdl->ops->read(hdl, data, todo);
d323 1
a323 3
#ifdef DEBUG
		hdl->rcnt += n;
#endif
d333 1
a333 1
	size_t todo = len;
a347 2
	if (!sio_wsil(hdl))
		return 0;
d349 7
a355 1
		n = hdl->ops->write(hdl, data, todo);
d365 1
a365 3
#ifdef DEBUG
		hdl->wcnt += n;
#endif
d405 1
a405 1
	if (_sndio_debug >= 3) {
d448 1
d451 4
d457 1
a457 1
	    hdl->rcnt / (hdl->par.bps * hdl->par.rchan) : 0;
d459 1
a459 1
	    hdl->wcnt / (hdl->par.bps * hdl->par.pchan) : 0;
d467 3
a469 3
	rdiff = rpos % hdl->par.round;
	rpos  = rpos / hdl->par.round;
	if (rdiff > hdl->par.round / 2) {
d471 1
a471 1
		rdiff = rdiff - hdl->par.round;
d473 3
a475 3
	wdiff = wpos % hdl->par.round;
	wpos  = wpos / hdl->par.round;
	if (wdiff > hdl->par.round / 2) {
d477 1
a477 1
		wdiff = wdiff - hdl->par.round;
d489 5
a494 1
	hdl->cpos += delta;
d497 5
@


1.15
log
@Prefix by '_' symbols that are not part of the API.

ok deraadt, guenther
@
text
@d143 1
a143 1
	DPRINTF("libsndio: polls: %llu, written = %llu, read: %llu\n",
d481 1
a481 1
	if (_sndio_debug >= 2)
@


1.14
log
@Move underrun/overrun recovery code from the sun-api back-end to
the the generic code, so it can be used by other back-ends as well.
No behavior change (hopefully).
@
text
@d51 1
a51 1
	sndio_debug_init();
d63 1
a63 1
		hdl = sio_aucat_open("/0", mode, nbio);
d66 1
a66 1
		return sio_sun_open("/0", mode, nbio);
d68 6
a73 6
	if ((p = sndio_parsetype(str, "snd")) != NULL ||
	    (p = sndio_parsetype(str, "aucat")) != NULL)
		return sio_aucat_open(p, mode, nbio);
	if ((p = sndio_parsetype(str, "rsnd")) != NULL ||
	    (p = sndio_parsetype(str, "sun")) != NULL) {
		return sio_sun_open(p, mode, nbio);
d80 1
a80 1
sio_create(struct sio_hdl *hdl, struct sio_ops *ops,
d388 1
a388 1
	if (sndio_debug >= 2)
d400 1
a400 1
	if (sndio_debug >= 3) {
d437 1
a437 1
sio_printpos(struct sio_hdl *hdl)
d477 1
a477 1
sio_onmove_cb(struct sio_hdl *hdl, int delta)
d481 2
a482 2
	if (sndio_debug >= 2)
		sio_printpos(hdl);
d518 1
a518 1
sio_onvol_cb(struct sio_hdl *hdl, unsigned int ctl)
@


1.13
log
@Handle big time_t.
Use clock_gettime(CLOCK_MONOTONIC) instead of gettimeofday() when measuring
time intervals for debugging output.

ok ratchov@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.12 2013/02/01 09:02:16 ratchov Exp $	*/
d101 4
d117 3
a119 2
	hdl->pollcnt = hdl->wcnt = hdl->rcnt = hdl->realpos = 0;
	clock_gettime(CLOCK_MONOTONIC, &hdl->ts);
d121 1
d245 40
d305 2
a330 7
#ifdef DEBUG
	struct timespec ts0, ts1, dts;
	unsigned int us;

	if (sndio_debug >= 2)
		clock_gettime(CLOCK_MONOTONIC, &ts0);
#endif
d345 2
a361 13
#ifdef DEBUG
	if (sndio_debug >= 2) {
		clock_gettime(CLOCK_MONOTONIC, &ts1);
		timespecsub(&ts0, &hdl->ts, &dts);
		DPRINTF("%lld.%09ld: ", (long long)dts.tv_sec, dts.tv_nsec);

		timespecsub(&ts1, &ts0, &dts);
		us = dts.tv_sec * 1000000 + dts.tv_nsec/1000;
		DPRINTF(
		    "sio_write: wrote %d bytes of %d in %uus\n",
		    (int)(len - todo), (int)len, us);
	}
#endif
d386 1
a386 2
	struct timespec ts0, ts1, dts;
	unsigned int us;
d400 1
a400 1
	if (sndio_debug >= 2) {
d402 6
a407 7
		timespecsub(&ts0, &hdl->ts, &dts);
		DPRINTF("%lld.%09ld: ", (long long)dts.tv_sec, dts.tv_nsec);

		timespecsub(&ts1, &ts0, &dts);
		us = dts.tv_sec * 1000000 + dts.tv_nsec/1000;
		DPRINTF("sio_revents: revents = 0x%x, complete in %uus\n",
		    revents, us);
d410 4
d435 41
d480 3
a482 18
	struct timespec ts0, dts;
	long long playpos;

	if (sndio_debug >= 3 && (hdl->mode & SIO_PLAY)) {
		clock_gettime(CLOCK_MONOTONIC, &ts0);
		timespecsub(&ts0, &hdl->ts, &dts);
		DPRINTF("%lld.%09ld: ", (long long)dts.tv_sec, dts.tv_nsec);
		hdl->realpos += delta;
		playpos = hdl->wcnt / (hdl->par.bps * hdl->par.pchan);
		DPRINTF("sio_onmove_cb: delta = %+7d, "
		    "plat = %+7lld, "
		    "realpos = %+7lld, "
		    "bufused = %+7lld\n",
		    delta,
		    playpos - hdl->realpos,
		    hdl->realpos,
		    hdl->realpos < 0 ? playpos : playpos - hdl->realpos);
	}
@


1.12
log
@If par->bufsz is set (it's documented as readonly since years) then
reset it and set par->appbufsz instead
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a19 1
#include <sys/time.h>
d28 1
d114 1
a114 1
	gettimeofday(&hdl->tv, NULL);
d284 1
a284 1
	struct timeval tv0, tv1, dtv;
d288 1
a288 1
		gettimeofday(&tv0, NULL);
d321 3
a323 3
		gettimeofday(&tv1, NULL);
		timersub(&tv0, &hdl->tv, &dtv);
		DPRINTF("%ld.%06ld: ", dtv.tv_sec, dtv.tv_usec);
d325 2
a326 2
		timersub(&tv1, &tv0, &dtv);
		us = dtv.tv_sec * 1000000 + dtv.tv_usec;
d356 1
a356 1
	struct timeval tv0, tv1, dtv;
d360 1
a360 1
		gettimeofday(&tv0, NULL);
d372 3
a374 3
		gettimeofday(&tv1, NULL);
		timersub(&tv0, &hdl->tv, &dtv);
		DPRINTF("%ld.%06ld: ", dtv.tv_sec, dtv.tv_usec);
d376 2
a377 2
		timersub(&tv1, &tv0, &dtv);
		us = dtv.tv_sec * 1000000 + dtv.tv_usec;
d407 1
a407 1
	struct timeval tv0, dtv;
d411 3
a413 3
		gettimeofday(&tv0, NULL);
		timersub(&tv0, &hdl->tv, &dtv);
		DPRINTF("%ld.%06ld: ", dtv.tv_sec, dtv.tv_usec);
@


1.11
log
@check that polled fd number is smaller than SIO_MAXNFDS
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.10 2012/05/23 19:25:11 ratchov Exp $	*/
d164 1
@


1.10
log
@Make the "default" string a valid device name that has the same effect
as NULL has. This will (hopefully) simplify ports where the user
passes the device string.
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.9 2012/05/11 07:50:27 ratchov Exp $	*/
d210 1
a210 1
	nfds_t nfds;
d213 5
d219 1
a219 1
		sio_pollfd(hdl, pfd, event);
@


1.9
log
@The default device is selected with sndiod(1) or the AUDIODEVICE
environment variable, so stop using the /dev/audio symlink which
can't be used by sndiod(1) anyway
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.8 2012/04/11 06:05:43 ratchov Exp $	*/
d46 1
d55 3
a57 1
	if (str == NULL && !issetugid())
d59 4
a62 1
	if (str == NULL) {
@


1.8
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.7 2011/11/15 08:05:22 ratchov Exp $	*/
d60 1
a60 1
		return sio_sun_open("/", mode, nbio);
@


1.7
log
@Add a "device number" component in sndio(7) device names, allowing a
single aucat instance to handle all audio and MIDI services. Since
this partially breaks compatibility, this is a opportunitiy to fix few
other design mistakes (eg ':' being used by inet6, type name vs api
name confusion, etc..). This leads to the following names:

        type[@@hostname][,unit]/devnum[.option]

The device number is the minor device number for direct hardware
access (ie the 'N' in /dev/audioN). For aucat, this is the occurence
number of the -f (or -M) option.

There's a compatibility hook to keep old names working if only one
aucat server is running.
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.6 2011/05/09 17:34:14 ratchov Exp $	*/
d44 1
a44 1
sio_open(const char *str, unsigned mode, int nbio)
d74 2
a75 1
sio_create(struct sio_hdl *hdl, struct sio_ops *ops, unsigned mode, int nbio)
d230 1
a230 1
	unsigned n;
d268 1
a268 1
	unsigned n;
d273 1
a273 1
	unsigned us;
d345 1
a345 1
	unsigned us;
d419 1
a419 1
sio_setvol(struct sio_hdl *hdl, unsigned ctl)
d432 1
a432 1
sio_onvol(struct sio_hdl *hdl, void (*cb)(void *, unsigned), void *addr)
d448 1
a448 1
sio_onvol_cb(struct sio_hdl *hdl, unsigned ctl)
@


1.6
log
@in sio_psleep(), use an array of SIO_MAXNFDS pollfd strucures rather
than a single one. No behaviour change
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.5 2011/05/06 10:25:17 ratchov Exp $	*/
a35 11
struct sio_backend {
	char *prefix;
	struct sio_hdl *(*open)(const char *, unsigned, int);
};

static struct sio_backend backends[] = {
	{ "aucat", sio_aucat_open },
	{ "sun", sio_sun_open },
	{ NULL, NULL }
};

a45 1
	struct sio_backend *b;
d47 1
a47 2
	char *sep;
	int len;
d57 4
a60 11
		for (b = backends; b->prefix != NULL; b++) {
			hdl = b->open(NULL, mode, nbio);
			if (hdl != NULL)
				return hdl;
		}
		return NULL;
	}
	sep = strchr(str, ':');
	if (sep == NULL) {
		DPRINTF("sio_open: %s: ':' missing in device name\n", str);
		return NULL;
d62 6
a67 4
	len = sep - str;
	for (b = backends; b->prefix != NULL; b++) {
		if (strlen(b->prefix) == len && memcmp(b->prefix, str, len) == 0)
			return b->open(sep + 1, mode, nbio);
@


1.5
log
@use an array of backends and iterate on it, instead of inlining
calls to sio_<backend>_open(). No behaviour change
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.4 2011/05/06 07:30:20 ratchov Exp $	*/
d219 1
a219 1
	struct pollfd pfd;
d221 1
d223 1
d225 2
a226 2
		sio_pollfd(hdl, &pfd, event);
		while (poll(&pfd, 1, -1) < 0) {
d233 1
a233 1
		revents = sio_revents(hdl, &pfd);
@


1.4
log
@remove almost two years old hack to support legacy audio/midi
device names
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.3 2011/05/03 20:15:23 ratchov Exp $	*/
d36 11
d57 1
a57 2
	static char prefix_aucat[] = "aucat";
	static char prefix_sun[] = "sun";
d70 5
a74 6
		hdl = sio_aucat_open(NULL, mode, nbio);
		if (hdl != NULL)
			return hdl;
		hdl = sio_sun_open(NULL, mode, nbio);
		if (hdl != NULL)
			return hdl;
d83 4
a86 6
	if (len == (sizeof(prefix_aucat) - 1) &&
	    memcmp(str, prefix_aucat, len) == 0)
		return sio_aucat_open(sep + 1, mode, nbio);
	if (len == (sizeof(prefix_sun) - 1) &&
	    memcmp(str, prefix_sun, len) == 0)
		return sio_sun_open(sep + 1, mode, nbio);
@


1.3
log
@determine the default device in backend code instead of the common
code. This is simpler as long as not all backends use the same
default.
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.2 2011/04/16 10:52:22 ratchov Exp $	*/
d49 1
a49 2
	struct stat sb;
	char *sep, buf[NAME_MAX];
d70 2
a71 9
		/*
		 * try legacy "/dev/audioxxx" or ``socket'' device name
		 */
		if (stat(str, &sb) < 0 || !S_ISCHR(sb.st_mode)) {
			snprintf(buf, sizeof(buf), "0.%s", str);
			return sio_aucat_open(buf, mode, nbio);
		}
		snprintf(buf, sizeof(buf), "%u", minor(sb.st_rdev) & 0xf);
		return sio_sun_open(buf, mode, nbio);
@


1.2
log
@Make aucat audio and midi backends share the same code to communicate
with the server. As we're at it use the same protocol for midi and
audio. Now, both audio and midi code use the same SNDIO_DEBUG environment
variable to turn on/off DPRINTF's.
@
text
@d1 1
a1 1
/*	$OpenBSD: sio.c,v 1.1 2011/04/08 11:18:07 ratchov Exp $	*/
d61 1
a61 1
		hdl = sio_aucat_open("0", mode, nbio);
d64 1
a64 6
		if (stat("/dev/audio", &sb) == 0 && S_ISCHR(sb.st_mode)) {
			snprintf(buf, sizeof(buf), "%u",
			    minor(sb.st_rdev) & 0xf);
		} else
			strlcpy(buf, "0", sizeof(buf));
		hdl = sio_sun_open(buf, mode, nbio);
@


1.1
log
@Clean up function naming: use sio_<backend>_ prefix for private
audio-related functions and put them in files named sio_<backend>.c
No behaviour changes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a35 7
#ifdef DEBUG
/*
 * debug level, -1 means uninitialized
 */
int sio_debug = -1;
#endif

d52 1
d54 1
a54 7
	char *dbg;

	if (sio_debug < 0) {
		dbg = issetugid() ? NULL : getenv("SIO_DEBUG");
		if (!dbg || sscanf(dbg, "%u", &sio_debug) != 1)
			sio_debug = 0;
	}
d296 1
a296 1
	if (sio_debug >= 2)
d329 1
a329 1
	if (sio_debug >= 2) {
d368 1
a368 1
	if (sio_debug >= 2)
d380 1
a380 1
	if (sio_debug >= 2) {
d419 1
a419 1
	if (sio_debug >= 3 && (hdl->mode & SIO_PLAY)) {
@

