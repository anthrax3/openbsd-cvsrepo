head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.12
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2015.01.16.16.48.52;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	0DYulI8hhujBHMcR;

1.8
date	2014.03.05.20.40.49;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.13.22.38.22;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.24.12.32.35;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.03.03.13.32;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.27.12.06.40;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.09.17.34.14;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.16.10.52.22;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.08.11.18.07;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@/*	$OpenBSD: sio_priv.h,v 1.8 2014/03/05 20:40:49 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef SNDIO_PRIV_H
#define SNDIO_PRIV_H

#include "sndio.h"

#define SIO_MAXNFDS	16

/*
 * private ``handle'' structure
 */
struct sio_hdl {
	struct sio_ops *ops;
	void (*move_cb)(void *, int);	/* call-back for realpos changes */
	void *move_addr;		/* user priv. data for move_cb */
	void (*vol_cb)(void *, unsigned); /* call-back for volume changes */
	void *vol_addr;			/* user priv. data for vol_cb */
	unsigned mode;			/* SIO_PLAY | SIO_REC */
	int started;			/* true if started */
	int nbio;			/* true if non-blocking io */
	int eof;			/* true if error occured */
	int rdrop;			/* recorded bytes to drop */
	int wsil;			/* silence to play */
	int rused;			/* bytes used in read buffer */
	int wused;			/* bytes used in write buffer */
	long long cpos;			/* clock since start */
	struct sio_par par;
#ifdef DEBUG
	unsigned long long pollcnt;	/* times sio_revents was called */
	long long start_nsec;
#endif
};

/*
 * operations every device should support
 */
struct sio_ops {
	void (*close)(struct sio_hdl *);
	int (*setpar)(struct sio_hdl *, struct sio_par *);
	int (*getpar)(struct sio_hdl *, struct sio_par *);
	int (*getcap)(struct sio_hdl *, struct sio_cap *);
	size_t (*write)(struct sio_hdl *, const void *, size_t);
	size_t (*read)(struct sio_hdl *, void *, size_t);
	int (*start)(struct sio_hdl *);
	int (*stop)(struct sio_hdl *);
	int (*nfds)(struct sio_hdl *);
	int (*pollfd)(struct sio_hdl *, struct pollfd *, int);
	int (*revents)(struct sio_hdl *, struct pollfd *);
	int (*setvol)(struct sio_hdl *, unsigned);
	void (*getvol)(struct sio_hdl *);
};

struct sio_hdl *_sio_aucat_open(const char *, unsigned, int);
struct sio_hdl *_sio_sun_open(const char *, unsigned, int);
void _sio_create(struct sio_hdl *, struct sio_ops *, unsigned, int);
void _sio_destroy(struct sio_hdl *);
void _sio_onmove_cb(struct sio_hdl *, int);
void _sio_onvol_cb(struct sio_hdl *, unsigned);
#ifdef DEBUG
void _sio_printpos(struct sio_hdl *);
#endif

#endif /* !defined(SNDIO_PRIV_H) */
@


1.8
log
@- use relative read/write positions to keep track of buffer
  usage as seen by the caller
- refresh current position before reading/writing data, to keep the
  current position always consistent with read & write pointers
- fix confusion between processed samples by the hardware (as reported
  by GET{I,O}OFFS) and samples played as reported by GETINFO(). Fixes
  incorrect delta propagated after xruns in play-only and rec-only
  modes
- don't wait for POLLIN or POLLOUT to be set to refresh ring pointers,
  as they may not be set in certain cases. Fixes sndiod crash after
  few days of continuous playback.
- save current parameters instead of calling getpar() too often
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a19 1
#include <sys/param.h>
@


1.7
log
@Prefix by '_' symbols that are not part of the API.

ok deraadt, guenther
@
text
@d40 4
a45 3
	long long wcnt;			/* bytes written with sio_write() */
	long long rcnt;			/* bytes read with sio_read() */
	long long cpos;
a46 1
	struct sio_par par;
@


1.6
log
@Move underrun/overrun recovery code from the sun-api back-end to
the the generic code, so it can be used by other back-ends as well.
No behavior change (hopefully).
@
text
@d69 6
a74 6
struct sio_hdl *sio_aucat_open(const char *, unsigned, int);
struct sio_hdl *sio_sun_open(const char *, unsigned, int);
void sio_create(struct sio_hdl *, struct sio_ops *, unsigned, int);
void sio_destroy(struct sio_hdl *);
void sio_onmove_cb(struct sio_hdl *, int);
void sio_onvol_cb(struct sio_hdl *, unsigned);
d76 1
a76 1
void sio_printpos(struct sio_hdl *);
@


1.5
log
@Handle big time_t.
Use clock_gettime(CLOCK_MONOTONIC) instead of gettimeofday() when measuring
time intervals for debugging output.

ok ratchov@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sio_priv.h,v 1.4 2012/10/27 12:06:40 ratchov Exp $	*/
d38 2
d42 4
a45 4
	unsigned long long wcnt;	/* bytes written with sio_write() */
	unsigned long long rcnt;	/* bytes read with sio_read() */
	long long realpos;
	struct timespec ts;
d75 3
@


1.4
log
@crank SIO_MAXNFDS
@
text
@d1 1
a1 1
/*	$OpenBSD: sio_priv.h,v 1.3 2011/05/09 17:34:14 ratchov Exp $	*/
d43 1
a43 1
	struct timeval tv;
@


1.3
log
@in sio_psleep(), use an array of SIO_MAXNFDS pollfd strucures rather
than a single one. No behaviour change
@
text
@d1 1
a1 1
/*	$OpenBSD: sio_priv.h,v 1.2 2011/04/16 10:52:22 ratchov Exp $	*/
d23 1
a23 1
#define SIO_MAXNFDS	4
@


1.2
log
@Make aucat audio and midi backends share the same code to communicate
with the server. As we're at it use the same protocol for midi and
audio. Now, both audio and midi code use the same SNDIO_DEBUG environment
variable to turn on/off DPRINTF's.
@
text
@d1 1
a1 1
/*	$OpenBSD: sio_priv.h,v 1.1 2011/04/08 11:18:07 ratchov Exp $	*/
d22 2
@


1.1
log
@Clean up function naming: use sio_<backend>_ prefix for private
audio-related functions and put them in files named sio_<backend>.c
No behaviour changes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a22 16
#ifdef DEBUG
#define DPRINTF(...)						\
	do {							\
		if (sio_debug > 0)				\
			fprintf(stderr, __VA_ARGS__);		\
	} while(0)
#define DPERROR(s)						\
	do {							\
		if (sio_debug > 0)				\
			perror(s);				\
	} while(0)
#else
#define DPRINTF(...) do {} while(0)
#define DPERROR(s) do {} while(0)
#endif

a70 4

#ifdef DEBUG
extern int sio_debug;
#endif
@

