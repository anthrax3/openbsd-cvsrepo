head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2016.01.09.08.27.24;	author ratchov;	state Exp;
branches;
next	1.9;
commitid	ScnbaRlQejqjUMct;

1.9
date	2015.10.02.09.36.24;	author ratchov;	state Exp;
branches;
next	1.8;
commitid	pbuL5fcKBZxeBbqF;

1.8
date	2015.10.02.09.21.46;	author ratchov;	state Exp;
branches;
next	1.7;
commitid	CyAOR3wqXN7z8qK9;

1.7
date	2015.10.02.09.04.36;	author ratchov;	state Exp;
branches;
next	1.6;
commitid	l7qJ9Qg6LVm5sXvi;

1.6
date	2012.11.23.06.40.26;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.02.10.24.58;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.15.08.05.22;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.17.21.09.11;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.28.06.19.57;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.27.21.20.36;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Make code fit in 80 columns, remove trailing spaces & tabs.
@
text
@/*	$OpenBSD: amsg.h,v 1.8 2015/10/02 09:21:46 ratchov Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef AMSG_H
#define AMSG_H

#include <stdint.h>

/*
 * unix-domain socket name is:
 *
 * DIR [ '-' UID ] '/' FILE UNIT
 *
 * example: "/tmp/aucat-1000/aucat0"
 *
 */
#define SOCKPATH_DIR	"/tmp/aucat"
#define SOCKPATH_FILE	"aucat"
#define SOCKPATH_MAX	(1 +		\
	sizeof(SOCKPATH_DIR) - 1 +	\
	sizeof(char) +			\
	sizeof(int) * 3 +		\
	sizeof(char) +			\
	sizeof(SOCKPATH_FILE) - 1 +	\
	sizeof(int) * 3)

/*
 * server TCP base port number
 */
#define AUCAT_PORT		11025

/*
 * WARNING: since the protocol may be simultaneously used by static
 * binaries or by different versions of a shared library, we are not
 * allowed to change the packet binary representation in a backward
 * incompatible way.
 *
 * Especially, make sure the amsg_xxx structures are not larger
 * than 32 bytes.
 */
struct amsg {
#define AMSG_ACK	0	/* ack for START/STOP */
#define AMSG_GETPAR	1	/* get the current parameters */
#define AMSG_SETPAR	2	/* set the current parameters */
#define AMSG_START	3	/* request the server to start the stream */
#define AMSG_STOP	4	/* request the server to stop the stream */
#define AMSG_DATA	5	/* data block */
#define AMSG_FLOWCTL	6	/* feedback about buffer usage */
#define AMSG_MOVE	7	/* position changed */
#define AMSG_SETVOL	9	/* set volume */
#define AMSG_HELLO	10	/* say hello, check versions and so ... */
#define AMSG_BYE	11	/* ask server to drop connection */
#define AMSG_AUTH	12	/* send authentication cookie */
	uint32_t cmd;
	uint32_t __pad;
	union {
		struct amsg_par {
			uint8_t legacy_mode;	/* compat for old libs */
			uint8_t xrun;		/* one of above */
			uint8_t bps;		/* bytes per sample */
			uint8_t bits;		/* actually used bits */
			uint8_t msb;		/* 1 if MSB justified */
			uint8_t le;		/* 1 if little endian */
			uint8_t sig;		/* 1 if signed */
			uint8_t __pad1;
			uint16_t pchan;		/* play channels */
			uint16_t rchan;		/* record channels */
			uint32_t rate;		/* frames per second */
			uint32_t bufsz;		/* total buffered frames */
			uint32_t round;
			uint32_t appbufsz;	/* client side bufsz */
			uint32_t _reserved[1];	/* for future use */
		} par;
		struct amsg_data {
#define AMSG_DATAMAX	0x1000
			uint32_t size;
		} data;
		struct amsg_ts {
			int32_t delta;
		} ts;
		struct amsg_vol {
			uint32_t ctl;
		} vol;
		struct amsg_hello {
			uint16_t mode;		/* bitmap of MODE_XXX */
#define AMSG_VERSION	7
			uint8_t version;	/* protocol version */
			uint8_t devnum;		/* device number */
			uint32_t _reserved[1];	/* for future use */
#define AMSG_OPTMAX	12
			char opt[AMSG_OPTMAX];	/* profile name */
			char who[12];		/* hint for leases */
		} hello;
		struct amsg_auth {
#define AMSG_COOKIELEN	16
			uint8_t cookie[AMSG_COOKIELEN];
		} auth;
	} u;
};

/*
 * Initialize an amsg structure: fill all fields with 0xff, so the read
 * can test which fields were set.
 */
#define AMSG_INIT(m) do { memset((m), 0xff, sizeof(struct amsg)); } while (0)

/*
 * Since the structure is memset to 0xff, the MSB can be used to check
 * if any field was set.
 */
#define AMSG_ISSET(x) (((x) & (1 << (8 * sizeof(x) - 1))) == 0)

#endif /* !defined(AMSG_H) */
@


1.9
log
@As the socket path is known, use its size rather that PATH_MAX.
@
text
@d22 1
a22 1
/* 
@


1.8
log
@use macros instead of hard-coded strings for unix sockets paths
@
text
@d1 1
a1 1
/*	$OpenBSD: amsg.h,v 1.7 2015/10/02 09:04:36 ratchov Exp $	*/
d32 7
@


1.7
log
@remove unused DEFAULT_OPT macro
@
text
@d1 1
a1 1
/*	$OpenBSD: amsg.h,v 1.6 2012/11/23 06:40:26 ratchov Exp $	*/
d22 11
d34 1
a34 1
 * socket and option names
a35 1
#define AUCAT_PATH		"aucat"
@


1.6
log
@Make the client wait for the first flow control message rather than
assuming it can send a full initial data buffer. This requires protocol
version bump (but no library version bump).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a26 1
#define DEFAULT_OPT		"default"
@


1.5
log
@Use dedicated messages for flow control instead of abusing clock tick
messages and enable flow control for MIDI. Since this requires protocol
version bump, both sndiod and libsndio must be kept up to date to work
together.
@
text
@d1 1
a1 1
/*	$OpenBSD: amsg.h,v 1.4 2011/11/15 08:05:22 ratchov Exp $	*/
d83 1
a83 1
#define AMSG_VERSION	6
@


1.4
log
@Add a "device number" component in sndio(7) device names, allowing a
single aucat instance to handle all audio and MIDI services. Since
this partially breaks compatibility, this is a opportunitiy to fix few
other design mistakes (eg ':' being used by inet6, type name vs api
name confusion, etc..). This leads to the following names:

        type[@@hostname][,unit]/devnum[.option]

The device number is the minor device number for direct hardware
access (ie the 'N' in /dev/audioN). For aucat, this is the occurence
number of the -f (or -M) option.

There's a compatibility hook to keep old names working if only one
aucat server is running.
@
text
@d1 1
a1 1
/*	$OpenBSD: amsg.h,v 1.3 2011/10/17 21:09:11 ratchov Exp $	*/
d45 1
a45 1
#define AMSG_POS	6	/* initial position */
d83 1
a83 1
#define AMSG_VERSION	5
@


1.3
log
@Remove midicat since aucat can now be used instead of midicat
with almost the same syntax (roughly an extra -M option).
Thru boxes are created with aucat, and corresponding MIDI port
names have the "aucat" prefix instead of "midithru". The old
device name will still work some time for backward compatibility.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: amsg.h,v 1.2 2011/04/28 06:19:57 ratchov Exp $	*/
d85 4
a88 2
			uint8_t reserved1[5];	/* for future use */
			char opt[12];		/* profile name */
@


1.2
log
@Implement a new authentication method allowing aucat and midicat to
work over TCP, for instance, to expose the sound card of one machine
with other machines of the network.

The first client generates a 128-bit random number (aka the
session cookie), saves it in $HOME/.aucat_cookie and sends it to the
server. Successive clients load the cookie from $HOME/.aucat_cookie
and send it to the server but the server accepts only clients whose
cookie matches the session cookie. When all clients are gone, the
session is over, and another cookie could start a new session, and so
on.

TCP is enabled on the server with the new -L option, and on the client
side hostnames are specified with a new optional component in the
device name.

hints from damien, dlg and deraadt, tweaks from jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: amsg.h,v 1.1 2011/04/27 21:20:36 ratchov Exp $	*/
a26 2
#define MIDICAT_PATH		"midicat"
#define MIDICAT_PORT		11041
@


1.1
log
@move amsg.h containing protocol defs from aucat side to libsndio side.

requested by deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: amsg.h,v 1.20 2011/04/16 11:24:18 ratchov Exp $	*/
d26 1
d28 1
@

