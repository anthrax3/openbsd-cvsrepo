head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@.\" @;


1.16
date	2016.01.07.07.41.01;	author ratchov;	state Exp;
branches;
next	1.15;
commitid	pYtvupOMgjtQxXte;

1.15
date	2015.09.14.15.14.55;	author schwarze;	state Exp;
branches;
next	1.14;
commitid	TPchOLbdlEugnrt2;

1.14
date	2014.03.05.20.01.59;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2013.07.04.21.49.10;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2013.06.05.03.44.50;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2013.04.06.11.38.41;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2012.09.15.08.58.08;	author stsp;	state Exp;
branches;
next	1.9;

1.9
date	2012.09.14.20.16.24;	author stsp;	state Exp;
branches;
next	1.8;

1.8
date	2012.05.23.19.25.11;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2012.04.11.06.05.43;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.09.14.38.09;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.17.21.09.11;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.16.10.52.22;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.12.42.48;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.25.11.15.56;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.26;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Move sndiod man page to section 8.

suggested by deraadt, fixes from jmc, ok millert
@
text
@.\" $OpenBSD: mio_open.3,v 1.14 2014/03/05 20:01:59 ratchov Exp $
.\"
.\" Copyright (c) 2007 Alexandre Ratchov <alex@@caoua.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: March 5 2014 $
.Dt MIO_OPEN 3
.Os
.Sh NAME
.Nm mio_open ,
.Nm mio_close ,
.Nm mio_read ,
.Nm mio_write ,
.Nm mio_nfds ,
.Nm mio_pollfd ,
.Nm mio_revents ,
.Nm mio_eof
.Nd sndio interface to MIDI streams
.Sh SYNOPSIS
.In sndio.h
.Ft "struct mio_hdl *"
.Fn mio_open "const char *name" "unsigned int mode" "int nbio_flag"
.Ft "void"
.Fn mio_close "struct mio_hdl *hdl"
.Ft "size_t"
.Fn mio_read "struct mio_hdl *hdl" "void *addr" "size_t nbytes"
.Ft "size_t"
.Fn mio_write "struct mio_hdl *hdl" "const void *addr" "size_t nbytes"
.Ft "int"
.Fn mio_nfds "struct mio_hdl *hdl"
.Ft "int"
.Fn mio_pollfd "struct mio_hdl *hdl" "struct pollfd *pfd" "int events"
.Ft "int"
.Fn mio_revents "struct mio_hdl *hdl" "struct pollfd *pfd"
.Ft "int"
.Fn mio_eof "struct mio_hdl *hdl"
.Sh DESCRIPTION
The
.Nm sndio
library allows user processes to access
.Xr midi 4
hardware and
.Xr sndiod 8
MIDI thru boxes and control ports in a uniform way.
.Ss Opening and closing an MIDI stream
First the application must call the
.Fn mio_open
function to obtain a handle representing the newly created stream;
later it will be passed as the
.Ar hdl
argument of most other functions.
The
.Ar name
parameter gives the device string discussed in
.Xr sndio 7 .
If the program is using a single device and is providing no device chooser,
it should be set to MIO_PORTANY to allow the user to select it using the
.Ev MIDIDEVICE
environment variable.
.Pp
The
.Ar mode
parameter gives the direction of the stream.
The following are supported:
.Bl -tag -width "MIO_OUT | MIO_IN"
.It MIO_OUT
The stream is output-only; data written to the stream will be sent
to the hardware or other programs.
.It MIO_IN
The stream is input-only; received data from the hardware or
other programs must be read from the stream.
.It MIO_IN | MIO_OUT
The stream sends and receives data.
This mode should be used rather than calling
.Fn mio_open
twice.
.El
.Pp
If the
.Ar nbio_flag
argument is true (i.e. non-zero), then the
.Fn mio_read
and
.Fn mio_write
functions (see below) will be non-blocking.
.Pp
The
.Fn mio_close
function closes the stream and frees all allocated resources
associated with the
.Nm libsndio
handle.
.Ss Sending and receiving data
When input mode is selected, the
.Fn mio_read
function must be called to retrieve received data; it must be called
often enough to ensure that internal buffers will not overrun.
It will store at most
.Ar nbytes
bytes at the
.Ar addr
location.
Unless the
.Ar nbio_flag
flag is set, it will block until data becomes available and
will return zero only on error.
.Pp
When output mode is selected, the
.Fn mio_write
function can be called to provide data to transmit.
Unless the
.Ar nbio_flag
is set,
.Fn mio_write
will block until the requested amount of data is written.
.Ss Non-blocking mode operation
If the
.Ar nbio_flag
is set on
.Fn mio_open ,
then the
.Fn mio_read
and
.Fn mio_write
functions will never block; if no data is available, they will
return zero immediately.
.Pp
To avoid busy loops when non-blocking mode is used, the
.Xr poll 2
system call can be used to check if data can be
read from or written to the stream.
The
.Fn mio_pollfd
function prepares the array
.Ar pfd
of
.Va pollfd
structures for use with
.Xr poll 2 .
The optimal size of the
.Ar pfd
array, which the caller must pre-allocate, is provided by the
.Fn mio_nfds
function.
.Pp
.Xr poll 2
will sleep until any of the
.Ar events
requested with
.Fn mio_pollfd
have occurred.
Events are represented as a bit-mask of
.Va POLLIN
and
.Va POLLOUT
constants.
The events which woke up
.Xr poll 2
can be obtained with the
.Fn mio_revents
function.
If
.Va POLLIN
is set,
.Fn mio_read
can be called without blocking.
If
.Va POLLOUT
is set,
.Fn mio_write
can be called without blocking.
POLLHUP may be set if an error occurs, even if
it is not requested with
.Fn mio_pollfd .
.Ss Error handling
Errors related to the MIDI subsystem
(like hardware errors or dropped connections) and
programming errors (such as a call to
.Fn mio_read
on a play-only stream) are considered fatal.
Once an error occurs, all functions which take a
.Va mio_hdl
argument, except
.Fn mio_close
and
.Fn mio_eof ,
stop working (i.e. always return 0).
.Sh RETURN VALUES
The
.Fn mio_open
function returns the newly created handle on success or NULL
on failure.
.Pp
The
.Fn mio_pollfd
function returns the number of
.Va pollfd
structures filled.
The
.Fn mio_nfds
function returns the number of
.Va pollfd
structures the caller must preallocate in order to be sure
that
.Fn mio_pollfd
will never overrun.
.Pp
The
.Fn mio_revents
function returns the bit-mask set by
.Xr poll 2
in the
.Va pfd
array of
.Va pollfd
structures.
.Pp
The
.Fn mio_read
and
.Fn mio_write
functions return the number of bytes transferred.
.Pp
The
.Fn mio_eof
function returns 0 if there's no pending error, and a non-zero
value if there's an error.
.Sh ENVIRONMENT
.Bl -tag -width "SNDIO_DEBUGXXX" -compact
.It Ev SNDIO_DEBUG
The debug level:
may be a value between 0 and 2.
.El
.Sh SEE ALSO
.Xr poll 2 ,
.Xr midi 4 ,
.Xr sndio 7 ,
.Xr sndiod 8
@


1.15
log
@Remove useless quoting from .Fo and .Fn function names, to prevent
development of a cargo cult in case people look at existing files
for examples.  This achieves a consistent .Fo and .Fn quoting style
across the whole tree.
@
text
@d54 1
a54 1
.Xr sndiod 1
a245 1
.Xr sndiod 1 ,
d248 2
a249 1
.Xr sndio 7
@


1.14
log
@say this is the "sndio" api, as we have other audio/midi apis,
makes "man -k" happier.

ok jmc, schwarze
@
text
@d1 1
a1 1
.\" $OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d33 1
a33 1
.Fn "mio_open" "const char *name" "unsigned int mode" "int nbio_flag"
d35 1
a35 1
.Fn "mio_close" "struct mio_hdl *hdl"
d37 1
a37 1
.Fn "mio_read" "struct mio_hdl *hdl" "void *addr" "size_t nbytes"
d39 1
a39 1
.Fn "mio_write" "struct mio_hdl *hdl" "const void *addr" "size_t nbytes"
d41 1
a41 1
.Fn "mio_nfds" "struct mio_hdl *hdl"
d43 1
a43 1
.Fn "mio_pollfd" "struct mio_hdl *hdl" "struct pollfd *pfd" "int events"
d45 1
a45 1
.Fn "mio_revents" "struct mio_hdl *hdl" "struct pollfd *pfd"
d47 1
a47 1
.Fn "mio_eof" "struct mio_hdl *hdl"
@


1.13
log
@remove FILES sections because it's incomplete, wrong and doesn't give
any useful information
@
text
@d29 1
a29 1
.Nd interface to MIDI streams
@


1.12
log
@use fancy .In macro for includes. from Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.11 2013/04/06 11:38:41 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 6 2013 $
a243 10
.El
.Sh FILES
.Bl -tag -width "/tmp/aucat-<uid>/aucat0" -compact
.It Pa /tmp/aucat-<uid>/aucat0
Default path to
.Xr sndiod 1
socket to connect to.
.It Pa /dev/rmidiX
.Xr midi 4
devices.
@


1.11
log
@explain what "default" means in sndio.7 rather than {sio,mio}_open.3,
with tweaks from jmc
@
text
@d1 1
a1 1
.\" $OpenBSD$
d17 1
a17 1
.Dd $Mdocdate$
d31 1
a31 1
.Fd #include <sndio.h>
@


1.10
log
@Improve instructions for handling non-blocking I/O with poll(2) and
the mio_* functions. As per suggestion from jmc tidy up spacing in
RETURN VALUES section and Xr poll(2). ok jmc ratchov
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.9 2012/09/14 20:16:24 stsp Exp $
d17 1
a17 1
.Dd $Mdocdate: September 14 2012 $
a62 7
The
.Fn mio_open
function tries to connect to the
.Xr sndiod 1
MIDI thru box or to use the
.Xr midi 4
hardware port.
@


1.9
log
@Have mio_open(3) document all return values in the RETURN VALUES section.
And don't document the return value of mio_pollfd() twice, one instance
of which was incorrect. ok jmc, ratchov
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.8 2012/05/23 19:25:11 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: May 23 2012 $
d152 1
a152 1
function fills the array
d156 15
a170 5
structures, used by
.Xr poll 2 ,
with
.Ar events ;
the latter is a bit-mask of
d174 2
a175 1
constants; refer to
d177 3
a179 1
for more details.
d191 1
a191 1
it is not selected with
d211 1
d225 1
d235 1
d241 1
d244 1
a244 1
returns 0 if there's no pending error, and a non-zero
d264 1
@


1.8
log
@Make the "default" string a valid device name that has the same effect
as NULL has. This will (hopefully) simplify ports where the user
passes the device string.
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.7 2012/04/11 06:05:43 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 11 2012 $
d120 1
a120 1
location and return the number of bytes stored.
a166 13
.Fn mio_pollfd
returns the number of
.Va pollfd
structures filled.
The
.Fn mio_revents
function returns the bit-mask set by
.Xr poll 2
in the
.Va pfd
array of
.Va pollfd
structures.
a179 9
.Pp
The
.Fn mio_nfds
function returns the number of
.Va pollfd
structures the caller must preallocate in order to be sure
that
.Fn mio_pollfd
will never overrun.
a192 6
.Pp
The
.Fn mio_eof
function can be used at any stage;
it returns 0 if there's no pending error, and a non-zero
value if there's an error.
d200 20
a219 1
function returns 1 on success and 0 on failure.
d225 4
@


1.7
log
@Use "unsigned int" rather than "unsigned". No object change.
suggested by deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.6 2011/12/09 14:38:09 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: December 9 2011 $
d75 1
a75 1
it should be set to NULL to allow the user to select it using the
@


1.6
log
@mention sndiod rather than aucat when talking about the server
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.5 2011/10/17 21:09:11 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: October 17 2011 $
d33 1
a33 1
.Fn "mio_open" "const char *name" "unsigned mode" "int nbio_flag"
@


1.5
log
@Remove midicat since aucat can now be used instead of midicat
with almost the same syntax (roughly an extra -M option).
Thru boxes are created with aucat, and corresponding MIDI port
names have the "aucat" prefix instead of "midithru". The old
device name will still work some time for backward compatibility.

ok deraadt
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.4 2011/04/16 10:52:22 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: April 16 2011 $
d54 1
a54 1
.Xr aucat 1
d66 1
a66 1
.Xr aucat 1
d244 1
a244 1
.Xr aucat 1
d251 1
a251 1
.Xr aucat 1 ,
@


1.4
log
@Make aucat audio and midi backends share the same code to communicate
with the server. As we're at it use the same protocol for midi and
audio. Now, both audio and midi code use the same SNDIO_DEBUG environment
variable to turn on/off DPRINTF's.
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.3 2009/07/26 12:42:48 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: July 26 2009 $
d54 2
a55 2
.Xr midicat 1
MIDI thru boxes in a uniform way.
d66 2
a67 2
.Xr midicat 1
software MIDI thru box or to use the
d69 1
a69 1
hardware device.
d235 1
a235 1
.Bl -tag -width "MIO_DEBUGXXX" -compact
d241 2
a242 2
.Bl -tag -width "/tmp/aucat-<uid>/midithru0" -compact
.It Pa /tmp/aucat-<uid>/midithru0
d244 1
a244 1
.Xr midicat 1
d251 1
a251 1
.Xr midicat 1 ,
@


1.3
log
@rephrase description of (MIO_IN | MIO_OUT) mode
from Thomas Pfaff, ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.2 2009/07/25 11:15:56 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: July 25 2009 $
d236 1
a236 1
.It Ev MIO_DEBUG
@


1.2
log
@use const qualifier in libsndio, making it slightly more consistent
with open(2) and write(2) syscalls.
from Thomas Pfaff, jakemsr is fine with it
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.1 2009/07/25 08:44:26 ratchov Exp $
d92 3
a94 2
This mode should be used rather using twice
.Fn mio_open .
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: mio_open.3,v 1.19 2009/05/15 11:07:41 ratchov Exp $
d17 1
a17 1
.Dd $Mdocdate: July 17 2009 $
d33 1
a33 1
.Fn "mio_open" "char *name" "unsigned mode" "int nbio_flag"
d39 1
a39 1
.Fn "mio_write" "struct mio_hdl *hdl" "void *addr" "size_t nbytes"
@

