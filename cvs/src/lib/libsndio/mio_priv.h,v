head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.6
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.12
date	2015.11.22.12.01.23;	author ratchov;	state Exp;
branches;
next	1.11;
commitid	qJB6f577aQuApYmn;

1.11
date	2015.01.16.16.48.52;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	0DYulI8hhujBHMcR;

1.10
date	2013.11.13.22.38.22;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.27.12.08.25;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.15.08.05.22;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.17.21.09.11;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.16.10.52.22;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.12.21.40.22;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.21.16.48.03;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.26.13.33.30;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.25.11.15.56;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.25.08.44.26;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Don't remove the type component from the device string before passing
it to the *_open() functions. It's more flexible this way. No behaviour
change.
@
text
@/*	$OpenBSD: mio_priv.h,v 1.11 2015/01/16 16:48:52 deraadt Exp $	*/
/*
 * Copyright (c) 2008 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef MIO_PRIV_H
#define MIO_PRIV_H

#include "sndio.h"

#define MIO_MAXNFDS	16

/*
 * private ``handle'' structure
 */
struct mio_hdl {
	struct mio_ops *ops;
	unsigned mode;			/* MIO_IN | MIO_OUT */
	int nbio;			/* true if non-blocking io */
	int eof;			/* true if error occured */
};

/*
 * operations every device should support
 */
struct mio_ops {
	void (*close)(struct mio_hdl *);
	size_t (*write)(struct mio_hdl *, const void *, size_t);
	size_t (*read)(struct mio_hdl *, void *, size_t);
	int (*nfds)(struct mio_hdl *);
	int (*pollfd)(struct mio_hdl *, struct pollfd *, int);
	int (*revents)(struct mio_hdl *, struct pollfd *);
};

struct mio_hdl *_mio_rmidi_open(const char *, unsigned, int);
struct mio_hdl *_mio_aucat_open(const char *, unsigned, int);
void _mio_create(struct mio_hdl *, struct mio_ops *, unsigned, int);
void _mio_destroy(struct mio_hdl *);

#endif /* !defined(MIO_PRIV_H) */
@


1.11
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.10 2013/11/13 22:38:22 ratchov Exp $	*/
d47 1
a47 1
struct mio_hdl *_mio_aucat_open(const char *, unsigned, int, unsigned);
@


1.10
log
@Prefix by '_' symbols that are not part of the API.

ok deraadt, guenther
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a19 1
#include <sys/param.h>
@


1.9
log
@make midi code use non-blocking i/o as does audio code, in order
to make both look similar
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.8 2011/11/15 08:05:22 ratchov Exp $	*/
d47 4
a50 4
struct mio_hdl *mio_rmidi_open(const char *, unsigned, int);
struct mio_hdl *mio_aucat_open(const char *, unsigned, int, unsigned);
void mio_create(struct mio_hdl *, struct mio_ops *, unsigned, int);
void mio_destroy(struct mio_hdl *);
@


1.8
log
@Add a "device number" component in sndio(7) device names, allowing a
single aucat instance to handle all audio and MIDI services. Since
this partially breaks compatibility, this is a opportunitiy to fix few
other design mistakes (eg ':' being used by inet6, type name vs api
name confusion, etc..). This leads to the following names:

        type[@@hostname][,unit]/devnum[.option]

The device number is the minor device number for direct hardware
access (ie the 'N' in /dev/audioN). For aucat, this is the occurence
number of the -f (or -M) option.

There's a compatibility hook to keep old names working if only one
aucat server is running.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.7 2011/10/17 21:09:11 ratchov Exp $	*/
d23 2
d42 1
@


1.7
log
@Remove midicat since aucat can now be used instead of midicat
with almost the same syntax (roughly an extra -M option).
Thru boxes are created with aucat, and corresponding MIDI port
names have the "aucat" prefix instead of "midithru". The old
device name will still work some time for backward compatibility.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.6 2011/04/16 10:52:22 ratchov Exp $	*/
d45 1
a45 1
struct mio_hdl *mio_aucat_open(const char *, unsigned, int);
@


1.6
log
@Make aucat audio and midi backends share the same code to communicate
with the server. As we're at it use the same protocol for midi and
audio. Now, both audio and midi code use the same SNDIO_DEBUG environment
variable to turn on/off DPRINTF's.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.5 2011/04/12 21:40:22 ratchov Exp $	*/
a44 1
struct mio_hdl *mio_midithru_open(const char *, unsigned, int);
@


1.5
log
@Use mio_<backend>_ prefix for private midi-related functions and put
them in files named mio_<backend>.c
No behaviour change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.4 2009/08/21 16:48:03 ratchov Exp $	*/
a22 16
#ifdef DEBUG
#define DPRINTF(...)						\
	do {							\
		if (mio_debug > 0)				\
			fprintf(stderr, __VA_ARGS__);		\
	} while(0)
#define DPERROR(s)						\
	do {							\
		if (mio_debug > 0)				\
			perror(s);				\
	} while(0)
#else
#define DPRINTF(...) do {} while(0)
#define DPERROR(s) do {} while(0)
#endif

a48 4

#ifdef DEBUG
extern int mio_debug;
#endif
@


1.4
log
@make aucat(1) expose a MIDI device to control server behaviour in
realtime.  For now only the playback volume of individual streams can be
changed/monitored. To each stream is assigned a MIDI channel; the volume
is changed/monitored using the standard controller number 7.
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.3 2009/07/26 13:33:30 ratchov Exp $	*/
d60 3
a62 3
struct mio_hdl *mio_open_rmidi(const char *, unsigned, int);
struct mio_hdl *mio_open_thru(const char *, unsigned, int);
struct mio_hdl *mio_open_aucat(const char *, unsigned, int);
@


1.3
log
@use ``sizeof(string) - 1'' rather than ``strlen(string)'' on static
strings. suggested by Thomas Pfaff
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.2 2009/07/25 11:15:56 ratchov Exp $	*/
d62 1
@


1.2
log
@use const qualifier in libsndio, making it slightly more consistent
with open(2) and write(2) syscalls.
from Thomas Pfaff, jakemsr is fine with it
@
text
@d1 1
a1 1
/*	$OpenBSD: mio_priv.h,v 1.1 2009/07/25 08:44:26 ratchov Exp $	*/
d44 1
a44 1
	unsigned mode;			/* MIO_PLAY | MIO_REC */
@


1.1
log
@Currently midi capable programs can control midi hardware, but
cannot cooperate with other programs.  The aim of this change is
to allow any program to send midi data to other programs as they
were midi hardware. For instance, this change should solve the
longstanding problem of using a midi sequencer with software
synthesizers. More precisely:

 - new midicat(1) utility (actually hardlink to aucat(1)).
   it creates software midi thru boxes, allowing programs
   to send midi messages to other programs as they were
   midi(4) hardware.

 - new midi api in libsndio (see mio_open(3)), to access
   midi(4) devices and midicat(1) sockets in a uniform way.

 - new device naming scheme <service>:<unit>[.<option>],
   common to audio and midi.

 - new sndio(7) manual describing concepts and naming

The current audio device naming still works, but people having
scripts or configuration files containing device names could read
the sndio(7) man page and slowly start updating device names.

discussed with jakemsr@@ and deraadt@@, help form jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sndio_priv.h,v 1.7 2009/05/15 13:06:40 ratchov Exp $	*/
d54 1
a54 1
	size_t (*write)(struct mio_hdl *, void *, size_t);
d60 2
a61 2
struct mio_hdl *mio_open_rmidi(char *, unsigned, int);
struct mio_hdl *mio_open_thru(char *, unsigned, int);
@

