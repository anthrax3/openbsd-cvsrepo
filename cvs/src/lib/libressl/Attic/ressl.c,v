head	1.19;
access;
symbols
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11;
locks; strict;
comment	@ * @;


1.19
date	2014.10.31.13.46.17;	author jsing;	state dead;
branches;
next	1.18;
commitid	y63FmUITd26yVanM;

1.18
date	2014.10.15.21.02.39;	author tedu;	state Exp;
branches;
next	1.17;
commitid	Gg0QwpEAI9qneKrL;

1.17
date	2014.10.15.14.11.47;	author jsing;	state Exp;
branches;
next	1.16;
commitid	HjVR1CEERI4dXvYk;

1.16
date	2014.09.29.15.31.38;	author jsing;	state Exp;
branches;
next	1.15;
commitid	wR1cJRPPvEugR0pE;

1.15
date	2014.09.29.15.11.29;	author jsing;	state Exp;
branches;
next	1.14;
commitid	P8auAgiIOslQjNvY;

1.14
date	2014.09.28.14.45.48;	author reyk;	state Exp;
branches;
next	1.13;
commitid	3rzcEvcae6gEJLgr;

1.13
date	2014.09.28.06.24.00;	author tedu;	state Exp;
branches;
next	1.12;
commitid	YPJabLNLC7uq6fWz;

1.12
date	2014.08.15.16.55.32;	author tedu;	state Exp;
branches;
next	1.11;
commitid	U2Kl9z3wIJEXe2cK;

1.11
date	2014.08.06.01.54.01;	author jsing;	state Exp;
branches;
next	1.10;
commitid	cxONhRbzhnTfYWZx;

1.10
date	2014.08.05.12.46.16;	author jsing;	state Exp;
branches;
next	1.9;
commitid	sTdRvCwEPpuqWINJ;

1.9
date	2014.08.04.16.18.42;	author jsing;	state Exp;
branches;
next	1.8;
commitid	QkNj4cB2ndiHRnGC;

1.8
date	2014.08.04.15.58.29;	author jsing;	state Exp;
branches;
next	1.7;
commitid	pCoJy5QbzJaa4JhK;

1.7
date	2014.08.04.15.55.26;	author jsing;	state Exp;
branches;
next	1.6;
commitid	40j3aP8fQAiX2rmI;

1.6
date	2014.08.04.15.48.01;	author jsing;	state Exp;
branches;
next	1.5;
commitid	oShrRYNXuWptzWNo;

1.5
date	2014.07.13.23.19.02;	author jsing;	state Exp;
branches;
next	1.4;
commitid	2T0Y1V8q1ZpmS3FD;

1.4
date	2014.07.13.23.06.18;	author jsing;	state Exp;
branches;
next	1.3;
commitid	Zz2JBDr6GKSqFSC5;

1.3
date	2014.07.13.22.42.01;	author jsing;	state Exp;
branches;
next	1.2;
commitid	llGuoRca6WCUn8iF;

1.2
date	2014.07.13.22.13.52;	author jsing;	state Exp;
branches;
next	1.1;
commitid	v4JoNvWfMl7JsM0L;

1.1
date	2014.07.12.01.20.24;	author jsing;	state Exp;
branches;
next	;
commitid	961qrZstHKsjYeZe;


desc
@@


1.19
log
@Rename libressl to libtls to avoid confusion and to make it easier to
distinguish between LibreSSL (the project) and libressl (the library).

Discussed with many.
@
text
@/* $OpenBSD: ressl.c,v 1.18 2014/10/15 21:02:39 tedu Exp $ */
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/socket.h>

#include <errno.h>
#include <stdlib.h>
#include <unistd.h>

#include <openssl/bio.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

#include <ressl.h>
#include "ressl_internal.h"

static struct ressl_config *ressl_config_default;

int
ressl_init(void)
{
	static int ressl_initialised = 0;

	if (ressl_initialised)
		return (0);

	SSL_load_error_strings();
	SSL_library_init();

	if ((ressl_config_default = ressl_config_new()) == NULL)
		return (-1);

	ressl_initialised = 1;

	return (0);
}

const char *
ressl_error(struct ressl *ctx)
{
	return ctx->errmsg;
}

int
ressl_set_error(struct ressl *ctx, char *fmt, ...)
{
	va_list ap;
	int rv;

	ctx->err = errno;
	free(ctx->errmsg);
	ctx->errmsg = NULL;

	va_start(ap, fmt);
	rv = vasprintf(&ctx->errmsg, fmt, ap);
	va_end(ap);

	return (rv);
}

struct ressl *
ressl_new(void)
{
	struct ressl *ctx;

	if ((ctx = calloc(1, sizeof(*ctx))) == NULL)
		return (NULL);

	ctx->config = ressl_config_default;

	ressl_reset(ctx);

	return (ctx);
}

int
ressl_configure(struct ressl *ctx, struct ressl_config *config)
{
	if (config == NULL)
		config = ressl_config_default;

	ctx->config = config;

	if ((ctx->flags & RESSL_SERVER) != 0)
		return (ressl_configure_server(ctx));

	return (0);
}

int
ressl_configure_keypair(struct ressl *ctx)
{
	EVP_PKEY *pkey = NULL;
	X509 *cert = NULL;
	BIO *bio = NULL;

	if (ctx->config->cert_mem != NULL) {
		if (SSL_CTX_use_certificate_chain(ctx->ssl_ctx,
		    ctx->config->cert_mem, ctx->config->cert_len) != 1) {
			ressl_set_error(ctx, "failed to load certificate");
			goto err;
		}
		cert = NULL;
	}
	if (ctx->config->key_mem != NULL) {
		if ((bio = BIO_new_mem_buf(ctx->config->key_mem,
		    ctx->config->key_len)) == NULL) {
			ressl_set_error(ctx, "failed to create buffer");
			goto err;
		}
		if ((pkey = PEM_read_bio_PrivateKey(bio, NULL, NULL,
		    NULL)) == NULL) {
			ressl_set_error(ctx, "failed to read private key");
			goto err;
		}
		if (SSL_CTX_use_PrivateKey(ctx->ssl_ctx, pkey) != 1) {
			ressl_set_error(ctx, "failed to load private key");
			goto err;
		}
		BIO_free(bio);
		bio = NULL;
		EVP_PKEY_free(pkey);
		pkey = NULL;
	}

	if (ctx->config->cert_file != NULL) {
		if (SSL_CTX_use_certificate_chain_file(ctx->ssl_ctx,
		    ctx->config->cert_file) != 1) {
			ressl_set_error(ctx, "failed to load certificate file");
			goto err;
		}
	}
	if (ctx->config->key_file != NULL) {
		if (SSL_CTX_use_PrivateKey_file(ctx->ssl_ctx,
		    ctx->config->key_file, SSL_FILETYPE_PEM) != 1) {
			ressl_set_error(ctx, "failed to load private key file");
			goto err;
		}
	}

	if (SSL_CTX_check_private_key(ctx->ssl_ctx) != 1) {
		ressl_set_error(ctx, "private/public key mismatch");
		goto err;
	}

	return (0);

err:
	EVP_PKEY_free(pkey);
	X509_free(cert);
	BIO_free(bio);

	return (1);
}

int
ressl_configure_ssl(struct ressl *ctx)
{
	SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_NO_SSLv2);
	SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_NO_SSLv3);

	SSL_CTX_clear_options(ctx->ssl_ctx, SSL_OP_NO_TLSv1);
	SSL_CTX_clear_options(ctx->ssl_ctx, SSL_OP_NO_TLSv1_1);
	SSL_CTX_clear_options(ctx->ssl_ctx, SSL_OP_NO_TLSv1_2);

	if ((ctx->config->protocols & RESSL_PROTOCOL_TLSv1_0) == 0)
		SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_NO_TLSv1);
	if ((ctx->config->protocols & RESSL_PROTOCOL_TLSv1_1) == 0)
		SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_NO_TLSv1_1);
	if ((ctx->config->protocols & RESSL_PROTOCOL_TLSv1_2) == 0)
		SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_NO_TLSv1_2);

	if (ctx->config->ciphers != NULL) {
		if (SSL_CTX_set_cipher_list(ctx->ssl_ctx,
		    ctx->config->ciphers) != 1) {
			ressl_set_error(ctx, "failed to set ciphers");
			goto err;
		}
	}

	return (0);

err:
	return (-1);
}

void
ressl_free(struct ressl *ctx)
{
	if (ctx == NULL)
		return;
	ressl_reset(ctx);
	free(ctx);
}

void
ressl_reset(struct ressl *ctx)
{
	SSL_CTX_free(ctx->ssl_ctx);
	SSL_free(ctx->ssl_conn);

	ctx->ssl_conn = NULL;
	ctx->ssl_ctx = NULL;

	ctx->socket = -1;

	ctx->err = 0;
	free(ctx->errmsg);
	ctx->errmsg = NULL;
}

int
ressl_read(struct ressl *ctx, void *buf, size_t buflen, size_t *outlen)
{
	int ret, ssl_err;

	ret = SSL_read(ctx->ssl_conn, buf, buflen);
	if (ret > 0) {
		*outlen = (size_t)ret;
		return (0);
	}

	ssl_err = SSL_get_error(ctx->ssl_conn, ret);
	switch (ssl_err) {
	case SSL_ERROR_WANT_READ:
		return (RESSL_READ_AGAIN);
	case SSL_ERROR_WANT_WRITE:
		return (RESSL_WRITE_AGAIN);
	default:
		ressl_set_error(ctx, "read failed (%i)", ssl_err);
		return (-1);
	}
}

int
ressl_write(struct ressl *ctx, const void *buf, size_t buflen, size_t *outlen)
{
	int ret, ssl_err;

	ret = SSL_write(ctx->ssl_conn, buf, buflen);
	if (ret > 0) {
		*outlen = (size_t)ret;
		return (0);
	}

	ssl_err = SSL_get_error(ctx->ssl_conn, ret);
	switch (ssl_err) {
	case SSL_ERROR_WANT_READ:
		return (RESSL_READ_AGAIN);
	case SSL_ERROR_WANT_WRITE:
		return (RESSL_WRITE_AGAIN);
	default:
		ressl_set_error(ctx, "write failed (%i)", ssl_err);
		return (-1);
	}
}

int
ressl_close(struct ressl *ctx)
{
	/* XXX - handle case where multiple calls are required. */
	if (ctx->ssl_conn != NULL) {
		if (SSL_shutdown(ctx->ssl_conn) == -1) {
			ressl_set_error(ctx, "SSL shutdown failed");
			goto err;
		}
	}

	if (ctx->socket != -1) {
		if (shutdown(ctx->socket, SHUT_RDWR) != 0) {
			ressl_set_error(ctx, "shutdown");
			goto err;
		}
		if (close(ctx->socket) != 0) {
			ressl_set_error(ctx, "close");
			goto err;
		}
		ctx->socket = -1;
	}

	return (0);

err:
	return (-1);
}
@


1.18
log
@Fuck it. No SSLv3; not now, not ever. The API of the future will only
support the protocols of the future.

(Perhaps a bit late in burning this bridge entirely, but there's no time
like the present, esp. with other players now leaning against back compat.)
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.c,v 1.17 2014/10/15 14:11:47 jsing Exp $ */
@


1.17
log
@Clear protocol options before optionally setting them.
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.c,v 1.16 2014/09/29 15:31:38 jsing Exp $ */
d175 1
a176 1
	SSL_CTX_clear_options(ctx->ssl_ctx, SSL_OP_NO_SSLv3);
a180 2
	if ((ctx->config->protocols & RESSL_PROTOCOL_SSLv3) == 0)
		SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_NO_SSLv3);
@


1.16
log
@Move cipher configuration handling to the shared SSL configuration function
so that applies to both the ressl client and server.
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.c,v 1.15 2014/09/29 15:11:29 jsing Exp $ */
d175 5
@


1.15
log
@Add an option that allows the enabled SSL protocols to be explicitly
configured.

Discussed with several.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.c,v 1.14 2014/09/28 14:45:48 reyk Exp $ */
d185 8
d194 3
@


1.14
log
@Add a new API function SSL_CTX_use_certificate_chain() that allows to
read the PEM-encoded certificate chain from memory instead of a file.
This idea is derived from an older implementation in relayd that was
needed to use the function with a privep'ed process in a chroot.  Now
it is time to get it into LibreSSL to make the API more privsep-
friendly and to make it available for other programs and the ressl
library.

ok jsing@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.c,v 1.13 2014/09/28 06:24:00 tedu Exp $ */
d169 17
@


1.13
log
@revamp the config interface to own memory. easier to use correctly without
caller worrying about leaks or lifetimes.

after feedback from jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.c,v 1.12 2014/08/15 16:55:32 tedu Exp $ */
d113 2
a114 10
		if ((bio = BIO_new_mem_buf(ctx->config->cert_mem,
		    ctx->config->cert_len)) == NULL) {
			ressl_set_error(ctx, "failed to create buffer");
			goto err;
		}
		if ((cert = PEM_read_bio_X509(bio, NULL, NULL, NULL)) == NULL) {
			ressl_set_error(ctx, "failed to read certificate");
			goto err;
		}
		if (SSL_CTX_use_certificate(ctx->ssl_ctx, cert) != 1) {
a117 3
		BIO_free(bio);
		bio = NULL;
		X509_free(cert);
d142 2
a143 2
		if (SSL_CTX_use_certificate_file(ctx->ssl_ctx,
		    ctx->config->cert_file, SSL_FILETYPE_PEM) != 1) {
@


1.12
log
@use void * instead of char *. ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.c,v 1.11 2014/08/06 01:54:01 jsing Exp $ */
d32 1
a32 1
extern struct ressl_config ressl_config_default;
d45 3
d84 1
a84 1
	ctx->config = &ressl_config_default;
d95 1
a95 1
		config = &ressl_config_default;
@


1.11
log
@Add support for loading the public/private key from memory, rather than
directly from file.
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.c,v 1.10 2014/08/05 12:46:16 jsing Exp $ */
d205 1
a205 1
ressl_read(struct ressl *ctx, char *buf, size_t buflen, size_t *outlen)
d228 1
a228 1
ressl_write(struct ressl *ctx, const char *buf, size_t buflen, size_t *outlen)
@


1.10
log
@Add $OpenBSD$ tags.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d24 5
d105 50
a154 4
	if (SSL_CTX_use_certificate_file(ctx->ssl_ctx, ctx->config->cert_file,
	    SSL_FILETYPE_PEM) != 1) {
		ressl_set_error(ctx, "failed to load certificate");
		return (1);
d156 6
a161 4
	if (SSL_CTX_use_PrivateKey_file(ctx->ssl_ctx, ctx->config->key_file,
	    SSL_FILETYPE_PEM) != 1) {
		ressl_set_error(ctx, "failed to load private key");
		return (1);
d163 1
d166 1
a166 1
		return (1);
d168 1
d170 7
@


1.9
log
@A ressl server needs different configuration from a ressl client - provide
a specific server configuration function and call this from
ressl_configure.
@
text
@d1 1
@


1.8
log
@Provide a utility function for loading a private/public keypair.
@
text
@d90 3
@


1.7
log
@Improve ressl_{read,write} handling of non-blocking reads/writes.
@
text
@d93 20
@


1.6
log
@Free the SSL context first and let the reference counting do its thing.
@
text
@d121 1
a121 1
	int ret;
a122 1
	/* XXX - handle async/non-blocking. */
d124 13
a136 5
	if (ret <= 0) {
		ret = SSL_get_error(ctx->ssl_conn, ret);
		if (ret == SSL_ERROR_WANT_READ)
			return (-2);
		ressl_set_error(ctx, "read failed: %i", ret);
a138 2
	*outlen = (size_t)ret;
	return (0);
d144 1
a144 1
	int ret;
a145 1
	/* XXX - handle async/non-blocking. */
d147 13
a159 3
	if (ret < 0) {
		ressl_set_error(ctx, "write failed %d",
		    SSL_get_error(ctx->ssl_conn, ret));
a161 2
	*outlen = (size_t)ret;
	return (0);
@


1.5
log
@Tabs, not spaces.
@
text
@d105 2
a106 5
	/* SSL_free frees the SSL context. */
	if (ctx->ssl_conn != NULL)
		SSL_free(ctx->ssl_conn);
	else
		SSL_CTX_free(ctx->ssl_ctx);
@


1.4
log
@Split the context allocation out from the configuration. This will allow
us to properly report errors that occur during configuration processing.

Discussed with tedu@@
@
text
@d53 2
a54 2
        va_list ap;
        int rv;
d60 3
a62 3
        va_start(ap, fmt);
        rv = vasprintf(&ctx->errmsg, fmt, ap);
        va_end(ap);
@


1.3
log
@Move the client code into a separate file.
@
text
@d68 1
a68 1
ressl_new(struct ressl_config *config)
d75 10
d90 1
a90 3
	ressl_reset(ctx);

	return (ctx);
@


1.2
log
@Use a single ressl.h header file.

Discussed with beck@@ and tedu@@.
@
text
@a16 1
#include <sys/types.h>
a18 2
#include <arpa/inet.h>

a19 1
#include <netdb.h>
a22 2
#include <openssl/x509.h>

a110 154
}

int
ressl_connect(struct ressl *ctx, const char *host, const char *port)
{
	struct addrinfo hints, *res, *res0;
	const char *h = NULL, *p = NULL;
	char *hs = NULL, *ps = NULL;
	int rv = -1, s = -1, ret;

	if (host == NULL) {
		ressl_set_error(ctx, "host not specified");
		goto err;
	}

	/*
	 * If port is NULL try to extract a port from the specified host,
	 * otherwise use the default.
	 */
	if ((p = (char *)port) == NULL) {
		ret = ressl_host_port(host, &hs, &ps);
		if (ret == -1) {
			ressl_set_error(ctx, "memory allocation failure");
			goto err;
		}
		if (ret != 0)
			port = HTTPS_PORT;
	}

	h = (hs != NULL) ? hs : host;
	p = (ps != NULL) ? ps : port;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	if ((ret = getaddrinfo(h, p, &hints, &res0)) != 0) {
		ressl_set_error(ctx, "%s", gai_strerror(ret));
		goto err;
	}
	for (res = res0; res; res = res->ai_next) {
		s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
		if (s == -1) {
			ressl_set_error(ctx, "socket");
			continue;
		}
		if (connect(s, res->ai_addr, res->ai_addrlen) == -1) {
			ressl_set_error(ctx, "connect");
			close(s);
			s = -1;
			continue;
		}

		break;  /* Connected. */
	}
	freeaddrinfo(res0);

	if (s == -1)
		goto err;

	if (ressl_connect_socket(ctx, s, h) != 0) {
		close(s);
		goto err;
	}

	rv = 0;

err:

	free(hs);
	free(ps);

	return (rv);
}

int
ressl_connect_socket(struct ressl *ctx, int socket, const char *hostname)
{
	union { struct in_addr ip4; struct in6_addr ip6; } addrbuf;
	X509 *cert = NULL;
	int ret;

	ctx->socket = socket;

	/* XXX - add a configuration option to control versions. */
	if ((ctx->ssl_ctx = SSL_CTX_new(SSLv23_client_method())) == NULL) {
		ressl_set_error(ctx, "ssl context failure");
		goto err;
	}
	if (ctx->config->verify) {
		if (hostname == NULL) {
			ressl_set_error(ctx, "server name not specified");
			goto err;
		}

		SSL_CTX_set_verify(ctx->ssl_ctx, SSL_VERIFY_PEER, NULL);

		if (SSL_CTX_load_verify_locations(ctx->ssl_ctx,
		    ctx->config->ca_file, ctx->config->ca_path) != 1) {
			ressl_set_error(ctx, "ssl verify setup failure");
			goto err;
		}
		if (ctx->config->verify_depth >= 0)
			SSL_CTX_set_verify_depth(ctx->ssl_ctx,
			    ctx->config->verify_depth);
	}

	if ((ctx->ssl_conn = SSL_new(ctx->ssl_ctx)) == NULL) {
		ressl_set_error(ctx, "ssl connection failure");
		goto err;
	}
	if (SSL_set_fd(ctx->ssl_conn, ctx->socket) != 1) {
		ressl_set_error(ctx, "ssl file descriptor failure");
		goto err;
	}

	/*
	 * RFC4366 (SNI): Literal IPv4 and IPv6 addresses are not
	 * permitted in "HostName".
	 */
	if (hostname != NULL &&
	    inet_pton(AF_INET, hostname, &addrbuf) != 1 &&
	    inet_pton(AF_INET6, hostname, &addrbuf) != 1) {
		if (SSL_set_tlsext_host_name(ctx->ssl_conn, hostname) == 0) {
			ressl_set_error(ctx, "SNI host name failed");
			goto err;
		}
	}

	if ((ret = SSL_connect(ctx->ssl_conn)) != 1) {
		ressl_set_error(ctx, "SSL connect failed: %i",
		    SSL_get_error(ctx->ssl_conn, ret));
		goto err;
	}

	if (ctx->config->verify) {
		cert = SSL_get_peer_certificate(ctx->ssl_conn);
		if (cert == NULL) {
			ressl_set_error(ctx, "no server certificate");
			goto err;
		}
		if (ressl_check_hostname(cert, hostname) != 0) {
			ressl_set_error(ctx, "host `%s' not present in"
			    " server certificate", hostname);
			goto err;
		}
	}

	return (0);

err:
	X509_free(cert);

	return (-1);
@


1.1
log
@Initial version of libressl - a library that provides a clean, simple,
consistent and secure-by-default API for SSL clients (and soon servers).

This is a long way from complete and the interface will likely change
substantially - committing now so that further work can happen in the tree.

Initiated by tedu@@ and inspired by discussions with tedu@@, beck@@ and
other developers.
@
text
@d29 1
a29 2
#include <ressl/ressl.h>

@

