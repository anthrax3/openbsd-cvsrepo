head	1.12;
access;
symbols
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6;
locks; strict;
comment	@ * @;


1.12
date	2014.10.31.13.46.17;	author jsing;	state dead;
branches;
next	1.11;
commitid	y63FmUITd26yVanM;

1.11
date	2014.10.15.14.08.26;	author jsing;	state Exp;
branches;
next	1.10;
commitid	1AWmBl2TilpGikYJ;

1.10
date	2014.10.03.14.09.09;	author jsing;	state Exp;
branches;
next	1.9;
commitid	qYJCE7NTV5cgFCnP;

1.9
date	2014.09.29.15.31.38;	author jsing;	state Exp;
branches;
next	1.8;
commitid	wR1cJRPPvEugR0pE;

1.8
date	2014.09.29.15.11.29;	author jsing;	state Exp;
branches;
next	1.7;
commitid	P8auAgiIOslQjNvY;

1.7
date	2014.08.27.10.46.53;	author reyk;	state Exp;
branches;
next	1.6;
commitid	3hBv77YGLYnHtaoP;

1.6
date	2014.08.05.12.46.16;	author jsing;	state Exp;
branches;
next	1.5;
commitid	sTdRvCwEPpuqWINJ;

1.5
date	2014.08.04.16.34.11;	author jsing;	state Exp;
branches;
next	1.4;
commitid	SkNypU8etCDiAoKI;

1.4
date	2014.08.04.16.19.50;	author jsing;	state Exp;
branches;
next	1.3;
commitid	2RpTGFJPhEWCmXdh;

1.3
date	2014.08.04.16.18.42;	author jsing;	state Exp;
branches;
next	1.2;
commitid	QkNj4cB2ndiHRnGC;

1.2
date	2014.08.04.16.07.25;	author jsing;	state Exp;
branches;
next	1.1;
commitid	oRruv5KH2oVUSn97;

1.1
date	2014.07.13.23.36.24;	author jsing;	state Exp;
branches;
next	;
commitid	t51OHDRabn5Zy5GJ;


desc
@@


1.12
log
@Rename libressl to libtls to avoid confusion and to make it easier to
distinguish between LibreSSL (the project) and libressl (the library).

Discussed with many.
@
text
@/* $OpenBSD: ressl_server.c,v 1.11 2014/10/15 14:08:26 jsing Exp $ */
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <openssl/ec.h>
#include <openssl/ssl.h>

#include <ressl.h>
#include "ressl_internal.h"

struct ressl *
ressl_server(void)
{
	struct ressl *ctx;

	if ((ctx = ressl_new()) == NULL)
		return (NULL);

	ctx->flags |= RESSL_SERVER;

	return (ctx);
}

struct ressl *
ressl_server_conn(struct ressl *ctx)
{
	struct ressl *conn_ctx;

	if ((conn_ctx = ressl_new()) == NULL)
		return (NULL);

	conn_ctx->flags |= RESSL_SERVER_CONN;

	return (conn_ctx);
}

int
ressl_configure_server(struct ressl *ctx)
{
	EC_KEY *ecdh_key;

	if ((ctx->ssl_ctx = SSL_CTX_new(SSLv23_server_method())) == NULL) {
		ressl_set_error(ctx, "ssl context failure");
		goto err;
	}

	if (ressl_configure_ssl(ctx) != 0)
		goto err;
	if (ressl_configure_keypair(ctx) != 0)
		goto err;

	if (ctx->config->ecdhcurve == -1) {
		SSL_CTX_set_ecdh_auto(ctx->ssl_ctx, 1);
	} else if (ctx->config->ecdhcurve != NID_undef) {
		if ((ecdh_key = EC_KEY_new_by_curve_name(
		    ctx->config->ecdhcurve)) == NULL) {
			ressl_set_error(ctx, "failed to set ECDH curve");
			goto err;
		}
		SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_SINGLE_ECDH_USE);
		SSL_CTX_set_tmp_ecdh(ctx->ssl_ctx, ecdh_key);
		EC_KEY_free(ecdh_key);
	}

	return (0);

err:
	return (-1);
}

int
ressl_listen(struct ressl *ctx, const char *host, const char *port, int af)
{
	if ((ctx->flags & RESSL_SERVER) == 0) {
		ressl_set_error(ctx, "not a server context");
		goto err;
	}

err:
	return (-1);
}

int
ressl_accept(struct ressl *ctx, struct ressl **cctx)
{
	if ((ctx->flags & RESSL_SERVER) == 0) {
		ressl_set_error(ctx, "not a server context");
		goto err;
	}

err:
	return (-1);
}

int
ressl_accept_socket(struct ressl *ctx, struct ressl **cctx, int socket)
{
	struct ressl *conn_ctx = *cctx;
	int ret, ssl_err;
	
	if ((ctx->flags & RESSL_SERVER) == 0) {
		ressl_set_error(ctx, "not a server context");
		goto err;
	}

	if (conn_ctx == NULL) {
		if ((conn_ctx = ressl_server_conn(ctx)) == NULL) {
			ressl_set_error(ctx, "connection context failure");
			goto err;
		}
		*cctx = conn_ctx;

		conn_ctx->socket = socket;

		if ((conn_ctx->ssl_conn = SSL_new(ctx->ssl_ctx)) == NULL) {
			ressl_set_error(ctx, "ssl failure");
			goto err;
		}

		if (SSL_set_fd(conn_ctx->ssl_conn, socket) != 1) {
			ressl_set_error(ctx, "ssl set fd failure");
			goto err;
		}
		SSL_set_app_data(conn_ctx->ssl_conn, conn_ctx);
	}

	if ((ret = SSL_accept(conn_ctx->ssl_conn)) != 1) {
		ssl_err = SSL_get_error(conn_ctx->ssl_conn, ret);
		switch (ssl_err) {
		case SSL_ERROR_WANT_READ:
			return (RESSL_READ_AGAIN);
		case SSL_ERROR_WANT_WRITE:
			return (RESSL_WRITE_AGAIN);
		default:
			ressl_set_error(ctx, "ssl accept failure (%i)",
			    ssl_err);
			goto err;
		}
	}

	return (0);

err:
	return (-1);
}
@


1.11
log
@Set SSL_OP_SINGLE_ECDH_USE before calling SSL_CTX_set_tmp_ecdh() - this
avoids generating an EC key pair that will never be used.
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_server.c,v 1.10 2014/10/03 14:09:09 jsing Exp $ */
@


1.10
log
@Allow "auto" to be specified as an ECDH curve name and make this the
default. This enables automatic handling of ephemeral EC keys.

Discussed with reyk@@ and tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_server.c,v 1.9 2014/09/29 15:31:38 jsing Exp $ */
d73 1
a74 1
		SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_SINGLE_ECDH_USE);
@


1.9
log
@Move cipher configuration handling to the shared SSL configuration function
so that applies to both the ressl client and server.
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_server.c,v 1.8 2014/09/29 15:11:29 jsing Exp $ */
d65 3
a67 1
	if (ctx->config->ecdhcurve != NID_undef) {
@


1.8
log
@Add an option that allows the enabled SSL protocols to be explicitly
configured.

Discussed with several.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_server.c,v 1.7 2014/08/27 10:46:53 reyk Exp $ */
a63 8

	if (ctx->config->ciphers != NULL) {
		if (SSL_CTX_set_cipher_list(ctx->ssl_ctx,
		    ctx->config->ciphers) != 1) {
			ressl_set_error(ctx, "failed to set ciphers");
			goto err;
		}
	}
@


1.7
log
@Add the API function ressl_config_set_ecdhcurve(config, name) to set a
non-standard ECDH curve by name or to disable it by passing NULL.

OK jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_server.c,v 1.6 2014/08/05 12:46:16 jsing Exp $ */
a54 1
	/* XXX - add a configuration option to control versions. */
d60 2
@


1.6
log
@Add $OpenBSD$ tags.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d72 10
a81 5
	if ((ecdh_key = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1)) == NULL)
		goto err;
	SSL_CTX_set_tmp_ecdh(ctx->ssl_ctx, ecdh_key);
	SSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_SINGLE_ECDH_USE);
	EC_KEY_free(ecdh_key);
@


1.5
log
@Implement ressl_accept_socket, which allocates a new server connection
context (if necessary) and handles the TLS/SSL handshake over the given
socket.
@
text
@d1 1
@


1.4
log
@Return -1 on error (not 1).
@
text
@d20 1
d96 1
a96 1
ressl_accept(struct ressl *ctx)
d108 1
a108 1
ressl_accept_socket(struct ressl *ctx, int socket)
d110 3
d117 37
@


1.3
log
@A ressl server needs different configuration from a ressl client - provide
a specific server configuration function and call this from
ressl_configure.
@
text
@d91 1
a91 1
	return (1);
d103 1
a103 1
	return (1);
d115 1
a115 1
	return (1);
@


1.2
log
@Provide a function that returns a server connection context.
@
text
@d17 3
d46 34
@


1.1
log
@Add stubs for the proposed server API.
@
text
@d32 13
@

