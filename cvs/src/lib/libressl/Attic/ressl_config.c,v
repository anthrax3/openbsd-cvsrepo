head	1.15;
access;
symbols
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7;
locks; strict;
comment	@ * @;


1.15
date	2014.10.31.13.46.17;	author jsing;	state dead;
branches;
next	1.14;
commitid	y63FmUITd26yVanM;

1.14
date	2014.10.03.14.14.40;	author tedu;	state Exp;
branches;
next	1.13;
commitid	LqJOCwqCNUh2WOtm;

1.13
date	2014.10.03.14.09.09;	author jsing;	state Exp;
branches;
next	1.12;
commitid	qYJCE7NTV5cgFCnP;

1.12
date	2014.09.29.15.11.29;	author jsing;	state Exp;
branches;
next	1.11;
commitid	P8auAgiIOslQjNvY;

1.11
date	2014.09.29.09.30.31;	author jsing;	state Exp;
branches;
next	1.10;
commitid	dSMsgiEebgJowVZR;

1.10
date	2014.09.28.14.46.09;	author jsing;	state Exp;
branches;
next	1.9;
commitid	g31JOCfEc0CGeO8F;

1.9
date	2014.09.28.06.24.00;	author tedu;	state Exp;
branches;
next	1.8;
commitid	YPJabLNLC7uq6fWz;

1.8
date	2014.08.27.10.46.53;	author reyk;	state Exp;
branches;
next	1.7;
commitid	3hBv77YGLYnHtaoP;

1.7
date	2014.08.06.01.54.01;	author jsing;	state Exp;
branches;
next	1.6;
commitid	cxONhRbzhnTfYWZx;

1.6
date	2014.08.05.12.46.16;	author jsing;	state Exp;
branches;
next	1.5;
commitid	sTdRvCwEPpuqWINJ;

1.5
date	2014.07.13.23.54.52;	author jsing;	state Exp;
branches;
next	1.4;
commitid	cWjgttrqdwcSUiwq;

1.4
date	2014.07.13.23.19.02;	author jsing;	state Exp;
branches;
next	1.3;
commitid	2T0Y1V8q1ZpmS3FD;

1.3
date	2014.07.13.22.31.42;	author jsing;	state Exp;
branches;
next	1.2;
commitid	ciR2s9a8RAdZGccj;

1.2
date	2014.07.13.22.13.52;	author jsing;	state Exp;
branches;
next	1.1;
commitid	v4JoNvWfMl7JsM0L;

1.1
date	2014.07.12.01.20.25;	author jsing;	state Exp;
branches;
next	;
commitid	961qrZstHKsjYeZe;


desc
@@


1.15
log
@Rename libressl to libtls to avoid confusion and to make it easier to
distinguish between LibreSSL (the project) and libressl (the library).

Discussed with many.
@
text
@/* $OpenBSD: ressl_config.c,v 1.14 2014/10/03 14:14:40 tedu Exp $ */
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <errno.h>
#include <stdlib.h>

#include <ressl.h>
#include "ressl_internal.h"

static int
set_string(const char **dest, const char *src)
{
	free((char *)*dest);
	*dest = NULL;
	if (src != NULL)
		if ((*dest = strdup(src)) == NULL)
			return -1;
	return 0;
}

static void *
memdup(const void *in, size_t len)
{
	void *out;

	if ((out = malloc(len)) == NULL)
		return NULL;
	memcpy(out, in, len);
	return out;
}

static int
set_mem(char **dest, size_t *destlen, const void *src, size_t srclen)
{
	free(*dest);
	*dest = NULL;
	*destlen = 0;
	if (src != NULL)
		if ((*dest = memdup(src, srclen)) == NULL)
			return -1;
	*destlen = srclen;
	return 0;
}

struct ressl_config *
ressl_config_new(void)
{
	struct ressl_config *config;

	if ((config = calloc(1, sizeof(*config))) == NULL)
		return (NULL);

	/*
	 * Default configuration.
	 */
	if (ressl_config_set_ca_file(config, _PATH_SSL_CA_FILE) != 0) {
		ressl_config_free(config);
		return (NULL);
	}
	ressl_config_set_ecdhcurve(config, "auto");
	ressl_config_set_protocols(config, RESSL_PROTOCOLS_DEFAULT);
	ressl_config_set_verify_depth(config, 6);
	
	ressl_config_verify(config);

	return (config);
}

void
ressl_config_free(struct ressl_config *config)
{
	if (config == NULL)
		return;

	ressl_config_clear_keys(config);

	free((char *)config->ca_file);
	free((char *)config->ca_path);
	free((char *)config->cert_file);
	free(config->cert_mem);
	free((char *)config->ciphers);
	free((char *)config->key_file);
	free(config->key_mem);

	free(config);
}

void
ressl_config_clear_keys(struct ressl_config *config)
{
	ressl_config_set_cert_mem(config, NULL, 0);
	ressl_config_set_key_mem(config, NULL, 0);
}

int
ressl_config_set_ca_file(struct ressl_config *config, const char *ca_file)
{
	return set_string(&config->ca_file, ca_file);
}

int
ressl_config_set_ca_path(struct ressl_config *config, const char *ca_path)
{
	return set_string(&config->ca_path, ca_path);
}

int
ressl_config_set_cert_file(struct ressl_config *config, const char *cert_file)
{
	return set_string(&config->cert_file, cert_file);
}

int
ressl_config_set_cert_mem(struct ressl_config *config, const uint8_t *cert,
    size_t len)
{
	return set_mem(&config->cert_mem, &config->cert_len, cert, len);
}

int
ressl_config_set_ciphers(struct ressl_config *config, const char *ciphers)
{
	return set_string(&config->ciphers, ciphers);
}

int
ressl_config_set_ecdhcurve(struct ressl_config *config, const char *name)
{
	int nid;

	if (name == NULL)
		nid = NID_undef;
	else if (strcasecmp(name, "auto") == 0)
		nid = -1;
	else if ((nid = OBJ_txt2nid(name)) == NID_undef)
		return (-1);

	config->ecdhcurve = nid;

	return (0);
}

int
ressl_config_set_key_file(struct ressl_config *config, const char *key_file)
{
	return set_string(&config->key_file, key_file);
}

int
ressl_config_set_key_mem(struct ressl_config *config, const uint8_t *key,
    size_t len)
{
	if (config->key_mem)
		explicit_bzero(config->key_mem, config->key_len);
	return set_mem(&config->key_mem, &config->key_len, key, len);
}

void
ressl_config_set_protocols(struct ressl_config *config, uint32_t protocols)
{
	config->protocols = protocols;
}

void
ressl_config_set_verify_depth(struct ressl_config *config, int verify_depth)
{
	config->verify_depth = verify_depth;
}

void
ressl_config_insecure_noverifyhost(struct ressl_config *config)
{
	config->verify_host = 0;
}

void
ressl_config_insecure_noverifycert(struct ressl_config *config)
{
	config->verify_cert = 0;
}

void
ressl_config_verify(struct ressl_config *config)
{
	config->verify_host = 1;
	config->verify_cert = 1;
}
@


1.14
log
@allow disabling hostname and cert verification separately.
if you're careful, cert only verification can be useful.
always enable both though, to avoid accidentally leaving one off.
ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_config.c,v 1.13 2014/10/03 14:09:09 jsing Exp $ */
@


1.13
log
@Allow "auto" to be specified as an ECDH curve name and make this the
default. This enables automatic handling of ephemeral EC keys.

Discussed with reyk@@ and tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_config.c,v 1.12 2014/09/29 15:11:29 jsing Exp $ */
d185 1
a185 1
ressl_config_insecure_no_verify(struct ressl_config *config)
d187 7
a193 1
	config->verify = 0;
d199 2
a200 1
	config->verify = 1;
@


1.12
log
@Add an option that allows the enabled SSL protocols to be explicitly
configured.

Discussed with several.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_config.c,v 1.11 2014/09/29 09:30:31 jsing Exp $ */
d74 1
a76 2
	/* ? use function ? */
	config->ecdhcurve = NID_X9_62_prime256v1;
d143 1
a143 1
	int nid = NID_undef;
d145 5
a149 1
	if (name != NULL && (nid = OBJ_txt2nid(name)) == NID_undef)
d153 1
@


1.11
log
@When freeing the config, explicitly call ressl_config_clear_keys() rather
than rerolling our own key clearing code.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_config.c,v 1.10 2014/09/28 14:46:09 jsing Exp $ */
d74 1
a74 1
	ressl_config_verify(config);
d79 2
d166 6
@


1.10
log
@Provide a ressl config function that explicitly clears keys.

Now that ressl config takes copies of the keys passed to it, the keys need
to be explicitly cleared. While this can be done by calling the appropriate
functions with a NULL pointer, it is simpler and more obvious to call one
function that does this for you.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_config.c,v 1.9 2014/09/28 06:24:00 tedu Exp $ */
d87 3
d96 2
a97 4
	if (config->key_mem != NULL) {
		explicit_bzero(config->key_mem, config->key_len);
		free(config->key_mem);
	}
@


1.9
log
@revamp the config interface to own memory. easier to use correctly without
caller worrying about leaks or lifetimes.

after feedback from jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_config.c,v 1.8 2014/08/27 10:46:53 reyk Exp $ */
d98 7
@


1.8
log
@Add the API function ressl_config_set_ecdhcurve(config, name) to set a
non-standard ECDH curve by name or to disable it by passing NULL.

OK jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_config.c,v 1.7 2014/08/06 01:54:01 jsing Exp $ */
d24 34
a57 11
/*
 * Default configuration.
 */
struct ressl_config ressl_config_default = {
	.ca_file = _PATH_SSL_CA_FILE,
	.ca_path = NULL,
	.ciphers = NULL,
	.ecdhcurve = NID_X9_62_prime256v1,
	.verify = 1,
	.verify_depth = 6,
};
d64 1
a64 1
	if ((config = malloc(sizeof(*config))) == NULL)
d67 11
a77 1
	memcpy(config, &ressl_config_default, sizeof(*config));
d85 12
d100 2
a101 2
void
ressl_config_set_ca_file(struct ressl_config *config, char *ca_file)
d103 1
a103 1
	config->ca_file = ca_file;
d106 2
a107 2
void
ressl_config_set_ca_path(struct ressl_config *config, char *ca_path)
d109 1
a109 1
	config->ca_path = ca_path;
d112 2
a113 2
void
ressl_config_set_cert_file(struct ressl_config *config, char *cert_file)
d115 1
a115 1
	config->cert_file = cert_file;
d118 3
a120 2
void
ressl_config_set_cert_mem(struct ressl_config *config, char *cert, size_t len)
d122 1
a122 2
	config->cert_mem = cert;
	config->cert_len = len;
d125 2
a126 2
void
ressl_config_set_ciphers(struct ressl_config *config, char *ciphers)
d128 1
a128 1
	config->ciphers = ciphers;
d143 2
a144 2
void
ressl_config_set_key_file(struct ressl_config *config, char *key_file)
d146 1
a146 1
	config->key_file = key_file;
d149 3
a151 2
void
ressl_config_set_key_mem(struct ressl_config *config, char *key, size_t len)
d153 3
a155 2
	config->key_mem = key;
	config->key_len = len;
@


1.7
log
@Add support for loading the public/private key from memory, rather than
directly from file.
@
text
@d1 1
a1 1
/* $OpenBSD: ressl_config.c,v 1.6 2014/08/05 12:46:16 jsing Exp $ */
d31 1
d84 12
@


1.6
log
@Add $OpenBSD$ tags.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d73 7
d89 7
@


1.5
log
@Add configuration handling for certificate and key files.
@
text
@d1 1
@


1.4
log
@Tabs, not spaces.
@
text
@d66 6
d78 12
a98 6
}

void
ressl_config_set_verify_depth(struct ressl_config *config, int verify_depth)
{
	config->verify_depth = verify_depth;
@


1.3
log
@Rename various configuration handling functions.

Requested by and discussed with tedu@@.
@
text
@d27 5
a31 5
        .ca_file = _PATH_SSL_CA_FILE,
        .ca_path = NULL,
        .ciphers = NULL,
        .verify = 1,
        .verify_depth = 6,
@


1.2
log
@Use a single ressl.h header file.

Discussed with beck@@ and tedu@@.
@
text
@d54 1
a54 1
ressl_config_ca_file(struct ressl_config *config, char *ca_file)
d60 1
a60 1
ressl_config_ca_path(struct ressl_config *config, char *ca_path)
d66 1
a66 1
ressl_config_ciphers(struct ressl_config *config, char *ciphers)
d72 1
a72 1
ressl_config_insecure(struct ressl_config *config)
d78 1
a78 1
ressl_config_secure(struct ressl_config *config)
d84 1
a84 1
ressl_config_verify_depth(struct ressl_config *config, int verify_depth)
@


1.1
log
@Initial version of libressl - a library that provides a clean, simple,
consistent and secure-by-default API for SSL clients (and soon servers).

This is a long way from complete and the interface will likely change
substantially - committing now so that further work can happen in the tree.

Initiated by tedu@@ and inspired by discussions with tedu@@, beck@@ and
other developers.
@
text
@d20 1
a20 2
#include <ressl/ressl.h>

@

