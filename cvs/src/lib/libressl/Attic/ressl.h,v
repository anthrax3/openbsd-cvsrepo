head	1.22;
access;
symbols
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11;
locks; strict;
comment	@ * @;


1.22
date	2014.10.31.13.46.17;	author jsing;	state dead;
branches;
next	1.21;
commitid	y63FmUITd26yVanM;

1.21
date	2014.10.15.21.02.39;	author tedu;	state Exp;
branches;
next	1.20;
commitid	Gg0QwpEAI9qneKrL;

1.20
date	2014.10.14.22.05.28;	author tedu;	state Exp;
branches;
next	1.19;
commitid	lCrravau9gfInEbU;

1.19
date	2014.10.09.22.04.33;	author tedu;	state Exp;
branches;
next	1.18;
commitid	deJVI3Rs6C21NQvd;

1.18
date	2014.10.03.14.14.40;	author tedu;	state Exp;
branches;
next	1.17;
commitid	LqJOCwqCNUh2WOtm;

1.17
date	2014.09.29.15.11.29;	author jsing;	state Exp;
branches;
next	1.16;
commitid	P8auAgiIOslQjNvY;

1.16
date	2014.09.28.15.08.01;	author jsing;	state Exp;
branches;
next	1.15;
commitid	6R6Yzcsh26dbdBbE;

1.15
date	2014.09.28.14.46.09;	author jsing;	state Exp;
branches;
next	1.14;
commitid	g31JOCfEc0CGeO8F;

1.14
date	2014.09.28.06.24.00;	author tedu;	state Exp;
branches;
next	1.13;
commitid	YPJabLNLC7uq6fWz;

1.13
date	2014.08.27.10.46.53;	author reyk;	state Exp;
branches;
next	1.12;
commitid	3hBv77YGLYnHtaoP;

1.12
date	2014.08.15.16.55.32;	author tedu;	state Exp;
branches;
next	1.11;
commitid	U2Kl9z3wIJEXe2cK;

1.11
date	2014.08.06.01.54.01;	author jsing;	state Exp;
branches;
next	1.10;
commitid	cxONhRbzhnTfYWZx;

1.10
date	2014.08.05.12.46.16;	author jsing;	state Exp;
branches;
next	1.9;
commitid	sTdRvCwEPpuqWINJ;

1.9
date	2014.08.04.16.34.11;	author jsing;	state Exp;
branches;
next	1.8;
commitid	SkNypU8etCDiAoKI;

1.8
date	2014.08.04.15.55.26;	author jsing;	state Exp;
branches;
next	1.7;
commitid	40j3aP8fQAiX2rmI;

1.7
date	2014.07.13.23.54.52;	author jsing;	state Exp;
branches;
next	1.6;
commitid	cWjgttrqdwcSUiwq;

1.6
date	2014.07.13.23.36.24;	author jsing;	state Exp;
branches;
next	1.5;
commitid	t51OHDRabn5Zy5GJ;

1.5
date	2014.07.13.23.17.29;	author jsing;	state Exp;
branches;
next	1.4;
commitid	rA08mImIliFb9LHA;

1.4
date	2014.07.13.23.06.18;	author jsing;	state Exp;
branches;
next	1.3;
commitid	Zz2JBDr6GKSqFSC5;

1.3
date	2014.07.13.22.31.42;	author jsing;	state Exp;
branches;
next	1.2;
commitid	ciR2s9a8RAdZGccj;

1.2
date	2014.07.13.22.13.52;	author jsing;	state Exp;
branches;
next	1.1;
commitid	v4JoNvWfMl7JsM0L;

1.1
date	2014.07.12.01.20.24;	author jsing;	state Exp;
branches;
next	;
commitid	961qrZstHKsjYeZe;


desc
@@


1.22
log
@Rename libressl to libtls to avoid confusion and to make it easier to
distinguish between LibreSSL (the project) and libressl (the library).

Discussed with many.
@
text
@/* $OpenBSD: ressl.h,v 1.21 2014/10/15 21:02:39 tedu Exp $ */
/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef HEADER_RESSL_H
#define HEADER_RESSL_H

#define RESSL_API	20141008

#define RESSL_PROTOCOL_TLSv1_0	(1 << 1)
#define RESSL_PROTOCOL_TLSv1_1	(1 << 2)
#define RESSL_PROTOCOL_TLSv1_2	(1 << 3)
#define RESSL_PROTOCOL_TLSv1 \
	(RESSL_PROTOCOL_TLSv1_0|RESSL_PROTOCOL_TLSv1_1|RESSL_PROTOCOL_TLSv1_2)
#define RESSL_PROTOCOLS_DEFAULT RESSL_PROTOCOL_TLSv1

#define RESSL_READ_AGAIN	-2
#define RESSL_WRITE_AGAIN	-3

struct ressl;
struct ressl_config;

int ressl_init(void);

const char *ressl_error(struct ressl *ctx);

struct ressl_config *ressl_config_new(void);
void ressl_config_free(struct ressl_config *config);

int ressl_config_set_ca_file(struct ressl_config *config, const char *ca_file);
int ressl_config_set_ca_path(struct ressl_config *config, const char *ca_path);
int ressl_config_set_cert_file(struct ressl_config *config,
    const char *cert_file);
int ressl_config_set_cert_mem(struct ressl_config *config, const uint8_t *cert,
    size_t len);
int ressl_config_set_ciphers(struct ressl_config *config, const char *ciphers);
int ressl_config_set_ecdhcurve(struct ressl_config *config, const char *name);
int ressl_config_set_key_file(struct ressl_config *config,
    const char *key_file);
int ressl_config_set_key_mem(struct ressl_config *config, const uint8_t *key,
    size_t len);
void ressl_config_set_protocols(struct ressl_config *config,
    uint32_t protocols);
void ressl_config_set_verify_depth(struct ressl_config *config,
    int verify_depth);

void ressl_config_clear_keys(struct ressl_config *config);
void ressl_config_insecure_noverifyhost(struct ressl_config *config);
void ressl_config_insecure_noverifycert(struct ressl_config *config);
void ressl_config_verify(struct ressl_config *config);

struct ressl *ressl_client(void);
struct ressl *ressl_server(void);
int ressl_configure(struct ressl *ctx, struct ressl_config *config);
void ressl_reset(struct ressl *ctx);
void ressl_free(struct ressl *ctx);

int ressl_accept(struct ressl *ctx, struct ressl **cctx);
int ressl_accept_socket(struct ressl *ctx, struct ressl **cctx, int socket);
int ressl_connect(struct ressl *ctx, const char *host, const char *port);
int ressl_connect_socket(struct ressl *ctx, int s, const char *hostname);
int ressl_listen(struct ressl *ctx, const char *host, const char *port, int af);
int ressl_read(struct ressl *ctx, void *buf, size_t buflen, size_t *outlen);
int ressl_write(struct ressl *ctx, const void *buf, size_t buflen,
    size_t *outlen);
int ressl_close(struct ressl *ctx);

#endif /* HEADER_RESSL_H */
@


1.21
log
@Fuck it. No SSLv3; not now, not ever. The API of the future will only
support the protocols of the future.

(Perhaps a bit late in burning this bridge entirely, but there's no time
like the present, esp. with other players now leaning against back compat.)
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.20 2014/10/14 22:05:28 tedu Exp $ */
@


1.20
log
@seems like a good time to make the ressl default TLSv1 only.
ok guenther
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.19 2014/10/09 22:04:33 tedu Exp $ */
a22 1
#define RESSL_PROTOCOL_SSLv3	(1 << 0)
@


1.19
log
@add an API version number. ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.18 2014/10/03 14:14:40 tedu Exp $ */
d29 1
a29 2
#define RESSL_PROTOCOLS_DEFAULT \
	(RESSL_PROTOCOL_SSLv3|RESSL_PROTOCOL_TLSv1)
@


1.18
log
@allow disabling hostname and cert verification separately.
if you're careful, cert only verification can be useful.
always enable both though, to avoid accidentally leaving one off.
ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.17 2014/09/29 15:11:29 jsing Exp $ */
d20 2
@


1.17
log
@Add an option that allows the enabled SSL protocols to be explicitly
configured.

Discussed with several.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.15 2014/09/28 14:46:09 jsing Exp $ */
d61 2
a62 1
void ressl_config_insecure_no_verify(struct ressl_config *config);
@


1.16
log
@Wrap long lines and add missing argument name.
@
text
@d21 9
d55 2
@


1.15
log
@Provide a ressl config function that explicitly clears keys.

Now that ressl config takes copies of the keys passed to it, the keys need
to be explicitly cleared. While this can be done by calling the appropriate
functions with a NULL pointer, it is simpler and more obvious to call one
function that does this for you.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.14 2014/09/28 06:24:00 tedu Exp $ */
d36 2
a37 1
int ressl_config_set_cert_file(struct ressl_config *config, const char *cert_file);
d41 3
a43 2
int ressl_config_set_ecdhcurve(struct ressl_config *config, const char *);
int ressl_config_set_key_file(struct ressl_config *config, const char *key_file);
@


1.14
log
@revamp the config interface to own memory. easier to use correctly without
caller worrying about leaks or lifetimes.

after feedback from jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.13 2014/08/27 10:46:53 reyk Exp $ */
d47 1
@


1.13
log
@Add the API function ressl_config_set_ecdhcurve(config, name) to set a
non-standard ECDH curve by name or to disable it by passing NULL.

OK jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.12 2014/08/15 16:55:32 tedu Exp $ */
d34 4
a37 4
void ressl_config_set_ca_file(struct ressl_config *config, char *ca_file);
void ressl_config_set_ca_path(struct ressl_config *config, char *ca_path);
void ressl_config_set_cert_file(struct ressl_config *config, char *cert_file);
void ressl_config_set_cert_mem(struct ressl_config *config, char *cert,
d39 1
a39 1
void ressl_config_set_ciphers(struct ressl_config *config, char *ciphers);
d41 2
a42 2
void ressl_config_set_key_file(struct ressl_config *config, char *key_file);
void ressl_config_set_key_mem(struct ressl_config *config, char *key,
@


1.12
log
@use void * instead of char *. ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.11 2014/08/06 01:54:01 jsing Exp $ */
d40 1
@


1.11
log
@Add support for loading the public/private key from memory, rather than
directly from file.
@
text
@d1 1
a1 1
/* $OpenBSD: ressl.h,v 1.10 2014/08/05 12:46:16 jsing Exp $ */
d60 2
a61 2
int ressl_read(struct ressl *ctx, char *buf, size_t buflen, size_t *outlen);
int ressl_write(struct ressl *ctx, const char *buf, size_t buflen,
@


1.10
log
@Add $OpenBSD$ tags.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d37 2
d41 2
@


1.9
log
@Implement ressl_accept_socket, which allocates a new server connection
context (if necessary) and handles the TLS/SSL handshake over the given
socket.
@
text
@d1 1
@


1.8
log
@Improve ressl_{read,write} handling of non-blocking reads/writes.
@
text
@d50 2
a51 2
int ressl_accept(struct ressl *ctx);
int ressl_accept_socket(struct ressl *ctx, int socket);
@


1.7
log
@Add configuration handling for certificate and key files.
@
text
@d20 3
@


1.6
log
@Add stubs for the proposed server API.
@
text
@d32 1
d34 1
@


1.5
log
@Rename the context allocation from ressl_new to ressl_client, which makes
it completely obvious what the context is for. Ensure client functions are
used on client contexts.
@
text
@d40 1
d45 2
d49 1
@


1.4
log
@Split the context allocation out from the configuration. This will allow
us to properly report errors that occur during configuration processing.

Discussed with tedu@@
@
text
@d39 1
a39 1
struct ressl *ressl_new(void);
@


1.3
log
@Rename various configuration handling functions.

Requested by and discussed with tedu@@.
@
text
@d39 2
a40 1
struct ressl *ressl_new(struct ressl_config *config);
@


1.2
log
@Use a single ressl.h header file.

Discussed with beck@@ and tedu@@.
@
text
@d30 5
a34 4
void ressl_config_ca_file(struct ressl_config *config, char *ca_file);
void ressl_config_ca_path(struct ressl_config *config, char *ca_path);
void ressl_config_ciphers(struct ressl_config *config, char *ciphers);
void ressl_config_verify_depth(struct ressl_config *config, int verify_depth);
d36 2
a37 2
void ressl_config_insecure(struct ressl_config *config);
void ressl_config_secure(struct ressl_config *config);
@


1.1
log
@Initial version of libressl - a library that provides a clean, simple,
consistent and secure-by-default API for SSL clients (and soon servers).

This is a long way from complete and the interface will likely change
substantially - committing now so that further work can happen in the tree.

Initiated by tedu@@ and inspired by discussions with tedu@@, beck@@ and
other developers.
@
text
@a19 2
#include <ressl/ressl_config.h>

d21 1
d26 11
@

