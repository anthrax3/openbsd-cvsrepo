head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.22
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.18
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.20
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.16
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.14
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.12
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.26
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.24
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.22
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.20
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.18
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.16
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.14
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.12
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	des401:1.1.1.1
	des:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2010.10.28.16.23.00;	author jsg;	state dead;
branches;
next	1.3;

1.3
date	2005.03.29.17.29.08;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.08.19.17.27;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	97.06.29.10.24.52;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.06.29.10.24.52;	author provos;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove libdes src/ports users have been switched to libcrypto
@
text
@Note that the UNROLL option makes the 'inner' des loop unroll all 16 rounds
instead of the default 4.
RISC1 and RISC2 are 2 alternatives for the inner loop and
PTR means to use pointers arithmetic instead of arrays.

IRIX 6.2 - R10000 195mhz - cc (-O3 -n32) - UNROLL RISC2 PTR	496,000 3968k/s
solaris 2.5.1 usparc 167mhz?? - SC4.0 - UNROLL RISC1 PTR [1]	475,400 3804k/s
solaris 2.5.1 usparc 167mhz?? - gcc 2.7.2 - UNROLL RISC1 PTR	306,000 2448k/s
linux - pentium 100mhz - gcc 2.7.0 - assember			281,000 2250k/s
NT 4.0 - pentium 100mhz - VC 4.2 - assember			281,000 2250k/s
IRIX 5.3 - R4400 200mhz - gcc 2.6.3 - UNROLL RISC2 PTR		235,300 1882k/s
IRIX 5.3 - R4400 200mhz - cc - UNROLL RISC2 PTR			233,700 1869k/s
NT 4.0 - pentium 100mhz - VC 4.2 - UNROLL RISC1 PTR		191,000 1528k/s
DEC Alpha 165mhz??  - cc - RISC2 PTR [2]			181,000 1448k/s
linux - pentium 100mhz - gcc 2.7.0 - UNROLL RISC1 PTR		158,500 1268k/s
HPUX 10 - 9000/887 - cc - UNROLL [3]	 			148,000	1190k/s
solaris 2.5.1 - sparc 10 50mhz - gcc 2.7.2 - UNROLL		123,600  989k/s
IRIX 5.3 - R4000 100mhz - cc - UNROLL RISC2 PTR			101,000  808k/s
DGUX - 88100 50mhz(?) - gcc 2.6.3 - UNROLL			 81,000  648k/s
solaris 2.4 486 50mhz - gcc 2.6.3 - assember			 65,000  522k/s
HPUX 10 - 9000/887 - k&r cc (default compiler) - UNROLL PTR	 76,000	 608k/s
solaris 2.4 486 50mhz - gcc 2.6.3 - UNROLL RISC2		 43,500  344k/s
AIX - old slow one :-) - cc -					 39,000  312k/s

Notes.
[1] For the ultra sparc, SunC 4.0 cc -fast -Xa -xO5, running 'des_opts'
    gives a speed of 475,000 des/s while 'speed' gives 417,000 des/s.
    I believe the difference is tied up in optimisation that the compiler
    is able to perform when the code is 'inlined'.  For 'speed', the DES
    routines are being linked from a library.  I'll record the higher
    speed since if performance is everything, you can always inline
    'des_enc.c'.
[2] Similar to the ultra sparc ([1]), 181,000 for 'des_opts' vs 175,000.
[3] I was unable to get access to this machine when it was not heavily loaded.
    As such, my timing program was never able to get more that %30 of the CPU.
    This would cause the program to give much lower speed numbers because
    it would be 'fighting' to stay in the cache with the other CPU burning
    processes.
@


1.3
log
@belive -> believe
@
text
@@


1.2
log
@typos from Jonathon Gray;
@
text
@d28 1
a28 1
    I belive the difference is tied up in optimisation that the compiler
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
PTR means to use pointers arithmatic instead of arrays.
@


1.1.1.1
log
@relocate libdes + update to version 4.01
@
text
@@
