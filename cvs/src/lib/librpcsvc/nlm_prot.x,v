head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.34
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.30
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.32
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.24
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.28
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.26
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.22
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.20
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.18
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	OPENBSD_5_0:1.8.0.14
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.26
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.24
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.22
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.20
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.18
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.16
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.8
date	2008.06.15.04.41.39;	author sturm;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.14.01.10.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.13.23.49.25;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.13.21.24.15;	author sturm;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.17.12.32.11;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.08.19.07.54.48;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.08.01.19.27.15;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@add a procedure NLM_SM_NOTIFY (in version 0), used by statd to send
notifications to lockd. from NetBSD
bump minor

"just get it in" deraadt
@
text
@/*	$OpenBSD: nlm_prot.x,v 1.7 2008/06/14 01:10:43 deraadt Exp $	*/

#ifdef RPC_HDR
%#define LM_MAXSTRLEN	1024
%#define MAXNAMELEN	LM_MAXSTRLEN+1
#endif

enum nlm_stats {
	nlm_granted = 0,
	nlm_denied = 1,
	nlm_denied_nolocks = 2,
	nlm_blocked = 3,
	nlm_denied_grace_period = 4
};

struct nlm_holder {
	bool exclusive;
	int svid;
	netobj oh;
	unsigned l_offset;
	unsigned l_len;
};

union nlm_testrply switch (nlm_stats stat) {
	case nlm_denied:
		struct nlm_holder holder;
	default:
		void;
};

struct nlm_stat {
	nlm_stats stat;
};

struct nlm_res {
	netobj cookie;
	nlm_stat stat;
};

struct nlm_testres {
	netobj cookie;
	nlm_testrply stat;
};

struct nlm_lock {
	string caller_name<LM_MAXSTRLEN>;
	netobj fh;
	netobj oh;
	int svid;
	unsigned l_offset;
	unsigned l_len;
};

struct nlm_lockargs {
	netobj cookie;
	bool block;
	bool exclusive;
	struct nlm_lock alock;
	bool reclaim;
	int state;
};

struct nlm_cancargs {
	netobj cookie;
	bool block;
	bool exclusive;
	struct nlm_lock alock;
};

struct nlm_testargs {
	netobj cookie;
	bool exclusive;
	struct nlm_lock alock;
};

struct nlm_unlockargs {
	netobj cookie;
	struct nlm_lock alock;
};


#ifdef RPC_HDR
#endif
enum	fsh_mode {
	fsm_DN  = 0,
	fsm_DR  = 1,
	fsm_DW  = 2,
	fsm_DRW = 3
};

enum	fsh_access {
	fsa_NONE = 0,
	fsa_R    = 1,
	fsa_W    = 2,
	fsa_RW   = 3
};

struct	nlm_share {
	string caller_name<LM_MAXSTRLEN>;
	netobj	fh;
	netobj	oh;
	fsh_mode	mode;
	fsh_access	access;
};

struct	nlm_shareargs {
	netobj	cookie;
	nlm_share	share;
	bool	reclaim;
};

struct	nlm_shareres {
	netobj	cookie;
	nlm_stats	stat;
	int	sequence;
};

struct	nlm_notify {
	string name<MAXNAMELEN>;
	int state;
};

enum nlm4_stats {
	nlm4_granted			= 0,
	nlm4_denied			= 1,
	nlm4_denied_nolock		= 2,
	nlm4_blocked			= 3,
	nlm4_denied_grace_period	= 4,
	nlm4_deadlck			= 5,
	nlm4_rofs			= 6,
	nlm4_stale_fh			= 7,
	nlm4_fbig			= 8,
	nlm4_failed			= 9
};

struct nlm4_stat {
	nlm4_stats stat;
};

struct nlm4_holder {
	bool exclusive;
	u_int32_t svid;
	netobj oh;
	u_int64_t l_offset;
	u_int64_t l_len;
};

struct nlm4_lock {
	string caller_name<MAXNAMELEN>;
	netobj fh;
	netobj oh;
	u_int32_t svid;
	u_int64_t l_offset;
	u_int64_t l_len;
};

struct nlm4_share {
	string caller_name<MAXNAMELEN>;
	netobj fh;
	netobj oh;
	fsh_mode mode;
	fsh_access access;
};

union nlm4_testrply switch (nlm4_stats stat) {
	case nlm_denied:
		struct nlm4_holder holder;
	default:
		void;
};

struct nlm4_testres {
	netobj cookie;
	nlm4_testrply stat;
};

struct nlm4_testargs {
	netobj cookie;
	bool exclusive;
	struct nlm4_lock alock;
};

struct nlm4_res {
	netobj cookie;
	nlm4_stat stat;
};

struct nlm4_lockargs {
	netobj cookie;
	bool block;
	bool exclusive;
	struct nlm4_lock alock;
	bool reclaim;
	int state;
};

struct nlm4_cancargs {
	netobj cookie;
	bool block;
	bool exclusive;
	struct nlm4_lock alock;
};

struct nlm4_unlockargs {
	netobj cookie;
	struct nlm4_lock alock;
};

struct	nlm4_shareargs {
	netobj	cookie;
	nlm4_share	share;
	bool	reclaim;
};

struct	nlm4_shareres {
	netobj	cookie;
	nlm4_stats	stat;
	int	sequence;
};

struct nlm_sm_status {
	string mon_name<LM_MAXSTRLEN>;
	int state;
	opaque priv[16];
};

program NLM_PROG {
	version NLM_SM {
		void NLM_SM_NOTIFY(struct nlm_sm_status) = 1;
	} = 0;

	version NLM_VERS {

		nlm_testres	NLM_TEST(struct nlm_testargs) =	1;

		nlm_res		NLM_LOCK(struct nlm_lockargs) =	2;

		nlm_res		NLM_CANCEL(struct nlm_cancargs) = 3;

		nlm_res		NLM_UNLOCK(struct nlm_unlockargs) = 4;

		nlm_res		NLM_GRANTED(struct nlm_testargs)= 5;

		void		NLM_TEST_MSG(struct nlm_testargs) = 6;
		void		NLM_LOCK_MSG(struct nlm_lockargs) = 7;
		void		NLM_CANCEL_MSG(struct nlm_cancargs) = 8;
		void		NLM_UNLOCK_MSG(struct nlm_unlockargs) = 9;
		void		NLM_GRANTED_MSG(struct nlm_testargs) = 10;
		void		NLM_TEST_RES(nlm_testres) = 11;
		void		NLM_LOCK_RES(nlm_res) = 12;
		void		NLM_CANCEL_RES(nlm_res) = 13;
		void		NLM_UNLOCK_RES(nlm_res) = 14;
		void		NLM_GRANTED_RES(nlm_res) = 15;
	} = 1;

	version NLM_VERSX {
		nlm_shareres	NLM_SHARE(nlm_shareargs) = 20;
		nlm_shareres	NLM_UNSHARE(nlm_shareargs) = 21;
		nlm_res		NLM_NM_LOCK(nlm_lockargs) = 22;
		void		NLM_FREE_ALL(nlm_notify) = 23;
	} = 3;

	version NLM_VERS4 {
		nlm4_testres NLM4_TEST(nlm4_testargs) = 1;
		nlm4_res NLM4_LOCK(nlm4_lockargs) = 2;
		nlm4_res NLM4_CANCEL(nlm4_cancargs) = 3;
		nlm4_res NLM4_UNLOCK(nlm4_unlockargs) = 4;
		nlm4_res NLM4_GRANTED(nlm4_testargs) = 5;
		void NLM4_TEST_MSG(nlm4_testargs) = 6;
		void NLM4_LOCK_MSG(nlm4_lockargs) = 7;
		void NLM4_CANCEL_MSG(nlm4_cancargs) = 8;
		void NLM4_UNLOCK_MSG(nlm4_unlockargs) = 9;
		void NLM4_GRANTED_MSG(nlm4_testargs) = 10;
		void NLM4_TEST_RES(nlm4_testres) = 11;
		void NLM4_LOCK_RES(nlm4_res) = 12;
		void NLM4_CANCEL_RES(nlm4_res) = 13;
		void NLM4_UNLOCK_RES(nlm4_res) = 14;
		void NLM4_GRANTED_RES(nlm4_res) = 15;
		nlm4_shareres NLM4_SHARE(nlm4_shareargs) = 20;
		nlm4_shareres NLM4_UNSHARE(nlm4_shareargs) = 21;
		nlm4_res NLM4_NM_LOCK(nlm4_lockargs) = 22;
		void NLM4_FREE_ALL(nlm_notify) = 23;
	} = 4;
} = 100021;

@


1.7
log
@accidentally deleted a little bit too much, oops
@
text
@d1 1
a1 1
/*	$OpenBSD: nlm_prot.x,v 1.6 2008/06/13 23:49:25 deraadt Exp $	*/
d221 6
d228 4
@


1.6
log
@Remove all comments so that this code is 100% 'portable interface', and
thus attackable because Sun used a poor copyright notice
@
text
@d1 6
a6 1
/*	$OpenBSD: nlm_prot.x,v 1.5 2008/06/13 21:24:15 sturm Exp $	*/
@


1.5
log
@Add definitions for nlm version 4 (for use with NFSv3).
from NetBSD

minor bump, discussed w/ deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: nlm_prot.x,v 1.4 2004/01/17 12:32:11 deraadt Exp $	*/
a2 21
/*
 * Network lock manager protocol definition
 * Copyright (C) 1986 Sun Microsystems, Inc.
 *
 * protocol used between local lock manager and remote lock manager
 */

#ifdef RPC_HDR
%#define LM_MAXSTRLEN	1024
%#define MAXNAMELEN	LM_MAXSTRLEN+1
#else
%#ifndef lint
%/*static char sccsid[] = "from: @@(#)nlm_prot.x 1.8 87/09/21 Copyr 1987 Sun Micro";*/
%/*static char sccsid[] = "from: * @@(#)nlm_prot.x	2.1 88/08/01 4.0 RPCSRC";*/
%static char rcsid[] = "$OpenBSD: nlm_prot.x,v 1.4 2004/01/17 12:32:11 deraadt Exp $";
%#endif /* not lint */
#endif

/*
 * status of a call to the lock manager
 */
d42 3
a44 3
	netobj fh;		/* identify a file */
	netobj oh;		/* identify owner of a lock */
	int svid;		/* generated from pid for svid */
d54 2
a55 2
	bool reclaim;		/* used for recovering locks */
	int state;		/* specify local status monitor state */
a77 4
%/*
% * The following enums are actually bit encoded for efficient
% * boolean algebra.... DON'T change them.....
% */
d80 4
a83 4
	fsm_DN  = 0,	/* deny none */
	fsm_DR  = 1,	/* deny read */
	fsm_DW  = 2,	/* deny write */
	fsm_DRW = 3	/* deny read/write */
d87 4
a90 4
	fsa_NONE = 0,	/* for completeness */
	fsa_R    = 1,	/* read only */
	fsa_W    = 2,	/* write only */
	fsa_RW   = 3	/* read/write */
a117 3
#ifdef RPC_HDR
%/* definitions for NLM version 4 */
#endif
d188 2
a189 2
	bool reclaim;		/* used for recovering locks */
	int state;		/* specify local status monitor state */
a215 4
/*
 * Over-the-wire protocol used between the network lock managers
 */

a223 1
		nlm_res		NLM_UNLOCK(struct nlm_unlockargs) =	4;
d225 2
a226 3
		/*
		 * remote lock manager call-back to grant lock
		 */
d228 1
a228 3
		/*
		 * message passing style of requesting lock
		 */
d231 1
a231 1
		void		NLM_CANCEL_MSG(struct nlm_cancargs) =8;
@


1.4
log
@pretty
@
text
@d1 1
a1 1
/*	$OpenBSD: nlm_prot.x,v 1.3 1997/08/19 07:54:48 niklas Exp $	*/
d17 1
a17 1
%static char rcsid[] = "$OpenBSD: nlm_prot.x,v 1.3 1997/08/19 07:54:48 niklas Exp $";
d143 101
d284 21
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d17 1
a17 1
%static char rcsid[] = "$OpenBSD: nlm_prot.x,v 1.2 1997/08/01 19:27:15 deraadt Exp $";
d80 1
a80 1
	netobj cookie;		
d87 1
a87 1
	netobj cookie;		
d93 1
a93 1
	netobj cookie;		
@


1.2
log
@state should be an int
@
text
@d1 2
d17 1
a17 1
%static char rcsid[] = "$Id: nlm_prot.x,v 1.1.1.1 1995/10/18 08:43:10 deraadt Exp $";
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
%static char rcsid[] = "$Id: nlm_prot.x,v 1.1 1995/01/12 19:39:49 jtc Exp $";
d138 1
a138 1
	long state;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
