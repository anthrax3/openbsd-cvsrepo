head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.0.10
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.1;

1.1
date	2000.09.25.09.03.44;	author d;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_machdep.c,v 1.1 2000/09/25 09:03:44 d Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

/*
 * Machine-dependent thread state functions for OpenBSD/m68k
 */

#include "uthread_machdep.h"
#define ALIGNBYTES	0x3

struct frame {
	int	d2,d3,d4,d5,d6,d7;
	int	a2,a3,a4,a5,fp;
	int	link;			/* frame link */
	int	ra;
};

/*
 * Given a stack and an entry function, initialise a state
 * structure that can be later switched to.
 */
void
_thread_machdep_init(statep, base, len, entry)
	struct _machdep_state* statep;
	void *base;
	int len;
	void (*entry)(void);
{
	struct frame *f;

	/* Locate the initial frame, aligned at the top of the stack */
	f = (struct frame *)(((int)base + len - sizeof *f) & ~ALIGNBYTES);
	
	f->ra = (int)entry;
	f->link = 0;
	f->fp = (int)&f->link;
	statep->sp = (int)f;
}

void
_thread_machdep_save_float_state(statep)
	struct _machdep_state* statep;
{
	/* fsave is a privileged instruction */
}

void
_thread_machdep_restore_float_state(statep)
	struct _machdep_state* statep;
{
	/* frestore is a privileged instruction */
}
@


1.1
log
@prepare for switching threads
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

