head	1.7;
access;
symbols
	OPENBSD_3_2:1.5.0.16
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.14
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.12
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.7
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.6;

1.6
date	2002.10.11.19.08.41;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	99.03.10.09.32.01;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.12.21.13.03.44;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.12.21.07.36.59;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.18.05.59.17;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.20.11.15.36;	author d;	state Exp;
branches;
next	;


desc
@@


1.7
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.6 2002/10/11 19:08:41 marc Exp $	*/
/*
 * Atomic lock for m68k
 */

#include "spinlock.h"

int
_atomic_lock(volatile _spinlock_lock_t *lock)
{
	_spinlock_lock_t old;

	/*
	 * The Compare And Swap instruction (mc68020 and above)
	 * compares its first operand with the memory addressed by
	 * the third. If they are the same value, the second operand
	 * is stored at the address. Otherwise the 1st operand (register)
	 * is loaded with the contents of the 3rd operand.
	 *
	 *      old = 0;
	 *	CAS(old, 1, *lock);
	 *	if (old == 1) { lock was acquired }
	 *
	 * From the MC68030 User's Manual (Motorola), page `3-13':
	 *    CAS Dc,Du,<ea>:
	 *	(<ea> - Dc) -> cc;
	 *	if Z then Du -> <ea>
	 *	else      <ea> -> Dc;
	 */
	old = _SPINLOCK_UNLOCKED;
	__asm__("casl %0, %2, %1" : "=d" (old), "=m" (*lock)
				  : "d" (_SPINLOCK_LOCKED),
				    "0" (old),  "1" (*lock)
				  : "cc");
	return (old != _SPINLOCK_UNLOCKED);
}
@


1.6
log
@remove unused/unreferenced code.
ok fgs@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.5 1999/03/10 09:32:01 d Exp $	*/
@


1.5
log
@correct asm constraints, espie@@; cite m680x0 user manual
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.4 1998/12/21 13:03:44 d Exp $	*/
a35 7
}

int
_atomic_is_locked(volatile _spinlock_lock_t *lock)
{

	return (*lock != _SPINLOCK_UNLOCKED);
@


1.4
log
@more spinlock
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.3 1998/12/21 07:36:59 d Exp $	*/
d23 6
d31 4
a34 2
	__asm__("casl %0, %2, %1" : "=d"(old), "=m"(*lock)
				  : "d"(_SPINLOCK_LOCKED), "0"(old));
@


1.3
log
@md spinlock
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 1998/12/18 05:59:17 d Exp $	*/
d31 1
a31 1
_atomic_lock(volatile _spinlock_lock_t *lock)
@


1.2
log
@add md _atomic_is_locked; clean
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 1998/11/20 11:15:36 d Exp $	*/
d8 2
a9 2
register_t
_atomic_lock(volatile register_t *lock)
d11 1
a11 1
	register_t old;
d22 1
a22 1
	 *	return old;
d24 1
a24 1
	old = 0;
d26 2
a27 2
				  : "d"(1), "0"(old));
	return old;
d31 1
a31 1
_atomic_lock(volatile register_t *lock)
d34 1
a34 1
	return *lock;
@


1.1
log
@Move atomic_lock code from asm to C with inline asm;
Add m68k, mips and sparc. (needs more careful checking)
Add 'slow_atomic_lock' for crippled archs.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 1
d28 7
@

