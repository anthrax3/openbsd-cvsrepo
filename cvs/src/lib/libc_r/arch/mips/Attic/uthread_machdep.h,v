head	1.6;
access;
symbols
	OPENBSD_3_2:1.5.0.10
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.5;

1.5
date	2000.10.04.05.55.34;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.28;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.17.23.49.49;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.20.11.15.37;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.09.03.13.14;	author d;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_machdep.h,v 1.5 2000/10/04 05:55:34 d Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

struct _machdep_state {
	int	frame;
};
@


1.5
log
@switch to _machdep_switch() instead of setjmp/longjmp. For some reason this fixes sparc threads.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@sync with FreeBSD
@
text
@d1 2
a2 5
/*
 * OpenBSD/mips machine-dependent thread macros
 *
 * $OpenBSD: uthread_machdep.h,v 1.3 1999/01/17 23:49:49 d Exp $
 */
d4 2
a5 31
#include <machine/regnum.h>
#include <machine/signal.h>

/* floating point state is saved by setjmp/longjmp */

#define _thread_machdep_save_float_state(thr) 		/* no need */
#define _thread_machdep_restore_float_state(thr) 	/* no need */

/* initialise the jmpbuf stack frame so it continues from entry */
#define _thread_machdep_thread_create(thr, entry, pattr)	\
	{							\
	    struct sigcontext *j = &(thr)->saved_jmp_buf;	\
								\
	    /* initialise to sane values */			\
	    _thread_machdep_setjmp(j);				\
	    /* entry */						\
	    j->sc_regs[RA] = j->sc_pc; /* for gdb */		\
	    j->sc_pc = (int)entry;				\
	    /* stack */						\
	    j->sc_regs[SP] = (int) (thr)->stack->base		\
				+ (thr)->stack->size		\
				- sizeof(double);		\
	}

#define _thread_machdep_longjmp(a,v)	longjmp(a,v)
#define _thread_machdep_setjmp(a)	setjmp(a)

typedef jmp_buf _machdep_jmp_buf;

struct _machdep_struct {
	/* nothing needed */
@


1.3
log
@mi+md jmp_buf; save i386s fs and gs for WINE (csapuntz@@stanford.edu)
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.2 1998/11/20 11:15:37 d Exp $
d26 2
a27 2
	    j->sc_regs[SP] = (int) (thr)->stack			\
				+ (pattr)->stacksize_attr	\
@


1.2
log
@Move atomic_lock code from asm to C with inline asm;
Add m68k, mips and sparc. (needs more careful checking)
Add 'slow_atomic_lock' for crippled archs.
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.1 1998/08/28 01:54:57 d Exp $
d33 2
@


1.1
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@@

