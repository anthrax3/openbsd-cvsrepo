head	1.8;
access;
symbols
	OPENBSD_3_2:1.6.0.16
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.14
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.12
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6;
locks; strict;
comment	@ * @;


1.8
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.7;

1.7
date	2002.10.11.19.08.41;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	99.03.10.09.30.53;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.02.07.23.51.00;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.12.21.13.03.45;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.12.21.07.37.01;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.18.05.59.18;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.20.11.15.37;	author d;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.7 2002/10/11 19:08:41 marc Exp $	*/
/*
 * Atomic lock for sparc
 */
 
#include "spinlock.h"

int
_atomic_lock(volatile _spinlock_lock_t * lock)
{
	_spinlock_lock_t old;

	/*
	 *  "  ldstub  [address], reg_rd
	 * 
	 *  The atomic load-store instructions copy a byte from memory
	 *  into r[rd]m then rewrite the addressed byte in memory to all
	 *  ones [_SPINLOCK_LOCKED]. The operation is performed
	 *  atomically, that is, without allowing intervening interrupts
	 *  or deferred traps. In a multiprocessor system, two or more
	 *  processors executing atomic load-store unsigned byte [...]
	 *  addressing the same byte [...] simultaneously are guaranteed
	 *  to execute them in an undefined, but serial order."
	 *    - p101, The SPARC Architecure Manual (version 8) Prentice-Hall
	 *
	 * "LDSTUB loads a byte value from memory to a register and writes
	 *  the value FF_16 into the addressed byte atomically. LDSTUB
	 *  is the classic test-and-set instruction. Like SWAP, it has
	 *  a consensus number of two and so cannot resolve more than
	 *  two contending processes in a wait-free fashion."
	 *    - p129, The SPARC Architecture Manual (version 9) Prentice-Hall
	 *  (See also section J.6 (spinlocks))
	 *
	 * (No change to the condition codes are documented.)
	 */
	__asm__("ldstub %0,%1"
		: "=m" (*lock), "=r" (old)
		: "0" (*lock));

	return (old == _SPINLOCK_LOCKED);
}
@


1.7
log
@remove unused/unreferenced code.
ok fgs@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.6 1999/03/10 09:30:53 d Exp $	*/
@


1.6
log
@correct asm constraints, espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.5 1999/02/07 23:51:00 d Exp $	*/
a40 7
}

int
_atomic_is_locked(volatile _spinlock_lock_t * lock)
{
	
	return (*lock == _SPINLOCK_LOCKED);
@


1.5
log
@implement sparc atomic lock with LDSTUB
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.4 1998/12/21 13:03:45 d Exp $	*/
d33 2
d36 3
a38 1
	__asm__("ldstub %1,%0" : "=r" (old), "+m" (*lock));
@


1.4
log
@more spinlock
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.3 1998/12/21 07:37:01 d Exp $	*/
d11 26
a36 1
	return _thread_slow_atomic_lock(lock);
d43 1
a43 1
	return _thread_slow_atomic_is_locked(lock);
@


1.3
log
@md spinlock
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 1998/12/18 05:59:18 d Exp $	*/
d8 2
a9 2
register_t
_atomic_lock(volatile register_t * lock)
d15 1
a15 1
_atomic_is_locked(volatile register_t * lock)
@


1.2
log
@add md _atomic_is_locked; clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d18 1
a18 1
	return *lock;
@


1.1
log
@Move atomic_lock code from asm to C with inline asm;
Add m68k, mips and sparc. (needs more careful checking)
Add 'slow_atomic_lock' for crippled archs.
@
text
@d1 4
a4 2
/*	$OpenBSD	*/
/* atomic lock for sparc */
d12 7
@

