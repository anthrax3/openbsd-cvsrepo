head	1.6;
access;
symbols
	OPENBSD_3_2:1.5.0.10
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.5;

1.5
date	2000.10.04.05.55.35;	author d;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.06.07.04.54;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.11.25.07.01.29;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.17.23.49.49;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.11.20.11.15.37;	author d;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_machdep.h,v 1.5 2000/10/04 05:55:35 d Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

struct _machdep_state {
	int	fp;		/* frame pointer */
	int	pc;		/* program counter */
};
@


1.5
log
@switch to _machdep_switch() instead of setjmp/longjmp. For some reason this fixes sparc threads.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@use art's thread context setjmp code
@
text
@d1 2
a2 5
/*
 * OpenBSD/sparc machine-dependent thread macros
 *
 * $OpenBSD: uthread_machdep.h,v 1.3 1999/11/25 07:01:29 d Exp $
 */
d4 3
a6 31
#include <sys/signal.h>

/* save the floating point state of a thread */
#define _thread_machdep_save_float_state(thr) 		\
	{						\
		/* XXX tdb */				\
	}

/* restore the floating point state of a thread */
#define _thread_machdep_restore_float_state(thr) 	\
	{						\
		/* XXX tdb */				\
	}

typedef long _machdep_jmp_buf[2];

int _thread_machdep_setjmp __P((_machdep_jmp_buf));
void _thread_machdep_longjmp __P((_machdep_jmp_buf, int));

/* initialise the jmpbuf stack frame so it continues from entry */
#define _thread_machdep_thread_create(thr, entry, pattr)	\
	{							\
		long stack = (long)(thr)->stack->base +		\
			(thr)->stack->size - 64;		\
		(thr)->saved_jmp_buf[0] = (long)stack;		\
		(thr)->saved_jmp_buf[1] = (long)entry - 8;	\
	}

struct _machdep_struct {
        /* char            saved_fp[???]; */
	int	dummy;
a7 1

@


1.3
log
@sync with FreeBSD
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.2 1999/01/17 23:49:49 d Exp $
d21 5
a26 1

d28 5
a32 7
	{						\
	    /* entry */					\
	    (thr)->saved_jmp_buf[1] = (long) entry;	\
	    /* stack */					\
	    (thr)->saved_jmp_buf[0] = (long) (thr)->stack->base \
				+ (thr)->stack->size	\
				- sizeof(double);	\
a33 4

#define _thread_machdep_longjmp(a,v)	_longjmp(a,v)
#define _thread_machdep_setjmp(a)	_setjmp(a)
typedef jmp_buf _machdep_jmp_buf;
@


1.2
log
@mi+md jmp_buf; save i386s fs and gs for WINE (csapuntz@@stanford.edu)
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.1 1998/11/20 11:15:37 d Exp $
d12 1
a12 1
		/* XXX tdb */		\
d18 1
a18 1
		/* XXX tdb */		\
d28 2
a29 2
	    (thr)->saved_jmp_buf[0] = (long) (thr)->stack \
				+ (pattr)->stacksize_attr \
d33 2
a34 8
/*
 * XXX high chance of longjmp botch (see libc/arch/sparc/gen/_setjmp.S)
 * because it uses the frame pointer to pop off frames.. we don't want
 * that.. what to do? fudge %fp? do our own setjmp?
 */
#define	_thread_machdep_longjmp(a,v)	_longjmp(a,v)
#define	_thread_machdep_setjmp(a)	_setjmp(a)

@


1.1
log
@Move atomic_lock code from asm to C with inline asm;
Add m68k, mips and sparc. (needs more careful checking)
Add 'slow_atomic_lock' for crippled archs.
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.2 1998/11/09 03:13:13 d Exp $
d40 2
@

