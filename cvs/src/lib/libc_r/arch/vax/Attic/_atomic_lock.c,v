head	1.4;
access;
symbols
	OPENBSD_3_2:1.1.0.8
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.3;

1.3
date	2002.11.01.20.14.59;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.11.19.08.41;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.27.21.23.56;	author hugh;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.3 2002/11/01 20:14:59 miod Exp $	*/

/*
 * Atomic lock for vax
 */

#include "spinlock.h"

int
_atomic_lock(volatile _spinlock_lock_t *lock)
{
	_spinlock_lock_t old;

	/*
	 * The Branch on Bit Set and Set Interlocked instruction
	 * sets a given bit in a register or a memory location, as an
	 * atomic, interlocked operation.
	 * If the bit was set, execution continues at the branch
	 * location.
	 *
	 * For more details, please refer to the Vax Architecture
	 * Reference Manual, chapter 3 (Instructions), section
	 * ``Control instructions''.
	 */
	__asm__ (
		"movl	$1, %1\n"	/* _SPINLOCK_LOCKED */
		"bbssi	$0, %0, 1f\n"
		"movl	$0, %1\n"	/* _SPINLOCK_UNLOCKED */
		"1:	\n"
		: "=m" (*lock), "=r" (old) : "0" (*lock)
	);

	return (old != _SPINLOCK_UNLOCKED);
}

int
_atomic_is_locked(volatile _spinlock_lock_t *lock)
{

	return (*lock != _SPINLOCK_UNLOCKED);
}
@


1.3
log
@Working atomic locks on vax for libc_r.
ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 2002/10/11 19:08:41 marc Exp $	*/
@


1.2
log
@remove unused/unreferenced code.
ok fgs@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 2001/01/27 21:23:56 hugh Exp $	*/
d12 29
a40 1
	return (_thread_slow_atomic_lock(lock));
@


1.1
log
@Stubs for vax. (build at least)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a12 7
}

int
_atomic_is_locked(volatile _spinlock_lock_t *lock)
{

	return (*lock != _SPINLOCK_UNLOCKED);
@

