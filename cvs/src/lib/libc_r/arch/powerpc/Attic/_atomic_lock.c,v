head	1.6;
access;
symbols
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.14
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.5;

1.5
date	2002.11.12.18.56.28;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.11.19.08.41;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.10.20.30.13;	author jsyn;	state Exp;
branches;
next	1.2;

1.2
date	98.12.22.05.47.17;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	98.12.21.07.22.26;	author d;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.5 2002/11/12 18:56:28 drahn Exp $	*/
/*
 * Atomic lock for powerpc
 */

#include "spinlock.h"

int
_atomic_lock(volatile _spinlock_lock_t *lock)
{
	_spinlock_lock_t old;

	__asm__("1: lwarx 0,0,%1   \n"
		"   stwcx. %2,0,%1 \n"
		"   bne- 1b        \n"
		"   mr %0, 0	   \n"
		: "=r" (old), "=r" (lock)
		: "r" (_SPINLOCK_LOCKED), "1" (lock) : "0"
	);

	return (old != _SPINLOCK_UNLOCKED);

	/*
	 * Dale <rahnds@@openbsd.org> says:
	 *   Side note. to prevent two processes from accessing
	 *   the same address with the lwarx in one instrution
	 *   and the stwcx in another process, the current powerpc
	 *   kernel uses a stwcx instruction without the corresponding
	 *   lwarx which causes any reservation of a process
	 *   to be removed.  if a context switch occurs
	 *   between the two accesses the store will not occur
	 *   and the condition code will cause it to loop. If on
	 *   a dual processor machine, the reserve will cause
	 *   appropriate bus cycle accesses to notify other
	 *   processors.
	 */
}
@


1.5
log
@Fix the C version of atomic lock so that the compiler will not share
registers. ok marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.4 2002/10/11 19:08:41 marc Exp $	*/
@


1.4
log
@remove unused/unreferenced code.
ok fgs@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.3 2002/07/10 20:30:13 jsyn Exp $	*/
d13 1
a13 1
	__asm__("1: lwarx %0,0,%1  \n"
d16 1
d18 1
a18 1
		: "r" (_SPINLOCK_LOCKED), "1" (lock)
@


1.3
log
@'sez' is not an english word; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 1998/12/22 05:47:17 rahnds Exp $	*/
a35 7
}

int
_atomic_is_locked(volatile _spinlock_lock_t *lock)
{

	return (*lock != _SPINLOCK_UNLOCKED);
@


1.2
log
@Correct a thinko I had when writing the comment for this code.
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 1998/12/21 07:22:26 d Exp $	*/
d23 1
a23 1
	 * Dale <rahnds@@openbsd.org> sez:
@


1.1
log
@unfinished powerpc md stuff.. rahnds?
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 3
a29 3
	 *   kernel uses a lwarx instruction without the corresponding
	 *   stwcx which effectively causes any reservation of a
	 *   process to be removed.  if a context switch occurs
@

