head	1.3;
access;
symbols
	OPENBSD_3_2:1.1.0.16
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.12
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.2;

1.2
date	2002.10.11.19.08.41;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	98.12.21.22.54.55;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.2 2002/10/11 19:08:41 marc Exp $	*/
/*
 * Atomic lock for hppa
 */
#include "spinlock.h"

int
_atomic_lock(volatile register_t *lock)
{
	register register_t old;

	__asm__("ldcws 0(%1), %0" : "=r" (old): "r" (lock));

	return (old == _SPINLOCK_LOCKED);
}
@


1.2
log
@remove unused/unreferenced code.
ok fgs@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 1998/12/21 22:54:55 mickey Exp $	*/
@


1.1
log
@MD locking and thread support for hppa
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a14 6
}

int
_atomic_is_locked(volatile register_t *lock)
{
	return (*lock == _SPINLOCK_LOCKED);
@

