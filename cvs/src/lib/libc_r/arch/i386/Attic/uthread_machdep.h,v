head	1.8;
access;
symbols
	OPENBSD_3_2:1.7.0.10
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.8
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.7;

1.7
date	2000.10.04.05.55.34;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.11.25.07.01.28;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.03.10.09.50.33;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.01.17.23.49.49;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.59.33;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.13;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.28.01.54.58;	author d;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_machdep.h,v 1.7 2000/10/04 05:55:34 d Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

#include <machine/reg.h>

struct _machdep_state {
	int		esp;
	struct fpreg	fpreg;
};

@


1.7
log
@switch to _machdep_switch() instead of setjmp/longjmp. For some reason this fixes sparc threads.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.6
log
@sync with FreeBSD
@
text
@d1 2
a2 5
/*
 * OpenBSD/i386 machine-dependent thread macros
 *
 * $OpenBSD: uthread_machdep.h,v 1.5 1999/03/10 09:50:33 d Exp $
 */
d6 3
a8 31
/* 
 * We need to extend jmp_buf to hold extended segment registers
 * for WINE.
 */
typedef struct _machdep_jmp_buf {
	union {
		jmp_buf		jb;
		struct {
			int		eip;
			int		ebx;
			int		esp;
			int		ebp;
			int		esi;
			int		edi;
		} jbs;
	} u;
#define mjb_eip	u.jbs.eip
#define mjb_ebx	u.jbs.ebx
#define mjb_esp	u.jbs.esp
#define mjb_ebp	u.jbs.ebp
#define mjb_esi	u.jbs.esi
#define mjb_edi	u.jbs.edi
	int		mjb_ds;	/* informational only - not restored */
	int		mjb_es;	/* informational only - not restored */
	int		mjb_fs;
	int		mjb_gs;
} _machdep_jmp_buf;

/* Extra machine-dependent information */
struct _machdep_struct {
	struct fpreg	saved_fp;	/* only saved with on signals */
a10 48
/* Save the floating point state of a thread: */
#define _thread_machdep_save_float_state(thr) 			\
	{							\
	    char *fdata = (char*)(&(thr)->_machdep.saved_fp);	\
	    __asm__("fsave %0"::"m" (*fdata));			\
	}

/* Restore the floating point state of a thread: */
#define _thread_machdep_restore_float_state(thr) 		\
	{							\
	    char *fdata = (char*)(&(thr)->_machdep.saved_fp);	\
	    __asm__("frstor %0"::"m" (*fdata));			\
	}

/* Initialise the jmpbuf stack frame so it continues from entry: */
#define _thread_machdep_thread_create(thr, entry, pattr)	\
	{							\
	    /* entry */						\
	    (thr)->saved_jmp_buf.mjb_eip = (long) entry;	\
	    /* stack */						\
	    (thr)->saved_jmp_buf.mjb_esp = 	 		\
		(long) (thr)->stack->base +			\
		(thr)->stack->size 				\
		- sizeof(double);				\
	}

static __inline int
_thread_machdep_setjmp_helper(a)
	_machdep_jmp_buf *a;
{
	int v;

	__asm__("mov %%ds, %0\n" : "=m" (a->mjb_ds) );
	__asm__("mov %%es, %0\n" : "=m" (a->mjb_es) );
	__asm__("mov %%fs, %0\n" : "=m" (a->mjb_fs) );
	__asm__("mov %%gs, %0\n" : "=m" (a->mjb_gs) );
	v = _setjmp(a->u.jb);
	if (v) {
		__asm__("mov %0, %%gs\n" :: "m" (a->mjb_gs) );
		__asm__("mov %0, %%fs\n" :: "m" (a->mjb_fs) );
		/* __asm__("mov %0, %%es\n" :: "m" (a->mjb_es) ); */
		/* __asm__("mov %0, %%ds\n" :: "m" (a->mjb_ds) ); */
	}
	return (v);
}

#define _thread_machdep_longjmp(a,v)	_longjmp((a).u.jb,v)
#define _thread_machdep_setjmp(a)	_thread_machdep_setjmp_helper(&(a))
@


1.5
log
@no need to save signal state in setjmp/longjmp - it will always be the same, so we may as well save a few syscalls
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.4 1999/01/17 23:49:49 d Exp $
d62 4
a65 3
	    (thr)->saved_jmp_buf.mjb_esp = (long) (thr)->stack	\
				+ (pattr)->stacksize_attr 	\
				- sizeof(double);		\
@


1.4
log
@mi+md jmp_buf; save i386s fs and gs for WINE (csapuntz@@stanford.edu)
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.3 1999/01/10 22:59:33 d Exp $
d77 1
a77 1
	v = setjmp(a->u.jb);
d87 1
a87 1
#define _thread_machdep_longjmp(a,v)	longjmp((a).u.jb,v)
@


1.3
log
@use <machine/reg>
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.2 1998/11/09 03:13:13 d Exp $
d9 36
a44 3
/* save the floating point state of a thread */
#define _thread_machdep_save_float_state(thr) 		\
	{						\
d46 1
a46 1
	    __asm__("fsave %0"::"m" (*fdata));		\
d49 3
a51 3
/* restore the floating point state of a thread */
#define _thread_machdep_restore_float_state(thr) 	\
	{						\
d53 1
a53 1
	    __asm__("frstor %0"::"m" (*fdata));		\
d56 1
a56 1
/* initialise the jmpbuf stack frame so it continues from entry */
d58 7
a64 7
	{						\
	    /* entry */					\
	    (thr)->saved_jmp_buf[0] = (long) entry;	\
	    /* stack */					\
	    (thr)->saved_jmp_buf[2] = (long) (thr)->stack \
				+ (pattr)->stacksize_attr \
				- sizeof(double);	\
d67 19
a85 6
#define	_thread_machdep_longjmp(a,v)	longjmp(a,v)
#define	_thread_machdep_setjmp(a)	setjmp(a)

struct _machdep_struct {
	struct fpreg	saved_fp;
};
d87 2
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_machdep.h,v 1.1 1998/08/28 01:54:58 d Exp $
d7 2
d12 1
a12 1
	    char *fdata = (char*)((thr)->_machdep.saved_fp);	\
d19 1
a19 1
	    char *fdata = (char*)((thr)->_machdep.saved_fp);	\
d38 1
a38 1
        char            saved_fp[108];
@


1.1
log
@somehow i missed this directory..
@
text
@d4 1
a4 1
 * $OpenBSD$
d31 3
@

