head	1.3;
access;
symbols
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.2;

1.2
date	2002.05.10.10.17.22;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.25.05.44.13;	author d;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_machdep.c,v 1.2 2002/05/10 10:17:22 art Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

/*
 * Machine-dependent thread state functions for OpenBSD/alpha
 */

#include <pthread.h>
#include "pthread_private.h"

#define ALIGNBYTES	15

struct frame {
	long	ra;
	long	s[7];
	long	t12;
	long	fs[8];
};

/*
 * Given a stack and an entry function, initialise a state
 * structure that can be later switched to.
 */
void
_thread_machdep_init(statep, base, len, entry)
	struct _machdep_state* statep;
	void *base;
	int len;
	void (*entry)(void);
{
	struct frame *f;

	f = (struct frame *)(((u_int64_t)base + len - sizeof *f) & ~ALIGNBYTES);
	f->ra = f->t12 = (u_int64_t)entry;

	statep->sp = (u_int64_t)f;
}

void
_thread_machdep_save_float_state(statep)
	struct _machdep_state* statep;
{
}

void
_thread_machdep_restore_float_state(statep)
	struct _machdep_state* statep;
{
}
@


1.2
log
@Cast u_int64_t explicitly, not long. (cosmetic)
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_machdep.c,v 1.1 2000/09/25 05:44:13 d Exp $	*/
@


1.1
log
@prepare for thread switching
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 4
a36 3
	f = (struct frame *)(((long)base + len - sizeof *f) & ~ALIGNBYTES);
	f->ra = f->t12 = (long)entry;
	statep->sp = (long)f;
@

