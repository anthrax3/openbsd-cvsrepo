head	1.19;
access;
symbols
	OPENBSD_3_2:1.18.0.2
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@.\" @;


1.19
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.18;

1.18
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.17;

1.17
date	2002.04.30.16.31.42;	author mpech;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.21.08.37.55;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.02.22.50.12;	author marc;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.30.23.41.05;	author marc;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.28.01.52.11;	author marc;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.31.03.01.49;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.31.19.38.24;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.28.21.42.44;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.12.21.48.03;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.14.21.31.40;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.07.10.16;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.07.09.13.35.24;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.07.07.10.50.05;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.00.13.11;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.03.22.04.21.45;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.20.15.15.06;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.47;	author d;	state Exp;
branches;
next	;


desc
@@


1.19
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@.\" $OpenBSD: pthreads.3,v 1.18 2002/05/01 08:03:30 mpech Exp $
.\" David Leonard <d@@openbsd.org>, 1998. Public domain.
.Dd August 17, 1998
.Dt PTHREADS 3
.Os
.Sh NAME
.Nm pthreads
.Nd POSIX 1003.1c thread interface
.Sh DESCRIPTION
A thread is a flow of control within a process.
Each thread represents a minimal amount of state;
normally just the cpu state and a signal mask.
All other process state (such as memory, file descriptors)
is shared among all of the threads in the process.
.Pp
In
.Ox ,
threads are implemented in a user-level library.
A program using these routines must be linked with the
.Fl pthread
option.
.Pp
The
.Dv SIGINFO
signal can be sent to a threaded process to have the library show the state of
all of its threads.
The information is sent to the process'
controlling tty and describes each thread's
ID,
state (see
.Sx Thread states ) ,
current priority,
flags (see
.Sx Thread flags ) ,
signal mask, and name (as set by
.Xr pthread_set_name_np 3 ) .
If the environment variable
.Ev PTHREAD_DEBUG
is defined additional information is displayed.
.Ss Thread states
Threads can be in one of these states:
.Bl -tag -offset indent -width Dv -compact
.It cond_wait
Executing
.Xr pthread_cond_wait 3
or
.Xr pthread_cond_timedwait 3 .
.It dead
Waiting for resource deallocation by the thread garbage collector.
.It deadlock
Waiting for a resource held by the thread itself.
.It fdlr_wait
File descriptor read lock wait.
.It fdlw_wait
File descriptor write lock wait.
.It fdr_wait
Executing one of
.Xr accept 2 ,
.Xr read 2 ,
.Xr readv 2 ,
.Xr recvfrom 2 ,
.Xr recvmsg 2 .
.It fdw_wait
Executing one of
.Xr connect 2 ,
.Xr sendmsg 2 ,
.Xr sendto 2 ,
.Xr write 2 ,
.Xr writev 2 .
.It file_wait
Executing
.Xr flockfile 3
or similar.
.It join
Executing
.Xr pthread_join 3 .
.It mutex_wait
Executing
.Xr pthread_mutex_lock 3 .
.It poll_wait
Executing
.Xr poll 2 .
.It running
Scheduled for, or engaged in, program execution.
.It select_wait
Executing
.Xr select 2 .
.It sigsuspend
Executing
.Xr sigsuspend 2 .
.It sigwait
Executing
.Xr sigwait 3 .
.It sleep_wait
Executing
.Xr sleep 3
or
.Xr nanosleep 2 .
.It spinblock
Waiting for a machine-level atomic lock.
.It suspended
Suspended with
.Xr pthread_suspend_np 3 .
.It wait_wait
Executing
.Xr wait4 2
or similar.
.El
.Ss Thread flags
The first three flags are one of:
.Bl -tag -offset indent -width 3en -compact
.It "p"
Private, system thread (e.g., the garbage collector).
.It "E, C, or c"
Thread is exiting (E), has a cancellation pending (C) (see
.Xr pthread_cancel 3 ) ,
or is at a cancellation point (c).
.It "t"
Thread is being traced.
.El
The next 7 flags refer to thread attributes:
.Bl -tag -offset indent -width 3en -compact
.It "C"
Thread is in the
.Dv CONDQ .
.It "R"
Thread is in the
.Dv WORKQ .
.It "W"
Thread is in the
.Dv WAITQ .
.It "P"
Thread is in the
.Dv PRIOQ .
.It "d"
Thread has been detached (see
.Xr pthread_detach 3 ) .
.It "i"
Thread inherits scheduler properties.
.It "f"
Thread will save floating point context.
.El
.Ss Scheduling algorithm
The scheduling algorithm used by the user-level thread library is
roughly as follows:
.Bl -enum -compact
.It
Threads each have a time slice credit which is debited
by the actual time the thread spends in running.
Freshly scheduled threads are given a time slice credit of 100000 usec.
.It
Give an incremental priority update to run-enabled threads that
have not run since the last time that an incremental priority update
was given to them.
.It
Choose the next run-enabled thread with the highest priority,
that became inactive least recently, and has
the largest remaining time slice.
.El
.Pp
When all threads are blocked, the process also blocks.
When there are no threads remaining,
the process terminates with an exit code of zero.
.Ss Thread stacks
Each thread has (or should have) a different stack, whether it be provided by a
user attribute, or provided automatically by the system.
If a thread overflows its stack, unpredictable results may occur.
System-allocated stacks (including that of the initial thread)
are typically allocated in such a way that a
.Dv SIGSEGV
signal is delivered to the process when a stack overflows.
.Pp
Signals handlers are normally run on the stack of the currently executing
thread.
Hence, if you want to handle the
.Dv SIGSEGV
signal, you should make use of
.Xr sigaltstack 2
or
.Xr sigprocmask 2 .
.Sh ENVIRONMENT
.Bl -tag -width "PTHREAD_DEBUG"
.It Ev PTHREAD_DEBUG
Enables verbose
.Dv SIGINFO
signal output.
.It Ev LIBC_R_DEBUG
Display thread status every time the garbage collection thread runs,
approximately once every 10 seconds.
The status display verbosity is controled by the
.Ev PTHREAD_DEBUG
environment variable.
.El
.Sh SEE ALSO
.Xr pthread_cleanup_pop 3 ,
.Xr pthread_cleanup_push 3 ,
.Xr pthread_cond_broadcast 3 ,
.Xr pthread_cond_destroy 3 ,
.Xr pthread_cond_init 3 ,
.Xr pthread_cond_signal 3 ,
.Xr pthread_cond_timedwait 3 ,
.Xr pthread_cond_wait 3 ,
.Xr pthread_create 3 ,
.Xr pthread_detach 3 ,
.Xr pthread_equal 3 ,
.Xr pthread_exit 3 ,
.Xr pthread_getspecific 3 ,
.Xr pthread_join 3 ,
.Xr pthread_key_create 3 ,
.Xr pthread_key_delete 3 ,
.Xr pthread_kill 3 ,
.Xr pthread_mutex_destroy 3 ,
.Xr pthread_mutex_init 3 ,
.Xr pthread_mutex_lock 3 ,
.Xr pthread_mutex_trylock 3 ,
.Xr pthread_mutex_unlock 3 ,
.Xr pthread_once 3 ,
.Xr pthread_rwlock_destroy 3 ,
.Xr pthread_rwlock_init 3 ,
.Xr pthread_rwlock_rdlock 3 ,
.Xr pthread_rwlock_unlock 3 ,
.Xr pthread_rwlock_wrlock 3 ,
.Xr pthread_rwlockattr_destroy 3 ,
.Xr pthread_rwlockattr_getpshared 3 ,
.Xr pthread_rwlockattr_init 3 ,
.Xr pthread_rwlockattr_setpshared 3 ,
.Xr pthread_self 3 ,
.Xr pthread_setspecific 3
.Sh STANDARDS
The user-level thread library provides functions that
conform to ISO/IEC 9945-1 ANSI/IEEE
.Pq Dq Tn POSIX
Std 1003.1 Second Edition 1996-07-12.
.Sh AUTHORS
John Birrell
.Pa ( jb@@freebsd.org )
wrote the majority of the user level thread library.
.\" David Leonard did a fair bit too, but is far too modest.
.Sh BUGS
The library contains a scheduler that uses the
process virtual interval timer to pre-empt running threads.
This means that using
.Xr setitimer 2
to alter the process virtual timer will have undefined effects.
The
.Dv SIGVTALRM
will never be delivered to threads in a process.
.Pp
Some pthread functions fail to work correctly when linked using the
.Fl g
option to
.Xr cc 1
or
.Xr gcc 1 .
The problems do not occur when linked using the
.Fl ggdb
option.
@


1.18
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.17 2002/04/30 16:31:42 mpech Exp $
@


1.17
log
@Initial cleanup:
o) remove extra space in the end of line;
o) remove extra blank lines in the end of file;
o) remove .Pp before .Ss;
o) CAVEAT -> CAVEATS;
o) fix usage of .Fa;
o) <blank-line> -> .Pp;
o) wrap long lines;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.16 2002/02/21 08:37:55 fgsch Exp $
d26 2
a27 1
all of its threads. The information is sent to the process'
d189 2
a190 2
approximately once every 10 seconds.   The status display verbosity is
controled by the
d244 2
a245 1
to alter the process virtual timer will have undefined effects. The
@


1.16
log
@Xr pthread_kill; from fries@@
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.15 2001/11/02 22:50:12 marc Exp $
d36 1
a36 1
If the environment variable 
a38 1
.Pp
@


1.15
log
@fix typo in thread status flags
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.14 2001/10/30 23:41:05 marc Exp $
d211 1
@


1.14
log
@
Add note to BUGS section regarding linking with -ggdb vs -g
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.13 2001/10/28 01:52:11 marc Exp $
d132 1
a132 1
.It "p"
@


1.13
log
@
Describe all the thread status flags.   Describe the two
environment variables used to control status format and display
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.12 2001/05/31 03:01:49 deraadt Exp $
d246 10
@


1.12
log
@typos; first few spotted by heko@@saitti.net
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.11 2000/12/31 19:38:24 brad Exp $
d33 2
a34 2
.Sx Thread flags )
and name (as set by
d36 3
d110 1
a110 1
The meaning of thread flags are as follows:
d112 1
a112 1
.It p
d114 5
a118 8
.It E
Thread is exiting.
.It C
Thread has an cancellation pending (see
.Xr pthread_cancel 3 ) .
.It c
Thread is at a cancellation point.
.It t
d121 1
a121 1
The other flags refer to thread attributes:
d123 13
a135 1
.It d
d138 1
a138 1
.It i
d140 1
a140 1
.It f
d181 13
@


1.11
log
@-lpthread -> -pthread
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.10 2000/04/28 21:42:44 deraadt Exp $
d27 1
a27 1
controlling tty and descrbes each thread's
d159 1
a159 1
signal is deliverred to the process when a stack overflows.
d161 1
a161 1
Signals handlers are normally  run on the stack of the currently executing
d214 1
a214 1
The library contains of a scheduler that uses the
@


1.10
log
@fix Xr; glam0006@@tc.umn.edu
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.9 2000/04/12 21:48:03 aaron Exp $
d20 1
a20 1
.Fl lpthread
@


1.9
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.8 2000/03/14 21:31:40 aaron Exp $
d166 1
a166 1
.Xr sigaltstack 3
d168 1
a168 1
.Xr sigprocmask 3 .
@


1.8
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.7 2000/01/06 07:10:16 d Exp $
d27 2
a28 2
controlling tty and descrbes each thread's 
ID, 
d30 1
a30 1
.Sx Thread states ) , 
d156 1
a156 1
System-allocated stacks (including that of the initial thread) 
d161 1
a161 1
Signals handlers are normally  run on the stack of the currently executing 
@


1.7
log
@describe SIGINFO dump better
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.6 1999/07/09 13:35:24 aaron Exp $
d110 1
a110 1
Private, system thread (e.g. the garbage collector).
@


1.6
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.5 1999/07/07 10:50:05 aaron Exp $
d18 4
a21 11
threads are implemented in a user-level library
.Pa ( libc_r )
that replaces the standard C library
.Pa ( libc ) .
This replacement is currently achieved by specifying the
.Fl pthread
flag to
.Xr cc 1
for each compilation unit, and for linking.
(But see the section on
.Sx BUGS . )
d27 9
a35 1
.Pa /dev/tty .
d37 1
d77 3
d106 25
d152 17
a213 10
Having to pass the
.Fl pthread
flag to
.Xr cc 1
for every compilation unit and linking is an awful kludge.
Future releases will most likely depreceate this flag,
and instead only use
.Fl l Ns Pa pthread
during linking.
.Pp
a220 8
.Pp
Due to the
type definition of
.Ft fd_set
and the internal reliance on
.Xr select 2 ,
threaded processes may be arbitrarily limited in the number of file descriptors
that they can collectively have open.
@


1.5
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.4 1999/05/26 00:13:11 d Exp $
d185 1
a185 1
Due to the 
@


1.4
log
@document two new states (deadlock and spinblock)
@
text
@d1 1
a1 1
.\" $OpenBSD: pthreads.3,v 1.3 1999/03/22 04:21:45 d Exp $
d5 1
a5 1
.Os BSD 4
@


1.3
log
@better, nicer, neater documentation
@
text
@d1 1
a1 1
.\" $OpenBSD$
d45 2
d91 2
@


1.2
log
@link/mention recently added manual pages
@
text
@d1 2
a8 75
.Sh SYNOPSIS
.Fd #include <pthread.h>
.Ft int
.Fn pthread_create "pthread_t *thread" "const pthread_attr_t *attr" "void *(*start_routine)(void *)" "void *arg"
.Ft void
.Fn pthread_cleanup_pop "int execute"
.Ft void
.Fn pthread_cleanup_push "void (*cleanup_routine)(void *)" "void *arg"
.Ft int
.Fn pthread_cond_broadcast "pthread_cond_t *cond"
.Ft int
.Fn pthread_cond_destroy "pthread_cond_t *cond"
.Ft int
.Fn pthread_cond_init "pthread_cond_t *cond" "const pthread_condattr_t *attr"
.Ft int
.Fn pthread_cond_signal "pthread_cond_t *cond"
.Ft int
.Fn pthread_cond_timedwait "pthread_cond_t *cond" "pthread_mutex_t *mutex" "const struct timespec *abstime"
.Ft int
.Fn pthread_cond_wait "pthread_cond_t *cond" "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_create "pthread_t *thread" "const pthread_attr_t *attr" "void *(*start_routine)(void *)" "void *arg"
.Fn pthread_exit
.Ft int
.Fn pthread_detach "pthread_t thread"
.Ft int
.Fn pthread_equal "pthread_t t1" "pthread_t t2"
.Ft void
.Fn pthread_exit "void *value_ptr"
.Ft void *
.Fn pthread_getspecific "pthread_key_t key"
.Ft int
.Fn pthread_join "pthread_t thread" "void **value_ptr"
.Ft int
.Fn pthread_key_create "pthread_key_t *key" "void (*destructor)(void *)"
.Ft int
.Fn pthread_key_delete "pthread_key_t key"
.Ft int
.Fn pthread_mutex_destroy "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_mutex_init "pthread_mutex_t *mutex" "const pthread_mutexattr_t *attr"
.Ft int
.Fn pthread_mutex_lock "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_mutex_trylock "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_mutex_unlock "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_once "pthread_once_t *once_control" "void (*init_routine)(void)"
.Ft int
.Fn pthread_rwlock_destroy "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_init "pthread_rwlock_t *lock" "const pthread_rwlockattr_t *attr"
.Ft int
.Fn pthread_rwlock_rdlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_tryrdlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_unlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_wrlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlock_trywrlock "pthread_rwlock_t *lock"
.Ft int
.Fn pthread_rwlockattr_destroy "pthread_rwlockattr_t *attr"
.Ft int
.Fn pthread_rwlockattr_getpshared "pthread_rwlockattr_t *attr" "int *pshared"
.Ft int
.Fn pthread_rwlockattr_init "pthread_rwlockattr_t *attr"
.Ft int
.Fn pthread_rwlockattr_setpshared "pthread_rwlockattr_t *attr" "int *pshared"
.Ft pthread_t
.Fn pthread_self "void"
.Ft int
.Fn pthread_setspecific "pthread_key_t key" "const void *value"
d10 108
a117 1
Steal something from the posix specs to describe what a thread is.
d143 1
a143 1
.Xr pthread_rwlock_rdlock.3 
d151 1
a151 1
.Xr pthread_setspecific 3 
d153 2
a154 2
.Fn pthread_create
conforms to ISO/IEC 9945-1 ANSI/IEEE
d157 31
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d56 22
d107 9
@

