head	1.7;
access;
symbols
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.6;

1.6
date	2002.11.05.22.19.55;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.03.23.58.39;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.03.20.36.43;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.28.22.32.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.06.07.25.15;	author d;	state Exp;
branches;
next	;


desc
@@


1.7
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/* $OpenBSD: thread_storage.c,v 1.6 2002/11/05 22:19:55 marc Exp $ */
/* Public Domain */

/*
 * libpthread's stronger functions
 */

#include <stdlib.h>
#include <pthread.h>
#include <string.h>
#include "pthread_private.h"

void
_libc_private_storage_lock(mutex)
        pthread_mutex_t *mutex;
{
	if (__isthreaded && pthread_mutex_lock(mutex) != 0)
		PANIC("_libc_private_storage_lock");
}

void
_libc_private_storage_unlock(mutex)
        pthread_mutex_t *mutex;
{
	if (__isthreaded && pthread_mutex_unlock(mutex) != 0)
		PANIC("_libc_private_storage_unlock");
}

void *
_libc_private_storage(volkey, init, initsz, error)
	volatile struct _thread_private_key_struct * volkey;
	void *	init;
	size_t	initsz;
	void *	error;
{
	void *result;
	void (*cleanfn)(void *);
	struct _thread_private_key_struct * key;

	/* Use static storage while not threaded: */
	if (!__isthreaded)
		return init;

	key = (struct _thread_private_key_struct *)volkey;	/* for gcc */

	/* Create the key once: */
	if (volkey->once.state == PTHREAD_NEEDS_INIT) {
		if (pthread_mutex_lock(&key->once.mutex) != 0)
			return error;
		if (volkey->once.state == PTHREAD_NEEDS_INIT) {
			if (key->cleanfn == NULL)
				cleanfn = free;
			else
				cleanfn = key->cleanfn;
			if (pthread_key_create(&key->key, cleanfn) != 0) {
				pthread_mutex_unlock(&key->once.mutex);
				return error;
			}
			key->once.state = PTHREAD_DONE_INIT;
		}
		pthread_mutex_unlock(&key->once.mutex);
	}

	/* XXX signals may cause re-entrancy here? */

	/* Acquire this key's thread-specific storage: */
	result = pthread_getspecific(key->key);

	/* Allocate and initialise storage if unallocated: */
	if (result == NULL) {
		result = malloc(initsz);
		if (result == NULL)
			return error;
		if (pthread_setspecific(key->key, result) != 0) {
			free(result);
			return error;
		}
		memcpy(result, init, initsz);
	}

	return result;
}
@


1.6
log
@
thread safe libc -- 2nd try.   OK miod@@, millert@@
Thanks to miod@@ for m68k and vax fixes
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.5
log
@back out previous patch.. there are still some vax/m68k issues
@
text
@d1 2
d4 3
a6 1
/* libpthread's stronger functions */
@


1.4
log
@
libc changes for thread safety.  Tested on:
alpha (millert@@), i386 (marc@@), m68k (millert@@ and miod@@),
powerpc (drahn@@ and dhartmei@@), sparc (millert@@ and marc@@),
sparc64 (marc@@), and vax (millert@@ and miod@@).
Thanks to millert@@, miod@@, and mickey@@ for fixes along the way.
@
text
@a0 2
/* $OpenBSD$ */
/* Public Domain */
d2 1
a2 3
/*
 * libpthread's stronger functions
 */
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 2
d4 3
a6 1
/* libpthread's stronger functions */
@


1.2
log
@need string.h
@
text
@d33 1
a33 1
	void (*cleanfn) __P((void *));
@


1.1
log
@thread-specific storage helper
@
text
@d6 1
@

