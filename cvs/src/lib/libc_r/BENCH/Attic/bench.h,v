head	1.3;
access;
symbols
	OPENBSD_3_2:1.2.0.16
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.14
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.2;

1.2
date	99.02.04.06.28.13;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.01.17.23.40.01;	author d;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@
/* The default number of cycles per test */
#define BENCH_LOOPS	(100000)

#include <sys/time.h>

typedef struct  {
	int i;				/* loop counter */
	int n;				/* loop maximum */
	int divisor;			/* operations per cycle */
	struct timeval start;		/* start time */
	struct timeval end;		/* end time */
	char *name;			/* benchmark title */
	char *doc;			/* benchmark description */
	char *units;			/* measurement units information */
} bench_t;

#define bench_now(tvp) \
	gettimeofday((tvp),0)

/*
 * Repeat the body of the loop 'max' times, with a few extra 'warm up'
 * cycles to negate cache effects.
 */
#define bench_amortize(b, max) 						\
	for ((b)->i = -64,						\
	     (b)->n = (max);						\
	     (b)->i < (b)->n;						\
	     (b)->i ++,							\
	     ((b)->i == 0 ? bench_now(&(b)->start) :			\
	      ((b)->i == (b)->n ? bench_now(&(b)->end)			\
		:0))\
	)

#define bench_init(b, nm, dc, un) do {					\
	(b)->name = (nm);						\
	(b)->doc = (dc);						\
	(b)->units = (un);						\
	timerclear(&(b)->start);					\
	timerclear(&(b)->end);						\
	(b)->n = (b)->i = 0;						\
	(b)->divisor = 1;						\
} while (0)
	
#define bench_header(b)							\
	printf("----------------------------------------------------\n" \
	       "Name:\t%s\nDesc:%s\n",	(b)->name, (b)->doc)

#define bench_report(b) do {						\
	bench_t overhead;						\
	struct timeval oh_elapsed;					\
	struct timeval elapsed;						\
	struct timeval normal;						\
	double average;							\
									\
	/* compute the loop overhead */					\
	bench_amortize(&overhead, (b)->n) { /* nothing */ }		\
									\
	/* compute the test time */					\
	timersub(&(b)->end, &(b)->start, &elapsed);			\
	timersub(&overhead.end, &overhead.start, &oh_elapsed);		\
	timersub(&elapsed, &oh_elapsed, &normal);			\
									\
	average = ((double)normal.tv_sec * 1000000.0 +			\
	    normal.tv_usec) / (double)((b)->divisor) / 			\
	    (double)((b)->n);						\
									\
	printf("Time: %f usec %s\n", average, (b)->units);		\
} while (0)
@


1.2
log
@tidy
@
text
@@


1.1
log
@some performance metrics
@
text
@d2 3
a4 1
#define BENCH_LOOPS	(16384)
d8 8
a15 10
	int i;
	int n;
	int divisor;
	struct timespec start;
	struct timespec end;
	struct timespec elapsed;
	double average;
	char *name;
	char *doc;
	char *units;
d18 2
a19 2
#define bench_now(tsp) \
	clock_gettime(CLOCK_REALTIME, (tsp))
d39 2
a40 3
	timespecclear(&(b)->start);					\
	timespecclear(&(b)->end);					\
	timespecclear(&(b)->elapsed);					\
a49 1
	struct timespec elapsed;					\
d51 4
d57 6
a62 1
	bench_amortize(&overhead, BENCH_LOOPS) { /* nothing */ }	\
d64 2
a65 3
	timespecsub(&(b)->end, &(b)->start, &(b)->elapsed);		\
	(b)->average = ((double)(b)->elapsed.tv_sec * 1000000000.0 +	\
	    (b)->elapsed.tv_nsec) / (double)((b)->divisor) / 		\
d68 1
a68 3
	printf("Time: %f usec %s\n", (b)->average, (b)->units);		\
	if ((b)->divisor != 1)						\
		printf("\t(%d operations per cycle)\n", (b)->divisor);	\
@

