head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.0.16
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.12
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.1;

1.1
date	99.01.17.23.40.02;	author d;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@
#include  <pthread.h>
#include "bench.h"

static char name[] =  "Once Overhead";
static char doc[] = 
"\tThe time needed for the highest priority thread to execute the\n"
"\tpthread_once() function when the init_routine has already been\n"
"\texecuted.";

void
init_routine()
{
}

int
main() {
	pthread_once_t once_control = PTHREAD_ONCE_INIT;
	bench_t b;
	bench_init(&b, name, doc, "per call");
	bench_header(&b);
	pthread_once(&once_control, init_routine);
	bench_amortize(&b, BENCH_LOOPS) {
		pthread_once(&once_control, init_routine);
	}
	bench_report(&b);
	exit(0);
}


@


1.1
log
@some performance metrics
@
text
@@

