head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.0.16
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.12
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.1;

1.1
date	99.01.17.23.40.02;	author d;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@#include <pthread.h>
#include <sched.h>
#include <string.h>
#include <err.h>
#include "bench.h"

static char name[] =  "Thread Yield Time (Busy)";
static char doc[] = 
"\tThread yield time is defined as the amount of time between that\n"
"\tpoint when a running thread voluntarily gives up the CPU until\n"
"\tthe highest priority runnable thread begins execution of its\n"
"\tapplication code.";

#ifdef DEBUG
volatile int state = 0;
#endif
bench_t	b;

void *
other_thread(arg)
	void *arg;
{

	pthread_set_name_np(pthread_self(), "oth");
	bench_amortize(&b, BENCH_LOOPS) {
#ifdef DEBUG
		if (state != 0)	abort();
		state = 1;
#endif
		sched_yield();
	}
}

int
main() {
	pthread_t other;

	bench_init(&b, name, doc, "per yield");
	b.n = BENCH_LOOPS;
	bench_header(&b);
	pthread_create(&other, NULL, other_thread, NULL);
	while (b.i < b.n) {
#ifdef DEBUG
		if (state != 1) abort();
		state = 0;
#endif
		sched_yield();
	}
	pthread_join(other, NULL);
	b.divisor = 2;
	bench_report(&b);
	exit(0);
}


@


1.1
log
@some performance metrics
@
text
@@

