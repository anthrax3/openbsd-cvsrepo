head	1.8;
access;
symbols
	OPENBSD_3_2:1.7.0.12
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.10
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.8
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7;
locks; strict;
comment	@ * @;


1.8
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.7;

1.7
date	2000.03.22.02.06.05;	author d;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.26.13.34.51;	author d;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.10.11.47.15;	author d;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.06.07.22.46;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.11.26.00.53.21;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.11.25.19.00.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.11.25.07.01.46;	author d;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_stack.c,v 1.7 2000/03/22 02:06:05 d Exp $	*/
/*
 * Copyright 1999, David Leonard. All rights reserved.
 * <insert BSD-style license&disclaimer>
 */

/*
 * Thread stack allocation.
 *
 * If stack pointers grow down, towards the beginning of stack storage,
 * the first page of the storage is protected using mprotect() so as
 * to generate a SIGSEGV if a thread overflows its stack. Similarly,
 * for stacks that grow up, the last page of the storage is protected.
 */

#include <stddef.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/user.h>
#include <sys/mman.h>
#include <pthread.h>
#include <pthread_np.h>
#include "pthread_private.h"

struct stack *
_thread_stack_alloc(base, size)
	void *base;
	size_t size;
{
	struct stack *stack;
	int nbpg = getpagesize();

	/* Maintain a stack of default-sized stacks that we can re-use. */
	if (base == NULL && size == PTHREAD_STACK_DEFAULT) {
		if (pthread_mutex_lock(&_gc_mutex) != 0)
			PANIC("Cannot lock gc mutex");

		if ((stack = SLIST_FIRST(&_stackq)) != NULL) {
			SLIST_REMOVE_HEAD(&_stackq, qe);
			if (pthread_mutex_unlock(&_gc_mutex) != 0)
				PANIC("Cannot unlock gc mutex");
			return stack;
		}
		if (pthread_mutex_unlock(&_gc_mutex) != 0)
			PANIC("Cannot unlock gc mutex");
	}

	/* Allocate some storage to hold information about the stack: */
	stack = (struct stack *)malloc(sizeof (struct stack));
	if (stack == NULL) 
		return NULL;

	if (base != NULL) {
		/* Use the user's storage */
		stack->base = base;
		stack->size = size;
		stack->redzone = NULL;
		stack->storage = NULL;
		return stack;
	}

	/* Allocate some storage for the stack, with some overhead: */
	stack->storage = malloc(size + nbpg * 2);
	if (stack->storage == NULL) {
		free(stack);
		return NULL;
	}

	/*
	 * Compute the location of the red zone.
	 * Use _BSD_PTRDIFF_T_ to convert the storage base pointer
	 * into an integer so that page alignment can be done with
	 * integer arithmetic.
	 */
#if defined(MACHINE_STACK_GROWS_UP)
	/* Red zone is the last page of the storage: */
	stack->redzone = (void *)(((_BSD_PTRDIFF_T_)stack->storage +
	    size + nbpg - 1) & ~(nbpg - 1));
	stack->base = (caddr_t)stack->storage;
	stack->size = size;
#else
	/* Red zone is the first page of the storage: */
	stack->redzone = (void *)(((_BSD_PTRDIFF_T_)stack->storage + 
	    nbpg - 1) & ~(nbpg - 1));
	stack->base = (caddr_t)stack->redzone + nbpg;
	stack->size = size;
#endif
	if (mprotect(stack->redzone, nbpg, 0) == -1)
		PANIC("Cannot protect stack red zone");

	return stack;
}

void
_thread_stack_free(stack)
	struct stack *stack;
{
	int nbpg = getpagesize();

	/* Cache allocated stacks of default size: */
	if (stack->storage != NULL && stack->size == PTHREAD_STACK_DEFAULT)
		SLIST_INSERT_HEAD(&_stackq, stack, qe);
	else {
		/* Restore storage protection to what malloc gave us: */
		if (stack->redzone)
			mprotect(stack->redzone, nbpg,
			    PROT_READ|PROT_WRITE);

		/* Free storage: */
		if (stack->storage)
			free(stack->storage);

		/* Free stack information storage: */
		free(stack);
	}
}
@


1.7
log
@MACHINE_STACK_GROWS_UP
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_stack.c,v 1.6 2000/02/26 13:34:51 d Exp $	*/
@


1.6
log
@alpha
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_stack.c,v 1.5 2000/02/10 11:47:15 d Exp $	*/
d10 4
a13 4
 * Stack pointers are assumed to work their way down (backwards) to the
 * beginning of the stack storage. The first page of this storage is 
 * protected using mprotect() so as to generate a SIGSEGV if a thread
 * overflows its stack.
d72 4
a75 3
	 * The red zone is the first physical page of the storage.
	 * I'm using _BSD_PTRDIFF_T_ to convert the storage base pointer
	 * into an integer so that I can do page alignment on it.
d77 13
a89 2
	stack->redzone = (void*)(((_BSD_PTRDIFF_T_)stack->storage + nbpg - 1) & 
	    ~(nbpg - 1));
a92 4
	/* Find the useful range of the stack. */
	stack->base = (caddr_t)stack->redzone + nbpg;
	stack->size = size;

d102 1
a102 1
	/* Cache allocated stacks of default size. */
d106 1
a106 1
		/* Restore storage protection to what malloc expects: */
d111 1
a111 1
		/* Free storage */
d115 1
a115 1
		/* Free stack information storage. */
@


1.5
log
@its a stack, not a queue
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_stack.c,v 1.4 2000/01/06 07:22:46 d Exp $	*/
d71 6
a76 2
	/* The red zone is the first physical page of the storage: */
	stack->redzone = (void*)(((int)stack->storage + nbpg - 1) & 
@


1.4
log
@copyright, includes, cast
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_stack.c,v 1.3 1999/11/26 00:53:21 d Exp $	*/
d35 1
a35 1
	/* Maintain a queue of default-sized stacks that we can re-use. */
@


1.3
log
@don't use stack cache if user supplied the storage
@
text
@d1 5
a5 2
/*	$OpenBSD: uthread_stack.c,v 1.2 1999/11/25 19:00:19 deraadt Exp $	*/
/* David Leonard <david.leonard@@csee.uq.edu.au> 1999.
d18 1
d78 1
a78 1
	stack->base = stack->redzone + nbpg;
@


1.2
log
@NBPG in userland? what were you thiking?
@
text
@d1 2
a2 1
/*	$OpenBSD: uthread_stack.c,v 1.1 1999/11/25 07:01:46 d Exp $	*/
d32 1
a32 1
	if (size == PTHREAD_STACK_DEFAULT) {
@


1.1
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d28 1
d60 1
a60 1
	stack->storage = malloc(size + NBPG * 2);
d67 3
a69 3
	stack->redzone = (void*)(((int)stack->storage + NBPG - 1) & 
	    ~(NBPG - 1));
	if (mprotect(stack->redzone, NBPG, 0) == -1)
d73 1
a73 1
	stack->base = stack->redzone + NBPG;
d83 2
d91 2
a92 1
			mprotect(stack->redzone, NBPG, PROT_READ|PROT_WRITE);
@

