head	1.9;
access;
symbols
	OPENBSD_3_2:1.8.0.10
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.8
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.6
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.8;

1.8
date	2000.10.04.05.52.34;	author d;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.07.14.28;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.11.25.07.01.33;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.06.09.07.16.16;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.01.17.23.57.27;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.06.05.29.22;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.18;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.56;	author d;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_close.c,v 1.8 2000/10/04 05:52:34 d Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_close.c,v 1.7 1999/08/28 00:03:26 peter Exp $
 */
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
close(int fd)
{
	int		flags;
	int		ret;
	struct stat	sb;
	struct fd_table_entry	*entry;

	/* This is a cancelation point: */
	_thread_enter_cancellation_point();

	if ((fd == _thread_kern_pipe[0]) || (fd == _thread_kern_pipe[1])) {
		/*
		 * Don't allow silly programs to close the kernel pipe.
		 */
		errno = EBADF;
		ret = -1;
	}
	/*
	 * Lock the file descriptor while the file is closed and get
	 * the file descriptor status:
	 */
	else if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) {
		/*
		 * Check if the file should be left as blocking.
		 *
		 * This is so that the file descriptors shared with a parent
		 * process aren't left set to non-blocking if the child
		 * closes them prior to exit.  An example where this causes
		 * problems with /bin/sh is when a child closes stdin.
		 *
		 * Setting a file as blocking causes problems if a threaded
		 * parent accesses the file descriptor before the child exits.
		 * Once the threaded parent receives a SIGCHLD then it resets
		 * all of its files to non-blocking, and so it is then safe
		 * to access them.
		 *
		 * Pipes are not set to blocking when they are closed, as
		 * the parent and child will normally close the file
		 * descriptor of the end of the pipe that they are not
		 * using, which would then cause any reads to block
		 * indefinitely.
		 *
		 * Files that we cannot fstat are probably not regular
		 * so we don't bother with them.
		 */

		if ((_thread_sys_fstat(fd, &sb) == 0) && 
		    ((S_ISREG(sb.st_mode) || S_ISCHR(sb.st_mode)) &&
		    (_thread_fd_table[fd]->flags & O_NONBLOCK) == 0))
		{
			/* Get the current flags: */
			flags = _thread_sys_fcntl(fd, F_GETFL, NULL);
			/* Clear the nonblocking file descriptor flag: */
			_thread_sys_fcntl(fd, F_SETFL, flags & ~O_NONBLOCK);
		}

		/* XXX: Assumes well behaved threads. */
		/* XXX: Defer real close to avoid race condition */
		entry = _thread_fd_table[fd];
		_thread_fd_table[fd] = NULL;
		free(entry);

		/* Close the file descriptor: */
		ret = _thread_sys_close(fd);
	}

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.8
log
@if fstat fails fails, as it will on some sockets, close anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.7 2000/01/06 07:14:28 d Exp $	*/
@


1.7
log
@unused variable
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_close.c,v 1.6 1999/11/25 07:01:33 d Exp $	*/
d66 1
a66 2
	else if (((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) &&
	    ((ret = _thread_sys_fstat(fd, &sb)) == 0)) {
d86 3
d90 5
a94 1
		if ((S_ISREG(sb.st_mode) || S_ISCHR(sb.st_mode)) && (_thread_fd_table[fd]->flags & O_NONBLOCK) == 0) {
@


1.6
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a48 1
	int		status;
@


1.5
log
@document cancellation point handling a bit better
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_close.c,v 1.4 1999/01/17 23:57:27 d Exp $
d35 1
d49 1
d51 1
d56 13
a68 5
	/* Lock the file descriptor while the file is closed: */
	if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) {
		/* Get file descriptor status. */
		_thread_sys_fstat(fd, &sb);

d96 6
a103 3

		free(_thread_fd_table[fd]);
		_thread_fd_table[fd] = NULL;
@


1.4
log
@pthread_cancel() and cancellation points
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_close.c,v 1.3 1999/01/06 05:29:22 d Exp $
d49 1
d51 1
d90 2
d93 1
@


1.3
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d49 1
d88 1
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d32 1
@


1.1
log
@experimental threaded libc - kernel only
@
text
@a45 1
	int		status;
@

