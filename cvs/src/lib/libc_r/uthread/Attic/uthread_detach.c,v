head	1.9;
access;
symbols
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.8;

1.8
date	2002.03.07.22.36.03;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.11.00.19.47;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.06.07.15.05;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.11.25.07.01.33;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.00.18.23;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.06.05.29.23;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.19;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.59;	author d;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_detach.c,v 1.8 2002/03/07 22:36:03 fgsch Exp $	*/
/*
 * Copyright (c) 1995 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_detach.c,v 1.10 1999/08/28 00:03:28 peter Exp $
 */
#include <errno.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
pthread_detach(pthread_t pthread)
{
	int             rval = 0;

	/* Check for invalid calling parameters: */
	if (pthread == NULL || pthread->magic != PTHREAD_MAGIC)
		/* Return an invalid argument error: */
		rval = EINVAL;

	/* Check if the thread has not been detached: */
	else if ((pthread->attr.flags & PTHREAD_DETACHED) == 0) {
		/* Flag the thread as detached: */
		pthread->attr.flags |= PTHREAD_DETACHED;

		/*
		 * Defer signals to protect the scheduling queues from
		 * access by the signal handler:
		 */
		_thread_kern_sig_defer();

		/* Check if there is a joiner: */
		if (pthread->joiner != NULL) {
			struct pthread	*joiner = pthread->joiner;

			/* Make the thread runnable: */
			PTHREAD_NEW_STATE(joiner, PS_RUNNING);

			/* Set the return value for the woken thread: */
			joiner->join_status.error = ESRCH;
			joiner->join_status.ret = NULL;
			joiner->join_status.thread = NULL;

			/*
			 * Disconnect the joiner from the thread being detached:
			 */
			pthread->joiner = NULL;
		}

		/*
		 * Undefer and handle pending signals, yielding if a
		 * scheduling signal occurred while in the critical region.
		 */
		_thread_kern_sig_undefer();
	} else
		/* Return an error: */
		rval = EINVAL;

	/* Return the completion status: */
	return (rval);
}
#endif
@


1.8
log
@From FreeBSD:
Properly clear the status of a join operation if the joining thread is
canceled or the joinee is detached.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_detach.c,v 1.7 2001/12/11 00:19:47 fgsch Exp $	*/
@


1.7
log
@More sync with freebsd code; join related code this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_detach.c,v 1.6 2000/01/06 07:15:05 d Exp $	*/
d69 3
a71 1
			joiner->error = ESRCH;
@


1.6
log
@unused vars
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_detach.c,v 1.5 1999/11/25 07:01:33 d Exp $	*/
a43 1
	pthread_t       next_thread;
d61 14
a74 7
		/* Enter a loop to bring all threads off the join queue: */
		while ((next_thread = TAILQ_FIRST(&pthread->join_queue)) != NULL) {
			/* Remove the thread from the queue: */
			TAILQ_REMOVE(&pthread->join_queue, next_thread, qe);

			/* Make the thread run: */
			PTHREAD_NEW_STATE(next_thread,PS_RUNNING);
@


1.5
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a43 1
	int             status;
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_detach.c,v 1.3 1999/01/06 05:29:23 d Exp $
d44 1
d58 2
a59 3
		 * Guard against preemption by a scheduling signal.
		 * A change of thread state modifies the waiting
		 * and priority queues.
d61 1
a61 1
		_thread_kern_sched_defer();
d64 4
a67 1
		while ((next_thread = _thread_queue_deq(&pthread->join_queue)) != NULL) {
d73 2
a74 2
		 * Reenable preemption and yield if a scheduling signal
		 * occurred while in the critical region.
d76 1
a76 1
		_thread_kern_sched_undefer();
@


1.3
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d55 7
d67 6
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d32 1
@


1.1
log
@experimental threaded libc - kernel only
@
text
@a41 1
	int             status;
@

