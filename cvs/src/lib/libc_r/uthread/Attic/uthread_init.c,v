head	1.26;
access;
symbols
	OPENBSD_3_2:1.21.0.4
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.21.0.2
	OPENBSD_3_1_BASE:1.21
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9:1.12.0.6
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.26
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.25;

1.25
date	2002.11.08.07.53.03;	author marc;	state Exp;
branches;
next	1.24;

1.24
date	2002.11.07.03.51.21;	author marc;	state Exp;
branches;
next	1.23;

1.23
date	2002.10.30.20.05.12;	author marc;	state Exp;
branches;
next	1.22;

1.22
date	2002.10.30.19.11.56;	author marc;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.21.20.57.41;	author fgsch;	state Exp;
branches;
next	1.20;

1.20
date	2002.01.17.23.12.09;	author fgsch;	state Exp;
branches;
next	1.19;

1.19
date	2001.12.31.18.23.15;	author fgsch;	state Exp;
branches;
next	1.18;

1.18
date	2001.12.11.00.19.47;	author fgsch;	state Exp;
branches;
next	1.17;

1.17
date	2001.12.08.14.51.36;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.04.22.17.45;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.30.17.47.57;	author todd;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.30.07.40.47;	author fgsch;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.29.18.33.54;	author fgsch;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.26.13.30.49;	author d;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.06.07.18.26;	author d;	state Exp;
branches;
next	1.10;

1.10
date	99.11.25.07.01.37;	author d;	state Exp;
branches;
next	1.9;

1.9
date	99.05.26.00.18.24;	author d;	state Exp;
branches;
next	1.8;

1.8
date	99.01.17.23.57.27;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.01.10.23.11.33;	author d;	state Exp;
branches;
next	1.6;

1.6
date	98.12.23.22.43.05;	author d;	state Exp;
branches;
next	1.5;

1.5
date	98.12.21.07.59.08;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.12.10.00.33.54;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.11.20.12.13.32;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.20;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.07;	author d;	state Exp;
branches;
next	;


desc
@@


1.26
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_init.c,v 1.25 2002/11/08 07:53:03 marc Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_init.c,v 1.18 1999/08/28 00:03:36 peter Exp $
 */

/* Allocate space for global thread variables here: */
#define GLOBAL_PTHREAD_PRIVATE

#include <sys/types.h>
#include <sys/param.h>

#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/sysctl.h>
#include <sys/time.h>
#include <sys/ttycom.h>
#include <sys/user.h>
#include <sys/wait.h>

#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <paths.h>
#include <poll.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#ifdef _THREAD_SAFE
#include <machine/reg.h>
#include <pthread.h>
#include "pthread_private.h"

/* Global thread variables. */
_stack_list_t	_stackq;

extern int _thread_autoinit_dummy_decl;

/*
 * All weak references used within libc that are redefined in libc_r
 * or libpthread MUST be in this table.   This is necessary to force the
 * proper version to be used when linking -static.
 */
static void *references[] = {
	&_exit,
	&accept,
	&bind,
	&close,
	&connect,
	&dup,
	&dup2,
	&execve,
	&fchflags,
	&fchmod,
	&fchown,
	&fcntl,
	&flock,
	&fork,
	&fpathconf,
	&fstat,
	&fstatfs,
	&fsync,
	&getdirentries,
	&getpeername,
	&getsockname,
	&getsockopt,
	&ioctl,
	&kevent,
	&listen,
	&msync,
	&nanosleep,
	&open,
	&pipe,
	&poll,
	&read,
	&readv,
	&recvfrom,
	&recvmsg,
	&select,
	&sendmsg,
	&sendto,
	&setsockopt,
	&shutdown,
	&sigaction,
	&sigaltstack,
	&sigpending,
	&sigprocmask,
	&sigsuspend,
	&socket,
	&socketpair,
	&vfork,
	&wait4,
	&write,
	&writev,
	/* libc thread-safe helper functions */
	&_thread_fd_lock,
	&_thread_fd_unlock,
	&_thread_malloc_init,
	&_thread_malloc_lock,
	&_thread_malloc_unlock,
	&_libc_private_storage,
	&_libc_private_storage_lock,
	&_libc_private_storage_unlock,
	&flockfile,
	&_flockfile_debug,
	&ftrylockfile,
	&funlockfile
};

/*
 * Threaded process initialization
 */
void
_thread_init(void)
{
	int		fd;
	int             flags;
	int             i;
	size_t		len;
	int		mib[2];
	struct clockinfo clockinfo;
	struct sigaction act;

	/* Check if this function has already been called: */
	if (_thread_initial)
		/* Only initialise the threaded application once. */
		return;

	if (references[0] == NULL)
		PANIC("Failed loading mandatory references in _thread_init");

	/*
	 * Check for the special case of this process running as
	 * or in place of init as pid = 1:
	 */
	if (getpid() == 1) {
		/*
		 * Setup a new session for this process which is
		 * assumed to be running as root.
		 */
		if (setsid() == -1)
			PANIC("Can't set session ID");
		if (revoke(_PATH_CONSOLE) != 0)
			PANIC("Can't revoke console");
		if ((fd = _thread_sys_open(_PATH_CONSOLE, O_RDWR)) < 0)
			PANIC("Can't open console");
		if (setlogin("root") == -1)
			PANIC("Can't set login to root");
		if (_thread_sys_ioctl(fd,TIOCSCTTY, (char *) NULL) == -1)
			PANIC("Can't set controlling terminal");
		if (_thread_sys_dup2(fd,0) == -1 ||
		    _thread_sys_dup2(fd,1) == -1 ||
		    _thread_sys_dup2(fd,2) == -1)
			PANIC("Can't dup2");
	}

	/*
	 * Create a pipe that is written to by the signal handler to prevent
	 * signals being missed in calls to _select:
	 */
	if (_thread_sys_pipe(_thread_kern_pipe) != 0) {
		/* Cannot create pipe, so abort: */
		PANIC("Cannot create kernel pipe");
	}
	/* Get the flags for the read pipe: */
	else if ((flags = _thread_sys_fcntl(_thread_kern_pipe[0], F_GETFL, NULL)) == -1) {
		/* Abort this application: */
		PANIC("Cannot get kernel read pipe flags");
	}
	/* Make the read pipe non-blocking: */
	else if (_thread_sys_fcntl(_thread_kern_pipe[0], F_SETFL, flags | O_NONBLOCK) == -1) {
		/* Abort this application: */
		PANIC("Cannot make kernel read pipe non-blocking");
	}
	/* Get the flags for the write pipe: */
	else if ((flags = _thread_sys_fcntl(_thread_kern_pipe[1], F_GETFL, NULL)) == -1) {
		/* Abort this application: */
		PANIC("Cannot get kernel write pipe flags");
	}
	/* Make the write pipe non-blocking: */
	else if (_thread_sys_fcntl(_thread_kern_pipe[1], F_SETFL, flags | O_NONBLOCK) == -1) {
		/* Abort this application: */
		PANIC("Cannot get kernel write pipe flags");
	}
	/* Allocate and initialize the ready queue: */
	else if (_pq_alloc(&_readyq, PTHREAD_MIN_PRIORITY, PTHREAD_LAST_PRIORITY) != 0) {
		/* Abort this application: */
		PANIC("Cannot allocate priority ready queue.");
	}
	/* Allocate memory for the thread structure of the initial thread: */
	else if ((_thread_initial = (pthread_t) malloc(sizeof(struct pthread))) == NULL) {
		/*
		 * Insufficient memory to initialise this application, so
		 * abort:
		 */
		PANIC("Cannot allocate memory for initial thread");
	} else {
		/* Zero the global kernel thread structure: */
		memset(&_thread_kern_thread, 0, sizeof(struct pthread));
		_thread_kern_thread.flags = PTHREAD_FLAGS_PRIVATE;
		memset(_thread_initial, 0, sizeof(struct pthread));

		/* Initialize the waiting and work queues: */
		TAILQ_INIT(&_waitingq);
		TAILQ_INIT(&_workq);

		/* Initialize the scheduling switch hook routine: */
		_sched_switch_hook = NULL;

		/* Initialize the thread stack cache: */
		SLIST_INIT(&_stackq);

		/*
		 * Write a magic value to the thread structure
		 * to help identify valid ones:
		 */
		_thread_initial->magic = PTHREAD_MAGIC;

		/* Set the initial cancel state */
		_thread_initial->cancelflags = PTHREAD_CANCEL_ENABLE |
		    PTHREAD_CANCEL_DEFERRED;

		/* Default the priority of the initial thread: */
		_thread_initial->base_priority = PTHREAD_DEFAULT_PRIORITY;
		_thread_initial->active_priority = PTHREAD_DEFAULT_PRIORITY;
		_thread_initial->inherited_priority = 0;

		/* Initialise the state of the initial thread: */
		_thread_initial->state = PS_RUNNING;

		/* Initialize joiner to NULL (no joiner): */
		_thread_initial->joiner = NULL;

		/* Initialize the owned mutex queue and count: */
		TAILQ_INIT(&(_thread_initial->mutexq));
		_thread_initial->priority_mutex_count = 0;

		/* Initialize the global scheduling time: */
		_sched_ticks = 0;
		gettimeofday((struct timeval *) &_sched_tod, NULL);

		/* Initialize last active: */
		_thread_initial->last_active = (long) _sched_ticks;

		/* Give it a useful name */
		pthread_set_name_np(_thread_initial, "main");

		/* Initialise the rest of the fields: */
		_thread_initial->poll_data.nfds = 0;
		_thread_initial->poll_data.fds = NULL;
		_thread_initial->sig_defer_count = 0;
		_thread_initial->slice_usec = -1;
		_thread_initial->sig_saved = 0;
		_thread_initial->yield_on_sig_undefer = 0;
		_thread_initial->specific_data = NULL;
		_thread_initial->cleanup = NULL;
		_thread_initial->flags = 0;
		_thread_initial->error = 0;
		_SPINLOCK_INIT(&_thread_initial->lock);
		TAILQ_INIT(&_thread_list);
		TAILQ_INSERT_HEAD(&_thread_list, _thread_initial, tle);
		_set_curthread(_thread_initial);

		/* Initialise the global signal action structure: */
		sigfillset(&act.sa_mask);
		act.sa_handler = (void (*) ()) _thread_sig_handler;
		act.sa_flags = SA_SIGINFO;

		/* Clear pending signals for the process: */
		sigemptyset(&_process_sigpending);

		/* Initialize signal handling: */
		_thread_sig_init();

		/* Enter a loop to get the existing signal status: */
		for (i = 1; i < NSIG; i++) {
			/* Check for signals which cannot be trapped: */
			if (i == SIGKILL || i == SIGSTOP) {
			}

			/* Get the signal handler details: */
			else if (_thread_sys_sigaction(i, NULL,
			    &_thread_sigact[i - 1]) != 0) {
				/*
				 * Abort this process if signal
				 * initialisation fails:
				 */
				PANIC("Cannot read signal handler info");
			}

			/* Initialize the SIG_DFL dummy handler count. */
			_thread_dfl_count[i] = 0;
		}

		/*
		 * Install the signal handler for the most important
		 * signals that the user-thread kernel needs. Actually
		 * SIGINFO isn't really needed, but it is nice to have.
		 */
		if (_thread_sys_sigaction(_SCHED_SIGNAL, &act, NULL) != 0 ||
		    _thread_sys_sigaction(SIGINFO,       &act, NULL) != 0 ||
		    _thread_sys_sigaction(SIGCHLD,       &act, NULL) != 0) {
			/*
			 * Abort this process if signal initialization fails:
			 */
			PANIC("Cannot initialize signal handler");
		}
		_thread_sigact[_SCHED_SIGNAL - 1].sa_flags = SA_SIGINFO;
		_thread_sigact[SIGINFO - 1].sa_flags = SA_SIGINFO;
		_thread_sigact[SIGCHLD - 1].sa_flags = SA_SIGINFO;

		/* Get the process signal mask: */
		_thread_sys_sigprocmask(SIG_SETMASK, NULL, &_process_sigmask);

		/* Get the kernel clockrate: */
		mib[0] = CTL_KERN;
		mib[1] = KERN_CLOCKRATE;
		len = sizeof (struct clockinfo);
		if (sysctl(mib, 2, &clockinfo, &len, NULL, 0) == 0)
			_clock_res_usec = clockinfo.tick > CLOCK_RES_USEC_MIN ?
			    clockinfo.tick : CLOCK_RES_USEC_MIN;

		/* Get the table size: */
		if ((_thread_dtablesize = getdtablesize()) < 0) {
			/*
			 * Cannot get the system defined table size, so abort
			 * this process.
			 */
			PANIC("Cannot get dtablesize");
		}
		/* Allocate memory for the file descriptor table: */
		if ((_thread_fd_table = (struct fd_table_entry **) malloc(sizeof(struct fd_table_entry *) * _thread_dtablesize)) == NULL) {
			/* Avoid accesses to file descriptor table on exit: */
			_thread_dtablesize = 0;

			/*
			 * Cannot allocate memory for the file descriptor
			 * table, so abort this process.
			 */
			PANIC("Cannot allocate memory for file descriptor table");
		}
		/* Allocate memory for the pollfd table: */
		if ((_thread_pfd_table = (struct pollfd *) malloc(sizeof(struct pollfd) * _thread_dtablesize)) == NULL) {
			/*
			 * Cannot allocate memory for the file descriptor
			 * table, so abort this process.
			 */
			PANIC("Cannot allocate memory for pollfd table");
		} else {
			/*
			 * Enter a loop to initialise the file descriptor
			 * table:
			 */
			for (i = 0; i < _thread_dtablesize; i++) {
				/* Initialise the file descriptor table: */
				_thread_fd_table[i] = NULL;
			}

			/* Initialize stdio file descriptor table entries: */
			for (i = 0; i < 3; i++) {
				if ((_thread_fd_table_init(i) != 0) &&
				    (errno != EBADF))
					PANIC("Cannot initialize stdio file "
					    "descriptor table entry");
			}
		}
	}

	/* Initialise the garbage collector mutex and condition variable. */
	if (pthread_mutex_init(&_gc_mutex,NULL) != 0 ||
	    pthread_cond_init(&_gc_cond,NULL) != 0)
		PANIC("Failed to initialise garbage collector mutex or condvar");

	_thread_autoinit_dummy_decl = 0;
}
#endif
@


1.25
log
@
Do not try to initialize entries in the fd table before the table
is created.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.24 2002/11/07 03:51:21 marc Exp $	*/
@


1.24
log
@
Add needed table of strong functions that override weak functions
in libc so static linking works with -lpthreads.  There is a
(linker?) problem that still shows up with static -pthread, though.
Solution to problem from freebsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.23 2002/10/30 20:05:12 marc Exp $	*/
a188 9

	/*
	 * initialize the fd table for the stdio files.   This grabs
	 * the file flags before we start messing with them.
	 */
	for (i = 0; i < 3; i++)
		if (_thread_fd_table_init(i) == -1 && errno != EBADF)
			PANIC("Cannot get stdio flags");

@


1.23
log
@
removes duplicate functions and factor out common code so the needed (but
missing) _thread_fd_unlock_owned function can be added with minimal pain.
The incorrect special handling of the stdio fds was also removed.

Tested with the libc_r regression tests and the mysql regression tests.
No complaints from any developers
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.22 2002/10/30 19:11:56 marc Exp $	*/
d39 15
a54 2
#include <stdlib.h>
#include <string.h>
d58 2
d61 1
a61 8
#include <sys/ioctl.h>
#include <sys/param.h>
#include <sys/sysctl.h>
#include <sys/time.h>
#include <sys/ttycom.h>
#include <sys/param.h>
#include <sys/user.h>
#include <sys/mman.h>
d73 71
d161 3
@


1.22
log
@signal handling changes.   This corrects several signal
handling errors in the threads library.   Most of the libc_r regression
tests are now ok.   thread specific kill semantics are still not correct.
No negative comments after posting to tech@@ a week or so ago.
siginfo test fails on sparc64 due to sparc64 oddity.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.21 2002/02/21 20:57:41 fgsch Exp $	*/
d108 4
a111 1
	/* Get the standard I/O flags before messing with them : */
d113 1
a113 3
		if (((_pthread_stdio_flags[i] =
		    _thread_sys_fcntl(i,F_GETFL, NULL)) == -1) &&
		    (errno != EBADF))
d115 1
@


1.21
log
@account for the process signal mask when dealing with signals; tested
a while ago by marc@@ and brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.20 2002/01/17 23:12:09 fgsch Exp $	*/
d225 1
a225 1
		act.sa_flags = 0;
d266 3
@


1.20
log
@when alloc'ing the ready queue, make it big enough.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.19 2001/12/31 18:23:15 fgsch Exp $	*/
d227 3
d266 3
@


1.19
log
@More changes from FreeBSD, including:

o Only poll file descriptors when needed.
o Change the way timing is achieved, counting scheduling ticks
  instead of calculating the elapsed time via gettimeofday().
o Prevent an overflow when polling.
o Use curthread instead of _thread_run.
o Remove extra spaces; indent.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.18 2001/12/11 00:19:47 fgsch Exp $	*/
d144 1
a144 1
	else if (_pq_alloc(&_readyq, PTHREAD_MIN_PRIORITY, PTHREAD_MAX_PRIORITY) != 0) {
@


1.18
log
@More sync with freebsd code; join related code this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.17 2001/12/08 14:51:36 fgsch Exp $	*/
d117 1
a117 1
	 * signals being missed in calls to _select: 
d152 1
a152 1
		 * abort: 
d196 7
d241 1
a241 1
				 * initialisation fails: 
d259 1
a259 1
			 * Abort this process if signal initialisation fails: 
d261 1
a261 1
			PANIC("Cannot initialise signal handler");
d269 2
a270 1
			_clock_res_nsec = clockinfo.tick * 1000;
d276 1
a276 1
			 * this process. 
d287 1
a287 1
			 * table, so abort this process. 
d295 1
a295 1
			 * table, so abort this process. 
d301 1
a301 1
			 * table: 
@


1.17
log
@Partially sync with FreeBSD; mostly pthread_cancel(3) related changes.
make includes is needed in case you want to play.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.16 2001/09/04 22:17:45 fgsch Exp $	*/
d189 2
a190 2
		/* Initialise the queue: */
		TAILQ_INIT(&(_thread_initial->join_queue));
@


1.16
log
@put changes back, this time ALL the files.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.14 2001/08/30 07:40:47 fgsch Exp $	*/
d178 2
a179 2
		_thread_initial->cancelstate = PTHREAD_CANCEL_ENABLE;
		_thread_initial->canceltype = PTHREAD_CANCEL_DEFERRED;
@


1.15
log
@Back out fgsch@@'s tree breaking commits.
Test next time, ok?
@
text
@a59 1
struct timeval	kern_inc_prio_time = { 0, 0 };
d177 4
a209 2
		_thread_initial->cancelstate = PTHREAD_CANCEL_ENABLE;
		_thread_initial->canceltype = PTHREAD_CANCEL_DEFERRED;
d213 1
a213 1
		_thread_run = _thread_initial;
d231 1
a231 1
						       &_thread_sigact[i - 1]) != 0) {
d238 3
a314 2
	gettimeofday(&kern_inc_prio_time, NULL);

a315 2

	return;
@


1.14
log
@fix some const warnings.
more sync with freebsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.13 2001/08/29 18:33:54 fgsch Exp $	*/
d60 1
a177 4
		/* Set the initial cancel state */
		_thread_initial->cancelstate = PTHREAD_CANCEL_ENABLE;
		_thread_initial->canceltype = PTHREAD_CANCEL_DEFERRED;

d207 2
d212 1
a212 1
		_set_curthread(_thread_initial);
d230 1
a230 1
			    &_thread_sigact[i - 1]) != 0) {
a236 3

			/* Initialize the SIG_DFL dummy handler count. */
			_thread_dfl_count[i] = 0;
d311 2
d314 2
@


1.13
log
@More sync with FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.12 2000/02/26 13:30:49 d Exp $	*/
a59 1
struct timeval	kern_inc_prio_time = { 0, 0 };
d177 4
a209 2
		_thread_initial->cancelstate = PTHREAD_CANCEL_ENABLE;
		_thread_initial->canceltype = PTHREAD_CANCEL_DEFERRED;
d213 1
a213 1
		_thread_run = _thread_initial;
d231 1
a231 1
						       &_thread_sigact[i - 1]) != 0) {
d238 3
a314 2
	gettimeofday(&kern_inc_prio_time, NULL);

a315 2

	return;
@


1.12
log
@uninitialised fields
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.11 2000/01/06 07:18:26 d Exp $	*/
d36 3
a59 8
struct pthread	_thread_kern_thread;
struct pthread *volatile _thread_run = &_thread_kern_thread;
struct pthread *volatile _last_user_thread = &_thread_kern_thread;
struct pthread *volatile _thread_single = NULL;
_thread_list_t	_thread_list = TAILQ_HEAD_INITIALIZER(_thread_list);
int		_thread_kern_pipe[2] = { -1, -1 };
volatile int	_queue_signals = 0;
volatile int	_thread_kern_in_sched = 0;
a60 24
_thread_list_t	_dead_list = TAILQ_HEAD_INITIALIZER(_dead_list);
struct pthread *_thread_initial = NULL;
struct pthread_attr pthread_attr_default = { 
                SCHED_RR, 0, TIMESLICE_USEC, PTHREAD_DEFAULT_PRIORITY,
                PTHREAD_CREATE_RUNNING, PTHREAD_CREATE_JOINABLE,
                NULL, NULL, NULL, PTHREAD_STACK_DEFAULT };
struct pthread_mutex_attr pthread_mutexattr_default = { 
		PTHREAD_MUTEX_DEFAULT, PTHREAD_PRIO_NONE, 0, 0 };
struct pthread_cond_attr pthread_condattr_default = { COND_TYPE_FAST, 0 };
int		_pthread_stdio_flags[3];
struct fd_table_entry **_thread_fd_table = NULL;
struct pollfd *_thread_pfd_table = NULL;
const int	dtablecount = 4096/sizeof(struct fd_table_entry);
int		_thread_dtablesize = 0;
int		_clock_res_nsec = CLOCK_RES_NSEC;
pthread_mutex_t	_gc_mutex = NULL;
pthread_cond_t	_gc_cond = NULL;
struct sigaction _thread_sigact[NSIG];
pq_queue_t	_readyq;
_thread_list_t	_waitingq;
_thread_list_t	_workq;
volatile int	_spinblock_count = 0;
volatile int	_sigq_check_reqd = 0;
pthread_switch_routine_t _sched_switch_hook = NULL;
a61 1
int		_thread_kern_new_state = 0;
a64 25
#ifdef GCC_2_8_MADE_THREAD_AWARE
typedef void *** (*dynamic_handler_allocator)();
extern void __set_dynamic_handler_allocator(dynamic_handler_allocator);

static pthread_key_t except_head_key;

typedef struct {
	void **__dynamic_handler_chain;
	void *top_elt[2];
} except_struct;

static void ***dynamic_allocator_handler_fn()
{
	except_struct *dh = (except_struct *)pthread_getspecific(except_head_key);

	if(dh == NULL) {
		dh = (except_struct *)malloc( sizeof(except_struct) );
		memset(dh, '\0', sizeof(except_struct));
		dh->__dynamic_handler_chain= dh->top_elt;
		pthread_setspecific(except_head_key, (void *)dh);
	}
	return &dh->__dynamic_handler_chain;
}
#endif /* GCC_2_8_MADE_THREAD_AWARE */

a304 9

#ifdef GCC_2_8_MADE_THREAD_AWARE
	/* Create the thread-specific data for the exception linked list. */
	if(pthread_key_create(&except_head_key, NULL) != 0)
		PANIC("Failed to create thread specific execption head");

	/* Setup the gcc exception handler per thread. */
	__set_dynamic_handler_allocator( dynamic_allocator_handler_fn );
#endif /* GCC_2_8_MADE_THREAD_AWARE */
@


1.11
log
@volatile
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_init.c,v 1.10 1999/11/25 07:01:37 d Exp $	*/
d255 2
@


1.10
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
d63 2
a64 2
int volatile	_queue_signals = 0;
int		_thread_kern_in_sched = 0;
@


1.9
log
@sync with FreeBSD
@
text
@d33 1
d41 1
d43 2
d48 2
a49 2
#include <sys/ioctl.h>
#include <signal.h>
a52 1
#include <pthread_np.h>
d55 36
a90 48
/* Allocate space for global thread variables here: */

static struct pthread	  kern_thread;
struct pthread * volatile _thread_kern_threadp = &kern_thread;
struct pthread * volatile _thread_run = &kern_thread;
struct pthread * volatile _last_user_thread = &kern_thread;
struct pthread * volatile _thread_single = NULL;
struct pthread * volatile _thread_link_list = NULL;
int             	  _thread_kern_pipe[2] = { -1, -1 };
int             	  _thread_kern_in_select = 0;
int             	  _thread_kern_in_sched = 0;
struct timeval  	  kern_inc_prio_time = { 0, 0 };
struct pthread * volatile _thread_dead = NULL;
struct pthread *	  _thread_initial = NULL;
struct pthread_attr 	  pthread_attr_default = {
	SCHED_RR,			/* sched_policy */
	0,				/* sched_inherit */
	TIMESLICE_USEC,			/* sched_interval */
	PTHREAD_DEFAULT_PRIORITY,	/* prio */
	PTHREAD_CREATE_RUNNING,		/* suspend */
	PTHREAD_CREATE_JOINABLE,	/* flags */
	NULL,				/* arg_attr */
	NULL,				/* cleanup_attr */
	NULL,				/* stackaddr_attr */
	PTHREAD_STACK_DEFAULT		/* stacksize_attr */
};
struct pthread_mutex_attr pthread_mutexattr_default = {
	PTHREAD_MUTEX_DEFAULT,		/* m_type */
	PTHREAD_PRIO_NONE,		/* m_protocol */
	0,				/* m_ceiling */
	0				/* m_flags */
};
struct pthread_cond_attr pthread_condattr_default = {
	COND_TYPE_FAST,			/* c_type */
	0				/* c_flags */
};
int			  _pthread_stdio_flags[3];
struct fd_table_entry **  _thread_fd_table = NULL;
int    			  _thread_dtablesize = NOFILE_MAX;
pthread_mutex_t		  _gc_mutex = NULL;
pthread_cond_t		  _gc_cond = NULL;
struct  sigaction 	  _thread_sigact[NSIG];

const int dtablecount = 4096/sizeof(struct fd_table_entry);
pq_queue_t		  _readyq;
_waitingq_t		  _waitingq;
volatile int		  _waitingq_check_reqd = 0;
pthread_switch_routine_t  _sched_switch_hook = NULL;
a91 1
/* Automatic init module. */
a94 1
/* see src/gnu/usr.bin/gcc/libgcc2.c */
d101 2
a102 2
  void **__dynamic_handler_chain;
  void *top_elt[2];
d128 3
d147 1
a147 1
    		if (setsid() == -1)
d149 1
a149 1
    		if (revoke(_PATH_CONSOLE) != 0)
d151 1
a151 1
    		if ((fd = _thread_sys_open(_PATH_CONSOLE, O_RDWR)) < 0)
d153 1
a153 1
    		if (setlogin("root") == -1)
d155 1
a155 1
    		if (_thread_sys_ioctl(fd,TIOCSCTTY, (char *) NULL) == -1)
d157 3
a159 3
    		if (_thread_sys_dup2(fd,0) == -1 ||
    		    _thread_sys_dup2(fd,1) == -1 ||
    		    _thread_sys_dup2(fd,2) == -1)
d165 3
a167 2
		if ((_pthread_stdio_flags[i] =
		    _thread_sys_fcntl(i,F_GETFL, NULL)) == -1)
d198 2
a199 3
	/* Initialize the ready queue: */
	else if (_pq_init(&_readyq, PTHREAD_MIN_PRIORITY, PTHREAD_MAX_PRIORITY) 
!= 0) {
d212 3
a214 8
		memset(_thread_kern_threadp, 0, sizeof(struct pthread));
		_thread_kern_threadp->magic = PTHREAD_MAGIC;

		/* Set the kernel's name for the debugger: */
		pthread_set_name_np(_thread_kern_threadp, "kern");

		/* The kernel thread is a library thread: */
		_thread_kern_threadp->flags = PTHREAD_FLAGS_PRIVATE;
d216 1
a216 1
		/* Initialize the waiting queue: */
d218 1
d223 2
a224 2
		/* Zero the initial thread: */
		memset(_thread_initial, 0, sizeof(struct pthread));
d241 1
a241 1
		_thread_queue_init(&(_thread_initial->join_queue));
d247 3
d251 4
a254 2
		_thread_initial->sched_defer_count = 0;
		_thread_initial->yield_on_sched_undefer = 0;
a256 3
		_thread_initial->queue = NULL;
		_thread_initial->qnxt = NULL;
		_thread_initial->nxt = NULL;
d261 3
a263 3
		pthread_set_name_np(_thread_initial, "init");
		_SPINUNLOCK(&_thread_initial->lock);
		_thread_link_list = _thread_initial;
d271 3
d282 1
a282 1
			    &_thread_sigact[i - 1]) != 0) {
d305 7
d322 3
d330 8
d347 8
d361 1
a361 1
        	PANIC("Failed to create thread specific execption head");
d374 1
a374 2
	/* Pull in automatic thread unit. */
	_thread_autoinit_dummy_decl = 1;
d378 1
a378 2

#endif _THREAD_SAFE
@


1.8
log
@pthread_cancel() and cancellation points
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
a32 1
 * $OpenBSD: uthread_init.c,v 1.7 1999/01/10 23:11:33 d Exp $
d57 1
d67 3
a69 1
	SCHED_RR,			/* schedparam_policy */
d79 3
a81 1
	MUTEX_TYPE_FAST,		/* m_type */
d95 6
d203 7
a209 1
		PANIC("Cannot make kernel write pipe non-blocking");
d222 2
d226 9
d238 6
d245 3
a247 1
		_thread_initial->pthread_priority = PTHREAD_DEFAULT_PRIORITY;
d255 4
d260 2
a270 1
		_thread_initial->magic = PTHREAD_MAGIC;
d303 3
a305 3
		if (_thread_sys_sigaction(SIGVTALRM, &act, NULL) != 0 ||
		    _thread_sys_sigaction(SIGINFO  , &act, NULL) != 0 ||
		    _thread_sys_sigaction(SIGCHLD  , &act, NULL) != 0) {
d352 2
@


1.7
log
@export symbol to kernel thread for gdb; ident; fix lock initialisation
@
text
@d32 1
a32 1
 * $OpenBSD$
d227 2
@


1.6
log
@rename linkage variable to match freebsd
@
text
@d32 1
d54 3
a56 2
struct pthread		  _thread_kern_thread;
struct pthread * volatile _thread_run = &_thread_kern_thread;
d192 1
a192 1
		PANIC("Cannot get kernel write pipe flags");
d203 3
a205 3
		memset(&_thread_kern_thread, 0, sizeof(struct pthread));
		_thread_kern_thread.magic = PTHREAD_MAGIC;
		pthread_set_name_np(&_thread_kern_thread, "kern");
d229 1
@


1.5
log
@resource stats; force linkage with uthread_autoinit.c; name kern and init threads
@
text
@d48 1
d89 1
a89 1
extern int _thread_autoinit_hook;
d308 1
a308 1
	_thread_autoinit_hook = 1;
@


1.4
log
@split automatic init into own file
@
text
@d87 3
d201 4
d224 2
d306 3
d311 1
@


1.3
log
@sync with freebsd
@
text
@a298 18

/*
 * Use the a.out .init symbol to start the thread package going
 */
extern void __init_threads __P((void)) asm(".init");
void __init_threads() {
	_thread_init();
}

/*
 * Use elf's ld.so _init symbol to start the thread package going
 */
extern int _init __P((void));
int _init() {
	_thread_init();
	return 0;
}

@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d138 1
a138 1
		if (setsid() == -1)
d140 1
a140 1
		if (revoke(_PATH_CONSOLE) != 0)
d142 1
a142 1
		if ((fd = _thread_sys_open(_PATH_CONSOLE, O_RDWR)) < 0)
d144 1
a144 1
		if (setlogin("root") == -1)
d146 1
a146 1
		if (_thread_sys_ioctl(fd,TIOCSCTTY, (char *) NULL) == -1)
d148 3
a150 3
		if (_thread_sys_dup2(fd,0) == -1 ||
		    _thread_sys_dup2(fd,1) == -1 ||
		    _thread_sys_dup2(fd,2) == -1)
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d38 1
d41 1
a41 1
#include <paths.h>
d43 1
d83 2
d119 1
a128 1
#ifdef __FreeBSD__
a133 1
		int		fd;
a152 1
#endif __FreeBSD__
d292 5
a299 1
#if 0
d301 1
a301 1
 * Special start up code for NetBSD/Alpha 
d303 4
a306 2
int 
main(int argc, char *argv[], char *env);
d308 5
a312 3
int
_thread_main(int argc, char *argv[], char *env)
{
d314 1
a314 1
	return (main(argc, argv, env));
a315 1
#endif alpha_special_code
@

