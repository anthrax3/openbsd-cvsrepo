head	1.14;
access;
symbols
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.13;

1.13
date	2002.05.07.05.13.17;	author pvalchev;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.07.23.05.10;	author fgsch;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.07.22.36.03;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.20.07.50.08;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.19.02.02.52;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.11.00.19.47;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.08.14.51.36;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.04.22.17.45;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.30.17.47.57;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.30.07.40.47;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	99.11.25.07.01.32;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.01.17.23.57.27;	author d;	state Exp;
branches;
next	;


desc
@@


1.14
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_cancel.c,v 1.13 2002/05/07 05:13:17 pvalchev Exp $	*/
/*
 * David Leonard <d@@openbsd.org>, 1999. Public domain.
 */
#include <sys/errno.h>
#include <pthread.h>
#include "pthread_private.h"

static void	finish_cancellation(void *arg);

int
pthread_cancel(pthread_t pthread)
{
	int ret;

	if ((ret = _find_thread(pthread)) != 0) {
		/* NOTHING */
	} else if (pthread->state == PS_DEAD || pthread->state == PS_DEADLOCK
	    || (pthread->flags & PTHREAD_EXITING) != 0) {
		ret = 0;
	} else {
		/* Protect the scheduling queues: */
		_thread_kern_sig_defer();

		if (((pthread->cancelflags & PTHREAD_CANCEL_DISABLE) != 0) ||
		    (((pthread->cancelflags & PTHREAD_CANCEL_ASYNCHRONOUS) == 0) &&
		    ((pthread->cancelflags & PTHREAD_AT_CANCEL_POINT) == 0)))
			/* Just mark it for cancellation: */
			pthread->cancelflags |= PTHREAD_CANCELLING;
		else {
			/*
			 * Check if we need to kick it back into the
			 * run queue:
			 */
			switch (pthread->state) {
			case PS_RUNNING:
				/* No need to resume: */
				pthread->cancelflags |= PTHREAD_CANCELLING;
				break;

			case PS_SPINBLOCK:
			case PS_FDR_WAIT:
			case PS_FDW_WAIT:
			case PS_POLL_WAIT:
			case PS_SELECT_WAIT:
				/* Remove these threads from the work queue: */
				if ((pthread->flags & PTHREAD_FLAGS_IN_WORKQ)
				    != 0)
					PTHREAD_WORKQ_REMOVE(pthread);
				/* Fall through: */
			case PS_SIGTHREAD:
			case PS_SLEEP_WAIT:
			case PS_WAIT_WAIT:
			case PS_SIGSUSPEND:
			case PS_SIGWAIT:
				/* Interrupt and resume: */
				pthread->interrupted = 1;
				pthread->cancelflags |= PTHREAD_CANCELLING;
				PTHREAD_NEW_STATE(pthread,PS_RUNNING);
				break;

			case PS_JOIN:
				/*
				 * Disconnect the thread from the joinee:
				 */
				if (pthread->join_status.thread != NULL) {
					pthread->join_status.thread->joiner
					    = NULL;
					pthread->join_status.thread = NULL;
				}
				pthread->cancelflags |= PTHREAD_CANCELLING;
				PTHREAD_NEW_STATE(pthread, PS_RUNNING);
				break;

			case PS_SUSPENDED:
				if (pthread->suspended == SUSP_NO ||
				    pthread->suspended == SUSP_YES ||
				    pthread->suspended == SUSP_JOIN ||
				    pthread->suspended == SUSP_NOWAIT) {
					/*
					 * This thread isn't in any scheduling
					 * queues; just change it's state:
					 */
					pthread->cancelflags |=
					    PTHREAD_CANCELLING;
					PTHREAD_SET_STATE(pthread, PS_RUNNING);
					break;
				}
				/* FALLTHROUGH */
			case PS_MUTEX_WAIT:
			case PS_COND_WAIT:
			case PS_FDLR_WAIT:
			case PS_FDLW_WAIT:
			case PS_FILE_WAIT:
				/*
				 * Threads in these states may be in queues.
				 * In order to preserve queue integrity, the
				 * cancelled thread must remove itself from the
				 * queue.  Mark the thread as interrupted and
				 * needing cancellation, and set the state to
				 * running.  When the thread resumes, it will
				 * remove itself from the queue and call the
				 * cancellation completion routine.
				 */
				pthread->interrupted = 1;
				pthread->cancelflags |= PTHREAD_CANCEL_NEEDED;
				PTHREAD_NEW_STATE(pthread,PS_RUNNING);
				pthread->continuation = finish_cancellation;
				break;

			case PS_DEAD:
			case PS_DEADLOCK:
			case PS_STATE_MAX:
				/* Ignore - only here to silence -Wall: */
				break;
			}
		}

		/* Unprotect the scheduling queues: */
		_thread_kern_sig_undefer();

		ret = 0;
	}
	return (ret);
}

int
pthread_setcancelstate(int state, int *oldstate)
{
	struct pthread	*curthread = _get_curthread();
	int ostate;
	int ret;

	ostate = curthread->cancelflags & PTHREAD_CANCEL_DISABLE;

	switch (state) {
	case PTHREAD_CANCEL_ENABLE:
		if (oldstate != NULL)
			*oldstate = ostate;
		curthread->cancelflags &= ~PTHREAD_CANCEL_DISABLE;
		if ((curthread->cancelflags & PTHREAD_CANCEL_ASYNCHRONOUS) != 0)
			pthread_testcancel();
		ret = 0;
		break;
	case PTHREAD_CANCEL_DISABLE:
		if (oldstate != NULL)
			*oldstate = ostate;
		curthread->cancelflags |= PTHREAD_CANCEL_DISABLE;
		ret = 0;
		break;
	default:
		ret = EINVAL;
	}

	return (ret);
}


int
pthread_setcanceltype(int type, int *oldtype)
{
	struct pthread	*curthread = _get_curthread();
	int otype;
	int ret;

	otype = curthread->cancelflags & PTHREAD_CANCEL_ASYNCHRONOUS;
	switch (type) {
	case PTHREAD_CANCEL_ASYNCHRONOUS:
		if (oldtype != NULL)
			*oldtype = otype;
		curthread->cancelflags |= PTHREAD_CANCEL_ASYNCHRONOUS;
		pthread_testcancel();
		ret = 0;
		break;
	case PTHREAD_CANCEL_DEFERRED:
		if (oldtype != NULL)
			*oldtype = otype;
		curthread->cancelflags &= ~PTHREAD_CANCEL_ASYNCHRONOUS;
		ret = 0;
		break;
	default:
		ret = EINVAL;
	}

	return (ret);
}

void
pthread_testcancel(void)
{
	struct pthread	*curthread = _get_curthread();

	if (((curthread->cancelflags & PTHREAD_CANCEL_DISABLE) == 0) &&
	    ((curthread->cancelflags & PTHREAD_CANCELLING) != 0) &&
	    ((curthread->flags & PTHREAD_EXITING) == 0)) {
		/*
		 * It is possible for this thread to be swapped out
		 * while performing cancellation; do not allow it
		 * to be cancelled again.
		 */
		curthread->cancelflags &= ~PTHREAD_CANCELLING;
#ifdef notyet
		_thread_exit_cleanup();
#endif
		pthread_exit(PTHREAD_CANCELED);
		PANIC("cancel");
	}
}

void
_thread_enter_cancellation_point(void)
{
	struct pthread	*curthread = _get_curthread();

	/* Look for a cancellation before we block: */
	pthread_testcancel();
	curthread->cancelflags |= PTHREAD_AT_CANCEL_POINT;
}

void
_thread_leave_cancellation_point(void)
{
	struct pthread	*curthread = _get_curthread();

	curthread->cancelflags &= ~PTHREAD_AT_CANCEL_POINT;
	/* Look for a cancellation after we unblock: */
	pthread_testcancel();
}

static void
finish_cancellation(void *arg)
{
	struct pthread	*curthread = _get_curthread();

	curthread->continuation = NULL;
	curthread->interrupted = 0;

	if ((curthread->cancelflags & PTHREAD_CANCEL_NEEDED) != 0) {
		curthread->cancelflags &= ~PTHREAD_CANCEL_NEEDED;
#ifdef notyet
		_thread_exit_cleanup();
#endif
		pthread_exit(PTHREAD_CANCELED);
	}
}
@


1.13
log
@Make sure calls to pthread_cancel() do not take effect if the target
thread is already exiting, from archie@@FreeBSD, ok fgs
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.12 2002/03/07 23:05:10 fgsch Exp $	*/
@


1.12
log
@ANSI'fy.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.11 2002/03/07 22:36:03 fgsch Exp $	*/
d18 2
a19 1
	} else if (pthread->state == PS_DEAD || pthread->state == PS_DEADLOCK) {
d194 2
a195 1
	    ((curthread->cancelflags & PTHREAD_CANCELLING) != 0)) {
@


1.11
log
@From FreeBSD:
Properly clear the status of a join operation if the joining thread is
canceled or the joinee is detached.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.10 2001/12/20 07:50:08 fgsch Exp $	*/
d12 1
a12 2
pthread_cancel(pthread)
	pthread_t pthread;
d127 1
a127 3
pthread_setcancelstate(state, oldstate)
	int state;
	int *oldstate;
d159 1
a159 3
pthread_setcanceltype(type, oldtype)
	int type;
	int *oldtype;
d188 1
a188 1
pthread_testcancel()
@


1.10
log
@From FreeBSD:
When cancelling a thread while in a join operation, do not detach
the target thread of the join operation.  This allows the cancelled
thread to detach the target thread in its cancellation handler.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.9 2001/12/19 02:02:52 fgsch Exp $	*/
d69 1
@


1.9
log
@More sync.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.8 2001/12/11 00:19:47 fgsch Exp $	*/
d64 1
a64 2
				 * Disconnect the thread from the joinee and
				 * detach:
d66 3
a68 4
				if (pthread->data.thread != NULL) {
					pthread->data.thread->joiner = NULL;
					pthread_detach((pthread_t)
					    pthread->data.thread);
@


1.8
log
@More sync with freebsd code; join related code this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.7 2001/12/08 14:51:36 fgsch Exp $	*/
a61 11
			case PS_MUTEX_WAIT:
			case PS_COND_WAIT:
			case PS_FDLR_WAIT:
			case PS_FDLW_WAIT:
			case PS_FILE_WAIT:
				pthread->interrupted = 1;
				pthread->cancelflags |= PTHREAD_CANCEL_NEEDED;
				PTHREAD_NEW_STATE(pthread,PS_RUNNING);
				pthread->continuation = finish_cancellation;
				break;

d77 31
a107 2
				/* Simply wake: */
				/* XXX may be incorrect */
d109 1
@


1.7
log
@Partially sync with FreeBSD; mostly pthread_cancel(3) related changes.
make includes is needed in case you want to play.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.6 2001/09/04 22:17:45 fgsch Exp $	*/
a8 1

d46 1
d74 13
d181 5
@


1.6
log
@put changes back, this time ALL the files.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.4 2001/08/30 07:40:47 fgsch Exp $	*/
d9 3
d22 14
a35 7
	} else if ((pthread->flags & PTHREAD_FLAGS_CANCELED) == 0) {
		/* Set the thread's I've-been-cancelled flag: */
		pthread->flags |= PTHREAD_FLAGS_CANCELED;
		/* Check if we need to kick it back into the run queue: */
		if ((pthread->cancelstate == PTHREAD_CANCEL_ENABLE) &&
		    ((pthread->canceltype == PTHREAD_CANCEL_ASYNCHRONOUS) ||
		     (pthread->flags & PTHREAD_FLAGS_CANCELPT)))
d37 6
a42 1
			case PS_WAIT_WAIT:
d45 7
d53 1
a53 2
			case PS_SELECT_WAIT:
			case PS_POLL_WAIT:
d55 1
d58 1
a58 2
				if (pthread->flags & PTHREAD_FLAGS_IN_WORKQ)
					PTHREAD_WORKQ_REMOVE(pthread);
d61 1
a63 1
			case PS_SIGWAIT:
d67 6
a74 1
			case PS_SIGTHREAD:
d79 2
a80 1
			case PS_RUNNING:
d82 2
a83 3
			case PS_SPINBLOCK:
			case PS_DEAD:
				/* Ignore */
d85 1
d87 4
d105 1
a105 1
	ostate = curthread->cancelstate;
d109 1
a109 1
		if (oldstate)
d111 3
a113 3
		curthread->cancelstate = PTHREAD_CANCEL_ENABLE;
		if (curthread->canceltype == PTHREAD_CANCEL_ASYNCHRONOUS)
			_thread_cancellation_point();
d117 1
a117 1
		if (oldstate)
d119 1
a119 1
		curthread->cancelstate = PTHREAD_CANCEL_DISABLE;
d139 1
a139 1
	otype = curthread->canceltype;
d142 1
a142 1
		if (oldtype)
d144 2
a145 2
		curthread->canceltype = PTHREAD_CANCEL_ASYNCHRONOUS;
		_thread_cancellation_point();
d149 1
a149 1
		if (oldtype)
d151 1
a151 1
		curthread->canceltype = PTHREAD_CANCEL_DEFERRED;
d164 1
d166 9
a174 1
	_thread_cancellation_point();
d178 1
a178 1
_thread_enter_cancellation_point()
d183 2
a184 2
	_thread_cancellation_point();
	curthread->flags |= PTHREAD_FLAGS_CANCELPT;
d188 1
a188 1
_thread_leave_cancellation_point()
d192 1
a192 1
	curthread->flags &=~ PTHREAD_FLAGS_CANCELPT;
d194 1
a194 1
	_thread_cancellation_point();
d197 2
a198 6
/*
 * Must only be called when in asynchronous cancel mode, or
 * from pthread_testcancel().
 */
void
_thread_cancellation_point()
d202 8
a209 4
	if ((curthread->cancelstate == PTHREAD_CANCEL_ENABLE) &&
	    ((curthread->flags & (PTHREAD_FLAGS_CANCELED|PTHREAD_EXITING)) ==
		PTHREAD_FLAGS_CANCELED)) {
		curthread->flags &=~ PTHREAD_FLAGS_CANCELED;
a210 1
		PANIC("cancel");
@


1.5
log
@Back out fgsch@@'s tree breaking commits.
Test next time, ok?
@
text
@d15 4
a18 1
	if ((ret = _find_thread(pthread))) {
@


1.4
log
@fix some const warnings.
more sync with freebsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.3 2001/08/21 19:24:53 fgsch Exp $	*/
d15 1
a15 4
	if ((ret = _find_thread(pthread)) != 0) {
		/* NOTHING */
	} else if (pthread->state == PS_DEAD || pthread->state == PS_DEADLOCK) {
		ret = 0;
@


1.3
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cancel.c,v 1.2 1999/11/25 07:01:32 d Exp $	*/
d15 4
a18 1
	if ((ret = _find_thread(pthread))) {
@


1.2
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 1
d71 1
a71 1
	ostate = _thread_run->cancelstate;
d77 2
a78 2
		_thread_run->cancelstate = PTHREAD_CANCEL_ENABLE;
		if (_thread_run->canceltype == PTHREAD_CANCEL_ASYNCHRONOUS)
d85 1
a85 1
		_thread_run->cancelstate = PTHREAD_CANCEL_DISABLE;
d101 1
d105 1
a105 1
	otype = _thread_run->canceltype;
d110 1
a110 1
		_thread_run->canceltype = PTHREAD_CANCEL_ASYNCHRONOUS;
d117 1
a117 1
		_thread_run->canceltype = PTHREAD_CANCEL_DEFERRED;
d137 1
d141 1
a141 1
	_thread_run->flags |= PTHREAD_FLAGS_CANCELPT;
d147 1
d149 1
a149 1
	_thread_run->flags &=~ PTHREAD_FLAGS_CANCELPT;
d161 1
d163 2
a164 2
	if ((_thread_run->cancelstate == PTHREAD_CANCEL_ENABLE) &&
	    ((_thread_run->flags & (PTHREAD_FLAGS_CANCELED|PTHREAD_EXITING)) ==
d166 1
a166 1
		_thread_run->flags &=~ PTHREAD_FLAGS_CANCELED;
@


1.1
log
@pthread_cancel() and cancellation points
@
text
@d1 1
d16 3
a18 5
	} else if (pthread->state == PS_DEAD)
		ret = 0;
	else {
		/* Set the threads's I've-been-cancelled flag: */
		pthread->flags |= PTHREAD_CANCELLING;
d22 1
a22 1
		     (pthread->flags & PTHREAD_AT_CANCEL_POINT)))
a23 3
			case PS_RUNNING:
				/* No need to resume: */
				break;
d29 1
d33 2
d39 1
a42 1
			case PS_SIGWAIT:
d50 3
a53 1
			case PS_STATE_MAX:
d138 1
a138 1
	_thread_run->flags |= PTHREAD_AT_CANCEL_POINT;
d145 1
a145 1
	_thread_run->flags &=~ PTHREAD_AT_CANCEL_POINT;
d159 3
a161 3
	    ((_thread_run->flags & (PTHREAD_CANCELLING|PTHREAD_EXITING)) ==
		PTHREAD_CANCELLING)) {
		_thread_run->flags &=~ PTHREAD_CANCELLING;
@

