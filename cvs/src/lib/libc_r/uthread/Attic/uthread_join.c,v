head	1.11;
access;
symbols
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.10;

1.10
date	2002.01.19.23.49.32;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.19.02.02.52;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.11.00.19.47;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	99.11.25.07.01.37;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.06.09.07.16.17;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.00.18.24;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.17.23.57.27;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.24;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.07;	author d;	state Exp;
branches;
next	;


desc
@@


1.11
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_join.c,v 1.10 2002/01/19 23:49:32 fgsch Exp $	*/
/*
 * Copyright (c) 1995 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_join.c,v 1.9 1999/08/28 00:03:37 peter Exp $
 */
#include <errno.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
pthread_join(pthread_t pthread, void **thread_return)
{
	struct pthread	*curthread = _get_curthread();
	int ret = 0;
	pthread_t thread;

	_thread_enter_cancellation_point();

	/* Check if the caller has specified an invalid thread: */
	if (pthread == NULL || pthread->magic != PTHREAD_MAGIC) {
		/* Invalid thread: */
		_thread_leave_cancellation_point();
		return (EINVAL);
	}

	/* Check if the caller has specified itself: */
	if (pthread == curthread) {
		/* Avoid a deadlock condition: */
		_thread_leave_cancellation_point();
		return (EDEADLK);
	}

	/*
	 * Lock the garbage collector mutex to ensure that the garbage
	 * collector is not using the dead thread list.
	 */
	if (pthread_mutex_lock(&_gc_mutex) != 0)
		PANIC("Cannot lock gc mutex");

	/*
	 * Defer signals to protect the thread list from access
	 * by the signal handler:
	 */
	_thread_kern_sig_defer();

	/*
	 * Unlock the garbage collector mutex, now that the garbage collector
	 * can't be run:
	 */
	if (pthread_mutex_unlock(&_gc_mutex) != 0)
		PANIC("Cannot unlock gc mutex");

	/*
	 * Search for the specified thread in the list of active threads.  This
	 * is done manually here rather than calling _find_thread() because
	 * the searches in _thread_list and _dead_list (as well as setting up
	 * join/detach state) have to be done atomically.
	 */
	TAILQ_FOREACH(thread, &_thread_list, tle) {
		if (thread == pthread)
			break;
	}
	if (thread == NULL) {
		/*
		 * Search for the specified thread in the list of dead threads:
		 */
		TAILQ_FOREACH(thread, &_dead_list, dle) {
			if (thread == pthread)
				break;
		}
	}

	/* Check if the thread was not found or has been detached: */
	if (thread == NULL ||
	    ((pthread->attr.flags & PTHREAD_DETACHED) != 0)) {
		/* Undefer and handle pending signals, yielding if necessary: */
		_thread_kern_sig_undefer();

		/* Return an error: */
		ret = ESRCH;

	} else if (pthread->joiner != NULL) {
		/* Undefer and handle pending signals, yielding if necessary: */
		_thread_kern_sig_undefer();

		/* Multiple joiners are not supported. */
		ret = ENOTSUP;

	/* Check if the thread is not dead: */
	} else if (pthread->state != PS_DEAD) {
		/* Set the running thread to be the joiner: */
		pthread->joiner = curthread;

		/* Keep track of which thread we're joining to: */
		curthread->join_status.thread = pthread;

		while (curthread->join_status.thread == pthread) {
			/* Schedule the next thread: */
			_thread_kern_sched_state(PS_JOIN, __FILE__, __LINE__);
		}

		/*
		 * The thread return value and error are set by the thread we're
		 * joining to when it exits or detaches:
		 */
		ret = curthread->join_status.error;
		if ((ret == 0) && (thread_return != NULL))
			*thread_return = curthread->join_status.ret;
	} else {
		/*
		 * The thread exited (is dead) without being detached, and no
		 * thread has joined it.
		 */

		/* Check if the return value is required: */
		if (thread_return != NULL) {
			/* Return the thread's return value: */
			*thread_return = pthread->ret;
		}

		/* Make the thread collectable by the garbage collector. */
		pthread->attr.flags |= PTHREAD_DETACHED;

		/* Undefer and handle pending signals, yielding if necessary: */
		_thread_kern_sig_undefer();
	}

	_thread_leave_cancellation_point();

	/* Return the completion status: */
	return (ret);
}
#endif
@


1.10
log
@Instead of ifdef around ENOTSUP, move it to pthread_private.h and make
it EOPNOTSUPP.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_join.c,v 1.9 2001/12/19 02:02:52 fgsch Exp $	*/
@


1.9
log
@More sync.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_join.c,v 1.8 2001/12/11 00:19:47 fgsch Exp $	*/
d117 1
a117 1
		ret = EOPNOTSUPP;
@


1.8
log
@More sync with freebsd code; join related code this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_join.c,v 1.7 2001/08/21 19:24:53 fgsch Exp $	*/
a135 1
		ret = curthread->join_status.error;
@


1.7
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_join.c,v 1.6 1999/11/25 07:01:37 d Exp $	*/
d45 1
a46 1
	/* This is a cancellation point: */
d50 1
a50 1
	if (pthread == NULL || pthread->magic != PTHREAD_MAGIC)
d52 3
a54 1
		ret = EINVAL;
d57 1
a57 1
	else if (pthread == curthread)
d59 3
a61 1
		ret = EDEADLK;
d64 2
a65 2
	 * Find the thread in the list of active threads or in the
	 * list of dead threads:
d67 42
a108 2
	else if (_find_thread(pthread) != 0 &&
	    _find_dead_thread(pthread) != 0)
d112 6
a117 4
	/* Check if this thread has been detached: */
	else if ((pthread->attr.flags & PTHREAD_DETACHED) != 0)
		/* Return an error: */
		ret = ESRCH;
d120 10
a129 13
	else if (pthread->state != PS_DEAD) {
		/* Add the running thread to the join queue: */
		TAILQ_INSERT_TAIL(&(pthread->join_queue), curthread, qe);

		/* Schedule the next thread: */
		_thread_kern_sched_state(PS_JOIN, __FILE__, __LINE__);

		/* Check if the thread is not detached: */
		if ((pthread->attr.flags & PTHREAD_DETACHED) == 0) {
			/* Check if the return value is required: */
			if (thread_return)
				/* Return the thread's return value: */
				*thread_return = pthread->ret;
a130 8
		else
			/* Return an error: */
			ret = ESRCH;

	/* Check if the return value is required: */
	} else if (thread_return != NULL)
		/* Return the thread's return value: */
		*thread_return = pthread->ret;
d132 27
a158 1
	/* No longer in a cancellation point: */
@


1.6
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
d55 1
a55 1
	else if (pthread == _thread_run)
d76 1
a76 1
		TAILQ_INSERT_TAIL(&(pthread->join_queue), _thread_run, qe);
@


1.5
log
@document cancellation point handling a bit better
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_join.c,v 1.4 1999/05/26 00:18:24 d Exp $
a43 1
	pthread_t pthread1 = NULL;
d45 1
a45 1
	/* This operation is a cancel point: */
d49 1
a49 1
	if (pthread == NULL || pthread->magic != PTHREAD_MAGIC) {
d51 1
a51 3
		_thread_leave_cancellation_point();
		return(EINVAL);
	}
d54 1
a54 1
	if (pthread == _thread_run) {
d56 1
a56 3
		_thread_leave_cancellation_point();
		return(EDEADLK);
	}
d62 2
a63 5
	if (_find_thread(pthread) == 0 ||
	    _find_dead_thread(pthread) == 0)
		pthread1  = pthread;

	if (pthread1 == NULL)
d75 1
a75 1
		_thread_queue_enq(&(pthread->join_queue), _thread_run);
@


1.4
log
@sync with FreeBSD
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_join.c,v 1.3 1999/01/17 23:57:27 d Exp $
d103 1
a103 1
	/* This operation was a cancel point: */
@


1.3
log
@pthread_cancel() and cancellation points
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_join.c,v 1.2 1999/01/06 05:29:24 d Exp $
d45 1
d103 1
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d45 2
d48 1
a48 1
	if (pthread == NULL || pthread->magic != PTHREAD_MAGIC)
d50 1
d52 1
d55 1
a55 1
	if (pthread == _thread_run)
d57 1
d59 1
d101 2
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

