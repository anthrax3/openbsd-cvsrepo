head	1.9;
access;
symbols
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.8;

1.8
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.11.15.01.57;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.06.07.23.24;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.11.25.07.01.47;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.06.09.07.16.17;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.17.23.57.28;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.23.22.49.47;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.29;	author d;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_write.c,v 1.8 2001/08/21 19:24:53 fgsch Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_write.c,v 1.12 1999/08/28 00:03:54 peter Exp $
 *
 */
#include <sys/types.h>
#include <sys/fcntl.h>
#include <sys/uio.h>
#include <errno.h>
#include <unistd.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

ssize_t
write(int fd, const void *buf, size_t nbytes)
{
	struct pthread	*curthread = _get_curthread();
	int	blocking;
	int	type;
	ssize_t n;
	ssize_t num = 0;
	ssize_t	ret;

	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

	/* POSIX says to do just this: */
	if (nbytes == 0)
		ret = 0;

	/* Lock the file descriptor for write: */
	else if ((ret = _FD_LOCK(fd, FD_WRITE, NULL)) == 0) {
		/* Get the read/write mode type: */
		type = _thread_fd_table[fd]->flags & O_ACCMODE;

		/* Check if the file is not open for write: */
		if (type != O_WRONLY && type != O_RDWR) {
			/* File is not open for write: */
			errno = EBADF;
			ret = -1;
		}

		else {
		/* Check if file operations are to block */
		blocking = ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0);

		/*
		 * Loop while no error occurs and until the expected number
		 * of bytes are written if performing a blocking write:
		 */
		while (ret == 0) {
			/* Perform a non-blocking write syscall: */
			n = _thread_sys_write(fd, (caddr_t)buf + num, 
			    nbytes - num);

			/* Check if one or more bytes were written: */
			if (n > 0)
				/*
				 * Keep a count of the number of bytes
				 * written:
				 */
				num += n;

			/*
			 * If performing a blocking write, check if the
			 * write would have blocked or if some bytes
			 * were written but there are still more to
			 * write:
			 */
			if (blocking && ((n < 0 && (errno == EWOULDBLOCK ||
			    errno == EAGAIN)) || (n >= 0 && num < nbytes))) {
				curthread->data.fd.fd = fd;
				_thread_kern_set_timeout(NULL);

				/* Reset the interrupted operation flag: */
				curthread->interrupted = 0;

				_thread_kern_sched_state(PS_FDW_WAIT,
				    __FILE__, __LINE__);

				/*
				 * Check if the operation was
				 * interrupted by a signal
				 */
				if (curthread->interrupted) {
					/* Return an error: */
					ret = -1;
				}

			/*
			 * If performing a non-blocking write or if an
			 * error occurred, just return whatever the write
			 * syscall did:
			 */
			} else if (!blocking || n < 0) {
				/* A non-blocking call might return zero: */
				ret = n;
				break;

			/* Check if the write has completed: */
			} else if (num >= nbytes)
				/* Return the number of bytes written: */
				ret = num;
		}
		}
		_FD_UNLOCK(fd, FD_WRITE);
	}

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.8
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_write.c,v 1.7 2001/08/11 15:01:57 fgsch Exp $	*/
@


1.7
log
@add missing _thread_enter_cancellation_point() before going further.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_write.c,v 1.6 2000/01/06 07:23:24 d Exp $	*/
d48 1
d103 1
a103 1
				_thread_run->data.fd.fd = fd;
d107 1
a107 1
				_thread_run->interrupted = 0;
d116 1
a116 1
				if (_thread_run->interrupted) {
@


1.6
log
@quieten gcc
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_write.c,v 1.5 1999/11/25 07:01:47 d Exp $	*/
d53 3
@


1.5
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d80 2
a81 1
			n = _thread_sys_write(fd, buf + num, nbytes - num);
@


1.4
log
@document cancellation point handling a bit better
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 2
 * $FreeBSD: uthread_write.c,v 1.10 1998/09/07 21:55:01 alex Exp $
 * $OpenBSD: uthread_write.c,v 1.3 1999/01/17 23:57:28 d Exp $
a53 3
	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

d55 2
a56 5
	if (nbytes == 0) {
		/* No longer in a cancellation point: */
		_thread_leave_cancellation_point();
		return (0);
	}
d59 1
a59 1
	if ((ret = _FD_LOCK(fd, FD_WRITE, NULL)) == 0) {
d67 1
a67 4
			_FD_UNLOCK(fd, FD_WRITE);
			/* No longer in a cancellation point: */
			_thread_leave_cancellation_point();
			return (-1);
d70 1
d131 2
a132 1
		_FD_UNLOCK(fd, FD_RDWR);
@


1.3
log
@pthread_cancel() and cancellation points
@
text
@d33 1
a33 1
 * $OpenBSD: uthread_write.c,v 1.2 1998/12/23 22:49:47 d Exp $
d54 1
d59 1
d74 1
d141 2
d144 1
@


1.2
log
@preserve FreeBSD idents
@
text
@d33 1
a33 1
 * $OpenBSD: uthread_write.c,v 1.1 1998/08/27 09:01:29 d Exp $
d54 2
d57 2
a58 1
	if (nbytes == 0)
d60 1
d72 1
d138 1
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 2
a33 2
 * $Id: uthread_write.c,v 1.9 1998/06/14 09:36:11 jb Exp $
 * $OpenBSD$
@

