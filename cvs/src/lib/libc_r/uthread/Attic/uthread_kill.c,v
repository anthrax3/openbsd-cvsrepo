head	1.9;
access;
symbols
	OPENBSD_3_2:1.7.0.12
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.10
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.8
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.8;

1.8
date	2002.10.30.19.11.56;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	99.11.25.07.01.37;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.05.26.00.18.24;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.01.06.05.29.24;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.12.10.00.40.19;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.11.20.12.13.32;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.20;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.08;	author d;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_kill.c,v 1.8 2002/10/30 19:11:56 marc Exp $	*/
/*
 * Copyright (c) 1997 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_kill.c,v 1.9 1999/08/28 00:03:38 peter Exp $
 */
#include <errno.h>
#include <signal.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

/*
 * XXX THIS IS WRONG! The signal has to either come through the OS to
 * get the proper siginfo, context, etc., or we need to gen up a
 * siginfo (assuming needed).   Signal reset and other semantics
 * also need to be obeyed.
 */
int
pthread_kill(pthread_t pthread, int sig)
{
	int ret;

	/* Check for invalid signal numbers: */
	if (sig < 0 || sig >= NSIG)
		/* Invalid signal: */
		ret = EINVAL;

	/*
	 * Ensure the thread is in the list of active threads, and the
	 * signal is valid (signal 0 specifies error checking only) and
	 * not being ignored:
	 */
	else if (((ret = _find_thread(pthread)) == 0) && (sig > 0) &&
	    (_thread_sigact[sig - 1].sa_handler != SIG_IGN)) {
		/*
		 * Defer signals to protect the scheduling queues from
		 * access by the signal handler:
		 */
		_thread_kern_sig_defer();

		switch (pthread->state) {
		case PS_SIGSUSPEND:
			/*
			 * Only wake up the thread if the signal is unblocked
			 * and there is a handler installed for the signal.
			 */
			if (!sigismember(&pthread->sigmask, sig) &&
			    _thread_sigact[sig - 1].sa_handler != SIG_DFL) {
				/* Change the state of the thread to run: */
				PTHREAD_NEW_STATE(pthread,PS_RUNNING);

				/* Return the signal number: */
				pthread->signo = sig;
			}
			sigaddset(&pthread->sigpend,sig);
			break;

		case PS_SIGWAIT:
			/* Wake up the thread if the signal is blocked. */
			if (sigismember(pthread->data.sigwait, sig)) {
				/* Change the state of the thread to run: */
				PTHREAD_NEW_STATE(pthread,PS_RUNNING);

				/* Return the signal number: */
				pthread->signo = sig;
			} else
				sigaddset(&pthread->sigpend,sig);
			break;

		case PS_FDR_WAIT:
		case PS_FDW_WAIT:
		case PS_POLL_WAIT:
		case PS_SLEEP_WAIT:
		case PS_SELECT_WAIT:
			if (!sigismember(&pthread->sigmask, sig) &&
			    (_thread_sigact[sig - 1].sa_handler != SIG_IGN)) {
				/* Flag the operation as interrupted: */
				pthread->interrupted = 1;

				if (pthread->flags & PTHREAD_FLAGS_IN_WORKQ)
					PTHREAD_WORKQ_REMOVE(pthread);

				/* Change the state of the thread to run: */
				PTHREAD_NEW_STATE(pthread,PS_RUNNING);

				/* Return the signal number: */
				pthread->signo = sig;
			} else {
				sigaddset(&pthread->sigpend,sig);
			}
			break;

		default:
			/* Increment the pending signal count: */
			sigaddset(&pthread->sigpend,sig);
			break;
		}


		/*
		 * Check that a custom handler is installed
		 * and if the signal is not blocked:
		 */
		if (_thread_sigact[sig - 1].sa_handler != SIG_DFL &&
		    _thread_sigact[sig - 1].sa_handler != SIG_IGN &&
		    sigismember(&pthread->sigpend, sig) &&
		    !sigismember(&pthread->sigmask, sig)) {
			pthread_t pthread_saved = _thread_run;

			/* Current thread inside critical region? */
			if (_thread_run->sig_defer_count > 0)
				pthread->sig_defer_count++;

			_thread_run = pthread;

			/* Clear the pending signal: */
			sigdelset(&pthread->sigpend, sig);

			/*
			 * Dispatch the signal via the custom signal
			 * handler: ;;; what about SA_SIGINFO???
			 */
			(*(_thread_sigact[sig - 1].sa_handler))(sig);

			_thread_run = pthread_saved;

			if (_thread_run->sig_defer_count > 0)
				pthread->sig_defer_count--;
		}

		/*
		 * Undefer and handle pending signals, yielding if
		 * necessary:
		 */
		_thread_kern_sig_undefer();
	}

	/* Return the completion status: */
	return (ret);
}
#endif
@


1.8
log
@signal handling changes.   This corrects several signal
handling errors in the threads library.   Most of the libc_r regression
tests are now ok.   thread specific kill semantics are still not correct.
No negative comments after posting to tech@@ a week or so ago.
siginfo test fails on sparc64 due to sparc64 oddity.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_kill.c,v 1.7 1999/11/25 07:01:37 d Exp $	*/
@


1.7
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 6
a83 1
			/* Increment the pending signal count: */
a95 1
				/* Increment the pending signal count. */
a117 1
				/* Increment the pending signal count: */
d150 1
a150 1
			 * handler:
@


1.6
log
@sync with FreeBSD
@
text
@d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
d51 7
a57 6
	/* Ignored signals get dropped on the floor. */
	else if (_thread_sigact[sig - 1].sa_handler == SIG_IGN)
		ret = 0;

	/* Find the thread in the list of active threads: */
	else if ((ret = _find_thread(pthread)) == 0) {
d59 2
a60 3
		 * Guard against preemption by a scheduling signal.
		 * A change of thread state modifies the waiting
		 * and priority queues.
d62 1
a62 1
		_thread_kern_sched_defer();
a94 1
		case PS_SELECT_WAIT:
d97 1
d99 1
d105 3
d125 32
d158 2
a159 2
		 * Reenable preemption and yield if a scheduling signal
		 * occurred while in the critical region.
d161 1
a161 1
		_thread_kern_sched_undefer();
@


1.5
log
@ident
@
text
@d1 1
a32 1
 * $OpenBSD$
d56 7
d119 6
@


1.4
log
@sync with FreeBSD
@
text
@d32 1
@


1.3
log
@sync with freebsd
@
text
@d94 1
a94 1
 
d97 1
a97 1
 
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d86 20
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d49 4
d55 30
a84 4
		if ((pthread->state == PS_SIGWAIT) &&
		    sigismember(&pthread->sigmask, sig)) {
			/* Change the state of the thread to run: */
			PTHREAD_NEW_STATE(pthread,PS_RUNNING);
d86 1
a86 3
			/* Return the signal number: */
			pthread->signo = sig;
		} else
d89 2
@

