head	1.6;
access;
symbols
	OPENBSD_3_2:1.5.0.12
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.5;

1.5
date	99.11.25.07.01.43;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.05.26.00.18.25;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.17.23.57.16;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.26;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.19;	author d;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_setprio.c,v 1.5 1999/11/25 07:01:43 d Exp $	*/
/*
 * Copyright (c) 1995 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_setprio.c,v 1.6 1999/08/28 00:03:47 peter Exp $
 */
#include <errno.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
pthread_setprio(pthread_t pthread, int prio)
{
	int ret, policy;
	struct sched_param param;

	if ((ret = pthread_getschedparam(pthread, &policy, &param)) == 0) {
		param.sched_priority = prio;
		ret = pthread_setschedparam(pthread, policy, &param);
	}

	/* Return the error status: */
	return (ret);
}
#endif
@


1.5
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@sync with FreeBSD
@
text
@d33 1
@


1.3
log
@pthread_getschedparam() and pthread_setschedparam() stubs
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
a32 1
 * $OpenBSD: uthread_setprio.c,v 1.2 1999/01/06 05:29:26 d Exp $
a36 1
#include <sched.h>
d42 2
a43 1
	int ret;
d45 4
a48 9
	/* Check if the priority is invalid: */
	if (prio < PTHREAD_MIN_PRIORITY || prio > PTHREAD_MAX_PRIORITY)
		/* Return an invalid argument error: */
		ret = EINVAL;

	/* Find the thread in the list of active threads: */
	else if ((ret = _find_thread(pthread)) == 0)
		/* Set the thread priority: */
		pthread->pthread_priority = prio;
a51 30
}

int
pthread_getschedparam(thread, policy, param)
	pthread_t thread;
	int *policy;
	struct sched_param *param;
{
	int ret = 0;
	
	if ((ret = _find_thread(thread)) == 0) {
		if (policy)
			*policy = SCHED_RR;
		if (param) 
			param->sched_priority = thread->pthread_priority;
	}
	return (ret);
}

int
pthread_setschedparam(thread, policy, param)
	pthread_t thread;
	int policy;
	const struct sched_param *param;
{

	if (policy == SCHED_RR)
		return pthread_setprio(thread, param->sched_priority);
	else
		return (EINVAL);
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d37 1
d57 30
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

