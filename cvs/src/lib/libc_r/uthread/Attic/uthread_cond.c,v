head	1.14;
access;
symbols
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.13;

1.13
date	2002.06.04.00.09.07;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.20.07.33.14;	author fgsch;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.08.14.51.36;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.06.07.14.47;	author d;	state Exp;
branches;
next	1.8;

1.8
date	99.11.25.07.01.33;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.06.09.07.06.54;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.05.26.00.18.23;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.01.17.23.57.27;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.01.06.05.29.22;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.11.20.12.13.32;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.18;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.57;	author d;	state Exp;
branches;
next	;


desc
@@


1.14
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_cond.c,v 1.13 2002/06/04 00:09:07 deraadt Exp $	*/
/*
 * Copyright (c) 1995 John Birrell <jb@@cimlogic.com.au>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_cond.c,v 1.18 1999/08/30 00:02:07 deischen Exp $
 */
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

/*
 * Prototypes
 */
static inline pthread_t	cond_queue_deq(pthread_cond_t);
static inline void	cond_queue_remove(pthread_cond_t, pthread_t);
static inline void	cond_queue_enq(pthread_cond_t, pthread_t);

/* Reinitialize a condition variable to defaults. */
int
_cond_reinit(pthread_cond_t *cond)
{
	int ret = 0;

	if (cond == NULL)
		ret = EINVAL;
	else if (*cond == NULL)
		ret = pthread_cond_init(cond, NULL);
	else {
		/*
		 * Initialize the condition variable structure:
		 */
		TAILQ_INIT(&(*cond)->c_queue);
		(*cond)->c_flags = COND_FLAGS_INITED;
		(*cond)->c_type = COND_TYPE_FAST;
		(*cond)->c_mutex = NULL;
		(*cond)->c_seqno = 0;
		_SPINLOCK_INIT(&(*cond)->lock);
	}
	return (ret);
}

int
pthread_cond_init(pthread_cond_t * cond, const pthread_condattr_t * cond_attr)
{
	enum pthread_cond_type type;
	pthread_cond_t	pcond;
	int             rval = 0;

	if (cond == NULL)
		rval = EINVAL;
	else {
		/*
		 * Check if a pointer to a condition variable attribute
		 * structure was passed by the caller: 
		 */
		if (cond_attr != NULL && *cond_attr != NULL) {
			/* Default to a fast condition variable: */
			type = (*cond_attr)->c_type;
		} else {
			/* Default to a fast condition variable: */
			type = COND_TYPE_FAST;
		}

		/* Process according to condition variable type: */
		switch (type) {
		/* Fast condition variable: */
		case COND_TYPE_FAST:
			/* Nothing to do here. */
			break;

		/* Trap invalid condition variable types: */
		default:
			/* Return an invalid argument error: */
			rval = EINVAL;
			break;
		}

		/* Check for no errors: */
		if (rval == 0) {
			if ((pcond = (pthread_cond_t)
			    malloc(sizeof(struct pthread_cond))) == NULL) {
				rval = ENOMEM;
			} else {
				/*
				 * Initialise the condition variable
				 * structure:
				 */
				TAILQ_INIT(&pcond->c_queue);
				pcond->c_flags |= COND_FLAGS_INITED;
				pcond->c_type = type;
				pcond->c_mutex = NULL;
				pcond->c_seqno = 0;
				_SPINLOCK_INIT(&pcond->lock);
				*cond = pcond;
			}
		}
	}
	/* Return the completion status: */
	return (rval);
}

int
pthread_cond_destroy(pthread_cond_t * cond)
{
	int             rval = 0;

	if (cond == NULL || *cond == NULL)
		rval = EINVAL;
	else {
		/* Lock the condition variable structure: */
		_SPINLOCK(&(*cond)->lock);

		/*
		 * Free the memory allocated for the condition
		 * variable structure:
		 */
		free(*cond);

		/*
		 * NULL the caller's pointer now that the condition
		 * variable has been destroyed:
		 */
		*cond = NULL;
	}
	/* Return the completion status: */
	return (rval);
}

int
pthread_cond_wait(pthread_cond_t * cond, pthread_mutex_t * mutex)
{
	struct pthread	*curthread = _get_curthread();
	int	rval = 0;
	int	done = 0;
	int	interrupted = 0;
	int	seqno;

	_thread_enter_cancellation_point();

	if (cond == NULL) {
		_thread_leave_cancellation_point();
		return (EINVAL);
	}

	/*
	 * If the condition variable is statically initialized,
	 * perform the dynamic initialization:
	 */
	if (*cond == NULL &&
	    (rval = pthread_cond_init(cond, NULL)) != 0) {
		_thread_leave_cancellation_point();
		return (rval);
	}

	/*
	 * Enter a loop waiting for a condition signal or broadcast
	 * to wake up this thread.  A loop is needed in case the waiting
	 * thread is interrupted by a signal to execute a signal handler.
	 * It is not (currently) possible to remain in the waiting queue
	 * while running a handler.  Instead, the thread is interrupted
	 * and backed out of the waiting queue prior to executing the
	 * signal handler.
	 */
	do {
		/* Lock the condition variable structure: */
		_SPINLOCK(&(*cond)->lock);

		/*
		 * If the condvar was statically allocated, properly
		 * initialize the tail queue.
		 */
		if (((*cond)->c_flags & COND_FLAGS_INITED) == 0) {
			TAILQ_INIT(&(*cond)->c_queue);
			(*cond)->c_flags |= COND_FLAGS_INITED;
		}

		/* Process according to condition variable type: */
		switch ((*cond)->c_type) {
		/* Fast condition variable: */
		case COND_TYPE_FAST:
			if ((mutex == NULL) || (((*cond)->c_mutex != NULL) &&
			    ((*cond)->c_mutex != *mutex))) {
				/* Unlock the condition variable structure: */
				_SPINUNLOCK(&(*cond)->lock);

				/* Return invalid argument error: */
				rval = EINVAL;
			} else {
				/* Reset the timeout and interrupted flags: */
				curthread->timeout = 0;
				curthread->interrupted = 0;

				/*
				 * Queue the running thread for the condition
				 * variable:
				 */
				cond_queue_enq(*cond, curthread);

				/* Remember the mutex and sequence number: */
				(*cond)->c_mutex = *mutex;
				seqno = (*cond)->c_seqno;

				/* Wait forever: */
				curthread->wakeup_time.tv_sec = -1;

				/* Unlock the mutex: */
				if ((rval = _mutex_cv_unlock(mutex)) != 0) {
					/*
					 * Cannot unlock the mutex, so remove
					 * the running thread from the condition
					 * variable queue:
					 */
					cond_queue_remove(*cond, curthread);

					/* Check for no more waiters: */
					if (TAILQ_FIRST(&(*cond)->c_queue) ==
					    NULL)
						(*cond)->c_mutex = NULL;

					/* Unlock the condition variable structure: */
					_SPINUNLOCK(&(*cond)->lock);
				} else {
					/*
					 * Schedule the next thread and unlock
					 * the condition variable structure:
					 */
					_thread_kern_sched_state_unlock(PS_COND_WAIT,
				    	    &(*cond)->lock, __FILE__, __LINE__);

					done = (seqno != (*cond)->c_seqno);

					interrupted = curthread->interrupted;

					/*
					 * Check if the wait was interrupted
					 * (canceled) or needs to be resumed
					 * after handling a signal.
					 */
					if (interrupted != 0) {
						/*
						 * Lock the mutex and ignore any
						 * errors.  Note that even
						 * though this thread may have
						 * been canceled, POSIX requires
						 * that the mutex be reacquired
						 * prior to cancellation.
						 */
						(void)_mutex_cv_lock(mutex);
					} else {
						/*
						 * Lock the condition variable
						 * while removing the thread.
						 */
						_SPINLOCK(&(*cond)->lock);

						cond_queue_remove(*cond,
						    curthread);

						/* Check for no more waiters: */
						if (TAILQ_FIRST(&(*cond)->c_queue) == NULL)
							(*cond)->c_mutex = NULL;

						_SPINUNLOCK(&(*cond)->lock);

						/* Lock the mutex: */
						rval = _mutex_cv_lock(mutex);
					}
				}
			}
			break;

		/* Trap invalid condition variable types: */
		default:
			/* Unlock the condition variable structure: */
			_SPINUNLOCK(&(*cond)->lock);

			/* Return an invalid argument error: */
			rval = EINVAL;
			break;
		}

		if ((interrupted != 0) && (curthread->continuation != NULL))
			curthread->continuation((void *) curthread);
	} while ((done == 0) && (rval == 0));

	_thread_leave_cancellation_point();

	/* Return the completion status: */
	return (rval);
}

int
pthread_cond_timedwait(pthread_cond_t * cond, pthread_mutex_t * mutex,
		       const struct timespec * abstime)
{
	struct pthread	*curthread = _get_curthread();
	int	rval = 0;
	int	done = 0;
	int	interrupted = 0;
	int	seqno;

	_thread_enter_cancellation_point();

	if (cond == NULL ||
	    abstime == NULL || abstime->tv_sec < 0 || abstime->tv_nsec < 0 ||
	    abstime->tv_nsec >= 1000000000) {
		_thread_leave_cancellation_point();
		return (EINVAL);
	}
	/*
	 * If the condition variable is statically initialized, perform dynamic
	 * initialization.
	 */
	if (*cond == NULL && (rval = pthread_cond_init(cond, NULL)) != 0) {
		_thread_leave_cancellation_point();
		return (rval);
	}

	/*
	 * Enter a loop waiting for a condition signal or broadcast
	 * to wake up this thread.  A loop is needed in case the waiting
	 * thread is interrupted by a signal to execute a signal handler.
	 * It is not (currently) possible to remain in the waiting queue
	 * while running a handler.  Instead, the thread is interrupted
	 * and backed out of the waiting queue prior to executing the
	 * signal handler.
	 */
	do {
		/* Lock the condition variable structure: */
		_SPINLOCK(&(*cond)->lock);

		/*
		 * If the condvar was statically allocated, properly
		 * initialize the tail queue.
		 */
		if (((*cond)->c_flags & COND_FLAGS_INITED) == 0) {
			TAILQ_INIT(&(*cond)->c_queue);
			(*cond)->c_flags |= COND_FLAGS_INITED;
		}

		/* Process according to condition variable type: */
		switch ((*cond)->c_type) {
		/* Fast condition variable: */
		case COND_TYPE_FAST:
			if ((mutex == NULL) || (((*cond)->c_mutex != NULL) &&
			    ((*cond)->c_mutex != *mutex))) {
				/* Return invalid argument error: */
				rval = EINVAL;

				/* Unlock the condition variable structure: */
				_SPINUNLOCK(&(*cond)->lock);
			} else {
				/* Set the wakeup time: */
				curthread->wakeup_time.tv_sec =
				    abstime->tv_sec;
				curthread->wakeup_time.tv_nsec =
				    abstime->tv_nsec;

				/* Reset the timeout and interrupted flags: */
				curthread->timeout = 0;
				curthread->interrupted = 0;

				/*
				 * Queue the running thread for the condition
				 * variable:
				 */
				cond_queue_enq(*cond, curthread);

				/* Remember the mutex and sequence number: */
				(*cond)->c_mutex = *mutex;
				seqno = (*cond)->c_seqno;

				/* Unlock the mutex: */
				if ((rval = _mutex_cv_unlock(mutex)) != 0) {
					/*
					 * Cannot unlock the mutex, so remove
					 * the running thread from the condition
					 * variable queue: 
					 */
					cond_queue_remove(*cond, curthread);

					/* Check for no more waiters: */
					if (TAILQ_FIRST(&(*cond)->c_queue) == NULL)
						(*cond)->c_mutex = NULL;

					/* Unlock the condition variable structure: */
					_SPINUNLOCK(&(*cond)->lock);
				} else {
					/*
					 * Schedule the next thread and unlock
					 * the condition variable structure:
					 */
					_thread_kern_sched_state_unlock(PS_COND_WAIT,
				  	     &(*cond)->lock, __FILE__, __LINE__);

					done = (seqno != (*cond)->c_seqno);

					interrupted = curthread->interrupted;

					/*
					 * Check if the wait was interrupted
					 * (canceled) or needs to be resumed
					 * after handling a signal.
					 */
					if (interrupted != 0) {
						/*
						 * Lock the mutex and ignore any
						 * errors.  Note that even
						 * though this thread may have
						 * been canceled, POSIX requires
						 * that the mutex be reacquired
						 * prior to cancellation.
						 */
						(void)_mutex_cv_lock(mutex);
					} else {
						/*
						 * Lock the condition variable
						 * while removing the thread.
						 */
						_SPINLOCK(&(*cond)->lock);

						cond_queue_remove(*cond,
						    curthread);

						/* Check for no more waiters: */
						if (TAILQ_FIRST(&(*cond)->c_queue) == NULL)
							(*cond)->c_mutex = NULL;

						_SPINUNLOCK(&(*cond)->lock);

						/* Lock the mutex: */
						rval = _mutex_cv_lock(mutex);

						/*
						 * Return ETIMEDOUT if the wait
						 * timed out and there wasn't an
						 * error locking the mutex:
						 */
						if ((curthread->timeout != 0)
						    && rval == 0)
							rval = ETIMEDOUT;

					}
				}
			}
			break;

		/* Trap invalid condition variable types: */
		default:
			/* Unlock the condition variable structure: */
			_SPINUNLOCK(&(*cond)->lock);

			/* Return an invalid argument error: */
			rval = EINVAL;
			break;
		}

		if ((interrupted != 0) && (curthread->continuation != NULL))
			curthread->continuation((void *) curthread);
	} while ((done == 0) && (rval == 0));

	_thread_leave_cancellation_point();

	/* Return the completion status: */
	return (rval);
}

int
pthread_cond_signal(pthread_cond_t * cond)
{
	int             rval = 0;
	pthread_t       pthread;

	if (cond == NULL)
		rval = EINVAL;
	/*
	 * If the condition variable is statically initialized, perform dynamic
	 * initialization.
	 */
	else if (*cond != NULL || (rval = pthread_cond_init(cond, NULL)) == 0) {
		/*
		 * Defer signals to protect the scheduling queues
		 * from access by the signal handler:
		 */
		_thread_kern_sig_defer();

		/* Lock the condition variable structure: */
		_SPINLOCK(&(*cond)->lock);

		/* Process according to condition variable type: */
		switch ((*cond)->c_type) {
		/* Fast condition variable: */
		case COND_TYPE_FAST:
			/* Increment the sequence number: */
			(*cond)->c_seqno++;

			if ((pthread = cond_queue_deq(*cond)) != NULL) {
				/*
				 * Unless the thread is currently suspended,
				 * allow it to run.  If the thread is suspended,
				 * make a note that the thread isn't in a wait
				 * queue any more.
			 	 */
				if (pthread->state != PS_SUSPENDED)
					PTHREAD_NEW_STATE(pthread,PS_RUNNING);
				else
					pthread->suspended = SUSP_NOWAIT;
			}

			/* Check for no more waiters: */
			if (TAILQ_FIRST(&(*cond)->c_queue) == NULL)
				(*cond)->c_mutex = NULL;
			break;

		/* Trap invalid condition variable types: */
		default:
			/* Return an invalid argument error: */
			rval = EINVAL;
			break;
		}

		/* Unlock the condition variable structure: */
		_SPINUNLOCK(&(*cond)->lock);

		/*
		 * Undefer and handle pending signals, yielding if
		 * necessary:
		 */
		_thread_kern_sig_undefer();
	}

	/* Return the completion status: */
	return (rval);
}

int
pthread_cond_broadcast(pthread_cond_t * cond)
{
	int             rval = 0;
	pthread_t       pthread;

	if (cond == NULL)
		rval = EINVAL;
	/*
	 * If the condition variable is statically initialized, perform dynamic
	 * initialization.
	 */
	else if (*cond != NULL || (rval = pthread_cond_init(cond, NULL)) == 0) {
		/*
		 * Defer signals to protect the scheduling queues
		 * from access by the signal handler:
		 */
		_thread_kern_sig_defer();

		/* Lock the condition variable structure: */
		_SPINLOCK(&(*cond)->lock);

		/* Process according to condition variable type: */
		switch ((*cond)->c_type) {
		/* Fast condition variable: */
		case COND_TYPE_FAST:
			/* Increment the sequence number: */
			(*cond)->c_seqno++;

			/*
			 * Enter a loop to bring all threads off the
			 * condition queue:
			 */
			while ((pthread = cond_queue_deq(*cond)) != NULL) {
				/*
				 * Unless the thread is currently suspended,
				 * allow it to run.  If the thread is suspended,
				 * make a note that the thread isn't in a wait
				 * queue any more.
				 */
				if (pthread->state != PS_SUSPENDED)
					PTHREAD_NEW_STATE(pthread,PS_RUNNING);
				else
					pthread->suspended = SUSP_NOWAIT;
			}

			/* There are no more waiting threads: */
			(*cond)->c_mutex = NULL;
			break;
	
		/* Trap invalid condition variable types: */
		default:
			/* Return an invalid argument error: */
			rval = EINVAL;
			break;
		}

		/* Unlock the condition variable structure: */
		_SPINUNLOCK(&(*cond)->lock);

		/*
		 * Undefer and handle pending signals, yielding if
		 * necessary:
		 */
		_thread_kern_sig_undefer();
	}

	/* Return the completion status: */
	return (rval);
}

/*
 * Dequeue a waiting thread from the head of a condition queue in
 * descending priority order.
 */
static inline pthread_t
cond_queue_deq(pthread_cond_t cond)
{
	pthread_t pthread;

	while ((pthread = TAILQ_FIRST(&cond->c_queue)) != NULL) {
		TAILQ_REMOVE(&cond->c_queue, pthread, sqe);
		pthread->flags &= ~PTHREAD_FLAGS_IN_CONDQ;
		if ((pthread->timeout == 0) && (pthread->interrupted == 0))
			/*
			 * Only exit the loop when we find a thread
			 * that hasn't timed out or been canceled;
			 * those threads are already running and don't
			 * need their run state changed.
			 */
			break;
	}

	return(pthread);
}

/*
 * Remove a waiting thread from a condition queue in descending priority
 * order.
 */
static inline void
cond_queue_remove(pthread_cond_t cond, pthread_t pthread)
{
	/*
	 * Because pthread_cond_timedwait() can timeout as well
	 * as be signaled by another thread, it is necessary to
	 * guard against removing the thread from the queue if
	 * it isn't in the queue.
	 */
	if (pthread->flags & PTHREAD_FLAGS_IN_CONDQ) {
		TAILQ_REMOVE(&cond->c_queue, pthread, sqe);
		pthread->flags &= ~PTHREAD_FLAGS_IN_CONDQ;
	}
}

/*
 * Enqueue a waiting thread to a condition queue in descending priority
 * order.
 */
static inline void
cond_queue_enq(pthread_cond_t cond, pthread_t pthread)
{
	pthread_t tid = TAILQ_LAST(&cond->c_queue, cond_head);

	PTHREAD_ASSERT_NOT_IN_SYNCQ(pthread);

	/*
	 * For the common case of all threads having equal priority,
	 * we perform a quick check against the priority of the thread
	 * at the tail of the queue.
	 */
	if ((tid == NULL) || (pthread->active_priority <= tid->active_priority))
		TAILQ_INSERT_TAIL(&cond->c_queue, pthread, sqe);
	else {
		tid = TAILQ_FIRST(&cond->c_queue);
		while (pthread->active_priority <= tid->active_priority)
			tid = TAILQ_NEXT(tid, sqe);
		TAILQ_INSERT_BEFORE(tid, pthread, sqe);
	}
	pthread->flags |= PTHREAD_FLAGS_IN_CONDQ;
	pthread->data.cond = cond;
}
#endif
@


1.13
log
@spelling; raj@@cerias.purdue.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cond.c,v 1.12 2001/12/20 07:33:14 fgsch Exp $	*/
@


1.12
log
@sync with freebsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cond.c,v 1.11 2001/12/08 14:51:36 fgsch Exp $	*/
d276 1
a276 1
						 * that the mutex be reaquired
d442 1
a442 1
						 * that the mutex be reaquired
@


1.11
log
@Partially sync with FreeBSD; mostly pthread_cancel(3) related changes.
make includes is needed in case you want to play.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cond.c,v 1.10 2001/08/21 19:24:53 fgsch Exp $	*/
d51 1
a51 1
_cond_reinit(pthread_cond_t * cond)
d67 1
d123 1
d165 1
d167 1
a168 1
	/* This is a cancellation point: */
d171 4
a174 2
	if (cond == NULL)
		rval = EINVAL;
d180 16
a195 2
	else if (*cond != NULL ||
	    (rval = pthread_cond_init(cond,NULL)) == 0) {
d220 1
a220 1
				/* Reset the timeout flag: */
d222 1
d230 1
a230 1
				/* Remember the mutex that is being used: */
d232 1
d253 1
a253 2
				}
				else {
d261 38
a298 2
					/* Lock the mutex: */
					rval = _mutex_cv_lock(mutex);
d315 1
a315 1
	}
a316 1
	/* No longer in a cancellation point: */
d329 1
d331 1
a332 1
	/* This is a cancellation point: */
d335 14
a348 6
	if (cond == NULL || abstime == NULL)
		rval = EINVAL;

	else if (abstime->tv_sec < 0 || 
		abstime->tv_nsec < 0 || abstime->tv_nsec >= 1000000000)
		rval = EINVAL;
d351 7
a357 2
	 * If the condition variable is statically initialized,
	 * perform the dynamic initialization:
d359 1
a359 2
	else if (*cond != NULL ||
	    (rval = pthread_cond_init(cond,NULL)) == 0) {
d390 1
a390 1
				/* Reset the timeout flag: */
d392 1
d400 1
a400 1
				/* Remember the mutex that is being used: */
d402 1
d427 3
a429 8
					/* Check if the wait timedout: */
					if (curthread->timeout == 0) {
						/* Lock the mutex: */
						rval = _mutex_cv_lock(mutex);
					}
					else {
						/* Lock the condition variable structure: */
						_SPINLOCK(&(*cond)->lock);
d431 16
d448 2
a449 3
						 * The wait timed out; remove
						 * the thread from the condition
					 	 * variable queue:
d451 2
a459 1
						/* Unock the condition variable structure: */
d462 2
a463 2
						/* Return a timeout error: */
						rval = ETIMEDOUT;
d466 3
a468 2
						 * Lock the mutex and ignore
						 * any errors:
d470 4
a473 1
						(void)_mutex_cv_lock(mutex);
d491 1
a491 1
	}
a492 1
	/* No longer in a cancellation point: */
d505 1
a505 1
	if (cond == NULL || *cond == NULL)
d507 5
a511 1
	else {
d525 14
a538 7
			/*
			 * Enter a loop to dequeue threads from the condition
			 * queue until we find one that hasn't previously
			 * timed out.
			 */
			while (((pthread = cond_queue_deq(*cond)) != NULL) &&
			    (pthread->timeout != 0)) {
a540 4
			if (pthread != NULL)
				/* Allow the thread to run: */
				PTHREAD_NEW_STATE(pthread,PS_RUNNING);

d573 1
a573 1
	if (cond == NULL || *cond == NULL)
d575 5
a579 1
	else {
d593 3
d602 4
a605 2
				 * The thread is already running if the
				 * timeout flag is set.
d607 1
a607 1
				if (pthread->timeout == 0)
d609 2
d647 2
a648 2
	if ((pthread = TAILQ_FIRST(&cond->c_queue)) != NULL) {
		TAILQ_REMOVE(&cond->c_queue, pthread, qe);
d650 8
d677 1
a677 1
		TAILQ_REMOVE(&cond->c_queue, pthread, qe);
d691 2
d699 1
a699 1
		TAILQ_INSERT_TAIL(&cond->c_queue, pthread, qe);
d703 2
a704 2
			tid = TAILQ_NEXT(tid, qe);
		TAILQ_INSERT_BEFORE(tid, pthread, qe);
d707 1
@


1.10
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cond.c,v 1.9 2000/01/06 07:14:47 d Exp $	*/
d162 2
a163 1
	int             rval = 0;
d256 3
d273 2
a274 1
	int             rval = 0;
d404 2
@


1.9
log
@_SPINLOCK_INIT, unused vars
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cond.c,v 1.8 1999/11/25 07:01:33 d Exp $	*/
d161 1
d201 1
a201 1
				_thread_run->timeout = 0;
d207 1
a207 1
				cond_queue_enq(*cond, _thread_run);
d213 1
a213 1
				_thread_run->wakeup_time.tv_sec = -1;
d222 1
a222 1
					cond_queue_remove(*cond, _thread_run);
d268 1
d312 1
a312 1
				_thread_run->wakeup_time.tv_sec =
d314 1
a314 1
				_thread_run->wakeup_time.tv_nsec =
d318 1
a318 1
				_thread_run->timeout = 0;
d324 1
a324 1
				cond_queue_enq(*cond, _thread_run);
d336 1
a336 1
					cond_queue_remove(*cond, _thread_run);
d353 1
a353 1
					if (_thread_run->timeout == 0) {
d367 1
a367 1
						    _thread_run);
@


1.8
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 1
a67 1
		memset(&(*cond)->lock, 0, sizeof((*cond)->lock));
a161 1
	int             status;
a267 1
	int             status;
@


1.7
log
@sync with freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_cond.c,v 1.6 1999/05/26 00:18:23 d Exp $	*/
d33 1
d49 22
d122 1
a122 1
				_SPINUNLOCK(&pcond->lock);
d162 1
d176 3
a187 3
		/* Lock the condition variable structure: */
		_SPINLOCK(&(*cond)->lock);

d269 1
d274 5
a278 1
	if (cond == NULL)
d287 3
a298 4

		/* Lock the condition variable structure: */
		_SPINLOCK(&(*cond)->lock);

d398 1
d417 6
d457 6
d479 2
a480 6
		 * Guard against preemption by a scheduling signal.
		 * A change of thread state modifies the waiting
		 * and priority queues.  In addition, we must assure
		 * that all threads currently waiting on the condition
		 * variable are signaled and are not timedout by a
		 * scheduling signal that causes a preemption.
d482 1
a482 1
		_thread_kern_sched_defer();
d518 3
a520 1
		/* Reenable preemption and yield if necessary.
d522 1
a522 1
		_thread_kern_sched_undefer();
d540 1
a540 1
		pthread->flags &= ~PTHREAD_FLAGS_QUEUED;
d559 1
a559 1
	if (pthread->flags & PTHREAD_FLAGS_QUEUED) {
d561 1
a561 1
		pthread->flags &= ~PTHREAD_FLAGS_QUEUED;
d587 1
a587 1
	pthread->flags |= PTHREAD_FLAGS_QUEUED;
@


1.6
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d140 3
d152 8
a159 2
		/* This is a cancellation point: */
		_thread_enter_cancellation_point();
d231 1
d233 2
a234 3
		/* No longer in a cancellation point: */
		_thread_leave_cancellation_point();
	}
d246 3
d258 9
a266 2
		/* This is a cancellation point: */
		_thread_enter_cancellation_point();
d370 1
d372 2
a373 3
		/* No longer in a cancellation point: */
		_thread_leave_cancellation_point();
	}
@


1.5
log
@pthread_cancel() and cancellation points
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
a32 1
 * $OpenBSD: uthread_cond.c,v 1.4 1999/01/06 05:29:22 d Exp $
d41 8
d95 1
a95 1
				_thread_queue_init(&pcond->c_queue);
d98 1
d149 1
d159 4
a162 2
			/* Wait forever: */
			_thread_run->wakeup_time.tv_sec = -1;
d164 5
a168 6
			/*
			 * Queue the running thread for the condition
			 * variable:
			 */
			_thread_queue_enq(&(*cond)->c_queue, _thread_run);
			_thread_run->data.cond = cond;
a169 2
			/* Unlock the mutex: */
			if ((rval = pthread_mutex_unlock(mutex)) != 0) {
d171 2
a172 3
				 * Cannot unlock the mutex, so remove the
				 * running thread from the condition
				 * variable queue: 
d174 1
a174 1
				_thread_queue_deq(&(*cond)->c_queue);
d176 30
a205 6
				/* Unlock the condition variable structure: */
				_SPINUNLOCK(&(*cond)->lock);
			} else {
				/* Schedule the next thread: */
				_thread_kern_sched_state_unlock(PS_COND_WAIT,
				    &(*cond)->lock, __FILE__, __LINE__);
d207 3
a209 2
				/* Lock the mutex: */
				rval = pthread_mutex_lock(mutex);
d223 1
d246 1
d248 1
d256 4
a259 3
			/* Set the wakeup time: */
			_thread_run->wakeup_time.tv_sec = abstime->tv_sec;
			_thread_run->wakeup_time.tv_nsec = abstime->tv_nsec;
d261 8
a268 2
			/* Reset the timeout flag: */
			_thread_run->timeout = 0;
d270 2
a271 6
			/*
			 * Queue the running thread for the condition
			 * variable:
			 */
			_thread_queue_enq(&(*cond)->c_queue, _thread_run);
			_thread_run->data.cond = cond;
a272 2
			/* Unlock the mutex: */
			if ((rval = pthread_mutex_unlock(mutex)) != 0) {
d274 2
a275 3
				 * Cannot unlock the mutex, so remove the
				 * running thread from the condition
				 * variable queue: 
d277 1
a277 1
				_thread_queue_deq(&(*cond)->c_queue);
d279 2
a280 6
				/* Unlock the condition variable structure: */
				_SPINUNLOCK(&(*cond)->lock);
			} else {
				/* Schedule the next thread: */
				_thread_kern_sched_state_unlock(PS_COND_WAIT,
				    &(*cond)->lock, __FILE__, __LINE__);
d282 56
a337 7
				/* Lock the mutex: */
				if ((rval = pthread_mutex_lock(mutex)) != 0) {
				}
				/* Check if the wait timed out: */
				else if (_thread_run->timeout) {
					/* Return a timeout error: */
					rval = ETIMEDOUT;
d351 2
d376 10
a385 2
			/* Bring the next thread off the condition queue: */
			if ((pthread = _thread_queue_deq(&(*cond)->c_queue)) != NULL) {
d388 4
a391 1
			}
d418 10
d439 7
a445 4
			while ((pthread =
			    _thread_queue_deq(&(*cond)->c_queue)) != NULL) {
				/* Allow the thread to run: */
				PTHREAD_NEW_STATE(pthread,PS_RUNNING);
d447 3
d461 4
d469 61
@


1.4
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d140 2
d190 1
d212 1
d270 1
a270 1

@


1.3
log
@sync with freebsd
@
text
@d32 1
d90 1
a90 1
				memset(&pcond->lock,0,sizeof(pcond->lock));
d155 1
d228 1
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d146 3
d156 7
a162 1
			pthread_mutex_unlock(mutex);
d164 6
a169 2
			/* Wait forever: */
			_thread_run->wakeup_time.tv_sec = -1;
d171 3
a173 12
			/* Unlock the condition variable structure: */
			_SPINUNLOCK(&(*cond)->lock);

			/* Schedule the next thread: */
			_thread_kern_sched_state(PS_COND_WAIT,
			    __FILE__, __LINE__);

			/* Lock the condition variable structure: */
			_SPINLOCK(&(*cond)->lock);

			/* Lock the mutex: */
			rval = pthread_mutex_lock(mutex);
d178 3
a185 2
	/* Unlock the condition variable structure: */
	_SPINUNLOCK(&(*cond)->lock);
d235 1
a235 1
			} else {
d238 1
a238 1

d240 2
a241 5
				_thread_kern_sched_state(PS_COND_WAIT,
				    __FILE__, __LINE__);

				/* Lock the condition variable structure: */
				_SPINLOCK(&(*cond)->lock);
d256 3
a263 2
	/* Unlock the condition variable structure: */
	_SPINUNLOCK(&(*cond)->lock);
@


1.1
log
@experimental threaded libc - kernel only
@
text
@a128 1
	int             status;
a191 1
	int             status;
a270 1
	int             status;
a308 1
	int             status;
@

