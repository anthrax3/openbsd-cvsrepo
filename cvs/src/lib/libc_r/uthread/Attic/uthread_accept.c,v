head	1.8;
access;
symbols
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.7;

1.7
date	2002.11.12.20.12.45;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.30.19.11.56;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.30;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.02.16.16.39.59;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.21;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.50;	author d;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_accept.c,v 1.7 2002/11/12 20:12:45 marc Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_accept.c,v 1.9 1999/08/28 00:03:20 peter Exp $
 */
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
accept(int fd, struct sockaddr * name, socklen_t *namelen)
{
	struct pthread	*curthread = _get_curthread();
	int             ret;

	/* Lock the file descriptor: */
	if ((ret = _FD_LOCK(fd, FD_RDWR, NULL)) == 0) {
		/* Enter a loop to wait for a connection request: */
		while ((ret = _thread_sys_accept(fd, name, namelen)) < 0) {
			/* Check if the socket is to block: */
			if ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0 &&
			    (errno == EWOULDBLOCK || errno == EAGAIN)) {
				/* Save the socket file descriptor: */
				curthread->data.fd.fd = fd;
				curthread->data.fd.fname = __FILE__;
				curthread->data.fd.branch = __LINE__;

				/* Set the timeout: */
				_thread_kern_set_timeout(NULL);
				curthread->interrupted = 0;

				/* Schedule the next thread: */
				_thread_kern_sched_state(PS_FDR_WAIT, __FILE__,
							 __LINE__);

				/* Check if the wait was interrupted: */
				if (curthread->interrupted) {
					/* Return an error status: */
					errno = EINTR;
					ret = -1;
					break;
				}
			} else {
				/*
				 * Another error has occurred, so exit the
				 * loop here: 
				 */
				break;
			}
		}

		/*
		 * If no errors initialize the file descriptor table
		 * for the new socket.   Turn on blocking mode in the
		 * child if it is on in the parent.   This is done
		 * as _thread_fd_table_init *may* have turned the flag on.
		 */
		if (ret != -1) {
			if (_thread_fd_table_init(ret) != 0) {
				/* Quietly close the socket: */
				_thread_sys_close(ret);
				ret = -1;
			} else if ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0)
				_thread_fd_table[ret]->flags &= ~O_NONBLOCK;
		}

		/* Unlock the file descriptor: */
		_FD_UNLOCK(fd, FD_RDWR);
	}
	/* Return the socket file descriptor or -1 on error: */
	return (ret);
}
#endif
@


1.7
log
@get rid of compiler warnings
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.6 2002/10/30 19:11:56 marc Exp $	*/
@


1.6
log
@signal handling changes.   This corrects several signal
handling errors in the threads library.   Most of the libc_r regression
tests are now ok.   thread specific kill semantics are still not correct.
No negative comments after posting to tech@@ a week or so ago.
siginfo test fails on sparc64 due to sparc64 oddity.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.5 2001/08/21 19:24:53 fgsch Exp $	*/
d92 1
a92 1
		if (ret != -1)
d99 1
@


1.5
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_accept.c,v 1.4 1999/11/25 07:01:30 d Exp $	*/
d55 2
a56 1
			if ((_thread_fd_table[fd]->flags & O_NONBLOCK) == 0 && (errno == EWOULDBLOCK || errno == EAGAIN)) {
d67 2
a68 1
				_thread_kern_sched_state(PS_FDR_WAIT, __FILE__, __LINE__);
d86 5
a90 17
		/* Check for errors: */
		if (ret < 0) {
		}
		/* Initialise the file descriptor table for the new socket: */
		else if (_thread_fd_table_init(ret) != 0) {
			/* Quietly close the socket: */
			_thread_sys_close(ret);

			/* Return an error: */
			ret = -1;
		}
		/* 
		 * If the parent socket was blocking, make sure that
		 * the new socket is also set blocking here (as the
		 * call to _thread_fd_table_init() above will always 
		 * set the new socket flags to non-blocking, as that 
		 * will be the inherited state of the new socket.
d92 7
a98 2
		if((ret > 0) && (_thread_fd_table[fd]->flags & O_NONBLOCK) == 0)
			_thread_fd_table[ret]->flags &= ~O_NONBLOCK;
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
d57 3
a59 3
				_thread_run->data.fd.fd = fd;
				_thread_run->data.fd.fname = __FILE__;
				_thread_run->data.fd.branch = __LINE__;
d63 1
a63 1
				_thread_run->interrupted = 0;
d69 1
a69 1
				if (_thread_run->interrupted) {
@


1.3
log
@deal with socklen_t
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_accept.c,v 1.2 1999/01/06 05:29:21 d Exp $
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d44 1
a44 1
accept(int fd, struct sockaddr * name, int *namelen)
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

