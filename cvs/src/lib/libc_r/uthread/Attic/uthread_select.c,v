head	1.7;
access;
symbols
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.6;

1.6
date	2003.01.19.21.22.31;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.42;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.00.18.25;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.06.05.29.26;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.17;	author d;	state Exp;
branches;
next	;


desc
@@


1.7
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_select.c,v 1.6 2003/01/19 21:22:31 marc Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_select.c,v 1.13 1999/08/30 00:02:08 deischen Exp $
 */
#include <unistd.h>
#include <errno.h>
#include <poll.h>
#include <stdlib.h>
#include <string.h>
#include <sys/param.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/fcntl.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int 
select(int numfds, fd_set * readfds, fd_set * writefds,
       fd_set * exceptfds, struct timeval * timeout)
{
	struct pthread	*curthread = _get_curthread();
	struct timespec ts;
	int             i, ret = 0, f_wait = 1;
	int		pfd_index, got_one = 0, fd_count = 0;
	struct pthread_poll_data data;

	/* this is a cancellation point per IEEE Std 1003.1-2001 */
	_thread_enter_cancellation_point();

	if (numfds > _thread_dtablesize) {
		numfds = _thread_dtablesize;
	}
	/* Check if a timeout was specified: */
	if (timeout) {
		if (timeout->tv_sec < 0 ||
			timeout->tv_usec < 0 || timeout->tv_usec >= 1000000) {
			errno = EINVAL;
			ret = -1;
			goto done;
		}

		/* Convert the timeval to a timespec: */
		TIMEVAL_TO_TIMESPEC(timeout, &ts);

		/* Set the wake up time: */
		_thread_kern_set_timeout(&ts);
		if (ts.tv_sec == 0 && ts.tv_nsec == 0)
			f_wait = 0;
	} else {
		/* Wait for ever: */
		_thread_kern_set_timeout(NULL);
	}

	/* Count the number of file descriptors to be polled: */
	if (readfds || writefds || exceptfds) {
		for (i = 0; i < numfds; i++) {
			if ((readfds && FD_ISSET(i, readfds)) ||
			    (exceptfds && FD_ISSET(i, exceptfds)) ||
			    (writefds && FD_ISSET(i, writefds))) {
				fd_count++;
			}
		}
	}

	/*
	 * Allocate memory for poll data if it hasn't already been
	 * allocated or if previously allocated memory is insufficient.
	 */
	if ((curthread->poll_data.fds == NULL) ||
	    (curthread->poll_data.nfds < fd_count)) {
		data.fds = (struct pollfd *) realloc(curthread->poll_data.fds,
		    sizeof(struct pollfd) * MAX(128, fd_count));
		if (data.fds == NULL) {
			errno = ENOMEM;
			ret = -1;
		}
		else {
			/*
			 * Note that the threads poll data always
			 * indicates what is allocated, not what is
			 * currently being polled.
			 */
			curthread->poll_data.fds = data.fds;
			curthread->poll_data.nfds = MAX(128, fd_count);
		}
	}
	if (ret == 0) {
		/* Setup the wait data. */
		data.fds = curthread->poll_data.fds;
		data.nfds = fd_count;

		/*
		 * Setup the array of pollfds.  Optimize this by
		 * running the loop in reverse and stopping when
		 * the number of selected file descriptors is reached.
		 */
		for (i = numfds - 1, pfd_index = fd_count - 1;
		    (i >= 0) && (pfd_index >= 0); i--) {
			data.fds[pfd_index].events = 0;
			if (readfds && FD_ISSET(i, readfds)) {
				data.fds[pfd_index].events = POLLRDNORM;
			}
			if (exceptfds && FD_ISSET(i, exceptfds)) {
				data.fds[pfd_index].events |= POLLRDBAND;
			}
			if (writefds && FD_ISSET(i, writefds)) {
				data.fds[pfd_index].events |= POLLWRNORM;
			}
			if (data.fds[pfd_index].events != 0) {
				/*
				 * Set the file descriptor to be polled and
				 * clear revents in case of a timeout which
				 * leaves fds unchanged:
				 */
				data.fds[pfd_index].fd = i;
				data.fds[pfd_index].revents = 0;
				pfd_index--;
			}
		}
		if (((ret = _thread_sys_poll(data.fds, data.nfds, 0)) == 0) &&
		   (f_wait != 0)) {
			curthread->data.poll_data = &data;
			curthread->interrupted = 0;
			_thread_kern_sched_state(PS_SELECT_WAIT, __FILE__, __LINE__);
			if (curthread->interrupted) {
				errno = EINTR;
				data.nfds = 0;
				ret = -1;
			} else
				ret = data.nfds;
		}
	}

	if (ret >= 0) {
		numfds = 0;
		for (i = 0; i < fd_count; i++) {
			/*
			 * Check the results of the poll and clear
			 * this file descriptor from the fdset if
			 * the requested event wasn't ready.
			 */
			got_one = 0;
			if (readfds != NULL) {
				if (FD_ISSET(data.fds[i].fd, readfds)) {
					if (data.fds[i].revents & (POLLIN |
					    POLLRDNORM))
						got_one = 1;
					else
						FD_CLR(data.fds[i].fd, readfds);
				}
			}
			if (writefds != NULL) {
				if (FD_ISSET(data.fds[i].fd, writefds)) {
					if (data.fds[i].revents & (POLLOUT |
					    POLLWRNORM | POLLWRBAND))
						got_one = 1;
					else
						FD_CLR(data.fds[i].fd,
						    writefds);
				}
			}
			if (exceptfds != NULL) {
				if (FD_ISSET(data.fds[i].fd, exceptfds)) {
					if (data.fds[i].revents & (POLLRDBAND |
					    POLLPRI | POLLHUP | POLLERR |
					    POLLNVAL))
						got_one = 1;
					else
						FD_CLR(data.fds[i].fd,
						    exceptfds);
				}
			}
			if (got_one)
				numfds++;
		}
		ret = numfds;
	}

done:
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.6
log
@
return (func(...)) not needed when the current function and func
are both void.
The select call is a cancellation point per IEEE Std 1003.1-2001.
This should fix a problem espie@@ found in kde.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.5 2001/08/21 19:24:53 fgsch Exp $	*/
@


1.5
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_select.c,v 1.4 1999/11/25 07:01:42 d Exp $	*/
d58 3
d69 2
a70 1
			return (-1);
d209 3
@


1.4
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
d96 3
a98 3
	if ((_thread_run->poll_data.fds == NULL) ||
	    (_thread_run->poll_data.nfds < fd_count)) {
		data.fds = (struct pollfd *) realloc(_thread_run->poll_data.fds,
d110 2
a111 2
			_thread_run->poll_data.fds = data.fds;
			_thread_run->poll_data.nfds = MAX(128, fd_count);
d116 1
a116 1
		data.fds = _thread_run->poll_data.fds;
d149 2
a150 2
			_thread_run->data.poll_data = &data;
			_thread_run->interrupted = 0;
d152 1
a152 1
			if (_thread_run->interrupted) {
@


1.3
log
@sync with FreeBSD
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_select.c,v 1.2 1999/01/06 05:29:26 d Exp $
d37 2
d40 1
d43 1
a51 1
	fd_set          read_locks, write_locks, rdwr_locks;
d53 3
a55 4
	struct timeval  zero_timeout = {0, 0};
	int             i, ret = 0, got_all_locks = 1;
	int		f_wait = 1;
	struct pthread_select_data data;
d62 6
d80 1
a80 5
	FD_ZERO(&read_locks);
	FD_ZERO(&write_locks);
	FD_ZERO(&rdwr_locks);

	/* lock readfds */
d83 4
a86 22
			if ((readfds && (FD_ISSET(i, readfds))) || (exceptfds && FD_ISSET(i, exceptfds))) {
				if (writefds && FD_ISSET(i, writefds)) {
					if ((ret = _FD_LOCK(i, FD_RDWR, NULL)) != 0) {
						got_all_locks = 0;
						break;
					}
					FD_SET(i, &rdwr_locks);
				} else {
					if ((ret = _FD_LOCK(i, FD_READ, NULL)) != 0) {
						got_all_locks = 0;
						break;
					}
					FD_SET(i, &read_locks);
				}
			} else {
				if (writefds && FD_ISSET(i, writefds)) {
					if ((ret = _FD_LOCK(i, FD_WRITE, NULL)) != 0) {
						got_all_locks = 0;
						break;
					}
					FD_SET(i, &write_locks);
				}
d90 59
a148 29
	if (got_all_locks) {
		data.nfds = numfds;
		FD_ZERO(&data.readfds);
		FD_ZERO(&data.writefds);
		FD_ZERO(&data.exceptfds);
		if (readfds != NULL) {
			memcpy(&data.readfds, readfds, sizeof(data.readfds));
		}
		if (writefds != NULL) {
			memcpy(&data.writefds, writefds, sizeof(data.writefds));
		}
		if (exceptfds != NULL) {
			memcpy(&data.exceptfds, exceptfds, sizeof(data.exceptfds));
		}
		if ((ret = _thread_sys_select(data.nfds, &data.readfds, &data.writefds, &data.exceptfds, &zero_timeout)) == 0 && f_wait) {
			data.nfds = numfds;
			FD_ZERO(&data.readfds);
			FD_ZERO(&data.writefds);
			FD_ZERO(&data.exceptfds);
			if (readfds != NULL) {
				memcpy(&data.readfds, readfds, sizeof(data.readfds));
			}
			if (writefds != NULL) {
				memcpy(&data.writefds, writefds, sizeof(data.writefds));
			}
			if (exceptfds != NULL) {
				memcpy(&data.exceptfds, exceptfds, sizeof(data.exceptfds));
			}
			_thread_run->data.select_data = &data;
d153 1
a158 10
	/* clean up the locks */
	for (i = 0; i < numfds; i++)
		if (FD_ISSET(i, &read_locks))
			_FD_UNLOCK(i, FD_READ);
	for (i = 0; i < numfds; i++)
		if (FD_ISSET(i, &rdwr_locks))
			_FD_UNLOCK(i, FD_RDWR);
	for (i = 0; i < numfds; i++)
		if (FD_ISSET(i, &write_locks))
			_FD_UNLOCK(i, FD_WRITE);
d161 15
a175 5
		if (readfds != NULL) {
			for (i = 0; i < numfds; i++) {
				if (FD_ISSET(i, readfds) &&
					!FD_ISSET(i, &data.readfds)) {
					FD_CLR(i, readfds);
d178 8
a185 6
		}
		if (writefds != NULL) {
			for (i = 0; i < numfds; i++) {
				if (FD_ISSET(i, writefds) &&
					!FD_ISSET(i, &data.writefds)) {
					FD_CLR(i, writefds);
d188 9
a196 6
		}
		if (exceptfds != NULL) {
			for (i = 0; i < numfds; i++) {
				if (FD_ISSET(i, exceptfds) &&
					!FD_ISSET(i, &data.exceptfds)) {
					FD_CLR(i, exceptfds);
d199 2
d202 1
@


1.2
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d51 1
d64 2
d117 1
a117 1
		if ((ret = _thread_sys_select(data.nfds, &data.readfds, &data.writefds, &data.exceptfds, &zero_timeout)) == 0) {
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d32 1
@

