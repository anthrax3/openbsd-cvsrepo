head	1.4;
access;
symbols
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.3;

1.3
date	99.11.25.07.01.38;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.06.09.07.16.17;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.01.17.23.43.18;	author d;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*
 * David Leonard <d@@openbsd.org>, 1999. Public Domain.
 *
 * $OpenBSD: uthread_msync.c,v 1.3 1999/11/25 07:01:38 d Exp $
 */

#include <sys/types.h>
#include <sys/mman.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

int
msync(addr, len, flags)
	void *addr;
	size_t len;
	int flags;
{
	int ret;

	/* This is a cancellation point: */
	_thread_enter_cancellation_point();

	ret = _thread_sys_msync(addr, len, flags);

	/* No longer in a cancellation point: */
	_thread_leave_cancellation_point();

	return (ret);
}
#endif
@


1.3
log
@sync with FreeBSD
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_msync.c,v 1.2 1999/06/09 07:16:17 d Exp $
@


1.2
log
@document cancellation point handling a bit better
@
text
@d4 1
a4 1
 * $OpenBSD: uthread_msync.c,v 1.1 1999/01/17 23:43:18 d Exp $
a19 7

	/*
	 * XXX This is quite pointless unless we know how to get the
	 * file descriptor associated with the memory, and lock it for
	 * write. The only real use of this wrapper is to guarantee
	 * a cancellation point, as per the standard. sigh.
	 */
@


1.1
log
@give msync a cancellation point
@
text
@d4 1
a4 1
 * $OpenBSD$
d27 2
d30 1
d32 2
d35 1
@

