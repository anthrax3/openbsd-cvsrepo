head	1.18;
access;
symbols
	OPENBSD_3_2:1.15.0.4
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.12.0.6
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2003.01.20.18.14.07;	author marc;	state dead;
branches;
next	1.17;

1.17
date	2002.11.07.02.56.20;	author marc;	state Exp;
branches;
next	1.16;

1.16
date	2002.10.30.19.11.56;	author marc;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.19.02.02.52;	author fgsch;	state Exp;
branches;
next	1.14;

1.14
date	2001.12.11.00.19.47;	author fgsch;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.21.19.24.53;	author fgsch;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.06.07.16.40;	author d;	state Exp;
branches;
next	1.11;

1.11
date	99.11.30.04.53.24;	author d;	state Exp;
branches;
next	1.10;

1.10
date	99.11.25.07.01.34;	author d;	state Exp;
branches;
next	1.9;

1.9
date	99.06.14.23.23.40;	author d;	state Exp;
branches;
next	1.8;

1.8
date	99.05.26.00.18.23;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.01.06.05.29.23;	author d;	state Exp;
branches;
next	1.6;

1.6
date	98.12.21.07.44.05;	author d;	state Exp;
branches;
next	1.5;

1.5
date	98.12.13.17.51.49;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	98.12.10.00.40.19;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.11.20.11.04.01;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.13.19;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.01.00;	author d;	state Exp;
branches;
next	;


desc
@@


1.18
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@/*	$OpenBSD: uthread_exit.c,v 1.17 2002/11/07 02:56:20 marc Exp $	*/
/*
 * Copyright (c) 1995-1998 John Birrell <jb@@cimlogic.com.au>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by John Birrell.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: uthread_exit.c,v 1.12 1999/08/30 15:45:42 dt Exp $
 */
#include <errno.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <signal.h>
#include <sys/types.h>
#ifdef _THREAD_SAFE
#include <pthread.h>
#include "pthread_private.h"

void
_exit(int status)
{
	int		flags;
	int             i;
	struct itimerval itimer;

	/* Disable the interval timer: */
	itimer.it_interval.tv_sec  = 0;
	itimer.it_interval.tv_usec = 0;
	itimer.it_value.tv_sec     = 0;
	itimer.it_value.tv_usec    = 0;
	setitimer(_ITIMER_SCHED_TIMER, &itimer, NULL);

	/* Close the pthread kernel pipe: */
	_thread_sys_close(_thread_kern_pipe[0]);
	_thread_sys_close(_thread_kern_pipe[1]);

	/*
	 * Enter a loop to set all file descriptors to blocking
	 * if they were not created as non-blocking:
	 */
	for (i = 0; i < _thread_dtablesize; i++) {
		/* Check if this file descriptor is in use: */
		if (_thread_fd_table[i] != NULL &&
			!(_thread_fd_table[i]->flags & O_NONBLOCK)) {
			/* Get the current flags: */
			flags = _thread_sys_fcntl(i, F_GETFL, NULL);
			/* Clear the nonblocking file descriptor flag: */
			_thread_sys_fcntl(i, F_SETFL, flags & ~O_NONBLOCK);
		}
	}

	/* Call the _exit syscall: */
	_thread_sys__exit(status);
}

static void
numlcat(char *s, int l, size_t sz)
{
	char digit[2];

	/* Inefficient. */
	if (l < 0) {
		l = -l;
		strlcat(s, "-", sz);
	}
	if (l >= 10)
		numlcat(s, l / 10, sz);
	digit[0] = "0123456789"[l % 10];
	digit[1] = '\0';
	strlcat(s, digit, sz);
}

void
_thread_exit(const char *fname, int lineno, const char *string)
{
	char            s[256];

	/* Prepare an error message string: */
	s[0] = '\0';
	strlcat(s, "pid ", sizeof s);
	numlcat(s, (int)_thread_sys_getpid(), sizeof s);
	strlcat(s, ": Fatal error '", sizeof s);
	strlcat(s, string, sizeof s);
	strlcat(s, "' at line ", sizeof s);
	numlcat(s, lineno, sizeof s);
	strlcat(s, " in file ", sizeof s);
	strlcat(s, fname, sizeof s);
	strlcat(s, " (errno = ", sizeof s);
	numlcat(s, errno, sizeof s);
	strlcat(s, ")\n", sizeof s);

	/* Write the string to the standard error file descriptor: */
	_thread_sys_write(2, s, strlen(s));

	/* Force this process to exit: */
	/* XXX - Do we want abort to be conditional on _PTHREADS_INVARIANTS? */
#if defined(_PTHREADS_INVARIANTS)
	{
		struct sigaction sa;
		sigset_t s;

		/* Ignore everything except ABORT */
		sigfillset(&s);
		sigdelset(&s, SIGABRT);
		_thread_sys_sigprocmask(SIG_SETMASK, &s, NULL);

		/* Set the abort handler to default (dump core) */
		sa.sa_handler = SIG_DFL;
		sigemptyset(&sa.sa_mask);
		sa.sa_flags = SA_SIGINFO;
		(void)_thread_sys_sigaction(SIGABRT, &sa, NULL);
		(void)_thread_sys_kill(_thread_sys_getpid(), SIGABRT);
		for (;;) ;
	}
#else
	_exit(1);
#endif
}

void
pthread_exit(void *status)
{
	struct pthread	*curthread = _get_curthread();
	pthread_t pthread;

	/* Check if this thread is already in the process of exiting: */
	if ((curthread->flags & PTHREAD_EXITING) != 0) {
		PANIC("Thread has called pthread_exit() from a destructor. POSIX 1003.1 1996 s16.2.5.2 does not allow this!");
	}

	/* Flag this thread as exiting: */
	curthread->flags |= PTHREAD_EXITING;

	/* Save the return value: */
	curthread->ret = status;

	while (curthread->cleanup != NULL) {
		pthread_cleanup_pop(1);
	}
	if (curthread->attr.cleanup_attr != NULL) {
		curthread->attr.cleanup_attr(curthread->attr.arg_attr);
	}
	/* Check if there is thread specific data: */
	if (curthread->specific_data != NULL) {
		/* Run the thread-specific data destructors: */
		_thread_cleanupspecific();
	}

	/*
	 * Lock the garbage collector mutex to ensure that the garbage
	 * collector is not using the dead thread list.
	 */
	if (pthread_mutex_lock(&_gc_mutex) != 0)
		PANIC("Cannot lock gc mutex");

	/* Add this thread to the list of dead threads. */
	TAILQ_INSERT_HEAD(&_dead_list, curthread, dle);

	/*
	 * Signal the garbage collector thread that there is something
	 * to clean up.
	 */
	if (pthread_cond_signal(&_gc_cond) != 0)
		PANIC("Cannot signal gc cond");

	/*
	 * Avoid a race condition where a scheduling signal can occur
	 * causing the garbage collector thread to run.  If this happens,
	 * the current thread can be cleaned out from under us.
	 */
	_thread_kern_sig_defer();

	/* Unlock the garbage collector mutex: */
	if (pthread_mutex_unlock(&_gc_mutex) != 0)
		PANIC("Cannot unlock gc mutex");

	/* Check if there is a thread joining this one: */
	if (curthread->joiner != NULL) {
		pthread = curthread->joiner;
		curthread->joiner = NULL;

		switch (pthread->suspended) {
		case SUSP_JOIN:
			/*
			 * The joining thread is suspended.  Change the
			 * suspension state to make the thread runnable when it
			 * is resumed:
			 */
			pthread->suspended = SUSP_NO;
			break;
		case SUSP_NO:
			/* Make the joining thread runnable: */
			PTHREAD_NEW_STATE(pthread, PS_RUNNING);
			break;
		default:
			PANIC("Unreachable code reached");
		}

		/* Set the return value for the joining thread: */
		pthread->join_status.ret = curthread->ret;
		pthread->join_status.error = 0;
		pthread->join_status.thread = NULL;

		/* Make this thread collectable by the garbage collector. */
		PTHREAD_ASSERT(((curthread->attr.flags & PTHREAD_DETACHED) ==
		    0), "Cannot join a detached thread");
		curthread->attr.flags |= PTHREAD_DETACHED;
	}

	/* Remove this thread from the thread list: */
	TAILQ_REMOVE(&_thread_list, curthread, tle);

	/* This thread will never be re-scheduled. */
	_thread_kern_sched_state(PS_DEAD, __FILE__, __LINE__);

	/* This point should not be reached. */
	PANIC("Dead thread has resumed");
}
#endif
@


1.17
log
@
type func(...) -> type\nfunc(...) for function definitions
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_exit.c,v 1.16 2002/10/30 19:11:56 marc Exp $	*/
@


1.16
log
@signal handling changes.   This corrects several signal
handling errors in the threads library.   Most of the libc_r regression
tests are now ok.   thread specific kill semantics are still not correct.
No negative comments after posting to tech@@ a week or so ago.
siginfo test fails on sparc64 due to sparc64 oddity.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_exit.c,v 1.15 2001/12/19 02:02:52 fgsch Exp $	*/
d45 2
a46 1
void _exit(int status)
@


1.15
log
@More sync.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_exit.c,v 1.14 2001/12/11 00:19:47 fgsch Exp $	*/
d135 1
a135 1
		sa.sa_flags = 0;
@


1.14
log
@More sync with freebsd code; join related code this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_exit.c,v 1.13 2001/08/21 19:24:53 fgsch Exp $	*/
a228 1
#ifdef notyet
a231 1
#endif
@


1.13
log
@Start syncing with FreeBSD:

o Implement _get_curthread() and _set_curthread(). Use it where possible.
o Add missing _thread_[enter|leave]_cancellation_point().
o Add a couple of not yet used vars to pthread_private.h.
o Remove return's from void functions.

This is by no means complete, but instead of doing a big commit, i'll
split it in small ones, minimizing diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_exit.c,v 1.12 2000/01/06 07:16:40 d Exp $	*/
d149 1
a149 1
	pthread_t       pthread;
a164 1

a167 1

a174 20
	 * Defer signals to protect the scheduling queues from access
	 * by the signal handler:
	 */
	_thread_kern_sig_defer();

	/* Check if there are any threads joined to this one: */
	while ((pthread = TAILQ_FIRST(&(curthread->join_queue))) != NULL) {
		/* Remove the thread from the queue: */
		TAILQ_REMOVE(&curthread->join_queue, pthread, qe);

		/* Wake the joined thread and let it detach this thread: */
		PTHREAD_NEW_STATE(pthread,PS_RUNNING);
	}

	/*
	 * Undefer and handle pending signals, yielding if necessary:
	 */
	_thread_kern_sig_undefer();

	/*
a184 14
	 * Defer signals to protect the scheduling queues from access
	 * by the signal handler:
	 */
	_thread_kern_sig_defer();

	/* Remove this thread from the thread list: */
	TAILQ_REMOVE(&_thread_list, curthread, tle);

	/*
	 * Undefer and handle pending signals, yielding if necessary:
	 */
	_thread_kern_sig_undefer();

	/*
d192 3
a194 2
	 * Mark the thread as dead so it will not return if it
	 * gets context switched out when the mutex is unlocked.
d196 1
a196 1
	PTHREAD_SET_STATE(curthread, PS_DEAD);
d200 39
a238 1
		PANIC("Cannot lock gc mutex");
d240 2
a241 2
	/* This this thread will never be re-scheduled. */
	_thread_kern_sched(NULL);
@


1.12
log
@put proc pid in fatal error string; don't call abort() - instead deliver SIGABRT directly (inside #if); unused vars
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_exit.c,v 1.11 1999/11/30 04:53:24 d Exp $	*/
d148 1
d152 1
a152 1
	if ((_thread_run->flags & PTHREAD_EXITING) != 0) {
d157 1
a157 1
	_thread_run->flags |= PTHREAD_EXITING;
d160 1
a160 1
	_thread_run->ret = status;
d162 1
a162 1
	while (_thread_run->cleanup != NULL) {
d166 2
a167 2
	if (_thread_run->attr.cleanup_attr != NULL) {
		_thread_run->attr.cleanup_attr(_thread_run->attr.arg_attr);
d171 1
a171 1
	if (_thread_run->specific_data != NULL) {
d183 1
a183 1
	while ((pthread = TAILQ_FIRST(&(_thread_run->join_queue))) != NULL) {
d185 1
a185 1
		TAILQ_REMOVE(&_thread_run->join_queue, pthread, qe);
d204 1
a204 1
	TAILQ_INSERT_HEAD(&_dead_list, _thread_run, dle);
d213 1
a213 1
	TAILQ_REMOVE(&_thread_list, _thread_run, tle);
d231 1
a231 1
	PTHREAD_SET_STATE(_thread_run, PS_DEAD);
@


1.11
log
@clean up the poll fdsets in the garbage collector, not in exit()
@
text
@d1 1
a1 1
/*	$OpenBSD: uthread_exit.c,v 1.10 1999/11/25 07:01:34 d Exp $	*/
d39 2
d104 4
a107 1
	strlcpy(s, "Fatal error '", sizeof s);
d123 17
a139 1
	abort();
a147 2
	int             sig;
	long            l;
@


1.10
log
@sync with FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a135 6
	/* Free thread-specific poll_data structure, if allocated */
	if (_thread_run->poll_data.fds != NULL) {
		free(_thread_run->poll_data.fds);
		_thread_run->poll_data.fds = NULL;
	}

d149 1
@


1.9
log
@mention the process' pid in the debug message. greatly helps to debug problems when fork()ing
@
text
@d1 1
d24 1
a24 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
d33 1
a33 1
 * $OpenBSD: uthread_exit.c,v 1.8 1999/05/26 00:18:23 d Exp $
a38 2
#include <stdio.h>
#include <stdlib.h>
a78 4
/*
 * Append a small number onto the end of a string.
 * This avoids the need to use sprintf, which is unsafe sometimes.
 */
d80 1
a80 1
numlcat(char *s, int num, size_t size)
d82 1
a82 2
	int i;
	char digit[7];
d84 10
a93 15
	if (num<0) {
		num = -num;
		strlcat(s, "-", size);
	}
	digit[sizeof digit - 1] = '\0';
	for (i = sizeof digit - 2; i >= 0; i--) {
		digit[i] = '0' + (num % 10);
		num /= 10;
		if (num == 0)
			break;
	}
	if (i<0)
		strlcat(s, "inf", size);
	else
		strlcat(s, &digit[i], size);
a109 2
	strlcat(s, ", pid = ", sizeof s);
	numlcat(s, _thread_sys_getpid(), sizeof s);
d115 3
a117 4
	/* Write a dump of the current thread status: */
	_thread_dump_info();

	/* Try to dump a core file: */
d119 3
d127 2
d133 7
a139 3
		char msg[128];
		snprintf(msg,sizeof msg,"Thread %p has called pthread_exit() from a destructor. POSIX 1003.1 1996 s16.2.5.2 does not allow this!",_thread_run);
		PANIC(msg);
d162 2
a163 2
	 * Guard against preemption by a scheduling signal.  A change of
	 * thread state modifies the waiting and priority queues.
d165 1
a165 1
	_thread_kern_sched_defer();
d168 4
a171 1
	while ((pthread = _thread_queue_deq(&(_thread_run->join_queue))) != NULL) {
d177 1
a177 2
	 * Reenable preemption and yield if a scheduling signal
	 * occurred while in the critical region.
d179 1
a179 1
	_thread_kern_sched_undefer();
d189 15
a203 2
	_thread_run->nxt_dead = _thread_dead;
	_thread_dead = _thread_run;
@


1.8
log
@sync with FreeBSD
@
text
@d32 1
a32 1
 * $OpenBSD: uthread_exit.c,v 1.7 1999/01/06 05:29:23 d Exp $
d121 2
@


1.7
log
@ident
@
text
@d32 1
a32 1
 * $OpenBSD$
d55 1
a55 1
	setitimer(ITIMER_VIRTUAL, &itimer, NULL);
d129 2
a130 2
	/* Force this process to exit: */
	_exit(1);
d163 7
d177 6
d200 6
d210 2
a211 2
	/* This thread will never be re-scheduled. */
	_thread_kern_sched_state(PS_DEAD, __FILE__, __LINE__);
@


1.6
log
@dump thread info on PANIC
@
text
@d32 1
@


1.5
log
@this this
@
text
@d125 3
@


1.4
log
@sync with FreeBSD
@
text
@d187 1
a187 1
	/* This this thread will never be re-scheduled. */
@


1.3
log
@fix strcat usage; deraadt
@
text
@d80 2
a81 2
 * avoid using sprintf and append a small integer
 * onto a string.
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@a42 1
void _exit(int) __attribute__((noreturn));
d79 27
d107 1
a107 1
_thread_exit(char *fname, int lineno, char *string)
d112 9
a120 7
	strcpy(s, "Fatal error '");
	strcat(s, string);
	strcat(s, "' at line ? ");
	strcat(s, "in file ");
	strcat(s, fname);
	strcat(s, " (errno = ?");
	strcat(s, ")\n");
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d37 2
d43 1
a103 2
	int             sig;
	long            l;
d109 1
a109 1
		snprintf(msg,"Thread %p has called pthread_exit() from a destructor. POSIX 1003.1 1996 s16.2.5.2 does not allow this!",_thread_run);
d137 6
a142 2
	/* Lock the thread list: */
	_lock_thread_list();
d144 3
a146 32
	/* Check if the running thread is at the head of the linked list: */
	if (_thread_link_list == _thread_run) {
		/* There is no previous thread: */
		_thread_link_list = _thread_run->nxt;
	} else {
		/* Point to the first thread in the list: */
		pthread = _thread_link_list;

		/*
		 * Enter a loop to find the thread in the linked list before
		 * the running thread: 
		 */
		while (pthread != NULL && pthread->nxt != _thread_run) {
			/* Point to the next thread: */
			pthread = pthread->nxt;
		}

		/* Check that a previous thread was found: */
		if (pthread != NULL) {
			/*
			 * Point the previous thread to the one after the
			 * running thread: 
			 */
			pthread->nxt = _thread_run->nxt;
		}
	}

	/* Unlock the thread list: */
	_unlock_thread_list();

	/* Lock the dead thread list: */
	_lock_dead_thread_list();
d149 2
a150 2
	 * This thread will never run again. Add it to the list of dead
	 * threads: 
d152 2
a153 2
	_thread_run->nxt = _thread_dead;
	_thread_dead = _thread_run;
d155 3
a157 2
	/* Unlock the dead thread list: */
	_unlock_dead_thread_list();
d159 1
a159 4
	/*
	 * The running thread is no longer in the thread link list so it will
	 * now die: 
	 */
@

