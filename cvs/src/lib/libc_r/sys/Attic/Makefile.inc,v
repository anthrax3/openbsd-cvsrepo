head	1.10;
access;
symbols
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2003.01.20.18.14.06;	author marc;	state dead;
branches;
next	1.9;

1.9
date	2002.01.17.04.47.14;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.14.23.32.52;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.15.23.50.34;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.04.05.55.35;	author d;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.06.07.11.41;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.11.25.07.01.29;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.06.05.36.18;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.20.11.15.38;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.48;	author d;	state Exp;
branches;
next	;


desc
@@


1.10
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@#	$OpenBSD: Makefile.inc,v 1.9 2002/01/17 04:47:14 fgsch Exp $

.PATH:	 ${LIBC_RSRCDIR}/sys ${LIBC_RSRCDIR}/arch/${MACHINE_ARCH}

SRCS+=	uthread_error.c
SRCS+=	_atomic_lock.c slow_atomic_lock.c

.if exists(${LIBC_RSRCDIR}/arch/${MACHINE_ARCH}/uthread_machdep_asm.S)
SRCS+=	uthread_machdep_asm.S
.endif
.if exists(${LIBC_RSRCDIR}/arch/${MACHINE_ARCH}/uthread_machdep.c)
SRCS+=	uthread_machdep.c
.endif

.if (${LIB} == "c_r") && (${ELF_TOOLCHAIN} == "no")

#
# All syscalls are renamed as _thread_sys_{syscall}.
# This is a list of syscalls that are renamed as _thread_sys_{syscall}
# so that libc_r can provide replacement functions.
#
HIDDEN_SYSCALLS= accept.o bind.o close.o connect.o dup.o dup2.o \
	execve.o fchflags.o fchmod.o fchown.o fcntl.o \
	flock.o fpathconf.o fstat.o fstatfs.o fsync.o getdirentries.o \
	getlogin.o getpeername.o getsockname.o getsockopt.o ioctl.o kevent.o \
	listen.o msync.o nanosleep.o open.o pipe.o poll.o read.o readv.o \
	recvfrom.o recvmsg.o sched_yield.o select.o sendmsg.o sendto.o \
	setsockopt.o shutdown.o sigaction.o sigaltstack.o \
	sigprocmask.o sigsuspend.o \
	socket.o socketpair.o wait4.o write.o writev.o \
	_exit.o

SRCS+= _sys_aliases.c
CLEANFILES += _sys_aliases.c

_sys_aliases.c: ${LIBC_RSRCDIR}/Makefile ${LIBCSRCDIR}/sys/Makefile.inc
	echo '#include <sys/cdefs.h>' > ${.TARGET}
	for fn in ${ASM:R} ${PSEUDO:R} ""; do \
		case $$fn in ${HIDDEN_SYSCALLS:.o=|}"") : stays hidden ;; \
			*) echo "__indr_reference(_thread_sys_$$fn,$$fn);";; \
		esac; \
	done >> ${.TARGET}
.endif
@


1.9
log
@remove duplicated Id tag; spotted by miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2002/01/14 23:32:52 fgsch Exp $
@


1.8
log
@Do not create sys_aliases.c for elf systems; tested at some extent
by art@@ and drahn@@.
@
text
@d1 1
a1 2
#	$Id: Makefile.inc,v 1.7 2001/08/15 23:50:34 fgsch Exp $
#	$OpenBSD: Makefile.inc,v 1.7 2001/08/15 23:50:34 fgsch Exp $
@


1.7
log
@* kevent(2) support; from FreeBSD.
* change _thread_kern_set_timeout() parm to const.
@
text
@d1 2
a2 2
#	$Id: Makefile.inc,v 1.6 2000/10/04 05:55:35 d Exp $
#	$OpenBSD: Makefile.inc,v 1.6 2000/10/04 05:55:35 d Exp $
d16 1
a16 1
.if (${LIB} == "c_r")
a38 6
.if ${MACHINE} == "alpha"
	# This kludge will disappear when we shift to -lpthread
	echo '#define __indr_reference(old,new)' \
		'__asm__(".globl "#new";"#new": jmp $$31,"#old)' > ${.TARGET}

.endif
d40 4
a43 4
	    case $$fn in ${HIDDEN_SYSCALLS:.o=|}"") : stays hidden ;; \
	    		 *) echo "__indr_reference(_thread_sys_$$fn,$$fn);";; \
	     esac; \
	 done >> ${.TARGET}
@


1.6
log
@switch to _machdep_switch() instead of setjmp/longjmp. For some reason this fixes sparc threads.
@
text
@d1 2
a2 2
#	$Id: Makefile.inc,v 1.5 2000/01/06 07:11:41 d Exp $
#	$OpenBSD: Makefile.inc,v 1.5 2000/01/06 07:11:41 d Exp $
d26 3
a28 3
	getlogin.o getpeername.o getsockname.o getsockopt.o ioctl.o listen.o \
	msync.o nanosleep.o open.o pipe.o poll.o read.o readv.o recvfrom.o \
	recvmsg.o sched_yield.o select.o sendmsg.o sendto.o \
@


1.5
log
@use uthread_machdep.S if exists; conditionally build syscall objects for libc_r
@
text
@d1 2
a2 2
#	$Id: Makefile.inc,v 1.4 1999/11/25 07:01:29 d Exp $
#	$OpenBSD: Makefile.inc,v 1.4 1999/11/25 07:01:29 d Exp $
d6 2
a7 1
SRCS+=	uthread_error.c _atomic_lock.c slow_atomic_lock.c
d9 5
a13 2
.if exists(${LIBC_RSRCDIR}/arch/${MACHINE_ARCH}/uthread_machdep.S)
SRCS+=	uthread_machdep.S
@


1.4
log
@sync with FreeBSD
@
text
@d1 2
a2 2
#	$Id: Makefile.inc,v 1.3 1999/01/06 05:36:18 d Exp $
#	$OpenBSD: Makefile.inc,v 1.3 1999/01/06 05:36:18 d Exp $
d4 1
a4 1
.PATH:	 ${.CURDIR}/sys ${.CURDIR}/arch/${MACHINE_ARCH}
d8 22
d32 2
a33 1
_sys_aliases.c: ${.CURDIR}/Makefile ${LIBCSRCDIR}/sys/Makefile.inc
d46 1
a46 1

@


1.3
log
@use indr_reference instead of PASSTHRU
@
text
@d1 2
a2 2
#	$Id: Makefile.inc,v 1.2 1998/11/20 11:15:38 d Exp $
#	$OpenBSD: Makefile.inc,v 1.2 1998/11/20 11:15:38 d Exp $
d6 1
a6 1
SRCS+=	uthread_error.c _atomic_lock.c slow_atomic_lock.c 
d11 8
a18 2
	(echo '#include <sys/cdefs.h>'; \
	 for fn in ${ASM:R} ${PSEUDO:R} ""; do \
d22 1
a22 1
	 done ) > ${.TARGET}
@


1.2
log
@Move atomic_lock code from asm to C with inline asm;
Add m68k, mips and sparc. (needs more careful checking)
Add 'slow_atomic_lock' for crippled archs.
@
text
@d1 2
a2 2
#	$Id: Makefile.inc,v 1.1 1998/08/27 09:00:48 d Exp $
#	$OpenBSD: Makefile.inc,v 1.1 1998/08/27 09:00:48 d Exp $
d6 1
a6 1
SRCS+=	uthread_error.c _atomic_lock.c _sys_aliases.S slow_atomic_lock.c
d8 4
a11 2
_sys_aliases.S: ${.CURDIR}/Makefile ${LIBCSRCDIR}/sys/Makefile.inc
	(echo '#include "SYS.h"'; \
d14 1
a14 1
	    		 *) echo "PASSTHRU($$fn)";; \
a17 1
CLEANFILES += _sys_aliases.S
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d1 2
a2 2
#	$Id: Makefile.inc,v 1.9 1998/04/30 09:04:08 jb Exp $
#	$OpenBSD$
d6 1
a6 1
SRCS+=	uthread_error.c _atomic_lock.S _sys_aliases.S
@

