head	1.7;
access;
symbols
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.6;

1.6
date	2001.07.09.07.04.40;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.03.10.09.23.55;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.57.10;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.10.00.31.39;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.47;	author d;	state Exp;
branches;
next	;


desc
@@


1.7
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_sock_2.c,v 1.6 2001/07/09 07:04:40 deraadt Exp $	*/
/* ==== test_sock_1.c =========================================================
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test pthread_create() and pthread_exit() calls.
 *
 *  1.00 93/08/03 proven
 *      -Started coding this file.
 */

#include <pthread.h>
#include <pthread_np.h>
#include <errno.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <string.h>
#include "test.h"

struct sockaddr_in a_sout;

#define MESSAGE5 "This should be message #5"
#define MESSAGE6 "This should be message #6"

void *
sock_write(arg)
	void *arg;
{
	int fd = *(int *)arg;

	SET_NAME("writer");
	CHECKe(write(fd, MESSAGE5, sizeof(MESSAGE5)));
	return(NULL);
}

static pthread_mutex_t waiter_mutex = PTHREAD_MUTEX_INITIALIZER;

void*
waiter(sig)
{
	int status;
	pid_t pid;

	SET_NAME("waiter");
	CHECKr(pthread_mutex_lock(&waiter_mutex));
	printf("waiting for child\n");
	CHECKe(pid = wait(&status));
	ASSERT(WIFEXITED(status));
	ASSERT(WEXITSTATUS(status) == 0);
	printf("child exited\n");
	CHECKr(pthread_mutex_unlock(&waiter_mutex));
	return (NULL);
}

void *
sock_accept(arg)
	void *arg;
{
	pthread_t thread, wthread;
	struct sockaddr a_sin;
	int a_sin_size, a_fd, fd;
	u_int16_t port;
	char buf[1024];
	pid_t pid;

	port = 3276;
	a_sout.sin_family = AF_INET;
	a_sout.sin_port = htons(port);
	a_sout.sin_addr.s_addr = INADDR_ANY;

	CHECKe(a_fd = socket(AF_INET, SOCK_STREAM, 0));

	while(1) {
		if (bind(a_fd, (struct sockaddr *)&a_sout, sizeof(a_sout))==0)
			break;
		if (errno == EADDRINUSE) { 
			a_sout.sin_port = htons((++port));
			continue;
		}
		DIE(errno, "bind");
	}

	printf("listening on port %d\n", port);

	CHECKe(listen(a_fd, 2));
		
	printf("%d: This should be message #1\n", getpid());

	CHECKr(pthread_mutex_init(&waiter_mutex, NULL));
	CHECKr(pthread_mutex_lock(&waiter_mutex));
	CHECKr(pthread_create(&wthread, NULL, waiter, NULL));

	CHECKe(pid = fork());
	switch(pid) {
	case 0:
		execl("test_sock_2a", "test_sock_2a", "fork okay", (char *)NULL);
		DIE(errno, "execl");
	default:
		break;
	}
	CHECKr(pthread_mutex_unlock(&waiter_mutex));
	pthread_yield();

	a_sin_size = sizeof(a_sin);
	CHECKe(fd = accept(a_fd, &a_sin, &a_sin_size));
	CHECKe(close(fd)); 

	sleep(1);

	printf("%d: This should be message #4\n", getpid());

	a_sin_size = sizeof(a_sin);
	memset(&a_sin, 0, sizeof(a_sin));
	CHECKe(fd = accept(a_fd, &a_sin, &a_sin_size));

	/* Setup a write thread */

	CHECKr(pthread_create(&thread, NULL, sock_write, &fd));
	CHECKe(read(fd, buf, 1024));

	printf("%d: %s\n", getpid(), buf); /* message 6 */

	CHECKe(close(fd));

	if (pthread_mutex_trylock(&waiter_mutex) == EBUSY) {
		sleep(2);
		if (pthread_mutex_trylock(&waiter_mutex) == EBUSY) {
			/* forcibly kill child */
			CHECKe(kill(pid, SIGKILL));
			PANIC("child %d took too long to exit", pid);
		}
	}
	CHECKr(pthread_join(wthread, NULL));

	return(NULL);
}

int
main()
{
	pthread_t thread;

	setbuf(stdout, NULL);
	setbuf(stderr, NULL);

	CHECKr(pthread_create(&thread, NULL, sock_accept, 
	    (void *)0xdeadbeaf));

	CHECKr(pthread_join(thread, NULL));

	SUCCEED;
}
@


1.6
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: test_sock_2.c,v 1.5 2000/01/06 06:58:34 d Exp $	*/
@


1.5
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d99 1
a99 1
		execl("test_sock_2a", "test_sock_2a", "fork okay", NULL);
@


1.4
log
@define and use a SET_NAME macro so that these tests work under other thread implementations
@
text
@d1 1
@


1.3
log
@nice-ify
@
text
@d33 1
a33 1
	pthread_set_name_np(pthread_self(), "writer");
d46 1
a46 1
	pthread_set_name_np(pthread_self(), "waiter");
@


1.2
log
@tests are now useful
@
text
@d11 1
d15 1
d27 3
a29 1
void * sock_write(void* arg)
d33 2
a34 1
	write(fd, MESSAGE5, sizeof(MESSAGE5));
d38 22
a59 1
void * sock_accept(void* arg)
d61 1
a61 1
	pthread_t thread;
d63 2
a64 2
	int a_sin_size, a_fd, fd, tmp;
	short port;
d66 1
d73 1
a73 2
	if ((a_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
		DIE(errno, "sock_accept:socket()");
d75 3
a77 1
	while (bind(a_fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0) {
d82 1
a82 1
		DIE(errno, "sock_accept:bind()");
d85 3
a87 2
	if (listen(a_fd, 2)) 
		DIE(errno, "sock_accept:listen()");
d89 17
d107 3
a109 4
	printf("This should be message #1\n");
	if ((fd = accept(a_fd, &a_sin, &a_sin_size)) < 0) 
		DIE(errno, "Error: sock_accept:accept()");
	close(fd); 
d112 2
d116 1
a116 3
	printf("This should be message #4\n");
	if ((fd = accept(a_fd, &a_sin, &a_sin_size)) < 0)
		DIE(errno, "sock_accept:accept()");
a118 4
	if (pthread_create(&thread, NULL, sock_write, &fd)) 
		DIE(errno, "sock_accept:pthread_create(sock_write)");
	if ((tmp = read(fd, buf, 1024)) <= 0)
		DIE(errno, "Error: sock_accept:read() == %d", tmp);
d120 17
a136 2
	printf("%s\n", buf);
	close(fd);
a143 12
	int ret;

	switch(fork()) {
	case -1:
		DIE(errno, "main:fork()");

	case 0:
		execl("test_sock_2a", "test_sock_2a", "fork okay", NULL);
		DIE(errno, "execl");
	default:
		break;
	}
d148 2
a149 3
	if ((ret = pthread_create(&thread, NULL, sock_accept, 
	    (void *)0xdeadbeaf)))
		DIE(ret, "main:pthread_create(sock_accept)");
d151 1
a151 2
	if ((ret = pthread_join(thread, NULL)))
		DIE(ret, "main:pthread_join()");
d153 1
a153 1
	return (0);
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d18 1
d46 2
a47 4
	if ((a_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		perror("Error: sock_accept:socket()");
		exit(1);
	}
d54 1
a54 2
		perror("Error: sock_accept:bind()");
		exit(1);
d57 2
a58 4
	if (listen(a_fd, 2)) {
		perror("Error: sock_accept:listen()");
		exit(1);
	}
d62 2
a63 4
	if ((fd = accept(a_fd, &a_sin, &a_sin_size)) < 0) {
		perror("Error: sock_accept:accept()");
		exit(1);
	}
d70 2
a71 4
	if ((fd = accept(a_fd, &a_sin, &a_sin_size)) < 0) {
		perror("Error: sock_accept:accept()");
		exit(1);
	}
d74 5
a78 9
	if (pthread_create(&thread, NULL, sock_write, &fd)) {
		perror("Error: sock_accept:pthread_create(sock_write)");
		exit(1);
	}
	if ((tmp = read(fd, buf, 1024)) <= 0) {
		tmp = read(fd, buf, 1024);
		printf("Error: sock_accept:read() == %d %s\n", tmp, strerror(errno));
		exit(1);
	}
d88 1
d92 2
a93 2
		perror("Error: main:fork()");
		break;
d96 1
d104 8
a111 5
	if (pthread_create(&thread, NULL, sock_accept, (void *)0xdeadbeaf)) {
		perror("Error: main:pthread_create(sock_accept)");
		exit(1);
	}
	pthread_exit(NULL);
@

