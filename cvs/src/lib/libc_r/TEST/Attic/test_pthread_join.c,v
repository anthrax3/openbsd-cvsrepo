head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.57.08;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.10.00.31.38;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.46;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_pthread_join.c,v 1.4 2000/01/06 06:58:34 d Exp $	*/
/* ==== test_pthread_join.c =================================================
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test pthread_join(). Run this after test_create()
 *
 *  1.23 94/05/04 proven
 *      -Started coding this file.
 */

#include <pthread.h>
#include <unistd.h>
#include <stdio.h>
#include "test.h"

/* This thread yields so the creator has a live thread to wait on */
void* new_thread_1(void * new_buf)
{
	int i;

	sprintf((char *)new_buf, "New thread %%d stack at %p\n", &i);
	pthread_yield();	/* (ensure parent can wait on live thread) */
	sleep(1);
	return(new_buf);
	PANIC("return");
}

/* This thread doesn't yield so the creator has a dead thread to wait on */
void* new_thread_2(void * new_buf)
{
	int i;

	sprintf((char *)new_buf, "New thread %%d stack at %p\n", &i);
	return(new_buf);
	PANIC("return");
}

int
main()
{
	char buf[256], *status;
	pthread_t thread;
	int debug = 1;
	int i = 0;

	if (debug)
		printf("Original thread stack at %p\n", &i);

	CHECKr(pthread_create(&thread, NULL, new_thread_1, (void *)buf));
	CHECKr(pthread_join(thread, (void **)(&status)));
	if (debug) 
		printf(status, ++i);

	/* Now have the created thread finishing before the join. */
	CHECKr(pthread_create(&thread, NULL, new_thread_2, (void *)buf));
	pthread_yield();
	sleep(1); /* (ensure thread is dead) */
	CHECKr(pthread_join(thread, (void **)(&status)));

	if (debug)
		printf(status, ++i);

	SUCCEED;
}

@


1.4
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@nice-ify
@
text
@d1 1
@


1.2
log
@tests are now useful
@
text
@d11 1
d21 2
a22 1
	pthread_yield();
d24 1
a24 1
	PANIC();
d34 1
a34 1
	PANIC();
d45 2
a46 14
	printf("Original thread stack at %p\n", &i);
	if (pthread_create(&thread, NULL, new_thread_1, (void *)buf) == 0) {
		if (pthread_join(thread, (void **)(&status)) == 0) {
			if (debug) { printf(status, ++i); }
		} else {
			printf("ERROR: Joining with new thread #1.\n");
			printf("FAILED: test_pthread_join\n");
			exit(1);
		} 
	} else {
		printf("ERROR: 	Creating new thread #1\n");
		printf("FAILED: test_pthread_join\n");
		exit(2);
	}
d48 4
d54 9
a62 16
	if (pthread_create(&thread, NULL, new_thread_2, (void *)buf) == 0){
		pthread_yield();
		if (pthread_join(thread, (void **)(&status)) == 0) {
			if (debug) { printf(status, ++i); }
		} else {
			printf("ERROR: Joining with new thread #2.\n");
			printf("FAILED: test_pthread_join\n");
			exit(1);
		} 
	} else {
		printf("ERROR: 	Creating new thread #2\n");
		printf("FAILED: test_pthread_join\n");
		exit(2);
	}
	printf("test_pthread_join PASSED\n");
	return(0);
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d75 1
a75 1
	pthread_exit(NULL);
@

