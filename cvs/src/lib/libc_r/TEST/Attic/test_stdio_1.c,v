head	1.4;
access;
symbols
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.3;

1.3
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.10.22.57.11;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.47;	author d;	state Exp;
branches;
next	;


desc
@@


1.4
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_stdio_1.c,v 1.3 2000/01/06 06:58:34 d Exp $	*/
#include <pthread.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "test.h"

char * base_name = "test_stdio_1.c";
char * dir_name = SRCDIR;
char * fullname;

/* Test fopen()/ftell()/getc() */
void
test_1()
{
	struct stat statbuf;
	FILE * fp;
	int i;

	CHECKe(stat(fullname, &statbuf));

	CHECKn((fp = fopen(fullname, "r")));

	/* Get the entire file */
	while ((i = getc(fp)) != EOF)
		;

	ASSERT(ftell(fp) == statbuf.st_size);

	CHECKe(fclose(fp));
}

/* Test fopen()/fclose() */
void
test_2()
{
	FILE *fp1, *fp2;

	CHECKn(fp1 = fopen(fullname, "r"));
	CHECKe(fclose(fp1));

	CHECKn(fp2 = fopen(fullname, "r"));
	CHECKe(fclose(fp2));

	ASSERT(fp1 == fp2);
}

/* Test sscanf()/sprintf() */
void
test_3(void)
{
	char * str = "10 4.53";
	char buf[64];
	double d;
	int    i;

	ASSERT(sscanf(str, "%d %lf", &i, &d) == 2);

	/* Should have a check */
	sprintf(buf, "%d %2.2f", i, d);
	ASSERT(strcmp(buf, str) == 0);
}

int
main()
{

	CHECKn(fullname = malloc (strlen (dir_name) + strlen (base_name) + 2));
	sprintf (fullname, "%s/%s", dir_name, base_name);

	test_1();
	test_2();
	test_3();

	SUCCEED;
}
@


1.3
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2
log
@nice-ify
@
text
@d1 1
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d14 2
a15 1
int test_1(void)
d18 1
a18 1
    FILE * fp;
d21 3
a23 9
	if (stat(fullname, &statbuf) < OK) {
		printf("ERROR: Couldn't stat %s\n", fullname);
		return(NOTOK);
	}

	if ((fp = fopen(fullname, "r")) == NULL) {
		printf("ERROR: Couldn't open %s\n", fullname);
		return(NOTOK);
	}
d26 4
a29 1
	while ((i = getc(fp)) != EOF);
d31 1
a31 10
	if (ftell(fp) != statbuf.st_size) {
		printf("ERROR: ftell() and stat() don't agree.");
		return(NOTOK);
	}

	if (fclose(fp) < OK) {
		printf("ERROR: fclose() failed.");
		return(NOTOK);
	}
	return(OK);
d35 2
a36 1
int test_2(void)
d40 5
a44 24
	if ((fp1 = fopen(fullname, "r")) == NULL) {
		printf("ERROR: Couldn't fopen %s\n", fullname);
		return(NOTOK);
	}

	if (fclose(fp1) < OK) {
		printf("ERROR: fclose() failed.");
		return(NOTOK);
	}

	if ((fp2 = fopen(fullname, "r")) == NULL) {
		printf("ERROR: Couldn't fopen %s\n", fullname);
		return(NOTOK);
	}

	if (fclose(fp2) < OK) {
		printf("ERROR: fclose() failed.");
		return(NOTOK);
	}

	if (fp1 != fp2) {
		printf("ERROR: FILE table leak.\n");
		return(NOTOK);
	}
d46 1
a46 1
	return(OK);
d50 2
a51 1
int test_3(void)
d53 1
a53 1
    char * str = "10 4.53";
d55 2
a56 2
    double d;
    int    i;
d58 1
a58 4
    if (sscanf(str, "%d %lf", &i, &d) != 2) {
		printf("ERROR: sscanf didn't parse input string correctly\n");
		return(NOTOK);
	}
d62 1
a62 6

	if (strcmp(buf, str)) {
		printf("ERROR: sscanf()/sprintf() didn't parse unparse correctly\n");
		return(NOTOK);
	}
	return(OK);
d69 2
a70 1
	printf("test_stdio_1 START\n");
d72 3
a74 11
	if ((fullname = malloc (strlen (dir_name) + strlen (base_name) + 2)) != NULL) {
		sprintf (fullname, "%s/%s", dir_name, base_name);
	} else {
		perror ("malloc");
		exit(1);
	}

	if (test_1() || test_2() || test_3()) {
		printf("test_stdio_1 FAILED\n");
		exit(1);
	}
d76 1
a76 2
	printf("test_stdio_1 PASSED\n");
	exit(0);
a77 2


@

