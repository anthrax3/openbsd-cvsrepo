head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2000.01.06.06.52.45;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.57.04;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.10.00.31.38;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.45;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_create.c,v 1.4 2000/01/06 06:52:45 d Exp $	*/
/*
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Test pthread_create() and pthread_exit() calls.
 */

#include <pthread.h>
#include <stdio.h>
#include "test.h"

void* new_thread(void* arg)
{
	int i;

	printf("New thread was passed arg address %p\n", arg);
	printf("New thread stack at %p\n", &i);
	return(NULL);
	PANIC("return");
}

int
main()
{
	pthread_t thread;
	int i;

	printf("Original thread stack at %p\n", &i);
	CHECKr(pthread_create(&thread, NULL, new_thread, 
	    (void *)0xdeadbeef));
	CHECKr(pthread_join(thread, NULL));
	SUCCEED;
}
@


1.4
log
@repair comment
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@nice-ify
@
text
@d1 2
a2 1
/* ==== test_create.c ============================================================
d5 1
a5 4
 * Description : Test pthread_create() and pthread_exit() calls.
 *
 *  1.00 93/08/03 proven
 *      -Started coding this file.
@


1.2
log
@tests are now useful
@
text
@d21 1
a21 1
	PANIC();
a28 1
	int ret;
d31 4
a34 6
	if ((ret = pthread_create(&thread, NULL, new_thread, 
	    (void *)0xdeadbeef)))
		DIE(ret, "pthread_create");
	if ((ret = pthread_join(thread, NULL)))
		DIE(ret, "pthread_join");
	return(0);
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d29 1
d32 6
a37 7
	if (pthread_create(&thread, NULL, new_thread, (void *)0xdeadbeef)) {
		printf("Error: creating new thread\n");
	}
	pthread_exit(NULL);
	PANIC();
	return(1);
	PANIC();
@

