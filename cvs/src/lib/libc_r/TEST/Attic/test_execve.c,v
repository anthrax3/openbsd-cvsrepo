head	1.6;
access;
symbols
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.5;

1.5
date	2000.10.04.05.50.58;	author d;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.06.06.53.30;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.57.05;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.21.07.18.22;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.45;	author d;	state Exp;
branches;
next	;


desc
@@


1.6
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_execve.c,v 1.5 2000/10/04 05:50:58 d Exp $	*/
/*
 * Copyright (c) 1994 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Test execve() and dup2() calls.
 */

#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include "test.h"

extern char **environ;
char *argv[] = {
	"/bin/echo",
	"This line should appear after the execve",
	NULL
};

char * should_succeed = "This line should be displayed\n";

int
main()
{
	int fd;

	printf("This is the first message\n");
	if (isatty(STDOUT_FILENO)) {
		char *ttynm;

		CHECKn(ttynm = ttyname(STDOUT_FILENO));
		printf("tty is %s\n", ttynm);
		CHECKe(fd = open(ttynm, O_RDWR));
	} else
		PANIC("stdout is not a tty: this test needs a tty");

	CHECKn(printf("This output is necessary to set the stdout fd to NONBLOCKING\n"));

	/* do a dup2 */
	CHECKe(dup2(fd, STDOUT_FILENO));
	CHECKe(write(STDOUT_FILENO, should_succeed,
	    (size_t)strlen(should_succeed)));
	CHECKe(execve(argv[0], argv, environ));
	DIE(errno, "execve %s", argv[0]);
}
@


1.5
log
@bit of a cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: test_execve.c,v 1.4 2000/01/06 06:53:30 d Exp $	*/
@


1.4
log
@comment
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a22 1
char * should_fail = "Error: This line should NOT be displayed\n";
d30 1
a30 1
	if (isatty(1)) {
d33 1
a33 1
		CHECKn(ttynm = ttyname(1));
d37 1
a37 1
		PANIC("stdout not a tty");
d42 3
a44 2
	CHECKe(dup2(fd, 1));
	CHECKe(write(1, should_succeed, (size_t)strlen(should_succeed)));
@


1.3
log
@nice-ify
@
text
@d1 2
a2 1
/* ==== test_execve.c ============================================================
d5 1
a5 4
 * Description : Test execve() and dup2() calls.
 *
 *  1.00 94/04/29 proven
 *      -Started coding this file.
@


1.2
log
@remove mit pthread hangover
@
text
@a14 1
#include <err.h>
d20 1
a20 1
	"This message should be displayed after the execve system call",
d36 1
a36 1
		ttynm = ttyname(1);
d38 1
a38 2
		if ((fd = open(ttynm, O_RDWR)) < OK)
			err(1, "%s", ttynm);
d40 1
a40 1
		errx(1, "stdout not a tty");
d42 1
a42 1
	printf("This output is necessary to set the stdout fd to NONBLOCKING\n");
d45 4
a48 9
	dup2(fd, 1);
	write(1, should_succeed, (size_t)strlen(should_succeed));
#if i_understood_this
	_thread_sys_write(1, should_fail, strlen(should_fail));
#endif
	if (execve(argv[0], argv, environ) < OK) 
		err(1, "execve");

	PANIC();
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d49 1
d51 1
a51 1

@

