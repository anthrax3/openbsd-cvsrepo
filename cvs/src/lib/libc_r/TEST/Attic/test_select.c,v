head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	99.11.28.12.31.42;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.03.10.09.23.55;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.10.22.57.09;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.46;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_select.c,v 1.4 1999/11/28 12:31:42 d Exp $	*/
/*
 * Rudimentary test of select().
 */

#include <pthread.h>
#include <pthread_np.h>
#include <stdio.h>
#include <sys/fcntl.h>
#include <sys/types.h>
#include <sys/time.h>
#include <errno.h>
#include <unistd.h>
#include "test.h"

#define NLOOPS 10000

int ntouts = 0;

void *
bg_routine(arg)
	void *arg;
{
	char dot = '.';
	int n;

	SET_NAME("bg");

	/* Busy loop, printing dots */
	for (;;) {
		pthread_yield();
		write(STDOUT_FILENO, &dot, sizeof dot);
		pthread_yield();
		n = NLOOPS;
		while (n-- > 0)
			pthread_yield();
	}
}

void *
fg_routine(arg)
	void *arg;
{
	int	flags;
	int	n;
	fd_set	r;
	int	fd = fileno((FILE *) arg);
	int	tty = isatty(fd);
	int	maxfd;
	int	nb;
	char	buf[128];

	SET_NAME("fg");

	/* Set the file descriptor to non-blocking */
	flags = fcntl(fd, F_GETFL);
	CHECKr(fcntl(fd, F_SETFL, flags | O_NONBLOCK));

	for (;;) {

		/* Print a prompt if it's a tty: */
		if (tty) {
			printf("type something> ");
			fflush(stdout);
		}

		/* Select on the fdesc: */
		FD_ZERO(&r);
		FD_SET(fd, &r);
		maxfd = fd;
		errno = 0;
		CHECKe(n = select(maxfd + 1, &r, (fd_set *) 0, (fd_set *) 0,
				  (struct timeval *) 0));

		if (n > 0) {
			/* Something was ready for read. */
			printf("select returned %d\n", n);
			while ((nb = read(fd, buf, sizeof(buf) - 1)) > 0) {
				printf("read %d: `%.*s'\n", nb, nb, buf);
			}
			printf("last read was %d, errno = %d %s\n", nb, errno,
			       errno == 0 ? "success" : strerror(errno));
			if (nb < 0)
				ASSERTe(errno, == EWOULDBLOCK || 
				    errno == EAGAIN);
			if (nb == 0)
				break;
		} else
			ntouts++;
	}
	printf("read finished\n");
	return (NULL);
}

int
main(argc, argv)
	int argc;
	char *argv[];
{
	pthread_t	bg_thread, fg_thread;
	FILE *		slpr;

	/* Create a fdesc that will block for a while on read: */
	CHECKn(slpr = popen("sleep 2; echo foo", "r"));

	/* Create a busy loop thread that yields a lot: */
	CHECKr(pthread_create(&bg_thread, NULL, bg_routine, 0));

	/* Create the thread that reads the fdesc: */
	CHECKr(pthread_create(&fg_thread, NULL, fg_routine, (void *) slpr));

	/* Wait for the reader thread to finish */
	CHECKr(pthread_join(fg_thread, NULL));

	/* Clean up*/
	CHECKe(pclose(slpr));

	SUCCEED;
}
@


1.4
log
@clean up
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@define and use a SET_NAME macro so that these tests work under other thread implementations
@
text
@d1 5
d15 2
a16 1
#define NLOOPS 1000
d24 14
a37 13
  char dot = '.';
  SET_NAME("bg");
  write(STDOUT_FILENO,"bg routine running\n",19);
  /*pthread_dump_state();*/
  while (1) {
    int n;
    pthread_yield();
    write(STDOUT_FILENO, &dot, sizeof dot);
    pthread_yield();
    n = NLOOPS;
    while (n-- > 0)
      pthread_yield();
  }
d44 49
a92 37
  int flags;
  /* static struct timeval tout = { 0, 500000 }; */
  int n;
  fd_set r;

  SET_NAME("fg");

  flags = fcntl(STDIN_FILENO, F_GETFL);
  CHECKr(fcntl(STDIN_FILENO, F_SETFL, flags | O_NONBLOCK));

  while (1) {
    int maxfd;

    FD_ZERO(&r);
    FD_SET(STDIN_FILENO,&r);
    maxfd = STDIN_FILENO;

    errno = 0;
    printf("select>");
    CHECKe(n = select(maxfd+1, &r, (fd_set*)0, (fd_set*)0,
	(struct timeval *)0));

    if (n > 0) {
      int nb;
      char buf[128];

      printf("=> select returned: %d\n", n);
      while ((nb = read(STDIN_FILENO, buf, sizeof(buf)-1)) >= 0) {
	buf[nb] = '\0';
	printf("read %d: |%s|\n", nb, buf);
      }
      printf("=> out of read loop: len = %d / %s\n", nb, strerror(errno));
      if (nb < 0)
	ASSERTe(errno, == EWOULDBLOCK || errno == EAGAIN);
    } else
      ntouts++;
  }
d98 1
a98 1
	char **argv;
d100 2
a101 2
	pthread_t bg_thread, fg_thread;
	int junk;
d103 2
a104 2
	setbuf(stdout,NULL);
	setbuf(stderr,NULL);
d106 1
a107 1
	CHECKr(pthread_create(&fg_thread, NULL, fg_routine, 0));
d109 9
a117 7
	printf("threads forked: bg=%p fg=%p\n", bg_thread, fg_thread);
	/*pthread_dump_state();*/
	/*
	printf("initial thread %p joining fg...\n", pthread_self());
	CHECKr(pthread_join(fg_thread, (void **)&junk));
	*/
	sleep(20);
@


1.2
log
@nice-ify
@
text
@d19 1
a19 1
  pthread_set_name_np(pthread_self(), "bg");
d42 1
a42 1
  pthread_set_name_np(pthread_self(), "fg");
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d2 1
a3 1
#ifndef ultrix
a4 3
#else /* ultrix */
#include <fcntl.h>
#endif /* !ultrix */
a6 3
#ifdef hpux
#include <sys/file.h>
#endif /* hpux */
d8 2
d15 2
a16 1
bg_routine(void *arg)
d18 3
a20 1
  write(1,"bg routine running\n",19);
a23 3
    char dot;

    dot = '.';
d25 1
a25 1
    write(1,&dot,1);
d34 2
a35 1
fg_routine(void *arg)
d37 9
a45 2
  int flags, stat, nonblock_flag;
  static struct timeval tout = { 0, 500000 };
a46 18
#if 0
#if defined(hpux) || defined(__alpha)
  nonblock_flag = O_NONBLOCK;
#else
  nonblock_flag = FNDELAY;
#endif
  printf("fg_routine running\n");
  flags = fcntl(0, F_GETFL, 0);
  printf("stdin flags b4 anything = %x\n", flags);
  stat = fcntl(0, F_SETFL, flags | nonblock_flag);
  if (stat < 0) {
    printf("fcntl(%x) => %d\n", nonblock_flag, errno);
    printf("could not set nonblocking i/o on stdin [oldf %x, stat %d]\n",
	   flags, stat);
    exit(1);
  }
  printf("stdin flags = 0x%x after turning on %x\n", flags, nonblock_flag);
#endif
d48 1
a48 2
    int n;
    fd_set r;
d51 4
a54 1
    FD_SET(0,&r);
d56 4
a59 5
    n = select(1, &r, (fd_set*)0, (fd_set*)0, (struct timeval *)0);
    if (n < 0) {
      perror ("select");
      exit(1);
    } else if (n > 0) {
d64 1
a64 1
      while ((nb = read(0, buf, sizeof(buf)-1)) >= 0) {
d68 3
a70 7
      printf("=> out of read loop: %d / %d\n", nb, errno);
      if (nb < 0) {
	if (errno != EWOULDBLOCK && errno != EAGAIN) {
	  perror ("read");
	  exit(1);
	}
      }
d76 4
a79 1
main(int argc, char **argv)
d81 8
a88 2
  pthread_t bg_thread, fg_thread;
  int junk;
d90 8
a97 17
  pthread_init();
  setbuf(stdout,NULL);
  setbuf(stderr,NULL);
  if (argc > 1) {
    if (pthread_create(&bg_thread, NULL, bg_routine, 0) < 0) {
      printf("error: could not create bg thread\n");
      exit(1);
    }
  }
  if (pthread_create(&fg_thread, NULL, fg_routine, 0) < 0) {
    printf("error: could not create fg thread\n");
    exit(1);
  }
  printf("threads forked: bg=%lx fg=%lx\n", bg_thread, fg_thread);
  /*pthread_dump_state();*/
  printf("initial thread %lx joining fg...\n", pthread_self());
  pthread_join(fg_thread, (void **)&junk);
@

