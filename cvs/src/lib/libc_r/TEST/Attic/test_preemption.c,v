head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.57.06;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.10.00.31.38;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.46;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_preemption.c,v 1.4 2000/01/06 06:58:34 d Exp $	*/
/* ==== test_pthread_cond.c =========================================
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test pthread_cond(). Run this after test_create()
 *
 *  1.23 94/05/04 proven
 *      -Started coding this file.
 */

#include <pthread.h>
#include <stdio.h>
#include "test.h"

void *
new_thread(void * new_buf)
{
	int i;

	printf("yielding:");
	for (i = 0; i < 10; i++) {
		printf(" %d", i);
		fflush(stdout);
		pthread_yield();
	}
	printf("\n");
	SUCCEED;
}

int
main()
{
	pthread_t thread;

	CHECKr(pthread_create(&thread, NULL, new_thread, NULL));

	while(1)
		;
	PANIC("while");
}
@


1.4
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@nice-ify
@
text
@d1 1
d15 2
a16 1
void* new_thread(void * new_buf)
@


1.2
log
@tests are now useful
@
text
@d18 1
a18 1
	printf("new_thread\n");
d20 1
a20 1
		printf("yielding ");
d24 2
a25 2
	printf("yielded 10 times ok\n");
	exit(0);
a31 1
	int ret;
d33 1
a33 1
	printf("test_preemption START\n");
d35 3
a37 7
	if ((ret = pthread_create(&thread, NULL, new_thread, NULL)))
		DIE(ret, "pthread_create");

	while(1);
	/* NOTREACHED */

	return (1);
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d12 1
d18 1
d20 2
d24 1
a24 1
	printf("test_preemption PASSED\n");
d32 1
d36 2
a37 4
	if (pthread_create(&thread, NULL, new_thread, NULL)) {
		printf("pthread_create failed\n");
		exit(2);
	}
d40 3
a42 1
	exit(1);
@

