head	1.6;
access;
symbols
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.5;

1.5
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.4;

1.4
date	99.12.02.02.43.36;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.12.02.02.42.17;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.10.22.57.09;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.47;	author d;	state Exp;
branches;
next	;


desc
@@


1.6
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_setjmp.c,v 1.5 2000/01/06 06:58:34 d Exp $	*/
#include <setjmp.h>
#include "test.h"

int reached;

void *
_jump(arg)
	void *arg;
{
	jmp_buf foo;

	reached = 0;
	if (_setjmp(foo)) {
		ASSERT(reached);
		return NULL;
	}
	reached = 1;
	_longjmp(foo, 1);
	PANIC("_longjmp");
}

void *
jump(arg)
	void *arg;
{
	jmp_buf foo;

	reached = 0;
	if (setjmp(foo)) {
		ASSERT(reached);
		return NULL;
	}
	reached = 1;
	longjmp(foo, 1);
	PANIC("longjmp");
}

int
main()
{
	pthread_t child;
	void *res;

	printf("jumping in main thread\n");
	(void)jump(NULL);
	printf("_jumping in main thread\n");
	(void)_jump(NULL);

	printf("jumping in child thread\n");
	CHECKr(pthread_create(&child, NULL, jump, NULL));
	CHECKr(pthread_join(child, &res));

	printf("_jumping in child thread\n");
	CHECKr(pthread_create(&child, NULL, _jump, NULL));
	CHECKr(pthread_join(child, &res));

	SUCCEED;
}
@


1.5
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@add _setjmp/_longjmp test
@
text
@d1 1
@


1.3
log
@better tests
@
text
@d7 16
d46 2
d51 4
@


1.2
log
@nice-ify
@
text
@d6 3
a8 1
main()
d15 1
a15 1
		SUCCEED;
d20 16
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d2 3
d8 1
a8 1
jmp_buf foo;
d10 8
a17 6
if (setjmp(foo)) {
	exit(0);
}
printf("Hi mom\n");
longjmp(foo, 1);
printf("Should never reach here\n");
@

