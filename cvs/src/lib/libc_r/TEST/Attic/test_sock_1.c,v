head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.57.10;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.10.00.31.39;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.47;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_sock_1.c,v 1.4 2000/01/06 06:58:34 d Exp $	*/
/* ==== test_sock_1.c =========================================================
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test pthread_create() and pthread_exit() calls.
 *
 *  1.00 93/08/03 proven
 *      -Started coding this file.
 */

#include <pthread.h>
#include <errno.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include "test.h"
#include <sched.h>
#include <string.h>
#include <stdlib.h>

struct sockaddr_in a_sout;
int success = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_attr_t attr;

static int counter = 0;

void *
sock_connect(arg)
	void *arg;
{
	char buf[1024];
	int fd;

	/* Ensure sock_read runs first */
	CHECKr(pthread_mutex_lock(&mutex));

	a_sout.sin_addr.s_addr = htonl(0x7f000001); /* loopback */
	CHECKe(fd = socket(AF_INET, SOCK_STREAM, 0));

	ASSERT(++counter == 2);

	/* connect to the socket */
	CHECKe(connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)));
	CHECKe(close(fd));

	CHECKr(pthread_mutex_unlock(&mutex));

	CHECKe(fd = socket(AF_INET, SOCK_STREAM, 0));
	ASSERT(++counter == 3);
	CHECKe(connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)));

	/* Ensure sock_read runs again */
	pthread_yield();
	sleep(1);

	CHECKr(pthread_mutex_lock(&mutex));
	CHECKe(read(fd, buf, 1024));

	write(fd, "6", 1);

	ASSERT(++counter == atoi(buf));
	CHECKe(close(fd));
	success++;
	CHECKr(pthread_mutex_unlock(&mutex));

	return(NULL);
}

void *
sock_write(arg)
	void *arg;
{
	int fd = *(int *)arg;

	CHECKe(write(fd, "5", 1));
	return(NULL);
}

void *
sock_accept(arg)
	void *arg;
{
	pthread_t thread;
	struct sockaddr a_sin;
	int a_sin_size, a_fd, fd;
	short port;
	char buf[1024];

	port = 3276;
	a_sout.sin_family = AF_INET;
	a_sout.sin_port = htons(port);
	a_sout.sin_addr.s_addr = INADDR_ANY;

	CHECKe(a_fd = socket(AF_INET, SOCK_STREAM, 0));

	while (1) {
		if(0 == bind(a_fd, (struct sockaddr *) &a_sout, sizeof(a_sout)))
			break;
		if (errno == EADDRINUSE) { 
			a_sout.sin_port = htons((++port));
			continue;
		}
		DIE(errno, "bind");
	}
	CHECKe(listen(a_fd, 2));

	ASSERT(++counter == 1);

	CHECKr(pthread_create(&thread, &attr, sock_connect, 
	    (void *)0xdeadbeaf));

	a_sin_size = sizeof(a_sin);
	CHECKe(fd = accept(a_fd, &a_sin, &a_sin_size));
	CHECKr(pthread_mutex_lock(&mutex));
	CHECKe(close(fd));

	ASSERT(++counter == 4);

	a_sin_size = sizeof(a_sin);
	CHECKe(fd = accept(a_fd, &a_sin, &a_sin_size));
	CHECKr(pthread_mutex_unlock(&mutex));

	/* Setup a write thread */
	CHECKr(pthread_create(&thread, &attr, sock_write, &fd));
	CHECKe(read(fd, buf, 1024));

	ASSERT(++counter == atoi(buf));

	CHECKe(close(fd));

	CHECKr(pthread_mutex_lock(&mutex));
	success++;
	CHECKr(pthread_mutex_unlock(&mutex));

	CHECKr(pthread_join(thread, NULL));
	return(NULL);
}

int
main()
{
	pthread_t thread;

	setbuf(stdout, NULL);
	setbuf(stderr, NULL);

	CHECKr(pthread_attr_init(&attr));
#if 0
	CHECKr(pthread_attr_setschedpolicy(&attr, SCHED_FIFO));
#endif
	CHECKr(pthread_create(&thread, &attr, sock_accept,
	    (void *)0xdeadbeaf));

	CHECKr(pthread_join(thread, NULL));

	ASSERT(success == 2);
	SUCCEED;
}
@


1.4
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@nice-ify
@
text
@d1 1
@


1.2
log
@tests are now useful
@
text
@d20 1
d27 1
a27 2
#define MESSAGE5 "This should be message #5"
#define MESSAGE6 "This should be message #6"
d29 3
a31 1
void * sock_connect(void* arg)
d34 1
a34 2
	int fd, tmp;
	int ret;
d37 1
a37 2
	if ((ret = pthread_mutex_lock(&mutex))) 
		DIE(ret, "sock_connect:pthread_mutex_lock()");
d40 1
d42 1
a42 2
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		DIE(errno, "sock_connect:socket()");
d44 3
a46 3
	printf("This should be message #2\n");
	if (connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0)
		DIE(errno, "sock_connect:connect()");
d48 1
a48 4
	close(fd);
		
	if ((ret = pthread_mutex_unlock(&mutex)))
		DIE(ret, "sock_connect:pthread_mutex_lock()");
d50 3
a52 7
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		DIE(ret, "sock_connect:socket()");

	printf("This should be message #3\n");

	if (connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0)
		DIE(errno, "sock_connect:connect()");
d56 4
a59 5
	pthread_yield();
	pthread_yield();
	pthread_yield();
	if ((ret = pthread_mutex_lock(&mutex)))
		DIE(ret, "sock_connect:pthread_mutex_lock()");
d61 1
a61 2
	if ((tmp = read(fd, buf, 1024)) <= 0)
		DIE(errno, "sock_connect:read() == %d", tmp);
d63 2
a64 3
	write(fd, MESSAGE6, sizeof(MESSAGE6));
	printf("%s\n", buf);
	close(fd);
d66 1
a66 3

	if ((ret = pthread_mutex_unlock(&mutex)))
		DIE(ret, "sock_connect:pthread_mutex_unlock()");
d71 3
a73 2
extern struct fd_table_entry ** fd_table;
void * sock_write(void* arg)
d77 1
a77 1
	write(fd, MESSAGE5, sizeof(MESSAGE5));
d81 3
a83 1
void * sock_accept(void* arg)
d87 1
a87 1
	int a_sin_size, a_fd, fd, tmp;
a89 1
	int ret;
d96 1
a96 2
	if ((a_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
		DIE(errno, "sock_accept:socket()");
d98 3
a100 1
	while (bind(a_fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0) {
d105 1
a105 1
		DIE(errno, "sock_accept:bind()");
d107 6
a113 3
	if (listen(a_fd, 2)) 
		DIE(errno, "sock_accept:listen()");
		
d115 3
a117 11
	printf("This should be message #1\n");

	if ((ret = pthread_create(&thread, &attr, sock_connect, 
	    (void *)0xdeadbeaf)))
		DIE(ret, "sock_accept:pthread_create(sock_connect)");

	if ((fd = accept(a_fd, &a_sin, &a_sin_size)) < 0) 
		DIE(errno, "sock_accept:accept()");
	
	if ((ret = pthread_mutex_lock(&mutex)))
		DIE(ret, "sock_accept:pthread_mutex_lock()");
d119 1
a119 1
	close(fd);
d122 2
a123 3
	printf("This should be message #4\n");
	if ((fd = accept(a_fd, &a_sin, &a_sin_size)) < 0)
		DIE(errno, "sock_accept:accept()");
d125 3
a127 2
	if ((ret = pthread_mutex_unlock(&mutex)))
		DIE(ret, "sock_accept:pthread_mutex_unlock()");
d129 1
a129 5
	/* Setup a write thread */
	if ((ret = pthread_create(&thread, &attr, sock_write, &fd)))
		DIE(ret, "sock_accept:pthread_create(sock_write)");
	if ((tmp = read(fd, buf, 1024)) <= 0)
		DIE(errno, "sock_accept:read() == %d\n", tmp);
d131 1
a131 2
	printf("%s\n", buf);
	close(fd);
d133 1
a133 2
	if ((ret = pthread_mutex_lock(&mutex)))
		DIE(ret, "sock_accept:pthread_mutex_lock()");
d135 3
a137 2
	if ((ret = pthread_mutex_unlock(&mutex)))
		DIE(ret, "sock_accept:pthread_mutex_unlock()");
a144 1
	int ret;
d149 1
a149 2
	if ((ret = pthread_attr_init(&attr))) 
		DIE(ret, "main:pthread_attr_init()");
d151 1
a151 2
	if ((ret = pthread_attr_setschedpolicy(&attr, SCHED_FIFO)))
		DIE(ret, "main:pthread_attr_setschedpolicy()");
d153 7
a159 8
	if ((ret = pthread_create(&thread, &attr, sock_accept,
	    (void *)0xdeadbeaf)))
		DIE(ret, "main:pthread_create(sock_accept)");

	printf("initial thread %p going to sleep\n", pthread_self());
	sleep(2);
	printf("done sleeping. success = %d\n", success);
	exit(success == 2?0:1);
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d19 1
d22 1
d33 1
d36 2
a37 4
	if (pthread_mutex_lock(&mutex)) {
		printf("Error: sock_connect:pthread_mutex_lock()\n");
		exit(1);
	}
d41 2
a42 4
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		printf("Error: sock_connect:socket()\n");
		exit(1);
	}
d45 3
a47 4
	if (connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0) {
		printf("Error: sock_connect:connect()\n");
		exit(1);
	}
d50 2
a51 4
	if (pthread_mutex_unlock(&mutex)) {
		printf("Error: sock_connect:pthread_mutex_lock()\n");
		exit(1);
	}
d53 2
a54 4
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		printf("Error: sock_connect:socket()\n");
		exit(1);
	}
d58 2
a59 4
	if (connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0) {
		printf("Error: sock_connect:connect()\n");
		exit(1);
	}
d66 5
a70 4
	if (pthread_mutex_lock(&mutex)) {
		printf("Error: sock_connect:pthread_mutex_lock()\n");
		exit(1);
	}
a71 4
	if ((tmp = read(fd, buf, 1024)) <= 0) {
		printf("Error: sock_connect:read() == %d\n", tmp);
		exit(1);
	}
d75 5
d99 1
a99 5

	if (pthread_mutex_unlock(&mutex)) {
		printf("Error: sock_accept:pthread_mutex_lock()\n");
		exit(1);
	}
d106 2
a107 4
	if ((a_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		printf("Error: sock_accept:socket()\n");
		exit(1);
	}
d114 1
a114 2
		printf("Error: sock_accept:bind()\n");
		exit(1);
d117 2
a118 4
	if (listen(a_fd, 2)) {
		printf("Error: sock_accept:listen()\n");
		exit(1);
	}
d122 7
a128 4
	if ((fd = accept(a_fd, &a_sin, &a_sin_size)) < 0) {
		perror("Error: sock_accept:accept()");
		exit(1);
	}
d130 3
a132 4
	if (pthread_mutex_lock(&mutex)) {
		printf("Error: sock_accept:pthread_mutex_lock()\n");
		exit(1);
	}
d137 2
a138 4
	if ((fd = accept(a_fd, &a_sin, &a_sin_size)) < 0) {
		printf("Error: sock_accept:accept()\n");
		exit(1);
	}
d140 2
a141 4
	if (pthread_mutex_unlock(&mutex)) {
		printf("Error: sock_accept:pthread_mutex_lock()\n");
		exit(1);
	}
d144 5
a148 8
	if (pthread_create(&thread, &attr, sock_write, &fd)) {
		printf("Error: sock_accept:pthread_create(sock_write)\n");
		exit(1);
	}
	if ((tmp = read(fd, buf, 1024)) <= 0) {
		printf("Error: sock_accept:read() == %d\n", tmp);
		exit(1);
	}
d151 6
d164 1
d169 2
a170 10
	/* Ensure sock_read runs first */
	if (pthread_mutex_lock(&mutex)) {
		printf("Error: main:pthread_mutex_lock()\n");
		exit(1);
	}

	if (pthread_attr_init(&attr)) {
		printf("Error: main:pthread_attr_init()\n");
		exit(1);
	}
d172 2
a173 4
	if (pthread_attr_setschedpolicy(&attr, SCHED_FIFO)) {
		printf("Error: main:pthread_attr_setschedpolicy()\n");
		exit(1);
	}
d175 4
a178 8
	if (pthread_create(&thread, &attr, sock_accept, (void *)0xdeadbeaf)) {
		printf("Error: main:pthread_create(sock_accept)\n");
		exit(1);
	}
	if (pthread_create(&thread, &attr, sock_connect, (void *)0xdeadbeaf)) {
		printf("Error: main:pthread_create(sock_connect)\n");
		exit(1);
	}
d180 3
a182 3
	sleep(3);
	printf("done sleeping\n");
	return 0;
@

