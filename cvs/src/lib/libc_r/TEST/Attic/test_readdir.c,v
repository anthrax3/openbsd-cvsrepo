head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.11.28.11.27.20;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.10.22.57.09;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.46;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_readdir.c,v 1.4 2000/01/06 06:58:34 d Exp $	*/
/* ==== test_readdir.c ========================================================
 * Copyright (c) 1993, 1994 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test pthread_create() and pthread_exit() calls.
 *
 *  1.00 94/05/19 proven
 *      -Started coding this file.
 */

#include <pthread.h>
#include <sys/types.h>
#include <dirent.h>
#include <stdio.h>
#include "test.h"

int
main()
{
	struct dirent * file;
	DIR * dot_dir;
	int found = 0;

	CHECKn(dot_dir = opendir("."));
	while ((file = readdir(dot_dir)) != NULL)
		if (strcmp("test_readdir", file->d_name) == 0)
			found = 1;
	CHECKe(closedir(dot_dir));
	ASSERT(found);
	SUCCEED;
}

@


1.4
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@remove redundant macro
@
text
@d1 1
@


1.2
log
@nice-ify
@
text
@d23 1
a23 1
	CHECKen(dot_dir = opendir("."));
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d14 1
d23 7
a29 18
	if ((dot_dir = opendir(".")) != NULL) {
		while ((file = readdir(dot_dir)) != NULL) {
			if (strcmp("test_readdir", file->d_name) == 0) {
				found = 1;
			}
		}
		closedir(dot_dir);
		if (found) {
			printf("test_readdir PASSED\n");
			exit(0);
		} else {
			printf("Couldn't find file test_readdir ERROR\n");
		}
	} else {
		printf("opendir() ERROR\n");
	}
	printf("test_readdir FAILED\n");
	exit(1);
@

