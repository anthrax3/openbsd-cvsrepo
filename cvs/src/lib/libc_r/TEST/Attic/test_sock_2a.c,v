head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.57.10;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.21.07.18.36;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.47;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_sock_2a.c,v 1.4 2000/01/06 06:58:34 d Exp $	*/
/* ==== test_sock_1.c =========================================================
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test pthread_create() and pthread_exit() calls.
 *
 *  1.00 93/08/03 proven
 *      -Started coding this file.
 */

#include <pthread.h>
#include <errno.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <string.h>
#include "test.h"

struct sockaddr_in a_sout;

#define MESSAGE5 "This should be message #5"
#define MESSAGE6 "This should be message #6"

void * 
sock_connect(arg)
	void *arg;
{
	char buf[1024];
	int fd;
	short port;

	port = 3276;
 	a_sout.sin_family = AF_INET;
 	a_sout.sin_port = htons(port);
	a_sout.sin_addr.s_addr = htonl(INADDR_LOOPBACK); /* loopback */

	CHECKe(fd = socket(AF_INET, SOCK_STREAM, 0));

	printf("%d: This should be message #2\n", getpid());

	CHECKe(connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout))); 
	CHECKe(close(fd)); 
		
	CHECKe(fd = socket(AF_INET, SOCK_STREAM, 0));

	printf("%d: This should be message #3\n", getpid());

	CHECKe(connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)));

	/* Ensure sock_read runs again */

	CHECKe(read(fd, buf, 1024));
	CHECKe(write(fd, MESSAGE6, sizeof(MESSAGE6)));

	printf("%d: %s\n", getpid(), buf);

	CHECKe(close(fd));
	return (NULL);
}

int
main(argc, argv)
	int argc;
	char **argv;
{
	pthread_t thread;

	if (argv[1] && (!strcmp(argv[1], "fork okay"))) {
		sleep(1);
		setbuf(stdout, NULL);
		setbuf(stderr, NULL);

		CHECKr(pthread_create(&thread, NULL, sock_connect, 
		    (void *)0xdeadbeaf));
		CHECKr(pthread_join(thread, NULL));
		SUCCEED;
	} else {
		fprintf(stderr, "test_sock_2a needs to be exec'ed from "
		    "test_sock_2.\n");
		fprintf(stderr, "It is not a stand alone test.\n");
		PANIC("usage");
	}
}
@


1.4
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@nice-ify
@
text
@d1 1
@


1.2
log
@clean
@
text
@d26 2
a27 1
sock_connect(void* arg)
d30 1
a30 1
	int fd, tmp;
d38 1
a38 2
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
		DIE(errno, "sock_connect:socket()");
d40 4
a43 4
	printf("This should be message #2\n");
	if (connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0) 
		DIE(errno, "sock_connect:connect()");
	close(fd); 
d45 1
a45 2
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		DIE(errno, "sock_connect:socket()");
d47 1
a47 1
	printf("This should be message #3\n");
d49 1
a49 2
	if (connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0)
		DIE(errno, "sock_connect:connect()");
d53 4
a56 5
	if ((tmp = read(fd, buf, 1024)) <= 0) 
		DIE(errno, "sock_connect:read() == %d\n", tmp);
	write(fd, MESSAGE6, sizeof(MESSAGE6));
	printf("%s\n", buf);
	close(fd);
d58 1
d63 3
a65 1
main(int argc, char **argv)
a67 1
	int ret;
d74 4
a77 5
		if ((ret = pthread_create(&thread, NULL, sock_connect, 
		    (void *)0xdeadbeaf)))
			DIE(ret, "main:pthread_create(sock_connect)");
		pthread_join(thread, NULL);
		exit(0);
d79 4
a82 3
		printf("test_sock_2a needs to be execed from test_sock_2.\n");
		printf("It is not a stand alone test.\n");
		exit(1);
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d16 3
d25 2
a26 1
void * sock_connect(void* arg)
d35 1
a35 1
	a_sout.sin_addr.s_addr = htonl(0x7f000001); /* loopback */
d37 2
a38 4
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		perror("Error: sock_connect:socket()");
		exit(1);
	}
d41 2
a42 4
	if (connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0) {
		perror("Error: sock_connect:connect()");
		exit(1);
	}
d45 2
a46 4
	if ((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		perror("Error: sock_connect:socket()");
		exit(1);
	}
d50 2
a51 4
	if (connect(fd, (struct sockaddr *) &a_sout, sizeof(a_sout)) < 0) {
		perror("Error: sock_connect:connect()");
		exit(1);
	}
d55 2
a56 4
	if ((tmp = read(fd, buf, 1024)) <= 0) {
		printf("Error: sock_connect:read() == %d %s\n", tmp, strerror(errno));
		exit(1);
	}
d60 2
d64 1
d68 1
a68 1
	int i;
d75 9
a83 5
		if (pthread_create(&thread, NULL, sock_connect, (void *)0xdeadbeaf)) {
			perror("Error: main:pthread_create(sock_connect)");
			exit(1);
		}
 		pthread_exit(NULL);
a84 3
	printf("test_sock_2a needs to be execed from test_sock_2.\n");
	printf("It is not a stand alone test.\n");
	exit(1);
@

