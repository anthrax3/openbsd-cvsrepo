head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2000.01.06.06.54.43;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.05.26.00.08.21;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.10.22.57.06;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.45;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_netdb.c,v 1.4 2000/01/06 06:54:43 d Exp $	*/
/*
 * Copyright (c) 1995 by Greg Hudson, ghudson@@.mit.edu
 *
 * Test netdb calls.
 */

#include <pthread.h>
#include <string.h>
#include <stdio.h>
#include <netdb.h>
#include <errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include "test.h"

static void test_serv()
{
	struct servent *serv;

	CHECKhn(serv = getservbyname("telnet", "tcp"));
	printf("getservbyname -> port %d\n", ntohs(serv->s_port));
}

static void test_host()
{
	struct hostent *host;
	struct in_addr addr;

	CHECKhn(host = gethostbyname("localhost"));
	memcpy(&addr, host->h_addr, sizeof(addr));
	printf("gethostbyname -> %s\n", inet_ntoa(addr));
}

static void test_localhost()
{
	struct hostent *host;

	CHECKhn(host = gethostbyname("127.0.0.1"));
}

int
main(int argc, char **argv)
{
	test_serv();
	test_localhost();
	test_host();

	SUCCEED;
}
@


1.4
log
@clean doc
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@bye bye gethostbyname_r and getservbyname_r tests
@
text
@d1 2
a2 1
/* ==== test_netdb.c =========================================================
d5 1
a5 4
 * Description : Test netdb calls.
 *
 *  1.00 95/01/05 ghudson
 *      -Started coding this file.
@


1.2
log
@nice-ify
@
text
@a22 1
	char answer[1024];
a25 3

	CHECKhn(serv = getservbyname_r("telnet", "tcp", serv, answer, 1024));
	printf("getservbyname_r -> port %d\n", ntohs(serv->s_port));
a31 2
	char answer[1024];
	int error;
a35 8

	if ((host = gethostbyname_r("localhost", host, answer, 1024, &error))
		!= NULL) {
		memcpy(&addr, host->h_addr, sizeof(addr));
		printf("gethostbyname_r -> %s\n", inet_ntoa(addr));
	} else {
		DIE(error, "gethostbyname_r");
	}
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d20 1
a20 6
struct servent * getservbyname_r __P((const char *, const char *, struct servent *, char *, int));
struct hostent * gethostbyname_r __P((const char *, struct hostent *, char *, int, int *));

int debug = 0;

static int test_serv()
d25 5
a29 10
	if ((serv = getservbyname("telnet", "tcp")) != NULL)
		printf("getservbyname -> port %d\n", ntohs(serv->s_port));
	else
		printf("getservbyname -> NULL (bad)\n");

	if ((serv = getservbyname_r("telnet", "tcp", serv, answer, 1024))!=NULL)
		printf("getservbyname_r -> port %d\n", ntohs(serv->s_port));
	else
		printf("getservbyname_r -> NULL (bad)\n");
	return(OK);
d32 1
a32 1
static int test_host()
d39 3
a41 7
	if ((host = gethostbyname("maze.mit.edu")) != NULL) {
		memcpy(&addr, host->h_addr, sizeof(addr));
		printf("gethostbyname -> %s\n", inet_ntoa(addr));
	} else {
		printf("gethostbyname -> NULL (bad)\n");
		host = (struct hostent *)answer;
	}
d43 1
a43 1
	if ((host = gethostbyname_r("maze.mit.edu", host, answer, 1024, &error))
d48 1
a48 1
		printf("gethostbyname_r -> NULL (bad)\n");
a49 1
	return(OK);
d52 1
a52 1
static int test_localhost()
d54 1
a54 7
    struct hostent *host;

	if ((host = gethostbyname("127.0.0.1")) != NULL) {
		return(OK);
	}
	return(NOTOK);
}
d56 1
a56 7
/* ==========================================================================
 * usage();
 */
void usage(void)
{       
    printf("test_netdb [-d?]\n");
    errno = 0;
d62 3
d66 1
a66 28
	/* Getopt variables. */
	extern int optind, opterr;
	extern char *optarg;
	char ch;

	while ((ch = getopt(argc, argv, "d?")) != (char)EOF) {
        switch (ch) {
        case 'd':
            debug++;
            break;
		case '?':
            usage();
            return(OK); 
        default:  
            usage();
            return(NOTOK);
        }
    }

	printf("test_netdb START\n");
	
	if (test_serv() || test_localhost() || test_host()) {
		printf("test_netdb FAILED\n");
		exit(1);
	}

	printf("test_netdb PASSED\n");
	exit(0);
@

