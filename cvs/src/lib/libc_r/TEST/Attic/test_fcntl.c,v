head	1.5;
access;
symbols
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2001.07.09.07.04.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.06.06.53.52;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.10.22.57.05;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.45;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_fcntl.c,v 1.4 2001/07/09 07:04:40 deraadt Exp $	*/
/*
 * Test fcntl() flag inheritance across a fork()
 */
#include <stdio.h>
#include <fcntl.h>
#include "test.h"

int
main()
{
	int flags, newflags, child;

	CHECKe(flags = fcntl(0, F_GETFL));
	printf("flags = %x\n", flags);

	CHECKe(child = fork());
	switch(child) {
	case 0: /* child */
		CHECKe(execlp("test_create", "test_create", (char *)NULL));
		/* NOTREACHED */
	default: /* parent */
		CHECKe(wait(NULL));
		break;
	}
		
	while(1){
		CHECKe(newflags = fcntl(0, F_GETFL));
		printf ("parent %d flags = %x\n", child, newflags);
		sleep(1);
	}
}
@


1.4
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: test_fcntl.c,v 1.3 2000/01/06 06:53:52 d Exp $	*/
@


1.3
log
@cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d20 1
a20 1
		CHECKe(execlp("test_create", "test_create", NULL));
@


1.2
log
@nice-ify
@
text
@d1 4
d9 1
d12 1
a12 1
	int flags, child;
d28 2
a29 2
		CHECKe(flags = fcntl(0, F_GETFL));
		printf ("parent %d flags = %x\n", child, flags);
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d3 1
d9 2
a10 4
	if ((flags = fcntl(0, F_GETFL)) < 0) {
		perror("fcntl 1st GETFL");
	}
	printf ("flags = %x\n", flags);
d12 2
a13 4
	switch(child = fork()) {
	case -1:
		printf("error during fork\n");
		break;
d15 2
a16 2
		execlp("test_create", "test_create", NULL);
		break;
d18 1
a18 1
		wait(NULL);
d23 3
a25 5
	if ((flags = fcntl(0, F_GETFL)) < 0) {
		perror("fcntl parent GETFL");
	}
	printf ("parent %d flags = %x\n", child, flags);
	sleep(1);
@

