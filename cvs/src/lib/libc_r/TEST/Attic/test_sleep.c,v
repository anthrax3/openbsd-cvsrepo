head	1.5;
access;
symbols
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.08.15.14.43.15;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2000.01.06.06.58.34;	author d;	state Exp;
branches;
next	1.3;

1.3
date	99.01.10.22.57.10;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.12.10.00.31.39;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.09.03.11.04.47;	author d;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TEST has moved to regress/lib/libc_r.
@
text
@/*	$OpenBSD: test_sleep.c,v 1.4 2000/01/06 06:58:34 d Exp $	*/
/* ==== test_sleep.c ============================================================
 * Copyright (c) 1993 by Chris Provenzano, proven@@athena.mit.edu
 *
 * Description : Test context switch functionality.
 *
 *  1.00 93/08/04 proven
 *      -Started coding this file.
 */

#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include "test.h"

const char buf[] = "abcdefghijklimnopqrstuvwxyz";
int fd = 1;

void* new_thread(void* arg)
{
	int i;

	for (i = 0; i < 10; i++) {
		write(fd, buf + (long) arg, 1);
		sleep(1);
	}
	return NULL;
}

int
main()
{
	pthread_t thread[2];
	int count = sizeof thread/sizeof thread[0];
	long i;

	printf("Going to sleep\n");
	sleep(3);
	printf("Done sleeping\n");

	for(i = 0; i < count; i++)
		CHECKr(pthread_create(&thread[i], NULL, new_thread, 
		    (void *) i));

	for (i = 0; i < count; i++)
		CHECKr(pthread_join(thread[i], NULL));

	SUCCEED;
}
@


1.4
log
@ident, clean
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@nice-ify
@
text
@d1 2
a2 1
/* ==== test_switch.c ============================================================
@


1.2
log
@tests are now useful
@
text
@d13 1
d40 3
a42 5
	for(i = 0; i < count; i++) {
		if (pthread_create(&thread[i], NULL, new_thread, (void *) i)) {
			printf("error creating new thread %ld\n", i);
		}
	}
d45 1
a45 1
		pthread_join(thread[i], NULL);
d47 1
a47 1
	return(0);
@


1.1
log
@libpthread tests modified for uthreads
@
text
@d31 2
a32 2
	pthread_t thread;
	int count = 2;
d40 1
a40 1
		if (pthread_create(&thread, NULL, new_thread, (void *) i)) {
d44 5
a48 3
	pthread_exit(NULL);
	fprintf(stderr, "pthread_exit returned\n");
	exit(1);
@

