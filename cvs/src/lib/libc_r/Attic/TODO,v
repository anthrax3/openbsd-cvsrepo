head	1.18;
access;
symbols
	OPENBSD_3_2:1.17.0.4
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9:1.11.0.6
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.4
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@# @;


1.18
date	2003.01.20.18.14.05;	author marc;	state dead;
branches;
next	1.17;

1.17
date	2002.02.22.04.25.20;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.05.02.54.12;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.05.02.51.19;	author fgsch;	state Exp;
branches;
next	1.14;

1.14
date	2001.09.05.02.41.13;	author fgsch;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.05.00.10.41;	author fgsch;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.18.21.01.03;	author pvalchev;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.10.12.28.56;	author d;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.06.06.48.06;	author d;	state Exp;
branches;
next	1.9;

1.9
date	99.11.29.23.26.24;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	99.11.29.22.28.20;	author d;	state Exp;
branches;
next	1.7;

1.7
date	99.11.28.11.28.15;	author d;	state Exp;
branches;
next	1.6;

1.6
date	99.01.17.23.43.47;	author d;	state Exp;
branches;
next	1.5;

1.5
date	99.01.10.22.51.14;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.12.22.22.30.35;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.11.20.11.18.57;	author d;	state Exp;
branches;
next	1.2;

1.2
date	98.11.09.03.12.54;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.08.27.09.00.32;	author d;	state Exp;
branches;
next	;


desc
@@


1.18
log
@
bye-bye libc_r sources.
the sources have been moved (with history) to /usr/src/lib/libpthread
@
text
@$OpenBSD: TODO,v 1.17 2002/02/22 04:25:20 brad Exp $

This is a list of things that still need to be done:

* fix the signal handling re-entrancy bug that FreeBSD have left in :(

* wrap vfork (basically the same as fork())

* wrap itimer() syscalls so that the _ITIMER_SCHED_TIMER can't be trashed

* Move the md include stuff so that it appears in /usr/include/<arch>/
  That way, gdb's thread stuff can be built sanely and maybe other
  uthread-aware stuff can make use of it?

* Move to using -lpthread. Needs weak symbol support in all as and ld.so
  implementations.
  [espie@@ looking at unifying toolchain]
  [weak symbols put into libc. libpthread built. everything works on i386]

* Add 
      pthread_condattr_[gs]etpshared()	-- and add warn_references
      pthread_mutexattr_[gs]etpshared()
      sched_setparam()
      sched_setscheduler()

* Add _warn_references to the schedprio stuff

* shouldn't pthread_yield() be marked depreciated?
  [it is draft 4.]

* Add thread stuff to the other archs in libc/arch/; ie change
  some usages of ENTRY to SYSENTRY in some .S files and add
  the new macros to their SYS.h. 
  [wip]

* Test that thread_init is automatically called on every arch, regardless
  of whether the exe is statically linked or not.
  [problems with new egcs?]

* Add UNIX98's pthread_attr_[sg]etguardsize(). This would probably be
  straightforward.

* Keep a handle on how netbsd are going with their kernel threads
  [argument is that openbsd is not multi-processor, so user threads will
   retain stability and still give reasonable performance. talked to mwp@@]

* Look into how asynchronous I/O can help us. In particular, the
  (unimplemented) aio*() functions.
  [doesn't help very much for 1003.1c.]

* Update the libc manual pages to describe the posix re-entrant functions.
  Although this is actually trivial to do, I have to decide on a
  consistent way of adding them - maybe `.Sh THREAD-SAFE FUNCTIONS' ?
  Should look into standards to see what they suggest/did..
  May also need to document "This is not thread-safe" for some library
  functions (yet to be identified).
  [Need to ask aaron@@ for his opinion.]

* Find out where freebsd/netbsd use pread() and pwrite().. i think
  its in the database routines mostly.

* Figure out what to do with the configuration system variables (_SC_*)
  that are defined by POSIX 1003.1c (at least update sysconf(3))

* Compare with PTL (http://www.media.osaka-cu.ac.jp/~k-abe/PTL/)
  [snarfed some sparc md stuff]

* Verify that threads work with:
	- perl (in-tree) [almost]
	- objc (in-tree gcc)
	- ssl (in-tree) [triv]
	- gdb
	- ports
		- audio/xmms
		- bechmarks/iozone
		- databases/mysql
		- devel/glib [yes]
		- devel/sdl [yes]
		- graphics/ggi
		- graphics/gii
		- lang/tcl/8.3
		- lang/python/2.1
		- lang/python/2.2
		- net/icecast [partially]
		- net/mrtd
		- net/xchat
		- net/pdnsd

* Some ideas:
  + http://www.cs.wustl.edu/~schmidt/locking-patterns.ps.gz
    http://www.cs.wustl.edu/~schmidt/TSS-pattern.ps.gz
    http://www.cs.wustl.edu/~schmidt/DC-Locking.ps.gz
  + http://guir.cs.berkeley.edu/projects/osprelims/papers/Scheduler.pdf.gz
    "Scheduler Activations: Effective Kernel Support for the User-Level 
    Management of Parallelism" by Thomas E. Anderson, Brian N. Bershad, 
    Edward D. Lazowska, and Henry M. Levy                                                               
* Fix ufs_select and nfs_select in the kernel to give REAL answers. [ha!]

* Clean up the way that signals are delivered to threads. Yuk.

* Make getaddrinfo(3) thread-safe.

* What to do with gethostby*_r(3)?

* Look into getpw*_r(3).

@


1.17
log
@update Python listing and remove Squid.
@
text
@d1 1
a1 1
$OpenBSD: TODO,v 1.16 2001/09/05 02:54:12 fgsch Exp $
@


1.16
log
@and fix PTL site.
@
text
@d1 1
a1 1
$OpenBSD: TODO,v 1.15 2001/09/05 02:51:19 fgsch Exp $
d82 2
a83 2
		- lang/python [yes, but a SIGCONT problem?]
		- lang/python15
a87 1
		- www/squid
@


1.15
log
@Rearrange and add missing ports based on recent 'Use threads' commits.
@
text
@d1 1
a1 1
$OpenBSD: TODO,v 1.14 2001/09/05 02:41:13 fgsch Exp $
d65 1
a65 1
* Compare with PTL (http://www3.media.osaka-cu.ac.jp/~k-abe/PTL/)
@


1.14
log
@add getpw*_r to the list; from brad@@
@
text
@d1 1
d74 8
d83 2
a84 1
		- databases/mysql
d86 2
a87 1
		- devel/glib [yes]
a88 7
		- devel/sdl [yes]

* Make getaddrinfo(3) thread-safe.

* What to do with gethostby*_r(3)?

* Look into getpw*_r.
d102 6
a107 1
$OpenBSD: TODO,v 1.13 2001/09/05 00:10:41 fgsch Exp $
@


1.13
log
@Add getaddrinfo(3) and gethostby*_r(3) to the list.
@
text
@d84 2
d98 1
a98 1
$OpenBSD: TODO,v 1.12 2001/08/18 21:01:03 pvalchev Exp $
@


1.12
log
@fix a typo and add devel/sdl to the ports applications using these pthreads
for testing
@
text
@d80 4
d96 1
a96 1
$OpenBSD: TODO,v 1.11 2000/02/10 12:28:56 d Exp $
@


1.11
log
@more
@
text
@d43 1
a43 1
  [argumnet is that obsd is not multi-processor, so user threads will
d78 1
d92 1
a92 1
$OpenBSD: TODO,v 1.10 2000/01/06 06:48:06 d Exp $
@


1.10
log
@update
@
text
@d39 3
d68 1
a68 1
	- perl (in-tree)
d70 1
a70 1
	- ssl (in-tree)
d73 1
a73 1
		- lang/python
d76 1
a76 1
		- devel/glib
d79 11
a89 3
* http://www.cs.wustl.edu/~schmidt/locking-patterns.ps.gz
  http://www.cs.wustl.edu/~schmidt/TSS-pattern.ps.gz
  http://www.cs.wustl.edu/~schmidt/DC-Locking.ps.gz
d91 1
a91 1
$OpenBSD: TODO,v 1.9 1999/11/29 23:26:24 brad Exp $
@


1.9
log
@add devel/glib and www/squid to the TODO check list
@
text
@d4 2
d17 1
d27 2
a28 3
* Quiz jb about pthread_llist_remove.. change name to _thread_llist_remove?
	- what pthread_setprio() and pthread_yield() for?
	- shouldn't pthread_yield() be marked depreciated?
a38 2
* Configure the gnu objective-C compiler to see if it can use threads.

d40 2
d45 1
d64 1
a64 1
* Check that threads work with:
d67 1
d76 5
a80 1
$OpenBSD: TODO,v 1.8 1999/11/29 22:28:20 d Exp $
@


1.8
log
@add net/mrtd to the TODO check list, chris@@dqc.org
@
text
@d69 2
d72 1
a72 1
$OpenBSD: TODO,v 1.7 1999/11/28 11:28:15 d Exp $
@


1.7
log
@reality
@
text
@d68 1
d70 1
a70 1
$OpenBSD: TODO,v 1.6 1999/01/17 23:43:47 d Exp $
@


1.6
log
@update
@
text
@d4 12
a17 2
      pthread_mutexattr_[gs]etprioceiling()
      pthread_mutexattr_[gs]etprotocol()
a18 1
      pthread_mutex_[gs]etprioceiling()
d23 1
d31 1
d35 1
d37 1
a37 2
* Alter the objective-C compiler to see if it can use threads.
  It looks like the easy way is to just define CC='cc -pthread'.
d39 1
a39 8
* Find all the static buffers in libc and make them per-thread. This
  is not absolutely necessary but incurs no penalty for single-threaded
  operation, and makes life easier & safer for when threads are used.
  On the other hand, it adds a bit more code bloat when you use threads
  and makes openbsd programs non-portable to other OSs with less-nicer
  libraries. If we do the bare posix minimum, we promote portable code.
  
* Look into how netbsd are going with their kernel threads
d50 1
d53 1
a53 1
  its in the database routines mostly. We will need to rip their code.
d58 12
a69 1
$OpenBSD: TODO,v 1.5 1999/01/10 22:51:14 d Exp $
@


1.5
log
@update
@
text
@d4 14
d53 1
a53 1
$OpenBSD: TODO,v 1.4 1998/12/22 22:30:35 d Exp $
@


1.4
log
@update
@
text
@a7 6
* Find a better way of doing the _sys_aliases stuff; ideally by
  using the linker. jmp's and branches (current implementation) are ugly, but
  I don't want to have to hack ../libc/sys/Makefile.inc just to
  partition the syscalls into wrapped and non-wrapped. The `.set'
  assembler directive just doesn't work as I thought it would.

d37 1
a37 1
  that are defined by POSIX 1003.1c
d39 1
a39 1
$OpenBSD: TODO,v 1.3 1998/11/20 11:18:57 d Exp $
@


1.3
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@a3 5
* Fix the totally bogus _atomic_lock in arch/mips.
  This is a nightmare because you really need to incur a ctxt switch
  for pmaxen. R4000 has some instructions to do an atomic test-and-set
  but not mips1. fuck fuck fuck. the ctx switch has to be sigsetmask

d6 1
a6 4
  the new macros to their SYS.h. Only the i386 arch is working.

* Finish/verify the md stuff for setjmp and atomic_lock for sparc and
  alpha. Boy do they look dodgy.
d9 1
a9 1
  using the linker. jmp's (current implementation) are ugly, but
d14 5
a18 16
* Fix the bug where _thread_init() isn't called when libc_r.so is used
  instead of libc_r.a ... some kind of shlib common problem? may
  need to use crt0 instead? __CTOR_LIST__ is just not being updated by ld.
  Frankly this one is driving me nuts. Maybe <bsd.lib.mk> is wrong.
  This varies on different architectures and exec format.

* Test the objective-C compiler to see if it can use threads.
  Really this shows up a nasty problem with needing to say -threads
  whenever you want to use threads. Ideally, linking with -lc_r library
  would override -lc; but the _POSIX_THREADS define would alter
  some optimisations done in <stdio.h>... What to do!?! FreeBSD looks
  like they are going to have an always-threaded libc with optimisations
  for the 1-thread case and use weak symbols to override functions when
  someone uses -lc_r. Do we have weak symbols everywhere? I wonder
  what the performance hit is if #define LOCK() if(nthreads>1){lock();}
  is used... need to profile this.
d43 1
d45 1
a45 1
$OpenBSD: TODO,v 1.2 1998/11/09 03:12:54 d Exp $
@


1.2
log
@sync with FreeBSD (rwlock, gc thread, man pages)
add (broken) mips md stuff
fix some const warnings
add sigaltstack() stub
another hash at getting shlib auto-init to work (mips/elf and i386/a.out)
@
text
@d4 4
a7 1
* Fix the totally bogus _atomic_lock in arch/mips
d13 3
d26 1
a26 4

* Signals seem to cause busy-hangs. SIGINFO especially. test_sock_2
  fails because of its use of signals. still dumps /tmp/uthread.dump
  though - needs debugging.
d29 9
d42 3
d58 6
a63 1
$OpenBSD: TODO,v 1.1 1998/08/27 09:00:32 d Exp $
@


1.1
log
@experimental threaded libc - kernel only
@
text
@d4 2
a24 8
* gethostbyname_r is not standard ... but is important - decide what to 
  do about this. The POSIX 'system databases' style of extra parameters is
  probably the best way to go.

* Modify gcc (or configure it) so that it understands a -thread option
  and uses -lc_r automatically. I think the _PTHREADS flag is wrong,
  and need to check the posix draft.

a35 2
* Write manual pages for all the pthread functions.

d43 1
a43 6
* Talk to Birrell about what he wants to do with the _np extensions,
  since the SUSv2 mentions extra standards to support things like
  scheduling policy and so forth.

$OpenBSD$

@

