head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.36
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.34
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.30
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.28
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.26
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.24
	OPENBSD_5_0:1.19.0.22
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.20
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.18
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.14
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.16
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.12
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.10
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.8
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.6
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.4
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.16.0.8
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.6
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.4
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.14.0.8
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.14.0.6
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.4
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	OPENBSD_3_0:1.13.0.8
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.13.0.6
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.13.0.4
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.10.0.4
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2015.12.22.19.51.04;	author mmcc;	state Exp;
branches;
next	1.23;
commitid	3htqtDr2Y7QvJUxm;

1.23
date	2015.11.17.21.39.23;	author mmcc;	state Exp;
branches;
next	1.22;
commitid	QwVD4AKITH4IBHi1;

1.22
date	2015.11.17.18.19.45;	author mmcc;	state Exp;
branches;
next	1.21;
commitid	XWxlXM1Hks3HcyxP;

1.21
date	2015.10.24.05.26.00;	author mmcc;	state Exp;
branches;
next	1.20;
commitid	NWwPXDYmNO4WlFhg;

1.20
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	0DYulI8hhujBHMcR;

1.19
date	2006.03.26.20.58.50;	author djm;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.25.20.25.44;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.18.11.05.39;	author djm;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.27.06.58.03;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.21.00.30.15;	author jfb;	state Exp;
branches;
next	1.14;

1.14
date	2002.02.19.19.39.37;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.26.21.25.53;	author jakob;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.13.05.55.19;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	99.07.20.04.49.55;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.08.27.22.36.33;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	98.08.14.21.30.33;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.07.14.00.14.01;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.07.25.20.30.19;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.01.24.19.17.25;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.07.19.07.52.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.12.13.19.09;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.07.23.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.15.47.22;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@remove NULL-checks before free()
@
text
@/*	$OpenBSD: inet.c,v 1.23 2015/11/17 21:39:23 mmcc Exp $	*/

/*
 * Copyright (c) 1994, 1995, 1996, 1997, 1998
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the Computer Systems
 *	Engineering Group at Lawrence Berkeley Laboratory.
 * 4. Neither the name of the University nor of the Laboratory may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */


#include <sys/file.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#ifdef HAVE_SYS_SOCKIO_H
#include <sys/sockio.h>
#endif
#include <sys/time.h>				/* concession to AIX */

struct mbuf;
struct rtentry;

#include <net/if.h>
#include <netinet/in.h>

#include <ctype.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#ifdef HAVE_IFADDRS_H
#include <ifaddrs.h>
#endif

#include "pcap-int.h"

#ifdef HAVE_OS_PROTO_H
#include "os-proto.h"
#endif

/*
 * Free a list of interfaces.
 */
void
pcap_freealldevs(pcap_if_t *alldevs)
{
	pcap_if_t *curdev, *nextdev;
	pcap_addr_t *curaddr, *nextaddr;

	for (curdev = alldevs; curdev != NULL; curdev = nextdev) {
		nextdev = curdev->next;

		/*
		 * Free all addresses.
		 */
		for (curaddr = curdev->addresses; curaddr != NULL;
		    curaddr = nextaddr) {
			nextaddr = curaddr->next;
			free(curaddr->addr);
			free(curaddr->netmask);
			free(curaddr->broadaddr);
			free(curaddr->dstaddr);
			free(curaddr);
		}

		/*
		 * Free the name string.
		 */
		free(curdev->name);

		/*
		 * Free the description string, if any.
		 */
		free(curdev->description);

		/*
		 * Free the interface.
		 */
		free(curdev);
	}
}

/*
 * Return the name of a network interface attached to the system, or NULL
 * if none can be found.  The interface must be configured up; the
 * lowest unit number is preferred; loopback is ignored.
 */
char *
pcap_lookupdev(errbuf)
	char *errbuf;
{
#ifdef HAVE_IFADDRS_H
	struct ifaddrs *ifap, *ifa, *mp;
	int n, minunit;
	char *cp;
	static char device[IF_NAMESIZE + 1];

	if (getifaddrs(&ifap) != 0) {
		(void)snprintf(errbuf, PCAP_ERRBUF_SIZE,
		    "getifaddrs: %s", pcap_strerror(errno));
		return NULL;
	}

	mp = NULL;
	minunit = 666;
	for (ifa = ifap; ifa; ifa = ifa->ifa_next) {
		if ((ifa->ifa_flags & IFF_UP) == 0)
			continue;
		if (ISLOOPBACK(ifa->ifa_name, ifa->ifa_flags))
			continue;
		for (cp = ifa->ifa_name; !isdigit((unsigned char)*cp); ++cp)
			continue;
		n = atoi(cp);
		if (n < minunit) {
			minunit = n;
			mp = ifa;
		}
	}
	if (mp == NULL) {
		(void)strlcpy(errbuf, "no suitable device found",
		    PCAP_ERRBUF_SIZE);
		freeifaddrs(ifap);
		return (NULL);
	}

	(void)strlcpy(device, mp->ifa_name, sizeof(device));
	freeifaddrs(ifap);
	return (device);
#else
	int fd, minunit, n;
	char *cp;
	struct ifreq *ifrp, *ifend, *ifnext, *mp;
	struct ifconf ifc;
	struct ifreq ibuf[16], ifr;
	static char device[sizeof(ifrp->ifr_name) + 1];

	fd = socket(AF_INET, SOCK_DGRAM, 0);
	if (fd < 0) {
		(void)snprintf(errbuf, PCAP_ERRBUF_SIZE, "socket: %s",
		    pcap_strerror(errno));
		return (NULL);
	}
	ifc.ifc_len = sizeof ibuf;
	ifc.ifc_buf = (caddr_t)ibuf;

	memset((char *)ibuf, 0, sizeof(ibuf));
	if (ioctl(fd, SIOCGIFCONF, (char *)&ifc) < 0 ||
	    ifc.ifc_len < sizeof(struct ifreq)) {
		(void)snprintf(errbuf, PCAP_ERRBUF_SIZE, "SIOCGIFCONF: %s",
		    pcap_strerror(errno));
		(void)close(fd);
		return (NULL);
	}
	ifrp = ibuf;
	ifend = (struct ifreq *)((char *)ibuf + ifc.ifc_len);

	mp = NULL;
	minunit = 666;
	for (; ifrp < ifend; ifrp = ifnext) {
#ifdef HAVE_SOCKADDR_SA_LEN
		n = ifrp->ifr_addr.sa_len + sizeof(ifrp->ifr_name);
		if (n < sizeof(*ifrp))
			ifnext = ifrp + 1;
		else
			ifnext = (struct ifreq *)((char *)ifrp + n);
		if (ifrp->ifr_addr.sa_family != AF_INET)
			continue;
#else
		ifnext = ifrp + 1;
#endif
		/*
		 * Need a template to preserve address info that is
		 * used below to locate the next entry.  (Otherwise,
		 * SIOCGIFFLAGS stomps over it because the requests
		 * are returned in a union.)
		 */
		(void)strlcpy(ifr.ifr_name, ifrp->ifr_name,
		    sizeof(ifr.ifr_name));
		if (ioctl(fd, SIOCGIFFLAGS, (char *)&ifr) < 0) {
			if (errno == ENXIO)
				continue;
			(void)snprintf(errbuf, PCAP_ERRBUF_SIZE,
			    "SIOCGIFFLAGS: %.*s: %s",
			    (int)sizeof(ifr.ifr_name), ifr.ifr_name,
			    pcap_strerror(errno));
			(void)close(fd);
			return (NULL);
		}

		/* Must be up and not the loopback */
		if ((ifr.ifr_flags & IFF_UP) == 0 || 
		    ISLOOPBACK(ifr.ifr_name, ifr.ifr_flags))
			continue;

		for (cp = ifrp->ifr_name; !isdigit((unsigned char)*cp); ++cp)
			continue;
		n = atoi(cp);
		if (n < minunit) {
			minunit = n;
			mp = ifrp;
		}
	}
	(void)close(fd);
	if (mp == NULL) {
		(void)strlcpy(errbuf, "no suitable device found",
		    PCAP_ERRBUF_SIZE);
		return (NULL);
	}

	(void)strlcpy(device, mp->ifr_name, sizeof(device));
	return (device);
#endif
}

int
pcap_lookupnet(const char *device, bpf_u_int32 *netp, bpf_u_int32 *maskp,
    char *errbuf)
{
	int fd;
	struct sockaddr_in *sin;
	struct ifreq ifr;

	fd = socket(AF_INET, SOCK_DGRAM, 0);
	if (fd < 0) {
		(void)snprintf(errbuf, PCAP_ERRBUF_SIZE, "socket: %s",
		    pcap_strerror(errno));
		return (-1);
	}
	memset(&ifr, 0, sizeof(ifr));
#ifdef linux
	/* XXX Work around Linux kernel bug */
	ifr.ifr_addr.sa_family = AF_INET;
#endif
	(void)strlcpy(ifr.ifr_name, device, sizeof(ifr.ifr_name));
	if (ioctl(fd, SIOCGIFADDR, (char *)&ifr) < 0) {
		if (errno == EADDRNOTAVAIL) {
			(void)snprintf(errbuf, PCAP_ERRBUF_SIZE,
			    "%s: no IPv4 address assigned", device);
		} else {
			(void)snprintf(errbuf, PCAP_ERRBUF_SIZE,
			    "SIOCGIFADDR: %s: %s",
			    device, pcap_strerror(errno));
		}
		(void)close(fd);
		return (-1);
	}
	sin = (struct sockaddr_in *)&ifr.ifr_addr;
	*netp = sin->sin_addr.s_addr;
	if (ioctl(fd, SIOCGIFNETMASK, (char *)&ifr) < 0) {
		(void)snprintf(errbuf, PCAP_ERRBUF_SIZE,
		    "SIOCGIFNETMASK: %s: %s", device, pcap_strerror(errno));
		(void)close(fd);
		return (-1);
	}
	(void)close(fd);
	*maskp = sin->sin_addr.s_addr;
	if (*maskp == 0) {
		if (IN_CLASSA(*netp))
			*maskp = IN_CLASSA_NET;
		else if (IN_CLASSB(*netp))
			*maskp = IN_CLASSB_NET;
		else if (IN_CLASSC(*netp))
			*maskp = IN_CLASSC_NET;
		else {
			(void)snprintf(errbuf, PCAP_ERRBUF_SIZE,
			    "inet class for 0x%x unknown", *netp);
			return (-1);
		}
	}
	*netp &= *maskp;
	return (0);
}
@


1.23
log
@Remove register keyword.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.22 2015/11/17 18:19:45 mmcc Exp $	*/
d85 4
a88 8
			if (curaddr->addr)
				free(curaddr->addr);
			if (curaddr->netmask)
				free(curaddr->netmask);
			if (curaddr->broadaddr)
				free(curaddr->broadaddr);
			if (curaddr->dstaddr)
				free(curaddr->dstaddr);
d100 1
a100 2
		if (curdev->description != NULL)
			free(curdev->description);
@


1.22
log
@memory.h -> string.h

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.21 2015/10/24 05:26:00 mmcc Exp $	*/
d121 1
a121 1
	register char *errbuf;
d161 3
a163 3
	register int fd, minunit, n;
	register char *cp;
	register struct ifreq *ifrp, *ifend, *ifnext, *mp;
@


1.21
log
@Cast ctype function arguments to unsigned char.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.20 2015/01/16 16:48:51 deraadt Exp $	*/
a52 1
#include <memory.h>
@


1.20
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.19 2006/03/26 20:58:50 djm Exp $	*/
d143 1
a143 1
		for (cp = ifa->ifa_name; !isdigit(*cp); ++cp)
d227 1
a227 1
		for (cp = ifrp->ifr_name; !isdigit(*cp); ++cp)
@


1.19
log
@add remaining tcpdump.org libpcap 0.9 APIs, most notably
pcap_setdirection() (which depends on the kernel-side bpf changes
committed yesterday); ok canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.18 2005/11/25 20:25:44 krw Exp $	*/
a36 1
#include <sys/param.h>
@


1.18
log
@Fix syntax error (missing ')') in #ifdef'ed out code. Spotted by lint.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.17 2005/11/18 11:05:39 djm Exp $	*/
d249 2
a250 4
pcap_lookupnet(device, netp, maskp, errbuf)
	register char *device;
	register bpf_u_int32 *netp, *maskp;
	register char *errbuf;
d252 2
a253 2
	register int fd;
	register struct sockaddr_in *sin;
@


1.17
log
@pull in the good bits of libpcap-0.9.4's API without the cross-platform
cruft. help from deraadt@@, mpf@@, jmc@@; ok mpf@@a

nb. this will break tcpdump unless it updated too
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.16 2004/01/27 06:58:03 tedu Exp $	*/
d225 1
a225 1
		    ISLOOPBACK(ifr.ifr_name, ifr.ifr_flags)
@


1.16
log
@remove $Header,  it was messing up cvs for me.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.15 2004/01/21 00:30:15 jfb Exp $	*/
d69 46
a114 7
/* Not all systems have IFF_LOOPBACK */
#ifdef IFF_LOOPBACK
#define ISLOOPBACK(p) ((p)->ifr_flags & IFF_LOOPBACK)
#else
#define ISLOOPBACK(p) ((p)->ifr_name[0] == 'l' && (p)->ifr_name[1] == 'o' && \
    (isdigit((p)->ifr_name[2]) || (p)->ifr_name[2] == '\0'))
#endif
d142 1
a142 6
#ifdef IFF_LOOPBACK
		if ((ifa->ifa_flags & IFF_LOOPBACK) != 0)
			continue;
#else
		if (strncmp(ifa->ifa_name, "lo", 2) == 0 &&
		    (ifa->ifa_name[2] == '\0' || isdigit(ifa->ifa_name[2]))) {
a143 3
		}
#endif

d224 2
a225 1
		if ((ifr.ifr_flags & IFF_UP) == 0 || ISLOOPBACK(&ifr))
@


1.15
log
@Replace some strncpy() calls with strlcpy()

tested by jose@@, ok canacar@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.14 2002/02/19 19:39:37 millert Exp $	*/
a35 4
#ifndef lint
static const char rcsid[] =
    "@@(#) $Header: /cvs/src/lib/libpcap/inet.c,v 1.14 2002/02/19 19:39:37 millert Exp $ (LBL)";
#endif
@


1.14
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.13 2000/04/26 21:25:53 jakob Exp $	*/
d38 1
a38 1
    "@@(#) $Header: /cvs/src/lib/libpcap/inet.c,v 1.13 2000/04/26 21:25:53 jakob Exp $ (LBL)";
d126 1
a126 1
		(void)strncpy(errbuf, "no suitable device found",
d132 1
a132 2
	(void)strncpy(device, mp->ifa_name, sizeof(device) - 1);
	device[sizeof(device) - 1] = '\0';
d183 2
a184 1
		strncpy(ifr.ifr_name, ifrp->ifr_name, sizeof(ifr.ifr_name));
d215 1
a215 2
	(void)strncpy(device, mp->ifr_name, sizeof(device) - 1);
	device[sizeof(device) - 1] = '\0';
d241 1
a241 1
	(void)strncpy(ifr.ifr_name, device, sizeof(ifr.ifr_name));
@


1.13
log
@sync with libpcap v0.5
add support for INET6 (kame)
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.12 2000/04/13 05:55:19 itojun Exp $	*/
d38 1
a38 1
    "@@(#) $Header: /cvs/src/lib/libpcap/inet.c,v 1.12 2000/04/13 05:55:19 itojun Exp $ (LBL)";
a49 1
#ifdef __STDC__
a51 1
#endif
@


1.12
log
@use getifaddrs, to avoid copmlicated align constraint in SIOCGIFCONF.
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.11 1999/07/20 04:49:55 deraadt Exp $	*/
d38 1
a38 1
    "@@(#) $Header: /cvs/src/lib/libpcap/inet.c,v 1.11 1999/07/20 04:49:55 deraadt Exp $ (LBL)";
d140 1
a140 1
	register char *cp, *ibuf = NULL, *nibuf;
d143 1
a143 1
	struct ifreq ifr;
a144 1
	int len = 8192;
d152 10
a161 18
	while (1) {
		ifc.ifc_len = len;
		nibuf = realloc(ibuf, len);
		if (nibuf == NULL) {
			if (ibuf)
				free(ibuf);
			close(fd);
			return (NULL);
		}
		ifc.ifc_buf = ibuf = nibuf;
		if (ioctl(fd, SIOCGIFCONF, (char *)&ifc) < 0) {
			(void)close(fd);
			free(ibuf);
			return (NULL);
		}
		if (ifc.ifc_len + sizeof(ifr) < len)
			break;
		len *= 2;
d163 1
a163 2

	ifrp = (struct ifreq *)ibuf;
d169 1
a169 1
#if BSD - 0 >= 199006
a194 1
			free(ibuf);
a213 1
		free(ibuf);
a218 1
	free(ibuf);
d246 8
a253 2
		(void)snprintf(errbuf, PCAP_ERRBUF_SIZE, "SIOCGIFADDR: %s: %s",
		    device, pcap_strerror(errno));
d260 2
a261 2
		(void)snprintf(errbuf, PCAP_ERRBUF_SIZE, "SIOCGIFNETMASK: %s: %s",
		    device, pcap_strerror(errno));
@


1.11
log
@changes brought in from v0.4; started by brad, more by me, being tested by mts
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.10 1998/08/27 22:36:33 mickey Exp $	*/
d38 1
a38 1
    "@@(#) $Header: inet.c,v 1.22 98/01/30 17:29:34 leres Exp $ (LBL)";
d65 3
d92 47
d233 1
@


1.10
log
@fix premature free() calling
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.9 1998/08/14 21:30:33 deraadt Exp $	*/
d4 1
a4 1
 * Copyright (c) 1994, 1995, 1996
d37 2
a38 2
static char rcsid[] =
    "@@(#) Header: inet.c,v 1.16 96/06/23 14:28:22 leres Exp (LBL)";
d48 1
d65 2
a66 1
#include <pcap.h>
a71 2
#include "pcap-int.h"

d76 2
a77 1
#define ISLOOPBACK(p) (strcmp((p)->ifr_name, "lo0") == 0)
d148 2
d151 3
a153 1
			    "SIOCGIFFLAGS: %s", pcap_strerror(errno));
d173 2
a174 1
		(void)strcpy(errbuf, "no suitable device found");
@


1.9
log
@realloc repair
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.8 1998/07/14 00:14:01 deraadt Exp $	*/
a165 1
	free(ibuf);
d169 1
d175 1
@


1.8
log
@buf oflows
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.7 1997/07/25 20:30:19 mickey Exp $	*/
d89 1
a89 1
	register char *cp, *ibuf = NULL;
d104 4
a107 2
		ifc.ifc_buf = ibuf = realloc(ibuf, len);
		if (ibuf == NULL) {
d111 1
@


1.7
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.6 1997/01/24 19:17:25 deraadt Exp $	*/
d98 2
a99 1
		(void)sprintf(errbuf, "socket: %s", pcap_strerror(errno));
d144 2
a145 2
			(void)sprintf(errbuf, "SIOCGIFFLAGS: %s",
			    pcap_strerror(errno));
d187 2
a188 1
		(void)sprintf(errbuf, "socket: %s", pcap_strerror(errno));
d198 1
a198 1
		(void)sprintf(errbuf, "SIOCGIFADDR: %s: %s",
d206 1
a206 1
		(void)sprintf(errbuf, "SIOCGIFNETMASK: %s: %s",
d221 2
a222 2
			(void)sprintf(errbuf, "inet class for 0x%x unknown",
			    *netp);
@


1.6
log
@SIOCGIFCONF nicely
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.5 1996/07/19 07:52:16 deraadt Exp $	*/
d49 1
a49 1
#if __STDC__
@


1.5
log
@eschew use of HAVE_SOCKADDR_SA_LEN for now
@
text
@d1 1
a1 1
/*	$OpenBSD: inet.c,v 1.4 1996/07/12 13:19:09 mickey Exp $	*/
d89 1
a89 1
	register char *cp;
d92 1
a92 1
	struct ifreq ibuf[16], ifr;
d94 1
d101 16
a116 2
	ifc.ifc_len = sizeof ibuf;
	ifc.ifc_buf = (caddr_t)ibuf;
d118 1
a118 7
	if (ioctl(fd, SIOCGIFCONF, (char *)&ifc) < 0 ||
	    ifc.ifc_len < sizeof(struct ifreq)) {
		(void)sprintf(errbuf, "SIOCGIFCONF: %s", pcap_strerror(errno));
		(void)close(fd);
		return (NULL);
	}
	ifrp = ibuf;
d146 1
d162 1
@


1.4
log
@bring it to the latest 0.2 LBL release.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d115 1
a115 1
#ifdef HAVE_SOCKADDR_SA_LEN
@


1.3
log
@merge to latest libpcap
@
text
@d1 1
a1 2
/*	$OpenBSD */
/*	$NetBSD: inet.c,v 1.2.6.1 1996/06/05 18:04:32 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1994
d38 1
a38 1
    "@@(#) Header: inet.c,v 1.4 94/06/07 01:16:50 leres Exp (LBL)";
d45 1
a45 1
#ifdef SOLARIS
d49 5
d59 1
d66 6
d115 1
a115 1
#if BSD - 0 >= 199006
d166 1
a166 1
	register u_int32_t *netp, *maskp;
d178 5
@


1.2
log
@Update to the latest LBL release.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: inet.c,v 1.2 1995/03/06 11:38:29 mycroft Exp $	*/
d155 1
a155 1
	register u_long *netp, *maskp;
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
