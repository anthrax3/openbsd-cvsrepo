head	1.17;
access;
symbols
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.16.0.14
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.10
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.6
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.26
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.22
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.20
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.18
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.16
	OPENBSD_5_0:1.15.0.14
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.12
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.10
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.6
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.6
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2017.04.27.15.46.14;	author millert;	state Exp;
branches;
next	1.16;
commitid	3mbG4h1xrOUTcQnj;

1.16
date	2014.04.11.04.08.58;	author lteo;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.11.15.02.21;	author dtucker;	state Exp;
branches;
next	1.14;

1.14
date	2007.01.02.18.31.21;	author reyk;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.18.11.52.12;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.07.19.32.39;	author mpf;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.14.08.50.37;	author canacar;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.23.01.33.16;	author frantzen;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.19.19.39.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.06.17.18.52;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.26.21.25.52;	author jakob;	state Exp;
branches;
next	1.6;

1.6
date	99.07.20.04.49.54;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.07.25.20.30.18;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.07.12.13.19.08;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.07.23.27;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.15.47.20;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove the "volatile" attribute from bpf_error().  The "volatile"
attribute is an obsolete way of saying "noreturn".  clang doesn't
recognize it and the function is already marked __dead so it is
superfluous anyway.
@
text
@/*	$OpenBSD: gencode.h,v 1.16 2014/04/11 04:08:58 lteo Exp $	*/

/*
 * Copyright (c) 1990, 1991, 1992, 1993, 1994, 1995, 1996
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/* Address qualifiers. */

#define Q_HOST		1
#define Q_NET		2
#define Q_PORT		3
#define Q_GATEWAY	4
#define Q_PROTO		5
#define Q_PROTOCHAIN	6

/* Protocol qualifiers. */

#define Q_LINK		1
#define Q_IP		2
#define Q_ARP		3
#define Q_RARP		4
#define Q_TCP		5
#define Q_UDP		6
#define Q_ICMP		7
#define Q_IGMP		8
#define Q_IGRP		9


#define	Q_ATALK		10
#define	Q_DECNET	11
#define	Q_LAT		12
#define Q_SCA		13
#define	Q_MOPRC		14
#define	Q_MOPDL		15


#define Q_IPV6		16
#define Q_ICMPV6	17
#define Q_AH		18
#define Q_ESP		19

#define Q_PIM		20
#define Q_STP		21

/* Directional qualifiers. */

#define Q_SRC		1
#define Q_DST		2
#define Q_OR		3
#define Q_AND		4
#define Q_ADDR1		5
#define Q_ADDR2		6
#define Q_ADDR3		7
#define Q_ADDR4		8

#define Q_DEFAULT	0
#define Q_UNDEF		255

struct slist;

struct stmt {
	int code;
	struct slist *jt;	/*only for relative jump in block*/
	struct slist *jf;	/*only for relative jump in block*/
	bpf_int32 k;
};

struct slist {
	struct stmt s;
	struct slist *next;
};

/* 
 * A bit vector to represent definition sets.  We assume TOT_REGISTERS
 * is smaller than 8*sizeof(atomset).
 */
typedef bpf_u_int32 atomset;
#define ATOMMASK(n) (1 << (n))
#define ATOMELEM(d, n) (d & ATOMMASK(n))

/*
 * An unbounded set.
 */
typedef bpf_u_int32 *uset;

/*
 * Total number of atomic entities, including accumulator (A) and index (X).
 * We treat all these guys similarly during flow analysis.
 */
#define N_ATOMS (BPF_MEMWORDS+2)

struct edge {
	int id;
	int code;
	uset edom;
	struct block *succ;
	struct block *pred;
	struct edge *next;	/* link list of incoming edges for a node */
};

struct block {
	int id;
	struct slist *stmts;	/* side effect stmts */
	struct stmt s;		/* branch stmt */
	int mark;
	int longjt;		/* jt branch requires long jump */
	int longjf;		/* jf branch requires long jump */
	int level;
	int offset;
	int sense;
	struct edge et;
	struct edge ef;
	struct block *head;
	struct block *link;	/* link field used by optimizer */
	uset dom;
	uset closure;
	struct edge *in_edges;
	atomset def, kill;
	atomset in_use;
	atomset out_use;
	int oval;
	int val[N_ATOMS];
};

struct arth {
	struct block *b;	/* protocol checks */
	struct slist *s;	/* stmt list */
	int regno;		/* virtual register number of result */
};

struct qual {
	unsigned char addr;
	unsigned char proto;
	unsigned char dir;
	unsigned char pad;
};

struct arth *gen_loadi(int);
struct arth *gen_load(int, struct arth *, int);
struct arth *gen_loadlen(void);
struct arth *gen_neg(struct arth *);
struct arth *gen_arth(int, struct arth *, struct arth *);

void gen_and(struct block *, struct block *);
void gen_or(struct block *, struct block *);
void gen_not(struct block *);

struct block *gen_scode(const char *, struct qual);
struct block *gen_ecode(const u_char *, struct qual);
struct block *gen_mcode(const char *, const char *, int, struct qual);
#ifdef INET6
struct block *gen_mcode6(const char *, const char *, int, struct qual);
#endif
struct block *gen_ncode(const char *, bpf_u_int32, struct qual);
struct block *gen_proto_abbrev(int);
struct block *gen_relation(int, struct arth *, struct arth *, int);
struct block *gen_less(int);
struct block *gen_greater(int);
struct block *gen_byteop(int, int, int);
struct block *gen_broadcast(int);
struct block *gen_multicast(int);
struct block *gen_inbound(int);

struct block *gen_vlan(int);

struct block *gen_pf_ifname(char *);
struct block *gen_pf_rnr(int);
struct block *gen_pf_srnr(int);
struct block *gen_pf_ruleset(char *);
struct block *gen_pf_reason(int);
struct block *gen_pf_action(int);
struct block *gen_pf_dir(int);

struct block *gen_p80211_type(int, int);
struct block *gen_p80211_fcdir(int);

void bpf_optimize(struct block **);
__dead void bpf_error(const char *, ...)
    __attribute__((__format__ (printf, 1, 2)));

void finish_parse(struct block *);
char *sdup(const char *);

struct bpf_insn *icode_to_fcode(struct block *, int *);
int pcap_parse(void);
void lex_init(char *);
void sappend(struct slist *, struct slist *);

/* XXX */
#define JT(b)  ((b)->et.succ)
#define JF(b)  ((b)->ef.succ)

extern int no_optimize;
@


1.16
log
@Zap CVS $Header tags, reduces diff with upstream's repo

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.15 2008/06/11 15:02:21 dtucker Exp $	*/
d196 1
a196 1
    __attribute__((volatile, __format__ (printf, 1, 2)));
@


1.15
log
@Import vlan support from upstream libpcap.  This allows, eg, "tcpdump vla 3"
to work on a vlan parent interface.  ok mcbride@@, "commit it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.14 2007/01/02 18:31:21 reyk Exp $	*/
a21 2
 *
 * @@(#) $Header: /cvs/src/lib/libpcap/gencode.h,v 1.14 2007/01/02 18:31:21 reyk Exp $ (LBL)
@


1.14
log
@define bpf filters to match address and header fields in IEEE 802.11
wlan frames (DLT_IEEE802_11 and DLT_IEEE802_11_RADIO linktypes). see
tcpdump(8) for details.

"Works for me" claudio@@
ok jmc@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.13 2006/07/18 11:52:12 dlg Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/lib/libpcap/gencode.h,v 1.13 2006/07/18 11:52:12 dlg Exp $ (LBL)
d182 2
@


1.13
log
@get rid of arc network support. we have no users of it so this is dead
code. however, it is still cluttering up the kernel namespace a bit. it is
better gone.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.12 2005/10/07 19:32:39 mpf Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/openbsd/src/lib/libpcap/gencode.h,v 1.12 2005/10/07 19:32:39 mpf Exp $ (LBL)
d70 4
d190 3
@


1.12
log
@Add Spanning Tree Protocol support.
Bump version to 3.1.
OK brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.11 2003/05/14 08:50:37 canacar Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/lib/libpcap/gencode.h,v 1.11 2003/05/14 08:50:37 canacar Exp $ (LBL)
a164 1
struct block *gen_acode(const u_char *, struct qual);
@


1.11
log
@libpcap and tcpdump now understand the new pflog datalink type.
old datalink type is still recognized.

ok henning@@ dhartmei@@ frantzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.10 2002/03/23 01:33:16 frantzen Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/lib/libpcap/gencode.h,v 1.10 2002/03/23 01:33:16 frantzen Exp $ (LBL)
d62 1
@


1.10
log
@language extensions for PF logs.  can specify direction, interface, rule
number, reason and action.  fix the ipv4/ipv6 distinction while I'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.9 2002/02/19 19:39:37 millert Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/lib/libpcap/gencode.h,v 1.9 2002/02/19 19:39:37 millert Exp $ (LBL)
d181 2
@


1.9
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.8 2000/12/06 17:18:52 deraadt Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/lib/libpcap/gencode.h,v 1.8 2000/12/06 17:18:52 deraadt Exp $ (LBL)
d178 6
@


1.8
log
@use __x__ formats for __attribute__ arguments; guenther@@gac.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.7 2000/04/26 21:25:52 jakob Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/lib/libpcap/gencode.h,v 1.7 2000/04/26 21:25:52 jakob Exp $ (LBL)
a179 1
#ifdef __STDC__
a181 1
#endif
@


1.7
log
@sync with libpcap v0.5
add support for INET6 (kame)
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.6 1999/07/20 04:49:54 deraadt Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/lib/libpcap/gencode.h,v 1.6 1999/07/20 04:49:54 deraadt Exp $ (LBL)
d182 1
a182 1
    __attribute__((volatile, format (printf, 1, 2)));
@


1.6
log
@changes brought in from v0.4; started by brad, more by me, being tested by mts
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.5 1997/07/25 20:30:18 mickey Exp $	*/
d23 1
a23 1
 * @@(#) $Header: gencode.h,v 1.36 96/07/17 00:11:34 leres Exp $ (LBL)
d33 1
d55 8
d73 2
d77 2
d164 1
d166 3
d196 2
@


1.5
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: gencode.h,v 1.4 1996/07/12 13:19:08 mickey Exp $	*/
d23 1
a23 1
 * @@(#) Header: gencode.h,v 1.33 96/06/23 02:21:09 leres Exp (LBL)
d44 1
d46 7
a52 4
#define	Q_DECNET	9
#define	Q_LAT		10
#define	Q_MOPRC		11
#define	Q_MOPDL		12
d149 4
a152 3
struct block *gen_scode(char *, struct qual);
struct block *gen_ecode(u_char *, struct qual);
struct block *gen_ncode(bpf_u_int32, struct qual);
d169 1
a169 1
char *sdup(char *);
@


1.4
log
@bring it to the latest 0.2 LBL release.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d158 1
a158 1
#if __STDC__
@


1.3
log
@merge to latest libpcap
@
text
@d1 1
a1 2
/*	$OpenBSD */
/*	$NetBSD: gencode.h,v 1.2.6.1 1996/06/05 18:04:30 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1990, 1991, 1992, 1993, 1994
d23 1
a23 1
 * @@(#) Header: gencode.h,v 1.20 94/06/12 14:29:30 leres Exp (LBL)
d26 1
a26 5
/*
 * filter.h must be included before this file.
 */

/* Address qualifers. */
d43 1
d45 4
a48 4
#define	Q_DECNET	8
#define	Q_LAT		9
#define	Q_MOPRC		10
#define	Q_MOPDL		11
d50 1
a50 1
/* Directional qualifers. */
d62 1
a62 1
	int32_t k;
d74 1
a74 1
typedef u_int32_t atomset;
d81 1
a81 1
typedef u_int32_t *uset;
d103 2
d118 2
a119 2
	int32_t oval;
	int32_t val[N_ATOMS];
a134 4
#ifndef __GNUC__
#define volatile
#endif

d147 1
a147 1
struct block *gen_ncode(u_int32_t, struct qual);
d158 4
a161 1
volatile void bpf_error(char *, ...);
@


1.2
log
@Update to the latest LBL release.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: gencode.h,v 1.2 1995/03/06 11:38:24 mycroft Exp $	*/
d66 1
a66 1
	long k;
d78 1
a78 1
typedef u_long atomset;
d85 1
a85 1
typedef u_long *uset;
d120 2
a121 2
	long oval;
	long val[N_ATOMS];
d153 1
a153 1
struct block *gen_ncode(u_long, struct qual);
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
