head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.6
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.36
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.32
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.30
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.28
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.26
	OPENBSD_5_0:1.13.0.24
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.22
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.20
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.16
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.18
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.14
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.12
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.10
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.8
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.8
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.12.02.02.37.30;	author dlg;	state Exp;
branches;
next	1.20;
commitid	TNZkDcviVy9QEjdX;

1.20
date	2016.11.29.18.37.02;	author jca;	state Exp;
branches;
next	1.19;
commitid	00NMX9hK1kabwR2y;

1.19
date	2015.11.17.21.39.23;	author mmcc;	state Exp;
branches;
next	1.18;
commitid	QwVD4AKITH4IBHi1;

1.18
date	2015.11.17.18.19.45;	author mmcc;	state Exp;
branches;
next	1.17;
commitid	XWxlXM1Hks3HcyxP;

1.17
date	2015.10.24.06.07.43;	author mmcc;	state Exp;
branches;
next	1.16;
commitid	TFVuAAurvIQ5dHCJ;

1.16
date	2015.01.16.03.19.57;	author lteo;	state Exp;
branches;
next	1.15;
commitid	ueE517C2m8kG4VWx;

1.15
date	2014.12.06.23.20.17;	author krw;	state Exp;
branches;
next	1.14;
commitid	dHu3Jb8ymJQQ9GXS;

1.14
date	2014.03.21.02.55.29;	author lteo;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.11.07.31.46;	author jaredy;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.07.19.32.39;	author mpf;	state Exp;
branches;
next	1.11;

1.11
date	2005.03.28.06.19.58;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.27.06.58.03;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.19.19.39.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.26.21.25.53;	author jakob;	state Exp;
branches;
next	1.7;

1.7
date	99.07.20.04.49.55;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.07.25.20.30.20;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.09.16.02.33.06;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.07.12.13.19.09;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.07.23.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.15.47.22;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@add "lldp" to the ether protocol name db.

this lets me go "tcpdump ether proto lldp" to easily read lldp packets
off the wire without other noise getting in the way.

ok deraadt@@ jca@@ sthen@@
@
text
@/*	$OpenBSD: nametoaddr.c,v 1.20 2016/11/29 18:37:02 jca Exp $	*/

/*
 * Copyright (c) 1990, 1991, 1992, 1993, 1994, 1995, 1996
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Name to id translation routines used by the scanner.
 * These functions are not time critical.
 */

#include <sys/param.h>
#include <sys/types.h>				/* concession to AIX */
#include <sys/socket.h>
#include <sys/time.h>

struct mbuf;
struct rtentry;

#include <net/if.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>

#include <ctype.h>
#include <errno.h>
#include <stdlib.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>

#include "pcap-int.h"

#include "gencode.h"
#include <pcap-namedb.h>

#ifdef HAVE_OS_PROTO_H
#include "os-proto.h"
#endif

#ifndef NTOHL
#define NTOHL(x) (x) = ntohl(x)
#define NTOHS(x) (x) = ntohs(x)
#endif

static __inline int xdtoi(int);

/*
 *  Convert host name to internet address.
 *  Return 0 upon failure.
 */
bpf_u_int32 **
pcap_nametoaddr(const char *name)
{
#ifndef h_addr
	static bpf_u_int32 *hlist[2];
#endif
	bpf_u_int32 **p;
	struct hostent *hp;

	if ((hp = gethostbyname(name)) != NULL) {
#ifndef h_addr
		hlist[0] = (bpf_u_int32 *)hp->h_addr;
		NTOHL(hp->h_addr);
		return hlist;
#else
		for (p = (bpf_u_int32 **)hp->h_addr_list; *p; ++p)
			NTOHL(**p);
		return (bpf_u_int32 **)hp->h_addr_list;
#endif
	}
	else
		return 0;
}

#ifdef INET6
struct addrinfo *
pcap_nametoaddrinfo(const char *name)
{
	struct addrinfo hints, *res;
	int error;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;	/*not really*/
	error = getaddrinfo(name, NULL, &hints, &res);
	if (error)
		return NULL;
	else
		return res;
}
#endif /*INET6*/

/*
 *  Convert net name to internet address.
 *  Return 0 upon failure.
 */
bpf_u_int32
pcap_nametonetaddr(const char *name)
{
	struct netent *np;

	if ((np = getnetbyname(name)) != NULL)
		return np->n_net;
	else
		return 0;
}

/*
 * Convert a port name to its port and protocol numbers.
 * We assume only TCP or UDP.
 * Return 0 upon failure.
 */
int
pcap_nametoport(const char *name, int *port, int *proto)
{
	struct servent *sp;
	char *other;

	sp = getservbyname(name, (char *)0);
	if (sp != NULL) {
		NTOHS(sp->s_port);
		*port = sp->s_port;
		*proto = pcap_nametoproto(sp->s_proto);
		/*
		 * We need to check /etc/services for ambiguous entries.
		 * If we find the ambiguous entry, and it has the
		 * same port number, change the proto to PROTO_UNDEF
		 * so both TCP and UDP will be checked.
		 */
		if (*proto == IPPROTO_TCP)
			other = "udp";
		else
			other = "tcp";

		sp = getservbyname(name, other);
		if (sp != 0) {
			NTOHS(sp->s_port);
#ifdef notdef
			if (*port != sp->s_port)
				/* Can't handle ambiguous names that refer
				   to different port numbers. */
				warning("ambiguous port %s in /etc/services",
					name);
#endif
			*proto = PROTO_UNDEF;
		}
		return 1;
	}
#if defined(ultrix) || defined(__osf__)
	/* Special hack in case NFS isn't in /etc/services */
	if (strcmp(name, "nfs") == 0) {
		*port = 2049;
		*proto = PROTO_UNDEF;
		return 1;
	}
#endif
	return 0;
}

int
pcap_nametoproto(const char *str)
{
	struct protoent *p;

	p = getprotobyname(str);
	if (p != 0)
		return p->p_proto;
	else
		return PROTO_UNDEF;
}

#include "ethertype.h"

struct eproto {
	char *s;
	u_short p;
};

/* Static data base of ether protocol types. */
static const struct eproto _eproto_db[] = {
	{ "pup", ETHERTYPE_PUP },
	{ "xns", ETHERTYPE_NS },
	{ "ip", ETHERTYPE_IP },
#ifdef INET6
	{ "ip6", ETHERTYPE_IPV6 },
#endif
	{ "arp", ETHERTYPE_ARP },
	{ "rarp", ETHERTYPE_REVARP },
	{ "lldp", ETHERTYPE_LLDP },
	{ "sprite", ETHERTYPE_SPRITE },
	{ "mopdl", ETHERTYPE_MOPDL },
	{ "moprc", ETHERTYPE_MOPRC },
	{ "decnet", ETHERTYPE_DN },
	{ "lat", ETHERTYPE_LAT },
	{ "sca", ETHERTYPE_SCA },
	{ "lanbridge", ETHERTYPE_LANBRIDGE },
	{ "vexp", ETHERTYPE_VEXP },
	{ "vprod", ETHERTYPE_VPROD },
	{ "atalk", ETHERTYPE_ATALK },
	{ "atalkarp", ETHERTYPE_AARP },
	{ "loopback", ETHERTYPE_LOOPBACK },
	{ "decdts", ETHERTYPE_DECDTS },
	{ "decdns", ETHERTYPE_DECDNS },
	{ (char *)0, 0 }
};
/* Accessor for tcpdump */
const struct eproto * const eproto_db = _eproto_db;

int
pcap_nametoeproto(const char *s)
{
	const struct eproto *p = _eproto_db;

	while (p->s != 0) {
		if (strcmp(p->s, s) == 0)
			return p->p;
		p += 1;
	}
	return PROTO_UNDEF;
}

#include "llc.h"

/* Static data base of LLC values. */
static const struct eproto llc_db[] = {
	{ "stp", LLCSAP_8021D },
	{ (char *)0, 0 }
};

int
pcap_nametollc(const char *s)
{
	const struct eproto *p = llc_db;

	while (p->s != 0) {
		if (strcmp(p->s, s) == 0)
			return p->p;
		p += 1;
	}
	return PROTO_UNDEF;
}

/* Hex digit to integer. */
static __inline int
xdtoi(c)
	int c;
{
	if (isdigit(c))
		return c - '0';
	else if (islower(c))
		return c - 'a' + 10;
	else
		return c - 'A' + 10;
}

int
__pcap_atoin(const char *s, bpf_u_int32 *addr)
{
	u_int n;
	int len;

	*addr = 0;
	len = 0;
	while (1) {
		n = 0;
		while (*s && *s != '.')
			n = n * 10 + *s++ - '0';
		*addr <<= 8;
		*addr |= n & 0xff;
		len += 8;
		if (*s == '\0')
			return len;
		++s;
	}
	/* NOTREACHED */
}

int
__pcap_atodn(const char *s, bpf_u_int32 *addr)
{
#define AREASHIFT 10
#define AREAMASK 0176000
#define NODEMASK 01777

	u_int node, area;

	if (sscanf((char *)s, "%d.%d", &area, &node) != 2)
		bpf_error("malformed decnet address '%s'", s);

	*addr = (area << AREASHIFT) & AREAMASK;
	*addr |= (node & NODEMASK);

	return(32);
}

/*
 * Convert 's' which has the form "xx:xx:xx:xx:xx:xx" into a new
 * ethernet address.  Assumes 's' is well formed.
 */
u_char *
pcap_ether_aton(const char *s)
{
	u_char *ep, *e;
	u_int d;

	e = ep = malloc(6);
	if (e == NULL)
		bpf_error("malloc");

	while (*s) {
		if (*s == ':')
			s += 1;
		d = xdtoi(*s++);
		if (isxdigit((unsigned char)*s)) {
			d <<= 4;
			d |= xdtoi(*s++);
		}
		*ep++ = d;
	}

	return (e);
}

#ifndef HAVE_ETHER_HOSTTON
/* Roll our own */
u_char *
pcap_ether_hostton(const char *name)
{
	struct pcap_etherent *ep;
	u_char *ap;
	static FILE *fp = NULL;
	static init = 0;

	if (!init) {
		fp = fopen(PCAP_ETHERS_FILE, "r");
		++init;
		if (fp == NULL)
			return (NULL);
	} else if (fp == NULL)
		return (NULL);
	else
		rewind(fp);
	
	while ((ep = pcap_next_etherent(fp)) != NULL) {
		if (strcmp(ep->name, name) == 0) {
			ap = malloc(6);
			if (ap != NULL) {
				memcpy(ap, ep->addr, 6);
				return (ap);
			}
			break;
		}
	}
	return (NULL);
}
#else

/* Use the os supplied routines */
u_char *
pcap_ether_hostton(const char *name)
{
	u_char *ap;
	u_char a[6];

	ap = NULL;
	if (ether_hostton(name, (struct ether_addr *)a) == 0) {
		ap = malloc(6);
		if (ap != NULL)
			memcpy((char *)ap, (char *)a, 6);
	}
	return (ap);
}
#endif

u_short
__pcap_nametodnaddr(const char *name)
{
#ifdef	DECNETLIB
	struct nodeent *getnodebyname();
	struct nodeent *nep;
	unsigned short res;

	nep = getnodebyname(name);
	if (nep == ((struct nodeent *)0))
		bpf_error("unknown decnet host name '%s'\n", name);

	memcpy((char *)&res, (char *)nep->n_addr, sizeof(unsigned short));
	return(res);
#else
	bpf_error("decnet name support not included, '%s' cannot be translated\n",
		name);
	/* NOTREACHED */
#endif
}
@


1.20
log
@Stop exporting the eproto_db array, export a pointer to it instead.

tcpdump directly uses eproto_db even though it is not part of the
libpcap API.  This means that we can't freely add members to this array,
else ld.so complains about size mismatches.  Keep the data in a static
array instead and make it usable by tcpdump through a pointer whose size
won't change in the future.  A minor bump is enough here for ld.so to
stop complaining.

While here, mark _eproto_db and llc_db as const, as they are meant to
be.

Suggested by and ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.19 2015/11/17 21:39:23 mmcc Exp $	*/
d205 1
@


1.19
log
@Remove register keyword.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.18 2015/11/17 18:19:45 mmcc Exp $	*/
d196 1
a196 1
struct eproto eproto_db[] = {
d221 2
d227 1
a227 1
	struct eproto *p = eproto_db;
d240 1
a240 1
static struct eproto llc_db[] = {
d248 1
a248 1
	struct eproto *p = llc_db;
@


1.18
log
@memory.h -> string.h

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.17 2015/10/24 06:07:43 mmcc Exp $	*/
d259 1
a259 1
	register int c;
d316 2
a317 2
	register u_char *ep, *e;
	register u_int d;
d342 2
a343 2
	register struct pcap_etherent *ep;
	register u_char *ap;
d375 1
a375 1
	register u_char *ap;
@


1.17
log
@Cast isxdigit()'s argument to unsigned char.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.16 2015/01/16 03:19:57 lteo Exp $	*/
a42 1
#include <memory.h>
d45 1
@


1.16
log
@Remove pointless casts for several malloc/calloc/free calls.  No object
file change.
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.15 2014/12/06 23:20:17 krw Exp $	*/
d327 1
a327 1
		if (isxdigit(*s)) {
@


1.15
log
@A few last 'easy' #include dedups.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.14 2014/03/21 02:55:29 lteo Exp $	*/
d319 1
a319 1
	e = ep = (u_char *)malloc(6);
d359 1
a359 1
			ap = (u_char *)malloc(6);
d380 1
a380 1
		ap = (u_char *)malloc(6);
@


1.14
log
@Remove #ifdef lint block, since lint is gone.  This #ifdef block was a
local addition that has never been part of upstream.  No binary change.

feedback from guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.13 2006/01/11 07:31:46 jaredy Exp $	*/
a38 4
#ifdef INET6
#include <netdb.h>
#include <sys/socket.h>
#endif /*INET6*/
@


1.13
log
@- check for malloc failure
- plug some memleaks
- avoid close(-1) when open() fails in pcap_open_live()

sent upstream where applicable

ok djm moritz
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.12 2005/10/07 19:32:39 mpf Exp $	*/
a409 10
#ifdef lint
	/*
	 * Arguably, lint should assume that functions which don't return
	 * (i.e. that contain no return statements and whose ends are
	 * unreachable) actually return a value, so callers won't get
	 * warnings for using that value (since they won't actually
	 * be doing so).  However, most lints don't seem to do that...
	 */
	return (0);
#endif
@


1.12
log
@Add Spanning Tree Protocol support.
Bump version to 3.1.
OK brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.11 2005/03/28 06:19:58 tedu Exp $	*/
d324 2
@


1.11
log
@add some const to ether_*.  remove bonus prototypes this brought out.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.10 2004/01/27 06:58:03 tedu Exp $	*/
d230 21
@


1.10
log
@remove $Header,  it was messing up cvs for me.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.9 2002/02/19 19:39:37 millert Exp $	*/
a351 4
#if !defined(sgi) && !defined(__NetBSD__)
extern int ether_hostton(char *, struct ether_addr *);
#endif

d360 1
a360 1
	if (ether_hostton((char *)name, (struct ether_addr *)a) == 0) {
@


1.9
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.8 2000/04/26 21:25:53 jakob Exp $	*/
a25 5

#ifndef lint
static const char rcsid[] =
    "@@(#) $Header: /cvs/src/lib/libpcap/nametoaddr.c,v 1.8 2000/04/26 21:25:53 jakob Exp $ (LBL)";
#endif
@


1.8
log
@sync with libpcap v0.5
add support for INET6 (kame)
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.7 1999/07/20 04:49:55 deraadt Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/lib/libpcap/nametoaddr.c,v 1.7 1999/07/20 04:49:55 deraadt Exp $ (LBL)";
a36 1
#ifdef __STDC__
a38 1
#endif
@


1.7
log
@changes brought in from v0.4; started by brad, more by me, being tested by mts
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.6 1997/07/25 20:30:20 mickey Exp $	*/
d29 1
a29 1
    "@@(#) $Header: nametoaddr.c,v 1.48 98/07/12 13:15:36 leres Exp $ (LBL)";
d46 4
d102 18
d211 3
d359 1
a359 1
#ifndef sgi
d397 1
d399 8
a406 1
	return 0;
@


1.6
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.5 1996/09/16 02:33:06 tholo Exp $	*/
d28 2
a29 2
static char rcsid[] =
    "@@(#) Header: nametoaddr.c,v 1.38 96/06/17 02:42:50 leres Exp (LBL)";
d33 1
d35 1
d52 5
a56 1
#include <pcap.h>
a57 1
#include <stdio.h>
a62 3
#include "pcap-int.h"
#include "gencode.h"

d196 1
d234 2
a235 2
bpf_u_int32
__pcap_atoin(const char *s)
a236 1
	bpf_u_int32 addr = 0;
d238 1
d240 2
d246 3
a248 2
		addr <<= 8;
		addr |= n & 0xff;
d250 1
a250 1
			return addr;
d256 2
a257 2
bpf_u_int32
__pcap_atodn(const char *s)
a262 1
	bpf_u_int32 addr = 0;
d268 2
a269 2
	addr = (area << AREASHIFT) & AREAMASK;
	addr |= (node & NODEMASK);
d271 1
a271 1
	return(addr);
d349 1
a349 1
			memcpy(ap, a, 6);
@


1.5
log
@Use __inline
@
text
@d1 1
a1 1
/*	$OpenBSD: nametoaddr.c,v 1.4 1996/07/12 13:19:09 mickey Exp $	*/
d35 1
a35 1
#if __STDC__
@


1.4
log
@bring it to the latest 0.2 LBL release.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 1
a66 1
static inline int xdtoi(int);
d219 1
a219 1
static inline int
d367 3
@


1.3
log
@merge to latest libpcap
@
text
@d1 1
a1 2
/*	$OpenBSD */
/*	$NetBSD: nametoaddr.c,v 1.3.6.1 1996/06/05 18:04:34 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1990, 1991, 1992, 1993, 1994
d29 1
a29 1
    "@@(#) Header: nametoaddr.c,v 1.21 94/06/20 19:07:54 leres Exp (LBL)";
d34 6
d47 2
d53 3
a55 3
#ifdef __NetBSD__
#include <stdlib.h>
#include <string.h>
d58 1
a60 4
#ifndef __GNUC__
#define inline
#endif

d72 1
a72 1
u_int32_t **
d76 1
a76 1
	static u_int32_t *hlist[2];
d78 1
a78 1
	u_int32_t **p;
d83 1
a83 1
		hlist[0] = (u_int32_t *)hp->h_addr;
d87 1
a87 1
		for (p = (u_int32_t **)hp->h_addr_list; *p; ++p)
d89 1
a89 1
		return (u_int32_t **)hp->h_addr_list;
d100 1
a100 1
u_long
d141 1
a144 1
#ifdef notdef
a146 2
#else
			;
d231 1
a231 1
u_long
d234 1
a234 1
	u_long addr = 0;
d250 1
a250 1
u_long
d257 1
a257 1
	u_long addr = 0;
d295 1
a295 1
#ifndef ETHER_SERVICE
d328 5
a338 3
#ifndef sgi
	extern int ether_hostton(char *, struct ether_addr *);
#endif
d341 1
a341 1
	if (ether_hostton((char*)name, (struct ether_addr *)a) == 0) {
@


1.2
log
@Update to the latest LBL release.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: nametoaddr.c,v 1.3 1995/04/29 05:42:23 cgd Exp $	*/
d68 1
a68 1
u_long **
d72 1
a72 1
	static u_long *hlist[2];
d74 1
a74 1
	u_long **p;
d79 1
a79 1
		hlist[0] = (u_long *)hp->h_addr;
d83 1
a83 1
		for (p = (u_long **)hp->h_addr_list; *p; ++p)
d85 1
a85 1
		return (u_long **)hp->h_addr_list;
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
