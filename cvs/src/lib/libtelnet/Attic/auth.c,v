head	1.6;
access;
symbols
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.14
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.12
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.10
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2003.05.14.01.46.51;	author hin;	state dead;
branches;
next	1.5;

1.5
date	2002.03.22.13.49.27;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.25.10.23.05;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	98.03.12.04.48.45;	author art;	state Exp;
branches;
next	1.2;

1.2
date	96.03.19.23.15.48;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.43.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.43.11;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Get rid of libtelnet, it is compiled into the tree programs
(telnetd, telnet and tn3270) that use them instead.
This gets rid of a really hairy dependency between telnet and libtelnet.

ok millert@@
@
text
@/*     $OpenBSD: auth.c,v 1.5 2002/03/22 13:49:27 hin Exp $    */

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
/* from: static char sccsid[] = "@@(#)auth.c    8.3 (Berkeley) 5/30/95" */
/* from: static char *rcsid = "$NetBSD: auth.c,v 1.5 1996/02/24 01:15:17 jtk Exp $"; */
#endif /* not lint */

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/*
 * Copyright (C) 1990 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */

/* "$KTH: auth.c,v 1.23 2000/01/18 03:09:34 assar Exp $" */

#if	defined(AUTHENTICATION)
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#define	AUTH_NAMES
#include <arpa/telnet.h>
#include <stdlib.h>
#include <string.h>

#include "encrypt.h"
#include "auth.h"
#include "misc-proto.h"
#include "auth-proto.h"

#define	typemask(x)		(1<<((x)-1))

#ifdef	KRB4_ENCPWD
extern krb4encpwd_init();
extern krb4encpwd_send();
extern krb4encpwd_is();
extern krb4encpwd_reply();
extern krb4encpwd_status();
extern krb4encpwd_printsub();
#endif

#ifdef	RSA_ENCPWD
extern rsaencpwd_init();
extern rsaencpwd_send();
extern rsaencpwd_is();
extern rsaencpwd_reply();
extern rsaencpwd_status();
extern rsaencpwd_printsub();
#endif

int auth_debug_mode = 0;
int auth_has_failed  = 0;
int auth_enable_encrypt = 0;
static 	const	char	*Name = "Noname";
static	int	Server = 0;
static	Authenticator	*authenticated = 0;
static	int	authenticating = 0;
static	int	validuser = 0;
static	unsigned char	_auth_send_data[256];
static	unsigned char	*auth_send_data;
static	int	auth_send_cnt = 0;

/*
 * Authentication types supported.  Plese note that these are stored
 * in priority order, i.e. try the first one first.
 */
Authenticator authenticators[] = {
#ifdef UNSAFE
    { AUTHTYPE_UNSAFE, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
      unsafe_init,
      unsafe_send,
      unsafe_is,
      unsafe_reply,
      unsafe_status,
      unsafe_printsub },
#endif
#ifdef SRA
    { AUTHTYPE_SRA, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
      sra_init,
      sra_send,
      sra_is,
      sra_reply,
      sra_status,
      sra_printsub },
#endif
#ifdef	SPX
    { AUTHTYPE_SPX, AUTH_WHO_CLIENT|AUTH_HOW_MUTUAL,
      spx_init,
      spx_send,
      spx_is,
      spx_reply,
      spx_status,
      spx_printsub },
    { AUTHTYPE_SPX, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
      spx_init,
      spx_send,
      spx_is,
      spx_reply,
      spx_status,
      spx_printsub },
#endif
#ifdef	KRB5
    { AUTHTYPE_KERBEROS_V5, AUTH_WHO_CLIENT|AUTH_HOW_MUTUAL,
      kerberos5_init,
      kerberos5_send_mutual,
      kerberos5_is,
      kerberos5_reply,
      kerberos5_status,
      kerberos5_printsub },
    { AUTHTYPE_KERBEROS_V5, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
      kerberos5_init,
      kerberos5_send_oneway,
      kerberos5_is,
      kerberos5_reply,
      kerberos5_status,
      kerberos5_printsub },
#endif
#ifdef	KRB4
    { AUTHTYPE_KERBEROS_V4, AUTH_WHO_CLIENT|AUTH_HOW_MUTUAL,
      kerberos4_init,
      kerberos4_send_mutual,
      kerberos4_is,
      kerberos4_reply,
      kerberos4_status,
      kerberos4_printsub },
    { AUTHTYPE_KERBEROS_V4, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
      kerberos4_init,
      kerberos4_send_oneway,
      kerberos4_is,
      kerberos4_reply,
      kerberos4_status,
      kerberos4_printsub },
#endif
#ifdef	KRB4_ENCPWD
    { AUTHTYPE_KRB4_ENCPWD, AUTH_WHO_CLIENT|AUTH_HOW_MUTUAL,
      krb4encpwd_init,
      krb4encpwd_send,
      krb4encpwd_is,
      krb4encpwd_reply,
      krb4encpwd_status,
      krb4encpwd_printsub },
#endif
#ifdef	RSA_ENCPWD
    { AUTHTYPE_RSA_ENCPWD, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
      rsaencpwd_init,
      rsaencpwd_send,
      rsaencpwd_is,
      rsaencpwd_reply,
      rsaencpwd_status,
      rsaencpwd_printsub },
#endif
    { 0, },
};

static Authenticator NoAuth = { 0 };

static int	i_support = 0;
static int	i_wont_support = 0;

Authenticator *
findauthenticator(int type, int way)
{
    Authenticator *ap = authenticators;

    while (ap->type && (ap->type != type || ap->way != way))
	++ap;
    return(ap->type ? ap : 0);
}

void
auth_init(const char *name, int server)
{
    Authenticator *ap = authenticators;

    Server = server;
    Name = name;

    i_support = 0;
    authenticated = 0;
    authenticating = 0;
    while (ap->type) {
	if (!ap->init || (*ap->init)(ap, server)) {
	    i_support |= typemask(ap->type);
	    if (auth_debug_mode)
		printf(">>>%s: I support auth type %d %d\r\n",
		       Name,
		       ap->type, ap->way);
	}
	else if (auth_debug_mode)
	    printf(">>>%s: Init failed: auth type %d %d\r\n",
		   Name, ap->type, ap->way);
	++ap;
    }
}

void
auth_disable_name(char *name)
{
    int x;
    for (x = 0; x < AUTHTYPE_CNT; ++x) {
	if (!strcasecmp(name, AUTHTYPE_NAME(x))) {
	    i_wont_support |= typemask(x);
	    break;
	}
    }
}

int
getauthmask(char *type, int *maskp)
{
    int x;

    if (!strcasecmp(type, AUTHTYPE_NAME(0))) {
	*maskp = -1;
	return(1);
    }

    for (x = 1; x < AUTHTYPE_CNT; ++x) {
	if (!strcasecmp(type, AUTHTYPE_NAME(x))) {
	    *maskp = typemask(x);
	    return(1);
	}
    }
    return(0);
}

int
auth_enable(char *type)
{
    return(auth_onoff(type, 1));
}

int
auth_disable(char *type)
{
    return(auth_onoff(type, 0));
}

int
auth_onoff(char *type, int on)
{
    int i, mask = -1;
    Authenticator *ap;

    if (!strcasecmp(type, "?") || !strcasecmp(type, "help")) {
	printf("auth %s 'type'\n", on ? "enable" : "disable");
	printf("Where 'type' is one of:\n");
	printf("\t%s\n", AUTHTYPE_NAME(0));
	mask = 0;
	for (ap = authenticators; ap->type; ap++) {
	    if ((mask & (i = typemask(ap->type))) != 0)
		continue;
	    mask |= i;
	    printf("\t%s\n", AUTHTYPE_NAME(ap->type));
	}
	return(0);
    }

    if (!getauthmask(type, &mask)) {
	printf("%s: invalid authentication type\n", type);
	return(0);
    }
    if (on)
	i_wont_support &= ~mask;
    else
	i_wont_support |= mask;
    return(1);
}

int
auth_togdebug(int on)
{
    if (on < 0)
	auth_debug_mode ^= 1;
    else
	auth_debug_mode = on;
    printf("auth debugging %s\n", auth_debug_mode ? "enabled" : "disabled");
    return(1);
}

int
auth_status(void)
{
    Authenticator *ap;
    int i, mask;

    if (i_wont_support == -1)
	printf("Authentication disabled\n");
    else
	printf("Authentication enabled\n");

    mask = 0;
    for (ap = authenticators; ap->type; ap++) {
	if ((mask & (i = typemask(ap->type))) != 0)
	    continue;
	mask |= i;
	printf("%s: %s\n", AUTHTYPE_NAME(ap->type),
	       (i_wont_support & typemask(ap->type)) ?
	       "disabled" : "enabled");
    }
    return(1);
}

/*
 * This routine is called by the server to start authentication
 * negotiation.
 */
void
auth_request(void)
{
    static unsigned char str_request[64] = { IAC, SB,
					     TELOPT_AUTHENTICATION,
					     TELQUAL_SEND, };
    Authenticator *ap = authenticators;
    unsigned char *e = str_request + 4;

    if (!authenticating) {
	authenticating = 1;
	while (ap->type) {
	    if (i_support & ~i_wont_support & typemask(ap->type)) {
		if (auth_debug_mode) {
		    printf(">>>%s: Sending type %d %d\r\n",
			   Name, ap->type, ap->way);
		}
		*e++ = ap->type;
		*e++ = ap->way;
	    }
	    ++ap;
	}
	*e++ = IAC;
	*e++ = SE;
	telnet_net_write(str_request, e - str_request);
	printsub('>', &str_request[2], e - str_request - 2);
    }
}

/*
 * This is called when an AUTH SEND is received.
 * It should never arrive on the server side (as only the server can
 * send an AUTH SEND).
 * You should probably respond to it if you can...
 *
 * If you want to respond to the types out of order (i.e. even
 * if he sends  LOGIN KERBEROS and you support both, you respond
 * with KERBEROS instead of LOGIN (which is against what the
 * protocol says)) you will have to hack this code...
 */
void
auth_send(unsigned char *data, int cnt)
{
    Authenticator *ap;
    static unsigned char str_none[] = { IAC, SB, TELOPT_AUTHENTICATION,
					TELQUAL_IS, AUTHTYPE_NULL, 0,
					IAC, SE };
    if (Server) {
	if (auth_debug_mode) {
	    printf(">>>%s: auth_send called!\r\n", Name);
	}
	return;
    }

    if (auth_debug_mode) {
	printf(">>>%s: auth_send got:", Name);
	printd(data, cnt); printf("\r\n");
    }

    /*
     * Save the data, if it is new, so that we can continue looking
     * at it if the authorization we try doesn't work
     */
    if (data < _auth_send_data ||
	data > _auth_send_data + sizeof(_auth_send_data)) {
	auth_send_cnt = cnt > sizeof(_auth_send_data)
	    ? sizeof(_auth_send_data)
	    : cnt;
	memmove(_auth_send_data, data, auth_send_cnt);
	auth_send_data = _auth_send_data;
    } else {
	/*
	 * This is probably a no-op, but we just make sure
	 */
	auth_send_data = data;
	auth_send_cnt = cnt;
    }
    while ((auth_send_cnt -= 2) >= 0) {
	if (auth_debug_mode)
	    printf(">>>%s: He supports %d\r\n",
		   Name, *auth_send_data);
	if ((i_support & ~i_wont_support) & typemask(*auth_send_data)) {
	    ap = findauthenticator(auth_send_data[0],
				   auth_send_data[1]);
	    if (ap && ap->send) {
		if (auth_debug_mode)
		    printf(">>>%s: Trying %d %d\r\n",
			   Name, auth_send_data[0],
			   auth_send_data[1]);
		if ((*ap->send)(ap)) {
		    /*
		     * Okay, we found one we like
		     * and did it.
		     * we can go home now.
		     */
		    if (auth_debug_mode)
			printf(">>>%s: Using type %d\r\n",
			       Name, *auth_send_data);
		    auth_send_data += 2;
		    return;
		}
	    }
	    /* else
	     *	just continue on and look for the
	     *	next one if we didn't do anything.
	     */
	}
	auth_send_data += 2;
    }
    telnet_net_write(str_none, sizeof(str_none));
    printsub('>', &str_none[2], sizeof(str_none) - 2);
    if (auth_debug_mode)
	printf(">>>%s: Sent failure message\r\n", Name);
    auth_finished(0, AUTH_REJECT);
    auth_has_failed = 1;
#ifdef KANNAN
    /*
     *  We requested strong authentication, however no mechanisms worked.
     *  Therefore, exit on client end.
     */
    printf("Unable to securely authenticate user ... exit\n");
    exit(0);
#endif /* KANNAN */
}

void
auth_send_retry(void)
{
    /*
     * if auth_send_cnt <= 0 then auth_send will end up rejecting
     * the authentication and informing the other side of this.
	 */
    auth_send(auth_send_data, auth_send_cnt);
}

void
auth_is(unsigned char *data, int cnt)
{
    Authenticator *ap;

    if (cnt < 2)
	return;

    if (data[0] == AUTHTYPE_NULL) {
	auth_finished(0, AUTH_REJECT);
	return;
    }

    if ((ap = findauthenticator(data[0], data[1]))) {
	if (ap->is)
	    (*ap->is)(ap, data+2, cnt-2);
    } else if (auth_debug_mode)
	printf(">>>%s: Invalid authentication in IS: %d\r\n",
	       Name, *data);
}

void
auth_reply(unsigned char *data, int cnt)
{
    Authenticator *ap;

    if (cnt < 2)
	return;

    if ((ap = findauthenticator(data[0], data[1]))) {
	if (ap->reply)
	    (*ap->reply)(ap, data+2, cnt-2);
    } else if (auth_debug_mode)
	printf(">>>%s: Invalid authentication in SEND: %d\r\n",
	       Name, *data);
}

void
auth_name(unsigned char *data, int cnt)
{
    char savename[256];

    if (cnt < 1) {
	if (auth_debug_mode)
	    printf(">>>%s: Empty name in NAME\r\n", Name);
	return;
    }
    if (cnt > sizeof(savename) - 1) {
	if (auth_debug_mode)
	    printf(">>>%s: Name in NAME (%d) exceeds %lu length\r\n",
		   Name, cnt, (unsigned long)(sizeof(savename)-1));
	return;
    }
    memmove(savename, data, cnt);
    savename[cnt] = '\0';	/* Null terminate */
    if (auth_debug_mode)
	printf(">>>%s: Got NAME [%s]\r\n", Name, savename);
    auth_encrypt_user(savename);
}

int
auth_sendname(unsigned char *cp, int len)
{
    static unsigned char str_request[256+6]
	= { IAC, SB, TELOPT_AUTHENTICATION, TELQUAL_NAME, };
    unsigned char *e = str_request + 4;
    unsigned char *ee = &str_request[sizeof(str_request)-2];

    while (--len >= 0) {
	if ((*e++ = *cp++) == IAC)
	    *e++ = IAC;
	if (e >= ee)
	    return(0);
    }
    *e++ = IAC;
    *e++ = SE;
    telnet_net_write(str_request, e - str_request);
    printsub('>', &str_request[2], e - &str_request[2]);
    return(1);
}

void
auth_finished(Authenticator *ap, int result)
{
    if (!(authenticated = ap))
	authenticated = &NoAuth;
    validuser = result;
}

/* ARGSUSED */
static void
auth_intr(int sig)
{
    auth_finished(0, AUTH_REJECT);
}

int
auth_wait(char *name, size_t name_sz)
{
    if (auth_debug_mode)
	printf(">>>%s: in auth_wait.\r\n", Name);

    if (Server && !authenticating)
	return(0);

    signal(SIGALRM, auth_intr);
    alarm(30);
    while (!authenticated)
	if (telnet_spin())
	    break;
    alarm(0);
    signal(SIGALRM, SIG_DFL);

    /*
     * Now check to see if the user is valid or not
     */
    if (!authenticated || authenticated == &NoAuth)
	return(AUTH_REJECT);

    if (validuser == AUTH_VALID)
	validuser = AUTH_USER;

    if (authenticated->status)
	validuser = (*authenticated->status)(authenticated,
					     name, name_sz,
					     validuser);
    return(validuser);
}

void
auth_debug(int mode)
{
    auth_debug_mode = mode;
}

void
auth_printsub(unsigned char *data, int cnt, unsigned char *buf, int buflen)
{
    Authenticator *ap;

    if ((ap = findauthenticator(data[1], data[2])) && ap->printsub)
	(*ap->printsub)(data, cnt, buf, buflen);
    else
	auth_gen_printsub(data, cnt, buf, buflen);
}

void
auth_gen_printsub(unsigned char *data, int cnt, unsigned char *buf, int buflen)
{
    unsigned char *cp;
    unsigned char tbuf[16];

    cnt -= 3;
    data += 3;
    buf[buflen-1] = '\0';
    buf[buflen-2] = '*';
    buflen -= 2;
    for (; cnt > 0; cnt--, data++) {
	snprintf(tbuf, sizeof(tbuf), " %d", *data);
	for (cp = tbuf; *cp && buflen > 0; --buflen)
	    *buf++ = *cp++;
	if (buflen <= 0)
	    return;
    }
    *buf = '\0';
}
#endif
@


1.5
log
@Telnet encryption warning messages, taken from kth-krb4-1.1.1.

(krb4-1.1.1 will be imported after release)

Noone bothered to look at this, but I've used this for a couple of weeks,
and i really want this to go in before release.
@
text
@d1 1
a1 1
/*     $OpenBSD: auth.c,v 1.4 2001/05/25 10:23:05 hin Exp $    */
@


1.4
log
@KerberosV stuff taken from Heimdal.
@
text
@d1 1
a1 1
/*     $OpenBSD: auth.c,v 1.3 1998/03/12 04:48:45 art Exp $    */
d111 2
d481 1
@


1.3
log
@support for encryption from kth-krb 0.9.8
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.2 1996/03/19 23:15:48 niklas Exp $	*/
d37 1
a37 1
/* from: static char sccsid[] = "@@(#)auth.c	8.3 (Berkeley) 5/30/95" */
d73 1
a75 1

d111 1
a111 1
static 	char	*Name = "Noname";
d125 18
d144 14
a157 14
	{ AUTHTYPE_SPX, AUTH_WHO_CLIENT|AUTH_HOW_MUTUAL,
				spx_init,
				spx_send,
				spx_is,
				spx_reply,
				spx_status,
				spx_printsub },
	{ AUTHTYPE_SPX, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
				spx_init,
				spx_send,
				spx_is,
				spx_reply,
				spx_status,
				spx_printsub },
d160 14
a173 15
	{ AUTHTYPE_KERBEROS_V5, AUTH_WHO_CLIENT|AUTH_HOW_MUTUAL,
				kerberos5_init,
				kerberos5_send_mutual,
				kerberos5_is,
				kerberos5_reply,
				kerberos5_status,
				kerberos5_printsub },

	{ AUTHTYPE_KERBEROS_V5, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
				kerberos5_init,
				kerberos5_send_oneway,
				kerberos5_is,
				kerberos5_reply,
				kerberos5_status,
				kerberos5_printsub },
d176 14
a189 15
	{ AUTHTYPE_KERBEROS_V4, AUTH_WHO_CLIENT|AUTH_HOW_MUTUAL,
				kerberos4_init,
				kerberos4_send_mutual,
				kerberos4_is,
				kerberos4_reply,
				kerberos4_status,
				kerberos4_printsub },

	{ AUTHTYPE_KERBEROS_V4, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
				kerberos4_init,
				kerberos4_send_oneway,
				kerberos4_is,
				kerberos4_reply,
				kerberos4_status,
				kerberos4_printsub },
d192 7
a198 7
	{ AUTHTYPE_KRB4_ENCPWD, AUTH_WHO_CLIENT|AUTH_HOW_MUTUAL,
				krb4encpwd_init,
				krb4encpwd_send,
				krb4encpwd_is,
				krb4encpwd_reply,
				krb4encpwd_status,
				krb4encpwd_printsub },
d201 7
a207 7
	{ AUTHTYPE_RSA_ENCPWD, AUTH_WHO_CLIENT|AUTH_HOW_ONE_WAY,
				rsaencpwd_init,
				rsaencpwd_send,
				rsaencpwd_is,
				rsaencpwd_reply,
				rsaencpwd_status,
				rsaencpwd_printsub },
d209 1
a209 1
	{ 0, },
d217 2
a218 4
	Authenticator *
findauthenticator(type, way)
	int type;
	int way;
d220 1
a220 1
	Authenticator *ap = authenticators;
d222 3
a224 3
	while (ap->type && (ap->type != type || ap->way != way))
		++ap;
	return(ap->type ? ap : 0);
d227 2
a228 4
	void
auth_init(name, server)
	char *name;
	int server;
d230 1
a230 1
	Authenticator *ap = authenticators;
d232 2
a233 2
	Server = server;
	Name = name;
d235 10
a244 15
	i_support = 0;
	authenticated = 0;
	authenticating = 0;
	while (ap->type) {
		if (!ap->init || (*ap->init)(ap, server)) {
			i_support |= typemask(ap->type);
			if (auth_debug_mode)
				printf(">>>%s: I support auth type %d %d\r\n",
					Name,
					ap->type, ap->way);
		}
		else if (auth_debug_mode)
			printf(">>>%s: Init failed: auth type %d %d\r\n",
				Name, ap->type, ap->way);
		++ap;
d246 5
d253 8
a260 10
	void
auth_disable_name(name)
	char *name;
{
	int x;
	for (x = 0; x < AUTHTYPE_CNT; ++x) {
		if (!strcasecmp(name, AUTHTYPE_NAME(x))) {
			i_wont_support |= typemask(x);
			break;
		}
d262 1
d265 9
a273 11
	int
getauthmask(type, maskp)
	char *type;
	int *maskp;
{
	register int x;

	if (!strcasecmp(type, AUTHTYPE_NAME(0))) {
		*maskp = -1;
		return(1);
	}
d275 4
a278 5
	for (x = 1; x < AUTHTYPE_CNT; ++x) {
		if (!strcasecmp(type, AUTHTYPE_NAME(x))) {
			*maskp = typemask(x);
			return(1);
		}
d280 2
a281 1
	return(0);
d284 4
a287 45
	int
auth_enable(type)
	char *type;
{
	return(auth_onoff(type, 1));
}

	int
auth_disable(type)
	char *type;
{
	return(auth_onoff(type, 0));
}

	int
auth_onoff(type, on)
	char *type;
	int on;
{
	int i, mask = -1;
	Authenticator *ap;

	if (!strcasecmp(type, "?") || !strcasecmp(type, "help")) {
		printf("auth %s 'type'\n", on ? "enable" : "disable");
		printf("Where 'type' is one of:\n");
		printf("\t%s\n", AUTHTYPE_NAME(0));
		mask = 0;
		for (ap = authenticators; ap->type; ap++) {
			if ((mask & (i = typemask(ap->type))) != 0)
				continue;
			mask |= i;
			printf("\t%s\n", AUTHTYPE_NAME(ap->type));
		}
		return(0);
	}

	if (!getauthmask(type, &mask)) {
		printf("%s: invalid authentication type\n", type);
		return(0);
	}
	if (on)
		i_wont_support &= ~mask;
	else
		i_wont_support |= mask;
	return(1);
d290 4
a293 10
	int
auth_togdebug(on)
	int on;
{
	if (on < 0)
		auth_debug_mode ^= 1;
	else
		auth_debug_mode = on;
	printf("auth debugging %s\n", auth_debug_mode ? "enabled" : "disabled");
	return(1);
d296 2
a297 2
	int
auth_status()
d299 2
a300 7
	Authenticator *ap;
	int i, mask;

	if (i_wont_support == -1)
		printf("Authentication disabled\n");
	else
		printf("Authentication enabled\n");
d302 4
d308 4
a311 6
		if ((mask & (i = typemask(ap->type))) != 0)
			continue;
		mask |= i;
		printf("%s: %s\n", AUTHTYPE_NAME(ap->type),
			(i_wont_support & typemask(ap->type)) ?
					"disabled" : "enabled");
d313 46
a358 1
	return(1);
d365 2
a366 2
	void
auth_request()
d368 13
a380 18
	static unsigned char str_request[64] = { IAC, SB,
						 TELOPT_AUTHENTICATION,
						 TELQUAL_SEND, };
	Authenticator *ap = authenticators;
	unsigned char *e = str_request + 4;

	if (!authenticating) {
		authenticating = 1;
		while (ap->type) {
			if (i_support & ~i_wont_support & typemask(ap->type)) {
				if (auth_debug_mode) {
					printf(">>>%s: Sending type %d %d\r\n",
						Name, ap->type, ap->way);
				}
				*e++ = ap->type;
				*e++ = ap->way;
			}
			++ap;
d382 4
a385 4
		*e++ = IAC;
		*e++ = SE;
		net_write(str_request, e - str_request);
		printsub('>', &str_request[2], e - str_request - 2);
d387 5
d405 8
a412 16
	void
auth_send(data, cnt)
	unsigned char *data;
	int cnt;
{
	Authenticator *ap;
	static unsigned char str_none[] = { IAC, SB, TELOPT_AUTHENTICATION,
					    TELQUAL_IS, AUTHTYPE_NULL, 0,
					    IAC, SE };
	if (Server) {
		if (auth_debug_mode) {
			printf(">>>%s: auth_send called!\r\n", Name);
		}
		return;
	}

d414 1
a414 2
		printf(">>>%s: auth_send got:", Name);
		printd(data, cnt); printf("\r\n");
d416 2
d419 17
d437 1
a437 2
	 * Save the data, if it is new, so that we can continue looking
	 * at it if the authorization we try doesn't work
d439 11
a449 15
	if (data < _auth_send_data ||
	    data > _auth_send_data + sizeof(_auth_send_data)) {
		auth_send_cnt = cnt > sizeof(_auth_send_data)
					? sizeof(_auth_send_data)
					: cnt;
		memmove((void *)_auth_send_data, (void *)data, auth_send_cnt);
		auth_send_data = _auth_send_data;
	} else {
		/*
		 * This is probably a no-op, but we just make sure
		 */
		auth_send_data = data;
		auth_send_cnt = cnt;
	}
	while ((auth_send_cnt -= 2) >= 0) {
d451 14
a464 27
			printf(">>>%s: He supports %d\r\n",
				Name, *auth_send_data);
		if ((i_support & ~i_wont_support) & typemask(*auth_send_data)) {
			ap = findauthenticator(auth_send_data[0],
					       auth_send_data[1]);
			if (ap && ap->send) {
				if (auth_debug_mode)
					printf(">>>%s: Trying %d %d\r\n",
						Name, auth_send_data[0],
							auth_send_data[1]);
				if ((*ap->send)(ap)) {
					/*
					 * Okay, we found one we like
					 * and did it.
					 * we can go home now.
					 */
					if (auth_debug_mode)
						printf(">>>%s: Using type %d\r\n",
							Name, *auth_send_data);
					auth_send_data += 2;
					return;
				}
			}
			/* else
			 *	just continue on and look for the
			 *	next one if we didn't do anything.
			 */
d466 13
a478 7
		auth_send_data += 2;
	}
	net_write(str_none, sizeof(str_none));
	printsub('>', &str_none[2], sizeof(str_none) - 2);
	if (auth_debug_mode)
		printf(">>>%s: Sent failure message\r\n", Name);
	auth_finished(0, AUTH_REJECT);
d480 6
a485 6
	/*
	 *  We requested strong authentication, however no mechanisms worked.
	 *  Therefore, exit on client end.
	 */
	printf("Unable to securely authenticate user ... exit\n");
	exit(0);
d489 2
a490 2
	void
auth_send_retry()
d492 3
a494 3
	/*
	 * if auth_send_cnt <= 0 then auth_send will end up rejecting
	 * the authentication and informing the other side of this.
d496 1
a496 1
	auth_send(auth_send_data, auth_send_cnt);
d499 2
a500 4
	void
auth_is(data, cnt)
	unsigned char *data;
	int cnt;
d502 1
a502 1
	Authenticator *ap;
d504 2
a505 2
	if (cnt < 2)
		return;
d507 4
a510 4
	if (data[0] == AUTHTYPE_NULL) {
		auth_finished(0, AUTH_REJECT);
		return;
	}
d512 6
a517 6
	if ((ap = findauthenticator(data[0], data[1]))) {
		if (ap->is)
			(*ap->is)(ap, data+2, cnt-2);
	} else if (auth_debug_mode)
		printf(">>>%s: Invalid authentication in IS: %d\r\n",
			Name, *data);
d520 2
a521 4
	void
auth_reply(data, cnt)
	unsigned char *data;
	int cnt;
d523 1
a523 1
	Authenticator *ap;
d525 2
a526 2
	if (cnt < 2)
		return;
d528 6
a533 6
	if ((ap = findauthenticator(data[0], data[1]))) {
		if (ap->reply)
			(*ap->reply)(ap, data+2, cnt-2);
	} else if (auth_debug_mode)
		printf(">>>%s: Invalid authentication in SEND: %d\r\n",
			Name, *data);
d536 2
a537 4
	void
auth_name(data, cnt)
	unsigned char *data;
	int cnt;
d539 1
a539 1
	unsigned char savename[256];
d541 6
a546 13
	if (cnt < 1) {
		if (auth_debug_mode)
			printf(">>>%s: Empty name in NAME\r\n", Name);
		return;
	}
	if (cnt > sizeof(savename) - 1) {
		if (auth_debug_mode)
			printf(">>>%s: Name in NAME (%d) exceeds %d length\r\n",
					Name, cnt, sizeof(savename)-1);
		return;
	}
	memmove((void *)savename, (void *)data, cnt);
	savename[cnt] = '\0';	/* Null terminate */
d548 9
a556 2
		printf(">>>%s: Got NAME [%s]\r\n", Name, savename);
	auth_encrypt_user(savename);
d559 7
a565 32
	int
auth_sendname(cp, len)
	unsigned char *cp;
	int len;
{
	static unsigned char str_request[256+6]
			= { IAC, SB, TELOPT_AUTHENTICATION, TELQUAL_NAME, };
	register unsigned char *e = str_request + 4;
	register unsigned char *ee = &str_request[sizeof(str_request)-2];

	while (--len >= 0) {
		if ((*e++ = *cp++) == IAC)
			*e++ = IAC;
		if (e >= ee)
			return(0);
	}
	*e++ = IAC;
	*e++ = SE;
	net_write(str_request, e - str_request);
	printsub('>', &str_request[2], e - &str_request[2]);
	return(1);
}

	void
auth_finished(ap, result)
	Authenticator *ap;
	int result;
{
	if (!(authenticated = ap))
		authenticated = &NoAuth;
	validuser = result;
}
d567 11
a577 6
	/* ARGSUSED */
	static void
auth_intr(sig)
	int sig;
{
	auth_finished(0, AUTH_REJECT);
d580 2
a581 3
	int
auth_wait(name)
	char *name;
d583 3
a585 27
	if (auth_debug_mode)
		printf(">>>%s: in auth_wait.\r\n", Name);

	if (Server && !authenticating)
		return(0);

	(void) signal(SIGALRM, auth_intr);
	alarm(30);
	while (!authenticated)
		if (telnet_spin())
			break;
	alarm(0);
	(void) signal(SIGALRM, SIG_DFL);

	/*
	 * Now check to see if the user is valid or not
	 */
	if (!authenticated || authenticated == &NoAuth)
		return(AUTH_REJECT);

	if (validuser == AUTH_VALID)
		validuser = AUTH_USER;

	if (authenticated->status)
		validuser = (*authenticated->status)(authenticated,
						     name, validuser);
	return(validuser);
d588 3
a590 3
	void
auth_debug(mode)
	int mode;
d592 1
a592 1
	auth_debug_mode = mode;
d595 2
a596 4
	void
auth_printsub(data, cnt, buf, buflen)
	unsigned char *data, *buf;
	int cnt, buflen;
d598 2
a599 1
	Authenticator *ap;
d601 2
a602 13
	if ((ap = findauthenticator(data[1], data[2])) && ap->printsub)
		(*ap->printsub)(data, cnt, buf, buflen);
	else
		auth_gen_printsub(data, cnt, buf, buflen);
}

	void
auth_gen_printsub(data, cnt, buf, buflen)
	unsigned char *data, *buf;
	int cnt, buflen;
{
	register unsigned char *cp;
	unsigned char tbuf[16];
d604 60
a663 13
	cnt -= 3;
	data += 3;
	buf[buflen-1] = '\0';
	buf[buflen-2] = '*';
	buflen -= 2;
	for (; cnt > 0; cnt--, data++) {
		snprintf((char *)tbuf, sizeof(tbuf), " %d", *data);
		for (cp = tbuf; *cp && buflen > 0; --buflen)
			*buf++ = *cp++;
		if (buflen <= 0)
			return;
	}
	*buf = '\0';
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a38 1
static char *rcsid = "$OpenBSD$";
d42 12
d75 1
d78 1
a81 1
#ifdef	__STDC__
a82 4
#endif
#ifdef	NO_STRING_H
#include <strings.h>
#else
a83 1
#endif
d142 8
d152 1
a152 1
				kerberos5_send,
d159 8
d169 1
a169 1
				kerberos4_send,
d512 1
a512 1
	if (ap = findauthenticator(data[0], data[1])) {
d530 1
a530 1
	if (ap = findauthenticator(data[0], data[1])) {
a542 1
	Authenticator *ap;
d671 1
a671 1
		sprintf((char *)tbuf, " %d", *data);
@


1.1
log
@Initial revision
@
text
@d1 2
d37 3
a39 2
/* from: static char sccsid[] = "@@(#)auth.c	8.1 (Berkeley) 6/4/93"; */
static char *rcsid = "$Id: auth.c,v 1.4 1995/06/05 19:46:53 pk Exp $";
d211 3
d238 1
a238 1
	if (strcasecmp(type, AUTHTYPE_NAME(0))) {
d271 1
a271 1
	int mask = -1;
d275 1
a275 1
                printf("auth %s 'type'\n", on ? "enable" : "disable");
d278 5
a282 1
		for (ap = authenticators; ap->type; ap++)
d284 1
a291 1
	mask = getauthmask(type, &mask);
d315 1
d322 5
a326 1
	for (ap = authenticators; ap->type; ap++)
d330 1
d408 1
a408 1
		bcopy((void *)data, (void *)_auth_send_data, auth_send_cnt);
d459 1
a459 1
	printf("Unable to securely authenticate user ... exit\n"); 
d534 1
a534 1
	bcopy((void *)data, (void *)savename, cnt);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

