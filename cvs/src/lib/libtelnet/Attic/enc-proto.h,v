head	1.5;
access;
symbols
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.14
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.12
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.10
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.05.14.01.46.51;	author hin;	state dead;
branches;
next	1.4;

1.4
date	2002.03.22.13.49.28;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.03.00.07.52;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.25.10.23.05;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	98.03.12.04.48.47;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Get rid of libtelnet, it is compiled into the tree programs
(telnetd, telnet and tn3270) that use them instead.
This gets rid of a really hairy dependency between telnet and libtelnet.

ok millert@@
@
text
@/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)enc-proto.h	8.1 (Berkeley) 6/4/93
 *
 *	@@(#)enc-proto.h	5.2 (Berkeley) 3/22/91
 */

 /*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/*
 * Copyright (C) 1990 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */

/* $KTH: enc-proto.h,v 1.10.8.1 2002/02/06 03:38:05 assar Exp $ */

#if	defined(ENCRYPTION)
Encryptions *findencryption (int);
Encryptions *finddecryption(int);
int EncryptAutoDec(int);
int EncryptAutoEnc(int);
int EncryptDebug(int);
int EncryptDisable(char*, char*);
int EncryptEnable(char*, char*);
int EncryptStart(char*);
int EncryptStartInput(void);
int EncryptStartOutput(void);
int EncryptStatus(void);
int EncryptStop(char*);
int EncryptStopInput(void);
int EncryptStopOutput(void);
int EncryptType(char*, char*);
int EncryptVerbose(int);
void decrypt_auto(int);
void encrypt_auto(int);
void encrypt_debug(int);
void encrypt_dec_keyid(unsigned char*, int);
void encrypt_display(void);
void encrypt_enc_keyid(unsigned char*, int);
void encrypt_end(void);
void encrypt_gen_printsub(unsigned char*, int, unsigned char*, int);
void encrypt_init(const char*, int);
void encrypt_is(unsigned char*, int);
void encrypt_list_types(void);
void encrypt_not(void);
void encrypt_printsub(unsigned char*, int, unsigned char*, int);
void encrypt_reply(unsigned char*, int);
void encrypt_request_end(void);
void encrypt_request_start(unsigned char*, int);
void encrypt_send_end(void);
void encrypt_send_keyid(int, unsigned char*, int, int);
void encrypt_send_request_end(void);
int encrypt_is_encrypting(void);
void encrypt_send_request_start(void);
void encrypt_send_support(void);
void encrypt_session_key(Session_Key*, int);
void encrypt_start(unsigned char*, int);
void encrypt_start_output(int);
void encrypt_support(unsigned char*, int);
void encrypt_verbose_quiet(int);
void encrypt_wait(void);
int encrypt_delay(void);

#ifdef	TELENTD
void encrypt_wait (void);
#else
void encrypt_display (void);
#endif

void cfb64_encrypt (unsigned char *, int);
int cfb64_decrypt (int);
void cfb64_init (int);
int cfb64_start (int, int);
int cfb64_is (unsigned char *, int);
int cfb64_reply (unsigned char *, int);
void cfb64_session (Session_Key *, int);
int cfb64_keyid (int, unsigned char *, int *);
void cfb64_printsub (unsigned char *, int, unsigned char *, int);

void ofb64_encrypt (unsigned char *, int);
int ofb64_decrypt (int);
void ofb64_init (int);
int ofb64_start (int, int);
int ofb64_is (unsigned char *, int);
int ofb64_reply (unsigned char *, int);
void ofb64_session (Session_Key *, int);
int ofb64_keyid (int, unsigned char *, int *);
void ofb64_printsub (unsigned char *, int, unsigned char *, int);

#endif

#ifdef KRB4
int check_krb4_tickets();
#else
#define check_krb4_tickets() 0
#endif

#ifdef KRB5
int check_krb5_tickets();
#else
#define check_krb5_tickets() 0
#endif
@


1.4
log
@Telnet encryption warning messages, taken from kth-krb4-1.1.1.

(krb4-1.1.1 will be imported after release)

Noone bothered to look at this, but I've used this for a couple of weeks,
and i really want this to go in before release.
@
text
@@


1.3
log
@Telnet client shouldn't say it does Kerberos unless there actually exists
a krb4 or krb5 ticket file.
ok art@@
@
text
@d70 1
a70 1
/* $KTH: enc-proto.h,v 1.10 2000/01/18 03:09:56 assar Exp $ */
d108 1
@


1.2
log
@KerberosV stuff taken from Heimdal.
@
text
@d145 12
@


1.1
log
@support for encryption from kth-krb 0.9.8
@
text
@a0 1
/*	$OpenBSD$	*/
d38 1
a38 1
/*
d70 1
a70 1
/* $KTH: enc-proto.h,v 1.8 1997/11/02 03:57:10 assar Exp $ */
d73 44
a116 45
Encryptions *findencryption __P((int));
Encryptions *finddecryption __P((int));
int EncryptAutoDec __P((int));
int EncryptAutoEnc __P((int));
int EncryptDebug __P((int));
int EncryptDisable __P((char*, char*));
int EncryptEnable __P((char*, char*));
int EncryptStart __P((char*));
int EncryptStartInput __P((void));
int EncryptStartOutput __P((void));
int EncryptStatus __P((void));
int EncryptStop __P((char*));
int EncryptStopInput __P((void));
int EncryptStopOutput __P((void));
int EncryptType __P((char*, char*));
int EncryptVerbose __P((int));
int net_write __P((unsigned char *, int));
void decrypt_auto __P((int));
void encrypt_auto __P((int));
void encrypt_debug __P((int));
void encrypt_dec_keyid __P((unsigned char*, int));
void encrypt_display __P((void));
void encrypt_enc_keyid __P((unsigned char*, int));
void encrypt_end __P((void));
void encrypt_gen_printsub __P((unsigned char*, int, unsigned char*, int));
void encrypt_init __P((char*, int));
void encrypt_is __P((unsigned char*, int));
void encrypt_list_types __P((void));
void encrypt_not __P((void));
void encrypt_printsub __P((unsigned char*, int, unsigned char*, int));
void encrypt_reply __P((unsigned char*, int));
void encrypt_request_end __P((void));
void encrypt_request_start __P((unsigned char*, int));
void encrypt_send_end __P((void));
void encrypt_send_keyid __P((int, unsigned char*, int, int));
void encrypt_send_request_end __P((void));
void encrypt_send_request_start __P((void));
void encrypt_send_support __P((void));
void encrypt_session_key __P((Session_Key*, int));
void encrypt_start __P((unsigned char*, int));
void encrypt_start_output __P((int));
void encrypt_support __P((unsigned char*, int));
void encrypt_verbose_quiet __P((int));
void encrypt_wait __P((void));
int encrypt_delay __P((void));
d119 1
a119 1
void encrypt_wait __P((void));
d121 1
a121 1
void encrypt_display __P((void));
d124 19
a142 19
void cfb64_encrypt __P((unsigned char *, int));
int cfb64_decrypt __P((int));
void cfb64_init __P((int));
int cfb64_start __P((int, int));
int cfb64_is __P((unsigned char *, int));
int cfb64_reply __P((unsigned char *, int));
void cfb64_session __P((Session_Key *, int));
int cfb64_keyid __P((int, unsigned char *, int *));
void cfb64_printsub __P((unsigned char *, int, unsigned char *, int));

void ofb64_encrypt __P((unsigned char *, int));
int ofb64_decrypt __P((int));
void ofb64_init __P((int));
int ofb64_start __P((int, int));
int ofb64_is __P((unsigned char *, int));
int ofb64_reply __P((unsigned char *, int));
void ofb64_session __P((Session_Key *, int));
int ofb64_keyid __P((int, unsigned char *, int *));
void ofb64_printsub __P((unsigned char *, int, unsigned char *, int));
@


