head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.32
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.28
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.20.21.05.07;	author naddy;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.05.23.19.58;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.01.19.37.16;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.07.14.24.04;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@/* $OpenBSD: io.c,v 1.4 2012/12/20 21:05:07 naddy Exp $ */
/*-
 * Copyright (c) 1998 Doug Rabson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/sysctl.h>
#include <machine/cpu.h>
#include <err.h>

#include "io.h"

static struct io_ops *ops;

int
ioperm(unsigned long from, unsigned long num, int on)
{
	int error;
	int bwx;
	size_t len = sizeof(bwx);
	int mib[3];

	mib[0] = CTL_MACHDEP;
	mib[1] = CPU_CHIPSET;
	mib[2] = CPU_CHIPSET_BWX;
	if ((error = sysctl(mib, 3, &bwx, &len, NULL, 0)) < 0)
		return error;
	if (bwx)
		ops = &bwx_io_ops;
	else
#ifdef notyet
		ops = &swiz_io_ops;
#else
	errx(1, "libio is only available on bwx capable machines");
#endif
	
	return ops->ioperm(from, num, on);
}

u_int8_t
inb(u_int32_t port)
{
	return ops->inb(port);
}

u_int16_t
inw(u_int32_t port)
{
	return ops->inw(port);
}

u_int32_t
inl(u_int32_t port)
{
	return ops->inl(port);
}

void
outb(u_int32_t port, u_int8_t val)
{
	ops->outb(port, val);
}

void
outw(u_int32_t port, u_int16_t val)
{
	ops->outw(port, val);
}

void
outl(u_int32_t port, u_int32_t val)
{
	ops->outl(port, val);
}

void *
map_memory(u_int32_t address, u_int32_t size)
{
	return ops->map_memory(address, size);
}

void
unmap_memory(void *handle, u_int32_t size)
{
	ops->unmap_memory(handle, size);
}

u_int8_t
readb(void *handle, u_int32_t offset)
{
	return ops->readb(handle, offset);
}

u_int16_t
readw(void *handle, u_int32_t offset)
{
	return ops->readw(handle, offset);
}

u_int32_t
readl(void *handle, u_int32_t offset)
{
	return ops->readl(handle, offset);
}

void
writeb(void *handle, u_int32_t offset, u_int8_t val)
{
	ops->writeb(handle, offset, val);
	__asm__ volatile ("mb");
}

void
writew(void *handle, u_int32_t offset, u_int16_t val)
{
	ops->writew(handle, offset, val);
	__asm__ volatile ("mb");
}

void
writel(void *handle, u_int32_t offset, u_int32_t val)
{
	ops->writel(handle, offset, val);
	__asm__ volatile ("mb");
}

void
writeb_nb(void *handle, u_int32_t offset, u_int8_t val)
{
	ops->writeb(handle, offset, val);
}

void
writew_nb(void *handle, u_int32_t offset, u_int16_t val)
{
	ops->writew(handle, offset, val);
}

void
writel_nb(void *handle, u_int32_t offset, u_int32_t val)
{
	ops->writel(handle, offset, val);
}

u_int64_t
dense_base(void)
{
	static u_int64_t base = 0;
	
	if (base == 0) {
		size_t len = sizeof(base);
		int error;
		int mib[3];
		
		mib[0] = CTL_MACHDEP;
		mib[1] = CPU_CHIPSET;
		mib[2] = CPU_CHIPSET_DENSE;
		
		if ((error = sysctl(mib, 3, &base, &len, NULL, 0)) < 0)
			err(1, "machdep.chipset.dense_base");
	}
	
	return base;
}
@


1.4
log
@include machine/cpu.h now that is isn't any longer pulled in indirectly
by sys/sysctl.h; ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: io.c,v 1.3 2012/12/05 23:19:58 deraadt Exp $ */
d133 1
a133 1
	__asm__ __volatile__ ("mb");
d140 1
a140 1
	__asm__ __volatile__ ("mb");
d147 1
a147 1
	__asm__ __volatile__ ("mb");
@


1.3
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: io.c,v 1.2 2009/10/01 19:37:16 miod Exp $ */
d31 1
@


1.2
log
@Do not `return' in void functions.
Amazingly, compiler does not complain (lint does).
@
text
@d1 1
a1 1
/* $OpenBSD: io.c,v 1.1 2002/07/07 14:24:04 matthieu Exp $ */
a27 1
#include <sys/cdefs.h>
@


1.1
log
@Add a port of FreeBSD/alpha's libio as libalpha. This library enable
access to devices I/O ports from userland. Only BWX machines supported
for now. Added a man page.
Ok deraadt@@, miod@@.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d153 1
a153 1
	return ops->writeb(handle, offset, val);
d159 1
a159 1
	return ops->writew(handle, offset, val);
d165 1
a165 1
	return ops->writel(handle, offset, val);
@

