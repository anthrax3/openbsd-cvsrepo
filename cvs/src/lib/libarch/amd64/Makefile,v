head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5;
locks; strict;
comment	@# @;


1.13
date	2016.03.30.06.38.41;	author jmc;	state Exp;
branches;
next	1.12;
commitid	LN9ijdk9SEnzWAbM;

1.12
date	2014.07.16.20.02.17;	author okan;	state Exp;
branches;
next	1.11;
commitid	Fyv0hIvHU3jMAgMT;

1.11
date	2013.05.05.19.27.23;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.13.02.49.12;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.10.03.56.38;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.05.21.14.00;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.09.23.15.47;	author phessler;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.23.15.38.34;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.28.23.51.35;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.28.13.37.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.27.23.44.56;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.27.17.36.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.26.00.10.54;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@#	$OpenBSD: Makefile,v 1.12 2014/07/16 20:02:17 okan Exp $
#	$NetBSD: Makefile,v 1.1 1996/02/21 02:45:47 jtk Exp $

MANSUBDIR=amd64
MAN+=	amd64_iopl.2 amd64_get_fsbase.2

.if ${MACHINE_ARCH} == "amd64"
.PATH: ${LIBC}/amd64
NOPIC=
SRCS+=	amd64_iopl.c amd64_get_fsbase.c amd64_set_fsbase.c
.include <bsd.lib.mk>
.else
NOPROG=
.include <bsd.prog.mk>
.endif
@


1.12
log
@zap trailing newlines; "go for it" deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2013/05/05 19:27:23 tedu Exp $
a5 1
MLINKS+=amd64_get_fsbase.2 amd64_set_fsbase.2
@


1.11
log
@remove never implemented amd64 get/set ioperm sysarch. ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2011/04/13 02:49:12 guenther Exp $
a16 1

@


1.10
log
@Unrevert the FS.base diff: the issues were actually elsewhere
Additional testing by jasper@@ and pea@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2011/04/10 03:56:38 guenther Exp $
d5 2
a6 4
MAN+=	amd64_iopl.2 amd64_get_ioperm.2 \
	amd64_get_fsbase.2
MLINKS+=amd64_get_ioperm.2 amd64_set_ioperm.2 \
	amd64_get_fsbase.2 amd64_set_fsbase.2
d11 1
a11 2
SRCS+=	amd64_iopl.c amd64_get_ioperm.c amd64_set_ioperm.c \
	amd64_get_fsbase.c amd64_set_fsbase.c
@


1.9
log
@Revert bulk of the FS.base diff, as it causes issues on some machines
and the problem isn't obvious yet.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2008/06/09 23:15:47 phessler Exp $
d5 4
a8 2
MAN+=	amd64_iopl.2 amd64_get_ioperm.2
MLINKS+=amd64_get_ioperm.2 amd64_set_ioperm.2
d13 2
a14 1
SRCS+=	amd64_iopl.c amd64_get_ioperm.c amd64_set_ioperm.c
@


1.8
log
@Add support for per-rthread base-offset for the %fs selector on amd64.
Add pcb_fsbase to the PCB for tracking what the value for the thread
is, and ci_cur_fsbase to struct cpu_info for tracking the CPU's current
value for FS.base, then on return to user-space, skip the setting if the
CPU has the right value already.  Non-threaded processes without TLS leave
FS.base zero, which can be conveniently optimized: setting %fs zeros
FS.base for fewer cycles than wrmsr.

ok kettenis@@
@
text
@d5 2
a6 4
MAN+=	amd64_iopl.2 amd64_get_ioperm.2 \
	amd64_get_fsbase.2
MLINKS+=amd64_get_ioperm.2 amd64_set_ioperm.2 \
	amd64_get_fsbase.2 amd64_set_fsbase.2
d11 1
a11 2
SRCS+=	amd64_iopl.c amd64_get_ioperm.c amd64_set_ioperm.c \
	amd64_get_fsbase.c amd64_set_fsbase.c
@


1.7
log
@Remove an arch-specific API that wasn't available in the first place, and
will be converted to a more generic one soon.

ok deraadt, oga
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2008/05/23 15:38:34 jasper Exp $
d5 4
a8 2
MAN+=	amd64_iopl.2 amd64_get_ioperm.2
MLINKS+=amd64_get_ioperm.2 amd64_set_ioperm.2
d13 2
a14 1
SRCS+=	amd64_iopl.c amd64_get_ioperm.c amd64_set_ioperm.c
@


1.6
log
@- remove USER_LDT, it was never in a state where it would copile, nor will
we support i386-compat mode on amd64.

agreed by beck@@, dlg@@, kettenis@@
ok deraadt@@, tom@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2004/02/28 23:51:35 deraadt Exp $
d5 2
a6 3
MAN+=	amd64_iopl.2 amd64_get_ioperm.2 amd64_get_mtrr.2
MLINKS+=amd64_get_ioperm.2 amd64_set_ioperm.2 \
	amd64_get_mtrr.2 amd64_set_mtrr.2 
d11 1
a11 2
SRCS+=	amd64_iopl.c amd64_get_ioperm.c \
	amd64_set_ioperm.c amd64_set_mtrr.c amd64_get_mtrr.c
@


1.5
log
@mtrr calls
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2004/02/28 13:37:42 deraadt Exp $
d5 2
a6 3
MAN+=	amd64_get_ldt.2 amd64_iopl.2 amd64_get_ioperm.2 amd64_get_mtrr.2
MLINKS+=amd64_get_ldt.2 amd64_set_ldt.2 \
	amd64_get_ioperm.2 amd64_set_ioperm.2 \
d12 1
a12 1
SRCS+=	amd64_get_ldt.c amd64_set_ldt.c amd64_iopl.c amd64_get_ioperm.c \
@


1.4
log
@pretty
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2004/02/27 23:44:56 deraadt Exp $
d5 1
a5 1
MAN+=	amd64_get_ldt.2 amd64_iopl.2 amd64_get_ioperm.2
d7 2
a8 1
	amd64_get_ioperm.2 amd64_set_ioperm.2
d14 1
a14 1
	amd64_set_ioperm.c
@


1.3
log
@change to amd_*() functions
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2004/02/27 17:36:14 deraadt Exp $
a3 2
MAN+=	amd64_get_ldt.2 \
	amd64_iopl.2 amd64_get_ioperm.2
d5 1
d12 2
a13 2
SRCS+=	amd64_get_ldt.c amd64_set_ldt.c \
	amd64_iopl.c amd64_get_ioperm.c amd64_set_ioperm.c
@


1.2
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/02/26 00:10:54 deraadt Exp $
d4 2
a5 2
MAN+=	x86_64_get_ldt.2 \
	x86_64_iopl.2 x86_64_get_ioperm.2
d7 2
a8 2
MLINKS+=x86_64_get_ldt.2 x86_64_set_ldt.2 \
	x86_64_get_ioperm.2 x86_64_set_ioperm.2
d13 2
a14 2
SRCS+=	x86_64_get_ldt.c x86_64_set_ldt.c \
	x86_64_iopl.c x86_64_get_ioperm.c x86_64_set_ioperm.c
@


1.1
log
@x86_64 libarch
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2003/07/19 00:03:51 david Exp $
d10 2
a11 2
.if ${MACHINE_ARCH} == "x86_64"
.PATH: ${LIBC}/x86_64
@

