head	1.22;
access;
symbols
	OPENBSD_6_0:1.21.0.8
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.4
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.14
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.12
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.10
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.6
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.4
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.22
date	2016.09.03.11.31.17;	author nayden;	state Exp;
branches;
next	1.21;
commitid	tdu5Eu69k0NPLcIY;

1.21
date	2014.10.30.16.45.37;	author bluhm;	state Exp;
branches;
next	1.20;
commitid	tunEM8ZR8ESfpNht;

1.20
date	2014.10.29.22.47.29;	author bluhm;	state Exp;
branches;
next	1.19;
commitid	FfV5qz960uDg9hP4;

1.19
date	2014.10.17.19.16.01;	author bluhm;	state Exp;
branches;
next	1.18;
commitid	wDYYYW1I3umfP7v5;

1.18
date	2014.10.16.07.38.06;	author bluhm;	state Exp;
branches;
next	1.17;
commitid	Lmt85cKJJzyEtWLn;

1.17
date	2014.10.08.05.41.42;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	bIKEHDDuWEhznXtg;

1.16
date	2013.08.24.10.46.48;	author dlg;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.21.20.02.40;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.02.06.09.11;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2006.11.26.15.24.34;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.30.06.32.36;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.02.04.41.30;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.02.07.15.13;	author grunk;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.18.01.52.22;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.06.18.22.53;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.04.03.17.48;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.22.00.56.25;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.19.08.07.45;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.19.02.03.12;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.28.06.53.12;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.01.09.10.30;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.23.08.52.04;	author markus;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove NULL pointer checks before calls to free().
OK bluhm@@ nicm@@
@
text
@/*	$OpenBSD: poll.c,v 1.21 2014/10/30 16:45:37 bluhm Exp $	*/

/*
 * Copyright 2000-2003 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/queue.h>

#include <poll.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#ifdef CHECK_INVARIANTS
#include <assert.h>
#endif

#include "event.h"
#include "event-internal.h"
#include "evsignal.h"
#include "log.h"

struct pollop {
	int event_count;		/* Highest number alloc */
	int nfds;                       /* Size of event_* */
	int fd_count;                   /* Size of idxplus1_by_fd */
	struct pollfd *event_set;
	struct event **event_r_back;
	struct event **event_w_back;
	int *idxplus1_by_fd; /* Index into event_set by fd; we add 1 so
			      * that 0 (which is easy to memset) can mean
			      * "no entry." */
};

static void *poll_init	(struct event_base *);
static int poll_add		(void *, struct event *);
static int poll_del		(void *, struct event *);
static int poll_dispatch	(struct event_base *, void *, struct timeval *);
static void poll_dealloc	(struct event_base *, void *);

const struct eventop pollops = {
	"poll",
	poll_init,
	poll_add,
	poll_del,
	poll_dispatch,
	poll_dealloc,
    0
};

static void *
poll_init(struct event_base *base)
{
	struct pollop *pollop;

	/* Disable poll when this environment variable is set */
	if (!issetugid() && getenv("EVENT_NOPOLL"))
		return (NULL);

	if (!(pollop = calloc(1, sizeof(struct pollop))))
		return (NULL);

	evsignal_init(base);

	return (pollop);
}

#ifdef CHECK_INVARIANTS
static void
poll_check_ok(struct pollop *pop)
{
	int i, idx;
	struct event *ev;

	for (i = 0; i < pop->fd_count; ++i) {
		idx = pop->idxplus1_by_fd[i]-1;
		if (idx < 0)
			continue;
		assert(pop->event_set[idx].fd == i);
		if (pop->event_set[idx].events & POLLIN) {
			ev = pop->event_r_back[idx];
			assert(ev);
			assert(ev->ev_events & EV_READ);
			assert(ev->ev_fd == i);
		}
		if (pop->event_set[idx].events & POLLOUT) {
			ev = pop->event_w_back[idx];
			assert(ev);
			assert(ev->ev_events & EV_WRITE);
			assert(ev->ev_fd == i);
		}
	}
	for (i = 0; i < pop->nfds; ++i) {
		struct pollfd *pfd = &pop->event_set[i];
		assert(pop->idxplus1_by_fd[pfd->fd] == i+1);
	}
}
#else
#define poll_check_ok(pop)
#endif

static int
poll_dispatch(struct event_base *base, void *arg, struct timeval *tv)
{
	int res, i, j, msec = -1, nfds;
	struct pollop *pop = arg;

	poll_check_ok(pop);

	if (tv != NULL)
		msec = tv->tv_sec * 1000 + (tv->tv_usec + 999) / 1000;

	nfds = pop->nfds;
	res = poll(pop->event_set, nfds, msec);

	if (res == -1) {
		if (errno != EINTR) {
			event_warn("poll");
			return (-1);
		}

		evsignal_process(base);
		return (0);
	} else if (base->sig.evsignal_caught) {
		evsignal_process(base);
	}

	event_debug(("%s: poll reports %d", __func__, res));

	if (res == 0 || nfds == 0)
		return (0);

	i = arc4random_uniform(nfds);
	for (j = 0; j < nfds; j++) {
		struct event *r_ev = NULL, *w_ev = NULL;
		int what;
		if (++i == nfds)
			i = 0;
		what = pop->event_set[i].revents;

		if (!what)
			continue;

		res = 0;

		/* If the file gets closed notify */
		if (what & (POLLHUP|POLLERR))
			what |= POLLIN|POLLOUT;
		if (what & POLLIN) {
			res |= EV_READ;
			r_ev = pop->event_r_back[i];
		}
		if (what & POLLOUT) {
			res |= EV_WRITE;
			w_ev = pop->event_w_back[i];
		}
		if (res == 0)
			continue;

		if (r_ev && (res & r_ev->ev_events)) {
			event_active(r_ev, res & r_ev->ev_events, 1);
		}
		if (w_ev && w_ev != r_ev && (res & w_ev->ev_events)) {
			event_active(w_ev, res & w_ev->ev_events, 1);
		}
	}

	return (0);
}

static int
poll_add(void *arg, struct event *ev)
{
	struct pollop *pop = arg;
	struct pollfd *pfd = NULL;
	int i;

	if (ev->ev_events & EV_SIGNAL)
		return (evsignal_add(ev));
	if (!(ev->ev_events & (EV_READ|EV_WRITE)))
		return (0);

	poll_check_ok(pop);
	if (pop->nfds + 1 >= pop->event_count) {
		struct pollfd *tmp_event_set;
		struct event **tmp_event_r_back;
		struct event **tmp_event_w_back;
		int tmp_event_count;

		if (pop->event_count < 32)
			tmp_event_count = 32;
		else
			tmp_event_count = pop->event_count * 2;

		/* We need more file descriptors */
		tmp_event_set = reallocarray(pop->event_set,
		    tmp_event_count, sizeof(struct pollfd));
		if (tmp_event_set == NULL) {
			event_warn("realloc");
			return (-1);
		}
		pop->event_set = tmp_event_set;

		tmp_event_r_back = reallocarray(pop->event_r_back,
		    tmp_event_count, sizeof(struct event *));
		if (tmp_event_r_back == NULL) {
			/* event_set overallocated; that's okay. */
			event_warn("realloc");
			return (-1);
		}
		pop->event_r_back = tmp_event_r_back;

		tmp_event_w_back = reallocarray(pop->event_w_back,
		    tmp_event_count, sizeof(struct event *));
		if (tmp_event_w_back == NULL) {
			/* event_set and event_r_back overallocated; that's
			 * okay. */
			event_warn("realloc");
			return (-1);
		}
		pop->event_w_back = tmp_event_w_back;

		pop->event_count = tmp_event_count;
	}
	if (ev->ev_fd >= pop->fd_count) {
		int *tmp_idxplus1_by_fd;
		int new_count;
		if (pop->fd_count < 32)
			new_count = 32;
		else
			new_count = pop->fd_count * 2;
		while (new_count <= ev->ev_fd)
			new_count *= 2;
		tmp_idxplus1_by_fd = reallocarray(pop->idxplus1_by_fd,
		    new_count, sizeof(int));
		if (tmp_idxplus1_by_fd == NULL) {
			event_warn("realloc");
			return (-1);
		}
		pop->idxplus1_by_fd = tmp_idxplus1_by_fd;
		memset(pop->idxplus1_by_fd + pop->fd_count,
		       0, sizeof(int)*(new_count - pop->fd_count));
		pop->fd_count = new_count;
	}

	i = pop->idxplus1_by_fd[ev->ev_fd] - 1;
	if (i >= 0) {
		pfd = &pop->event_set[i];
	} else {
		i = pop->nfds++;
		pfd = &pop->event_set[i];
		pfd->events = 0;
		pfd->fd = ev->ev_fd;
		pop->event_w_back[i] = pop->event_r_back[i] = NULL;
		pop->idxplus1_by_fd[ev->ev_fd] = i + 1;
	}

	pfd->revents = 0;
	if (ev->ev_events & EV_WRITE) {
		pfd->events |= POLLOUT;
		pop->event_w_back[i] = ev;
	}
	if (ev->ev_events & EV_READ) {
		pfd->events |= POLLIN;
		pop->event_r_back[i] = ev;
	}
	poll_check_ok(pop);

	return (0);
}

/*
 * Nothing to be done here.
 */

static int
poll_del(void *arg, struct event *ev)
{
	struct pollop *pop = arg;
	struct pollfd *pfd = NULL;
	int i;

	if (ev->ev_events & EV_SIGNAL)
		return (evsignal_del(ev));

	if (!(ev->ev_events & (EV_READ|EV_WRITE)))
		return (0);

	poll_check_ok(pop);
	i = pop->idxplus1_by_fd[ev->ev_fd] - 1;
	if (i < 0)
		return (-1);

	/* Do we still want to read or write? */
	pfd = &pop->event_set[i];
	if (ev->ev_events & EV_READ) {
		pfd->events &= ~POLLIN;
		pop->event_r_back[i] = NULL;
	}
	if (ev->ev_events & EV_WRITE) {
		pfd->events &= ~POLLOUT;
		pop->event_w_back[i] = NULL;
	}
	poll_check_ok(pop);
	if (pfd->events)
		/* Another event cares about that fd. */
		return (0);

	/* Okay, so we aren't interested in that fd anymore. */
	pop->idxplus1_by_fd[ev->ev_fd] = 0;

	--pop->nfds;
	if (i != pop->nfds) {
		/*
		 * Shift the last pollfd down into the now-unoccupied
		 * position.
		 */
		memcpy(&pop->event_set[i], &pop->event_set[pop->nfds],
		       sizeof(struct pollfd));
		pop->event_r_back[i] = pop->event_r_back[pop->nfds];
		pop->event_w_back[i] = pop->event_w_back[pop->nfds];
		pop->idxplus1_by_fd[pop->event_set[i].fd] = i + 1;
	}

	poll_check_ok(pop);
	return (0);
}

static void
poll_dealloc(struct event_base *base, void *arg)
{
	struct pollop *pop = arg;

	evsignal_dealloc(base);
	free(pop->event_set);
	free(pop->event_r_back);
	free(pop->event_w_back);
	free(pop->idxplus1_by_fd);

	memset(pop, 0, sizeof(struct pollop));
	free(pop);
}
@


1.21
log
@Fix whitespace errors in libevent.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.20 2014/10/29 22:47:29 bluhm Exp $	*/
d362 4
a365 8
	if (pop->event_set)
		free(pop->event_set);
	if (pop->event_r_back)
		free(pop->event_r_back);
	if (pop->event_w_back)
		free(pop->event_w_back);
	if (pop->idxplus1_by_fd)
		free(pop->idxplus1_by_fd);
@


1.20
log
@After removing all the #ifdef, the wrappers in evutil are rather
useless.  Let libevent call the libc functions directly.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.19 2014/10/17 19:16:01 bluhm Exp $	*/
d145 1
a145 1
                        event_warn("poll");
d341 1
a341 1
		/* 
@


1.19
log
@Remove #ifdef HAVE_.*_H, just include the header files.
Do not include sys/param.h.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.18 2014/10/16 07:38:06 bluhm Exp $	*/
d84 1
a84 1
	if (evutil_getenv("EVENT_NOPOLL"))
@


1.18
log
@Remove #ifdef HAVE_CONFIG_H, there is no config.h file.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.17 2014/10/08 05:41:42 deraadt Exp $	*/
a30 1
#ifdef HAVE_SYS_TIME_H
a31 3
#else
#include <sys/_libevent_time.h>
#endif
d33 1
@


1.17
log
@use reallocarray() to detect multiplicative integer overflow; obvious
pattern.
This commit does not fix the non-obvious bloody horror of select.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.16 2013/08/24 10:46:48 dlg Exp $	*/
a28 3
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
@


1.16
log
@replace random() with arc4random.

blambert didnt like stuff linking to libevent getting warnings about use of
an unsafe api.

ok blambert@@ mikeb@@ deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.15 2010/04/21 20:02:40 nicm Exp $	*/
d229 2
a230 2
		tmp_event_set = realloc(pop->event_set,
				 tmp_event_count * sizeof(struct pollfd));
d237 2
a238 2
		tmp_event_r_back = realloc(pop->event_r_back,
			    tmp_event_count * sizeof(struct event *));
d246 2
a247 2
		tmp_event_w_back = realloc(pop->event_w_back,
			    tmp_event_count * sizeof(struct event *));
d267 2
a268 2
		tmp_idxplus1_by_fd =
			realloc(pop->idxplus1_by_fd, new_count * sizeof(int));
@


1.15
log
@Update libevent to 1.4.13.

This is the core library only, the DNS parts are removed and it does not
include the other extra bits (HTTP, DNS, and RPC), a separate port for
these will appear in due course.

Thanks to jsg, sthen, alek, gilles, jacekm, bernd and any others I've
forgotten for testing/comments.

Note that /usr/include/evdns.h should be removed after updating.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.14 2008/05/02 06:09:11 brad Exp $	*/
d166 1
a166 1
	i = random() % nfds;
@


1.14
log
@Update to libevent 1.3e while retaining our local changes.

"No objection" millert@@
"the diff looks and works fine" reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.13 2006/11/26 15:24:34 brad Exp $	*/
d37 1
a37 1
#include <sys/_time.h>
a39 1
#include <sys/tree.h>
d68 5
a72 6
void *poll_init	(struct event_base *);
int poll_add		(void *, struct event *);
int poll_del		(void *, struct event *);
int poll_recalc		(struct event_base *, void *, int);
int poll_dispatch	(struct event_base *, void *, struct timeval *);
void poll_dealloc	(struct event_base *, void *);
a78 1
	poll_recalc,
d80 2
a81 1
	poll_dealloc
d84 1
a84 1
void *
d90 1
a90 1
	if (!issetugid() && getenv("EVENT_NOPOLL"))
a100 11
/*
 * Called with the highest fd that we know about.  If it is 0, completely
 * recalculate everything.
 */

int
poll_recalc(struct event_base *base, void *arg, int max)
{
	return (0);
}

d135 1
a135 1
int
d138 1
a138 1
	int res, i, msec = -1, nfds;
d163 1
a163 1
	if (res == 0)
d166 2
a167 2
	for (i = 0; i < nfds; i++) {
		int what = pop->event_set[i].revents;
d169 4
a193 2
			if (!(r_ev->ev_events & EV_PERSIST))
				event_del(r_ev);
a196 2
			if (!(w_ev->ev_events & EV_PERSIST))
				event_del(w_ev);
d204 1
a204 1
int
d309 1
a309 1
int
d347 1
a347 1
		/*
d362 1
a362 1
void
@


1.13
log
@fail without leaking memory when poll set extension fails.

From Niels Provos via the libevent SVN

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.12 2006/03/30 06:32:36 brad Exp $	*/
a56 2
extern volatile sig_atomic_t evsignal_caught;

a66 1
	sigset_t evsigmask;
d69 1
a69 1
void *poll_init	(void);
d74 1
a74 1
void poll_dealloc	(void *);
d87 1
a87 1
poll_init(void)
d98 1
a98 1
	evsignal_init(&pollop->evsigmask);
d111 1
a111 3
	struct pollop *pop = arg;

	return (evsignal_recalc(&pop->evsigmask));
d151 1
a151 1
	int res, i, sec, nfds;
d154 4
a157 2
	if (evsignal_deliver(&pop->evsigmask) == -1)
		return (-1);
a158 2
	poll_check_ok(pop);
	sec = tv->tv_sec * 1000 + (tv->tv_usec + 999) / 1000;
d160 1
a160 4
	res = poll(pop->event_set, nfds, sec);

	if (evsignal_recalc(&pop->evsigmask) == -1)
		return (-1);
d168 1
a168 1
		evsignal_process();
d170 3
a172 2
	} else if (evsignal_caught)
		evsignal_process();
d225 1
a225 1
		return (evsignal_add(&pop->evsigmask, ev));
d330 1
a330 1
		return (evsignal_del(&pop->evsigmask, ev));
d376 1
a376 1
poll_dealloc(void *arg)
d380 1
@


1.12
log
@introduce a way to free the base.

From libevent CVS
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.11 2005/12/02 04:41:30 deraadt Exp $	*/
d238 5
d244 1
a244 1
			pop->event_count = 32;
d246 1
a246 1
			pop->event_count *= 2;
d249 3
a251 3
		pop->event_set = realloc(pop->event_set,
				 pop->event_count * sizeof(struct pollfd));
		if (pop->event_set == NULL) {
d255 6
a260 6
		pop->event_r_back = realloc(pop->event_r_back,
			    pop->event_count * sizeof(struct event *));
		pop->event_w_back = realloc(pop->event_w_back,
			    pop->event_count * sizeof(struct event *));
		if (pop->event_r_back == NULL ||
		    pop->event_w_back == NULL) {
d264 13
d279 1
d287 3
a289 3
		pop->idxplus1_by_fd =
			realloc(pop->idxplus1_by_fd, new_count*sizeof(int));
		if (pop->idxplus1_by_fd == NULL) {
d293 1
@


1.11
log
@pollops should be const
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.10 2005/07/02 07:15:13 grunk Exp $	*/
d77 1
d85 2
a86 1
	poll_dispatch
d360 18
@


1.10
log
@zap trailing whitespaces, no binary change

ok brad@@ beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.9 2005/06/18 01:52:22 brad Exp $	*/
d78 1
a78 1
struct eventop pollops = {
@


1.9
log
@update to libevent 1.1a; keep local changes

ok grunk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.8 2005/05/06 18:22:53 brad Exp $	*/
d345 1
a345 1
		/* 
@


1.8
log
@fix comment, kqueue -> {poll,select}
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.7 2005/05/04 03:17:48 brad Exp $	*/
d48 3
d61 1
d117 3
a119 2
int
poll_dispatch(struct event_base *base, void *arg, struct timeval *tv)
d121 1
a121 1
	int res, i, count, fd_count, sec, nfds;
a122 2
	struct pollop *pop = arg;
	int *idxplus1_by_fd;
d124 3
a126 33
	count = pop->event_count;
	fd_count = pop->fd_count;
	idxplus1_by_fd = pop->idxplus1_by_fd;
	memset(idxplus1_by_fd, 0, sizeof(int)*fd_count);
	nfds = 0;

	TAILQ_FOREACH(ev, &base->eventqueue, ev_next) {
		struct pollfd *pfd = NULL;
		if (nfds + 1 >= count) {
			if (count < 32)
				count = 32;
			else
				count *= 2;

			/* We need more file descriptors */
			pop->event_set = realloc(pop->event_set,
			    count * sizeof(struct pollfd));
			if (pop->event_set == NULL) {
                                event_warn("realloc");
				return (-1);
			}
			pop->event_r_back = realloc(pop->event_r_back,
			    count * sizeof(struct event *));
			pop->event_w_back = realloc(pop->event_w_back,
			    count * sizeof(struct event *));
			if (pop->event_r_back == NULL ||
			    pop->event_w_back == NULL) {
				event_warn("realloc");
				return (-1);
			}
			pop->event_count = count;
		}
		if (!(ev->ev_events & (EV_READ|EV_WRITE)))
d128 6
a133 17
		if (ev->ev_fd >= fd_count) {
			int new_count;
			if (fd_count < 32)
				new_count = 32;
			else
				new_count = fd_count * 2;
			while (new_count <= ev->ev_fd)
				new_count *= 2;
			idxplus1_by_fd = pop->idxplus1_by_fd =
			  realloc(pop->idxplus1_by_fd, new_count*sizeof(int));
			if (idxplus1_by_fd == NULL) {
				event_warn("realloc");
				return (-1);
			}
			memset(pop->idxplus1_by_fd + fd_count,
			       0, sizeof(int)*(new_count-fd_count));
			fd_count = pop->fd_count = new_count;
d135 5
a139 9
		i = idxplus1_by_fd[ev->ev_fd] - 1;
		if (i >= 0) {
			pfd = &pop->event_set[i];
		} else {
			i = nfds++;
			pfd = &pop->event_set[i];
			pop->event_w_back[i] = pop->event_r_back[i] = NULL;
			pfd->events = 0;
			idxplus1_by_fd[ev->ev_fd] = i + 1;
d141 9
d151 5
a155 15
		if (ev->ev_events & EV_WRITE) {
			pfd->fd = ev->ev_fd;
			pfd->events |= POLLOUT;
			pfd->revents = 0;

			pop->event_w_back[i] = ev;
		}
		if (ev->ev_events & EV_READ) {
			pfd->fd = ev->ev_fd;
			pfd->events |= POLLIN;
			pfd->revents = 0;

			pop->event_r_back[i] = ev;
		}
	}
d160 1
d162 1
d188 3
d194 1
a194 1
		if (what & POLLHUP)
a195 2
                if (what & POLLERR) 
                        what |= POLLIN|POLLOUT;
d226 2
d231 68
d311 2
d314 24
a337 1
	if (!(ev->ev_events & EV_SIGNAL))
d340 18
a357 1
	return (evsignal_del(&pop->evsigmask, ev));
@


1.7
log
@update to libevent 1.0d; keep local changes

thanks to Alexander von Gernler for testing
and some bug fixes

ok mpf@@ norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.6 2005/04/22 00:56:25 brad Exp $	*/
d88 1
a88 1
	/* Disable kqueue when this environment variable is set */
@


1.6
log
@update to libevent 1.0c; keep local changes

no shared lib so no ABI/API check is necessary

thanks to Alexander von Gernler for submitting
another diff in an attempt to update libevent
and for a use-after-free fix.

ok henning@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.4 2005/04/19 02:03:12 brad Exp $	*/
d58 1
d60 5
a64 1
	struct event **event_back;
d116 1
a116 1
	int res, i, count, sec, nfds;
d119 1
d122 3
d126 1
d128 1
d142 3
a144 1
			pop->event_back = realloc(pop->event_back,
d146 2
a147 1
			if (pop->event_back == NULL) {
d153 31
a184 1
			struct pollfd *pfd = &pop->event_set[nfds];
d186 1
a186 1
			pfd->events = POLLOUT;
d189 1
a189 3
			pop->event_back[nfds] = ev;

			nfds++;
a191 2
			struct pollfd *pfd = &pop->event_set[nfds];

d193 1
a193 1
			pfd->events = POLLIN;
d196 1
a196 3
			pop->event_back[nfds] = ev;

			nfds++;
d226 3
a228 2
                int what = pop->event_set[i].revents;
		
d236 1
a236 1
		if (what & POLLIN)
d238 3
a240 1
		if (what & POLLOUT)
d242 2
d247 10
a256 8
		ev = pop->event_back[i];
		res &= ev->ev_events;

		if (res) {
			if (!(ev->ev_events & EV_PERSIST))
				event_del(ev);
			event_active(ev, res, 1);
		}	
@


1.5
log
@backout.  not discussed, and very wrong.  bad brad
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.3 2004/04/28 06:53:12 brad Exp $	*/
d40 1
a47 8
#include <err.h>

#ifdef USE_LOG
#include "log.h"
#else
#define LOG_DBG(x)
#define log_error(x)	perror(x)
#endif
d50 1
d52 1
a52 2

extern struct event_list eventqueue;
d61 1
a61 1
} pollop;
d66 2
a67 2
int poll_recalc	(void *, int);
int poll_dispatch	(void *, struct timeval *);
d81 2
d87 2
a88 1
	memset(&pollop, 0, sizeof(pollop));
d90 1
a90 1
	evsignal_init(&pollop.evsigmask);
d92 1
a92 1
	return (&pollop);
d101 1
a101 1
poll_recalc(void *arg, int max)
d109 1
a109 1
poll_dispatch(void *arg, struct timeval *tv)
d117 1
a117 1
	TAILQ_FOREACH(ev, &eventqueue, ev_next) {
d128 1
a128 1
				log_error("realloc");
d134 1
a134 1
				log_error("realloc");
d165 1
a165 1
	sec = tv->tv_sec * 1000 + tv->tv_usec / 1000;
d173 1
a173 1
			log_error("poll");
d182 1
a182 1
	LOG_DBG((LOG_MISC, 80, "%s: poll reports %d", __func__, res));
@


1.4
log
@update to libevent 1.0c; keep local changes
@
text
@a39 1
#include <sys/tree.h>
d47 8
a56 1
#include "event-internal.h"
d58 2
a59 1
#include "log.h"
d68 1
a68 1
};
d73 2
a74 2
int poll_recalc		(struct event_base *, void *, int);
int poll_dispatch	(struct event_base *, void *, struct timeval *);
a87 2
	struct pollop *pollop;

d92 1
a92 2
	if (!(pollop = calloc(1, sizeof(struct pollop))))
		return (NULL);
d94 1
a94 1
	evsignal_init(&pollop->evsigmask);
d96 1
a96 1
	return (pollop);
d105 1
a105 1
poll_recalc(struct event_base *base, void *arg, int max)
d113 1
a113 1
poll_dispatch(struct event_base *base, void *arg, struct timeval *tv)
d121 1
a121 1
	TAILQ_FOREACH(ev, &base->eventqueue, ev_next) {
d132 1
a132 1
                                event_warn("realloc");
d138 1
a138 1
				event_warn("realloc");
d169 1
a169 1
	sec = tv->tv_sec * 1000 + (tv->tv_usec + 999) / 1000;
d177 1
a177 1
                        event_warn("poll");
d186 1
a186 1
	event_debug(("%s: poll reports %d", __func__, res));
@


1.3
log
@update to libevent 0.8; keep local changes

ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.2 2002/06/25 15:50:15 mickey Exp $	*/
d40 1
a47 8
#include <err.h>

#ifdef USE_LOG
#include "log.h"
#else
#define LOG_DBG(x)
#define log_error(x)	perror(x)
#endif
d50 1
d52 1
a52 2

extern struct event_list eventqueue;
d61 1
a61 1
} pollop;
d66 2
a67 2
int poll_recalc	(void *, int);
int poll_dispatch	(void *, struct timeval *);
d81 2
d87 2
a88 1
	memset(&pollop, 0, sizeof(pollop));
d90 1
a90 1
	evsignal_init(&pollop.evsigmask);
d92 1
a92 1
	return (&pollop);
d101 1
a101 1
poll_recalc(void *arg, int max)
d109 1
a109 1
poll_dispatch(void *arg, struct timeval *tv)
d117 1
a117 1
	TAILQ_FOREACH(ev, &eventqueue, ev_next) {
d128 1
a128 1
				log_error("realloc");
d134 1
a134 1
				log_error("realloc");
d165 1
a165 1
	sec = tv->tv_sec * 1000 + tv->tv_usec / 1000;
d173 1
a173 1
			log_error("poll");
d182 1
a182 1
	LOG_DBG((LOG_MISC, 80, "%s: poll reports %d", __func__, res));
@


1.2
log
@poll fixes from Niels; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.1 2003/09/23 08:52:04 markus Exp $	*/
d15 1
a15 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
d68 1
a68 1
} pop;
d92 1
a92 1
	memset(&pop, 0, sizeof(pop));
d94 1
a94 1
	evsignal_init(&pop.evsigmask);
d96 1
a96 1
	return (&pop);
d192 2
d195 1
d197 5
a201 3
		if (pop->event_set[i].revents & POLLHUP)
			pop->event_set[i].revents = POLLIN|POLLOUT;
		if (pop->event_set[i].revents & POLLIN)
d203 1
a203 1
		if (pop->event_set[i].revents & POLLOUT)
@


1.1
log
@add support for poll(2); ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: poll.c,v 1.2 2002/06/25 15:50:15 mickey Exp $	*/
d196 3
d200 3
a202 3
			res = EV_READ;
		else if (pop->event_set[i].revents & POLLOUT)
			res = EV_WRITE;
@

