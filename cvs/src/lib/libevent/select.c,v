head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.4
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.24.0.8
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.4
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.6
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.14
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.12
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.10
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.8
	OPENBSD_5_0:1.16.0.6
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	EVENT00:1.1.1.1
	PROVOS00:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2016.09.03.11.31.17;	author nayden;	state Exp;
branches;
next	1.24;
commitid	tdu5Eu69k0NPLcIY;

1.24
date	2014.10.30.13.43.28;	author bluhm;	state Exp;
branches;
next	1.23;
commitid	6KMtot8Dq7H43yBa;

1.23
date	2014.10.29.22.47.29;	author bluhm;	state Exp;
branches;
next	1.22;
commitid	FfV5qz960uDg9hP4;

1.22
date	2014.10.18.21.56.44;	author bluhm;	state Exp;
branches;
next	1.21;
commitid	XRrKg8ZEpC2CbWF4;

1.21
date	2014.10.18.16.48.28;	author bluhm;	state Exp;
branches;
next	1.20;
commitid	hi1FlfmD0UHtTfmr;

1.20
date	2014.10.17.19.16.01;	author bluhm;	state Exp;
branches;
next	1.19;
commitid	wDYYYW1I3umfP7v5;

1.19
date	2014.10.16.07.38.06;	author bluhm;	state Exp;
branches;
next	1.18;
commitid	Lmt85cKJJzyEtWLn;

1.18
date	2014.10.11.04.07.39;	author doug;	state Exp;
branches;
next	1.17;
commitid	hk9W3TmUGTnBEY6z;

1.17
date	2013.08.24.10.46.48;	author dlg;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.21.21.02.47;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.21.20.02.40;	author nicm;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.02.06.09.11;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2007.03.19.15.12.49;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.30.06.32.36;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.18.01.52.22;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.06.18.22.53;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.22.00.56.25;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.19.08.07.45;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.19.02.03.12;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.28.06.53.12;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.09.10.54.38;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.19.18.52.12;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.15.18.58.20;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.25.15.50.15;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.15.18.01.38;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.15.18.01.38;	author provos;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Remove NULL pointer checks before calls to free().
OK bluhm@@ nicm@@
@
text
@/*	$OpenBSD: select.c,v 1.24 2014/10/30 13:43:28 bluhm Exp $	*/

/*
 * Copyright 2000-2002 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/select.h>
#include <sys/queue.h>

#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#ifdef CHECK_INVARIANTS
#include <assert.h>
#endif

#include "event.h"
#include "event-internal.h"
#include "evsignal.h"
#include "log.h"

struct selectop {
	int event_fds;		/* Highest fd in fd set */
	size_t event_fdsz;
	fd_set *event_readset_in;
	fd_set *event_writeset_in;
	fd_set *event_readset_out;
	fd_set *event_writeset_out;
	struct event **event_r_by_fd;
	struct event **event_w_by_fd;
};

static void *select_init	(struct event_base *);
static int select_add		(void *, struct event *);
static int select_del		(void *, struct event *);
static int select_dispatch	(struct event_base *, void *, struct timeval *);
static void select_dealloc     (struct event_base *, void *);

const struct eventop selectops = {
	"select",
	select_init,
	select_add,
	select_del,
	select_dispatch,
	select_dealloc,
	0
};

static int select_resize(struct selectop *sop, size_t fdsz);

static void *
select_init(struct event_base *base)
{
	struct selectop *sop;

	/* Disable select when this environment variable is set */
	if (!issetugid() && getenv("EVENT_NOSELECT"))
		return (NULL);

	if (!(sop = calloc(1, sizeof(struct selectop))))
		return (NULL);

	select_resize(sop, howmany(32 + 1, NFDBITS)*sizeof(fd_mask));

	evsignal_init(base);

	return (sop);
}

#ifdef CHECK_INVARIANTS
static void
check_selectop(struct selectop *sop)
{
	int i;
	for (i = 0; i <= sop->event_fds; ++i) {
		if (FD_ISSET(i, sop->event_readset_in)) {
			assert(sop->event_r_by_fd[i]);
			assert(sop->event_r_by_fd[i]->ev_events & EV_READ);
			assert(sop->event_r_by_fd[i]->ev_fd == i);
		} else {
			assert(! sop->event_r_by_fd[i]);
		}
		if (FD_ISSET(i, sop->event_writeset_in)) {
			assert(sop->event_w_by_fd[i]);
			assert(sop->event_w_by_fd[i]->ev_events & EV_WRITE);
			assert(sop->event_w_by_fd[i]->ev_fd == i);
		} else {
			assert(! sop->event_w_by_fd[i]);
		}
	}

}
#else
#define check_selectop(sop) do { (void) sop; } while (0)
#endif

static int
select_dispatch(struct event_base *base, void *arg, struct timeval *tv)
{
	int res, i, j;
	struct selectop *sop = arg;

	check_selectop(sop);

	memcpy(sop->event_readset_out, sop->event_readset_in,
	       sop->event_fdsz);
	memcpy(sop->event_writeset_out, sop->event_writeset_in,
	       sop->event_fdsz);

	res = select(sop->event_fds + 1, sop->event_readset_out,
	    sop->event_writeset_out, NULL, tv);

	check_selectop(sop);

	if (res == -1) {
		if (errno != EINTR) {
			event_warn("select");
			return (-1);
		}

		evsignal_process(base);
		return (0);
	} else if (base->sig.evsignal_caught) {
		evsignal_process(base);
	}

	event_debug(("%s: select reports %d", __func__, res));

	check_selectop(sop);
	i = arc4random_uniform(sop->event_fds + 1);
	for (j = 0; j <= sop->event_fds; ++j) {
		struct event *r_ev = NULL, *w_ev = NULL;
		if (++i >= sop->event_fds+1)
			i = 0;

		res = 0;
		if (FD_ISSET(i, sop->event_readset_out)) {
			r_ev = sop->event_r_by_fd[i];
			res |= EV_READ;
		}
		if (FD_ISSET(i, sop->event_writeset_out)) {
			w_ev = sop->event_w_by_fd[i];
			res |= EV_WRITE;
		}
		if (r_ev && (res & r_ev->ev_events)) {
			event_active(r_ev, res & r_ev->ev_events, 1);
		}
		if (w_ev && w_ev != r_ev && (res & w_ev->ev_events)) {
			event_active(w_ev, res & w_ev->ev_events, 1);
		}
	}
	check_selectop(sop);

	return (0);
}


static int
select_resize(struct selectop *sop, size_t fdsz)
{
	size_t n_events, n_events_old;

	fd_set *readset_in = NULL;
	fd_set *writeset_in = NULL;
	fd_set *readset_out = NULL;
	fd_set *writeset_out = NULL;
	struct event **r_by_fd = NULL;
	struct event **w_by_fd = NULL;

	n_events = (fdsz/sizeof(fd_mask)) * NFDBITS;
	n_events_old = (sop->event_fdsz/sizeof(fd_mask)) * NFDBITS;

	if (sop->event_readset_in)
		check_selectop(sop);

	if ((readset_in = realloc(sop->event_readset_in, fdsz)) == NULL)
		goto error;
	sop->event_readset_in = readset_in;
	if ((readset_out = realloc(sop->event_readset_out, fdsz)) == NULL)
		goto error;
	sop->event_readset_out = readset_out;
	if ((writeset_in = realloc(sop->event_writeset_in, fdsz)) == NULL)
		goto error;
	sop->event_writeset_in = writeset_in;
	if ((writeset_out = realloc(sop->event_writeset_out, fdsz)) == NULL)
		goto error;
	sop->event_writeset_out = writeset_out;
	if ((r_by_fd = reallocarray(sop->event_r_by_fd, n_events,
	    sizeof(struct event *))) == NULL)
		goto error;
	sop->event_r_by_fd = r_by_fd;
	if ((w_by_fd = reallocarray(sop->event_w_by_fd, n_events,
	    sizeof(struct event *))) == NULL)
		goto error;
	sop->event_w_by_fd = w_by_fd;

	memset((char *)sop->event_readset_in + sop->event_fdsz, 0,
	    fdsz - sop->event_fdsz);
	memset((char *)sop->event_writeset_in + sop->event_fdsz, 0,
	    fdsz - sop->event_fdsz);
	memset(sop->event_r_by_fd + n_events_old, 0,
	    (n_events-n_events_old) * sizeof(struct event*));
	memset(sop->event_w_by_fd + n_events_old, 0,
	    (n_events-n_events_old) * sizeof(struct event*));

	sop->event_fdsz = fdsz;
	check_selectop(sop);

	return (0);

 error:
	event_warn("malloc");
	return (-1);
}


static int
select_add(void *arg, struct event *ev)
{
	struct selectop *sop = arg;

	if (ev->ev_events & EV_SIGNAL)
		return (evsignal_add(ev));

	check_selectop(sop);
	/*
	 * Keep track of the highest fd, so that we can calculate the size
	 * of the fd_sets for select(2)
	 */
	if (sop->event_fds < ev->ev_fd) {
		size_t fdsz = sop->event_fdsz;

		if (fdsz < sizeof(fd_mask))
			fdsz = sizeof(fd_mask);

		while (fdsz <
		    (howmany(ev->ev_fd + 1, NFDBITS) * sizeof(fd_mask)))
			fdsz *= 2;

		if (fdsz != sop->event_fdsz) {
			if (select_resize(sop, fdsz)) {
				check_selectop(sop);
				return (-1);
			}
		}

		sop->event_fds = ev->ev_fd;
	}

	if (ev->ev_events & EV_READ) {
		FD_SET(ev->ev_fd, sop->event_readset_in);
		sop->event_r_by_fd[ev->ev_fd] = ev;
	}
	if (ev->ev_events & EV_WRITE) {
		FD_SET(ev->ev_fd, sop->event_writeset_in);
		sop->event_w_by_fd[ev->ev_fd] = ev;
	}
	check_selectop(sop);

	return (0);
}

/*
 * Nothing to be done here.
 */

static int
select_del(void *arg, struct event *ev)
{
	struct selectop *sop = arg;

	check_selectop(sop);
	if (ev->ev_events & EV_SIGNAL)
		return (evsignal_del(ev));

	if (sop->event_fds < ev->ev_fd) {
		check_selectop(sop);
		return (0);
	}

	if (ev->ev_events & EV_READ) {
		FD_CLR(ev->ev_fd, sop->event_readset_in);
		sop->event_r_by_fd[ev->ev_fd] = NULL;
	}

	if (ev->ev_events & EV_WRITE) {
		FD_CLR(ev->ev_fd, sop->event_writeset_in);
		sop->event_w_by_fd[ev->ev_fd] = NULL;
	}

	check_selectop(sop);
	return (0);
}

static void
select_dealloc(struct event_base *base, void *arg)
{
	struct selectop *sop = arg;

	evsignal_dealloc(base);
	free(sop->event_readset_in);
	free(sop->event_writeset_in);
	free(sop->event_readset_out);
	free(sop->event_writeset_out);
	free(sop->event_r_by_fd);
	free(sop->event_w_by_fd);

	memset(sop, 0, sizeof(struct selectop));
	free(sop);
}
@


1.24
log
@The fdsz and n_events variables contain unsigned values that are
derived from size_t and passed to functions as size_t parameters.
Change them from int to size_t to avoid compiler warnings.
OK doug@@ nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.23 2014/10/29 22:47:29 bluhm Exp $	*/
d329 6
a334 12
	if (sop->event_readset_in)
		free(sop->event_readset_in);
	if (sop->event_writeset_in)
		free(sop->event_writeset_in);
	if (sop->event_readset_out)
		free(sop->event_readset_out);
	if (sop->event_writeset_out)
		free(sop->event_writeset_out);
	if (sop->event_r_by_fd)
		free(sop->event_r_by_fd);
	if (sop->event_w_by_fd)
		free(sop->event_w_by_fd);
@


1.23
log
@After removing all the #ifdef, the wrappers in evutil are rather
useless.  Let libevent call the libc functions directly.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.22 2014/10/18 21:56:44 bluhm Exp $	*/
d52 1
a52 1
	int event_fdsz;
d77 1
a77 1
static int select_resize(struct selectop *sop, int fdsz);
d187 1
a187 1
select_resize(struct selectop *sop, int fdsz)
d189 1
a189 1
	int n_events, n_events_old;
d259 1
a259 1
		int fdsz = sop->event_fdsz;
@


1.22
log
@Remove some #ifdef from libevent.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.21 2014/10/18 16:48:28 bluhm Exp $	*/
a45 1
#include "evutil.h"
d85 1
a85 1
	if (evutil_getenv("EVENT_NOSELECT"))
@


1.21
log
@Remove the remaining #ifdef HAVE_ and the #define _GNU_SOURCE.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.20 2014/10/17 19:16:01 bluhm Exp $	*/
a49 4

#ifndef howmany
#define        howmany(x, y)   (((x)+((y)-1))/(y))
#endif
@


1.20
log
@Remove #ifdef HAVE_.*_H, just include the header files.
Do not include sys/param.h.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.19 2014/10/16 07:38:06 bluhm Exp $	*/
a52 7
#endif

#ifndef HAVE_FD_MASK
/* This type is mandatory, but Android doesn't define it. */
#undef NFDBITS
#define NFDBITS (sizeof(long)*8)
typedef unsigned long fd_mask;
@


1.19
log
@Remove #ifdef HAVE_CONFIG_H, there is no config.h file.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.18 2014/10/11 04:07:39 doug Exp $	*/
a30 1
#ifdef HAVE_SYS_TIME_H
a31 4
#else
#include <sys/_libevent_time.h>
#endif
#ifdef HAVE_SYS_SELECT_H
a32 1
#endif
d34 1
@


1.18
log
@Userland reallocarray() audit.

Avoid potential integer overflow in the size argument of malloc() and
realloc() by using reallocarray() to avoid unchecked multiplication.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.17 2013/08/24 10:46:48 dlg Exp $	*/
a28 3
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
@


1.17
log
@replace random() with arc4random.

blambert didnt like stuff linking to libevent getting warnings about use of
an unsafe api.

ok blambert@@ mikeb@@ deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.16 2010/04/21 21:02:47 nicm Exp $	*/
d236 2
a237 2
	if ((r_by_fd = realloc(sop->event_r_by_fd,
		 n_events*sizeof(struct event*))) == NULL)
d240 2
a241 2
	if ((w_by_fd = realloc(sop->event_w_by_fd,
		 n_events * sizeof(struct event*))) == NULL)
@


1.16
log
@Clean up the awful _EVENT_* poo in the libevent headers, and don't
install event-config.h.

Pointed out by deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.15 2010/04/21 20:02:40 nicm Exp $	*/
d178 1
a178 1
	i = random() % (sop->event_fds+1);
@


1.15
log
@Update libevent to 1.4.13.

This is the core library only, the DNS parts are removed and it does not
include the other extra bits (HTTP, DNS, and RPC), a separate port for
these will appear in due course.

Thanks to jsg, sthen, alek, gilles, jacekm, bernd and any others I've
forgotten for testing/comments.

Note that /usr/include/evdns.h should be removed after updating.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.14 2008/05/02 06:09:11 brad Exp $	*/
d63 1
a63 1
#ifndef _EVENT_HAVE_FD_MASK
@


1.14
log
@Update to libevent 1.3e while retaining our local changes.

"No objection" millert@@
"the diff looks and works fine" reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.13 2007/03/19 15:12:49 millert Exp $	*/
d37 1
a37 1
#include <sys/_time.h>
a42 1
#include <sys/tree.h>
d54 1
d63 7
d81 5
a85 6
void *select_init	(struct event_base *);
int select_add		(void *, struct event *);
int select_del		(void *, struct event *);
int select_recalc	(struct event_base *, void *, int);
int select_dispatch	(struct event_base *, void *, struct timeval *);
void select_dealloc     (struct event_base *, void *);
a91 1
	select_recalc,
d93 2
a94 1
	select_dealloc
d99 1
a99 1
void *
d105 1
a105 1
	if (!issetugid() && getenv("EVENT_NOSELECT"))
d145 1
a145 16
/*
 * Called with the highest fd that we know about.  If it is 0, completely
 * recalculate everything.
 */

int
select_recalc(struct event_base *base, void *arg, int max)
{
	struct selectop *sop = arg;

	check_selectop(sop);

	return (0);
}

int
d148 1
a148 1
	int res, i;
d178 2
a179 1
	for (i = 0; i <= sop->event_fds; ++i) {
d181 3
a193 2
			if (!(r_ev->ev_events & EV_PERSIST))
				event_del(r_ev);
a196 2
			if (!(w_ev->ev_events & EV_PERSIST))
				event_del(w_ev);
d265 1
a265 1
int
d315 1
a315 1
int
d343 1
a343 1
void
@


1.13
log
@Update to libevent-1.3b while retaining our local changes.  beck@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.12 2006/03/30 06:32:36 brad Exp $	*/
d39 3
a62 2
extern volatile sig_atomic_t evsignal_caught;

a71 1
	sigset_t evsigmask;
d74 1
a74 1
void *select_init	(void);
d79 1
a79 1
void select_dealloc     (void *);
d94 1
a94 1
select_init(void)
d107 1
a107 1
	evsignal_init(&sop->evsigmask);
d117 1
a117 1
	for (i=0;i<=sop->event_fds;++i) {
d151 1
a151 1
	return (evsignal_recalc(&sop->evsigmask));
a166 3
	if (evsignal_deliver(&sop->evsigmask) == -1)
		return (-1);

a170 2
	if (evsignal_recalc(&sop->evsigmask) == -1)
		return (-1);
d178 1
a178 1
		evsignal_process();
d180 3
a182 2
	} else if (evsignal_caught)
		evsignal_process();
d280 1
a280 1
		return (evsignal_add(&sop->evsigmask, ev));
d331 1
a331 1
		return (evsignal_del(&sop->evsigmask, ev));
d353 1
a353 1
select_dealloc(void *arg)
d357 1
@


1.12
log
@introduce a way to free the base.

From libevent CVS
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.11 2005/06/18 01:52:22 brad Exp $	*/
d136 1
a136 1
#define check_selectop(sop)
@


1.11
log
@update to libevent 1.1a; keep local changes

ok grunk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.10 2005/05/06 18:22:53 brad Exp $	*/
d79 1
d87 2
a88 1
	select_dispatch
d354 22
@


1.10
log
@fix comment, kqueue -> {poll,select}
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.9 2005/04/22 00:56:25 brad Exp $	*/
d47 3
d65 6
a70 2
	fd_set *event_readset;
	fd_set *event_writeset;
d89 2
d103 2
d110 27
a145 25
	fd_set *readset, *writeset;
	struct event *ev;
	int fdsz;

	if (sop->event_fds < max)
		sop->event_fds = max;

	if (!sop->event_fds) {
		TAILQ_FOREACH(ev, &base->eventqueue, ev_next)
			if (ev->ev_fd > sop->event_fds)
				sop->event_fds = ev->ev_fd;
	}

	fdsz = howmany(sop->event_fds + 1, NFDBITS) * sizeof(fd_mask);
	if (fdsz > sop->event_fdsz) {
		if ((readset = realloc(sop->event_readset, fdsz)) == NULL) {
			event_warn("malloc");
			return (-1);
		}

		if ((writeset = realloc(sop->event_writeset, fdsz)) == NULL) {
			event_warn("malloc");
			free(readset);
			return (-1);
		}
d147 1
a147 9
		memset((char *)readset + sop->event_fdsz, 0,
		    fdsz - sop->event_fdsz);
		memset((char *)writeset + sop->event_fdsz, 0,
		    fdsz - sop->event_fdsz);

		sop->event_readset = readset;
		sop->event_writeset = writeset;
		sop->event_fdsz = fdsz;
	}
d155 1
a155 2
	int maxfd, res;
	struct event *ev, *next;
d158 1
a158 2
	memset(sop->event_readset, 0, sop->event_fdsz);
	memset(sop->event_writeset, 0, sop->event_fdsz);
d160 4
a163 6
	TAILQ_FOREACH(ev, &base->eventqueue, ev_next) {
		if (ev->ev_events & EV_WRITE)
			FD_SET(ev->ev_fd, sop->event_writeset);
		if (ev->ev_events & EV_READ)
			FD_SET(ev->ev_fd, sop->event_readset);
	}
d168 2
a169 2
	res = select(sop->event_fds + 1, sop->event_readset, 
	    sop->event_writeset, NULL, tv);
d171 1
d188 3
a190 4
	maxfd = 0;
	for (ev = TAILQ_FIRST(&base->eventqueue); ev != NULL; ev = next) {
		next = TAILQ_NEXT(ev, ev_next);

d192 2
a193 1
		if (FD_ISSET(ev->ev_fd, sop->event_readset))
d195 3
a197 1
		if (FD_ISSET(ev->ev_fd, sop->event_writeset))
d199 13
a211 1
		res &= ev->ev_events;
d213 51
a263 9
		if (res) {
			if (!(ev->ev_events & EV_PERSIST))
				event_del(ev);
			else if (ev->ev_fd > maxfd)
				maxfd = ev->ev_fd;
			event_active(ev, res, 1);
		} else if (ev->ev_fd > maxfd)
			maxfd = ev->ev_fd;
	}
d265 2
a266 1
	sop->event_fds = maxfd;
d269 4
d275 1
d284 2
a285 1
	/* 
d289 17
a305 1
	if (sop->event_fds < ev->ev_fd)
d307 11
d331 6
a336 1
	if (!(ev->ev_events & EV_SIGNAL))
d338 6
d345 7
a351 1
	return (evsignal_del(&sop->evsigmask, ev));
@


1.9
log
@update to libevent 1.0c; keep local changes

no shared lib so no ABI/API check is necessary

thanks to Alexander von Gernler for submitting
another diff in an attempt to update libevent
and for a use-after-free fix.

ok henning@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.7 2005/04/19 02:03:12 brad Exp $	*/
d87 1
a87 1
	/* Disable kqueue when this environment variable is set */
@


1.8
log
@backout.  not discussed, and very wrong.  bad brad
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.6 2004/04/28 06:53:12 brad Exp $	*/
d40 1
a46 8
#include <err.h>

#ifdef USE_LOG
#include "log.h"
#else
#define LOG_DBG(x)
#define log_error(x)	perror(x)
#endif
d49 1
d51 1
a51 2

extern struct event_list eventqueue;
d65 1
a65 1
} sop;
d70 2
a71 2
int select_recalc	(void *, int);
int select_dispatch	(void *, struct timeval *);
d85 2
d91 2
a92 1
	memset(&sop, 0, sizeof(sop));
d94 1
a94 1
	evsignal_init(&sop.evsigmask);
d96 1
a96 1
	return (&sop);
d105 1
a105 1
select_recalc(void *arg, int max)
d116 1
a116 1
		TAILQ_FOREACH(ev, &eventqueue, ev_next)
d124 1
a124 1
			log_error("malloc");
d129 1
a129 1
			log_error("malloc");
d148 1
a148 1
select_dispatch(void *arg, struct timeval *tv)
d157 1
a157 1
	TAILQ_FOREACH(ev, &eventqueue, ev_next) {
d175 1
a175 1
			log_error("select");
d184 1
a184 1
	LOG_DBG((LOG_MISC, 80, "%s: select reports %d", __func__, res));
d187 1
a187 1
	for (ev = TAILQ_FIRST(&eventqueue); ev != NULL; ev = next) {
d200 2
@


1.7
log
@update to libevent 1.0c; keep local changes
@
text
@a39 1
#include <sys/tree.h>
d46 8
a55 1
#include "event-internal.h"
d57 2
a58 1
#include "log.h"
d72 1
a72 1
};
d77 2
a78 2
int select_recalc	(struct event_base *, void *, int);
int select_dispatch	(struct event_base *, void *, struct timeval *);
a91 2
	struct selectop *sop;

d96 1
a96 2
	if (!(sop = calloc(1, sizeof(struct selectop))))
		return (NULL);
d98 1
a98 1
	evsignal_init(&sop->evsigmask);
d100 1
a100 1
	return (sop);
d109 1
a109 1
select_recalc(struct event_base *base, void *arg, int max)
d120 1
a120 1
		TAILQ_FOREACH(ev, &base->eventqueue, ev_next)
d128 1
a128 1
			event_warn("malloc");
d133 1
a133 1
			event_warn("malloc");
d152 1
a152 1
select_dispatch(struct event_base *base, void *arg, struct timeval *tv)
d161 1
a161 1
	TAILQ_FOREACH(ev, &base->eventqueue, ev_next) {
d179 1
a179 1
			event_warn("select");
d188 1
a188 1
	event_debug(("%s: select reports %d", __func__, res));
d191 1
a191 1
	for (ev = TAILQ_FIRST(&base->eventqueue); ev != NULL; ev = next) {
a203 2
			else if (ev->ev_fd > maxfd)
				maxfd = ev->ev_fd;
@


1.6
log
@update to libevent 0.8; keep local changes

ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.2 2002/06/25 15:50:15 mickey Exp $	*/
d40 1
a46 8
#include <err.h>

#ifdef USE_LOG
#include "log.h"
#else
#define LOG_DBG(x)
#define log_error(x)	perror(x)
#endif
d49 1
d51 1
a51 2

extern struct event_list eventqueue;
d65 1
a65 1
} sop;
d70 2
a71 2
int select_recalc	(void *, int);
int select_dispatch	(void *, struct timeval *);
d85 2
d91 2
a92 1
	memset(&sop, 0, sizeof(sop));
d94 1
a94 1
	evsignal_init(&sop.evsigmask);
d96 1
a96 1
	return (&sop);
d105 1
a105 1
select_recalc(void *arg, int max)
d116 1
a116 1
		TAILQ_FOREACH(ev, &eventqueue, ev_next)
d124 1
a124 1
			log_error("malloc");
d129 1
a129 1
			log_error("malloc");
d148 1
a148 1
select_dispatch(void *arg, struct timeval *tv)
d157 1
a157 1
	TAILQ_FOREACH(ev, &eventqueue, ev_next) {
d175 1
a175 1
			log_error("select");
d184 1
a184 1
	LOG_DBG((LOG_MISC, 80, "%s: select reports %d", __func__, res));
d187 1
a187 1
	for (ev = TAILQ_FIRST(&eventqueue); ev != NULL; ev = next) {
d200 2
@


1.5
log
@update to libevent-0.7a.tar.gz; keep local changes
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.4 2003/06/19 18:52:12 mickey Exp $	*/
d15 1
a15 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niels Provos.
 * 4. The name of the author may not be used to endorse or promote products
@


1.4
log
@constify constant structures; niels ok
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.3 2002/09/15 18:58:20 itojun Exp $	*/
d32 1
d34 1
d37 1
d39 3
d59 1
a60 1
extern struct event_list timequeue;
a61 1
extern struct event_list signalqueue;
d67 1
a67 2
short evsigcaught[NSIG];
volatile sig_atomic_t signal_caught = 0;
a76 4
void signal_process(void);
int signal_recalc(void);
int signal_deliver(void);

d95 4
d101 1
a101 1
	sigemptyset(&sop.evsigmask);
d151 1
a151 1
	return (signal_recalc());
d171 1
a171 1
	if (signal_deliver() == -1)
d177 1
a177 1
	if (signal_recalc() == -1)
d186 1
a186 1
		signal_process();
d188 2
a189 2
	} else if (signal_caught)
		signal_process();
d191 1
a191 2
	LOG_DBG((LOG_MISC, 80, __FUNCTION__": select reports %d",
		 res));
d222 2
a223 11
	if (ev->ev_events & EV_SIGNAL) {
		int signal;

		if (ev->ev_events & (EV_READ|EV_WRITE))
			errx(1, "%s: EV_SIGNAL incompatible use",
			    __FUNCTION__);
		signal = EVENT_SIGNAL(ev);
		sigaddset(&sop->evsigmask, signal);

		return (0);
	}
a243 2
	int signal;

d247 1
a247 4
	signal = EVENT_SIGNAL(ev);
	sigdelset(&sop->evsigmask, signal);

	return (sigaction(EVENT_SIGNAL(ev),(struct sigaction *)SIG_DFL, NULL));
a248 56

static void
signal_handler(int sig)
{
	evsigcaught[sig]++;
	signal_caught = 1;
}

int
signal_recalc(void)
{
	struct sigaction sa;
	struct event *ev;

	if (sigprocmask(SIG_BLOCK, &sop.evsigmask, NULL) == -1)
		return (-1);
	
	/* Reinstall our signal handler. */
	memset(&sa, 0, sizeof(sa));
	sa.sa_handler = signal_handler;
	sa.sa_mask = sop.evsigmask;
	sa.sa_flags |= SA_RESTART;
	
	TAILQ_FOREACH(ev, &signalqueue, ev_signal_next) {
		if (sigaction(EVENT_SIGNAL(ev), &sa, NULL) == -1)
			return (-1);
	}
	return (0);
}

int
signal_deliver(void)
{
	return (sigprocmask(SIG_UNBLOCK, &sop.evsigmask, NULL));
	/* XXX - pending signals handled here */
}

void
signal_process(void)
{
	struct event *ev;
	short ncalls;

	TAILQ_FOREACH(ev, &signalqueue, ev_signal_next) {
		ncalls = evsigcaught[EVENT_SIGNAL(ev)];
		if (ncalls) {
			if (!(ev->ev_events & EV_PERSIST))
				event_del(ev);
			event_active(ev, EV_SIGNAL, ncalls);
		}
	}

	memset(evsigcaught, 0, sizeof(evsigcaught));
	signal_caught = 0;
}

@


1.3
log
@Signal fixes from ericj@@monkey.org via dugsong@@monkey.org
via provos
@
text
@d1 1
a1 1
/*	$OpenBSD: select.c,v 1.2 2002/06/25 15:50:15 mickey Exp $	*/
d83 1
a83 1
struct eventop selectops = {
@


1.2
log
@rcsids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
d184 2
a185 1
	}
d265 1
d313 1
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@import libevent an event notification abstraction on top of select or kqueue
supporting timeout and signal callsbacks, too.  okay deraadt@@ millert@@
@
text
@@
