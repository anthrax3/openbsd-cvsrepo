head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.3.0.20
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.18
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2016.03.20.00.01.22;	author krw;	state Exp;
branches;
next	1.9;
commitid	vrVXbedfAlzCTHmf;

1.9
date	2014.10.18.21.56.44;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	XRrKg8ZEpC2CbWF4;

1.8
date	2014.10.18.16.48.28;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	hi1FlfmD0UHtTfmr;

1.7
date	2014.10.17.20.52.59;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	kP2i1Fuvolo0c88A;

1.6
date	2014.10.17.19.16.01;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	wDYYYW1I3umfP7v5;

1.5
date	2014.10.16.07.38.06;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	Lmt85cKJJzyEtWLn;

1.4
date	2014.10.08.20.14.19;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	WQfvaeUx8qLyAKa3;

1.3
date	2010.07.12.18.03.38;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.21.21.02.47;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.21.20.02.40;	author nicm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Currently we have about a 50/50 split over fcntl(n, F_GETFL [,0])
idioms.

Adopt the more concise fcntl(n, F_GETFL) over fcntl(n, F_GETFL, 0)
where it is obvious further investigation will not yield and
even better way.

Obviousness evaluation and ok guenther@@
@
text
@/*	$OpenBSD: evutil.c,v 1.9 2014/10/18 21:56:44 bluhm Exp $	*/

/*
 * Copyright (c) 2007 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/queue.h>

#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <errno.h>
#include <stdio.h>
#include <signal.h>

#include "event.h"
#include "event-internal.h"
#include "evutil.h"
#include "log.h"

int
evutil_socketpair(int family, int type, int protocol, int fd[2])
{
	return socketpair(family, type, protocol, fd);
}

int
evutil_make_socket_nonblocking(int fd)
{
	int flags;

	if ((flags = fcntl(fd, F_GETFL)) < 0) {
		event_warn("fcntl(%d, F_GETFL)", fd);
		return -1;
	}
	if (fcntl(fd, F_SETFL, flags | O_NONBLOCK) == -1) {
		event_warn("fcntl(%d, F_SETFL)", fd);
		return -1;
	}
	return 0;
}

ev_int64_t
evutil_strtoll(const char *s, char **endptr, int base)
{
	return (ev_int64_t)strtoll(s, endptr, base);
}

int
evutil_snprintf(char *buf, size_t buflen, const char *format, ...)
{
	int r;
	va_list ap;
	va_start(ap, format);
	r = evutil_vsnprintf(buf, buflen, format, ap);
	va_end(ap);
	return r;
}

int
evutil_vsnprintf(char *buf, size_t buflen, const char *format, va_list ap)
{
	int r = vsnprintf(buf, buflen, format, ap);
	buf[buflen-1] = '\0';
	return r;
}

static int
evutil_issetugid(void)
{
	return issetugid();
}

const char *
evutil_getenv(const char *varname)
{
	if (evutil_issetugid())
		return NULL;

	return getenv(varname);
}
@


1.9
log
@Remove some #ifdef from libevent.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: evutil.c,v 1.8 2014/10/18 16:48:28 bluhm Exp $	*/
d57 1
a57 1
	if ((flags = fcntl(fd, F_GETFL, NULL)) < 0) {
@


1.8
log
@Remove the remaining #ifdef HAVE_ and the #define _GNU_SOURCE.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: evutil.c,v 1.7 2014/10/17 20:52:59 bluhm Exp $	*/
a87 8
#ifdef _MSC_VER
	int r = _vsnprintf(buf, buflen, format, ap);
	buf[buflen-1] = '\0';
	if (r >= 0)
		return r;
	else
		return _vscprintf(format, ap);
#else
a90 1
#endif
@


1.7
log
@Remove some #ifdef HAVE_syscall.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: evutil.c,v 1.6 2014/10/17 19:16:01 bluhm Exp $	*/
a70 1
#ifdef HAVE_STRTOLL
a71 5
#elif SIZEOF_LONG == 8
	return (ev_int64_t)strtol(s, endptr, base);
#else
#error "I don't know how to parse 64-bit integers."
#endif
@


1.6
log
@Remove #ifdef HAVE_.*_H, just include the header files.
Do not include sys/param.h.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: evutil.c,v 1.5 2014/10/16 07:38:06 bluhm Exp $	*/
a79 16
#ifndef HAVE_GETTIMEOFDAY
int
evutil_gettimeofday(struct timeval *tv, struct timezone *tz)
{
	struct _timeb tb;

	if(tv == NULL)
		return -1;

	_ftime(&tb);
	tv->tv_sec = (long) tb.time;
	tv->tv_usec = ((int) tb.millitm) * 1000;
	return 0;
}
#endif

a110 1
#ifdef HAVE_ISSETUGID
a111 12
#else

#ifdef HAVE_GETEUID
	if (getuid() != geteuid())
		return 1;
#endif
#ifdef HAVE_GETEGID
	if (getgid() != getegid())
		return 1;
#endif
	return 0;
#endif
@


1.5
log
@Remove #ifdef HAVE_CONFIG_H, there is no config.h file.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: evutil.c,v 1.4 2014/10/08 20:14:19 bluhm Exp $	*/
a30 1
#ifdef HAVE_SYS_SOCKET_H
d32 2
a33 2
#endif
#ifdef HAVE_UNISTD_H
a34 2
#endif
#ifdef HAVE_FCNTL_H
a35 2
#endif
#ifdef HAVE_STDLIB_H
a36 1
#endif
a40 1
#include <sys/queue.h>
@


1.4
log
@iRemove the #ifdef WIN32 implementation from libevent.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: evutil.c,v 1.3 2010/07/12 18:03:38 nicm Exp $	*/
a28 3
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
@


1.3
log
@Update to 1.4.14b.

From their change log:
 o Fix memory-leak of signal handler array with kqueue. [backport]
 o Make evutil_make_socket_nonblocking() leave any other flags alone.
 o Adjusted fcntl() retval comparison on evutil_make_socket_nonblocking().
 o Re-add event_siglcb; some old code _was_ still using it. :(
 o Fix a free(NULL) in min_heap.h
 o Clean up properly when adding a signal handler fails.

Also a local change to use an int rather than a long for fcntl().

ok guenther deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: evutil.c,v 1.2 2010/04/21 21:02:47 nicm Exp $	*/
a32 7
#ifdef WIN32
#include <winsock2.h>
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#undef WIN32_LEAN_AND_MEAN
#endif

a46 3
#if defined WIN32 && !defined(HAVE_GETTIMEOFDAY_H)
#include <sys/timeb.h>
#endif
a58 1
#ifndef WIN32
a59 91
#else
	/* This code is originally from Tor.  Used with permission. */

	/* This socketpair does not work when localhost is down. So
	 * it's really not the same thing at all. But it's close enough
	 * for now, and really, when localhost is down sometimes, we
	 * have other problems too.
	 */
	int listener = -1;
	int connector = -1;
	int acceptor = -1;
	struct sockaddr_in listen_addr;
	struct sockaddr_in connect_addr;
	int size;
	int saved_errno = -1;

	if (protocol
#ifdef AF_UNIX
		|| family != AF_UNIX
#endif
		) {
		EVUTIL_SET_SOCKET_ERROR(WSAEAFNOSUPPORT);
		return -1;
	}
	if (!fd) {
		EVUTIL_SET_SOCKET_ERROR(WSAEINVAL);
		return -1;
	}

	listener = socket(AF_INET, type, 0);
	if (listener < 0)
		return -1;
	memset(&listen_addr, 0, sizeof(listen_addr));
	listen_addr.sin_family = AF_INET;
	listen_addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
	listen_addr.sin_port = 0;	/* kernel chooses port.	 */
	if (bind(listener, (struct sockaddr *) &listen_addr, sizeof (listen_addr))
		== -1)
		goto tidy_up_and_fail;
	if (listen(listener, 1) == -1)
		goto tidy_up_and_fail;

	connector = socket(AF_INET, type, 0);
	if (connector < 0)
		goto tidy_up_and_fail;
	/* We want to find out the port number to connect to.  */
	size = sizeof(connect_addr);
	if (getsockname(listener, (struct sockaddr *) &connect_addr, &size) == -1)
		goto tidy_up_and_fail;
	if (size != sizeof (connect_addr))
		goto abort_tidy_up_and_fail;
	if (connect(connector, (struct sockaddr *) &connect_addr,
				sizeof(connect_addr)) == -1)
		goto tidy_up_and_fail;

	size = sizeof(listen_addr);
	acceptor = accept(listener, (struct sockaddr *) &listen_addr, &size);
	if (acceptor < 0)
		goto tidy_up_and_fail;
	if (size != sizeof(listen_addr))
		goto abort_tidy_up_and_fail;
	EVUTIL_CLOSESOCKET(listener);
	/* Now check we are talking to ourself by matching port and host on the
	   two sockets.	 */
	if (getsockname(connector, (struct sockaddr *) &connect_addr, &size) == -1)
		goto tidy_up_and_fail;
	if (size != sizeof (connect_addr)
		|| listen_addr.sin_family != connect_addr.sin_family
		|| listen_addr.sin_addr.s_addr != connect_addr.sin_addr.s_addr
		|| listen_addr.sin_port != connect_addr.sin_port)
		goto abort_tidy_up_and_fail;
	fd[0] = connector;
	fd[1] = acceptor;

	return 0;

 abort_tidy_up_and_fail:
	saved_errno = WSAECONNABORTED;
 tidy_up_and_fail:
	if (saved_errno < 0)
		saved_errno = WSAGetLastError();
	if (listener != -1)
		EVUTIL_CLOSESOCKET(listener);
	if (connector != -1)
		EVUTIL_CLOSESOCKET(connector);
	if (acceptor != -1)
		EVUTIL_CLOSESOCKET(acceptor);

	EVUTIL_SET_SOCKET_ERROR(saved_errno);
	return -1;
#endif
d65 5
a69 4
#ifdef WIN32
	{
		unsigned long nonblocking = 1;
		ioctlsocket(fd, FIONBIO, (unsigned long*) &nonblocking);
d71 3
a73 11
#else
	{
		int flags;
		if ((flags = fcntl(fd, F_GETFL, NULL)) < 0) {
			event_warn("fcntl(%d, F_GETFL)", fd);
			return -1;
		}
		if (fcntl(fd, F_SETFL, flags | O_NONBLOCK) == -1) {
			event_warn("fcntl(%d, F_SETFL)", fd);
			return -1;
		}
a74 1
#endif
a84 16
#elif defined(WIN32) && defined(_MSC_VER) && _MSC_VER < 1300
	/* XXXX on old versions of MS APIs, we only support base
	 * 10. */
	ev_int64_t r;
	if (base != 10)
		return 0;
	r = (ev_int64_t) _atoi64(s);
	while (isspace(*s))
		++s;
	while (isdigit(*s))
		++s;
	if (endptr)
		*endptr = (char*) s;
	return r;
#elif defined(WIN32)
	return (ev_int64_t) _strtoi64(s, endptr, base);
@


1.2
log
@Clean up the awful _EVENT_* poo in the libevent headers, and don't
install event-config.h.

Pointed out by deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: evutil.c,v 1.1 2010/04/21 20:02:40 nicm Exp $	*/
d173 11
a183 4
	if (fcntl(fd, F_SETFL, O_NONBLOCK) == -1) {
		event_warn("fcntl(O_NONBLOCK)");
		return -1;
}	
@


1.1
log
@Update libevent to 1.4.13.

This is the core library only, the DNS parts are removed and it does not
include the other extra bits (HTTP, DNS, and RPC), a separate port for
these will appear in due course.

Thanks to jsg, sthen, alek, gilles, jacekm, bernd and any others I've
forgotten for testing/comments.

Note that /usr/include/evdns.h should be removed after updating.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d209 1
a209 1
#ifndef _EVENT_HAVE_GETTIMEOFDAY
d256 1
a256 1
#ifdef _EVENT_HAVE_ISSETUGID
d260 1
a260 1
#ifdef _EVENT_HAVE_GETEUID
d264 1
a264 1
#ifdef _EVENT_HAVE_GETEGID
@

