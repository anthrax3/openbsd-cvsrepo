head	1.4;
access;
symbols
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	EVENT00:1.1.1.1
	PROVOS00:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.06.20.07.59.46;	author markus;	state dead;
branches;
next	1.3;

1.3
date	2003.03.10.04.02.50;	author david;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.25.15.50.16;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.15.18.01.39;	author provos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.15.18.01.39;	author provos;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove old files; libevent is maintained elsewhere
@
text
@/*	$OpenBSD: event-test.c,v 1.3 2003/03/10 04:02:50 david Exp $	*/

/*
 * Compile with:
 * cc -I/usr/local/include -o event-test event-test.c -L/usr/local/lib -levent
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/queue.h>
#include <sys/time.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

#include <event.h>

void
fifo_read(int fd, short event, void *arg)
{
	char buf[255];
	int len;
	struct event *ev = arg;

	/* Reschedule this event */
	event_add(ev, NULL);

	fprintf(stderr, "fifo_read called with fd: %d, event: %d, arg: %p\n",
		fd, event, arg);

	len = read(fd, buf, sizeof(buf) - 1);
	if (len == -1) {
		perror("read");
		return;
	} else if (len == 0) {
		fprintf(stderr, "Connection closed\n");
		return;
	}

	buf[len] = '\0';
	fprintf(stdout, "Read: %s\n", buf);
}

int
main (int argc, char **argv)
{
	struct stat st;
	char *fifo = "event.fifo";
	int socket;
	struct event evfifo;
 
	if (lstat (fifo, &st) == 0) {
		if ((st.st_mode & S_IFMT) == S_IFREG) {
			errno = EEXIST;
			perror("lstat");
			exit (1);
		}
	}

	unlink (fifo);
	if (mkfifo (fifo, 0600) == -1) {
		perror("mkfifo");
		exit (1);
	}

	/* Linux pipes are broken, we need O_RDWR instead of O_RDONLY */
#ifdef __linux
	socket = open (fifo, O_RDWR | O_NONBLOCK, 0);
#else
	socket = open (fifo, O_RDONLY | O_NONBLOCK, 0);
#endif

	if (socket == -1) {
		perror("open");
		exit (1);
	}

	fprintf(stderr, "Write data to %s\n", fifo);

	/* Initialize the event library */
	event_init();

	/* Initialize one event */
	event_set(&evfifo, socket, EV_READ, fifo_read, &evfifo);

	/* Add it to the active events, without a timeout */
	event_add(&evfifo, NULL);
	
	event_dispatch();

	return (0);
}

@


1.3
log
@duplicate words and spelling fixes in comments
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: event-test.c,v 1.2 2002/06/25 15:50:16 mickey Exp $	*/
@


1.2
log
@rcsids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d83 1
a83 1
	/* Initalize the event library */
d86 1
a86 1
	/* Initalize one event */
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@import libevent an event notification abstraction on top of select or kqueue
supporting timeout and signal callsbacks, too.  okay deraadt@@ millert@@
@
text
@@
