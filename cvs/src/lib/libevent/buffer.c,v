head	1.31;
access;
symbols
	OPENBSD_6_1:1.31.0.2
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.29.0.8
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.4
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.6
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.19.0.20
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.18
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.14
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.12
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.10
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.8
	OPENBSD_5_0:1.19.0.6
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.4
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.31
date	2017.03.18.01.48.43;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	FDzpTc03jAk6sTbQ;

1.30
date	2016.09.03.11.31.17;	author nayden;	state Exp;
branches;
next	1.29;
commitid	tdu5Eu69k0NPLcIY;

1.29
date	2015.02.05.12.59.57;	author millert;	state Exp;
branches;
next	1.28;
commitid	DTQbfd4poqBW8iSJ;

1.28
date	2015.01.05.23.14.36;	author bluhm;	state Exp;
branches;
next	1.27;
commitid	KEvfcjWcxnyqdGAb;

1.27
date	2014.11.21.07.44.25;	author dlg;	state Exp;
branches;
next	1.26;
commitid	lqJmhSisiwMvn94o;

1.26
date	2014.10.30.16.45.37;	author bluhm;	state Exp;
branches;
next	1.25;
commitid	tunEM8ZR8ESfpNht;

1.25
date	2014.10.29.22.47.29;	author bluhm;	state Exp;
branches;
next	1.24;
commitid	FfV5qz960uDg9hP4;

1.24
date	2014.10.18.21.56.44;	author bluhm;	state Exp;
branches;
next	1.23;
commitid	XRrKg8ZEpC2CbWF4;

1.23
date	2014.10.18.16.48.28;	author bluhm;	state Exp;
branches;
next	1.22;
commitid	hi1FlfmD0UHtTfmr;

1.22
date	2014.10.17.19.16.01;	author bluhm;	state Exp;
branches;
next	1.21;
commitid	wDYYYW1I3umfP7v5;

1.21
date	2014.10.16.07.38.06;	author bluhm;	state Exp;
branches;
next	1.20;
commitid	Lmt85cKJJzyEtWLn;

1.20
date	2014.10.08.20.14.19;	author bluhm;	state Exp;
branches;
next	1.19;
commitid	WQfvaeUx8qLyAKa3;

1.19
date	2010.07.17.17.16.47;	author chl;	state Exp;
branches
	1.19.18.1
	1.19.20.1;
next	1.18;

1.18
date	2010.07.12.18.03.38;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.21.20.02.40;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.13.12.16.33;	author jacekm;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.02.06.09.11;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.19.15.12.49;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2007.02.04.18.59.12;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.21.02.28.47;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.26.15.25.14;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.18.20.23.42;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.25.05.25.33;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.23.20.18.20;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.02.07.15.13;	author grunk;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.18.01.52.22;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.04.03.17.48;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.22.00.56.25;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.19.08.07.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.19.02.03.12;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.28.06.53.12;	author brad;	state Exp;
branches;
next	;

1.19.18.1
date	2015.01.07.20.12.02;	author bluhm;	state Exp;
branches;
next	;
commitid	tBp02dJhCrdLmIoh;

1.19.20.1
date	2015.01.07.20.05.46;	author bluhm;	state Exp;
branches;
next	;
commitid	8IDGz1qFaITuc398;


desc
@@


1.31
log
@Use recallocarray() to avoid leaving detritus in memory when resizing
the string buffer.
ok jsing millert
@
text
@/*	$OpenBSD: buffer.c,v 1.30 2016/09/03 11:31:17 nayden Exp $	*/

/*
 * Copyright (c) 2002, 2003 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/ioctl.h>

#include <assert.h>
#include <errno.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <unistd.h>

#include "event.h"
#include "log.h"

struct evbuffer *
evbuffer_new(void)
{
	struct evbuffer *buffer;

	buffer = calloc(1, sizeof(struct evbuffer));

	return (buffer);
}

void
evbuffer_free(struct evbuffer *buffer)
{
	free(buffer->orig_buffer);
	free(buffer);
}

/*
 * This is a destructive add.  The data from one buffer moves into
 * the other buffer.
 */

#define SWAP(x,y) do { \
	(x)->buffer = (y)->buffer; \
	(x)->orig_buffer = (y)->orig_buffer; \
	(x)->misalign = (y)->misalign; \
	(x)->totallen = (y)->totallen; \
	(x)->off = (y)->off; \
} while (0)

int
evbuffer_add_buffer(struct evbuffer *outbuf, struct evbuffer *inbuf)
{
	int res;

	/* Short cut for better performance */
	if (outbuf->off == 0) {
		struct evbuffer tmp;
		size_t oldoff = inbuf->off;

		/* Swap them directly */
		SWAP(&tmp, outbuf);
		SWAP(outbuf, inbuf);
		SWAP(inbuf, &tmp);

		/*
		 * Optimization comes with a price; we need to notify the
		 * buffer if necessary of the changes. oldoff is the amount
		 * of data that we transferred from inbuf to outbuf
		 */
		if (inbuf->off != oldoff && inbuf->cb != NULL)
			(*inbuf->cb)(inbuf, oldoff, inbuf->off, inbuf->cbarg);
		if (oldoff && outbuf->cb != NULL)
			(*outbuf->cb)(outbuf, 0, oldoff, outbuf->cbarg);

		return (0);
	}

	res = evbuffer_add(outbuf, inbuf->buffer, inbuf->off);
	if (res == 0) {
		/* We drain the input buffer on success */
		evbuffer_drain(inbuf, inbuf->off);
	}

	return (res);
}

int
evbuffer_add_vprintf(struct evbuffer *buf, const char *fmt, va_list ap)
{
	char *buffer;
	size_t space;
	size_t oldoff = buf->off;
	int sz;
	va_list aq;

	/* make sure that at least some space is available */
	if (evbuffer_expand(buf, 64) < 0)
		return (-1);
	for (;;) {
		size_t used = buf->misalign + buf->off;
		buffer = (char *)buf->buffer + buf->off;
		assert(buf->totallen >= used);
		space = buf->totallen - used;

		va_copy(aq, ap);

		sz = vsnprintf(buffer, space, fmt, aq);

		va_end(aq);

		if (sz < 0)
			return (-1);
		if ((size_t)sz < space) {
			buf->off += sz;
			if (buf->cb != NULL)
				(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);
			return (sz);
		}
		if (evbuffer_expand(buf, sz + 1) == -1)
			return (-1);

	}
	/* NOTREACHED */
}

int
evbuffer_add_printf(struct evbuffer *buf, const char *fmt, ...)
{
	int res = -1;
	va_list ap;

	va_start(ap, fmt);
	res = evbuffer_add_vprintf(buf, fmt, ap);
	va_end(ap);

	return (res);
}

/* Reads data from an event buffer and drains the bytes read */

int
evbuffer_remove(struct evbuffer *buf, void *data, size_t datlen)
{
	size_t nread = datlen;
	if (nread >= buf->off)
		nread = buf->off;

	memcpy(data, buf->buffer, nread);
	evbuffer_drain(buf, nread);

	return (nread);
}

/*
 * Reads a line terminated by either '\r\n', '\n\r' or '\r' or '\n'.
 * The returned buffer needs to be freed by the called.
 */

char *
evbuffer_readline(struct evbuffer *buffer)
{
	u_char *data = EVBUFFER_DATA(buffer);
	size_t len = EVBUFFER_LENGTH(buffer);
	char *line;
	unsigned int i;

	for (i = 0; i < len; i++) {
		if (data[i] == '\r' || data[i] == '\n')
			break;
	}

	if (i == len)
		return (NULL);

	if ((line = malloc(i + 1)) == NULL) {
		event_warn("%s: out of memory", __func__);
		return (NULL);
	}

	memcpy(line, data, i);
	line[i] = '\0';

	/*
	 * Some protocols terminate a line with '\r\n', so check for
	 * that, too.
	 */
	if ( i < len - 1 ) {
		char fch = data[i], sch = data[i+1];

		/* Drain one more character if needed */
		if ( (sch == '\r' || sch == '\n') && sch != fch )
			i += 1;
	}

	evbuffer_drain(buffer, i + 1);

	return (line);
}


char *
evbuffer_readln(struct evbuffer *buffer, size_t *n_read_out,
		enum evbuffer_eol_style eol_style)
{
	u_char *data = EVBUFFER_DATA(buffer);
	u_char *start_of_eol, *end_of_eol;
	size_t len = EVBUFFER_LENGTH(buffer);
	char *line;
	unsigned int i, n_to_copy, n_to_drain;

	if (n_read_out)
		*n_read_out = 0;

	/* depending on eol_style, set start_of_eol to the first character
	 * in the newline, and end_of_eol to one after the last character. */
	switch (eol_style) {
	case EVBUFFER_EOL_ANY:
		for (i = 0; i < len; i++) {
			if (data[i] == '\r' || data[i] == '\n')
				break;
		}
		if (i == len)
			return (NULL);
		start_of_eol = data+i;
		++i;
		for ( ; i < len; i++) {
			if (data[i] != '\r' && data[i] != '\n')
				break;
		}
		end_of_eol = data+i;
		break;
	case EVBUFFER_EOL_CRLF:
		end_of_eol = memchr(data, '\n', len);
		if (!end_of_eol)
			return (NULL);
		if (end_of_eol > data && *(end_of_eol-1) == '\r')
			start_of_eol = end_of_eol - 1;
		else
			start_of_eol = end_of_eol;
		end_of_eol++; /*point to one after the LF. */
		break;
	case EVBUFFER_EOL_CRLF_STRICT: {
		u_char *cp = data;
		while ((cp = memchr(cp, '\r', len-(cp-data)))) {
			if (cp < data+len-1 && *(cp+1) == '\n')
				break;
			if (++cp >= data+len) {
				cp = NULL;
				break;
			}
		}
		if (!cp)
			return (NULL);
		start_of_eol = cp;
		end_of_eol = cp+2;
		break;
	}
	case EVBUFFER_EOL_LF:
		start_of_eol = memchr(data, '\n', len);
		if (!start_of_eol)
			return (NULL);
		end_of_eol = start_of_eol + 1;
		break;
	default:
		return (NULL);
	}

	n_to_copy = start_of_eol - data;
	n_to_drain = end_of_eol - data;

	if ((line = malloc(n_to_copy+1)) == NULL) {
		event_warn("%s: out of memory", __func__);
		return (NULL);
	}

	memcpy(line, data, n_to_copy);
	line[n_to_copy] = '\0';

	evbuffer_drain(buffer, n_to_drain);
	if (n_read_out)
		*n_read_out = (size_t)n_to_copy;

	return (line);
}

/* Adds data to an event buffer */

static void
evbuffer_align(struct evbuffer *buf)
{
	memmove(buf->orig_buffer, buf->buffer, buf->off);
	buf->buffer = buf->orig_buffer;
	buf->misalign = 0;
}

/* Expands the available space in the event buffer to at least datlen */

int
evbuffer_expand(struct evbuffer *buf, size_t datlen)
{
	size_t used = buf->misalign + buf->off;

	assert(buf->totallen >= used);

	/* If we can fit all the data, then we don't have to do anything */
	if (buf->totallen - used >= datlen)
		return (0);
	/* If we would need to overflow to fit this much data, we can't
	 * do anything. */
	if (datlen > SIZE_MAX - buf->off)
		return (-1);

	/*
	 * If the misalignment fulfills our data needs, we just force an
	 * alignment to happen.  Afterwards, we have enough space.
	 */
	if (buf->totallen - buf->off >= datlen) {
		evbuffer_align(buf);
	} else {
		void *newbuf;
		size_t length = buf->totallen;
		size_t need = buf->off + datlen;

		if (length < 256)
			length = 256;
		if (need < SIZE_MAX / 2) {
			while (length < need) {
				length <<= 1;
			}
		} else {
			length = need;
		}

		if (buf->orig_buffer != buf->buffer)
			evbuffer_align(buf);
		if ((newbuf = recallocarray(buf->buffer, buf->totallen,
		    length, 1)) == NULL)
			return (-1);

		buf->orig_buffer = buf->buffer = newbuf;
		buf->totallen = length;
	}

	return (0);
}

int
evbuffer_add(struct evbuffer *buf, const void *data, size_t datlen)
{
	size_t used = buf->misalign + buf->off;
	size_t oldoff = buf->off;

	if (buf->totallen - used < datlen) {
		if (evbuffer_expand(buf, datlen) == -1)
			return (-1);
	}

	memcpy(buf->buffer + buf->off, data, datlen);
	buf->off += datlen;

	if (datlen && buf->cb != NULL)
		(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

	return (0);
}

void
evbuffer_drain(struct evbuffer *buf, size_t len)
{
	size_t oldoff = buf->off;

	if (len >= buf->off) {
		buf->off = 0;
		buf->buffer = buf->orig_buffer;
		buf->misalign = 0;
		goto done;
	}

	buf->buffer += len;
	buf->misalign += len;

	buf->off -= len;

 done:
	/* Tell someone about changes in this buffer */
	if (buf->off != oldoff && buf->cb != NULL)
		(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

}

/*
 * Reads data from a file descriptor into a buffer.
 */

#define EVBUFFER_MAX_READ	4096

int
evbuffer_read(struct evbuffer *buf, int fd, int howmuch)
{
	u_char *p;
	size_t oldoff = buf->off;
	int n = EVBUFFER_MAX_READ;

	if (ioctl(fd, FIONREAD, &n) == -1 || n <= 0) {
		n = EVBUFFER_MAX_READ;
	} else if (n > EVBUFFER_MAX_READ && n > howmuch) {
		/*
		 * It's possible that a lot of data is available for
		 * reading.  We do not want to exhaust resources
		 * before the reader has a chance to do something
		 * about it.  If the reader does not tell us how much
		 * data we should read, we artifically limit it.
		 */
		if ((size_t)n > buf->totallen << 2)
			n = buf->totallen << 2;
		if (n < EVBUFFER_MAX_READ)
			n = EVBUFFER_MAX_READ;
	}
	if (howmuch < 0 || howmuch > n)
		howmuch = n;

	/* If we don't have FIONREAD, we might waste some space here */
	if (evbuffer_expand(buf, howmuch) == -1)
		return (-1);

	/* We can append new data at this point */
	p = buf->buffer + buf->off;

	n = read(fd, p, howmuch);
	if (n == -1)
		return (-1);
	if (n == 0)
		return (0);

	buf->off += n;

	/* Tell someone about changes in this buffer */
	if (buf->off != oldoff && buf->cb != NULL)
		(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);

	return (n);
}

int
evbuffer_write(struct evbuffer *buffer, int fd)
{
	int n;

	n = write(fd, buffer->buffer, buffer->off);
	if (n == -1)
		return (-1);
	if (n == 0)
		return (0);
	evbuffer_drain(buffer, n);

	return (n);
}

u_char *
evbuffer_find(struct evbuffer *buffer, const u_char *what, size_t len)
{
	u_char *search = buffer->buffer, *end = search + buffer->off;
	u_char *p;

	while (search < end &&
	    (p = memchr(search, *what, end - search)) != NULL) {
		if (p + len > end)
			break;
		if (memcmp(p, what, len) == 0)
			return (p);
		search = p + 1;
	}

	return (NULL);
}

void evbuffer_setcb(struct evbuffer *buffer,
    void (*cb)(struct evbuffer *, size_t, size_t, void *),
    void *cbarg)
{
	buffer->cb = cb;
	buffer->cbarg = cbarg;
}
@


1.30
log
@Remove NULL pointer checks before calls to free().
OK bluhm@@ nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.29 2015/02/05 12:59:57 millert Exp $	*/
d362 2
a363 1
		if ((newbuf = realloc(buf->buffer, length)) == NULL)
@


1.29
log
@Include stdint.h, not limits.h to get SIZE_MAX.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.28 2015/01/05 23:14:36 bluhm Exp $	*/
d59 1
a59 2
	if (buffer->orig_buffer != NULL)
		free(buffer->orig_buffer);
@


1.28
log
@Fix CVE-2014-6272 in Libevent 1.4 from upstream:
- https://github.com/libevent/libevent/commit/7b21c4eabf1f3946d3f63cce1319c490caab8ecf
- For this fix, we need to make sure that passing too-large inputs to
  the evbuffer functions can't make us do bad things with the heap.
On top of that do:
- Update libevent version to 1.4.15-stable.
- Use SIZE_MAX from limits.h instead of a private define.
- Do not declare 'size_t need' twice to avoid a compiler warning.
OK sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.27 2014/11/21 07:44:25 dlg Exp $	*/
d36 1
a36 1
#include <limits.h>
@


1.27
log
@libraries shouldnt print to stderr when things dont go their way.

switch fprintf(stderr) over to event_warn() on malloc failure. fix
up an errant newline in an existing event_warn while there.

originally i just wanted to delete the fprintf
diff from nicm@@ who is away from a keyboard right now so cant commit
guenther@@ agrees with the idea
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.26 2014/10/30 16:45:37 bluhm Exp $	*/
d36 1
d124 2
a125 1
	evbuffer_expand(buf, 64);
d328 3
a330 1
	size_t need = buf->misalign + buf->off + datlen;
d333 1
a333 1
	if (buf->totallen >= need)
d335 4
d344 1
a344 1
	if (buf->misalign >= datlen) {
d349 1
d353 7
a359 2
		while (length < need)
			length <<= 1;
d376 1
a376 1
	size_t need = buf->misalign + buf->off + datlen;
d379 1
a379 1
	if (buf->totallen < need) {
@


1.26
log
@Fix whitespace errors in libevent.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.25 2014/10/29 22:47:29 bluhm Exp $	*/
d201 1
a201 1
		fprintf(stderr, "%s: out of memory\n", __func__);
d297 1
a297 1
		event_warn("%s: out of memory\n", __func__);
@


1.25
log
@After removing all the #ifdef, the wrappers in evutil are rather
useless.  Let libevent call the libc functions directly.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.24 2014/10/18 21:56:44 bluhm Exp $	*/
d49 1
a49 1
	
d63 1
a63 1
/* 
d91 1
a91 1
		/* 
d100 1
a100 1
		
d175 1
a175 1
	
@


1.24
log
@Remove some #ifdef from libevent.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.23 2014/10/18 16:48:28 bluhm Exp $	*/
a42 1
#include "evutil.h"
d132 1
a132 1
		sz = evutil_vsnprintf(buffer, space, fmt, aq);
@


1.23
log
@Remove the remaining #ifdef HAVE_ and the #define _GNU_SOURCE.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.22 2014/10/17 19:16:01 bluhm Exp $	*/
a130 3
#ifndef va_copy
#define	va_copy(dst, src)	memcpy(&(dst), &(src), sizeof(va_list))
#endif
a416 1
#if defined(FIONREAD)
a431 1
#endif	
@


1.22
log
@Remove #ifdef HAVE_.*_H, just include the header files.
Do not include sys/param.h.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.21 2014/10/16 07:38:06 bluhm Exp $	*/
a28 5

#ifdef HAVE_VASPRINTF
/* If we have vasprintf, we need to define this before we include stdio.h. */
#define _GNU_SOURCE
#endif
@


1.21
log
@Remove #ifdef HAVE_CONFIG_H, there is no config.h file.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.20 2014/10/08 20:14:19 bluhm Exp $	*/
a35 2

#ifdef HAVE_SYS_TIME_H
a36 3
#endif

#ifdef HAVE_SYS_IOCTL_H
a37 1
#endif
a43 1
#ifdef HAVE_STDARG_H
a44 2
#endif
#ifdef HAVE_UNISTD_H
a45 1
#endif
d49 1
a49 1
#include "./log.h"
@


1.20
log
@iRemove the #ifdef WIN32 implementation from libevent.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.19 2010/07/17 17:16:47 chl Exp $	*/
a28 4

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
@


1.19
log
@add missing header needed by event_warn()

ok nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.18 2010/07/12 18:03:38 nicm Exp $	*/
a33 5
#ifdef WIN32
#include <winsock2.h>
#include <windows.h>
#endif

a439 4
#ifdef WIN32
	long lng = n;
	if (ioctlsocket(fd, FIONREAD, &lng) == -1 || (n=lng) <= 0) {
#else
a440 1
#endif
a465 1
#ifndef WIN32
a466 3
#else
	n = recv(fd, p, howmuch, 0);
#endif
a485 1
#ifndef WIN32
a486 3
#else
	n = send(fd, buffer->buffer, buffer->off, 0);
#endif
@


1.19.18.1
log
@Security fix for libevent 1.4 CVE-2014-6272 in 5.5-stable.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.19 2010/07/17 17:16:47 chl Exp $	*/
a55 1
#include <limits.h>
d148 1
a148 2
	if (evbuffer_expand(buf, 64) < 0)
		return (-1);
d354 1
a354 3
	size_t used = buf->misalign + buf->off;

	assert(buf->totallen >= used);
d357 1
a357 1
	if (buf->totallen - used >= datlen)
a358 4
	/* If we would need to overflow to fit this much data, we can't
	 * do anything. */
	if (datlen > SIZE_MAX - buf->off)
		return (-1);
d364 1
a364 1
	if (buf->totallen - buf->off >= datlen) {
a368 1
		size_t need = buf->off + datlen;
d372 2
a373 7
		if (need < SIZE_MAX / 2) {
			while (length < need) {
				length <<= 1;
			}
		} else {
			length = need;
		}
d390 1
a390 1
	size_t used = buf->misalign + buf->off;
d393 1
a393 1
	if (buf->totallen - used < datlen) {
@


1.19.20.1
log
@Security fix for libevent 1.4 CVE-2014-6272 in 5.6-stable.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.19 2010/07/17 17:16:47 chl Exp $	*/
a55 1
#include <limits.h>
d148 1
a148 2
	if (evbuffer_expand(buf, 64) < 0)
		return (-1);
d354 1
a354 3
	size_t used = buf->misalign + buf->off;

	assert(buf->totallen >= used);
d357 1
a357 1
	if (buf->totallen - used >= datlen)
a358 4
	/* If we would need to overflow to fit this much data, we can't
	 * do anything. */
	if (datlen > SIZE_MAX - buf->off)
		return (-1);
d364 1
a364 1
	if (buf->totallen - buf->off >= datlen) {
a368 1
		size_t need = buf->off + datlen;
d372 2
a373 7
		if (need < SIZE_MAX / 2) {
			while (length < need) {
				length <<= 1;
			}
		} else {
			length = need;
		}
d390 1
a390 1
	size_t used = buf->misalign + buf->off;
d393 1
a393 1
	if (buf->totallen - used < datlen) {
@


1.18
log
@Update to 1.4.14b.

From their change log:
 o Fix memory-leak of signal handler array with kqueue. [backport]
 o Make evutil_make_socket_nonblocking() leave any other flags alone.
 o Adjusted fcntl() retval comparison on evutil_make_socket_nonblocking().
 o Re-add event_siglcb; some old code _was_ still using it. :(
 o Fix a free(NULL) in min_heap.h
 o Clean up properly when adding a signal handler fails.

Also a local change to use an int rather than a long for fcntl().

ok guenther deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.17 2010/04/21 20:02:40 nicm Exp $	*/
d68 1
@


1.17
log
@Update libevent to 1.4.13.

This is the core library only, the DNS parts are removed and it does not
include the other extra bits (HTTP, DNS, and RPC), a separate port for
these will appear in due course.

Thanks to jsg, sthen, alek, gilles, jacekm, bernd and any others I've
forgotten for testing/comments.

Note that /usr/include/evdns.h should be removed after updating.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.16 2009/10/13 12:16:33 jacekm Exp $	*/
d263 3
d324 1
a324 2
		fprintf(stderr, "%s: out of memory\n", __func__);
		evbuffer_drain(buffer, n_to_drain);		
@


1.16
log
@In evbuffer_readline, do not lose data upon malloc failure.  From mainstream:
http://levent.svn.sourceforge.net/viewvc/levent?view=rev&revision=1436
ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.15 2008/05/02 06:09:11 brad Exp $	*/
d34 5
d67 1
d73 1
a73 1

d87 1
a87 1
/*
d115 1
a115 1
		/*
d124 1
a124 1

d159 1
a159 6
#ifdef WIN32
		sz = vsnprintf(buffer, space - 1, fmt, aq);
		buffer[space - 1] = '\0';
#else
		sz = vsnprintf(buffer, space, fmt, aq);
#endif
d165 1
a165 1
		if (sz < space) {
d202 1
a202 1

d252 84
d440 2
d443 4
a446 1
	DWORD dwBytesRead;
a447 3

#ifdef FIONREAD
	if (ioctl(fd, FIONREAD, &n) == -1 || n == 0) {
d457 1
a457 1
		if (n > buf->totallen << 2)
d462 1
a462 1
#endif
d475 3
a481 8
#else
	n = ReadFile((HANDLE)fd, p, howmuch, &dwBytesRead, NULL);
	if (n == 0)
		return (-1);
	if (dwBytesRead == 0)
		return (0);
	n = dwBytesRead;
#endif
a495 3
#ifdef WIN32
	DWORD dwBytesWritten;
#endif
d499 3
a505 8
#else
	n = WriteFile((HANDLE)fd, buffer->buffer, buffer->off, &dwBytesWritten, NULL);
	if (n == 0)
		return (-1);
	if (dwBytesWritten == 0)
		return (0);
	n = dwBytesWritten;
#endif
@


1.15
log
@Update to libevent 1.3e while retaining our local changes.

"No objection" millert@@
"the diff looks and works fine" reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.14 2007/03/19 15:12:49 millert Exp $	*/
a227 1
		evbuffer_drain(buffer, i);
@


1.14
log
@Update to libevent-1.3b while retaining our local changes.  beck@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.13 2007/02/04 18:59:12 millert Exp $	*/
d49 1
d140 2
d143 1
d145 2
a146 1
		space = buf->totallen - buf->misalign - buf->off;
d162 1
a162 1
		if (sz == -1)
d254 1
a254 1
static inline void
d441 1
a441 2
	size_t remain = buffer->off;
	u_char *search = buffer->buffer;
d444 3
a446 3
	while ((p = memchr(search, *what, remain)) != NULL) {
		remain = buffer->off - (size_t)(search - buffer->buffer);
		if (remain < len)
@


1.13
log
@Two libevent fixes from the SVN repo:
allow gotsig to terminate active event loop and evbuffer_find fix.
OK brad@@ pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.12 2006/12/21 02:28:47 krw Exp $	*/
d66 1
a66 1
	
d117 1
a117 1
		
d143 3
d167 1
a167 1
 
d196 1
a196 1
	
d211 1
a211 1
	u_int i;
d296 1
a296 1
evbuffer_add(struct evbuffer *buf, void *data, size_t datlen)
d371 1
a371 1
#endif	
@


1.12
log
@'tranfer' -> 'transfer' in comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.11 2006/11/26 15:25:14 brad Exp $	*/
d437 4
a440 1
	while ((p = memchr(search, *what, remain)) != NULL && remain >= len) {
a442 1

a443 1
		remain = buffer->off - (size_t)(search - buffer->buffer);
@


1.11
log
@fix a potential problem in multiple handling of va_list; use va_copy instead.

From Niels Provos via the libevent SVN, by Alejo.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.10 2006/03/18 20:23:42 brad Exp $	*/
d111 1
a111 1
		 * of data that we tranfered from inbuf to outbuf
@


1.10
log
@- limit the amount of data bufferevents are going to consume to something
  reasonable; in some circumstances it could happen that libevent happily
  allocated 100MB in read buffers without telling the user; found by
  christopher maxwell - parts of these changes are from his patch.

- allow setting an event base for bufferevents; from phil oleson

- improved manpage from Phil Oleson

From libevent CVS
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.9 2006/01/25 05:25:33 brad Exp $	*/
d137 1
d140 1
a140 1
		buffer = buf->buffer + buf->off;
d143 2
d146 1
a146 1
		sz = vsnprintf(buffer, space - 1, fmt, ap);
d149 1
a149 1
		sz = vsnprintf(buffer, space, fmt, ap);
d151 3
@


1.9
log
@another fix from art.

From libevent CVS
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.8 2006/01/23 20:18:20 brad Exp $	*/
d122 2
a123 1
	if (res == 0)
d125 1
d347 1
a347 1
	if (ioctl(fd, FIONREAD, &n) == -1 || n == 0)
d349 13
@


1.8
log
@add evbuffer_add_vprintf interface from artur grabowski

From libevent CVS

ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.7 2005/07/02 07:15:13 grunk Exp $	*/
d154 1
a154 1
		if (evbuffer_expand(buf, sz) == -1)
d410 1
a410 1
evbuffer_find(struct evbuffer *buffer, u_char *what, size_t len)
@


1.7
log
@zap trailing whitespaces, no binary change

ok brad@@ beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.6 2005/06/18 01:52:22 brad Exp $	*/
d129 34
a162 1
evbuffer_add_printf(struct evbuffer *buf, char *fmt, ...)
a164 4
	char *msg;
#ifndef HAVE_VASPRINTF
	static char buffer[4096];
#endif
d168 1
a168 22

#ifdef HAVE_VASPRINTF
	if (vasprintf(&msg, fmt, ap) == -1)
		goto end;
#else
#  ifdef WIN32
	_vsnprintf(buffer, sizeof(buffer) - 1, fmt, ap);
	buffer[sizeof(buffer)-1] = '\0';
#  else /* ! WIN32 */
	vsnprintf(buffer, sizeof(buffer), fmt, ap);
#  endif
	msg = buffer;
#endif
	
	res = strlen(msg);
	if (evbuffer_add(buf, msg, res) == -1)
		res = -1;
#ifdef HAVE_VASPRINTF
	free(msg);

end:
#endif
@


1.6
log
@update to libevent 1.1a; keep local changes

ok grunk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.5 2005/05/04 03:17:48 brad Exp $	*/
d80 1
a80 1
/* 
d108 1
a108 1
		/* 
@


1.5
log
@update to libevent 1.0d; keep local changes

thanks to Alexander von Gernler for testing
and some bug fixes

ok mpf@@ norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.4 2005/04/22 00:56:25 brad Exp $	*/
d189 1
a189 1
	char *data = EVBUFFER_DATA(buffer);
d192 1
a192 1
	int i;
d337 1
a337 1
	if (ioctl(fd, FIONREAD, &n) == -1)
@


1.4
log
@update to libevent 1.0c; keep local changes

no shared lib so no ABI/API check is necessary

thanks to Alexander von Gernler for submitting
another diff in an attempt to update libevent
and for a use-after-free fix.

ok henning@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.2 2005/04/19 02:03:12 brad Exp $	*/
d171 1
a171 1
	int nread = datlen;
d179 47
@


1.3
log
@backout.  not discussed, and very wrong.  bad brad
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.1 2004/04/28 06:53:12 brad Exp $	*/
a29 2
#include <sys/types.h>

d34 7
d45 4
a48 1
#include <err.h>
d75 2
a76 2
	if (buffer->buffer != NULL)
		free(buffer->buffer);
d85 8
d97 24
d133 3
d140 1
d143 9
d156 1
d159 2
a160 1
 end:
d166 2
d169 1
a169 1
evbuffer_add(struct evbuffer *buf, u_char *data, size_t datlen)
d171 30
a200 2
	size_t need = buf->off + datlen;
	size_t oldoff = buf->off;
d202 7
a208 1
	if (buf->totallen < need) {
d210 1
a210 1
		int length = buf->totallen;
d217 2
d222 1
a222 1
		buf->buffer = newbuf;
d226 14
d256 2
d261 3
a263 1
	memmove(buf->buffer, buf->buffer + len, buf->off - len);
d273 6
d280 1
a280 1
evbuffer_read(struct evbuffer *buffer, int fd, int howmuch)
d282 20
a301 5
	u_char inbuf[4096];
	int n;
	
	if (howmuch < 0 || howmuch > sizeof(inbuf))
		howmuch = sizeof(inbuf);
d303 2
a304 1
	n = read(fd, inbuf, howmuch);
d309 8
d318 5
a322 1
	evbuffer_add(buffer, inbuf, n);
d331 3
d335 1
d341 8
a348 1

@


1.2
log
@update to libevent 1.0c; keep local changes
@
text
@d30 2
a35 7
#ifdef HAVE_VASPRINTF
/* If we have vasprintf, we need to define this before we include stdio.h. */
#define _GNU_SOURCE
#endif

#include <sys/types.h>

d40 1
a40 4
#ifdef HAVE_SYS_IOCTL_H
#include <sys/ioctl.h>
#endif

d67 2
a68 2
	if (buffer->orig_buffer != NULL)
		free(buffer->orig_buffer);
a76 8
#define SWAP(x,y) do { \
	(x)->buffer = (y)->buffer; \
	(x)->orig_buffer = (y)->orig_buffer; \
	(x)->misalign = (y)->misalign; \
	(x)->totallen = (y)->totallen; \
	(x)->off = (y)->off; \
} while (0)

a80 24

	/* Short cut for better performance */
	if (outbuf->off == 0) {
		struct evbuffer tmp;
		size_t oldoff = inbuf->off;

		/* Swap them directly */
		SWAP(&tmp, outbuf);
		SWAP(outbuf, inbuf);
		SWAP(inbuf, &tmp);

		/* 
		 * Optimization comes with a price; we need to notify the
		 * buffer if necessary of the changes. oldoff is the amount
		 * of data that we tranfered from inbuf to outbuf
		 */
		if (inbuf->off != oldoff && inbuf->cb != NULL)
			(*inbuf->cb)(inbuf, oldoff, inbuf->off, inbuf->cbarg);
		if (oldoff && outbuf->cb != NULL)
			(*outbuf->cb)(outbuf, 0, oldoff, outbuf->cbarg);
		
		return (0);
	}

a92 3
#ifndef HAVE_VASPRINTF
	static char buffer[4096];
#endif
a96 1
#ifdef HAVE_VASPRINTF
a98 9
#else
#  ifdef WIN32
	_vsnprintf(buffer, sizeof(buffer) - 1, fmt, ap);
	buffer[sizeof(buffer)-1] = '\0';
#  else /* ! WIN32 */
	vsnprintf(buffer, sizeof(buffer), fmt, ap);
#  endif
	msg = buffer;
#endif
a102 1
#ifdef HAVE_VASPRINTF
d105 1
a105 2
end:
#endif
a110 2
/* Reads data from an event buffer and drains the bytes read */

d112 1
a112 1
evbuffer_remove(struct evbuffer *buf, void *data, size_t datlen)
d114 2
a115 3
	int nread = datlen;
	if (nread >= buf->off)
		nread = buf->off;
d117 1
a117 34
	memcpy(data, buf->buffer, nread);
	evbuffer_drain(buf, nread);
	
	return (nread);
}

/* Adds data to an event buffer */

static inline void
evbuffer_align(struct evbuffer *buf)
{
	memmove(buf->orig_buffer, buf->buffer, buf->off);
	buf->buffer = buf->orig_buffer;
	buf->misalign = 0;
}

/* Expands the available space in the event buffer to at least datlen */

int
evbuffer_expand(struct evbuffer *buf, size_t datlen)
{
	size_t need = buf->misalign + buf->off + datlen;

	/* If we can fit all the data, then we don't have to do anything */
	if (buf->totallen >= need)
		return (0);

	/*
	 * If the misalignment fulfills our data needs, we just force an
	 * alignment to happen.  Afterwards, we have enough space.
	 */
	if (buf->misalign >= datlen) {
		evbuffer_align(buf);
	} else {
d119 1
a119 1
		size_t length = buf->totallen;
a125 2
		if (buf->orig_buffer != buf->buffer)
			evbuffer_align(buf);
d129 1
a129 1
		buf->orig_buffer = buf->buffer = newbuf;
a132 14
	return (0);
}

int
evbuffer_add(struct evbuffer *buf, void *data, size_t datlen)
{
	size_t need = buf->misalign + buf->off + datlen;
	size_t oldoff = buf->off;

	if (buf->totallen < need) {
		if (evbuffer_expand(buf, datlen) == -1)
			return (-1);
	}

a148 2
		buf->buffer = buf->orig_buffer;
		buf->misalign = 0;
d152 1
a152 3
	buf->buffer += len;
	buf->misalign += len;

a161 6
/*
 * Reads data from a file descriptor into a buffer.
 */

#define EVBUFFER_MAX_READ	4096

d163 1
a163 1
evbuffer_read(struct evbuffer *buf, int fd, int howmuch)
d165 5
a169 13
	u_char *p;
	size_t oldoff = buf->off;
	int n = EVBUFFER_MAX_READ;
#ifdef WIN32
	DWORD dwBytesRead;
#endif

#ifdef FIONREAD
	if (ioctl(fd, FIONREAD, &n) == -1)
		n = EVBUFFER_MAX_READ;
#endif	
	if (howmuch < 0 || howmuch > n)
		howmuch = n;
d171 1
a171 9
	/* If we don't have FIONREAD, we might waste some space here */
	if (evbuffer_expand(buf, howmuch) == -1)
		return (-1);

	/* We can append new data at this point */
	p = buf->buffer + buf->off;

#ifndef WIN32
	n = read(fd, p, howmuch);
a175 8
#else
	n = ReadFile((HANDLE)fd, p, howmuch, &dwBytesRead, NULL);
	if (n == 0)
		return (-1);
	if (dwBytesRead == 0)
		return (0);
	n = dwBytesRead;
#endif
d177 1
a177 5
	buf->off += n;

	/* Tell someone about changes in this buffer */
	if (buf->off != oldoff && buf->cb != NULL)
		(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);
a185 3
#ifdef WIN32
	DWORD dwBytesWritten;
#endif
a186 1
#ifndef WIN32
d192 1
a192 8
#else
	n = WriteFile((HANDLE)fd, buffer->buffer, buffer->off, &dwBytesWritten, NULL);
	if (n == 0)
		return (-1);
	if (dwBytesWritten == 0)
		return (0);
	n = dwBytesWritten;
#endif
@


1.1
log
@update to libevent 0.8; keep local changes

ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a29 2
#include <sys/types.h>

d34 7
d45 4
a48 1
#include <err.h>
d75 2
a76 2
	if (buffer->buffer != NULL)
		free(buffer->buffer);
d85 8
d97 24
d133 3
d140 1
d143 9
d156 1
d159 2
a160 1
 end:
d166 2
d169 1
a169 1
evbuffer_add(struct evbuffer *buf, u_char *data, size_t datlen)
d171 30
a200 2
	size_t need = buf->off + datlen;
	size_t oldoff = buf->off;
d202 7
a208 1
	if (buf->totallen < need) {
d210 1
a210 1
		int length = buf->totallen;
d217 2
d222 1
a222 1
		buf->buffer = newbuf;
d226 14
d256 2
d261 3
a263 1
	memmove(buf->buffer, buf->buffer + len, buf->off - len);
d273 6
d280 1
a280 1
evbuffer_read(struct evbuffer *buffer, int fd, int howmuch)
d282 20
a301 5
	u_char inbuf[4096];
	int n;
	
	if (howmuch < 0 || howmuch > sizeof(inbuf))
		howmuch = sizeof(inbuf);
d303 2
a304 1
	n = read(fd, inbuf, howmuch);
d309 8
d318 5
a322 1
	evbuffer_add(buffer, inbuf, n);
d331 3
d335 1
d341 8
a348 1

@

