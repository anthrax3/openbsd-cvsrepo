head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.12
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.24.17.17.12;	author tedu;	state dead;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.30;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.18.27.49;	author dhill;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.27.22.58.35;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.27.02.19.44;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.07.03.32.04;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.07.18.49.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.14.00.56.15;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	97.06.01.05.22.08;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.02.26.03.06.58;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.10
log
@The secret of steel has always carried with it a mystery. You must learn
its riddle, Conan. You must learn its discipline. For no one, no one in
this world can you trust. Not men, not women, not beasts.
@
text
@/*	$NetBSD: socket.c,v 1.17 2003/05/26 10:05:07 itojun Exp $	*/

 /*
  * This module determines the type of socket (datagram, stream), the client
  * socket address and port, the server socket address and port. In addition,
  * it provides methods to map a transport address to a printable host name
  * or address. Socket address information results are in static memory.
  * 
  * The result from the hostname lookup method is STRING_PARANOID when a host
  * pretends to have someone elses name, or when a host name is available but
  * could not be verified.
  * 
  * When lookup or conversion fails the result is set to STRING_UNKNOWN.
  * 
  * Diagnostics are reported through syslog(3).
  * 
  * Author: Wietse Venema, Eindhoven University of Technology, The Netherlands.
  */

/* System libraries. */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <syslog.h>
#include <string.h>

/* Local stuff. */

#include "tcpd.h"

/* Forward declarations. */

#ifdef APPEND_DOT
static const char *append_dot(const char *);
#endif
static void sock_sink(int);

#ifdef APPEND_DOT
 /*
  * Speed up DNS lookups by terminating the host name with a dot. Should be
  * done with care. The speedup can give problems with lookups from sources
  * that lack DNS-style trailing dot magic, such as local files or NIS maps.
  */

static const char *
append_dot(name)
const char *name;
{
    static char hbuf[MAXHOSTNAMELEN + 1];

    /*
     * Don't append dots to unqualified names. Such names are likely to come
     * from local hosts files or from NIS.
     */

    if (strchr(name, '.') == 0 || strlen(name) + 2 > sizeof(hbuf))
	strlcpy(hbuf, name, sizeof(hbuf));
    else
	snprintf(hbuf, sizeof(hbuf), "%s.", name);
    return hbuf;
}
#endif

/* sock_host - look up endpoint addresses and install conversion methods */

void    sock_host(request)
struct request_info *request;
{
    static struct sockaddr_storage client;
    static struct sockaddr_storage server;
    socklen_t   len;
    char        buf[BUFSIZ];
    int         fd = request->fd;

    sock_methods(request);

    /*
     * Look up the client host address. Hal R. Brand <BRAND@@addvax.llnl.gov>
     * suggested how to get the client host info in case of UDP connections:
     * peek at the first message without actually looking at its contents. We
     * really should verify that client.sin_family gets the value AF_INET,
     * but this program has already caused too much grief on systems with
     * broken library code.
     *
     * XXX the last sentence is untrue as we support AF_INET6 as well :-)
     */

    len = sizeof(client);
    if (getpeername(fd, (struct sockaddr *) & client, &len) < 0) {
	request->sink = sock_sink;
	len = sizeof(client);
	if (recvfrom(fd, buf, sizeof(buf), MSG_PEEK,
		     (struct sockaddr *) & client, &len) < 0) {
	    tcpd_warn("can't get client address: %m");
	    return;				/* give up */
	}
#ifdef really_paranoid
	memset(buf, 0, sizeof(buf));
#endif
    }
    request->client->sin = (struct sockaddr *)&client;

    /*
     * Determine the server binding. This is used for client username
     * lookups, and for access control rules that trigger on the server
     * address or name.
     */

    len = sizeof(server);
    if (getsockname(fd, (struct sockaddr *) & server, &len) < 0) {
	tcpd_warn("getsockname: %m");
	return;
    }
    request->server->sin = (struct sockaddr *)&server;
}

/* sock_hostaddr - map endpoint address to printable form */

void    sock_hostaddr(host)
struct host_info *host;
{
    struct sockaddr *sa = host->sin;

    if (!sa)
	return;
    host->addr[0] = '\0';
    getnameinfo(sa, sa->sa_len, host->addr, sizeof(host->addr),
	NULL, 0, NI_NUMERICHOST);
}

/* sock_hostname - map endpoint address to host name */

void    sock_hostname(host)
struct host_info *host;
{
    struct sockaddr *sa = host->sin;
    char h1[NI_MAXHOST], h2[NI_MAXHOST];
    struct addrinfo hints, *res, *res0;
#ifdef INET6
    struct sockaddr_in tmp;
#endif

    if (!sa)
	return;
#ifdef INET6
    /* special case on reverse lookup: mapped addr.  I hate it */
    if (sa->sa_family == AF_INET6 &&
        IN6_IS_ADDR_V4MAPPED(&((struct sockaddr_in6 *)sa)->sin6_addr)) {
	memset(&tmp, 0, sizeof(tmp));
	tmp.sin_family = AF_INET;
	tmp.sin_len = sizeof(struct sockaddr_in);
	memcpy(&tmp.sin_addr,
	    &((struct sockaddr_in6 *)sa)->sin6_addr.s6_addr[12], 4);
	sa = (struct sockaddr *)&tmp;
    }
#endif
    if (getnameinfo(sa, sa->sa_len, h1, sizeof(h1), NULL, 0,
        NI_NUMERICHOST) != 0) {
	return;
    }
    if (getnameinfo(sa, sa->sa_len, host->name, sizeof(host->name), NULL, 0,
        NI_NAMEREQD) == 0) {
	/*
	 * if reverse lookup result looks like a numeric hostname,
	 * someone is trying to trick us by PTR record like following:
	 *	1.1.1.10.in-addr.arpa.  IN PTR  2.3.4.5
	 */
	memset(&hints, 0, sizeof(hints));
	hints.ai_socktype = SOCK_DGRAM;	/*dummy*/
	hints.ai_flags = AI_NUMERICHOST;
#ifdef APPEND_DOT
	if (getaddrinfo(append_dot(host->name), "0", &hints, &res0) == 0)
#else
	if (getaddrinfo(host->name, "0", &hints, &res0) == 0)
#endif
	{
	    tcpd_warn("Nasty PTR record is configured");
	    freeaddrinfo(res0);
	    /* name is bad, clobber it */
	    (void)strlcpy(host->name, paranoid, sizeof(host->name));
	    return;
	}
	 
	/*
	 * Verify that the address is a member of the address list returned
	 * by getaddrinfo(hostname).
	 * 
	 * Verify also that getnameinfo() and getaddrinfo() return the same
	 * hostname, or rshd and rlogind may still end up being spoofed.
	 * 
	 * On some sites, getaddrinfo("localhost") returns "localhost.domain".
	 * This is a DNS artefact. We treat it as a special case. When we
	 * can't believe the address list from getaddrinfo("localhost")
	 * we're in big trouble anyway.
	 */
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = sa->sa_family;
	hints.ai_socktype = SOCK_DGRAM;	/*dummy*/
	hints.ai_flags = AI_CANONNAME;
#ifdef APPEND_DOT
	if (getaddrinfo(append_dot(host->name), "0", &hints, &res0) != 0)
#else
	if (getaddrinfo(host->name, "0", &hints, &res0) != 0)
#endif
	{
	    /*
	     * Unable to verify that the host name matches the address. This
	     * may be a transient problem or a botched name server setup.
	     */

	    tcpd_warn("can't verify hostname: getaddrinfo(%s, %d) failed",
	        host->name, hints.ai_family);
	} else if (res0->ai_canonname &&
	    STR_NE(host->name, res0->ai_canonname) &&
	    STR_NE(host->name, "localhost")) {
	    /*
	     * The getnameinfo() and getaddrinfo() calls did not return
	     * the same hostname. This could be a nameserver configuration
	     * problem. It could also be that someone is trying to spoof us.
	     */

	    tcpd_warn("host name/name mismatch: %s != %s",
		host->name, res0->ai_canonname);
	    freeaddrinfo(res0);
	} else {
	    /*
	     * The address should be a member of the address list returned by
	     * getaddrinfo().
	     */

	    for (res = res0; res; res = res->ai_next) {
		if (getnameinfo(res->ai_addr, res->ai_addrlen, h2, sizeof(h2),
		    NULL, 0, NI_NUMERICHOST) != 0) {
		    continue;
		}
		if (STR_EQ(h1, h2)) {
		    freeaddrinfo(res0);
		    return;
		}
	    }

	    /*
	     * The host name does not map to the initial address. Perhaps
	     * someone has messed up. Perhaps someone compromised a name
	     * server.
	     */

	    tcpd_warn("host name/address mismatch: %s != %s", h1,
		res0->ai_canonname ? res0->ai_canonname : "?");

	    freeaddrinfo(res0);
	}
	/* name is bad, clobber it */
	strlcpy(host->name, paranoid, sizeof(host->name));
    }
}

/* sock_sink - absorb unreceived IP datagram */

static void sock_sink(fd)
int     fd;
{
    char    	buf[BUFSIZ];
    struct sockaddr_storage ss;
    socklen_t	size = sizeof(ss);

    /*
     * Eat up the not-yet received datagram. Some systems insist on a
     * non-zero source address argument in the recvfrom() call below.
     */

    (void) recvfrom(fd, buf, sizeof(buf), 0, (struct sockaddr *) & ss, &size);
}
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@@


1.8
log
@delint

ok otto@@
@
text
@a19 8
#ifndef lint
#if 0
static char sccsid[] = "@@(#) socket.c 1.15 97/03/21 19:27:24";
#else
static char rcsid[] = "$OpenBSD: socket.c,v 1.7 2003/12/27 22:58:35 henning Exp $";
#endif
#endif

@


1.7
log
@obvious typi inside an #ifdef
FreeBSD PR 59674 via jmc@@
@
text
@d24 1
a24 1
static char rcsid[] = "$OpenBSD: socket.c,v 1.6 2003/05/27 02:19:44 itojun Exp $";
d84 3
a86 3
    int     len;
    char    buf[BUFSIZ];
    int     fd = request->fd;
d276 1
a276 1
    char    buf[BUFSIZ];
d278 1
a278 1
    int     size = sizeof(ss);
@


1.6
log
@if reverse lookup result looks like a numeric hostname,
someone is trying to trick us by PTR record like following:
	1.1.1.10.in-addr.arpa.  IN PTR  2.3.4.5
so protect against this kind of attacks.  deraadt ok
@
text
@d24 1
a24 1
static char rcsid[] = "$OpenBSD: socket.c,v 1.5 2002/06/07 03:32:04 itojun Exp $";
d111 1
a111 1
	memset(buf, 0 sizeof(buf));
@


1.5
log
@support scoped IPv6 address.
no visible API change, old config files work just fine.
now  you can use expressions like "ALL: [fe80::%lo0/64]".  theo ok
@
text
@d1 1
a1 1
/*	$OpenBSD: socket.c,v 1.4 2001/11/07 18:49:21 deraadt Exp $	*/
d24 1
a24 1
static char rcsid[] = "$OpenBSD: socket.c,v 1.4 2001/11/07 18:49:21 deraadt Exp $";
d176 21
@


1.4
log
@avoid strcpy and sprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: socket.c,v 1.3 2000/10/14 00:56:15 itojun Exp $	*/
d24 1
a24 1
static char rcsid[] = "$OpenBSD: socket.c,v 1.3 2000/10/14 00:56:15 itojun Exp $";
d46 4
a49 1
static void sock_sink();
a51 1

d58 3
a60 2
static struct hostent *gethostbyname_dot(name)
char   *name;
d62 1
a62 1
    char    dot_name[MAXHOSTNAMELEN + 1];
d69 5
a73 6
    if (strchr(name, '.') == 0 || strlen(name) >= MAXHOSTNAMELEN - 1) {
	return (gethostbyname(name));
    } else {
	snprintf(dot_name, sizeof(dot_name), "%s.", name);
	return (gethostbyname(dot_name));
    }
a74 2

#define gethostbyname gethostbyname_dot
a135 2
    int alen, af;
    char *ap;
a138 14
    switch (af = sa->sa_family) {
    case AF_INET:
	ap = (char *)&((struct sockaddr_in *)sa)->sin_addr;
	alen = sizeof(struct in_addr);
	break;
#ifdef INET6
    case AF_INET6:
	ap = (char *)&((struct sockaddr_in6 *)sa)->sin6_addr;
	alen = sizeof(struct in6_addr);
	break;
#endif
    default:
	return;
    }
d140 2
a141 1
    inet_ntop(af, ap, host->addr, sizeof(host->addr));
d149 6
a154 6
    struct sockaddr *sin = host->sin;
    struct hostent *hp;
    int     i;
    int af, alen;
    char *ap;
    char hbuf[MAXHOSTNAMELEN];
d156 1
a156 8
    /*
     * On some systems, for example Solaris 2.3, gethostbyaddr(0.0.0.0) does
     * not fail. Instead it returns "INADDR_ANY". Unfortunately, this does
     * not work the other way around: gethostbyname("INADDR_ANY") fails. We
     * have to special-case 0.0.0.0, in order to avoid false alerts from the
     * host name/address checking code below.
     */
    if (!sin)
a157 7
    switch (af = sin->sa_family) {
    case AF_INET:
	if (((struct sockaddr_in *)sin)->sin_addr.s_addr == 0)
	    return;
	ap = (char *)&((struct sockaddr_in *)sin)->sin_addr;
	alen = sizeof(struct in_addr);
	break;
d159 10
a168 10
    case AF_INET6:
	ap = (char *)&((struct sockaddr_in6 *)sin)->sin6_addr;
	alen = sizeof(struct in6_addr);
	/* special case on reverse lookup: mapped addr.  I hate it */
	if (IN6_IS_ADDR_V4MAPPED((struct in6_addr *)ap)) {
	    af = AF_INET;
	    ap += (sizeof(struct in6_addr) - sizeof(struct in_addr));
	    alen = sizeof(struct in_addr);
	}
	break;
d170 2
a171 1
    default:
d174 2
a175 4
    if ((hp = gethostbyaddr(ap, alen, af)) != 0) {

	strlcpy(host->name, hp->h_name, sizeof(host->name));

d178 1
a178 1
	 * by gethostbyname(hostname).
d180 1
a180 1
	 * Verify also that gethostbyaddr() and gethostbyname() return the same
d183 1
a183 1
	 * On some sites, gethostbyname("localhost") returns "localhost.domain".
d185 1
a185 1
	 * can't believe the address list from gethostbyname("localhost")
d188 10
a197 3

	if ((hp = gethostbyname2(host->name, af)) == 0) {

d203 5
a207 6
	    tcpd_warn("can't verify hostname: gethostbyname2(%s, %d) failed",
		      host->name, af);

	} else if (STR_NE(host->name, hp->h_name)
		   && STR_NE(host->name, "localhost")) {

d209 1
a209 1
	     * The gethostbyaddr() and gethostbyname() calls did not return
d214 3
a216 3
	    tcpd_warn("host name/name mismatch: %s != %.*s",
		      host->name, STRING_LENGTH, hp->h_name);

a217 1

d220 1
a220 3
	     * gethostbyname(). We should first verify that the h_addrtype
	     * field is AF_INET, but this program has already caused too much
	     * grief on systems with broken library code.
d223 9
a231 3
	    for (i = 0; hp->h_addr_list[i]; i++) {
		if (memcmp(hp->h_addr_list[i], (char *) ap, alen) == 0)
		    return;			/* name is good, keep it */
d240 4
a243 3
	    tcpd_warn("host name/address mismatch: %s != %.*s",
		      inet_ntop(af, ap, hbuf, sizeof(hbuf)),
		      STRING_LENGTH, hp->h_name);
a244 1

d256 2
a257 2
    struct sockaddr_storage sin;
    int     size = sizeof(sin);
d264 1
a264 1
    (void) recvfrom(fd, buf, sizeof(buf), 0, (struct sockaddr *) & sin, &size);
@


1.3
log
@tcp wrapper support for IPv6.  from netbsd.
TODO: scoped address support may need more consideration (we are taking
safer side now - rejects too much).
@
text
@d1 1
a1 1
/*	$OpenBSD: socket.c,v 1.2 1997/06/01 05:22:08 downsj Exp $	*/
d24 1
a24 1
static char rcsid[] = "$OpenBSD: socket.c,v 1.2 1997/06/01 05:22:08 downsj Exp $";
d69 1
a69 1
	sprintf(dot_name, "%s.", name);
d204 1
a204 1
	STRN_CPY(host->name, hp->h_name, sizeof(host->name));
d265 3
a267 1
	strcpy(host->name, paranoid);		/* name is bad, clobber it */
@


1.2
log
@A few minor changes from tcp_wrappers 7.6
@
text
@d1 1
a1 1
/*	$OpenBSD: socket.c,v 1.1 1997/02/26 03:06:58 downsj Exp $	*/
d24 1
a24 1
static char rcsid[] = "$OpenBSD: socket.c,v 1.1 1997/02/26 03:06:58 downsj Exp $";
d82 2
a83 2
    static struct sockaddr_in client;
    static struct sockaddr_in server;
d97 2
d114 1
a114 1
    request->client->sin = &client;
d127 1
a127 1
    request->server->sin = &server;
d135 3
a137 1
    struct sockaddr_in *sin = host->sin;
d139 18
a156 2
    if (sin != 0)
	STRN_CPY(host->addr, inet_ntoa(sin->sin_addr), sizeof(host->addr));
d164 1
a164 1
    struct sockaddr_in *sin = host->sin;
d167 3
d178 25
a202 3
    if (sin != 0 && sin->sin_addr.s_addr != 0
	&& (hp = gethostbyaddr((char *) &(sin->sin_addr),
			       sizeof(sin->sin_addr), AF_INET)) != 0) {
d219 1
a219 1
	if ((hp = gethostbyname(host->name)) == 0) {
d226 2
a227 2
	    tcpd_warn("can't verify hostname: gethostbyname(%s) failed",
		      host->name);
d251 1
a251 3
		if (memcmp(hp->h_addr_list[i],
			   (char *) &sin->sin_addr,
			   sizeof(sin->sin_addr)) == 0)
d262 2
a263 1
		      inet_ntoa(sin->sin_addr), STRING_LENGTH, hp->h_name);
d275 1
a275 1
    struct sockaddr_in sin;
@


1.1
log
@Initial integration of a much cleaned up libwrap.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d22 1
a22 1
static char sccsid[] = "@@(#) socket.c 1.14 95/01/30 19:51:50";
d24 1
a24 1
static char rcsid[] = "$OpenBSD$";
d193 2
a194 2
	    tcpd_warn("host name/name mismatch: %s != %s",
		      host->name, hp->h_name);
d218 2
a219 2
	    tcpd_warn("host name/address mismatch: %s != %s",
		      inet_ntoa(sin->sin_addr), hp->h_name);
@
