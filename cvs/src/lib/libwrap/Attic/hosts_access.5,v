head	1.26;
access;
symbols
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.24.0.24
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.22
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.20
	OPENBSD_5_0:1.24.0.18
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.16
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.14
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.10
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.12
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.8
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.6
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.4
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.23.0.14
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.12
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.10
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.8
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.23.0.6
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.23.0.4
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.11.0.4
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@# @;


1.26
date	2014.03.24.17.17.12;	author tedu;	state dead;
branches;
next	1.25;

1.25
date	2013.07.16.07.15.39;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.31.19.19.39;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2004.02.19.22.25.38;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.19.22.20.05;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.08.09.26.03;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.07.08.13.52.52;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.08.13.11.26;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.03.21.09.00;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.11.47.11;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.18.23.40.57;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.01.16.23.54;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.06.15.04.34;	author mpech;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.14.21.59.55;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.14.21.56.48;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.14.00.56.15;	author itojun;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.14.21.31.41;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.07.09.13.35.28;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	97.07.27.18.43.30;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	97.07.27.18.22.47;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.06.24.01.26.23;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	97.06.23.11.12.40;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.04.09.02.28.33;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.02.26.03.06.52;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.26
log
@The secret of steel has always carried with it a mystery. You must learn
its riddle, Conan. You must learn its discipline. For no one, no one in
this world can you trust. Not men, not women, not beasts.
@
text
@.\"	$OpenBSD: hosts_access.5,v 1.25 2013/07/16 07:15:39 jmc Exp $
.\"
.\" Copyright (c) 1997, Jason Downs.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS
.\" OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\" CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: July 16 2013 $
.Dt HOSTS_ACCESS 5
.Os
.Sh NAME
.Nm hosts_access ,
.Nm hosts.deny ,
.Nm hosts.allow
.Nd tcp wrapper format of host access control files
.Sh DESCRIPTION
This manual page describes a simple access control language that is
based on client (host name/address, user name), and server (process
name, host name/address) patterns.
Examples are given at the end.
The impatient reader is encouraged to skip to the EXAMPLES section for a
quick introduction.
.Pp
An extended version of the access control language is described in the
.Xr hosts_options 5
document.
.\" The extensions are turned on at
.\" program build time by building with -DPROCESS_OPTIONS.
.Pp
In the following text,
.Ar daemon
is the process name of a network daemon process, and
.Ar client
is the name and/or address of a host requesting service.
Network daemon process names are specified in the inetd configuration file.
.Sh ACCESS CONTROL FILES
The access control software consults two files.
The search stops at the first match:
.Bl -bullet -width XXX
.It
Access will be granted when a (daemon,client) pair matches an entry in
the
.Pa /etc/hosts.allow
file.
.It
Otherwise, access will be denied when a (daemon,client) pair matches an
entry in the
.Pa /etc/hosts.deny
file.
.It
Otherwise, access will be granted.
.El
.Pp
A non-existent access control file is treated as if it were an empty
file.
Thus, access control can be turned off by providing no access control files.
.Sh ACCESS CONTROL RULES
Each access control file consists of zero or more lines of text.
These lines are processed in order of appearance.
The search terminates when a match is found.
.Bl -bullet -width XXX
.It
A newline character is ignored when it is preceded by a backslash
character.
This permits you to break up long lines so that they are easier to edit.
.It
Blank lines or lines that begin with a
.Sq #
character are ignored.
This permits you to insert comments and whitespace so that the tables
are easier to read.
.It
All other lines should satisfy the following format, things between []
being optional:
.Pp
.Dl daemon_list\ \&: client_list [\ \&: shell_command\ \&]
.El
.Pp
.Ar daemon_list
is a list of one or more daemon process names
.Pf ( Va argv[0]
values) or wildcards (see below).
.Pp
.Ar client_list
is a list of one or more host names, host addresses, patterns or wildcards (see
below) that will be matched against the client host name or address.
When a client_list item needs to include colon characters (for IPv6 addresses),
the item needs to be wrapped with square brackets.
.Pp
The more complex forms
.Ar daemon@@host
and
.Ar user@@host
are
explained in the sections on server endpoint patterns and on client
username lookups, respectively.
.Pp
List elements should be separated by blanks and/or commas.
.Pp
With the exception of YP netgroup lookups, all access control
checks are case insensitive.
.Sh PATTERNS
The access control language implements the following patterns:
.Bl -bullet -width XXX
.It
A string that begins with a
.Sq \&.
character.
A host name is matched if
the last components of its name match the specified pattern.
For example, the pattern
.Sq .tue.nl
matches the host name
.Sq wzv.win.tue.nl .
.It
A string that ends with a
.Sq \&.
character.
A host address is matched if its first numeric fields match the given string.
For example, the pattern
.Sq 131.155.
matches the address of (almost) every host on the Eind\%hoven University
network (131.155.x.x).
.It
A string that begins with an
.Sq @@
character is treated as a YP netgroup name.
A host name is matched if it is a host member of the specified netgroup.
Netgroup matches are not supported for daemon process names or for client
user names.
.It
An expression of the form
.Sq n.n.n.n/m.m.m.m
is interpreted as a
.Sq net/mask
pair.
A host address is matched if
.Sq net
is equal to the bitwise AND of the address and the
.Sq mask .
For example, the net/mask
pattern
.Sq 131.155.72.0/255.255.254.0
matches every address in the range
.Sq 131.155.72.0
through
.Sq 131.155.73.255 .
Note that the
.Sq m.m.m.m
portion must always be specified.
.It
An expression of the form
.Sq ipv6-addr/ipv6-mask
is interpreted as a masked IPv6 address match,
just like a masked IPv4 address match (see above).
Note that the
.Sq ipv6-mask
portion must always be specified.
.It
An expression of the form
.Sq ipv6-addr/prefixlen
is interpreted as a masked IPv6 address match
(with mask specified by numeric prefixlen),
just like a masked IPv4 address match (see above).
Note that the
.Sq prefixlen
portion must always be specified.
.El
.Sh WILDCARDS
The access control language supports explicit wildcards:
.Bl -tag -width XXXXXXX
.It ALL
The universal wildcard, always matches.
.It LOCAL
Matches any host whose name does not contain a dot character.
.It UNKNOWN
Matches any user whose name is unknown, and matches any host whose name
or address are unknown.
This pattern should be used with care:
host names may be unavailable due to temporary name server problems.
A network address will be unavailable when the software cannot figure out
what type of network it is talking to.
.It KNOWN
Matches any user whose name is known, and matches any host whose name
and address are known.
This pattern should be used with care:
host names may be unavailable due to temporary name server problems.
A network address will be unavailable when the software cannot figure out
what type of network it is talking to.
.\" .IP PARANOID
.\" Matches any host whose name does not match its address.
.\" When tcpd is built with -DPARANOID (default mode), it drops requests
.\" from such clients even before looking at the access control tables.
.\" Build without -DPARANOID when you want more control over such requests.
.El
.Sh OPERATORS
.Ss EXCEPT
Intended use is of the form:
.Sq list_1 EXCEPT list_2 ;
this construct matches anything that matches
.Ar list_1
unless it matches
.Ar list_2 .
The EXCEPT operator can be used in daemon_lists and in
client_lists.
The EXCEPT operator can be nested: if the control
language would permit the use of parentheses,
.Sq a EXCEPT b EXCEPT c
would parse as
.Sq (a EXCEPT (b EXCEPT c)) .
.Sh SHELL COMMANDS
If the first-matched access control rule contains a shell command, that
command is subjected to %<letter> substitutions (see next section).
The result is executed by a
.Pa /bin/sh
child process with standard
input, output and error connected to
.Pa /dev/null .
Specify an
.Sq &
at the end of the command if you do not want to wait until it has completed.
.Pp
Shell commands should not rely on the PATH setting of the inetd.
Instead, they should use absolute path names, or they should begin with
an explicit PATH=whatever statement.
.Pp
The
.Xr hosts_options 5
document describes an alternative language
that uses the shell command field in a different and incompatible way.
.Sh % EXPANSIONS
The following expansions are available within shell commands:
.Bl -tag -width XXXXXXX
.It "%a (%A)"
The client (server) host address.
.It %c
Client information: user@@host, user@@address, a host name, or just an
address, depending on how much information is available.
.It %d
The daemon process name
.Pf ( Va argv[0]
value).
.It "%h (%H)"
The client (server) host name or address, if the host name is
unavailable.
.It "%n (%N)"
The client (server) host name (or "unknown" or "paranoid").
.It %p
The daemon process ID.
.It %s
Server information: daemon@@host, daemon@@address, or just a daemon name,
depending on how much information is available.
.It %u
The client user name (or "unknown").
.It %%
Expands to a single
.Sq %
character.
.El
.Pp
Characters in % expansions that may confuse the shell are replaced by
underscores.
.Sh SERVER ENDPOINT PATTERNS
In order to distinguish clients by the network address that they
connect to, use patterns of the form:
.Pp
.Dl process_name@@host_pattern\ \&: client_list ...
.Pp
Patterns like these can be used when the machine has different internet
addresses with different internet hostnames.
Service providers can use
this facility to offer FTP, GOPHER or WWW archives with internet names
that may even belong to different organizations.
See also the
.Sq twist
option in the
.Xr hosts_options 5
document.
Many systems can have more than one internet address on one physical
interface; with other systems you may have to resort to SLIP or PPP
pseudo interfaces that live in a dedicated network address space.
.Pp
The host_pattern obeys the same syntax rules as host names and
addresses in client_list context.
Usually, server endpoint information
is available only with connection-oriented services.
.Sh CLIENT USERNAME LOOKUP
When the client host supports the RFC 931 protocol or one of its
descendants (TAP, IDENT, RFC 1413) the wrapper programs can retrieve
additional information about the owner of a connection.
Client username information, when available, is logged together with the
client host name, and can be used to match patterns like:
.Pp
.Dl daemon_list\ \&: ... user_pattern@@host_pattern ...
.Pp
The daemon wrappers can be configured at compile time to perform
rule-driven username lookups (default) or to always interrogate the
client host.
In the case of rule-driven username lookups, the above
rule would cause username lookup only when both the
.Ar daemon_list
and the
.Ar host_pattern
match.
.Pp
A user pattern has the same syntax as a daemon process pattern, so the
same wildcards apply (netgroup membership is not supported).
One should not get carried away with username lookups, though.
.Bl -bullet -width XXX
.It
The client username information cannot be trusted when it is needed
most, i.e., when the client system has been compromised.
In general, ALL and (UN)KNOWN are the only user name patterns that make sense.
.It
Username lookups are possible only with TCP-based services, and only
when the client host runs a suitable daemon; in all other cases the
result is "unknown".
.\" .It
.\" A well-known UNIX kernel bug may cause loss of service when username
.\" lookups are blocked by a firewall. The wrapper README document
.\" describes a procedure to find out if your kernel has this bug.
.It
Username lookups may cause noticeable delays for non-UNIX users.
The default timeout for username lookups is 10 seconds: too short to cope
with slow networks, but long enough to irritate PC users.
.El
.Pp
Selective username lookups can alleviate the last problem.
For example, a rule like:
.Pp
.Dl daemon_list\ \&: @@pcnetgroup ALL@@ALL
.Pp
would match members of the pc netgroup without doing username lookups,
but would perform username lookups with all other systems.
.Sh DETECTING ADDRESS SPOOFING ATTACKS
A flaw in the sequence number generator of many TCP/IP implementations
allows intruders to easily impersonate trusted hosts and to break in
via, for example, the remote shell service.
The IDENT (RFC 931 etc.\&)
service can be used to detect such and other host address spoofing attacks.
.Pp
Before accepting a client request, the wrappers can use the IDENT
service to find out that the client did not send the request at all.
When the client host provides IDENT service, a negative IDENT lookup
result (the client matches
.Sq UNKNOWN@@host )
is strong evidence of a host spoofing attack.
.Pp
A positive IDENT lookup result (the client matches
.Sq KNOWN@@host )
is less trustworthy.
It is possible for an intruder to spoof both the
client connection and the IDENT lookup, although doing so is much
harder than spoofing just a client connection.
It may also be that the client\'s IDENT server is lying.
.Pp
Note: IDENT lookups don't work with UDP services.
.Sh EXAMPLES
The language is flexible enough that different types of access control
policy can be expressed with a minimum of fuss.
Although the language
uses two access control tables, the most common policies can be
implemented with one of the tables being trivial or even empty.
.Pp
When reading the examples below it is important to realize that the
allow table is scanned before the deny table, that the search
terminates when a match is found, and that access is granted when no
match is found at all.
.Pp
The examples use host and domain names.
They can be improved by
including address and/or network/netmask information, to reduce the
impact of temporary name server lookup failures.
.Sh MOSTLY CLOSED
In this case, access is denied by default.
Only explicitly authorized hosts are permitted access.
.Pp
The default policy (no access) is implemented with a trivial deny
file:
.Pp
.Pa /etc/hosts.deny :
.Pp
.Dl ALL: ALL
.Pp
This denies all services to all hosts, unless they are permitted access
by entries in the allow file.
.Pp
The explicitly authorized hosts are listed in the allow file.
For example:
.Pp
.Pa /etc/hosts.allow :
.Bd -literal -offset indent
ALL: LOCAL @@some_netgroup
ALL: .foobar.edu EXCEPT terminalserver.foobar.edu
.Ed
.Pp
The first rule permits access from hosts in the local domain (no
.Sq \&.
in the host name) and from members of the
.Ar some_netgroup
netgroup.
The second rule permits access from all hosts in the
.Ar foobar.edu
domain (notice the leading dot), with the exception of
.Ar terminalserver.foobar.edu .
.Sh MOSTLY OPEN
Here, access is granted by default; only explicitly specified hosts are
refused service.
.Pp
The default policy (access granted) makes the allow file redundant so
that it can be omitted.
The explicitly non-authorized hosts are listed in the deny file.
For example:
.Pp
.Pa /etc/hosts.deny :
.Bd -unfilled -offset indent
ALL: some.host.name, .some.domain
ALL EXCEPT in.fingerd: other.host.name, .other.domain
.Ed
.Pp
The first rule denies some hosts and domains all services; the second
rule still permits finger requests from other hosts and domains.
.Sh BOOBY TRAPS
The next example permits tftp requests from hosts in the local domain
(notice the leading dot).
Requests from any other hosts are denied.
Instead of the requested file, a finger probe is sent to the offending host.
The result is mailed to the superuser.
.Pp
.Pa /etc/hosts.allow :
.Pp
.Dl tftpd: LOCAL, .my.domain
.Pp
.Pa /etc/hosts.deny :
.Bd -unfilled -offset indent
tftpd: ALL: (/some/where/safe_finger -l @@%h | \e
	/usr/bin/mail -s %d-%h root) &
.Ed
.Pp
The
.Nm safe_finger
command comes with the tcpd wrapper and should be
installed in a suitable place.
It limits possible damage from data sent by the remote finger server.
It gives better protection than the standard finger command.
.Pp
The expansion of the %h (client host) and %d (service name) sequences
is described in the section on shell commands.
.Pp
Warning: do not booby-trap your finger daemon, unless you are prepared
for infinite finger loops.
.Pp
On network firewall systems this trick can be carried even further.
The typical network firewall only provides a limited set of services to
the outer world.
All other services can be "bugged" just like the above tftp example.
The result is an excellent early-warning system.
.Sh FILES
.Bl -tag -width /etc/hosts.allow -compact
.It Pa /etc/hosts.allow
Access control table (allow list)
.It Pa /etc/hosts.deny
Access control table (deny list)
.El
.Sh DIAGNOSTICS
An error is reported when a syntax error is found in a host access
control rule; when the length of an access control rule exceeds the
capacity of an internal buffer; when an access control rule is not
terminated by a newline character; when the result of %<letter>
expansion would overflow an internal buffer; when a system call fails
that shouldn\'t.
All problems are reported via the syslog daemon.
.Sh SEE ALSO
.Xr tcpd 8 ,
.Xr tcpdchk 8 ,
.Xr tcpdmatch 8
.Sh AUTHORS
.Bd -unfilled -offset indent
Wietse Venema (wietse@@wzv.win.tue.nl)
Department of Mathematics and Computing Science
Eindhoven University of Technology
Den Dolech 2, P.O. Box 513,
5600 MB Eindhoven, The Netherlands
.Ed
.Sh BUGS
If a name server lookup times out, the host name will not be available
to the access control software, even though the host is registered.
.Pp
Domain name server lookups are case insensitive; YP
netgroup lookups are case sensitive.
.Pp
The total length of an entry can be no more than 2047 characters long,
including the final newline.
.\" @@(#) hosts_access.5 1.20 95/01/30 19:51:46
@


1.25
log
@non[ -]existing -> non-existent;
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.24 2007/05/31 19:19:39 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate: May 31 2007 $
@


1.24
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.23 2004/02/19 22:25:38 jmc Exp $
d26 1
a26 1
.Dd $Mdocdate$
d72 1
a72 1
A non-existing access control file is treated as if it were an empty
@


1.23
log
@new sentence, new line;
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.22 2004/02/19 22:20:05 jmc Exp $
d26 1
a26 1
.Dd June 23, 1997
@


1.22
log
@escape full stops where necessary to kill erroneous double spaces;
softly, softly, catchy monkey...
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.21 2003/08/08 09:26:03 jmc Exp $
d126 2
a127 1
character. A host name is matched if
d154 2
a155 1
pair. A host address is matched if
d346 2
a347 2
Selective username lookups can alleviate the last problem. For example,
a rule like:
d473 3
a475 2
the outer world. All other services can be "bugged" just like the above
tftp example. The result is an excellent early-warning system.
@


1.21
log
@refer to RFCs consistently (RFC XXXX);
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.20 2003/07/08 13:52:52 jmc Exp $
d355 1
a355 1
The IDENT (RFC 931 etc.)
@


1.20
log
@some \" -> .\" that i missed earlier;
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.19 2003/07/08 13:11:26 jmc Exp $
d355 1
a355 1
The IDENT (RFC931 etc.)
@


1.19
log
@- fix some lists and displays
- simplify macros
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.18 2003/06/03 21:09:00 deraadt Exp $
d509 1
a509 1
\" @@(#) hosts_access.5 1.20 95/01/30 19:51:46
@


1.18
log
@terms 3 & 4 cleanup based on "terms" file
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.17 2003/06/02 11:47:11 jmc Exp $
d57 1
a57 1
.Bl -bullet -tag -width XXX
d79 1
a79 1
.Bl -bullet -tag -width XXX
d93 2
a94 3
.Bd -unfilled -offset indent
daemon_list : client_list [ : shell_command ]
.Ed
d122 1
a122 1
.Bl -bullet -tag -width XXX
d125 1
a125 3
.So
.Ns .
.Sc
d134 1
a134 3
.So
.Ns .
.Sc
d138 1
a138 3
.So
131.155.
.Sc
d213 1
a213 1
.IP EXCEPT
d265 1
a265 1
The daemon process id.
d282 2
a283 3
.Bd -unfilled -offset indent
process_name@@host_pattern : client_list ...
.Ed
d310 1
a310 3
.Bd -unfilled -offset indent
daemon_list : ... user_pattern@@host_pattern ...
.Ed
d325 1
a325 1
.Bl -bullet -tag -width XXX
d347 1
a347 3
.Bd -unfilled -offset indent
daemon_list : @@pcnetgroup ALL@@ALL
.Ed
d373 1
a373 1
Note: IDENT lookups don\'t work with UDP services.
d397 3
a399 6
.Bd -unfilled -offset indent
/etc/hosts.deny:
.Bd -unfilled -offset indent 2
ALL: ALL
.Ed
.Ed
d407 2
a408 3
.Bd -unfilled -offset indent
/etc/hosts.allow:
.Bd -unfilled -offset indent 2
a411 1
.Ed
d414 1
a414 3
.So
.Ns .
.Sc
d431 1
a432 2
/etc/hosts.deny:
.Bd -unfilled -offset indent 2
a435 1
.Ed
d446 3
a448 6
.Bd -unfilled -offset indent
/etc/hosts.allow:
.Bd -unfilled -offset indent 2
tftpd: LOCAL, .my.domain
.Ed
.Ed
d450 1
d452 1
a452 3
/etc/hosts.deny:
.Bd -unfilled -offset indent 2
tftpd: ALL: (/some/where/safe_finger -l @@%h | \\
a453 1
.Ed
@


1.17
log
@- section reorder
- new sentence, new line
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.16 2003/01/18 23:40:57 deraadt Exp $
a12 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Jason Downs for the
.\"      OpenBSD system.
.\" 4. Neither the name(s) of the author(s) nor the name OpenBSD
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
@


1.16
log
@more typos; jmc@@prioris.mini.pw.edu.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.15 2002/05/01 16:23:54 millert Exp $
d59 2
a60 2
is the name and/or address of a host requesting service.  Network daemon
process names are specified in the inetd configuration file.
d221 4
a224 4
.\" Matches any host whose name does not match its address.  When tcpd is
.\" built with -DPARANOID (default mode), it drops requests from such
.\" clients even before looking at the access control tables.  Build
.\" without -DPARANOID when you want more control over such requests.
d506 7
a520 7
.Sh FILES
.Bl -tag -width /etc/hosts.allow -compact
.It Pa /etc/hosts.allow
Access control table (allow list)
.It Pa /etc/hosts.deny
Access control table (deny list)
.El
d525 8
a541 8
.Sh AUTHORS
.Bd -unfilled -offset indent
Wietse Venema (wietse@@wzv.win.tue.nl)
Department of Mathematics and Computing Science
Eindhoven University of Technology
Den Dolech 2, P.O. Box 513,
5600 MB Eindhoven, The Netherlands
.Ed
@


1.15
log
@YP, not NIS
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.14 2002/05/01 08:03:30 mpech Exp $
d113 2
a114 2
When a client_list item needs to include colon character (for IPv6 addresses),
the item needs to be wrapped with square bracket.
d178 1
a178 1
Note that
d184 3
a186 3
is interpreted as masked IPv6 address match,
just like masked IPv4 address match (see above).
Note that
d192 1
a192 1
is interpreted as masked IPv6 address match
d194 2
a195 2
just like masked IPv4 address match (see above).
Note that
d423 1
a423 1
This denies all service to all hosts, unless they are permitted access
@


1.14
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.13 2001/09/06 15:04:34 mpech Exp $
d126 1
a126 1
With the exception of NIS (YP) netgroup lookups, all access control
d158 1
a158 2
character is treated as an NIS
(formerly YP) netgroup name.
d529 1
a529 1
Domain name server lookups are case insensitive; NIS (formerly YP)
@


1.13
log
@Initial idea from aaron@@: Last char of .Xr group in SEE ALSO section should
be a single digit. Powered by mantoya@@.

millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.12 2001/08/06 10:42:26 mpech Exp $
d44 3
a46 2
name, host name/address) patterns.  Examples are given at the end.  The
impatient reader is encouraged to skip to the EXAMPLES section for a
d62 2
a63 2
The access control software consults two files. The search stops
at the first match:
d80 2
a81 2
file. Thus, access control can be turned off by providing no access
control files.
d83 3
a85 3
Each access control file consists of zero or more lines of text.  These
lines are processed in order of appearance.  The search terminates when a
match is found.
d89 2
a90 2
character. This permits you to break up long lines so that they are
easier to edit.
d137 2
a138 2
the last components of its name match the specified pattern.  For
example, the pattern
d147 3
a149 2
character. A host address is matched if its first numeric fields match the
given string.  For example, the pattern
d159 4
a162 3
(formerly YP) netgroup name. A host name is matched if it is a host
member of the specified netgroup. Netgroup matches are not supported
for daemon process names or for client user names.
d209 4
a212 3
or address are unknown.  This pattern should be used with care:
host names may be unavailable due to temporary name server problems. A
network address will be unavailable when the software cannot figure out
d216 4
a219 3
and address are known. This pattern should be used with care:
host names may be unavailable due to temporary name server problems.  A
network address will be unavailable when the software cannot figure out
d236 2
a237 1
client_lists. The EXCEPT operator can be nested: if the control
d302 2
a303 1
addresses with different internet hostnames.  Service providers can use
d305 2
a306 1
that may even belong to different organizations. See also the
d310 2
a311 1
document.  Many systems can have more than one internet address on one physical
d316 2
a317 1
addresses in client_list context. Usually, server endpoint information
d322 3
a324 3
additional information about the owner of a connection. Client username
information, when available, is logged together with the client host
name, and can be used to match patterns like:
d332 2
a333 1
client host.  In the case of rule-driven username lookups, the above
d341 2
a342 2
same wildcards apply (netgroup membership is not supported).  One
should not get carried away with username lookups, though.
d346 2
a347 2
most, i.e., when the client system has been compromised.  In general,
ALL and (UN)KNOWN are the only user name patterns that make sense.
d357 2
a358 2
Username lookups may cause noticeable delays for non-UNIX users.  The
default timeout for username lookups is 10 seconds: too short to cope
d374 3
a376 3
via, for example, the remote shell service.  The IDENT (RFC931 etc.)
service can be used to detect such and other host address spoofing
attacks.
d387 2
a388 1
is less trustworthy. It is possible for an intruder to spoof both the
d390 2
a391 2
harder than spoofing just a client connection. It may also be that
the client\'s IDENT server is lying.
d396 2
a397 1
policy can be expressed with a minimum of fuss. Although the language
d406 2
a407 1
The examples use host and domain names. They can be improved by
d411 2
a412 2
In this case, access is denied by default. Only explicitly authorized
hosts are permitted access.
d444 2
a445 1
netgroup.  The second rule permits access from all hosts in the
d454 3
a456 2
that it can be omitted.  The explicitly non-authorized hosts are listed
in the deny file. For example:
d470 4
a473 3
(notice the leading dot).  Requests from any other hosts are denied.
Instead of the requested file, a finger probe is sent to the offending
host. The result is mailed to the superuser.
d493 3
a495 3
installed in a suitable place. It limits possible damage from data sent
by the remote finger server.  It gives better protection than the
standard finger command.
d513 2
a514 1
that shouldn\'t.  All problems are reported via the syslog daemon.
@


1.12
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.11 2000/10/14 21:59:55 deraadt Exp $
d507 1
a507 1
.Xr tcpdmatch 8 .
@


1.11
log
@put hosts.allow and hosts.deny in as Nm entries
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.10 2000/10/14 21:56:48 deraadt Exp $
d221 1
d517 1
a517 1
.Sh AUTHOR
@


1.10
log
@put tcp wrapper into Nd line
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.9 2000/10/14 00:56:15 itojun Exp $
d37 3
a39 1
.Nm hosts_access
@


1.9
log
@tcp wrapper support for IPv6.  from netbsd.
TODO: scoped address support may need more consideration (we are taking
safer side now - rejects too much).
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.8 2000/03/14 21:31:41 aaron Exp $
d38 1
a38 1
.Nd format of host access control files
@


1.8
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.7 1999/07/09 13:35:28 aaron Exp $
d110 2
d174 20
d511 3
@


1.7
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.6 1997/07/27 18:43:30 downsj Exp $
d310 1
a310 1
most, i.e. when the client system has been compromised.  In general,
@


1.6
log
@Use .Sq.
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.5 1997/07/27 18:22:47 downsj Exp $
d52 1
a52 1
In the following text, 
d54 1
a54 1
is the process name of a network daemon process, and 
d64 1
a64 1
the 
d69 1
a69 1
entry in the 
d105 1
a105 1
values) or wildcards (see below).  
d111 1
a111 1
The more complex forms 
d113 1
a113 1
and 
d119 1
a119 1
List elements should be separated by blanks and/or commas.  
d133 1
a133 1
example, the pattern 
d201 1
a201 1
this construct matches anything that matches 
d214 1
a214 1
The result is executed by a 
d217 1
a217 1
input, output and error connected to 
d227 1
a227 1
The 
d298 1
a298 1
rule would cause username lookup only when both the 
d300 1
a300 1
and the 
d302 1
a302 1
match. 
d356 1
a356 1
Note: IDENT lookups don\'t work with UDP services. 
d373 1
a373 1
hosts are permitted access. 
d379 1
a379 1
/etc/hosts.deny: 
d392 1
a392 1
/etc/hosts.allow: 
d403 1
a403 1
in the host name) and from members of the 
d411 1
a411 1
refused service. 
d494 1
a494 1
Den Dolech 2, P.O. Box 513, 
@


1.5
log
@Use -bullet
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.4 1997/06/24 01:26:23 downsj Exp $
d89 3
a91 1
Blank lines or lines that begin with a `#\' character are ignored.
d127 5
a131 1
A string that begins with a `.\' character. A host name is matched if
d133 20
a152 9
example, the pattern `.tue.nl\' matches the host name
`wzv.win.tue.nl\'.
.It
A string that ends with a `.\' character. A host address is matched if
its first numeric fields match the given string.  For example, the
pattern `131.155.\' matches the address of (almost) every host on the
Eind\%hoven University network (131.155.x.x).
.It
A string that begins with an `@@\' character is treated as an NIS
d157 15
a171 5
An expression of the form `n.n.n.n/m.m.m.m\' is interpreted as a
`net/mask\' pair. A host address is matched if `net\' is equal to the
bitwise AND of the address and the `mask\'. For example, the net/mask
pattern `131.155.72.0/255.255.254.0\' matches every address in the
range `131.155.72.0\' through `131.155.73.255\'.
d199 3
a201 2
Intended use is of the form: `list_1 EXCEPT list_2\'; this construct
matches anything that matches 
d207 4
a210 2
language would permit the use of parentheses, `a EXCEPT b EXCEPT c\'
would parse as `(a EXCEPT (b EXCEPT c))\'.
d219 3
a221 2
Specify an `&\' at the end of the command if you do not want to wait until
it has completed.
d256 3
a258 1
Expands to a single `%\' character.
d273 2
a274 1
that may even belong to different organizations. See also the `twist'
d345 7
a351 5
result (the client matches `UNKNOWN@@host') is strong evidence of a host
spoofing attack.
.Pp
A positive IDENT lookup result (the client matches `KNOWN@@host') is
less trustworthy. It is possible for an intruder to spoof both the
d399 4
a402 1
The first rule permits access from hosts in the local domain (no `.\'
@


1.4
log
@Slight fix.
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.3 1997/06/23 11:12:40 downsj Exp $
d61 2
a62 2
.Bl -tag -width XXX
.It \(bu
d67 1
a67 1
.It \(bu
d72 1
a72 1
.It \(bu
d83 2
a84 2
.Bl -tag -width XXX
.It \(bu
d88 1
a88 1
.It \(bu
d92 1
a92 1
.It \(bu
d123 2
a124 2
.Bl -tag -width XXX
.It \(bu
d129 1
a129 1
.It \(bu
d134 1
a134 1
.It \(bu
d139 1
a139 1
.It \(bu
d273 2
a274 2
.Bl -tag -width XXX
.It \(bu
d278 1
a278 1
.It \(bu
d282 1
a282 1
.\" .It \(bu
d286 1
a286 1
.It \(bu
@


1.3
log
@Mandoc manpages.
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.5,v 1.2 1997/04/09 02:28:33 deraadt Exp $
d439 1
@


1.2
log
@the the
@
text
@d1 39
a39 5
.\"	$OpenBSD: hosts_access.5,v 1.1 1997/02/26 03:06:52 downsj Exp $
.TH HOSTS_ACCESS 5
.SH NAME
hosts_access \- format of host access control files
.SH DESCRIPTION
d42 1
a42 1
name, host name/address) patterns.  Examples are given at the end. The
d45 1
a45 1
.PP
d47 12
a58 8
\fIhosts_options\fR(5) document. The extensions are turned on at
program build time by building with -DPROCESS_OPTIONS.
.PP
In the following text, \fIdaemon\fR is the process name of a
network daemon process, and \fIclient\fR is the name and/or address of
a host requesting service. Network daemon process names are specified
in the inetd configuration file.
.SH ACCESS CONTROL FILES
d61 2
a62 1
.IP \(bu
d64 4
a67 2
the \fI/etc/hosts.allow\fR file.
.IP \(bu
d69 4
a72 2
entry in the \fI/etc/hosts.deny\fR file.
.IP \(bu
d74 2
a75 1
.PP
d79 1
a79 1
.SH ACCESS CONTROL RULES
d81 1
a81 1
lines are processed in order of appearance. The search terminates when a
d83 2
a84 1
.IP \(bu
d88 1
a88 1
.IP \(bu
d92 1
a92 1
.IP \(bu
d95 1
a95 2
.sp
.ti +3
d97 10
a106 6
.PP
\fIdaemon_list\fR is a list of one or more daemon process names
(argv[0] values) or wildcards (see below).  
.PP
\fIclient_list\fR is a list
of one or more host names, host addresses, patterns or wildcards (see
d108 6
a113 2
.PP
The more complex forms \fIdaemon@@host\fR and \fIuser@@host\fR are
d116 1
a116 1
.PP
d118 1
a118 1
.PP
d121 1
a121 2
.ne 4
.SH PATTERNS
d123 2
a124 1
.IP \(bu
d129 1
a129 1
.IP \(bu
d134 1
a134 1
.IP \(bu
d139 1
a139 1
.IP \(bu
d145 2
a146 1
.SH WILDCARDS
d148 2
a149 1
.IP ALL
d151 1
a151 1
.IP LOCAL
d153 1
a153 1
.IP UNKNOWN
d155 1
a155 1
\fIor\fR address are unknown.  This pattern should be used with care:
d159 1
a159 1
.IP KNOWN
d161 1
a161 1
\fIand\fR address are known. This pattern should be used with care:
d165 6
a170 7
.IP PARANOID
Matches any host whose name does not match its address.  When tcpd is
built with -DPARANOID (default mode), it drops requests from such
clients even before looking at the access control tables.  Build
without -DPARANOID when you want more control over such requests.
.ne 6
.SH OPERATORS
d173 5
a177 2
matches anything that matches \fIlist_1\fR unless it matches
\fIlist_2\fR.  The EXCEPT operator can be used in daemon_lists and in
d181 1
a181 3
.br
.ne 6
.SH SHELL COMMANDS
d184 8
a191 5
The result is executed by a \fI/bin/sh\fR child process with standard
input, output and error connected to \fI/dev/null\fR.  Specify an `&\'
at the end of the command if you do not want to wait until it has
completed.
.PP
d195 4
a198 2
.PP
The \fIhosts_options\fR(5) document describes an alternative language
d200 1
a200 1
.SH % EXPANSIONS
d202 2
a203 1
.IP "%a (%A)"
d205 1
a205 1
.IP %c
d208 5
a212 3
.IP %d
The daemon process name (argv[0] value).
.IP "%h (%H)"
d215 1
a215 1
.IP "%n (%N)"
d217 1
a217 1
.IP %p
d219 1
a219 1
.IP %s
d222 1
a222 1
.IP %u
d224 1
a224 1
.IP %%
d226 2
a227 1
.PP
d230 1
a230 1
.SH SERVER ENDPOINT PATTERNS
d233 1
a233 2
.sp
.ti +3
d235 2
a236 1
.sp
d241 3
a243 2
option in the hosts_options(5) document. Some systems (Solaris,
FreeBSD) can have more than one internet address on one physical
d246 1
a246 1
.sp
d250 1
a250 1
.SH CLIENT USERNAME LOOKUP
d256 2
a257 2
.PP
.ti +3
d259 2
a260 1
.PP
d264 6
a269 3
rule would cause username lookup only when both the \fIdaemon_list\fR
and the \fIhost_pattern\fR match. 
.PP
d273 2
a274 1
.IP \(bu
d278 1
a278 1
.IP \(bu
d282 5
a286 5
.IP \(bu
A well-known UNIX kernel bug may cause loss of service when username
lookups are blocked by a firewall. The wrapper README document
describes a procedure to find out if your kernel has this bug.
.IP \(bu
d290 2
a291 1
.PP
d294 2
a295 2
.PP
.ti +3
d297 2
a298 1
.PP
d301 1
a301 1
.SH DETECTING ADDRESS SPOOFING ATTACKS
d307 1
a307 1
.PP
d313 1
a313 1
.PP
d319 1
a319 1
.PP
d321 1
a321 1
.SH EXAMPLES
d326 1
a326 1
.PP
d331 1
a331 1
.PP
d335 1
a335 1
.SH MOSTLY CLOSED
d338 1
a338 1
.PP
d341 2
a342 2
.PP
.ne 2
d344 1
a344 1
.in +3
d346 3
a348 1
.PP
d351 1
a351 1
.PP
d354 2
a355 2
.PP
.ne 2
d357 1
a357 1
.in +3
a358 1
.br
d360 3
a362 1
.PP
d364 2
a365 1
in the host name) and from members of the \fIsome_netgroup\fP
d367 4
a370 3
\fIfoobar.edu\fP domain (notice the leading dot), with the exception of
\fIterminalserver.foobar.edu\fP.
.SH MOSTLY OPEN
d373 1
a373 1
.PP
d377 2
a378 1
.PP
d380 1
a380 1
.in +3
a381 1
.br
d383 3
a385 1
.PP
d388 1
a388 1
.SH BOOBY TRAPS
d393 2
a394 2
.PP
.ne 2
d396 6
a401 5
.in +3
.nf
in.tftpd: LOCAL, .my.domain
.PP
.ne 2
d403 9
a411 7
.in +3
.nf
in.tftpd: ALL: (/some/where/safe_finger -l @@%h | \\
	/usr/ucb/mail -s %d-%h root) &
.fi
.PP
The safe_finger command comes with the tcpd wrapper and should be
d415 1
a415 1
.PP
d418 1
a418 1
.PP
d421 1
a421 1
.PP
d426 1
a426 3
.br
.ne 4
.SH DIAGNOSTICS
d433 11
a443 12
.SH FILES
.na
.nf
/etc/hosts.allow, (daemon,client) pairs that are granted access.
/etc/hosts.deny, (daemon,client) pairs that are denied access.
.ad
.fi
.SH SEE ALSO
.nf
tcpd(8) tcp/ip daemon wrapper program.
tcpdchk(8), tcpdmatch(8), test programs.
.SH BUGS
d446 1
a446 1
.PP
d449 2
a450 3
.SH AUTHOR
.na
.nf
d456 1
@


1.1
log
@Initial integration of a much cleaned up libwrap.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d16 1
a16 1
In the following text, \fIdaemon\fR is the the process name of a
@
