head	1.16;
access;
symbols
	OPENBSD_5_5:1.15.0.30
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.26
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.24
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.22
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.20
	OPENBSD_5_0:1.15.0.18
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@# @;


1.16
date	2014.03.24.17.17.12;	author tedu;	state dead;
branches;
next	1.15;

1.15
date	2007.05.31.19.19.39;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.21.18.56.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.08.13.52.52;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.21.09.00;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.11.47.10;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.24.18.30.32;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.22.08.26.52;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.01.08.03.30;	author mpech;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.06.15.04.34;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.06.10.42.26;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.14.21.56.48;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.07.09.13.35.28;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	97.06.23.11.12.40;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.02.26.03.12.48;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.02.26.03.06.51;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.16
log
@The secret of steel has always carried with it a mystery. You must learn
its riddle, Conan. You must learn its discipline. For no one, no one in
this world can you trust. Not men, not women, not beasts.
@
text
@.\"	$OpenBSD: hosts_access.3,v 1.15 2007/05/31 19:19:39 jmc Exp $
.\"
.\" Copyright (c) 1997, Jason Downs.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS
.\" OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\" CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: May 31 2007 $
.Dt HOSTS_ACCESS 3
.Os
.Sh NAME
.Nm hosts_access ,
.Nm hosts_ctl ,
.Nm request_init ,
.Nm request_set
.Nd tcp wrapper access control library
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <tcpd.h>
.Vt extern int allow_severity;
.Vt extern int deny_severity;
.Ft struct request_info *
.Fn request_init "struct request_info *request" "int key" value ... 0
.Ft struct request_info *
.Fn request_set "struct request_info *request" "int key" value ... 0
.Ft int
.Fn hosts_access "struct request_info *request"
.Ft int
.Fn hosts_ctl "char *daemon" "char *client_name" "char *client_addr" "char *client_user"
.Sh DESCRIPTION
The routines described in this document are part of the
.Nm libwrap.a
library.
They implement a rule-based access control language with
optional shell commands that are executed when a rule fires.
.Pp
.Fn request_init
initializes a structure with information about a client
request.
.Fn request_set
updates an already initialized request structure.
Both functions take a
variable-length list of key-value pairs and return their first argument.
The argument lists are terminated with a zero key value.
All string-valued arguments are copied.
The expected keys (and corresponding value types) are:
.Bl -tag -width XXXXXXXXXXXXXXXXXXXXXXXX
.It "RQ_FILE (int)"
The file descriptor associated with the request.
.It "RQ_CLIENT_NAME (char *)"
The client host name.
.It "RQ_CLIENT_ADDR (char *)"
A printable representation of the client network address.
.It "RQ_CLIENT_SIN (struct sockaddr_in *)"
An internal representation of the client network address and port.
The contents of the structure are not copied.
.It "RQ_SERVER_NAME (char *)"
The hostname associated with the server endpoint address.
.It "RQ_SERVER_ADDR (char *)"
A printable representation of the server endpoint address.
.It "RQ_SERVER_SIN (struct sockaddr_in *)"
An internal representation of the server endpoint address and port.
The contents of the structure are not copied.
.It "RQ_DAEMON (char *)"
The name of the daemon process running on the server host.
.It "RQ_USER (char *)"
The name of the user on whose behalf the client host makes the request.
.El
.Pp
.Fn hosts_access
consults the access control tables described in the
.Xr hosts_access 5
manual page.
When internal endpoint information is available, host names
and client user names are looked up on demand, using the request structure
as a cache.
.Fn hosts_access
returns zero if access should be denied.
.Pp
.Fn hosts_ctl
is a wrapper around the
.Fn request_init
and
.Fn hosts_access
routines with a perhaps more convenient interface (though it does not
pass on enough information to support automated client username
lookups).
The client host address, client host name and username
arguments should contain valid data or STRING_UNKNOWN.
.Fn hosts_ctl
returns zero if access should be denied.
.Pp
The
.Fa allow_severity
and
.Fa deny_severity
variables determine
how accepted and rejected requests may be logged.
They must be provided
by the caller and may be modified by rules in the access control tables.
.Sh FILES
.Bl -tag -width /etc/hosts.allow -compact
.It Pa /etc/hosts.allow
Access control table (allow list)
.It Pa /etc/hosts.deny
Access control table (deny list)
.El
.Sh DIAGNOSTICS
Problems are reported via the syslog daemon.
.Sh SEE ALSO
.Xr hosts_access 5 ,
.Xr hosts_options 5
.Sh AUTHORS
.Bd -unfilled -offset indent
Wietse Venema (wietse@@wzv.win.tue.nl)
Department of Mathematics and Computing Science
Eindhoven University of Technology
Den Dolech 2, P.O. Box 513,
5600 MB Eindhoven, The Netherlands
.Ed
.\" @@(#) hosts_access.3 1.8 96/02/11 17:01:26
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.14 2006/12/21 18:56:03 deraadt Exp $
d26 1
a26 1
.Dd $Mdocdate$
@


1.14
log
@mention sys/types.h needed; eth0@@o2.pl
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.13 2003/07/08 13:52:52 jmc Exp $
d26 1
a26 1
.Dd June 23, 1997
@


1.13
log
@some \" -> .\" that i missed earlier;
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.12 2003/06/03 21:09:00 deraadt Exp $
d36 1
@


1.12
log
@terms 3 & 4 cleanup based on "terms" file
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.11 2003/06/02 11:47:10 jmc Exp $
d138 1
a138 1
\" @@(#) hosts_access.3 1.8 96/02/11 17:01:26
@


1.11
log
@- section reorder
- new sentence, new line
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.10 2003/05/24 18:30:32 jmc Exp $
a12 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"      This product includes software developed by Jason Downs for the
.\"      OpenBSD system.
.\" 4. Neither the name(s) of the author(s) nor the name OpenBSD
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
@


1.10
log
@- typos;
- new sentence, new line;
- whitespace at EOL
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.9 2002/06/22 08:26:52 fgsch Exp $
a124 5
.Sh DIAGNOSTICS
Problems are reported via the syslog daemon.
.Sh SEE ALSO
.Xr hosts_access 5 ,
.Xr hosts_options 5
d132 5
@


1.9
log
@remove BUGS section; this library uses strtok_r(3) now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.8 2002/05/01 08:03:30 mpech Exp $
d79 2
a80 2
An internal representation of the client network address and port.  The
contents of the structure are not copied.
@


1.8
log
@o) start new sentence on a new line;
o) always close .Bl tags;
o) fix usage of .Xr;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.7 2001/09/06 15:04:34 mpech Exp $
a136 6
.Sh BUGS
.Fn hosts_access
uses the
.Fn strtok
library function. This may interfere with other code that relies on
.Fn strtok .
@


1.7
log
@Initial idea from aaron@@: Last char of .Xr group in SEE ALSO section should
be a single digit. Powered by mantoya@@.

millert@@ ok.
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.6 2001/08/06 10:42:26 mpech Exp $
d57 2
a58 1
library.  They implement a rule-based access control language with
d65 2
a66 1
updates an already initialized request structure.  Both functions take a
d68 3
a70 2
The argument lists are terminated with a zero key value.  All string-valued
arguments are copied.  The expected keys (and corresponding value types) are:
d97 2
a98 1
manual page.  When internal endpoint information is available, host names
d111 2
a112 1
lookups).  The client host address, client host name and username
d122 3
a124 3
how accepted and rejected requests may be logged. They must be provided
by the caller and may be modified by rules in the access control
tables.
@


1.6
log
@o) We always close .Bl and .Bd tags;
o) .Sh AUTHOR -> .Sh AUTHORS;
o) We don't like .Pp before/after .Sh;
o) We don't like .Pp before/after .Rs/.Re;
o) NetBSD -> .Nx;
o) OpenBSD -> .Ox;

millert@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.5 2000/10/14 21:56:48 deraadt Exp $
d124 1
a124 1
.Xr hosts_options 5 .
@


1.5
log
@put tcp wrapper into Nd line
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.4 1999/07/09 13:35:28 aaron Exp $
d138 1
a138 1
.Sh AUTHOR
@


1.4
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.3 1997/06/23 11:12:40 downsj Exp $
d41 1
a41 1
.Nd access control library
@


1.3
log
@Mandoc manpages.
@
text
@d1 1
a1 1
.\"	$OpenBSD: hosts_access.3,v 1.2 1997/02/26 03:12:48 downsj Exp $
d40 1
a40 1
.Nm request_set 
d55 1
a55 1
The routines described in this document are part of the 
d112 1
a112 1
The 
d143 1
a143 1
Den Dolech 2, P.O. Box 513, 
@


1.2
log
@Correct header ref.
@
text
@d1 57
a57 29
.\"	$OpenBSD: hosts_access.3,v 1.1 1997/02/26 03:06:51 downsj Exp $
.TH HOSTS_ACCESS 3
.SH NAME
hosts_access, hosts_ctl, request_init, request_set \- access control library
.SH SYNOPSIS
.nf
#include <tcpd.h>

extern int allow_severity;
extern int deny_severity;

struct request_info *request_init(request, key, value, ..., 0)
struct request_info *request;

struct request_info *request_set(request, key, value, ..., 0)
struct request_info *request;

int hosts_access(request)
struct request_info *request;

int hosts_ctl(daemon, client_name, client_addr, client_user)
char *daemon;
char *client_name;
char *client_addr;
char *client_user;
.fi
.SH DESCRIPTION
The routines described in this document are part of the \fIlibwrap.a\fR
library. They implement a rule-based access control language with
d59 11
a69 8
.PP
request_init() initializes a structure with information about a client
request. request_set() updates an already initialized request
structure. Both functions take a variable-length list of key-value
pairs and return their first argument.  The argument lists are
terminated with a zero key value. All string-valued arguments are
copied. The expected keys (and corresponding value types) are:
.IP "RQ_FILE (int)"
d71 1
a71 1
.IP "RQ_CLIENT_NAME (char *)"
d73 1
a73 1
.IP "RQ_CLIENT_ADDR (char *)"
d75 1
a75 1
.IP "RQ_CLIENT_SIN (struct sockaddr_in *)"
d78 1
a78 1
.IP "RQ_SERVER_NAME (char *)"
d80 1
a80 1
.IP "RQ_SERVER_ADDR (char *)"
d82 1
a82 1
.IP "RQ_SERVER_SIN (struct sockaddr_in *)"
d85 1
a85 1
.IP "RQ_DAEMON (char *)"
d87 1
a87 1
.IP "RQ_USER (char *)"
d89 16
a104 8
.PP
hosts_access() consults the access control tables described in the
\fIhosts_access(5)\fR manual page.  When internal endpoint information
is available, host names and client user names are looked up on demand,
using the request structure as a cache.  hosts_access() returns zero if
access should be denied.
.PP
hosts_ctl() is a wrapper around the request_init() and hosts_access()
d108 2
a109 1
arguments should contain valid data or STRING_UNKNOWN.  hosts_ctl()
d111 6
a116 2
.PP
The \fIallow_severity\fR and \fIdeny_severity\fR variables determine
d120 1
a120 1
.SH DIAGNOSTICS
d122 18
a139 11
.SH SEE ALSO
hosts_access(5), format of the access control tables.
hosts_options(5), optional extensions to the base language.
.SH FILES
/etc/hosts.allow, /etc/hosts.deny, access control tables.
.SH BUGS
hosts_access() uses the strtok() library function. This may interfere
with other code that relies on strtok().
.SH AUTHOR
.na
.nf
d145 1
@


1.1
log
@Initial integration of a much cleaned up libwrap.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d7 1
a7 1
#include "tcpd.h"
@
