head	1.18;
access;
symbols
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.38
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.36
	OPENBSD_5_0:1.15.0.34
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.32
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.30
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.26
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.28
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.24
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.22
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.20
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.18
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.16
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.14
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.10.0.4
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2014.03.24.17.17.12;	author tedu;	state dead;
branches;
next	1.17;

1.17
date	2013.11.13.19.38.12;	author jca;	state Exp;
branches;
next	1.16;

1.16
date	2012.12.05.23.20.06;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.03.21.09.00;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.07.00.04.21;	author itojun;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.19.19.39.38;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.27.29;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.07.18.49.10;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.28.22.06.29;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.16.02.15.59;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.14.00.56.15;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	99.07.21.18.27.41;	author form;	state Exp;
branches;
next	1.6;

1.6
date	99.06.06.15.34.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.04.26.04.11.02;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.06.30.06.06.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.23.11.16.25;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.03.04.08.59.24;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.02.26.03.06.58;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.18
log
@The secret of steel has always carried with it a mystery. You must learn
its riddle, Conan. You must learn its discipline. For no one, no one in
this world can you trust. Not men, not women, not beasts.
@
text
@/*	$OpenBSD: tcpd.h,v 1.17 2013/11/13 19:38:12 jca Exp $	*/

/*
 * Copyright (c) 1997, Jason Downs.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 /*
  * @@(#) tcpd.h 1.5 96/03/19 16:22:24
  * 
  * Author: Wietse Venema, Eindhoven University of Technology, The Netherlands.
  */

#ifndef _TCPD_H_
#define _TCPD_H_

/* Structure to describe one communications endpoint. */

#define STRING_LENGTH	256		/* hosts, users, processes */

struct host_info {
    char    name[STRING_LENGTH];	/* access via eval_hostname(host) */
    char    addr[STRING_LENGTH];	/* access via eval_hostaddr(host) */
    struct sockaddr *sin;		/* socket address or 0 */
    struct t_unitdata *unit;		/* TLI transport address or 0 */
    struct request_info *request;	/* for shared information */
};

/* Structure to describe what we know about a service request. */

struct request_info {
    int     fd;				/* socket handle */
    char    user[STRING_LENGTH];	/* access via eval_user(request) */
    char    daemon[STRING_LENGTH];	/* access via eval_daemon(request) */
    char    pid[10];			/* access via eval_pid(request) */
    struct host_info client[1];		/* client endpoint info */
    struct host_info server[1];		/* server endpoint info */
    void  (*sink)(int);			/* datagram sink function or 0 */
    void  (*hostname)(struct host_info *); /* address to printable hostname */
    void  (*hostaddr)(struct host_info *); /* address to printable address */
    void  (*cleanup)(void);		/* cleanup function or 0 */
    struct netconfig *config;		/* netdir handle */
};

/* Common string operations. Less clutter should be more readable. */

#define STRN_CPY(d,s,l)	{ strncpy((d),(s),(l)); (d)[(l)-1] = 0; }

#define STRN_EQ(x,y,l)	(strncasecmp((x),(y),(l)) == 0)
#define STRN_NE(x,y,l)	(strncasecmp((x),(y),(l)) != 0)
#define STR_EQ(x,y)	(strcasecmp((x),(y)) == 0)
#define STR_NE(x,y)	(strcasecmp((x),(y)) != 0)

 /*
  * Initially, all above strings have the empty value. Information that
  * cannot be determined at runtime is set to "unknown", so that we can
  * distinguish between `unavailable' and `not yet looked up'. A hostname
  * that we do not believe in is set to "paranoid".
  */

#define STRING_UNKNOWN	"unknown"	/* lookup failed */
#define STRING_PARANOID	"paranoid"	/* hostname conflict */

__BEGIN_DECLS
extern char unknown[];
extern char paranoid[];
__END_DECLS

#define HOSTNAME_KNOWN(s) (STR_NE((s),unknown) && STR_NE((s),paranoid))

#define NOT_INADDR(s) (s[strspn(s,"01234567890./")] != 0)

/* Global functions. */

#define fromhost sock_host		/* no TLI support needed */

__BEGIN_DECLS
extern int hosts_access(struct request_info *);
extern int hosts_ctl(char *, char *, char *, char *);
extern void shell_cmd(char *);
extern char *percent_m(char *, char *);
extern char *percent_x(char *, int, char *, struct request_info *);
extern void rfc931(struct sockaddr *, struct sockaddr *, char *);
extern int rfc1413(struct sockaddr *, struct sockaddr *, char *, size_t, int);
extern void clean_exit(struct request_info *);
extern void refuse(struct request_info *);
#ifdef _STDIO_H_
extern char *xgets(char *, int, FILE *);
#endif	/* _STDIO_H_ */
extern char *split_at(char *, int);
extern int dot_quad_addr_new(char *, in_addr_t *);
extern in_addr_t dot_quad_addr(char *);

/* Global variables. */

extern int allow_severity;		/* for connection logging */
extern int deny_severity;		/* for connection logging */
extern char *hosts_allow_table;		/* for verification mode redirection */
extern char *hosts_deny_table;		/* for verification mode redirection */
extern int hosts_access_verbose;	/* for verbose matching mode */
extern int rfc931_timeout;		/* user lookup timeout */
extern int resident;			/* > 0 if resident process */

 /*
  * Routines for controlled initialization and update of request structure
  * attributes. Each attribute has its own key.
  */

extern struct request_info *request_init(struct request_info *, ...);
extern struct request_info *request_set(struct request_info *, ...);

#define RQ_FILE		1		/* file descriptor */
#define RQ_DAEMON	2		/* server process (argv[0]) */
#define RQ_USER		3		/* client user name */
#define RQ_CLIENT_NAME	4		/* client host name */
#define RQ_CLIENT_ADDR	5		/* client host address */
#define RQ_CLIENT_SIN	6		/* client endpoint (internal) */
#define RQ_SERVER_NAME	7		/* server host name */
#define RQ_SERVER_ADDR	8		/* server host address */
#define RQ_SERVER_SIN	9		/* server endpoint (internal) */

 /*
  * Routines for delayed evaluation of request attributes. Each attribute
  * type has its own access method. The trivial ones are implemented by
  * macros. The other ones are wrappers around the transport-specific host
  * name, address, and client user lookup methods. The request_info and
  * host_info structures serve as caches for the lookup results.
  */

extern char *eval_user(struct request_info *);
extern char *eval_hostname(struct host_info *);
extern char *eval_hostaddr(struct host_info *);
extern char *eval_hostinfo(struct host_info *);
extern char *eval_client(struct request_info *);
extern char *eval_server(struct request_info *);
#define eval_daemon(r)	((r)->daemon)	/* daemon process name */
#define eval_pid(r)	((r)->pid)	/* process id */

/* Socket-specific methods, including DNS hostname lookups. */

extern void sock_host(struct request_info *);
extern void sock_hostname(struct host_info *);
extern void sock_hostaddr(struct host_info *);
#define sock_methods(r) \
	{ (r)->hostname = sock_hostname; (r)->hostaddr = sock_hostaddr; }

 /*
  * Problem reporting interface. Additional file/line context is reported
  * when available. The jump buffer (tcpd_buf) is not declared here, or
  * everyone would have to include <setjmp.h>.
  */

extern void tcpd_warn(char *, ...)
    __attribute__((__format__(__printf__, 1, 2)));
extern void tcpd_jump(char *, ...)
    __attribute__((__format__(__printf__, 1, 2)));
__END_DECLS

struct tcpd_context {
    char   *file;			/* current file */
    int     line;			/* current line */
};

__BEGIN_DECLS
extern struct tcpd_context tcpd_context;

 /*
  * While processing access control rules, error conditions are handled by
  * jumping back into the hosts_access() routine. This is cleaner than
  * checking the return value of each and every silly little function. The
  * (-1) returns are here because zero is already taken by longjmp().
  */

#define AC_PERMIT	1		/* permit access */
#define AC_DENY		(-1)		/* deny_access */
#define AC_ERROR	AC_DENY		/* XXX */

 /*
  * In verification mode an option function should just say what it would do,
  * instead of really doing it. An option function that would not return
  * should clear the dry_run flag to inform the caller of this unusual
  * behavior.
  */

extern void process_options(char *, struct request_info *);
extern int dry_run;			/* verification flag */
__END_DECLS

#endif	/* _TCPD_H_ */
@


1.17
log
@Remove redundant extern "C" {...}.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.16 2012/12/05 23:20:06 deraadt Exp $	*/
@


1.16
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.15 2003/06/03 21:09:00 deraadt Exp $	*/
a92 3
#ifdef __cplusplus
extern "C" {
#endif
a111 4

#ifdef __cplusplus
}
#endif
@


1.15
log
@terms 3 & 4 cleanup based on "terms" file
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.14 2002/06/07 00:04:21 itojun Exp $	*/
a34 2

#include <sys/cdefs.h>
@


1.14
log
@more strict prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.13 2002/02/19 19:39:38 millert Exp $	*/
a13 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Jason Downs for the
 *      OpenBSD system.
 * 4. Neither the name(s) of the author(s) nor the name OpenBSD
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
@


1.13
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.12 2002/02/16 21:27:29 millert Exp $	*/
d66 4
a69 4
    void  (*sink) ();			/* datagram sink function or 0 */
    void  (*hostname) ();		/* address to printable hostname */
    void  (*hostaddr) ();		/* address to printable address */
    void  (*cleanup) ();		/* cleanup function or 0 */
d188 4
a191 2
extern void tcpd_warn(char *, ...);
extern void tcpd_jump(char *, ...);
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.11 2001/11/07 18:49:10 deraadt Exp $	*/
a220 20


#ifdef _TCPD_PRIVATE
 /*
  * What follows is an attempt to unify varargs.h and stdarg.h. I'd rather
  * have this than #ifdefs all over the code.
  *
  * The code using these must include the proper system header.
  */

#ifdef __STDC__
#define VARARGS(func,type,arg) func(type arg, ...)
#define VASTART(ap,type,name)  va_start(ap,name)
#define VAEND(ap)              va_end(ap)
#else
#define VARARGS(func,type,arg) func(va_alist) va_dcl
#define VASTART(ap,type,name)  {type name; va_start(ap); name = va_arg(ap, type)
#define VAEND(ap)              va_end(ap);}
#endif
#endif	/* _TCPD_PRIVATE */
@


1.11
log
@crank strings to 256 so they can hold a full hostname
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.10 2001/03/28 22:06:29 deraadt Exp $	*/
d109 9
a117 9
extern int hosts_access __P((struct request_info *));
extern int hosts_ctl __P((char *, char *, char *, char *));
extern void shell_cmd __P((char *));
extern char *percent_m __P((char *, char *));
extern char *percent_x __P((char *, int, char *, struct request_info *));
extern void rfc931 __P((struct sockaddr *, struct sockaddr *, char *));
extern int rfc1413 __P((struct sockaddr *, struct sockaddr *, char *, size_t, int));
extern void clean_exit __P((struct request_info *));
extern void refuse __P((struct request_info *));
d119 1
a119 1
extern char *xgets __P((char *, int, FILE *));
d121 3
a123 3
extern char *split_at __P((char *, int));
extern int dot_quad_addr_new __P((char *, in_addr_t *));
extern in_addr_t dot_quad_addr __P((char *));
d144 2
a145 2
extern struct request_info *request_init __P((struct request_info *, ...));
extern struct request_info *request_set __P((struct request_info *, ...));
d165 6
a170 6
extern char *eval_user __P((struct request_info *));
extern char *eval_hostname __P((struct host_info *));
extern char *eval_hostaddr __P((struct host_info *));
extern char *eval_hostinfo __P((struct host_info *));
extern char *eval_client __P((struct request_info *));
extern char *eval_server __P((struct request_info *));
d176 3
a178 3
extern void sock_host __P((struct request_info *));
extern void sock_hostname __P((struct host_info *));
extern void sock_hostaddr __P((struct host_info *));
d188 2
a189 2
extern void tcpd_warn __P((char *, ...));
extern void tcpd_jump __P((char *, ...));
d218 1
a218 1
extern void process_options __P((char *, struct request_info *));
@


1.10
log
@C++ wrapping; dmcmahill@@netbsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.9 2001/02/16 02:15:59 beck Exp $	*/
d47 1
a47 1
#define STRING_LENGTH	128		/* hosts, users, processes */
@


1.9
log
@Rewrite rfc931.c to eliminate problematic setjmp/longjmp and stdio usage
on sockets. Adds new documented rfc1413 routine to do client side ident
stuff. leaves compatible rfc931() routine in lib which calls new routine,
incremenent shlib minor.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.8 2000/10/14 00:56:15 itojun Exp $	*/
d102 3
d124 4
@


1.8
log
@tcp wrapper support for IPv6.  from netbsd.
TODO: scoped address support may need more consideration (we are taking
safer side now - rejects too much).
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.7 1999/07/21 18:27:41 form Exp $	*/
d112 1
@


1.7
log
@Add missing hosts_ctl() prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.6 1999/06/06 15:34:45 deraadt Exp $	*/
d52 1
a52 1
    struct sockaddr_in *sin;		/* socket address or 0 */
d111 1
a111 1
extern void rfc931 __P((struct sockaddr_in *, struct sockaddr_in *, char *));
@


1.6
log
@add dot_quad_addr_new(); which can handle 255.255.255.255 addresses
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.5 1999/04/26 04:11:02 downsj Exp $	*/
d107 1
@


1.5
log
@Only proto xgets() if stdio has been included
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.4 1997/06/30 06:06:00 deraadt Exp $	*/
d117 1
@


1.4
log
@alpha bits
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.3 1997/06/23 11:16:25 downsj Exp $	*/
d113 1
d115 1
@


1.3
log
@Copyright.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.2 1997/03/04 08:59:24 downsj Exp $	*/
d115 1
a115 1
extern unsigned long dot_quad_addr __P((char *));
@


1.2
log
@Slightly cleaner.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcpd.h,v 1.1 1997/02/26 03:06:58 downsj Exp $	*/
d14 7
@


1.1
log
@Initial integration of a much cleaned up libwrap.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d204 1
d221 1
@
