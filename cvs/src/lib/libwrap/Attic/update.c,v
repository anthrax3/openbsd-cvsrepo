head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.32
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.28
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.26
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.24
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.03.24.17.17.12;	author tedu;	state dead;
branches;
next	1.7;

1.7
date	2013.11.13.22.37.15;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.27.23.59.30;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.26.09.29.02;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.19.19.39.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.07.18.49.21;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.14.00.56.16;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	97.02.26.03.06.59;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.8
log
@The secret of steel has always carried with it a mystery. You must learn
its riddle, Conan. You must learn its discipline. For no one, no one in
this world can you trust. Not men, not women, not beasts.
@
text
@/*	$OpenBSD: update.c,v 1.7 2013/11/13 22:37:15 deraadt Exp $	*/

 /*
  * Routines for controlled update/initialization of request structures.
  * 
  * request_init() initializes its argument. Pointers and string-valued members
  * are initialized to zero, to indicate that no lookup has been attempted.
  * 
  * request_set() adds information to an already initialized request structure.
  * 
  * Both functions take a variable-length name-value list.
  * 
  * Diagnostics are reported through syslog(3).
  * 
  * Author: Wietse Venema, Eindhoven University of Technology, The Netherlands.
  */

/* System libraries */

#include <stdio.h>
#include <stdarg.h>
#include <syslog.h>
#include <string.h>
#include <unistd.h>

/* Local stuff. */

#include "tcpd.h"

/* request_fill - request update engine */

static struct request_info *request_fill(struct request_info *request,
    va_list ap)
{
    int     key;
    char   *ptr;

    while ((key = va_arg(ap, int)) > 0) {
	switch (key) {
	default:
	    tcpd_warn("request_fill: invalid key: %d", key);
	    return (request);
	case RQ_FILE:
	    request->fd = va_arg(ap, int);
	    continue;
	case RQ_CLIENT_SIN:
	    request->client->sin = va_arg(ap, struct sockaddr *);
	    continue;
	case RQ_SERVER_SIN:
	    request->server->sin = va_arg(ap, struct sockaddr *);
	    continue;

	    /*
	     * All other fields are strings with the same maximal length.
	     */

	case RQ_DAEMON:
	    ptr = request->daemon;
	    break;
	case RQ_USER:
	    ptr = request->user;
	    break;
	case RQ_CLIENT_NAME:
	    ptr = request->client->name;
	    break;
	case RQ_CLIENT_ADDR:
	    ptr = request->client->addr;
	    break;
	case RQ_SERVER_NAME:
	    ptr = request->server->name;
	    break;
	case RQ_SERVER_ADDR:
	    ptr = request->server->addr;
	    break;
	}
	strlcpy(ptr, va_arg(ap, char *), STRING_LENGTH);
    }
    return (request);
}

/* request_init - initialize request structure */

struct request_info *request_init(struct request_info *request, ...)
{
    static struct request_info default_info;
    struct request_info *r;
    va_list ap;

    /*
     * Initialize data members. We do not assign default function pointer
     * members, to avoid pulling in the whole socket module when it is not
     * really needed.
     */
    va_start(ap, request);
    *request = default_info;
    request->fd = -1;
    strlcpy(request->daemon, unknown, sizeof(request->daemon));
    snprintf(request->pid, sizeof(request->pid), "%ld", (long)getpid());
    request->client->request = request;
    request->server->request = request;
    r = request_fill(request, ap);
    va_end(ap);
    return (r);
}

/* request_set - update request structure */

struct request_info *request_set(struct request_info *request, ...)
{
    struct request_info *r;
    va_list ap;

    va_start(ap, request);
    r = request_fill(request, ap);
    va_end(ap);
    return (r);
}
@


1.7
log
@repair prototypes
reviewed by chris
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.6 2009/10/27 23:59:30 deraadt Exp $	*/
@


1.6
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.5 2002/05/26 09:29:02 deraadt Exp $	*/
d32 2
a33 3
static struct request_info *request_fill(request, ap)
struct request_info *request;
va_list ap;
@


1.5
log
@pid_t cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.4 2002/02/19 19:39:38 millert Exp $	*/
a16 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#) update.c 1.1 94/12/28 17:42:56";
#else
static char rcsid[] = "$OpenBSD: update.c,v 1.4 2002/02/19 19:39:38 millert Exp $";
#endif
#endif
@


1.4
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.3 2001/11/07 18:49:21 deraadt Exp $	*/
d22 1
a22 1
static char rcsid[] = "$OpenBSD: update.c,v 1.3 2001/11/07 18:49:21 deraadt Exp $";
d107 1
a107 1
    snprintf(request->pid, sizeof(request->pid), "%d", getpid());
@


1.3
log
@avoid strcpy and sprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.2 2000/10/14 00:56:16 itojun Exp $	*/
d22 1
a22 1
static char rcsid[] = "$OpenBSD: update.c,v 1.2 2000/10/14 00:56:16 itojun Exp $";
d92 1
a92 1
struct request_info *VARARGS(request_init, struct request_info *, request)
d103 1
a103 1
    VASTART(ap, struct request_info *, request);
d111 1
a111 1
    VAEND(ap);
d117 1
a117 1
struct request_info *VARARGS(request_set, struct request_info *, request)
d122 1
a122 1
    VASTART(ap, struct request_info *, request);
d124 1
a124 1
    VAEND(ap);
@


1.2
log
@tcp wrapper support for IPv6.  from netbsd.
TODO: scoped address support may need more consideration (we are taking
safer side now - rejects too much).
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.1 1997/02/26 03:06:59 downsj Exp $	*/
d22 1
a22 1
static char rcsid[] = "$OpenBSD: update.c,v 1.1 1997/02/26 03:06:59 downsj Exp $";
d85 1
a85 1
	STRN_CPY(ptr, va_arg(ap, char *), STRING_LENGTH);
d106 2
a107 2
    strcpy(request->daemon, unknown);
    sprintf(request->pid, "%d", getpid());
@


1.1
log
@Initial integration of a much cleaned up libwrap.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d22 1
a22 1
static char rcsid[] = "$OpenBSD$";
d56 1
a56 1
	    request->client->sin = va_arg(ap, struct sockaddr_in *);
d59 1
a59 1
	    request->server->sin = va_arg(ap, struct sockaddr_in *);
@

