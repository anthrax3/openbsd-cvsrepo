head	1.7;
access;
symbols
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2003.07.15.19.02.52;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2002.06.19.07.12.41;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.19.12.10.27;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	98.05.13.17.53.25;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.07.25.20.30.27;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.11.11.09.49.47;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.11.11.04.55.03;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.7
log
@now built into krb5
@
text
@/*
 * Copyright (c) 1997, 1998 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. All advertising materials mentioning features or use of this software 
 *    must display the following acknowledgement: 
 *      This product includes software developed by Kungliga Tekniska 
 *      Högskolan and its contributors. 
 *
 * 4. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
/* RCSID("$KTH: com_err.c,v 1.13 1999/03/12 15:17:08 bg Exp $"); */
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* #include <roken.h> */
#include "com_err.h"

struct et_list *_et_list;


const char *
error_message (long code)
{
    static char msg[128];
    const char *p = com_right(_et_list, code);
    if (p == NULL)
	p = strerror(code);
    if (p != NULL && *p != '\0') {
	strncpy(msg, p, sizeof(msg) - 1);
	msg[sizeof(msg) - 1] = 0;
    } else 
	snprintf(msg, sizeof msg, "Unknown error %ld", code);
    return msg;
}

int
init_error_table(const char **msgs, long base, int count)
{
    initialize_error_table_r(&_et_list, msgs, count, base);
    return 0;
}

static void
default_proc (const char *whoami, long code, const char *fmt, va_list args)
{
    if (whoami)
      fprintf(stderr, "%s: ", whoami);
    if (code)
      fprintf(stderr, "%s ", error_message(code));
    if (fmt)
      vfprintf(stderr, fmt, args);
    fprintf(stderr, "\r\n");	/* ??? */
}

static errf com_err_hook = default_proc;

void 
com_err_va (const char *whoami, 
	    long code, 
	    const char *fmt, 
	    va_list args)
{
    (*com_err_hook) (whoami, code, fmt, args);
}

void
com_err (const char *whoami,
	 long code,
	 const char *fmt, 
	 ...)
{
    va_list ap;
    va_start(ap, fmt);
    com_err_va (whoami, code, fmt, ap);
    va_end(ap);
}

errf
set_com_err_hook (errf new)
{
    errf old = com_err_hook;

    if (new)
	com_err_hook = new;
    else
	com_err_hook = default_proc;
    
    return old;
}

errf
reset_com_err_hook (void) 
{
    return set_com_err_hook(NULL);
}

#define ERRCODE_RANGE   8       /* # of bits to shift table number */
#define BITS_PER_CHAR   6       /* # bits to shift per character in name */

static const char char_set[] =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";

static char buf[6];

const char *
error_table_name(int num)
{
    int ch;
    int i;
    char *p;

    /* num = aa aaa abb bbb bcc ccc cdd ddd d?? ??? ??? */
    p = buf;
    num >>= ERRCODE_RANGE;
    /* num = ?? ??? ??? aaa aaa bbb bbb ccc ccc ddd ddd */
    num &= 077777777;
    /* num = 00 000 000 aaa aaa bbb bbb ccc ccc ddd ddd */
    for (i = 4; i >= 0; i--) {
        ch = (num >> BITS_PER_CHAR * i) & ((1 << BITS_PER_CHAR) - 1);
        if (ch != 0)
            *p++ = char_set[ch-1];
    }
    *p = '\0';
    return(buf);
}
@


1.6
log
@use more snprintf
@
text
@@


1.5
log
@Update to a newer version from KTH-Kerberos.
(most work by art@@)
@
text
@d63 1
a63 1
	sprintf(msg, "Unknown error %ld", code);
@


1.4
log
@use errcode_t
change errcode_t from long to int to make the API match the usage.
This should solve the problems with having kerberos servers on alphas.
@
text
@d1 36
a36 17
/*	$OpenBSD: com_err.c,v 1.3 1997/07/25 20:30:27 mickey Exp $	*/

/*-
 * Copyright 1987, 1988 by the Student Information Processing Board
 *	of the Massachusetts Institute of Technology
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for any purpose and without fee is
 * hereby granted, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation,
 * and that the names of M.I.T. and the M.I.T. S.I.P.B. not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * M.I.T. and the M.I.T. S.I.P.B. make no representations about
 * the suitability of this software for any purpose.  It is
 * provided "as is" without express or implied warranty.
d39 4
d44 4
d49 1
a49 8
#ifdef __STDC__
#  undef VARARGS
#  include <stdarg.h>
#else
#  undef VARARGS
#  define VARARGS 1
#  include <varargs.h>
#endif
a50 2
#include "com_err.h"
#include "error_table.h"
d52 14
a65 9
/*
 * Protect us from header version (externally visible) of com_err, so
 * we can survive in a <varargs.h> environment.  I think.
 */
#if VARARGS
#define com_err com_err_external
#include "com_err.h"
#undef com_err
#endif
d67 6
a72 9
#ifdef NPOSIX
#undef vfprintf
#define vfprintf(stream,fmt,args) _doprnt(fmt,args,stream)
#endif

#if !defined(lint)
static const char rcsid[] =
    "$Id: com_err.c,v 1.3 1997/07/25 20:30:27 mickey Exp $";
#endif	/* ! lint */
d75 1
a75 9
#ifdef __STDC__
    default_com_err_proc (const char *whoami, errcode_t code, const char *fmt, va_list args)
#else
    default_com_err_proc (whoami, code, fmt, args)
    const char *whoami;
    errcode_t code;
    const char *fmt;
    va_list args;
#endif
d77 7
a83 24
    if (whoami) {
	fputs(whoami, stderr);
	fputs(": ", stderr);
    }
#ifdef SOLARIS
    if (code) {
	fputs(error_message(code), stderr);
	fputs(" ", stderr);
    } else {
        vfprintf (stderr, fmt, args);
    }
#else
    if (code) {
	fputs(error_message(code), stderr);
	fputs(" ", stderr);
    }
    if (fmt) {
        vfprintf (stderr, fmt, args);
    }
#endif
    putc('\n', stderr);
    /* should do this only on a tty in raw mode */
    putc('\r', stderr);
    fflush(stderr);
d86 1
a86 1
typedef void (*errf) __P((const char *, errcode_t, const char *, va_list));
d88 5
a92 7
errf com_err_hook = default_com_err_proc;

void com_err_va (whoami, code, fmt, args)
    const char *whoami;
    errcode_t code;
    const char *fmt;
    va_list args;
a93 2
  if (! com_err_hook)
        com_err_hook = default_com_err_proc;
d97 5
a101 8
#if ! VARARGS
void com_err (const char *whoami,
	      errcode_t code,
	      const char *fmt, ...)
{
#else
void com_err (va_alist)
    va_dcl
d103 4
a106 17
    const char *whoami, *fmt;
    errcode_t code;
#endif
    va_list pvar;

    if (!com_err_hook)
	com_err_hook = default_com_err_proc;
#if VARARGS
    va_start (pvar);
    whoami = va_arg (pvar, const char *);
    code = va_arg (pvar, errcode_t);
    fmt = va_arg (pvar, const char *);
#else
    va_start(pvar, fmt);
#endif
    com_err_va (whoami, code, fmt, pvar);
    va_end(pvar);
d109 2
a110 2
errf set_com_err_hook (new_proc)
    errf new_proc;
d112 1
a112 1
    errf x = com_err_hook;
d114 2
a115 2
    if (new_proc)
	com_err_hook = new_proc;
d117 4
a120 1
	com_err_hook = default_com_err_proc;
d122 4
a125 1
    return x;
d128 28
a155 4
errf reset_com_err_hook () {
    errf x = com_err_hook;
    com_err_hook = default_com_err_proc;
    return x;
@


1.3
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: com_err.c,v 1.2 1996/11/11 09:49:47 downsj Exp $	*/
d51 1
a51 1
    "$Id: com_err.c,v 1.2 1996/11/11 09:49:47 downsj Exp $";
d56 1
a56 1
    default_com_err_proc (const char *whoami, long code, const char *fmt, va_list args)
d60 1
a60 1
    long code;
d91 1
a91 1
typedef void (*errf) __P((const char *, long, const char *, va_list));
d97 1
a97 1
    long code;
d108 1
a108 1
	      long code,
d116 1
a116 1
    long code;
d125 1
a125 1
    code = va_arg (pvar, long);
@


1.2
log
@Slight update.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_err.c,v 1.1 1996/11/11 04:55:03 downsj Exp $	*/
d22 1
a22 1
#if __STDC__
d51 1
a51 1
    "$Id: com_err.c,v 1.1 1996/11/11 04:55:03 downsj Exp $";
@


1.1
log
@Move libcom_err out of Kerberos, change include location.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
#include "kerberosIV/com_err.h"
d40 1
a40 1
#include "kerberosIV/com_err.h"
d51 1
a51 1
    "$Id: com_err.c,v 1.1.1.1 1995/12/14 06:52:33 tholo Exp $";
@
