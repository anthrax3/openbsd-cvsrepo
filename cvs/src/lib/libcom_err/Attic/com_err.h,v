head	1.8;
access;
symbols
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2003.07.15.19.02.52;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2002.02.19.19.39.37;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.17.19.42.24;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.19.12.10.27;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	98.05.13.17.53.26;	author art;	state Exp;
branches;
next	1.2;

1.2
date	96.12.16.03.17.16;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.11.11.04.55.03;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.8
log
@now built into krb5
@
text
@/*
 * Copyright (c) 1997, 1998 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. All advertising materials mentioning features or use of this software 
 *    must display the following acknowledgement: 
 *      This product includes software developed by Kungliga Tekniska 
 *      Högskolan and its contributors. 
 *
 * 4. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

/* $KTH: com_err.h,v 1.3 1998/05/02 20:13:28 assar Exp $ */

/* MIT compatible com_err library */

#ifndef __COM_ERR_H__
#define __COM_ERR_H__

#include <stdarg.h>

/*
 * For compatibility with MIT's com_err the com_right.h include
 * file is inserted here.
 */
/* $KTH: com_right.h,v 1.8 1998/02/17 21:19:43 bg Exp $ */

#ifndef __COM_RIGHT_H__
#define __COM_RIGHT_H__

struct error_table {
    char const * const * msgs;
    long base;
    int n_msgs;
};
struct et_list {
    struct et_list *next;
    struct error_table *table;
};
extern struct et_list *_et_list;

const char *com_right(struct et_list *list, long code);
void initialize_error_table_r(struct et_list **, const char **, int, long);
void free_error_table(struct et_list *);

#endif /* __COM_RIGHT_H__ */


typedef void (*errf)(const char *, long, const char *, va_list);

const char * error_message(long);
int init_error_table(const char**, long, int);

void com_err_va(const char *, long, const char *, va_list);
void com_err(const char *, long, const char *, ...);

errf set_com_err_hook(errf);
errf reset_com_err_hook(void);

const char *error_table_name(int num);

#endif /* __COM_ERR_H__ */
@


1.7
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@@


1.6
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@a45 1
#ifdef __STDC__
a46 2
#endif

@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@a49 8
#ifndef __P
#ifdef __STDC__
#define __P(X) X
#else
#define __P(X) ()
#endif
#endif

@


1.4
log
@Update to a newer version from KTH-Kerberos.
(most work by art@@)
@
text
@d86 1
a86 1
typedef void (*errf) __P((const char *, long, const char *, va_list));
d88 2
a89 2
const char * error_message __P((long));
int init_error_table __P((const char**, long, int));
d91 2
a92 2
void com_err_va __P((const char *, long, const char *, va_list));
void com_err __P((const char *, long, const char *, ...));
d94 2
a95 2
errf set_com_err_hook __P((errf));
errf reset_com_err_hook __P((void));
@


1.3
log
@use errcode_t
change errcode_t from long to int to make the API match the usage.
This should solve the problems with having kerberos servers on alphas.
@
text
@d1 20
a20 4
/*	$OpenBSD: com_err.h,v 1.2 1996/12/16 03:17:16 downsj Exp $	*/

/*-
 * Header file for common error description library.
d22 3
a24 2
 * Copyright 1988, Student Information Processing Board of the
 * Massachusetts Institute of Technology.
d26 11
a36 2
 * For copyright and distribution info, see the documentation supplied
 * with this package.
d39 1
a39 2
#ifndef __COM_ERR_H
#define __COM_ERR_H
d41 1
a41 1
typedef int errcode_t;		/* XXX compatibilty with newer version */
d43 4
d48 48
d97 1
a97 9
/* ANSI C -- use prototypes etc */
void com_err __P((const char *, errcode_t, const char *, ...));
void com_err_va __P((const char *, errcode_t, const char *, va_list));
char const *error_message __P((long));
void (*com_err_hook) __P((const char *, errcode_t, const char *, va_list));
void (*set_com_err_hook __P((void (*) (const char *, errcode_t, const char *, va_list))))
    __P((const char *, errcode_t, const char *, va_list));
void (*reset_com_err_hook __P((void)))
    __P((const char *, errcode_t, const char *, va_list));
d99 1
a99 1
#endif /* ! defined(__COM_ERR_H) */
@


1.2
log
@Compatibility
@
text
@d1 1
a1 1
/*	$OpenBSD: com_err.h,v 1.1 1996/11/11 04:55:03 downsj Exp $	*/
d16 1
a16 1
typedef long errcode_t;		/* XXX compatibilty with newer version */
d21 2
a22 2
void com_err __P((const char *, long, const char *, ...));
void com_err_va __P((const char *, long, const char *, va_list));
d24 3
a26 3
void (*com_err_hook) __P((const char *, long, const char *, va_list));
void (*set_com_err_hook __P((void (*) (const char *, long, const char *, va_list))))
    __P((const char *, long, const char *, va_list));
d28 1
a28 1
    __P((const char *, long, const char *, va_list));
@


1.1
log
@Move libcom_err out of Kerberos, change include location.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 2
d22 1
@
