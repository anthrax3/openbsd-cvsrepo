head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.8
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.14
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.12
	OPENBSD_5_0:1.10.0.10
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.8
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.6
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2017.03.16.02.40.46;	author dtucker;	state Exp;
branches;
next	1.15;
commitid	1AV9kETGEhTIZUuI;

1.15
date	2017.03.15.05.25.56;	author dtucker;	state Exp;
branches;
next	1.14;
commitid	ZAadLZS5FnFiksd3;

1.14
date	2017.03.15.00.13.18;	author dtucker;	state Exp;
branches;
next	1.13;
commitid	XUcWc6VHPyyN12HE;

1.13
date	2017.03.11.23.37.23;	author djm;	state Exp;
branches;
next	1.12;
commitid	jnFKyHkB3CEiEZ2R;

1.12
date	2013.11.29.19.00.51;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2012.11.12.14.07.20;	author halex;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.20.15.00.04;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2007.03.20.03.42.52;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.19.18.48.11;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.02.21.46.23;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.09.09.27.57;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.08.15.35.35;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.16.10.56.35;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.28.07.03.47;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.27.19.49.51;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.15.01.26.26;	author ian;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Fix overly-conservative overflow checks on mulitplications and add checks
on additions.  This allows scan_scaled to work up to +/-LLONG_MAX (LLONG_MIN
will still be flagged as a range error).  ok millert@@
@
text
@/*	$OpenBSD: fmt_scaled.c,v 1.15 2017/03/15 05:25:56 dtucker Exp $	*/

/*
 * Copyright (c) 2001, 2002, 2003 Ian F. Darwin.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * fmt_scaled: Format numbers scaled for human comprehension
 * scan_scaled: Scan numbers in this format.
 *
 * "Human-readable" output uses 4 digits max, and puts a unit suffix at
 * the end.  Makes output compact and easy-to-read esp. on huge disks.
 * Formatting code was originally in OpenBSD "df", converted to library routine.
 * Scanning code written for OpenBSD libutil.
 */

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <ctype.h>
#include <limits.h>

#include "util.h"

typedef enum {
	NONE = 0, KILO = 1, MEGA = 2, GIGA = 3, TERA = 4, PETA = 5, EXA = 6
} unit_type;

/* These three arrays MUST be in sync!  XXX make a struct */
static unit_type units[] = { NONE, KILO, MEGA, GIGA, TERA, PETA, EXA };
static char scale_chars[] = "BKMGTPE";
static long long scale_factors[] = {
	1LL,
	1024LL,
	1024LL*1024,
	1024LL*1024*1024,
	1024LL*1024*1024*1024,
	1024LL*1024*1024*1024*1024,
	1024LL*1024*1024*1024*1024*1024,
};
#define	SCALE_LENGTH (sizeof(units)/sizeof(units[0]))

#define MAX_DIGITS (SCALE_LENGTH * 3)	/* XXX strlen(sprintf("%lld", -1)? */

/* Convert the given input string "scaled" into numeric in "result".
 * Return 0 on success, -1 and errno set on error.
 */
int
scan_scaled(char *scaled, long long *result)
{
	char *p = scaled;
	int sign = 0;
	unsigned int i, ndigits = 0, fract_digits = 0;
	long long scale_fact = 1, whole = 0, fpart = 0;

	/* Skip leading whitespace */
	while (isascii((unsigned char)*p) && isspace((unsigned char)*p))
		++p;

	/* Then at most one leading + or - */
	while (*p == '-' || *p == '+') {
		if (*p == '-') {
			if (sign) {
				errno = EINVAL;
				return -1;
			}
			sign = -1;
			++p;
		} else if (*p == '+') {
			if (sign) {
				errno = EINVAL;
				return -1;
			}
			sign = +1;
			++p;
		}
	}

	/* Main loop: Scan digits, find decimal point, if present.
	 * We don't allow exponentials, so no scientific notation
	 * (but note that E for Exa might look like e to some!).
	 * Advance 'p' to end, to get scale factor.
	 */
	for (; isascii((unsigned char)*p) &&
	    (isdigit((unsigned char)*p) || *p=='.'); ++p) {
		if (*p == '.') {
			if (fract_digits > 0) {	/* oops, more than one '.' */
				errno = EINVAL;
				return -1;
			}
			fract_digits = 1;
			continue;
		}

		i = (*p) - '0';			/* whew! finally a digit we can use */
		if (fract_digits > 0) {
			if (fract_digits >= MAX_DIGITS-1)
				/* ignore extra fractional digits */
				continue;
			fract_digits++;		/* for later scaling */
			if (fpart > LLONG_MAX / 10) {
				errno = ERANGE;
				return -1;
			}
			fpart *= 10;
			if (i > LLONG_MAX - fpart) {
				errno = ERANGE;
				return -1;
			}
			fpart += i;
		} else {				/* normal digit */
			if (++ndigits >= MAX_DIGITS) {
				errno = ERANGE;
				return -1;
			}
			if (whole > LLONG_MAX / 10) {
				errno = ERANGE;
				return -1;
			}
			whole *= 10;
			if (i > LLONG_MAX - whole) {
				errno = ERANGE;
				return -1;
			}
			whole += i;
		}
	}

	if (sign) {
		whole *= sign;
		fpart *= sign;
	}

	/* If no scale factor given, we're done. fraction is discarded. */
	if (!*p) {
		*result = whole;
		return 0;
	}

	/* Validate scale factor, and scale whole and fraction by it. */
	for (i = 0; i < SCALE_LENGTH; i++) {

		/* Are we there yet? */
		if (*p == scale_chars[i] ||
			*p == tolower((unsigned char)scale_chars[i])) {

			/* If it ends with alphanumerics after the scale char, bad. */
			if (isalnum((unsigned char)*(p+1))) {
				errno = EINVAL;
				return -1;
			}
			scale_fact = scale_factors[i];

			/* check for overflow and underflow after scaling */
			if (whole > LLONG_MAX / scale_fact ||
			    whole < LLONG_MIN / scale_fact) {
				errno = ERANGE;
				return -1;
			}

			/* scale whole part */
			whole *= scale_fact;

			/* truncate fpart so it does't overflow.
			 * then scale fractional part.
			 */
			while (fpart >= LLONG_MAX / scale_fact) {
				fpart /= 10;
				fract_digits--;
			}
			fpart *= scale_fact;
			if (fract_digits > 0) {
				for (i = 0; i < fract_digits -1; i++)
					fpart /= 10;
			}
			whole += fpart;
			*result = whole;
			return 0;
		}
	}

	/* Invalid unit or character */
	errno = EINVAL;
	return -1;
}

/* Format the given "number" into human-readable form in "result".
 * Result must point to an allocated buffer of length FMT_SCALED_STRSIZE.
 * Return 0 on success, -1 and errno set if error.
 */
int
fmt_scaled(long long number, char *result)
{
	long long abval, fract = 0;
	unsigned int i;
	unit_type unit = NONE;

	abval = llabs(number);

	/* Not every negative long long has a positive representation.
	 * Also check for numbers that are just too darned big to format
	 */
	if (abval < 0 || abval / 1024 >= scale_factors[SCALE_LENGTH-1]) {
		errno = ERANGE;
		return -1;
	}

	/* scale whole part; get unscaled fraction */
	for (i = 0; i < SCALE_LENGTH; i++) {
		if (abval/1024 < scale_factors[i]) {
			unit = units[i];
			fract = (i == 0) ? 0 : abval % scale_factors[i];
			number /= scale_factors[i];
			if (i > 0)
				fract /= scale_factors[i - 1];
			break;
		}
	}

	fract = (10 * fract + 512) / 1024;
	/* if the result would be >= 10, round main number */
	if (fract == 10) {
		if (number >= 0)
			number++;
		else
			number--;
		fract = 0;
	}

	if (number == 0)
		strlcpy(result, "0B", FMT_SCALED_STRSIZE);
	else if (unit == NONE || number >= 100 || number <= -100) {
		if (fract >= 5) {
			if (number >= 0)
				number++;
			else
				number--;
		}
		(void)snprintf(result, FMT_SCALED_STRSIZE, "%lld%c",
			number, scale_chars[unit]);
	} else
		(void)snprintf(result, FMT_SCALED_STRSIZE, "%lld.%1lld%c",
			number, fract, scale_chars[unit]);

	return 0;
}

#ifdef	MAIN
/*
 * This is the original version of the program in the man page.
 * Copy-and-paste whatever you need from it.
 */
int
main(int argc, char **argv)
{
	char *cinput = "1.5K", buf[FMT_SCALED_STRSIZE];
	long long ninput = 10483892, result;

	if (scan_scaled(cinput, &result) == 0)
		printf("\"%s\" -> %lld\n", cinput, result);
	else
		perror(cinput);

	if (fmt_scaled(ninput, buf) == 0)
		printf("%lld -> \"%s\"\n", ninput, buf);
	else
		fprintf(stderr, "%lld invalid (%s)\n", ninput, strerror(errno));

	return 0;
}
#endif
@


1.15
log
@Collapse underflow and overflow checks into a single block.
ok djm@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.14 2017/03/15 00:13:18 dtucker Exp $	*/
d124 1
a124 1
			if (fpart >= LLONG_MAX / 10) {
d129 4
d139 1
a139 1
			if (whole >= LLONG_MAX / 10) {
d144 4
@


1.14
log
@Catch integer underflow in scan_scaled reported by Nicolas Iooss.
ok deraadt@@ djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.13 2017/03/11 23:37:23 djm Exp $	*/
d169 3
a171 6
			if (whole >= LLONG_MAX / scale_fact) {
				errno = ERANGE;
				return -1;
			}

			if (whole <= LLONG_MIN / scale_fact) {
@


1.13
log
@fix signed integer overflow in scan_scaled. Found by Nicolas Iooss
using AFL against ssh_config. ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.12 2013/11/29 19:00:51 deraadt Exp $	*/
d170 5
@


1.12
log
@fairly simple unsigned char casts for ctype
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.11 2012/11/12 14:07:20 halex Exp $	*/
d124 4
d135 4
d168 5
@


1.11
log
@make scan_scaled set errno to EINVAL rather than ERANGE if it encounters
an invalid multiplier, like the man page says it should

"looks sensible" deraadt@@, ok ian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.10 2009/06/20 15:00:04 martynas Exp $	*/
d80 1
a80 1
	while (isascii(*p) && isspace(*p))
d107 2
a108 1
	for (; isascii(*p) && (isdigit(*p) || *p=='.'); ++p) {
d152 1
a152 1
			*p == tolower(scale_chars[i])) {
d155 1
a155 1
			if (isalnum(*(p+1))) {
@


1.10
log
@use llabs instead of the home-grown version;  and some comment changes
ok ian@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.9 2007/03/20 03:42:52 tedu Exp $	*/
d180 3
a182 1
	errno = ERANGE;
@


1.9
log
@remove some bogus *p from charles longeau
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.8 2005/10/19 18:48:11 deraadt Exp $	*/
d68 1
a68 1
/** Convert the given input string "scaled" into numeric in "result".
d149 1
a149 1
		/** Are we there yet? */
d195 1
a195 1
	abval = (number < 0LL) ? -number : number;	/* no long long_abs yet */
@


1.8
log
@library routines should not be checking for NULL pointers passed in,
and then setting errno to EFAULT.  that is balony programming!  they
should keep stumbling along to purposely create a crash, so that the
programmer stops doing that kind of stupid crap.  ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.7 2005/08/02 21:46:23 espie Exp $	*/
d80 1
a80 1
	while (*p && isascii(*p) && isspace(*p))
d107 1
a107 1
	for (; *p && isascii(*p) && (isdigit(*p) || *p=='.'); ++p) {
d154 1
a154 1
			if (*(p+1) != '\0' && isalnum(*(p+1))) {
@


1.7
log
@scrape $Id$ tags.
okay deraadt@@, millert@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.6 2005/03/09 09:27:57 otto Exp $	*/
a78 5
	if (p == NULL || result == NULL) {
		errno = EFAULT;
		return -1;
	}

a193 5

	if (result == NULL) {
		errno = EFAULT;
		return -1;
	}
@


1.6
log
@Fix rounding of fractionless numbers. ok tom@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.5 2005/03/08 15:35:35 otto Exp $	*/
a37 4

#if defined(LIBC_SCCS) && !defined(lint)
static const char ident[] = "$OpenBSD: fmt_scaled.c,v 1.5 2005/03/08 15:35:35 otto Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@Fix sizing of fraction. ok tom@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.4 2004/09/16 10:56:35 otto Exp $	*/
d40 1
a40 1
static const char ident[] = "$OpenBSD: fmt_scaled.c,v 1.4 2004/09/16 10:56:35 otto Exp $";
d243 7
a249 1
	else if (unit == NONE || number >= 100 || number <= -100)
d252 1
a252 1
	else
@


1.4
log
@fix 1099512676352 -> 2.0T; ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.3 2004/05/28 07:03:47 deraadt Exp $	*/
d40 1
a40 1
static const char ident[] = "$OpenBSD: fmt_scaled.c,v 1.3 2004/05/28 07:03:47 deraadt Exp $";
d225 2
a230 7
	/* scale fraction to one digit (by rounding) - thnx pjanzen */
	for (i = SCALE_LENGTH-1; i > 0; i--) {
		if (fract >= scale_factors[i]) {
			fract /= scale_factors[i];
			break;
		}
	}
@


1.3
log
@knf; otto ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.2 2003/12/27 19:49:51 otto Exp $	*/
d40 1
a40 1
static const char ident[] = "$OpenBSD: fmt_scaled.c,v 1.2 2003/12/27 19:49:51 otto Exp $";
d231 1
a231 1
		if (fract > scale_factors[i]) {
@


1.2
log
@o Do not drop unit when printing -100
o Round negative numbers correctly
o Do not print fractional valus for byte values

ok ian@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fmt_scaled.c,v 1.1 2003/05/15 01:26:26 ian Exp $	*/
d40 1
a40 1
static const char ident[] = "$OpenBSD: fmt_scaled.c,v 1.1 2003/05/15 01:26:26 ian Exp $";
d129 2
a130 1
				continue;		/* ignore extra fractional digits */
@


1.1
log
@New: fmt_scaled() and scan_scaled() convert to and from "human readable"
or scaled numbers. fmt_scaled, and the format, based on Ken Stailey's
code for "df -h"; scan_scaled is new. Significantly commented on
and reworked by pjanzen@@; other comments from millert@@.  OK pjanzen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
static const char ident[] = "$OpenBSD$";
d236 1
a236 1
	/* if the result would be >= 10, round main number up */
d238 4
a241 1
		number++;
d247 1
a247 1
	else if (number > 100 || number < -100)
@

