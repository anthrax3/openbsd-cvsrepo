head	1.34;
access;
symbols
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.34.0.14
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.34.0.10
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.34.0.12
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.34.0.4
	OPENBSD_5_7_BASE:1.34
	OPENBSD_5_6:1.34.0.8
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.34.0.6
	OPENBSD_5_5_BASE:1.34
	OPENBSD_5_4:1.34.0.2
	OPENBSD_5_4_BASE:1.34
	OPENBSD_5_3:1.33.0.2
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.30.0.2
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.6
	OPENBSD_5_0:1.29.0.4
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.27.0.18
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.14
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.16
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.12
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.10
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.8
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.6
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.4
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.2
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.26.0.8
	OPENBSD_3_9_BASE:1.26
	OPENBSD_3_8:1.26.0.6
	OPENBSD_3_8_BASE:1.26
	OPENBSD_3_7:1.26.0.4
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.26.0.2
	OPENBSD_3_6_BASE:1.26
	OPENBSD_3_5:1.24.0.4
	OPENBSD_3_5_BASE:1.24
	OPENBSD_3_4:1.24.0.2
	OPENBSD_3_4_BASE:1.24
	OPENBSD_3_3:1.22.0.4
	OPENBSD_3_3_BASE:1.22
	OPENBSD_3_2:1.22.0.2
	OPENBSD_3_2_BASE:1.22
	OPENBSD_3_1:1.20.0.2
	OPENBSD_3_1_BASE:1.20
	OPENBSD_3_0:1.18.0.2
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.34
date	2013.06.03.21.07.02;	author tedu;	state Exp;
branches;
next	1.33;

1.33
date	2012.12.05.23.20.06;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2012.09.09.18.08.21;	author matthew;	state Exp;
branches;
next	1.31;

1.31
date	2012.09.06.19.41.59;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2012.07.09.14.26.40;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2010.12.17.19.35.34;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2010.11.15.15.07.40;	author jsing;	state Exp;
branches;
next	1.27;

1.27
date	2006.06.14.02.14.25;	author krw;	state Exp;
branches;
next	1.26;

1.26
date	2004.07.13.21.09.48;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2004.04.20.23.20.07;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.02.20.18.42;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2003.05.15.01.26.26;	author ian;	state Exp;
branches;
next	1.22;

1.22
date	2002.06.21.16.37.11;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2002.06.09.22.18.43;	author fgsch;	state Exp;
branches;
next	1.20;

1.20
date	2002.02.17.19.42.26;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.02.16.21.27.29;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.29.17.45.36;	author jakob;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.29.11.07.01;	author matthieu;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.28.20.32.19;	author jakob;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.16.18.24.32;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.12.22.00.34;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.10.02.44.42;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.26.01.27.19;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.26.01.25.33;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.30.18.44.44;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	99.07.20.16.38.57;	author jakob;	state Exp;
branches;
next	1.8;

1.8
date	98.06.08.20.28.28;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	97.11.09.00.29.14;	author bri;	state Exp;
branches;
next	1.6;

1.6
date	97.06.17.10.10.43;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.02.16.19.59.23;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	96.12.23.07.43.42;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.12.03.01.05.36;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.07.31.17.44.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.06.17.07.46.05;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Add bcrypt_pbkdf, a password based key derivation function using bcrypt.
Technically, it's a slight variant of bcrypt better suited for use as a
pluggable hash with PKCS #5 PBKDF2.
ok djm
(also tweak pkcs5_pbkdf2() prototype to have consistent types.)
@
text
@/*	$OpenBSD: util.h,v 1.33 2012/12/05 23:20:06 deraadt Exp $	*/
/*	$NetBSD: util.h,v 1.2 1996/05/16 07:00:22 thorpej Exp $	*/

/*-
 * Copyright (c) 1995
 *	The Regents of the University of California.  All rights reserved.
 * Portions Copyright (c) 1996, Jason Downs.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _UTIL_H_
#define _UTIL_H_

#include <sys/types.h>

/*
 * fparseln() specific operation flags.
 */
#define FPARSELN_UNESCESC	0x01
#define FPARSELN_UNESCCONT	0x02
#define FPARSELN_UNESCCOMM	0x04
#define FPARSELN_UNESCREST	0x08
#define FPARSELN_UNESCALL	0x0f

/*
 * opendev() specific operation flags.
 */
#define OPENDEV_PART	0x01		/* Try to open the raw partition. */
#define OPENDEV_BLCK	0x04		/* Open block, not character device. */

/*
 * uucplock(3) specific flags.
 */
#define UU_LOCK_INUSE (1)
#define UU_LOCK_OK (0)
#define UU_LOCK_OPEN_ERR (-1)
#define UU_LOCK_READ_ERR (-2)
#define UU_LOCK_CREAT_ERR (-3)
#define UU_LOCK_WRITE_ERR (-4)
#define UU_LOCK_LINK_ERR (-5)
#define UU_LOCK_TRY_ERR (-6)
#define UU_LOCK_OWNER_ERR (-7)

/*
 * fmt_scaled(3) specific flags.
 */
#define	FMT_SCALED_STRSIZE	7	/* minus sign, 4 digits, suffix, null byte */

/*
 * stub struct definitions.
 */
struct __sFILE;
struct login_cap;
struct passwd;
struct termios;
struct utmp;
struct winsize;

__BEGIN_DECLS
char   *fparseln(struct __sFILE *, size_t *, size_t *, const char[3], int);
void	login(struct utmp *);
int	login_tty(int);
int	logout(const char *);
void	logwtmp(const char *, const char *, const char *);
int	opendev(const char *, int, int, char **);
int	pidfile(const char *);
void	pw_setdir(const char *);
char   *pw_file(const char *);
int	pw_lock(int);
int	pw_mkdb(char *, int);
int	pw_abort(void);
void	pw_init(void);
void	pw_edit(int, const char *);
void	pw_prompt(void);
void	pw_copy(int, int, const struct passwd *, const struct passwd *);
int	pw_scan(char *, struct passwd *, int *);
void	pw_error(const char *, int, int);
int	openpty(int *, int *, char *, struct termios *, struct winsize *);
int	opendisk(const char *, int, char *, size_t, int);
pid_t	forkpty(int *, char *, struct termios *, struct winsize *);
int	getmaxpartitions(void);
int	getrawpartition(void);
void	login_fbtab(const char *, uid_t, gid_t);
int	login_check_expire(struct __sFILE *, struct passwd *, char *, int);
char   *readlabelfs(char *, int);
const char *uu_lockerr(int);
int     uu_lock(const char *);
int	uu_lock_txfr(const char *, pid_t);
int     uu_unlock(const char *);
int	fmt_scaled(long long, char *);
int	scan_scaled(char *, long long *);
int	isduid(const char *, int);
int	pkcs5_pbkdf2(const char *, size_t, const uint8_t *, size_t,
    uint8_t *, size_t, unsigned int);
int	bcrypt_pbkdf(const char *, size_t, const uint8_t *, size_t,
    uint8_t *, size_t, unsigned int);

__END_DECLS

#endif /* !_UTIL_H_ */
@


1.33
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.32 2012/09/09 18:08:21 matthew Exp $	*/
d116 4
a119 2
int	pkcs5_pbkdf2(const char *, size_t, const char *, size_t,
    u_int8_t *, size_t, unsigned int);
@


1.32
log
@Use "unsigned int" instead of BSD "u_int" in <util.h> so that it can
be included in source files that specify POSIX source.  libutil isn't
a standard POSIX library, but no need to be gratuitously incompatible.
Fixes x11/st.

ok tedu, guenther, kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.31 2012/09/06 19:41:59 tedu Exp $	*/
a36 1
#include <sys/cdefs.h>
@


1.31
log
@move pkcs5_pbkdf5 function to libutil so everybody can play with it
ok deraadt jsing matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.30 2012/07/09 14:26:40 nicm Exp $	*/
d118 1
a118 1
    u_int8_t *, size_t, u_int);
@


1.30
log
@ANSIfy forkpty, add missing $OpenBSD$ in duid.c, style (no arg names) in
util.h.

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.29 2010/12/17 19:35:34 millert Exp $	*/
d117 3
@


1.29
log
@opendev() path argument should be const.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.28 2010/11/15 15:07:40 jsing Exp $	*/
d93 1
a93 1
int	pw_lock(int retries);
d103 1
a103 2
int	opendisk(const char *path, int flags, char *buf, size_t buflen,
	    int iscooked);
d110 6
a115 6
const char *uu_lockerr(int _uu_lockresult);
int     uu_lock(const char *_ttyname);
int	uu_lock_txfr(const char *_ttyname, pid_t _pid);
int     uu_unlock(const char *_ttyname);
int	fmt_scaled(long long number, char *result);
int	scan_scaled(char *scaled, long long *result);
@


1.28
log
@Factor out DUID identification code so that it can easily be reused.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.26 2004/07/13 21:09:48 millert Exp $	*/
d89 1
a89 1
int	opendev(char *, int, int, char **);
@


1.27
log
@Nuke only two uses of OPENDEV_DRCT in tree. Nuke OPENDEV_DRCT. Long
marked obsolete since the opendev() behaviour it turned on is now the
default.

'it can go' deraadt@@

'no API of mine has ever made it into a standard' downsj@@
@
text
@d117 1
@


1.26
log
@passwd.conf has been deprecated since login.conf was imported.
Today it finally dies.  Based on a diff from Gabriel Kihlman.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.25 2004/04/20 23:20:07 millert Exp $	*/
a52 1
#define OPENDEV_DRCT	0x02		/* Obsolete (now default behavior). */
@


1.25
log
@Change pw_copy(3) to take a 3rd arguement, the existing passwd entry.
This allows an application to only update a password entry if it is
in the state it expects.  Additionally, if the old passwd struct
is specified the new one may have a different pw_name field since
matching is done on the original.  Adapted from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.24 2003/06/02 20:18:42 millert Exp $	*/
a100 1
void	pw_getconf(char *, size_t, const char *, const char *);
@


1.24
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.23 2003/05/15 01:26:26 ian Exp $	*/
d100 1
a100 1
void	pw_copy(int, int, struct passwd *);
@


1.23
log
@New: fmt_scaled() and scan_scaled() convert to and from "human readable"
or scaled numbers. fmt_scaled, and the format, based on Ken Stailey's
code for "df -h"; scan_scaled is new. Significantly commented on
and reworked by pjanzen@@; other comments from millert@@.  OK pjanzen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.22 2002/06/21 16:37:11 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.22
log
@login_fbtab(3) fixes:
o make first arg const since we don't modify it
o use strsep() instead of strtok() as strtok() changes internal state
o add some bounds checking and use strlcat() instead of pointer arithmetic
o ANSI function headers
Originally based on a patch from Lars J. Buitinck but much modified.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.21 2002/06/09 22:18:43 fgsch Exp $	*/
d74 5
d121 2
@


1.21
log
@some -Wall and spaces cleanup, scsi.c left.
some brave soul should look at it.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.20 2002/02/17 19:42:26 millert Exp $	*/
d103 1
a103 2
int	openpty(int *, int *, char *, struct termios *,
	    struct winsize *);
d109 1
a109 1
void	login_fbtab(char *, uid_t, gid_t);
@


1.20
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.19 2002/02/16 21:27:29 millert Exp $	*/
d114 1
a114 1
int     uu_lock(const char *_ttyname); 
@


1.19
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.18 2001/09/29 17:45:36 jakob Exp $	*/
d103 4
a106 4
int	openpty __P((int *, int *, char *, struct termios *,
	    struct winsize *));
int	opendisk __P((const char *path, int flags, char *buf, size_t buflen,
	    int iscooked));
@


1.18
log
@re-enable pidfile(3). ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.16 2001/09/28 20:32:19 jakob Exp $	*/
d84 19
a102 19
char   *fparseln __P((struct __sFILE *, size_t *, size_t *, const char[3], int));
void	login __P((struct utmp *));
int	login_tty __P((int));
int	logout __P((const char *));
void	logwtmp __P((const char *, const char *, const char *));
int	opendev __P((char *, int, int, char **));
int	pidfile __P((const char *));
void	pw_setdir __P((const char *));
char   *pw_file __P((const char *));
int	pw_lock __P((int retries));
int	pw_mkdb __P((char *, int));
int	pw_abort __P((void));
void	pw_init __P((void));
void	pw_edit __P((int, const char *));
void	pw_prompt __P((void));
void	pw_copy __P((int, int, struct passwd *));
void	pw_getconf __P((char *, size_t, const char *, const char *));
int	pw_scan __P((char *, struct passwd *, int *));
void	pw_error __P((const char *, int, int));
d107 10
a116 10
pid_t	forkpty __P((int *, char *, struct termios *, struct winsize *));
int	getmaxpartitions __P((void));
int	getrawpartition __P((void));
void	login_fbtab __P((char *, uid_t, gid_t));
int	login_check_expire __P((struct __sFILE *, struct passwd *, char *, int));
char   *readlabelfs __P((char *, int));
const char *uu_lockerr __P((int _uu_lockresult));
int     uu_lock __P((const char *_ttyname)); 
int	uu_lock_txfr __P((const char *_ttyname, pid_t _pid));
int     uu_unlock __P((const char *_ttyname));
@


1.17
log
@zap pidfile from here too, until conflict with kerberosV is fixed ok deraadt@@
@
text
@d90 1
@


1.16
log
@add pidfile(3) prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.15 2001/08/16 18:24:32 millert Exp $	*/
a89 1
int	pidfile __P((const char *));
@


1.15
log
@Add new 'secureonly' arg to pw_mkdb() to correspond to pwd_mkdb's new -s
flag and crank the library major due to the interface change.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.14 2001/08/12 22:00:34 millert Exp $	*/
d90 1
@


1.14
log
@Get rid of extraneous #includes by using stub struct declarations.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.13 2001/06/10 02:44:42 deraadt Exp $	*/
d93 1
a93 1
int	pw_mkdb __P((char *));
@


1.13
log
@proto; S@@mSmith.net
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.12 2000/11/26 01:27:19 millert Exp $	*/
d41 1
a41 5
#include <stdio.h>
#include <pwd.h>
#include <utmp.h>
#include <termios.h>
#include <sys/ttycom.h>
a42 1
#include <sys/cdefs.h>
d60 23
d84 1
a84 1
char   *fparseln __P((FILE *, size_t *, size_t *, const char[3], int));
d110 1
a110 1
int	login_check_expire __P((FILE *, struct passwd *, char *, int));
a116 10

#define UU_LOCK_INUSE (1)
#define UU_LOCK_OK (0)
#define UU_LOCK_OPEN_ERR (-1)
#define UU_LOCK_READ_ERR (-2)
#define UU_LOCK_CREAT_ERR (-3)
#define UU_LOCK_WRITE_ERR (-4)
#define UU_LOCK_LINK_ERR (-5)
#define UU_LOCK_TRY_ERR (-6)
#define UU_LOCK_OWNER_ERR (-7)
@


1.12
log
@login_check_expire(3), a helper function for use with BSD authentication.
This lives in libutil because it uses pw_lock(3) and friends.  Needs
a man page (soon!).
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.11 2000/11/26 01:25:33 millert Exp $	*/
d85 3
a87 1
		     struct winsize *));
@


1.11
log
@Add a username argument to pw_mkdb to match 'pwd_mkdb -u username'.
Crank the shlib major number due to the interface change.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.10 2000/04/30 18:44:44 millert Exp $	*/
d90 1
@


1.10
log
@Add OPENDEV_BLCK
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.9 1999/07/20 16:38:57 jakob Exp $	*/
d75 1
a75 1
int	pw_mkdb __P((void));
@


1.9
log
@Added fparseln from NetBSD.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.8 1998/06/08 20:28:28 brian Exp $	*/
d62 2
a63 1
#define OPENDEV_DRCT	0x02		/* Try to open the device directly. */
@


1.8
log
@Add uu_lock_txfr() for donating locks to another process.
Reviewed by: Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.7 1997/11/09 00:29:14 bri Exp $	*/
d41 1
d50 9
d65 1
@


1.7
log
@Introduce uu_lock(), uu_unlock() and uu_lockerr()
into libutil.
Obtained from: FreeBSD
Reviewed by: Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.6 1997/06/17 10:10:43 niklas Exp $	*/
d81 1
d93 1
@


1.6
log
@Add support to handle password files in directories other than /etc
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.5 1997/02/16 19:59:23 provos Exp $	*/
d79 3
d83 9
@


1.5
log
@added password configuration access function, used to determine
password cipher type at the moment
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.4 1996/12/23 07:43:42 downsj Exp $	*/
d60 2
@


1.4
log
@readlabelfs() takes two arguments now, update prototype, inc major number.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.3 1996/12/03 01:05:36 downsj Exp $	*/
d67 1
@


1.3
log
@Add readlabelfs().
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.2 1996/07/31 17:44:22 deraadt Exp $	*/
d75 1
a75 1
char   *readlabelfs __P((char *));
@


1.2
log
@login_fbtab() in libutil
@
text
@d1 1
a1 1
/*	$OpenBSD: util.h,v 1.1 1996/06/17 07:46:05 downsj Exp $	*/
d64 1
a64 1
void	pw_edit __P((int notsetuid, const char *filename));
d66 3
a68 3
void	pw_copy __P((int ffd, int tfd, struct passwd *pw));
int	pw_scan __P((char *bp, struct passwd *pw, int *flags));
void	pw_error __P((const char *name, int err, int eval));
d74 2
a75 1
void	login_fbtab __P((char *tty, uid_t uid, gid_t gid));
@


1.1
log
@util.h: new resting place
opendev.h: ok, so I merged it with util.h
opendev.h: use util.h
everything else: use "util.h"
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d74 1
@
