head	1.14;
access;
symbols
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.16
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.12
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.16
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.12
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.10
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.14
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.12
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.10
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.14
date	2016.08.30.14.44.45;	author guenther;	state Exp;
branches;
next	1.13;
commitid	mK1myQm2bRfAlqwG;

1.13
date	2015.01.16.16.48.52;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	0DYulI8hhujBHMcR;

1.12
date	2014.06.30.00.25.37;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	bi6IAFP6BlvyhFdz;

1.11
date	2010.11.15.15.11.31;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.02.12.01.40;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.18.19.24.14;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.28.07.03.47;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.21.16.22.23;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.21.07.32.55;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.16.18.34.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.11.18.19.57.29;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.23.07.43.42;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.12.04.21.25.33;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.12.03.01.05.35;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Use O_CLOEXEC when opening fds local to a function

ok jca@@ krw@@
@
text
@/*	$OpenBSD: readlabel.c,v 1.13 2015/01/16 16:48:52 deraadt Exp $	*/

/*
 * Copyright (c) 1996, Jason Downs.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/disk.h>
#include <sys/dkio.h>
#define DKTYPENAMES
#include <sys/disklabel.h>
#include <sys/ioctl.h>
#include <sys/stat.h>
#include <stdio.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <fcntl.h>
#include <paths.h>
#include <string.h>
#include <unistd.h>

#include "util.h"

/*
 * Try to get a disklabel for the specified device, and return mount_xxx
 * style filesystem type name for the specified partition.
 */
char *
readlabelfs(char *device, int verbose)
{
	char rpath[PATH_MAX];
	struct dk_diskmap dm;
	struct disklabel dk;
	char part, *type;
	struct stat sbuf;
	int fd = -1;

	/* Perform disk mapping if device is given as a DUID. */
	if (isduid(device, 0)) {
		if ((fd = open("/dev/diskmap", O_RDONLY|O_CLOEXEC)) != -1) {
			bzero(&dm, sizeof(struct dk_diskmap));
			strlcpy(rpath, device, sizeof(rpath));
			part = rpath[strlen(rpath) - 1];
			dm.device = rpath;
			dm.fd = fd;
			dm.flags = DM_OPENPART;
			if (ioctl(fd, DIOCMAP, &dm) == -1)
				close(fd);
			else
				goto disklabel;
		}
	}

	/* Assuming device is of the form /dev/??p, build a raw partition. */
	if (stat(device, &sbuf) < 0) {
		if (verbose)
			warn("%s", device);
		return (NULL);
	}
	switch (sbuf.st_mode & S_IFMT) {
	case S_IFCHR:
		/* Ok... already a raw device.  Hmm. */
		strlcpy(rpath, device, sizeof(rpath));

		/* Change partition name. */
		part = rpath[strlen(rpath) - 1];
		rpath[strlen(rpath) - 1] = 'a' + getrawpartition();
		break;
	case S_IFBLK:
		if (strlen(device) > sizeof(_PATH_DEV) - 1) {
			snprintf(rpath, sizeof(rpath), "%sr%s", _PATH_DEV,
			    &device[sizeof(_PATH_DEV) - 1]);
			/* Change partition name. */
			part = rpath[strlen(rpath) - 1];
			rpath[strlen(rpath) - 1] = 'a' + getrawpartition();
			break;
		}
		/* FALLTHROUGH */
	default:
		if (verbose)
			warnx("%s: not a device node", device);
		return (NULL);
	}

	/* If rpath doesn't exist, change that partition back. */
	fd = open(rpath, O_RDONLY|O_CLOEXEC);
	if (fd < 0) {
		if (errno == ENOENT) {
			rpath[strlen(rpath) - 1] = part;

			fd = open(rpath, O_RDONLY|O_CLOEXEC);
			if (fd < 0) {
				if (verbose)
					warn("%s", rpath);
				return (NULL);
			}
		} else {
			if (verbose)
				warn("%s", rpath);
			return (NULL);
		}
	}

disklabel:

	if (ioctl(fd, DIOCGDINFO, &dk) < 0) {
		if (verbose)
			warn("%s: couldn't read disklabel", rpath);
		close(fd);
		return (NULL);
	}
	close(fd);

	if (dk.d_partitions[part - 'a'].p_fstype >= FSMAXTYPES) {
		if (verbose)
			warnx("%s: bad filesystem type in label", rpath);
		return (NULL);
	}

	type = fstypesnames[dk.d_partitions[part - 'a'].p_fstype];
	return ((type[0] == '\0') ? NULL : type);
}
@


1.13
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.12 2014/06/30 00:25:37 deraadt Exp $	*/
d62 1
a62 1
		if ((fd = open("/dev/diskmap", O_RDONLY)) != -1) {
d108 1
a108 1
	fd = open(rpath, O_RDONLY);
d113 1
a113 1
			fd = open(rpath, O_RDONLY);
@


1.12
log
@sort includes much more sensibly
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.11 2010/11/15 15:11:31 jsing Exp $	*/
d28 1
a28 1
#include <sys/param.h>
d38 1
d53 1
a53 1
	char rpath[MAXPATHLEN];
@


1.11
log
@Teach readlabelfs() how to handle DUIDs.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.9 2004/09/18 19:24:14 deraadt Exp $	*/
d28 7
a34 1
#include <sys/types.h>
a41 7
#include <sys/disk.h>
#include <sys/dkio.h>
#define DKTYPENAMES
#include <sys/disklabel.h>
#include <sys/ioctl.h>
#include <sys/param.h>
#include <sys/stat.h>
@


1.10
log
@Fix off by one comparison. FSMAXTYPES is the last valid index into
fstypesnames[], but that entry is NULL. The last valid file system
name is at fstypesnames[FSMAXTYPES-1].

Encountered and diagnosed by pedro@@.

ok pedro@@ deraadt@@
@
text
@d36 1
d54 1
d58 17
a74 1
	int fd;
d85 1
a85 2
		strncpy(rpath, device, sizeof(rpath));
		rpath[sizeof(rpath) - 1] = '\0';
d125 3
@


1.9
log
@label a switch fallthrough
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.8 2004/05/28 07:03:47 deraadt Exp $	*/
d116 1
a116 1
	if (dk.d_partitions[part - 'a'].p_fstype > FSMAXTYPES) {
@


1.8
log
@knf; otto ok
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.7 2002/02/21 16:22:23 deraadt Exp $	*/
d83 1
@


1.7
log
@fgsch, if you commit without test compiling ONE MORE TIME, I will send a castration team down to argentina
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.6 2002/02/21 07:32:55 fgsch Exp $	*/
d49 2
a50 4

char *readlabelfs(device, verbose)
	char *device;
	int verbose;
d53 1
a55 1
	struct disklabel dk;
d62 1
a62 1
		return(NULL);
d64 1
a64 1
	switch(sbuf.st_mode & S_IFMT) {
a77 1

d86 1
a86 1
		return(NULL);
d99 1
a99 1
				return(NULL);
d102 3
a104 3
				if (verbose)
					warn("%s", rpath);
				return(NULL);
d111 1
a111 1
		return(NULL);
d118 1
a118 1
		return(NULL);
d122 1
a122 1
	return((type[0] == '\0') ? NULL : type);
@


1.6
log
@use sizeof w/ defines; niklas@@ millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.5 2001/08/16 18:34:40 millert Exp $	*/
d77 1
a77 1
		if (strlen(device) > sizeo(_PATH_DEV) - 1) {
@


1.5
log
@consistently use #include "util.h" not <util.h> since util.h lives in this dir.
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.4 1997/11/18 19:57:29 millert Exp $	*/
d77 1
a77 1
		if (strlen(device) > strlen(_PATH_DEV)) {
d79 1
a79 1
			    &device[strlen(_PATH_DEV)]);
@


1.4
log
@-Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.3 1996/12/23 07:43:42 downsj Exp $	*/
a35 1
#include <util.h>
d42 2
@


1.3
log
@readlabelfs() takes two arguments now, update prototype, inc major number.
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.2 1996/12/04 21:25:33 downsj Exp $	*/
d35 1
d40 1
@


1.2
log
@sanitize return value.  NULL on failure, always.
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.1 1996/12/03 01:05:35 downsj Exp $	*/
d47 1
a47 1
char *readlabelfs(device)
d49 1
d59 2
a60 1
		warn("%s", device);
d84 2
a85 1
		warnx("%s: not a device node", device);
d97 2
a98 1
				warn("%s", rpath);
d102 2
a103 1
				warn("%s", rpath);
d108 2
a109 1
		warn("%s: couldn't read disklabel", rpath);
d116 2
a117 1
		warnx("%s: bad filesystem type in label", rpath);
@


1.1
log
@Add readlabelfs().
@
text
@d1 1
a1 1
/*	$OpenBSD: readlabel.c,v 1.1 1996/11/12 08:46:13 downsj Exp $	*/
d51 1
a51 1
	char part;
d114 2
a115 1
	return(fstypesnames[dk.d_partitions[part - 'a'].p_fstype]);
@
