head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.8
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.36
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.34
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.32
	OPENBSD_5_0:1.8.0.30
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.28
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.26
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.22
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.24
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.20
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.18
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.16
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.14
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.12
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.10
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.11.26.23.32.52;	author millert;	state Exp;
branches;
next	1.11;
commitid	JttiHkI7VbBnTG9W;

1.11
date	2015.03.15.00.41.27;	author millert;	state Exp;
branches;
next	1.10;
commitid	IbVxlqGw2UipKdDr;

1.10
date	2014.08.25.07.50.25;	author doug;	state Exp;
branches;
next	1.9;
commitid	vcwz0sp1JH7QzUmA;

1.9
date	2013.04.29.00.19.19;	author okan;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.20.23.21.23;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.02.16.55.32;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.09.22.18.43;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.19.19.06.05;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.29;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.16.18.39.20;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.16.18.34.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.26.01.27.19;	author millert;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Use the backchannel for all error messages instead of syslog(3).
OK deraadt@@ beck@@
@
text
@/*	$OpenBSD: check_expire.c,v 1.11 2015/03/15 00:41:27 millert Exp $	*/

/*
 * Copyright (c) 1997 Berkeley Software Design, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Berkeley Software Design,
 *	Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI $From: check_expire.c,v 2.1 1997/08/08 18:38:25 prb Exp $
 */

#include <sys/types.h>

#include <errno.h>
#include <fcntl.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <login_cap.h>
#include <bsd_auth.h>

#include "util.h"

static char *pwd_update(const struct passwd *, const struct passwd *);

#define SECSPERDAY	(24 * 60 * 60)
#define TWOWEEKS	(2 * 7 * SECSPERDAY)

int
login_check_expire(FILE *back, struct passwd *pwd, char *class, int lastchance)
{
	auth_session_t *as;
	login_cap_t *lc;
	quad_t dead, expire, warn;
	char *p;

	if ((as = auth_open()) == NULL) {
		fprintf(back, BI_VALUE
		    " errormsg Unable to create auth session\n");
		fprintf(back, BI_REJECT "\n");
		return (1);
	}
	if (auth_setpwd(as, pwd) < 0) {
		fprintf(back, BI_VALUE
		    " errormsg Unable to set pwd entry in auth session\n");
		fprintf(back, BI_REJECT "\n");
		return (1);
	}

	expire = auth_check_change(as);
	auth_close(as);

	if (expire != 0) {
		fprintf(back, BI_VALUE " expire %qd\n", expire);

		if (class == NULL)
			class = pwd->pw_class;

		if ((lc = login_getclass(class)) == NULL) {
			dead = 0;
			warn = 0;
		} else {
			dead = login_getcaptime(lc, "password-dead", 0, 0);
			warn = login_getcaptime(lc, "password-warn",
			    TWOWEEKS, TWOWEEKS);
			if (dead < 0)
				dead = 0;
			if (warn < 0)
				warn = 0;
		}
		login_close(lc);

		/*
		 * If their password is dead (expired longer than
		 * password-dead) then just reject them.  If it is
		 * expired but not dead yet, reject them with a
		 * PWEXPIRED so login knows they can still sort of
		 * get in.
		 */
		if (expire < -dead) {
			fprintf(back, BI_VALUE
			    " errormsg Your password has expired\n");
			fprintf(back, BI_REJECT "\n");
			return (1);
		}
		if (expire < 0) {
			if (lastchance) {
				struct passwd *npwd;

				endpwent();

				/*
				 * Only let them play this game once.
				 * Set their password change time to 1.
				 * This will most certainly cause any
				 * expired password to be dead, as well.
				 */
				npwd = pw_dup(pwd);
				npwd->pw_change = 1;
				p = pwd_update(npwd, pwd);
				explicit_bzero(npwd->pw_passwd,
				    strlen(npwd->pw_passwd));
				free(npwd);
				if (p != NULL) {
					char *errval = auth_mkvalue(p);
					if (errval != NULL) {
						fprintf(back, BI_VALUE
						    " errormsg %s", errval);
						free(errval);
					}
					fprintf(back, BI_REJECT "\n");
					return (1);
				}
			}
			fprintf(back, BI_VALUE
			    " errormsg Your password has expired\n");
			fprintf(back, BI_PWEXPIRED "\n");
			return (1);
		}

		/*
		 * If their password is not expired but is about to expire
		 * then warn them.
		 */
		if (expire <= warn) {
			fprintf(back, BI_VALUE
			    " warnmsg Your password expires on %s\n",
			    ctime(&pwd->pw_change));
		}
	}
	return (0);
}

static char *
pwd_update(const struct passwd *pwd, const struct passwd *opwd)
{
	int tfd, pfd;

	pw_init();
	tfd = pw_lock(0);
	if (tfd < 0) {
		if (errno == EEXIST)
			return("the passwd file is busy.");
		else
			return("can't open passwd temp file");
	}

	pfd = open(_PATH_MASTERPASSWD, O_RDONLY|O_CLOEXEC, 0);
	if (pfd < 0) {
		pw_abort();
		return(strerror(errno));
	}

	pw_copy(pfd, tfd, pwd, opwd);
	if (pw_mkdb(pwd->pw_name, 0) < 0) {
		pw_abort();
		return("unable to update password database");
	}

	return(NULL);
}
@


1.11
log
@tzfile.h is an internal header that should never have been installed.
What's worse, the tzfile.h that gets installed is over 20 years old
and doesn't match the real tzfile.h in libc/time.  This makes the
tree safe for /usr/include/tzfile.h removal.  The TM_YEAR_BASE
define has been moved to time.h temporarily until its usage is
replaced by 1900 in the tree.  Actual removal of tzfile.h is pending
a ports build.  Based on a diff from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.10 2014/08/25 07:50:25 doug Exp $	*/
a45 1
#include <syslog.h>
d66 3
a68 1
		syslog(LOG_ERR, "failed to create auth session");
d72 3
a74 1
		syslog(LOG_ERR, "failed to set pwd entry in auth session");
d94 1
a94 3
			if (dead < 0) {
				syslog(LOG_ERR, "class %s password-dead is %qd",
					lc->lc_class, dead);
d96 1
a96 4
			}
			if (warn < 0) {
				syslog(LOG_ERR, "class %s password-warn is %qd",
					lc->lc_class, warn);
a97 1
			}
a108 1
			syslog(LOG_WARNING, "%s: dead password", pwd->pw_name);
d133 6
a138 2
					fprintf(back, BI_VALUE " errormsg %s",
					    auth_mkvalue(p));
a142 1
			syslog(LOG_WARNING, "%s: expired password", pwd->pw_name);
@


1.10
log
@Delete secret or secret-derived data with explicit_bzero.

concept ok deraadt@@
diff looks ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.9 2013/04/29 00:19:19 okan Exp $	*/
a47 1
#include <tzfile.h>
d55 3
d90 1
a90 2
			    2 * DAYSPERWEEK * SECSPERDAY,
			    2 * DAYSPERWEEK * SECSPERDAY);
@


1.9
log
@use O_CLOEXEC with open() instead of open/fcntl; from David Hill

ok otto
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.8 2004/04/20 23:21:23 millert Exp $	*/
d132 1
a132 1
				memset(npwd->pw_passwd, 0,
@


1.8
log
@Adapt to new pw_copy() API, closes PR 3698.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.7 2003/09/02 16:55:32 markus Exp $	*/
d176 2
a177 2
	pfd = open(_PATH_MASTERPASSWD, O_RDONLY, 0);
	if (pfd < 0 || fcntl(pfd, F_SETFD, 1) == -1) {
@


1.7
log
@fix use-after-free for expired passwds; ok deraadt, tdeval
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.6 2002/06/09 22:18:43 fgsch Exp $	*/
d54 1
a54 1
static char *pwd_update(struct passwd *);
d57 1
a57 5
login_check_expire(back, pwd, class, lastchance)
	FILE *back;
	struct passwd *pwd;
	char *class;
	int lastchance;
d131 1
a131 1
				p = pwd_update(npwd);
d163 1
a163 2
pwd_update(pwd)
	struct passwd *pwd;
d182 1
a182 1
	pw_copy(pfd, tfd, pwd);
@


1.6
log
@some -Wall and spaces cleanup, scsi.c left.
some brave soul should look at it.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.5 2002/02/19 19:06:05 mpech Exp $	*/
d123 2
d133 6
a138 6
				pwd = pw_dup(pwd);
				pwd->pw_change = 1;
				p = pwd_update(pwd);
				memset(pwd->pw_passwd, 0,
				    strlen(pwd->pw_passwd));
				free(pwd);
@


1.5
log
@login_close() should avoid memory leak.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.4 2002/02/16 21:27:29 millert Exp $	*/
d91 1
a91 1
			warn = login_getcaptime(lc, "password-warn", 
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.3 2001/08/16 18:39:20 millert Exp $	*/
d105 1
@


1.3
log
@2nd arg to pw_mkdb()
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.2 2001/08/16 18:34:40 millert Exp $	*/
d54 1
a54 1
static char *pwd_update __P((struct passwd *));
@


1.2
log
@consistently use #include "util.h" not <util.h> since util.h lives in this dir.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_expire.c,v 1.1 2000/11/26 01:27:19 millert Exp $	*/
d185 1
a185 1
	if (pw_mkdb(pwd->pw_name) < 0) {
@


1.1
log
@login_check_expire(3), a helper function for use with BSD authentication.
This lives in libutil because it uses pw_lock(3) and friends.  Needs
a man page (soon!).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a48 2
#include <util.h>

d51 2
@

