head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.6
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.22
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.20
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.18
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	OPENBSD_5_0:1.8.0.14
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.11.27.01.57.59;	author mmcc;	state Exp;
branches;
next	1.11;
commitid	J3iMlBAQfZQZG24h;

1.11
date	2015.06.03.02.24.36;	author millert;	state Exp;
branches;
next	1.10;
commitid	GouatFiJVxwlAVIQ;

1.10
date	2014.06.30.00.26.22;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	73bnyBlMld7YtdVw;

1.9
date	2013.10.01.16.47.42;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.05.42.05;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.02.21.46.23;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.28.07.03.47;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.26.09.29.02;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.22.01.21.40;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.02.10.22.18;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.08.02.25.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.28.20.16.42;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove three NULL-checks before free().   ok millert@@
@
text
@/*	$OpenBSD: pidfile.c,v 1.11 2015/06/03 02:24:36 millert Exp $	*/
/*	$NetBSD: pidfile.c,v 1.4 2001/02/19 22:43:42 cgd Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <errno.h>
#include <paths.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <util.h>

static char *pidfile_path;
static pid_t pidfile_pid;

static void pidfile_cleanup(void);

extern char *__progname;

int
pidfile(const char *basename)
{
	int save_errno;
	pid_t pid;
	FILE *f;

	if (basename == NULL)
		basename = __progname;

	free(pidfile_path);
	pidfile_path = NULL;

	/* _PATH_VARRUN includes trailing / */
	if (asprintf(&pidfile_path, "%s%s.pid", _PATH_VARRUN, basename) == -1)
		return (-1);

	if ((f = fopen(pidfile_path, "w")) == NULL) {
		save_errno = errno;
		free(pidfile_path);
		pidfile_path = NULL;
		errno = save_errno;
		return (-1);
	}

	pid = getpid();
	if (fprintf(f, "%ld\n", (long)pid) <= 0 || fflush(f) != 0) {
		save_errno = errno;
		(void) fclose(f);
		(void) unlink(pidfile_path);
		free(pidfile_path);
		pidfile_path = NULL;
		errno = save_errno;
		return (-1);
	}
	(void) fclose(f);

	pidfile_pid = pid;
	if (atexit(pidfile_cleanup) < 0) {
		save_errno = errno;
		(void) unlink(pidfile_path);
		free(pidfile_path);
		pidfile_path = NULL;
		pidfile_pid = 0;
		errno = save_errno;
		return (-1);
	}

	return (0);
}

static void
pidfile_cleanup(void)
{

	if (pidfile_path != NULL && pidfile_pid == getpid())
		(void) unlink(pidfile_path);
}
@


1.11
log
@Do not assume that asprintf() clears the pointer on failure, which
is non-portable.  Also add missing asprintf() return value checks.
OK deraadt@@ guenther@@ doug@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.10 2014/06/30 00:26:22 deraadt Exp $	*/
d58 2
a59 4
	if (pidfile_path != NULL) {
		free(pidfile_path);
		pidfile_path = NULL;
	}
@


1.10
log
@sys/types.h rather than sys/param.h, where applicable.  avoid overreach.
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.9 2013/10/01 16:47:42 millert Exp $	*/
d64 1
a64 2
	(void) asprintf(&pidfile_path, "%s%s.pid", _PATH_VARRUN, basename);
	if (pidfile_path == NULL)
@


1.9
log
@Fix FILE * leak in error path if fprintf fails.  Found by and OK gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.8 2008/06/26 05:42:05 ray Exp $	*/
d33 1
a33 1
#include <sys/param.h>
@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.7 2005/08/02 21:46:23 espie Exp $	*/
d77 1
a77 1
	if (fprintf(f, "%ld\n", (long)pid) <= 0 || fclose(f) != 0) {
d79 1
d86 1
@


1.7
log
@scrape $Id$ tags.
okay deraadt@@, millert@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.6 2004/05/28 07:03:47 deraadt Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@knf; otto ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.5 2002/05/26 09:29:02 deraadt Exp $	*/
a38 4

#if defined(LIBC_SCCS) && !defined(lint)
static const char rcsid[] = "$OpenBSD: pidfile.c,v 1.5 2002/05/26 09:29:02 deraadt Exp $";
#endif /* LIBC_SCCS and not lint */
@


1.5
log
@pid_t cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.4 2002/05/22 01:21:40 itojun Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pidfile.c,v 1.4 2002/05/22 01:21:40 itojun Exp $";
a61 1
	FILE *f;
d64 1
@


1.4
log
@atexit(3) can fail.  handle error accordingly.  deraadt ok
XXX libraries should not use atexit(3) from within, as program can terminate
with _exit.
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.3 2002/01/02 10:22:18 mpech Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pidfile.c,v 1.3 2002/01/02 10:22:18 mpech Exp $";
d88 1
a88 1
	if (fprintf(f, "%d\n", pid) <= 0 || fclose(f) != 0) {
@


1.3
log
@pids should be pid_t, not int
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.2 2001/12/08 02:25:06 deraadt Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pidfile.c,v 1.2 2001/12/08 02:25:06 deraadt Exp $";
d98 9
a106 1
	(void) atexit(pidfile_cleanup);
@


1.2
log
@save the pid as well, and only do the atexit in the same pid
@
text
@d1 1
a1 1
/*	$OpenBSD: pidfile.c,v 1.1 2001/09/28 20:16:42 jakob Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: pidfile.c,v 1.1 2001/09/28 20:16:42 jakob Exp $";
d53 1
a53 1
static int pidfile_pid;
@


1.1
log
@add pidfile(3) - write a daemon pid file. ok deraadt@@, millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD$";
d53 1
d64 1
d69 4
a72 4
	if (pidfile_path != NULL) {                                            
		free(pidfile_path);                                            
		pidfile_path = NULL;                                           
	}                                                                      
d77 1
a77 1
		return (-1); 
d87 2
a88 1
	if (fprintf(f, "%d\n", getpid()) <= 0 || fclose(f) != 0) {
d97 1
d107 1
a107 1
	if (pidfile_path != NULL)
@

