head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.6
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.34
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.26
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.30
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.28
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.24
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.22
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.20
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.18
	OPENBSD_5_0:1.14.0.16
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.14
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.12
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.8
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.10
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.6
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.10
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.8
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.6
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.16
date	2015.11.27.01.57.59;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	J3iMlBAQfZQZG24h;

1.15
date	2015.08.20.21.34.04;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	h6K6fNiXSaWhjgK7;

1.14
date	2007.09.09.05.46.17;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.30.20.44.45;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2004.09.18.19.22.42;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.25.17.42.29;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.22.00.18.58;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.21.16.37.11;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.29;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.03.15.32.57;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.09.21.04.52.45;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	98.04.13.15.26.44;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.11.18.19.57.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.16.02.40.50;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.31.17.58.48;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.07.31.17.44.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Remove three NULL-checks before free().   ok millert@@
@
text
@/*	$OpenBSD: login_fbtab.c,v 1.15 2015/08/20 21:34:04 deraadt Exp $	*/

/************************************************************************
* Copyright 1995 by Wietse Venema.  All rights reserved.  Some individual
* files may be covered by other copyrights.
*
* This material was originally written and compiled by Wietse Venema at
* Eindhoven University of Technology, The Netherlands, in 1990, 1991,
* 1992, 1993, 1994 and 1995.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that this entire copyright notice
* is duplicated in all such copies.
*
* This software is provided "as is" and without any expressed or implied
* warranties, including, without limitation, the implied warranties of
* merchantibility and fitness for any particular purpose.
************************************************************************/
/*
    SYNOPSIS
	void login_fbtab(tty, uid, gid)
	char *tty;
	uid_t uid;
	gid_t gid;

    DESCRIPTION
	This module implements device security as described in the
	SunOS 4.1.x fbtab(5) and SunOS 5.x logindevperm(4) manual
	pages. The program first looks for /etc/fbtab. If that file
	cannot be opened it attempts to process /etc/logindevperm.
	We expect entries with the folowing format:

	    Comments start with a # and extend to the end of the line.

	    Blank lines or lines with only a comment are ignored.

	    All other lines consist of three fields delimited by
	    whitespace: a login device (/dev/console), an octal
	    permission number (0600), and a ":"-delimited list of
	    devices (/dev/kbd:/dev/mouse). All device names are
	    absolute paths. A path that ends in "*" refers to all
	    directory entries except "." and "..".

	    If the tty argument (relative path) matches a login device
	    name (absolute path), the permissions of the devices in the
	    ":"-delimited list are set as specified in the second
	    field, and their ownership is changed to that of the uid
	    and gid arguments.

    DIAGNOSTICS
	Problems are reported via the syslog daemon with severity
	LOG_ERR.

    AUTHOR
	Wietse Venema (wietse@@wzv.win.tue.nl)
	Eindhoven University of Technology
	The Netherlands
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <errno.h>
#include <dirent.h>
#include <limits.h>
#include <paths.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>
#include <util.h>

#define _PATH_FBTAB	"/etc/fbtab"

static void login_protect(const char *, mode_t, uid_t, gid_t);

#define	WSPACE		" \t\n"

/*
 * login_fbtab - apply protections specified in /etc/fbtab or logindevperm
 */
void
login_fbtab(const char *tty, uid_t uid, gid_t gid)
{
	FILE	*fp;
	char	*buf, *toklast, *tbuf, *devnam, *cp;
	mode_t	prot;
	size_t	len;

	if ((fp = fopen(_PATH_FBTAB, "r")) == NULL)
		return;

	tbuf = NULL;
	while ((buf = fgetln(fp, &len)) != NULL) {
		if (buf[len - 1] == '\n')
			buf[len - 1] = '\0';
		else {
			if ((tbuf = malloc(len + 1)) == NULL)
				break;
			memcpy(tbuf, buf, len);
			tbuf[len] = '\0';
			buf = tbuf;
		}
		if ((cp = strchr(buf, '#')))
			*cp = '\0';	/* strip comment */
		if (buf[0] == '\0' ||
		    (cp = devnam = strtok_r(buf, WSPACE, &toklast)) == NULL)
			continue;	/* empty or comment */
		if (strncmp(devnam, _PATH_DEV, sizeof(_PATH_DEV) - 1) != 0 ||
		    (cp = strtok_r(NULL, WSPACE, &toklast)) == NULL ||
		    *cp != '0' ||
		    sscanf(cp, "%o", &prot) == 0 ||
		    prot == 0 ||
		    (prot & 0777) != prot ||
		    (cp = strtok_r(NULL, WSPACE, &toklast)) == NULL) {
			syslog(LOG_ERR, "%s: bad entry: %s", _PATH_FBTAB,
			    cp ? cp : "(null)");
			continue;
		}
		if (strcmp(devnam + sizeof(_PATH_DEV) - 1, tty) == 0) {
			for (cp = strtok_r(cp, ":", &toklast); cp != NULL;
			    cp = strtok_r(NULL, ":", &toklast))
				login_protect(cp, prot, uid, gid);
		}
	}
	free(tbuf);
	fclose(fp);
}

/*
 * login_protect - protect one device entry
 */
static void
login_protect(const char *path, mode_t mask, uid_t uid, gid_t gid)
{
	char	buf[PATH_MAX];
	size_t	pathlen = strlen(path);
	DIR	*dir;
	struct	dirent *ent;

	if (pathlen >= sizeof(buf)) {
		errno = ENAMETOOLONG;
		syslog(LOG_ERR, "%s: %s: %m", _PATH_FBTAB, path);
		return;
	}

	if (strcmp("/*", path + pathlen - 2) != 0) {
		if (chmod(path, mask) && errno != ENOENT)
			syslog(LOG_ERR, "%s: chmod(%s): %m", _PATH_FBTAB, path);
		if (chown(path, uid, gid) && errno != ENOENT)
			syslog(LOG_ERR, "%s: chown(%s): %m", _PATH_FBTAB, path);
	} else {
		/*
		 * This is a wildcard directory (/path/to/whatever/ * ).
		 * Make a copy of path without the trailing '*' (but leave
		 * the trailing '/' so we can append directory entries.)
		 */
		memcpy(buf, path, pathlen - 1);
		buf[pathlen - 1] = '\0';
		if ((dir = opendir(buf)) == NULL) {
			syslog(LOG_ERR, "%s: opendir(%s): %m", _PATH_FBTAB,
			    path);
			return;
		}

		while ((ent = readdir(dir)) != NULL) {
			if (strcmp(ent->d_name, ".")  != 0 &&
			    strcmp(ent->d_name, "..") != 0) {
				buf[pathlen - 1] = '\0';
				if (strlcat(buf, ent->d_name, sizeof(buf))
				    >= sizeof(buf)) {
					errno = ENAMETOOLONG;
					syslog(LOG_ERR, "%s: %s: %m",
					    _PATH_FBTAB, path);
				} else
					login_protect(buf, mask, uid, gid);
			}
		}
		closedir(dir);
	}
}
@


1.15
log
@remove cast of malloc(), since stdlib.h is included
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.14 2007/09/09 05:46:17 deraadt Exp $	*/
d127 1
a127 2
	if (tbuf != NULL)
		free(tbuf);
@


1.14
log
@comment inside comment
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.13 2006/03/30 20:44:45 deraadt Exp $	*/
d99 1
a99 1
			if ((tbuf = (char *)malloc(len + 1)) == NULL)
@


1.13
log
@change internal login_protect() API to use mode_t like it should
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.12 2004/09/18 19:22:42 deraadt Exp $	*/
d156 1
a156 1
		 * This is a wildcard directory (/path/to/whatever/*).
@


1.12
log
@avoid aliasing over library symbol
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.11 2002/06/25 17:42:29 millert Exp $	*/
d76 1
a76 1
static void login_protect(const char *, int, uid_t, gid_t);
d88 1
a88 1
	int	prot;
d136 1
a136 1
login_protect(const char *path, int mask, uid_t uid, gid_t gid)
@


1.11
log
@Now that we don't have a trailing newline we need to explicitly check
that the first char in the line is not NUL after killing comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.10 2002/06/22 00:18:58 millert Exp $	*/
d87 1
a87 1
	char	*buf, *toklast, *tbuf, *devname, *cp;
d108 1
a108 1
		    (cp = devname = strtok_r(buf, WSPACE, &toklast)) == NULL)
d110 1
a110 1
		if (strncmp(devname, _PATH_DEV, sizeof(_PATH_DEV) - 1) != 0 ||
d121 1
a121 1
		if (strcmp(devname + sizeof(_PATH_DEV) - 1, tty) == 0) {
@


1.10
log
@Use strtok_r() instead of strsep() since the latter treats consecutive
field separators as empty field.  This is not what we want for
whitespace-delimited fields.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.9 2002/06/21 16:37:11 millert Exp $	*/
d106 3
a108 2
			*cp = 0;	/* strip comment */
		if ((cp = devname = strtok_r(buf, WSPACE, &toklast)) == NULL)
@


1.9
log
@login_fbtab(3) fixes:
o make first arg const since we don't modify it
o use strsep() instead of strtok() as strtok() changes internal state
o add some bounds checking and use strlcat() instead of pointer arithmetic
o ANSI function headers
Originally based on a patch from Lars J. Buitinck but much modified.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.8 2002/02/16 21:27:29 millert Exp $	*/
d68 1
d87 1
a87 1
	char	buf[BUFSIZ], *bufp, *devname, *cp;
d89 1
d94 11
a104 1
	while ((bufp = fgets(buf, sizeof(buf), fp)) != NULL) {
d107 1
a107 1
		if ((devname = strsep(&bufp, WSPACE)) == NULL)
d110 1
a110 1
		    (cp = strsep(&bufp, WSPACE)) == NULL ||
d115 1
a115 1
		    (cp = strsep(&bufp, WSPACE)) == NULL) {
d121 2
a122 2
			bufp = cp;
			while ((cp = strsep(&bufp, ":")) != NULL)
d126 2
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.7 2001/06/03 15:32:57 deraadt Exp $	*/
a53 4
    BUGS
	This module uses strtok(3), which may cause conflicts with other
	uses of that same routine.

d62 5
d68 1
a69 3
#include <string.h>
#include <errno.h>
#include <dirent.h>
d71 1
a71 3
#include <paths.h>

#include "util.h"
d75 1
a75 1
static void login_protect(char *, char *, int, uid_t, gid_t);
d83 1
a83 4
login_fbtab(tty, uid, gid)
	char	*tty;
	uid_t	uid;
	gid_t	gid;
d86 1
a86 1
	char	buf[BUFSIZ], *devname, *cp, *table;
d89 1
a89 1
	if ((fp = fopen(table = _PATH_FBTAB, "r")) == NULL)
d92 1
a92 1
	while (fgets(buf, sizeof(buf), fp)) {
d95 1
a95 1
		if ((cp = devname = strtok(buf, WSPACE)) == 0)
d98 1
a98 1
		    (cp = strtok((char *) 0, WSPACE)) == 0 ||
d103 2
a104 2
		    (cp = strtok((char *) 0, WSPACE)) == 0) {
			syslog(LOG_ERR, "%s: bad entry: %s", table,
d108 5
a112 3
		if (strcmp(devname + sizeof(_PATH_DEV) - 1, tty) == 0)
			for (cp = strtok(cp, ":"); cp; cp = strtok(NULL, ":"))
				login_protect(table, cp, prot, uid, gid);
d121 1
a121 6
login_protect(table, path, mask, uid, gid)
	char	*table;
	char	*path;
	int	mask;
	uid_t	uid;
	gid_t	gid;
d123 3
a125 2
	char	buf[BUFSIZ];
	int	pathlen = strlen(path);
d127 6
a132 1
	DIR	*dir;
d136 1
a136 1
			syslog(LOG_ERR, "%s: chmod(%s): %m", table, path);
d138 1
a138 1
			syslog(LOG_ERR, "%s: chown(%s): %m", table, path);
d140 24
a163 13
		strncpy(buf, path, sizeof buf);
		buf[pathlen - 1] = 0;
		if ((dir = opendir(buf)) == 0) {
			syslog(LOG_ERR, "%s: opendir(%s): %m", table, path);
		} else {
			while ((ent = readdir(dir))) {
				if (strcmp(ent->d_name, ".") &&
				    strcmp(ent->d_name, "..")) {
					strncpy(buf + pathlen - 1, ent->d_name,
					    sizeof(buf) - pathlen - 1);
					login_protect(table, buf, mask,
					    uid, gid);
				}
a164 1
			closedir(dir);
d166 1
@


1.7
log
@new license from Wietse; permits modification.  This code is derived from
logdaemon, so this applies:
    ftp://ftp.porcupine.org/pub/security/logdaemon_license
@
text
@d1 1
a1 1
/*	$OpenBSD: login_fbtab.c,v 1.6 1999/09/21 04:52:45 csapuntz Exp $	*/
d78 1
a78 1
static void login_protect __P((char *, char *, int, uid_t, gid_t));
@


1.6
log
@

Add opendisk from NetBSD.

Add OpenBSD tags to files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 2
a5 1
* Copyright 1995 by Wietse Venema.  All rights reserved.
d11 3
a13 3
* Redistribution and use in source and binary forms are permitted
* provided that this entire copyright notice is duplicated in all such
* copies.
@


1.5
log
@Use _PATH_DEV, not "/dev/"
Make init(8) call login_fbtab() correctly.
@
text
@d1 2
@


1.4
log
@-Wall
@
text
@d69 1
d100 1
a100 1
		if (strncmp(devname, "/dev/", sizeof("/dev/")-1) != 0 ||
d111 1
a111 1
		if (strcmp(devname + 5, tty) == 0)
@


1.3
log
@Bring prototypes into scope
@
text
@d68 1
d95 1
a95 1
		if (cp = strchr(buf, '#'))
@


1.2
log
@duh, theo
@
text
@d62 1
@


1.1
log
@login_fbtab() in libutil
@
text
@d97 1
a97 1
		if (strncmp(devname, "/dev/", sizeof("/dev/")) != 0 ||
@
