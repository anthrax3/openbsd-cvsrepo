head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7;
locks; strict;
comment	@ * @;


1.7
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.6;
commitid	kT0fLt3r4lroFJra;

1.6
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.5;
commitid	vHznCDK3idwNEFz4;

1.5
date	2015.02.14.06.40.04;	author jsing;	state Exp;
branches;
next	1.4;
commitid	hEOPyu1Y58rJ928S;

1.4
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.3;
commitid	5KSZBoxiLebzObKt;

1.3
date	2014.11.13.20.29.55;	author miod;	state Exp;
branches;
next	1.2;
commitid	JkthWrrizfscXDAd;

1.2
date	2014.11.09.23.06.52;	author miod;	state Exp;
branches;
next	1.1;
commitid	OfS6ML3aZNQ79x8d;

1.1
date	2014.11.09.19.17.13;	author miod;	state Exp;
branches;
next	;
commitid	QrgOG8zcUIADOfFd;


desc
@@


1.7
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: gostr341001_key.c,v 1.6 2015/09/10 15:56:25 jsing Exp $ */
/*
 * Copyright (c) 2014 Dmitry Eremin-Solenikov <dbaryshkov@@gmail.com>
 * Copyright (c) 2005-2006 Cryptocom LTD
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <string.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_GOST
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/gost.h>
#include <openssl/objects.h>
#include "gost_locl.h"

struct gost_key_st {
	EC_GROUP *group;

	EC_POINT *pub_key;
	BIGNUM	 *priv_key;

	int	references;

	int digest_nid;
};

GOST_KEY *
GOST_KEY_new(void)
{
	GOST_KEY *ret;

	ret = malloc(sizeof(GOST_KEY));
	if (ret == NULL) {
		GOSTerror(ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	ret->group = NULL;
	ret->pub_key = NULL;
	ret->priv_key = NULL;
	ret->references = 1;
	ret->digest_nid = NID_undef;
	return (ret);
}

void
GOST_KEY_free(GOST_KEY *r)
{
	int i;

	if (r == NULL)
		return;

	i = CRYPTO_add(&r->references, -1, CRYPTO_LOCK_EC);
	if (i > 0)
		return;

	EC_GROUP_free(r->group);
	EC_POINT_free(r->pub_key);
	BN_clear_free(r->priv_key);

	explicit_bzero((void *)r, sizeof(GOST_KEY));
	free(r);
}

int
GOST_KEY_check_key(const GOST_KEY *key)
{
	int ok = 0;
	BN_CTX *ctx = NULL;
	BIGNUM *order = NULL;
	EC_POINT *point = NULL;

	if (key == NULL || key->group == NULL || key->pub_key == NULL) {
		GOSTerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	if (EC_POINT_is_at_infinity(key->group, key->pub_key) != 0) {
		GOSTerror(EC_R_POINT_AT_INFINITY);
		goto err;
	}
	if ((ctx = BN_CTX_new()) == NULL)
		goto err;
	if ((point = EC_POINT_new(key->group)) == NULL)
		goto err;

	/* testing whether the pub_key is on the elliptic curve */
	if (EC_POINT_is_on_curve(key->group, key->pub_key, ctx) == 0) {
		GOSTerror(EC_R_POINT_IS_NOT_ON_CURVE);
		goto err;
	}
	/* testing whether pub_key * order is the point at infinity */
	if ((order = BN_new()) == NULL)
		goto err;
	if (EC_GROUP_get_order(key->group, order, ctx) == 0) {
		GOSTerror(EC_R_INVALID_GROUP_ORDER);
		goto err;
	}
	if (EC_POINT_mul(key->group, point, NULL, key->pub_key, order,
	    ctx) == 0) {
		GOSTerror(ERR_R_EC_LIB);
		goto err;
	}
	if (EC_POINT_is_at_infinity(key->group, point) == 0) {
		GOSTerror(EC_R_WRONG_ORDER);
		goto err;
	}
	/*
	 * in case the priv_key is present : check if generator * priv_key ==
	 * pub_key
	 */
	if (key->priv_key != NULL) {
		if (BN_cmp(key->priv_key, order) >= 0) {
			GOSTerror(EC_R_WRONG_ORDER);
			goto err;
		}
		if (EC_POINT_mul(key->group, point, key->priv_key, NULL, NULL,
		    ctx) == 0) {
			GOSTerror(ERR_R_EC_LIB);
			goto err;
		}
		if (EC_POINT_cmp(key->group, point, key->pub_key, ctx) != 0) {
			GOSTerror(EC_R_INVALID_PRIVATE_KEY);
			goto err;
		}
	}
	ok = 1;
err:
	BN_free(order);
	BN_CTX_free(ctx);
	EC_POINT_free(point);
	return (ok);
}

int
GOST_KEY_set_public_key_affine_coordinates(GOST_KEY *key, BIGNUM *x, BIGNUM *y)
{
	BN_CTX *ctx = NULL;
	BIGNUM *tx, *ty;
	EC_POINT *point = NULL;
	int ok = 0;

	if (key == NULL || key->group == NULL || x == NULL || y == NULL) {
		GOSTerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	ctx = BN_CTX_new();
	if (ctx == NULL)
		goto err;

	point = EC_POINT_new(key->group);
	if (point == NULL)
		goto err;

	if ((tx = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((ty = BN_CTX_get(ctx)) == NULL)
		goto err;
	if (EC_POINT_set_affine_coordinates_GFp(key->group, point, x, y,
	    ctx) == 0)
		goto err;
	if (EC_POINT_get_affine_coordinates_GFp(key->group, point, tx, ty,
	    ctx) == 0)
		goto err;
	/*
	 * Check if retrieved coordinates match originals: if not, values are
	 * out of range.
	 */
	if (BN_cmp(x, tx) != 0 || BN_cmp(y, ty) != 0) {
		GOSTerror(EC_R_COORDINATES_OUT_OF_RANGE);
		goto err;
	}
	if (GOST_KEY_set_public_key(key, point) == 0)
		goto err;

	if (GOST_KEY_check_key(key) == 0)
		goto err;

	ok = 1;

err:
	EC_POINT_free(point);
	BN_CTX_free(ctx);
	return ok;

}

const EC_GROUP *
GOST_KEY_get0_group(const GOST_KEY *key)
{
	return key->group;
}

int
GOST_KEY_set_group(GOST_KEY *key, const EC_GROUP *group)
{
	EC_GROUP_free(key->group);
	key->group = EC_GROUP_dup(group);
	return (key->group == NULL) ? 0 : 1;
}

const BIGNUM *
GOST_KEY_get0_private_key(const GOST_KEY *key)
{
	return key->priv_key;
}

int
GOST_KEY_set_private_key(GOST_KEY *key, const BIGNUM *priv_key)
{
	BN_clear_free(key->priv_key);
	key->priv_key = BN_dup(priv_key);
	return (key->priv_key == NULL) ? 0 : 1;
}

const EC_POINT *
GOST_KEY_get0_public_key(const GOST_KEY *key)
{
	return key->pub_key;
}

int
GOST_KEY_set_public_key(GOST_KEY *key, const EC_POINT *pub_key)
{
	EC_POINT_free(key->pub_key);
	key->pub_key = EC_POINT_dup(pub_key, key->group);
	return (key->pub_key == NULL) ? 0 : 1;
}

int
GOST_KEY_get_digest(const GOST_KEY *key)
{
	return key->digest_nid;
}
int
GOST_KEY_set_digest(GOST_KEY *key, int digest_nid)
{
	if (digest_nid == NID_id_GostR3411_94_CryptoProParamSet ||
	    digest_nid == NID_id_tc26_gost3411_2012_256 ||
	    digest_nid == NID_id_tc26_gost3411_2012_512) {
		key->digest_nid = digest_nid;
		return 1;
	}

	return 0;
}

size_t
GOST_KEY_get_size(const GOST_KEY *r)
{
	int i;
	BIGNUM *order = NULL;
	const EC_GROUP *group;

	if (r == NULL)
		return 0;
	group = GOST_KEY_get0_group(r);
	if (group == NULL)
		return 0;

	if ((order = BN_new()) == NULL)
		return 0;

	if (EC_GROUP_get_order(group, order, NULL) == 0) {
		BN_clear_free(order);
		return 0;
	}

	i = BN_num_bytes(order);
	BN_clear_free(order);
	return (i);
}
#endif
@


1.6
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: gostr341001_key.c,v 1.5 2015/02/14 06:40:04 jsing Exp $ */
d81 1
a81 1
		GOSTerr(GOST_F_GOST_KEY_NEW, ERR_R_MALLOC_FAILURE);
d121 1
a121 1
		GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, ERR_R_PASSED_NULL_PARAMETER);
d125 1
a125 1
		GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, EC_R_POINT_AT_INFINITY);
d135 1
a135 1
		GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, EC_R_POINT_IS_NOT_ON_CURVE);
d142 1
a142 1
		GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, EC_R_INVALID_GROUP_ORDER);
d147 1
a147 1
		GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, ERR_R_EC_LIB);
d151 1
a151 1
		GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, EC_R_WRONG_ORDER);
d160 1
a160 1
			GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, EC_R_WRONG_ORDER);
d165 1
a165 1
			GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, ERR_R_EC_LIB);
d169 1
a169 2
			GOSTerr(GOST_F_GOST_KEY_CHECK_KEY,
			    EC_R_INVALID_PRIVATE_KEY);
d190 1
a190 2
		GOSTerr(GOST_F_GOST_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES,
		    ERR_R_PASSED_NULL_PARAMETER);
d216 1
a216 2
		GOSTerr(GOST_F_GOST_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES,
		    EC_R_COORDINATES_OUT_OF_RANGE);
@


1.5
log
@Consistently check the return value from BN_CTX_get() on assignment.

This is the same as the previous larger commit, however it would seem the
GOST part got missed.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: gostr341001_key.c,v 1.4 2015/02/11 03:19:37 doug Exp $ */
d52 2
d108 1
a108 1
	OPENSSL_cleanse((void *)r, sizeof(GOST_KEY));
@


1.4
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: gostr341001_key.c,v 1.3 2014/11/13 20:29:55 miod Exp $ */
d201 3
a203 3
	tx = BN_CTX_get(ctx);
	ty = BN_CTX_get(ctx);
	if (ty == NULL)
@


1.3
log
@Add many missing error checks (probably not exhaustive, but a good start):
- make VKO_compute_key() no longer void so that it can return failure.
- fix unchecked allocations in too many routines to mention /-:
- fix unchecked BN operations in gost2001_do_sign(), gost2001_do_verify(),
  VKO_compute_key().
- fix the gost2001_do_sign() interface violation by having its sole caller
  free the BIGNUM it passes to that function by itself, instead of having
  the callee do this.

Reviewed (except for the last item) by Dmitry Eremin-Solenikov.
@
text
@d1 1
a1 1
/* $OpenBSD: gostr341001_key.c,v 1.2 2014/11/09 23:06:52 miod Exp $ */
d55 1
@


1.2
log
@KNF (when not conflicting with other cleanup changes in progress)
@
text
@d1 1
a1 1
/* $OpenBSD: gostr341001_key.c,v 1.1 2014/11/09 19:17:13 miod Exp $ */
d179 2
a180 1
int GOST_KEY_set_public_key_affine_coordinates(GOST_KEY * key, BIGNUM * x, BIGNUM * y)
d187 1
a187 1
	if (!key || !key->group || !x || !y) {
d193 1
a193 1
	if (!ctx)
d197 1
a197 2

	if (!point)
d202 4
a205 2
	if (!EC_POINT_set_affine_coordinates_GFp(key->group, point,
				x, y, ctx))
d207 2
a208 2
	if (!EC_POINT_get_affine_coordinates_GFp(key->group, point,
				tx, ty, ctx))
d211 1
a211 1
	 * Check if retrieved coordinates match originals: if not values are
d214 1
a214 1
	if (BN_cmp(x, tx) || BN_cmp(y, ty)) {
d219 1
a219 1
	if (!GOST_KEY_set_public_key(key, point))
@


1.1
log
@GOST crypto algorithms (well, most of them), ported from the removed GOST
engine to regular EVP citizens, contributed by Dmitry Eremin-Solenikov;
libcrypto bits only for now.

This is a verbatim import of Dmitry's work, and does not compile in this
state; the forthcoming commits will address these issues.

None of the GOST code is enabled in libcrypto yet, for it still gets
compiled with OPENSSL_NO_GOST defined. However, the public header gost.h
will be installed.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d71 2
a72 1
GOST_KEY * GOST_KEY_new(void)
d89 2
a90 1
void GOST_KEY_free(GOST_KEY * r)
d105 1
a105 2
	OPENSSL_cleanse((void *) r, sizeof(GOST_KEY));

d109 2
a110 1
int GOST_KEY_check_key(const GOST_KEY * key)
d117 1
a117 1
	if (!key || !key->group || !key->pub_key) {
d121 1
a121 1
	if (EC_POINT_is_at_infinity(key->group, key->pub_key)) {
d131 1
a131 1
	if (!EC_POINT_is_on_curve(key->group, key->pub_key, ctx)) {
d138 1
a138 1
	if (!EC_GROUP_get_order(key->group, order, ctx)) {
d142 2
a143 1
	if (!EC_POINT_mul(key->group, point, NULL, key->pub_key, order, ctx)) {
d147 1
a147 1
	if (!EC_POINT_is_at_infinity(key->group, point)) {
d155 1
a155 1
	if (key->priv_key) {
d160 2
a161 2
		if (!EC_POINT_mul(key->group, point, key->priv_key,
			NULL, NULL, ctx)) {
d165 3
a167 3
		if (EC_POINT_cmp(key->group, point, key->pub_key,
			ctx) != 0) {
			GOSTerr(GOST_F_GOST_KEY_CHECK_KEY, EC_R_INVALID_PRIVATE_KEY);
d226 1
a227 1
	EC_POINT_free(point);
d232 2
a233 1
const EC_GROUP * GOST_KEY_get0_group(const GOST_KEY * key)
d238 2
a239 1
int GOST_KEY_set_group(GOST_KEY * key, const EC_GROUP * group)
d246 2
a247 1
const BIGNUM * GOST_KEY_get0_private_key(const GOST_KEY * key)
d252 2
a253 1
int GOST_KEY_set_private_key(GOST_KEY * key, const BIGNUM * priv_key)
d261 1
a261 1
GOST_KEY_get0_public_key(const GOST_KEY * key)
d266 2
a267 1
int GOST_KEY_set_public_key(GOST_KEY * key, const EC_POINT * pub_key)
d274 2
a275 1
int GOST_KEY_get_digest(const GOST_KEY * key)
d279 2
a280 1
int GOST_KEY_set_digest(GOST_KEY * key, int digest_nid)
d292 2
a293 1
size_t GOST_KEY_get_size(const GOST_KEY * r)
d308 1
a308 1
	if (!EC_GROUP_get_order(group,order,NULL)) {
@

