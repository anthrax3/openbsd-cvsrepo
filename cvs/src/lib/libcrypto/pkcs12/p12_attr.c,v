head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.07.08.09.24.53;	author jsing;	state Exp;
branches;
next	1.8;
commitid	XxMwLiDq7L4rxrmk;

1.8
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.22.00.03.13;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.58;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.11.02;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.05.53.35;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.43;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: p12_attr.c,v 1.9 2014/07/08 09:24:53 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/pkcs12.h>

/* Add a local keyid to a safebag */

int
PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name, int namelen)
{
	if (X509at_add1_attr_by_NID(&bag->attrib, NID_localKeyID,
	    V_ASN1_OCTET_STRING, name, namelen))
		return 1;
	else
		return 0;
}

/* Add key usage to PKCS#8 structure */

int
PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage)
{
	unsigned char us_val;

	us_val = (unsigned char) usage;
	if (X509at_add1_attr_by_NID(&p8->attributes, NID_key_usage,
	    V_ASN1_BIT_STRING, &us_val, 1))
		return 1;
	else
		return 0;
}

/* Add a friendlyname to a safebag */

int
PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen)
{
	if (X509at_add1_attr_by_NID(&bag->attrib, NID_friendlyName,
	    MBSTRING_ASC, (unsigned char *)name, namelen))
		return 1;
	else
		return 0;
}


int
PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag, const unsigned char *name,
    int namelen)
{
	if (X509at_add1_attr_by_NID(&bag->attrib, NID_friendlyName,
	    MBSTRING_BMP, name, namelen))
		return 1;
	else
		return 0;
}

int
PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen)
{
	if (X509at_add1_attr_by_NID(&bag->attrib, NID_ms_csp_name,
	    MBSTRING_ASC, (unsigned char *)name, namelen))
		return 1;
	else
		return 0;
}

ASN1_TYPE *
PKCS12_get_attr_gen(STACK_OF(X509_ATTRIBUTE) *attrs, int attr_nid)
{
	X509_ATTRIBUTE *attrib;
	int i;

	if (!attrs)
		return NULL;
	for (i = 0; i < sk_X509_ATTRIBUTE_num (attrs); i++) {
		attrib = sk_X509_ATTRIBUTE_value (attrs, i);
		if (OBJ_obj2nid (attrib->object) == attr_nid) {
			if (sk_ASN1_TYPE_num (attrib->value.set))
				return sk_ASN1_TYPE_value(attrib->value.set, 0);
			else
				return NULL;
		}
	}
	return NULL;
}

char *
PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag)
{
	ASN1_TYPE *atype;

	if (!(atype = PKCS12_get_attr(bag, NID_friendlyName)))
		return NULL;
	if (atype->type != V_ASN1_BMPSTRING)
		return NULL;
	return OPENSSL_uni2asc(atype->value.bmpstring->data,
	    atype->value.bmpstring->length);
}
@


1.9
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_attr.c,v 1.8 2014/06/12 15:49:30 deraadt Exp $ */
d60 1
a60 1
#include "cryptlib.h"
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d65 2
a66 2
int PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,
	     int namelen)
d69 1
a69 1
				V_ASN1_OCTET_STRING, name, namelen))
d71 1
a71 1
	else 
d77 2
a78 1
int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage)
d81 1
d84 1
a84 1
				V_ASN1_BIT_STRING, &us_val, 1))
d92 2
a93 2
int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,
				 int namelen)
d96 1
a96 1
				MBSTRING_ASC, (unsigned char *)name, namelen))
d103 3
a105 2
int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,
				 const unsigned char *name, int namelen)
d108 1
a108 1
				MBSTRING_BMP, name, namelen))
d114 2
a115 2
int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name,
				 int namelen)
d118 1
a118 1
				MBSTRING_ASC, (unsigned char *)name, namelen))
d124 2
a125 1
ASN1_TYPE *PKCS12_get_attr_gen(STACK_OF(X509_ATTRIBUTE) *attrs, int attr_nid)
d129 3
a131 1
	if (!attrs) return NULL;
d136 3
a138 2
			    return sk_ASN1_TYPE_value(attrib->value.set, 0);
			else return NULL;
d144 2
a145 1
char *PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag)
d148 5
a152 2
	if (!(atype = PKCS12_get_attr(bag, NID_friendlyName))) return NULL;
	if (atype->type != V_ASN1_BMPSTRING) return NULL;
d154 1
a154 1
				 atype->value.bmpstring->length);
a155 1

@


1.7
log
@resolve conflicts, fix local changes
@
text
@d1 1
a1 1
/* p12_attr.c */
@


1.6
log
@resolve conflicts
@
text
@d142 1
a142 1
	return uni2asc(atype->value.bmpstring->data,
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.4
log
@openssl-engine-0.9.6a merge
@
text
@d65 1
a65 1
int PKCS12_add_localkeyid (PKCS12_SAFEBAG *bag, unsigned char *name,
d68 4
a71 5
	X509_ATTRIBUTE *attrib;
	ASN1_BMPSTRING *oct;
	ASN1_TYPE *keyid;
	if (!(keyid = ASN1_TYPE_new ())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_LOCALKEYID, ERR_R_MALLOC_FAILURE);
a72 28
	}
	keyid->type = V_ASN1_OCTET_STRING;
	if (!(oct = M_ASN1_OCTET_STRING_new())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_LOCALKEYID, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	if (!M_ASN1_OCTET_STRING_set(oct, name, namelen)) {
		PKCS12err(PKCS12_F_PKCS12_ADD_LOCALKEYID, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	keyid->value.octet_string = oct;
	if (!(attrib = X509_ATTRIBUTE_new ())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_LOCALKEYID, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	attrib->object = OBJ_nid2obj(NID_localKeyID);
	if (!(attrib->value.set = sk_ASN1_TYPE_new_null())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_LOCALKEYID, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	sk_ASN1_TYPE_push (attrib->value.set,keyid);
	attrib->set = 1;
	if (!bag->attrib && !(bag->attrib = sk_X509_ATTRIBUTE_new_null ())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_LOCALKEYID, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	sk_X509_ATTRIBUTE_push (bag->attrib, attrib);
	return 1;
d77 1
a77 1
int PKCS8_add_keyusage (PKCS8_PRIV_KEY_INFO *p8, int usage)
a78 3
	X509_ATTRIBUTE *attrib;
	ASN1_BIT_STRING *bstr;
	ASN1_TYPE *keyid;
d81 4
a84 28
	if (!(keyid = ASN1_TYPE_new ())) {
		PKCS12err(PKCS12_F_PKCS8_ADD_KEYUSAGE, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	keyid->type = V_ASN1_BIT_STRING;
	if (!(bstr = M_ASN1_BIT_STRING_new())) {
		PKCS12err(PKCS12_F_PKCS8_ADD_KEYUSAGE, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	if (!M_ASN1_BIT_STRING_set(bstr, &us_val, 1)) {
		PKCS12err(PKCS12_F_PKCS8_ADD_KEYUSAGE, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	keyid->value.bit_string = bstr;
	if (!(attrib = X509_ATTRIBUTE_new ())) {
		PKCS12err(PKCS12_F_PKCS8_ADD_KEYUSAGE, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	attrib->object = OBJ_nid2obj(NID_key_usage);
	if (!(attrib->value.set = sk_ASN1_TYPE_new_null())) {
		PKCS12err(PKCS12_F_PKCS8_ADD_KEYUSAGE, ERR_R_MALLOC_FAILURE);
		return 0;
	}
	sk_ASN1_TYPE_push (attrib->value.set,keyid);
	attrib->set = 1;
	if (!p8->attributes
	    && !(p8->attributes = sk_X509_ATTRIBUTE_new_null ())) {
		PKCS12err(PKCS12_F_PKCS8_ADD_KEYUSAGE, ERR_R_MALLOC_FAILURE);
a85 3
	}
	sk_X509_ATTRIBUTE_push (p8->attributes, attrib);
	return 1;
d90 1
a90 1
int PKCS12_add_friendlyname_asc (PKCS12_SAFEBAG *bag, const char *name,
d93 4
a96 5
	unsigned char *uniname;
	int ret, unilen;
	if (!asc2uni(name, namelen, &uniname, &unilen)) {
		PKCS12err(PKCS12_F_PKCS12_ADD_FRIENDLYNAME_ASC,
							ERR_R_MALLOC_FAILURE);
a97 4
	}
	ret = PKCS12_add_friendlyname_uni (bag, uniname, unilen);
	OPENSSL_free(uniname);
	return ret;
a98 1
	
d100 2
a101 1
int PKCS12_add_friendlyname_uni (PKCS12_SAFEBAG *bag,
d104 4
a107 8
	X509_ATTRIBUTE *attrib;
	ASN1_BMPSTRING *bmp;
	ASN1_TYPE *fname;
	/* Zap ending double null if included */
	if(!name[namelen - 1] && !name[namelen - 2]) namelen -= 2;
	if (!(fname = ASN1_TYPE_new ())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_FRIENDLYNAME_UNI,
							ERR_R_MALLOC_FAILURE);
d109 9
a117 31
	}
	fname->type = V_ASN1_BMPSTRING;
	if (!(bmp = M_ASN1_BMPSTRING_new())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_FRIENDLYNAME_UNI,
							ERR_R_MALLOC_FAILURE);
		return 0;
	}
	if (!(bmp->data = OPENSSL_malloc (namelen))) {
		PKCS12err(PKCS12_F_PKCS12_ADD_FRIENDLYNAME_UNI,
							ERR_R_MALLOC_FAILURE);
		return 0;
	}
	memcpy (bmp->data, name, namelen);
	bmp->length = namelen;
	fname->value.bmpstring = bmp;
	if (!(attrib = X509_ATTRIBUTE_new ())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_FRIENDLYNAME_UNI,
							ERR_R_MALLOC_FAILURE);
		return 0;
	}
	attrib->object = OBJ_nid2obj(NID_friendlyName);
	if (!(attrib->value.set = sk_ASN1_TYPE_new_null())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_FRIENDLYNAME,
							ERR_R_MALLOC_FAILURE);
		return 0;
	}
	sk_ASN1_TYPE_push (attrib->value.set,fname);
	attrib->set = 1;
	if (!bag->attrib && !(bag->attrib = sk_X509_ATTRIBUTE_new_null ())) {
		PKCS12err(PKCS12_F_PKCS12_ADD_FRIENDLYNAME_UNI,
							ERR_R_MALLOC_FAILURE);
a118 3
	}
	sk_X509_ATTRIBUTE_push (bag->attrib, attrib);
	return PKCS12_OK;
d121 1
a121 1
ASN1_TYPE *PKCS12_get_attr_gen (STACK_OF(X509_ATTRIBUTE) *attrs, int attr_nid)
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d154 1
a154 1
	if (!asc2uni(name, &uniname, &unilen)) {
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d90 1
a90 1
	if (!(attrib->value.set = sk_ASN1_TYPE_new(NULL))) {
d96 1
a96 1
	if (!bag->attrib && !(bag->attrib = sk_X509_ATTRIBUTE_new (NULL))) {
d132 1
a132 1
	if (!(attrib->value.set = sk_ASN1_TYPE_new(NULL))) {
d139 1
a139 1
	    && !(p8->attributes = sk_X509_ATTRIBUTE_new (NULL))) {
d160 1
a160 1
	Free(uniname);
d184 1
a184 1
	if (!(bmp->data = Malloc (namelen))) {
d198 1
a198 1
	if (!(attrib->value.set = sk_ASN1_TYPE_new(NULL))) {
d205 1
a205 1
	if (!bag->attrib && !(bag->attrib = sk_X509_ATTRIBUTE_new (NULL))) {
@


1.1
log
@new files for OpenSSL 0.9.4
@
text
@d76 1
a76 1
	if (!(oct = ASN1_OCTET_STRING_new())) {
d80 1
a80 1
	if (!ASN1_OCTET_STRING_set(oct, name, namelen)) {
d118 1
a118 1
	if (!(bstr = ASN1_BIT_STRING_new())) {
d122 1
a122 1
	if (!ASN1_BIT_STRING_set(bstr, &us_val, 1)) {
d179 1
a179 1
	if (!(bmp = ASN1_BMPSTRING_new())) {
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d65 1
a65 1
int PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,
d68 5
a72 4
	if (X509at_add1_attr_by_NID(&bag->attrib, NID_localKeyID,
				V_ASN1_OCTET_STRING, name, namelen))
		return 1;
	else 
d74 28
d106 1
a106 1
int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage)
d108 3
d113 28
a140 4
	if (X509at_add1_attr_by_NID(&p8->attributes, NID_key_usage,
				V_ASN1_BIT_STRING, &us_val, 1))
		return 1;
	else
d142 3
d149 1
a149 1
int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,
d152 5
a156 4
	if (X509at_add1_attr_by_NID(&bag->attrib, NID_friendlyName,
				MBSTRING_ASC, (unsigned char *)name, namelen))
		return 1;
	else
d158 4
d163 1
d165 1
a165 2

int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,
d168 33
a200 4
	if (X509at_add1_attr_by_NID(&bag->attrib, NID_friendlyName,
				MBSTRING_BMP, name, namelen))
		return 1;
	else
d202 6
a207 9
}

int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name,
				 int namelen)
{
	if (X509at_add1_attr_by_NID(&bag->attrib, NID_ms_csp_name,
				MBSTRING_ASC, (unsigned char *)name, namelen))
		return 1;
	else
d209 3
d214 1
a214 1
ASN1_TYPE *PKCS12_get_attr_gen(STACK_OF(X509_ATTRIBUTE) *attrs, int attr_nid)
@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d142 1
a142 1
	return OPENSSL_uni2asc(atype->value.bmpstring->data,
@


