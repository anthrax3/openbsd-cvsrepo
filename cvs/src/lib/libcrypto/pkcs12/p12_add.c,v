head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.14;
commitid	kT0fLt3r4lroFJra;

1.14
date	2016.12.30.15.34.35;	author jsing;	state Exp;
branches;
next	1.13;
commitid	sFuDyND77cPEe6wY;

1.13
date	2015.09.30.18.41.06;	author jsing;	state Exp;
branches;
next	1.12;
commitid	8UbnRNonXjerilzx;

1.12
date	2015.02.14.12.43.07;	author miod;	state Exp;
branches;
next	1.11;
commitid	UdJZJZYRCFvHGcy3;

1.11
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.07.08.09.24.53;	author jsing;	state Exp;
branches;
next	1.9;
commitid	XxMwLiDq7L4rxrmk;

1.9
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.27.05.07.02;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.58;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.11.01;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.05.53.35;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.43;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.06.27.05.05.34;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: p12_add.c,v 1.14 2016/12/30 15:34:35 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/err.h>
#include <openssl/pkcs12.h>

/* Pack an object into an OCTET STRING and turn into a safebag */

PKCS12_SAFEBAG *
PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it, int nid1, int nid2)
{
	PKCS12_BAGS *bag;
	PKCS12_SAFEBAG *safebag;

	if (!(bag = PKCS12_BAGS_new())) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	bag->type = OBJ_nid2obj(nid1);
	if (!ASN1_item_pack(obj, it, &bag->value.octet)) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		PKCS12_BAGS_free(bag);
		return NULL;
	}
	if (!(safebag = PKCS12_SAFEBAG_new())) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		PKCS12_BAGS_free(bag);
		return NULL;
	}
	safebag->value.bag = bag;
	safebag->type = OBJ_nid2obj(nid2);
	return safebag;
}

/* Turn PKCS8 object into a keybag */

PKCS12_SAFEBAG *
PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO *p8)
{
	PKCS12_SAFEBAG *bag;

	if (!(bag = PKCS12_SAFEBAG_new())) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	bag->type = OBJ_nid2obj(NID_keyBag);
	bag->value.keybag = p8;
	return bag;
}

/* Turn PKCS8 object into a shrouded keybag */

PKCS12_SAFEBAG *
PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char *pass, int passlen,
    unsigned char *salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8)
{
	PKCS12_SAFEBAG *bag;
	const EVP_CIPHER *pbe_ciph;

	/* Set up the safe bag */
	if (!(bag = PKCS12_SAFEBAG_new())) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}

	bag->type = OBJ_nid2obj(NID_pkcs8ShroudedKeyBag);

	pbe_ciph = EVP_get_cipherbynid(pbe_nid);

	if (pbe_ciph)
		pbe_nid = -1;

	if (!(bag->value.shkeybag = PKCS8_encrypt(pbe_nid, pbe_ciph, pass,
	    passlen, salt, saltlen, iter, p8))) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		PKCS12_SAFEBAG_free(bag);
		return NULL;
	}

	return bag;
}

/* Turn a stack of SAFEBAGS into a PKCS#7 data Contentinfo */
PKCS7 *
PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk)
{
	PKCS7 *p7;

	if (!(p7 = PKCS7_new())) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	p7->type = OBJ_nid2obj(NID_pkcs7_data);
	if (!(p7->d.data = ASN1_OCTET_STRING_new())) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (!ASN1_item_pack(sk, &PKCS12_SAFEBAGS_it, &p7->d.data)) {
		PKCS12error(PKCS12_R_CANT_PACK_STRUCTURE);
		goto err;
	}
	return p7;

err:
	PKCS7_free(p7);
	return NULL;
}

/* Unpack SAFEBAGS from PKCS#7 data ContentInfo */
STACK_OF(PKCS12_SAFEBAG) *
PKCS12_unpack_p7data(PKCS7 *p7)
{
	if (!PKCS7_type_is_data(p7)) {
		PKCS12error(PKCS12_R_CONTENT_TYPE_NOT_DATA);
		return NULL;
	}
	return ASN1_item_unpack(p7->d.data, &PKCS12_SAFEBAGS_it);
}

/* Turn a stack of SAFEBAGS into a PKCS#7 encrypted data ContentInfo */

PKCS7 *
PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
    unsigned char *salt, int saltlen, int iter, STACK_OF(PKCS12_SAFEBAG) *bags)
{
	PKCS7 *p7;
	X509_ALGOR *pbe;
	const EVP_CIPHER *pbe_ciph;

	if (!(p7 = PKCS7_new())) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	if (!PKCS7_set_type(p7, NID_pkcs7_encrypted)) {
		PKCS12error(PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE);
		goto err;
	}

	pbe_ciph = EVP_get_cipherbynid(pbe_nid);

	if (pbe_ciph)
		pbe = PKCS5_pbe2_set(pbe_ciph, iter, salt, saltlen);
	else
		pbe = PKCS5_pbe_set(pbe_nid, iter, salt, saltlen);

	if (!pbe) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		goto err;
	}
	X509_ALGOR_free(p7->d.encrypted->enc_data->algorithm);
	p7->d.encrypted->enc_data->algorithm = pbe;
	ASN1_OCTET_STRING_free(p7->d.encrypted->enc_data->enc_data);
	if (!(p7->d.encrypted->enc_data->enc_data = PKCS12_item_i2d_encrypt(
	    pbe, &PKCS12_SAFEBAGS_it, pass, passlen, bags, 1))) {
		PKCS12error(PKCS12_R_ENCRYPT_ERROR);
		goto err;
	}

	return p7;

err:
	PKCS7_free(p7);
	return NULL;
}

STACK_OF(PKCS12_SAFEBAG) *
PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass, int passlen)
{
	if (!PKCS7_type_is_encrypted(p7))
		return NULL;
	return PKCS12_item_decrypt_d2i(p7->d.encrypted->enc_data->algorithm,
	    &PKCS12_SAFEBAGS_it, pass, passlen,
	    p7->d.encrypted->enc_data->enc_data, 1);
}

PKCS8_PRIV_KEY_INFO *
PKCS12_decrypt_skey(PKCS12_SAFEBAG *bag, const char *pass, int passlen)
{
	return PKCS8_decrypt(bag->value.shkeybag, pass, passlen);
}

int
PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes)
{
	if (ASN1_item_pack(safes, &PKCS12_AUTHSAFES_it,
	    &p12->authsafes->d.data))
		return 1;
	return 0;
}

STACK_OF(PKCS7) *
PKCS12_unpack_authsafes(PKCS12 *p12)
{
	if (!PKCS7_type_is_data(p12->authsafes)) {
		PKCS12error(PKCS12_R_CONTENT_TYPE_NOT_DATA);
		return NULL;
	}
	return ASN1_item_unpack(p12->authsafes->d.data,
	    &PKCS12_AUTHSAFES_it);
}
@


1.14
log
@Expand ASN1_ITEM_rptr macros - no change in generated assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_add.c,v 1.13 2015/09/30 18:41:06 jsing Exp $ */
d73 1
a73 2
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG,
		    ERR_R_MALLOC_FAILURE);
d78 1
a78 2
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG,
		    ERR_R_MALLOC_FAILURE);
d83 1
a83 2
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG,
		    ERR_R_MALLOC_FAILURE);
d100 1
a100 1
		PKCS12err(PKCS12_F_PKCS12_MAKE_KEYBAG, ERR_R_MALLOC_FAILURE);
d119 1
a119 1
		PKCS12err(PKCS12_F_PKCS12_MAKE_SHKEYBAG, ERR_R_MALLOC_FAILURE);
d132 1
a132 1
		PKCS12err(PKCS12_F_PKCS12_MAKE_SHKEYBAG, ERR_R_MALLOC_FAILURE);
d147 1
a147 1
		PKCS12err(PKCS12_F_PKCS12_PACK_P7DATA, ERR_R_MALLOC_FAILURE);
d152 1
a152 1
		PKCS12err(PKCS12_F_PKCS12_PACK_P7DATA, ERR_R_MALLOC_FAILURE);
d157 1
a157 2
		PKCS12err(PKCS12_F_PKCS12_PACK_P7DATA,
		    PKCS12_R_CANT_PACK_STRUCTURE);
d172 1
a172 2
		PKCS12err(PKCS12_F_PKCS12_UNPACK_P7DATA,
		    PKCS12_R_CONTENT_TYPE_NOT_DATA);
d189 1
a189 1
		PKCS12err(PKCS12_F_PKCS12_PACK_P7ENCDATA, ERR_R_MALLOC_FAILURE);
d193 1
a193 2
		PKCS12err(PKCS12_F_PKCS12_PACK_P7ENCDATA,
		    PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE);
d205 1
a205 1
		PKCS12err(PKCS12_F_PKCS12_PACK_P7ENCDATA, ERR_R_MALLOC_FAILURE);
d213 1
a213 2
		PKCS12err(PKCS12_F_PKCS12_PACK_P7ENCDATA,
		    PKCS12_R_ENCRYPT_ERROR);
d253 1
a253 2
		PKCS12err(PKCS12_F_PKCS12_UNPACK_AUTHSAFES,
		    PKCS12_R_CONTENT_TYPE_NOT_DATA);
@


1.13
log
@Replace M_ASN1_OCTET_STRING_(free|new) with ASN1_OCTET_STRING_(free|new).
@
text
@d1 1
a1 1
/* $OpenBSD: p12_add.c,v 1.12 2015/02/14 12:43:07 miod Exp $ */
d159 1
a159 1
	if (!ASN1_item_pack(sk, ASN1_ITEM_rptr(PKCS12_SAFEBAGS), &p7->d.data)) {
d180 1
a180 1
	return ASN1_item_unpack(p7->d.data, ASN1_ITEM_rptr(PKCS12_SAFEBAGS));
d218 1
a218 1
	    pbe, ASN1_ITEM_rptr(PKCS12_SAFEBAGS), pass, passlen, bags, 1))) {
d237 1
a237 1
	    ASN1_ITEM_rptr(PKCS12_SAFEBAGS), pass, passlen,
d250 1
a250 1
	if (ASN1_item_pack(safes, ASN1_ITEM_rptr(PKCS12_AUTHSAFES),
d265 1
a265 1
	    ASN1_ITEM_rptr(PKCS12_AUTHSAFES));
@


1.12
log
@Try and fix a bunch of memory leaks upon error;
ok tedu@@ about 7 months ago and I was sitting upon this diff for no reason
@
text
@d1 1
a1 1
/* $OpenBSD: p12_add.c,v 1.11 2014/07/11 08:44:49 jsing Exp $ */
d154 1
a154 1
	if (!(p7->d.data = M_ASN1_OCTET_STRING_new())) {
d216 1
a216 1
	M_ASN1_OCTET_STRING_free(p7->d.encrypted->enc_data->enc_data);
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_add.c,v 1.10 2014/07/08 09:24:53 jsing Exp $ */
d81 1
d87 1
d136 1
d156 1
a156 1
		return NULL;
d162 1
a162 1
		return NULL;
d165 4
d200 1
a200 1
		return NULL;
d212 1
a212 1
		return NULL;
d221 1
a221 1
		return NULL;
d225 4
@


1.10
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_add.c,v 1.9 2014/06/12 15:49:30 deraadt Exp $ */
d60 2
a61 1
#include "cryptlib.h"
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d65 2
a66 2
PKCS12_SAFEBAG *PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it, int nid1,
	     int nid2)
d70 1
d72 2
a73 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
d78 2
a79 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
d83 2
a84 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
d94 2
a95 1
PKCS12_SAFEBAG *PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO *p8)
d98 1
d100 1
a100 1
		PKCS12err(PKCS12_F_PKCS12_MAKE_KEYBAG,ERR_R_MALLOC_FAILURE);
d110 3
a112 3
PKCS12_SAFEBAG *PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char *pass,
	     int passlen, unsigned char *salt, int saltlen, int iter,
	     PKCS8_PRIV_KEY_INFO *p8)
d130 2
a131 3
	if (!(bag->value.shkeybag = 
	  PKCS8_encrypt(pbe_nid, pbe_ciph, pass, passlen, salt, saltlen, iter,
									 p8))) {
d140 2
a141 1
PKCS7 *PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk)
d144 1
d154 1
a154 1
	
d156 2
a157 1
		PKCS12err(PKCS12_F_PKCS12_PACK_P7DATA, PKCS12_R_CANT_PACK_STRUCTURE);
d164 2
a165 1
STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7data(PKCS7 *p7)
d167 3
a169 3
	if(!PKCS7_type_is_data(p7))
		{
		PKCS12err(PKCS12_F_PKCS12_UNPACK_P7DATA,PKCS12_R_CONTENT_TYPE_NOT_DATA);
d171 1
a171 1
		}
d177 3
a179 3
PKCS7 *PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
			      unsigned char *salt, int saltlen, int iter,
			      STACK_OF(PKCS12_SAFEBAG) *bags)
d184 1
d189 1
a189 1
	if(!PKCS7_set_type(p7, NID_pkcs7_encrypted)) {
d191 1
a191 1
				PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE);
d209 4
a212 4
	if (!(p7->d.encrypted->enc_data->enc_data =
	PKCS12_item_i2d_encrypt(pbe, ASN1_ITEM_rptr(PKCS12_SAFEBAGS), pass, passlen,
				 bags, 1))) {
		PKCS12err(PKCS12_F_PKCS12_PACK_P7ENCDATA, PKCS12_R_ENCRYPT_ERROR);
d219 2
a220 1
STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass, int passlen)
d222 2
a223 1
	if(!PKCS7_type_is_encrypted(p7)) return NULL;
d225 2
a226 3
			           ASN1_ITEM_rptr(PKCS12_SAFEBAGS),
				   pass, passlen,
			           p7->d.encrypted->enc_data->enc_data, 1);
d229 2
a230 2
PKCS8_PRIV_KEY_INFO *PKCS12_decrypt_skey(PKCS12_SAFEBAG *bag, const char *pass,
								int passlen)
d235 2
a236 1
int PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes) 
d238 3
a240 3
	if(ASN1_item_pack(safes, ASN1_ITEM_rptr(PKCS12_AUTHSAFES),
		&p12->authsafes->d.data)) 
			return 1;
d244 2
a245 1
STACK_OF(PKCS7) *PKCS12_unpack_authsafes(PKCS12 *p12)
d247 3
a249 3
	if (!PKCS7_type_is_data(p12->authsafes))
		{
		PKCS12err(PKCS12_F_PKCS12_UNPACK_AUTHSAFES,PKCS12_R_CONTENT_TYPE_NOT_DATA);
d251 3
a253 2
		}
	return ASN1_item_unpack(p12->authsafes->d.data, ASN1_ITEM_rptr(PKCS12_AUTHSAFES));
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d1 1
a1 1
/* p12_add.c */
@


1.7
log
@resolve conflicts
@
text
@d109 1
d118 6
d125 1
a125 1
	  PKCS8_encrypt(pbe_nid, NULL, pass, passlen, salt, saltlen, iter,
d174 1
d184 9
a192 1
	if (!(pbe = PKCS5_pbe_set(pbe_nid, iter, salt, saltlen))) {
@


1.6
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.5
log
@resolve conflicts
@
text
@d71 1
a71 1
		PKCS12err(PKCS12_F_PKCS12_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
d76 1
a76 1
		PKCS12err(PKCS12_F_PKCS12_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
d80 1
a80 1
		PKCS12err(PKCS12_F_PKCS12_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d151 5
a155 1
	if(!PKCS7_type_is_data(p7)) return NULL;
d218 5
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d65 1
a65 1
PKCS12_SAFEBAG *PKCS12_pack_safebag (char *obj, int (*i2d)(), int nid1,
d70 1
a70 1
	if (!(bag = PKCS12_BAGS_new ())) {
d75 1
a75 1
	if (!ASN1_pack_string(obj, i2d, &bag->value.octet)) {
d79 1
a79 1
	if (!(safebag = PKCS12_SAFEBAG_new ())) {
d90 1
a90 1
PKCS12_SAFEBAG *PKCS12_MAKE_KEYBAG (PKCS8_PRIV_KEY_INFO *p8)
d104 1
a104 1
PKCS12_SAFEBAG *PKCS12_MAKE_SHKEYBAG (int pbe_nid, const char *pass,
d111 1
a111 1
	if (!(bag = PKCS12_SAFEBAG_new ())) {
d128 1
a128 1
PKCS7 *PKCS12_pack_p7data (STACK_OF(PKCS12_SAFEBAG) *sk)
d141 1
a141 3
	if (!ASN1_seq_pack_PKCS12_SAFEBAG(sk, i2d_PKCS12_SAFEBAG,
					  &p7->d.data->data,
					  &p7->d.data->length)) {
d148 7
d157 1
a157 1
PKCS7 *PKCS12_pack_p7encdata (int pbe_nid, const char *pass, int passlen,
d172 1
a172 1
	if (!(pbe = PKCS5_pbe_set (pbe_nid, iter, salt, saltlen))) {
d180 2
a181 2
	PKCS12_i2d_encrypt (pbe, i2d_PKCS12_SAFEBAG, pass, passlen,
				 (char *)bags, 1))) {
d189 11
a199 4
X509_SIG *PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher,
			 const char *pass, int passlen,
			 unsigned char *salt, int saltlen, int iter,
						PKCS8_PRIV_KEY_INFO *p8inf)
d201 10
a210 2
	X509_SIG *p8;
	X509_ALGOR *pbe;
d212 3
a214 26
	if (!(p8 = X509_SIG_new())) {
		PKCS12err(PKCS12_F_PKCS8_ENCRYPT, ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if(pbe_nid == -1) pbe = PKCS5_pbe2_set(cipher, iter, salt, saltlen);
	else pbe = PKCS5_pbe_set(pbe_nid, iter, salt, saltlen);
	if(!pbe) {
		PKCS12err(PKCS12_F_PKCS8_ENCRYPT, ERR_R_ASN1_LIB);
		goto err;
	}
	X509_ALGOR_free(p8->algor);
	p8->algor = pbe;
	M_ASN1_OCTET_STRING_free(p8->digest);
	if (!(p8->digest = 
	PKCS12_i2d_encrypt (pbe, i2d_PKCS8_PRIV_KEY_INFO, pass, passlen,
						 (char *)p8inf, 0))) {
		PKCS12err(PKCS12_F_PKCS8_ENCRYPT, PKCS12_R_ENCRYPT_ERROR);
		goto err;
	}

	return p8;

	err:
	X509_SIG_free(p8);
	return NULL;
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d128 1
a128 1
PKCS7 *PKCS12_pack_p7data (STACK *sk)
d141 3
a143 2
	if (!ASN1_seq_pack(sk, i2d_PKCS12_SAFEBAG, &p7->d.data->data,
					&p7->d.data->length)) {
d153 2
a154 1
	     unsigned char *salt, int saltlen, int iter, STACK *bags)
@


1.1
log
@new files for OpenSSL 0.9.4
@
text
@d136 1
a136 1
	if (!(p7->d.data = ASN1_OCTET_STRING_new())) {
d160 3
a162 3
	p7->type = OBJ_nid2obj(NID_pkcs7_encrypted);
	if (!(p7->d.encrypted = PKCS7_ENCRYPT_new ())) {
		PKCS12err(PKCS12_F_PKCS12_PACK_P7ENCDATA, ERR_R_MALLOC_FAILURE);
a164 2
	ASN1_INTEGER_set (p7->d.encrypted->version, 0);
	p7->d.encrypted->enc_data->content_type = OBJ_nid2obj(NID_pkcs7_data);
d171 1
a171 1
	ASN1_OCTET_STRING_free(p7->d.encrypted->enc_data->enc_data);
d192 1
a192 1
		return NULL;
d198 2
a199 2
		PKCS12err(PKCS12_F_PKCS8_ENCRYPT, ERR_R_MALLOC_FAILURE);
		return NULL;
d203 1
a203 1
	ASN1_OCTET_STRING_free(p8->digest);
d208 1
a208 1
		return NULL;
d212 4
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d65 1
a65 1
PKCS12_SAFEBAG *PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it, int nid1,
d70 1
a70 1
	if (!(bag = PKCS12_BAGS_new())) {
d75 1
a75 1
	if (!ASN1_item_pack(obj, it, &bag->value.octet)) {
d79 1
a79 1
	if (!(safebag = PKCS12_SAFEBAG_new())) {
d90 1
a90 1
PKCS12_SAFEBAG *PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO *p8)
d104 1
a104 1
PKCS12_SAFEBAG *PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char *pass,
d111 1
a111 1
	if (!(bag = PKCS12_SAFEBAG_new())) {
d128 1
a128 1
PKCS7 *PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk)
d136 1
a136 1
	if (!(p7->d.data = M_ASN1_OCTET_STRING_new())) {
d141 2
a142 1
	if (!ASN1_item_pack(sk, ASN1_ITEM_rptr(PKCS12_SAFEBAGS), &p7->d.data)) {
a148 7
/* Unpack SAFEBAGS from PKCS#7 data ContentInfo */
STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7data(PKCS7 *p7)
{
	if(!PKCS7_type_is_data(p7)) return NULL;
	return ASN1_item_unpack(p7->d.data, ASN1_ITEM_rptr(PKCS12_SAFEBAGS));
}

d151 2
a152 3
PKCS7 *PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
			      unsigned char *salt, int saltlen, int iter,
			      STACK_OF(PKCS12_SAFEBAG) *bags)
d160 3
a162 3
	if(!PKCS7_set_type(p7, NID_pkcs7_encrypted)) {
		PKCS12err(PKCS12_F_PKCS12_PACK_P7ENCDATA,
				PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE);
d165 3
a167 1
	if (!(pbe = PKCS5_pbe_set(pbe_nid, iter, salt, saltlen))) {
d173 1
a173 1
	M_ASN1_OCTET_STRING_free(p7->d.encrypted->enc_data->enc_data);
d175 2
a176 2
	PKCS12_item_i2d_encrypt(pbe, ASN1_ITEM_rptr(PKCS12_SAFEBAGS), pass, passlen,
				 bags, 1))) {
d184 4
a187 1
STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass, int passlen)
d189 2
a190 6
	if(!PKCS7_type_is_encrypted(p7)) return NULL;
	return PKCS12_item_decrypt_d2i(p7->d.encrypted->enc_data->algorithm,
			           ASN1_ITEM_rptr(PKCS12_SAFEBAGS),
				   pass, passlen,
			           p7->d.encrypted->enc_data->enc_data, 1);
}
d192 4
a195 5
PKCS8_PRIV_KEY_INFO *PKCS12_decrypt_skey(PKCS12_SAFEBAG *bag, const char *pass,
								int passlen)
{
	return PKCS8_decrypt(bag->value.shkeybag, pass, passlen);
}
d197 15
a211 7
int PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes) 
{
	if(ASN1_item_pack(safes, ASN1_ITEM_rptr(PKCS12_AUTHSAFES),
		&p12->authsafes->d.data)) 
			return 1;
	return 0;
}
d213 1
a213 3
STACK_OF(PKCS7) *PKCS12_unpack_authsafes(PKCS12 *p12)
{
	return ASN1_item_unpack(p12->authsafes->d.data, ASN1_ITEM_rptr(PKCS12_AUTHSAFES));
@


1.1.1.2
log
@import of openssl-0.9.7j
@
text
@d151 1
a151 5
	if(!PKCS7_type_is_data(p7))
		{
		PKCS12err(PKCS12_F_PKCS12_UNPACK_P7DATA,PKCS12_R_CONTENT_TYPE_NOT_DATA);
		return NULL;
		}
a213 5
	if (!PKCS7_type_is_data(p12->authsafes))
		{
		PKCS12err(PKCS12_F_PKCS12_UNPACK_AUTHSAFES,PKCS12_R_CONTENT_TYPE_NOT_DATA);
		return NULL;
		}
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d71 1
a71 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
d76 1
a76 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
d80 1
a80 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG, ERR_R_MALLOC_FAILURE);
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a108 1
	const EVP_CIPHER *pbe_ciph;
a116 6

	pbe_ciph = EVP_get_cipherbynid(pbe_nid);

	if (pbe_ciph)
		pbe_nid = -1;

d118 1
a118 1
	  PKCS8_encrypt(pbe_nid, pbe_ciph, pass, passlen, salt, saltlen, iter,
a166 1
	const EVP_CIPHER *pbe_ciph;
d176 1
a176 9

	pbe_ciph = EVP_get_cipherbynid(pbe_nid);

	if (pbe_ciph)
		pbe = PKCS5_pbe2_set(pbe_ciph, iter, salt, saltlen);
	else
		pbe = PKCS5_pbe_set(pbe_nid, iter, salt, saltlen);

	if (!pbe) {
@


