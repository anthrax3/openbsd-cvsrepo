head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.18;
commitid	kT0fLt3r4lroFJra;

1.18
date	2016.12.30.15.08.22;	author jsing;	state Exp;
branches;
next	1.17;
commitid	rS9BvAyQ1Q7KVbDF;

1.17
date	2016.03.11.07.08.44;	author mmcc;	state Exp;
branches;
next	1.16;
commitid	MTdM7aVFdRMAzAYE;

1.16
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.08.09.24.53;	author jsing;	state Exp;
branches;
next	1.14;
commitid	XxMwLiDq7L4rxrmk;

1.14
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.06.04.20.04.55;	author logan;	state Exp;
branches;
next	1.12;
commitid	6BXIgCeBWCb3XZuz;

1.12
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.24;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.14;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.59;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.41;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.11.03;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.05.53.37;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.44;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.13;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.42;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: p12_kiss.c,v 1.18 2016/12/30 15:08:22 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/err.h>
#include <openssl/pkcs12.h>

/* Simplified PKCS#12 routines */

static int parse_pk12( PKCS12 *p12, const char *pass, int passlen,
    EVP_PKEY **pkey, STACK_OF(X509) *ocerts);

static int parse_bags( STACK_OF(PKCS12_SAFEBAG) *bags, const char *pass,
    int passlen, EVP_PKEY **pkey, STACK_OF(X509) *ocerts);

static int parse_bag( PKCS12_SAFEBAG *bag, const char *pass, int passlen,
    EVP_PKEY **pkey, STACK_OF(X509) *ocerts);

/* Parse and decrypt a PKCS#12 structure returning user key, user cert
 * and other (CA) certs. Note either ca should be NULL, *ca should be NULL,
 * or it should point to a valid STACK structure. pkey and cert can be
 * passed unitialised.
 */

int
PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
    STACK_OF(X509) **ca)
{
	STACK_OF(X509) *ocerts = NULL;
	X509 *x = NULL;
	/* Check for NULL PKCS12 structure */

	if (!p12) {
		PKCS12error(PKCS12_R_INVALID_NULL_PKCS12_POINTER);
		return 0;
	}

	if (pkey)
		*pkey = NULL;
	if (cert)
		*cert = NULL;

	/* Check the mac */

	/* If password is zero length or NULL then try verifying both cases
	 * to determine which password is correct. The reason for this is that
	 * under PKCS#12 password based encryption no password and a zero length
	 * password are two different things...
	 */

	if (!pass || !*pass) {
		if (PKCS12_verify_mac(p12, NULL, 0))
			pass = NULL;
		else if (PKCS12_verify_mac(p12, "", 0))
			pass = "";
		else {
			PKCS12error(PKCS12_R_MAC_VERIFY_FAILURE);
			goto err;
		}
	} else if (!PKCS12_verify_mac(p12, pass, -1)) {
		PKCS12error(PKCS12_R_MAC_VERIFY_FAILURE);
		goto err;
	}

	/* Allocate stack for other certificates */
	ocerts = sk_X509_new_null();
	if (!ocerts) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		return 0;
	}

	if (!parse_pk12 (p12, pass, -1, pkey, ocerts)) {
		PKCS12error(PKCS12_R_PARSE_ERROR);
		goto err;
	}

	while ((x = sk_X509_pop(ocerts))) {
		if (pkey && *pkey && cert && !*cert) {
			if (X509_check_private_key(x, *pkey)) {
				*cert = x;
				x = NULL;
			}
		}

		if (ca && x) {
			if (!*ca)
				*ca = sk_X509_new_null();
			if (!*ca)
				goto err;
			if (!sk_X509_push(*ca, x))
				goto err;
			x = NULL;
		}
		X509_free(x);
	}

	if (ocerts)
		sk_X509_pop_free(ocerts, X509_free);

	return 1;

err:
	if (pkey && *pkey)
		EVP_PKEY_free(*pkey);
	if (cert)
		X509_free(*cert);
	X509_free(x);
	if (ocerts)
		sk_X509_pop_free(ocerts, X509_free);
	return 0;
}

/* Parse the outer PKCS#12 structure */

static int
parse_pk12(PKCS12 *p12, const char *pass, int passlen, EVP_PKEY **pkey,
    STACK_OF(X509) *ocerts)
{
	STACK_OF(PKCS7) *asafes;
	STACK_OF(PKCS12_SAFEBAG) *bags;
	int i, bagnid;
	PKCS7 *p7;

	if (!(asafes = PKCS12_unpack_authsafes (p12)))
		return 0;
	for (i = 0; i < sk_PKCS7_num (asafes); i++) {
		p7 = sk_PKCS7_value (asafes, i);
		bagnid = OBJ_obj2nid (p7->type);
		if (bagnid == NID_pkcs7_data) {
			bags = PKCS12_unpack_p7data(p7);
		} else if (bagnid == NID_pkcs7_encrypted) {
			bags = PKCS12_unpack_p7encdata(p7, pass, passlen);
		} else
			continue;
		if (!bags) {
			sk_PKCS7_pop_free(asafes, PKCS7_free);
			return 0;
		}
		if (!parse_bags(bags, pass, passlen, pkey, ocerts)) {
			sk_PKCS12_SAFEBAG_pop_free(bags, PKCS12_SAFEBAG_free);
			sk_PKCS7_pop_free(asafes, PKCS7_free);
			return 0;
		}
		sk_PKCS12_SAFEBAG_pop_free(bags, PKCS12_SAFEBAG_free);
	}
	sk_PKCS7_pop_free(asafes, PKCS7_free);
	return 1;
}

static int
parse_bags(STACK_OF(PKCS12_SAFEBAG) *bags, const char *pass, int passlen,
    EVP_PKEY **pkey, STACK_OF(X509) *ocerts)
{
	int i;

	for (i = 0; i < sk_PKCS12_SAFEBAG_num(bags); i++) {
		if (!parse_bag(sk_PKCS12_SAFEBAG_value(bags, i), pass, passlen,
		    pkey, ocerts))
			return 0;
	}
	return 1;
}

static int
parse_bag(PKCS12_SAFEBAG *bag, const char *pass, int passlen, EVP_PKEY **pkey,
    STACK_OF(X509) *ocerts)
{
	PKCS8_PRIV_KEY_INFO *p8;
	X509 *x509;
	ASN1_TYPE *attrib;
	ASN1_BMPSTRING *fname = NULL;
	ASN1_OCTET_STRING *lkid = NULL;

	if ((attrib = PKCS12_get_attr (bag, NID_friendlyName)))
		fname = attrib->value.bmpstring;

	if ((attrib = PKCS12_get_attr (bag, NID_localKeyID)))
		lkid = attrib->value.octet_string;

	switch (OBJ_obj2nid(bag->type)) {
	case NID_keyBag:
		if (!pkey || *pkey)
			return 1;
		if (!(*pkey = EVP_PKCS82PKEY(bag->value.keybag)))
			return 0;
		break;

	case NID_pkcs8ShroudedKeyBag:
		if (!pkey || *pkey)
			return 1;
		if (!(p8 = PKCS12_decrypt_skey(bag, pass, passlen)))
			return 0;
		*pkey = EVP_PKCS82PKEY(p8);
		PKCS8_PRIV_KEY_INFO_free(p8);
		if (!(*pkey))
			return 0;
		break;

	case NID_certBag:
		if (OBJ_obj2nid(bag->value.bag->type) != NID_x509Certificate )
			return 1;
		if (!(x509 = PKCS12_certbag2x509(bag)))
			return 0;
		if (lkid && !X509_keyid_set1(x509, lkid->data, lkid->length)) {
			X509_free(x509);
			return 0;
		}
		if (fname) {
			int len, r;
			unsigned char *data;
			len = ASN1_STRING_to_UTF8(&data, fname);
			if (len >= 0) {
				r = X509_alias_set1(x509, data, len);
				free(data);
				if (!r) {
					X509_free(x509);
					return 0;
				}
			}
		}

		if (!sk_X509_push(ocerts, x509)) {
			X509_free(x509);
			return 0;
		}

		break;

	case NID_safeContentsBag:
		return parse_bags(bag->value.safes, pass, passlen,
		    pkey, ocerts);
		break;

	default:
		return 1;
		break;
	}
	return 1;
}
@


1.18
log
@Expand M_PKCS12_* "compatibility" macros. No change to generated assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_kiss.c,v 1.17 2016/03/11 07:08:44 mmcc Exp $ */
d90 1
a90 2
		PKCS12err(PKCS12_F_PKCS12_PARSE,
		    PKCS12_R_INVALID_NULL_PKCS12_POINTER);
d113 1
a113 2
			PKCS12err(PKCS12_F_PKCS12_PARSE,
			    PKCS12_R_MAC_VERIFY_FAILURE);
d117 1
a117 1
		PKCS12err(PKCS12_F_PKCS12_PARSE, PKCS12_R_MAC_VERIFY_FAILURE);
d124 1
a124 1
		PKCS12err(PKCS12_F_PKCS12_PARSE, ERR_R_MALLOC_FAILURE);
d129 1
a129 1
		PKCS12err(PKCS12_F_PKCS12_PARSE, PKCS12_R_PARSE_ERROR);
@


1.17
log
@X509_free(3) is NULL-safe, so remove NULL checks before its calls.

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_kiss.c,v 1.16 2014/07/11 08:44:49 jsing Exp $ */
d238 1
a238 1
	switch (M_PKCS12_bag_type(bag)) {
d258 1
a258 1
		if (M_PKCS12_cert_bag_type(bag) != NID_x509Certificate )
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_kiss.c,v 1.15 2014/07/08 09:24:53 jsing Exp $ */
d152 1
a152 2
		if (x)
			X509_free(x);
d163 1
a163 1
	if (cert && *cert)
d165 1
a165 2
	if (x)
		X509_free(x);
@


1.15
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_kiss.c,v 1.14 2014/06/12 15:49:30 deraadt Exp $ */
d60 2
a61 1
#include "cryptlib.h"
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d66 1
a66 1
		EVP_PKEY **pkey, STACK_OF(X509) *ocerts);
d69 1
a69 1
		       int passlen, EVP_PKEY **pkey, STACK_OF(X509) *ocerts);
d72 1
a72 1
			EVP_PKEY **pkey, STACK_OF(X509) *ocerts);
d80 3
a82 2
int PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
	     STACK_OF(X509) **ca)
d88 3
a90 3
	if(!p12)
		{
		PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_INVALID_NULL_PKCS12_POINTER);
d92 1
a92 1
		}
d94 1
a94 1
	if(pkey)
d96 1
a96 1
	if(cert)
d107 5
a111 3
	if(!pass || !*pass) {
		if(PKCS12_verify_mac(p12, NULL, 0)) pass = NULL;
		else if(PKCS12_verify_mac(p12, "", 0)) pass = "";
d113 2
a114 1
			PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_MAC_VERIFY_FAILURE);
d118 1
a118 1
		PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_MAC_VERIFY_FAILURE);
d124 2
a125 4

	if (!ocerts)
		{
		PKCS12err(PKCS12_F_PKCS12_PARSE,ERR_R_MALLOC_FAILURE);
d127 1
a127 1
		}
d129 2
a130 3
	if (!parse_pk12 (p12, pass, -1, pkey, ocerts))
		{
		PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_PARSE_ERROR);
d132 1
a132 1
		}
d134 3
a136 6
	while ((x = sk_X509_pop(ocerts)))
		{
		if (pkey && *pkey && cert && !*cert)
			{
			if (X509_check_private_key(x, *pkey))
				{
a138 1
				}
d140 1
d142 1
a142 2
		if (ca && x)
			{
d150 1
a150 1
			}
d153 1
a153 1
		}
d160 1
a160 2
 err:

a169 1

d174 3
a176 2
static int parse_pk12(PKCS12 *p12, const char *pass, int passlen,
	     EVP_PKEY **pkey, STACK_OF(X509) *ocerts)
d183 2
a184 1
	if (!(asafes = PKCS12_unpack_authsafes (p12))) return 0;
d192 2
a193 1
		} else continue;
d198 1
a198 1
	    	if (!parse_bags(bags, pass, passlen, pkey, ocerts)) {
d209 3
a211 3

static int parse_bags(STACK_OF(PKCS12_SAFEBAG) *bags, const char *pass,
		      int passlen, EVP_PKEY **pkey, STACK_OF(X509) *ocerts)
d214 1
d216 2
a217 2
		if (!parse_bag(sk_PKCS12_SAFEBAG_value (bags, i),
				 pass, passlen, pkey, ocerts))
d223 3
a225 2
static int parse_bag(PKCS12_SAFEBAG *bag, const char *pass, int passlen,
		     EVP_PKEY **pkey, STACK_OF(X509) *ocerts)
d239 1
a239 2
	switch (M_PKCS12_bag_type(bag))
	{
d242 1
a242 1
			return 1;	
d245 1
a245 1
	break;
d249 1
a249 1
			return 1;	
d251 1
a251 1
				return 0;
d254 3
a256 2
		if (!(*pkey)) return 0;
	break;
d263 1
a263 2
		if(lkid && !X509_keyid_set1(x509, lkid->data, lkid->length))
			{
d266 2
a267 2
			}
		if(fname) {
d271 1
a271 1
			if(len >= 0) {
d274 1
a274 2
				if (!r)
					{
d277 1
a277 1
					}
d281 1
a281 2
		if(!sk_X509_push(ocerts, x509))
			{
d284 1
a284 1
			}
d286 1
a286 1
	break;
d290 2
a291 2
			 		pkey, ocerts);
	break;
d295 1
a295 1
	break;
a298 1

@


1.13
log
@Fix a leak that can occur when len == 0, and as a result we leak a \0 byte.

(From Frantisek Boranek)

OK from miod@@
@
text
@d1 1
a1 1
/* p12_kiss.c */
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d272 1
a272 1
			if(len > 0) {
@


1.11
log
@resolve conflicts
@
text
@d274 1
a274 1
				OPENSSL_free(data);
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d170 1
a170 1
		X509_free(*cert);
@


1.9
log
@resolve conflicts
@
text
@d66 1
a66 1
		EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca);
d69 1
a69 3
		       int passlen, EVP_PKEY **pkey, X509 **cert,
		       STACK_OF(X509) **ca, ASN1_OCTET_STRING **keyid,
		       char *keymatch);
d72 1
a72 2
			EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca,
			ASN1_OCTET_STRING **keyid, char *keymatch);
d83 2
a84 1

d87 2
a88 1
	if(!p12) {
a90 7
	}

	/* Allocate stack for ca certificates if needed */
	if ((ca != NULL) && (*ca == NULL)) {
		if (!(*ca = sk_X509_new_null())) {
			PKCS12err(PKCS12_F_PKCS12_PARSE,ERR_R_MALLOC_FAILURE);
			return 0;
a91 1
	}
d93 4
a96 2
	if(pkey) *pkey = NULL;
	if(cert) *cert = NULL;
d118 10
a127 1
	if (!parse_pk12 (p12, pass, -1, pkey, cert, ca))
d133 28
d165 8
a172 3
	if (pkey && *pkey) EVP_PKEY_free(*pkey);
	if (cert && *cert) X509_free(*cert);
	if (ca) sk_X509_pop_free(*ca, X509_free);
d180 1
a180 1
	     EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca)
a185 1
	ASN1_OCTET_STRING *keyid = NULL;
a186 1
	char keymatch = 0;
d200 1
a200 2
	    	if (!parse_bags(bags, pass, passlen, pkey, cert, ca,
							 &keyid, &keymatch)) {
a207 1
	if (keyid) M_ASN1_OCTET_STRING_free(keyid);
d213 1
a213 3
		      int passlen, EVP_PKEY **pkey, X509 **cert,
		      STACK_OF(X509) **ca, ASN1_OCTET_STRING **keyid,
		      char *keymatch)
d218 2
a219 2
			 pass, passlen, pkey, cert, ca, keyid,
							 keymatch)) return 0;
a223 4
#define MATCH_KEY  0x1
#define MATCH_CERT 0x2
#define MATCH_ALL  0x3

d225 1
a225 3
		     EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca,
		     ASN1_OCTET_STRING **keyid,
		     char *keymatch)
a228 1
	ASN1_OCTET_STRING *lkey = NULL, *ckid = NULL;
d231 1
d236 2
a237 4
	if ((attrib = PKCS12_get_attr (bag, NID_localKeyID))) {
		lkey = attrib->value.octet_string;
		ckid = lkey;
	}
a238 12
	/* Check for any local key id matching (if needed) */
	if (lkey && ((*keymatch & MATCH_ALL) != MATCH_ALL)) {
		if (*keyid) {
			if (M_ASN1_OCTET_STRING_cmp(*keyid, lkey)) lkey = NULL;
		} else {
			if (!(*keyid = M_ASN1_OCTET_STRING_dup(lkey))) {
				PKCS12err(PKCS12_F_PARSE_BAG,ERR_R_MALLOC_FAILURE);
				return 0;
		    }
		}
	}
	
d242 4
a245 3
		if (!lkey || !pkey) return 1;	
		if (!(*pkey = EVP_PKCS82PKEY(bag->value.keybag))) return 0;
		*keymatch |= MATCH_KEY;
d249 2
a250 1
		if (!lkey || !pkey) return 1;	
a255 1
		*keymatch |= MATCH_KEY;
d260 4
a263 3
								 return 1;
		if (!(x509 = PKCS12_certbag2x509(bag))) return 0;
		if(ckid)
d265 2
a266 5
			if (!X509_keyid_set1(x509, ckid->data, ckid->length))
				{
				X509_free(x509);
				return 0;
				}
d283 5
a288 8
		if (lkey) {
			*keymatch |= MATCH_CERT;
			if (cert) *cert = x509;
			else X509_free(x509);
		} else {
			if(ca) sk_X509_push (*ca, x509);
			else X509_free(x509);
		}
d293 1
a293 1
			 		pkey, cert, ca, keyid, keymatch);
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@resolve conflicts
@
text
@d83 1
a83 1
int PKCS12_parse (PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
d144 1
a144 1
static int parse_pk12 (PKCS12 *p12, const char *pass, int passlen,
d181 4
a184 4
static int parse_bags (STACK_OF(PKCS12_SAFEBAG) *bags, const char *pass,
		       int passlen, EVP_PKEY **pkey, X509 **cert,
		       STACK_OF(X509) **ca, ASN1_OCTET_STRING **keyid,
		       char *keymatch)
d200 3
a202 3
		      EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca,
		      ASN1_OCTET_STRING **keyid,
	     char *keymatch)
d224 1
a224 1
				PKCS12err(PKCS12_F_PARSE_BAGS,ERR_R_MALLOC_FAILURE);
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d252 8
a259 1
		if(ckid) X509_keyid_set1(x509, ckid->data, ckid->length);
d261 1
a261 1
			int len;
d265 1
a265 1
				X509_alias_set1(x509, data, len);
d267 5
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d154 1
a154 1
	if (!( asafes = M_PKCS12_unpack_authsafes (p12))) return 0;
d159 1
a159 1
			bags = M_PKCS12_unpack_p7data(p7);
d161 1
a161 1
			bags = M_PKCS12_unpack_p7encdata(p7, pass, passlen);
d240 1
a240 1
		if (!(p8 = M_PKCS12_decrypt_skey(bag, pass, passlen)))
d251 1
a251 1
		if (!(x509 = M_PKCS12_certbag2x509(bag))) return 0;
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d267 1
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d68 4
a71 3
static int parse_bags( STACK *bags, const char *pass, int passlen,
		EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca,
		ASN1_OCTET_STRING **keyid, char *keymatch);
d89 1
a89 2
	if(!p12)
		{
d92 1
a92 1
		}
d95 2
a96 4
	if ((ca != NULL) && (*ca == NULL))
		{
		if (!(*ca = sk_X509_new(NULL)))
			{
a98 1
			}
d100 1
d107 14
a120 2
	if (!PKCS12_verify_mac (p12, pass, -1))
		{
d123 1
a123 1
		}
d135 3
a137 3
	if (pkey && *pkey) EVP_PKEY_free (*pkey);
	if (cert && *cert) X509_free (*cert);
	if (ca) sk_X509_pop_free (*ca, X509_free);
d147 2
a148 1
	STACK *asafes, *bags;
d152 1
d155 2
a156 2
	for (i = 0; i < sk_num (asafes); i++) {
		p7 = (PKCS7 *) sk_value (asafes, i);
d159 1
a159 1
			bags = M_PKCS12_unpack_p7data (p7);
d161 1
a161 1
			bags = M_PKCS12_unpack_p7encdata (p7, pass, passlen);
d164 1
a164 1
			sk_pop_free (asafes, PKCS7_free);
d169 2
a170 2
			sk_pop_free(bags, PKCS12_SAFEBAG_free);
			sk_pop_free(asafes, PKCS7_free);
d173 1
a173 1
		sk_pop_free(bags, PKCS12_SAFEBAG_free);
d175 1
a175 1
	sk_pop_free(asafes, PKCS7_free);
d181 4
a184 3
static int parse_bags (STACK *bags, const char *pass, int passlen,
		       EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca,
		       ASN1_OCTET_STRING **keyid, char *keymatch)
d187 2
a188 2
	for (i = 0; i < sk_num(bags); i++) {
		if (!parse_bag((PKCS12_SAFEBAG *)sk_value (bags, i),
d206 1
a206 1
	ASN1_OCTET_STRING *lkey = NULL;
d208 1
d210 2
d213 4
a216 2
	if ((attrib = PKCS12_get_attr (bag, NID_localKeyID)))
		    			    lkey = attrib->value.octet_string;
d252 12
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 11
a75 3
static int parse_pk12( PKCS12 *p12, const char *pass, int passlen, EVP_PKEY **pkey, X509 **cert, STACK **ca);
static int parse_bags( STACK *bags, const char *pass, int passlen, EVP_PKEY **pkey, X509 **cert, STACK **ca, ASN1_OCTET_STRING **keyid, char *keymatch);
static int parse_bag( PKCS12_SAFEBAG *bag, const char *pass, int passlen, EVP_PKEY **pkey, X509 **cert, STACK **ca, ASN1_OCTET_STRING **keyid, char *keymatch);
d83 1
a83 1
	     STACK **ca)
d86 1
a86 1
/* Check for NULL PKCS12 structure */
d88 5
a92 4
if(!p12) {
	PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_INVALID_NULL_PKCS12_POINTER);
	return 0;
}
d94 9
a102 7
/* Allocate stack for ca certificates if needed */
if ((ca != NULL) && (*ca == NULL)) {
	if (!(*ca = sk_new(NULL))) {
		PKCS12err(PKCS12_F_PKCS12_PARSE,ERR_R_MALLOC_FAILURE);
		return 0;
	}
}
d104 2
a105 2
if(pkey) *pkey = NULL;
if(cert) *cert = NULL;
d107 1
a107 1
/* Check the mac */
d109 5
a113 4
if (!PKCS12_verify_mac (p12, pass, -1)) {
	PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_MAC_VERIFY_FAILURE);
	goto err;
}
d115 5
a119 4
if (!parse_pk12 (p12, pass, -1, pkey, cert, ca)) {
	PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_PARSE_ERROR);
	goto err;
}
d121 1
a121 1
return 1;
d123 1
a123 1
err:
d125 4
a128 4
if (pkey && *pkey) EVP_PKEY_free (*pkey);
if (cert && *cert) X509_free (*cert);
if (ca) sk_pop_free (*ca, X509_free);
return 0;
d135 1
a135 1
	     EVP_PKEY **pkey, X509 **cert, STACK **ca)
d170 1
a170 1
		       EVP_PKEY **pkey, X509 **cert, STACK **ca,
d187 1
a187 1
		      EVP_PKEY **pkey, X509 **cert, STACK **ca,
d237 4
a240 1
		} else if (ca) sk_push (*ca, (char *)x509);
@


1.1
log
@new files for OpenSSL 0.9.4
@
text
@d142 1
a142 1
	    	if (!parse_bags (bags, pass, passlen, pkey, cert, ca,
d144 2
a145 2
			sk_pop_free (bags, PKCS12_SAFEBAG_free);
			sk_pop_free (asafes, PKCS7_free);
d148 1
a148 1
		sk_pop_free (bags, PKCS12_SAFEBAG_free);
d150 2
a151 2
	sk_pop_free (asafes, PKCS7_free);
	if (keyid) ASN1_OCTET_STRING_free (keyid);
d161 2
a162 2
	for (i = 0; i < sk_num (bags); i++) {
		if (!parse_bag ((PKCS12_SAFEBAG *)sk_value (bags, i),
d173 1
a173 1
static int parse_bag (PKCS12_SAFEBAG *bag, const char *pass, int passlen,
d190 1
a190 1
			if (ASN1_OCTET_STRING_cmp (*keyid, lkey)) lkey = NULL;
d192 1
a192 1
			if (!(*keyid = ASN1_OCTET_STRING_dup (lkey))) {
d203 1
a203 1
		if (!(*pkey = EVP_PKCS82PKEY (bag->value.keybag))) return 0;
d209 1
a209 1
		if (!(p8 = M_PKCS12_decrypt_skey (bag, pass, passlen)))
d211 2
a212 2
		*pkey = EVP_PKCS82PKEY (p8);
		PKCS8_PRIV_KEY_INFO_free (p8);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d65 3
a67 12
static int parse_pk12( PKCS12 *p12, const char *pass, int passlen,
		EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca);

static int parse_bags( STACK_OF(PKCS12_SAFEBAG) *bags, const char *pass,
		       int passlen, EVP_PKEY **pkey, X509 **cert,
		       STACK_OF(X509) **ca, ASN1_OCTET_STRING **keyid,
		       char *keymatch);

static int parse_bag( PKCS12_SAFEBAG *bag, const char *pass, int passlen,
			EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca,
			ASN1_OCTET_STRING **keyid, char *keymatch);

d75 1
a75 1
	     STACK_OF(X509) **ca)
d78 6
a83 1
	/* Check for NULL PKCS12 structure */
d85 4
a88 2
	if(!p12) {
		PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_INVALID_NULL_PKCS12_POINTER);
d91 1
d93 2
a94 7
	/* Allocate stack for ca certificates if needed */
	if ((ca != NULL) && (*ca == NULL)) {
		if (!(*ca = sk_X509_new_null())) {
			PKCS12err(PKCS12_F_PKCS12_PARSE,ERR_R_MALLOC_FAILURE);
			return 0;
		}
	}
d96 1
a96 2
	if(pkey) *pkey = NULL;
	if(cert) *cert = NULL;
d98 4
a101 1
	/* Check the mac */
d103 4
a106 23
	/* If password is zero length or NULL then try verifying both cases
	 * to determine which password is correct. The reason for this is that
	 * under PKCS#12 password based encryption no password and a zero length
	 * password are two different things...
	 */

	if(!pass || !*pass) {
		if(PKCS12_verify_mac(p12, NULL, 0)) pass = NULL;
		else if(PKCS12_verify_mac(p12, "", 0)) pass = "";
		else {
			PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_MAC_VERIFY_FAILURE);
			goto err;
		}
	} else if (!PKCS12_verify_mac(p12, pass, -1)) {
		PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_MAC_VERIFY_FAILURE);
		goto err;
	}

	if (!parse_pk12 (p12, pass, -1, pkey, cert, ca))
		{
		PKCS12err(PKCS12_F_PKCS12_PARSE,PKCS12_R_PARSE_ERROR);
		goto err;
		}
d108 1
a108 1
	return 1;
d110 1
a110 1
 err:
d112 4
a115 4
	if (pkey && *pkey) EVP_PKEY_free(*pkey);
	if (cert && *cert) X509_free(*cert);
	if (ca) sk_X509_pop_free(*ca, X509_free);
	return 0;
d122 1
a122 1
	     EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca)
d124 1
a124 2
	STACK_OF(PKCS7) *asafes;
	STACK_OF(PKCS12_SAFEBAG) *bags;
a127 1

d129 3
a131 3
	if (!(asafes = PKCS12_unpack_authsafes (p12))) return 0;
	for (i = 0; i < sk_PKCS7_num (asafes); i++) {
		p7 = sk_PKCS7_value (asafes, i);
d134 1
a134 1
			bags = PKCS12_unpack_p7data(p7);
d136 1
a136 1
			bags = PKCS12_unpack_p7encdata(p7, pass, passlen);
d139 1
a139 1
			sk_PKCS7_pop_free(asafes, PKCS7_free);
d142 1
a142 1
	    	if (!parse_bags(bags, pass, passlen, pkey, cert, ca,
d144 2
a145 2
			sk_PKCS12_SAFEBAG_pop_free(bags, PKCS12_SAFEBAG_free);
			sk_PKCS7_pop_free(asafes, PKCS7_free);
d148 1
a148 1
		sk_PKCS12_SAFEBAG_pop_free(bags, PKCS12_SAFEBAG_free);
d150 2
a151 2
	sk_PKCS7_pop_free(asafes, PKCS7_free);
	if (keyid) M_ASN1_OCTET_STRING_free(keyid);
d156 3
a158 4
static int parse_bags (STACK_OF(PKCS12_SAFEBAG) *bags, const char *pass,
		       int passlen, EVP_PKEY **pkey, X509 **cert,
		       STACK_OF(X509) **ca, ASN1_OCTET_STRING **keyid,
		       char *keymatch)
d161 2
a162 2
	for (i = 0; i < sk_PKCS12_SAFEBAG_num(bags); i++) {
		if (!parse_bag(sk_PKCS12_SAFEBAG_value (bags, i),
d173 2
a174 2
static int parse_bag(PKCS12_SAFEBAG *bag, const char *pass, int passlen,
		      EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca,
d180 1
a180 1
	ASN1_OCTET_STRING *lkey = NULL, *ckid = NULL;
a181 1
	ASN1_BMPSTRING *fname = NULL;
a182 2
	if ((attrib = PKCS12_get_attr (bag, NID_friendlyName)))
		fname = attrib->value.bmpstring;
d184 2
a185 4
	if ((attrib = PKCS12_get_attr (bag, NID_localKeyID))) {
		lkey = attrib->value.octet_string;
		ckid = lkey;
	}
d190 1
a190 1
			if (M_ASN1_OCTET_STRING_cmp(*keyid, lkey)) lkey = NULL;
d192 1
a192 1
			if (!(*keyid = M_ASN1_OCTET_STRING_dup(lkey))) {
d203 1
a203 1
		if (!(*pkey = EVP_PKCS82PKEY(bag->value.keybag))) return 0;
d209 1
a209 1
		if (!(p8 = PKCS12_decrypt_skey(bag, pass, passlen)))
d211 2
a212 2
		*pkey = EVP_PKCS82PKEY(p8);
		PKCS8_PRIV_KEY_INFO_free(p8);
d220 1
a220 13
		if (!(x509 = PKCS12_certbag2x509(bag))) return 0;
		if(ckid) X509_keyid_set1(x509, ckid->data, ckid->length);
		if(fname) {
			int len;
			unsigned char *data;
			len = ASN1_STRING_to_UTF8(&data, fname);
			if(len > 0) {
				X509_alias_set1(x509, data, len);
				OPENSSL_free(data);
			}
		}


d224 1
a224 5
			else X509_free(x509);
		} else {
			if(ca) sk_X509_push (*ca, x509);
			else X509_free(x509);
		}
@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d252 1
a252 8
		if(ckid)
			{
			if (!X509_keyid_set1(x509, ckid->data, ckid->length))
				{
				X509_free(x509);
				return 0;
				}
			}
d254 1
a254 1
			int len, r;
d258 1
a258 1
				r = X509_alias_set1(x509, data, len);
a259 5
				if (!r)
					{
					X509_free(x509);
					return 0;
					}
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d83 1
a83 1
int PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
d144 1
a144 1
static int parse_pk12(PKCS12 *p12, const char *pass, int passlen,
d181 4
a184 4
static int parse_bags(STACK_OF(PKCS12_SAFEBAG) *bags, const char *pass,
		      int passlen, EVP_PKEY **pkey, X509 **cert,
		      STACK_OF(X509) **ca, ASN1_OCTET_STRING **keyid,
		      char *keymatch)
d200 3
a202 3
		     EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca,
		     ASN1_OCTET_STRING **keyid,
		     char *keymatch)
d224 1
a224 1
				PKCS12err(PKCS12_F_PARSE_BAG,ERR_R_MALLOC_FAILURE);
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d66 1
a66 1
		EVP_PKEY **pkey, STACK_OF(X509) *ocerts);
d69 3
a71 1
		       int passlen, EVP_PKEY **pkey, STACK_OF(X509) *ocerts);
d74 2
a75 1
			EVP_PKEY **pkey, STACK_OF(X509) *ocerts);
d86 1
a86 2
	STACK_OF(X509) *ocerts = NULL;
	X509 *x = NULL;
d89 1
a89 2
	if(!p12)
		{
d92 7
d100 1
d102 2
a103 4
	if(pkey)
		*pkey = NULL;
	if(cert)
		*cert = NULL;
d125 1
a125 10
	/* Allocate stack for other certificates */
	ocerts = sk_X509_new_null();

	if (!ocerts)
		{
		PKCS12err(PKCS12_F_PKCS12_PARSE,ERR_R_MALLOC_FAILURE);
		return 0;
		}

	if (!parse_pk12 (p12, pass, -1, pkey, ocerts))
a130 28
	while ((x = sk_X509_pop(ocerts)))
		{
		if (pkey && *pkey && cert && !*cert)
			{
			if (X509_check_private_key(x, *pkey))
				{
				*cert = x;
				x = NULL;
				}
			}

		if (ca && x)
			{
			if (!*ca)
				*ca = sk_X509_new_null();
			if (!*ca)
				goto err;
			if (!sk_X509_push(*ca, x))
				goto err;
			x = NULL;
			}
		if (x)
			X509_free(x);
		}

	if (ocerts)
		sk_X509_pop_free(ocerts, X509_free);

d135 3
a137 8
	if (pkey && *pkey)
		EVP_PKEY_free(*pkey);
	if (cert && *cert)
		X509_free(*cert);
	if (x)
		X509_free(*cert);
	if (ocerts)
		sk_X509_pop_free(ocerts, X509_free);
d145 1
a145 1
	     EVP_PKEY **pkey, STACK_OF(X509) *ocerts)
d151 1
d153 1
d167 2
a168 1
	    	if (!parse_bags(bags, pass, passlen, pkey, ocerts)) {
d176 1
d182 3
a184 1
		      int passlen, EVP_PKEY **pkey, STACK_OF(X509) *ocerts)
d189 2
a190 2
				 pass, passlen, pkey, ocerts))
			return 0;
d195 4
d200 3
a202 1
		     EVP_PKEY **pkey, STACK_OF(X509) *ocerts)
d206 1
a208 1
	ASN1_OCTET_STRING *lkid = NULL;
d213 4
a216 2
	if ((attrib = PKCS12_get_attr (bag, NID_localKeyID)))
		lkid = attrib->value.octet_string;
d218 12
d233 3
a235 4
		if (!pkey || *pkey)
			return 1;	
		if (!(*pkey = EVP_PKCS82PKEY(bag->value.keybag)))
			return 0;
d239 1
a239 2
		if (!pkey || *pkey)
			return 1;	
d245 1
d250 3
a252 4
			return 1;
		if (!(x509 = PKCS12_certbag2x509(bag)))
			return 0;
		if(lkid && !X509_keyid_set1(x509, lkid->data, lkid->length))
d254 5
a258 2
			X509_free(x509);
			return 0;
a274 5
		if(!sk_X509_push(ocerts, x509))
			{
			X509_free(x509);
			return 0;
			}
d276 8
d288 1
a288 1
			 		pkey, ocerts);
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d170 1
a170 1
		X509_free(x);
@


