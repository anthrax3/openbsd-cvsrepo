head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.2
	OPENBSD_6_1_BASE:1.18;
locks; strict;
comment	@ * @;


1.18
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.17;
commitid	kT0fLt3r4lroFJra;

1.17
date	2015.09.30.18.41.06;	author jsing;	state Exp;
branches;
next	1.16;
commitid	8UbnRNonXjerilzx;

1.16
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.15;
commitid	vHznCDK3idwNEFz4;

1.15
date	2015.05.15.11.00.14;	author jsg;	state Exp;
branches;
next	1.14;
commitid	DVhfXEEmSZcth64F;

1.14
date	2015.02.14.12.43.07;	author miod;	state Exp;
branches;
next	1.13;
commitid	UdJZJZYRCFvHGcy3;

1.13
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.12;
commitid	yQEL1wOWIearrW15;

1.12
date	2014.07.10.10.01.23;	author miod;	state Exp;
branches;
next	1.11;
commitid	AXnNZsJQFmsoQvHj;

1.11
date	2014.07.08.09.24.53;	author jsing;	state Exp;
branches;
next	1.10;
commitid	XxMwLiDq7L4rxrmk;

1.10
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.59;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.11.02;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.05.53.36;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.44;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.39;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.42;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: p12_decr.c,v 1.17 2015/09/30 18:41:06 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/pkcs12.h>

/* Encrypt/Decrypt a buffer based on password and algor, result in a
 * malloc'ed buffer
 */

unsigned char *
PKCS12_pbe_crypt(X509_ALGOR *algor, const char *pass, int passlen,
    unsigned char *in, int inlen, unsigned char **data, int *datalen, int en_de)
{
	unsigned char *out;
	int outlen, i;
	EVP_CIPHER_CTX ctx;

	EVP_CIPHER_CTX_init(&ctx);
	/* Decrypt data */
	if (!EVP_PBE_CipherInit(algor->algorithm, pass, passlen,
	    algor->parameter, &ctx, en_de)) {
		out = NULL;
		PKCS12error(PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR);
		goto err;
	}

	if (!(out = malloc(inlen + EVP_CIPHER_CTX_block_size(&ctx)))) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (!EVP_CipherUpdate(&ctx, out, &i, in, inlen)) {
		free(out);
		out = NULL;
		PKCS12error(ERR_R_EVP_LIB);
		goto err;
	}

	outlen = i;
	if (!EVP_CipherFinal_ex(&ctx, out + i, &i)) {
		free(out);
		out = NULL;
		PKCS12error(PKCS12_R_PKCS12_CIPHERFINAL_ERROR);
		goto err;
	}
	outlen += i;
	if (datalen)
		*datalen = outlen;
	if (data)
		*data = out;

err:
	EVP_CIPHER_CTX_cleanup(&ctx);
	return out;

}

/* Decrypt an OCTET STRING and decode ASN1 structure
 * if zbuf set zero buffer after use.
 */

void *
PKCS12_item_decrypt_d2i(X509_ALGOR *algor, const ASN1_ITEM *it,
    const char *pass, int passlen, ASN1_OCTET_STRING *oct, int zbuf)
{
	unsigned char *out;
	const unsigned char *p;
	void *ret;
	int outlen;

	if (!PKCS12_pbe_crypt(algor, pass, passlen, oct->data, oct->length,
	    &out, &outlen, 0)) {
		PKCS12error(PKCS12_R_PKCS12_PBE_CRYPT_ERROR);
		return NULL;
	}
	p = out;
	ret = ASN1_item_d2i(NULL, &p, outlen, it);
	if (zbuf)
		explicit_bzero(out, outlen);
	if (!ret)
		PKCS12error(PKCS12_R_DECODE_ERROR);
	free(out);
	return ret;
}

/* Encode ASN1 structure and encrypt, return OCTET STRING
 * if zbuf set zero encoding.
 */

ASN1_OCTET_STRING *
PKCS12_item_i2d_encrypt(X509_ALGOR *algor, const ASN1_ITEM *it,
    const char *pass, int passlen,
    void *obj, int zbuf)
{
	ASN1_OCTET_STRING *oct;
	unsigned char *in = NULL;
	int inlen;

	if (!(oct = ASN1_OCTET_STRING_new ())) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	inlen = ASN1_item_i2d(obj, &in, it);
	if (!in) {
		PKCS12error(PKCS12_R_ENCODE_ERROR);
		goto err;
	}
	if (!PKCS12_pbe_crypt(algor, pass, passlen, in, inlen, &oct->data,
	    &oct->length, 1)) {
		PKCS12error(PKCS12_R_ENCRYPT_ERROR);
		goto err;
	}
	if (zbuf)
		explicit_bzero(in, inlen);
	free(in);
	return oct;

err:
	free(in);
	ASN1_OCTET_STRING_free(oct);
	return NULL;
}

IMPLEMENT_PKCS12_STACK_OF(PKCS7)
@


1.17
log
@Replace M_ASN1_OCTET_STRING_(free|new) with ASN1_OCTET_STRING_(free|new).
@
text
@d1 1
a1 1
/* $OpenBSD: p12_decr.c,v 1.16 2015/09/10 15:56:25 jsing Exp $ */
d82 1
a82 2
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT,
		    PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR);
d87 1
a87 1
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT, ERR_R_MALLOC_FAILURE);
d94 1
a94 1
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT, ERR_R_EVP_LIB);
d102 1
a102 2
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT,
		    PKCS12_R_PKCS12_CIPHERFINAL_ERROR);
d132 1
a132 2
		PKCS12err(PKCS12_F_PKCS12_ITEM_DECRYPT_D2I,
		    PKCS12_R_PKCS12_PBE_CRYPT_ERROR);
d140 1
a140 2
		PKCS12err(PKCS12_F_PKCS12_ITEM_DECRYPT_D2I,
		    PKCS12_R_DECODE_ERROR);
d159 1
a159 2
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,
		    ERR_R_MALLOC_FAILURE);
d164 1
a164 2
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,
		    PKCS12_R_ENCODE_ERROR);
d169 1
a169 2
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,
		    PKCS12_R_ENCRYPT_ERROR);
@


1.16
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_decr.c,v 1.15 2015/05/15 11:00:14 jsg Exp $ */
d162 1
a162 1
	if (!(oct = M_ASN1_OCTET_STRING_new ())) {
d186 1
a186 1
	M_ASN1_OCTET_STRING_free(oct);
@


1.15
log
@Fix return paths with missing EVP_CIPHER_CTX_cleanup() calls.
ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_decr.c,v 1.14 2015/02/14 12:43:07 miod Exp $ */
d60 1
d141 1
a141 1
		OPENSSL_cleanse(out, outlen);
d180 1
a180 1
		OPENSSL_cleanse(in, inlen);
@


1.14
log
@Try and fix a bunch of memory leaks upon error;
ok tedu@@ about 7 months ago and I was sitting upon this diff for no reason
@
text
@d1 1
a1 1
/* $OpenBSD: p12_decr.c,v 1.13 2014/07/11 08:44:49 jsing Exp $ */
d80 1
d83 1
a83 1
		return NULL;
@


1.13
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_decr.c,v 1.12 2014/07/10 10:01:23 miod Exp $ */
d169 1
a169 1
		return NULL;
d175 1
a175 2
		free(in);
		return NULL;
d181 5
@


1.12
log
@Remove DEBUG_KEYGEN and DEBUG_DECRYPT support.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_decr.c,v 1.11 2014/07/08 09:24:53 jsing Exp $ */
d60 2
a61 1
#include "cryptlib.h"
a62 1

@


1.11
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_decr.c,v 1.10 2014/06/12 15:49:30 deraadt Exp $ */
a62 3
/* Define this to dump decrypted output to files called DERnnn */
/*#define DEBUG_DECRYPT*/

a136 12
#ifdef DEBUG_DECRYPT
	{
		FILE *op;

		char fname[30];
		static int fnm = 1;
		sprintf(fname, "DER%d", fnm++);
		op = fopen(fname, "wb");
		fwrite (p, 1, outlen, op);
		fclose(op);
	}
#endif
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d71 3
a73 3
unsigned char * PKCS12_pbe_crypt(X509_ALGOR *algor, const char *pass,
	     int passlen, unsigned char *in, int inlen, unsigned char **data,
	     int *datalen, int en_de)
d81 4
a84 3
        if (!EVP_PBE_CipherInit(algor->algorithm, pass, passlen,
					 algor->parameter, &ctx, en_de)) {
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT,PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR);
d88 2
a89 2
	if(!(out = malloc(inlen + EVP_CIPHER_CTX_block_size(&ctx)))) {
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT,ERR_R_MALLOC_FAILURE);
d93 1
a93 2
	if (!EVP_CipherUpdate(&ctx, out, &i, in, inlen))
		{
d96 1
a96 1
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT,ERR_R_EVP_LIB);
d98 1
a98 1
		}
d101 1
a101 1
	if(!EVP_CipherFinal_ex(&ctx, out + i, &i)) {
d104 2
a105 1
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT,PKCS12_R_PKCS12_CIPHERFINAL_ERROR);
d109 6
a114 3
	if (datalen) *datalen = outlen;
	if (data) *data = out;
	err:
d120 1
a120 1
/* Decrypt an OCTET STRING and decode ASN1 structure 
d124 3
a126 2
void * PKCS12_item_decrypt_d2i(X509_ALGOR *algor, const ASN1_ITEM *it,
	     const char *pass, int passlen, ASN1_OCTET_STRING *oct, int zbuf)
d134 3
a136 2
			       &out, &outlen, 0)) {
		PKCS12err(PKCS12_F_PKCS12_ITEM_DECRYPT_D2I,PKCS12_R_PKCS12_PBE_CRYPT_ERROR);
d153 5
a157 2
	if (zbuf) OPENSSL_cleanse(out, outlen);
	if(!ret) PKCS12err(PKCS12_F_PKCS12_ITEM_DECRYPT_D2I,PKCS12_R_DECODE_ERROR);
d162 1
a162 1
/* Encode ASN1 structure and encrypt, return OCTET STRING 
d166 4
a169 3
ASN1_OCTET_STRING *PKCS12_item_i2d_encrypt(X509_ALGOR *algor, const ASN1_ITEM *it,
				       const char *pass, int passlen,
				       void *obj, int zbuf)
d174 1
d176 2
a177 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,ERR_R_MALLOC_FAILURE);
d182 2
a183 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,PKCS12_R_ENCODE_ERROR);
d187 3
a189 2
				 &oct->length, 1)) {
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,PKCS12_R_ENCRYPT_ERROR);
d193 2
a194 1
	if (zbuf) OPENSSL_cleanse(in, inlen);
@


1.9
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d1 1
a1 1
/* p12_decr.c */
@


1.8
log
@resolve conflicts
@
text
@d68 1
a68 1
 * OPENSSL_malloc'ed buffer
d87 1
a87 1
	if(!(out = OPENSSL_malloc(inlen + EVP_CIPHER_CTX_block_size(&ctx)))) {
d94 1
a94 1
		OPENSSL_free(out);
d102 1
a102 1
		OPENSSL_free(out);
d149 1
a149 1
	OPENSSL_free(out);
d176 1
a176 1
		OPENSSL_free(in);
d180 1
a180 1
	OPENSSL_free(in);
@


1.7
log
@resolve conflicts
@
text
@d92 8
a99 1
	EVP_CipherUpdate(&ctx, out, &i, in, inlen);
@


1.6
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d116 2
a117 1
	unsigned char *out, *p;
d123 1
a123 1
		PKCS12err(PKCS12_F_PKCS12_DECRYPT_D2I,PKCS12_R_PKCS12_PBE_CRYPT_ERROR);
d141 1
a141 1
	if(!ret) PKCS12err(PKCS12_F_PKCS12_DECRYPT_D2I,PKCS12_R_DECODE_ERROR);
d158 1
a158 1
		PKCS12err(PKCS12_F_PKCS12_I2D_ENCRYPT,ERR_R_MALLOC_FAILURE);
d163 1
a163 1
		PKCS12err(PKCS12_F_PKCS12_I2D_ENCRYPT,PKCS12_R_ENCODE_ERROR);
d168 1
a168 1
		PKCS12err(PKCS12_F_PKCS12_I2D_ENCRYPT,PKCS12_R_ENCRYPT_ERROR);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d139 1
a139 1
	if (zbuf) memset(out, 0, outlen);
d171 1
a171 1
	if (zbuf) memset(in, 0, inlen);
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d71 1
a71 1
unsigned char * PKCS12_pbe_crypt (X509_ALGOR *algor, const char *pass,
d79 1
d81 1
a81 1
        if (!EVP_PBE_CipherInit (algor->algorithm, pass, passlen,
d87 1
a87 1
	if(!(out = OPENSSL_malloc (inlen + EVP_CIPHER_CTX_block_size(&ctx)))) {
d89 1
a89 1
		return NULL;
d92 1
a92 1
	EVP_CipherUpdate (&ctx, out, &i, in, inlen);
d94 3
a96 2
	if(!EVP_CipherFinal (&ctx, out + i, &i)) {
		OPENSSL_free (out);
d98 1
a98 1
		return NULL;
d103 2
d110 1
a110 3
 * if seq & 1 'obj' is a stack of structures to be encoded
 * if seq & 2 zero buffer after use
 * as a sequence.
d113 2
a114 3
char * PKCS12_decrypt_d2i (X509_ALGOR *algor, char * (*d2i)(),
	     void (*free_func)(void *), const char *pass, int passlen,
	     ASN1_OCTET_STRING *oct, int seq)
d117 1
a117 1
	char *ret;
d120 1
a120 1
	if (!PKCS12_pbe_crypt (algor, pass, passlen, oct->data, oct->length,
d138 2
a139 4
	if (seq & 1) ret = (char *) d2i_ASN1_SET(NULL, &p, outlen, d2i,
				free_func, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
	else ret = d2i(NULL, &p, outlen);
	if (seq & 2) memset(out, 0, outlen);
d141 1
a141 1
	OPENSSL_free (out);
d146 1
a146 2
 * if 'seq' is non-zero 'obj' is a stack of structures to be encoded
 * as a sequence
d149 1
a149 1
ASN1_OCTET_STRING *PKCS12_i2d_encrypt (X509_ALGOR *algor, int (*i2d)(),
d151 1
a151 1
				       char *obj, int seq)
d154 1
a154 1
	unsigned char *in, *p;
d160 2
a161 4
	if (seq) inlen = i2d_ASN1_SET((STACK *)obj, NULL, i2d, V_ASN1_SEQUENCE,
						 V_ASN1_UNIVERSAL, IS_SEQUENCE);
	else inlen = i2d (obj, NULL);
	if (!inlen) {
d165 1
a165 9
	if (!(in = OPENSSL_malloc (inlen))) {
		PKCS12err(PKCS12_F_PKCS12_I2D_ENCRYPT,ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	p = in;
	if (seq) i2d_ASN1_SET((STACK *)obj, &p, i2d, V_ASN1_SEQUENCE,
						 V_ASN1_UNIVERSAL, IS_SEQUENCE);
	else i2d (obj, &p);
	if (!PKCS12_pbe_crypt (algor, pass, passlen, in, inlen, &oct->data,
d171 2
a172 1
	OPENSSL_free (in);
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 1
a68 1
 * Malloc'ed buffer
d86 1
a86 1
	if(!(out = Malloc (inlen + EVP_CIPHER_CTX_block_size(&ctx)))) {
d94 1
a94 1
		Free (out);
d112 1
a112 1
	     void (*free_func)(), const char *pass, int passlen,
d142 1
a142 1
	Free (out);
d169 1
a169 1
	if (!(in = Malloc (inlen))) {
d180 1
a180 1
		Free(in);
d183 1
a183 1
	Free (in);
d186 2
@


1.1
log
@new files for OpenSSL 0.9.4
@
text
@d158 1
a158 1
	if (!(oct = ASN1_OCTET_STRING_new ())) {
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d68 1
a68 1
 * OPENSSL_malloc'ed buffer
d71 1
a71 1
unsigned char * PKCS12_pbe_crypt(X509_ALGOR *algor, const char *pass,
a78 1
	EVP_CIPHER_CTX_init(&ctx);
d80 1
a80 1
        if (!EVP_PBE_CipherInit(algor->algorithm, pass, passlen,
d86 1
a86 1
	if(!(out = OPENSSL_malloc(inlen + EVP_CIPHER_CTX_block_size(&ctx)))) {
d88 1
a88 1
		goto err;
d91 1
a91 1
	EVP_CipherUpdate(&ctx, out, &i, in, inlen);
d93 2
a94 3
	if(!EVP_CipherFinal_ex(&ctx, out + i, &i)) {
		OPENSSL_free(out);
		out = NULL;
d96 1
a96 1
		goto err;
a100 2
	err:
	EVP_CIPHER_CTX_cleanup(&ctx);
d106 3
a108 1
 * if zbuf set zero buffer after use.
d111 3
a113 2
void * PKCS12_item_decrypt_d2i(X509_ALGOR *algor, const ASN1_ITEM *it,
	     const char *pass, int passlen, ASN1_OCTET_STRING *oct, int zbuf)
d116 1
a116 1
	void *ret;
d119 1
a119 1
	if (!PKCS12_pbe_crypt(algor, pass, passlen, oct->data, oct->length,
d137 4
a140 2
	ret = ASN1_item_d2i(NULL, &p, outlen, it);
	if (zbuf) memset(out, 0, outlen);
d142 1
a142 1
	OPENSSL_free(out);
d147 2
a148 1
 * if zbuf set zero encoding.
d151 1
a151 1
ASN1_OCTET_STRING *PKCS12_item_i2d_encrypt(X509_ALGOR *algor, const ASN1_ITEM *it,
d153 1
a153 1
				       void *obj, int zbuf)
d156 1
a156 1
	unsigned char *in = NULL;
d158 1
a158 1
	if (!(oct = M_ASN1_OCTET_STRING_new ())) {
d162 4
a165 2
	inlen = ASN1_item_i2d(obj, &in, it);
	if (!in) {
d169 9
a177 1
	if (!PKCS12_pbe_crypt(algor, pass, passlen, in, inlen, &oct->data,
d180 1
a180 1
		OPENSSL_free(in);
d183 1
a183 2
	if (zbuf) memset(in, 0, inlen);
	OPENSSL_free(in);
a185 2

IMPLEMENT_PKCS12_STACK_OF(PKCS7)
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d139 1
a139 1
	if (zbuf) OPENSSL_cleanse(out, outlen);
d171 1
a171 1
	if (zbuf) OPENSSL_cleanse(in, inlen);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d116 1
a116 2
	unsigned char *out;
	const unsigned char *p;
d122 1
a122 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_DECRYPT_D2I,PKCS12_R_PKCS12_PBE_CRYPT_ERROR);
d140 1
a140 1
	if(!ret) PKCS12err(PKCS12_F_PKCS12_ITEM_DECRYPT_D2I,PKCS12_R_DECODE_ERROR);
d157 1
a157 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,ERR_R_MALLOC_FAILURE);
d162 1
a162 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,PKCS12_R_ENCODE_ERROR);
d167 1
a167 1
		PKCS12err(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT,PKCS12_R_ENCRYPT_ERROR);
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@d92 1
a92 8
	if (!EVP_CipherUpdate(&ctx, out, &i, in, inlen))
		{
		OPENSSL_free(out);
		out = NULL;
		PKCS12err(PKCS12_F_PKCS12_PBE_CRYPT,ERR_R_EVP_LIB);
		goto err;
		}

@


