head	1.25;
access;
symbols
	OPENBSD_6_1_BASE:1.25;
locks; strict;
comment	@ * @;


1.25
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.24;
commitid	kT0fLt3r4lroFJra;

1.24
date	2016.11.05.13.02.34;	author miod;	state Exp;
branches;
next	1.23;
commitid	SYfuH6fOGByBH4eQ;

1.23
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.22;
commitid	vHznCDK3idwNEFz4;

1.22
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.21;
commitid	gtwLkRyWx0K1HbzX;

1.21
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.20;
commitid	G74O1dmRukKsW7IJ;

1.20
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.19;
commitid	yQEL1wOWIearrW15;

1.19
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.18;
commitid	id8dTrTMtnTn4fqt;

1.18
date	2014.07.10.12.09.43;	author jsing;	state Exp;
branches;
next	1.17;
commitid	c9LCV1T3d8WBIHKU;

1.17
date	2014.07.10.10.01.23;	author miod;	state Exp;
branches;
next	1.16;
commitid	AXnNZsJQFmsoQvHj;

1.16
date	2014.07.08.09.24.53;	author jsing;	state Exp;
branches;
next	1.15;
commitid	XxMwLiDq7L4rxrmk;

1.15
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.13;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.59;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.41;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.11.03;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.05.53.37;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.44;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.39;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.13;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.42;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: p12_key.c,v 1.24 2016/11/05 13:02:34 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/pkcs12.h>

/* PKCS12 compatible key/IV generation */
#ifndef min
#define min(a,b) ((a) < (b) ? (a) : (b))
#endif

int
PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
    int saltlen, int id, int iter, int n, unsigned char *out,
    const EVP_MD *md_type)
{
	int ret;
	unsigned char *unipass;
	int uniplen;

	if (!pass) {
		unipass = NULL;
		uniplen = 0;
	} else if (!OPENSSL_asc2uni(pass, passlen, &unipass, &uniplen)) {
		PKCS12error(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	ret = PKCS12_key_gen_uni(unipass, uniplen, salt, saltlen,
	    id, iter, n, out, md_type);
	if (ret <= 0)
		return 0;
	if (unipass) {
		explicit_bzero(unipass, uniplen);
		free(unipass);
	}
	return ret;
}

int
PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
    int saltlen, int id, int iter, int n, unsigned char *out,
    const EVP_MD *md_type)
{
	unsigned char *B, *D, *I, *p, *Ai;
	int Slen, Plen, Ilen, Ijlen;
	int i, j, u, v;
	int ret = 0;
	BIGNUM *Ij, *Bpl1;	/* These hold Ij and B + 1 */
	EVP_MD_CTX ctx;

	v = EVP_MD_block_size(md_type);
	u = EVP_MD_size(md_type);
	if (u < 0)
		return 0;

	EVP_MD_CTX_init(&ctx);
	D = malloc(v);
	Ai = malloc(u);
	B = malloc(v + 1);
	Slen = v * ((saltlen + v - 1) / v);
	if (passlen)
		Plen = v * ((passlen + v - 1)/v);
	else
		Plen = 0;
	Ilen = Slen + Plen;
	I = malloc(Ilen);
	Ij = BN_new();
	Bpl1 = BN_new();
	if (!D || !Ai || !B || !I || !Ij || !Bpl1)
		goto err;
	for (i = 0; i < v; i++)
		D[i] = id;
	p = I;
	for (i = 0; i < Slen; i++)
		*p++ = salt[i % saltlen];
	for (i = 0; i < Plen; i++)
		*p++ = pass[i % passlen];
	for (;;) {
		if (!EVP_DigestInit_ex(&ctx, md_type, NULL) ||
		    !EVP_DigestUpdate(&ctx, D, v) ||
		    !EVP_DigestUpdate(&ctx, I, Ilen) ||
		    !EVP_DigestFinal_ex(&ctx, Ai, NULL))
			goto err;
		for (j = 1; j < iter; j++) {
			if (!EVP_DigestInit_ex(&ctx, md_type, NULL) ||
			    !EVP_DigestUpdate(&ctx, Ai, u) ||
			    !EVP_DigestFinal_ex(&ctx, Ai, NULL))
				goto err;
		}
		memcpy (out, Ai, min (n, u));
		if (u >= n) {
			ret = 1;
			goto end;
		}
		n -= u;
		out += u;
		for (j = 0; j < v; j++)
			B[j] = Ai[j % u];
		/* Work out B + 1 first then can use B as tmp space */
		if (!BN_bin2bn (B, v, Bpl1))
			goto err;
		if (!BN_add_word (Bpl1, 1))
			goto err;
		for (j = 0; j < Ilen; j += v) {
			if (!BN_bin2bn(I + j, v, Ij))
				goto err;
			if (!BN_add(Ij, Ij, Bpl1))
				goto err;
			if (!BN_bn2bin(Ij, B))
				goto err;
			Ijlen = BN_num_bytes (Ij);
			/* If more than 2^(v*8) - 1 cut off MSB */
			if (Ijlen > v) {
				if (!BN_bn2bin (Ij, B))
					goto err;
				memcpy (I + j, B + 1, v);
#ifndef PKCS12_BROKEN_KEYGEN
				/* If less than v bytes pad with zeroes */
			} else if (Ijlen < v) {
				memset(I + j, 0, v - Ijlen);
				if (!BN_bn2bin(Ij, I + j + v - Ijlen))
					goto err;
#endif
			} else if (!BN_bn2bin (Ij, I + j))
				goto err;
		}
	}

err:
	PKCS12error(ERR_R_MALLOC_FAILURE);

end:
	free(Ai);
	free(B);
	free(D);
	free(I);
	BN_free(Ij);
	BN_free(Bpl1);
	EVP_MD_CTX_cleanup(&ctx);
	return ret;
}
@


1.24
log
@Do not leak the ressources possibly allocated by EVP_MD_CTX_init() in the
trivial error path of PKCS12_key_gen_uni().

ok beck@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.23 2015/09/10 15:56:25 jsing Exp $ */
d84 1
a84 1
		PKCS12err(PKCS12_F_PKCS12_KEY_GEN_ASC, ERR_R_MALLOC_FAILURE);
d189 1
a189 1
	PKCS12err(PKCS12_F_PKCS12_KEY_GEN_UNI, ERR_R_MALLOC_FAILURE);
@


1.23
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.22 2015/02/07 13:19:15 doug Exp $ */
a109 1
	EVP_MD_CTX_init(&ctx);
d114 2
@


1.22
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.21 2014/07/12 16:03:37 miod Exp $ */
d92 1
a92 1
		OPENSSL_cleanse(unipass, uniplen);
@


1.21
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.20 2014/07/11 08:44:49 jsing Exp $ */
a108 7

#if 0
	if (!pass) {
		PKCS12err(PKCS12_F_PKCS12_KEY_GEN_UNI, ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
#endif
@


1.20
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.19 2014/07/10 13:58:23 jsing Exp $ */
d198 6
a203 6
	free (Ai);
	free (B);
	free (D);
	free (I);
	BN_free (Ij);
	BN_free (Bpl1);
@


1.19
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.18 2014/07/10 12:09:43 jsing Exp $ */
d62 2
a63 1
#include "cryptlib.h"
a64 1
#include <openssl/bn.h>
@


1.18
log
@One sure hopes that OPENSSL_cleanse will:

  /* Clear password from memory */
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.17 2014/07/10 10:01:23 miod Exp $ */
d60 2
@


1.17
log
@Remove DEBUG_KEYGEN and DEBUG_DECRYPT support.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.16 2014/07/08 09:24:53 jsing Exp $ */
d90 1
a90 1
		OPENSSL_cleanse(unipass, uniplen);	/* Clear password from memory */
@


1.16
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: p12_key.c,v 1.15 2014/06/12 15:49:30 deraadt Exp $ */
a63 8
/* Uncomment out this line to get debugging info about key generation */
/*#define DEBUG_KEYGEN*/
#ifdef DEBUG_KEYGEN
#include <openssl/bio.h>
extern BIO *bio_err;
void h__dump (unsigned char *p, int len);
#endif

a106 4
#ifdef  DEBUG_KEYGEN
	unsigned char *tmpout = out;
	int tmpn = n;
#endif
a115 8
#ifdef  DEBUG_KEYGEN
	fprintf(stderr, "KEYGEN DEBUG\n");
	fprintf(stderr, "ID %d, ITER %d\n", id, iter);
	fprintf(stderr, "Password (length %d):\n", passlen);
	h__dump(pass, passlen);
	fprintf(stderr, "Salt (length %d):\n", saltlen);
	h__dump(salt, saltlen);
#endif
a154 4
#ifdef DEBUG_KEYGEN
			fprintf(stderr, "Output KEY (length %d)\n", tmpn);
			h__dump(tmpout, tmpn);
#endif
a204 8
#ifdef DEBUG_KEYGEN
void h__dump (unsigned char *p, int len)
{
	for (; len --; p++)
		fprintf(stderr, "%02X", *p);
	fprintf(stderr, "\n");
}
#endif
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d77 4
a80 3
int PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
	     int saltlen, int id, int iter, int n, unsigned char *out,
	     const EVP_MD *md_type)
d86 1
a86 1
	if(!pass) {
d90 1
a90 1
		PKCS12err(PKCS12_F_PKCS12_KEY_GEN_ASC,ERR_R_MALLOC_FAILURE);
d94 1
a94 1
						 id, iter, n, out, md_type);
d96 2
a97 2
	    return 0;
	if(unipass) {
d104 4
a107 3
int PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
	     int saltlen, int id, int iter, int n, unsigned char *out,
	     const EVP_MD *md_type)
d122 1
a122 1
		PKCS12err(PKCS12_F_PKCS12_KEY_GEN_UNI,ERR_R_PASSED_NULL_PARAMETER);
d136 2
a137 2
	v = EVP_MD_block_size (md_type);
	u = EVP_MD_size (md_type);
d139 9
a147 7
	    return 0;
	D = malloc (v);
	Ai = malloc (u);
	B = malloc (v + 1);
	Slen = v * ((saltlen+v-1)/v);
	if(passlen) Plen = v * ((passlen+v-1)/v);
	else Plen = 0;
d149 1
a149 1
	I = malloc (Ilen);
d154 2
a155 1
	for (i = 0; i < v; i++) D[i] = id;
d157 4
a160 2
	for (i = 0; i < Slen; i++) *p++ = salt[i % saltlen];
	for (i = 0; i < Plen; i++) *p++ = pass[i % passlen];
d162 4
a165 4
		if (!EVP_DigestInit_ex(&ctx, md_type, NULL)
			|| !EVP_DigestUpdate(&ctx, D, v)
			|| !EVP_DigestUpdate(&ctx, I, Ilen)
			|| !EVP_DigestFinal_ex(&ctx, Ai, NULL))
d168 4
a171 4
			if (!EVP_DigestInit_ex(&ctx, md_type, NULL)
				|| !EVP_DigestUpdate(&ctx, Ai, u)
				|| !EVP_DigestFinal_ex(&ctx, Ai, NULL))
			goto err;
d184 2
a185 1
		for (j = 0; j < v; j++) B[j] = Ai[j % u];
d191 1
a191 1
		for (j = 0; j < Ilen ; j+=v) {
d205 1
a205 1
			/* If less than v bytes pad with zeroes */
d217 1
a217 1
	PKCS12err(PKCS12_F_PKCS12_KEY_GEN_UNI,ERR_R_MALLOC_FAILURE);
d232 3
a234 2
	for (; len --; p++) fprintf(stderr, "%02X", *p);
	fprintf(stderr, "\n");	
@


1.14
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d1 1
a1 1
/* p12_key.c */
@


1.13
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d98 1
a98 1
		OPENSSL_free(unipass);
d138 3
a140 3
	D = OPENSSL_malloc (v);
	Ai = OPENSSL_malloc (u);
	B = OPENSSL_malloc (v + 1);
d145 1
a145 1
	I = OPENSSL_malloc (Ilen);
d212 4
a215 4
	OPENSSL_free (Ai);
	OPENSSL_free (B);
	OPENSSL_free (D);
	OPENSSL_free (I);
@


1.12
log
@resolve conflicts
@
text
@d179 4
a182 2
		if (!BN_bin2bn (B, v, Bpl1)) goto err;
		if (!BN_add_word (Bpl1, 1)) goto err;
d184 6
a189 3
			if (!BN_bin2bn (I + j, v, Ij)) goto err;
			if (!BN_add (Ij, Ij, Bpl1)) goto err;
			BN_bn2bin (Ij, B);
d193 2
a194 1
				BN_bn2bin (Ij, B);
d200 2
a201 1
				BN_bn2bin(Ij, I + j + v - Ijlen); 
d203 2
a204 1
			} else BN_bn2bin (Ij, I + j);
@


1.11
log
@openssl-1.0.0e: resolve conflicts
@
text
@d155 5
a159 4
		EVP_DigestInit_ex(&ctx, md_type, NULL);
		EVP_DigestUpdate(&ctx, D, v);
		EVP_DigestUpdate(&ctx, I, Ilen);
		EVP_DigestFinal_ex(&ctx, Ai, NULL);
d161 4
a164 3
			EVP_DigestInit_ex(&ctx, md_type, NULL);
			EVP_DigestUpdate(&ctx, Ai, u);
			EVP_DigestFinal_ex(&ctx, Ai, NULL);
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d110 1
d148 2
a149 4
	if (!D || !Ai || !B || !I || !Ij || !Bpl1) {
		PKCS12err(PKCS12_F_PKCS12_KEY_GEN_UNI,ERR_R_MALLOC_FAILURE);
		return 0;
	}
a165 7
			OPENSSL_free (Ai);
			OPENSSL_free (B);
			OPENSSL_free (D);
			OPENSSL_free (I);
			BN_free (Ij);
			BN_free (Bpl1);
			EVP_MD_CTX_cleanup(&ctx);
d170 2
a171 1
			return 1;	
d177 2
a178 2
		BN_bin2bn (B, v, Bpl1);
		BN_add_word (Bpl1, 1);
d180 2
a181 2
			BN_bin2bn (I + j, v, Ij);
			BN_add (Ij, Ij, Bpl1);
d197 13
@


1.9
log
@resolve conflicts
@
text
@d84 1
d88 1
a88 1
	} else if (!asc2uni(pass, passlen, &unipass, &uniplen)) {
d94 2
d135 2
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d62 1
a62 1

@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d94 1
a94 1
		memset(unipass, 0, uniplen);	/* Clear password from memory */
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d121 1
d151 4
a154 4
		EVP_DigestInit (&ctx, md_type);
		EVP_DigestUpdate (&ctx, D, v);
		EVP_DigestUpdate (&ctx, I, Ilen);
		EVP_DigestFinal (&ctx, Ai, NULL);
d156 3
a158 3
			EVP_DigestInit (&ctx, md_type);
			EVP_DigestUpdate (&ctx, Ai, u);
			EVP_DigestFinal (&ctx, Ai, NULL);
d168 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d87 1
a87 1
	} else if (!asc2uni(pass, &unipass, &uniplen)) {
d105 1
a105 1
	int Slen, Plen, Ilen;
d183 1
d185 1
a185 1
			if (BN_num_bytes (Ij) > v) {
d188 6
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d77 1
a77 1
int PKCS12_key_gen_asc (const char *pass, int passlen, unsigned char *salt,
d84 4
a87 1
	if (!asc2uni (pass, &unipass, &uniplen)) {
d91 1
a91 1
	ret = PKCS12_key_gen_uni (unipass, uniplen, salt, saltlen,
d93 4
a96 2
	memset(unipass, 0, uniplen);	/* Clear password from memory */
	Free(unipass);
d100 1
a100 1
int PKCS12_key_gen_uni (unsigned char *pass, int passlen, unsigned char *salt,
d114 1
d119 1
d131 3
a133 3
	D = Malloc (v);
	Ai = Malloc (u);
	B = Malloc (v + 1);
d135 2
a136 1
	Plen = v * ((passlen+v-1)/v);
d138 1
a138 1
	I = Malloc (Ilen);
d161 4
a164 4
			Free (Ai);
			Free (B);
			Free (D);
			Free (I);
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d107 8
@


1.1
log
@new files for OpenSSL 0.9.4
@
text
@d67 1
a67 1
#include <bio.h>
d107 6
a112 7
	BIO_printf (bio_err, "KEYGEN DEBUG\n");
	BIO_printf (bio_err, "ID %d, ITER %d\n", id, iter);
	BIO_printf (bio_err, "Password (length %d):\n", passlen);
	h__dump (pass, passlen);
	BIO_printf (bio_err, "Salt (length %d):\n", saltlen);
	h__dump (salt, saltlen);
	BIO_printf (bio_err, "ID %d, ITER %d\n\n", id, iter);
d152 2
a153 2
			BIO_printf (bio_err, "Output KEY (length %d)\n", tmpn);
			h__dump (tmpout, tmpn);
d178 2
a179 2
	for (; len --; p++) BIO_printf (bio_err, "%02X", *p);
	BIO_printf (bio_err, "\n");	
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d67 1
a67 1
#include <openssl/bio.h>
d77 1
a77 1
int PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
d84 1
a84 4
	if(!pass) {
		unipass = NULL;
		uniplen = 0;
	} else if (!asc2uni(pass, passlen, &unipass, &uniplen)) {
d88 1
a88 1
	ret = PKCS12_key_gen_uni(unipass, uniplen, salt, saltlen,
d90 2
a91 4
	if(unipass) {
		memset(unipass, 0, uniplen);	/* Clear password from memory */
		OPENSSL_free(unipass);
	}
d95 1
a95 1
int PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
d100 1
a100 1
	int Slen, Plen, Ilen, Ijlen;
d107 7
a113 17
#endif

#if 0
	if (!pass) {
		PKCS12err(PKCS12_F_PKCS12_KEY_GEN_UNI,ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
#endif

	EVP_MD_CTX_init(&ctx);
#ifdef  DEBUG_KEYGEN
	fprintf(stderr, "KEYGEN DEBUG\n");
	fprintf(stderr, "ID %d, ITER %d\n", id, iter);
	fprintf(stderr, "Password (length %d):\n", passlen);
	h__dump(pass, passlen);
	fprintf(stderr, "Salt (length %d):\n", saltlen);
	h__dump(salt, saltlen);
d117 3
a119 3
	D = OPENSSL_malloc (v);
	Ai = OPENSSL_malloc (u);
	B = OPENSSL_malloc (v + 1);
d121 1
a121 2
	if(passlen) Plen = v * ((passlen+v-1)/v);
	else Plen = 0;
d123 1
a123 1
	I = OPENSSL_malloc (Ilen);
d135 4
a138 4
		EVP_DigestInit_ex(&ctx, md_type, NULL);
		EVP_DigestUpdate(&ctx, D, v);
		EVP_DigestUpdate(&ctx, I, Ilen);
		EVP_DigestFinal_ex(&ctx, Ai, NULL);
d140 3
a142 3
			EVP_DigestInit_ex(&ctx, md_type, NULL);
			EVP_DigestUpdate(&ctx, Ai, u);
			EVP_DigestFinal_ex(&ctx, Ai, NULL);
d146 4
a149 4
			OPENSSL_free (Ai);
			OPENSSL_free (B);
			OPENSSL_free (D);
			OPENSSL_free (I);
a151 1
			EVP_MD_CTX_cleanup(&ctx);
d153 2
a154 2
			fprintf(stderr, "Output KEY (length %d)\n", tmpn);
			h__dump(tmpout, tmpn);
a167 1
			Ijlen = BN_num_bytes (Ij);
d169 1
a169 1
			if (Ijlen > v) {
a171 6
#ifndef PKCS12_BROKEN_KEYGEN
			/* If less than v bytes pad with zeroes */
			} else if (Ijlen < v) {
				memset(I + j, 0, v - Ijlen);
				BN_bn2bin(Ij, I + j + v - Ijlen); 
#endif
d179 2
a180 2
	for (; len --; p++) fprintf(stderr, "%02X", *p);
	fprintf(stderr, "\n");	
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d94 1
a94 1
		OPENSSL_cleanse(unipass, uniplen);	/* Clear password from memory */
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d62 1
a62 1
#include <openssl/bn.h>
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a83 1

d87 1
a87 1
	} else if (!OPENSSL_asc2uni(pass, passlen, &unipass, &uniplen)) {
a92 2
	if (ret <= 0)
	    return 0;
a131 2
	if (u < 0)
	    return 0;
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@a109 1
	int ret = 0;
d147 4
a150 2
	if (!D || !Ai || !B || !I || !Ij || !Bpl1)
		goto err;
d167 7
d178 1
a178 2
			ret = 1;
			goto end;
d184 2
a185 2
		if (!BN_bin2bn (B, v, Bpl1)) goto err;
		if (!BN_add_word (Bpl1, 1)) goto err;
d187 2
a188 2
			if (!BN_bin2bn (I + j, v, Ij)) goto err;
			if (!BN_add (Ij, Ij, Bpl1)) goto err;
a203 13

err:
	PKCS12err(PKCS12_F_PKCS12_KEY_GEN_UNI,ERR_R_MALLOC_FAILURE);

end:
	OPENSSL_free (Ai);
	OPENSSL_free (B);
	OPENSSL_free (D);
	OPENSSL_free (I);
	BN_free (Ij);
	BN_free (Bpl1);
	EVP_MD_CTX_cleanup(&ctx);
	return ret;
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d155 4
a158 5
		if (!EVP_DigestInit_ex(&ctx, md_type, NULL)
			|| !EVP_DigestUpdate(&ctx, D, v)
			|| !EVP_DigestUpdate(&ctx, I, Ilen)
			|| !EVP_DigestFinal_ex(&ctx, Ai, NULL))
			goto err;
d160 3
a162 4
			if (!EVP_DigestInit_ex(&ctx, md_type, NULL)
				|| !EVP_DigestUpdate(&ctx, Ai, u)
				|| !EVP_DigestFinal_ex(&ctx, Ai, NULL))
			goto err;
@


1.1.1.8
log
@Import OpenSSL 1.0.1g
@
text
@d179 2
a180 4
		if (!BN_bin2bn (B, v, Bpl1))
			goto err;
		if (!BN_add_word (Bpl1, 1))
			goto err;
d182 3
a184 6
			if (!BN_bin2bn(I + j, v, Ij))
				goto err;
			if (!BN_add(Ij, Ij, Bpl1))
				goto err;
			if (!BN_bn2bin(Ij, B))
				goto err;
d188 1
a188 2
				if (!BN_bn2bin (Ij, B))
					goto err;
d194 1
a194 2
				if (!BN_bn2bin(Ij, I + j + v - Ijlen))
					goto err;
d196 1
a196 2
			} else if (!BN_bn2bin (Ij, I + j))
				goto err;
@


