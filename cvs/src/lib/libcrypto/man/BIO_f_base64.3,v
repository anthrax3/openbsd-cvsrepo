head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@.\" @;


1.7
date	2017.01.06.03.45.57;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	TOpCRiNyejEDYAqV;

1.6
date	2016.12.06.14.45.08;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	ImlokSyq8j1BA6GY;

1.5
date	2016.11.11.01.27.20;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	0wCFvd1V7RCZhTF7;

1.4
date	2016.11.07.15.52.47;	author jmc;	state Exp;
branches;
next	1.3;
commitid	U2KqjHqKphAYLN9U;

1.3
date	2016.11.06.15.52.50;	author jmc;	state Exp;
branches;
next	1.2;
commitid	UKoyflsJLv0vYdpL;

1.2
date	2015.09.09.21.58.20;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	Hl1v037zBNLkmVGx;

1.1
date	2015.02.14.14.09.01;	author schwarze;	state Exp;
branches;
next	;
commitid	uSGRsfGS6ehpZRFi;


desc
@@


1.7
log
@Delete a cross reference to the non-existent manual page BIO_set_flags(3),
reported by jmc@@.  Documenting that function would be a bad idea.  All
other flags are used internally and should better not be tampered with.
It looks like an internal function that was made public by mistake,
then abused for an unrelated user interface purpose: a classic case
of botched user interface design.

Instead, only show how to use this function for this one specific purpose.

While here, delete a sentence from the DESCRIPTION that merely
duplicated content from the BUGS section.
@
text
@.\"	$OpenBSD: BIO_f_base64.3,v 1.6 2016/12/06 14:45:08 schwarze Exp $
.\"	OpenSSL fc1d88f0 Wed Jul 2 22:42:40 2014 -0400
.\"
.\" This file was written by Dr. Stephen Henson <steve@@openssl.org>.
.\" Copyright (c) 2000, 2003, 2005, 2014 The OpenSSL Project.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: December 6 2016 $
.Dt BIO_F_BASE64 3
.Os
.Sh NAME
.Nm BIO_f_base64
.Nd base64 BIO filter
.Sh SYNOPSIS
.In openssl/bio.h
.In openssl/evp.h
.Ft BIO_METHOD *
.Fo BIO_f_base64
.Fa void
.Fc
.Sh DESCRIPTION
.Fn BIO_f_base64
returns the base64 BIO method.
This is a filter BIO that base64 encodes any data written through it
and decodes any data read through it.
.Pp
Base64 BIOs do not support
.Xr BIO_gets 3
or
.Xr BIO_puts 3 .
.Pp
.Xr BIO_flush 3
on a base64 BIO that is being written through
is used to signal that no more data is to be encoded:
this is used to flush the final block through the BIO.
.Pp
To encode the data all on one line and to expect the data to be all
on one line, initialize the base64 BIO as follows:
.Bd -literal -offset indent
BIO *b64 = BIO_new(BIO_f_base64());
BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
.Ed
.Sh RETURN VALUES
.Fn BIO_f_base64
returns the base64 BIO method.
.Sh EXAMPLES
Base64 encode the string "Hello World\en"
and write the result to standard output:
.Bd -literal -offset indent
BIO *bio, *b64;
char message[] = "Hello World \en";

b64 = BIO_new(BIO_f_base64());
bio = BIO_new_fp(stdout, BIO_NOCLOSE);
BIO_push(b64, bio);
BIO_write(b64, message, strlen(message));
BIO_flush(b64);

BIO_free_all(b64);
.Ed
.Pp
Read Base64-encoded data from standard input
and write the decoded data to standard output:
.Bd -literal -offset indent
BIO *bio, *b64, *bio_out;
char inbuf[512];
int inlen;

b64 = BIO_new(BIO_f_base64());
bio = BIO_new_fp(stdin, BIO_NOCLOSE);
bio_out = BIO_new_fp(stdout, BIO_NOCLOSE);
BIO_push(b64, bio);
while((inlen = BIO_read(b64, inbuf, 512)) > 0)
	BIO_write(bio_out, inbuf, inlen);

BIO_flush(bio_out);
BIO_free_all(b64);
.Ed
.Sh SEE ALSO
.Xr BIO_new 3
.Sh BUGS
The ambiguity of EOF in base64-encoded data can cause additional
data following the base64-encoded block to be misinterpreted.
.Pp
There should be some way of specifying a test that the BIO can perform
to reliably determine EOF (for example a MIME boundary).
@


1.6
log
@make sure that all the BIO pages point back to the master page BIO_new(3)
@
text
@d1 1
a1 1
.\"	$OpenBSD: BIO_f_base64.3,v 1.5 2016/11/11 01:27:20 schwarze Exp $
d52 1
a52 1
.Dd $Mdocdate: November 11 2016 $
d81 6
a86 9
The flag
.Dv BIO_FLAGS_BASE64_NO_NL
can be set with
.Xr BIO_set_flags 3
to encode the data all on one line
or expect the data to be all on one line.
.Pp
Because of the format of base64 encoding the end of the encoded
block cannot always be reliably determined.
@


1.5
log
@add copyright and license
and change the reference to BIO_set_flags() from .Fn to .Xr:
we do have that function and we should import the manual
@
text
@d1 1
a1 1
.\"	$OpenBSD: BIO_f_base64.3,v 1.4 2016/11/07 15:52:47 jmc Exp $
d52 1
a52 1
.Dd $Mdocdate: November 7 2016 $
d126 2
@


1.4
log
@various cleanup;
@
text
@d1 2
a2 1
.\"	$OpenBSD: BIO_f_base64.3,v 1.3 2016/11/06 15:52:50 jmc Exp $
d4 49
a52 1
.Dd $Mdocdate: November 6 2016 $
d84 1
a84 1
.Fn BIO_set_flags
@


1.3
log
@first pass; ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d3 1
a3 1
.Dd $Mdocdate: September 9 2015 $
d35 1
a35 1
.Xr BIO_set_flags 3
d38 1
a38 1
.Sh NOTES
d60 1
a60 1
Read Base64 encoded data from standard input
d78 2
a79 2
The ambiguity of EOF in base64 encoded data can cause additional
data following the base64 encoded block to be misinterpreted.
@


1.2
log
@Add missing CVS Mdocdate tags.  No text change, except for the change
of date that can't be helped.
@
text
@d1 3
a3 1
.Dd $Mdocdate: July 17 2014 $
@


1.1
log
@second batch of perlpod(1) to mdoc(7) conversion
@
text
@d1 1
a1 1
.Dd July 17, 2014
@

