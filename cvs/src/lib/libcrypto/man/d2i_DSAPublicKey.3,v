head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@.\" @;


1.8
date	2016.12.25.14.38.55;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	fVxH6YvL3OrLEDn6;

1.7
date	2016.12.24.23.22.52;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	0tkT18q4SAIi2d4B;

1.6
date	2016.12.12.13.58.46;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	xZS8konsZ27uXNrB;

1.5
date	2016.12.10.22.47.49;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	Jnyf2h2zidKORaea;

1.4
date	2016.12.08.20.22.08;	author jmc;	state Exp;
branches;
next	1.3;
commitid	vZvBNDQVbNFhvlqz;

1.3
date	2016.12.05.20.36.19;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	efbGoRisFLQ4XB06;

1.2
date	2016.11.06.15.52.50;	author jmc;	state Exp;
branches;
next	1.1;
commitid	UKoyflsJLv0vYdpL;

1.1
date	2016.11.05.13.36.33;	author schwarze;	state Exp;
branches;
next	;
commitid	iozMFm2hiM7VZOmt;


desc
@@


1.8
log
@Clarify what DSAparams_dup(3) does.
Add STANDARDS references.
Add cross references to manual pages documenting conversion functions
that are used by the functions documented here.
Mark up the names of custom ASN.1 datatypes that are defined in
standards with .Vt, allowing to search for them.
Do not mark up basic ASN.1 data types.  They stand out by being ALL
CAPS anyway, and searching for them would be pointless.
@
text
@.\"	$OpenBSD: d2i_DSAPublicKey.3,v 1.7 2016/12/24 23:22:52 schwarze Exp $
.\"	OpenSSL bb9ad09e Jun 6 00:43:05 2016 -0400
.\"
.\" This file was written by Dr. Stephen Henson <steve@@openssl.org>.
.\" Copyright (c) 2002, 2003, 2013, 2015, 2016 The OpenSSL Project.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: December 24 2016 $
.Dt D2I_DSAPUBLICKEY 3
.Os
.Sh NAME
.Nm d2i_DSAPublicKey ,
.Nm i2d_DSAPublicKey ,
.Nm d2i_DSA_PUBKEY ,
.Nm i2d_DSA_PUBKEY ,
.Nm d2i_DSA_PUBKEY_bio ,
.Nm d2i_DSA_PUBKEY_fp ,
.Nm i2d_DSA_PUBKEY_bio ,
.Nm i2d_DSA_PUBKEY_fp ,
.Nm d2i_DSAPrivateKey ,
.Nm i2d_DSAPrivateKey ,
.Nm d2i_DSAPrivateKey_bio ,
.Nm d2i_DSAPrivateKey_fp ,
.Nm i2d_DSAPrivateKey_bio ,
.Nm i2d_DSAPrivateKey_fp ,
.Nm d2i_DSAparams ,
.Nm i2d_DSAparams ,
.Nm DSAparams_dup ,
.Nm d2i_DSA_SIG ,
.Nm i2d_DSA_SIG
.Nd decode and encode DSA keys
.Sh SYNOPSIS
.In openssl/dsa.h
.Ft DSA *
.Fo d2i_DSAPublicKey
.Fa "DSA **val_out"
.Fa "const unsigned char **der_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_DSAPublicKey
.Fa "const DSA *val_in"
.Fa "unsigned char **der_out"
.Fc
.Ft DSA *
.Fo d2i_DSA_PUBKEY
.Fa "DSA **val_out"
.Fa "const unsigned char **der_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_DSA_PUBKEY
.Fa "const DSA *val_in"
.Fa "unsigned char **der_out"
.Fc
.Ft DSA *
.Fo d2i_DSA_PUBKEY_bio
.Fa "BIO *in_bio"
.Fa "DSA **val_out"
.Fc
.Ft DSA *
.Fo d2i_DSA_PUBKEY_fp
.Fa "FILE *in_fp"
.Fa "DSA **val_out"
.Fc
.Ft int
.Fo i2d_DSA_PUBKEY_bio
.Fa "BIO *out_bio"
.Fa "DSA *val_in"
.Fc
.Ft int
.Fo i2d_DSA_PUBKEY_fp
.Fa "FILE *out_fp"
.Fa "DSA *val_in"
.Fc
.Ft DSA *
.Fo d2i_DSAPrivateKey
.Fa "DSA **val_out"
.Fa "const unsigned char **der_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_DSAPrivateKey
.Fa "const DSA *val_in"
.Fa "unsigned char **der_out"
.Fc
.Ft DSA *
.Fo d2i_DSAPrivateKey_bio
.Fa "BIO *in_bio"
.Fa "DSA **val_out"
.Fc
.Ft DSA *
.Fo d2i_DSAPrivateKey_fp
.Fa "FILE *in_fp"
.Fa "DSA **val_out"
.Fc
.Ft int
.Fo i2d_DSAPrivateKey_bio
.Fa "BIO *out_bio"
.Fa "DSA *val_in"
.Fc
.Ft int
.Fo i2d_DSAPrivateKey_fp
.Fa "FILE *out_fp"
.Fa "DSA *val_in"
.Fc
.Ft DSA *
.Fo d2i_DSAparams
.Fa "DSA **val_out"
.Fa "const unsigned char **der_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_DSAparams
.Fa "const DSA *val_in"
.Fa "unsigned char **der_out"
.Fc
.Ft DSA *
.Fo DSAparams_dup
.Fa "DSA *val_in"
.Fc
.Ft DSA_SIG *
.Fo d2i_DSA_SIG
.Fa "DSA_SIG **val_out"
.Fa "const unsigned char **der_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_DSA_SIG
.Fa "const DSA_SIG *val_in"
.Fa "unsigned char **der_out"
.Fc
.Sh DESCRIPTION
These functions decode and encode DSA keys and parameters.
For details about the semantics, examples, caveats, and bugs, see
.Xr ASN1_item_d2i 3 .
.Pp
.Fn d2i_DSAPublicKey
and
.Fn i2d_DSAPublicKey
decode and encode the DSA public key components using a non-standard
format, so consider using
.Fn d2i_DSA_PUBKEY
and
.Fn i2d_DSA_PUBKEY
instead.
The actual data encoded depends on the value of
.Fa val_in->write_params .
If
.Fa val_in->write_params
is zero, only the
.Fa val_in->pub_key
field is encoded as an ASN.1 INTEGER.
If
.Fa val_in->write_params
is 1, then a SEQUENCE consisting of the
.Fa val_in->p ,
.Fa val_in->q ,
.Fa val_in->g ,
and
.Fa val_in->pub_key
fields is encoded.
.Pp
.Fn d2i_DSA_PUBKEY
and
.Fn i2d_DSA_PUBKEY
decode and encode a DSA public key using an ASN.1
.Vt SubjectPublicKeyInfo
structure defined in RFC 5280 section 4.1
and documented in
.Xr X509_PUBKEY_new 3 .
.Fn d2i_DSA_PUBKEY_bio ,
.Fn d2i_DSA_PUBKEY_fp ,
.Fn i2d_DSA_PUBKEY_bio ,
and
.Fn i2d_DSA_PUBKEY_fp
are similar except that they decode or encode using a
.Vt BIO
or
.Vt FILE
pointer.
.Pp
.Fn d2i_DSAPrivateKey
and
.Fn i2d_DSAPrivateKey
decode and encode the DSA private key components.
The
.Vt DSA
object passed to the private key encoding functions should have all
the private key components present.
These functions use a non-standard structure consisting of a
SEQUENCE containing the
.Fa val_in->p ,
.Fa val_in->q ,
.Fa val_in->g ,
.Fa val_in->pub_key ,
and
.Fa val_in->priv_key
fields.
This data format is unencrypted.
For private key security when writing private keys to files,
consider using
.Xr PEM_write_DSAPrivateKey 3
instead.
The
.Fn d2i_DSAPrivateKey_bio ,
.Fn d2i_DSAPrivateKey_fp ,
.Fn i2d_DSAPrivateKey_bio ,
and
.Fn i2d_DSAPrivateKey_fp
are similar except that they decode or encode using a
.Vt BIO
or
.Vt FILE
pointer.
.Pp
.Fn d2i_DSAparams
and
.Fn i2d_DSAparams
decode and encode the DSA parameters using an ASN.1
.Vt Dss-Parms
structure defined in RFC 3279 section 2.3.2
and used for the parameters field of the ASN.1
.Vt AlgorithmIdentifier
structure defined in RFC 5280 section 4.1.1.2.
.Pp
.Fn DSAparams_dup
allocates and initializes an empty
.Vt DSA
object and copies the DSA parameters from
.Fa val_in
to it by calling
.Fn i2d_DSAparams
and
.Fn d2i_DSAparams .
If a private or public key are present in
.Fa val_in ,
they are not copied.
.Pp
.Fn d2i_DSA_SIG
and
.Fn i2d_DSA_SIG
decode and encode a DSA signature using an ASN.1
.Vt Dss-Sig-Value
structure as defined in RFC 3279 section 2.2.2
and used for the signatureValue field of the ASN.1
.Vt Certificate
structure described in RFC 5280 sections 4.1.1.3 and 5.1.1.3.
.Sh RETURN VALUES
.Fn d2i_DSAPublicKey ,
.Fn d2i_DSA_PUBKEY ,
.Fn d2i_DSA_PUBKEY_bio ,
.Fn d2i_DSA_PUBKEY_fp ,
.Fn d2i_DSAPrivateKey ,
.Fn d2i_DSAPrivateKey_bio ,
.Fn d2i_DSAPrivateKey_fp ,
.Fn d2i_DSAparams ,
and
.Fn DSAparams_dup
return a valid
.Vt DSA
object or
.Dv NULL
if an error occurs.
.Pp
.Fn d2i_DSA_SIG
returns a valid
.Vt DSA_SIG
object or
.Dv NULL
if an error occurs.
.Sh SEE ALSO
.Xr ASN1_item_d2i 3 ,
.Xr DSA_new 3 ,
.Xr DSA_SIG_new 3 ,
.Xr EVP_PKEY_set1_DSA 3 ,
.Xr PEM_write_DSAPrivateKey 3 ,
.Xr X509_PUBKEY_new 3
.Sh STANDARDS
RFC 5280: Internet X.509 Public Key Infrastructure Certificate and
Certificate Revocation List (CRL) Profile,
section 4.1: Basic Certificate Fields
.Pp
RFC 3279: Algorithms and Identifiers for the Internet X.509 Public
Key Infrastructure Certificate and Certificate Revocation List (CRL)
Profile:
.Bl -dash -compact
.It
section 2.2.2: DSA Signature Algorithm
.It
section 2.3.2: DSA Signature Keys
.El
@


1.7
log
@First example of how to fix the d2i_*() manuals:
- add four missing functions found in OpenSSL doc/man3/d2i_X509.pod
- simplify .Nd
- drop needless extra include line
- use the same parameter names as in ASN1_item_d2i(3)
- point to ASN1_item_d2i(3) for details
- sort the text and simplify the wording

More work is needed on STANDARDS references.
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_DSAPublicKey.3,v 1.6 2016/12/12 13:58:46 schwarze Exp $
d52 1
a52 1
.Dd $Mdocdate: December 12 2016 $
d197 1
a197 2
field is encoded as an
.Sy INTEGER .
d200 1
a200 3
is 1, then a
.Sy SEQUENCE
consisting of the
d211 5
a215 2
decode and encode a DSA public key using a SubjectPublicKeyInfo
(certificate public key) structure.
d264 7
a270 3
decode and encode the DSA parameters using a
.Sy Dss-Parms
structure as defined in RFC 2459.
d272 5
a276 3
copies
.Fa dsa
by calling
d280 3
d287 6
a292 3
decode and encode a DSA signature using a
.Sy Dss-Sig-Value
structure as defined in RFC 2459.
d320 17
a336 1
.Xr PEM_write_DSAPrivateKey 3
@


1.6
log
@Document DSAparams_dup(3).  It is in <openssl/dsa.h> and documented
by OpenSSL, so it is clearly public.

OpenSSL documents it in doc/man3/X509_dup.pod, but with wrong header
file, wrong prototype, and misleading description.

While here, fix the wrong d2i_DSA_SIG(3) return type and document
those RETURN VALUES that i could easily figure out.
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_DSAPublicKey.3,v 1.5 2016/12/10 22:47:49 schwarze Exp $
d52 1
a52 1
.Dd $Mdocdate: December 10 2016 $
d66 4
d75 1
a75 1
.Nd DSA key encoding and parsing functions
a77 1
.In openssl/x509.h
d80 2
a81 2
.Fa "DSA **a"
.Fa "const unsigned char **pp"
d86 2
a87 2
.Fa "const DSA *a"
.Fa "unsigned char **pp"
d91 2
a92 2
.Fa "DSA **a"
.Fa "const unsigned char **pp"
d97 2
a98 2
.Fa "const DSA *a"
.Fa "unsigned char **pp"
d102 2
a103 2
.Fa "BIO *bp"
.Fa "DSA **dsa"
d107 2
a108 2
.Fa "FILE *fp"
.Fa "DSA *dsa"
d112 2
a113 2
.Fa "BIO *bp"
.Fa "DSA *dsa"
d117 2
a118 2
.Fa "FILE *fp"
.Fa "DSA *dsa"
d122 2
a123 2
.Fa "DSA **a"
.Fa "const unsigned char **pp"
d128 22
a149 2
.Fa "const DSA *a"
.Fa "unsigned char **pp"
d153 2
a154 2
.Fa "DSA **a"
.Fa "const unsigned char **pp"
d159 2
a160 2
.Fa "const DSA *a"
.Fa "unsigned char **pp"
d164 1
a164 1
.Fa "DSA *dsa"
d168 2
a169 2
.Fa "DSA_SIG **a"
.Fa "const unsigned char **pp"
d174 2
a175 2
.Fa "const DSA_SIG *a"
.Fa "unsigned char **pp"
d178 4
d185 25
a209 1
decode and encode the DSA public key components structure.
a215 1
.Pp
d221 1
a221 5
are similar to
.Fn d2i_DSA_PUBKEY
and
.Fn i2d_DSA_PUBKEY
except that they decode or encode using a
d231 29
a280 54
.Pp
The usage of all of these functions is similar to
.Xr d2i_X509 3
and
.Xr i2d_X509 3 .
.Pp
The
.Vt DSA
structure passed to the private key encoding functions should have all
the private key components present.
.Pp
The data encoded by the private key functions is unencrypted and
therefore offers no private key security.
.Pp
The
.Fn *_DSA_PUBKEY
functions should be used in preference to the
.Fn *_DSAPublicKey
functions when encoding public keys because they use a standard format.
.Pp
The
.Fn *_DSAPublicKey
functions use a non-standard format.
The actual data encoded depends on the value of
.Fa a->write_params .
If
.Fa a->write_params
is zero, then only the
.Fa a->pub_key
field is encoded as an
.Sy INTEGER .
If
.Fa a->write_params
is 1, then a
.Sy SEQUENCE
consisting of the
.Fa a->p ,
.Fa a->q ,
.Fa a->g ,
and
.Fa a->pub_key
fields is encoded.
.Pp
The
.Fn *_DSAPrivateKey
functions also use a non-standard structure consisting of a
SEQUENCE containing the
.Fa a->p ,
.Fa a->q ,
.Fa a->g ,
.Fa a->pub_key ,
and
.Fa a->priv_key
fields.
d287 2
d294 1
a294 1
structure or
d301 1
a301 1
structure or
d305 4
a308 2
.Xr d2i_X509 3 ,
.Xr DSA_new 3
@


1.5
log
@Change all references to dsa(3) to point to DSA_new(3).
Make sure all DSA pages point back to DSA_new(3).
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_DSAPublicKey.3,v 1.4 2016/12/08 20:22:08 jmc Exp $
d52 1
a52 1
.Dd $Mdocdate: December 8 2016 $
d68 1
d140 4
d192 7
d260 21
@


1.4
log
@various cleanup;
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_DSAPublicKey.3,v 1.3 2016/12/05 20:36:19 schwarze Exp $
d52 1
a52 1
.Dd $Mdocdate: December 5 2016 $
d249 2
a250 1
.Xr d2i_X509 3
@


1.3
log
@Add Copyright and license.
Merge documentation of some additional {d2i,i2d}_{D,R}SA_PUBKEY_{bio,fp}(3)
functions from OpenSSL.
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_DSAPublicKey.3,v 1.2 2016/11/06 15:52:50 jmc Exp $
d52 1
a52 1
.Dd $Mdocdate: November 6 2016 $
a57 2
.Nm d2i_DSAPrivateKey ,
.Nm i2d_DSAPrivateKey ,
d64 2
d186 1
a186 1
structure as defined in RFC2459.
d193 1
a193 1
structure as defined in RFC2459.
d216 1
a216 1
functions use an non-standard format.
@


1.2
log
@first pass; ok schwarze
@
text
@d1 2
a2 1
.\"	$OpenBSD$
d4 49
a52 1
.Dd $Mdocdate: November 5 2016 $
d62 4
d97 20
d160 15
@


1.1
log
@convert the remaining manual pages from pod to mdoc
@
text
@d1 3
a3 1
.Dd $Mdocdate: September 22 2015 $
d151 1
a151 1
functions also use a non-standard structure consisting consisting of a
@

