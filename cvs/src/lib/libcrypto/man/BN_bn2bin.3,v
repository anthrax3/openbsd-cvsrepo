head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@.\" @;


1.6
date	2017.01.25.16.12.45;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	6wRzA751ZUbeL74A;

1.5
date	2016.12.10.21.13.25;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	4coMobrzJtYgMso4;

1.4
date	2016.11.20.16.30.22;	author schwarze;	state Exp;
branches;
next	1.3;
commitid	s3UmaWAXYBu6rhU8;

1.3
date	2016.11.08.22.19.45;	author jmc;	state Exp;
branches;
next	1.2;
commitid	oqOHR41PrHYVU7vt;

1.2
date	2016.11.06.15.52.50;	author jmc;	state Exp;
branches;
next	1.1;
commitid	UKoyflsJLv0vYdpL;

1.1
date	2015.02.23.17.43.24;	author schwarze;	state Exp;
branches;
next	;
commitid	YTrWDOlpO82FZm6K;


desc
@@


1.6
log
@document BN_asc2bn(3);
jsing@@ confirmed that it is a public function worth documenting
@
text
@.\"	$OpenBSD: BN_bn2bin.3,v 1.5 2016/12/10 21:13:25 schwarze Exp $
.\"	OpenSSL a528d4f0 Oct 27 13:40:11 2015 -0400
.\"
.\" This file was written by Ulf Moeller <ulf@@openssl.org>.
.\" Copyright (c) 2000, 2002, 2016 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: December 10 2016 $
.Dt BN_BN2BIN 3
.Os
.Sh NAME
.Nm BN_bn2bin ,
.Nm BN_bin2bn ,
.Nm BN_bn2hex ,
.Nm BN_bn2dec ,
.Nm BN_hex2bn ,
.Nm BN_dec2bn ,
.Nm BN_asc2bn ,
.Nm BN_print ,
.Nm BN_print_fp ,
.Nm BN_bn2mpi ,
.Nm BN_mpi2bn
.Nd format conversions
.Sh SYNOPSIS
.In openssl/bn.h
.Ft int
.Fo BN_bn2bin
.Fa "const BIGNUM *a"
.Fa "unsigned char *to"
.Fc
.Ft BIGNUM *
.Fo BN_bin2bn
.Fa "const unsigned char *s"
.Fa "int len"
.Fa "BIGNUM *ret"
.Fc
.Ft char *
.Fo BN_bn2hex
.Fa "const BIGNUM *a"
.Fc
.Ft char *
.Fo BN_bn2dec
.Fa "const BIGNUM *a"
.Fc
.Ft int
.Fo BN_hex2bn
.Fa "BIGNUM **a"
.Fa "const char *str"
.Fc
.Ft int
.Fo BN_dec2bn
.Fa "BIGNUM **a"
.Fa "const char *str"
.Fc
.Ft int
.Fo BN_asc2bn
.Fa "BIGNUM **a"
.Fa "const char *str"
.Fc
.Ft int
.Fo BN_print
.Fa "BIO *fp"
.Fa "const BIGNUM *a"
.Fc
.Ft int
.Fo BN_print_fp
.Fa "FILE *fp"
.Fa "const BIGNUM *a"
.Fc
.Ft int
.Fo BN_bn2mpi
.Fa "const BIGNUM *a"
.Fa "unsigned char *to"
.Fc
.Ft BIGNUM *
.Fo BN_mpi2bn
.Fa "unsigned char *s"
.Fa "int len"
.Fa "BIGNUM *ret"
.Fc
.Sh DESCRIPTION
.Fn BN_bn2bin
converts the absolute value of
.Fa a
into big-endian form and stores it at
.Fa to .
.Fa to
must point to
.Fn BN_num_bytes a
bytes of memory.
.Pp
.Fn BN_bin2bn
converts the positive integer in big-endian form of length
.Fa len
at
.Fa s
into a
.Vt BIGNUM
and places it in
.Fa ret .
If
.Fa ret
is
.Dv NULL ,
a new
.Vt BIGNUM
is created.
.Pp
.Fn BN_bn2hex
and
.Fn BN_bn2dec
return printable strings containing the hexadecimal and decimal encoding of
.Fa a
respectively.
For negative numbers, the string is prefaced with a leading minus sign.
The string must be freed later using
.Xr free 3 .
.Pp
.Fn BN_hex2bn
interprets
.Fa str
as a hexadecimal number.
The string may start with a minus sign
.Pq Sq - .
Conversion stops at the first byte that is not a hexadecimal digit.
The number is converted to a
.Vt BIGNUM
and stored in
.Pf * Fa a .
If
.Pf * Fa a
is
.Dv NULL ,
a new
.Vt BIGNUM
is created.
If
.Fa a
is
.Dv NULL ,
it only computes the number's length in hexadecimal digits.
A "negative zero" is converted to zero.
.Fn BN_dec2bn
is the same using the decimal system.
.Fn BN_asc2bn
infers the number base from an optional prefix.
If
.Fa str
starts with
.Qq 0x
or
.Qq 0X ,
it calls
.Fn BN_hex2bn ,
otherwise
.Fn BN_dec2bn .
If the number is negative, the minus sign can be given before or
after the prefix.
.Pp
.Fn BN_print
and
.Fn BN_print_fp
write the hexadecimal encoding of
.Fa a ,
with a leading minus sign for negative numbers, to the
.Vt BIO
or
.Vt FILE
.Fa fp .
.Pp
.Fn BN_bn2mpi
and
.Fn BN_mpi2bn
convert
.Vt BIGNUM Ns s
from and to a format that consists of the number's length in bytes
represented as a 4-byte big-endian number, and the number itself in
big-endian format, where the most significant bit signals a negative
number (the representation of numbers with the MSB set is prefixed with
a NUL byte).
.Pp
.Fn BN_bn2mpi
stores the representation of
.Fa a
at
.Fa to ,
where
.Fa to
must be large enough to hold the result.
The size can be determined by calling
.Fn BN_bn2mpi a  NULL .
.Pp
.Fn BN_mpi2bn
converts the
.Fa len
bytes long representation at
.Fa s
to a
.Vt BIGNUM
and stores it at
.Fa ret ,
or in a newly allocated
.Vt BIGNUM
if
.Fa ret
is
.Dv NULL .
.Sh RETURN VALUES
.Fn BN_bn2bin
returns the length of the big-endian number placed at
.Fa to .
.Fn BN_bin2bn
returns the
.Vt BIGNUM ,
or
.Dv NULL
on error.
.Pp
.Fn BN_bn2hex
and
.Fn BN_bn2dec
return a NUL-terminated string, or
.Dv NULL
on error.
.Fn BN_hex2bn
and
.Fn BN_dec2bn
return the number's length in hexadecimal or decimal digits
or 0 on error, in which case no new
.Vt BIGNUM
is created.
.Fn BN_asc2bn
returns 1 on success or 0 on error, in which case no new
.Vt BIGNUM
is created.
.Pp
.Fn BN_print_fp
and
.Fn BN_print
return 1 on success, 0 on write errors.
.Pp
.Fn BN_bn2mpi
returns the length of the representation.
.Fn BN_mpi2bn
returns the
.Vt BIGNUM ,
or
.Dv NULL
on error.
.Pp
The error codes can be obtained by
.Xr ERR_get_error 3 .
.Sh SEE ALSO
.Xr BN_new 3 ,
.Xr BN_num_bytes 3 ,
.Xr BN_zero 3 ,
.Xr ERR_get_error 3
.Sh HISTORY
.Fn BN_bn2bin ,
.Fn BN_bin2bn ,
.Fn BN_print_fp ,
and
.Fn BN_print
are available in all versions of SSLeay and OpenSSL.
.Pp
.Fn BN_bn2hex ,
.Fn BN_bn2dec ,
.Fn BN_hex2bn ,
.Fn BN_dec2bn ,
.Fn BN_bn2mpi ,
and
.Fn BN_mpi2bn
were added in SSLeay 0.9.0.
@


1.5
log
@replace all references to bn(3) with BN_new(3),
and make sure all BN*(3) pages point back to BN_new(3)
@
text
@d1 1
a1 1
.\"	$OpenBSD: BN_bn2bin.3,v 1.4 2016/11/20 16:30:22 schwarze Exp $
d51 1
a51 1
.Dd $Mdocdate: November 20 2016 $
d61 1
d99 5
d188 14
d274 5
a278 1
will be created.
@


1.4
log
@Add Copyright and license.
More details about BN_hex2bn(3) lifted from the OpenSSL manual,
but worded less clumsily.
@
text
@d1 1
a1 1
.\"	$OpenBSD: BN_bn2bin.3,v 1.3 2016/11/08 22:19:45 jmc Exp $
d51 1
a51 1
.Dd $Mdocdate: November 8 2016 $
d273 1
a273 1
.Xr bn 3 ,
@


1.3
log
@some cleanup;
@
text
@d1 2
a2 1
.\"	$OpenBSD: BN_bn2bin.3,v 1.2 2016/11/06 15:52:50 jmc Exp $
d4 48
a51 1
.Dd $Mdocdate: November 6 2016 $
d157 1
a157 1
converts the string
d159 5
a163 1
containing a hexadecimal number to a
d165 1
a165 1
and stores it in
d179 1
a179 1
If the string starts with a minus sign, the number is negative.
d251 4
a254 2
return the number's length in hexadecimal or decimal digits, and 0 on
error.
@


1.2
log
@first pass; ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d3 1
a3 1
.Dd $Mdocdate: February 23 2015 $
d162 1
a162 1
.Fn BN_bn2mpi a , NULL .
a218 1
.Xr ASN1_INTEGER_to_BN 3 ,
@


1.1
log
@fourth batch of perlpod(1) to mdoc(7) conversion
@
text
@d1 3
a3 1
.Dd $Mdocdate: July 17 2014 $
@

