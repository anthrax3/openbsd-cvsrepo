head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@.\" @;


1.5
date	2016.11.23.17.54.15;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	NwBRPERoSUXLP1W2;

1.4
date	2016.11.17.21.06.16;	author jmc;	state Exp;
branches;
next	1.3;
commitid	xoP1diXAxjLK7IMN;

1.3
date	2016.11.06.16.12.53;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	y53pFMSDssW4bnCb;

1.2
date	2016.11.06.15.52.50;	author jmc;	state Exp;
branches;
next	1.1;
commitid	UKoyflsJLv0vYdpL;

1.1
date	2016.11.02.15.23.41;	author schwarze;	state Exp;
branches;
next	;
commitid	CHj82HRkjj5TG7Gx;


desc
@@


1.5
log
@Add Copyright and license.
Like OpenSSL, move some text from ERR(3) to the fitting page ERR_put_error(3).
Merge documentation of ERR_add_error_vdata(3) from OpenSSL.
Drop useless statement about void functions returning no values.
@
text
@.\"	$OpenBSD: ERR.3,v 1.4 2016/11/17 21:06:16 jmc Exp $
.\"	OpenSSL 186bb907 Apr 13 11:05:13 2015 -0700
.\"
.\" This file was written by Ulf Moeller <ulf@@openssl.org> and
.\" Dr. Stephen Henson <steve@@openssl.org>.
.\" Copyright (c) 2000, 2015 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: November 17 2016 $
.Dt ERR 3
.Os
.Sh NAME
.Nm ERR
.Nd OpenSSL error codes
.Sh SYNOPSIS
.In openssl/err.h
.Sh DESCRIPTION
When a call to the OpenSSL library fails, this is usually signaled by
the return value, and an error code is stored in an error queue
associated with the current thread.
The
.Nm
library provides functions to obtain these error codes and textual error
messages.
The
.Xr ERR_get_error 3
manpage describes how to access error codes.
.Pp
Error codes contain information about where the error occurred, and what
went wrong.
.Xr ERR_GET_LIB 3
describes how to extract this information.
A method to obtain human-readable error messages is described in
.Xr ERR_error_string 3 .
.Pp
.Xr ERR_clear_error 3
can be used to clear the error queue.
.Pp
Note that
.Xr ERR_remove_state 3
should be used to avoid memory leaks when threads are terminated.
.Sh ADDING NEW ERROR CODES TO OPENSSL
See
.Xr ERR_put_error 3
if you want to record error codes in the OpenSSL error system from
within your application.
.Pp
The remainder of this section is of interest only if you want to add new
error codes to OpenSSL or add error codes from external libraries.
.Pp
When you are using new function or reason codes, run
.Sy make errors .
The necessary
.Sy #define Ns s
will then automatically be added to the sub-library's header file.
.Ss Adding new libraries
When adding a new sub-library to OpenSSL, assign it a library number
.Dv ERR_LIB_XXX ,
define a macro
.Fn XXXerr
(both in
.In openssl/err.h ) ,
add its name to
.Va ERR_str_libraries[]
(in
.Pa /usr/src/lib/libcrypto/err/err.c ) ,
and add
.Fn ERR_load_XXX_strings
to the
.Fn ERR_load_crypto_strings
function (in
.Sy /usr/src/lib/libcrypto/err/err_all.c ) .
Finally, add an entry
.Pp
.Dl L XXX xxx.h xxx_err.c
.Pp
to
.Sy /usr/src/lib/libcrypto/err/openssl.ec ,
and add
.Pa xxx_err.c
to the
.Pa Makefile .
Running
.Sy make errors
will then generate a file
.Pa xxx_err.c ,
and add all error codes used in the library to
.Pa xxx.h .
.Pp
Additionally the library include file must have a certain form.
Typically it will initially look like this:
.Bd -literal -offset indent
#ifndef HEADER_XXX_H
#define HEADER_XXX_H

#ifdef __cplusplus
extern "C" {
#endif

/* Include files */

#include <openssl/bio.h>
#include <openssl/x509.h>

/* Macros, structures and function prototypes */

/* BEGIN ERROR CODES */
.Ed
.Pp
The
.Sy BEGIN ERROR CODES
sequence is used by the error code generation script as the point to
place new error codes.
Any text after this point will be overwritten when
.Sy make errors
is run.
The closing #endif etc. will be automatically added by the script.
.Pp
The generated C error code file
.Pa xxx_err.c
will load the header files
.In stdio.h ,
.In openssl/err.h
and
.In openssl/xxx.h
so the header file must load any additional header files containing any
definitions it uses.
.Sh USING ERROR CODES IN EXTERNAL LIBRARIES
It is also possible to use OpenSSL's error code scheme in external
libraries.
The library needs to load its own codes and call the OpenSSL error code
insertion script
.Pa mkerr.pl
explicitly to add codes to the header file and generate the C error code
file.
This will normally be done if the external library needs to generate new
ASN.1 structures but it can also be used to add more general purpose
error code handling.
.Sh INTERNALS
The error queues are stored in a hash table with one
.Vt ERR_STATE
entry for each PID.
.Fn ERR_get_state
returns the current thread's
.Vt ERR_STATE .
An
.Vt ERR_STATE
can hold up to
.Dv ERR_NUM_ERRORS
error codes.
When more error codes are added, the old ones are overwritten, on the
assumption that the most recent errors are most important.
.Pp
Error strings are also stored in a hash table.
The hash tables can be obtained by calling
.Fn ERR_get_err_state_table
and
.Fn ERR_get_string_table .
.Sh SEE ALSO
.Xr CRYPTO_set_locking_callback 3 ,
.Xr ERR_clear_error 3 ,
.Xr ERR_error_string 3 ,
.Xr ERR_get_error 3 ,
.Xr ERR_GET_LIB 3 ,
.Xr ERR_load_crypto_strings 3 ,
.Xr ERR_load_strings 3 ,
.Xr ERR_print_errors 3 ,
.Xr ERR_put_error 3 ,
.Xr ERR_remove_state 3 ,
.Xr ERR_set_mark 3 ,
.Xr SSL_get_error 3
@


1.4
log
@various cleanup;
@
text
@d1 2
a2 1
.\"	$OpenBSD: ERR.3,v 1.3 2016/11/06 16:12:53 schwarze Exp $
d4 49
a52 1
.Dd $Mdocdate: November 6 2016 $
d61 1
a61 1
When a call to the OpenSSL library fails, this is usually signalled by
a92 25
.Ss Reporting errors
Each sub-library has a specific macro
.Fn XXXerr f r
that is used to report errors.
Its first argument is a function code
.Dv XXX_F_* ;
the second argument is a reason code
.Dv XXX_R_* .
Function codes are derived from the function names
whereas reason codes consist of textual error descriptions.
For example, the function
.Fn ssl23_read
reports a "handshake failure" as follows:
.Pp
.Dl SSLerr(SSL_F_SSL23_READ, SSL_R_SSL_HANDSHAKE_FAILURE);
.Pp
Function and reason codes should consist of upper case characters,
numbers and underscores only.
The error file generation script translates function codes into function
names by looking in the header files for an appropriate function name.
If none is found it just uses the capitalized form such as "SSL23_READ"
in the above example.
.Pp
The trailing section of a reason code (after the "_R_") is translated
into lower case and underscores changed to spaces.
a98 8
.Pp
Although a library will normally report errors using its own specific
.Fn XXXerr
macro, another library's macro can be used.
This is normally only done when a library wants to include ASN.1 code
which must use the
.Fn ASN1err
macro.
@


1.3
log
@delete prototypes available in other pages and add a missing .Xr link
@
text
@d1 1
a1 1
.\"	$OpenBSD: ERR.3,v 1.2 2016/11/06 15:52:50 jmc Exp $
d49 1
a49 1
.Dv XXX_F_* ,
d52 2
a53 2
Function codes are derived from the function names; reason codes consist
of textual error descriptions.
d63 2
a64 2
names by looking in the header files for an appropriate function name,
if none is found it just uses the capitalized form such as "SSL23_READ"
d79 1
a79 1
This is normally only done when a library wants to include ASN1 code
d140 2
a141 2
place new error codes, any text after this point will be overwritten
when
d164 1
a164 1
ASN1 structures but it can also be used to add more general purpose
d169 1
a169 1
entry for each pid.
d181 1
a181 1
Error strings are also stored in hash table.
a186 1
.Xr CRYPTO_set_id_callback 3 ,
@


1.2
log
@first pass; ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d3 1
a3 1
.Dd $Mdocdate: November 2 2016 $
a10 101
.Ft unsigned long
.Fn ERR_get_error void
.Ft unsigned long
.Fn ERR_peek_error void
.Ft unsigned long
.Fo ERR_get_error_line
.Fa "const char **file"
.Fa "int *line"
.Fc
.Ft unsigned long
.Fo ERR_peek_error_line
.Fa "const char **file"
.Fa "int *line"
.Fc
.Ft unsigned long
.Fo ERR_get_error_line_data
.Fa "const char **file"
.Fa "int *line"
.Fa "const char **data"
.Fa "int *flags"
.Fc
.Ft unsigned long
.Fo ERR_peek_error_line_data
.Fa "const char **file"
.Fa "int *line"
.Fa "const char **data"
.Fa "int *flags"
.Fc
.Ft int
.Fo ERR_GET_LIB
.Fa "unsigned long e"
.Fc
.Ft int
.Fo ERR_GET_FUNC
.Fa "unsigned long e"
.Fc
.Ft int
.Fo ERR_GET_REASON
.Fa "unsigned long e"
.Fc
.Ft void
.Fn ERR_clear_error void
.Ft char *
.Fo ERR_error_string
.Fa "unsigned long e"
.Fa "char *buf"
.Fc
.Ft const char *
.Fo ERR_lib_error_string
.Fa "unsigned long e"
.Fc
.Ft const char *
.Fo ERR_func_error_string
.Fa "unsigned long e"
.Fc
.Ft const char *
.Fo ERR_reason_error_string
.Fa "unsigned long e"
.Fc
.Ft void
.Fo ERR_print_errors
.Fa "BIO *bp"
.Fc
.Ft void
.Fo ERR_print_errors_fp
.Fa "FILE *fp"
.Fc
.Ft void
.Fn ERR_load_crypto_strings void
.Ft void
.Fn ERR_free_strings void
.Ft void
.Fo ERR_remove_state
.Fa "unsigned long pid"
.Fc
.Ft void
.Fo ERR_put_error
.Fa "int lib"
.Fa "int func"
.Fa "int reason"
.Fa "const char *file"
.Fa "int line"
.Fc
.Ft void
.Fo ERR_add_error_data
.Fa "int num"
.Fa ...
.Fc
.Ft void
.Fo ERR_load_strings
.Fa "int lib"
.Fa "ERR_STRING_DATA str[]"
.Fc
.Ft unsigned long
.Fo ERR_PACK
.Fa "int lib"
.Fa "int func"
.Fa "int reason"
.Fc
.Ft int
.Fn ERR_get_next_error_library void
d198 1
@


1.1
log
@convert ERR manuals from pod to mdoc; while reading this,
i wtfed, laughed, puked, and cried in more or less that order...
@
text
@d1 3
a3 1
.Dd $Mdocdate: December 7 2014 $
@

