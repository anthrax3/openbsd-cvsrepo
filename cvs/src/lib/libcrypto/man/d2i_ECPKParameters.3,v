head	1.10;
access;
symbols
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9;
locks; strict;
comment	@.\" @;


1.10
date	2017.08.01.14.57.03;	author schwarze;	state Exp;
branches;
next	1.9;
commitid	jSNnYr5xyRU8l5SO;

1.9
date	2016.12.25.18.39.35;	author schwarze;	state Exp;
branches;
next	1.8;
commitid	ZantvCqzL0v1AX71;

1.8
date	2016.12.25.17.05.59;	author schwarze;	state Exp;
branches;
next	1.7;
commitid	ugIDm26UmPAtrLMS;

1.7
date	2016.12.11.14.22.43;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	vNo9ojV3GFqPchdI;

1.6
date	2016.12.06.14.54.55;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	u7rycehkrcCqDGz7;

1.5
date	2016.12.05.20.32.19;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	250ZJHxAoe5k8OHq;

1.4
date	2016.11.06.16.54.58;	author jmc;	state Exp;
branches;
next	1.3;
commitid	bxKcDNlUTSvxXpGq;

1.3
date	2016.11.06.15.57.38;	author schwarze;	state Exp;
branches;
next	1.2;
commitid	SqoqNbIOWJ0AJF8M;

1.2
date	2016.11.06.15.52.50;	author jmc;	state Exp;
branches;
next	1.1;
commitid	UKoyflsJLv0vYdpL;

1.1
date	2016.11.05.13.36.33;	author schwarze;	state Exp;
branches;
next	;
commitid	iozMFm2hiM7VZOmt;


desc
@@


1.10
log
@add missing and correct misspelled names, most in NAME sections;
found with regress/usr.bin/mandoc/db/dbm_dump;
OK jmc@@
@
text
@.\"	$OpenBSD: d2i_ECPKParameters.3,v 1.9 2016/12/25 18:39:35 schwarze Exp $
.\"	OpenSSL 05ea606a May 20 20:52:46 2016 -0400
.\"
.\" This file is a derived work.
.\" The changes are covered by the following Copyright and license:
.\"
.\" Copyright (c) 2016 Ingo Schwarze <schwarze@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.\" The original file was written by Matt Caswell <matt@@openssl.org>.
.\" Copyright (c) 2013, 2015 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: December 25 2016 $
.Dt D2I_ECPKPARAMETERS 3
.Os
.Sh NAME
.Nm d2i_ECPKParameters ,
.Nm i2d_ECPKParameters ,
.Nm d2i_ECPKParameters_bio ,
.Nm i2d_ECPKParameters_bio ,
.Nm d2i_ECPKParameters_fp ,
.Nm i2d_ECPKParameters_fp ,
.Nm d2i_ECParameters ,
.Nm i2d_ECParameters ,
.Nm ECParameters_dup ,
.Nm d2i_ECPrivateKey ,
.Nm i2d_ECPrivateKey ,
.Nm d2i_ECPrivateKey_bio ,
.Nm i2d_ECPrivateKey_bio ,
.Nm d2i_ECPrivateKey_fp ,
.Nm i2d_ECPrivateKey_fp ,
.Nm o2i_ECPublicKey ,
.Nm i2o_ECPublicKey ,
.Nm ECPKParameters_print ,
.Nm ECPKParameters_print_fp ,
.Nm ECParameters_print ,
.Nm ECParameters_print_fp ,
.Nm d2i_EC_PUBKEY ,
.Nm i2d_EC_PUBKEY ,
.Nm d2i_EC_PUBKEY_bio ,
.Nm i2d_EC_PUBKEY_bio ,
.Nm d2i_EC_PUBKEY_fp ,
.Nm i2d_EC_PUBKEY_fp
.Nd decode and encode ASN.1 representations of elliptic curve entities
.Sh SYNOPSIS
.In openssl/ec.h
.Ft EC_GROUP *
.Fo d2i_ECPKParameters
.Fa "EC_GROUP **val_out"
.Fa "const unsigned char **des_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_ECPKParameters
.Fa "const EC_GROUP *val_in"
.Fa "unsigned char **des_out"
.Fc
.Ft EC_GROUP *
.Fo d2i_ECPKParameters_bio
.Fa "BIO *in_bio"
.Fa "EC_GROUP **val_out"
.Fc
.Ft int
.Fo i2d_ECPKParameters_bio
.Fa "BIO *out_bio"
.Fa "EC_GROUP *val_in"
.Fc
.Ft EC_GROUP *
.Fo d2i_ECPKParameters_fp
.Fa "FILE *in_fp"
.Fa "EC_GROUP **val_out"
.Fc
.Ft int
.Fo i2d_ECPKParameters_fp
.Fa "FILE *out_fp"
.Fa "EC_GROUP *val_in"
.Fc
.Ft EC_KEY *
.Fo d2i_ECParameters
.Fa "EC_KEY **val_out"
.Fa "const unsigned char **des_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_ECParameters
.Fa "EC_KEY *val_in"
.Fa "unsigned char **des_out"
.Fc
.Ft EC_KEY *
.Fo ECParameters_dup
.Fa "EC_KEY *val_in"
.Fc
.Ft EC_KEY *
.Fo d2i_ECPrivateKey
.Fa "EC_KEY **val_out"
.Fa "const unsigned char **des_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_ECPrivateKey
.Fa "EC_KEY *val_in"
.Fa "unsigned char **des_out"
.Fc
.Ft EC_KEY *
.Fo d2i_ECPrivateKey_bio
.Fa "BIO *in_bio"
.Fa "EC_KEY **val_out"
.Fc
.Ft int
.Fo i2d_ECPrivateKey_bio
.Fa "BIO *out_bio"
.Fa "EC_KEY *val_in"
.Fc
.Ft EC_KEY *
.Fo d2i_ECPrivateKey_fp
.Fa "FILE *in_fp"
.Fa "EC_KEY **val_out"
.Fc
.Ft int
.Fo i2d_ECPrivateKey_fp
.Fa "FILE *out_fp"
.Fa "EC_KEY *val_in"
.Fc
.Ft EC_KEY *
.Fo o2i_ECPublicKey
.Fa "EC_KEY **val_out"
.Fa "const unsigned char **des_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2o_ECPublicKey
.Fa "EC_KEY *val_in"
.Fa "unsigned char **des_out"
.Fc
.Ft int
.Fo ECPKParameters_print
.Fa "BIO *out_bio"
.Fa "const EC_GROUP *val_in"
.Fa "int indent"
.Fc
.Ft int
.Fo ECPKParameters_print_fp
.Fa "FILE *out_fp"
.Fa "const EC_GROUP *val_in"
.Fa "int indent"
.Fc
.Ft int
.Fo ECParameters_print
.Fa "BIO *out_bio"
.Fa "const EC_KEY *val_in"
.Fc
.Ft int
.Fo ECParameters_print_fp
.Fa "FILE *out_fp"
.Fa "const EC_KEY *val_in"
.Fc
.In openssl/x509.h
.Ft EC_KEY *
.Fo d2i_EC_PUBKEY
.Fa "EC_KEY **val_out"
.Fa "const unsigned char **des_in"
.Fa "long length"
.Fc
.Ft int
.Fo i2d_EC_PUBKEY
.Fa "EC_KEY *val_in"
.Fa "unsigned char **des_out"
.Fc
.Ft EC_KEY *
.Fo d2i_EC_PUBKEY_bio
.Fa "BIO *in_bio"
.Fa "EC_KEY **val_out"
.Fc
.Ft int
.Fo i2d_EC_PUBKEY_bio
.Fa "BIO *out_bio"
.Fa "EC_KEY *val_in"
.Fc
.Ft EC_KEY *
.Fo d2i_EC_PUBKEY_fp
.Fa "FILE *in_fp"
.Fa "EC_KEY **val_out"
.Fc
.Ft int
.Fo i2d_EC_PUBKEY_fp
.Fa "FILE *out_fp"
.Fa "EC_KEY *val_in"
.Fc
.Sh DESCRIPTION
These functions decode and encode elliptic curve keys and parameters.
For details about the semantics, examples, caveats, and bugs, see
.Xr ASN1_item_d2i 3 .
.Pp
.Fn d2i_ECPKParameters
and
.Fn i2d_ECPKParameters
decode and encode the parameters of an elliptic curve.
.Fn d2i_ECPKParameters_bio ,
.Fn i2d_ECPKParameters_bio ,
.Fn d2i_ECPKParameters_fp ,
and
.Fn i2d_ECPKParameters_fp
are similar except that they decode or encode using a
.Vt BIO
or
.Vt FILE
pointer.
These four functions are currently implemented as macros.
.Pp
.Fn d2i_ECParameters
does the same parsing as
.Fn d2i_ECPKParameters
but saves the result in the
.Fa group
field of an
.Vt EC_KEY
structure.
.Pp
.Fn i2d_ECParameters
produces the same output as
.Fn i2d_ECPKParameters
but uses
.Fa val_in->group
for input instead of
.Fa val_in .
.Pp
.Fn ECParameters_dup
allocates and initializes an empty
.Vt EC_KEY
object and copies the EC parameters from
.Fa val_in
to it by calling
.Fn i2d_ECParameters
and
.Fn d2i_ECParameters .
If a private or public key or any flags are present in
.Fa val_in ,
they are not copied.
.Pp
.Fn d2i_ECPrivateKey
and
.Fn i2d_ECPrivateKey
decode and encode an EC private key using an ASN.1
.Vt ECPrivateKey
structure defined in RFC 5915 section 3 and used for the privateKey
field of the ASN.1
.Vt PrivateKeyInfo
structure defined in RFC 5208 section 5, see
.Xr PKCS8_PRIV_KEY_INFO_new 3 .
.Fn d2i_ECPrivateKey_bio ,
.Fn i2d_ECPrivateKey_bio ,
.Fn d2i_ECPrivateKey_fp ,
and
.Fn i2d_ECPrivateKey_fp
are similar except that they decode or encode using a
.Vt BIO
or
.Vt FILE
pointer.
.Pp
.Fn o2i_ECPublicKey
and
.Fn i2o_ECPublicKey
decode and encode an EC public key.
In contrast to
.Xr ASN1_item_d2i 3 ,
.Fn o2i_ECPublicKey
requires
.Fa val_out ,
.Pf * Fa val_out ,
and
.Po Pf * Fa val_out Pc Ns -> Ns Fa group
to be
.Pf non- Dv NULL .
.Pp
.Fn ECPKParameters_print
and
.Fn ECPKParameters_print_fp
print human-readable output of the public parameters of the
.Vt EC_GROUP
to
.Fa out_bio
or
.Fa out_fp .
The output lines are indented by
.Fa indent
spaces.
.Pp
.Fn ECParameters_print
and
.Fn ECParameters_print_fp
print the parameter components of
.Fa val_in
to
.Fa out_bio
or
.Fa out_fp .
.Pp
.Fn d2i_EC_PUBKEY
and
.Fn i2d_EC_PUBKEY
decode and encode an EC public key using an ASN.1
.Vt SubjectPublicKeyInfo
structure defined in RFC 5280 section 4.1 and documented in
.Xr X509_PUBKEY_new 3 .
.Fn d2i_EC_PUBKEY_bio ,
.Fn i2d_EC_PUBKEY_bio ,
.Fn d2i_EC_PUBKEY_fp ,
and
.Fn i2d_EC_PUBKEY_fp
are similar except that they decode or encode using a
.Vt BIO
or
.Vt FILE
pointer.
.Sh RETURN VALUES
.Fn d2i_ECPKParameters ,
.Fn d2i_ECPKParameters_bio ,
and
.Fn d2i_ECPKParameters_fp
return a valid
.Vt EC_GROUP
structure or
.Dv NULL
if an error occurs.
.Pp
.Fn d2i_ECParameters ,
.Fn ECParameters_dup ,
.Fn d2i_ECPrivateKey ,
.Fn d2i_ECPrivateKey_bio ,
.Fn d2i_ECPrivateKey_fp ,
.Fn o2i_ECPublicKey ,
.Fn d2i_EC_PUBKEY ,
.Fn d2i_EC_PUBKEY_bio ,
and
.Fn d2i_EC_PUBKEY_fp
return a valid
.Vt EC_KEY
structure or
.Dv NULL
if an error occurs.
.Pp
.Fn i2d_ECPKParameters ,
.Fn i2d_ECParameters ,
.Fn i2d_ECPrivateKey ,
.Fn i2o_ECPublicKey ,
and
.Fn i2d_EC_PUBKEY
return the number of bytes successfully encoded or a negative value if
an error occurs.
.Pp
.Fn i2d_ECPKParameters_bio ,
.Fn i2d_ECPKParameters_fp ,
.Fn i2d_ECPrivateKey_bio ,
.Fn i2d_ECPrivateKey_fp ,
.Fn ECPKParameters_print ,
.Fn ECPKParameters_print_fp ,
.Fn ECParameters_print ,
.Fn ECParameters_print_fp ,
.Fn i2d_EC_PUBKEY_bio ,
and
.Fn i2d_EC_PUBKEY_fp
return 1 for success or 0 if an error occurs.
.Sh SEE ALSO
.Xr ASN1_item_d2i 3 ,
.Xr EC_GROUP_copy 3 ,
.Xr EC_GROUP_new 3 ,
.Xr EC_KEY_new 3 ,
.Xr EVP_PKEY_set1_EC_KEY 3 ,
.Xr PEM_write_ECPrivateKey 3 ,
.Xr PKCS8_PRIV_KEY_INFO_new 3 ,
.Xr X509_PUBKEY_new 3
.Sh STANDARDS
RFC 5915: Elliptic Curve Private Key Structure
.Pp
RFC 5208: Public-Key Cryptography Standards (PKCS) #8:
Private-Key Information Syntax Specification
.Pp
RFC 5280: Internet X.509 Public Key Infrastructure Certificate and
Certificate Revocation List (CRL) Profile,
section 4.1: Basic Certificate Fields
@


1.9
log
@Correct the DESCRIPTION of ECParameters_dup(3).
Clarify requirements for o2i_ECPublicKey(3).
Add STANDARDS references for d2i_ECPrivateKey(3) and d2i_EC_PUBKEY(3).
Trim some excessive cross references that are only tangentially
related and add some more relevant ones instead.
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_ECPKParameters.3,v 1.8 2016/12/25 17:05:59 schwarze Exp $
d175 1
a175 1
.Fo i2d_ECPKPrivateKey_fp
d240 1
a240 1
.Fo i2d_ECPK_PUBKEY_fp
d410 1
a410 1
.Fn i2d_ECPKPrivateKey_fp ,
d417 1
a417 1
.Fn i2d_ECPK_PUBKEY_fp
@


1.8
log
@Basic cleanup to prepare for content improvements:
Use the same parameter names as in ASN1_item_d2i(3).
Point to ASN1_item_d2i(3) for details.
Delete lots of rendundant text.

While here, add ten missing functions found in OpenSSL doc/man3/d2i_X509.pod
and fix errors in the prototypes of i2d_ECPKParameters_bio(3)
and i2d_ECPKParameters_fp(3).
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_ECPKParameters.3,v 1.7 2016/12/11 14:22:43 schwarze Exp $
d4 18
a21 1
.\" This file was written by Matt Caswell <matt@@openssl.org>.
d68 1
a68 1
.Dd $Mdocdate: December 11 2016 $
d283 3
a285 1
copies
d287 1
a287 1
by calling
d291 3
d298 7
a304 1
decode and encode an EC private key.
d320 2
d323 7
a329 1
can store a key into an existing object.
d357 4
a360 1
decode and encode an EC public key.
a420 1
.Xr EC_GFp_simple_method 3 ,
d424 13
a436 3
.Xr EC_POINT_add 3 ,
.Xr EC_POINT_new 3 ,
.Xr ECDSA_SIG_new 3
@


1.7
log
@Distribute the text of ec(3) to the individual EC manuals where it belongs.
Make sure EC_GROUP_new(3) points to all EC manuals and all EC manuals
point back to EC_GROUP_new(3), and add some other useful links as well.
Change all links to ec(3) to point to EC_GROUP_new(3) instead.
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_ECPKParameters.3,v 1.6 2016/12/06 14:54:55 schwarze Exp $
d51 1
a51 1
.Dd $Mdocdate: December 6 2016 $
d66 4
d75 7
a81 1
.Nm ECParameters_print_fp
d87 3
a89 3
.Fa "EC_GROUP **px"
.Fa "const unsigned char **in"
.Fa "long len"
d93 2
a94 2
.Fa "const EC_GROUP *x"
.Fa "unsigned char **out"
d98 2
a99 2
.Fa "BIO *bp"
.Fa "EC_GROUP **px"
d103 2
a104 2
.Fa "BIO *bp"
.Fa "EC_GROUP **px"
d108 2
a109 2
.Fa "FILE *fp"
.Fa "EC_GROUP **px"
d113 2
a114 2
.Fa "FILE *fp"
.Fa "EC_GROUP **px"
d118 3
a120 3
.Fa "EC_KEY **key"
.Fa "const unsigned char **in"
.Fa "long len"
d124 2
a125 2
.Fa "EC_KEY *key"
.Fa "unsigned char **out"
d129 1
a129 1
.Fa "EC_KEY *key"
d133 3
a135 3
.Fa "EC_KEY **key"
.Fa "const unsigned char **in"
.Fa "long len"
d139 22
a160 2
.Fa "EC_KEY *key"
.Fa "unsigned char **out"
d164 3
a166 3
.Fa "EC_KEY **key"
.Fa "const unsigned char **in"
.Fa "long len"
d170 2
a171 2
.Fa "EC_KEY *key"
.Fa "unsigned char **out"
d175 3
a177 3
.Fa "BIO *bp"
.Fa "const EC_GROUP *x"
.Fa "int off"
d181 3
a183 3
.Fa "FILE *fp"
.Fa "const EC_GROUP *x"
.Fa "int off"
d187 2
a188 2
.Fa "BIO *bp"
.Fa "const EC_KEY *key"
d192 34
a225 2
.Fa "FILE *fp"
.Fa "const EC_KEY *key"
d228 3
a230 52
.Fn d2i_ECPKParameters
attempts to decode
.Fa len
bytes at
.Pf * Fa in .
If successful, a pointer to the
.Vt EC_GROUP
structure is returned.
If an error occurred, then
.Dv NULL
is returned.
If
.Fa px
is not
.Dv NULL ,
then the returned structure is written to
.Pf * Fa px .
If
.Pf * Fa px
is not
.Dv NULL ,
then it is assumed that
.Pf * Fa px
contains a valid
.Vt EC_GROUP
structure and an attempt is made to reuse it.
If the call is successful,
.Pf * Fa in
is incremented to the byte following the parsed data.
.Pp
.Fn i2d_ECPKParameters
encodes the structure pointed to by
.Fa x
into DER format.
If
.Fa out
is not
.Dv NULL ,
is writes the DER encoded data to the buffer at
.Pf * Fa out
and increments it to point after the data just written.
If the return value is negative, an error occurred, otherwise it returns
the length of the encoded data.
.Pp
If
.Pf * Fa out
is
.Dv NULL ,
memory will be allocated for a buffer and the encoded data written to it.
In this case
.Pf * Fa out
is not incremented, and it points to the start of the data just written.
a231 2
.Fn d2i_ECPKParameters_bio
is similar to
d233 1
a233 12
except it attempts to parse data from
.Vt BIO
.Fa bp .
.Fn d2i_ECPKParameters_fp
is similar to
.Fn d2i_ECPKParameters
except it attempts to parse data from the
.Vt FILE
pointer
.Fa fp .
.Fn i2d_ECPKParameters_bio
is similar to
d235 5
a239 6
except it writes the encoding of the structure
.Fa x
to
.Vt BIO
.Fa bp
and it returns 1 for success or 0 for failure.
d241 1
a241 5
is similar to
.Fn i2d_ECPKParameters
except it writes the encoding of the structure
.Fa x
to
d243 3
a245 2
.Sy bp
and it returns 1 for success or 0 for failure.
d261 1
a261 1
.Fa key->group
d263 1
a263 1
.Fa px .
d267 1
a267 1
.Fa key
d274 1
a274 8
interprets
.Fa len
bytes at
.Fa in
as a DER-encoded private key, decodes it, stores the result in
.Fa key
as described above, and returns a pointer to it.
.Pp
d276 11
a286 5
encodes the private key
.Fa a
into DER format and writes it to
.Fa out
as described above.
d289 1
a289 7
takes a string of
.Fa len
octets from
.Fa in ,
decodes them, and stores the resulting EC public key in the existing
.Pf * Fa key .
.Pp
d291 3
a293 15
encodes the public
.Fa key
into the octet string buffer
.Pf * Fa out .
If
.Pf * Fa out
is
.Dv NULL ,
a new buffer of the required size is allocated;
otherwise, the pointer is advanced to point to the octet
after the last one written.
.Pp
These functions are very similar to the X.509 functions described in
.Xr d2i_X509 3 ,
where further notes and examples are available.
a294 1
The
d298 1
a298 1
functions print human-readable output of the public parameters of the
d301 1
a301 1
.Fa bp
d303 1
a303 1
.Fa fp .
d305 1
a305 1
.Fa off
d312 1
a312 1
.Fa key
d314 15
a328 1
.Fa bp
d330 2
a331 1
.Fa fp .
d346 5
d352 1
a352 1
.Fn o2i_ECPublicKey
d362 1
d364 1
a364 1
.Fn i2o_ECPublicKey
d370 2
d375 2
d378 1
a378 1
.Fn ECParameters_print_fp
d381 1
a381 1
.Xr d2i_X509 3 ,
@


1.6
log
@Delete most references to crypto(3).  That page isn't useful enough
to be pointed to from random individual pages.
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_ECPKParameters.3,v 1.5 2016/12/05 20:32:19 schwarze Exp $
d51 1
a51 1
.Dd $Mdocdate: December 5 2016 $
a380 1
.Xr ec 3 ,
d386 2
a387 1
.Xr EC_POINT_new 3
@


1.5
log
@Copyright and license
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_ECPKParameters.3,v 1.4 2016/11/06 16:54:58 jmc Exp $
d51 1
a51 1
.Dd $Mdocdate: November 6 2016 $
a379 1
.Xr crypto 3 ,
@


1.4
log
@spacing between macro args and punctuation;
@
text
@d1 49
a49 1
.\"	$OpenBSD: d2i_ECPKParameters.3,v 1.3 2016/11/06 15:57:38 schwarze Exp $
@


1.3
log
@delete prototypes available in other pages and add two missing .Xr links
@
text
@d1 1
a1 1
.\"	$OpenBSD: d2i_ECPKParameters.3,v 1.2 2016/11/06 15:52:50 jmc Exp $
d251 1
a251 1
.Pf * Fa key.
@


1.2
log
@first pass; ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d3 1
a3 1
.Dd $Mdocdate: November 5 2016 $
d13 7
d21 3
a23 1
.Nm ECPKParameters_print_fp
d38 57
a94 8
.Fd #define d2i_ECPKParameters_bio(bp,x)\
 ASN1_d2i_bio_of(EC_GROUP,NULL,d2i_ECPKParameters,bp,x)
.Fd #define i2d_ECPKParameters_bio(bp,x)\
 ASN1_i2d_bio_of_const(EC_GROUP,i2d_ECPKParameters,bp,x)
.Fd #define d2i_ECPKParameters_fp(fp,x) (EC_GROUP *)ASN1_d2i_fp(NULL,\
 (char *(*)())d2i_ECPKParameters,(fp),(unsigned char **)(x))
.Fd #define i2d_ECPKParameters_fp(fp,x)\
 ASN1_i2d_fp(i2d_ECPKParameters,(fp), (unsigned char *)(x))
d107 10
a117 5
The ECPKParameters encode and decode routines encode and parse the
public parameters for an
.Vt EC_GROUP
structure, which represents a curve.
.Pp
a176 1
.Pp
a183 1
.Pp
a192 1
.Pp
d202 63
d283 10
d304 17
a320 2
.Fn i2d_ECPKParameters
returns the number of bytes successfully encoded or a negative value if
d326 2
d329 1
a329 1
.Fn ECPKParameters_print_fp
@


1.1
log
@convert the remaining manual pages from pod to mdoc
@
text
@d1 3
a3 1
.Dd $Mdocdate: July 11 2014 $
@

