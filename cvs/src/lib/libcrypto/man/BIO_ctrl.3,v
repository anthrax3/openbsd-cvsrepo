head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.2
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@.\" @;


1.7
date	2017.08.01.14.57.03;	author schwarze;	state Exp;
branches;
next	1.6;
commitid	jSNnYr5xyRU8l5SO;

1.6
date	2016.12.06.14.45.08;	author schwarze;	state Exp;
branches;
next	1.5;
commitid	ImlokSyq8j1BA6GY;

1.5
date	2016.11.11.01.23.46;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	6uiZ8xHc9wzJ4xlU;

1.4
date	2016.11.07.15.52.47;	author jmc;	state Exp;
branches;
next	1.3;
commitid	U2KqjHqKphAYLN9U;

1.3
date	2016.11.06.15.52.50;	author jmc;	state Exp;
branches;
next	1.2;
commitid	UKoyflsJLv0vYdpL;

1.2
date	2015.09.09.21.58.20;	author schwarze;	state Exp;
branches;
next	1.1;
commitid	Hl1v037zBNLkmVGx;

1.1
date	2015.02.14.14.09.01;	author schwarze;	state Exp;
branches;
next	;
commitid	uSGRsfGS6ehpZRFi;


desc
@@


1.7
log
@add missing and correct misspelled names, most in NAME sections;
found with regress/usr.bin/mandoc/db/dbm_dump;
OK jmc@@
@
text
@.\"	$OpenBSD: BIO_ctrl.3,v 1.6 2016/12/06 14:45:08 schwarze Exp $
.\"	OpenSSL b055fceb Thu Oct 20 09:56:18 2016 +0100
.\"
.\" This file was written by Dr. Stephen Henson <steve@@openssl.org>.
.\" Copyright (c) 2000, 2016 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: December 6 2016 $
.Dt BIO_CTRL 3
.Os
.Sh NAME
.Nm BIO_ctrl ,
.Nm BIO_callback_ctrl ,
.Nm BIO_ptr_ctrl ,
.Nm BIO_int_ctrl ,
.Nm BIO_reset ,
.Nm BIO_seek ,
.Nm BIO_tell ,
.Nm BIO_flush ,
.Nm BIO_eof ,
.Nm BIO_set_close ,
.Nm BIO_get_close ,
.Nm BIO_pending ,
.Nm BIO_wpending ,
.Nm BIO_ctrl_pending ,
.Nm BIO_ctrl_wpending ,
.Nm BIO_get_info_callback ,
.Nm BIO_set_info_callback ,
.Nm bio_info_cb
.Nd BIO control operations
.Sh SYNOPSIS
.In openssl/bio.h
.Ft long
.Fo BIO_ctrl
.Fa "BIO *bp"
.Fa "int cmd"
.Fa "long larg"
.Fa "void *parg"
.Fc
.Ft long
.Fo BIO_callback_ctrl
.Fa "BIO *b"
.Fa "int cmd"
.Fa "bio_info_cb cb"
.Fc
.Ft char *
.Fo BIO_ptr_ctrl
.Fa "BIO *bp"
.Fa "int cmd"
.Fa "long larg"
.Fc
.Ft long
.Fo BIO_int_ctrl
.Fa "BIO *bp"
.Fa "int cmd"
.Fa "long larg"
.Fa "int iarg"
.Fc
.Ft int
.Fo BIO_reset
.Fa "BIO *b"
.Fc
.Ft int
.Fo BIO_seek
.Fa "BIO *b"
.Fa "int ofs"
.Fc
.Ft int
.Fo BIO_tell
.Fa "BIO *b"
.Fc
.Ft int
.Fo BIO_flush
.Fa "BIO *b"
.Fc
.Ft int
.Fo BIO_eof
.Fa "BIO *b"
.Fc
.Ft int
.Fo BIO_set_close
.Fa "BIO *b"
.Fa "long flag"
.Fc
.Ft int
.Fo BIO_get_close
.Fa "BIO *b"
.Fc
.Ft int
.Fo BIO_pending
.Fa "BIO *b"
.Fc
.Ft int
.Fo BIO_wpending
.Fa "BIO *b"
.Fc
.Ft size_t
.Fo BIO_ctrl_pending
.Fa "BIO *b"
.Fc
.Ft size_t
.Fo BIO_ctrl_wpending
.Fa "BIO *b"
.Fc
.Ft int
.Fo BIO_get_info_callback
.Fa "BIO *b"
.Fa "bio_info_cb **cbp"
.Fc
.Ft int
.Fo BIO_set_info_callback
.Fa "BIO *b"
.Fa "bio_info_cb *cb"
.Fc
.Ft typedef void
.Fo bio_info_cb
.Fa "BIO *b"
.Fa "int oper"
.Fa "const char *ptr"
.Fa "int arg1"
.Fa "long arg2"
.Fa "long arg3"
.Fc
.Sh DESCRIPTION
.Fn BIO_ctrl ,
.Fn BIO_callback_ctrl ,
.Fn BIO_ptr_ctrl ,
and
.Fn BIO_int_ctrl
are BIO "control" operations taking arguments of various types.
These functions are not normally called directly -
various macros are used instead.
The standard macros are described below.
Macros specific to a particular type of BIO
are described in the specific BIO's manual page
as well as any special features of the standard calls.
.Pp
.Fn BIO_reset
typically resets a BIO to some initial state.
In the case of file related BIOs, for example,
it rewinds the file pointer to the start of the file.
.Pp
.Fn BIO_seek
resets a file related BIO's (that is file descriptor and
FILE BIOs) file position pointer to
.Fa ofs
bytes from start of file.
.Pp
.Fn BIO_tell
returns the current file position of a file related BIO.
.Pp
.Fn BIO_flush
normally writes out any internally buffered data.
In some cases it is used to signal EOF and that no more data will be written.
.Pp
.Fn BIO_eof
returns 1 if the BIO has read EOF.
The precise meaning of "EOF" varies according to the BIO type.
.Pp
.Fn BIO_set_close
sets the BIO
.Fa b
close flag to
.Fa flag .
.Fa flag
can take the value
.Dv BIO_CLOSE
or
.Dv BIO_NOCLOSE .
Typically
.Dv BIO_CLOSE
is used in a source/sink BIO to indicate that the underlying I/O stream
should be closed when the BIO is freed.
.Pp
.Fn BIO_get_close
returns the BIO's close flag.
.Pp
.Fn BIO_pending ,
.Fn BIO_ctrl_pending ,
.Fn BIO_wpending ,
and
.Fn BIO_ctrl_wpending
return the number of pending characters in the BIO's read and write buffers.
Not all BIOs support these calls.
.Fn BIO_ctrl_pending
and
.Fn BIO_ctrl_wpending
return a
.Vt size_t
type and are functions.
.Fn BIO_pending
and
.Fn BIO_wpending
are macros which call
.Fn BIO_ctrl .
.Sh RETURN VALUES
.Fn BIO_reset
normally returns 1 for success and 0 or -1 for failure.
File BIOs are an exception, returning 0 for success and -1 for failure.
.Pp
.Fn BIO_seek
and
.Fn BIO_tell
both return the current file position on success
and -1 for failure, except file BIOs which for
.Fn BIO_seek
always return 0 for success and -1 for failure.
.Pp
.Fn BIO_flush
returns 1 for success and 0 or -1 for failure.
.Pp
.Fn BIO_eof
returns 1 if EOF has been reached or 0 otherwise.
.Pp
.Fn BIO_set_close
always returns 1.
.Pp
.Fn BIO_get_close
returns the close flag value
.Dv BIO_CLOSE
or
.Dv BIO_NOCLOSE .
.Pp
.Fn BIO_pending ,
.Fn BIO_ctrl_pending ,
.Fn BIO_wpending ,
and
.Fn BIO_ctrl_wpending
return the amount of pending data.
.Sh NOTES
Because it can write data,
.Fn BIO_flush
may return 0 or -1 indicating that the call should be retried later
in a similar manner to
.Xr BIO_write 3 .
The
.Xr BIO_should_retry 3
call should be used and appropriate action taken if the call fails.
.Pp
The return values of
.Fn BIO_pending
and
.Fn BIO_wpending
may not reliably determine the amount of pending data in all cases.
For example in the case of a file BIO some data may be available in the
.Vt FILE
structure's internal buffers but it is not possible
to determine this in a portable way.
For other types of BIO they may not be supported.
.Pp
If they do not internally handle a particular
.Fn BIO_ctrl
operation, filter BIOs usually pass the operation
to the next BIO in the chain.
This often means there is no need to locate the required BIO for
a particular operation: it can be called on a chain and it will
be automatically passed to the relevant BIO.
However this can cause unexpected results.
For example no current filter BIOs implement
.Fn BIO_seek ,
but this may still succeed if the chain ends
in a FILE or file descriptor BIO.
.Pp
Source/sink BIOs return an 0 if they do not recognize the
.Fn BIO_ctrl
operation.
.Sh SEE ALSO
.Xr BIO_new 3
.Sh BUGS
Some of the return values are ambiguous and care should be taken.
In particular a return value of 0 can be returned if an operation
is not supported, if an error occurred, if EOF has not been reached
and in the case of
.Fn BIO_seek
on a file BIO for a successful operation.
@


1.6
log
@make sure that all the BIO pages point back to the master page BIO_new(3)
@
text
@d1 1
a1 1
.\"	$OpenBSD: BIO_ctrl.3,v 1.5 2016/11/11 01:23:46 schwarze Exp $
d51 1
a51 1
.Dd $Mdocdate: November 11 2016 $
d71 2
a72 1
.Nm BIO_set_info_callback
@


1.5
log
@add Copyright and license,
simplify the BIO_callback_ctrl() prototype,
and change .Fn to .Xr for two functions documented elsewhere
@
text
@d1 1
a1 1
.\"	$OpenBSD: BIO_ctrl.3,v 1.4 2016/11/07 15:52:47 jmc Exp $
d51 1
a51 1
.Dd $Mdocdate: November 7 2016 $
d309 2
@


1.4
log
@various cleanup;
@
text
@d1 2
a2 1
.\"	$OpenBSD: BIO_ctrl.3,v 1.3 2016/11/06 15:52:50 jmc Exp $
d4 48
a51 1
.Dd $Mdocdate: November 6 2016 $
d86 1
a86 1
.Fa "void (*fp)(struct bio_st *, int, const char *, int, long, long)"
d277 1
a277 1
.Fn BIO_write .
d279 1
a279 1
.Fn BIO_should_retry
@


1.3
log
@first pass; ok schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d3 1
a3 1
.Dd $Mdocdate: September 9 2015 $
d125 1
a125 1
These functions are not normally called directly,
d127 4
a130 3
The standard macros are described below, macros specific to a
particular type of BIO are described in the specific BIO's manual
page as well as any special features of the standard calls.
d133 3
a135 3
typically resets a BIO to some initial state, in the case
of file related BIOs for example it rewinds the file pointer
to the start of the file.
d147 2
a148 2
normally writes out any internally buffered data, in some cases
it is used to signal EOF and that no more data will be written.
d151 2
a152 2
returns 1 if the BIO has read EOF, the precise meaning of
"EOF" varies according to the BIO type.
d184 1
a184 1
type and are functions,
d193 1
a193 1
File BIOs are an exception, they return 0 for success and -1 for failure.
d207 1
a207 1
returns 1 if EOF has been reached 0 otherwise.
d232 1
a232 1
call should be used and appropriate action taken is the call fails.
d242 1
a242 1
to determine this in a portably way.
d250 1
a250 1
a particular operation, it can be called on a chain and it will
d252 2
a253 2
However this can cause unexpected results:
for example no current filter BIOs implement
@


1.2
log
@Add missing CVS Mdocdate tags.  No text change, except for the change
of date that can't be helped.
@
text
@d1 3
a3 1
.Dd $Mdocdate: July 17 2014 $
@


1.1
log
@second batch of perlpod(1) to mdoc(7) conversion
@
text
@d1 1
a1 1
.Dd July 17, 2014
@

