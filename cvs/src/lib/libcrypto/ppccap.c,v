head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2014.07.17.23.48.24;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	SvIcv0xWaEV65AYd;

1.5
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.03.11.39.46;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.20.14.32.19;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.15.13.41.53;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@avoid sys/param.h; Jonas Termansen
@
text
@/* $OpenBSD: ppccap.c,v 1.5 2014/06/12 15:49:27 deraadt Exp $ */

#include <sys/types.h>
#include <sys/sysctl.h>
#include <machine/cpu.h>
#include <unistd.h>

#include <crypto.h>
#include <openssl/bn.h>

#ifdef unused
#define PPC_FPU64	(1<<0)
#define PPC_ALTIVEC	(1<<1)

static int OPENSSL_ppccap_P = 0;
#endif

#ifdef OPENSSL_BN_ASM_MONT
extern int bn_mul_mont_int(BN_ULONG *, const BN_ULONG *, const BN_ULONG *,
	    const BN_ULONG *, const BN_ULONG *, int);
int
bn_mul_mont(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp,
    const BN_ULONG *np, const BN_ULONG *n0, int num)
{
	return bn_mul_mont_int(rp, ap, bp, np, n0, num);
}
#endif

#ifdef unused
void OPENSSL_cpuid_setup(void) __attribute__((constructor));

void
OPENSSL_cpuid_setup(void)
{
	static const int mib[2] = { CTL_MACHDEP, CPU_ALTIVEC };
	static int trigger = 0;
	int altivec = 0;
	size_t size;

	if (trigger)
		return;
	trigger = 1;

	size = sizeof altivec;
	if (sysctl(mib, 2, &altivec, &size, NULL, 0) != -1) {
		if (altivec != 0)
			OPENSSL_ppccap_P |= PPC_ALTIVEC;
	}
}
#endif
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 3
a3 3
/* $OpenBSD$ */
#include <unistd.h>
#include <sys/param.h>
d6 1
@


1.4
log
@Detect Altivec support with the machdep.altivec sysctl rather than setmp and
a SIGILL handler.
Do not attempt to detect and use a 64-bit FPU yet.
@
text
@d1 1
@


1.3
log
@More KNF.
@
text
@a0 5
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <setjmp.h>
#include <signal.h>
d2 4
d9 1
d14 1
a14 2

static sigset_t all_masked;
d17 2
a22 26
	int bn_mul_mont_fpu64(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, const BN_ULONG *np, const BN_ULONG *n0, int num);
	int bn_mul_mont_int(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, const BN_ULONG *np, const BN_ULONG *n0, int num);

	if (sizeof(size_t) == 4) {
#if (defined(__APPLE__) && defined(__MACH__))
		if (num >= 8 && (num&3) == 0 && (OPENSSL_ppccap_P&PPC_FPU64))
			return bn_mul_mont_fpu64(rp, ap, bp, np, n0, num);
#else
		/* boundary of 32 was experimentally determined on
		   Linux 2.6.22, might have to be adjusted on AIX... */
		if (num >= 32 && (num&3) == 0 && (OPENSSL_ppccap_P&PPC_FPU64)) {
			sigset_t oset;
			int ret;

			sigprocmask(SIG_SETMASK, &all_masked, &oset);
			ret = bn_mul_mont_fpu64(rp, ap, bp, np, n0, num);
			sigprocmask(SIG_SETMASK, &oset, NULL);

			return ret;
		}
#endif
	} else if ((OPENSSL_ppccap_P&PPC_FPU64))
		/* this is a "must" on POWER6, but run-time detection
		 * is not implemented yet... */
		return bn_mul_mont_fpu64(rp, ap, bp, np, n0, num);

d27 2
a28 8
static sigjmp_buf ill_jmp;
static void ill_handler (int sig)
{
	siglongjmp(ill_jmp, sig);
}

void OPENSSL_ppc64_probe(void);
void OPENSSL_altivec_probe(void);
d33 1
a33 3
	char *e;
	struct sigaction	ill_oact, ill_act;
	sigset_t		oset;
d35 2
d42 4
a45 13
	sigfillset(&all_masked);
	sigdelset(&all_masked, SIGILL);
	sigdelset(&all_masked, SIGTRAP);
#ifdef SIGEMT
	sigdelset(&all_masked, SIGEMT);
#endif
	sigdelset(&all_masked, SIGFPE);
	sigdelset(&all_masked, SIGBUS);
	sigdelset(&all_masked, SIGSEGV);

	if ((e = getenv("OPENSSL_ppccap"))) {
		OPENSSL_ppccap_P = strtoul(e, NULL, 0);
		return;
d47 1
a47 10

	OPENSSL_ppccap_P = 0;

#if defined(_AIX)
	if (sizeof(size_t) == 4
# if defined(_SC_AIX_KERNEL_BITMODE)
	    && sysconf(_SC_AIX_KERNEL_BITMODE) != 64
# endif
	)
	return;
a48 27

	memset(&ill_act, 0, sizeof(ill_act));
	ill_act.sa_handler = ill_handler;
	ill_act.sa_mask = all_masked;

	sigprocmask(SIG_SETMASK, &ill_act.sa_mask, &oset);
	sigaction(SIGILL, &ill_act, &ill_oact);

	if (sizeof(size_t) == 4) {
		if (sigsetjmp(ill_jmp, 1) == 0) {
			OPENSSL_ppc64_probe();
			OPENSSL_ppccap_P |= PPC_FPU64;
		}
	} else {
		/*
		 * Wanted code detecting POWER6 CPU and setting PPC_FPU64
		 */
	}

	if (sigsetjmp(ill_jmp, 1) == 0) {
		OPENSSL_altivec_probe();
		OPENSSL_ppccap_P |= PPC_ALTIVEC;
	}

	sigaction (SIGILL, &ill_oact, NULL);
	sigprocmask(SIG_SETMASK, &oset, NULL);
}
@


1.2
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d93 1
a93 1
	&& sysconf(_SC_AIX_KERNEL_BITMODE) != 64
@


1.1
log
@Initial revision
@
text
@d6 1
d18 4
a21 2
int bn_mul_mont(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, const BN_ULONG *np, const BN_ULONG *n0, int num)
	{
d25 1
a25 2
	if (sizeof(size_t)==4)
		{
d27 2
a28 2
		if (num>=8 && (num&3)==0 && (OPENSSL_ppccap_P&PPC_FPU64))
			return bn_mul_mont_fpu64(rp,ap,bp,np,n0,num);
d32 1
a32 2
		if (num>=32 && (num&3)==0 && (OPENSSL_ppccap_P&PPC_FPU64))
			{
d36 3
a38 3
			sigprocmask(SIG_SETMASK,&all_masked,&oset);
			ret=bn_mul_mont_fpu64(rp,ap,bp,np,n0,num);
			sigprocmask(SIG_SETMASK,&oset,NULL);
d41 1
a41 1
			}
d43 1
a43 2
		}
	else if ((OPENSSL_ppccap_P&PPC_FPU64))
d46 1
a46 1
		return bn_mul_mont_fpu64(rp,ap,bp,np,n0,num);
d48 2
a49 2
	return bn_mul_mont_int(rp,ap,bp,np,n0,num);
	}
d53 4
a56 1
static void ill_handler (int sig) { siglongjmp(ill_jmp,sig); }
d59 1
d61 3
a63 2
void OPENSSL_cpuid_setup(void)
	{
d65 1
a65 1
	struct sigaction	ill_oact,ill_act;
d67 5
a71 1
	static int trigger=0;
a72 3
	if (trigger) return;
	trigger=1;
 
d74 2
a75 2
	sigdelset(&all_masked,SIGILL);
	sigdelset(&all_masked,SIGTRAP);
d77 1
a77 1
	sigdelset(&all_masked,SIGEMT);
d79 6
a84 7
	sigdelset(&all_masked,SIGFPE);
	sigdelset(&all_masked,SIGBUS);
	sigdelset(&all_masked,SIGSEGV);

	if ((e=getenv("OPENSSL_ppccap")))
		{
		OPENSSL_ppccap_P=strtoul(e,NULL,0);
d86 1
a86 1
		}
d90 10
a99 1
	memset(&ill_act,0,sizeof(ill_act));
d101 1
a101 1
	ill_act.sa_mask    = all_masked;
d103 2
a104 2
	sigprocmask(SIG_SETMASK,&ill_act.sa_mask,&oset);
	sigaction(SIGILL,&ill_act,&ill_oact);
d106 2
a107 4
	if (sizeof(size_t)==4)
		{
		if (sigsetjmp(ill_jmp,1) == 0)
			{
a109 1
			}
d111 1
a111 2
	else
		{
d115 1
a115 1
		}
d117 1
a117 2
	if (sigsetjmp(ill_jmp,1) == 0)
		{
d120 1
a120 1
		}
d122 3
a124 3
	sigaction (SIGILL,&ill_oact,NULL);
	sigprocmask(SIG_SETMASK,&oset,NULL);
	}
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@


1.1.1.2
log
@Import OpenSSL 1.0.1g
@
text
@a5 1
#include <unistd.h>
a55 1
void OPENSSL_altivec_probe(void);
a83 9

#if defined(_AIX)
	if (sizeof(size_t)==4
# if defined(_SC_AIX_KERNEL_BITMODE)
	    && sysconf(_SC_AIX_KERNEL_BITMODE)!=64
# endif
	   )
		return;
#endif
@

