head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.6
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2015.07.16.02.16.19;	author miod;	state Exp;
branches;
next	1.7;
commitid	Nr9ZDJJE3KPxjR6m;

1.7
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.05.18.11.28.41;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.17.19.56.35;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.41;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.11.03.02.32.12;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Check return value of all used functions in OCSP_REQUEST_print(); covers
Coverity CID 78796; ok beck@@
@
text
@/* $OpenBSD: ocsp_prn.c,v 1.7 2014/06/12 15:49:30 deraadt Exp $ */
/* Written by Tom Titchener <Tom_Titchener@@groove.net> for the OpenSSL
 * project. */

/* History:
   This file was originally part of ocsp.c and was transfered to Richard
   Levitte from CertCo by Kathy Weinhold in mid-spring 2000 to be included
   in OpenSSL or released as a patch kit. */

/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/ocsp.h>
#include <openssl/pem.h>

static int
ocsp_certid_print(BIO *bp, OCSP_CERTID* a, int indent)
{
	BIO_printf(bp, "%*sCertificate ID:\n", indent, "");
	indent += 2;
	BIO_printf(bp, "%*sHash Algorithm: ", indent, "");
	i2a_ASN1_OBJECT(bp, a->hashAlgorithm->algorithm);
	BIO_printf(bp, "\n%*sIssuer Name Hash: ", indent, "");
	i2a_ASN1_STRING(bp, a->issuerNameHash, V_ASN1_OCTET_STRING);
	BIO_printf(bp, "\n%*sIssuer Key Hash: ", indent, "");
	i2a_ASN1_STRING(bp, a->issuerKeyHash, V_ASN1_OCTET_STRING);
	BIO_printf(bp, "\n%*sSerial Number: ", indent, "");
	i2a_ASN1_INTEGER(bp, a->serialNumber);
	BIO_printf(bp, "\n");
	return 1;
}

typedef struct {
	long t;
	const char *m;
} OCSP_TBLSTR;

static const char *
table2string(long s, const OCSP_TBLSTR *ts, int len)
{
	const OCSP_TBLSTR *p;

	for (p = ts; p < ts + len; p++)
		if (p->t == s)
			return p->m;
	return "(UNKNOWN)";
}

const char *
OCSP_response_status_str(long s)
{
	static const OCSP_TBLSTR rstat_tbl[] = {
		{ OCSP_RESPONSE_STATUS_SUCCESSFUL, "successful" },
		{ OCSP_RESPONSE_STATUS_MALFORMEDREQUEST, "malformedrequest" },
		{ OCSP_RESPONSE_STATUS_INTERNALERROR, "internalerror" },
		{ OCSP_RESPONSE_STATUS_TRYLATER, "trylater" },
		{ OCSP_RESPONSE_STATUS_SIGREQUIRED, "sigrequired" },
		{ OCSP_RESPONSE_STATUS_UNAUTHORIZED, "unauthorized" }
	};
	return table2string(s, rstat_tbl, 6);
}

const char *
OCSP_cert_status_str(long s)
{
	static const OCSP_TBLSTR cstat_tbl[] = {
		{ V_OCSP_CERTSTATUS_GOOD, "good" },
		{ V_OCSP_CERTSTATUS_REVOKED, "revoked" },
		{ V_OCSP_CERTSTATUS_UNKNOWN, "unknown" }
	};
	return table2string(s, cstat_tbl, 3);
}

const char *
OCSP_crl_reason_str(long s)
{
	static const OCSP_TBLSTR reason_tbl[] = {
		{ OCSP_REVOKED_STATUS_UNSPECIFIED, "unspecified" },
		{ OCSP_REVOKED_STATUS_KEYCOMPROMISE, "keyCompromise" },
		{ OCSP_REVOKED_STATUS_CACOMPROMISE, "cACompromise" },
		{ OCSP_REVOKED_STATUS_AFFILIATIONCHANGED, "affiliationChanged" },
		{ OCSP_REVOKED_STATUS_SUPERSEDED, "superseded" },
		{ OCSP_REVOKED_STATUS_CESSATIONOFOPERATION, "cessationOfOperation" },
		{ OCSP_REVOKED_STATUS_CERTIFICATEHOLD, "certificateHold" },
		{ OCSP_REVOKED_STATUS_REMOVEFROMCRL, "removeFromCRL" }
	};
	return table2string(s, reason_tbl, 8);
}

int
OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST* o, unsigned long flags)
{
	int i;
	long l;
	OCSP_CERTID* cid = NULL;
	OCSP_ONEREQ *one = NULL;
	OCSP_REQINFO *inf = o->tbsRequest;
	OCSP_SIGNATURE *sig = o->optionalSignature;

	if (BIO_write(bp, "OCSP Request Data:\n", 19) <= 0)
		goto err;
	l = ASN1_INTEGER_get(inf->version);
	if (BIO_printf(bp, "    Version: %lu (0x%lx)", l+1, l) <= 0)
		goto err;
	if (inf->requestorName != NULL) {
		if (BIO_write(bp, "\n    Requestor Name: ", 21) <= 0)
			goto err;
		GENERAL_NAME_print(bp, inf->requestorName);
	}
	if (BIO_write(bp, "\n    Requestor List:\n", 21) <= 0)
		goto err;
	for (i = 0; i < sk_OCSP_ONEREQ_num(inf->requestList); i++) {
		one = sk_OCSP_ONEREQ_value(inf->requestList, i);
		cid = one->reqCert;
		ocsp_certid_print(bp, cid, 8);
		if (!X509V3_extensions_print(bp, "Request Single Extensions",
		    one->singleRequestExtensions, flags, 8))
			goto err;
	}
	if (!X509V3_extensions_print(bp, "Request Extensions",
	    inf->requestExtensions, flags, 4))
		goto err;
	if (sig) {
		if (X509_signature_print(bp, sig->signatureAlgorithm,
		    sig->signature) == 0)
			goto err;
		for (i = 0; i < sk_X509_num(sig->certs); i++) {
			if (X509_print(bp, sk_X509_value(sig->certs, i)) == 0)
				goto err;
			if (PEM_write_bio_X509(bp,
			    sk_X509_value(sig->certs, i)) == 0)
				goto err;
		}
	}
	return 1;

err:
	return 0;
}

int
OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE* o, unsigned long flags)
{
	int i, ret = 0;
	long l;
	OCSP_CERTID *cid = NULL;
	OCSP_BASICRESP *br = NULL;
	OCSP_RESPID *rid = NULL;
	OCSP_RESPDATA  *rd = NULL;
	OCSP_CERTSTATUS *cst = NULL;
	OCSP_REVOKEDINFO *rev = NULL;
	OCSP_SINGLERESP *single = NULL;
	OCSP_RESPBYTES *rb = o->responseBytes;

	if (BIO_puts(bp, "OCSP Response Data:\n") <= 0)
		goto err;
	l = ASN1_ENUMERATED_get(o->responseStatus);
	if (BIO_printf(bp, "    OCSP Response Status: %s (0x%lx)\n",
	    OCSP_response_status_str(l), l) <= 0)
		goto err;
	if (rb == NULL)
		return 1;
	if (BIO_puts(bp, "    Response Type: ") <= 0)
		goto err;
	if (i2a_ASN1_OBJECT(bp, rb->responseType) <= 0)
		goto err;
	if (OBJ_obj2nid(rb->responseType) != NID_id_pkix_OCSP_basic) {
		BIO_puts(bp, " (unknown response type)\n");
		return 1;
	}

	i = ASN1_STRING_length(rb->response);
	if (!(br = OCSP_response_get1_basic(o)))
		goto err;
	rd = br->tbsResponseData;
	l = ASN1_INTEGER_get(rd->version);
	if (BIO_printf(bp, "\n    Version: %lu (0x%lx)\n", l+1, l) <= 0)
		goto err;
	if (BIO_puts(bp, "    Responder Id: ") <= 0)
		goto err;

	rid = rd->responderId;
	switch (rid->type) {
	case V_OCSP_RESPID_NAME:
		X509_NAME_print_ex(bp, rid->value.byName, 0, XN_FLAG_ONELINE);
		break;
	case V_OCSP_RESPID_KEY:
		i2a_ASN1_STRING(bp, rid->value.byKey, V_ASN1_OCTET_STRING);
		break;
	}

	if (BIO_printf(bp, "\n    Produced At: ")<=0)
		goto err;
	if (!ASN1_GENERALIZEDTIME_print(bp, rd->producedAt))
		goto err;
	if (BIO_printf(bp, "\n    Responses:\n") <= 0)
		goto err;
	for (i = 0; i < sk_OCSP_SINGLERESP_num(rd->responses); i++) {
		if (! sk_OCSP_SINGLERESP_value(rd->responses, i))
			continue;
		single = sk_OCSP_SINGLERESP_value(rd->responses, i);
		cid = single->certId;
		if (ocsp_certid_print(bp, cid, 4) <= 0)
			goto err;
		cst = single->certStatus;
		if (BIO_printf(bp, "    Cert Status: %s",
		    OCSP_cert_status_str(cst->type)) <= 0)
			goto err;
		if (cst->type == V_OCSP_CERTSTATUS_REVOKED) {
			rev = cst->value.revoked;
			if (BIO_printf(bp, "\n    Revocation Time: ") <= 0)
				goto err;
			if (!ASN1_GENERALIZEDTIME_print(bp,
			    rev->revocationTime))
				goto err;
			if (rev->revocationReason) {
				l = ASN1_ENUMERATED_get(rev->revocationReason);
				if (BIO_printf(bp,
				    "\n    Revocation Reason: %s (0x%lx)",
				    OCSP_crl_reason_str(l), l) <= 0)
					goto err;
			}
		}
		if (BIO_printf(bp, "\n    This Update: ") <= 0)
			goto err;
		if (!ASN1_GENERALIZEDTIME_print(bp, single->thisUpdate))
			goto err;
		if (single->nextUpdate) {
			if (BIO_printf(bp, "\n    Next Update: ") <= 0)
				goto err;
			if (!ASN1_GENERALIZEDTIME_print(bp, single->nextUpdate))
				goto err;
		}
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
		if (!X509V3_extensions_print(bp, "Response Single Extensions",
		    single->singleExtensions, flags, 8))
			goto err;
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
	}
	if (!X509V3_extensions_print(bp, "Response Extensions",
	    rd->responseExtensions, flags, 4))
		goto err;
	if (X509_signature_print(bp, br->signatureAlgorithm, br->signature) <=
	    0)
		goto err;

	for (i = 0; i < sk_X509_num(br->certs); i++) {
		X509_print(bp, sk_X509_value(br->certs, i));
		PEM_write_bio_X509(bp, sk_X509_value(br->certs, i));
	}

	ret = 1;

err:
	OCSP_BASICRESP_free(br);
	return ret;
}
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d177 3
a179 2
		X509_signature_print(bp, sig->signatureAlgorithm,
		    sig->signature);
d181 5
a185 2
			X509_print(bp, sk_X509_value(sig->certs, i));
			PEM_write_bio_X509(bp, sk_X509_value(sig->certs, i));
@


1.6
log
@More KNF.
@
text
@d1 1
a1 1
/* ocsp_prn.c */
@


1.5
log
@KNF
@
text
@d18 1
a18 1
 *    notice, this list of conditions and the following disclaimer. 
d96 1
a96 1
	for (p=ts; p < ts + len; p++)
d106 6
a111 6
	    { OCSP_RESPONSE_STATUS_SUCCESSFUL, "successful" },
	    { OCSP_RESPONSE_STATUS_MALFORMEDREQUEST, "malformedrequest" },
	    { OCSP_RESPONSE_STATUS_INTERNALERROR, "internalerror" },
	    { OCSP_RESPONSE_STATUS_TRYLATER, "trylater" },
	    { OCSP_RESPONSE_STATUS_SIGREQUIRED, "sigrequired" },
	    { OCSP_RESPONSE_STATUS_UNAUTHORIZED, "unauthorized" }
d114 1
a114 1
} 
d120 3
a122 3
	    { V_OCSP_CERTSTATUS_GOOD, "good" },
	    { V_OCSP_CERTSTATUS_REVOKED, "revoked" },
	    { V_OCSP_CERTSTATUS_UNKNOWN, "unknown" }
d125 1
a125 1
} 
d131 8
a138 8
	    { OCSP_REVOKED_STATUS_UNSPECIFIED, "unspecified" },
	    { OCSP_REVOKED_STATUS_KEYCOMPROMISE, "keyCompromise" },
	    { OCSP_REVOKED_STATUS_CACOMPROMISE, "cACompromise" },
	    { OCSP_REVOKED_STATUS_AFFILIATIONCHANGED, "affiliationChanged" },
	    { OCSP_REVOKED_STATUS_SUPERSEDED, "superseded" },
	    { OCSP_REVOKED_STATUS_CESSATIONOFOPERATION, "cessationOfOperation" },
	    { OCSP_REVOKED_STATUS_CERTIFICATEHOLD, "certificateHold" },
	    { OCSP_REVOKED_STATUS_REMOVEFROMCRL, "removeFromCRL" }
d141 1
a141 1
} 
d153 1
a153 1
	if (BIO_write(bp,"OCSP Request Data:\n",19) <= 0)
d156 1
a156 1
	if (BIO_printf(bp,"    Version: %lu (0x%lx)",l+1,l) <= 0)
d159 1
a159 1
		if (BIO_write(bp,"\n    Requestor Name: ",21) <= 0) 
d163 1
a163 1
	if (BIO_write(bp,"\n    Requestor List:\n",21) <= 0)
d179 3
a181 3
		for (i=0; i<sk_X509_num(sig->certs); i++) {
			X509_print(bp, sk_X509_value(sig->certs,i));
			PEM_write_bio_X509(bp,sk_X509_value(sig->certs,i));
d185 1
d204 1
a204 1
	if (BIO_puts(bp,"OCSP Response Data:\n") <= 0)
d207 1
a207 1
	if (BIO_printf(bp,"    OCSP Response Status: %s (0x%lx)\n",
d212 1
a212 1
	if (BIO_puts(bp,"    Response Type: ") <= 0)
d214 1
a214 1
	if(i2a_ASN1_OBJECT(bp, rb->responseType) <= 0)
d217 1
a217 1
		BIO_puts(bp," (unknown response type)\n");
d226 1
a226 1
	if (BIO_printf(bp,"\n    Version: %lu (0x%lx)\n", l+1,l) <= 0)
d228 1
a228 1
	if (BIO_puts(bp,"    Responder Id: ") <= 0)
d231 1
a231 1
	rid =  rd->responderId;
d241 1
a241 1
	if (BIO_printf(bp,"\n    Produced At: ")<=0)
d245 1
a245 1
	if (BIO_printf(bp,"\n    Responses:\n") <= 0)
d255 1
a255 1
		if (BIO_printf(bp,"    Cert Status: %s",
d260 1
a260 1
			if (BIO_printf(bp, "\n    Revocation Time: ") <= 0) 
d263 1
a263 1
			    rev->revocationTime)) 
d273 1
a273 1
		if (BIO_printf(bp,"\n    This Update: ") <= 0)
d275 1
a275 1
		if (!ASN1_GENERALIZEDTIME_print(bp, single->thisUpdate)) 
d278 1
a278 1
			if (BIO_printf(bp,"\n    Next Update: ") <= 0)
d280 1
a280 1
			if (!ASN1_GENERALIZEDTIME_print(bp,single->nextUpdate))
d283 1
a283 1
		if (BIO_write(bp,"\n",1) <= 0)
d288 1
a288 1
		if (BIO_write(bp,"\n",1) <= 0)
d300 1
a300 1
		PEM_write_bio_X509(bp,sk_X509_value(br->certs, i));
d304 1
@


1.4
log
@openssl-1.0.0e: resolve conflicts
@
text
@d69 3
a71 2
static int ocsp_certid_print(BIO *bp, OCSP_CERTID* a, int indent)
        {
d84 1
a84 1
	}
d86 1
a86 2
typedef struct
	{
d89 1
a89 1
	} OCSP_TBLSTR;
d91 2
a92 1
static const char *table2string(long s, const OCSP_TBLSTR *ts, int len)
d95 1
d97 2
a98 2
	        if (p->t == s)
		         return p->m;
d102 3
a104 2
const char *OCSP_response_status_str(long s)
        {
d106 7
a112 6
	        { OCSP_RESPONSE_STATUS_SUCCESSFUL, "successful" },
	        { OCSP_RESPONSE_STATUS_MALFORMEDREQUEST, "malformedrequest" },
	        { OCSP_RESPONSE_STATUS_INTERNALERROR, "internalerror" },
	        { OCSP_RESPONSE_STATUS_TRYLATER, "trylater" },
	        { OCSP_RESPONSE_STATUS_SIGREQUIRED, "sigrequired" },
	        { OCSP_RESPONSE_STATUS_UNAUTHORIZED, "unauthorized" } };
d114 1
a114 1
	} 
d116 3
a118 2
const char *OCSP_cert_status_str(long s)
        {
d120 4
a123 3
	        { V_OCSP_CERTSTATUS_GOOD, "good" },
	        { V_OCSP_CERTSTATUS_REVOKED, "revoked" },
	        { V_OCSP_CERTSTATUS_UNKNOWN, "unknown" } };
d125 1
a125 1
	} 
d127 3
a129 2
const char *OCSP_crl_reason_str(long s)
        {
d131 9
a139 8
	  { OCSP_REVOKED_STATUS_UNSPECIFIED, "unspecified" },
          { OCSP_REVOKED_STATUS_KEYCOMPROMISE, "keyCompromise" },
          { OCSP_REVOKED_STATUS_CACOMPROMISE, "cACompromise" },
          { OCSP_REVOKED_STATUS_AFFILIATIONCHANGED, "affiliationChanged" },
          { OCSP_REVOKED_STATUS_SUPERSEDED, "superseded" },
          { OCSP_REVOKED_STATUS_CESSATIONOFOPERATION, "cessationOfOperation" },
          { OCSP_REVOKED_STATUS_CERTIFICATEHOLD, "certificateHold" },
          { OCSP_REVOKED_STATUS_REMOVEFROMCRL, "removeFromCRL" } };
d141 1
a141 1
	} 
d143 3
a145 2
int OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST* o, unsigned long flags)
        {
d153 6
a158 5
	if (BIO_write(bp,"OCSP Request Data:\n",19) <= 0) goto err;
	l=ASN1_INTEGER_get(inf->version);
	if (BIO_printf(bp,"    Version: %lu (0x%lx)",l+1,l) <= 0) goto err;
	if (inf->requestorName != NULL)
	        {
d160 1
a160 1
		        goto err;
d162 4
a165 4
		}
	if (BIO_write(bp,"\n    Requestor List:\n",21) <= 0) goto err;
	for (i = 0; i < sk_OCSP_ONEREQ_num(inf->requestList); i++)
	        {
d169 4
a172 5
		if (!X509V3_extensions_print(bp,
					"Request Single Extensions",
					one->singleRequestExtensions, flags, 8))
							goto err;
		}
d174 6
a179 7
			inf->requestExtensions, flags, 4))
							goto err;
	if (sig)
	        {
		X509_signature_print(bp, sig->signatureAlgorithm, sig->signature);
		for (i=0; i<sk_X509_num(sig->certs); i++)
			{
a181 1
			}
d183 1
d187 1
a187 1
	}
d189 3
a191 2
int OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE* o, unsigned long flags)
        {
d203 3
a205 2
	if (BIO_puts(bp,"OCSP Response Data:\n") <= 0) goto err;
	l=ASN1_ENUMERATED_get(o->responseStatus);
d207 6
a212 4
		       OCSP_response_status_str(l), l) <= 0) goto err;
	if (rb == NULL) return 1;
        if (BIO_puts(bp,"    Response Type: ") <= 0)
	        goto err;
d214 2
a215 3
	        goto err;
	if (OBJ_obj2nid(rb->responseType) != NID_id_pkix_OCSP_basic) 
	        {
d218 1
a218 1
		}
d221 2
a222 1
	if (!(br = OCSP_response_get1_basic(o))) goto err;
d224 5
a228 4
	l=ASN1_INTEGER_get(rd->version);
	if (BIO_printf(bp,"\n    Version: %lu (0x%lx)\n",
		       l+1,l) <= 0) goto err;
	if (BIO_puts(bp,"    Responder Id: ") <= 0) goto err;
d231 8
a238 9
	switch (rid->type)
		{
		case V_OCSP_RESPID_NAME:
		        X509_NAME_print_ex(bp, rid->value.byName, 0, XN_FLAG_ONELINE);
		        break;
		case V_OCSP_RESPID_KEY:
		        i2a_ASN1_STRING(bp, rid->value.byKey, V_ASN1_OCTET_STRING);
		        break;
		}
d240 9
a248 6
	if (BIO_printf(bp,"\n    Produced At: ")<=0) goto err;
	if (!ASN1_GENERALIZEDTIME_print(bp, rd->producedAt)) goto err;
	if (BIO_printf(bp,"\n    Responses:\n") <= 0) goto err;
	for (i = 0; i < sk_OCSP_SINGLERESP_num(rd->responses); i++)
	        {
		if (! sk_OCSP_SINGLERESP_value(rd->responses, i)) continue;
d251 2
a252 1
		if(ocsp_certid_print(bp, cid, 4) <= 0) goto err;
d255 4
a258 5
			       OCSP_cert_status_str(cst->type)) <= 0)
		        goto err;
		if (cst->type == V_OCSP_CERTSTATUS_REVOKED)
		        {
		        rev = cst->value.revoked;
a259 3
			        goto err;
			if (!ASN1_GENERALIZEDTIME_print(bp, 
							rev->revocationTime)) 
d261 9
a269 8
			if (rev->revocationReason) 
			        {
				l=ASN1_ENUMERATED_get(rev->revocationReason);
				if (BIO_printf(bp, 
					 "\n    Revocation Reason: %s (0x%lx)",
					       OCSP_crl_reason_str(l), l) <= 0)
				        goto err;
				}
d271 3
a273 1
		if (BIO_printf(bp,"\n    This Update: ") <= 0) goto err;
d276 3
a278 3
		if (single->nextUpdate)
		        {
			if (BIO_printf(bp,"\n    Next Update: ") <= 0)goto err;
a280 7
			}
		if (BIO_write(bp,"\n",1) <= 0) goto err;
		if (!X509V3_extensions_print(bp,
					"Response Single Extensions",
					single->singleExtensions, flags, 8))
							goto err;
		if (BIO_write(bp,"\n",1) <= 0) goto err;
d282 8
d291 10
a300 10
					rd->responseExtensions, flags, 4))
							goto err;
	if(X509_signature_print(bp, br->signatureAlgorithm, br->signature) <= 0)
							goto err;

	for (i=0; i<sk_X509_num(br->certs); i++)
		{
		X509_print(bp, sk_X509_value(br->certs,i));
		PEM_write_bio_X509(bp,sk_X509_value(br->certs,i));
		}
d306 1
a306 1
	}
@


1.3
log
@resolve conflicts, fix local changes
@
text
@a184 1
	unsigned char *p;
a208 1
	p = ASN1_STRING_data(rb->response);
@


1.2
log
@resolve conflicts
@
text
@d88 1
a88 1
	char *m;
d91 1
a91 1
static char *table2string(long s, OCSP_TBLSTR *ts, int len)
d93 1
a93 1
	OCSP_TBLSTR *p;
d100 1
a100 1
char *OCSP_response_status_str(long s)
d102 1
a102 1
	static OCSP_TBLSTR rstat_tbl[] = {
d112 1
a112 1
char *OCSP_cert_status_str(long s)
d114 1
a114 1
	static OCSP_TBLSTR cstat_tbl[] = {
d121 1
a121 1
char *OCSP_crl_reason_str(long s)
d123 1
a123 1
	OCSP_TBLSTR reason_tbl[] = {
d269 1
a269 1
		if (!BIO_write(bp,"\n",1)) goto err;
d274 1
a274 1
		if (!BIO_write(bp,"\n",1)) goto err;
d278 1
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d197 1
a197 1
	if (BIO_printf(bp,"    OCSP Response Status: %s (0x%x)\n",
d255 1
a255 1
					 "\n    Revocation Reason: %s (0x%x)",
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d197 1
a197 1
	if (BIO_printf(bp,"    OCSP Response Status: %s (0x%lx)\n",
d255 1
a255 1
					 "\n    Revocation Reason: %s (0x%lx)",
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d88 1
a88 1
	const char *m;
d91 1
a91 1
static const char *table2string(long s, const OCSP_TBLSTR *ts, int len)
d93 1
a93 1
	const OCSP_TBLSTR *p;
d100 1
a100 1
const char *OCSP_response_status_str(long s)
d102 1
a102 1
	static const OCSP_TBLSTR rstat_tbl[] = {
d112 1
a112 1
const char *OCSP_cert_status_str(long s)
d114 1
a114 1
	static const OCSP_TBLSTR cstat_tbl[] = {
d121 1
a121 1
const char *OCSP_crl_reason_str(long s)
d123 1
a123 1
	static const OCSP_TBLSTR reason_tbl[] = {
d269 1
a269 1
		if (BIO_write(bp,"\n",1) <= 0) goto err;
d274 1
a274 1
		if (BIO_write(bp,"\n",1) <= 0) goto err;
a277 1
							goto err;
@


1.1.1.4
log
@import OpenSSL 1.0.0e
@
text
@d185 1
d210 1
@


