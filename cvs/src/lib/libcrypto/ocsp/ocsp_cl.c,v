head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.6
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.13;
commitid	kT0fLt3r4lroFJra;

1.13
date	2016.12.30.15.31.58;	author jsing;	state Exp;
branches;
next	1.12;
commitid	tES8uLpbBNuhM7ko;

1.12
date	2016.11.04.18.07.23;	author beck;	state Exp;
branches;
next	1.11;
commitid	pAy02smoQCuRvYaT;

1.11
date	2016.07.16.16.14.28;	author beck;	state Exp;
branches;
next	1.10;
commitid	CHKHMl71NDivzioJ;

1.10
date	2016.07.05.03.24.38;	author beck;	state Exp;
branches;
next	1.9;
commitid	kspdYKfdVA3S6vWu;

1.9
date	2016.06.25.15.38.44;	author beck;	state Exp;
branches;
next	1.8;
commitid	FGIV7z0K9qPGAans;

1.8
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches
	1.8.2.1
	1.8.6.1;
next	1.7;
commitid	8tb4v3IC8S2vzfHj;

1.7
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.6;
commitid	yQEL1wOWIearrW15;

1.6
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.05.18.11.28.41;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.17.19.56.35;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.40;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	;

1.8.2.1
date	2016.06.25.16.43.01;	author beck;	state Exp;
branches;
next	;
commitid	Lo5ggQ1ADXsNFpCu;

1.8.6.1
date	2016.06.25.16.42.40;	author beck;	state Exp;
branches;
next	1.8.6.2;
commitid	KrxOU9jc5YCrSNNi;

1.8.6.2
date	2016.06.27.15.42.31;	author beck;	state Exp;
branches;
next	;
commitid	ZOTz2y8mvmupLo3a;


desc
@@


1.14
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ocsp_cl.c,v 1.13 2016/12/30 15:31:58 jsing Exp $ */
/* Written by Tom Titchener <Tom_Titchener@@groove.net> for the OpenSSL
 * project. */

/* History:
   This file was transfered to Richard Levitte from CertCo by Kathy
   Weinhold in mid-spring 2000 to be included in OpenSSL or released
   as a patch kit. */

/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <time.h>

#include <openssl/err.h>
#include <openssl/ocsp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

/* Utility functions related to sending OCSP requests and extracting
 * relevant information from the response.
 */

/* Add an OCSP_CERTID to an OCSP request. Return new OCSP_ONEREQ
 * pointer: useful if we want to add extensions.
 */
OCSP_ONEREQ *
OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid)
{
	OCSP_ONEREQ *one = NULL;

	if (!(one = OCSP_ONEREQ_new()))
		goto err;
	if (one->reqCert)
		OCSP_CERTID_free(one->reqCert);
	one->reqCert = cid;
	if (req && !sk_OCSP_ONEREQ_push(req->tbsRequest->requestList, one))
		goto err;
	return one;

err:
	OCSP_ONEREQ_free(one);
	return NULL;
}

/* Set requestorName from an X509_NAME structure */
int
OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm)
{
	GENERAL_NAME *gen;

	gen = GENERAL_NAME_new();
	if (gen == NULL)
		return 0;
	if (!X509_NAME_set(&gen->d.directoryName, nm)) {
		GENERAL_NAME_free(gen);
		return 0;
	}
	gen->type = GEN_DIRNAME;
	if (req->tbsRequest->requestorName)
		GENERAL_NAME_free(req->tbsRequest->requestorName);
	req->tbsRequest->requestorName = gen;
	return 1;
}

/* Add a certificate to an OCSP request */
int
OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert)
{
	OCSP_SIGNATURE *sig;

	if (!req->optionalSignature)
		req->optionalSignature = OCSP_SIGNATURE_new();
	sig = req->optionalSignature;
	if (!sig)
		return 0;
	if (!cert)
		return 1;
	if (!sig->certs && !(sig->certs = sk_X509_new_null()))
		return 0;

	if (!sk_X509_push(sig->certs, cert))
		return 0;
	CRYPTO_add(&cert->references, 1, CRYPTO_LOCK_X509);
	return 1;
}

/* Sign an OCSP request set the requestorName to the subjec
 * name of an optional signers certificate and include one
 * or more optional certificates in the request. Behaves
 * like PKCS7_sign().
 */
int
OCSP_request_sign(OCSP_REQUEST *req, X509 *signer, EVP_PKEY *key,
    const EVP_MD *dgst, STACK_OF(X509) *certs, unsigned long flags)
{
	int i;
	OCSP_SIGNATURE *sig;
	X509 *x;

	if (!OCSP_request_set1_name(req, X509_get_subject_name(signer)))
		goto err;

	if (!(req->optionalSignature = sig = OCSP_SIGNATURE_new()))
		goto err;
	if (key) {
		if (!X509_check_private_key(signer, key)) {
			OCSPerror(OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
			goto err;
		}
		if (!OCSP_REQUEST_sign(req, key, dgst))
			goto err;
	}

	if (!(flags & OCSP_NOCERTS)) {
		if (!OCSP_request_add1_cert(req, signer))
			goto err;
		for (i = 0; i < sk_X509_num(certs); i++) {
			x = sk_X509_value(certs, i);
			if (!OCSP_request_add1_cert(req, x))
				goto err;
		}
	}

	return 1;

err:
	OCSP_SIGNATURE_free(req->optionalSignature);
	req->optionalSignature = NULL;
	return 0;
}

/* Get response status */
int
OCSP_response_status(OCSP_RESPONSE *resp)
{
	return ASN1_ENUMERATED_get(resp->responseStatus);
}

/* Extract basic response from OCSP_RESPONSE or NULL if
 * no basic response present.
 */
OCSP_BASICRESP *
OCSP_response_get1_basic(OCSP_RESPONSE *resp)
{
	OCSP_RESPBYTES *rb;

	rb = resp->responseBytes;
	if (!rb) {
		OCSPerror(OCSP_R_NO_RESPONSE_DATA);
		return NULL;
	}
	if (OBJ_obj2nid(rb->responseType) != NID_id_pkix_OCSP_basic) {
		OCSPerror(OCSP_R_NOT_BASIC_RESPONSE);
		return NULL;
	}

	return ASN1_item_unpack(rb->response, &OCSP_BASICRESP_it);
}

/* Return number of OCSP_SINGLERESP reponses present in
 * a basic response.
 */
int
OCSP_resp_count(OCSP_BASICRESP *bs)
{
	if (!bs)
		return -1;
	return sk_OCSP_SINGLERESP_num(bs->tbsResponseData->responses);
}

/* Extract an OCSP_SINGLERESP response with a given index */
OCSP_SINGLERESP *
OCSP_resp_get0(OCSP_BASICRESP *bs, int idx)
{
	if (!bs)
		return NULL;
	return sk_OCSP_SINGLERESP_value(bs->tbsResponseData->responses, idx);
}

/* Look single response matching a given certificate ID */
int
OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last)
{
	int i;
	STACK_OF(OCSP_SINGLERESP) *sresp;
	OCSP_SINGLERESP *single;

	if (!bs)
		return -1;
	if (last < 0)
		last = 0;
	else
		last++;
	sresp = bs->tbsResponseData->responses;
	for (i = last; i < sk_OCSP_SINGLERESP_num(sresp); i++) {
		single = sk_OCSP_SINGLERESP_value(sresp, i);
		if (!OCSP_id_cmp(id, single->certId))
			return i;
	}
	return -1;
}

/* Extract status information from an OCSP_SINGLERESP structure.
 * Note: the revtime and reason values are only set if the
 * certificate status is revoked. Returns numerical value of
 * status.
 */
int
OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,
    ASN1_GENERALIZEDTIME **revtime, ASN1_GENERALIZEDTIME **thisupd,
    ASN1_GENERALIZEDTIME **nextupd)
{
	int ret;
	OCSP_CERTSTATUS *cst;

	if (!single)
		return -1;
	cst = single->certStatus;
	ret = cst->type;
	if (ret == V_OCSP_CERTSTATUS_REVOKED) {
		OCSP_REVOKEDINFO *rev = cst->value.revoked;

		if (revtime)
			*revtime = rev->revocationTime;
		if (reason) {
			if (rev->revocationReason)
				*reason = ASN1_ENUMERATED_get(
				    rev->revocationReason);
			else
				*reason = -1;
		}
	}
	if (thisupd)
		*thisupd = single->thisUpdate;
	if (nextupd)
		*nextupd = single->nextUpdate;
	return ret;
}

/* This function combines the previous ones: look up a certificate ID and
 * if found extract status information. Return 0 is successful.
 */
int
OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,
    int *reason, ASN1_GENERALIZEDTIME **revtime, ASN1_GENERALIZEDTIME **thisupd,
    ASN1_GENERALIZEDTIME **nextupd)
{
	int i;
	OCSP_SINGLERESP *single;

	i = OCSP_resp_find(bs, id, -1);
	/* Maybe check for multiple responses and give an error? */
	if (i < 0)
		return 0;
	single = OCSP_resp_get0(bs, i);
	i = OCSP_single_get0_status(single, reason, revtime, thisupd, nextupd);
	if (status)
		*status = i;
	return 1;
}

/* Check validity of thisUpdate and nextUpdate fields. It is possible that the request will
 * take a few seconds to process and/or the time wont be totally accurate. Therefore to avoid
 * rejecting otherwise valid time we allow the times to be within 'nsec' of the current time.
 * Also to avoid accepting very old responses without a nextUpdate field an optional maxage
 * parameter specifies the maximum age the thisUpdate field can be.
 */
int
OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,
    ASN1_GENERALIZEDTIME *nextupd, long nsec, long maxsec)
{
	time_t t_now, t_tmp;
	struct tm tm_this, tm_next, tm_tmp;

	time(&t_now);

	/*
	 * Times must explicitly be a GENERALIZEDTIME as per section
	 * 4.2.2.1 of RFC 6960 - It is invalid to accept other times
	 * (such as UTCTIME permitted/required by RFC 5280 for certificates)
	 */

	/* Check thisUpdate is valid and not more than nsec in the future */
	if (ASN1_time_parse(thisupd->data, thisupd->length, &tm_this,
	    V_ASN1_GENERALIZEDTIME) != V_ASN1_GENERALIZEDTIME) {
		OCSPerror(OCSP_R_ERROR_IN_THISUPDATE_FIELD);
		return 0;
	} else {
		t_tmp = t_now + nsec;
		if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
			return 0;
		if (ASN1_time_tm_cmp(&tm_this, &tm_tmp) > 0) {
			OCSPerror(OCSP_R_STATUS_NOT_YET_VALID);
			return 0;
		}

		/*
		 * If maxsec specified check thisUpdate is not more than maxsec
		 * in the past
		 */
		if (maxsec >= 0) {
			t_tmp = t_now - maxsec;
			if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
				return 0;
			if (ASN1_time_tm_cmp(&tm_this, &tm_tmp) < 0) {
				OCSPerror(OCSP_R_STATUS_TOO_OLD);
				return 0;
			}
		}
	}

	if (!nextupd)
		return 1;

	/* Check nextUpdate is valid and not more than nsec in the past */
	if (ASN1_time_parse(nextupd->data, nextupd->length, &tm_next,
	    V_ASN1_GENERALIZEDTIME) != V_ASN1_GENERALIZEDTIME) {
		OCSPerror(OCSP_R_ERROR_IN_NEXTUPDATE_FIELD);
		return 0;
	} else {
		t_tmp = t_now - nsec;
		if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
			return 0;
		if (ASN1_time_tm_cmp(&tm_next, &tm_tmp) < 0) {
			OCSPerror(OCSP_R_STATUS_EXPIRED);
			return 0;
		}
	}

	/* Also don't allow nextUpdate to precede thisUpdate */
	if (ASN1_time_tm_cmp(&tm_next, &tm_this) < 0) {
		OCSPerror(OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE);
		return 0;
	}

	return 1;
}
@


1.13
log
@Expand ASN1_ITEM_rptr macros - no change in generated assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.12 2016/11/04 18:07:23 beck Exp $ */
d162 1
a162 2
			OCSPerr(OCSP_F_OCSP_REQUEST_SIGN,
			    OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
d204 1
a204 2
		OCSPerr(OCSP_F_OCSP_RESPONSE_GET1_BASIC,
		    OCSP_R_NO_RESPONSE_DATA);
d208 1
a208 2
		OCSPerr(OCSP_F_OCSP_RESPONSE_GET1_BASIC,
		    OCSP_R_NOT_BASIC_RESPONSE);
d341 1
a341 2
		OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY,
		    OCSP_R_ERROR_IN_THISUPDATE_FIELD);
d348 1
a348 2
			OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY,
			    OCSP_R_STATUS_NOT_YET_VALID);
d361 1
a361 2
				OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY,
				    OCSP_R_STATUS_TOO_OLD);
d373 1
a373 2
		OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY,
		    OCSP_R_ERROR_IN_NEXTUPDATE_FIELD);
d380 1
a380 2
			OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY,
			    OCSP_R_STATUS_EXPIRED);
d387 1
a387 2
		OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY,
		    OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE);
@


1.12
log
@make public ASN1_time_parse and ASN1_time_tm_cmp to replace former hidden
functions.. document with a man page.
bump majors on libtls, libssl, libcrypto
ok jsing@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.11 2016/07/16 16:14:28 beck Exp $ */
d215 1
a215 1
	return ASN1_item_unpack(rb->response, ASN1_ITEM_rptr(OCSP_BASICRESP));
@


1.11
log
@Clean up OCSP_check_validity() a bit more.
- Return on first failure rather than continuing.
- Don't compare times by comparing strings that possibly were not parsable as a time.
ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.10 2016/07/05 03:24:38 beck Exp $ */
a73 3
int asn1_time_parse(const char *, size_t, struct tm *, int);
int asn1_tm_cmp(struct tm *, struct tm *);

d342 1
a342 1
	if (asn1_time_parse(thisupd->data, thisupd->length, &tm_this,
d351 1
a351 1
		if (asn1_tm_cmp(&tm_this, &tm_tmp) > 0) {
d365 1
a365 1
			if (asn1_tm_cmp(&tm_this, &tm_tmp) < 0) {
d377 1
a377 1
	if (asn1_time_parse(nextupd->data, nextupd->length, &tm_next,
d386 1
a386 1
		if (asn1_tm_cmp(&tm_next, &tm_tmp) < 0) {
d394 1
a394 1
	if (asn1_tm_cmp(&tm_next, &tm_this) < 0) {
@


1.10
log
@remove unneeded duplicate call - spotted by jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.9 2016/06/25 15:38:44 beck Exp $ */
a332 1
	int ret = 1;
d349 1
a349 1
		ret = 0;
d357 1
a357 1
			ret = 0;
d371 1
a371 1
				ret = 0;
d377 1
a377 1
		return ret;
d384 1
a384 1
		ret = 0;
d392 1
a392 1
			ret = 0;
d397 1
a397 1
	if (ASN1_STRING_cmp(nextupd, thisupd) < 0) {
d400 1
a400 1
		ret = 0;
d403 1
a403 1
	return ret;
@


1.9
log
@Fix the ocsp code to actually check for errors when comparing time values
which was not being done due to a lack of checking of the return code for
X509_cmp_time.  Ensure that we only compare GERNERALIZEDTIME values because
this is what is specified by RFC6960.

Issue reported, and fix provided by Kazuki Yamaguchi <k@@rhe.jp>
ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.8 2014/10/18 17:20:40 jsing Exp $ */
a366 2
			if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
				return 0;
@


1.8
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.7 2014/07/11 08:44:49 jsing Exp $ */
d74 3
d335 1
d338 7
d346 2
a347 1
	if (!ASN1_GENERALIZEDTIME_check(thisupd)) {
d353 3
a355 1
		if (X509_cmp_time(thisupd, &t_tmp) > 0) {
d361 4
a364 1
		/* If maxsec specified check thisUpdate is not more than maxsec in the past */
d367 5
a371 1
			if (X509_cmp_time(thisupd, &t_tmp) < 0) {
d383 2
a384 1
	if (!ASN1_GENERALIZEDTIME_check(nextupd)) {
d390 3
a392 1
		if (X509_cmp_time(nextupd, &t_tmp) < 0) {
@


1.8.2.1
log
@Fix several issues in the OCSP code that could result in the incorrect
generation and parsing of OCSP requests. This remediates a lack of error
checking on time parsing in these functions, and ensures that only
GENERALIZEDTIME formats are accepted for OCSP, as per RFC 6960

Issues reported, and fixes provided by  Kazuki Yamaguchi <k@@rhe.jp>
and Kinichiro Inoguchi <kinichiro.inoguchi@@gmail.com>
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.8 2014/10/18 17:20:40 jsing Exp $ */
a73 3
int asn1_time_parse(const char *, size_t, struct tm *, int);
int asn1_tm_cmp(struct tm *, struct tm *);

a331 1
	struct tm tm_this, tm_next, tm_tmp;
a333 7

	/*
	 * Times must explicitly be a GENERALIZEDTIME as per section
	 * 4.2.2.1 of RFC 6960 - It is invalid to accept other times
	 * (such as UTCTIME permitted/required by RFC 5280 for certificates)
	 */

d335 1
a335 2
	if (asn1_time_parse(thisupd->data, thisupd->length, &tm_this,
	    V_ASN1_GENERALIZEDTIME) != V_ASN1_GENERALIZEDTIME) {
d341 1
a341 3
		if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
			return 0;
		if (asn1_tm_cmp(&tm_this, &tm_tmp) > 0) {
d347 1
a347 4
		/*
		 * If maxsec specified check thisUpdate is not more than maxsec
		 * in the past
		 */
d350 1
a350 5
			if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
				return 0;
			if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
				return 0;
			if (asn1_tm_cmp(&tm_this, &tm_tmp) < 0) {
d362 1
a362 2
	if (asn1_time_parse(nextupd->data, nextupd->length, &tm_next,
	    V_ASN1_GENERALIZEDTIME) != V_ASN1_GENERALIZEDTIME) {
d368 1
a368 3
		if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
			return 0;
		if (asn1_tm_cmp(&tm_next, &tm_tmp) < 0) {
@


1.8.6.1
log
@Fix several issues in the OCSP code that could result in the incorrect
generation and parsing of OCSP requests. This remediates a lack of error
checking on time parsing in these functions, and ensures that only
GENERALIZEDTIME formats are accepted for OCSP, as per RFC 6960

Issues reported, and fixes provided by  Kazuki Yamaguchi <k@@rhe.jp>
and Kinichiro Inoguchi <kinichiro.inoguchi@@gmail.com>
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.8 2014/10/18 17:20:40 jsing Exp $ */
a73 3
int asn1_time_parse(const char *, size_t, struct tm *, int);
int asn1_tm_cmp(struct tm *, struct tm *);

a331 1
	struct tm tm_this, tm_next, tm_tmp;
a333 7

	/*
	 * Times must explicitly be a GENERALIZEDTIME as per section
	 * 4.2.2.1 of RFC 6960 - It is invalid to accept other times
	 * (such as UTCTIME permitted/required by RFC 5280 for certificates)
	 */

d335 1
a335 2
	if (asn1_time_parse(thisupd->data, thisupd->length, &tm_this,
	    V_ASN1_GENERALIZEDTIME) != V_ASN1_GENERALIZEDTIME) {
d341 1
a341 3
		if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
			return 0;
		if (asn1_tm_cmp(&tm_this, &tm_tmp) > 0) {
d347 1
a347 4
		/*
		 * If maxsec specified check thisUpdate is not more than maxsec
		 * in the past
		 */
d350 1
a350 5
			if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
				return 0;
			if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
				return 0;
			if (asn1_tm_cmp(&tm_this, &tm_tmp) < 0) {
d362 1
a362 2
	if (asn1_time_parse(nextupd->data, nextupd->length, &tm_next,
	    V_ASN1_GENERALIZEDTIME) != V_ASN1_GENERALIZEDTIME) {
d368 1
a368 3
		if (gmtime_r(&t_tmp, &tm_tmp) == NULL)
			return 0;
		if (asn1_tm_cmp(&tm_next, &tm_tmp) < 0) {
@


1.8.6.2
log
@Incorrect/unneeded fix for 5.8
noticed by jsing@@
@
text
@d74 3
d335 1
d338 7
d346 2
a347 1
	if (!ASN1_GENERALIZEDTIME_check(thisupd)) {
d353 3
a355 1
		if (X509_cmp_time(thisupd, &t_tmp) > 0) {
d361 4
a364 1
		/* If maxsec specified check thisUpdate is not more than maxsec in the past */
d367 5
a371 1
			if (X509_cmp_time(thisupd, &t_tmp) < 0) {
d383 2
a384 1
	if (!ASN1_GENERALIZEDTIME_check(nextupd)) {
d390 3
a392 1
		if (X509_cmp_time(nextupd, &t_tmp) < 0) {
@


1.7
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_cl.c,v 1.6 2014/06/12 15:49:30 deraadt Exp $ */
a70 1
#include <openssl/rand.h>
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d66 3
a68 1
#include <cryptlib.h>
d70 1
a72 1
#include <openssl/pem.h>
a73 1
#include <openssl/ocsp.h>
@


1.5
log
@More KNF.
@
text
@d1 1
a1 1
/* ocsp_cl.c */
@


1.4
log
@KNF
@
text
@d18 1
a18 1
 *    notice, this list of conditions and the following disclaimer. 
d78 1
a78 1
/* Add an OCSP_CERTID to an OCSP request. Return new OCSP_ONEREQ 
d94 1
d119 1
a119 1
	
d136 1
a136 1
	if(!sk_X509_push(sig->certs, cert))
d171 1
a171 1
		if(!OCSP_request_add1_cert(req, signer))
d181 1
d262 1
a262 1
 * Note: the revtime and reason values are only set if the 
d285 2
a286 1
				*reason = ASN1_ENUMERATED_get(rev->revocationReason);
@


1.3
log
@resolve conflicts, fix local changes
@
text
@d81 3
a83 3

OCSP_ONEREQ *OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid)
        {
d86 4
a89 2
	if (!(one = OCSP_ONEREQ_new())) goto err;
	if (one->reqCert) OCSP_CERTID_free(one->reqCert);
d91 2
a92 3
	if (req &&
		!sk_OCSP_ONEREQ_push(req->tbsRequest->requestList, one))
				goto err;
d97 1
a97 1
        }
d100 4
a104 3
int OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm)
	{
	GENERAL_NAME *gen;
d108 1
a108 2
	if (!X509_NAME_set(&gen->d.directoryName, nm))
		{
d111 1
a111 1
		}
d117 1
a117 1
	}
a118 1

d120 4
a124 3
int OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert)
	{
	OCSP_SIGNATURE *sig;
d128 4
a131 2
	if (!sig) return 0;
	if (!cert) return 1;
d135 2
a136 1
	if(!sk_X509_push(sig->certs, cert)) return 0;
d139 1
a139 1
	}
d146 4
a149 8

int OCSP_request_sign(OCSP_REQUEST   *req,
		      X509           *signer,
		      EVP_PKEY       *key,
		      const EVP_MD   *dgst,
		      STACK_OF(X509) *certs,
		      unsigned long flags)
        {
d155 1
a155 1
			goto err;
d157 6
a162 6
	if (!(req->optionalSignature = sig = OCSP_SIGNATURE_new())) goto err;
	if (key)
		{
		if (!X509_check_private_key(signer, key))
			{
			OCSPerr(OCSP_F_OCSP_REQUEST_SIGN, OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
a163 2
			}
		if (!OCSP_REQUEST_sign(req, key, dgst)) goto err;
d165 3
d169 4
a172 5
	if (!(flags & OCSP_NOCERTS))
		{
		if(!OCSP_request_add1_cert(req, signer)) goto err;
		for (i = 0; i < sk_X509_num(certs); i++)
			{
d174 2
a175 2
			if (!OCSP_request_add1_cert(req, x)) goto err;
			}
d177 1
d184 1
a184 1
	}
d187 3
a189 3

int OCSP_response_status(OCSP_RESPONSE *resp)
	{
d191 1
a191 1
	}
d196 4
a199 1
 
a200 3
OCSP_BASICRESP *OCSP_response_get1_basic(OCSP_RESPONSE *resp)
	{
	OCSP_RESPBYTES *rb;
d202 3
a204 3
	if (!rb)
		{
		OCSPerr(OCSP_F_OCSP_RESPONSE_GET1_BASIC, OCSP_R_NO_RESPONSE_DATA);
d206 4
a209 4
		}
	if (OBJ_obj2nid(rb->responseType) != NID_id_pkix_OCSP_basic)
		{
		OCSPerr(OCSP_F_OCSP_RESPONSE_GET1_BASIC, OCSP_R_NOT_BASIC_RESPONSE);
d211 1
a211 1
		}
d214 1
a214 1
	}
d219 5
a223 4

int OCSP_resp_count(OCSP_BASICRESP *bs)
	{
	if (!bs) return -1;
d225 1
a225 1
	}
d228 5
a232 4

OCSP_SINGLERESP *OCSP_resp_get0(OCSP_BASICRESP *bs, int idx)
	{
	if (!bs) return NULL;
d234 1
a234 1
	}
d237 3
a239 3

int OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last)
	{
d243 7
a249 3
	if (!bs) return -1;
	if (last < 0) last = 0;
	else last++;
d251 1
a251 2
	for (i = last; i < sk_OCSP_SINGLERESP_num(sresp); i++)
		{
d253 3
a255 2
		if (!OCSP_id_cmp(id, single->certId)) return i;
		}
d257 1
a257 1
	}
d264 5
a268 6

int OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,
				ASN1_GENERALIZEDTIME **revtime,
				ASN1_GENERALIZEDTIME **thisupd,
				ASN1_GENERALIZEDTIME **nextupd)
	{
d271 3
a273 1
	if(!single) return -1;
d276 1
a276 2
	if (ret == V_OCSP_CERTSTATUS_REVOKED)
		{
d278 5
a282 4
		if (revtime) *revtime = rev->revocationTime;
		if (reason) 
			{
			if(rev->revocationReason)
d284 2
a285 2
			else *reason = -1;
			}
d287 5
a291 2
	if(thisupd) *thisupd = single->thisUpdate;
	if(nextupd) *nextupd = single->nextUpdate;
d293 1
a293 1
	}
d298 5
a302 7

int OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,
				int *reason,
				ASN1_GENERALIZEDTIME **revtime,
				ASN1_GENERALIZEDTIME **thisupd,
				ASN1_GENERALIZEDTIME **nextupd)
	{
d305 1
d308 2
a309 1
	if(i < 0) return 0;
d312 2
a313 1
	if(status) *status = i;
d315 1
a315 1
	}
d323 4
a326 3

int OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd, ASN1_GENERALIZEDTIME *nextupd, long nsec, long maxsec)
	{
d329 1
d332 3
a334 3
	if (!ASN1_GENERALIZEDTIME_check(thisupd))
		{
		OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_ERROR_IN_THISUPDATE_FIELD);
d336 6
a342 8
	else 
		{
			t_tmp = t_now + nsec;
			if (X509_cmp_time(thisupd, &t_tmp) > 0)
			{
			OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_STATUS_NOT_YET_VALID);
			ret = 0;
			}
d345 1
a345 2
		if (maxsec >= 0)
			{
d347 3
a349 3
			if (X509_cmp_time(thisupd, &t_tmp) < 0)
				{
				OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_STATUS_TOO_OLD);
a350 1
				}
d353 1
a353 1
		
d355 2
a356 1
	if (!nextupd) return ret;
d359 3
a361 3
	if (!ASN1_GENERALIZEDTIME_check(nextupd))
		{
		OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_ERROR_IN_NEXTUPDATE_FIELD);
d363 1
a363 3
		}
	else 
		{
d365 3
a367 3
		if (X509_cmp_time(nextupd, &t_tmp) < 0)
			{
			OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_STATUS_EXPIRED);
a368 1
			}
d370 1
d373 3
a375 3
	if (ASN1_STRING_cmp(nextupd, thisupd) < 0)
		{
		OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE);
d377 1
a377 1
		}
d380 1
a380 1
	}
@


1.2
log
@resolve conflicts
@
text
@a157 1
	if (!dgst) dgst = EVP_sha1();
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d104 2
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@a103 2
	if (gen == NULL)
		return 0;
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d158 1
@


