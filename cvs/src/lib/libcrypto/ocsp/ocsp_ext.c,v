head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.2
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2016.12.27.16.01.19;	author jsing;	state Exp;
branches;
next	1.14;
commitid	eti8VlQ5RIzfiS4E;

1.14
date	2015.07.19.18.29.31;	author miod;	state Exp;
branches;
next	1.13;
commitid	tXLDcP80XKVov5z5;

1.13
date	2014.10.28.05.46.56;	author miod;	state Exp;
branches;
next	1.12;
commitid	hDZmp09ZEY5wcTE1;

1.12
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.11;
commitid	PjnBgKe6Buhbf937;

1.11
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.9;
commitid	id8dTrTMtnTn4fqt;

1.9
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.05.18.16.19.09;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2014.05.18.11.28.41;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.05.17.19.56.35;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.08.08.03.14;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.40;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.04.07.20.41.46;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Kill some #if 0 code that uses old-style ASN.1 encoding.
@
text
@/* $OpenBSD: ocsp_ext.c,v 1.14 2015/07/19 18:29:31 miod Exp $ */
/* Written by Tom Titchener <Tom_Titchener@@groove.net> for the OpenSSL
 * project. */

/* History:
   This file was transfered to Richard Levitte from CertCo by Kathy
   Weinhold in mid-spring 2000 to be included in OpenSSL or released
   as a patch kit. */

/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/objects.h>
#include <openssl/ocsp.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

/* Standard wrapper functions for extensions */

/* OCSP request extensions */

int
OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x)
{
	return X509v3_get_ext_count(x->tbsRequest->requestExtensions);
}

int
OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos)
{
	return X509v3_get_ext_by_NID(x->tbsRequest->requestExtensions, nid,
	    lastpos);
}

int
OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, ASN1_OBJECT *obj, int lastpos)
{
	return X509v3_get_ext_by_OBJ(x->tbsRequest->requestExtensions, obj,
	    lastpos);
}

int
OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos)
{
	return X509v3_get_ext_by_critical(x->tbsRequest->requestExtensions,
	    crit, lastpos);
}

X509_EXTENSION *
OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc)
{
	return X509v3_get_ext(x->tbsRequest->requestExtensions, loc);
}

X509_EXTENSION *
OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc)
{
	return X509v3_delete_ext(x->tbsRequest->requestExtensions, loc);
}

void *
OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit, int *idx)
{
	return X509V3_get_d2i(x->tbsRequest->requestExtensions, nid, crit, idx);
}

int
OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit,
    unsigned long flags)
{
	return X509V3_add1_i2d(&x->tbsRequest->requestExtensions, nid, value,
	    crit, flags);
}

int
OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc)
{
	return X509v3_add_ext(&(x->tbsRequest->requestExtensions), ex,
	    loc) != NULL;
}

/* Single extensions */

int
OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x)
{
	return X509v3_get_ext_count(x->singleRequestExtensions);
}

int
OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos)
{
	return X509v3_get_ext_by_NID(x->singleRequestExtensions, nid, lastpos);
}

int
OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, ASN1_OBJECT *obj, int lastpos)
{
	return X509v3_get_ext_by_OBJ(x->singleRequestExtensions, obj, lastpos);
}

int
OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos)
{
	return X509v3_get_ext_by_critical(x->singleRequestExtensions, crit,
	    lastpos);
}

X509_EXTENSION *
OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc)
{
	return X509v3_get_ext(x->singleRequestExtensions, loc);
}

X509_EXTENSION *
OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc)
{
	return X509v3_delete_ext(x->singleRequestExtensions, loc);
}

void *
OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx)
{
	return X509V3_get_d2i(x->singleRequestExtensions, nid, crit, idx);
}

int
OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit,
    unsigned long flags)
{
	return X509V3_add1_i2d(&x->singleRequestExtensions, nid, value, crit,
	    flags);
}

int
OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc)
{
	return X509v3_add_ext(&(x->singleRequestExtensions), ex, loc) != NULL;
}

/* OCSP Basic response */

int
OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x)
{
	return X509v3_get_ext_count(x->tbsResponseData->responseExtensions);
}

int
OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos)
{
	return X509v3_get_ext_by_NID(x->tbsResponseData->responseExtensions,
	    nid, lastpos);
}

int
OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, ASN1_OBJECT *obj, int lastpos)
{
	return X509v3_get_ext_by_OBJ(x->tbsResponseData->responseExtensions,
	    obj, lastpos);
}

int
OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit, int lastpos)
{
	return X509v3_get_ext_by_critical(
	    x->tbsResponseData->responseExtensions, crit, lastpos);
}

X509_EXTENSION *
OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc)
{
	return X509v3_get_ext(x->tbsResponseData->responseExtensions, loc);
}

X509_EXTENSION *
OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc)
{
	return X509v3_delete_ext(x->tbsResponseData->responseExtensions, loc);
}

void *
OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit, int *idx)
{
	return X509V3_get_d2i(x->tbsResponseData->responseExtensions, nid,
	    crit, idx);
}

int
OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value, int crit,
    unsigned long flags)
{
	return X509V3_add1_i2d(&x->tbsResponseData->responseExtensions, nid,
	    value, crit, flags);
}

int
OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc)
{
	return X509v3_add_ext(&(x->tbsResponseData->responseExtensions), ex,
	    loc) != NULL;
}

/* OCSP single response extensions */

int
OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x)
{
	return X509v3_get_ext_count(x->singleExtensions);
}

int
OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos)
{
	return X509v3_get_ext_by_NID(x->singleExtensions, nid, lastpos);
}

int
OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, ASN1_OBJECT *obj,
    int lastpos)
{
	return X509v3_get_ext_by_OBJ(x->singleExtensions, obj, lastpos);
}

int
OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit, int lastpos)
{
	return X509v3_get_ext_by_critical(x->singleExtensions, crit, lastpos);
}

X509_EXTENSION *
OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc)
{
	return X509v3_get_ext(x->singleExtensions, loc);
}

X509_EXTENSION *
OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc)
{
	return X509v3_delete_ext(x->singleExtensions, loc);
}

void *
OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit, int *idx)
{
	return X509V3_get_d2i(x->singleExtensions, nid, crit, idx);
}

int
OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value, int crit,
    unsigned long flags)
{
	return X509V3_add1_i2d(&x->singleExtensions, nid, value, crit, flags);
}

int
OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc)
{
	return X509v3_add_ext(&(x->singleExtensions), ex, loc) != NULL;
}

/* Nonce handling functions */

/* Add a nonce to an extension stack. A nonce can be specificed or if NULL
 * a random nonce will be generated.
 * Note: OpenSSL 0.9.7d and later create an OCTET STRING containing the
 * nonce, previous versions used the raw nonce.
 */

static int
ocsp_add1_nonce(STACK_OF(X509_EXTENSION) **exts, unsigned char *val, int len)
{
	unsigned char *tmpval;
	ASN1_OCTET_STRING os;
	int ret = 0;

	if (len <= 0)
		len = OCSP_DEFAULT_NONCE_LENGTH;
	/* Create the OCTET STRING manually by writing out the header and
	 * appending the content octets. This avoids an extra memory allocation
	 * operation in some cases. Applications should *NOT* do this because
	 * it relies on library internals.
	 */
	os.length = ASN1_object_size(0, len, V_ASN1_OCTET_STRING);
	os.data = malloc(os.length);
	if (os.data == NULL)
		goto err;
	tmpval = os.data;
	ASN1_put_object(&tmpval, 0, len, V_ASN1_OCTET_STRING, V_ASN1_UNIVERSAL);
	if (val)
		memcpy(tmpval, val, len);
	else
		arc4random_buf(tmpval, len);
	if (!X509V3_add1_i2d(exts, NID_id_pkix_OCSP_Nonce, &os, 0,
	    X509V3_ADD_REPLACE))
		goto err;
	ret = 1;

err:
	free(os.data);
	return ret;
}

/* Add nonce to an OCSP request */
int
OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len)
{
	return ocsp_add1_nonce(&req->tbsRequest->requestExtensions, val, len);
}

/* Same as above but for a response */
int
OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len)
{
	return ocsp_add1_nonce(&resp->tbsResponseData->responseExtensions, val,
	    len);
}

/* Check nonce validity in a request and response.
 * Return value reflects result:
 *  1: nonces present and equal.
 *  2: nonces both absent.
 *  3: nonce present in response only.
 *  0: nonces both present and not equal.
 * -1: nonce in request only.
 *
 *  For most responders clients can check return > 0.
 *  If responder doesn't handle nonces return != 0 may be
 *  necessary. return == 0 is always an error.
 */
int
OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs)
{
	/*
	 * Since we are only interested in the presence or absence of
	 * the nonce and comparing its value there is no need to use
	 * the X509V3 routines: this way we can avoid them allocating an
	 * ASN1_OCTET_STRING structure for the value which would be
	 * freed immediately anyway.
	 */
	int req_idx, resp_idx;
	X509_EXTENSION *req_ext, *resp_ext;

	req_idx = OCSP_REQUEST_get_ext_by_NID(req, NID_id_pkix_OCSP_Nonce, -1);
	resp_idx = OCSP_BASICRESP_get_ext_by_NID(bs,
	    NID_id_pkix_OCSP_Nonce, -1);
	/* Check both absent */
	if (req_idx < 0 && resp_idx < 0)
		return 2;
	/* Check in request only */
	if (req_idx >= 0 && resp_idx < 0)
		return -1;
	/* Check in response but not request */
	if (req_idx < 0 && resp_idx >= 0)
		return 3;
	/* Otherwise nonce in request and response so retrieve the extensions */
	req_ext = OCSP_REQUEST_get_ext(req, req_idx);
	resp_ext = OCSP_BASICRESP_get_ext(bs, resp_idx);
	if (ASN1_OCTET_STRING_cmp(req_ext->value, resp_ext->value))
		return 0;
	return 1;
}

/* Copy the nonce value (if any) from an OCSP request to
 * a response.
 */
int
OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req)
{
	X509_EXTENSION *req_ext;
	int req_idx;

	/* Check for nonce in request */
	req_idx = OCSP_REQUEST_get_ext_by_NID(req, NID_id_pkix_OCSP_Nonce, -1);
	/* If no nonce that's OK */
	if (req_idx < 0)
		return 2;
	req_ext = OCSP_REQUEST_get_ext(req, req_idx);
	return OCSP_BASICRESP_add_ext(resp, req_ext, -1);
}

X509_EXTENSION *
OCSP_crlID_new(char *url, long *n, char *tim)
{
	X509_EXTENSION *x = NULL;
	OCSP_CRLID *cid = NULL;

	if (!(cid = OCSP_CRLID_new()))
		goto err;
	if (url) {
		if (!(cid->crlUrl = ASN1_IA5STRING_new()))
			goto err;
		if (!(ASN1_STRING_set(cid->crlUrl, url, -1)))
			goto err;
	}
	if (n) {
		if (!(cid->crlNum = ASN1_INTEGER_new()))
			goto err;
		if (!(ASN1_INTEGER_set(cid->crlNum, *n)))
			goto err;
	}
	if (tim) {
		if (!(cid->crlTime = ASN1_GENERALIZEDTIME_new()))
			goto err;
		if (!(ASN1_GENERALIZEDTIME_set_string(cid->crlTime, tim)))
			goto err;
	}
	x = X509V3_EXT_i2d(NID_id_pkix_OCSP_CrlID, 0, cid);

err:
	if (cid)
		OCSP_CRLID_free(cid);
	return x;
}

/*   AcceptableResponses ::= SEQUENCE OF OBJECT IDENTIFIER */
X509_EXTENSION *
OCSP_accept_responses_new(char **oids)
{
	int nid;
	STACK_OF(ASN1_OBJECT) *sk = NULL;
	ASN1_OBJECT *o = NULL;
	X509_EXTENSION *x = NULL;

	if (!(sk = sk_ASN1_OBJECT_new_null()))
		return NULL;
	while (oids && *oids) {
		if ((nid = OBJ_txt2nid(*oids)) != NID_undef &&
		    (o = OBJ_nid2obj(nid)))
			if (sk_ASN1_OBJECT_push(sk, o) == 0) {
				sk_ASN1_OBJECT_pop_free(sk, ASN1_OBJECT_free);
				return NULL;
			}
		oids++;
	}
	x = X509V3_EXT_i2d(NID_id_pkix_OCSP_acceptableResponses, 0, sk);
	sk_ASN1_OBJECT_pop_free(sk, ASN1_OBJECT_free);
	return x;
}

/*  ArchiveCutoff ::= GeneralizedTime */
X509_EXTENSION *
OCSP_archive_cutoff_new(char* tim)
{
	X509_EXTENSION *x = NULL;
	ASN1_GENERALIZEDTIME *gt = NULL;

	if (!(gt = ASN1_GENERALIZEDTIME_new()))
		return NULL;
	if (!(ASN1_GENERALIZEDTIME_set_string(gt, tim)))
		goto err;
	x = X509V3_EXT_i2d(NID_id_pkix_OCSP_archiveCutoff, 0, gt);

err:
	if (gt)
		ASN1_GENERALIZEDTIME_free(gt);
	return x;
}

/* per ACCESS_DESCRIPTION parameter are oids, of which there are currently
 * two--NID_ad_ocsp, NID_id_ad_caIssuers--and GeneralName value.  This
 * method forces NID_ad_ocsp and uniformResourceLocator [6] IA5String.
 */
X509_EXTENSION *
OCSP_url_svcloc_new(X509_NAME* issuer, char **urls)
{
	X509_EXTENSION *x = NULL;
	ASN1_IA5STRING *ia5 = NULL;
	OCSP_SERVICELOC *sloc = NULL;
	ACCESS_DESCRIPTION *ad = NULL;

	if (!(sloc = OCSP_SERVICELOC_new()))
		goto err;
	if (!(sloc->issuer = X509_NAME_dup(issuer)))
		goto err;
	if (urls && *urls &&
	    !(sloc->locator = sk_ACCESS_DESCRIPTION_new_null()))
		goto err;
	while (urls && *urls) {
		if (!(ad = ACCESS_DESCRIPTION_new()))
			goto err;
		if (!(ad->method = OBJ_nid2obj(NID_ad_OCSP)))
			goto err;
		if (!(ad->location = GENERAL_NAME_new()))
			goto err;
		if (!(ia5 = ASN1_IA5STRING_new()))
			goto err;
		if (!ASN1_STRING_set((ASN1_STRING*)ia5, *urls, -1))
			goto err;
		ad->location->type = GEN_URI;
		ad->location->d.ia5 = ia5;
		ia5 = NULL;
		if (!sk_ACCESS_DESCRIPTION_push(sloc->locator, ad))
			goto err;
		ad = NULL;
		urls++;
	}
	x = X509V3_EXT_i2d(NID_id_pkix_OCSP_serviceLocator, 0, sloc);

err:
	if (ia5)
		ASN1_IA5STRING_free(ia5);
	if (ad)
		ACCESS_DESCRIPTION_free(ad);
	if (sloc)
		OCSP_SERVICELOC_free(sloc);
	return x;
}
@


1.14
log
@Drop stupid (int) casts for the arguments of malloc() and friends. This is
not 16-bit MS-DOS anymore.
ok bcook@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_ext.c,v 1.13 2014/10/28 05:46:56 miod Exp $ */
a315 44

/* also CRL Entry Extensions */
#if 0
ASN1_STRING *
ASN1_STRING_encode(ASN1_STRING *s, i2d_of_void *i2d, void *data,
    STACK_OF(ASN1_OBJECT) *sk)
{
	int i;
	unsigned char *p, *b = NULL;

	if (data) {
		if ((i = i2d(data, NULL)) <= 0)
			goto err;
		if (!(b = p = malloc(i)))
			goto err;
		if (i2d(data, &p) <= 0)
			goto err;
	} else if (sk) {
		if ((i = i2d_ASN1_SET_OF_ASN1_OBJECT(sk, NULL,
		    (I2D_OF(ASN1_OBJECT))i2d, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL,
		    IS_SEQUENCE)) <= 0)
			goto err;
		if (!(b = p = malloc(i)))
			goto err;
		if (i2d_ASN1_SET_OF_ASN1_OBJECT(sk, &p,
		    (I2D_OF(ASN1_OBJECT))i2d, V_ASN1_SEQUENCE,
		    V_ASN1_UNIVERSAL, IS_SEQUENCE) <= 0)
			goto err;
	} else {
		OCSPerr(OCSP_F_ASN1_STRING_ENCODE, OCSP_R_BAD_DATA);
		goto err;
	}
	if (!s && !(s = ASN1_STRING_new()))
		goto err;
	if (!(ASN1_STRING_set(s, b, i)))
		goto err;
	free(b);
	return s;

err:
	free(b);
	return NULL;
}
#endif
@


1.13
log
@Check the result of sk_*_push() operations for failure.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_ext.c,v 1.12 2014/10/22 13:02:04 jsing Exp $ */
d329 1
a329 1
		if (!(b = p = malloc((unsigned int)i)))
d338 1
a338 1
		if (!(b = p = malloc((unsigned int)i)))
@


1.12
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_ext.c,v 1.11 2014/07/11 08:44:49 jsing Exp $ */
d529 4
a532 1
			sk_ASN1_OBJECT_push(sk, o);
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_ext.c,v 1.10 2014/07/10 13:58:23 jsing Exp $ */
d65 1
a69 1
#include <openssl/rand.h>
d392 1
a392 1
		RAND_pseudo_bytes(tmpval, len);
@


1.10
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_ext.c,v 1.9 2014/06/12 15:49:30 deraadt Exp $ */
a63 1
#include <cryptlib.h>
a67 1
#include <openssl/x509.h>
d70 1
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 1
d66 2
a67 1
#include <cryptlib.h>
@


1.8
log
@Plug memory leaks upon error in OCSP_url_svcloc_new().

ok jsing@@
@
text
@d1 1
a1 1
/* ocsp_ext.c */
@


1.7
log
@More KNF.
@
text
@d524 1
a524 1
		goto err;
d532 1
a532 4

err:
	if (sk)
		sk_ASN1_OBJECT_pop_free(sk, ASN1_OBJECT_free);
d544 1
a544 1
		goto err;
d587 1
d590 1
d596 4
@


1.6
log
@KNF
@
text
@d18 1
a18 1
 *    notice, this list of conditions and the following disclaimer. 
d132 2
a133 2
	return X509v3_add_ext(&(x->tbsRequest->requestExtensions), ex, loc) !=
	    NULL;
d175 2
a176 1
void *OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx)
d207 1
a207 1
	    nid ,lastpos);
d220 2
a221 2
	return X509v3_get_ext_by_critical(x->tbsResponseData->responseExtensions,
	    crit, lastpos);
d333 1
a333 1
		if ((i = i2d_ASN1_SET_OF_ASN1_OBJECT(sk,NULL,
d339 3
a341 2
		if (i2d_ASN1_SET_OF_ASN1_OBJECT(sk,&p,(I2D_OF(ASN1_OBJECT))i2d,
		    V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL, IS_SEQUENCE) <= 0)
d353 1
d364 1
a364 1
 * Note: OpenSSL 0.9.7d and later create an OCTET STRING containing the 
d396 1
d443 2
a444 1
	resp_idx = OCSP_BASICRESP_get_ext_by_NID(bs, NID_id_pkix_OCSP_Nonce, -1);
d462 1
a462 1
/* Copy the nonce value (if any) from an OCSP request to 
d485 1
a485 1
	
d503 1
a503 1
		if (!(ASN1_GENERALIZEDTIME_set_string(cid->crlTime, tim))) 
d507 1
d527 1
a527 1
		    (o = OBJ_nid2obj(nid))) 
d532 1
d551 1
d569 1
a569 1
	
d595 1
@


1.5
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d76 42
a117 32
int OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x)
	{
	return(X509v3_get_ext_count(x->tbsRequest->requestExtensions));
	}

int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos)
	{
	return(X509v3_get_ext_by_NID(x->tbsRequest->requestExtensions,nid,lastpos));
	}

int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, ASN1_OBJECT *obj, int lastpos)
	{
	return(X509v3_get_ext_by_OBJ(x->tbsRequest->requestExtensions,obj,lastpos));
	}

int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos)
	{
	return(X509v3_get_ext_by_critical(x->tbsRequest->requestExtensions,crit,lastpos));
	}

X509_EXTENSION *OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc)
	{
	return(X509v3_get_ext(x->tbsRequest->requestExtensions,loc));
	}

X509_EXTENSION *OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc)
	{
	return(X509v3_delete_ext(x->tbsRequest->requestExtensions,loc));
	}

void *OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit, int *idx)
	{
d119 1
a119 7
	}

int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit,
							unsigned long flags)
	{
	return X509V3_add1_i2d(&x->tbsRequest->requestExtensions, nid, value, crit, flags);
	}
d121 14
a134 4
int OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc)
	{
	return(X509v3_add_ext(&(x->tbsRequest->requestExtensions),ex,loc) != NULL);
	}
d138 36
a173 29
int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x)
	{
	return(X509v3_get_ext_count(x->singleRequestExtensions));
	}

int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos)
	{
	return(X509v3_get_ext_by_NID(x->singleRequestExtensions,nid,lastpos));
	}

int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, ASN1_OBJECT *obj, int lastpos)
	{
	return(X509v3_get_ext_by_OBJ(x->singleRequestExtensions,obj,lastpos));
	}

int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos)
	{
	return(X509v3_get_ext_by_critical(x->singleRequestExtensions,crit,lastpos));
	}

X509_EXTENSION *OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc)
	{
	return(X509v3_get_ext(x->singleRequestExtensions,loc));
	}

X509_EXTENSION *OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc)
	{
	return(X509v3_delete_ext(x->singleRequestExtensions,loc));
	}
d176 1
a176 1
	{
d178 1
a178 1
	}
d180 13
a192 10
int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit,
							unsigned long flags)
	{
	return X509V3_add1_i2d(&x->singleRequestExtensions, nid, value, crit, flags);
	}

int OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc)
	{
	return(X509v3_add_ext(&(x->singleRequestExtensions),ex,loc) != NULL);
	}
d196 60
a255 45
int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x)
	{
	return(X509v3_get_ext_count(x->tbsResponseData->responseExtensions));
	}

int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos)
	{
	return(X509v3_get_ext_by_NID(x->tbsResponseData->responseExtensions,nid,lastpos));
	}

int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, ASN1_OBJECT *obj, int lastpos)
	{
	return(X509v3_get_ext_by_OBJ(x->tbsResponseData->responseExtensions,obj,lastpos));
	}

int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit, int lastpos)
	{
	return(X509v3_get_ext_by_critical(x->tbsResponseData->responseExtensions,crit,lastpos));
	}

X509_EXTENSION *OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc)
	{
	return(X509v3_get_ext(x->tbsResponseData->responseExtensions,loc));
	}

X509_EXTENSION *OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc)
	{
	return(X509v3_delete_ext(x->tbsResponseData->responseExtensions,loc));
	}

void *OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit, int *idx)
	{
	return X509V3_get_d2i(x->tbsResponseData->responseExtensions, nid, crit, idx);
	}

int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value, int crit,
							unsigned long flags)
	{
	return X509V3_add1_i2d(&x->tbsResponseData->responseExtensions, nid, value, crit, flags);
	}

int OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc)
	{
	return(X509v3_add_ext(&(x->tbsResponseData->responseExtensions),ex,loc) != NULL);
	}
d259 40
a298 32
int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x)
	{
	return(X509v3_get_ext_count(x->singleExtensions));
	}

int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos)
	{
	return(X509v3_get_ext_by_NID(x->singleExtensions,nid,lastpos));
	}

int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, ASN1_OBJECT *obj, int lastpos)
	{
	return(X509v3_get_ext_by_OBJ(x->singleExtensions,obj,lastpos));
	}

int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit, int lastpos)
	{
	return(X509v3_get_ext_by_critical(x->singleExtensions,crit,lastpos));
	}

X509_EXTENSION *OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc)
	{
	return(X509v3_get_ext(x->singleExtensions,loc));
	}

X509_EXTENSION *OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc)
	{
	return(X509v3_delete_ext(x->singleExtensions,loc));
	}

void *OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit, int *idx)
	{
d300 1
a300 1
	}
d302 4
a305 3
int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value, int crit,
							unsigned long flags)
	{
d307 1
a307 1
	}
d309 5
a313 4
int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc)
	{
	return(X509v3_add_ext(&(x->singleExtensions),ex,loc) != NULL);
	}
d317 4
a320 3
ASN1_STRING *ASN1_STRING_encode(ASN1_STRING *s, i2d_of_void *i2d,
				void *data, STACK_OF(ASN1_OBJECT) *sk)
        {
d324 13
a336 15
	if (data)
	        {
		if ((i=i2d(data,NULL)) <= 0) goto err;
		if (!(b=p=malloc((unsigned int)i)))
			goto err;
	        if (i2d(data, &p) <= 0) goto err;
		}
	else if (sk)
	        {
		if ((i=i2d_ASN1_SET_OF_ASN1_OBJECT(sk,NULL,
						   (I2D_OF(ASN1_OBJECT))i2d,
						   V_ASN1_SEQUENCE,
						   V_ASN1_UNIVERSAL,
						   IS_SEQUENCE))<=0) goto err;
		if (!(b=p=malloc((unsigned int)i)))
d339 9
a347 7
						V_ASN1_SEQUENCE,
						V_ASN1_UNIVERSAL,
						IS_SEQUENCE)<=0) goto err;
		}
	else
		{
		OCSPerr(OCSP_F_ASN1_STRING_ENCODE,OCSP_R_BAD_DATA);
a348 3
		}
	if (!s && !(s = ASN1_STRING_new())) goto err;
	if (!(ASN1_STRING_set(s, b, i))) goto err;
d352 1
a352 1
	if (b) free(b);
d354 1
a354 1
	}
d365 3
a367 2
static int ocsp_add1_nonce(STACK_OF(X509_EXTENSION) **exts, unsigned char *val, int len)
	{
d371 3
a373 1
	if (len <= 0) len = OCSP_DEFAULT_NONCE_LENGTH;
d377 1
a377 1
         * it relies on library internals.
d389 3
a391 3
	if(!X509V3_add1_i2d(exts, NID_id_pkix_OCSP_Nonce,
			&os, 0, X509V3_ADD_REPLACE))
				goto err;
d393 2
a394 3
	err:
	if (os.data)
		free(os.data);
d396 1
a396 2
	}

d399 3
a401 3

int OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len)
	{
d403 1
a403 1
	}
d406 6
a411 5

int OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len)
	{
	return ocsp_add1_nonce(&resp->tbsResponseData->responseExtensions, val, len);
	}
d425 3
a427 3

int OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs)
	{
a434 1

d437 1
d441 1
a441 1
	if((req_idx < 0) && (resp_idx < 0))
d444 1
a444 1
	if((req_idx >= 0) && (resp_idx < 0))
d447 1
a447 1
	if((req_idx < 0) && (resp_idx >= 0))
d452 1
a452 1
	if(ASN1_OCTET_STRING_cmp(req_ext->value, resp_ext->value))
d455 1
a455 1
	}
d460 3
a462 3

int OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req)
	{
d465 1
d469 2
a470 1
	if (req_idx < 0) return 2;
d473 1
a473 1
	}
d475 3
a477 2
X509_EXTENSION *OCSP_crlID_new(char *url, long *n, char *tim)
        {
d481 17
a497 14
	if (!(cid = OCSP_CRLID_new())) goto err;
	if (url)
	        {
		if (!(cid->crlUrl = ASN1_IA5STRING_new())) goto err;
		if (!(ASN1_STRING_set(cid->crlUrl, url, -1))) goto err;
		}
	if (n)
	        {
		if (!(cid->crlNum = ASN1_INTEGER_new())) goto err;
		if (!(ASN1_INTEGER_set(cid->crlNum, *n))) goto err;
		}
	if (tim)
	        {
		if (!(cid->crlTime = ASN1_GENERALIZEDTIME_new())) goto err;
d499 2
a500 2
		        goto err;
		}
d503 2
a504 1
	if (cid) OCSP_CRLID_free(cid);
d506 1
a506 1
	}
d509 3
a511 2
X509_EXTENSION *OCSP_accept_responses_new(char **oids)
        {
d515 1
a515 1
        X509_EXTENSION *x = NULL;
d517 6
a522 5
	if (!(sk = sk_ASN1_OBJECT_new_null())) goto err;
	while (oids && *oids)
	        {
		if ((nid=OBJ_txt2nid(*oids))!=NID_undef&&(o=OBJ_nid2obj(nid))) 
		        sk_ASN1_OBJECT_push(sk, o);
d524 1
a524 1
		}
d527 2
a528 1
	if (sk) sk_ASN1_OBJECT_pop_free(sk, ASN1_OBJECT_free);
d530 1
a530 1
        }
d533 4
a536 3
X509_EXTENSION *OCSP_archive_cutoff_new(char* tim)
        {
	X509_EXTENSION *x=NULL;
d539 4
a542 2
	if (!(gt = ASN1_GENERALIZEDTIME_new())) goto err;
	if (!(ASN1_GENERALIZEDTIME_set_string(gt, tim))) goto err;
d545 2
a546 1
	if (gt) ASN1_GENERALIZEDTIME_free(gt);
d548 1
a548 1
	}
d554 3
a556 2
X509_EXTENSION *OCSP_url_svcloc_new(X509_NAME* issuer, char **urls)
        {
d562 18
a579 10
	if (!(sloc = OCSP_SERVICELOC_new())) goto err;
	if (!(sloc->issuer = X509_NAME_dup(issuer))) goto err;
	if (urls && *urls && !(sloc->locator = sk_ACCESS_DESCRIPTION_new_null())) goto err;
	while (urls && *urls)
	        {
		if (!(ad = ACCESS_DESCRIPTION_new())) goto err;
		if (!(ad->method=OBJ_nid2obj(NID_ad_OCSP))) goto err;
		if (!(ad->location = GENERAL_NAME_new())) goto err;
	        if (!(ia5 = ASN1_IA5STRING_new())) goto err;
		if (!ASN1_STRING_set((ASN1_STRING*)ia5, *urls, -1)) goto err;
d582 2
a583 1
		if (!sk_ACCESS_DESCRIPTION_push(sloc->locator, ad)) goto err;
d585 1
a585 1
		}
d588 2
a589 1
	if (sloc) OCSP_SERVICELOC_free(sloc);
d591 1
a591 2
	}

@


1.4
log
@resolve conflicts, fix local changes
@
text
@d277 1
a277 1
		if (!(b=p=OPENSSL_malloc((unsigned int)i)))
d288 1
a288 1
		if (!(b=p=OPENSSL_malloc((unsigned int)i)))
d302 1
a302 1
	OPENSSL_free(b);
d305 1
a305 1
	if (b) OPENSSL_free(b);
d330 1
a330 1
	os.data = OPENSSL_malloc(os.length);
d345 1
a345 1
		OPENSSL_free(os.data);
@


1.3
log
@resolve conflicts
@
text
@d267 1
a267 1

d308 1
d446 1
a446 7
	if (!(x = X509_EXTENSION_new())) goto err;
	if (!(x->object = OBJ_nid2obj(NID_id_pkix_OCSP_CrlID))) goto err;
	if (!(ASN1_STRING_encode_of(OCSP_CRLID,x->value,i2d_OCSP_CRLID,cid,
				    NULL)))
	        goto err;
	OCSP_CRLID_free(cid);
	return x;
a447 1
	if (x) X509_EXTENSION_free(x);
d449 1
a449 1
	return NULL;
d467 1
a467 8
	if (!(x = X509_EXTENSION_new())) goto err;
	if (!(x->object = OBJ_nid2obj(NID_id_pkix_OCSP_acceptableResponses)))
		goto err;
	if (!(ASN1_STRING_encode_of(ASN1_OBJECT,x->value,i2d_ASN1_OBJECT,NULL,
				    sk)))
	        goto err;
	sk_ASN1_OBJECT_pop_free(sk, ASN1_OBJECT_free);
	return x;
a468 1
	if (x) X509_EXTENSION_free(x);
d470 1
a470 1
	return NULL;
d481 1
a481 6
	if (!(x = X509_EXTENSION_new())) goto err;
	if (!(x->object=OBJ_nid2obj(NID_id_pkix_OCSP_archiveCutoff)))goto err;
	if (!(ASN1_STRING_encode_of(ASN1_GENERALIZEDTIME,x->value,
				    i2d_ASN1_GENERALIZEDTIME,gt,NULL))) goto err;
	ASN1_GENERALIZEDTIME_free(gt);
	return x;
d484 1
a484 2
	if (x) X509_EXTENSION_free(x);
	return NULL;
d513 1
a513 7
	if (!(x = X509_EXTENSION_new())) goto err;
	if (!(x->object = OBJ_nid2obj(NID_id_pkix_OCSP_serviceLocator))) 
	        goto err;
	if (!(ASN1_STRING_encode_of(OCSP_SERVICELOC,x->value,
				    i2d_OCSP_SERVICELOC,sloc,NULL))) goto err;
	OCSP_SERVICELOC_free(sloc);
	return x;
a514 1
	if (x) X509_EXTENSION_free(x);
d516 1
a516 1
	return NULL;
@


1.2
log
@merge 0.9.7d
@
text
@d268 2
a269 2
ASN1_STRING *ASN1_STRING_encode(ASN1_STRING *s, int (*i2d)(), 
				char *data, STACK_OF(ASN1_OBJECT) *sk)
d277 1
a277 1
		if (!(b=p=(unsigned char*)OPENSSL_malloc((unsigned int)i)))
d283 6
a288 3
		if ((i=i2d_ASN1_SET_OF_ASN1_OBJECT(sk,NULL,i2d,V_ASN1_SEQUENCE,
				   V_ASN1_UNIVERSAL,IS_SEQUENCE))<=0) goto err;
		if (!(b=p=(unsigned char*)OPENSSL_malloc((unsigned int)i)))
d290 4
a293 2
		if (i2d_ASN1_SET_OF_ASN1_OBJECT(sk,&p,i2d,V_ASN1_SEQUENCE,
				 V_ASN1_UNIVERSAL,IS_SEQUENCE)<=0) goto err;
d447 2
a448 1
	if (!(ASN1_STRING_encode(x->value,i2d_OCSP_CRLID,(char*)cid,NULL)))
d476 2
a477 1
	if (!(ASN1_STRING_encode(x->value,i2d_ASN1_OBJECT,NULL,sk)))
d497 2
a498 2
	if (!(ASN1_STRING_encode(x->value,i2d_ASN1_GENERALIZEDTIME,
				 (char*)gt,NULL))) goto err;
d536 2
a537 2
	if (!(ASN1_STRING_encode(x->value, i2d_OCSP_SERVICELOC,
				 (char*)sloc, NULL))) goto err;
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d308 2
d318 13
a330 1
	if (val) tmpval = val;
a331 2
		{
		if (!(tmpval = OPENSSL_malloc(len))) goto err;
a332 3
		}
	os.data = tmpval;
	os.length = len;
d338 2
a339 1
	if(!val) OPENSSL_free(tmpval);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import openssl-0.9.7d
@
text
@a307 2
 * Note: OpenSSL 0.9.7d and later create an OCTET STRING containing the 
 * nonce, previous versions used the raw nonce.
d316 1
a316 13
	/* Create the OCTET STRING manually by writing out the header and
	 * appending the content octets. This avoids an extra memory allocation
	 * operation in some cases. Applications should *NOT* do this because
         * it relies on library internals.
	 */
	os.length = ASN1_object_size(0, len, V_ASN1_OCTET_STRING);
	os.data = OPENSSL_malloc(os.length);
	if (os.data == NULL)
		goto err;
	tmpval = os.data;
	ASN1_put_object(&tmpval, 0, len, V_ASN1_OCTET_STRING, V_ASN1_UNIVERSAL);
	if (val)
		memcpy(tmpval, val, len);
d318 2
d321 3
d329 1
a329 2
	if (os.data)
		OPENSSL_free(os.data);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d268 2
a269 2
ASN1_STRING *ASN1_STRING_encode(ASN1_STRING *s, i2d_of_void *i2d,
				void *data, STACK_OF(ASN1_OBJECT) *sk)
d277 1
a277 1
		if (!(b=p=OPENSSL_malloc((unsigned int)i)))
d283 3
a285 6
		if ((i=i2d_ASN1_SET_OF_ASN1_OBJECT(sk,NULL,
						   (I2D_OF(ASN1_OBJECT))i2d,
						   V_ASN1_SEQUENCE,
						   V_ASN1_UNIVERSAL,
						   IS_SEQUENCE))<=0) goto err;
		if (!(b=p=OPENSSL_malloc((unsigned int)i)))
d287 2
a288 4
		if (i2d_ASN1_SET_OF_ASN1_OBJECT(sk,&p,(I2D_OF(ASN1_OBJECT))i2d,
						V_ASN1_SEQUENCE,
						V_ASN1_UNIVERSAL,
						IS_SEQUENCE)<=0) goto err;
d442 1
a442 2
	if (!(ASN1_STRING_encode_of(OCSP_CRLID,x->value,i2d_OCSP_CRLID,cid,
				    NULL)))
d470 1
a470 2
	if (!(ASN1_STRING_encode_of(ASN1_OBJECT,x->value,i2d_ASN1_OBJECT,NULL,
				    sk)))
d490 2
a491 2
	if (!(ASN1_STRING_encode_of(ASN1_GENERALIZEDTIME,x->value,
				    i2d_ASN1_GENERALIZEDTIME,gt,NULL))) goto err;
d529 2
a530 2
	if (!(ASN1_STRING_encode_of(OCSP_SERVICELOC,x->value,
				    i2d_OCSP_SERVICELOC,sloc,NULL))) goto err;
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d267 1
a267 1
#if 0
a307 1
#endif
d445 7
a451 1
	x = X509V3_EXT_i2d(NID_id_pkix_OCSP_CrlID, 0, cid);
d453 1
d455 1
a455 1
	return x;
d473 8
a480 1
	x = X509V3_EXT_i2d(NID_id_pkix_OCSP_acceptableResponses, 0, sk);
d482 1
d484 1
a484 1
	return x;
d495 6
a500 1
	x = X509V3_EXT_i2d(NID_id_pkix_OCSP_archiveCutoff, 0, gt);
d503 2
a504 1
	return x;
d533 7
a539 1
	x = X509V3_EXT_i2d(NID_id_pkix_OCSP_serviceLocator, 0, sloc);
d541 1
d543 1
a543 1
	return x;
@


