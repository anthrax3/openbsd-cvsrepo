head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.6
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.9;
commitid	kT0fLt3r4lroFJra;

1.9
date	2016.12.30.15.31.58;	author jsing;	state Exp;
branches;
next	1.8;
commitid	tES8uLpbBNuhM7ko;

1.8
date	2016.06.25.16.10.26;	author beck;	state Exp;
branches;
next	1.7;
commitid	nk6770wdfihlb62N;

1.7
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches
	1.7.2.1
	1.7.6.1;
next	1.6;
commitid	8tb4v3IC8S2vzfHj;

1.6
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.5;
commitid	yQEL1wOWIearrW15;

1.5
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.18.11.28.41;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.17.19.56.35;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.41;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.13.57;	author djm;	state Exp;
branches;
next	;

1.7.2.1
date	2016.06.25.16.43.01;	author beck;	state Exp;
branches;
next	;
commitid	Lo5ggQ1ADXsNFpCu;

1.7.6.1
date	2016.06.25.16.42.40;	author beck;	state Exp;
branches;
next	1.7.6.2;
commitid	KrxOU9jc5YCrSNNi;

1.7.6.2
date	2016.06.27.15.42.31;	author beck;	state Exp;
branches;
next	;
commitid	ZOTz2y8mvmupLo3a;


desc
@@


1.10
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ocsp_srv.c,v 1.9 2016/12/30 15:31:58 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2001.
 */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/ocsp.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

/* Utility functions related to sending OCSP responses and extracting
 * relevant information from the request.
 */

int
OCSP_request_onereq_count(OCSP_REQUEST *req)
{
	return sk_OCSP_ONEREQ_num(req->tbsRequest->requestList);
}

OCSP_ONEREQ *
OCSP_request_onereq_get0(OCSP_REQUEST *req, int i)
{
	return sk_OCSP_ONEREQ_value(req->tbsRequest->requestList, i);
}

OCSP_CERTID *
OCSP_onereq_get0_id(OCSP_ONEREQ *one)
{
	return one->reqCert;
}

int
OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,
    ASN1_OCTET_STRING **pikeyHash, ASN1_INTEGER **pserial, OCSP_CERTID *cid)
{
	if (!cid)
		return 0;
	if (pmd)
		*pmd = cid->hashAlgorithm->algorithm;
	if (piNameHash)
		*piNameHash = cid->issuerNameHash;
	if (pikeyHash)
		*pikeyHash = cid->issuerKeyHash;
	if (pserial)
		*pserial = cid->serialNumber;
	return 1;
}

int
OCSP_request_is_signed(OCSP_REQUEST *req)
{
	if (req->optionalSignature)
		return 1;
	return 0;
}

/* Create an OCSP response and encode an optional basic response */
OCSP_RESPONSE *
OCSP_response_create(int status, OCSP_BASICRESP *bs)
{
	OCSP_RESPONSE *rsp = NULL;

	if (!(rsp = OCSP_RESPONSE_new()))
		goto err;
	if (!(ASN1_ENUMERATED_set(rsp->responseStatus, status)))
		goto err;
	if (!bs)
		return rsp;
	if (!(rsp->responseBytes = OCSP_RESPBYTES_new()))
		goto err;
	rsp->responseBytes->responseType = OBJ_nid2obj(NID_id_pkix_OCSP_basic);
	if (!ASN1_item_pack(bs, &OCSP_BASICRESP_it,
	    &rsp->responseBytes->response))
		goto err;
	return rsp;

err:
	if (rsp)
		OCSP_RESPONSE_free(rsp);
	return NULL;
}

OCSP_SINGLERESP *
OCSP_basic_add1_status(OCSP_BASICRESP *rsp, OCSP_CERTID *cid, int status,
    int reason, ASN1_TIME *revtime, ASN1_TIME *thisupd, ASN1_TIME *nextupd)
{
	OCSP_SINGLERESP *single = NULL;
	OCSP_CERTSTATUS *cs;
	OCSP_REVOKEDINFO *ri;

	if (!rsp->tbsResponseData->responses &&
	    !(rsp->tbsResponseData->responses = sk_OCSP_SINGLERESP_new_null()))
		goto err;

	if (!(single = OCSP_SINGLERESP_new()))
		goto err;

	if (!ASN1_TIME_to_generalizedtime(thisupd, &single->thisUpdate))
		goto err;
	if (nextupd &&
	    !ASN1_TIME_to_generalizedtime(nextupd, &single->nextUpdate))
		goto err;

	OCSP_CERTID_free(single->certId);

	if (!(single->certId = OCSP_CERTID_dup(cid)))
		goto err;

	cs = single->certStatus;
	switch (cs->type = status) {
	case V_OCSP_CERTSTATUS_REVOKED:
		if (!revtime) {
			OCSPerror(OCSP_R_NO_REVOKED_TIME);
			goto err;
		}
		if (!(cs->value.revoked = ri = OCSP_REVOKEDINFO_new()))
			goto err;
		if (!ASN1_TIME_to_generalizedtime(revtime, &ri->revocationTime))
			goto err;
		if (reason != OCSP_REVOKED_STATUS_NOSTATUS) {
			if (!(ri->revocationReason = ASN1_ENUMERATED_new()))
				goto err;
			if (!(ASN1_ENUMERATED_set(ri->revocationReason,
			    reason)))
				goto err;
		}
		break;

	case V_OCSP_CERTSTATUS_GOOD:
		cs->value.good = ASN1_NULL_new();
		break;

	case V_OCSP_CERTSTATUS_UNKNOWN:
		cs->value.unknown = ASN1_NULL_new();
		break;

	default:
		goto err;
	}
	if (!(sk_OCSP_SINGLERESP_push(rsp->tbsResponseData->responses, single)))
		goto err;
	return single;

err:
	OCSP_SINGLERESP_free(single);
	return NULL;
}

/* Add a certificate to an OCSP request */
int
OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert)
{
	if (!resp->certs && !(resp->certs = sk_X509_new_null()))
		return 0;

	if (!sk_X509_push(resp->certs, cert))
		return 0;
	CRYPTO_add(&cert->references, 1, CRYPTO_LOCK_X509);
	return 1;
}

int
OCSP_basic_sign(OCSP_BASICRESP *brsp, X509 *signer, EVP_PKEY *key,
    const EVP_MD *dgst, STACK_OF(X509) *certs, unsigned long flags)
{
	int i;
	OCSP_RESPID *rid;

	if (!X509_check_private_key(signer, key)) {
		OCSPerror(OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
		goto err;
	}

	if (!(flags & OCSP_NOCERTS)) {
		if (!OCSP_basic_add1_cert(brsp, signer))
			goto err;
		for (i = 0; i < sk_X509_num(certs); i++) {
			X509 *tmpcert = sk_X509_value(certs, i);
			if (!OCSP_basic_add1_cert(brsp, tmpcert))
				goto err;
		}
	}

	rid = brsp->tbsResponseData->responderId;
	if (flags & OCSP_RESPID_KEY) {
		unsigned char md[SHA_DIGEST_LENGTH];

		X509_pubkey_digest(signer, EVP_sha1(), md, NULL);
		if (!(rid->value.byKey = ASN1_OCTET_STRING_new()))
			goto err;
		if (!(ASN1_OCTET_STRING_set(rid->value.byKey, md,
		    SHA_DIGEST_LENGTH)))
			goto err;
		rid->type = V_OCSP_RESPID_KEY;
	} else {
		if (!X509_NAME_set(&rid->value.byName,
		    X509_get_subject_name(signer)))
			goto err;
		rid->type = V_OCSP_RESPID_NAME;
	}

	if (!(flags & OCSP_NOTIME) &&
	    !ASN1_GENERALIZEDTIME_set(brsp->tbsResponseData->producedAt, time(NULL)))
		goto err;

	/* Right now, I think that not doing double hashing is the right
	   thing.	-- Richard Levitte */

	if (!OCSP_BASICRESP_sign(brsp, key, dgst, 0))
		goto err;

	return 1;

err:
	return 0;
}
@


1.9
log
@Expand ASN1_ITEM_rptr macros - no change in generated assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_srv.c,v 1.8 2016/06/25 16:10:26 beck Exp $ */
d171 1
a171 2
			OCSPerr(OCSP_F_OCSP_BASIC_ADD1_STATUS,
			    OCSP_R_NO_REVOKED_TIME);
d228 1
a228 2
		OCSPerr(OCSP_F_OCSP_BASIC_SIGN,
		    OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
@


1.8
log
@Fix from kinichiro.inoguchi@@gmail.com to ensure that OCSP uses
Generalized Time on requests as per RFC6960
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_srv.c,v 1.7 2014/10/18 17:20:40 jsing Exp $ */
d130 1
a130 1
	if (!ASN1_item_pack(bs, ASN1_ITEM_rptr(OCSP_BASICRESP),
@


1.7
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_srv.c,v 1.6 2014/07/11 08:44:49 jsing Exp $ */
d263 1
a263 1
	    !X509_gmtime_adj(brsp->tbsResponseData->producedAt, 0))
@


1.7.2.1
log
@Fix several issues in the OCSP code that could result in the incorrect
generation and parsing of OCSP requests. This remediates a lack of error
checking on time parsing in these functions, and ensures that only
GENERALIZEDTIME formats are accepted for OCSP, as per RFC 6960

Issues reported, and fixes provided by  Kazuki Yamaguchi <k@@rhe.jp>
and Kinichiro Inoguchi <kinichiro.inoguchi@@gmail.com>
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_srv.c,v 1.7 2014/10/18 17:20:40 jsing Exp $ */
d263 1
a263 1
	    !ASN1_GENERALIZEDTIME_set(brsp->tbsResponseData->producedAt, time(NULL)))
@


1.7.6.1
log
@Fix several issues in the OCSP code that could result in the incorrect
generation and parsing of OCSP requests. This remediates a lack of error
checking on time parsing in these functions, and ensures that only
GENERALIZEDTIME formats are accepted for OCSP, as per RFC 6960

Issues reported, and fixes provided by  Kazuki Yamaguchi <k@@rhe.jp>
and Kinichiro Inoguchi <kinichiro.inoguchi@@gmail.com>
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_srv.c,v 1.7 2014/10/18 17:20:40 jsing Exp $ */
d263 1
a263 1
	    !ASN1_GENERALIZEDTIME_set(brsp->tbsResponseData->producedAt, time(NULL)))
@


1.7.6.2
log
@Incorrect/unneeded fix for 5.8
noticed by jsing@@
@
text
@d263 1
a263 1
	    !X509_gmtime_adj(brsp->tbsResponseData->producedAt, 0))
@


1.6
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ocsp_srv.c,v 1.5 2014/06/12 15:49:30 deraadt Exp $ */
a64 1
#include <openssl/rand.h>
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
a61 1
#include <cryptlib.h>
d63 2
a66 1
#include <openssl/pem.h>
a67 1
#include <openssl/ocsp.h>
@


1.4
log
@More KNF.
@
text
@d1 1
a1 1
/* ocsp_srv.c */
@


1.3
log
@KNF
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d134 1
d168 1
a168 1
	switch(cs->type = status) {
d178 1
a178 1
			goto err;	
d180 1
a180 1
			if (!(ri->revocationReason = ASN1_ENUMERATED_new())) 
d184 2
a185 2
				goto err;	
			}
d202 1
d273 1
@


1.2
log
@resolve conflicts
@
text
@d72 3
a74 2
int OCSP_request_onereq_count(OCSP_REQUEST *req)
	{
d76 1
a76 1
	}
d78 3
a80 2
OCSP_ONEREQ *OCSP_request_onereq_get0(OCSP_REQUEST *req, int i)
	{
d82 1
a82 1
	}
d84 3
a86 2
OCSP_CERTID *OCSP_onereq_get0_id(OCSP_ONEREQ *one)
	{
d88 1
a88 1
	}
d90 14
a103 9
int OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,
			ASN1_OCTET_STRING **pikeyHash,
			ASN1_INTEGER **pserial, OCSP_CERTID *cid)
	{
	if (!cid) return 0;
	if (pmd) *pmd = cid->hashAlgorithm->algorithm;
	if(piNameHash) *piNameHash = cid->issuerNameHash;
	if (pikeyHash) *pikeyHash = cid->issuerKeyHash;
	if (pserial) *pserial = cid->serialNumber;
d105 1
a105 1
	}
d107 5
a111 3
int OCSP_request_is_signed(OCSP_REQUEST *req)
	{
	if(req->optionalSignature) return 1;
d113 1
a113 1
	}
d116 13
a128 8
OCSP_RESPONSE *OCSP_response_create(int status, OCSP_BASICRESP *bs)
        {
        OCSP_RESPONSE *rsp = NULL;

	if (!(rsp = OCSP_RESPONSE_new())) goto err;
	if (!(ASN1_ENUMERATED_set(rsp->responseStatus, status))) goto err;
	if (!bs) return rsp;
	if (!(rsp->responseBytes = OCSP_RESPBYTES_new())) goto err;
d130 3
a132 2
	if (!ASN1_item_pack(bs, ASN1_ITEM_rptr(OCSP_BASICRESP), &rsp->responseBytes->response))
				goto err;
d135 2
a136 1
	if (rsp) OCSP_RESPONSE_free(rsp);
d138 1
a138 1
	}
d140 4
a143 7

OCSP_SINGLERESP *OCSP_basic_add1_status(OCSP_BASICRESP *rsp,
						OCSP_CERTID *cid,
						int status, int reason,
						ASN1_TIME *revtime,
					ASN1_TIME *thisupd, ASN1_TIME *nextupd)
	{
d148 1
a148 1
	if(!rsp->tbsResponseData->responses &&
a154 2


d158 1
a158 1
		!ASN1_TIME_to_generalizedtime(nextupd, &single->nextUpdate))
d163 1
a163 1
	if(!(single->certId = OCSP_CERTID_dup(cid)))
d167 1
a167 2
	switch(cs->type = status)
		{
d169 6
a174 3
		if (!revtime)
		        {
		        OCSPerr(OCSP_F_OCSP_BASIC_ADD1_STATUS,OCSP_R_NO_REVOKED_TIME);
a175 2
		        }
		if (!(cs->value.revoked = ri = OCSP_REVOKEDINFO_new())) goto err;
d178 1
a178 2
		if (reason != OCSP_REVOKED_STATUS_NOSTATUS)
		        {
d180 4
a183 4
			        goto err;
			if (!(ASN1_ENUMERATED_set(ri->revocationReason, 
						  reason)))
			        goto err;	
d197 1
a197 2

		}
d204 1
a204 1
	}
d207 3
a209 3

int OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert)
	{
d213 2
a214 1
	if(!sk_X509_push(resp->certs, cert)) return 0;
d217 1
a217 1
	}
d219 4
a222 4
int OCSP_basic_sign(OCSP_BASICRESP *brsp, 
			X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,
			STACK_OF(X509) *certs, unsigned long flags)
        {
d226 3
a228 3
	if (!X509_check_private_key(signer, key))
		{
		OCSPerr(OCSP_F_OCSP_BASIC_SIGN, OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
d230 1
a230 1
		}
d232 2
a233 3
	if(!(flags & OCSP_NOCERTS))
		{
		if(!OCSP_basic_add1_cert(brsp, signer))
d235 1
a235 2
		for (i = 0; i < sk_X509_num(certs); i++)
			{
d237 1
a237 1
			if(!OCSP_basic_add1_cert(brsp, tmpcert))
a238 1
			}
d240 1
d243 1
a243 2
	if (flags & OCSP_RESPID_KEY)
		{
d245 1
d249 3
a251 2
		if (!(ASN1_OCTET_STRING_set(rid->value.byKey, md, SHA_DIGEST_LENGTH)))
				goto err;
d253 1
a253 3
		}
	else
		{
d255 2
a256 2
					X509_get_subject_name(signer)))
				goto err;
d258 1
a258 1
		}
d261 1
a261 1
		!X509_gmtime_adj(brsp->tbsResponseData->producedAt, 0))
d267 2
a268 1
	if (!OCSP_BASICRESP_sign(brsp, key, dgst, 0)) goto err;
d273 1
a273 1
	}
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


