head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16;
locks; strict;
comment	@ * @;


1.16
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.15;
commitid	kT0fLt3r4lroFJra;

1.15
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.14;
commitid	69Tc75PIK8JcRRsC;

1.14
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.13;
commitid	gtwLkRyWx0K1HbzX;

1.13
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.12;
commitid	yQEL1wOWIearrW15;

1.12
date	2014.07.09.13.26.47;	author miod;	state Exp;
branches;
next	1.11;
commitid	g5VUmsrdRHmu7cCJ;

1.11
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.41;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.20;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.01;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.04;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.14;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.08;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.54;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: dh_gen.c,v 1.15 2015/02/09 15:49:22 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* NB: These functions have been upgraded - the previous prototypes are in
 * dh_depr.c as wrappers to these ones.
 *  - Geoff
 */

#include <stdio.h>

#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/err.h>

static int dh_builtin_genparams(DH *ret, int prime_len, int generator,
	    BN_GENCB *cb);

int
DH_generate_parameters_ex(DH *ret, int prime_len, int generator, BN_GENCB *cb)
{
	if (ret->meth->generate_params)
		return ret->meth->generate_params(ret, prime_len, generator, cb);
	return dh_builtin_genparams(ret, prime_len, generator, cb);
}

/*
 * We generate DH parameters as follows:
 * find a prime q which is prime_len/2 bits long.
 * p=(2*q)+1 or (p-1)/2 = q
 * For this case, g is a generator if
 * g^((p-1)/q) mod p != 1 for values of q which are the factors of p-1.
 * Since the factors of p-1 are q and 2, we just need to check
 * g^2 mod p != 1 and g^q mod p != 1.
 *
 * Having said all that,
 * there is another special case method for the generators 2, 3 and 5.
 * for 2, p mod 24 == 11
 * for 3, p mod 12 == 5  <<<<< does not work for safe primes.
 * for 5, p mod 10 == 3 or 7
 *
 * Thanks to Phil Karn <karn@@qualcomm.com> for the pointers about the
 * special generators and for answering some of my questions.
 *
 * I've implemented the second simple method :-).
 * Since DH should be using a safe prime (both p and q are prime),
 * this generator function can take a very very long time to run.
 */
/* Actually there is no reason to insist that 'generator' be a generator.
 * It's just as OK (and in some sense better) to use a generator of the
 * order-q subgroup.
 */
static int
dh_builtin_genparams(DH *ret, int prime_len, int generator, BN_GENCB *cb)
{
	BIGNUM *t1, *t2;
	int g, ok = -1;
	BN_CTX *ctx = NULL;

	ctx = BN_CTX_new();
	if (ctx == NULL)
		goto err;
	BN_CTX_start(ctx);
	if ((t1 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((t2 = BN_CTX_get(ctx)) == NULL)
		goto err;

	/* Make sure 'ret' has the necessary elements */
	if (!ret->p && ((ret->p = BN_new()) == NULL))
		goto err;
	if (!ret->g && ((ret->g = BN_new()) == NULL))
		goto err;
	
	if (generator <= 1) {
		DHerror(DH_R_BAD_GENERATOR);
		goto err;
	}
	if (generator == DH_GENERATOR_2) {
		if (!BN_set_word(t1, 24))
			goto err;
		if (!BN_set_word(t2, 11))
			goto err;
		g = 2;
	} else if (generator == DH_GENERATOR_5) {
		if (!BN_set_word(t1, 10))
			goto err;
		if (!BN_set_word(t2, 3))
			goto err;
		/* BN_set_word(t3,7); just have to miss
		 * out on these ones :-( */
		g = 5;
	} else {
		/*
		 * in the general case, don't worry if 'generator' is a
		 * generator or not: since we are using safe primes,
		 * it will generate either an order-q or an order-2q group,
		 * which both is OK
		 */
		if (!BN_set_word(t1, 2))
			goto err;
		if (!BN_set_word(t2, 1))
			goto err;
		g = generator;
	}
	
	if (!BN_generate_prime_ex(ret->p, prime_len, 1, t1, t2, cb))
		goto err;
	if (!BN_GENCB_call(cb, 3, 0))
		goto err;
	if (!BN_set_word(ret->g, g))
		goto err;
	ok = 1;
err:
	if (ok == -1) {
		DHerror(ERR_R_BN_LIB);
		ok = 0;
	}

	if (ctx != NULL) {
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
	}
	return ok;
}
@


1.15
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_gen.c,v 1.14 2015/02/07 13:19:15 doug Exp $ */
d130 1
a130 1
		DHerr(DH_F_DH_BUILTIN_GENPARAMS, DH_R_BAD_GENERATOR);
d170 1
a170 1
		DHerr(DH_F_DH_BUILTIN_GENPARAMS, ERR_R_BN_LIB);
@


1.14
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_gen.c,v 1.13 2014/07/11 08:44:48 jsing Exp $ */
d118 3
a120 3
	t1 = BN_CTX_get(ctx);
	t2 = BN_CTX_get(ctx);
	if (t1 == NULL || t2 == NULL)
@


1.13
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_gen.c,v 1.12 2014/07/09 13:26:47 miod Exp $ */
a138 8
#if 0 /* does not work for safe primes */
	} else if (generator == DH_GENERATOR_3) {
		if (!BN_set_word(t1, 12))
			goto err;
		if (!BN_set_word(t2, 5))
			goto err;
		g = 3;
#endif
@


1.12
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dh_gen.c,v 1.11 2014/06/12 15:49:28 deraadt Exp $ */
d65 1
a65 1
#include "cryptlib.h"
d68 1
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d69 2
a70 1
static int dh_builtin_genparams(DH *ret, int prime_len, int generator, BN_GENCB *cb);
d72 4
a75 3
int DH_generate_parameters_ex(DH *ret, int prime_len, int generator, BN_GENCB *cb)
	{
	if(ret->meth->generate_params)
d78 1
a78 1
	}
d80 2
a81 1
/* We generate DH parameters as follows
d106 6
a111 5
static int dh_builtin_genparams(DH *ret, int prime_len, int generator, BN_GENCB *cb)
	{
	BIGNUM *t1,*t2;
	int g,ok= -1;
	BN_CTX *ctx=NULL;
d113 3
a115 2
	ctx=BN_CTX_new();
	if (ctx == NULL) goto err;
d119 2
a120 1
	if (t1 == NULL || t2 == NULL) goto err;
d123 4
a126 2
	if(!ret->p && ((ret->p = BN_new()) == NULL)) goto err;
	if(!ret->g && ((ret->g = BN_new()) == NULL)) goto err;
d128 1
a128 2
	if (generator <= 1)
		{
d131 7
a137 7
		}
	if (generator == DH_GENERATOR_2)
		{
		if (!BN_set_word(t1,24)) goto err;
		if (!BN_set_word(t2,11)) goto err;
		g=2;
		}
d139 6
a144 6
	else if (generator == DH_GENERATOR_3)
		{
		if (!BN_set_word(t1,12)) goto err;
		if (!BN_set_word(t2,5)) goto err;
		g=3;
		}
d146 5
a150 4
	else if (generator == DH_GENERATOR_5)
		{
		if (!BN_set_word(t1,10)) goto err;
		if (!BN_set_word(t2,3)) goto err;
d153 4
a156 5
		g=5;
		}
	else
		{
		/* in the general case, don't worry if 'generator' is a
d159 8
a166 5
		 * which both is OK */
		if (!BN_set_word(t1,2)) goto err;
		if (!BN_set_word(t2,1)) goto err;
		g=generator;
		}
d168 7
a174 4
	if(!BN_generate_prime_ex(ret->p,prime_len,1,t1,t2,cb)) goto err;
	if(!BN_GENCB_call(cb, 3, 0)) goto err;
	if (!BN_set_word(ret->g,g)) goto err;
	ok=1;
d176 4
a179 5
	if (ok == -1)
		{
		DHerr(DH_F_DH_BUILTIN_GENPARAMS,ERR_R_BN_LIB);
		ok=0;
		}
d181 1
a181 2
	if (ctx != NULL)
		{
d184 1
a184 1
		}
d186 1
a186 1
	}
@


1.10
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d1 1
a1 1
/* crypto/dh/dh_gen.c */
@


1.9
log
@resolve conflicts
@
text
@a68 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a72 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(ret->meth->flags & DH_FLAG_FIPS_METHOD)
			&& !(ret->flags & DH_FLAG_NON_FIPS_ALLOW))
		{
		DHerr(DH_F_DH_GENERATE_PARAMETERS_EX, DH_R_NON_FIPS_METHOD);
		return 0;
		}
#endif
a74 5
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		return FIPS_dh_generate_parameters_ex(ret, prime_len,
							generator, cb);
#endif
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d69 4
d77 8
d87 5
@


1.7
log
@resolve conflicts
@
text
@a68 2
#ifndef OPENSSL_FIPS

a175 2

#endif
@


1.6
log
@resolve conflicts
@
text
@d69 2
d178 2
@


1.5
log
@resolve conflicts
@
text
@d59 5
d69 9
d103 1
a103 5

#ifndef OPENSSL_FIPS

DH *DH_generate_parameters(int prime_len, int generator,
	     void (*callback)(int,int,void *), void *cb_arg)
d105 1
a105 2
	BIGNUM *p=NULL,*t1,*t2;
	DH *ret=NULL;
a108 2
	ret=DH_new();
	if (ret == NULL) goto err;
d115 4
d122 1
a122 1
		DHerr(DH_F_DH_GENERATE_PARAMETERS, DH_R_BAD_GENERATOR);
d158 2
a159 6
	p=BN_generate_prime(NULL,prime_len,1,t1,t2,callback,cb_arg);
	if (p == NULL) goto err;
	if (callback != NULL) callback(3,0,cb_arg);
	ret->p=p;
	ret->g=BN_new();
	if (ret->g == NULL) goto err;
d165 1
a165 1
		DHerr(DH_F_DH_GENERATE_PARAMETERS,ERR_R_BN_LIB);
d174 1
a174 6
	if (!ok && (ret != NULL))
		{
		DH_free(ret);
		ret=NULL;
		}
	return(ret);
a175 2

#endif
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d89 3
d152 1
d174 2
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d85 4
a88 1

d106 5
d113 2
a114 2
		BN_set_word(t1,24);
		BN_set_word(t2,11);
d117 1
a117 1
#ifdef undef  /* does not work for safe primes */
d120 2
a121 2
		BN_set_word(t1,12);
		BN_set_word(t2,5);
d127 2
a128 2
		BN_set_word(t1,10);
		BN_set_word(t2,3);
d134 7
d142 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d75 1
a75 1
 * for 3, p mod 12 == 5  <<<<< does not work for strong primes.
d82 1
a82 1
 * Since DH should be using a strong prime (both p and q are prime),
d98 4
a101 3
	t1= &(ctx->bn[0]);
	t2= &(ctx->bn[1]);
	ctx->tos=2;
d109 1
a109 1
#ifdef undef  /* does not work for strong primes */
d142 5
a146 1
	if (ctx != NULL) BN_CTX_free(ctx);
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "bn.h"
#include "dh.h"
d86 2
a87 5
DH *DH_generate_parameters(prime_len,generator,callback,cb_arg)
int prime_len;
int generator;
void (*callback)(P_I_I_P);
char *cb_arg;
d95 1
d98 2
a99 2
	t1=ctx->bn[0];
	t2=ctx->bn[1];
d127 1
a127 1
	p=BN_generate_prime(prime_len,1,t1,t2,callback,cb_arg);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 2
#include <openssl/bn.h>
#include <openssl/dh.h>
d75 1
a75 1
 * for 3, p mod 12 == 5  <<<<< does not work for safe primes.
d82 1
a82 1
 * Since DH should be using a safe prime (both p and q are prime),
d85 6
a90 6
/* Actually there is no reason to insist that 'generator' be a generator.
 * It's just as OK (and in some sense better) to use a generator of the
 * order-q subgroup.
 */
DH *DH_generate_parameters(int prime_len, int generator,
	     void (*callback)(int,int,void *), void *cb_arg)
a97 1
	if (ret == NULL) goto err;
d100 3
a102 4
	BN_CTX_start(ctx);
	t1 = BN_CTX_get(ctx);
	t2 = BN_CTX_get(ctx);
	if (t1 == NULL || t2 == NULL) goto err;
a103 5
	if (generator <= 1)
		{
		DHerr(DH_F_DH_GENERATE_PARAMETERS, DH_R_BAD_GENERATOR);
		goto err;
		}
d106 2
a107 2
		if (!BN_set_word(t1,24)) goto err;
		if (!BN_set_word(t2,11)) goto err;
d110 1
a110 1
#if 0 /* does not work for safe primes */
d113 2
a114 2
		if (!BN_set_word(t1,12)) goto err;
		if (!BN_set_word(t2,5)) goto err;
d120 2
a121 2
		if (!BN_set_word(t1,10)) goto err;
		if (!BN_set_word(t2,3)) goto err;
a126 7
		{
		/* in the general case, don't worry if 'generator' is a
		 * generator or not: since we are using safe primes,
		 * it will generate either an order-q or an order-2q group,
		 * which both is OK */
		if (!BN_set_word(t1,2)) goto err;
		if (!BN_set_word(t2,1)) goto err;
a127 1
		}
d129 1
a129 1
	p=BN_generate_prime(NULL,prime_len,1,t1,t2,callback,cb_arg);
d143 1
a143 5
	if (ctx != NULL)
		{
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
		}
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a88 3

#ifndef OPENSSL_FIPS

a148 1
	if (ret->g == NULL) goto err;
a169 2

#endif
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a58 5
/* NB: These functions have been upgraded - the previous prototypes are in
 * dh_depr.c as wrappers to these ones.
 *  - Geoff
 */

a63 9
static int dh_builtin_genparams(DH *ret, int prime_len, int generator, BN_GENCB *cb);

int DH_generate_parameters_ex(DH *ret, int prime_len, int generator, BN_GENCB *cb)
	{
	if(ret->meth->generate_params)
		return ret->meth->generate_params(ret, prime_len, generator, cb);
	return dh_builtin_genparams(ret, prime_len, generator, cb);
	}

d89 5
a93 1
static int dh_builtin_genparams(DH *ret, int prime_len, int generator, BN_GENCB *cb)
d95 2
a96 1
	BIGNUM *t1,*t2;
d100 2
a107 4

	/* Make sure 'ret' has the necessary elements */
	if(!ret->p && ((ret->p = BN_new()) == NULL)) goto err;
	if(!ret->g && ((ret->g = BN_new()) == NULL)) goto err;
d111 1
a111 1
		DHerr(DH_F_DH_BUILTIN_GENPARAMS, DH_R_BAD_GENERATOR);
d147 6
a152 2
	if(!BN_generate_prime_ex(ret->p,prime_len,1,t1,t2,cb)) goto err;
	if(!BN_GENCB_call(cb, 3, 0)) goto err;
d158 1
a158 1
		DHerr(DH_F_DH_BUILTIN_GENPARAMS,ERR_R_BN_LIB);
d167 6
a172 1
	return ok;
d174 2
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@a68 2
#ifndef OPENSSL_FIPS

a175 2

#endif
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d69 2
d178 2
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@a68 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a72 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(ret->meth->flags & DH_FLAG_FIPS_METHOD)
			&& !(ret->flags & DH_FLAG_NON_FIPS_ALLOW))
		{
		DHerr(DH_F_DH_GENERATE_PARAMETERS_EX, DH_R_NON_FIPS_METHOD);
		return 0;
		}
#endif
a74 5
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		return FIPS_dh_generate_parameters_ex(ret, prime_len,
							generator, cb);
#endif
@


