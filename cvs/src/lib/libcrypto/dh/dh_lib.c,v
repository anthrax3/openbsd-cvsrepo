head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.2
	OPENBSD_6_1_BASE:1.22;
locks; strict;
comment	@ * @;


1.22
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.20;
commitid	5KSZBoxiLebzObKt;

1.20
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.19;
commitid	G74O1dmRukKsW7IJ;

1.19
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.18;
commitid	yQEL1wOWIearrW15;

1.18
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.17;
commitid	nzndm3zqPmFurSaK;

1.17
date	2014.07.09.13.26.47;	author miod;	state Exp;
branches;
next	1.16;
commitid	g5VUmsrdRHmu7cCJ;

1.16
date	2014.07.09.11.10.50;	author bcook;	state Exp;
branches;
next	1.15;
commitid	lHJTcoC4c5BhEOGj;

1.15
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	2nvnQBrv22dLtvTt;

1.13
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.07;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.30;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.01;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.04;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.15;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.03;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: dh_lib.c,v 1.21 2015/02/11 03:19:37 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/err.h>

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

static const DH_METHOD *default_DH_method = NULL;

void
DH_set_default_method(const DH_METHOD *meth)
{
	default_DH_method = meth;
}

const DH_METHOD *
DH_get_default_method(void)
{
	if (!default_DH_method)
		default_DH_method = DH_OpenSSL();
	return default_DH_method;
}

int
DH_set_method(DH *dh, const DH_METHOD *meth)
{
	/*
	 * NB: The caller is specifically setting a method, so it's not up to us
	 * to deal with which ENGINE it comes from.
	 */
        const DH_METHOD *mtmp;

        mtmp = dh->meth;
        if (mtmp->finish)
		mtmp->finish(dh);
#ifndef OPENSSL_NO_ENGINE
	if (dh->engine) {
		ENGINE_finish(dh->engine);
		dh->engine = NULL;
	}
#endif
        dh->meth = meth;
        if (meth->init)
		meth->init(dh);
        return 1;
}

DH *
DH_new(void)
{
	return DH_new_method(NULL);
}

DH *
DH_new_method(ENGINE *engine)
{
	DH *ret;

	ret = malloc(sizeof(DH));
	if (ret == NULL) {
		DHerror(ERR_R_MALLOC_FAILURE);
		return NULL;
	}

	ret->meth = DH_get_default_method();
#ifndef OPENSSL_NO_ENGINE
	if (engine) {
		if (!ENGINE_init(engine)) {
			DHerror(ERR_R_ENGINE_LIB);
			free(ret);
			return NULL;
		}
		ret->engine = engine;
	} else
		ret->engine = ENGINE_get_default_DH();
	if(ret->engine) {
		ret->meth = ENGINE_get_DH(ret->engine);
		if (!ret->meth) {
			DHerror(ERR_R_ENGINE_LIB);
			ENGINE_finish(ret->engine);
			free(ret);
			return NULL;
		}
	}
#endif

	ret->pad = 0;
	ret->version = 0;
	ret->p = NULL;
	ret->g = NULL;
	ret->length = 0;
	ret->pub_key = NULL;
	ret->priv_key = NULL;
	ret->q = NULL;
	ret->j = NULL;
	ret->seed = NULL;
	ret->seedlen = 0;
	ret->counter = NULL;
	ret->method_mont_p=NULL;
	ret->references = 1;
	ret->flags = ret->meth->flags & ~DH_FLAG_NON_FIPS_ALLOW;
	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_DH, ret, &ret->ex_data);
	if (ret->meth->init != NULL && !ret->meth->init(ret)) {
#ifndef OPENSSL_NO_ENGINE
		if (ret->engine)
			ENGINE_finish(ret->engine);
#endif
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_DH, ret, &ret->ex_data);
		free(ret);
		ret = NULL;
	}
	return ret;
}

void
DH_free(DH *r)
{
	int i;

	if (r == NULL)
		return;
	i = CRYPTO_add(&r->references, -1, CRYPTO_LOCK_DH);
	if (i > 0)
		return;

	if (r->meth->finish)
		r->meth->finish(r);
#ifndef OPENSSL_NO_ENGINE
	if (r->engine)
		ENGINE_finish(r->engine);
#endif

	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_DH, r, &r->ex_data);

	BN_clear_free(r->p);
	BN_clear_free(r->g);
	BN_clear_free(r->q);
	BN_clear_free(r->j);
	free(r->seed);
	BN_clear_free(r->counter);
	BN_clear_free(r->pub_key);
	BN_clear_free(r->priv_key);
	free(r);
}

int
DH_up_ref(DH *r)
{
	int i = CRYPTO_add(&r->references, 1, CRYPTO_LOCK_DH);

	return i > 1 ? 1 : 0;
}

int
DH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
    CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DH, argl, argp, new_func,
	    dup_func, free_func);
}

int
DH_set_ex_data(DH *d, int idx, void *arg)
{
	return CRYPTO_set_ex_data(&d->ex_data, idx, arg);
}

void *
DH_get_ex_data(DH *d, int idx)
{
	return CRYPTO_get_ex_data(&d->ex_data, idx);
}

int
DH_size(const DH *dh)
{
	return BN_num_bytes(dh->p);
}
@


1.21
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_lib.c,v 1.20 2014/07/12 16:03:37 miod Exp $ */
d124 1
a124 1
		DHerr(DH_F_DH_NEW_METHOD, ERR_R_MALLOC_FAILURE);
d132 1
a132 1
			DHerr(DH_F_DH_NEW_METHOD, ERR_R_ENGINE_LIB);
d142 1
a142 1
			DHerr(DH_F_DH_NEW_METHOD, ERR_R_ENGINE_LIB);
@


1.20
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_lib.c,v 1.19 2014/07/11 08:44:48 jsing Exp $ */
d65 1
@


1.19
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_lib.c,v 1.18 2014/07/10 22:45:56 jsing Exp $ */
d197 4
a200 8
	if (r->p != NULL)
		BN_clear_free(r->p);
	if (r->g != NULL)
		BN_clear_free(r->g);
	if (r->q != NULL)
		BN_clear_free(r->q);
	if (r->j != NULL)
		BN_clear_free(r->j);
d202 3
a204 6
	if (r->counter != NULL)
		BN_clear_free(r->counter);
	if (r->pub_key != NULL)
		BN_clear_free(r->pub_key);
	if (r->priv_key != NULL)
		BN_clear_free(r->priv_key);
@


1.18
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: dh_lib.c,v 1.17 2014/07/09 13:26:47 miod Exp $ */
a62 1
#include "cryptlib.h"
d65 1
@


1.17
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dh_lib.c,v 1.16 2014/07/09 11:10:50 bcook Exp $ */
d60 3
@


1.16
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_lib.c,v 1.15 2014/06/12 15:49:28 deraadt Exp $ */
d69 3
a71 2
void DH_set_default_method(const DH_METHOD *meth)
	{
d73 1
a73 1
	}
d75 4
a78 4
const DH_METHOD *DH_get_default_method(void)
	{
	if(!default_DH_method)
		{
a79 1
		}
d81 1
a81 1
	}
d83 7
a89 4
int DH_set_method(DH *dh, const DH_METHOD *meth)
	{
	/* NB: The caller is specifically setting a method, so it's not up to us
	 * to deal with which ENGINE it comes from. */
d91 1
d93 2
a94 1
        if (mtmp->finish) mtmp->finish(dh);
d96 1
a96 2
	if (dh->engine)
		{
d99 1
a99 1
		}
d102 2
a103 1
        if (meth->init) meth->init(dh);
d105 1
a105 1
	}
d107 3
a109 2
DH *DH_new(void)
	{
d111 1
a111 1
	}
d113 3
a115 2
DH *DH_new_method(ENGINE *engine)
	{
d119 4
a122 5
	if (ret == NULL)
		{
		DHerr(DH_F_DH_NEW_METHOD,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
d126 2
a127 4
	if (engine)
		{
		if (!ENGINE_init(engine))
			{
d131 1
a131 1
			}
d133 1
a133 2
		}
	else
d135 1
a135 2
	if(ret->engine)
		{
d137 2
a138 3
		if(!ret->meth)
			{
			DHerr(DH_F_DH_NEW_METHOD,ERR_R_ENGINE_LIB);
a141 1
			}
d143 1
d146 9
a154 9
	ret->pad=0;
	ret->version=0;
	ret->p=NULL;
	ret->g=NULL;
	ret->length=0;
	ret->pub_key=NULL;
	ret->priv_key=NULL;
	ret->q=NULL;
	ret->j=NULL;
d160 1
a160 1
	ret->flags=ret->meth->flags & ~DH_FLAG_NON_FIPS_ALLOW;
d162 1
a162 2
	if ((ret->meth->init != NULL) && !ret->meth->init(ret))
		{
d169 1
a169 3
		ret=NULL;
		}
	return(ret);
d171 2
d174 3
a176 2
void DH_free(DH *r)
	{
d178 3
a180 1
	if(r == NULL) return;
d182 2
a183 1
	if (i > 0) return;
d194 8
a201 4
	if (r->p != NULL) BN_clear_free(r->p);
	if (r->g != NULL) BN_clear_free(r->g);
	if (r->q != NULL) BN_clear_free(r->q);
	if (r->j != NULL) BN_clear_free(r->j);
d203 6
a208 3
	if (r->counter != NULL) BN_clear_free(r->counter);
	if (r->pub_key != NULL) BN_clear_free(r->pub_key);
	if (r->priv_key != NULL) BN_clear_free(r->priv_key);
d210 1
a210 1
	}
d212 3
a214 2
int DH_up_ref(DH *r)
	{
a215 2
	return ((i > 1) ? 1 : 0);
	}
d217 2
a218 11
int DH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
        {
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DH, argl, argp,
				new_func, dup_func, free_func);
        }

int DH_set_ex_data(DH *d, int idx, void *arg)
	{
	return(CRYPTO_set_ex_data(&d->ex_data,idx,arg));
	}
d220 25
a244 9
void *DH_get_ex_data(DH *d, int idx)
	{
	return(CRYPTO_get_ex_data(&d->ex_data,idx));
	}

int DH_size(const DH *dh)
	{
	return(BN_num_bytes(dh->p));
	}
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a65 2

const char DH_version[]="Diffie-Hellman" OPENSSL_VERSION_PTEXT;
@


1.14
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/dh/dh_lib.c */
@


1.13
log
@no need for null check before free. from Brendan MacDonell
@
text
@d113 1
a113 1
	ret=(DH *)malloc(sizeof(DH));
@


1.12
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d196 1
a196 1
	if (r->seed) free(r->seed);
@


1.11
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a180 3
#ifdef REF_PRINT
	REF_PRINT("DH",r);
#endif
a181 7
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"DH_free, bad reference count\n");
		abort();
	}
#endif
a205 10
#ifdef REF_PRINT
	REF_PRINT("DH",r);
#endif
#ifdef REF_CHECK
	if (i < 2)
		{
		fprintf(stderr, "DH_up, bad reference count\n");
		abort();
		}
#endif
@


1.10
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d113 1
a113 1
	ret=(DH *)OPENSSL_malloc(sizeof(DH));
d127 1
a127 1
			OPENSSL_free(ret);
d141 1
a141 1
			OPENSSL_free(ret);
d170 1
a170 1
		OPENSSL_free(ret);
d206 1
a206 1
	if (r->seed) OPENSSL_free(r->seed);
d210 1
a210 1
	OPENSSL_free(r);
@


1.9
log
@resolve conflicts
@
text
@a66 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a79 6
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
			return FIPS_dh_openssl();
		else
			return DH_OpenSSL();
#else
a80 1
#endif
@


1.8
log
@resolve conflicts
@
text
@d67 4
d83 7
d91 2
d172 1
a172 1
	ret->flags=ret->meth->flags;
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d67 1
a67 1
const char *DH_version="Diffie-Hellman" OPENSSL_VERSION_PTEXT;
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d63 1
d65 1
d90 1
d96 1
d119 1
d143 1
d163 1
d166 1
d193 1
d196 1
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d67 6
a72 22
static DH_METHOD *default_DH_method;
static int dh_meth_num = 0;
static STACK_OF(CRYPTO_EX_DATA_FUNCS) *dh_meth = NULL;

void DH_set_default_openssl_method(DH_METHOD *meth)
{
	ENGINE *e;
	/* We'll need to notify the "openssl" ENGINE of this
	 * change too. We won't bother locking things down at
	 * our end as there was never any locking in these
	 * functions! */
	if(default_DH_method != meth)
		{
		default_DH_method = meth;
		e = ENGINE_by_id("openssl");
		if(e)
			{
			ENGINE_set_DH(e, meth);
			ENGINE_free(e);
			}
		}
}
d74 4
a77 3
DH_METHOD *DH_get_default_openssl_method(void)
{
	if(!default_DH_method) default_DH_method = DH_OpenSSL();
d79 1
a79 1
}
d81 5
a85 4
#if 0
DH_METHOD *DH_set_method(DH *dh, DH_METHOD *meth)
{
        DH_METHOD *mtmp;
d88 5
d95 2
a96 20
        return mtmp;
}
#else
int DH_set_method(DH *dh, ENGINE *engine)
{
	ENGINE *mtmp;
	DH_METHOD *meth;
	mtmp = dh->engine;
	meth = ENGINE_get_DH(mtmp);
	if (!ENGINE_init(engine))
		return 0;
	if (meth->finish) meth->finish(dh);
	dh->engine= engine;
	meth = ENGINE_get_DH(engine);
	if (meth->init) meth->init(dh);
	/* SHOULD ERROR CHECK THIS!!! */
	ENGINE_finish(mtmp);
	return 1;
}
#endif
d99 1
a99 1
{
d101 1
a101 1
}
a102 3
#if 0
DH *DH_new_method(DH_METHOD *meth)
#else
a103 1
#endif
a104 1
	DH_METHOD *meth;
d106 1
a107 1

d110 1
a110 1
		DHerr(DH_F_DH_NEW,ERR_R_MALLOC_FAILURE);
d113 10
a122 1
	if(engine)
d124 1
d126 2
d129 2
a130 1
		if((ret->engine=ENGINE_get_default_DH()) == NULL)
d132 2
d138 1
a138 1
	meth = ENGINE_get_DH(ret->engine);
d153 3
a155 3
	ret->flags=meth->flags;
	CRYPTO_new_ex_data(dh_meth,ret,&ret->ex_data);
	if ((meth->init != NULL) && !meth->init(ret))
d157 3
a159 1
		CRYPTO_free_ex_data(dh_meth,ret,&ret->ex_data);
a167 1
	DH_METHOD *meth;
d183 4
a186 3
	meth = ENGINE_get_DH(r->engine);
	if(meth->finish) meth->finish(r);
	ENGINE_finish(r->engine);
d188 1
a188 1
	CRYPTO_free_ex_data(dh_meth, r, &r->ex_data);
d201 16
d220 2
a221 3
	dh_meth_num++;
	return(CRYPTO_get_ex_new_index(dh_meth_num-1,
		&dh_meth,argl,argp,new_func,dup_func,free_func));
d234 1
a234 1
int DH_size(DH *dh)
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d171 1
d174 1
a177 2
	else
		CRYPTO_new_ex_data(dh_meth,ret,&ret->ex_data);
a198 2
	CRYPTO_free_ex_data(dh_meth, r, &r->ex_data);

d202 2
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d63 1
d71 1
a71 1
void DH_set_default_method(DH_METHOD *meth)
d73 15
a87 1
	default_DH_method = meth;
d90 1
a90 1
DH_METHOD *DH_get_default_method(void)
d96 1
d106 18
d130 1
d132 3
d136 1
d138 1
a138 1
	ret=(DH *)Malloc(sizeof(DH));
d145 11
a155 3
	if(!default_DH_method) default_DH_method = DH_OpenSSL();
	if(meth) ret->meth = meth;
	else ret->meth = default_DH_method;
d170 2
a171 2
	ret->flags=ret->meth->flags;
	if ((ret->meth->init != NULL) && !ret->meth->init(ret))
d173 1
a173 1
		Free(ret);
d183 1
d201 3
a203 1
	if(r->meth->finish) r->meth->finish(r);
d209 1
a209 1
	if (r->seed) Free(r->seed);
d213 1
a213 1
	Free(r);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d66 25
d92 5
d99 1
a100 1
	ret=(DH *)Malloc(sizeof(DH));
d106 3
d116 5
a120 1
	ret->flags=DH_FLAG_CACHE_MONT_P;
d122 9
d136 1
d138 17
d157 4
a162 2
	if (r->method_mont_p != NULL)
		BN_MONT_CTX_free((BN_MONT_CTX *)r->method_mont_p);
d164 18
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "bn.h"
#include "dh.h"
d64 1
a64 1
char *DH_version="Diffie-Hellman part of SSLeay 0.9.0b 29-Jun-1998";
d66 1
a66 1
DH *DH_new()
d83 2
d88 1
a88 2
void DH_free(r)
DH *r;
d90 1
d95 2
d100 1
a100 2
int DH_size(dh)
DH *dh;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 3
#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/engine.h>
d64 1
a64 1
const char *DH_version="Diffie-Hellman" OPENSSL_VERSION_PTEXT;
d66 1
a66 37
static const DH_METHOD *default_DH_method = NULL;

void DH_set_default_method(const DH_METHOD *meth)
	{
	default_DH_method = meth;
	}

const DH_METHOD *DH_get_default_method(void)
	{
	if(!default_DH_method)
		default_DH_method = DH_OpenSSL();
	return default_DH_method;
	}

int DH_set_method(DH *dh, const DH_METHOD *meth)
	{
	/* NB: The caller is specifically setting a method, so it's not up to us
	 * to deal with which ENGINE it comes from. */
        const DH_METHOD *mtmp;
        mtmp = dh->meth;
        if (mtmp->finish) mtmp->finish(dh);
	if (dh->engine)
		{
		ENGINE_finish(dh->engine);
		dh->engine = NULL;
		}
        dh->meth = meth;
        if (meth->init) meth->init(dh);
        return 1;
	}

DH *DH_new(void)
	{
	return DH_new_method(NULL);
	}

DH *DH_new_method(ENGINE *engine)
d70 1
a70 1
	ret=(DH *)OPENSSL_malloc(sizeof(DH));
d73 1
a73 1
		DHerr(DH_F_DH_NEW_METHOD,ERR_R_MALLOC_FAILURE);
a75 26

	ret->meth = DH_get_default_method();
	if (engine)
		{
		if (!ENGINE_init(engine))
			{
			DHerr(DH_F_DH_NEW_METHOD, ERR_R_ENGINE_LIB);
			OPENSSL_free(ret);
			return NULL;
			}
		ret->engine = engine;
		}
	else
		ret->engine = ENGINE_get_default_DH();
	if(ret->engine)
		{
		ret->meth = ENGINE_get_DH(ret->engine);
		if(!ret->meth)
			{
			DHerr(DH_F_DH_NEW_METHOD,ERR_R_ENGINE_LIB);
			ENGINE_finish(ret->engine);
			OPENSSL_free(ret);
			return NULL;
			}
		}

a82 17
	ret->q=NULL;
	ret->j=NULL;
	ret->seed = NULL;
	ret->seedlen = 0;
	ret->counter = NULL;
	ret->method_mont_p=NULL;
	ret->references = 1;
	ret->flags=ret->meth->flags;
	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_DH, ret, &ret->ex_data);
	if ((ret->meth->init != NULL) && !ret->meth->init(ret))
		{
		if (ret->engine)
			ENGINE_finish(ret->engine);
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_DH, ret, &ret->ex_data);
		OPENSSL_free(ret);
		ret=NULL;
		}
d86 2
a87 1
void DH_free(DH *r)
a88 22
	int i;
	if(r == NULL) return;
	i = CRYPTO_add(&r->references, -1, CRYPTO_LOCK_DH);
#ifdef REF_PRINT
	REF_PRINT("DH",r);
#endif
	if (i > 0) return;
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"DH_free, bad reference count\n");
		abort();
	}
#endif

	if (r->meth->finish)
		r->meth->finish(r);
	if (r->engine)
		ENGINE_finish(r->engine);

	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_DH, r, &r->ex_data);

a90 4
	if (r->q != NULL) BN_clear_free(r->q);
	if (r->j != NULL) BN_clear_free(r->j);
	if (r->seed) OPENSSL_free(r->seed);
	if (r->counter != NULL) BN_clear_free(r->counter);
d93 1
a93 34
	OPENSSL_free(r);
	}

int DH_up_ref(DH *r)
	{
	int i = CRYPTO_add(&r->references, 1, CRYPTO_LOCK_DH);
#ifdef REF_PRINT
	REF_PRINT("DH",r);
#endif
#ifdef REF_CHECK
	if (i < 2)
		{
		fprintf(stderr, "DH_up, bad reference count\n");
		abort();
		}
#endif
	return ((i > 1) ? 1 : 0);
	}

int DH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
        {
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DH, argl, argp,
				new_func, dup_func, free_func);
        }

int DH_set_ex_data(DH *d, int idx, void *arg)
	{
	return(CRYPTO_set_ex_data(&d->ex_data,idx,arg));
	}

void *DH_get_ex_data(DH *d, int idx)
	{
	return(CRYPTO_get_ex_data(&d->ex_data,idx));
d96 2
a97 1
int DH_size(const DH *dh)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a62 1
#ifndef OPENSSL_NO_ENGINE
a63 1
#endif
a87 1
#ifndef OPENSSL_NO_ENGINE
a92 1
#endif
a114 1
#ifndef OPENSSL_NO_ENGINE
a137 1
#endif
a156 1
#ifndef OPENSSL_NO_ENGINE
a158 1
#endif
a184 1
#ifndef OPENSSL_NO_ENGINE
a186 1
#endif
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d67 1
a67 1
const char DH_version[]="Diffie-Hellman" OPENSSL_VERSION_PTEXT;
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@a66 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a78 7
		{
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
			return FIPS_dh_openssl();
		else
			return DH_OpenSSL();
#else
a79 2
#endif
		}
d159 1
a159 1
	ret->flags=ret->meth->flags & ~DH_FLAG_NON_FIPS_ALLOW;
@


