head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.6
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27;
locks; strict;
comment	@ * @;


1.27
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.26;
commitid	kT0fLt3r4lroFJra;

1.26
date	2017.01.21.09.38.58;	author beck;	state Exp;
branches;
next	1.25;
commitid	iyR9b2itDMsxzmrQ;

1.25
date	2016.07.07.11.53.12;	author bcook;	state Exp;
branches;
next	1.24;
commitid	eavwKDwtZUNQRWCp;

1.24
date	2016.06.30.02.02.06;	author bcook;	state Exp;
branches;
next	1.23;
commitid	NoRqiDVUjRmOOT9v;

1.23
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.22;
commitid	69Tc75PIK8JcRRsC;

1.22
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.21;
commitid	8tb4v3IC8S2vzfHj;

1.21
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.20;
commitid	G74O1dmRukKsW7IJ;

1.20
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.19;
commitid	yQEL1wOWIearrW15;

1.19
date	2014.07.09.13.26.47;	author miod;	state Exp;
branches;
next	1.18;
commitid	g5VUmsrdRHmu7cCJ;

1.18
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.09.12.15.41;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.04.07.10.32;	author pvalchev;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2006.05.04.14.19.08;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.29.05.39.20;	author djm;	state Exp;
branches
	1.8.2.1
	1.8.4.1;
next	1.7;

1.7
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.07;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.30;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.01;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.04;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.15;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.03;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.08;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.06.27.05.05.32;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.01.09.12.13.54;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;

1.8.2.1
date	2006.10.05.18.42.22;	author brad;	state Exp;
branches;
next	;

1.8.4.1
date	2006.10.05.17.36.24;	author brad;	state Exp;
branches;
next	;

1.10.2.1
date	2006.11.02.19.56.23;	author brad;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: dh_key.c,v 1.26 2017/01/21 09:38:58 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/err.h>

#include "bn_lcl.h"

static int generate_key(DH *dh);
static int compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
static int dh_bn_mod_exp(const DH *dh, BIGNUM *r, const BIGNUM *a,
	    const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
static int dh_init(DH *dh);
static int dh_finish(DH *dh);

int
DH_generate_key(DH *dh)
{
	return dh->meth->generate_key(dh);
}

int
DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
{
	return dh->meth->compute_key(key, pub_key, dh);
}

static DH_METHOD dh_ossl = {
	.name = "OpenSSL DH Method",
	.generate_key = generate_key,
	.compute_key = compute_key,
	.bn_mod_exp = dh_bn_mod_exp,
	.init = dh_init,
	.finish = dh_finish,
};

const DH_METHOD *
DH_OpenSSL(void)
{
	return &dh_ossl;
}

static int
generate_key(DH *dh)
{
	int ok = 0;
	int generate_new_key = 0;
	unsigned l;
	BN_CTX *ctx;
	BN_MONT_CTX *mont = NULL;
	BIGNUM *pub_key = NULL, *priv_key = NULL;

	ctx = BN_CTX_new();
	if (ctx == NULL)
		goto err;

	if (dh->priv_key == NULL) {
		priv_key = BN_new();
		if (priv_key == NULL)
			goto err;
		generate_new_key = 1;
	} else
		priv_key = dh->priv_key;

	if (dh->pub_key == NULL) {
		pub_key = BN_new();
		if (pub_key == NULL)
			goto err;
	} else
		pub_key = dh->pub_key;

	if (dh->flags & DH_FLAG_CACHE_MONT_P) {
		mont = BN_MONT_CTX_set_locked(&dh->method_mont_p,
		    CRYPTO_LOCK_DH, dh->p, ctx);
		if (!mont)
			goto err;
	}

	if (generate_new_key) {
		if (dh->q) {
			do {
				if (!BN_rand_range(priv_key, dh->q))
					goto err;
			} while (BN_is_zero(priv_key) || BN_is_one(priv_key));
		} else {
			/* secret exponent length */
			l = dh->length ? dh->length : BN_num_bits(dh->p) - 1;
			if (!BN_rand(priv_key, l, 0, 0))
				goto err;
		}
	}

	{
		BIGNUM prk;

		BN_init(&prk);
		BN_with_flags(&prk, priv_key, BN_FLG_CONSTTIME);

		if (!dh->meth->bn_mod_exp(dh, pub_key, dh->g, &prk, dh->p, ctx,
		    mont)) {
			goto err;
		}
	}

	dh->pub_key = pub_key;
	dh->priv_key = priv_key;
	ok = 1;
err:
	if (ok != 1)
		DHerror(ERR_R_BN_LIB);

	if (pub_key != NULL && dh->pub_key == NULL)
		BN_free(pub_key);
	if (priv_key != NULL && dh->priv_key == NULL)
		BN_free(priv_key);
	BN_CTX_free(ctx);
	return ok;
}

static int
compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
{
	BN_CTX *ctx = NULL;
	BN_MONT_CTX *mont = NULL;
	BIGNUM *tmp;
	int ret = -1;
        int check_result;

	if (BN_num_bits(dh->p) > OPENSSL_DH_MAX_MODULUS_BITS) {
		DHerror(DH_R_MODULUS_TOO_LARGE);
		goto err;
	}

	ctx = BN_CTX_new();
	if (ctx == NULL)
		goto err;
	BN_CTX_start(ctx);
	if ((tmp = BN_CTX_get(ctx)) == NULL)
		goto err;
	
	if (dh->priv_key == NULL) {
		DHerror(DH_R_NO_PRIVATE_VALUE);
		goto err;
	}

	if (dh->flags & DH_FLAG_CACHE_MONT_P) {
		mont = BN_MONT_CTX_set_locked(&dh->method_mont_p,
		    CRYPTO_LOCK_DH, dh->p, ctx);

		BN_set_flags(dh->priv_key, BN_FLG_CONSTTIME);

		if (!mont)
			goto err;
	}

        if (!DH_check_pub_key(dh, pub_key, &check_result) || check_result) {
		DHerror(DH_R_INVALID_PUBKEY);
		goto err;
	}

	if (!dh->meth->bn_mod_exp(dh, tmp, pub_key, dh->priv_key, dh->p, ctx,
	    mont)) {
		DHerror(ERR_R_BN_LIB);
		goto err;
	}

	ret = BN_bn2bin(tmp, key);
err:
	if (ctx != NULL) {
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
	}
	return ret;
}

static int
dh_bn_mod_exp(const DH *dh, BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
    const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)
{
	return BN_mod_exp_mont_ct(r, a, p, m, ctx, m_ctx);
}

static int
dh_init(DH *dh)
{
	dh->flags |= DH_FLAG_CACHE_MONT_P;
	return 1;
}

static int
dh_finish(DH *dh)
{
	BN_MONT_CTX_free(dh->method_mont_p);
	return 1;
}
@


1.26
log
@Make explicit _ct and _nonct versions of bn_mod_exp funcitons that
matter for constant time, and make the public interface only used
external to the library.

This moves us to a model where the important things are constant time
versions unless you ask for them not to be, rather than the opposite.
I'll continue with this method by method.

Add regress tests for same.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_key.c,v 1.25 2016/07/07 11:53:12 bcook Exp $ */
d168 1
a168 1
		DHerr(DH_F_GENERATE_KEY, ERR_R_BN_LIB);
d188 1
a188 1
		DHerr(DH_F_COMPUTE_KEY, DH_R_MODULUS_TOO_LARGE);
d200 1
a200 1
		DHerr(DH_F_COMPUTE_KEY, DH_R_NO_PRIVATE_VALUE);
d215 1
a215 1
		DHerr(DH_F_COMPUTE_KEY, DH_R_INVALID_PUBKEY);
d221 1
a221 1
		DHerr(DH_F_COMPUTE_KEY, ERR_R_BN_LIB);
@


1.25
log
@call BN_init on temporaries to avoid use-before-set warnings

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_key.c,v 1.24 2016/06/30 02:02:06 bcook Exp $ */
d65 2
d238 1
a238 1
	return BN_mod_exp_mont(r, a, p, m, ctx, m_ctx);
@


1.24
log
@Remove flags for disabling constant-time operations.

This removes support for DSA_FLAG_NO_EXP_CONSTTIME, DH_FLAG_NO_EXP_CONSTTIME,
and RSA_FLAG_NO_CONSTTIME flags, making all of these operations unconditionally
constant-time.

Based on the original patch by César Pereid.  ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_key.c,v 1.23 2015/02/09 15:49:22 jsing Exp $ */
d152 1
@


1.23
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_key.c,v 1.22 2014/10/18 17:20:40 jsing Exp $ */
d150 1
a150 2
		BIGNUM local_prk;
		BIGNUM *prk;
d152 1
a152 6
		if ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) == 0) {
			BN_init(&local_prk);
			prk = &local_prk;
			BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);
		} else
			prk = priv_key;
d154 2
a155 2
		if (!dh->meth->bn_mod_exp(dh, pub_key, dh->g, prk, dh->p, ctx,
		    mont))
d157 1
d159 1
a159 1
		
d204 3
a206 4
		if ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) == 0) {
			/* XXX */
			BN_set_flags(dh->priv_key, BN_FLG_CONSTTIME);
		}
d235 1
a235 10
	/*
	 * If a is only one word long and constant time is false, use the faster
	 * exponenentiation function.
	 */
	if (a->top == 1 && (dh->flags & DH_FLAG_NO_EXP_CONSTTIME) != 0) {
		BN_ULONG A = a->d[0];

		return BN_mod_exp_mont_word(r, A, p, m, ctx, m_ctx);
	} else
		return BN_mod_exp_mont(r, a, p, m, ctx, m_ctx);
@


1.22
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: dh_key.c,v 1.21 2014/07/12 16:03:37 miod Exp $ */
d198 2
a199 1
	tmp = BN_CTX_get(ctx);
@


1.21
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_key.c,v 1.20 2014/07/11 08:44:48 jsing Exp $ */
a63 1
#include <openssl/rand.h>
@


1.20
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dh_key.c,v 1.19 2014/07/09 13:26:47 miod Exp $ */
d263 1
a263 2
	if (dh->method_mont_p)
		BN_MONT_CTX_free(dh->method_mont_p);
@


1.19
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dh_key.c,v 1.18 2014/06/12 15:49:28 deraadt Exp $ */
d60 1
a60 1
#include "cryptlib.h"
d62 2
a64 1
#include <openssl/dh.h>
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d67 2
a68 4
static int dh_bn_mod_exp(const DH *dh, BIGNUM *r,
			const BIGNUM *a, const BIGNUM *p,
			const BIGNUM *m, BN_CTX *ctx,
			BN_MONT_CTX *m_ctx);
d72 3
a74 2
int DH_generate_key(DH *dh)
	{
d76 1
a76 1
	}
d78 3
a80 2
int DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
	{
d82 1
a82 1
	}
d93 2
a94 1
const DH_METHOD *DH_OpenSSL(void)
d99 5
a103 4
static int generate_key(DH *dh)
	{
	int ok=0;
	int generate_new_key=0;
d106 2
a107 2
	BN_MONT_CTX *mont=NULL;
	BIGNUM *pub_key=NULL,*priv_key=NULL;
d110 2
a111 18
	if (ctx == NULL) goto err;

	if (dh->priv_key == NULL)
		{
		priv_key=BN_new();
		if (priv_key == NULL) goto err;
		generate_new_key=1;
		}
	else
		priv_key=dh->priv_key;

	if (dh->pub_key == NULL)
		{
		pub_key=BN_new();
		if (pub_key == NULL) goto err;
		}
	else
		pub_key=dh->pub_key;
d113 14
d128 1
a128 2
	if (dh->flags & DH_FLAG_CACHE_MONT_P)
		{
d130 1
a130 1
				CRYPTO_LOCK_DH, dh->p, ctx);
d133 1
a133 1
		}
d135 3
a137 6
	if (generate_new_key)
		{
		if (dh->q)
			{
			do
				{
d140 2
a141 5
				}
			while (BN_is_zero(priv_key) || BN_is_one(priv_key));
			}
		else
			{
d143 3
a145 3
			l = dh->length ? dh->length : BN_num_bits(dh->p)-1;
			if (!BN_rand(priv_key, l, 0, 0)) goto err;
			}
d147 1
d153 1
a153 2
		if ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) == 0)
			{
d157 1
a157 2
			}
		else
d160 3
a162 1
		if (!dh->meth->bn_mod_exp(dh, pub_key, dh->g, prk, dh->p, ctx, mont)) goto err;
d165 3
a167 3
	dh->pub_key=pub_key;
	dh->priv_key=priv_key;
	ok=1;
d170 1
a170 1
		DHerr(DH_F_GENERATE_KEY,ERR_R_BN_LIB);
d172 4
a175 2
	if ((pub_key != NULL)  && (dh->pub_key == NULL))  BN_free(pub_key);
	if ((priv_key != NULL) && (dh->priv_key == NULL)) BN_free(priv_key);
d177 2
a178 2
	return(ok);
	}
d180 5
a184 4
static int compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
	{
	BN_CTX *ctx=NULL;
	BN_MONT_CTX *mont=NULL;
d186 1
a186 1
	int ret= -1;
d189 2
a190 3
	if (BN_num_bits(dh->p) > OPENSSL_DH_MAX_MODULUS_BITS)
		{
		DHerr(DH_F_COMPUTE_KEY,DH_R_MODULUS_TOO_LARGE);
d192 1
a192 1
		}
d195 2
a196 1
	if (ctx == NULL) goto err;
d200 2
a201 3
	if (dh->priv_key == NULL)
		{
		DHerr(DH_F_COMPUTE_KEY,DH_R_NO_PRIVATE_VALUE);
d203 1
a203 1
		}
d205 1
a205 2
	if (dh->flags & DH_FLAG_CACHE_MONT_P)
		{
d207 2
a208 3
				CRYPTO_LOCK_DH, dh->p, ctx);
		if ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) == 0)
			{
d211 1
a211 1
			}
d214 1
a214 1
		}
d216 2
a217 3
        if (!DH_check_pub_key(dh, pub_key, &check_result) || check_result)
		{
		DHerr(DH_F_COMPUTE_KEY,DH_R_INVALID_PUBKEY);
d219 1
a219 1
		}
d221 3
a223 3
	if (!dh->meth->bn_mod_exp(dh, tmp, pub_key, dh->priv_key,dh->p,ctx,mont))
		{
		DHerr(DH_F_COMPUTE_KEY,ERR_R_BN_LIB);
d225 1
a225 1
		}
d227 1
a227 1
	ret=BN_bn2bin(tmp,key);
d229 1
a229 2
	if (ctx != NULL)
		{
a231 2
		}
	return(ret);
d233 2
d236 6
a241 6
static int dh_bn_mod_exp(const DH *dh, BIGNUM *r,
			const BIGNUM *a, const BIGNUM *p,
			const BIGNUM *m, BN_CTX *ctx,
			BN_MONT_CTX *m_ctx)
	{
	/* If a is only one word long and constant time is false, use the faster
d244 1
a244 2
	if (a->top == 1 && ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) != 0))
		{
a245 5
		return BN_mod_exp_mont_word(r,A,p,m,ctx,m_ctx);
		}
	else
		return BN_mod_exp_mont(r,a,p,m,ctx,m_ctx);
	}
d247 4
d252 3
a254 2
static int dh_init(DH *dh)
	{
d256 2
a257 2
	return(1);
	}
d259 4
a262 3
static int dh_finish(DH *dh)
	{
	if(dh->method_mont_p)
d264 2
a265 2
	return(1);
	}
@


1.17
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/* crypto/dh/dh_key.c */
@


1.16
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d85 6
a90 9
"OpenSSL DH Method",
generate_key,
compute_key,
dh_bn_mod_exp,
dh_init,
dh_finish,
0,
NULL,
NULL
@


1.15
log
@resolve conflicts
@
text
@a75 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dh->meth->flags & DH_FLAG_FIPS_METHOD)
			&& !(dh->flags & DH_FLAG_NON_FIPS_ALLOW))
		{
		DHerr(DH_F_DH_GENERATE_KEY, DH_R_NON_FIPS_METHOD);
		return 0;
		}
#endif
a80 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dh->meth->flags & DH_FLAG_FIPS_METHOD)
			&& !(dh->flags & DH_FLAG_NON_FIPS_ALLOW))
		{
		DHerr(DH_F_DH_COMPUTE_KEY, DH_R_NON_FIPS_METHOD);
		return 0;
		}
#endif
@


1.14
log
@resolve conflicts, fix local changes
@
text
@d76 8
d89 8
d157 15
a171 2
		l = dh->length ? dh->length : BN_num_bits(dh->p)-1; /* secret exponent length */
		if (!BN_rand(priv_key, l, 0, 0)) goto err;
@


1.13
log
@resolve conflicts
@
text
@a64 2
#ifndef OPENSSL_FIPS

a263 2

#endif
@


1.12
log
@resolve conflicts
@
text
@d65 2
d266 2
@


1.11
log
@openssl security fixes, diff from markus@@, ok & "commit it" djm@@
http://www.openssl.org/news/secadv_20060928.txt for more
@
text
@a64 2
#ifndef OPENSSL_FIPS

d92 1
d133 1
a133 2
		mont = BN_MONT_CTX_set_locked(
				(BN_MONT_CTX **)&dh->method_mont_p,
d153 1
a153 1
			BN_with_flags(prk, priv_key, BN_FLG_EXP_CONSTTIME);
d166 1
a166 1
		DHerr(DH_F_DH_GENERATE_KEY,ERR_R_BN_LIB);
d176 1
a176 1
	BN_CTX *ctx;
d180 1
a180 1
	int check_result;
d184 2
a185 2
		DHerr(DH_F_DH_COMPUTE_KEY,DH_R_MODULUS_TOO_LARGE);
		return -1;
d195 1
a195 1
		DHerr(DH_F_DH_COMPUTE_KEY,DH_R_NO_PRIVATE_VALUE);
d201 1
a201 2
		mont = BN_MONT_CTX_set_locked(
				(BN_MONT_CTX **)&dh->method_mont_p,
d206 1
a206 1
			BN_set_flags(dh->priv_key, BN_FLG_EXP_CONSTTIME);
d211 2
a212 1
	if (!DH_check_pub_key(dh, pub_key, &check_result) || check_result)
d214 1
a214 1
		DHerr(DH_F_DH_COMPUTE_KEY,DH_R_INVALID_PUBKEY);
d217 1
d220 1
a220 1
		DHerr(DH_F_DH_COMPUTE_KEY,ERR_R_BN_LIB);
d261 1
a261 1
		BN_MONT_CTX_free((BN_MONT_CTX *)dh->method_mont_p);
a263 2

#endif
@


1.10
log
@resolve conflicts
@
text
@d184 6
@


1.10.2.1
log
@MFC:
Fix by pvalchev@@

openssl security fixes, diff from markus@@, ok & "commit it" djm@@
http://www.openssl.org/news/secadv_20060928.txt for more
@
text
@a183 6
	if (BN_num_bits(dh->p) > OPENSSL_DH_MAX_MODULUS_BITS)
		{
		DHerr(DH_F_DH_COMPUTE_KEY,DH_R_MODULUS_TOO_LARGE);
		return -1;
		}

@


1.9
log
@backport checks for degenerate Diffie-Hellman public exponents from
OpenSSL-0.9.8a, where they were added without a corresponding patch to
0.9.7 or an advisory!  ok theo@@ markus@@
@
text
@d108 1
a108 1
	BN_MONT_CTX *mont;
d131 2
a132 1
	if ((dh->method_mont_p == NULL) && (dh->flags & DH_FLAG_CACHE_MONT_P))
d134 5
a138 3
		if ((dh->method_mont_p=(char *)BN_MONT_CTX_new()) != NULL)
			if (!BN_MONT_CTX_set((BN_MONT_CTX *)dh->method_mont_p,
				dh->p,ctx)) goto err;
a139 1
	mont=(BN_MONT_CTX *)dh->method_mont_p;
d146 16
a161 2
	if (!dh->meth->bn_mod_exp(dh, pub_key, dh->g, priv_key,dh->p,ctx,mont))
		goto err;
d179 1
a179 1
	BN_MONT_CTX *mont;
d194 2
a195 1
	if ((dh->method_mont_p == NULL) && (dh->flags & DH_FLAG_CACHE_MONT_P))
d197 10
a206 3
		if ((dh->method_mont_p=(char *)BN_MONT_CTX_new()) != NULL)
			if (!BN_MONT_CTX_set((BN_MONT_CTX *)dh->method_mont_p,
				dh->p,ctx)) goto err;
a207 3

	mont=(BN_MONT_CTX *)dh->method_mont_p;

d221 5
a225 2
	BN_CTX_end(ctx);
	BN_CTX_free(ctx);
d234 4
a237 1
	if (a->top == 1)
@


1.8
log
@resolve conflicts
@
text
@d166 1
d186 6
@


1.8.2.1
log
@MFC:
Fix by pvalchev@@

openssl security fixes, diff from markus@@, ok & "commit it" djm@@
http://www.openssl.org/news/secadv_20060928.txt for more
@
text
@a166 6
	if (BN_num_bits(dh->p) > OPENSSL_DH_MAX_MODULUS_BITS)
		{
		DHerr(DH_F_DH_COMPUTE_KEY,DH_R_MODULUS_TOO_LARGE);
		return -1;
		}

@


1.8.4.1
log
@MFC:
Fix by pvalchev@@

openssl security fixes, diff from markus@@, ok & "commit it" djm@@
http://www.openssl.org/news/secadv_20060928.txt for more
@
text
@a166 6
	if (BN_num_bits(dh->p) > OPENSSL_DH_MAX_MODULUS_BITS)
		{
		DHerr(DH_F_DH_COMPUTE_KEY,DH_R_MODULUS_TOO_LARGE);
		return -1;
		}

@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d65 2
d225 2
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a63 1
#include <openssl/engine.h>
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d67 3
a69 2
static int compute_key(unsigned char *key, BIGNUM *pub_key, DH *dh);
static int dh_bn_mod_exp(DH *dh, BIGNUM *r, BIGNUM *a, const BIGNUM *p,
d77 1
a77 1
	return ENGINE_get_DH(dh->engine)->generate_key(dh);
d80 1
a80 1
int DH_compute_key(unsigned char *key, BIGNUM *pub_key, DH *dh)
d82 1
a82 1
	return ENGINE_get_DH(dh->engine)->compute_key(key, pub_key, dh);
d96 1
a96 1
DH_METHOD *DH_OpenSSL(void)
d104 3
a106 1
	BN_CTX ctx;
d110 2
a111 1
	BN_CTX_init(&ctx);
d117 1
a117 3
		do
			if (!BN_rand_range(priv_key, dh->p)) goto err;
		while (BN_is_zero(priv_key));
d134 1
a134 1
				dh->p,&ctx)) goto err;
d138 6
a143 2
	if (!ENGINE_get_DH(dh->engine)->bn_mod_exp(dh, pub_key, dh->g,
				priv_key,dh->p,&ctx,mont))
d155 1
a155 1
	BN_CTX_free(&ctx);
d159 1
a159 1
static int compute_key(unsigned char *key, BIGNUM *pub_key, DH *dh)
d161 1
a161 1
	BN_CTX ctx;
d166 4
a169 3
	BN_CTX_init(&ctx);
	BN_CTX_start(&ctx);
	tmp = BN_CTX_get(&ctx);
d180 1
a180 1
				dh->p,&ctx)) goto err;
d184 1
a184 2
	if (!ENGINE_get_DH(dh->engine)->bn_mod_exp(dh, tmp, pub_key,
				dh->priv_key,dh->p,&ctx,mont))
d192 2
a193 2
	BN_CTX_end(&ctx);
	BN_CTX_free(&ctx);
d197 2
a198 1
static int dh_bn_mod_exp(DH *dh, BIGNUM *r, BIGNUM *a, const BIGNUM *p,
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a102 1
	unsigned int i;
a110 6
		i=dh->length;
		if (i == 0)
			{
			/* Make the number p-1 bits long */
			i=BN_num_bits(dh->p)-1;
			}
d113 3
a115 1
		if (!BN_rand(priv_key,i,0,0)) goto err;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d64 1
d76 1
a76 1
	return dh->meth->generate_key(dh);
d81 1
a81 1
	return dh->meth->compute_key(key, pub_key, dh);
d141 3
a143 2
	if (!dh->meth->bn_mod_exp(dh, pub_key,dh->g,priv_key,dh->p,&ctx,mont))
								goto err;
d182 2
a183 1
	if (!dh->meth->bn_mod_exp(dh, tmp,pub_key,dh->priv_key,dh->p,&ctx,mont))
d199 10
a208 3
{
	return BN_mod_exp_mont(r, a, p, m, ctx, m_ctx);
}
d211 1
a211 1
{
d214 1
a214 1
}
d217 1
a217 1
{
d221 1
a221 1
}
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d65 8
d75 26
d140 2
a141 1
	if (!BN_mod_exp_mont(pub_key,dh->g,priv_key,dh->p,&ctx,mont)) goto err;
d156 1
a156 1
int DH_compute_key(unsigned char *key, BIGNUM *pub_key, DH *dh)
d164 2
a165 1
	tmp= &(ctx.bn[ctx.tos++]);
d180 1
a180 1
	if (!BN_mod_exp_mont(tmp,pub_key,dh->priv_key,dh->p,&ctx,mont))
d188 1
d192 20
@


1.1
log
@Initial revision
@
text
@d61 3
a63 3
#include "bn.h"
#include "rand.h"
#include "dh.h"
d65 1
a65 2
int DH_generate_key(dh)
DH *dh;
d69 2
a70 1
	BN_CTX *ctx=NULL;
d73 1
a73 2
	ctx=BN_CTX_new();
	if (ctx == NULL) goto err;
d98 9
a106 1
	if (!BN_mod_exp(pub_key,dh->g,priv_key,dh->p,ctx)) goto err;
d117 1
a117 1
	if (ctx != NULL) BN_CTX_free(ctx);
d121 1
a121 4
int DH_compute_key(key,pub_key,dh)
unsigned char *key;
BIGNUM *pub_key;
DH *dh;
d123 2
a124 1
	BN_CTX *ctx;
d128 2
a129 3
	ctx=BN_CTX_new();
	if (ctx == NULL) goto err;
	tmp=ctx->bn[ctx->tos++];
d136 9
a144 1
	if (!BN_mod_exp(tmp,pub_key,dh->priv_key,dh->p,ctx))
d152 1
a152 1
	if (ctx != NULL) BN_CTX_free(ctx);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 3
a63 13
#include <openssl/bn.h>
#include <openssl/rand.h>
#include <openssl/dh.h>
#include <openssl/engine.h>

static int generate_key(DH *dh);
static int compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
static int dh_bn_mod_exp(const DH *dh, BIGNUM *r,
			const BIGNUM *a, const BIGNUM *p,
			const BIGNUM *m, BN_CTX *ctx,
			BN_MONT_CTX *m_ctx);
static int dh_init(DH *dh);
static int dh_finish(DH *dh);
d65 2
a66 27
int DH_generate_key(DH *dh)
	{
	return dh->meth->generate_key(dh);
	}

int DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
	{
	return dh->meth->compute_key(key, pub_key, dh);
	}

static DH_METHOD dh_ossl = {
"OpenSSL DH Method",
generate_key,
compute_key,
dh_bn_mod_exp,
dh_init,
dh_finish,
0,
NULL
};

const DH_METHOD *DH_OpenSSL(void)
{
	return &dh_ossl;
}

static int generate_key(DH *dh)
d69 2
a70 4
	int generate_new_key=0;
	unsigned l;
	BN_CTX *ctx;
	BN_MONT_CTX *mont;
d73 1
a73 1
	ctx = BN_CTX_new();
d78 6
d86 1
a86 1
		generate_new_key=1;
d99 1
a99 15
	if ((dh->method_mont_p == NULL) && (dh->flags & DH_FLAG_CACHE_MONT_P))
		{
		if ((dh->method_mont_p=(char *)BN_MONT_CTX_new()) != NULL)
			if (!BN_MONT_CTX_set((BN_MONT_CTX *)dh->method_mont_p,
				dh->p,ctx)) goto err;
		}
	mont=(BN_MONT_CTX *)dh->method_mont_p;

	if (generate_new_key)
		{
		l = dh->length ? dh->length : BN_num_bits(dh->p)-1; /* secret exponent length */
		if (!BN_rand(priv_key, l, 0, 0)) goto err;
		}
	if (!dh->meth->bn_mod_exp(dh, pub_key, dh->g, priv_key,dh->p,ctx,mont))
		goto err;
d110 1
a110 1
	BN_CTX_free(ctx);
d114 4
a117 1
static int compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
a119 1
	BN_MONT_CTX *mont;
d123 1
a123 1
	ctx = BN_CTX_new();
d125 1
a125 2
	BN_CTX_start(ctx);
	tmp = BN_CTX_get(ctx);
d132 1
a132 9
	if ((dh->method_mont_p == NULL) && (dh->flags & DH_FLAG_CACHE_MONT_P))
		{
		if ((dh->method_mont_p=(char *)BN_MONT_CTX_new()) != NULL)
			if (!BN_MONT_CTX_set((BN_MONT_CTX *)dh->method_mont_p,
				dh->p,ctx)) goto err;
		}

	mont=(BN_MONT_CTX *)dh->method_mont_p;
	if (!dh->meth->bn_mod_exp(dh, tmp, pub_key, dh->priv_key,dh->p,ctx,mont))
d140 1
a140 2
	BN_CTX_end(ctx);
	BN_CTX_free(ctx);
a141 28
	}

static int dh_bn_mod_exp(const DH *dh, BIGNUM *r,
			const BIGNUM *a, const BIGNUM *p,
			const BIGNUM *m, BN_CTX *ctx,
			BN_MONT_CTX *m_ctx)
	{
	if (a->top == 1)
		{
		BN_ULONG A = a->d[0];
		return BN_mod_exp_mont_word(r,A,p,m,ctx,m_ctx);
		}
	else
		return BN_mod_exp_mont(r,a,p,m,ctx,m_ctx);
	}


static int dh_init(DH *dh)
	{
	dh->flags |= DH_FLAG_CACHE_MONT_P;
	return(1);
	}

static int dh_finish(DH *dh)
	{
	if(dh->method_mont_p)
		BN_MONT_CTX_free((BN_MONT_CTX *)dh->method_mont_p);
	return(1);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d64 1
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a64 2
#ifndef OPENSSL_FIPS

a222 2

#endif
@


1.1.1.5
log
@import of openssl-0.9.7j
@
text
@d108 1
a108 1
	BN_MONT_CTX *mont=NULL;
d131 1
a131 2

	if (dh->flags & DH_FLAG_CACHE_MONT_P)
d133 3
a135 5
		mont = BN_MONT_CTX_set_locked(
				(BN_MONT_CTX **)&dh->method_mont_p,
				CRYPTO_LOCK_DH, dh->p, ctx);
		if (!mont)
			goto err;
d137 1
d144 2
a145 16

	{
		BIGNUM local_prk;
		BIGNUM *prk;

		if ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) == 0)
			{
			BN_init(&local_prk);
			prk = &local_prk;
			BN_with_flags(prk, priv_key, BN_FLG_EXP_CONSTTIME);
			}
		else
			prk = priv_key;

		if (!dh->meth->bn_mod_exp(dh, pub_key, dh->g, prk, dh->p, ctx, mont)) goto err;
	}
d163 1
a163 1
	BN_MONT_CTX *mont=NULL;
d177 1
a177 2

	if (dh->flags & DH_FLAG_CACHE_MONT_P)
d179 3
a181 10
		mont = BN_MONT_CTX_set_locked(
				(BN_MONT_CTX **)&dh->method_mont_p,
				CRYPTO_LOCK_DH, dh->p, ctx);
		if ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) == 0)
			{
			/* XXX */
			BN_set_flags(dh->priv_key, BN_FLG_EXP_CONSTTIME);
			}
		if (!mont)
			goto err;
d184 1
d193 2
a194 5
	if (ctx != NULL)
		{
		BN_CTX_end(ctx);
		BN_CTX_free(ctx);
		}
d203 1
a203 4
	/* If a is only one word long and constant time is false, use the faster
	 * exponenentiation function.
	 */
	if (a->top == 1 && ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) != 0))
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d65 2
a93 1
NULL,
d134 2
a135 1
		mont = BN_MONT_CTX_set_locked(&dh->method_mont_p,
d155 1
a155 1
			BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);
d168 1
a168 1
		DHerr(DH_F_GENERATE_KEY,ERR_R_BN_LIB);
d178 1
a178 1
	BN_CTX *ctx=NULL;
a181 7
        int check_result;

	if (BN_num_bits(dh->p) > OPENSSL_DH_MAX_MODULUS_BITS)
		{
		DHerr(DH_F_COMPUTE_KEY,DH_R_MODULUS_TOO_LARGE);
		goto err;
		}
d190 1
a190 1
		DHerr(DH_F_COMPUTE_KEY,DH_R_NO_PRIVATE_VALUE);
d196 2
a197 1
		mont = BN_MONT_CTX_set_locked(&dh->method_mont_p,
d202 1
a202 1
			BN_set_flags(dh->priv_key, BN_FLG_CONSTTIME);
a207 6
        if (!DH_check_pub_key(dh, pub_key, &check_result) || check_result)
		{
		DHerr(DH_F_COMPUTE_KEY,DH_R_INVALID_PUBKEY);
		goto err;
		}

d210 1
a210 1
		DHerr(DH_F_COMPUTE_KEY,ERR_R_BN_LIB);
d251 1
a251 1
		BN_MONT_CTX_free(dh->method_mont_p);
d254 2
@


1.1.1.7
log
@import openssl-0.9.8j
@
text
@a64 2
#ifndef OPENSSL_FIPS

a263 2

#endif
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@d65 2
d266 2
@


1.1.1.9
log
@import OpenSSL-1.0.1c
@
text
@a75 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dh->meth->flags & DH_FLAG_FIPS_METHOD)
			&& !(dh->flags & DH_FLAG_NON_FIPS_ALLOW))
		{
		DHerr(DH_F_DH_GENERATE_KEY, DH_R_NON_FIPS_METHOD);
		return 0;
		}
#endif
a80 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dh->meth->flags & DH_FLAG_FIPS_METHOD)
			&& !(dh->flags & DH_FLAG_NON_FIPS_ALLOW))
		{
		DHerr(DH_F_DH_COMPUTE_KEY, DH_R_NON_FIPS_METHOD);
		return 0;
		}
#endif
d141 2
a142 15
		if (dh->q)
			{
			do
				{
				if (!BN_rand_range(priv_key, dh->q))
					goto err;
				}
			while (BN_is_zero(priv_key) || BN_is_one(priv_key));
			}
		else
			{
			/* secret exponent length */
			l = dh->length ? dh->length : BN_num_bits(dh->p)-1;
			if (!BN_rand(priv_key, l, 0, 0)) goto err;
			}
@


