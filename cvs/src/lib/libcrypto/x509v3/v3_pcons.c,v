head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.10;
commitid	kT0fLt3r4lroFJra;

1.10
date	2016.12.30.15.54.49;	author jsing;	state Exp;
branches;
next	1.9;
commitid	kn1H5Mumrqi1t2NN;

1.9
date	2015.07.29.16.13.49;	author jsing;	state Exp;
branches;
next	1.8;
commitid	p0YErzIitgRtixdM;

1.8
date	2015.07.25.16.14.29;	author jsing;	state Exp;
branches;
next	1.7;
commitid	zsQhEc8DIa1ZAAEL;

1.7
date	2015.07.25.16.00.14;	author jsing;	state Exp;
branches;
next	1.6;
commitid	IQmUl7Av61G6tr84;

1.6
date	2015.02.10.05.43.09;	author jsing;	state Exp;
branches;
next	1.5;
commitid	ZiJHBcBxA18Ospnt;

1.5
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.4;
commitid	yQEL1wOWIearrW15;

1.4
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.3;
commitid	id8dTrTMtnTn4fqt;

1.3
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.05.26.12.10.11;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.12;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: v3_pcons.c,v 1.10 2016/12/30 15:54:49 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2003 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/x509v3.h>

static STACK_OF(CONF_VALUE) *
i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method, void *bcons,
    STACK_OF(CONF_VALUE) *extlist);
static void *v2i_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method,
    X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values);

const X509V3_EXT_METHOD v3_policy_constraints = {
	.ext_nid = NID_policy_constraints,
	.ext_flags = 0,
	.it = &POLICY_CONSTRAINTS_it,
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = i2v_POLICY_CONSTRAINTS,
	.v2i = v2i_POLICY_CONSTRAINTS,
	.i2r = NULL,
	.r2i = NULL,
	.usr_data = NULL,
};

static const ASN1_TEMPLATE POLICY_CONSTRAINTS_seq_tt[] = {
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_OPTIONAL,
		.tag = 0,
		.offset = offsetof(POLICY_CONSTRAINTS, requireExplicitPolicy),
		.field_name = "requireExplicitPolicy",
		.item = &ASN1_INTEGER_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_OPTIONAL,
		.tag = 1,
		.offset = offsetof(POLICY_CONSTRAINTS, inhibitPolicyMapping),
		.field_name = "inhibitPolicyMapping",
		.item = &ASN1_INTEGER_it,
	},
};

const ASN1_ITEM POLICY_CONSTRAINTS_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = POLICY_CONSTRAINTS_seq_tt,
	.tcount = sizeof(POLICY_CONSTRAINTS_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(POLICY_CONSTRAINTS),
	.sname = "POLICY_CONSTRAINTS",
};


POLICY_CONSTRAINTS *
POLICY_CONSTRAINTS_new(void)
{
	return (POLICY_CONSTRAINTS*)ASN1_item_new(&POLICY_CONSTRAINTS_it);
}

void
POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &POLICY_CONSTRAINTS_it);
}

static STACK_OF(CONF_VALUE) *
i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method, void *a,
    STACK_OF(CONF_VALUE) *extlist)
{
	POLICY_CONSTRAINTS *pcons = a;

	X509V3_add_value_int("Require Explicit Policy",
	    pcons->requireExplicitPolicy, &extlist);
	X509V3_add_value_int("Inhibit Policy Mapping",
	    pcons->inhibitPolicyMapping, &extlist);
	return extlist;
}

static void *
v2i_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    STACK_OF(CONF_VALUE) *values)
{
	POLICY_CONSTRAINTS *pcons = NULL;
	CONF_VALUE *val;
	int i;

	if (!(pcons = POLICY_CONSTRAINTS_new())) {
		X509V3error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	for (i = 0; i < sk_CONF_VALUE_num(values); i++) {
		val = sk_CONF_VALUE_value(values, i);
		if (!strcmp(val->name, "requireExplicitPolicy")) {
			if (!X509V3_get_value_int(val,
			    &pcons->requireExplicitPolicy)) goto err;
		} else if (!strcmp(val->name, "inhibitPolicyMapping")) {
			if (!X509V3_get_value_int(val,
			    &pcons->inhibitPolicyMapping)) goto err;
		} else {
			X509V3error(X509V3_R_INVALID_NAME);
			X509V3_conf_err(val);
			goto err;
		}
	}
	if (!pcons->inhibitPolicyMapping && !pcons->requireExplicitPolicy) {
		X509V3error(X509V3_R_ILLEGAL_EMPTY_EXTENSION);
		goto err;
	}

	return pcons;

err:
	POLICY_CONSTRAINTS_free(pcons);
	return NULL;
}
@


1.10
log
@Expand ASN1_ITEM_ref and ASN1_ITEM_ptr macros - no change in generated
assembly. Of particular interest is ASN1_ITEM_ptr which does nothing
and resulted in code like:

  if (method->it)
    ASN1_ITEM_free(..., ASN1_ITEM_ptr(method->it));
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pcons.c,v 1.9 2015/07/29 16:13:49 jsing Exp $ */
d153 1
a153 2
		X509V3err(X509V3_F_V2I_POLICY_CONSTRAINTS,
		    ERR_R_MALLOC_FAILURE);
d165 1
a165 2
			X509V3err(X509V3_F_V2I_POLICY_CONSTRAINTS,
			    X509V3_R_INVALID_NAME);
d171 1
a171 2
		X509V3err(X509V3_F_V2I_POLICY_CONSTRAINTS,
		    X509V3_R_ILLEGAL_EMPTY_EXTENSION);
@


1.9
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pcons.c,v 1.8 2015/07/25 16:14:29 jsing Exp $ */
d77 1
a77 1
	.it = ASN1_ITEM_ref(POLICY_CONSTRAINTS),
@


1.8
log
@Expand ASN.1 template macros that got missed in the last pass - only change
to generated assembly is due to line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pcons.c,v 1.7 2015/07/25 16:00:14 jsing Exp $ */
d75 14
a88 8
	NID_policy_constraints, 0,
	ASN1_ITEM_ref(POLICY_CONSTRAINTS),
	0, 0, 0, 0,
	0, 0,
	i2v_POLICY_CONSTRAINTS,
	v2i_POLICY_CONSTRAINTS,
	NULL, NULL,
	NULL
@


1.7
log
@Expand ASN.1 template macros - the generated assembly only differs by
changes to line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pcons.c,v 1.6 2015/02/10 05:43:09 jsing Exp $ */
d86 7
a92 2
	ASN1_IMP_OPT(POLICY_CONSTRAINTS, requireExplicitPolicy,
	    ASN1_INTEGER, 0),
@


1.6
log
@Expand the IMPLEMENT_ASN1_ALLOC_FUNCTIONS macro so that the code is visible
and functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pcons.c,v 1.5 2014/07/11 08:44:49 jsing Exp $ */
d85 1
a85 1
ASN1_SEQUENCE(POLICY_CONSTRAINTS) = {
d88 18
a105 2
	ASN1_IMP_OPT(POLICY_CONSTRAINTS, inhibitPolicyMapping, ASN1_INTEGER, 1)
} ASN1_SEQUENCE_END(POLICY_CONSTRAINTS)
@


1.5
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pcons.c,v 1.4 2014/07/10 13:58:23 jsing Exp $ */
d91 12
a102 1
IMPLEMENT_ASN1_ALLOC_FUNCTIONS(POLICY_CONSTRAINTS)
@


1.4
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pcons.c,v 1.3 2014/06/12 15:49:31 deraadt Exp $ */
a61 1
#include "cryptlib.h"
d65 1
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 2
a61 1
#include <stdio.h>
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* v3_pcons.c */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 5
a71 4
static STACK_OF(CONF_VALUE) *i2v_POLICY_CONSTRAINTS(X509V3_EXT_METHOD *method,
				void *bcons, STACK_OF(CONF_VALUE) *extlist);
static void *v2i_POLICY_CONSTRAINTS(X509V3_EXT_METHOD *method,
				X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values);
d74 8
a81 8
NID_policy_constraints, 0,
ASN1_ITEM_ref(POLICY_CONSTRAINTS),
0,0,0,0,
0,0,
i2v_POLICY_CONSTRAINTS,
v2i_POLICY_CONSTRAINTS,
NULL,NULL,
NULL
d85 3
a87 2
	ASN1_IMP_OPT(POLICY_CONSTRAINTS, requireExplicitPolicy, ASN1_INTEGER,0),
	ASN1_IMP_OPT(POLICY_CONSTRAINTS, inhibitPolicyMapping, ASN1_INTEGER,1)
d92 3
a94 3

static STACK_OF(CONF_VALUE) *i2v_POLICY_CONSTRAINTS(X509V3_EXT_METHOD *method,
	     void *a, STACK_OF(CONF_VALUE) *extlist)
d97 1
d99 1
a99 1
			pcons->requireExplicitPolicy, &extlist);
d101 1
a101 1
			pcons->inhibitPolicyMapping, &extlist);
d105 3
a107 2
static void *v2i_POLICY_CONSTRAINTS(X509V3_EXT_METHOD *method,
	     X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values)
d109 1
a109 1
	POLICY_CONSTRAINTS *pcons=NULL;
d112 4
a115 2
	if(!(pcons = POLICY_CONSTRAINTS_new())) {
		X509V3err(X509V3_F_V2I_POLICY_CONSTRAINTS, ERR_R_MALLOC_FAILURE);
d118 1
a118 1
	for(i = 0; i < sk_CONF_VALUE_num(values); i++) {
d120 6
a125 6
		if(!strcmp(val->name, "requireExplicitPolicy")) {
			if(!X509V3_get_value_int(val,
				&pcons->requireExplicitPolicy)) goto err;
		} else if(!strcmp(val->name, "inhibitPolicyMapping")) {
			if(!X509V3_get_value_int(val,
				&pcons->inhibitPolicyMapping)) goto err;
d127 2
a128 1
			X509V3err(X509V3_F_V2I_POLICY_CONSTRAINTS, X509V3_R_INVALID_NAME);
d134 2
a135 1
		X509V3err(X509V3_F_V2I_POLICY_CONSTRAINTS, X509V3_R_ILLEGAL_EMPTY_EXTENSION);
d140 2
a141 1
	err:
a144 1

@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d67 4
a70 6
static STACK_OF(CONF_VALUE) *
i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method, void *bcons,
		       STACK_OF(CONF_VALUE) *extlist);
static void *v2i_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method,
				    X509V3_CTX *ctx,
				    STACK_OF(CONF_VALUE) *values);
d91 2
a92 3
static STACK_OF(CONF_VALUE) *
i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method, void *a,
		       STACK_OF(CONF_VALUE) *extlist)
d102 2
a103 3
static void *v2i_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method,
				    X509V3_CTX *ctx,
				    STACK_OF(CONF_VALUE) *values)
@


