head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17;
locks; strict;
comment	@ * @;


1.17
date	2016.11.05.15.21.20;	author miod;	state Exp;
branches;
next	1.16;
commitid	IXDXC3oH4oN6UUOH;

1.16
date	2016.03.11.07.08.45;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	MTdM7aVFdRMAzAYE;

1.15
date	2015.07.18.00.01.05;	author beck;	state Exp;
branches;
next	1.14;
commitid	Hg4lQHnvEjZmBzNl;

1.14
date	2015.07.15.17.02.03;	author miod;	state Exp;
branches;
next	1.13;
commitid	pAbpqwEXcUye5RVE;

1.13
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.12;
commitid	gtwLkRyWx0K1HbzX;

1.12
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.09.16.59.33;	author miod;	state Exp;
branches;
next	1.10;
commitid	8Qq7Sa0JjQtzCtEX;

1.10
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.29.21.19.30;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.29.21.07.43;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.21.08.41.26;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.03.02.34.33;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.05.21.36.38;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.11.03.02.32.15;	author djm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Check BIO_new*() for failure.

ok beck@@ jsing@@
@
text
@/* $OpenBSD: pcy_tree.c,v 1.16 2016/03/11 07:08:45 mmcc Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2004.
 */
/* ====================================================================
 * Copyright (c) 2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/x509.h>
#include <openssl/x509v3.h>

#include "pcy_int.h"

/* Enable this to print out the complete policy tree at various point during
 * evaluation.
 */

/*#define OPENSSL_POLICY_DEBUG*/

#ifdef OPENSSL_POLICY_DEBUG

static void
expected_print(BIO *err, X509_POLICY_LEVEL *lev, X509_POLICY_NODE *node,
    int indent)
{
	if ((lev->flags & X509_V_FLAG_INHIBIT_MAP) ||
	    !(node->data->flags & POLICY_DATA_FLAG_MAP_MASK))
		BIO_puts(err, "  Not Mapped\n");
	else {
		int i;
		STACK_OF(ASN1_OBJECT) *pset = node->data->expected_policy_set;
		ASN1_OBJECT *oid;
		BIO_puts(err, "  Expected: ");
		for (i = 0; i < sk_ASN1_OBJECT_num(pset); i++) {
			oid = sk_ASN1_OBJECT_value(pset, i);
			if (i)
				BIO_puts(err, ", ");
			i2a_ASN1_OBJECT(err, oid);
		}
		BIO_puts(err, "\n");
	}
}

static void
tree_print(char *str, X509_POLICY_TREE *tree, X509_POLICY_LEVEL *curr)
{
	X509_POLICY_LEVEL *plev;
	X509_POLICY_NODE *node;
	int i;
	BIO *err;

	if ((err = BIO_new_fp(stderr, BIO_NOCLOSE)) == NULL)
		return;

	if (!curr)
		curr = tree->levels + tree->nlevel;
	else
		curr++;
	BIO_printf(err, "Level print after %s\n", str);
	BIO_printf(err, "Printing Up to Level %ld\n", curr - tree->levels);
	for (plev = tree->levels; plev != curr; plev++) {
		BIO_printf(err, "Level %ld, flags = %x\n",
		    plev - tree->levels, plev->flags);
		for (i = 0; i < sk_X509_POLICY_NODE_num(plev->nodes); i++) {
			node = sk_X509_POLICY_NODE_value(plev->nodes, i);
			X509_POLICY_NODE_print(err, node, 2);
			expected_print(err, plev, node, 2);
			BIO_printf(err, "  Flags: %x\n", node->data->flags);
		}
		if (plev->anyPolicy)
			X509_POLICY_NODE_print(err, plev->anyPolicy, 2);
	}

	BIO_free(err);
}
#else

#define tree_print(a,b,c) /* */

#endif

/* Initialize policy tree. Return values:
 *  0 Some internal error occured.
 * -1 Inconsistent or invalid extensions in certificates.
 *  1 Tree initialized OK.
 *  2 Policy tree is empty.
 *  5 Tree OK and requireExplicitPolicy true.
 *  6 Tree empty and requireExplicitPolicy true.
 */

static int
tree_init(X509_POLICY_TREE **ptree, STACK_OF(X509) *certs, unsigned int flags)
{
	X509_POLICY_TREE *tree;
	X509_POLICY_LEVEL *level;
	const X509_POLICY_CACHE *cache;
	X509_POLICY_DATA *data = NULL;
	X509 *x;
	int ret = 1;
	int i, n;
	int explicit_policy;
	int any_skip;
	int map_skip;

	*ptree = NULL;
	n = sk_X509_num(certs);

	if (flags & X509_V_FLAG_EXPLICIT_POLICY)
		explicit_policy = 0;
	else
		explicit_policy = n + 1;

	if (flags & X509_V_FLAG_INHIBIT_ANY)
		any_skip = 0;
	else
		any_skip = n + 1;

	if (flags & X509_V_FLAG_INHIBIT_MAP)
		map_skip = 0;
	else
		map_skip = n + 1;

	/* Can't do anything with just a trust anchor */
	if (n == 1)
		return 1;
	/* First setup policy cache in all certificates apart from the
	 * trust anchor. Note any bad cache results on the way. Also can
	 * calculate explicit_policy value at this point.
	 */
	for (i = n - 2; i >= 0; i--) {
		x = sk_X509_value(certs, i);
		X509_check_purpose(x, -1, -1);
		cache = policy_cache_set(x);
		/* If cache NULL something bad happened: return immediately */
		if (cache == NULL)
			return 0;
		/* If inconsistent extensions keep a note of it but continue */
		if (x->ex_flags & EXFLAG_INVALID_POLICY)
			ret = -1;
		/* Otherwise if we have no data (hence no CertificatePolicies)
		 * and haven't already set an inconsistent code note it.
		 */
		else if ((ret == 1) && !cache->data)
			ret = 2;
		if (explicit_policy > 0) {
			if (!(x->ex_flags & EXFLAG_SI))
				explicit_policy--;
			if ((cache->explicit_skip != -1) &&
			    (cache->explicit_skip < explicit_policy))
				explicit_policy = cache->explicit_skip;
		}
	}

	if (ret != 1) {
		if (ret == 2 && !explicit_policy)
			return 6;
		return ret;
	}


	/* If we get this far initialize the tree */

	tree = malloc(sizeof(X509_POLICY_TREE));

	if (!tree)
		return 0;

	tree->flags = 0;
	tree->levels = calloc(n, sizeof(X509_POLICY_LEVEL));
	tree->nlevel = 0;
	tree->extra_data = NULL;
	tree->auth_policies = NULL;
	tree->user_policies = NULL;

	if (!tree->levels) {
		free(tree);
		return 0;
	}

	tree->nlevel = n;

	level = tree->levels;

	/* Root data: initialize to anyPolicy */

	data = policy_data_new(NULL, OBJ_nid2obj(NID_any_policy), 0);

	if (!data || !level_add_node(level, data, NULL, tree, NULL))
		goto bad_tree;

	for (i = n - 2; i >= 0; i--) {
		level++;
		x = sk_X509_value(certs, i);
		cache = policy_cache_set(x);
		CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);
		level->cert = x;

		if (!cache->anyPolicy)
			level->flags |= X509_V_FLAG_INHIBIT_ANY;

		/* Determine inhibit any and inhibit map flags */
		if (any_skip == 0) {
			/* Any matching allowed if certificate is self
			 * issued and not the last in the chain.
			 */
			if (!(x->ex_flags & EXFLAG_SI) || (i == 0))
				level->flags |= X509_V_FLAG_INHIBIT_ANY;
		} else {
			if (!(x->ex_flags & EXFLAG_SI))
				any_skip--;
			if ((cache->any_skip >= 0) &&
			    (cache->any_skip < any_skip))
				any_skip = cache->any_skip;
		}

		if (map_skip == 0)
			level->flags |= X509_V_FLAG_INHIBIT_MAP;
		else {
			if (!(x->ex_flags & EXFLAG_SI))
				map_skip--;
			if ((cache->map_skip >= 0) &&
			    (cache->map_skip < map_skip))
				map_skip = cache->map_skip;
		}

	}

	*ptree = tree;

	if (explicit_policy)
		return 1;
	else
		return 5;

bad_tree:
	X509_policy_tree_free(tree);

	return 0;
}

static int
tree_link_matching_nodes(X509_POLICY_LEVEL *curr, const X509_POLICY_DATA *data)
{
	X509_POLICY_LEVEL *last = curr - 1;
	X509_POLICY_NODE *node;
	int i, matched = 0;

	/* Iterate through all in nodes linking matches */
	for (i = 0; i < sk_X509_POLICY_NODE_num(last->nodes); i++) {
		node = sk_X509_POLICY_NODE_value(last->nodes, i);
		if (policy_node_match(last, node, data->valid_policy)) {
			if (!level_add_node(curr, data, node, NULL, NULL))
				return 0;
			matched = 1;
		}
	}
	if (!matched && last->anyPolicy) {
		if (!level_add_node(curr, data, last->anyPolicy, NULL, NULL))
			return 0;
	}
	return 1;
}

/* This corresponds to RFC3280 6.1.3(d)(1):
 * link any data from CertificatePolicies onto matching parent
 * or anyPolicy if no match.
 */

static int
tree_link_nodes(X509_POLICY_LEVEL *curr, const X509_POLICY_CACHE *cache)
{
	int i;
	X509_POLICY_DATA *data;

	for (i = 0; i < sk_X509_POLICY_DATA_num(cache->data); i++) {
		data = sk_X509_POLICY_DATA_value(cache->data, i);
		/* Look for matching nodes in previous level */
		if (!tree_link_matching_nodes(curr, data))
			return 0;
	}
	return 1;
}

/* This corresponds to RFC3280 6.1.3(d)(2):
 * Create new data for any unmatched policies in the parent and link
 * to anyPolicy.
 */

static int
tree_add_unmatched(X509_POLICY_LEVEL *curr, const X509_POLICY_CACHE *cache,
    const ASN1_OBJECT *id, X509_POLICY_NODE *node, X509_POLICY_TREE *tree)
{
	X509_POLICY_DATA *data;

	if (id == NULL)
		id = node->data->valid_policy;
	/* Create a new node with qualifiers from anyPolicy and
	 * id from unmatched node.
	 */
	data = policy_data_new(NULL, id, node_critical(node));

	if (data == NULL)
		return 0;
	/* Curr may not have anyPolicy */
	data->qualifier_set = cache->anyPolicy->qualifier_set;
	data->flags |= POLICY_DATA_FLAG_SHARED_QUALIFIERS;
	if (!level_add_node(curr, data, node, tree, NULL)) {
		policy_data_free(data);
		return 0;
	}

	return 1;
}

static int
tree_link_unmatched(X509_POLICY_LEVEL *curr, const X509_POLICY_CACHE *cache,
    X509_POLICY_NODE *node, X509_POLICY_TREE *tree)
{
	const X509_POLICY_LEVEL *last = curr - 1;
	int i;

	if ((last->flags & X509_V_FLAG_INHIBIT_MAP) ||
	    !(node->data->flags & POLICY_DATA_FLAG_MAPPED)) {
		/* If no policy mapping: matched if one child present */
		if (node->nchild)
			return 1;
		if (!tree_add_unmatched(curr, cache, NULL, node, tree))
			return 0;
		/* Add it */
	} else {
		/* If mapping: matched if one child per expected policy set */
		STACK_OF(ASN1_OBJECT) *expset = node->data->expected_policy_set;
		if (node->nchild == sk_ASN1_OBJECT_num(expset))
			return 1;
		/* Locate unmatched nodes */
		for (i = 0; i < sk_ASN1_OBJECT_num(expset); i++) {
			ASN1_OBJECT *oid = sk_ASN1_OBJECT_value(expset, i);
			if (level_find_node(curr, node, oid))
				continue;
			if (!tree_add_unmatched(curr, cache, oid, node, tree))
				return 0;
		}
	}

	return 1;
}

static int
tree_link_any(X509_POLICY_LEVEL *curr, const X509_POLICY_CACHE *cache,
    X509_POLICY_TREE *tree)
{
	int i;
	X509_POLICY_NODE *node;
	X509_POLICY_LEVEL *last = curr - 1;

	for (i = 0; i < sk_X509_POLICY_NODE_num(last->nodes); i++) {
		node = sk_X509_POLICY_NODE_value(last->nodes, i);

		if (!tree_link_unmatched(curr, cache, node, tree))
			return 0;
	}
	/* Finally add link to anyPolicy */
	if (last->anyPolicy) {
		if (!level_add_node(curr, cache->anyPolicy,
		    last->anyPolicy, NULL, NULL))
			return 0;
	}
	return 1;
}

/* Prune the tree: delete any child mapped child data on the current level
 * then proceed up the tree deleting any data with no children. If we ever
 * have no data on a level we can halt because the tree will be empty.
 */

static int
tree_prune(X509_POLICY_TREE *tree, X509_POLICY_LEVEL *curr)
{
	STACK_OF(X509_POLICY_NODE) *nodes;
	X509_POLICY_NODE *node;
	int i;

	nodes = curr->nodes;
	if (curr->flags & X509_V_FLAG_INHIBIT_MAP) {
		for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--) {
			node = sk_X509_POLICY_NODE_value(nodes, i);
			/* Delete any mapped data: see RFC3280 XXXX */
			if (node->data->flags & POLICY_DATA_FLAG_MAP_MASK) {
				node->parent->nchild--;
				free(node);
				(void)sk_X509_POLICY_NODE_delete(nodes, i);
			}
		}
	}

	for (;;) {
		--curr;
		nodes = curr->nodes;
		for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--) {
			node = sk_X509_POLICY_NODE_value(nodes, i);
			if (node->nchild == 0) {
				node->parent->nchild--;
				free(node);
				(void)sk_X509_POLICY_NODE_delete(nodes, i);
			}
		}
		if (curr->anyPolicy && !curr->anyPolicy->nchild) {
			if (curr->anyPolicy->parent)
				curr->anyPolicy->parent->nchild--;
			free(curr->anyPolicy);
			curr->anyPolicy = NULL;
		}
		if (curr == tree->levels) {
			/* If we zapped anyPolicy at top then tree is empty */
			if (!curr->anyPolicy)
				return 2;
			return 1;
		}
	}

	return 1;
}

static int
tree_add_auth_node(STACK_OF(X509_POLICY_NODE) **pnodes, X509_POLICY_NODE *pcy)
{
	if (!*pnodes) {
		*pnodes = policy_node_cmp_new();
		if (!*pnodes)
			return 0;
	} else if (sk_X509_POLICY_NODE_find(*pnodes, pcy) != -1)
		return 1;

	if (!sk_X509_POLICY_NODE_push(*pnodes, pcy))
		return 0;

	return 1;
}

/* Calculate the authority set based on policy tree.
 * The 'pnodes' parameter is used as a store for the set of policy nodes
 * used to calculate the user set. If the authority set is not anyPolicy
 * then pnodes will just point to the authority set. If however the authority
 * set is anyPolicy then the set of valid policies (other than anyPolicy)
 * is store in pnodes. The return value of '2' is used in this case to indicate
 * that pnodes should be freed.
 */

static int
tree_calculate_authority_set(X509_POLICY_TREE *tree,
    STACK_OF(X509_POLICY_NODE) **pnodes)
{
	X509_POLICY_LEVEL *curr;
	X509_POLICY_NODE *node, *anyptr;
	STACK_OF(X509_POLICY_NODE) **addnodes;
	int i, j;

	curr = tree->levels + tree->nlevel - 1;

	/* If last level contains anyPolicy set is anyPolicy */
	if (curr->anyPolicy) {
		if (!tree_add_auth_node(&tree->auth_policies, curr->anyPolicy))
			return 0;
		addnodes = pnodes;
	} else
		/* Add policies to authority set */
		addnodes = &tree->auth_policies;

	curr = tree->levels;
	for (i = 1; i < tree->nlevel; i++) {
		/* If no anyPolicy node on this this level it can't
		 * appear on lower levels so end search.
		 */
		if (!(anyptr = curr->anyPolicy))
			break;
		curr++;
		for (j = 0; j < sk_X509_POLICY_NODE_num(curr->nodes); j++) {
			node = sk_X509_POLICY_NODE_value(curr->nodes, j);
			if ((node->parent == anyptr) &&
			    !tree_add_auth_node(addnodes, node))
				return 0;
		}
	}

	if (addnodes == pnodes)
		return 2;

	*pnodes = tree->auth_policies;

	return 1;
}

static int
tree_calculate_user_set(X509_POLICY_TREE *tree,
    STACK_OF(ASN1_OBJECT) *policy_oids, STACK_OF(X509_POLICY_NODE) *auth_nodes)
{
	int i;
	X509_POLICY_NODE *node;
	ASN1_OBJECT *oid;
	X509_POLICY_NODE *anyPolicy;
	X509_POLICY_DATA *extra;

	/* Check if anyPolicy present in authority constrained policy set:
	 * this will happen if it is a leaf node.
	 */

	if (sk_ASN1_OBJECT_num(policy_oids) <= 0)
		return 1;

	anyPolicy = tree->levels[tree->nlevel - 1].anyPolicy;

	for (i = 0; i < sk_ASN1_OBJECT_num(policy_oids); i++) {
		oid = sk_ASN1_OBJECT_value(policy_oids, i);
		if (OBJ_obj2nid(oid) == NID_any_policy) {
			tree->flags |= POLICY_FLAG_ANY_POLICY;
			return 1;
		}
	}

	for (i = 0; i < sk_ASN1_OBJECT_num(policy_oids); i++) {
		oid = sk_ASN1_OBJECT_value(policy_oids, i);
		node = tree_find_sk(auth_nodes, oid);
		if (!node) {
			if (!anyPolicy)
				continue;
			/* Create a new node with policy ID from user set
			 * and qualifiers from anyPolicy.
			 */
			extra = policy_data_new(NULL, oid,
			    node_critical(anyPolicy));
			if (!extra)
				return 0;
			extra->qualifier_set = anyPolicy->data->qualifier_set;
			extra->flags = POLICY_DATA_FLAG_SHARED_QUALIFIERS |
			    POLICY_DATA_FLAG_EXTRA_NODE;
			(void) level_add_node(NULL, extra, anyPolicy->parent,
			    tree, &node);
		}
		if (!tree->user_policies) {
			tree->user_policies = sk_X509_POLICY_NODE_new_null();
			if (!tree->user_policies)
				return 1;
		}
		if (!sk_X509_POLICY_NODE_push(tree->user_policies, node))
			return 0;
	}
	return 1;
}

static int
tree_evaluate(X509_POLICY_TREE *tree)
{
	int ret, i;
	X509_POLICY_LEVEL *curr = tree->levels + 1;
	const X509_POLICY_CACHE *cache;

	for (i = 1; i < tree->nlevel; i++, curr++) {
		cache = policy_cache_set(curr->cert);
		if (!tree_link_nodes(curr, cache))
			return 0;

		if (!(curr->flags & X509_V_FLAG_INHIBIT_ANY) &&
		    !tree_link_any(curr, cache, tree))
			return 0;
		tree_print("before tree_prune()", tree, curr);
		ret = tree_prune(tree, curr);
		if (ret != 1)
			return ret;
	}

	return 1;
}

static void
exnode_free(X509_POLICY_NODE *node)
{
	if (node->data && (node->data->flags & POLICY_DATA_FLAG_EXTRA_NODE))
		free(node);
}

void
X509_policy_tree_free(X509_POLICY_TREE *tree)
{
	X509_POLICY_LEVEL *curr;
	int i;

	if (!tree)
		return;

	sk_X509_POLICY_NODE_free(tree->auth_policies);
	sk_X509_POLICY_NODE_pop_free(tree->user_policies, exnode_free);

	for (i = 0, curr = tree->levels; i < tree->nlevel; i++, curr++) {
		X509_free(curr->cert);
		if (curr->nodes)
			sk_X509_POLICY_NODE_pop_free(curr->nodes,
		    policy_node_free);
		if (curr->anyPolicy)
			policy_node_free(curr->anyPolicy);
	}

	if (tree->extra_data)
		sk_X509_POLICY_DATA_pop_free(tree->extra_data,
		    policy_data_free);

	free(tree->levels);
	free(tree);
}

/* Application policy checking function.
 * Return codes:
 *  0 	Internal Error.
 *  1   Successful.
 * -1   One or more certificates contain invalid or inconsistent extensions
 * -2	User constrained policy set empty and requireExplicit true.
 */

int
X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy,
    STACK_OF(X509) *certs, STACK_OF(ASN1_OBJECT) *policy_oids,
    unsigned int flags)
{
	int ret, ret2;
	X509_POLICY_TREE *tree = NULL;
	STACK_OF(X509_POLICY_NODE) *nodes, *auth_nodes = NULL;

	*ptree = NULL;
	*pexplicit_policy = 0;
	ret = tree_init(&tree, certs, flags);

	switch (ret) {

		/* Tree empty requireExplicit False: OK */
	case 2:
		return 1;

		/* Some internal error */
	case -1:
		return -1;

		/* Some internal error */
	case 0:
		return 0;

		/* Tree empty requireExplicit True: Error */

	case 6:
		*pexplicit_policy = 1;
		return -2;

		/* Tree OK requireExplicit True: OK and continue */
	case 5:
		*pexplicit_policy = 1;
		break;

		/* Tree OK: continue */

	case 1:
		if (!tree)
			/*
			 * tree_init() returns success and a null tree
			 * if it's just looking at a trust anchor.
			 * I'm not sure that returning success here is
			 * correct, but I'm sure that reporting this
			 * as an internal error which our caller
			 * interprets as a malloc failure is wrong.
			 */
			return 1;
		break;
	}

	if (!tree)
		goto error;
	ret = tree_evaluate(tree);

	tree_print("tree_evaluate()", tree, NULL);

	if (ret <= 0)
		goto error;

	/* Return value 2 means tree empty */
	if (ret == 2) {
		X509_policy_tree_free(tree);
		if (*pexplicit_policy)
			return -2;
		else
			return 1;
	}

	/* Tree is not empty: continue */

	ret = tree_calculate_authority_set(tree, &auth_nodes);
	if (ret == 0)
		goto error;

	ret2 = tree_calculate_user_set(tree, policy_oids, auth_nodes);

	/* Return value 2 means auth_nodes needs to be freed */
	if (ret == 2)
		sk_X509_POLICY_NODE_free(auth_nodes);

	if (ret2 == 0)
		goto error;

	if (tree)
		*ptree = tree;

	if (*pexplicit_policy) {
		nodes = X509_policy_tree_get0_user_policies(tree);
		if (sk_X509_POLICY_NODE_num(nodes) <= 0)
			return -2;
	}

	return 1;

error:
	X509_policy_tree_free(tree);

	return 0;
}
@


1.16
log
@X509_free(3) is NULL-safe, so remove NULL checks before its calls.

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_tree.c,v 1.15 2015/07/18 00:01:05 beck Exp $ */
d102 3
a104 1
	err = BIO_new_fp(stderr, BIO_NOCLOSE);
@


1.15
log
@Fix leak found by coverity, issue 78897 - which also brough to
light that the child counting was broken in the original code.
this is still fugly, but this preserves all the existing goo.
ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_tree.c,v 1.14 2015/07/15 17:02:03 miod Exp $ */
d642 1
a642 2
		if (curr->cert)
			X509_free(curr->cert);
@


1.14
log
@Memory leak; Coverity CID 78836
ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_tree.c,v 1.13 2015/02/07 13:19:15 doug Exp $ */
d236 1
a236 1
	if (!data || !level_add_node(level, data, NULL, tree))
d300 1
a300 1
			if (!level_add_node(curr, data, node, NULL))
d306 1
a306 1
		if (!level_add_node(curr, data, last->anyPolicy, NULL))
d355 1
a355 1
	if (!level_add_node(curr, data, node, tree)) {
d413 1
a413 1
		    last->anyPolicy, NULL))
d584 2
a585 2
			node = level_add_node(NULL, extra, anyPolicy->parent,
			    tree);
@


1.13
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_tree.c,v 1.12 2014/07/11 08:44:49 jsing Exp $ */
d672 1
a672 1
	int ret;
d742 1
a742 2

	if (!ret)
d745 1
a745 2
	if (!tree_calculate_user_set(tree, policy_oids, auth_nodes))
		goto error;
d747 1
d750 3
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_tree.c,v 1.11 2014/07/09 16:59:33 miod Exp $ */
a155 5
#if 0
	/* Disable policy mapping for now... */
	flags |= X509_V_FLAG_INHIBIT_MAP;
#endif

a324 13
		/* If a node is mapped any it doesn't have a corresponding
		 * CertificatePolicies entry.
		 * However such an identical node would be created
		 * if anyPolicy matching is enabled because there would be
		 * no match with the parent valid_policy_set. So we create
		 * link because then it will have the mapping flags
		 * right and we can prune it later.
		 */
#if 0
		if ((data->flags & POLICY_DATA_FLAG_MAPPED_ANY) &&
		    !(curr->flags & X509_V_FLAG_INHIBIT_ANY))
			continue;
#endif
a400 1
	/*X509_POLICY_DATA *data;*/
a408 30

#if 0

		/* Skip any node with any children: we only want unmathced
		 * nodes.
		 *
		 * Note: need something better for policy mapping
		 * because each node may have multiple children
		 */
		if (node->nchild)
			continue;

		/* Create a new node with qualifiers from anyPolicy and
		 * id from unmatched node.
		 */
		data = policy_data_new(NULL, node->data->valid_policy,
		    node_critical(node));

		if (data == NULL)
			return 0;
		/* Curr may not have anyPolicy */
		data->qualifier_set = cache->anyPolicy->qualifier_set;
		data->flags |= POLICY_DATA_FLAG_SHARED_QUALIFIERS;
		if (!level_add_node(curr, data, node, tree)) {
			policy_data_free(data);
			return 0;
		}

#endif

@


1.11
log
@{malloc,reallocarray} + memset(,0,) -> calloc
ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_tree.c,v 1.10 2014/06/12 15:49:31 deraadt Exp $ */
a58 1
#include "cryptlib.h"
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d223 1
a223 1
	tree->levels = reallocarray(NULL, n, sizeof(X509_POLICY_LEVEL));
a232 2

	memset(tree->levels, 0, n * sizeof(X509_POLICY_LEVEL));
@


1.9
log
@ok, next pass after review:  when possible, put the reallocarray arguments
in the "size_t nmemb, size_t size"
@
text
@d1 1
a1 1
/* pcy_tree.c */
@


1.8
log
@convert 53 malloc(a*b) to reallocarray(NULL, a, b).  that is 53
potential integer overflows easily changed into an allocation return
of NULL, with errno nicely set if need be.  checks for an allocations
returning NULL are commonplace, or if the object is dereferenced
(quite normal) will result in a nice fault which can be detected &
repaired properly.
ok tedu
@
text
@d223 1
a223 1
	tree->levels = reallocarray(NULL, sizeof(X509_POLICY_LEVEL), n);
@


1.7
log
@KNF.
@
text
@d223 1
a223 1
	tree->levels = malloc(sizeof(X509_POLICY_LEVEL) * n);
@


1.6
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d73 6
a78 5
static void expected_print(BIO *err, X509_POLICY_LEVEL *lev,
				X509_POLICY_NODE *node, int indent)
	{
	if (	    (lev->flags & X509_V_FLAG_INHIBIT_MAP)
		|| !(node->data->flags & POLICY_DATA_FLAG_MAP_MASK))
d80 1
a80 2
	else
		{
d85 1
a85 2
		for (i = 0; i < sk_ASN1_OBJECT_num(pset); i++)
			{
d90 1
a90 1
			}
a91 1
		}
d93 1
d95 3
a97 3
static void tree_print(char *str, X509_POLICY_TREE *tree,
			X509_POLICY_LEVEL *curr)
	{
d102 1
d110 1
a110 2
	for (plev = tree->levels; plev != curr; plev++)
		{
d112 2
a113 3
				plev - tree->levels, plev->flags);
		for (i = 0; i < sk_X509_POLICY_NODE_num(plev->nodes); i++)
			{
d118 1
a118 1
			}
d121 1
a121 1
		}
d124 1
a124 2

	}
d140 3
a142 3
static int tree_init(X509_POLICY_TREE **ptree, STACK_OF(X509) *certs,
			unsigned int flags)
	{
d153 1
d184 1
a184 2
	for (i = n - 2; i >= 0; i--)
		{
d199 1
a199 2
		if (explicit_policy > 0)
			{
d202 2
a203 2
			if ((cache->explicit_skip != -1)
				&& (cache->explicit_skip < explicit_policy))
a204 1
			}
d206 1
d208 1
a208 2
	if (ret != 1)
		{
d212 1
a212 1
		}
d229 1
a229 2
	if (!tree->levels)
		{
d232 1
a232 1
		}
d247 1
a247 2
	for (i = n - 2; i >= 0; i--)
		{
d255 1
a255 1
				level->flags |= X509_V_FLAG_INHIBIT_ANY;
d258 1
a258 2
		if (any_skip == 0)
			{
d264 1
a264 3
			}
		else
			{
d267 2
a268 2
			if ((cache->any_skip >= 0)
				&& (cache->any_skip < any_skip))
d270 1
a270 1
			}
d274 1
a274 2
		else
			{
d277 2
a278 2
			if ((cache->map_skip >= 0)
				&& (cache->map_skip < map_skip))
d280 1
a280 1
			}
d282 1
a282 1
		}
d291 1
a291 2
	bad_tree:

d295 1
d297 3
a299 5
	}

static int tree_link_matching_nodes(X509_POLICY_LEVEL *curr,
				const X509_POLICY_DATA *data)
	{
d303 1
d305 1
a305 2
	for (i = 0; i < sk_X509_POLICY_NODE_num(last->nodes); i++)
		{
d307 1
a307 2
		if (policy_node_match(last, node, data->valid_policy))
			{
a310 1
			}
d312 2
a313 2
	if (!matched && last->anyPolicy)
		{
d316 1
a316 1
		}
d318 1
a318 1
	}
d325 3
a327 3
static int tree_link_nodes(X509_POLICY_LEVEL *curr,
				const X509_POLICY_CACHE *cache)
	{
d331 1
a331 2
	for (i = 0; i < sk_X509_POLICY_DATA_num(cache->data); i++)
		{
d334 1
a334 1
		 * CertificatePolicies entry. 
d342 2
a343 2
		if ((data->flags & POLICY_DATA_FLAG_MAPPED_ANY)
			&& !(curr->flags & X509_V_FLAG_INHIBIT_ANY))
d348 2
a349 2
				return 0;
		}
d351 1
a351 1
	}
d358 4
a361 6
static int tree_add_unmatched(X509_POLICY_LEVEL *curr,
			const X509_POLICY_CACHE *cache,
			const ASN1_OBJECT *id,
			X509_POLICY_NODE *node,
			X509_POLICY_TREE *tree)
	{
d363 1
d376 1
a376 2
	if (!level_add_node(curr, data, node, tree))
		{
d379 1
a379 1
		}
d382 1
a382 1
	}
d384 4
a387 5
static int tree_link_unmatched(X509_POLICY_LEVEL *curr,
			const X509_POLICY_CACHE *cache,
			X509_POLICY_NODE *node,
			X509_POLICY_TREE *tree)
	{
d391 2
a392 3
	if (	    (last->flags & X509_V_FLAG_INHIBIT_MAP)
		|| !(node->data->flags & POLICY_DATA_FLAG_MAPPED))
		{
d399 1
a399 3
		}
	else
		{
d405 1
a405 2
		for (i = 0; i < sk_ASN1_OBJECT_num(expset); i++)
			{
a410 2
			}

d412 1
d415 1
d417 4
a420 6
	}

static int tree_link_any(X509_POLICY_LEVEL *curr,
			const X509_POLICY_CACHE *cache,
			X509_POLICY_TREE *tree)
	{
d426 1
a426 2
	for (i = 0; i < sk_X509_POLICY_NODE_num(last->nodes); i++)
		{
d438 1
a438 1
		 * because each node may have multiple children 
d446 2
a447 2
		data = policy_data_new(NULL, node->data->valid_policy, 
						node_critical(node));
d454 1
a454 2
		if (!level_add_node(curr, data, node, tree))
			{
d457 1
a457 1
			}
d461 1
a461 1
		}
d463 1
a463 2
	if (last->anyPolicy)
		{
d465 1
a465 1
						last->anyPolicy, NULL))
d467 1
a467 1
		}
d469 1
a469 1
	}
d476 3
a478 2
static int tree_prune(X509_POLICY_TREE *tree, X509_POLICY_LEVEL *curr)
	{
d482 1
d484 2
a485 4
	if (curr->flags & X509_V_FLAG_INHIBIT_MAP)
		{
		for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--)
			{
d488 1
a488 2
			if (node->data->flags & POLICY_DATA_FLAG_MAP_MASK)
				{
d491 1
a491 2
				(void)sk_X509_POLICY_NODE_delete(nodes,i);
				}
d494 1
d496 1
a496 1
	for(;;)	{
d499 1
a499 2
		for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--)
			{
d501 1
a501 2
			if (node->nchild == 0)
				{
a504 1
				}
d506 2
a507 2
		if (curr->anyPolicy && !curr->anyPolicy->nchild)
			{
d512 2
a513 3
			}
		if (curr == tree->levels)
			{
d516 1
a516 1
					return 2;
a517 1
			}
d519 1
d522 1
d524 4
a527 7
	}

static int tree_add_auth_node(STACK_OF(X509_POLICY_NODE) **pnodes,
						 X509_POLICY_NODE *pcy)
	{
	if (!*pnodes)
		{
d531 1
a531 2
		}
	else if (sk_X509_POLICY_NODE_find(*pnodes, pcy) != -1)
d538 1
a538 2

	}
d549 4
a552 3
static int tree_calculate_authority_set(X509_POLICY_TREE *tree,
					STACK_OF(X509_POLICY_NODE) **pnodes)
	{
d557 1
d561 1
a561 2
	if (curr->anyPolicy)
		{
d565 1
a565 2
		}
	else
d570 1
a570 2
	for (i = 1; i < tree->nlevel; i++)
		{
d577 1
a577 2
		for (j = 0; j < sk_X509_POLICY_NODE_num(curr->nodes); j++)
			{
d579 3
a581 4
			if ((node->parent == anyptr)
				&& !tree_add_auth_node(addnodes, node))
					return 0;
			}
d583 1
d591 1
a591 1
	}
d593 4
a596 4
static int tree_calculate_user_set(X509_POLICY_TREE *tree,
				STACK_OF(ASN1_OBJECT) *policy_oids,
				STACK_OF(X509_POLICY_NODE) *auth_nodes)
	{
a599 1

d612 1
a612 2
	for (i = 0; i < sk_ASN1_OBJECT_num(policy_oids); i++)
		{
d614 1
a614 2
		if (OBJ_obj2nid(oid) == NID_any_policy)
			{
a616 1
			}
d618 1
d620 1
a620 2
	for (i = 0; i < sk_ASN1_OBJECT_num(policy_oids); i++)
		{
d623 1
a623 2
		if (!node)
			{
d630 1
a630 1
						node_critical(anyPolicy));
d634 2
a635 2
			extra->flags = POLICY_DATA_FLAG_SHARED_QUALIFIERS
						| POLICY_DATA_FLAG_EXTRA_NODE;
d637 3
a639 4
						tree);
			}
		if (!tree->user_policies)
			{
d643 1
a643 1
			}
d646 1
a646 1
		}
d648 1
d650 3
a652 4
	}

static int tree_evaluate(X509_POLICY_TREE *tree)
	{
d657 1
a657 2
	for(i = 1; i < tree->nlevel; i++, curr++)
		{
d662 2
a663 2
		if (!(curr->flags & X509_V_FLAG_INHIBIT_ANY)
			&& !tree_link_any(curr, cache, tree))
d665 1
a665 1
	tree_print("before tree_prune()", tree, curr);
d669 1
a669 1
		}
d672 1
d674 3
a676 4
	}

static void exnode_free(X509_POLICY_NODE *node)
	{
d679 1
a679 1
	}
d681 3
a683 3

void X509_policy_tree_free(X509_POLICY_TREE *tree)
	{
d693 1
a693 2
	for(i = 0, curr = tree->levels; i < tree->nlevel; i++, curr++)
		{
d698 1
a698 1
						policy_node_free);
d701 1
a701 1
		}
d705 1
a705 1
						policy_data_free);
d709 1
a709 2

	}
d719 5
a723 5
int X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy,
			STACK_OF(X509) *certs,
			STACK_OF(ASN1_OBJECT) *policy_oids,
			unsigned int flags)
	{
d727 1
a728 1

d732 1
a732 2
	switch (ret)
		{
d735 1
a735 1
		case 2:
d739 1
a739 1
		case -1:
d743 1
a743 1
		case 0:
d748 1
a748 1
		case 6:
d753 1
a753 1
		case 5:
d759 1
a759 1
		case 1:
d771 1
a771 1
		}
d773 2
a774 1
	if (!tree) goto error;
d783 1
a783 2
	if (ret == 2)
		{
d789 1
a789 1
		}
d800 1
a800 1
	
d807 1
a807 2
	if (*pexplicit_policy)
		{
d811 1
a811 1
		}
d815 1
a815 2
	error:

d819 1
a819 3

	}

@


1.5
log
@openssl-1.0.0e: resolve conflicts
@
text
@d222 1
a222 1
	tree = OPENSSL_malloc(sizeof(X509_POLICY_TREE));
d228 1
a228 1
	tree->levels = OPENSSL_malloc(sizeof(X509_POLICY_LEVEL) * n);
d236 1
a236 1
		OPENSSL_free(tree);
d519 1
a519 1
				OPENSSL_free(node);
d534 1
a534 1
				OPENSSL_free(node);
d542 1
a542 1
			OPENSSL_free(curr->anyPolicy);
d724 1
a724 1
		OPENSSL_free(node);
d754 2
a755 2
	OPENSSL_free(tree->levels);
	OPENSSL_free(tree);
@


1.4
log
@resolve conflicts, fix local changes
@
text
@a343 1
	X509_POLICY_LEVEL *last;
d345 1
a345 1
	last = curr - 1;
@


1.3
log
@resolve conflicts
@
text
@d65 69
d159 1
d162 1
d234 1
a234 1
	if (!tree)
a257 1

d286 2
a287 1
			map_skip--;
a292 1

d310 26
a335 1
/* This corresponds to RFC3280 XXXX XXXXX:
a345 1
	X509_POLICY_NODE *parent;
d358 1
d362 3
a364 6
		/* Look for matching node in parent */
		parent = level_find_node(last, data->valid_policy);
		/* If no match link to anyPolicy */
		if (!parent)
			parent = last->anyPolicy;
		if (parent && !level_add_node(curr, data, parent, NULL))
d370 1
a370 1
/* This corresponds to RFC3280 XXXX XXXXX:
d375 68
d448 1
a448 1
	X509_POLICY_DATA *data;
d450 1
a450 3
	X509_POLICY_LEVEL *last;

	last = curr - 1;
d456 5
d469 1
d486 3
d507 1
d510 2
a511 1
	for (i = sk_X509_POLICY_NODE_num(curr->nodes) - 1; i >= 0; i--)
d513 10
a522 7
		node = sk_X509_POLICY_NODE_value(curr->nodes, i);
		/* Delete any mapped data: see RFC3280 XXXX */
		if (node->data->flags & POLICY_DATA_FLAG_MAP_MASK)
			{
			node->parent->nchild--;
			OPENSSL_free(node);
			(void)sk_X509_POLICY_NODE_delete(curr->nodes, i);
d528 2
a529 1
		for (i = sk_X509_POLICY_NODE_num(curr->nodes) - 1; i >= 0; i--)
d531 1
a531 1
			node = sk_X509_POLICY_NODE_value(curr->nodes, i);
d536 1
a536 1
				(void)sk_X509_POLICY_NODE_delete(curr->nodes, i);
d712 1
a780 1

d789 4
d825 2
@


1.2
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.1
log
@Initial revision
@
text
@d133 3
a135 3
			explicit_policy--;
			if (!(x->ex_flags & EXFLAG_SS)
				&& (cache->explicit_skip != -1)
d200 1
a200 1
			if (!(x->ex_flags & EXFLAG_SS) || (i == 0))
d205 3
a207 2
			any_skip--;
			if ((cache->any_skip > 0)
d217 1
a217 1
			if ((cache->map_skip > 0)
d314 2
a315 1
		data->qualifier_set = curr->anyPolicy->data->qualifier_set;
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
d133 3
a135 3
			if (!(x->ex_flags & EXFLAG_SI))
				explicit_policy--;
			if ((cache->explicit_skip != -1)
d200 1
a200 1
			if (!(x->ex_flags & EXFLAG_SI) || (i == 0))
d205 2
a206 3
			if (!(x->ex_flags & EXFLAG_SI))
				any_skip--;
			if ((cache->any_skip >= 0)
d216 1
a216 1
			if ((cache->map_skip >= 0)
d313 1
a313 2
		/* Curr may not have anyPolicy */
		data->qualifier_set = cache->anyPolicy->qualifier_set;
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@a64 69
/* Enable this to print out the complete policy tree at various point during
 * evaluation.
 */

/*#define OPENSSL_POLICY_DEBUG*/

#ifdef OPENSSL_POLICY_DEBUG

static void expected_print(BIO *err, X509_POLICY_LEVEL *lev,
				X509_POLICY_NODE *node, int indent)
	{
	if (	    (lev->flags & X509_V_FLAG_INHIBIT_MAP)
		|| !(node->data->flags & POLICY_DATA_FLAG_MAP_MASK))
		BIO_puts(err, "  Not Mapped\n");
	else
		{
		int i;
		STACK_OF(ASN1_OBJECT) *pset = node->data->expected_policy_set;
		ASN1_OBJECT *oid;
		BIO_puts(err, "  Expected: ");
		for (i = 0; i < sk_ASN1_OBJECT_num(pset); i++)
			{
			oid = sk_ASN1_OBJECT_value(pset, i);
			if (i)
				BIO_puts(err, ", ");
			i2a_ASN1_OBJECT(err, oid);
			}
		BIO_puts(err, "\n");
		}
	}

static void tree_print(char *str, X509_POLICY_TREE *tree,
			X509_POLICY_LEVEL *curr)
	{
	X509_POLICY_LEVEL *plev;
	X509_POLICY_NODE *node;
	int i;
	BIO *err;
	err = BIO_new_fp(stderr, BIO_NOCLOSE);
	if (!curr)
		curr = tree->levels + tree->nlevel;
	else
		curr++;
	BIO_printf(err, "Level print after %s\n", str);
	BIO_printf(err, "Printing Up to Level %ld\n", curr - tree->levels);
	for (plev = tree->levels; plev != curr; plev++)
		{
		BIO_printf(err, "Level %ld, flags = %x\n",
				plev - tree->levels, plev->flags);
		for (i = 0; i < sk_X509_POLICY_NODE_num(plev->nodes); i++)
			{
			node = sk_X509_POLICY_NODE_value(plev->nodes, i);
			X509_POLICY_NODE_print(err, node, 2);
			expected_print(err, plev, node, 2);
			BIO_printf(err, "  Flags: %x\n", node->data->flags);
			}
		if (plev->anyPolicy)
			X509_POLICY_NODE_print(err, plev->anyPolicy, 2);
		}

	BIO_free(err);

	}
#else

#define tree_print(a,b,c) /* */

#endif

a89 1
#if 0
a91 1
#endif
d163 1
a163 1
	if (!tree->levels)
d187 1
d216 1
a216 2
			if (!(x->ex_flags & EXFLAG_SI))
				map_skip--;
d222 1
d240 1
a240 26
static int tree_link_matching_nodes(X509_POLICY_LEVEL *curr,
				const X509_POLICY_DATA *data)
	{
	X509_POLICY_LEVEL *last = curr - 1;
	X509_POLICY_NODE *node;
	int i, matched = 0;
	/* Iterate through all in nodes linking matches */
	for (i = 0; i < sk_X509_POLICY_NODE_num(last->nodes); i++)
		{
		node = sk_X509_POLICY_NODE_value(last->nodes, i);
		if (policy_node_match(last, node, data->valid_policy))
			{
			if (!level_add_node(curr, data, node, NULL))
				return 0;
			matched = 1;
			}
		}
	if (!matched && last->anyPolicy)
		{
		if (!level_add_node(curr, data, last->anyPolicy, NULL))
			return 0;
		}
	return 1;
	}

/* This corresponds to RFC3280 6.1.3(d)(1):
d251 1
a263 1
#if 0
d267 6
a272 3
#endif
		/* Look for matching nodes in previous level */
		if (!tree_link_matching_nodes(curr, data))
d278 1
a278 1
/* This corresponds to RFC3280 6.1.3(d)(2):
a282 68
static int tree_add_unmatched(X509_POLICY_LEVEL *curr,
			const X509_POLICY_CACHE *cache,
			const ASN1_OBJECT *id,
			X509_POLICY_NODE *node,
			X509_POLICY_TREE *tree)
	{
	X509_POLICY_DATA *data;
	if (id == NULL)
		id = node->data->valid_policy;
	/* Create a new node with qualifiers from anyPolicy and
	 * id from unmatched node.
	 */
	data = policy_data_new(NULL, id, node_critical(node));

	if (data == NULL)
		return 0;
	/* Curr may not have anyPolicy */
	data->qualifier_set = cache->anyPolicy->qualifier_set;
	data->flags |= POLICY_DATA_FLAG_SHARED_QUALIFIERS;
	if (!level_add_node(curr, data, node, tree))
		{
		policy_data_free(data);
		return 0;
		}

	return 1;
	}

static int tree_link_unmatched(X509_POLICY_LEVEL *curr,
			const X509_POLICY_CACHE *cache,
			X509_POLICY_NODE *node,
			X509_POLICY_TREE *tree)
	{
	const X509_POLICY_LEVEL *last = curr - 1;
	int i;

	if (	    (last->flags & X509_V_FLAG_INHIBIT_MAP)
		|| !(node->data->flags & POLICY_DATA_FLAG_MAPPED))
		{
		/* If no policy mapping: matched if one child present */
		if (node->nchild)
			return 1;
		if (!tree_add_unmatched(curr, cache, NULL, node, tree))
			return 0;
		/* Add it */
		}
	else
		{
		/* If mapping: matched if one child per expected policy set */
		STACK_OF(ASN1_OBJECT) *expset = node->data->expected_policy_set;
		if (node->nchild == sk_ASN1_OBJECT_num(expset))
			return 1;
		/* Locate unmatched nodes */
		for (i = 0; i < sk_ASN1_OBJECT_num(expset); i++)
			{
			ASN1_OBJECT *oid = sk_ASN1_OBJECT_value(expset, i);
			if (level_find_node(curr, node, oid))
				continue;
			if (!tree_add_unmatched(curr, cache, oid, node, tree))
				return 0;
			}

		}

	return 1;

	}

d288 1
a288 1
	/*X509_POLICY_DATA *data;*/
d290 3
a292 1
	X509_POLICY_LEVEL *last = curr - 1;
a297 5
		if (!tree_link_unmatched(curr, cache, node, tree))
			return 0;

#if 0

a305 1

a321 3

#endif

a339 1
	STACK_OF(X509_POLICY_NODE) *nodes;
d342 1
a342 2
	nodes = curr->nodes;
	if (curr->flags & X509_V_FLAG_INHIBIT_MAP)
d344 7
a350 10
		for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--)
			{
			node = sk_X509_POLICY_NODE_value(nodes, i);
			/* Delete any mapped data: see RFC3280 XXXX */
			if (node->data->flags & POLICY_DATA_FLAG_MAP_MASK)
				{
				node->parent->nchild--;
				OPENSSL_free(node);
				(void)sk_X509_POLICY_NODE_delete(nodes,i);
				}
d356 1
a356 2
		nodes = curr->nodes;
		for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--)
d358 1
a358 1
			node = sk_X509_POLICY_NODE_value(nodes, i);
d363 1
a363 1
				(void)sk_X509_POLICY_NODE_delete(nodes, i);
a538 1
	tree_print("before tree_prune()", tree, curr);
d607 1
a615 4
		case -1:
		return -1;

		/* Some internal error */
a647 2

	tree_print("tree_evaluate()", tree, NULL);
@


1.1.1.4
log
@import OpenSSL 1.0.0e
@
text
@d344 1
d346 1
a346 1

@


