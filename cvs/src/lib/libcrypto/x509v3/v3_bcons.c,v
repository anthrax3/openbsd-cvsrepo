head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.14;
commitid	kT0fLt3r4lroFJra;

1.14
date	2016.12.30.15.54.49;	author jsing;	state Exp;
branches;
next	1.13;
commitid	kn1H5Mumrqi1t2NN;

1.13
date	2015.07.29.16.13.48;	author jsing;	state Exp;
branches;
next	1.12;
commitid	p0YErzIitgRtixdM;

1.12
date	2015.07.25.16.00.14;	author jsing;	state Exp;
branches;
next	1.11;
commitid	IQmUl7Av61G6tr84;

1.11
date	2015.02.09.16.03.11;	author jsing;	state Exp;
branches;
next	1.10;
commitid	xIhBiKP17QbaVYG2;

1.10
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.8;
commitid	id8dTrTMtnTn4fqt;

1.8
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.04.21.14.27.06;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.12.17;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.53;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.01;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: v3_bcons.c,v 1.14 2016/12/30 15:54:49 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/x509v3.h>

static STACK_OF(CONF_VALUE) *i2v_BASIC_CONSTRAINTS(X509V3_EXT_METHOD *method,
    BASIC_CONSTRAINTS *bcons, STACK_OF(CONF_VALUE) *extlist);
static BASIC_CONSTRAINTS *v2i_BASIC_CONSTRAINTS(X509V3_EXT_METHOD *method,
    X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values);

const X509V3_EXT_METHOD v3_bcons = {
	.ext_nid = NID_basic_constraints,
	.ext_flags = 0,
	.it = &BASIC_CONSTRAINTS_it,
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = (X509V3_EXT_I2V)i2v_BASIC_CONSTRAINTS,
	.v2i = (X509V3_EXT_V2I)v2i_BASIC_CONSTRAINTS,
	.i2r = NULL,
	.r2i = NULL,
	.usr_data = NULL,
};

static const ASN1_TEMPLATE BASIC_CONSTRAINTS_seq_tt[] = {
	{
		.flags = ASN1_TFLG_OPTIONAL,
		.tag = 0,
		.offset = offsetof(BASIC_CONSTRAINTS, ca),
		.field_name = "ca",
		.item = &ASN1_FBOOLEAN_it,
	},
	{
		.flags = ASN1_TFLG_OPTIONAL,
		.tag = 0,
		.offset = offsetof(BASIC_CONSTRAINTS, pathlen),
		.field_name = "pathlen",
		.item = &ASN1_INTEGER_it,
	},
};

const ASN1_ITEM BASIC_CONSTRAINTS_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = BASIC_CONSTRAINTS_seq_tt,
	.tcount = sizeof(BASIC_CONSTRAINTS_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(BASIC_CONSTRAINTS),
	.sname = "BASIC_CONSTRAINTS",
};


BASIC_CONSTRAINTS *
d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS **a, const unsigned char **in, long len)
{
	return (BASIC_CONSTRAINTS *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &BASIC_CONSTRAINTS_it);
}

int
i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &BASIC_CONSTRAINTS_it);
}

BASIC_CONSTRAINTS *
BASIC_CONSTRAINTS_new(void)
{
	return (BASIC_CONSTRAINTS *)ASN1_item_new(&BASIC_CONSTRAINTS_it);
}

void
BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &BASIC_CONSTRAINTS_it);
}


static STACK_OF(CONF_VALUE) *
i2v_BASIC_CONSTRAINTS(X509V3_EXT_METHOD *method, BASIC_CONSTRAINTS *bcons,
    STACK_OF(CONF_VALUE) *extlist)
{
	X509V3_add_value_bool("CA", bcons->ca, &extlist);
	X509V3_add_value_int("pathlen", bcons->pathlen, &extlist);
	return extlist;
}

static BASIC_CONSTRAINTS *
v2i_BASIC_CONSTRAINTS(X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    STACK_OF(CONF_VALUE) *values)
{
	BASIC_CONSTRAINTS *bcons = NULL;
	CONF_VALUE *val;
	int i;

	if (!(bcons = BASIC_CONSTRAINTS_new())) {
		X509V3error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	for (i = 0; i < sk_CONF_VALUE_num(values); i++) {
		val = sk_CONF_VALUE_value(values, i);
		if (!strcmp(val->name, "CA")) {
			if (!X509V3_get_value_bool(val, &bcons->ca))
				goto err;
		} else if (!strcmp(val->name, "pathlen")) {
			if (!X509V3_get_value_int(val, &bcons->pathlen))
				goto err;
		} else {
			X509V3error(X509V3_R_INVALID_NAME);
			X509V3_conf_err(val);
			goto err;
		}
	}
	return bcons;

err:
	BASIC_CONSTRAINTS_free(bcons);
	return NULL;
}
@


1.14
log
@Expand ASN1_ITEM_ref and ASN1_ITEM_ptr macros - no change in generated
assembly. Of particular interest is ASN1_ITEM_ptr which does nothing
and resulted in code like:

  if (method->it)
    ASN1_ITEM_free(..., ASN1_ITEM_ptr(method->it));
@
text
@d1 1
a1 1
/* $OpenBSD: v3_bcons.c,v 1.13 2015/07/29 16:13:48 jsing Exp $ */
d162 1
a162 1
		X509V3err(X509V3_F_V2I_BASIC_CONSTRAINTS, ERR_R_MALLOC_FAILURE);
d174 1
a174 2
			X509V3err(X509V3_F_V2I_BASIC_CONSTRAINTS,
			    X509V3_R_INVALID_NAME);
@


1.13
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_bcons.c,v 1.12 2015/07/25 16:00:14 jsing Exp $ */
d76 1
a76 1
	.it = ASN1_ITEM_ref(BASIC_CONSTRAINTS),
@


1.12
log
@Expand ASN.1 template macros - the generated assembly only differs by
changes to line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_bcons.c,v 1.11 2015/02/09 16:03:11 jsing Exp $ */
d74 14
a87 8
	NID_basic_constraints, 0,
	ASN1_ITEM_ref(BASIC_CONSTRAINTS),
	0, 0, 0, 0,
	0, 0,
	(X509V3_EXT_I2V)i2v_BASIC_CONSTRAINTS,
	(X509V3_EXT_V2I)v2i_BASIC_CONSTRAINTS,
	NULL, NULL,
	NULL
@


1.11
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_bcons.c,v 1.10 2014/07/11 08:44:49 jsing Exp $ */
d84 26
a109 4
ASN1_SEQUENCE(BASIC_CONSTRAINTS) = {
	ASN1_OPT(BASIC_CONSTRAINTS, ca, ASN1_FBOOLEAN),
	ASN1_OPT(BASIC_CONSTRAINTS, pathlen, ASN1_INTEGER)
} ASN1_SEQUENCE_END(BASIC_CONSTRAINTS)
@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_bcons.c,v 1.9 2014/07/10 13:58:23 jsing Exp $ */
d89 25
a113 1
IMPLEMENT_ASN1_FUNCTIONS(BASIC_CONSTRAINTS)
@


1.9
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_bcons.c,v 1.8 2014/06/12 15:49:31 deraadt Exp $ */
a61 1
#include "cryptlib.h"
d65 1
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 2
a61 1
#include <stdio.h>
@


1.7
log
@KNF.
@
text
@d1 1
a1 1
/* v3_bcons.c */
@


1.6
log
@resolve conflicts
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 4
a70 2
static STACK_OF(CONF_VALUE) *i2v_BASIC_CONSTRAINTS(X509V3_EXT_METHOD *method, BASIC_CONSTRAINTS *bcons, STACK_OF(CONF_VALUE) *extlist);
static BASIC_CONSTRAINTS *v2i_BASIC_CONSTRAINTS(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values);
d73 8
a80 8
NID_basic_constraints, 0,
ASN1_ITEM_ref(BASIC_CONSTRAINTS),
0,0,0,0,
0,0,
(X509V3_EXT_I2V)i2v_BASIC_CONSTRAINTS,
(X509V3_EXT_V2I)v2i_BASIC_CONSTRAINTS,
NULL,NULL,
NULL
d91 3
a93 2
static STACK_OF(CONF_VALUE) *i2v_BASIC_CONSTRAINTS(X509V3_EXT_METHOD *method,
	     BASIC_CONSTRAINTS *bcons, STACK_OF(CONF_VALUE) *extlist)
d100 3
a102 2
static BASIC_CONSTRAINTS *v2i_BASIC_CONSTRAINTS(X509V3_EXT_METHOD *method,
	     X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values)
d104 1
a104 1
	BASIC_CONSTRAINTS *bcons=NULL;
d107 2
a108 1
	if(!(bcons = BASIC_CONSTRAINTS_new())) {
d112 1
a112 1
	for(i = 0; i < sk_CONF_VALUE_num(values); i++) {
d114 6
a119 4
		if(!strcmp(val->name, "CA")) {
			if(!X509V3_get_value_bool(val, &bcons->ca)) goto err;
		} else if(!strcmp(val->name, "pathlen")) {
			if(!X509V3_get_value_int(val, &bcons->pathlen)) goto err;
d121 2
a122 1
			X509V3err(X509V3_F_V2I_BASIC_CONSTRAINTS, X509V3_R_INVALID_NAME);
d128 2
a129 1
	err:
a132 1

@


1.5
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d70 1
a70 1
X509V3_EXT_METHOD v3_bcons = {
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d63 1
a63 1
#include <openssl/asn1_mac.h>
d72 3
a74 5
(X509V3_EXT_NEW)BASIC_CONSTRAINTS_new,
(X509V3_EXT_FREE)BASIC_CONSTRAINTS_free,
(X509V3_EXT_D2I)d2i_BASIC_CONSTRAINTS,
(X509V3_EXT_I2D)i2d_BASIC_CONSTRAINTS,
NULL, NULL,
d81 4
d86 1
a86 5
int i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);
	if(a->ca) M_ASN1_I2D_len (a->ca, i2d_ASN1_BOOLEAN);
	M_ASN1_I2D_len (a->pathlen, i2d_ASN1_INTEGER);
a87 38
	M_ASN1_I2D_seq_total();

	if (a->ca) M_ASN1_I2D_put (a->ca, i2d_ASN1_BOOLEAN);
	M_ASN1_I2D_put (a->pathlen, i2d_ASN1_INTEGER);
	M_ASN1_I2D_finish();
}

BASIC_CONSTRAINTS *BASIC_CONSTRAINTS_new(void)
{
	BASIC_CONSTRAINTS *ret=NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, BASIC_CONSTRAINTS);
	ret->ca = 0;
	ret->pathlen = NULL;
	return (ret);
	M_ASN1_New_Error(ASN1_F_BASIC_CONSTRAINTS_NEW);
}

BASIC_CONSTRAINTS *d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS **a,
	     unsigned char **pp, long length)
{
	M_ASN1_D2I_vars(a,BASIC_CONSTRAINTS *,BASIC_CONSTRAINTS_new);
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	if((M_ASN1_next & (~V_ASN1_CONSTRUCTED)) ==
		 (V_ASN1_UNIVERSAL|V_ASN1_BOOLEAN) ) {
			M_ASN1_D2I_get_int (ret->ca, d2i_ASN1_BOOLEAN);
	}
	M_ASN1_D2I_get_opt (ret->pathlen, d2i_ASN1_INTEGER, V_ASN1_INTEGER);
	M_ASN1_D2I_Finish(a, BASIC_CONSTRAINTS_free, ASN1_F_D2I_BASIC_CONSTRAINTS);
}

void BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS *a)
{
	if (a == NULL) return;
	M_ASN1_INTEGER_free (a->pathlen);
	OPENSSL_free (a);
}
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d126 1
a126 1
	Free (a);
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d125 2
a126 2
	ASN1_INTEGER_free (a->pathlen);
	Free ((char *)a);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d63 1
a63 1
#include <openssl/asn1t.h>
d72 5
a76 3
ASN1_ITEM_ref(BASIC_CONSTRAINTS),
0,0,0,0,
0,0,
a82 4
ASN1_SEQUENCE(BASIC_CONSTRAINTS) = {
	ASN1_OPT(BASIC_CONSTRAINTS, ca, ASN1_FBOOLEAN),
	ASN1_OPT(BASIC_CONSTRAINTS, pathlen, ASN1_INTEGER)
} ASN1_SEQUENCE_END(BASIC_CONSTRAINTS)
d84 5
a88 1
IMPLEMENT_ASN1_FUNCTIONS(BASIC_CONSTRAINTS)
d90 38
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d70 1
a70 1
const X509V3_EXT_METHOD v3_bcons = {
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


