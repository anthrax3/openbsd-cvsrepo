head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.14;
commitid	kT0fLt3r4lroFJra;

1.14
date	2016.12.30.15.54.49;	author jsing;	state Exp;
branches;
next	1.13;
commitid	kn1H5Mumrqi1t2NN;

1.13
date	2015.07.29.16.13.48;	author jsing;	state Exp;
branches;
next	1.12;
commitid	p0YErzIitgRtixdM;

1.12
date	2015.07.25.16.00.14;	author jsing;	state Exp;
branches;
next	1.11;
commitid	IQmUl7Av61G6tr84;

1.11
date	2015.02.09.16.03.11;	author jsing;	state Exp;
branches;
next	1.10;
commitid	xIhBiKP17QbaVYG2;

1.10
date	2014.10.28.05.46.56;	author miod;	state Exp;
branches;
next	1.9;
commitid	hDZmp09ZEY5wcTE1;

1.9
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.04.21.16.49.02;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.54;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.02;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: v3_extku.c,v 1.14 2016/12/30 15:54:49 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/asn1t.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/x509v3.h>

static void *v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
    X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval);
static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(
    const X509V3_EXT_METHOD *method, void *eku, STACK_OF(CONF_VALUE) *extlist);

const X509V3_EXT_METHOD v3_ext_ku = {
	.ext_nid = NID_ext_key_usage,
	.ext_flags = 0,
	.it = &EXTENDED_KEY_USAGE_it,
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = i2v_EXTENDED_KEY_USAGE,
	.v2i = v2i_EXTENDED_KEY_USAGE,
	.i2r = NULL,
	.r2i = NULL,
	.usr_data = NULL,
};

/* NB OCSP acceptable responses also is a SEQUENCE OF OBJECT */
const X509V3_EXT_METHOD v3_ocsp_accresp = {
	.ext_nid = NID_id_pkix_OCSP_acceptableResponses,
	.ext_flags = 0,
	.it = &EXTENDED_KEY_USAGE_it,
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = i2v_EXTENDED_KEY_USAGE,
	.v2i = v2i_EXTENDED_KEY_USAGE,
	.i2r = NULL,
	.r2i = NULL,
	.usr_data = NULL,
};

static const ASN1_TEMPLATE EXTENDED_KEY_USAGE_item_tt = {
	.flags = ASN1_TFLG_SEQUENCE_OF,
	.tag = 0,
	.offset = 0,
	.field_name = "EXTENDED_KEY_USAGE",
	.item = &ASN1_OBJECT_it,
};

const ASN1_ITEM EXTENDED_KEY_USAGE_it = {
	.itype = ASN1_ITYPE_PRIMITIVE,
	.utype = -1,
	.templates = &EXTENDED_KEY_USAGE_item_tt,
	.tcount = 0,
	.funcs = NULL,
	.size = 0,
	.sname = "EXTENDED_KEY_USAGE",
};


EXTENDED_KEY_USAGE *
d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE **a, const unsigned char **in, long len)
{
	return (EXTENDED_KEY_USAGE *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &EXTENDED_KEY_USAGE_it);
}

int
i2d_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &EXTENDED_KEY_USAGE_it);
}

EXTENDED_KEY_USAGE *
EXTENDED_KEY_USAGE_new(void)
{
	return (EXTENDED_KEY_USAGE *)ASN1_item_new(&EXTENDED_KEY_USAGE_it);
}

void
EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &EXTENDED_KEY_USAGE_it);
}

static STACK_OF(CONF_VALUE) *
i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method, void *a,
    STACK_OF(CONF_VALUE) *ext_list)
{
	EXTENDED_KEY_USAGE *eku = a;
	int i;
	ASN1_OBJECT *obj;
	char obj_tmp[80];

	for (i = 0; i < sk_ASN1_OBJECT_num(eku); i++) {
		obj = sk_ASN1_OBJECT_value(eku, i);
		i2t_ASN1_OBJECT(obj_tmp, 80, obj);
		X509V3_add_value(NULL, obj_tmp, &ext_list);
	}
	return ext_list;
}

static void *
v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
    STACK_OF(CONF_VALUE) *nval)
{
	EXTENDED_KEY_USAGE *extku;
	char *extval;
	ASN1_OBJECT *objtmp;
	CONF_VALUE *val;
	int i;

	if (!(extku = sk_ASN1_OBJECT_new_null())) {
		X509V3error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}

	for (i = 0; i < sk_CONF_VALUE_num(nval); i++) {
		val = sk_CONF_VALUE_value(nval, i);
		if (val->value)
			extval = val->value;
		else
			extval = val->name;
		if (!(objtmp = OBJ_txt2obj(extval, 0))) {
			sk_ASN1_OBJECT_pop_free(extku, ASN1_OBJECT_free);
			X509V3error(X509V3_R_INVALID_OBJECT_IDENTIFIER);
			X509V3_conf_err(val);
			return NULL;
		}
		if (sk_ASN1_OBJECT_push(extku, objtmp) == 0) {
			ASN1_OBJECT_free(objtmp);
			sk_ASN1_OBJECT_pop_free(extku, ASN1_OBJECT_free);
			X509V3error(ERR_R_MALLOC_FAILURE);
			return NULL;
		}
	}
	return extku;
}
@


1.14
log
@Expand ASN1_ITEM_ref and ASN1_ITEM_ptr macros - no change in generated
assembly. Of particular interest is ASN1_ITEM_ptr which does nothing
and resulted in code like:

  if (method->it)
    ASN1_ITEM_free(..., ASN1_ITEM_ptr(method->it));
@
text
@d1 1
a1 1
/* $OpenBSD: v3_extku.c,v 1.13 2015/07/29 16:13:48 jsing Exp $ */
d178 1
a178 2
		X509V3err(X509V3_F_V2I_EXTENDED_KEY_USAGE,
		    ERR_R_MALLOC_FAILURE);
d190 1
a190 2
			X509V3err(X509V3_F_V2I_EXTENDED_KEY_USAGE,
			    X509V3_R_INVALID_OBJECT_IDENTIFIER);
d197 1
a197 2
			X509V3err(X509V3_F_V2I_EXTENDED_KEY_USAGE,
			    ERR_R_MALLOC_FAILURE);
@


1.13
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_extku.c,v 1.12 2015/07/25 16:00:14 jsing Exp $ */
d74 1
a74 1
	.it = ASN1_ITEM_ref(EXTENDED_KEY_USAGE),
d92 1
a92 1
	.it = ASN1_ITEM_ref(EXTENDED_KEY_USAGE),
@


1.12
log
@Expand ASN.1 template macros - the generated assembly only differs by
changes to line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_extku.c,v 1.11 2015/02/09 16:03:11 jsing Exp $ */
d72 14
a85 8
	NID_ext_key_usage, 0,
	ASN1_ITEM_ref(EXTENDED_KEY_USAGE),
	0, 0, 0, 0,
	0, 0,
	i2v_EXTENDED_KEY_USAGE,
	v2i_EXTENDED_KEY_USAGE,
	0, 0,
	NULL
d90 14
a103 8
	NID_id_pkix_OCSP_acceptableResponses, 0,
	ASN1_ITEM_ref(EXTENDED_KEY_USAGE),
	0, 0, 0, 0,
	0, 0,
	i2v_EXTENDED_KEY_USAGE,
	v2i_EXTENDED_KEY_USAGE,
	0, 0,
	NULL
@


1.11
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_extku.c,v 1.10 2014/10/28 05:46:56 miod Exp $ */
d94 17
a110 4
ASN1_ITEM_TEMPLATE(EXTENDED_KEY_USAGE) =
    ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, EXTENDED_KEY_USAGE,
	ASN1_OBJECT)
ASN1_ITEM_TEMPLATE_END(EXTENDED_KEY_USAGE)
@


1.10
log
@Check the result of sk_*_push() operations for failure.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_extku.c,v 1.9 2014/07/11 08:44:49 jsing Exp $ */
d99 25
a123 1
IMPLEMENT_ASN1_FUNCTIONS(EXTENDED_KEY_USAGE)
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_extku.c,v 1.8 2014/06/12 15:49:31 deraadt Exp $ */
d147 7
a153 1
		sk_ASN1_OBJECT_push(extku, objtmp);
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
a60 2
#include <stdio.h>
#include "cryptlib.h"
d63 1
@


1.7
log
@KNF.
@
text
@d1 1
a1 1
/* v3_extku.c */
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 3
a69 4
				    X509V3_CTX *ctx,
				    STACK_OF(CONF_VALUE) *nval);
static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
		void *eku, STACK_OF(CONF_VALUE) *extlist);
d74 2
a75 2
	0,0,0,0,
	0,0,
d78 1
a78 1
	0,0,
d86 2
a87 2
	0,0,0,0,
	0,0,
d90 1
a90 1
	0,0,
d94 3
a96 2
ASN1_ITEM_TEMPLATE(EXTENDED_KEY_USAGE) = 
	ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, EXTENDED_KEY_USAGE, ASN1_OBJECT)
d102 2
a103 2
  i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method, void *a,
			 STACK_OF(CONF_VALUE) *ext_list)
d109 2
a110 1
	for(i = 0; i < sk_ASN1_OBJECT_num(eku); i++) {
d118 3
a120 2
static void *v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
				    X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
d128 3
a130 2
	if(!(extku = sk_ASN1_OBJECT_new_null())) {
		X509V3err(X509V3_F_V2I_EXTENDED_KEY_USAGE,ERR_R_MALLOC_FAILURE);
d134 1
a134 1
	for(i = 0; i < sk_CONF_VALUE_num(nval); i++) {
d136 5
a140 3
		if(val->value) extval = val->value;
		else extval = val->name;
		if(!(objtmp = OBJ_txt2obj(extval, 0))) {
d142 2
a143 1
			X509V3err(X509V3_F_V2I_EXTENDED_KEY_USAGE,X509V3_R_INVALID_OBJECT_IDENTIFIER);
@


1.5
log
@resolve conflicts
@
text
@d66 4
a69 3
static void *v2i_EXTENDED_KEY_USAGE(X509V3_EXT_METHOD *method,
				X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval);
static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(X509V3_EXT_METHOD *method,
d101 3
a103 2
static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(X509V3_EXT_METHOD *method,
		void *a, STACK_OF(CONF_VALUE) *ext_list)
d117 2
a118 2
static void *v2i_EXTENDED_KEY_USAGE(X509V3_EXT_METHOD *method,
				X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
@


1.4
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d71 1
a71 1
X509V3_EXT_METHOD v3_ext_ku = {
d83 1
a83 1
X509V3_EXT_METHOD v3_ocsp_accresp = {
d125 1
a125 1
		X509V3err(X509V3_F_V2I_EXT_KU,ERR_R_MALLOC_FAILURE);
d135 1
a135 1
			X509V3err(X509V3_F_V2I_EXT_KU,X509V3_R_INVALID_OBJECT_IDENTIFIER);
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d62 1
a62 1
#include <openssl/asn1.h>
d66 1
a66 1
static STACK_OF(ASN1_OBJECT) *v2i_ext_ku(X509V3_EXT_METHOD *method,
d68 3
a70 2
static STACK_OF(CONF_VALUE) *i2v_ext_ku(X509V3_EXT_METHOD *method,
		STACK_OF(ASN1_OBJECT) *eku, STACK_OF(CONF_VALUE) *extlist);
d72 8
a79 10
NID_ext_key_usage, 0,
(X509V3_EXT_NEW)ext_ku_new,
(X509V3_EXT_FREE)ext_ku_free,
(X509V3_EXT_D2I)d2i_ext_ku,
(X509V3_EXT_I2D)i2d_ext_ku,
NULL, NULL,
(X509V3_EXT_I2V)i2v_ext_ku,
(X509V3_EXT_V2I)v2i_ext_ku,
NULL,NULL,
NULL
d82 11
a92 4
STACK_OF(ASN1_OBJECT) *ext_ku_new(void)
{
	return sk_ASN1_OBJECT_new_null();
}
d94 19
a112 17
void ext_ku_free(STACK_OF(ASN1_OBJECT) *eku)
{
	sk_ASN1_OBJECT_pop_free(eku, ASN1_OBJECT_free);
	return;
}

int i2d_ext_ku(STACK_OF(ASN1_OBJECT) *a, unsigned char **pp)
{
	return i2d_ASN1_SET_OF_ASN1_OBJECT(a, pp, i2d_ASN1_OBJECT,
				V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL, IS_SEQUENCE);
}

STACK_OF(ASN1_OBJECT) *d2i_ext_ku(STACK_OF(ASN1_OBJECT) **a,
					unsigned char **pp, long length)
{
	return d2i_ASN1_SET_OF_ASN1_OBJECT(a, pp, length, d2i_ASN1_OBJECT,
			 ASN1_OBJECT_free, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
d115 1
a115 17


static STACK_OF(CONF_VALUE) *i2v_ext_ku(X509V3_EXT_METHOD *method,
		STACK_OF(ASN1_OBJECT) *eku, STACK_OF(CONF_VALUE) *ext_list)
{
int i;
ASN1_OBJECT *obj;
char obj_tmp[80];
for(i = 0; i < sk_ASN1_OBJECT_num(eku); i++) {
	obj = sk_ASN1_OBJECT_value(eku, i);
	i2t_ASN1_OBJECT(obj_tmp, 80, obj);
	X509V3_add_value(NULL, obj_tmp, &ext_list);
}
return ext_list;
}

static STACK_OF(ASN1_OBJECT) *v2i_ext_ku(X509V3_EXT_METHOD *method,
d118 5
a122 10
STACK_OF(ASN1_OBJECT) *extku;
char *extval;
ASN1_OBJECT *objtmp;
CONF_VALUE *val;
int i;

if(!(extku = sk_ASN1_OBJECT_new_null())) {
	X509V3err(X509V3_F_V2I_EXT_KU,ERR_R_MALLOC_FAILURE);
	return NULL;
}
d124 2
a125 8
for(i = 0; i < sk_CONF_VALUE_num(nval); i++) {
	val = sk_CONF_VALUE_value(nval, i);
	if(val->value) extval = val->value;
	else extval = val->name;
	if(!(objtmp = OBJ_txt2obj(extval, 0))) {
		sk_ASN1_OBJECT_pop_free(extku, ASN1_OBJECT_free);
		X509V3err(X509V3_F_V2I_EXT_KU,X509V3_R_INVALID_OBJECT_IDENTIFIER);
		X509V3_conf_err(val);
d128 14
a141 3
	sk_ASN1_OBJECT_push(extku, objtmp);
}
return extku;
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d132 1
a132 1
if(!(extku = sk_ASN1_OBJECT_new(NULL))) {
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 1
#include <openssl/asn1t.h>
d66 1
a66 1
static void *v2i_EXTENDED_KEY_USAGE(X509V3_EXT_METHOD *method,
d68 2
a69 3
static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(X509V3_EXT_METHOD *method,
		void *eku, STACK_OF(CONF_VALUE) *extlist);

d71 10
a80 8
	NID_ext_key_usage, 0,
	ASN1_ITEM_ref(EXTENDED_KEY_USAGE),
	0,0,0,0,
	0,0,
	i2v_EXTENDED_KEY_USAGE,
	v2i_EXTENDED_KEY_USAGE,
	0,0,
	NULL
d83 25
a107 11
/* NB OCSP acceptable responses also is a SEQUENCE OF OBJECT */
X509V3_EXT_METHOD v3_ocsp_accresp = {
	NID_id_pkix_OCSP_acceptableResponses, 0,
	ASN1_ITEM_ref(EXTENDED_KEY_USAGE),
	0,0,0,0,
	0,0,
	i2v_EXTENDED_KEY_USAGE,
	v2i_EXTENDED_KEY_USAGE,
	0,0,
	NULL
};
d109 12
a120 19
ASN1_ITEM_TEMPLATE(EXTENDED_KEY_USAGE) = 
	ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, EXTENDED_KEY_USAGE, ASN1_OBJECT)
ASN1_ITEM_TEMPLATE_END(EXTENDED_KEY_USAGE)

IMPLEMENT_ASN1_FUNCTIONS(EXTENDED_KEY_USAGE)

static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(X509V3_EXT_METHOD *method,
		void *a, STACK_OF(CONF_VALUE) *ext_list)
{
	EXTENDED_KEY_USAGE *eku = a;
	int i;
	ASN1_OBJECT *obj;
	char obj_tmp[80];
	for(i = 0; i < sk_ASN1_OBJECT_num(eku); i++) {
		obj = sk_ASN1_OBJECT_value(eku, i);
		i2t_ASN1_OBJECT(obj_tmp, 80, obj);
		X509V3_add_value(NULL, obj_tmp, &ext_list);
	}
	return ext_list;
d123 1
a123 1
static void *v2i_EXTENDED_KEY_USAGE(X509V3_EXT_METHOD *method,
d126 10
a135 5
	EXTENDED_KEY_USAGE *extku;
	char *extval;
	ASN1_OBJECT *objtmp;
	CONF_VALUE *val;
	int i;
d137 8
a144 2
	if(!(extku = sk_ASN1_OBJECT_new_null())) {
		X509V3err(X509V3_F_V2I_EXT_KU,ERR_R_MALLOC_FAILURE);
d147 3
a149 14

	for(i = 0; i < sk_CONF_VALUE_num(nval); i++) {
		val = sk_CONF_VALUE_value(nval, i);
		if(val->value) extval = val->value;
		else extval = val->name;
		if(!(objtmp = OBJ_txt2obj(extval, 0))) {
			sk_ASN1_OBJECT_pop_free(extku, ASN1_OBJECT_free);
			X509V3err(X509V3_F_V2I_EXT_KU,X509V3_R_INVALID_OBJECT_IDENTIFIER);
			X509V3_conf_err(val);
			return NULL;
		}
		sk_ASN1_OBJECT_push(extku, objtmp);
	}
	return extku;
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d71 1
a71 1
const X509V3_EXT_METHOD v3_ext_ku = {
d83 1
a83 1
const X509V3_EXT_METHOD v3_ocsp_accresp = {
d125 1
a125 1
		X509V3err(X509V3_F_V2I_EXTENDED_KEY_USAGE,ERR_R_MALLOC_FAILURE);
d135 1
a135 1
			X509V3err(X509V3_F_V2I_EXTENDED_KEY_USAGE,X509V3_R_INVALID_OBJECT_IDENTIFIER);
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d66 3
a68 4
static void *v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
				    X509V3_CTX *ctx,
				    STACK_OF(CONF_VALUE) *nval);
static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
d100 2
a101 3
static STACK_OF(CONF_VALUE) *
  i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method, void *a,
			 STACK_OF(CONF_VALUE) *ext_list)
d115 2
a116 2
static void *v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
				    X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
@


