head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.11;
commitid	kT0fLt3r4lroFJra;

1.11
date	2016.12.30.15.54.49;	author jsing;	state Exp;
branches;
next	1.10;
commitid	kn1H5Mumrqi1t2NN;

1.10
date	2015.07.29.16.13.49;	author jsing;	state Exp;
branches;
next	1.9;
commitid	p0YErzIitgRtixdM;

1.9
date	2015.07.19.01.20.32;	author doug;	state Exp;
branches;
next	1.8;
commitid	S4YnPDRy5Zpx6EbK;

1.8
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.7;
commitid	yQEL1wOWIearrW15;

1.7
date	2014.07.10.21.57.20;	author miod;	state Exp;
branches;
next	1.6;
commitid	2s4rAnEsqTsur2uO;

1.6
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.5;
commitid	id8dTrTMtnTn4fqt;

1.5
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.06.11.01.53.02;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	4evB2EbwDYaBfe0g;

1.3
date	2014.05.26.12.10.11;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.29.05.37.18;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.04.29.05.37.18;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.12;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: v3_pci.c,v 1.11 2016/12/30 15:54:49 jsing Exp $ */
/* Contributed to the OpenSSL Project 2004
 * by Richard Levitte (richard@@levitte.org)
 */
/* Copyright (c) 2004 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <string.h>

#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/x509v3.h>

static int i2r_pci(X509V3_EXT_METHOD *method, PROXY_CERT_INFO_EXTENSION *ext,
    BIO *out, int indent);
static PROXY_CERT_INFO_EXTENSION *r2i_pci(X509V3_EXT_METHOD *method,
    X509V3_CTX *ctx, char *str);

const X509V3_EXT_METHOD v3_pci = {
	.ext_nid = NID_proxyCertInfo,
	.ext_flags = 0,
	.it = &PROXY_CERT_INFO_EXTENSION_it,
	.ext_new = NULL,
	.ext_free = NULL,
	.d2i = NULL,
	.i2d = NULL,
	.i2s = NULL,
	.s2i = NULL,
	.i2v = NULL,
	.v2i = NULL,
	.i2r = (X509V3_EXT_I2R)i2r_pci,
	.r2i = (X509V3_EXT_R2I)r2i_pci,
	.usr_data = NULL,
};

static int
i2r_pci(X509V3_EXT_METHOD *method, PROXY_CERT_INFO_EXTENSION *pci, BIO *out,
    int indent)
{
	BIO_printf(out, "%*sPath Length Constraint: ", indent, "");
	if (pci->pcPathLengthConstraint)
		i2a_ASN1_INTEGER(out, pci->pcPathLengthConstraint);
	else
		BIO_printf(out, "infinite");
	BIO_puts(out, "\n");
	BIO_printf(out, "%*sPolicy Language: ", indent, "");
	i2a_ASN1_OBJECT(out, pci->proxyPolicy->policyLanguage);
	BIO_puts(out, "\n");
	if (pci->proxyPolicy->policy && pci->proxyPolicy->policy->data)
		BIO_printf(out, "%*sPolicy Text: %s\n", indent, "",
		    pci->proxyPolicy->policy->data);
	return 1;
}

static int
process_pci_value(CONF_VALUE *val, ASN1_OBJECT **language,
    ASN1_INTEGER **pathlen, ASN1_OCTET_STRING **policy)
{
	int free_policy = 0;

	if (strcmp(val->name, "language") == 0) {
		if (*language) {
			X509V3error(X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED);
			X509V3_conf_err(val);
			return 0;
		}
		if (!(*language = OBJ_txt2obj(val->value, 0))) {
			X509V3error(X509V3_R_INVALID_OBJECT_IDENTIFIER);
			X509V3_conf_err(val);
			return 0;
		}
	}
	else if (strcmp(val->name, "pathlen") == 0) {
		if (*pathlen) {
			X509V3error(X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED);
			X509V3_conf_err(val);
			return 0;
		}
		if (!X509V3_get_value_int(val, pathlen)) {
			X509V3error(X509V3_R_POLICY_PATH_LENGTH);
			X509V3_conf_err(val);
			return 0;
		}
	}
	else if (strcmp(val->name, "policy") == 0) {
		unsigned char *tmp_data = NULL;
		long val_len;
		if (!*policy) {
			*policy = ASN1_OCTET_STRING_new();
			if (!*policy) {
				X509V3error(ERR_R_MALLOC_FAILURE);
				X509V3_conf_err(val);
				return 0;
			}
			free_policy = 1;
		}
		if (strncmp(val->value, "hex:", 4) == 0) {
			unsigned char *tmp_data2 =
			    string_to_hex(val->value + 4, &val_len);

			if (!tmp_data2) {
				X509V3error(X509V3_R_ILLEGAL_HEX_DIGIT);
				X509V3_conf_err(val);
				goto err;
			}

			tmp_data = realloc((*policy)->data,
			    (*policy)->length + val_len + 1);
			if (tmp_data) {
				(*policy)->data = tmp_data;
				memcpy(&(*policy)->data[(*policy)->length],
				    tmp_data2, val_len);
				(*policy)->length += val_len;
				(*policy)->data[(*policy)->length] = '\0';
			} else {
				free(tmp_data2);
				free((*policy)->data);
				(*policy)->data = NULL;
				(*policy)->length = 0;
				X509V3error(ERR_R_MALLOC_FAILURE);
				X509V3_conf_err(val);
				goto err;
			}
			free(tmp_data2);
		}
		else if (strncmp(val->value, "file:", 5) == 0) {
			unsigned char buf[2048];
			int n;
			BIO *b = BIO_new_file(val->value + 5, "r");
			if (!b) {
				X509V3error(ERR_R_BIO_LIB);
				X509V3_conf_err(val);
				goto err;
			}
			while ((n = BIO_read(b, buf, sizeof(buf))) > 0 ||
			    (n == 0 && BIO_should_retry(b))) {
				if (!n)
					continue;

				tmp_data = realloc((*policy)->data,
				    (*policy)->length + n + 1);

				if (!tmp_data)
					break;

				(*policy)->data = tmp_data;
				memcpy(&(*policy)->data[(*policy)->length],
				    buf, n);
				(*policy)->length += n;
				(*policy)->data[(*policy)->length] = '\0';
			}
			BIO_free_all(b);

			if (n < 0) {
				X509V3error(ERR_R_BIO_LIB);
				X509V3_conf_err(val);
				goto err;
			}
		}
		else if (strncmp(val->value, "text:", 5) == 0) {
			val_len = strlen(val->value + 5);
			tmp_data = realloc((*policy)->data,
			    (*policy)->length + val_len + 1);
			if (tmp_data) {
				(*policy)->data = tmp_data;
				memcpy(&(*policy)->data[(*policy)->length],
				    val->value + 5, val_len);
				(*policy)->length += val_len;
				(*policy)->data[(*policy)->length] = '\0';
			} else {
				free((*policy)->data);
				(*policy)->data = NULL;
				(*policy)->length = 0;
				X509V3error(ERR_R_MALLOC_FAILURE);
				X509V3_conf_err(val);
				goto err;
			}
		} else {
			X509V3error(X509V3_R_INCORRECT_POLICY_SYNTAX_TAG);
			X509V3_conf_err(val);
			goto err;
		}
		if (!tmp_data) {
			X509V3error(ERR_R_MALLOC_FAILURE);
			X509V3_conf_err(val);
			goto err;
		}
	}
	return 1;

err:
	if (free_policy) {
		ASN1_OCTET_STRING_free(*policy);
		*policy = NULL;
	}
	return 0;
}

static PROXY_CERT_INFO_EXTENSION *
r2i_pci(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, char *value)
{
	PROXY_CERT_INFO_EXTENSION *pci = NULL;
	STACK_OF(CONF_VALUE) *vals;
	ASN1_OBJECT *language = NULL;
	ASN1_INTEGER *pathlen = NULL;
	ASN1_OCTET_STRING *policy = NULL;
	int i, j;

	vals = X509V3_parse_list(value);
	for (i = 0; i < sk_CONF_VALUE_num(vals); i++) {
		CONF_VALUE *cnf = sk_CONF_VALUE_value(vals, i);
		if (!cnf->name || (*cnf->name != '@@' && !cnf->value)) {
			X509V3error(X509V3_R_INVALID_PROXY_POLICY_SETTING);
			X509V3_conf_err(cnf);
			goto err;
		}
		if (*cnf->name == '@@') {
			STACK_OF(CONF_VALUE) *sect;
			int success_p = 1;

			sect = X509V3_get_section(ctx, cnf->name + 1);
			if (!sect) {
				X509V3error(X509V3_R_INVALID_SECTION);
				X509V3_conf_err(cnf);
				goto err;
			}
			for (j = 0; success_p &&
			    j < sk_CONF_VALUE_num(sect); j++) {
				success_p = process_pci_value(
				    sk_CONF_VALUE_value(sect, j),
				    &language, &pathlen, &policy);
			}
			X509V3_section_free(ctx, sect);
			if (!success_p)
				goto err;
		} else {
			if (!process_pci_value(cnf,
			    &language, &pathlen, &policy)) {
				X509V3_conf_err(cnf);
				goto err;
			}
		}
	}

	/* Language is mandatory */
	if (!language) {
		X509V3error(X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED);
		goto err;
	}
	i = OBJ_obj2nid(language);
	if ((i == NID_Independent || i == NID_id_ppl_inheritAll) && policy) {
		X509V3error(X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY);
		goto err;
	}

	pci = PROXY_CERT_INFO_EXTENSION_new();
	if (!pci) {
		X509V3error(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	pci->proxyPolicy->policyLanguage = language;
	language = NULL;
	pci->proxyPolicy->policy = policy;
	policy = NULL;
	pci->pcPathLengthConstraint = pathlen;
	pathlen = NULL;
	goto end;

err:
	if (language) {
		ASN1_OBJECT_free(language);
		language = NULL;
	}
	if (pathlen) {
		ASN1_INTEGER_free(pathlen);
		pathlen = NULL;
	}
	if (policy) {
		ASN1_OCTET_STRING_free(policy);
		policy = NULL;
	}
end:
	sk_CONF_VALUE_pop_free(vals, X509V3_conf_free);
	return pci;
}
@


1.11
log
@Expand ASN1_ITEM_ref and ASN1_ITEM_ptr macros - no change in generated
assembly. Of particular interest is ASN1_ITEM_ptr which does nothing
and resulted in code like:

  if (method->it)
    ASN1_ITEM_free(..., ASN1_ITEM_ptr(method->it));
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pci.c,v 1.10 2015/07/29 16:13:49 jsing Exp $ */
d93 1
a93 2
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,
			    X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED);
d98 1
a98 2
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,
			    X509V3_R_INVALID_OBJECT_IDENTIFIER);
d105 1
a105 2
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,
			    X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED);
d110 1
a110 2
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,
			    X509V3_R_POLICY_PATH_LENGTH);
d121 1
a121 2
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,
				    ERR_R_MALLOC_FAILURE);
d132 1
a132 2
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,
				    X509V3_R_ILLEGAL_HEX_DIGIT);
d150 1
a150 2
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,
				    ERR_R_MALLOC_FAILURE);
d161 1
a161 2
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,
				    ERR_R_BIO_LIB);
d185 1
a185 2
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,
				    ERR_R_BIO_LIB);
d204 1
a204 2
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,
				    ERR_R_MALLOC_FAILURE);
d209 1
a209 2
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,
			    X509V3_R_INCORRECT_POLICY_SYNTAX_TAG);
d214 1
a214 2
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,
			    ERR_R_MALLOC_FAILURE);
d243 1
a243 2
			X509V3err(X509V3_F_R2I_PCI,
			    X509V3_R_INVALID_PROXY_POLICY_SETTING);
d253 1
a253 2
				X509V3err(X509V3_F_R2I_PCI,
				    X509V3_R_INVALID_SECTION);
d277 1
a277 2
		X509V3err(X509V3_F_R2I_PCI,
		    X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED);
d282 1
a282 2
		X509V3err(X509V3_F_R2I_PCI,
		    X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY);
d288 1
a288 1
		X509V3err(X509V3_F_R2I_PCI, ERR_R_MALLOC_FAILURE);
@


1.10
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pci.c,v 1.9 2015/07/19 01:20:32 doug Exp $ */
d52 1
a52 1
	.it = ASN1_ITEM_ref(PROXY_CERT_INFO_EXTENSION),
@


1.9
log
@Remove case that can never happen.

It's a little convoluted due to gotos, but at that point, pci is always
NULL.  Spotted by Coverity 21702.

ok miod@@ beck@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pci.c,v 1.8 2014/07/11 08:44:49 jsing Exp $ */
d50 14
a63 5
	NID_proxyCertInfo, 0, ASN1_ITEM_ref(PROXY_CERT_INFO_EXTENSION),
	0, 0, 0, 0, 0, 0, NULL, NULL,
	(X509V3_EXT_I2R)i2r_pci,
	(X509V3_EXT_R2I)r2i_pci,
	NULL,
@


1.8
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pci.c,v 1.7 2014/07/10 21:57:20 miod Exp $ */
a318 4
	}
	if (pci) {
		PROXY_CERT_INFO_EXTENSION_free(pci);
		pci = NULL;
@


1.7
log
@Upon realloc() failure, free() the original pointer and remove the stupid
comments implying you don't have to.
ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pci.c,v 1.6 2014/07/10 13:58:23 jsing Exp $ */
a39 1
#include "cryptlib.h"
d41 1
@


1.6
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_pci.c,v 1.5 2014/06/12 15:49:31 deraadt Exp $ */
d144 1
a144 1
				/* realloc failure implies the original data space is b0rked too! */
d201 1
a201 1
				/* realloc failure implies the original data space is b0rked too! */
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d38 2
@


1.4
log
@c-file-style hints, begone; ok beck
@
text
@d1 1
a1 1
/* v3_pci.c */
@


1.3
log
@KNF.
@
text
@d1 1
a1 1
/* v3_pci.c -*- mode:C; c-file-style: "eay" -*- */
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d43 1
a43 1
	BIO *out, int indent);
d45 1
a45 1
	X509V3_CTX *ctx, char *str);
d47 12
a58 13
const X509V3_EXT_METHOD v3_pci =
	{ NID_proxyCertInfo, 0, ASN1_ITEM_ref(PROXY_CERT_INFO_EXTENSION),
	  0,0,0,0,
	  0,0,
	  NULL, NULL,
	  (X509V3_EXT_I2R)i2r_pci,
	  (X509V3_EXT_R2I)r2i_pci,
	  NULL,
	};

static int i2r_pci(X509V3_EXT_METHOD *method, PROXY_CERT_INFO_EXTENSION *pci,
	BIO *out, int indent)
	{
d61 1
a61 1
	  i2a_ASN1_INTEGER(out, pci->pcPathLengthConstraint);
d63 1
a63 1
	  BIO_printf(out, "infinite");
d69 2
a70 2
	  BIO_printf(out, "%*sPolicy Text: %s\n", indent, "",
		     pci->proxyPolicy->policy->data);
d72 1
a72 1
	}
d74 4
a77 4
static int process_pci_value(CONF_VALUE *val,
	ASN1_OBJECT **language, ASN1_INTEGER **pathlen,
	ASN1_OCTET_STRING **policy)
	{
d80 4
a83 5
	if (strcmp(val->name, "language") == 0)
		{
		if (*language)
			{
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED);
d86 4
a89 4
			}
		if (!(*language = OBJ_txt2obj(val->value, 0)))
			{
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_INVALID_OBJECT_IDENTIFIER);
a91 1
			}
d93 5
a97 5
	else if (strcmp(val->name, "pathlen") == 0)
		{
		if (*pathlen)
			{
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED);
d100 4
a103 4
			}
		if (!X509V3_get_value_int(val, pathlen))
			{
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_POLICY_PATH_LENGTH);
a105 1
			}
d107 2
a108 2
	else if (strcmp(val->name, "policy") == 0)
		{
d111 1
a111 2
		if (!*policy)
			{
d113 3
a115 3
			if (!*policy)
				{
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_MALLOC_FAILURE);
d118 1
a118 1
				}
d120 2
a121 3
			}
		if (strncmp(val->value, "hex:", 4) == 0)
			{
d123 1
a123 1
				string_to_hex(val->value + 4, &val_len);
d125 3
a127 3
			if (!tmp_data2) 
				{
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_ILLEGAL_HEX_DIGIT);
d130 1
a130 1
				}
d133 2
a134 3
				(*policy)->length + val_len + 1);
			if (tmp_data)
				{
d137 1
a137 1
					tmp_data2, val_len);
d140 1
a140 3
				}
			else
				{
d145 2
a146 1
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_MALLOC_FAILURE);
d149 1
a149 1
				}
d151 2
a152 3
			}
		else if (strncmp(val->value, "file:", 5) == 0)
			{
d156 3
a158 3
			if (!b)
				{
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_BIO_LIB);
d161 5
a165 5
				}
			while((n = BIO_read(b, buf, sizeof(buf))) > 0
				|| (n == 0 && BIO_should_retry(b)))
				{
				if (!n) continue;
d168 1
a168 1
					(*policy)->length + n + 1);
d175 1
a175 1
					buf, n);
d178 1
a178 1
				}
d181 3
a183 3
			if (n < 0)
				{
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_BIO_LIB);
a185 1
				}
d187 2
a188 2
		else if (strncmp(val->value, "text:", 5) == 0)
			{
d191 2
a192 3
				(*policy)->length + val_len + 1);
			if (tmp_data)
				{
d195 1
a195 1
					val->value + 5, val_len);
d198 1
a198 3
				}
			else
				{
d202 2
a203 1
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_MALLOC_FAILURE);
a205 1
				}
d207 3
a209 3
		else
			{
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_INCORRECT_POLICY_SYNTAX_TAG);
d212 4
a215 4
			}
		if (!tmp_data)
			{
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_MALLOC_FAILURE);
a217 1
			}
d219 1
d221 1
d223 1
a223 2
	if (free_policy)
		{
d226 1
a226 1
		}
d228 1
a228 1
	}
d230 3
a232 3
static PROXY_CERT_INFO_EXTENSION *r2i_pci(X509V3_EXT_METHOD *method,
	X509V3_CTX *ctx, char *value)
	{
d241 1
a241 2
	for (i = 0; i < sk_CONF_VALUE_num(vals); i++)
		{
d243 3
a245 3
		if (!cnf->name || (*cnf->name != '@@' && !cnf->value))
			{
			X509V3err(X509V3_F_R2I_PCI,X509V3_R_INVALID_PROXY_POLICY_SETTING);
d248 2
a249 3
			}
		if (*cnf->name == '@@')
			{
d254 3
a256 3
			if (!sect)
				{
				X509V3err(X509V3_F_R2I_PCI,X509V3_R_INVALID_SECTION);
d259 7
a265 7
				}
			for (j = 0; success_p && j < sk_CONF_VALUE_num(sect); j++)
				{
				success_p =
					process_pci_value(sk_CONF_VALUE_value(sect, j),
						&language, &pathlen, &policy);
				}
d269 1
a269 3
			}
		else
			{
d271 1
a271 2
					&language, &pathlen, &policy))
				{
a273 1
				}
d276 1
d279 3
a281 3
	if (!language)
		{
		X509V3err(X509V3_F_R2I_PCI,X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED);
d283 1
a283 1
		}
d285 3
a287 3
	if ((i == NID_Independent || i == NID_id_ppl_inheritAll) && policy)
		{
		X509V3err(X509V3_F_R2I_PCI,X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY);
d289 1
a289 1
		}
d292 2
a293 3
	if (!pci)
		{
		X509V3err(X509V3_F_R2I_PCI,ERR_R_MALLOC_FAILURE);
d295 1
a295 1
		}
d297 6
a302 3
	pci->proxyPolicy->policyLanguage = language; language = NULL;
	pci->proxyPolicy->policy = policy; policy = NULL;
	pci->pcPathLengthConstraint = pathlen; pathlen = NULL;
d304 1
d306 16
a321 4
	if (language) { ASN1_OBJECT_free(language); language = NULL; }
	if (pathlen) { ASN1_INTEGER_free(pathlen); pathlen = NULL; }
	if (policy) { ASN1_OCTET_STRING_free(policy); policy = NULL; }
	if (pci) { PROXY_CERT_INFO_EXTENSION_free(pci); pci = NULL; }
d325 1
a325 1
	}
@


1.1
log
@Initial revision
@
text
@d47 1
a47 1
X509V3_EXT_METHOD v3_pci =
d85 1
a85 1
			X509V3err(X509V3_F_R2I_PCI,X509V3_R_POLICY_LANGUAGE_ALREADTY_DEFINED);
d91 1
a91 1
			X509V3err(X509V3_F_R2I_PCI,X509V3_R_INVALID_OBJECT_IDENTIFIER);
d100 1
a100 1
			X509V3err(X509V3_F_R2I_PCI,X509V3_R_POLICY_PATH_LENGTH_ALREADTY_DEFINED);
d106 1
a106 1
			X509V3err(X509V3_F_R2I_PCI,X509V3_R_POLICY_PATH_LENGTH);
d120 1
a120 1
				X509V3err(X509V3_F_R2I_PCI,ERR_R_MALLOC_FAILURE);
d131 6
a136 1
			if (!tmp_data2) goto err;
d138 1
a138 1
			tmp_data = OPENSSL_realloc((*policy)->data,
d148 11
d167 1
a167 1
				X509V3err(X509V3_F_R2I_PCI,ERR_R_BIO_LIB);
d176 1
a176 1
				tmp_data = OPENSSL_realloc((*policy)->data,
d188 1
d192 1
a192 1
				X509V3err(X509V3_F_R2I_PCI,ERR_R_BIO_LIB);
d200 1
a200 1
			tmp_data = OPENSSL_realloc((*policy)->data,
d210 9
d222 1
a222 1
			X509V3err(X509V3_F_R2I_PCI,X509V3_R_INCORRECT_POLICY_SYNTAX_TAG);
d228 1
a228 1
			X509V3err(X509V3_F_R2I_PCI,ERR_R_MALLOC_FAILURE);
a314 6
	pci->proxyPolicy = PROXY_POLICY_new();
	if (!pci->proxyPolicy)
		{
		X509V3err(X509V3_F_R2I_PCI,ERR_R_MALLOC_FAILURE);
		goto err;
		}
a323 5
	if (pci && pci->proxyPolicy)
		{
		PROXY_POLICY_free(pci->proxyPolicy);
		pci->proxyPolicy = NULL;
		}
@


1.1.1.1
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d47 1
a47 1
const X509V3_EXT_METHOD v3_pci =
d85 1
a85 1
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_POLICY_LANGUAGE_ALREADTY_DEFINED);
d91 1
a91 1
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_INVALID_OBJECT_IDENTIFIER);
d100 1
a100 1
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_POLICY_PATH_LENGTH_ALREADTY_DEFINED);
d106 1
a106 1
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_POLICY_PATH_LENGTH);
d120 1
a120 1
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_MALLOC_FAILURE);
d151 1
a151 1
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_BIO_LIB);
d175 1
a175 1
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_BIO_LIB);
d196 1
a196 1
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_INCORRECT_POLICY_SYNTAX_TAG);
d202 1
a202 1
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_MALLOC_FAILURE);
d289 6
d304 5
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d85 1
a85 1
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED);
d100 1
a100 1
			X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED);
d131 1
a131 6
			if (!tmp_data2) 
				{
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,X509V3_R_ILLEGAL_HEX_DIGIT);
				X509V3_conf_err(val);
				goto err;
				}
a142 11
			else
				{
				OPENSSL_free(tmp_data2);
				/* realloc failure implies the original data space is b0rked too! */
				(*policy)->data = NULL;
				(*policy)->length = 0;
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_MALLOC_FAILURE);
				X509V3_conf_err(val);
				goto err;
				}
			OPENSSL_free(tmp_data2);
a171 1
			BIO_free_all(b);
a191 9
				}
			else
				{
				/* realloc failure implies the original data space is b0rked too! */
				(*policy)->data = NULL;
				(*policy)->length = 0;
				X509V3err(X509V3_F_PROCESS_PCI_VALUE,ERR_R_MALLOC_FAILURE);
				X509V3_conf_err(val);
				goto err;
@


