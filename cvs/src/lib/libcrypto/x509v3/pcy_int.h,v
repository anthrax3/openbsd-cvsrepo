head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@ * @;


1.5
date	2016.12.21.15.49.29;	author jsing;	state Exp;
branches;
next	1.4;
commitid	ggG71MfP76PRyLln;

1.4
date	2015.07.18.00.01.05;	author beck;	state Exp;
branches;
next	1.3;
commitid	Hg4lQHnvEjZmBzNl;

1.3
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.04.21.08.41.26;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Explicitly export a list of symbols from libcrypto.

Move the "internal" BN functions from bn.h to bn_lcl.h and stop exporting
the bn_* symbols. These are documented as only being intended for internal
use, so why they were placed in a public header is beyond me...

This hides 363 previously exported symbols, most of which exist in headers
that are not installed and were never intended to be public. This also
removes a few crusty old things that should have died long ago (like
_ossl_old_des_read_pw). But don't worry... there are still 3451 symbols
exported from the library.

With input and testing from inoguchi@@.

ok beck@@ inoguchi@@
@
text
@/* $OpenBSD: pcy_int.h,v 1.4 2015/07/18 00:01:05 beck Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2004.
 */
/* ====================================================================
 * Copyright (c) 2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

__BEGIN_HIDDEN_DECLS

typedef struct X509_POLICY_DATA_st X509_POLICY_DATA;

DECLARE_STACK_OF(X509_POLICY_DATA)

/* Internal structures */

/* This structure and the field names correspond to the Policy 'node' of
 * RFC3280. NB this structure contains no pointers to parent or child
 * data: X509_POLICY_NODE contains that. This means that the main policy data
 * can be kept static and cached with the certificate.
 */

struct X509_POLICY_DATA_st {
	unsigned int flags;
	/* Policy OID and qualifiers for this data */
	ASN1_OBJECT *valid_policy;
	STACK_OF(POLICYQUALINFO) *qualifier_set;
	STACK_OF(ASN1_OBJECT) *expected_policy_set;
};

/* X509_POLICY_DATA flags values */

/* This flag indicates the structure has been mapped using a policy mapping
 * extension. If policy mapping is not active its references get deleted.
 */

#define POLICY_DATA_FLAG_MAPPED			0x1

/* This flag indicates the data doesn't correspond to a policy in Certificate
 * Policies: it has been mapped to any policy.
 */

#define POLICY_DATA_FLAG_MAPPED_ANY		0x2

/* AND with flags to see if any mapping has occurred */

#define POLICY_DATA_FLAG_MAP_MASK		0x3

/* qualifiers are shared and shouldn't be freed */

#define POLICY_DATA_FLAG_SHARED_QUALIFIERS	0x4

/* Parent node is an extra node and should be freed */

#define POLICY_DATA_FLAG_EXTRA_NODE		0x8

/* Corresponding CertificatePolicies is critical */

#define POLICY_DATA_FLAG_CRITICAL		0x10

/* This structure is cached with a certificate */

struct X509_POLICY_CACHE_st {
	/* anyPolicy data or NULL if no anyPolicy */
	X509_POLICY_DATA *anyPolicy;
	/* other policy data */
	STACK_OF(X509_POLICY_DATA) *data;
	/* If InhibitAnyPolicy present this is its value or -1 if absent. */
	long any_skip;
	/* If policyConstraints and requireExplicitPolicy present this is its
	 * value or -1 if absent.
	 */
	long explicit_skip;
	/* If policyConstraints and policyMapping present this is its
	 * value or -1 if absent.
         */
	long map_skip;
};

/*#define POLICY_CACHE_FLAG_CRITICAL		POLICY_DATA_FLAG_CRITICAL*/

/* This structure represents the relationship between nodes */

struct X509_POLICY_NODE_st {
	/* node data this refers to */
	const X509_POLICY_DATA *data;
	/* Parent node */
	X509_POLICY_NODE *parent;
	/* Number of child nodes */
	int nchild;
};

struct X509_POLICY_LEVEL_st {
	/* Cert for this level */
	X509 *cert;
	/* nodes at this level */
	STACK_OF(X509_POLICY_NODE) *nodes;
	/* anyPolicy node */
	X509_POLICY_NODE *anyPolicy;
	/* Extra data */
	/*STACK_OF(X509_POLICY_DATA) *extra_data;*/
	unsigned int flags;
};

struct X509_POLICY_TREE_st {
	/* This is the tree 'level' data */
	X509_POLICY_LEVEL *levels;
	int nlevel;
	/* Extra policy data when additional nodes (not from the certificate)
	 * are required.
	 */
	STACK_OF(X509_POLICY_DATA) *extra_data;
	/* This is the authority constained policy set */
	STACK_OF(X509_POLICY_NODE) *auth_policies;
	STACK_OF(X509_POLICY_NODE) *user_policies;
	unsigned int flags;
};

/* Set if anyPolicy present in user policies */
#define POLICY_FLAG_ANY_POLICY		0x2

/* Useful macros */

#define node_data_critical(data) (data->flags & POLICY_DATA_FLAG_CRITICAL)
#define node_critical(node) node_data_critical(node->data)

/* Internal functions */

X509_POLICY_DATA *policy_data_new(POLICYINFO *policy, const ASN1_OBJECT *id,
    int crit);
void policy_data_free(X509_POLICY_DATA *data);

X509_POLICY_DATA *policy_cache_find_data(const X509_POLICY_CACHE *cache,
    const ASN1_OBJECT *id);
int policy_cache_set_mapping(X509 *x, POLICY_MAPPINGS *maps);


STACK_OF(X509_POLICY_NODE) *policy_node_cmp_new(void);

void policy_cache_init(void);

void policy_cache_free(X509_POLICY_CACHE *cache);

X509_POLICY_NODE *level_find_node(const X509_POLICY_LEVEL *level,
    const X509_POLICY_NODE *parent, const ASN1_OBJECT *id);

X509_POLICY_NODE *tree_find_sk(STACK_OF(X509_POLICY_NODE) *sk,
    const ASN1_OBJECT *id);

int level_add_node(X509_POLICY_LEVEL *level,
    const X509_POLICY_DATA *data, X509_POLICY_NODE *parent,
    X509_POLICY_TREE *tree, X509_POLICY_NODE **nodep);
void policy_node_free(X509_POLICY_NODE *node);
int policy_node_match(const X509_POLICY_LEVEL *lvl,
    const X509_POLICY_NODE *node, const ASN1_OBJECT *oid);

const X509_POLICY_CACHE *policy_cache_set(X509 *x);

__END_HIDDEN_DECLS
@


1.4
log
@Fix leak found by coverity, issue 78897 - which also brough to
light that the child counting was broken in the original code.
this is still fugly, but this preserves all the existing goo.
ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcy_int.h,v 1.3 2014/06/12 15:49:31 deraadt Exp $ */
d59 1
d208 2
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d199 1
a199 1
X509_POLICY_NODE *level_add_node(X509_POLICY_LEVEL *level,
d201 1
a201 1
    X509_POLICY_TREE *tree);
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* pcy_int.h */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
a58 3
DECLARE_STACK_OF(X509_POLICY_DATA)
DECLARE_STACK_OF(X509_POLICY_REF)
DECLARE_STACK_OF(X509_POLICY_NODE)
d61 2
a62 1
typedef struct X509_POLICY_REF_st X509_POLICY_REF;
d72 1
a72 2
struct X509_POLICY_DATA_st
	{
d78 1
a78 1
	};
d83 1
a83 1
 * extension. If policy mapping is not active its references get deleted. 
a109 10
/* This structure is an entry from a table of mapped policies which
 * cross reference the policy it refers to.
 */

struct X509_POLICY_REF_st
	{
	ASN1_OBJECT *subjectDomainPolicy;
	const X509_POLICY_DATA *data;
	};

a116 2
	/* If policyMappings extension present a table of mapped policies */
	STACK_OF(X509_POLICY_REF) *maps;
d127 1
a127 1
	};
d133 1
a133 2
struct X509_POLICY_NODE_st
	{
d140 1
a140 1
	};
d142 1
a142 2
struct X509_POLICY_LEVEL_st
	{
d152 1
a152 1
	};
d154 1
a154 2
struct X509_POLICY_TREE_st
	{
d166 1
a166 1
	};
d178 2
a179 2
X509_POLICY_DATA *policy_data_new(POLICYINFO *policy, ASN1_OBJECT *id,
								int crit);
d183 1
a183 1
							const ASN1_OBJECT *id);
d194 1
a194 1
					const ASN1_OBJECT *id);
d197 1
a197 1
						const ASN1_OBJECT *id);
d200 2
a201 3
			X509_POLICY_DATA *data,
			X509_POLICY_NODE *parent,
			X509_POLICY_TREE *tree);
d203 2
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d59 3
d64 1
a64 2

DECLARE_STACK_OF(X509_POLICY_DATA)
d113 10
d130 2
d196 1
a196 1
X509_POLICY_DATA *policy_data_new(POLICYINFO *policy, const ASN1_OBJECT *id,
a211 1
					const X509_POLICY_NODE *parent,	
d218 1
a218 1
			const X509_POLICY_DATA *data,
a221 2
int policy_node_match(const X509_POLICY_LEVEL *lvl,
		      const X509_POLICY_NODE *node, const ASN1_OBJECT *oid);
@


