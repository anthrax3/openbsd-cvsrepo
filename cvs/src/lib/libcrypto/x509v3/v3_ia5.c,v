head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.2
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17;
locks; strict;
comment	@ * @;


1.17
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.16;
commitid	kT0fLt3r4lroFJra;

1.16
date	2016.12.30.15.54.49;	author jsing;	state Exp;
branches;
next	1.15;
commitid	kn1H5Mumrqi1t2NN;

1.15
date	2015.09.30.18.21.50;	author jsing;	state Exp;
branches;
next	1.14;
commitid	W41jP34sV2UzYLCa;

1.14
date	2015.07.29.16.13.48;	author jsing;	state Exp;
branches;
next	1.13;
commitid	p0YErzIitgRtixdM;

1.13
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.12;
commitid	yQEL1wOWIearrW15;

1.12
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.11;
commitid	id8dTrTMtnTn4fqt;

1.11
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.04.21.16.59.26;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.15.17.46.17;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.03.45.34;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.16;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.12.19;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.54;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.02;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.18;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.14.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: v3_ia5.c,v 1.16 2016/12/30 15:54:49 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/x509v3.h>

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING *ia5);
static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method,
    X509V3_CTX *ctx, char *str);

const X509V3_EXT_METHOD v3_ns_ia5_list[] = {
	{
		.ext_nid = NID_netscape_base_url,
		.ext_flags = 0,
		.it = &ASN1_IA5STRING_it,
		.ext_new = NULL,
		.ext_free = NULL,
		.d2i = NULL,
		.i2d = NULL,
		.i2s = (X509V3_EXT_I2S)i2s_ASN1_IA5STRING,
		.s2i = (X509V3_EXT_S2I)s2i_ASN1_IA5STRING,
		.i2v = NULL,
		.v2i = NULL,
		.i2r = NULL,
		.r2i = NULL,
		.usr_data = NULL,
	},
	{
		.ext_nid = NID_netscape_revocation_url,
		.ext_flags = 0,
		.it = &ASN1_IA5STRING_it,
		.ext_new = NULL,
		.ext_free = NULL,
		.d2i = NULL,
		.i2d = NULL,
		.i2s = (X509V3_EXT_I2S)i2s_ASN1_IA5STRING,
		.s2i = (X509V3_EXT_S2I)s2i_ASN1_IA5STRING,
		.i2v = NULL,
		.v2i = NULL,
		.i2r = NULL,
		.r2i = NULL,
		.usr_data = NULL,
	},
	{
		.ext_nid = NID_netscape_ca_revocation_url,
		.ext_flags = 0,
		.it = &ASN1_IA5STRING_it,
		.ext_new = NULL,
		.ext_free = NULL,
		.d2i = NULL,
		.i2d = NULL,
		.i2s = (X509V3_EXT_I2S)i2s_ASN1_IA5STRING,
		.s2i = (X509V3_EXT_S2I)s2i_ASN1_IA5STRING,
		.i2v = NULL,
		.v2i = NULL,
		.i2r = NULL,
		.r2i = NULL,
		.usr_data = NULL,
	},
	{
		.ext_nid = NID_netscape_renewal_url,
		.ext_flags = 0,
		.it = &ASN1_IA5STRING_it,
		.ext_new = NULL,
		.ext_free = NULL,
		.d2i = NULL,
		.i2d = NULL,
		.i2s = (X509V3_EXT_I2S)i2s_ASN1_IA5STRING,
		.s2i = (X509V3_EXT_S2I)s2i_ASN1_IA5STRING,
		.i2v = NULL,
		.v2i = NULL,
		.i2r = NULL,
		.r2i = NULL,
		.usr_data = NULL,
	},
	{
		.ext_nid = NID_netscape_ca_policy_url,
		.ext_flags = 0,
		.it = &ASN1_IA5STRING_it,
		.ext_new = NULL,
		.ext_free = NULL,
		.d2i = NULL,
		.i2d = NULL,
		.i2s = (X509V3_EXT_I2S)i2s_ASN1_IA5STRING,
		.s2i = (X509V3_EXT_S2I)s2i_ASN1_IA5STRING,
		.i2v = NULL,
		.v2i = NULL,
		.i2r = NULL,
		.r2i = NULL,
		.usr_data = NULL,
	},
	{
		.ext_nid = NID_netscape_ssl_server_name,
		.ext_flags = 0,
		.it = &ASN1_IA5STRING_it,
		.ext_new = NULL,
		.ext_free = NULL,
		.d2i = NULL,
		.i2d = NULL,
		.i2s = (X509V3_EXT_I2S)i2s_ASN1_IA5STRING,
		.s2i = (X509V3_EXT_S2I)s2i_ASN1_IA5STRING,
		.i2v = NULL,
		.v2i = NULL,
		.i2r = NULL,
		.r2i = NULL,
		.usr_data = NULL,
	},
	{
		.ext_nid = NID_netscape_comment,
		.ext_flags = 0,
		.it = &ASN1_IA5STRING_it,
		.ext_new = NULL,
		.ext_free = NULL,
		.d2i = NULL,
		.i2d = NULL,
		.i2s = (X509V3_EXT_I2S)i2s_ASN1_IA5STRING,
		.s2i = (X509V3_EXT_S2I)s2i_ASN1_IA5STRING,
		.i2v = NULL,
		.v2i = NULL,
		.i2r = NULL,
		.r2i = NULL,
		.usr_data = NULL,
	},
	{
		.ext_nid = -1,
		.ext_flags = 0,
		.it = NULL,
		.ext_new = NULL,
		.ext_free = NULL,
		.d2i = NULL,
		.i2d = NULL,
		.i2s = NULL,
		.s2i = NULL,
		.i2v = NULL,
		.v2i = NULL,
		.i2r = NULL,
		.r2i = NULL,
		.usr_data = NULL,
	},
};

static char *
i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING *ia5)
{
	char *tmp;

	if (!ia5 || !ia5->length)
		return NULL;
	if (!(tmp = malloc(ia5->length + 1))) {
		X509V3error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	memcpy(tmp, ia5->data, ia5->length);
	tmp[ia5->length] = 0;
	return tmp;
}

static ASN1_IA5STRING *
s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, char *str)
{
	ASN1_IA5STRING *ia5;
	if (!str) {
		X509V3error(X509V3_R_INVALID_NULL_ARGUMENT);
		return NULL;
	}
	if (!(ia5 = ASN1_IA5STRING_new()))
		goto err;
	if (!ASN1_STRING_set((ASN1_STRING *)ia5, (unsigned char*)str,
	    strlen(str))) {
		ASN1_IA5STRING_free(ia5);
		goto err;
	}
	return ia5;

err:
	X509V3error(ERR_R_MALLOC_FAILURE);
	return NULL;
}
@


1.16
log
@Expand ASN1_ITEM_ref and ASN1_ITEM_ptr macros - no change in generated
assembly. Of particular interest is ASN1_ITEM_ptr which does nothing
and resulted in code like:

  if (method->it)
    ASN1_ITEM_free(..., ASN1_ITEM_ptr(method->it));
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ia5.c,v 1.15 2015/09/30 18:21:50 jsing Exp $ */
d210 1
a210 1
		X509V3err(X509V3_F_I2S_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
d223 1
a223 2
		X509V3err(X509V3_F_S2I_ASN1_IA5STRING,
		    X509V3_R_INVALID_NULL_ARGUMENT);
d236 1
a236 1
	X509V3err(X509V3_F_S2I_ASN1_IA5STRING, ERR_R_MALLOC_FAILURE);
@


1.15
log
@Replace M_ASN1_IA5STRING_(new|free) with ASN1_IA5STRING_(new|free). Same
with one s/M_ASN1_VISIBLESTRING_new/ASN1_VISIBLESTRING_new/.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ia5.c,v 1.14 2015/07/29 16:13:48 jsing Exp $ */
d75 1
a75 1
		.it = ASN1_ITEM_ref(ASN1_IA5STRING),
d91 1
a91 1
		.it = ASN1_ITEM_ref(ASN1_IA5STRING),
d107 1
a107 1
		.it = ASN1_ITEM_ref(ASN1_IA5STRING),
d123 1
a123 1
		.it = ASN1_ITEM_ref(ASN1_IA5STRING),
d139 1
a139 1
		.it = ASN1_ITEM_ref(ASN1_IA5STRING),
d155 1
a155 1
		.it = ASN1_ITEM_ref(ASN1_IA5STRING),
d171 1
a171 1
		.it = ASN1_ITEM_ref(ASN1_IA5STRING),
@


1.14
log
@Use named initialisers for X509V3_EXT_METHOD structs (for the usual
reasons) - only change in generated assembly is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ia5.c,v 1.13 2014/07/11 08:44:49 jsing Exp $ */
d227 1
a227 1
	if (!(ia5 = M_ASN1_IA5STRING_new()))
d231 1
a231 1
		M_ASN1_IA5STRING_free(ia5);
@


1.13
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ia5.c,v 1.12 2014/07/10 13:58:23 jsing Exp $ */
d72 128
a199 8
	EXT_IA5STRING(NID_netscape_base_url),
	EXT_IA5STRING(NID_netscape_revocation_url),
	EXT_IA5STRING(NID_netscape_ca_revocation_url),
	EXT_IA5STRING(NID_netscape_renewal_url),
	EXT_IA5STRING(NID_netscape_ca_policy_url),
	EXT_IA5STRING(NID_netscape_ssl_server_name),
	EXT_IA5STRING(NID_netscape_comment),
	EXT_END
@


1.12
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: v3_ia5.c,v 1.11 2014/06/12 15:49:31 deraadt Exp $ */
a61 1
#include "cryptlib.h"
d64 1
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 2
a61 1
#include <stdio.h>
@


1.10
log
@KNF.
@
text
@d1 1
a1 1
/* v3_ia5.c */
@


1.9
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 12
a78 10
static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, char *str);
const X509V3_EXT_METHOD v3_ns_ia5_list[] = { 
EXT_IA5STRING(NID_netscape_base_url),
EXT_IA5STRING(NID_netscape_revocation_url),
EXT_IA5STRING(NID_netscape_ca_revocation_url),
EXT_IA5STRING(NID_netscape_renewal_url),
EXT_IA5STRING(NID_netscape_ca_policy_url),
EXT_IA5STRING(NID_netscape_ssl_server_name),
EXT_IA5STRING(NID_netscape_comment),
EXT_END
d81 2
a82 3

static char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method,
	     ASN1_IA5STRING *ia5)
d85 5
a89 3
	if(!ia5 || !ia5->length) return NULL;
	if(!(tmp = malloc(ia5->length + 1))) {
		X509V3err(X509V3_F_I2S_ASN1_IA5STRING,ERR_R_MALLOC_FAILURE);
d97 2
a98 2
static ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method,
	     X509V3_CTX *ctx, char *str)
d101 3
a103 2
	if(!str) {
		X509V3err(X509V3_F_S2I_ASN1_IA5STRING,X509V3_R_INVALID_NULL_ARGUMENT);
d106 4
a109 3
	if(!(ia5 = M_ASN1_IA5STRING_new())) goto err;
	if(!ASN1_STRING_set((ASN1_STRING *)ia5, (unsigned char*)str,
			    strlen(str))) {
d114 3
a116 2
	err:
	X509V3err(X509V3_F_S2I_ASN1_IA5STRING,ERR_R_MALLOC_FAILURE);
a118 1

@


1.8
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d85 1
a85 1
	if(!(tmp = OPENSSL_malloc(ia5->length + 1))) {
@


1.7
log
@resolve conflicts
@
text
@a107 3
#ifdef CHARSET_EBCDIC
        ebcdic2ascii(ia5->data, ia5->data, ia5->length);
#endif /*CHARSET_EBCDIC*/
@


1.6
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.5
log
@resolve conflicts
@
text
@d68 1
a68 1
X509V3_EXT_METHOD v3_ns_ia5_list[] = { 
@


1.4
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d85 4
a88 1
	if (!(tmp = OPENSSL_malloc(ia5->length + 1))) return NULL;
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d85 1
a85 1
	tmp = OPENSSL_malloc(ia5->length + 1);
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d85 1
a85 1
	tmp = Malloc(ia5->length + 1);
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@a65 1
static ASN1_IA5STRING *ia5string_new(void);
a79 5
static ASN1_IA5STRING *ia5string_new(void)
{
	return ASN1_IA5STRING_new();
}

d99 1
a99 1
	if(!(ia5 = ASN1_IA5STRING_new())) goto err;
d102 1
a102 1
		ASN1_IA5STRING_free(ia5);
d105 3
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d66 1
d81 5
d91 1
a91 1
	if (!(tmp = OPENSSL_malloc(ia5->length + 1))) return NULL;
d105 1
a105 1
	if(!(ia5 = M_ASN1_IA5STRING_new())) goto err;
d108 1
a108 1
		M_ASN1_IA5STRING_free(ia5);
a110 3
#ifdef CHARSET_EBCDIC
        ebcdic2ascii(ia5->data, ia5->data, ia5->length);
#endif /*CHARSET_EBCDIC*/
@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d85 1
a85 4
	if(!(tmp = OPENSSL_malloc(ia5->length + 1))) {
		X509V3err(X509V3_F_I2S_ASN1_IA5STRING,ERR_R_MALLOC_FAILURE);
		return NULL;
	}
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d68 1
a68 1
const X509V3_EXT_METHOD v3_ns_ia5_list[] = { 
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


