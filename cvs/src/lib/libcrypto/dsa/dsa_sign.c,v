head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.19
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.18;
commitid	8tb4v3IC8S2vzfHj;

1.18
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.17;
commitid	G74O1dmRukKsW7IJ;

1.17
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.09.10.16.24;	author miod;	state Exp;
branches;
next	1.15;
commitid	7IVFdVxu6X3GaaT8;

1.15
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.09.12.15.43;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.20;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.31;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.08;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.06;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.46;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.16;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.05;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.08;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.06.27.05.05.32;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.01.09.12.13.55;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@None of these need to include <openssl/rand.h>
@
text
@/* $OpenBSD: dsa_sign.c,v 1.18 2014/07/12 16:03:37 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Original version from Steven Schoch <schoch@@sheba.arc.nasa.gov> */

#include <openssl/bn.h>
#include <openssl/dsa.h>

DSA_SIG *
DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
{
	return dsa->meth->dsa_do_sign(dgst, dlen, dsa);
}

int
DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
{
	return dsa->meth->dsa_sign_setup(dsa, ctx_in, kinvp, rp);
}

DSA_SIG *
DSA_SIG_new(void)
{
	DSA_SIG *sig;

	sig = malloc(sizeof(DSA_SIG));
	if (!sig)
		return NULL;
	sig->r = NULL;
	sig->s = NULL;
	return sig;
}

void
DSA_SIG_free(DSA_SIG *sig)
{
	if (sig) {
		BN_free(sig->r);
		BN_free(sig->s);
		free(sig);
	}
}
@


1.18
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_sign.c,v 1.17 2014/07/11 08:44:48 jsing Exp $ */
a62 1
#include <openssl/rand.h>
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_sign.c,v 1.16 2014/07/09 10:16:24 miod Exp $ */
d94 2
a95 4
		if (sig->r)
			BN_free(sig->r);
		if (sig->s)
			BN_free(sig->s);
@


1.16
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: dsa_sign.c,v 1.15 2014/06/12 15:49:28 deraadt Exp $ */
d61 1
a61 1
#include "cryptlib.h"
a63 1
#include <openssl/bn.h>
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d66 3
a68 2
DSA_SIG * DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
	{
d70 1
a70 1
	}
d72 3
a74 2
int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
	{
d76 1
a76 1
	}
d78 3
a80 2
DSA_SIG *DSA_SIG_new(void)
	{
d82 1
d89 1
a89 1
	}
d91 4
a94 4
void DSA_SIG_free(DSA_SIG *sig)
	{
	if (sig)
		{
a99 1
		}
d101 1
a101 1

@


1.14
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d1 1
a1 1
/* crypto/dsa/dsa_sign.c */
@


1.13
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d79 1
a79 1
	sig = OPENSSL_malloc(sizeof(DSA_SIG));
d95 1
a95 1
		OPENSSL_free(sig);
@


1.12
log
@resolve conflicts
@
text
@a67 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dsa->meth->flags & DSA_FLAG_FIPS_METHOD)
			&& !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_DO_SIGN, DSA_R_NON_FIPS_DSA_METHOD);
		return NULL;
		}
#endif
a72 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dsa->meth->flags & DSA_FLAG_FIPS_METHOD)
			&& !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_SIGN_SETUP, DSA_R_NON_FIPS_DSA_METHOD);
		return 0;
		}
#endif
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d64 1
d68 8
d79 1
a79 2
int DSA_sign(int type, const unsigned char *dgst, int dlen, unsigned char *sig,
	     unsigned int *siglen, DSA *dsa)
d81 3
a83 4
	DSA_SIG *s;
	RAND_seed(dgst, dlen);
	s=DSA_do_sign(dgst,dlen,dsa);
	if (s == NULL)
d85 2
a86 2
		*siglen=0;
		return(0);
d88 2
a89 3
	*siglen=i2d_DSA_SIG(s,&sig);
	DSA_SIG_free(s);
	return(1);
d92 12
a103 1
int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
d105 8
a112 1
	return dsa->meth->dsa_sign_setup(dsa, ctx_in, kinvp, rp);
@


1.10
log
@resolve conflicts
@
text
@a60 1
#include <stdio.h>
a61 1
#include <openssl/bn.h>
a63 4
#include <openssl/asn1.h>
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
d65 4
d70 2
a71 1
DSA_SIG * DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
d73 4
a76 2
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
d78 2
a79 2
		DSAerr(DSA_F_DSA_DO_SIGN, DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return NULL;
d81 3
a83 2
#endif
	return dsa->meth->dsa_do_sign(dgst, dlen, dsa);
a87 7
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_SIGN_SETUP, DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
@


1.9
log
@resolve conflicts
@
text
@d67 4
d74 7
d84 1
a84 2
int DSA_sign(int type, const unsigned char *dgst, int dlen, unsigned char *sig,
	     unsigned int *siglen, DSA *dsa)
d86 2
a87 3
	DSA_SIG *s;
	s=DSA_do_sign(dgst,dlen,dsa);
	if (s == NULL)
d89 2
a90 2
		*siglen=0;
		return(0);
d92 1
a92 7
	*siglen=i2d_DSA_SIG(s,&sig);
	DSA_SIG_free(s);
	return(1);
	}

int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
	{
@


1.8
log
@resolve conflicts
@
text
@a66 4
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif
#include <openssl/fips.h>
a69 5
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_FIPS_EXTERNAL_METHOD_ALLOW)
		&& !FIPS_dsa_check(dsa))
		return NULL;
#endif
a89 5
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_FIPS_EXTERNAL_METHOD_ALLOW)
		&& !FIPS_dsa_check(dsa))
		return 0;
#endif
@


1.7
log
@resolve conflicts
@
text
@d75 2
a76 1
	if(FIPS_mode() && !FIPS_dsa_check(dsa))
d100 2
a101 1
	if(FIPS_mode() && !FIPS_dsa_check(dsa))
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d67 4
d74 4
d98 4
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a66 1
#include <openssl/engine.h>
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d71 1
a71 1
	return ENGINE_get_DSA(dsa->engine)->dsa_do_sign(dgst, dlen, dsa);
d91 1
a91 1
	return ENGINE_get_DSA(dsa->engine)->dsa_sign_setup(dsa, ctx_in, kinvp, rp);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d67 1
d71 1
a71 1
	return dsa->meth->dsa_do_sign(dgst, dlen, dsa);
d91 1
a91 1
	return dsa->meth->dsa_sign_setup(dsa, ctx_in, kinvp, rp);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d70 1
a70 61
	BIGNUM *kinv=NULL,*r=NULL,*s=NULL;
	BIGNUM m;
	BIGNUM xr;
	BN_CTX *ctx=NULL;
	int i,reason=ERR_R_BN_LIB;
	DSA_SIG *ret=NULL;

	BN_init(&m);
	BN_init(&xr);
	s=BN_new();
	if (s == NULL) goto err;

	i=BN_num_bytes(dsa->q); /* should be 20 */
	if ((dlen > i) || (dlen > 50))
		{
		reason=DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE;
		goto err;
		}

	ctx=BN_CTX_new();
	if (ctx == NULL) goto err;

	if ((dsa->kinv == NULL) || (dsa->r == NULL))
		{
		if (!DSA_sign_setup(dsa,ctx,&kinv,&r)) goto err;
		}
	else
		{
		kinv=dsa->kinv;
		dsa->kinv=NULL;
		r=dsa->r;
		dsa->r=NULL;
		}

	if (BN_bin2bn(dgst,dlen,&m) == NULL) goto err;

	/* Compute  s = inv(k) (m + xr) mod q */
	if (!BN_mod_mul(&xr,dsa->priv_key,r,dsa->q,ctx)) goto err;/* s = xr */
	if (!BN_add(s, &xr, &m)) goto err;		/* s = m + xr */
	if (BN_cmp(s,dsa->q) > 0)
		BN_sub(s,s,dsa->q);
	if (!BN_mod_mul(s,s,kinv,dsa->q,ctx)) goto err;

	ret=DSA_SIG_new();
	if (ret == NULL) goto err;
	ret->r = r;
	ret->s = s;
	
err:
	if (!ret)
		{
		DSAerr(DSA_F_DSA_DO_SIGN,reason);
		BN_free(r);
		BN_free(s);
		}
	if (ctx != NULL) BN_CTX_free(ctx);
	BN_clear_free(&m);
	BN_clear_free(&xr);
	if (kinv != NULL) /* dsa->kinv is NULL now if we used it */
	    BN_clear_free(kinv);
	return(ret);
a72 4
/* data has already been hashed (probably with SHA or SHA-1). */

/* unsigned char *sig:  out    */
/* unsigned int *siglen:  out    */
d90 1
a90 56
	BN_CTX *ctx;
	BIGNUM k,*kinv=NULL,*r=NULL;
	int ret=0;

	if (ctx_in == NULL)
		{
		if ((ctx=BN_CTX_new()) == NULL) goto err;
		}
	else
		ctx=ctx_in;

	BN_init(&k);
	if ((r=BN_new()) == NULL) goto err;
	kinv=NULL;

	/* Get random k */
	for (;;)
		{
		if (!BN_rand(&k, BN_num_bits(dsa->q), 1, 0)) goto err;
		if (BN_cmp(&k,dsa->q) >= 0)
			BN_sub(&k,&k,dsa->q);
		if (!BN_is_zero(&k)) break;
		}

	if ((dsa->method_mont_p == NULL) && (dsa->flags & DSA_FLAG_CACHE_MONT_P))
		{
		if ((dsa->method_mont_p=(char *)BN_MONT_CTX_new()) != NULL)
			if (!BN_MONT_CTX_set((BN_MONT_CTX *)dsa->method_mont_p,
				dsa->p,ctx)) goto err;
		}

	/* Compute r = (g^k mod p) mod q */
	if (!BN_mod_exp_mont(r,dsa->g,&k,dsa->p,ctx,
		(BN_MONT_CTX *)dsa->method_mont_p)) goto err;
	if (!BN_mod(r,r,dsa->q,ctx)) goto err;

	/* Compute  part of 's = inv(k) (m + xr) mod q' */
	if ((kinv=BN_mod_inverse(NULL,&k,dsa->q,ctx)) == NULL) goto err;

	if (*kinvp != NULL) BN_clear_free(*kinvp);
	*kinvp=kinv;
	kinv=NULL;
	if (*rp != NULL) BN_clear_free(*rp);
	*rp=r;
	ret=1;
err:
	if (!ret)
		{
		DSAerr(DSA_F_DSA_SIGN_SETUP,ERR_R_BN_LIB);
		if (kinv != NULL) BN_clear_free(kinv);
		if (r != NULL) BN_clear_free(r);
		}
	if (ctx_in == NULL) BN_CTX_free(ctx);
	if (kinv != NULL) BN_clear_free(kinv);
	BN_clear_free(&k);
	return(ret);
@


1.1
log
@Initial revision
@
text
@d59 1
a59 1
/* Origional version from Steven Schoch <schoch@@sheba.arc.nasa.gov> */
d63 4
a66 4
#include "bn.h"
#include "dsa.h"
#include "rand.h"
#include "asn1.h"
d68 1
a68 10
/* data has already been hashed (probably with SHA or SHA-1). */
/*	DSAerr(DSA_F_DSA_SIGN,DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE); */

int DSA_sign(type,dgst,dlen,sig,siglen,dsa)
int type;
unsigned char *dgst;
int dlen;
unsigned char *sig;	/* out */
unsigned int *siglen;	/* out */
DSA *dsa;
d70 3
a72 3
	BIGNUM *kinv=NULL,*r=NULL;
	BIGNUM *m=NULL;
	BIGNUM *xr=NULL,*s=NULL;
d74 7
a80 5
	unsigned char *p;
	int i,len=0,ret=0,reason=ERR_R_BN_LIB;
        ASN1_INTEGER rbs,sbs;
	MS_STATIC unsigned char rbuf[50]; /* assuming r is 20 bytes +extra */
	MS_STATIC unsigned char sbuf[50]; /* assuming s is 20 bytes +extra */
d104 1
a104 6
	m=BN_new();
	xr=BN_new();
	s=BN_new();
	if (m == NULL || xr == NULL || s == NULL) goto err;

	if (BN_bin2bn(dgst,dlen,m) == NULL) goto err;
d107 4
a110 2
	if (!BN_mul(xr, dsa->priv_key, r)) goto err;	/* s = xr */
	if (!BN_add(s, xr, m)) goto err;		/* s = m + xr */
d113 5
a117 19
	/*
	 * Now create a ASN.1 sequence of the integers R and S.
	 */
	rbs.data=rbuf;
	sbs.data=sbuf;
	rbs.type = V_ASN1_INTEGER;
	sbs.type = V_ASN1_INTEGER;
	rbs.length=BN_bn2bin(r,rbs.data);
	sbs.length=BN_bn2bin(s,sbs.data);

	len =i2d_ASN1_INTEGER(&rbs,NULL);
	len+=i2d_ASN1_INTEGER(&sbs,NULL);

	p=sig;
	ASN1_put_object(&p,1,len,V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
	i2d_ASN1_INTEGER(&rbs,&p);
	i2d_ASN1_INTEGER(&sbs,&p);
	*siglen=(p-sig);
	ret=1;
d119 6
a124 6
	if (!ret) DSAerr(DSA_F_DSA_SIGN,reason);
		
#if 1 /* do the right thing :-) */
	if (kinv != NULL) BN_clear_free(kinv);
	if (r != NULL) BN_clear_free(r);
#endif
d126 4
a129 3
	if (m != NULL) BN_clear_free(m);
	if (xr != NULL) BN_clear_free(xr);
	if (s != NULL) BN_clear_free(s);
d133 20
a152 5
int DSA_sign_setup(dsa,ctx_in,kinvp,rp)
DSA *dsa;
BN_CTX *ctx_in;
BIGNUM **kinvp;
BIGNUM **rp;
d155 1
a155 1
	BIGNUM *k=NULL,*kinv=NULL,*r=NULL;
d165 2
a166 4
	r=BN_new();
	k=BN_new();
	if ((r == NULL) || (k == NULL))
		goto err;
a168 2
	if (r == NULL) goto err;

d172 11
a182 4
		if (!BN_rand(k, BN_num_bits(dsa->q), 1, 0)) goto err;
		if (BN_cmp(k,dsa->q) >= 0)
			BN_sub(k,k,dsa->q);
		if (!BN_is_zero(k)) break;
d186 2
a187 1
	if (!BN_mod_exp(r,dsa->g,k,dsa->p,ctx)) goto err;
d191 1
a191 1
	if ((kinv=BN_mod_inverse(k,dsa->q,ctx)) == NULL) goto err;
a206 1
	if (k != NULL) BN_clear_free(k);
d208 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
/* Original version from Steven Schoch <schoch@@sheba.arc.nasa.gov> */
d63 4
a66 5
#include <openssl/bn.h>
#include <openssl/dsa.h>
#include <openssl/rand.h>
#include <openssl/asn1.h>
#include <openssl/engine.h>
d68 10
a77 1
DSA_SIG * DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
d79 75
a153 1
	return dsa->meth->dsa_do_sign(dgst, dlen, dsa);
d156 5
a160 2
int DSA_sign(int type, const unsigned char *dgst, int dlen, unsigned char *sig,
	     unsigned int *siglen, DSA *dsa)
d162 34
a195 11
	DSA_SIG *s;
	s=DSA_do_sign(dgst,dlen,dsa);
	if (s == NULL)
		{
		*siglen=0;
		return(0);
		}
	*siglen=i2d_DSA_SIG(s,&sig);
	DSA_SIG_free(s);
	return(1);
	}
d197 17
a213 3
int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
	{
	return dsa->meth->dsa_sign_setup(dsa, ctx_in, kinvp, rp);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d67 1
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a66 4
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif
#include <openssl/fips.h>
a69 4
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !FIPS_dsa_check(dsa))
		return NULL;
#endif
a89 4
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !FIPS_dsa_check(dsa))
		return 0;
#endif
@


1.1.1.5
log
@import of openssl-0.9.7j
@
text
@d75 1
a75 2
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_FIPS_EXTERNAL_METHOD_ALLOW)
		&& !FIPS_dsa_check(dsa))
d99 1
a99 2
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_FIPS_EXTERNAL_METHOD_ALLOW)
		&& !FIPS_dsa_check(dsa))
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d67 4
d74 5
d99 5
@


1.1.1.7
log
@import openssl-0.9.8j
@
text
@a66 3
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
d68 4
d73 2
a74 1
DSA_SIG * DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
d76 3
a78 2
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
d80 2
a81 2
		DSAerr(DSA_F_DSA_DO_SIGN, DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return NULL;
d83 3
a85 2
#endif
	return dsa->meth->dsa_do_sign(dgst, dlen, dsa);
a89 7
#ifdef OPENSSL_FIPS
	if(FIPS_mode() && !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_SIGN_SETUP, DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE);
		return 0;
		}
#endif
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@d61 1
d63 1
d66 5
d74 7
d84 1
a84 2
int DSA_sign(int type, const unsigned char *dgst, int dlen, unsigned char *sig,
	     unsigned int *siglen, DSA *dsa)
d86 2
a87 4
	DSA_SIG *s;
	RAND_seed(dgst, dlen);
	s=DSA_do_sign(dgst,dlen,dsa);
	if (s == NULL)
d89 2
a90 2
		*siglen=0;
		return(0);
d92 1
a92 7
	*siglen=i2d_DSA_SIG(s,&sig);
	DSA_SIG_free(s);
	return(1);
	}

int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
	{
@


1.1.1.9
log
@import OpenSSL-1.0.1c
@
text
@a63 1
#include <openssl/bn.h>
a66 8
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dsa->meth->flags & DSA_FLAG_FIPS_METHOD)
			&& !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
		{
		DSAerr(DSA_F_DSA_DO_SIGN, DSA_R_NON_FIPS_DSA_METHOD);
		return NULL;
		}
#endif
d70 2
a71 1
int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
d73 4
a76 3
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !(dsa->meth->flags & DSA_FLAG_FIPS_METHOD)
			&& !(dsa->flags & DSA_FLAG_NON_FIPS_ALLOW))
d78 2
a79 2
		DSAerr(DSA_F_DSA_SIGN_SETUP, DSA_R_NON_FIPS_DSA_METHOD);
		return 0;
d81 3
a83 2
#endif
	return dsa->meth->dsa_sign_setup(dsa, ctx_in, kinvp, rp);
d86 1
a86 1
DSA_SIG *DSA_SIG_new(void)
d88 1
a88 19
	DSA_SIG *sig;
	sig = OPENSSL_malloc(sizeof(DSA_SIG));
	if (!sig)
		return NULL;
	sig->r = NULL;
	sig->s = NULL;
	return sig;
	}

void DSA_SIG_free(DSA_SIG *sig)
	{
	if (sig)
		{
		if (sig->r)
			BN_free(sig->r);
		if (sig->s)
			BN_free(sig->s);
		OPENSSL_free(sig);
		}
@


