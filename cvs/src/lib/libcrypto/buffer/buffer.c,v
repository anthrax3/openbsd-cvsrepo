head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.2
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24;
locks; strict;
comment	@ * @;


1.27
date	2017.05.02.03.59.44;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	Dm63V7JYy6WzetfM;

1.26
date	2017.04.09.15.06.20;	author jsing;	state Exp;
branches;
next	1.25;
commitid	95xx8AxAKItf675K;

1.25
date	2017.04.09.15.03.54;	author jsing;	state Exp;
branches;
next	1.24;
commitid	shzjFbqfCS01d8xM;

1.24
date	2017.03.16.13.29.56;	author jsing;	state Exp;
branches;
next	1.23;
commitid	umQoWPuSZ7GnirTD;

1.23
date	2017.03.16.13.15.06;	author jsing;	state Exp;
branches;
next	1.22;
commitid	inmDDjGD3kBXG9Hj;

1.22
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.20;
commitid	yQEL1wOWIearrW15;

1.20
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.19;
commitid	id8dTrTMtnTn4fqt;

1.19
date	2014.07.09.16.51.09;	author miod;	state Exp;
branches;
next	1.18;
commitid	xQib6lUpLTGGjJmy;

1.18
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.06.01.22.14.53;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	2n5Nh7fhHJDRez5p;

1.16
date	2014.06.01.15.10.53;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	UBe4i6g3zlXCSA6B;

1.15
date	2014.04.26.13.07.16;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.16.30.59;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.13.58.24;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2012.04.19.22.57.38;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches
	1.8.4.1
	1.8.8.1;
next	1.7;

1.7
date	2009.01.09.12.15.33;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.25;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.50;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.07;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.53;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.53;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.04;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.37;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;

1.8.4.1
date	2012.04.22.01.38.23;	author djm;	state Exp;
branches;
next	;

1.8.8.1
date	2012.04.22.01.39.22;	author djm;	state Exp;
branches;
next	;


desc
@@


1.27
log
@use freezero() instead of memset/explicit_bzero + free.  Substantially
reduces conditional logic (-218, +82).

MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH cache alignment calculation bn/bn_exp.c
wasn'tt quite right.  Two other tricky bits with ASN1_STRING_FLAG_NDEF and
BN_FLG_STATIC_DATA where the condition cannot be collapsed completely.

Passes regress.  ok beck
@
text
@/* $OpenBSD: buffer.c,v 1.26 2017/04/09 15:06:20 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/err.h>

/*
 * LIMIT_BEFORE_EXPANSION is the maximum n such that (n + 3) / 3 * 4 < 2**31.
 * That function is applied in several functions in this file and this limit
 * ensures that the result fits in an int.
 */
#define LIMIT_BEFORE_EXPANSION 0x5ffffffc

BUF_MEM *
BUF_MEM_new(void)
{
	BUF_MEM *ret;

	if ((ret = calloc(1, sizeof(BUF_MEM))) == NULL) {
		BUFerror(ERR_R_MALLOC_FAILURE);
		return (NULL);
	}

	return (ret);
}

void
BUF_MEM_free(BUF_MEM *a)
{
	if (a == NULL)
		return;

	freezero(a->data, a->max);
	free(a);
}

int
BUF_MEM_grow(BUF_MEM *str, size_t len)
{
	return BUF_MEM_grow_clean(str, len);
}

int
BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
{
	char *ret;
	size_t n;

	if (str->max >= len) {
		if (str->length >= len)
			memset(&str->data[len], 0, str->length - len);
		str->length = len;
		return (len);
	}

	if (len > LIMIT_BEFORE_EXPANSION) {
		BUFerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}

	n = (len + 3) / 3 * 4;
	if ((ret = recallocarray(str->data, str->max, n, 1)) == NULL) {
		BUFerror(ERR_R_MALLOC_FAILURE);
		return (0);
	}
	str->data = ret;
	str->max = n;
	str->length = len;

	return (len);
}

void
BUF_reverse(unsigned char *out, const unsigned char *in, size_t size)
{
	size_t i;

	if (in) {
		out += size - 1;
		for (i = 0; i < size; i++)
			*out-- = *in++;
	} else {
		unsigned char *q;
		char c;
		q = out + size - 1;
		for (i = 0; i < size / 2; i++) {
			c = *q;
			*q-- = *out;
			*out++ = c;
		}
	}
}
@


1.26
log
@Simplify/clean up BUF_MEM_grow_clean().

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: buffer.c,v 1.24 2017/03/16 13:29:56 jsing Exp $ */
d92 1
a92 4
	if (a->data != NULL) {
		explicit_bzero(a->data, a->max);
		free(a->data);
	}
@


1.25
log
@With recallocarray() BUF_MEM_grow() is essentially the same as
BUF_MEM_grow_clean() (the only difference is clearing on internal down
sizing), so make it a wrapper.

ok beck@@ deraadt@@
@
text
@d66 5
a70 3
/* LIMIT_BEFORE_EXPANSION is the maximum n such that (n+3)/3*4 < 2**31. That
 * function is applied in several functions in this file and this limit ensures
 * that the result fits in an int. */
a110 5
	if (str->length >= len) {
		memset(&str->data[len], 0, str->length - len);
		str->length = len;
		return (len);
	}
d112 2
d117 1
a117 1
	/* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
d122 1
d124 1
a124 2
	ret = recallocarray(str->data, str->max, n, 1);
	if (ret == NULL) {
d126 1
a126 5
		len = 0;
	} else {
		str->data = ret;
		str->max = n;
		str->length = len;
d128 4
@


1.24
log
@Convert BUF_MEM_grow() and BUF_MEM_grow_clean() to recallocarray(),
ensuring that the buffer contents are zeroed on allocation and not leaked
when resizing.

It is worth noting that BUF_MEM_grow_clean() already did this manually by
avoiding realloc().

ok beck@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: buffer.c,v 1.22 2017/01/29 17:49:22 beck Exp $ */
d100 1
a100 27
	char *ret;
	size_t n;

	if (str->length >= len) {
		str->length = len;
		return (len);
	}
	if (str->max >= len) {
		str->length = len;
		return (len);
	}
	/* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
	if (len > LIMIT_BEFORE_EXPANSION) {
		BUFerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	n = (len + 3) / 3 * 4;
	ret = recallocarray(str->data, str->max, n, 1);
	if (ret == NULL) {
		BUFerror(ERR_R_MALLOC_FAILURE);
		len = 0;
	} else {
		str->data = ret;
		str->max = n;
		str->length = len;
	}
	return (len);
@


1.23
log
@Use calloc() instead of malloc() followed by manually zeroing fields.

ok beck@@ inoguchi@@
@
text
@a107 1
		memset(&str->data[str->length], 0, len - str->length);
d117 1
a117 1
	ret = realloc(str->data, n);
a123 1
		memset(&str->data[str->length], 0, len - str->length);
a140 1
		memset(&str->data[str->length], 0, len - str->length);
d150 1
a150 7
	ret = malloc(n);
	/* we're not shrinking - that case returns above */
	if ((ret != NULL)  && (str->data != NULL)) {
		memcpy(ret, str->data, str->max);
		explicit_bzero(str->data, str->max);
		free(str->data);
	}
a156 1
		memset(&str->data[str->length], 0, len - str->length);
@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: buffer.c,v 1.21 2014/07/11 08:44:48 jsing Exp $ */
d76 1
a76 2
	ret = malloc(sizeof(BUF_MEM));
	if (ret == NULL) {
d80 1
a80 3
	ret->length = 0;
	ret->max = 0;
	ret->data = NULL;
@


1.21
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: buffer.c,v 1.20 2014/07/10 13:58:22 jsing Exp $ */
d78 1
a78 1
		BUFerr(BUF_F_BUF_MEM_NEW, ERR_R_MALLOC_FAILURE);
d117 1
a117 1
		BUFerr(BUF_F_BUF_MEM_GROW, ERR_R_MALLOC_FAILURE);
d123 1
a123 1
		BUFerr(BUF_F_BUF_MEM_GROW, ERR_R_MALLOC_FAILURE);
d152 1
a152 1
		BUFerr(BUF_F_BUF_MEM_GROW_CLEAN, ERR_R_MALLOC_FAILURE);
d164 1
a164 1
		BUFerr(BUF_F_BUF_MEM_GROW_CLEAN, ERR_R_MALLOC_FAILURE);
@


1.20
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: buffer.c,v 1.19 2014/07/09 16:51:09 miod Exp $ */
d60 1
a62 1
#include "cryptlib.h"
d64 1
@


1.19
log
@Replace memset(a, 0, ...); free(a); by explicit_bzero(a, ...); free(a); in
fear a smartass-optimizing compiler decides memset is useless immediately
before free().

ok jsing@@ deraadt@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: buffer.c,v 1.18 2014/06/12 15:49:28 deraadt Exp $ */
d60 2
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d91 1
a91 1
		memset(a->data, 0, a->max);
@


1.17
log
@realloc with NULL is same as malloc
ok guenther
@
text
@d1 1
a1 1
/* crypto/buffer/buffer.c */
@


1.16
log
@Commit this before the head-scratching leads to premature baldness:
    memset(a->data, 0, (unsigned int)a->max);
but the decl is:
    size_t max;
size_t could be larger than int, especially in some of the systems OpenSSL
purports to support.

How do _intentionally truncating_ casts like enter into a codebase?
Lack of understanding of C, at a minimum.  Generally the objects are
small, but this code is _intentionally unready_ for large objects.
ok miod
@
text
@d118 1
a118 4
	if (str->data == NULL)
		ret = malloc(n);
	else
		ret = realloc(str->data, n);
@


1.15
log
@More KNF.
@
text
@d91 1
a91 1
		memset(a->data, 0, (unsigned int)a->max);
@


1.14
log
@remove OPENSSL_realloc_clean usage here - replace with intrinsics to make
it obvious what should happen.
ok tedu@@
@
text
@d91 1
a91 1
		memset(a->data, 0,(unsigned int)a->max);
d108 1
a108 1
		memset(&str->data[str->length], 0,len - str->length);
d128 1
a128 1
		memset(&str->data[str->length], 0,len - str->length);
d141 1
a141 1
		memset(&str->data[len], 0,str->length - len);
d146 1
a146 1
		memset(&str->data[str->length], 0,len - str->length);
d179 1
@


1.13
log
@Initial KNF.
@
text
@d156 7
a162 4
	if (str->data == NULL)
		ret = malloc(n);
	else
		ret = OPENSSL_realloc_clean(str->data, str->max, n);
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d68 3
a70 2
BUF_MEM *BUF_MEM_new(void)
	{
d73 4
a76 10
	ret=malloc(sizeof(BUF_MEM));
	if (ret == NULL)
		{
		BUFerr(BUF_F_BUF_MEM_NEW,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	ret->length=0;
	ret->max=0;
	ret->data=NULL;
	return(ret);
d78 11
d90 2
a91 8
void BUF_MEM_free(BUF_MEM *a)
	{
	if(a == NULL)
	    return;

	if (a->data != NULL)
		{
		memset(a->data,0,(unsigned int)a->max);
d93 1
a93 1
		}
d95 1
a95 1
	}
d97 3
a99 2
int BUF_MEM_grow(BUF_MEM *str, size_t len)
	{
d103 9
a111 11
	if (str->length >= len)
		{
		str->length=len;
		return(len);
		}
	if (str->max >= len)
		{
		memset(&str->data[str->length],0,len-str->length);
		str->length=len;
		return(len);
		}
d113 2
a114 3
	if (len > LIMIT_BEFORE_EXPANSION)
		{
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
d116 2
a117 2
		}
	n=(len+3)/3*4;
d119 1
a119 8
		ret=malloc(n);
	else
		ret=realloc(str->data,n);
	if (ret == NULL)
		{
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
		len=0;
		}
d121 9
a129 7
		{
		str->data=ret;
		str->max=n;
		memset(&str->data[str->length],0,len-str->length);
		str->length=len;
		}
	return(len);
d131 2
d134 3
a136 2
int BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
	{
d140 10
a149 12
	if (str->length >= len)
		{
		memset(&str->data[len],0,str->length-len);
		str->length=len;
		return(len);
		}
	if (str->max >= len)
		{
		memset(&str->data[str->length],0,len-str->length);
		str->length=len;
		return(len);
		}
d151 2
a152 3
	if (len > LIMIT_BEFORE_EXPANSION)
		{
		BUFerr(BUF_F_BUF_MEM_GROW_CLEAN,ERR_R_MALLOC_FAILURE);
d154 2
a155 2
		}
	n=(len+3)/3*4;
d157 1
a157 8
		ret=malloc(n);
	else
		ret=OPENSSL_realloc_clean(str->data,str->max,n);
	if (ret == NULL)
		{
		BUFerr(BUF_F_BUF_MEM_GROW_CLEAN,ERR_R_MALLOC_FAILURE);
		len=0;
		}
d159 9
a167 7
		{
		str->data=ret;
		str->max=n;
		memset(&str->data[str->length],0,len-str->length);
		str->length=len;
		}
	return(len);
d169 2
d172 3
a174 2
void BUF_reverse(unsigned char *out, const unsigned char *in, size_t size)
	{
d176 1
a176 2
	if (in)
		{
d180 1
a180 3
		}
	else
		{
d184 1
a184 2
		for (i = 0; i < size/2; i++)
			{
a187 1
			}
d190 1
@


1.11
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d72 1
a72 1
	ret=OPENSSL_malloc(sizeof(BUF_MEM));
d92 1
a92 1
		OPENSSL_free(a->data);
d94 1
a94 1
	OPENSSL_free(a);
d121 1
a121 1
		ret=OPENSSL_malloc(n);
d123 1
a123 1
		ret=OPENSSL_realloc(str->data,n);
d164 1
a164 1
		ret=OPENSSL_malloc(n);
@


1.10
log
@resolve conflicts
@
text
@d182 1
a182 1
void BUF_reverse(unsigned char *out, unsigned char *in, size_t size)
d189 1
a189 1
			*in++ = *out--;
@


1.9
log
@cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@
@
text
@d159 1
a159 1
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
a179 58
	}

char *BUF_strdup(const char *str)
	{
	if (str == NULL) return(NULL);
	return BUF_strndup(str, strlen(str));
	}

char *BUF_strndup(const char *str, size_t siz)
	{
	char *ret;

	if (str == NULL) return(NULL);

	ret=OPENSSL_malloc(siz+1);
	if (ret == NULL) 
		{
		BUFerr(BUF_F_BUF_STRNDUP,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	BUF_strlcpy(ret,str,siz+1);
	return(ret);
	}

void *BUF_memdup(const void *data, size_t siz)
	{
	void *ret;

	if (data == NULL) return(NULL);

	ret=OPENSSL_malloc(siz);
	if (ret == NULL) 
		{
		BUFerr(BUF_F_BUF_MEMDUP,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	return memcpy(ret, data, siz);
	}	

size_t BUF_strlcpy(char *dst, const char *src, size_t size)
	{
	size_t l = 0;
	for(; size > 1 && *src; size--)
		{
		*dst++ = *src++;
		l++;
		}
	if (size)
		*dst = '\0';
	return l + strlen(src);
	}

size_t BUF_strlcat(char *dst, const char *src, size_t size)
	{
	size_t l = 0;
	for(; size > 0 && *dst; size--, dst++)
		l++;
	return l + BUF_strlcpy(dst, src, size);
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d63 5
d113 6
d155 6
@


1.8.8.1
log
@MFC

mem.c
revision 1.14
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +4 -0
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@

asn1/a_d2i_fp.c
revision 1.6
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +40 -14
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@

buffer/buffer.c
revision 1.9
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +17 -0
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@
@
text
@a62 5
/* LIMIT_BEFORE_EXPANSION is the maximum n such that (n+3)/3*4 < 2**31. That
 * function is applied in several functions in this file and this limit ensures
 * that the result fits in an int. */
#define LIMIT_BEFORE_EXPANSION 0x5ffffffc

a107 6
	/* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
	if (len > LIMIT_BEFORE_EXPANSION)
		{
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
		return 0;
		}
a143 6
		}
	/* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
	if (len > LIMIT_BEFORE_EXPANSION)
		{
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
		return 0;
@


1.8.4.1
log
@MFC

mem.c
revision 1.14
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +4 -0
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@

asn1/a_d2i_fp.c
revision 1.6
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +40 -14
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@

buffer/buffer.c
revision 1.9
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +17 -0
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@
@
text
@a62 5
/* LIMIT_BEFORE_EXPANSION is the maximum n such that (n+3)/3*4 < 2**31. That
 * function is applied in several functions in this file and this limit ensures
 * that the result fits in an int. */
#define LIMIT_BEFORE_EXPANSION 0x5ffffffc

a107 6
	/* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
	if (len > LIMIT_BEFORE_EXPANSION)
		{
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
		return 0;
		}
a143 6
		}
	/* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
	if (len > LIMIT_BEFORE_EXPANSION)
		{
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
		return 0;
@


1.7
log
@resolve conflicts
@
text
@d92 1
a92 1
int BUF_MEM_grow(BUF_MEM *str, int len)
d95 1
a95 1
	unsigned int n;
d128 1
a128 1
int BUF_MEM_grow_clean(BUF_MEM *str, int len)
d131 1
a131 1
	unsigned int n;
d163 81
@


1.6
log
@resolve conflicts
@
text
@a163 58

char *BUF_strdup(const char *str)
	{
	if (str == NULL) return(NULL);
	return BUF_strndup(str, strlen(str));
	}

char *BUF_strndup(const char *str, size_t siz)
	{
	char *ret;

	if (str == NULL) return(NULL);

	ret=OPENSSL_malloc(siz+1);
	if (ret == NULL) 
		{
		BUFerr(BUF_F_BUF_STRNDUP,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	BUF_strlcpy(ret,str,siz+1);
	return(ret);
	}

void *BUF_memdup(const void *data, size_t siz)
	{
	void *ret;

	if (data == NULL) return(NULL);

	ret=OPENSSL_malloc(siz);
	if (ret == NULL) 
		{
		BUFerr(BUF_F_BUF_MEMDUP,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	return memcpy(ret, data, siz);
	}	

size_t BUF_strlcpy(char *dst, const char *src, size_t size)
	{
	size_t l = 0;
	for(; size > 1 && *src; size--)
		{
		*dst++ = *src++;
		l++;
		}
	if (size)
		*dst = '\0';
	return l + strlen(src);
	}

size_t BUF_strlcat(char *dst, const char *src, size_t size)
	{
	size_t l = 0;
	for(; size > 0 && *dst; size--, dst++)
		l++;
	return l + BUF_strlcpy(dst, src, size);
	}
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d152 1
a152 1
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
d167 6
a173 1
	int n;
d177 1
a177 2
	n=strlen(str);
	ret=OPENSSL_malloc(n+1);
d180 1
a180 1
		BUFerr(BUF_F_BUF_STRDUP,ERR_R_MALLOC_FAILURE);
d183 1
a183 1
	memcpy(ret,str,n+1);
d186 15
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d128 37
d183 20
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d121 2
a123 1
		str->max=n;
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d67 1
a67 1
	ret=Malloc(sizeof(BUF_MEM));
d87 1
a87 1
		Free(a->data);
d89 1
a89 1
	Free(a);
d110 1
a110 1
		ret=Malloc(n);
d112 1
a112 1
		ret=Realloc(str->data,n);
d135 1
a135 1
	ret=Malloc(n+1);
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "buffer.h"
d63 1
a63 1
BUF_MEM *BUF_MEM_new()
d67 1
a67 1
	ret=(BUF_MEM *)Malloc(sizeof(BUF_MEM));
d79 1
a79 2
void BUF_MEM_free(a)
BUF_MEM *a;
d81 3
d92 1
a92 3
int BUF_MEM_grow(str, len)
BUF_MEM *str;
int len;
d104 1
a104 1
		memset(&(str->data[str->length]),0,len-str->length);
d110 1
a110 1
		ret=(char *)Malloc(n);
d112 1
a112 1
		ret=(char *)Realloc(str->data,n);
d127 1
a127 2
char *BUF_strdup(str)
char *str;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/buffer.h>
d63 1
a63 1
BUF_MEM *BUF_MEM_new(void)
d67 1
a67 1
	ret=OPENSSL_malloc(sizeof(BUF_MEM));
d79 2
a80 1
void BUF_MEM_free(BUF_MEM *a)
a81 3
	if(a == NULL)
	    return;

d85 1
a85 1
		OPENSSL_free(a->data);
d87 1
a87 1
	OPENSSL_free(a);
d90 3
a92 1
int BUF_MEM_grow(BUF_MEM *str, int len)
d104 1
a104 1
		memset(&str->data[str->length],0,len-str->length);
d110 1
a110 1
		ret=OPENSSL_malloc(n);
d112 1
a112 1
		ret=OPENSSL_realloc(str->data,n);
d121 1
a122 2
		memset(&str->data[str->length],0,len-str->length);
		str->length=len;
d127 2
a128 1
char *BUF_strdup(const char *str)
d136 1
a136 1
	ret=OPENSSL_malloc(n+1);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a127 37
int BUF_MEM_grow_clean(BUF_MEM *str, int len)
	{
	char *ret;
	unsigned int n;

	if (str->length >= len)
		{
		memset(&str->data[len],0,str->length-len);
		str->length=len;
		return(len);
		}
	if (str->max >= len)
		{
		memset(&str->data[str->length],0,len-str->length);
		str->length=len;
		return(len);
		}
	n=(len+3)/3*4;
	if (str->data == NULL)
		ret=OPENSSL_malloc(n);
	else
		ret=OPENSSL_realloc_clean(str->data,str->max,n);
	if (ret == NULL)
		{
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
		len=0;
		}
	else
		{
		str->data=ret;
		str->max=n;
		memset(&str->data[str->length],0,len-str->length);
		str->length=len;
		}
	return(len);
	}

a145 20
size_t BUF_strlcpy(char *dst, const char *src, size_t size)
	{
	size_t l = 0;
	for(; size > 1 && *src; size--)
		{
		*dst++ = *src++;
		l++;
		}
	if (size)
		*dst = '\0';
	return l + strlen(src);
	}

size_t BUF_strlcat(char *dst, const char *src, size_t size)
	{
	size_t l = 0;
	for(; size > 0 && *dst; size--, dst++)
		l++;
	return l + BUF_strlcpy(dst, src, size);
	}
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d152 1
a152 1
		BUFerr(BUF_F_BUF_MEM_GROW_CLEAN,ERR_R_MALLOC_FAILURE);
a166 6
	if (str == NULL) return(NULL);
	return BUF_strndup(str, strlen(str));
	}

char *BUF_strndup(const char *str, size_t siz)
	{
d168 1
d172 2
a173 1
	ret=OPENSSL_malloc(siz+1);
d176 1
a176 1
		BUFerr(BUF_F_BUF_STRNDUP,ERR_R_MALLOC_FAILURE);
d179 1
a179 1
	BUF_strlcpy(ret,str,siz+1);
a181 15

void *BUF_memdup(const void *data, size_t siz)
	{
	void *ret;

	if (data == NULL) return(NULL);

	ret=OPENSSL_malloc(siz);
	if (ret == NULL) 
		{
		BUFerr(BUF_F_BUF_MEMDUP,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	return memcpy(ret, data, siz);
	}	
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d164 58
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d92 1
a92 1
int BUF_MEM_grow(BUF_MEM *str, size_t len)
d95 1
a95 1
	size_t n;
d128 1
a128 1
int BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
d131 1
a131 1
	size_t n;
a162 81
	}

char *BUF_strdup(const char *str)
	{
	if (str == NULL) return(NULL);
	return BUF_strndup(str, strlen(str));
	}

char *BUF_strndup(const char *str, size_t siz)
	{
	char *ret;

	if (str == NULL) return(NULL);

	ret=OPENSSL_malloc(siz+1);
	if (ret == NULL) 
		{
		BUFerr(BUF_F_BUF_STRNDUP,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	BUF_strlcpy(ret,str,siz+1);
	return(ret);
	}

void *BUF_memdup(const void *data, size_t siz)
	{
	void *ret;

	if (data == NULL) return(NULL);

	ret=OPENSSL_malloc(siz);
	if (ret == NULL) 
		{
		BUFerr(BUF_F_BUF_MEMDUP,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
	return memcpy(ret, data, siz);
	}	

size_t BUF_strlcpy(char *dst, const char *src, size_t size)
	{
	size_t l = 0;
	for(; size > 1 && *src; size--)
		{
		*dst++ = *src++;
		l++;
		}
	if (size)
		*dst = '\0';
	return l + strlen(src);
	}

size_t BUF_strlcat(char *dst, const char *src, size_t size)
	{
	size_t l = 0;
	for(; size > 0 && *dst; size--, dst++)
		l++;
	return l + BUF_strlcpy(dst, src, size);
	}

void BUF_reverse(unsigned char *out, unsigned char *in, size_t size)
	{
	size_t i;
	if (in)
		{
		out += size - 1;
		for (i = 0; i < size; i++)
			*in++ = *out--;
		}
	else
		{
		unsigned char *q;
		char c;
		q = out + size - 1;
		for (i = 0; i < size/2; i++)
			{
			c = *q;
			*q-- = *out;
			*out++ = c;
			}
		}
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@a62 5
/* LIMIT_BEFORE_EXPANSION is the maximum n such that (n+3)/3*4 < 2**31. That
 * function is applied in several functions in this file and this limit ensures
 * that the result fits in an int. */
#define LIMIT_BEFORE_EXPANSION 0x5ffffffc

a107 6
	/* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
	if (len > LIMIT_BEFORE_EXPANSION)
		{
		BUFerr(BUF_F_BUF_MEM_GROW,ERR_R_MALLOC_FAILURE);
		return 0;
		}
a144 6
	/* This limit is sufficient to ensure (len+3)/3*4 < 2**31 */
	if (len > LIMIT_BEFORE_EXPANSION)
		{
		BUFerr(BUF_F_BUF_MEM_GROW_CLEAN,ERR_R_MALLOC_FAILURE);
		return 0;
		}
d163 58
@


1.1.1.8
log
@Import OpenSSL 1.0.1g
@
text
@d182 1
a182 1
void BUF_reverse(unsigned char *out, const unsigned char *in, size_t size)
d189 1
a189 1
			*out-- = *in++;
@


