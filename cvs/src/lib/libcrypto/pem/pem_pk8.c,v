head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13;
locks; strict;
comment	@ * @;


1.13
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.12;
commitid	kT0fLt3r4lroFJra;

1.12
date	2016.09.04.16.10.38;	author jsing;	state Exp;
branches;
next	1.11;
commitid	t2vwk4xYuB07Cpdq;

1.11
date	2016.09.04.15.53.03;	author jsing;	state Exp;
branches;
next	1.10;
commitid	DuaZ1v2l8q1Tmk99;

1.10
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.9;
commitid	vHznCDK3idwNEFz4;

1.9
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.8;
commitid	8tb4v3IC8S2vzfHj;

1.8
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.7;
commitid	G74O1dmRukKsW7IJ;

1.7
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.6;
commitid	yQEL1wOWIearrW15;

1.6
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.21.15.39.52;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.42;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.36;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: pem_pk8.c,v 1.12 2016/09/04 16:10:38 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/pkcs12.h>
#include <openssl/x509.h>

static int do_pk8pkey(BIO *bp, EVP_PKEY *x, int isder, int nid,
    const EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cb, void *u);
static int do_pk8pkey_fp(FILE *bp, EVP_PKEY *x, int isder, int nid,
    const EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cb, void *u);

/* These functions write a private key in PKCS#8 format: it is a "drop in"
 * replacement for PEM_write_bio_PrivateKey() and friends. As usual if 'enc'
 * is NULL then it uses the unencrypted private key form. The 'nid' versions
 * uses PKCS#5 v1.5 PBE algorithms whereas the others use PKCS#5 v2.0.
 */

int
PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid, char *kstr,
    int klen, pem_password_cb *cb, void *u)
{
	return do_pk8pkey(bp, x, 0, nid, NULL, kstr, klen, cb, u);
}

int
PEM_write_bio_PKCS8PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
    char *kstr, int klen, pem_password_cb *cb, void *u)
{
	return do_pk8pkey(bp, x, 0, -1, enc, kstr, klen, cb, u);
}

int
i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
    char *kstr, int klen, pem_password_cb *cb, void *u)
{
	return do_pk8pkey(bp, x, 1, -1, enc, kstr, klen, cb, u);
}

int
i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,
    char *kstr, int klen, pem_password_cb *cb, void *u)
{
	return do_pk8pkey(bp, x, 1, nid, NULL, kstr, klen, cb, u);
}

static int
do_pk8pkey(BIO *bp, EVP_PKEY *x, int isder, int nid, const EVP_CIPHER *enc,
    char *kstr, int klen, pem_password_cb *cb, void *u)
{
	X509_SIG *p8;
	PKCS8_PRIV_KEY_INFO *p8inf;
	char buf[PEM_BUFSIZE];
	int ret;

	if (!(p8inf = EVP_PKEY2PKCS8(x))) {
		PEMerror(PEM_R_ERROR_CONVERTING_PRIVATE_KEY);
		return 0;
	}
	if (enc || (nid != -1)) {
		if (!kstr) {
			if (!cb)
				klen = PEM_def_callback(buf, PEM_BUFSIZE, 1, u);
			else
				klen = cb(buf, PEM_BUFSIZE, 1, u);
			if (klen <= 0) {
				PEMerror(PEM_R_READ_KEY);
				PKCS8_PRIV_KEY_INFO_free(p8inf);
				return 0;
			}

			kstr = buf;
		}
		p8 = PKCS8_encrypt(nid, enc, kstr, klen, NULL, 0, 0, p8inf);
		if (kstr == buf)
			explicit_bzero(buf, klen);
		PKCS8_PRIV_KEY_INFO_free(p8inf);
		if (isder)
			ret = i2d_PKCS8_bio(bp, p8);
		else
			ret = PEM_write_bio_PKCS8(bp, p8);
		X509_SIG_free(p8);
		return ret;
	} else {
		if (isder)
			ret = i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf);
		else
			ret = PEM_write_bio_PKCS8_PRIV_KEY_INFO(bp, p8inf);
		PKCS8_PRIV_KEY_INFO_free(p8inf);
		return ret;
	}
}

EVP_PKEY *
d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u)
{
	PKCS8_PRIV_KEY_INFO *p8inf = NULL;
	X509_SIG *p8 = NULL;
	int klen;
	EVP_PKEY *ret;
	char psbuf[PEM_BUFSIZE];

	p8 = d2i_PKCS8_bio(bp, NULL);
	if (!p8)
		return NULL;
	if (cb)
		klen = cb(psbuf, PEM_BUFSIZE, 0, u);
	else
		klen = PEM_def_callback(psbuf, PEM_BUFSIZE, 0, u);
	if (klen <= 0) {
		PEMerror(PEM_R_BAD_PASSWORD_READ);
		X509_SIG_free(p8);
		return NULL;
	}
	p8inf = PKCS8_decrypt(p8, psbuf, klen);
	X509_SIG_free(p8);
	if (!p8inf)
		return NULL;
	ret = EVP_PKCS82PKEY(p8inf);
	PKCS8_PRIV_KEY_INFO_free(p8inf);
	if (!ret)
		return NULL;
	if (x) {
		EVP_PKEY_free(*x);
		*x = ret;
	}
	return ret;
}


int
i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
    char *kstr, int klen, pem_password_cb *cb, void *u)
{
	return do_pk8pkey_fp(fp, x, 1, -1, enc, kstr, klen, cb, u);
}

int
i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid, char *kstr,
    int klen, pem_password_cb *cb, void *u)
{
	return do_pk8pkey_fp(fp, x, 1, nid, NULL, kstr, klen, cb, u);
}

int
PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid, char *kstr,
    int klen, pem_password_cb *cb, void *u)
{
	return do_pk8pkey_fp(fp, x, 0, nid, NULL, kstr, klen, cb, u);
}

int
PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
    char *kstr, int klen, pem_password_cb *cb, void *u)
{
	return do_pk8pkey_fp(fp, x, 0, -1, enc, kstr, klen, cb, u);
}

static int
do_pk8pkey_fp(FILE *fp, EVP_PKEY *x, int isder, int nid, const EVP_CIPHER *enc,
    char *kstr, int klen, pem_password_cb *cb, void *u)
{
	BIO *bp;
	int ret;

	if (!(bp = BIO_new_fp(fp, BIO_NOCLOSE))) {
		PEMerror(ERR_R_BUF_LIB);
		return (0);
	}
	ret = do_pk8pkey(bp, x, isder, nid, enc, kstr, klen, cb, u);
	BIO_free(bp);
	return ret;
}

EVP_PKEY *
d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u)
{
	BIO *bp;
	EVP_PKEY *ret;

	if (!(bp = BIO_new_fp(fp, BIO_NOCLOSE))) {
		PEMerror(ERR_R_BUF_LIB);
		return NULL;
	}
	ret = d2i_PKCS8PrivateKey_bio(bp, x, cb, u);
	BIO_free(bp);
	return ret;
}

X509_SIG *
PEM_read_PKCS8(FILE *fp, X509_SIG **x, pem_password_cb *cb, void *u)
{
	return PEM_ASN1_read((d2i_of_void *)d2i_X509_SIG, PEM_STRING_PKCS8, fp,
	    (void **)x, cb, u);
}

int
PEM_write_PKCS8(FILE *fp, X509_SIG *x)
{
	return PEM_ASN1_write((i2d_of_void *)i2d_X509_SIG, PEM_STRING_PKCS8, fp,
	    x, NULL, NULL, 0, NULL, NULL);
}

X509_SIG *
PEM_read_bio_PKCS8(BIO *bp, X509_SIG **x, pem_password_cb *cb, void *u)
{
	return PEM_ASN1_read_bio((d2i_of_void *)d2i_X509_SIG, PEM_STRING_PKCS8, bp,
	    (void **)x, cb, u);
}

int
PEM_write_bio_PKCS8(BIO *bp, X509_SIG *x)
{
	return PEM_ASN1_write_bio((i2d_of_void *)i2d_X509_SIG, PEM_STRING_PKCS8, bp,
	    x, NULL, NULL, 0, NULL, NULL);
}

PKCS8_PRIV_KEY_INFO *
PEM_read_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u)
{
	return PEM_ASN1_read((d2i_of_void *)d2i_PKCS8_PRIV_KEY_INFO, PEM_STRING_PKCS8INF, fp,
	    (void **)x, cb, u);
}

int
PEM_write_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO *x)
{
	return PEM_ASN1_write((i2d_of_void *)i2d_PKCS8_PRIV_KEY_INFO, PEM_STRING_PKCS8INF, fp,
	    x, NULL, NULL, 0, NULL, NULL);
}

PKCS8_PRIV_KEY_INFO *
PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u)
{
	return PEM_ASN1_read_bio((d2i_of_void *)d2i_PKCS8_PRIV_KEY_INFO, PEM_STRING_PKCS8INF, bp,
	    (void **)x, cb, u);
}

int
PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO *x)
{
	return PEM_ASN1_write_bio((i2d_of_void *)i2d_PKCS8_PRIV_KEY_INFO, PEM_STRING_PKCS8INF, bp,
	    x, NULL, NULL, 0, NULL, NULL);
}
@


1.12
log
@Sort and group functions.
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pk8.c,v 1.11 2016/09/04 15:53:03 jsing Exp $ */
d119 1
a119 2
		PEMerr(PEM_F_DO_PK8PKEY,
		    PEM_R_ERROR_CONVERTING_PRIVATE_KEY);
d129 1
a129 1
				PEMerr(PEM_F_DO_PK8PKEY, PEM_R_READ_KEY);
d173 1
a173 1
		PEMerr(PEM_F_D2I_PKCS8PRIVATEKEY_BIO, PEM_R_BAD_PASSWORD_READ);
d229 1
a229 1
		PEMerr(PEM_F_DO_PK8PKEY_FP, ERR_R_BUF_LIB);
d244 1
a244 1
		PEMerr(PEM_F_D2I_PKCS8PRIVATEKEY_FP, ERR_R_BUF_LIB);
@


1.11
log
@Expand IMPLEMENT_PEM macros.

No change in generated assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pk8.c,v 1.10 2015/09/10 15:56:25 jsing Exp $ */
a252 2


d254 1
a254 1
PEM_read_bio_PKCS8(BIO *bp, X509_SIG **x, pem_password_cb *cb, void *u)
d256 1
a256 1
	return PEM_ASN1_read_bio((d2i_of_void *)d2i_X509_SIG, PEM_STRING_PKCS8, bp,
d260 7
d268 1
a268 1
PEM_read_PKCS8(FILE *fp, X509_SIG **x, pem_password_cb *cb, void *u)
d270 1
a270 1
	return PEM_ASN1_read((d2i_of_void *)d2i_X509_SIG, PEM_STRING_PKCS8, fp,
d281 7
d289 1
a289 1
PEM_write_PKCS8(FILE *fp, X509_SIG *x)
d291 1
a291 1
	return PEM_ASN1_write((i2d_of_void *)i2d_X509_SIG, PEM_STRING_PKCS8, fp,
a301 7
PKCS8_PRIV_KEY_INFO *
PEM_read_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u)
{
	return PEM_ASN1_read((d2i_of_void *)d2i_PKCS8_PRIV_KEY_INFO, PEM_STRING_PKCS8INF, fp,
	    (void **)x, cb, u);
}

a305 7
	    x, NULL, NULL, 0, NULL, NULL);
}

int
PEM_write_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO *x)
{
	return PEM_ASN1_write((i2d_of_void *)i2d_PKCS8_PRIV_KEY_INFO, PEM_STRING_PKCS8INF, fp,
@


1.10
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pk8.c,v 1.9 2014/10/18 17:20:40 jsing Exp $ */
d254 56
a309 3
IMPLEMENT_PEM_rw(PKCS8, X509_SIG, PEM_STRING_PKCS8, X509_SIG)
IMPLEMENT_PEM_rw(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO, PEM_STRING_PKCS8INF,
    PKCS8_PRIV_KEY_INFO)
@


1.9
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pk8.c,v 1.8 2014/07/12 16:03:37 miod Exp $ */
d60 1
d139 1
a139 1
			OPENSSL_cleanse(buf, klen);
@


1.8
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pk8.c,v 1.7 2014/07/11 08:44:49 jsing Exp $ */
a66 1
#include <openssl/rand.h>
@


1.7
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pk8.c,v 1.6 2014/06/12 15:49:30 deraadt Exp $ */
d187 1
a187 2
		if (*x)
			EVP_PKEY_free(*x);
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
d62 2
d65 2
a66 1
#include <openssl/evp.h>
a68 2
#include <openssl/pkcs12.h>
#include <openssl/pem.h>
@


1.5
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* crypto/pem/pem_pkey.c */
@


1.4
log
@KNF.
@
text
@a192 1
#ifndef OPENSSL_NO_FP_API
a252 1
#endif
@


1.3
log
@resolve conflicts
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d69 4
a72 8
static int do_pk8pkey(BIO *bp, EVP_PKEY *x, int isder,
				int nid, const EVP_CIPHER *enc,
				char *kstr, int klen,
				pem_password_cb *cb, void *u);
static int do_pk8pkey_fp(FILE *bp, EVP_PKEY *x, int isder,
				int nid, const EVP_CIPHER *enc,
				char *kstr, int klen,
				pem_password_cb *cb, void *u);
d80 3
a82 3
int PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d87 3
a89 3
int PEM_write_bio_PKCS8PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d94 3
a96 3
int i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d101 3
a103 3
int i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d108 3
a110 3
static int do_pk8pkey(BIO *bp, EVP_PKEY *x, int isder, int nid, const EVP_CIPHER *enc,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d116 2
a117 1
	if(!(p8inf = EVP_PKEY2PKCS8(x))) {
d119 1
a119 1
					PEM_R_ERROR_CONVERTING_PRIVATE_KEY);
d122 8
a129 6
	if(enc || (nid != -1)) {
		if(!kstr) {
			if(!cb) klen = PEM_def_callback(buf, PEM_BUFSIZE, 1, u);
			else klen = cb(buf, PEM_BUFSIZE, 1, u);
			if(klen <= 0) {
				PEMerr(PEM_F_DO_PK8PKEY,PEM_R_READ_KEY);
d133 1
a133 1
				
d137 2
a138 1
		if(kstr == buf) OPENSSL_cleanse(buf, klen);
d140 4
a143 2
		if(isder) ret = i2d_PKCS8_bio(bp, p8);
		else ret = PEM_write_bio_PKCS8(bp, p8);
d147 4
a150 2
		if(isder) ret = i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf);
		else ret = PEM_write_bio_PKCS8_PRIV_KEY_INFO(bp, p8inf);
d156 2
a157 1
EVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u)
d164 1
d166 6
a171 3
	if(!p8) return NULL;
	if (cb) klen=cb(psbuf,PEM_BUFSIZE,0,u);
	else klen=PEM_def_callback(psbuf,PEM_BUFSIZE,0,u);
d175 1
a175 1
		return NULL;	
d179 2
a180 1
	if(!p8inf) return NULL;
d183 5
a187 3
	if(!ret) return NULL;
	if(x) {
		if(*x) EVP_PKEY_free(*x);
d195 3
a197 3
int i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d202 3
a204 3
int i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d209 3
a211 3
int PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d216 3
a218 2
int PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
			      char *kstr, int klen, pem_password_cb *cb, void *u)
d223 3
a225 3
static int do_pk8pkey_fp(FILE *fp, EVP_PKEY *x, int isder, int nid, const EVP_CIPHER *enc,
				  char *kstr, int klen,
				  pem_password_cb *cb, void *u)
d229 4
a232 3
	if(!(bp = BIO_new_fp(fp, BIO_NOCLOSE))) {
		PEMerr(PEM_F_DO_PK8PKEY_FP,ERR_R_BUF_LIB);
                return(0);
d239 2
a240 1
EVP_PKEY *d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u)
d244 4
a247 3
	if(!(bp = BIO_new_fp(fp, BIO_NOCLOSE))) {
		PEMerr(PEM_F_D2I_PKCS8PRIVATEKEY_FP,ERR_R_BUF_LIB);
                return NULL;
d258 1
a258 1
							 PKCS8_PRIV_KEY_INFO)
@


1.2
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d121 1
a121 1
		PEMerr(PEM_F_PEM_WRITE_BIO_PKCS8PRIVATEKEY,
d130 1
a130 2
				PEMerr(PEM_F_PEM_WRITE_BIO_PKCS8PRIVATEKEY,
								PEM_R_READ_KEY);
d217 1
a217 1
		PEMerr(PEM_F_PEM_F_DO_PK8KEY_FP,ERR_R_BUF_LIB);
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d139 1
a139 1
		if(kstr == buf) memset(buf, 0, klen);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d139 1
a139 1
		if(kstr == buf) OPENSSL_cleanse(buf, klen);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d121 1
a121 1
		PEMerr(PEM_F_DO_PK8PKEY,
d130 2
a131 1
				PEMerr(PEM_F_DO_PK8PKEY,PEM_R_READ_KEY);
d218 1
a218 1
		PEMerr(PEM_F_DO_PK8PKEY_FP,ERR_R_BUF_LIB);
@


