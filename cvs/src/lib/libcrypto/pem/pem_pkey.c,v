head	1.23;
access;
symbols
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22;
locks; strict;
comment	@ * @;


1.23
date	2017.05.02.03.59.44;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	Dm63V7JYy6WzetfM;

1.22
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.20;
commitid	vHznCDK3idwNEFz4;

1.20
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.19;
commitid	5KSZBoxiLebzObKt;

1.19
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.18;
commitid	8tb4v3IC8S2vzfHj;

1.18
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.17;
commitid	G74O1dmRukKsW7IJ;

1.17
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.15;
commitid	nzndm3zqPmFurSaK;

1.15
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.14;
commitid	id8dTrTMtnTn4fqt;

1.14
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.21.15.44.13;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.21.15.39.52;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.20.19.52.41;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.29.05.39.24;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.08.08.03.14;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.42;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.40.23;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.47;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.13;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	;


desc
@@


1.23
log
@use freezero() instead of memset/explicit_bzero + free.  Substantially
reduces conditional logic (-218, +82).

MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH cache alignment calculation bn/bn_exp.c
wasn'tt quite right.  Two other tricky bits with ASN1_STRING_FLAG_NDEF and
BN_FLG_STATIC_DATA where the condition cannot be collapsed completely.

Passes regress.  ok beck
@
text
@/* $OpenBSD: pem_pkey.c,v 1.22 2017/01/29 17:49:23 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/pkcs12.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

#include "asn1_locl.h"

int pem_check_suffix(const char *pem_str, const char *suffix);

EVP_PKEY *
PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u)
{
	char *nm = NULL;
	const unsigned char *p = NULL;
	unsigned char *data = NULL;
	long len;
	int slen;
	EVP_PKEY *ret = NULL;

	if (!PEM_bytes_read_bio(&data, &len, &nm, PEM_STRING_EVP_PKEY,
	    bp, cb, u))
		return NULL;
	p = data;

	if (strcmp(nm, PEM_STRING_PKCS8INF) == 0) {
		PKCS8_PRIV_KEY_INFO *p8inf;
		p8inf = d2i_PKCS8_PRIV_KEY_INFO(NULL, &p, len);
		if (!p8inf)
			goto p8err;
		ret = EVP_PKCS82PKEY(p8inf);
		if (x) {
			EVP_PKEY_free(*x);
			*x = ret;
		}
		PKCS8_PRIV_KEY_INFO_free(p8inf);
	} else if (strcmp(nm, PEM_STRING_PKCS8) == 0) {
		PKCS8_PRIV_KEY_INFO *p8inf;
		X509_SIG *p8;
		int klen;
		char psbuf[PEM_BUFSIZE];
		p8 = d2i_X509_SIG(NULL, &p, len);
		if (!p8)
			goto p8err;
		if (cb)
			klen = cb(psbuf, PEM_BUFSIZE, 0, u);
		else
			klen = PEM_def_callback(psbuf, PEM_BUFSIZE, 0, u);
		if (klen <= 0) {
			PEMerror(PEM_R_BAD_PASSWORD_READ);
			X509_SIG_free(p8);
			goto err;
		}
		p8inf = PKCS8_decrypt(p8, psbuf, klen);
		X509_SIG_free(p8);
		if (!p8inf)
			goto p8err;
		ret = EVP_PKCS82PKEY(p8inf);
		if (x) {
			EVP_PKEY_free(*x);
			*x = ret;
		}
		PKCS8_PRIV_KEY_INFO_free(p8inf);
	} else if ((slen = pem_check_suffix(nm, "PRIVATE KEY")) > 0) {
		const EVP_PKEY_ASN1_METHOD *ameth;
		ameth = EVP_PKEY_asn1_find_str(NULL, nm, slen);
		if (!ameth || !ameth->old_priv_decode)
			goto p8err;
		ret = d2i_PrivateKey(ameth->pkey_id, x, &p, len);
	}

p8err:
	if (ret == NULL)
		PEMerror(ERR_R_ASN1_LIB);
err:
	free(nm);
	freezero(data, len);
	return (ret);
}

int
PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
    unsigned char *kstr, int klen, pem_password_cb *cb, void *u)
{
	char pem_str[80];

	if (!x->ameth || x->ameth->priv_encode)
		return PEM_write_bio_PKCS8PrivateKey(bp, x, enc,
		    (char *)kstr, klen, cb, u);

	(void) snprintf(pem_str, sizeof(pem_str), "%s PRIVATE KEY",
	    x->ameth->pem_str);
	return PEM_ASN1_write_bio((i2d_of_void *)i2d_PrivateKey,
	    pem_str, bp, x, enc, kstr, klen, cb, u);
}

EVP_PKEY *
PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x)
{
	char *nm = NULL;
	const unsigned char *p = NULL;
	unsigned char *data = NULL;
	long len;
	int slen;
	EVP_PKEY *ret = NULL;

	if (!PEM_bytes_read_bio(&data, &len, &nm, PEM_STRING_PARAMETERS,
	    bp, 0, NULL))
		return NULL;
	p = data;

	if ((slen = pem_check_suffix(nm, "PARAMETERS")) > 0) {
		ret = EVP_PKEY_new();
		if (!ret)
			goto err;
		if (!EVP_PKEY_set_type_str(ret, nm, slen) ||
		    !ret->ameth->param_decode ||
		    !ret->ameth->param_decode(ret, &p, len)) {
			EVP_PKEY_free(ret);
			ret = NULL;
			goto err;
		}
		if (x) {
			EVP_PKEY_free(*x);
			*x = ret;
		}
	}

err:
	if (ret == NULL)
		PEMerror(ERR_R_ASN1_LIB);
	free(nm);
	free(data);
	return (ret);
}

int
PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x)
{
	char pem_str[80];

	if (!x->ameth || !x->ameth->param_encode)
		return 0;

	(void) snprintf(pem_str, sizeof(pem_str), "%s PARAMETERS",
	    x->ameth->pem_str);
	return PEM_ASN1_write_bio((i2d_of_void *)x->ameth->param_encode,
	    pem_str, bp, x, NULL, NULL, 0, 0, NULL);
}

EVP_PKEY *
PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u)
{
	BIO *b;
	EVP_PKEY *ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		PEMerror(ERR_R_BUF_LIB);
		return (0);
	}
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = PEM_read_bio_PrivateKey(b, x, cb, u);
	BIO_free(b);
	return (ret);
}

int
PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
    unsigned char *kstr, int klen, pem_password_cb *cb, void *u)
{
	BIO *b;
	int ret;

	if ((b = BIO_new_fp(fp, BIO_NOCLOSE)) == NULL) {
		PEMerror(ERR_R_BUF_LIB);
		return 0;
	}
	ret = PEM_write_bio_PrivateKey(b, x, enc, kstr, klen, cb, u);
	BIO_free(b);
	return ret;
}

@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pkey.c,v 1.21 2015/09/10 15:56:25 jsing Exp $ */
d146 1
a146 2
	explicit_bzero(data, len);
	free(data);
@


1.21
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pkey.c,v 1.20 2015/02/11 03:19:37 doug Exp $ */
d119 1
a119 2
			PEMerr(PEM_F_PEM_READ_BIO_PRIVATEKEY,
			    PEM_R_BAD_PASSWORD_READ);
d143 1
a143 1
		PEMerr(PEM_F_PEM_READ_BIO_PRIVATEKEY, ERR_R_ASN1_LIB);
d201 1
a201 1
		PEMerr(PEM_F_PEM_READ_BIO_PARAMETERS, ERR_R_ASN1_LIB);
d228 1
a228 1
		PEMerr(PEM_F_PEM_READ_PRIVATEKEY, ERR_R_BUF_LIB);
d245 1
a245 1
		PEMerr(PEM_F_PEM_WRITE_PRIVATEKEY, ERR_R_BUF_LIB);
@


1.20
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pkey.c,v 1.19 2014/10/18 17:20:40 jsing Exp $ */
d147 1
a147 1
	OPENSSL_cleanse(data, len);
@


1.19
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pkey.c,v 1.18 2014/07/12 16:03:37 miod Exp $ */
d65 1
@


1.18
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pkey.c,v 1.17 2014/07/11 08:44:49 jsing Exp $ */
a68 1
#include <openssl/rand.h>
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pkey.c,v 1.16 2014/07/10 22:45:57 jsing Exp $ */
d102 1
a102 2
			if (*x)
				EVP_PKEY_free((EVP_PKEY *)*x);
d130 1
a130 2
			if (*x)
				EVP_PKEY_free((EVP_PKEY *)*x);
d195 1
a195 2
			if (*x)
				EVP_PKEY_free((EVP_PKEY *)*x);
@


1.16
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pkey.c,v 1.15 2014/07/10 13:58:23 jsing Exp $ */
a63 1
#include "cryptlib.h"
d65 1
d67 2
a68 1
#include <openssl/evp.h>
d71 1
a71 2
#include <openssl/pkcs12.h>
#include <openssl/pem.h>
d75 1
@


1.15
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_pkey.c,v 1.14 2014/06/12 15:49:30 deraadt Exp $ */
d61 2
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.13
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* crypto/pem/pem_pkey.c */
@


1.12
log
@More KNF.
@
text
@a219 1
#ifndef OPENSSL_NO_FP_API
a251 1
#endif
@


1.11
log
@KNF.
@
text
@d136 1
a136 1
		ret = d2i_PrivateKey(ameth->pkey_id, x,&p, len);
d162 1
a162 1
	    pem_str, bp, x,enc, kstr, klen, cb, u);
d217 1
a217 1
	    pem_str, bp, x,NULL, NULL, 0,0, NULL);
d232 1
a232 1
	ret = PEM_read_bio_PrivateKey(b, x,cb, u);
@


1.10
log
@Restore beck's rev 1.7: snprintf() was reviewed.
Also, use sizeof() for snprintf()'s size argument
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d75 6
a80 5
EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u)
	{
	char *nm=NULL;
	const unsigned char *p=NULL;
	unsigned char *data=NULL;
d83 1
a83 1
	EVP_PKEY *ret=NULL;
d85 2
a86 1
	if (!PEM_bytes_read_bio(&data, &len, &nm, PEM_STRING_EVP_PKEY, bp, cb, u))
d90 1
a90 1
	if (strcmp(nm,PEM_STRING_PKCS8INF) == 0) {
d92 3
a94 2
		p8inf=d2i_PKCS8_PRIV_KEY_INFO(NULL, &p, len);
		if(!p8inf) goto p8err;
d96 3
a98 2
		if(x) {
			if(*x) EVP_PKEY_free((EVP_PKEY *)*x);
d102 1
a102 1
	} else if (strcmp(nm,PEM_STRING_PKCS8) == 0) {
d108 6
a113 3
		if(!p8) goto p8err;
		if (cb) klen=cb(psbuf,PEM_BUFSIZE,0,u);
		else klen=PEM_def_callback(psbuf,PEM_BUFSIZE,0,u);
d116 1
a116 1
					PEM_R_BAD_PASSWORD_READ);
d122 2
a123 1
		if(!p8inf) goto p8err;
d125 3
a127 2
		if(x) {
			if(*x) EVP_PKEY_free((EVP_PKEY *)*x);
d131 1
a131 2
	} else if ((slen = pem_check_suffix(nm, "PRIVATE KEY")) > 0)
		{
d136 3
a138 2
		ret=d2i_PrivateKey(ameth->pkey_id,x,&p,len);
		}
d141 1
a141 1
		PEMerr(PEM_F_PEM_READ_BIO_PRIVATEKEY,ERR_R_ASN1_LIB);
d146 2
a147 2
	return(ret);
	}
d149 4
a152 4
int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                               unsigned char *kstr, int klen,
                                               pem_password_cb *cb, void *u)
	{
d154 1
d157 1
a157 2
							(char *)kstr, klen,
							cb, u);
d162 2
a163 2
				pem_str,bp,x,enc,kstr,klen,cb,u);
	}
d165 6
a170 5
EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x)
	{
	char *nm=NULL;
	const unsigned char *p=NULL;
	unsigned char *data=NULL;
d173 1
a173 1
	EVP_PKEY *ret=NULL;
d176 1
a176 1
								bp, 0, NULL))
d180 1
a180 2
	if ((slen = pem_check_suffix(nm, "PARAMETERS")) > 0)
		{
d184 3
a186 4
		if (!EVP_PKEY_set_type_str(ret, nm, slen)
			|| !ret->ameth->param_decode
			|| !ret->ameth->param_decode(ret, &p, len))
			{
d190 4
a193 4
			}
		if(x)
			{
			if(*x) EVP_PKEY_free((EVP_PKEY *)*x);
a194 1
			}
d196 2
d200 1
a200 1
		PEMerr(PEM_F_PEM_READ_BIO_PARAMETERS,ERR_R_ASN1_LIB);
d203 2
a204 2
	return(ret);
	}
d206 3
a208 2
int PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x)
	{
d210 1
d216 3
a218 4
	return PEM_ASN1_write_bio(
		(i2d_of_void *)x->ameth->param_encode,
				pem_str,bp,x,NULL,NULL,0,0,NULL);
	}
d221 22
a242 15
EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u)
	{
        BIO *b;
        EVP_PKEY *ret;

        if ((b=BIO_new(BIO_s_file())) == NULL)
		{
		PEMerr(PEM_F_PEM_READ_PRIVATEKEY,ERR_R_BUF_LIB);
                return(0);
		}
        BIO_set_fp(b,fp,BIO_NOCLOSE);
        ret=PEM_read_bio_PrivateKey(b,x,cb,u);
        BIO_free(b);
        return(ret);
	}
d244 3
a246 15
int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                               unsigned char *kstr, int klen,
                                               pem_password_cb *cb, void *u)
	{
        BIO *b;
        int ret;

        if ((b=BIO_new_fp(fp, BIO_NOCLOSE)) == NULL)
		{
		PEMerr(PEM_F_PEM_WRITE_PRIVATEKEY,ERR_R_BUF_LIB);
                return 0;
		}
        ret=PEM_write_bio_PrivateKey(b, x, enc, kstr, klen, cb, u);
        BIO_free(b);
        return ret;
d248 4
@


1.9
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d150 2
a151 1
	snprintf(pem_str, 80, "%s PRIVATE KEY", x->ameth->pem_str);
d203 2
a204 1
	snprintf(pem_str, 80, "%s PARAMETERS", x->ameth->pem_str);
@


1.8
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d150 1
a150 1
	(void) snprintf(pem_str, 80, "%s PRIVATE KEY", x->ameth->pem_str);
d202 1
a202 1
	(void) snprintf(pem_str, 80, "%s PARAMETERS", x->ameth->pem_str);
@


1.7
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d134 1
a134 1
	OPENSSL_free(nm);
d136 1
a136 1
	OPENSSL_free(data);
d191 2
a192 2
	OPENSSL_free(nm);
	OPENSSL_free(data);
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d150 1
a150 1
	BIO_snprintf(pem_str, 80, "%s PRIVATE KEY", x->ameth->pem_str);
d202 1
a202 1
	BIO_snprintf(pem_str, 80, "%s PARAMETERS", x->ameth->pem_str);
@


1.5
log
@resolve conflicts
@
text
@d68 4
d73 1
d81 1
d88 1
a88 7
	if (strcmp(nm,PEM_STRING_RSA) == 0)
		ret=d2i_PrivateKey(EVP_PKEY_RSA,x,&p,len);
	else if (strcmp(nm,PEM_STRING_DSA) == 0)
		ret=d2i_PrivateKey(EVP_PKEY_DSA,x,&p,len);
	else if (strcmp(nm,PEM_STRING_ECPRIVATEKEY) == 0)
		ret=d2i_PrivateKey(EVP_PKEY_EC,x,&p,len);
	else if (strcmp(nm,PEM_STRING_PKCS8INF) == 0) {
d122 8
a129 1
	}
d140 68
d224 18
@


1.4
log
@resolve conflicts
@
text
@d73 2
a74 1
	unsigned char *p=NULL,*data=NULL;
d86 2
d108 1
a108 1
			PEMerr(PEM_F_PEM_ASN1_READ_BIO,
d125 1
a125 1
		PEMerr(PEM_F_PEM_ASN1_READ_BIO,ERR_R_ASN1_LIB);
d128 1
d141 1
a141 1
		PEMerr(PEM_F_PEM_ASN1_READ,ERR_R_BUF_LIB);
@


1.3
log
@merge 0.9.7d
@
text
@d107 1
@


1.2
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d90 4
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d88 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@a87 1
		if(!p8inf) goto p8err;
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@a89 4
		if(x) {
			if(*x) EVP_PKEY_free((EVP_PKEY *)*x);
			*x = ret;
		}
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a106 1
			X509_SIG_free(p8);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d73 1
a73 2
	const unsigned char *p=NULL;
	unsigned char *data=NULL;
a84 2
	else if (strcmp(nm,PEM_STRING_ECPRIVATEKEY) == 0)
		ret=d2i_PrivateKey(EVP_PKEY_EC,x,&p,len);
d105 1
a105 1
			PEMerr(PEM_F_PEM_READ_BIO_PRIVATEKEY,
d122 1
a122 1
		PEMerr(PEM_F_PEM_READ_BIO_PRIVATEKEY,ERR_R_ASN1_LIB);
a124 1
	OPENSSL_cleanse(data, len);
d137 1
a137 1
		PEMerr(PEM_F_PEM_READ_PRIVATEKEY,ERR_R_BUF_LIB);
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a67 4
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif
#include "asn1_locl.h"
a68 1
int pem_check_suffix(const char *pem_str, const char *suffix);
a75 1
	int slen;
d82 7
a88 1
	if (strcmp(nm,PEM_STRING_PKCS8INF) == 0) {
d122 1
a122 8
	} else if ((slen = pem_check_suffix(nm, "PRIVATE KEY")) > 0)
		{
		const EVP_PKEY_ASN1_METHOD *ameth;
		ameth = EVP_PKEY_asn1_find_str(NULL, nm, slen);
		if (!ameth || !ameth->old_priv_decode)
			goto p8err;
		ret=d2i_PrivateKey(ameth->pkey_id,x,&p,len);
		}
a132 68
int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                               unsigned char *kstr, int klen,
                                               pem_password_cb *cb, void *u)
	{
	char pem_str[80];
	if (!x->ameth || x->ameth->priv_encode)
		return PEM_write_bio_PKCS8PrivateKey(bp, x, enc,
							(char *)kstr, klen,
							cb, u);

	BIO_snprintf(pem_str, 80, "%s PRIVATE KEY", x->ameth->pem_str);
	return PEM_ASN1_write_bio((i2d_of_void *)i2d_PrivateKey,
				pem_str,bp,x,enc,kstr,klen,cb,u);
	}

EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x)
	{
	char *nm=NULL;
	const unsigned char *p=NULL;
	unsigned char *data=NULL;
	long len;
	int slen;
	EVP_PKEY *ret=NULL;

	if (!PEM_bytes_read_bio(&data, &len, &nm, PEM_STRING_PARAMETERS,
								bp, 0, NULL))
		return NULL;
	p = data;

	if ((slen = pem_check_suffix(nm, "PARAMETERS")) > 0)
		{
		ret = EVP_PKEY_new();
		if (!ret)
			goto err;
		if (!EVP_PKEY_set_type_str(ret, nm, slen)
			|| !ret->ameth->param_decode
			|| !ret->ameth->param_decode(ret, &p, len))
			{
			EVP_PKEY_free(ret);
			ret = NULL;
			goto err;
			}
		if(x)
			{
			if(*x) EVP_PKEY_free((EVP_PKEY *)*x);
			*x = ret;
			}
		}
err:
	if (ret == NULL)
		PEMerr(PEM_F_PEM_READ_BIO_PARAMETERS,ERR_R_ASN1_LIB);
	OPENSSL_free(nm);
	OPENSSL_free(data);
	return(ret);
	}

int PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x)
	{
	char pem_str[80];
	if (!x->ameth || !x->ameth->param_encode)
		return 0;

	BIO_snprintf(pem_str, 80, "%s PARAMETERS", x->ameth->pem_str);
	return PEM_ASN1_write_bio(
		(i2d_of_void *)x->ameth->param_encode,
				pem_str,bp,x,NULL,NULL,0,0,NULL);
	}

a148 18

int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                               unsigned char *kstr, int klen,
                                               pem_password_cb *cb, void *u)
	{
        BIO *b;
        int ret;

        if ((b=BIO_new_fp(fp, BIO_NOCLOSE)) == NULL)
		{
		PEMerr(PEM_F_PEM_WRITE_PRIVATEKEY,ERR_R_BUF_LIB);
                return 0;
		}
        ret=PEM_write_bio_PrivateKey(b, x, enc, kstr, klen, cb, u);
        BIO_free(b);
        return ret;
	}

@


