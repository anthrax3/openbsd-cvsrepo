head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.6
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22;
locks; strict;
comment	@ * @;


1.22
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.20;
commitid	vHznCDK3idwNEFz4;

1.20
date	2015.02.10.09.52.35;	author miod;	state Exp;
branches;
next	1.19;
commitid	elQcISUWkrkujoI4;

1.19
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.18;
commitid	yQEL1wOWIearrW15;

1.18
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.17;
commitid	nzndm3zqPmFurSaK;

1.17
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.16;
commitid	id8dTrTMtnTn4fqt;

1.16
date	2014.07.10.11.20.49;	author miod;	state Exp;
branches;
next	1.15;
commitid	iqF3bGJOsrTBE3vL;

1.15
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.21.15.39.52;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.38;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.13;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.57;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.53;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.28;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.53;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.53;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.42;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.36;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: pem_info.c,v 1.21 2015/09/10 15:56:25 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif

STACK_OF(X509_INFO) *
PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk, pem_password_cb *cb,
    void *u)
{
	BIO *b;
	STACK_OF(X509_INFO) *ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		PEMerror(ERR_R_BUF_LIB);
		return (0);
	}
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = PEM_X509_INFO_read_bio(b, sk, cb, u);
	BIO_free(b);
	return (ret);
}

STACK_OF(X509_INFO) *
PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk, pem_password_cb *cb,
    void *u)
{
	X509_INFO *xi = NULL;
	char *name = NULL, *header = NULL;
	void *pp;
	unsigned char *data = NULL;
	const unsigned char *p;
	long len, error = 0;
	int ok = 0;
	STACK_OF(X509_INFO) *ret = NULL;
	unsigned int i, raw, ptype;
	d2i_of_void *d2i = 0;

	if (sk == NULL) {
		if ((ret = sk_X509_INFO_new_null()) == NULL) {
			PEMerror(ERR_R_MALLOC_FAILURE);
			return 0;
		}
	} else
		ret = sk;

	if ((xi = X509_INFO_new()) == NULL)
		goto err;
	for (;;) {
		raw = 0;
		ptype = 0;
		i = PEM_read_bio(bp, &name, &header, &data, &len);
		if (i == 0) {
			error = ERR_GET_REASON(ERR_peek_last_error());
			if (error == PEM_R_NO_START_LINE) {
				ERR_clear_error();
				break;
			}
			goto err;
		}
start:
		if ((strcmp(name, PEM_STRING_X509) == 0) ||
		    (strcmp(name, PEM_STRING_X509_OLD) == 0)) {
			d2i = (D2I_OF(void))d2i_X509;
			if (xi->x509 != NULL) {
				if (!sk_X509_INFO_push(ret, xi))
					goto err;
				if ((xi = X509_INFO_new()) == NULL)
					goto err;
				goto start;
			}
			pp = &(xi->x509);
		} else if ((strcmp(name, PEM_STRING_X509_TRUSTED) == 0)) {
			d2i = (D2I_OF(void))d2i_X509_AUX;
			if (xi->x509 != NULL) {
				if (!sk_X509_INFO_push(ret, xi))
					goto err;
				if ((xi = X509_INFO_new()) == NULL)
					goto err;
				goto start;
			}
			pp = &(xi->x509);
		} else if (strcmp(name, PEM_STRING_X509_CRL) == 0) {
			d2i = (D2I_OF(void))d2i_X509_CRL;
			if (xi->crl != NULL) {
				if (!sk_X509_INFO_push(ret, xi))
					goto err;
				if ((xi = X509_INFO_new()) == NULL)
					goto err;
				goto start;
			}
			pp = &(xi->crl);
		} else
#ifndef OPENSSL_NO_RSA
		if (strcmp(name, PEM_STRING_RSA) == 0) {
			d2i = (D2I_OF(void))d2i_RSAPrivateKey;
			if (xi->x_pkey != NULL) {
				if (!sk_X509_INFO_push(ret, xi))
					goto err;
				if ((xi = X509_INFO_new()) == NULL)
					goto err;
				goto start;
			}

			xi->enc_data = NULL;
			xi->enc_len = 0;

			xi->x_pkey = X509_PKEY_new();
			if (xi->x_pkey == NULL)
				goto err;
			ptype = EVP_PKEY_RSA;
			pp = &xi->x_pkey->dec_pkey;
			if (strlen(header) > 10) /* assume encrypted */
				raw = 1;
		} else
#endif
#ifndef OPENSSL_NO_DSA
		if (strcmp(name, PEM_STRING_DSA) == 0) {
			d2i = (D2I_OF(void))d2i_DSAPrivateKey;
			if (xi->x_pkey != NULL) {
				if (!sk_X509_INFO_push(ret, xi))
					goto err;
				if ((xi = X509_INFO_new()) == NULL)
					goto err;
				goto start;
			}

			xi->enc_data = NULL;
			xi->enc_len = 0;

			xi->x_pkey = X509_PKEY_new();
			if (xi->x_pkey == NULL)
				goto err;
			ptype = EVP_PKEY_DSA;
			pp = &xi->x_pkey->dec_pkey;
			if (strlen(header) > 10) /* assume encrypted */
				raw = 1;
		} else
#endif
#ifndef OPENSSL_NO_EC
		if (strcmp(name, PEM_STRING_ECPRIVATEKEY) == 0) {
			d2i = (D2I_OF(void))d2i_ECPrivateKey;
			if (xi->x_pkey != NULL) {
				if (!sk_X509_INFO_push(ret, xi))
					goto err;
				if ((xi = X509_INFO_new()) == NULL)
					goto err;
				goto start;
			}

			xi->enc_data = NULL;
			xi->enc_len = 0;

			xi->x_pkey = X509_PKEY_new();
			if (xi->x_pkey == NULL)
				goto err;
			ptype = EVP_PKEY_EC;
			pp = &xi->x_pkey->dec_pkey;
			if (strlen(header) > 10) /* assume encrypted */
				raw = 1;
		} else
#endif
		{
			d2i = NULL;
			pp = NULL;
		}

		if (d2i != NULL) {
			if (!raw) {
				EVP_CIPHER_INFO cipher;

				if (!PEM_get_EVP_CIPHER_INFO(header, &cipher))
					goto err;
				if (!PEM_do_header(&cipher, data, &len, cb, u))
					goto err;
				p = data;
				if (ptype) {
					if (!d2i_PrivateKey(ptype, pp, &p,
					    len)) {
						PEMerror(ERR_R_ASN1_LIB);
						goto err;
					}
				} else if (d2i(pp, &p, len) == NULL) {
					PEMerror(ERR_R_ASN1_LIB);
					goto err;
				}
			} else { /* encrypted RSA data */
				if (!PEM_get_EVP_CIPHER_INFO(header,
				    &xi->enc_cipher))
					goto err;
				xi->enc_data = (char *)data;
				xi->enc_len = (int)len;
				data = NULL;
			}
		} else {
			/* unknown */
		}
		free(name);
		free(header);
		free(data);
		name = NULL;
		header = NULL;
		data = NULL;
	}

	/* if the last one hasn't been pushed yet and there is anything
	 * in it then add it to the stack ...
	 */
	if ((xi->x509 != NULL) || (xi->crl != NULL) ||
	    (xi->x_pkey != NULL) || (xi->enc_data != NULL)) {
		if (!sk_X509_INFO_push(ret, xi))
			goto err;
		xi = NULL;
	}
	ok = 1;

err:
	if (xi != NULL)
		X509_INFO_free(xi);
	if (!ok) {
		for (i = 0; ((int)i) < sk_X509_INFO_num(ret); i++) {
			xi = sk_X509_INFO_value(ret, i);
			X509_INFO_free(xi);
		}
		if (ret != sk)
			sk_X509_INFO_free(ret);
		ret = NULL;
	}

	free(name);
	free(header);
	free(data);
	return (ret);
}


/* A TJH addition */
int
PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,
    unsigned char *kstr, int klen, pem_password_cb *cb, void *u)
{
	EVP_CIPHER_CTX ctx;
	int i, ret = 0;
	unsigned char *data = NULL;
	const char *objstr = NULL;
	char buf[PEM_BUFSIZE];
	unsigned char *iv = NULL;

	if (enc != NULL) {
		objstr = OBJ_nid2sn(EVP_CIPHER_nid(enc));
		if (objstr == NULL) {
			PEMerror(PEM_R_UNSUPPORTED_CIPHER);
			goto err;
		}
	}

	/* now for the fun part ... if we have a private key then
	 * we have to be able to handle a not-yet-decrypted key
	 * being written out correctly ... if it is decrypted or
	 * it is non-encrypted then we use the base code
	 */
	if (xi->x_pkey != NULL) {
		if ((xi->enc_data != NULL) && (xi->enc_len > 0) ) {
			if (enc == NULL) {
				PEMerror(PEM_R_CIPHER_IS_NULL);
				goto err;
			}

			/* copy from weirdo names into more normal things */
			iv = xi->enc_cipher.iv;
			data = (unsigned char *)xi->enc_data;
			i = xi->enc_len;

			/* we take the encryption data from the
			 * internal stuff rather than what the
			 * user has passed us ... as we have to
			 * match exactly for some strange reason
			 */
			objstr = OBJ_nid2sn(
			    EVP_CIPHER_nid(xi->enc_cipher.cipher));
			if (objstr == NULL) {
				PEMerror(PEM_R_UNSUPPORTED_CIPHER);
				goto err;
			}

			/* create the right magic header stuff */
			if (strlen(objstr) + 23 + 2 * enc->iv_len + 13 >
			    sizeof buf) {
				PEMerror(ASN1_R_BUFFER_TOO_SMALL);
				goto err;
			}
			buf[0] = '\0';
			PEM_proc_type(buf, PEM_TYPE_ENCRYPTED);
			PEM_dek_info(buf, objstr, enc->iv_len, (char *)iv);

			/* use the normal code to write things out */
			i = PEM_write_bio(bp, PEM_STRING_RSA, buf, data, i);
			if (i <= 0)
				goto err;
		} else {
			/* Add DSA/DH */
#ifndef OPENSSL_NO_RSA
			/* normal optionally encrypted stuff */
			if (PEM_write_bio_RSAPrivateKey(bp,
			    xi->x_pkey->dec_pkey->pkey.rsa,
			    enc, kstr, klen, cb, u) <= 0)
				goto err;
#endif
		}
	}

	/* if we have a certificate then write it out now */
	if ((xi->x509 != NULL) && (PEM_write_bio_X509(bp, xi->x509) <= 0))
		goto err;

	/* we are ignoring anything else that is loaded into the X509_INFO
	 * structure for the moment ... as I don't need it so I'm not
	 * coding it here and Eric can do it when this makes it into the
	 * base library --tjh
	 */

	ret = 1;

err:
	explicit_bzero((char *)&ctx, sizeof(ctx));
	explicit_bzero(buf, PEM_BUFSIZE);
	return (ret);
}
@


1.21
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_info.c,v 1.20 2015/02/10 09:52:35 miod Exp $ */
d86 1
a86 1
		PEMerr(PEM_F_PEM_X509_INFO_READ, ERR_R_BUF_LIB);
d112 1
a112 2
			PEMerr(PEM_F_PEM_X509_INFO_READ_BIO,
			    ERR_R_MALLOC_FAILURE);
d251 1
a251 2
						PEMerr(PEM_F_PEM_X509_INFO_READ_BIO,
						    ERR_R_ASN1_LIB);
d255 1
a255 2
					PEMerr(PEM_F_PEM_X509_INFO_READ_BIO,
					    ERR_R_ASN1_LIB);
d323 1
a323 2
			PEMerr(PEM_F_PEM_X509_INFO_WRITE_BIO,
			    PEM_R_UNSUPPORTED_CIPHER);
d336 1
a336 2
				PEMerr(PEM_F_PEM_X509_INFO_WRITE_BIO,
				    PEM_R_CIPHER_IS_NULL);
d353 1
a353 2
				PEMerr(PEM_F_PEM_X509_INFO_WRITE_BIO,
				    PEM_R_UNSUPPORTED_CIPHER);
d360 1
a360 2
				PEMerr(PEM_F_PEM_X509_INFO_WRITE_BIO,
				    ASN1_R_BUFFER_TOO_SMALL);
@


1.20
log
@Replace assert() and OPENSSL_assert() calls with proper error return paths.
Careful review, feedback & ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_info.c,v 1.19 2014/07/11 08:44:49 jsing Exp $ */
d403 2
a404 2
	OPENSSL_cleanse((char *)&ctx, sizeof(ctx));
	OPENSSL_cleanse(buf, PEM_BUFSIZE);
@


1.19
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_info.c,v 1.18 2014/07/10 22:45:57 jsing Exp $ */
d364 6
a369 2
			OPENSSL_assert(strlen(objstr) + 23 +
			    2 * enc->iv_len + 13 <= sizeof buf);
@


1.18
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: pem_info.c,v 1.17 2014/07/10 13:58:23 jsing Exp $ */
a63 1
#include "cryptlib.h"
d65 2
d68 1
a68 1
#include <openssl/evp.h>
d70 4
a73 1
#include <openssl/pem.h>
a75 3
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
@


1.17
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_info.c,v 1.16 2014/07/10 11:20:49 miod Exp $ */
d61 2
@


1.16
log
@Missing allocation checks and potential NULL pointer dereference in the
error path in PEM_X509_INFO_read_bio(); ok guenther@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: pem_info.c,v 1.15 2014/06/12 15:49:30 deraadt Exp $ */
d60 2
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d109 1
a109 1
			goto err;
d176 2
d180 1
a180 1
			if ((int)strlen(header) > 10) /* assume encrypted */
d199 2
d203 1
a203 1
			if ((int)strlen(header) > 10) /* assume encrypted */
d222 2
d226 1
a226 1
			if ((int)strlen(header) > 10) /* assume encrypted */
d247 2
a248 1
						PEMerr(PEM_F_PEM_X509_INFO_READ_BIO, ERR_R_ASN1_LIB);
d252 2
a253 1
					PEMerr(PEM_F_PEM_X509_INFO_READ_BIO, ERR_R_ASN1_LIB);
@


1.14
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/pem/pem_info.c */
@


1.13
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d259 3
a261 6
		if (name != NULL)
			free(name);
		if (header != NULL)
			free(header);
		if (data != NULL)
			free(data);
d291 3
a293 6
	if (name != NULL)
		free(name);
	if (header != NULL)
		free(header);
	if (data != NULL)
		free(data);
@


1.12
log
@KNF.
@
text
@a72 1
#ifndef OPENSSL_NO_FP_API
a88 1
#endif
@


1.11
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d74 10
a83 14
STACK_OF(X509_INFO) *PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk, pem_password_cb *cb, void *u)
	{
        BIO *b;
        STACK_OF(X509_INFO) *ret;

        if ((b=BIO_new(BIO_s_file())) == NULL)
		{
		PEMerr(PEM_F_PEM_X509_INFO_READ,ERR_R_BUF_LIB);
                return(0);
		}
        BIO_set_fp(b,fp,BIO_NOCLOSE);
        ret=PEM_X509_INFO_read_bio(b,sk,cb,u);
        BIO_free(b);
        return(ret);
d85 5
d92 6
a97 4
STACK_OF(X509_INFO) *PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk, pem_password_cb *cb, void *u)
	{
	X509_INFO *xi=NULL;
	char *name=NULL,*header=NULL;
d99 1
a99 1
	unsigned char *data=NULL;
d101 4
a104 4
	long len,error=0;
	int ok=0;
	STACK_OF(X509_INFO) *ret=NULL;
	unsigned int i,raw,ptype;
d107 4
a110 5
	if (sk == NULL)
		{
		if ((ret=sk_X509_INFO_new_null()) == NULL)
			{
			PEMerr(PEM_F_PEM_X509_INFO_READ_BIO,ERR_R_MALLOC_FAILURE);
a111 1
			}
d113 2
a114 2
	else
		ret=sk;
d116 4
a119 4
	if ((xi=X509_INFO_new()) == NULL) goto err;
	for (;;)
		{
		raw=0;
d121 4
a124 6
		i=PEM_read_bio(bp,&name,&header,&data,&len);
		if (i == 0)
			{
			error=ERR_GET_REASON(ERR_peek_last_error());
			if (error == PEM_R_NO_START_LINE)
				{
d127 1
a127 1
				}
d129 1
a129 1
			}
d131 8
a138 8
		if (	(strcmp(name,PEM_STRING_X509) == 0) ||
			(strcmp(name,PEM_STRING_X509_OLD) == 0))
			{
			d2i=(D2I_OF(void))d2i_X509;
			if (xi->x509 != NULL)
				{
				if (!sk_X509_INFO_push(ret,xi)) goto err;
				if ((xi=X509_INFO_new()) == NULL) goto err;
a139 2
				}
			pp=&(xi->x509);
d141 8
a148 7
		else if ((strcmp(name,PEM_STRING_X509_TRUSTED) == 0))
			{
			d2i=(D2I_OF(void))d2i_X509_AUX;
			if (xi->x509 != NULL)
				{
				if (!sk_X509_INFO_push(ret,xi)) goto err;
				if ((xi=X509_INFO_new()) == NULL) goto err;
a149 2
				}
			pp=&(xi->x509);
d151 8
a158 7
		else if (strcmp(name,PEM_STRING_X509_CRL) == 0)
			{
			d2i=(D2I_OF(void))d2i_X509_CRL;
			if (xi->crl != NULL)
				{
				if (!sk_X509_INFO_push(ret,xi)) goto err;
				if ((xi=X509_INFO_new()) == NULL) goto err;
a159 2
				}
			pp=&(xi->crl);
d161 2
a162 1
		else
d164 7
a170 7
			if (strcmp(name,PEM_STRING_RSA) == 0)
			{
			d2i=(D2I_OF(void))d2i_RSAPrivateKey;
			if (xi->x_pkey != NULL) 
				{
				if (!sk_X509_INFO_push(ret,xi)) goto err;
				if ((xi=X509_INFO_new()) == NULL) goto err;
d172 1
a172 1
				}
d174 2
a175 2
			xi->enc_data=NULL;
			xi->enc_len=0;
d177 3
a179 3
			xi->x_pkey=X509_PKEY_new();
			ptype=EVP_PKEY_RSA;
			pp=&xi->x_pkey->dec_pkey;
d181 2
a182 3
				raw=1;
			}
		else
d185 7
a191 7
			if (strcmp(name,PEM_STRING_DSA) == 0)
			{
			d2i=(D2I_OF(void))d2i_DSAPrivateKey;
			if (xi->x_pkey != NULL) 
				{
				if (!sk_X509_INFO_push(ret,xi)) goto err;
				if ((xi=X509_INFO_new()) == NULL) goto err;
d193 1
a193 1
				}
d195 2
a196 2
			xi->enc_data=NULL;
			xi->enc_len=0;
d198 1
a198 1
			xi->x_pkey=X509_PKEY_new();
d200 1
a200 1
			pp=&xi->x_pkey->dec_pkey;
d202 2
a203 3
				raw=1;
			}
		else
d206 14
a219 14
 			if (strcmp(name,PEM_STRING_ECPRIVATEKEY) == 0)
 			{
 				d2i=(D2I_OF(void))d2i_ECPrivateKey;
 				if (xi->x_pkey != NULL) 
 				{
 					if (!sk_X509_INFO_push(ret,xi)) goto err;
 					if ((xi=X509_INFO_new()) == NULL) goto err;
 						goto start;
 				}
 
 			xi->enc_data=NULL;
 			xi->enc_len=0;
 
 			xi->x_pkey=X509_PKEY_new();
d221 4
a224 5
 			pp=&xi->x_pkey->dec_pkey;
 			if ((int)strlen(header) > 10) /* assume encrypted */
 				raw=1;
			}
		else
d226 4
a229 4
			{
			d2i=NULL;
			pp=NULL;
			}
d231 2
a232 4
		if (d2i != NULL)
			{
			if (!raw)
				{
d235 1
a235 1
				if (!PEM_get_EVP_CIPHER_INFO(header,&cipher))
d237 1
a237 1
				if (!PEM_do_header(&cipher,data,&len,cb,u))
d239 5
a243 6
				p=data;
				if (ptype)
					{
					if (!d2i_PrivateKey(ptype, pp, &p, len))
						{
						PEMerr(PEM_F_PEM_X509_INFO_READ_BIO,ERR_R_ASN1_LIB);
a244 1
						}
d246 2
a247 3
				else if (d2i(pp,&p,len) == NULL)
					{
					PEMerr(PEM_F_PEM_X509_INFO_READ_BIO,ERR_R_ASN1_LIB);
a248 1
					}
d250 1
a250 2
			else
				{ /* encrypted RSA data */
d252 5
a256 5
					&xi->enc_cipher)) goto err;
				xi->enc_data=(char *)data;
				xi->enc_len=(int)len;
				data=NULL;
				}
d258 1
a258 1
		else	{
a259 7
			}
		if (name != NULL) free(name);
		if (header != NULL) free(header);
		if (data != NULL) free(data);
		name=NULL;
		header=NULL;
		data=NULL;
d261 10
d273 1
a273 1
	 * in it then add it to the stack ... 
d276 7
a282 6
		(xi->x_pkey != NULL) || (xi->enc_data != NULL))
		{
		if (!sk_X509_INFO_push(ret,xi)) goto err;
		xi=NULL;
		}
	ok=1;
d284 5
a288 6
	if (xi != NULL) X509_INFO_free(xi);
	if (!ok)
		{
		for (i=0; ((int)i)<sk_X509_INFO_num(ret); i++)
			{
			xi=sk_X509_INFO_value(ret,i);
a289 3
			}
		if (ret != sk) sk_X509_INFO_free(ret);
		ret=NULL;
d291 3
a293 5
		
	if (name != NULL) free(name);
	if (header != NULL) free(header);
	if (data != NULL) free(data);
	return(ret);
d296 9
d307 4
a310 3
int PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,
	     unsigned char *kstr, int klen, pem_password_cb *cb, void *u)
	{
d312 3
a314 3
	int i,ret=0;
	unsigned char *data=NULL;
	const char *objstr=NULL;
d316 7
a322 8
	unsigned char *iv=NULL;
	
	if (enc != NULL)
		{
		objstr=OBJ_nid2sn(EVP_CIPHER_nid(enc));
		if (objstr == NULL)
			{
			PEMerr(PEM_F_PEM_X509_INFO_WRITE_BIO,PEM_R_UNSUPPORTED_CIPHER);
a323 1
			}
d325 1
d327 1
a327 1
	/* now for the fun part ... if we have a private key then 
d332 5
a336 7
	if (xi->x_pkey!=NULL)
		{
		if ( (xi->enc_data!=NULL) && (xi->enc_len>0) )
			{
			if (enc == NULL)
				{
				PEMerr(PEM_F_PEM_X509_INFO_WRITE_BIO,PEM_R_CIPHER_IS_NULL);
d338 1
a338 1
				}
d341 3
a343 3
			iv=xi->enc_cipher.iv;
			data=(unsigned char *)xi->enc_data;
			i=xi->enc_len;
d347 1
a347 1
			 * user has passed us ... as we have to 
d350 5
a354 5
			objstr=OBJ_nid2sn(
				EVP_CIPHER_nid(xi->enc_cipher.cipher));
			if (objstr == NULL)
				{
				PEMerr(PEM_F_PEM_X509_INFO_WRITE_BIO,PEM_R_UNSUPPORTED_CIPHER);
d356 1
a356 1
				}
d359 5
a363 4
			OPENSSL_assert(strlen(objstr)+23+2*enc->iv_len+13 <= sizeof buf);
			buf[0]='\0';
			PEM_proc_type(buf,PEM_TYPE_ENCRYPTED);
			PEM_dek_info(buf,objstr,enc->iv_len,(char *)iv);
d366 4
a369 5
			i=PEM_write_bio(bp,PEM_STRING_RSA,buf,data,i);
			if (i <= 0) goto err;
			}
		else
			{
d374 2
a375 2
				xi->x_pkey->dec_pkey->pkey.rsa,
				enc,kstr,klen,cb,u)<=0)
a377 1
			}
d379 1
d382 1
a382 1
	if ((xi->x509 != NULL) && (PEM_write_bio_X509(bp,xi->x509) <= 0))
d391 1
a391 1
	ret=1;
d394 4
a397 4
	OPENSSL_cleanse((char *)&ctx,sizeof(ctx));
	OPENSSL_cleanse(buf,PEM_BUFSIZE);
	return(ret);
	}
@


1.10
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d275 3
a277 3
		if (name != NULL) OPENSSL_free(name);
		if (header != NULL) OPENSSL_free(header);
		if (data != NULL) OPENSSL_free(data);
d306 3
a308 3
	if (name != NULL) OPENSSL_free(name);
	if (header != NULL) OPENSSL_free(header);
	if (data != NULL) OPENSSL_free(data);
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d170 1
@


1.8
log
@resolve conflicts
@
text
@d101 2
a102 2
	unsigned int i,raw;
	d2i_of_void *d2i;
d119 1
a169 1
			d2i=(D2I_OF(void))d2i_RSAPrivateKey;
d181 2
a182 4
			if ((xi->x_pkey->dec_pkey=EVP_PKEY_new()) == NULL)
				goto err;
			xi->x_pkey->dec_pkey->type=EVP_PKEY_RSA;
			pp=&(xi->x_pkey->dec_pkey->pkey.rsa);
d203 2
a204 4
			if ((xi->x_pkey->dec_pkey=EVP_PKEY_new()) == NULL)
				goto err;
			xi->x_pkey->dec_pkey->type=EVP_PKEY_DSA;
			pp=&xi->x_pkey->dec_pkey->pkey.dsa;
d225 2
a226 4
 			if ((xi->x_pkey->dec_pkey=EVP_PKEY_new()) == NULL)
 				goto err;
 			xi->x_pkey->dec_pkey->type=EVP_PKEY_EC;
 			pp=&(xi->x_pkey->dec_pkey->pkey.ec);
d248 9
a256 1
				if (d2i(pp,&p,len) == NULL)
d342 6
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d66 6
d94 4
a97 2
	char *name=NULL,*header=NULL,**pp;
	unsigned char *data=NULL,*p;
d102 1
a102 1
	char *(*d2i)();
d134 1
a134 1
			d2i=(char *(*)())d2i_X509;
d141 1
a141 1
			pp=(char **)&(xi->x509);
d145 1
a145 1
			d2i=(char *(*)())d2i_X509_AUX;
d152 1
a152 1
			pp=(char **)&(xi->x509);
d156 1
a156 1
			d2i=(char *(*)())d2i_X509_CRL;
d163 1
a163 1
			pp=(char **)&(xi->crl);
d169 1
a169 1
			d2i=(char *(*)())d2i_RSAPrivateKey;
d184 1
a184 1
			pp=(char **)&(xi->x_pkey->dec_pkey->pkey.rsa);
d193 1
a193 1
			d2i=(char *(*)())d2i_DSAPrivateKey;
d208 1
a208 1
			pp=(char **)&(xi->x_pkey->dec_pkey->pkey.dsa);
d211 24
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d327 1
d362 2
a363 2
	memset((char *)&ctx,0,sizeof(ctx));
	memset(buf,0,PEM_BUFSIZE);
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d67 1
a67 1
#ifndef NO_FP_API
d114 1
a114 1
			error=ERR_GET_REASON(ERR_peek_error());
d158 1
a158 1
#ifndef NO_RSA
d182 1
a182 1
#ifndef NO_DSA
d329 1
a329 1
			PEM_dek_info(buf,objstr,8,(char *)iv);
d338 1
a338 1
#ifndef NO_RSA
d349 1
a349 1
	if ((xi->x509 != NULL) || (PEM_write_bio_X509(bp,xi->x509) <= 0))
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d308 1
a308 1
			/* copy from wierdo names into more normal things */
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d240 3
a242 3
		if (name != NULL) Free(name);
		if (header != NULL) Free(header);
		if (data != NULL) Free(data);
d271 3
a273 3
	if (name != NULL) Free(name);
	if (header != NULL) Free(header);
	if (data != NULL) Free(data);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d135 11
@


1.1
log
@Initial revision
@
text
@d61 5
a65 5
#include "buffer.h"
#include "objects.h"
#include "evp.h"
#include "x509.h"
#include "pem.h"
d68 1
a68 4
STACK *PEM_X509_INFO_read(fp,sk,cb)
FILE *fp;
STACK *sk;
int (*cb)();
d71 1
a71 1
        STACK *ret;
d79 1
a79 1
        ret=PEM_X509_INFO_read_bio(b,sk,cb);
d85 1
a85 4
STACK *PEM_X509_INFO_read_bio(bp,sk,cb)
BIO *bp;
STACK *sk;
int (*cb)();
d92 1
a92 1
	STACK *ret=NULL;
d98 1
a98 1
		if ((ret=sk_new_null()) == NULL)
d129 1
a129 1
				if (!sk_push(ret,(char *)xi)) goto err;
d140 1
a140 1
				if (!sk_push(ret,(char *)xi)) goto err;
d153 1
a153 1
				if (!sk_push(ret,(char *)xi)) goto err;
d177 1
a177 1
				if (!sk_push(ret,(char *)xi)) goto err;
d208 1
a208 1
				if (!PEM_do_header(&cipher,data,&len,cb))
d243 1
a243 1
		if (!sk_push(ret,(char *)xi)) goto err;
d251 1
a251 1
		for (i=0; ((int)i)<sk_num(ret); i++)
d253 1
a253 1
			xi=(X509_INFO *)sk_value(ret,i);
d256 1
a256 1
		if (ret != sk) sk_free(ret);
d268 2
a269 7
int PEM_X509_INFO_write_bio(bp,xi,enc,kstr,klen,cb)
BIO *bp;
X509_INFO *xi;
EVP_CIPHER *enc;
unsigned char *kstr;
int klen;
int (*cb)();
d274 1
a274 2
	char *objstr=NULL;
#define PEM_BUFSIZE	1024
d331 1
a331 1
				enc,kstr,klen,cb)<=0)
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 11
a71 8
#include <openssl/buffer.h>
#include <openssl/objects.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/pem.h>

#ifndef OPENSSL_NO_FP_API
STACK_OF(X509_INFO) *PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk, pem_password_cb *cb, void *u)
d74 1
a74 1
        STACK_OF(X509_INFO) *ret;
d82 1
a82 1
        ret=PEM_X509_INFO_read_bio(b,sk,cb,u);
d88 4
a91 1
STACK_OF(X509_INFO) *PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk, pem_password_cb *cb, void *u)
d98 1
a98 1
	STACK_OF(X509_INFO) *ret=NULL;
d104 1
a104 1
		if ((ret=sk_X509_INFO_new_null()) == NULL)
d120 1
a120 1
			error=ERR_GET_REASON(ERR_peek_last_error());
d135 1
a135 12
				if (!sk_X509_INFO_push(ret,xi)) goto err;
				if ((xi=X509_INFO_new()) == NULL) goto err;
				goto start;
				}
			pp=(char **)&(xi->x509);
			}
		else if ((strcmp(name,PEM_STRING_X509_TRUSTED) == 0))
			{
			d2i=(char *(*)())d2i_X509_AUX;
			if (xi->x509 != NULL)
				{
				if (!sk_X509_INFO_push(ret,xi)) goto err;
d146 1
a146 1
				if (!sk_X509_INFO_push(ret,xi)) goto err;
d153 1
a153 1
#ifndef OPENSSL_NO_RSA
d159 1
a159 1
				if (!sk_X509_INFO_push(ret,xi)) goto err;
d177 1
a177 1
#ifndef OPENSSL_NO_DSA
d183 1
a183 1
				if (!sk_X509_INFO_push(ret,xi)) goto err;
d214 1
a214 1
				if (!PEM_do_header(&cipher,data,&len,cb,u))
d235 3
a237 3
		if (name != NULL) OPENSSL_free(name);
		if (header != NULL) OPENSSL_free(header);
		if (data != NULL) OPENSSL_free(data);
d249 1
a249 1
		if (!sk_X509_INFO_push(ret,xi)) goto err;
d257 1
a257 1
		for (i=0; ((int)i)<sk_X509_INFO_num(ret); i++)
d259 1
a259 1
			xi=sk_X509_INFO_value(ret,i);
d262 1
a262 1
		if (ret != sk) sk_X509_INFO_free(ret);
d266 3
a268 3
	if (name != NULL) OPENSSL_free(name);
	if (header != NULL) OPENSSL_free(header);
	if (data != NULL) OPENSSL_free(data);
d274 7
a280 2
int PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,
	     unsigned char *kstr, int klen, pem_password_cb *cb, void *u)
d285 2
a286 1
	const char *objstr=NULL;
d309 1
a309 1
			/* copy from weirdo names into more normal things */
d330 1
a330 1
			PEM_dek_info(buf,objstr,enc->iv_len,(char *)iv);
d339 1
a339 1
#ifndef OPENSSL_NO_RSA
d343 1
a343 1
				enc,kstr,klen,cb,u)<=0)
d350 1
a350 1
	if ((xi->x509 != NULL) && (PEM_write_bio_X509(bp,xi->x509) <= 0))
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a326 1
			OPENSSL_assert(strlen(objstr)+23+2*enc->iv_len+13 <= sizeof buf);
d361 2
a362 2
	OPENSSL_cleanse((char *)&ctx,sizeof(ctx));
	OPENSSL_cleanse(buf,PEM_BUFSIZE);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a65 6
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
d88 2
a89 4
	char *name=NULL,*header=NULL;
	void *pp;
	unsigned char *data=NULL;
	const unsigned char *p;
d94 1
a94 1
	d2i_of_void *d2i;
d126 1
a126 1
			d2i=(D2I_OF(void))d2i_X509;
d133 1
a133 1
			pp=&(xi->x509);
d137 1
a137 1
			d2i=(D2I_OF(void))d2i_X509_AUX;
d144 1
a144 1
			pp=&(xi->x509);
d148 1
a148 1
			d2i=(D2I_OF(void))d2i_X509_CRL;
d155 1
a155 1
			pp=&(xi->crl);
d161 1
a161 1
			d2i=(D2I_OF(void))d2i_RSAPrivateKey;
d176 1
a176 1
			pp=&(xi->x_pkey->dec_pkey->pkey.rsa);
d185 1
a185 1
			d2i=(D2I_OF(void))d2i_DSAPrivateKey;
d200 1
a200 1
			pp=&xi->x_pkey->dec_pkey->pkey.dsa;
a202 24
			}
		else
#endif
#ifndef OPENSSL_NO_EC
 			if (strcmp(name,PEM_STRING_ECPRIVATEKEY) == 0)
 			{
 				d2i=(D2I_OF(void))d2i_ECPrivateKey;
 				if (xi->x_pkey != NULL) 
 				{
 					if (!sk_X509_INFO_push(ret,xi)) goto err;
 					if ((xi=X509_INFO_new()) == NULL) goto err;
 						goto start;
 				}
 
 			xi->enc_data=NULL;
 			xi->enc_len=0;
 
 			xi->x_pkey=X509_PKEY_new();
 			if ((xi->x_pkey->dec_pkey=EVP_PKEY_new()) == NULL)
 				goto err;
 			xi->x_pkey->dec_pkey->type=EVP_PKEY_EC;
 			pp=&(xi->x_pkey->dec_pkey->pkey.ec);
 			if ((int)strlen(header) > 10) /* assume encrypted */
 				raw=1;
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d101 2
a102 2
	unsigned int i,raw,ptype;
	d2i_of_void *d2i = 0;
a118 1
		ptype = 0;
d169 1
d181 4
a184 2
			ptype=EVP_PKEY_RSA;
			pp=&xi->x_pkey->dec_pkey;
d205 4
a208 2
			ptype = EVP_PKEY_DSA;
			pp=&xi->x_pkey->dec_pkey;
d229 4
a232 2
			ptype = EVP_PKEY_EC;
 			pp=&xi->x_pkey->dec_pkey;
d254 1
a254 9
				if (ptype)
					{
					if (!d2i_PrivateKey(ptype, pp, &p, len))
						{
						PEMerr(PEM_F_PEM_X509_INFO_READ_BIO,ERR_R_ASN1_LIB);
						goto err;
						}
					}
				else if (d2i(pp,&p,len) == NULL)
a339 6
			if (enc == NULL)
				{
				PEMerr(PEM_F_PEM_X509_INFO_WRITE_BIO,PEM_R_CIPHER_IS_NULL);
				goto err;
				}

@


1.1.1.6
log
@Import OpenSSL 1.0.1g
@
text
@a169 1
			d2i=(D2I_OF(void))d2i_RSAPrivateKey;
@


