head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2014.12.06.23.39.35;	author schwarze;	state Exp;
branches;
next	1.4;
commitid	NfVdFjPaLjo3JOyN;

1.4
date	2014.07.09.17.56.43;	author miod;	state Exp;
branches;
next	1.3;
commitid	XgZtb7UreenCb5yR;

1.3
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.19.11.15.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.16.09.50.10;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.5
log
@fix manual names that clash with other manuals
@
text
@=pod

=head1 NAME

RAND - pseudo-random number generator

=head1 SYNOPSIS

 #include <openssl/rand.h>

 int  RAND_bytes(unsigned char *buf, int num);
 int  RAND_pseudo_bytes(unsigned char *buf, int num);

=head1 DESCRIPTION

These functions give access to the systems cryptographically secure
pseudo-random number generator (PRNG). It is used by other library functions
for example to generate random keys, and applications can use it when they
need randomness.

L<RAND_bytes(3)|RAND_bytes(3)> describes how to obtain random data from the
PRNG.

=head1 INTERNALS

The RAND_SSLeay() method implements a PRNG based on the systems'
L<arc4random_buf(3)> random number generator.

=head1 SEE ALSO

L<BN_rand(3)|BN_rand(3)>,
L<RAND_bytes(3)|RAND_bytes(3)>

=cut
@


1.4
log
@Update to match the current state of crypto/rand, and remove MLINKS for
RAND_event and RAND_screen.
@
text
@d5 1
a5 1
rand - pseudo-random number generator
@


1.3
log
@Remove trailing whitespace.

fine jmc@@
@
text
@a10 2
 int  RAND_set_rand_engine(ENGINE *engine);

a13 14
 void RAND_seed(const void *buf, int num);
 void RAND_add(const void *buf, int num, int entropy);
 int  RAND_status(void);

 int  RAND_load_file(const char *file, long max_bytes);
 int  RAND_write_file(const char *file);
 const char *RAND_file_name(char *file, size_t num);

 void RAND_set_rand_method(const RAND_METHOD *meth);
 const RAND_METHOD *RAND_get_rand_method(void);
 RAND_METHOD *RAND_SSLeay(void);

 void RAND_cleanup(void);

d16 3
a18 16
Since the introduction of the ENGINE API, the recommended way of controlling
default implementations is by using the ENGINE API functions. The default
B<RAND_METHOD>, as set by RAND_set_rand_method() and returned by
RAND_get_rand_method(), is only used if no ENGINE has been set as the default
"rand" implementation. Hence, these two functions are no longer the recommened
way to control defaults.

If an alternative B<RAND_METHOD> implementation is being used (either set
directly or as provided by an ENGINE module), then it is entirely responsible
for the generation and management of a cryptographically secure PRNG stream. The
mechanisms described below relate solely to the software PRNG implementation
built in to OpenSSL and used by default.

These functions implement a cryptographically secure pseudo-random
number generator (PRNG). It is used by other library functions for
example to generate random keys, and applications can use it when they
a20 6
A cryptographic PRNG must be seeded with unpredictable data such as
mouse movements or keys pressed at random by the user. This is
described in L<RAND_add(3)|RAND_add(3)>. Its state can be saved in a seed file
(see L<RAND_load_file(3)|RAND_load_file(3)>) to avoid having to go through the
seeding process whenever the application is started.

d31 2
a32 5
L<BN_rand(3)|BN_rand(3)>, L<RAND_add(3)|RAND_add(3)>,
L<RAND_load_file(3)|RAND_load_file(3)>,
L<RAND_bytes(3)|RAND_bytes(3)>,
L<RAND_set_rand_method(3)|RAND_set_rand_method(3)>,
L<RAND_cleanup(3)|RAND_cleanup(3)>
@


1.2
log
@egd is gone
@
text
@d57 1
a57 1
PRNG. 
d70 1
a70 1
L<RAND_cleanup(3)|RAND_cleanup(3)> 
@


1.1
log
@Sync the list of man pages for libcrypto, explicity rename conflicting
pages instead of doing it in the Makefiles and move a libssl page where
it belongs.

ok miod@@
@
text
@a23 2
 int  RAND_egd(const char *path);

d67 1
a67 1
L<RAND_load_file(3)|RAND_load_file(3)>, L<RAND_egd(3)|RAND_egd(3)>,
@

