head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2016.11.04.15.29.03;	author schwarze;	state dead;
branches;
next	1.5;
commitid	htI4Kc9Z4rYZWBtR;

1.5
date	2015.09.22.08.08.07;	author sobrado;	state Exp;
branches;
next	1.4;
commitid	yt6ZAILseiFaXq7L;

1.4
date	2014.07.10.14.14.04;	author miod;	state Exp;
branches;
next	1.3;
commitid	VVoKhghxvV7qSanI;

1.3
date	2014.07.10.13.53.11;	author miod;	state Exp;
branches;
next	1.2;
commitid	kwuftJ7GCMdBJPFx;

1.2
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.11.21.36.17;	author markus;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.11.21.36.17;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.14;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@convert X509 manuals from pod to mdoc
@
text
@=pod

=head1 NAME

X509_NAME_get_index_by_NID, X509_NAME_get_index_by_OBJ, X509_NAME_get_entry,
X509_NAME_entry_count, X509_NAME_get_text_by_NID, X509_NAME_get_text_by_OBJ -
X509_NAME lookup and enumeration functions

=head1 SYNOPSIS

 #include <openssl/x509.h>

 int X509_NAME_get_index_by_NID(X509_NAME *name,int nid,int lastpos);
 int X509_NAME_get_index_by_OBJ(X509_NAME *name,ASN1_OBJECT *obj, int lastpos);

 int X509_NAME_entry_count(X509_NAME *name);
 X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *name, int loc);

 int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf,int len);
 int X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, char *buf,int len);

=head1 DESCRIPTION

These functions allow an B<X509_NAME> structure to be examined. The
B<X509_NAME> structure is the same as the B<Name> type defined in
RFC2459 (and elsewhere) and used for example in certificate subject
and issuer names.

X509_NAME_get_index_by_NID() and X509_NAME_get_index_by_OBJ() retrieve
the next index matching B<nid> or B<obj> after B<lastpos>. B<lastpos>
should initially be set to -1. If there are no more entries -1 is returned.

X509_NAME_entry_count() returns the total number of entries in B<name>.

X509_NAME_get_entry() retrieves the B<X509_NAME_ENTRY> from B<name>
corresponding to index B<loc>. Acceptable values for B<loc> run from
0 to (X509_NAME_entry_count(name) - 1). The value returned is an
internal pointer which must not be freed.

X509_NAME_get_text_by_NID(), X509_NAME_get_text_by_OBJ() retrieve
the "text" from the first entry in B<name> which matches B<nid> or
B<obj>, if no such entry exists -1 is returned. At most B<len> bytes
will be written and the text written to B<buf> will be null
terminated. The length of the output string written is returned
excluding the terminating null. If B<buf> is <NULL> then the amount
of space needed in B<buf> (excluding the final null) is returned.

=head1 NOTES

X509_NAME_get_text_by_NID() and X509_NAME_get_text_by_OBJ() are
legacy functions which have various limitations which make them
of minimal use in practice. They can only find the first matching
entry and will copy the contents of the field verbatim: this can
be highly confusing if the target is a multicharacter string type
like a BMPString or a UTF8String.

For a more general solution X509_NAME_get_index_by_NID() or
X509_NAME_get_index_by_OBJ() should be used followed by
X509_NAME_get_entry() on any matching indices and then the
various B<X509_NAME_ENTRY> utility functions on the result.

=head1 EXAMPLES

Process all entries:

 int i;
 X509_NAME_ENTRY *e;

 for (i = 0; i < X509_NAME_entry_count(nm); i++) {
	e = X509_NAME_get_entry(nm, i);
	/* Do something with e */
 }

Process all commonName entries:

 int loc;
 X509_NAME_ENTRY *e;

 loc = -1;
 for (;;) {
	lastpos = X509_NAME_get_index_by_NID(nm, NID_commonName, lastpos);
	if (lastpos == -1)
		break;
	e = X509_NAME_get_entry(nm, lastpos);
	/* Do something with e */
 }

=head1 RETURN VALUES

X509_NAME_get_index_by_NID() and X509_NAME_get_index_by_OBJ()
return the index of the next matching entry or -1 if not found.

X509_NAME_entry_count() returns the total number of entries.

X509_NAME_get_entry() returns an B<X509_NAME> pointer to the
requested entry or B<NULL> if the index is invalid.

=head1 SEE ALSO

L<ERR_get_error(3)|ERR_get_error(3)>, L<d2i_X509_NAME(3)|d2i_X509_NAME(3)>

=cut
@


1.5
log
@typos in documentation; better wording, suggested by jmc@@

ok jmc@@
@
text
@@


1.4
log
@Try and fix the horrible coding style of the example code snippets.
@
text
@d54 1
a54 1
be highly confusing if the target is a muticharacter string type
@


1.3
log
@Remove empty sections and references to des_modes(7) which we don't have.
@
text
@d69 1
a69 2
 for (i = 0; i < X509_NAME_entry_count(nm); i++)
	{
d72 1
a72 1
	}
d80 1
a80 2
 for (;;)
	{
d86 1
a86 1
	}
@


1.2
log
@Remove trailing whitespace.

fine jmc@@
@
text
@a103 4
=head1 HISTORY

TBA

@


1.1
log
@Initial revision
@
text
@d11 1
a11 2
int X509_NAME_get_index_by_NID(X509_NAME *name,int nid,int lastpos);
int X509_NAME_get_index_by_OBJ(X509_NAME *name,ASN1_OBJECT *obj, int lastpos);
d13 2
a14 2
int X509_NAME_entry_count(X509_NAME *name);
X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *name, int loc);
d16 5
a20 2
int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf,int len);
int X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, char *buf,int len);
d46 1
a46 1
of space needed in B<buf> (excluding the final null) is returned. 
@


1.1.1.1
log
@import 0.9.7b (without idea and rc5)
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@d11 2
a12 1
 #include <openssl/x509.h>
d14 2
a15 2
 int X509_NAME_get_index_by_NID(X509_NAME *name,int nid,int lastpos);
 int X509_NAME_get_index_by_OBJ(X509_NAME *name,ASN1_OBJECT *obj, int lastpos);
d17 2
a18 5
 int X509_NAME_entry_count(X509_NAME *name);
 X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *name, int loc);

 int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf,int len);
 int X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, char *buf,int len);
@

