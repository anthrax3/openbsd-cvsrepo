head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2016.11.04.10.17.17;	author schwarze;	state dead;
branches;
next	1.10;
commitid	ZjQW3LDCU7N0oPMv;

1.10
date	2016.03.12.21.31.22;	author mmcc;	state Exp;
branches;
next	1.9;
commitid	KhDV1S6CZAu8cbBc;

1.9
date	2015.11.11.22.14.40;	author jmc;	state Exp;
branches;
next	1.8;
commitid	eNNq8UNxWW0rsWWg;

1.8
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.19;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.30;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.15.06.18.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.59;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.19;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.51.47;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.36.17;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.50;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@convert RSA manuals from pod to mdoc
@
text
@=pod

=head1 NAME

RSA_set_default_method, RSA_get_default_method, RSA_set_method,
RSA_get_method, RSA_PKCS1_SSLeay, RSA_null_method, RSA_flags,
RSA_new_method, RSA_get_default_openssl_method,
RSA_set_default_openssl_method - select RSA method

=head1 SYNOPSIS

 #include <openssl/rsa.h>

 void RSA_set_default_method(const RSA_METHOD *meth);

 RSA_METHOD *RSA_get_default_method(void);

 int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);

 RSA_METHOD *RSA_get_method(const RSA *rsa);

 RSA_METHOD *RSA_PKCS1_SSLeay(void);

 RSA_METHOD *RSA_null_method(void);

 int RSA_flags(const RSA *rsa);

 RSA *RSA_new_method(RSA_METHOD *method);

=head1 DESCRIPTION

An B<RSA_METHOD> specifies the functions that OpenSSL uses for RSA
operations. By modifying the method, alternative implementations such as
hardware accelerators may be used. IMPORTANT: See the NOTES section for
important information about how these RSA API functions are affected by the
use of B<ENGINE> API calls.

Initially, the default RSA_METHOD is the OpenSSL internal implementation,
as returned by RSA_PKCS1_SSLeay().

RSA_set_default_method() makes B<meth> the default method for all RSA
structures created later. B<NB>: This is true only whilst no ENGINE has
been set as a default for RSA, so this function is no longer recommended.

RSA_get_default_method() returns a pointer to the current default
RSA_METHOD. However, the meaningfulness of this result is dependent on
whether the ENGINE API is being used, so this function is no longer
recommended.

RSA_set_method() selects B<meth> to perform all operations using the key
B<rsa>. This will replace the RSA_METHOD used by the RSA key and if the
previous method was supplied by an ENGINE, the handle to that ENGINE will
be released during the change. It is possible to have RSA keys that only
work with certain RSA_METHOD implementations (eg. from an ENGINE module
that supports embedded hardware-protected keys), and in such cases
attempting to change the RSA_METHOD for the key can have unexpected
results.

RSA_get_method() returns a pointer to the RSA_METHOD being used by B<rsa>.
This method may or may not be supplied by an ENGINE implementation, but if
it is, the return value can only be guaranteed to be valid as long as the
RSA key itself is valid and does not have its implementation changed by
RSA_set_method().

RSA_flags() returns the B<flags> that are set for B<rsa>'s current
RSA_METHOD. See the BUGS section.

RSA_new_method() allocates and initializes an RSA structure so that
B<engine> will be used for the RSA operations. If B<engine> is NULL, the
default ENGINE for RSA operations is used, and if no default ENGINE is set,
the RSA_METHOD controlled by RSA_set_default_method() is used.

RSA_flags() returns the B<flags> that are set for B<rsa>'s current method.

RSA_new_method() allocates and initializes an B<RSA> structure so that
B<method> will be used for the RSA operations. If B<method> is B<NULL>,
the default method is used.

=head1 THE RSA_METHOD STRUCTURE

 typedef struct rsa_meth_st
 {
     /* name of the implementation */
	const char *name;

     /* encrypt */
	int (*rsa_pub_enc)(int flen, unsigned char *from,
          unsigned char *to, RSA *rsa, int padding);

     /* verify arbitrary data */
	int (*rsa_pub_dec)(int flen, unsigned char *from,
          unsigned char *to, RSA *rsa, int padding);

     /* sign arbitrary data */
	int (*rsa_priv_enc)(int flen, unsigned char *from,
          unsigned char *to, RSA *rsa, int padding);

     /* decrypt */
	int (*rsa_priv_dec)(int flen, unsigned char *from,
          unsigned char *to, RSA *rsa, int padding);

     /* compute r0 = r0 ^ I mod rsa->n (May be NULL for some
                                        implementations) */
	int (*rsa_mod_exp)(BIGNUM *r0, BIGNUM *I, RSA *rsa);

     /* compute r = a ^ p mod m (May be NULL for some implementations) */
	int (*bn_mod_exp)(BIGNUM *r, BIGNUM *a, const BIGNUM *p,
          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);

     /* called at RSA_new */
	int (*init)(RSA *rsa);

     /* called at RSA_free */
	int (*finish)(RSA *rsa);

     /* RSA_FLAG_EXT_PKEY        - rsa_mod_exp is called for private key
      *                            operations, even if p,q,dmp1,dmq1,iqmp
      *                            are NULL
      * RSA_FLAG_SIGN_VER        - enable rsa_sign and rsa_verify
      * RSA_METHOD_FLAG_NO_CHECK - don't check pub/private match
      */
	int flags;

	char *app_data; /* ?? */

     /* sign. For backward compatibility, this is used only
      * if (flags & RSA_FLAG_SIGN_VER)
      */
	int (*rsa_sign)(int type, unsigned char *m, unsigned int m_len,
           unsigned char *sigret, unsigned int *siglen, RSA *rsa);

     /* verify. For backward compatibility, this is used only
      * if (flags & RSA_FLAG_SIGN_VER)
      */
	int (*rsa_verify)(int type, unsigned char *m, unsigned int m_len,
           unsigned char *sigbuf, unsigned int siglen, RSA *rsa);

 } RSA_METHOD;

=head1 RETURN VALUES

RSA_PKCS1_SSLeay(), RSA_PKCS1_null_method(), RSA_get_default_method()
and RSA_get_method() return pointers to the respective RSA_METHODs.

RSA_set_method() returns a pointer to the old RSA_METHOD implementation
that was replaced. However, this return value should probably be ignored
because if it was supplied by an ENGINE, the pointer could be invalidated
at any time if the ENGINE is unloaded (in fact it could be unloaded as a
result of the RSA_set_method() function releasing its handle to the
ENGINE). For this reason, the return type may be replaced with a B<void>
declaration in a future release.

RSA_new_method() returns NULL and sets an error code that can be obtained
by L<ERR_get_error(3)|ERR_get_error(3)> if the allocation fails. Otherwise
it returns a pointer to the newly allocated structure.

=head1 NOTES

As of version 0.9.7, RSA_METHOD implementations are grouped together with
other algorithmic APIs (eg. DSA_METHOD, EVP_CIPHER, etc) into B<ENGINE>
modules. If a default ENGINE is specified for RSA functionality using an
ENGINE API function, that will override any RSA defaults set using the RSA
API (ie.  RSA_set_default_method()). For this reason, the ENGINE API is the
recommended way to control default implementations for use in RSA and other
cryptographic algorithms.

=head1 BUGS

The behaviour of RSA_flags() is a mis-feature that is left as-is for now
to avoid creating compatibility problems. RSA functionality, such as the
encryption functions, are controlled by the B<flags> value in the RSA key
itself, not by the B<flags> value in the RSA_METHOD attached to the RSA key
(which is what this function returns). If the flags element of an RSA key
is changed, the changes will be honoured by RSA functionality but will not
be reflected in the return value of the RSA_flags() function - in effect
RSA_flags() behaves more like an RSA_default_flags() function (which does
not currently exist).

=head1 SEE ALSO

L<rsa(3)|rsa(3)>, L<RSA_new(3)|RSA_new(3)>

=head1 HISTORY

RSA_new_method() and RSA_set_default_method() appeared in SSLeay 0.8.
RSA_get_default_method(), RSA_set_method() and RSA_get_method() as
well as the rsa_sign and rsa_verify components of RSA_METHOD were
added in OpenSSL 0.9.4.

RSA_set_default_openssl_method() and RSA_get_default_openssl_method()
replaced RSA_set_default_method() and RSA_get_default_method()
respectively, and RSA_set_method() and RSA_new_method() were altered to use
B<ENGINE>s rather than B<RSA_METHOD>s during development of the engine
version of OpenSSL 0.9.6. For 0.9.7, the handling of defaults in the ENGINE
API was restructured so that this change was reversed, and behaviour of the
other functions resembled more closely the previous behaviour. The
behaviour of defaults in the ENGINE API now transparently overrides the
behaviour of defaults in the RSA API without requiring changing these
function prototypes.

=cut
@


1.10
log
@Remove sentences in RETURN VALUES sections saying that functions with
void return types 'return no value'. This is obvious and therefore
unneccessary to mention.

We spare rewind(3)'s sentence because espie@@ pointed out that it's a
warning - the function masks a potential error.

This commit also adds a sentence to X509_free clarifying that it's
NULL-safe. This bit was discussed with doug@@.

ok martijn@@, sentiment supported by schwarze@@
@
text
@@


1.9
log
@add missing functions to NAME, or otherwise correct the mlink
entry for them;

feedback/ok schwarze
@
text
@a144 2
RSA_set_default_method() returns no value.

@


1.8
log
@Remove trailing whitespace.

fine jmc@@
@
text
@d7 2
a8 1
RSA_new_method - select RSA method
@


1.7
log
@resolve conflicts
@
text
@d46 1
a46 1
whether the ENGINE API is being used, so this function is no longer 
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d45 1
a45 1
RSA_METHOD. However, the meaningfulness of this result is dependant on
@


1.5
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d6 2
a7 2
RSA_get_method, RSA_PKCS1_SSLeay,
RSA_null_method, RSA_flags, RSA_new_method - select RSA method
a11 1
 #include <openssl/engine.h>
d27 1
a27 1
 RSA *RSA_new_method(ENGINE *engine);
d71 6
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d14 1
a14 1
 void RSA_set_default_openssl_method(RSA_METHOD *meth);
d16 1
a16 1
 RSA_METHOD *RSA_get_default_openssl_method(void);
d18 1
a18 1
 int RSA_set_method(RSA *rsa, ENGINE *engine);
d20 1
a20 1
 RSA_METHOD *RSA_get_method(RSA *rsa);
d26 1
a26 1
 int RSA_flags(RSA *rsa);
d33 31
a63 2
operations. By modifying the method, alternative implementations
such as hardware accelerators may be used.
d65 2
a66 20
Initially, the default is to use the OpenSSL internal implementation.
RSA_PKCS1_SSLeay() returns a pointer to that method.

RSA_set_default_openssl_method() makes B<meth> the default method for all B<RSA>
structures created later. B<NB:> This is true only whilst the default engine
for RSA operations remains as "openssl". ENGINEs provide an
encapsulation for implementations of one or more algorithms at a time, and all
the RSA functions mentioned here operate within the scope of the default
"openssl" engine.

RSA_get_default_openssl_method() returns a pointer to the current default
method for the "openssl" engine.

RSA_set_method() selects B<engine> for all operations using the key
B<rsa>.

RSA_get_method() returns a pointer to the RSA_METHOD from the currently
selected ENGINE for B<rsa>.

RSA_flags() returns the B<flags> that are set for B<rsa>'s current method.
d69 3
a71 2
B<engine> will be used for the RSA operations. If B<engine> is NULL,
the default engine for RSA operations is used.
d136 1
a136 1
RSA_PKCS1_SSLeay(), RSA_PKCS1_null_method(), RSA_get_default_openssl_method()
d139 1
a139 1
RSA_set_default_openssl_method() returns no value.
d141 7
a147 6
RSA_set_method() selects B<engine> as the engine that will be responsible for
all operations using the structure B<rsa>. If this function completes successfully,
then the B<rsa> structure will have its own functional reference of B<engine>, so
the caller should remember to free their own reference to B<engine> when they are
finished with it. NB: An ENGINE's RSA_METHOD can be retrieved (or set) by
ENGINE_get_RSA() or ENGINE_set_RSA().
d149 2
a150 2
RSA_new_method() returns NULL and sets an error code that can be
obtained by L<ERR_get_error(3)|ERR_get_error(3)> if the allocation fails. Otherwise
d153 22
d187 9
a195 3
replaced RSA_set_default_method() and RSA_get_default_method() respectively,
and RSA_set_method() and RSA_new_method() were altered to use B<ENGINE>s
rather than B<RSA_METHOD>s during development of OpenSSL 0.9.6.
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d6 1
a6 1
RSA_get_method, RSA_PKCS1_SSLeay, RSA_PKCS1_RSAref,
d18 1
a18 1
 RSA_METHOD *RSA_set_method(RSA *rsa, ENGINE *engine);
a23 2
 RSA_METHOD *RSA_PKCS1_RSAref(void);

d36 2
a37 11
Initially, the default is to use the OpenSSL internal implementation,
unless OpenSSL was configured with the C<rsaref> or C<-DRSA_NULL>
options. RSA_PKCS1_SSLeay() returns a pointer to that method.

RSA_PKCS1_RSAref() returns a pointer to a method that uses the RSAref
library. This is the default method in the C<rsaref> configuration;
the function is not available in other configurations.
RSA_null_method() returns a pointer to a method that does not support
the RSA transformation. It is the default if OpenSSL is compiled with
C<-DRSA_NULL>. These methods may be useful in the USA because of a
patent on the RSA cryptosystem.
d124 2
a125 3
RSA_PKCS1_SSLeay(), RSA_PKCS1_RSAref(), RSA_PKCS1_null_method(),
RSA_get_default_openssl_method() and RSA_get_method() return pointers to
the respective RSA_METHODs.
d154 1
a154 1
rather than B<DH_METHOD>s during development of OpenSSL 0.9.6.
@


1.2
log
@OpenSSL 0.9.5a merge
@
text
@d7 1
a7 1
RSA_PKCS1_null_method, RSA_flags, RSA_new_method - select RSA method
d12 1
d14 1
a14 1
 void RSA_set_default_method(RSA_METHOD *meth);
d16 1
a16 1
 RSA_METHOD *RSA_get_default_method(void);
d18 1
a18 1
 RSA_METHOD *RSA_set_method(RSA *rsa, RSA_METHOD *meth);
d30 1
a30 1
 RSA *RSA_new_method(RSA_METHOD *method);
d50 6
a55 2
RSA_set_default_method() makes B<meth> the default method for all B<RSA>
structures created later.
d57 2
a58 2
RSA_get_default_method() returns a pointer to the current default
method.
d60 1
a60 1
RSA_set_method() selects B<meth> for all operations using the key
d63 2
a64 2
RSA_get_method() returns a pointer to the method currently selected
for B<rsa>.
d68 3
a70 3
RSA_new_method() allocates and initializes an B<RSA> structure so that
B<method> will be used for the RSA operations. If B<method> is B<NULL>,
the default method is used.
d136 2
a137 2
RSA_get_default_method() and RSA_get_method() return pointers to the
respective B<RSA_METHOD>s.
d139 1
a139 1
RSA_set_default_method() returns no value.
d141 10
a150 6
RSA_set_method() returns a pointer to the B<RSA_METHOD> previously
associated with B<rsa>.

RSA_new_method() returns B<NULL> and sets an error code that can be
obtained by L<ERR_get_error(3)|ERR_get_error(3)> if the allocation fails. Otherwise it
returns a pointer to the newly allocated structure.
d162 5
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d90 2
a91 1
     /* compute r0 = r0 ^ I mod rsa->n. May be NULL */
d94 1
a94 1
     /* compute r = a ^ p mod m. May be NULL */
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d6 2
a7 2
RSA_get_method, RSA_PKCS1_SSLeay,
RSA_null_method, RSA_flags, RSA_new_method - select RSA method
a11 1
 #include <openssl/engine.h>
d13 1
a13 1
 void RSA_set_default_openssl_method(RSA_METHOD *meth);
d15 1
a15 1
 RSA_METHOD *RSA_get_default_openssl_method(void);
d17 1
a17 1
 int RSA_set_method(RSA *rsa, ENGINE *engine);
d23 2
d29 1
a29 1
 RSA *RSA_new_method(ENGINE *engine);
d37 11
a47 2
Initially, the default is to use the OpenSSL internal implementation.
RSA_PKCS1_SSLeay() returns a pointer to that method.
d49 2
a50 6
RSA_set_default_openssl_method() makes B<meth> the default method for all B<RSA>
structures created later. B<NB:> This is true only whilst the default engine
for RSA operations remains as "openssl". ENGINEs provide an
encapsulation for implementations of one or more algorithms at a time, and all
the RSA functions mentioned here operate within the scope of the default
"openssl" engine.
d52 2
a53 2
RSA_get_default_openssl_method() returns a pointer to the current default
method for the "openssl" engine.
d55 1
a55 1
RSA_set_method() selects B<engine> for all operations using the key
d58 2
a59 2
RSA_get_method() returns a pointer to the RSA_METHOD from the currently
selected ENGINE for B<rsa>.
d63 3
a65 3
RSA_new_method() allocates and initializes an RSA structure so that
B<engine> will be used for the RSA operations. If B<engine> is NULL,
the default engine for RSA operations is used.
d90 1
a90 2
     /* compute r0 = r0 ^ I mod rsa->n (May be NULL for some
                                        implementations) */
d93 1
a93 1
     /* compute r = a ^ p mod m (May be NULL for some implementations) */
d129 12
a140 15
RSA_PKCS1_SSLeay(), RSA_PKCS1_null_method(), RSA_get_default_openssl_method()
and RSA_get_method() return pointers to the respective RSA_METHODs.

RSA_set_default_openssl_method() returns no value.

RSA_set_method() selects B<engine> as the engine that will be responsible for
all operations using the structure B<rsa>. If this function completes successfully,
then the B<rsa> structure will have its own functional reference of B<engine>, so
the caller should remember to free their own reference to B<engine> when they are
finished with it. NB: An ENGINE's RSA_METHOD can be retrieved (or set) by
ENGINE_get_RSA() or ENGINE_set_RSA().

RSA_new_method() returns NULL and sets an error code that can be
obtained by L<ERR_get_error(3)|ERR_get_error(3)> if the allocation fails. Otherwise
it returns a pointer to the newly allocated structure.
a151 5

RSA_set_default_openssl_method() and RSA_get_default_openssl_method()
replaced RSA_set_default_method() and RSA_get_default_method() respectively,
and RSA_set_method() and RSA_new_method() were altered to use B<ENGINE>s
rather than B<RSA_METHOD>s during development of OpenSSL 0.9.6.
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d14 1
a14 1
 void RSA_set_default_method(const RSA_METHOD *meth);
d16 1
a16 1
 RSA_METHOD *RSA_get_default_method(void);
d18 1
a18 1
 int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);
d20 1
a20 1
 RSA_METHOD *RSA_get_method(const RSA *rsa);
d26 1
a26 1
 int RSA_flags(const RSA *rsa);
d33 2
a34 31
operations. By modifying the method, alternative implementations such as
hardware accelerators may be used. IMPORTANT: See the NOTES section for
important information about how these RSA API functions are affected by the
use of B<ENGINE> API calls.

Initially, the default RSA_METHOD is the OpenSSL internal implementation,
as returned by RSA_PKCS1_SSLeay().

RSA_set_default_method() makes B<meth> the default method for all RSA
structures created later. B<NB>: This is true only whilst no ENGINE has
been set as a default for RSA, so this function is no longer recommended.

RSA_get_default_method() returns a pointer to the current default
RSA_METHOD. However, the meaningfulness of this result is dependant on
whether the ENGINE API is being used, so this function is no longer 
recommended.

RSA_set_method() selects B<meth> to perform all operations using the key
B<rsa>. This will replace the RSA_METHOD used by the RSA key and if the
previous method was supplied by an ENGINE, the handle to that ENGINE will
be released during the change. It is possible to have RSA keys that only
work with certain RSA_METHOD implementations (eg. from an ENGINE module
that supports embedded hardware-protected keys), and in such cases
attempting to change the RSA_METHOD for the key can have unexpected
results.

RSA_get_method() returns a pointer to the RSA_METHOD being used by B<rsa>.
This method may or may not be supplied by an ENGINE implementation, but if
it is, the return value can only be guaranteed to be valid as long as the
RSA key itself is valid and does not have its implementation changed by
RSA_set_method().
d36 20
a55 2
RSA_flags() returns the B<flags> that are set for B<rsa>'s current
RSA_METHOD. See the BUGS section.
d58 2
a59 3
B<engine> will be used for the RSA operations. If B<engine> is NULL, the
default ENGINE for RSA operations is used, and if no default ENGINE is set,
the RSA_METHOD controlled by RSA_set_default_method() is used.
d124 1
a124 1
RSA_PKCS1_SSLeay(), RSA_PKCS1_null_method(), RSA_get_default_method()
d127 1
a127 1
RSA_set_default_method() returns no value.
d129 6
a134 7
RSA_set_method() returns a pointer to the old RSA_METHOD implementation
that was replaced. However, this return value should probably be ignored
because if it was supplied by an ENGINE, the pointer could be invalidated
at any time if the ENGINE is unloaded (in fact it could be unloaded as a
result of the RSA_set_method() function releasing its handle to the
ENGINE). For this reason, the return type may be replaced with a B<void>
declaration in a future release.
d136 2
a137 2
RSA_new_method() returns NULL and sets an error code that can be obtained
by L<ERR_get_error(3)|ERR_get_error(3)> if the allocation fails. Otherwise
a139 22
=head1 NOTES

As of version 0.9.7, RSA_METHOD implementations are grouped together with
other algorithmic APIs (eg. DSA_METHOD, EVP_CIPHER, etc) into B<ENGINE>
modules. If a default ENGINE is specified for RSA functionality using an
ENGINE API function, that will override any RSA defaults set using the RSA
API (ie.  RSA_set_default_method()). For this reason, the ENGINE API is the
recommended way to control default implementations for use in RSA and other
cryptographic algorithms.

=head1 BUGS

The behaviour of RSA_flags() is a mis-feature that is left as-is for now
to avoid creating compatibility problems. RSA functionality, such as the
encryption functions, are controlled by the B<flags> value in the RSA key
itself, not by the B<flags> value in the RSA_METHOD attached to the RSA key
(which is what this function returns). If the flags element of an RSA key
is changed, the changes will be honoured by RSA functionality but will not
be reflected in the return value of the RSA_flags() function - in effect
RSA_flags() behaves more like an RSA_default_flags() function (which does
not currently exist).

d152 3
a154 9
replaced RSA_set_default_method() and RSA_get_default_method()
respectively, and RSA_set_method() and RSA_new_method() were altered to use
B<ENGINE>s rather than B<RSA_METHOD>s during development of the engine
version of OpenSSL 0.9.6. For 0.9.7, the handling of defaults in the ENGINE
API was restructured so that this change was reversed, and behaviour of the
other functions resembled more closely the previous behaviour. The
behaviour of defaults in the ENGINE API now transparently overrides the
behaviour of defaults in the RSA API without requiring changing these
function prototypes.
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d6 2
a7 2
RSA_get_method, RSA_PKCS1_SSLeay, RSA_null_method, RSA_flags,
RSA_new_method - select RSA method
d12 1
d28 1
a28 1
 RSA *RSA_new_method(RSA_METHOD *method);
a71 6

RSA_flags() returns the B<flags> that are set for B<rsa>'s current method.

RSA_new_method() allocates and initializes an B<RSA> structure so that
B<method> will be used for the RSA operations. If B<method> is B<NULL>,
the default method is used.
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d45 1
a45 1
RSA_METHOD. However, the meaningfulness of this result is dependent on
@


