head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2016.11.05.13.36.33;	author schwarze;	state dead;
branches;
next	1.5;
commitid	iozMFm2hiM7VZOmt;

1.5
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.31;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.03.19.27.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.13.01;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.17;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.51.50;	author markus;	state Exp;
branches;
next	;


desc
@@


1.6
log
@convert the remaining manual pages from pod to mdoc
@
text
@=pod

=head1 NAME

dsa - Digital Signature Algorithm

=head1 SYNOPSIS

 #include <openssl/dsa.h>
 #include <openssl/engine.h>

 DSA *	DSA_new(void);
 void	DSA_free(DSA *dsa);

 int	DSA_size(const DSA *dsa);

 DSA *	DSA_generate_parameters(int bits, unsigned char *seed,
                int seed_len, int *counter_ret, unsigned long *h_ret,
		void (*callback)(int, int, void *), void *cb_arg);

 DH *	DSA_dup_DH(const DSA *r);

 int	DSA_generate_key(DSA *dsa);

 int	DSA_sign(int dummy, const unsigned char *dgst, int len,
		unsigned char *sigret, unsigned int *siglen, DSA *dsa);
 int	DSA_sign_setup(DSA *dsa, BN_CTX *ctx, BIGNUM **kinvp,
                BIGNUM **rp);
 int	DSA_verify(int dummy, const unsigned char *dgst, int len,
		const unsigned char *sigbuf, int siglen, DSA *dsa);

 void DSA_set_default_method(const DSA_METHOD *meth);
 const DSA_METHOD *DSA_get_default_method(void);
 int DSA_set_method(DSA *dsa, const DSA_METHOD *meth);
 DSA *DSA_new_method(ENGINE *engine);
 const DSA_METHOD *DSA_OpenSSL(void);

 int DSA_get_ex_new_index(long argl, char *argp, int (*new_func)(),
	     int (*dup_func)(), void (*free_func)());
 int DSA_set_ex_data(DSA *d, int idx, char *arg);
 char *DSA_get_ex_data(DSA *d, int idx);

 DSA_SIG *DSA_SIG_new(void);
 void	DSA_SIG_free(DSA_SIG *a);
 int	i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
 DSA_SIG *d2i_DSA_SIG(DSA_SIG **v, unsigned char **pp, long length);

 DSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
 int	DSA_do_verify(const unsigned char *dgst, int dgst_len,
	     DSA_SIG *sig, DSA *dsa);

 DSA *	d2i_DSAPublicKey(DSA **a, unsigned char **pp, long length);
 DSA *	d2i_DSAPrivateKey(DSA **a, unsigned char **pp, long length);
 DSA * 	d2i_DSAparams(DSA **a, unsigned char **pp, long length);
 int	i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
 int 	i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
 int	i2d_DSAparams(const DSA *a,unsigned char **pp);

 int	DSAparams_print(BIO *bp, const DSA *x);
 int	DSAparams_print_fp(FILE *fp, const DSA *x);
 int	DSA_print(BIO *bp, const DSA *x, int off);
 int	DSA_print_fp(FILE *bp, const DSA *x, int off);

=head1 DESCRIPTION

These functions implement the Digital Signature Algorithm (DSA).  The
generation of shared DSA parameters is described in
L<DSA_generate_parameters(3)|DSA_generate_parameters(3)>;
L<DSA_generate_key(3)|DSA_generate_key(3)> describes how to
generate a signature key. Signature generation and verification are
described in L<DSA_sign(3)|DSA_sign(3)>.

The B<DSA> structure consists of several BIGNUM components.

 struct
        {
        BIGNUM *p;		// prime number (public)
        BIGNUM *q;		// 160-bit subprime, q | p-1 (public)
        BIGNUM *g;		// generator of subgroup (public)
        BIGNUM *priv_key;	// private key x
        BIGNUM *pub_key;	// public key y = g^x
        // ...
        }
 DSA;

In public keys, B<priv_key> is NULL.

Note that DSA keys may use non-standard B<DSA_METHOD> implementations,
either directly or by the use of B<ENGINE> modules. In some cases (eg. an
ENGINE providing support for hardware-embedded keys), these BIGNUM values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using DSA
structure elements directly and instead use API functions to query or
modify keys.

=head1 CONFORMING TO

US Federal Information Processing Standard FIPS 186 (Digital Signature
Standard, DSS), ANSI X9.30

=head1 SEE ALSO

L<bn(3)|bn(3)>, L<dh(3)|dh(3)>, L<err(3)|err(3)>, L<rand(3)|rand(3)>,
L<rsa(3)|rsa(3)>, L<sha(3)|sha(3)>, L<engine(3)|engine(3)>,
L<DSA_new(3)|DSA_new(3)>,
L<DSA_size(3)|DSA_size(3)>,
L<DSA_generate_parameters(3)|DSA_generate_parameters(3)>,
L<DSA_dup_DH(3)|DSA_dup_DH(3)>,
L<DSA_generate_key(3)|DSA_generate_key(3)>,
L<DSA_sign(3)|DSA_sign(3)>, L<DSA_set_method(3)|DSA_set_method(3)>,
L<DSA_get_ex_new_index(3)|DSA_get_ex_new_index(3)>,
L<RSA_print(3)|RSA_print(3)>

=cut
@


1.5
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@@


1.4
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d104 2
a105 1
L<rsa(3)|rsa(3)>, L<SHA1(3)|SHA1(3)>, L<DSA_new(3)|DSA_new(3)>,
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d15 1
a15 1
 int	DSA_size(DSA *dsa);
d21 1
a21 1
 DH *	DSA_dup_DH(DSA *r);
d30 1
a30 1
		unsigned char *sigbuf, int siglen, DSA *dsa);
d32 3
a34 3
 void DSA_set_default_openssl_method(DSA_METHOD *meth);
 DSA_METHOD *DSA_get_default_openssl_method(void);
 int DSA_set_method(DSA *dsa, ENGINE *engine);
d36 1
a36 1
 DSA_METHOD *DSA_OpenSSL(void);
d45 1
a45 1
 int	i2d_DSA_SIG(DSA_SIG *a, unsigned char **pp);
d55 8
a62 8
 int	i2d_DSAPublicKey(DSA *a, unsigned char **pp);
 int 	i2d_DSAPrivateKey(DSA *a, unsigned char **pp);
 int	i2d_DSAparams(DSA *a,unsigned char **pp);

 int	DSAparams_print(BIO *bp, DSA *x);
 int	DSAparams_print_fp(FILE *fp, DSA *x);
 int	DSA_print(BIO *bp, DSA *x, int off);
 int	DSA_print_fp(FILE *bp, DSA *x, int off);
d87 8
@


1.2
log
@correct Xr to where we actually install the man pages
@
text
@d10 1
d32 4
a35 4
 void DSA_set_default_method(DSA_METHOD *meth);
 DSA_METHOD *DSA_get_default_method(void);
 DSA_METHOD *DSA_set_method(DSA *dsa, DSA_METHOD *meth);
 DSA *DSA_new_method(DSA_METHOD *meth);
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d95 1
a95 1
L<rsa(3)|rsa(3)>, L<sha(3)|sha(3)>, L<DSA_new(3)|DSA_new(3)>,
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a9 1
 #include <openssl/engine.h>
d31 4
a34 4
 void DSA_set_default_openssl_method(DSA_METHOD *meth);
 DSA_METHOD *DSA_get_default_openssl_method(void);
 int DSA_set_method(DSA *dsa, ENGINE *engine);
 DSA *DSA_new_method(ENGINE *engine);
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d15 1
a15 1
 int	DSA_size(const DSA *dsa);
d21 1
a21 1
 DH *	DSA_dup_DH(const DSA *r);
d30 1
a30 1
		const unsigned char *sigbuf, int siglen, DSA *dsa);
d32 3
a34 3
 void DSA_set_default_method(const DSA_METHOD *meth);
 const DSA_METHOD *DSA_get_default_method(void);
 int DSA_set_method(DSA *dsa, const DSA_METHOD *meth);
d36 1
a36 1
 const DSA_METHOD *DSA_OpenSSL(void);
d45 1
a45 1
 int	i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
d55 8
a62 8
 int	i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
 int 	i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
 int	i2d_DSAparams(const DSA *a,unsigned char **pp);

 int	DSAparams_print(BIO *bp, const DSA *x);
 int	DSAparams_print_fp(FILE *fp, const DSA *x);
 int	DSA_print(BIO *bp, const DSA *x, int off);
 int	DSA_print_fp(FILE *bp, const DSA *x, int off);
a87 8
Note that DSA keys may use non-standard B<DSA_METHOD> implementations,
either directly or by the use of B<ENGINE> modules. In some cases (eg. an
ENGINE providing support for hardware-embedded keys), these BIGNUM values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using DSA
structure elements directly and instead use API functions to query or
modify keys.

d96 1
a96 2
L<rsa(3)|rsa(3)>, L<sha(3)|sha(3)>, L<engine(3)|engine(3)>,
L<DSA_new(3)|DSA_new(3)>,
@


