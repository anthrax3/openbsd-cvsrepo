head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2016.11.04.10.17.17;	author schwarze;	state dead;
branches;
next	1.7;
commitid	ZjQW3LDCU7N0oPMv;

1.7
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.10.16.31.56;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.19;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.31;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.15.06.18.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.13.02;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.19;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.43.27;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.12.20.51.56;	author markus;	state Exp;
branches;
next	;


desc
@@


1.8
log
@convert RSA manuals from pod to mdoc
@
text
@=pod

=head1 NAME

rsa - RSA public key cryptosystem

=head1 SYNOPSIS

 #include <openssl/rsa.h>
 #include <openssl/engine.h>

 RSA * RSA_new(void);
 void RSA_free(RSA *rsa);

 int RSA_public_encrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa, int padding);
 int RSA_private_decrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa, int padding);
 int RSA_private_encrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa,int padding);
 int RSA_public_decrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa,int padding);

 int RSA_sign(int type, unsigned char *m, unsigned int m_len,
    unsigned char *sigret, unsigned int *siglen, RSA *rsa);
 int RSA_verify(int type, unsigned char *m, unsigned int m_len,
    unsigned char *sigbuf, unsigned int siglen, RSA *rsa);

 int RSA_size(const RSA *rsa);

 RSA *RSA_generate_key(int num, unsigned long e,
    void (*callback)(int,int,void *), void *cb_arg);

 int RSA_check_key(RSA *rsa);

 int RSA_blinding_on(RSA *rsa, BN_CTX *ctx);
 void RSA_blinding_off(RSA *rsa);

 void RSA_set_default_method(const RSA_METHOD *meth);
 const RSA_METHOD *RSA_get_default_method(void);
 int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);
 const RSA_METHOD *RSA_get_method(const RSA *rsa);
 RSA_METHOD *RSA_PKCS1_SSLeay(void);
 RSA_METHOD *RSA_null_method(void);
 int RSA_flags(const RSA *rsa);
 RSA *RSA_new_method(ENGINE *engine);

 int RSA_print(BIO *bp, RSA *x, int offset);
 int RSA_print_fp(FILE *fp, RSA *x, int offset);

 int RSA_get_ex_new_index(long argl, char *argp, int (*new_func)(),
    int (*dup_func)(), void (*free_func)());
 int RSA_set_ex_data(RSA *r,int idx,char *arg);
 char *RSA_get_ex_data(RSA *r, int idx);

 int RSA_sign_ASN1_OCTET_STRING(int dummy, unsigned char *m,
    unsigned int m_len, unsigned char *sigret, unsigned int *siglen,
    RSA *rsa);
 int RSA_verify_ASN1_OCTET_STRING(int dummy, unsigned char *m,
    unsigned int m_len, unsigned char *sigbuf, unsigned int siglen,
    RSA *rsa);

=head1 DESCRIPTION

These functions implement RSA public key encryption and signatures
as defined in PKCS #1 v2.0 [RFC 2437].

The B<RSA> structure consists of several BIGNUM components. It can
contain public as well as private RSA keys:

 struct
        {
        BIGNUM *n;		// public modulus
        BIGNUM *e;		// public exponent
        BIGNUM *d;		// private exponent
        BIGNUM *p;		// secret prime factor
        BIGNUM *q;		// secret prime factor
        BIGNUM *dmp1;		// d mod (p-1)
        BIGNUM *dmq1;		// d mod (q-1)
        BIGNUM *iqmp;		// q^-1 mod p
	// ...
        };
 RSA

In public keys, the private exponent and the related secret values are
B<NULL>.

B<p>, B<q>, B<dmp1>, B<dmq1> and B<iqmp> may be B<NULL> in private
keys, but the RSA operations are much faster when these values are
available.

Note that RSA keys may use non-standard B<RSA_METHOD> implementations,
either directly or by the use of B<ENGINE> modules. In some cases (eg. an
ENGINE providing support for hardware-embedded keys), these BIGNUM values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using RSA
structure elements directly and instead use API functions to query or
modify keys.

=head1 CONFORMING TO

SSL, PKCS #1 v2.0

=head1 PATENTS

RSA was covered by a US patent which expired in September 2000.

=head1 SEE ALSO

L<rsa(1)|rsa(1)>, L<bn(3)|bn(3)>, L<dsa(3)|dsa(3)>, L<dh(3)|dh(3)>,
L<rand(3)|rand(3)>, L<engine(3)|engine(3)>, L<RSA_new(3)|RSA_new(3)>,
L<RSA_public_encrypt(3)|RSA_public_encrypt(3)>,
L<RSA_sign(3)|RSA_sign(3)>, L<RSA_size(3)|RSA_size(3)>,
L<RSA_generate_key(3)|RSA_generate_key(3)>,
L<RSA_check_key(3)|RSA_check_key(3)>,
L<RSA_blinding_on(3)|RSA_blinding_on(3)>,
L<RSA_set_method(3)|RSA_set_method(3)>, L<RSA_print(3)|RSA_print(3)>,
L<RSA_get_ex_new_index(3)|RSA_get_ex_new_index(3)>,
L<RSA_private_encrypt(3)|RSA_private_encrypt(3)>,
L<RSA_sign_ASN1_OCTET_STRING(3)|RSA_sign_ASN1_OCTET_STRING(3)>,
L<RSA_padding_add_PKCS1_type_1(3)|RSA_padding_add_PKCS1_type_1(3)>

=cut
@


1.7
log
@Remove trailing whitespace.

fine jmc@@
@
text
@@


1.6
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d21 1
a21 1
 int RSA_public_decrypt(int flen, unsigned char *from, 
d121 1
a121 1
L<RSA_padding_add_PKCS1_type_1(3)|RSA_padding_add_PKCS1_type_1(3)> 
@


1.5
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d19 4
d29 1
a29 1
 int RSA_size(RSA *rsa);
d39 4
a42 4
 void RSA_set_default_openssl_method(RSA_METHOD *meth);
 RSA_METHOD *RSA_get_default_openssl_method(void);
 int RSA_set_method(RSA *rsa, ENGINE *engine);
 RSA_METHOD *RSA_get_method(RSA *rsa);
d45 1
a45 1
 int RSA_flags(RSA *rsa);
a55 5
 int RSA_private_encrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa,int padding);
 int RSA_public_decrypt(int flen, unsigned char *from, 
    unsigned char *to, RSA *rsa,int padding);

d92 8
d111 1
a111 1
L<rand(3)|rand(3)>, L<RSA_new(3)|RSA_new(3)>,
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d113 1
a113 1
L<RSA_sign_ASN_OCTET_STRING(3)|RSA_sign_ASN_OCTET_STRING(3)>,
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@a39 1
 RSA_METHOD *RSA_PKCS1_RSAref(void);
@


1.2
log
@OpenSSL 0.9.5a merge
@
text
@d10 1
d35 3
a37 3
 void RSA_set_default_method(RSA_METHOD *meth);
 RSA_METHOD *RSA_get_default_method(void);
 RSA_METHOD *RSA_set_method(RSA *rsa, RSA_METHOD *meth);
d43 1
a43 1
 RSA *RSA_new_method(RSA_METHOD *method);
d100 1
a100 1
RSA is covered by a US patent which expires in September 2000.
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d89 3
a91 2
B<dmp1>, B<dmq1> and B<iqmp> may be B<NULL> in private keys, but the
RSA operations are much faster when these values are available.
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a9 1
 #include <openssl/engine.h>
d34 3
a36 3
 void RSA_set_default_openssl_method(RSA_METHOD *meth);
 RSA_METHOD *RSA_get_default_openssl_method(void);
 int RSA_set_method(RSA *rsa, ENGINE *engine);
d39 1
d42 1
a42 1
 RSA *RSA_new_method(ENGINE *engine);
d89 2
a90 3
B<p>, B<q>, B<dmp1>, B<dmq1> and B<iqmp> may be B<NULL> in private
keys, but the RSA operations are much faster when these values are
available.
d98 1
a98 1
RSA was covered by a US patent which expired in September 2000.
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d113 1
a113 1
L<RSA_sign_ASN1_OCTET_STRING(3)|RSA_sign_ASN1_OCTET_STRING(3)>,
@


1.1.1.3
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@a18 4
 int RSA_private_encrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa,int padding);
 int RSA_public_decrypt(int flen, unsigned char *from, 
    unsigned char *to, RSA *rsa,int padding);
d25 1
a25 1
 int RSA_size(const RSA *rsa);
d35 4
a38 4
 void RSA_set_default_method(const RSA_METHOD *meth);
 const RSA_METHOD *RSA_get_default_method(void);
 int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);
 const RSA_METHOD *RSA_get_method(const RSA *rsa);
d41 1
a41 1
 int RSA_flags(const RSA *rsa);
d52 5
a92 8
Note that RSA keys may use non-standard B<RSA_METHOD> implementations,
either directly or by the use of B<ENGINE> modules. In some cases (eg. an
ENGINE providing support for hardware-embedded keys), these BIGNUM values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using RSA
structure elements directly and instead use API functions to query or
modify keys.

d104 1
a104 1
L<rand(3)|rand(3)>, L<engine(3)|engine(3)>, L<RSA_new(3)|RSA_new(3)>,
@


