head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2016.11.03.09.35.34;	author schwarze;	state dead;
branches;
next	1.10;
commitid	3WfE7ZbXXRiIqemG;

1.10
date	2014.07.10.13.08.58;	author miod;	state Exp;
branches;
next	1.9;
commitid	x57mQDu0Rgvs2ML3;

1.9
date	2014.07.09.17.36.58;	author miod;	state Exp;
branches;
next	1.8;
commitid	brDBcUcQnqLshLYA;

1.8
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.29;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.27;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.16.04.59.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.15.06.18.47;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.18;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.51.44;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.36.15;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.23;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.49;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@convert EVP manuals from pod to mdoc
@
text
@=pod

=head1 NAME

EVP_SealInit, EVP_SealUpdate, EVP_SealFinal - EVP envelope encryption

=head1 SYNOPSIS

 #include <openssl/evp.h>

 int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
                  unsigned char **ek, int *ekl, unsigned char *iv,
                  EVP_PKEY **pubk, int npubk);
 int EVP_SealUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
         int *outl, unsigned char *in, int inl);
 int EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
         int *outl);

=head1 DESCRIPTION

The EVP envelope routines are a high level interface to envelope
encryption. They generate a random key and IV (if required) then
"envelope" it by using public key encryption. Data can then be
encrypted using this key.

EVP_SealInit() initializes a cipher context B<ctx> for encryption
with cipher B<type> using a random secret key and IV. B<type> is normally
supplied by a function such as EVP_aes_256_cbc(). The secret key is encrypted
using one or more public keys, this allows the same encrypted data to be
decrypted using any of the corresponding private keys. B<ek> is an array of
buffers where the public key encrypted secret key will be written, each buffer
must contain enough room for the corresponding encrypted key: that is
B<ek[i]> must have room for B<EVP_PKEY_size(pubk[i])> bytes. The actual
size of each encrypted secret key is written to the array B<ekl>. B<pubk> is
an array of B<npubk> public keys.

The B<iv> parameter is a buffer where the generated IV is written to. It must
contain enough room for the corresponding cipher's IV, as determined by (for
example) EVP_CIPHER_iv_length(type).

If the cipher does not require an IV then the B<iv> parameter is ignored
and can be B<NULL>.

EVP_SealUpdate() and EVP_SealFinal() have exactly the same properties
as the EVP_EncryptUpdate() and EVP_EncryptFinal() routines, as
documented on the L<EVP_EncryptInit(3)|EVP_EncryptInit(3)> manual
page.

=head1 RETURN VALUES

EVP_SealInit() returns 0 on error or B<npubk> if successful.

EVP_SealUpdate() and EVP_SealFinal() return 1 for success and 0 for
failure.

=head1 NOTES

The public key must be RSA because it is the only OpenSSL public key
algorithm that supports key transport.

Envelope encryption is the usual method of using public key encryption
on large amounts of data, this is because public key encryption is slow
but symmetric encryption is fast. So symmetric encryption is used for
bulk encryption and the small random symmetric key used is transferred
using public key encryption.

It is possible to call EVP_SealInit() twice in the same way as
EVP_EncryptInit(). The first call should have B<npubk> set to 0
and (after setting any cipher parameters) it should be called again
with B<type> set to NULL.

=head1 SEE ALSO

L<evp(3)|evp(3)>, L<rand(3)|rand(3)>,
L<EVP_EncryptInit(3)|EVP_EncryptInit(3)>,
L<EVP_OpenInit(3)|EVP_OpenInit(3)>

=head1 HISTORY

EVP_SealFinal() did not return a value before OpenSSL 0.9.7.

=cut
@


1.10
log
@Attempt to (incompletely) document EVP_aes_*().

When EVP_des_cbc() was suggested, suggest EVP_aes_256_cbc() instead.

Remove mention of EVP_des_ede3_cbc() being the algorithm of choice for S/MIME.

Don't mention US-export limited RC2 algorithms, you'd better not know about
them.
@
text
@@


1.9
log
@Remove mention that the PRNG needs to be seeded before invoking some
functions.
@
text
@d28 1
a28 1
supplied by a function such as EVP_des_cbc(). The secret key is encrypted
@


1.8
log
@Remove trailing whitespace.

fine jmc@@
@
text
@a57 3
Because a random secret key is generated the random number generator
must be seeded before calling EVP_SealInit().

@


1.7
log
@resolve conflicts
@
text
@d45 1
a45 1
as the EVP_EncryptUpdate() and EVP_EncryptFinal() routines, as 
d47 1
a47 1
page. 
@


1.6
log
@resolve conflicts
@
text
@d11 3
a13 3
 int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, 
		unsigned char **ek, int *ekl, unsigned char *iv,
		EVP_PKEY **pubk, int npubk);
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d11 3
a13 2
 int EVP_SealInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *type, unsigned char **ek,
		int *ekl, unsigned char *iv,EVP_PKEY **pubk, int npubk);
@


1.4
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d21 3
a23 3
encryption. They generate a random key and then "envelope" it by
using public key encryption. Data can then be encrypted using this
key.
d26 6
a31 7
with cipher B<type> using a random secret key and IV supplied in
the B<iv> parameter. B<type> is normally supplied by a function such
as EVP_des_cbc(). The secret key is encrypted using one or more public
keys, this allows the same encrypted data to be decrypted using any
of the corresponding private keys. B<ek> is an array of buffers where
the public key encrypted secret key will be written, each buffer must
contain enough room for the corresponding encrypted key: that is
d35 7
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d76 2
@


1.2
log
@link to correct renamed pages
@
text
@d13 1
a13 1
 void EVP_SealUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
d15 1
a15 1
 void EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
d25 1
a25 1
EVP_SealInit() initialises a cipher context B<ctx> for encryption
d44 1
a44 1
EVP_SealInit() returns -1 on error or B<npubk> if successful.
d46 2
a47 1
EVP_SealUpdate() and EVP_SealFinal() do not return values.
d63 5
d70 1
a70 1
L<evp(3)|evp(3)>,
@


1.1
log
@OpenSSL 0.9.5a merge
@
text
@d64 1
a64 1
L<evp(3)|evp(3)>,L<rand(3)|rand(3)>
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d13 1
a13 1
 int EVP_SealUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
d15 1
a15 1
 int EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
d25 1
a25 1
EVP_SealInit() initializes a cipher context B<ctx> for encryption
d44 1
a44 1
EVP_SealInit() returns 0 on error or B<npubk> if successful.
d46 1
a46 2
EVP_SealUpdate() and EVP_SealFinal() return 1 for success and 0 for
failure.
a61 5
It is possible to call EVP_SealInit() twice in the same way as
EVP_EncryptInit(). The first call should have B<npubk> set to 0
and (after setting any cipher parameters) it should be called again
with B<type> set to NULL.

d64 1
a64 1
L<evp(3)|evp(3)>, L<rand(3)|rand(3)>,
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@a75 2
EVP_SealFinal() did not return a value before OpenSSL 0.9.7.

@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d21 3
a23 3
encryption. They generate a random key and IV (if required) then
"envelope" it by using public key encryption. Data can then be
encrypted using this key.
d26 7
a32 6
with cipher B<type> using a random secret key and IV. B<type> is normally
supplied by a function such as EVP_des_cbc(). The secret key is encrypted
using one or more public keys, this allows the same encrypted data to be
decrypted using any of the corresponding private keys. B<ek> is an array of
buffers where the public key encrypted secret key will be written, each buffer
must contain enough room for the corresponding encrypted key: that is
a35 7

The B<iv> parameter is a buffer where the generated IV is written to. It must
contain enough room for the corresponding cipher's IV, as determined by (for
example) EVP_CIPHER_iv_length(type).

If the cipher does not require an IV then the B<iv> parameter is ignored
and can be B<NULL>.
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d11 2
a12 3
 int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, 
		unsigned char **ek, int *ekl, unsigned char *iv,
		EVP_PKEY **pubk, int npubk);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d11 3
a13 3
 int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
                  unsigned char **ek, int *ekl, unsigned char *iv,
                  EVP_PKEY **pubk, int npubk);
@


