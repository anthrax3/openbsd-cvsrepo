head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2016.11.02.11.57.56;	author schwarze;	state dead;
branches;
next	1.10;
commitid	8E9xtEJx9H3iwBNH;

1.10
date	2016.03.12.21.31.22;	author mmcc;	state Exp;
branches;
next	1.9;
commitid	KhDV1S6CZAu8cbBc;

1.9
date	2015.11.11.22.14.40;	author jmc;	state Exp;
branches;
next	1.8;
commitid	eNNq8UNxWW0rsWWg;

1.8
date	2014.05.04.22.26.33;	author jim;	state Exp;
branches;
next	1.7;

1.7
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.19;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.26;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.15.06.18.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.57;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.17;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.51.40;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.49;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@convert DSA and EC manuals from pod to mdoc
@
text
@=pod

=head1 NAME

DSA_set_default_method, DSA_get_default_method,
DSA_set_method, DSA_new_method, DSA_OpenSSL,
DSA_set_default_openssl_method, DSA_get_default_openssl_method
- select DSA method

=head1 SYNOPSIS

 #include <openssl/dsa.h>
 #include <openssl/engine.h>

 void DSA_set_default_method(const DSA_METHOD *meth);

 const DSA_METHOD *DSA_get_default_method(void);

 int DSA_set_method(DSA *dsa, const DSA_METHOD *meth);

 DSA *DSA_new_method(ENGINE *engine);

 DSA_METHOD *DSA_OpenSSL(void);

=head1 DESCRIPTION

A B<DSA_METHOD> specifies the functions that OpenSSL uses for DSA
operations. By modifying the method, alternative implementations
such as hardware accelerators may be used. IMPORTANT: See the NOTES section for
important information about how these DSA API functions are affected by the use
of B<ENGINE> API calls.

Initially, the default DSA_METHOD is the OpenSSL internal implementation,
as returned by DSA_OpenSSL().

DSA_set_default_method() makes B<meth> the default method for all DSA
structures created later. B<NB>: This is true only whilst no ENGINE has
been set as a default for DSA, so this function is no longer recommended.

DSA_get_default_method() returns a pointer to the current default
DSA_METHOD. However, the meaningfulness of this result is dependent on
whether the ENGINE API is being used, so this function is no longer
recommended.

DSA_set_method() selects B<meth> to perform all operations using the key
B<rsa>. This will replace the DSA_METHOD used by the DSA key and if the
previous method was supplied by an ENGINE, the handle to that ENGINE will
be released during the change. It is possible to have DSA keys that only
work with certain DSA_METHOD implementations (eg. from an ENGINE module
that supports embedded hardware-protected keys), and in such cases
attempting to change the DSA_METHOD for the key can have unexpected
results.

DSA_new_method() allocates and initializes a DSA structure so that B<engine>
will be used for the DSA operations. If B<engine> is NULL, the default engine
for DSA operations is used, and if no default ENGINE is set, the DSA_METHOD
controlled by DSA_set_default_method() is used.

=head1 THE DSA_METHOD STRUCTURE

struct
 {
     /* name of the implementation */
        const char *name;

     /* sign */
	DSA_SIG *(*dsa_do_sign)(const unsigned char *dgst, int dlen,
                                 DSA *dsa);

     /* pre-compute k^-1 and r */
	int (*dsa_sign_setup)(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
                                 BIGNUM **rp);

     /* verify */
	int (*dsa_do_verify)(const unsigned char *dgst, int dgst_len,
                                 DSA_SIG *sig, DSA *dsa);

     /* compute rr = a1^p1 * a2^p2 mod m (May be NULL for some
                                          implementations) */
	int (*dsa_mod_exp)(DSA *dsa, BIGNUM *rr, BIGNUM *a1, BIGNUM *p1,
                                 BIGNUM *a2, BIGNUM *p2, BIGNUM *m,
                                 BN_CTX *ctx, BN_MONT_CTX *in_mont);

     /* compute r = a ^ p mod m (May be NULL for some implementations) */
        int (*bn_mod_exp)(DSA *dsa, BIGNUM *r, BIGNUM *a,
                                 const BIGNUM *p, const BIGNUM *m,
                                 BN_CTX *ctx, BN_MONT_CTX *m_ctx);

     /* called at DSA_new */
        int (*init)(DSA *DSA);

     /* called at DSA_free */
        int (*finish)(DSA *DSA);

        int flags;

        char *app_data; /* ?? */

 } DSA_METHOD;

=head1 RETURN VALUES

DSA_OpenSSL() and DSA_get_default_method() return pointers to the respective
B<DSA_METHOD>s.

DSA_set_method() returns non-zero if the provided B<meth> was successfully set
as the method for B<dsa> (including unloading the ENGINE handle if the previous
method was supplied by an ENGINE).

DSA_new_method() returns NULL and sets an error code that can be
obtained by L<ERR_get_error(3)|ERR_get_error(3)> if the allocation
fails. Otherwise it returns a pointer to the newly allocated structure.

=head1 NOTES

As of version 0.9.7, DSA_METHOD implementations are grouped together with other
algorithmic APIs (eg. RSA_METHOD, EVP_CIPHER, etc) in B<ENGINE> modules. If a
default ENGINE is specified for DSA functionality using an ENGINE API function,
that will override any DSA defaults set using the DSA API (ie.
DSA_set_default_method()). For this reason, the ENGINE API is the recommended
way to control default implementations for use in DSA and other cryptographic
algorithms.

=head1 SEE ALSO

L<dsa(3)|dsa(3)>, L<DSA_new(3)|DSA_new(3)>

=head1 HISTORY

DSA_set_default_method(), DSA_get_default_method(), DSA_set_method(),
DSA_new_method() and DSA_OpenSSL() were added in OpenSSL 0.9.4.

DSA_set_default_openssl_method() and DSA_get_default_openssl_method() replaced
DSA_set_default_method() and DSA_get_default_method() respectively, and
DSA_set_method() and DSA_new_method() were altered to use B<ENGINE>s rather than
B<DSA_METHOD>s during development of the engine version of OpenSSL 0.9.6. For
0.9.7, the handling of defaults in the ENGINE API was restructured so that this
change was reversed, and behaviour of the other functions resembled more closely
the previous behaviour. The behaviour of defaults in the ENGINE API now
transparently overrides the behaviour of defaults in the DSA API without
requiring changing these function prototypes.

=cut
@


1.10
log
@Remove sentences in RETURN VALUES sections saying that functions with
void return types 'return no value'. This is obvious and therefore
unneccessary to mention.

We spare rewind(3)'s sentence because espie@@ pointed out that it's a
warning - the function masks a potential error.

This commit also adds a sentence to X509_free clarifying that it's
NULL-safe. This bit was discussed with doug@@.

ok martijn@@, sentiment supported by schwarze@@
@
text
@@


1.9
log
@add missing functions to NAME, or otherwise correct the mlink
entry for them;

feedback/ok schwarze
@
text
@a105 2
DSA_set_default_method() returns no value.

@


1.8
log
@Improve line wrapping for lines exceeding 80 chars.

ok jmc@@
@
text
@d6 3
a8 1
DSA_set_method, DSA_new_method, DSA_OpenSSL - select DSA method
@


1.7
log
@Remove trailing whitespace.

fine jmc@@
@
text
@d106 2
a107 2
DSA_set_method() returns non-zero if the provided B<meth> was successfully set as
the method for B<dsa> (including unloading the ENGINE handle if the previous
d120 2
a121 2
DSA_set_default_method()). For this reason, the ENGINE API is the recommended way
to control default implementations for use in DSA and other cryptographic
@


1.6
log
@resolve conflicts
@
text
@d40 1
a40 1
whether the ENGINE API is being used, so this function is no longer 
@


1.5
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d39 1
a39 1
DSA_METHOD. However, the meaningfulness of this result is dependant on
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d5 1
a5 1
DSA_set_default_openssl_method, DSA_get_default_openssl_method,
d13 1
a13 1
 void DSA_set_default_openssl_method(DSA_METHOD *meth);
d15 1
a15 1
 DSA_METHOD *DSA_get_default_openssl_method(void);
d17 1
a17 1
 int DSA_set_method(DSA *dsa, ENGINE *engine);
d27 29
a55 20
such as hardware accelerators may be used.

Initially, the default is to use the OpenSSL internal implementation.
DSA_OpenSSL() returns a pointer to that method.

DSA_set_default_openssl_method() makes B<meth> the default method for
all DSA structures created later. B<NB:> This is true only whilst the
default engine for DSA operations remains as "openssl". ENGINEs
provide an encapsulation for implementations of one or more algorithms at a
time, and all the DSA functions mentioned here operate within the scope
of the default "openssl" engine.

DSA_get_default_openssl_method() returns a pointer to the current default
method for the "openssl" engine.

DSA_set_method() selects B<engine> for all operations using the structure B<dsa>.

DSA_new_method() allocates and initializes a DSA structure so that
B<engine> will be used for the DSA operations. If B<engine> is NULL,
the default engine for DSA operations is used.
d101 2
a102 2
DSA_OpenSSL() and DSA_get_default_openssl_method() return pointers to the
respective B<DSA_METHOD>s.
d104 1
a104 1
DSA_set_default_openssl_method() returns no value.
d106 3
a108 2
DSA_set_method() returns non-zero if the ENGINE associated with B<dsa>
was successfully changed to B<engine>.
d114 10
d133 9
a141 4
DSA_set_default_openssl_method() and DSA_get_default_openssl_method()
replaced DSA_set_default_method() and DSA_get_default_method() respectively,
and DSA_set_method() and DSA_new_method() were altered to use B<ENGINE>s
rather than B<DSA_METHOD>s during development of OpenSSL 0.9.6.
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d93 1
a93 1
respective DSA_METHODs.
@


1.2
log
@OpenSSL 0.9.5a merge
@
text
@d5 2
a6 2
DSA_set_default_method, DSA_get_default_method, DSA_set_method,
DSA_new_method, DSA_OpenSSL - select RSA method
d10 2
a11 1
 #include <openssl/DSA.h>
d13 1
a13 1
 void DSA_set_default_method(DSA_METHOD *meth);
d15 1
a15 1
 DSA_METHOD *DSA_get_default_method(void);
d17 1
a17 1
 DSA_METHOD *DSA_set_method(DSA *dsa, DSA_METHOD *meth);
d19 1
a19 1
 DSA *DSA_new_method(DSA_METHOD *meth);
d32 15
a46 14
DSA_set_default_method() makes B<meth> the default method for all B<DSA>
structures created later.

DSA_get_default_method() returns a pointer to the current default
method.

DSA_set_method() selects B<meth> for all operations using the structure B<DSA>.

DSA_get_method() returns a pointer to the method currently selected
for B<DSA>.

DSA_new_method() allocates and initializes a B<DSA> structure so that
B<method> will be used for the DSA operations. If B<method> is B<NULL>,
the default method is used.
d92 2
a93 2
DSA_OpenSSL(), DSA_get_default_method() and DSA_get_method() return
pointers to the respective B<DSA_METHOD>s.
d95 1
a95 1
DSA_set_default_method() returns no value.
d97 2
a98 2
DSA_set_method() returns a pointer to the B<DSA_METHOD> previously
associated with B<dsa>.
d100 1
a100 1
DSA_new_method() returns B<NULL> and sets an error code that can be
d102 1
a102 2
fails. Otherwise it returns a pointer to the newly allocated
structure.
d112 5
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 2
a66 1
     /* compute rr = a1^p1 * a2^p2 mod m. May be NULL */
d71 1
a71 1
     /* compute r = a ^ p mod m. May be NULL */
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d5 2
a6 2
DSA_set_default_openssl_method, DSA_get_default_openssl_method,
DSA_set_method, DSA_new_method, DSA_OpenSSL - select DSA method
d10 1
a10 2
 #include <openssl/dsa.h>
 #include <openssl/engine.h>
d12 1
a12 1
 void DSA_set_default_openssl_method(DSA_METHOD *meth);
d14 1
a14 1
 DSA_METHOD *DSA_get_default_openssl_method(void);
d16 1
a16 1
 int DSA_set_method(DSA *dsa, ENGINE *engine);
d18 1
a18 1
 DSA *DSA_new_method(ENGINE *engine);
d31 14
a44 15
DSA_set_default_openssl_method() makes B<meth> the default method for
all DSA structures created later. B<NB:> This is true only whilst the
default engine for DSA operations remains as "openssl". ENGINEs
provide an encapsulation for implementations of one or more algorithms at a
time, and all the DSA functions mentioned here operate within the scope
of the default "openssl" engine.

DSA_get_default_openssl_method() returns a pointer to the current default
method for the "openssl" engine.

DSA_set_method() selects B<engine> for all operations using the structure B<dsa>.

DSA_new_method() allocates and initializes a DSA structure so that
B<engine> will be used for the DSA operations. If B<engine> is NULL,
the default engine for DSA operations is used.
d65 1
a65 2
     /* compute rr = a1^p1 * a2^p2 mod m (May be NULL for some
                                          implementations) */
d70 1
a70 1
     /* compute r = a ^ p mod m (May be NULL for some implementations) */
d89 2
a90 2
DSA_OpenSSL() and DSA_get_default_openssl_method() return pointers to the
respective B<DSA_METHOD>s.
d92 1
a92 1
DSA_set_default_openssl_method() returns no value.
d94 2
a95 2
DSA_set_method() returns non-zero if the ENGINE associated with B<dsa>
was successfully changed to B<engine>.
d97 1
a97 1
DSA_new_method() returns NULL and sets an error code that can be
d99 2
a100 1
fails. Otherwise it returns a pointer to the newly allocated structure.
a109 5

DSA_set_default_openssl_method() and DSA_get_default_openssl_method()
replaced DSA_set_default_method() and DSA_get_default_method() respectively,
and DSA_set_method() and DSA_new_method() were altered to use B<ENGINE>s
rather than B<DSA_METHOD>s during development of OpenSSL 0.9.6.
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d5 1
a5 1
DSA_set_default_method, DSA_get_default_method,
d13 1
a13 1
 void DSA_set_default_method(const DSA_METHOD *meth);
d15 1
a15 1
 const DSA_METHOD *DSA_get_default_method(void);
d17 1
a17 1
 int DSA_set_method(DSA *dsa, const DSA_METHOD *meth);
d27 20
a46 29
such as hardware accelerators may be used. IMPORTANT: See the NOTES section for
important information about how these DSA API functions are affected by the use
of B<ENGINE> API calls.

Initially, the default DSA_METHOD is the OpenSSL internal implementation,
as returned by DSA_OpenSSL().

DSA_set_default_method() makes B<meth> the default method for all DSA
structures created later. B<NB>: This is true only whilst no ENGINE has
been set as a default for DSA, so this function is no longer recommended.

DSA_get_default_method() returns a pointer to the current default
DSA_METHOD. However, the meaningfulness of this result is dependant on
whether the ENGINE API is being used, so this function is no longer 
recommended.

DSA_set_method() selects B<meth> to perform all operations using the key
B<rsa>. This will replace the DSA_METHOD used by the DSA key and if the
previous method was supplied by an ENGINE, the handle to that ENGINE will
be released during the change. It is possible to have DSA keys that only
work with certain DSA_METHOD implementations (eg. from an ENGINE module
that supports embedded hardware-protected keys), and in such cases
attempting to change the DSA_METHOD for the key can have unexpected
results.

DSA_new_method() allocates and initializes a DSA structure so that B<engine>
will be used for the DSA operations. If B<engine> is NULL, the default engine
for DSA operations is used, and if no default ENGINE is set, the DSA_METHOD
controlled by DSA_set_default_method() is used.
d92 2
a93 2
DSA_OpenSSL() and DSA_get_default_method() return pointers to the respective
B<DSA_METHOD>s.
d95 1
a95 1
DSA_set_default_method() returns no value.
d97 2
a98 3
DSA_set_method() returns non-zero if the provided B<meth> was successfully set as
the method for B<dsa> (including unloading the ENGINE handle if the previous
method was supplied by an ENGINE).
a103 10
=head1 NOTES

As of version 0.9.7, DSA_METHOD implementations are grouped together with other
algorithmic APIs (eg. RSA_METHOD, EVP_CIPHER, etc) in B<ENGINE> modules. If a
default ENGINE is specified for DSA functionality using an ENGINE API function,
that will override any DSA defaults set using the DSA API (ie.
DSA_set_default_method()). For this reason, the ENGINE API is the recommended way
to control default implementations for use in DSA and other cryptographic
algorithms.

d113 4
a116 9
DSA_set_default_openssl_method() and DSA_get_default_openssl_method() replaced
DSA_set_default_method() and DSA_get_default_method() respectively, and
DSA_set_method() and DSA_new_method() were altered to use B<ENGINE>s rather than
B<DSA_METHOD>s during development of the engine version of OpenSSL 0.9.6. For
0.9.7, the handling of defaults in the ENGINE API was restructured so that this
change was reversed, and behaviour of the other functions resembled more closely
the previous behaviour. The behaviour of defaults in the ENGINE API now
transparently overrides the behaviour of defaults in the DSA API without
requiring changing these function prototypes.
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d39 1
a39 1
DSA_METHOD. However, the meaningfulness of this result is dependent on
@


