head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2015.09.22.08.08.07;	author sobrado;	state Exp;
branches;
next	1.4;
commitid	yt6ZAILseiFaXq7L;

1.4
date	2014.07.11.16.18.14;	author miod;	state Exp;
branches;
next	1.3;
commitid	KFr43un1Uq8AaqNL;

1.3
date	2014.07.10.13.53.11;	author miod;	state Exp;
branches;
next	1.2;
commitid	kwuftJ7GCMdBJPFx;

1.2
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.11.21.36.11;	author markus;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.11.21.36.11;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.04.07.20.41.59;	author markus;	state Exp;
branches;
next	;


desc
@@


1.5
log
@typos in documentation; better wording, suggested by jmc@@

ok jmc@@
@
text
@=pod

=head1 NAME

d2i_DSAPublicKey, i2d_DSAPublicKey, d2i_DSAPrivateKey, i2d_DSAPrivateKey,
d2i_DSA_PUBKEY, i2d_DSA_PUBKEY, d2i_DSAparams, i2d_DSAparams, d2i_DSA_SIG, i2d_DSA_SIG - DSA key encoding
and parsing functions.

=head1 SYNOPSIS

 #include <openssl/dsa.h>
 #include <openssl/x509.h>

 DSA * d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length);

 int i2d_DSAPublicKey(const DSA *a, unsigned char **pp);

 DSA * d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length);

 int i2d_DSA_PUBKEY(const DSA *a, unsigned char **pp);

 DSA * d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length);

 int i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);

 DSA * d2i_DSAparams(DSA **a, const unsigned char **pp, long length);

 int i2d_DSAparams(const DSA *a, unsigned char **pp);

 DSA * d2i_DSA_SIG(DSA_SIG **a, const unsigned char **pp, long length);

 int i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);

=head1 DESCRIPTION

d2i_DSAPublicKey() and i2d_DSAPublicKey() decode and encode the DSA public key
components structure.

d2i_DSA_PUBKEY() and i2d_DSA_PUBKEY() decode and encode an DSA public key using
a SubjectPublicKeyInfo (certificate public key) structure.

d2i_DSAPrivateKey(), i2d_DSAPrivateKey() decode and encode the DSA private key
components.

d2i_DSAparams(), i2d_DSAparams() decode and encode the DSA parameters using
a B<Dss-Parms> structure as defined in RFC2459.

d2i_DSA_SIG(), i2d_DSA_SIG() decode and encode a DSA signature using a
B<Dss-Sig-Value> structure as defined in RFC2459.

The usage of all of these functions is similar to the d2i_X509() and
i2d_X509() described in the L<d2i_X509(3)|d2i_X509(3)> manual page.

=head1 NOTES

The B<DSA> structure passed to the private key encoding functions should have
all the private key components present.

The data encoded by the private key functions is unencrypted and therefore
offers no private key security.

The B<DSA_PUBKEY> functions should be used in preference to the B<DSAPublicKey>
functions when encoding public keys because they use a standard format.

The B<DSAPublicKey> functions use an non standard format the actual data encoded
depends on the value of the B<write_params> field of the B<a> key parameter.
If B<write_params> is zero then only the B<pub_key> field is encoded as an
B<INTEGER>. If B<write_params> is 1 then a B<SEQUENCE> consisting of the
B<p>, B<q>, B<g> and B<pub_key> respectively fields are encoded.

The B<DSAPrivateKey> functions also use a non standard structure consisting
consisting of a SEQUENCE containing the B<p>, B<q>, B<g> and B<pub_key> and
B<priv_key> fields respectively.

=head1 SEE ALSO

L<d2i_X509(3)|d2i_X509(3)>

=cut
@


1.4
log
@Huge documentation update for libcrypto and libssl, mostly from Matt Caswell,
Jeff Trawick, Jean-Paul Calderone, Michal Bozon, Jeffrey Walton and Rich Salz,
via OpenSSL trunk (with some parts not applying to us, such as SSLv2 support,
at least partially removed).
@
text
@d71 1
a71 1
The B<DSAPrivateKey> functions also use a non standard structure consiting
@


1.3
log
@Remove empty sections and references to des_modes(7) which we don't have.
@
text
@d6 1
a6 1
d2i_DSA_PUBKEY, i2d_DSA_PUBKEY, d2i_DSA_SIG, i2d_DSA_SIG - DSA key encoding
@


1.2
log
@Remove trailing whitespace.

fine jmc@@
@
text
@a78 4
=head1 HISTORY

TBA

@


1.1
log
@Initial revision
@
text
@d12 1
d39 2
a40 2
d2i_DSA_PUKEY() and i2d_DSA_PUKEY() decode and encode an DSA public key using a
SubjectPublicKeyInfo (certificate public key) structure.
d59 1
a59 1
The data encoded by the private key functions is unencrypted and therefore 
@


1.1.1.1
log
@import 0.9.7b (without idea and rc5)
@
text
@@


1.1.1.2
log
@import openssl-0.9.7d
@
text
@a11 1
 #include <openssl/x509.h>
d38 2
a39 2
d2i_DSA_PUBKEY() and i2d_DSA_PUBKEY() decode and encode an DSA public key using
a SubjectPublicKeyInfo (certificate public key) structure.
@

