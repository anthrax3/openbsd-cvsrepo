head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2014.07.10.13.53.11;	author miod;	state Exp;
branches;
next	1.4;
commitid	kwuftJ7GCMdBJPFx;

1.4
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.27;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.16.04.59.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.15.06.18.47;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.17;	author markus;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove empty sections and references to des_modes(7) which we don't have.
@
text
@=pod

=head1 NAME

EVP_OpenInit, EVP_OpenUpdate, EVP_OpenFinal - EVP envelope decryption

=head1 SYNOPSIS

 #include <openssl/evp.h>

 int EVP_OpenInit(EVP_CIPHER_CTX *ctx,EVP_CIPHER *type,unsigned char *ek,
		int ekl,unsigned char *iv,EVP_PKEY *priv);
 int EVP_OpenUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
         int *outl, unsigned char *in, int inl);
 int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
         int *outl);

=head1 DESCRIPTION

The EVP envelope routines are a high level interface to envelope
decryption. They decrypt a public key encrypted symmetric key and
then decrypt data using it.

EVP_OpenInit() initializes a cipher context B<ctx> for decryption
with cipher B<type>. It decrypts the encrypted symmetric key of length
B<ekl> bytes passed in the B<ek> parameter using the private key B<priv>.
The IV is supplied in the B<iv> parameter.

EVP_OpenUpdate() and EVP_OpenFinal() have exactly the same properties
as the EVP_DecryptUpdate() and EVP_DecryptFinal() routines, as
documented on the L<EVP_EncryptInit(3)|EVP_EncryptInit(3)> manual
page.

=head1 NOTES

It is possible to call EVP_OpenInit() twice in the same way as
EVP_DecryptInit(). The first call should have B<priv> set to NULL
and (after setting any cipher parameters) it should be called again
with B<type> set to NULL.

If the cipher passed in the B<type> parameter is a variable length
cipher then the key length will be set to the value of the recovered
key length. If the cipher is a fixed length cipher then the recovered
key length must match the fixed cipher length.

=head1 RETURN VALUES

EVP_OpenInit() returns 0 on error or a non zero integer (actually the
recovered secret key size) if successful.

EVP_OpenUpdate() returns 1 for success or 0 for failure.

EVP_OpenFinal() returns 0 if the decrypt failed or 1 for success.

=head1 SEE ALSO

L<evp(3)|evp(3)>, L<rand(3)|rand(3)>,
L<EVP_EncryptInit(3)|EVP_EncryptInit(3)>,
L<EVP_SealInit(3)|EVP_SealInit(3)>

=cut
@


1.4
log
@Remove trailing whitespace.

fine jmc@@
@
text
@a60 2
=head1 HISTORY

@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d30 1
a30 1
as the EVP_DecryptUpdate() and EVP_DecryptFinal() routines, as 
@


1.2
log
@link to correct renamed pages
@
text
@d13 1
a13 1
 void EVP_OpenUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
d15 1
a15 1
 void EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
d24 1
a24 1
EVP_OpenInit() initialises a cipher context B<ctx> for decryption
d32 13
a44 1
page. 
d48 1
a48 1
EVP_OpenInit() returns -1 on error or an non zero integer (actually the
d51 1
a51 1
EVP_SealUpdate() does not return a value.
d53 1
a53 1
EVP_SealFinal() returns 0 if the decrypt failed or 1 for success.
d57 1
a57 1
L<evp(3)|evp(3)>,
@


1.1
log
@OpenSSL 0.9.5a merge
@
text
@d45 1
a45 1
L<evp(3)|evp(3)>,L<rand(3)|rand(3)>
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d13 1
a13 1
 int EVP_OpenUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
d15 1
a15 1
 int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
d24 1
a24 1
EVP_OpenInit() initializes a cipher context B<ctx> for decryption
d32 1
a32 13
page.

=head1 NOTES

It is possible to call EVP_OpenInit() twice in the same way as
EVP_DecryptInit(). The first call should have B<priv> set to NULL
and (after setting any cipher parameters) it should be called again
with B<type> set to NULL.

If the cipher passed in the B<type> parameter is a variable length
cipher then the key length will be set to the value of the recovered
key length. If the cipher is a fixed length cipher then the recovered
key length must match the fixed cipher length.
d36 1
a36 1
EVP_OpenInit() returns 0 on error or a non zero integer (actually the
d39 1
a39 1
EVP_OpenUpdate() returns 1 for success or 0 for failure.
d41 1
a41 1
EVP_OpenFinal() returns 0 if the decrypt failed or 1 for success.
d45 1
a45 1
L<evp(3)|evp(3)>, L<rand(3)|rand(3)>,
@


