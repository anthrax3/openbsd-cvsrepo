head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2014.07.11.16.18.14;	author miod;	state Exp;
branches;
next	1.5;
commitid	KFr43un1Uq8AaqNL;

1.5
date	2014.07.09.17.36.58;	author miod;	state Exp;
branches;
next	1.4;
commitid	brDBcUcQnqLshLYA;

1.4
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.19;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.03.19.27.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.59;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.18;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.36.17;	author markus;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Huge documentation update for libcrypto and libssl, mostly from Matt Caswell,
Jeff Trawick, Jean-Paul Calderone, Michal Bozon, Jeffrey Walton and Rich Salz,
via OpenSSL trunk (with some parts not applying to us, such as SSLv2 support,
at least partially removed).
@
text
@=pod

=head1 NAME

RSA_generate_key_ex, RSA_generate_key - generate RSA key pair

=head1 SYNOPSIS

 #include <openssl/rsa.h>

 int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);

Deprecated:

 RSA *RSA_generate_key(int num, unsigned long e,
    void (*callback)(int,int,void *), void *cb_arg);

=head1 DESCRIPTION

RSA_generate_key_ex() generates a key pair and stores it in the B<RSA>
structure provided in B<rsa>.

The modulus size will be of length B<bits>, and the public exponent will be
B<e>. Key sizes with B<num> E<lt> 1024 should be considered insecure.
The exponent is an odd number, typically 3, 17 or 65537.

A callback function may be used to provide feedback about the
progress of the key generation. If B<cb> is not B<NULL>, it
will be called as follows using the BN_GENCB_call() function
described on the L<BN_generate_prime(3)|BN_generate_prime(3)> page:

=over 4

=item *

While a random prime number is generated, it is called as
described in L<BN_generate_prime(3)|BN_generate_prime(3)>.

=item *

When the n-th randomly generated prime is rejected as not
suitable for the key, B<BN_GENCB_call(cb, 2, n)> is called.

=item *

When a random p has been found with p-1 relatively prime to B<e>,
it is called as B<BN_GENCB_call(cb, 3, 0)>.

=back

The process is then repeated for prime q with B<BN_GENCB_call(cb, 3, 1)>.

RSA_generate_key is deprecated (new applications should use
RSA_generate_key_ex instead). RSA_generate_key works in the same was as
RSA_generate_key_ex except it uses "old style" call backs. See
L<BN_generate_prime(3)|BN_generate_prime(3)> for further details.

=head1 RETURN VALUE

If key generation fails, RSA_generate_key() returns B<NULL>.

The error codes can be obtained by L<ERR_get_error(3)|ERR_get_error(3)>.

=head1 BUGS

B<BN_GENCB_call(cb, 2, x)> is used with two different meanings.

RSA_generate_key() goes into an infinite loop for illegal input values.

=head1 SEE ALSO

L<ERR_get_error(3)|ERR_get_error(3)>, L<rand(3)|rand(3)>, L<rsa(3)|rsa(3)>,
L<RSA_free(3)|RSA_free(3)>, L<BN_generate_prime(3)|BN_generate_prime(3)>

=head1 HISTORY

The B<cb_arg> argument was added in SSLeay 0.9.0.

=cut
@


1.5
log
@Remove mention that the PRNG needs to be seeded before invoking some
functions.
@
text
@d5 1
a5 1
RSA_generate_key - generate RSA key pair
d11 4
d20 2
a21 2
RSA_generate_key() generates a key pair and returns it in a newly
allocated B<RSA> structure.
d23 1
a23 1
The modulus size will be B<num> bits, and the public exponent will be
d28 3
a30 2
progress of the key generation. If B<callback> is not B<NULL>, it
will be called as follows:
d42 1
a42 1
suitable for the key, B<callback(2, n, cb_arg)> is called.
d47 1
a47 1
it is called as B<callback(3, 0, cb_arg)>.
d51 6
a56 1
The process is then repeated for prime q with B<callback(3, 1, cb_arg)>.
d60 3
a62 2
If key generation fails, RSA_generate_key() returns B<NULL>; the
error codes can be obtained by L<ERR_get_error(3)|ERR_get_error(3)>.
d66 1
a66 1
B<callback(2, x, cb_arg)> is used with two different meanings.
d73 1
a73 1
L<RSA_free(3)|RSA_free(3)>
@


1.4
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d17 1
a17 2
allocated B<RSA> structure. The pseudo-random number generator must
be seeded prior to calling RSA_generate_key().
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d62 2
a63 1
L<ERR_get_error(3)|ERR_get_error(3)>, L<rand(3)|rand(3)>, L<rsa(3)|rsa(3)>, L<RSA_free(3)|RSA_free(3)>
@


1.2
log
@correct Xr to where we actually install the man pages
@
text
@d22 1
a22 1
The exponent is an odd number, typically 3 or 65535.
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d62 1
a62 1
L<err(3)|err(3)>, L<rand(3)|rand(3)>, L<rsa(3)|rsa(3)>, L<RSA_free(3)|RSA_free(3)>
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d22 1
a22 1
The exponent is an odd number, typically 3, 17 or 65537.
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d62 1
a62 2
L<ERR_get_error(3)|ERR_get_error(3)>, L<rand(3)|rand(3)>, L<rsa(3)|rsa(3)>,
L<RSA_free(3)|RSA_free(3)>
@


