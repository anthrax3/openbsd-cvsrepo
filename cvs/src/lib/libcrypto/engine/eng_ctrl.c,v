head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.10;
commitid	kT0fLt3r4lroFJra;

1.10
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.9;
commitid	5KSZBoxiLebzObKt;

1.9
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.8;
commitid	id8dTrTMtnTn4fqt;

1.8
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.06.10.15.20.40;	author jsing;	state Exp;
branches;
next	1.6;
commitid	bVia1atxAsS9lVc4;

1.6
date	2014.04.17.20.03.03;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.06.09.22.53;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.19;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.04.07.20.41.41;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: eng_ctrl.c,v 1.10 2015/02/11 03:19:37 doug Exp $ */
/* ====================================================================
 * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <string.h>

#include <openssl/err.h>

#include "eng_int.h"

/* When querying a ENGINE-specific control command's 'description', this string
 * is used if the ENGINE_CMD_DEFN has cmd_desc set to NULL. */
static const char *int_no_description = "";

/* These internal functions handle 'CMD'-related control commands when the
 * ENGINE in question has asked us to take care of it (ie. the ENGINE did not
 * set the ENGINE_FLAGS_MANUAL_CMD_CTRL flag. */

static int
int_ctrl_cmd_is_null(const ENGINE_CMD_DEFN *defn)
{
	if ((defn->cmd_num == 0) || (defn->cmd_name == NULL))
		return 1;
	return 0;
}

static int
int_ctrl_cmd_by_name(const ENGINE_CMD_DEFN *defn, const char *s)
{
	int idx = 0;
	while (!int_ctrl_cmd_is_null(defn) &&
	    (strcmp(defn->cmd_name, s) != 0)) {
		idx++;
		defn++;
	}
	if (int_ctrl_cmd_is_null(defn))
		/* The given name wasn't found */
		return -1;
	return idx;
}

static int
int_ctrl_cmd_by_num(const ENGINE_CMD_DEFN *defn, unsigned int num)
{
	int idx = 0;
	/* NB: It is stipulated that 'cmd_defn' lists are ordered by cmd_num. So
	 * our searches don't need to take any longer than necessary. */
	while (!int_ctrl_cmd_is_null(defn) && (defn->cmd_num < num)) {
		idx++;
		defn++;
	}
	if (defn->cmd_num == num)
		return idx;
	/* The given cmd_num wasn't found */
	return -1;
}

static int
int_ctrl_helper(ENGINE *e, int cmd, long i, void *p, void (*f)(void))
{
	int idx;
	int ret;
	char *s = (char *)p;

	/* Take care of the easy one first (eg. it requires no searches) */
	if (cmd == ENGINE_CTRL_GET_FIRST_CMD_TYPE) {
		if ((e->cmd_defns == NULL) ||
		    int_ctrl_cmd_is_null(e->cmd_defns))
			return 0;
		return e->cmd_defns->cmd_num;
	}
	/* One or two commands require that "p" be a valid string buffer */
	if ((cmd == ENGINE_CTRL_GET_CMD_FROM_NAME) ||
	    (cmd == ENGINE_CTRL_GET_NAME_FROM_CMD) ||
	    (cmd == ENGINE_CTRL_GET_DESC_FROM_CMD)) {
		if (s == NULL) {
			ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
			return -1;
		}
	}
	/* Now handle cmd_name -> cmd_num conversion */
	if (cmd == ENGINE_CTRL_GET_CMD_FROM_NAME) {
		if ((e->cmd_defns == NULL) ||
		    ((idx = int_ctrl_cmd_by_name(e->cmd_defns, s)) < 0)) {
			ENGINEerror(ENGINE_R_INVALID_CMD_NAME);
			return -1;
		}
		return e->cmd_defns[idx].cmd_num;
	}
	/* For the rest of the commands, the 'long' argument must specify a
	 * valie command number - so we need to conduct a search. */
	if ((e->cmd_defns == NULL) ||
	    ((idx = int_ctrl_cmd_by_num(e->cmd_defns, (unsigned int)i)) < 0)) {
		ENGINEerror(ENGINE_R_INVALID_CMD_NUMBER);
		return -1;
	}
	/* Now the logic splits depending on command type */
	switch (cmd) {
	case ENGINE_CTRL_GET_NEXT_CMD_TYPE:
		idx++;
		if (int_ctrl_cmd_is_null(e->cmd_defns + idx))
			/* end-of-list */
			return 0;
		else
			return e->cmd_defns[idx].cmd_num;
	case ENGINE_CTRL_GET_NAME_LEN_FROM_CMD:
		return strlen(e->cmd_defns[idx].cmd_name);
	case ENGINE_CTRL_GET_NAME_FROM_CMD:
		ret = snprintf(s, strlen(e->cmd_defns[idx].cmd_name) + 1,
		    "%s", e->cmd_defns[idx].cmd_name);
		if (ret >= (strlen(e->cmd_defns[idx].cmd_name) + 1))
			ret = -1;
		return ret;
	case ENGINE_CTRL_GET_DESC_LEN_FROM_CMD:
		if (e->cmd_defns[idx].cmd_desc)
			return strlen(e->cmd_defns[idx].cmd_desc);
		return strlen(int_no_description);
	case ENGINE_CTRL_GET_DESC_FROM_CMD:
		if (e->cmd_defns[idx].cmd_desc) {
			ret = snprintf(s,
			    strlen(e->cmd_defns[idx].cmd_desc) + 1,
			    "%s", e->cmd_defns[idx].cmd_desc);
			if (ret >= strlen(e->cmd_defns[idx].cmd_desc) + 1)
				ret = -1;
			return ret;
		}
		ret = snprintf(s, strlen(int_no_description) + 1, "%s",
		    int_no_description);
		if (ret >= strlen(int_no_description) + 1)
			ret = -1;
		return ret;
	case ENGINE_CTRL_GET_CMD_FLAGS:
		return e->cmd_defns[idx].cmd_flags;
	}

	/* Shouldn't really be here ... */
	ENGINEerror(ENGINE_R_INTERNAL_LIST_ERROR);
	return -1;
}

int
ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f)(void))
{
	int ctrl_exists, ref_exists;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	ref_exists = ((e->struct_ref > 0) ? 1 : 0);
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	ctrl_exists = ((e->ctrl == NULL) ? 0 : 1);
	if (!ref_exists) {
		ENGINEerror(ENGINE_R_NO_REFERENCE);
		return 0;
	}
	/* Intercept any "root-level" commands before trying to hand them on to
	 * ctrl() handlers. */
	switch (cmd) {
	case ENGINE_CTRL_HAS_CTRL_FUNCTION:
		return ctrl_exists;
	case ENGINE_CTRL_GET_FIRST_CMD_TYPE:
	case ENGINE_CTRL_GET_NEXT_CMD_TYPE:
	case ENGINE_CTRL_GET_CMD_FROM_NAME:
	case ENGINE_CTRL_GET_NAME_LEN_FROM_CMD:
	case ENGINE_CTRL_GET_NAME_FROM_CMD:
	case ENGINE_CTRL_GET_DESC_LEN_FROM_CMD:
	case ENGINE_CTRL_GET_DESC_FROM_CMD:
	case ENGINE_CTRL_GET_CMD_FLAGS:
		if (ctrl_exists && !(e->flags & ENGINE_FLAGS_MANUAL_CMD_CTRL))
			return int_ctrl_helper(e, cmd, i, p, f);
		if (!ctrl_exists) {
			ENGINEerror(ENGINE_R_NO_CONTROL_FUNCTION);
			/* For these cmd-related functions, failure is indicated
			 * by a -1 return value (because 0 is used as a valid
			 * return in some places). */
			return -1;
		}
	default:
		break;
	}
	/* Anything else requires a ctrl() handler to exist. */
	if (!ctrl_exists) {
		ENGINEerror(ENGINE_R_NO_CONTROL_FUNCTION);
		return 0;
	}
	return e->ctrl(e, cmd, i, p, f);
}

int
ENGINE_cmd_is_executable(ENGINE *e, int cmd)
{
	int flags;

	if ((flags = ENGINE_ctrl(e, ENGINE_CTRL_GET_CMD_FLAGS, cmd,
	    NULL, NULL)) < 0) {
		ENGINEerror(ENGINE_R_INVALID_CMD_NUMBER);
		return 0;
	}
	if (!(flags & ENGINE_CMD_FLAG_NO_INPUT) &&
	    !(flags & ENGINE_CMD_FLAG_NUMERIC) &&
	    !(flags & ENGINE_CMD_FLAG_STRING))
		return 0;
	return 1;
}

int
ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name, long i, void *p,
    void (*f)(void), int cmd_optional)
{
	int num;

	if ((e == NULL) || (cmd_name == NULL)) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	if ((e->ctrl == NULL) ||
	    ((num = ENGINE_ctrl(e, ENGINE_CTRL_GET_CMD_FROM_NAME,
	    0, (void *)cmd_name, NULL)) <= 0)) {
		/* If the command didn't *have* to be supported, we fake
		 * success. This allows certain settings to be specified for
		 * multiple ENGINEs and only require a change of ENGINE id
		 * (without having to selectively apply settings). Eg. changing
		 * from a hardware device back to the regular software ENGINE
		 * without editing the config file, etc. */
		if (cmd_optional) {
			ERR_clear_error();
			return 1;
		}
		ENGINEerror(ENGINE_R_INVALID_CMD_NAME);
		return 0;
	}

	/* Force the result of the control command to 0 or 1, for the reasons
	 * mentioned before. */
	if (ENGINE_ctrl(e, num, i, p, f) > 0)
		return 1;

	return 0;
}

int
ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,
    int cmd_optional)
{
	int num, flags;
	long l;
	char *ptr;

	if ((e == NULL) || (cmd_name == NULL)) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	if ((e->ctrl == NULL) ||
	    ((num = ENGINE_ctrl(e, ENGINE_CTRL_GET_CMD_FROM_NAME, 0,
	    (void *)cmd_name, NULL)) <= 0)) {
		/* If the command didn't *have* to be supported, we fake
		 * success. This allows certain settings to be specified for
		 * multiple ENGINEs and only require a change of ENGINE id
		 * (without having to selectively apply settings). Eg. changing
		 * from a hardware device back to the regular software ENGINE
		 * without editing the config file, etc. */
		if (cmd_optional) {
			ERR_clear_error();
			return 1;
		}
		ENGINEerror(ENGINE_R_INVALID_CMD_NAME);
		return 0;
	}
	if (!ENGINE_cmd_is_executable(e, num)) {
		ENGINEerror(ENGINE_R_CMD_NOT_EXECUTABLE);
		return 0;
	}
	if ((flags = ENGINE_ctrl(e, ENGINE_CTRL_GET_CMD_FLAGS, num,
	    NULL, NULL)) < 0) {
		/* Shouldn't happen, given that ENGINE_cmd_is_executable()
		 * returned success. */
		ENGINEerror(ENGINE_R_INTERNAL_LIST_ERROR);
		return 0;
	}
	/* If the command takes no input, there must be no input. And vice
	 * versa. */
	if (flags & ENGINE_CMD_FLAG_NO_INPUT) {
		if (arg != NULL) {
			ENGINEerror(ENGINE_R_COMMAND_TAKES_NO_INPUT);
			return 0;
		}
		/* We deliberately force the result of ENGINE_ctrl() to 0 or 1
		 * rather than returning it as "return data". This is to ensure
		 * usage of these commands is consistent across applications and
		 * that certain applications don't understand it one way, and
		 * others another. */
		if (ENGINE_ctrl(e, num, 0, (void *)arg, NULL) > 0)
			return 1;
		return 0;
	}
	/* So, we require input */
	if (arg == NULL) {
		ENGINEerror(ENGINE_R_COMMAND_TAKES_INPUT);
		return 0;
	}
	/* If it takes string input, that's easy */
	if (flags & ENGINE_CMD_FLAG_STRING) {
		/* Same explanation as above */
		if (ENGINE_ctrl(e, num, 0, (void *)arg, NULL) > 0)
			return 1;
		return 0;
	}
	/* If it doesn't take numeric either, then it is unsupported for use in
	 * a config-setting situation, which is what this function is for. This
	 * should never happen though, because ENGINE_cmd_is_executable() was
	 * used. */
	if (!(flags & ENGINE_CMD_FLAG_NUMERIC)) {
		ENGINEerror(ENGINE_R_INTERNAL_LIST_ERROR);
		return 0;
	}
	l = strtol(arg, &ptr, 10);
	if ((arg == ptr) || (*ptr != '\0')) {
		ENGINEerror(ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER);
		return 0;
	}
	/* Force the result of the control command to 0 or 1, for the reasons
	 * mentioned before. */
	if (ENGINE_ctrl(e, num, l, NULL, NULL) > 0)
		return 1;
	return 0;
}
@


1.10
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_ctrl.c,v 1.9 2014/07/10 13:58:22 jsing Exp $ */
d128 1
a128 2
			ENGINEerr(ENGINE_F_INT_CTRL_HELPER,
			    ERR_R_PASSED_NULL_PARAMETER);
d136 1
a136 2
			ENGINEerr(ENGINE_F_INT_CTRL_HELPER,
			    ENGINE_R_INVALID_CMD_NAME);
d145 1
a145 2
		ENGINEerr(ENGINE_F_INT_CTRL_HELPER,
		    ENGINE_R_INVALID_CMD_NUMBER);
d188 1
a188 1
	ENGINEerr(ENGINE_F_INT_CTRL_HELPER, ENGINE_R_INTERNAL_LIST_ERROR);
d198 1
a198 1
		ENGINEerr(ENGINE_F_ENGINE_CTRL, ERR_R_PASSED_NULL_PARAMETER);
d206 1
a206 1
		ENGINEerr(ENGINE_F_ENGINE_CTRL, ENGINE_R_NO_REFERENCE);
d225 1
a225 2
			ENGINEerr(ENGINE_F_ENGINE_CTRL,
			    ENGINE_R_NO_CONTROL_FUNCTION);
d236 1
a236 1
		ENGINEerr(ENGINE_F_ENGINE_CTRL, ENGINE_R_NO_CONTROL_FUNCTION);
d249 1
a249 2
		ENGINEerr(ENGINE_F_ENGINE_CMD_IS_EXECUTABLE,
		    ENGINE_R_INVALID_CMD_NUMBER);
d266 1
a266 2
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD,
		    ERR_R_PASSED_NULL_PARAMETER);
d282 1
a282 1
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD, ENGINE_R_INVALID_CMD_NAME);
d303 1
a303 2
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
		    ERR_R_PASSED_NULL_PARAMETER);
d319 1
a319 2
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
		    ENGINE_R_INVALID_CMD_NAME);
d323 1
a323 2
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
		    ENGINE_R_CMD_NOT_EXECUTABLE);
d330 1
a330 2
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
		    ENGINE_R_INTERNAL_LIST_ERROR);
d337 1
a337 2
			ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
			    ENGINE_R_COMMAND_TAKES_NO_INPUT);
d351 1
a351 2
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
		    ENGINE_R_COMMAND_TAKES_INPUT);
d366 1
a366 2
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
		    ENGINE_R_INTERNAL_LIST_ERROR);
d371 1
a371 2
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
		    ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER);
@


1.9
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_ctrl.c,v 1.8 2014/06/12 15:49:29 deraadt Exp $ */
d57 2
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d55 2
@


1.7
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/engine/eng_ctrl.c */
@


1.6
log
@fix BIO_snprintf usage in here.
ok tedu@@
@
text
@d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d66 4
a69 3
static int int_ctrl_cmd_is_null(const ENGINE_CMD_DEFN *defn)
	{
	if((defn->cmd_num == 0) || (defn->cmd_name == NULL))
d72 1
a72 1
	}
d74 3
a76 2
static int int_ctrl_cmd_by_name(const ENGINE_CMD_DEFN *defn, const char *s)
	{
d78 2
a79 2
	while(!int_ctrl_cmd_is_null(defn) && (strcmp(defn->cmd_name, s) != 0))
		{
d82 2
a83 2
		}
	if(int_ctrl_cmd_is_null(defn))
d87 1
a87 1
	}
d89 3
a91 2
static int int_ctrl_cmd_by_num(const ENGINE_CMD_DEFN *defn, unsigned int num)
	{
d95 1
a95 2
	while(!int_ctrl_cmd_is_null(defn) && (defn->cmd_num < num))
		{
d98 2
a99 2
		}
	if(defn->cmd_num == num)
d103 1
a103 1
	}
d105 3
a107 3
static int int_ctrl_helper(ENGINE *e, int cmd, long i, void *p,
			   void (*f)(void))
	{
d111 1
d113 3
a115 3
	if(cmd == ENGINE_CTRL_GET_FIRST_CMD_TYPE)
		{
		if((e->cmd_defns == NULL) || int_ctrl_cmd_is_null(e->cmd_defns))
d118 1
a118 1
		}
d120 4
a123 6
	if((cmd == ENGINE_CTRL_GET_CMD_FROM_NAME) ||
			(cmd == ENGINE_CTRL_GET_NAME_FROM_CMD) ||
			(cmd == ENGINE_CTRL_GET_DESC_FROM_CMD))
		{
		if(s == NULL)
			{
d125 1
a125 1
				ERR_R_PASSED_NULL_PARAMETER);
a126 1
			}
d128 1
d130 3
a132 5
	if(cmd == ENGINE_CTRL_GET_CMD_FROM_NAME)
		{
		if((e->cmd_defns == NULL) || ((idx = int_ctrl_cmd_by_name(
						e->cmd_defns, s)) < 0))
			{
d134 1
a134 1
				ENGINE_R_INVALID_CMD_NAME);
d136 1
a136 1
			}
d138 1
a138 1
		}
d141 2
a142 3
	if((e->cmd_defns == NULL) || ((idx = int_ctrl_cmd_by_num(e->cmd_defns,
					(unsigned int)i)) < 0))
		{
d144 1
a144 1
			ENGINE_R_INVALID_CMD_NUMBER);
d146 1
a146 1
		}
d148 1
a148 2
	switch(cmd)
		{
d151 1
a151 1
		if(int_ctrl_cmd_is_null(e->cmd_defns + idx))
d159 1
a159 1
		ret = snprintf(s,strlen(e->cmd_defns[idx].cmd_name) + 1,
d165 1
a165 1
		if(e->cmd_defns[idx].cmd_desc)
d169 1
a169 1
		if(e->cmd_defns[idx].cmd_desc) {
d177 1
a177 1
		ret = snprintf(s, strlen(int_no_description) + 1,"%s",
d184 2
a185 1
		}
d187 1
a187 1
	ENGINEerr(ENGINE_F_INT_CTRL_HELPER,ENGINE_R_INTERNAL_LIST_ERROR);
d189 1
a189 1
	}
d191 3
a193 2
int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f)(void))
	{
d195 3
a197 3
	if(e == NULL)
		{
		ENGINEerr(ENGINE_F_ENGINE_CTRL,ERR_R_PASSED_NULL_PARAMETER);
d199 1
a199 1
		}
d204 2
a205 3
	if(!ref_exists)
		{
		ENGINEerr(ENGINE_F_ENGINE_CTRL,ENGINE_R_NO_REFERENCE);
d207 1
a207 1
		}
d210 1
a210 2
	switch(cmd)
		{
d221 5
a225 5
		if(ctrl_exists && !(e->flags & ENGINE_FLAGS_MANUAL_CMD_CTRL))
			return int_ctrl_helper(e,cmd,i,p,f);
		if(!ctrl_exists)
			{
			ENGINEerr(ENGINE_F_ENGINE_CTRL,ENGINE_R_NO_CONTROL_FUNCTION);
d230 1
a230 1
			}
d233 1
a233 1
		}
d235 2
a236 3
	if(!ctrl_exists)
		{
		ENGINEerr(ENGINE_F_ENGINE_CTRL,ENGINE_R_NO_CONTROL_FUNCTION);
d238 1
a238 1
		}
d240 1
a240 1
	}
d242 3
a244 2
int ENGINE_cmd_is_executable(ENGINE *e, int cmd)
	{
d246 3
a248 2
	if((flags = ENGINE_ctrl(e, ENGINE_CTRL_GET_CMD_FLAGS, cmd, NULL, NULL)) < 0)
		{
d250 1
a250 1
			ENGINE_R_INVALID_CMD_NUMBER);
d252 4
a255 4
		}
	if(!(flags & ENGINE_CMD_FLAG_NO_INPUT) &&
			!(flags & ENGINE_CMD_FLAG_NUMERIC) &&
			!(flags & ENGINE_CMD_FLAG_STRING))
d258 1
a258 1
	}
d260 4
a263 3
int ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,
        long i, void *p, void (*f)(void), int cmd_optional)
        {
d266 1
a266 2
	if((e == NULL) || (cmd_name == NULL))
		{
d268 1
a268 1
			ERR_R_PASSED_NULL_PARAMETER);
d270 4
a273 5
		}
	if((e->ctrl == NULL) || ((num = ENGINE_ctrl(e,
					ENGINE_CTRL_GET_CMD_FROM_NAME,
					0, (void *)cmd_name, NULL)) <= 0))
		{
d280 1
a280 2
		if(cmd_optional)
			{
d283 2
a284 3
			}
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD,
			ENGINE_R_INVALID_CMD_NAME);
d286 2
a287 1
		}
d290 10
a299 8
        if (ENGINE_ctrl(e, num, i, p, f) > 0)
                return 1;
        return 0;
        }

int ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,
				int cmd_optional)
	{
d303 2
a304 2
	if((e == NULL) || (cmd_name == NULL))
		{
d306 1
a306 1
			ERR_R_PASSED_NULL_PARAMETER);
d308 4
a311 5
		}
	if((e->ctrl == NULL) || ((num = ENGINE_ctrl(e,
					ENGINE_CTRL_GET_CMD_FROM_NAME,
					0, (void *)cmd_name, NULL)) <= 0))
		{
d318 1
a318 2
		if(cmd_optional)
			{
d321 1
a321 1
			}
d323 1
a323 1
			ENGINE_R_INVALID_CMD_NAME);
d325 2
a326 3
		}
	if(!ENGINE_cmd_is_executable(e, num))
		{
d328 1
a328 1
			ENGINE_R_CMD_NOT_EXECUTABLE);
d330 3
a332 3
		}
	if((flags = ENGINE_ctrl(e, ENGINE_CTRL_GET_CMD_FLAGS, num, NULL, NULL)) < 0)
		{
d336 1
a336 1
			ENGINE_R_INTERNAL_LIST_ERROR);
d338 1
a338 1
		}
d341 2
a342 4
	if(flags & ENGINE_CMD_FLAG_NO_INPUT)
		{
		if(arg != NULL)
			{
d344 1
a344 1
				ENGINE_R_COMMAND_TAKES_NO_INPUT);
d346 1
a346 1
			}
d352 1
a352 1
		if(ENGINE_ctrl(e, num, 0, (void *)arg, NULL) > 0)
d355 1
a355 1
		}
d357 1
a357 2
	if(arg == NULL)
		{
d359 1
a359 1
			ENGINE_R_COMMAND_TAKES_INPUT);
d361 1
a361 1
		}
d363 1
a363 2
	if(flags & ENGINE_CMD_FLAG_STRING)
		{
d365 1
a365 1
		if(ENGINE_ctrl(e, num, 0, (void *)arg, NULL) > 0)
d368 1
a368 1
		}
d373 1
a373 2
	if(!(flags & ENGINE_CMD_FLAG_NUMERIC))
		{
d375 1
a375 1
			ENGINE_R_INTERNAL_LIST_ERROR);
d377 1
a377 1
		}
d379 1
a379 2
	if((arg == ptr) || (*ptr != '\0'))
		{
d381 1
a381 1
			ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER);
d383 1
a383 1
		}
d386 1
a386 1
	if(ENGINE_ctrl(e, num, l, NULL, NULL) > 0)
d389 1
a389 1
	}
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d107 1
d162 5
a166 2
		return BIO_snprintf(s,strlen(e->cmd_defns[idx].cmd_name) + 1,
				    "%s", e->cmd_defns[idx].cmd_name);
d172 13
a184 6
		if(e->cmd_defns[idx].cmd_desc)
			return BIO_snprintf(s,
					    strlen(e->cmd_defns[idx].cmd_desc) + 1,
					    "%s", e->cmd_defns[idx].cmd_desc);
		return BIO_snprintf(s, strlen(int_no_description) + 1,"%s",
				    int_no_description);
@


1.4
log
@resolve conflicts
@
text
@d283 1
a283 1
        if (ENGINE_ctrl(e, num, i, p, f))
d348 1
a348 1
		if(ENGINE_ctrl(e, num, 0, (void *)arg, NULL))
d363 1
a363 1
		if(ENGINE_ctrl(e, num, 0, (void *)arg, NULL))
d386 1
a386 1
	if(ENGINE_ctrl(e, num, l, NULL, NULL))
@


1.3
log
@merge 0.9.7d
@
text
@a55 2
#include <openssl/crypto.h>
#include "cryptlib.h"
a56 1
#include <openssl/engine.h>
d103 2
a104 1
static int int_ctrl_helper(ENGINE *e, int cmd, long i, void *p, void (*f)())
d182 1
a182 1
int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f)())
d252 1
a252 1
        long i, void *p, void (*f)(), int cmd_optional)
d258 1
a258 1
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD_STRING,
@


1.2
log
@sprintf->snprintf. deraadt@@ suggestions and ok
@
text
@d163 2
a164 2
		return snprintf(s,strlen(e->cmd_defns[idx].cmd_name) + 1,
				"%s", e->cmd_defns[idx].cmd_name);
d171 5
a175 5
			return snprintf(s,
					strlen(e->cmd_defns[idx].cmd_desc) + 1,
					"%s", e->cmd_defns[idx].cmd_desc);
		return snprintf(s, strlen(int_no_description) + 1,"%s",
				int_no_description);
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d163 2
a164 1
		return sprintf(s, "%s", e->cmd_defns[idx].cmd_name);
d171 5
a175 2
			return sprintf(s, "%s", e->cmd_defns[idx].cmd_desc);
		return sprintf(s, "%s", int_no_description);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import openssl-0.9.7d
@
text
@d163 1
a163 2
		return BIO_snprintf(s,strlen(e->cmd_defns[idx].cmd_name) + 1,
				    "%s", e->cmd_defns[idx].cmd_name);
d170 2
a171 5
			return BIO_snprintf(s,
					    strlen(e->cmd_defns[idx].cmd_desc) + 1,
					    "%s", e->cmd_defns[idx].cmd_desc);
		return BIO_snprintf(s, strlen(int_no_description) + 1,"%s",
				    int_no_description);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d56 2
d59 1
d106 1
a106 2
static int int_ctrl_helper(ENGINE *e, int cmd, long i, void *p,
			   void (*f)(void))
d184 1
a184 1
int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f)(void))
d254 1
a254 1
        long i, void *p, void (*f)(void), int cmd_optional)
d260 1
a260 1
		ENGINEerr(ENGINE_F_ENGINE_CTRL_CMD,
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d283 1
a283 1
        if (ENGINE_ctrl(e, num, i, p, f) > 0)
d348 1
a348 1
		if(ENGINE_ctrl(e, num, 0, (void *)arg, NULL) > 0)
d363 1
a363 1
		if(ENGINE_ctrl(e, num, 0, (void *)arg, NULL) > 0)
d386 1
a386 1
	if(ENGINE_ctrl(e, num, l, NULL, NULL) > 0)
@


