head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16;
locks; strict;
comment	@ * @;


1.16
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.15;
commitid	kT0fLt3r4lroFJra;

1.15
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.14;
commitid	5KSZBoxiLebzObKt;

1.14
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.13;
commitid	nzndm3zqPmFurSaK;

1.13
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.12;
commitid	id8dTrTMtnTn4fqt;

1.12
date	2014.06.22.11.33.47;	author jsing;	state Exp;
branches;
next	1.11;
commitid	DzihbgMColoAK5Hv;

1.11
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.06.10.15.20.40;	author jsing;	state Exp;
branches;
next	1.9;
commitid	bVia1atxAsS9lVc4;

1.9
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.10.16.31.54;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.04.19.07.14;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.19;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.38.28;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.09;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.41;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: eng_fat.c,v 1.15 2015/02/11 03:19:37 doug Exp $ */
/* ====================================================================
 * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * ECDH support in OpenSSL originally developed by
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */

#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/err.h>
#include "eng_int.h"
#include <openssl/conf.h>

int
ENGINE_set_default(ENGINE *e, unsigned int flags)
{
	if ((flags & ENGINE_METHOD_CIPHERS) && !ENGINE_set_default_ciphers(e))
		return 0;
	if ((flags & ENGINE_METHOD_DIGESTS) && !ENGINE_set_default_digests(e))
		return 0;
#ifndef OPENSSL_NO_RSA
	if ((flags & ENGINE_METHOD_RSA) && !ENGINE_set_default_RSA(e))
		return 0;
#endif
#ifndef OPENSSL_NO_DSA
	if ((flags & ENGINE_METHOD_DSA) && !ENGINE_set_default_DSA(e))
		return 0;
#endif
#ifndef OPENSSL_NO_DH
	if ((flags & ENGINE_METHOD_DH) && !ENGINE_set_default_DH(e))
		return 0;
#endif
#ifndef OPENSSL_NO_ECDH
	if ((flags & ENGINE_METHOD_ECDH) && !ENGINE_set_default_ECDH(e))
		return 0;
#endif
#ifndef OPENSSL_NO_ECDSA
	if ((flags & ENGINE_METHOD_ECDSA) && !ENGINE_set_default_ECDSA(e))
		return 0;
#endif
	if ((flags & ENGINE_METHOD_RAND) && !ENGINE_set_default_RAND(e))
		return 0;
	if ((flags & ENGINE_METHOD_PKEY_METHS) &&
	    !ENGINE_set_default_pkey_meths(e))
		return 0;
	if ((flags & ENGINE_METHOD_PKEY_ASN1_METHS) &&
	    !ENGINE_set_default_pkey_asn1_meths(e))
		return 0;
	return 1;
}

/* Set default algorithms using a string */

static int
int_def_cb(const char *alg, int len, void *arg)
{
	unsigned int *pflags = arg;

	if (!strncmp(alg, "ALL", len))
		*pflags |= ENGINE_METHOD_ALL;
	else if (!strncmp(alg, "RSA", len))
		*pflags |= ENGINE_METHOD_RSA;
	else if (!strncmp(alg, "DSA", len))
		*pflags |= ENGINE_METHOD_DSA;
	else if (!strncmp(alg, "ECDH", len))
		*pflags |= ENGINE_METHOD_ECDH;
	else if (!strncmp(alg, "ECDSA", len))
		*pflags |= ENGINE_METHOD_ECDSA;
	else if (!strncmp(alg, "DH", len))
		*pflags |= ENGINE_METHOD_DH;
	else if (!strncmp(alg, "RAND", len))
		*pflags |= ENGINE_METHOD_RAND;
	else if (!strncmp(alg, "CIPHERS", len))
		*pflags |= ENGINE_METHOD_CIPHERS;
	else if (!strncmp(alg, "DIGESTS", len))
		*pflags |= ENGINE_METHOD_DIGESTS;
	else if (!strncmp(alg, "PKEY", len))
		*pflags |= ENGINE_METHOD_PKEY_METHS |
		    ENGINE_METHOD_PKEY_ASN1_METHS;
	else if (!strncmp(alg, "PKEY_CRYPTO", len))
		*pflags |= ENGINE_METHOD_PKEY_METHS;
	else if (!strncmp(alg, "PKEY_ASN1", len))
		*pflags |= ENGINE_METHOD_PKEY_ASN1_METHS;
	else
		return 0;
	return 1;
}

int
ENGINE_set_default_string(ENGINE *e, const char *def_list)
{
	unsigned int flags = 0;

	if (!CONF_parse_list(def_list, ',', 1, int_def_cb, &flags)) {
		ENGINEerror(ENGINE_R_INVALID_STRING);
		ERR_asprintf_error_data("str=%s",def_list);
		return 0;
	}
	return ENGINE_set_default(e, flags);
}

int
ENGINE_register_complete(ENGINE *e)
{
	ENGINE_register_ciphers(e);
	ENGINE_register_digests(e);
#ifndef OPENSSL_NO_RSA
	ENGINE_register_RSA(e);
#endif
#ifndef OPENSSL_NO_DSA
	ENGINE_register_DSA(e);
#endif
#ifndef OPENSSL_NO_DH
	ENGINE_register_DH(e);
#endif
#ifndef OPENSSL_NO_ECDH
	ENGINE_register_ECDH(e);
#endif
#ifndef OPENSSL_NO_ECDSA
	ENGINE_register_ECDSA(e);
#endif
	ENGINE_register_RAND(e);
	ENGINE_register_pkey_meths(e);
	return 1;
}

int
ENGINE_register_all_complete(void)
{
	ENGINE *e;

	for (e = ENGINE_get_first(); e; e = ENGINE_get_next(e))
		if (!(e->flags & ENGINE_FLAGS_NO_REGISTER_ALL))
			ENGINE_register_complete(e);
	return 1;
}
@


1.15
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_fat.c,v 1.14 2014/07/10 22:45:57 jsing Exp $ */
d150 1
a150 2
		ENGINEerr(ENGINE_F_ENGINE_SET_DEFAULT_STRING,
		    ENGINE_R_INVALID_STRING);
@


1.14
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_fat.c,v 1.13 2014/07/10 13:58:22 jsing Exp $ */
d65 1
@


1.13
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_fat.c,v 1.12 2014/06/22 11:33:47 jsing Exp $ */
d62 2
@


1.12
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_fat.c,v 1.11 2014/06/12 15:49:29 deraadt Exp $ */
d60 2
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d128 2
a129 2
		*pflags |=
		    ENGINE_METHOD_PKEY_METHS|ENGINE_METHOD_PKEY_ASN1_METHS;
@


1.10
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/engine/eng_fat.c */
@


1.9
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d57 1
a57 1
 * ECDH support in OpenSSL originally developed by 
d64 4
a67 3
int ENGINE_set_default(ENGINE *e, unsigned int flags)
	{
	if((flags & ENGINE_METHOD_CIPHERS) && !ENGINE_set_default_ciphers(e))
d69 1
a69 1
	if((flags & ENGINE_METHOD_DIGESTS) && !ENGINE_set_default_digests(e))
d72 1
a72 1
	if((flags & ENGINE_METHOD_RSA) && !ENGINE_set_default_RSA(e))
d76 1
a76 1
	if((flags & ENGINE_METHOD_DSA) && !ENGINE_set_default_DSA(e))
d80 1
a80 1
	if((flags & ENGINE_METHOD_DH) && !ENGINE_set_default_DH(e))
d84 1
a84 1
	if((flags & ENGINE_METHOD_ECDH) && !ENGINE_set_default_ECDH(e))
d88 1
a88 1
	if((flags & ENGINE_METHOD_ECDSA) && !ENGINE_set_default_ECDSA(e))
d91 1
a91 1
	if((flags & ENGINE_METHOD_RAND) && !ENGINE_set_default_RAND(e))
d93 2
a94 2
	if((flags & ENGINE_METHOD_PKEY_METHS)
				&& !ENGINE_set_default_pkey_meths(e))
d96 2
a97 2
	if((flags & ENGINE_METHOD_PKEY_ASN1_METHS)
				&& !ENGINE_set_default_pkey_asn1_meths(e))
d100 1
a100 1
	}
d104 3
a106 2
static int int_def_cb(const char *alg, int len, void *arg)
	{
d108 1
d129 1
a129 1
			ENGINE_METHOD_PKEY_METHS|ENGINE_METHOD_PKEY_ASN1_METHS;
d137 1
a137 1
	}
d139 4
d144 1
a144 5
int ENGINE_set_default_string(ENGINE *e, const char *def_list)
	{
	unsigned int flags = 0;
	if (!CONF_parse_list(def_list, ',', 1, int_def_cb, &flags))
		{
d146 1
a146 1
					ENGINE_R_INVALID_STRING);
d149 1
a149 1
		}
d151 1
a151 1
	}
d153 3
a155 2
int ENGINE_register_complete(ENGINE *e)
	{
d176 1
a176 1
	}
d178 3
a180 2
int ENGINE_register_all_complete(void)
	{
d183 1
a183 1
	for(e=ENGINE_get_first() ; e ; e=ENGINE_get_next(e))
d187 1
a187 1
	}
@


1.8
log
@resolve conflicts
@
text
@d144 1
a144 1
		ERR_add_error_data(2, "str=",def_list);
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d179 2
a180 1
		ENGINE_register_complete(e);
@


1.6
log
@resolve conflicts
@
text
@d92 6
d124 7
d170 1
@


1.5
log
@merge 0.9.7d
@
text
@d55 5
a60 2
#include <openssl/crypto.h>
#include "cryptlib.h"
a61 1
#include <openssl/engine.h>
d82 8
d106 4
d149 6
@


1.4
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d110 1
a110 1
int ENGINE_set_default_string(ENGINE *e, const char *list)
d113 1
a113 1
	if (!CONF_parse_list(list, ',', 1, int_def_cb, &flags))
d117 1
a117 1
		ERR_add_error_data(2, "str=",list);
@


1.3
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d69 1
a69 1
	if((flags & ENGINE_METHOD_RSA) & !ENGINE_set_default_RSA(e))
d73 1
a73 1
	if((flags & ENGINE_METHOD_DSA) & !ENGINE_set_default_DSA(e))
d77 1
a77 1
	if((flags & ENGINE_METHOD_DH) & !ENGINE_set_default_DH(e))
d80 1
a80 1
	if((flags & ENGINE_METHOD_RAND) & !ENGINE_set_default_RAND(e))
@


1.2
log
@sync formatting with 0.9.7
@
text
@d87 1
a87 1
int int_def_cb(const char *alg, int len, void *arg)
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d144 1
a144 1
	for(e=ENGINE_get_first() ; e ; e=ENGINE_get_next(e)) {
a145 1
	}
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d144 1
a144 1
	for(e=ENGINE_get_first() ; e ; e=ENGINE_get_next(e))
d146 1
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d87 1
a87 1
static int int_def_cb(const char *alg, int len, void *arg)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d69 1
a69 1
	if((flags & ENGINE_METHOD_RSA) && !ENGINE_set_default_RSA(e))
d73 1
a73 1
	if((flags & ENGINE_METHOD_DSA) && !ENGINE_set_default_DSA(e))
d77 1
a77 1
	if((flags & ENGINE_METHOD_DH) && !ENGINE_set_default_DH(e))
d80 1
a80 1
	if((flags & ENGINE_METHOD_RAND) && !ENGINE_set_default_RAND(e))
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d110 1
a110 1
int ENGINE_set_default_string(ENGINE *e, const char *def_list)
d113 1
a113 1
	if (!CONF_parse_list(def_list, ',', 1, int_def_cb, &flags))
d117 1
a117 1
		ERR_add_error_data(2, "str=",def_list);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@a54 5
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * ECDH support in OpenSSL originally developed by 
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */
d56 2
d59 1
a79 8
#ifndef OPENSSL_NO_ECDH
	if((flags & ENGINE_METHOD_ECDH) && !ENGINE_set_default_ECDH(e))
		return 0;
#endif
#ifndef OPENSSL_NO_ECDSA
	if((flags & ENGINE_METHOD_ECDSA) && !ENGINE_set_default_ECDSA(e))
		return 0;
#endif
a95 4
	else if (!strncmp(alg, "ECDH", len))
		*pflags |= ENGINE_METHOD_ECDH;
	else if (!strncmp(alg, "ECDSA", len))
		*pflags |= ENGINE_METHOD_ECDSA;
a134 6
#endif
#ifndef OPENSSL_NO_ECDH
	ENGINE_register_ECDH(e);
#endif
#ifndef OPENSSL_NO_ECDSA
	ENGINE_register_ECDSA(e);
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a91 6
	if((flags & ENGINE_METHOD_PKEY_METHS)
				&& !ENGINE_set_default_pkey_meths(e))
		return 0;
	if((flags & ENGINE_METHOD_PKEY_ASN1_METHS)
				&& !ENGINE_set_default_pkey_asn1_meths(e))
		return 0;
a117 7
	else if (!strncmp(alg, "PKEY", len))
		*pflags |=
			ENGINE_METHOD_PKEY_METHS|ENGINE_METHOD_PKEY_ASN1_METHS;
	else if (!strncmp(alg, "PKEY_CRYPTO", len))
		*pflags |= ENGINE_METHOD_PKEY_METHS;
	else if (!strncmp(alg, "PKEY_ASN1", len))
		*pflags |= ENGINE_METHOD_PKEY_ASN1_METHS;
a156 1
	ENGINE_register_pkey_meths(e);
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d179 1
a179 2
		if (!(e->flags & ENGINE_FLAGS_NO_REGISTER_ALL))
			ENGINE_register_complete(e);
@


