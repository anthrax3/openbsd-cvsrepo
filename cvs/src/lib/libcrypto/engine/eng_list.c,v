head	1.22;
access;
symbols;
locks; strict;
comment	@ * @;


1.22
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2015.07.19.00.56.48;	author bcook;	state Exp;
branches;
next	1.20;
commitid	w5GSKnesaQDaRoYm;

1.20
date	2015.06.19.06.32.43;	author bcook;	state Exp;
branches;
next	1.19;
commitid	vA2V1BoKODWrzjEG;

1.19
date	2015.06.19.06.05.11;	author bcook;	state Exp;
branches;
next	1.18;
commitid	UoMmqRBqGwWCJkBW;

1.18
date	2015.04.11.16.03.21;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	WnYuC1gPCzN02uAn;

1.17
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.16;
commitid	5KSZBoxiLebzObKt;

1.16
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.15;
commitid	gtwLkRyWx0K1HbzX;

1.15
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.14;
commitid	yQEL1wOWIearrW15;

1.14
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.13;
commitid	nzndm3zqPmFurSaK;

1.13
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.12;
commitid	id8dTrTMtnTn4fqt;

1.12
date	2014.06.29.00.52.18;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	kjZ88Lkx0QQxHBPo;

1.11
date	2014.06.23.22.19.02;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	9JQzcWo59KD9HxBQ;

1.10
date	2014.06.22.12.15.53;	author jsing;	state Exp;
branches;
next	1.9;
commitid	GskzxJ39Cz1GJoWP;

1.9
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.05.08.12.59.17;	author giovanni;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.03.21.53.39;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.20;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.09;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: eng_list.c,v 1.21 2015/07/19 00:56:48 bcook Exp $ */
/* Written by Geoff Thorpe (geoff@@geoffthorpe.net) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * ECDH support in OpenSSL originally developed by
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */

#include <string.h>
#include <unistd.h>

#include <openssl/opensslconf.h>

#include <openssl/err.h>

#include "cryptlib.h"
#include "eng_int.h"

/* The linked-list of pointers to engine types. engine_list_head
 * incorporates an implicit structural reference but engine_list_tail
 * does not - the latter is a computational niceity and only points
 * to something that is already pointed to by its predecessor in the
 * list (or engine_list_head itself). In the same way, the use of the
 * "prev" pointer in each ENGINE is to save excessive list iteration,
 * it doesn't correspond to an extra structural reference. Hence,
 * engine_list_head, and each non-null "next" pointer account for
 * the list itself assuming exactly 1 structural reference on each
 * list member. */
static ENGINE *engine_list_head = NULL;
static ENGINE *engine_list_tail = NULL;

/* This cleanup function is only needed internally. If it should be called, we
 * register it with the "ENGINE_cleanup()" stack to be called during cleanup. */

static void
engine_list_cleanup(void)
{
	ENGINE *iterator = engine_list_head;

	while (iterator != NULL && ENGINE_remove(iterator))
		iterator = engine_list_head;
}

/* These static functions starting with a lower case "engine_" always
 * take place when CRYPTO_LOCK_ENGINE has been locked up. */
static int
engine_list_add(ENGINE *e)
{
	int conflict = 0;
	ENGINE *iterator = NULL;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	iterator = engine_list_head;
	while (iterator && !conflict) {
		conflict = (strcmp(iterator->id, e->id) == 0);
		iterator = iterator->next;
	}
	if (conflict) {
		ENGINEerror(ENGINE_R_CONFLICTING_ENGINE_ID);
		return 0;
	}
	if (engine_list_head == NULL) {
		/* We are adding to an empty list. */
		if (engine_list_tail) {
			ENGINEerror(ENGINE_R_INTERNAL_LIST_ERROR);
			return 0;
		}
		engine_list_head = e;
		e->prev = NULL;
		/* The first time the list allocates, we should register the
		 * cleanup. */
		engine_cleanup_add_last(engine_list_cleanup);
	} else {
		/* We are adding to the tail of an existing list. */
		if ((engine_list_tail == NULL) ||
		    (engine_list_tail->next != NULL)) {
			ENGINEerror(ENGINE_R_INTERNAL_LIST_ERROR);
			return 0;
		}
		engine_list_tail->next = e;
		e->prev = engine_list_tail;
	}
	/* Having the engine in the list assumes a structural
	 * reference. */
	e->struct_ref++;
	engine_ref_debug(e, 0, 1)
	/* However it came to be, e is the last item in the list. */
	engine_list_tail = e;
	e->next = NULL;
	return 1;
}

static int
engine_list_remove(ENGINE *e)
{
	ENGINE *iterator;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	/* We need to check that e is in our linked list! */
	iterator = engine_list_head;
	while (iterator && (iterator != e))
		iterator = iterator->next;
	if (iterator == NULL) {
		ENGINEerror(ENGINE_R_ENGINE_IS_NOT_IN_LIST);
		return 0;
	}
	/* un-link e from the chain. */
	if (e->next)
		e->next->prev = e->prev;
	if (e->prev)
		e->prev->next = e->next;
	/* Correct our head/tail if necessary. */
	if (engine_list_head == e)
		engine_list_head = e->next;
	if (engine_list_tail == e)
		engine_list_tail = e->prev;
	engine_free_util(e, 0);
	return 1;
}

/* Get the first/last "ENGINE" type available. */
ENGINE *
ENGINE_get_first(void)
{
	ENGINE *ret;

	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	ret = engine_list_head;
	if (ret) {
		ret->struct_ref++;
		engine_ref_debug(ret, 0, 1)
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	return ret;
}

ENGINE *
ENGINE_get_last(void)
{
	ENGINE *ret;

	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	ret = engine_list_tail;
	if (ret) {
		ret->struct_ref++;
		engine_ref_debug(ret, 0, 1)
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	return ret;
}

/* Iterate to the next/previous "ENGINE" type (NULL = end of the list). */
ENGINE *
ENGINE_get_next(ENGINE *e)
{
	ENGINE *ret = NULL;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	ret = e->next;
	if (ret) {
		/* Return a valid structural refernce to the next ENGINE */
		ret->struct_ref++;
		engine_ref_debug(ret, 0, 1)
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	/* Release the structural reference to the previous ENGINE */
	ENGINE_free(e);
	return ret;
}

ENGINE *
ENGINE_get_prev(ENGINE *e)
{
	ENGINE *ret = NULL;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	ret = e->prev;
	if (ret) {
		/* Return a valid structural reference to the next ENGINE */
		ret->struct_ref++;
		engine_ref_debug(ret, 0, 1)
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	/* Release the structural reference to the previous ENGINE */
	ENGINE_free(e);
	return ret;
}

/* Add another "ENGINE" type into the list. */
int
ENGINE_add(ENGINE *e)
{
	int to_return = 1;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	if ((e->id == NULL) || (e->name == NULL)) {
		ENGINEerror(ENGINE_R_ID_OR_NAME_MISSING);
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if (!engine_list_add(e)) {
		ENGINEerror(ENGINE_R_INTERNAL_LIST_ERROR);
		to_return = 0;
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	return to_return;
}

/* Remove an existing "ENGINE" type from the array. */
int
ENGINE_remove(ENGINE *e)
{
	int to_return = 1;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if (!engine_list_remove(e)) {
		ENGINEerror(ENGINE_R_INTERNAL_LIST_ERROR);
		to_return = 0;
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	return to_return;
}

static void
engine_cpy(ENGINE *dest, const ENGINE *src)
{
	dest->id = src->id;
	dest->name = src->name;
#ifndef OPENSSL_NO_RSA
	dest->rsa_meth = src->rsa_meth;
#endif
#ifndef OPENSSL_NO_DSA
	dest->dsa_meth = src->dsa_meth;
#endif
#ifndef OPENSSL_NO_DH
	dest->dh_meth = src->dh_meth;
#endif
#ifndef OPENSSL_NO_ECDH
	dest->ecdh_meth = src->ecdh_meth;
#endif
#ifndef OPENSSL_NO_ECDSA
	dest->ecdsa_meth = src->ecdsa_meth;
#endif
	dest->rand_meth = src->rand_meth;
	dest->store_meth = src->store_meth;
	dest->ciphers = src->ciphers;
	dest->digests = src->digests;
	dest->pkey_meths = src->pkey_meths;
	dest->destroy = src->destroy;
	dest->init = src->init;
	dest->finish = src->finish;
	dest->ctrl = src->ctrl;
	dest->load_privkey = src->load_privkey;
	dest->load_pubkey = src->load_pubkey;
	dest->cmd_defns = src->cmd_defns;
	dest->flags = src->flags;
}

ENGINE *
ENGINE_by_id(const char *id)
{
	ENGINE *iterator;

	if (id == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return NULL;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	iterator = engine_list_head;
	while (iterator && (strcmp(id, iterator->id) != 0))
		iterator = iterator->next;
	if (iterator) {
		/* We need to return a structural reference. If this is an
		 * ENGINE type that returns copies, make a duplicate - otherwise
		 * increment the existing ENGINE's reference count. */
		if (iterator->flags & ENGINE_FLAGS_BY_ID_COPY) {
			ENGINE *cp = ENGINE_new();
			if (!cp)
				iterator = NULL;
			else {
				engine_cpy(cp, iterator);
				iterator = cp;
			}
		} else {
			iterator->struct_ref++;
			engine_ref_debug(iterator, 0, 1)
		}
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);

	if (iterator == NULL) {
		ENGINEerror(ENGINE_R_NO_SUCH_ENGINE);
		ERR_asprintf_error_data("id=%s", id);
	}
	return iterator;
}

int
ENGINE_up_ref(ENGINE *e)
{
	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_add(&e->struct_ref, 1, CRYPTO_LOCK_ENGINE);
	return 1;
}
@


1.21
log
@abort when ENGINE_remove fails, fix Coverity 21656

ok doug@@, beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.20 2015/06/19 06:32:43 bcook Exp $ */
d108 1
a108 2
		ENGINEerr(ENGINE_F_ENGINE_LIST_ADD,
		    ERR_R_PASSED_NULL_PARAMETER);
d117 1
a117 2
		ENGINEerr(ENGINE_F_ENGINE_LIST_ADD,
		    ENGINE_R_CONFLICTING_ENGINE_ID);
d123 1
a123 2
			ENGINEerr(ENGINE_F_ENGINE_LIST_ADD,
			    ENGINE_R_INTERNAL_LIST_ERROR);
d135 1
a135 2
			ENGINEerr(ENGINE_F_ENGINE_LIST_ADD,
			    ENGINE_R_INTERNAL_LIST_ERROR);
d157 1
a157 2
		ENGINEerr(ENGINE_F_ENGINE_LIST_REMOVE,
		    ERR_R_PASSED_NULL_PARAMETER);
d165 1
a165 2
		ENGINEerr(ENGINE_F_ENGINE_LIST_REMOVE,
		    ENGINE_R_ENGINE_IS_NOT_IN_LIST);
d220 1
a220 2
		ENGINEerr(ENGINE_F_ENGINE_GET_NEXT,
		    ERR_R_PASSED_NULL_PARAMETER);
d242 1
a242 2
		ENGINEerr(ENGINE_F_ENGINE_GET_PREV,
		    ERR_R_PASSED_NULL_PARAMETER);
d265 1
a265 2
		ENGINEerr(ENGINE_F_ENGINE_ADD,
		    ERR_R_PASSED_NULL_PARAMETER);
d269 1
a269 2
		ENGINEerr(ENGINE_F_ENGINE_ADD,
		    ENGINE_R_ID_OR_NAME_MISSING);
d273 1
a273 2
		ENGINEerr(ENGINE_F_ENGINE_ADD,
		    ENGINE_R_INTERNAL_LIST_ERROR);
d287 1
a287 2
		ENGINEerr(ENGINE_F_ENGINE_REMOVE,
		    ERR_R_PASSED_NULL_PARAMETER);
d292 1
a292 2
		ENGINEerr(ENGINE_F_ENGINE_REMOVE,
		    ENGINE_R_INTERNAL_LIST_ERROR);
d340 1
a340 2
		ENGINEerr(ENGINE_F_ENGINE_BY_ID,
		    ERR_R_PASSED_NULL_PARAMETER);
d367 1
a367 1
		ENGINEerr(ENGINE_F_ENGINE_BY_ID, ENGINE_R_NO_SUCH_ENGINE);
d377 1
a377 1
		ENGINEerr(ENGINE_F_ENGINE_UP_REF, ERR_R_PASSED_NULL_PARAMETER);
@


1.20
log
@Return the failing engine ID in the error stack.

Noted by doug@@ in an earlier revision of the dynamic engine removal patch, but
I had forgotten to include it in the latest version.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.19 2015/06/19 06:05:11 bcook Exp $ */
d95 1
a95 2
	while (iterator != NULL) {
		ENGINE_remove(iterator);
a96 2
	}
	return;
@


1.19
log
@Disable ENGINE_load_dynamic (dynamic engine support).

We do not build, test or ship any dynamic engines, so we can remove the dynamic
engine loader as well. This leaves a stub initialization function in its place.

ok beck@@, reyk@@, miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.18 2015/04/11 16:03:21 deraadt Exp $ */
d383 1
a383 1
	if (iterator == NULL)
d385 2
@


1.18
log
@Remove all getenv() calls, especially those wrapped by issetugid().
getenv()'s wrapped by issetugid() are safe, but issetugid() is correct
difficult to impliment on many operating systems.  By accident, a grand
experiment was run over the last year, where issetugid() returned 1 (the
safe value) on a few operating systems.  Noone noticed & complained that
certain environment variables were not working.......
ok doug beck jsing, discussion with others
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.17 2015/02/11 03:19:37 doug Exp $ */
a353 1
	char *load_dir = NULL;
d383 3
a385 24
	/* EEK! Experimental code starts */
	if (iterator)
		return iterator;
	/* Prevent infinite recusrion if we're looking for the dynamic engine. */
	if (strcmp(id, "dynamic")) {
		load_dir = ENGINESDIR;

		iterator = ENGINE_by_id("dynamic");
		if (!iterator ||
		    !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
		    !ENGINE_ctrl_cmd_string(iterator, "DIR_LOAD", "2", 0) ||
		    !ENGINE_ctrl_cmd_string(iterator, "DIR_ADD", load_dir, 0) ||
		    !ENGINE_ctrl_cmd_string(iterator, "LIST_ADD", "1", 0) ||
		    !ENGINE_ctrl_cmd_string(iterator, "LOAD", NULL, 0))
			goto notfound;
		return iterator;
	}

notfound:
	ENGINE_free(iterator);
	ENGINEerr(ENGINE_F_ENGINE_BY_ID, ENGINE_R_NO_SUCH_ENGINE);
	ERR_asprintf_error_data("id=%s", id);
	return NULL;
	/* EEK! Experimental code ends */
@


1.17
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.16 2015/02/07 13:19:15 doug Exp $ */
d389 1
a389 6
		if (issetugid() == 0) {
			load_dir = getenv("OPENSSL_ENGINES");
			if (load_dir == NULL)
				load_dir = ENGINESDIR;
		} else
			load_dir = ENGINESDIR;
@


1.16
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.15 2014/07/11 08:44:48 jsing Exp $ */
d68 2
@


1.15
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.14 2014/07/10 22:45:57 jsing Exp $ */
d381 1
a381 8
#if 0
	if (iterator == NULL) {
		ENGINEerr(ENGINE_F_ENGINE_BY_ID,
		    ENGINE_R_NO_SUCH_ENGINE);
		ERR_asprintf_error_data("id=%s", id);
	}
	return iterator;
#else
a410 1
#endif
@


1.14
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.13 2014/07/10 13:58:22 jsing Exp $ */
d69 1
@


1.13
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.12 2014/06/29 00:52:18 deraadt Exp $ */
d66 2
@


1.12
log
@correct issetugid sense as spotted by Stijn van Drongelen.
Substantially expand the conditional to reduce potential for error.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.11 2014/06/23 22:19:02 deraadt Exp $ */
d63 3
@


1.11
log
@Since this is a library, place issetugid() before every getenv()
ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.10 2014/06/22 12:15:53 jsing Exp $ */
d388 5
a392 2
		if (issetugid() == 0 ||
		    (load_dir = getenv("OPENSSL_ENGINES")) == 0)
d394 1
@


1.10
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_list.c,v 1.9 2014/06/12 15:49:29 deraadt Exp $ */
d388 2
a389 1
		if ((load_dir = getenv("OPENSSL_ENGINES")) == 0)
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d60 1
a60 1
 * ECDH support in OpenSSL originally developed by 
d82 3
a84 2
static void engine_list_cleanup(void)
	{
d87 1
a87 2
	while(iterator != NULL)
		{
d90 1
a90 1
		}
d92 1
a92 1
	}
d96 3
a98 2
static int engine_list_add(ENGINE *e)
	{
d102 1
a102 2
	if(e == NULL)
		{
d104 1
a104 1
			ERR_R_PASSED_NULL_PARAMETER);
d106 1
a106 1
		}
d108 1
a108 2
	while(iterator && !conflict)
		{
d111 2
a112 3
		}
	if(conflict)
		{
d114 1
a114 1
			ENGINE_R_CONFLICTING_ENGINE_ID);
d116 2
a117 3
		}
	if(engine_list_head == NULL)
		{
d119 1
a119 2
		if(engine_list_tail)
			{
d121 1
a121 1
				ENGINE_R_INTERNAL_LIST_ERROR);
d123 1
a123 1
			}
d129 1
a129 3
		}
	else
		{
d131 2
a132 3
		if((engine_list_tail == NULL) ||
				(engine_list_tail->next != NULL))
			{
d134 1
a134 1
				ENGINE_R_INTERNAL_LIST_ERROR);
d136 1
a136 1
			}
d139 1
a139 1
		}
d148 1
a148 1
	}
d150 3
a152 2
static int engine_list_remove(ENGINE *e)
	{
d155 1
a155 2
	if(e == NULL)
		{
d157 1
a157 1
			ERR_R_PASSED_NULL_PARAMETER);
d159 1
a159 1
		}
d162 1
a162 1
	while(iterator && (iterator != e))
d164 1
a164 2
	if(iterator == NULL)
		{
d166 1
a166 1
			ENGINE_R_ENGINE_IS_NOT_IN_LIST);
d168 1
a168 1
		}
d170 1
a170 1
	if(e->next)
d172 1
a172 1
	if(e->prev)
d175 1
a175 1
	if(engine_list_head == e)
d177 1
a177 1
	if(engine_list_tail == e)
d181 1
a181 1
	}
d184 3
a186 2
ENGINE *ENGINE_get_first(void)
	{
d191 1
a191 2
	if(ret)
		{
d194 1
a194 1
		}
d197 1
a197 1
	}
d199 3
a201 2
ENGINE *ENGINE_get_last(void)
	{
d206 1
a206 2
	if(ret)
		{
d209 1
a209 1
		}
d212 1
a212 1
	}
d215 3
a217 2
ENGINE *ENGINE_get_next(ENGINE *e)
	{
d219 2
a220 2
	if(e == NULL)
		{
d222 1
a222 1
			ERR_R_PASSED_NULL_PARAMETER);
d224 1
a224 1
		}
d227 1
a227 2
	if(ret)
		{
d231 1
a231 1
		}
d236 1
a236 1
	}
d238 3
a240 2
ENGINE *ENGINE_get_prev(ENGINE *e)
	{
d242 2
a243 2
	if(e == NULL)
		{
d245 1
a245 1
			ERR_R_PASSED_NULL_PARAMETER);
d247 1
a247 1
		}
d250 1
a250 2
	if(ret)
		{
d254 1
a254 1
		}
d259 1
a259 1
	}
d262 3
a264 2
int ENGINE_add(ENGINE *e)
	{
d266 2
a267 2
	if(e == NULL)
		{
d269 1
a269 1
			ERR_R_PASSED_NULL_PARAMETER);
d271 2
a272 3
		}
	if((e->id == NULL) || (e->name == NULL))
		{
d274 2
a275 2
			ENGINE_R_ID_OR_NAME_MISSING);
		}
d277 1
a277 2
	if(!engine_list_add(e))
		{
d279 1
a279 1
			ENGINE_R_INTERNAL_LIST_ERROR);
d281 1
a281 1
		}
d284 1
a284 1
	}
d287 3
a289 2
int ENGINE_remove(ENGINE *e)
	{
d291 2
a292 2
	if(e == NULL)
		{
d294 1
a294 1
			ERR_R_PASSED_NULL_PARAMETER);
d296 1
a296 1
		}
d298 1
a298 2
	if(!engine_list_remove(e))
		{
d300 1
a300 1
			ENGINE_R_INTERNAL_LIST_ERROR);
d302 1
a302 1
		}
d305 1
a305 1
	}
d307 3
a309 2
static void engine_cpy(ENGINE *dest, const ENGINE *src)
	{
d340 1
a340 1
	}
d342 3
a344 2
ENGINE *ENGINE_by_id(const char *id)
	{
d347 2
a348 2
	if(id == NULL)
		{
d350 1
a350 1
			ERR_R_PASSED_NULL_PARAMETER);
d352 1
a352 1
		}
d355 1
a355 1
	while(iterator && (strcmp(id, iterator->id) != 0))
d357 1
a357 2
	if(iterator)
		{
d361 1
a361 2
		if(iterator->flags & ENGINE_FLAGS_BY_ID_COPY)
			{
d363 1
a363 1
			if(!cp)
d365 1
a365 2
			else
				{
a367 1
				}
d369 1
a369 2
		else
			{
a371 1
			}
d373 1
d376 1
a376 2
	if(iterator == NULL)
		{
d378 1
a378 1
			ENGINE_R_NO_SUCH_ENGINE);
d380 1
a380 1
		}
d384 2
a385 1
	if(iterator) return iterator;
d387 3
a389 3
	if (strcmp(id, "dynamic"))
		{
		if((load_dir = getenv("OPENSSL_ENGINES")) == 0) load_dir = ENGINESDIR;
d391 7
a397 7
		if(!iterator || !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
				!ENGINE_ctrl_cmd_string(iterator, "DIR_LOAD", "2", 0) ||
				!ENGINE_ctrl_cmd_string(iterator, "DIR_ADD",
					load_dir, 0) ||
				!ENGINE_ctrl_cmd_string(iterator, "LIST_ADD", "1", 0) ||
				!ENGINE_ctrl_cmd_string(iterator, "LOAD", NULL, 0))
				goto notfound;
d399 2
a400 1
		}
d403 1
a403 1
	ENGINEerr(ENGINE_F_ENGINE_BY_ID,ENGINE_R_NO_SUCH_ENGINE);
d408 1
a408 1
	}
d410 5
a414 5
int ENGINE_up_ref(ENGINE *e)
	{
	if (e == NULL)
		{
		ENGINEerr(ENGINE_F_ENGINE_UP_REF,ERR_R_PASSED_NULL_PARAMETER);
d416 2
a417 2
		}
	CRYPTO_add(&e->struct_ref,1,CRYPTO_LOCK_ENGINE);
d419 1
a419 1
	}
@


1.8
log
@
kill some more VMS ifdefs
ok miod@@
@
text
@d1 1
a1 1
/* crypto/engine/eng_list.c */
@


1.7
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@a400 3
#ifdef OPENSSL_SYS_VMS
		if((load_dir = getenv("OPENSSL_ENGINES")) == 0) load_dir = "SSLROOT:[ENGINES]";
#else
a401 1
#endif
@


1.6
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d392 1
a392 1
		ERR_add_error_data(2, "id=", id);
d419 1
a419 1
	ERR_add_error_data(2, "id=", id);
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d411 1
@


1.4
log
@resolve conflicts
@
text
@d339 1
d416 1
@


1.3
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d58 5
a63 2
#include <openssl/crypto.h>
#include "cryptlib.h"
a64 1
#include <openssl/engine.h>
d329 6
d336 1
d352 1
d386 1
d394 26
@


1.2
log
@remove whitespace changes (keep diffs to 0.9.7-beta1 minimal)
@
text
@d194 1
a194 1
	CRYPTO_r_lock(CRYPTO_LOCK_ENGINE);
d201 1
a201 1
	CRYPTO_r_unlock(CRYPTO_LOCK_ENGINE);
d209 2
a210 2
	CRYPTO_r_lock(CRYPTO_LOCK_ENGINE);
		ret = engine_list_tail;
d216 1
a216 1
	CRYPTO_r_unlock(CRYPTO_LOCK_ENGINE);
d230 1
a230 1
	CRYPTO_r_lock(CRYPTO_LOCK_ENGINE);
d238 1
a238 1
	CRYPTO_r_unlock(CRYPTO_LOCK_ENGINE);
d253 1
a253 1
	CRYPTO_r_lock(CRYPTO_LOCK_ENGINE);
d261 1
a261 1
	CRYPTO_r_unlock(CRYPTO_LOCK_ENGINE);
d349 1
a349 1
	CRYPTO_r_lock(CRYPTO_LOCK_ENGINE);
d375 1
a375 1
	CRYPTO_r_unlock(CRYPTO_LOCK_ENGINE);
d383 11
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d351 1
a351 1
	while(iterator && (strcmp(id, iterator->id) != 0)) 
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d351 1
a351 1
	while(iterator && (strcmp(id, iterator->id) != 0))
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d194 1
a194 1
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
d201 1
a201 1
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
d209 2
a210 2
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	ret = engine_list_tail;
d216 1
a216 1
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
d230 1
a230 1
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
d238 1
a238 1
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
d253 1
a253 1
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
d261 1
a261 1
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
d349 1
a349 1
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
d375 1
a375 1
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
a382 11
	}

int ENGINE_up_ref(ENGINE *e)
	{
	if (e == NULL)
		{
		ENGINEerr(ENGINE_F_ENGINE_UP_REF,ERR_R_PASSED_NULL_PARAMETER);
		return 0;
		}
	CRYPTO_add(&e->struct_ref,1,CRYPTO_LOCK_ENGINE);
	return 1;
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a57 5
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * ECDH support in OpenSSL originally developed by 
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */
d59 2
d62 1
a326 6
#ifndef OPENSSL_NO_ECDH
	dest->ecdh_meth = src->ecdh_meth;
#endif
#ifndef OPENSSL_NO_ECDSA
	dest->ecdsa_meth = src->ecdsa_meth;
#endif
a327 1
	dest->store_meth = src->store_meth;
a342 1
	char *load_dir = NULL;
a375 1
#if 0
a382 26
#else
	/* EEK! Experimental code starts */
	if(iterator) return iterator;
	/* Prevent infinite recusrion if we're looking for the dynamic engine. */
	if (strcmp(id, "dynamic"))
		{
#ifdef OPENSSL_SYS_VMS
		if((load_dir = getenv("OPENSSL_ENGINES")) == 0) load_dir = "SSLROOT:[ENGINES]";
#else
		if((load_dir = getenv("OPENSSL_ENGINES")) == 0) load_dir = ENGINESDIR;
#endif
		iterator = ENGINE_by_id("dynamic");
		if(!iterator || !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
				!ENGINE_ctrl_cmd_string(iterator, "DIR_LOAD", "2", 0) ||
				!ENGINE_ctrl_cmd_string(iterator, "DIR_ADD",
					load_dir, 0) ||
				!ENGINE_ctrl_cmd_string(iterator, "LOAD", NULL, 0))
				goto notfound;
		return iterator;
		}
notfound:
	ENGINEerr(ENGINE_F_ENGINE_BY_ID,ENGINE_R_NO_SUCH_ENGINE);
	ERR_add_error_data(2, "id=", id);
	return NULL;
	/* EEK! Experimental code ends */
#endif
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a338 1
	dest->pkey_meths = src->pkey_meths;
a414 1
	ENGINE_free(iterator);
@


1.1.1.5
log
@Import OpenSSL 1.0.1g
@
text
@a410 1
				!ENGINE_ctrl_cmd_string(iterator, "LIST_ADD", "1", 0) ||
@


