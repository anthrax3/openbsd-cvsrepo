head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.06.10.14.56.02;	author jsing;	state Exp;
branches;
next	1.4;
commitid	2n7gmOYJzyqUlDh5;

1.4
date	2014.04.27.20.20.59;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.24;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.15;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@tags as requested by miod and tedu
@
text
@/* $OpenBSD$ */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include "eng_int.h"

/* If this symbol is defined then ENGINE_get_default_RSA(), the function that is
 * used by RSA to hook in implementation code and cache defaults (etc), will
 * display brief debugging summaries to stderr with the 'nid'. */
/* #define ENGINE_RSA_DEBUG */

static ENGINE_TABLE *rsa_table = NULL;
static const int dummy_nid = 1;

void
ENGINE_unregister_RSA(ENGINE *e)
{
	engine_table_unregister(&rsa_table, e);
}

static void
engine_unregister_all_RSA(void)
{
	engine_table_cleanup(&rsa_table);
}

int
ENGINE_register_RSA(ENGINE *e)
{
	if (e->rsa_meth)
		return engine_table_register(&rsa_table,
		    engine_unregister_all_RSA, e, &dummy_nid, 1, 0);
	return 1;
}

void
ENGINE_register_all_RSA(void)
{
	ENGINE *e;

	for (e = ENGINE_get_first(); e; e = ENGINE_get_next(e))
		ENGINE_register_RSA(e);
}

int
ENGINE_set_default_RSA(ENGINE *e)
{
	if (e->rsa_meth)
		return engine_table_register(&rsa_table,
		    engine_unregister_all_RSA, e, &dummy_nid, 1, 1);
	return 1;
}

/* Exposed API function to get a functional reference from the implementation
 * table (ie. try to get a functional reference from the tabled structural
 * references). */
ENGINE *
ENGINE_get_default_RSA(void)
{
	return engine_table_select(&rsa_table, dummy_nid);
}

/* Obtains an RSA implementation from an ENGINE functional reference */
const RSA_METHOD *
ENGINE_get_RSA(const ENGINE *e)
{
	return e->rsa_meth;
}

/* Sets an RSA implementation in an ENGINE structure */
int
ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth)
{
	e->rsa_meth = rsa_meth;
	return 1;
}
@


1.5
log
@KNF.
@
text
@d1 1
@


1.4
log
@Put explicit (void) in function declarations and shuffle keywords in some
declaration to pass -Wextra, should we want to add it to CFLAGS.
No binary change.
@
text
@d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer. 
d65 3
a67 2
void ENGINE_unregister_RSA(ENGINE *e)
	{
d69 1
a69 1
	}
d71 3
a73 2
static void engine_unregister_all_RSA(void)
	{
d75 1
a75 1
	}
d77 4
a80 3
int ENGINE_register_RSA(ENGINE *e)
	{
	if(e->rsa_meth)
d82 1
a82 1
				engine_unregister_all_RSA, e, &dummy_nid, 1, 0);
d84 1
a84 1
	}
d86 3
a88 2
void ENGINE_register_all_RSA(void)
	{
d91 1
a91 1
	for(e=ENGINE_get_first() ; e ; e=ENGINE_get_next(e))
d93 1
a93 1
	}
d95 4
a98 3
int ENGINE_set_default_RSA(ENGINE *e)
	{
	if(e->rsa_meth)
d100 1
a100 1
				engine_unregister_all_RSA, e, &dummy_nid, 1, 1);
d102 1
a102 1
	}
d107 3
a109 2
ENGINE *ENGINE_get_default_RSA(void)
	{
d111 1
a111 1
	}
d114 3
a116 2
const RSA_METHOD *ENGINE_get_RSA(const ENGINE *e)
	{
d118 1
a118 1
	}
d121 3
a123 2
int ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth)
	{
d126 1
a126 1
	}
@


1.3
log
@resolve conflicts
@
text
@d83 1
a83 1
void ENGINE_register_all_RSA()
@


1.2
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@a54 2
#include <openssl/evp.h>
#include <openssl/engine.h>
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d81 1
a81 1
				&engine_unregister_all_RSA, e, &dummy_nid, 1, 0);
d97 1
a97 1
				&engine_unregister_all_RSA, e, &dummy_nid, 1, 1);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d81 1
a81 1
				engine_unregister_all_RSA, e, &dummy_nid, 1, 0);
d97 1
a97 1
				engine_unregister_all_RSA, e, &dummy_nid, 1, 1);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d55 2
@


