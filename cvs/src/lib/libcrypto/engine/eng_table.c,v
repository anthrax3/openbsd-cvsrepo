head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.8;
commitid	kT0fLt3r4lroFJra;

1.8
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.7;
commitid	5KSZBoxiLebzObKt;

1.7
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.6;
commitid	yQEL1wOWIearrW15;

1.6
date	2014.06.22.12.05.09;	author jsing;	state Exp;
branches;
next	1.5;
commitid	6PKo4InI2wtFRRxh;

1.5
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.20;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: eng_table.c,v 1.8 2015/02/11 03:19:37 doug Exp $ */
/* ====================================================================
 * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/lhash.h>

#include "eng_int.h"

/* The type of the items in the table */
typedef struct st_engine_pile {
	/* The 'nid' of this algorithm/mode */
	int nid;
	/* ENGINEs that implement this algorithm/mode. */
	STACK_OF(ENGINE) *sk;
	/* The default ENGINE to perform this algorithm/mode. */
	ENGINE *funct;
	/* Zero if 'sk' is newer than the cached 'funct', non-zero otherwise */
	int uptodate;
} ENGINE_PILE;

DECLARE_LHASH_OF(ENGINE_PILE);

/* The type exposed in eng_int.h */
struct st_engine_table {
	LHASH_OF(ENGINE_PILE) piles;
}; /* ENGINE_TABLE */

typedef struct st_engine_pile_doall {
	engine_table_doall_cb *cb;
	void *arg;
} ENGINE_PILE_DOALL;

/* Global flags (ENGINE_TABLE_FLAG_***). */
static unsigned int table_flags = 0;

/* API function manipulating 'table_flags' */
unsigned int
ENGINE_get_table_flags(void)
{
	return table_flags;
}

void
ENGINE_set_table_flags(unsigned int flags)
{
	table_flags = flags;
}

/* Internal functions for the "piles" hash table */
static unsigned long
engine_pile_hash(const ENGINE_PILE *c)
{
	return c->nid;
}

static int
engine_pile_cmp(const ENGINE_PILE *a, const ENGINE_PILE *b)
{
	return a->nid - b->nid;
}
static IMPLEMENT_LHASH_HASH_FN(engine_pile, ENGINE_PILE)
static IMPLEMENT_LHASH_COMP_FN(engine_pile, ENGINE_PILE)

static int
int_table_check(ENGINE_TABLE **t, int create)
{
	LHASH_OF(ENGINE_PILE) *lh;

	if (*t)
		return 1;
	if (!create)
		return 0;
	if ((lh = lh_ENGINE_PILE_new()) == NULL)
		return 0;
	*t = (ENGINE_TABLE *)lh;
	return 1;
}

/* Privately exposed (via eng_int.h) functions for adding and/or removing
 * ENGINEs from the implementation table */
int
engine_table_register(ENGINE_TABLE **table, ENGINE_CLEANUP_CB *cleanup,
    ENGINE *e, const int *nids, int num_nids, int setdefault)
{
	int ret = 0, added = 0;
	ENGINE_PILE tmplate, *fnd;

	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if (!(*table))
		added = 1;
	if (!int_table_check(table, 1))
		goto end;
	if (added)
		/* The cleanup callback needs to be added */
		engine_cleanup_add_first(cleanup);
	while (num_nids--) {
		tmplate.nid = *nids;
		fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
		if (!fnd) {
			fnd = malloc(sizeof(ENGINE_PILE));
			if (!fnd)
				goto end;
			fnd->uptodate = 1;
			fnd->nid = *nids;
			fnd->sk = sk_ENGINE_new_null();
			if (!fnd->sk) {
				free(fnd);
				goto end;
			}
			fnd->funct = NULL;
			(void)lh_ENGINE_PILE_insert(&(*table)->piles, fnd);
		}
		/* A registration shouldn't add duplciate entries */
		(void)sk_ENGINE_delete_ptr(fnd->sk, e);
		/* if 'setdefault', this ENGINE goes to the head of the list */
		if (!sk_ENGINE_push(fnd->sk, e))
			goto end;
		/* "touch" this ENGINE_PILE */
		fnd->uptodate = 0;
		if (setdefault) {
			if (!engine_unlocked_init(e)) {
				ENGINEerror(ENGINE_R_INIT_FAILED);
				goto end;
			}
			if (fnd->funct)
				engine_unlocked_finish(fnd->funct, 0);
			fnd->funct = e;
			fnd->uptodate = 1;
		}
		nids++;
	}
	ret = 1;
end:
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	return ret;
}

static void
int_unregister_cb_doall_arg(ENGINE_PILE *pile, ENGINE *e)
{
	int n;

	/* Iterate the 'c->sk' stack removing any occurance of 'e' */
	while ((n = sk_ENGINE_find(pile->sk, e)) >= 0) {
		(void)sk_ENGINE_delete(pile->sk, n);
		pile->uptodate = 0;
	}
	if (pile->funct == e) {
		engine_unlocked_finish(e, 0);
		pile->funct = NULL;
	}
}
static IMPLEMENT_LHASH_DOALL_ARG_FN(int_unregister_cb, ENGINE_PILE, ENGINE)

void
engine_table_unregister(ENGINE_TABLE **table, ENGINE *e)
{
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if (int_table_check(table, 0))
		lh_ENGINE_PILE_doall_arg(&(*table)->piles,
		    LHASH_DOALL_ARG_FN(int_unregister_cb), ENGINE, e);
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
}

static void
int_cleanup_cb_doall(ENGINE_PILE *p)
{
	sk_ENGINE_free(p->sk);
	if (p->funct)
		engine_unlocked_finish(p->funct, 0);
	free(p);
}
static IMPLEMENT_LHASH_DOALL_FN(int_cleanup_cb, ENGINE_PILE)

void
engine_table_cleanup(ENGINE_TABLE **table)
{
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	if (*table) {
		lh_ENGINE_PILE_doall(&(*table)->piles,
		    LHASH_DOALL_FN(int_cleanup_cb));
		lh_ENGINE_PILE_free(&(*table)->piles);
		*table = NULL;
	}
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
}

/* return a functional reference for a given 'nid' */
#ifndef ENGINE_TABLE_DEBUG
ENGINE *
engine_table_select(ENGINE_TABLE **table, int nid)
#else
ENGINE *
engine_table_select_tmp(ENGINE_TABLE **table, int nid, const char *f, int l)
#endif
{
	ENGINE *ret = NULL;
	ENGINE_PILE tmplate, *fnd = NULL;
	int initres, loop = 0;

	if (!(*table)) {
#ifdef ENGINE_TABLE_DEBUG
		fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, nothing "
		    "registered!\n", f, l, nid);
#endif
		return NULL;
	}
	ERR_set_mark();
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	/* Check again inside the lock otherwise we could race against cleanup
	 * operations. But don't worry about a fprintf(stderr). */
	if (!int_table_check(table, 0))
		goto end;
	tmplate.nid = nid;
	fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
	if (!fnd)
		goto end;
	if (fnd->funct && engine_unlocked_init(fnd->funct)) {
#ifdef ENGINE_TABLE_DEBUG
		fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
		    "ENGINE '%s' cached\n", f, l, nid, fnd->funct->id);
#endif
		ret = fnd->funct;
		goto end;
	}
	if (fnd->uptodate) {
		ret = fnd->funct;
		goto end;
	}
trynext:
	ret = sk_ENGINE_value(fnd->sk, loop++);
	if (!ret) {
#ifdef ENGINE_TABLE_DEBUG
		fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, no "
		    "registered implementations would initialise\n", f, l, nid);
#endif
		goto end;
	}
	/* Try to initialise the ENGINE? */
	if ((ret->funct_ref > 0) || !(table_flags & ENGINE_TABLE_FLAG_NOINIT))
		initres = engine_unlocked_init(ret);
	else
		initres = 0;
	if (initres) {
		/* Update 'funct' */
		if ((fnd->funct != ret) && engine_unlocked_init(ret)) {
			/* If there was a previous default we release it. */
			if (fnd->funct)
				engine_unlocked_finish(fnd->funct, 0);
			fnd->funct = ret;
#ifdef ENGINE_TABLE_DEBUG
			fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, "
			    "setting default to '%s'\n", f, l, nid, ret->id);
#endif
		}
#ifdef ENGINE_TABLE_DEBUG
		fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, using "
		    "newly initialised '%s'\n", f, l, nid, ret->id);
#endif
		goto end;
	}
	goto trynext;
end:
	/* If it failed, it is unlikely to succeed again until some future
	 * registrations have taken place. In all cases, we cache. */
	if (fnd)
		fnd->uptodate = 1;
#ifdef ENGINE_TABLE_DEBUG
	if (ret)
		fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
		    "ENGINE '%s'\n", f, l, nid, ret->id);
	else
		fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, caching "
		    "'no matching ENGINE'\n", f, l, nid);
#endif
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	/* Whatever happened, any failed init()s are not failures in this
	 * context, so clear our error state. */
	ERR_pop_to_mark();
	return ret;
}

/* Table enumeration */

static void
int_cb_doall_arg(ENGINE_PILE *pile, ENGINE_PILE_DOALL *dall)
{
	dall->cb(pile->nid, pile->sk, pile->funct, dall->arg);
}
static IMPLEMENT_LHASH_DOALL_ARG_FN(int_cb, ENGINE_PILE, ENGINE_PILE_DOALL)

void
engine_table_doall(ENGINE_TABLE *table, engine_table_doall_cb *cb, void *arg)
{
	ENGINE_PILE_DOALL dall;

	dall.cb = cb;
	dall.arg = arg;
	lh_ENGINE_PILE_doall_arg(&table->piles, LHASH_DOALL_ARG_FN(int_cb),
	    ENGINE_PILE_DOALL, &dall);
}
@


1.8
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_table.c,v 1.7 2014/07/11 08:44:48 jsing Exp $ */
d175 1
a175 2
				ENGINEerr(ENGINE_F_ENGINE_TABLE_REGISTER,
				    ENGINE_R_INIT_FAILED);
@


1.7
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_table.c,v 1.6 2014/06/22 12:05:09 jsing Exp $ */
d56 1
@


1.6
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_table.c,v 1.5 2014/06/12 15:49:29 deraadt Exp $ */
a55 1
#include "cryptlib.h"
d58 1
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d62 1
a62 2
typedef struct st_engine_pile
	{
d71 1
a71 1
	} ENGINE_PILE;
d76 1
a76 2
struct st_engine_table
	{
d78 1
a78 1
	}; /* ENGINE_TABLE */
d80 1
a80 3

typedef struct st_engine_pile_doall
	{
d83 1
a83 2
	} ENGINE_PILE_DOALL;
	
d89 3
a91 2
unsigned int ENGINE_get_table_flags(void)
	{
d93 1
a93 1
	}
d95 3
a97 2
void ENGINE_set_table_flags(unsigned int flags)
	{
d99 1
a99 1
	}
d102 3
a104 2
static unsigned long engine_pile_hash(const ENGINE_PILE *c)
	{
d106 1
a106 1
	}
d108 3
a110 2
static int engine_pile_cmp(const ENGINE_PILE *a, const ENGINE_PILE *b)
	{
d112 1
a112 1
	}
d116 3
a118 2
static int int_table_check(ENGINE_TABLE **t, int create)
	{
d121 5
a125 3
	if(*t) return 1;
	if(!create) return 0;
	if((lh = lh_ENGINE_PILE_new()) == NULL)
d129 1
a129 1
	}
d133 4
a136 3
int engine_table_register(ENGINE_TABLE **table, ENGINE_CLEANUP_CB *cleanup,
		ENGINE *e, const int *nids, int num_nids, int setdefault)
	{
d139 1
d141 1
a141 1
	if(!(*table))
d143 1
a143 1
	if(!int_table_check(table, 1))
d145 1
a145 1
	if(added)
d148 1
a148 2
	while(num_nids--)
		{
d151 1
a151 2
		if(!fnd)
			{
d153 2
a154 1
			if(!fnd) goto end;
d158 1
a158 2
			if(!fnd->sk)
				{
d161 1
a161 1
				}
d164 1
a164 1
			}
d168 1
a168 1
		if(!sk_ENGINE_push(fnd->sk, e))
d172 2
a173 4
		if(setdefault)
			{
			if(!engine_unlocked_init(e))
				{
d175 1
a175 1
						ENGINE_R_INIT_FAILED);
d177 2
a178 2
				}
			if(fnd->funct)
d182 1
a182 1
			}
d184 1
a184 1
		}
d189 5
a193 3
	}
static void int_unregister_cb_doall_arg(ENGINE_PILE *pile, ENGINE *e)
	{
d195 1
d197 1
a197 2
	while((n = sk_ENGINE_find(pile->sk, e)) >= 0)
		{
d200 2
a201 3
		}
	if(pile->funct == e)
		{
a203 1
		}
d205 1
d208 3
a210 2
void engine_table_unregister(ENGINE_TABLE **table, ENGINE *e)
	{
d212 1
a212 1
	if(int_table_check(table, 0))
d214 1
a214 2
					 LHASH_DOALL_ARG_FN(int_unregister_cb),
					 ENGINE, e);
d216 1
a216 1
	}
d218 3
a220 2
static void int_cleanup_cb_doall(ENGINE_PILE *p)
	{
d222 1
a222 1
	if(p->funct)
d225 1
a225 1
	}
d228 3
a230 2
void engine_table_cleanup(ENGINE_TABLE **table)
	{
d232 1
a232 2
	if(*table)
		{
d234 1
a234 1
				     LHASH_DOALL_FN(int_cleanup_cb));
d237 1
a237 1
		}
d239 1
a239 1
	}
d243 2
a244 1
ENGINE *engine_table_select(ENGINE_TABLE **table, int nid)
d246 2
a247 1
ENGINE *engine_table_select_tmp(ENGINE_TABLE **table, int nid, const char *f, int l)
d249 1
a249 1
	{
d251 1
a251 1
	ENGINE_PILE tmplate, *fnd=NULL;
d254 1
a254 2
	if(!(*table))
		{
d257 1
a257 1
			"registered!\n", f, l, nid);
d260 1
a260 1
		}
d265 2
a266 1
	if(!int_table_check(table, 0)) goto end;
d269 3
a271 3
	if(!fnd) goto end;
	if(fnd->funct && engine_unlocked_init(fnd->funct))
		{
d274 1
a274 1
			"ENGINE '%s' cached\n", f, l, nid, fnd->funct->id);
d278 2
a279 3
		}
	if(fnd->uptodate)
		{
d282 1
a282 1
		}
d285 1
a285 2
	if(!ret)
		{
d288 1
a288 2
				"registered implementations would initialise\n",
				f, l, nid);
d291 1
a291 1
		}
d293 1
a293 1
	if((ret->funct_ref > 0) || !(table_flags & ENGINE_TABLE_FLAG_NOINIT))
d297 1
a297 2
	if(initres)
		{
d299 1
a299 2
		if((fnd->funct != ret) && engine_unlocked_init(ret))
			{
d301 1
a301 1
			if(fnd->funct)
d306 1
a306 1
				"setting default to '%s'\n", f, l, nid, ret->id);
d308 1
a308 1
			}
d311 1
a311 1
				"newly initialised '%s'\n", f, l, nid, ret->id);
d314 1
a314 1
		}
d319 2
a320 1
	if(fnd) fnd->uptodate = 1;
d322 1
a322 1
	if(ret)
d324 1
a324 1
				"ENGINE '%s'\n", f, l, nid, ret->id);
d327 1
a327 1
				"'no matching ENGINE'\n", f, l, nid);
d334 1
a334 1
	}
d338 3
a340 2
static void int_cb_doall_arg(ENGINE_PILE *pile, ENGINE_PILE_DOALL *dall)
	{
d342 2
a343 2
	}
static IMPLEMENT_LHASH_DOALL_ARG_FN(int_cb, ENGINE_PILE,ENGINE_PILE_DOALL)
d345 3
a347 3
void engine_table_doall(ENGINE_TABLE *table, engine_table_doall_cb *cb,
								void *arg)
	{
d349 1
d353 2
a354 2
				 ENGINE_PILE_DOALL, &dall);
	}
@


1.4
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d1 1
@


1.3
log
@resolve conflicts, fix local changes
@
text
@d149 1
a149 1
			fnd = OPENSSL_malloc(sizeof(ENGINE_PILE));
d156 1
a156 1
				OPENSSL_free(fnd);
d221 1
a221 1
	OPENSSL_free(p);
@


1.2
log
@resolve conflicts
@
text
@d73 2
d78 1
a78 1
	LHASH piles;
d81 8
d97 1
d108 1
d113 3
a115 2
static IMPLEMENT_LHASH_HASH_FN(engine_pile_hash, const ENGINE_PILE *)
static IMPLEMENT_LHASH_COMP_FN(engine_pile_cmp, const ENGINE_PILE *)
d118 2
a119 1
	LHASH *lh;
d122 1
a122 2
	if((lh = lh_new(LHASH_HASH_FN(engine_pile_hash),
			LHASH_COMP_FN(engine_pile_cmp))) == NULL)
d146 1
a146 1
		fnd = lh_retrieve(&(*table)->piles, &tmplate);
d160 1
a160 1
			lh_insert(&(*table)->piles, fnd);
d189 1
a189 1
static void int_unregister_cb(ENGINE_PILE *pile, ENGINE *e)
d204 2
a205 1
static IMPLEMENT_LHASH_DOALL_ARG_FN(int_unregister_cb,ENGINE_PILE *,ENGINE *)
d210 3
a212 2
		lh_doall_arg(&(*table)->piles,
			LHASH_DOALL_ARG_FN(int_unregister_cb), e);
d216 1
a216 1
static void int_cleanup_cb(ENGINE_PILE *p)
d223 2
a224 1
static IMPLEMENT_LHASH_DOALL_FN(int_cleanup_cb,ENGINE_PILE *)
d230 3
a232 2
		lh_doall(&(*table)->piles, LHASH_DOALL_FN(int_cleanup_cb));
		lh_free(&(*table)->piles);
d257 1
d263 1
a263 1
	fnd = lh_retrieve(&(*table)->piles, &tmplate);
d331 1
a331 1
	ERR_clear_error();
d333 18
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d55 1
d57 1
a57 1
#include <openssl/engine.h>
a59 8
/* This is the type of item in the 'implementation' table. Each 'nid' hashes to
 * a (potentially NULL) ENGINE_PILE structure which contains a stack of ENGINE*
 * pointers. These pointers aren't references, because they're inserted and
 * removed during ENGINE creation and ENGINE destruction. They point to ENGINEs
 * that *exist* (ie. have a structural reference count greater than zero) rather
 * than ENGINEs that are *functional*. Each pointer in those stacks are to
 * ENGINEs that implements the algorithm corresponding to each 'nid'. */

d63 1
a63 2
	/* The 'nid' of the algorithm/mode this ENGINE_PILE structure represents
	 * */
d65 1
a65 4
	/* A stack of ENGINE pointers for ENGINEs that support this
	 * algorithm/mode. In the event that 'funct' is NULL, the first entry in
	 * this stack that initialises will be set as 'funct' and assumed as the
	 * default for operations of this type. */
d69 1
a69 4
	/* This value optimises engine_table_select(). If it is called it sets
	 * this value to 1. Any changes to this ENGINE_PILE resets it to zero.
	 * As such, no ENGINE_init() thrashing is done unless ENGINEs
	 * continually register (and/or unregister). */
d73 1
a73 2
/* The type of the hash table of ENGINE_PILE structures such that each are
 * unique and keyed by the 'nid' value. */
d79 1
a79 4
/* This value stores global options controlling behaviour of (mostly) the
 * engine_table_select() function. It's a bitmask of flag values of the form
 * ENGINE_TABLE_FLAG_*** (as defined in engine.h) and is controlled by the
 * ENGINE_[get|set]_table_flags() function. */
d106 2
a107 4
	if(*t)
		return 1;
	if(!create)
		return 0;
d137 1
a137 2
			if(!fnd)
				goto end;
d146 1
a146 1
			fnd->funct= NULL;
d150 1
a150 1
		sk_ENGINE_delete_ptr(fnd->sk, e);
d167 1
d182 1
a182 2
		sk_ENGINE_delete(pile->sk, n);
		/* "touch" this ENGINE_CIPHER */
d221 1
a221 3
/* Exposed API function to get a functional reference from the implementation
 * table (ie. try to get a functional reference from the tabled structural
 * references) for a given cipher 'nid' */
a231 2
	/* If 'engine_ciphers' is NULL, then it's absolutely *sure* that no
	 * ENGINEs have registered any implementations! */
d235 2
a236 2
		fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, no "
			"registered for anything!\n", f, l, nid);
d243 1
a243 2
	if(!int_table_check(table, 0))
		goto end;
d246 1
a246 2
	if(!fnd)
		goto end;
d272 1
a272 7
#if 0
	/* Don't need to get a reference if we hold the lock. If the locking has
	 * to change in future, that would be different ... */
	ret->struct_ref++; engine_ref_debug(ret, 0, 1)
#endif
	/* Try and initialise the ENGINE if it's already functional *or* if the
	 * ENGINE_TABLE_FLAG_NOINIT flag is not set. */
a276 4
#if 0
	/* Release the structural reference */
	ret->struct_ref--; engine_ref_debug(ret, 0, -1);
#endif
d279 1
a279 4
		/* If we didn't have a default (functional reference) for this
		 * 'nid' (or we had one but for whatever reason we're now
		 * initialising a different one), use this opportunity to set
		 * 'funct'. */
a284 2
			/* We got an extra functional reference for the
			 * per-'nid' default */
d299 3
a301 7
	/* Whatever happened - we should "untouch" our uptodate file seeing as
	 * we have tried our best to find a functional reference for 'nid'. If
	 * it failed, it is unlikely to succeed again until some future
	 * registrations (or unregistrations) have taken place that affect that
	 * 'nid'. */
	if(fnd)
		fnd->uptodate = 1;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@a54 1
#include "cryptlib.h"
d56 1
a56 1
#include <openssl/lhash.h>
d59 8
d70 2
a71 1
	/* The 'nid' of this algorithm/mode */
d73 4
a76 1
	/* ENGINEs that implement this algorithm/mode. */
d80 4
a83 1
	/* Zero if 'sk' is newer than the cached 'funct', non-zero otherwise */
d87 2
a88 1
/* The type exposed in eng_int.h */
d94 4
a97 1
/* Global flags (ENGINE_TABLE_FLAG_***). */
d124 4
a127 2
	if(*t) return 1;
	if(!create) return 0;
d157 2
a158 1
			if(!fnd) goto end;
d167 1
a167 1
			fnd->funct = NULL;
d171 1
a171 1
		(void)sk_ENGINE_delete_ptr(fnd->sk, e);
a187 1
			fnd->uptodate = 1;
d202 2
a203 1
		(void)sk_ENGINE_delete(pile->sk, n);
d242 3
a244 1
/* return a functional reference for a given 'nid' */
d255 2
d260 2
a261 2
		fprintf(stderr, "engine_table_dbg: %s:%d, nid=%d, nothing "
			"registered!\n", f, l, nid);
d268 2
a269 1
	if(!int_table_check(table, 0)) goto end;
d272 2
a273 1
	if(!fnd) goto end;
d299 7
a305 1
	/* Try to initialise the ENGINE? */
d310 4
d316 4
a319 1
		/* Update 'funct' */
d325 2
d341 7
a347 3
	/* If it failed, it is unlikely to succeed again until some future
	 * registrations have taken place. In all cases, we cache. */
	if(fnd) fnd->uptodate = 1;
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@a72 2
DECLARE_LHASH_OF(ENGINE_PILE);

d76 1
a76 1
	LHASH_OF(ENGINE_PILE) piles;
a78 8

typedef struct st_engine_pile_doall
	{
	engine_table_doall_cb *cb;
	void *arg;
	} ENGINE_PILE_DOALL;
	

a86 1

a96 1

d101 2
a102 3
static IMPLEMENT_LHASH_HASH_FN(engine_pile, ENGINE_PILE)
static IMPLEMENT_LHASH_COMP_FN(engine_pile, ENGINE_PILE)

d105 1
a105 2
	LHASH_OF(ENGINE_PILE) *lh;

d108 2
a109 1
	if((lh = lh_ENGINE_PILE_new()) == NULL)
d133 1
a133 1
		fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
d147 1
a147 1
			(void)lh_ENGINE_PILE_insert(&(*table)->piles, fnd);
d176 1
a176 1
static void int_unregister_cb_doall_arg(ENGINE_PILE *pile, ENGINE *e)
d191 1
a191 2
static IMPLEMENT_LHASH_DOALL_ARG_FN(int_unregister_cb, ENGINE_PILE, ENGINE)

d196 2
a197 3
		lh_ENGINE_PILE_doall_arg(&(*table)->piles,
					 LHASH_DOALL_ARG_FN(int_unregister_cb),
					 ENGINE, e);
d201 1
a201 1
static void int_cleanup_cb_doall(ENGINE_PILE *p)
d208 1
a208 2
static IMPLEMENT_LHASH_DOALL_FN(int_cleanup_cb, ENGINE_PILE)

d214 2
a215 3
		lh_ENGINE_PILE_doall(&(*table)->piles,
				     LHASH_DOALL_FN(int_cleanup_cb));
		lh_ENGINE_PILE_free(&(*table)->piles);
a239 1
	ERR_set_mark();
d245 1
a245 1
	fnd = lh_ENGINE_PILE_retrieve(&(*table)->piles, &tmplate);
d313 1
a313 1
	ERR_pop_to_mark();
a314 18
	}

/* Table enumeration */

static void int_cb_doall_arg(ENGINE_PILE *pile, ENGINE_PILE_DOALL *dall)
	{
	dall->cb(pile->nid, pile->sk, pile->funct, dall->arg);
	}
static IMPLEMENT_LHASH_DOALL_ARG_FN(int_cb, ENGINE_PILE,ENGINE_PILE_DOALL)

void engine_table_doall(ENGINE_TABLE *table, engine_table_doall_cb *cb,
								void *arg)
	{
	ENGINE_PILE_DOALL dall;
	dall.cb = cb;
	dall.arg = arg;
	lh_ENGINE_PILE_doall_arg(&table->piles, LHASH_DOALL_ARG_FN(int_cb),
				 ENGINE_PILE_DOALL, &dall);
@


