head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.2
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.11;
commitid	kT0fLt3r4lroFJra;

1.11
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.10;
commitid	5KSZBoxiLebzObKt;

1.10
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.9;
commitid	PjnBgKe6Buhbf937;

1.9
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.8;
commitid	id8dTrTMtnTn4fqt;

1.8
date	2014.06.22.12.05.09;	author jsing;	state Exp;
branches;
next	1.7;
commitid	6PKo4InI2wtFRRxh;

1.7
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	2nvnQBrv22dLtvTt;

1.5
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.20;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: eng_lib.c,v 1.11 2015/02/11 03:19:37 doug Exp $ */
/* Written by Geoff Thorpe (geoff@@geoffthorpe.net) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <string.h>

#include <openssl/err.h>
#include <openssl/rand.h>

#include "eng_int.h"

/* The "new"/"free" stuff first */

ENGINE *
ENGINE_new(void)
{
	ENGINE *ret;

	ret = malloc(sizeof(ENGINE));
	if (ret == NULL) {
		ENGINEerror(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	memset(ret, 0, sizeof(ENGINE));
	ret->struct_ref = 1;
	engine_ref_debug(ret, 0, 1)
	CRYPTO_new_ex_data(CRYPTO_EX_INDEX_ENGINE, ret, &ret->ex_data);
	return ret;
}

/* Placed here (close proximity to ENGINE_new) so that modifications to the
 * elements of the ENGINE structure are more likely to be caught and changed
 * here. */
void
engine_set_all_null(ENGINE *e)
{
	e->id = NULL;
	e->name = NULL;
	e->rsa_meth = NULL;
	e->dsa_meth = NULL;
	e->dh_meth = NULL;
	e->rand_meth = NULL;
	e->store_meth = NULL;
	e->ciphers = NULL;
	e->digests = NULL;
	e->destroy = NULL;
	e->init = NULL;
	e->finish = NULL;
	e->ctrl = NULL;
	e->load_privkey = NULL;
	e->load_pubkey = NULL;
	e->cmd_defns = NULL;
	e->flags = 0;
}

int
engine_free_util(ENGINE *e, int locked)
{
	int i;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	if (locked)
		i = CRYPTO_add(&e->struct_ref, -1, CRYPTO_LOCK_ENGINE);
	else
		i = --e->struct_ref;
	engine_ref_debug(e, 0, -1)
	if (i > 0)
		return 1;

	/* Free up any dynamically allocated public key methods */
	engine_pkey_meths_free(e);
	engine_pkey_asn1_meths_free(e);
	/* Give the ENGINE a chance to do any structural cleanup corresponding
	 * to allocation it did in its constructor (eg. unload error strings) */
	if (e->destroy)
		e->destroy(e);
	CRYPTO_free_ex_data(CRYPTO_EX_INDEX_ENGINE, e, &e->ex_data);
	free(e);
	return 1;
}

int
ENGINE_free(ENGINE *e)
{
	return engine_free_util(e, 1);
}

/* Cleanup stuff */

/* ENGINE_cleanup() is coded such that anything that does work that will need
 * cleanup can register a "cleanup" callback here. That way we don't get linker
 * bloat by referring to all *possible* cleanups, but any linker bloat into code
 * "X" will cause X's cleanup function to end up here. */
static STACK_OF(ENGINE_CLEANUP_ITEM) *cleanup_stack = NULL;
static int
int_cleanup_check(int create)
{
	if (cleanup_stack)
		return 1;
	if (!create)
		return 0;
	cleanup_stack = sk_ENGINE_CLEANUP_ITEM_new_null();
	return (cleanup_stack ? 1 : 0);
}

static ENGINE_CLEANUP_ITEM *
int_cleanup_item(ENGINE_CLEANUP_CB *cb)
{
	ENGINE_CLEANUP_ITEM *item = malloc(sizeof(ENGINE_CLEANUP_ITEM));

	if (!item)
		return NULL;
	item->cb = cb;
	return item;
}

void
engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)
{
	ENGINE_CLEANUP_ITEM *item;

	if (!int_cleanup_check(1))
		return;
	item = int_cleanup_item(cb);
	if (item)
		sk_ENGINE_CLEANUP_ITEM_insert(cleanup_stack, item, 0);
}

void
engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)
{
	ENGINE_CLEANUP_ITEM *item;

	if (!int_cleanup_check(1))
		return;
	item = int_cleanup_item(cb);
	if (item)
		sk_ENGINE_CLEANUP_ITEM_push(cleanup_stack, item);
}
/* The API function that performs all cleanup */
static void
engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)
{
	(*(item->cb))();
	free(item);
}

void
ENGINE_cleanup(void)
{
	if (int_cleanup_check(0)) {
		sk_ENGINE_CLEANUP_ITEM_pop_free(cleanup_stack,
		    engine_cleanup_cb_free);
		cleanup_stack = NULL;
	}
	/* FIXME: This should be handled (somehow) through RAND, eg. by it
	 * registering a cleanup callback. */
	RAND_set_rand_method(NULL);
}

/* Now the "ex_data" support */

int
ENGINE_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
    CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_ENGINE, argl, argp,
	    new_func, dup_func, free_func);
}

int
ENGINE_set_ex_data(ENGINE *e, int idx, void *arg)
{
	return (CRYPTO_set_ex_data(&e->ex_data, idx, arg));
}

void *
ENGINE_get_ex_data(const ENGINE *e, int idx)
{
	return (CRYPTO_get_ex_data(&e->ex_data, idx));
}

/* Functions to get/set an ENGINE's elements - mainly to avoid exposing the
 * ENGINE structure itself. */

int
ENGINE_set_id(ENGINE *e, const char *id)
{
	if (id == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	e->id = id;
	return 1;
}

int
ENGINE_set_name(ENGINE *e, const char *name)
{
	if (name == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	e->name = name;
	return 1;
}

int
ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f)
{
	e->destroy = destroy_f;
	return 1;
}

int
ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f)
{
	e->init = init_f;
	return 1;
}

int
ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f)
{
	e->finish = finish_f;
	return 1;
}

int
ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f)
{
	e->ctrl = ctrl_f;
	return 1;
}

int
ENGINE_set_flags(ENGINE *e, int flags)
{
	e->flags = flags;
	return 1;
}

int
ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns)
{
	e->cmd_defns = defns;
	return 1;
}

const char *
ENGINE_get_id(const ENGINE *e)
{
	return e->id;
}

const char *
ENGINE_get_name(const ENGINE *e)
{
	return e->name;
}

ENGINE_GEN_INT_FUNC_PTR
ENGINE_get_destroy_function(const ENGINE *e)
{
	return e->destroy;
}

ENGINE_GEN_INT_FUNC_PTR
ENGINE_get_init_function(const ENGINE *e)
{
	return e->init;
}

ENGINE_GEN_INT_FUNC_PTR
ENGINE_get_finish_function(const ENGINE *e)
{
	return e->finish;
}

ENGINE_CTRL_FUNC_PTR
ENGINE_get_ctrl_function(const ENGINE *e)
{
	return e->ctrl;
}

int
ENGINE_get_flags(const ENGINE *e)
{
	return e->flags;
}

const ENGINE_CMD_DEFN *
ENGINE_get_cmd_defns(const ENGINE *e)
{
	return e->cmd_defns;
}

/* eng_lib.o is pretty much linked into anything that touches ENGINE already, so
 * put the "static_state" hack here. */

static int internal_static_hack = 0;

void *
ENGINE_get_static_state(void)
{
	return &internal_static_hack;
}
@


1.11
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_lib.c,v 1.10 2014/10/22 13:02:04 jsing Exp $ */
d75 1
a75 1
		ENGINEerr(ENGINE_F_ENGINE_NEW, ERR_R_MALLOC_FAILURE);
d116 1
a116 2
		ENGINEerr(ENGINE_F_ENGINE_FREE_UTIL,
		    ERR_R_PASSED_NULL_PARAMETER);
d247 1
a247 2
		ENGINEerr(ENGINE_F_ENGINE_SET_ID,
		    ERR_R_PASSED_NULL_PARAMETER);
d258 1
a258 2
		ENGINEerr(ENGINE_F_ENGINE_SET_NAME,
		    ERR_R_PASSED_NULL_PARAMETER);
@


1.10
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_lib.c,v 1.9 2014/07/10 13:58:22 jsing Exp $ */
d61 1
@


1.9
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_lib.c,v 1.8 2014/06/22 12:05:09 jsing Exp $ */
d61 2
a63 1
#include <openssl/rand.h>
@


1.8
log
@KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_lib.c,v 1.7 2014/06/12 15:49:29 deraadt Exp $ */
d58 2
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d64 3
a66 2
ENGINE *ENGINE_new(void)
	{
d70 1
a70 2
	if(ret == NULL)
		{
d73 1
a73 1
		}
d79 1
a79 1
	}
d84 3
a86 2
void engine_set_all_null(ENGINE *e)
	{
d104 1
a104 1
	}
d106 3
a108 2
int engine_free_util(ENGINE *e, int locked)
	{
d111 1
a111 2
	if(e == NULL)
		{
d113 1
a113 1
			ERR_R_PASSED_NULL_PARAMETER);
d115 3
a117 3
		}
	if(locked)
		i = CRYPTO_add(&e->struct_ref,-1,CRYPTO_LOCK_ENGINE);
d121 2
a122 1
	if (i > 0) return 1;
d129 1
a129 1
	if(e->destroy)
d134 1
a134 1
	}
d136 3
a138 2
int ENGINE_free(ENGINE *e)
	{
d140 1
a140 1
	}
d149 7
a155 4
static int int_cleanup_check(int create)
	{
	if(cleanup_stack) return 1;
	if(!create) return 0;
d158 5
a162 3
	}
static ENGINE_CLEANUP_ITEM *int_cleanup_item(ENGINE_CLEANUP_CB *cb)
	{
d164 3
a166 1
	if(!item) return NULL;
d169 5
a173 3
	}
void engine_cleanup_add_first(ENGINE_CLEANUP_CB *cb)
	{
d175 3
a177 1
	if(!int_cleanup_check(1)) return;
d179 1
a179 1
	if(item)
d181 5
a185 3
	}
void engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)
	{
d187 3
a189 1
	if(!int_cleanup_check(1)) return;
d191 1
a191 1
	if(item)
d193 1
a193 1
	}
d195 3
a197 2
static void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)
	{
d200 6
a205 5
	}
void ENGINE_cleanup(void)
	{
	if(int_cleanup_check(0))
		{
d207 1
a207 1
			engine_cleanup_cb_free);
d209 1
a209 1
		}
d213 1
a213 1
	}
d217 4
a220 3
int ENGINE_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
		CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
	{
d222 2
a223 2
			new_func, dup_func, free_func);
	}
d225 11
a235 9
int ENGINE_set_ex_data(ENGINE *e, int idx, void *arg)
	{
	return(CRYPTO_set_ex_data(&e->ex_data, idx, arg));
	}

void *ENGINE_get_ex_data(const ENGINE *e, int idx)
	{
	return(CRYPTO_get_ex_data(&e->ex_data, idx));
	}
d240 4
a243 4
int ENGINE_set_id(ENGINE *e, const char *id)
	{
	if(id == NULL)
		{
d245 1
a245 1
			ERR_R_PASSED_NULL_PARAMETER);
d247 1
a247 1
		}
d250 1
a250 1
	}
d252 4
a255 4
int ENGINE_set_name(ENGINE *e, const char *name)
	{
	if(name == NULL)
		{
d257 1
a257 1
			ERR_R_PASSED_NULL_PARAMETER);
d259 1
a259 1
		}
d262 1
a262 1
	}
d264 3
a266 2
int ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f)
	{
d269 1
a269 1
	}
d271 3
a273 2
int ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f)
	{
d276 1
a276 1
	}
d278 3
a280 2
int ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f)
	{
d283 1
a283 1
	}
d285 3
a287 2
int ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f)
	{
d290 1
a290 1
	}
d292 3
a294 2
int ENGINE_set_flags(ENGINE *e, int flags)
	{
d297 1
a297 1
	}
d299 3
a301 2
int ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns)
	{
d304 1
a304 1
	}
d306 3
a308 2
const char *ENGINE_get_id(const ENGINE *e)
	{
d310 1
a310 1
	}
d312 3
a314 2
const char *ENGINE_get_name(const ENGINE *e)
	{
d316 1
a316 1
	}
d318 3
a320 2
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)
	{
d322 1
a322 1
	}
d324 3
a326 2
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)
	{
d328 1
a328 1
	}
d330 3
a332 2
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)
	{
d334 1
a334 1
	}
d336 3
a338 2
ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)
	{
d340 1
a340 1
	}
d342 3
a344 2
int ENGINE_get_flags(const ENGINE *e)
	{
d346 1
a346 1
	}
d348 3
a350 2
const ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)
	{
d352 1
a352 1
	}
d359 3
a361 2
void *ENGINE_get_static_state(void)
	{
d363 1
a363 1
	}
@


1.6
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/engine/eng_lib.c */
@


1.5
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d68 1
a68 1
	ret = (ENGINE *)malloc(sizeof(ENGINE));
d155 1
a155 2
	ENGINE_CLEANUP_ITEM *item = malloc(sizeof(
					ENGINE_CLEANUP_ITEM));
@


1.4
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d121 1
a121 7
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"ENGINE_free, bad structural reference count\n");
		abort();
		}
#endif
@


1.3
log
@resolve conflicts, fix local changes
@
text
@d68 1
a68 1
	ret = (ENGINE *)OPENSSL_malloc(sizeof(ENGINE));
d136 1
a136 1
	OPENSSL_free(e);
d161 1
a161 1
	ENGINE_CLEANUP_ITEM *item = OPENSSL_malloc(sizeof(
d187 1
a187 1
	OPENSSL_free(item);
@


1.2
log
@resolve conflicts
@
text
@d128 3
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a58 2
#include <openssl/crypto.h>
#include "cryptlib.h"
d60 1
a60 2
#include <openssl/rand.h> /* FIXME: This shouldn't be needed */
#include <openssl/engine.h>
d92 1
d111 1
a111 1
		ENGINEerr(ENGINE_F_ENGINE_FREE,
d319 10
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d59 2
d62 2
a63 1
#include <openssl/rand.h>
a94 1
	e->store_meth = NULL;
d113 1
a113 1
		ENGINEerr(ENGINE_F_ENGINE_FREE_UTIL,
a320 10
	}

/* eng_lib.o is pretty much linked into anything that touches ENGINE already, so
 * put the "static_state" hack here. */

static int internal_static_hack = 0;

void *ENGINE_get_static_state(void)
	{
	return &internal_static_hack;
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@a127 3
	/* Free up any dynamically allocated public key methods */
	engine_pkey_meths_free(e);
	engine_pkey_asn1_meths_free(e);
@


