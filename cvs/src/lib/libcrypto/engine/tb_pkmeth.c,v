head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.6
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.5;
commitid	kT0fLt3r4lroFJra;

1.5
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.4;
commitid	5KSZBoxiLebzObKt;

1.4
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.06.10.14.56.02;	author jsing;	state Exp;
branches;
next	1.2;
commitid	2n7gmOYJzyqUlDh5;

1.2
date	2014.04.27.20.20.59;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: tb_pkmeth.c,v 1.5 2015/02/11 03:19:37 doug Exp $ */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/err.h>

#include "eng_int.h"
#include <openssl/evp.h>

/* If this symbol is defined then ENGINE_get_pkey_meth_engine(), the function
 * that is used by EVP to hook in pkey_meth code and cache defaults (etc), will
 * display brief debugging summaries to stderr with the 'nid'. */
/* #define ENGINE_PKEY_METH_DEBUG */

static ENGINE_TABLE *pkey_meth_table = NULL;

void
ENGINE_unregister_pkey_meths(ENGINE *e)
{
	engine_table_unregister(&pkey_meth_table, e);
}

static void
engine_unregister_all_pkey_meths(void)
{
	engine_table_cleanup(&pkey_meth_table);
}

int
ENGINE_register_pkey_meths(ENGINE *e)
{
	if (e->pkey_meths) {
		const int *nids;
		int num_nids = e->pkey_meths(e, NULL, &nids, 0);
		if (num_nids > 0)
			return engine_table_register(&pkey_meth_table,
			    engine_unregister_all_pkey_meths, e, nids,
			    num_nids, 0);
	}
	return 1;
}

void
ENGINE_register_all_pkey_meths(void)
{
	ENGINE *e;

	for (e = ENGINE_get_first(); e; e = ENGINE_get_next(e))
		ENGINE_register_pkey_meths(e);
}

int
ENGINE_set_default_pkey_meths(ENGINE *e)
{
	if (e->pkey_meths) {
		const int *nids;
		int num_nids = e->pkey_meths(e, NULL, &nids, 0);
		if (num_nids > 0)
			return engine_table_register(&pkey_meth_table,
			    engine_unregister_all_pkey_meths, e, nids,
			    num_nids, 1);
	}
	return 1;
}

/* Exposed API function to get a functional reference from the implementation
 * table (ie. try to get a functional reference from the tabled structural
 * references) for a given pkey_meth 'nid' */
ENGINE *
ENGINE_get_pkey_meth_engine(int nid)
{
	return engine_table_select(&pkey_meth_table, nid);
}

/* Obtains a pkey_meth implementation from an ENGINE functional reference */
const EVP_PKEY_METHOD *
ENGINE_get_pkey_meth(ENGINE *e, int nid)
{
	EVP_PKEY_METHOD *ret;
	ENGINE_PKEY_METHS_PTR fn = ENGINE_get_pkey_meths(e);

	if (!fn || !fn(e, &ret, NULL, nid)) {
		ENGINEerror(ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD);
		return NULL;
	}
	return ret;
}

/* Gets the pkey_meth callback from an ENGINE structure */
ENGINE_PKEY_METHS_PTR
ENGINE_get_pkey_meths(const ENGINE *e)
{
	return e->pkey_meths;
}

/* Sets the pkey_meth callback in an ENGINE structure */
int
ENGINE_set_pkey_meths(ENGINE *e, ENGINE_PKEY_METHS_PTR f)
{
	e->pkey_meths = f;
	return 1;
}

/* Internal function to free up EVP_PKEY_METHOD structures before an
 * ENGINE is destroyed
 */

void
engine_pkey_meths_free(ENGINE *e)
{
	int i;
	EVP_PKEY_METHOD *pkm;

	if (e->pkey_meths) {
		const int *pknids;
		int npknids;
		npknids = e->pkey_meths(e, NULL, &pknids, 0);
		for (i = 0; i < npknids; i++) {
			if (e->pkey_meths(e, &pkm, NULL, pknids[i])) {
				EVP_PKEY_meth_free(pkm);
			}
		}
	}
}
@


1.5
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: tb_pkmeth.c,v 1.4 2014/06/12 15:49:29 deraadt Exp $ */
d134 1
a134 2
		ENGINEerr(ENGINE_F_ENGINE_GET_PKEY_METH,
		    ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD);
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d55 2
@


1.3
log
@KNF.
@
text
@d1 1
@


1.2
log
@Put explicit (void) in function declarations and shuffle keywords in some
declaration to pass -Wextra, should we want to add it to CFLAGS.
No binary change.
@
text
@d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer. 
d65 3
a67 2
void ENGINE_unregister_pkey_meths(ENGINE *e)
	{
d69 1
a69 1
	}
d71 3
a73 2
static void engine_unregister_all_pkey_meths(void)
	{
d75 1
a75 1
	}
d77 4
a80 4
int ENGINE_register_pkey_meths(ENGINE *e)
	{
	if(e->pkey_meths)
		{
d83 1
a83 1
		if(num_nids > 0)
d85 3
a87 3
				engine_unregister_all_pkey_meths, e, nids,
					num_nids, 0);
		}
d89 1
a89 1
	}
d91 3
a93 2
void ENGINE_register_all_pkey_meths(void)
	{
d96 1
a96 1
	for(e=ENGINE_get_first() ; e ; e=ENGINE_get_next(e))
d98 1
a98 1
	}
d100 4
a103 4
int ENGINE_set_default_pkey_meths(ENGINE *e)
	{
	if(e->pkey_meths)
		{
d106 1
a106 1
		if(num_nids > 0)
d108 3
a110 3
				engine_unregister_all_pkey_meths, e, nids,
					num_nids, 1);
		}
d112 1
a112 1
	}
d117 3
a119 2
ENGINE *ENGINE_get_pkey_meth_engine(int nid)
	{
d121 1
a121 1
	}
d124 3
a126 2
const EVP_PKEY_METHOD *ENGINE_get_pkey_meth(ENGINE *e, int nid)
	{
d129 2
a130 2
	if(!fn || !fn(e, &ret, NULL, nid))
		{
d132 1
a132 1
				ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD);
d134 1
a134 1
		}
d136 1
a136 1
	}
d139 3
a141 2
ENGINE_PKEY_METHS_PTR ENGINE_get_pkey_meths(const ENGINE *e)
	{
d143 1
a143 1
	}
d146 3
a148 2
int ENGINE_set_pkey_meths(ENGINE *e, ENGINE_PKEY_METHS_PTR f)
	{
d151 1
a151 1
	}
d157 3
a159 2
void engine_pkey_meths_free(ENGINE *e)
	{
d162 2
a163 2
	if (e->pkey_meths)
		{
d167 2
a168 4
		for (i = 0; i < npknids; i++)
			{
			if (e->pkey_meths(e, &pkm, NULL, pknids[i]))
				{
a169 1
				}
d173 1
@


1.1
log
@Initial revision
@
text
@d89 1
a89 1
void ENGINE_register_all_pkey_meths()
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@
