head	1.14;
access;
symbols
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.13;
commitid	kT0fLt3r4lroFJra;

1.13
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.12;
commitid	5KSZBoxiLebzObKt;

1.12
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.11;
commitid	id8dTrTMtnTn4fqt;

1.11
date	2014.06.22.11.33.47;	author jsing;	state Exp;
branches;
next	1.10;
commitid	DzihbgMColoAK5Hv;

1.10
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.06.10.15.20.40;	author jsing;	state Exp;
branches;
next	1.8;
commitid	bVia1atxAsS9lVc4;

1.8
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.05.21.36.38;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.10.16.31.54;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.19;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.38.26;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.06.27.05.05.33;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.55;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: eng_cnf.c,v 1.13 2015/02/11 03:19:37 doug Exp $ */
/* Written by Stephen Henson (steve@@openssl.org) for the OpenSSL
 * project 2001.
 */
/* ====================================================================
 * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <string.h>

#include <openssl/err.h>

#include "eng_int.h"
#include <openssl/conf.h>

/* #define ENGINE_CONF_DEBUG */

/* ENGINE config module */

static char *
skip_dot(char *name)
{
	char *p;

	p = strchr(name, '.');
	if (p)
		return p + 1;
	return name;
}

static STACK_OF(ENGINE) *initialized_engines = NULL;

static int
int_engine_init(ENGINE *e)
{
	if (!ENGINE_init(e))
		return 0;
	if (!initialized_engines)
		initialized_engines = sk_ENGINE_new_null();
	if (!initialized_engines || !sk_ENGINE_push(initialized_engines, e)) {
		ENGINE_finish(e);
		return 0;
	}
	return 1;
}


static int
int_engine_configure(char *name, char *value, const CONF *cnf)
{
	int i;
	int ret = 0;
	long do_init = -1;
	STACK_OF(CONF_VALUE) *ecmds;
	CONF_VALUE *ecmd = NULL;
	char *ctrlname, *ctrlvalue;
	ENGINE *e = NULL;
	int soft = 0;

	name = skip_dot(name);
#ifdef ENGINE_CONF_DEBUG
	fprintf(stderr, "Configuring engine %s\n", name);
#endif
	/* Value is a section containing ENGINE commands */
	ecmds = NCONF_get_section(cnf, value);

	if (!ecmds) {
		ENGINEerror(ENGINE_R_ENGINE_SECTION_ERROR);
		return 0;
	}

	for (i = 0; i < sk_CONF_VALUE_num(ecmds); i++) {
		ecmd = sk_CONF_VALUE_value(ecmds, i);
		ctrlname = skip_dot(ecmd->name);
		ctrlvalue = ecmd->value;
#ifdef ENGINE_CONF_DEBUG
		fprintf(stderr, "ENGINE conf: doing ctrl(%s,%s)\n",
		    ctrlname, ctrlvalue);
#endif

		/* First handle some special pseudo ctrls */

		/* Override engine name to use */
		if (!strcmp(ctrlname, "engine_id"))
			name = ctrlvalue;
		else if (!strcmp(ctrlname, "soft_load"))
			soft = 1;
		/* Load a dynamic ENGINE */
		else if (!strcmp(ctrlname, "dynamic_path")) {
			e = ENGINE_by_id("dynamic");
			if (!e)
				goto err;
			if (!ENGINE_ctrl_cmd_string(e, "SO_PATH", ctrlvalue, 0))
				goto err;
			if (!ENGINE_ctrl_cmd_string(e, "LIST_ADD", "2", 0))
				goto err;
			if (!ENGINE_ctrl_cmd_string(e, "LOAD", NULL, 0))
				goto err;
		}
		/* ... add other pseudos here ... */
		else {
			/* At this point we need an ENGINE structural reference
			 * if we don't already have one.
			 */
			if (!e) {
				e = ENGINE_by_id(name);
				if (!e && soft) {
					ERR_clear_error();
					return 1;
				}
				if (!e)
					goto err;
			}
			/* Allow "EMPTY" to mean no value: this allows a valid
			 * "value" to be passed to ctrls of type NO_INPUT
		 	 */
			if (!strcmp(ctrlvalue, "EMPTY"))
				ctrlvalue = NULL;
			if (!strcmp(ctrlname, "init")) {
				if (!NCONF_get_number_e(cnf, value, "init",
				    &do_init))
					goto err;
				if (do_init == 1) {
					if (!int_engine_init(e))
						goto err;
				} else if (do_init != 0) {
					ENGINEerror(ENGINE_R_INVALID_INIT_VALUE);
					goto err;
				}
			}
			else if (!strcmp(ctrlname, "default_algorithms")) {
				if (!ENGINE_set_default_string(e, ctrlvalue))
					goto err;
			} else if (!ENGINE_ctrl_cmd_string(e,
				ctrlname, ctrlvalue, 0))
				goto err;
		}
	}
	if (e && (do_init == -1) && !int_engine_init(e)) {
		ecmd = NULL;
		goto err;
	}
	ret = 1;

err:
	if (ret != 1) {
		ENGINEerror(ENGINE_R_ENGINE_CONFIGURATION_ERROR);
		if (ecmd)
			ERR_asprintf_error_data(
			    "section=%s, name=%s, value=%s",
			    ecmd->section, ecmd->name, ecmd->value);
	}
	if (e)
		ENGINE_free(e);
	return ret;
}


static int
int_engine_module_init(CONF_IMODULE *md, const CONF *cnf)
{
	STACK_OF(CONF_VALUE) *elist;
	CONF_VALUE *cval;
	int i;

#ifdef ENGINE_CONF_DEBUG
	fprintf(stderr, "Called engine module: name %s, value %s\n",
	    CONF_imodule_get_name(md), CONF_imodule_get_value(md));
#endif
	/* Value is a section containing ENGINEs to configure */
	elist = NCONF_get_section(cnf, CONF_imodule_get_value(md));

	if (!elist) {
		ENGINEerror(ENGINE_R_ENGINES_SECTION_ERROR);
		return 0;
	}

	for (i = 0; i < sk_CONF_VALUE_num(elist); i++) {
		cval = sk_CONF_VALUE_value(elist, i);
		if (!int_engine_configure(cval->name, cval->value, cnf))
			return 0;
	}

	return 1;
}

static void
int_engine_module_finish(CONF_IMODULE *md)
{
	ENGINE *e;

	while ((e = sk_ENGINE_pop(initialized_engines)))
		ENGINE_finish(e);
	sk_ENGINE_free(initialized_engines);
	initialized_engines = NULL;
}

void
ENGINE_add_conf_module(void)
{
	CONF_module_add("engines", int_engine_module_init,
	    int_engine_module_finish);
}
@


1.13
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_cnf.c,v 1.12 2014/07/10 13:58:22 jsing Exp $ */
d118 1
a118 2
		ENGINEerr(ENGINE_F_INT_ENGINE_CONFIGURE,
		    ENGINE_R_ENGINE_SECTION_ERROR);
d177 1
a177 2
					ENGINEerr(ENGINE_F_INT_ENGINE_CONFIGURE,
					    ENGINE_R_INVALID_INIT_VALUE);
d197 1
a197 2
		ENGINEerr(ENGINE_F_INT_ENGINE_CONFIGURE,
		    ENGINE_R_ENGINE_CONFIGURATION_ERROR);
d224 1
a224 2
		ENGINEerr(ENGINE_F_INT_ENGINE_MODULE_INIT,
		    ENGINE_R_ENGINES_SECTION_ERROR);
@


1.12
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_cnf.c,v 1.11 2014/06/22 11:33:47 jsing Exp $ */
d60 2
@


1.11
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: eng_cnf.c,v 1.10 2014/06/12 15:49:29 deraadt Exp $ */
d58 2
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d198 2
a199 2
			ERR_asprintf_error_data
			("section=%s, name=%s, value=%s",
@


1.9
log
@KNF.
@
text
@d1 1
a1 1
/* eng_cnf.c */
@


1.8
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d66 3
a68 2
static char *skip_dot(char *name)
	{
d70 1
d75 1
a75 1
	}
d79 3
a81 2
static int int_engine_init(ENGINE *e)
	{
d86 1
a86 2
	if (!initialized_engines || !sk_ENGINE_push(initialized_engines, e))
		{
d89 1
a89 1
		}
d91 2
a92 2
	}
	
d94 3
a96 2
static int int_engine_configure(char *name, char *value, const CONF *cnf)
	{
d113 3
a115 3
	if (!ecmds)
		{
		ENGINEerr(ENGINE_F_INT_ENGINE_CONFIGURE, ENGINE_R_ENGINE_SECTION_ERROR);
d117 1
a117 1
		}
d119 1
a119 2
	for (i = 0; i < sk_CONF_VALUE_num(ecmds); i++)
		{
d124 2
a125 1
	fprintf(stderr, "ENGINE conf: doing ctrl(%s,%s)\n", ctrlname, ctrlvalue);
d136 1
a136 2
		else if (!strcmp(ctrlname, "dynamic_path"))
			{
d146 1
a146 1
			}
d148 1
a148 2
		else
			{
d152 1
a152 2
			if (!e)
				{
d154 1
a154 2
				if (!e && soft)
					{
d157 1
a157 1
					}
d160 1
a160 1
				}
d166 3
a168 3
			if (!strcmp(ctrlname, "init"))
				{
				if (!NCONF_get_number_e(cnf, value, "init", &do_init))
d170 1
a170 2
				if (do_init == 1)
					{
d173 3
a175 4
					}
				else if (do_init != 0)
					{
					ENGINEerr(ENGINE_F_INT_ENGINE_CONFIGURE, ENGINE_R_INVALID_INIT_VALUE);
a176 1
					}
d178 2
a179 2
			else if (!strcmp(ctrlname, "default_algorithms"))
				{
d182 2
a183 3
				}
			else if (!ENGINE_ctrl_cmd_string(e,
					ctrlname, ctrlvalue, 0))
a184 4
			}



d186 2
a187 2
	if (e && (do_init == -1) && !int_engine_init(e))
		{
d190 1
a190 1
		}
d192 5
a196 4
	err:
	if (ret != 1)
		{
		ENGINEerr(ENGINE_F_INT_ENGINE_CONFIGURE, ENGINE_R_ENGINE_CONFIGURATION_ERROR);
d199 1
a199 1
			    ("section=%s, name=%s, value=%s",
d201 1
a201 1
		}
d205 1
a205 1
	}
d208 3
a210 2
static int int_engine_module_init(CONF_IMODULE *md, const CONF *cnf)
	{
d214 1
d217 1
a217 1
			CONF_imodule_get_name(md), CONF_imodule_get_value(md));
d222 3
a224 3
	if (!elist)
		{
		ENGINEerr(ENGINE_F_INT_ENGINE_MODULE_INIT, ENGINE_R_ENGINES_SECTION_ERROR);
d226 1
a226 1
		}
d228 1
a228 2
	for (i = 0; i < sk_CONF_VALUE_num(elist); i++)
		{
d232 1
a232 1
		}
d235 1
a235 1
	}
d237 3
a239 2
static void int_engine_module_finish(CONF_IMODULE *md)
	{
d241 1
d246 1
a246 2
	}
	
d248 6
a253 6
void ENGINE_add_conf_module(void)
	{
	CONF_module_add("engines",
			int_engine_module_init,
			int_engine_module_finish);
	}
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d206 3
a208 3
			ERR_add_error_data(6, "section=", ecmd->section, 
						", name=", ecmd->name,
						", value=", ecmd->value);
@


1.6
log
@resolve conflicts
@
text
@d98 1
a98 1
	CONF_VALUE *ecmd;
d160 1
a160 1
					return 0;
d189 1
a189 1
				return 0;
d196 2
d199 1
d202 8
@


1.5
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d2 1
a2 1
/* Written by Stephen Henson (shenson@@bigfoot.com) for the OpenSSL
d101 1
a101 1
        int soft = 0;
d130 2
a131 2
                else if (!strcmp(ctrlname, "soft_load"))
                        soft = 1;
d154 5
a158 5
                                if (!e && soft)
                                        {
                                        ERR_clear_error();
                                        return 1;
                                        }
@


1.4
log
@resolve conflicts
@
text
@d101 2
d130 2
d154 5
@


1.3
log
@resolve conflicts
@
text
@d59 1
a59 3
#include <stdio.h>
#include <openssl/crypto.h>
#include "cryptlib.h"
a60 1
#include <openssl/engine.h>
d210 1
a210 1
		ENGINEerr(ENGINE_F_ENGINE_MODULE_INIT, ENGINE_R_ENGINES_SECTION_ERROR);
@


1.2
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d161 1
a161 1
			else if (!strcmp(ctrlname, "init"))
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d95 1
a95 1
int int_engine_configure(char *name, char *value, const CONF *cnf)
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d95 1
a95 1
static int int_engine_configure(char *name, char *value, const CONF *cnf)
@


1.1.1.3
log
@import of openssl-0.9.7j
@
text
@d161 1
a161 1
			if (!strcmp(ctrlname, "init"))
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d59 3
a61 1
#include "eng_int.h"
d63 1
d213 1
a213 1
		ENGINEerr(ENGINE_F_INT_ENGINE_MODULE_INIT, ENGINE_R_ENGINES_SECTION_ERROR);
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Stephen Henson (steve@@openssl.org) for the OpenSSL
a100 2
	int soft = 0;

a127 2
		else if (!strcmp(ctrlname, "soft_load"))
			soft = 1;
a149 5
				if (!e && soft)
					{
					ERR_clear_error();
					return 1;
					}
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d98 1
a98 1
	CONF_VALUE *ecmd = NULL;
d160 1
a160 1
					goto err;
d189 1
a189 1
				goto err;
a195 2
		{
		ecmd = NULL;
a196 1
		}
a198 8
	if (ret != 1)
		{
		ENGINEerr(ENGINE_F_INT_ENGINE_CONFIGURE, ENGINE_R_ENGINE_CONFIGURATION_ERROR);
		if (ecmd)
			ERR_add_error_data(6, "section=", ecmd->section, 
						", name=", ecmd->name,
						", value=", ecmd->value);
		}
@


