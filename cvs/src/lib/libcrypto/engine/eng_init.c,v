head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.7;
commitid	kT0fLt3r4lroFJra;

1.7
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.6;
commitid	5KSZBoxiLebzObKt;

1.6
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.06.10.15.20.40;	author jsing;	state Exp;
branches;
next	1.4;
commitid	bVia1atxAsS9lVc4;

1.4
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.03.21.53.39;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.20;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.09;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: eng_init.c,v 1.7 2015/02/11 03:19:37 doug Exp $ */
/* ====================================================================
 * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/err.h>

#include "eng_int.h"

/* Initialise a engine type for use (or up its functional reference count
 * if it's already in use). This version is only used internally. */
int
engine_unlocked_init(ENGINE *e)
{
	int to_return = 1;

	if ((e->funct_ref == 0) && e->init)
		/* This is the first functional reference and the engine
		 * requires initialisation so we do it now. */
		to_return = e->init(e);
	if (to_return) {
		/* OK, we return a functional reference which is also a
		 * structural reference. */
		e->struct_ref++;
		e->funct_ref++;
		engine_ref_debug(e, 0, 1)
		engine_ref_debug(e, 1, 1)
	}
	return to_return;
}

/* Free a functional reference to a engine type. This version is only used
 * internally. */
int
engine_unlocked_finish(ENGINE *e, int unlock_for_handlers)
{
	int to_return = 1;

	/* Reduce the functional reference count here so if it's the terminating
	 * case, we can release the lock safely and call the finish() handler
	 * without risk of a race. We get a race if we leave the count until
	 * after and something else is calling "finish" at the same time -
	 * there's a chance that both threads will together take the count from
	 * 2 to 0 without either calling finish(). */
	e->funct_ref--;
	engine_ref_debug(e, 1, -1);
	if ((e->funct_ref == 0) && e->finish) {
		if (unlock_for_handlers)
			CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
		to_return = e->finish(e);
		if (unlock_for_handlers)
			CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
		if (!to_return)
			return 0;
	}

	/* Release the structural reference too */
	if (!engine_free_util(e, 0)) {
		ENGINEerror(ENGINE_R_FINISH_FAILED);
		return 0;
	}
	return to_return;
}

/* The API (locked) version of "init" */
int
ENGINE_init(ENGINE *e)
{
	int ret;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	ret = engine_unlocked_init(e);
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	return ret;
}

/* The API (locked) version of "finish" */
int
ENGINE_finish(ENGINE *e)
{
	int to_return = 1;

	if (e == NULL) {
		ENGINEerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
	to_return = engine_unlocked_finish(e, 1);
	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
	if (!to_return) {
		ENGINEerror(ENGINE_R_FINISH_FAILED);
		return 0;
	}
	return to_return;
}
@


1.7
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eng_init.c,v 1.6 2014/06/12 15:49:29 deraadt Exp $ */
d109 1
a109 2
		ENGINEerr(ENGINE_F_ENGINE_UNLOCKED_FINISH,
		    ENGINE_R_FINISH_FAILED);
d122 1
a122 1
		ENGINEerr(ENGINE_F_ENGINE_INIT, ERR_R_PASSED_NULL_PARAMETER);
d138 1
a138 1
		ENGINEerr(ENGINE_F_ENGINE_FINISH, ERR_R_PASSED_NULL_PARAMETER);
d145 1
a145 1
		ENGINEerr(ENGINE_F_ENGINE_FINISH, ENGINE_R_FINISH_FAILED);
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d55 2
@


1.5
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/engine/eng_init.c */
@


1.4
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d60 3
a62 2
int engine_unlocked_init(ENGINE *e)
	{
d65 1
a65 1
	if((e->funct_ref == 0) && e->init)
d69 1
a69 2
	if(to_return)
		{
d76 1
a76 1
		}
d78 1
a78 1
	}
d82 3
a84 2
int engine_unlocked_finish(ENGINE *e, int unlock_for_handlers)
	{
d95 2
a96 3
	if((e->funct_ref == 0) && e->finish)
		{
		if(unlock_for_handlers)
d99 1
a99 1
		if(unlock_for_handlers)
d101 1
a101 1
		if(!to_return)
d103 1
a103 1
		}
d106 3
a108 3
	if(!engine_free_util(e, 0))
		{
		ENGINEerr(ENGINE_F_ENGINE_UNLOCKED_FINISH,ENGINE_R_FINISH_FAILED);
d110 1
a110 1
		}
d112 1
a112 1
	}
d115 3
a117 2
int ENGINE_init(ENGINE *e)
	{
d119 3
a121 3
	if(e == NULL)
		{
		ENGINEerr(ENGINE_F_ENGINE_INIT,ERR_R_PASSED_NULL_PARAMETER);
d123 1
a123 1
		}
d128 1
a128 1
	}
d131 3
a133 2
int ENGINE_finish(ENGINE *e)
	{
d136 2
a137 3
	if(e == NULL)
		{
		ENGINEerr(ENGINE_F_ENGINE_FINISH,ERR_R_PASSED_NULL_PARAMETER);
d139 1
a139 1
		}
d143 2
a144 3
	if(!to_return)
		{
		ENGINEerr(ENGINE_F_ENGINE_FINISH,ENGINE_R_FINISH_FAILED);
d146 1
a146 1
		}
d148 1
a148 1
	}
@


1.3
log
@resolve conflicts
@
text
@d104 1
a104 7
#ifdef REF_CHECK
	if(e->funct_ref < 0)
		{
		fprintf(stderr,"ENGINE_finish, bad functional reference count\n");
		abort();
		}
#endif
@


1.2
log
@remove whitespace changes (keep diffs to 0.9.7-beta1 minimal)
@
text
@a55 2
#include <openssl/crypto.h>
#include "cryptlib.h"
a56 1
#include <openssl/engine.h>
d114 1
a114 1
		ENGINEerr(ENGINE_F_ENGINE_FINISH,ENGINE_R_FINISH_FAILED);
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a157 1

@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d96 1
a96 1
	engine_ref_debug(e, 1, -1)
d158 1
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d96 1
a96 1
	engine_ref_debug(e, 1, -1);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d56 2
d59 1
d117 1
a117 1
		ENGINEerr(ENGINE_F_ENGINE_UNLOCKED_FINISH,ENGINE_R_FINISH_FAILED);
@


