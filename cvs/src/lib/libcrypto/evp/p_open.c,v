head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.2
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18;
locks; strict;
comment	@ * @;


1.19
date	2017.05.02.03.59.44;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	Dm63V7JYy6WzetfM;

1.18
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.17;
commitid	kT0fLt3r4lroFJra;

1.17
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.16;
commitid	vHznCDK3idwNEFz4;

1.16
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.14;
commitid	nzndm3zqPmFurSaK;

1.14
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	2nvnQBrv22dLtvTt;

1.12
date	2014.05.07.17.42.51;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.23.19.09.49;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.47;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.21;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.30;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.23;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@use freezero() instead of memset/explicit_bzero + free.  Substantially
reduces conditional logic (-218, +82).

MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH cache alignment calculation bn/bn_exp.c
wasn'tt quite right.  Two other tricky bits with ASN1_STRING_FLAG_NDEF and
BN_FLG_STATIC_DATA where the condition cannot be collapsed completely.

Passes regress.  ok beck
@
text
@/* $OpenBSD: p_open.c,v 1.18 2017/01/29 17:49:23 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_RSA

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/rsa.h>
#include <openssl/x509.h>

int
EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
    const unsigned char *ek, int ekl, const unsigned char *iv, EVP_PKEY *priv)
{
	unsigned char *key = NULL;
	int i, size = 0, ret = 0;

	if (type) {
		EVP_CIPHER_CTX_init(ctx);
		if (!EVP_DecryptInit_ex(ctx, type, NULL, NULL, NULL))
			return 0;
	}

	if (!priv)
		return 1;

	if (priv->type != EVP_PKEY_RSA) {
		EVPerror(EVP_R_PUBLIC_KEY_NOT_RSA);
		goto err;
	}

	size = RSA_size(priv->pkey.rsa);
	key = malloc(size + 2);
	if (key == NULL) {
		/* ERROR */
		EVPerror(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	i = EVP_PKEY_decrypt_old(key, ek, ekl, priv);
	if ((i <= 0) || !EVP_CIPHER_CTX_set_key_length(ctx, i)) {
		/* ERROR */
		goto err;
	}
	if (!EVP_DecryptInit_ex(ctx, NULL, NULL, key, iv))
		goto err;

	ret = 1;

err:
	freezero(key, size);
	return (ret);
}

int
EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
{
	int i;

	i = EVP_DecryptFinal_ex(ctx, out, outl);
	if (i)
		i = EVP_DecryptInit_ex(ctx, NULL, NULL, NULL, NULL);
	return (i);
}
#endif
@


1.18
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: p_open.c,v 1.17 2015/09/10 15:56:25 jsing Exp $ */
d112 1
a112 3
	if (key != NULL)
		explicit_bzero(key, size);
	free(key);
@


1.17
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p_open.c,v 1.16 2014/07/11 08:44:48 jsing Exp $ */
d89 1
a89 1
		EVPerr(EVP_F_EVP_OPENINIT, EVP_R_PUBLIC_KEY_NOT_RSA);
d97 1
a97 1
		EVPerr(EVP_F_EVP_OPENINIT, ERR_R_MALLOC_FAILURE);
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p_open.c,v 1.15 2014/07/10 22:45:57 jsing Exp $ */
d60 1
d113 1
a113 1
		OPENSSL_cleanse(key, size);
@


1.15
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: p_open.c,v 1.14 2014/06/12 15:49:29 deraadt Exp $ */
a62 2
#include "cryptlib.h"

d65 1
d68 1
a69 1
#include <openssl/rsa.h>
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.13
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/evp/p_open.c */
@


1.12
log
@KNF.
@
text
@d91 1
a91 1
	key = (unsigned char *)malloc(size + 2);
@


1.11
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d69 6
a74 6
int EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
	const unsigned char *ek, int ekl, const unsigned char *iv,
	EVP_PKEY *priv)
	{
	unsigned char *key=NULL;
	int i,size=0,ret=0;
d76 1
a76 1
	if(type) {	
d78 2
a79 1
		if(!EVP_DecryptInit_ex(ctx,type,NULL, NULL,NULL)) return 0;
d82 2
a83 1
	if(!priv) return 1;
d85 2
a86 3
	if (priv->type != EVP_PKEY_RSA)
		{
		EVPerr(EVP_F_EVP_OPENINIT,EVP_R_PUBLIC_KEY_NOT_RSA);
d88 1
a88 1
                }
d90 3
a92 4
	size=RSA_size(priv->pkey.rsa);
	key=(unsigned char *)malloc(size+2);
	if (key == NULL)
		{
d94 1
a94 1
		EVPerr(EVP_F_EVP_OPENINIT,ERR_R_MALLOC_FAILURE);
d96 1
a96 1
		}
d98 2
a99 3
	i=EVP_PKEY_decrypt_old(key,ek,ekl,priv);
	if ((i <= 0) || !EVP_CIPHER_CTX_set_key_length(ctx, i))
		{
d102 5
a106 2
		}
	if(!EVP_DecryptInit_ex(ctx,NULL,NULL,key,iv)) goto err;
a107 1
	ret=1;
d109 2
a110 1
	if (key != NULL) OPENSSL_cleanse(key,size);
d112 2
a113 2
	return(ret);
	}
d115 3
a117 2
int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
	{
d120 1
a120 1
	i=EVP_DecryptFinal_ex(ctx,out,outl);
d122 3
a124 3
		i = EVP_DecryptInit_ex(ctx,NULL,NULL,NULL,NULL);
	return(i);
	}
@


1.10
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a121 6
#else /* !OPENSSL_NO_RSA */

# ifdef PEDANTIC
static void *dummy=&dummy;
# endif

@


1.9
log
@resolve conflicts
@
text
@d90 1
a90 1
	key=(unsigned char *)OPENSSL_malloc(size+2);
d109 1
a109 1
	OPENSSL_free(key);
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d118 2
a119 1
	EVP_DecryptInit_ex(ctx,NULL,NULL,NULL,NULL);
@


1.7
log
@resolve conflicts
@
text
@d98 1
a98 1
	i=EVP_PKEY_decrypt(key,ek,ekl,priv);
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@a58 1
#ifndef OPENSSL_NO_RSA
d61 3
d67 1
d69 3
a71 2
int EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char *ek,
	     int ekl, unsigned char *iv, EVP_PKEY *priv)
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d104 1
a104 1
	if (key != NULL) memset(key,0,size);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_RSA
d66 1
a66 1
int EVP_OpenInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *type, unsigned char *ek,
d74 1
a74 1
		if(!EVP_DecryptInit(ctx,type,NULL,NULL)) return 0;
d100 1
a100 1
	if(!EVP_DecryptInit(ctx,NULL,key,iv)) goto err;
d113 2
a114 2
	i=EVP_DecryptFinal(ctx,out,outl);
	EVP_DecryptInit(ctx,NULL,NULL,NULL);
d117 1
a117 1
#else /* !NO_RSA */
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d71 8
a78 1
	
a81 1
		ret= -1;
d86 1
a86 1
	key=(unsigned char *)Malloc(size+2);
a90 1
		ret= -1;
d95 1
a95 1
	if (i != type->key_len)
d100 1
a101 2
	EVP_CIPHER_CTX_init(ctx);
	EVP_DecryptInit(ctx,type,key,iv);
d105 1
a105 1
	Free(key);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d113 6
@


1.1
log
@Initial revision
@
text
@d59 1
d62 6
a67 11
#include "evp.h"
#include "objects.h"
#include "x509.h"

int EVP_OpenInit(ctx,type,ek,ekl,iv,priv)
EVP_CIPHER_CTX *ctx;
EVP_CIPHER *type;
unsigned char *ek;
int ekl;
unsigned char *iv;
EVP_PKEY *priv;
d105 1
a105 4
int EVP_OpenFinal(ctx,out,outl)
EVP_CIPHER_CTX *ctx;
unsigned char *out;
int *outl;
d113 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 1
#ifndef OPENSSL_NO_RSA
d61 11
a71 6
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

int EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned char *ek,
	     int ekl, unsigned char *iv, EVP_PKEY *priv)
d75 1
a75 8

	if(type) {	
		EVP_CIPHER_CTX_init(ctx);
		if(!EVP_DecryptInit_ex(ctx,type,NULL, NULL,NULL)) return 0;
	}

	if(!priv) return 1;

d79 1
d84 1
a84 1
	key=(unsigned char *)OPENSSL_malloc(size+2);
d89 1
d94 1
a94 1
	if ((i <= 0) || !EVP_CIPHER_CTX_set_key_length(ctx, i))
a98 1
	if(!EVP_DecryptInit_ex(ctx,NULL,NULL,key,iv)) goto err;
d100 2
d105 1
a105 1
	OPENSSL_free(key);
d109 4
a112 1
int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
d116 2
a117 2
	i=EVP_DecryptFinal_ex(ctx,out,outl);
	EVP_DecryptInit_ex(ctx,NULL,NULL,NULL,NULL);
a119 7
#else /* !OPENSSL_NO_RSA */

# ifdef PEDANTIC
static void *dummy=&dummy;
# endif

#endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d104 1
a104 1
	if (key != NULL) OPENSSL_cleanse(key,size);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d59 1
a61 3

#ifndef OPENSSL_NO_RSA

a64 1
#include <openssl/rsa.h>
d66 2
a67 3
int EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
	const unsigned char *ek, int ekl, const unsigned char *iv,
	EVP_PKEY *priv)
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d98 1
a98 1
	i=EVP_PKEY_decrypt_old(key,ek,ekl,priv);
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d118 1
a118 2
	if (i)
		i = EVP_DecryptInit_ex(ctx,NULL,NULL,NULL,NULL);
@


