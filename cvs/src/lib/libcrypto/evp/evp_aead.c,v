head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.5;
commitid	kT0fLt3r4lroFJra;

1.5
date	2014.06.21.15.30.36;	author jsing;	state Exp;
branches;
next	1.4;
commitid	3PAaCG0wKyRazegi;

1.4
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.05.26.13.01.58;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.15.14.06.13;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.15.13.53.47;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: evp_aead.c,v 1.5 2014/06/21 15:30:36 jsing Exp $ */
/*
 * Copyright (c) 2014, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <limits.h>
#include <string.h>

#include <openssl/evp.h>
#include <openssl/err.h>

#include "evp_locl.h"

size_t
EVP_AEAD_key_length(const EVP_AEAD *aead)
{
	return aead->key_len;
}

size_t
EVP_AEAD_nonce_length(const EVP_AEAD *aead)
{
	return aead->nonce_len;
}

size_t
EVP_AEAD_max_overhead(const EVP_AEAD *aead)
{
	return aead->overhead;
}

size_t
EVP_AEAD_max_tag_len(const EVP_AEAD *aead)
{
	return aead->max_tag_len;
}

int
EVP_AEAD_CTX_init(EVP_AEAD_CTX *ctx, const EVP_AEAD *aead,
    const unsigned char *key, size_t key_len, size_t tag_len, ENGINE *impl)
{
	ctx->aead = aead;
	if (key_len != aead->key_len) {
		EVPerror(EVP_R_UNSUPPORTED_KEY_SIZE);
		return 0;
	}
	return aead->init(ctx, key, key_len, tag_len);
}

void
EVP_AEAD_CTX_cleanup(EVP_AEAD_CTX *ctx)
{
	if (ctx->aead == NULL)
		return;
	ctx->aead->cleanup(ctx);
	ctx->aead = NULL;
}

/* check_alias returns 0 if out points within the buffer determined by in
 * and in_len and 1 otherwise.
 *
 * When processing, there's only an issue if out points within in[:in_len]
 * and isn't equal to in. If that's the case then writing the output will
 * stomp input that hasn't been read yet.
 *
 * This function checks for that case. */
static int
check_alias(const unsigned char *in, size_t in_len, const unsigned char *out)
{
	if (out <= in)
		return 1;
	if (in + in_len <= out)
		return 1;
	return 0;
}

int
EVP_AEAD_CTX_seal(const EVP_AEAD_CTX *ctx, unsigned char *out, size_t *out_len,
    size_t max_out_len, const unsigned char *nonce, size_t nonce_len,
    const unsigned char *in, size_t in_len, const unsigned char *ad,
    size_t ad_len)
{
	size_t possible_out_len = in_len + ctx->aead->overhead;

	/* Overflow. */
	if (possible_out_len < in_len) {
		EVPerror(EVP_R_TOO_LARGE);
		goto error;
	}

	if (!check_alias(in, in_len, out)) {
		EVPerror(EVP_R_OUTPUT_ALIASES_INPUT);
		goto error;
	}

	if (ctx->aead->seal(ctx, out, out_len, max_out_len, nonce, nonce_len,
	    in, in_len, ad, ad_len)) {
		return 1;
	}

error:
	/* In the event of an error, clear the output buffer so that a caller
	 * that doesn't check the return value doesn't send raw data. */
	memset(out, 0, max_out_len);
	*out_len = 0;
	return 0;
}

int
EVP_AEAD_CTX_open(const EVP_AEAD_CTX *ctx, unsigned char *out, size_t *out_len,
    size_t max_out_len, const unsigned char *nonce, size_t nonce_len,
    const unsigned char *in, size_t in_len, const unsigned char *ad,
    size_t ad_len)
{
	if (!check_alias(in, in_len, out)) {
		EVPerror(EVP_R_OUTPUT_ALIASES_INPUT);
		goto error;
	}

	if (ctx->aead->open(ctx, out, out_len, max_out_len, nonce, nonce_len,
	    in, in_len, ad, ad_len)) {
		return 1;
	}

error:
	/* In the event of an error, clear the output buffer so that a caller
	 * that doesn't check the return value doesn't try and process bad
	 * data. */
	memset(out, 0, max_out_len);
	*out_len = 0;
	return 0;
}
@


1.5
log
@Switch to the ISC licensed versions of these files, which Google has made
available via boringssl.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_aead.c,v 1.4 2014/06/12 15:49:29 deraadt Exp $ */
d56 1
a56 1
		EVPerr(EVP_F_EVP_AEAD_CTX_INIT, EVP_R_UNSUPPORTED_KEY_SIZE);
d99 1
a99 1
		EVPerr(EVP_F_AEAD_CTX_SEAL, EVP_R_TOO_LARGE);
d104 1
a104 1
		EVPerr(EVP_F_AEAD_CTX_SEAL, EVP_R_OUTPUT_ALIASES_INPUT);
d128 1
a128 1
		EVPerr(EVP_F_AEAD_CTX_OPEN, EVP_R_OUTPUT_ALIASES_INPUT);
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 15
a15 56
/* $OpenBSD$ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
@


1.3
log
@Implement an improved version of the EVP AEAD API. The
EVP_AEAD_CTX_{open,seal} functions previously returned an ssize_t that was
overloaded to indicate success/failure, along with the number of bytes
written as output. This change adds an explicit *out_len argument which
is used to return the number of output bytes and the return value is now
an int that is purely used to identify success or failure.

This change effectively rides the last libcrypto crank (although I do not
expect there to be many users of the EVP AEAD API currently).

Thanks to Adam Langley for providing the improved code that this diff is
based on.

ok miod@@
@
text
@d1 1
@


1.2
log
@KNF.
@
text
@d129 2
a130 2
ssize_t
EVP_AEAD_CTX_seal(const EVP_AEAD_CTX *ctx, unsigned char *out,
a135 1
	ssize_t r;
d137 3
a139 4
	if (possible_out_len < in_len /* overflow */ ||
	    possible_out_len > SSIZE_MAX /* return value cannot be
					    represented */) {
		EVPerr(EVP_F_EVP_AEAD_CTX_SEAL, EVP_R_TOO_LARGE);
d144 1
a144 1
		EVPerr(EVP_F_EVP_AEAD_CTX_SEAL, EVP_R_OUTPUT_ALIASES_INPUT);
d148 4
a151 4
	r = ctx->aead->seal(ctx, out, max_out_len, nonce, nonce_len,
	    in, in_len, ad, ad_len);
	if (r >= 0)
		return r;
d157 2
a158 1
	return -1;
d161 2
a162 2
ssize_t
EVP_AEAD_CTX_open(const EVP_AEAD_CTX *ctx, unsigned char *out,
a166 7
	ssize_t r;

	if (in_len > SSIZE_MAX) {
		EVPerr(EVP_F_EVP_AEAD_CTX_OPEN, EVP_R_TOO_LARGE);
		goto error;  /* may not be able to represent return value. */
	}

d168 1
a168 1
		EVPerr(EVP_F_EVP_AEAD_CTX_OPEN, EVP_R_OUTPUT_ALIASES_INPUT);
d172 4
a175 5
	r = ctx->aead->open(ctx, out, max_out_len, nonce, nonce_len,
	    in, in_len, ad, ad_len);

	if (r >= 0)
		return r;
d182 2
a183 1
	return -1;
@


1.1
log
@Add an AEAD EVP interface to libcrypto, along with AES-GCM AEAD
implementations. This largely pulls in Adam Langley's AEAD patches from
Chromium's OpenSSL.

ok miod@@
@
text
@d7 1
a7 1
 * 
d14 1
a14 1
 * 
d21 1
a21 1
 * 
d36 1
a36 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d39 1
a39 1
 * 
d51 1
a51 1
 * 
d66 3
a68 2
size_t EVP_AEAD_key_length(const EVP_AEAD *aead)
	{
d70 1
a70 1
	}
d72 3
a74 2
size_t EVP_AEAD_nonce_length(const EVP_AEAD *aead)
	{
d76 1
a76 1
	}
d78 3
a80 2
size_t EVP_AEAD_max_overhead(const EVP_AEAD *aead)
	{
d82 1
a82 1
	}
d84 3
a86 2
size_t EVP_AEAD_max_tag_len(const EVP_AEAD *aead)
	{
d88 1
a88 1
	}
d90 4
a93 4
int EVP_AEAD_CTX_init(EVP_AEAD_CTX *ctx, const EVP_AEAD *aead,
		      const unsigned char *key, size_t key_len,
		      size_t tag_len, ENGINE *impl)
	{
d95 2
a96 3
	if (key_len != aead->key_len)
		{
		EVPerr(EVP_F_EVP_AEAD_CTX_INIT,EVP_R_UNSUPPORTED_KEY_SIZE);
d98 1
a98 1
		}
d100 1
a100 1
	}
d102 3
a104 2
void EVP_AEAD_CTX_cleanup(EVP_AEAD_CTX *ctx)
	{
d109 1
a109 1
	}
d119 3
a121 3
static int check_alias(const unsigned char *in, size_t in_len,
		       const unsigned char *out)
	{
d127 1
a127 1
	}
d129 6
a134 6
ssize_t EVP_AEAD_CTX_seal(const EVP_AEAD_CTX *ctx,
			  unsigned char *out, size_t max_out_len,
			  const unsigned char *nonce, size_t nonce_len,
			  const unsigned char *in, size_t in_len,
			  const unsigned char *ad, size_t ad_len)
	{
d140 1
a140 2
					    represented */)
		{
d143 1
a143 1
		}
d145 1
a145 2
	if (!check_alias(in, in_len, out))
		{
d148 1
a148 1
		}
d151 1
a151 1
			    in, in_len, ad, ad_len);
d160 1
a160 1
	}
d162 6
a167 6
ssize_t EVP_AEAD_CTX_open(const EVP_AEAD_CTX *ctx,
			 unsigned char *out, size_t max_out_len,
			 const unsigned char *nonce, size_t nonce_len,
			 const unsigned char *in, size_t in_len,
			 const unsigned char *ad, size_t ad_len)
	{
d170 1
a170 2
	if (in_len > SSIZE_MAX)
		{
d173 1
a173 1
		}
d175 1
a175 2
	if (!check_alias(in, in_len, out))
		{
d178 1
a178 1
		}
d181 1
a181 1
			    in, in_len, ad, ad_len);
d192 1
a192 1
	}
@

