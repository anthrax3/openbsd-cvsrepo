head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.9;
commitid	vHznCDK3idwNEFz4;

1.9
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.7;
commitid	nzndm3zqPmFurSaK;

1.7
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.05.08.15.13.06;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.42;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.27;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.19;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@/* $OpenBSD: e_idea.c,v 1.9 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_IDEA

#include <openssl/evp.h>
#include <openssl/idea.h>
#include <openssl/objects.h>

#include "evp_locl.h"

static int idea_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc);

/* NB idea_ecb_encrypt doesn't take an 'encrypt' argument so we treat it as a special
 * case
 */

static int
idea_ecb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl)
{
	BLOCK_CIPHER_ecb_loop()
	idea_ecb_encrypt(in + i, out + i, ctx->cipher_data);
	return 1;
}

/* Can't use IMPLEMENT_BLOCK_CIPHER because idea_ecb_encrypt is different */

typedef struct {
	IDEA_KEY_SCHEDULE ks;
} EVP_IDEA_KEY;

BLOCK_CIPHER_func_cbc(idea, idea, EVP_IDEA_KEY, ks)
BLOCK_CIPHER_func_ofb(idea, idea, 64, EVP_IDEA_KEY, ks)
BLOCK_CIPHER_func_cfb(idea, idea, 64, EVP_IDEA_KEY, ks)

BLOCK_CIPHER_defs(idea, IDEA_KEY_SCHEDULE, NID_idea, 8, 16, 8, 64,
    0, idea_init_key, NULL,
    EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, NULL)

static int
idea_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc)
{
	if (!enc) {
		if (EVP_CIPHER_CTX_mode(ctx) == EVP_CIPH_OFB_MODE)
			enc = 1;
		else if (EVP_CIPHER_CTX_mode(ctx) == EVP_CIPH_CFB_MODE)
			enc = 1;
	}
	if (enc)
		idea_set_encrypt_key(key, ctx->cipher_data);
	else {
		IDEA_KEY_SCHEDULE tmp;

		idea_set_encrypt_key(key, &tmp);
		idea_set_decrypt_key(&tmp, ctx->cipher_data);
		explicit_bzero((unsigned char *)&tmp,
		    sizeof(IDEA_KEY_SCHEDULE));
	}
	return 1;
}

#endif
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_idea.c,v 1.8 2014/07/10 22:45:57 jsing Exp $ */
d60 1
d119 1
a119 1
		OPENSSL_cleanse((unsigned char *)&tmp,
@


1.8
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: e_idea.c,v 1.7 2014/06/12 15:49:29 deraadt Exp $ */
d63 1
a63 1
#include "cryptlib.h"
a64 1
#ifndef OPENSSL_NO_IDEA
d66 1
d68 1
a69 1
#include <openssl/idea.h>
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.6
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/evp/e_idea.c */
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d69 1
a69 1
			 const unsigned char *iv,int enc);
d72 1
a72 1
 * case 
d75 3
a77 2
static int idea_ecb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
			   const unsigned char *in, size_t inl)
d80 1
a80 1
		idea_ecb_encrypt(in + i, out + i, ctx->cipher_data);
d86 1
a86 2
typedef struct
	{
d88 1
a88 1
	} EVP_IDEA_KEY;
d95 2
a96 2
			0, idea_init_key, NULL, 
			EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, NULL)
d98 9
a106 6
static int idea_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
			 const unsigned char *iv, int enc)
	{
	if(!enc) {
		if (EVP_CIPHER_CTX_mode(ctx) == EVP_CIPH_OFB_MODE) enc = 1;
		else if (EVP_CIPHER_CTX_mode(ctx) == EVP_CIPH_CFB_MODE) enc = 1;
d108 3
a110 3
	if (enc) idea_set_encrypt_key(key,ctx->cipher_data);
	else
		{
d113 2
a114 2
		idea_set_encrypt_key(key,&tmp);
		idea_set_decrypt_key(&tmp,ctx->cipher_data);
d116 2
a117 2
				sizeof(IDEA_KEY_SCHEDULE));
		}
d119 1
a119 1
	}
@


1.4
log
@resolve conflicts
@
text
@d76 1
a76 1
			   const unsigned char *in, unsigned int inl)
@


1.3
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@a58 2
#ifndef OPENSSL_NO_IDEA

d61 2
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d112 1
a112 1
		memset((unsigned char *)&tmp,0,
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_IDEA
d66 1
d79 1
a79 1
		idea_ecb_encrypt(in + i, out + i, &ctx->c.idea_ks);
d85 8
a92 3
BLOCK_CIPHER_func_cbc(idea, idea, idea_ks)
BLOCK_CIPHER_func_ofb(idea, idea, idea_ks)
BLOCK_CIPHER_func_cfb(idea, idea, idea_ks)
d94 1
a94 1
BLOCK_CIPHER_defs(idea, idea_ks, NID_idea, 8, 16, 8,
d105 1
a105 1
	if (enc) idea_set_encrypt_key(key,&(ctx->c.idea_ks));
d111 1
a111 1
		idea_set_decrypt_key(&tmp,&(ctx->c.idea_ks));
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_IDEA
a65 1
#include <openssl/idea.h>
d78 1
a78 1
		idea_ecb_encrypt(in + i, out + i, ctx->cipher_data);
d84 3
a86 8
typedef struct
	{
	IDEA_KEY_SCHEDULE ks;
	} EVP_IDEA_KEY;

BLOCK_CIPHER_func_cbc(idea, idea, EVP_IDEA_KEY, ks)
BLOCK_CIPHER_func_ofb(idea, idea, 64, EVP_IDEA_KEY, ks)
BLOCK_CIPHER_func_cfb(idea, idea, 64, EVP_IDEA_KEY, ks)
d88 1
a88 1
BLOCK_CIPHER_defs(idea, IDEA_KEY_SCHEDULE, NID_idea, 8, 16, 8, 64,
d99 1
a99 1
	if (enc) idea_set_encrypt_key(key,ctx->cipher_data);
d105 1
a105 1
		idea_set_decrypt_key(&tmp,ctx->cipher_data);
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d112 1
a112 1
		OPENSSL_cleanse((unsigned char *)&tmp,
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d59 2
a62 2

#ifndef OPENSSL_NO_IDEA
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d76 1
a76 1
			   const unsigned char *in, size_t inl)
@


