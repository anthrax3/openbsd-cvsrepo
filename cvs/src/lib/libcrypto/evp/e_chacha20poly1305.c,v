head	1.17;
access;
symbols
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.17
date	2017.05.11.02.26.39;	author jsg;	state Exp;
branches;
next	1.16;
commitid	xWDPidNqK9rmKVu3;

1.16
date	2017.05.02.03.59.44;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	Dm63V7JYy6WzetfM;

1.15
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.14;
commitid	kT0fLt3r4lroFJra;

1.14
date	2016.04.28.16.06.53;	author jsing;	state Exp;
branches;
next	1.13;
commitid	82vUQnYEexbUmRFI;

1.13
date	2016.04.13.13.25.05;	author jsing;	state Exp;
branches;
next	1.12;
commitid	uiE0uaDA2hqOhCB1;

1.12
date	2015.11.02.15.43.55;	author reyk;	state Exp;
branches;
next	1.11;
commitid	294NCJ226VmYlZLH;

1.11
date	2015.11.02.15.40.53;	author reyk;	state Exp;
branches;
next	1.10;
commitid	IRH03kez31ofxOKM;

1.10
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.9;
commitid	vHznCDK3idwNEFz4;

1.9
date	2015.06.20.12.01.14;	author jsing;	state Exp;
branches;
next	1.8;
commitid	f0RvWCt8nx38ad6r;

1.8
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.7;
commitid	nzndm3zqPmFurSaK;

1.7
date	2014.06.21.15.30.36;	author jsing;	state Exp;
branches;
next	1.6;
commitid	3PAaCG0wKyRazegi;

1.6
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.05.26.13.01.58;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.22.21.56.02;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.15.15.44.19;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.15.15.13.56;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2014.05.15.15.09.01;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Fix a problem introduced in freezero() conversion and use
sizeof(struct) not sizeof(pointer).

otto@@ points out that on OpenBSD currently freezero() would have still
zeroed the entire allocation, but this is not documented behaviour and
may change in future.

ok tom@@
@
text
@/* $OpenBSD: e_chacha20poly1305.c,v 1.16 2017/05/02 03:59:44 deraadt Exp $ */

/*
 * Copyright (c) 2015 Reyk Floter <reyk@@openbsd.org>
 * Copyright (c) 2014, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdint.h>
#include <string.h>

#include <openssl/opensslconf.h>

#if !defined(OPENSSL_NO_CHACHA) && !defined(OPENSSL_NO_POLY1305)

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/chacha.h>
#include <openssl/poly1305.h>

#include "evp_locl.h"

#define POLY1305_TAG_LEN 16
#define CHACHA20_NONCE_LEN_OLD 8

/*
 * The informational RFC 7539, "ChaCha20 and Poly1305 for IETF Protocols",
 * introduced a modified AEAD construction that is incompatible with the
 * common style that has been already used in TLS.  The IETF version also
 * adds a constant (salt) that is prepended to the nonce.
 */
#define CHACHA20_CONSTANT_LEN 4
#define CHACHA20_IV_LEN 8
#define CHACHA20_NONCE_LEN (CHACHA20_CONSTANT_LEN + CHACHA20_IV_LEN)

struct aead_chacha20_poly1305_ctx {
	unsigned char key[32];
	unsigned char tag_len;
};

static int
aead_chacha20_poly1305_init(EVP_AEAD_CTX *ctx, const unsigned char *key,
    size_t key_len, size_t tag_len)
{
	struct aead_chacha20_poly1305_ctx *c20_ctx;

	if (tag_len == 0)
		tag_len = POLY1305_TAG_LEN;

	if (tag_len > POLY1305_TAG_LEN) {
		EVPerror(EVP_R_TOO_LARGE);
		return 0;
	}

	/* Internal error - EVP_AEAD_CTX_init should catch this. */
	if (key_len != sizeof(c20_ctx->key))
		return 0;

	c20_ctx = malloc(sizeof(struct aead_chacha20_poly1305_ctx));
	if (c20_ctx == NULL)
		return 0;

	memcpy(&c20_ctx->key[0], key, key_len);
	c20_ctx->tag_len = tag_len;
	ctx->aead_state = c20_ctx;

	return 1;
}

static void
aead_chacha20_poly1305_cleanup(EVP_AEAD_CTX *ctx)
{
	struct aead_chacha20_poly1305_ctx *c20_ctx = ctx->aead_state;

	freezero(c20_ctx, sizeof(*c20_ctx));
}

static void
poly1305_update_with_length(poly1305_state *poly1305,
    const unsigned char *data, size_t data_len)
{
	size_t j = data_len;
	unsigned char length_bytes[8];
	unsigned i;

	for (i = 0; i < sizeof(length_bytes); i++) {
		length_bytes[i] = j;
		j >>= 8;
	}

	if (data != NULL)
		CRYPTO_poly1305_update(poly1305, data, data_len);
	CRYPTO_poly1305_update(poly1305, length_bytes, sizeof(length_bytes));
}

static void
poly1305_update_with_pad16(poly1305_state *poly1305,
    const unsigned char *data, size_t data_len)
{
	static const unsigned char zero_pad16[16];
	size_t pad_len;

	CRYPTO_poly1305_update(poly1305, data, data_len);

	/* pad16() is defined in RFC 7539 2.8.1. */
	if ((pad_len = data_len % 16) == 0)
		return;

	CRYPTO_poly1305_update(poly1305, zero_pad16, 16 - pad_len);
}

static int
aead_chacha20_poly1305_seal(const EVP_AEAD_CTX *ctx, unsigned char *out,
    size_t *out_len, size_t max_out_len, const unsigned char *nonce,
    size_t nonce_len, const unsigned char *in, size_t in_len,
    const unsigned char *ad, size_t ad_len)
{
	const struct aead_chacha20_poly1305_ctx *c20_ctx = ctx->aead_state;
	unsigned char poly1305_key[32];
	poly1305_state poly1305;
	const unsigned char *iv;
	const uint64_t in_len_64 = in_len;
	uint64_t ctr;

	/* The underlying ChaCha implementation may not overflow the block
	 * counter into the second counter word. Therefore we disallow
	 * individual operations that work on more than 2TB at a time.
	 * in_len_64 is needed because, on 32-bit platforms, size_t is only
	 * 32-bits and this produces a warning because it's always false.
	 * Casting to uint64_t inside the conditional is not sufficient to stop
	 * the warning. */
	if (in_len_64 >= (1ULL << 32) * 64 - 64) {
		EVPerror(EVP_R_TOO_LARGE);
		return 0;
	}

	if (max_out_len < in_len + c20_ctx->tag_len) {
		EVPerror(EVP_R_BUFFER_TOO_SMALL);
		return 0;
	}

	if (nonce_len != ctx->aead->nonce_len) {
		EVPerror(EVP_R_IV_TOO_LARGE);
		return 0;
	}

	if (nonce_len == CHACHA20_NONCE_LEN_OLD) {
		/* Google's draft-agl-tls-chacha20poly1305-04, Nov 2013 */

		memset(poly1305_key, 0, sizeof(poly1305_key));
		CRYPTO_chacha_20(poly1305_key, poly1305_key,
		    sizeof(poly1305_key), c20_ctx->key, nonce, 0);

		CRYPTO_poly1305_init(&poly1305, poly1305_key);
		poly1305_update_with_length(&poly1305, ad, ad_len);
		CRYPTO_chacha_20(out, in, in_len, c20_ctx->key, nonce, 1);
		poly1305_update_with_length(&poly1305, out, in_len);
	} else if (nonce_len == CHACHA20_NONCE_LEN) {
		/* RFC 7539, May 2015 */

		ctr = (uint64_t)(nonce[0] | nonce[1] << 8 |
		    nonce[2] << 16 | nonce[3] << 24) << 32;
		iv = nonce + CHACHA20_CONSTANT_LEN;

		memset(poly1305_key, 0, sizeof(poly1305_key));
		CRYPTO_chacha_20(poly1305_key, poly1305_key,
		    sizeof(poly1305_key), c20_ctx->key, iv, ctr);

		CRYPTO_poly1305_init(&poly1305, poly1305_key);
		poly1305_update_with_pad16(&poly1305, ad, ad_len);
		CRYPTO_chacha_20(out, in, in_len, c20_ctx->key, iv, ctr + 1);
		poly1305_update_with_pad16(&poly1305, out, in_len);
		poly1305_update_with_length(&poly1305, NULL, ad_len);
		poly1305_update_with_length(&poly1305, NULL, in_len);
	}

	if (c20_ctx->tag_len != POLY1305_TAG_LEN) {
		unsigned char tag[POLY1305_TAG_LEN];
		CRYPTO_poly1305_finish(&poly1305, tag);
		memcpy(out + in_len, tag, c20_ctx->tag_len);
		*out_len = in_len + c20_ctx->tag_len;
		return 1;
	}

	CRYPTO_poly1305_finish(&poly1305, out + in_len);
	*out_len = in_len + POLY1305_TAG_LEN;
	return 1;
}

static int
aead_chacha20_poly1305_open(const EVP_AEAD_CTX *ctx, unsigned char *out,
    size_t *out_len, size_t max_out_len, const unsigned char *nonce,
    size_t nonce_len, const unsigned char *in, size_t in_len,
    const unsigned char *ad, size_t ad_len)
{
	const struct aead_chacha20_poly1305_ctx *c20_ctx = ctx->aead_state;
	unsigned char mac[POLY1305_TAG_LEN];
	unsigned char poly1305_key[32];
	const unsigned char *iv = nonce;
	poly1305_state poly1305;
	const uint64_t in_len_64 = in_len;
	size_t plaintext_len;
	uint64_t ctr = 0;

	if (in_len < c20_ctx->tag_len) {
		EVPerror(EVP_R_BAD_DECRYPT);
		return 0;
	}

	/* The underlying ChaCha implementation may not overflow the block
	 * counter into the second counter word. Therefore we disallow
	 * individual operations that work on more than 2TB at a time.
	 * in_len_64 is needed because, on 32-bit platforms, size_t is only
	 * 32-bits and this produces a warning because it's always false.
	 * Casting to uint64_t inside the conditional is not sufficient to stop
	 * the warning. */
	if (in_len_64 >= (1ULL << 32) * 64 - 64) {
		EVPerror(EVP_R_TOO_LARGE);
		return 0;
	}

	if (nonce_len != ctx->aead->nonce_len) {
		EVPerror(EVP_R_IV_TOO_LARGE);
		return 0;
	}

	plaintext_len = in_len - c20_ctx->tag_len;

	if (max_out_len < plaintext_len) {
		EVPerror(EVP_R_BUFFER_TOO_SMALL);
		return 0;
	}

	if (nonce_len == CHACHA20_NONCE_LEN_OLD) {
		/* Google's draft-agl-tls-chacha20poly1305-04, Nov 2013 */

		memset(poly1305_key, 0, sizeof(poly1305_key));
		CRYPTO_chacha_20(poly1305_key, poly1305_key,
		    sizeof(poly1305_key), c20_ctx->key, nonce, 0);

		CRYPTO_poly1305_init(&poly1305, poly1305_key);
		poly1305_update_with_length(&poly1305, ad, ad_len);
		poly1305_update_with_length(&poly1305, in, plaintext_len);
	} else if (nonce_len == CHACHA20_NONCE_LEN) {
		/* RFC 7539, May 2015 */

		ctr = (uint64_t)(nonce[0] | nonce[1] << 8 |
		    nonce[2] << 16 | nonce[3] << 24) << 32;
		iv = nonce + CHACHA20_CONSTANT_LEN;

		memset(poly1305_key, 0, sizeof(poly1305_key));
		CRYPTO_chacha_20(poly1305_key, poly1305_key,
		    sizeof(poly1305_key), c20_ctx->key, iv, ctr);

		CRYPTO_poly1305_init(&poly1305, poly1305_key);
		poly1305_update_with_pad16(&poly1305, ad, ad_len);
		poly1305_update_with_pad16(&poly1305, in, plaintext_len);
		poly1305_update_with_length(&poly1305, NULL, ad_len);
		poly1305_update_with_length(&poly1305, NULL, plaintext_len);
	}

	CRYPTO_poly1305_finish(&poly1305, mac);

	if (timingsafe_memcmp(mac, in + plaintext_len, c20_ctx->tag_len) != 0) {
		EVPerror(EVP_R_BAD_DECRYPT);
		return 0;
	}

	CRYPTO_chacha_20(out, in, plaintext_len, c20_ctx->key, iv, ctr + 1);
	*out_len = plaintext_len;
	return 1;
}

static const EVP_AEAD aead_chacha20_poly1305 = {
	.key_len = 32,
	.nonce_len = CHACHA20_NONCE_LEN,
	.overhead = POLY1305_TAG_LEN,
	.max_tag_len = POLY1305_TAG_LEN,

	.init = aead_chacha20_poly1305_init,
	.cleanup = aead_chacha20_poly1305_cleanup,
	.seal = aead_chacha20_poly1305_seal,
	.open = aead_chacha20_poly1305_open,
};

static const EVP_AEAD aead_chacha20_poly1305_old = {
	.key_len = 32,
	.nonce_len = CHACHA20_NONCE_LEN_OLD,
	.overhead = POLY1305_TAG_LEN,
	.max_tag_len = POLY1305_TAG_LEN,

	.init = aead_chacha20_poly1305_init,
	.cleanup = aead_chacha20_poly1305_cleanup,
	.seal = aead_chacha20_poly1305_seal,
	.open = aead_chacha20_poly1305_open,
};

const EVP_AEAD *
EVP_aead_chacha20_poly1305()
{
	return &aead_chacha20_poly1305;
}

const EVP_AEAD *
EVP_aead_chacha20_poly1305_old()
{
	return &aead_chacha20_poly1305_old;
}

#endif  /* !OPENSSL_NO_CHACHA && !OPENSSL_NO_POLY1305 */
@


1.16
log
@use freezero() instead of memset/explicit_bzero + free.  Substantially
reduces conditional logic (-218, +82).

MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH cache alignment calculation bn/bn_exp.c
wasn'tt quite right.  Two other tricky bits with ASN1_STRING_FLAG_NDEF and
BN_FLG_STATIC_DATA where the condition cannot be collapsed completely.

Passes regress.  ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.15 2017/01/29 17:49:23 beck Exp $ */
d86 1
a86 1
	freezero(c20_ctx, sizeof(c20_ctx));
@


1.15
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.14 2016/04/28 16:06:53 jsing Exp $ */
d86 1
a86 2
	explicit_bzero(c20_ctx->key, sizeof(c20_ctx->key));
	free(c20_ctx);
@


1.14
log
@Rename EVP_aead_chacha20_poly1305() to EVP_aead_chacha20_poly1305_old()
and replace with EVP_aead_chacha20_poly1305_ietf(). The IETF version will
become the standard version.

Discussed with many.
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.13 2016/04/13 13:25:05 jsing Exp $ */
d62 1
a62 1
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_INIT, EVP_R_TOO_LARGE);
d145 1
a145 1
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_SEAL, EVP_R_TOO_LARGE);
d150 1
a150 2
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_SEAL,
		    EVP_R_BUFFER_TOO_SMALL);
d155 1
a155 1
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_SEAL, EVP_R_IV_TOO_LARGE);
d218 1
a218 1
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_OPEN, EVP_R_BAD_DECRYPT);
d230 1
a230 1
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_OPEN, EVP_R_TOO_LARGE);
d235 1
a235 1
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_OPEN, EVP_R_IV_TOO_LARGE);
d242 1
a242 2
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_OPEN,
		    EVP_R_BUFFER_TOO_SMALL);
d277 1
a277 1
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_OPEN, EVP_R_BAD_DECRYPT);
@


1.13
log
@Use the correct iv and counter when decrypting the ciphertext for
EVP_aead_chacha20_poly1305_ietf().
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.12 2015/11/02 15:43:55 reyk Exp $ */
d35 1
a35 1
#define CHACHA20_NONCE_LEN 8
d45 1
a45 1
#define CHACHA20_NONCE_LEN_IETF (CHACHA20_CONSTANT_LEN + CHACHA20_IV_LEN)
d160 1
a160 1
	if (nonce_len == CHACHA20_NONCE_LEN) {
d171 1
a171 1
	} else if (nonce_len == CHACHA20_NONCE_LEN_IETF) {
d248 1
a248 1
	if (nonce_len == CHACHA20_NONCE_LEN) {
d258 1
a258 1
	} else if (nonce_len == CHACHA20_NONCE_LEN_IETF) {
d300 1
a300 1
static const EVP_AEAD aead_chacha20_poly1305_ietf = {
d302 1
a302 1
	.nonce_len = CHACHA20_NONCE_LEN_IETF,
d319 1
a319 1
EVP_aead_chacha20_poly1305_ietf()
d321 1
a321 1
	return &aead_chacha20_poly1305_ietf;
@


1.12
log
@Fix typo in comment of previous commit: "that that".
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.11 2015/11/02 15:40:53 reyk Exp $ */
d212 1
a212 1
	const unsigned char *iv;
d216 1
a216 1
	uint64_t ctr;
d283 1
a283 1
	CRYPTO_chacha_20(out, in, plaintext_len, c20_ctx->key, nonce, 1);
@


1.11
log
@Add EVP_aead_chacha20_poly1305_ietf() - The informational RFC 7539,
"ChaCha20 and Poly1305 for IETF Protocols", introduced a modified AEAD
construction that is incompatible with the common style that has been
already used in TLS with EVP_aead_chacha20_poly1305().  The IETF
version also adds a constant (salt) that is prepended to the nonce.

OK mikeb@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.10 2015/09/10 15:56:25 jsing Exp $ */
d40 2
a41 2
 * common style that that has been already used in TLS.  The IETF version
 * also adds a constant (salt) that is prepended to the nonce.
@


1.10
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 2
a2 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.9 2015/06/20 12:01:14 jsing Exp $ */
d4 1
d37 10
d103 12
d116 6
a121 1
	CRYPTO_poly1305_update(poly1305, length_bytes, sizeof(length_bytes));
d133 1
d135 1
d155 1
a155 1
	if (nonce_len != CHACHA20_NONCE_LEN) {
d160 29
a188 8
	memset(poly1305_key, 0, sizeof(poly1305_key));
	CRYPTO_chacha_20(poly1305_key, poly1305_key, sizeof(poly1305_key),
	    c20_ctx->key, nonce, 0);

	CRYPTO_poly1305_init(&poly1305, poly1305_key);
	poly1305_update_with_length(&poly1305, ad, ad_len);
	CRYPTO_chacha_20(out, in, in_len, c20_ctx->key, nonce, 1);
	poly1305_update_with_length(&poly1305, out, in_len);
d212 1
d216 1
d235 1
a235 1
	if (nonce_len != CHACHA20_NONCE_LEN) {
d248 28
a275 7
	memset(poly1305_key, 0, sizeof(poly1305_key));
	CRYPTO_chacha_20(poly1305_key, poly1305_key, sizeof(poly1305_key),
	    c20_ctx->key, nonce, 0);

	CRYPTO_poly1305_init(&poly1305, poly1305_key);
	poly1305_update_with_length(&poly1305, ad, ad_len);
	poly1305_update_with_length(&poly1305, in, plaintext_len);
d300 12
d316 6
@


1.9
log
@Replace remaining CRYPTO_memcmp() calls with timingsafe_memcmp().

ok doug@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.8 2014/07/10 22:45:57 jsing Exp $ */
d74 1
a74 1
	OPENSSL_cleanse(c20_ctx->key, sizeof(c20_ctx->key));
@


1.8
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.7 2014/06/21 15:30:36 jsing Exp $ */
d203 1
a203 1
	if (CRYPTO_memcmp(mac, in + plaintext_len, c20_ctx->tag_len) != 0) {
@


1.7
log
@Switch to the ISC licensed versions of these files, which Google has made
available via boringssl.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_chacha20poly1305.c,v 1.6 2014/06/12 15:49:29 deraadt Exp $ */
d20 1
d25 2
d29 1
a29 2
#include <openssl/evp.h>
#include <openssl/err.h>
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 15
a15 49
/* $OpenBSD$ */
/* ====================================================================
 * Copyright (c) 2013 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
@


1.5
log
@Implement an improved version of the EVP AEAD API. The
EVP_AEAD_CTX_{open,seal} functions previously returned an ssize_t that was
overloaded to indicate success/failure, along with the number of bytes
written as output. This change adds an explicit *out_len argument which
is used to return the number of output bytes and the return value is now
an int that is purely used to identify success or failure.

This change effectively rides the last libcrypto crank (although I do not
expect there to be many users of the EVP AEAD API currently).

Thanks to Adam Langley for providing the improved code that this diff is
based on.

ok miod@@
@
text
@d1 1
@


1.4
log
@Convert OPENSSL_malloc stuff back to intrinsics, a few were missed
as new stuff was brought in.
ok miod@@
@
text
@d85 1
d87 1
a87 1
		return 0;  /* internal error - EVP_AEAD_CTX_init should catch this. */
d104 1
d126 1
a126 1
static ssize_t
d128 3
a130 3
    size_t max_out_len, const unsigned char *nonce, size_t nonce_len,
    const unsigned char *in, size_t in_len, const unsigned char *ad,
    size_t ad_len)
d144 1
a144 1
	if (in_len_64 >= (1ull << 32)*64 - 64) {
d146 1
a146 1
		return -1;
d152 1
a152 1
		return -1;
d157 1
a157 1
		return -1;
d173 2
a174 1
		return in_len + c20_ctx->tag_len;
d178 2
a179 1
	return in_len + POLY1305_TAG_LEN;
d182 1
a182 1
static ssize_t
d184 3
a186 3
    size_t max_out_len, const unsigned char *nonce, size_t nonce_len,
    const unsigned char *in, size_t in_len, const unsigned char *ad,
    size_t ad_len)
a190 1
	size_t out_len;
d193 1
d197 1
a197 1
		return -1;
d207 1
a207 1
	if (in_len_64 >= (1ull << 32)*64 - 64) {
d209 1
a209 1
		return -1;
d214 1
a214 1
		return -1;
d217 1
a217 1
	out_len = in_len - c20_ctx->tag_len;
d219 1
a219 1
	if (max_out_len < out_len) {
d222 1
a222 1
		return -1;
d231 1
a231 1
	poly1305_update_with_length(&poly1305, in, out_len);
d234 1
a234 1
	if (CRYPTO_memcmp(mac, in + out_len, c20_ctx->tag_len) != 0) {
d236 1
a236 1
		return -1;
d239 3
a241 3
	CRYPTO_chacha_20(out, in, out_len, c20_ctx->key, nonce, 1);

	return out_len;
@


1.3
log
@Use C99 initialisers for the AEAD struct.
@
text
@d88 1
a88 1
	c20_ctx = OPENSSL_malloc(sizeof(struct aead_chacha20_poly1305_ctx));
d104 1
a104 1
	OPENSSL_free(c20_ctx);
@


1.2
log
@KNF.
@
text
@d241 4
a244 4
	32,  /* key len */
	CHACHA20_NONCE_LEN,   /* nonce len */
	POLY1305_TAG_LEN,  /* overhead */
	POLY1305_TAG_LEN,  /* max tag length */
d246 4
a249 4
	aead_chacha20_poly1305_init,
	aead_chacha20_poly1305_cleanup,
	aead_chacha20_poly1305_seal,
	aead_chacha20_poly1305_open,
@


1.1
log
@Add a ChaCha20-Poly1305 AEAD EVP implementation to libcrypto, from Adam
Langley's Chromium OpenSSL patches.

ok miod@@
@
text
@d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer. 
d66 1
a66 2
struct aead_chacha20_poly1305_ctx
	{
d69 1
a69 1
	};
d71 4
a74 2
static int aead_chacha20_poly1305_init(EVP_AEAD_CTX *ctx, const unsigned char *key, size_t key_len, size_t tag_len)
	{
d80 1
a80 2
	if (tag_len > POLY1305_TAG_LEN)
		{
d83 1
a83 1
		}
d97 1
a97 1
	}
d99 3
a101 2
static void aead_chacha20_poly1305_cleanup(EVP_AEAD_CTX *ctx)
	{
d105 1
a105 1
	}
d107 4
a110 3
static void poly1305_update_with_length(poly1305_state *poly1305,
	const unsigned char *data, size_t data_len)
	{
d115 1
a115 2
	for (i = 0; i < sizeof(length_bytes); i++)
		{
d118 1
a118 1
		}
d124 6
a129 6
static ssize_t aead_chacha20_poly1305_seal(const EVP_AEAD_CTX *ctx,
	unsigned char *out, size_t max_out_len,
	const unsigned char *nonce, size_t nonce_len,
	const unsigned char *in, size_t in_len,
	const unsigned char *ad, size_t ad_len)
	{
d142 1
a142 2
	if (in_len_64 >= (1ull << 32)*64-64)
		{
d145 1
a145 1
		}
d147 3
a149 3
	if (max_out_len < in_len + c20_ctx->tag_len)
		{
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_SEAL, EVP_R_BUFFER_TOO_SMALL);
d151 1
a151 1
		}
d153 1
a153 2
	if (nonce_len != CHACHA20_NONCE_LEN)
		{
d156 1
a156 1
		}
d159 2
a160 1
	CRYPTO_chacha_20(poly1305_key, poly1305_key, sizeof(poly1305_key), c20_ctx->key, nonce, 0);
d167 1
a167 2
	if (c20_ctx->tag_len != POLY1305_TAG_LEN)
		{
d172 1
a172 1
		}
d176 1
a176 1
	}
d178 6
a183 6
static ssize_t aead_chacha20_poly1305_open(const EVP_AEAD_CTX *ctx,
	unsigned char *out, size_t max_out_len,
	const unsigned char *nonce, size_t nonce_len,
	const unsigned char *in, size_t in_len,
	const unsigned char *ad, size_t ad_len)
	{
d191 1
a191 2
	if (in_len < c20_ctx->tag_len)
		{
d194 1
a194 1
		}
d203 1
a203 2
	if (in_len_64 >= (1ull << 32)*64-64)
		{
d206 1
a206 1
		}
d208 1
a208 2
	if (nonce_len != CHACHA20_NONCE_LEN)
		{
d211 1
a211 1
		}
d215 3
a217 3
	if (max_out_len < out_len)
		{
		EVPerr(EVP_F_AEAD_CHACHA20_POLY1305_OPEN, EVP_R_BUFFER_TOO_SMALL);
d219 1
a219 1
		}
d222 2
a223 1
	CRYPTO_chacha_20(poly1305_key, poly1305_key, sizeof(poly1305_key), c20_ctx->key, nonce, 0);
d230 1
a230 2
	if (CRYPTO_memcmp(mac, in + out_len, c20_ctx->tag_len) != 0)
		{
d233 1
a233 1
		}
d236 1
d238 1
a238 1
	}
d240 1
a240 2
static const EVP_AEAD aead_chacha20_poly1305 =
	{
d250 1
a250 1
	};
d252 3
a254 2
const EVP_AEAD *EVP_aead_chacha20_poly1305()
	{
d256 1
a256 1
	}
@

