head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.5;
commitid	kT0fLt3r4lroFJra;

1.5
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.4;
commitid	G74O1dmRukKsW7IJ;

1.4
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.3;
commitid	yQEL1wOWIearrW15;

1.3
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.05.07.17.42.51;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: pmeth_fn.c,v 1.5 2014/07/12 16:03:37 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>

#include "evp_locl.h"

#define M_check_autoarg(ctx, arg, arglen, err) \
	if (ctx->pmeth->flags & EVP_PKEY_FLAG_AUTOARGLEN) \
		{ \
		size_t pksize = (size_t)EVP_PKEY_size(ctx->pkey); \
		if (!arg) \
			{ \
			*arglen = pksize; \
			return 1; \
			} \
		else if (*arglen < pksize) \
			{ \
			EVPerror(EVP_R_BUFFER_TOO_SMALL); /*ckerr_ignore*/\
			return 0; \
			} \
		}

int
EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->sign) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	ctx->operation = EVP_PKEY_OP_SIGN;
	if (!ctx->pmeth->sign_init)
		return 1;
	ret = ctx->pmeth->sign_init(ctx);
	if (ret <= 0)
		ctx->operation = EVP_PKEY_OP_UNDEFINED;
	return ret;
}

int
EVP_PKEY_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
    const unsigned char *tbs, size_t tbslen)
{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->sign) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	if (ctx->operation != EVP_PKEY_OP_SIGN) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}
	M_check_autoarg(ctx, sig, siglen, EVP_F_EVP_PKEY_SIGN)
	return ctx->pmeth->sign(ctx, sig, siglen, tbs, tbslen);
}

int
EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->verify) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	ctx->operation = EVP_PKEY_OP_VERIFY;
	if (!ctx->pmeth->verify_init)
		return 1;
	ret = ctx->pmeth->verify_init(ctx);
	if (ret <= 0)
		ctx->operation = EVP_PKEY_OP_UNDEFINED;
	return ret;
}

int
EVP_PKEY_verify(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen,
    const unsigned char *tbs, size_t tbslen)
{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->verify) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	if (ctx->operation != EVP_PKEY_OP_VERIFY) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}
	return ctx->pmeth->verify(ctx, sig, siglen, tbs, tbslen);
}

int
EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->verify_recover) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	ctx->operation = EVP_PKEY_OP_VERIFYRECOVER;
	if (!ctx->pmeth->verify_recover_init)
		return 1;
	ret = ctx->pmeth->verify_recover_init(ctx);
	if (ret <= 0)
		ctx->operation = EVP_PKEY_OP_UNDEFINED;
	return ret;
}

int
EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx, unsigned char *rout, size_t *routlen,
    const unsigned char *sig, size_t siglen)
{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->verify_recover) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	if (ctx->operation != EVP_PKEY_OP_VERIFYRECOVER) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}
	M_check_autoarg(ctx, rout, routlen, EVP_F_EVP_PKEY_VERIFY_RECOVER)
	return ctx->pmeth->verify_recover(ctx, rout, routlen, sig, siglen);
}

int
EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->encrypt) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	ctx->operation = EVP_PKEY_OP_ENCRYPT;
	if (!ctx->pmeth->encrypt_init)
		return 1;
	ret = ctx->pmeth->encrypt_init(ctx);
	if (ret <= 0)
		ctx->operation = EVP_PKEY_OP_UNDEFINED;
	return ret;
}

int
EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,
    const unsigned char *in, size_t inlen)
{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->encrypt) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	if (ctx->operation != EVP_PKEY_OP_ENCRYPT) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}
	M_check_autoarg(ctx, out, outlen, EVP_F_EVP_PKEY_ENCRYPT)
	return ctx->pmeth->encrypt(ctx, out, outlen, in, inlen);
}

int
EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->decrypt) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	ctx->operation = EVP_PKEY_OP_DECRYPT;
	if (!ctx->pmeth->decrypt_init)
		return 1;
	ret = ctx->pmeth->decrypt_init(ctx);
	if (ret <= 0)
		ctx->operation = EVP_PKEY_OP_UNDEFINED;
	return ret;
}

int
EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,
    const unsigned char *in, size_t inlen)
{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->decrypt) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	if (ctx->operation != EVP_PKEY_OP_DECRYPT) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}
	M_check_autoarg(ctx, out, outlen, EVP_F_EVP_PKEY_DECRYPT)
	return ctx->pmeth->decrypt(ctx, out, outlen, in, inlen);
}

int
EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->derive) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	ctx->operation = EVP_PKEY_OP_DERIVE;
	if (!ctx->pmeth->derive_init)
		return 1;
	ret = ctx->pmeth->derive_init(ctx);
	if (ret <= 0)
		ctx->operation = EVP_PKEY_OP_UNDEFINED;
	return ret;
}

int
EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)
{
	int ret;

	if (!ctx || !ctx->pmeth || !(ctx->pmeth->derive ||
	    ctx->pmeth->encrypt || ctx->pmeth->decrypt) ||
	    !ctx->pmeth->ctrl) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	if (ctx->operation != EVP_PKEY_OP_DERIVE &&
	    ctx->operation != EVP_PKEY_OP_ENCRYPT &&
	    ctx->operation != EVP_PKEY_OP_DECRYPT) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}

	ret = ctx->pmeth->ctrl(ctx, EVP_PKEY_CTRL_PEER_KEY, 0, peer);

	if (ret <= 0)
		return ret;

	if (ret == 2)
		return 1;

	if (!ctx->pkey) {
		EVPerror(EVP_R_NO_KEY_SET);
		return -1;
	}

	if (ctx->pkey->type != peer->type) {
		EVPerror(EVP_R_DIFFERENT_KEY_TYPES);
		return -1;
	}

	/* ran@@cryptocom.ru: For clarity.  The error is if parameters in peer are
	 * present (!missing) but don't match.  EVP_PKEY_cmp_parameters may return
	 * 1 (match), 0 (don't match) and -2 (comparison is not defined).  -1
	 * (different key types) is impossible here because it is checked earlier.
	 * -2 is OK for us here, as well as 1, so we can check for 0 only. */
	if (!EVP_PKEY_missing_parameters(peer) &&
	    !EVP_PKEY_cmp_parameters(ctx->pkey, peer)) {
		EVPerror(EVP_R_DIFFERENT_PARAMETERS);
		return -1;
	}

	EVP_PKEY_free(ctx->peerkey);
	ctx->peerkey = peer;

	ret = ctx->pmeth->ctrl(ctx, EVP_PKEY_CTRL_PEER_KEY, 1, peer);

	if (ret <= 0) {
		ctx->peerkey = NULL;
		return ret;
	}

	CRYPTO_add(&peer->references, 1, CRYPTO_LOCK_EVP_PKEY);
	return 1;
}

int
EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *pkeylen)
{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->derive) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	if (ctx->operation != EVP_PKEY_OP_DERIVE) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}
	M_check_autoarg(ctx, key, pkeylen, EVP_F_EVP_PKEY_DERIVE)
	return ctx->pmeth->derive(ctx, key, pkeylen);
}
@


1.5
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: pmeth_fn.c,v 1.4 2014/07/11 08:44:48 jsing Exp $ */
d79 1
a79 1
			EVPerr(err, EVP_R_BUFFER_TOO_SMALL); /*ckerr_ignore*/\
d90 1
a90 2
		EVPerr(EVP_F_EVP_PKEY_SIGN_INIT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d107 1
a107 2
		EVPerr(EVP_F_EVP_PKEY_SIGN,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d111 1
a111 1
		EVPerr(EVP_F_EVP_PKEY_SIGN, EVP_R_OPERATON_NOT_INITIALIZED);
d124 1
a124 2
		EVPerr(EVP_F_EVP_PKEY_VERIFY_INIT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d141 1
a141 2
		EVPerr(EVP_F_EVP_PKEY_VERIFY,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d145 1
a145 1
		EVPerr(EVP_F_EVP_PKEY_VERIFY, EVP_R_OPERATON_NOT_INITIALIZED);
d157 1
a157 2
		EVPerr(EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d174 1
a174 2
		EVPerr(EVP_F_EVP_PKEY_VERIFY_RECOVER,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d178 1
a178 2
		EVPerr(EVP_F_EVP_PKEY_VERIFY_RECOVER,
		    EVP_R_OPERATON_NOT_INITIALIZED);
d191 1
a191 2
		EVPerr(EVP_F_EVP_PKEY_ENCRYPT_INIT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d208 1
a208 2
		EVPerr(EVP_F_EVP_PKEY_ENCRYPT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d212 1
a212 1
		EVPerr(EVP_F_EVP_PKEY_ENCRYPT, EVP_R_OPERATON_NOT_INITIALIZED);
d225 1
a225 2
		EVPerr(EVP_F_EVP_PKEY_DECRYPT_INIT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d242 1
a242 2
		EVPerr(EVP_F_EVP_PKEY_DECRYPT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d246 1
a246 1
		EVPerr(EVP_F_EVP_PKEY_DECRYPT, EVP_R_OPERATON_NOT_INITIALIZED);
d259 1
a259 2
		EVPerr(EVP_F_EVP_PKEY_DERIVE_INIT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d279 1
a279 2
		EVPerr(EVP_F_EVP_PKEY_DERIVE_SET_PEER,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d285 1
a285 2
		EVPerr(EVP_F_EVP_PKEY_DERIVE_SET_PEER,
		    EVP_R_OPERATON_NOT_INITIALIZED);
d298 1
a298 1
		EVPerr(EVP_F_EVP_PKEY_DERIVE_SET_PEER, EVP_R_NO_KEY_SET);
d303 1
a303 2
		EVPerr(EVP_F_EVP_PKEY_DERIVE_SET_PEER,
		    EVP_R_DIFFERENT_KEY_TYPES);
d314 1
a314 2
		EVPerr(EVP_F_EVP_PKEY_DERIVE_SET_PEER,
		    EVP_R_DIFFERENT_PARAMETERS);
d336 1
a336 2
		EVPerr(EVP_F_EVP_PKEY_DERIVE,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d340 1
a340 1
		EVPerr(EVP_F_EVP_PKEY_DERIVE, EVP_R_OPERATON_NOT_INITIALIZED);
@


1.4
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pmeth_fn.c,v 1.3 2014/06/12 15:49:29 deraadt Exp $ */
d334 1
a334 2
	if (ctx->peerkey)
		EVP_PKEY_free(ctx->peerkey);
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d61 3
a63 1
#include "cryptlib.h"
d65 1
a65 1
#include <openssl/evp.h>
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* pmeth_fn.c */
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d82 3
a84 2
int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)
	{
d86 2
a87 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->sign)
		{
d89 1
a89 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d91 1
a91 1
		}
d99 1
a99 1
	}
d101 5
a105 6
int EVP_PKEY_sign(EVP_PKEY_CTX *ctx,
			unsigned char *sig, size_t *siglen,
			const unsigned char *tbs, size_t tbslen)
	{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->sign)
		{
d107 1
a107 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d109 2
a110 3
		}
	if (ctx->operation != EVP_PKEY_OP_SIGN)
		{
d113 1
a113 1
		}
d116 1
a116 1
	}
d118 3
a120 2
int EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx)
	{
d122 2
a123 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->verify)
		{
d125 1
a125 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d127 1
a127 1
		}
d135 1
a135 1
	}
d137 5
a141 6
int EVP_PKEY_verify(EVP_PKEY_CTX *ctx,
			const unsigned char *sig, size_t siglen,
			const unsigned char *tbs, size_t tbslen)
	{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->verify)
		{
d143 1
a143 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d145 2
a146 3
		}
	if (ctx->operation != EVP_PKEY_OP_VERIFY)
		{
d149 1
a149 1
		}
d151 1
a151 1
	}
d153 3
a155 2
int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx)
	{
d157 2
a158 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->verify_recover)
		{
d160 1
a160 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d162 1
a162 1
		}
d170 1
a170 1
	}
d172 5
a176 6
int EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,
			unsigned char *rout, size_t *routlen,
			const unsigned char *sig, size_t siglen)
	{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->verify_recover)
		{
d178 1
a178 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d180 4
a183 4
		}
	if (ctx->operation != EVP_PKEY_OP_VERIFYRECOVER)
		{
		EVPerr(EVP_F_EVP_PKEY_VERIFY_RECOVER, EVP_R_OPERATON_NOT_INITIALIZED);
d185 1
a185 1
		}
d188 1
a188 1
	}
d190 3
a192 2
int EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx)
	{
d194 2
a195 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->encrypt)
		{
d197 1
a197 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d199 1
a199 1
		}
d207 1
a207 1
	}
d209 5
a213 6
int EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,
			unsigned char *out, size_t *outlen,
			const unsigned char *in, size_t inlen)
	{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->encrypt)
		{
d215 1
a215 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d217 2
a218 3
		}
	if (ctx->operation != EVP_PKEY_OP_ENCRYPT)
		{
d221 1
a221 1
		}
d224 1
a224 1
	}
d226 3
a228 2
int EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx)
	{
d230 2
a231 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->decrypt)
		{
d233 1
a233 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d235 1
a235 1
		}
d243 1
a243 1
	}
d245 5
a249 6
int EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,
			unsigned char *out, size_t *outlen,
			const unsigned char *in, size_t inlen)
	{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->decrypt)
		{
d251 1
a251 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d253 2
a254 3
		}
	if (ctx->operation != EVP_PKEY_OP_DECRYPT)
		{
d257 1
a257 1
		}
d260 1
a260 1
	}
d262 4
d267 1
a267 5
int EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx)
	{
	int ret;
	if (!ctx || !ctx->pmeth || !ctx->pmeth->derive)
		{
d269 1
a269 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d271 1
a271 1
		}
d279 1
a279 1
	}
d281 3
a283 2
int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)
	{
d285 4
a288 2
	if (!ctx || !ctx->pmeth || !(ctx->pmeth->derive||ctx->pmeth->encrypt||ctx->pmeth->decrypt) || !ctx->pmeth->ctrl)
		{
d290 1
a290 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d292 4
a295 3
		}
	if (ctx->operation != EVP_PKEY_OP_DERIVE && ctx->operation != EVP_PKEY_OP_ENCRYPT && ctx->operation != EVP_PKEY_OP_DECRYPT)
		{
d297 1
a297 1
					EVP_R_OPERATON_NOT_INITIALIZED);
d299 1
a299 1
		}
d309 1
a309 2
	if (!ctx->pkey)
		{
d312 1
a312 1
		}
d314 1
a314 2
	if (ctx->pkey->type != peer->type)
		{
d316 1
a316 1
						EVP_R_DIFFERENT_KEY_TYPES);
d318 1
a318 1
		}
d326 1
a326 2
		!EVP_PKEY_cmp_parameters(ctx->pkey, peer))
		{
d328 1
a328 1
						EVP_R_DIFFERENT_PARAMETERS);
d330 1
a330 1
		}
d338 1
a338 2
	if (ret <= 0)
		{
d341 1
a341 1
		}
d343 1
a343 1
	CRYPTO_add(&peer->references,1,CRYPTO_LOCK_EVP_PKEY);
d345 1
a345 2
	}

d347 4
a350 4
int EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *pkeylen)
	{
	if (!ctx || !ctx->pmeth || !ctx->pmeth->derive)
		{
d352 1
a352 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d354 2
a355 3
		}
	if (ctx->operation != EVP_PKEY_OP_DERIVE)
		{
d358 1
a358 1
		}
d361 1
a361 2
	}

@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@
