head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.6
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.13;
commitid	yQEL1wOWIearrW15;

1.13
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.05.03.16.22.28;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.21;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.39;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.09;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.26;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.10;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: bio_md.c,v 1.13 2014/06/12 15:49:29 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <errno.h>

#include <openssl/buffer.h>
#include <openssl/evp.h>

/* BIO_put and BIO_get both add to the digest,
 * BIO_gets returns the digest */

static int md_write(BIO *h, char const *buf, int num);
static int md_read(BIO *h, char *buf, int size);
/*static int md_puts(BIO *h, const char *str); */
static int md_gets(BIO *h, char *str, int size);
static long md_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int md_new(BIO *h);
static int md_free(BIO *data);
static long md_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);

static BIO_METHOD methods_md = {
	.type = BIO_TYPE_MD,
	.name = "message digest",
	.bwrite = md_write,
	.bread = md_read,
	.bgets = md_gets,
	.ctrl = md_ctrl,
	.create = md_new,
	.destroy = md_free,
	.callback_ctrl = md_callback_ctrl
};

BIO_METHOD *
BIO_f_md(void)
{
	return (&methods_md);
}

static int
md_new(BIO *bi)
{
	EVP_MD_CTX *ctx;

	ctx = EVP_MD_CTX_create();
	if (ctx == NULL)
		return (0);

	bi->init = 0;
	bi->ptr = (char *)ctx;
	bi->flags = 0;
	return (1);
}

static int
md_free(BIO *a)
{
	if (a == NULL)
		return (0);
	EVP_MD_CTX_destroy(a->ptr);
	a->ptr = NULL;
	a->init = 0;
	a->flags = 0;
	return (1);
}

static int
md_read(BIO *b, char *out, int outl)
{
	int ret = 0;
	EVP_MD_CTX *ctx;

	if (out == NULL)
		return (0);
	ctx = b->ptr;

	if ((ctx == NULL) || (b->next_bio == NULL))
		return (0);

	ret = BIO_read(b->next_bio, out, outl);
	if (b->init) {
		if (ret > 0) {
			if (EVP_DigestUpdate(ctx, (unsigned char *)out,
			    (unsigned int)ret) <= 0)
				return (-1);
		}
	}
	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);
	return (ret);
}

static int
md_write(BIO *b, const char *in, int inl)
{
	int ret = 0;
	EVP_MD_CTX *ctx;

	if ((in == NULL) || (inl <= 0))
		return (0);
	ctx = b->ptr;

	if ((ctx != NULL) && (b->next_bio != NULL))
		ret = BIO_write(b->next_bio, in, inl);
	if (b->init) {
		if (ret > 0) {
			if (!EVP_DigestUpdate(ctx, (const unsigned char *)in,
			    (unsigned int)ret)) {
				BIO_clear_retry_flags(b);
				return 0;
			}
		}
	}
	if (b->next_bio != NULL) {
		BIO_clear_retry_flags(b);
		BIO_copy_next_retry(b);
	}
	return (ret);
}

static long
md_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	EVP_MD_CTX *ctx, *dctx, **pctx;
	const EVP_MD **ppmd;
	EVP_MD *md;
	long ret = 1;
	BIO *dbio;

	ctx = b->ptr;

	switch (cmd) {
	case BIO_CTRL_RESET:
		if (b->init)
			ret = EVP_DigestInit_ex(ctx, ctx->digest, NULL);
		else
			ret = 0;
		if (ret > 0)
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_C_GET_MD:
		if (b->init) {
			ppmd = ptr;
			*ppmd = ctx->digest;
		} else
			ret = 0;
		break;
	case BIO_C_GET_MD_CTX:
		pctx = ptr;
		*pctx = ctx;
		b->init = 1;
		break;
	case BIO_C_SET_MD_CTX:
		if (b->init)
			b->ptr = ptr;
		else
			ret = 0;
		break;
	case BIO_C_DO_STATE_MACHINE:
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;

	case BIO_C_SET_MD:
		md = ptr;
		ret = EVP_DigestInit_ex(ctx, md, NULL);
		if (ret > 0)
			b->init = 1;
		break;
	case BIO_CTRL_DUP:
		dbio = ptr;
		dctx = dbio->ptr;
		if (!EVP_MD_CTX_copy_ex(dctx, ctx))
			return 0;
		b->init = 1;
		break;
	default:
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	}
	return (ret);
}

static long
md_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	default:
		ret = BIO_callback_ctrl(b->next_bio, cmd, fp);
		break;
	}
	return (ret);
}

static int
md_gets(BIO *bp, char *buf, int size)
{
	EVP_MD_CTX *ctx;
	unsigned int ret;

	ctx = bp->ptr;
	if (size < ctx->digest->md_size)
		return (0);
	if (EVP_DigestFinal_ex(ctx, (unsigned char *)buf, &ret) <= 0)
		return -1;

	return ((int)ret);
}

/*
static int md_puts(bp,str)
BIO *bp;
char *str;
	{
	return(-1);
	}
*/
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d61 1
a61 1
#include "cryptlib.h"
@


1.12
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/evp/bio_md.c */
@


1.11
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d75 1
a75 1
static long md_callback_ctrl(BIO *h,int cmd,bio_info_cb *fp);
d89 9
a97 7
BIO_METHOD *BIO_f_md(void)
	{
	return(&methods_md);
	}

static int md_new(BIO *bi)
	{
d100 15
a114 12
	ctx=EVP_MD_CTX_create();
	if (ctx == NULL) return(0);

	bi->init=0;
	bi->ptr=(char *)ctx;
	bi->flags=0;
	return(1);
	}

static int md_free(BIO *a)
	{
	if (a == NULL) return(0);
d116 10
a125 9
	a->ptr=NULL;
	a->init=0;
	a->flags=0;
	return(1);
	}
	
static int md_read(BIO *b, char *out, int outl)
	{
	int ret=0;
d128 13
a140 13
	if (out == NULL) return(0);
	ctx=b->ptr;

	if ((ctx == NULL) || (b->next_bio == NULL)) return(0);

	ret=BIO_read(b->next_bio,out,outl);
	if (b->init)
		{
		if (ret > 0)
			{
			if (EVP_DigestUpdate(ctx,(unsigned char *)out,
				(unsigned int)ret)<=0) return (-1);
			}
d142 1
d145 2
a146 2
	return(ret);
	}
d148 4
a151 3
static int md_write(BIO *b, const char *in, int inl)
	{
	int ret=0;
d154 3
a156 2
	if ((in == NULL) || (inl <= 0)) return(0);
	ctx=b->ptr;
d159 5
a163 8
		ret=BIO_write(b->next_bio,in,inl);
	if (b->init)
		{
		if (ret > 0)
			{
			if (!EVP_DigestUpdate(ctx,(const unsigned char *)in,
				(unsigned int)ret))
				{
a165 1
				}
d168 2
a169 2
	if(b->next_bio != NULL)
		{
a171 2
		}
	return(ret);
d173 2
d176 4
a179 3
static long md_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
	EVP_MD_CTX *ctx,*dctx,**pctx;
d182 1
a182 1
	long ret=1;
d185 1
a185 1
	ctx=b->ptr;
d187 1
a187 2
	switch (cmd)
		{
d190 1
a190 1
			ret = EVP_DigestInit_ex(ctx,ctx->digest, NULL);
d192 1
a192 1
			ret=0;
d194 1
a194 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d197 5
a201 7
		if (b->init)
			{
			ppmd=ptr;
			*ppmd=ctx->digest;
			}
		else
			ret=0;
d204 2
a205 2
		pctx=ptr;
		*pctx=ctx;
d210 1
a210 1
			b->ptr=ptr;
d212 1
a212 1
			ret=0;
d216 1
a216 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d221 2
a222 2
		md=ptr;
		ret = EVP_DigestInit_ex(ctx,md, NULL);
d224 1
a224 1
			b->init=1;
d227 3
a229 3
		dbio=ptr;
		dctx=dbio->ptr;
		if (!EVP_MD_CTX_copy_ex(dctx,ctx))
d231 1
a231 1
		b->init=1;
d234 1
a234 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
a235 2
		}
	return(ret);
d237 2
d240 8
a247 7
static long md_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
d249 1
a249 1
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
a250 2
		}
	return(ret);
d252 2
d255 3
a257 2
static int md_gets(BIO *bp, char *buf, int size)
	{
d261 1
a261 2

	ctx=bp->ptr;
d263 2
a264 2
		return(0);
	if (EVP_DigestFinal_ex(ctx,(unsigned char *)buf,&ret)<=0) 
d266 3
a268 3
		
	return((int)ret);
	}
a277 1

@


1.10
log
@resolve conflicts
@
text
@d77 11
a87 12
static BIO_METHOD methods_md=
	{
	BIO_TYPE_MD,"message digest",
	md_write,
	md_read,
	NULL, /* md_puts, */
	md_gets,
	md_ctrl,
	md_new,
	md_free,
	md_callback_ctrl,
	};
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d156 6
a161 2
			EVP_DigestUpdate(ctx,(const unsigned char *)in,
				(unsigned int)ret);
d227 2
a228 1
		EVP_MD_CTX_copy_ex(dctx,ctx);
@


1.8
log
@resolve conflicts
@
text
@d133 2
a134 2
			EVP_DigestUpdate(ctx,(unsigned char *)out,
				(unsigned int)ret);
d160 5
a164 2
	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);
d200 1
d256 3
a258 1
	EVP_DigestFinal_ex(ctx,(unsigned char *)buf,&ret);
@


1.7
log
@resolve conflicts
@
text
@d195 2
a196 7
		if (b->init)
			{
			pctx=ptr;
			*pctx=ctx;
			}
		else
			ret=0;
@


1.6
log
@resolve conflicts
@
text
@d156 1
a156 1
			EVP_DigestUpdate(ctx,(unsigned char *)in,
d195 7
a201 2
		pctx=ptr;
		*pctx=ctx;
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d179 1
a179 1
			EVP_DigestInit_ex(ctx,ctx->digest, NULL);
d182 2
a183 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d195 4
d200 1
a200 4
			{
			pctx=ptr;
			*pctx=ctx;
			}
d212 3
a214 2
		EVP_DigestInit_ex(ctx,md, NULL);
		b->init=1;
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d99 1
a99 1
	ctx=(EVP_MD_CTX *)OPENSSL_malloc(sizeof(EVP_MD_CTX));
d111 1
a111 1
	OPENSSL_free(a->ptr);
d124 1
a124 1
	ctx=(EVP_MD_CTX *)b->ptr;
d148 1
a148 1
	ctx=(EVP_MD_CTX *)b->ptr;
d173 1
a173 1
	ctx=(EVP_MD_CTX *)b->ptr;
d179 1
a179 1
			EVP_DigestInit(ctx,ctx->digest);
d187 1
a187 1
			ppmd=(const EVP_MD **)ptr;
d196 1
a196 1
			pctx=(EVP_MD_CTX **)ptr;
d209 2
a210 2
		md=(EVP_MD *)ptr;
		EVP_DigestInit(ctx,md);
d214 3
a216 3
		dbio=(BIO *)ptr;
		dctx=(EVP_MD_CTX *)dbio->ptr;
		memcpy(dctx,ctx,sizeof(ctx));
d246 1
a246 1
	ctx=(EVP_MD_CTX *)bp->ptr;
d249 1
a249 1
	EVP_DigestFinal(ctx,(unsigned char *)buf,&ret);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 5
a72 5
static int md_write(BIO *h,char *buf,int num);
static int md_read(BIO *h,char *buf,int size);
/*static int md_puts(BIO *h,char *str); */
static int md_gets(BIO *h,char *str,int size);
static long md_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d75 1
a75 1
static long md_callback_ctrl(BIO *h,int cmd,void (*fp)());
d99 1
a99 1
	ctx=(EVP_MD_CTX *)Malloc(sizeof(EVP_MD_CTX));
d111 1
a111 1
	Free(a->ptr);
d142 1
a142 1
static int md_write(BIO *b, char *in, int inl)
d165 1
a165 1
static long md_ctrl(BIO *b, int cmd, long num, char *ptr)
d226 1
a226 1
static long md_callback_ctrl(BIO *b, int cmd, void (*fp)())
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d75 2
d87 1
d221 14
@


1.1
log
@Initial revision
@
text
@d62 2
a63 2
#include "buffer.h"
#include "evp.h"
a67 1
#ifndef NOPROTO
a74 10
#else
static int md_write();
static int md_read();
/*static int md_puts(); */
static int md_gets();
static long md_ctrl();
static int md_new();
static int md_free();
#endif

d87 1
a87 1
BIO_METHOD *BIO_f_md()
d92 1
a92 2
static int md_new(bi)
BIO *bi;
d105 1
a105 2
static int md_free(a)
BIO *a;
d115 1
a115 4
static int md_read(b,out,outl)
BIO *b;
char *out;
int outl;
d139 1
a139 4
static int md_write(b,in,inl)
BIO *b;
char *in;
int inl;
d162 1
a162 5
static long md_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d165 1
a165 1
	EVP_MD **ppmd;
d184 1
a184 1
			ppmd=(EVP_MD **)ptr;
d223 1
a223 4
static int md_gets(bp,buf,size)
BIO *bp;
char *buf;
int size;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 2
a63 2
#include <openssl/buffer.h>
#include <openssl/evp.h>
d68 6
a73 5
static int md_write(BIO *h, char const *buf, int num);
static int md_read(BIO *h, char *buf, int size);
/*static int md_puts(BIO *h, const char *str); */
static int md_gets(BIO *h, char *str, int size);
static long md_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d76 9
a84 1
static long md_callback_ctrl(BIO *h,int cmd,bio_info_cb *fp);
a95 1
	md_callback_ctrl,
d98 1
a98 1
BIO_METHOD *BIO_f_md(void)
d103 2
a104 1
static int md_new(BIO *bi)
d108 1
a108 1
	ctx=EVP_MD_CTX_create();
d117 2
a118 1
static int md_free(BIO *a)
d121 1
a121 1
	EVP_MD_CTX_destroy(a->ptr);
d128 4
a131 1
static int md_read(BIO *b, char *out, int outl)
d137 1
a137 1
	ctx=b->ptr;
d155 4
a158 1
static int md_write(BIO *b, const char *in, int inl)
d164 1
a164 1
	ctx=b->ptr;
d181 5
a185 1
static long md_ctrl(BIO *b, int cmd, long num, void *ptr)
d188 1
a188 1
	const EVP_MD **ppmd;
d193 1
a193 1
	ctx=b->ptr;
d199 1
a199 1
			EVP_DigestInit_ex(ctx,ctx->digest, NULL);
d207 1
a207 1
			ppmd=ptr;
d216 1
a216 1
			pctx=ptr;
d229 2
a230 2
		md=ptr;
		EVP_DigestInit_ex(ctx,md, NULL);
d234 3
a236 3
		dbio=ptr;
		dctx=dbio->ptr;
		EVP_MD_CTX_copy_ex(dctx,ctx);
d246 4
a249 15
static long md_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
	default:
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
		break;
		}
	return(ret);
	}

static int md_gets(BIO *bp, char *buf, int size)
d255 1
a255 1
	ctx=bp->ptr;
d258 1
a258 1
	EVP_DigestFinal_ex(ctx,(unsigned char *)buf,&ret);
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d179 1
a179 1
			ret = EVP_DigestInit_ex(ctx,ctx->digest, NULL);
d182 1
a182 2
		if (ret > 0)
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
a193 4
		pctx=ptr;
		*pctx=ctx;
		break;
	case BIO_C_SET_MD_CTX:
d195 4
a198 1
			b->ptr=ptr;
d210 2
a211 3
		ret = EVP_DigestInit_ex(ctx,md, NULL);
		if (ret > 0)
			b->init=1;
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d156 1
a156 1
			EVP_DigestUpdate(ctx,(const unsigned char *)in,
d195 2
a196 7
		if (b->init)
			{
			pctx=ptr;
			*pctx=ctx;
			}
		else
			ret=0;
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d195 7
a201 2
		pctx=ptr;
		*pctx=ctx;
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d133 2
a134 2
			if (EVP_DigestUpdate(ctx,(unsigned char *)out,
				(unsigned int)ret)<=0) return (-1);
d160 2
a161 5
	if(b->next_bio != NULL)
		{
		BIO_clear_retry_flags(b);
		BIO_copy_next_retry(b);
		}
a196 1
		b->init = 1;
d252 1
a252 3
	if (EVP_DigestFinal_ex(ctx,(unsigned char *)buf,&ret)<=0) 
		return -1;
		
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d156 2
a157 6
			if (!EVP_DigestUpdate(ctx,(const unsigned char *)in,
				(unsigned int)ret))
				{
				BIO_clear_retry_flags(b);
				return 0;
				}
d223 1
a223 2
		if (!EVP_MD_CTX_copy_ex(dctx,ctx))
			return 0;
@


