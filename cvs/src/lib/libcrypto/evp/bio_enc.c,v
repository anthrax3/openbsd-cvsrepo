head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.2
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.20
date	2017.05.02.03.59.44;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Dm63V7JYy6WzetfM;

1.19
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.18;
commitid	vHznCDK3idwNEFz4;

1.18
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.16;
commitid	id8dTrTMtnTn4fqt;

1.16
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	2nvnQBrv22dLtvTt;

1.14
date	2014.05.11.12.20.20;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.03.16.22.28;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.39;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.09;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.26;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.18;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.33;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@use freezero() instead of memset/explicit_bzero + free.  Substantially
reduces conditional logic (-218, +82).

MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH cache alignment calculation bn/bn_exp.c
wasn'tt quite right.  Two other tricky bits with ASN1_STRING_FLAG_NDEF and
BN_FLG_STATIC_DATA where the condition cannot be collapsed completely.

Passes regress.  ok beck
@
text
@/* $OpenBSD: bio_enc.c,v 1.19 2015/09/10 15:56:25 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/evp.h>

static int enc_write(BIO *h, const char *buf, int num);
static int enc_read(BIO *h, char *buf, int size);
/*static int enc_puts(BIO *h, const char *str); */
/*static int enc_gets(BIO *h, char *str, int size); */
static long enc_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int enc_new(BIO *h);
static int enc_free(BIO *data);
static long enc_callback_ctrl(BIO *h, int cmd, bio_info_cb *fps);
#define ENC_BLOCK_SIZE	(1024*4)
#define BUF_OFFSET	(EVP_MAX_BLOCK_LENGTH*2)

typedef struct enc_struct {
	int buf_len;
	int buf_off;
	int cont;		/* <= 0 when finished */
	int finished;
	int ok;			/* bad decrypt */
	EVP_CIPHER_CTX cipher;
	/* buf is larger than ENC_BLOCK_SIZE because EVP_DecryptUpdate
	 * can return up to a block more data than is presented to it
	 */
	char buf[ENC_BLOCK_SIZE + BUF_OFFSET + 2];
} BIO_ENC_CTX;

static BIO_METHOD methods_enc = {
	.type = BIO_TYPE_CIPHER,
	.name = "cipher",
	.bwrite = enc_write,
	.bread = enc_read,
	.ctrl = enc_ctrl,
	.create = enc_new,
	.destroy = enc_free,
	.callback_ctrl = enc_callback_ctrl
};

BIO_METHOD *
BIO_f_cipher(void)
{
	return (&methods_enc);
}

static int
enc_new(BIO *bi)
{
	BIO_ENC_CTX *ctx;

	ctx = malloc(sizeof(BIO_ENC_CTX));
	if (ctx == NULL)
		return (0);
	EVP_CIPHER_CTX_init(&ctx->cipher);

	ctx->buf_len = 0;
	ctx->buf_off = 0;
	ctx->cont = 1;
	ctx->finished = 0;
	ctx->ok = 1;

	bi->init = 0;
	bi->ptr = (char *)ctx;
	bi->flags = 0;
	return (1);
}

static int
enc_free(BIO *a)
{
	BIO_ENC_CTX *b;

	if (a == NULL)
		return (0);
	b = (BIO_ENC_CTX *)a->ptr;
	EVP_CIPHER_CTX_cleanup(&(b->cipher));
	freezero(a->ptr, sizeof(BIO_ENC_CTX));
	a->ptr = NULL;
	a->init = 0;
	a->flags = 0;
	return (1);
}

static int
enc_read(BIO *b, char *out, int outl)
{
	int ret = 0, i;
	BIO_ENC_CTX *ctx;

	if (out == NULL)
		return (0);
	ctx = (BIO_ENC_CTX *)b->ptr;

	if ((ctx == NULL) || (b->next_bio == NULL))
		return (0);

	/* First check if there are bytes decoded/encoded */
	if (ctx->buf_len > 0) {
		i = ctx->buf_len - ctx->buf_off;
		if (i > outl)
			i = outl;
		memcpy(out, &(ctx->buf[ctx->buf_off]), i);
		ret = i;
		out += i;
		outl -= i;
		ctx->buf_off += i;
		if (ctx->buf_len == ctx->buf_off) {
			ctx->buf_len = 0;
			ctx->buf_off = 0;
		}
	}

	/* At this point, we have room of outl bytes and an empty
	 * buffer, so we should read in some more. */

	while (outl > 0) {
		if (ctx->cont <= 0)
			break;

		/* read in at IV offset, read the EVP_Cipher
		 * documentation about why */
		i = BIO_read(b->next_bio, &(ctx->buf[BUF_OFFSET]), ENC_BLOCK_SIZE);

		if (i <= 0) {
			/* Should be continue next time we are called? */
			if (!BIO_should_retry(b->next_bio)) {
				ctx->cont = i;
				i = EVP_CipherFinal_ex(&(ctx->cipher),
				    (unsigned char *)ctx->buf,
				    &(ctx->buf_len));
				ctx->ok = i;
				ctx->buf_off = 0;
			} else {
				ret = (ret == 0) ? i : ret;
				break;
			}
		} else {
			EVP_CipherUpdate(&(ctx->cipher),
			    (unsigned char *)ctx->buf, &ctx->buf_len,
			    (unsigned char *)&(ctx->buf[BUF_OFFSET]), i);
			ctx->cont = 1;
			/* Note: it is possible for EVP_CipherUpdate to
			 * decrypt zero bytes because this is or looks like
			 * the final block: if this happens we should retry
			 * and either read more data or decrypt the final
			 * block
			 */
			if (ctx->buf_len == 0)
				continue;
		}

		if (ctx->buf_len <= outl)
			i = ctx->buf_len;
		else
			i = outl;
		if (i <= 0)
			break;
		memcpy(out, ctx->buf, i);
		ret += i;
		ctx->buf_off = i;
		outl -= i;
		out += i;
	}

	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);
	return ((ret == 0) ? ctx->cont : ret);
}

static int
enc_write(BIO *b, const char *in, int inl)
{
	int ret = 0, n, i;
	BIO_ENC_CTX *ctx;

	ctx = (BIO_ENC_CTX *)b->ptr;
	ret = inl;

	BIO_clear_retry_flags(b);
	n = ctx->buf_len - ctx->buf_off;
	while (n > 0) {
		i = BIO_write(b->next_bio, &(ctx->buf[ctx->buf_off]), n);
		if (i <= 0) {
			BIO_copy_next_retry(b);
			return (i);
		}
		ctx->buf_off += i;
		n -= i;
	}
	/* at this point all pending data has been written */

	if ((in == NULL) || (inl <= 0))
		return (0);

	ctx->buf_off = 0;
	while (inl > 0) {
		n = (inl > ENC_BLOCK_SIZE) ? ENC_BLOCK_SIZE : inl;
		EVP_CipherUpdate(&(ctx->cipher),
		    (unsigned char *)ctx->buf, &ctx->buf_len,
		    (unsigned char *)in, n);
		inl -= n;
		in += n;

		ctx->buf_off = 0;
		n = ctx->buf_len;
		while (n > 0) {
			i = BIO_write(b->next_bio, &(ctx->buf[ctx->buf_off]), n);
			if (i <= 0) {
				BIO_copy_next_retry(b);
				return (ret == inl) ? i : ret - inl;
			}
			n -= i;
			ctx->buf_off += i;
		}
		ctx->buf_len = 0;
		ctx->buf_off = 0;
	}
	BIO_copy_next_retry(b);
	return (ret);
}

static long
enc_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	BIO *dbio;
	BIO_ENC_CTX *ctx, *dctx;
	long ret = 1;
	int i;
	EVP_CIPHER_CTX **c_ctx;

	ctx = (BIO_ENC_CTX *)b->ptr;

	switch (cmd) {
	case BIO_CTRL_RESET:
		ctx->ok = 1;
		ctx->finished = 0;
		EVP_CipherInit_ex(&(ctx->cipher), NULL, NULL, NULL, NULL,
		    ctx->cipher.encrypt);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_EOF:	/* More to read */
		if (ctx->cont <= 0)
			ret = 1;
		else
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_WPENDING:
		ret = ctx->buf_len - ctx->buf_off;
		if (ret <= 0)
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_PENDING: /* More to read in buffer */
		ret = ctx->buf_len - ctx->buf_off;
		if (ret <= 0)
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_FLUSH:
		/* do a final write */
again:
		while (ctx->buf_len != ctx->buf_off) {
			i = enc_write(b, NULL, 0);
			if (i < 0)
				return i;
		}

		if (!ctx->finished) {
			ctx->finished = 1;
			ctx->buf_off = 0;
			ret = EVP_CipherFinal_ex(&(ctx->cipher),
			    (unsigned char *)ctx->buf,
			    &(ctx->buf_len));
			ctx->ok = (int)ret;
			if (ret <= 0)
				break;

			/* push out the bytes */
			goto again;
		}

		/* Finally flush the underlying BIO */
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_C_GET_CIPHER_STATUS:
		ret = (long)ctx->ok;
		break;
	case BIO_C_DO_STATE_MACHINE:
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;
	case BIO_C_GET_CIPHER_CTX:
		c_ctx = (EVP_CIPHER_CTX **)ptr;
		(*c_ctx) = &(ctx->cipher);
		b->init = 1;
		break;
	case BIO_CTRL_DUP:
		dbio = (BIO *)ptr;
		dctx = (BIO_ENC_CTX *)dbio->ptr;
		EVP_CIPHER_CTX_init(&dctx->cipher);
		ret = EVP_CIPHER_CTX_copy(&dctx->cipher, &ctx->cipher);
		if (ret)
			dbio->init = 1;
		break;
	default:
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	}
	return (ret);
}

static long
enc_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	default:
		ret = BIO_callback_ctrl(b->next_bio, cmd, fp);
		break;
	}
	return (ret);
}

/*
void BIO_set_cipher_ctx(b,c)
BIO *b;
EVP_CIPHER_ctx *c;
	{
	if (b == NULL) return;

	if ((b->callback != NULL) &&
		(b->callback(b,BIO_CB_CTRL,(char *)c,BIO_CTRL_SET,e,0L) <= 0))
		return;

	b->init=1;
	ctx=(BIO_ENC_CTX *)b->ptr;
	memcpy(ctx->cipher,c,sizeof(EVP_CIPHER_CTX));

	if (b->callback != NULL)
		b->callback(b,BIO_CB_CTRL,(char *)c,BIO_CTRL_SET,e,1L);
	}
*/

void
BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,
    const unsigned char *i, int e)
{
	BIO_ENC_CTX *ctx;

	if (b == NULL)
		return;

	if ((b->callback != NULL) &&
	    (b->callback(b, BIO_CB_CTRL, (const char *)c, BIO_CTRL_SET, e, 0L) <= 0))
		return;

	b->init = 1;
	ctx = (BIO_ENC_CTX *)b->ptr;
	EVP_CipherInit_ex(&(ctx->cipher), c, NULL, k, i, e);

	if (b->callback != NULL)
		b->callback(b, BIO_CB_CTRL, (const char *)c, BIO_CTRL_SET, e, 1L);
}
@


1.19
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_enc.c,v 1.18 2014/07/11 08:44:48 jsing Exp $ */
d138 1
a138 2
	explicit_bzero(a->ptr, sizeof(BIO_ENC_CTX));
	free(a->ptr);
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_enc.c,v 1.17 2014/07/10 13:58:22 jsing Exp $ */
d138 1
a138 1
	OPENSSL_cleanse(a->ptr, sizeof(BIO_ENC_CTX));
@


1.17
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_enc.c,v 1.16 2014/06/12 15:49:29 deraadt Exp $ */
a62 1
#include "cryptlib.h"
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 2
a62 1
#include <errno.h>
@


1.15
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/evp/bio_enc.c */
@


1.14
log
@More KNF.
@
text
@d111 1
a111 1
	ctx = (BIO_ENC_CTX *)malloc(sizeof(BIO_ENC_CTX));
@


1.13
log
@KNF.
@
text
@d422 1
a422 1
	EVP_CipherInit_ex(&(ctx->cipher), c,NULL, k, i, e);
@


1.12
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d76 1
a76 2
typedef struct enc_struct
	{
d86 2
a87 2
	char buf[ENC_BLOCK_SIZE+BUF_OFFSET+2];
	} BIO_ENC_CTX;
d89 1
a89 1
static BIO_METHOD methods_enc= {
d100 9
a108 7
BIO_METHOD *BIO_f_cipher(void)
	{
	return(&methods_enc);
	}

static int enc_new(BIO *bi)
	{
d111 3
a113 2
	ctx=(BIO_ENC_CTX *)malloc(sizeof(BIO_ENC_CTX));
	if (ctx == NULL) return(0);
d116 15
a130 14
	ctx->buf_len=0;
	ctx->buf_off=0;
	ctx->cont=1;
	ctx->finished=0;
	ctx->ok=1;

	bi->init=0;
	bi->ptr=(char *)ctx;
	bi->flags=0;
	return(1);
	}

static int enc_free(BIO *a)
	{
d133 3
a135 2
	if (a == NULL) return(0);
	b=(BIO_ENC_CTX *)a->ptr;
d137 1
a137 1
	OPENSSL_cleanse(a->ptr,sizeof(BIO_ENC_CTX));
d139 10
a148 9
	a->ptr=NULL;
	a->init=0;
	a->flags=0;
	return(1);
	}
	
static int enc_read(BIO *b, char *out, int outl)
	{
	int ret=0,i;
d151 3
a153 2
	if (out == NULL) return(0);
	ctx=(BIO_ENC_CTX *)b->ptr;
d155 2
a156 1
	if ((ctx == NULL) || (b->next_bio == NULL)) return(0);
d159 12
a170 14
	if (ctx->buf_len > 0)
		{
		i=ctx->buf_len-ctx->buf_off;
		if (i > outl) i=outl;
		memcpy(out,&(ctx->buf[ctx->buf_off]),i);
		ret=i;
		out+=i;
		outl-=i;
		ctx->buf_off+=i;
		if (ctx->buf_len == ctx->buf_off)
			{
			ctx->buf_len=0;
			ctx->buf_off=0;
			}
d172 1
d177 3
a179 3
	while (outl > 0)
		{
		if (ctx->cont <= 0) break;
d183 1
a183 1
		i=BIO_read(b->next_bio,&(ctx->buf[BUF_OFFSET]),ENC_BLOCK_SIZE);
d185 1
a185 2
		if (i <= 0)
			{
d187 9
a195 12
			if (!BIO_should_retry(b->next_bio))
				{
				ctx->cont=i;
				i=EVP_CipherFinal_ex(&(ctx->cipher),
					(unsigned char *)ctx->buf,
					&(ctx->buf_len));
				ctx->ok=i;
				ctx->buf_off=0;
				}
			else 
				{
				ret=(ret == 0)?i:ret;
a196 1
				}
d198 1
a198 2
		else
			{
d200 3
a202 3
				(unsigned char *)ctx->buf,&ctx->buf_len,
				(unsigned char *)&(ctx->buf[BUF_OFFSET]),i);
			ctx->cont=1;
d209 3
a211 2
			if(ctx->buf_len == 0) continue;
			}
d214 1
a214 1
			i=ctx->buf_len;
d216 9
a224 8
			i=outl;
		if (i <= 0) break;
		memcpy(out,ctx->buf,i);
		ret+=i;
		ctx->buf_off=i;
		outl-=i;
		out+=i;
		}
d228 2
a229 2
	return((ret == 0)?ctx->cont:ret);
	}
d231 4
a234 3
static int enc_write(BIO *b, const char *in, int inl)
	{
	int ret=0,n,i;
d237 2
a238 2
	ctx=(BIO_ENC_CTX *)b->ptr;
	ret=inl;
d241 4
a244 6
	n=ctx->buf_len-ctx->buf_off;
	while (n > 0)
		{
		i=BIO_write(b->next_bio,&(ctx->buf[ctx->buf_off]),n);
		if (i <= 0)
			{
d246 1
a246 4
			return(i);
			}
		ctx->buf_off+=i;
		n-=i;
d248 3
d253 2
a254 1
	if ((in == NULL) || (inl <= 0)) return(0);
d256 3
a258 4
	ctx->buf_off=0;
	while (inl > 0)
		{
		n=(inl > ENC_BLOCK_SIZE)?ENC_BLOCK_SIZE:inl;
d260 10
a269 12
			(unsigned char *)ctx->buf,&ctx->buf_len,
			(unsigned char *)in,n);
		inl-=n;
		in+=n;

		ctx->buf_off=0;
		n=ctx->buf_len;
		while (n > 0)
			{
			i=BIO_write(b->next_bio,&(ctx->buf[ctx->buf_off]),n);
			if (i <= 0)
				{
a271 3
				}
			n-=i;
			ctx->buf_off+=i;
d273 2
a274 2
		ctx->buf_len=0;
		ctx->buf_off=0;
d276 3
d280 2
a281 2
	return(ret);
	}
d283 3
a285 2
static long enc_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d287 2
a288 2
	BIO_ENC_CTX *ctx,*dctx;
	long ret=1;
d292 1
a292 1
	ctx=(BIO_ENC_CTX *)b->ptr;
d294 1
a294 2
	switch (cmd)
		{
d296 5
a300 5
		ctx->ok=1;
		ctx->finished=0;
		EVP_CipherInit_ex(&(ctx->cipher),NULL,NULL,NULL,NULL,
			ctx->cipher.encrypt);
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d304 1
a304 1
			ret=1;
d306 1
a306 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d309 1
a309 1
		ret=ctx->buf_len-ctx->buf_off;
d311 1
a311 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d314 1
a314 1
		ret=ctx->buf_len-ctx->buf_off;
d316 1
a316 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d321 2
a322 3
		while (ctx->buf_len != ctx->buf_off)
			{
			i=enc_write(b,NULL,0);
d325 1
a325 1
			}
d327 9
a335 9
		if (!ctx->finished)
			{
			ctx->finished=1;
			ctx->buf_off=0;
			ret=EVP_CipherFinal_ex(&(ctx->cipher),
				(unsigned char *)ctx->buf,
				&(ctx->buf_len));
			ctx->ok=(int)ret;
			if (ret <= 0) break;
d339 2
a340 2
			}
		
d342 1
a342 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d345 1
a345 1
		ret=(long)ctx->ok;
d349 1
a349 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d353 3
a355 3
		c_ctx=(EVP_CIPHER_CTX **)ptr;
		(*c_ctx)= &(ctx->cipher);
		b->init=1;
d358 2
a359 2
		dbio=(BIO *)ptr;
		dctx=(BIO_ENC_CTX *)dbio->ptr;
d361 1
a361 1
		ret = EVP_CIPHER_CTX_copy(&dctx->cipher,&ctx->cipher);
d363 1
a363 1
			dbio->init=1;
d366 1
a366 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
a367 2
		}
	return(ret);
d369 2
d372 8
a379 7
static long enc_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
d381 1
a381 1
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
a382 2
		}
	return(ret);
d384 2
d401 1
a401 1
	
d407 4
a410 3
void BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,
	     const unsigned char *i, int e)
	{
d413 2
a414 1
	if (b == NULL) return;
d417 1
a417 1
		(b->callback(b,BIO_CB_CTRL,(const char *)c,BIO_CTRL_SET,e,0L) <= 0))
d420 4
a423 4
	b->init=1;
	ctx=(BIO_ENC_CTX *)b->ptr;
	EVP_CipherInit_ex(&(ctx->cipher),c,NULL, k,i,e);
	
d425 2
a426 3
		b->callback(b,BIO_CB_CTRL,(const char *)c,BIO_CTRL_SET,e,1L);
	}

@


1.11
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d90 10
a99 12
static BIO_METHOD methods_enc=
	{
	BIO_TYPE_CIPHER,"cipher",
	enc_write,
	enc_read,
	NULL, /* enc_puts, */
	NULL, /* enc_gets, */
	enc_ctrl,
	enc_new,
	enc_free,
	enc_callback_ctrl,
	};
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d112 1
a112 1
	ctx=(BIO_ENC_CTX *)OPENSSL_malloc(sizeof(BIO_ENC_CTX));
d136 1
a136 1
	OPENSSL_free(a->ptr);
@


1.9
log
@resolve conflicts
@
text
@d364 4
a367 2
		memcpy(&(dctx->cipher),&(ctx->cipher),sizeof(ctx->cipher));
		dbio->init=1;
@


1.8
log
@resolve conflicts
@
text
@d408 2
a409 2
void BIO_set_cipher(BIO *b, const EVP_CIPHER *c, unsigned char *k,
	     unsigned char *i, int e)
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d74 1
a74 1
#define BUF_OFFSET	EVP_MAX_BLOCK_LENGTH
@


1.6
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d135 1
a135 1
	memset(a->ptr,0,sizeof(BIO_ENC_CTX));
d274 1
a274 1
				return(i);
d328 1
a328 4
				{
				ret=i;
				break;
				}
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d113 1
a114 1
	if (ctx == NULL) return(0);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d74 1
d84 4
a87 1
	char buf[ENC_BLOCK_SIZE+10];
d177 1
a177 1
		/* read in at offset 8, read the EVP_Cipher
d179 1
a179 1
		i=BIO_read(b->next_bio,&(ctx->buf[8]),ENC_BLOCK_SIZE);
d187 1
a187 1
				i=EVP_CipherFinal(&(ctx->cipher),
d203 1
a203 1
				(unsigned char *)&(ctx->buf[8]),i);
d301 1
a301 1
		EVP_CipherInit(&(ctx->cipher),NULL,NULL,NULL,
d338 1
a338 1
			ret=EVP_CipherFinal(&(ctx->cipher),
d424 1
a424 1
	EVP_CipherInit(&(ctx->cipher),c,k,i,e);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 5
a69 5
static int enc_write(BIO *h,char *buf,int num);
static int enc_read(BIO *h,char *buf,int size);
/*static int enc_puts(BIO *h,char *str); */
/*static int enc_gets(BIO *h,char *str,int size); */
static long enc_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d72 1
a72 1
static long enc_callback_ctrl(BIO *h,int cmd,void (*fp)());
d108 1
a108 1
	ctx=(BIO_ENC_CTX *)Malloc(sizeof(BIO_ENC_CTX));
d132 1
a132 1
	Free(a->ptr);
d227 1
a227 1
static int enc_write(BIO *b, char *in, int inl)
d282 1
a282 1
static long enc_ctrl(BIO *b, int cmd, long num, char *ptr)
d373 1
a373 1
static long enc_callback_ctrl(BIO *b, int cmd, void (*fp)())
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d72 1
d96 1
d189 2
a190 1
			else
d192 2
a193 1
			break;
d201 7
a213 1

d368 14
@


1.1
log
@Initial revision
@
text
@d62 2
a63 2
#include "buffer.h"
#include "evp.h"
a64 1
#ifndef NOPROTO
a71 10
#else
static int enc_write();
static int enc_read();
/*static int enc_puts(); */
/*static int enc_gets(); */
static long enc_ctrl();
static int enc_new();
static int enc_free();
#endif

d97 1
a97 1
BIO_METHOD *BIO_f_cipher()
d102 1
a102 2
static int enc_new(bi)
BIO *bi;
d122 1
a122 2
static int enc_free(a)
BIO *a;
d137 1
a137 4
static int enc_read(b,out,outl)
BIO *b;
char *out;
int outl;
d217 1
a217 4
static int enc_write(b,in,inl)
BIO *b;
char *in;
int inl;
d272 1
a272 5
static long enc_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d278 1
d345 5
a349 1

d383 2
a384 6
void BIO_set_cipher(b,c,k,i,e)
BIO *b;
EVP_CIPHER *c;
unsigned char *k;
unsigned char *i;
int e;
d391 1
a391 1
		(b->callback(b,BIO_CB_CTRL,(char *)c,BIO_CTRL_SET,e,0L) <= 0))
d399 1
a399 1
		b->callback(b,BIO_CB_CTRL,(char *)c,BIO_CTRL_SET,e,1L);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 2
a63 2
#include <openssl/buffer.h>
#include <openssl/evp.h>
d65 6
a70 5
static int enc_write(BIO *h, const char *buf, int num);
static int enc_read(BIO *h, char *buf, int size);
/*static int enc_puts(BIO *h, const char *str); */
/*static int enc_gets(BIO *h, char *str, int size); */
static long enc_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d73 10
a82 1
static long enc_callback_ctrl(BIO *h, int cmd, bio_info_cb *fps);
a83 1
#define BUF_OFFSET	EVP_MAX_BLOCK_LENGTH
d93 1
a93 4
	/* buf is larger than ENC_BLOCK_SIZE because EVP_DecryptUpdate
	 * can return up to a block more data than is presented to it
	 */
	char buf[ENC_BLOCK_SIZE+BUF_OFFSET+2];
a105 1
	enc_callback_ctrl,
d108 1
a108 1
BIO_METHOD *BIO_f_cipher(void)
d113 2
a114 1
static int enc_new(BIO *bi)
d118 2
a119 1
	ctx=(BIO_ENC_CTX *)OPENSSL_malloc(sizeof(BIO_ENC_CTX));
a120 1
	EVP_CIPHER_CTX_init(&ctx->cipher);
d134 2
a135 1
static int enc_free(BIO *a)
d143 1
a143 1
	OPENSSL_free(a->ptr);
d150 4
a153 1
static int enc_read(BIO *b, char *out, int outl)
d187 1
a187 1
		/* read in at IV offset, read the EVP_Cipher
d189 1
a189 1
		i=BIO_read(b->next_bio,&(ctx->buf[BUF_OFFSET]),ENC_BLOCK_SIZE);
d197 1
a197 1
				i=EVP_CipherFinal_ex(&(ctx->cipher),
d203 1
a203 2
			else 
				{
d205 1
a205 2
				break;
				}
d211 1
a211 1
				(unsigned char *)&(ctx->buf[BUF_OFFSET]),i);
a212 7
			/* Note: it is possible for EVP_CipherUpdate to
			 * decrypt zero bytes because this is or looks like
			 * the final block: if this happens we should retry
			 * and either read more data or decrypt the final
			 * block
			 */
			if(ctx->buf_len == 0) continue;
d219 1
d233 4
a236 1
static int enc_write(BIO *b, const char *in, int inl)
d291 5
a295 1
static long enc_ctrl(BIO *b, int cmd, long num, void *ptr)
a300 1
	EVP_CIPHER_CTX **c_ctx;
d309 1
a309 1
		EVP_CipherInit_ex(&(ctx->cipher),NULL,NULL,NULL,NULL,
d346 1
a346 1
			ret=EVP_CipherFinal_ex(&(ctx->cipher),
d367 1
a367 5
	case BIO_C_GET_CIPHER_CTX:
		c_ctx=(EVP_CIPHER_CTX **)ptr;
		(*c_ctx)= &(ctx->cipher);
		b->init=1;
		break;
a380 14
static long enc_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
	default:
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
		break;
		}
	return(ret);
	}

d401 6
a406 2
void BIO_set_cipher(BIO *b, const EVP_CIPHER *c, unsigned char *k,
	     unsigned char *i, int e)
d413 1
a413 1
		(b->callback(b,BIO_CB_CTRL,(const char *)c,BIO_CTRL_SET,e,0L) <= 0))
d418 1
a418 1
	EVP_CipherInit_ex(&(ctx->cipher),c,NULL, k,i,e);
d421 1
a421 1
		b->callback(b,BIO_CB_CTRL,(const char *)c,BIO_CTRL_SET,e,1L);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d135 1
a135 1
	OPENSSL_cleanse(a->ptr,sizeof(BIO_ENC_CTX));
d274 1
a274 1
				return (ret == inl) ? i : ret - inl;
d328 4
a331 1
				return i;
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@d74 1
a74 1
#define BUF_OFFSET	(EVP_MAX_BLOCK_LENGTH*2)
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d408 2
a409 2
void BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,
	     const unsigned char *i, int e)
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d364 2
a365 4
		EVP_CIPHER_CTX_init(&dctx->cipher);
		ret = EVP_CIPHER_CTX_copy(&dctx->cipher,&ctx->cipher);
		if (ret)
			dbio->init=1;
@


