head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24;
locks; strict;
comment	@ * @;


1.24
date	2016.05.04.15.05.13;	author tedu;	state Exp;
branches;
next	1.23;
commitid	tjGQtkBjFU7TMpJf;

1.23
date	2016.05.04.14.53.29;	author tedu;	state Exp;
branches;
next	1.22;
commitid	dp2wUlmUxyODyIfQ;

1.22
date	2016.05.03.14.05.41;	author bcook;	state Exp;
branches;
next	1.21;
commitid	AcP85EyInSrP5tB7;

1.21
date	2016.05.03.12.38.53;	author tedu;	state Exp;
branches;
next	1.20;
commitid	0ClIPo2LiLW7bSvG;

1.20
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches
	1.20.2.1
	1.20.6.1;
next	1.19;
commitid	gtwLkRyWx0K1HbzX;

1.19
date	2014.08.06.16.01.44;	author jsing;	state Exp;
branches;
next	1.18;
commitid	vbZEGx00E56A5ZAm;

1.18
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.16;
commitid	id8dTrTMtnTn4fqt;

1.16
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.05.15.15.55.55;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.05.03.16.54.48;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.03.16.30.53;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.05.03.15.50.24;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches
	1.10.12.1;
next	1.9;

1.9
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.45;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.19;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.13;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.27;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.19;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.33;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2011.11.03.02.32.11;	author djm;	state Exp;
branches;
next	;

1.10.12.1
date	2015.03.19.14.02.55;	author tedu;	state Exp;
branches;
next	;
commitid	sTS3SfguVp6RgZzt;

1.20.2.1
date	2016.05.03.12.39.48;	author tedu;	state Exp;
branches;
next	1.20.2.2;
commitid	Ekna9eOpYJ6UbVcF;

1.20.2.2
date	2016.05.03.13.41.51;	author bcook;	state Exp;
branches;
next	;
commitid	5afWgzPnbVgIthig;

1.20.6.1
date	2016.05.03.12.39.23;	author tedu;	state Exp;
branches;
next	1.20.6.2;
commitid	5iHrqqr5iZFurKzX;

1.20.6.2
date	2016.05.03.13.57.22;	author bcook;	state Exp;
branches;
next	;
commitid	H6i3EKDmTL1wy1F0;


desc
@@


1.24
log
@fix for integer overflow in encode and encrypt update functions.
additionally, in EncodeUpdate, if the amount written would overflow,
return 0 instead to prevent bugs in the caller.
CVE-2016-2105 and CVE-2016-2106 from openssl.
@
text
@/* $OpenBSD: encode.c,v 1.23 2016/05/04 14:53:29 tedu Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <limits.h>
#include <stdio.h>
#include <string.h>

#include <openssl/evp.h>

#define conv_bin2ascii(a)	(data_bin2ascii[(a)&0x3f])
#define conv_ascii2bin(a)	(data_ascii2bin[(a)&0x7f])

/* 64 char lines
 * pad input with 0
 * left over chars are set to =
 * 1 byte  => xx==
 * 2 bytes => xxx=
 * 3 bytes => xxxx
 */
#define BIN_PER_LINE    (64/4*3)
#define CHUNKS_PER_LINE (64/4)
#define CHAR_PER_LINE   (64+1)

static const unsigned char data_bin2ascii[65] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ\
abcdefghijklmnopqrstuvwxyz0123456789+/";

/* 0xF0 is a EOLN
 * 0xF1 is ignore but next needs to be 0xF0 (for \r\n processing).
 * 0xF2 is EOF
 * 0xE0 is ignore at start of line.
 * 0xFF is error
 */

#define B64_EOLN		0xF0
#define B64_CR			0xF1
#define B64_EOF			0xF2
#define B64_WS			0xE0
#define B64_ERROR       	0xFF
#define B64_NOT_BASE64(a)	(((a)|0x13) == 0xF3)

static const unsigned char data_ascii2bin[128] = {
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xE0, 0xF0, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0x3E, 0xFF, 0xF2, 0xFF, 0x3F,
	0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
	0x3C, 0x3D, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
	0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
	0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
	0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
	0x17, 0x18, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
	0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
	0x31, 0x32, 0x33, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

void
EVP_EncodeInit(EVP_ENCODE_CTX *ctx)
{
	ctx->length = 48;
	ctx->num = 0;
	ctx->line_num = 0;
}

void
EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
    const unsigned char *in, int inl)
{
	int i, j;
	size_t total = 0;

	*outl = 0;
	if (inl == 0)
		return;
	OPENSSL_assert(ctx->length <= (int)sizeof(ctx->enc_data));
	if (ctx->length - ctx->num > inl) {
		memcpy(&(ctx->enc_data[ctx->num]), in, inl);
		ctx->num += inl;
		return;
	}
	if (ctx->num != 0) {
		i = ctx->length - ctx->num;
		memcpy(&(ctx->enc_data[ctx->num]), in, i);
		in += i;
		inl -= i;
		j = EVP_EncodeBlock(out, ctx->enc_data, ctx->length);
		ctx->num = 0;
		out += j;
		*(out++) = '\n';
		*out = '\0';
		total = j + 1;
	}
	while (inl >= ctx->length && total <= INT_MAX) {
		j = EVP_EncodeBlock(out, in, ctx->length);
		in += ctx->length;
		inl -= ctx->length;
		out += j;
		*(out++) = '\n';
		*out = '\0';
		total += j + 1;
	}
	if (total > INT_MAX) {
		/* Too much output data! */
		*outl = 0;
		return;
	}
	if (inl != 0)
		memcpy(&(ctx->enc_data[0]), in, inl);
	ctx->num = inl;
	*outl = total;
}

void
EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
{
	unsigned int ret = 0;

	if (ctx->num != 0) {
		ret = EVP_EncodeBlock(out, ctx->enc_data, ctx->num);
		out[ret++] = '\n';
		out[ret] = '\0';
		ctx->num = 0;
	}
	*outl = ret;
}

int
EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int dlen)
{
	int i, ret = 0;
	unsigned long l;

	for (i = dlen; i > 0; i -= 3) {
		if (i >= 3) {
			l = (((unsigned long)f[0]) << 16L) |
			    (((unsigned long)f[1]) << 8L) | f[2];
			*(t++) = conv_bin2ascii(l >> 18L);
			*(t++) = conv_bin2ascii(l >> 12L);
			*(t++) = conv_bin2ascii(l >> 6L);
			*(t++) = conv_bin2ascii(l     );
		} else {
			l = ((unsigned long)f[0]) << 16L;
			if (i == 2)
				l |= ((unsigned long)f[1] << 8L);

			*(t++) = conv_bin2ascii(l >> 18L);
			*(t++) = conv_bin2ascii(l >> 12L);
			*(t++) = (i == 1) ? '=' : conv_bin2ascii(l >> 6L);
			*(t++) = '=';
		}
		ret += 4;
		f += 3;
	}

	*t = '\0';
	return (ret);
}

void
EVP_DecodeInit(EVP_ENCODE_CTX *ctx)
{
	ctx->length = 30;
	ctx->num = 0;
	ctx->line_num = 0;
	ctx->expect_nl = 0;
}

/* -1 for error
 *  0 for last line
 *  1 for full line
 */
int
EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
    const unsigned char *in, int inl)
{
	int seof = -1, eof = 0, rv = -1, ret = 0, i, v, tmp, n, ln, exp_nl;
	unsigned char *d;

	n = ctx->num;
	d = ctx->enc_data;
	ln = ctx->line_num;
	exp_nl = ctx->expect_nl;

	/* last line of input. */
	if ((inl == 0) || ((n == 0) && (conv_ascii2bin(in[0]) == B64_EOF))) {
		rv = 0;
		goto end;
	}

	/* We parse the input data */
	for (i = 0; i < inl; i++) {
		/* If the current line is > 80 characters, scream alot */
		if (ln >= 80) {
			rv = -1;
			goto end;
		}

		/* Get char and put it into the buffer */
		tmp= *(in++);
		v = conv_ascii2bin(tmp);
		/* only save the good data :-) */
		if (!B64_NOT_BASE64(v)) {
			OPENSSL_assert(n < (int)sizeof(ctx->enc_data));
			d[n++] = tmp;
			ln++;
		} else if (v == B64_ERROR) {
			rv = -1;
			goto end;
		}

		/* There should not be base64 data after padding. */
		if (eof && tmp != '=' && tmp != '\r' && tmp != '\n' &&
		    v != B64_EOF) {
			rv = -1;
			goto end;
		}

		/* have we seen a '=' which is 'definitely' the last
		 * input line.  seof will point to the character that
		 * holds it. and eof will hold how many characters to
		 * chop off. */
		if (tmp == '=') {
			if (seof == -1)
				seof = n;
			eof++;
		}

		/* There should be no more than two padding markers. */
		if (eof > 2) {
			rv = -1;
			goto end;
		}

		if (v == B64_CR) {
			ln = 0;
			if (exp_nl)
				continue;
		}

		/* eoln */
		if (v == B64_EOLN) {
			ln = 0;
			if (exp_nl) {
				exp_nl = 0;
				continue;
			}
		}
		exp_nl = 0;

		/* If we are at the end of input and it looks like a
		 * line, process it. */
		if (((i + 1) == inl) && (((n&3) == 0) || eof)) {
			v = B64_EOF;
			/* In case things were given us in really small
			   records (so two '=' were given in separate
			   updates), eof may contain the incorrect number
			   of ending bytes to skip, so let's redo the count */
			eof = 0;
			if (d[n-1] == '=')
				eof++;
			if (d[n-2] == '=')
				eof++;
			/* There will never be more than two '=' */
		}

		if ((v == B64_EOF && (n&3) == 0) || (n >= 64)) {
			/* This is needed to work correctly on 64 byte input
			 * lines.  We process the line and then need to
			 * accept the '\n' */
			if ((v != B64_EOF) && (n >= 64))
				exp_nl = 1;
			if (n > 0) {
				v = EVP_DecodeBlock(out, d, n);
				n = 0;
				if (v < 0) {
					rv = 0;
					goto end;
				}
				ret += (v - eof);
			} else {
				eof = 1;
				v = 0;
			}

			/* This is the case where we have had a short
			 * but valid input line */
			if ((v < ctx->length) && eof) {
				rv = 0;
				goto end;
			} else
				ctx->length = v;

			if (seof >= 0) {
				rv = 0;
				goto end;
			}
			out += v;
		}
	}
	rv = 1;

end:
	*outl = ret;
	ctx->num = n;
	ctx->line_num = ln;
	ctx->expect_nl = exp_nl;
	return (rv);
}

int
EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n)
{
	int i, ret = 0, a, b, c, d;
	unsigned long l;

	/* trim white space from the start of the line. */
	while ((conv_ascii2bin(*f) == B64_WS) && (n > 0)) {
		f++;
		n--;
	}

	/* strip off stuff at the end of the line
	 * ascii2bin values B64_WS, B64_EOLN, B64_EOLN and B64_EOF */
	while ((n > 3) && (B64_NOT_BASE64(conv_ascii2bin(f[n - 1]))))
		n--;

	if (n % 4 != 0)
		return (-1);

	for (i = 0; i < n; i += 4) {
		a = conv_ascii2bin(*(f++));
		b = conv_ascii2bin(*(f++));
		c = conv_ascii2bin(*(f++));
		d = conv_ascii2bin(*(f++));
		if ((a & 0x80) || (b & 0x80) ||
		    (c & 0x80) || (d & 0x80))
			return (-1);
		l = ((((unsigned long)a) << 18L) |
		    (((unsigned long)b) << 12L) |
		    (((unsigned long)c) << 6L) |
		    (((unsigned long)d)));
		*(t++) = (unsigned char)(l >> 16L) & 0xff;
		*(t++) = (unsigned char)(l >> 8L) & 0xff;
		*(t++) = (unsigned char)(l) & 0xff;
		ret += 3;
	}
	return (ret);
}

int
EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
{
	int i;

	*outl = 0;
	if (ctx->num != 0) {
		i = EVP_DecodeBlock(out, ctx->enc_data, ctx->num);
		if (i < 0)
			return (-1);
		ctx->num = 0;
		*outl = i;
		return (1);
	} else
		return (1);
}
@


1.23
log
@revert the big change from yesterday to prepare for smaller commits.
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.22 2016/05/03 14:05:41 bcook Exp $ */
d128 1
a128 1
	unsigned int total = 0;
d134 1
a134 1
	if ((ctx->num + inl) < ctx->length) {
d151 1
a151 1
	while (inl >= ctx->length) {
d159 5
@


1.22
log
@prefer limits.h over sys/limits.h
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.21 2016/05/03 12:38:53 tedu Exp $ */
d128 1
a128 1
	size_t total = 0;
d134 1
a134 1
	if (ctx->length - ctx->num > inl) {
d151 1
a151 1
	while (inl >= ctx->length && total <= INT_MAX) {
a158 5
	}
	if (total > INT_MAX) {
		/* Too much output data! */
		*outl = 0;
		return;
@


1.21
log
@patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.20 2015/02/07 13:19:15 doug Exp $ */
d59 1
a59 1
#include <sys/limits.h>
@


1.20
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.19 2014/08/06 16:01:44 jsing Exp $ */
d59 1
d128 1
a128 1
	unsigned int total = 0;
d134 1
a134 1
	if ((ctx->num + inl) < ctx->length) {
d151 1
a151 1
	while (inl >= ctx->length) {
d159 5
@


1.20.2.1
log
@backport patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.20 2015/02/07 13:19:15 doug Exp $ */
a58 1
#include <sys/limits.h>
d127 1
a127 1
	size_t total = 0;
d133 1
a133 1
	if (ctx->length - ctx->num > inl) {
d150 1
a150 1
	while (inl >= ctx->length && total <= INT_MAX) {
a157 5
	}
	if (total > INT_MAX) {
		/* Too much output data! */
		*outl = 0;
		return;
@


1.20.2.2
log
@prefer limits.h over sys/limits.h
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.20.2.1 2016/05/03 12:39:48 tedu Exp $ */
d59 1
a59 1
#include <limits.h>
@


1.20.6.1
log
@backport patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.20 2015/02/07 13:19:15 doug Exp $ */
a58 1
#include <sys/limits.h>
d127 1
a127 1
	size_t total = 0;
d133 1
a133 1
	if (ctx->length - ctx->num > inl) {
d150 1
a150 1
	while (inl >= ctx->length && total <= INT_MAX) {
a157 5
	}
	if (total > INT_MAX) {
		/* Too much output data! */
		*outl = 0;
		return;
@


1.20.6.2
log
@prefer limits.h over sys/limits.h
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.20.6.1 2016/05/03 12:39:23 tedu Exp $ */
d59 1
a59 1
#include <limits.h>
@


1.19
log
@Allow B64_EOF to follow a base64 padding character. This restores previous
behaviour that allows a PEM block to be fed through the base64 decoder.

Reported by Dmitry Eremin-Solenikov on tech@@

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.18 2014/07/11 08:44:48 jsing Exp $ */
a417 33

#ifdef undef
int
EVP_DecodeValid(unsigned char *buf, int len)
{
	int i, num = 0, bad = 0;

	if (len == 0)
		return (-1);
	while (conv_ascii2bin(*buf) == B64_WS) {
		buf++;
		len--;
		if (len == 0)
			return (-1);
	}

	for (i = len; i >= 4; i -= 4) {
		if ((conv_ascii2bin(buf[0]) >= 0x40) ||
		    (conv_ascii2bin(buf[1]) >= 0x40) ||
		    (conv_ascii2bin(buf[2]) >= 0x40) ||
		    (conv_ascii2bin(buf[3]) >= 0x40))
			return (-1);
		buf += 4;
		num += 1 + (buf[2] != '=') + (buf[3] != '=');
	}
	if ((i == 1) && (conv_ascii2bin(buf[0]) == B64_EOLN))
		return (num);
	if ((i == 2) && (conv_ascii2bin(buf[0]) == B64_EOLN) &&
	    (conv_ascii2bin(buf[0]) == B64_EOLN))
		return (num);
	return (1);
}
#endif
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.17 2014/07/10 13:58:22 jsing Exp $ */
d264 2
a265 1
		if (eof && tmp != '=' && tmp != '\r' && tmp != '\n') {
@


1.17
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: encode.c,v 1.16 2014/06/12 15:49:29 deraadt Exp $ */
a61 1
#include "cryptlib.h"
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.15
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/evp/encode.c */
@


1.14
log
@Add checks for invalid base64 encoded data, specifically relating to the
handling of padding. This fixes a crash that can be triggered by feeding
base64 data followed by 64 or more padding characters, which results in a
negative output length.

This issue was reported by David Ramos, although the same bug has been
sitting in the OpenSSL RT since 2011:

  https://rt.openssl.org/Ticket/Display.html?id=2608

Worse still, BIO_read seems to be completely unable to detect that the
base64 input was invalid/corrupt - in particular, enabling
BIO_FLAGS_BASE64_NO_NL results in a stream of zero value bytes rather than
no input (possibly a good replacement for /dev/null...), which could
result in nasty consequences. Prior to this fix some zero value bytes were
also injected without this flag being enabled.

The recently added base64 regress triggers and documents these issues
(and also ensures that this change retains functional behaviour).
@
text
@d227 1
a227 1
	int seof = -1, eof = 0, rv = -1, ret = 0, i,v, tmp, n, ln, exp_nl;
d363 1
a363 1
	int i, ret = 0, a,b, c, d;
@


1.13
log
@It is definitly not the correct spelling.
@
text
@d262 6
d276 6
@


1.12
log
@KNF.
@
text
@d227 1
a227 1
	int seof = -1, eof = 0, rv = -1, ret = 0, i,v, tmp, n,ln, exp_nl;
d262 1
a262 1
		/* have we seen a '=' which is 'definitly' the last
@


1.11
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d77 1
a77 1
static const unsigned char data_bin2ascii[65]="ABCDEFGHIJKLMNOPQRSTUVWXYZ\
d94 33
a126 31
static const unsigned char data_ascii2bin[128]={
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xE0,0xF0,0xFF,0xFF,0xF1,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0xFF,0xFF,0x3E,0xFF,0xF2,0xFF,0x3F,
	0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,
	0x3C,0x3D,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,
	0xFF,0x00,0x01,0x02,0x03,0x04,0x05,0x06,
	0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,
	0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,
	0x17,0x18,0x19,0xFF,0xFF,0xFF,0xFF,0xFF,
	0xFF,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,
	0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,
	0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,
	0x31,0x32,0x33,0xFF,0xFF,0xFF,0xFF,0xFF,
	};

void EVP_EncodeInit(EVP_ENCODE_CTX *ctx)
	{
	ctx->length=48;
	ctx->num=0;
	ctx->line_num=0;
	}

void EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
	     const unsigned char *in, int inl)
	{
	int i,j;
	unsigned int total=0;
d128 3
a130 2
	*outl=0;
	if (inl == 0) return;
d132 3
a134 4
	if ((ctx->num+inl) < ctx->length)
		{
		memcpy(&(ctx->enc_data[ctx->num]),in,inl);
		ctx->num+=inl;
d136 22
a157 24
		}
	if (ctx->num != 0)
		{
		i=ctx->length-ctx->num;
		memcpy(&(ctx->enc_data[ctx->num]),in,i);
		in+=i;
		inl-=i;
		j=EVP_EncodeBlock(out,ctx->enc_data,ctx->length);
		ctx->num=0;
		out+=j;
		*(out++)='\n';
		*out='\0';
		total=j+1;
		}
	while (inl >= ctx->length)
		{
		j=EVP_EncodeBlock(out,in,ctx->length);
		in+=ctx->length;
		inl-=ctx->length;
		out+=j;
		*(out++)='\n';
		*out='\0';
		total+=j+1;
		}
d159 15
a173 17
		memcpy(&(ctx->enc_data[0]),in,inl);
	ctx->num=inl;
	*outl=total;
	}

void EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
	{
	unsigned int ret=0;

	if (ctx->num != 0)
		{
		ret=EVP_EncodeBlock(out,ctx->enc_data,ctx->num);
		out[ret++]='\n';
		out[ret]='\0';
		ctx->num=0;
		}
	*outl=ret;
d175 2
d178 4
a181 3
int EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int dlen)
	{
	int i,ret=0;
d184 17
a200 23
	for (i=dlen; i > 0; i-=3)
		{
		if (i >= 3)
			{
			l=	(((unsigned long)f[0])<<16L)|
				(((unsigned long)f[1])<< 8L)|f[2];
			*(t++)=conv_bin2ascii(l>>18L);
			*(t++)=conv_bin2ascii(l>>12L);
			*(t++)=conv_bin2ascii(l>> 6L);
			*(t++)=conv_bin2ascii(l     );
			}
		else
			{
			l=((unsigned long)f[0])<<16L;
			if (i == 2) l|=((unsigned long)f[1]<<8L);

			*(t++)=conv_bin2ascii(l>>18L);
			*(t++)=conv_bin2ascii(l>>12L);
			*(t++)=(i == 1)?'=':conv_bin2ascii(l>> 6L);
			*(t++)='=';
			}
		ret+=4;
		f+=3;
d202 2
a203 3

	*t='\0';
	return(ret);
d206 12
a217 7
void EVP_DecodeInit(EVP_ENCODE_CTX *ctx)
	{
	ctx->length=30;
	ctx->num=0;
	ctx->line_num=0;
	ctx->expect_nl=0;
	}
d223 5
a227 4
int EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
	     const unsigned char *in, int inl)
	{
	int seof= -1,eof=0,rv= -1,ret=0,i,v,tmp,n,ln,exp_nl;
d230 4
a233 4
	n=ctx->num;
	d=ctx->enc_data;
	ln=ctx->line_num;
	exp_nl=ctx->expect_nl;
d236 5
a240 3
	if ((inl == 0) || ((n == 0) && (conv_ascii2bin(in[0]) == B64_EOF)))
		{ rv=0; goto end; }
		
d242 1
a242 2
	for (i=0; i<inl; i++)
		{
d244 4
a247 1
		if (ln >= 80) { rv= -1; goto end; }
d251 1
a251 1
		v=conv_ascii2bin(tmp);
d253 1
a253 2
		if (!B64_NOT_BASE64(v))
			{
d255 1
a255 1
			d[n++]=tmp;
d257 2
a258 4
			}
		else if (v == B64_ERROR)
			{
			rv= -1;
d260 1
a260 1
			}
d266 3
a268 3
		if (tmp == '=')
			{
			if (seof == -1) seof=n;
d270 1
a270 1
			}
d272 1
a272 2
		if (v == B64_CR)
			{
d276 1
a276 1
			}
d279 4
a282 6
		if (v == B64_EOLN)
			{
			ln=0;
			if (exp_nl)
				{
				exp_nl=0;
a283 1
				}
d285 2
a286 1
		exp_nl=0;
d290 2
a291 3
		if (((i+1) == inl) && (((n&3) == 0) || eof))
			{
			v=B64_EOF;
d297 4
a300 2
			if (d[n-1] == '=') eof++;
			if (d[n-2] == '=') eof++;
d302 1
a302 1
			}
d304 1
a304 2
		if ((v == B64_EOF && (n&3) == 0) || (n >= 64))
			{
d308 8
a315 12
			if ((v != B64_EOF) && (n >= 64)) exp_nl=1;
			if (n > 0)
				{
				v=EVP_DecodeBlock(out,d,n);
				n=0;
				if (v < 0) { rv=0; goto end; }
				ret+=(v-eof);
				}
			else
				{
				eof=1;
				v=0;
d317 5
d325 2
a326 3
			if ((v < ctx->length) && eof)
				{
				rv=0;
d328 2
a329 3
				}
			else
				ctx->length=v;
d331 3
a333 2
			if (seof >= 0) { rv=0; goto end; }
			out+=v;
d335 1
a336 7
	rv=1;
end:
	*outl=ret;
	ctx->num=n;
	ctx->line_num=ln;
	ctx->expect_nl=exp_nl;
	return(rv);
d338 1
d340 12
a351 3
int EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n)
	{
	int i,ret=0,a,b,c,d;
d355 1
a355 2
	while ((conv_ascii2bin(*f) == B64_WS) && (n > 0))
		{
d358 1
a358 1
		}
d362 1
a362 1
	while ((n > 3) && (B64_NOT_BASE64(conv_ascii2bin(f[n-1]))))
d365 2
a366 1
	if (n%4 != 0) return(-1);
d368 16
a383 19
	for (i=0; i<n; i+=4)
		{
		a=conv_ascii2bin(*(f++));
		b=conv_ascii2bin(*(f++));
		c=conv_ascii2bin(*(f++));
		d=conv_ascii2bin(*(f++));
		if (	(a & 0x80) || (b & 0x80) ||
			(c & 0x80) || (d & 0x80))
			return(-1);
		l=(	(((unsigned long)a)<<18L)|
			(((unsigned long)b)<<12L)|
			(((unsigned long)c)<< 6L)|
			(((unsigned long)d)     ));
		*(t++)=(unsigned char)(l>>16L)&0xff;
		*(t++)=(unsigned char)(l>> 8L)&0xff;
		*(t++)=(unsigned char)(l     )&0xff;
		ret+=3;
		}
	return(ret);
d385 2
d388 3
a390 2
int EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
	{
d393 11
a403 12
	*outl=0;
	if (ctx->num != 0)
		{
		i=EVP_DecodeBlock(out,ctx->enc_data,ctx->num);
		if (i < 0) return(-1);
		ctx->num=0;
		*outl=i;
		return(1);
		}
	else
		return(1);
	}
d406 8
a413 7
int EVP_DecodeValid(unsigned char *buf, int len)
	{
	int i,num=0,bad=0;

	if (len == 0) return(-1);
	while (conv_ascii2bin(*buf) == B64_WS)
		{
d416 3
a418 2
		if (len == 0) return(-1);
		}
d420 9
a428 10
	for (i=len; i >= 4; i-=4)
		{
		if (	(conv_ascii2bin(buf[0]) >= 0x40) ||
			(conv_ascii2bin(buf[1]) >= 0x40) ||
			(conv_ascii2bin(buf[2]) >= 0x40) ||
			(conv_ascii2bin(buf[3]) >= 0x40))
			return(-1);
		buf+=4;
		num+=1+(buf[2] != '=')+(buf[3] != '=');
		}
d430 1
a430 1
		return(num);
d432 4
a435 4
		(conv_ascii2bin(buf[0]) == B64_EOLN))
		return(num);
	return(1);
	}
@


1.10
log
@openssl-1.0.0e: resolve conflicts
@
text
@a62 1
#ifndef CHARSET_EBCDIC
a64 10
#else
/* We assume that PEM encoded files are EBCDIC files
 * (i.e., printable text files). Convert them here while decoding.
 * When encoding, output is EBCDIC (text) format again.
 * (No need for conversion in the conv_bin2ascii macro, as the
 * underlying textstring data_bin2ascii[] is already EBCDIC)
 */
#define conv_bin2ascii(a)	(data_bin2ascii[(a)&0x3f])
#define conv_ascii2bin(a)	(data_ascii2bin[os_toascii[a]&0x7f])
#endif
@


1.10.12.1
log
@Fix two possible crash causing defects.
CVE-2015-0286 - Apply fix from OpenSSL for ASN1_TYPE_cmp.
CVE-2015-0292 - Backport existing fix for Base64 decoding.
@
text
@a271 7
		/* There should not be base64 data after padding. */
		if (eof && tmp != '=' && tmp != '\r' && tmp != '\n' &&
		    v != B64_EOF) {
			rv = -1;
			goto end;
		}

a280 6

		/* There should be no more than two padding markers. */
		if (eof > 2) {
			rv = -1;
			goto end;
		}
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d238 1
a238 1
	int seof= -1,eof=0,rv= -1,ret=0,i,v,tmp,n,ln,tmp2,exp_nl;
a321 1
			tmp2=v;
@


1.8
log
@resolve conflicts
@
text
@d88 1
a88 1
static unsigned char data_bin2ascii[65]="ABCDEFGHIJKLMNOPQRSTUVWXYZ\
d105 1
a105 1
static unsigned char data_ascii2bin[128]={
@


1.7
log
@resolve conflicts
@
text
@d132 1
a132 1
	     unsigned char *in, int inl)
d139 1
a139 1
	OPENSSL_assert(ctx->length <= sizeof ctx->enc_data);
d236 1
a236 1
	     unsigned char *in, int inl)
d262 1
a262 1
			OPENSSL_assert(n < sizeof ctx->enc_data);
d326 1
a327 1
				n=0;
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d316 1
a316 1
		if ((v == B64_EOF) || (n >= 64))
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d139 1
d262 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d280 7
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d295 1
d297 9
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d188 1
a188 1
int EVP_EncodeBlock(unsigned char *t, unsigned char *f, int dlen)
d340 1
a340 1
int EVP_DecodeBlock(unsigned char *t, unsigned char *f, int n)
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "evp.h"
d63 1
d66 10
d124 1
a124 2
void EVP_EncodeInit(ctx)
EVP_ENCODE_CTX *ctx;
d131 2
a132 6
void EVP_EncodeUpdate(ctx,out,outl,in,inl)
EVP_ENCODE_CTX *ctx;
unsigned char *out;
int *outl;
unsigned char *in;
int inl;
d174 1
a174 4
void EVP_EncodeFinal(ctx,out,outl)
EVP_ENCODE_CTX *ctx;
unsigned char *out;
int *outl;
d188 1
a188 3
int EVP_EncodeBlock(t,f,dlen)
unsigned char *t,*f;
int dlen;
d222 1
a222 2
void EVP_DecodeInit(ctx)
EVP_ENCODE_CTX *ctx;
d234 2
a235 6
int EVP_DecodeUpdate(ctx,out,outl,in,inl)
EVP_ENCODE_CTX *ctx;
unsigned char *out;
int *outl;
unsigned char *in;
int inl;
d340 1
a340 3
int EVP_DecodeBlock(t,f,n)
unsigned char *t,*f;
int n;
d380 1
a380 4
int EVP_DecodeFinal(ctx,out,outl)
EVP_ENCODE_CTX *ctx;
unsigned char *out;
int *outl;
d398 1
a398 3
int EVP_DecodeValid(buf,len)
unsigned char *buf;
int len;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/evp.h>
a62 1
#ifndef CHARSET_EBCDIC
a64 10
#else
/* We assume that PEM encoded files are EBCDIC files
 * (i.e., printable text files). Convert them here while decoding.
 * When encoding, output is EBCDIC (text) format again.
 * (No need for conversion in the conv_bin2ascii macro, as the
 * underlying textstring data_bin2ascii[] is already EBCDIC)
 */
#define conv_bin2ascii(a)	(data_bin2ascii[(a)&0x3f])
#define conv_ascii2bin(a)	(data_ascii2bin[os_toascii[a]&0x7f])
#endif
d113 2
a114 1
void EVP_EncodeInit(EVP_ENCODE_CTX *ctx)
d121 6
a126 2
void EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
	     unsigned char *in, int inl)
d168 4
a171 1
void EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
d185 3
a187 1
int EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int dlen)
d221 2
a222 1
void EVP_DecodeInit(EVP_ENCODE_CTX *ctx)
d234 6
a239 2
int EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
	     unsigned char *in, int inl)
a283 7
		if (v == B64_CR)
			{
			ln = 0;
			if (exp_nl)
				continue;
			}

a298 1
			{
a299 9
			/* In case things were given us in really small
			   records (so two '=' were given in separate
			   updates), eof may contain the incorrect number
			   of ending bytes to skip, so let's redo the count */
			eof = 0;
			if (d[n-1] == '=') eof++;
			if (d[n-2] == '=') eof++;
			/* There will never be more than two '=' */
			}
d344 3
a346 1
int EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n)
d386 4
a389 1
int EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
d407 3
a409 1
int EVP_DecodeValid(unsigned char *buf, int len)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a138 1
	OPENSSL_assert(ctx->length <= sizeof ctx->enc_data);
a260 1
			OPENSSL_assert(n < sizeof ctx->enc_data);
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@d316 1
a316 1
		if ((v == B64_EOF && (n&3) == 0) || (n >= 64))
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d132 1
a132 1
	     const unsigned char *in, int inl)
d139 1
a139 1
	OPENSSL_assert(ctx->length <= (int)sizeof(ctx->enc_data));
d236 1
a236 1
	     const unsigned char *in, int inl)
d262 1
a262 1
			OPENSSL_assert(n < (int)sizeof(ctx->enc_data));
d326 1
a327 1
				if (v < 0) { rv=0; goto end; }
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d88 1
a88 1
static const unsigned char data_bin2ascii[65]="ABCDEFGHIJKLMNOPQRSTUVWXYZ\
d105 1
a105 1
static const unsigned char data_ascii2bin[128]={
@


1.1.1.7
log
@import OpenSSL 1.0.0e
@
text
@d238 1
a238 1
	int seof= -1,eof=0,rv= -1,ret=0,i,v,tmp,n,ln,exp_nl;
d322 1
@


