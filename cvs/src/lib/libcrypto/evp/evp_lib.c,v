head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.2
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.14;
commitid	kT0fLt3r4lroFJra;

1.14
date	2015.02.10.09.52.35;	author miod;	state Exp;
branches;
next	1.13;
commitid	elQcISUWkrkujoI4;

1.13
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.12;
commitid	yQEL1wOWIearrW15;

1.12
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.11;
commitid	id8dTrTMtnTn4fqt;

1.11
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.05.08.15.42.26;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.22;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.20;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.28;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.21;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.10;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: evp_lib.c,v 1.14 2015/02/10 09:52:35 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>

int
EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
{
	int ret;

	if (c->cipher->set_asn1_parameters != NULL)
		ret = c->cipher->set_asn1_parameters(c, type);
	else if (c->cipher->flags & EVP_CIPH_FLAG_DEFAULT_ASN1)
		ret = EVP_CIPHER_set_asn1_iv(c, type);
	else
		ret = -1;
	return (ret);
}

int
EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
{
	int ret;

	if (c->cipher->get_asn1_parameters != NULL)
		ret = c->cipher->get_asn1_parameters(c, type);
	else if (c->cipher->flags & EVP_CIPH_FLAG_DEFAULT_ASN1)
		ret = EVP_CIPHER_get_asn1_iv(c, type);
	else
		ret = -1;
	return (ret);
}

int
EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
{
	int i = 0;
	unsigned int l;

	if (type != NULL) {
		l = EVP_CIPHER_CTX_iv_length(c);
		if (l > sizeof(c->iv)) {
			EVPerror(EVP_R_IV_TOO_LARGE);
			return 0;
		}
		i = ASN1_TYPE_get_octetstring(type, c->oiv, l);
		if (i != (int)l)
			return (-1);
		else if (i > 0)
			memcpy(c->iv, c->oiv, l);
	}
	return (i);
}

int
EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
{
	int i = 0;
	unsigned int j;

	if (type != NULL) {
		j = EVP_CIPHER_CTX_iv_length(c);
		if (j > sizeof(c->iv)) {
			EVPerror(EVP_R_IV_TOO_LARGE);
			return 0;
		}
		i = ASN1_TYPE_set_octetstring(type, c->oiv, j);
	}
	return (i);
}

/* Convert the various cipher NIDs and dummies to a proper OID NID */
int
EVP_CIPHER_type(const EVP_CIPHER *ctx)
{
	int nid;
	ASN1_OBJECT *otmp;
	nid = EVP_CIPHER_nid(ctx);

	switch (nid) {
	case NID_rc2_cbc:
	case NID_rc2_64_cbc:
	case NID_rc2_40_cbc:
		return NID_rc2_cbc;

	case NID_rc4:
	case NID_rc4_40:
		return NID_rc4;

	case NID_aes_128_cfb128:
	case NID_aes_128_cfb8:
	case NID_aes_128_cfb1:
		return NID_aes_128_cfb128;

	case NID_aes_192_cfb128:
	case NID_aes_192_cfb8:
	case NID_aes_192_cfb1:
		return NID_aes_192_cfb128;

	case NID_aes_256_cfb128:
	case NID_aes_256_cfb8:
	case NID_aes_256_cfb1:
		return NID_aes_256_cfb128;

	case NID_des_cfb64:
	case NID_des_cfb8:
	case NID_des_cfb1:
		return NID_des_cfb64;

	case NID_des_ede3_cfb64:
	case NID_des_ede3_cfb8:
	case NID_des_ede3_cfb1:
		return NID_des_cfb64;

	default:
		/* Check it has an OID and it is valid */
		otmp = OBJ_nid2obj(nid);
		if (!otmp || !otmp->data)
			nid = NID_undef;
		ASN1_OBJECT_free(otmp);
		return nid;
	}
}

int
EVP_CIPHER_block_size(const EVP_CIPHER *e)
{
	return e->block_size;
}

int
EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)
{
	return ctx->cipher->block_size;
}

int
EVP_Cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in,
    unsigned int inl)
{
	return ctx->cipher->do_cipher(ctx, out, in, inl);
}

const EVP_CIPHER *
EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx)
{
	return ctx->cipher;
}

unsigned long
EVP_CIPHER_flags(const EVP_CIPHER *cipher)
{
	return cipher->flags;
}

unsigned long
EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX *ctx)
{
	return ctx->cipher->flags;
}

void *
EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx)
{
	return ctx->app_data;
}

void
EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data)
{
	ctx->app_data = data;
}

int
EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)
{
	return cipher->iv_len;
}

int
EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
{
	return ctx->cipher->iv_len;
}

int
EVP_CIPHER_key_length(const EVP_CIPHER *cipher)
{
	return cipher->key_len;
}

int
EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)
{
	return ctx->key_len;
}

int
EVP_CIPHER_nid(const EVP_CIPHER *cipher)
{
	return cipher->nid;
}

int
EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx)
{
	return ctx->cipher->nid;
}

int
EVP_MD_block_size(const EVP_MD *md)
{
	return md->block_size;
}

int
EVP_MD_type(const EVP_MD *md)
{
	return md->type;
}

int
EVP_MD_pkey_type(const EVP_MD *md)
{
	return md->pkey_type;
}

int
EVP_MD_size(const EVP_MD *md)
{
	if (!md) {
		EVPerror(EVP_R_MESSAGE_DIGEST_IS_NULL);
		return -1;
	}
	return md->md_size;
}

unsigned long
EVP_MD_flags(const EVP_MD *md)
{
	return md->flags;
}

const EVP_MD *
EVP_MD_CTX_md(const EVP_MD_CTX *ctx)
{
	if (!ctx)
		return NULL;
	return ctx->digest;
}

void
EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags)
{
	ctx->flags |= flags;
}

void
EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags)
{
	ctx->flags &= ~flags;
}

int
EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags)
{
	return (ctx->flags & flags);
}

void
EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags)
{
	ctx->flags |= flags;
}

void
EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags)
{
	ctx->flags &= ~flags;
}

int
EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags)
{
	return (ctx->flags & flags);
}
@


1.14
log
@Replace assert() and OPENSSL_assert() calls with proper error return paths.
Careful review, feedback & ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_lib.c,v 1.13 2014/07/11 08:44:48 jsing Exp $ */
d103 1
a103 2
			EVPerr(EVP_F_EVP_CIPHER_GET_ASN1_IV,
			     EVP_R_IV_TOO_LARGE);
d124 1
a124 2
			EVPerr(EVP_F_EVP_CIPHER_SET_ASN1_IV,
			     EVP_R_IV_TOO_LARGE);
d292 1
a292 1
		EVPerr(EVP_F_EVP_MD_SIZE, EVP_R_MESSAGE_DIGEST_IS_NULL);
@


1.13
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_lib.c,v 1.12 2014/07/10 13:58:22 jsing Exp $ */
d102 5
a106 1
		OPENSSL_assert(l <= sizeof(c->iv));
d124 5
a128 1
		OPENSSL_assert(j <= sizeof(c->iv));
@


1.12
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_lib.c,v 1.11 2014/06/12 15:49:29 deraadt Exp $ */
d62 1
a62 1
#include "cryptlib.h"
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.10
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/evp/evp_lib.c */
@


1.9
log
@resolve conflicts
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d64 3
a66 2
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
	{
d70 1
a70 1
		ret=c->cipher->set_asn1_parameters(c,type);
d72 1
a72 1
		ret=EVP_CIPHER_set_asn1_iv(c, type);
d74 3
a76 3
		ret=-1;
	return(ret);
	}
d78 3
a80 2
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
	{
d84 1
a84 1
		ret=c->cipher->get_asn1_parameters(c,type);
d86 1
a86 1
		ret=EVP_CIPHER_get_asn1_iv(c, type);
d88 3
a90 3
		ret=-1;
	return(ret);
	}
d92 4
a95 3
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
	{
	int i=0;
d98 2
a99 3
	if (type != NULL) 
		{
		l=EVP_CIPHER_CTX_iv_length(c);
d101 1
a101 1
		i=ASN1_TYPE_get_octetstring(type,c->oiv,l);
d103 1
a103 1
			return(-1);
d105 1
a105 3
			memcpy(c->iv,c->oiv,l);
		}
	return(i);
d107 2
d110 4
a113 3
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
	{
	int i=0;
d116 2
a117 3
	if (type != NULL)
		{
		j=EVP_CIPHER_CTX_iv_length(c);
d119 1
a119 3
		i=ASN1_TYPE_set_octetstring(type,c->oiv,j);
		}
	return(i);
d121 2
d125 2
a126 1
int EVP_CIPHER_type(const EVP_CIPHER *ctx)
d132 4
a135 6
	switch(nid) {

		case NID_rc2_cbc:
		case NID_rc2_64_cbc:
		case NID_rc2_40_cbc:

d138 2
a139 3
		case NID_rc4:
		case NID_rc4_40:

d142 3
a144 4
		case NID_aes_128_cfb128:
		case NID_aes_128_cfb8:
		case NID_aes_128_cfb1:

d147 3
a149 4
		case NID_aes_192_cfb128:
		case NID_aes_192_cfb8:
		case NID_aes_192_cfb1:

d152 3
a154 4
		case NID_aes_256_cfb128:
		case NID_aes_256_cfb8:
		case NID_aes_256_cfb1:

d157 3
a159 4
		case NID_des_cfb64:
		case NID_des_cfb8:
		case NID_des_cfb1:

d162 3
a164 4
		case NID_des_ede3_cfb64:
		case NID_des_ede3_cfb8:
		case NID_des_ede3_cfb1:

d167 1
a167 1
		default:
d170 2
a171 1
		if(!otmp || !otmp->data) nid = NID_undef;
d177 3
a179 2
int EVP_CIPHER_block_size(const EVP_CIPHER *e)
	{
d181 1
a181 1
	}
d183 3
a185 2
int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)
	{
d187 1
a187 1
	}
d189 6
a194 4
int EVP_Cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, unsigned int inl)
	{
	return ctx->cipher->do_cipher(ctx,out,in,inl);
	}
d196 3
a198 2
const EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx)
	{
d200 1
a200 1
	}
d202 3
a204 2
unsigned long EVP_CIPHER_flags(const EVP_CIPHER *cipher)
	{
d206 1
a206 1
	}
d208 3
a210 2
unsigned long EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX *ctx)
	{
d212 1
a212 1
	}
d214 3
a216 2
void *EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx)
	{
d218 1
a218 1
	}
d220 3
a222 2
void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data)
	{
d224 1
a224 1
	}
d226 3
a228 2
int EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)
	{
d230 1
a230 1
	}
d232 3
a234 2
int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
	{
d236 1
a236 1
	}
d238 3
a240 2
int EVP_CIPHER_key_length(const EVP_CIPHER *cipher)
	{
d242 1
a242 1
	}
d244 3
a246 2
int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)
	{
d248 1
a248 1
	}
d250 3
a252 2
int EVP_CIPHER_nid(const EVP_CIPHER *cipher)
	{
d254 1
a254 1
	}
d256 3
a258 2
int EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx)
	{
d260 1
a260 1
	}
d262 3
a264 2
int EVP_MD_block_size(const EVP_MD *md) 
	{
d266 1
a266 1
	}
d268 3
a270 2
int EVP_MD_type(const EVP_MD *md)
	{
d272 1
a272 1
	}
d274 3
a276 2
int EVP_MD_pkey_type(const EVP_MD *md)
	{
d278 1
a278 1
	}
d280 4
a283 4
int EVP_MD_size(const EVP_MD *md)
	{
	if (!md)
		{
d286 1
a286 1
		}
d288 1
a288 1
	}
d290 3
a292 2
unsigned long EVP_MD_flags(const EVP_MD *md)
	{
d294 1
a294 1
	}
d296 3
a298 2
const EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx)
	{
d302 1
a302 1
	}
d304 3
a306 2
void EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags)
	{
d308 1
a308 1
	}
d310 3
a312 2
void EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags)
	{
d314 1
a314 1
	}
d316 3
a318 2
int EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags)
	{
d320 1
a320 1
	}
d322 3
a324 2
void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags)
	{
d326 1
a326 1
	}
d328 3
a330 2
void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags)
	{
d332 1
a332 1
	}
d334 3
a336 2
int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags)
	{
d338 1
a338 1
	}
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d70 2
d83 2
@


1.7
log
@resolve conflicts
@
text
@a69 2
	else if (c->cipher->flags & EVP_CIPH_FLAG_DEFAULT_ASN1)
		ret=EVP_CIPHER_set_asn1_iv(c, type);
a80 2
	else if (c->cipher->flags & EVP_CIPH_FLAG_DEFAULT_ASN1)
		ret=EVP_CIPHER_get_asn1_iv(c, type);
d162 6
d187 5
d202 5
d222 5
d237 5
d264 5
d272 6
a277 1
const EVP_MD * EVP_MD_CTX_md(const EVP_MD_CTX *ctx)
d279 2
@


1.6
log
@resolve conflicts
@
text
@d70 2
d83 2
a184 5
int EVP_Cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, unsigned int inl)
	{
	return ctx->cipher->do_cipher(ctx,out,in,inl);
	}

a194 5
unsigned long EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher->flags;
	}

a209 5
int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher->iv_len;
	}

a219 5
int EVP_CIPHER_nid(const EVP_CIPHER *cipher)
	{
	return cipher->nid;
	}

d261 15
@


1.5
log
@resolve conflicts
@
text
@d71 1
a71 1
		return -1;
d82 1
a82 1
		return -1;
d88 2
a89 1
	int i=0,l;
d94 1
a94 1
		OPENSSL_assert(l <= sizeof c->iv);
d96 1
a96 1
		if (i != l)
d106 2
a107 1
	int i=0,j;
d112 1
a112 1
		OPENSSL_assert(j <= sizeof c->iv);
d171 109
@


1.4
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d71 1
a71 1
		ret=1;
d82 1
a82 1
		ret=1;
d135 24
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d93 1
d110 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d118 1
d135 4
a138 1

@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "evp.h"
#include "objects.h"
d64 1
a64 3
int EVP_CIPHER_param_to_asn1(c,type)
EVP_CIPHER_CTX *c;
ASN1_TYPE *type;
d75 1
a75 3
int EVP_CIPHER_asn1_to_param(c,type)
EVP_CIPHER_CTX *c;
ASN1_TYPE *type;
d86 1
a86 3
int EVP_CIPHER_get_asn1_iv(c,type)
EVP_CIPHER_CTX *c;
ASN1_TYPE *type;
d94 4
a97 1
		memcpy(c->iv,c->oiv,l);
d102 1
a102 3
int EVP_CIPHER_set_asn1_iv(c,type)
EVP_CIPHER_CTX *c;
ASN1_TYPE *type;
d113 26
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 2
#include <openssl/evp.h>
#include <openssl/objects.h>
d64 3
a66 1
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
d77 3
a79 1
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
d90 3
a92 1
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
d100 1
a100 4
		if (i != l)
			return(-1);
		else if (i > 0)
			memcpy(c->iv,c->oiv,l);
d105 3
a107 1
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
a117 30

/* Convert the various cipher NIDs and dummies to a proper OID NID */
int EVP_CIPHER_type(const EVP_CIPHER *ctx)
{
	int nid;
	ASN1_OBJECT *otmp;
	nid = EVP_CIPHER_nid(ctx);

	switch(nid) {

		case NID_rc2_cbc:
		case NID_rc2_64_cbc:
		case NID_rc2_40_cbc:

		return NID_rc2_cbc;

		case NID_rc4:
		case NID_rc4_40:

		return NID_rc4;

		default:
		/* Check it has an OID and it is valid */
		otmp = OBJ_nid2obj(nid);
		if(!otmp || !otmp->data) nid = NID_undef;
		ASN1_OBJECT_free(otmp);
		return nid;
	}
}

@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a92 1
		OPENSSL_assert(l <= sizeof c->iv);
a108 1
		OPENSSL_assert(j <= sizeof c->iv);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d71 1
a71 1
		return -1;
d82 1
a82 1
		return -1;
a134 24

		case NID_aes_128_cfb128:
		case NID_aes_128_cfb8:
		case NID_aes_128_cfb1:

		return NID_aes_128_cfb128;

		case NID_aes_192_cfb128:
		case NID_aes_192_cfb8:
		case NID_aes_192_cfb1:

		return NID_aes_192_cfb128;

		case NID_aes_256_cfb128:
		case NID_aes_256_cfb8:
		case NID_aes_256_cfb1:

		return NID_aes_256_cfb128;

		case NID_des_cfb64:
		case NID_des_cfb8:
		case NID_des_cfb1:

		return NID_des_cfb64;
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d71 1
a71 1
		ret=-1;
d82 1
a82 1
		ret=-1;
d88 1
a88 2
	int i=0;
	unsigned int l;
d93 1
a93 1
		OPENSSL_assert(l <= sizeof(c->iv));
d95 1
a95 1
		if (i != (int)l)
d105 1
a105 2
	int i=0;
	unsigned int j;
d110 1
a110 1
		OPENSSL_assert(j <= sizeof(c->iv));
a168 109
int EVP_CIPHER_block_size(const EVP_CIPHER *e)
	{
	return e->block_size;
	}

int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher->block_size;
	}

int EVP_Cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, unsigned int inl)
	{
	return ctx->cipher->do_cipher(ctx,out,in,inl);
	}

const EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher;
	}

unsigned long EVP_CIPHER_flags(const EVP_CIPHER *cipher)
	{
	return cipher->flags;
	}

unsigned long EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher->flags;
	}

void *EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->app_data;
	}

void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data)
	{
	ctx->app_data = data;
	}

int EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)
	{
	return cipher->iv_len;
	}

int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher->iv_len;
	}

int EVP_CIPHER_key_length(const EVP_CIPHER *cipher)
	{
	return cipher->key_len;
	}

int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->key_len;
	}

int EVP_CIPHER_nid(const EVP_CIPHER *cipher)
	{
	return cipher->nid;
	}

int EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher->nid;
	}

int EVP_MD_block_size(const EVP_MD *md) 
	{
	return md->block_size;
	}

int EVP_MD_type(const EVP_MD *md)
	{
	return md->type;
	}

int EVP_MD_pkey_type(const EVP_MD *md)
	{
	return md->pkey_type;
	}

int EVP_MD_size(const EVP_MD *md)
	{
	return md->md_size;
	}

const EVP_MD * EVP_MD_CTX_md(const EVP_MD_CTX *ctx)
	{
	return ctx->digest;
	}

void EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags)
	{
	ctx->flags |= flags;
	}

void EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags)
	{
	ctx->flags &= ~flags;
	}

int EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags)
	{
	return (ctx->flags & flags);
	}
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a69 2
	else if (c->cipher->flags & EVP_CIPH_FLAG_DEFAULT_ASN1)
		ret=EVP_CIPHER_set_asn1_iv(c, type);
a80 2
	else if (c->cipher->flags & EVP_CIPH_FLAG_DEFAULT_ASN1)
		ret=EVP_CIPHER_get_asn1_iv(c, type);
d181 5
d196 5
d216 5
d231 5
a276 15
	{
	return (ctx->flags & flags);
	}

void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags)
	{
	ctx->flags |= flags;
	}

void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags)
	{
	ctx->flags &= ~flags;
	}

int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags)
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d70 2
d83 2
a165 6
		case NID_des_ede3_cfb64:
		case NID_des_ede3_cfb8:
		case NID_des_ede3_cfb1:

		return NID_des_cfb64;

a184 5
int EVP_Cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, unsigned int inl)
	{
	return ctx->cipher->do_cipher(ctx,out,in,inl);
	}

a194 5
unsigned long EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher->flags;
	}

a209 5
int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
	{
	return ctx->cipher->iv_len;
	}

a219 5
int EVP_CIPHER_nid(const EVP_CIPHER *cipher)
	{
	return cipher->nid;
	}

a241 5
	if (!md)
		{
		EVPerr(EVP_F_EVP_MD_SIZE, EVP_R_MESSAGE_DIGEST_IS_NULL);
		return -1;
		}
d245 1
a245 6
unsigned long EVP_MD_flags(const EVP_MD *md)
	{
	return md->flags;
	}

const EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx)
a246 2
	if (!ctx)
		return NULL;
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a69 2
	else if (c->cipher->flags & EVP_CIPH_FLAG_DEFAULT_ASN1)
		ret=EVP_CIPHER_set_asn1_iv(c, type);
a80 2
	else if (c->cipher->flags & EVP_CIPH_FLAG_DEFAULT_ASN1)
		ret=EVP_CIPHER_get_asn1_iv(c, type);
@


