head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.13;
commitid	kT0fLt3r4lroFJra;

1.13
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.12;
commitid	gtwLkRyWx0K1HbzX;

1.12
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.05.15.15.55.55;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.05.07.17.42.51;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.30;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2011.11.03.02.32.11;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: p_sign.c,v 1.13 2015/02/07 13:19:15 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

int
EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret, unsigned int *siglen,
    EVP_PKEY *pkey)
{
	unsigned char m[EVP_MAX_MD_SIZE];
	unsigned int m_len;
	int i = 0, ok = 0, v;
	EVP_MD_CTX tmp_ctx;
	EVP_PKEY_CTX *pkctx = NULL;

	*siglen = 0;
	EVP_MD_CTX_init(&tmp_ctx);
	if (!EVP_MD_CTX_copy_ex(&tmp_ctx, ctx))
		goto err;
	if (!EVP_DigestFinal_ex(&tmp_ctx, &(m[0]), &m_len))
		goto err;
	EVP_MD_CTX_cleanup(&tmp_ctx);

	if (ctx->digest->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE) {
		size_t sltmp = (size_t)EVP_PKEY_size(pkey);
		i = 0;
		pkctx = EVP_PKEY_CTX_new(pkey, NULL);
		if (!pkctx)
			goto err;
		if (EVP_PKEY_sign_init(pkctx) <= 0)
			goto err;
		if (EVP_PKEY_CTX_set_signature_md(pkctx, ctx->digest) <= 0)
			goto err;
		if (EVP_PKEY_sign(pkctx, sigret, &sltmp, m, m_len) <= 0)
			goto err;
		*siglen = sltmp;
		i = 1;
err:
		EVP_PKEY_CTX_free(pkctx);
		return i;
	}

	for (i = 0; i < 4; i++) {
		v = ctx->digest->required_pkey_type[i];
		if (v == 0)
			break;
		if (pkey->type == v) {
			ok = 1;
			break;
		}
	}
	if (!ok) {
		EVPerror(EVP_R_WRONG_PUBLIC_KEY_TYPE);
		return (0);
	}

	if (ctx->digest->sign == NULL) {
		EVPerror(EVP_R_NO_SIGN_FUNCTION_CONFIGURED);
		return (0);
	}
	return(ctx->digest->sign(ctx->digest->type, m, m_len, sigret, siglen,
	    pkey->pkey.ptr));
}
@


1.13
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: p_sign.c,v 1.12 2014/07/11 08:44:48 jsing Exp $ */
d113 1
a113 1
		EVPerr(EVP_F_EVP_SIGNFINAL, EVP_R_WRONG_PUBLIC_KEY_TYPE);
d118 1
a118 1
		EVPerr(EVP_F_EVP_SIGNFINAL, EVP_R_NO_SIGN_FUNCTION_CONFIGURED);
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p_sign.c,v 1.11 2014/06/12 15:49:29 deraadt Exp $ */
a64 15

#ifdef undef
void
EVP_SignInit(EVP_MD_CTX *ctx, EVP_MD *type)
{
	EVP_DigestInit_ex(ctx, type);
}

void
EVP_SignUpdate(EVP_MD_CTX *ctx, unsigned char *data,
    unsigned int count)
{
	EVP_DigestUpdate(ctx, data, count);
}
#endif
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
a61 1
#include "cryptlib.h"
@


1.10
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/evp/p_sign.c */
@


1.9
log
@KNF.
@
text
@d135 1
a135 1
	return(ctx->digest->sign(ctx->digest->type, m,m_len, sigret, siglen,
@


1.8
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 12
a77 10
void EVP_SignInit(EVP_MD_CTX *ctx, EVP_MD *type)
	{
	EVP_DigestInit_ex(ctx,type);
	}

void EVP_SignUpdate(EVP_MD_CTX *ctx, unsigned char *data,
	     unsigned int count)
	{
	EVP_DigestUpdate(ctx,data,count);
	}
d80 4
a83 3
int EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret, unsigned int *siglen,
	     EVP_PKEY *pkey)
	{
d86 1
a86 1
	int i = 0,ok = 0,v;
d90 1
a90 1
	*siglen=0;
d92 3
a94 3
	if (!EVP_MD_CTX_copy_ex(&tmp_ctx,ctx))
		goto err;  
	if (!EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len))
d98 1
a98 2
	if (ctx->digest->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE)
		{
d112 1
a112 1
		err:
d115 1
a115 1
		}
d117 6
a122 7
	for (i=0; i<4; i++)
		{
		v=ctx->digest->required_pkey_type[i];
		if (v == 0) break;
		if (pkey->type == v)
			{
			ok=1;
a123 6
			}
		}
	if (!ok)
		{
		EVPerr(EVP_F_EVP_SIGNFINAL,EVP_R_WRONG_PUBLIC_KEY_TYPE);
		return(0);
d125 5
d131 3
a133 7
	if (ctx->digest->sign == NULL)
		{
		EVPerr(EVP_F_EVP_SIGNFINAL,EVP_R_NO_SIGN_FUNCTION_CONFIGURED);
		return(0);
		}
	return(ctx->digest->sign(ctx->digest->type,m,m_len,sigret,siglen,
		pkey->pkey.ptr));
d135 3
a137 1

@


1.7
log
@resolve conflicts
@
text
@d83 1
a83 1
	int i=0,ok=0,v;
@


1.6
log
@openssl-1.0.0e: resolve conflicts
@
text
@d83 1
a83 1
	int i,ok=0,v;
d85 1
d89 4
a92 2
	EVP_MD_CTX_copy_ex(&tmp_ctx,ctx);   
	EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len);
a96 1
		EVP_PKEY_CTX *pkctx = NULL;
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d84 1
a84 1
	MS_STATIC EVP_MD_CTX tmp_ctx;
@


1.4
log
@resolve conflicts
@
text
@d87 26
d128 1
d134 2
a135 18
	EVP_MD_CTX_init(&tmp_ctx);
	EVP_MD_CTX_copy_ex(&tmp_ctx,ctx);
	if (ctx->digest->flags & EVP_MD_FLAG_SVCTX)
		{
		EVP_MD_SVCTX sctmp;
		sctmp.mctx = &tmp_ctx;
		sctmp.key = pkey->pkey.ptr;
		i = ctx->digest->sign(ctx->digest->type,
			NULL, -1, sigret, siglen, &sctmp);
		}
	else
		{
		EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len);
		i = ctx->digest->sign(ctx->digest->type,m,m_len,sigret,siglen,
					pkey->pkey.ptr);
		}
	EVP_MD_CTX_cleanup(&tmp_ctx);
	return i;
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a86 4
	EVP_MD_CTX_init(&tmp_ctx);
	EVP_MD_CTX_copy_ex(&tmp_ctx,ctx);   
	EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len);
	EVP_MD_CTX_cleanup(&tmp_ctx);
d107 18
a124 2
	return(ctx->digest->sign(ctx->digest->type,m,m_len,sigret,siglen,
		pkey->pkey.ptr));
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d68 1
a68 1
	EVP_DigestInit(ctx,type);
d87 4
a90 2
	EVP_MD_CTX_copy(&tmp_ctx,ctx);   
	EVP_DigestFinal(&tmp_ctx,&(m[0]),&m_len);
@


1.1
log
@Initial revision
@
text
@d61 3
a63 3
#include "evp.h"
#include "objects.h"
#include "x509.h"
d66 1
a66 3
void EVP_SignInit(ctx,type)
EVP_MD_CTX *ctx;
EVP_MD *type;
d71 2
a72 4
void EVP_SignUpdate(ctx,data,count)
EVP_MD_CTX *ctx;
unsigned char *data;
unsigned int count;
d78 2
a79 5
int EVP_SignFinal(ctx,sigret,siglen,pkey)
EVP_MD_CTX *ctx;
unsigned char *sigret;
unsigned int *siglen;
EVP_PKEY *pkey;
d87 1
a87 1
	memcpy(&tmp_ctx,ctx,sizeof(EVP_MD_CTX));
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 3
a63 3
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
d66 3
a68 1
void EVP_SignInit(EVP_MD_CTX *ctx, EVP_MD *type)
d70 1
a70 1
	EVP_DigestInit_ex(ctx,type);
d73 4
a76 2
void EVP_SignUpdate(EVP_MD_CTX *ctx, unsigned char *data,
	     unsigned int count)
d82 5
a86 2
int EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret, unsigned int *siglen,
	     EVP_PKEY *pkey)
d94 2
a95 4
	EVP_MD_CTX_init(&tmp_ctx);
	EVP_MD_CTX_copy_ex(&tmp_ctx,ctx);   
	EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len);
	EVP_MD_CTX_cleanup(&tmp_ctx);
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d87 4
d111 2
a112 18
	EVP_MD_CTX_init(&tmp_ctx);
	EVP_MD_CTX_copy_ex(&tmp_ctx,ctx);
	if (ctx->digest->flags & EVP_MD_FLAG_SVCTX)
		{
		EVP_MD_SVCTX sctmp;
		sctmp.mctx = &tmp_ctx;
		sctmp.key = pkey->pkey.ptr;
		i = ctx->digest->sign(ctx->digest->type,
			NULL, -1, sigret, siglen, &sctmp);
		}
	else
		{
		EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len);
		i = ctx->digest->sign(ctx->digest->type,m,m_len,sigret,siglen,
					pkey->pkey.ptr);
		}
	EVP_MD_CTX_cleanup(&tmp_ctx);
	return i;
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a86 26
	EVP_MD_CTX_init(&tmp_ctx);
	EVP_MD_CTX_copy_ex(&tmp_ctx,ctx);   
	EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len);
	EVP_MD_CTX_cleanup(&tmp_ctx);

	if (ctx->digest->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE)
		{
		EVP_PKEY_CTX *pkctx = NULL;
		size_t sltmp = (size_t)EVP_PKEY_size(pkey);
		i = 0;
		pkctx = EVP_PKEY_CTX_new(pkey, NULL);
		if (!pkctx)
			goto err;
		if (EVP_PKEY_sign_init(pkctx) <= 0)
			goto err;
		if (EVP_PKEY_CTX_set_signature_md(pkctx, ctx->digest) <= 0)
			goto err;
		if (EVP_PKEY_sign(pkctx, sigret, &sltmp, m, m_len) <= 0)
			goto err;
		*siglen = sltmp;
		i = 1;
		err:
		EVP_PKEY_CTX_free(pkctx);
		return i;
		}

a101 1

d107 18
a124 2
	return(ctx->digest->sign(ctx->digest->type,m,m_len,sigret,siglen,
		pkey->pkey.ptr));
@


1.1.1.5
log
@import OpenSSL 1.0.0e
@
text
@d84 1
a84 1
	EVP_MD_CTX tmp_ctx;
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d83 1
a83 1
	int i=0,ok=0,v;
a84 1
	EVP_PKEY_CTX *pkctx = NULL;
d88 2
a89 4
	if (!EVP_MD_CTX_copy_ex(&tmp_ctx,ctx))
		goto err;  
	if (!EVP_DigestFinal_ex(&tmp_ctx,&(m[0]),&m_len))
		goto err;
d94 1
@


1.1.1.7
log
@Import OpenSSL 1.0.1g
@
text
@d83 1
a83 1
	int i = 0,ok = 0,v;
@


