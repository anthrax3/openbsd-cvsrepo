head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.6
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2014.07.13.09.30.02;	author miod;	state Exp;
branches;
next	1.7;
commitid	ZxK4zBtTsNT2HB7j;

1.7
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.6;
commitid	yQEL1wOWIearrW15;

1.6
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.5;
commitid	nzndm3zqPmFurSaK;

1.5
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.06.10.14.14.07;	author jsing;	state Exp;
branches;
next	1.3;
commitid	AsxCaxjMuq4pIb1Q;

1.3
date	2014.05.08.16.05.38;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.08.16.01.06;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@No need to include evp_locl.h in there.
@
text
@/* $OpenBSD: m_wp.c,v 1.7 2014/07/11 08:44:48 jsing Exp $ */

#include <stdio.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_WHIRLPOOL

#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/whrlpool.h>

static int
init(EVP_MD_CTX *ctx)
{
	return WHIRLPOOL_Init(ctx->md_data);
}

static int
update(EVP_MD_CTX *ctx, const void *data, size_t count)
{
	return WHIRLPOOL_Update(ctx->md_data, data, count);
}

static int
final(EVP_MD_CTX *ctx, unsigned char *md)
{
	return WHIRLPOOL_Final(md, ctx->md_data);
}

static const EVP_MD whirlpool_md = {
	.type = NID_whirlpool,
	.pkey_type = 0,
	.md_size = WHIRLPOOL_DIGEST_LENGTH,
	.flags = 0,
	.init = init,
	.update = update,
	.final = final,
	.copy = NULL,
	.cleanup = NULL,
	.sign = NULL,
	.verify = NULL,
	.required_pkey_type = {
		0, 0, 0, 0,
	},
	.block_size = WHIRLPOOL_BBLOCK / 8,
	.ctx_size = sizeof(EVP_MD *) + sizeof(WHIRLPOOL_CTX),
};

const EVP_MD *
EVP_whirlpool(void)
{
	return (&whirlpool_md);
}
#endif
@


1.7
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: m_wp.c,v 1.6 2014/07/10 22:45:57 jsing Exp $ */
a12 2

#include "evp_locl.h"
@


1.6
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: m_wp.c,v 1.5 2014/06/12 15:49:29 deraadt Exp $ */
a6 2
#include "cryptlib.h"

d13 1
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d4 3
@


1.4
log
@Use C99 initialisers for EVP_MD structs, for clarity, grepability and to
protect from future field reordering/removal.

No difference in generated assembly.
@
text
@d1 1
a1 1
/* crypto/evp/m_wp.c */
@


1.3
log
@More KNF.
@
text
@d33 16
a48 12
	NID_whirlpool,
	0,
	WHIRLPOOL_DIGEST_LENGTH,
	0,
	init,
	update,
	final,
	NULL,
	NULL,
	EVP_PKEY_NULL_method,
	WHIRLPOOL_BBLOCK/8,
	sizeof(EVP_MD *) + sizeof(WHIRLPOOL_CTX),
@


1.2
log
@KNF.
@
text
@d14 2
a15 1
static int init(EVP_MD_CTX *ctx)
d20 2
a21 1
static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
d26 2
a27 1
static int final(EVP_MD_CTX *ctx, unsigned char *md)
@


1.1
log
@Initial revision
@
text
@d12 1
d15 3
a17 1
	{ return WHIRLPOOL_Init(ctx->md_data); }
d19 4
a22 2
static int update(EVP_MD_CTX *ctx,const void *data,size_t count)
	{ return WHIRLPOOL_Update(ctx->md_data,data,count); }
d24 4
a27 2
static int final(EVP_MD_CTX *ctx,unsigned char *md)
	{ return WHIRLPOOL_Final(md,ctx->md_data); }
d29 1
a29 2
static const EVP_MD whirlpool_md=
	{
d41 2
a42 2
	sizeof(EVP_MD *)+sizeof(WHIRLPOOL_CTX),
	};
d44 5
a48 4
const EVP_MD *EVP_whirlpool(void)
	{
	return(&whirlpool_md);
	}
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@a11 1
#include "evp_locl.h"
@

