head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.5;
commitid	kT0fLt3r4lroFJra;

1.5
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.4;
commitid	G74O1dmRukKsW7IJ;

1.4
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.3;
commitid	yQEL1wOWIearrW15;

1.3
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.05.07.17.42.51;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: pmeth_gn.c,v 1.5 2014/07/12 16:03:37 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>

#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>

#include "evp_locl.h"

int
EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->paramgen) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	ctx->operation = EVP_PKEY_OP_PARAMGEN;
	if (!ctx->pmeth->paramgen_init)
		return 1;
	ret = ctx->pmeth->paramgen_init(ctx);
	if (ret <= 0)
		ctx->operation = EVP_PKEY_OP_UNDEFINED;
	return ret;
}

int
EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->paramgen) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}

	if (ctx->operation != EVP_PKEY_OP_PARAMGEN) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}

	if (!ppkey)
		return -1;

	if (!*ppkey)
		*ppkey = EVP_PKEY_new();

	ret = ctx->pmeth->paramgen(ctx, *ppkey);
	if (ret <= 0) {
		EVP_PKEY_free(*ppkey);
		*ppkey = NULL;
	}
	return ret;
}

int
EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->keygen) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	ctx->operation = EVP_PKEY_OP_KEYGEN;
	if (!ctx->pmeth->keygen_init)
		return 1;
	ret = ctx->pmeth->keygen_init(ctx);
	if (ret <= 0)
		ctx->operation = EVP_PKEY_OP_UNDEFINED;
	return ret;
}

int
EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
{
	int ret;

	if (!ctx || !ctx->pmeth || !ctx->pmeth->keygen) {
		EVPerror(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
		return -2;
	}
	if (ctx->operation != EVP_PKEY_OP_KEYGEN) {
		EVPerror(EVP_R_OPERATON_NOT_INITIALIZED);
		return -1;
	}

	if (!ppkey)
		return -1;

	if (!*ppkey)
		*ppkey = EVP_PKEY_new();

	ret = ctx->pmeth->keygen(ctx, *ppkey);
	if (ret <= 0) {
		EVP_PKEY_free(*ppkey);
		*ppkey = NULL;
	}
	return ret;
}

void
EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb)
{
	ctx->pkey_gencb = cb;
}

EVP_PKEY_gen_cb *
EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx)
{
	return ctx->pkey_gencb;
}

/* "translation callback" to call EVP_PKEY_CTX callbacks using BN_GENCB
 * style callbacks.
 */

static int
trans_cb(int a, int b, BN_GENCB *gcb)
{
	EVP_PKEY_CTX *ctx = gcb->arg;
	ctx->keygen_info[0] = a;
	ctx->keygen_info[1] = b;
	return ctx->pkey_gencb(ctx);
}

void
evp_pkey_set_cb_translate(BN_GENCB *cb, EVP_PKEY_CTX *ctx)
{
	BN_GENCB_set(cb, trans_cb, ctx)
}

int
EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx)
{
	if (idx == -1)
		return ctx->keygen_info_count;
	if (idx < 0 || idx > ctx->keygen_info_count)
		return 0;
	return ctx->keygen_info[idx];
}

EVP_PKEY *
EVP_PKEY_new_mac_key(int type, ENGINE *e, const unsigned char *key, int keylen)
{
	EVP_PKEY_CTX *mac_ctx = NULL;
	EVP_PKEY *mac_key = NULL;

	mac_ctx = EVP_PKEY_CTX_new_id(type, e);
	if (!mac_ctx)
		return NULL;
	if (EVP_PKEY_keygen_init(mac_ctx) <= 0)
		goto merr;
	if (EVP_PKEY_CTX_ctrl(mac_ctx, -1, EVP_PKEY_OP_KEYGEN,
	    EVP_PKEY_CTRL_SET_MAC_KEY, keylen, (void *)key) <= 0)
		goto merr;
	if (EVP_PKEY_keygen(mac_ctx, &mac_key) <= 0)
		goto merr;

merr:
	EVP_PKEY_CTX_free(mac_ctx);
	return mac_key;
}
@


1.5
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: pmeth_gn.c,v 1.4 2014/07/11 08:44:48 jsing Exp $ */
d75 1
a75 2
		EVPerr(EVP_F_EVP_PKEY_PARAMGEN_INIT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d93 1
a93 2
		EVPerr(EVP_F_EVP_PKEY_PARAMGEN,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d98 1
a98 1
		EVPerr(EVP_F_EVP_PKEY_PARAMGEN, EVP_R_OPERATON_NOT_INITIALIZED);
d122 1
a122 2
		EVPerr(EVP_F_EVP_PKEY_KEYGEN_INIT,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d140 1
a140 2
		EVPerr(EVP_F_EVP_PKEY_KEYGEN,
		    EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d144 1
a144 1
		EVPerr(EVP_F_EVP_PKEY_KEYGEN, EVP_R_OPERATON_NOT_INITIALIZED);
@


1.4
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pmeth_gn.c,v 1.3 2014/06/12 15:49:29 deraadt Exp $ */
d225 1
a225 2
	if (mac_ctx)
		EVP_PKEY_CTX_free(mac_ctx);
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d61 4
a64 1
#include "cryptlib.h"
d66 1
a66 2
#include <openssl/evp.h>
#include <openssl/bn.h>
@


1.2
log
@KNF.
@
text
@d1 1
a1 1
/* pmeth_gn.c */
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d67 3
a69 2
int EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx)
	{
d71 2
a72 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->paramgen)
		{
d74 1
a74 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d76 1
a76 1
		}
d84 1
a84 1
	}
d86 3
a88 2
int EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
	{
d90 2
a91 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->paramgen)
		{
d93 1
a93 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d95 1
a95 1
		}
d97 1
a97 2
	if (ctx->operation != EVP_PKEY_OP_PARAMGEN)
		{
d100 1
a100 1
		}
d109 1
a109 2
	if (ret <= 0)
		{
d112 1
a112 1
		}
d114 1
a114 1
	}
d116 3
a118 2
int EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx)
	{
d120 2
a121 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->keygen)
		{
d123 1
a123 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d125 1
a125 1
		}
d133 1
a133 1
	}
d135 3
a137 2
int EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
	{
d140 1
a140 2
	if (!ctx || !ctx->pmeth || !ctx->pmeth->keygen)
		{
d142 1
a142 1
			EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
d144 2
a145 3
		}
	if (ctx->operation != EVP_PKEY_OP_KEYGEN)
		{
d148 1
a148 1
		}
d157 1
a157 2
	if (ret <= 0)
		{
d160 1
a160 1
		}
d162 1
a162 1
	}
d164 3
a166 2
void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb)
	{
d168 1
a168 1
	}
d170 3
a172 2
EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx)
	{
d174 1
a174 1
	}
d180 3
a182 2
static int trans_cb(int a, int b, BN_GENCB *gcb)
	{
d187 1
a187 1
	}	
d189 3
a191 2
void evp_pkey_set_cb_translate(BN_GENCB *cb, EVP_PKEY_CTX *ctx)
	{
d193 1
a193 1
	}
d195 3
a197 2
int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx)
	{
d199 1
a199 1
		return ctx->keygen_info_count; 
d203 1
a203 1
	}
d205 3
a207 3
EVP_PKEY *EVP_PKEY_new_mac_key(int type, ENGINE *e,
				unsigned char *key, int keylen)
	{
d210 1
d217 1
a217 1
				EVP_PKEY_CTRL_SET_MAC_KEY, keylen, key) <= 0)
d221 2
a222 1
	merr:
d226 1
a226 1
	}
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@d202 1
a202 1
				const unsigned char *key, int keylen)
d212 1
a212 2
				EVP_PKEY_CTRL_SET_MAC_KEY,
				keylen, (void *)key) <= 0)
@

