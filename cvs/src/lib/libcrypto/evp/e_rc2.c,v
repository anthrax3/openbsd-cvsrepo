head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.11;
commitid	kT0fLt3r4lroFJra;

1.11
date	2015.02.10.09.52.35;	author miod;	state Exp;
branches;
next	1.10;
commitid	elQcISUWkrkujoI4;

1.10
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.8;
commitid	nzndm3zqPmFurSaK;

1.8
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.05.08.15.13.06;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.43;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.27;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.20;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: e_rc2.c,v 1.11 2015/02/10 09:52:35 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_RC2

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/rc2.h>

#include "evp_locl.h"

static int rc2_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc);
static int rc2_meth_to_magic(EVP_CIPHER_CTX *ctx);
static int rc2_magic_to_meth(int i);
static int rc2_set_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
static int rc2_get_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
static int rc2_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);

typedef struct {
	int key_bits;	/* effective key bits */
	RC2_KEY ks;	/* key schedule */
} EVP_RC2_KEY;

#define data(ctx)	((EVP_RC2_KEY *)(ctx)->cipher_data)

IMPLEMENT_BLOCK_CIPHER(rc2, ks, RC2, EVP_RC2_KEY, NID_rc2,
    8,
    RC2_KEY_LENGTH, 8, 64,
    EVP_CIPH_VARIABLE_LENGTH | EVP_CIPH_CTRL_INIT,
    rc2_init_key, NULL,
    rc2_set_asn1_type_and_iv, rc2_get_asn1_type_and_iv,
    rc2_ctrl)

#define RC2_40_MAGIC	0xa0
#define RC2_64_MAGIC	0x78
#define RC2_128_MAGIC	0x3a

static const EVP_CIPHER r2_64_cbc_cipher = {
	NID_rc2_64_cbc,
	8, 8 /* 64 bit */, 8,
	EVP_CIPH_CBC_MODE | EVP_CIPH_VARIABLE_LENGTH | EVP_CIPH_CTRL_INIT,
	rc2_init_key,
	rc2_cbc_cipher,
	NULL,
	sizeof(EVP_RC2_KEY),
	rc2_set_asn1_type_and_iv,
	rc2_get_asn1_type_and_iv,
	rc2_ctrl,
	NULL
};

static const EVP_CIPHER r2_40_cbc_cipher = {
	NID_rc2_40_cbc,
	8, 5 /* 40 bit */, 8,
	EVP_CIPH_CBC_MODE | EVP_CIPH_VARIABLE_LENGTH | EVP_CIPH_CTRL_INIT,
	rc2_init_key,
	rc2_cbc_cipher,
	NULL,
	sizeof(EVP_RC2_KEY),
	rc2_set_asn1_type_and_iv,
	rc2_get_asn1_type_and_iv,
	rc2_ctrl,
	NULL
};

const EVP_CIPHER *
EVP_rc2_64_cbc(void)
{
	return (&r2_64_cbc_cipher);
}

const EVP_CIPHER *
EVP_rc2_40_cbc(void)
{
	return (&r2_40_cbc_cipher);
}

static int
rc2_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc)
{
	RC2_set_key(&data(ctx)->ks, EVP_CIPHER_CTX_key_length(ctx),
	    key, data(ctx)->key_bits);
	return 1;
}

static int
rc2_meth_to_magic(EVP_CIPHER_CTX *e)
{
	int i;

	EVP_CIPHER_CTX_ctrl(e, EVP_CTRL_GET_RC2_KEY_BITS, 0, &i);
	if (i == 128)
		return (RC2_128_MAGIC);
	else if (i == 64)
		return (RC2_64_MAGIC);
	else if (i == 40)
		return (RC2_40_MAGIC);
	else
		return (0);
}

static int
rc2_magic_to_meth(int i)
{
	if (i == RC2_128_MAGIC)
		return 128;
	else if (i == RC2_64_MAGIC)
		return 64;
	else if (i == RC2_40_MAGIC)
		return 40;
	else {
		EVPerror(EVP_R_UNSUPPORTED_KEY_SIZE);
		return (0);
	}
}

static int
rc2_get_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
{
	long num = 0;
	int i = 0;
	int key_bits;
	unsigned int l;
	unsigned char iv[EVP_MAX_IV_LENGTH];

	if (type != NULL) {
		l = EVP_CIPHER_CTX_iv_length(c);
		if (l > sizeof(iv)) {
			EVPerror(EVP_R_IV_TOO_LARGE);
			return -1;
		}
		i = ASN1_TYPE_get_int_octetstring(type, &num, iv, l);
		if (i != (int)l)
			return (-1);
		key_bits = rc2_magic_to_meth((int)num);
		if (!key_bits)
			return (-1);
		if (i > 0 && !EVP_CipherInit_ex(c, NULL, NULL, NULL, iv, -1))
			return -1;
		EVP_CIPHER_CTX_ctrl(c, EVP_CTRL_SET_RC2_KEY_BITS,
		    key_bits, NULL);
		EVP_CIPHER_CTX_set_key_length(c, key_bits / 8);
	}
	return (i);
}

static int
rc2_set_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
{
	long num;
	int i = 0, j;

	if (type != NULL) {
		num = rc2_meth_to_magic(c);
		j = EVP_CIPHER_CTX_iv_length(c);
		i = ASN1_TYPE_set_int_octetstring(type, num, c->oiv, j);
	}
	return (i);
}

static int
rc2_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
{
	switch (type) {
	case EVP_CTRL_INIT:
		data(c)->key_bits = EVP_CIPHER_CTX_key_length(c) * 8;
		return 1;

	case EVP_CTRL_GET_RC2_KEY_BITS:
		*(int *)ptr = data(c)->key_bits;
		return 1;

	case EVP_CTRL_SET_RC2_KEY_BITS:
		if (arg > 0) {
			data(c)->key_bits = arg;
			return 1;
		}
		return 0;

#ifdef PBE_PRF_TEST
	case EVP_CTRL_PBE_PRF_NID:
		*(int *)ptr = NID_hmacWithMD5;
		return 1;
#endif

	default:
		return -1;
	}
}

#endif
@


1.11
log
@Replace assert() and OPENSSL_assert() calls with proper error return paths.
Careful review, feedback & ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc2.c,v 1.10 2014/07/11 08:44:48 jsing Exp $ */
d174 1
a174 1
		EVPerr(EVP_F_RC2_MAGIC_TO_METH, EVP_R_UNSUPPORTED_KEY_SIZE);
d191 1
a191 2
			EVPerr(EVP_F_RC2_GET_ASN1_TYPE_AND_IV,
			    EVP_R_IV_TOO_LARGE);
@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc2.c,v 1.9 2014/07/10 22:45:57 jsing Exp $ */
d190 5
a194 1
		OPENSSL_assert(l <= sizeof(iv));
@


1.9
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc2.c,v 1.8 2014/06/12 15:49:29 deraadt Exp $ */
a62 2
#include "cryptlib.h"

d65 1
d68 2
a70 1
#include <openssl/rc2.h>
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.7
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/evp/e_rc2.c */
@


1.6
log
@resolve conflicts
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d70 1
a70 1
			const unsigned char *iv,int enc);
d77 1
a77 2
typedef struct
	{
d80 1
a80 1
	} EVP_RC2_KEY;
d85 6
a90 6
			8,
			RC2_KEY_LENGTH, 8, 64,
			EVP_CIPH_VARIABLE_LENGTH | EVP_CIPH_CTRL_INIT,
			rc2_init_key, NULL,
			rc2_set_asn1_type_and_iv, rc2_get_asn1_type_and_iv, 
			rc2_ctrl)
d96 1
a96 2
static const EVP_CIPHER r2_64_cbc_cipher=
	{
d98 1
a98 1
	8,8 /* 64 bit */,8,
d108 1
a108 1
	};
d110 1
a110 2
static const EVP_CIPHER r2_40_cbc_cipher=
	{
d112 1
a112 1
	8,5 /* 40 bit */,8,
d122 1
a122 1
	};
d124 18
a141 15
const EVP_CIPHER *EVP_rc2_64_cbc(void)
	{
	return(&r2_64_cbc_cipher);
	}

const EVP_CIPHER *EVP_rc2_40_cbc(void)
	{
	return(&r2_40_cbc_cipher);
	}
	
static int rc2_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
			const unsigned char *iv, int enc)
	{
	RC2_set_key(&data(ctx)->ks,EVP_CIPHER_CTX_key_length(ctx),
		    key,data(ctx)->key_bits);
d143 1
a143 1
	}
d145 3
a147 2
static int rc2_meth_to_magic(EVP_CIPHER_CTX *e)
	{
d151 6
a156 11
	if 	(i == 128) return(RC2_128_MAGIC);
	else if (i == 64)  return(RC2_64_MAGIC);
	else if (i == 40)  return(RC2_40_MAGIC);
	else return(0);
	}

static int rc2_magic_to_meth(int i)
	{
	if      (i == RC2_128_MAGIC) return 128;
	else if (i == RC2_64_MAGIC)  return 64;
	else if (i == RC2_40_MAGIC)  return 40;
d158 2
a159 5
		{
		EVPerr(EVP_F_RC2_MAGIC_TO_METH,EVP_R_UNSUPPORTED_KEY_SIZE);
		return(0);
		}
	}
d161 20
a180 4
static int rc2_get_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
	{
	long num=0;
	int i=0;
d185 2
a186 3
	if (type != NULL)
		{
		l=EVP_CIPHER_CTX_iv_length(c);
d188 1
a188 1
		i=ASN1_TYPE_get_int_octetstring(type,&num,iv,l);
d190 2
a191 2
			return(-1);
		key_bits =rc2_magic_to_meth((int)num);
d193 2
a194 2
			return(-1);
		if(i > 0 && !EVP_CipherInit_ex(c, NULL, NULL, NULL, iv, -1))
d196 2
a197 1
		EVP_CIPHER_CTX_ctrl(c, EVP_CTRL_SET_RC2_KEY_BITS, key_bits, NULL);
a198 2
		}
	return(i);
d200 2
d203 3
a205 2
static int rc2_set_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
	{
d207 1
a207 10
	int i=0,j;

	if (type != NULL)
		{
		num=rc2_meth_to_magic(c);
		j=EVP_CIPHER_CTX_iv_length(c);
		i=ASN1_TYPE_set_int_octetstring(type,num,c->oiv,j);
		}
	return(i);
	}
d209 12
a220 4
static int rc2_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
	{
	switch(type)
		{
d228 1
a228 1
			
d230 1
a230 2
		if(arg > 0)
			{
d233 1
a233 1
			}
d235 1
a243 1
		}
d245 1
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d186 2
a187 1
		if(i > 0) EVP_CipherInit_ex(c, NULL, NULL, NULL, iv, -1);
@


1.4
log
@resolve conflicts
@
text
@d226 5
@


1.3
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d59 3
a63 2
#include <stdio.h>
#include "cryptlib.h"
d171 1
a171 1
	int i=0,l;
d173 1
d179 1
a179 1
		OPENSSL_assert(l <= sizeof iv);
d181 1
a181 1
		if (i != l)
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d177 1
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_RC2
d66 1
d76 9
a84 1
IMPLEMENT_BLOCK_CIPHER(rc2, rc2.ks, RC2, rc2, NID_rc2,
d86 1
a86 1
			EVP_RC2_KEY_SIZE, 8,
d96 1
a96 1
static EVP_CIPHER r2_64_cbc_cipher=
d104 1
a104 2
	sizeof(EVP_CIPHER_CTX)-sizeof((((EVP_CIPHER_CTX *)NULL)->c))+
		sizeof((((EVP_CIPHER_CTX *)NULL)->c.rc2)),
d111 1
a111 1
static EVP_CIPHER r2_40_cbc_cipher=
d119 1
a119 2
	sizeof(EVP_CIPHER_CTX)-sizeof((((EVP_CIPHER_CTX *)NULL)->c))+
		sizeof((((EVP_CIPHER_CTX *)NULL)->c.rc2)),
d126 1
a126 1
EVP_CIPHER *EVP_rc2_64_cbc(void)
d131 1
a131 1
EVP_CIPHER *EVP_rc2_40_cbc(void)
d139 2
a140 2
	RC2_set_key(&(ctx->c.rc2.ks),EVP_CIPHER_CTX_key_length(ctx),
			key,ctx->c.rc2.key_bits);
d183 1
a183 1
		if(i > 0) EVP_CipherInit(c, NULL, NULL, iv, -1);
d206 14
a219 8
		switch(type) {

			case EVP_CTRL_INIT:
			c->c.rc2.key_bits = EVP_CIPHER_CTX_key_length(c) * 8;
			return 1;

			case EVP_CTRL_GET_RC2_KEY_BITS:
			*(int *)ptr = c->c.rc2.key_bits;
a220 6
			
			
			case EVP_CTRL_SET_RC2_KEY_BITS:
			if(arg > 0) {
				c->c.rc2.key_bits = arg;
				return 1;
d222 1
a222 1
			return 0;
d224 2
a225 2
			default:
			return -1;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_RC2
a65 1
#include <openssl/rc2.h>
d75 1
a75 9
typedef struct
	{
	int key_bits;	/* effective key bits */
	RC2_KEY ks;	/* key schedule */
	} EVP_RC2_KEY;

#define data(ctx)	((EVP_RC2_KEY *)(ctx)->cipher_data)

IMPLEMENT_BLOCK_CIPHER(rc2, ks, RC2, EVP_RC2_KEY, NID_rc2,
d77 1
a77 1
			RC2_KEY_LENGTH, 8, 64,
d87 1
a87 1
static const EVP_CIPHER r2_64_cbc_cipher=
d95 2
a96 1
	sizeof(EVP_RC2_KEY),
d103 1
a103 1
static const EVP_CIPHER r2_40_cbc_cipher=
d111 2
a112 1
	sizeof(EVP_RC2_KEY),
d119 1
a119 1
const EVP_CIPHER *EVP_rc2_64_cbc(void)
d124 1
a124 1
const EVP_CIPHER *EVP_rc2_40_cbc(void)
d132 2
a133 2
	RC2_set_key(&data(ctx)->ks,EVP_CIPHER_CTX_key_length(ctx),
		    key,data(ctx)->key_bits);
d176 1
a176 1
		if(i > 0) EVP_CipherInit_ex(c, NULL, NULL, NULL, iv, -1);
d199 10
a208 9
	switch(type)
		{
	case EVP_CTRL_INIT:
		data(c)->key_bits = EVP_CIPHER_CTX_key_length(c) * 8;
		return 1;

	case EVP_CTRL_GET_RC2_KEY_BITS:
		*(int *)ptr = data(c)->key_bits;
		return 1;
d210 4
a213 5
	case EVP_CTRL_SET_RC2_KEY_BITS:
		if(arg > 0)
			{
			data(c)->key_bits = arg;
			return 1;
d215 1
a215 1
		return 0;
d217 2
a218 2
	default:
		return -1;
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@a176 1
		OPENSSL_assert(l <= sizeof iv);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d59 2
a62 3

#ifndef OPENSSL_NO_RC2

d170 1
a170 1
	int i=0;
a171 1
	unsigned int l;
d177 1
a177 1
		OPENSSL_assert(l <= sizeof(iv));
d179 1
a179 1
		if (i != (int)l)
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a225 5
#ifdef PBE_PRF_TEST
	case EVP_CTRL_PBE_PRF_NID:
		*(int *)ptr = NID_hmacWithMD5;
		return 1;
#endif
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@d186 1
a186 2
		if(i > 0 && !EVP_CipherInit_ex(c, NULL, NULL, NULL, iv, -1))
			return -1;
@


