head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2017.03.01.13.53.58;	author jsing;	state Exp;
branches;
next	1.20;
commitid	Q7GZTioYdmSh4XCD;

1.20
date	2015.09.14.01.45.03;	author doug;	state Exp;
branches;
next	1.19;
commitid	WI3ltGMbnAaZXz3O;

1.19
date	2015.09.13.23.36.21;	author doug;	state Exp;
branches;
next	1.18;
commitid	4CxCgJZcnC9PKUvF;

1.18
date	2015.09.13.21.09.56;	author doug;	state Exp;
branches;
next	1.17;
commitid	e818W60lrMrFrzEk;

1.17
date	2015.06.20.01.07.24;	author doug;	state Exp;
branches;
next	1.16;
commitid	odUD1eZ4N02tuzg5;

1.16
date	2015.02.10.11.45.09;	author jsing;	state Exp;
branches;
next	1.15;
commitid	znaecaAmULZs71gX;

1.15
date	2015.02.07.03.23.05;	author jsing;	state Exp;
branches;
next	1.14;
commitid	kdE25yNUvpBCs5RV;

1.14
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.13;
commitid	nzndm3zqPmFurSaK;

1.13
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.06.10.16.15.19;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	i7ofdog6OmjCcKaT;

1.11
date	2014.05.16.14.24.36;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.03.15.50.24;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.10.16.31.55;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.09;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.26;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.39.08;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.35.18;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.11.11.21.15.17;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Include EVP_md5_sha1() via OpenSSL_add_all_digests().
@
text
@/* $OpenBSD: c_all.c,v 1.20 2015/09/14 01:45:03 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/objects.h>

#include "cryptlib.h"

void
OpenSSL_add_all_ciphers(void)
{
#ifndef OPENSSL_NO_DES
	EVP_add_cipher(EVP_des_cfb());
	EVP_add_cipher(EVP_des_cfb1());
	EVP_add_cipher(EVP_des_cfb8());
	EVP_add_cipher(EVP_des_ede_cfb());
	EVP_add_cipher(EVP_des_ede3_cfb());
	EVP_add_cipher(EVP_des_ede3_cfb1());
	EVP_add_cipher(EVP_des_ede3_cfb8());

	EVP_add_cipher(EVP_des_ofb());
	EVP_add_cipher(EVP_des_ede_ofb());
	EVP_add_cipher(EVP_des_ede3_ofb());

	EVP_add_cipher(EVP_desx_cbc());
	EVP_add_cipher_alias(SN_desx_cbc, "DESX");
	EVP_add_cipher_alias(SN_desx_cbc, "desx");

	EVP_add_cipher(EVP_des_cbc());
	EVP_add_cipher_alias(SN_des_cbc, "DES");
	EVP_add_cipher_alias(SN_des_cbc, "des");
	EVP_add_cipher(EVP_des_ede_cbc());
	EVP_add_cipher(EVP_des_ede3_cbc());
	EVP_add_cipher_alias(SN_des_ede3_cbc, "DES3");
	EVP_add_cipher_alias(SN_des_ede3_cbc, "des3");

	EVP_add_cipher(EVP_des_ecb());
	EVP_add_cipher(EVP_des_ede());
	EVP_add_cipher(EVP_des_ede3());
#endif

#ifndef OPENSSL_NO_RC4
	EVP_add_cipher(EVP_rc4());
	EVP_add_cipher(EVP_rc4_40());
#ifndef OPENSSL_NO_MD5
	EVP_add_cipher(EVP_rc4_hmac_md5());
#endif
#endif

#ifndef OPENSSL_NO_IDEA
	EVP_add_cipher(EVP_idea_ecb());
	EVP_add_cipher(EVP_idea_cfb());
	EVP_add_cipher(EVP_idea_ofb());
	EVP_add_cipher(EVP_idea_cbc());
	EVP_add_cipher_alias(SN_idea_cbc, "IDEA");
	EVP_add_cipher_alias(SN_idea_cbc, "idea");
#endif

#ifndef OPENSSL_NO_RC2
	EVP_add_cipher(EVP_rc2_ecb());
	EVP_add_cipher(EVP_rc2_cfb());
	EVP_add_cipher(EVP_rc2_ofb());
	EVP_add_cipher(EVP_rc2_cbc());
	EVP_add_cipher(EVP_rc2_40_cbc());
	EVP_add_cipher(EVP_rc2_64_cbc());
	EVP_add_cipher_alias(SN_rc2_cbc, "RC2");
	EVP_add_cipher_alias(SN_rc2_cbc, "rc2");
#endif

#ifndef OPENSSL_NO_BF
	EVP_add_cipher(EVP_bf_ecb());
	EVP_add_cipher(EVP_bf_cfb());
	EVP_add_cipher(EVP_bf_ofb());
	EVP_add_cipher(EVP_bf_cbc());
	EVP_add_cipher_alias(SN_bf_cbc, "BF");
	EVP_add_cipher_alias(SN_bf_cbc, "bf");
	EVP_add_cipher_alias(SN_bf_cbc, "blowfish");
#endif

#ifndef OPENSSL_NO_CAST
	EVP_add_cipher(EVP_cast5_ecb());
	EVP_add_cipher(EVP_cast5_cfb());
	EVP_add_cipher(EVP_cast5_ofb());
	EVP_add_cipher(EVP_cast5_cbc());
	EVP_add_cipher_alias(SN_cast5_cbc, "CAST");
	EVP_add_cipher_alias(SN_cast5_cbc, "cast");
	EVP_add_cipher_alias(SN_cast5_cbc, "CAST-cbc");
	EVP_add_cipher_alias(SN_cast5_cbc, "cast-cbc");
#endif

#ifndef OPENSSL_NO_AES
	EVP_add_cipher(EVP_aes_128_ecb());
	EVP_add_cipher(EVP_aes_128_cbc());
	EVP_add_cipher(EVP_aes_128_cfb());
	EVP_add_cipher(EVP_aes_128_cfb1());
	EVP_add_cipher(EVP_aes_128_cfb8());
	EVP_add_cipher(EVP_aes_128_ofb());
	EVP_add_cipher(EVP_aes_128_ctr());
	EVP_add_cipher(EVP_aes_128_gcm());
	EVP_add_cipher(EVP_aes_128_xts());
	EVP_add_cipher_alias(SN_aes_128_cbc, "AES128");
	EVP_add_cipher_alias(SN_aes_128_cbc, "aes128");
	EVP_add_cipher(EVP_aes_192_ecb());
	EVP_add_cipher(EVP_aes_192_cbc());
	EVP_add_cipher(EVP_aes_192_cfb());
	EVP_add_cipher(EVP_aes_192_cfb1());
	EVP_add_cipher(EVP_aes_192_cfb8());
	EVP_add_cipher(EVP_aes_192_ofb());
	EVP_add_cipher(EVP_aes_192_ctr());
	EVP_add_cipher(EVP_aes_192_gcm());
	EVP_add_cipher_alias(SN_aes_192_cbc, "AES192");
	EVP_add_cipher_alias(SN_aes_192_cbc, "aes192");
	EVP_add_cipher(EVP_aes_256_ecb());
	EVP_add_cipher(EVP_aes_256_cbc());
	EVP_add_cipher(EVP_aes_256_cfb());
	EVP_add_cipher(EVP_aes_256_cfb1());
	EVP_add_cipher(EVP_aes_256_cfb8());
	EVP_add_cipher(EVP_aes_256_ofb());
	EVP_add_cipher(EVP_aes_256_ctr());
	EVP_add_cipher(EVP_aes_256_gcm());
	EVP_add_cipher(EVP_aes_256_xts());
	EVP_add_cipher_alias(SN_aes_256_cbc, "AES256");
	EVP_add_cipher_alias(SN_aes_256_cbc, "aes256");
#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
	EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
	EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
#endif
#endif

#ifndef OPENSSL_NO_CAMELLIA
	EVP_add_cipher(EVP_camellia_128_ecb());
	EVP_add_cipher(EVP_camellia_128_cbc());
	EVP_add_cipher(EVP_camellia_128_cfb());
	EVP_add_cipher(EVP_camellia_128_cfb1());
	EVP_add_cipher(EVP_camellia_128_cfb8());
	EVP_add_cipher(EVP_camellia_128_ofb());
	EVP_add_cipher_alias(SN_camellia_128_cbc, "CAMELLIA128");
	EVP_add_cipher_alias(SN_camellia_128_cbc, "camellia128");
	EVP_add_cipher(EVP_camellia_192_ecb());
	EVP_add_cipher(EVP_camellia_192_cbc());
	EVP_add_cipher(EVP_camellia_192_cfb());
	EVP_add_cipher(EVP_camellia_192_cfb1());
	EVP_add_cipher(EVP_camellia_192_cfb8());
	EVP_add_cipher(EVP_camellia_192_ofb());
	EVP_add_cipher_alias(SN_camellia_192_cbc, "CAMELLIA192");
	EVP_add_cipher_alias(SN_camellia_192_cbc, "camellia192");
	EVP_add_cipher(EVP_camellia_256_ecb());
	EVP_add_cipher(EVP_camellia_256_cbc());
	EVP_add_cipher(EVP_camellia_256_cfb());
	EVP_add_cipher(EVP_camellia_256_cfb1());
	EVP_add_cipher(EVP_camellia_256_cfb8());
	EVP_add_cipher(EVP_camellia_256_ofb());
	EVP_add_cipher_alias(SN_camellia_256_cbc, "CAMELLIA256");
	EVP_add_cipher_alias(SN_camellia_256_cbc, "camellia256");
#endif

#ifndef OPENSSL_NO_CHACHA
	EVP_add_cipher(EVP_chacha20());
#endif

#ifndef OPENSSL_NO_GOST
	EVP_add_cipher(EVP_gost2814789_ecb());
	EVP_add_cipher(EVP_gost2814789_cfb64());
	EVP_add_cipher(EVP_gost2814789_cnt());
#endif
}

void
OpenSSL_add_all_digests(void)
{
#ifndef OPENSSL_NO_MD4
	EVP_add_digest(EVP_md4());
#endif

#ifndef OPENSSL_NO_MD5
	EVP_add_digest(EVP_md5());
	EVP_add_digest(EVP_md5_sha1());
	EVP_add_digest_alias(SN_md5, "ssl2-md5");
	EVP_add_digest_alias(SN_md5, "ssl3-md5");
#endif

#if !defined(OPENSSL_NO_SHA)
#ifndef OPENSSL_NO_DSA
	EVP_add_digest(EVP_dss());
#endif
#endif
#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
	EVP_add_digest(EVP_sha1());
	EVP_add_digest_alias(SN_sha1, "ssl3-sha1");
	EVP_add_digest_alias(SN_sha1WithRSAEncryption, SN_sha1WithRSA);
#ifndef OPENSSL_NO_DSA
	EVP_add_digest(EVP_dss1());
	EVP_add_digest_alias(SN_dsaWithSHA1, SN_dsaWithSHA1_2);
	EVP_add_digest_alias(SN_dsaWithSHA1, "DSS1");
	EVP_add_digest_alias(SN_dsaWithSHA1, "dss1");
#endif
#ifndef OPENSSL_NO_ECDSA
	EVP_add_digest(EVP_ecdsa());
#endif
#endif

#ifndef OPENSSL_NO_GOST
	EVP_add_digest(EVP_gostr341194());
	EVP_add_digest(EVP_gost2814789imit());
	EVP_add_digest(EVP_streebog256());
	EVP_add_digest(EVP_streebog512());
#endif
#ifndef OPENSSL_NO_RIPEMD
	EVP_add_digest(EVP_ripemd160());
	EVP_add_digest_alias(SN_ripemd160, "ripemd");
	EVP_add_digest_alias(SN_ripemd160, "rmd160");
#endif
#ifndef OPENSSL_NO_SHA256
	EVP_add_digest(EVP_sha224());
	EVP_add_digest(EVP_sha256());
#endif
#ifndef OPENSSL_NO_SHA512
	EVP_add_digest(EVP_sha384());
	EVP_add_digest(EVP_sha512());
#endif
#ifndef OPENSSL_NO_WHIRLPOOL
	EVP_add_digest(EVP_whirlpool());
#endif
}

void
OPENSSL_add_all_algorithms_noconf(void)
{
	OPENSSL_cpuid_setup();
	OpenSSL_add_all_ciphers();
	OpenSSL_add_all_digests();
}

void
OPENSSL_add_all_algorithms_conf(void)
{
	OPENSSL_add_all_algorithms_noconf();
	OPENSSL_config(NULL);
}
@


1.20
log
@Temporarily revive MD4 for MS CHAP support.
@
text
@d1 1
a1 1
/* $OpenBSD: c_all.c,v 1.19 2015/09/13 23:36:21 doug Exp $ */
d237 1
@


1.19
log
@Remove MD4 support from LibreSSL.

MD4 should have been removed a long time ago.  Also, RFC 6150 moved it to
historic in 2011.  Rides the major crank from removing SHA-0.

Discussed with many including beck@@, millert@@, djm@@, sthen@@
ok jsing@@, input + ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: c_all.c,v 1.18 2015/09/13 21:09:56 doug Exp $ */
d231 4
@


1.18
log
@Remove SHA-0 support.

SHA-0 was withdrawn shortly after publication 20 years ago and replaced
with SHA-1.  This will require a major crank.

ok bcook@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: c_all.c,v 1.17 2015/06/20 01:07:24 doug Exp $ */
a230 4
#ifndef OPENSSL_NO_MD4
	EVP_add_digest(EVP_md4());
#endif

@


1.17
log
@Remove obsolete MDC-2DES from libcrypto.

ok deraadt@@ jsing@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: c_all.c,v 1.16 2015/02/10 11:45:09 jsing Exp $ */
d241 1
a241 2
#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA0)
	EVP_add_digest(EVP_sha());
@


1.16
log
@unifdef OPENSSL_NO_RC5
@
text
@d1 1
a1 1
/* $OpenBSD: c_all.c,v 1.15 2015/02/07 03:23:05 jsing Exp $ */
a266 3
#endif
#if !defined(OPENSSL_NO_MDC2) && !defined(OPENSSL_NO_DES)
	EVP_add_digest(EVP_mdc2());
@


1.15
log
@Combine c_allc.c and c_alld.c into c_all.c - there is not much point having
this split across files, especially when two of them have less code than
license text.

ok bcook@@ beck@@ doug@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: c_all.c,v 1.14 2014/07/10 22:45:57 jsing Exp $ */
a148 9
#endif

#ifndef OPENSSL_NO_RC5
	EVP_add_cipher(EVP_rc5_32_12_16_ecb());
	EVP_add_cipher(EVP_rc5_32_12_16_cfb());
	EVP_add_cipher(EVP_rc5_32_12_16_ofb());
	EVP_add_cipher(EVP_rc5_32_12_16_cbc());
	EVP_add_cipher_alias(SN_rc5_cbc, "rc5");
	EVP_add_cipher_alias(SN_rc5_cbc, "RC5");
@


1.14
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: c_all.c,v 1.13 2014/06/12 15:49:29 deraadt Exp $ */
d65 1
d67 33
a99 2
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
d102 195
a296 1
#include "cryptlib.h"
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.12
log
@Abandon the auto-ENGINE /dev/crypto interface.  VIA 3des cbc receives
collateral damage.

The syncronous nature of this mechanism has hampered performance for
symmetric crypto relative to brute-force cpu. The assymetric crypto
support never really materialized in drivers.

So abandon the complexity.
ok tedu beck mikeb
some disagrement from djm but if he wants to test /dev/crypto ciphers
he should do it without this this gigantic API in the way
@
text
@d1 1
a1 1
/* crypto/evp/c_all.c */
@


1.11
log
@When OPENSSL_LOAD_CONF was added it ended up with more #if 0 code,
more #ifdefs and a new source file that contains a single function.

Nuke the #if 0 code that is now a macro and move the single function in
evp_acnf.c to c_all.c, which is where the other code lives. While here,
tidy evp.h slightly, remove an unnecessary #ifdef __OpenBSD__ and nuke
a comment that is now a lie.

ok miod@@
@
text
@a75 3
#ifndef OPENSSL_NO_ENGINE
	ENGINE_setup_bsd_cryptodev();
#endif
@


1.10
log
@KNF.
@
text
@d60 2
a61 1
#include "cryptlib.h"
d63 1
d68 1
a68 9
#if 0
#undef OpenSSL_add_all_algorithms

void
OpenSSL_add_all_algorithms(void)
{
	OPENSSL_add_all_algorithms_noconf();
}
#endif
a72 5
	/*
	 * For the moment OPENSSL_cpuid_setup does something
	 * only on IA-32, but we reserve the option for all
	 * platforms...
	 */
a76 1
# if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(HAVE_CRYPTODEV)
a77 1
# endif
d79 7
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d69 3
a71 2
void OpenSSL_add_all_algorithms(void)
	{
d73 1
a73 1
	}
d76 3
a78 2
void OPENSSL_add_all_algorithms_noconf(void)
	{
d92 1
a92 1
	}
@


1.8
log
@resolve conflicts
@
text
@d86 1
a86 1
# if defined(__OpenBSD__) || defined(__FreeBSD__)
@


1.7
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d77 6
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d62 3
@


1.5
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d76 5
a80 1
	ENGINE_setup_openbsd();
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d63 1
d70 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d63 2
d66 6
a71 1
{
d74 2
a75 1
}
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a61 2
#include <openssl/pkcs12.h>
#include <openssl/objects.h>
d63 5
a67 129
void SSLeay_add_all_algorithms(void)
	{
	SSLeay_add_all_ciphers();
	SSLeay_add_all_digests();
	}

void SSLeay_add_all_ciphers(void)
	{
#ifndef NO_DES
	EVP_add_cipher(EVP_des_cfb());
	EVP_add_cipher(EVP_des_ede_cfb());
	EVP_add_cipher(EVP_des_ede3_cfb());

	EVP_add_cipher(EVP_des_ofb());
	EVP_add_cipher(EVP_des_ede_ofb());
	EVP_add_cipher(EVP_des_ede3_ofb());

	EVP_add_cipher(EVP_desx_cbc());
	EVP_add_cipher_alias(SN_desx_cbc,"DESX");
	EVP_add_cipher_alias(SN_desx_cbc,"desx");

	EVP_add_cipher(EVP_des_cbc());
	EVP_add_cipher_alias(SN_des_cbc,"DES");
	EVP_add_cipher_alias(SN_des_cbc,"des");
	EVP_add_cipher(EVP_des_ede_cbc());
	EVP_add_cipher(EVP_des_ede3_cbc());
	EVP_add_cipher_alias(SN_des_ede3_cbc,"DES3");
	EVP_add_cipher_alias(SN_des_ede3_cbc,"des3");

	EVP_add_cipher(EVP_des_ecb());
	EVP_add_cipher(EVP_des_ede());
	EVP_add_cipher(EVP_des_ede3());
#endif

#ifndef NO_RC4
	EVP_add_cipher(EVP_rc4());
	EVP_add_cipher(EVP_rc4_40());
#endif

#ifndef NO_IDEA
	EVP_add_cipher(EVP_idea_ecb());
	EVP_add_cipher(EVP_idea_cfb());
	EVP_add_cipher(EVP_idea_ofb());
	EVP_add_cipher(EVP_idea_cbc());
	EVP_add_cipher_alias(SN_idea_cbc,"IDEA");
	EVP_add_cipher_alias(SN_idea_cbc,"idea");
#endif

#ifndef NO_RC2
	EVP_add_cipher(EVP_rc2_ecb());
	EVP_add_cipher(EVP_rc2_cfb());
	EVP_add_cipher(EVP_rc2_ofb());
	EVP_add_cipher(EVP_rc2_cbc());
	EVP_add_cipher(EVP_rc2_40_cbc());
	EVP_add_cipher(EVP_rc2_64_cbc());
	EVP_add_cipher_alias(SN_rc2_cbc,"RC2");
	EVP_add_cipher_alias(SN_rc2_cbc,"rc2");
#endif

#ifndef NO_BF
	EVP_add_cipher(EVP_bf_ecb());
	EVP_add_cipher(EVP_bf_cfb());
	EVP_add_cipher(EVP_bf_ofb());
	EVP_add_cipher(EVP_bf_cbc());
	EVP_add_cipher_alias(SN_bf_cbc,"BF");
	EVP_add_cipher_alias(SN_bf_cbc,"bf");
	EVP_add_cipher_alias(SN_bf_cbc,"blowfish");
#endif

#ifndef NO_CAST
	EVP_add_cipher(EVP_cast5_ecb());
	EVP_add_cipher(EVP_cast5_cfb());
	EVP_add_cipher(EVP_cast5_ofb());
	EVP_add_cipher(EVP_cast5_cbc());
	EVP_add_cipher_alias(SN_cast5_cbc,"CAST");
	EVP_add_cipher_alias(SN_cast5_cbc,"cast");
	EVP_add_cipher_alias(SN_cast5_cbc,"CAST-cbc");
	EVP_add_cipher_alias(SN_cast5_cbc,"cast-cbc");
#endif

#ifndef NO_RC5
	EVP_add_cipher(EVP_rc5_32_12_16_ecb());
	EVP_add_cipher(EVP_rc5_32_12_16_cfb());
	EVP_add_cipher(EVP_rc5_32_12_16_ofb());
	EVP_add_cipher(EVP_rc5_32_12_16_cbc());
	EVP_add_cipher_alias(SN_rc5_cbc,"rc5");
	EVP_add_cipher_alias(SN_rc5_cbc,"RC5");
#endif
	}


void SSLeay_add_all_digests(void)
	{
#ifndef NO_MD2
	EVP_add_digest(EVP_md2());
#endif
#ifndef NO_MD5
	EVP_add_digest(EVP_md5());
	EVP_add_digest_alias(SN_md5,"ssl2-md5");
	EVP_add_digest_alias(SN_md5,"ssl3-md5");
#endif
#ifndef NO_SHA
	EVP_add_digest(EVP_sha());
#ifndef NO_DSA
	EVP_add_digest(EVP_dss());
#endif
#endif
#ifndef NO_SHA
	EVP_add_digest(EVP_sha1());
	EVP_add_digest_alias(SN_sha1,"ssl3-sha1");
	EVP_add_digest_alias(SN_sha1WithRSAEncryption,SN_sha1WithRSA);
#ifndef NO_DSA
	EVP_add_digest(EVP_dss1());
	EVP_add_digest_alias(SN_dsaWithSHA1,SN_dsaWithSHA1_2);
	EVP_add_digest_alias(SN_dsaWithSHA1,"DSS1");
	EVP_add_digest_alias(SN_dsaWithSHA1,"dss1");
#endif
#endif
#if !defined(NO_MDC2) && !defined(NO_DES)
	EVP_add_digest(EVP_mdc2());
#endif
#ifndef NO_RIPEMD
	EVP_add_digest(EVP_ripemd160());
	EVP_add_digest_alias(SN_ripemd160,"ripemd");
	EVP_add_digest_alias(SN_ripemd160,"rmd160");
#endif
	PKCS12_PBE_add();
	PKCS5_PBE_add();
	}
@


1.1
log
@Initial revision
@
text
@d61 3
a63 2
#include "evp.h"
#include "objects.h"
d65 1
a65 1
void SSLeay_add_all_algorithms()
d71 1
a71 1
void SSLeay_add_all_ciphers()
d83 2
a84 2
	EVP_add_alias(SN_desx_cbc,"DESX");
	EVP_add_alias(SN_desx_cbc,"desx");
d87 2
a88 2
	EVP_add_alias(SN_des_cbc,"DES");
	EVP_add_alias(SN_des_cbc,"des");
d91 2
a92 2
	EVP_add_alias(SN_des_ede3_cbc,"DES3");
	EVP_add_alias(SN_des_ede3_cbc,"des3");
d109 2
a110 2
	EVP_add_alias(SN_idea_cbc,"IDEA");
	EVP_add_alias(SN_idea_cbc,"idea");
d119 3
a121 2
	EVP_add_alias(SN_rc2_cbc,"RC2");
	EVP_add_alias(SN_rc2_cbc,"rc2");
d124 1
a124 1
#ifndef NO_BLOWFISH
d129 3
a131 3
	EVP_add_alias(SN_bf_cbc,"BF");
	EVP_add_alias(SN_bf_cbc,"bf");
	EVP_add_alias(SN_bf_cbc,"blowfish");
d139 4
a142 4
	EVP_add_alias(SN_cast5_cbc,"CAST");
	EVP_add_alias(SN_cast5_cbc,"cast");
	EVP_add_alias(SN_cast5_cbc,"CAST-cbc");
	EVP_add_alias(SN_cast5_cbc,"cast-cbc");
d150 2
a151 4
	EVP_add_alias(SN_rc5_cbc,"rc5");
	EVP_add_alias(SN_rc5_cbc,"RC5");
	EVP_add_alias(SN_rc5_cbc,"rc5-cbc");
	EVP_add_alias(SN_rc5_cbc,"RC5-cbc");
d156 1
a156 1
void SSLeay_add_all_digests()
d163 2
a164 2
	EVP_add_alias(SN_md5,"ssl2-md5");
	EVP_add_alias(SN_md5,"ssl3-md5");
d172 1
a172 1
#ifndef NO_SHA1
d174 2
a175 1
	EVP_add_alias(SN_sha1,"ssl3-sha1");
d178 3
a180 3
	EVP_add_alias(SN_dsaWithSHA1,SN_dsaWithSHA1_2);
	EVP_add_alias(SN_dsaWithSHA1,"DSS1");
	EVP_add_alias(SN_dsaWithSHA1,"dss1");
d186 1
a186 1
#ifndef NO_RIPEMD160
d188 2
a189 2
	EVP_add_alias(SN_ripemd160,"ripemd");
	EVP_add_alias(SN_ripemd160,"rmd160");
d191 2
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 1
#include <openssl/evp.h>
d64 5
a68 1
#undef OpenSSL_add_all_algorithms
d70 1
a70 1
void OpenSSL_add_all_algorithms(void)
d72 81
a152 1
	OPENSSL_add_all_algorithms_noconf();
d155 2
a156 1
void OPENSSL_add_all_algorithms_noconf(void)
d158 32
a189 2
	OpenSSL_add_all_ciphers();
	OpenSSL_add_all_digests();
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@a62 1
#if 0
a68 1
#endif
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@a75 5
#ifndef OPENSSL_NO_ENGINE
# if defined(__OpenBSD__) || defined(__FreeBSD__)
	ENGINE_setup_bsd_cryptodev();
# endif
#endif
@


1.1.1.5
log
@import 0.9.7c
@
text
@a61 3
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@a76 6
	/*
	 * For the moment OPENSSL_cpuid_setup does something
	 * only on IA-32, but we reserve the option for all
	 * platforms...
	 */
	OPENSSL_cpuid_setup();
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d86 1
a86 1
# if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(HAVE_CRYPTODEV)
@


