head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2015.10.12.06.05.52;	author guenther;	state Exp;
branches;
next	1.18;
commitid	XtM3j06CHORsUpUU;

1.18
date	2014.10.18.17.20.40;	author jsing;	state Exp;
branches;
next	1.17;
commitid	8tb4v3IC8S2vzfHj;

1.17
date	2014.07.22.18.10.48;	author miod;	state Exp;
branches;
next	1.16;
commitid	iGNbrRmhpMOkiz6b;

1.16
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.14;
commitid	nzndm3zqPmFurSaK;

1.14
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.13;
commitid	id8dTrTMtnTn4fqt;

1.13
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.05.15.15.55.55;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.05.08.15.46.24;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.08.15.29.00;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.05.08.15.13.06;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.29.05.39.21;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.41;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.27;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.10;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.19
log
@unifdef EVP_CHECK_DES_KEY: Ben Kaduk noticed it has a syntax error; that
error was present in the original 2004 commit, so it hasn't been used in
over 11 years, thus exceeding our deprecation requirements by over a decade.
OpenSSL has chosen to *fix it*; we'll gladly watch it burn

ok jsing@@
@
text
@/* $OpenBSD: e_des3.c,v 1.18 2014/10/18 17:20:40 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_DES

#include <openssl/des.h>
#include <openssl/evp.h>
#include <openssl/objects.h>

#include "evp_locl.h"

static int des_ede_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc);

static int des_ede3_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc);

static int des3_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);

typedef struct {
    DES_key_schedule ks1;/* key schedule */
    DES_key_schedule ks2;/* key schedule (for ede) */
    DES_key_schedule ks3;/* key schedule (for ede3) */
} DES_EDE_KEY;

#define data(ctx) ((DES_EDE_KEY *)(ctx)->cipher_data)

/* Because of various casts and different args can't use IMPLEMENT_BLOCK_CIPHER */

static int
des_ede_ecb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl)
{
	BLOCK_CIPHER_ecb_loop()
	DES_ecb3_encrypt((const_DES_cblock *)(in + i), (DES_cblock *)(out + i),
	    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3, ctx->encrypt);
	return 1;
}

static int
des_ede_ofb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl)
{
	while (inl >= EVP_MAXCHUNK) {
		DES_ede3_ofb64_encrypt(in, out, (long)EVP_MAXCHUNK,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, &ctx->num);
		inl -= EVP_MAXCHUNK;
		in += EVP_MAXCHUNK;
		out += EVP_MAXCHUNK;
	}
	if (inl)
		DES_ede3_ofb64_encrypt(in, out, (long)inl,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, &ctx->num);

	return 1;
}

static int
des_ede_cbc_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl)
{
	while (inl >= EVP_MAXCHUNK) {
		DES_ede3_cbc_encrypt(in, out, (long)EVP_MAXCHUNK,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, ctx->encrypt);
		inl -= EVP_MAXCHUNK;
		in += EVP_MAXCHUNK;
		out += EVP_MAXCHUNK;
	}
	if (inl)
		DES_ede3_cbc_encrypt(in, out, (long)inl,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, ctx->encrypt);
	return 1;
}

static int
des_ede_cfb64_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl)
{
	while (inl >= EVP_MAXCHUNK) {
		DES_ede3_cfb64_encrypt(in, out, (long)EVP_MAXCHUNK,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, &ctx->num, ctx->encrypt);
		inl -= EVP_MAXCHUNK;
		in += EVP_MAXCHUNK;
		out += EVP_MAXCHUNK;
	}
	if (inl)
		DES_ede3_cfb64_encrypt(in, out, (long)inl,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, &ctx->num, ctx->encrypt);
	return 1;
}

/* Although we have a CFB-r implementation for 3-DES, it doesn't pack the right
   way, so wrap it here */
static int
des_ede3_cfb1_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl)
{
	size_t n;
	unsigned char c[1], d[1];

	for (n = 0; n < inl; ++n) {
		c[0] = (in[n/8]&(1 << (7 - n % 8))) ? 0x80 : 0;
		DES_ede3_cfb_encrypt(c, d, 1, 1,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, ctx->encrypt);
		out[n / 8] = (out[n / 8] & ~(0x80 >> (unsigned int)(n % 8))) |
		    ((d[0] & 0x80) >> (unsigned int)(n % 8));
	}

	return 1;
}

static int
des_ede3_cfb8_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t inl)
{
	while (inl >= EVP_MAXCHUNK) {
		DES_ede3_cfb_encrypt(in, out, 8, (long)EVP_MAXCHUNK,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, ctx->encrypt);
		inl -= EVP_MAXCHUNK;
		in += EVP_MAXCHUNK;
		out += EVP_MAXCHUNK;
	}
	if (inl)
		DES_ede3_cfb_encrypt(in, out, 8, (long)inl,
		    &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
		    (DES_cblock *)ctx->iv, ctx->encrypt);
	return 1;
}

BLOCK_CIPHER_defs(des_ede, DES_EDE_KEY, NID_des_ede, 8, 16, 8, 64,
    EVP_CIPH_RAND_KEY, des_ede_init_key, NULL,
    EVP_CIPHER_set_asn1_iv,
    EVP_CIPHER_get_asn1_iv,
    des3_ctrl)

#define des_ede3_cfb64_cipher des_ede_cfb64_cipher
#define des_ede3_ofb_cipher des_ede_ofb_cipher
#define des_ede3_cbc_cipher des_ede_cbc_cipher
#define des_ede3_ecb_cipher des_ede_ecb_cipher

BLOCK_CIPHER_defs(des_ede3, DES_EDE_KEY, NID_des_ede3, 8, 24, 8, 64,
    EVP_CIPH_RAND_KEY, des_ede3_init_key, NULL,
    EVP_CIPHER_set_asn1_iv,
    EVP_CIPHER_get_asn1_iv,
    des3_ctrl)

BLOCK_CIPHER_def_cfb(des_ede3, DES_EDE_KEY, NID_des_ede3, 24, 8, 1,
    EVP_CIPH_RAND_KEY, des_ede3_init_key, NULL,
    EVP_CIPHER_set_asn1_iv,
    EVP_CIPHER_get_asn1_iv,
    des3_ctrl)

BLOCK_CIPHER_def_cfb(des_ede3, DES_EDE_KEY, NID_des_ede3, 24, 8, 8,
    EVP_CIPH_RAND_KEY, des_ede3_init_key, NULL,
    EVP_CIPHER_set_asn1_iv,
    EVP_CIPHER_get_asn1_iv,
    des3_ctrl)

static int
des_ede_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc)
{
	DES_cblock *deskey = (DES_cblock *)key;

	DES_set_key_unchecked(&deskey[0], &data(ctx)->ks1);
	DES_set_key_unchecked(&deskey[1], &data(ctx)->ks2);
	memcpy(&data(ctx)->ks3, &data(ctx)->ks1,
	    sizeof(data(ctx)->ks1));
	return 1;
}

static int
des_ede3_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc)
{
	DES_cblock *deskey = (DES_cblock *)key;


	DES_set_key_unchecked(&deskey[0], &data(ctx)->ks1);
	DES_set_key_unchecked(&deskey[1], &data(ctx)->ks2);
	DES_set_key_unchecked(&deskey[2], &data(ctx)->ks3);
	return 1;
}

static int
des3_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
{
	DES_cblock *deskey = ptr;

	switch (type) {
	case EVP_CTRL_RAND_KEY:
		if (DES_random_key(deskey) == 0)
			return 0;
		if (c->key_len >= 16 && DES_random_key(deskey + 1) == 0)
			return 0;
		if (c->key_len >= 24 && DES_random_key(deskey + 2) == 0)
			return 0;
		return 1;

	default:
		return -1;
	}
}

const EVP_CIPHER *
EVP_des_ede(void)
{
	return &des_ede_ecb;
}

const EVP_CIPHER *
EVP_des_ede3(void)
{
	return &des_ede3_ecb;
}
#endif
@


1.18
log
@None of these need to include <openssl/rand.h>
@
text
@d1 1
a1 1
/* $OpenBSD: e_des3.c,v 1.17 2014/07/22 18:10:48 miod Exp $ */
a232 5
#ifdef EVP_CHECK_DES_KEY
	if (DES_set_key_checked(&deskey[0], &data(ctx)->ks1)
		!! DES_set_key_checked(&deskey[1], &data(ctx)->ks2))
		return 0;
#else
a234 1
#endif
a246 6
#ifdef EVP_CHECK_DES_KEY
	if (DES_set_key_checked(&deskey[0], &data(ctx)->ks1) ||
	    DES_set_key_checked(&deskey[1], &data(ctx)->ks2) ||
	    DES_set_key_checked(&deskey[2], &data(ctx)->ks3))
		return 0;
#else
a249 1
#endif
@


1.17
log
@Now that DES_random_key() can be trusted, use it to generate DES keys in the
EVP_CTRL_RAND_KEY method handlers, rather than generating a random odd key and
not even checking it against the weak keys list.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_des3.c,v 1.16 2014/07/11 08:44:48 jsing Exp $ */
a68 1
#include <openssl/rand.h>
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_des3.c,v 1.15 2014/07/10 22:45:57 jsing Exp $ */
d274 5
a278 1
		if (RAND_bytes(ptr, c->key_len) <= 0)
a279 5
		DES_set_odd_parity(deskey);
		if (c->key_len >= 16)
			DES_set_odd_parity(deskey + 1);
		if (c->key_len >= 24)
			DES_set_odd_parity(deskey + 2);
@


1.15
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: e_des3.c,v 1.14 2014/07/10 13:58:22 jsing Exp $ */
a63 1
#include "cryptlib.h"
d65 2
d69 2
a71 2
#include <openssl/des.h>
#include <openssl/rand.h>
@


1.14
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_des3.c,v 1.13 2014/06/12 15:49:29 deraadt Exp $ */
d61 2
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
a68 1

@


1.12
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/evp/e_des3.c */
@


1.11
log
@Remove KSSL debug code.

"fire bomb" tedu@@
@
text
@d254 1
a254 1
			return 0;
@


1.10
log
@Nuke OPENSSL_FIPS - having #ifdefs inside a #ifndef for the same thing
is amusing.

ok deraadt@@
@
text
@a120 11
#ifdef KSSL_DEBUG
	{
		int i;
		char *cp;
		printf("des_ede_cbc_cipher(ctx=%lx, buflen=%d)\n", ctx, ctx->buf_len);
		printf("\t iv= ");
		for (i = 0; i < 8; i++)
			printf("%02X",ctx->iv[i]);
		printf("\n");
	}
#endif    /* KSSL_DEBUG */
a248 10
#ifdef KSSL_DEBUG
	{
		int i;
		printf("des_ede3_init_key(ctx=%lx)\n", ctx);
		printf("\tKEY= ");
		for(i=0;i<24;i++) printf("%02X",key[i]); printf("\n");
			printf("\t IV= ");
		for(i=0;i<8;i++) printf("%02X",iv[i]); printf("\n");
	}
#endif	/* KSSL_DEBUG */
@


1.9
log
@KNF.
@
text
@a67 1
#ifndef OPENSSL_FIPS
a315 1
#endif
@


1.8
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d71 1
a71 1
			    const unsigned char *iv,int enc);
d74 1
a74 1
			     const unsigned char *iv,int enc);
d78 1
a78 2
typedef struct
    {
d82 1
a82 1
    } DES_EDE_KEY;
d88 3
a90 2
static int des_ede_ecb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
			      const unsigned char *in, size_t inl)
d93 2
a94 5
		DES_ecb3_encrypt((const_DES_cblock *)(in + i),
				 (DES_cblock *)(out + i),
				 &data(ctx)->ks1, &data(ctx)->ks2,
				 &data(ctx)->ks3,
				 ctx->encrypt);
d98 3
a100 2
static int des_ede_ofb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
			      const unsigned char *in, size_t inl)
d102 1
a102 2
	while (inl>=EVP_MAXCHUNK)
		{
d104 6
a109 6
			       &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
			       (DES_cblock *)ctx->iv, &ctx->num);
		inl-=EVP_MAXCHUNK;
		in +=EVP_MAXCHUNK;
		out+=EVP_MAXCHUNK;
		}
d112 2
a113 2
				&data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
                               (DES_cblock *)ctx->iv, &ctx->num);
d118 3
a120 2
static int des_ede_cbc_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
			      const unsigned char *in, size_t inl)
d124 7
a130 7
        int i;
        char *cp;
	printf("des_ede_cbc_cipher(ctx=%lx, buflen=%d)\n", ctx, ctx->buf_len);
	printf("\t iv= ");
        for(i=0;i<8;i++)
                printf("%02X",ctx->iv[i]);
	printf("\n");
d133 1
a133 2
	while (inl>=EVP_MAXCHUNK)
		{
d135 6
a140 6
			     &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
			     (DES_cblock *)ctx->iv, ctx->encrypt);
		inl-=EVP_MAXCHUNK;
		in +=EVP_MAXCHUNK;
		out+=EVP_MAXCHUNK;
		}
d143 2
a144 2
			     &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
                             (DES_cblock *)ctx->iv, ctx->encrypt);
d148 3
a150 2
static int des_ede_cfb64_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
			      const unsigned char *in, size_t inl)
d152 8
a159 9
	while (inl>=EVP_MAXCHUNK)
		{
		DES_ede3_cfb64_encrypt(in, out, (long)EVP_MAXCHUNK, 
			       &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
			       (DES_cblock *)ctx->iv, &ctx->num, ctx->encrypt);
		inl-=EVP_MAXCHUNK;
		in +=EVP_MAXCHUNK;
		out+=EVP_MAXCHUNK;
		}
d162 2
a163 2
			       &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
                               (DES_cblock *)ctx->iv, &ctx->num, ctx->encrypt);
d169 6
a174 5
static int des_ede3_cfb1_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
				const unsigned char *in, size_t inl)
    {
    size_t n;
    unsigned char c[1],d[1];
d176 7
a182 8
    for(n=0 ; n < inl ; ++n)
	{
	c[0]=(in[n/8]&(1 << (7-n%8))) ? 0x80 : 0;
	DES_ede3_cfb_encrypt(c,d,1,1,
			     &data(ctx)->ks1,&data(ctx)->ks2,&data(ctx)->ks3,
			     (DES_cblock *)ctx->iv,ctx->encrypt);
	out[n/8]=(out[n/8]&~(0x80 >> (unsigned int)(n%8))) |
		 ((d[0]&0x80) >> (unsigned int)(n%8));
d185 2
a186 2
    return 1;
    }
d188 11
a198 11
static int des_ede3_cfb8_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
				const unsigned char *in, size_t inl)
    {
    while (inl>=EVP_MAXCHUNK)
	{
	DES_ede3_cfb_encrypt(in,out,8,(long)EVP_MAXCHUNK,
			 &data(ctx)->ks1,&data(ctx)->ks2,&data(ctx)->ks3,
			 (DES_cblock *)ctx->iv,ctx->encrypt);
	inl-=EVP_MAXCHUNK;
	in +=EVP_MAXCHUNK;
	out+=EVP_MAXCHUNK;
d200 6
a205 6
    if (inl)
	DES_ede3_cfb_encrypt(in,out,8,(long)inl,
			&data(ctx)->ks1,&data(ctx)->ks2,&data(ctx)->ks3,
			(DES_cblock *)ctx->iv,ctx->encrypt);
    return 1;
    }
d208 4
a211 4
			EVP_CIPH_RAND_KEY, des_ede_init_key, NULL, 
			EVP_CIPHER_set_asn1_iv,
			EVP_CIPHER_get_asn1_iv,
			des3_ctrl)
d219 22
a240 16
			EVP_CIPH_RAND_KEY, des_ede3_init_key, NULL, 
			EVP_CIPHER_set_asn1_iv,
			EVP_CIPHER_get_asn1_iv,
			des3_ctrl)

BLOCK_CIPHER_def_cfb(des_ede3,DES_EDE_KEY,NID_des_ede3,24,8,1,
		     EVP_CIPH_RAND_KEY, des_ede3_init_key,NULL,
		     EVP_CIPHER_set_asn1_iv,
		     EVP_CIPHER_get_asn1_iv,
		     des3_ctrl)

BLOCK_CIPHER_def_cfb(des_ede3,DES_EDE_KEY,NID_des_ede3,24,8,8,
		     EVP_CIPH_RAND_KEY, des_ede3_init_key,NULL,
		     EVP_CIPHER_set_asn1_iv,
		     EVP_CIPHER_get_asn1_iv,
		     des3_ctrl)
a241 4
static int des_ede_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
			    const unsigned char *iv, int enc)
	{
	DES_cblock *deskey = (DES_cblock *)key;
d243 2
a244 2
	if (DES_set_key_checked(&deskey[0],&data(ctx)->ks1)
		!! DES_set_key_checked(&deskey[1],&data(ctx)->ks2))
d247 2
a248 2
	DES_set_key_unchecked(&deskey[0],&data(ctx)->ks1);
	DES_set_key_unchecked(&deskey[1],&data(ctx)->ks2);
d250 2
a251 2
	memcpy(&data(ctx)->ks3,&data(ctx)->ks1,
	       sizeof(data(ctx)->ks1));
d253 1
a253 1
	}
d255 4
a258 3
static int des_ede3_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
			     const unsigned char *iv, int enc)
	{
d260 1
d263 6
a268 6
        int i;
        printf("des_ede3_init_key(ctx=%lx)\n", ctx);
	printf("\tKEY= ");
        for(i=0;i<24;i++) printf("%02X",key[i]); printf("\n");
	printf("\t IV= ");
        for(i=0;i<8;i++) printf("%02X",iv[i]); printf("\n");
d273 4
a276 4
	if (DES_set_key_checked(&deskey[0],&data(ctx)->ks1)
		|| DES_set_key_checked(&deskey[1],&data(ctx)->ks2)
		|| DES_set_key_checked(&deskey[2],&data(ctx)->ks3))
		return 0;
d278 3
a280 3
	DES_set_key_unchecked(&deskey[0],&data(ctx)->ks1);
	DES_set_key_unchecked(&deskey[1],&data(ctx)->ks2);
	DES_set_key_unchecked(&deskey[2],&data(ctx)->ks3);
d283 1
a283 4
	}

static int des3_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
	{
d285 3
d290 1
a290 2
	switch(type)
		{
a302 1
		}
d304 1
d306 2
a307 1
const EVP_CIPHER *EVP_des_ede(void)
d312 2
a313 1
const EVP_CIPHER *EVP_des_ede3(void)
@


1.7
log
@resolve conflicts
@
text
@d104 1
a104 1
	if (inl>=EVP_MAXCHUNK)
d135 1
a135 1
	if (inl>=EVP_MAXCHUNK)
d154 1
a154 1
	if (inl>=EVP_MAXCHUNK)
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d68 2
d315 1
@


1.5
log
@resolve conflicts
@
text
@d88 1
a88 1
			      const unsigned char *in, unsigned int inl)
d100 1
a100 1
			      const unsigned char *in, unsigned int inl)
d102 3
a104 1
	DES_ede3_ofb64_encrypt(in, out, (long)inl,
d107 9
d120 1
a120 1
			      const unsigned char *in, unsigned int inl)
d125 2
a126 1
	printf("des_ede_cbc_cipher(ctx=%lx, buflen=%d)\n", (unsigned long)ctx, ctx->buf_len);
d133 3
a135 1
	DES_ede3_cbc_encrypt(in, out, (long)inl,
d138 8
d150 1
a150 1
			      const unsigned char *in, unsigned int inl)
d152 3
a154 1
	DES_ede3_cfb64_encrypt(in, out, (long)inl, 
d157 8
d171 1
a171 1
				const unsigned char *in, unsigned int inl)
d173 1
a173 1
    unsigned int n;
d182 2
a183 1
	out[n/8]=(out[n/8]&~(0x80 >> (n%8)))|((d[0]&0x80) >> (n%8));
d190 1
a190 1
				const unsigned char *in, unsigned int inl)
d192 3
a194 1
    DES_ede3_cfb_encrypt(in,out,8,inl,
d197 8
d209 3
a211 3
		EVP_CIPH_RAND_KEY|EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_DEFAULT_ASN1,
			des_ede_init_key,
			NULL, NULL, NULL,
d220 3
a222 3
		EVP_CIPH_RAND_KEY|EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_DEFAULT_ASN1,
			des_ede3_init_key,
			NULL, NULL, NULL,
d226 3
a228 3
		EVP_CIPH_RAND_KEY|EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_DEFAULT_ASN1,
		     des_ede3_init_key,
		     NULL, NULL, NULL,
d232 3
a234 3
		EVP_CIPH_RAND_KEY|EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_DEFAULT_ASN1,
		     des_ede3_init_key,
		     NULL, NULL, NULL,
d261 1
a261 1
        printf("des_ede3_init_key(ctx=%lx)\n", (unsigned long)ctx);
@


1.4
log
@resolve conflicts
@
text
@d114 1
a114 2
        char *cp;
	printf("des_ede_cbc_cipher(ctx=%lx, buflen=%d)\n", ctx, ctx->buf_len);
d166 3
a168 3
			EVP_CIPH_RAND_KEY, des_ede_init_key, NULL, 
			EVP_CIPHER_set_asn1_iv,
			EVP_CIPHER_get_asn1_iv,
d177 3
a179 3
			EVP_CIPH_RAND_KEY, des_ede3_init_key, NULL, 
			EVP_CIPHER_set_asn1_iv,
			EVP_CIPHER_get_asn1_iv,
d183 3
a185 3
		     EVP_CIPH_RAND_KEY, des_ede3_init_key,NULL,
		     EVP_CIPHER_set_asn1_iv,
		     EVP_CIPHER_get_asn1_iv,
d189 3
a191 3
		     EVP_CIPH_RAND_KEY, des_ede3_init_key,NULL,
		     EVP_CIPHER_set_asn1_iv,
		     EVP_CIPHER_get_asn1_iv,
d218 1
a218 1
        printf("des_ede3_init_key(ctx=%lx)\n", ctx);
@


1.3
log
@resolve conflicts
@
text
@d66 1
d74 2
d91 2
a92 1
		DES_ecb3_encrypt(in + i,out + i, 
d167 1
a167 1
			EVP_CIPH_FLAG_FIPS, des_ede_init_key, NULL, 
d170 1
a170 1
			NULL)
d178 1
a178 1
			EVP_CIPH_FLAG_FIPS, des_ede3_init_key, NULL, 
d181 1
a181 1
			NULL)
d184 1
a184 1
		     EVP_CIPH_FLAG_FIPS, des_ede3_init_key,NULL,
d186 2
a187 1
		     EVP_CIPHER_get_asn1_iv,NULL)
d190 1
a190 1
		     EVP_CIPH_FLAG_FIPS, des_ede3_init_key,NULL,
d192 2
a193 1
		     EVP_CIPHER_get_asn1_iv,NULL)
d199 5
a203 1

d206 1
d227 6
d236 3
d240 20
a259 1
	return 1;
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a58 1
#ifndef OPENSSL_NO_DES
d61 1
d88 1
a88 1
		DES_ecb3_encrypt((DES_cblock *)(in + i), (DES_cblock *)(out + i), 
d124 1
a124 1
static int des_ede_cfb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
d133 29
d163 1
a163 1
			0, des_ede_init_key, NULL, 
d168 1
a168 1
#define des_ede3_cfb_cipher des_ede_cfb_cipher
d174 1
a174 1
			0, des_ede3_init_key, NULL, 
d178 10
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_DES
d65 1
d73 9
d88 4
a91 3
		des_ecb3_encrypt((des_cblock *)(in + i), (des_cblock *)(out + i), 
			ctx->c.des_ede.ks1, ctx->c.des_ede.ks2, ctx->c.des_ede.ks3,
			 ctx->encrypt);
d98 3
a100 3
	des_ede3_ofb64_encrypt(in, out, (long)inl,
			ctx->c.des_ede.ks1, ctx->c.des_ede.ks2, ctx->c.des_ede.ks3,
								(des_cblock *)ctx->iv, &ctx->num);
d107 14
a120 3
	des_ede3_cbc_encrypt(in, out, (long)inl,
			ctx->c.des_ede.ks1, ctx->c.des_ede.ks2, ctx->c.des_ede.ks3,
 								(des_cblock *)ctx->iv, ctx->encrypt);
d127 3
a129 3
	des_ede3_cfb64_encrypt(in, out, (long)inl, 
			ctx->c.des_ede.ks1, ctx->c.des_ede.ks2, ctx->c.des_ede.ks3,
					(des_cblock *)ctx->iv, &ctx->num, ctx->encrypt);
d133 1
a133 3
#define NID_des_ede_ecb NID_des_ede

BLOCK_CIPHER_defs(des_ede, des_ede, NID_des_ede, 8, 16, 8,
a138 1
#define NID_des_ede3_ecb NID_des_ede3
d144 1
a144 1
BLOCK_CIPHER_defs(des_ede3, des_ede, NID_des_ede3, 8, 24, 8,
d153 1
a153 1
	des_cblock *deskey = (des_cblock *)key;
d155 4
a158 5
	des_set_key_unchecked(&deskey[0],ctx->c.des_ede.ks1);
	des_set_key_unchecked(&deskey[1],ctx->c.des_ede.ks2);
	memcpy( (char *)ctx->c.des_ede.ks3,
			(char *)ctx->c.des_ede.ks1,
			sizeof(ctx->c.des_ede.ks1));
d165 11
a175 1
	des_cblock *deskey = (des_cblock *)key;
d177 3
a179 3
	des_set_key_unchecked(&deskey[0],ctx->c.des_ede.ks1);
	des_set_key_unchecked(&deskey[1],ctx->c.des_ede.ks2);
	des_set_key_unchecked(&deskey[2],ctx->c.des_ede.ks3);
d184 1
a184 1
EVP_CIPHER *EVP_des_ede(void)
d189 1
a189 1
EVP_CIPHER *EVP_des_ede3(void)
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_DES
a64 1
#include <openssl/des.h>
a71 9
typedef struct
    {
    DES_key_schedule ks1;/* key schedule */
    DES_key_schedule ks2;/* key schedule (for ede) */
    DES_key_schedule ks3;/* key schedule (for ede3) */
    } DES_EDE_KEY;

#define data(ctx) ((DES_EDE_KEY *)(ctx)->cipher_data)

d78 3
a80 4
		DES_ecb3_encrypt((DES_cblock *)(in + i), (DES_cblock *)(out + i), 
				 &data(ctx)->ks1, &data(ctx)->ks2,
				 &data(ctx)->ks3,
				 ctx->encrypt);
d87 3
a89 3
	DES_ede3_ofb64_encrypt(in, out, (long)inl,
			       &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
			       (DES_cblock *)ctx->iv, &ctx->num);
d96 3
a98 14
#ifdef KSSL_DEBUG
	{
        int i;
        char *cp;
	printf("des_ede_cbc_cipher(ctx=%lx, buflen=%d)\n", ctx, ctx->buf_len);
	printf("\t iv= ");
        for(i=0;i<8;i++)
                printf("%02X",ctx->iv[i]);
	printf("\n");
	}
#endif    /* KSSL_DEBUG */
	DES_ede3_cbc_encrypt(in, out, (long)inl,
			     &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
			     (DES_cblock *)ctx->iv, ctx->encrypt);
d105 3
a107 3
	DES_ede3_cfb64_encrypt(in, out, (long)inl, 
			       &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
			       (DES_cblock *)ctx->iv, &ctx->num, ctx->encrypt);
d111 3
a113 1
BLOCK_CIPHER_defs(des_ede, DES_EDE_KEY, NID_des_ede, 8, 16, 8, 64,
d119 1
d125 1
a125 1
BLOCK_CIPHER_defs(des_ede3, DES_EDE_KEY, NID_des_ede3, 8, 24, 8, 64,
d134 1
a134 1
	DES_cblock *deskey = (DES_cblock *)key;
d136 5
a140 4
	DES_set_key_unchecked(&deskey[0],&data(ctx)->ks1);
	DES_set_key_unchecked(&deskey[1],&data(ctx)->ks2);
	memcpy(&data(ctx)->ks3,&data(ctx)->ks1,
	       sizeof(data(ctx)->ks1));
d147 1
a147 11
	DES_cblock *deskey = (DES_cblock *)key;
#ifdef KSSL_DEBUG
	{
        int i;
        printf("des_ede3_init_key(ctx=%lx)\n", ctx);
	printf("\tKEY= ");
        for(i=0;i<24;i++) printf("%02X",key[i]); printf("\n");
	printf("\t IV= ");
        for(i=0;i<8;i++) printf("%02X",iv[i]); printf("\n");
	}
#endif	/* KSSL_DEBUG */
d149 3
a151 3
	DES_set_key_unchecked(&deskey[0],&data(ctx)->ks1);
	DES_set_key_unchecked(&deskey[1],&data(ctx)->ks2);
	DES_set_key_unchecked(&deskey[2],&data(ctx)->ks3);
d156 1
a156 1
const EVP_CIPHER *EVP_des_ede(void)
d161 1
a161 1
const EVP_CIPHER *EVP_des_ede3(void)
@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d59 1
a61 1
#ifndef OPENSSL_NO_DES
d88 1
a88 1
		DES_ecb3_encrypt(in + i,out + i, 
d124 1
a124 1
static int des_ede_cfb64_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
a132 29
/* Although we have a CFB-r implementation for 3-DES, it doesn't pack the right
   way, so wrap it here */
static int des_ede3_cfb1_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
				const unsigned char *in, unsigned int inl)
    {
    unsigned int n;
    unsigned char c[1],d[1];

    for(n=0 ; n < inl ; ++n)
	{
	c[0]=(in[n/8]&(1 << (7-n%8))) ? 0x80 : 0;
	DES_ede3_cfb_encrypt(c,d,1,1,
			     &data(ctx)->ks1,&data(ctx)->ks2,&data(ctx)->ks3,
			     (DES_cblock *)ctx->iv,ctx->encrypt);
	out[n/8]=(out[n/8]&~(0x80 >> (n%8)))|((d[0]&0x80) >> (n%8));
	}

    return 1;
    }

static int des_ede3_cfb8_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
				const unsigned char *in, unsigned int inl)
    {
    DES_ede3_cfb_encrypt(in,out,8,inl,
			 &data(ctx)->ks1,&data(ctx)->ks2,&data(ctx)->ks3,
			 (DES_cblock *)ctx->iv,ctx->encrypt);
    return 1;
    }

d134 1
a134 1
			EVP_CIPH_FLAG_FIPS, des_ede_init_key, NULL, 
d139 1
a139 1
#define des_ede3_cfb64_cipher des_ede_cfb64_cipher
d145 1
a145 1
			EVP_CIPH_FLAG_FIPS, des_ede3_init_key, NULL, 
a148 10

BLOCK_CIPHER_def_cfb(des_ede3,DES_EDE_KEY,NID_des_ede3,24,8,1,
		     EVP_CIPH_FLAG_FIPS, des_ede3_init_key,NULL,
		     EVP_CIPHER_set_asn1_iv,
		     EVP_CIPHER_get_asn1_iv,NULL)

BLOCK_CIPHER_def_cfb(des_ede3,DES_EDE_KEY,NID_des_ede3,24,8,8,
		     EVP_CIPH_FLAG_FIPS, des_ede3_init_key,NULL,
		     EVP_CIPHER_set_asn1_iv,
		     EVP_CIPHER_get_asn1_iv,NULL)
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a65 1
#include <openssl/rand.h>
a72 2
static int des3_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);

d88 1
a88 2
		DES_ecb3_encrypt((const_DES_cblock *)(in + i),
				 (DES_cblock *)(out + i),
d163 1
a163 1
			EVP_CIPH_RAND_KEY, des_ede_init_key, NULL, 
d166 1
a166 1
			des3_ctrl)
d174 1
a174 1
			EVP_CIPH_RAND_KEY, des_ede3_init_key, NULL, 
d177 1
a177 1
			des3_ctrl)
d180 1
a180 1
		     EVP_CIPH_RAND_KEY, des_ede3_init_key,NULL,
d182 1
a182 2
		     EVP_CIPHER_get_asn1_iv,
		     des3_ctrl)
d185 1
a185 1
		     EVP_CIPH_RAND_KEY, des_ede3_init_key,NULL,
d187 1
a187 2
		     EVP_CIPHER_get_asn1_iv,
		     des3_ctrl)
d193 1
a193 5
#ifdef EVP_CHECK_DES_KEY
	if (DES_set_key_checked(&deskey[0],&data(ctx)->ks1)
		!! DES_set_key_checked(&deskey[1],&data(ctx)->ks2))
		return 0;
#else
a195 1
#endif
a215 6
#ifdef EVP_CHECK_DES_KEY
	if (DES_set_key_checked(&deskey[0],&data(ctx)->ks1)
		|| DES_set_key_checked(&deskey[1],&data(ctx)->ks2)
		|| DES_set_key_checked(&deskey[2],&data(ctx)->ks3))
		return 0;
#else
d219 1
a219 1
#endif
a220 22
	}

static int des3_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
	{

	DES_cblock *deskey = ptr;

	switch(type)
		{
	case EVP_CTRL_RAND_KEY:
		if (RAND_bytes(ptr, c->key_len) <= 0)
			return 0;
		DES_set_odd_parity(deskey);
		if (c->key_len >= 16)
			DES_set_odd_parity(deskey + 1);
		if (c->key_len >= 24)
			DES_set_odd_parity(deskey + 2);
		return 1;

	default:
		return -1;
		}
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d114 2
a115 1
	printf("des_ede_cbc_cipher(ctx=%lx, buflen=%d)\n", (unsigned long)ctx, ctx->buf_len);
d167 3
a169 3
		EVP_CIPH_RAND_KEY|EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_DEFAULT_ASN1,
			des_ede_init_key,
			NULL, NULL, NULL,
d178 3
a180 3
		EVP_CIPH_RAND_KEY|EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_DEFAULT_ASN1,
			des_ede3_init_key,
			NULL, NULL, NULL,
d184 3
a186 3
		EVP_CIPH_RAND_KEY|EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_DEFAULT_ASN1,
		     des_ede3_init_key,
		     NULL, NULL, NULL,
d190 3
a192 3
		EVP_CIPH_RAND_KEY|EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_DEFAULT_ASN1,
		     des_ede3_init_key,
		     NULL, NULL, NULL,
d219 1
a219 1
        printf("des_ede3_init_key(ctx=%lx)\n", (unsigned long)ctx);
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d88 1
a88 1
			      const unsigned char *in, size_t inl)
d100 1
a100 1
			      const unsigned char *in, size_t inl)
d102 1
a102 3
	if (inl>=EVP_MAXCHUNK)
		{
		DES_ede3_ofb64_encrypt(in, out, (long)EVP_MAXCHUNK,
a104 9
		inl-=EVP_MAXCHUNK;
		in +=EVP_MAXCHUNK;
		out+=EVP_MAXCHUNK;
		}
	if (inl)
		DES_ede3_ofb64_encrypt(in, out, (long)inl,
				&data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
                               (DES_cblock *)ctx->iv, &ctx->num);

d109 1
a109 1
			      const unsigned char *in, size_t inl)
d114 1
a114 2
        char *cp;
	printf("des_ede_cbc_cipher(ctx=%lx, buflen=%d)\n", ctx, ctx->buf_len);
d121 1
a121 3
	if (inl>=EVP_MAXCHUNK)
		{
		DES_ede3_cbc_encrypt(in, out, (long)EVP_MAXCHUNK,
a123 8
		inl-=EVP_MAXCHUNK;
		in +=EVP_MAXCHUNK;
		out+=EVP_MAXCHUNK;
		}
	if (inl)
		DES_ede3_cbc_encrypt(in, out, (long)inl,
			     &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
                             (DES_cblock *)ctx->iv, ctx->encrypt);
d128 1
a128 1
			      const unsigned char *in, size_t inl)
d130 1
a130 3
	if (inl>=EVP_MAXCHUNK)
		{
		DES_ede3_cfb64_encrypt(in, out, (long)EVP_MAXCHUNK, 
a132 8
		inl-=EVP_MAXCHUNK;
		in +=EVP_MAXCHUNK;
		out+=EVP_MAXCHUNK;
		}
	if (inl)
		DES_ede3_cfb64_encrypt(in, out, (long)inl,
			       &data(ctx)->ks1, &data(ctx)->ks2, &data(ctx)->ks3,
                               (DES_cblock *)ctx->iv, &ctx->num, ctx->encrypt);
d139 1
a139 1
				const unsigned char *in, size_t inl)
d141 1
a141 1
    size_t n;
d150 1
a150 2
	out[n/8]=(out[n/8]&~(0x80 >> (unsigned int)(n%8))) |
		 ((d[0]&0x80) >> (unsigned int)(n%8));
d157 1
a157 1
				const unsigned char *in, size_t inl)
d159 1
a159 3
    while (inl>=EVP_MAXCHUNK)
	{
	DES_ede3_cfb_encrypt(in,out,8,(long)EVP_MAXCHUNK,
a161 8
	inl-=EVP_MAXCHUNK;
	in +=EVP_MAXCHUNK;
	out+=EVP_MAXCHUNK;
	}
    if (inl)
	DES_ede3_cfb_encrypt(in,out,8,(long)inl,
			&data(ctx)->ks1,&data(ctx)->ks2,&data(ctx)->ks3,
			(DES_cblock *)ctx->iv,ctx->encrypt);
d166 3
a168 3
			EVP_CIPH_RAND_KEY, des_ede_init_key, NULL, 
			EVP_CIPHER_set_asn1_iv,
			EVP_CIPHER_get_asn1_iv,
d177 3
a179 3
			EVP_CIPH_RAND_KEY, des_ede3_init_key, NULL, 
			EVP_CIPHER_set_asn1_iv,
			EVP_CIPHER_get_asn1_iv,
d183 3
a185 3
		     EVP_CIPH_RAND_KEY, des_ede3_init_key,NULL,
		     EVP_CIPHER_set_asn1_iv,
		     EVP_CIPHER_get_asn1_iv,
d189 3
a191 3
		     EVP_CIPH_RAND_KEY, des_ede3_init_key,NULL,
		     EVP_CIPHER_set_asn1_iv,
		     EVP_CIPHER_get_asn1_iv,
d218 1
a218 1
        printf("des_ede3_init_key(ctx=%lx)\n", ctx);
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@a67 2
#ifndef OPENSSL_FIPS

a312 1
#endif
@


1.1.1.7
log
@Import OpenSSL 1.0.1g
@
text
@d104 1
a104 1
	while (inl>=EVP_MAXCHUNK)
d135 1
a135 1
	while (inl>=EVP_MAXCHUNK)
d154 1
a154 1
	while (inl>=EVP_MAXCHUNK)
@


