head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17;
locks; strict;
comment	@ * @;


1.17
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.15;
commitid	nzndm3zqPmFurSaK;

1.15
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.06.10.14.14.07;	author jsing;	state Exp;
branches;
next	1.13;
commitid	AsxCaxjMuq4pIb1Q;

1.13
date	2014.05.08.16.05.38;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.05.08.16.01.06;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.15.20.06.10;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.29.05.39.22;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.15;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.29;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.11;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.33;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: m_sha1.c,v 1.16 2014/07/10 22:45:57 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_SHA

#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/sha.h>

#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif

static int
init(EVP_MD_CTX *ctx)
{
	return SHA1_Init(ctx->md_data);
}

static int
update(EVP_MD_CTX *ctx, const void *data, size_t count)
{
	return SHA1_Update(ctx->md_data, data, count);
}

static int
final(EVP_MD_CTX *ctx, unsigned char *md)
{
	return SHA1_Final(md, ctx->md_data);
}

static const EVP_MD sha1_md = {
	.type = NID_sha1,
	.pkey_type = NID_sha1WithRSAEncryption,
	.md_size = SHA_DIGEST_LENGTH,
	.flags = EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	.init = init,
	.update = update,
	.final = final,
	.copy = NULL,
	.cleanup = NULL,
#ifndef OPENSSL_NO_RSA
	.sign = (evp_sign_method *)RSA_sign,
	.verify = (evp_verify_method *)RSA_verify,
	.required_pkey_type = {
		EVP_PKEY_RSA, EVP_PKEY_RSA2, 0, 0,
	},
#endif
	.block_size = SHA_CBLOCK,
	.ctx_size = sizeof(EVP_MD *) + sizeof(SHA_CTX),
};

const EVP_MD *
EVP_sha1(void)
{
	return (&sha1_md);
}
#endif

#ifndef OPENSSL_NO_SHA256
static int
init224(EVP_MD_CTX *ctx)
{
	return SHA224_Init(ctx->md_data);
}

static int
init256(EVP_MD_CTX *ctx)
{
	return SHA256_Init(ctx->md_data);
}
/*
 * Even though there're separate SHA224_[Update|Final], we call
 * SHA256 functions even in SHA224 context. This is what happens
 * there anyway, so we can spare few CPU cycles:-)
 */
static int
update256(EVP_MD_CTX *ctx, const void *data, size_t count)
{
	return SHA256_Update(ctx->md_data, data, count);
}

static int
final256(EVP_MD_CTX *ctx, unsigned char *md)
{
	return SHA256_Final(md, ctx->md_data);
}

static const EVP_MD sha224_md = {
	.type = NID_sha224,
	.pkey_type = NID_sha224WithRSAEncryption,
	.md_size = SHA224_DIGEST_LENGTH,
	.flags = EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	.init = init224,
	.update = update256,
	.final = final256,
	.copy = NULL,
	.cleanup = NULL,
#ifndef OPENSSL_NO_RSA
	.sign = (evp_sign_method *)RSA_sign,
	.verify = (evp_verify_method *)RSA_verify,
	.required_pkey_type = {
		EVP_PKEY_RSA, EVP_PKEY_RSA2, 0, 0,
	},
#endif
	.block_size = SHA256_CBLOCK,
	.ctx_size = sizeof(EVP_MD *) + sizeof(SHA256_CTX),
};

const EVP_MD *
EVP_sha224(void)
{
	return (&sha224_md);
}

static const EVP_MD sha256_md = {
	.type = NID_sha256,
	.pkey_type = NID_sha256WithRSAEncryption,
	.md_size = SHA256_DIGEST_LENGTH,
	.flags = EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	.init = init256,
	.update = update256,
	.final = final256,
	.copy = NULL,
	.cleanup = NULL,
#ifndef OPENSSL_NO_RSA
	.sign = (evp_sign_method *)RSA_sign,
	.verify = (evp_verify_method *)RSA_verify,
	.required_pkey_type = {
		EVP_PKEY_RSA, EVP_PKEY_RSA2, 0, 0,
	},
#endif
	.block_size = SHA256_CBLOCK,
	.ctx_size = sizeof(EVP_MD *) + sizeof(SHA256_CTX),
};

const EVP_MD *
EVP_sha256(void)
{
	return (&sha256_md);
}
#endif	/* ifndef OPENSSL_NO_SHA256 */

#ifndef OPENSSL_NO_SHA512
static int
init384(EVP_MD_CTX *ctx)
{
	return SHA384_Init(ctx->md_data);
}

static int
init512(EVP_MD_CTX *ctx)
{
	return SHA512_Init(ctx->md_data);
}
/* See comment in SHA224/256 section */
static int
update512(EVP_MD_CTX *ctx, const void *data, size_t count)
{
	return SHA512_Update(ctx->md_data, data, count);
}

static int
final512(EVP_MD_CTX *ctx, unsigned char *md)
{
	return SHA512_Final(md, ctx->md_data);
}

static const EVP_MD sha384_md = {
	.type = NID_sha384,
	.pkey_type = NID_sha384WithRSAEncryption,
	.md_size = SHA384_DIGEST_LENGTH,
	.flags = EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	.init = init384,
	.update = update512,
	.final = final512,
	.copy = NULL,
	.cleanup = NULL,
#ifndef OPENSSL_NO_RSA
	.sign = (evp_sign_method *)RSA_sign,
	.verify = (evp_verify_method *)RSA_verify,
	.required_pkey_type = {
		EVP_PKEY_RSA, EVP_PKEY_RSA2, 0, 0,
	},
#endif
	.block_size = SHA512_CBLOCK,
	.ctx_size = sizeof(EVP_MD *) + sizeof(SHA512_CTX),
};

const EVP_MD *
EVP_sha384(void)
{
	return (&sha384_md);
}

static const EVP_MD sha512_md = {
	.type = NID_sha512,
	.pkey_type = NID_sha512WithRSAEncryption,
	.md_size = SHA512_DIGEST_LENGTH,
	.flags = EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	.init = init512,
	.update = update512,
	.final = final512,
	.copy = NULL,
	.cleanup = NULL,
#ifndef OPENSSL_NO_RSA
	.sign = (evp_sign_method *)RSA_sign,
	.verify = (evp_verify_method *)RSA_verify,
	.required_pkey_type = {
		EVP_PKEY_RSA, EVP_PKEY_RSA2, 0, 0,
	},
#endif
	.block_size = SHA512_CBLOCK,
	.ctx_size = sizeof(EVP_MD *) + sizeof(SHA512_CTX),
};

const EVP_MD *
EVP_sha512(void)
{
	return (&sha512_md);
}
#endif	/* ifndef OPENSSL_NO_SHA512 */
@


1.16
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: m_sha1.c,v 1.15 2014/06/12 15:49:29 deraadt Exp $ */
a62 2
#include "cryptlib.h"

d68 1
a71 1

@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.14
log
@Use C99 initialisers for EVP_MD structs, for clarity, grepability and to
protect from future field reordering/removal.

No difference in generated assembly.
@
text
@d1 1
a1 1
/* crypto/evp/m_sha1.c */
@


1.13
log
@More KNF.
@
text
@d91 18
a108 12
	NID_sha1,
	NID_sha1WithRSAEncryption,
	SHA_DIGEST_LENGTH,
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	init,
	update,
	final,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA_CBLOCK,
	sizeof(EVP_MD *) + sizeof(SHA_CTX),
d148 18
a165 12
	NID_sha224,
	NID_sha224WithRSAEncryption,
	SHA224_DIGEST_LENGTH,
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	init224,
	update256,
	final256,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA256_CBLOCK,
	sizeof(EVP_MD *) + sizeof(SHA256_CTX),
d175 18
a192 12
	NID_sha256,
	NID_sha256WithRSAEncryption,
	SHA256_DIGEST_LENGTH,
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	init256,
	update256,
	final256,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA256_CBLOCK,
	sizeof(EVP_MD *) + sizeof(SHA256_CTX),
d228 18
a245 12
	NID_sha384,
	NID_sha384WithRSAEncryption,
	SHA384_DIGEST_LENGTH,
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	init384,
	update512,
	final512,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA512_CBLOCK,
	sizeof(EVP_MD *) + sizeof(SHA512_CTX),
d255 18
a272 12
	NID_sha512,
	NID_sha512WithRSAEncryption,
	SHA512_DIGEST_LENGTH,
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
	init512,
	update512,
	final512,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA512_CBLOCK,
	sizeof(EVP_MD *) + sizeof(SHA512_CTX),
@


1.12
log
@KNF.
@
text
@d72 2
a73 1
static int init(EVP_MD_CTX *ctx)
d78 2
a79 1
static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
d84 2
a85 1
static int final(EVP_MD_CTX *ctx, unsigned char *md)
d113 2
a114 1
static int init224(EVP_MD_CTX *ctx)
d118 3
a120 1
static int init256(EVP_MD_CTX *ctx)
d129 2
a130 1
static int update256(EVP_MD_CTX *ctx, const void *data, size_t count)
d134 3
a136 1
static int final256(EVP_MD_CTX *ctx, unsigned char *md)
d156 2
a157 1
const EVP_MD *EVP_sha224(void)
d177 2
a178 1
const EVP_MD *EVP_sha256(void)
d185 2
a186 1
static int init384(EVP_MD_CTX *ctx)
d190 3
a192 1
static int init512(EVP_MD_CTX *ctx)
d197 2
a198 1
static int update512(EVP_MD_CTX *ctx, const void *data, size_t count)
d202 3
a204 1
static int final512(EVP_MD_CTX *ctx, unsigned char *md)
d224 2
a225 1
const EVP_MD *EVP_sha384(void)
d245 2
a246 1
const EVP_MD *EVP_sha512(void)
@


1.11
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d73 13
a85 1
	{ return SHA1_Init(ctx->md_data); }
d87 1
a87 8
static int update(EVP_MD_CTX *ctx,const void *data,size_t count)
	{ return SHA1_Update(ctx->md_data,data,count); }

static int final(EVP_MD_CTX *ctx,unsigned char *md)
	{ return SHA1_Final(md,ctx->md_data); }

static const EVP_MD sha1_md=
	{
d99 2
a100 2
	sizeof(EVP_MD *)+sizeof(SHA_CTX),
	};
d102 5
a106 4
const EVP_MD *EVP_sha1(void)
	{
	return(&sha1_md);
	}
d111 3
a113 1
	{ return SHA224_Init(ctx->md_data); }
d115 3
a117 1
	{ return SHA256_Init(ctx->md_data); }
d123 8
a130 4
static int update256(EVP_MD_CTX *ctx,const void *data,size_t count)
	{ return SHA256_Update(ctx->md_data,data,count); }
static int final256(EVP_MD_CTX *ctx,unsigned char *md)
	{ return SHA256_Final(md,ctx->md_data); }
d132 1
a132 2
static const EVP_MD sha224_md=
	{
d144 2
a145 2
	sizeof(EVP_MD *)+sizeof(SHA256_CTX),
	};
d148 3
a150 1
	{ return(&sha224_md); }
d152 1
a152 2
static const EVP_MD sha256_md=
	{
d164 2
a165 2
	sizeof(EVP_MD *)+sizeof(SHA256_CTX),
	};
d168 3
a170 1
	{ return(&sha256_md); }
d175 3
a177 1
	{ return SHA384_Init(ctx->md_data); }
d179 3
a181 1
	{ return SHA512_Init(ctx->md_data); }
d183 8
a190 4
static int update512(EVP_MD_CTX *ctx,const void *data,size_t count)
	{ return SHA512_Update(ctx->md_data,data,count); }
static int final512(EVP_MD_CTX *ctx,unsigned char *md)
	{ return SHA512_Final(md,ctx->md_data); }
d192 1
a192 2
static const EVP_MD sha384_md=
	{
d204 2
a205 2
	sizeof(EVP_MD *)+sizeof(SHA512_CTX),
	};
d208 3
a210 1
	{ return(&sha384_md); }
d212 1
a212 2
static const EVP_MD sha512_md=
	{
d224 2
a225 2
	sizeof(EVP_MD *)+sizeof(SHA512_CTX),
	};
d228 3
a230 1
	{ return(&sha512_md); }
@


1.10
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a61 2
#ifndef OPENSSL_FIPS

a205 2

#endif
@


1.9
log
@resolve conflicts
@
text
@d68 1
a68 1
#include <openssl/x509.h>
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d62 2
d73 1
d208 2
@


1.7
log
@resolve conflicts
@
text
@a70 2
#ifndef OPENSSL_FIPS

d85 1
a85 1
	0,
d100 1
d122 1
a122 1
	0,
d141 1
a141 1
	0,
d172 1
a172 1
	0,
d191 1
a191 1
	0,
a204 4

#endif

#endif
@


1.6
log
@resolve conflicts
@
text
@d71 2
a101 1
#endif
d206 4
@


1.5
log
@resolve conflicts
@
text
@a58 1
#ifndef OPENSSL_NO_SHA
d61 3
d67 3
d74 1
a74 2
static int update(EVP_MD_CTX *ctx,const void *data,unsigned long count)
#ifndef OPENSSL_FIPS
a75 6
#else
	{
	OPENSSL_assert(sizeof(count)<=sizeof(size_t));
	return SHA1_Update(ctx->md_data,data,count);
	}
#endif
d85 1
a85 1
	EVP_MD_FLAG_FIPS,
a101 1
#ifdef OPENSSL_FIPS
d112 2
a113 5
static int update256(EVP_MD_CTX *ctx,const void *data,unsigned long count)
	{
	OPENSSL_assert(sizeof(count)<=sizeof(size_t));
	return SHA256_Update(ctx->md_data,data,count);
	}
d122 1
a122 1
	EVP_MD_FLAG_FIPS,
d141 1
a141 1
	EVP_MD_FLAG_FIPS,
d154 1
a154 1
#endif /* ifndef OPENSSL_NO_SHA256 */
d162 2
a163 5
static int update512(EVP_MD_CTX *ctx,const void *data,unsigned long count)
	{
	OPENSSL_assert(sizeof(count)<=sizeof(size_t));
	return SHA512_Update(ctx->md_data,data,count);
	}
d172 1
a172 1
	EVP_MD_FLAG_FIPS,
d191 1
a191 1
	EVP_MD_FLAG_FIPS,
d204 1
a204 2
#endif /* ifndef OPENSSL_NO_SHA512 */
#endif /* ifdef OPENSSL_FIPS */
@


1.4
log
@resolve conflicts
@
text
@d70 1
d72 6
d103 112
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d80 1
a80 1
	0,
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d59 1
a59 1
#ifndef NO_SHA
d66 10
a75 1
static EVP_MD sha1_md=
d80 6
a85 3
	SHA1_Init,
	SHA1_Update,
	SHA1_Final,
d91 1
a91 1
EVP_MD *EVP_sha1(void)
@


1.1
log
@Initial revision
@
text
@d59 1
d62 3
a64 3
#include "evp.h"
#include "objects.h"
#include "x509.h"
d79 1
a79 1
EVP_MD *EVP_sha1()
d83 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 1
#ifndef OPENSSL_NO_SHA
d61 3
a63 3
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
d65 1
a65 10
static int init(EVP_MD_CTX *ctx)
	{ return SHA1_Init(ctx->md_data); }

static int update(EVP_MD_CTX *ctx,const void *data,unsigned long count)
	{ return SHA1_Update(ctx->md_data,data,count); }

static int final(EVP_MD_CTX *ctx,unsigned char *md)
	{ return SHA1_Final(md,ctx->md_data); }

static const EVP_MD sha1_md=
d70 3
a72 6
	0,
	init,
	update,
	final,
	NULL,
	NULL,
d78 1
a78 1
const EVP_MD *EVP_sha1(void)
a81 1
#endif
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d80 1
a80 1
	EVP_MD_FLAG_FIPS,
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@a69 1
#ifndef OPENSSL_FIPS
a70 6
#else
	{
	OPENSSL_assert(sizeof(count)<=sizeof(size_t));
	return SHA1_Update(ctx->md_data,data,count);
	}
#endif
a95 112

#ifdef OPENSSL_FIPS
#ifndef OPENSSL_NO_SHA256
static int init224(EVP_MD_CTX *ctx)
	{ return SHA224_Init(ctx->md_data); }
static int init256(EVP_MD_CTX *ctx)
	{ return SHA256_Init(ctx->md_data); }
/*
 * Even though there're separate SHA224_[Update|Final], we call
 * SHA256 functions even in SHA224 context. This is what happens
 * there anyway, so we can spare few CPU cycles:-)
 */
static int update256(EVP_MD_CTX *ctx,const void *data,unsigned long count)
	{
	OPENSSL_assert(sizeof(count)<=sizeof(size_t));
	return SHA256_Update(ctx->md_data,data,count);
	}
static int final256(EVP_MD_CTX *ctx,unsigned char *md)
	{ return SHA256_Final(md,ctx->md_data); }

static const EVP_MD sha224_md=
	{
	NID_sha224,
	NID_sha224WithRSAEncryption,
	SHA224_DIGEST_LENGTH,
	EVP_MD_FLAG_FIPS,
	init224,
	update256,
	final256,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA256_CBLOCK,
	sizeof(EVP_MD *)+sizeof(SHA256_CTX),
	};

const EVP_MD *EVP_sha224(void)
	{ return(&sha224_md); }

static const EVP_MD sha256_md=
	{
	NID_sha256,
	NID_sha256WithRSAEncryption,
	SHA256_DIGEST_LENGTH,
	EVP_MD_FLAG_FIPS,
	init256,
	update256,
	final256,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA256_CBLOCK,
	sizeof(EVP_MD *)+sizeof(SHA256_CTX),
	};

const EVP_MD *EVP_sha256(void)
	{ return(&sha256_md); }
#endif /* ifndef OPENSSL_NO_SHA256 */

#ifndef OPENSSL_NO_SHA512
static int init384(EVP_MD_CTX *ctx)
	{ return SHA384_Init(ctx->md_data); }
static int init512(EVP_MD_CTX *ctx)
	{ return SHA512_Init(ctx->md_data); }
/* See comment in SHA224/256 section */
static int update512(EVP_MD_CTX *ctx,const void *data,unsigned long count)
	{
	OPENSSL_assert(sizeof(count)<=sizeof(size_t));
	return SHA512_Update(ctx->md_data,data,count);
	}
static int final512(EVP_MD_CTX *ctx,unsigned char *md)
	{ return SHA512_Final(md,ctx->md_data); }

static const EVP_MD sha384_md=
	{
	NID_sha384,
	NID_sha384WithRSAEncryption,
	SHA384_DIGEST_LENGTH,
	EVP_MD_FLAG_FIPS,
	init384,
	update512,
	final512,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA512_CBLOCK,
	sizeof(EVP_MD *)+sizeof(SHA512_CTX),
	};

const EVP_MD *EVP_sha384(void)
	{ return(&sha384_md); }

static const EVP_MD sha512_md=
	{
	NID_sha512,
	NID_sha512WithRSAEncryption,
	SHA512_DIGEST_LENGTH,
	EVP_MD_FLAG_FIPS,
	init512,
	update512,
	final512,
	NULL,
	NULL,
	EVP_PKEY_RSA_method,
	SHA512_CBLOCK,
	sizeof(EVP_MD *)+sizeof(SHA512_CTX),
	};

const EVP_MD *EVP_sha512(void)
	{ return(&sha512_md); }
#endif /* ifndef OPENSSL_NO_SHA512 */
#endif /* ifdef OPENSSL_FIPS */
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d59 1
a61 3

#ifndef OPENSSL_NO_SHA

a64 3
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
d69 2
a70 1
static int update(EVP_MD_CTX *ctx,const void *data,size_t count)
d72 6
d87 1
a87 1
	0,
d104 1
d115 5
a119 2
static int update256(EVP_MD_CTX *ctx,const void *data,size_t count)
	{ return SHA256_Update(ctx->md_data,data,count); }
d128 1
a128 1
	0,
d147 1
a147 1
	0,
d160 1
a160 1
#endif	/* ifndef OPENSSL_NO_SHA256 */
d168 5
a172 2
static int update512(EVP_MD_CTX *ctx,const void *data,size_t count)
	{ return SHA512_Update(ctx->md_data,data,count); }
d181 1
a181 1
	0,
d200 1
a200 1
	0,
d213 2
a214 1
#endif	/* ifndef OPENSSL_NO_SHA512 */
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a70 2
#ifndef OPENSSL_FIPS

d100 1
a204 4

#endif

#endif
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d71 2
d87 1
a87 1
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
a101 1
#endif
d123 1
a123 1
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
d142 1
a142 1
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
d173 1
a173 1
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
d192 1
a192 1
	EVP_MD_FLAG_PKEY_METHOD_SIGNATURE|EVP_MD_FLAG_DIGALGID_ABSENT,
d206 4
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a61 2
#ifndef OPENSSL_FIPS

a70 1

a204 2

#endif
@


1.1.1.9
log
@Import OpenSSL 1.0.1g
@
text
@d68 1
a68 1
#include <openssl/sha.h>
@


