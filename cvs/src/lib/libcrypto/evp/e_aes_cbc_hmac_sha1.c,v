head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2016.11.05.10.47.57;	author miod;	state Exp;
branches;
next	1.13;
commitid	7vRgVxTh6HzoBwKT;

1.13
date	2016.11.04.17.30.30;	author miod;	state Exp;
branches;
next	1.12;
commitid	uVQFi30uotTYOUA9;

1.12
date	2016.05.04.15.01.33;	author tedu;	state Exp;
branches;
next	1.11;
commitid	7gMgSNQnPWlJKVho;

1.11
date	2016.05.04.14.53.29;	author tedu;	state Exp;
branches;
next	1.10;
commitid	dp2wUlmUxyODyIfQ;

1.10
date	2016.05.03.12.38.53;	author tedu;	state Exp;
branches;
next	1.9;
commitid	0ClIPo2LiLW7bSvG;

1.9
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	vHznCDK3idwNEFz4;

1.8
date	2014.07.12.20.37.07;	author miod;	state Exp;
branches
	1.8.8.1;
next	1.7;
commitid	z3YAKWc4OWulpRgQ;

1.7
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.6;
commitid	nzndm3zqPmFurSaK;

1.6
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.05.08.15.13.06;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.23.19.09.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.14.15.11.43;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;

1.8.8.1
date	2016.05.03.12.39.23;	author tedu;	state Exp;
branches;
next	;
commitid	5iHrqqr5iZFurKzX;

1.9.2.1
date	2016.05.03.12.39.48;	author tedu;	state Exp;
branches;
next	;
commitid	Ekna9eOpYJ6UbVcF;


desc
@@


1.14
log
@No need to duplicate definitions from evp.h locally.

ok bock@@ jsing@@
@
text
@/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.13 2016/11/04 17:30:30 miod Exp $ */
/* ====================================================================
 * Copyright (c) 2011-2013 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#if !defined(OPENSSL_NO_AES) && !defined(OPENSSL_NO_SHA1)

#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/aes.h>
#include <openssl/sha.h>
#include "evp_locl.h"
#include "constant_time_locl.h"

#define TLS1_1_VERSION 0x0302

typedef struct {
	AES_KEY		ks;
	SHA_CTX		head, tail, md;
	size_t		payload_length;	/* AAD length in decrypt case */
	union {
		unsigned int	tls_ver;
		unsigned char	tls_aad[16];	/* 13 used */
	} aux;
} EVP_AES_HMAC_SHA1;

#define NO_PAYLOAD_LENGTH	((size_t)-1)

#if	defined(AES_ASM) &&	( \
	defined(__x86_64)	|| defined(__x86_64__)	|| \
	defined(_M_AMD64)	|| defined(_M_X64)	|| \
	defined(__INTEL__)	)

#include "x86_arch.h"

#if defined(__GNUC__) && __GNUC__>=2
# define BSWAP(x) ({ unsigned int r=(x); asm ("bswapl %0":"=r"(r):"0"(r)); r; })
#endif

int aesni_set_encrypt_key(const unsigned char *userKey, int bits, AES_KEY *key);
int aesni_set_decrypt_key(const unsigned char *userKey, int bits, AES_KEY *key);

void aesni_cbc_encrypt(const unsigned char *in, unsigned char *out,
    size_t length, const AES_KEY *key, unsigned char *ivec, int enc);

void aesni_cbc_sha1_enc (const void *inp, void *out, size_t blocks,
    const AES_KEY *key, unsigned char iv[16], SHA_CTX *ctx, const void *in0);

#define data(ctx) ((EVP_AES_HMAC_SHA1 *)(ctx)->cipher_data)

static int
aesni_cbc_hmac_sha1_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *inkey,
    const unsigned char *iv, int enc)
{
	EVP_AES_HMAC_SHA1 *key = data(ctx);
	int ret;

	if (enc)
		ret = aesni_set_encrypt_key(inkey, ctx->key_len * 8, &key->ks);
	else
		ret = aesni_set_decrypt_key(inkey, ctx->key_len * 8, &key->ks);

	SHA1_Init(&key->head);	/* handy when benchmarking */
	key->tail = key->head;
	key->md = key->head;

	key->payload_length = NO_PAYLOAD_LENGTH;

	return ret < 0 ? 0 : 1;
}

#define	STITCHED_CALL

#if !defined(STITCHED_CALL)
#define	aes_off 0
#endif

void sha1_block_data_order (void *c, const void *p, size_t len);

static void
sha1_update(SHA_CTX *c, const void *data, size_t len)
{
	const unsigned char *ptr = data;
	size_t res;

	if ((res = c->num)) {
		res = SHA_CBLOCK - res;
		if (len < res)
			res = len;
		SHA1_Update(c, ptr, res);
		ptr += res;
		len -= res;
	}

	res = len % SHA_CBLOCK;
	len -= res;

	if (len) {
		sha1_block_data_order(c, ptr, len / SHA_CBLOCK);

		ptr += len;
		c->Nh += len >> 29;
		c->Nl += len <<= 3;
		if (c->Nl < (unsigned int)len)
			c->Nh++;
	}

	if (res)
		SHA1_Update(c, ptr, res);
}

#ifdef SHA1_Update
#undef SHA1_Update
#endif
#define SHA1_Update sha1_update

static int
aesni_cbc_hmac_sha1_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t len)
{
	EVP_AES_HMAC_SHA1 *key = data(ctx);
	unsigned int l;
	size_t plen = key->payload_length,
	    iv = 0,		/* explicit IV in TLS 1.1 and later */
	    sha_off = 0;
#if defined(STITCHED_CALL)
	size_t aes_off = 0, blocks;

	sha_off = SHA_CBLOCK - key->md.num;
#endif

	key->payload_length = NO_PAYLOAD_LENGTH;

	if (len % AES_BLOCK_SIZE)
		return 0;

	if (ctx->encrypt) {
		if (plen == NO_PAYLOAD_LENGTH)
			plen = len;
		else if (len != ((plen + SHA_DIGEST_LENGTH + AES_BLOCK_SIZE) &
		    -AES_BLOCK_SIZE))
			return 0;
		else if (key->aux.tls_ver >= TLS1_1_VERSION)
			iv = AES_BLOCK_SIZE;

#if defined(STITCHED_CALL)
		if (plen > (sha_off + iv) &&
		    (blocks = (plen - (sha_off + iv)) / SHA_CBLOCK)) {
			SHA1_Update(&key->md, in + iv, sha_off);

			aesni_cbc_sha1_enc(in, out, blocks, &key->ks,
			    ctx->iv, &key->md, in + iv + sha_off);
			blocks *= SHA_CBLOCK;
			aes_off += blocks;
			sha_off += blocks;
			key->md.Nh += blocks >> 29;
			key->md.Nl += blocks <<= 3;
			if (key->md.Nl < (unsigned int)blocks)
				key->md.Nh++;
		} else {
			sha_off = 0;
		}
#endif
		sha_off += iv;
		SHA1_Update(&key->md, in + sha_off, plen - sha_off);

		if (plen != len) {	/* "TLS" mode of operation */
			if (in != out)
				memcpy(out + aes_off, in + aes_off,
				    plen - aes_off);

			/* calculate HMAC and append it to payload */
			SHA1_Final(out + plen, &key->md);
			key->md = key->tail;
			SHA1_Update(&key->md, out + plen, SHA_DIGEST_LENGTH);
			SHA1_Final(out + plen, &key->md);

			/* pad the payload|hmac */
			plen += SHA_DIGEST_LENGTH;
			for (l = len - plen - 1; plen < len; plen++)
				out[plen] = l;

			/* encrypt HMAC|padding at once */
			aesni_cbc_encrypt(out + aes_off, out + aes_off,
			    len - aes_off, &key->ks, ctx->iv, 1);
		} else {
			aesni_cbc_encrypt(in + aes_off, out + aes_off,
			    len - aes_off, &key->ks, ctx->iv, 1);
		}
	} else {
		union {
			unsigned int u[SHA_DIGEST_LENGTH/sizeof(unsigned int)];
			unsigned char c[32 + SHA_DIGEST_LENGTH];
		} mac, *pmac;

		/* arrange cache line alignment */
		pmac = (void *)(((size_t)mac.c + 31) & ((size_t)0 - 32));

		/* decrypt HMAC|padding at once */
		aesni_cbc_encrypt(in, out, len, &key->ks, ctx->iv, 0);

		if (plen) {	/* "TLS" mode of operation */
			size_t inp_len, mask, j, i;
			unsigned int res, maxpad, pad, bitlen;
			int ret = 1;
			union {
				unsigned int u[SHA_LBLOCK];
				unsigned char c[SHA_CBLOCK];
			}
			*data = (void *)key->md.data;

			if ((key->aux.tls_aad[plen - 4] << 8 |
			    key->aux.tls_aad[plen - 3]) >= TLS1_1_VERSION)
				iv = AES_BLOCK_SIZE;

			if (len < (iv + SHA_DIGEST_LENGTH + 1))
				return 0;

			/* omit explicit iv */
			out += iv;
			len -= iv;

			/* figure out payload length */
			pad = out[len - 1];
			maxpad = len - (SHA_DIGEST_LENGTH + 1);
			maxpad |= (255 - maxpad) >> (sizeof(maxpad) * 8 - 8);
			maxpad &= 255;

			ret &= constant_time_ge(maxpad, pad);

			inp_len = len - (SHA_DIGEST_LENGTH + pad + 1);
			mask = (0 - ((inp_len - len) >>
			    (sizeof(inp_len) * 8 - 1)));
			inp_len &= mask;
			ret &= (int)mask;

			key->aux.tls_aad[plen - 2] = inp_len >> 8;
			key->aux.tls_aad[plen - 1] = inp_len;

			/* calculate HMAC */
			key->md = key->head;
			SHA1_Update(&key->md, key->aux.tls_aad, plen);

#if 1
			len -= SHA_DIGEST_LENGTH;		/* amend mac */
			if (len >= (256 + SHA_CBLOCK)) {
				j = (len - (256 + SHA_CBLOCK)) &
				    (0 - SHA_CBLOCK);
				j += SHA_CBLOCK - key->md.num;
				SHA1_Update(&key->md, out, j);
				out += j;
				len -= j;
				inp_len -= j;
			}

			/* but pretend as if we hashed padded payload */
			bitlen = key->md.Nl + (inp_len << 3);	/* at most 18 bits */
#ifdef BSWAP
			bitlen = BSWAP(bitlen);
#else
			mac.c[0] = 0;
			mac.c[1] = (unsigned char)(bitlen >> 16);
			mac.c[2] = (unsigned char)(bitlen >> 8);
			mac.c[3] = (unsigned char)bitlen;
			bitlen = mac.u[0];
#endif

			pmac->u[0] = 0;
			pmac->u[1] = 0;
			pmac->u[2] = 0;
			pmac->u[3] = 0;
			pmac->u[4] = 0;

			for (res = key->md.num, j = 0; j < len; j++) {
				size_t c = out[j];
				mask = (j - inp_len) >> (sizeof(j) * 8 - 8);
				c &= mask;
				c |= 0x80 & ~mask &
				    ~((inp_len - j) >> (sizeof(j) * 8 - 8));
				data->c[res++] = (unsigned char)c;

				if (res != SHA_CBLOCK)
					continue;

				/* j is not incremented yet */
				mask = 0 - ((inp_len + 7 - j) >>
				    (sizeof(j) * 8 - 1));
				data->u[SHA_LBLOCK - 1] |= bitlen&mask;
				sha1_block_data_order(&key->md, data, 1);
				mask &= 0 - ((j - inp_len - 72) >>
				    (sizeof(j) * 8 - 1));
				pmac->u[0] |= key->md.h0 & mask;
				pmac->u[1] |= key->md.h1 & mask;
				pmac->u[2] |= key->md.h2 & mask;
				pmac->u[3] |= key->md.h3 & mask;
				pmac->u[4] |= key->md.h4 & mask;
				res = 0;
			}

			for (i = res; i < SHA_CBLOCK; i++, j++)
				data->c[i] = 0;

			if (res > SHA_CBLOCK - 8) {
				mask = 0 - ((inp_len + 8 - j) >>
				    (sizeof(j) * 8 - 1));
				data->u[SHA_LBLOCK - 1] |= bitlen & mask;
				sha1_block_data_order(&key->md, data, 1);
				mask &= 0 - ((j - inp_len - 73) >>
				    (sizeof(j) * 8 - 1));
				pmac->u[0] |= key->md.h0 & mask;
				pmac->u[1] |= key->md.h1 & mask;
				pmac->u[2] |= key->md.h2 & mask;
				pmac->u[3] |= key->md.h3 & mask;
				pmac->u[4] |= key->md.h4 & mask;

				memset(data, 0, SHA_CBLOCK);
				j += 64;
			}
			data->u[SHA_LBLOCK - 1] = bitlen;
			sha1_block_data_order(&key->md, data, 1);
			mask = 0 - ((j - inp_len - 73) >> (sizeof(j) * 8 - 1));
			pmac->u[0] |= key->md.h0 & mask;
			pmac->u[1] |= key->md.h1 & mask;
			pmac->u[2] |= key->md.h2 & mask;
			pmac->u[3] |= key->md.h3 & mask;
			pmac->u[4] |= key->md.h4 & mask;

#ifdef BSWAP
			pmac->u[0] = BSWAP(pmac->u[0]);
			pmac->u[1] = BSWAP(pmac->u[1]);
			pmac->u[2] = BSWAP(pmac->u[2]);
			pmac->u[3] = BSWAP(pmac->u[3]);
			pmac->u[4] = BSWAP(pmac->u[4]);
#else
			for (i = 0; i < 5; i++) {
				res = pmac->u[i];
				pmac->c[4 * i + 0] = (unsigned char)(res >> 24);
				pmac->c[4 * i + 1] = (unsigned char)(res >> 16);
				pmac->c[4 * i + 2] = (unsigned char)(res >> 8);
				pmac->c[4 * i + 3] = (unsigned char)res;
			}
#endif
			len += SHA_DIGEST_LENGTH;
#else
			SHA1_Update(&key->md, out, inp_len);
			res = key->md.num;
			SHA1_Final(pmac->c, &key->md);

			{
				unsigned int inp_blocks, pad_blocks;

				/* but pretend as if we hashed padded payload */
				inp_blocks = 1 + ((SHA_CBLOCK - 9 - res) >>
				    (sizeof(res) * 8 - 1));
				res += (unsigned int)(len - inp_len);
				pad_blocks = res / SHA_CBLOCK;
				res %= SHA_CBLOCK;
				pad_blocks += 1 + ((SHA_CBLOCK - 9 - res) >>
				    (sizeof(res) * 8 - 1));
				for (; inp_blocks < pad_blocks; inp_blocks++)
					sha1_block_data_order(&key->md,
					    data, 1);
			}
#endif
			key->md = key->tail;
			SHA1_Update(&key->md, pmac->c, SHA_DIGEST_LENGTH);
			SHA1_Final(pmac->c, &key->md);

			/* verify HMAC */
			out += inp_len;
			len -= inp_len;
#if 1
			{
				unsigned char *p =
				    out + len - 1 - maxpad - SHA_DIGEST_LENGTH;
				size_t off = out - p;
				unsigned int c, cmask;

				maxpad += SHA_DIGEST_LENGTH;
				for (res = 0, i = 0, j = 0; j < maxpad; j++) {
					c = p[j];
					cmask = ((int)(j - off -
					    SHA_DIGEST_LENGTH)) >>
					    (sizeof(int) * 8 - 1);
					res |= (c ^ pad) & ~cmask;	/* ... and padding */
					cmask &= ((int)(off - 1 - j)) >>
					    (sizeof(int) * 8 - 1);
					res |= (c ^ pmac->c[i]) & cmask;
					i += 1 & cmask;
				}
				maxpad -= SHA_DIGEST_LENGTH;

				res = 0 - ((0 - res) >> (sizeof(res) * 8 - 1));
				ret &= (int)~res;
			}
#else
			for (res = 0, i = 0; i < SHA_DIGEST_LENGTH; i++)
				res |= out[i] ^ pmac->c[i];
			res = 0 - ((0 - res) >> (sizeof(res) * 8 - 1));
			ret &= (int)~res;

			/* verify padding */
			pad = (pad & ~res) | (maxpad & res);
			out = out + len - 1 - pad;
			for (res = 0, i = 0; i < pad; i++)
				res |= out[i] ^ pad;

			res = (0 - res) >> (sizeof(res) * 8 - 1);
			ret &= (int)~res;
#endif
			return ret;
		} else {
			SHA1_Update(&key->md, out, len);
		}
	}

	return 1;
}

static int
aesni_cbc_hmac_sha1_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
{
	EVP_AES_HMAC_SHA1 *key = data(ctx);

	switch (type) {
	case EVP_CTRL_AEAD_SET_MAC_KEY:
		{
			unsigned int  i;
			unsigned char hmac_key[64];

			memset(hmac_key, 0, sizeof(hmac_key));

			if (arg > (int)sizeof(hmac_key)) {
				SHA1_Init(&key->head);
				SHA1_Update(&key->head, ptr, arg);
				SHA1_Final(hmac_key, &key->head);
			} else {
				memcpy(hmac_key, ptr, arg);
			}

			for (i = 0; i < sizeof(hmac_key); i++)
				hmac_key[i] ^= 0x36;		/* ipad */
			SHA1_Init(&key->head);
			SHA1_Update(&key->head, hmac_key, sizeof(hmac_key));

			for (i = 0; i < sizeof(hmac_key); i++)
				hmac_key[i] ^= 0x36 ^ 0x5c;	/* opad */
			SHA1_Init(&key->tail);
			SHA1_Update(&key->tail, hmac_key, sizeof(hmac_key));

			explicit_bzero(hmac_key, sizeof(hmac_key));

			return 1;
		}
	case EVP_CTRL_AEAD_TLS1_AAD:
		{
			unsigned char *p = ptr;
			unsigned int len = p[arg - 2] << 8 | p[arg - 1];

			if (ctx->encrypt) {
				key->payload_length = len;
				if ((key->aux.tls_ver = p[arg - 4] << 8 |
				    p[arg - 3]) >= TLS1_1_VERSION) {
					len -= AES_BLOCK_SIZE;
					p[arg - 2] = len >> 8;
					p[arg - 1] = len;
				}
				key->md = key->head;
				SHA1_Update(&key->md, p, arg);

				return (int)(((len + SHA_DIGEST_LENGTH +
				    AES_BLOCK_SIZE) & -AES_BLOCK_SIZE) - len);
			} else {
				if (arg > 13)
					arg = 13;
				memcpy(key->aux.tls_aad, ptr, arg);
				key->payload_length = arg;

				return SHA_DIGEST_LENGTH;
			}
		}
	default:
		return -1;
	}
}

static EVP_CIPHER aesni_128_cbc_hmac_sha1_cipher = {
#ifdef NID_aes_128_cbc_hmac_sha1
	.nid = NID_aes_128_cbc_hmac_sha1,
#else
	.nid = NID_undef,
#endif
	.block_size = 16,
	.key_len = 16,
	.iv_len = 16,
	.flags = EVP_CIPH_CBC_MODE | EVP_CIPH_FLAG_DEFAULT_ASN1 |
	    EVP_CIPH_FLAG_AEAD_CIPHER,
	.init = aesni_cbc_hmac_sha1_init_key,
	.do_cipher = aesni_cbc_hmac_sha1_cipher,
	.ctx_size = sizeof(EVP_AES_HMAC_SHA1),
	.ctrl = aesni_cbc_hmac_sha1_ctrl
};

static EVP_CIPHER aesni_256_cbc_hmac_sha1_cipher = {
#ifdef NID_aes_256_cbc_hmac_sha1
	.nid = NID_aes_256_cbc_hmac_sha1,
#else
	.nid = NID_undef,
#endif
	.block_size = 16,
	.key_len = 32,
	.iv_len = 16,
	.flags = EVP_CIPH_CBC_MODE | EVP_CIPH_FLAG_DEFAULT_ASN1 |
	    EVP_CIPH_FLAG_AEAD_CIPHER,
	.init = aesni_cbc_hmac_sha1_init_key,
	.do_cipher = aesni_cbc_hmac_sha1_cipher,
	.ctx_size = sizeof(EVP_AES_HMAC_SHA1),
	.ctrl = aesni_cbc_hmac_sha1_ctrl
};

const EVP_CIPHER *
EVP_aes_128_cbc_hmac_sha1(void)
{
	return (OPENSSL_cpu_caps() & CPUCAP_MASK_AESNI) ?
	    &aesni_128_cbc_hmac_sha1_cipher : NULL;
}

const EVP_CIPHER *
EVP_aes_256_cbc_hmac_sha1(void)
{
	return (OPENSSL_cpu_caps() & CPUCAP_MASK_AESNI) ?
	    &aesni_256_cbc_hmac_sha1_cipher : NULL;
}
#else
const EVP_CIPHER *
EVP_aes_128_cbc_hmac_sha1(void)
{
	return NULL;
}

const EVP_CIPHER *
EVP_aes_256_cbc_hmac_sha1(void)
{
	    return NULL;
}
#endif
#endif
@


1.13
log
@Replace all uses of magic numbers when operating on OPENSSL_ia32_P[] by
meaningful constants in a private header file, so that reviewers can actually
get a chance to figure out what the code is attempting to do without knowing
all cpuid bits.

While there, turn it from an array of two 32-bit ints into a properly aligned
64-bit int.

Use of OPENSSL_ia32_P is now restricted to the assembler parts. C code will
now always use OPENSSL_cpu_caps() and check for the proper bits in the
whole 64-bit word it returns.

i386 tests and ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.12 2016/05/04 15:01:33 tedu Exp $ */
a63 6

#ifndef EVP_CIPH_FLAG_AEAD_CIPHER
#define EVP_CIPH_FLAG_AEAD_CIPHER	0x200000
#define EVP_CTRL_AEAD_TLS1_AAD		0x16
#define EVP_CTRL_AEAD_SET_MAC_KEY	0x17
#endif
@


1.12
log
@fix a padding oracle in aesni cbc mac check. there must be enough data
for both the mac and padding bytes.
CVE-2016-2107 from openssl
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.11 2016/05/04 14:53:29 tedu Exp $ */
d90 2
a95 3
extern unsigned int OPENSSL_ia32cap_P[2];
#define AESNI_CAPABLE   (1<<(57-32))

d580 1
a580 1
	return OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
d587 1
a587 1
	return OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
@


1.11
log
@revert the big change from yesterday to prepare for smaller commits.
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.10 2016/05/03 12:38:53 tedu Exp $ */
d63 1
d285 2
@


1.10
log
@patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.9 2015/09/10 15:56:25 jsing Exp $ */
a62 1
#include "constant_time_locl.h"
a283 2

			ret &= constant_time_ge(maxpad, pad);
@


1.9
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.8 2014/07/12 20:37:07 miod Exp $ */
d63 1
d285 2
@


1.9.2.1
log
@backport patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.9 2015/09/10 15:56:25 jsing Exp $ */
a62 1
#include "constant_time_locl.h"
a283 2

			ret &= constant_time_ge(maxpad, pad);
@


1.8
log
@We have EVP_CIPH_FLAG_DEFAULT_ASN1 in evp.h; no need to keep constructs to
build on pre-EVP_CIPH_FLAG_DEFAULT_ASN1 codebases.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.7 2014/07/10 22:45:57 jsing Exp $ */
d505 1
a505 1
			OPENSSL_cleanse(hmac_key, sizeof(hmac_key));
@


1.8.8.1
log
@backport patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.8 2014/07/12 20:37:07 miod Exp $ */
a62 1
#include "constant_time_locl.h"
a283 2

			ret &= constant_time_ge(maxpad, pad);
@


1.7
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: e_aes_cbc_hmac_sha1.c,v 1.6 2014/06/12 15:49:29 deraadt Exp $ */
a69 4
#if !defined(EVP_CIPH_FLAG_DEFAULT_ASN1)
#define EVP_CIPH_FLAG_DEFAULT_ASN1 0
#endif

d485 1
a485 1
			memset (hmac_key, 0, sizeof(hmac_key));
d543 1
a543 1
	NID_aes_128_cbc_hmac_sha1,
d545 1
a545 1
	NID_undef,
d547 9
a555 10
	16, 16, 16,
	EVP_CIPH_CBC_MODE|EVP_CIPH_FLAG_DEFAULT_ASN1|EVP_CIPH_FLAG_AEAD_CIPHER,
	aesni_cbc_hmac_sha1_init_key,
	aesni_cbc_hmac_sha1_cipher,
	NULL,
	sizeof(EVP_AES_HMAC_SHA1),
	EVP_CIPH_FLAG_DEFAULT_ASN1 ? NULL : EVP_CIPHER_set_asn1_iv,
	EVP_CIPH_FLAG_DEFAULT_ASN1 ? NULL : EVP_CIPHER_get_asn1_iv,
	aesni_cbc_hmac_sha1_ctrl,
	NULL
d560 1
a560 1
	NID_aes_256_cbc_hmac_sha1,
d562 1
a562 1
	NID_undef,
d564 9
a572 10
	16, 32, 16,
	EVP_CIPH_CBC_MODE|EVP_CIPH_FLAG_DEFAULT_ASN1|EVP_CIPH_FLAG_AEAD_CIPHER,
	aesni_cbc_hmac_sha1_init_key,
	aesni_cbc_hmac_sha1_cipher,
	NULL,
	sizeof(EVP_AES_HMAC_SHA1),
	EVP_CIPH_FLAG_DEFAULT_ASN1 ? NULL : EVP_CIPHER_set_asn1_iv,
	EVP_CIPH_FLAG_DEFAULT_ASN1 ? NULL : EVP_CIPHER_get_asn1_iv,
	aesni_cbc_hmac_sha1_ctrl,
	NULL
d578 2
a579 2
	return(OPENSSL_ia32cap_P[1] & AESNI_CAPABLE?
	&aesni_128_cbc_hmac_sha1_cipher : NULL);
d585 2
a586 2
	return(OPENSSL_ia32cap_P[1] & AESNI_CAPABLE?
	&aesni_256_cbc_hmac_sha1_cipher : NULL);
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a50 2
#include <openssl/opensslconf.h>

d53 2
@


1.5
log
@KNF.
@
text
@d1 1
@


1.4
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d75 9
a83 10
typedef struct
    {
    AES_KEY		ks;
    SHA_CTX		head,tail,md;
    size_t		payload_length;	/* AAD length in decrypt case */
    union {
	unsigned int	tls_ver;
    	unsigned char	tls_aad[16];	/* 13 used */
    } aux;
    } EVP_AES_HMAC_SHA1;
d99 5
a103 10
int aesni_set_encrypt_key(const unsigned char *userKey, int bits,
			      AES_KEY *key);
int aesni_set_decrypt_key(const unsigned char *userKey, int bits,
			      AES_KEY *key);

void aesni_cbc_encrypt(const unsigned char *in,
			   unsigned char *out,
			   size_t length,
			   const AES_KEY *key,
			   unsigned char *ivec, int enc);
d106 1
a106 2
		const AES_KEY *key, unsigned char iv[16],
		SHA_CTX *ctx,const void *in0);
d110 4
a113 4
static int aesni_cbc_hmac_sha1_init_key(EVP_CIPHER_CTX *ctx,
			const unsigned char *inkey,
			const unsigned char *iv, int enc)
	{
d118 1
a118 1
		ret=aesni_set_encrypt_key(inkey,ctx->key_len*8,&key->ks);
d120 1
a120 1
		ret=aesni_set_decrypt_key(inkey,ctx->key_len*8,&key->ks);
d124 1
a124 1
	key->md   = key->head;
d128 2
a129 2
	return ret<0?0:1;
	}
d137 1
a137 1
void sha1_block_data_order (void *c,const void *p,size_t len);
d139 4
a142 2
static void sha1_update(SHA_CTX *c,const void *data,size_t len)
{	const unsigned char *ptr = data;
d146 4
a149 3
		res = SHA_CBLOCK-res;
		if (len<res) res=len;
		SHA1_Update (c,ptr,res);
d158 1
a158 1
		sha1_block_data_order(c,ptr,len/SHA_CBLOCK);
d161 4
a164 3
		c->Nh += len>>29;
		c->Nl += len<<=3;
		if (c->Nl<(unsigned int)len) c->Nh++;
d168 1
a168 1
		SHA1_Update(c,ptr,res);
d176 4
a179 3
static int aesni_cbc_hmac_sha1_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
		      const unsigned char *in, size_t len)
	{
d182 3
a184 3
	size_t	plen = key->payload_length,
		iv = 0,		/* explicit IV in TLS 1.1 and later */
		sha_off = 0;
d186 1
a186 2
	size_t	aes_off = 0,
		blocks;
d188 1
a188 1
	sha_off = SHA_CBLOCK-key->md.num;
d193 2
a194 1
	if (len%AES_BLOCK_SIZE) return 0;
d197 1
a197 1
		if (plen==NO_PAYLOAD_LENGTH)
d199 2
a200 1
		else if (len!=((plen+SHA_DIGEST_LENGTH+AES_BLOCK_SIZE)&-AES_BLOCK_SIZE))
d206 3
a208 2
		if (plen>(sha_off+iv) && (blocks=(plen-(sha_off+iv))/SHA_CBLOCK)) {
			SHA1_Update(&key->md,in+iv,sha_off);
d210 2
a211 2
			aesni_cbc_sha1_enc(in,out,blocks,&key->ks,
				ctx->iv,&key->md,in+iv+sha_off);
d215 4
a218 3
			key->md.Nh += blocks>>29;
			key->md.Nl += blocks<<=3;
			if (key->md.Nl<(unsigned int)blocks) key->md.Nh++;
d224 1
a224 1
		SHA1_Update(&key->md,in+sha_off,plen-sha_off);
d226 4
a229 3
		if (plen!=len)	{	/* "TLS" mode of operation */
			if (in!=out)
				memcpy(out+aes_off,in+aes_off,plen-aes_off);
d232 1
a232 1
			SHA1_Final(out+plen,&key->md);
d234 2
a235 2
			SHA1_Update(&key->md,out+plen,SHA_DIGEST_LENGTH);
			SHA1_Final(out+plen,&key->md);
d239 3
a241 1
			for (l=len-plen-1;plen<len;plen++) out[plen]=l;
d243 2
a244 2
			aesni_cbc_encrypt(out+aes_off,out+aes_off,len-aes_off,
					&key->ks,ctx->iv,1);
d246 2
a247 2
			aesni_cbc_encrypt(in+aes_off,out+aes_off,len-aes_off,
					&key->ks,ctx->iv,1);
d250 4
a253 2
		union { unsigned int  u[SHA_DIGEST_LENGTH/sizeof(unsigned int)];
			unsigned char c[32+SHA_DIGEST_LENGTH]; } mac, *pmac;
d256 1
a256 1
		pmac = (void *)(((size_t)mac.c+31)&((size_t)0-32));
d259 1
a259 2
		aesni_cbc_encrypt(in,out,len,
				&key->ks,ctx->iv,0);
d265 5
a269 3
			union {	unsigned int  u[SHA_LBLOCK];
				unsigned char c[SHA_CBLOCK]; }
				*data = (void *)key->md.data;
d271 2
a272 2
			if ((key->aux.tls_aad[plen-4]<<8|key->aux.tls_aad[plen-3])
			    >= TLS1_1_VERSION)
d275 1
a275 1
			if (len<(iv+SHA_DIGEST_LENGTH+1))
d283 3
a285 3
			pad = out[len-1];
			maxpad = len-(SHA_DIGEST_LENGTH+1);
			maxpad |= (255-maxpad)>>(sizeof(maxpad)*8-8);
d288 3
a290 2
			inp_len = len - (SHA_DIGEST_LENGTH+pad+1);
			mask = (0-((inp_len-len)>>(sizeof(inp_len)*8-1)));
d294 2
a295 2
			key->aux.tls_aad[plen-2] = inp_len>>8;
			key->aux.tls_aad[plen-1] = inp_len;
d299 1
a299 1
			SHA1_Update(&key->md,key->aux.tls_aad,plen);
d303 5
a307 4
			if (len>=(256+SHA_CBLOCK)) {
				j = (len-(256+SHA_CBLOCK))&(0-SHA_CBLOCK);
				j += SHA_CBLOCK-key->md.num;
				SHA1_Update(&key->md,out,j);
d314 1
a314 1
			bitlen = key->md.Nl+(inp_len<<3);	/* at most 18 bits */
d319 2
a320 2
			mac.c[1] = (unsigned char)(bitlen>>16);
			mac.c[2] = (unsigned char)(bitlen>>8);
d325 5
a329 5
			pmac->u[0]=0;
			pmac->u[1]=0;
			pmac->u[2]=0;
			pmac->u[3]=0;
			pmac->u[4]=0;
d331 1
a331 1
			for (res=key->md.num, j=0;j<len;j++) {
d333 1
a333 1
				mask = (j-inp_len)>>(sizeof(j)*8-8);
d335 3
a337 2
				c |= 0x80&~mask&~((inp_len-j)>>(sizeof(j)*8-8));
				data->c[res++]=(unsigned char)c;
d339 2
a340 1
				if (res!=SHA_CBLOCK) continue;
d343 6
a348 4
				mask = 0-((inp_len+7-j)>>(sizeof(j)*8-1));
				data->u[SHA_LBLOCK-1] |= bitlen&mask;
				sha1_block_data_order(&key->md,data,1);
				mask &= 0-((j-inp_len-72)>>(sizeof(j)*8-1));
d354 1
a354 1
				res=0;
d357 2
a358 1
			for(i=res;i<SHA_CBLOCK;i++,j++) data->c[i]=0;
d360 7
a366 5
			if (res>SHA_CBLOCK-8) {
				mask = 0-((inp_len+8-j)>>(sizeof(j)*8-1));
				data->u[SHA_LBLOCK-1] |= bitlen&mask;
				sha1_block_data_order(&key->md,data,1);
				mask &= 0-((j-inp_len-73)>>(sizeof(j)*8-1));
d373 2
a374 2
				memset(data,0,SHA_CBLOCK);
				j+=64;
d376 3
a378 3
			data->u[SHA_LBLOCK-1] = bitlen;
			sha1_block_data_order(&key->md,data,1);
			mask = 0-((j-inp_len-73)>>(sizeof(j)*8-1));
d392 1
a392 1
			for (i=0;i<5;i++) {
d394 4
a397 4
				pmac->c[4*i+0]=(unsigned char)(res>>24);
				pmac->c[4*i+1]=(unsigned char)(res>>16);
				pmac->c[4*i+2]=(unsigned char)(res>>8);
				pmac->c[4*i+3]=(unsigned char)res;
d402 1
a402 1
			SHA1_Update(&key->md,out,inp_len);
d404 1
a404 1
			SHA1_Final(pmac->c,&key->md);
d407 1
a407 1
			unsigned int inp_blocks, pad_blocks;
d409 11
a419 8
			/* but pretend as if we hashed padded payload */
			inp_blocks = 1+((SHA_CBLOCK-9-res)>>(sizeof(res)*8-1));
			res += (unsigned int)(len-inp_len);
			pad_blocks = res / SHA_CBLOCK;
			res %= SHA_CBLOCK;
			pad_blocks += 1+((SHA_CBLOCK-9-res)>>(sizeof(res)*8-1));
			for (;inp_blocks<pad_blocks;inp_blocks++)
				sha1_block_data_order(&key->md,data,1);
d423 2
a424 2
			SHA1_Update(&key->md,pmac->c,SHA_DIGEST_LENGTH);
			SHA1_Final(pmac->c,&key->md);
d431 18
a448 14
			unsigned char *p = out+len-1-maxpad-SHA_DIGEST_LENGTH;
			size_t off = out-p;
			unsigned int c, cmask;

			maxpad += SHA_DIGEST_LENGTH;
			for (res=0,i=0,j=0;j<maxpad;j++) {
				c = p[j];
				cmask = ((int)(j-off-SHA_DIGEST_LENGTH))>>(sizeof(int)*8-1);
				res |= (c^pad)&~cmask;	/* ... and padding */
				cmask &= ((int)(off-1-j))>>(sizeof(int)*8-1);
				res |= (c^pmac->c[i])&cmask;
				i += 1&cmask;
			}
			maxpad -= SHA_DIGEST_LENGTH;
d450 2
a451 2
			res = 0-((0-res)>>(sizeof(res)*8-1));
			ret &= (int)~res;
d454 3
a456 3
			for (res=0,i=0;i<SHA_DIGEST_LENGTH;i++)
				res |= out[i]^pmac->c[i];
			res = 0-((0-res)>>(sizeof(res)*8-1));
d460 4
a463 4
			pad = (pad&~res) | (maxpad&res);
			out = out+len-1-pad;
			for (res=0,i=0;i<pad;i++)
				res |= out[i]^pad;
d465 1
a465 1
			res = (0-res)>>(sizeof(res)*8-1);
d470 1
a470 1
			SHA1_Update(&key->md,out,len);
d475 1
a475 1
	}
d477 3
a479 2
static int aesni_cbc_hmac_sha1_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
	{
d482 1
a482 2
	switch (type)
		{
d485 2
a486 2
		unsigned int  i;
		unsigned char hmac_key[64];
d488 9
a496 1
		memset (hmac_key,0,sizeof(hmac_key));
d498 2
a499 1
		if (arg > (int)sizeof(hmac_key)) {
d501 1
a501 5
			SHA1_Update(&key->head,ptr,arg);
			SHA1_Final(hmac_key,&key->head);
		} else {
			memcpy(hmac_key,ptr,arg);
		}
d503 4
a506 9
		for (i=0;i<sizeof(hmac_key);i++)
			hmac_key[i] ^= 0x36;		/* ipad */
		SHA1_Init(&key->head);
		SHA1_Update(&key->head,hmac_key,sizeof(hmac_key));

		for (i=0;i<sizeof(hmac_key);i++)
			hmac_key[i] ^= 0x36^0x5c;	/* opad */
		SHA1_Init(&key->tail);
		SHA1_Update(&key->tail,hmac_key,sizeof(hmac_key));
d508 1
a508 1
		OPENSSL_cleanse(hmac_key,sizeof(hmac_key));
d510 1
a510 1
		return 1;
d514 2
a515 2
		unsigned char *p=ptr;
		unsigned int   len=p[arg-2]<<8|p[arg-1];
d517 18
a534 19
		if (ctx->encrypt)
			{
			key->payload_length = len;
			if ((key->aux.tls_ver=p[arg-4]<<8|p[arg-3]) >= TLS1_1_VERSION) {
				len -= AES_BLOCK_SIZE;
				p[arg-2] = len>>8;
				p[arg-1] = len;
			}
			key->md = key->head;
			SHA1_Update(&key->md,p,arg);

			return (int)(((len+SHA_DIGEST_LENGTH+AES_BLOCK_SIZE)&-AES_BLOCK_SIZE)
				- len);
			}
		else
			{
			if (arg>13) arg = 13;
			memcpy(key->aux.tls_aad,ptr,arg);
			key->payload_length = arg;
d536 1
a536 1
			return SHA_DIGEST_LENGTH;
a540 1
		}
d542 1
d544 1
a544 2
static EVP_CIPHER aesni_128_cbc_hmac_sha1_cipher =
	{
d550 1
a550 1
	16,16,16,
d556 2
a557 2
	EVP_CIPH_FLAG_DEFAULT_ASN1?NULL:EVP_CIPHER_set_asn1_iv,
	EVP_CIPH_FLAG_DEFAULT_ASN1?NULL:EVP_CIPHER_get_asn1_iv,
d560 1
a560 1
	};
d562 1
a562 2
static EVP_CIPHER aesni_256_cbc_hmac_sha1_cipher =
	{
d568 1
a568 1
	16,32,16,
d574 2
a575 2
	EVP_CIPH_FLAG_DEFAULT_ASN1?NULL:EVP_CIPHER_set_asn1_iv,
	EVP_CIPH_FLAG_DEFAULT_ASN1?NULL:EVP_CIPHER_get_asn1_iv,
d578 1
a578 1
	};
d580 6
a585 5
const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha1(void)
	{
	return(OPENSSL_ia32cap_P[1]&AESNI_CAPABLE?
		&aesni_128_cbc_hmac_sha1_cipher:NULL);
	}
d587 6
a592 5
const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha1(void)
	{
	return(OPENSSL_ia32cap_P[1]&AESNI_CAPABLE?
		&aesni_256_cbc_hmac_sha1_cipher:NULL);
	}
d594 3
a596 2
const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha1(void)
	{
d598 7
a604 5
	}
const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha1(void)
	{
	return NULL;
	}
@


1.3
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d93 1
a93 1
#if defined(__GNUC__) && __GNUC__>=2 && !defined(PEDANTIC)
@


1.2
log
@cherry pick bugfixes for http://www.openssl.org/news/secadv_20130205.txt
from the openssl git (changes between openssl 1.0.1c and 1.0.1d).
ok djm@@
@
text
@d331 2
a332 1
				mask = 0-((inp_len+8-j)>>(sizeof(j)*8-1));
d335 1
a335 1
				mask &= 0-((j-inp_len-73)>>(sizeof(j)*8-1));
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 2011 The OpenSSL Project.  All rights reserved.
d93 4
d174 3
d194 2
d246 5
a250 1
		unsigned char mac[SHA_DIGEST_LENGTH];
d257 12
a268 2
			/* figure out payload length */
			if (len<(size_t)(out[len-1]+1+SHA_DIGEST_LENGTH))
d271 3
a273 1
			len -= (out[len-1]+1+SHA_DIGEST_LENGTH);
d275 10
a284 5
			if ((key->aux.tls_aad[plen-4]<<8|key->aux.tls_aad[plen-3])
			    >= TLS1_1_VERSION) {
				len -= AES_BLOCK_SIZE;
				iv = AES_BLOCK_SIZE;
			}
d286 2
a287 2
			key->aux.tls_aad[plen-2] = len>>8;
			key->aux.tls_aad[plen-1] = len;
d289 1
a289 1
			/* calculate HMAC and verify it */
a291 2
			SHA1_Update(&key->md,out+iv,len);
			SHA1_Final(mac,&key->md);
d293 109
d403 2
a404 2
			SHA1_Update(&key->md,mac,SHA_DIGEST_LENGTH);
			SHA1_Final(mac,&key->md);
d406 39
a444 2
			if (memcmp(out+iv+len,mac,SHA_DIGEST_LENGTH))
				return 0;
a449 2
	key->payload_length = NO_PAYLOAD_LENGTH;

d483 2
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@


1.1.1.2
log
@Import OpenSSL 1.0.1g
@
text
@d2 1
a2 1
 * Copyright (c) 2011-2013 The OpenSSL Project.  All rights reserved.
a92 4
#if defined(__GNUC__) && __GNUC__>=2 && !defined(PEDANTIC)
# define BSWAP(x) ({ unsigned int r=(x); asm ("bswapl %0":"=r"(r):"0"(r)); r; })
#endif

a169 3
#ifdef SHA1_Update
#undef SHA1_Update
#endif
a186 2
	key->payload_length = NO_PAYLOAD_LENGTH;

d237 1
a237 5
		union { unsigned int  u[SHA_DIGEST_LENGTH/sizeof(unsigned int)];
			unsigned char c[32+SHA_DIGEST_LENGTH]; } mac, *pmac;

		/* arrange cache line alignment */
		pmac = (void *)(((size_t)mac.c+31)&((size_t)0-32));
d244 5
a248 6
			size_t inp_len, mask, j, i;
			unsigned int res, maxpad, pad, bitlen;
			int ret = 1;
			union {	unsigned int  u[SHA_LBLOCK];
				unsigned char c[SHA_CBLOCK]; }
				*data = (void *)key->md.data;
d251 2
a252 1
			    >= TLS1_1_VERSION)
d254 1
d256 2
a257 20
			if (len<(iv+SHA_DIGEST_LENGTH+1))
				return 0;

			/* omit explicit iv */
			out += iv;
			len -= iv;

			/* figure out payload length */
			pad = out[len-1];
			maxpad = len-(SHA_DIGEST_LENGTH+1);
			maxpad |= (255-maxpad)>>(sizeof(maxpad)*8-8);
			maxpad &= 255;

			inp_len = len - (SHA_DIGEST_LENGTH+pad+1);
			mask = (0-((inp_len-len)>>(sizeof(inp_len)*8-1)));
			inp_len &= mask;
			ret &= (int)mask;

			key->aux.tls_aad[plen-2] = inp_len>>8;
			key->aux.tls_aad[plen-1] = inp_len;
d259 1
a259 1
			/* calculate HMAC */
d262 2
a264 110
#if 1
			len -= SHA_DIGEST_LENGTH;		/* amend mac */
			if (len>=(256+SHA_CBLOCK)) {
				j = (len-(256+SHA_CBLOCK))&(0-SHA_CBLOCK);
				j += SHA_CBLOCK-key->md.num;
				SHA1_Update(&key->md,out,j);
				out += j;
				len -= j;
				inp_len -= j;
			}

			/* but pretend as if we hashed padded payload */
			bitlen = key->md.Nl+(inp_len<<3);	/* at most 18 bits */
#ifdef BSWAP
			bitlen = BSWAP(bitlen);
#else
			mac.c[0] = 0;
			mac.c[1] = (unsigned char)(bitlen>>16);
			mac.c[2] = (unsigned char)(bitlen>>8);
			mac.c[3] = (unsigned char)bitlen;
			bitlen = mac.u[0];
#endif

			pmac->u[0]=0;
			pmac->u[1]=0;
			pmac->u[2]=0;
			pmac->u[3]=0;
			pmac->u[4]=0;

			for (res=key->md.num, j=0;j<len;j++) {
				size_t c = out[j];
				mask = (j-inp_len)>>(sizeof(j)*8-8);
				c &= mask;
				c |= 0x80&~mask&~((inp_len-j)>>(sizeof(j)*8-8));
				data->c[res++]=(unsigned char)c;

				if (res!=SHA_CBLOCK) continue;

				/* j is not incremented yet */
				mask = 0-((inp_len+7-j)>>(sizeof(j)*8-1));
				data->u[SHA_LBLOCK-1] |= bitlen&mask;
				sha1_block_data_order(&key->md,data,1);
				mask &= 0-((j-inp_len-72)>>(sizeof(j)*8-1));
				pmac->u[0] |= key->md.h0 & mask;
				pmac->u[1] |= key->md.h1 & mask;
				pmac->u[2] |= key->md.h2 & mask;
				pmac->u[3] |= key->md.h3 & mask;
				pmac->u[4] |= key->md.h4 & mask;
				res=0;
			}

			for(i=res;i<SHA_CBLOCK;i++,j++) data->c[i]=0;

			if (res>SHA_CBLOCK-8) {
				mask = 0-((inp_len+8-j)>>(sizeof(j)*8-1));
				data->u[SHA_LBLOCK-1] |= bitlen&mask;
				sha1_block_data_order(&key->md,data,1);
				mask &= 0-((j-inp_len-73)>>(sizeof(j)*8-1));
				pmac->u[0] |= key->md.h0 & mask;
				pmac->u[1] |= key->md.h1 & mask;
				pmac->u[2] |= key->md.h2 & mask;
				pmac->u[3] |= key->md.h3 & mask;
				pmac->u[4] |= key->md.h4 & mask;

				memset(data,0,SHA_CBLOCK);
				j+=64;
			}
			data->u[SHA_LBLOCK-1] = bitlen;
			sha1_block_data_order(&key->md,data,1);
			mask = 0-((j-inp_len-73)>>(sizeof(j)*8-1));
			pmac->u[0] |= key->md.h0 & mask;
			pmac->u[1] |= key->md.h1 & mask;
			pmac->u[2] |= key->md.h2 & mask;
			pmac->u[3] |= key->md.h3 & mask;
			pmac->u[4] |= key->md.h4 & mask;

#ifdef BSWAP
			pmac->u[0] = BSWAP(pmac->u[0]);
			pmac->u[1] = BSWAP(pmac->u[1]);
			pmac->u[2] = BSWAP(pmac->u[2]);
			pmac->u[3] = BSWAP(pmac->u[3]);
			pmac->u[4] = BSWAP(pmac->u[4]);
#else
			for (i=0;i<5;i++) {
				res = pmac->u[i];
				pmac->c[4*i+0]=(unsigned char)(res>>24);
				pmac->c[4*i+1]=(unsigned char)(res>>16);
				pmac->c[4*i+2]=(unsigned char)(res>>8);
				pmac->c[4*i+3]=(unsigned char)res;
			}
#endif
			len += SHA_DIGEST_LENGTH;
#else
			SHA1_Update(&key->md,out,inp_len);
			res = key->md.num;
			SHA1_Final(pmac->c,&key->md);

			{
			unsigned int inp_blocks, pad_blocks;

			/* but pretend as if we hashed padded payload */
			inp_blocks = 1+((SHA_CBLOCK-9-res)>>(sizeof(res)*8-1));
			res += (unsigned int)(len-inp_len);
			pad_blocks = res / SHA_CBLOCK;
			res %= SHA_CBLOCK;
			pad_blocks += 1+((SHA_CBLOCK-9-res)>>(sizeof(res)*8-1));
			for (;inp_blocks<pad_blocks;inp_blocks++)
				sha1_block_data_order(&key->md,data,1);
			}
#endif
d266 2
a267 2
			SHA1_Update(&key->md,pmac->c,SHA_DIGEST_LENGTH);
			SHA1_Final(pmac->c,&key->md);
d269 2
a270 39
			/* verify HMAC */
			out += inp_len;
			len -= inp_len;
#if 1
			{
			unsigned char *p = out+len-1-maxpad-SHA_DIGEST_LENGTH;
			size_t off = out-p;
			unsigned int c, cmask;

			maxpad += SHA_DIGEST_LENGTH;
			for (res=0,i=0,j=0;j<maxpad;j++) {
				c = p[j];
				cmask = ((int)(j-off-SHA_DIGEST_LENGTH))>>(sizeof(int)*8-1);
				res |= (c^pad)&~cmask;	/* ... and padding */
				cmask &= ((int)(off-1-j))>>(sizeof(int)*8-1);
				res |= (c^pmac->c[i])&cmask;
				i += 1&cmask;
			}
			maxpad -= SHA_DIGEST_LENGTH;

			res = 0-((0-res)>>(sizeof(res)*8-1));
			ret &= (int)~res;
			}
#else
			for (res=0,i=0;i<SHA_DIGEST_LENGTH;i++)
				res |= out[i]^pmac->c[i];
			res = 0-((0-res)>>(sizeof(res)*8-1));
			ret &= (int)~res;

			/* verify padding */
			pad = (pad&~res) | (maxpad&res);
			out = out+len-1-pad;
			for (res=0,i=0;i<pad;i++)
				res |= out[i]^pad;

			res = (0-res)>>(sizeof(res)*8-1);
			ret &= (int)~res;
#endif
			return ret;
d276 2
a310 2

		OPENSSL_cleanse(hmac_key,sizeof(hmac_key));
@

