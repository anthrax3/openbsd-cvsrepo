head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18;
locks; strict;
comment	@ * @;


1.18
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.17;
commitid	kT0fLt3r4lroFJra;

1.17
date	2016.11.08.20.01.06;	author miod;	state Exp;
branches;
next	1.16;
commitid	XlGKrVG93X98CAkl;

1.16
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.15;
commitid	vHznCDK3idwNEFz4;

1.15
date	2015.02.10.09.52.35;	author miod;	state Exp;
branches;
next	1.14;
commitid	elQcISUWkrkujoI4;

1.14
date	2014.07.13.12.46.44;	author miod;	state Exp;
branches;
next	1.13;
commitid	JuSwJksiMveY6hXs;

1.13
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.12;
commitid	yQEL1wOWIearrW15;

1.12
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.11;
commitid	id8dTrTMtnTn4fqt;

1.11
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.05.07.17.42.51;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.16.31.55;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.57.46;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.16;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.30;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.39.24;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.23;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: p5_crpt.c,v 1.17 2016/11/08 20:01:06 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/x509.h>

/* Doesn't do anything now: Builtin PBE algorithms in static table.
 */

void
PKCS5_PBE_add(void)
{
}

int
PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *cctx, const char *pass, int passlen,
    ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de)
{
	EVP_MD_CTX ctx;
	unsigned char md_tmp[EVP_MAX_MD_SIZE];
	unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];
	int i;
	PBEPARAM *pbe;
	int saltlen, iter;
	unsigned char *salt;
	const unsigned char *pbuf;
	int mdsize;
	int rv = 0;

	/* Extract useful info from parameter */
	if (param == NULL || param->type != V_ASN1_SEQUENCE ||
	    param->value.sequence == NULL) {
		EVPerror(EVP_R_DECODE_ERROR);
		return 0;
	}

	mdsize = EVP_MD_size(md);
	if (mdsize < 0)
		return 0;

	pbuf = param->value.sequence->data;
	if (!(pbe = d2i_PBEPARAM(NULL, &pbuf, param->value.sequence->length))) {
		EVPerror(EVP_R_DECODE_ERROR);
		return 0;
	}

	if (!pbe->iter)
		iter = 1;
	else if ((iter = ASN1_INTEGER_get(pbe->iter)) <= 0) {
		EVPerror(EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS);
		return 0;
	}
	salt = pbe->salt->data;
	saltlen = pbe->salt->length;

	if (!pass)
		passlen = 0;
	else if (passlen == -1)
		passlen = strlen(pass);

	EVP_MD_CTX_init(&ctx);

	if (!EVP_DigestInit_ex(&ctx, md, NULL))
		goto err;
	if (!EVP_DigestUpdate(&ctx, pass, passlen))
		goto err;
	if (!EVP_DigestUpdate(&ctx, salt, saltlen))
		goto err;
	if (!EVP_DigestFinal_ex(&ctx, md_tmp, NULL))
		goto err;
	for (i = 1; i < iter; i++) {
		if (!EVP_DigestInit_ex(&ctx, md, NULL))
			goto err;
		if (!EVP_DigestUpdate(&ctx, md_tmp, mdsize))
			goto err;
		if (!EVP_DigestFinal_ex (&ctx, md_tmp, NULL))
			goto err;
	}
	if ((size_t)EVP_CIPHER_key_length(cipher) > sizeof(md_tmp)) {
		EVPerror(EVP_R_BAD_KEY_LENGTH);
		goto err;
	}
	memcpy(key, md_tmp, EVP_CIPHER_key_length(cipher));
	if ((size_t)EVP_CIPHER_iv_length(cipher) > 16) {
		EVPerror(EVP_R_IV_TOO_LARGE);
		goto err;
	}
	memcpy(iv, md_tmp + (16 - EVP_CIPHER_iv_length(cipher)),
	    EVP_CIPHER_iv_length(cipher));
	if (!EVP_CipherInit_ex(cctx, cipher, NULL, key, iv, en_de))
		goto err;
	explicit_bzero(md_tmp, EVP_MAX_MD_SIZE);
	explicit_bzero(key, EVP_MAX_KEY_LENGTH);
	explicit_bzero(iv, EVP_MAX_IV_LENGTH);
	rv = 1;
err:
	EVP_MD_CTX_cleanup(&ctx);
	PBEPARAM_free(pbe);
	return rv;
}
@


1.17
log
@Stricter checks of ASN1_INTEGER to reject ASN1_NEG_INTEGER in places when
they don't make sense.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_crpt.c,v 1.16 2015/09/10 15:56:25 jsing Exp $ */
d93 1
a93 1
		EVPerr(EVP_F_PKCS5_PBE_KEYIVGEN, EVP_R_DECODE_ERROR);
d103 1
a103 1
		EVPerr(EVP_F_PKCS5_PBE_KEYIVGEN, EVP_R_DECODE_ERROR);
d110 1
a110 2
		EVPerr(EVP_F_PKCS5_PBE_KEYIVGEN,
		    EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS);
d140 1
a140 1
		EVPerr(EVP_F_PKCS5_PBE_KEYIVGEN, EVP_R_BAD_KEY_LENGTH);
d145 1
a145 1
		EVPerr(EVP_F_PKCS5_PBE_KEYIVGEN, EVP_R_IV_TOO_LARGE);
@


1.16
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_crpt.c,v 1.15 2015/02/10 09:52:35 miod Exp $ */
d109 5
a113 2
	else
		iter = ASN1_INTEGER_get (pbe->iter);
@


1.15
log
@Replace assert() and OPENSSL_assert() calls with proper error return paths.
Careful review, feedback & ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_crpt.c,v 1.14 2014/07/13 12:46:44 miod Exp $ */
d150 3
a152 3
	OPENSSL_cleanse(md_tmp, EVP_MAX_MD_SIZE);
	OPENSSL_cleanse(key, EVP_MAX_KEY_LENGTH);
	OPENSSL_cleanse(iv, EVP_MAX_IV_LENGTH);
@


1.14
log
@Possible PBEPARAM leak in the error path.
@
text
@d1 1
a1 1
/* $OpenBSD: p5_crpt.c,v 1.13 2014/07/11 08:44:48 jsing Exp $ */
d137 4
a140 1
	OPENSSL_assert(EVP_CIPHER_key_length(cipher) <= (int)sizeof(md_tmp));
d142 4
a145 1
	OPENSSL_assert(EVP_CIPHER_iv_length(cipher) <= 16);
@


1.13
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_crpt.c,v 1.12 2014/07/10 13:58:22 jsing Exp $ */
a88 1
	EVP_MD_CTX_init(&ctx);
d97 4
d119 2
a126 1
	PBEPARAM_free(pbe);
a128 3
	mdsize = EVP_MD_size(md);
	if (mdsize < 0)
		return 0;
d150 1
@


1.12
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: p5_crpt.c,v 1.11 2014/06/12 15:49:29 deraadt Exp $ */
d63 2
a64 1
#include "cryptlib.h"
a65 1
#include <openssl/evp.h>
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d61 2
@


1.10
log
@KNF.
@
text
@d1 1
a1 1
/* p5_crpt.c */
@


1.9
log
@resolve conflicts
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d68 2
a69 1
void PKCS5_PBE_add(void)
d73 3
a75 3
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *cctx, const char *pass, int passlen,
			 ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md,
			 int en_de)
d92 1
a92 1
		EVPerr(EVP_F_PKCS5_PBE_KEYIVGEN,EVP_R_DECODE_ERROR);
d98 1
a98 1
		EVPerr(EVP_F_PKCS5_PBE_KEYIVGEN,EVP_R_DECODE_ERROR);
d102 4
a105 2
	if (!pbe->iter) iter = 1;
	else iter = ASN1_INTEGER_get (pbe->iter);
d109 4
a112 2
	if(!pass) passlen = 0;
	else if(passlen == -1) passlen = strlen(pass);
d125 1
a125 1
	    return 0;
d138 1
a138 1
						 EVP_CIPHER_iv_length(cipher));
d145 1
a145 1
	err:
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d85 2
d109 6
a114 4
	EVP_MD_CTX_init(&ctx);
	EVP_DigestInit_ex(&ctx, md, NULL);
	EVP_DigestUpdate(&ctx, pass, passlen);
	EVP_DigestUpdate(&ctx, salt, saltlen);
d116 2
a117 1
	EVP_DigestFinal_ex(&ctx, md_tmp, NULL);
d122 6
a127 3
		EVP_DigestInit_ex(&ctx, md, NULL);
		EVP_DigestUpdate(&ctx, md_tmp, mdsize);
		EVP_DigestFinal_ex (&ctx, md_tmp, NULL);
a128 1
	EVP_MD_CTX_cleanup(&ctx);
d134 2
a135 1
	EVP_CipherInit_ex(cctx, cipher, NULL, key, iv, en_de);
d139 4
a142 1
	return 1;
@


1.7
log
@resolve conflicts
@
text
@d65 1
a65 1
/* PKCS#5 v1.5 compatible PBE functions: see PKCS#5 v2.0 for more info.
a69 31
#ifndef OPENSSL_NO_DES
#  ifndef OPENSSL_NO_MD5
EVP_PBE_alg_add(NID_pbeWithMD5AndDES_CBC, EVP_des_cbc(), EVP_md5(),
							 PKCS5_PBE_keyivgen);
#  endif
#  ifndef OPENSSL_NO_MD2
EVP_PBE_alg_add(NID_pbeWithMD2AndDES_CBC, EVP_des_cbc(), EVP_md2(),
							 PKCS5_PBE_keyivgen);
#  endif
#  ifndef OPENSSL_NO_SHA
EVP_PBE_alg_add(NID_pbeWithSHA1AndDES_CBC, EVP_des_cbc(), EVP_sha1(),
							 PKCS5_PBE_keyivgen);
#  endif
#endif
#ifndef OPENSSL_NO_RC2
#  ifndef OPENSSL_NO_MD5
EVP_PBE_alg_add(NID_pbeWithMD5AndRC2_CBC, EVP_rc2_64_cbc(), EVP_md5(),
							 PKCS5_PBE_keyivgen);
#  endif
#  ifndef OPENSSL_NO_MD2
EVP_PBE_alg_add(NID_pbeWithMD2AndRC2_CBC, EVP_rc2_64_cbc(), EVP_md2(),
							 PKCS5_PBE_keyivgen);
#  endif
#  ifndef OPENSSL_NO_SHA
EVP_PBE_alg_add(NID_pbeWithSHA1AndRC2_CBC, EVP_rc2_64_cbc(), EVP_sha1(),
							 PKCS5_PBE_keyivgen);
#  endif
#endif
#ifndef OPENSSL_NO_HMAC
EVP_PBE_alg_add(NID_pbes2, NULL, NULL, PKCS5_v2_PBE_keyivgen);
#endif
d84 1
d113 3
d118 1
a118 1
		EVP_DigestUpdate(&ctx, md_tmp, EVP_MD_size(md));
@


1.6
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d113 2
a114 1
	unsigned char *salt, *pbuf;
d117 6
d124 1
a124 2
	if (!param || (param->type != V_ASN1_SEQUENCE) ||
	   !(pbe = d2i_PBEPARAM (NULL, &pbuf, param->value.sequence->length))) {
d149 1
a149 1
	OPENSSL_assert(EVP_CIPHER_key_length(cipher) <= sizeof md_tmp);
@


1.4
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d143 1
d145 1
d149 3
a151 3
	memset(md_tmp, 0, EVP_MAX_MD_SIZE);
	memset(key, 0, EVP_MAX_KEY_LENGTH);
	memset(iv, 0, EVP_MAX_IV_LENGTH);
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d61 1
a63 1
#include "cryptlib.h"
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d70 2
a71 2
#ifndef NO_DES
#  ifndef NO_MD5
d75 1
a75 1
#  ifndef NO_MD2
d79 1
a79 1
#  ifndef NO_SHA
d84 2
a85 2
#ifndef NO_RC2
#  ifndef NO_MD5
d89 1
a89 1
#  ifndef NO_MD2
d93 1
a93 1
#  ifndef NO_SHA
d98 1
a98 1
#ifndef NO_HMAC
d104 1
a104 1
			 ASN1_TYPE *param, EVP_CIPHER *cipher, EVP_MD *md,
d131 4
a134 3
	EVP_DigestInit (&ctx, md);
	EVP_DigestUpdate (&ctx, pass, passlen);
	EVP_DigestUpdate (&ctx, salt, saltlen);
d136 1
a136 1
	EVP_DigestFinal (&ctx, md_tmp, NULL);
d138 1
a138 1
		EVP_DigestInit(&ctx, md);
d140 1
a140 1
		EVP_DigestFinal (&ctx, md_tmp, NULL);
d142 3
a144 2
	memcpy (key, md_tmp, EVP_CIPHER_key_length(cipher));
	memcpy (iv, md_tmp + (16 - EVP_CIPHER_iv_length(cipher)),
d146 1
a146 1
	EVP_CipherInit(cctx, cipher, key, iv, en_de);
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d128 3
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d70 2
a71 2
#ifndef OPENSSL_NO_DES
#  ifndef OPENSSL_NO_MD5
d75 1
a75 1
#  ifndef OPENSSL_NO_MD2
d79 1
a79 1
#  ifndef OPENSSL_NO_SHA
d84 2
a85 2
#ifndef OPENSSL_NO_RC2
#  ifndef OPENSSL_NO_MD5
d89 1
a89 1
#  ifndef OPENSSL_NO_MD2
d93 1
a93 1
#  ifndef OPENSSL_NO_SHA
d98 1
a98 1
#ifndef OPENSSL_NO_HMAC
d104 1
a104 1
			 ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md,
d128 3
a130 7
	if(!pass) passlen = 0;
	else if(passlen == -1) passlen = strlen(pass);

	EVP_MD_CTX_init(&ctx);
	EVP_DigestInit_ex(&ctx, md, NULL);
	EVP_DigestUpdate(&ctx, pass, passlen);
	EVP_DigestUpdate(&ctx, salt, saltlen);
d132 1
a132 1
	EVP_DigestFinal_ex(&ctx, md_tmp, NULL);
d134 1
a134 1
		EVP_DigestInit_ex(&ctx, md, NULL);
d136 1
a136 1
		EVP_DigestFinal_ex (&ctx, md_tmp, NULL);
d138 2
a139 3
	EVP_MD_CTX_cleanup(&ctx);
	memcpy(key, md_tmp, EVP_CIPHER_key_length(cipher));
	memcpy(iv, md_tmp + (16 - EVP_CIPHER_iv_length(cipher)),
d141 1
a141 1
	EVP_CipherInit_ex(cctx, cipher, NULL, key, iv, en_de);
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@a60 1
#include "cryptlib.h"
d63 1
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a142 1
	OPENSSL_assert(EVP_CIPHER_key_length(cipher) <= sizeof md_tmp);
a143 1
	OPENSSL_assert(EVP_CIPHER_iv_length(cipher) <= 16);
d147 3
a149 3
	OPENSSL_cleanse(md_tmp, EVP_MAX_MD_SIZE);
	OPENSSL_cleanse(key, EVP_MAX_KEY_LENGTH);
	OPENSSL_cleanse(iv, EVP_MAX_IV_LENGTH);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d113 1
a113 2
	unsigned char *salt;
	const unsigned char *pbuf;
a115 6
	if (param == NULL || param->type != V_ASN1_SEQUENCE ||
	    param->value.sequence == NULL) {
		EVPerr(EVP_F_PKCS5_PBE_KEYIVGEN,EVP_R_DECODE_ERROR);
		return 0;
	}

d117 2
a118 1
	if (!(pbe = d2i_PBEPARAM(NULL, &pbuf, param->value.sequence->length))) {
d143 1
a143 1
	OPENSSL_assert(EVP_CIPHER_key_length(cipher) <= (int)sizeof(md_tmp));
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d65 1
a65 1
/* Doesn't do anything now: Builtin PBE algorithms in static table.
d70 31
a114 1
	int mdsize;
a142 3
	mdsize = EVP_MD_size(md);
	if (mdsize < 0)
	    return 0;
d145 1
a145 1
		EVP_DigestUpdate(&ctx, md_tmp, mdsize);
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@a84 2
	int rv = 0;
	EVP_MD_CTX_init(&ctx);
d107 4
a110 6
	if (!EVP_DigestInit_ex(&ctx, md, NULL))
		goto err;
	if (!EVP_DigestUpdate(&ctx, pass, passlen))
		goto err;
	if (!EVP_DigestUpdate(&ctx, salt, saltlen))
		goto err;
d112 1
a112 2
	if (!EVP_DigestFinal_ex(&ctx, md_tmp, NULL))
		goto err;
d117 3
a119 6
		if (!EVP_DigestInit_ex(&ctx, md, NULL))
			goto err;
		if (!EVP_DigestUpdate(&ctx, md_tmp, mdsize))
			goto err;
		if (!EVP_DigestFinal_ex (&ctx, md_tmp, NULL))
			goto err;
d121 1
d127 1
a127 2
	if (!EVP_CipherInit_ex(cctx, cipher, NULL, key, iv, en_de))
		goto err;
d131 1
a131 4
	rv = 1;
	err:
	EVP_MD_CTX_cleanup(&ctx);
	return rv;
@


