head	1.24;
access;
symbols
	OPENBSD_6_2:1.24.0.6
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24;
locks; strict;
comment	@ * @;


1.24
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.23;
commitid	kT0fLt3r4lroFJra;

1.23
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.22;
commitid	vHznCDK3idwNEFz4;

1.22
date	2015.02.10.09.55.39;	author miod;	state Exp;
branches;
next	1.21;
commitid	qwgnJdHiQ8f9J7FP;

1.21
date	2015.02.10.09.52.35;	author miod;	state Exp;
branches;
next	1.20;
commitid	elQcISUWkrkujoI4;

1.20
date	2014.08.06.04.28.21;	author guenther;	state Exp;
branches;
next	1.19;
commitid	vghlSa7LiRfO2uEV;

1.19
date	2014.07.23.04.44.56;	author miod;	state Exp;
branches;
next	1.18;
commitid	X2jlHaDS0JWB8dHe;

1.18
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.19.30.06;	author miod;	state Exp;
branches;
next	1.16;
commitid	ilEP2KH0GRww1CCG;

1.16
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.15;
commitid	id8dTrTMtnTn4fqt;

1.15
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.05.11.12.20.20;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.08.15.42.26;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.20.36.35;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.01.19.51.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.46;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.20;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.28;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.21;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.33;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: evp_key.c,v 1.23 2015/09/10 15:56:25 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/ui.h>
#include <openssl/x509.h>

/* should be init to zeros. */
static char prompt_string[80];

void
EVP_set_pw_prompt(const char *prompt)
{
	if (prompt == NULL)
		prompt_string[0] = '\0';
	else {
		strlcpy(prompt_string, prompt, sizeof(prompt_string));
	}
}

char *
EVP_get_pw_prompt(void)
{
	if (prompt_string[0] == '\0')
		return (NULL);
	else
		return (prompt_string);
}

int
EVP_read_pw_string(char *buf, int len, const char *prompt, int verify)
{
	return EVP_read_pw_string_min(buf, 0, len, prompt, verify);
}

int
EVP_read_pw_string_min(char *buf, int min, int len, const char *prompt,
    int verify)
{
	int ret;
	char buff[BUFSIZ];
	UI *ui;

	if ((prompt == NULL) && (prompt_string[0] != '\0'))
		prompt = prompt_string;
	ui = UI_new();
	if (ui == NULL)
		return -1;
	if (UI_add_input_string(ui, prompt, 0, buf, min,
	    (len >= BUFSIZ) ? BUFSIZ - 1 : len) < 0)
		return -1;
	if (verify) {
		if (UI_add_verify_string(ui, prompt, 0, buff, min,
		    (len >= BUFSIZ) ? BUFSIZ - 1 : len, buf) < 0)
			return -1;
	}
	ret = UI_process(ui);
	UI_free(ui);
	explicit_bzero(buff, BUFSIZ);
	return ret;
}

int
EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,
    const unsigned char *salt, const unsigned char *data, int datal,
    int count, unsigned char *key, unsigned char *iv)
{
	EVP_MD_CTX c;
	unsigned char md_buf[EVP_MAX_MD_SIZE];
	int niv, nkey, addmd = 0;
	unsigned int mds = 0, i;
	int rv = 0;

	nkey = type->key_len;
	niv = type->iv_len;

	if ((size_t)nkey > EVP_MAX_KEY_LENGTH) {
		EVPerror(EVP_R_BAD_KEY_LENGTH);
		return 0;
	}
	if ((size_t)niv > EVP_MAX_IV_LENGTH) {
		EVPerror(EVP_R_IV_TOO_LARGE);
		return 0;
	}

	if (data == NULL)
		return (nkey);

	EVP_MD_CTX_init(&c);
	for (;;) {
		if (!EVP_DigestInit_ex(&c, md, NULL))
			goto err;
		if (addmd++)
			if (!EVP_DigestUpdate(&c, &(md_buf[0]), mds))
				goto err;
		if (!EVP_DigestUpdate(&c, data, datal))
			goto err;
		if (salt != NULL)
			if (!EVP_DigestUpdate(&c, salt, PKCS5_SALT_LEN))
				goto err;
		if (!EVP_DigestFinal_ex(&c, &(md_buf[0]), &mds))
			goto err;

		for (i = 1; i < (unsigned int)count; i++) {
			if (!EVP_DigestInit_ex(&c, md, NULL))
				goto err;
			if (!EVP_DigestUpdate(&c, &(md_buf[0]), mds))
				goto err;
			if (!EVP_DigestFinal_ex(&c, &(md_buf[0]), &mds))
				goto err;
		}
		i = 0;
		if (nkey) {
			for (;;) {
				if (nkey == 0)
					break;
				if (i == mds)
					break;
				if (key != NULL)
					*(key++) = md_buf[i];
				nkey--;
				i++;
			}
		}
		if (niv && (i != mds)) {
			for (;;) {
				if (niv == 0)
					break;
				if (i == mds)
					break;
				if (iv != NULL)
					*(iv++) = md_buf[i];
				niv--;
				i++;
			}
		}
		if ((nkey == 0) && (niv == 0))
			break;
	}
	rv = type->key_len;

err:
	EVP_MD_CTX_cleanup(&c);
	explicit_bzero(md_buf, sizeof md_buf);
	return rv;
}
@


1.23
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_key.c,v 1.22 2015/02/10 09:55:39 miod Exp $ */
d138 1
a138 1
		EVPerr(EVP_F_EVP_BYTESTOKEY, EVP_R_BAD_KEY_LENGTH);
d142 1
a142 1
		EVPerr(EVP_F_EVP_BYTESTOKEY, EVP_R_IV_TOO_LARGE);
@


1.22
log
@EVP_BytesToKey(): return through the error path (which cleans things up)
if EVP_DigestInit_ex() fails.
@
text
@d1 1
a1 1
/* $OpenBSD: evp_key.c,v 1.21 2015/02/10 09:52:35 miod Exp $ */
d119 1
a119 1
	OPENSSL_cleanse(buff, BUFSIZ);
d204 1
a204 1
	OPENSSL_cleanse(md_buf, sizeof md_buf);
@


1.21
log
@Replace assert() and OPENSSL_assert() calls with proper error return paths.
Careful review, feedback & ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_key.c,v 1.20 2014/08/06 04:28:21 guenther Exp $ */
d152 1
a152 1
			return 0;
d204 1
a204 1
	OPENSSL_cleanse(&(md_buf[0]), EVP_MAX_MD_SIZE);
@


1.20
log
@Correct error checks in EVP_read_pw_string_min(): UI_add_input_string()
and UI_add_verify_string() return -1 (and maybe -2?) on failure and
>=0 on success, instead of always zero on success

problem reported by Mark Patruck (mark (at) wrapped.cx)
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_key.c,v 1.19 2014/07/23 04:44:56 miod Exp $ */
d62 1
d133 1
d136 9
a144 2
	OPENSSL_assert(nkey <= EVP_MAX_KEY_LENGTH);
	OPENSSL_assert(niv <= EVP_MAX_IV_LENGTH);
@


1.19
log
@Check the return value of the UI functions (including UI_new() which return
value is happily dereferenced without checking it for being non-NULL).

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_key.c,v 1.18 2014/07/11 08:44:48 jsing Exp $ */
d109 1
a109 1
	    (len >= BUFSIZ) ? BUFSIZ - 1 : len) != 0)
d113 1
a113 1
		    (len >= BUFSIZ) ? BUFSIZ - 1 : len, buf) != 0)
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_key.c,v 1.17 2014/07/10 19:30:06 miod Exp $ */
d106 10
a115 5
	UI_add_input_string(ui, prompt, 0, buf, min,
	    (len >= BUFSIZ) ? BUFSIZ - 1 : len);
	if (verify)
		UI_add_verify_string(ui, prompt, 0, buff, min,
		    (len >= BUFSIZ) ? BUFSIZ - 1 : len, buf);
@


1.17
log
@Kill a blatantly outdated (and now wrong) comment
@
text
@d1 1
a1 1
/* $OpenBSD: evp_key.c,v 1.16 2014/07/10 13:58:22 jsing Exp $ */
d62 1
a62 2
#include "cryptlib.h"
#include <openssl/x509.h>
a63 1
#include <openssl/evp.h>
d65 1
@


1.16
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_key.c,v 1.15 2014/06/12 15:49:29 deraadt Exp $ */
a89 3
/* For historical reasons, the standard function for reading passwords is
 * in the DES library -- if someone ever wants to disable DES,
 * this function will fail */
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.14
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/evp/evp_key.c */
@


1.13
log
@KNF.
@
text
@d108 1
a108 1
	UI_add_input_string(ui, prompt, 0,buf, min,
@


1.12
log
@Clean up dangerous strncpy use. This included a use where the resulting
string was potentially not nul terminated and a place where malloc return
was unchecked.
while we're at it remove dummytest.c
ok miod@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d69 3
a71 2
void EVP_set_pw_prompt(const char *prompt)
	{
d73 3
a75 5
		prompt_string[0]='\0';
	else
		{
		strlcpy(prompt_string,prompt,sizeof(prompt_string));
		}
d77 1
d79 3
a81 2
char *EVP_get_pw_prompt(void)
	{
d83 1
a83 1
		return(NULL);
d85 2
a86 2
		return(prompt_string);
	}
d91 3
a93 2
int EVP_read_pw_string(char *buf, int len, const char *prompt, int verify)
	{
d95 1
a95 1
	}
d97 4
a100 2
int EVP_read_pw_string_min(char *buf, int min, int len, const char *prompt, int verify)
	{
d106 1
a106 1
		prompt=prompt_string;
d108 2
a109 1
	UI_add_input_string(ui,prompt,0,buf,min,(len>=BUFSIZ)?BUFSIZ-1:len);
d111 2
a112 2
		UI_add_verify_string(ui,prompt,0,
			buff,min,(len>=BUFSIZ)?BUFSIZ-1:len,buf);
d115 1
a115 1
	OPENSSL_cleanse(buff,BUFSIZ);
d117 1
a117 1
	}
d119 5
a123 4
int EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md, 
	     const unsigned char *salt, const unsigned char *data, int datal,
	     int count, unsigned char *key, unsigned char *iv)
	{
d126 2
a127 2
	int niv,nkey,addmd=0;
	unsigned int mds=0,i;
d129 2
a130 2
	nkey=type->key_len;
	niv=type->iv_len;
d134 2
a135 1
	if (data == NULL) return(nkey);
d138 2
a139 3
	for (;;)
		{
		if (!EVP_DigestInit_ex(&c,md, NULL))
d142 1
a142 1
			if (!EVP_DigestUpdate(&c,&(md_buf[0]),mds))
d144 1
a144 1
		if (!EVP_DigestUpdate(&c,data,datal))
d147 1
a147 1
			if (!EVP_DigestUpdate(&c,salt,PKCS5_SALT_LEN))
d149 1
a149 1
		if (!EVP_DigestFinal_ex(&c,&(md_buf[0]),&mds))
d152 2
a153 3
		for (i=1; i<(unsigned int)count; i++)
			{
			if (!EVP_DigestInit_ex(&c,md, NULL))
d155 1
a155 1
			if (!EVP_DigestUpdate(&c,&(md_buf[0]),mds))
d157 1
a157 1
			if (!EVP_DigestFinal_ex(&c,&(md_buf[0]),&mds))
d159 8
a166 8
			}
		i=0;
		if (nkey)
			{
			for (;;)
				{
				if (nkey == 0) break;
				if (i == mds) break;
d168 1
a168 1
					*(key++)=md_buf[i];
a170 1
				}
d172 7
a178 6
		if (niv && (i != mds))
			{
			for (;;)
				{
				if (niv == 0) break;
				if (i == mds) break;
d180 1
a180 1
					*(iv++)=md_buf[i];
a182 1
				}
a183 1
		if ((nkey == 0) && (niv == 0)) break;
d185 3
d189 2
a190 1
	err:
d192 1
a192 1
	OPENSSL_cleanse(&(md_buf[0]),EVP_MAX_MD_SIZE);
d194 1
a194 2
	}

@


1.11
log
@resolve conflicts
@
text
@d75 1
a75 2
		strncpy(prompt_string,prompt,79);
		prompt_string[79]='\0';
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d123 1
a123 1

d137 4
a140 2
			EVP_DigestUpdate(&c,&(md_buf[0]),mds);
		EVP_DigestUpdate(&c,data,datal);
d142 4
a145 2
			EVP_DigestUpdate(&c,salt,PKCS5_SALT_LEN);
		EVP_DigestFinal_ex(&c,&(md_buf[0]),&mds);
d149 6
a154 3
			EVP_DigestInit_ex(&c,md, NULL);
			EVP_DigestUpdate(&c,&(md_buf[0]),mds);
			EVP_DigestFinal_ex(&c,&(md_buf[0]),&mds);
d183 2
d187 1
a187 1
	return(type->key_len);
@


1.9
log
@resolve conflicts
@
text
@d93 5
d105 1
a105 1
	UI_add_input_string(ui,prompt,0,buf,0,(len>=BUFSIZ)?BUFSIZ-1:len);
d108 1
a108 1
			buff,0,(len>=BUFSIZ)?BUFSIZ-1:len,buf);
@


1.8
log
@resolve conflicts
@
text
@d69 1
a69 1
void EVP_set_pw_prompt(char *prompt)
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d129 2
a130 1
		EVP_DigestInit_ex(&c,md, NULL);
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d106 1
a106 1
	memset(buff,0,BUFSIZ);
d121 2
d171 1
a171 1
	memset(&(md_buf[0]),0,EVP_MAX_MD_SIZE);
@


1.5
log
@merge openssl 0.9.6b-engine

Note that this is a maintenence release, API's appear *not* to have changed.
As such, I have only increased the minor number on these libraries
@
text
@d64 1
d74 1
d76 2
d93 4
a96 1
#ifndef NO_DES
d99 9
a107 4
	return(des_read_pw_string(buf,len,prompt,verify));
#else
	return -1;
#endif
d110 3
a112 3
int EVP_BytesToKey(const EVP_CIPHER *type, EVP_MD *md, 
             const unsigned char *salt, const unsigned char *data, int datal, 
             int count, unsigned char *key, unsigned char *iv)
d124 1
d127 1
a127 1
		EVP_DigestInit(&c,md);
d133 1
a133 1
		EVP_DigestFinal(&c,&(md_buf[0]),&mds);
d137 1
a137 1
			EVP_DigestInit(&c,md);
d139 1
a139 1
			EVP_DigestFinal(&c,&(md_buf[0]),&mds);
d168 1
a168 1
	memset(&c,0,sizeof(c));
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d98 3
a100 3
int EVP_BytesToKey(const EVP_CIPHER *type, EVP_MD *md, unsigned char *salt,
	     unsigned char *data, int datal, int count, unsigned char *key,
	     unsigned char *iv)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d119 1
a119 1
			EVP_DigestUpdate(&c,salt,8);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d84 3
a86 4
#ifdef NO_DES
int des_read_pw_string(char *buf,int len,const char *prompt,int verify);
#endif

d89 1
d93 3
@


1.1
log
@Initial revision
@
text
@d61 3
a63 3
#include "x509.h"
#include "objects.h"
#include "evp.h"
d68 1
a68 2
void EVP_set_pw_prompt(prompt)
char *prompt;
d76 1
a76 1
char *EVP_get_pw_prompt()
d85 1
a85 1
int des_read_pw_string(char *buf,int len,char *prompt,int verify);
d88 1
a88 5
int EVP_read_pw_string(buf,len,prompt,verify)
char *buf;
int len;
char *prompt;
int verify;
d95 3
a97 9
int EVP_BytesToKey(type,md,salt,data,datal,count,key,iv)
EVP_CIPHER *type;
EVP_MD *md;
unsigned char *salt;
unsigned char *data;
int datal;
int count;
unsigned char *key;
unsigned char *iv;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 3
a63 4
#include <openssl/x509.h>
#include <openssl/objects.h>
#include <openssl/evp.h>
#include <openssl/ui.h>
d68 2
a69 1
void EVP_set_pw_prompt(char *prompt)
a73 1
		{
a74 2
		prompt_string[79]='\0';
		}
d77 1
a77 1
char *EVP_get_pw_prompt(void)
d85 9
a93 4
/* For historical reasons, the standard function for reading passwords is
 * in the DES library -- if someone ever wants to disable DES,
 * this function will fail */
int EVP_read_pw_string(char *buf, int len, const char *prompt, int verify)
a94 4
	int ret;
	char buff[BUFSIZ];
	UI *ui;

d97 1
a97 9
	ui = UI_new();
	UI_add_input_string(ui,prompt,0,buf,0,(len>=BUFSIZ)?BUFSIZ-1:len);
	if (verify)
		UI_add_verify_string(ui,prompt,0,
			buff,0,(len>=BUFSIZ)?BUFSIZ-1:len,buf);
	ret = UI_process(ui);
	UI_free(ui);
	memset(buff,0,BUFSIZ);
	return ret;
d100 9
a108 3
int EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md, 
	     const unsigned char *salt, const unsigned char *data, int datal,
	     int count, unsigned char *key, unsigned char *iv)
a119 1
	EVP_MD_CTX_init(&c);
d122 1
a122 1
		EVP_DigestInit_ex(&c,md, NULL);
d127 2
a128 2
			EVP_DigestUpdate(&c,salt,PKCS5_SALT_LEN);
		EVP_DigestFinal_ex(&c,&(md_buf[0]),&mds);
d132 1
a132 1
			EVP_DigestInit_ex(&c,md, NULL);
d134 1
a134 1
			EVP_DigestFinal_ex(&c,&(md_buf[0]),&mds);
d163 1
a163 1
	EVP_MD_CTX_cleanup(&c);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d106 1
a106 1
	OPENSSL_cleanse(buff,BUFSIZ);
a120 2
	OPENSSL_assert(nkey <= EVP_MAX_KEY_LENGTH);
	OPENSSL_assert(niv <= EVP_MAX_IV_LENGTH);
d169 1
a169 1
	OPENSSL_cleanse(&(md_buf[0]),EVP_MAX_MD_SIZE);
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@d129 1
a129 2
		if (!EVP_DigestInit_ex(&c,md, NULL))
			return 0;
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d69 1
a69 1
void EVP_set_pw_prompt(const char *prompt)
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a92 5
	return EVP_read_pw_string_min(buf, 0, len, prompt, verify);
	}

int EVP_read_pw_string_min(char *buf, int min, int len, const char *prompt, int verify)
	{
d100 1
a100 1
	UI_add_input_string(ui,prompt,0,buf,min,(len>=BUFSIZ)?BUFSIZ-1:len);
d103 1
a103 1
			buff,min,(len>=BUFSIZ)?BUFSIZ-1:len,buf);
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d123 1
a123 1
	int rv = 0;
d137 2
a138 4
			if (!EVP_DigestUpdate(&c,&(md_buf[0]),mds))
				goto err;
		if (!EVP_DigestUpdate(&c,data,datal))
			goto err;
d140 2
a141 4
			if (!EVP_DigestUpdate(&c,salt,PKCS5_SALT_LEN))
				goto err;
		if (!EVP_DigestFinal_ex(&c,&(md_buf[0]),&mds))
			goto err;
d145 3
a147 6
			if (!EVP_DigestInit_ex(&c,md, NULL))
				goto err;
			if (!EVP_DigestUpdate(&c,&(md_buf[0]),mds))
				goto err;
			if (!EVP_DigestFinal_ex(&c,&(md_buf[0]),&mds))
				goto err;
a175 2
	rv = type->key_len;
	err:
d178 1
a178 1
	return rv;
@


