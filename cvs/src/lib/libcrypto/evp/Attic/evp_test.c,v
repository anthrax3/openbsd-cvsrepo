head	1.12;
access;
symbols
	butholakala:1.11
	openssl_1_0_1_g:1.1.1.8
	OPENBSD_5_5:1.11.0.12
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.8
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	openssl_1_0_0_f:1.1.1.8
	openssl_1_0_0_e:1.1.1.8
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.9.0.6
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.04.15.18.08.42;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.22;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.10.16.31.55;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.05.22.12.11;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.21.01.49.11;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.28;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.39.19;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.21;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.10;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.04.06.06.30.03;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2011.11.03.02.32.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Moved to regress/lib/libcrypto.
@
text
@/* Written by Ben Laurie, 2001 */
/*
 * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdio.h>
#include <string.h>

#include "../e_os.h"

#include <openssl/opensslconf.h>
#include <openssl/evp.h>
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif
#include <openssl/err.h>
#include <openssl/conf.h>

static void hexdump(FILE *f,const char *title,const unsigned char *s,int l)
    {
    int n=0;

    fprintf(f,"%s",title);
    for( ; n < l ; ++n)
	{
	if((n%16) == 0)
	    fprintf(f,"\n%04x",n);
	fprintf(f," %02x",s[n]);
	}
    fprintf(f,"\n");
    }

static int convert(unsigned char *s)
    {
    unsigned char *d;

    for(d=s ; *s ; s+=2,++d)
	{
	unsigned int n;

	if(!s[1])
	    {
	    fprintf(stderr,"Odd number of hex digits!");
	    EXIT(4);
	    }
	sscanf((char *)s,"%2x",&n);
	*d=(unsigned char)n;
	}
    return s-d;
    }

static char *sstrsep(char **string, const char *delim)
    {
    char isdelim[256];
    char *token = *string;

    if (**string == 0)
        return NULL;

    memset(isdelim, 0, 256);
    isdelim[0] = 1;

    while (*delim)
        {
        isdelim[(unsigned char)(*delim)] = 1;
        delim++;
        }

    while (!isdelim[(unsigned char)(**string)])
        {
        (*string)++;
        }

    if (**string)
        {
        **string = 0;
        (*string)++;
        }

    return token;
    }

static unsigned char *ustrsep(char **p,const char *sep)
    { return (unsigned char *)sstrsep(p,sep); }

static int test1_exit(int ec)
	{
	EXIT(ec);
	return(0);		/* To keep some compilers quiet */
	}

static void test1(const EVP_CIPHER *c,const unsigned char *key,int kn,
		  const unsigned char *iv,int in,
		  const unsigned char *plaintext,int pn,
		  const unsigned char *ciphertext,int cn,
		  int encdec)
    {
    EVP_CIPHER_CTX ctx;
    unsigned char out[4096];
    int outl,outl2;

    printf("Testing cipher %s%s\n",EVP_CIPHER_name(c),
	   (encdec == 1 ? "(encrypt)" : (encdec == 0 ? "(decrypt)" : "(encrypt/decrypt)")));
    hexdump(stdout,"Key",key,kn);
    if(in)
	hexdump(stdout,"IV",iv,in);
    hexdump(stdout,"Plaintext",plaintext,pn);
    hexdump(stdout,"Ciphertext",ciphertext,cn);
    
    if(kn != c->key_len)
	{
	fprintf(stderr,"Key length doesn't match, got %d expected %lu\n",kn,
		(unsigned long)c->key_len);
	test1_exit(5);
	}
    EVP_CIPHER_CTX_init(&ctx);
    if (encdec != 0)
        {
	if(!EVP_EncryptInit_ex(&ctx,c,NULL,key,iv))
	    {
	    fprintf(stderr,"EncryptInit failed\n");
	    ERR_print_errors_fp(stderr);
	    test1_exit(10);
	    }
	EVP_CIPHER_CTX_set_padding(&ctx,0);

	if(!EVP_EncryptUpdate(&ctx,out,&outl,plaintext,pn))
	    {
	    fprintf(stderr,"Encrypt failed\n");
	    ERR_print_errors_fp(stderr);
	    test1_exit(6);
	    }
	if(!EVP_EncryptFinal_ex(&ctx,out+outl,&outl2))
	    {
	    fprintf(stderr,"EncryptFinal failed\n");
	    ERR_print_errors_fp(stderr);
	    test1_exit(7);
	    }

	if(outl+outl2 != cn)
	    {
	    fprintf(stderr,"Ciphertext length mismatch got %d expected %d\n",
		    outl+outl2,cn);
	    test1_exit(8);
	    }

	if(memcmp(out,ciphertext,cn))
	    {
	    fprintf(stderr,"Ciphertext mismatch\n");
	    hexdump(stderr,"Got",out,cn);
	    hexdump(stderr,"Expected",ciphertext,cn);
	    test1_exit(9);
	    }
	}

    if (encdec <= 0)
        {
	if(!EVP_DecryptInit_ex(&ctx,c,NULL,key,iv))
	    {
	    fprintf(stderr,"DecryptInit failed\n");
	    ERR_print_errors_fp(stderr);
	    test1_exit(11);
	    }
	EVP_CIPHER_CTX_set_padding(&ctx,0);

	if(!EVP_DecryptUpdate(&ctx,out,&outl,ciphertext,cn))
	    {
	    fprintf(stderr,"Decrypt failed\n");
	    ERR_print_errors_fp(stderr);
	    test1_exit(6);
	    }
	if(!EVP_DecryptFinal_ex(&ctx,out+outl,&outl2))
	    {
	    fprintf(stderr,"DecryptFinal failed\n");
	    ERR_print_errors_fp(stderr);
	    test1_exit(7);
	    }

	if(outl+outl2 != pn)
	    {
	    fprintf(stderr,"Plaintext length mismatch got %d expected %d\n",
		    outl+outl2,pn);
	    test1_exit(8);
	    }

	if(memcmp(out,plaintext,pn))
	    {
	    fprintf(stderr,"Plaintext mismatch\n");
	    hexdump(stderr,"Got",out,pn);
	    hexdump(stderr,"Expected",plaintext,pn);
	    test1_exit(9);
	    }
	}

    EVP_CIPHER_CTX_cleanup(&ctx);

    printf("\n");
    }

static int test_cipher(const char *cipher,const unsigned char *key,int kn,
		       const unsigned char *iv,int in,
		       const unsigned char *plaintext,int pn,
		       const unsigned char *ciphertext,int cn,
		       int encdec)
    {
    const EVP_CIPHER *c;

    c=EVP_get_cipherbyname(cipher);
    if(!c)
	return 0;

    test1(c,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec);

    return 1;
    }

static int test_digest(const char *digest,
		       const unsigned char *plaintext,int pn,
		       const unsigned char *ciphertext, unsigned int cn)
    {
    const EVP_MD *d;
    EVP_MD_CTX ctx;
    unsigned char md[EVP_MAX_MD_SIZE];
    unsigned int mdn;

    d=EVP_get_digestbyname(digest);
    if(!d)
	return 0;

    printf("Testing digest %s\n",EVP_MD_name(d));
    hexdump(stdout,"Plaintext",plaintext,pn);
    hexdump(stdout,"Digest",ciphertext,cn);

    EVP_MD_CTX_init(&ctx);
    if(!EVP_DigestInit_ex(&ctx,d, NULL))
	{
	fprintf(stderr,"DigestInit failed\n");
	ERR_print_errors_fp(stderr);
	EXIT(100);
	}
    if(!EVP_DigestUpdate(&ctx,plaintext,pn))
	{
	fprintf(stderr,"DigestUpdate failed\n");
	ERR_print_errors_fp(stderr);
	EXIT(101);
	}
    if(!EVP_DigestFinal_ex(&ctx,md,&mdn))
	{
	fprintf(stderr,"DigestFinal failed\n");
	ERR_print_errors_fp(stderr);
	EXIT(101);
	}
    EVP_MD_CTX_cleanup(&ctx);

    if(mdn != cn)
	{
	fprintf(stderr,"Digest length mismatch, got %d expected %d\n",mdn,cn);
	EXIT(102);
	}

    if(memcmp(md,ciphertext,cn))
	{
	fprintf(stderr,"Digest mismatch\n");
	hexdump(stderr,"Got",md,cn);
	hexdump(stderr,"Expected",ciphertext,cn);
	EXIT(103);
	}

    printf("\n");

    EVP_MD_CTX_cleanup(&ctx);

    return 1;
    }

int main(int argc,char **argv)
    {
    const char *szTestFile;
    FILE *f;

    if(argc != 2)
	{
	fprintf(stderr,"%s <test file>\n",argv[0]);
	EXIT(1);
	}
    CRYPTO_malloc_debug_init();
    CRYPTO_set_mem_debug_options(V_CRYPTO_MDEBUG_ALL);
    CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);

    szTestFile=argv[1];

    f=fopen(szTestFile,"r");
    if(!f)
	{
	perror(szTestFile);
	EXIT(2);
	}

    /* Load up the software EVP_CIPHER and EVP_MD definitions */
    OpenSSL_add_all_ciphers();
    OpenSSL_add_all_digests();
#ifndef OPENSSL_NO_ENGINE
    /* Load all compiled-in ENGINEs */
    ENGINE_load_builtin_engines();
#endif
#if 0
    OPENSSL_config();
#endif
#ifndef OPENSSL_NO_ENGINE
    /* Register all available ENGINE implementations of ciphers and digests.
     * This could perhaps be changed to "ENGINE_register_all_complete()"? */
    ENGINE_register_all_ciphers();
    ENGINE_register_all_digests();
    /* If we add command-line options, this statement should be switchable.
     * It'll prevent ENGINEs being ENGINE_init()ialised for cipher/digest use if
     * they weren't already initialised. */
    /* ENGINE_set_cipher_flags(ENGINE_CIPHER_FLAG_NOINIT); */
#endif

    for( ; ; )
	{
	char line[4096];
	char *p;
	char *cipher;
	unsigned char *iv,*key,*plaintext,*ciphertext;
	int encdec;
	int kn,in,pn,cn;

	if(!fgets((char *)line,sizeof line,f))
	    break;
	if(line[0] == '#' || line[0] == '\n')
	    continue;
	p=line;
	cipher=sstrsep(&p,":");	
	key=ustrsep(&p,":");
	iv=ustrsep(&p,":");
	plaintext=ustrsep(&p,":");
	ciphertext=ustrsep(&p,":");
	if (p[-1] == '\n') {
	    p[-1] = '\0';
	    encdec = -1;
	} else {
	    encdec = atoi(sstrsep(&p,"\n"));
	}
	      

	kn=convert(key);
	in=convert(iv);
	pn=convert(plaintext);
	cn=convert(ciphertext);

	if(!test_cipher(cipher,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec)
	   && !test_digest(cipher,plaintext,pn,ciphertext,cn))
	    {
#ifdef OPENSSL_NO_AES
	    if (strstr(cipher, "AES") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
#ifdef OPENSSL_NO_DES
	    if (strstr(cipher, "DES") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
#ifdef OPENSSL_NO_RC4
	    if (strstr(cipher, "RC4") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
#ifdef OPENSSL_NO_CAMELLIA
	    if (strstr(cipher, "CAMELLIA") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
#ifdef OPENSSL_NO_SEED
	    if (strstr(cipher, "SEED") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
	    fprintf(stderr,"Can't find %s\n",cipher);
	    EXIT(3);
	    }
	}
	fclose(f);

#ifndef OPENSSL_NO_ENGINE
    ENGINE_cleanup();
#endif
    EVP_cleanup();
    CRYPTO_cleanup_all_ex_data();
    ERR_remove_thread_state(NULL);
    ERR_free_strings();
    CRYPTO_mem_leaks_fp(stderr);

    return 0;
    }
@


1.11
log
@openssl-1.0.0e: resolve conflicts
@
text
@@


1.10
log
@resolve conflicts, fix local changes
@
text
@d438 1
@


1.9
log
@resolve conflicts
@
text
@d156 2
a157 2
	fprintf(stderr,"Key length doesn't match, got %d expected %d\n",kn,
		c->key_len);
d444 1
a444 1
    ERR_remove_state(0);
@


1.8
log
@resolve conflicts
@
text
@d223 1
a223 1
	if(outl+outl2 != cn)
d226 1
a226 1
		    outl+outl2,cn);
d230 1
a230 1
	if(memcmp(out,plaintext,cn))
d233 2
a234 2
	    hexdump(stderr,"Got",out,cn);
	    hexdump(stderr,"Expected",plaintext,cn);
@


1.7
log
@resolve conflicts
@
text
@d55 1
d140 1
a140 1
		  int encdec,int multiplier)
d171 1
a171 1
	if(!EVP_EncryptUpdate(&ctx,out,&outl,plaintext,pn*multiplier))
d184 1
a184 1
	if(outl+outl2 != cn*multiplier)
d210 1
a210 1
	if(!EVP_DecryptUpdate(&ctx,out,&outl,ciphertext,cn*multiplier))
d223 1
a223 1
	if(outl+outl2 != cn*multiplier)
d248 1
a248 1
		       int encdec,int multiplier)
d256 1
a256 1
    test1(c,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec,multiplier);
a371 1
	int multiplier=1;
d396 1
a396 9
	if(strchr(cipher,'*'))
	    {
	    p=cipher;
	    sstrsep(&p,"*");
	    multiplier=atoi(sstrsep(&p,"*"));
	    }

	if(!test_cipher(cipher,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec,
			multiplier)
d399 35
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d139 1
a139 1
		  int encdec)
d165 1
d170 1
a170 1
	if(!EVP_EncryptUpdate(&ctx,out,&outl,plaintext,pn))
d173 1
d179 1
d183 1
a183 1
	if(outl+outl2 != cn)
d204 1
d209 1
a209 1
	if(!EVP_DecryptUpdate(&ctx,out,&outl,ciphertext,cn))
d212 1
d218 1
d222 1
a222 1
	if(outl+outl2 != cn)
d247 1
a247 1
		       int encdec)
d255 1
a255 1
    test1(c,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec);
d281 1
d287 1
d293 1
d371 1
d396 9
a404 1
	if(!test_cipher(cipher,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec)
@


1.5
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d52 3
d56 1
d58 2
d87 1
a87 1
	    exit(4);
d129 6
d157 1
a157 1
	exit(5);
d165 1
a165 1
	    exit(10);
d172 1
a172 1
	    exit(6);
d177 1
a177 1
	    exit(7);
d184 1
a184 1
	    exit(8);
d192 1
a192 1
	    exit(9);
d201 1
a201 1
	    exit(11);
d208 1
a208 1
	    exit(6);
d213 1
a213 1
	    exit(7);
d220 1
a220 1
	    exit(8);
d228 1
a228 1
	    exit(9);
d275 1
a275 1
	exit(100);
d280 1
a280 1
	exit(101);
d285 1
a285 1
	exit(101);
d292 1
a292 1
	exit(102);
d300 1
a300 1
	exit(103);
d318 1
a318 1
	exit(1);
d330 1
a330 1
	exit(2);
d336 1
d339 1
d343 1
d352 1
d390 1
a390 1
	    exit(3);
d394 1
d396 1
@


1.4
log
@merge with 0.9.7-beta1
@
text
@d121 1
a121 1
    { return (unsigned char *)sstrsep((char **)p,sep); }
d361 1
a361 1
	    encdec = atoi(strsep(&p,"\n"));
@


1.3
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d121 1
a121 1
    { return (unsigned char *)sstrsep(p,sep); }
d361 1
a361 1
	    encdec = atoi(sstrsep(&p,"\n"));
@


1.2
log
@Merge openssl-0.9.7-stable-SNAP-20020519
@
text
@d121 1
a121 1
    { return (unsigned char *)sstrsep((char **)p,sep); }
d126 2
a127 1
		  const unsigned char *ciphertext,int cn)
d133 2
a134 1
    printf("Testing cipher %s\n",EVP_CIPHER_name(c));
d148 70
a217 64
    if(!EVP_EncryptInit_ex(&ctx,c,NULL,key,iv))
	{
	fprintf(stderr,"EncryptInit failed\n");
	exit(10);
	}
    EVP_CIPHER_CTX_set_padding(&ctx,0);

    if(!EVP_EncryptUpdate(&ctx,out,&outl,plaintext,pn))
	{
	fprintf(stderr,"Encrypt failed\n");
	exit(6);
	}
    if(!EVP_EncryptFinal_ex(&ctx,out+outl,&outl2))
	{
	fprintf(stderr,"EncryptFinal failed\n");
	exit(7);
	}

    if(outl+outl2 != cn)
	{
	fprintf(stderr,"Ciphertext length mismatch got %d expected %d\n",
		outl+outl2,cn);
	exit(8);
	}

    if(memcmp(out,ciphertext,cn))
	{
	fprintf(stderr,"Ciphertext mismatch\n");
	hexdump(stderr,"Got",out,cn);
	hexdump(stderr,"Expected",ciphertext,cn);
	exit(9);
	}

    if(!EVP_DecryptInit_ex(&ctx,c,NULL,key,iv))
	{
	fprintf(stderr,"DecryptInit failed\n");
	exit(11);
	}
    EVP_CIPHER_CTX_set_padding(&ctx,0);

    if(!EVP_DecryptUpdate(&ctx,out,&outl,ciphertext,pn))
	{
	fprintf(stderr,"Decrypt failed\n");
	exit(6);
	}
    if(!EVP_DecryptFinal_ex(&ctx,out+outl,&outl2))
	{
	fprintf(stderr,"DecryptFinal failed\n");
	exit(7);
	}

    if(outl+outl2 != cn)
	{
	fprintf(stderr,"Plaintext length mismatch got %d expected %d\n",
		outl+outl2,cn);
	exit(8);
	}

    if(memcmp(out,plaintext,cn))
	{
	fprintf(stderr,"Plaintext mismatch\n");
	hexdump(stderr,"Got",out,cn);
	hexdump(stderr,"Expected",plaintext,cn);
	exit(9);
d228 2
a229 1
		       const unsigned char *ciphertext,int cn)
d237 1
a237 1
    test1(c,key,kn,iv,in,plaintext,pn,ciphertext,cn);
d344 1
d356 8
a363 1
	ciphertext=ustrsep(&p,"\n");
d370 1
a370 1
	if(!test_cipher(cipher,key,kn,iv,in,plaintext,pn,ciphertext,cn)
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d212 2
d283 2
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d126 1
a126 2
		  const unsigned char *ciphertext,int cn,
		  int encdec)
d132 1
a132 2
    printf("Testing cipher %s%s\n",EVP_CIPHER_name(c),
	   (encdec == 1 ? "(encrypt)" : (encdec == 0 ? "(decrypt)" : "(encrypt/decrypt)")));
d146 16
a161 70
    if (encdec != 0)
        {
	if(!EVP_EncryptInit_ex(&ctx,c,NULL,key,iv))
	    {
	    fprintf(stderr,"EncryptInit failed\n");
	    exit(10);
	    }
	EVP_CIPHER_CTX_set_padding(&ctx,0);

	if(!EVP_EncryptUpdate(&ctx,out,&outl,plaintext,pn))
	    {
	    fprintf(stderr,"Encrypt failed\n");
	    exit(6);
	    }
	if(!EVP_EncryptFinal_ex(&ctx,out+outl,&outl2))
	    {
	    fprintf(stderr,"EncryptFinal failed\n");
	    exit(7);
	    }

	if(outl+outl2 != cn)
	    {
	    fprintf(stderr,"Ciphertext length mismatch got %d expected %d\n",
		    outl+outl2,cn);
	    exit(8);
	    }

	if(memcmp(out,ciphertext,cn))
	    {
	    fprintf(stderr,"Ciphertext mismatch\n");
	    hexdump(stderr,"Got",out,cn);
	    hexdump(stderr,"Expected",ciphertext,cn);
	    exit(9);
	    }
	}

    if (encdec <= 0)
        {
	if(!EVP_DecryptInit_ex(&ctx,c,NULL,key,iv))
	    {
	    fprintf(stderr,"DecryptInit failed\n");
	    exit(11);
	    }
	EVP_CIPHER_CTX_set_padding(&ctx,0);

	if(!EVP_DecryptUpdate(&ctx,out,&outl,ciphertext,cn))
	    {
	    fprintf(stderr,"Decrypt failed\n");
	    exit(6);
	    }
	if(!EVP_DecryptFinal_ex(&ctx,out+outl,&outl2))
	    {
	    fprintf(stderr,"DecryptFinal failed\n");
	    exit(7);
	    }

	if(outl+outl2 != cn)
	    {
	    fprintf(stderr,"Plaintext length mismatch got %d expected %d\n",
		    outl+outl2,cn);
	    exit(8);
	    }

	if(memcmp(out,plaintext,cn))
	    {
	    fprintf(stderr,"Plaintext mismatch\n");
	    hexdump(stderr,"Got",out,cn);
	    hexdump(stderr,"Expected",plaintext,cn);
	    exit(9);
	    }
d164 47
a210 1
    EVP_CIPHER_CTX_cleanup(&ctx);
d218 1
a218 2
		       const unsigned char *ciphertext,int cn,
		       int encdec)
d226 1
a226 1
    test1(c,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec);
a281 2
    EVP_MD_CTX_cleanup(&ctx);

a330 1
	int encdec;
d342 1
a342 8
	ciphertext=ustrsep(&p,":");
	if (p[-1] == '\n') {
	    p[-1] = '\0';
	    encdec = -1;
	} else {
	    encdec = atoi(strsep(&p,"\n"));
	}
	      
d349 1
a349 1
	if(!test_cipher(cipher,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec)
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d121 1
a121 1
    { return (unsigned char *)sstrsep(p,sep); }
d361 1
a361 1
	    encdec = atoi(sstrsep(&p,"\n"));
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a51 3

#include "../e_os.h"

a52 1
#ifndef OPENSSL_NO_ENGINE
a53 2
#endif
#include <openssl/err.h>
d81 1
a81 1
	    EXIT(4);
a122 6
static int test1_exit(int ec)
	{
	EXIT(ec);
	return(0);		/* To keep some compilers quiet */
	}

d145 1
a145 1
	test1_exit(5);
d153 1
a153 1
	    test1_exit(10);
d160 1
a160 1
	    test1_exit(6);
d165 1
a165 1
	    test1_exit(7);
d172 1
a172 1
	    test1_exit(8);
d180 1
a180 1
	    test1_exit(9);
d189 1
a189 1
	    test1_exit(11);
d196 1
a196 1
	    test1_exit(6);
d201 1
a201 1
	    test1_exit(7);
d208 1
a208 1
	    test1_exit(8);
d216 1
a216 1
	    test1_exit(9);
d263 1
a263 1
	EXIT(100);
d268 1
a268 1
	EXIT(101);
d273 1
a273 1
	EXIT(101);
d280 1
a280 1
	EXIT(102);
d288 1
a288 1
	EXIT(103);
d306 1
a306 1
	EXIT(1);
d318 1
a318 1
	EXIT(2);
a323 1
#ifndef OPENSSL_NO_ENGINE
a325 1
#endif
a328 1
#ifndef OPENSSL_NO_ENGINE
a336 1
#endif
d374 1
a374 1
	    EXIT(3);
a377 1
#ifndef OPENSSL_NO_ENGINE
a378 1
#endif
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d139 1
a139 1
		  int encdec,int multiplier)
a164 1
	    ERR_print_errors_fp(stderr);
d169 1
a169 1
	if(!EVP_EncryptUpdate(&ctx,out,&outl,plaintext,pn*multiplier))
a171 1
	    ERR_print_errors_fp(stderr);
a176 1
	    ERR_print_errors_fp(stderr);
d180 1
a180 1
	if(outl+outl2 != cn*multiplier)
a200 1
	    ERR_print_errors_fp(stderr);
d205 1
a205 1
	if(!EVP_DecryptUpdate(&ctx,out,&outl,ciphertext,cn*multiplier))
a207 1
	    ERR_print_errors_fp(stderr);
a212 1
	    ERR_print_errors_fp(stderr);
d216 1
a216 1
	if(outl+outl2 != cn*multiplier)
d241 1
a241 1
		       int encdec,int multiplier)
d249 1
a249 1
    test1(c,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec,multiplier);
a274 1
	ERR_print_errors_fp(stderr);
a279 1
	ERR_print_errors_fp(stderr);
a284 1
	ERR_print_errors_fp(stderr);
a361 1
	int multiplier=1;
d386 1
a386 9
	if(strchr(cipher,'*'))
	    {
	    p=cipher;
	    sstrsep(&p,"*");
	    multiplier=atoi(sstrsep(&p,"*"));
	    }

	if(!test_cipher(cipher,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec,
			multiplier)
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@a54 1
#include <openssl/opensslconf.h>
d139 1
a139 1
		  int encdec)
d170 1
a170 1
	if(!EVP_EncryptUpdate(&ctx,out,&outl,plaintext,pn))
d183 1
a183 1
	if(outl+outl2 != cn)
d209 1
a209 1
	if(!EVP_DecryptUpdate(&ctx,out,&outl,ciphertext,cn))
d222 1
a222 1
	if(outl+outl2 != cn)
d247 1
a247 1
		       int encdec)
d255 1
a255 1
    test1(c,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec);
d371 1
d396 9
a404 1
	if(!test_cipher(cipher,key,kn,iv,in,plaintext,pn,ciphertext,cn,encdec)
a406 35
#ifdef OPENSSL_NO_AES
	    if (strstr(cipher, "AES") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
#ifdef OPENSSL_NO_DES
	    if (strstr(cipher, "DES") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
#ifdef OPENSSL_NO_RC4
	    if (strstr(cipher, "RC4") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
#ifdef OPENSSL_NO_CAMELLIA
	    if (strstr(cipher, "CAMELLIA") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
#ifdef OPENSSL_NO_SEED
	    if (strstr(cipher, "SEED") == cipher)
		{
		fprintf(stdout, "Cipher disabled, skipping %s\n", cipher); 
		continue;
		}
#endif
@


1.1.1.6
log
@import of OpenSSL 0.9.8k
@
text
@d223 1
a223 1
	if(outl+outl2 != pn)
d226 1
a226 1
		    outl+outl2,pn);
d230 1
a230 1
	if(memcmp(out,plaintext,pn))
d233 2
a234 2
	    hexdump(stderr,"Got",out,pn);
	    hexdump(stderr,"Expected",plaintext,pn);
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d156 2
a157 2
	fprintf(stderr,"Key length doesn't match, got %d expected %lu\n",kn,
		(unsigned long)c->key_len);
d444 1
a444 1
    ERR_remove_thread_state(NULL);
@


1.1.1.8
log
@import OpenSSL 1.0.0e
@
text
@a437 1
	fclose(f);
@


