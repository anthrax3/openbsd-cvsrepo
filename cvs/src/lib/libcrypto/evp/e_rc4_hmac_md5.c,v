head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2017.01.31.13.17.21;	author inoguchi;	state Exp;
branches;
next	1.7;
commitid	AsClCxJVtjsC29vv;

1.7
date	2016.11.05.10.47.57;	author miod;	state Exp;
branches;
next	1.6;
commitid	7vRgVxTh6HzoBwKT;

1.6
date	2016.11.04.17.30.30;	author miod;	state Exp;
branches;
next	1.5;
commitid	uVQFi30uotTYOUA9;

1.5
date	2014.08.11.13.29.43;	author bcook;	state Exp;
branches;
next	1.4;
commitid	h9IiVTb1czdk2VRe;

1.4
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.3;
commitid	nzndm3zqPmFurSaK;

1.3
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.05.08.15.13.06;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@LibreSSL : Truncated packet could crash via OOB read

This patch is originally from master branch of OpenSSL.
- 2198b3a crypto/evp: harden AEAD ciphers.
- 8e20499 crypto/evp: harden RC4_MD5 cipher.

ok tom@@
@
text
@/* $OpenBSD: e_rc4_hmac_md5.c,v 1.7 2016/11/05 10:47:57 miod Exp $ */
/* ====================================================================
 * Copyright (c) 2011 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#if !defined(OPENSSL_NO_RC4) && !defined(OPENSSL_NO_MD5)

#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/rc4.h>
#include <openssl/md5.h>

/* FIXME: surely this is available elsewhere? */
#define EVP_RC4_KEY_SIZE		16

typedef struct {
	RC4_KEY		ks;
	MD5_CTX		head, tail, md;
	size_t		payload_length;
} EVP_RC4_HMAC_MD5;

#define NO_PAYLOAD_LENGTH	((size_t)-1)

void rc4_md5_enc (RC4_KEY *key, const void *in0, void *out,
    MD5_CTX *ctx, const void *inp, size_t blocks);

#define data(ctx) ((EVP_RC4_HMAC_MD5 *)(ctx)->cipher_data)

static int
rc4_hmac_md5_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *inkey,
    const unsigned char *iv, int enc)
{
	EVP_RC4_HMAC_MD5 *key = data(ctx);

	RC4_set_key(&key->ks, EVP_CIPHER_CTX_key_length(ctx), inkey);

	MD5_Init(&key->head);	/* handy when benchmarking */
	key->tail = key->head;
	key->md = key->head;

	key->payload_length = NO_PAYLOAD_LENGTH;

	return 1;
}

#if	!defined(OPENSSL_NO_ASM) && defined(RC4_MD5_ASM) &&	( \
	defined(__x86_64)	|| defined(__x86_64__)	|| \
	defined(_M_AMD64)	|| defined(_M_X64)	|| \
	defined(__INTEL__)		) && \
	!(defined(__APPLE__) && defined(__MACH__))
#define	STITCHED_CALL
#include "x86_arch.h"
#endif

#if !defined(STITCHED_CALL)
#define	rc4_off 0
#define	md5_off 0
#endif

static int
rc4_hmac_md5_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, size_t len)
{
	EVP_RC4_HMAC_MD5 *key = data(ctx);
#if defined(STITCHED_CALL)
	size_t	rc4_off = 32-1-(key->ks.x&(32-1)),	/* 32 is $MOD from rc4_md5-x86_64.pl */
	md5_off = MD5_CBLOCK - key->md.num,
	    blocks;
	unsigned int l;
#endif
	size_t	plen = key->payload_length;

	if (plen != NO_PAYLOAD_LENGTH && len != (plen + MD5_DIGEST_LENGTH))
		return 0;

	if (ctx->encrypt) {
		if (plen == NO_PAYLOAD_LENGTH)
			plen = len;
#if defined(STITCHED_CALL)
		/* cipher has to "fall behind" */
		if (rc4_off > md5_off)
			md5_off += MD5_CBLOCK;

		if (plen > md5_off &&
		    (blocks = (plen - md5_off) / MD5_CBLOCK) &&
		    (OPENSSL_cpu_caps() & CPUCAP_MASK_INTELP4) == 0) {
			MD5_Update(&key->md, in, md5_off);
			RC4(&key->ks, rc4_off, in, out);

			rc4_md5_enc(&key->ks, in + rc4_off, out + rc4_off,
			    &key->md, in + md5_off, blocks);
			blocks *= MD5_CBLOCK;
			rc4_off += blocks;
			md5_off += blocks;
			key->md.Nh += blocks >> 29;
			key->md.Nl += blocks <<= 3;
			if (key->md.Nl < (unsigned int)blocks)
				key->md.Nh++;
		} else {
			rc4_off = 0;
			md5_off = 0;
		}
#endif
		MD5_Update(&key->md, in + md5_off, plen - md5_off);

		if (plen!=len) {	/* "TLS" mode of operation */
			if (in != out)
				memcpy(out + rc4_off, in + rc4_off,
				    plen - rc4_off);

			/* calculate HMAC and append it to payload */
			MD5_Final(out + plen, &key->md);
			key->md = key->tail;
			MD5_Update(&key->md, out + plen, MD5_DIGEST_LENGTH);
			MD5_Final(out + plen, &key->md);

			/* encrypt HMAC at once */
			RC4(&key->ks, len - rc4_off, out + rc4_off,
			    out + rc4_off);
		} else {
			RC4(&key->ks, len - rc4_off, in + rc4_off,
			    out + rc4_off);
		}
	} else {
		unsigned char mac[MD5_DIGEST_LENGTH];
#if defined(STITCHED_CALL)
		/* digest has to "fall behind" */
		if (md5_off > rc4_off)
			rc4_off += 2*MD5_CBLOCK;
		else
			rc4_off += MD5_CBLOCK;

		if (len > rc4_off && (blocks = (len - rc4_off) / MD5_CBLOCK) &&
		    (OPENSSL_cpu_caps() & CPUCAP_MASK_INTELP4) == 0) {
			RC4(&key->ks, rc4_off, in, out);
			MD5_Update(&key->md, out, md5_off);

			rc4_md5_enc(&key->ks, in + rc4_off, out + rc4_off,
			    &key->md, out + md5_off, blocks);
			blocks *= MD5_CBLOCK;
			rc4_off += blocks;
			md5_off += blocks;
			l = (key->md.Nl + (blocks << 3)) & 0xffffffffU;
			if (l < key->md.Nl)
				key->md.Nh++;
			key->md.Nl = l;
			key->md.Nh += blocks >> 29;
		} else {
			md5_off = 0;
			rc4_off = 0;
		}
#endif
		/* decrypt HMAC at once */
		RC4(&key->ks, len - rc4_off, in + rc4_off, out + rc4_off);
		if (plen!=NO_PAYLOAD_LENGTH) {	/* "TLS" mode of operation */
			MD5_Update(&key->md, out + md5_off, plen - md5_off);

			/* calculate HMAC and verify it */
			MD5_Final(mac, &key->md);
			key->md = key->tail;
			MD5_Update(&key->md, mac, MD5_DIGEST_LENGTH);
			MD5_Final(mac, &key->md);

			if (memcmp(out + plen, mac, MD5_DIGEST_LENGTH))
				return 0;
		} else {
			MD5_Update(&key->md, out + md5_off, len - md5_off);
		}
	}

	key->payload_length = NO_PAYLOAD_LENGTH;

	return 1;
}

static int
rc4_hmac_md5_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
{
	EVP_RC4_HMAC_MD5 *key = data(ctx);

	switch (type) {
	case EVP_CTRL_AEAD_SET_MAC_KEY:
		{
			unsigned int  i;
			unsigned char hmac_key[64];

			memset (hmac_key, 0, sizeof(hmac_key));

			if (arg > (int)sizeof(hmac_key)) {
				MD5_Init(&key->head);
				MD5_Update(&key->head, ptr, arg);
				MD5_Final(hmac_key, &key->head);
			} else {
				memcpy(hmac_key, ptr, arg);
			}

			for (i = 0; i < sizeof(hmac_key); i++)
				hmac_key[i] ^= 0x36;		/* ipad */
			MD5_Init(&key->head);
			MD5_Update(&key->head, hmac_key, sizeof(hmac_key));

			for (i = 0; i < sizeof(hmac_key); i++)
				hmac_key[i] ^= 0x36 ^ 0x5c;	/* opad */
			MD5_Init(&key->tail);
			MD5_Update(&key->tail, hmac_key, sizeof(hmac_key));

			return 1;
		}
	case EVP_CTRL_AEAD_TLS1_AAD:
		{
			unsigned char *p = ptr;
			unsigned int len = p[arg - 2] << 8 | p[arg - 1];

			if (!ctx->encrypt) {
				if (len < MD5_DIGEST_LENGTH)
					return -1;
				len -= MD5_DIGEST_LENGTH;
				p[arg - 2] = len >> 8;
				p[arg - 1] = len;
			}
			key->payload_length = len;
			key->md = key->head;
			MD5_Update(&key->md, p, arg);

			return MD5_DIGEST_LENGTH;
		}
	default:
		return -1;
	}
}

static EVP_CIPHER r4_hmac_md5_cipher = {
#ifdef NID_rc4_hmac_md5
	NID_rc4_hmac_md5,
#else
	NID_undef,
#endif
	1, EVP_RC4_KEY_SIZE, 0,
	EVP_CIPH_STREAM_CIPHER|EVP_CIPH_VARIABLE_LENGTH|EVP_CIPH_FLAG_AEAD_CIPHER,
	rc4_hmac_md5_init_key,
	rc4_hmac_md5_cipher,
	NULL,
	sizeof(EVP_RC4_HMAC_MD5),
	NULL,
	NULL,
	rc4_hmac_md5_ctrl,
	NULL
};

const EVP_CIPHER *
EVP_rc4_hmac_md5(void)
{
	return (&r4_hmac_md5_cipher);
}
#endif
@


1.7
log
@No need to duplicate definitions from evp.h locally.

ok bock@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc4_hmac_md5.c,v 1.6 2016/11/04 17:30:30 miod Exp $ */
d265 2
@


1.6
log
@Replace all uses of magic numbers when operating on OPENSSL_ia32_P[] by
meaningful constants in a private header file, so that reviewers can actually
get a chance to figure out what the code is attempting to do without knowing
all cpuid bits.

While there, turn it from an array of two 32-bit ints into a properly aligned
64-bit int.

Use of OPENSSL_ia32_P is now restricted to the assembler parts. C code will
now always use OPENSSL_cpu_caps() and check for the proper bits in the
whole 64-bit word it returns.

i386 tests and ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc4_hmac_md5.c,v 1.5 2014/08/11 13:29:43 bcook Exp $ */
a61 6

#ifndef EVP_CIPH_FLAG_AEAD_CIPHER
#define EVP_CIPH_FLAG_AEAD_CIPHER	0x200000
#define EVP_CTRL_AEAD_TLS1_AAD		0x16
#define EVP_CTRL_AEAD_SET_MAC_KEY	0x17
#endif
@


1.5
log
@Guard RSA / RC4-5 ASM when NO_ASM is not defined

Most assembly blocks remain inactive if OPENSSL_NO_ASM is not defined,
only enabling inline assembly, but the RSA / RC4-5 blocks (used only in
amd64 systems) turn on implicitly. Guard these two as well.

This simplifies enabling just inline ASM in portable, no effective
change in OpenBSD.
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc4_hmac_md5.c,v 1.4 2014/07/10 22:45:57 jsing Exp $ */
d108 1
a125 1
	extern unsigned int OPENSSL_ia32cap_P[];
d142 1
a142 1
		    (OPENSSL_ia32cap_P[0]&(1 << 20)) == 0) {
d190 1
a190 1
		    (OPENSSL_ia32cap_P[0] & (1 << 20)) == 0) {
@


1.4
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: e_rc4_hmac_md5.c,v 1.3 2014/06/12 15:49:29 deraadt Exp $ */
d102 1
a102 1
#if	!defined(OPENSSL_NO_ASM) &&	( \
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a50 2
#include <openssl/opensslconf.h>

d53 2
@


1.2
log
@KNF.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d71 5
a75 6
typedef struct
    {
    RC4_KEY		ks;
    MD5_CTX		head,tail,md;
    size_t		payload_length;
    } EVP_RC4_HMAC_MD5;
d80 1
a80 1
		MD5_CTX *ctx,const void *inp,size_t blocks);
d84 4
a87 4
static int rc4_hmac_md5_init_key(EVP_CIPHER_CTX *ctx,
			const unsigned char *inkey,
			const unsigned char *iv, int enc)
	{
d90 1
a90 2
	RC4_set_key(&key->ks,EVP_CIPHER_CTX_key_length(ctx),
		    inkey);
d94 1
a94 1
	key->md   = key->head;
d99 1
a99 1
	}
d114 4
a117 3
static int rc4_hmac_md5_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
		      const unsigned char *in, size_t len)
	{
d121 2
a122 2
		md5_off = MD5_CBLOCK-key->md.num,
		blocks;
d128 2
a129 1
	if (plen!=NO_PAYLOAD_LENGTH && len!=(plen+MD5_DIGEST_LENGTH)) return 0;
d132 2
a133 1
		if (plen==NO_PAYLOAD_LENGTH) plen = len;
d136 2
a137 1
		if (rc4_off>md5_off) md5_off+=MD5_CBLOCK;
d139 5
a143 4
		if (plen>md5_off && (blocks=(plen-md5_off)/MD5_CBLOCK) &&
		    (OPENSSL_ia32cap_P[0]&(1<<20))==0) {
			MD5_Update(&key->md,in,md5_off);
			RC4(&key->ks,rc4_off,in,out);
d145 2
a146 2
			rc4_md5_enc(&key->ks,in+rc4_off,out+rc4_off,
				&key->md,in+md5_off,blocks);
d150 4
a153 3
			key->md.Nh += blocks>>29;
			key->md.Nl += blocks<<=3;
			if (key->md.Nl<(unsigned int)blocks) key->md.Nh++;
d159 1
a159 1
		MD5_Update(&key->md,in+md5_off,plen-md5_off);
d162 3
a164 2
			if (in!=out)
				memcpy(out+rc4_off,in+rc4_off,plen-rc4_off);
d167 1
a167 1
			MD5_Final(out+plen,&key->md);
d169 3
a171 2
			MD5_Update(&key->md,out+plen,MD5_DIGEST_LENGTH);
			MD5_Final(out+plen,&key->md);
d173 2
a174 1
			RC4(&key->ks,len-rc4_off,out+rc4_off,out+rc4_off);
d176 2
a177 1
			RC4(&key->ks,len-rc4_off,in+rc4_off,out+rc4_off);
d183 9
a191 2
		if (md5_off>rc4_off)	rc4_off += 2*MD5_CBLOCK;
		else			rc4_off += MD5_CBLOCK;
d193 2
a194 7
		if (len>rc4_off && (blocks=(len-rc4_off)/MD5_CBLOCK) &&
		    (OPENSSL_ia32cap_P[0]&(1<<20))==0) {
			RC4(&key->ks,rc4_off,in,out);
			MD5_Update(&key->md,out,md5_off);

			rc4_md5_enc(&key->ks,in+rc4_off,out+rc4_off,
				&key->md,out+md5_off,blocks);
d198 5
a202 4
			l = (key->md.Nl+(blocks<<3))&0xffffffffU;
			if (l<key->md.Nl) key->md.Nh++;
			key->md.Nl  = l;
			key->md.Nh += blocks>>29;
d204 2
a205 2
			md5_off=0;
			rc4_off=0;
d209 1
a209 1
		RC4(&key->ks,len-rc4_off,in+rc4_off,out+rc4_off);
d211 1
a211 1
			MD5_Update(&key->md,out+md5_off,plen-md5_off);
d214 1
a214 1
			MD5_Final(mac,&key->md);
d216 2
a217 2
			MD5_Update(&key->md,mac,MD5_DIGEST_LENGTH);
			MD5_Final(mac,&key->md);
d219 1
a219 1
			if (memcmp(out+plen,mac,MD5_DIGEST_LENGTH))
d222 1
a222 1
			MD5_Update(&key->md,out+md5_off,len-md5_off);
d229 1
a229 1
	}
d231 3
a233 2
static int rc4_hmac_md5_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
	{
d236 1
a236 2
	switch (type)
		{
d239 2
a240 2
		unsigned int  i;
		unsigned char hmac_key[64];
d242 1
a242 1
		memset (hmac_key,0,sizeof(hmac_key));
d244 10
a253 1
		if (arg > (int)sizeof(hmac_key)) {
d255 1
a255 5
			MD5_Update(&key->head,ptr,arg);
			MD5_Final(hmac_key,&key->head);
		} else {
			memcpy(hmac_key,ptr,arg);
		}
d257 4
a260 4
		for (i=0;i<sizeof(hmac_key);i++)
			hmac_key[i] ^= 0x36;		/* ipad */
		MD5_Init(&key->head);
		MD5_Update(&key->head,hmac_key,sizeof(hmac_key));
d262 1
a262 6
		for (i=0;i<sizeof(hmac_key);i++)
			hmac_key[i] ^= 0x36^0x5c;	/* opad */
		MD5_Init(&key->tail);
		MD5_Update(&key->tail,hmac_key,sizeof(hmac_key));

		return 1;
d266 2
a267 2
		unsigned char *p=ptr;
		unsigned int   len=p[arg-2]<<8|p[arg-1];
d269 4
a272 5
		if (!ctx->encrypt)
			{
			len -= MD5_DIGEST_LENGTH;
			p[arg-2] = len>>8;
			p[arg-1] = len;
d274 3
a276 3
		key->payload_length=len;
		key->md = key->head;
		MD5_Update(&key->md,p,arg);
d278 1
a278 1
		return MD5_DIGEST_LENGTH;
a281 1
		}
d283 1
d285 1
a285 2
static EVP_CIPHER r4_hmac_md5_cipher=
	{
d291 1
a291 1
	1,EVP_RC4_KEY_SIZE,0,
d301 1
a301 1
	};
d303 5
a307 4
const EVP_CIPHER *EVP_rc4_hmac_md5(void)
	{
	return(&r4_hmac_md5_cipher);
	}
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@
