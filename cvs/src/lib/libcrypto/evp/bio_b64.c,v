head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.6
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20;
locks; strict;
comment	@ * @;


1.20
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.19;
commitid	gtwLkRyWx0K1HbzX;

1.19
date	2014.07.11.12.04.46;	author miod;	state Exp;
branches;
next	1.18;
commitid	zvjhqs97lW8EWByQ;

1.18
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.16;
commitid	id8dTrTMtnTn4fqt;

1.16
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	2nvnQBrv22dLtvTt;

1.14
date	2014.05.11.12.20.20;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.03.16.22.28;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.39;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.08;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.35;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.26;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.18;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.11.21.15.15;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@/* $OpenBSD: bio_b64.c,v 1.19 2014/07/11 12:04:46 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/evp.h>

static int b64_write(BIO *h, const char *buf, int num);
static int b64_read(BIO *h, char *buf, int size);
static int b64_puts(BIO *h, const char *str);
/*static int b64_gets(BIO *h, char *str, int size); */
static long b64_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int b64_new(BIO *h);
static int b64_free(BIO *data);
static long b64_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);
#define B64_BLOCK_SIZE	1024
#define B64_BLOCK_SIZE2	768
#define B64_NONE	0
#define B64_ENCODE	1
#define B64_DECODE	2

typedef struct b64_struct {
	/*BIO *bio; moved to the BIO structure */
	int buf_len;
	int buf_off;
	int tmp_len;		/* used to find the start when decoding */
	int tmp_nl;		/* If true, scan until '\n' */
	int encode;
	int start;		/* have we started decoding yet? */
	int cont;		/* <= 0 when finished */
	EVP_ENCODE_CTX base64;
	char buf[EVP_ENCODE_LENGTH(B64_BLOCK_SIZE) + 10];
	char tmp[B64_BLOCK_SIZE];
} BIO_B64_CTX;

static BIO_METHOD methods_b64 = {
	.type = BIO_TYPE_BASE64,
	.name = "base64 encoding",
	.bwrite = b64_write,
	.bread = b64_read,
	.bputs = b64_puts,
	.ctrl = b64_ctrl,
	.create = b64_new,
	.destroy = b64_free,
	.callback_ctrl = b64_callback_ctrl
};

BIO_METHOD *
BIO_f_base64(void)
{
	return (&methods_b64);
}

static int
b64_new(BIO *bi)
{
	BIO_B64_CTX *ctx;

	ctx = malloc(sizeof(BIO_B64_CTX));
	if (ctx == NULL)
		return (0);

	ctx->buf_len = 0;
	ctx->tmp_len = 0;
	ctx->tmp_nl = 0;
	ctx->buf_off = 0;
	ctx->cont = 1;
	ctx->start = 1;
	ctx->encode = 0;

	bi->init = 1;
	bi->ptr = (char *)ctx;
	bi->flags = 0;
	bi->num = 0;
	return (1);
}

static int
b64_free(BIO *a)
{
	if (a == NULL)
		return (0);
	free(a->ptr);
	a->ptr = NULL;
	a->init = 0;
	a->flags = 0;
	return (1);
}

static int
b64_read(BIO *b, char *out, int outl)
{
	int ret = 0, i, ii, j, k, x, n, num, ret_code = 0;
	BIO_B64_CTX *ctx;
	unsigned char *p, *q;

	if (out == NULL)
		return (0);
	ctx = (BIO_B64_CTX *)b->ptr;

	if ((ctx == NULL) || (b->next_bio == NULL))
		return (0);

	BIO_clear_retry_flags(b);

	if (ctx->encode != B64_DECODE) {
		ctx->encode = B64_DECODE;
		ctx->buf_len = 0;
		ctx->buf_off = 0;
		ctx->tmp_len = 0;
		EVP_DecodeInit(&(ctx->base64));
	}

	/* First check if there are bytes decoded/encoded */
	if (ctx->buf_len > 0) {
		OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
		i = ctx->buf_len - ctx->buf_off;
		if (i > outl)
			i = outl;
		OPENSSL_assert(ctx->buf_off + i < (int)sizeof(ctx->buf));
		memcpy(out, &(ctx->buf[ctx->buf_off]), i);
		ret = i;
		out += i;
		outl -= i;
		ctx->buf_off += i;
		if (ctx->buf_len == ctx->buf_off) {
			ctx->buf_len = 0;
			ctx->buf_off = 0;
		}
	}

	/* At this point, we have room of outl bytes and an empty
	 * buffer, so we should read in some more. */

	ret_code = 0;
	while (outl > 0) {
		if (ctx->cont <= 0)
			break;

		i = BIO_read(b->next_bio, &(ctx->tmp[ctx->tmp_len]),
		    B64_BLOCK_SIZE - ctx->tmp_len);

		if (i <= 0) {
			ret_code = i;

			/* Should we continue next time we are called? */
			if (!BIO_should_retry(b->next_bio)) {
				ctx->cont = i;
				/* If buffer empty break */
				if (ctx->tmp_len == 0)
					break;
				/* Fall through and process what we have */
				else
					i = 0;
			}
			/* else we retry and add more data to buffer */
			else
				break;
		}
		i += ctx->tmp_len;
		ctx->tmp_len = i;

		/* We need to scan, a line at a time until we
		 * have a valid line if we are starting. */
		if (ctx->start && (BIO_get_flags(b) & BIO_FLAGS_BASE64_NO_NL)) {
			/* ctx->start=1; */
			ctx->tmp_len = 0;
		} else if (ctx->start) {
			q = p =(unsigned char *)ctx->tmp;
			num = 0;
			for (j = 0; j < i; j++) {
				if (*(q++) != '\n')
					continue;

				/* due to a previous very long line,
				 * we need to keep on scanning for a '\n'
				 * before we even start looking for
				 * base64 encoded stuff. */
				if (ctx->tmp_nl) {
					p = q;
					ctx->tmp_nl = 0;
					continue;
				}

				k = EVP_DecodeUpdate(&(ctx->base64),
				    (unsigned char *)ctx->buf,
				    &num, p, q - p);
				if ((k <= 0) && (num == 0) && (ctx->start))
					EVP_DecodeInit(&ctx->base64);
				else {
					if (p != (unsigned char *)
						&(ctx->tmp[0])) {
						i -= (p - (unsigned char *)
						&(ctx->tmp[0]));
						for (x = 0; x < i; x++)
							ctx->tmp[x] = p[x];
					}
					EVP_DecodeInit(&ctx->base64);
					ctx->start = 0;
					break;
				}
				p = q;
			}

			/* we fell off the end without starting */
			if ((j == i) && (num == 0)) {
				/* Is this is one long chunk?, if so, keep on
				 * reading until a new line. */
				if (p == (unsigned char *)&(ctx->tmp[0])) {
					/* Check buffer full */
					if (i == B64_BLOCK_SIZE) {
						ctx->tmp_nl = 1;
						ctx->tmp_len = 0;
					}
				}
				else if (p != q) /* finished on a '\n' */
				{
					n = q - p;
					for (ii = 0; ii < n; ii++)
						ctx->tmp[ii] = p[ii];
					ctx->tmp_len = n;
				}
				/* else finished on a '\n' */
				continue;
			} else {
				ctx->tmp_len = 0;
			}
		} else if ((i < B64_BLOCK_SIZE) && (ctx->cont > 0)) {
			/* If buffer isn't full and we can retry then
			 * restart to read in more data.
			 */
			continue;
		}

		if (BIO_get_flags(b) & BIO_FLAGS_BASE64_NO_NL) {
			int z, jj;

			jj = i & ~3; /* process per 4 */
			z = EVP_DecodeBlock((unsigned char *)ctx->buf,
			    (unsigned char *)ctx->tmp, jj);
			if (jj > 2) {
				if (ctx->tmp[jj-1] == '=') {
					z--;
					if (ctx->tmp[jj-2] == '=')
						z--;
				}
			}
			/* z is now number of output bytes and jj is the
			 * number consumed */
			if (jj != i) {
				memmove(ctx->tmp, &ctx->tmp[jj], i - jj);
				ctx->tmp_len = i - jj;
			}
			ctx->buf_len = 0;
			if (z > 0) {
				ctx->buf_len = z;
			}
			i = z;
		} else {
			i = EVP_DecodeUpdate(&(ctx->base64),
			    (unsigned char *)ctx->buf, &ctx->buf_len,
			    (unsigned char *)ctx->tmp, i);
			ctx->tmp_len = 0;
		}
		ctx->buf_off = 0;
		if (i < 0) {
			ret_code = 0;
			ctx->buf_len = 0;
			break;
		}

		if (ctx->buf_len <= outl)
			i = ctx->buf_len;
		else
			i = outl;

		memcpy(out, ctx->buf, i);
		ret += i;
		ctx->buf_off = i;
		if (ctx->buf_off == ctx->buf_len) {
			ctx->buf_len = 0;
			ctx->buf_off = 0;
		}
		outl -= i;
		out += i;
	}
	/* BIO_clear_retry_flags(b); */
	BIO_copy_next_retry(b);
	return ((ret == 0) ? ret_code : ret);
}

static int
b64_write(BIO *b, const char *in, int inl)
{
	int ret = 0;
	int n;
	int i;
	BIO_B64_CTX *ctx;

	ctx = (BIO_B64_CTX *)b->ptr;
	BIO_clear_retry_flags(b);

	if (ctx->encode != B64_ENCODE) {
		ctx->encode = B64_ENCODE;
		ctx->buf_len = 0;
		ctx->buf_off = 0;
		ctx->tmp_len = 0;
		EVP_EncodeInit(&(ctx->base64));
	}

	OPENSSL_assert(ctx->buf_off < (int)sizeof(ctx->buf));
	OPENSSL_assert(ctx->buf_len <= (int)sizeof(ctx->buf));
	OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
	n = ctx->buf_len - ctx->buf_off;
	while (n > 0) {
		i = BIO_write(b->next_bio, &(ctx->buf[ctx->buf_off]), n);
		if (i <= 0) {
			BIO_copy_next_retry(b);
			return (i);
		}
		OPENSSL_assert(i <= n);
		ctx->buf_off += i;
		OPENSSL_assert(ctx->buf_off <= (int)sizeof(ctx->buf));
		OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
		n -= i;
	}
	/* at this point all pending data has been written */
	ctx->buf_off = 0;
	ctx->buf_len = 0;

	if ((in == NULL) || (inl <= 0))
		return (0);

	while (inl > 0) {
		n = (inl > B64_BLOCK_SIZE) ? B64_BLOCK_SIZE : inl;

		if (BIO_get_flags(b) & BIO_FLAGS_BASE64_NO_NL) {
			if (ctx->tmp_len > 0) {
				OPENSSL_assert(ctx->tmp_len <= 3);
				n = 3 - ctx->tmp_len;
				/* There's a theoretical possibility for this */
				if (n > inl)
					n = inl;
				memcpy(&(ctx->tmp[ctx->tmp_len]), in, n);
				ctx->tmp_len += n;
				ret += n;
				if (ctx->tmp_len < 3)
					break;
				ctx->buf_len = EVP_EncodeBlock(
				    (unsigned char *)ctx->buf,
				    (unsigned char *)ctx->tmp, ctx->tmp_len);
				OPENSSL_assert(ctx->buf_len <=
				    (int)sizeof(ctx->buf));
				OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
				/* Since we're now done using the temporary
				   buffer, the length should be 0'd */
				ctx->tmp_len = 0;
			} else {
				if (n < 3) {
					memcpy(ctx->tmp, in, n);
					ctx->tmp_len = n;
					ret += n;
					break;
				}
				n -= n % 3;
				ctx->buf_len = EVP_EncodeBlock(
				    (unsigned char *)ctx->buf,
				    (const unsigned char *)in, n);
				OPENSSL_assert(ctx->buf_len <=
				    (int)sizeof(ctx->buf));
				OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
				ret += n;
			}
		} else {
			EVP_EncodeUpdate(&(ctx->base64),
			    (unsigned char *)ctx->buf, &ctx->buf_len,
			    (unsigned char *)in, n);
			OPENSSL_assert(ctx->buf_len <= (int)sizeof(ctx->buf));
			OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
			ret += n;
		}
		inl -= n;
		in += n;

		ctx->buf_off = 0;
		n = ctx->buf_len;
		while (n > 0) {
			i = BIO_write(b->next_bio, &(ctx->buf[ctx->buf_off]), n);
			if (i <= 0) {
				BIO_copy_next_retry(b);
				return ((ret == 0) ? i : ret);
			}
			OPENSSL_assert(i <= n);
			n -= i;
			ctx->buf_off += i;
			OPENSSL_assert(ctx->buf_off <= (int)sizeof(ctx->buf));
			OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
		}
		ctx->buf_len = 0;
		ctx->buf_off = 0;
	}
	return (ret);
}

static long
b64_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	BIO_B64_CTX *ctx;
	long ret = 1;
	int i;

	ctx = (BIO_B64_CTX *)b->ptr;

	switch (cmd) {
	case BIO_CTRL_RESET:
		ctx->cont = 1;
		ctx->start = 1;
		ctx->encode = B64_NONE;
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_EOF:	/* More to read */
		if (ctx->cont <= 0)
			ret = 1;
		else
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_WPENDING: /* More to write in buffer */
		OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
		ret = ctx->buf_len - ctx->buf_off;
		if ((ret == 0) && (ctx->encode != B64_NONE) &&
		    (ctx->base64.num != 0))
			ret = 1;
		else if (ret <= 0)
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_PENDING: /* More to read in buffer */
		OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
		ret = ctx->buf_len - ctx->buf_off;
		if (ret <= 0)
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_FLUSH:
		/* do a final write */
again:
		while (ctx->buf_len != ctx->buf_off) {
			i = b64_write(b, NULL, 0);
			if (i < 0)
				return i;
		}
		if (BIO_get_flags(b) & BIO_FLAGS_BASE64_NO_NL) {
			if (ctx->tmp_len != 0) {
				ctx->buf_len = EVP_EncodeBlock(
				    (unsigned char *)ctx->buf,
				    (unsigned char *)ctx->tmp,
				    ctx->tmp_len);
				ctx->buf_off = 0;
				ctx->tmp_len = 0;
				goto again;
			}
		} else if (ctx->encode != B64_NONE && ctx->base64.num != 0) {
			ctx->buf_off = 0;
			EVP_EncodeFinal(&(ctx->base64),
			    (unsigned char *)ctx->buf,
			    &(ctx->buf_len));
			/* push out the bytes */
			goto again;
		}
		/* Finally flush the underlying BIO */
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;

	case BIO_C_DO_STATE_MACHINE:
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;

	case BIO_CTRL_DUP:
		break;
	case BIO_CTRL_INFO:
	case BIO_CTRL_GET:
	case BIO_CTRL_SET:
	default:
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	}
	return (ret);
}

static long
b64_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	default:
		ret = BIO_callback_ctrl(b->next_bio, cmd, fp);
		break;
	}
	return (ret);
}

static int
b64_puts(BIO *b, const char *str)
{
	return b64_write(b, str, strlen(str));
}
@


1.19
log
@Missing initialization; OpenSSL PR#3289 and #3345 via OpenSSL trunk.
@
text
@d1 1
a1 1
/* $OpenBSD: bio_b64.c,v 1.18 2014/07/11 08:44:48 jsing Exp $ */
a295 3
#if 0
			jj = (i >> 2) << 2;
#else
a296 1
#endif
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_b64.c,v 1.17 2014/07/10 13:58:22 jsing Exp $ */
d227 2
a228 1
			q = p=(unsigned char *)ctx->tmp;
@


1.17
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_b64.c,v 1.16 2014/06/12 15:49:29 deraadt Exp $ */
a62 1
#include "cryptlib.h"
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 2
a62 1
#include <errno.h>
@


1.15
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/evp/bio_b64.c */
@


1.14
log
@More KNF.
@
text
@d116 1
a116 1
	ctx = (BIO_B64_CTX *)malloc(sizeof(BIO_B64_CTX));
@


1.13
log
@KNF.
@
text
@d150 1
a150 1
	int ret = 0, i, ii, j,k, x,n, num, ret_code = 0;
@


1.12
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d72 1
a72 1
static long b64_callback_ctrl(BIO *h,int cmd,bio_info_cb *fp);
d79 1
a79 2
typedef struct b64_struct
	{
d89 1
a89 1
	char buf[EVP_ENCODE_LENGTH(B64_BLOCK_SIZE)+10];
d91 1
a91 1
	} BIO_B64_CTX;
d93 1
a93 1
static BIO_METHOD methods_b64= {
d105 9
a113 7
BIO_METHOD *BIO_f_base64(void)
	{
	return(&methods_b64);
	}

static int b64_new(BIO *bi)
	{
d116 15
a130 14
	ctx=(BIO_B64_CTX *)malloc(sizeof(BIO_B64_CTX));
	if (ctx == NULL) return(0);

	ctx->buf_len=0;
	ctx->tmp_len=0;
	ctx->tmp_nl=0;
	ctx->buf_off=0;
	ctx->cont=1;
	ctx->start=1;
	ctx->encode=0;

	bi->init=1;
	bi->ptr=(char *)ctx;
	bi->flags=0;
d132 2
a133 2
	return(1);
	}
d135 5
a139 3
static int b64_free(BIO *a)
	{
	if (a == NULL) return(0);
d141 10
a150 9
	a->ptr=NULL;
	a->init=0;
	a->flags=0;
	return(1);
	}
	
static int b64_read(BIO *b, char *out, int outl)
	{
	int ret=0,i,ii,j,k,x,n,num,ret_code=0;
d152 1
a152 1
	unsigned char *p,*q;
d154 3
a156 2
	if (out == NULL) return(0);
	ctx=(BIO_B64_CTX *)b->ptr;
d158 2
a159 1
	if ((ctx == NULL) || (b->next_bio == NULL)) return(0);
d163 5
a167 6
	if (ctx->encode != B64_DECODE)
		{
		ctx->encode=B64_DECODE;
		ctx->buf_len=0;
		ctx->buf_off=0;
		ctx->tmp_len=0;
d169 1
a169 1
		}
d172 1
a172 2
	if (ctx->buf_len > 0)
		{
d174 12
a185 13
		i=ctx->buf_len-ctx->buf_off;
		if (i > outl) i=outl;
		OPENSSL_assert(ctx->buf_off+i < (int)sizeof(ctx->buf));
		memcpy(out,&(ctx->buf[ctx->buf_off]),i);
		ret=i;
		out+=i;
		outl-=i;
		ctx->buf_off+=i;
		if (ctx->buf_len == ctx->buf_off)
			{
			ctx->buf_len=0;
			ctx->buf_off=0;
			}
d187 1
d192 2
a193 3
	ret_code=0;
	while (outl > 0)
		{
d197 2
a198 2
		i=BIO_read(b->next_bio,&(ctx->tmp[ctx->tmp_len]),
			B64_BLOCK_SIZE-ctx->tmp_len);
d200 2
a201 3
		if (i <= 0)
			{
			ret_code=i;
d204 2
a205 3
			if (!BIO_should_retry(b->next_bio))
				{
				ctx->cont=i;
d207 1
a207 1
				if(ctx->tmp_len == 0)
d212 1
a212 1
				}
d216 2
a217 2
			}
		i+=ctx->tmp_len;
d222 1
a222 2
		if (ctx->start && (BIO_get_flags(b) & BIO_FLAGS_BASE64_NO_NL))
			{
d224 6
a229 8
			ctx->tmp_len=0;
			}
		else if (ctx->start)
			{
			q=p=(unsigned char *)ctx->tmp;
			for (j=0; j<i; j++)
				{
				if (*(q++) != '\n') continue;
d235 3
a237 4
				if (ctx->tmp_nl)
					{
					p=q;
					ctx->tmp_nl=0;
d239 1
a239 1
					}
d241 3
a243 3
				k=EVP_DecodeUpdate(&(ctx->base64),
					(unsigned char *)ctx->buf,
					&num,p,q-p);
d246 1
a246 2
				else 
					{
d248 6
a253 7
						&(ctx->tmp[0]))
						{
						i-=(p- (unsigned char *)
							&(ctx->tmp[0]));
						for (x=0; x < i; x++)
							ctx->tmp[x]=p[x];
						}
d255 1
a255 1
					ctx->start=0;
a256 2
					}
				p=q;
d258 2
d262 1
a262 2
			if ((j == i) && (num == 0))
				{
d265 1
a265 2
				if (p == (unsigned char *)&(ctx->tmp[0]))
					{
d267 3
a269 5
					if (i == B64_BLOCK_SIZE)
						{
						ctx->tmp_nl=1;
						ctx->tmp_len=0;
						}
d271 1
d273 6
a278 6
					{
					n=q-p;
					for (ii=0; ii<n; ii++)
						ctx->tmp[ii]=p[ii];
					ctx->tmp_len=n;
					}
d281 2
a282 4
				}
			else
			{
				ctx->tmp_len=0;
d284 1
a284 3
		}
		else if ((i < B64_BLOCK_SIZE) && (ctx->cont > 0))
		{
d291 2
a292 3
		if (BIO_get_flags(b) & BIO_FLAGS_BASE64_NO_NL)
			{
			int z,jj;
d295 1
a295 1
			jj=(i>>2)<<2;
d299 4
a302 6
			z=EVP_DecodeBlock((unsigned char *)ctx->buf,
				(unsigned char *)ctx->tmp,jj);
			if (jj > 2)
				{
				if (ctx->tmp[jj-1] == '=')
					{
a305 1
					}
d307 1
d310 13
a322 17
			if (jj != i)
				{
				memmove(ctx->tmp, &ctx->tmp[jj], i-jj);
				ctx->tmp_len=i-jj;
				}
			ctx->buf_len=0;
			if (z > 0)
				{
				ctx->buf_len=z;
				}
			i=z;
			}
		else
			{
			i=EVP_DecodeUpdate(&(ctx->base64),
				(unsigned char *)ctx->buf,&ctx->buf_len,
				(unsigned char *)ctx->tmp,i);
d324 5
a328 6
			}
		ctx->buf_off=0;
		if (i < 0)
			{
			ret_code=0;
			ctx->buf_len=0;
d330 1
a330 1
			}
d333 1
a333 1
			i=ctx->buf_len;
d335 1
a335 1
			i=outl;
d337 6
a342 10
		memcpy(out,ctx->buf,i);
		ret+=i;
		ctx->buf_off=i;
		if (ctx->buf_off == ctx->buf_len)
			{
			ctx->buf_len=0;
			ctx->buf_off=0;
			}
		outl-=i;
		out+=i;
d344 3
d349 2
a350 2
	return((ret == 0)?ret_code:ret);
	}
d352 4
a355 3
static int b64_write(BIO *b, const char *in, int inl)
	{
	int ret=0;
d360 1
a360 1
	ctx=(BIO_B64_CTX *)b->ptr;
d363 5
a367 6
	if (ctx->encode != B64_ENCODE)
		{
		ctx->encode=B64_ENCODE;
		ctx->buf_len=0;
		ctx->buf_off=0;
		ctx->tmp_len=0;
d369 1
a369 1
		}
d374 4
a377 6
	n=ctx->buf_len-ctx->buf_off;
	while (n > 0)
		{
		i=BIO_write(b->next_bio,&(ctx->buf[ctx->buf_off]),n);
		if (i <= 0)
			{
d379 2
a380 2
			return(i);
			}
d382 1
a382 1
		ctx->buf_off+=i;
d385 2
a386 2
		n-=i;
		}
d388 5
a392 2
	ctx->buf_off=0;
	ctx->buf_len=0;
d394 2
a395 1
	if ((in == NULL) || (inl <= 0)) return(0);
d397 2
a398 8
	while (inl > 0)
		{
		n=(inl > B64_BLOCK_SIZE)?B64_BLOCK_SIZE:inl;

		if (BIO_get_flags(b) & BIO_FLAGS_BASE64_NO_NL)
			{
			if (ctx->tmp_len > 0)
				{
d400 1
a400 1
				n=3-ctx->tmp_len;
d402 4
a405 4
				if (n > inl) 
					n=inl;
				memcpy(&(ctx->tmp[ctx->tmp_len]),in,n);
				ctx->tmp_len+=n;
d409 5
a413 2
				ctx->buf_len=EVP_EncodeBlock((unsigned char *)ctx->buf,(unsigned char *)ctx->tmp,ctx->tmp_len);
				OPENSSL_assert(ctx->buf_len <= (int)sizeof(ctx->buf));
d417 5
a421 8
				ctx->tmp_len=0;
				}
			else
				{
				if (n < 3)
					{
					memcpy(ctx->tmp,in,n);
					ctx->tmp_len=n;
d424 7
a430 4
					}
				n-=n%3;
				ctx->buf_len=EVP_EncodeBlock((unsigned char *)ctx->buf,(const unsigned char *)in,n);
				OPENSSL_assert(ctx->buf_len <= (int)sizeof(ctx->buf));
a432 1
				}
d434 1
a434 2
		else
			{
d436 2
a437 2
				(unsigned char *)ctx->buf,&ctx->buf_len,
				(unsigned char *)in,n);
d441 3
a443 3
			}
		inl-=n;
		in+=n;
d445 5
a449 7
		ctx->buf_off=0;
		n=ctx->buf_len;
		while (n > 0)
			{
			i=BIO_write(b->next_bio,&(ctx->buf[ctx->buf_off]),n);
			if (i <= 0)
				{
d451 2
a452 2
				return((ret == 0)?i:ret);
				}
d454 2
a455 2
			n-=i;
			ctx->buf_off+=i;
a457 3
			}
		ctx->buf_len=0;
		ctx->buf_off=0;
d459 2
a460 1
	return(ret);
d462 2
d465 3
a467 2
static long b64_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d469 1
a469 1
	long ret=1;
d472 1
a472 1
	ctx=(BIO_B64_CTX *)b->ptr;
d474 1
a474 2
	switch (cmd)
		{
d476 4
a479 4
		ctx->cont=1;
		ctx->start=1;
		ctx->encode=B64_NONE;
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d483 1
a483 1
			ret=1;
d485 1
a485 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d489 4
a492 4
		ret=ctx->buf_len-ctx->buf_off;
		if ((ret == 0) && (ctx->encode != B64_NONE)
			&& (ctx->base64.num != 0))
			ret=1;
d494 1
a494 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d498 1
a498 1
		ret=ctx->buf_len-ctx->buf_off;
d500 1
a500 1
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d505 2
a506 3
		while (ctx->buf_len != ctx->buf_off)
			{
			i=b64_write(b,NULL,0);
d509 9
a517 11
			}
		if (BIO_get_flags(b) & BIO_FLAGS_BASE64_NO_NL)
			{
			if (ctx->tmp_len != 0)
				{
				ctx->buf_len=EVP_EncodeBlock(
					(unsigned char *)ctx->buf,
					(unsigned char *)ctx->tmp,
					ctx->tmp_len);
				ctx->buf_off=0;
				ctx->tmp_len=0;
a518 1
				}
d520 2
a521 3
		else if (ctx->encode != B64_NONE && ctx->base64.num != 0)
			{
			ctx->buf_off=0;
d523 2
a524 2
				(unsigned char *)ctx->buf,
				&(ctx->buf_len));
d527 1
a527 1
			}
d529 1
a529 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d534 1
a534 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d544 1
a544 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
a545 2
		}
	return(ret);
d547 2
d550 8
a557 7
static long b64_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
d559 1
a559 1
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
a560 2
		}
	return(ret);
d562 2
d565 5
a569 4
static int b64_puts(BIO *b, const char *str)
	{
	return b64_write(b,str,strlen(str));
	}
@


1.11
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d94 11
a104 12
static BIO_METHOD methods_b64=
	{
	BIO_TYPE_BASE64,"base64 encoding",
	b64_write,
	b64_read,
	b64_puts,
	NULL, /* b64_gets, */
	b64_ctrl,
	b64_new,
	b64_free,
	b64_callback_ctrl,
	};
@


1.10
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d116 1
a116 1
	ctx=(BIO_B64_CTX *)OPENSSL_malloc(sizeof(BIO_B64_CTX));
d137 1
a137 1
	OPENSSL_free(a->ptr);
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d267 1
a267 1
			if (j == i)
@


1.8
log
@resolve conflicts
@
text
@d67 1
a67 1
/*static int b64_puts(BIO *h, const char *str); */
d99 1
a99 1
	NULL, /* b64_puts, */
d130 1
d155 2
d169 1
a190 1

d201 1
a201 1
			/* Should be continue next time we are called? */
d291 1
d294 1
a294 3
		/* If buffer isn't full and we can retry then
		 * restart to read in more data.
		 */
d296 4
d301 1
d307 1
d309 3
d327 1
a327 2
				memcpy((unsigned char *)ctx->tmp,
					(unsigned char *)&(ctx->tmp[jj]),i-jj);
a333 1
				i=1;
d335 1
a335 2
			else
				i=z;
d368 1
a368 1
	BIO_clear_retry_flags(b);
d375 3
a377 1
	int ret=inl,n,i;
d392 3
d404 1
d406 2
d424 1
d426 1
a426 1
				/* There's a teoretical possibility for this */
d431 1
d434 3
a436 4
				ctx->buf_len=EVP_EncodeBlock(
					(unsigned char *)ctx->buf,
					(unsigned char *)ctx->tmp,
					ctx->tmp_len);
d445 1
a445 1
					memcpy(&(ctx->tmp[0]),in,n);
d447 1
d451 4
a454 3
				ctx->buf_len=EVP_EncodeBlock(
					(unsigned char *)ctx->buf,
					(unsigned char *)in,n);
d462 3
d479 1
d482 2
d514 1
d523 1
d595 4
@


1.7
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d168 1
a168 1
		OPENSSL_assert(ctx->buf_off+i < sizeof ctx->buf);
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d187 3
a189 1
		if (ctx->cont <= 0) break;
d200 1
d202 10
a211 2
			/* else we should continue when called again */
			break;
d214 1
d270 6
a275 2
					ctx->tmp_nl=1;
					ctx->tmp_len=0;
d290 5
d334 1
a335 1
		ctx->cont=i;
d508 1
a508 4
				{
				ret=i;
				break;
				}
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d168 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d468 2
a469 1
		if ((ret == 0) && (ctx->base64.num != 0))
d504 1
a504 1
		else if (ctx->base64.num != 0)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 5
a69 5
static int b64_write(BIO *h,char *buf,int num);
static int b64_read(BIO *h,char *buf,int size);
/*static int b64_puts(BIO *h,char *str); */
/*static int b64_gets(BIO *h,char *str,int size); */
static long b64_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d72 1
a72 1
static long b64_callback_ctrl(BIO *h,int cmd,void (*fp)());
d116 1
a116 1
	ctx=(BIO_B64_CTX *)Malloc(sizeof(BIO_B64_CTX));
d136 1
a136 1
	Free(a->ptr);
d343 1
a343 1
static int b64_write(BIO *b, char *in, int inl)
d373 2
a377 1
	ctx->buf_off=0;
d387 3
d392 1
a392 2
				n=ctx->tmp_len;
				if (n < 3)
d396 5
a400 1
					(unsigned char *)ctx->tmp,n);
d444 1
a444 1
static long b64_ctrl(BIO *b, int cmd, long num, char *ptr)
d534 1
a534 1
static long b64_callback_ctrl(BIO *b, int cmd, void (*fp)())
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d72 1
d104 1
a241 1
						EVP_DecodeInit(&ctx->base64);
d243 1
d522 14
@


1.1
log
@Initial revision
@
text
@d62 2
a63 2
#include "buffer.h"
#include "evp.h"
a64 1
#ifndef NOPROTO
a71 10
#else
static int b64_write();
static int b64_read();
/*static int b64_puts(); */
/*static int b64_gets(); */
static long b64_ctrl();
static int b64_new();
static int b64_free();
#endif

d105 1
a105 1
BIO_METHOD *BIO_f_base64()
d110 1
a110 2
static int b64_new(bi)
BIO *bi;
d131 1
a131 2
static int b64_free(a)
BIO *a;
d141 1
a141 4
static int b64_read(b,out,outl)
BIO *b;
char *out;
int outl;
d341 1
a341 4
static int b64_write(b,in,inl)
BIO *b;
char *in;
int inl;
d435 1
a435 5
static long b64_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 2
a63 2
#include <openssl/buffer.h>
#include <openssl/evp.h>
d65 6
a70 5
static int b64_write(BIO *h, const char *buf, int num);
static int b64_read(BIO *h, char *buf, int size);
/*static int b64_puts(BIO *h, const char *str); */
/*static int b64_gets(BIO *h, char *str, int size); */
static long b64_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d73 10
a82 1
static long b64_callback_ctrl(BIO *h,int cmd,bio_info_cb *fp);
a113 1
	b64_callback_ctrl,
d116 1
a116 1
BIO_METHOD *BIO_f_base64(void)
d121 2
a122 1
static int b64_new(BIO *bi)
d126 1
a126 1
	ctx=(BIO_B64_CTX *)OPENSSL_malloc(sizeof(BIO_B64_CTX));
d143 2
a144 1
static int b64_free(BIO *a)
d147 1
a147 1
	OPENSSL_free(a->ptr);
d154 4
a157 1
static int b64_read(BIO *b, char *out, int outl)
d256 1
a257 1
					EVP_DecodeInit(&ctx->base64);
d357 4
a360 1
static int b64_write(BIO *b, const char *in, int inl)
a389 2
	ctx->buf_off=0;
	ctx->buf_len=0;
d393 1
a402 3
				/* There's a teoretical possibility for this */
				if (n > inl) 
					n=inl;
d405 2
a406 1
				if (ctx->tmp_len < 3)
d410 1
a410 5
					(unsigned char *)ctx->tmp,
					ctx->tmp_len);
				/* Since we're now done using the temporary
				   buffer, the length should be 0'd */
				ctx->tmp_len=0;
d454 5
a458 1
static long b64_ctrl(BIO *b, int cmd, long num, void *ptr)
d482 1
a482 2
		if ((ret == 0) && (ctx->encode != B64_NONE)
			&& (ctx->base64.num != 0))
d517 1
a517 1
		else if (ctx->encode != B64_NONE && ctx->base64.num != 0)
a542 14
		break;
		}
	return(ret);
	}

static long b64_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
	default:
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a167 1
		OPENSSL_assert(ctx->buf_off+i < sizeof ctx->buf);
@


1.1.1.4
log
@import 0.9.7c
@
text
@d187 1
a187 3

		if (ctx->cont <= 0)
			break;
a197 1
				{
d199 2
a200 10
				/* If buffer empty break */
				if(ctx->tmp_len == 0)
					break;
				/* Fall through and process what we have */
				else
					i = 0;
				}
			/* else we retry and add more data to buffer */
			else
				break;
a202 1
		ctx->tmp_len = i;
d258 2
a259 6
					/* Check buffer full */
					if (i == B64_BLOCK_SIZE)
						{
						ctx->tmp_nl=1;
						ctx->tmp_len=0;
						}
a273 5
		/* If buffer isn't full and we can retry then
		 * restart to read in more data.
		 */
		else if ((i < B64_BLOCK_SIZE) && (ctx->cont > 0))
			continue;
a312 1
			ctx->tmp_len = 0;
d314 1
d487 4
a490 1
				return i;
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d168 1
a168 1
		OPENSSL_assert(ctx->buf_off+i < (int)sizeof(ctx->buf));
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d67 1
a67 1
static int b64_puts(BIO *h, const char *str);
d99 1
a99 1
	b64_puts,
a129 1
	bi->num = 0;
a153 2
	BIO_clear_retry_flags(b);

a165 1
		OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
d187 1
d198 1
a198 1
			/* Should we continue next time we are called? */
a287 1
			{
d290 3
a292 1
		}
a293 4
		{
			/* If buffer isn't full and we can retry then
			 * restart to read in more data.
			 */
a294 1
		}
a299 1
#if 0
a300 3
#else
			jj = i & ~3; /* process per 4 */
#endif
d316 2
a317 1
				memmove(ctx->tmp, &ctx->tmp[jj], i-jj);
d324 1
d326 2
a327 1
			i=z;
d360 1
a360 1
	/* BIO_clear_retry_flags(b); */
d367 1
a367 3
	int ret=0;
	int n;
	int i;
a381 3
	OPENSSL_assert(ctx->buf_off < (int)sizeof(ctx->buf));
	OPENSSL_assert(ctx->buf_len <= (int)sizeof(ctx->buf));
	OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
a390 1
		OPENSSL_assert(i <= n);
a391 2
		OPENSSL_assert(ctx->buf_off <= (int)sizeof(ctx->buf));
		OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
a407 1
				OPENSSL_assert(ctx->tmp_len <= 3);
d409 1
a409 1
				/* There's a theoretical possibility for this */
a413 1
				ret += n;
d416 4
a419 3
				ctx->buf_len=EVP_EncodeBlock((unsigned char *)ctx->buf,(unsigned char *)ctx->tmp,ctx->tmp_len);
				OPENSSL_assert(ctx->buf_len <= (int)sizeof(ctx->buf));
				OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
d428 1
a428 1
					memcpy(ctx->tmp,in,n);
a429 1
					ret += n;
d433 3
a435 4
				ctx->buf_len=EVP_EncodeBlock((unsigned char *)ctx->buf,(const unsigned char *)in,n);
				OPENSSL_assert(ctx->buf_len <= (int)sizeof(ctx->buf));
				OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
				ret += n;
a442 3
			OPENSSL_assert(ctx->buf_len <= (int)sizeof(ctx->buf));
			OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
			ret += n;
a456 1
			OPENSSL_assert(i <= n);
a458 2
			OPENSSL_assert(ctx->buf_off <= (int)sizeof(ctx->buf));
			OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
a488 1
		OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
a496 1
		OPENSSL_assert(ctx->buf_len >= ctx->buf_off);
a567 4
static int b64_puts(BIO *b, const char *str)
	{
	return b64_write(b,str,strlen(str));
	}
@


1.1.1.7
log
@Import OpenSSL 1.0.1g
@
text
@d267 1
a267 1
			if ((j == i) && (num == 0))
@


