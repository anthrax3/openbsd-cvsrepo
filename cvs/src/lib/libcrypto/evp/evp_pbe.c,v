head	1.25;
access;
symbols
	OPENBSD_6_2:1.25.0.2
	OPENBSD_6_2_BASE:1.25
	OPENBSD_6_1:1.25.0.4
	OPENBSD_6_1_BASE:1.25;
locks; strict;
comment	@ * @;


1.25
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.24;
commitid	kT0fLt3r4lroFJra;

1.24
date	2017.01.21.04.38.23;	author jsing;	state Exp;
branches;
next	1.23;
commitid	ZH0cfraAcedHrO0V;

1.23
date	2015.02.08.22.20.18;	author miod;	state Exp;
branches;
next	1.22;
commitid	isdv3gFdVRcVDcCv;

1.22
date	2014.10.28.05.46.56;	author miod;	state Exp;
branches;
next	1.21;
commitid	hDZmp09ZEY5wcTE1;

1.21
date	2014.07.11.14.16.10;	author miod;	state Exp;
branches;
next	1.20;
commitid	vPQL9UVBFvElVJRL;

1.20
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.19;
commitid	yQEL1wOWIearrW15;

1.19
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.18;
commitid	nzndm3zqPmFurSaK;

1.18
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.17;
commitid	id8dTrTMtnTn4fqt;

1.17
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	mJUVYpkFBZ0Zv2bG;

1.16
date	2014.06.07.15.06.24;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	8XcpJqUicyz2wPAR;

1.15
date	2014.05.08.15.42.26;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.19.00.41.38;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.03.15.12.45;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.16.31.55;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.57.46;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.36.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.28;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.39.18;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.21;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.43;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: evp_pbe.c,v 1.24 2017/01/21 04:38:23 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pkcs12.h>
#include <openssl/x509.h>

#include "evp_locl.h"

/* Password based encryption (PBE) functions */

DECLARE_STACK_OF(EVP_PBE_CTL)
static STACK_OF(EVP_PBE_CTL) *pbe_algs;

/* Setup a cipher context from a PBE algorithm */

typedef struct {
	int pbe_type;
	int pbe_nid;
	int cipher_nid;
	int md_nid;
	EVP_PBE_KEYGEN *keygen;
} EVP_PBE_CTL;

static const EVP_PBE_CTL builtin_pbe[] = {
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD2AndDES_CBC, NID_des_cbc, NID_md2, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD5AndDES_CBC, NID_des_cbc, NID_md5, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithSHA1AndRC2_CBC, NID_rc2_64_cbc, NID_sha1, PKCS5_PBE_keyivgen},

#ifndef OPENSSL_NO_HMAC
	{EVP_PBE_TYPE_OUTER, NID_id_pbkdf2, -1, -1, PKCS5_v2_PBKDF2_keyivgen},
#endif

	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And128BitRC4, NID_rc4, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And40BitRC4, NID_rc4_40, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And3_Key_TripleDES_CBC, NID_des_ede3_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And2_Key_TripleDES_CBC, NID_des_ede_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And128BitRC2_CBC, NID_rc2_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And40BitRC2_CBC, NID_rc2_40_cbc, NID_sha1, PKCS12_PBE_keyivgen},

#ifndef OPENSSL_NO_HMAC
	{EVP_PBE_TYPE_OUTER, NID_pbes2, -1, -1, PKCS5_v2_PBE_keyivgen},
#endif
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD2AndRC2_CBC, NID_rc2_64_cbc, NID_md2, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD5AndRC2_CBC, NID_rc2_64_cbc, NID_md5, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithSHA1AndDES_CBC, NID_des_cbc, NID_sha1, PKCS5_PBE_keyivgen},


	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA1, -1, NID_sha1, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithMD5, -1, NID_md5, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA224, -1, NID_sha224, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA256, -1, NID_sha256, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA384, -1, NID_sha384, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA512, -1, NID_sha512, 0},
	{EVP_PBE_TYPE_PRF, NID_id_HMACGostR3411_94, -1, NID_id_GostR3411_94, 0},
};

int
EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
    ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)
{
	const EVP_CIPHER *cipher;
	const EVP_MD *md;
	int cipher_nid, md_nid;
	EVP_PBE_KEYGEN *keygen;

	if (!EVP_PBE_find(EVP_PBE_TYPE_OUTER, OBJ_obj2nid(pbe_obj),
	    &cipher_nid, &md_nid, &keygen)) {
		char obj_tmp[80];
		EVPerror(EVP_R_UNKNOWN_PBE_ALGORITHM);
		if (!pbe_obj)
			strlcpy(obj_tmp, "NULL", sizeof obj_tmp);
		else
			i2t_ASN1_OBJECT(obj_tmp, sizeof obj_tmp, pbe_obj);
		ERR_asprintf_error_data("TYPE=%s", obj_tmp);
		return 0;
	}

	if (!pass)
		passlen = 0;
	else if (passlen == -1)
		passlen = strlen(pass);

	if (cipher_nid == -1)
		cipher = NULL;
	else {
		cipher = EVP_get_cipherbynid(cipher_nid);
		if (!cipher) {
			EVPerror(EVP_R_UNKNOWN_CIPHER);
			return 0;
		}
	}

	if (md_nid == -1)
		md = NULL;
	else {
		md = EVP_get_digestbynid(md_nid);
		if (!md) {
			EVPerror(EVP_R_UNKNOWN_DIGEST);
			return 0;
		}
	}

	if (!keygen(ctx, pass, passlen, param, cipher, md, en_de)) {
		EVPerror(EVP_R_KEYGEN_FAILURE);
		return 0;
	}
	return 1;
}

static int pbe2_cmp_BSEARCH_CMP_FN(const void *, const void *);
static int pbe2_cmp(EVP_PBE_CTL const *, EVP_PBE_CTL const *);
static EVP_PBE_CTL *OBJ_bsearch_pbe2(EVP_PBE_CTL *key, EVP_PBE_CTL const *base, int num);

static int
pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
{
	int ret = pbe1->pbe_type - pbe2->pbe_type;

	if (ret)
		return ret;
	else
		return pbe1->pbe_nid - pbe2->pbe_nid;
}


static int
pbe2_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)
{
	EVP_PBE_CTL const *a = a_;
	EVP_PBE_CTL const *b = b_;
	return pbe2_cmp(a, b);
}

static EVP_PBE_CTL *
OBJ_bsearch_pbe2(EVP_PBE_CTL *key, EVP_PBE_CTL const *base, int num)
{
	return (EVP_PBE_CTL *)OBJ_bsearch_(key, base, num, sizeof(EVP_PBE_CTL),
	    pbe2_cmp_BSEARCH_CMP_FN);
}

static int
pbe_cmp(const EVP_PBE_CTL * const *a, const EVP_PBE_CTL * const *b)
{
	int ret = (*a)->pbe_type - (*b)->pbe_type;

	if (ret)
		return ret;
	else
		return (*a)->pbe_nid - (*b)->pbe_nid;
}

/* Add a PBE algorithm */

int
EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid, int md_nid,
    EVP_PBE_KEYGEN *keygen)
{
	EVP_PBE_CTL *pbe_tmp;

	if (pbe_algs == NULL) {
		pbe_algs = sk_EVP_PBE_CTL_new(pbe_cmp);
		if (pbe_algs == NULL) {
			EVPerror(ERR_R_MALLOC_FAILURE);
			return 0;
		}
	}
	pbe_tmp = malloc(sizeof(EVP_PBE_CTL));
	if (pbe_tmp == NULL) {
		EVPerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	pbe_tmp->pbe_type = pbe_type;
	pbe_tmp->pbe_nid = pbe_nid;
	pbe_tmp->cipher_nid = cipher_nid;
	pbe_tmp->md_nid = md_nid;
	pbe_tmp->keygen = keygen;

	if (sk_EVP_PBE_CTL_push(pbe_algs, pbe_tmp) == 0) {
		free(pbe_tmp);
		EVPerror(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	return 1;
}

int
EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
    EVP_PBE_KEYGEN *keygen)
{
	int cipher_nid, md_nid;

	if (cipher)
		cipher_nid = EVP_CIPHER_nid(cipher);
	else
		cipher_nid = -1;
	if (md)
		md_nid = EVP_MD_type(md);
	else
		md_nid = -1;

	return EVP_PBE_alg_add_type(EVP_PBE_TYPE_OUTER, nid,
	    cipher_nid, md_nid, keygen);
}

int
EVP_PBE_find(int type, int pbe_nid,
    int *pcnid, int *pmnid, EVP_PBE_KEYGEN **pkeygen)
{
	EVP_PBE_CTL *pbetmp = NULL, pbelu;
	int i;
	if (pbe_nid == NID_undef)
		return 0;

	pbelu.pbe_type = type;
	pbelu.pbe_nid = pbe_nid;

	if (pbe_algs) {
		i = sk_EVP_PBE_CTL_find(pbe_algs, &pbelu);
		if (i != -1)
			pbetmp = sk_EVP_PBE_CTL_value (pbe_algs, i);
	}
	if (pbetmp == NULL) {
		pbetmp = OBJ_bsearch_pbe2(&pbelu, builtin_pbe,
		    sizeof(builtin_pbe)/sizeof(EVP_PBE_CTL));
	}
	if (pbetmp == NULL)
		return 0;
	if (pcnid)
		*pcnid = pbetmp->cipher_nid;
	if (pmnid)
		*pmnid = pbetmp->md_nid;
	if (pkeygen)
		*pkeygen = pbetmp->keygen;
	return 1;
}

static void
free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
{
	free(pbe);
}

void
EVP_PBE_cleanup(void)
{
	sk_EVP_PBE_CTL_pop_free(pbe_algs, free_evp_pbe_ctl);
	pbe_algs = NULL;
}
@


1.24
log
@Expand DECLARE_OBJ_BSEARCH_CMP_FN and IMPLEMENT_OBJ_BSEARCH_CMP_FN macros.

No change to generated assembly excluding line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: evp_pbe.c,v 1.23 2015/02/08 22:20:18 miod Exp $ */
d131 1
a131 1
		EVPerr(EVP_F_EVP_PBE_CIPHERINIT, EVP_R_UNKNOWN_PBE_ALGORITHM);
d150 1
a150 1
			EVPerr(EVP_F_EVP_PBE_CIPHERINIT, EVP_R_UNKNOWN_CIPHER);
d160 1
a160 1
			EVPerr(EVP_F_EVP_PBE_CIPHERINIT, EVP_R_UNKNOWN_DIGEST);
d166 1
a166 1
		EVPerr(EVP_F_EVP_PBE_CIPHERINIT, EVP_R_KEYGEN_FAILURE);
d225 1
a225 2
			EVPerr(EVP_F_EVP_PBE_ALG_ADD_TYPE,
			    ERR_R_MALLOC_FAILURE);
d231 1
a231 1
		EVPerr(EVP_F_EVP_PBE_ALG_ADD_TYPE, ERR_R_MALLOC_FAILURE);
d242 1
a242 1
		EVPerr(EVP_F_EVP_PBE_ALG_ADD_TYPE, ERR_R_MALLOC_FAILURE);
@


1.23
log
@Check memory allocation results in EVP_PBE_alg_add_type().
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_pbe.c,v 1.22 2014/10/28 05:46:56 miod Exp $ */
d172 3
a174 1
DECLARE_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);
d187 15
a201 1
IMPLEMENT_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);
@


1.22
log
@Check the result of sk_*_push() operations for failure.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_pbe.c,v 1.21 2014/07/11 14:16:10 miod Exp $ */
d206 1
a206 1
	if (!pbe_algs)
d208 8
a215 1
	if (!(pbe_tmp = (EVP_PBE_CTL*)malloc(sizeof(EVP_PBE_CTL)))) {
@


1.21
log
@In EVP_PBE_alg_add don't use the underlying NID for the cipher
as it may have a non-standard key size; OpenSSL PR #3206 via OpenSSL trunk.
@
text
@d1 1
a1 1
/* $OpenBSD: evp_pbe.c,v 1.20 2014/07/11 08:44:48 jsing Exp $ */
d133 1
a133 1
			strlcpy (obj_tmp, "NULL", sizeof obj_tmp);
d208 1
a208 1
	if (!(pbe_tmp = (EVP_PBE_CTL*) malloc (sizeof(EVP_PBE_CTL)))) {
d218 5
a222 1
	sk_EVP_PBE_CTL_push (pbe_algs, pbe_tmp);
@


1.20
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_pbe.c,v 1.19 2014/07/10 22:45:57 jsing Exp $ */
d229 1
a229 1
		cipher_nid = EVP_CIPHER_type(cipher);
@


1.19
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: evp_pbe.c,v 1.18 2014/07/10 13:58:22 jsing Exp $ */
d64 1
a64 1
#include "cryptlib.h"
d68 1
@


1.18
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: evp_pbe.c,v 1.17 2014/06/12 15:49:29 deraadt Exp $ */
d61 2
@


1.17
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.16
log
@Remove various test stubs.  The good ones have been moved by jsing
and others to the regress framework.  These remaining ones just
muddle us up when re-reading code repeatedly.
ok jsing
@
text
@d1 1
a1 1
/* evp_pbe.c */
@


1.15
log
@KNF.
@
text
@a113 24
#ifdef TEST
int
main(int argc, char **argv)
{
	int i, nid_md, nid_cipher;
	EVP_PBE_CTL *tpbe, *tpbe2;
	/*OpenSSL_add_all_algorithms();*/

	for (i = 0; i < sizeof(builtin_pbe) / sizeof(EVP_PBE_CTL); i++) {
		tpbe = builtin_pbe + i;
		fprintf(stderr, "%d %d %s ", tpbe->pbe_type, tpbe->pbe_nid,
		    OBJ_nid2sn(tpbe->pbe_nid));
		if (EVP_PBE_find(tpbe->pbe_type, tpbe->pbe_nid,
		    &nid_cipher , &nid_md, 0))
			fprintf(stderr, "Found %s %s\n",
			    OBJ_nid2sn(nid_cipher), OBJ_nid2sn(nid_md));
		else
			fprintf(stderr, "Find ERROR!!\n");
	}

	return 0;
}
#endif

@


1.14
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d73 1
a73 2
typedef struct
	{
d79 1
a79 1
	} EVP_PBE_CTL;
d81 4
a84 8
static const EVP_PBE_CTL builtin_pbe[] = 
	{
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD2AndDES_CBC,
			NID_des_cbc, NID_md2, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD5AndDES_CBC,
			NID_des_cbc, NID_md5, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithSHA1AndRC2_CBC,
			NID_rc2_64_cbc, NID_sha1, PKCS5_PBE_keyivgen},
d90 6
a95 12
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And128BitRC4,
			NID_rc4, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And40BitRC4,
			NID_rc4_40, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And3_Key_TripleDES_CBC,
		 	NID_des_ede3_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And2_Key_TripleDES_CBC, 
			NID_des_ede_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And128BitRC2_CBC,
			NID_rc2_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And40BitRC2_CBC,
			NID_rc2_40_cbc, NID_sha1, PKCS12_PBE_keyivgen},
d100 3
a102 6
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD2AndRC2_CBC,
			NID_rc2_64_cbc, NID_md2, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD5AndRC2_CBC,
			NID_rc2_64_cbc, NID_md5, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithSHA1AndDES_CBC,
			NID_des_cbc, NID_sha1, PKCS5_PBE_keyivgen},
d112 1
a112 1
	};
d115 3
a117 2
int main(int argc, char **argv)
	{
d122 1
a122 2
	for (i = 0; i < sizeof(builtin_pbe)/sizeof(EVP_PBE_CTL); i++)
		{
d125 1
a125 1
						OBJ_nid2sn(tpbe->pbe_nid));
d127 1
a127 1
					&nid_cipher ,&nid_md,0))
d129 1
a129 2
					OBJ_nid2sn(nid_cipher),
					OBJ_nid2sn(nid_md));
d132 1
a132 1
		}
d135 1
a135 1
	}
a136 2
		

d138 4
a141 3
int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
		       ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)
	{
d148 1
a148 2
					&cipher_nid, &md_nid, &keygen))
		{
d150 5
a154 3
		EVPerr(EVP_F_EVP_PBE_CIPHERINIT,EVP_R_UNKNOWN_PBE_ALGORITHM);
		if (!pbe_obj) strlcpy (obj_tmp, "NULL", sizeof obj_tmp);
		else i2t_ASN1_OBJECT(obj_tmp, sizeof obj_tmp, pbe_obj);
d157 1
a157 1
		}
d159 1
a159 1
	if(!pass)
d166 1
a166 2
	else
		{
d168 2
a169 3
		if (!cipher)
			{
			EVPerr(EVP_F_EVP_PBE_CIPHERINIT,EVP_R_UNKNOWN_CIPHER);
a170 1
			}
d172 1
d176 1
a176 2
	else
		{
d178 2
a179 3
		if (!md)
			{
			EVPerr(EVP_F_EVP_PBE_CIPHERINIT,EVP_R_UNKNOWN_DIGEST);
a180 1
			}
d182 1
d184 2
a185 3
	if (!keygen(ctx, pass, passlen, param, cipher, md, en_de))
		{
		EVPerr(EVP_F_EVP_PBE_CIPHERINIT,EVP_R_KEYGEN_FAILURE);
d187 2
a188 2
		}
	return 1;	
d193 3
a195 2
static int pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
	{
d197 1
d202 1
a202 1
	}
d206 3
a208 2
static int pbe_cmp(const EVP_PBE_CTL * const *a, const EVP_PBE_CTL * const *b)
	{
d210 1
d215 1
a215 1
	}
d219 4
a222 3
int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid, int md_nid,
			 EVP_PBE_KEYGEN *keygen)
	{
d224 1
d227 2
a228 3
	if (!(pbe_tmp = (EVP_PBE_CTL*) malloc (sizeof(EVP_PBE_CTL))))
		{
		EVPerr(EVP_F_EVP_PBE_ALG_ADD_TYPE,ERR_R_MALLOC_FAILURE);
d230 1
a230 1
		}
a236 1

d239 1
a239 1
	}
d241 4
a244 3
int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
		    EVP_PBE_KEYGEN *keygen)
	{
d246 1
d257 2
a258 2
					cipher_nid, md_nid, keygen);
	}
d260 4
a263 3
int EVP_PBE_find(int type, int pbe_nid,
		 int *pcnid, int *pmnid, EVP_PBE_KEYGEN **pkeygen)
	{
d272 1
a272 2
	if (pbe_algs)
		{
d276 2
a277 3
		}
	if (pbetmp == NULL)
		{
d279 2
a280 2
				     sizeof(builtin_pbe)/sizeof(EVP_PBE_CTL));
		}
d290 1
a290 1
	}
d292 5
a296 4
static void free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
	 {
	 free(pbe);
	 }
d298 3
a300 2
void EVP_PBE_cleanup(void)
	{
d303 1
a303 1
	}
@


1.13
log
@use intrinsic strlcpy and strlcat everywhere so we only have one set of
funcitons to check for incorrect use. keep BUF_strlcpy and BUF_strlcat
for API comptibility only.
ok tedu@@
@
text
@d170 1
a170 1
		ERR_add_error_data(2, "TYPE=", obj_tmp);
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d168 1
a168 1
		if (!pbe_obj) BUF_strlcpy (obj_tmp, "NULL", sizeof obj_tmp);
@


1.11
log
@resolve conflicts
@
text
@d241 1
a241 1
	if (!(pbe_tmp = (EVP_PBE_CTL*) OPENSSL_malloc (sizeof(EVP_PBE_CTL))))
d309 1
a309 1
	 OPENSSL_freeFunc(pbe);
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d64 1
d90 4
@


1.9
log
@resolve conflicts
@
text
@d6 1
a6 1
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
d62 1
d67 2
a68 1
static STACK *pbe_algs;
d72 71
a142 6
typedef struct {
int pbe_nid;
const EVP_CIPHER *cipher;
const EVP_MD *md;
EVP_PBE_KEYGEN *keygen;
} EVP_PBE_CTL;
d144 4
a147 3
int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
	     ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)
{
a148 5
	EVP_PBE_CTL *pbetmp, pbelu;
	int i;
	pbelu.pbe_nid = OBJ_obj2nid(pbe_obj);
	if (pbelu.pbe_nid != NID_undef) i = sk_find(pbe_algs, (char *)&pbelu);
	else i = -1;
d150 11
a160 1
	if (i == -1) {
d167 33
a199 7
	}
	if(!pass) passlen = 0;
	else if (passlen == -1) passlen = strlen(pass);
	pbetmp = (EVP_PBE_CTL *)sk_value (pbe_algs, i);
	i = (*pbetmp->keygen)(ctx, pass, passlen, param, pbetmp->cipher,
						 pbetmp->md, en_de);
	if (!i) {
d202 1
a202 1
	}
d206 21
a226 6
static int pbe_cmp(const char * const *a, const char * const *b)
{
	const EVP_PBE_CTL * const *pbe1 = (const EVP_PBE_CTL * const *) a,
			* const *pbe2 = (const EVP_PBE_CTL * const *)b;
	return ((*pbe1)->pbe_nid - (*pbe2)->pbe_nid);
}
d230 3
a232 3
int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
	     EVP_PBE_KEYGEN *keygen)
{
d234 5
a238 3
	if (!pbe_algs) pbe_algs = sk_new(pbe_cmp);
	if (!(pbe_tmp = (EVP_PBE_CTL*) OPENSSL_malloc (sizeof(EVP_PBE_CTL)))) {
		EVPerr(EVP_F_EVP_PBE_ALG_ADD,ERR_R_MALLOC_FAILURE);
d240 27
d268 31
a298 5
	pbe_tmp->pbe_nid = nid;
	pbe_tmp->cipher = cipher;
	pbe_tmp->md = md;
	pbe_tmp->keygen = keygen;
	sk_push (pbe_algs, (char *)pbe_tmp);
d300 6
a305 1
}
d308 2
a309 2
{
	sk_pop_free(pbe_algs, OPENSSL_freeFunc);
d311 1
a311 1
}
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@merge 0.9.7d
@
text
@d77 1
a77 1
int EVP_PBE_CipherInit (ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
d109 2
a110 1
	EVP_PBE_CTL **pbe1 = (EVP_PBE_CTL **) a,  **pbe2 = (EVP_PBE_CTL **)b;
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d90 1
a90 1
		if (!pbe_obj) strlcpy (obj_tmp, "NULL", sizeof obj_tmp);
@


1.5
log
@str{cat,cpy}/sprintf cleanup. markus@@, deraadt@@ ok
@
text
@d91 1
a91 1
		else i2t_ASN1_OBJECT(obj_tmp, 80, pbe_obj);
@


1.4
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d90 1
a90 1
		if (!pbe_obj) strcpy (obj_tmp, "NULL");
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d60 1
a62 1
#include "cryptlib.h"
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d72 2
a73 2
EVP_CIPHER *cipher;
EVP_MD *md;
d115 1
a115 1
int EVP_PBE_alg_add (int nid, EVP_CIPHER *cipher, EVP_MD *md,
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d95 2
a96 1
	if (passlen == -1) passlen = strlen(pass);
d107 1
a107 1
static int pbe_cmp (EVP_PBE_CTL **pbe1, EVP_PBE_CTL **pbe2)
d109 1
d119 2
a120 2
	if (!pbe_algs) pbe_algs = sk_new (pbe_cmp);
	if (!(pbe_tmp = (EVP_PBE_CTL*) Malloc (sizeof(EVP_PBE_CTL)))) {
d134 1
a134 1
	sk_pop_free(pbe_algs, FreeFunc);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d72 2
a73 2
const EVP_CIPHER *cipher;
const EVP_MD *md;
d95 1
a95 2
	if(!pass) passlen = 0;
	else if (passlen == -1) passlen = strlen(pass);
d106 1
a106 1
static int pbe_cmp(const char * const *a, const char * const *b)
a107 1
	EVP_PBE_CTL **pbe1 = (EVP_PBE_CTL **) a,  **pbe2 = (EVP_PBE_CTL **)b;
d113 1
a113 1
int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
d117 2
a118 2
	if (!pbe_algs) pbe_algs = sk_new(pbe_cmp);
	if (!(pbe_tmp = (EVP_PBE_CTL*) OPENSSL_malloc (sizeof(EVP_PBE_CTL)))) {
d132 1
a132 1
	sk_pop_free(pbe_algs, OPENSSL_freeFunc);
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@a59 1
#include "cryptlib.h"
d62 1
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d91 1
a91 1
		else i2t_ASN1_OBJECT(obj_tmp, sizeof obj_tmp, pbe_obj);
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d90 1
a90 1
		if (!pbe_obj) BUF_strlcpy (obj_tmp, "NULL", sizeof obj_tmp);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d77 1
a77 1
int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
d109 1
a109 2
	const EVP_PBE_CTL * const *pbe1 = (const EVP_PBE_CTL * const *) a,
			* const *pbe2 = (const EVP_PBE_CTL * const *)b;
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d6 1
a6 1
 * Copyright (c) 1999-2006 The OpenSSL Project.  All rights reserved.
a61 1
#include <openssl/pkcs12.h>
d66 1
a66 2
DECLARE_STACK_OF(EVP_PBE_CTL)
static STACK_OF(EVP_PBE_CTL) *pbe_algs;
d70 6
a75 71
typedef struct
	{
	int pbe_type;
	int pbe_nid;
	int cipher_nid;
	int md_nid;
	EVP_PBE_KEYGEN *keygen;
	} EVP_PBE_CTL;

static const EVP_PBE_CTL builtin_pbe[] = 
	{
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD2AndDES_CBC,
			NID_des_cbc, NID_md2, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD5AndDES_CBC,
			NID_des_cbc, NID_md5, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithSHA1AndRC2_CBC,
			NID_rc2_64_cbc, NID_sha1, PKCS5_PBE_keyivgen},

	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And128BitRC4,
			NID_rc4, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And40BitRC4,
			NID_rc4_40, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And3_Key_TripleDES_CBC,
		 	NID_des_ede3_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And2_Key_TripleDES_CBC, 
			NID_des_ede_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And128BitRC2_CBC,
			NID_rc2_cbc, NID_sha1, PKCS12_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbe_WithSHA1And40BitRC2_CBC,
			NID_rc2_40_cbc, NID_sha1, PKCS12_PBE_keyivgen},

#ifndef OPENSSL_NO_HMAC
	{EVP_PBE_TYPE_OUTER, NID_pbes2, -1, -1, PKCS5_v2_PBE_keyivgen},
#endif
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD2AndRC2_CBC,
			NID_rc2_64_cbc, NID_md2, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithMD5AndRC2_CBC,
			NID_rc2_64_cbc, NID_md5, PKCS5_PBE_keyivgen},
	{EVP_PBE_TYPE_OUTER, NID_pbeWithSHA1AndDES_CBC,
			NID_des_cbc, NID_sha1, PKCS5_PBE_keyivgen},


	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA1, -1, NID_sha1, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithMD5, -1, NID_md5, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA224, -1, NID_sha224, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA256, -1, NID_sha256, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA384, -1, NID_sha384, 0},
	{EVP_PBE_TYPE_PRF, NID_hmacWithSHA512, -1, NID_sha512, 0},
	{EVP_PBE_TYPE_PRF, NID_id_HMACGostR3411_94, -1, NID_id_GostR3411_94, 0},
	};

#ifdef TEST
int main(int argc, char **argv)
	{
	int i, nid_md, nid_cipher;
	EVP_PBE_CTL *tpbe, *tpbe2;
	/*OpenSSL_add_all_algorithms();*/

	for (i = 0; i < sizeof(builtin_pbe)/sizeof(EVP_PBE_CTL); i++)
		{
		tpbe = builtin_pbe + i;
		fprintf(stderr, "%d %d %s ", tpbe->pbe_type, tpbe->pbe_nid,
						OBJ_nid2sn(tpbe->pbe_nid));
		if (EVP_PBE_find(tpbe->pbe_type, tpbe->pbe_nid,
					&nid_cipher ,&nid_md,0))
			fprintf(stderr, "Found %s %s\n",
					OBJ_nid2sn(nid_cipher),
					OBJ_nid2sn(nid_md));
		else
			fprintf(stderr, "Find ERROR!!\n");
		}
d77 3
a79 4
	return 0;
	}
#endif
		
d81 5
d87 1
a87 11
int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
		       ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)
	{
	const EVP_CIPHER *cipher;
	const EVP_MD *md;
	int cipher_nid, md_nid;
	EVP_PBE_KEYGEN *keygen;

	if (!EVP_PBE_find(EVP_PBE_TYPE_OUTER, OBJ_obj2nid(pbe_obj),
					&cipher_nid, &md_nid, &keygen))
		{
d94 7
a100 33
		}

	if(!pass)
		passlen = 0;
	else if (passlen == -1)
		passlen = strlen(pass);

	if (cipher_nid == -1)
		cipher = NULL;
	else
		{
		cipher = EVP_get_cipherbynid(cipher_nid);
		if (!cipher)
			{
			EVPerr(EVP_F_EVP_PBE_CIPHERINIT,EVP_R_UNKNOWN_CIPHER);
			return 0;
			}
		}

	if (md_nid == -1)
		md = NULL;
	else
		{
		md = EVP_get_digestbynid(md_nid);
		if (!md)
			{
			EVPerr(EVP_F_EVP_PBE_CIPHERINIT,EVP_R_UNKNOWN_DIGEST);
			return 0;
			}
		}

	if (!keygen(ctx, pass, passlen, param, cipher, md, en_de))
		{
d103 1
a103 1
		}
d107 6
a112 21
DECLARE_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);

static int pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
	{
	int ret = pbe1->pbe_type - pbe2->pbe_type;
	if (ret)
		return ret;
	else
		return pbe1->pbe_nid - pbe2->pbe_nid;
	}

IMPLEMENT_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);

static int pbe_cmp(const EVP_PBE_CTL * const *a, const EVP_PBE_CTL * const *b)
	{
	int ret = (*a)->pbe_type - (*b)->pbe_type;
	if (ret)
		return ret;
	else
		return (*a)->pbe_nid - (*b)->pbe_nid;
	}
d116 3
a118 3
int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid, int md_nid,
			 EVP_PBE_KEYGEN *keygen)
	{
d120 3
a122 5
	if (!pbe_algs)
		pbe_algs = sk_EVP_PBE_CTL_new(pbe_cmp);
	if (!(pbe_tmp = (EVP_PBE_CTL*) OPENSSL_malloc (sizeof(EVP_PBE_CTL))))
		{
		EVPerr(EVP_F_EVP_PBE_ALG_ADD_TYPE,ERR_R_MALLOC_FAILURE);
d124 4
a127 5
		}
	pbe_tmp->pbe_type = pbe_type;
	pbe_tmp->pbe_nid = pbe_nid;
	pbe_tmp->cipher_nid = cipher_nid;
	pbe_tmp->md_nid = md_nid;
d129 1
a129 3


	sk_EVP_PBE_CTL_push (pbe_algs, pbe_tmp);
d131 1
a131 56
	}

int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
		    EVP_PBE_KEYGEN *keygen)
	{
	int cipher_nid, md_nid;
	if (cipher)
		cipher_nid = EVP_CIPHER_type(cipher);
	else
		cipher_nid = -1;
	if (md)
		md_nid = EVP_MD_type(md);
	else
		md_nid = -1;

	return EVP_PBE_alg_add_type(EVP_PBE_TYPE_OUTER, nid,
					cipher_nid, md_nid, keygen);
	}

int EVP_PBE_find(int type, int pbe_nid,
		 int *pcnid, int *pmnid, EVP_PBE_KEYGEN **pkeygen)
	{
	EVP_PBE_CTL *pbetmp = NULL, pbelu;
	int i;
	if (pbe_nid == NID_undef)
		return 0;

	pbelu.pbe_type = type;
	pbelu.pbe_nid = pbe_nid;

	if (pbe_algs)
		{
		i = sk_EVP_PBE_CTL_find(pbe_algs, &pbelu);
		if (i != -1)
			pbetmp = sk_EVP_PBE_CTL_value (pbe_algs, i);
		}
	if (pbetmp == NULL)
		{
		pbetmp = OBJ_bsearch_pbe2(&pbelu, builtin_pbe,
				     sizeof(builtin_pbe)/sizeof(EVP_PBE_CTL));
		}
	if (pbetmp == NULL)
		return 0;
	if (pcnid)
		*pcnid = pbetmp->cipher_nid;
	if (pmnid)
		*pmnid = pbetmp->md_nid;
	if (pkeygen)
		*pkeygen = pbetmp->keygen;
	return 1;
	}

static void free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
	 {
	 OPENSSL_freeFunc(pbe);
	 }
d134 2
a135 2
	{
	sk_EVP_PBE_CTL_pop_free(pbe_algs, free_evp_pbe_ctl);
d137 1
a137 1
	}
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a63 1
#include "evp_locl.h"
a88 4

#ifndef OPENSSL_NO_HMAC
	{EVP_PBE_TYPE_OUTER, NID_id_pbkdf2, -1, -1, PKCS5_v2_PBKDF2_keyivgen},
#endif
@


