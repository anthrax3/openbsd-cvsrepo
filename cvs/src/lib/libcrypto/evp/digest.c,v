head	1.28;
access;
symbols
	OPENBSD_6_2_BASE:1.28
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27;
locks; strict;
comment	@ * @;


1.28
date	2017.05.02.03.59.44;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	Dm63V7JYy6WzetfM;

1.27
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.26;
commitid	kT0fLt3r4lroFJra;

1.26
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches;
next	1.25;
commitid	5KSZBoxiLebzObKt;

1.25
date	2015.02.10.09.52.35;	author miod;	state Exp;
branches;
next	1.24;
commitid	elQcISUWkrkujoI4;

1.24
date	2014.11.09.19.12.18;	author miod;	state Exp;
branches;
next	1.23;
commitid	iQGHupXpW0OMZ3dp;

1.23
date	2014.07.13.11.14.02;	author miod;	state Exp;
branches;
next	1.22;
commitid	DfEs01RT0jjoxEtO;

1.22
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.21;
commitid	G74O1dmRukKsW7IJ;

1.21
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.20;
commitid	yQEL1wOWIearrW15;

1.20
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.19;
commitid	nzndm3zqPmFurSaK;

1.19
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.18;
commitid	id8dTrTMtnTn4fqt;

1.18
date	2014.06.15.15.46.22;	author jsing;	state Exp;
branches;
next	1.17;
commitid	WCsYK6h5fLG2y2he;

1.17
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	mJUVYpkFBZ0Zv2bG;

1.16
date	2014.05.03.15.50.24;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.29.05.39.21;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.25.18.57.51;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.08.08.13.23;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.09;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.34;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.27;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.19;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.43;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.37.10;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.07;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2012.10.13.21.23.40;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.04.13.15.16.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.28
log
@use freezero() instead of memset/explicit_bzero + free.  Substantially
reduces conditional logic (-218, +82).

MOD_EXP_CTIME_MIN_CACHE_LINE_WIDTH cache alignment calculation bn/bn_exp.c
wasn'tt quite right.  Two other tricky bits with ASN1_STRING_FLAG_NDEF and
BN_FLG_STATIC_DATA where the condition cannot be collapsed completely.

Passes regress.  ok beck
@
text
@/* $OpenBSD: digest.c,v 1.27 2017/01/29 17:49:23 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

void
EVP_MD_CTX_init(EVP_MD_CTX *ctx)
{
	memset(ctx, 0, sizeof *ctx);
}

EVP_MD_CTX *
EVP_MD_CTX_create(void)
{
	return calloc(1, sizeof(EVP_MD_CTX));
}

int
EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)
{
	EVP_MD_CTX_init(ctx);
	return EVP_DigestInit_ex(ctx, type, NULL);
}

int
EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
{
	EVP_MD_CTX_clear_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);

#ifndef OPENSSL_NO_ENGINE
	/* Whether it's nice or not, "Inits" can be used on "Final"'d contexts
	 * so this context may already have an ENGINE! Try to avoid releasing
	 * the previous handle, re-querying for an ENGINE, and having a
	 * reinitialisation, when it may all be unecessary. */
	if (ctx->engine && ctx->digest && (!type ||
	    (type && (type->type == ctx->digest->type))))
		goto skip_to_init;
	if (type) {
		/* Ensure an ENGINE left lying around from last time is cleared
		 * (the previous check attempted to avoid this if the same
		 * ENGINE and EVP_MD could be used). */
		if (ctx->engine)
			ENGINE_finish(ctx->engine);
		if (impl) {
			if (!ENGINE_init(impl)) {
				EVPerror(EVP_R_INITIALIZATION_ERROR);
				return 0;
			}
		} else
			/* Ask if an ENGINE is reserved for this job */
			impl = ENGINE_get_digest_engine(type->type);
		if (impl) {
			/* There's an ENGINE for this job ... (apparently) */
			const EVP_MD *d = ENGINE_get_digest(impl, type->type);
			if (!d) {
				/* Same comment from evp_enc.c */
				EVPerror(EVP_R_INITIALIZATION_ERROR);
				ENGINE_finish(impl);
				return 0;
			}
			/* We'll use the ENGINE's private digest definition */
			type = d;
			/* Store the ENGINE functional reference so we know
			 * 'type' came from an ENGINE and we need to release
			 * it when done. */
			ctx->engine = impl;
		} else
			ctx->engine = NULL;
	} else if (!ctx->digest) {
		EVPerror(EVP_R_NO_DIGEST_SET);
		return 0;
	}
#endif
	if (ctx->digest != type) {
		if (ctx->digest && ctx->digest->ctx_size && ctx->md_data &&
		    !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE)) {
			freezero(ctx->md_data, ctx->digest->ctx_size);
			ctx->md_data = NULL;
		}
		ctx->digest = type;
		if (!(ctx->flags & EVP_MD_CTX_FLAG_NO_INIT) && type->ctx_size) {
			ctx->update = type->update;
			ctx->md_data = malloc(type->ctx_size);
			if (ctx->md_data == NULL) {
				EVP_PKEY_CTX_free(ctx->pctx);
				ctx->pctx = NULL;
				EVPerror(ERR_R_MALLOC_FAILURE);
				return 0;
			}
		}
	}
#ifndef OPENSSL_NO_ENGINE
skip_to_init:
#endif
	if (ctx->pctx) {
		int r;
		r = EVP_PKEY_CTX_ctrl(ctx->pctx, -1, EVP_PKEY_OP_TYPE_SIG,
		    EVP_PKEY_CTRL_DIGESTINIT, 0, ctx);
		if (r <= 0 && (r != -2))
			return 0;
	}
	if (ctx->flags & EVP_MD_CTX_FLAG_NO_INIT)
		return 1;
	return ctx->digest->init(ctx);
}

int
EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data, size_t count)
{
	return ctx->update(ctx, data, count);
}

/* The caller can assume that this removes any secret data from the context */
int
EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
{
	int ret;

	ret = EVP_DigestFinal_ex(ctx, md, size);
	EVP_MD_CTX_cleanup(ctx);
	return ret;
}

/* The caller can assume that this removes any secret data from the context */
int
EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
{
	int ret;

	if ((size_t)ctx->digest->md_size > EVP_MAX_MD_SIZE) {
		EVPerror(EVP_R_TOO_LARGE);
		return 0;
	}
	ret = ctx->digest->final(ctx, md);
	if (size != NULL)
		*size = ctx->digest->md_size;
	if (ctx->digest->cleanup) {
		ctx->digest->cleanup(ctx);
		EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
	}
	memset(ctx->md_data, 0, ctx->digest->ctx_size);
	return ret;
}

int
EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in)
{
	EVP_MD_CTX_init(out);
	return EVP_MD_CTX_copy_ex(out, in);
}

int
EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)
{
	unsigned char *tmp_buf;

	if ((in == NULL) || (in->digest == NULL)) {
		EVPerror(EVP_R_INPUT_NOT_INITIALIZED);
		return 0;
	}
#ifndef OPENSSL_NO_ENGINE
	/* Make sure it's safe to copy a digest context using an ENGINE */
	if (in->engine && !ENGINE_init(in->engine)) {
		EVPerror(ERR_R_ENGINE_LIB);
		return 0;
	}
#endif

	if (out->digest == in->digest) {
		tmp_buf = out->md_data;
		EVP_MD_CTX_set_flags(out, EVP_MD_CTX_FLAG_REUSE);
	} else
		tmp_buf = NULL;
	EVP_MD_CTX_cleanup(out);
	memcpy(out, in, sizeof *out);

	if (in->md_data && out->digest->ctx_size) {
		if (tmp_buf)
			out->md_data = tmp_buf;
		else {
			out->md_data = malloc(out->digest->ctx_size);
			if (!out->md_data) {
				EVPerror(ERR_R_MALLOC_FAILURE);
				return 0;
			}
		}
		memcpy(out->md_data, in->md_data, out->digest->ctx_size);
	}

	out->update = in->update;

	if (in->pctx) {
		out->pctx = EVP_PKEY_CTX_dup(in->pctx);
		if (!out->pctx) {
			EVP_MD_CTX_cleanup(out);
			return 0;
		}
	}

	if (out->digest->copy)
		return out->digest->copy(out, in);

	return 1;
}

int
EVP_Digest(const void *data, size_t count,
    unsigned char *md, unsigned int *size, const EVP_MD *type, ENGINE *impl)
{
	EVP_MD_CTX ctx;
	int ret;

	EVP_MD_CTX_init(&ctx);
	EVP_MD_CTX_set_flags(&ctx, EVP_MD_CTX_FLAG_ONESHOT);
	ret = EVP_DigestInit_ex(&ctx, type, impl) &&
	    EVP_DigestUpdate(&ctx, data, count) &&
	    EVP_DigestFinal_ex(&ctx, md, size);
	EVP_MD_CTX_cleanup(&ctx);

	return ret;
}

void
EVP_MD_CTX_destroy(EVP_MD_CTX *ctx)
{
	if (ctx) {
		EVP_MD_CTX_cleanup(ctx);
		free(ctx);
	}
}

/* This call frees resources associated with the context */
int
EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx)
{
	/* Don't assume ctx->md_data was cleaned in EVP_Digest_Final,
	 * because sometimes only copies of the context are ever finalised.
	 */
	if (ctx->digest && ctx->digest->cleanup &&
	    !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_CLEANED))
		ctx->digest->cleanup(ctx);
	if (ctx->digest && ctx->digest->ctx_size && ctx->md_data &&
	    !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE))
		freezero(ctx->md_data, ctx->digest->ctx_size);
	EVP_PKEY_CTX_free(ctx->pctx);
#ifndef OPENSSL_NO_ENGINE
	if (ctx->engine)
		/* The EVP_MD we used belongs to an ENGINE, release the
		 * functional reference we held for this reason. */
		ENGINE_finish(ctx->engine);
#endif
	memset(ctx, 0, sizeof *ctx);

	return 1;
}

int
EVP_MD_CTX_ctrl(EVP_MD_CTX *ctx, int type, int arg, void *ptr)
{
	int ret;

	if (!ctx->digest) {
		EVPerror(EVP_R_NO_CIPHER_SET);
		return 0;
	}

	if (!ctx->digest->md_ctrl) {
		EVPerror(EVP_R_CTRL_NOT_IMPLEMENTED);
		return 0;
	}

	ret = ctx->digest->md_ctrl(ctx, type, arg, ptr);
	if (ret == -1) {
		EVPerror(EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED);
		return 0;
	}
	return ret;
}
@


1.27
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.26 2015/02/11 03:19:37 doug Exp $ */
d196 1
a196 2
			explicit_bzero(ctx->md_data, ctx->digest->ctx_size);
			free(ctx->md_data);
d362 2
a363 4
	    !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE)) {
		explicit_bzero(ctx->md_data, ctx->digest->ctx_size);
		free(ctx->md_data);
	}
@


1.26
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.25 2015/02/10 09:52:35 miod Exp $ */
d165 1
a165 2
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,
				    EVP_R_INITIALIZATION_ERROR);
d176 1
a176 2
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,
				    EVP_R_INITIALIZATION_ERROR);
d189 1
a189 1
		EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_NO_DIGEST_SET);
d207 1
a207 2
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,
				    ERR_R_MALLOC_FAILURE);
d251 1
a251 1
		EVPerr(EVP_F_EVP_DIGESTFINAL_EX, EVP_R_TOO_LARGE);
d278 1
a278 1
		EVPerr(EVP_F_EVP_MD_CTX_COPY_EX, EVP_R_INPUT_NOT_INITIALIZED);
d284 1
a284 1
		EVPerr(EVP_F_EVP_MD_CTX_COPY_EX, ERR_R_ENGINE_LIB);
d303 1
a303 2
				EVPerr(EVP_F_EVP_MD_CTX_COPY_EX,
				    ERR_R_MALLOC_FAILURE);
d385 1
a385 1
		EVPerr(EVP_F_EVP_MD_CTX_CTRL, EVP_R_NO_CIPHER_SET);
d390 1
a390 1
		EVPerr(EVP_F_EVP_MD_CTX_CTRL, EVP_R_CTRL_NOT_IMPLEMENTED);
d396 1
a396 2
		EVPerr(EVP_F_EVP_MD_CTX_CTRL,
		    EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED);
@


1.25
log
@Replace assert() and OPENSSL_assert() calls with proper error return paths.
Careful review, feedback & ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.24 2014/11/09 19:12:18 miod Exp $ */
d117 1
@


1.24
log
@Introduce EVP_MD_CTX_ctrl(), to allow for fine control of a given digest.
This functionality was already available (and optional), and used in the
bowels of the ASN.1 code. This exposes it as a public interface, which will
be used by the upcoming GOST code.
Crank libcrypto minor version.

From Dmitry Eremin-Solenikov.
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.23 2014/07/13 11:14:02 miod Exp $ */
d252 4
a255 1
	OPENSSL_assert(ctx->digest->md_size <= EVP_MAX_MD_SIZE);
@


1.23
log
@EVP_DigestInit_ex() may be used to recycle an existing EVP_MD_CTX without having
to reinitialize all of it, especially if it is used with the same MD algorithm.

However, when the MD algorithm changes, it needs to perform more cleanups.
Make that code more closer to what EVP_MD_CTX_cleanup() does by:
- only freeing md_data if EVP_MD_CTX_FLAG_REUSE is not set
- performing an explicit_bzero of md_data before freeing it
- making sure we call EVP_PKEY_CTX_free on the pctx if the allocation for the
  new md_data fails.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.22 2014/07/12 16:03:37 miod Exp $ */
d377 24
@


1.22
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.21 2014/07/11 08:44:48 jsing Exp $ */
d195 3
a197 1
		if (ctx->digest && ctx->digest->ctx_size)
d199 2
d206 2
d364 1
a364 1
		OPENSSL_cleanse(ctx->md_data, ctx->digest->ctx_size);
@


1.21
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.20 2014/07/10 22:45:57 jsing Exp $ */
d361 1
a361 2
	if (ctx->pctx)
		EVP_PKEY_CTX_free(ctx->pctx);
@


1.20
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.19 2014/07/10 13:58:22 jsing Exp $ */
d117 1
a117 1
#include "cryptlib.h"
d119 1
a119 1
#include <openssl/evp.h>
@


1.19
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.18 2014/06/15 15:46:22 jsing Exp $ */
d114 2
@


1.18
log
@Simplify EVP_MD_CTX_create() by just using calloc(). Also, use 0 rather
than '\0' for several memset().

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: digest.c,v 1.17 2014/06/12 15:49:29 deraadt Exp $ */
d113 2
@


1.17
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d123 1
a123 1
	memset(ctx, '\0', sizeof *ctx);
d129 1
a129 6
	EVP_MD_CTX *ctx = malloc(sizeof *ctx);

	if (ctx)
		EVP_MD_CTX_init(ctx);

	return ctx;
d365 1
a365 1
	memset(ctx, '\0', sizeof *ctx);
@


1.16
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/evp/digest.c */
@


1.15
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d120 10
a129 8
void EVP_MD_CTX_init(EVP_MD_CTX *ctx)
	{
	memset(ctx,'\0',sizeof *ctx);
	}

EVP_MD_CTX *EVP_MD_CTX_create(void)
	{
	EVP_MD_CTX *ctx=malloc(sizeof *ctx);
d135 1
a135 1
	}
d137 3
a139 2
int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)
	{
d142 6
a147 1
	}
a148 3
int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
	{
	EVP_MD_CTX_clear_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
d155 1
a155 1
			(type && (type->type == ctx->digest->type))))
d157 1
a157 2
	if (type)
		{
d161 1
a161 1
		if(ctx->engine)
d163 4
a166 5
		if(impl)
			{
			if (!ENGINE_init(impl))
				{
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_INITIALIZATION_ERROR);
a167 1
				}
d169 1
a169 1
		else
d172 1
a172 2
		if(impl)
			{
d175 1
a175 2
			if(!d)
				{
d177 2
a178 1
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_INITIALIZATION_ERROR);
d181 1
a181 1
				}
d188 1
a188 2
			}
		else
d190 2
a191 5
		}
	else
	if(!ctx->digest)
		{
		EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_NO_DIGEST_SET);
d193 1
a193 1
		}
d195 1
a195 2
	if (ctx->digest != type)
		{
d198 2
a199 3
		ctx->digest=type;
		if (!(ctx->flags & EVP_MD_CTX_FLAG_NO_INIT) && type->ctx_size)
			{
d201 2
a202 3
			ctx->md_data=malloc(type->ctx_size);
			if (ctx->md_data == NULL)
				{
d204 1
a204 1
							ERR_R_MALLOC_FAILURE);
a205 1
				}
d208 1
d212 1
a212 2
	if (ctx->pctx)
		{
d215 1
a215 1
					EVP_PKEY_CTRL_DIGESTINIT, 0, ctx);
d218 1
a218 1
		}
d222 1
a222 1
	}
d224 5
a228 4
int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data, size_t count)
	{
	return ctx->update(ctx,data,count);
	}
d231 3
a233 2
int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
	{
d235 1
d239 1
a239 1
	}
d242 3
a244 2
int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
	{
d248 1
a248 1
	ret=ctx->digest->final(ctx,md);
d250 2
a251 3
		*size=ctx->digest->md_size;
	if (ctx->digest->cleanup)
		{
d253 3
a255 3
		EVP_MD_CTX_set_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
		}
	memset(ctx->md_data,0,ctx->digest->ctx_size);
d257 1
a257 1
	}
d259 3
a261 2
int EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in)
	{
d264 1
a264 1
	}
d266 3
a268 2
int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)
	{
d270 3
a272 3
	if ((in == NULL) || (in->digest == NULL))
		{
		EVPerr(EVP_F_EVP_MD_CTX_COPY_EX,EVP_R_INPUT_NOT_INITIALIZED);
d274 1
a274 1
		}
d277 2
a278 3
	if (in->engine && !ENGINE_init(in->engine))
		{
		EVPerr(EVP_F_EVP_MD_CTX_COPY_EX,ERR_R_ENGINE_LIB);
d280 1
a280 1
		}
d283 1
a283 2
	if (out->digest == in->digest)
		{
d285 3
a287 3
	    	EVP_MD_CTX_set_flags(out,EVP_MD_CTX_FLAG_REUSE);
		}
	else tmp_buf = NULL;
d289 1
a289 1
	memcpy(out,in,sizeof *out);
d291 1
a291 2
	if (in->md_data && out->digest->ctx_size)
		{
d294 5
a298 6
		else
			{
			out->md_data=malloc(out->digest->ctx_size);
			if (!out->md_data)
				{
				EVPerr(EVP_F_EVP_MD_CTX_COPY_EX,ERR_R_MALLOC_FAILURE);
a299 1
				}
a300 1
		memcpy(out->md_data,in->md_data,out->digest->ctx_size);
d302 2
d307 1
a307 2
	if (in->pctx)
		{
d309 1
a309 2
		if (!out->pctx)
			{
a311 1
			}
d313 1
d316 2
a317 2
		return out->digest->copy(out,in);
	
d319 1
a319 1
	}
d321 4
a324 3
int EVP_Digest(const void *data, size_t count,
		unsigned char *md, unsigned int *size, const EVP_MD *type, ENGINE *impl)
	{
d329 4
a332 4
	EVP_MD_CTX_set_flags(&ctx,EVP_MD_CTX_FLAG_ONESHOT);
	ret=EVP_DigestInit_ex(&ctx, type, impl)
	  && EVP_DigestUpdate(&ctx, data, count)
	  && EVP_DigestFinal_ex(&ctx, md, size);
d336 1
a336 1
	}
d338 4
a341 4
void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx)
	{
	if (ctx)
		{
a343 1
		}
d345 1
d348 3
a350 2
int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx)
	{
d354 2
a355 2
	if (ctx->digest && ctx->digest->cleanup
	    && !EVP_MD_CTX_test_flags(ctx,EVP_MD_CTX_FLAG_CLEANED))
d357 3
a359 4
	if (ctx->digest && ctx->digest->ctx_size && ctx->md_data
	    && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE))
		{
		OPENSSL_cleanse(ctx->md_data,ctx->digest->ctx_size);
d361 1
a361 1
		}
d365 1
a365 1
	if(ctx->engine)
d370 1
a370 1
	memset(ctx,'\0',sizeof *ctx);
d373 1
a373 1
	}
@


1.14
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d127 1
a127 1
	EVP_MD_CTX *ctx=OPENSSL_malloc(sizeof *ctx);
d201 1
a201 1
			OPENSSL_free(ctx->md_data);
d206 1
a206 1
			ctx->md_data=OPENSSL_malloc(type->ctx_size);
d301 1
a301 1
			out->md_data=OPENSSL_malloc(out->digest->ctx_size);
d350 1
a350 1
		OPENSSL_free(ctx);
d367 1
a367 1
		OPENSSL_free(ctx->md_data);
@


1.13
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a119 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a227 10
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		{
		if (FIPS_digestinit(ctx, type))
			return 1;
		OPENSSL_free(ctx->md_data);
		ctx->md_data = NULL;
		return 0;
		}
#endif
a232 3
#ifdef OPENSSL_FIPS
	return FIPS_digestupdate(ctx, data, count);
#else
a233 1
#endif
a247 3
#ifdef OPENSSL_FIPS
	return FIPS_digestfinal(ctx, md, size);
#else
a260 1
#endif
a356 1
#ifndef OPENSSL_FIPS
a368 1
#endif
a375 3
#endif
#ifdef OPENSSL_FIPS
	FIPS_md_ctx_cleanup(ctx);
@


1.12
log
@resolve conflicts
@
text
@d270 1
d369 5
a373 2
	EVP_MD_CTX_cleanup(ctx);
	OPENSSL_free(ctx);
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d120 4
d232 10
d247 3
d251 1
d266 3
a269 1

d281 1
d375 1
d388 1
d396 3
@


1.10
log
@resolve conflicts
@
text
@a118 1
#include "evp_locl.h"
d129 2
a130 1
	EVP_MD_CTX_init(ctx);
d141 3
a143 33
#ifdef OPENSSL_FIPS

/* The purpose of these is to trap programs that attempt to use non FIPS
 * algorithms in FIPS mode and ignore the errors.
 */

static int bad_init(EVP_MD_CTX *ctx)
	{ FIPS_ERROR_IGNORED("Digest init"); return 0;}

static int bad_update(EVP_MD_CTX *ctx,const void *data,size_t count)
	{ FIPS_ERROR_IGNORED("Digest update"); return 0;}

static int bad_final(EVP_MD_CTX *ctx,unsigned char *md)
	{ FIPS_ERROR_IGNORED("Digest Final"); return 0;}

static const EVP_MD bad_md =
	{
	0,
	0,
	0,
	0,
	bad_init,
	bad_update,
	bad_final,
	NULL,
	NULL,
	NULL,
	0,
	{0,0,0,0},
	};

#endif

d145 8
a152 37

#ifdef OPENSSL_FIPS

static int do_engine_null(ENGINE *impl) { return 0;}
static int do_evp_md_engine_null(EVP_MD_CTX *ctx,
				const EVP_MD **ptype, ENGINE *impl)
	{ return 1; }

static int (*do_engine_init)(ENGINE *impl)
		= do_engine_null;

static int (*do_engine_finish)(ENGINE *impl)
		= do_engine_null;

static int (*do_evp_md_engine)
	(EVP_MD_CTX *ctx, const EVP_MD **ptype, ENGINE *impl)
		= do_evp_md_engine_null;

void int_EVP_MD_set_engine_callbacks(
	int (*eng_md_init)(ENGINE *impl),
	int (*eng_md_fin)(ENGINE *impl),
	int (*eng_md_evp)
		(EVP_MD_CTX *ctx, const EVP_MD **ptype, ENGINE *impl))
	{
	do_engine_init = eng_md_init;
	do_engine_finish = eng_md_fin;
	do_evp_md_engine = eng_md_evp;
	}

#else

#define do_engine_init	ENGINE_init
#define do_engine_finish ENGINE_finish

static int do_evp_md_engine(EVP_MD_CTX *ctx, const EVP_MD **ptype, ENGINE *impl)
	{
	if (*ptype)
d163 1
a163 1
				EVPerr(EVP_F_DO_EVP_MD_ENGINE,EVP_R_INITIALIZATION_ERROR);
d169 1
a169 1
			impl = ENGINE_get_digest_engine((*ptype)->type);
d173 1
a173 1
			const EVP_MD *d = ENGINE_get_digest(impl, (*ptype)->type);
d177 2
a178 1
				EVPerr(EVP_F_DO_EVP_MD_ENGINE,EVP_R_INITIALIZATION_ERROR);
d182 1
a182 1
			*ptype = d;
d194 1
a194 1
		EVPerr(EVP_F_DO_EVP_MD_ENGINE,EVP_R_NO_DIGEST_SET);
a196 28
	return 1;
	}

#endif

#endif

int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
	{
	M_EVP_MD_CTX_clear_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
#ifdef OPENSSL_FIPS
	if(FIPS_selftest_failed())
		{
		FIPSerr(FIPS_F_EVP_DIGESTINIT_EX,FIPS_R_FIPS_SELFTEST_FAILED);
		ctx->digest = &bad_md;
		return 0;
		}
#endif
#ifndef OPENSSL_NO_ENGINE
	/* Whether it's nice or not, "Inits" can be used on "Final"'d contexts
	 * so this context may already have an ENGINE! Try to avoid releasing
	 * the previous handle, re-querying for an ENGINE, and having a
	 * reinitialisation, when it may all be unecessary. */
	if (ctx->engine && ctx->digest && (!type ||
			(type && (type->type == ctx->digest->type))))
		goto skip_to_init;
	if (!do_evp_md_engine(ctx, &type, impl))
		return 0;
d200 4
a203 2
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
d205 3
a207 2
			if (!(type->flags & EVP_MD_FLAG_FIPS) 
			 && !(ctx->flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW))
d209 2
a210 2
				EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_DISABLED_FOR_FIPS);
				ctx->digest = &bad_md;
a213 6
#endif
		if (ctx->digest && ctx->digest->ctx_size)
			OPENSSL_free(ctx->md_data);
		ctx->digest=type;
		if (type->ctx_size)
			ctx->md_data=OPENSSL_malloc(type->ctx_size);
d216 1
a216 1
	skip_to_init:
d218 10
d231 1
a231 2
int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data,
	     size_t count)
d233 1
a233 4
#ifdef OPENSSL_FIPS
	FIPS_selftest_check();
#endif
	return ctx->digest->update(ctx,data,count);
a248 3
#ifdef OPENSSL_FIPS
	FIPS_selftest_check();
#endif
d257 1
a257 1
		M_EVP_MD_CTX_set_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
d279 1
a279 1
	if (in->engine && !do_engine_init(in->engine))
d289 1
a289 1
	    	M_EVP_MD_CTX_set_flags(out,EVP_MD_CTX_FLAG_REUSE);
d295 1
a295 1
	if (out->digest->ctx_size)
d297 11
a307 2
		if (tmp_buf) out->md_data = tmp_buf;
		else out->md_data=OPENSSL_malloc(out->digest->ctx_size);
d311 12
d336 1
a336 1
	M_EVP_MD_CTX_set_flags(&ctx,EVP_MD_CTX_FLAG_ONESHOT);
d358 1
a358 1
	    && !M_EVP_MD_CTX_test_flags(ctx,EVP_MD_CTX_FLAG_CLEANED))
d361 1
a361 1
	    && !M_EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE))
d366 2
d372 1
a372 1
		do_engine_finish(ctx->engine);
@


1.9
log
@resolve conflicts
@
text
@d119 1
d141 69
a209 1
int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
d211 1
a211 10
	EVP_MD_CTX_clear_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
#ifndef OPENSSL_NO_ENGINE
	/* Whether it's nice or not, "Inits" can be used on "Final"'d contexts
	 * so this context may already have an ENGINE! Try to avoid releasing
	 * the previous handle, re-querying for an ENGINE, and having a
	 * reinitialisation, when it may all be unecessary. */
	if (ctx->engine && ctx->digest && (!type ||
			(type && (type->type == ctx->digest->type))))
		goto skip_to_init;
	if (type)
d222 1
a222 1
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_INITIALIZATION_ERROR);
d228 1
a228 1
			impl = ENGINE_get_digest_engine(type->type);
d232 1
a232 1
			const EVP_MD *d = ENGINE_get_digest(impl, type->type);
d236 1
a236 1
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_INITIALIZATION_ERROR);
d240 1
a240 1
			type = d;
d252 1
a252 1
		EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_NO_DIGEST_SET);
d255 28
d286 12
d305 1
a305 1
skip_to_init:
d313 3
d332 3
d343 1
a343 1
		EVP_MD_CTX_set_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
d365 1
a365 1
	if (in->engine && !ENGINE_init(in->engine))
d375 1
a375 1
	    	EVP_MD_CTX_set_flags(out,EVP_MD_CTX_FLAG_REUSE);
d401 1
a401 1
	EVP_MD_CTX_set_flags(&ctx,EVP_MD_CTX_FLAG_ONESHOT);
d423 1
a423 1
	    && !EVP_MD_CTX_test_flags(ctx,EVP_MD_CTX_FLAG_CLEANED))
d426 1
a426 1
	    && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE))
d435 1
a435 1
		ENGINE_finish(ctx->engine);
@


1.8
log
@resolve conflicts
@
text
@a139 33
#ifdef OPENSSL_FIPS

/* The purpose of these is to trap programs that attempt to use non FIPS
 * algorithms in FIPS mode and ignore the errors.
 */

static int bad_init(EVP_MD_CTX *ctx)
	{ FIPS_ERROR_IGNORED("Digest init"); return 0;}

static int bad_update(EVP_MD_CTX *ctx,const void *data,unsigned long count)
	{ FIPS_ERROR_IGNORED("Digest update"); return 0;}

static int bad_final(EVP_MD_CTX *ctx,unsigned char *md)
	{ FIPS_ERROR_IGNORED("Digest Final"); return 0;}

static const EVP_MD bad_md =
	{
	0,
	0,
	0,
	0,
	bad_init,
	bad_update,
	bad_final,
	NULL,
	NULL,
	NULL,
	0,
	{0,0,0,0},
	};

#endif

d162 1
a162 1
				EVPerr(EVP_F_EVP_DIGESTINIT, EVP_R_INITIALIZATION_ERROR);
d176 1
a176 1
				EVPerr(EVP_F_EVP_DIGESTINIT, EVP_R_INITIALIZATION_ERROR);
d192 1
a192 1
		EVPerr(EVP_F_EVP_DIGESTINIT, EVP_R_NO_DIGEST_SET);
a197 12
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
			{
			if (!(type->flags & EVP_MD_FLAG_FIPS) 
			 && !(ctx->flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW))
				{
				EVPerr(EVP_F_EVP_DIGESTINIT, EVP_R_DISABLED_FOR_FIPS);
				ctx->digest = &bad_md;
				return 0;
				}
			}
#endif
d211 1
a211 1
	     unsigned int count)
d213 1
a213 1
	return ctx->digest->update(ctx,data,(unsigned long)count);
d254 1
a254 1
		EVPerr(EVP_F_EVP_MD_CTX_COPY,EVP_R_INPUT_NOT_INITIALIZED);
d261 1
a261 1
		EVPerr(EVP_F_EVP_MD_CTX_COPY,ERR_R_ENGINE_LIB);
d288 1
a288 1
int EVP_Digest(void *data, unsigned int count,
@


1.7
log
@update missing pieces from 0.9.7d; ok henning
crank minor for API extensions
@
text
@d140 33
d231 12
@


1.6
log
@backout for now
@
text
@d251 1
d266 6
d277 2
a278 1
		out->md_data=OPENSSL_malloc(out->digest->ctx_size);
d281 1
a281 1
	
d319 2
a320 1
	if (ctx->digest && ctx->digest->ctx_size && ctx->md_data)
@


1.5
log
@merge 0.9.7d
@
text
@a250 1
	unsigned char *tmp_buf;
a264 6
	if (out->digest == in->digest)
		{
		tmp_buf = out->md_data;
	    	EVP_MD_CTX_set_flags(out,EVP_MD_CTX_FLAG_REUSE);
		}
	else tmp_buf = NULL;
d270 1
a270 2
		if (tmp_buf) out->md_data = tmp_buf;
		else out->md_data=OPENSSL_malloc(out->digest->ctx_size);
d273 1
a273 1

d311 1
a311 2
	if (ctx->digest && ctx->digest->ctx_size && ctx->md_data
	    && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE))
@


1.4
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d251 1
d266 6
d277 2
a278 1
		out->md_data=OPENSSL_malloc(out->digest->ctx_size);
d281 1
a281 1
	
d319 2
a320 1
	if (ctx->digest && ctx->digest->ctx_size && ctx->md_data)
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d116 1
d118 1
d143 1
d189 2
a190 1
	else if(!ctx->digest)
d195 1
d204 1
d206 1
d229 2
d256 1
d263 1
d313 1
a313 1
		memset(ctx->md_data,0,ctx->digest->ctx_size);
d316 1
d321 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d58 53
d116 1
d118 1
a118 1
void EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)
d120 1
a120 2
	ctx->digest=type;
	type->init(&(ctx->md));
d123 81
a203 1
void EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data,
d206 10
a215 1
	ctx->digest->update(&(ctx->md.base[0]),data,(unsigned long)count);
d218 2
a219 1
void EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
d221 2
a222 1
	ctx->digest->final(md,&(ctx->md.base[0]));
d225 13
a237 1
	memset(&(ctx->md),0,sizeof(ctx->md));
d240 73
a312 9
int EVP_MD_CTX_copy(EVP_MD_CTX *out, EVP_MD_CTX *in)
{
    if ((in == NULL) || (in->digest == NULL)) {
        EVPerr(EVP_F_EVP_MD_CTX_COPY,EVP_R_INPUT_NOT_INITIALIZED);
	return 0;
    }
    memcpy((char *)out,(char *)in,in->digest->ctx_size);
    return 1;
}    
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "objects.h"
#include "evp.h"
d64 1
a64 3
void EVP_DigestInit(ctx,type)
EVP_MD_CTX *ctx;
EVP_MD *type;
d70 2
a71 4
void EVP_DigestUpdate(ctx,data,count)
EVP_MD_CTX *ctx;
unsigned char *data;
unsigned int count;
d76 1
a76 4
void EVP_DigestFinal(ctx,md,size)
EVP_MD_CTX *ctx;
unsigned char *md;
unsigned int *size;
d83 10
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d61 2
a62 3
#include <openssl/objects.h>
#include <openssl/evp.h>
#include <openssl/engine.h>
d64 3
a66 1
void EVP_MD_CTX_init(EVP_MD_CTX *ctx)
d68 2
a69 1
	memset(ctx,'\0',sizeof *ctx);
d72 4
a75 1
EVP_MD_CTX *EVP_MD_CTX_create(void)
d77 1
a77 11
	EVP_MD_CTX *ctx=OPENSSL_malloc(sizeof *ctx);

	EVP_MD_CTX_init(ctx);

	return ctx;
	}

int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)
	{
	EVP_MD_CTX_init(ctx);
	return EVP_DigestInit_ex(ctx, type, NULL);
d80 4
a83 1
int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
d85 1
a85 83
	EVP_MD_CTX_clear_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
	/* Whether it's nice or not, "Inits" can be used on "Final"'d contexts
	 * so this context may already have an ENGINE! Try to avoid releasing
	 * the previous handle, re-querying for an ENGINE, and having a
	 * reinitialisation, when it may all be unecessary. */
	if (ctx->engine && ctx->digest && (!type ||
			(type && (type->type == ctx->digest->type))))
		goto skip_to_init;
	if (type)
		{
		/* Ensure an ENGINE left lying around from last time is cleared
		 * (the previous check attempted to avoid this if the same
		 * ENGINE and EVP_MD could be used). */
		if(ctx->engine)
			ENGINE_finish(ctx->engine);
		if(impl)
			{
			if (!ENGINE_init(impl))
				{
				EVPerr(EVP_F_EVP_DIGESTINIT, EVP_R_INITIALIZATION_ERROR);
				return 0;
				}
			}
		else
			/* Ask if an ENGINE is reserved for this job */
			impl = ENGINE_get_digest_engine(type->type);
		if(impl)
			{
			/* There's an ENGINE for this job ... (apparently) */
			const EVP_MD *d = ENGINE_get_digest(impl, type->type);
			if(!d)
				{
				/* Same comment from evp_enc.c */
				EVPerr(EVP_F_EVP_DIGESTINIT, EVP_R_INITIALIZATION_ERROR);
				return 0;
				}
			/* We'll use the ENGINE's private digest definition */
			type = d;
			/* Store the ENGINE functional reference so we know
			 * 'type' came from an ENGINE and we need to release
			 * it when done. */
			ctx->engine = impl;
			}
		else
			ctx->engine = NULL;
		}
	else if(!ctx->digest)
		{
		EVPerr(EVP_F_EVP_DIGESTINIT, EVP_R_NO_DIGEST_SET);
		return 0;
		}
	if (ctx->digest != type)
		{
		if (ctx->digest && ctx->digest->ctx_size)
			OPENSSL_free(ctx->md_data);
		ctx->digest=type;
		if (type->ctx_size)
			ctx->md_data=OPENSSL_malloc(type->ctx_size);
		}
skip_to_init:
	return ctx->digest->init(ctx);
	}

int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data,
	     unsigned int count)
	{
	return ctx->digest->update(ctx,data,(unsigned long)count);
	}

/* The caller can assume that this removes any secret data from the context */
int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
	{
	int ret;
	ret = EVP_DigestFinal_ex(ctx, md, size);
	EVP_MD_CTX_cleanup(ctx);
	return ret;
	}

/* The caller can assume that this removes any secret data from the context */
int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
	{
	int ret;
	ret=ctx->digest->final(ctx,md);
d88 1
a88 87
	if (ctx->digest->cleanup)
		{
		ctx->digest->cleanup(ctx);
		EVP_MD_CTX_set_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
		}
	memset(ctx->md_data,0,ctx->digest->ctx_size);
	return ret;
	}

int EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in)
	{
	EVP_MD_CTX_init(out);
	return EVP_MD_CTX_copy_ex(out, in);
	}

int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)
	{
	if ((in == NULL) || (in->digest == NULL))
		{
		EVPerr(EVP_F_EVP_MD_CTX_COPY,EVP_R_INPUT_NOT_INITIALIZED);
		return 0;
		}
	/* Make sure it's safe to copy a digest context using an ENGINE */
	if (in->engine && !ENGINE_init(in->engine))
		{
		EVPerr(EVP_F_EVP_MD_CTX_COPY,ERR_R_ENGINE_LIB);
		return 0;
		}

	EVP_MD_CTX_cleanup(out);
	memcpy(out,in,sizeof *out);

	if (out->digest->ctx_size)
		{
		out->md_data=OPENSSL_malloc(out->digest->ctx_size);
		memcpy(out->md_data,in->md_data,out->digest->ctx_size);
		}
	
	if (out->digest->copy)
		return out->digest->copy(out,in);
	
	return 1;
	}

int EVP_Digest(void *data, unsigned int count,
		unsigned char *md, unsigned int *size, const EVP_MD *type, ENGINE *impl)
	{
	EVP_MD_CTX ctx;
	int ret;

	EVP_MD_CTX_init(&ctx);
	EVP_MD_CTX_set_flags(&ctx,EVP_MD_CTX_FLAG_ONESHOT);
	ret=EVP_DigestInit_ex(&ctx, type, impl)
	  && EVP_DigestUpdate(&ctx, data, count)
	  && EVP_DigestFinal_ex(&ctx, md, size);
	EVP_MD_CTX_cleanup(&ctx);

	return ret;
	}

void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx)
	{
	EVP_MD_CTX_cleanup(ctx);
	OPENSSL_free(ctx);
	}

/* This call frees resources associated with the context */
int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx)
	{
	/* Don't assume ctx->md_data was cleaned in EVP_Digest_Final,
	 * because sometimes only copies of the context are ever finalised.
	 */
	if (ctx->digest && ctx->digest->cleanup
	    && !EVP_MD_CTX_test_flags(ctx,EVP_MD_CTX_FLAG_CLEANED))
		ctx->digest->cleanup(ctx);
	if (ctx->digest && ctx->digest->ctx_size && ctx->md_data)
		{
		memset(ctx->md_data,0,ctx->digest->ctx_size);
		OPENSSL_free(ctx->md_data);
		}
	if(ctx->engine)
		/* The EVP_MD we used belongs to an ENGINE, release the
		 * functional reference we held for this reason. */
		ENGINE_finish(ctx->engine);
	memset(ctx,'\0',sizeof *ctx);

	return 1;
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a115 1
#ifndef OPENSSL_NO_ENGINE
a116 1
#endif
a140 1
#ifndef OPENSSL_NO_ENGINE
d186 1
a186 2
	else
	if(!ctx->digest)
a190 1
#endif
a198 1
#ifndef OPENSSL_NO_ENGINE
a199 1
#endif
a221 2

	OPENSSL_assert(ctx->digest->md_size <= EVP_MAX_MD_SIZE);
a246 1
#ifndef OPENSSL_NO_ENGINE
a252 1
#endif
d302 1
a302 1
		OPENSSL_cleanse(ctx->md_data,ctx->digest->ctx_size);
a304 1
#ifndef OPENSSL_NO_ENGINE
a308 1
#endif
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@a250 1
	unsigned char *tmp_buf;
a264 6
	if (out->digest == in->digest)
		{
		tmp_buf = out->md_data;
	    	EVP_MD_CTX_set_flags(out,EVP_MD_CTX_FLAG_REUSE);
		}
	else tmp_buf = NULL;
d270 1
a270 2
		if (tmp_buf) out->md_data = tmp_buf;
		else out->md_data=OPENSSL_malloc(out->digest->ctx_size);
d273 1
a273 1

d311 1
a311 2
	if (ctx->digest && ctx->digest->ctx_size && ctx->md_data
	    && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE))
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a139 33
#ifdef OPENSSL_FIPS

/* The purpose of these is to trap programs that attempt to use non FIPS
 * algorithms in FIPS mode and ignore the errors.
 */

static int bad_init(EVP_MD_CTX *ctx)
	{ FIPS_ERROR_IGNORED("Digest init"); return 0;}

static int bad_update(EVP_MD_CTX *ctx,const void *data,unsigned long count)
	{ FIPS_ERROR_IGNORED("Digest update"); return 0;}

static int bad_final(EVP_MD_CTX *ctx,unsigned char *md)
	{ FIPS_ERROR_IGNORED("Digest Final"); return 0;}

static const EVP_MD bad_md =
	{
	0,
	0,
	0,
	0,
	bad_init,
	bad_update,
	bad_final,
	NULL,
	NULL,
	NULL,
	0,
	{0,0,0,0},
	};

#endif

a197 12
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
			{
			if (!(type->flags & EVP_MD_FLAG_FIPS) 
			 && !(ctx->flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW))
				{
				EVPerr(EVP_F_EVP_DIGESTINIT, EVP_R_DISABLED_FOR_FIPS);
				ctx->digest = &bad_md;
				return 0;
				}
			}
#endif
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d140 33
d195 1
a195 1
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_INITIALIZATION_ERROR);
d209 1
a209 1
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_INITIALIZATION_ERROR);
d225 1
a225 1
		EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_NO_DIGEST_SET);
d231 12
d256 1
a256 1
	     size_t count)
d258 1
a258 1
	return ctx->digest->update(ctx,data,count);
d299 1
a299 1
		EVPerr(EVP_F_EVP_MD_CTX_COPY_EX,EVP_R_INPUT_NOT_INITIALIZED);
d306 1
a306 1
		EVPerr(EVP_F_EVP_MD_CTX_COPY_EX,ERR_R_ENGINE_LIB);
d333 1
a333 1
int EVP_Digest(const void *data, size_t count,
@


1.1.1.7
log
@import openssl-0.9.8j
@
text
@a118 1
#include "evp_locl.h"
d140 3
a142 33
#ifdef OPENSSL_FIPS

/* The purpose of these is to trap programs that attempt to use non FIPS
 * algorithms in FIPS mode and ignore the errors.
 */

static int bad_init(EVP_MD_CTX *ctx)
	{ FIPS_ERROR_IGNORED("Digest init"); return 0;}

static int bad_update(EVP_MD_CTX *ctx,const void *data,size_t count)
	{ FIPS_ERROR_IGNORED("Digest update"); return 0;}

static int bad_final(EVP_MD_CTX *ctx,unsigned char *md)
	{ FIPS_ERROR_IGNORED("Digest Final"); return 0;}

static const EVP_MD bad_md =
	{
	0,
	0,
	0,
	0,
	bad_init,
	bad_update,
	bad_final,
	NULL,
	NULL,
	NULL,
	0,
	{0,0,0,0},
	};

#endif

d144 8
a151 37

#ifdef OPENSSL_FIPS

static int do_engine_null(ENGINE *impl) { return 0;}
static int do_evp_md_engine_null(EVP_MD_CTX *ctx,
				const EVP_MD **ptype, ENGINE *impl)
	{ return 1; }

static int (*do_engine_init)(ENGINE *impl)
		= do_engine_null;

static int (*do_engine_finish)(ENGINE *impl)
		= do_engine_null;

static int (*do_evp_md_engine)
	(EVP_MD_CTX *ctx, const EVP_MD **ptype, ENGINE *impl)
		= do_evp_md_engine_null;

void int_EVP_MD_set_engine_callbacks(
	int (*eng_md_init)(ENGINE *impl),
	int (*eng_md_fin)(ENGINE *impl),
	int (*eng_md_evp)
		(EVP_MD_CTX *ctx, const EVP_MD **ptype, ENGINE *impl))
	{
	do_engine_init = eng_md_init;
	do_engine_finish = eng_md_fin;
	do_evp_md_engine = eng_md_evp;
	}

#else

#define do_engine_init	ENGINE_init
#define do_engine_finish ENGINE_finish

static int do_evp_md_engine(EVP_MD_CTX *ctx, const EVP_MD **ptype, ENGINE *impl)
	{
	if (*ptype)
d162 1
a162 1
				EVPerr(EVP_F_DO_EVP_MD_ENGINE,EVP_R_INITIALIZATION_ERROR);
d168 1
a168 1
			impl = ENGINE_get_digest_engine((*ptype)->type);
d172 1
a172 1
			const EVP_MD *d = ENGINE_get_digest(impl, (*ptype)->type);
d176 1
a176 1
				EVPerr(EVP_F_DO_EVP_MD_ENGINE,EVP_R_INITIALIZATION_ERROR);
d180 1
a180 1
			*ptype = d;
d192 1
a192 1
		EVPerr(EVP_F_DO_EVP_MD_ENGINE,EVP_R_NO_DIGEST_SET);
a194 28
	return 1;
	}

#endif

#endif

int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
	{
	M_EVP_MD_CTX_clear_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
#ifdef OPENSSL_FIPS
	if(FIPS_selftest_failed())
		{
		FIPSerr(FIPS_F_EVP_DIGESTINIT_EX,FIPS_R_FIPS_SELFTEST_FAILED);
		ctx->digest = &bad_md;
		return 0;
		}
#endif
#ifndef OPENSSL_NO_ENGINE
	/* Whether it's nice or not, "Inits" can be used on "Final"'d contexts
	 * so this context may already have an ENGINE! Try to avoid releasing
	 * the previous handle, re-querying for an ENGINE, and having a
	 * reinitialisation, when it may all be unecessary. */
	if (ctx->engine && ctx->digest && (!type ||
			(type && (type->type == ctx->digest->type))))
		goto skip_to_init;
	if (!do_evp_md_engine(ctx, &type, impl))
		return 0;
a197 12
#ifdef OPENSSL_FIPS
		if (FIPS_mode())
			{
			if (!(type->flags & EVP_MD_FLAG_FIPS) 
			 && !(ctx->flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW))
				{
				EVPerr(EVP_F_EVP_DIGESTINIT_EX, EVP_R_DISABLED_FOR_FIPS);
				ctx->digest = &bad_md;
				return 0;
				}
			}
#endif
d205 1
a205 1
	skip_to_init:
a212 3
#ifdef OPENSSL_FIPS
	FIPS_selftest_check();
#endif
a228 3
#ifdef OPENSSL_FIPS
	FIPS_selftest_check();
#endif
d237 1
a237 1
		M_EVP_MD_CTX_set_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
d259 1
a259 1
	if (in->engine && !do_engine_init(in->engine))
d269 1
a269 1
	    	M_EVP_MD_CTX_set_flags(out,EVP_MD_CTX_FLAG_REUSE);
d295 1
a295 1
	M_EVP_MD_CTX_set_flags(&ctx,EVP_MD_CTX_FLAG_ONESHOT);
d317 1
a317 1
	    && !M_EVP_MD_CTX_test_flags(ctx,EVP_MD_CTX_FLAG_CLEANED))
d320 1
a320 1
	    && !M_EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE))
d329 1
a329 1
		do_engine_finish(ctx->engine);
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@d119 1
d130 1
a130 2
	if (ctx)
		EVP_MD_CTX_init(ctx);
d141 69
a209 1
int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
d211 1
a211 10
	EVP_MD_CTX_clear_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
#ifndef OPENSSL_NO_ENGINE
	/* Whether it's nice or not, "Inits" can be used on "Final"'d contexts
	 * so this context may already have an ENGINE! Try to avoid releasing
	 * the previous handle, re-querying for an ENGINE, and having a
	 * reinitialisation, when it may all be unecessary. */
	if (ctx->engine && ctx->digest && (!type ||
			(type && (type->type == ctx->digest->type))))
		goto skip_to_init;
	if (type)
d222 1
a222 1
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_INITIALIZATION_ERROR);
d228 1
a228 1
			impl = ENGINE_get_digest_engine(type->type);
d232 1
a232 1
			const EVP_MD *d = ENGINE_get_digest(impl, type->type);
d236 1
a236 2
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_INITIALIZATION_ERROR);
				ENGINE_finish(impl);
d240 1
a240 1
			type = d;
d252 1
a252 1
		EVPerr(EVP_F_EVP_DIGESTINIT_EX,EVP_R_NO_DIGEST_SET);
d255 28
d286 2
a287 4
		if (ctx->digest && ctx->digest->ctx_size)
			OPENSSL_free(ctx->md_data);
		ctx->digest=type;
		if (!(ctx->flags & EVP_MD_CTX_FLAG_NO_INIT) && type->ctx_size)
d289 2
a290 3
			ctx->update = type->update;
			ctx->md_data=OPENSSL_malloc(type->ctx_size);
			if (ctx->md_data == NULL)
d292 2
a293 2
				EVPerr(EVP_F_EVP_DIGESTINIT_EX,
							ERR_R_MALLOC_FAILURE);
d297 6
d305 1
a305 1
skip_to_init:
a306 10
	if (ctx->pctx)
		{
		int r;
		r = EVP_PKEY_CTX_ctrl(ctx->pctx, -1, EVP_PKEY_OP_TYPE_SIG,
					EVP_PKEY_CTRL_DIGESTINIT, 0, ctx);
		if (r <= 0 && (r != -2))
			return 0;
		}
	if (ctx->flags & EVP_MD_CTX_FLAG_NO_INIT)
		return 1;
d310 2
a311 1
int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data, size_t count)
d313 4
a316 1
	return ctx->update(ctx,data,count);
d332 3
d343 1
a343 1
		EVP_MD_CTX_set_flags(ctx,EVP_MD_CTX_FLAG_CLEANED);
d365 1
a365 1
	if (in->engine && !ENGINE_init(in->engine))
d375 1
a375 1
	    	EVP_MD_CTX_set_flags(out,EVP_MD_CTX_FLAG_REUSE);
d381 1
a381 1
	if (in->md_data && out->digest->ctx_size)
d383 2
a384 11
		if (tmp_buf)
			out->md_data = tmp_buf;
		else
			{
			out->md_data=OPENSSL_malloc(out->digest->ctx_size);
			if (!out->md_data)
				{
				EVPerr(EVP_F_EVP_MD_CTX_COPY_EX,ERR_R_MALLOC_FAILURE);
				return 0;
				}
			}
a387 12
	out->update = in->update;

	if (in->pctx)
		{
		out->pctx = EVP_PKEY_CTX_dup(in->pctx);
		if (!out->pctx)
			{
			EVP_MD_CTX_cleanup(out);
			return 0;
			}
		}

d401 1
a401 1
	EVP_MD_CTX_set_flags(&ctx,EVP_MD_CTX_FLAG_ONESHOT);
d423 1
a423 1
	    && !EVP_MD_CTX_test_flags(ctx,EVP_MD_CTX_FLAG_CLEANED))
d426 1
a426 1
	    && !EVP_MD_CTX_test_flags(ctx, EVP_MD_CTX_FLAG_REUSE))
a430 2
	if (ctx->pctx)
		EVP_PKEY_CTX_free(ctx->pctx);
d435 1
a435 1
		ENGINE_finish(ctx->engine);
@


1.1.1.9
log
@import OpenSSL-1.0.1c
@
text
@a119 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a227 10
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		{
		if (FIPS_digestinit(ctx, type))
			return 1;
		OPENSSL_free(ctx->md_data);
		ctx->md_data = NULL;
		return 0;
		}
#endif
a232 3
#ifdef OPENSSL_FIPS
	return FIPS_digestupdate(ctx, data, count);
#else
a233 1
#endif
a247 3
#ifdef OPENSSL_FIPS
	return FIPS_digestfinal(ctx, md, size);
#else
d249 1
a260 1
#endif
a353 1
#ifndef OPENSSL_FIPS
a365 1
#endif
a372 3
#endif
#ifdef OPENSSL_FIPS
	FIPS_md_ctx_cleanup(ctx);
@


1.1.1.10
log
@Import OpenSSL 1.0.1g
@
text
@a269 1

d368 2
a369 5
	if (ctx)
		{
		EVP_MD_CTX_cleanup(ctx);
		OPENSSL_free(ctx);
		}
@


