head	1.8;
access;
symbols
	butholakala:1.7
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.04.15.20.13.09;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.22.00.03.07;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.32;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.16;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.35.05;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.06.27.05.05.32;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Just like every web browser expands until it can read mail, every modular
library expands until it has its own dlfcn wrapper, and libcrypto is no
exception.

Remove the non-dlfcn DSO methods.

This causes public DSO_METHOD_{beos,dl,vms,win32} to disappear (major bump
coming soon). Note that portable software ought to use DSO_METHOD_openssl
instead of picking the backend directly (which makes one wonder why the
backends are exposed, as it is unlikely that more than one can work on
your system).

ok beck@@ deraadt@@
@
text
@/* dso_dl.c -*- mode:C; c-file-style: "eay" -*- */
/* Written by Richard Levitte (richard@@levitte.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include "cryptlib.h"
#include <openssl/dso.h>

#ifndef DSO_DL
DSO_METHOD *DSO_METHOD_dl(void)
       {
       return NULL;
       }
#else

#include <dl.h>

/* Part of the hack in "dl_load" ... */
#define DSO_MAX_TRANSLATED_SIZE 256

static int dl_load(DSO *dso);
static int dl_unload(DSO *dso);
static void *dl_bind_var(DSO *dso, const char *symname);
static DSO_FUNC_TYPE dl_bind_func(DSO *dso, const char *symname);
#if 0
static int dl_unbind_var(DSO *dso, char *symname, void *symptr);
static int dl_unbind_func(DSO *dso, char *symname, DSO_FUNC_TYPE symptr);
static int dl_init(DSO *dso);
static int dl_finish(DSO *dso);
static int dl_ctrl(DSO *dso, int cmd, long larg, void *parg);
#endif
static char *dl_name_converter(DSO *dso, const char *filename);
static char *dl_merger(DSO *dso, const char *filespec1, const char *filespec2);
static int dl_pathbyaddr(void *addr,char *path,int sz);
static void *dl_globallookup(const char *name);

static DSO_METHOD dso_meth_dl = {
	"OpenSSL 'dl' shared library method",
	dl_load,
	dl_unload,
	dl_bind_var,
	dl_bind_func,
/* For now, "unbind" doesn't exist */
#if 0
	NULL, /* unbind_var */
	NULL, /* unbind_func */
#endif
	NULL, /* ctrl */
	dl_name_converter,
	dl_merger,
	NULL, /* init */
	NULL, /* finish */
	dl_pathbyaddr,
	dl_globallookup
	};

DSO_METHOD *DSO_METHOD_dl(void)
	{
	return(&dso_meth_dl);
	}

/* For this DSO_METHOD, our meth_data STACK will contain;
 * (i) the handle (shl_t) returned from shl_load().
 * NB: I checked on HPUX11 and shl_t is itself a pointer
 * type so the cast is safe.
 */

static int dl_load(DSO *dso)
	{
	shl_t ptr = NULL;
	/* We don't do any fancy retries or anything, just take the method's
	 * (or DSO's if it has the callback set) best translation of the
	 * platform-independant filename and try once with that. */
	char *filename= DSO_convert_filename(dso, NULL);

	if(filename == NULL)
		{
		DSOerr(DSO_F_DL_LOAD,DSO_R_NO_FILENAME);
		goto err;
		}
	ptr = shl_load(filename, BIND_IMMEDIATE |
		(dso->flags&DSO_FLAG_NO_NAME_TRANSLATION?0:DYNAMIC_PATH), 0L);
	if(ptr == NULL)
		{
		DSOerr(DSO_F_DL_LOAD,DSO_R_LOAD_FAILED);
		ERR_add_error_data(4, "filename(", filename, "): ",
			strerror(errno));
		goto err;
		}
	if(!sk_push(dso->meth_data, (char *)ptr))
		{
		DSOerr(DSO_F_DL_LOAD,DSO_R_STACK_ERROR);
		goto err;
		}
	/* Success, stick the converted filename we've loaded under into the DSO
	 * (it also serves as the indicator that we are currently loaded). */
	dso->loaded_filename = filename;
	return(1);
err:
	/* Cleanup! */
	if(filename != NULL)
		OPENSSL_free(filename);
	if(ptr != NULL)
		shl_unload(ptr);
	return(0);
	}

static int dl_unload(DSO *dso)
	{
	shl_t ptr;
	if(dso == NULL)
		{
		DSOerr(DSO_F_DL_UNLOAD,ERR_R_PASSED_NULL_PARAMETER);
		return(0);
		}
	if(sk_num(dso->meth_data) < 1)
		return(1);
	/* Is this statement legal? */
	ptr = (shl_t)sk_pop(dso->meth_data);
	if(ptr == NULL)
		{
		DSOerr(DSO_F_DL_UNLOAD,DSO_R_NULL_HANDLE);
		/* Should push the value back onto the stack in
		 * case of a retry. */
		sk_push(dso->meth_data, (char *)ptr);
		return(0);
		}
	shl_unload(ptr);
	return(1);
	}

static void *dl_bind_var(DSO *dso, const char *symname)
	{
	shl_t ptr;
	void *sym;

	if((dso == NULL) || (symname == NULL))
		{
		DSOerr(DSO_F_DL_BIND_VAR,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	if(sk_num(dso->meth_data) < 1)
		{
		DSOerr(DSO_F_DL_BIND_VAR,DSO_R_STACK_ERROR);
		return(NULL);
		}
	ptr = (shl_t)sk_value(dso->meth_data, sk_num(dso->meth_data) - 1);
	if(ptr == NULL)
		{
		DSOerr(DSO_F_DL_BIND_VAR,DSO_R_NULL_HANDLE);
		return(NULL);
		}
	if (shl_findsym(&ptr, symname, TYPE_UNDEFINED, &sym) < 0)
		{
		DSOerr(DSO_F_DL_BIND_VAR,DSO_R_SYM_FAILURE);
		ERR_add_error_data(4, "symname(", symname, "): ",
			strerror(errno));
		return(NULL);
		}
	return(sym);
	}

static DSO_FUNC_TYPE dl_bind_func(DSO *dso, const char *symname)
	{
	shl_t ptr;
	void *sym;

	if((dso == NULL) || (symname == NULL))
		{
		DSOerr(DSO_F_DL_BIND_FUNC,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	if(sk_num(dso->meth_data) < 1)
		{
		DSOerr(DSO_F_DL_BIND_FUNC,DSO_R_STACK_ERROR);
		return(NULL);
		}
	ptr = (shl_t)sk_value(dso->meth_data, sk_num(dso->meth_data) - 1);
	if(ptr == NULL)
		{
		DSOerr(DSO_F_DL_BIND_FUNC,DSO_R_NULL_HANDLE);
		return(NULL);
		}
	if (shl_findsym(&ptr, symname, TYPE_UNDEFINED, &sym) < 0)
		{
		DSOerr(DSO_F_DL_BIND_FUNC,DSO_R_SYM_FAILURE);
		ERR_add_error_data(4, "symname(", symname, "): ",
			strerror(errno));
		return(NULL);
		}
	return((DSO_FUNC_TYPE)sym);
	}

static char *dl_merger(DSO *dso, const char *filespec1, const char *filespec2)
	{
	char *merged;

	if(!filespec1 && !filespec2)
		{
		DSOerr(DSO_F_DL_MERGER,
				ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	/* If the first file specification is a rooted path, it rules.
	   same goes if the second file specification is missing. */
	if (!filespec2 || filespec1[0] == '/')
		{
		size_t len = strlen(filespec1) + 1;
		merged = OPENSSL_malloc(len);
		if(!merged)
			{
			DSOerr(DSO_F_DL_MERGER,
				ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
		memcpy(merged, filespec1, len);
		}
	/* If the first file specification is missing, the second one rules. */
	else if (!filespec1)
		{
		size_t len = strlen(filespec2) + 1;
		merged = OPENSSL_malloc(strlen(filespec2) + 1);
		if(!merged)
			{
			DSOerr(DSO_F_DL_MERGER,
				ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
		memcpy(merged, filespec2, len);
		}
	else
		/* This part isn't as trivial as it looks.  It assumes that
		   the second file specification really is a directory, and
		   makes no checks whatsoever.  Therefore, the result becomes
		   the concatenation of filespec2 followed by a slash followed
		   by filespec1. */
		{
		size_t spec2len, len;

		spec2len = (filespec2 ? strlen(filespec2) : 0);
		len = spec2len + (filespec1 ? strlen(filespec1) : 0);

		if(filespec2 && filespec2[spec2len - 1] == '/')
			{
			spec2len--;
			len--;
			}
		merged = OPENSSL_malloc(len + 2);
		if(!merged)
			{
			DSOerr(DSO_F_DL_MERGER,
				ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
		strlcpy(merged, filespec2, len + 2);
		merged[spec2len] = '/';
		strlcpy(&merged[spec2len + 1], filespec1, 1 + len - spec2len);
		}
	return(merged);
	}

/* This function is identical to the one in dso_dlfcn.c, but as it is highly
 * unlikely that both the "dl" *and* "dlfcn" variants are being compiled at the
 * same time, there's no great duplicating the code. Figuring out an elegant 
 * way to share one copy of the code would be more difficult and would not
 * leave the implementations independant. */
#if defined(__hpux)
static const char extension[] = ".sl";
#else
static const char extension[] = ".so";
#endif
static char *dl_name_converter(DSO *dso, const char *filename)
	{
	char *translated;
	int len, rsize, transform;

	len = strlen(filename);
	rsize = len + 1;
	transform = (strstr(filename, "/") == NULL);
		{
		/* We will convert this to "%s.s?" or "lib%s.s?" */
		rsize += strlen(extension);/* The length of ".s?" */
		if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
			rsize += 3; /* The length of "lib" */
		}
	translated = OPENSSL_malloc(rsize);
	if(translated == NULL)
		{
		DSOerr(DSO_F_DL_NAME_CONVERTER,
				DSO_R_NAME_TRANSLATION_FAILED); 
		return(NULL);   
		}
	if(transform)
		{
		if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
			sprintf(translated, "lib%s%s", filename, extension);
		else
			sprintf(translated, "%s%s", filename, extension);
		}
	else
		sprintf(translated, "%s", filename);
	return(translated);
	}

static int dl_pathbyaddr(void *addr,char *path,int sz)
	{
	struct shl_descriptor inf;
	int i,len;

	if (addr == NULL)
		{
		union	{ int(*f)(void*,char*,int); void *p; } t =
			{ dl_pathbyaddr };
		addr = t.p;
		}

	for (i=-1;shl_get_r(i,&inf)==0;i++)
		{
		if (((size_t)addr >= inf.tstart && (size_t)addr < inf.tend) ||
		    ((size_t)addr >= inf.dstart && (size_t)addr < inf.dend))
			{
			len = (int)strlen(inf.filename);
			if (sz <= 0) return len+1;
			if (len >= sz) len=sz-1;
			memcpy(path,inf.filename,len);
			path[len++] = 0;
			return len;
			}
		}

	return -1;
	}

static void *dl_globallookup(const char *name)
	{
	void *ret;
	shl_t h = NULL;

	return shl_findsym(&h,name,TYPE_UNDEFINED,&ret) ? NULL : ret;
	}
#endif /* DSO_DL */
@


1.7
log
@resolve conflicts, fix local changes
@
text
@@


1.6
log
@resolve conflicts
@
text
@d88 2
d106 3
a108 1
	NULL  /* finish */
d262 2
a263 1
		merged = OPENSSL_malloc(strlen(filespec1) + 1);
d270 1
a270 1
		strcpy(merged, filespec1);
d275 1
d283 1
a283 1
		strcpy(merged, filespec2);
d292 1
a292 1
		int spec2len, len;
d309 1
a309 1
		strcpy(merged, filespec2);
d311 1
a311 1
		strcpy(&merged[spec2len + 1], filespec1);
d359 36
@


1.5
log
@resolve conflicts
@
text
@d1 1
a1 1
/* dso_dl.c */
d87 1
d102 1
d244 66
a351 32

#ifdef OPENSSL_FIPS
static void dl_ref_point(){}

int DSO_pathbyaddr(void *addr,char *path,int sz)
	{
	struct shl_descriptor inf;
	int i,len;

	if (addr == NULL)
		{
		union { void(*f)(); void *p; } t = { dl_ref_point };
		addr = t.p;
		}

	for (i=-1;shl_get_r(i,&inf)==0;i++)
		{
		if (((size_t)addr >= inf.tstart && (size_t)addr < inf.tend) ||
		    ((size_t)addr >= inf.dstart && (size_t)addr < inf.dend))
			{
			len = (int)strlen(inf.filename);
			if (sz <= 0) return len+1;
			if (len >= sz) len=sz-1;
			memcpy(path,inf.filename,len);
			path[len++] = 0;
			return len;
			}
		}

	return -1;
	}
#endif
@


1.4
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d129 2
a130 1
	ptr = shl_load(filename, BIND_IMMEDIATE|DYNAMIC_PATH, 0L);
d284 32
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d129 1
a129 1
	ptr = shl_load(filename, BIND_IMMEDIATE|DYNAMIC_PATH, NULL);
@


1.2
log
@openssl-engine-0.9.6a merge
@
text
@d2 1
a2 1
/* Written by Richard Levitte (levitte@@openssl.org) for the OpenSSL
d75 1
a75 1
static int dl_load(DSO *dso, const char *filename);
d84 1
d86 1
a86 1
static long dl_ctrl(DSO *dso, int cmd, long larg, void *parg);
d99 2
a100 1
	dl_ctrl,
d116 1
a116 6
#if defined(__hpux)
static const char extension[] = ".sl";
#else
static const char extension[] = ".so";
#endif
static int dl_load(DSO *dso, const char *filename)
d118 5
a122 3
	shl_t ptr;
	char translated[DSO_MAX_TRANSLATED_SIZE];
	int len;
d124 1
a124 5
	/* The same comment as in dlfcn_load applies here. bleurgh. */
	len = strlen(filename) + strlen(extension);
	if((dso->flags & DSO_FLAG_NAME_TRANSLATION) &&
			(len + 3 < DSO_MAX_TRANSLATED_SIZE) &&
			(strstr(filename, "/") == NULL))
d126 2
a127 2
		sprintf(translated, "lib%s%s", filename, extension);
		ptr = shl_load(translated, BIND_IMMEDIATE, NULL);
d129 1
a129 2
	else
		ptr = shl_load(filename, BIND_IMMEDIATE, NULL);
d133 3
a135 1
		return(0);
d140 1
a140 2
		shl_unload(ptr);
		return(0);
d142 3
d146 7
d203 2
d234 2
d241 11
a251 1
static long dl_ctrl(DSO *dso, int cmd, long larg, void *parg)
d253 25
a277 4
	if(dso == NULL)
		{
		DSOerr(DSO_F_DL_CTRL,ERR_R_PASSED_NULL_PARAMETER);
		return(-1);
d279 3
a281 15
	switch(cmd)
		{
	case DSO_CTRL_GET_FLAGS:
		return dso->flags;
	case DSO_CTRL_SET_FLAGS:
		dso->flags = larg;
		return(0);
	case DSO_CTRL_OR_FLAGS:
		dso->flags |= larg;
		return(0);
	default:
		break;
		}
	DSOerr(DSO_F_DL_CTRL,DSO_R_UNKNOWN_COMMAND);
	return(-1);
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d85 1
a85 1
static int dl_ctrl(DSO *dso, int cmd, long larg, void *parg);
d114 5
d126 1
a126 1
	len = strlen(filename);
d128 1
a128 1
			(len + 6 < DSO_MAX_TRANSLATED_SIZE) &&
d131 1
a131 1
		sprintf(translated, "lib%s.so", filename);
d195 1
a195 1
	if (shl_findsym(ptr, symname, TYPE_UNDEFINED, &sym) < 0)
d224 1
a224 1
	if (shl_findsym(ptr, symname, TYPE_UNDEFINED, &sym) < 0)
d232 1
a232 1
static int dl_ctrl(DSO *dso, int cmd, long larg, void *parg)
d244 1
a244 1
		dso->flags = (int)larg;
d247 1
a247 1
		dso->flags |= (int)larg;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d2 1
a2 1
/* Written by Richard Levitte (richard@@levitte.org) for the OpenSSL
d75 1
a75 1
static int dl_load(DSO *dso);
d84 1
a85 2
#endif
static char *dl_name_converter(DSO *dso, const char *filename);
d98 1
a98 2
	NULL, /* ctrl */
	dl_name_converter,
d114 1
a114 1
static int dl_load(DSO *dso)
d116 3
a118 5
	shl_t ptr = NULL;
	/* We don't do any fancy retries or anything, just take the method's
	 * (or DSO's if it has the callback set) best translation of the
	 * platform-independant filename and try once with that. */
	char *filename= DSO_convert_filename(dso, NULL);
d120 5
a124 1
	if(filename == NULL)
d126 2
a127 2
		DSOerr(DSO_F_DL_LOAD,DSO_R_NO_FILENAME);
		goto err;
d129 2
a130 1
	ptr = shl_load(filename, BIND_IMMEDIATE|DYNAMIC_PATH, NULL);
d134 1
a134 3
		ERR_add_error_data(4, "filename(", filename, "): ",
			strerror(errno));
		goto err;
d139 2
a140 1
		goto err;
a141 3
	/* Success, stick the converted filename we've loaded under into the DSO
	 * (it also serves as the indicator that we are currently loaded). */
	dso->loaded_filename = filename;
a142 7
err:
	/* Cleanup! */
	if(filename != NULL)
		OPENSSL_free(filename);
	if(ptr != NULL)
		shl_unload(ptr);
	return(0);
d190 1
a190 1
	if (shl_findsym(&ptr, symname, TYPE_UNDEFINED, &sym) < 0)
a192 2
		ERR_add_error_data(4, "symname(", symname, "): ",
			strerror(errno));
d219 1
a219 1
	if (shl_findsym(&ptr, symname, TYPE_UNDEFINED, &sym) < 0)
a221 2
		ERR_add_error_data(4, "symname(", symname, "): ",
			strerror(errno));
d227 1
a227 11
/* This function is identical to the one in dso_dlfcn.c, but as it is highly
 * unlikely that both the "dl" *and* "dlfcn" variants are being compiled at the
 * same time, there's no great duplicating the code. Figuring out an elegant 
 * way to share one copy of the code would be more difficult and would not
 * leave the implementations independant. */
#if defined(__hpux)
static const char extension[] = ".sl";
#else
static const char extension[] = ".so";
#endif
static char *dl_name_converter(DSO *dso, const char *filename)
d229 6
a234 6
	char *translated;
	int len, rsize, transform;

	len = strlen(filename);
	rsize = len + 1;
	transform = (strstr(filename, "/") == NULL);
d236 10
a245 18
		/* We will convert this to "%s.s?" or "lib%s.s?" */
		rsize += strlen(extension);/* The length of ".s?" */
		if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
			rsize += 3; /* The length of "lib" */
		}
	translated = OPENSSL_malloc(rsize);
	if(translated == NULL)
		{
		DSOerr(DSO_F_DL_NAME_CONVERTER,
				DSO_R_NAME_TRANSLATION_FAILED); 
		return(NULL);   
		}
	if(transform)
		{
		if ((DSO_flags(dso) & DSO_FLAG_NAME_TRANSLATION_EXT_ONLY) == 0)
			sprintf(translated, "lib%s%s", filename, extension);
		else
			sprintf(translated, "%s%s", filename, extension);
d247 2
a248 3
	else
		sprintf(translated, "%s", filename);
	return(translated);
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d129 1
a129 1
	ptr = shl_load(filename, BIND_IMMEDIATE|DYNAMIC_PATH, 0L);
@


1.1.1.3
log
@import of openssl-0.9.7j
@
text
@d129 1
a129 2
	ptr = shl_load(filename, BIND_IMMEDIATE |
		(dso->flags&DSO_FLAG_NO_NAME_TRANSLATION?0:DYNAMIC_PATH), 0L);
a282 32

#ifdef OPENSSL_FIPS
static void dl_ref_point(){}

int DSO_pathbyaddr(void *addr,char *path,int sz)
	{
	struct shl_descriptor inf;
	int i,len;

	if (addr == NULL)
		{
		union { void(*f)(); void *p; } t = { dl_ref_point };
		addr = t.p;
		}

	for (i=-1;shl_get_r(i,&inf)==0;i++)
		{
		if (((size_t)addr >= inf.tstart && (size_t)addr < inf.tend) ||
		    ((size_t)addr >= inf.dstart && (size_t)addr < inf.dend))
			{
			len = (int)strlen(inf.filename);
			if (sz <= 0) return len+1;
			if (len >= sz) len=sz-1;
			memcpy(path,inf.filename,len);
			path[len++] = 0;
			return len;
			}
		}

	return -1;
	}
#endif
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d1 1
a1 1
/* dso_dl.c -*- mode:C; c-file-style: "eay" -*- */
a86 1
static char *dl_merger(DSO *dso, const char *filespec1, const char *filespec2);
a100 1
	dl_merger,
a241 66
static char *dl_merger(DSO *dso, const char *filespec1, const char *filespec2)
	{
	char *merged;

	if(!filespec1 && !filespec2)
		{
		DSOerr(DSO_F_DL_MERGER,
				ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	/* If the first file specification is a rooted path, it rules.
	   same goes if the second file specification is missing. */
	if (!filespec2 || filespec1[0] == '/')
		{
		merged = OPENSSL_malloc(strlen(filespec1) + 1);
		if(!merged)
			{
			DSOerr(DSO_F_DL_MERGER,
				ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
		strcpy(merged, filespec1);
		}
	/* If the first file specification is missing, the second one rules. */
	else if (!filespec1)
		{
		merged = OPENSSL_malloc(strlen(filespec2) + 1);
		if(!merged)
			{
			DSOerr(DSO_F_DL_MERGER,
				ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
		strcpy(merged, filespec2);
		}
	else
		/* This part isn't as trivial as it looks.  It assumes that
		   the second file specification really is a directory, and
		   makes no checks whatsoever.  Therefore, the result becomes
		   the concatenation of filespec2 followed by a slash followed
		   by filespec1. */
		{
		int spec2len, len;

		spec2len = (filespec2 ? strlen(filespec2) : 0);
		len = spec2len + (filespec1 ? strlen(filespec1) : 0);

		if(filespec2 && filespec2[spec2len - 1] == '/')
			{
			spec2len--;
			len--;
			}
		merged = OPENSSL_malloc(len + 2);
		if(!merged)
			{
			DSOerr(DSO_F_DL_MERGER,
				ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
		strcpy(merged, filespec2);
		merged[spec2len] = '/';
		strcpy(&merged[spec2len + 1], filespec1);
		}
	return(merged);
	}

d284 32
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a87 2
static int dl_pathbyaddr(void *addr,char *path,int sz);
static void *dl_globallookup(const char *name);
d104 1
a104 3
	NULL, /* finish */
	dl_pathbyaddr,
	dl_globallookup
a352 36
static int dl_pathbyaddr(void *addr,char *path,int sz)
	{
	struct shl_descriptor inf;
	int i,len;

	if (addr == NULL)
		{
		union	{ int(*f)(void*,char*,int); void *p; } t =
			{ dl_pathbyaddr };
		addr = t.p;
		}

	for (i=-1;shl_get_r(i,&inf)==0;i++)
		{
		if (((size_t)addr >= inf.tstart && (size_t)addr < inf.tend) ||
		    ((size_t)addr >= inf.dstart && (size_t)addr < inf.dend))
			{
			len = (int)strlen(inf.filename);
			if (sz <= 0) return len+1;
			if (len >= sz) len=sz-1;
			memcpy(path,inf.filename,len);
			path[len++] = 0;
			return len;
			}
		}

	return -1;
	}

static void *dl_globallookup(const char *name)
	{
	void *ret;
	shl_t h = NULL;

	return shl_findsym(&h,name,TYPE_UNDEFINED,&ret) ? NULL : ret;
	}
@


