head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.2
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.19
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.18;
commitid	kT0fLt3r4lroFJra;

1.18
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.16;
commitid	id8dTrTMtnTn4fqt;

1.16
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.06.11.01.53.02;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	4evB2EbwDYaBfe0g;

1.14
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.23.21.54.30;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.23.21.49.49;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.19.15.30.17;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.19.00.41.38;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.16.12.18.21;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.34;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.16;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.04.07.20.41.40;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: dso_lib.c,v 1.18 2014/07/11 08:44:48 jsing Exp $ */
/* Written by Geoff Thorpe (geoff@@geoffthorpe.net) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/crypto.h>
#include <openssl/dso.h>
#include <openssl/err.h>

static DSO_METHOD *default_DSO_meth = NULL;

DSO *
DSO_new(void)
{
	return (DSO_new_method(NULL));
}

void
DSO_set_default_method(DSO_METHOD *meth)
{
	default_DSO_meth = meth;
}

DSO_METHOD *
DSO_get_default_method(void)
{
	return (default_DSO_meth);
}

DSO_METHOD *
DSO_get_method(DSO *dso)
{
	return (dso->meth);
}

DSO_METHOD *
DSO_set_method(DSO *dso, DSO_METHOD *meth)
{
	DSO_METHOD *mtmp;

	mtmp = dso->meth;
	dso->meth = meth;
	return (mtmp);
}

DSO *
DSO_new_method(DSO_METHOD *meth)
{
	DSO *ret;

	if (default_DSO_meth == NULL)
		/* We default to DSO_METH_openssl() which in turn defaults
		 * to stealing the "best available" method. Will fallback
		 * to DSO_METH_null() in the worst case. */
		default_DSO_meth = DSO_METHOD_openssl();
	ret = calloc(1, sizeof(DSO));
	if (ret == NULL) {
		DSOerror(ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	ret->meth_data = sk_void_new_null();
	if (ret->meth_data == NULL) {
		/* sk_new doesn't generate any errors so we do */
		DSOerror(ERR_R_MALLOC_FAILURE);
		free(ret);
		return (NULL);
	}
	if (meth == NULL)
		ret->meth = default_DSO_meth;
	else
		ret->meth = meth;
	ret->references = 1;
	if ((ret->meth->init != NULL) && !ret->meth->init(ret)) {
		free(ret);
		ret = NULL;
	}
	return (ret);
}

int
DSO_free(DSO *dso)
{
	int i;

	if (dso == NULL) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (0);
	}

	i = CRYPTO_add(&dso->references, -1, CRYPTO_LOCK_DSO);
	if (i > 0)
		return (1);

	if ((dso->meth->dso_unload != NULL) && !dso->meth->dso_unload(dso)) {
		DSOerror(DSO_R_UNLOAD_FAILED);
		return (0);
	}

	if ((dso->meth->finish != NULL) && !dso->meth->finish(dso)) {
		DSOerror(DSO_R_FINISH_FAILED);
		return (0);
	}

	sk_void_free(dso->meth_data);
	free(dso->filename);
	free(dso->loaded_filename);
	free(dso);
	return (1);
}

int
DSO_flags(DSO *dso)
{
	return ((dso == NULL) ? 0 : dso->flags);
}


int
DSO_up_ref(DSO *dso)
{
	if (dso == NULL) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (0);
	}

	CRYPTO_add(&dso->references, 1, CRYPTO_LOCK_DSO);
	return (1);
}

DSO *
DSO_load(DSO *dso, const char *filename, DSO_METHOD *meth, int flags)
{
	DSO *ret;
	int allocated = 0;

	if (dso == NULL) {
		ret = DSO_new_method(meth);
		if (ret == NULL) {
			DSOerror(ERR_R_MALLOC_FAILURE);
			goto err;
		}
		allocated = 1;
		/* Pass the provided flags to the new DSO object */
		if (DSO_ctrl(ret, DSO_CTRL_SET_FLAGS, flags, NULL) < 0) {
			DSOerror(DSO_R_CTRL_FAILED);
			goto err;
		}
	} else
		ret = dso;
	/* Don't load if we're currently already loaded */
	if (ret->filename != NULL) {
		DSOerror(DSO_R_DSO_ALREADY_LOADED);
		goto err;
	}
	/* filename can only be NULL if we were passed a dso that already has
	 * one set. */
	if (filename != NULL)
		if (!DSO_set_filename(ret, filename)) {
		DSOerror(DSO_R_SET_FILENAME_FAILED);
		goto err;
	}
	filename = ret->filename;
	if (filename == NULL) {
		DSOerror(DSO_R_NO_FILENAME);
		goto err;
	}
	if (ret->meth->dso_load == NULL) {
		DSOerror(DSO_R_UNSUPPORTED);
		goto err;
	}
	if (!ret->meth->dso_load(ret)) {
		DSOerror(DSO_R_LOAD_FAILED);
		goto err;
	}
	/* Load succeeded */
	return (ret);

err:
	if (allocated)
		DSO_free(ret);
	return (NULL);
}

void *
DSO_bind_var(DSO *dso, const char *symname)
{
	void *ret = NULL;

	if ((dso == NULL) || (symname == NULL)) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (NULL);
	}
	if (dso->meth->dso_bind_var == NULL) {
		DSOerror(DSO_R_UNSUPPORTED);
		return (NULL);
	}
	if ((ret = dso->meth->dso_bind_var(dso, symname)) == NULL) {
		DSOerror(DSO_R_SYM_FAILURE);
		return (NULL);
	}
	/* Success */
	return (ret);
}

DSO_FUNC_TYPE
DSO_bind_func(DSO *dso, const char *symname)
{
	DSO_FUNC_TYPE ret = NULL;

	if ((dso == NULL) || (symname == NULL)) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (NULL);
	}
	if (dso->meth->dso_bind_func == NULL) {
		DSOerror(DSO_R_UNSUPPORTED);
		return (NULL);
	}
	if ((ret = dso->meth->dso_bind_func(dso, symname)) == NULL) {
		DSOerror(DSO_R_SYM_FAILURE);
		return (NULL);
	}
	/* Success */
	return (ret);
}

/* I don't really like these *_ctrl functions very much to be perfectly
 * honest. For one thing, I think I have to return a negative value for
 * any error because possible DSO_ctrl() commands may return values
 * such as "size"s that can legitimately be zero (making the standard
 * "if(DSO_cmd(...))" form that works almost everywhere else fail at
 * odd times. I'd prefer "output" values to be passed by reference and
 * the return value as success/failure like usual ... but we conform
 * when we must... :-) */
long
DSO_ctrl(DSO *dso, int cmd, long larg, void *parg)
{
	if (dso == NULL) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (-1);
	}
	/* We should intercept certain generic commands and only pass control
	 * to the method-specific ctrl() function if it's something we don't
	 * handle. */
	switch (cmd) {
	case DSO_CTRL_GET_FLAGS:
		return dso->flags;
	case DSO_CTRL_SET_FLAGS:
		dso->flags = (int)larg;
		return (0);
	case DSO_CTRL_OR_FLAGS:
		dso->flags |= (int)larg;
		return (0);
	default:
		break;
	}
	if ((dso->meth == NULL) || (dso->meth->dso_ctrl == NULL)) {
		DSOerror(DSO_R_UNSUPPORTED);
		return (-1);
	}
	return (dso->meth->dso_ctrl(dso, cmd, larg, parg));
}

int
DSO_set_name_converter(DSO *dso, DSO_NAME_CONVERTER_FUNC cb,
    DSO_NAME_CONVERTER_FUNC *oldcb)
{
	if (dso == NULL) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (0);
	}
	if (oldcb)
		*oldcb = dso->name_converter;
	dso->name_converter = cb;
	return (1);
}

const char *
DSO_get_filename(DSO *dso)
{
	if (dso == NULL) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (NULL);
	}
	return (dso->filename);
}

int
DSO_set_filename(DSO *dso, const char *filename)
{
	char *copied;

	if ((dso == NULL) || (filename == NULL)) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (0);
	}
	if (dso->loaded_filename) {
		DSOerror(DSO_R_DSO_ALREADY_LOADED);
		return (0);
	}
	/* We'll duplicate filename */
	copied = strdup(filename);
	if (copied == NULL) {
		DSOerror(ERR_R_MALLOC_FAILURE);
		return (0);
	}
	free(dso->filename);
	dso->filename = copied;
	return (1);
}

char *
DSO_merge(DSO *dso, const char *filespec1, const char *filespec2)
{
	char *result = NULL;

	if (dso == NULL || filespec1 == NULL) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (NULL);
	}
	if ((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0) {
		if (dso->merger != NULL)
			result = dso->merger(dso, filespec1, filespec2);
		else if (dso->meth->dso_merger != NULL)
			result = dso->meth->dso_merger(dso,
			    filespec1, filespec2);
	}
	return (result);
}

char *
DSO_convert_filename(DSO *dso, const char *filename)
{
	char *result = NULL;

	if (dso == NULL) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (NULL);
	}
	if (filename == NULL)
		filename = dso->filename;
	if (filename == NULL) {
		DSOerror(DSO_R_NO_FILENAME);
		return (NULL);
	}
	if ((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0) {
		if (dso->name_converter != NULL)
			result = dso->name_converter(dso, filename);
		else if (dso->meth->dso_name_converter != NULL)
			result = dso->meth->dso_name_converter(dso, filename);
	}
	if (result == NULL) {
		result = strdup(filename);
		if (result == NULL) {
			DSOerror(ERR_R_MALLOC_FAILURE);
			return (NULL);
		}
	}
	return (result);
}

const char *
DSO_get_loaded_filename(DSO *dso)
{
	if (dso == NULL) {
		DSOerror(ERR_R_PASSED_NULL_PARAMETER);
		return (NULL);
	}
	return (dso->loaded_filename);
}

int
DSO_pathbyaddr(void *addr, char *path, int sz)
{
	DSO_METHOD *meth = default_DSO_meth;
	if (meth == NULL)
		meth = DSO_METHOD_openssl();
	if (meth->pathbyaddr == NULL) {
		DSOerror(DSO_R_UNSUPPORTED);
		return -1;
	}
	return (*meth->pathbyaddr)(addr, path, sz);
}

void *
DSO_global_lookup(const char *name)
{
	DSO_METHOD *meth = default_DSO_meth;
	if (meth == NULL)
		meth = DSO_METHOD_openssl();
	if (meth->globallookup == NULL) {
		DSOerror(DSO_R_UNSUPPORTED);
		return NULL;
	}
	return (*meth->globallookup)(name);
}
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dso_lib.c,v 1.17 2014/07/10 13:58:22 jsing Exp $ */
d114 1
a114 1
		DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
d120 1
a120 1
		DSOerr(DSO_F_DSO_NEW_METHOD, ERR_R_MALLOC_FAILURE);
d142 1
a142 1
		DSOerr(DSO_F_DSO_FREE, ERR_R_PASSED_NULL_PARAMETER);
d151 1
a151 1
		DSOerr(DSO_F_DSO_FREE, DSO_R_UNLOAD_FAILED);
d156 1
a156 1
		DSOerr(DSO_F_DSO_FREE, DSO_R_FINISH_FAILED);
d178 1
a178 1
		DSOerr(DSO_F_DSO_UP_REF, ERR_R_PASSED_NULL_PARAMETER);
d195 1
a195 1
			DSOerr(DSO_F_DSO_LOAD, ERR_R_MALLOC_FAILURE);
d201 1
a201 1
			DSOerr(DSO_F_DSO_LOAD, DSO_R_CTRL_FAILED);
d208 1
a208 1
		DSOerr(DSO_F_DSO_LOAD, DSO_R_DSO_ALREADY_LOADED);
d215 1
a215 1
		DSOerr(DSO_F_DSO_LOAD, DSO_R_SET_FILENAME_FAILED);
d220 1
a220 1
		DSOerr(DSO_F_DSO_LOAD, DSO_R_NO_FILENAME);
d224 1
a224 1
		DSOerr(DSO_F_DSO_LOAD, DSO_R_UNSUPPORTED);
d228 1
a228 1
		DSOerr(DSO_F_DSO_LOAD, DSO_R_LOAD_FAILED);
d246 1
a246 1
		DSOerr(DSO_F_DSO_BIND_VAR, ERR_R_PASSED_NULL_PARAMETER);
d250 1
a250 1
		DSOerr(DSO_F_DSO_BIND_VAR, DSO_R_UNSUPPORTED);
d254 1
a254 1
		DSOerr(DSO_F_DSO_BIND_VAR, DSO_R_SYM_FAILURE);
d267 1
a267 1
		DSOerr(DSO_F_DSO_BIND_FUNC, ERR_R_PASSED_NULL_PARAMETER);
d271 1
a271 1
		DSOerr(DSO_F_DSO_BIND_FUNC, DSO_R_UNSUPPORTED);
d275 1
a275 1
		DSOerr(DSO_F_DSO_BIND_FUNC, DSO_R_SYM_FAILURE);
d294 1
a294 1
		DSOerr(DSO_F_DSO_CTRL, ERR_R_PASSED_NULL_PARAMETER);
d313 1
a313 1
		DSOerr(DSO_F_DSO_CTRL, DSO_R_UNSUPPORTED);
d324 1
a324 2
		DSOerr(DSO_F_DSO_SET_NAME_CONVERTER,
		    ERR_R_PASSED_NULL_PARAMETER);
d337 1
a337 1
		DSOerr(DSO_F_DSO_GET_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
d349 1
a349 1
		DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
d353 1
a353 1
		DSOerr(DSO_F_DSO_SET_FILENAME, DSO_R_DSO_ALREADY_LOADED);
d359 1
a359 1
		DSOerr(DSO_F_DSO_SET_FILENAME, ERR_R_MALLOC_FAILURE);
d373 1
a373 1
		DSOerr(DSO_F_DSO_MERGE, ERR_R_PASSED_NULL_PARAMETER);
d392 1
a392 1
		DSOerr(DSO_F_DSO_CONVERT_FILENAME, ERR_R_PASSED_NULL_PARAMETER);
d398 1
a398 1
		DSOerr(DSO_F_DSO_CONVERT_FILENAME, DSO_R_NO_FILENAME);
d410 1
a410 2
			DSOerr(DSO_F_DSO_CONVERT_FILENAME,
			    ERR_R_MALLOC_FAILURE);
d421 1
a421 2
		DSOerr(DSO_F_DSO_GET_LOADED_FILENAME,
		    ERR_R_PASSED_NULL_PARAMETER);
d434 1
a434 1
		DSOerr(DSO_F_DSO_PATHBYADDR, DSO_R_UNSUPPORTED);
d447 1
a447 1
		DSOerr(DSO_F_DSO_GLOBAL_LOOKUP, DSO_R_UNSUPPORTED);
@


1.17
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dso_lib.c,v 1.16 2014/06/12 15:49:29 deraadt Exp $ */
a62 1
#include "cryptlib.h"
d64 1
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.15
log
@c-file-style hints, begone; ok beck
@
text
@d1 1
a1 1
/* dso_lib.c */
@


1.14
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* dso_lib.c -*- mode:C; c-file-style: "eay" -*- */
@


1.13
log
@no need for null check before free. from Brendan MacDonell
@
text
@d159 2
a160 5
	if (dso->filename != NULL)
		free(dso->filename);
	if (dso->loaded_filename != NULL)
		free(dso->loaded_filename);

@


1.12
log
@replace a bunch of hand duped strings with strdup
@
text
@d364 1
a364 2
	if (dso->filename)
		free(dso->filename);
@


1.11
log
@malloc/memset -> calloc. from peter malone
@
text
@d359 1
a359 1
	copied = malloc(strlen(filename) + 1);
a363 1
	strlcpy(copied, filename, strlen(filename) + 1);
d411 1
a411 1
		result = malloc(strlen(filename) + 1);
a416 1
		strlcpy(result, filename, strlen(filename) + 1);
@


1.10
log
@KNF.
@
text
@d110 1
a110 1
	ret = (DSO *)malloc(sizeof(DSO));
a114 1
	memset(ret, 0, sizeof(DSO));
@


1.9
log
@use intrinsic strlcpy and strlcat everywhere so we only have one set of
funcitons to check for incorrect use. keep BUF_strlcpy and BUF_strlcat
for API comptibility only.
ok tedu@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d66 9
a74 7
DSO *DSO_new(void)
	{
	return(DSO_new_method(NULL));
	}

void DSO_set_default_method(DSO_METHOD *meth)
	{
d76 1
a76 1
	}
d78 16
a93 4
DSO_METHOD *DSO_get_default_method(void)
	{
	return(default_DSO_meth);
	}
a94 8
DSO_METHOD *DSO_get_method(DSO *dso)
	{
	return(dso->meth);
	}

DSO_METHOD *DSO_set_method(DSO *dso, DSO_METHOD *meth)
	{
	DSO_METHOD *mtmp;
d97 2
a98 2
	return(mtmp);
	}
d100 3
a102 2
DSO *DSO_new_method(DSO_METHOD *meth)
	{
d105 1
a105 1
	if(default_DSO_meth == NULL)
d111 4
a114 5
	if(ret == NULL)
		{
		DSOerr(DSO_F_DSO_NEW_METHOD,ERR_R_MALLOC_FAILURE);
		return(NULL);
		}
d117 1
a117 2
	if(ret->meth_data == NULL)
		{
d119 1
a119 1
		DSOerr(DSO_F_DSO_NEW_METHOD,ERR_R_MALLOC_FAILURE);
d121 3
a123 3
		return(NULL);
		}
	if(meth == NULL)
d128 1
a128 2
	if((ret->meth->init != NULL) && !ret->meth->init(ret))
		{
d130 1
a130 3
		ret=NULL;
		}
	return(ret);
d132 2
d135 8
a142 33
int DSO_free(DSO *dso)
	{
        int i;
 
	if(dso == NULL)
		{
		DSOerr(DSO_F_DSO_FREE,ERR_R_PASSED_NULL_PARAMETER);
		return(0);
		}
 
	i=CRYPTO_add(&dso->references,-1,CRYPTO_LOCK_DSO);
	if(i > 0) return(1);

	if((dso->meth->dso_unload != NULL) && !dso->meth->dso_unload(dso))
		{
		DSOerr(DSO_F_DSO_FREE,DSO_R_UNLOAD_FAILED);
		return(0);
		}
 
	if((dso->meth->finish != NULL) && !dso->meth->finish(dso))
		{
		DSOerr(DSO_F_DSO_FREE,DSO_R_FINISH_FAILED);
		return(0);
		}
	
	sk_void_free(dso->meth_data);
	if(dso->filename != NULL)
		free(dso->filename);
	if(dso->loaded_filename != NULL)
		free(dso->loaded_filename);
 
	free(dso);
	return(1);
d145 7
a151 3
int DSO_flags(DSO *dso)
	{
	return((dso == NULL) ? 0 : dso->flags);
d154 4
d159 5
a163 7
int DSO_up_ref(DSO *dso)
	{
	if (dso == NULL)
		{
		DSOerr(DSO_F_DSO_UP_REF,ERR_R_PASSED_NULL_PARAMETER);
		return(0);
		}
d165 3
a167 3
	CRYPTO_add(&dso->references,1,CRYPTO_LOCK_DSO);
	return(1);
	}
d169 22
a190 2
DSO *DSO_load(DSO *dso, const char *filename, DSO_METHOD *meth, int flags)
	{
d194 1
a194 2
	if(dso == NULL)
		{
d196 2
a197 3
		if(ret == NULL)
			{
			DSOerr(DSO_F_DSO_LOAD,ERR_R_MALLOC_FAILURE);
d199 1
a199 1
			}
d202 2
a203 3
		if(DSO_ctrl(ret, DSO_CTRL_SET_FLAGS, flags, NULL) < 0)
			{
			DSOerr(DSO_F_DSO_LOAD,DSO_R_CTRL_FAILED);
a204 1
			}
d206 1
a206 1
	else
d209 2
a210 3
	if(ret->filename != NULL)
		{
		DSOerr(DSO_F_DSO_LOAD,DSO_R_DSO_ALREADY_LOADED);
d212 1
a212 1
		}
d215 5
a219 6
	if(filename != NULL)
		if(!DSO_set_filename(ret, filename))
			{
			DSOerr(DSO_F_DSO_LOAD,DSO_R_SET_FILENAME_FAILED);
			goto err;
			}
d221 2
a222 3
	if(filename == NULL)
		{
		DSOerr(DSO_F_DSO_LOAD,DSO_R_NO_FILENAME);
d224 3
a226 4
		}
	if(ret->meth->dso_load == NULL)
		{
		DSOerr(DSO_F_DSO_LOAD,DSO_R_UNSUPPORTED);
d228 3
a230 4
		}
	if(!ret->meth->dso_load(ret))
		{
		DSOerr(DSO_F_DSO_LOAD,DSO_R_LOAD_FAILED);
d232 1
a232 1
		}
d234 2
a235 1
	return(ret);
d237 1
a237 1
	if(allocated)
d239 2
a240 2
	return(NULL);
	}
d242 3
a244 2
void *DSO_bind_var(DSO *dso, const char *symname)
	{
d247 12
a258 15
	if((dso == NULL) || (symname == NULL))
		{
		DSOerr(DSO_F_DSO_BIND_VAR,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	if(dso->meth->dso_bind_var == NULL)
		{
		DSOerr(DSO_F_DSO_BIND_VAR,DSO_R_UNSUPPORTED);
		return(NULL);
		}
	if((ret = dso->meth->dso_bind_var(dso, symname)) == NULL)
		{
		DSOerr(DSO_F_DSO_BIND_VAR,DSO_R_SYM_FAILURE);
		return(NULL);
		}
d260 2
a261 2
	return(ret);
	}
d263 3
a265 2
DSO_FUNC_TYPE DSO_bind_func(DSO *dso, const char *symname)
	{
d268 12
a279 15
	if((dso == NULL) || (symname == NULL))
		{
		DSOerr(DSO_F_DSO_BIND_FUNC,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	if(dso->meth->dso_bind_func == NULL)
		{
		DSOerr(DSO_F_DSO_BIND_FUNC,DSO_R_UNSUPPORTED);
		return(NULL);
		}
	if((ret = dso->meth->dso_bind_func(dso, symname)) == NULL)
		{
		DSOerr(DSO_F_DSO_BIND_FUNC,DSO_R_SYM_FAILURE);
		return(NULL);
		}
d281 2
a282 2
	return(ret);
	}
d292 7
a298 7
long DSO_ctrl(DSO *dso, int cmd, long larg, void *parg)
	{
	if(dso == NULL)
		{
		DSOerr(DSO_F_DSO_CTRL,ERR_R_PASSED_NULL_PARAMETER);
		return(-1);
		}
d302 1
a302 2
	switch(cmd)
		{
d307 1
a307 1
		return(0);
d310 1
a310 1
		return(0);
a312 7
		}
	if((dso->meth == NULL) || (dso->meth->dso_ctrl == NULL))
		{
		DSOerr(DSO_F_DSO_CTRL,DSO_R_UNSUPPORTED);
		return(-1);
		}
	return(dso->meth->dso_ctrl(dso,cmd,larg,parg));
d314 12
a325 6

int DSO_set_name_converter(DSO *dso, DSO_NAME_CONVERTER_FUNC cb,
			DSO_NAME_CONVERTER_FUNC *oldcb)
	{
	if(dso == NULL)
		{
d327 4
a330 4
				ERR_R_PASSED_NULL_PARAMETER);
		return(0);
		}
	if(oldcb)
d333 2
a334 12
	return(1);
	}

const char *DSO_get_filename(DSO *dso)
	{
	if(dso == NULL)
		{
		DSOerr(DSO_F_DSO_GET_FILENAME,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	return(dso->filename);
	}
d336 13
a348 2
int DSO_set_filename(DSO *dso, const char *filename)
	{
d351 8
a358 10
	if((dso == NULL) || (filename == NULL))
		{
		DSOerr(DSO_F_DSO_SET_FILENAME,ERR_R_PASSED_NULL_PARAMETER);
		return(0);
		}
	if(dso->loaded_filename)
		{
		DSOerr(DSO_F_DSO_SET_FILENAME,DSO_R_DSO_ALREADY_LOADED);
		return(0);
		}
d361 4
a364 5
	if(copied == NULL)
		{
		DSOerr(DSO_F_DSO_SET_FILENAME,ERR_R_MALLOC_FAILURE);
		return(0);
		}
d366 1
a366 1
	if(dso->filename)
d369 2
a370 2
	return(1);
	}
d372 3
a374 2
char *DSO_merge(DSO *dso, const char *filespec1, const char *filespec2)
	{
d377 6
a382 8
	if(dso == NULL || filespec1 == NULL)
		{
		DSOerr(DSO_F_DSO_MERGE,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	if((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0)
		{
		if(dso->merger != NULL)
d384 1
a384 1
		else if(dso->meth->dso_merger != NULL)
d386 1
a386 3
				filespec1, filespec2);
		}
	return(result);
d388 2
d391 3
a393 2
char *DSO_convert_filename(DSO *dso, const char *filename)
	{
d396 5
a400 6
	if(dso == NULL)
		{
		DSOerr(DSO_F_DSO_CONVERT_FILENAME,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	if(filename == NULL)
d402 6
a407 8
	if(filename == NULL)
		{
		DSOerr(DSO_F_DSO_CONVERT_FILENAME,DSO_R_NO_FILENAME);
		return(NULL);
		}
	if((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0)
		{
		if(dso->name_converter != NULL)
d409 1
a409 1
		else if(dso->meth->dso_name_converter != NULL)
d411 2
a412 3
		}
	if(result == NULL)
		{
d414 1
a414 2
		if(result == NULL)
			{
d416 3
a418 3
					ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
a419 2
		}
	return(result);
d421 2
d424 4
a427 4
const char *DSO_get_loaded_filename(DSO *dso)
	{
	if(dso == NULL)
		{
d429 2
a430 4
				ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	return(dso->loaded_filename);
d432 2
d435 3
a437 2
int DSO_pathbyaddr(void *addr,char *path,int sz)
	{
d439 4
a442 4
	if (meth == NULL) meth = DSO_METHOD_openssl();
	if (meth->pathbyaddr == NULL)
		{
		DSOerr(DSO_F_DSO_PATHBYADDR,DSO_R_UNSUPPORTED);
a443 2
		}
	return (*meth->pathbyaddr)(addr,path,sz);
d445 2
d448 3
a450 2
void *DSO_global_lookup(const char *name)
	{
d452 4
a455 4
	if (meth == NULL) meth = DSO_METHOD_openssl();
	if (meth->globallookup == NULL)
		{
		DSOerr(DSO_F_DSO_GLOBAL_LOOKUP,DSO_R_UNSUPPORTED);
d457 1
a457 1
		}
d459 1
a459 1
	}
@


1.8
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d376 1
a376 1
	BUF_strlcpy(copied, filename, strlen(filename) + 1);
d435 1
a435 1
		BUF_strlcpy(result, filename, strlen(filename) + 1);
@


1.7
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a141 3
#ifdef REF_PRINT
	REF_PRINT("DSO",dso);
#endif
a142 7
#ifdef REF_CHECK
	if(i < 0)
		{
		fprintf(stderr,"DSO_free, bad reference count\n");
		abort();
		}
#endif
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d103 1
a103 1
	ret = (DSO *)OPENSSL_malloc(sizeof(DSO));
d115 1
a115 1
		OPENSSL_free(ret);
d125 1
a125 1
		OPENSSL_free(ret);
d168 1
a168 1
		OPENSSL_free(dso->filename);
d170 1
a170 1
		OPENSSL_free(dso->loaded_filename);
d172 1
a172 1
	OPENSSL_free(dso);
d380 1
a380 1
	copied = OPENSSL_malloc(strlen(filename) + 1);
d388 1
a388 1
		OPENSSL_free(dso->filename);
d438 1
a438 1
		result = OPENSSL_malloc(strlen(filename) + 1);
@


1.5
log
@resolve conflicts
@
text
@d110 1
a110 1
	ret->meth_data = sk_new_null();
d166 1
a166 1
	sk_free(dso->meth_data);
a401 7
	if(filespec1 == NULL)
		filespec1 = dso->filename;
	if(filespec1 == NULL)
		{
		DSOerr(DSO_F_DSO_MERGE,DSO_R_NO_FILE_SPECIFICATION);
		return(NULL);
		}
d459 24
@


1.4
log
@merge 0.9.7d
@
text
@d1 1
a1 1
/* dso_lib.c */
d391 27
@


1.3
log
@Less strcpy/strcat/sprintf. tdeval@@ ok.
@
text
@d386 1
a386 1
	strlcpy(copied, filename, strlen(filename) + 1);
d425 1
a425 1
		strlcpy(result, filename, strlen(filename) + 1);
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d386 1
a386 1
	strcpy(copied, filename);
d425 1
a425 1
		strcpy(result, filename);
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d111 1
a111 1
	if((ret->meth_data = sk_new_null()) == NULL)
d167 4
d182 1
a182 1
int DSO_up(DSO *dso)
d186 1
a186 1
		DSOerr(DSO_F_DSO_UP,ERR_R_PASSED_NULL_PARAMETER);
a198 5
	if(filename == NULL)
		{
		DSOerr(DSO_F_DSO_LOAD,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
d205 1
a205 1
			return(NULL);
d208 6
d217 19
a235 8
	/* Bleurgh ... have to check for negative return values for
	 * errors. <grimace> */
	if(DSO_ctrl(ret, DSO_CTRL_SET_FLAGS, flags, NULL) < 0)
		{
		DSOerr(DSO_F_DSO_LOAD,DSO_R_CTRL_FAILED);
		if(allocated)
			DSO_free(ret);
		return(NULL);
d240 1
a240 3
		if(allocated)
			DSO_free(ret);
		return(NULL);
d242 1
a242 1
	if(!ret->meth->dso_load(ret, filename))
d245 1
a245 3
		if(allocated)
			DSO_free(ret);
		return(NULL);
d249 4
d316 16
d338 101
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d111 1
a111 1
	if(ret->meth_data == NULL)
a166 4
	if(dso->filename != NULL)
		OPENSSL_free(dso->filename);
	if(dso->loaded_filename != NULL)
		OPENSSL_free(dso->loaded_filename);
d178 1
a178 1
int DSO_up_ref(DSO *dso)
d182 1
a182 1
		DSOerr(DSO_F_DSO_UP_REF,ERR_R_PASSED_NULL_PARAMETER);
d195 5
d206 1
a206 1
			goto err;
a208 6
		/* Pass the provided flags to the new DSO object */
		if(DSO_ctrl(ret, DSO_CTRL_SET_FLAGS, flags, NULL) < 0)
			{
			DSOerr(DSO_F_DSO_LOAD,DSO_R_CTRL_FAILED);
			goto err;
			}
d212 8
a219 19
	/* Don't load if we're currently already loaded */
	if(ret->filename != NULL)
		{
		DSOerr(DSO_F_DSO_LOAD,DSO_R_DSO_ALREADY_LOADED);
		goto err;
		}
	/* filename can only be NULL if we were passed a dso that already has
	 * one set. */
	if(filename != NULL)
		if(!DSO_set_filename(ret, filename))
			{
			DSOerr(DSO_F_DSO_LOAD,DSO_R_SET_FILENAME_FAILED);
			goto err;
			}
	filename = ret->filename;
	if(filename == NULL)
		{
		DSOerr(DSO_F_DSO_LOAD,DSO_R_NO_FILENAME);
		goto err;
d224 3
a226 1
		goto err;
d228 1
a228 1
	if(!ret->meth->dso_load(ret))
d231 3
a233 1
		goto err;
a236 4
err:
	if(allocated)
		DSO_free(ret);
	return(NULL);
a299 16
	/* We should intercept certain generic commands and only pass control
	 * to the method-specific ctrl() function if it's something we don't
	 * handle. */
	switch(cmd)
		{
	case DSO_CTRL_GET_FLAGS:
		return dso->flags;
	case DSO_CTRL_SET_FLAGS:
		dso->flags = (int)larg;
		return(0);
	case DSO_CTRL_OR_FLAGS:
		dso->flags |= (int)larg;
		return(0);
	default:
		break;
		}
a305 101
	}

int DSO_set_name_converter(DSO *dso, DSO_NAME_CONVERTER_FUNC cb,
			DSO_NAME_CONVERTER_FUNC *oldcb)
	{
	if(dso == NULL)
		{
		DSOerr(DSO_F_DSO_SET_NAME_CONVERTER,
				ERR_R_PASSED_NULL_PARAMETER);
		return(0);
		}
	if(oldcb)
		*oldcb = dso->name_converter;
	dso->name_converter = cb;
	return(1);
	}

const char *DSO_get_filename(DSO *dso)
	{
	if(dso == NULL)
		{
		DSOerr(DSO_F_DSO_GET_FILENAME,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	return(dso->filename);
	}

int DSO_set_filename(DSO *dso, const char *filename)
	{
	char *copied;

	if((dso == NULL) || (filename == NULL))
		{
		DSOerr(DSO_F_DSO_SET_FILENAME,ERR_R_PASSED_NULL_PARAMETER);
		return(0);
		}
	if(dso->loaded_filename)
		{
		DSOerr(DSO_F_DSO_SET_FILENAME,DSO_R_DSO_ALREADY_LOADED);
		return(0);
		}
	/* We'll duplicate filename */
	copied = OPENSSL_malloc(strlen(filename) + 1);
	if(copied == NULL)
		{
		DSOerr(DSO_F_DSO_SET_FILENAME,ERR_R_MALLOC_FAILURE);
		return(0);
		}
	strcpy(copied, filename);
	if(dso->filename)
		OPENSSL_free(dso->filename);
	dso->filename = copied;
	return(1);
	}

char *DSO_convert_filename(DSO *dso, const char *filename)
	{
	char *result = NULL;

	if(dso == NULL)
		{
		DSOerr(DSO_F_DSO_CONVERT_FILENAME,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	if(filename == NULL)
		filename = dso->filename;
	if(filename == NULL)
		{
		DSOerr(DSO_F_DSO_CONVERT_FILENAME,DSO_R_NO_FILENAME);
		return(NULL);
		}
	if((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0)
		{
		if(dso->name_converter != NULL)
			result = dso->name_converter(dso, filename);
		else if(dso->meth->dso_name_converter != NULL)
			result = dso->meth->dso_name_converter(dso, filename);
		}
	if(result == NULL)
		{
		result = OPENSSL_malloc(strlen(filename) + 1);
		if(result == NULL)
			{
			DSOerr(DSO_F_DSO_CONVERT_FILENAME,
					ERR_R_MALLOC_FAILURE);
			return(NULL);
			}
		strcpy(result, filename);
		}
	return(result);
	}

const char *DSO_get_loaded_filename(DSO *dso)
	{
	if(dso == NULL)
		{
		DSOerr(DSO_F_DSO_GET_LOADED_FILENAME,
				ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	return(dso->loaded_filename);
@


1.1.1.2
log
@import openssl-0.9.7d
@
text
@d386 1
a386 1
	BUF_strlcpy(copied, filename, strlen(filename) + 1);
d425 1
a425 1
		BUF_strlcpy(result, filename, strlen(filename) + 1);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d1 1
a1 1
/* dso_lib.c -*- mode:C; c-file-style: "eay" -*- */
a390 27
	}

char *DSO_merge(DSO *dso, const char *filespec1, const char *filespec2)
	{
	char *result = NULL;

	if(dso == NULL || filespec1 == NULL)
		{
		DSOerr(DSO_F_DSO_MERGE,ERR_R_PASSED_NULL_PARAMETER);
		return(NULL);
		}
	if(filespec1 == NULL)
		filespec1 = dso->filename;
	if(filespec1 == NULL)
		{
		DSOerr(DSO_F_DSO_MERGE,DSO_R_NO_FILE_SPECIFICATION);
		return(NULL);
		}
	if((dso->flags & DSO_FLAG_NO_NAME_TRANSLATION) == 0)
		{
		if(dso->merger != NULL)
			result = dso->merger(dso, filespec1, filespec2);
		else if(dso->meth->dso_merger != NULL)
			result = dso->meth->dso_merger(dso,
				filespec1, filespec2);
		}
	return(result);
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d110 1
a110 1
	ret->meth_data = sk_void_new_null();
d166 1
a166 1
	sk_void_free(dso->meth_data);
d402 7
a465 24
	}

int DSO_pathbyaddr(void *addr,char *path,int sz)
	{
	DSO_METHOD *meth = default_DSO_meth;
	if (meth == NULL) meth = DSO_METHOD_openssl();
	if (meth->pathbyaddr == NULL)
		{
		DSOerr(DSO_F_DSO_PATHBYADDR,DSO_R_UNSUPPORTED);
		return -1;
		}
	return (*meth->pathbyaddr)(addr,path,sz);
	}

void *DSO_global_lookup(const char *name)
	{
	DSO_METHOD *meth = default_DSO_meth;
	if (meth == NULL) meth = DSO_METHOD_openssl();
	if (meth->globallookup == NULL)
		{
		DSOerr(DSO_F_DSO_GLOBAL_LOOKUP,DSO_R_UNSUPPORTED);
		return NULL;
		}
	return (*meth->globallookup)(name);
@


