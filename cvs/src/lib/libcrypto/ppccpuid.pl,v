head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4;
locks; strict;
comment	@# @;


1.4
date	2014.05.03.11.39.46;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.18.49.35;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.18.16.45;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.02;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Detect Altivec support with the machdep.altivec sysctl rather than setmp and
a SIGILL handler.
Do not attempt to detect and use a 64-bit FPU yet.
@
text
@#!/usr/bin/env perl

$flavour = shift;

$0 =~ m/(.*[\/\\])[^\/\\]+$/; $dir=$1;
( $xlate="${dir}ppc-xlate.pl" and -f $xlate ) or
( $xlate="${dir}perlasm/ppc-xlate.pl" and -f $xlate) or
die "can't locate ppc-xlate.pl";

open STDOUT,"| $^X $xlate $flavour ".shift || die "can't call $xlate: $!";

if ($flavour=~/64/) {
    $CMPLI="cmpldi";
    $SHRLI="srdi";
    $SIGNX="extsw";
} else {
    $CMPLI="cmplwi";
    $SHRLI="srwi";
    $SIGNX="mr";
}

$code=<<___;
.machine	"any"
.text

#if 0
.globl	.OPENSSL_ppc64_probe
.align	4
.OPENSSL_ppc64_probe:
	fcfid	f1,f1
	extrdi	r0,r0,32,0
	blr
	.long	0
	.byte	0,12,0x14,0,0,0,0,0
#endif

.globl	.OPENSSL_wipe_cpu
.align	4
.OPENSSL_wipe_cpu:
	xor	r0,r0,r0
	fmr	f0,f31
	fmr	f1,f31
	fmr	f2,f31
	mr	r3,r1
	fmr	f3,f31
	xor	r4,r4,r4
	fmr	f4,f31
	xor	r5,r5,r5
	fmr	f5,f31
	xor	r6,r6,r6
	fmr	f6,f31
	xor	r7,r7,r7
	fmr	f7,f31
	xor	r8,r8,r8
	fmr	f8,f31
	xor	r9,r9,r9
	fmr	f9,f31
	xor	r10,r10,r10
	fmr	f10,f31
	xor	r11,r11,r11
	fmr	f11,f31
	xor	r12,r12,r12
	fmr	f12,f31
	fmr	f13,f31
	blr
	.long	0
	.byte	0,12,0x14,0,0,0,0,0

.globl	.OPENSSL_atomic_add
.align	4
.OPENSSL_atomic_add:
Ladd:	lwarx	r5,0,r3
	add	r0,r4,r5
	stwcx.	r0,0,r3
	bne-	Ladd
	$SIGNX	r3,r0
	blr
	.long	0
	.byte	0,12,0x14,0,0,0,2,0
	.long	0
___

$code =~ s/\`([^\`]*)\`/eval $1/gem;
print $code;
close STDOUT;
@


1.3
log
@Remove oh-so-important-from-a-security-pov OpenSSL_rtdsc() function.
@
text
@d26 1
d35 1
a35 8

.globl	.OPENSSL_altivec_probe
.align	4
.OPENSSL_altivec_probe:
	.long	0x10000484	# vor	v0,v0,v0
	blr
	.long	0
	.byte	0,12,0x14,0,0,0,0,0
@


1.2
log
@Ok, there was a need for OPENSSL_cleanse() instead of bzero() to prevent
supposedly smart compilers from optimizing memory cleanups away. Understood.

Ok, in case of an hypothetically super smart compiler, OPENSSL_cleanse() had
to be convoluted enough for the compiler not to recognize that this was
actually bzero() in disguise. Understood.

But then why there had been optimized assembler versions of OPENSSL_cleanse()
is beyond me. Did someone not trust the C obfuscation?
@
text
@a86 9

.globl	.OPENSSL_rdtsc
.align	4
.OPENSSL_rdtsc:
	mftb	r3
	mftbu	r4
	blr
	.long	0
	.byte	0,12,0x14,0,0,0,0,0
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
.globl	.OPENSSL_cpuid_setup
d28 3
a30 1
.OPENSSL_cpuid_setup:
d32 10
d47 3
d51 1
d53 1
d55 1
d57 1
d59 1
d61 1
d63 1
d65 1
d67 1
d69 2
d72 2
d78 1
a78 1
Loop:	lwarx	r5,0,r3
d81 1
a81 1
	bne-	Loop
d84 3
d94 2
a95 27

.globl	.OPENSSL_cleanse
.align	4
.OPENSSL_cleanse:
	$CMPLI	r4,7
	li	r0,0
	bge	Lot
Little:	mtctr	r4
	stb	r0,0(r3)
	addi	r3,r3,1
	bdnz-	\$-8
	blr
Lot:	andi.	r5,r3,3
	beq	Laligned
	stb	r0,0(r3)
	subi	r4,r4,1
	addi	r3,r3,1
	b	Lot
Laligned:
	$SHRLI	r5,r4,2
	mtctr	r5
	stw	r0,0(r3)
	addi	r3,r3,4
	bdnz-	\$-8
	andi.	r4,r4,3
	bne	Little
	blr
@


1.1.1.1
log
@import of OpenSSL 0.9.8k
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@a69 2
	$CMPLI	r4,0
	beqlr-
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@d26 1
a26 1
.globl	.OPENSSL_ppc64_probe
d28 1
a28 3
.OPENSSL_ppc64_probe:
	fcfid	f1,f1
	extrdi	r0,r0,32,0
a29 10
	.long	0
	.byte	0,12,0x14,0,0,0,0,0

.globl	.OPENSSL_altivec_probe
.align	4
.OPENSSL_altivec_probe:
	.long	0x10000484	# vor	v0,v0,v0
	blr
	.long	0
	.byte	0,12,0x14,0,0,0,0,0
a34 3
	fmr	f0,f31
	fmr	f1,f31
	fmr	f2,f31
a35 1
	fmr	f3,f31
a36 1
	fmr	f4,f31
a37 1
	fmr	f5,f31
a38 1
	fmr	f6,f31
a39 1
	fmr	f7,f31
a40 1
	fmr	f8,f31
a41 1
	fmr	f9,f31
a42 1
	fmr	f10,f31
a43 1
	fmr	f11,f31
a44 2
	fmr	f12,f31
	fmr	f13,f31
a45 2
	.long	0
	.byte	0,12,0x14,0,0,0,0,0
d50 1
a50 1
Ladd:	lwarx	r5,0,r3
d53 1
a53 1
	bne-	Ladd
a55 3
	.long	0
	.byte	0,12,0x14,0,0,0,2,0
	.long	0
a62 2
	.long	0
	.byte	0,12,0x14,0,0,0,0,0
d75 1
a75 1
	bdnz	\$-8
d88 1
a88 1
	bdnz	\$-8
a91 3
	.long	0
	.byte	0,12,0x14,0,0,0,2,0
	.long	0
@


