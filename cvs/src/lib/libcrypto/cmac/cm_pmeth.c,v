head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.7;
commitid	yQEL1wOWIearrW15;

1.7
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.6;
commitid	id8dTrTMtnTn4fqt;

1.6
date	2014.06.21.13.42.14;	author jsing;	state Exp;
branches;
next	1.5;
commitid	EPuptw2uHgeETKRI;

1.5
date	2014.06.21.12.07.02;	author miod;	state Exp;
branches;
next	1.4;
commitid	mBEsR5BdZ37xdrAL;

1.4
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.38;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: cm_pmeth.c,v 1.7 2014/07/10 13:58:22 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2010.
 */
/* ====================================================================
 * Copyright (c) 2010 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <stdio.h>
#include <string.h>

#include <openssl/cmac.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

#include "evp_locl.h"

/* The context structure and "key" is simply a CMAC_CTX */

static int
pkey_cmac_init(EVP_PKEY_CTX *ctx)
{
	ctx->data = CMAC_CTX_new();
	if (!ctx->data)
		return 0;
	ctx->keygen_info_count = 0;
	return 1;
}

static int
pkey_cmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
{
	if (!pkey_cmac_init(dst))
		return 0;
	if (!CMAC_CTX_copy(dst->data, src->data))
		return 0;
	return 1;
}

static void
pkey_cmac_cleanup(EVP_PKEY_CTX *ctx)
{
	CMAC_CTX_free(ctx->data);
}

static int
pkey_cmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
{
	CMAC_CTX *cmkey = CMAC_CTX_new();
	CMAC_CTX *cmctx = ctx->data;

	if (!cmkey)
		return 0;
	if (!CMAC_CTX_copy(cmkey, cmctx)) {
		CMAC_CTX_free(cmkey);
		return 0;
	}
	EVP_PKEY_assign(pkey, EVP_PKEY_CMAC, cmkey);

	return 1;
}

static int
int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
{
	if (!CMAC_Update(ctx->pctx->data, data, count))
		return 0;
	return 1;
}

static int
cmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
{
	EVP_MD_CTX_set_flags(mctx, EVP_MD_CTX_FLAG_NO_INIT);
	mctx->update = int_update;
	return 1;
}

static int
cmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
    EVP_MD_CTX *mctx)
{
	return CMAC_Final(ctx->data, sig, siglen);
}

static int
pkey_cmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
{
	CMAC_CTX *cmctx = ctx->data;

	switch (type) {
	case EVP_PKEY_CTRL_SET_MAC_KEY:
		if (!p2 || p1 < 0)
			return 0;
		if (!CMAC_Init(cmctx, p2, p1, NULL, NULL))
			return 0;
		break;

	case EVP_PKEY_CTRL_CIPHER:
		if (!CMAC_Init(cmctx, NULL, 0, p2, ctx->engine))
			return 0;
		break;

	case EVP_PKEY_CTRL_MD:
		if (ctx->pkey && !CMAC_CTX_copy(ctx->data,
		    (CMAC_CTX *)ctx->pkey->pkey.ptr))
			return 0;
		if (!CMAC_Init(cmctx, NULL, 0, NULL, NULL))
			return 0;
		break;

	default:
		return -2;
	}
	return 1;
}

static int
pkey_cmac_ctrl_str(EVP_PKEY_CTX *ctx, const char *type, const char *value)
{
	if (!value)
		return 0;
	if (!strcmp(type, "key")) {
		void *p = (void *)value;
		return pkey_cmac_ctrl(ctx, EVP_PKEY_CTRL_SET_MAC_KEY,
		    strlen(p), p);
	}
	if (!strcmp(type, "cipher")) {
		const EVP_CIPHER *c;

		c = EVP_get_cipherbyname(value);
		if (!c)
			return 0;
		return pkey_cmac_ctrl(ctx, EVP_PKEY_CTRL_CIPHER, -1, (void *)c);
	}
	if (!strcmp(type, "hexkey")) {
		unsigned char *key;
		int r;
		long keylen;

		key = string_to_hex(value, &keylen);
		if (!key)
			return 0;
		r = pkey_cmac_ctrl(ctx, EVP_PKEY_CTRL_SET_MAC_KEY, keylen, key);
		free(key);
		return r;
	}

	return -2;
}

const EVP_PKEY_METHOD cmac_pkey_meth = {
	.pkey_id = EVP_PKEY_CMAC,
	.flags = EVP_PKEY_FLAG_SIGCTX_CUSTOM,

	.init = pkey_cmac_init,
	.copy = pkey_cmac_copy,
	.cleanup = pkey_cmac_cleanup,

	.keygen = pkey_cmac_keygen,

	.signctx_init = cmac_signctx_init,
	.signctx = cmac_signctx,

	.ctrl = pkey_cmac_ctrl,
	.ctrl_str = pkey_cmac_ctrl_str
};
@


1.7
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cm_pmeth.c,v 1.6 2014/06/21 13:42:14 jsing Exp $ */
d57 2
a58 1
#include "cryptlib.h"
d61 1
a61 2
#include <openssl/evp.h>
#include <openssl/cmac.h>
@


1.6
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: cm_pmeth.c,v 1.5 2014/06/21 12:07:02 miod Exp $ */
d55 2
@


1.5
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: cm_pmeth.c,v 1.4 2014/06/12 15:49:28 deraadt Exp $ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d103 1
a103 1
	
d108 1
a108 1
int_update(EVP_MD_CTX *ctx,const void *data,size_t count)
d196 1
a196 2
const EVP_PKEY_METHOD
cmac_pkey_meth = {
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 3
a66 2
static int pkey_cmac_init(EVP_PKEY_CTX *ctx)
	{
d72 1
a72 1
	}
d74 3
a76 2
static int pkey_cmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
	{
d82 1
a82 1
	}
d84 3
a86 2
static void pkey_cmac_cleanup(EVP_PKEY_CTX *ctx)
	{
d88 1
a88 1
	}
d90 3
a92 2
static int pkey_cmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
	{
d95 1
d98 1
a98 2
	if (!CMAC_CTX_copy(cmkey, cmctx))
		{
d101 1
a101 1
		}
d105 1
a105 1
	}
d107 3
a109 2
static int int_update(EVP_MD_CTX *ctx,const void *data,size_t count)
	{
d113 1
a113 1
	}
d115 3
a117 2
static int cmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
	{
d121 1
a121 1
	}
d123 4
a126 3
static int cmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
					EVP_MD_CTX *mctx)
	{
d128 1
a128 1
	}
d130 3
a132 2
static int pkey_cmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
	{
a133 2
	switch (type)
		{
d135 2
a136 1
		case EVP_PKEY_CTRL_SET_MAC_KEY:
d143 1
a143 1
		case EVP_PKEY_CTRL_CIPHER:
d148 1
a148 1
		case EVP_PKEY_CTRL_MD:
d150 1
a150 1
					(CMAC_CTX *)ctx->pkey->pkey.ptr))
d156 1
a156 1
		default:
d158 1
a158 2

		}
d160 1
a160 1
	}
d162 3
a164 3
static int pkey_cmac_ctrl_str(EVP_PKEY_CTX *ctx,
			const char *type, const char *value)
	{
a165 1
		{
d167 1
a167 3
		}
	if (!strcmp(type, "key"))
		{
d170 3
a172 4
								strlen(p), p);
		}
	if (!strcmp(type, "cipher"))
		{
d174 1
d179 2
a180 3
		}
	if (!strcmp(type, "hexkey"))
		{
d184 1
d191 2
a192 1
		}
d194 1
a194 1
	}
d196 2
a197 1
const EVP_PKEY_METHOD cmac_pkey_meth = {
@


1.3
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d1 1
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d191 16
a206 34
const EVP_PKEY_METHOD cmac_pkey_meth = 
	{
	EVP_PKEY_CMAC,
	EVP_PKEY_FLAG_SIGCTX_CUSTOM,
	pkey_cmac_init,
	pkey_cmac_copy,
	pkey_cmac_cleanup,

	0, 0,

	0,
	pkey_cmac_keygen,

	0, 0,

	0, 0,

	0,0,

	cmac_signctx_init,
	cmac_signctx,

	0,0,

	0,0,

	0,0,

	0,0,

	pkey_cmac_ctrl,
	pkey_cmac_ctrl_str

	};
@


1.1
log
@Initial revision
@
text
@d185 1
a185 1
		OPENSSL_free(key);
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@
