head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2017.01.21.04.44.43;	author jsing;	state Exp;
branches;
next	1.7;
commitid	zHxe3oRsmPbecUWd;

1.7
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.06.07.15.06.24;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	8XcpJqUicyz2wPAR;

1.5
date	2014.05.29.21.19.30;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.29.21.07.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.19.16.42.26;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Expand DECLARE_OBJ_BSEARCH_CMP_FN and IMPLEMENT_OBJ_BSEARCH_CMP_FN macros.

No change to generated assembly excluding line numbers.
@
text
@/* $OpenBSD: obj_xref.c,v 1.7 2014/06/12 15:49:30 deraadt Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/objects.h>
#include "obj_xref.h"

DECLARE_STACK_OF(nid_triple)
STACK_OF(nid_triple) *sig_app, *sigx_app;

static int
sig_cmp(const nid_triple *a, const nid_triple *b)
{
	return a->sign_id - b->sign_id;
}

static int sig_cmp_BSEARCH_CMP_FN(const void *, const void *);
static int sig_cmp(nid_triple const *, nid_triple const *);
static nid_triple *OBJ_bsearch_sig(nid_triple *key, nid_triple const *base, int num);

static int
sig_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)
{
	nid_triple const *a = a_;
	nid_triple const *b = b_;
	return sig_cmp(a, b);
}

static nid_triple *
OBJ_bsearch_sig(nid_triple *key, nid_triple const *base, int num)
{
	return (nid_triple *)OBJ_bsearch_(key, base, num, sizeof(nid_triple),
	    sig_cmp_BSEARCH_CMP_FN);
}

static int
sig_sk_cmp(const nid_triple * const *a, const nid_triple * const *b)
{
	return (*a)->sign_id - (*b)->sign_id;
}

static int sigx_cmp_BSEARCH_CMP_FN(const void *, const void *);
static int sigx_cmp(const nid_triple * const *, const nid_triple * const *);
static const nid_triple * *OBJ_bsearch_sigx(const nid_triple * *key, const nid_triple * const *base, int num);

static int
sigx_cmp(const nid_triple * const *a, const nid_triple * const *b)
{
	int ret;

	ret = (*a)->hash_id - (*b)->hash_id;
	if (ret)
		return ret;
	return (*a)->pkey_id - (*b)->pkey_id;
}


static int
sigx_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)
{
	const nid_triple * const *a = a_;
	const nid_triple * const *b = b_;
	return sigx_cmp(a, b);
}

static const nid_triple * *
OBJ_bsearch_sigx(const nid_triple * *key, const nid_triple * const *base, int num)
{
	return (const nid_triple * *)OBJ_bsearch_(key, base, num, sizeof(const nid_triple *),
	    sigx_cmp_BSEARCH_CMP_FN);
}

int
OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid)
{
	nid_triple tmp;
	const nid_triple *rv = NULL;
	tmp.sign_id = signid;

	if (sig_app) {
		int idx = sk_nid_triple_find(sig_app, &tmp);
		if (idx >= 0)
			rv = sk_nid_triple_value(sig_app, idx);
	}

#ifndef OBJ_XREF_TEST2
	if (rv == NULL) {
		rv = OBJ_bsearch_sig(&tmp, sigoid_srt,
		    sizeof(sigoid_srt) / sizeof(nid_triple));
	}
#endif
	if (rv == NULL)
		return 0;
	if (pdig_nid)
		*pdig_nid = rv->hash_id;
	if (ppkey_nid)
		*ppkey_nid = rv->pkey_id;
	return 1;
}

int
OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid)
{
	nid_triple tmp;
	const nid_triple *t = &tmp;
	const nid_triple **rv = NULL;

	tmp.hash_id = dig_nid;
	tmp.pkey_id = pkey_nid;

	if (sigx_app) {
		int idx = sk_nid_triple_find(sigx_app, &tmp);
		if (idx >= 0) {
			t = sk_nid_triple_value(sigx_app, idx);
			rv = &t;
		}
	}

#ifndef OBJ_XREF_TEST2
	if (rv == NULL) {
		rv = OBJ_bsearch_sigx(&t, sigoid_srt_xref,
		    sizeof(sigoid_srt_xref) / sizeof(nid_triple *));
	}
#endif
	if (rv == NULL)
		return 0;
	if (psignid)
		*psignid = (*rv)->sign_id;
	return 1;
}

int
OBJ_add_sigid(int signid, int dig_id, int pkey_id)
{
	nid_triple *ntr;

	if (!sig_app)
		sig_app = sk_nid_triple_new(sig_sk_cmp);
	if (!sig_app)
		return 0;
	if (!sigx_app)
		sigx_app = sk_nid_triple_new(sigx_cmp);
	if (!sigx_app)
		return 0;
	ntr = reallocarray(NULL, 3, sizeof(int));
	if (!ntr)
		return 0;
	ntr->sign_id = signid;
	ntr->hash_id = dig_id;
	ntr->pkey_id = pkey_id;

	if (!sk_nid_triple_push(sig_app, ntr)) {
		free(ntr);
		return 0;
	}

	if (!sk_nid_triple_push(sigx_app, ntr))
		return 0;

	sk_nid_triple_sort(sig_app);
	sk_nid_triple_sort(sigx_app);

	return 1;
}

static void
sid_free(nid_triple *tt)
{
	free(tt);
}

void
OBJ_sigid_free(void)
{
	if (sig_app) {
		sk_nid_triple_pop_free(sig_app, sid_free);
		sig_app = NULL;
	}
	if (sigx_app) {
		sk_nid_triple_free(sigx_app);
		sigx_app = NULL;
	}
}
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d71 18
a88 2
DECLARE_OBJ_BSEARCH_CMP_FN(nid_triple, nid_triple, sig);
IMPLEMENT_OBJ_BSEARCH_CMP_FN(nid_triple, nid_triple, sig);
d96 3
a98 1
DECLARE_OBJ_BSEARCH_CMP_FN(const nid_triple *, const nid_triple *, sigx);
d111 15
a125 1
IMPLEMENT_OBJ_BSEARCH_CMP_FN(const nid_triple *, const nid_triple *, sigx);
@


1.6
log
@Remove various test stubs.  The good ones have been moved by jsing
and others to the regress framework.  These remaining ones just
muddle us up when re-reading code repeatedly.
ok jsing
@
text
@d1 1
a1 1
/* crypto/objects/obj_xref.c */
@


1.5
log
@ok, next pass after review:  when possible, put the reallocarray arguments
in the "size_t nmemb, size_t size"
@
text
@a205 28

#ifdef OBJ_XREF_TEST

main()
{
	int n1, n2, n3;

	int i, rv;
#ifdef OBJ_XREF_TEST2
	for (i = 0; i <	sizeof(sigoid_srt) / sizeof(nid_triple); i++) {
		OBJ_add_sigid(sigoid_srt[i][0], sigoid_srt[i][1],
		    sigoid_srt[i][2]);
	}
#endif

	for (i = 0; i <	sizeof(sigoid_srt) / sizeof(nid_triple); i++) {
		n1 = sigoid_srt[i][0];
		rv = OBJ_find_sigid_algs(n1, &n2, &n3);
		printf("Forward: %d, %s %s %s\n", rv,
		    OBJ_nid2ln(n1), OBJ_nid2ln(n2), OBJ_nid2ln(n3));
		n1 = 0;
		rv = OBJ_find_sigid_by_algs(&n1, n2, n3);
		printf("Reverse: %d, %s %s %s\n", rv,
		    OBJ_nid2ln(n1), OBJ_nid2ln(n2), OBJ_nid2ln(n3));
	}
}

#endif
@


1.4
log
@convert 53 malloc(a*b) to reallocarray(NULL, a, b).  that is 53
potential integer overflows easily changed into an allocation return
of NULL, with errno nicely set if need be.  checks for an allocations
returning NULL are commonplace, or if the object is dereferenced
(quite normal) will result in a nice fault which can be detected &
repaired properly.
ok tedu
@
text
@d167 1
a167 1
	ntr = reallocarray(NULL, sizeof(int), 3);
@


1.3
log
@KNF.
@
text
@d167 1
a167 1
	ntr = malloc(sizeof(int) * 3);
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d65 3
a67 2
static int sig_cmp(const nid_triple *a, const nid_triple *b)
	{
d69 1
a69 1
	}
d74 3
a76 2
static int sig_sk_cmp(const nid_triple * const *a, const nid_triple * const *b)
	{
d78 1
a78 1
	}
d82 3
a84 2
static int sigx_cmp(const nid_triple * const *a, const nid_triple * const *b)
	{
d86 1
d91 1
a91 1
	}
d95 3
a97 2
int OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid)
	{
d102 1
a102 2
	if (sig_app)
		{
d106 1
a106 1
		}
d109 1
a109 2
	if (rv == NULL)
		{
d111 2
a112 2
				 sizeof(sigoid_srt) / sizeof(nid_triple));
		}
d121 1
a121 1
	}
d123 3
a125 2
int OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid)
	{
d127 1
a127 1
	const nid_triple *t=&tmp;
d133 1
a133 2
	if (sigx_app)
		{
d135 1
a135 2
		if (idx >= 0)
			{
a137 1
			}
d139 1
d142 1
a142 2
	if (rv == NULL)
		{
d144 2
a145 3
				 sizeof(sigoid_srt_xref) / sizeof(nid_triple *)
				 );
		}
d152 1
a152 1
	}
d154 3
a156 2
int OBJ_add_sigid(int signid, int dig_id, int pkey_id)
	{
d158 1
d174 1
a174 2
	if (!sk_nid_triple_push(sig_app, ntr))
		{
d177 1
a177 1
		}
d186 1
a186 1
	}
d188 3
a190 2
static void sid_free(nid_triple *tt)
	{
d192 1
a192 1
	}
d194 4
a197 4
void OBJ_sigid_free(void)
	{
	if (sig_app)
		{
d200 2
a201 3
		}
	if (sigx_app)
		{
a203 1
		}
d205 2
a206 1
		
d210 1
a210 1
	{
d215 1
a215 2
	for (i = 0; i <	sizeof(sigoid_srt) / sizeof(nid_triple); i++)
		{
d217 2
a218 2
				sigoid_srt[i][2]);
		}
d221 1
a221 2
	for (i = 0; i <	sizeof(sigoid_srt) / sizeof(nid_triple); i++)
		{
d225 2
a226 2
			OBJ_nid2ln(n1), OBJ_nid2ln(n2), OBJ_nid2ln(n3));
		n1=0;
d229 1
a229 2
			OBJ_nid2ln(n1), OBJ_nid2ln(n2), OBJ_nid2ln(n3));
		}
d231 2
a232 1
	
@


1.1
log
@Initial revision
@
text
@d113 4
a116 2
	*pdig_nid = rv->hash_id;
	*ppkey_nid = rv->pkey_id;
d149 2
a150 1
	*psignid = (*rv)->sign_id;
d165 1
a165 1
	ntr = OPENSSL_malloc(sizeof(int) * 3);
d174 1
a174 1
		OPENSSL_free(ntr);
d189 1
a189 1
	OPENSSL_free(tt);
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@d113 2
a114 4
	if (pdig_nid)
		*pdig_nid = rv->hash_id;
	if (ppkey_nid)
		*ppkey_nid = rv->pkey_id;
d147 1
a147 2
	if (psignid)
		*psignid = (*rv)->sign_id;
@

