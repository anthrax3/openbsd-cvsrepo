head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@# @;


1.11
date	2014.07.11.13.45.45;	author miod;	state Exp;
branches;
next	1.10;
commitid	RoR4zi3agkplp0Ad;

1.10
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.05.22.12.11;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.08.07.16.36;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.15;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.53;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.48;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.25;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.53;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.53;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.38;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.46;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.45;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.57;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Fix OID encoding for single components. OpenSSL PR #2556 via OpenSSL trunk.

(be sure to make cleandir and make includes before building)
@
text
@#!/usr/local/bin/perl

# fixes bug in floating point emulation on sparc64 when
# this script produces off-by-one output on sparc64
use integer;

sub obj_cmp
	{
	local(@@a,@@b,$_,$r);

	$A=$obj_len{$obj{$nid{$a}}};
	$B=$obj_len{$obj{$nid{$b}}};

	$r=($A-$B);
	return($r) if $r != 0;

	$A=$obj_der{$obj{$nid{$a}}};
	$B=$obj_der{$obj{$nid{$b}}};

	return($A cmp $B);
	}

sub expand_obj
	{
	local(*v)=@@_;
	local($k,$d);
	local($i);

	do	{
		$i=0;
		foreach $k (keys %v)
			{
			if (($v{$k} =~ s/(OBJ_[^,]+),/$v{$1},/))
				{ $i++; }
			}
		} while($i);
	foreach $k (keys %v)
		{
		@@a=split(/,/,$v{$k});
		$objn{$k}=$#a+1;
		}
	return(%objn);
	}

open (IN,"$ARGV[0]") || die "Can't open input file $ARGV[0]";
open (OUT,">$ARGV[1]") || die "Can't open output file $ARGV[1]";

while (<IN>)
	{
	next unless /^\#define\s+(\S+)\s+(.*)$/;
	$v=$1;
	$d=$2;
	$d =~ s/^\"//;
	$d =~ s/\"$//;
	if ($v =~ /^SN_(.*)$/)
		{
		if(defined $snames{$d})
			{
			print "WARNING: Duplicate short name \"$d\"\n";
			}
		else 
			{ $snames{$d} = "X"; }
		$sn{$1}=$d;
		}
	elsif ($v =~ /^LN_(.*)$/)
		{
		if(defined $lnames{$d})
			{
			print "WARNING: Duplicate long name \"$d\"\n";
			}
		else 
			{ $lnames{$d} = "X"; }
		$ln{$1}=$d;
		}
	elsif ($v =~ /^NID_(.*)$/)
		{ $nid{$d}=$1; }
	elsif ($v =~ /^OBJ_(.*)$/)
		{
		$obj{$1}=$v;
		$objd{$v}=$d;
		}
	}
close IN;

%ob=&expand_obj(*objd);

@@a=sort { $a <=> $b } keys %nid;
$n=$a[$#a]+1;

@@lvalues=();
$lvalues=0;

for ($i=0; $i<$n; $i++)
	{
	if (!defined($nid{$i}))
		{
		push(@@out,"{NULL,NULL,NID_undef,0,NULL,0},\n");
		}
	else
		{
		$sn=defined($sn{$nid{$i}})?"$sn{$nid{$i}}":"NULL";
		$ln=defined($ln{$nid{$i}})?"$ln{$nid{$i}}":"NULL";

		if ($sn eq "NULL") {
			$sn=$ln;
			$sn{$nid{$i}} = $ln;
		}

		if ($ln eq "NULL") {
			$ln=$sn;
			$ln{$nid{$i}} = $sn;
		}
			
		$out ="{";
		$out.="\"$sn\"";
		$out.=","."\"$ln\"";
		$out.=",NID_$nid{$i},";
		if (defined($obj{$nid{$i}}) && $objd{$obj{$nid{$i}}} =~ /,/)
			{
			$v=$objd{$obj{$nid{$i}}};
			$v =~ s/L//g;
			$v =~ s/,/ /g;
			$r=&der_it($v);
			$z="";
			$length=0;
			foreach (unpack("C*",$r))
				{
				$z.=sprintf("0x%02X,",$_);
				$length++;
				}
			$obj_der{$obj{$nid{$i}}}=$z;
			$obj_len{$obj{$nid{$i}}}=$length;

			push(@@lvalues,sprintf("%-45s/* [%3d] %s */\n",
				$z,$lvalues,$obj{$nid{$i}}));
			$out.="$length,&(lvalues[$lvalues]),0";
			$lvalues+=$length;
			}
		else
			{
			$out.="0,NULL,0";
			}
		$out.="},\n";
		push(@@out,$out);
		}
	}

@@a=grep(defined($sn{$nid{$_}}),0 .. $n);
foreach (sort { $sn{$nid{$a}} cmp $sn{$nid{$b}} } @@a)
	{
	push(@@sn,sprintf("%2d,\t/* \"$sn{$nid{$_}}\" */\n",$_));
	}

@@a=grep(defined($ln{$nid{$_}}),0 .. $n);
foreach (sort { $ln{$nid{$a}} cmp $ln{$nid{$b}} } @@a)
	{
	push(@@ln,sprintf("%2d,\t/* \"$ln{$nid{$_}}\" */\n",$_));
	}

@@a=grep(defined($obj{$nid{$_}}),0 .. $n);
foreach (sort obj_cmp @@a)
	{
	$m=$obj{$nid{$_}};
	$v=$objd{$m};
	$v =~ s/L//g;
	$v =~ s/,/ /g;
	push(@@ob,sprintf("%2d,\t/* %-32s %s */\n",$_,$m,$v));
	}

print OUT <<'EOF';
/* crypto/objects/obj_dat.h */

/* THIS FILE IS GENERATED FROM objects.h by obj_dat.pl via the
 * following command:
 * perl obj_dat.pl obj_mac.h obj_dat.h
 */

/* Copyright (C) 1995-1997 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

EOF

printf OUT "#define NUM_NID %d\n",$n;
printf OUT "#define NUM_SN %d\n",$#sn+1;
printf OUT "#define NUM_LN %d\n",$#ln+1;
printf OUT "#define NUM_OBJ %d\n\n",$#ob+1;

printf OUT "static const unsigned char lvalues[%d]={\n",$lvalues+1;
print OUT @@lvalues;
print OUT "};\n\n";

printf OUT "static const ASN1_OBJECT nid_objs[NUM_NID]={\n";
foreach (@@out)
	{
	if (length($_) > 75)
		{
		$out="";
		foreach (split(/,/))
			{
			$t=$out.$_.",";
			if (length($t) > 70)
				{
				print OUT "$out\n";
				$t="\t$_,";
				}
			$out=$t;
			}
		chop $out;
		print OUT "$out";
		}
	else
		{ print OUT $_; }
	}
print  OUT "};\n\n";

printf OUT "static const unsigned int sn_objs[NUM_SN]={\n";
print  OUT @@sn;
print  OUT "};\n\n";

printf OUT "static const unsigned int ln_objs[NUM_LN]={\n";
print  OUT @@ln;
print  OUT "};\n\n";

printf OUT "static const unsigned int obj_objs[NUM_OBJ]={\n";
print  OUT @@ob;
print  OUT "};\n\n";

close OUT;

sub der_it
	{
	local($v)=@@_;
	local(@@a,$i,$ret,@@r);

	@@a=split(/\s+/,$v);
	$ret.=pack("C*",$a[0]*40+$a[1]);
	shift @@a;
	shift @@a;
	foreach (@@a)
		{
		@@r=();
		$t=0;
		while ($_ >= 128)
			{
			$x=$_%128;
			$_/=128;
			push(@@r,((($t++)?0x80:0)|$x));
			}
		push(@@r,((($t++)?0x80:0)|$_));
		$ret.=pack("C*",reverse(@@r));
		}
	return($ret);
	}
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d118 1
a118 1
		if (defined($obj{$nid{$i}}))
@


1.9
log
@resolve conflicts
@
text
@d5 1
a5 3
eval 'use integer;';

print STDERR "Warning: perl module integer not found.\n" if ($@@);
d151 1
a151 1
	push(@@sn,sprintf("&(nid_objs[%2d]),/* \"$sn{$nid{$_}}\" */\n",$_));
d157 1
a157 1
	push(@@ln,sprintf("&(nid_objs[%2d]),/* \"$ln{$nid{$_}}\" */\n",$_));
d167 1
a167 1
	push(@@ob,sprintf("&(nid_objs[%2d]),/* %-32s %s */\n",$_,$m,$v));
d242 1
a242 1
printf OUT "static unsigned char lvalues[%d]={\n",$lvalues+1;
d246 1
a246 1
printf OUT "static ASN1_OBJECT nid_objs[NUM_NID]={\n";
d270 1
a270 1
printf OUT "static ASN1_OBJECT *sn_objs[NUM_SN]={\n";
d274 1
a274 1
printf OUT "static ASN1_OBJECT *ln_objs[NUM_LN]={\n";
d278 1
a278 1
printf OUT "static ASN1_OBJECT *obj_objs[NUM_OBJ]={\n";
@


1.8
log
@resolve conflicts
@
text
@d5 3
a7 1
use integer;
@


1.7
log
@merge with 0.9.7-beta1
@
text
@d97 1
a97 1
		push(@@out,"{NULL,NULL,NID_undef,0,NULL},\n");
d141 1
a141 1
			$out.="0,NULL";
@


1.6
log
@After much horrible and painful slogging through asn1 code,
this fixes the source of connection problems with ssl/tls connections
between sparc64 and other things.

The punchline, we just found a bug in floating point emulation
on sparc64 when this script produces off-by-one output on sparc64.

This fix is annoyingly easy for the effort expended.
@
text
@d2 3
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d2 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d167 7
a173 1
/* lib/obj/obj_dat.h */
a228 5
 */

/* THIS FILE IS GENERATED FROM Objects.h by obj_dat.pl via the
 * following command:
 * perl obj_dat.pl objects.h obj_dat.h
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d49 2
d52 9
a60 1
		{ $sn{$1}=$d; }
d62 9
a70 1
		{ $ln{$1}=$d; }
d99 11
a109 2
		$sn=$ln if ($sn eq "NULL");
		$ln=$sn if ($ln eq "NULL");
d111 2
a112 2
		$out.=$sn;
		$out.=",".$ln;
d147 1
a147 1
	push(@@sn,sprintf("&(nid_objs[%2d]),/* $sn{$nid{$_}} */\n",$_));
d153 1
a153 1
	push(@@ln,sprintf("&(nid_objs[%2d]),/* $ln{$nid{$_}} */\n",$_));
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d41 4
a44 1
while (<>)
d61 1
d139 1
a139 1
print <<'EOF';
d200 1
a200 1
 * perl obj_dat.pl < objects.h > obj_dat.h
d205 8
a212 8
printf "#define NUM_NID %d\n",$n;
printf "#define NUM_SN %d\n",$#sn+1;
printf "#define NUM_LN %d\n",$#ln+1;
printf "#define NUM_OBJ %d\n\n",$#ob+1;

printf "static unsigned char lvalues[%d]={\n",$lvalues+1;
print @@lvalues;
print "};\n\n";
d214 1
a214 1
printf "static ASN1_OBJECT nid_objs[NUM_NID]={\n";
d225 1
a225 1
				print "$out\n";
d231 1
a231 1
		print "$out";
d234 1
a234 1
		{ print $_; }
d236 5
a240 1
print  "};\n\n";
d242 3
a244 3
printf "static ASN1_OBJECT *sn_objs[NUM_SN]={\n";
print  @@sn;
print  "};\n\n";
d246 3
a248 3
printf "static ASN1_OBJECT *ln_objs[NUM_LN]={\n";
print  @@ln;
print  "};\n\n";
d250 1
a250 3
printf "static ASN1_OBJECT *obj_objs[NUM_OBJ]={\n";
print  @@ob;
print  "};\n\n";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#!/usr/bin/perl
d255 1
a255 1
	while ($_=shift(@@a))
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d1 1
a1 1
#!/usr/local/bin/perl
d41 1
a41 4
open (IN,"$ARGV[0]") || die "Can't open input file $ARGV[0]";
open (OUT,">$ARGV[1]") || die "Can't open output file $ARGV[1]";

while (<IN>)
a45 2
	$d =~ s/^\"//;
	$d =~ s/\"$//;
d47 1
a47 9
		{
		if(defined $snames{$d})
			{
			print "WARNING: Duplicate short name \"$d\"\n";
			}
		else 
			{ $snames{$d} = "X"; }
		$sn{$1}=$d;
		}
d49 1
a49 9
		{
		if(defined $lnames{$d})
			{
			print "WARNING: Duplicate long name \"$d\"\n";
			}
		else 
			{ $lnames{$d} = "X"; }
		$ln{$1}=$d;
		}
a57 1
close IN;
d77 2
a78 11

		if ($sn eq "NULL") {
			$sn=$ln;
			$sn{$nid{$i}} = $ln;
		}

		if ($ln eq "NULL") {
			$ln=$sn;
			$ln{$nid{$i}} = $sn;
		}
			
d80 2
a81 2
		$out.="\"$sn\"";
		$out.=","."\"$ln\"";
d116 1
a116 1
	push(@@sn,sprintf("&(nid_objs[%2d]),/* \"$sn{$nid{$_}}\" */\n",$_));
d122 1
a122 1
	push(@@ln,sprintf("&(nid_objs[%2d]),/* \"$ln{$nid{$_}}\" */\n",$_));
d135 2
a136 8
print OUT <<'EOF';
/* crypto/objects/obj_dat.h */

/* THIS FILE IS GENERATED FROM objects.h by obj_dat.pl via the
 * following command:
 * perl obj_dat.pl obj_mac.h obj_dat.h
 */

d194 5
d201 8
a208 8
printf OUT "#define NUM_NID %d\n",$n;
printf OUT "#define NUM_SN %d\n",$#sn+1;
printf OUT "#define NUM_LN %d\n",$#ln+1;
printf OUT "#define NUM_OBJ %d\n\n",$#ob+1;

printf OUT "static unsigned char lvalues[%d]={\n",$lvalues+1;
print OUT @@lvalues;
print OUT "};\n\n";
d210 1
a210 1
printf OUT "static ASN1_OBJECT nid_objs[NUM_NID]={\n";
d221 1
a221 1
				print OUT "$out\n";
d227 1
a227 1
		print OUT "$out";
d230 1
a230 1
		{ print OUT $_; }
d232 1
a232 5
print  OUT "};\n\n";

printf OUT "static ASN1_OBJECT *sn_objs[NUM_SN]={\n";
print  OUT @@sn;
print  OUT "};\n\n";
d234 3
a236 3
printf OUT "static ASN1_OBJECT *ln_objs[NUM_LN]={\n";
print  OUT @@ln;
print  OUT "};\n\n";
d238 3
a240 3
printf OUT "static ASN1_OBJECT *obj_objs[NUM_OBJ]={\n";
print  OUT @@ob;
print  OUT "};\n\n";
d242 3
a244 1
close OUT;
d255 1
a255 1
	foreach (@@a)
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@a2 4
# fixes bug in floating point emulation on sparc64 when
# this script produces off-by-one output on sparc64
use integer;

@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d97 1
a97 1
		push(@@out,"{NULL,NULL,NID_undef,0,NULL,0},\n");
d141 1
a141 1
			$out.="0,NULL,0";
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d5 1
a5 3
eval 'use integer;';

print STDERR "Warning: perl module integer not found.\n" if ($@@);
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d5 3
a7 1
use integer;
d153 1
a153 1
	push(@@sn,sprintf("%2d,\t/* \"$sn{$nid{$_}}\" */\n",$_));
d159 1
a159 1
	push(@@ln,sprintf("%2d,\t/* \"$ln{$nid{$_}}\" */\n",$_));
d169 1
a169 1
	push(@@ob,sprintf("%2d,\t/* %-32s %s */\n",$_,$m,$v));
d244 1
a244 1
printf OUT "static const unsigned char lvalues[%d]={\n",$lvalues+1;
d248 1
a248 1
printf OUT "static const ASN1_OBJECT nid_objs[NUM_NID]={\n";
d272 1
a272 1
printf OUT "static const unsigned int sn_objs[NUM_SN]={\n";
d276 1
a276 1
printf OUT "static const unsigned int ln_objs[NUM_LN]={\n";
d280 1
a280 1
printf OUT "static const unsigned int obj_objs[NUM_OBJ]={\n";
@


