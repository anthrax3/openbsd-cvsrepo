head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.10;
commitid	kT0fLt3r4lroFJra;

1.10
date	2015.02.13.00.46.03;	author beck;	state Exp;
branches;
next	1.9;
commitid	noi8F18wdY6x5sBZ;

1.9
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.8;
commitid	G74O1dmRukKsW7IJ;

1.8
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.05.06.03.56.27;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.18;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ecp_mont.c,v 1.10 2015/02/13 00:46:03 beck Exp $ */
/*
 * Originally written by Bodo Moeller for the OpenSSL project.
 */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * Portions of this software developed by SUN MICROSYSTEMS, INC.,
 * and contributed to the OpenSSL project.
 */

#include <openssl/err.h>

#include "ec_lcl.h"


const EC_METHOD *
EC_GFp_mont_method(void)
{
	static const EC_METHOD ret = {
		.flags = EC_FLAGS_DEFAULT_OCT,
		.field_type = NID_X9_62_prime_field,
		.group_init = ec_GFp_mont_group_init,
		.group_finish = ec_GFp_mont_group_finish,
		.group_clear_finish = ec_GFp_mont_group_clear_finish,
		.group_copy = ec_GFp_mont_group_copy,
		.group_set_curve = ec_GFp_mont_group_set_curve,
		.group_get_curve = ec_GFp_simple_group_get_curve,
		.group_get_degree = ec_GFp_simple_group_get_degree,
		.group_check_discriminant =
		ec_GFp_simple_group_check_discriminant,
		.point_init = ec_GFp_simple_point_init,
		.point_finish = ec_GFp_simple_point_finish,
		.point_clear_finish = ec_GFp_simple_point_clear_finish,
		.point_copy = ec_GFp_simple_point_copy,
		.point_set_to_infinity = ec_GFp_simple_point_set_to_infinity,
		.point_set_Jprojective_coordinates_GFp =
		ec_GFp_simple_set_Jprojective_coordinates_GFp,
		.point_get_Jprojective_coordinates_GFp =
		ec_GFp_simple_get_Jprojective_coordinates_GFp,
		.point_set_affine_coordinates =
		ec_GFp_simple_point_set_affine_coordinates,
		.point_get_affine_coordinates =
		ec_GFp_simple_point_get_affine_coordinates,
		.add = ec_GFp_simple_add,
		.dbl = ec_GFp_simple_dbl,
		.invert = ec_GFp_simple_invert,
		.is_at_infinity = ec_GFp_simple_is_at_infinity,
		.is_on_curve = ec_GFp_simple_is_on_curve,
		.point_cmp = ec_GFp_simple_cmp,
		.make_affine = ec_GFp_simple_make_affine,
		.points_make_affine = ec_GFp_simple_points_make_affine,
		.field_mul = ec_GFp_mont_field_mul,
		.field_sqr = ec_GFp_mont_field_sqr,
		.field_encode = ec_GFp_mont_field_encode,
		.field_decode = ec_GFp_mont_field_decode,
		.field_set_to_one = ec_GFp_mont_field_set_to_one
	};

	return &ret;
}


int 
ec_GFp_mont_group_init(EC_GROUP * group)
{
	int ok;

	ok = ec_GFp_simple_group_init(group);
	group->field_data1 = NULL;
	group->field_data2 = NULL;
	return ok;
}


void 
ec_GFp_mont_group_finish(EC_GROUP * group)
{
	BN_MONT_CTX_free(group->field_data1);
	group->field_data1 = NULL;
	BN_free(group->field_data2);
	group->field_data2 = NULL;
	ec_GFp_simple_group_finish(group);
}


void 
ec_GFp_mont_group_clear_finish(EC_GROUP * group)
{
	BN_MONT_CTX_free(group->field_data1);
	group->field_data1 = NULL;
	BN_clear_free(group->field_data2);
	group->field_data2 = NULL;
	ec_GFp_simple_group_clear_finish(group);
}


int 
ec_GFp_mont_group_copy(EC_GROUP * dest, const EC_GROUP * src)
{
	BN_MONT_CTX_free(dest->field_data1);
	dest->field_data1 = NULL;
	BN_clear_free(dest->field_data2);
	dest->field_data2 = NULL;

	if (!ec_GFp_simple_group_copy(dest, src))
		return 0;

	if (src->field_data1 != NULL) {
		dest->field_data1 = BN_MONT_CTX_new();
		if (dest->field_data1 == NULL)
			return 0;
		if (!BN_MONT_CTX_copy(dest->field_data1, src->field_data1))
			goto err;
	}
	if (src->field_data2 != NULL) {
		dest->field_data2 = BN_dup(src->field_data2);
		if (dest->field_data2 == NULL)
			goto err;
	}
	return 1;

err:
	if (dest->field_data1 != NULL) {
		BN_MONT_CTX_free(dest->field_data1);
		dest->field_data1 = NULL;
	}
	return 0;
}


int 
ec_GFp_mont_group_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
    const BIGNUM *b, BN_CTX *ctx)
{
	BN_CTX *new_ctx = NULL;
	BN_MONT_CTX *mont = NULL;
	BIGNUM *one = NULL;
	int ret = 0;

	BN_MONT_CTX_free(group->field_data1);
	group->field_data1 = NULL;
	BN_free(group->field_data2);
	group->field_data2 = NULL;
	if (ctx == NULL) {
		ctx = new_ctx = BN_CTX_new();
		if (ctx == NULL)
			return 0;
	}
	mont = BN_MONT_CTX_new();
	if (mont == NULL)
		goto err;
	if (!BN_MONT_CTX_set(mont, p, ctx)) {
		ECerror(ERR_R_BN_LIB);
		goto err;
	}
	one = BN_new();
	if (one == NULL)
		goto err;
	if (!BN_to_montgomery(one, BN_value_one(), mont, ctx))
		goto err;

	group->field_data1 = mont;
	mont = NULL;
	group->field_data2 = one;
	one = NULL;

	ret = ec_GFp_simple_group_set_curve(group, p, a, b, ctx);

	if (!ret) {
		BN_MONT_CTX_free(group->field_data1);
		group->field_data1 = NULL;
		BN_free(group->field_data2);
		group->field_data2 = NULL;
	}
err:
	BN_CTX_free(new_ctx);
	BN_MONT_CTX_free(mont);
	BN_free(one);
	return ret;
}


int 
ec_GFp_mont_field_mul(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a,
    const BIGNUM *b, BN_CTX *ctx)
{
	if (group->field_data1 == NULL) {
		ECerror(EC_R_NOT_INITIALIZED);
		return 0;
	}
	return BN_mod_mul_montgomery(r, a, b, group->field_data1, ctx);
}


int 
ec_GFp_mont_field_sqr(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a,
    BN_CTX *ctx)
{
	if (group->field_data1 == NULL) {
		ECerror(EC_R_NOT_INITIALIZED);
		return 0;
	}
	return BN_mod_mul_montgomery(r, a, a, group->field_data1, ctx);
}


int 
ec_GFp_mont_field_encode(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a,
    BN_CTX *ctx)
{
	if (group->field_data1 == NULL) {
		ECerror(EC_R_NOT_INITIALIZED);
		return 0;
	}
	return BN_to_montgomery(r, a, (BN_MONT_CTX *) group->field_data1, ctx);
}


int 
ec_GFp_mont_field_decode(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a,
    BN_CTX *ctx)
{
	if (group->field_data1 == NULL) {
		ECerror(EC_R_NOT_INITIALIZED);
		return 0;
	}
	return BN_from_montgomery(r, a, group->field_data1, ctx);
}


int 
ec_GFp_mont_field_set_to_one(const EC_GROUP *group, BIGNUM *r, BN_CTX *ctx)
{
	if (group->field_data2 == NULL) {
		ECerror(EC_R_NOT_INITIALIZED);
		return 0;
	}
	if (!BN_copy(r, group->field_data2))
		return 0;
	return 1;
}
@


1.10
log
@fix leaking of bn, coverity issue 105351
ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: ecp_mont.c,v 1.9 2014/07/12 16:03:37 miod Exp $ */
d206 1
a206 1
		ECerr(EC_F_EC_GFP_MONT_GROUP_SET_CURVE, ERR_R_BN_LIB);
d241 1
a241 1
		ECerr(EC_F_EC_GFP_MONT_FIELD_MUL, EC_R_NOT_INITIALIZED);
d253 1
a253 1
		ECerr(EC_F_EC_GFP_MONT_FIELD_SQR, EC_R_NOT_INITIALIZED);
d265 1
a265 1
		ECerr(EC_F_EC_GFP_MONT_FIELD_ENCODE, EC_R_NOT_INITIALIZED);
d277 1
a277 1
		ECerr(EC_F_EC_GFP_MONT_FIELD_DECODE, EC_R_NOT_INITIALIZED);
d288 1
a288 1
		ECerr(EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE, EC_R_NOT_INITIALIZED);
@


1.9
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ecp_mont.c,v 1.8 2014/06/12 15:49:29 deraadt Exp $ */
d231 1
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d131 4
a134 8
	if (group->field_data1 != NULL) {
		BN_MONT_CTX_free(group->field_data1);
		group->field_data1 = NULL;
	}
	if (group->field_data2 != NULL) {
		BN_free(group->field_data2);
		group->field_data2 = NULL;
	}
d142 4
a145 8
	if (group->field_data1 != NULL) {
		BN_MONT_CTX_free(group->field_data1);
		group->field_data1 = NULL;
	}
	if (group->field_data2 != NULL) {
		BN_clear_free(group->field_data2);
		group->field_data2 = NULL;
	}
d153 5
a157 8
	if (dest->field_data1 != NULL) {
		BN_MONT_CTX_free(dest->field_data1);
		dest->field_data1 = NULL;
	}
	if (dest->field_data2 != NULL) {
		BN_clear_free(dest->field_data2);
		dest->field_data2 = NULL;
	}
d193 4
a196 8
	if (group->field_data1 != NULL) {
		BN_MONT_CTX_free(group->field_data1);
		group->field_data1 = NULL;
	}
	if (group->field_data2 != NULL) {
		BN_free(group->field_data2);
		group->field_data2 = NULL;
	}
d229 2
a230 4
	if (new_ctx != NULL)
		BN_CTX_free(new_ctx);
	if (mont != NULL)
		BN_MONT_CTX_free(mont);
@


1.7
log
@knf approximation
@
text
@d1 1
a1 1
/* crypto/ec/ecp_mont.c */
@


1.6
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d83 1
a83 1
		    ec_GFp_simple_group_check_discriminant,
d90 1
a90 1
		    ec_GFp_simple_set_Jprojective_coordinates_GFp,
d92 1
a92 1
		    ec_GFp_simple_get_Jprojective_coordinates_GFp,
d94 1
a94 1
		    ec_GFp_simple_point_set_affine_coordinates,
d96 1
a96 1
		    ec_GFp_simple_point_get_affine_coordinates,
d116 3
a118 2
int ec_GFp_mont_group_init(EC_GROUP *group)
	{
d125 1
a125 1
	}
d128 4
a131 4
void ec_GFp_mont_group_finish(EC_GROUP *group)
	{
	if (group->field_data1 != NULL)
		{
d134 2
a135 3
		}
	if (group->field_data2 != NULL)
		{
d138 1
a138 1
		}
d140 1
a140 1
	}
d143 4
a146 4
void ec_GFp_mont_group_clear_finish(EC_GROUP *group)
	{
	if (group->field_data1 != NULL)
		{
d149 2
a150 3
		}
	if (group->field_data2 != NULL)
		{
d153 1
a153 1
		}
d155 1
a155 1
	}
d158 4
a161 4
int ec_GFp_mont_group_copy(EC_GROUP *dest, const EC_GROUP *src)
	{
	if (dest->field_data1 != NULL)
		{
d164 2
a165 3
		}
	if (dest->field_data2 != NULL)
		{
d168 3
a170 1
		}
d172 1
a172 4
	if (!ec_GFp_simple_group_copy(dest, src)) return 0;

	if (src->field_data1 != NULL)
		{
d174 6
a179 5
		if (dest->field_data1 == NULL) return 0;
		if (!BN_MONT_CTX_copy(dest->field_data1, src->field_data1)) goto err;
		}
	if (src->field_data2 != NULL)
		{
d181 3
a183 3
		if (dest->field_data2 == NULL) goto err;
		}

d186 2
a187 3
 err:
	if (dest->field_data1 != NULL)
		{
a189 2
		}
	return 0;	
d191 2
d195 4
a198 2
int ec_GFp_mont_group_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
	{
d204 1
a204 2
	if (group->field_data1 != NULL)
		{
d207 2
a208 3
		}
	if (group->field_data2 != NULL)
		{
d211 2
a212 4
		}
	
	if (ctx == NULL)
		{
d216 1
a216 2
		}

d218 3
a220 3
	if (mont == NULL) goto err;
	if (!BN_MONT_CTX_set(mont, p, ctx))
		{
d223 1
a223 1
		}
d225 4
a228 2
	if (one == NULL) goto err;
	if (!BN_to_montgomery(one, BN_value_one(), mont, ctx)) goto err;
d237 1
a237 2
	if (!ret)
		{
d242 2
a243 3
		}

 err:
d249 1
a249 1
	}
d252 5
a256 4
int ec_GFp_mont_field_mul(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
	{
	if (group->field_data1 == NULL)
		{
d259 1
a259 2
		}

d261 1
a261 1
	}
d264 5
a268 4
int ec_GFp_mont_field_sqr(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
	{
	if (group->field_data1 == NULL)
		{
d271 1
a271 2
		}

d273 1
a273 1
	}
d276 5
a280 4
int ec_GFp_mont_field_encode(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
	{
	if (group->field_data1 == NULL)
		{
a282 3
		}

	return BN_to_montgomery(r, a, (BN_MONT_CTX *)group->field_data1, ctx);
d284 2
d288 5
a292 4
int ec_GFp_mont_field_decode(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
	{
	if (group->field_data1 == NULL)
		{
d295 1
a295 2
		}

d297 1
a297 1
	}
d300 4
a303 4
int ec_GFp_mont_field_set_to_one(const EC_GROUP *group, BIGNUM *r, BN_CTX *ctx)
	{
	if (group->field_data2 == NULL)
		{
d306 3
a308 3
		}

	if (!BN_copy(r, group->field_data2)) return 0;
d310 1
a310 1
	}
@


1.5
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d69 3
a71 2
const EC_METHOD *EC_GFp_mont_method(void)
	{
d73 38
a110 37
		EC_FLAGS_DEFAULT_OCT,
		NID_X9_62_prime_field,
		ec_GFp_mont_group_init,
		ec_GFp_mont_group_finish,
		ec_GFp_mont_group_clear_finish,
		ec_GFp_mont_group_copy,
		ec_GFp_mont_group_set_curve,
		ec_GFp_simple_group_get_curve,
		ec_GFp_simple_group_get_degree,
		ec_GFp_simple_group_check_discriminant,
		ec_GFp_simple_point_init,
		ec_GFp_simple_point_finish,
		ec_GFp_simple_point_clear_finish,
		ec_GFp_simple_point_copy,
		ec_GFp_simple_point_set_to_infinity,
		ec_GFp_simple_set_Jprojective_coordinates_GFp,
		ec_GFp_simple_get_Jprojective_coordinates_GFp,
		ec_GFp_simple_point_set_affine_coordinates,
		ec_GFp_simple_point_get_affine_coordinates,
		0,0,0,
		ec_GFp_simple_add,
		ec_GFp_simple_dbl,
		ec_GFp_simple_invert,
		ec_GFp_simple_is_at_infinity,
		ec_GFp_simple_is_on_curve,
		ec_GFp_simple_cmp,
		ec_GFp_simple_make_affine,
		ec_GFp_simple_points_make_affine,
		0 /* mul */,
		0 /* precompute_mult */,
		0 /* have_precompute_mult */,	
		ec_GFp_mont_field_mul,
		ec_GFp_mont_field_sqr,
		0 /* field_div */,
		ec_GFp_mont_field_encode,
		ec_GFp_mont_field_decode,
		ec_GFp_mont_field_set_to_one };
d113 1
a113 1
	}
@


1.4
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a65 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a70 3
#ifdef OPENSSL_FIPS
	return fips_ec_gfp_mont_method();
#else
a110 1
#endif
@


1.3
log
@resolve conflicts
@
text
@a116 1

@


1.2
log
@resolve conflicts
@
text
@d66 4
d75 3
d79 1
d98 1
a98 3
		ec_GFp_simple_set_compressed_coordinates,
		ec_GFp_simple_point2oct,
		ec_GFp_simple_oct2point,
d117 1
d119 1
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d2 3
d58 5
d72 1
d77 4
a80 6
		ec_GFp_mont_group_set_curve_GFp,
		ec_GFp_simple_group_get_curve_GFp,
		ec_GFp_simple_group_set_generator,
		ec_GFp_simple_group_get0_generator,
		ec_GFp_simple_group_get_order,
		ec_GFp_simple_group_get_cofactor,
d88 3
a90 3
		ec_GFp_simple_point_set_affine_coordinates_GFp,
		ec_GFp_simple_point_get_affine_coordinates_GFp,
		ec_GFp_simple_set_compressed_coordinates_GFp,
d101 3
d106 1
a125 60
int ec_GFp_mont_group_set_curve_GFp(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
	{
	BN_CTX *new_ctx = NULL;
	BN_MONT_CTX *mont = NULL;
	BIGNUM *one = NULL;
	int ret = 0;

	if (group->field_data1 != NULL)
		{
		BN_MONT_CTX_free(group->field_data1);
		group->field_data1 = NULL;
		}
	if (group->field_data2 != NULL)
		{
		BN_free(group->field_data2);
		group->field_data2 = NULL;
		}
	
	if (ctx == NULL)
		{
		ctx = new_ctx = BN_CTX_new();
		if (ctx == NULL)
			return 0;
		}

	mont = BN_MONT_CTX_new();
	if (mont == NULL) goto err;
	if (!BN_MONT_CTX_set(mont, p, ctx))
		{
		ECerr(EC_F_GFP_MONT_GROUP_SET_CURVE_GFP, ERR_R_BN_LIB);
		goto err;
		}
	one = BN_new();
	if (one == NULL) goto err;
	if (!BN_to_montgomery(one, BN_value_one(), mont, ctx)) goto err;

	group->field_data1 = mont;
	mont = NULL;
	group->field_data2 = one;
	one = NULL;

	ret = ec_GFp_simple_group_set_curve_GFp(group, p, a, b, ctx);

	if (!ret)
		{
		BN_MONT_CTX_free(group->field_data1);
		group->field_data1 = NULL;
		BN_free(group->field_data2);
		group->field_data2 = NULL;
		}

 err:
	if (new_ctx != NULL)
		BN_CTX_free(new_ctx);
	if (mont != NULL)
		BN_MONT_CTX_free(mont);
	return ret;
	}


d197 60
d309 1
a309 1
		ECerr(EC_F_EC_GFP_MONT_FIELD_DECODE, EC_R_NOT_INITIALIZED);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@a1 3
/*
 * Originally written by Bodo Moeller for the OpenSSL project.
 */
a54 5
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * Portions of this software developed by SUN MICROSYSTEMS, INC.,
 * and contributed to the OpenSSL project.
 */
a63 1
		NID_X9_62_prime_field,
d68 6
a73 4
		ec_GFp_mont_group_set_curve,
		ec_GFp_simple_group_get_curve,
		ec_GFp_simple_group_get_degree,
		ec_GFp_simple_group_check_discriminant,
d81 3
a83 3
		ec_GFp_simple_point_set_affine_coordinates,
		ec_GFp_simple_point_get_affine_coordinates,
		ec_GFp_simple_set_compressed_coordinates,
a93 3
		0 /* mul */,
		0 /* precompute_mult */,
		0 /* have_precompute_mult */,	
a95 1
		0 /* field_div */,
d115 60
a245 60
int ec_GFp_mont_group_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
	{
	BN_CTX *new_ctx = NULL;
	BN_MONT_CTX *mont = NULL;
	BIGNUM *one = NULL;
	int ret = 0;

	if (group->field_data1 != NULL)
		{
		BN_MONT_CTX_free(group->field_data1);
		group->field_data1 = NULL;
		}
	if (group->field_data2 != NULL)
		{
		BN_free(group->field_data2);
		group->field_data2 = NULL;
		}
	
	if (ctx == NULL)
		{
		ctx = new_ctx = BN_CTX_new();
		if (ctx == NULL)
			return 0;
		}

	mont = BN_MONT_CTX_new();
	if (mont == NULL) goto err;
	if (!BN_MONT_CTX_set(mont, p, ctx))
		{
		ECerr(EC_F_EC_GFP_MONT_GROUP_SET_CURVE, ERR_R_BN_LIB);
		goto err;
		}
	one = BN_new();
	if (one == NULL) goto err;
	if (!BN_to_montgomery(one, BN_value_one(), mont, ctx)) goto err;

	group->field_data1 = mont;
	mont = NULL;
	group->field_data2 = one;
	one = NULL;

	ret = ec_GFp_simple_group_set_curve(group, p, a, b, ctx);

	if (!ret)
		{
		BN_MONT_CTX_free(group->field_data1);
		group->field_data1 = NULL;
		BN_free(group->field_data2);
		group->field_data2 = NULL;
		}

 err:
	if (new_ctx != NULL)
		BN_CTX_free(new_ctx);
	if (mont != NULL)
		BN_MONT_CTX_free(mont);
	return ret;
	}


d298 1
a298 1
		ECerr(EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE, EC_R_NOT_INITIALIZED);
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@a65 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a70 3
#ifdef OPENSSL_FIPS
	return fips_ec_gfp_mont_method();
#else
a71 1
		EC_FLAGS_DEFAULT_OCT,
d90 3
a92 1
		0,0,0,
a110 1

a111 1
#endif
@


1.1.1.4
log
@Import OpenSSL 1.0.1g
@
text
@d117 1
@


