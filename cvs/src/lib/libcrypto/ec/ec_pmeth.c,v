head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.9;
commitid	kT0fLt3r4lroFJra;

1.9
date	2015.06.20.14.19.39;	author jsing;	state Exp;
branches;
next	1.8;
commitid	rZgUKYCM0sbfSBm5;

1.8
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.7;
commitid	G74O1dmRukKsW7IJ;

1.7
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.6;
commitid	yQEL1wOWIearrW15;

1.6
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.5;
commitid	id8dTrTMtnTn4fqt;

1.5
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.06.03.56.27;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ec_pmeth.c,v 1.9 2015/06/20 14:19:39 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1t.h>
#include <openssl/ec.h>
#include <openssl/ecdsa.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/x509.h>

#include "evp_locl.h"

/* EC pkey context structure */

typedef struct {
	/* Key and paramgen group */
	EC_GROUP *gen_group;
	/* message digest */
	const EVP_MD *md;
} EC_PKEY_CTX;

static int 
pkey_ec_init(EVP_PKEY_CTX * ctx)
{
	EC_PKEY_CTX *dctx;
	dctx = malloc(sizeof(EC_PKEY_CTX));
	if (!dctx)
		return 0;
	dctx->gen_group = NULL;
	dctx->md = NULL;

	ctx->data = dctx;

	return 1;
}

static int 
pkey_ec_copy(EVP_PKEY_CTX * dst, EVP_PKEY_CTX * src)
{
	EC_PKEY_CTX *dctx, *sctx;
	if (!pkey_ec_init(dst))
		return 0;
	sctx = src->data;
	dctx = dst->data;
	if (sctx->gen_group) {
		dctx->gen_group = EC_GROUP_dup(sctx->gen_group);
		if (!dctx->gen_group)
			return 0;
	}
	dctx->md = sctx->md;
	return 1;
}

static void 
pkey_ec_cleanup(EVP_PKEY_CTX * ctx)
{
	EC_PKEY_CTX *dctx = ctx->data;
	if (dctx) {
		EC_GROUP_free(dctx->gen_group);
		free(dctx);
	}
}

static int 
pkey_ec_sign(EVP_PKEY_CTX * ctx, unsigned char *sig, size_t * siglen,
    const unsigned char *tbs, size_t tbslen)
{
	int ret, type;
	unsigned int sltmp;
	EC_PKEY_CTX *dctx = ctx->data;
	EC_KEY *ec = ctx->pkey->pkey.ec;

	if (!sig) {
		*siglen = ECDSA_size(ec);
		return 1;
	} else if (*siglen < (size_t) ECDSA_size(ec)) {
		ECerror(EC_R_BUFFER_TOO_SMALL);
		return 0;
	}
	if (dctx->md)
		type = EVP_MD_type(dctx->md);
	else
		type = NID_sha1;


	ret = ECDSA_sign(type, tbs, tbslen, sig, &sltmp, ec);

	if (ret <= 0)
		return ret;
	*siglen = (size_t) sltmp;
	return 1;
}

static int 
pkey_ec_verify(EVP_PKEY_CTX * ctx,
    const unsigned char *sig, size_t siglen,
    const unsigned char *tbs, size_t tbslen)
{
	int ret, type;
	EC_PKEY_CTX *dctx = ctx->data;
	EC_KEY *ec = ctx->pkey->pkey.ec;

	if (dctx->md)
		type = EVP_MD_type(dctx->md);
	else
		type = NID_sha1;

	ret = ECDSA_verify(type, tbs, tbslen, sig, siglen, ec);

	return ret;
}

static int 
pkey_ec_derive(EVP_PKEY_CTX * ctx, unsigned char *key, size_t * keylen)
{
	int ret;
	size_t outlen;
	const EC_POINT *pubkey = NULL;
	if (!ctx->pkey || !ctx->peerkey) {
		ECerror(EC_R_KEYS_NOT_SET);
		return 0;
	}
	if (!key) {
		const EC_GROUP *group;
		group = EC_KEY_get0_group(ctx->pkey->pkey.ec);
		*keylen = (EC_GROUP_get_degree(group) + 7) / 8;
		return 1;
	}
	pubkey = EC_KEY_get0_public_key(ctx->peerkey->pkey.ec);

	/*
	 * NB: unlike PKCS#3 DH, if *outlen is less than maximum size this is
	 * not an error, the result is truncated.
	 */

	outlen = *keylen;

	ret = ECDH_compute_key(key, outlen, pubkey, ctx->pkey->pkey.ec, 0);
	if (ret < 0)
		return ret;
	*keylen = ret;
	return 1;
}

static int 
pkey_ec_ctrl(EVP_PKEY_CTX * ctx, int type, int p1, void *p2)
{
	EC_PKEY_CTX *dctx = ctx->data;
	EC_GROUP *group;
	switch (type) {
	case EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID:
		group = EC_GROUP_new_by_curve_name(p1);
		if (group == NULL) {
			ECerror(EC_R_INVALID_CURVE);
			return 0;
		}
		EC_GROUP_free(dctx->gen_group);
		dctx->gen_group = group;
		return 1;

	case EVP_PKEY_CTRL_MD:
		if (EVP_MD_type((const EVP_MD *) p2) != NID_sha1 &&
		    EVP_MD_type((const EVP_MD *) p2) != NID_ecdsa_with_SHA1 &&
		    EVP_MD_type((const EVP_MD *) p2) != NID_sha224 &&
		    EVP_MD_type((const EVP_MD *) p2) != NID_sha256 &&
		    EVP_MD_type((const EVP_MD *) p2) != NID_sha384 &&
		    EVP_MD_type((const EVP_MD *) p2) != NID_sha512) {
			ECerror(EC_R_INVALID_DIGEST_TYPE);
			return 0;
		}
		dctx->md = p2;
		return 1;

	case EVP_PKEY_CTRL_PEER_KEY:
		/* Default behaviour is OK */
	case EVP_PKEY_CTRL_DIGESTINIT:
	case EVP_PKEY_CTRL_PKCS7_SIGN:
	case EVP_PKEY_CTRL_CMS_SIGN:
		return 1;

	default:
		return -2;

	}
}

static int 
pkey_ec_ctrl_str(EVP_PKEY_CTX * ctx,
    const char *type, const char *value)
{
	if (!strcmp(type, "ec_paramgen_curve")) {
		int nid;
		nid = EC_curve_nist2nid(value);
		if (nid == NID_undef)
			nid = OBJ_sn2nid(value);
		if (nid == NID_undef)
			nid = OBJ_ln2nid(value);
		if (nid == NID_undef) {
			ECerror(EC_R_INVALID_CURVE);
			return 0;
		}
		return EVP_PKEY_CTX_set_ec_paramgen_curve_nid(ctx, nid);
	}
	return -2;
}

static int 
pkey_ec_paramgen(EVP_PKEY_CTX * ctx, EVP_PKEY * pkey)
{
	EC_KEY *ec = NULL;
	EC_PKEY_CTX *dctx = ctx->data;
	int ret = 0;
	if (dctx->gen_group == NULL) {
		ECerror(EC_R_NO_PARAMETERS_SET);
		return 0;
	}
	ec = EC_KEY_new();
	if (!ec)
		return 0;
	ret = EC_KEY_set_group(ec, dctx->gen_group);
	if (ret)
		EVP_PKEY_assign_EC_KEY(pkey, ec);
	else
		EC_KEY_free(ec);
	return ret;
}

static int 
pkey_ec_keygen(EVP_PKEY_CTX * ctx, EVP_PKEY * pkey)
{
	EC_KEY *ec = NULL;
	if (ctx->pkey == NULL) {
		ECerror(EC_R_NO_PARAMETERS_SET);
		return 0;
	}
	ec = EC_KEY_new();
	if (!ec)
		return 0;
	EVP_PKEY_assign_EC_KEY(pkey, ec);
	/* Note: if error return, pkey is freed by parent routine */
	if (!EVP_PKEY_copy_parameters(pkey, ctx->pkey))
		return 0;
	return EC_KEY_generate_key(pkey->pkey.ec);
}

const EVP_PKEY_METHOD ec_pkey_meth = {
	.pkey_id = EVP_PKEY_EC,

	.init = pkey_ec_init,
	.copy = pkey_ec_copy,
	.cleanup = pkey_ec_cleanup,

	.paramgen = pkey_ec_paramgen,

	.keygen = pkey_ec_keygen,

	.sign = pkey_ec_sign,

	.verify = pkey_ec_verify,

	.derive = pkey_ec_derive,

	.ctrl = pkey_ec_ctrl,
	.ctrl_str = pkey_ec_ctrl_str
};
@


1.9
log
@Handle NIST curve names.

From OpenSSL.

ok miod@@ (a while ago)
@
text
@d1 1
a1 1
/* $OpenBSD: ec_pmeth.c,v 1.8 2014/07/12 16:03:37 miod Exp $ */
d135 1
a135 1
		ECerr(EC_F_PKEY_EC_SIGN, EC_R_BUFFER_TOO_SMALL);
d178 1
a178 1
		ECerr(EC_F_PKEY_EC_DERIVE, EC_R_KEYS_NOT_SET);
d212 1
a212 1
			ECerr(EC_F_PKEY_EC_CTRL, EC_R_INVALID_CURVE);
d226 1
a226 1
			ECerr(EC_F_PKEY_EC_CTRL, EC_R_INVALID_DIGEST_TYPE);
d257 1
a257 1
			ECerr(EC_F_PKEY_EC_CTRL_STR, EC_R_INVALID_CURVE);
d272 1
a272 1
		ECerr(EC_F_PKEY_EC_PARAMGEN, EC_R_NO_PARAMETERS_SET);
d291 1
a291 1
		ECerr(EC_F_PKEY_EC_KEYGEN, EC_R_NO_PARAMETERS_SET);
@


1.8
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_pmeth.c,v 1.7 2014/07/11 08:44:48 jsing Exp $ */
d251 3
a253 1
		nid = OBJ_sn2nid(value);
@


1.7
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_pmeth.c,v 1.6 2014/07/10 13:58:22 jsing Exp $ */
d117 1
a117 2
		if (dctx->gen_group)
			EC_GROUP_free(dctx->gen_group);
d215 1
a215 2
		if (dctx->gen_group)
			EC_GROUP_free(dctx->gen_group);
@


1.6
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_pmeth.c,v 1.5 2014/06/12 15:49:29 deraadt Exp $ */
a61 1
#include "cryptlib.h"
a62 1
#include <openssl/x509.h>
d65 1
d67 2
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.4
log
@knf approximation
@
text
@d1 1
@


1.3
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d69 1
a69 2
typedef struct
	{
d74 1
a74 1
	} EC_PKEY_CTX;
d76 3
a78 2
static int pkey_ec_init(EVP_PKEY_CTX *ctx)
	{
d89 1
a89 1
	}
d91 3
a93 2
static int pkey_ec_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
	{
d97 1
a97 1
       	sctx = src->data;
d99 1
a99 2
	if (sctx->gen_group)
		{
d103 1
a103 1
		}
d106 1
a106 1
	}
d108 3
a110 2
static void pkey_ec_cleanup(EVP_PKEY_CTX *ctx)
	{
d112 1
a112 2
	if (dctx)
		{
a115 1
		}
d117 1
d119 4
a122 3
static int pkey_ec_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
					const unsigned char *tbs, size_t tbslen)
	{
d128 1
a128 2
	if (!sig)
		{
d131 1
a131 3
		}
	else if(*siglen < (size_t)ECDSA_size(ec))
		{
d134 1
a134 2
		}

d145 1
a145 1
	*siglen = (size_t)sltmp;
d147 1
a147 1
	}
d149 5
a153 4
static int pkey_ec_verify(EVP_PKEY_CTX *ctx,
					const unsigned char *sig, size_t siglen,
					const unsigned char *tbs, size_t tbslen)
	{
d166 1
a166 1
	}
d168 3
a170 2
static int pkey_ec_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)
	{
d174 1
a174 2
	if (!ctx->pkey || !ctx->peerkey)
		{
d177 2
a178 4
		}

	if (!key)
		{
d181 1
a181 1
		*keylen = (EC_GROUP_get_degree(group) + 7)/8;
d183 1
a183 2
		}

d186 2
a187 1
	/* NB: unlike PKCS#3 DH, if *outlen is less than maximum size this is
d192 1
a192 1
		
d198 1
a198 1
	}
d200 3
a202 2
static int pkey_ec_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
	{
d205 2
a206 3
	switch (type)
		{
		case EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID:
d208 1
a208 2
		if (group == NULL)
			{
d211 1
a211 1
			}
d217 7
a223 8
		case EVP_PKEY_CTRL_MD:
		if (EVP_MD_type((const EVP_MD *)p2) != NID_sha1 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_ecdsa_with_SHA1 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha224 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha256 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha384 &&
		    EVP_MD_type((const EVP_MD *)p2) != NID_sha512)
			{
d226 1
a226 1
			}
d230 1
a230 1
		case EVP_PKEY_CTRL_PEER_KEY:
d232 3
a234 3
		case EVP_PKEY_CTRL_DIGESTINIT:
		case EVP_PKEY_CTRL_PKCS7_SIGN:
		case EVP_PKEY_CTRL_CMS_SIGN:
d237 1
a237 1
		default:
a239 1
		}
d241 7
a247 6
			
static int pkey_ec_ctrl_str(EVP_PKEY_CTX *ctx,
			const char *type, const char *value)
	{
	if (!strcmp(type, "ec_paramgen_curve"))
		{
d252 1
a252 2
		if (nid == NID_undef)
			{
d255 1
a255 1
			}
d257 1
a257 1
		}
d259 1
a259 1
	}
d261 3
a263 2
static int pkey_ec_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
	{
d267 1
a267 2
	if (dctx->gen_group == NULL)
		{
d270 1
a270 1
		}
d280 1
a280 1
	}
d282 3
a284 2
static int pkey_ec_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
	{
d286 1
a286 2
	if (ctx->pkey == NULL)
		{
d289 1
a289 1
		}
d298 1
a298 1
	}
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d307 2
a308 7
const EVP_PKEY_METHOD ec_pkey_meth = 
	{
	EVP_PKEY_EC,
	0,
	pkey_ec_init,
	pkey_ec_copy,
	pkey_ec_cleanup,
d310 3
a312 2
	0,
	pkey_ec_paramgen,
d314 1
a314 2
	0,
	pkey_ec_keygen,
d316 1
a316 2
	0,
	pkey_ec_sign,
d318 1
a318 2
	0,
	pkey_ec_verify,
d320 1
a320 1
	0,0,
d322 1
a322 1
	0,0,0,0,
d324 3
a326 11
	0,0,

	0,0,

	0,
	pkey_ec_derive,

	pkey_ec_ctrl,
	pkey_ec_ctrl_str

	};
@


1.1
log
@Initial revision
@
text
@d80 1
a80 1
	dctx = OPENSSL_malloc(sizeof(EC_PKEY_CTX));
d115 1
a115 1
		OPENSSL_free(dctx);
d191 1
a191 1
	/* NB: unlike PKS#3 DH, if *outlen is less than maximum size this is
d224 1
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@a223 1
		    EVP_MD_type((const EVP_MD *)p2) != NID_ecdsa_with_SHA1 &&
@


1.1.1.3
log
@Import OpenSSL 1.0.1g
@
text
@d191 1
a191 1
	/* NB: unlike PKCS#3 DH, if *outlen is less than maximum size this is
@


