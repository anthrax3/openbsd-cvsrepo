head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.5;
commitid	kT0fLt3r4lroFJra;

1.5
date	2015.02.08.22.25.03;	author miod;	state Exp;
branches;
next	1.4;
commitid	QrqYr2yKPjNFCI1S;

1.4
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.3;
commitid	G74O1dmRukKsW7IJ;

1.3
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	mJUVYpkFBZ0Zv2bG;

1.2
date	2014.05.06.03.56.27;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ec_check.c,v 1.5 2015/02/08 22:25:03 miod Exp $ */
/* ====================================================================
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include "ec_lcl.h"
#include <openssl/err.h>

int 
EC_GROUP_check(const EC_GROUP * group, BN_CTX * ctx)
{
	int ret = 0;
	BIGNUM *order;
	BN_CTX *new_ctx = NULL;
	EC_POINT *point = NULL;

	if (ctx == NULL) {
		ctx = new_ctx = BN_CTX_new();
		if (ctx == NULL) {
			ECerror(ERR_R_MALLOC_FAILURE);
			goto err;
		}
	}
	BN_CTX_start(ctx);
	if ((order = BN_CTX_get(ctx)) == NULL)
		goto err;

	/* check the discriminant */
	if (!EC_GROUP_check_discriminant(group, ctx)) {
		ECerror(EC_R_DISCRIMINANT_IS_ZERO);
		goto err;
	}
	/* check the generator */
	if (group->generator == NULL) {
		ECerror(EC_R_UNDEFINED_GENERATOR);
		goto err;
	}
	if (EC_POINT_is_on_curve(group, group->generator, ctx) <= 0) {
		ECerror(EC_R_POINT_IS_NOT_ON_CURVE);
		goto err;
	}
	/* check the order of the generator */
	if ((point = EC_POINT_new(group)) == NULL)
		goto err;
	if (!EC_GROUP_get_order(group, order, ctx))
		goto err;
	if (BN_is_zero(order)) {
		ECerror(EC_R_UNDEFINED_ORDER);
		goto err;
	}
	if (!EC_POINT_mul(group, point, order, NULL, NULL, ctx))
		goto err;
	if (EC_POINT_is_at_infinity(group, point) <= 0) {
		ECerror(EC_R_INVALID_GROUP_ORDER);
		goto err;
	}
	ret = 1;

err:
	if (ctx != NULL)
		BN_CTX_end(ctx);
	BN_CTX_free(new_ctx);
	EC_POINT_free(point);
	return ret;
}
@


1.5
log
@Use `> 0' instead of `!= 0' as a successful condition for
EC_POINT_is_at_infinity() and EC_POINT_is_on_curve(), for they may return -1
should an error arise.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_check.c,v 1.4 2014/07/12 16:03:37 miod Exp $ */
d70 1
a70 1
			ECerr(EC_F_EC_GROUP_CHECK, ERR_R_MALLOC_FAILURE);
d80 1
a80 1
		ECerr(EC_F_EC_GROUP_CHECK, EC_R_DISCRIMINANT_IS_ZERO);
d85 1
a85 1
		ECerr(EC_F_EC_GROUP_CHECK, EC_R_UNDEFINED_GENERATOR);
d89 1
a89 1
		ECerr(EC_F_EC_GROUP_CHECK, EC_R_POINT_IS_NOT_ON_CURVE);
d98 1
a98 1
		ECerr(EC_F_EC_GROUP_CHECK, EC_R_UNDEFINED_ORDER);
d104 1
a104 1
		ECerr(EC_F_EC_GROUP_CHECK, EC_R_INVALID_GROUP_ORDER);
@


1.4
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_check.c,v 1.3 2014/06/12 15:49:29 deraadt Exp $ */
d88 1
a88 1
	if (!EC_POINT_is_on_curve(group, group->generator, ctx)) {
d103 1
a103 1
	if (!EC_POINT_is_at_infinity(group, point)) {
@


1.3
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d112 2
a113 4
	if (new_ctx != NULL)
		BN_CTX_free(new_ctx);
	if (point)
		EC_POINT_free(point);
@


1.2
log
@knf approximation
@
text
@d1 1
a1 1
/* crypto/ec/ec_check.c */
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d59 3
a61 2
int EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx)
	{
d67 1
a67 2
	if (ctx == NULL)
		{
d69 1
a69 2
		if (ctx == NULL)
			{
a71 1
			}
d73 1
d75 2
a76 1
	if ((order = BN_CTX_get(ctx)) == NULL) goto err;
d79 1
a79 2
	if (!EC_GROUP_check_discriminant(group, ctx))
		{
d82 1
a82 2
		}

d84 1
a84 2
	if (group->generator == NULL)
		{
d87 2
a88 3
		}
	if (!EC_POINT_is_on_curve(group, group->generator, ctx))
		{
d91 1
a91 2
		}

d93 5
a97 4
	if ((point = EC_POINT_new(group)) == NULL) goto err;
	if (!EC_GROUP_get_order(group, order, ctx)) goto err; 
	if (BN_is_zero(order))
		{
d100 4
a103 5
		}
	
	if (!EC_POINT_mul(group, point, order, NULL, NULL, ctx)) goto err;
	if (!EC_POINT_is_at_infinity(group, point))
		{
d106 1
a106 2
		}

d117 1
a117 1
	}
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@
