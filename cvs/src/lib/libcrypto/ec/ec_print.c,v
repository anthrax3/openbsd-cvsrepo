head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7;
locks; strict;
comment	@ * @;


1.7
date	2014.12.03.19.53.20;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	6UxzsIn0JB6mDRG8;

1.6
date	2014.12.03.19.45.16;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	LaqlDi4Wnz5hexMi;

1.5
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	2nvnQBrv22dLtvTt;

1.3
date	2014.05.06.03.56.27;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@handle the (impossible) situation of a size_t - 1 buffer from
EC_POINT_point2oct so that later allocation does not overflow
with miod
@
text
@/* $OpenBSD: ec_print.c,v 1.6 2014/12/03 19:45:16 deraadt Exp $ */
/* ====================================================================
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/crypto.h>
#include "ec_lcl.h"

BIGNUM *
EC_POINT_point2bn(const EC_GROUP * group, const EC_POINT * point,
    point_conversion_form_t form, BIGNUM * ret, BN_CTX * ctx)
{
	size_t buf_len = 0;
	unsigned char *buf;

	buf_len = EC_POINT_point2oct(group, point, form,
	    NULL, 0, ctx);
	if (buf_len == 0)
		return NULL;

	if ((buf = malloc(buf_len)) == NULL)
		return NULL;

	if (!EC_POINT_point2oct(group, point, form, buf, buf_len, ctx)) {
		free(buf);
		return NULL;
	}
	ret = BN_bin2bn(buf, buf_len, ret);

	free(buf);

	return ret;
}

EC_POINT *
EC_POINT_bn2point(const EC_GROUP * group,
    const BIGNUM * bn, EC_POINT * point, BN_CTX * ctx)
{
	size_t buf_len = 0;
	unsigned char *buf;
	EC_POINT *ret;

	if ((buf_len = BN_num_bytes(bn)) == 0)
		return NULL;
	buf = malloc(buf_len);
	if (buf == NULL)
		return NULL;

	if (!BN_bn2bin(bn, buf)) {
		free(buf);
		return NULL;
	}
	if (point == NULL) {
		if ((ret = EC_POINT_new(group)) == NULL) {
			free(buf);
			return NULL;
		}
	} else
		ret = point;

	if (!EC_POINT_oct2point(group, ret, buf, buf_len, ctx)) {
		if (point == NULL)
			EC_POINT_clear_free(ret);
		free(buf);
		return NULL;
	}
	free(buf);
	return ret;
}

static const char *HEX_DIGITS = "0123456789ABCDEF";

/* the return value must be freed (using free()) */
char *
EC_POINT_point2hex(const EC_GROUP * group, const EC_POINT * point,
    point_conversion_form_t form, BN_CTX * ctx)
{
	char *ret, *p;
	size_t buf_len = 0, i;
	unsigned char *buf, *pbuf;

	buf_len = EC_POINT_point2oct(group, point, form,
	    NULL, 0, ctx);
	if (buf_len == 0 || buf_len + 1 == 0)
		return NULL;

	if ((buf = malloc(buf_len)) == NULL)
		return NULL;

	if (!EC_POINT_point2oct(group, point, form, buf, buf_len, ctx)) {
		free(buf);
		return NULL;
	}
	ret = reallocarray(NULL, buf_len + 1, 2);
	if (ret == NULL) {
		free(buf);
		return NULL;
	}
	p = ret;
	pbuf = buf;
	for (i = buf_len; i > 0; i--) {
		int v = (int) *(pbuf++);
		*(p++) = HEX_DIGITS[v >> 4];
		*(p++) = HEX_DIGITS[v & 0x0F];
	}
	*p = '\0';

	free(buf);

	return ret;
}

EC_POINT *
EC_POINT_hex2point(const EC_GROUP * group, const char *buf,
    EC_POINT * point, BN_CTX * ctx)
{
	EC_POINT *ret = NULL;
	BIGNUM *tmp_bn = NULL;

	if (!BN_hex2bn(&tmp_bn, buf))
		return NULL;

	ret = EC_POINT_bn2point(group, tmp_bn, point, ctx);

	BN_clear_free(tmp_bn);

	return ret;
}
@


1.6
log
@Spotted another opportunity to use reallocarray().
ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: ec_print.c,v 1.5 2014/06/12 15:49:29 deraadt Exp $ */
d134 1
a134 1
	if (buf_len == 0)
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d144 1
a144 1
	ret = malloc(buf_len * 2 + 2);
@


1.4
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/ec/ec_print.c */
@


1.3
log
@knf approximation
@
text
@d144 1
a144 1
	ret = (char *) malloc(buf_len * 2 + 2);
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d59 5
a63 7
BIGNUM *EC_POINT_point2bn(const EC_GROUP *group, 
                          const EC_POINT *point, 
                          point_conversion_form_t form,
                          BIGNUM *ret,
                          BN_CTX *ctx)
	{
	size_t        buf_len=0;
d67 1
a67 1
                                     NULL, 0, ctx);
d74 1
a74 2
	if (!EC_POINT_point2oct(group, point, form, buf, buf_len, ctx))
		{
d77 1
a77 2
		}

d85 5
a89 6
EC_POINT *EC_POINT_bn2point(const EC_GROUP *group,
                            const BIGNUM *bn,
                            EC_POINT *point, 
                            BN_CTX *ctx)
	{
	size_t        buf_len=0;
d91 1
a91 1
	EC_POINT      *ret;
d93 2
a94 1
	if ((buf_len = BN_num_bytes(bn)) == 0) return NULL;
d99 1
a99 2
	if (!BN_bn2bin(bn, buf)) 
		{
d102 3
a104 6
		}

	if (point == NULL)
		{
		if ((ret = EC_POINT_new(group)) == NULL)
			{
a106 1
			}
d108 1
a108 1
	else
d111 1
a111 2
	if (!EC_POINT_oct2point(group, ret, buf, buf_len, ctx))
		{
d116 1
a116 2
		}

d119 1
a119 1
	}
d124 6
a129 7
char *EC_POINT_point2hex(const EC_GROUP *group,
                         const EC_POINT *point,
                         point_conversion_form_t form,
                         BN_CTX *ctx)
	{
	char          *ret, *p;
	size_t        buf_len=0,i;
d133 1
a133 1
                                     NULL, 0, ctx);
d140 1
a140 2
	if (!EC_POINT_point2oct(group, point, form, buf, buf_len, ctx))
		{
d143 3
a145 5
		}

	ret = (char *)malloc(buf_len*2+2);
	if (ret == NULL)
		{
d148 1
a148 1
		}
d151 6
a156 7
	for (i=buf_len; i > 0; i--)
		{
			int v = (int) *(pbuf++);
			*(p++)=HEX_DIGITS[v>>4];
			*(p++)=HEX_DIGITS[v&0x0F];
		}
	*p='\0';
d161 1
a161 1
	}
d163 6
a168 7
EC_POINT *EC_POINT_hex2point(const EC_GROUP *group,
                             const char *buf,
                             EC_POINT *point,
                             BN_CTX *ctx)
	{
	EC_POINT *ret=NULL;
	BIGNUM   *tmp_bn=NULL;
d178 1
a178 1
	}
@


1.1
log
@Initial revision
@
text
@d73 1
a73 1
	if ((buf = OPENSSL_malloc(buf_len)) == NULL)
d78 1
a78 1
		OPENSSL_free(buf);
d84 1
a84 1
	OPENSSL_free(buf);
d99 1
a99 1
	buf = OPENSSL_malloc(buf_len);
d105 1
a105 1
		OPENSSL_free(buf);
d113 1
a113 1
			OPENSSL_free(buf);
d124 1
a124 1
		OPENSSL_free(buf);
d128 1
a128 1
	OPENSSL_free(buf);
d134 1
a134 1
/* the return value must be freed (using OPENSSL_free()) */
d149 1
a149 1
	if ((buf = OPENSSL_malloc(buf_len)) == NULL)
d154 1
a154 1
		OPENSSL_free(buf);
d158 1
a158 1
	ret = (char *)OPENSSL_malloc(buf_len*2+2);
d161 1
a161 1
		OPENSSL_free(buf);
d174 1
a174 1
	OPENSSL_free(buf);
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@
