head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.11;
commitid	kT0fLt3r4lroFJra;

1.11
date	2015.06.20.14.17.07;	author jsing;	state Exp;
branches;
next	1.10;
commitid	sZtYbreWe4FVwdOu;

1.10
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.9;
commitid	G74O1dmRukKsW7IJ;

1.9
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.7;
commitid	nzndm3zqPmFurSaK;

1.7
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.6;
commitid	id8dTrTMtnTn4fqt;

1.6
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.06.03.56.27;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.06;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: eck_prn.c,v 1.11 2015/06/20 14:17:07 jsing Exp $ */
/*
 * Written by Nils Larsch for the OpenSSL project.
 */
/* ====================================================================
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * Portions originally developed by SUN MICROSYSTEMS, INC., and
 * contributed to the OpenSSL project.
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/bn.h>
#include <openssl/ec.h>
#include <openssl/err.h>
#include <openssl/evp.h>

int 
ECPKParameters_print_fp(FILE * fp, const EC_GROUP * x, int off)
{
	BIO *b;
	int ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		ECerror(ERR_R_BUF_LIB);
		return (0);
	}
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = ECPKParameters_print(b, x, off);
	BIO_free(b);
	return (ret);
}

int 
EC_KEY_print_fp(FILE * fp, const EC_KEY * x, int off)
{
	BIO *b;
	int ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		ECerror(ERR_R_BIO_LIB);
		return (0);
	}
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = EC_KEY_print(b, x, off);
	BIO_free(b);
	return (ret);
}

int 
ECParameters_print_fp(FILE * fp, const EC_KEY * x)
{
	BIO *b;
	int ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		ECerror(ERR_R_BIO_LIB);
		return (0);
	}
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = ECParameters_print(b, x);
	BIO_free(b);
	return (ret);
}

int 
EC_KEY_print(BIO * bp, const EC_KEY * x, int off)
{
	EVP_PKEY *pk;
	int ret;
	pk = EVP_PKEY_new();
	if (!pk || !EVP_PKEY_set1_EC_KEY(pk, (EC_KEY *) x))
		return 0;
	ret = EVP_PKEY_print_private(bp, pk, off, NULL);
	EVP_PKEY_free(pk);
	return ret;
}

int 
ECParameters_print(BIO * bp, const EC_KEY * x)
{
	EVP_PKEY *pk;
	int ret;
	pk = EVP_PKEY_new();
	if (!pk || !EVP_PKEY_set1_EC_KEY(pk, (EC_KEY *) x))
		return 0;
	ret = EVP_PKEY_print_params(bp, pk, 4, NULL);
	EVP_PKEY_free(pk);
	return ret;
}

static int 
print_bin(BIO * fp, const char *str, const unsigned char *num,
    size_t len, int off);

int 
ECPKParameters_print(BIO * bp, const EC_GROUP * x, int off)
{
	unsigned char *buffer = NULL;
	size_t buf_len = 0, i;
	int ret = 0, reason = ERR_R_BIO_LIB;
	BN_CTX *ctx = NULL;
	const EC_POINT *point = NULL;
	BIGNUM *p = NULL, *a = NULL, *b = NULL, *gen = NULL, *order = NULL,
	*cofactor = NULL;
	const unsigned char *seed;
	size_t seed_len = 0;
	const char *nname;

	static const char *gen_compressed = "Generator (compressed):";
	static const char *gen_uncompressed = "Generator (uncompressed):";
	static const char *gen_hybrid = "Generator (hybrid):";

	if (!x) {
		reason = ERR_R_PASSED_NULL_PARAMETER;
		goto err;
	}
	ctx = BN_CTX_new();
	if (ctx == NULL) {
		reason = ERR_R_MALLOC_FAILURE;
		goto err;
	}
	if (EC_GROUP_get_asn1_flag(x)) {
		/* the curve parameter are given by an asn1 OID */
		int nid;

		if (!BIO_indent(bp, off, 128))
			goto err;

		nid = EC_GROUP_get_curve_name(x);
		if (nid == 0)
			goto err;

		if (BIO_printf(bp, "ASN1 OID: %s", OBJ_nid2sn(nid)) <= 0)
			goto err;
		if (BIO_printf(bp, "\n") <= 0)
			goto err;

		nname = EC_curve_nid2nist(nid);
		if (nname) {
			if (!BIO_indent(bp, off, 128))
				goto err;
			if (BIO_printf(bp, "NIST CURVE: %s\n", nname) <= 0)
				goto err;
		}
	} else {
		/* explicit parameters */
		int is_char_two = 0;
		point_conversion_form_t form;
		int tmp_nid = EC_METHOD_get_field_type(EC_GROUP_method_of(x));

		if (tmp_nid == NID_X9_62_characteristic_two_field)
			is_char_two = 1;

		if ((p = BN_new()) == NULL || (a = BN_new()) == NULL ||
		    (b = BN_new()) == NULL || (order = BN_new()) == NULL ||
		    (cofactor = BN_new()) == NULL) {
			reason = ERR_R_MALLOC_FAILURE;
			goto err;
		}
#ifndef OPENSSL_NO_EC2M
		if (is_char_two) {
			if (!EC_GROUP_get_curve_GF2m(x, p, a, b, ctx)) {
				reason = ERR_R_EC_LIB;
				goto err;
			}
		} else		/* prime field */
#endif
		{
			if (!EC_GROUP_get_curve_GFp(x, p, a, b, ctx)) {
				reason = ERR_R_EC_LIB;
				goto err;
			}
		}

		if ((point = EC_GROUP_get0_generator(x)) == NULL) {
			reason = ERR_R_EC_LIB;
			goto err;
		}
		if (!EC_GROUP_get_order(x, order, NULL) ||
		    !EC_GROUP_get_cofactor(x, cofactor, NULL)) {
			reason = ERR_R_EC_LIB;
			goto err;
		}
		form = EC_GROUP_get_point_conversion_form(x);

		if ((gen = EC_POINT_point2bn(x, point,
			    form, NULL, ctx)) == NULL) {
			reason = ERR_R_EC_LIB;
			goto err;
		}
		buf_len = (size_t) BN_num_bytes(p);
		if (buf_len < (i = (size_t) BN_num_bytes(a)))
			buf_len = i;
		if (buf_len < (i = (size_t) BN_num_bytes(b)))
			buf_len = i;
		if (buf_len < (i = (size_t) BN_num_bytes(gen)))
			buf_len = i;
		if (buf_len < (i = (size_t) BN_num_bytes(order)))
			buf_len = i;
		if (buf_len < (i = (size_t) BN_num_bytes(cofactor)))
			buf_len = i;

		if ((seed = EC_GROUP_get0_seed(x)) != NULL)
			seed_len = EC_GROUP_get_seed_len(x);

		buf_len += 10;
		if ((buffer = malloc(buf_len)) == NULL) {
			reason = ERR_R_MALLOC_FAILURE;
			goto err;
		}
		if (!BIO_indent(bp, off, 128))
			goto err;

		/* print the 'short name' of the field type */
		if (BIO_printf(bp, "Field Type: %s\n", OBJ_nid2sn(tmp_nid))
		    <= 0)
			goto err;

		if (is_char_two) {
			/* print the 'short name' of the base type OID */
			int basis_type = EC_GROUP_get_basis_type(x);
			if (basis_type == 0)
				goto err;

			if (!BIO_indent(bp, off, 128))
				goto err;

			if (BIO_printf(bp, "Basis Type: %s\n",
				OBJ_nid2sn(basis_type)) <= 0)
				goto err;

			/* print the polynomial */
			if ((p != NULL) && !ASN1_bn_print(bp, "Polynomial:", p, buffer,
				off))
				goto err;
		} else {
			if ((p != NULL) && !ASN1_bn_print(bp, "Prime:", p, buffer, off))
				goto err;
		}
		if ((a != NULL) && !ASN1_bn_print(bp, "A:   ", a, buffer, off))
			goto err;
		if ((b != NULL) && !ASN1_bn_print(bp, "B:   ", b, buffer, off))
			goto err;
		if (form == POINT_CONVERSION_COMPRESSED) {
			if ((gen != NULL) && !ASN1_bn_print(bp, gen_compressed, gen,
				buffer, off))
				goto err;
		} else if (form == POINT_CONVERSION_UNCOMPRESSED) {
			if ((gen != NULL) && !ASN1_bn_print(bp, gen_uncompressed, gen,
				buffer, off))
				goto err;
		} else {	/* form == POINT_CONVERSION_HYBRID */
			if ((gen != NULL) && !ASN1_bn_print(bp, gen_hybrid, gen,
				buffer, off))
				goto err;
		}
		if ((order != NULL) && !ASN1_bn_print(bp, "Order: ", order,
			buffer, off))
			goto err;
		if ((cofactor != NULL) && !ASN1_bn_print(bp, "Cofactor: ", cofactor,
			buffer, off))
			goto err;
		if (seed && !print_bin(bp, "Seed:", seed, seed_len, off))
			goto err;
	}
	ret = 1;
err:
	if (!ret)
		ECerror(reason);
	BN_free(p);
	BN_free(a);
	BN_free(b);
	BN_free(gen);
	BN_free(order);
	BN_free(cofactor);
	BN_CTX_free(ctx);
	free(buffer);
	return (ret);
}

static int 
print_bin(BIO * fp, const char *name, const unsigned char *buf,
    size_t len, int off)
{
	size_t i;
	char str[128];

	if (buf == NULL)
		return 1;
	if (off) {
		if (off > 128)
			off = 128;
		memset(str, ' ', off);
		if (BIO_write(fp, str, off) <= 0)
			return 0;
	}
	if (BIO_printf(fp, "%s", name) <= 0)
		return 0;

	for (i = 0; i < len; i++) {
		if ((i % 15) == 0) {
			str[0] = '\n';
			memset(&(str[1]), ' ', off + 4);
			if (BIO_write(fp, str, off + 1 + 4) <= 0)
				return 0;
		}
		if (BIO_printf(fp, "%02x%s", buf[i], ((i + 1) == len) ? "" : ":") <= 0)
			return 0;
	}
	if (BIO_write(fp, "\n", 1) <= 0)
		return 0;

	return 1;
}
@


1.11
log
@Have ECPKParameters_print() include the NIST curve name, if known.

From OpenSSL.

ok miod@@ (a while ago).
@
text
@d1 1
a1 1
/* $OpenBSD: eck_prn.c,v 1.10 2014/07/12 16:03:37 miod Exp $ */
d81 1
a81 1
		ECerr(EC_F_ECPKPARAMETERS_PRINT_FP, ERR_R_BUF_LIB);
d97 1
a97 1
		ECerr(EC_F_EC_KEY_PRINT_FP, ERR_R_BIO_LIB);
d113 1
a113 1
		ECerr(EC_F_ECPARAMETERS_PRINT_FP, ERR_R_BIO_LIB);
d326 1
a326 1
		ECerr(EC_F_ECPKPARAMETERS_PRINT, reason);
@


1.10
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: eck_prn.c,v 1.9 2014/07/11 08:44:48 jsing Exp $ */
d164 1
d194 8
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eck_prn.c,v 1.8 2014/07/10 22:45:57 jsing Exp $ */
d318 7
a324 14
	if (p)
		BN_free(p);
	if (a)
		BN_free(a);
	if (b)
		BN_free(b);
	if (gen)
		BN_free(gen);
	if (order)
		BN_free(order);
	if (cofactor)
		BN_free(cofactor);
	if (ctx)
		BN_CTX_free(ctx);
@


1.8
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: eck_prn.c,v 1.7 2014/07/10 13:58:22 jsing Exp $ */
d69 3
a71 1
#include "cryptlib.h"
a72 2
#include <openssl/ec.h>
#include <openssl/bn.h>
@


1.7
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: eck_prn.c,v 1.6 2014/06/12 15:49:29 deraadt Exp $ */
d66 2
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 2
@


1.5
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/ec/eck_prn.c */
@


1.4
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d328 1
a328 2
	if (buffer != NULL)
		free(buffer);
@


1.3
log
@knf approximation
@
text
@a69 1
#ifndef OPENSSL_NO_FP_API
a116 1
#endif
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d60 1
a60 1
 * Portions originally developed by SUN MICROSYSTEMS, INC., and 
d71 3
a73 2
int ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off)
	{
d77 4
a80 5
	if ((b=BIO_new(BIO_s_file())) == NULL)
		{
		ECerr(EC_F_ECPKPARAMETERS_PRINT_FP,ERR_R_BUF_LIB);
		return(0);
		}
d84 2
a85 2
	return(ret);
	}
d87 3
a89 2
int EC_KEY_print_fp(FILE *fp, const EC_KEY *x, int off)
	{
d92 2
a93 3
 
	if ((b=BIO_new(BIO_s_file())) == NULL)
		{
d95 2
a96 2
		return(0);
		}
d100 2
a101 2
	return(ret);
	}
d103 3
a105 2
int ECParameters_print_fp(FILE *fp, const EC_KEY *x)
	{
d108 2
a109 3
 
	if ((b=BIO_new(BIO_s_file())) == NULL)
		{
d111 2
a112 2
		return(0);
		}
d116 2
a117 2
	return(ret);
	}
d120 3
a122 2
int EC_KEY_print(BIO *bp, const EC_KEY *x, int off)
	{
d126 1
a126 1
	if (!pk || !EVP_PKEY_set1_EC_KEY(pk, (EC_KEY *)x))
d131 1
a131 1
	}
d133 3
a135 2
int ECParameters_print(BIO *bp, const EC_KEY *x)
	{
d139 1
a139 1
	if (!pk || !EVP_PKEY_set1_EC_KEY(pk, (EC_KEY *)x))
d144 1
a144 1
	}
d146 16
a161 2
static int print_bin(BIO *fp, const char *str, const unsigned char *num,
		size_t len, int off);
a162 12
int ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off)
	{
	unsigned char *buffer=NULL;
	size_t	buf_len=0, i;
	int     ret=0, reason=ERR_R_BIO_LIB;
	BN_CTX  *ctx=NULL;
	const EC_POINT *point=NULL;
	BIGNUM	*p=NULL, *a=NULL, *b=NULL, *gen=NULL,
		*order=NULL, *cofactor=NULL;
	const unsigned char *seed;
	size_t	seed_len=0;
	
d166 2
a167 3
 
	if (!x)
		{
d170 1
a170 2
		}

d172 1
a172 2
	if (ctx == NULL)
		{
d175 2
a176 4
		}

	if (EC_GROUP_get_asn1_flag(x))
		{
d191 1
a191 3
		}
	else
		{
d201 2
a202 3
			(b = BN_new()) == NULL || (order = BN_new()) == NULL ||
			(cofactor = BN_new()) == NULL)
			{
d205 1
a205 1
			}
d207 2
a208 4
		if (is_char_two)
			{
			if (!EC_GROUP_get_curve_GF2m(x, p, a, b, ctx))
				{
a210 1
				}
d212 1
a212 1
		else /* prime field */
d214 2
a215 3
			{
			if (!EC_GROUP_get_curve_GFp(x, p, a, b, ctx))
				{
a217 1
				}
d219 1
d221 1
a221 2
		if ((point = EC_GROUP_get0_generator(x)) == NULL)
			{
d224 3
a226 4
			}
		if (!EC_GROUP_get_order(x, order, NULL) || 
            		!EC_GROUP_get_cofactor(x, cofactor, NULL))
			{
d229 1
a229 2
			}
		
d232 2
a233 3
		if ((gen = EC_POINT_point2bn(x, point, 
				form, NULL, ctx)) == NULL)
			{
d236 3
a238 4
			}

		buf_len = (size_t)BN_num_bytes(p);
		if (buf_len < (i = (size_t)BN_num_bytes(a)))
d240 1
a240 1
		if (buf_len < (i = (size_t)BN_num_bytes(b)))
d242 1
a242 1
		if (buf_len < (i = (size_t)BN_num_bytes(gen)))
d244 1
a244 1
		if (buf_len < (i = (size_t)BN_num_bytes(order)))
d246 1
a246 1
		if (buf_len < (i = (size_t)BN_num_bytes(cofactor))) 
d253 1
a253 2
		if ((buffer = malloc(buf_len)) == NULL)
			{
d256 1
a256 2
			}

d262 2
a263 2
			<= 0)
			goto err;  
d265 1
a265 2
		if (is_char_two)
			{
d274 1
a274 1
			if (BIO_printf(bp, "Basis Type: %s\n", 
d282 2
a283 4
			}
		else
			{
			if ((p != NULL) && !ASN1_bn_print(bp, "Prime:", p, buffer,off))
d285 2
a286 2
			}
		if ((a != NULL) && !ASN1_bn_print(bp, "A:   ", a, buffer, off)) 
d290 1
a290 2
		if (form == POINT_CONVERSION_COMPRESSED)
			{
d294 1
a294 3
			}
		else if (form == POINT_CONVERSION_UNCOMPRESSED)
			{
d298 1
a298 3
			}
		else /* form == POINT_CONVERSION_HYBRID */
			{
d302 7
a308 5
			}
		if ((order != NULL) && !ASN1_bn_print(bp, "Order: ", order, 
			buffer, off)) goto err;
		if ((cofactor != NULL) && !ASN1_bn_print(bp, "Cofactor: ", cofactor, 
			buffer, off)) goto err;
d311 2
a312 2
		}
	ret=1;
d315 2
a316 2
 		ECerr(EC_F_ECPKPARAMETERS_PRINT, reason);
	if (p) 
d318 1
a318 1
	if (a) 
d330 1
a330 1
	if (buffer != NULL) 
d332 2
a333 2
	return(ret);	
	}
d335 4
a338 3
static int print_bin(BIO *fp, const char *name, const unsigned char *buf,
		size_t len, int off)
	{
d344 1
a344 2
	if (off)
		{
d346 2
a347 2
			off=128;
		memset(str,' ',off);
d350 2
a351 3
		}

	if (BIO_printf(fp,"%s", name) <= 0)
d354 5
a358 7
	for (i=0; i<len; i++)
		{
		if ((i%15) == 0)
			{
			str[0]='\n';
			memset(&(str[1]),' ',off+4);
			if (BIO_write(fp, str, off+1+4) <= 0)
d360 2
a361 2
			}
		if (BIO_printf(fp,"%02x%s",buf[i],((i+1) == len)?"":":") <= 0)
d363 2
a364 2
		}
	if (BIO_write(fp,"\n",1) <= 0)
d368 1
a368 1
	}
@


1.1
log
@Initial revision
@
text
@d210 1
a210 1

d220 1
d266 1
a266 1
		if ((buffer = OPENSSL_malloc(buf_len)) == NULL)
d352 1
a352 1
		OPENSSL_free(buffer);
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@d210 1
a210 1
#ifndef OPENSSL_NO_EC2M
a219 1
#endif
@

