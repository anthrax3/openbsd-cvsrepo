head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.7;
commitid	kT0fLt3r4lroFJra;

1.7
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.6;
commitid	69Tc75PIK8JcRRsC;

1.6
date	2015.02.08.22.25.03;	author miod;	state Exp;
branches;
next	1.5;
commitid	QrqYr2yKPjNFCI1S;

1.5
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.4;
commitid	G74O1dmRukKsW7IJ;

1.4
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.05.06.03.56.27;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.13.23.50.02;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ecp_oct.c,v 1.7 2015/02/09 15:49:22 jsing Exp $ */
/* Includes code written by Lenka Fibikova <fibikova@@exp-math.uni-essen.de>
 * for the OpenSSL project.
 * Includes code written by Bodo Moeller for the OpenSSL project.
*/
/* ====================================================================
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * Portions of this software developed by SUN MICROSYSTEMS, INC.,
 * and contributed to the OpenSSL project.
 */

#include <openssl/err.h>

#include "ec_lcl.h"

int 
ec_GFp_simple_set_compressed_coordinates(const EC_GROUP * group,
    EC_POINT * point, const BIGNUM * x_, int y_bit, BN_CTX * ctx)
{
	BN_CTX *new_ctx = NULL;
	BIGNUM *tmp1, *tmp2, *x, *y;
	int ret = 0;

	/* clear error queue */
	ERR_clear_error();

	if (ctx == NULL) {
		ctx = new_ctx = BN_CTX_new();
		if (ctx == NULL)
			return 0;
	}
	y_bit = (y_bit != 0);

	BN_CTX_start(ctx);
	if ((tmp1 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((tmp2 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((x = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((y = BN_CTX_get(ctx)) == NULL)
		goto err;

	/*
	 * Recover y.  We have a Weierstrass equation y^2 = x^3 + a*x + b, so
	 * y  is one of the square roots of  x^3 + a*x + b.
	 */

	/* tmp1 := x^3 */
	if (!BN_nnmod(x, x_, &group->field, ctx))
		goto err;
	if (group->meth->field_decode == 0) {
		/* field_{sqr,mul} work on standard representation */
		if (!group->meth->field_sqr(group, tmp2, x_, ctx))
			goto err;
		if (!group->meth->field_mul(group, tmp1, tmp2, x_, ctx))
			goto err;
	} else {
		if (!BN_mod_sqr(tmp2, x_, &group->field, ctx))
			goto err;
		if (!BN_mod_mul(tmp1, tmp2, x_, &group->field, ctx))
			goto err;
	}

	/* tmp1 := tmp1 + a*x */
	if (group->a_is_minus3) {
		if (!BN_mod_lshift1_quick(tmp2, x, &group->field))
			goto err;
		if (!BN_mod_add_quick(tmp2, tmp2, x, &group->field))
			goto err;
		if (!BN_mod_sub_quick(tmp1, tmp1, tmp2, &group->field))
			goto err;
	} else {
		if (group->meth->field_decode) {
			if (!group->meth->field_decode(group, tmp2, &group->a, ctx))
				goto err;
			if (!BN_mod_mul(tmp2, tmp2, x, &group->field, ctx))
				goto err;
		} else {
			/* field_mul works on standard representation */
			if (!group->meth->field_mul(group, tmp2, &group->a, x, ctx))
				goto err;
		}

		if (!BN_mod_add_quick(tmp1, tmp1, tmp2, &group->field))
			goto err;
	}

	/* tmp1 := tmp1 + b */
	if (group->meth->field_decode) {
		if (!group->meth->field_decode(group, tmp2, &group->b, ctx))
			goto err;
		if (!BN_mod_add_quick(tmp1, tmp1, tmp2, &group->field))
			goto err;
	} else {
		if (!BN_mod_add_quick(tmp1, tmp1, &group->b, &group->field))
			goto err;
	}

	if (!BN_mod_sqrt(y, tmp1, &group->field, ctx)) {
		unsigned long err = ERR_peek_last_error();

		if (ERR_GET_LIB(err) == ERR_LIB_BN && ERR_GET_REASON(err) == BN_R_NOT_A_SQUARE) {
			ERR_clear_error();
			ECerror(EC_R_INVALID_COMPRESSED_POINT);
		} else
			ECerror(ERR_R_BN_LIB);
		goto err;
	}
	if (y_bit != BN_is_odd(y)) {
		if (BN_is_zero(y)) {
			int kron;

			kron = BN_kronecker(x, &group->field, ctx);
			if (kron == -2)
				goto err;

			if (kron == 1)
				ECerror(EC_R_INVALID_COMPRESSION_BIT);
			else
				/*
				 * BN_mod_sqrt() should have cought this
				 * error (not a square)
				 */
				ECerror(EC_R_INVALID_COMPRESSED_POINT);
			goto err;
		}
		if (!BN_usub(y, &group->field, y))
			goto err;
	}
	if (y_bit != BN_is_odd(y)) {
		ECerror(ERR_R_INTERNAL_ERROR);
		goto err;
	}
	if (!EC_POINT_set_affine_coordinates_GFp(group, point, x, y, ctx))
		goto err;

	ret = 1;

err:
	BN_CTX_end(ctx);
	BN_CTX_free(new_ctx);
	return ret;
}


size_t 
ec_GFp_simple_point2oct(const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form,
    unsigned char *buf, size_t len, BN_CTX * ctx)
{
	size_t ret;
	BN_CTX *new_ctx = NULL;
	int used_ctx = 0;
	BIGNUM *x, *y;
	size_t field_len, i, skip;

	if ((form != POINT_CONVERSION_COMPRESSED)
	    && (form != POINT_CONVERSION_UNCOMPRESSED)
	    && (form != POINT_CONVERSION_HYBRID)) {
		ECerror(EC_R_INVALID_FORM);
		goto err;
	}
	if (EC_POINT_is_at_infinity(group, point) > 0) {
		/* encodes to a single 0 octet */
		if (buf != NULL) {
			if (len < 1) {
				ECerror(EC_R_BUFFER_TOO_SMALL);
				return 0;
			}
			buf[0] = 0;
		}
		return 1;
	}
	/* ret := required output buffer length */
	field_len = BN_num_bytes(&group->field);
	ret = (form == POINT_CONVERSION_COMPRESSED) ? 1 + field_len : 1 + 2 * field_len;

	/* if 'buf' is NULL, just return required length */
	if (buf != NULL) {
		if (len < ret) {
			ECerror(EC_R_BUFFER_TOO_SMALL);
			goto err;
		}
		if (ctx == NULL) {
			ctx = new_ctx = BN_CTX_new();
			if (ctx == NULL)
				return 0;
		}
		BN_CTX_start(ctx);
		used_ctx = 1;
		if ((x = BN_CTX_get(ctx)) == NULL)
			goto err;
		if ((y = BN_CTX_get(ctx)) == NULL)
			goto err;

		if (!EC_POINT_get_affine_coordinates_GFp(group, point, x, y, ctx))
			goto err;

		if ((form == POINT_CONVERSION_COMPRESSED || form == POINT_CONVERSION_HYBRID) && BN_is_odd(y))
			buf[0] = form + 1;
		else
			buf[0] = form;

		i = 1;

		skip = field_len - BN_num_bytes(x);
		if (skip > field_len) {
			ECerror(ERR_R_INTERNAL_ERROR);
			goto err;
		}
		while (skip > 0) {
			buf[i++] = 0;
			skip--;
		}
		skip = BN_bn2bin(x, buf + i);
		i += skip;
		if (i != 1 + field_len) {
			ECerror(ERR_R_INTERNAL_ERROR);
			goto err;
		}
		if (form == POINT_CONVERSION_UNCOMPRESSED || form == POINT_CONVERSION_HYBRID) {
			skip = field_len - BN_num_bytes(y);
			if (skip > field_len) {
				ECerror(ERR_R_INTERNAL_ERROR);
				goto err;
			}
			while (skip > 0) {
				buf[i++] = 0;
				skip--;
			}
			skip = BN_bn2bin(y, buf + i);
			i += skip;
		}
		if (i != ret) {
			ECerror(ERR_R_INTERNAL_ERROR);
			goto err;
		}
	}
	if (used_ctx)
		BN_CTX_end(ctx);
	BN_CTX_free(new_ctx);
	return ret;

err:
	if (used_ctx)
		BN_CTX_end(ctx);
	BN_CTX_free(new_ctx);
	return 0;
}


int 
ec_GFp_simple_oct2point(const EC_GROUP * group, EC_POINT * point,
    const unsigned char *buf, size_t len, BN_CTX * ctx)
{
	point_conversion_form_t form;
	int y_bit;
	BN_CTX *new_ctx = NULL;
	BIGNUM *x, *y;
	size_t field_len, enc_len;
	int ret = 0;

	if (len == 0) {
		ECerror(EC_R_BUFFER_TOO_SMALL);
		return 0;
	}
	form = buf[0];
	y_bit = form & 1;
	form = form & ~1U;
	if ((form != 0) && (form != POINT_CONVERSION_COMPRESSED)
	    && (form != POINT_CONVERSION_UNCOMPRESSED)
	    && (form != POINT_CONVERSION_HYBRID)) {
		ECerror(EC_R_INVALID_ENCODING);
		return 0;
	}
	if ((form == 0 || form == POINT_CONVERSION_UNCOMPRESSED) && y_bit) {
		ECerror(EC_R_INVALID_ENCODING);
		return 0;
	}
	if (form == 0) {
		if (len != 1) {
			ECerror(EC_R_INVALID_ENCODING);
			return 0;
		}
		return EC_POINT_set_to_infinity(group, point);
	}
	field_len = BN_num_bytes(&group->field);
	enc_len = (form == POINT_CONVERSION_COMPRESSED) ? 1 + field_len : 1 + 2 * field_len;

	if (len != enc_len) {
		ECerror(EC_R_INVALID_ENCODING);
		return 0;
	}
	if (ctx == NULL) {
		ctx = new_ctx = BN_CTX_new();
		if (ctx == NULL)
			return 0;
	}
	BN_CTX_start(ctx);
	if ((x = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((y = BN_CTX_get(ctx)) == NULL)
		goto err;

	if (!BN_bin2bn(buf + 1, field_len, x))
		goto err;
	if (BN_ucmp(x, &group->field) >= 0) {
		ECerror(EC_R_INVALID_ENCODING);
		goto err;
	}
	if (form == POINT_CONVERSION_COMPRESSED) {
		if (!EC_POINT_set_compressed_coordinates_GFp(group, point, x, y_bit, ctx))
			goto err;
	} else {
		if (!BN_bin2bn(buf + 1 + field_len, field_len, y))
			goto err;
		if (BN_ucmp(y, &group->field) >= 0) {
			ECerror(EC_R_INVALID_ENCODING);
			goto err;
		}
		if (form == POINT_CONVERSION_HYBRID) {
			if (y_bit != BN_is_odd(y)) {
				ECerror(EC_R_INVALID_ENCODING);
				goto err;
			}
		}
		if (!EC_POINT_set_affine_coordinates_GFp(group, point, x, y, ctx))
			goto err;
	}

	/* test required by X9.62 */
	if (EC_POINT_is_on_curve(group, point, ctx) <= 0) {
		ECerror(EC_R_POINT_IS_NOT_ON_CURVE);
		goto err;
	}
	ret = 1;

err:
	BN_CTX_end(ctx);
	BN_CTX_free(new_ctx);
	return ret;
}
@


1.7
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: ecp_oct.c,v 1.6 2015/02/08 22:25:03 miod Exp $ */
d158 1
a158 1
			ECerr(EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES, EC_R_INVALID_COMPRESSED_POINT);
d160 1
a160 1
			ECerr(EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES, ERR_R_BN_LIB);
d172 1
a172 1
				ECerr(EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES, EC_R_INVALID_COMPRESSION_BIT);
d178 1
a178 1
				ECerr(EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES, EC_R_INVALID_COMPRESSED_POINT);
d185 1
a185 1
		ECerr(EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES, ERR_R_INTERNAL_ERROR);
d213 1
a213 1
		ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, EC_R_INVALID_FORM);
d220 1
a220 1
				ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, EC_R_BUFFER_TOO_SMALL);
d234 1
a234 1
			ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, EC_R_BUFFER_TOO_SMALL);
d261 1
a261 1
			ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, ERR_R_INTERNAL_ERROR);
d271 1
a271 1
			ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, ERR_R_INTERNAL_ERROR);
d277 1
a277 1
				ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, ERR_R_INTERNAL_ERROR);
d288 1
a288 1
			ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, ERR_R_INTERNAL_ERROR);
d317 1
a317 1
		ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_BUFFER_TOO_SMALL);
d326 1
a326 1
		ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);
d330 1
a330 1
		ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);
d335 1
a335 1
			ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);
d344 1
a344 1
		ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);
d361 1
a361 1
		ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);
d371 1
a371 1
			ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);
d376 1
a376 1
				ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);
d386 1
a386 1
		ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_POINT_IS_NOT_ON_CURVE);
@


1.6
log
@Use `> 0' instead of `!= 0' as a successful condition for
EC_POINT_is_at_infinity() and EC_POINT_is_on_curve(), for they may return -1
should an error arise.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ecp_oct.c,v 1.5 2014/07/12 16:03:37 miod Exp $ */
d70 2
a71 2
ec_GFp_simple_set_compressed_coordinates(const EC_GROUP * group, EC_POINT * point,
    const BIGNUM * x_, int y_bit, BN_CTX * ctx)
d88 7
a94 5
	tmp1 = BN_CTX_get(ctx);
	tmp2 = BN_CTX_get(ctx);
	x = BN_CTX_get(ctx);
	y = BN_CTX_get(ctx);
	if (y == NULL)
d244 3
a246 3
		x = BN_CTX_get(ctx);
		y = BN_CTX_get(ctx);
		if (y == NULL)
d353 3
a355 3
	x = BN_CTX_get(ctx);
	y = BN_CTX_get(ctx);
	if (y == NULL)
@


1.5
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ecp_oct.c,v 1.4 2014/06/12 15:49:29 deraadt Exp $ */
d214 1
a214 1
	if (EC_POINT_is_at_infinity(group, point)) {
d382 2
a383 2
	if (!EC_POINT_is_on_curve(group, point, ctx)) {	/* test required by
							 * X9.62 */
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d193 1
a193 2
	if (new_ctx != NULL)
		BN_CTX_free(new_ctx);
d292 1
a292 2
	if (new_ctx != NULL)
		BN_CTX_free(new_ctx);
d298 1
a298 2
	if (new_ctx != NULL)
		BN_CTX_free(new_ctx);
d391 1
a391 2
	if (new_ctx != NULL)
		BN_CTX_free(new_ctx);
@


1.3
log
@knf approximation
@
text
@d1 1
a1 1
/* crypto/ec/ecp_oct.c */
@


1.2
log
@Cope with the removal of openssl/symhacks.h
@
text
@d3 1
a3 1
 * for the OpenSSL project. 
d14 1
a14 1
 *    notice, this list of conditions and the following disclaimer. 
d69 4
a72 3
int ec_GFp_simple_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *point,
	const BIGNUM *x_, int y_bit, BN_CTX *ctx)
	{
d77 1
a77 1
	/* clear error queue*/
d80 1
a80 2
	if (ctx == NULL)
		{
d84 1
a84 2
		}

d92 2
a93 1
	if (y == NULL) goto err;
d95 3
a97 3
	/* Recover y.  We have a Weierstrass equation
	 *     y^2 = x^3 + a*x + b,
	 * so  y  is one of the square roots of  x^3 + a*x + b.
d101 3
a103 3
	if (!BN_nnmod(x, x_, &group->field,ctx)) goto err;
	if (group->meth->field_decode == 0)
		{
d105 11
a115 9
		if (!group->meth->field_sqr(group, tmp2, x_, ctx)) goto err;
		if (!group->meth->field_mul(group, tmp1, tmp2, x_, ctx)) goto err;
		}
	else
		{
		if (!BN_mod_sqr(tmp2, x_, &group->field, ctx)) goto err;
		if (!BN_mod_mul(tmp1, tmp2, x_, &group->field, ctx)) goto err;
		}
	
d117 14
a130 15
	if (group->a_is_minus3)
		{
		if (!BN_mod_lshift1_quick(tmp2, x, &group->field)) goto err;
		if (!BN_mod_add_quick(tmp2, tmp2, x, &group->field)) goto err;
		if (!BN_mod_sub_quick(tmp1, tmp1, tmp2, &group->field)) goto err;
		}
	else
		{
		if (group->meth->field_decode)
			{
			if (!group->meth->field_decode(group, tmp2, &group->a, ctx)) goto err;
			if (!BN_mod_mul(tmp2, tmp2, x, &group->field, ctx)) goto err;
			}
		else
			{
d132 2
a133 4
			if (!group->meth->field_mul(group, tmp2, &group->a, x, ctx)) goto err;
			}
		
		if (!BN_mod_add_quick(tmp1, tmp1, tmp2, &group->field)) goto err;
d135 5
a139 1
	
d141 11
a151 12
	if (group->meth->field_decode)
		{
		if (!group->meth->field_decode(group, tmp2, &group->b, ctx)) goto err;
		if (!BN_mod_add_quick(tmp1, tmp1, tmp2, &group->field)) goto err;
		}
	else
		{
		if (!BN_mod_add_quick(tmp1, tmp1, &group->b, &group->field)) goto err;
		}
	
	if (!BN_mod_sqrt(y, tmp1, &group->field, ctx))
		{
d153 2
a154 3
		
		if (ERR_GET_LIB(err) == ERR_LIB_BN && ERR_GET_REASON(err) == BN_R_NOT_A_SQUARE)
			{
d157 1
a157 2
			}
		else
d160 3
a162 6
		}

	if (y_bit != BN_is_odd(y))
		{
		if (BN_is_zero(y))
			{
d166 2
a167 1
			if (kron == -2) goto err;
d172 4
a175 1
				/* BN_mod_sqrt() should have cought this error (not a square) */
a177 2
			}
		if (!BN_usub(y, &group->field, y)) goto err;
d179 4
a182 2
	if (y_bit != BN_is_odd(y))
		{
d185 3
a187 3
		}

	if (!EC_POINT_set_affine_coordinates_GFp(group, point, x, y, ctx)) goto err;
d191 1
a191 1
 err:
d196 1
a196 1
	}
d199 4
a202 3
size_t ec_GFp_simple_point2oct(const EC_GROUP *group, const EC_POINT *point, point_conversion_form_t form,
	unsigned char *buf, size_t len, BN_CTX *ctx)
	{
d210 2
a211 3
		&& (form != POINT_CONVERSION_UNCOMPRESSED)
		&& (form != POINT_CONVERSION_HYBRID))
		{
d214 2
a215 4
		}

	if (EC_POINT_is_at_infinity(group, point))
		{
d217 2
a218 4
		if (buf != NULL)
			{
			if (len < 1)
				{
d221 1
a221 1
				}
d223 1
a223 1
			}
d225 1
a225 3
		}


d228 1
a228 1
	ret = (form == POINT_CONVERSION_COMPRESSED) ? 1 + field_len : 1 + 2*field_len;
d231 2
a232 4
	if (buf != NULL)
		{
		if (len < ret)
			{
d235 2
a236 4
			}

		if (ctx == NULL)
			{
d240 1
a240 2
			}

d245 2
a246 1
		if (y == NULL) goto err;
d248 2
a249 1
		if (!EC_POINT_get_affine_coordinates_GFp(group, point, x, y, ctx)) goto err;
d255 1
a255 1
	
d257 1
a257 1
		
d259 1
a259 2
		if (skip > field_len)
			{
d262 2
a263 3
			}
		while (skip > 0)
			{
d266 1
a266 1
			}
d269 1
a269 2
		if (i != 1 + field_len)
			{
d272 2
a273 4
			}

		if (form == POINT_CONVERSION_UNCOMPRESSED || form == POINT_CONVERSION_HYBRID)
			{
d275 1
a275 2
			if (skip > field_len)
				{
d278 2
a279 3
				}
			while (skip > 0)
				{
d282 1
a282 1
				}
d285 2
a286 4
			}

		if (i != ret)
			{
a288 1
			}
d290 1
a290 1
	
d297 1
a297 1
 err:
d303 1
a303 1
	}
d306 4
a309 3
int ec_GFp_simple_oct2point(const EC_GROUP *group, EC_POINT *point,
	const unsigned char *buf, size_t len, BN_CTX *ctx)
	{
d317 1
a317 2
	if (len == 0)
		{
d320 1
a320 1
		}
d324 3
a326 4
	if ((form != 0)	&& (form != POINT_CONVERSION_COMPRESSED)
		&& (form != POINT_CONVERSION_UNCOMPRESSED)
		&& (form != POINT_CONVERSION_HYBRID))
		{
d329 2
a330 3
		}
	if ((form == 0 || form == POINT_CONVERSION_UNCOMPRESSED) && y_bit)
		{
d333 3
a335 6
		}

	if (form == 0)
		{
		if (len != 1)
			{
d338 1
a338 2
			}

d340 1
a340 2
		}
	
d342 1
a342 1
	enc_len = (form == POINT_CONVERSION_COMPRESSED) ? 1 + field_len : 1 + 2*field_len;
d344 1
a344 2
	if (len != enc_len)
		{
d347 2
a348 4
		}

	if (ctx == NULL)
		{
d352 1
a352 2
		}

d356 2
a357 1
	if (y == NULL) goto err;
d359 3
a361 3
	if (!BN_bin2bn(buf + 1, field_len, x)) goto err;
	if (BN_ucmp(x, &group->field) >= 0)
		{
d364 8
a371 11
		}

	if (form == POINT_CONVERSION_COMPRESSED)
		{
		if (!EC_POINT_set_compressed_coordinates_GFp(group, point, x, y_bit, ctx)) goto err;
		}
	else
		{
		if (!BN_bin2bn(buf + 1 + field_len, field_len, y)) goto err;
		if (BN_ucmp(y, &group->field) >= 0)
			{
d374 3
a376 5
			}
		if (form == POINT_CONVERSION_HYBRID)
			{
			if (y_bit != BN_is_odd(y))
				{
a378 1
				}
d380 4
d385 2
a386 5
		if (!EC_POINT_set_affine_coordinates_GFp(group, point, x, y, ctx)) goto err;
		}
	
	if (!EC_POINT_is_on_curve(group, point, ctx)) /* test required by X9.62 */
		{
d389 2
a390 1
		}
d392 1
a392 3
	ret = 1;
	
 err:
d397 1
a397 2
	}

@


1.1
log
@Initial revision
@
text
@a65 1
#include <openssl/symhacks.h>
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@
