head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.12;
commitid	kT0fLt3r4lroFJra;

1.12
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.11;
commitid	vHznCDK3idwNEFz4;

1.11
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.10;
commitid	69Tc75PIK8JcRRsC;

1.10
date	2015.02.08.22.25.03;	author miod;	state Exp;
branches;
next	1.9;
commitid	QrqYr2yKPjNFCI1S;

1.9
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.8;
commitid	G74O1dmRukKsW7IJ;

1.8
date	2014.07.10.22.45.57;	author jsing;	state Exp;
branches;
next	1.7;
commitid	nzndm3zqPmFurSaK;

1.7
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	2nvnQBrv22dLtvTt;

1.5
date	2014.05.06.03.56.27;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.15.20.06.09;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.43;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.13.55;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.11.03.02.32.10;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2012.10.13.21.23.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: ec_key.c,v 1.12 2015/09/10 15:56:25 jsing Exp $ */
/*
 * Written by Nils Larsch for the OpenSSL project.
 */
/* ====================================================================
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * Portions originally developed by SUN MICROSYSTEMS, INC., and
 * contributed to the OpenSSL project.
 */

#include <string.h>

#include <openssl/opensslconf.h>

#include "ec_lcl.h"
#include <openssl/err.h>

EC_KEY *
EC_KEY_new(void)
{
	EC_KEY *ret;

	ret = malloc(sizeof(EC_KEY));
	if (ret == NULL) {
		ECerror(ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	ret->version = 1;
	ret->flags = 0;
	ret->group = NULL;
	ret->pub_key = NULL;
	ret->priv_key = NULL;
	ret->enc_flag = 0;
	ret->conv_form = POINT_CONVERSION_UNCOMPRESSED;
	ret->references = 1;
	ret->method_data = NULL;
	return (ret);
}

EC_KEY *
EC_KEY_new_by_curve_name(int nid)
{
	EC_KEY *ret = EC_KEY_new();
	if (ret == NULL)
		return NULL;
	ret->group = EC_GROUP_new_by_curve_name(nid);
	if (ret->group == NULL) {
		EC_KEY_free(ret);
		return NULL;
	}
	return ret;
}

void 
EC_KEY_free(EC_KEY * r)
{
	int i;

	if (r == NULL)
		return;

	i = CRYPTO_add(&r->references, -1, CRYPTO_LOCK_EC);
	if (i > 0)
		return;

	EC_GROUP_free(r->group);
	EC_POINT_free(r->pub_key);
	BN_clear_free(r->priv_key);

	EC_EX_DATA_free_all_data(&r->method_data);

	explicit_bzero((void *) r, sizeof(EC_KEY));

	free(r);
}

EC_KEY *
EC_KEY_copy(EC_KEY * dest, const EC_KEY * src)
{
	EC_EXTRA_DATA *d;

	if (dest == NULL || src == NULL) {
		ECerror(ERR_R_PASSED_NULL_PARAMETER);
		return NULL;
	}
	/* copy the parameters */
	if (src->group) {
		const EC_METHOD *meth = EC_GROUP_method_of(src->group);
		/* clear the old group */
		EC_GROUP_free(dest->group);
		dest->group = EC_GROUP_new(meth);
		if (dest->group == NULL)
			return NULL;
		if (!EC_GROUP_copy(dest->group, src->group))
			return NULL;
	}
	/* copy the public key */
	if (src->pub_key && src->group) {
		EC_POINT_free(dest->pub_key);
		dest->pub_key = EC_POINT_new(src->group);
		if (dest->pub_key == NULL)
			return NULL;
		if (!EC_POINT_copy(dest->pub_key, src->pub_key))
			return NULL;
	}
	/* copy the private key */
	if (src->priv_key) {
		if (dest->priv_key == NULL) {
			dest->priv_key = BN_new();
			if (dest->priv_key == NULL)
				return NULL;
		}
		if (!BN_copy(dest->priv_key, src->priv_key))
			return NULL;
	}
	/* copy method/extra data */
	EC_EX_DATA_free_all_data(&dest->method_data);

	for (d = src->method_data; d != NULL; d = d->next) {
		void *t = d->dup_func(d->data);

		if (t == NULL)
			return 0;
		if (!EC_EX_DATA_set_data(&dest->method_data, t, d->dup_func,
		    d->free_func, d->clear_free_func))
			return 0;
	}

	/* copy the rest */
	dest->enc_flag = src->enc_flag;
	dest->conv_form = src->conv_form;
	dest->version = src->version;
	dest->flags = src->flags;

	return dest;
}

EC_KEY *
EC_KEY_dup(const EC_KEY * ec_key)
{
	EC_KEY *ret = EC_KEY_new();
	if (ret == NULL)
		return NULL;
	if (EC_KEY_copy(ret, ec_key) == NULL) {
		EC_KEY_free(ret);
		return NULL;
	}
	return ret;
}

int 
EC_KEY_up_ref(EC_KEY * r)
{
	int i = CRYPTO_add(&r->references, 1, CRYPTO_LOCK_EC);
	return ((i > 1) ? 1 : 0);
}

int 
EC_KEY_generate_key(EC_KEY * eckey)
{
	int ok = 0;
	BN_CTX *ctx = NULL;
	BIGNUM *priv_key = NULL, *order = NULL;
	EC_POINT *pub_key = NULL;

	if (!eckey || !eckey->group) {
		ECerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	if ((order = BN_new()) == NULL)
		goto err;
	if ((ctx = BN_CTX_new()) == NULL)
		goto err;

	if (eckey->priv_key == NULL) {
		priv_key = BN_new();
		if (priv_key == NULL)
			goto err;
	} else
		priv_key = eckey->priv_key;

	if (!EC_GROUP_get_order(eckey->group, order, ctx))
		goto err;

	do
		if (!BN_rand_range(priv_key, order))
			goto err;
	while (BN_is_zero(priv_key));

	if (eckey->pub_key == NULL) {
		pub_key = EC_POINT_new(eckey->group);
		if (pub_key == NULL)
			goto err;
	} else
		pub_key = eckey->pub_key;

	if (!EC_POINT_mul(eckey->group, pub_key, priv_key, NULL, NULL, ctx))
		goto err;

	eckey->priv_key = priv_key;
	eckey->pub_key = pub_key;

	ok = 1;

err:
	BN_free(order);
	if (pub_key != NULL && eckey->pub_key == NULL)
		EC_POINT_free(pub_key);
	if (priv_key != NULL && eckey->priv_key == NULL)
		BN_free(priv_key);
	BN_CTX_free(ctx);
	return (ok);
}

int 
EC_KEY_check_key(const EC_KEY * eckey)
{
	int ok = 0;
	BN_CTX *ctx = NULL;
	const BIGNUM *order = NULL;
	EC_POINT *point = NULL;

	if (!eckey || !eckey->group || !eckey->pub_key) {
		ECerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	if (EC_POINT_is_at_infinity(eckey->group, eckey->pub_key) > 0) {
		ECerror(EC_R_POINT_AT_INFINITY);
		goto err;
	}
	if ((ctx = BN_CTX_new()) == NULL)
		goto err;
	if ((point = EC_POINT_new(eckey->group)) == NULL)
		goto err;

	/* testing whether the pub_key is on the elliptic curve */
	if (EC_POINT_is_on_curve(eckey->group, eckey->pub_key, ctx) <= 0) {
		ECerror(EC_R_POINT_IS_NOT_ON_CURVE);
		goto err;
	}
	/* testing whether pub_key * order is the point at infinity */
	order = &eckey->group->order;
	if (BN_is_zero(order)) {
		ECerror(EC_R_INVALID_GROUP_ORDER);
		goto err;
	}
	if (!EC_POINT_mul(eckey->group, point, NULL, eckey->pub_key, order, ctx)) {
		ECerror(ERR_R_EC_LIB);
		goto err;
	}
	if (EC_POINT_is_at_infinity(eckey->group, point) <= 0) {
		ECerror(EC_R_WRONG_ORDER);
		goto err;
	}
	/*
	 * in case the priv_key is present : check if generator * priv_key ==
	 * pub_key
	 */
	if (eckey->priv_key) {
		if (BN_cmp(eckey->priv_key, order) >= 0) {
			ECerror(EC_R_WRONG_ORDER);
			goto err;
		}
		if (!EC_POINT_mul(eckey->group, point, eckey->priv_key,
			NULL, NULL, ctx)) {
			ECerror(ERR_R_EC_LIB);
			goto err;
		}
		if (EC_POINT_cmp(eckey->group, point, eckey->pub_key,
			ctx) != 0) {
			ECerror(EC_R_INVALID_PRIVATE_KEY);
			goto err;
		}
	}
	ok = 1;
err:
	BN_CTX_free(ctx);
	EC_POINT_free(point);
	return (ok);
}

int 
EC_KEY_set_public_key_affine_coordinates(EC_KEY * key, BIGNUM * x, BIGNUM * y)
{
	BN_CTX *ctx = NULL;
	BIGNUM *tx, *ty;
	EC_POINT *point = NULL;
	int ok = 0, tmp_nid, is_char_two = 0;

	if (!key || !key->group || !x || !y) {
		ECerror(ERR_R_PASSED_NULL_PARAMETER);
		return 0;
	}
	ctx = BN_CTX_new();
	if (!ctx)
		goto err;

	point = EC_POINT_new(key->group);

	if (!point)
		goto err;

	tmp_nid = EC_METHOD_get_field_type(EC_GROUP_method_of(key->group));

	if (tmp_nid == NID_X9_62_characteristic_two_field)
		is_char_two = 1;

	if ((tx = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((ty = BN_CTX_get(ctx)) == NULL)
		goto err;

#ifndef OPENSSL_NO_EC2M
	if (is_char_two) {
		if (!EC_POINT_set_affine_coordinates_GF2m(key->group, point,
			x, y, ctx))
			goto err;
		if (!EC_POINT_get_affine_coordinates_GF2m(key->group, point,
			tx, ty, ctx))
			goto err;
	} else
#endif
	{
		if (!EC_POINT_set_affine_coordinates_GFp(key->group, point,
			x, y, ctx))
			goto err;
		if (!EC_POINT_get_affine_coordinates_GFp(key->group, point,
			tx, ty, ctx))
			goto err;
	}
	/*
	 * Check if retrieved coordinates match originals: if not values are
	 * out of range.
	 */
	if (BN_cmp(x, tx) || BN_cmp(y, ty)) {
		ECerror(EC_R_COORDINATES_OUT_OF_RANGE);
		goto err;
	}
	if (!EC_KEY_set_public_key(key, point))
		goto err;

	if (EC_KEY_check_key(key) == 0)
		goto err;

	ok = 1;

err:
	BN_CTX_free(ctx);
	EC_POINT_free(point);
	return ok;

}

const EC_GROUP *
EC_KEY_get0_group(const EC_KEY * key)
{
	return key->group;
}

int 
EC_KEY_set_group(EC_KEY * key, const EC_GROUP * group)
{
	EC_GROUP_free(key->group);
	key->group = EC_GROUP_dup(group);
	return (key->group == NULL) ? 0 : 1;
}

const BIGNUM *
EC_KEY_get0_private_key(const EC_KEY * key)
{
	return key->priv_key;
}

int 
EC_KEY_set_private_key(EC_KEY * key, const BIGNUM * priv_key)
{
	BN_clear_free(key->priv_key);
	key->priv_key = BN_dup(priv_key);
	return (key->priv_key == NULL) ? 0 : 1;
}

const EC_POINT *
EC_KEY_get0_public_key(const EC_KEY * key)
{
	return key->pub_key;
}

int 
EC_KEY_set_public_key(EC_KEY * key, const EC_POINT * pub_key)
{
	EC_POINT_free(key->pub_key);
	key->pub_key = EC_POINT_dup(pub_key, key->group);
	return (key->pub_key == NULL) ? 0 : 1;
}

unsigned int 
EC_KEY_get_enc_flags(const EC_KEY * key)
{
	return key->enc_flag;
}

void 
EC_KEY_set_enc_flags(EC_KEY * key, unsigned int flags)
{
	key->enc_flag = flags;
}

point_conversion_form_t 
EC_KEY_get_conv_form(const EC_KEY * key)
{
	return key->conv_form;
}

void 
EC_KEY_set_conv_form(EC_KEY * key, point_conversion_form_t cform)
{
	key->conv_form = cform;
	if (key->group != NULL)
		EC_GROUP_set_point_conversion_form(key->group, cform);
}

void *
EC_KEY_get_key_method_data(EC_KEY *key,
    void *(*dup_func) (void *),
    void (*free_func) (void *),
    void (*clear_free_func) (void *))
{
	void *ret;

	CRYPTO_r_lock(CRYPTO_LOCK_EC);
	ret = EC_EX_DATA_get_data(key->method_data, dup_func, free_func, clear_free_func);
	CRYPTO_r_unlock(CRYPTO_LOCK_EC);

	return ret;
}

void *
EC_KEY_insert_key_method_data(EC_KEY * key, void *data,
    void *(*dup_func) (void *),
    void (*free_func) (void *),
    void (*clear_free_func) (void *))
{
	EC_EXTRA_DATA *ex_data;

	CRYPTO_w_lock(CRYPTO_LOCK_EC);
	ex_data = EC_EX_DATA_get_data(key->method_data, dup_func, free_func, clear_free_func);
	if (ex_data == NULL)
		EC_EX_DATA_set_data(&key->method_data, data, dup_func, free_func, clear_free_func);
	CRYPTO_w_unlock(CRYPTO_LOCK_EC);

	return ex_data;
}

void 
EC_KEY_set_asn1_flag(EC_KEY * key, int flag)
{
	if (key->group != NULL)
		EC_GROUP_set_asn1_flag(key->group, flag);
}

int 
EC_KEY_precompute_mult(EC_KEY * key, BN_CTX * ctx)
{
	if (key->group == NULL)
		return 0;
	return EC_GROUP_precompute_mult(key->group, ctx);
}

int 
EC_KEY_get_flags(const EC_KEY * key)
{
	return key->flags;
}

void 
EC_KEY_set_flags(EC_KEY * key, int flags)
{
	key->flags |= flags;
}

void 
EC_KEY_clear_flags(EC_KEY * key, int flags)
{
	key->flags &= ~flags;
}
@


1.12
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_key.c,v 1.11 2015/02/09 15:49:22 jsing Exp $ */
d78 1
a78 1
		ECerr(EC_F_EC_KEY_NEW, ERR_R_MALLOC_FAILURE);
d136 1
a136 1
		ECerr(EC_F_EC_KEY_COPY, ERR_R_PASSED_NULL_PARAMETER);
d220 1
a220 1
		ECerr(EC_F_EC_KEY_GENERATE_KEY, ERR_R_PASSED_NULL_PARAMETER);
d277 1
a277 1
		ECerr(EC_F_EC_KEY_CHECK_KEY, ERR_R_PASSED_NULL_PARAMETER);
d281 1
a281 1
		ECerr(EC_F_EC_KEY_CHECK_KEY, EC_R_POINT_AT_INFINITY);
d291 1
a291 1
		ECerr(EC_F_EC_KEY_CHECK_KEY, EC_R_POINT_IS_NOT_ON_CURVE);
d297 1
a297 1
		ECerr(EC_F_EC_KEY_CHECK_KEY, EC_R_INVALID_GROUP_ORDER);
d301 1
a301 1
		ECerr(EC_F_EC_KEY_CHECK_KEY, ERR_R_EC_LIB);
d305 1
a305 1
		ECerr(EC_F_EC_KEY_CHECK_KEY, EC_R_WRONG_ORDER);
d314 1
a314 1
			ECerr(EC_F_EC_KEY_CHECK_KEY, EC_R_WRONG_ORDER);
d319 1
a319 1
			ECerr(EC_F_EC_KEY_CHECK_KEY, ERR_R_EC_LIB);
d324 1
a324 1
			ECerr(EC_F_EC_KEY_CHECK_KEY, EC_R_INVALID_PRIVATE_KEY);
d344 1
a344 2
		ECerr(EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES,
		    ERR_R_PASSED_NULL_PARAMETER);
d389 1
a389 2
		ECerr(EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES,
		    EC_R_COORDINATES_OUT_OF_RANGE);
@


1.11
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_key.c,v 1.10 2015/02/08 22:25:03 miod Exp $ */
d125 1
a125 1
	OPENSSL_cleanse((void *) r, sizeof(EC_KEY));
@


1.10
log
@Use `> 0' instead of `!= 0' as a successful condition for
EC_POINT_is_at_infinity() and EC_POINT_is_on_curve(), for they may return -1
should an error arise.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_key.c,v 1.9 2014/07/12 16:03:37 miod Exp $ */
d362 5
a366 2
	tx = BN_CTX_get(ctx);
	ty = BN_CTX_get(ctx);
@


1.9
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec_key.c,v 1.8 2014/07/10 22:45:57 jsing Exp $ */
d280 1
a280 1
	if (EC_POINT_is_at_infinity(eckey->group, eckey->pub_key)) {
d290 1
a290 1
	if (!EC_POINT_is_on_curve(eckey->group, eckey->pub_key, ctx)) {
d304 1
a304 1
	if (!EC_POINT_is_at_infinity(eckey->group, point)) {
@


1.8
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: ec_key.c,v 1.7 2014/06/12 15:49:29 deraadt Exp $ */
d119 3
a121 6
	if (r->group != NULL)
		EC_GROUP_free(r->group);
	if (r->pub_key != NULL)
		EC_POINT_free(r->pub_key);
	if (r->priv_key != NULL)
		BN_clear_free(r->priv_key);
d143 1
a143 2
		if (dest->group)
			EC_GROUP_free(dest->group);
d152 1
a152 2
		if (dest->pub_key)
			EC_POINT_free(dest->pub_key);
d259 1
a259 2
	if (order)
		BN_free(order);
d264 1
a264 2
	if (ctx != NULL)
		BN_CTX_free(ctx);
d330 2
a331 4
	if (ctx != NULL)
		BN_CTX_free(ctx);
	if (point != NULL)
		EC_POINT_free(point);
d400 2
a401 4
	if (ctx)
		BN_CTX_free(ctx);
	if (point)
		EC_POINT_free(point);
d415 1
a415 2
	if (key->group != NULL)
		EC_GROUP_free(key->group);
d429 1
a429 2
	if (key->priv_key)
		BN_clear_free(key->priv_key);
d443 1
a443 2
	if (key->pub_key != NULL)
		EC_POINT_free(key->pub_key);
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 3
@


1.6
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/ec/ec_key.c */
@


1.5
log
@knf approximation
@
text
@d73 1
a73 1
	ret = (EC_KEY *) malloc(sizeof(EC_KEY));
@


1.4
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d60 1
a60 1
 * Portions originally developed by SUN MICROSYSTEMS, INC., and 
d68 3
a70 2
EC_KEY *EC_KEY_new(void)
	{
d73 2
a74 3
	ret=(EC_KEY *)malloc(sizeof(EC_KEY));
	if (ret == NULL)
		{
d76 3
a78 4
		return(NULL);
		}

	ret->version = 1;	
d80 1
a80 1
	ret->group   = NULL;
d82 2
a83 2
	ret->priv_key= NULL;
	ret->enc_flag= 0; 
d85 1
a85 1
	ret->references= 1;
d87 2
a88 2
	return(ret);
	}
d90 3
a92 2
EC_KEY *EC_KEY_new_by_curve_name(int nid)
	{
d97 1
a97 2
	if (ret->group == NULL)
		{
d100 1
a100 1
		}
d102 1
a102 1
	}
d104 3
a106 2
void EC_KEY_free(EC_KEY *r)
	{
d109 2
a110 1
	if (r == NULL) return;
d112 3
a114 2
	i=CRYPTO_add(&r->references,-1,CRYPTO_LOCK_EC);
	if (i > 0) return;
d116 1
a116 1
	if (r->group    != NULL) 
d118 1
a118 1
	if (r->pub_key  != NULL)
d125 1
a125 1
	OPENSSL_cleanse((void *)r, sizeof(EC_KEY));
d128 1
a128 1
	}
d130 3
a132 2
EC_KEY *EC_KEY_copy(EC_KEY *dest, const EC_KEY *src)
	{
d135 1
a135 2
	if (dest == NULL || src == NULL)
		{
d138 1
a138 1
		}
d140 1
a140 2
	if (src->group)
		{
d150 3
a152 4
		}
	/*  copy the public key */
	if (src->pub_key && src->group)
		{
d160 1
a160 1
		}
d162 2
a163 4
	if (src->priv_key)
		{
		if (dest->priv_key == NULL)
			{
d167 1
a167 1
			}
d170 1
a170 1
		}
d174 1
a174 2
	for (d = src->method_data; d != NULL; d = d->next)
		{
d176 1
a176 1
		
d179 2
a180 1
		if (!EC_EX_DATA_set_data(&dest->method_data, t, d->dup_func, d->free_func, d->clear_free_func))
d182 1
a182 1
		}
d185 1
a185 1
	dest->enc_flag  = src->enc_flag;
d187 1
a187 1
	dest->version   = src->version;
d191 1
a191 1
	}
d193 3
a195 2
EC_KEY *EC_KEY_dup(const EC_KEY *ec_key)
	{
d199 1
a199 2
	if (EC_KEY_copy(ret, ec_key) == NULL)
		{
d202 1
a202 1
		}
d204 1
a204 1
	}
d206 3
a208 2
int EC_KEY_up_ref(EC_KEY *r)
	{
d211 1
a211 1
	}
d213 6
a218 5
int EC_KEY_generate_key(EC_KEY *eckey)
	{	
	int	ok = 0;
	BN_CTX	*ctx = NULL;
	BIGNUM	*priv_key = NULL, *order = NULL;
d221 1
a221 2
	if (!eckey || !eckey->group)
		{
d224 5
a228 4
		}

	if ((order = BN_new()) == NULL) goto err;
	if ((ctx = BN_CTX_new()) == NULL) goto err;
d230 1
a230 2
	if (eckey->priv_key == NULL)
		{
d234 1
a234 2
		}
	else
d245 1
a245 2
	if (eckey->pub_key == NULL)
		{
d249 1
a249 2
		}
	else
d256 1
a256 1
	eckey->pub_key  = pub_key;
d258 1
a258 1
	ok=1;
d260 1
a260 1
err:	
d263 1
a263 1
	if (pub_key  != NULL && eckey->pub_key  == NULL)
d269 2
a270 2
	return(ok);
	}
d272 6
a277 5
int EC_KEY_check_key(const EC_KEY *eckey)
	{
	int	ok   = 0;
	BN_CTX	*ctx = NULL;
	const BIGNUM	*order  = NULL;
d280 1
a280 2
	if (!eckey || !eckey->group || !eckey->pub_key)
		{
d283 2
a284 4
		}

	if (EC_POINT_is_at_infinity(eckey->group, eckey->pub_key))
		{
d287 1
a287 2
		}

d294 1
a294 2
	if (!EC_POINT_is_on_curve(eckey->group, eckey->pub_key, ctx))
		{
d297 1
a297 1
		}
d300 1
a300 2
	if (BN_is_zero(order))
		{
d303 2
a304 3
		}
	if (!EC_POINT_mul(eckey->group, point, NULL, eckey->pub_key, order, ctx))
		{
d307 2
a308 3
		}
	if (!EC_POINT_is_at_infinity(eckey->group, point))
		{
d311 4
a314 3
		}
	/* in case the priv_key is present : 
	 * check if generator * priv_key == pub_key 
d316 2
a317 4
	if (eckey->priv_key)
		{
		if (BN_cmp(eckey->priv_key, order) >= 0)
			{
d320 1
a320 1
			}
d322 1
a322 2
			NULL, NULL, ctx))
			{
d325 3
a327 4
			}
		if (EC_POINT_cmp(eckey->group, point, eckey->pub_key, 
			ctx) != 0)
			{
a329 1
			}
d331 1
d334 1
a334 1
	if (ctx   != NULL)
d338 2
a339 2
	return(ok);
	}
d341 3
a343 2
int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x, BIGNUM *y)
	{
d349 1
a349 2
	if (!key || !key->group || !x || !y)
		{
d351 1
a351 1
						ERR_R_PASSED_NULL_PARAMETER);
d353 1
a353 1
		}
d365 1
a365 1
        if (tmp_nid == NID_X9_62_characteristic_two_field)
d371 1
a371 2
	if (is_char_two)
		{
d373 1
a373 1
								x, y, ctx))
d376 1
a376 1
								tx, ty, ctx))
d378 1
a378 2
		}
	else
d380 1
a380 1
		{
d382 1
a382 1
								x, y, ctx))
d385 1
a385 1
								tx, ty, ctx))
d387 4
a390 3
		}
	/* Check if retrieved coordinates match originals: if not values
	 * are out of range.
d392 1
a392 2
	if (BN_cmp(x, tx) || BN_cmp(y, ty))
		{
d394 1
a394 1
			EC_R_COORDINATES_OUT_OF_RANGE);
d396 1
a396 2
		}

d405 1
a405 1
	err:
d412 1
a412 1
	}
d414 3
a416 2
const EC_GROUP *EC_KEY_get0_group(const EC_KEY *key)
	{
d418 1
a418 1
	}
d420 3
a422 2
int EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)
	{
d427 1
a427 1
	}
d429 3
a431 2
const BIGNUM *EC_KEY_get0_private_key(const EC_KEY *key)
	{
d433 1
a433 1
	}
d435 3
a437 2
int EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *priv_key)
	{
d442 1
a442 1
	}
d444 3
a446 2
const EC_POINT *EC_KEY_get0_public_key(const EC_KEY *key)
	{
d448 1
a448 1
	}
d450 3
a452 2
int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub_key)
	{
d457 1
a457 1
	}
d459 3
a461 2
unsigned int EC_KEY_get_enc_flags(const EC_KEY *key)
	{
d463 1
a463 1
	}
d465 3
a467 2
void EC_KEY_set_enc_flags(EC_KEY *key, unsigned int flags)
	{
d469 1
a469 1
	}
d471 3
a473 2
point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY *key)
	{
d475 1
a475 1
	}
d477 3
a479 2
void EC_KEY_set_conv_form(EC_KEY *key, point_conversion_form_t cform)
	{
d483 1
a483 1
	}
d485 6
a490 3
void *EC_KEY_get_key_method_data(EC_KEY *key,
	void *(*dup_func)(void *), void (*free_func)(void *), void (*clear_free_func)(void *))
	{
d498 1
a498 1
	}
d500 6
a505 3
void *EC_KEY_insert_key_method_data(EC_KEY *key, void *data,
	void *(*dup_func)(void *), void (*free_func)(void *), void (*clear_free_func)(void *))
	{
d515 1
a515 1
	}
d517 3
a519 2
void EC_KEY_set_asn1_flag(EC_KEY *key, int flag)
	{
d522 1
a522 1
	}
d524 3
a526 2
int EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx)
	{
d530 1
a530 1
	}
d532 3
a534 2
int EC_KEY_get_flags(const EC_KEY *key)
	{
d536 1
a536 1
	}
d538 3
a540 2
void EC_KEY_set_flags(EC_KEY *key, int flags)
	{
d542 1
a542 1
	}
d544 3
a546 2
void EC_KEY_clear_flags(EC_KEY *key, int flags)
	{
d548 1
a548 1
	}
@


1.3
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a111 3
#ifdef REF_PRINT
	REF_PRINT("EC_KEY",r);
#endif
a112 7
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"EC_KEY_free, bad reference count\n");
		abort();
		}
#endif
a210 10
#ifdef REF_PRINT
	REF_PRINT("EC_KEY",r);
#endif
#ifdef REF_CHECK
	if (i < 2)
		{
		fprintf(stderr, "EC_KEY_up, bad reference count\n");
		abort();
		}
#endif
@


1.2
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d72 1
a72 1
	ret=(EC_KEY *)OPENSSL_malloc(sizeof(EC_KEY));
d135 1
a135 1
	OPENSSL_free(r);
@


1.1
log
@Initial revision
@
text
@a66 1
#include <string.h>
d80 1
d200 1
d300 1
a300 1
	BIGNUM	*order  = NULL;
d308 7
a314 1
	
a316 2
	if ((order = BN_new()) == NULL)
		goto err;
d327 2
a328 1
	if (!EC_GROUP_get_order(eckey->group, order, ctx))
d333 1
a333 6
	if (!EC_POINT_copy(point, eckey->pub_key))
		{
		ECerr(EC_F_EC_KEY_CHECK_KEY, ERR_R_EC_LIB);
		goto err;
		}
	if (!EC_POINT_mul(eckey->group, point, order, NULL, NULL, ctx))
a369 2
	if (order != NULL)
		BN_free(order);
d375 76
d515 7
a521 1
	return EC_EX_DATA_get_data(key->method_data, dup_func, free_func, clear_free_func);
d524 1
a524 1
void EC_KEY_insert_key_method_data(EC_KEY *key, void *data,
d528 1
d534 2
d549 15
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d299 1
a299 1
	const BIGNUM	*order  = NULL;
d310 2
d322 1
a322 2
	order = &eckey->group->order;
	if (BN_is_zero(order))
d327 6
a332 1
	if (!EC_POINT_mul(eckey->group, point, NULL, eckey->pub_key, order, ctx))
d369 2
@


1.1.1.3
log
@import OpenSSL 1.0.0e
@
text
@d307 1
a307 7

	if (EC_POINT_is_at_infinity(eckey->group, eckey->pub_key))
		{
		ECerr(EC_F_EC_KEY_CHECK_KEY, EC_R_POINT_AT_INFINITY);
		goto err;
		}

@


1.1.1.4
log
@import OpenSSL-1.0.1c
@
text
@d67 1
a67 3
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif
a80 1
	ret->flags = 0;
a199 1
	dest->flags = src->flags;
a239 5
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		return FIPS_ec_key_generate_key(eckey);
#endif

a373 76
int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x, BIGNUM *y)
	{
	BN_CTX *ctx = NULL;
	BIGNUM *tx, *ty;
	EC_POINT *point = NULL;
	int ok = 0, tmp_nid, is_char_two = 0;

	if (!key || !key->group || !x || !y)
		{
		ECerr(EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES,
						ERR_R_PASSED_NULL_PARAMETER);
		return 0;
		}
	ctx = BN_CTX_new();
	if (!ctx)
		goto err;

	point = EC_POINT_new(key->group);

	if (!point)
		goto err;

	tmp_nid = EC_METHOD_get_field_type(EC_GROUP_method_of(key->group));

        if (tmp_nid == NID_X9_62_characteristic_two_field)
		is_char_two = 1;

	tx = BN_CTX_get(ctx);
	ty = BN_CTX_get(ctx);
#ifndef OPENSSL_NO_EC2M
	if (is_char_two)
		{
		if (!EC_POINT_set_affine_coordinates_GF2m(key->group, point,
								x, y, ctx))
			goto err;
		if (!EC_POINT_get_affine_coordinates_GF2m(key->group, point,
								tx, ty, ctx))
			goto err;
		}
	else
#endif
		{
		if (!EC_POINT_set_affine_coordinates_GFp(key->group, point,
								x, y, ctx))
			goto err;
		if (!EC_POINT_get_affine_coordinates_GFp(key->group, point,
								tx, ty, ctx))
			goto err;
		}
	/* Check if retrieved coordinates match originals: if not values
	 * are out of range.
	 */
	if (BN_cmp(x, tx) || BN_cmp(y, ty))
		{
		ECerr(EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES,
			EC_R_COORDINATES_OUT_OF_RANGE);
		goto err;
		}

	if (!EC_KEY_set_public_key(key, point))
		goto err;

	if (EC_KEY_check_key(key) == 0)
		goto err;

	ok = 1;

	err:
	if (ctx)
		BN_CTX_free(ctx);
	if (point)
		EC_POINT_free(point);
	return ok;

	}

a462 15
	}

int EC_KEY_get_flags(const EC_KEY *key)
	{
	return key->flags;
	}

void EC_KEY_set_flags(EC_KEY *key, int flags)
	{
	key->flags |= flags;
	}

void EC_KEY_clear_flags(EC_KEY *key, int flags)
	{
	key->flags &= ~flags;
@


1.1.1.5
log
@Import OpenSSL 1.0.1g
@
text
@d523 1
a523 7
	void *ret;

	CRYPTO_r_lock(CRYPTO_LOCK_EC);
	ret = EC_EX_DATA_get_data(key->method_data, dup_func, free_func, clear_free_func);
	CRYPTO_r_unlock(CRYPTO_LOCK_EC);

	return ret;
d526 1
a526 1
void *EC_KEY_insert_key_method_data(EC_KEY *key, void *data,
a529 1

a534 2

	return ex_data;
@


