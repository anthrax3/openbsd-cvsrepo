head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@# @;


1.6
date	2017.06.28.13.34.50;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	orYzqmawc1sWJbXG;

1.5
date	2016.11.04.17.30.30;	author miod;	state Exp;
branches;
next	1.4;
commitid	uVQFi30uotTYOUA9;

1.4
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.21.21.12.05;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.10.13.21.23.42;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@.init stub creation doesn't need a jmp + .align to reach a branch target,
just fall into the code.  The .align created a FILL zone in the .init section,
which on i386 was filled with a NOP-sled, something we want to get away
from.
discussed with kettenis and tom
@
text
@#!/usr/bin/env perl

package x86gas;

*out=\@@::out;

$::lbdecor=$::aout?"L":".L";		# local label decoration
$nmdecor=($::aout or $::coff)?"_":"";	# external name decoration

$initseg="";

$align=16;
$align=log($align)/log(2) if ($::aout);
$com_start="#" if ($::aout or $::coff);

sub opsize()
{ my $reg=shift;
    if    ($reg =~ m/^%e/o)		{ "l"; }
    elsif ($reg =~ m/^%[a-d][hl]$/o)	{ "b"; }
    elsif ($reg =~ m/^%[xm]/o)		{ undef; }
    else				{ "w"; }
}

# swap arguments;
# expand opcode with size suffix;
# prefix numeric constants with $;
sub ::generic
{ my($opcode,@@arg)=@@_;
  my($suffix,$dst,$src);

    @@arg=reverse(@@arg);

    for (@@arg)
    {	s/^(\*?)(e?[a-dsixphl]{2})$/$1%$2/o;	# gp registers
	s/^([xy]?mm[0-7])$/%$1/o;		# xmm/mmx registers
	s/^(\-?[0-9]+)$/\$$1/o;			# constants
	s/^(\-?0x[0-9a-f]+)$/\$$1/o;		# constants
    }

    $dst = $arg[$#arg]		if ($#arg>=0);
    $src = $arg[$#arg-1]	if ($#arg>=1);
    if    ($dst =~ m/^%/o)	{ $suffix=&opsize($dst); }
    elsif ($src =~ m/^%/o)	{ $suffix=&opsize($src); }
    else			{ $suffix="l";           }
    undef $suffix if ($dst =~ m/^%[xm]/o || $src =~ m/^%[xm]/o);

    if ($#_==0)				{ &::emit($opcode);		}
    elsif ($#_==1 && $opcode =~ m/^(call|clflush|j|loop|set)/o)
					{ &::emit($opcode,@@arg);	}
    else				{ &::emit($opcode.$suffix,@@arg);}

  1;
}
#
# opcodes not covered by ::generic above, mostly inconsistent namings...
#
sub ::movzx	{ &::movzb(@@_);			}
sub ::pushfd	{ &::pushfl;			}
sub ::popfd	{ &::popfl;			}
sub ::cpuid	{ &::emit(".byte\t0x0f,0xa2");	}
sub ::rdtsc	{ &::emit(".byte\t0x0f,0x31");	}

sub ::call	{ &::emit("call",(&::islabel($_[0]) or "$nmdecor$_[0]")); }
sub ::call_ptr	{ &::generic("call","*$_[0]");	}
sub ::jmp_ptr	{ &::generic("jmp","*$_[0]");	}

*::bswap = sub	{ &::emit("bswap","%$_[0]");	} if (!$::i386);

sub ::DWP
{ my($addr,$reg1,$reg2,$idx)=@@_;
  my $ret="";

    $addr =~ s/^\s+//;
    # prepend global references with optional underscore
    $addr =~ s/^([^\+\-0-9][^\+\-]*)/&::islabel($1) or "$nmdecor$1"/ige;

    $reg1 = "%$reg1" if ($reg1);
    $reg2 = "%$reg2" if ($reg2);

    $ret .= $addr if (($addr ne "") && ($addr ne 0));

    if ($reg2)
    {	$idx!= 0 or $idx=1;
	$ret .= "($reg1,$reg2,$idx)";
    }
    elsif ($reg1)
    {	$ret .= "($reg1)";	}

  $ret;
}
sub ::QWP	{ &::DWP(@@_);	}
sub ::BP	{ &::DWP(@@_);	}
sub ::WP	{ &::DWP(@@_);	}
sub ::BC	{ @@_;		}
sub ::DWC	{ @@_;		}

sub ::file
{   push(@@out,".file\t\"$_[0].s\"\n.text\n");	}

sub ::function_begin_B
{ my $func=shift;
  my $global=($func !~ /^_/);
  my $begin="${::lbdecor}_${func}_begin";

    &::LABEL($func,$global?"$begin":"$nmdecor$func");
    $func=$nmdecor.$func;

    push(@@out,".globl\t$func\n")	if ($global);
    if ($::coff)
    {	push(@@out,".def\t$func;\t.scl\t".(3-$global).";\t.type\t32;\t.endef\n"); }
    elsif (($::aout and !$::pic) or $::macosx)
    { }
    else
    {	push(@@out,".type	$func,\@@function\n"); }
    push(@@out,".align\t$align\n");
    push(@@out,"$func:\n");
    push(@@out,"$begin:\n")		if ($global);
    $::stack=4;
}

sub ::function_end_B
{ my $func=shift;
    push(@@out,".size\t$nmdecor$func,.-".&::LABEL($func)."\n") if ($::elf);
    $::stack=0;
    &::wipe_labels();
}

sub ::comment
	{
	if (!defined($com_start) or $::elf)
		{	# Regarding $::elf above...
			# GNU and SVR4 as'es use different comment delimiters,
		push(@@out,"\n");	# so we just skip ELF comments...
		return;
		}
	foreach (@@_)
		{
		if (/^\s*$/)
			{ push(@@out,"\n"); }
		else
			{ push(@@out,"\t$com_start $_ $com_end\n"); }
		}
	}

sub ::external_label
{   foreach(@@_) { &::LABEL($_,$nmdecor.$_); }   }

sub ::public_label
{   push(@@out,".globl\t".&::LABEL($_[0],$nmdecor.$_[0])."\n");   }

sub ::file_end
{   if ($::macosx)
    {	if (%non_lazy_ptr)
    	{   push(@@out,".section __IMPORT,__pointers,non_lazy_symbol_pointers\n");
	    foreach $i (keys %non_lazy_ptr)
	    {	push(@@out,"$non_lazy_ptr{$i}:\n.indirect_symbol\t$i\n.long\t0\n");   }
	}
    }
    if (grep {/\b${nmdecor}OPENSSL_ia32cap_P\b/i} @@out) {
	push (@@out, ".extern\t${nmdecor}OPENSSL_ia32cap_P\n");
	push (@@out, ".hidden\t${nmdecor}OPENSSL_ia32cap_P\n");
    }
    push(@@out,$initseg) if ($initseg);
}

sub ::data_byte	{   push(@@out,".byte\t".join(',',@@_)."\n");   }
sub ::data_short{   push(@@out,".value\t".join(',',@@_)."\n");  }
sub ::data_word {   push(@@out,".long\t".join(',',@@_)."\n");   }

sub ::align
{ my $val=$_[0],$p2,$i;
    if ($::aout)
    {	for ($p2=0;$val!=0;$val>>=1) { $p2++; }
	$val=$p2-1;
	$val.=",0x90";
    }
    push(@@out,".align\t$val\n");
}

sub ::picmeup
{ my($dst,$sym,$base,$reflabel)=@@_;

    if ($::openbsd)
    {  &::emitraw("#if defined(PIC) || defined(__PIC__)");
       &::emitraw("PIC_PROLOGUE");
       &::mov($dst, &::DWP("PIC_GOT($sym)"));
       &::emitraw("PIC_EPILOGUE");
       &::emitraw("#else /* PIC */");
       &::lea($dst,&::DWP($sym));
       &::emitraw("#endif /* PIC */");
    }
    if (($::pic && ($::elf || $::aout)) || $::macosx)
    {	if (!defined($base))
	{   &::call(&::label("PIC_me_up"));
	    &::set_label("PIC_me_up");
	    &::blindpop($dst);
	    $base=$dst;
	    $reflabel=&::label("PIC_me_up");
	}
	if ($::macosx)
	{   my $indirect=&::static_label("$nmdecor$sym\$non_lazy_ptr");
	    &::mov($dst,&::DWP("$indirect-$reflabel",$base));
	    $non_lazy_ptr{"$nmdecor$sym"}=$indirect;
	}
	else
	{   &::lea($dst,&::DWP("_GLOBAL_OFFSET_TABLE_+[.-$reflabel]",
			    $base));
	    &::mov($dst,&::DWP("$sym\@@GOT",$dst));
	}
    }
    else
    {	&::lea($dst,&::DWP($sym));	}
}

sub ::initseg
{ my $f=$nmdecor.shift;

    if ($::openbsd)
    {	$initseg.=<<___;
.section	.init
PIC_PROLOGUE
	call	PIC_PLT($f)
PIC_EPILOGUE
___
    } elsif ($::android)
    {	$initseg.=<<___;
.section	.init_array
.align	4
.long	$f
___
    }
    elsif ($::elf)
    {	$initseg.=<<___;
.section	.init
	call	$f
___
    }
    elsif ($::coff)
    {   $initseg.=<<___;	# applies to both Cygwin and Mingw
.section	.ctors
.long	$f
___
    }
    elsif ($::macosx)
    {	$initseg.=<<___;
.mod_init_func
.align 2
.long   $f
___
    }
    elsif ($::aout)
    {	my $ctor="${nmdecor}_GLOBAL_\$I\$$f";
	$initseg.=".text\n";
	$initseg.=".type	$ctor,\@@function\n" if ($::pic);
	$initseg.=<<___;	# OpenBSD way...
.globl	$ctor
.align	2
$ctor:
	jmp	$f
___
    }
}

sub ::dataseg
{   push(@@out,".data\n");   }

1;
@


1.5
log
@Replace all uses of magic numbers when operating on OPENSSL_ia32_P[] by
meaningful constants in a private header file, so that reviewers can actually
get a chance to figure out what the code is attempting to do without knowing
all cpuid bits.

While there, turn it from an array of two 32-bit ints into a properly aligned
64-bit int.

Use of OPENSSL_ia32_P is now restricted to the assembler parts. C code will
now always use OPENSSL_cpu_caps() and check for the proper bits in the
whole 64-bit word it returns.

i386 tests and ok jsing@@
@
text
@a223 3
	jmp	.Linitalign
.align	$align
.Linitalign:
@


1.4
log
@resolve conflicts
@
text
@d160 2
a161 4
	my $tmp=".comm\t${nmdecor}OPENSSL_ia32cap_P,8";
	if ($::macosx)	{ push (@@out,"$tmp,2\n"); }
	elsif ($::elf)	{ push (@@out,"$tmp,4\n"); }
	else		{ push (@@out,"$tmp\n"); }
@


1.3
log
@When deciding whether we're PIC in a (generated) asm file, check for both PIC
and __PIC__ defines.  Makes things easier for PIE.

ok djm@@
@
text
@d48 2
a49 3
    elsif ($opcode =~ m/^j/o && $#_==1)	{ &::emit($opcode,@@arg);	}
    elsif ($opcode eq "call" && $#_==1)	{ &::emit($opcode,@@arg);	}
    elsif ($opcode =~ m/^set/&& $#_==1)	{ &::emit($opcode,@@arg);	}
d93 1
d152 1
a152 6
{   if (grep {/\b${nmdecor}OPENSSL_ia32cap_P\b/i} @@out) {
	my $tmp=".comm\t${nmdecor}OPENSSL_ia32cap_P,4";
	if ($::elf)	{ push (@@out,"$tmp,4\n"); }
	else		{ push (@@out,"$tmp\n"); }
    }
    if ($::macosx)
d159 6
d169 1
d194 1
a194 1
    elsif ($::pic && ($::elf || $::aout))
d230 6
a240 3
	jmp	.Linitalign
.align	$align
.Linitalign:
@


1.2
log
@resolve conflicts, fix local changes
@
text
@d184 1
a184 1
    {  &::emitraw("#ifdef PIC");
@


1.1
log
@Initial revision
@
text
@d183 10
a192 1
    if ($::pic && ($::elf || $::aout))
d218 12
a229 1
    if ($::elf)
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.1c
@
text
@d48 3
a50 2
    elsif ($#_==1 && $opcode =~ m/^(call|clflush|j|loop|set)/o)
					{ &::emit($opcode,@@arg);	}
a93 1
sub ::WP	{ &::DWP(@@_);	}
d152 6
a157 1
{   if ($::macosx)
a163 6
    if (grep {/\b${nmdecor}OPENSSL_ia32cap_P\b/i} @@out) {
	my $tmp=".comm\t${nmdecor}OPENSSL_ia32cap_P,8";
	if ($::macosx)	{ push (@@out,"$tmp,2\n"); }
	elsif ($::elf)	{ push (@@out,"$tmp,4\n"); }
	else		{ push (@@out,"$tmp\n"); }
    }
a167 1
sub ::data_short{   push(@@out,".value\t".join(',',@@_)."\n");  }
d183 1
a183 1
    if (($::pic && ($::elf || $::aout)) || $::macosx)
d209 1
a209 8
    if ($::android)
    {	$initseg.=<<___;
.section	.init_array
.align	4
.long	$f
___
    }
    elsif ($::elf)
d213 3
@

