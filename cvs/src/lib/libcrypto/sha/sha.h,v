head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21;
locks; strict;
comment	@ * @;


1.21
date	2015.09.13.21.09.56;	author doug;	state Exp;
branches;
next	1.20;
commitid	e818W60lrMrFrzEk;

1.20
date	2014.10.20.13.06.54;	author bcook;	state Exp;
branches;
next	1.19;
commitid	3Xsy3xjIIblEEksr;

1.19
date	2014.07.13.14.13.27;	author beck;	state Exp;
branches;
next	1.18;
commitid	rPjMIN89KFZYrTmB;

1.18
date	2014.07.13.10.27.22;	author beck;	state Exp;
branches;
next	1.17;
commitid	pubpykYnmNWn2j4W;

1.17
date	2014.07.10.22.45.58;	author jsing;	state Exp;
branches;
next	1.16;
commitid	nzndm3zqPmFurSaK;

1.16
date	2014.07.10.09.01.04;	author miod;	state Exp;
branches;
next	1.15;
commitid	TmEEhR59UbEp1DB6;

1.15
date	2014.06.14.10.28.31;	author avsm;	state Exp;
branches;
next	1.14;
commitid	Jd2WIxc60Phojmar;

1.14
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.24.09.16.08;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.28.21.14.50;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.04.38.11;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.15.20.06.10;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.26;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.11.43;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.44;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.48;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.48;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.54;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.16;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.59;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.10;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.43;	author djm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove SHA-0 support.

SHA-0 was withdrawn shortly after publication 20 years ago and replaced
with SHA-1.  This will require a major crank.

ok bcook@@, jsing@@
@
text
@/* $OpenBSD: sha.h,v 1.20 2014/10/20 13:06:54 bcook Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stddef.h>

#ifndef HEADER_SHA_H
#define HEADER_SHA_H
#if !defined(HAVE_ATTRIBUTE__BOUNDED__) && !defined(__OpenBSD__)
#define __bounded__(x, y, z)
#endif

#include <openssl/opensslconf.h>

#ifdef  __cplusplus
extern "C" {
#endif

#if defined(OPENSSL_NO_SHA) || defined(OPENSSL_NO_SHA1)
#error SHA is disabled.
#endif

/*
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * ! SHA_LONG has to be at least 32 bits wide.                    !
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */

#define SHA_LONG unsigned int

#define SHA_LBLOCK	16
#define SHA_CBLOCK	(SHA_LBLOCK*4)	/* SHA treats input data as a
					 * contiguous array of 32 bit
					 * wide big-endian values. */
#define SHA_LAST_BLOCK  (SHA_CBLOCK-8)
#define SHA_DIGEST_LENGTH 20

typedef struct SHAstate_st
	{
	SHA_LONG h0,h1,h2,h3,h4;
	SHA_LONG Nl,Nh;
	SHA_LONG data[SHA_LBLOCK];
	unsigned int num;
	} SHA_CTX;

#ifndef OPENSSL_NO_SHA1
int SHA1_Init(SHA_CTX *c);
int SHA1_Update(SHA_CTX *c, const void *data, size_t len)
	__attribute__ ((__bounded__(__buffer__,2,3)));
int SHA1_Final(unsigned char *md, SHA_CTX *c);
unsigned char *SHA1(const unsigned char *d, size_t n, unsigned char *md)
	__attribute__ ((__bounded__(__buffer__,1,2)));
void SHA1_Transform(SHA_CTX *c, const unsigned char *data);
#endif

#define SHA256_CBLOCK	(SHA_LBLOCK*4)	/* SHA-256 treats input data as a
					 * contiguous array of 32 bit
					 * wide big-endian values. */
#define SHA224_DIGEST_LENGTH	28
#define SHA256_DIGEST_LENGTH	32

typedef struct SHA256state_st
	{
	SHA_LONG h[8];
	SHA_LONG Nl,Nh;
	SHA_LONG data[SHA_LBLOCK];
	unsigned int num,md_len;
	} SHA256_CTX;

#ifndef OPENSSL_NO_SHA256
int SHA224_Init(SHA256_CTX *c);
int SHA224_Update(SHA256_CTX *c, const void *data, size_t len)
	__attribute__ ((__bounded__(__buffer__,2,3)));
int SHA224_Final(unsigned char *md, SHA256_CTX *c);
unsigned char *SHA224(const unsigned char *d, size_t n,unsigned char *md)
	__attribute__ ((__bounded__(__buffer__,1,2)));
int SHA256_Init(SHA256_CTX *c);
int SHA256_Update(SHA256_CTX *c, const void *data, size_t len)
	__attribute__ ((__bounded__(__buffer__,2,3)));
int SHA256_Final(unsigned char *md, SHA256_CTX *c);
unsigned char *SHA256(const unsigned char *d, size_t n,unsigned char *md)
	__attribute__ ((__bounded__(__buffer__,1,2)));
void SHA256_Transform(SHA256_CTX *c, const unsigned char *data);
#endif

#define SHA384_DIGEST_LENGTH	48
#define SHA512_DIGEST_LENGTH	64

#ifndef OPENSSL_NO_SHA512
/*
 * Unlike 32-bit digest algorithms, SHA-512 *relies* on SHA_LONG64
 * being exactly 64-bit wide. See Implementation Notes in sha512.c
 * for further details.
 */
#define SHA512_CBLOCK	(SHA_LBLOCK*8)	/* SHA-512 treats input data as a
					 * contiguous array of 64 bit
					 * wide big-endian values. */
#if defined(_LP64)
#define SHA_LONG64 unsigned long
#define U64(C)     C##UL
#else
#define SHA_LONG64 unsigned long long
#define U64(C)     C##ULL
#endif

typedef struct SHA512state_st
	{
	SHA_LONG64 h[8];
	SHA_LONG64 Nl,Nh;
	union {
		SHA_LONG64	d[SHA_LBLOCK];
		unsigned char	p[SHA512_CBLOCK];
	} u;
	unsigned int num,md_len;
	} SHA512_CTX;
#endif

#ifndef OPENSSL_NO_SHA512
int SHA384_Init(SHA512_CTX *c);
int SHA384_Update(SHA512_CTX *c, const void *data, size_t len)
	__attribute__ ((__bounded__(__buffer__,2,3)));
int SHA384_Final(unsigned char *md, SHA512_CTX *c);
unsigned char *SHA384(const unsigned char *d, size_t n,unsigned char *md)
	__attribute__ ((__bounded__(__buffer__,1,2)));
int SHA512_Init(SHA512_CTX *c);
int SHA512_Update(SHA512_CTX *c, const void *data, size_t len)
	__attribute__ ((__bounded__(__buffer__,2,3)));
int SHA512_Final(unsigned char *md, SHA512_CTX *c);
unsigned char *SHA512(const unsigned char *d, size_t n,unsigned char *md)
	__attribute__ ((__bounded__(__buffer__,1,2)));
void SHA512_Transform(SHA512_CTX *c, const unsigned char *data);
#endif

#ifdef  __cplusplus
}
#endif

#endif
@


1.20
log
@digests: *_LONG_LOG2 is not used, stop talking about it.

Modified patch from Dmitry Eremin-Solenikov

leave the sole public define in ripemd.h

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: sha.h,v 1.19 2014/07/13 14:13:27 beck Exp $ */
d73 1
a73 1
#if defined(OPENSSL_NO_SHA) || (defined(OPENSSL_NO_SHA0) && defined(OPENSSL_NO_SHA1))
a99 9
#ifndef OPENSSL_NO_SHA0
int SHA_Init(SHA_CTX *c);
int SHA_Update(SHA_CTX *c, const void *data, size_t len)
	__attribute__ ((__bounded__(__buffer__,2,3)));
int SHA_Final(unsigned char *md, SHA_CTX *c);
unsigned char *SHA(const unsigned char *d, size_t n, unsigned char *md)
	__attribute__ ((__bounded__(__buffer__,1,2)));
void SHA_Transform(SHA_CTX *c, const unsigned char *data);
#endif
@


1.19
log
@unbreak build this needed to be an and..
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: sha.h,v 1.18 2014/07/13 10:27:22 beck Exp $ */
d79 1
a79 2
 * ! SHA_LONG has to be at least 32 bits wide. If it's wider, then !
 * ! SHA_LONG_LOG2 has to be defined along.                        !
@


1.18
log
@Take out __bounded__ in the include files we use it in when not on OpenBSD.
while we can take it out in portable at compile time, it is still a problem
when we install this header file on a system that doesn't support __bounded__
if this is unguarded.
ok miod@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: sha.h,v 1.17 2014/07/10 22:45:58 jsing Exp $ */
d63 1
a63 1
#if !defined(HAVE_ATTRIBUTE__BOUNDED__) || !defined(__OpenBSD__)
@


1.17
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: sha.h,v 1.16 2014/07/10 09:01:04 miod Exp $ */
d63 3
@


1.16
log
@Remove bogus preprocessor statements trying to pick the largest integer
type for BF_LONG, MD[45]_LONG and SHA_LONG.

First, the preprocessor symbols they check for a 64-bit system is __ILP64__
which no sane system provides; second, on the platforms which have assembler
code to speed things up, the assembler code assumes a 32-bit type will be used.
@
text
@d1 1
a1 1
/* $OpenBSD: sha.h,v 1.15 2014/06/14 10:28:31 avsm Exp $ */
d59 2
a62 2

#include <stddef.h>
@


1.15
log
@Add more bounded attributes to the buffer and md5/sha headers in libssl

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: sha.h,v 1.14 2014/06/12 15:49:30 deraadt Exp $ */
a80 6
#if defined(__LP32__)
#define SHA_LONG unsigned long
#elif defined(__ILP64__)
#define SHA_LONG unsigned long
#define SHA_LONG_LOG2 3
#else
a81 1
#endif
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d107 2
a108 1
int SHA_Update(SHA_CTX *c, const void *data, size_t len);
d110 2
a111 1
unsigned char *SHA(const unsigned char *d, size_t n, unsigned char *md);
d116 2
a117 1
int SHA1_Update(SHA_CTX *c, const void *data, size_t len);
d119 2
a120 1
unsigned char *SHA1(const unsigned char *d, size_t n, unsigned char *md);
d140 2
a141 1
int SHA224_Update(SHA256_CTX *c, const void *data, size_t len);
d143 2
a144 1
unsigned char *SHA224(const unsigned char *d, size_t n,unsigned char *md);
d146 2
a147 1
int SHA256_Update(SHA256_CTX *c, const void *data, size_t len);
d149 2
a150 1
unsigned char *SHA256(const unsigned char *d, size_t n,unsigned char *md);
d188 2
a189 1
int SHA384_Update(SHA512_CTX *c, const void *data, size_t len);
d191 2
a192 1
unsigned char *SHA384(const unsigned char *d, size_t n,unsigned char *md);
d194 2
a195 1
int SHA512_Update(SHA512_CTX *c, const void *data, size_t len);
d197 2
a198 1
unsigned char *SHA512(const unsigned char *d, size_t n,unsigned char *md);
@


1.13
log
@Almost nothing actually needs to include <openssl/e_os2.h>, however by
including it they get <openssl/opensslconf.h>. So instead of pulling in
<openssl/e_os2.h>, just pull in <openssl/opensslconf.h>.

"go ahead" miod@@
@
text
@d1 1
a1 1
/* crypto/sha/sha.h */
@


1.12
log
@Remove WIN32, WIN64 and MINGW32 tentacles.
Also check for _LP64 rather than __arch64__ (the former being more reliable
than __LP64__ or __arch64__) to tell 64-bit int platforms apart from 32-bit
int platforms.

Loosely based upon a diff from Martijn van Duren on tech@@
@
text
@a61 1
#include <openssl/e_os2.h>
d63 2
@


1.11
log
@Remove _CRAY references. Note that this pleads for the use of <stdint.h>
fixed-width types instead of choosing int or long depending upon what we
think the architecture support.
@
text
@d157 1
a157 4
#if (defined(_WIN32) || defined(_WIN64)) && !defined(__MINGW32__)
#define SHA_LONG64 unsigned __int64
#define U64(C)     C##UI64
#elif defined(__arch64__)
@


1.10
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d82 1
a82 1
#elif defined(OPENSSL_SYS_CRAY) || defined(__ILP64__)
@


1.9
log
@resolve conflicts
@
text
@a72 4
#if defined(OPENSSL_FIPS)
#define FIPS_SHA_SIZE_T size_t
#endif

a104 3
#ifdef OPENSSL_FIPS
int private_SHA_Init(SHA_CTX *c);
#endif
a111 3
#ifdef OPENSSL_FIPS
int private_SHA1_Init(SHA_CTX *c);
#endif
a133 4
#ifdef OPENSSL_FIPS
int private_SHA224_Init(SHA256_CTX *c);
int private_SHA256_Init(SHA256_CTX *c);
#endif
a180 4
#ifdef OPENSSL_FIPS
int private_SHA384_Init(SHA512_CTX *c);
int private_SHA512_Init(SHA512_CTX *c);
#endif
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d109 3
d119 3
d144 4
d195 4
@


1.7
log
@resolve conflicts
@
text
@d84 1
a84 1
#if defined(OPENSSL_SYS_WIN16) || defined(__LP32__)
a108 3
#ifdef OPENSSL_FIPS
int private_SHA_Init(SHA_CTX *c);
#endif
@


1.6
log
@resolve conflicts
@
text
@d109 3
@


1.5
log
@resolve conflicts
@
text
@d63 1
d74 1
a74 1
#define FIPS_SHA_SIZE_T unsigned long
d105 1
a105 1
	int num;
a108 3
#ifdef OPENSSL_FIPS
int private_SHA_Init(SHA_CTX *c);
#endif
d110 1
a110 1
int SHA_Update(SHA_CTX *c, const void *data, unsigned long len);
d112 1
a112 1
unsigned char *SHA(const unsigned char *d, unsigned long n,unsigned char *md);
d117 1
a117 1
int SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
d119 1
a119 1
unsigned char *SHA1(const unsigned char *d, unsigned long n,unsigned char *md);
d122 74
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d72 4
d108 3
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d62 2
d68 1
a68 1
#if defined(NO_SHA) || (defined(NO_SHA0) && defined(NO_SHA1))
d79 1
a79 1
#if defined(WIN16) || defined(__LP32__)
d81 1
a81 1
#elif defined(_CRAY) || defined(__ILP64__)
d103 4
a106 4
#ifndef NO_SHA0
void SHA_Init(SHA_CTX *c);
void SHA_Update(SHA_CTX *c, const void *data, unsigned long len);
void SHA_Final(unsigned char *md, SHA_CTX *c);
d110 4
a113 4
#ifndef NO_SHA1
void SHA1_Init(SHA_CTX *c);
void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
void SHA1_Final(unsigned char *md, SHA_CTX *c);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d66 1
a66 1
#ifdef NO_SHA
d103 1
a103 1
void SHA_Update(SHA_CTX *c, const unsigned char *data, unsigned long len);
d106 1
a106 1
void SHA_Transform(SHA_CTX *c, unsigned char *data);
d110 1
a110 1
void SHA1_Update(SHA_CTX *c, const unsigned char *data, unsigned long len);
d113 1
a113 1
void SHA1_Transform(SHA_CTX *c, unsigned char *data);
@


1.1
log
@Initial revision
@
text
@d66 20
a85 1
#define SHA_CBLOCK	64
d87 4
a90 3
#define SHA_BLOCK	16
#define SHA_LAST_BLOCK  56
#define SHA_LENGTH_BLOCK 8
d95 3
a97 3
	unsigned long h0,h1,h2,h3,h4;
	unsigned long Nl,Nh;
	unsigned long data[SHA_LBLOCK];
d101 1
a101 1
#ifndef NOPROTO
d103 1
a103 1
void SHA_Update(SHA_CTX *c, unsigned char *data, unsigned long len);
d105 1
a105 1
unsigned char *SHA(unsigned char *d, unsigned long n,unsigned char *md);
d107 2
d110 1
a110 1
void SHA1_Update(SHA_CTX *c, unsigned char *data, unsigned long len);
d112 1
a112 1
unsigned char *SHA1(unsigned char *d, unsigned long n,unsigned char *md);
a113 11
#else
void SHA_Init();
void SHA_Update();
void SHA_Final();
unsigned char *SHA();
void SHA_Transform();
void SHA1_Init();
void SHA1_Update();
void SHA1_Final();
unsigned char *SHA1();
void SHA1_Transform();
a114 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a61 2
#include <openssl/e_os2.h>

d66 1
a66 20
#if defined(OPENSSL_NO_SHA) || (defined(OPENSSL_NO_SHA0) && defined(OPENSSL_NO_SHA1))
#error SHA is disabled.
#endif

/*
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * ! SHA_LONG has to be at least 32 bits wide. If it's wider, then !
 * ! SHA_LONG_LOG2 has to be defined along.                        !
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */

#if defined(OPENSSL_SYS_WIN16) || defined(__LP32__)
#define SHA_LONG unsigned long
#elif defined(OPENSSL_SYS_CRAY) || defined(__ILP64__)
#define SHA_LONG unsigned long
#define SHA_LONG_LOG2 3
#else
#define SHA_LONG unsigned int
#endif

d68 3
a70 4
#define SHA_CBLOCK	(SHA_LBLOCK*4)	/* SHA treats input data as a
					 * contiguous array of 32 bit
					 * wide big-endian values. */
#define SHA_LAST_BLOCK  (SHA_CBLOCK-8)
d75 3
a77 3
	SHA_LONG h0,h1,h2,h3,h4;
	SHA_LONG Nl,Nh;
	SHA_LONG data[SHA_LBLOCK];
d81 22
a102 13
#ifndef OPENSSL_NO_SHA0
int SHA_Init(SHA_CTX *c);
int SHA_Update(SHA_CTX *c, const void *data, unsigned long len);
int SHA_Final(unsigned char *md, SHA_CTX *c);
unsigned char *SHA(const unsigned char *d, unsigned long n,unsigned char *md);
void SHA_Transform(SHA_CTX *c, const unsigned char *data);
#endif
#ifndef OPENSSL_NO_SHA1
int SHA1_Init(SHA_CTX *c);
int SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
int SHA1_Final(unsigned char *md, SHA_CTX *c);
unsigned char *SHA1(const unsigned char *d, unsigned long n,unsigned char *md);
void SHA1_Transform(SHA_CTX *c, const unsigned char *data);
d104 1
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a71 4
#if defined(OPENSSL_FIPS)
#define FIPS_SHA_SIZE_T unsigned long
#endif

a103 3
#ifdef OPENSSL_FIPS
int private_SHA_Init(SHA_CTX *c);
#endif
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a62 1
#include <stddef.h>
d73 1
a73 1
#define FIPS_SHA_SIZE_T size_t
d104 1
a104 1
	unsigned int num;
d108 3
d112 1
a112 1
int SHA_Update(SHA_CTX *c, const void *data, size_t len);
d114 1
a114 1
unsigned char *SHA(const unsigned char *d, size_t n, unsigned char *md);
d119 1
a119 1
int SHA1_Update(SHA_CTX *c, const void *data, size_t len);
d121 1
a121 1
unsigned char *SHA1(const unsigned char *d, size_t n, unsigned char *md);
a123 74

#define SHA256_CBLOCK	(SHA_LBLOCK*4)	/* SHA-256 treats input data as a
					 * contiguous array of 32 bit
					 * wide big-endian values. */
#define SHA224_DIGEST_LENGTH	28
#define SHA256_DIGEST_LENGTH	32

typedef struct SHA256state_st
	{
	SHA_LONG h[8];
	SHA_LONG Nl,Nh;
	SHA_LONG data[SHA_LBLOCK];
	unsigned int num,md_len;
	} SHA256_CTX;

#ifndef OPENSSL_NO_SHA256
int SHA224_Init(SHA256_CTX *c);
int SHA224_Update(SHA256_CTX *c, const void *data, size_t len);
int SHA224_Final(unsigned char *md, SHA256_CTX *c);
unsigned char *SHA224(const unsigned char *d, size_t n,unsigned char *md);
int SHA256_Init(SHA256_CTX *c);
int SHA256_Update(SHA256_CTX *c, const void *data, size_t len);
int SHA256_Final(unsigned char *md, SHA256_CTX *c);
unsigned char *SHA256(const unsigned char *d, size_t n,unsigned char *md);
void SHA256_Transform(SHA256_CTX *c, const unsigned char *data);
#endif

#define SHA384_DIGEST_LENGTH	48
#define SHA512_DIGEST_LENGTH	64

#ifndef OPENSSL_NO_SHA512
/*
 * Unlike 32-bit digest algorithms, SHA-512 *relies* on SHA_LONG64
 * being exactly 64-bit wide. See Implementation Notes in sha512.c
 * for further details.
 */
#define SHA512_CBLOCK	(SHA_LBLOCK*8)	/* SHA-512 treats input data as a
					 * contiguous array of 64 bit
					 * wide big-endian values. */
#if (defined(_WIN32) || defined(_WIN64)) && !defined(__MINGW32__)
#define SHA_LONG64 unsigned __int64
#define U64(C)     C##UI64
#elif defined(__arch64__)
#define SHA_LONG64 unsigned long
#define U64(C)     C##UL
#else
#define SHA_LONG64 unsigned long long
#define U64(C)     C##ULL
#endif

typedef struct SHA512state_st
	{
	SHA_LONG64 h[8];
	SHA_LONG64 Nl,Nh;
	union {
		SHA_LONG64	d[SHA_LBLOCK];
		unsigned char	p[SHA512_CBLOCK];
	} u;
	unsigned int num,md_len;
	} SHA512_CTX;
#endif

#ifndef OPENSSL_NO_SHA512
int SHA384_Init(SHA512_CTX *c);
int SHA384_Update(SHA512_CTX *c, const void *data, size_t len);
int SHA384_Final(unsigned char *md, SHA512_CTX *c);
unsigned char *SHA384(const unsigned char *d, size_t n,unsigned char *md);
int SHA512_Init(SHA512_CTX *c);
int SHA512_Update(SHA512_CTX *c, const void *data, size_t len);
int SHA512_Final(unsigned char *md, SHA512_CTX *c);
unsigned char *SHA512(const unsigned char *d, size_t n,unsigned char *md);
void SHA512_Transform(SHA512_CTX *c, const unsigned char *data);
#endif

@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@a108 3
#ifdef OPENSSL_FIPS
int private_SHA_Init(SHA_CTX *c);
#endif
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d84 1
a84 1
#if defined(__LP32__)
d109 3
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@a108 3
#ifdef OPENSSL_FIPS
int private_SHA_Init(SHA_CTX *c);
#endif
a115 3
#ifdef OPENSSL_FIPS
int private_SHA1_Init(SHA_CTX *c);
#endif
a137 4
#ifdef OPENSSL_FIPS
int private_SHA224_Init(SHA256_CTX *c);
int private_SHA256_Init(SHA256_CTX *c);
#endif
a184 4
#ifdef OPENSSL_FIPS
int private_SHA384_Init(SHA512_CTX *c);
int private_SHA512_Init(SHA512_CTX *c);
#endif
@


