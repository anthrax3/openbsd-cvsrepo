head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.2
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.19
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.18;
commitid	yQEL1wOWIearrW15;

1.18
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.04.20.20.06.19;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.20.16.10.10;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.25.18.57.51;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.08.08.13.24;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.08.08.03.14;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.05.11.05.08;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.12;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.51;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.00;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.53;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.18;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: x509_txt.c,v 1.18 2014/06/12 15:49:31 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <time.h>

#include <openssl/asn1.h>
#include <openssl/buffer.h>
#include <openssl/evp.h>
#include <openssl/lhash.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

const char *
X509_verify_cert_error_string(long n)
{
	static char buf[100];

	switch ((int)n) {
	case X509_V_OK:
		return("ok");
	case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:
		return("unable to get issuer certificate");
	case X509_V_ERR_UNABLE_TO_GET_CRL:
		return("unable to get certificate CRL");
	case X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE:
		return("unable to decrypt certificate's signature");
	case X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE:
		return("unable to decrypt CRL's signature");
	case X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY:
		return("unable to decode issuer public key");
	case X509_V_ERR_CERT_SIGNATURE_FAILURE:
		return("certificate signature failure");
	case X509_V_ERR_CRL_SIGNATURE_FAILURE:
		return("CRL signature failure");
	case X509_V_ERR_CERT_NOT_YET_VALID:
		return("certificate is not yet valid");
	case X509_V_ERR_CRL_NOT_YET_VALID:
		return("CRL is not yet valid");
	case X509_V_ERR_CERT_HAS_EXPIRED:
		return("certificate has expired");
	case X509_V_ERR_CRL_HAS_EXPIRED:
		return("CRL has expired");
	case X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:
		return("format error in certificate's notBefore field");
	case X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD:
		return("format error in certificate's notAfter field");
	case X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD:
		return("format error in CRL's lastUpdate field");
	case X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD:
		return("format error in CRL's nextUpdate field");
	case X509_V_ERR_OUT_OF_MEM:
		return("out of memory");
	case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:
		return("self signed certificate");
	case X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN:
		return("self signed certificate in certificate chain");
	case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:
		return("unable to get local issuer certificate");
	case X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE:
		return("unable to verify the first certificate");
	case X509_V_ERR_CERT_CHAIN_TOO_LONG:
		return("certificate chain too long");
	case X509_V_ERR_CERT_REVOKED:
		return("certificate revoked");
	case X509_V_ERR_INVALID_CA:
		return ("invalid CA certificate");
	case X509_V_ERR_INVALID_NON_CA:
		return ("invalid non-CA certificate (has CA markings)");
	case X509_V_ERR_PATH_LENGTH_EXCEEDED:
		return ("path length constraint exceeded");
	case X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED:
		return("proxy path length constraint exceeded");
	case X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED:
		return("proxy certificates not allowed, please set the appropriate flag");
	case X509_V_ERR_INVALID_PURPOSE:
		return ("unsupported certificate purpose");
	case X509_V_ERR_CERT_UNTRUSTED:
		return ("certificate not trusted");
	case X509_V_ERR_CERT_REJECTED:
		return ("certificate rejected");
	case X509_V_ERR_APPLICATION_VERIFICATION:
		return("application verification failure");
	case X509_V_ERR_SUBJECT_ISSUER_MISMATCH:
		return("subject issuer mismatch");
	case X509_V_ERR_AKID_SKID_MISMATCH:
		return("authority and subject key identifier mismatch");
	case X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH:
		return("authority and issuer serial number mismatch");
	case X509_V_ERR_KEYUSAGE_NO_CERTSIGN:
		return("key usage does not include certificate signing");
	case X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER:
		return("unable to get CRL issuer certificate");
	case X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION:
		return("unhandled critical extension");
	case X509_V_ERR_KEYUSAGE_NO_CRL_SIGN:
		return("key usage does not include CRL signing");
	case X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE:
		return("key usage does not include digital signature");
	case X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION:
		return("unhandled critical CRL extension");
	case X509_V_ERR_INVALID_EXTENSION:
		return("invalid or inconsistent certificate extension");
	case X509_V_ERR_INVALID_POLICY_EXTENSION:
		return("invalid or inconsistent certificate policy extension");
	case X509_V_ERR_NO_EXPLICIT_POLICY:
		return("no explicit policy");
	case X509_V_ERR_DIFFERENT_CRL_SCOPE:
		return("Different CRL scope");
	case X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE:
		return("Unsupported extension feature");
	case X509_V_ERR_UNNESTED_RESOURCE:
		return("RFC 3779 resource not subset of parent's resources");
	case X509_V_ERR_PERMITTED_VIOLATION:
		return("permitted subtree violation");
	case X509_V_ERR_EXCLUDED_VIOLATION:
		return("excluded subtree violation");
	case X509_V_ERR_SUBTREE_MINMAX:
		return("name constraints minimum and maximum not supported");
	case X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE:
		return("unsupported name constraint type");
	case X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX:
		return("unsupported or invalid name constraint syntax");
	case X509_V_ERR_UNSUPPORTED_NAME_SYNTAX:
		return("unsupported or invalid name syntax");
	case X509_V_ERR_CRL_PATH_VALIDATION_ERROR:
		return("CRL path validation error");

	default:
		(void) snprintf(buf, sizeof buf, "error number %ld", n);
		return(buf);
	}
}
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
a61 1
#include <errno.h>
d63 1
a63 2
#include "cryptlib.h"
#include <openssl/lhash.h>
d66 2
a67 1
#include <openssl/asn1.h>
a68 1
#include <openssl/objects.h>
@


1.17
log
@Restore beck's (void)snprintf(): they were reviewed.
@
text
@d1 1
a1 1
/* crypto/x509/x509_txt.c */
@


1.16
log
@KNF.
@
text
@d187 2
a188 2
		snprintf(buf, sizeof buf, "error number %ld", n);
		return (buf);
@


1.15
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d71 2
a72 1
const char *X509_verify_cert_error_string(long n)
d166 1
a166 1
	return("Different CRL scope");
d168 3
a170 4
	return("Unsupported extension feature");
 	case X509_V_ERR_UNNESTED_RESOURCE:
 		return("RFC 3779 resource not subset of parent's resources");

d187 2
a188 2
		snprintf(buf,sizeof buf,"error number %ld",n);
		return(buf);
a190 2


@


1.14
log
@blunt force knf
@
text
@d187 1
a187 1
		(void) snprintf(buf,sizeof buf,"error number %ld",n);
@


1.13
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d72 1
a72 1
	{
d75 1
a75 2
	switch ((int)n)
		{
a188 1
		}
d190 1
@


1.12
log
@resolve conflicts, fix local changes
@
text
@d188 1
a188 1
		BIO_snprintf(buf,sizeof buf,"error number %ld",n);
@


1.11
log
@resolve conflicts
@
text
@d165 22
a186 2
	case X509_V_ERR_UNNESTED_RESOURCE:
		return("RFC 3779 resource not subset of parent's resources");
@


1.10
log
@resolve conflicts
@
text
@d132 1
a132 1
		return("proxy cerificates not allowed, please set the appropriate flag");
d159 8
@


1.9
log
@update missing pieces from 0.9.7d; ok henning
crank minor for API extensions
@
text
@d125 2
d129 4
a148 1

a150 1

a152 1

d155 2
a156 1

a158 1

@


1.8
log
@backout for now
@
text
@d150 6
d157 1
a157 1
		snprintf(buf,sizeof buf,"error number %ld",n);
@


1.7
log
@merge 0.9.7d
@
text
@a149 6
	case X509_V_ERR_KEYUSAGE_NO_CRL_SIGN:
		return("key usage does not include CRL signing");

	case X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION:
		return("unhandled critical CRL extension");

d151 1
a151 1
		BIO_snprintf(buf,sizeof buf,"error number %ld",n);
@


1.6
log
@Trivial sprintf() -> snprintf() changes. ok deraadt@@
@
text
@d150 6
d157 1
a157 1
		snprintf(buf,sizeof buf,"error number %ld",n);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d151 1
a151 1
		sprintf(buf,"error number %ld",n);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d86 1
a86 1
		return("unable to decrypt CRL's's signature");
d98 1
a98 1
		return("Certificate has expired");
d143 6
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d135 9
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a61 1
#include <sys/types.h>
d123 10
@


1.1
log
@Initial revision
@
text
@d65 6
a70 7
#include "lhash.h"
#include "buffer.h"
#include "evp.h"
#include "asn1.h"
#include "x509.h"
#include "objects.h"
#include "pem.h"
d72 1
a72 2
char *X509_verify_cert_error_string(n)
long n;
d122 2
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 1
d65 7
a71 6
#include <openssl/lhash.h>
#include <openssl/buffer.h>
#include <openssl/evp.h>
#include <openssl/asn1.h>
#include <openssl/x509.h>
#include <openssl/objects.h>
d73 2
a74 1
const char *X509_verify_cert_error_string(long n)
d89 1
a89 1
		return("unable to decrypt CRL's signature");
d101 1
a101 1
		return("certificate has expired");
a123 12
	case X509_V_ERR_CERT_REVOKED:
		return("certificate revoked");
	case X509_V_ERR_INVALID_CA:
		return ("invalid CA certificate");
	case X509_V_ERR_PATH_LENGTH_EXCEEDED:
		return ("path length constraint exceeded");
	case X509_V_ERR_INVALID_PURPOSE:
		return ("unsupported certificate purpose");
	case X509_V_ERR_CERT_UNTRUSTED:
		return ("certificate not trusted");
	case X509_V_ERR_CERT_REJECTED:
		return ("certificate rejected");
a125 15
	case X509_V_ERR_SUBJECT_ISSUER_MISMATCH:
		return("subject issuer mismatch");
	case X509_V_ERR_AKID_SKID_MISMATCH:
		return("authority and subject key identifier mismatch");
	case X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH:
		return("authority and issuer serial number mismatch");
	case X509_V_ERR_KEYUSAGE_NO_CERTSIGN:
		return("key usage does not include certificate signing");

	case X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER:
		return("unable to get CRL issuer certificate");

	case X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION:
		return("unhandled critical extension");

@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@a149 6
	case X509_V_ERR_KEYUSAGE_NO_CRL_SIGN:
		return("key usage does not include CRL signing");

	case X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION:
		return("unhandled critical CRL extension");

d151 1
a151 1
		BIO_snprintf(buf,sizeof buf,"error number %ld",n);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a124 2
	case X509_V_ERR_INVALID_NON_CA:
		return ("invalid non-CA certificate (has CA markings)");
a126 4
	case X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED:
		return("proxy path length constraint exceeded");
	case X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED:
		return("proxy cerificates not allowed, please set the appropriate flag");
d143 1
d146 1
d149 1
d152 1
a152 2
	case X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE:
		return("key usage does not include digital signature");
d155 1
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d132 1
a132 1
		return("proxy certificates not allowed, please set the appropriate flag");
a158 8
	case X509_V_ERR_INVALID_EXTENSION:
		return("invalid or inconsistent certificate extension");
	case X509_V_ERR_INVALID_POLICY_EXTENSION:
		return("invalid or inconsistent certificate policy extension");
	case X509_V_ERR_NO_EXPLICIT_POLICY:
		return("no explicit policy");
	case X509_V_ERR_UNNESTED_RESOURCE:
		return("RFC 3779 resource not subset of parent's resources");
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d165 2
a166 22
	case X509_V_ERR_DIFFERENT_CRL_SCOPE:
	return("Different CRL scope");
	case X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE:
	return("Unsupported extension feature");
 	case X509_V_ERR_UNNESTED_RESOURCE:
 		return("RFC 3779 resource not subset of parent's resources");

	case X509_V_ERR_PERMITTED_VIOLATION:
		return("permitted subtree violation");
	case X509_V_ERR_EXCLUDED_VIOLATION:
		return("excluded subtree violation");
	case X509_V_ERR_SUBTREE_MINMAX:
		return("name constraints minimum and maximum not supported");
	case X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE:
		return("unsupported name constraint type");
	case X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX:
		return("unsupported or invalid name constraint syntax");
	case X509_V_ERR_UNSUPPORTED_NAME_SYNTAX:
		return("unsupported or invalid name syntax");
	case X509_V_ERR_CRL_PATH_VALIDATION_ERROR:
		return("CRL path validation error");

@


