head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.2
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17;
locks; strict;
comment	@ * @;


1.17
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.16;
commitid	kT0fLt3r4lroFJra;

1.16
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.14;
commitid	id8dTrTMtnTn4fqt;

1.14
date	2014.07.10.11.25.13;	author tedu;	state Exp;
branches;
next	1.13;
commitid	Pv7aSK7aYL3NQSpP;

1.13
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.04.20.16.15.01;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.20.15.36.20;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.16.20.36.35;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.15.17.46.17;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.01.19.51.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.13;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.51;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.00;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: x509_obj.c,v 1.16 2014/07/11 08:44:49 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/lhash.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

char *
X509_NAME_oneline(X509_NAME *a, char *buf, int len)
{
	X509_NAME_ENTRY *ne;
	int i;
	int n, lold, l, l1, l2, num, j, type;
	const char *s;
	char *p;
	unsigned char *q;
	BUF_MEM *b = NULL;
	static const char hex[17] = "0123456789ABCDEF";
	int gs_doit[4];
	char tmp_buf[80];

	if (buf == NULL) {
		if ((b = BUF_MEM_new()) == NULL)
			goto err;
		if (!BUF_MEM_grow(b, 200))
			goto err;
		b->data[0] = '\0';
		len = 200;
	}
	if (a == NULL) {
		if (b) {
			buf = b->data;
			free(b);
		}
		strlcpy(buf, "NO X509_NAME", len);
		return buf;
	}

	len--; /* space for '\0' */
	l = 0;
	for (i = 0; i < sk_X509_NAME_ENTRY_num(a->entries); i++) {
		ne = sk_X509_NAME_ENTRY_value(a->entries, i);
		n = OBJ_obj2nid(ne->object);
		if ((n == NID_undef) || ((s = OBJ_nid2sn(n)) == NULL)) {
			i2t_ASN1_OBJECT(tmp_buf, sizeof(tmp_buf), ne->object);
			s = tmp_buf;
		}
		l1 = strlen(s);

		type = ne->value->type;
		num = ne->value->length;
		q = ne->value->data;
		if ((type == V_ASN1_GENERALSTRING) && ((num % 4) == 0)) {
			gs_doit[0] = gs_doit[1] = gs_doit[2] = gs_doit[3] = 0;
			for (j = 0; j < num; j++)
				if (q[j] != 0)
					gs_doit[j & 3] = 1;

			if (gs_doit[0]|gs_doit[1]|gs_doit[2])
				gs_doit[0] = gs_doit[1] = gs_doit[2] = gs_doit[3] = 1;
			else {
				gs_doit[0] = gs_doit[1] = gs_doit[2] = 0;
				gs_doit[3] = 1;
			}
		} else
			gs_doit[0] = gs_doit[1] = gs_doit[2] = gs_doit[3] = 1;

		for (l2 = j=0; j < num; j++) {
			if (!gs_doit[j&3])
				continue;
			l2++;
			if ((q[j] < ' ') || (q[j] > '~'))
				l2 += 3;
		}

		lold = l;
		l += 1 + l1 + 1 + l2;
		if (b != NULL) {
			if (!BUF_MEM_grow(b, l + 1))
				goto err;
			p = &(b->data[lold]);
		} else if (l > len) {
			break;
		} else
			p = &(buf[lold]);
		*(p++) = '/';
		memcpy(p, s, l1);
		p += l1;
		*(p++) = '=';
		q = ne->value->data;
		for (j = 0; j < num; j++) {
			if (!gs_doit[j & 3])
				continue;
			n = q[j];
			if ((n < ' ') || (n > '~')) {
				*(p++) = '\\';
				*(p++) = 'x';
				*(p++) = hex[(n >> 4) & 0x0f];
				*(p++) = hex[n & 0x0f];
			} else
				*(p++) = n;
		}
		*p = '\0';
	}
	if (b != NULL) {
		p = b->data;
		free(b);
	} else
		p = buf;
	if (i == 0)
		*p = '\0';
	return (p);

err:
	X509error(ERR_R_MALLOC_FAILURE);
	if (b != NULL)
		BUF_MEM_free(b);
	return (NULL);
}
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_obj.c,v 1.15 2014/07/10 13:58:23 jsing Exp $ */
d175 1
a175 1
	X509err(X509_F_X509_NAME_ONELINE, ERR_R_MALLOC_FAILURE);
@


1.15
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_obj.c,v 1.14 2014/07/10 11:25:13 tedu Exp $ */
d62 2
a63 1
#include "cryptlib.h"
a66 1
#include <openssl/buffer.h>
@


1.14
log
@delete some casts. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: x509_obj.c,v 1.13 2014/06/12 15:49:31 deraadt Exp $ */
d60 2
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d145 1
a145 1
		memcpy(p, s, (unsigned int)l1);
@


1.12
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/x509/x509_obj.c */
@


1.11
log
@KNF.
@
text
@d71 1
a71 1
	int n, lold, l,l1, l2, num, j, type;
@


1.10
log
@blunt force knf
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 2
a67 1
char *X509_NAME_oneline(X509_NAME *a, char *buf, int len)
d70 2
a71 2
int i;
	int n,lold,l,l1,l2,num,j,type;
d75 2
a76 2
	BUF_MEM *b=NULL;
	static const char hex[17]="0123456789ABCDEF";
d81 6
a86 4
		if ((b=BUF_MEM_new()) == NULL) goto err;
		if (!BUF_MEM_grow(b,200)) goto err;
		b->data[0]='\0';
		len=200;
d89 2
a90 2
		if(b) {
			buf=b->data;
d93 1
a93 1
		strlcpy(buf,"NO X509_NAME",len);
d98 7
a104 7
	l=0;
	for (i=0; i<sk_X509_NAME_ENTRY_num(a->entries); i++) {
		ne=sk_X509_NAME_ENTRY_value(a->entries,i);
		n=OBJ_obj2nid(ne->object);
		if ((n == NID_undef) || ((s=OBJ_nid2sn(n)) == NULL)) {
			i2t_ASN1_OBJECT(tmp_buf,sizeof(tmp_buf),ne->object);
			s=tmp_buf;
d106 1
a106 1
		l1=strlen(s);
d108 8
a115 7
		type=ne->value->type;
		num=ne->value->length;
		q=ne->value->data;
		if ((type == V_ASN1_GENERALSTRING) && ((num%4) == 0)) {
			gs_doit[0]=gs_doit[1]=gs_doit[2]=gs_doit[3]=0;
			for (j=0; j<num; j++)
				if (q[j] != 0) gs_doit[j&3]=1;
d118 1
a118 1
				gs_doit[0]=gs_doit[1]=gs_doit[2]=gs_doit[3]=1;
d120 2
a121 2
				gs_doit[0]=gs_doit[1]=gs_doit[2]=0;
				gs_doit[3]=1;
d124 1
a124 1
			gs_doit[0]=gs_doit[1]=gs_doit[2]=gs_doit[3]=1;
d126 3
a128 2
		for (l2=j=0; j<num; j++) {
			if (!gs_doit[j&3]) continue;
d130 2
a131 1
			if ((q[j] < ' ') || (q[j] > '~')) l2+=3;
d134 2
a135 2
		lold=l;
		l+=1+l1+1+l2;
d137 3
a139 2
			if (!BUF_MEM_grow(b,l+1)) goto err;
			p= &(b->data[lold]);
d143 10
a152 8
			p= &(buf[lold]);
		*(p++)='/';
		memcpy(p,s,(unsigned int)l1); p+=l1;
		*(p++)='=';
		q=ne->value->data;
		for (j=0; j<num; j++) {
			if (!gs_doit[j&3]) continue;
			n=q[j];
d154 4
a157 4
				*(p++)='\\';
				*(p++)='x';
				*(p++)=hex[(n>>4)&0x0f];
				*(p++)=hex[n&0x0f];
d159 1
a159 1
				*(p++)=n;
d161 1
a161 1
		*p='\0';
d164 1
a164 1
		p=b->data;
d167 1
a167 1
		p=buf;
d170 2
a171 1
	return(p);
d173 4
a176 3
	X509err(X509_F_X509_NAME_ONELINE,ERR_R_MALLOC_FAILURE);
	if (b != NULL) BUF_MEM_free(b);
	return(NULL);
a177 1

@


1.9
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d67 1
a67 1
	{
d79 1
a79 2
	if (buf == NULL)
		{
d84 5
d90 3
a92 10
	if (a == NULL)
	    {
	    if(b)
		{
		buf=b->data;
		free(b);
		}
	    strlcpy(buf,"NO X509_NAME",len);
	    return buf;
	    }
d96 1
a96 2
	for (i=0; i<sk_X509_NAME_ENTRY_num(a->entries); i++)
		{
d99 1
a99 2
		if ((n == NID_undef) || ((s=OBJ_nid2sn(n)) == NULL))
			{
d102 1
a102 1
			}
d108 1
a108 2
		if ((type == V_ASN1_GENERALSTRING) && ((num%4) == 0))
			{
d115 1
a115 2
			else
				{
a117 1
				}
d119 1
a119 1
		else
d122 1
a122 2
		for (l2=j=0; j<num; j++)
			{
d126 1
a126 1
			}
d130 1
a130 2
		if (b != NULL)
			{
d133 1
a133 3
			}
		else if (l > len)
			{
d135 1
a135 2
			}
		else
d141 1
a141 2
		for (j=0; j<num; j++)
			{
d144 1
a144 2
			if ((n < ' ') || (n > '~'))
				{
d149 1
a149 2
				}
			else
d151 1
a151 1
			}
d153 2
a154 3
		}
	if (b != NULL)
		{
d157 1
a157 2
		}
	else
d166 1
a166 1
	}
@


1.8
log
@Clean up dangerous strncpy use. This included a use where the resulting
string was potentially not nul terminated and a place where malloc return
was unchecked.
while we're at it remove dummytest.c
ok miod@@
@
text
@d91 1
a91 1
		OPENSSL_free(b);
d173 1
a173 1
		OPENSSL_free(b);
@


1.7
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d93 1
a93 2
	    strncpy(buf,"NO X509_NAME",len);
	    buf[len-1]='\0';
@


1.6
log
@resolve conflicts, fix local changes
@
text
@a77 3
#ifdef CHARSET_EBCDIC
	char ebcdic_buf[1024];
#endif
a113 14
#ifdef CHARSET_EBCDIC
                if (type == V_ASN1_GENERALSTRING ||
		    type == V_ASN1_VISIBLESTRING ||
		    type == V_ASN1_PRINTABLESTRING ||
		    type == V_ASN1_TELETEXSTRING ||
		    type == V_ASN1_VISIBLESTRING ||
		    type == V_ASN1_IA5STRING) {
                        ascii2ebcdic(ebcdic_buf, q,
				     (num > sizeof ebcdic_buf)
				     ? sizeof ebcdic_buf : num);
                        q=ebcdic_buf;
		}
#endif

a134 1
#ifndef CHARSET_EBCDIC
a135 4
#else
			if ((os_toascii[q[j]] < os_toascii[' ']) ||
			    (os_toascii[q[j]] > os_toascii['~'])) l2+=3;
#endif
a153 2

#ifndef CHARSET_EBCDIC /* q was assigned above already. */
a154 2
#endif

a157 1
#ifndef CHARSET_EBCDIC
a167 13
#else
			n=os_toascii[q[j]];
			if ((n < os_toascii[' ']) ||
			    (n > os_toascii['~']))
				{
				*(p++)='\\';
				*(p++)='x';
				*(p++)=hex[(n>>4)&0x0f];
				*(p++)=hex[n&0x0f];
				}
			else
				*(p++)=q[j];
#endif
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d75 1
a75 1
	static char hex[17]="0123456789ABCDEF";
@


1.4
log
@merge openssl 0.9.6b-engine

Note that this is a maintenence release, API's appear *not* to have changed.
As such, I have only increased the minor number on these libraries
@
text
@d97 1
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d217 2
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d94 1
a94 1
		Free(b);
d213 1
a213 1
		Free(b);
@


1.1
log
@Initial revision
@
text
@d61 6
a66 9
#include "lhash.h"
#include "objects.h"
#include "x509.h"
#include "buffer.h"

char *X509_NAME_oneline(a,buf,len)
X509_NAME *a;
char *buf;
int len;
d69 1
a69 1
	unsigned int i;
d71 2
a72 1
	char *s,*p;
d78 3
a81 1
	if (a == NULL) return("NO X509_NAME");
d89 10
d102 1
a102 1
	for (i=0; (int)i<sk_num(a->entries); i++)
d104 1
a104 1
		ne=(X509_NAME_ENTRY *)sk_value(a->entries,i);
d116 13
d151 1
d153 4
d176 1
d178 1
d183 1
d194 13
d213 1
a213 1
		Free((char *)b);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 9
a69 6
#include <openssl/lhash.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/buffer.h>

char *X509_NAME_oneline(X509_NAME *a, char *buf, int len)
d72 1
a72 1
int i;
d74 1
a74 2
	const char *s;
	char *p;
a79 3
#ifdef CHARSET_EBCDIC
	char ebcdic_buf[1024];
#endif
d81 1
a88 11
	if (a == NULL)
	    {
	    if(b)
		{
		buf=b->data;
		OPENSSL_free(b);
		}
	    strncpy(buf,"NO X509_NAME",len);
	    buf[len-1]='\0';
	    return buf;
	    }
d92 1
a92 1
	for (i=0; i<sk_X509_NAME_ENTRY_num(a->entries); i++)
d94 1
a94 1
		ne=sk_X509_NAME_ENTRY_value(a->entries,i);
a105 13
#ifdef CHARSET_EBCDIC
                if (type == V_ASN1_GENERALSTRING ||
		    type == V_ASN1_VISIBLESTRING ||
		    type == V_ASN1_PRINTABLESTRING ||
		    type == V_ASN1_TELETEXSTRING ||
		    type == V_ASN1_VISIBLESTRING ||
		    type == V_ASN1_IA5STRING) {
                        ascii2ebcdic(ebcdic_buf, q,
				     (num > sizeof ebcdic_buf)
				     ? sizeof ebcdic_buf : num);
                        q=ebcdic_buf;
		}
#endif
a127 1
#ifndef CHARSET_EBCDIC
a128 4
#else
			if ((os_toascii[q[j]] < os_toascii[' ']) ||
			    (os_toascii[q[j]] > os_toascii['~'])) l2+=3;
#endif
a147 1
#ifndef CHARSET_EBCDIC /* q was assigned above already. */
a148 1
#endif
a152 1
#ifndef CHARSET_EBCDIC
a162 13
#else
			n=os_toascii[q[j]];
			if ((n < os_toascii[' ']) ||
			    (n > os_toascii['~']))
				{
				*(p++)='\\';
				*(p++)='x';
				*(p++)=hex[(n>>4)&0x0f];
				*(p++)=hex[n&0x0f];
				}
			else
				*(p++)=q[j];
#endif
d169 1
a169 1
		OPENSSL_free(b);
a172 2
	if (i == 0)
		*p = '\0';
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@d75 1
a75 1
	static const char hex[17]="0123456789ABCDEF";
@


