head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13;
locks; strict;
comment	@ * @;


1.13
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.12;
commitid	kT0fLt3r4lroFJra;

1.12
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.10;
commitid	id8dTrTMtnTn4fqt;

1.10
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.29.21.07.43;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.20.16.24.15;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.18.38.53;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.00;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: x509spki.c,v 1.12 2014/07/11 08:44:49 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/x509.h>

int
NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey)
{
	if ((x == NULL) || (x->spkac == NULL))
		return (0);
	return (X509_PUBKEY_set(&(x->spkac->pubkey), pkey));
}

EVP_PKEY *
NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x)
{
	if ((x == NULL) || (x->spkac == NULL))
		return (NULL);
	return (X509_PUBKEY_get(x->spkac->pubkey));
}

/* Load a Netscape SPKI from a base64 encoded string */

NETSCAPE_SPKI *
NETSCAPE_SPKI_b64_decode(const char *str, int len)
{
	unsigned char *spki_der;
	const unsigned char *p;
	int spki_len;
	NETSCAPE_SPKI *spki;

	if (len <= 0)
		len = strlen(str);
	if (!(spki_der = malloc(len + 1))) {
		X509error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}
	spki_len = EVP_DecodeBlock(spki_der, (const unsigned char *)str, len);
	if (spki_len < 0) {
		X509error(X509_R_BASE64_DECODE_ERROR);
		free(spki_der);
		return NULL;
	}
	p = spki_der;
	spki = d2i_NETSCAPE_SPKI(NULL, &p, spki_len);
	free(spki_der);
	return spki;
}

/* Generate a base64 encoded string from an SPKI */

char *
NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *spki)
{
	unsigned char *der_spki, *p;
	char *b64_str;
	int der_len;
	der_len = i2d_NETSCAPE_SPKI(spki, NULL);
	der_spki = malloc(der_len);
	b64_str = reallocarray(NULL, der_len, 2);
	if (!der_spki || !b64_str) {
		X509error(ERR_R_MALLOC_FAILURE);
		free(der_spki);
		free(b64_str);
		return NULL;
	}
	p = der_spki;
	i2d_NETSCAPE_SPKI(spki, &p);
	EVP_EncodeBlock((unsigned char *)b64_str, der_spki, der_len);
	free(der_spki);
	return b64_str;
}
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509spki.c,v 1.11 2014/07/10 13:58:23 jsing Exp $ */
d94 1
a94 1
		X509err(X509_F_NETSCAPE_SPKI_B64_DECODE, ERR_R_MALLOC_FAILURE);
d99 1
a99 2
		X509err(X509_F_NETSCAPE_SPKI_B64_DECODE,
		    X509_R_BASE64_DECODE_ERROR);
d121 1
a121 1
		X509err(X509_F_NETSCAPE_SPKI_B64_ENCODE, ERR_R_MALLOC_FAILURE);
@


1.11
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509spki.c,v 1.10 2014/06/12 15:49:31 deraadt Exp $ */
d62 1
a62 1
#include "cryptlib.h"
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.9
log
@convert 53 malloc(a*b) to reallocarray(NULL, a, b).  that is 53
potential integer overflows easily changed into an allocation return
of NULL, with errno nicely set if need be.  checks for an allocations
returning NULL are commonplace, or if the object is dereferenced
(quite normal) will result in a nice fault which can be detected &
repaired properly.
ok tedu
@
text
@d1 1
a1 1
/* x509spki.c */
@


1.8
log
@KNF.
@
text
@d118 1
a118 1
	b64_str = malloc(der_len * 2);
@


1.7
log
@fix some more leaks, mostly suggestions from miod
ok miod@@
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d63 2
a64 1
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey)
d66 3
a68 2
	if ((x == NULL) || (x->spkac == NULL)) return(0);
	return(X509_PUBKEY_set(&(x->spkac->pubkey),pkey));
d71 2
a72 1
EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x)
d75 2
a76 2
		return(NULL);
	return(X509_PUBKEY_get(x->spkac->pubkey));
d81 2
a82 1
NETSCAPE_SPKI * NETSCAPE_SPKI_b64_decode(const char *str, int len)
d88 3
a90 1
	if(len <= 0) len = strlen(str);
d96 1
a96 1
	if(spki_len < 0) {
d98 1
a98 1
						X509_R_BASE64_DECODE_ERROR);
d110 2
a111 1
char * NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *spki)
d119 1
a119 1
	if(!der_spki || !b64_str) {
@


1.6
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d114 2
@


1.5
log
@resolve conflicts
@
text
@d85 1
a85 1
	if (!(spki_der = OPENSSL_malloc(len + 1))) {
d93 1
a93 1
		OPENSSL_free(spki_der);
d98 1
a98 1
	OPENSSL_free(spki_der);
d110 2
a111 2
	der_spki = OPENSSL_malloc(der_len);
	b64_str = OPENSSL_malloc(der_len * 2);
d119 1
a119 1
	OPENSSL_free(der_spki);
@


1.4
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d80 2
a81 1
	unsigned char *spki_der, *p;
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@a61 1
#include <openssl/asn1_mac.h>
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d85 1
a85 1
	if (!(spki_der = Malloc(len + 1))) {
d93 1
a93 1
		Free(spki_der);
d98 1
a98 1
	Free(spki_der);
d110 2
a111 2
	der_spki = Malloc(der_len);
	b64_str = Malloc(der_len * 2);
d119 1
a119 1
	Free(der_spki);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d62 1
d85 1
a85 1
	if (!(spki_der = OPENSSL_malloc(len + 1))) {
d93 1
a93 1
		OPENSSL_free(spki_der);
d98 1
a98 1
	OPENSSL_free(spki_der);
d110 2
a111 2
	der_spki = OPENSSL_malloc(der_len);
	b64_str = OPENSSL_malloc(der_len * 2);
d119 1
a119 1
	OPENSSL_free(der_spki);
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d80 1
a80 2
	unsigned char *spki_der;
	const unsigned char *p;
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


