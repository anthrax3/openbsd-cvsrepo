head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.2
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.13;
commitid	kT0fLt3r4lroFJra;

1.13
date	2016.03.21.04.05.33;	author mmcc;	state Exp;
branches;
next	1.12;
commitid	DaWOF4hNVPK48AoU;

1.12
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.11;
commitid	rYgS8cWcS59JYkBV;

1.11
date	2014.09.28.10.53.57;	author miod;	state Exp;
branches;
next	1.10;
commitid	yIuF7QL4orctEFqe;

1.10
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.04.20.16.10.10;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.12;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.51;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.00;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.52;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: x509_v3.c,v 1.13 2016/03/21 04:05:33 mmcc Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/stack.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

int
X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x)
{
	if (x == NULL)
		return (0);
	return (sk_X509_EXTENSION_num(x));
}

int
X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x, int nid, int lastpos)
{
	ASN1_OBJECT *obj;

	obj = OBJ_nid2obj(nid);
	if (obj == NULL)
		return (-2);
	return (X509v3_get_ext_by_OBJ(x, obj, lastpos));
}

int
X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *sk, ASN1_OBJECT *obj,
    int lastpos)
{
	int n;
	X509_EXTENSION *ex;

	if (sk == NULL)
		return (-1);
	lastpos++;
	if (lastpos < 0)
		lastpos = 0;
	n = sk_X509_EXTENSION_num(sk);
	for (; lastpos < n; lastpos++) {
		ex = sk_X509_EXTENSION_value(sk, lastpos);
		if (OBJ_cmp(ex->object, obj) == 0)
			return (lastpos);
	}
	return (-1);
}

int
X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *sk, int crit,
    int lastpos)
{
	int n;
	X509_EXTENSION *ex;

	if (sk == NULL)
		return (-1);
	lastpos++;
	if (lastpos < 0)
		lastpos = 0;
	n = sk_X509_EXTENSION_num(sk);
	for (; lastpos < n; lastpos++) {
		ex = sk_X509_EXTENSION_value(sk, lastpos);
		if (((ex->critical > 0) && crit) ||
		    ((ex->critical <= 0) && !crit))
			return (lastpos);
	}
	return (-1);
}

X509_EXTENSION *
X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc)
{
	if (x == NULL || sk_X509_EXTENSION_num(x) <= loc || loc < 0)
		return NULL;
	else
		return sk_X509_EXTENSION_value(x, loc);
}

X509_EXTENSION *
X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc)
{
	X509_EXTENSION *ret;

	if (x == NULL || sk_X509_EXTENSION_num(x) <= loc || loc < 0)
		return (NULL);
	ret = sk_X509_EXTENSION_delete(x, loc);
	return (ret);
}

STACK_OF(X509_EXTENSION) *
X509v3_add_ext(STACK_OF(X509_EXTENSION) **x, X509_EXTENSION *ex, int loc)
{
	X509_EXTENSION *new_ex = NULL;
	int n;
	STACK_OF(X509_EXTENSION) *sk = NULL;

	if (x == NULL) {
		X509error(ERR_R_PASSED_NULL_PARAMETER);
		goto err2;
	}

	if (*x == NULL) {
		if ((sk = sk_X509_EXTENSION_new_null()) == NULL)
			goto err;
	} else
		sk= *x;

	n = sk_X509_EXTENSION_num(sk);
	if (loc > n)
		loc = n;
	else if (loc < 0)
		loc = n;

	if ((new_ex = X509_EXTENSION_dup(ex)) == NULL)
		goto err2;
	if (!sk_X509_EXTENSION_insert(sk, new_ex, loc))
		goto err;
	if (*x == NULL)
		*x = sk;
	return (sk);

err:
	X509error(ERR_R_MALLOC_FAILURE);
err2:
	if (new_ex != NULL)
		X509_EXTENSION_free(new_ex);
	if (sk != NULL && (x != NULL && sk != *x))
		sk_X509_EXTENSION_free(sk);
	return (NULL);
}

X509_EXTENSION *
X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid, int crit,
    ASN1_OCTET_STRING *data)
{
	ASN1_OBJECT *obj;
	X509_EXTENSION *ret;

	obj = OBJ_nid2obj(nid);
	if (obj == NULL) {
		X509error(X509_R_UNKNOWN_NID);
		return (NULL);
	}
	ret = X509_EXTENSION_create_by_OBJ(ex, obj, crit, data);
	if (ret == NULL)
		ASN1_OBJECT_free(obj);
	return (ret);
}

X509_EXTENSION *
X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex, ASN1_OBJECT *obj, int crit,
    ASN1_OCTET_STRING *data)
{
	X509_EXTENSION *ret;

	if ((ex == NULL) || (*ex == NULL)) {
		if ((ret = X509_EXTENSION_new()) == NULL) {
			X509error(ERR_R_MALLOC_FAILURE);
			return (NULL);
		}
	} else
		ret= *ex;

	if (!X509_EXTENSION_set_object(ret, obj))
		goto err;
	if (!X509_EXTENSION_set_critical(ret, crit))
		goto err;
	if (!X509_EXTENSION_set_data(ret, data))
		goto err;

	if ((ex != NULL) && (*ex == NULL))
		*ex = ret;
	return (ret);

err:
	if ((ex == NULL) || (ret != *ex))
		X509_EXTENSION_free(ret);
	return (NULL);
}

int
X509_EXTENSION_set_object(X509_EXTENSION *ex, ASN1_OBJECT *obj)
{
	if ((ex == NULL) || (obj == NULL))
		return (0);
	ASN1_OBJECT_free(ex->object);
	ex->object = OBJ_dup(obj);
	return ex->object != NULL;
}

int
X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)
{
	if (ex == NULL)
		return (0);
	ex->critical = (crit) ? 0xFF : -1;
	return (1);
}

int
X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)
{
	int i;

	if (ex == NULL)
		return (0);
	i = ASN1_STRING_set(ex->value, data->data, data->length);
	if (!i)
		return (0);
	return (1);
}

ASN1_OBJECT *
X509_EXTENSION_get_object(X509_EXTENSION *ex)
{
	if (ex == NULL)
		return (NULL);
	return (ex->object);
}

ASN1_OCTET_STRING *
X509_EXTENSION_get_data(X509_EXTENSION *ex)
{
	if (ex == NULL)
		return (NULL);
	return (ex->value);
}

int
X509_EXTENSION_get_critical(X509_EXTENSION *ex)
{
	if (ex == NULL)
		return (0);
	if (ex->critical > 0)
		return 1;
	return 0;
}
@


1.13
log
@Return zero from two functions on allocation failure instead of always
returning one (indicating success). Each function has only a single
usage, and both usages check the return value.

Merged from BoringSSL 0ce78a757d815c0dde9ed5884229f3a5b2cb3e9c:

https://boringssl.googlesource.com/boringssl/+/0ce78a757d815c0dde9ed5884229f3a5b2cb3e9c%5E!/#F0

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_v3.c,v 1.12 2015/07/29 14:58:34 jsing Exp $ */
d159 1
a159 1
		X509err(X509_F_X509V3_ADD_EXT, ERR_R_PASSED_NULL_PARAMETER);
d184 1
a184 1
	X509err(X509_F_X509V3_ADD_EXT, ERR_R_MALLOC_FAILURE);
d202 1
a202 2
		X509err(X509_F_X509_EXTENSION_CREATE_BY_NID,
		    X509_R_UNKNOWN_NID);
d219 1
a219 2
			X509err(X509_F_X509_EXTENSION_CREATE_BY_OBJ,
			    ERR_R_MALLOC_FAILURE);
@


1.12
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_v3.c,v 1.11 2014/09/28 10:53:57 miod Exp $ */
d251 1
a251 1
	return (1);
@


1.11
log
@X509v3_add_ext(): do not free stuff we did not allocate in the error path.
ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_v3.c,v 1.10 2014/07/11 08:44:49 jsing Exp $ */
d270 1
a270 1
	i = M_ASN1_OCTET_STRING_set(ex->value, data->data, data->length);
@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_v3.c,v 1.9 2014/06/12 15:49:31 deraadt Exp $ */
d188 1
a188 1
	if (sk != NULL)
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 2
#include <openssl/stack.h>
#include "cryptlib.h"
d62 2
d65 1
a65 1
#include <openssl/evp.h>
@


1.8
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/x509/x509_v3.c */
@


1.7
log
@blunt force knf
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d68 2
a69 1
int X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x)
d71 3
a73 2
	if (x == NULL) return(0);
	return(sk_X509_EXTENSION_num(x));
d76 2
a77 2
int X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x, int nid,
			  int lastpos)
d81 4
a84 3
	obj=OBJ_nid2obj(nid);
	if (obj == NULL) return(-2);
	return(X509v3_get_ext_by_OBJ(x,obj,lastpos));
d87 3
a89 2
int X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *sk, ASN1_OBJECT *obj,
			  int lastpos)
d94 2
a95 1
	if (sk == NULL) return(-1);
d98 6
a103 6
		lastpos=0;
	n=sk_X509_EXTENSION_num(sk);
	for ( ; lastpos < n; lastpos++) {
		ex=sk_X509_EXTENSION_value(sk,lastpos);
		if (OBJ_cmp(ex->object,obj) == 0)
			return(lastpos);
d105 1
a105 1
	return(-1);
d108 3
a110 2
int X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *sk, int crit,
			       int lastpos)
d115 2
a116 1
	if (sk == NULL) return(-1);
d119 7
a125 7
		lastpos=0;
	n=sk_X509_EXTENSION_num(sk);
	for ( ; lastpos < n; lastpos++) {
		ex=sk_X509_EXTENSION_value(sk,lastpos);
		if (	((ex->critical > 0) && crit) ||
			((ex->critical <= 0) && !crit))
			return(lastpos);
d127 1
a127 1
	return(-1);
d130 2
a131 1
X509_EXTENSION *X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc)
d136 1
a136 1
		return sk_X509_EXTENSION_value(x,loc);
d139 2
a140 1
X509_EXTENSION *X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc)
d145 3
a147 3
		return(NULL);
	ret=sk_X509_EXTENSION_delete(x,loc);
	return(ret);
d150 2
a151 2
STACK_OF(X509_EXTENSION) *X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,
					 X509_EXTENSION *ex, int loc)
d153 1
a153 1
	X509_EXTENSION *new_ex=NULL;
d155 1
a155 1
	STACK_OF(X509_EXTENSION) *sk=NULL;
d158 1
a158 1
		X509err(X509_F_X509V3_ADD_EXT,ERR_R_PASSED_NULL_PARAMETER);
d163 1
a163 1
		if ((sk=sk_X509_EXTENSION_new_null()) == NULL)
d168 5
a172 3
	n=sk_X509_EXTENSION_num(sk);
	if (loc > n) loc=n;
	else if (loc < 0) loc=n;
d174 1
a174 1
	if ((new_ex=X509_EXTENSION_dup(ex)) == NULL)
d176 1
a176 1
	if (!sk_X509_EXTENSION_insert(sk,new_ex,loc))
d179 3
a181 2
		*x=sk;
	return(sk);
d183 1
a183 1
	X509err(X509_F_X509V3_ADD_EXT,ERR_R_MALLOC_FAILURE);
d185 5
a189 3
	if (new_ex != NULL) X509_EXTENSION_free(new_ex);
	if (sk != NULL) sk_X509_EXTENSION_free(sk);
	return(NULL);
d192 3
a194 2
X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid,
	     int crit, ASN1_OCTET_STRING *data)
d199 1
a199 1
	obj=OBJ_nid2obj(nid);
d201 3
a203 2
		X509err(X509_F_X509_EXTENSION_CREATE_BY_NID,X509_R_UNKNOWN_NID);
		return(NULL);
d205 4
a208 3
	ret=X509_EXTENSION_create_by_OBJ(ex,obj,crit,data);
	if (ret == NULL) ASN1_OBJECT_free(obj);
	return(ret);
d211 3
a213 2
X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
	     ASN1_OBJECT *obj, int crit, ASN1_OCTET_STRING *data)
d218 4
a221 4
		if ((ret=X509_EXTENSION_new()) == NULL)
		{
			X509err(X509_F_X509_EXTENSION_CREATE_BY_OBJ,ERR_R_MALLOC_FAILURE);
			return(NULL);
d226 1
a226 1
	if (!X509_EXTENSION_set_object(ret,obj))
d228 1
a228 1
	if (!X509_EXTENSION_set_critical(ret,crit))
d230 1
a230 1
	if (!X509_EXTENSION_set_data(ret,data))
d232 5
a236 3
	
	if ((ex != NULL) && (*ex == NULL)) *ex=ret;
	return(ret);
d240 1
a240 1
	return(NULL);
d243 2
a244 1
int X509_EXTENSION_set_object(X509_EXTENSION *ex, ASN1_OBJECT *obj)
d247 1
a247 1
		return(0);
d249 2
a250 2
	ex->object=OBJ_dup(obj);
	return(1);
d253 2
a254 1
int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)
d256 4
a259 3
	if (ex == NULL) return(0);
	ex->critical=(crit)?0xFF:-1;
	return(1);
d262 2
a263 1
int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)
d267 6
a272 4
	if (ex == NULL) return(0);
	i=M_ASN1_OCTET_STRING_set(ex->value,data->data,data->length);
	if (!i) return(0);
	return(1);
d275 2
a276 1
ASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *ex)
d278 3
a280 2
	if (ex == NULL) return(NULL);
	return(ex->object);
d283 2
a284 1
ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ex)
d286 3
a288 2
	if (ex == NULL) return(NULL);
	return(ex->value);
d291 2
a292 1
int X509_EXTENSION_get_critical(X509_EXTENSION *ex)
d294 4
a297 2
	if (ex == NULL) return(0);
	if(ex->critical > 0) return 1;
@


1.6
log
@resolve conflicts
@
text
@d69 1
a69 1
	{
d72 1
a72 1
	}
d76 1
a76 1
	{
d82 1
a82 1
	}
d86 1
a86 1
	{
d95 1
a95 2
	for ( ; lastpos < n; lastpos++)
		{
d99 1
a99 1
		}
d101 1
a101 1
	}
d105 1
a105 1
	{
d114 1
a114 2
	for ( ; lastpos < n; lastpos++)
		{
d119 1
a119 1
		}
d121 1
a121 1
	}
d124 1
a124 1
	{
d129 1
a129 1
	}
d132 1
a132 1
	{
d139 1
a139 1
	}
d143 1
a143 1
	{
d148 1
a148 2
	if (x == NULL)
		{
d151 1
a151 1
		}
d153 1
a153 2
	if (*x == NULL)
		{
d156 1
a156 2
		}
	else
d176 1
a176 1
	}
d180 1
a180 1
	{
d185 1
a185 2
	if (obj == NULL)
		{
d188 1
a188 1
		}
d192 1
a192 1
	}
d196 1
a196 1
	{
d199 2
a200 1
	if ((ex == NULL) || (*ex == NULL))
a201 2
		if ((ret=X509_EXTENSION_new()) == NULL)
			{
a203 1
			}
d205 1
a205 1
	else
d221 1
a221 1
	}
d224 1
a224 1
	{
d230 1
a230 1
	}
d233 1
a233 1
	{
d237 1
a237 1
	}
d240 1
a240 1
	{
d247 1
a247 1
	}
d250 1
a250 1
	{
d253 1
a253 1
	}
d256 1
a256 1
	{
d259 1
a259 1
	}
d262 1
a262 1
	{
d266 1
a266 1
	}
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d150 7
a156 1
	if ((x != NULL) && (*x == NULL))
d172 1
a172 1
	if ((x != NULL) && (*x == NULL))
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d119 1
a119 1
			(!(ex->critical <= 0) && !crit))
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d118 2
a119 2
		if (	(ex->critical && crit) ||
			(!ex->critical && !crit))
d237 1
a237 1
	ex->critical=(crit)?0xFF:0;
d266 2
a267 1
	return(ex->critical);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d66 1
d246 1
a246 1
	i=ASN1_OCTET_STRING_set(ex->value,data->data,data->length);
@


1.1
log
@Initial revision
@
text
@d60 1
a60 1
#include "stack.h"
d62 4
a65 12
#include "asn1.h"
#include "objects.h"
#include "evp.h"
#include "x509.h"

#ifndef NOPROTO
static X509_EXTENSION_METHOD *find_by_nid(int nid);
static int xem_cmp(X509_EXTENSION_METHOD **a, X509_EXTENSION_METHOD **b);
#else
static X509_EXTENSION_METHOD *find_by_nid();
static int xem_cmp();
#endif
d67 1
a67 4
static STACK *extensions=NULL;

int X509v3_get_ext_count(x)
STACK *x;
d70 1
a70 1
	return(sk_num(x));
d73 2
a74 4
int X509v3_get_ext_by_NID(x,nid,lastpos)
STACK *x;
int nid;
int lastpos;
d83 2
a84 4
int X509v3_get_ext_by_OBJ(sk,obj,lastpos)
STACK *sk;
ASN1_OBJECT *obj;
int lastpos;
d93 1
a93 1
	n=sk_num(sk);
d96 1
a96 1
		ex=(X509_EXTENSION *)sk_value(sk,lastpos);
d103 2
a104 4
int X509v3_get_ext_by_critical(sk,crit,lastpos)
STACK *sk;
int crit;
int lastpos;
d113 1
a113 1
	n=sk_num(sk);
d116 1
a116 1
		ex=(X509_EXTENSION *)sk_value(sk,lastpos);
d124 1
a124 3
X509_EXTENSION *X509v3_get_ext(x,loc)
STACK *x;
int loc;
d126 2
a127 2
	if ((x == NULL) || (sk_num(x) <= loc) || (loc < 0))
		return(NULL);
d129 1
a129 1
		return((X509_EXTENSION *)sk_value(x,loc));
d132 1
a132 3
X509_EXTENSION *X509v3_delete_ext(x,loc)
STACK *x;
int loc;
d136 1
a136 1
	if ((x == NULL) || (sk_num(x) <= loc) || (loc < 0))
d138 1
a138 1
	ret=(X509_EXTENSION *)sk_delete(x,loc);
d142 2
a143 4
STACK *X509v3_add_ext(x,ex,loc)
STACK **x;
X509_EXTENSION *ex;
int loc;
d147 1
a147 1
	STACK *sk=NULL;
d151 1
a151 1
		if ((sk=sk_new_null()) == NULL)
d157 1
a157 1
	n=sk_num(sk);
d163 1
a163 1
	if (!sk_insert(sk,(char *)new_ex,loc))
d172 1
a172 1
	if (sk != NULL) sk_free(sk);
d176 2
a177 5
X509_EXTENSION *X509_EXTENSION_create_by_NID(ex,nid,crit,data)
X509_EXTENSION **ex;
int nid;
int crit;
ASN1_OCTET_STRING *data;
d193 2
a194 5
X509_EXTENSION *X509_EXTENSION_create_by_OBJ(ex,obj,crit,data)
X509_EXTENSION **ex;
ASN1_OBJECT *obj;
int crit;
ASN1_OCTET_STRING *data;
d224 1
a224 3
int X509_EXTENSION_set_object(ex,obj)
X509_EXTENSION *ex;
ASN1_OBJECT *obj;
d233 1
a233 3
int X509_EXTENSION_set_critical(ex,crit)
X509_EXTENSION *ex;
int crit;
d240 1
a240 3
int X509_EXTENSION_set_data(ex,data)
X509_EXTENSION *ex;
ASN1_OCTET_STRING *data;
d250 1
a250 2
ASN1_OBJECT *X509_EXTENSION_get_object(ex)
X509_EXTENSION *ex;
d256 1
a256 2
ASN1_OCTET_STRING *X509_EXTENSION_get_data(ex)
X509_EXTENSION *ex;
d262 1
a262 2
int X509_EXTENSION_get_critical(ex)
X509_EXTENSION *ex;
a266 105

int X509v3_data_type_by_OBJ(obj)
ASN1_OBJECT *obj;
	{
	int nid;

	nid=OBJ_obj2nid(obj);
	if (nid == V_ASN1_UNDEF) return(V_ASN1_UNDEF);
	return(X509v3_data_type_by_NID(nid));
	}

int X509v3_data_type_by_NID(nid)
int nid;
	{
	X509_EXTENSION_METHOD *x;

	x=find_by_nid(nid);
	if (x == NULL)
		return(V_ASN1_UNDEF);
	else
		return(x->data_type);
	}

int X509v3_pack_type_by_OBJ(obj)
ASN1_OBJECT *obj;
	{
	int nid;

	nid=OBJ_obj2nid(obj);
	if (nid == NID_undef) return(X509_EXT_PACK_UNKNOWN);
	return(X509v3_pack_type_by_NID(nid));
	}

int X509v3_pack_type_by_NID(nid)
int nid;
	{
	X509_EXTENSION_METHOD *x;

	x=find_by_nid(nid);
	if (x == NULL)
		return(X509_EXT_PACK_UNKNOWN);
	else
		return(x->pack_type);
	}

static X509_EXTENSION_METHOD *find_by_nid(nid)
int nid;
	{
	X509_EXTENSION_METHOD x;
	int i;

	x.nid=nid;
	if (extensions == NULL) return(NULL);
	i=sk_find(extensions,(char *)&x);
	if (i < 0)
		return(NULL);
	else
		return((X509_EXTENSION_METHOD *)sk_value(extensions,i));
	}

static int xem_cmp(a,b)
X509_EXTENSION_METHOD **a,**b;
	{
	return((*a)->nid-(*b)->nid);
	}

void X509v3_cleanup_extensions()
	{
	int i;

	if (extensions != NULL)
		{
		for (i=0; i<sk_num(extensions); i++)
			Free(sk_value(extensions,i));
		sk_free(extensions);
		extensions=NULL;
		}
	}

int X509v3_add_extension(x)
X509_EXTENSION_METHOD *x;
	{
	X509_EXTENSION_METHOD *newx;

	if (extensions == NULL)
		{
		extensions=sk_new(xem_cmp);
		if (extensions == NULL) goto err;
		}
	newx=(X509_EXTENSION_METHOD *)Malloc(sizeof(X509_EXTENSION_METHOD));
	if (newx == NULL) goto err;
	newx->nid=x->nid;
	newx->data_type=x->data_type;
	newx->pack_type=x->pack_type;
	if (!sk_push(extensions,(char *)newx))
		{
		Free(newx);
		goto err;
		}
	return(1);
err:
	X509err(X509_F_X509V3_ADD_EXTENSION,ERR_R_MALLOC_FAILURE);
	return(0);
	}

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 1
a60 1
#include <openssl/stack.h>
d62 12
a73 5
#include <openssl/asn1.h>
#include <openssl/objects.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
d75 4
a78 1
int X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x)
d81 1
a81 1
	return(sk_X509_EXTENSION_num(x));
d84 4
a87 2
int X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x, int nid,
			  int lastpos)
d96 4
a99 2
int X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *sk, ASN1_OBJECT *obj,
			  int lastpos)
d108 1
a108 1
	n=sk_X509_EXTENSION_num(sk);
d111 1
a111 1
		ex=sk_X509_EXTENSION_value(sk,lastpos);
d118 4
a121 2
int X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *sk, int crit,
			       int lastpos)
d130 1
a130 1
	n=sk_X509_EXTENSION_num(sk);
d133 3
a135 3
		ex=sk_X509_EXTENSION_value(sk,lastpos);
		if (	((ex->critical > 0) && crit) ||
			(!(ex->critical <= 0) && !crit))
d141 3
a143 1
X509_EXTENSION *X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc)
d145 2
a146 2
	if (x == NULL || sk_X509_EXTENSION_num(x) <= loc || loc < 0)
		return NULL;
d148 1
a148 1
		return sk_X509_EXTENSION_value(x,loc);
d151 3
a153 1
X509_EXTENSION *X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc)
d157 1
a157 1
	if (x == NULL || sk_X509_EXTENSION_num(x) <= loc || loc < 0)
d159 1
a159 1
	ret=sk_X509_EXTENSION_delete(x,loc);
d163 4
a166 2
STACK_OF(X509_EXTENSION) *X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,
					 X509_EXTENSION *ex, int loc)
d170 1
a170 1
	STACK_OF(X509_EXTENSION) *sk=NULL;
d174 1
a174 1
		if ((sk=sk_X509_EXTENSION_new_null()) == NULL)
d180 1
a180 1
	n=sk_X509_EXTENSION_num(sk);
d186 1
a186 1
	if (!sk_X509_EXTENSION_insert(sk,new_ex,loc))
d195 1
a195 1
	if (sk != NULL) sk_X509_EXTENSION_free(sk);
d199 5
a203 2
X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid,
	     int crit, ASN1_OCTET_STRING *data)
d219 5
a223 2
X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
	     ASN1_OBJECT *obj, int crit, ASN1_OCTET_STRING *data)
d253 3
a255 1
int X509_EXTENSION_set_object(X509_EXTENSION *ex, ASN1_OBJECT *obj)
d264 3
a266 1
int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)
d269 1
a269 1
	ex->critical=(crit)?0xFF:-1;
d273 3
a275 1
int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)
d280 1
a280 1
	i=M_ASN1_OCTET_STRING_set(ex->value,data->data,data->length);
d285 2
a286 1
ASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *ex)
d292 2
a293 1
ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ex)
d299 2
a300 1
int X509_EXTENSION_get_critical(X509_EXTENSION *ex)
d303 1
a303 2
	if(ex->critical > 0) return 1;
	return 0;
d305 105
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d119 1
a119 1
			((ex->critical <= 0) && !crit))
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d150 1
a150 7
	if (x == NULL)
		{
		X509err(X509_F_X509V3_ADD_EXT,ERR_R_PASSED_NULL_PARAMETER);
		goto err2;
		}

	if (*x == NULL)
d166 1
a166 1
	if (*x == NULL)
@


