head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.2
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27;
locks; strict;
comment	@ * @;


1.27
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.26;
commitid	kT0fLt3r4lroFJra;

1.26
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.25;
commitid	rYgS8cWcS59JYkBV;

1.25
date	2014.09.26.19.31.09;	author miod;	state Exp;
branches;
next	1.24;
commitid	cfXfpXPjUSeXLjV7;

1.24
date	2014.07.13.11.15.54;	author miod;	state Exp;
branches;
next	1.23;
commitid	VmWd0qNRmPyv7cTI;

1.23
date	2014.07.12.16.03.37;	author miod;	state Exp;
branches;
next	1.22;
commitid	G74O1dmRukKsW7IJ;

1.22
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.21;
commitid	yQEL1wOWIearrW15;

1.21
date	2014.07.10.22.45.58;	author jsing;	state Exp;
branches;
next	1.20;
commitid	nzndm3zqPmFurSaK;

1.20
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.19;
commitid	id8dTrTMtnTn4fqt;

1.19
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	mJUVYpkFBZ0Zv2bG;

1.18
date	2014.06.11.15.44.10;	author jsing;	state Exp;
branches;
next	1.17;
commitid	atiHl7idnrYpOeRd;

1.17
date	2014.04.20.15.06.11;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.21;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.13;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.10;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.50;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.59;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.51;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.17;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.04.06.06.30.04;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2012.10.13.21.23.44;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.04.13.15.16.35;	author miod;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: x509_cmp.c,v 1.26 2015/07/29 14:58:34 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <ctype.h>
#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1.h>
#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

int
X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)
{
	int i;
	X509_CINF *ai, *bi;

	ai = a->cert_info;
	bi = b->cert_info;
	i = ASN1_STRING_cmp(ai->serialNumber, bi->serialNumber);
	if (i)
		return (i);
	return (X509_NAME_cmp(ai->issuer, bi->issuer));
}

#ifndef OPENSSL_NO_MD5
unsigned long
X509_issuer_and_serial_hash(X509 *a)
{
	unsigned long ret = 0;
	EVP_MD_CTX ctx;
	unsigned char md[16];
	char *f;

	EVP_MD_CTX_init(&ctx);
	f = X509_NAME_oneline(a->cert_info->issuer, NULL, 0);
	if (f == NULL)
		goto err;
	if (!EVP_DigestInit_ex(&ctx, EVP_md5(), NULL))
		goto err;
	if (!EVP_DigestUpdate(&ctx, (unsigned char *)f, strlen(f)))
		goto err;
	free(f);
	f = NULL;
	if (!EVP_DigestUpdate(&ctx,
	    (unsigned char *)a->cert_info->serialNumber->data,
	    (unsigned long)a->cert_info->serialNumber->length))
		goto err;
	if (!EVP_DigestFinal_ex(&ctx, &(md[0]), NULL))
		goto err;
	ret = (((unsigned long)md[0]) | ((unsigned long)md[1] << 8L) |
	    ((unsigned long)md[2] << 16L) | ((unsigned long)md[3] << 24L)) &
	    0xffffffffL;

err:
	EVP_MD_CTX_cleanup(&ctx);
	free(f);
	return (ret);
}
#endif

int
X509_issuer_name_cmp(const X509 *a, const X509 *b)
{
	return (X509_NAME_cmp(a->cert_info->issuer, b->cert_info->issuer));
}

int
X509_subject_name_cmp(const X509 *a, const X509 *b)
{
	return (X509_NAME_cmp(a->cert_info->subject, b->cert_info->subject));
}

int
X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)
{
	return (X509_NAME_cmp(a->crl->issuer, b->crl->issuer));
}

#ifndef OPENSSL_NO_SHA
int
X509_CRL_match(const X509_CRL *a, const X509_CRL *b)
{
	return memcmp(a->sha1_hash, b->sha1_hash, 20);
}
#endif

X509_NAME *
X509_get_issuer_name(X509 *a)
{
	return (a->cert_info->issuer);
}

unsigned long
X509_issuer_name_hash(X509 *x)
{
	return (X509_NAME_hash(x->cert_info->issuer));
}

#ifndef OPENSSL_NO_MD5
unsigned long
X509_issuer_name_hash_old(X509 *x)
{
	return (X509_NAME_hash_old(x->cert_info->issuer));
}
#endif

X509_NAME *
X509_get_subject_name(X509 *a)
{
	return (a->cert_info->subject);
}

ASN1_INTEGER *
X509_get_serialNumber(X509 *a)
{
	return (a->cert_info->serialNumber);
}

unsigned long
X509_subject_name_hash(X509 *x)
{
	return (X509_NAME_hash(x->cert_info->subject));
}

#ifndef OPENSSL_NO_MD5
unsigned long
X509_subject_name_hash_old(X509 *x)
{
	return (X509_NAME_hash_old(x->cert_info->subject));
}
#endif

#ifndef OPENSSL_NO_SHA
/* Compare two certificates: they must be identical for
 * this to work. NB: Although "cmp" operations are generally
 * prototyped to take "const" arguments (eg. for use in
 * STACKs), the way X509 handling is - these operations may
 * involve ensuring the hashes are up-to-date and ensuring
 * certain cert information is cached. So this is the point
 * where the "depth-first" constification tree has to halt
 * with an evil cast.
 */
int
X509_cmp(const X509 *a, const X509 *b)
{
	/* ensure hash is valid */
	X509_check_purpose((X509 *)a, -1, 0);
	X509_check_purpose((X509 *)b, -1, 0);

	return memcmp(a->sha1_hash, b->sha1_hash, SHA_DIGEST_LENGTH);
}
#endif

int
X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
{
	int ret;

	/* Ensure canonical encoding is present and up to date */
	if (!a->canon_enc || a->modified) {
		ret = i2d_X509_NAME((X509_NAME *)a, NULL);
		if (ret < 0)
			return -2;
	}
	if (!b->canon_enc || b->modified) {
		ret = i2d_X509_NAME((X509_NAME *)b, NULL);
		if (ret < 0)
			return -2;
	}
	ret = a->canon_enclen - b->canon_enclen;
	if (ret)
		return ret;
	return memcmp(a->canon_enc, b->canon_enc, a->canon_enclen);
}

unsigned long
X509_NAME_hash(X509_NAME *x)
{
	unsigned long ret = 0;
	unsigned char md[SHA_DIGEST_LENGTH];

	/* Make sure X509_NAME structure contains valid cached encoding */
	i2d_X509_NAME(x, NULL);
	if (!EVP_Digest(x->canon_enc, x->canon_enclen, md, NULL, EVP_sha1(),
	    NULL))
		return 0;

	ret = (((unsigned long)md[0]) | ((unsigned long)md[1] << 8L) |
	    ((unsigned long)md[2] << 16L) | ((unsigned long)md[3] << 24L)) &
	    0xffffffffL;
	return (ret);
}


#ifndef OPENSSL_NO_MD5
/* I now DER encode the name and hash it.  Since I cache the DER encoding,
 * this is reasonably efficient. */

unsigned long
X509_NAME_hash_old(X509_NAME *x)
{
	EVP_MD_CTX md_ctx;
	unsigned long ret = 0;
	unsigned char md[16];

	/* Make sure X509_NAME structure contains valid cached encoding */
	i2d_X509_NAME(x, NULL);
	EVP_MD_CTX_init(&md_ctx);
	if (EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL) &&
	    EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length) &&
	    EVP_DigestFinal_ex(&md_ctx, md, NULL))
		ret = (((unsigned long)md[0]) |
		    ((unsigned long)md[1] << 8L) |
		    ((unsigned long)md[2] << 16L) |
		    ((unsigned long)md[3] << 24L)) &
		    0xffffffffL;
	EVP_MD_CTX_cleanup(&md_ctx);

	return (ret);
}
#endif

/* Search a stack of X509 for a match */
X509 *
X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
    ASN1_INTEGER *serial)
{
	int i;
	X509_CINF cinf;
	X509 x, *x509 = NULL;

	if (!sk)
		return NULL;

	x.cert_info = &cinf;
	cinf.serialNumber = serial;
	cinf.issuer = name;

	for (i = 0; i < sk_X509_num(sk); i++) {
		x509 = sk_X509_value(sk, i);
		if (X509_issuer_and_serial_cmp(x509, &x) == 0)
			return (x509);
	}
	return (NULL);
}

X509 *
X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name)
{
	X509 *x509;
	int i;

	for (i = 0; i < sk_X509_num(sk); i++) {
		x509 = sk_X509_value(sk, i);
		if (X509_NAME_cmp(X509_get_subject_name(x509), name) == 0)
			return (x509);
	}
	return (NULL);
}

EVP_PKEY *
X509_get_pubkey(X509 *x)
{
	if ((x == NULL) || (x->cert_info == NULL))
		return (NULL);
	return (X509_PUBKEY_get(x->cert_info->key));
}

ASN1_BIT_STRING *
X509_get0_pubkey_bitstr(const X509 *x)
{
	if (!x)
		return NULL;
	return x->cert_info->key->public_key;
}

int
X509_check_private_key(X509 *x, EVP_PKEY *k)
{
	EVP_PKEY *xk;
	int ret;

	xk = X509_get_pubkey(x);

	if (xk)
		ret = EVP_PKEY_cmp(xk, k);
	else
		ret = -2;

	switch (ret) {
	case 1:
		break;
	case 0:
		X509error(X509_R_KEY_VALUES_MISMATCH);
		break;
	case -1:
		X509error(X509_R_KEY_TYPE_MISMATCH);
		break;
	case -2:
		X509error(X509_R_UNKNOWN_KEY_TYPE);
	}
	EVP_PKEY_free(xk);
	if (ret > 0)
		return 1;
	return 0;
}
@


1.26
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_cmp.c,v 1.25 2014/09/26 19:31:09 miod Exp $ */
d354 1
a354 2
		X509err(X509_F_X509_CHECK_PRIVATE_KEY,
		    X509_R_KEY_VALUES_MISMATCH);
d357 1
a357 2
		X509err(X509_F_X509_CHECK_PRIVATE_KEY,
		    X509_R_KEY_TYPE_MISMATCH);
d360 1
a360 2
		X509err(X509_F_X509_CHECK_PRIVATE_KEY,
		    X509_R_UNKNOWN_KEY_TYPE);
@


1.25
log
@X509_issuer_and_serial_hash(): do not leak memory if an error occurs during
the first EVP block.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_cmp.c,v 1.24 2014/07/13 11:15:54 miod Exp $ */
d79 1
a79 1
	i = M_ASN1_INTEGER_cmp(ai->serialNumber, bi->serialNumber);
@


1.24
log
@Check X509_NAME_oneline() return value when it will have to allocate memory.
@
text
@d1 1
a1 1
/* $OpenBSD: x509_cmp.c,v 1.23 2014/07/12 16:03:37 miod Exp $ */
d103 1
d116 1
@


1.23
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_cmp.c,v 1.22 2014/07/11 08:44:49 jsing Exp $ */
d96 2
@


1.22
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_cmp.c,v 1.21 2014/07/10 22:45:58 jsing Exp $ */
d361 1
a361 2
	if (xk)
		EVP_PKEY_free(xk);
@


1.21
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: x509_cmp.c,v 1.20 2014/07/10 13:58:23 jsing Exp $ */
a64 1
#include "cryptlib.h"
d66 1
@


1.20
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_cmp.c,v 1.19 2014/06/12 15:49:31 deraadt Exp $ */
d62 2
@


1.19
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 2
a62 1
#include <ctype.h>
@


1.18
log
@Stop setting the EVP_MD_CTX_FLAG_NON_FIPS_ALLOW - it has been ignored since
OpenSSL 1.0.0.

ok miod@@ (a little while back)
@
text
@d1 1
a1 1
/* crypto/x509/x509_cmp.c */
@


1.17
log
@KNF.
@
text
@a260 1
	EVP_MD_CTX_set_flags(&md_ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
@


1.16
log
@blunt force knf
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d67 2
a68 1
int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)
d71 1
a71 1
	X509_CINF *ai,*bi;
d73 6
a78 5
	ai=a->cert_info;
	bi=b->cert_info;
	i=M_ASN1_INTEGER_cmp(ai->serialNumber,bi->serialNumber);
	if (i) return(i);
	return(X509_NAME_cmp(ai->issuer,bi->issuer));
d82 2
a83 1
unsigned long X509_issuer_and_serial_hash(X509 *a)
d85 1
a85 1
	unsigned long ret=0;
d91 1
a91 1
	f=X509_NAME_oneline(a->cert_info->issuer,NULL,0);
d94 1
a94 1
	if (!EVP_DigestUpdate(&ctx,(unsigned char *)f,strlen(f)))
d97 3
a99 2
	if(!EVP_DigestUpdate(&ctx,(unsigned char *)a->cert_info->serialNumber->data,
		(unsigned long)a->cert_info->serialNumber->length))
d101 1
a101 1
	if (!EVP_DigestFinal_ex(&ctx,&(md[0]),NULL))
d103 5
a107 4
	ret=(	((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
		((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
		)&0xffffffffL;
	err:
d109 1
a109 1
	return(ret);
d112 3
a114 2
	
int X509_issuer_name_cmp(const X509 *a, const X509 *b)
d116 1
a116 1
	return(X509_NAME_cmp(a->cert_info->issuer,b->cert_info->issuer));
d119 2
a120 1
int X509_subject_name_cmp(const X509 *a, const X509 *b)
d122 1
a122 1
	return(X509_NAME_cmp(a->cert_info->subject,b->cert_info->subject));
d125 2
a126 1
int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)
d128 1
a128 1
	return(X509_NAME_cmp(a->crl->issuer,b->crl->issuer));
d132 2
a133 1
int X509_CRL_match(const X509_CRL *a, const X509_CRL *b)
d139 2
a140 1
X509_NAME *X509_get_issuer_name(X509 *a)
d142 1
a142 1
	return(a->cert_info->issuer);
d145 2
a146 1
unsigned long X509_issuer_name_hash(X509 *x)
d148 1
a148 1
	return(X509_NAME_hash(x->cert_info->issuer));
d152 2
a153 1
unsigned long X509_issuer_name_hash_old(X509 *x)
d155 1
a155 1
	return(X509_NAME_hash_old(x->cert_info->issuer));
d159 2
a160 1
X509_NAME *X509_get_subject_name(X509 *a)
d162 1
a162 1
	return(a->cert_info->subject);
d165 2
a166 1
ASN1_INTEGER *X509_get_serialNumber(X509 *a)
d168 1
a168 1
	return(a->cert_info->serialNumber);
d171 2
a172 1
unsigned long X509_subject_name_hash(X509 *x)
d174 1
a174 1
	return(X509_NAME_hash(x->cert_info->subject));
d178 2
a179 1
unsigned long X509_subject_name_hash_old(X509 *x)
d181 1
a181 1
	return(X509_NAME_hash_old(x->cert_info->subject));
d195 2
a196 1
int X509_cmp(const X509 *a, const X509 *b)
d206 2
a207 2

int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
a211 1

a216 1

a221 1

a222 1

a224 1

a225 1

d228 2
a229 1
unsigned long X509_NAME_hash(X509_NAME *x)
d231 1
a231 1
	unsigned long ret=0;
d235 1
a235 1
	i2d_X509_NAME(x,NULL);
d237 1
a237 1
		NULL))
d240 4
a243 4
	ret=(	((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
		((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
		)&0xffffffffL;
	return(ret);
d251 2
a252 1
unsigned long X509_NAME_hash_old(X509_NAME *x)
d255 1
a255 1
	unsigned long ret=0;
d259 1
a259 1
	i2d_X509_NAME(x,NULL);
d262 8
a269 6
	if (EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL)
	    && EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length)
	    && EVP_DigestFinal_ex(&md_ctx,md,NULL))
		ret=(((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
		     ((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
		     )&0xffffffffL;
d272 1
a272 1
	return(ret);
d277 3
a279 2
X509 *X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
		ASN1_INTEGER *serial)
d283 1
a283 1
	X509 x,*x509=NULL;
d285 2
a286 1
	if(!sk) return NULL;
d288 8
a295 8
	x.cert_info= &cinf;
	cinf.serialNumber=serial;
	cinf.issuer=name;

	for (i=0; i<sk_X509_num(sk); i++) {
		x509=sk_X509_value(sk,i);
		if (X509_issuer_and_serial_cmp(x509,&x) == 0)
			return(x509);
d297 1
a297 1
	return(NULL);
d300 2
a301 1
X509 *X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name)
d306 4
a309 4
	for (i=0; i<sk_X509_num(sk); i++) {
		x509=sk_X509_value(sk,i);
		if (X509_NAME_cmp(X509_get_subject_name(x509),name) == 0)
			return(x509);
d311 1
a311 1
	return(NULL);
d314 2
a315 1
EVP_PKEY *X509_get_pubkey(X509 *x)
d318 2
a319 2
		return(NULL);
	return(X509_PUBKEY_get(x->cert_info->key));
d322 2
a323 1
ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x)
d325 2
a326 1
	if(!x) return NULL;
d330 2
a331 1
int X509_check_private_key(X509 *x, EVP_PKEY *k)
d336 1
a336 1
	xk=X509_get_pubkey(x);
d347 2
a348 1
		X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
d351 2
a352 1
		X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_TYPE_MISMATCH);
d355 2
a356 1
	        X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_UNKNOWN_KEY_TYPE);
@


1.15
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d68 1
a68 1
	{
d77 1
a77 1
	}
d81 1
a81 1
	{
d105 1
a105 1
	}
d109 1
a109 1
	{
d111 1
a111 1
	}
d114 1
a114 1
	{
d116 1
a116 1
	}
d119 1
a119 1
	{
d121 1
a121 1
	}
d125 1
a125 1
	{
d127 1
a127 1
	}
d131 1
a131 1
	{
d133 1
a133 1
	}
d136 1
a136 1
	{
d138 1
a138 1
	}
d142 1
a142 1
	{
d144 1
a144 1
	}
d148 1
a148 1
	{
d150 1
a150 1
	}
d153 1
a153 1
	{
d155 1
a155 1
	}
d158 1
a158 1
	{
d160 1
a160 1
	}
d164 1
a164 1
	{
d166 1
a166 1
	}
d191 1
a191 1
	{
d196 1
a196 2
	if (!a->canon_enc || a->modified)
		{
d200 1
a200 1
		}
d202 1
a202 2
	if (!b->canon_enc || b->modified)
		{
d206 1
a206 1
		}
d215 1
a215 1
	}
d218 1
a218 1
	{
d232 1
a232 1
	}
d240 1
a240 1
	{
d258 1
a258 1
	}
d264 1
a264 1
	{
d275 1
a275 2
	for (i=0; i<sk_X509_num(sk); i++)
		{
d279 1
a279 1
		}
d281 1
a281 1
	}
d284 1
a284 1
	{
d288 1
a288 2
	for (i=0; i<sk_X509_num(sk); i++)
		{
d292 1
a292 1
		}
d294 1
a294 1
	}
d297 1
a297 1
	{
d301 1
a301 1
	}
d304 1
a304 1
	{
d307 1
a307 1
	}
d310 1
a310 1
	{
d321 1
a321 2
	switch (ret)
		{
d332 1
a332 1
		}
d338 1
a338 1
	}
@


1.14
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d93 1
a93 1
	OPENSSL_free(f);
@


1.13
log
@resolve conflicts
@
text
@a88 1
	ret=strlen(f);
d91 1
a91 1
	if (!EVP_DigestUpdate(&ctx,(unsigned char *)f,ret))
d251 6
a256 3
	EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL);
	EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length);
	EVP_DigestFinal_ex(&md_ctx,md,NULL);
a258 3
	ret=(	((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
		((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
		)&0xffffffffL;
@


1.12
log
@resolve conflicts, fix local changes
@
text
@d90 4
a93 2
	EVP_DigestInit_ex(&ctx, EVP_md5(), NULL);
	EVP_DigestUpdate(&ctx,(unsigned char *)f,ret);
d95 5
a99 3
	EVP_DigestUpdate(&ctx,(unsigned char *)a->cert_info->serialNumber->data,
		(unsigned long)a->cert_info->serialNumber->length);
	EVP_DigestFinal_ex(&ctx,&(md[0]),NULL);
d103 1
d227 3
a229 1
	EVP_Digest(x->canon_enc, x->canon_enclen, md, NULL, EVP_sha1(), NULL);
d244 1
d250 6
a255 1
	EVP_Digest(x->bytes->data, x->bytes->length, md, NULL, EVP_md5(), NULL);
@


1.11
log
@resolve conflicts
@
text
@d119 7
d136 7
d158 7
d186 1
a186 9
/* Case insensitive string comparision */
static int nocase_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
{
	int i;

	if (a->length != b->length)
		return (a->length - b->length);

	for (i=0; i<a->length; i++)
d188 1
a188 1
		int ca, cb;
d190 1
a190 2
		ca = tolower(a->data[i]);
		cb = tolower(b->data[i]);
d192 6
a197 5
		if (ca != cb)
			return(ca-cb);
	}
	return 0;
}
d199 6
a204 25
/* Case insensitive string comparision with space normalization 
 * Space normalization - ignore leading, trailing spaces, 
 *       multiple spaces between characters are replaced by single space  
 */
static int nocase_spacenorm_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
{
	unsigned char *pa = NULL, *pb = NULL;
	int la, lb;
	
	la = a->length;
	lb = b->length;
	pa = a->data;
	pb = b->data;

	/* skip leading spaces */
	while (la > 0 && isspace(*pa))
	{
		la--;
		pa++;
	}
	while (lb > 0 && isspace(*pb))
	{
		lb--;
		pb++;
	}
d206 1
a206 5
	/* skip trailing spaces */
	while (la > 0 && isspace(pa[la-1]))
		la--;
	while (lb > 0 && isspace(pb[lb-1]))
		lb--;
d208 2
a209 4
	/* compare strings with space normalization */
	while (la > 0 && lb > 0)
	{
		int ca, cb;
d211 1
a211 5
		/* compare character */
		ca = tolower(*pa);
		cb = tolower(*pb);
		if (ca != cb)
			return (ca - cb);
a212 21
		pa++; pb++;
		la--; lb--;

		if (la <= 0 || lb <= 0)
			break;

		/* is white space next character ? */
		if (isspace(*pa) && isspace(*pb))
		{
			/* skip remaining white spaces */
			while (la > 0 && isspace(*pa))
			{
				la--;
				pa++;
			}
			while (lb > 0 && isspace(*pb))
			{
				lb--;
				pb++;
			}
		}
a213 2
	if (la > 0 || lb > 0)
		return la - lb;
d215 1
a215 4
	return 0;
}

static int asn1_string_memcmp(ASN1_STRING *a, ASN1_STRING *b)
d217 2
a218 6
	int j;
	j = a->length - b->length;
	if (j)
		return j;
	return memcmp(a->data, b->data, a->length);
	}
d220 3
a222 1
#define STR_TYPE_CMP (B_ASN1_PRINTABLESTRING|B_ASN1_T61STRING|B_ASN1_UTF8STRING)
d224 5
a228 6
int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
	{
	int i,j;
	X509_NAME_ENTRY *na,*nb;

	unsigned long nabit, nbbit;
a229 43
	j = sk_X509_NAME_ENTRY_num(a->entries)
		  - sk_X509_NAME_ENTRY_num(b->entries);
	if (j)
		return j;
	for (i=sk_X509_NAME_ENTRY_num(a->entries)-1; i>=0; i--)
		{
		na=sk_X509_NAME_ENTRY_value(a->entries,i);
		nb=sk_X509_NAME_ENTRY_value(b->entries,i);
		j=na->value->type-nb->value->type;
		if (j)
			{
			nabit = ASN1_tag2bit(na->value->type);
			nbbit = ASN1_tag2bit(nb->value->type);
			if (!(nabit & STR_TYPE_CMP) ||
				!(nbbit & STR_TYPE_CMP))
				return j;
			if (!asn1_string_memcmp(na->value, nb->value))
				j = 0;
			}
		else if (na->value->type == V_ASN1_PRINTABLESTRING)
			j=nocase_spacenorm_cmp(na->value, nb->value);
		else if (na->value->type == V_ASN1_IA5STRING
			&& OBJ_obj2nid(na->object) == NID_pkcs9_emailAddress)
			j=nocase_cmp(na->value, nb->value);
		else
			j = asn1_string_memcmp(na->value, nb->value);
		if (j) return(j);
		j=na->set-nb->set;
		if (j) return(j);
		}

	/* We will check the object types after checking the values
	 * since the values will more often be different than the object
	 * types. */
	for (i=sk_X509_NAME_ENTRY_num(a->entries)-1; i>=0; i--)
		{
		na=sk_X509_NAME_ENTRY_value(a->entries,i);
		nb=sk_X509_NAME_ENTRY_value(b->entries,i);
		j=OBJ_cmp(na->object,nb->object);
		if (j) return(j);
		}
	return(0);
	}
d234 2
a235 1
unsigned long X509_NAME_hash(X509_NAME *x)
a238 1
	EVP_MD_CTX md_ctx;
d242 1
a242 6
	EVP_MD_CTX_init(&md_ctx);
	EVP_MD_CTX_set_flags(&md_ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
	EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL);
	EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length);
	EVP_DigestFinal_ex(&md_ctx,md,NULL);
	EVP_MD_CTX_cleanup(&md_ctx);
d303 2
a304 2
	EVP_PKEY *xk=NULL;
	int ok=0;
d307 7
a313 1
	switch (EVP_PKEY_cmp(xk, k))
a315 1
		ok=1;
a323 15
#ifndef OPENSSL_NO_EC
		if (k->type == EVP_PKEY_EC)
			{
			X509err(X509_F_X509_CHECK_PRIVATE_KEY, ERR_R_EC_LIB);
			break;
			}
#endif
#ifndef OPENSSL_NO_DH
		if (k->type == EVP_PKEY_DH)
			{
			/* No idea */
			X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_CANT_CHECK_DH_KEY);
			break;
			}
#endif
d326 5
a330 3

	EVP_PKEY_free(xk);
	return(ok);
@


1.10
log
@resolve conflicts
@
text
@d291 2
a292 1
			j = asn1_string_memcmp(na->value, nb->value);
@


1.9
log
@resolve conflicts
@
text
@d325 1
d329 6
a334 1
	EVP_Digest(x->bytes->data, x->bytes->length, md, NULL, EVP_md5(), NULL);
@


1.8
log
@resolve conflicts
@
text
@a324 1
	EVP_MD_CTX md_ctx;
d328 1
a328 6
	EVP_MD_CTX_init(&md_ctx);
	EVP_MD_CTX_set_flags(&md_ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
	EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL);
	EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length);
	EVP_DigestFinal_ex(&md_ctx,md,NULL);
	EVP_MD_CTX_cleanup(&md_ctx);
d393 1
a393 6
	if (xk->type != k->type)
	    {
	    X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_TYPE_MISMATCH);
	    goto err;
	    }
	switch (k->type)
d395 2
a396 8
#ifndef OPENSSL_NO_RSA
	case EVP_PKEY_RSA:
		if (BN_cmp(xk->pkey.rsa->n,k->pkey.rsa->n) != 0
		    || BN_cmp(xk->pkey.rsa->e,k->pkey.rsa->e) != 0)
		    {
		    X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
		    goto err;
		    }
d398 5
a402 8
#endif
#ifndef OPENSSL_NO_DSA
	case EVP_PKEY_DSA:
		if (BN_cmp(xk->pkey.dsa->pub_key,k->pkey.dsa->pub_key) != 0)
		    {
		    X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
		    goto err;
		    }
d404 7
d413 6
a418 4
	case EVP_PKEY_DH:
		/* No idea */
	        X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_CANT_CHECK_DH_KEY);
		goto err;
a419 1
	default:
a420 1
		goto err;
a422 2
	ok=1;
err:
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d257 11
d273 6
a278 4
	if (sk_X509_NAME_ENTRY_num(a->entries)
	    != sk_X509_NAME_ENTRY_num(b->entries))
		return sk_X509_NAME_ENTRY_num(a->entries)
		  -sk_X509_NAME_ENTRY_num(b->entries);
d284 10
a293 2
		if (j) return(j);
		if (na->value->type == V_ASN1_PRINTABLESTRING)
d299 1
a299 6
			{
			j=na->value->length-nb->value->length;
			if (j) return(j);
			j=memcmp(na->value->data,nb->value->data,
				na->value->length);
			}
d325 1
d329 6
a334 1
	EVP_Digest(x->bytes->data, x->bytes->length, md, NULL, EVP_md5(), NULL);
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d60 1
d85 1
a85 1
	char str[256];
d88 2
a89 2
	X509_NAME_oneline(a->cert_info->issuer,str,256);
	ret=strlen(str);
d91 2
a92 1
	EVP_DigestUpdate(&ctx,(unsigned char *)str,ret);
d164 93
d270 1
a270 1
		j=na->value->length-nb->value->length;
d272 12
a283 2
		j=memcmp(na->value->data,nb->value->data,
			na->value->length);
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d78 1
a78 1
#ifndef NO_MD5
d82 1
a82 1
	MD5_CTX ctx;
d86 1
d89 3
a91 3
	MD5_Init(&ctx);
	MD5_Update(&ctx,(unsigned char *)str,ret);
	MD5_Update(&ctx,(unsigned char *)a->cert_info->serialNumber->data,
d93 1
a93 1
	MD5_Final(&(md[0]),&ctx);
d97 1
d142 1
a142 1
#ifndef NO_SHA
d197 1
a197 1
#ifndef NO_MD5
d205 1
a205 1
	/* Ensure cached version is up to date */
d207 1
a207 4
	/* Use cached encoding directly rather than copying: this should
	 * keep libsafe happy.
	 */
	MD5((unsigned char *)x->bytes->data,x->bytes->length,&(md[0]));
d260 6
d279 1
a279 1
#ifndef NO_RSA
d289 1
a289 1
#ifndef NO_DSA
d298 1
a298 1
#ifndef NO_DH
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a201 2
	unsigned char str[256],*p,*pp;
	int i;
d203 6
a208 10
	i=i2d_X509_NAME(x,NULL);
	if (i > sizeof(str))
		p=OPENSSL_malloc(i);
	else
		p=str;

	pp=p;
	i2d_X509_NAME(x,&pp);
	MD5((unsigned char *)p,i,&(md[0]));
	if (p != str) OPENSSL_free(p);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d66 1
a66 1
int X509_issuer_and_serial_cmp(X509 *a, X509 *b)
d100 1
a100 1
int X509_issuer_name_cmp(X509 *a, X509 *b)
d105 1
a105 1
int X509_subject_name_cmp(X509 *a, X509 *b)
d110 1
a110 1
int X509_CRL_cmp(X509_CRL *a, X509_CRL *b)
d142 7
a148 1
 * this to work.
d150 1
a150 1
int X509_cmp(X509 *a, X509 *b)
d153 2
a154 2
	X509_check_purpose(a, -1, 0);
	X509_check_purpose(b, -1, 0);
d160 1
a160 1
int X509_NAME_cmp(X509_NAME *a, X509_NAME *b)
d207 1
a207 1
		p=Malloc(i);
d214 1
a214 1
	if (p != str) Free(p);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a59 2
#include <sys/types.h>
#include <sys/stat.h>
d64 1
d73 1
a73 1
	i=ASN1_INTEGER_cmp(ai->serialNumber,bi->serialNumber);
d140 14
d191 1
a191 1
 * this is reasonably effiecent. */
d224 2
@


1.1
log
@Initial revision
@
text
@d63 5
a67 7
#include "asn1.h"
#include "objects.h"
#include "x509.h"

int X509_issuer_and_serial_cmp(a,b)
X509 *a;
X509 *b;
d80 1
a80 2
unsigned long X509_issuer_and_serial_hash(a)
X509 *a;
d101 1
a101 3
int X509_issuer_name_cmp(a, b)
X509 *a;
X509 *b;
d106 1
a106 3
int X509_subject_name_cmp(a, b)
X509 *a;
X509 *b;
d111 1
a111 3
int X509_CRL_cmp(a, b)
X509_CRL *a;
X509_CRL *b;
d116 1
a116 2
X509_NAME *X509_get_issuer_name(a)
X509 *a;
d121 1
a121 2
unsigned long X509_issuer_name_hash(x)
X509 *x;
d126 1
a126 2
X509_NAME *X509_get_subject_name(a)
X509 *a;
d131 1
a131 2
ASN1_INTEGER *X509_get_serialNumber(a)
X509 *a;
d136 1
a136 2
unsigned long X509_subject_name_hash(x)
X509 *x;
d141 1
a141 3
int X509_NAME_cmp(a, b)
X509_NAME *a;
X509_NAME *b;
d146 5
a150 3
	if (sk_num(a->entries) != sk_num(b->entries))
		return(sk_num(a->entries)-sk_num(b->entries));
	for (i=sk_num(a->entries)-1; i>=0; i--)
d152 2
a153 2
		na=(X509_NAME_ENTRY *)sk_value(a->entries,i);
		nb=(X509_NAME_ENTRY *)sk_value(b->entries,i);
d166 1
a166 1
	for (i=sk_num(a->entries)-1; i>=0; i--)
d168 2
a169 2
		na=(X509_NAME_ENTRY *)sk_value(a->entries,i);
		nb=(X509_NAME_ENTRY *)sk_value(b->entries,i);
d179 1
a179 2
unsigned long X509_NAME_hash(x)
X509_NAME *x;
d205 2
a206 4
X509 *X509_find_by_issuer_and_serial(sk,name,serial)
STACK *sk;
X509_NAME *name;
ASN1_INTEGER *serial;
d216 1
a216 1
	for (i=0; i<sk_num(sk); i++)
d218 1
a218 1
		x509=(X509 *)sk_value(sk,i);
d225 1
a225 3
X509 *X509_find_by_subject(sk,name)
STACK *sk;
X509_NAME *name;
d230 1
a230 1
	for (i=0; i<sk_num(sk); i++)
d232 1
a232 1
		x509=(X509 *)sk_value(sk,i);
d239 55
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 2
d63 7
a69 6
#include <openssl/asn1.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)
d76 1
a76 1
	i=M_ASN1_INTEGER_cmp(ai->serialNumber,bi->serialNumber);
d81 3
a83 2
#ifndef OPENSSL_NO_MD5
unsigned long X509_issuer_and_serial_hash(X509 *a)
d86 1
a86 1
	EVP_MD_CTX ctx;
a89 1
	EVP_MD_CTX_init(&ctx);
d92 3
a94 3
	EVP_DigestInit_ex(&ctx, EVP_md5(), NULL);
	EVP_DigestUpdate(&ctx,(unsigned char *)str,ret);
	EVP_DigestUpdate(&ctx,(unsigned char *)a->cert_info->serialNumber->data,
d96 1
a96 1
	EVP_DigestFinal_ex(&ctx,&(md[0]),NULL);
a99 1
	EVP_MD_CTX_cleanup(&ctx);
d104 3
a106 1
int X509_issuer_name_cmp(const X509 *a, const X509 *b)
d111 3
a113 1
int X509_subject_name_cmp(const X509 *a, const X509 *b)
d118 3
a120 1
int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)
d125 2
a126 1
X509_NAME *X509_get_issuer_name(X509 *a)
d131 2
a132 1
unsigned long X509_issuer_name_hash(X509 *x)
d137 2
a138 1
X509_NAME *X509_get_subject_name(X509 *a)
d143 2
a144 1
ASN1_INTEGER *X509_get_serialNumber(X509 *a)
d149 2
a150 1
unsigned long X509_subject_name_hash(X509 *x)
d155 3
a157 21
#ifndef OPENSSL_NO_SHA
/* Compare two certificates: they must be identical for
 * this to work. NB: Although "cmp" operations are generally
 * prototyped to take "const" arguments (eg. for use in
 * STACKs), the way X509 handling is - these operations may
 * involve ensuring the hashes are up-to-date and ensuring
 * certain cert information is cached. So this is the point
 * where the "depth-first" constification tree has to halt
 * with an evil cast.
 */
int X509_cmp(const X509 *a, const X509 *b)
{
	/* ensure hash is valid */
	X509_check_purpose((X509 *)a, -1, 0);
	X509_check_purpose((X509 *)b, -1, 0);

	return memcmp(a->sha1_hash, b->sha1_hash, SHA_DIGEST_LENGTH);
}
#endif

int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
d162 3
a164 5
	if (sk_X509_NAME_ENTRY_num(a->entries)
	    != sk_X509_NAME_ENTRY_num(b->entries))
		return sk_X509_NAME_ENTRY_num(a->entries)
		  -sk_X509_NAME_ENTRY_num(b->entries);
	for (i=sk_X509_NAME_ENTRY_num(a->entries)-1; i>=0; i--)
d166 2
a167 2
		na=sk_X509_NAME_ENTRY_value(a->entries,i);
		nb=sk_X509_NAME_ENTRY_value(b->entries,i);
d180 1
a180 1
	for (i=sk_X509_NAME_ENTRY_num(a->entries)-1; i>=0; i--)
d182 2
a183 2
		na=sk_X509_NAME_ENTRY_value(a->entries,i);
		nb=sk_X509_NAME_ENTRY_value(b->entries,i);
d190 1
a190 1
#ifndef OPENSSL_NO_MD5
d192 3
a194 2
 * this is reasonably efficient. */
unsigned long X509_NAME_hash(X509_NAME *x)
d198 2
d201 10
a210 3
	/* Make sure X509_NAME structure contains valid cached encoding */
	i2d_X509_NAME(x,NULL);
	EVP_Digest(x->bytes->data, x->bytes->length, md, NULL, EVP_md5(), NULL);
d220 4
a223 2
X509 *X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
		ASN1_INTEGER *serial)
a228 2
	if(!sk) return NULL;

d233 1
a233 1
	for (i=0; i<sk_X509_num(sk); i++)
d235 1
a235 1
		x509=sk_X509_value(sk,i);
d242 3
a244 1
X509 *X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name)
d249 1
a249 1
	for (i=0; i<sk_X509_num(sk); i++)
d251 1
a251 1
		x509=sk_X509_value(sk,i);
a257 61
EVP_PKEY *X509_get_pubkey(X509 *x)
	{
	if ((x == NULL) || (x->cert_info == NULL))
		return(NULL);
	return(X509_PUBKEY_get(x->cert_info->key));
	}

ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x)
	{
	if(!x) return NULL;
	return x->cert_info->key->public_key;
	}

int X509_check_private_key(X509 *x, EVP_PKEY *k)
	{
	EVP_PKEY *xk=NULL;
	int ok=0;

	xk=X509_get_pubkey(x);
	if (xk->type != k->type)
	    {
	    X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_TYPE_MISMATCH);
	    goto err;
	    }
	switch (k->type)
		{
#ifndef OPENSSL_NO_RSA
	case EVP_PKEY_RSA:
		if (BN_cmp(xk->pkey.rsa->n,k->pkey.rsa->n) != 0
		    || BN_cmp(xk->pkey.rsa->e,k->pkey.rsa->e) != 0)
		    {
		    X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
		    goto err;
		    }
		break;
#endif
#ifndef OPENSSL_NO_DSA
	case EVP_PKEY_DSA:
		if (BN_cmp(xk->pkey.dsa->pub_key,k->pkey.dsa->pub_key) != 0)
		    {
		    X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
		    goto err;
		    }
		break;
#endif
#ifndef OPENSSL_NO_DH
	case EVP_PKEY_DH:
		/* No idea */
	        X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_CANT_CHECK_DH_KEY);
		goto err;
#endif
	default:
	        X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_UNKNOWN_KEY_TYPE);
		goto err;
		}

	ok=1;
err:
	EVP_PKEY_free(xk);
	return(ok);
	}
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a59 1
#include <ctype.h>
d84 1
a84 1
	char *f;
d87 2
a88 2
	f=X509_NAME_oneline(a->cert_info->issuer,NULL,0);
	ret=strlen(f);
d90 1
a90 2
	EVP_DigestUpdate(&ctx,(unsigned char *)f,ret);
	OPENSSL_free(f);
a161 93

/* Case insensitive string comparision */
static int nocase_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
{
	int i;

	if (a->length != b->length)
		return (a->length - b->length);

	for (i=0; i<a->length; i++)
	{
		int ca, cb;

		ca = tolower(a->data[i]);
		cb = tolower(b->data[i]);

		if (ca != cb)
			return(ca-cb);
	}
	return 0;
}

/* Case insensitive string comparision with space normalization 
 * Space normalization - ignore leading, trailing spaces, 
 *       multiple spaces between characters are replaced by single space  
 */
static int nocase_spacenorm_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
{
	unsigned char *pa = NULL, *pb = NULL;
	int la, lb;
	
	la = a->length;
	lb = b->length;
	pa = a->data;
	pb = b->data;

	/* skip leading spaces */
	while (la > 0 && isspace(*pa))
	{
		la--;
		pa++;
	}
	while (lb > 0 && isspace(*pb))
	{
		lb--;
		pb++;
	}

	/* skip trailing spaces */
	while (la > 0 && isspace(pa[la-1]))
		la--;
	while (lb > 0 && isspace(pb[lb-1]))
		lb--;

	/* compare strings with space normalization */
	while (la > 0 && lb > 0)
	{
		int ca, cb;

		/* compare character */
		ca = tolower(*pa);
		cb = tolower(*pb);
		if (ca != cb)
			return (ca - cb);

		pa++; pb++;
		la--; lb--;

		if (la <= 0 || lb <= 0)
			break;

		/* is white space next character ? */
		if (isspace(*pa) && isspace(*pb))
		{
			/* skip remaining white spaces */
			while (la > 0 && isspace(*pa))
			{
				la--;
				pa++;
			}
			while (lb > 0 && isspace(*pb))
			{
				lb--;
				pb++;
			}
		}
	}
	if (la > 0 || lb > 0)
		return la - lb;

	return 0;
}

d175 1
a175 1
		j=na->value->type-nb->value->type;
d177 2
a178 12
		if (na->value->type == V_ASN1_PRINTABLESTRING)
			j=nocase_spacenorm_cmp(na->value, nb->value);
		else if (na->value->type == V_ASN1_IA5STRING
			&& OBJ_obj2nid(na->object) == NID_pkcs9_emailAddress)
			j=nocase_cmp(na->value, nb->value);
		else
			{
			j=na->value->length-nb->value->length;
			if (j) return(j);
			j=memcmp(na->value->data,nb->value->data,
				na->value->length);
			}
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a256 11
static int asn1_string_memcmp(ASN1_STRING *a, ASN1_STRING *b)
	{
	int j;
	j = a->length - b->length;
	if (j)
		return j;
	return memcmp(a->data, b->data, a->length);
	}

#define STR_TYPE_CMP (B_ASN1_PRINTABLESTRING|B_ASN1_T61STRING|B_ASN1_UTF8STRING)

d262 4
a265 6
	unsigned long nabit, nbbit;

	j = sk_X509_NAME_ENTRY_num(a->entries)
		  - sk_X509_NAME_ENTRY_num(b->entries);
	if (j)
		return j;
d271 2
a272 10
		if (j)
			{
			nabit = ASN1_tag2bit(na->value->type);
			nbbit = ASN1_tag2bit(nb->value->type);
			if (!(nabit & STR_TYPE_CMP) ||
				!(nbbit & STR_TYPE_CMP))
				return j;
			j = asn1_string_memcmp(na->value, nb->value);
			}
		else if (na->value->type == V_ASN1_PRINTABLESTRING)
d278 6
a283 1
			j = asn1_string_memcmp(na->value, nb->value);
a308 1
	EVP_MD_CTX md_ctx;
d312 1
a312 6
	EVP_MD_CTX_init(&md_ctx);
	EVP_MD_CTX_set_flags(&md_ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
	EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL);
	EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length);
	EVP_DigestFinal_ex(&md_ctx,md,NULL);
	EVP_MD_CTX_cleanup(&md_ctx);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d325 1
d329 6
a334 1
	EVP_Digest(x->bytes->data, x->bytes->length, md, NULL, EVP_md5(), NULL);
d399 6
a404 1
	switch (EVP_PKEY_cmp(xk, k))
d406 8
a413 2
	case 1:
		ok=1;
d415 8
a422 5
	case 0:
		X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
		break;
	case -1:
		X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_TYPE_MISMATCH);
a423 7
	case -2:
#ifndef OPENSSL_NO_EC
		if (k->type == EVP_PKEY_EC)
			{
			X509err(X509_F_X509_CHECK_PRIVATE_KEY, ERR_R_EC_LIB);
			break;
			}
d426 4
a429 6
		if (k->type == EVP_PKEY_DH)
			{
			/* No idea */
			X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_CANT_CHECK_DH_KEY);
			break;
			}
d431 1
d433 1
d436 2
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a324 1
	EVP_MD_CTX md_ctx;
d328 1
a328 6
	EVP_MD_CTX_init(&md_ctx);
	EVP_MD_CTX_set_flags(&md_ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
	EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL);
	EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length);
	EVP_DigestFinal_ex(&md_ctx,md,NULL);
	EVP_MD_CTX_cleanup(&md_ctx);
@


1.1.1.7
log
@import of OpenSSL 0.9.8k
@
text
@d291 1
a291 2
			if (!asn1_string_memcmp(na->value, nb->value))
				j = 0;
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@a118 7
#ifndef OPENSSL_NO_SHA
int X509_CRL_match(const X509_CRL *a, const X509_CRL *b)
	{
	return memcmp(a->sha1_hash, b->sha1_hash, 20);
	}
#endif

a128 7
#ifndef OPENSSL_NO_MD5
unsigned long X509_issuer_name_hash_old(X509 *x)
	{
	return(X509_NAME_hash_old(x->cert_info->issuer));
	}
#endif

a143 7
#ifndef OPENSSL_NO_MD5
unsigned long X509_subject_name_hash_old(X509 *x)
	{
	return(X509_NAME_hash_old(x->cert_info->subject));
	}
#endif

d165 55
a219 1
int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
d221 7
a227 1
	int ret;
d229 2
a230 1
	/* Ensure canonical encoding is present and up to date */
d232 2
a233 6
	if (!a->canon_enc || a->modified)
		{
		ret = i2d_X509_NAME((X509_NAME *)a, NULL);
		if (ret < 0)
			return -2;
		}
d235 2
a236 1
	if (!b->canon_enc || b->modified)
d238 11
a248 3
		ret = i2d_X509_NAME((X509_NAME *)b, NULL);
		if (ret < 0)
			return -2;
d250 3
d254 2
a255 1
	ret = a->canon_enclen - b->canon_enclen;
d257 8
a264 2
	if (ret)
		return ret;
d266 1
a266 1
	return memcmp(a->canon_enc, b->canon_enc, a->canon_enclen);
d268 4
a271 1
	}
d273 1
a273 4
unsigned long X509_NAME_hash(X509_NAME *x)
	{
	unsigned long ret=0;
	unsigned char md[SHA_DIGEST_LENGTH];
d275 30
a304 3
	/* Make sure X509_NAME structure contains valid cached encoding */
	i2d_X509_NAME(x,NULL);
	EVP_Digest(x->canon_enc, x->canon_enclen, md, NULL, EVP_sha1(), NULL);
d306 11
a316 4
	ret=(	((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
		((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
		)&0xffffffffL;
	return(ret);
a318 1

d322 1
a322 2

unsigned long X509_NAME_hash_old(X509_NAME *x)
d326 1
d330 6
a335 1
	EVP_Digest(x->bytes->data, x->bytes->length, md, NULL, EVP_md5(), NULL);
d396 2
a397 2
	EVP_PKEY *xk;
	int ret;
d400 1
a400 7

	if (xk)
		ret = EVP_PKEY_cmp(xk, k);
	else
		ret = -2;

	switch (ret)
d403 1
d412 15
d429 3
a431 5
	if (xk)
		EVP_PKEY_free(xk);
	if (ret > 0)
		return 1;
	return 0;
@


1.1.1.9
log
@import OpenSSL-1.0.1c
@
text
@d90 2
a91 4
	if (!EVP_DigestInit_ex(&ctx, EVP_md5(), NULL))
		goto err;
	if (!EVP_DigestUpdate(&ctx,(unsigned char *)f,ret))
		goto err;
d93 3
a95 5
	if(!EVP_DigestUpdate(&ctx,(unsigned char *)a->cert_info->serialNumber->data,
		(unsigned long)a->cert_info->serialNumber->length))
		goto err;
	if (!EVP_DigestFinal_ex(&ctx,&(md[0]),NULL))
		goto err;
a98 1
	err:
d222 1
a222 3
	if (!EVP_Digest(x->canon_enc, x->canon_enclen, md, NULL, EVP_sha1(),
		NULL))
		return 0;
a236 1
	EVP_MD_CTX md_ctx;
d242 1
a242 6
	EVP_MD_CTX_init(&md_ctx);
	EVP_MD_CTX_set_flags(&md_ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
	EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL);
	EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length);
	EVP_DigestFinal_ex(&md_ctx,md,NULL);
	EVP_MD_CTX_cleanup(&md_ctx);
@


1.1.1.10
log
@Import OpenSSL 1.0.1g
@
text
@d89 1
d92 1
a92 1
	if (!EVP_DigestUpdate(&ctx,(unsigned char *)f,strlen(f)))
d252 3
a254 6
	if (EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL)
	    && EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length)
	    && EVP_DigestFinal_ex(&md_ctx,md,NULL))
		ret=(((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
		     ((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
		     )&0xffffffffL;
d257 3
@


