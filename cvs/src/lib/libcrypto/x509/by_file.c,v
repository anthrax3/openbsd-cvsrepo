head	1.21;
access;
symbols
	OPENBSD_6_1_BASE:1.21;
locks; strict;
comment	@ * @;


1.21
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.20;
commitid	kT0fLt3r4lroFJra;

1.20
date	2016.03.11.07.08.45;	author mmcc;	state Exp;
branches;
next	1.19;
commitid	MTdM7aVFdRMAzAYE;

1.19
date	2015.04.11.16.03.21;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	WnYuC1gPCzN02uAn;

1.18
date	2015.02.05.01.33.22;	author reyk;	state Exp;
branches;
next	1.17;
commitid	aBGmGLHEhnjeyEgh;

1.17
date	2015.01.22.11.16.56;	author jsing;	state Exp;
branches;
next	1.16;
commitid	1GrZQqjEOO1zGOHA;

1.16
date	2014.07.25.06.05.32;	author doug;	state Exp;
branches;
next	1.15;
commitid	DnBLYuKKjvrWeH3R;

1.15
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.14;
commitid	yQEL1wOWIearrW15;

1.14
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.13;
commitid	id8dTrTMtnTn4fqt;

1.13
date	2014.06.23.22.19.02;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	9JQzcWo59KD9HxBQ;

1.12
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	mJUVYpkFBZ0Zv2bG;

1.11
date	2014.05.29.18.27.52;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.19.14.36.35;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.15.17.24.25;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.09;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.41;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.41;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.58;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.50;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.17;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: by_file.c,v 1.20 2016/03/11 07:08:45 mmcc Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <time.h>
#include <unistd.h>

#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/lhash.h>
#include <openssl/x509.h>

static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
    long argl, char **ret);

static X509_LOOKUP_METHOD x509_file_lookup = {
	.name = "Load file into cache",
	.new_item = NULL,
	.free = NULL,
	.init = NULL,
	.shutdown = NULL,
	.ctrl = by_file_ctrl,
	.get_by_subject = NULL,
	.get_by_issuer_serial = NULL,
	.get_by_fingerprint = NULL,
	.get_by_alias = NULL,
};

X509_LOOKUP_METHOD *
X509_LOOKUP_file(void)
{
	return (&x509_file_lookup);
}

static int
by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
    char **ret)
{
	int ok = 0;

	switch (cmd) {
	case X509_L_FILE_LOAD:
		if (argl == X509_FILETYPE_DEFAULT) {
			ok = (X509_load_cert_crl_file(ctx,
			    X509_get_default_cert_file(),
			    X509_FILETYPE_PEM) != 0);
			if (!ok) {
				X509error(X509_R_LOADING_DEFAULTS);
			}
		} else {
			if (argl == X509_FILETYPE_PEM)
				ok = (X509_load_cert_crl_file(ctx, argp,
				    X509_FILETYPE_PEM) != 0);
			else
				ok = (X509_load_cert_file(ctx,
				    argp, (int)argl) != 0);
		}
		break;
	}
	return (ok);
}

int
X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type)
{
	int ret = 0;
	BIO *in = NULL;
	int i, count = 0;
	X509 *x = NULL;

	if (file == NULL)
		return (1);
	in = BIO_new(BIO_s_file_internal());

	if ((in == NULL) || (BIO_read_filename(in, file) <= 0)) {
		X509error(ERR_R_SYS_LIB);
		goto err;
	}

	if (type == X509_FILETYPE_PEM) {
		for (;;) {
			x = PEM_read_bio_X509_AUX(in, NULL, NULL, NULL);
			if (x == NULL) {
				if ((ERR_GET_REASON(ERR_peek_last_error()) ==
				    PEM_R_NO_START_LINE) && (count > 0)) {
					ERR_clear_error();
					break;
				} else {
					X509error(ERR_R_PEM_LIB);
					goto err;
				}
			}
			i = X509_STORE_add_cert(ctx->store_ctx, x);
			if (!i)
				goto err;
			count++;
			X509_free(x);
			x = NULL;
		}
		ret = count;
	} else if (type == X509_FILETYPE_ASN1) {
		x = d2i_X509_bio(in, NULL);
		if (x == NULL) {
			X509error(ERR_R_ASN1_LIB);
			goto err;
		}
		i = X509_STORE_add_cert(ctx->store_ctx, x);
		if (!i)
			goto err;
		ret = i;
	} else {
		X509error(X509_R_BAD_X509_FILETYPE);
		goto err;
	}
err:
	X509_free(x);
	BIO_free(in);
	return (ret);
}

int
X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type)
{
	int ret = 0;
	BIO *in = NULL;
	int i, count = 0;
	X509_CRL *x = NULL;

	if (file == NULL)
		return (1);
	in = BIO_new(BIO_s_file_internal());

	if ((in == NULL) || (BIO_read_filename(in, file) <= 0)) {
		X509error(ERR_R_SYS_LIB);
		goto err;
	}

	if (type == X509_FILETYPE_PEM) {
		for (;;) {
			x = PEM_read_bio_X509_CRL(in, NULL, NULL, NULL);
			if (x == NULL) {
				if ((ERR_GET_REASON(ERR_peek_last_error()) ==
				    PEM_R_NO_START_LINE) && (count > 0)) {
					ERR_clear_error();
					break;
				} else {
					X509error(ERR_R_PEM_LIB);
					goto err;
				}
			}
			i = X509_STORE_add_crl(ctx->store_ctx, x);
			if (!i)
				goto err;
			count++;
			X509_CRL_free(x);
			x = NULL;
		}
		ret = count;
	} else if (type == X509_FILETYPE_ASN1) {
		x = d2i_X509_CRL_bio(in, NULL);
		if (x == NULL) {
			X509error(ERR_R_ASN1_LIB);
			goto err;
		}
		i = X509_STORE_add_crl(ctx->store_ctx, x);
		if (!i)
			goto err;
		ret = i;
	} else {
		X509error(X509_R_BAD_X509_FILETYPE);
		goto err;
	}
err:
	if (x != NULL)
		X509_CRL_free(x);
	BIO_free(in);
	return (ret);
}

int
X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type)
{
	STACK_OF(X509_INFO) *inf;
	X509_INFO *itmp;
	BIO *in;
	int i, count = 0;
	if (type != X509_FILETYPE_PEM)
		return X509_load_cert_file(ctx, file, type);
	in = BIO_new_file(file, "r");
	if (!in) {
		X509error(ERR_R_SYS_LIB);
		return 0;
	}
	inf = PEM_X509_INFO_read_bio(in, NULL, NULL, NULL);
	BIO_free(in);
	if (!inf) {
		X509error(ERR_R_PEM_LIB);
		return 0;
	}
	for (i = 0; i < sk_X509_INFO_num(inf); i++) {
		itmp = sk_X509_INFO_value(inf, i);
		if (itmp->x509) {
			X509_STORE_add_cert(ctx->store_ctx, itmp->x509);
			count++;
		}
		if (itmp->crl) {
			X509_STORE_add_crl(ctx->store_ctx, itmp->crl);
			count++;
		}
	}
	sk_X509_INFO_pop_free(inf, X509_INFO_free);
	return count;
}

@


1.20
log
@X509_free(3) is NULL-safe, so remove NULL checks before its calls.

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_file.c,v 1.19 2015/04/11 16:03:21 deraadt Exp $ */
d105 1
a105 2
				X509err(X509_F_BY_FILE_CTRL,
				    X509_R_LOADING_DEFAULTS);
d133 1
a133 1
		X509err(X509_F_X509_LOAD_CERT_FILE, ERR_R_SYS_LIB);
d146 1
a146 2
					X509err(X509_F_X509_LOAD_CERT_FILE,
					    ERR_R_PEM_LIB);
d161 1
a161 1
			X509err(X509_F_X509_LOAD_CERT_FILE, ERR_R_ASN1_LIB);
d169 1
a169 1
		X509err(X509_F_X509_LOAD_CERT_FILE, X509_R_BAD_X509_FILETYPE);
d191 1
a191 1
		X509err(X509_F_X509_LOAD_CRL_FILE, ERR_R_SYS_LIB);
d204 1
a204 2
					X509err(X509_F_X509_LOAD_CRL_FILE,
					    ERR_R_PEM_LIB);
d219 1
a219 1
			X509err(X509_F_X509_LOAD_CRL_FILE, ERR_R_ASN1_LIB);
d227 1
a227 1
		X509err(X509_F_X509_LOAD_CRL_FILE, X509_R_BAD_X509_FILETYPE);
d248 1
a248 1
		X509err(X509_F_X509_LOAD_CERT_CRL_FILE, ERR_R_SYS_LIB);
d254 1
a254 1
		X509err(X509_F_X509_LOAD_CERT_CRL_FILE, ERR_R_PEM_LIB);
@


1.19
log
@Remove all getenv() calls, especially those wrapped by issetugid().
getenv()'s wrapped by issetugid() are safe, but issetugid() is correct
difficult to impliment on many operating systems.  By accident, a grand
experiment was run over the last year, where issetugid() returned 1 (the
safe value) on a few operating systems.  Noone noticed & complained that
certain environment variables were not working.......
ok doug beck jsing, discussion with others
@
text
@d1 1
a1 1
/* $OpenBSD: by_file.c,v 1.18 2015/02/05 01:33:22 reyk Exp $ */
d175 1
a175 2
	if (x != NULL)
		X509_free(x);
@


1.18
log
@Declare the x509_(mem|file|dir)_lookup symbols as static because they
shouldn't be used directly.  They aren't part of the API; each module
(file, dir, mem) provides an actual function to export the now-static
object.

OK miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_file.c,v 1.17 2015/01/22 11:16:56 jsing Exp $ */
a96 1
	char *file = NULL;
d101 3
a103 10
			if (issetugid() == 0)
				file = getenv(X509_get_default_cert_file_env());
			if (file)
				ok = (X509_load_cert_crl_file(ctx, file,
				    X509_FILETYPE_PEM) != 0);
			else
				ok = (X509_load_cert_crl_file(ctx,
				    X509_get_default_cert_file(),
				    X509_FILETYPE_PEM) != 0);

@


1.17
log
@Use field names in struct initialisers.

No change to generated assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: by_file.c,v 1.16 2014/07/25 06:05:32 doug Exp $ */
d73 1
a73 1
X509_LOOKUP_METHOD x509_file_lookup = {
@


1.16
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_file.c,v 1.15 2014/07/11 08:44:49 jsing Exp $ */
d74 10
a83 10
	"Load file into cache",
	NULL,		/* new */
	NULL,		/* free */
	NULL, 		/* init */
	NULL,		/* shutdown */
	by_file_ctrl,	/* ctrl */
	NULL,		/* get_by_subject */
	NULL,		/* get_by_issuer_serial */
	NULL,		/* get_by_fingerprint */
	NULL,		/* get_by_alias */
@


1.15
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_file.c,v 1.14 2014/07/10 13:58:23 jsing Exp $ */
d185 1
a185 2
	if (in != NULL)
		BIO_free(in);
d245 1
a245 2
	if (in != NULL)
		BIO_free(in);
@


1.14
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_file.c,v 1.13 2014/06/23 22:19:02 deraadt Exp $ */
d64 3
a66 1
#include "cryptlib.h"
a67 1
#include <openssl/buffer.h>
a68 2
#include <openssl/pem.h>

@


1.13
log
@Since this is a library, place issetugid() before every getenv()
ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: by_file.c,v 1.12 2014/06/12 15:49:31 deraadt Exp $ */
d59 1
d62 1
a62 1
#include <errno.h>
@


1.12
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d97 1
a97 1
	char *file;
d102 2
a103 1
			file = (char *)getenv(X509_get_default_cert_file_env());
@


1.11
log
@Any sane platform has stdio. Stop pretending we will ever use a platform
that does not.
"fire bomb" tedu@@
@
text
@d1 1
a1 1
/* crypto/x509/by_file.c */
@


1.10
log
@More KNF.
@
text
@a68 1
#ifndef OPENSSL_NO_STDIO
a284 1
#endif /* OPENSSL_NO_STDIO */
@


1.9
log
@some KNF cleanup following the script
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d122 1
a122 1
				    argp,(int)argl) != 0);
@


1.8
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d87 2
a88 2
X509_LOOKUP_METHOD
*X509_LOOKUP_file(void)
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d72 3
a74 3
	long argl, char **ret);
X509_LOOKUP_METHOD x509_file_lookup=
	{
d85 1
a85 1
	};
d87 5
a91 4
X509_LOOKUP_METHOD *X509_LOOKUP_file(void)
	{
	return(&x509_file_lookup);
	}
d93 5
a97 4
static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
	     char **ret)
	{
	int ok=0;
d100 1
a100 2
	switch (cmd)
		{
d102 1
a102 2
		if (argl == X509_FILETYPE_DEFAULT)
			{
d105 2
a106 3
				ok = (X509_load_cert_crl_file(ctx,file,
					      X509_FILETYPE_PEM) != 0);

d108 12
a119 13
				ok = (X509_load_cert_crl_file(ctx,X509_get_default_cert_file(),
					      X509_FILETYPE_PEM) != 0);

			if (!ok)
				{
				X509err(X509_F_BY_FILE_CTRL,X509_R_LOADING_DEFAULTS);
				}
			}
		else
			{
			if(argl == X509_FILETYPE_PEM)
				ok = (X509_load_cert_crl_file(ctx,argp,
					X509_FILETYPE_PEM) != 0);
d121 3
a123 2
				ok = (X509_load_cert_file(ctx,argp,(int)argl) != 0);
			}
a124 2
		}
	return(ok);
d126 14
d141 2
a142 13
int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type)
	{
	int ret=0;
	BIO *in=NULL;
	int i,count=0;
	X509 *x=NULL;

	if (file == NULL) return(1);
	in=BIO_new(BIO_s_file_internal());

	if ((in == NULL) || (BIO_read_filename(in,file) <= 0))
		{
		X509err(X509_F_X509_LOAD_CERT_FILE,ERR_R_SYS_LIB);
d144 1
a144 1
		}
d146 4
a149 7
	if (type == X509_FILETYPE_PEM)
		{
		for (;;)
			{
			x=PEM_read_bio_X509_AUX(in,NULL,NULL,NULL);
			if (x == NULL)
				{
d151 1
a151 2
					PEM_R_NO_START_LINE) && (count > 0))
					{
d154 1
a154 3
					}
				else
					{
d156 1
a156 1
						ERR_R_PEM_LIB);
a157 1
					}
d159 4
a162 2
			i=X509_STORE_add_cert(ctx->store_ctx,x);
			if (!i) goto err;
d165 8
a172 3
			x=NULL;
			}
		ret=count;
d174 2
a175 6
	else if (type == X509_FILETYPE_ASN1)
		{
		x=d2i_X509_bio(in,NULL);
		if (x == NULL)
			{
			X509err(X509_F_X509_LOAD_CERT_FILE,ERR_R_ASN1_LIB);
d177 3
a179 8
			}
		i=X509_STORE_add_cert(ctx->store_ctx,x);
		if (!i) goto err;
		ret=i;
		}
	else
		{
		X509err(X509_F_X509_LOAD_CERT_FILE,X509_R_BAD_X509_FILETYPE);
d181 1
a181 1
		}
d183 21
a203 18
	if (x != NULL) X509_free(x);
	if (in != NULL) BIO_free(in);
	return(ret);
	}

int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type)
	{
	int ret=0;
	BIO *in=NULL;
	int i,count=0;
	X509_CRL *x=NULL;

	if (file == NULL) return(1);
	in=BIO_new(BIO_s_file_internal());

	if ((in == NULL) || (BIO_read_filename(in,file) <= 0))
		{
		X509err(X509_F_X509_LOAD_CRL_FILE,ERR_R_SYS_LIB);
d205 1
a205 1
		}
d207 4
a210 7
	if (type == X509_FILETYPE_PEM)
		{
		for (;;)
			{
			x=PEM_read_bio_X509_CRL(in,NULL,NULL,NULL);
			if (x == NULL)
				{
d212 1
a212 2
					PEM_R_NO_START_LINE) && (count > 0))
					{
d215 1
a215 3
					}
				else
					{
d217 1
a217 1
						ERR_R_PEM_LIB);
a218 1
					}
d220 4
a223 2
			i=X509_STORE_add_crl(ctx->store_ctx,x);
			if (!i) goto err;
d226 8
a233 3
			x=NULL;
			}
		ret=count;
d235 2
a236 6
	else if (type == X509_FILETYPE_ASN1)
		{
		x=d2i_X509_CRL_bio(in,NULL);
		if (x == NULL)
			{
			X509err(X509_F_X509_LOAD_CRL_FILE,ERR_R_ASN1_LIB);
d238 3
a240 8
			}
		i=X509_STORE_add_crl(ctx->store_ctx,x);
		if (!i) goto err;
		ret=i;
		}
	else
		{
		X509err(X509_F_X509_LOAD_CRL_FILE,X509_R_BAD_X509_FILETYPE);
d242 1
a242 1
		}
d244 6
a249 4
	if (x != NULL) X509_CRL_free(x);
	if (in != NULL) BIO_free(in);
	return(ret);
	}
d251 2
a252 1
int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type)
d258 1
a258 1
	if(type != X509_FILETYPE_PEM)
d261 2
a262 2
	if(!in) {
		X509err(X509_F_X509_LOAD_CERT_CRL_FILE,ERR_R_SYS_LIB);
d267 2
a268 2
	if(!inf) {
		X509err(X509_F_X509_LOAD_CERT_CRL_FILE,ERR_R_PEM_LIB);
d271 1
a271 1
	for(i = 0; i < sk_X509_INFO_num(inf); i++) {
d273 1
a273 1
		if(itmp->x509) {
d277 1
a277 1
		if(itmp->crl) {
a285 1

a286 1

@


1.6
log
@resolve conflicts
@
text
@d103 1
a103 1
			file = (char *)Getenv(X509_get_default_cert_file_env());
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d153 1
a153 1
				if ((ERR_GET_REASON(ERR_peek_error()) ==
d220 1
a220 1
				if ((ERR_GET_REASON(ERR_peek_error()) ==
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d103 9
a111 2
			ok = (X509_load_cert_crl_file(ctx,X509_get_default_cert_file(),
				X509_FILETYPE_PEM) != 0);
a115 6
			else
				{
				file=(char *)Getenv(X509_get_default_cert_file_env());
				ok = (X509_load_cert_crl_file(ctx,file,
					X509_FILETYPE_PEM) != 0);
				}
d288 2
a289 1
		} else if(itmp->crl) {
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d69 1
a69 1
#ifndef NO_STDIO
d297 1
a297 1
#endif /* NO_STDIO */
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a61 2
#include <sys/types.h>
#include <sys/stat.h>
d95 1
a95 1
	int ok=0,ok2=0;
d103 3
a105 5
			ok=X509_load_cert_file(ctx,X509_get_default_cert_file(),
				X509_FILETYPE_PEM);
			ok2=X509_load_crl_file(ctx,X509_get_default_cert_file(),
				X509_FILETYPE_PEM);
			if (!ok || !ok2)
d112 2
a113 4
				ok=X509_load_cert_file(ctx,file,
					X509_FILETYPE_PEM);
				ok2=X509_load_crl_file(ctx,file,
					X509_FILETYPE_PEM);
d118 5
a122 2
			ok=X509_load_cert_file(ctx,argp,(int)argl);
			ok2=X509_load_crl_file(ctx,argp,(int)argl);
d126 1
a126 1
	return((ok && ok2)?ok:0);
d149 1
a149 1
			x=PEM_read_bio_X509(in,NULL,NULL,NULL);
d262 34
@


1.1
log
@Initial revision
@
text
@d66 4
a69 4
#include "lhash.h"
#include "buffer.h"
#include "x509.h"
#include "pem.h"
d73 2
a74 7
#ifndef NOPROTO
static int by_file_ctrl(X509_LOOKUP *ctx,int cmd,char *argc,
	long argl,char **ret);
#else
static int by_file_ctrl();
#endif

d89 1
a89 1
X509_LOOKUP_METHOD *X509_LOOKUP_file()
d94 2
a95 6
static int by_file_ctrl(ctx,cmd,argp,argl,ret)
X509_LOOKUP *ctx;
int cmd;
char *argp;
long argl;
char **ret;
d132 1
a132 4
int X509_load_cert_file(ctx,file,type)
X509_LOOKUP *ctx;
char *file;
int type;
d152 1
a152 1
			x=PEM_read_bio_X509(in,NULL,NULL);
d199 1
a199 4
int X509_load_crl_file(ctx,file,type)
X509_LOOKUP *ctx;
char *file;
int type;
d219 1
a219 1
			x=PEM_read_bio_X509_CRL(in,NULL,NULL);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 2
d66 13
a78 4
#include <openssl/lhash.h>
#include <openssl/buffer.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
a79 4
#ifndef OPENSSL_NO_STDIO

static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
	long argl, char **ret);
d94 1
a94 1
X509_LOOKUP_METHOD *X509_LOOKUP_file(void)
d99 6
a104 2
static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
	     char **ret)
d106 1
a106 1
	int ok=0;
d114 5
a118 3
			ok = (X509_load_cert_crl_file(ctx,X509_get_default_cert_file(),
				X509_FILETYPE_PEM) != 0);
			if (!ok)
d125 4
a128 2
				ok = (X509_load_cert_crl_file(ctx,file,
					X509_FILETYPE_PEM) != 0);
d133 2
a134 5
			if(argl == X509_FILETYPE_PEM)
				ok = (X509_load_cert_crl_file(ctx,argp,
					X509_FILETYPE_PEM) != 0);
			else
				ok = (X509_load_cert_file(ctx,argp,(int)argl) != 0);
d138 1
a138 1
	return(ok);
d141 4
a144 1
int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type)
d164 1
a164 1
			x=PEM_read_bio_X509_AUX(in,NULL,NULL,NULL);
d211 4
a214 1
int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type)
d234 1
a234 1
			x=PEM_read_bio_X509_CRL(in,NULL,NULL,NULL);
d281 1
a281 35
int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type)
{
	STACK_OF(X509_INFO) *inf;
	X509_INFO *itmp;
	BIO *in;
	int i, count = 0;
	if(type != X509_FILETYPE_PEM)
		return X509_load_cert_file(ctx, file, type);
	in = BIO_new_file(file, "r");
	if(!in) {
		X509err(X509_F_X509_LOAD_CERT_CRL_FILE,ERR_R_SYS_LIB);
		return 0;
	}
	inf = PEM_X509_INFO_read_bio(in, NULL, NULL, NULL);
	BIO_free(in);
	if(!inf) {
		X509err(X509_F_X509_LOAD_CERT_CRL_FILE,ERR_R_PEM_LIB);
		return 0;
	}
	for(i = 0; i < sk_X509_INFO_num(inf); i++) {
		itmp = sk_X509_INFO_value(inf, i);
		if(itmp->x509) {
			X509_STORE_add_cert(ctx->store_ctx, itmp->x509);
			count++;
		} else if(itmp->crl) {
			X509_STORE_add_crl(ctx->store_ctx, itmp->crl);
			count++;
		}
	}
	sk_X509_INFO_pop_free(inf, X509_INFO_free);
	return count;
}


#endif /* OPENSSL_NO_STDIO */
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d103 2
a104 9
			file = (char *)Getenv(X509_get_default_cert_file_env());
			if (file)
				ok = (X509_load_cert_crl_file(ctx,file,
					      X509_FILETYPE_PEM) != 0);

			else
				ok = (X509_load_cert_crl_file(ctx,X509_get_default_cert_file(),
					      X509_FILETYPE_PEM) != 0);

d109 6
d287 1
a287 2
		}
		if(itmp->crl) {
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d153 1
a153 1
				if ((ERR_GET_REASON(ERR_peek_last_error()) ==
d220 1
a220 1
				if ((ERR_GET_REASON(ERR_peek_last_error()) ==
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d103 1
a103 1
			file = (char *)getenv(X509_get_default_cert_file_env());
@


