head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.2
	OPENBSD_6_1_BASE:1.20;
locks; strict;
comment	@ * @;


1.20
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.19;
commitid	kT0fLt3r4lroFJra;

1.19
date	2016.12.30.15.24.51;	author jsing;	state Exp;
branches;
next	1.18;
commitid	BKYrGMs46QtAXfoJ;

1.18
date	2015.09.30.17.30.16;	author jsing;	state Exp;
branches;
next	1.17;
commitid	f3YLBhwPPENmVqqA;

1.17
date	2015.03.15.22.52.17;	author doug;	state Exp;
branches;
next	1.16;
commitid	xBnohLr4CjGLQKG8;

1.16
date	2014.09.28.10.50.33;	author miod;	state Exp;
branches
	1.16.4.1;
next	1.15;
commitid	yr5hdWBT9OofgSDD;

1.15
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches
	1.15.4.1;
next	1.14;
commitid	yQEL1wOWIearrW15;

1.14
date	2014.07.10.22.45.58;	author jsing;	state Exp;
branches;
next	1.13;
commitid	nzndm3zqPmFurSaK;

1.13
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	2nvnQBrv22dLtvTt;

1.11
date	2014.04.20.15.36.20;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.13;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.11;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.51;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.00;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.18;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;

1.15.4.1
date	2015.03.19.14.02.22;	author tedu;	state Exp;
branches;
next	;
commitid	bYTbbXa7PWk8y7To;

1.16.4.1
date	2015.03.19.14.01.16;	author tedu;	state Exp;
branches;
next	;
commitid	dQgHc1qjfDF6g1rY;


desc
@@


1.20
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: x509_req.c,v 1.19 2016/12/30 15:24:51 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/bn.h>
#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

X509_REQ *
X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
{
	X509_REQ *ret;
	X509_REQ_INFO *ri;
	int i;
	EVP_PKEY *pktmp;

	ret = X509_REQ_new();
	if (ret == NULL) {
		X509error(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	ri = ret->req_info;

	if ((ri->version = ASN1_INTEGER_new()) == NULL)
		goto err;
	if (ASN1_INTEGER_set(ri->version, 0) == 0)
		goto err;

	if (!X509_REQ_set_subject_name(ret, X509_get_subject_name(x)))
		goto err;

	if ((pktmp = X509_get_pubkey(x)) == NULL)
		goto err;

	i = X509_REQ_set_pubkey(ret, pktmp);
	EVP_PKEY_free(pktmp);
	if (!i)
		goto err;

	if (pkey != NULL) {
		if (!X509_REQ_sign(ret, pkey, md))
			goto err;
	}
	return (ret);

err:
	X509_REQ_free(ret);
	return (NULL);
}

EVP_PKEY *
X509_REQ_get_pubkey(X509_REQ *req)
{
	if ((req == NULL) || (req->req_info == NULL))
		return (NULL);
	return (X509_PUBKEY_get(req->req_info->pubkey));
}

int
X509_REQ_check_private_key(X509_REQ *x, EVP_PKEY *k)
{
	EVP_PKEY *xk = NULL;
	int ok = 0;

	xk = X509_REQ_get_pubkey(x);
	switch (EVP_PKEY_cmp(xk, k)) {
	case 1:
		ok = 1;
		break;
	case 0:
		X509error(X509_R_KEY_VALUES_MISMATCH);
		break;
	case -1:
		X509error(X509_R_KEY_TYPE_MISMATCH);
		break;
	case -2:
#ifndef OPENSSL_NO_EC
		if (k->type == EVP_PKEY_EC) {
			X509error(ERR_R_EC_LIB);
			break;
		}
#endif
#ifndef OPENSSL_NO_DH
		if (k->type == EVP_PKEY_DH) {
			/* No idea */
			X509error(X509_R_CANT_CHECK_DH_KEY);
			break;
		}
#endif
		X509error(X509_R_UNKNOWN_KEY_TYPE);
	}

	EVP_PKEY_free(xk);
	return (ok);
}

/* It seems several organisations had the same idea of including a list of
 * extensions in a certificate request. There are at least two OIDs that are
 * used and there may be more: so the list is configurable.
 */

static int ext_nid_list[] = {NID_ext_req, NID_ms_ext_req, NID_undef};

static int *ext_nids = ext_nid_list;

int
X509_REQ_extension_nid(int req_nid)
{
	int i, nid;

	for (i = 0; ; i++) {
		nid = ext_nids[i];
		if (nid == NID_undef)
			return 0;
		else if (req_nid == nid)
			return 1;
	}
}

int *
X509_REQ_get_extension_nids(void)
{
	return ext_nids;
}

void
X509_REQ_set_extension_nids(int *nids)
{
	ext_nids = nids;
}

STACK_OF(X509_EXTENSION) *
X509_REQ_get_extensions(X509_REQ *req)
{
	X509_ATTRIBUTE *attr;
	ASN1_TYPE *ext = NULL;
	int idx, *pnid;
	const unsigned char *p;

	if ((req == NULL) || (req->req_info == NULL) || !ext_nids)
		return (NULL);
	for (pnid = ext_nids; *pnid != NID_undef; pnid++) {
		idx = X509_REQ_get_attr_by_NID(req, *pnid, -1);
		if (idx == -1)
			continue;
		attr = X509_REQ_get_attr(req, idx);
		if (attr->single)
			ext = attr->value.single;
		else if (sk_ASN1_TYPE_num(attr->value.set))
			ext = sk_ASN1_TYPE_value(attr->value.set, 0);
		break;
	}
	if (!ext || (ext->type != V_ASN1_SEQUENCE))
		return NULL;
	p = ext->value.sequence->data;
	return (STACK_OF(X509_EXTENSION) *)ASN1_item_d2i(NULL, &p,
	    ext->value.sequence->length, &X509_EXTENSIONS_it);
}

/* Add a STACK_OF extensions to a certificate request: allow alternative OIDs
 * in case we want to create a non standard one.
 */

int
X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts,
    int nid)
{
	ASN1_TYPE *at = NULL;
	X509_ATTRIBUTE *attr = NULL;

	if (!(at = ASN1_TYPE_new()) ||
	    !(at->value.sequence = ASN1_STRING_new()))
		goto err;

	at->type = V_ASN1_SEQUENCE;
	/* Generate encoding of extensions */
	at->value.sequence->length = ASN1_item_i2d((ASN1_VALUE *)exts,
	    &at->value.sequence->data, &X509_EXTENSIONS_it);
	if (!(attr = X509_ATTRIBUTE_new()))
		goto err;
	if (!(attr->value.set = sk_ASN1_TYPE_new_null()))
		goto err;
	if (!sk_ASN1_TYPE_push(attr->value.set, at))
		goto err;
	at = NULL;
	attr->single = 0;
	attr->object = OBJ_nid2obj(nid);
	if (!req->req_info->attributes) {
		if (!(req->req_info->attributes = sk_X509_ATTRIBUTE_new_null()))
			goto err;
	}
	if (!sk_X509_ATTRIBUTE_push(req->req_info->attributes, attr))
		goto err;
	return 1;

err:
	X509_ATTRIBUTE_free(attr);
	ASN1_TYPE_free(at);
	return 0;
}

/* This is the normal usage: use the "official" OID */
int
X509_REQ_add_extensions(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts)
{
	return X509_REQ_add_extensions_nid(req, exts, NID_ext_req);
}

/* Request attribute functions */

int
X509_REQ_get_attr_count(const X509_REQ *req)
{
	return X509at_get_attr_count(req->req_info->attributes);
}

int
X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos)
{
	return X509at_get_attr_by_NID(req->req_info->attributes, nid, lastpos);
}

int
X509_REQ_get_attr_by_OBJ(const X509_REQ *req, ASN1_OBJECT *obj, int lastpos)
{
	return X509at_get_attr_by_OBJ(req->req_info->attributes, obj, lastpos);
}

X509_ATTRIBUTE *
X509_REQ_get_attr(const X509_REQ *req, int loc)
{
	return X509at_get_attr(req->req_info->attributes, loc);
}

X509_ATTRIBUTE *
X509_REQ_delete_attr(X509_REQ *req, int loc)
{
	return X509at_delete_attr(req->req_info->attributes, loc);
}

int
X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr)
{
	if (X509at_add1_attr(&req->req_info->attributes, attr))
		return 1;
	return 0;
}

int
X509_REQ_add1_attr_by_OBJ(X509_REQ *req, const ASN1_OBJECT *obj, int type,
    const unsigned char *bytes, int len)
{
	if (X509at_add1_attr_by_OBJ(&req->req_info->attributes, obj,
	    type, bytes, len))
		return 1;
	return 0;
}

int
X509_REQ_add1_attr_by_NID(X509_REQ *req, int nid, int type,
    const unsigned char *bytes, int len)
{
	if (X509at_add1_attr_by_NID(&req->req_info->attributes, nid,
	    type, bytes, len))
		return 1;
	return 0;
}

int
X509_REQ_add1_attr_by_txt(X509_REQ *req, const char *attrname, int type,
    const unsigned char *bytes, int len)
{
	if (X509at_add1_attr_by_txt(&req->req_info->attributes, attrname,
	    type, bytes, len))
		return 1;
	return 0;
}
@


1.19
log
@Expand ASN1_ITEM_rptr macros - no change in generated assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: x509_req.c,v 1.18 2015/09/30 17:30:16 jsing Exp $ */
d83 1
a83 1
		X509err(X509_F_X509_TO_X509_REQ, ERR_R_MALLOC_FAILURE);
d136 1
a136 2
		X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,
		    X509_R_KEY_VALUES_MISMATCH);
d139 1
a139 2
		X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,
		    X509_R_KEY_TYPE_MISMATCH);
d144 1
a144 2
			X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,
			    ERR_R_EC_LIB);
d151 1
a151 2
			X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,
			    X509_R_CANT_CHECK_DH_KEY);
d155 1
a155 2
		X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,
		    X509_R_UNKNOWN_KEY_TYPE);
@


1.18
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_req.c,v 1.17 2015/03/15 22:52:17 doug Exp $ */
d227 1
a227 1
	    ext->value.sequence->length, ASN1_ITEM_rptr(X509_EXTENSIONS));
d248 1
a248 1
	    &at->value.sequence->data, ASN1_ITEM_rptr(X509_EXTENSIONS));
@


1.17
log
@Avoid a NULL pointer deref when X509_get_pubkey() returns NULL.

A NULL pointer could be dereferenced when X509_REQ_set_pubkey() calls
X509_PUBKEY_set() with pktmp.

OpenSSL says it's the fix for CVE-2015-0288, but there aren't any public
details yet to confirm.  Either way, we should fix this.

Based on OpenSSL commit 28a00bcd8e318da18031b2ac8778c64147cd54f9
and BoringSSL commit 9d102ddbc0f6ed835ed12272a3d8a627d6a8e728.

"looks sane" beck@@
ok miod@@, bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_req.c,v 1.16 2014/09/28 10:50:33 miod Exp $ */
d89 1
a89 1
	if ((ri->version = M_ASN1_INTEGER_new()) == NULL)
@


1.16
log
@Someone (TM) thought it was smart to save memory by using malloc(1) and
manual field fiddling to create an ASN1_INTEGER object, instead of using
M_ASN1_INTEGER_new() which will allocate sizeof(long) bytes.
That person had probably never looked into malloc(3) and never heard of
allocation size rounding.

Thus, replace the obfuscated code with M_ASN1_INTEGER_new() followed by
ASN1_INTEGER_set(), to achieve a similar result, without the need for
/* version == 0 */ comments.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_req.c,v 1.15 2014/07/11 08:44:49 jsing Exp $ */
d97 3
a99 1
	pktmp = X509_get_pubkey(x);
@


1.16.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: x509_req.c,v 1.16 2014/09/28 10:50:33 miod Exp $ */
d97 1
a97 3
	if ((pktmp = X509_get_pubkey(x)) == NULL)
		goto err;

@


1.15
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509_req.c,v 1.14 2014/07/10 22:45:58 jsing Exp $ */
d89 3
a91 3
	ri->version->length = 1;
	ri->version->data = malloc(1);
	if (ri->version->data == NULL)
a92 1
	ri->version->data[0] = 0; /* version == 0 */
@


1.15.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: x509_req.c,v 1.15 2014/07/11 08:44:49 jsing Exp $ */
d98 1
a98 3
	if ((pktmp = X509_get_pubkey(x)) == NULL)
		goto err;

@


1.14
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: x509_req.c,v 1.13 2014/06/12 15:49:31 deraadt Exp $ */
d63 2
a64 1
#include "cryptlib.h"
d66 2
a68 3
#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/x509.h>
a69 1
#include <openssl/buffer.h>
d71 1
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.12
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/x509/x509_req.c */
@


1.11
log
@KNF.
@
text
@d87 1
a87 1
	ri->version->data = (unsigned char *)malloc(1);
@


1.10
log
@blunt force knf
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d70 2
a71 1
X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
d78 1
a78 1
	ret=X509_REQ_new();
d80 1
a80 1
		X509err(X509_F_X509_TO_X509_REQ,ERR_R_MALLOC_FAILURE);
d84 1
a84 1
	ri=ret->req_info;
d86 5
a90 4
	ri->version->length=1;
	ri->version->data=(unsigned char *)malloc(1);
	if (ri->version->data == NULL) goto err;
	ri->version->data[0]=0; /* version == 0 */
d92 1
a92 1
	if (!X509_REQ_set_subject_name(ret,X509_get_subject_name(x)))
d96 1
a96 1
	i=X509_REQ_set_pubkey(ret,pktmp);
d98 2
a99 1
	if (!i) goto err;
d102 1
a102 1
		if (!X509_REQ_sign(ret,pkey,md))
d105 2
a106 1
	return(ret);
d109 1
a109 1
	return(NULL);
d112 2
a113 1
EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req)
d116 2
a117 2
		return(NULL);
	return(X509_PUBKEY_get(req->req_info->pubkey));
d120 2
a121 1
int X509_REQ_check_private_key(X509_REQ *x, EVP_PKEY *k)
d123 2
a124 2
	EVP_PKEY *xk=NULL;
	int ok=0;
d126 1
a126 1
	xk=X509_REQ_get_pubkey(x);
d129 1
a129 1
		ok=1;
d132 2
a133 1
		X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
d136 2
a137 1
		X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,X509_R_KEY_TYPE_MISMATCH);
d142 2
a143 1
			X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, ERR_R_EC_LIB);
d150 2
a151 1
			X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,X509_R_CANT_CHECK_DH_KEY);
d155 2
a156 1
	        X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,X509_R_UNKNOWN_KEY_TYPE);
d160 1
a160 1
	return(ok);
d168 1
a168 1
static int ext_nid_list[] = { NID_ext_req, NID_ms_ext_req, NID_undef};
d172 2
a173 1
int X509_REQ_extension_nid(int req_nid)
d176 2
a177 1
	for(i = 0; ; i++) {
d179 4
a182 2
		if(nid == NID_undef) return 0;
		else if (req_nid == nid) return 1;
d186 2
a187 1
int *X509_REQ_get_extension_nids(void)
d191 3
a193 2
	
void X509_REQ_set_extension_nids(int *nids)
d198 2
a199 1
STACK_OF(X509_EXTENSION) *X509_REQ_get_extensions(X509_REQ *req)
d207 1
a207 1
		return(NULL);
d213 3
a215 2
		if(attr->single) ext = attr->value.single;
		else if(sk_ASN1_TYPE_num(attr->value.set))
d219 1
a219 1
	if(!ext || (ext->type != V_ASN1_SEQUENCE))
d222 2
a223 3
	return (STACK_OF(X509_EXTENSION) *)
		ASN1_item_d2i(NULL, &p, ext->value.sequence->length,
				ASN1_ITEM_rptr(X509_EXTENSIONS));
d230 3
a232 2
int X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts,
				int nid)
d236 4
a239 2
	if(!(at = ASN1_TYPE_new()) ||
		!(at->value.sequence = ASN1_STRING_new())) goto err;
d243 8
a250 7
	at->value.sequence->length = 
			ASN1_item_i2d((ASN1_VALUE *)exts,
				&at->value.sequence->data,
				ASN1_ITEM_rptr(X509_EXTENSIONS));
	if(!(attr = X509_ATTRIBUTE_new())) goto err;
	if(!(attr->value.set = sk_ASN1_TYPE_new_null())) goto err;
	if(!sk_ASN1_TYPE_push(attr->value.set, at)) goto err;
d258 2
a259 1
	if(!sk_X509_ATTRIBUTE_push(req->req_info->attributes, attr)) goto err;
d261 2
a262 1
	err:
d267 1
d269 2
a270 1
int X509_REQ_add_extensions(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts)
d277 2
a278 1
int X509_REQ_get_attr_count(const X509_REQ *req)
d283 2
a284 2
int X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid,
			  int lastpos)
d289 2
a290 2
int X509_REQ_get_attr_by_OBJ(const X509_REQ *req, ASN1_OBJECT *obj,
			  int lastpos)
d295 2
a296 1
X509_ATTRIBUTE *X509_REQ_get_attr(const X509_REQ *req, int loc)
d301 2
a302 1
X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc)
d307 2
a308 1
int X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr)
d310 2
a311 1
	if(X509at_add1_attr(&req->req_info->attributes, attr)) return 1;
d315 7
a321 6
int X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
			const ASN1_OBJECT *obj, int type,
			const unsigned char *bytes, int len)
{
	if(X509at_add1_attr_by_OBJ(&req->req_info->attributes, obj,
				type, bytes, len)) return 1;
d325 7
a331 6
int X509_REQ_add1_attr_by_NID(X509_REQ *req,
			int nid, int type,
			const unsigned char *bytes, int len)
{
	if(X509at_add1_attr_by_NID(&req->req_info->attributes, nid,
				type, bytes, len)) return 1;
d335 7
a341 6
int X509_REQ_add1_attr_by_txt(X509_REQ *req,
			const char *attrname, int type,
			const unsigned char *bytes, int len)
{
	if(X509at_add1_attr_by_txt(&req->req_info->attributes, attrname,
				type, bytes, len)) return 1;
@


1.9
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d71 1
a71 1
	{
d78 1
a78 2
	if (ret == NULL)
		{
d81 1
a81 1
		}
d98 1
a98 2
	if (pkey != NULL)
		{
d101 1
a101 1
		}
d106 1
a106 1
	}
d109 1
a109 1
	{
d113 1
a113 1
	}
d116 1
a116 1
	{
d121 1
a121 2
	switch (EVP_PKEY_cmp(xk, k))
		{
d133 1
a133 2
		if (k->type == EVP_PKEY_EC)
			{
d136 1
a136 1
			}
d139 1
a139 2
		if (k->type == EVP_PKEY_DH)
			{
d143 1
a143 1
			}
d146 1
a146 1
		}
d150 1
a150 1
	}
d182 1
a182 1
	{
d190 1
a190 2
	for (pnid = ext_nids; *pnid != NID_undef; pnid++)
		{
d199 1
a199 1
		}
d232 1
a232 2
	if (!req->req_info->attributes)
		{
d235 1
a235 1
		}
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d87 1
a87 1
	ri->version->data=(unsigned char *)OPENSSL_malloc(1);
@


1.7
log
@resolve conflicts
@
text
@d64 1
d209 3
a211 4
	return d2i_ASN1_SET_OF_X509_EXTENSION(NULL, &p,
			ext->value.sequence->length,
			d2i_X509_EXTENSION, X509_EXTENSION_free,
			V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
a220 2
	unsigned char *p = NULL, *q;
	long len;
d228 4
a231 9
	len = i2d_ASN1_SET_OF_X509_EXTENSION(exts, NULL, i2d_X509_EXTENSION,
			V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL, IS_SEQUENCE);
	if(!(p = OPENSSL_malloc(len))) goto err;
	q = p;
	i2d_ASN1_SET_OF_X509_EXTENSION(exts, &q, i2d_X509_EXTENSION,
			V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL, IS_SEQUENCE);
	at->value.sequence->data = p;
	p = NULL;
	at->value.sequence->length = len;
a245 1
	if(p) OPENSSL_free(p);
@


1.6
log
@resolve conflicts
@
text
@d116 40
d190 1
a190 1
	unsigned char *p;
d212 1
a212 1
	}
d245 5
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d121 1
a121 1
static int ext_nid_list[] = { NID_ms_ext_req, NID_ext_req, NID_undef};
d146 1
a146 1
{
a147 1
	STACK_OF(X509_ATTRIBUTE) *sk;
d149 1
a149 1
	int i;
d151 2
a152 1
	if ((req == NULL) || (req->req_info == NULL))
d154 10
a163 9
	sk=req->req_info->attributes;
        if (!sk) return NULL;
	for(i = 0; i < sk_X509_ATTRIBUTE_num(sk); i++) {
		attr = sk_X509_ATTRIBUTE_value(sk, i);
		if(X509_REQ_extension_nid(OBJ_obj2nid(attr->object))) {
			if(attr->single) ext = attr->value.single;
			else if(sk_ASN1_TYPE_num(attr->value.set))
				ext = sk_ASN1_TYPE_value(attr->value.set, 0);
			break;
d165 2
a166 2
	}
	if(!ext || (ext->type != V_ASN1_SEQUENCE)) return NULL;
d172 1
a172 1
}
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d159 2
a160 1
			if(attr->set && sk_ASN1_TYPE_num(attr->value.set))
a161 1
			else ext = attr->value.single;
d202 1
a202 1
	attr->set = 1;
d254 2
a255 2
			ASN1_OBJECT *obj, int type,
			unsigned char *bytes, int len)
d264 1
a264 1
			unsigned char *bytes, int len)
d272 2
a273 2
			char *attrname, int type,
			unsigned char *bytes, int len)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d86 1
a86 1
	ri->version->data=(unsigned char *)Malloc(1);
d191 1
a191 1
	if(!(p = Malloc(len))) goto err;
d207 1
a207 1
	if(p) Free(p);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d69 1
a69 1
X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, EVP_MD *md)
d116 163
@


1.1
log
@Initial revision
@
text
@d61 9
a69 12
#include "bn.h"
#include "evp.h"
#include "asn1.h"
#include "x509.h"
#include "objects.h"
#include "buffer.h"
#include "pem.h"

X509_REQ *X509_to_X509_REQ(x,pkey,md)
X509 *x;
EVP_PKEY *pkey;
EVP_MD *md;
d74 1
d93 3
a95 1
	i=X509_REQ_set_pubkey(ret,X509_get_pubkey(x));
d109 1
a109 2
EVP_PKEY *X509_REQ_get_pubkey(req)
X509_REQ *req;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 12
a72 9
#include <openssl/bn.h>
#include <openssl/evp.h>
#include <openssl/asn1.h>
#include <openssl/x509.h>
#include <openssl/objects.h>
#include <openssl/buffer.h>
#include <openssl/pem.h>

X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
a76 1
	EVP_PKEY *pktmp;
d88 1
a88 1
	ri->version->data=(unsigned char *)OPENSSL_malloc(1);
d95 1
a95 3
	pktmp = X509_get_pubkey(x);
	i=X509_REQ_set_pubkey(ret,pktmp);
	EVP_PKEY_free(pktmp);
d109 2
a110 1
EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req)
a116 163
/* It seems several organisations had the same idea of including a list of
 * extensions in a certificate request. There are at least two OIDs that are
 * used and there may be more: so the list is configurable.
 */

static int ext_nid_list[] = { NID_ms_ext_req, NID_ext_req, NID_undef};

static int *ext_nids = ext_nid_list;

int X509_REQ_extension_nid(int req_nid)
{
	int i, nid;
	for(i = 0; ; i++) {
		nid = ext_nids[i];
		if(nid == NID_undef) return 0;
		else if (req_nid == nid) return 1;
	}
}

int *X509_REQ_get_extension_nids(void)
{
	return ext_nids;
}
	
void X509_REQ_set_extension_nids(int *nids)
{
	ext_nids = nids;
}

STACK_OF(X509_EXTENSION) *X509_REQ_get_extensions(X509_REQ *req)
{
	X509_ATTRIBUTE *attr;
	STACK_OF(X509_ATTRIBUTE) *sk;
	ASN1_TYPE *ext = NULL;
	int i;
	unsigned char *p;
	if ((req == NULL) || (req->req_info == NULL))
		return(NULL);
	sk=req->req_info->attributes;
        if (!sk) return NULL;
	for(i = 0; i < sk_X509_ATTRIBUTE_num(sk); i++) {
		attr = sk_X509_ATTRIBUTE_value(sk, i);
		if(X509_REQ_extension_nid(OBJ_obj2nid(attr->object))) {
			if(attr->single) ext = attr->value.single;
			else if(sk_ASN1_TYPE_num(attr->value.set))
				ext = sk_ASN1_TYPE_value(attr->value.set, 0);
			break;
		}
	}
	if(!ext || (ext->type != V_ASN1_SEQUENCE)) return NULL;
	p = ext->value.sequence->data;
	return d2i_ASN1_SET_OF_X509_EXTENSION(NULL, &p,
			ext->value.sequence->length,
			d2i_X509_EXTENSION, X509_EXTENSION_free,
			V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
}

/* Add a STACK_OF extensions to a certificate request: allow alternative OIDs
 * in case we want to create a non standard one.
 */

int X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts,
				int nid)
{
	unsigned char *p = NULL, *q;
	long len;
	ASN1_TYPE *at = NULL;
	X509_ATTRIBUTE *attr = NULL;
	if(!(at = ASN1_TYPE_new()) ||
		!(at->value.sequence = ASN1_STRING_new())) goto err;

	at->type = V_ASN1_SEQUENCE;
	/* Generate encoding of extensions */
	len = i2d_ASN1_SET_OF_X509_EXTENSION(exts, NULL, i2d_X509_EXTENSION,
			V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL, IS_SEQUENCE);
	if(!(p = OPENSSL_malloc(len))) goto err;
	q = p;
	i2d_ASN1_SET_OF_X509_EXTENSION(exts, &q, i2d_X509_EXTENSION,
			V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL, IS_SEQUENCE);
	at->value.sequence->data = p;
	p = NULL;
	at->value.sequence->length = len;
	if(!(attr = X509_ATTRIBUTE_new())) goto err;
	if(!(attr->value.set = sk_ASN1_TYPE_new_null())) goto err;
	if(!sk_ASN1_TYPE_push(attr->value.set, at)) goto err;
	at = NULL;
	attr->single = 0;
	attr->object = OBJ_nid2obj(nid);
	if(!sk_X509_ATTRIBUTE_push(req->req_info->attributes, attr)) goto err;
	return 1;
	err:
	if(p) OPENSSL_free(p);
	X509_ATTRIBUTE_free(attr);
	ASN1_TYPE_free(at);
	return 0;
}
/* This is the normal usage: use the "official" OID */
int X509_REQ_add_extensions(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts)
{
	return X509_REQ_add_extensions_nid(req, exts, NID_ext_req);
}

/* Request attribute functions */

int X509_REQ_get_attr_count(const X509_REQ *req)
{
	return X509at_get_attr_count(req->req_info->attributes);
}

int X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid,
			  int lastpos)
{
	return X509at_get_attr_by_NID(req->req_info->attributes, nid, lastpos);
}

int X509_REQ_get_attr_by_OBJ(const X509_REQ *req, ASN1_OBJECT *obj,
			  int lastpos)
{
	return X509at_get_attr_by_OBJ(req->req_info->attributes, obj, lastpos);
}

X509_ATTRIBUTE *X509_REQ_get_attr(const X509_REQ *req, int loc)
{
	return X509at_get_attr(req->req_info->attributes, loc);
}

X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc)
{
	return X509at_delete_attr(req->req_info->attributes, loc);
}

int X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr)
{
	if(X509at_add1_attr(&req->req_info->attributes, attr)) return 1;
	return 0;
}

int X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
			const ASN1_OBJECT *obj, int type,
			const unsigned char *bytes, int len)
{
	if(X509at_add1_attr_by_OBJ(&req->req_info->attributes, obj,
				type, bytes, len)) return 1;
	return 0;
}

int X509_REQ_add1_attr_by_NID(X509_REQ *req,
			int nid, int type,
			const unsigned char *bytes, int len)
{
	if(X509at_add1_attr_by_NID(&req->req_info->attributes, nid,
				type, bytes, len)) return 1;
	return 0;
}

int X509_REQ_add1_attr_by_txt(X509_REQ *req,
			const char *attrname, int type,
			const unsigned char *bytes, int len)
{
	if(X509at_add1_attr_by_txt(&req->req_info->attributes, attrname,
				type, bytes, len)) return 1;
	return 0;
}
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d121 1
a121 1
static int ext_nid_list[] = { NID_ext_req, NID_ms_ext_req, NID_undef};
d146 1
a146 1
	{
d148 1
d150 1
a150 1
	int idx, *pnid;
d152 1
a152 2

	if ((req == NULL) || (req->req_info == NULL) || !ext_nids)
d154 9
a162 10
	for (pnid = ext_nids; *pnid != NID_undef; pnid++)
		{
		idx = X509_REQ_get_attr_by_NID(req, *pnid, -1);
		if (idx == -1)
			continue;
		attr = X509_REQ_get_attr(req, idx);
		if(attr->single) ext = attr->value.single;
		else if(sk_ASN1_TYPE_num(attr->value.set))
			ext = sk_ASN1_TYPE_value(attr->value.set, 0);
		break;
d164 2
a165 2
	if(!ext || (ext->type != V_ASN1_SEQUENCE))
		return NULL;
d171 1
a171 1
	}
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a115 40
int X509_REQ_check_private_key(X509_REQ *x, EVP_PKEY *k)
	{
	EVP_PKEY *xk=NULL;
	int ok=0;

	xk=X509_REQ_get_pubkey(x);
	switch (EVP_PKEY_cmp(xk, k))
		{
	case 1:
		ok=1;
		break;
	case 0:
		X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
		break;
	case -1:
		X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,X509_R_KEY_TYPE_MISMATCH);
		break;
	case -2:
#ifndef OPENSSL_NO_EC
		if (k->type == EVP_PKEY_EC)
			{
			X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, ERR_R_EC_LIB);
			break;
			}
#endif
#ifndef OPENSSL_NO_DH
		if (k->type == EVP_PKEY_DH)
			{
			/* No idea */
			X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,X509_R_CANT_CHECK_DH_KEY);
			break;
			}
#endif
	        X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY,X509_R_UNKNOWN_KEY_TYPE);
		}

	EVP_PKEY_free(xk);
	return(ok);
	}

d150 1
a150 1
	const unsigned char *p;
d172 1
a172 1
}
a204 5
	if (!req->req_info->attributes)
		{
		if (!(req->req_info->attributes = sk_X509_ATTRIBUTE_new_null()))
			goto err;
		}
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a63 1
#include <openssl/asn1t.h>
d208 4
a211 3
	return (STACK_OF(X509_EXTENSION) *)
		ASN1_item_d2i(NULL, &p, ext->value.sequence->length,
				ASN1_ITEM_rptr(X509_EXTENSIONS));
d221 2
d230 9
a238 4
	at->value.sequence->length = 
			ASN1_item_i2d((ASN1_VALUE *)exts,
				&at->value.sequence->data,
				ASN1_ITEM_rptr(X509_EXTENSIONS));
d253 1
@


