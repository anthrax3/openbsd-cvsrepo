head	1.38;
access;
symbols
	OPENBSD_6_2:1.38.0.2
	OPENBSD_6_2_BASE:1.38
	OPENBSD_6_1:1.38.0.4
	OPENBSD_6_1_BASE:1.38;
locks; strict;
comment	@ * @;


1.38
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.37;
commitid	kT0fLt3r4lroFJra;

1.37
date	2015.04.11.16.03.21;	author deraadt;	state Exp;
branches;
next	1.36;
commitid	WnYuC1gPCzN02uAn;

1.36
date	2015.02.12.03.54.07;	author jsing;	state Exp;
branches;
next	1.35;
commitid	8Uvg1V8TDfVq15dl;

1.35
date	2015.02.05.01.33.22;	author reyk;	state Exp;
branches;
next	1.34;
commitid	aBGmGLHEhnjeyEgh;

1.34
date	2015.01.22.11.16.56;	author jsing;	state Exp;
branches;
next	1.33;
commitid	1GrZQqjEOO1zGOHA;

1.33
date	2014.09.23.20.01.11;	author miod;	state Exp;
branches;
next	1.32;
commitid	dfTEcdG3QZXkJ72G;

1.32
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.31;
commitid	yQEL1wOWIearrW15;

1.31
date	2014.07.10.22.45.58;	author jsing;	state Exp;
branches;
next	1.30;
commitid	nzndm3zqPmFurSaK;

1.30
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.29;
commitid	id8dTrTMtnTn4fqt;

1.29
date	2014.06.24.19.37.58;	author miod;	state Exp;
branches;
next	1.28;
commitid	gcdL3V6Yguyd7T4r;

1.28
date	2014.06.23.22.19.02;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	9JQzcWo59KD9HxBQ;

1.27
date	2014.06.19.21.23.48;	author tedu;	state Exp;
branches;
next	1.26;
commitid	mCDdAru2ALP865bv;

1.26
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	mJUVYpkFBZ0Zv2bG;

1.25
date	2014.06.07.14.41.57;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	2nvnQBrv22dLtvTt;

1.24
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.20.20.06.19;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.19.14.36.35;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.17.22.08.45;	author sthen;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.17.21.31.27;	author giovanni;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.16.20.36.35;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.15.17.24.25;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.27.05.07.02;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.08.08.03.14;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.06.09.22.53;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.03.21;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.12;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.09;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.41;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.41;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.58;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.52;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.04.13.15.16.35;	author miod;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: by_dir.c,v 1.37 2015/04/11 16:03:21 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include <openssl/opensslconf.h>

#include <openssl/err.h>
#include <openssl/lhash.h>
#include <openssl/x509.h>

# include <sys/stat.h>

typedef struct lookup_dir_hashes_st {
	unsigned long hash;
	int suffix;
} BY_DIR_HASH;

typedef struct lookup_dir_entry_st {
	char *dir;
	int dir_type;
	STACK_OF(BY_DIR_HASH) *hashes;
} BY_DIR_ENTRY;

typedef struct lookup_dir_st {
	BUF_MEM *buffer;
	STACK_OF(BY_DIR_ENTRY) *dirs;
} BY_DIR;

DECLARE_STACK_OF(BY_DIR_HASH)
DECLARE_STACK_OF(BY_DIR_ENTRY)

static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
    char **ret);
static int new_dir(X509_LOOKUP *lu);
static void free_dir(X509_LOOKUP *lu);
static int add_cert_dir(BY_DIR *ctx, const char *dir, int type);
static int get_cert_by_subject(X509_LOOKUP *xl, int type, X509_NAME *name,
    X509_OBJECT *ret);

static X509_LOOKUP_METHOD x509_dir_lookup = {
	.name = "Load certs from files in a directory",
	.new_item = new_dir,
	.free = free_dir,
	.init = NULL, 
	.shutdown = NULL,
	.ctrl = dir_ctrl,
	.get_by_subject = get_cert_by_subject,
	.get_by_issuer_serial = NULL,
	.get_by_fingerprint = NULL,
	.get_by_alias = NULL,
};

X509_LOOKUP_METHOD *
X509_LOOKUP_hash_dir(void)
{
	return (&x509_dir_lookup);
}

static int
dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
    char **retp)
{
	int ret = 0;
	BY_DIR *ld;

	ld = (BY_DIR *)ctx->method_data;

	switch (cmd) {
	case X509_L_ADD_DIR:
		if (argl == X509_FILETYPE_DEFAULT) {
			ret = add_cert_dir(ld, X509_get_default_cert_dir(),
			    X509_FILETYPE_PEM);
			if (!ret) {
				X509error(X509_R_LOADING_CERT_DIR);
			}
		} else
			ret = add_cert_dir(ld, argp, (int)argl);
		break;
	}
	return (ret);
}

static int
new_dir(X509_LOOKUP *lu)
{
	BY_DIR *a;

	if ((a = malloc(sizeof(BY_DIR))) == NULL)
		return (0);
	if ((a->buffer = BUF_MEM_new()) == NULL) {
		free(a);
		return (0);
	}
	a->dirs = NULL;
	lu->method_data = (char *)a;
	return (1);
}

static void
by_dir_hash_free(BY_DIR_HASH *hash)
{
	free(hash);
}

static int
by_dir_hash_cmp(const BY_DIR_HASH * const *a,
    const BY_DIR_HASH * const *b)
{
	if ((*a)->hash > (*b)->hash)
		return 1;
	if ((*a)->hash < (*b)->hash)
		return -1;
	return 0;
}

static void
by_dir_entry_free(BY_DIR_ENTRY *ent)
{
	free(ent->dir);
	if (ent->hashes)
		sk_BY_DIR_HASH_pop_free(ent->hashes, by_dir_hash_free);
	free(ent);
}

static void
free_dir(X509_LOOKUP *lu)
{
	BY_DIR *a;

	a = (BY_DIR *)lu->method_data;
	if (a->dirs != NULL)
		sk_BY_DIR_ENTRY_pop_free(a->dirs, by_dir_entry_free);
	if (a->buffer != NULL)
		BUF_MEM_free(a->buffer);
	free(a);
}

static int
add_cert_dir(BY_DIR *ctx, const char *dir, int type)
{
	int j;
	const char *s, *ss, *p;
	ptrdiff_t len;

	if (dir == NULL || !*dir) {
		X509error(X509_R_INVALID_DIRECTORY);
		return 0;
	}

	s = dir;
	p = s;
	do {
		if ((*p == ':') || (*p == '\0')) {
			BY_DIR_ENTRY *ent;
			ss = s;
			s = p + 1;
			len = p - ss;
			if (len == 0)
				continue;
			for (j = 0; j < sk_BY_DIR_ENTRY_num(ctx->dirs); j++) {
				ent = sk_BY_DIR_ENTRY_value(ctx->dirs, j);
				if (strlen(ent->dir) == (size_t)len &&
				    strncmp(ent->dir, ss, (size_t)len) == 0)
					break;
			}
			if (j < sk_BY_DIR_ENTRY_num(ctx->dirs))
				continue;
			if (ctx->dirs == NULL) {
				ctx->dirs = sk_BY_DIR_ENTRY_new_null();
				if (!ctx->dirs) {
					X509error(ERR_R_MALLOC_FAILURE);
					return 0;
				}
			}
			ent = malloc(sizeof(BY_DIR_ENTRY));
			if (!ent) {
				X509error(ERR_R_MALLOC_FAILURE);
				return 0;
			}
			ent->dir_type = type;
			ent->hashes = sk_BY_DIR_HASH_new(by_dir_hash_cmp);
			ent->dir = strndup(ss, (size_t)len);
			if (!ent->dir || !ent->hashes) {
				X509error(ERR_R_MALLOC_FAILURE);
				by_dir_entry_free(ent);
				return 0;
			}
			if (!sk_BY_DIR_ENTRY_push(ctx->dirs, ent)) {
				X509error(ERR_R_MALLOC_FAILURE);
				by_dir_entry_free(ent);
				return 0;
			}
		}
	} while (*p++ != '\0');
	return 1;
}

static int
get_cert_by_subject(X509_LOOKUP *xl, int type, X509_NAME *name,
    X509_OBJECT *ret)
{
	BY_DIR *ctx;
	union	{
		struct	{
			X509 st_x509;
			X509_CINF st_x509_cinf;
		} x509;
		struct	{
			X509_CRL st_crl;
			X509_CRL_INFO st_crl_info;
		} crl;
	} data;
	int ok = 0;
	int i, j, k;
	unsigned long h;
	BUF_MEM *b = NULL;
	X509_OBJECT stmp, *tmp;
	const char *postfix="";

	if (name == NULL)
		return (0);

	stmp.type = type;
	if (type == X509_LU_X509) {
		data.x509.st_x509.cert_info = &data.x509.st_x509_cinf;
		data.x509.st_x509_cinf.subject = name;
		stmp.data.x509 = &data.x509.st_x509;
		postfix="";
	} else if (type == X509_LU_CRL) {
		data.crl.st_crl.crl = &data.crl.st_crl_info;
		data.crl.st_crl_info.issuer = name;
		stmp.data.crl = &data.crl.st_crl;
		postfix="r";
	} else {
		X509error(X509_R_WRONG_LOOKUP_TYPE);
		goto finish;
	}

	if ((b = BUF_MEM_new()) == NULL) {
		X509error(ERR_R_BUF_LIB);
		goto finish;
	}

	ctx = (BY_DIR *)xl->method_data;

	h = X509_NAME_hash(name);
	for (i = 0; i < sk_BY_DIR_ENTRY_num(ctx->dirs); i++) {
		BY_DIR_ENTRY *ent;
		int idx;
		BY_DIR_HASH htmp, *hent;
		ent = sk_BY_DIR_ENTRY_value(ctx->dirs, i);
		j = strlen(ent->dir) + 1 + 8 + 6 + 1 + 1;
		if (!BUF_MEM_grow(b, j)) {
			X509error(ERR_R_MALLOC_FAILURE);
			goto finish;
		}
		if (type == X509_LU_CRL && ent->hashes) {
			htmp.hash = h;
			CRYPTO_r_lock(CRYPTO_LOCK_X509_STORE);
			idx = sk_BY_DIR_HASH_find(ent->hashes, &htmp);
			if (idx >= 0) {
				hent = sk_BY_DIR_HASH_value(ent->hashes, idx);
				k = hent->suffix;
			} else {
				hent = NULL;
				k = 0;
			}
			CRYPTO_r_unlock(CRYPTO_LOCK_X509_STORE);
		} else {
			k = 0;
			hent = NULL;
		}
		for (;;) {
			(void) snprintf(b->data, b->max, "%s/%08lx.%s%d",
			    ent->dir, h, postfix, k);

			{
				struct stat st;
				if (stat(b->data, &st) < 0)
					break;
			}
			/* found one. */
			if (type == X509_LU_X509) {
				if ((X509_load_cert_file(xl, b->data,
				    ent->dir_type)) == 0)
					break;
			} else if (type == X509_LU_CRL) {
				if ((X509_load_crl_file(xl, b->data,
				    ent->dir_type)) == 0)
					break;
			}
			/* else case will caught higher up */
			k++;
		}

		/* we have added it to the cache so now pull it out again */
		CRYPTO_w_lock(CRYPTO_LOCK_X509_STORE);
		j = sk_X509_OBJECT_find(xl->store_ctx->objs, &stmp);
		if (j != -1)
			tmp = sk_X509_OBJECT_value(xl->store_ctx->objs, j);
		else
			tmp = NULL;
		CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);

		/* If a CRL, update the last file suffix added for this */
		if (type == X509_LU_CRL) {
			CRYPTO_w_lock(CRYPTO_LOCK_X509_STORE);
			/*
			 * Look for entry again in case another thread added
			 * an entry first.
			 */
			if (!hent) {
				htmp.hash = h;
				idx = sk_BY_DIR_HASH_find(ent->hashes, &htmp);
				if (idx >= 0)
					hent = sk_BY_DIR_HASH_value(
					    ent->hashes, idx);
			}
			if (!hent) {
				hent = malloc(sizeof(BY_DIR_HASH));
				if (!hent) {
					X509error(ERR_R_MALLOC_FAILURE);
					CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);
					ok = 0;
					goto finish;
				}
				hent->hash = h;
				hent->suffix = k;
				if (!sk_BY_DIR_HASH_push(ent->hashes, hent)) {
					X509error(ERR_R_MALLOC_FAILURE);
					CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);
					free(hent);
					ok = 0;
					goto finish;
				}
			} else if (hent->suffix < k)
				hent->suffix = k;

			CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);

		}

		if (tmp != NULL) {
			ok = 1;
			ret->type = tmp->type;
			memcpy(&ret->data, &tmp->data, sizeof(ret->data));
			/*
			 * If we were going to up the reference count,
			 * we would need to do it on a perl 'type' basis
			 */
	/*		CRYPTO_add(&tmp->data.x509->references,1,
				CRYPTO_LOCK_X509);*/
			goto finish;
		}
	}
finish:
	if (b != NULL)
		BUF_MEM_free(b);
	return (ok);
}
@


1.37
log
@Remove all getenv() calls, especially those wrapped by issetugid().
getenv()'s wrapped by issetugid() are safe, but issetugid() is correct
difficult to impliment on many operating systems.  By accident, a grand
experiment was run over the last year, where issetugid() returned 1 (the
safe value) on a few operating systems.  Noone noticed & complained that
certain environment variables were not working.......
ok doug beck jsing, discussion with others
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.36 2015/02/12 03:54:07 jsing Exp $ */
d136 1
a136 1
				X509err(X509_F_DIR_CTRL, X509_R_LOADING_CERT_DIR);
d208 1
a208 1
		X509err(X509_F_ADD_CERT_DIR, X509_R_INVALID_DIRECTORY);
d233 1
a233 1
					X509err(X509_F_ADD_CERT_DIR, ERR_R_MALLOC_FAILURE);
d239 1
a239 1
				X509err(X509_F_ADD_CERT_DIR, ERR_R_MALLOC_FAILURE);
d246 1
a246 1
				X509err(X509_F_ADD_CERT_DIR, ERR_R_MALLOC_FAILURE);
d251 1
a251 1
				X509err(X509_F_ADD_CERT_DIR, ERR_R_MALLOC_FAILURE);
d297 1
a297 1
		X509err(X509_F_GET_CERT_BY_SUBJECT, X509_R_WRONG_LOOKUP_TYPE);
d302 1
a302 1
		X509err(X509_F_GET_CERT_BY_SUBJECT, ERR_R_BUF_LIB);
d316 1
a316 1
			X509err(X509_F_GET_CERT_BY_SUBJECT, ERR_R_MALLOC_FAILURE);
d384 1
a384 1
					X509err(X509_F_GET_CERT_BY_SUBJECT, ERR_R_MALLOC_FAILURE);
d392 1
a392 1
					X509err(X509_F_GET_CERT_BY_SUBJECT, ERR_R_MALLOC_FAILURE);
@


1.36
log
@If you do not support POSIX I/O then you're not tall enough to ride...

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.35 2015/02/05 01:33:22 reyk Exp $ */
a126 1
	char *dir = NULL;
d133 2
a134 7
			if (issetugid() == 0)
				dir = getenv(X509_get_default_cert_dir_env());
			if (dir)
				ret = add_cert_dir(ld, dir, X509_FILETYPE_PEM);
			else
				ret = add_cert_dir(ld, X509_get_default_cert_dir(),
				    X509_FILETYPE_PEM);
@


1.35
log
@Declare the x509_(mem|file|dir)_lookup symbols as static because they
shouldn't be used directly.  They aren't part of the API; each module
(file, dir, mem) provides an actual function to export the now-static
object.

OK miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.34 2015/01/22 11:16:56 jsing Exp $ */
a72 1
#ifndef OPENSSL_NO_POSIX_IO
a73 1
#endif
a344 1
#ifndef OPENSSL_NO_POSIX_IO
a349 1
#endif
@


1.34
log
@Use field names in struct initialisers.

No change to generated assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.33 2014/09/23 20:01:11 miod Exp $ */
d104 1
a104 1
X509_LOOKUP_METHOD x509_dir_lookup = {
@


1.33
log
@Fix regression introduced in revision 1.15 by using strndup() instead of
strdup() to allocated directory list components.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.32 2014/07/11 08:44:49 jsing Exp $ */
d105 10
a114 10
	"Load certs from files in a directory",
	new_dir,		/* new */
	free_dir,		/* free */
	NULL, 			/* init */
	NULL,			/* shutdown */
	dir_ctrl,		/* ctrl */
	get_cert_by_subject,	/* get_by_subject */
	NULL,			/* get_by_issuer_serial */
	NULL,			/* get_by_fingerprint */
	NULL,			/* get_by_alias */
@


1.32
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.31 2014/07/10 22:45:58 jsing Exp $ */
d211 1
a211 1
	int j, len;
d213 1
d227 1
a227 1
			len = (int)(p - ss);
d233 1
a233 2
				    strncmp(ent->dir, ss,
				    (unsigned int)len) == 0)
d252 1
a252 1
			ent->dir = strdup(ss);
@


1.31
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.30 2014/07/10 13:58:23 jsing Exp $ */
d69 3
a71 1
#include "cryptlib.h"
a75 3

#include <openssl/lhash.h>
#include <openssl/x509.h>
@


1.30
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.29 2014/06/24 19:37:58 miod Exp $ */
d59 2
d67 2
a70 1
#include <sys/types.h>
a76 1

@


1.29
log
@Unifdef -UNO_SYS_TYPES_H
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.28 2014/06/23 22:19:02 deraadt Exp $ */
d59 1
d61 1
d63 1
a63 1
#include <errno.h>
@


1.28
log
@Since this is a library, place issetugid() before every getenv()
ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.27 2014/06/19 21:23:48 tedu Exp $ */
d65 1
a65 3
#ifndef NO_SYS_TYPES_H
# include <sys/types.h>
#endif
@


1.27
log
@improve error checking. set error code on error, and check malloc return.
add missing unlock in one case. ok lteo miod
@
text
@d1 1
a1 1
/* $OpenBSD: by_dir.c,v 1.26 2014/06/12 15:49:31 deraadt Exp $ */
d135 2
a136 1
			dir = (char *)getenv(X509_get_default_cert_dir_env());
@


1.26
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d244 2
a245 1
			if (!ent)
d247 1
d252 1
d257 1
d391 6
d400 1
@


1.25
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/x509/by_dir.c */
@


1.24
log
@no need for null check before free. from Brendan MacDonell
@
text
@d156 1
a156 1
	if ((a = (BY_DIR *)malloc(sizeof(BY_DIR))) == NULL)
@


1.23
log
@Restore beck's (void)snprintf(): they were reviewed.
@
text
@d187 1
a187 2
	if (ent->dir)
		free(ent->dir);
@


1.22
log
@More KNF.
@
text
@d339 1
a339 1
			snprintf(b->data, b->max, "%s/%08lx.%s%d",
@


1.21
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d140 1
a140 1
			X509_FILETYPE_PEM);
d145 1
a145 1
			ret = add_cert_dir(ld, argp,(int)argl);
d352 2
a353 2
					ent->dir_type)) == 0)
				break;
d356 2
a357 2
					ent->dir_type)) == 0)
				break;
d368 2
a369 1
			else tmp = NULL;
@


1.20
log
@no need for a variable which is hardcoded and only used in an snprintf,
ok giovanni@@. tidy comments nearby while there.
@
text
@d339 1
a339 1
			(void) snprintf(b->data, b->max, "%s/%08lx.%s%d",
@


1.19
log
@
Some VMS and WIN32 cleanup
ok miod@@ lteo@@
@
text
@d339 2
a340 5
			char c = '/';

			(void) snprintf(b->data, b->max,
			"%s%c%08lx.%s%d", ent->dir, c, h,
			postfix, k);
d363 1
a363 2
		/* we have added it to the cache so now pull
		 * it out again */
a370 1

a371 1

d374 2
a375 1
			/* Look for entry again in case another thread added
d406 4
a409 3
			/* If we were going to up the reference count,
			 * we would need to do it on a perl 'type'
			 * basis */
@


1.18
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d340 5
a344 25
#ifdef OPENSSL_SYS_VMS
			c = ent->dir[strlen(ent->dir) - 1];
			if (c != ':' && c != '>' && c != ']') {
				/* If no separator is present, we assume the
				   directory specifier is a logical name, and
				   add a colon.  We really should use better
				   VMS routines for merging things like this,
				   but this will do for now...
				   -- Richard Levitte */
				c = ':';
			} else {
				c = '\0';
			}
#endif
			if (c == '\0') {
				/* This is special.  When c == '\0', no
				   directory separator should be added. */
				(void) snprintf(b->data, b->max,
				"%s%08lx.%s%d", ent->dir, h,
				postfix, k);
			} else {
				(void) snprintf(b->data, b->max,
				"%s%c%08lx.%s%d", ent->dir, c, h,
				postfix, k);
			}
a345 3
#ifdef _WIN32
#define stat _stat
#endif
@


1.17
log
@some KNF cleanup following the script
@
text
@d221 1
a221 1
		if ((*p == LIST_SEPARATOR_CHAR) || (*p == '\0')) {
@


1.16
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d116 2
a117 2
X509_LOOKUP_METHOD
*X509_LOOKUP_hash_dir(void)
@


1.15
log
@Clean up dangerous strncpy use. This included a use where the resulting
string was potentially not nul terminated and a place where malloc return
was unchecked.
while we're at it remove dummytest.c
ok miod@@
@
text
@d156 1
a156 1
	if ((a = (BY_DIR *)OPENSSL_malloc(sizeof(BY_DIR))) == NULL)
d159 1
a159 1
		OPENSSL_free(a);
d170 1
a170 1
	OPENSSL_free(hash);
d188 1
a188 1
		OPENSSL_free(ent->dir);
d191 1
a191 1
	OPENSSL_free(ent);
d204 1
a204 1
	OPENSSL_free(a);
d244 1
a244 1
			ent = OPENSSL_malloc(sizeof(BY_DIR_ENTRY));
d414 1
a414 1
				hent = OPENSSL_malloc(sizeof(BY_DIR_HASH));
d419 1
a419 1
					OPENSSL_free(hent);
@


1.14
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d249 1
a249 1
			ent->dir = OPENSSL_malloc((unsigned int)len + 1);
a253 2
			strncpy(ent->dir, ss,(unsigned int)len);
			ent->dir[len] = '\0';
@


1.13
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d76 1
a76 2
typedef struct lookup_dir_hashes_st
	{
d79 1
a79 1
	} BY_DIR_HASH;
d81 1
a81 2
typedef struct lookup_dir_entry_st
	{
d85 1
a85 1
	} BY_DIR_ENTRY;
d87 1
a87 2
typedef struct lookup_dir_st
	{
d90 1
a90 1
	} BY_DIR;
d96 1
a96 1
	char **ret);
d99 5
a103 5
static int add_cert_dir(BY_DIR *ctx,const char *dir,int type);
static int get_cert_by_subject(X509_LOOKUP *xl,int type,X509_NAME *name,
	X509_OBJECT *ret);
X509_LOOKUP_METHOD x509_dir_lookup=
	{
d114 1
a114 1
	};
d116 11
a126 9
X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void)
	{
	return(&x509_dir_lookup);
	}

static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
	     char **retp)
	{
	int ret=0;
d130 1
a130 1
	ld=(BY_DIR *)ctx->method_data;
d132 1
a132 2
	switch (cmd)
		{
d134 2
a135 3
		if (argl == X509_FILETYPE_DEFAULT)
			{
			dir=(char *)getenv(X509_get_default_cert_dir_env());
d137 1
a137 1
				ret=add_cert_dir(ld,dir,X509_FILETYPE_PEM);
d139 4
a142 6
				ret=add_cert_dir(ld,X509_get_default_cert_dir(),
					X509_FILETYPE_PEM);
			if (!ret)
				{
				X509err(X509_F_DIR_CTRL,X509_R_LOADING_CERT_DIR);
				}
d144 2
a145 2
		else
			ret=add_cert_dir(ld,argp,(int)argl);
a146 2
		}
	return(ret);
d148 2
d151 3
a153 2
static int new_dir(X509_LOOKUP *lu)
	{
d156 3
a158 4
	if ((a=(BY_DIR *)OPENSSL_malloc(sizeof(BY_DIR))) == NULL)
		return(0);
	if ((a->buffer=BUF_MEM_new()) == NULL)
		{
d160 1
a160 5
		return(0);
		}
	a->dirs=NULL;
	lu->method_data=(char *)a;
	return(1);
d162 8
a169 3

static void by_dir_hash_free(BY_DIR_HASH *hash)
	{
d171 1
a171 1
	}
d173 4
a176 3
static int by_dir_hash_cmp(const BY_DIR_HASH * const *a,
			const BY_DIR_HASH * const *b)
	{
d182 1
a182 1
	}
d184 3
a186 2
static void by_dir_entry_free(BY_DIR_ENTRY *ent)
	{
d192 1
a192 1
	}
d194 3
a196 2
static void free_dir(X509_LOOKUP *lu)
	{
d199 1
a199 1
	a=(BY_DIR *)lu->method_data;
d205 11
d218 4
a221 17
static int add_cert_dir(BY_DIR *ctx, const char *dir, int type)
	{
	int j,len;
	const char *s,*ss,*p;

	if (dir == NULL || !*dir)
	    {
	    X509err(X509_F_ADD_CERT_DIR,X509_R_INVALID_DIRECTORY);
	    return 0;
	    }

	s=dir;
	p=s;
	do
		{
		if ((*p == LIST_SEPARATOR_CHAR) || (*p == '\0'))
			{
d223 6
a228 6
			ss=s;
			s=p+1;
			len=(int)(p-ss);
			if (len == 0) continue;
			for (j=0; j < sk_BY_DIR_ENTRY_num(ctx->dirs); j++)
				{
d231 2
a232 1
				    strncmp(ent->dir,ss,(unsigned int)len) == 0)
d234 1
a234 1
				}
d237 1
a237 2
			if (ctx->dirs == NULL)
				{
d239 2
a240 3
				if (!ctx->dirs)
					{
					X509err(X509_F_ADD_CERT_DIR,ERR_R_MALLOC_FAILURE);
a241 1
					}
d243 1
d249 2
a250 3
			ent->dir = OPENSSL_malloc((unsigned int)len+1);
			if (!ent->dir || !ent->hashes)
				{
d253 2
a254 2
				}
			strncpy(ent->dir,ss,(unsigned int)len);
d256 1
a256 2
			if (!sk_BY_DIR_ENTRY_push(ctx->dirs, ent))
				{
a258 1
				}
d260 2
a261 1
		} while (*p++ != '\0');
d263 1
a263 1
	}
d265 4
a268 3
static int get_cert_by_subject(X509_LOOKUP *xl, int type, X509_NAME *name,
	     X509_OBJECT *ret)
	{
d274 1
a274 1
			} x509;
d278 4
a281 4
			} crl;
		} data;
	int ok=0;
	int i,j,k;
d283 2
a284 2
	BUF_MEM *b=NULL;
	X509_OBJECT stmp,*tmp;
d287 2
a288 1
	if (name == NULL) return(0);
d290 5
a294 6
	stmp.type=type;
	if (type == X509_LU_X509)
		{
		data.x509.st_x509.cert_info= &data.x509.st_x509_cinf;
		data.x509.st_x509_cinf.subject=name;
		stmp.data.x509= &data.x509.st_x509;
d296 4
a299 6
		}
	else if (type == X509_LU_CRL)
		{
		data.crl.st_crl.crl= &data.crl.st_crl_info;
		data.crl.st_crl_info.issuer=name;
		stmp.data.crl= &data.crl.st_crl;
d301 2
a302 4
		}
	else
		{
		X509err(X509_F_GET_CERT_BY_SUBJECT,X509_R_WRONG_LOOKUP_TYPE);
d304 1
a304 1
		}
d306 2
a307 3
	if ((b=BUF_MEM_new()) == NULL)
		{
		X509err(X509_F_GET_CERT_BY_SUBJECT,ERR_R_BUF_LIB);
d309 3
a311 3
		}
	
	ctx=(BY_DIR *)xl->method_data;
d313 2
a314 3
	h=X509_NAME_hash(name);
	for (i=0; i < sk_BY_DIR_ENTRY_num(ctx->dirs); i++)
		{
d319 3
a321 4
		j=strlen(ent->dir)+1+8+6+1+1;
		if (!BUF_MEM_grow(b,j))
			{
			X509err(X509_F_GET_CERT_BY_SUBJECT,ERR_R_MALLOC_FAILURE);
d323 2
a324 3
			}
		if (type == X509_LU_CRL && ent->hashes)
			{
d328 1
a328 2
			if (idx >= 0)
				{
d331 1
a331 3
				}
			else
				{
d333 2
a334 2
				k=0;
				}
d336 1
a336 3
			}
		else
			{
d339 2
a340 3
			}
		for (;;)
			{
d343 2
a344 3
			c = ent->dir[strlen(ent->dir)-1];
			if (c != ':' && c != '>' && c != ']')
				{
d352 1
a352 3
				}
			else
				{
d354 1
a354 1
				}
d356 1
a356 2
			if (c == '\0')
				{
d359 8
a366 10
				(void) snprintf(b->data,b->max,
					"%s%08lx.%s%d",ent->dir,h,
					postfix,k);
				}
			else
				{
				(void) snprintf(b->data,b->max,
					"%s%c%08lx.%s%d",ent->dir,c,h,
					postfix,k);
				}
d372 3
a374 3
			struct stat st;
			if (stat(b->data,&st) < 0)
				break;
d378 2
a379 3
			if (type == X509_LU_X509)
				{
				if ((X509_load_cert_file(xl,b->data,
d381 3
a383 5
					break;
				}
			else if (type == X509_LU_CRL)
				{
				if ((X509_load_crl_file(xl,b->data,
d385 2
a386 2
					break;
				}
d389 1
a389 1
			}
d394 4
a397 3
		j = sk_X509_OBJECT_find(xl->store_ctx->objs,&stmp);
		if(j != -1) tmp=sk_X509_OBJECT_value(xl->store_ctx->objs,j);
		else tmp = NULL;
d403 1
a403 2
		if (type == X509_LU_CRL)
			{
d408 1
a408 2
			if (!hent)
				{
d412 4
a415 5
					hent =
					 sk_BY_DIR_HASH_value(ent->hashes, idx);
				}
			if (!hent)
				{
d419 1
a419 2
				if (!sk_BY_DIR_HASH_push(ent->hashes, hent))
					{
a423 1
					}
d425 1
a425 1
			else if (hent->suffix < k)
d430 1
a430 1
			}
d432 4
a435 5
		if (tmp != NULL)
			{
			ok=1;
			ret->type=tmp->type;
			memcpy(&ret->data,&tmp->data,sizeof(ret->data));
a441 1
			}
d443 1
d445 4
a448 3
	if (b != NULL) BUF_MEM_free(b);
	return(ok);
	}
@


1.12
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d382 1
a382 1
				BIO_snprintf(b->data,b->max,
d388 1
a388 1
				BIO_snprintf(b->data,b->max,
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d221 1
a221 1
	for (;;p++)
d267 1
a267 3
		if (*p == '\0')
			break;
		}
@


1.10
log
@resolve conflicts
@
text
@d68 1
a68 3
#ifdef MAC_OS_pre_X
# include <stat.h>
#else
d75 13
a87 3
#ifdef _WIN32
#define stat	_stat
#endif
d92 1
a92 4
	int num_dirs;
	char **dirs;
	int *dirs_type;
	int num_dirs_alloced;
d95 3
d138 1
a138 1
			dir=(char *)Getenv(X509_get_default_cert_dir_env());
a166 1
	a->num_dirs=0;
a167 2
	a->dirs_type=NULL;
	a->num_dirs_alloced=0;
d172 24
a198 1
	int i;
d201 4
a204 5
	for (i=0; i<a->num_dirs; i++)
		if (a->dirs[i] != NULL) OPENSSL_free(a->dirs[i]);
	if (a->dirs != NULL) OPENSSL_free(a->dirs);
	if (a->dirs_type != NULL) OPENSSL_free(a->dirs_type);
	if (a->buffer != NULL) BUF_MEM_free(a->buffer);
a210 1
	int *ip;
a211 1
	char **pp;
d225 1
d230 5
a234 3
			for (j=0; j<ctx->num_dirs; j++)
				if (strlen(ctx->dirs[j]) == (size_t)len &&
				    strncmp(ctx->dirs[j],ss,(unsigned int)len) == 0)
d236 2
a237 1
			if (j<ctx->num_dirs)
d239 1
a239 1
			if (ctx->num_dirs_alloced < (ctx->num_dirs+1))
d241 2
a242 6
				ctx->num_dirs_alloced+=10;
				pp=(char **)OPENSSL_malloc(ctx->num_dirs_alloced*
					sizeof(char *));
				ip=(int *)OPENSSL_malloc(ctx->num_dirs_alloced*
					sizeof(int));
				if ((pp == NULL) || (ip == NULL))
d245 1
a245 1
					return(0);
d247 19
a265 17
				memcpy(pp,ctx->dirs,(ctx->num_dirs_alloced-10)*
					sizeof(char *));
				memcpy(ip,ctx->dirs_type,(ctx->num_dirs_alloced-10)*
					sizeof(int));
				if (ctx->dirs != NULL)
					OPENSSL_free(ctx->dirs);
				if (ctx->dirs_type != NULL)
					OPENSSL_free(ctx->dirs_type);
				ctx->dirs=pp;
				ctx->dirs_type=ip;
				}
			ctx->dirs_type[ctx->num_dirs]=type;
			ctx->dirs[ctx->num_dirs]=(char *)OPENSSL_malloc((unsigned int)len+1);
			if (ctx->dirs[ctx->num_dirs] == NULL) return(0);
			strncpy(ctx->dirs[ctx->num_dirs],ss,(unsigned int)len);
			ctx->dirs[ctx->num_dirs][len]='\0';
			ctx->num_dirs++;
d267 2
a268 1
		if (*p == '\0') break;
d270 1
a270 1
	return(1);
a290 1
	struct stat st;
d326 1
a326 1
	for (i=0; i<ctx->num_dirs; i++)
d328 5
a332 1
		j=strlen(ctx->dirs[i])+1+8+6+1+1;
d338 22
a359 1
		k=0;
d364 1
a364 1
			c = ctx->dirs[i][strlen(ctx->dirs[i])-1];
d385 1
a385 1
					"%s%08lx.%s%d",ctx->dirs[i],h,
d391 1
a391 1
					"%s%c%08lx.%s%d",ctx->dirs[i],c,h,
d394 6
a399 1
			k++;
d402 2
d408 1
a408 1
					ctx->dirs_type[i])) == 0)
d414 1
a414 1
					ctx->dirs_type[i])) == 0)
d418 1
d423 1
a423 1
		CRYPTO_r_lock(CRYPTO_LOCK_X509_STORE);
d427 38
a464 1
		CRYPTO_r_unlock(CRYPTO_LOCK_X509_STORE);
a482 1

@


1.9
log
@resolve conflicts
@
text
@d77 4
@


1.8
log
@resolve conflicts
@
text
@d192 1
a192 1
	for (;;)
d201 5
a205 2
				if (strncmp(ctx->dirs[j],ss,(unsigned int)len) == 0)
					continue;
a236 1
		p++;
@


1.7
log
@merge 0.9.7d
@
text
@d117 1
a117 1
	char *dir;
d126 6
a131 2
			ret=add_cert_dir(ld,X509_get_default_cert_dir(),
				X509_FILETYPE_PEM);
a134 5
				}
			else
				{
				dir=(char *)Getenv(X509_get_default_cert_dir_env());
				ret=add_cert_dir(ld,dir,X509_FILETYPE_PEM);
@


1.6
log
@sprintf->snprintf. deraadt@@ suggestions and ok
@
text
@d305 32
a336 2
			snprintf(b->data,b->max,"%s/%08lx.%s%d",ctx->dirs[i],h,
				 postfix,k);
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d305 2
a306 2
			sprintf(b->data,"%s/%08lx.%s%d",ctx->dirs[i],h,
				postfix,k);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d330 1
a330 1
		if(j != -1) tmp=sk_X509_OBJECT_value(xl->store_ctx->objs,i);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d149 1
a149 1
	if ((a=(BY_DIR *)Malloc(sizeof(BY_DIR))) == NULL)
d153 1
a153 1
		Free(a);
d171 3
a173 3
		if (a->dirs[i] != NULL) Free(a->dirs[i]);
	if (a->dirs != NULL) Free(a->dirs);
	if (a->dirs_type != NULL) Free(a->dirs_type);
d175 1
a175 1
	Free(a);
d207 1
a207 1
				pp=(char **)Malloc(ctx->num_dirs_alloced*
d209 1
a209 1
				ip=(int *)Malloc(ctx->num_dirs_alloced*
d221 1
a221 1
					Free(ctx->dirs);
d223 1
a223 1
					Free(ctx->dirs_type);
d228 1
a228 1
			ctx->dirs[ctx->num_dirs]=(char *)Malloc((unsigned int)len+1);
d329 3
a331 1
		tmp=(X509_OBJECT *)lh_retrieve(xl->store_ctx->certs,&stmp);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a61 2
#include <sys/types.h>
#include <sys/stat.h>
d64 10
d221 1
a221 1
					Free((char *)ctx->dirs);
d223 1
a223 1
					Free((char *)ctx->dirs_type);
d329 1
a329 2
		tmp=(X509_OBJECT *)lh_retrieve(xl->store_ctx->certs,
			(char *)&stmp);
@


1.1
log
@Initial revision
@
text
@d66 2
a67 3
#include "lhash.h"
#include "x509.h"
#include "pem.h"
d78 2
a79 2
#ifndef NOPROTO
static int dir_ctrl(X509_LOOKUP *ctx,int cmd,char *argp,long argl,char **ret);
d82 1
a82 1
static int add_cert_dir(BY_DIR *ctx,char *dir,int type);
a84 8
#else
static int dir_ctrl();
static int new_dir();
static void free_dir();
static int add_cert_dir();
static int get_cert_by_subject();
#endif

d99 1
a99 1
X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir()
d104 2
a105 6
static int dir_ctrl(ctx,cmd,argp,argl,retp)
X509_LOOKUP *ctx;
int cmd;
long argl;
char *argp;
char **retp;
d137 1
a137 2
static int new_dir(lu)
X509_LOOKUP *lu;
d156 1
a156 2
static void free_dir(lu)
X509_LOOKUP *lu;
d170 1
a170 4
static int add_cert_dir(ctx,dir, type)
BY_DIR *ctx;
char *dir;
int type;
d174 1
a174 1
	char *s,*ss,*p;
d177 5
a181 1
	if (dir == NULL) return(0);
d232 2
a233 5
static int get_cert_by_subject(xl,type,name,ret)
X509_LOOKUP *xl;
int type;
X509_NAME *name;
X509_OBJECT *ret;
d252 1
a252 1
	char *postfix="";
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 2
d66 3
a68 12

#ifndef NO_SYS_TYPES_H
# include <sys/types.h>
#endif
#ifdef MAC_OS_pre_X
# include <stat.h>
#else
# include <sys/stat.h>
#endif

#include <openssl/lhash.h>
#include <openssl/x509.h>
d79 2
a80 2
static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
	char **ret);
d83 1
a83 1
static int add_cert_dir(BY_DIR *ctx,const char *dir,int type);
d86 8
d108 1
a108 1
X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void)
d113 6
a118 2
static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
	     char **retp)
d150 2
a151 1
static int new_dir(X509_LOOKUP *lu)
d155 1
a155 1
	if ((a=(BY_DIR *)OPENSSL_malloc(sizeof(BY_DIR))) == NULL)
d159 1
a159 1
		OPENSSL_free(a);
d170 2
a171 1
static void free_dir(X509_LOOKUP *lu)
d178 3
a180 3
		if (a->dirs[i] != NULL) OPENSSL_free(a->dirs[i]);
	if (a->dirs != NULL) OPENSSL_free(a->dirs);
	if (a->dirs_type != NULL) OPENSSL_free(a->dirs_type);
d182 1
a182 1
	OPENSSL_free(a);
d185 4
a188 1
static int add_cert_dir(BY_DIR *ctx, const char *dir, int type)
d192 1
a192 1
	const char *s,*ss,*p;
d195 1
a195 5
	if (dir == NULL || !*dir)
	    {
	    X509err(X509_F_ADD_CERT_DIR,X509_R_INVALID_DIRECTORY);
	    return 0;
	    }
d213 1
a213 1
				pp=(char **)OPENSSL_malloc(ctx->num_dirs_alloced*
d215 1
a215 1
				ip=(int *)OPENSSL_malloc(ctx->num_dirs_alloced*
d227 1
a227 1
					OPENSSL_free(ctx->dirs);
d229 1
a229 1
					OPENSSL_free(ctx->dirs_type);
d234 1
a234 1
			ctx->dirs[ctx->num_dirs]=(char *)OPENSSL_malloc((unsigned int)len+1);
d246 5
a250 2
static int get_cert_by_subject(X509_LOOKUP *xl, int type, X509_NAME *name,
	     X509_OBJECT *ret)
d269 1
a269 1
	const char *postfix="";
d338 2
a339 3
		j = sk_X509_OBJECT_find(xl->store_ctx->objs,&stmp);
		if(j != -1) tmp=sk_X509_OBJECT_value(xl->store_ctx->objs,j);
		else tmp = NULL;
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@d305 2
a306 32
			char c = '/';
#ifdef OPENSSL_SYS_VMS
			c = ctx->dirs[i][strlen(ctx->dirs[i])-1];
			if (c != ':' && c != '>' && c != ']')
				{
				/* If no separator is present, we assume the
				   directory specifier is a logical name, and
				   add a colon.  We really should use better
				   VMS routines for merging things like this,
				   but this will do for now...
				   -- Richard Levitte */
				c = ':';
				}
			else
				{
				c = '\0';
				}
#endif
			if (c == '\0')
				{
				/* This is special.  When c == '\0', no
				   directory separator should be added. */
				BIO_snprintf(b->data,b->max,
					"%s%08lx.%s%d",ctx->dirs[i],h,
					postfix,k);
				}
			else
				{
				BIO_snprintf(b->data,b->max,
					"%s%c%08lx.%s%d",ctx->dirs[i],c,h,
					postfix,k);
				}
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@d117 1
a117 1
	char *dir = NULL;
d126 2
a127 6
			dir=(char *)Getenv(X509_get_default_cert_dir_env());
			if (dir)
				ret=add_cert_dir(ld,dir,X509_FILETYPE_PEM);
			else
				ret=add_cert_dir(ld,X509_get_default_cert_dir(),
					X509_FILETYPE_PEM);
d131 5
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d192 1
a192 1
	for (;;p++)
d201 2
a202 5
				if (strlen(ctx->dirs[j]) == (size_t)len &&
				    strncmp(ctx->dirs[j],ss,(unsigned int)len) == 0)
					break;
			if (j<ctx->num_dirs)
				continue;
d234 1
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a76 4
#ifdef _WIN32
#define stat	_stat
#endif

@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d68 3
a70 1
#ifndef OPENSSL_NO_POSIX_IO
d77 3
a79 13

typedef struct lookup_dir_hashes_st
	{
	unsigned long hash;
	int suffix;
	} BY_DIR_HASH;

typedef struct lookup_dir_entry_st
	{
	char *dir;
	int dir_type;
	STACK_OF(BY_DIR_HASH) *hashes;
	} BY_DIR_ENTRY;
d84 4
a87 1
	STACK_OF(BY_DIR_ENTRY) *dirs;
a89 3
DECLARE_STACK_OF(BY_DIR_HASH)
DECLARE_STACK_OF(BY_DIR_ENTRY)

d130 1
a130 1
			dir=(char *)getenv(X509_get_default_cert_dir_env());
d159 1
d161 2
a166 24
static void by_dir_hash_free(BY_DIR_HASH *hash)
	{
	OPENSSL_free(hash);
	}

static int by_dir_hash_cmp(const BY_DIR_HASH * const *a,
			const BY_DIR_HASH * const *b)
	{
	if ((*a)->hash > (*b)->hash)
		return 1;
	if ((*a)->hash < (*b)->hash)
		return -1;
	return 0;
	}

static void by_dir_entry_free(BY_DIR_ENTRY *ent)
	{
	if (ent->dir)
		OPENSSL_free(ent->dir);
	if (ent->hashes)
		sk_BY_DIR_HASH_pop_free(ent->hashes, by_dir_hash_free);
	OPENSSL_free(ent);
	}

d170 1
d173 5
a177 4
	if (a->dirs != NULL)
		sk_BY_DIR_ENTRY_pop_free(a->dirs, by_dir_entry_free);
	if (a->buffer != NULL)
		BUF_MEM_free(a->buffer);
d184 1
d186 1
a199 1
			BY_DIR_ENTRY *ent;
d204 3
a206 5
			for (j=0; j < sk_BY_DIR_ENTRY_num(ctx->dirs); j++)
				{
				ent = sk_BY_DIR_ENTRY_value(ctx->dirs, j);
				if (strlen(ent->dir) == (size_t)len &&
				    strncmp(ent->dir,ss,(unsigned int)len) == 0)
d208 1
a208 2
				}
			if (j < sk_BY_DIR_ENTRY_num(ctx->dirs))
d210 1
a210 1
			if (ctx->dirs == NULL)
d212 6
a217 2
				ctx->dirs = sk_BY_DIR_ENTRY_new_null();
				if (!ctx->dirs)
d220 1
a220 1
					return 0;
d222 17
a238 19
				}
			ent = OPENSSL_malloc(sizeof(BY_DIR_ENTRY));
			if (!ent)
				return 0;
			ent->dir_type = type;
			ent->hashes = sk_BY_DIR_HASH_new(by_dir_hash_cmp);
			ent->dir = OPENSSL_malloc((unsigned int)len+1);
			if (!ent->dir || !ent->hashes)
				{
				by_dir_entry_free(ent);
				return 0;
				}
			strncpy(ent->dir,ss,(unsigned int)len);
			ent->dir[len] = '\0';
			if (!sk_BY_DIR_ENTRY_push(ctx->dirs, ent))
				{
				by_dir_entry_free(ent);
				return 0;
				}
d240 1
a240 2
		if (*p == '\0')
			break;
d242 1
a242 1
	return 1;
d263 1
d299 1
a299 1
	for (i=0; i < sk_BY_DIR_ENTRY_num(ctx->dirs); i++)
d301 1
a301 5
		BY_DIR_ENTRY *ent;
		int idx;
		BY_DIR_HASH htmp, *hent;
		ent = sk_BY_DIR_ENTRY_value(ctx->dirs, i);
		j=strlen(ent->dir)+1+8+6+1+1;
d307 1
a307 22
		if (type == X509_LU_CRL && ent->hashes)
			{
			htmp.hash = h;
			CRYPTO_r_lock(CRYPTO_LOCK_X509_STORE);
			idx = sk_BY_DIR_HASH_find(ent->hashes, &htmp);
			if (idx >= 0)
				{
				hent = sk_BY_DIR_HASH_value(ent->hashes, idx);
				k = hent->suffix;
				}
			else
				{
				hent = NULL;
				k=0;
				}
			CRYPTO_r_unlock(CRYPTO_LOCK_X509_STORE);
			}
		else
			{
			k = 0;
			hent = NULL;
			}
d312 1
a312 1
			c = ent->dir[strlen(ent->dir)-1];
d333 1
a333 1
					"%s%08lx.%s%d",ent->dir,h,
d339 1
a339 1
					"%s%c%08lx.%s%d",ent->dir,c,h,
d342 1
a342 6
#ifndef OPENSSL_NO_POSIX_IO
#ifdef _WIN32
#define stat _stat
#endif
			{
			struct stat st;
a344 2
			}
#endif
d349 1
a349 1
					ent->dir_type)) == 0)
d355 1
a355 1
					ent->dir_type)) == 0)
a358 1
			k++;
d363 1
a363 1
		CRYPTO_w_lock(CRYPTO_LOCK_X509_STORE);
d367 1
a367 38
		CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);


		/* If a CRL, update the last file suffix added for this */

		if (type == X509_LU_CRL)
			{
			CRYPTO_w_lock(CRYPTO_LOCK_X509_STORE);
			/* Look for entry again in case another thread added
			 * an entry first.
			 */
			if (!hent)
				{
				htmp.hash = h;
				idx = sk_BY_DIR_HASH_find(ent->hashes, &htmp);
				if (idx >= 0)
					hent =
					 sk_BY_DIR_HASH_value(ent->hashes, idx);
				}
			if (!hent)
				{
				hent = OPENSSL_malloc(sizeof(BY_DIR_HASH));
				hent->hash = h;
				hent->suffix = k;
				if (!sk_BY_DIR_HASH_push(ent->hashes, hent))
					{
					CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);
					OPENSSL_free(hent);
					ok = 0;
					goto finish;
					}
				}
			else if (hent->suffix < k)
				hent->suffix = k;

			CRYPTO_w_unlock(CRYPTO_LOCK_X509_STORE);

			}
d386 1
@


1.1.1.8
log
@Import OpenSSL 1.0.1g
@
text
@d221 1
a221 1
	do
d267 3
a269 1
		} while (*p++ != '\0');
@


