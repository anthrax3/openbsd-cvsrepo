head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2015.09.30.17.49.59;	author jsing;	state Exp;
branches;
next	1.10;
commitid	vHyaQtFo0I0LGAYw;

1.10
date	2015.09.30.17.30.16;	author jsing;	state Exp;
branches;
next	1.9;
commitid	f3YLBhwPPENmVqqA;

1.9
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.8;
commitid	rYgS8cWcS59JYkBV;

1.8
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.7;
commitid	yQEL1wOWIearrW15;

1.7
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.04.20.16.24.15;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.17;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.59;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.17;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.14.00;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@s/M_ASN1_TIME_free/ASN1_TIME_free/
@
text
@/* $OpenBSD: x509cset.c,v 1.10 2015/09/30 17:30:16 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2001.
 */
/* ====================================================================
 * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

int
X509_CRL_set_version(X509_CRL *x, long version)
{
	if (x == NULL)
		return (0);
	if (x->crl->version == NULL) {
		if ((x->crl->version = ASN1_INTEGER_new()) == NULL)
			return (0);
	}
	return (ASN1_INTEGER_set(x->crl->version, version));
}

int
X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name)
{
	if ((x == NULL) || (x->crl == NULL))
		return (0);
	return (X509_NAME_set(&x->crl->issuer, name));
}

int
X509_CRL_set_lastUpdate(X509_CRL *x, const ASN1_TIME *tm)
{
	ASN1_TIME *in;

	if (x == NULL)
		return (0);
	in = x->crl->lastUpdate;
	if (in != tm) {
		in = ASN1_STRING_dup(tm);
		if (in != NULL) {
			ASN1_TIME_free(x->crl->lastUpdate);
			x->crl->lastUpdate = in;
		}
	}
	return (in != NULL);
}

int
X509_CRL_set_nextUpdate(X509_CRL *x, const ASN1_TIME *tm)
{
	ASN1_TIME *in;

	if (x == NULL)
		return (0);
	in = x->crl->nextUpdate;
	if (in != tm) {
		in = ASN1_STRING_dup(tm);
		if (in != NULL) {
			ASN1_TIME_free(x->crl->nextUpdate);
			x->crl->nextUpdate = in;
		}
	}
	return (in != NULL);
}

int
X509_CRL_sort(X509_CRL *c)
{
	int i;
	X509_REVOKED *r;

	/* sort the data so it will be written in serial
	 * number order */
	sk_X509_REVOKED_sort(c->crl->revoked);
	for (i = 0; i < sk_X509_REVOKED_num(c->crl->revoked); i++) {
		r = sk_X509_REVOKED_value(c->crl->revoked, i);
		r->sequence = i;
	}
	c->crl->enc.modified = 1;
	return 1;
}

int
X509_REVOKED_set_revocationDate(X509_REVOKED *x, ASN1_TIME *tm)
{
	ASN1_TIME *in;

	if (x == NULL)
		return (0);
	in = x->revocationDate;
	if (in != tm) {
		in = ASN1_STRING_dup(tm);
		if (in != NULL) {
			ASN1_TIME_free(x->revocationDate);
			x->revocationDate = in;
		}
	}
	return (in != NULL);
}

int
X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial)
{
	ASN1_INTEGER *in;

	if (x == NULL)
		return (0);
	in = x->serialNumber;
	if (in != serial) {
		in = ASN1_INTEGER_dup(serial);
		if (in != NULL) {
			ASN1_INTEGER_free(x->serialNumber);
			x->serialNumber = in;
		}
	}
	return (in != NULL);
}
@


1.10
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509cset.c,v 1.9 2015/07/29 14:58:34 jsing Exp $ */
d97 1
a97 1
			M_ASN1_TIME_free(x->crl->lastUpdate);
d115 1
a115 1
			M_ASN1_TIME_free(x->crl->nextUpdate);
d150 1
a150 1
			M_ASN1_TIME_free(x->revocationDate);
@


1.9
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509cset.c,v 1.8 2014/07/11 08:44:49 jsing Exp $ */
d72 1
a72 1
		if ((x->crl->version = M_ASN1_INTEGER_new()) == NULL)
d166 1
a166 1
		in = ASN1_STRING_dup(serial);
d168 1
a168 1
			M_ASN1_INTEGER_free(x->serialNumber);
@


1.8
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509cset.c,v 1.7 2014/06/12 15:49:31 deraadt Exp $ */
d95 1
a95 1
		in = M_ASN1_TIME_dup(tm);
d113 1
a113 1
		in = M_ASN1_TIME_dup(tm);
d148 1
a148 1
		in = M_ASN1_TIME_dup(tm);
d166 1
a166 1
		in = M_ASN1_INTEGER_dup(serial);
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
d62 1
a63 1
#include <openssl/evp.h>
@


1.6
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/x509/x509cset.c */
@


1.5
log
@blunt force knf
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d66 2
a67 1
int X509_CRL_set_version(X509_CRL *x, long version)
d69 2
a70 1
	if (x == NULL) return(0);
d72 2
a73 2
		if ((x->crl->version=M_ASN1_INTEGER_new()) == NULL)
			return(0);
d75 1
a75 1
	return(ASN1_INTEGER_set(x->crl->version,version));
d78 2
a79 1
int X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name)
d81 3
a83 2
	if ((x == NULL) || (x->crl == NULL)) return(0);
	return(X509_NAME_set(&x->crl->issuer,name));
d86 2
a87 2

int X509_CRL_set_lastUpdate(X509_CRL *x, const ASN1_TIME *tm)
d91 3
a93 2
	if (x == NULL) return(0);
	in=x->crl->lastUpdate;
d95 1
a95 1
		in=M_ASN1_TIME_dup(tm);
d98 1
a98 1
			x->crl->lastUpdate=in;
d101 1
a101 1
	return(in != NULL);
d104 2
a105 1
int X509_CRL_set_nextUpdate(X509_CRL *x, const ASN1_TIME *tm)
d109 3
a111 2
	if (x == NULL) return(0);
	in=x->crl->nextUpdate;
d113 1
a113 1
		in=M_ASN1_TIME_dup(tm);
d116 1
a116 1
			x->crl->nextUpdate=in;
d119 1
a119 1
	return(in != NULL);
d122 2
a123 1
int X509_CRL_sort(X509_CRL *c)
d127 1
d131 3
a133 3
	for (i=0; i<sk_X509_REVOKED_num(c->crl->revoked); i++) {
		r=sk_X509_REVOKED_value(c->crl->revoked,i);
		r->sequence=i;
d139 2
a140 1
int X509_REVOKED_set_revocationDate(X509_REVOKED *x, ASN1_TIME *tm)
d144 3
a146 2
	if (x == NULL) return(0);
	in=x->revocationDate;
d148 1
a148 1
		in=M_ASN1_TIME_dup(tm);
d151 1
a151 1
			x->revocationDate=in;
d154 1
a154 1
	return(in != NULL);
d157 2
a158 1
int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial)
d162 3
a164 2
	if (x == NULL) return(0);
	in=x->serialNumber;
d166 1
a166 1
		in=M_ASN1_INTEGER_dup(serial);
d169 1
a169 1
			x->serialNumber=in;
d172 1
a172 1
	return(in != NULL);
@


1.4
log
@resolve conflicts, fix local changes
@
text
@d67 1
a67 1
	{
d69 1
a69 2
	if (x->crl->version == NULL)
		{
d72 1
a72 1
		}
d74 1
a74 1
	}
d77 1
a77 1
	{
d80 1
a80 1
	}
d84 1
a84 1
	{
d89 1
a89 2
	if (in != tm)
		{
d91 1
a91 2
		if (in != NULL)
			{
a93 1
			}
d95 1
d97 1
a97 1
	}
d100 1
a100 1
	{
d105 1
a105 2
	if (in != tm)
		{
d107 1
a107 2
		if (in != NULL)
			{
a109 1
			}
d111 1
d113 1
a113 1
	}
d116 1
a116 1
	{
d122 1
a122 2
	for (i=0; i<sk_X509_REVOKED_num(c->crl->revoked); i++)
		{
d125 1
a125 1
		}
d128 1
a128 1
	}
d131 1
a131 1
	{
d136 1
a136 2
	if (in != tm)
		{
d138 1
a138 2
		if (in != NULL)
			{
a140 1
			}
d142 1
d144 1
a144 1
	}
d147 1
a147 1
	{
d152 1
a152 2
	if (in != serial)
		{
d154 1
a154 2
		if (in != NULL)
			{
a156 1
			}
d158 1
d160 1
a160 1
	}
@


1.3
log
@resolve conflicts
@
text
@d84 1
a84 1
int X509_CRL_set_lastUpdate(X509_CRL *x, ASN1_TIME *tm)
d102 1
a102 1
int X509_CRL_set_nextUpdate(X509_CRL *x, ASN1_TIME *tm)
@


1.2
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d132 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a131 1
	c->crl->enc.modified = 1;
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d84 1
a84 1
int X509_CRL_set_lastUpdate(X509_CRL *x, const ASN1_TIME *tm)
d102 1
a102 1
int X509_CRL_set_nextUpdate(X509_CRL *x, const ASN1_TIME *tm)
@


