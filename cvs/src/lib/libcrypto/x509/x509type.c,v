head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2015.06.13.08.38.10;	author doug;	state Exp;
branches;
next	1.11;
commitid	A7PrDVdy9HjfQlSR;

1.11
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.20.16.24.15;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.13.21.25.14;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.52;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.08.08.03.14;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.52;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.00;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.11.21.17.58;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.53;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.47;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.44;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Fix bad indenting in LibreSSL.

jsg@@ noticed that some of the lines in libssl and libcrypto are not
indented properly.  At a quick glance, it looks like it has a different
control flow than it really does.  I checked the history in our tree and
in OpenSSL to make sure these were simple mistakes.

ok miod@@ jsing@@
@
text
@/* $OpenBSD: x509type.c,v 1.11 2014/07/11 08:44:49 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

int
X509_certificate_type(X509 *x, EVP_PKEY *pkey)
{
	EVP_PKEY *pk;
	int ret = 0, i;

	if (x == NULL)
		return (0);

	if (pkey == NULL)
		pk = X509_get_pubkey(x);
	else
		pk = pkey;

	if (pk == NULL)
		return (0);

	switch (pk->type) {
	case EVP_PKEY_RSA:
		ret = EVP_PK_RSA|EVP_PKT_SIGN;
/*		if (!sign only extension) */
		ret |= EVP_PKT_ENC;
		break;
	case EVP_PKEY_DSA:
		ret = EVP_PK_DSA|EVP_PKT_SIGN;
		break;
	case EVP_PKEY_EC:
		ret = EVP_PK_EC|EVP_PKT_SIGN|EVP_PKT_EXCH;
		break;
	case EVP_PKEY_DH:
		ret = EVP_PK_DH|EVP_PKT_EXCH;
		break;
	case NID_id_GostR3410_94:
	case NID_id_GostR3410_2001:
		ret = EVP_PKT_EXCH|EVP_PKT_SIGN;
		break;
	default:
		break;
	}

	i = OBJ_obj2nid(x->sig_alg->algorithm);
	if (i && OBJ_find_sigid_algs(i, NULL, &i)) {
		switch (i) {
		case NID_rsaEncryption:
		case NID_rsa:
			ret |= EVP_PKS_RSA;
			break;
		case NID_dsa:
		case NID_dsa_2:
			ret |= EVP_PKS_DSA;
			break;
		case NID_X9_62_id_ecPublicKey:
			ret |= EVP_PKS_EC;
			break;
		default:
			break;
		}
	}

	/* /8 because it's 1024 bits we look for, not bytes */
	if (EVP_PKEY_size(pk) <= 1024 / 8)
		ret |= EVP_PKT_EXP;
	if (pkey == NULL)
		EVP_PKEY_free(pk);
	return (ret);
}
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509type.c,v 1.10 2014/06/12 15:49:31 deraadt Exp $ */
d124 3
a126 3
	if (EVP_PKEY_size(pk) <= 1024/8)/* /8 because it's 1024 bits we look
					   for, not bytes */
	ret |= EVP_PKT_EXP;
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
@


1.9
log
@KNF.
@
text
@d1 1
a1 1
/* crypto/x509/x509type.c */
@


1.8
log
@blunt force knf
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d65 2
a66 1
int X509_certificate_type(X509 *x, EVP_PKEY *pkey)
d69 1
a69 1
	int ret=0,i;
d71 2
a72 1
	if (x == NULL) return(0);
d75 1
a75 1
		pk=X509_get_pubkey(x);
d77 1
a77 1
		pk=pkey;
d79 2
a80 1
	if (pk == NULL) return(0);
d84 1
a84 1
		ret=EVP_PK_RSA|EVP_PKT_SIGN;
d86 2
a87 2
			ret|=EVP_PKT_ENC;
	break;
d89 1
a89 1
		ret=EVP_PK_DSA|EVP_PKT_SIGN;
d92 1
a92 1
		ret=EVP_PK_EC|EVP_PKT_SIGN|EVP_PKT_EXCH;
d95 2
a96 2
		ret=EVP_PK_DH|EVP_PKT_EXCH;
		break;	
d99 1
a99 1
		ret=EVP_PKT_EXCH|EVP_PKT_SIGN;
d105 1
a105 1
	i=OBJ_obj2nid(x->sig_alg->algorithm);
a106 1

d110 1
a110 1
			ret|=EVP_PKS_RSA;
d114 1
a114 1
			ret|=EVP_PKS_DSA;
d117 1
a117 1
			ret|=EVP_PKS_EC;
d126 4
a129 3
		ret|=EVP_PKT_EXP;
	if(pkey==NULL) EVP_PKEY_free(pk);
	return(ret);
a130 1

@


1.7
log
@resolve conflicts
@
text
@d66 1
a66 1
	{
d79 1
a79 2
	switch (pk->type)
		{
d100 1
a100 1
		}
d103 1
a103 2
	if (i && OBJ_find_sigid_algs(i, NULL, &i))
		{
d105 1
a105 2
		switch (i)
			{
a118 1
			}
d120 1
d127 1
a127 1
	}
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d103 2
a104 2
	i=X509_get_signature_type(x);
	switch (i)
d106 17
a122 11
	case EVP_PKEY_RSA:
		ret|=EVP_PKS_RSA;
		break;
	case EVP_PKEY_DSA:
		ret|=EVP_PKS_DSA;
		break;
	case EVP_PKEY_EC:
		ret|=EVP_PKS_EC;
		break;
	default:
		break;
@


1.5
log
@resolve conflicts
@
text
@d94 4
@


1.4
log
@merge 0.9.7d
@
text
@d89 3
d107 3
@


1.3
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d109 1
a109 1
	if (EVP_PKEY_size(pk) <= 512/8)	/* /8 because it's 512 bits we look
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d102 1
a102 1
	case EVP_PKS_DSA:
d109 2
a110 1
	if (EVP_PKEY_size(pk) <= 512)
@


1.1
log
@Initial revision
@
text
@d61 5
a65 7
#include "evp.h"
#include "objects.h"
#include "x509.h"

int X509_certificate_type(x,pkey)
X509 *x;
EVP_PKEY *pkey;
d109 1
a109 1
	if (EVP_PKEY_size(pkey) <= 512)
d111 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 7
a67 5
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

int X509_certificate_type(X509 *x, EVP_PKEY *pkey)
d111 1
a111 1
	if (EVP_PKEY_size(pk) <= 512)
a112 1
	if(pkey==NULL) EVP_PKEY_free(pk);
@


1.1.1.3
log
@import 0.9.7c
@
text
@d102 1
a102 1
	case EVP_PKEY_DSA:
d109 1
a109 2
	if (EVP_PKEY_size(pk) <= 512/8)	/* /8 because it's 512 bits we look
					   for, not bytes */
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d109 1
a109 1
	if (EVP_PKEY_size(pk) <= 1024/8)/* /8 because it's 1024 bits we look
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@a88 3
	case EVP_PKEY_EC:
		ret=EVP_PK_EC|EVP_PKT_SIGN|EVP_PKT_EXCH;
		break;
a103 3
		break;
	case EVP_PKEY_EC:
		ret|=EVP_PKS_EC;
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a93 4
		break;	
	case NID_id_GostR3410_94:
	case NID_id_GostR3410_2001:
		ret=EVP_PKT_EXCH|EVP_PKT_SIGN;
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d103 2
a104 2
	i=OBJ_obj2nid(x->sig_alg->algorithm);
	if (i && OBJ_find_sigid_algs(i, NULL, &i))
d106 11
a116 17

		switch (i)
			{
		case NID_rsaEncryption:
		case NID_rsa:
			ret|=EVP_PKS_RSA;
			break;
		case NID_dsa:
		case NID_dsa_2:
			ret|=EVP_PKS_DSA;
			break;
		case NID_X9_62_id_ecPublicKey:
			ret|=EVP_PKS_EC;
			break;
		default:
			break;
			}
@


