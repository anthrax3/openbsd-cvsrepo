head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.13;
commitid	kT0fLt3r4lroFJra;

1.13
date	2014.09.29.04.17.24;	author miod;	state Exp;
branches;
next	1.12;
commitid	fg5Vhr0p2DeXQtVq;

1.12
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.13.58.23;	author jsing;	state Exp;
branches;
next	1.10;
commitid	id8dTrTMtnTn4fqt;

1.10
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.20.16.24.15;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.01.59.00;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.57;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.27;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.46;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.12;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.52;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.00;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.18;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.11;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: x509name.c,v 1.13 2014/09/29 04:17:24 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/stack.h>
#include <openssl/x509.h>

int
X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len)
{
	ASN1_OBJECT *obj;

	obj = OBJ_nid2obj(nid);
	if (obj == NULL)
		return (-1);
	return (X509_NAME_get_text_by_OBJ(name, obj, buf, len));
}

int
X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, char *buf,
    int len)
{
	int i;
	ASN1_STRING *data;

	i = X509_NAME_get_index_by_OBJ(name, obj, -1);
	if (i < 0)
		return (-1);
	data = X509_NAME_ENTRY_get_data(X509_NAME_get_entry(name, i));
	i = (data->length > (len - 1)) ? (len - 1) : data->length;
	if (buf == NULL)
		return (data->length);
	if (i >= 0) {
		memcpy(buf, data->data, i);
		buf[i] = '\0';
	}
	return (i);
}

int
X509_NAME_entry_count(X509_NAME *name)
{
	if (name == NULL)
		return (0);
	return (sk_X509_NAME_ENTRY_num(name->entries));
}

int
X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos)
{
	ASN1_OBJECT *obj;

	obj = OBJ_nid2obj(nid);
	if (obj == NULL)
		return (-2);
	return (X509_NAME_get_index_by_OBJ(name, obj, lastpos));
}

/* NOTE: you should be passsing -1, not 0 as lastpos */
int
X509_NAME_get_index_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int lastpos)
{
	int n;
	X509_NAME_ENTRY *ne;
	STACK_OF(X509_NAME_ENTRY) *sk;

	if (name == NULL)
		return (-1);
	if (lastpos < 0)
		lastpos = -1;
	sk = name->entries;
	n = sk_X509_NAME_ENTRY_num(sk);
	for (lastpos++; lastpos < n; lastpos++) {
		ne = sk_X509_NAME_ENTRY_value(sk, lastpos);
		if (OBJ_cmp(ne->object, obj) == 0)
			return (lastpos);
	}
	return (-1);
}

X509_NAME_ENTRY *
X509_NAME_get_entry(X509_NAME *name, int loc)
{
	if (name == NULL || sk_X509_NAME_ENTRY_num(name->entries) <= loc ||
	    loc < 0)
		return (NULL);
	else
		return (sk_X509_NAME_ENTRY_value(name->entries, loc));
}

X509_NAME_ENTRY *
X509_NAME_delete_entry(X509_NAME *name, int loc)
{
	X509_NAME_ENTRY *ret;
	int i, n, set_prev, set_next;
	STACK_OF(X509_NAME_ENTRY) *sk;

	if (name == NULL || sk_X509_NAME_ENTRY_num(name->entries) <= loc ||
	    loc < 0)
		return (NULL);
	sk = name->entries;
	ret = sk_X509_NAME_ENTRY_delete(sk, loc);
	n = sk_X509_NAME_ENTRY_num(sk);
	name->modified = 1;
	if (loc == n)
		return (ret);

	/* else we need to fixup the set field */
	if (loc != 0)
		set_prev = (sk_X509_NAME_ENTRY_value(sk, loc - 1))->set;
	else
		set_prev = ret->set - 1;
	set_next = sk_X509_NAME_ENTRY_value(sk, loc)->set;

	/* set_prev is the previous set
	 * set is the current set
	 * set_next is the following
	 * prev  1 1	1 1	1 1	1 1
	 * set   1	1	2	2
	 * next  1 1	2 2	2 2	3 2
	 * so basically only if prev and next differ by 2, then
	 * re-number down by 1 */
	if (set_prev + 1 < set_next)
		for (i = loc; i < n; i++)
			sk_X509_NAME_ENTRY_value(sk, i)->set--;
	return (ret);
}

int
X509_NAME_add_entry_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int type,
    unsigned char *bytes, int len, int loc, int set)
{
	X509_NAME_ENTRY *ne;
	int ret;

	ne = X509_NAME_ENTRY_create_by_OBJ(NULL, obj, type, bytes, len);
	if (!ne)
		return 0;
	ret = X509_NAME_add_entry(name, ne, loc, set);
	X509_NAME_ENTRY_free(ne);
	return ret;
}

int
X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
    unsigned char *bytes, int len, int loc, int set)
{
	X509_NAME_ENTRY *ne;
	int ret;

	ne = X509_NAME_ENTRY_create_by_NID(NULL, nid, type, bytes, len);
	if (!ne)
		return 0;
	ret = X509_NAME_add_entry(name, ne, loc, set);
	X509_NAME_ENTRY_free(ne);
	return ret;
}

int
X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
    const unsigned char *bytes, int len, int loc, int set)
{
	X509_NAME_ENTRY *ne;
	int ret;

	ne = X509_NAME_ENTRY_create_by_txt(NULL, field, type, bytes, len);
	if (!ne)
		return 0;
	ret = X509_NAME_add_entry(name, ne, loc, set);
	X509_NAME_ENTRY_free(ne);
	return ret;
}

/* if set is -1, append to previous set, 0 'a new one', and 1,
 * prepend to the guy we are about to stomp on. */
int
X509_NAME_add_entry(X509_NAME *name, X509_NAME_ENTRY *ne, int loc, int set)
{
	X509_NAME_ENTRY *new_name = NULL;
	int n, i, inc;
	STACK_OF(X509_NAME_ENTRY) *sk;

	if (name == NULL)
		return (0);
	sk = name->entries;
	n = sk_X509_NAME_ENTRY_num(sk);
	if (loc > n)
		loc = n;
	else if (loc < 0)
		loc = n;

	name->modified = 1;

	if (set == -1) {
		if (loc == 0) {
			set = 0;
			inc = 1;
		} else {
			set = sk_X509_NAME_ENTRY_value(sk, loc - 1)->set;
			inc = 0;
		}
	} else /* if (set >= 0) */ {
		if (loc >= n) {
			if (loc != 0)
				set = sk_X509_NAME_ENTRY_value(sk, loc - 1)->set + 1;
			else
				set = 0;
		} else
			set = sk_X509_NAME_ENTRY_value(sk, loc)->set;
		inc = (set == 0) ? 1 : 0;
	}

	if ((new_name = X509_NAME_ENTRY_dup(ne)) == NULL)
		goto err;
	new_name->set = set;
	if (!sk_X509_NAME_ENTRY_insert(sk, new_name, loc)) {
		X509error(ERR_R_MALLOC_FAILURE);
		goto err;
	}
	if (inc) {
		n = sk_X509_NAME_ENTRY_num(sk);
		for (i = loc + 1; i < n; i++)
			sk_X509_NAME_ENTRY_value(sk, i - 1)->set += 1;
	}
	return (1);

err:
	if (new_name != NULL)
		X509_NAME_ENTRY_free(new_name);
	return (0);
}

X509_NAME_ENTRY *
X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
    const char *field, int type, const unsigned char *bytes, int len)
{
	ASN1_OBJECT *obj;
	X509_NAME_ENTRY *nentry;

	obj = OBJ_txt2obj(field, 0);
	if (obj == NULL) {
		X509error(X509_R_INVALID_FIELD_NAME);
		ERR_asprintf_error_data("name=%s", field);
		return (NULL);
	}
	nentry = X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len);
	ASN1_OBJECT_free(obj);
	return nentry;
}

X509_NAME_ENTRY *
X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid, int type,
    unsigned char *bytes, int len)
{
	ASN1_OBJECT *obj;
	X509_NAME_ENTRY *nentry;

	obj = OBJ_nid2obj(nid);
	if (obj == NULL) {
		X509error(X509_R_UNKNOWN_NID);
		return (NULL);
	}
	nentry = X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len);
	ASN1_OBJECT_free(obj);
	return nentry;
}

X509_NAME_ENTRY *
X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne, ASN1_OBJECT *obj, int type,
    const unsigned char *bytes, int len)
{
	X509_NAME_ENTRY *ret;

	if ((ne == NULL) || (*ne == NULL)) {
		if ((ret = X509_NAME_ENTRY_new()) == NULL)
			return (NULL);
	} else
		ret= *ne;

	if (!X509_NAME_ENTRY_set_object(ret, obj))
		goto err;
	if (!X509_NAME_ENTRY_set_data(ret, type, bytes, len))
		goto err;

	if ((ne != NULL) && (*ne == NULL))
		*ne = ret;
	return (ret);

err:
	if ((ne == NULL) || (ret != *ne))
		X509_NAME_ENTRY_free(ret);
	return (NULL);
}

int
X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, ASN1_OBJECT *obj)
{
	if ((ne == NULL) || (obj == NULL)) {
		X509error(ERR_R_PASSED_NULL_PARAMETER);
		return (0);
	}
	ASN1_OBJECT_free(ne->object);
	ne->object = OBJ_dup(obj);
	return ((ne->object == NULL) ? 0 : 1);
}

int
X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
    const unsigned char *bytes, int len)
{
	int i;

	if ((ne == NULL) || ((bytes == NULL) && (len != 0)))
		return (0);
	if ((type > 0) && (type & MBSTRING_FLAG))
		return ASN1_STRING_set_by_NID(&ne->value, bytes, len, type,
		    OBJ_obj2nid(ne->object)) ? 1 : 0;
	if (len < 0)
		len = strlen((const char *)bytes);
	i = ASN1_STRING_set(ne->value, bytes, len);
	if (!i)
		return (0);
	if (type != V_ASN1_UNDEF) {
		if (type == V_ASN1_APP_CHOOSE)
			ne->value->type = ASN1_PRINTABLE_type(bytes, len);
		else
			ne->value->type = type;
	}
	return (1);
}

ASN1_OBJECT *
X509_NAME_ENTRY_get_object(X509_NAME_ENTRY *ne)
{
	if (ne == NULL)
		return (NULL);
	return (ne->object);
}

ASN1_STRING *
X509_NAME_ENTRY_get_data(X509_NAME_ENTRY *ne)
{
	if (ne == NULL)
		return (NULL);
	return (ne->value);
}
@


1.13
log
@X509_NAME_get_text_by_OBJ(): make sure we do not pass a negative size to
memcpy().
ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509name.c,v 1.12 2014/07/11 08:44:49 jsing Exp $ */
d278 1
a278 1
		X509err(X509_F_X509_NAME_ADD_ENTRY, ERR_R_MALLOC_FAILURE);
d303 1
a303 2
		X509err(X509_F_X509_NAME_ENTRY_CREATE_BY_TXT,
		    X509_R_INVALID_FIELD_NAME);
d321 1
a321 2
		X509err(X509_F_X509_NAME_ENTRY_CREATE_BY_NID,
		    X509_R_UNKNOWN_NID);
d360 1
a360 2
		X509err(X509_F_X509_NAME_ENTRY_SET_OBJECT,
		    ERR_R_PASSED_NULL_PARAMETER);
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509name.c,v 1.11 2014/07/10 13:58:23 jsing Exp $ */
d94 4
a97 2
	memcpy(buf, data->data, i);
	buf[i] = '\0';
@


1.11
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x509name.c,v 1.10 2014/06/12 15:49:31 deraadt Exp $ */
a61 2
#include <openssl/stack.h>
#include "cryptlib.h"
d63 2
d66 1
a66 1
#include <openssl/evp.h>
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
@


1.9
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d1 1
a1 1
/* crypto/x509/x509name.c */
@


1.8
log
@KNF.
@
text
@d301 1
a301 1
		ERR_add_error_data(2, "name=", field);
@


1.7
log
@blunt force knf
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d67 2
a68 1
int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len)
d72 4
a75 3
	obj=OBJ_nid2obj(nid);
	if (obj == NULL) return(-1);
	return(X509_NAME_get_text_by_OBJ(name,obj,buf,len));
d78 3
a80 2
int X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, char *buf,
	     int len)
d85 18
a102 8
	i=X509_NAME_get_index_by_OBJ(name,obj,-1);
	if (i < 0) return(-1);
	data=X509_NAME_ENTRY_get_data(X509_NAME_get_entry(name,i));
	i=(data->length > (len-1))?(len-1):data->length;
	if (buf == NULL) return(data->length);
	memcpy(buf,data->data,i);
	buf[i]='\0';
	return(i);
d105 2
a106 7
int X509_NAME_entry_count(X509_NAME *name)
{
	if (name == NULL) return(0);
	return(sk_X509_NAME_ENTRY_num(name->entries));
}

int X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos)
d110 4
a113 3
	obj=OBJ_nid2obj(nid);
	if (obj == NULL) return(-2);
	return(X509_NAME_get_index_by_OBJ(name,obj,lastpos));
d117 2
a118 2
int X509_NAME_get_index_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj,
	     int lastpos)
d124 2
a125 1
	if (name == NULL) return(-1);
d127 3
a129 3
		lastpos= -1;
	sk=name->entries;
	n=sk_X509_NAME_ENTRY_num(sk);
d131 3
a133 3
		ne=sk_X509_NAME_ENTRY_value(sk,lastpos);
		if (OBJ_cmp(ne->object,obj) == 0)
			return(lastpos);
d135 1
a135 1
	return(-1);
d138 2
a139 1
X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *name, int loc)
d141 3
a143 3
	if(name == NULL || sk_X509_NAME_ENTRY_num(name->entries) <= loc
	   || loc < 0)
		return(NULL);
d145 1
a145 1
		return(sk_X509_NAME_ENTRY_value(name->entries,loc));
d148 2
a149 1
X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc)
d152 1
a152 1
	int i,n,set_prev,set_next;
d155 9
a163 8
	if (name == NULL || sk_X509_NAME_ENTRY_num(name->entries) <= loc
	    || loc < 0)
		return(NULL);
	sk=name->entries;
	ret=sk_X509_NAME_ENTRY_delete(sk,loc);
	n=sk_X509_NAME_ENTRY_num(sk);
	name->modified=1;
	if (loc == n) return(ret);
d167 1
a167 1
		set_prev=(sk_X509_NAME_ENTRY_value(sk,loc-1))->set;
d169 2
a170 2
		set_prev=ret->set-1;
	set_next=sk_X509_NAME_ENTRY_value(sk,loc)->set;
d180 4
a183 4
	if (set_prev+1 < set_next)
		for (i=loc; i<n; i++)
			sk_X509_NAME_ENTRY_value(sk,i)->set--;
	return(ret);
d186 3
a188 2
int X509_NAME_add_entry_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int type,
			unsigned char *bytes, int len, int loc, int set)
d192 1
d194 2
a195 1
	if(!ne) return 0;
d201 3
a203 2
int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
			unsigned char *bytes, int len, int loc, int set)
d207 1
d209 2
a210 1
	if(!ne) return 0;
d216 3
a218 2
int X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
			const unsigned char *bytes, int len, int loc, int set)
d222 1
d224 2
a225 1
	if(!ne) return 0;
d233 2
a234 2
int X509_NAME_add_entry(X509_NAME *name, X509_NAME_ENTRY *ne, int loc,
	     int set)
d236 2
a237 2
	X509_NAME_ENTRY *new_name=NULL;
	int n,i,inc;
d240 8
a247 5
	if (name == NULL) return(0);
	sk=name->entries;
	n=sk_X509_NAME_ENTRY_num(sk);
	if (loc > n) loc=n;
	else if (loc < 0) loc=n;
d249 1
a249 1
	name->modified=1;
d253 2
a254 2
			set=0;
			inc=1;
d256 2
a257 2
			set=sk_X509_NAME_ENTRY_value(sk,loc-1)->set;
			inc=0;
d262 1
a262 1
				set=sk_X509_NAME_ENTRY_value(sk,loc-1)->set+1;
d264 1
a264 1
				set=0;
d266 2
a267 2
			set=sk_X509_NAME_ENTRY_value(sk,loc)->set;
		inc=(set == 0)?1:0;
d270 1
a270 1
	if ((new_name=X509_NAME_ENTRY_dup(ne)) == NULL)
d272 3
a274 3
	new_name->set=set;
	if (!sk_X509_NAME_ENTRY_insert(sk,new_name,loc)) {
		X509err(X509_F_X509_NAME_ADD_ENTRY,ERR_R_MALLOC_FAILURE);
d278 6
a283 5
		n=sk_X509_NAME_ENTRY_num(sk);
		for (i=loc+1; i<n; i++)
			sk_X509_NAME_ENTRY_value(sk,i-1)->set+=1;
	}	
	return(1);
d287 1
a287 1
	return(0);
d290 3
a292 2
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
		const char *field, int type, const unsigned char *bytes, int len)
d297 1
a297 1
	obj=OBJ_txt2obj(field, 0);
d300 1
a300 1
						X509_R_INVALID_FIELD_NAME);
d302 1
a302 1
		return(NULL);
d304 1
a304 1
	nentry = X509_NAME_ENTRY_create_by_OBJ(ne,obj,type,bytes,len);
d309 3
a311 2
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
	     int type, unsigned char *bytes, int len)
d316 1
a316 1
	obj=OBJ_nid2obj(nid);
d318 3
a320 2
		X509err(X509_F_X509_NAME_ENTRY_CREATE_BY_NID,X509_R_UNKNOWN_NID);
		return(NULL);
d322 1
a322 1
	nentry = X509_NAME_ENTRY_create_by_OBJ(ne,obj,type,bytes,len);
d327 3
a329 2
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
	     ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len)
d334 2
a335 2
		if ((ret=X509_NAME_ENTRY_new()) == NULL)
			return(NULL);
d339 1
a339 1
	if (!X509_NAME_ENTRY_set_object(ret,obj))
d341 1
a341 1
	if (!X509_NAME_ENTRY_set_data(ret,type,bytes,len))
d344 4
a347 2
	if ((ne != NULL) && (*ne == NULL)) *ne=ret;
	return(ret);
d351 1
a351 1
	return(NULL);
d354 2
a355 1
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, ASN1_OBJECT *obj)
d358 3
a360 2
		X509err(X509_F_X509_NAME_ENTRY_SET_OBJECT,ERR_R_PASSED_NULL_PARAMETER);
		return(0);
d363 2
a364 2
	ne->object=OBJ_dup(obj);
	return((ne->object == NULL)?0:1);
d367 3
a369 2
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
	     const unsigned char *bytes, int len)
d373 10
a382 8
	if ((ne == NULL) || ((bytes == NULL) && (len != 0))) return(0);
	if((type > 0) && (type & MBSTRING_FLAG)) 
		return ASN1_STRING_set_by_NID(&ne->value, bytes,
						len, type,
					OBJ_obj2nid(ne->object)) ? 1 : 0;
	if (len < 0) len=strlen((const char *)bytes);
	i=ASN1_STRING_set(ne->value,bytes,len);
	if (!i) return(0);
d385 1
a385 1
			ne->value->type=ASN1_PRINTABLE_type(bytes,len);
d387 1
a387 1
			ne->value->type=type;
d389 1
a389 1
	return(1);
d392 2
a393 1
ASN1_OBJECT *X509_NAME_ENTRY_get_object(X509_NAME_ENTRY *ne)
d395 3
a397 2
	if (ne == NULL) return(NULL);
	return(ne->object);
d400 2
a401 1
ASN1_STRING *X509_NAME_ENTRY_get_data(X509_NAME_ENTRY *ne)
d403 3
a405 2
	if (ne == NULL) return(NULL);
	return(ne->value);
a406 1

@


1.6
log
@resolve conflicts, fix local changes
@
text
@d68 1
a68 1
	{
d74 1
a74 1
	}
d78 1
a78 1
	{
d90 1
a90 1
	}
d93 1
a93 1
	{
d96 1
a96 1
	}
d99 1
a99 1
	{
d105 1
a105 1
	}
d110 1
a110 1
	{
d120 1
a120 2
	for (lastpos++; lastpos < n; lastpos++)
		{
d124 1
a124 1
		}
d126 1
a126 1
	}
d129 1
a129 1
	{
d135 1
a135 1
	}
d138 1
a138 1
	{
d171 1
a171 1
	}
d213 1
a213 1
	{
d226 2
a227 4
	if (set == -1)
		{
		if (loc == 0)
			{
d230 1
a230 3
			}
		else
			{
a232 1
			}
d234 2
a235 4
	else /* if (set >= 0) */
		{
		if (loc >= n)
			{
d240 1
a240 2
			}
		else
d243 1
a243 1
		}
d248 1
a248 2
	if (!sk_X509_NAME_ENTRY_insert(sk,new_name,loc))
		{
d251 2
a252 3
		}
	if (inc)
		{
d256 1
a256 1
		}	
d262 1
a262 1
	}
d266 1
a266 1
	{
d271 1
a271 2
	if (obj == NULL)
		{
d276 1
a276 1
		}
d280 1
a280 1
	}
d284 1
a284 1
	{
d289 1
a289 2
	if (obj == NULL)
		{
d292 1
a292 1
		}
d296 1
a296 1
	}
d300 1
a300 1
	{
d303 1
a303 2
	if ((ne == NULL) || (*ne == NULL))
		{
d306 1
a306 2
		}
	else
d320 1
a320 1
	}
d323 2
a324 3
	{
	if ((ne == NULL) || (obj == NULL))
		{
d327 1
a327 1
		}
d331 1
a331 1
	}
d335 1
a335 1
	{
d346 1
a346 2
	if (type != V_ASN1_UNDEF)
		{
d351 1
a351 1
		}
d353 1
a353 1
	}
d356 1
a356 1
	{
d359 1
a359 1
	}
d362 1
a362 1
	{
d365 1
a365 1
	}
@


1.5
log
@resolve conflicts
@
text
@d359 1
a359 1
	if (len < 0) len=strlen((char *)bytes);
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d198 2
a199 2
int X509_NAME_add_entry_by_txt(X509_NAME *name, char *field, int type,
			unsigned char *bytes, int len, int loc, int set)
d276 1
a276 1
		char *field, int type, unsigned char *bytes, int len)
d312 1
a312 1
	     ASN1_OBJECT *obj, int type, unsigned char *bytes, int len)
d350 1
a350 1
	     unsigned char *bytes, int len)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d355 1
a355 1
	if(type & MBSTRING_FLAG) 
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d174 36
d275 19
d298 1
d306 3
a308 1
	return(X509_NAME_ENTRY_create_by_OBJ(ne,obj,type,bytes,len));
d328 1
a328 1
	
d355 4
@


1.1
log
@Initial revision
@
text
@d60 1
a60 1
#include "stack.h"
d62 6
a67 10
#include "asn1.h"
#include "objects.h"
#include "evp.h"
#include "x509.h"

int X509_NAME_get_text_by_NID(name,nid,buf,len)
X509_NAME *name;
int nid;
char *buf;
int len;
d76 2
a77 5
int X509_NAME_get_text_by_OBJ(name,obj,buf,len)
X509_NAME *name;
ASN1_OBJECT *obj;
char *buf;
int len;
d92 1
a92 2
int X509_NAME_entry_count(name)
X509_NAME *name;
d95 1
a95 1
	return(sk_num(name->entries));
d98 1
a98 4
int X509_NAME_get_index_by_NID(name,nid,lastpos)
X509_NAME *name;
int nid;
int lastpos;
d108 2
a109 4
int X509_NAME_get_index_by_OBJ(name,obj,lastpos)
X509_NAME *name;
ASN1_OBJECT *obj;
int lastpos;
d113 1
a113 1
	STACK *sk;
d119 1
a119 1
	n=sk_num(sk);
d122 1
a122 1
		ne=(X509_NAME_ENTRY *)sk_value(sk,lastpos);
d129 1
a129 3
X509_NAME_ENTRY *X509_NAME_get_entry(name,loc)
X509_NAME *name;
int loc;
d131 2
a132 1
	if (	(name == NULL) || (sk_num(name->entries) <= loc) || (loc < 0))
d135 1
a135 1
		return((X509_NAME_ENTRY *)sk_value(name->entries,loc));
d138 1
a138 3
X509_NAME_ENTRY *X509_NAME_delete_entry(name,loc)
X509_NAME *name;
int loc;
d141 2
a142 2
	int i,j,n,set_prev,set_next;
	STACK *sk;
d144 2
a145 1
	if ((name == NULL) || (sk_num(name->entries) <= loc) || (loc < 0))
d148 2
a149 2
	ret=(X509_NAME_ENTRY *)sk_delete(sk,loc);
	n=sk_num(sk);
d155 1
a155 1
		set_prev=((X509_NAME_ENTRY *)sk_value(sk,loc-1))->set;
d158 1
a158 1
	set_next=((X509_NAME_ENTRY *)sk_value(sk,loc))->set;
a168 2
		{
		j=set_next-set_prev-1;
d170 1
a170 2
			((X509_NAME_ENTRY *)sk_value(sk,loc-1))->set-=j;
		}
d176 2
a177 5
int X509_NAME_add_entry(name,ne,loc,set)
X509_NAME *name;
X509_NAME_ENTRY *ne;
int loc;
int set;
d181 1
a181 1
	STACK *sk;
d185 1
a185 1
	n=sk_num(sk);
d200 1
a200 1
			set=((X509_NAME_ENTRY *)sk_value(sk,loc-1))->set;
d209 1
a209 2
				set=((X509_NAME_ENTRY *)
					sk_value(sk,loc-1))->set+1;
d214 1
a214 1
			set=((X509_NAME_ENTRY *)sk_value(sk,loc))->set;
d221 1
a221 1
	if (!sk_insert(sk,(char *)new_name,loc))
d228 1
a228 1
		n=sk_num(sk);
d230 1
a230 1
			((X509_NAME_ENTRY *)sk_value(sk,i-1))->set+=1;
d235 1
a235 1
		X509_NAME_ENTRY_free(ne);
d239 2
a240 6
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(ne,nid,type,bytes,len)
X509_NAME_ENTRY **ne;
int nid;
int type;
unsigned char *bytes;
int len;
d253 2
a254 6
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(ne,obj,type,bytes,len)
X509_NAME_ENTRY **ne;
ASN1_OBJECT *obj;
int type;
unsigned char *bytes;
int len;
d279 1
a279 3
int X509_NAME_ENTRY_set_object(ne,obj)
X509_NAME_ENTRY *ne;
ASN1_OBJECT *obj;
d291 2
a292 5
int X509_NAME_ENTRY_set_data(ne,type,bytes,len)
X509_NAME_ENTRY *ne;
int type;
unsigned char *bytes;
int len;
d310 1
a310 2
ASN1_OBJECT *X509_NAME_ENTRY_get_object(ne)
X509_NAME_ENTRY *ne;
d316 1
a316 2
ASN1_STRING *X509_NAME_ENTRY_get_data(ne)
X509_NAME_ENTRY *ne;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 1
a60 1
#include <openssl/stack.h>
d62 10
a71 6
#include <openssl/asn1.h>
#include <openssl/objects.h>
#include <openssl/evp.h>
#include <openssl/x509.h>

int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len)
d80 5
a84 2
int X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, char *buf,
	     int len)
d99 2
a100 1
int X509_NAME_entry_count(X509_NAME *name)
d103 1
a103 1
	return(sk_X509_NAME_ENTRY_num(name->entries));
d106 4
a109 1
int X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos)
d119 4
a122 2
int X509_NAME_get_index_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj,
	     int lastpos)
d126 1
a126 1
	STACK_OF(X509_NAME_ENTRY) *sk;
d132 1
a132 1
	n=sk_X509_NAME_ENTRY_num(sk);
d135 1
a135 1
		ne=sk_X509_NAME_ENTRY_value(sk,lastpos);
d142 3
a144 1
X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *name, int loc)
d146 1
a146 2
	if(name == NULL || sk_X509_NAME_ENTRY_num(name->entries) <= loc
	   || loc < 0)
d149 1
a149 1
		return(sk_X509_NAME_ENTRY_value(name->entries,loc));
d152 3
a154 1
X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc)
d157 2
a158 2
	int i,n,set_prev,set_next;
	STACK_OF(X509_NAME_ENTRY) *sk;
d160 1
a160 2
	if (name == NULL || sk_X509_NAME_ENTRY_num(name->entries) <= loc
	    || loc < 0)
d163 2
a164 2
	ret=sk_X509_NAME_ENTRY_delete(sk,loc);
	n=sk_X509_NAME_ENTRY_num(sk);
d170 1
a170 1
		set_prev=(sk_X509_NAME_ENTRY_value(sk,loc-1))->set;
d173 1
a173 1
	set_next=sk_X509_NAME_ENTRY_value(sk,loc)->set;
d184 2
d187 2
a188 1
			sk_X509_NAME_ENTRY_value(sk,i)->set--;
a191 36
int X509_NAME_add_entry_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int type,
			unsigned char *bytes, int len, int loc, int set)
{
	X509_NAME_ENTRY *ne;
	int ret;
	ne = X509_NAME_ENTRY_create_by_OBJ(NULL, obj, type, bytes, len);
	if(!ne) return 0;
	ret = X509_NAME_add_entry(name, ne, loc, set);
	X509_NAME_ENTRY_free(ne);
	return ret;
}

int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
			unsigned char *bytes, int len, int loc, int set)
{
	X509_NAME_ENTRY *ne;
	int ret;
	ne = X509_NAME_ENTRY_create_by_NID(NULL, nid, type, bytes, len);
	if(!ne) return 0;
	ret = X509_NAME_add_entry(name, ne, loc, set);
	X509_NAME_ENTRY_free(ne);
	return ret;
}

int X509_NAME_add_entry_by_txt(X509_NAME *name, char *field, int type,
			unsigned char *bytes, int len, int loc, int set)
{
	X509_NAME_ENTRY *ne;
	int ret;
	ne = X509_NAME_ENTRY_create_by_txt(NULL, field, type, bytes, len);
	if(!ne) return 0;
	ret = X509_NAME_add_entry(name, ne, loc, set);
	X509_NAME_ENTRY_free(ne);
	return ret;
}

d194 5
a198 2
int X509_NAME_add_entry(X509_NAME *name, X509_NAME_ENTRY *ne, int loc,
	     int set)
d202 1
a202 1
	STACK_OF(X509_NAME_ENTRY) *sk;
d206 1
a206 1
	n=sk_X509_NAME_ENTRY_num(sk);
d221 1
a221 1
			set=sk_X509_NAME_ENTRY_value(sk,loc-1)->set;
d230 2
a231 1
				set=sk_X509_NAME_ENTRY_value(sk,loc-1)->set+1;
d236 1
a236 1
			set=sk_X509_NAME_ENTRY_value(sk,loc)->set;
d243 1
a243 1
	if (!sk_X509_NAME_ENTRY_insert(sk,new_name,loc))
d250 1
a250 1
		n=sk_X509_NAME_ENTRY_num(sk);
d252 1
a252 1
			sk_X509_NAME_ENTRY_value(sk,i-1)->set+=1;
d257 1
a257 1
		X509_NAME_ENTRY_free(new_name);
d261 6
a266 2
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
		char *field, int type, unsigned char *bytes, int len)
a268 20
	X509_NAME_ENTRY *nentry;

	obj=OBJ_txt2obj(field, 0);
	if (obj == NULL)
		{
		X509err(X509_F_X509_NAME_ENTRY_CREATE_BY_TXT,
						X509_R_INVALID_FIELD_NAME);
		ERR_add_error_data(2, "name=", field);
		return(NULL);
		}
	nentry = X509_NAME_ENTRY_create_by_OBJ(ne,obj,type,bytes,len);
	ASN1_OBJECT_free(obj);
	return nentry;
	}

X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
	     int type, unsigned char *bytes, int len)
	{
	ASN1_OBJECT *obj;
	X509_NAME_ENTRY *nentry;
d276 1
a276 3
	nentry = X509_NAME_ENTRY_create_by_OBJ(ne,obj,type,bytes,len);
	ASN1_OBJECT_free(obj);
	return nentry;
d279 6
a284 2
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
	     ASN1_OBJECT *obj, int type, unsigned char *bytes, int len)
d300 1
a300 1

d309 3
a311 1
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, ASN1_OBJECT *obj)
d323 5
a327 2
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
	     unsigned char *bytes, int len)
a331 4
	if((type > 0) && (type & MBSTRING_FLAG)) 
		return ASN1_STRING_set_by_NID(&ne->value, bytes,
						len, type,
					OBJ_obj2nid(ne->object)) ? 1 : 0;
d345 2
a346 1
ASN1_OBJECT *X509_NAME_ENTRY_get_object(X509_NAME_ENTRY *ne)
d352 2
a353 1
ASN1_STRING *X509_NAME_ENTRY_get_data(X509_NAME_ENTRY *ne)
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d198 2
a199 2
int X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
			const unsigned char *bytes, int len, int loc, int set)
d276 1
a276 1
		const char *field, int type, const unsigned char *bytes, int len)
d312 1
a312 1
	     ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len)
d350 1
a350 1
	     const unsigned char *bytes, int len)
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d359 1
a359 1
	if (len < 0) len=strlen((const char *)bytes);
@


