head	1.24;
access;
symbols
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24;
locks; strict;
comment	@ * @;


1.24
date	2017.03.03.10.39.07;	author inoguchi;	state Exp;
branches;
next	1.23;
commitid	Cxhnfgy9e7a7cW7w;

1.23
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.22;
commitid	kT0fLt3r4lroFJra;

1.22
date	2015.02.10.09.52.35;	author miod;	state Exp;
branches;
next	1.21;
commitid	elQcISUWkrkujoI4;

1.21
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.20;
commitid	yQEL1wOWIearrW15;

1.20
date	2014.06.21.13.39.46;	author jsing;	state Exp;
branches;
next	1.19;
commitid	yihLLT3NbSsZKu0x;

1.19
date	2014.06.21.12.00.01;	author miod;	state Exp;
branches;
next	1.18;
commitid	rSPuzesbBEbO1k45;

1.18
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.04.15.20.06.10;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.01.22.58.55;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.05.21.36.38;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.27.05.07.01;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.29.05.39.22;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.02.18.37;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.17.13.08.04;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.03.21.53.39;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.14;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.39;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.10.25;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.17;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.47;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.47;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.30;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.35.23;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.11;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.06.27.05.05.34;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.44;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.01.09.12.13.56;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2011.11.03.02.32.11;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2012.10.13.21.23.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Ensure MD and key initialized before processing HMAC

Ensure both MD and key have been initialized before processing HMAC.
Releasing HMAC_CTX in error path of HMAC().
In regress test, added test 4,5,6 and cleaned up the code.

ok jsing@@
@
text
@/* $OpenBSD: hmac.c,v 1.23 2017/01/29 17:49:23 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/hmac.h>

int
HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md,
    ENGINE *impl)
{
	int i, j, reset = 0;
	unsigned char pad[HMAC_MAX_MD_CBLOCK];

	/* If we are changing MD then we must have a key */
	if (md != NULL && md != ctx->md && (key == NULL || len < 0))
		return 0;

	if (md != NULL) {
		reset = 1;
		ctx->md = md;
	} else if (ctx->md != NULL)
		md = ctx->md;
	else
		return 0;

	if (key != NULL) {
		reset = 1;
		j = EVP_MD_block_size(md);
		if ((size_t)j > sizeof(ctx->key)) {
			EVPerror(EVP_R_BAD_BLOCK_LENGTH);
			goto err;
		}
		if (j < len) {
			if (!EVP_DigestInit_ex(&ctx->md_ctx, md, impl))
				goto err;
			if (!EVP_DigestUpdate(&ctx->md_ctx, key, len))
				goto err;
			if (!EVP_DigestFinal_ex(&(ctx->md_ctx), ctx->key,
			    &ctx->key_length))
				goto err;
		} else {
			if (len < 0 || (size_t)len > sizeof(ctx->key)) {
				EVPerror(EVP_R_BAD_KEY_LENGTH);
				goto err;
			}
			memcpy(ctx->key, key, len);
			ctx->key_length = len;
		}
		if (ctx->key_length != HMAC_MAX_MD_CBLOCK)
			memset(&ctx->key[ctx->key_length], 0,
			    HMAC_MAX_MD_CBLOCK - ctx->key_length);
	}

	if (reset) {
		for (i = 0; i < HMAC_MAX_MD_CBLOCK; i++)
			pad[i] = 0x36 ^ ctx->key[i];
		if (!EVP_DigestInit_ex(&ctx->i_ctx, md, impl))
			goto err;
		if (!EVP_DigestUpdate(&ctx->i_ctx, pad, EVP_MD_block_size(md)))
			goto err;

		for (i = 0; i < HMAC_MAX_MD_CBLOCK; i++)
			pad[i] = 0x5c ^ ctx->key[i];
		if (!EVP_DigestInit_ex(&ctx->o_ctx, md, impl))
			goto err;
		if (!EVP_DigestUpdate(&ctx->o_ctx, pad, EVP_MD_block_size(md)))
			goto err;
	}
	if (!EVP_MD_CTX_copy_ex(&ctx->md_ctx, &ctx->i_ctx))
		goto err;
	return 1;
err:
	return 0;
}

int
HMAC_Init(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md)
{
	if (key && md)
		HMAC_CTX_init(ctx);
	return HMAC_Init_ex(ctx, key, len, md, NULL);
}

int
HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len)
{
	if (ctx->md == NULL)
		return 0;

	return EVP_DigestUpdate(&ctx->md_ctx, data, len);
}

int
HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)
{
	unsigned int i;
	unsigned char buf[EVP_MAX_MD_SIZE];

	if (ctx->md == NULL)
		goto err;

	if (!EVP_DigestFinal_ex(&ctx->md_ctx, buf, &i))
		goto err;
	if (!EVP_MD_CTX_copy_ex(&ctx->md_ctx, &ctx->o_ctx))
		goto err;
	if (!EVP_DigestUpdate(&ctx->md_ctx, buf, i))
		goto err;
	if (!EVP_DigestFinal_ex(&ctx->md_ctx, md, len))
		goto err;
	return 1;
err:
	return 0;
}

void
HMAC_CTX_init(HMAC_CTX *ctx)
{
	EVP_MD_CTX_init(&ctx->i_ctx);
	EVP_MD_CTX_init(&ctx->o_ctx);
	EVP_MD_CTX_init(&ctx->md_ctx);
	ctx->md = NULL;
}

int
HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx)
{
	if (!EVP_MD_CTX_copy(&dctx->i_ctx, &sctx->i_ctx))
		goto err;
	if (!EVP_MD_CTX_copy(&dctx->o_ctx, &sctx->o_ctx))
		goto err;
	if (!EVP_MD_CTX_copy(&dctx->md_ctx, &sctx->md_ctx))
		goto err;
	memcpy(dctx->key, sctx->key, HMAC_MAX_MD_CBLOCK);
	dctx->key_length = sctx->key_length;
	dctx->md = sctx->md;
	return 1;
err:
	return 0;
}

void
HMAC_CTX_cleanup(HMAC_CTX *ctx)
{
	EVP_MD_CTX_cleanup(&ctx->i_ctx);
	EVP_MD_CTX_cleanup(&ctx->o_ctx);
	EVP_MD_CTX_cleanup(&ctx->md_ctx);
	explicit_bzero(ctx, sizeof(*ctx));
}

unsigned char *
HMAC(const EVP_MD *evp_md, const void *key, int key_len, const unsigned char *d,
    size_t n, unsigned char *md, unsigned int *md_len)
{
	HMAC_CTX c;
	static unsigned char m[EVP_MAX_MD_SIZE];

	if (md == NULL)
		md = m;
	HMAC_CTX_init(&c);
	if (!HMAC_Init(&c, key, key_len, evp_md))
		goto err;
	if (!HMAC_Update(&c, d, n))
		goto err;
	if (!HMAC_Final(&c, md, md_len))
		goto err;
	HMAC_CTX_cleanup(&c);
	return md;
err:
	HMAC_CTX_cleanup(&c);
	return NULL;
}

void
HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags)
{
	EVP_MD_CTX_set_flags(&ctx->i_ctx, flags);
	EVP_MD_CTX_set_flags(&ctx->o_ctx, flags);
	EVP_MD_CTX_set_flags(&ctx->md_ctx, flags);
}
@


1.23
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: hmac.c,v 1.22 2015/02/10 09:52:35 miod Exp $ */
d73 4
d80 1
a80 1
	} else
d82 2
d101 1
a101 1
			if ((size_t)len > sizeof(ctx->key)) {
d146 3
d158 3
d180 1
d206 1
a206 1
	memset(ctx, 0, sizeof *ctx);
d228 1
@


1.22
log
@Replace assert() and OPENSSL_assert() calls with proper error return paths.
Careful review, feedback & ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: hmac.c,v 1.21 2014/07/11 08:44:48 jsing Exp $ */
d83 1
a83 1
			EVPerr(EVP_F_HMAC_INIT_EX, EVP_R_BAD_BLOCK_LENGTH);
d96 1
a96 2
				EVPerr(EVP_F_HMAC_INIT_EX,
				    EVP_R_BAD_KEY_LENGTH);
@


1.21
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: hmac.c,v 1.20 2014/06/21 13:39:46 jsing Exp $ */
d63 1
d82 4
a85 1
		OPENSSL_assert(j <= (int)sizeof(ctx->key));
d95 5
a99 2
			OPENSSL_assert(len >= 0 &&
			    len <= (int)sizeof(ctx->key));
@


1.20
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: hmac.c,v 1.19 2014/06/21 12:00:01 miod Exp $ */
d58 1
d62 1
a62 1
#include "cryptlib.h"
@


1.19
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: hmac.c,v 1.18 2014/06/12 15:49:29 deraadt Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d87 1
a87 1
				&ctx->key_length))
d90 3
a92 2
			OPENSSL_assert(len>=0 && len<=(int)sizeof(ctx->key));
			memcpy(ctx->key,key,len);
d98 1
a98 1
		}
d126 2
a127 2
	    HMAC_CTX_init(ctx);
	return HMAC_Init_ex(ctx,key,len,md, NULL);
d133 1
a133 1
	return EVP_DigestUpdate(&ctx->md_ctx,data,len);
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 5
a68 4
int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
		  const EVP_MD *md, ENGINE *impl)
	{
	int i,j,reset=0;
d71 9
a79 12
	if (md != NULL)
		{
		reset=1;
		ctx->md=md;
		}
	else
		md=ctx->md;

	if (key != NULL)
		{
		reset=1;
		j=EVP_MD_block_size(md);
d81 2
a82 3
		if (j < len)
			{
			if (!EVP_DigestInit_ex(&ctx->md_ctx,md, impl))
d84 1
a84 1
			if (!EVP_DigestUpdate(&ctx->md_ctx,key,len))
d86 1
a86 1
			if (!EVP_DigestFinal_ex(&(ctx->md_ctx),ctx->key,
d89 1
a89 3
			}
		else
			{
d92 3
a94 3
			ctx->key_length=len;
			}
		if(ctx->key_length != HMAC_MAX_MD_CBLOCK)
d96 1
a96 1
				HMAC_MAX_MD_CBLOCK - ctx->key_length);
d99 4
a102 5
	if (reset)	
		{
		for (i=0; i<HMAC_MAX_MD_CBLOCK; i++)
			pad[i]=0x36^ctx->key[i];
		if (!EVP_DigestInit_ex(&ctx->i_ctx,md, impl))
d104 1
a104 1
		if (!EVP_DigestUpdate(&ctx->i_ctx,pad,EVP_MD_block_size(md)))
d107 3
a109 3
		for (i=0; i<HMAC_MAX_MD_CBLOCK; i++)
			pad[i]=0x5c^ctx->key[i];
		if (!EVP_DigestInit_ex(&ctx->o_ctx,md, impl))
d111 1
a111 4
		if (!EVP_DigestUpdate(&ctx->o_ctx,pad,EVP_MD_block_size(md)))
			goto err;
		}
	if (!EVP_MD_CTX_copy_ex(&ctx->md_ctx,&ctx->i_ctx))
d113 3
d117 1
a117 1
	err:
d119 1
a119 1
	}
d121 4
a124 3
int HMAC_Init(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md)
	{
	if(key && md)
d127 1
a127 1
	}
d129 3
a131 2
int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len)
	{
d133 1
a133 1
	}
d135 3
a137 2
int HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)
	{
d141 1
a141 1
	if (!EVP_DigestFinal_ex(&ctx->md_ctx,buf,&i))
d143 1
a143 1
	if (!EVP_MD_CTX_copy_ex(&ctx->md_ctx,&ctx->o_ctx))
d145 1
a145 1
	if (!EVP_DigestUpdate(&ctx->md_ctx,buf,i))
d147 1
a147 1
	if (!EVP_DigestFinal_ex(&ctx->md_ctx,md,len))
d150 1
a150 1
	err:
d152 1
a152 1
	}
d154 3
a156 2
void HMAC_CTX_init(HMAC_CTX *ctx)
	{
d160 1
a160 1
	}
d162 3
a164 2
int HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx)
	{
d175 1
a175 1
	err:
d177 1
a177 1
	}
d179 3
a181 2
void HMAC_CTX_cleanup(HMAC_CTX *ctx)
	{
d185 2
a186 2
	memset(ctx,0,sizeof *ctx);
	}
d188 4
a191 4
unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,
		    const unsigned char *d, size_t n, unsigned char *md,
		    unsigned int *md_len)
	{
d195 2
a196 1
	if (md == NULL) md=m;
d198 1
a198 1
	if (!HMAC_Init(&c,key,key_len,evp_md))
d200 1
a200 1
	if (!HMAC_Update(&c,d,n))
d202 1
a202 1
	if (!HMAC_Final(&c,md,md_len))
d206 1
a206 1
	err:
d208 1
a208 1
	}
d210 3
a212 2
void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags)
	{
d216 1
a216 1
	}
@


1.17
log
@remove FIPS mode support. people who require FIPS can buy something that
meets their needs, but dumping it in here only penalizes the rest of us.
ok beck deraadt
@
text
@d1 1
a1 1
/* crypto/hmac/hmac.c */
@


1.16
log
@resolve conflicts
@
text
@a63 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a69 18
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		{
		/* If we have an ENGINE need to allow non FIPS */
		if ((impl || ctx->i_ctx.engine)
			&&  !(ctx->i_ctx.flags & EVP_CIPH_FLAG_NON_FIPS_ALLOW))
			{
			EVPerr(EVP_F_HMAC_INIT_EX, EVP_R_DISABLED_FOR_FIPS);
			return 0;
			}
		/* Other algorithm blocking will be done in FIPS_cmac_init,
		 * via FIPS_hmac_init_ex().
		 */
		if (!impl && !ctx->i_ctx.engine)
			return FIPS_hmac_init_ex(ctx, key, len, md, NULL);
		}
#endif

a135 4
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !ctx->i_ctx.engine)
		return FIPS_hmac_update(ctx, data, len);
#endif
a142 4
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !ctx->i_ctx.engine)
		return FIPS_hmac_final(ctx, md, len);
#endif
a181 7
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !ctx->i_ctx.engine)
		{
		FIPS_hmac_ctx_cleanup(ctx);
		return;
		}
#endif
@


1.15
log
@openssl-1.0.0e: resolve conflicts
@
text
@d64 4
d74 18
d158 4
d169 4
d212 7
@


1.14
log
@resolve conflicts, fix local changes
@
text
@a140 1
	int j;
a142 2

	j=EVP_MD_block_size(ctx->md);
@


1.13
log
@resolve conflicts
@
text
@d64 1
a64 3
#ifndef OPENSSL_FIPS

void HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
d85 7
a91 4
			EVP_DigestInit_ex(&ctx->md_ctx,md, impl);
			EVP_DigestUpdate(&ctx->md_ctx,key,len);
			EVP_DigestFinal_ex(&(ctx->md_ctx),ctx->key,
				&ctx->key_length);
d108 4
a111 2
		EVP_DigestInit_ex(&ctx->i_ctx,md, impl);
		EVP_DigestUpdate(&ctx->i_ctx,pad,EVP_MD_block_size(md));
d115 4
a118 2
		EVP_DigestInit_ex(&ctx->o_ctx,md, impl);
		EVP_DigestUpdate(&ctx->o_ctx,pad,EVP_MD_block_size(md));
d120 5
a124 1
	EVP_MD_CTX_copy_ex(&ctx->md_ctx,&ctx->i_ctx);
d127 1
a127 2
void HMAC_Init(HMAC_CTX *ctx, const void *key, int len,
	       const EVP_MD *md)
d131 1
a131 1
	HMAC_Init_ex(ctx,key,len,md, NULL);
d134 1
a134 1
void HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len)
d136 1
a136 1
	EVP_DigestUpdate(&ctx->md_ctx,data,len);
d139 1
a139 1
void HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)
d147 11
a157 4
	EVP_DigestFinal_ex(&ctx->md_ctx,buf,&i);
	EVP_MD_CTX_copy_ex(&ctx->md_ctx,&ctx->o_ctx);
	EVP_DigestUpdate(&ctx->md_ctx,buf,i);
	EVP_DigestFinal_ex(&ctx->md_ctx,md,len);
d167 16
d200 6
a205 3
	HMAC_Init(&c,key,key_len,evp_md);
	HMAC_Update(&c,d,n);
	HMAC_Final(&c,md,md_len);
d207 3
a209 1
	return(md);
a217 2

#endif
@


1.12
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d64 2
d183 1
@


1.11
log
@resolve conflicts
@
text
@d174 7
@


1.10
log
@resolve conflicts
@
text
@d61 1
a62 3
#include "cryptlib.h"

#ifndef OPENSSL_FIPS
d82 1
a82 1
		OPENSSL_assert(j <= sizeof ctx->key);
d92 1
a92 1
			OPENSSL_assert(len <= sizeof ctx->key);
d124 1
a124 1
void HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, int len)
d159 1
a159 1
		    const unsigned char *d, int n, unsigned char *md,
a173 8
void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags)
	{
	EVP_MD_CTX_set_flags(&ctx->i_ctx, flags);
	EVP_MD_CTX_set_flags(&ctx->o_ctx, flags);
	EVP_MD_CTX_set_flags(&ctx->md_ctx, flags);
	}

#endif
@


1.9
log
@resolve conflicts
@
text
@d64 2
a81 9
#ifdef OPENSSL_FIPS
		if (FIPS_mode() && !(md->flags & EVP_MD_FLAG_FIPS)
		&& (!(ctx->md_ctx.flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
		 || !(ctx->i_ctx.flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
		 || !(ctx->o_ctx.flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)))
		OpenSSLDie(__FILE__,__LINE__,
			"HMAC: digest not allowed in FIPS mode");
#endif
		
d183 1
@


1.8
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d80 9
d181 7
@


1.7
log
@undo local change, HMAC_Init() already does HMAC_CTX_init if(key && md)
@
text
@d62 1
d82 1
d92 1
@


1.6
log
@remove whitespace changes (keep diffs to 0.9.7-beta1 minimal)
@
text
@a72 1
		EVP_MD_CTX_init(&ctx->md_ctx);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d75 1
a75 1
	else 
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d63 2
a64 2
void HMAC_Init(HMAC_CTX *ctx, const void *key, int len,
	       const EVP_MD *md)
d73 1
d75 1
a75 1
	else
d84 1
a84 1
			EVP_DigestInit(&ctx->md_ctx,md);
d86 1
a86 1
			EVP_DigestFinal(&(ctx->md_ctx),ctx->key,
d103 1
a103 1
		EVP_DigestInit(&ctx->i_ctx,md);
d108 1
a108 1
		EVP_DigestInit(&ctx->o_ctx,md);
d111 2
d114 6
a119 1
	memcpy(&ctx->md_ctx,&ctx->i_ctx,sizeof(ctx->i_ctx));
d124 1
a124 1
	EVP_DigestUpdate(&(ctx->md_ctx),data,len);
d135 11
a145 4
	EVP_DigestFinal(&(ctx->md_ctx),buf,&i);
	memcpy(&(ctx->md_ctx),&(ctx->o_ctx),sizeof(ctx->o_ctx));
	EVP_DigestUpdate(&(ctx->md_ctx),buf,i);
	EVP_DigestFinal(&(ctx->md_ctx),md,len);
d148 1
a148 1
void HMAC_cleanup(HMAC_CTX *ctx)
d150 4
a153 1
	memset(ctx,0,sizeof(HMAC_CTX));
d164 1
d168 1
a168 1
	HMAC_cleanup(&c);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@a90 1
			memset(&(ctx->key[len]),0,sizeof(ctx->key)-len);
d93 3
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d112 1
a112 1
void HMAC_Update(HMAC_CTX *ctx, unsigned char *data, int len)
d137 1
a137 1
		    unsigned char *d, int n, unsigned char *md,
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "hmac.h"
d63 2
a64 5
void HMAC_Init(ctx,key,len,md)
HMAC_CTX *ctx;
unsigned char *key;
int len;
EVP_MD *md;
d112 1
a112 4
void HMAC_Update(ctx,data,len)
HMAC_CTX *ctx;
unsigned char *data;
int len;
d117 1
a117 4
void HMAC_Final(ctx,md,len)
HMAC_CTX *ctx;
unsigned char *md;
unsigned int *len;
d131 1
a131 2
void HMAC_cleanup(ctx)
HMAC_CTX *ctx;
d136 3
a138 8
unsigned char *HMAC(evp_md,key,key_len,d,n,md,md_len)
EVP_MD *evp_md;
unsigned char *key;
int key_len;
unsigned char *d;
int n;
unsigned char *md;
unsigned int *md_len;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/hmac.h>
d63 5
a67 2
void HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
		  const EVP_MD *md, ENGINE *impl)
d86 1
a86 1
			EVP_DigestInit_ex(&ctx->md_ctx,md, impl);
d88 1
a88 1
			EVP_DigestFinal_ex(&(ctx->md_ctx),ctx->key,
d94 1
a96 3
		if(ctx->key_length != HMAC_MAX_MD_CBLOCK)
			memset(&ctx->key[ctx->key_length], 0,
				HMAC_MAX_MD_CBLOCK - ctx->key_length);
d103 1
a103 1
		EVP_DigestInit_ex(&ctx->i_ctx,md, impl);
d108 1
a108 1
		EVP_DigestInit_ex(&ctx->o_ctx,md, impl);
a110 2
	EVP_MD_CTX_copy_ex(&ctx->md_ctx,&ctx->i_ctx);
	}
d112 1
a112 6
void HMAC_Init(HMAC_CTX *ctx, const void *key, int len,
	       const EVP_MD *md)
	{
	if(key && md)
	    HMAC_CTX_init(ctx);
	HMAC_Init_ex(ctx,key,len,md, NULL);
d115 4
a118 1
void HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, int len)
d120 1
a120 1
	EVP_DigestUpdate(&ctx->md_ctx,data,len);
d123 4
a126 1
void HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)
d134 20
a153 24
	EVP_DigestFinal_ex(&ctx->md_ctx,buf,&i);
	EVP_MD_CTX_copy_ex(&ctx->md_ctx,&ctx->o_ctx);
	EVP_DigestUpdate(&ctx->md_ctx,buf,i);
	EVP_DigestFinal_ex(&ctx->md_ctx,md,len);
	}

void HMAC_CTX_init(HMAC_CTX *ctx)
	{
	EVP_MD_CTX_init(&ctx->i_ctx);
	EVP_MD_CTX_init(&ctx->o_ctx);
	EVP_MD_CTX_init(&ctx->md_ctx);
	}

void HMAC_CTX_cleanup(HMAC_CTX *ctx)
	{
	EVP_MD_CTX_cleanup(&ctx->i_ctx);
	EVP_MD_CTX_cleanup(&ctx->o_ctx);
	EVP_MD_CTX_cleanup(&ctx->md_ctx);
	memset(ctx,0,sizeof *ctx);
	}

unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,
		    const unsigned char *d, int n, unsigned char *md,
		    unsigned int *md_len)
a158 1
	HMAC_CTX_init(&c);
d162 1
a162 1
	HMAC_CTX_cleanup(&c);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a61 1
#include "cryptlib.h"
a80 1
		OPENSSL_assert(j <= sizeof ctx->key);
a89 1
			OPENSSL_assert(len <= sizeof ctx->key);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a79 9
#ifdef OPENSSL_FIPS
		if (FIPS_mode() && !(md->flags & EVP_MD_FLAG_FIPS)
		&& (!(ctx->md_ctx.flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
		 || !(ctx->i_ctx.flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
		 || !(ctx->o_ctx.flags & EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)))
		OpenSSLDie(__FILE__,__LINE__,
			"HMAC: digest not allowed in FIPS mode");
#endif
		
a171 7
	}

void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags)
	{
	EVP_MD_CTX_set_flags(&ctx->i_ctx, flags);
	EVP_MD_CTX_set_flags(&ctx->o_ctx, flags);
	EVP_MD_CTX_set_flags(&ctx->md_ctx, flags);
@


1.1.1.5
log
@import of openssl-0.9.7j
@
text
@a63 2
#ifndef OPENSSL_FIPS

d80 9
a189 1
#endif
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d61 1
d63 2
a64 1
#include <openssl/hmac.h>
d84 1
a84 1
		OPENSSL_assert(j <= (int)sizeof(ctx->key));
d94 1
a94 1
			OPENSSL_assert(len>=0 && len<=(int)sizeof(ctx->key));
d126 1
a126 1
void HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len)
d161 1
a161 1
		    const unsigned char *d, size_t n, unsigned char *md,
d176 8
@


1.1.1.7
log
@import openssl-0.9.8j
@
text
@a63 2
#ifndef OPENSSL_FIPS

a173 8
void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags)
	{
	EVP_MD_CTX_set_flags(&ctx->i_ctx, flags);
	EVP_MD_CTX_set_flags(&ctx->o_ctx, flags);
	EVP_MD_CTX_set_flags(&ctx->md_ctx, flags);
	}

#endif
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@d64 3
a66 1
int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
d87 4
a90 7
			if (!EVP_DigestInit_ex(&ctx->md_ctx,md, impl))
				goto err;
			if (!EVP_DigestUpdate(&ctx->md_ctx,key,len))
				goto err;
			if (!EVP_DigestFinal_ex(&(ctx->md_ctx),ctx->key,
				&ctx->key_length))
				goto err;
d107 2
a108 4
		if (!EVP_DigestInit_ex(&ctx->i_ctx,md, impl))
			goto err;
		if (!EVP_DigestUpdate(&ctx->i_ctx,pad,EVP_MD_block_size(md)))
			goto err;
d112 2
a113 4
		if (!EVP_DigestInit_ex(&ctx->o_ctx,md, impl))
			goto err;
		if (!EVP_DigestUpdate(&ctx->o_ctx,pad,EVP_MD_block_size(md)))
			goto err;
d115 1
a115 5
	if (!EVP_MD_CTX_copy_ex(&ctx->md_ctx,&ctx->i_ctx))
			goto err;
	return 1;
	err:
	return 0;
d118 2
a119 1
int HMAC_Init(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md)
d123 1
a123 1
	return HMAC_Init_ex(ctx,key,len,md, NULL);
d126 1
a126 1
int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len)
d128 1
a128 1
	return EVP_DigestUpdate(&ctx->md_ctx,data,len);
d131 1
a131 1
int HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)
d139 4
a142 11
	if (!EVP_DigestFinal_ex(&ctx->md_ctx,buf,&i))
		goto err;
	if (!EVP_MD_CTX_copy_ex(&ctx->md_ctx,&ctx->o_ctx))
		goto err;
	if (!EVP_DigestUpdate(&ctx->md_ctx,buf,i))
		goto err;
	if (!EVP_DigestFinal_ex(&ctx->md_ctx,md,len))
		goto err;
	return 1;
	err:
	return 0;
a151 16
int HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx)
	{
	if (!EVP_MD_CTX_copy(&dctx->i_ctx, &sctx->i_ctx))
		goto err;
	if (!EVP_MD_CTX_copy(&dctx->o_ctx, &sctx->o_ctx))
		goto err;
	if (!EVP_MD_CTX_copy(&dctx->md_ctx, &sctx->md_ctx))
		goto err;
	memcpy(dctx->key, sctx->key, HMAC_MAX_MD_CBLOCK);
	dctx->key_length = sctx->key_length;
	dctx->md = sctx->md;
	return 1;
	err:
	return 0;
	}

d169 3
a171 6
	if (!HMAC_Init(&c,key,key_len,evp_md))
		goto err;
	if (!HMAC_Update(&c,d,n))
		goto err;
	if (!HMAC_Final(&c,md,md_len))
		goto err;
d173 1
a173 3
	return md;
	err:
	return NULL;
d182 2
@


1.1.1.9
log
@import OpenSSL 1.0.0e
@
text
@d141 1
d144 2
@


1.1.1.10
log
@import OpenSSL-1.0.1c
@
text
@a63 4
#ifdef OPENSSL_FIPS
#include <openssl/fips.h>
#endif

a69 18
#ifdef OPENSSL_FIPS
	if (FIPS_mode())
		{
		/* If we have an ENGINE need to allow non FIPS */
		if ((impl || ctx->i_ctx.engine)
			&&  !(ctx->i_ctx.flags & EVP_CIPH_FLAG_NON_FIPS_ALLOW))
			{
			EVPerr(EVP_F_HMAC_INIT_EX, EVP_R_DISABLED_FOR_FIPS);
			return 0;
			}
		/* Other algorithm blocking will be done in FIPS_cmac_init,
		 * via FIPS_hmac_init_ex().
		 */
		if (!impl && !ctx->i_ctx.engine)
			return FIPS_hmac_init_ex(ctx, key, len, md, NULL);
		}
#endif

a135 4
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !ctx->i_ctx.engine)
		return FIPS_hmac_update(ctx, data, len);
#endif
a142 4
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !ctx->i_ctx.engine)
		return FIPS_hmac_final(ctx, md, len);
#endif
a181 7
#ifdef OPENSSL_FIPS
	if (FIPS_mode() && !ctx->i_ctx.engine)
		{
		FIPS_hmac_ctx_cleanup(ctx);
		return;
		}
#endif
@


