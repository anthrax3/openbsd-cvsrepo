head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9;
locks; strict;
comment	@ * @;


1.9
date	2015.09.10.15.56.25;	author jsing;	state Exp;
branches;
next	1.8;
commitid	vHznCDK3idwNEFz4;

1.8
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.7;
commitid	yQEL1wOWIearrW15;

1.7
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.6;
commitid	id8dTrTMtnTn4fqt;

1.6
date	2014.06.21.13.39.46;	author jsing;	state Exp;
branches;
next	1.5;
commitid	yihLLT3NbSsZKu0x;

1.5
date	2014.06.21.12.00.01;	author miod;	state Exp;
branches;
next	1.4;
commitid	rSPuzesbBEbO1k45;

1.4
date	2014.06.12.15.49.29;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.49;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.01.22.54.08;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.11.03.02.32.11;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@/* $OpenBSD: hm_pmeth.c,v 1.8 2014/07/11 08:44:48 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2007.
 */
/* ====================================================================
 * Copyright (c) 2007 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

#include "evp_locl.h"

/* HMAC pkey context structure */

typedef struct {
	const EVP_MD *md;	/* MD for HMAC use */
	ASN1_OCTET_STRING ktmp; /* Temp storage for key */
	HMAC_CTX ctx;
} HMAC_PKEY_CTX;

static int
pkey_hmac_init(EVP_PKEY_CTX *ctx)
{
	HMAC_PKEY_CTX *hctx;

	hctx = malloc(sizeof(HMAC_PKEY_CTX));
	if (!hctx)
		return 0;
	hctx->md = NULL;
	hctx->ktmp.data = NULL;
	hctx->ktmp.length = 0;
	hctx->ktmp.flags = 0;
	hctx->ktmp.type = V_ASN1_OCTET_STRING;
	HMAC_CTX_init(&hctx->ctx);

	ctx->data = hctx;
	ctx->keygen_info_count = 0;

	return 1;
}

static int
pkey_hmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
{
	HMAC_PKEY_CTX *sctx, *dctx;

	if (!pkey_hmac_init(dst))
		return 0;
	sctx = src->data;
	dctx = dst->data;
	dctx->md = sctx->md;
	HMAC_CTX_init(&dctx->ctx);
	if (!HMAC_CTX_copy(&dctx->ctx, &sctx->ctx))
		return 0;
	if (sctx->ktmp.data) {
		if (!ASN1_OCTET_STRING_set(&dctx->ktmp, sctx->ktmp.data,
		    sctx->ktmp.length))
			return 0;
	}
	return 1;
}

static void
pkey_hmac_cleanup(EVP_PKEY_CTX *ctx)
{
	HMAC_PKEY_CTX *hctx = ctx->data;

	HMAC_CTX_cleanup(&hctx->ctx);
	if (hctx->ktmp.data) {
		if (hctx->ktmp.length)
			explicit_bzero(hctx->ktmp.data, hctx->ktmp.length);
		free(hctx->ktmp.data);
		hctx->ktmp.data = NULL;
	}
	free(hctx);
}

static int
pkey_hmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
{
	ASN1_OCTET_STRING *hkey = NULL;
	HMAC_PKEY_CTX *hctx = ctx->data;

	if (!hctx->ktmp.data)
		return 0;
	hkey = ASN1_OCTET_STRING_dup(&hctx->ktmp);
	if (!hkey)
		return 0;
	EVP_PKEY_assign(pkey, EVP_PKEY_HMAC, hkey);

	return 1;
}

static int
int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
{
	HMAC_PKEY_CTX *hctx = ctx->pctx->data;

	if (!HMAC_Update(&hctx->ctx, data, count))
		return 0;
	return 1;
}

static int
hmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
{
	HMAC_PKEY_CTX *hctx = ctx->data;

	HMAC_CTX_set_flags(&hctx->ctx, mctx->flags & ~EVP_MD_CTX_FLAG_NO_INIT);
	EVP_MD_CTX_set_flags(mctx, EVP_MD_CTX_FLAG_NO_INIT);
	mctx->update = int_update;
	return 1;
}

static int
hmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
    EVP_MD_CTX *mctx)
{
	unsigned int hlen;
	HMAC_PKEY_CTX *hctx = ctx->data;
	int l = EVP_MD_CTX_size(mctx);

	if (l < 0)
		return 0;
	*siglen = l;
	if (!sig)
		return 1;

	if (!HMAC_Final(&hctx->ctx, sig, &hlen))
		return 0;
	*siglen = (size_t)hlen;
	return 1;
}

static int
pkey_hmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
{
	HMAC_PKEY_CTX *hctx = ctx->data;
	ASN1_OCTET_STRING *key;

	switch (type) {
	case EVP_PKEY_CTRL_SET_MAC_KEY:
		if ((!p2 && p1 > 0) || (p1 < -1))
			return 0;
		if (!ASN1_OCTET_STRING_set(&hctx->ktmp, p2, p1))
			return 0;
		break;

	case EVP_PKEY_CTRL_MD:
		hctx->md = p2;
		break;

	case EVP_PKEY_CTRL_DIGESTINIT:
		key = (ASN1_OCTET_STRING *)ctx->pkey->pkey.ptr;
		if (!HMAC_Init_ex(&hctx->ctx, key->data, key->length, hctx->md,
		    ctx->engine))
			return 0;
		break;

	default:
		return -2;
	}
	return 1;
}

static int
pkey_hmac_ctrl_str(EVP_PKEY_CTX *ctx, const char *type, const char *value)
{
	if (!value)
		return 0;
	if (!strcmp(type, "key")) {
		void *p = (void *)value;
		return pkey_hmac_ctrl(ctx, EVP_PKEY_CTRL_SET_MAC_KEY, -1, p);
	}
	if (!strcmp(type, "hexkey")) {
		unsigned char *key;
		int r;
		long keylen;
		key = string_to_hex(value, &keylen);
		if (!key)
			return 0;
		r = pkey_hmac_ctrl(ctx, EVP_PKEY_CTRL_SET_MAC_KEY, keylen, key);
		free(key);
		return r;
	}
	return -2;
}

const EVP_PKEY_METHOD hmac_pkey_meth = {
	.pkey_id = EVP_PKEY_HMAC,

	.init = pkey_hmac_init,
	.copy = pkey_hmac_copy,
	.cleanup = pkey_hmac_cleanup,

	.keygen = pkey_hmac_keygen,

	.signctx_init = hmac_signctx_init,
	.signctx = hmac_signctx,

	.ctrl = pkey_hmac_ctrl,
	.ctrl_str = pkey_hmac_ctrl_str
};
@


1.8
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: hm_pmeth.c,v 1.7 2014/07/10 13:58:22 jsing Exp $ */
d127 1
a127 1
			OPENSSL_cleanse(hctx->ktmp.data, hctx->ktmp.length);
@


1.7
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: hm_pmeth.c,v 1.6 2014/06/21 13:39:46 jsing Exp $ */
d62 2
a63 1
#include "cryptlib.h"
d66 1
a66 2
#include <openssl/evp.h>
#include <openssl/hmac.h>
@


1.6
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: hm_pmeth.c,v 1.5 2014/06/21 12:00:01 miod Exp $ */
d60 2
@


1.5
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: hm_pmeth.c,v 1.4 2014/06/12 15:49:29 deraadt Exp $ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d103 1
a103 1
       	sctx = src->data;
d144 1
a144 1
	
d149 1
a149 1
int_update(EVP_MD_CTX *ctx,const void *data,size_t count)
d189 1
a189 1
static int 
d243 1
a243 2
const EVP_PKEY_METHOD
hmac_pkey_meth = {
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d69 1
a69 2
typedef struct
	{
d73 1
a73 1
	} HMAC_PKEY_CTX;
d75 3
a77 2
static int pkey_hmac_init(EVP_PKEY_CTX *ctx)
	{
d79 1
d94 1
a94 1
	}
d96 3
a98 2
static int pkey_hmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
	{
d100 1
d109 3
a111 4
	if (sctx->ktmp.data)
		{
		if (!ASN1_OCTET_STRING_set(&dctx->ktmp,
					sctx->ktmp.data, sctx->ktmp.length))
d113 1
a113 1
		}
d115 1
a115 1
	}
d117 3
a119 2
static void pkey_hmac_cleanup(EVP_PKEY_CTX *ctx)
	{
d121 1
d123 1
a123 2
	if (hctx->ktmp.data)
		{
d128 1
a128 1
		}
d130 1
a130 1
	}
d132 3
a134 2
static int pkey_hmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
	{
d137 1
d146 1
a146 1
	}
d148 3
a150 2
static int int_update(EVP_MD_CTX *ctx,const void *data,size_t count)
	{
d152 1
d156 1
a156 1
	}
d158 3
a160 2
static int hmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
	{
d162 1
d167 1
a167 1
	}
d169 4
a172 3
static int hmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
					EVP_MD_CTX *mctx)
	{
d187 1
a187 1
	}
d189 3
a191 2
static int pkey_hmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
	{
a193 2
	switch (type)
		{
d195 2
a196 1
		case EVP_PKEY_CTRL_SET_MAC_KEY:
d203 1
a203 1
		case EVP_PKEY_CTRL_MD:
d207 1
a207 1
		case EVP_PKEY_CTRL_DIGESTINIT:
d210 1
a210 1
				ctx->engine))
d214 1
a214 1
		default:
d216 1
a216 2

		}
d218 1
a218 1
	}
d220 3
a222 3
static int pkey_hmac_ctrl_str(EVP_PKEY_CTX *ctx,
			const char *type, const char *value)
	{
a223 1
		{
d225 1
a225 3
		}
	if (!strcmp(type, "key"))
		{
d227 3
a229 5
		return pkey_hmac_ctrl(ctx, EVP_PKEY_CTRL_SET_MAC_KEY,
				-1, p);
		}
	if (!strcmp(type, "hexkey"))
		{
d239 1
a239 1
		}
d241 1
a241 1
	}
d243 2
a244 1
const EVP_PKEY_METHOD hmac_pkey_meth = {
@


1.3
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d1 1
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d238 2
a239 7
const EVP_PKEY_METHOD hmac_pkey_meth = 
	{
	EVP_PKEY_HMAC,
	0,
	pkey_hmac_init,
	pkey_hmac_copy,
	pkey_hmac_cleanup,
d241 3
a243 1
	0, 0,
d245 1
a245 2
	0,
	pkey_hmac_keygen,
d247 2
a248 1
	0, 0,
d250 3
a252 19
	0, 0,

	0,0,

	hmac_signctx_init,
	hmac_signctx,

	0,0,

	0,0,

	0,0,

	0,0,

	pkey_hmac_ctrl,
	pkey_hmac_ctrl_str

	};
@


1.1
log
@Initial revision
@
text
@d78 1
a78 1
	hctx = OPENSSL_malloc(sizeof(HMAC_PKEY_CTX));
d103 2
a104 1
	HMAC_CTX_copy(&dctx->ctx, &sctx->ctx);
d122 1
a122 1
		OPENSSL_free(hctx->ktmp.data);
d125 1
a125 1
	OPENSSL_free(hctx);
d145 2
a146 1
	HMAC_Update(&hctx->ctx, data, count);
d152 2
d172 2
a173 1
	HMAC_Final(&hctx->ctx, sig, &hlen);
d198 3
a200 2
		HMAC_Init_ex(&hctx->ctx, key->data, key->length, hctx->md,
				ctx->engine);
d232 1
a232 1
		OPENSSL_free(key);
@


1.1.1.1
log
@import OpenSSL-1.0.0a
@
text
@@


1.1.1.2
log
@import OpenSSL 1.0.0e
@
text
@a149 2
	HMAC_PKEY_CTX *hctx = ctx->data;
	HMAC_CTX_set_flags(&hctx->ctx, mctx->flags & ~EVP_MD_CTX_FLAG_NO_INIT);
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@d103 1
a103 2
	if (!HMAC_CTX_copy(&dctx->ctx, &sctx->ctx))
		return 0;
d144 1
a144 2
	if (!HMAC_Update(&hctx->ctx, data, count))
		return 0;
d170 1
a170 2
	if (!HMAC_Final(&hctx->ctx, sig, &hlen))
		return 0;
d195 2
a196 3
		if (!HMAC_Init_ex(&hctx->ctx, key->data, key->length, hctx->md,
				ctx->engine))
			return 0;
@


