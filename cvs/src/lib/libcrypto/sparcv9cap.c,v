head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7;
locks; strict;
comment	@ * @;


1.7
date	2014.06.20.21.00.46;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	cPW6VxreIaECmYIA;

1.6
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	mJUVYpkFBZ0Zv2bG;

1.5
date	2014.04.20.14.32.19;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.17.18.49.35;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.13.29.57;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.15.13.41.53;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.11.03.02.32.07;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove the OPENSSL_*cap getenv's.  A program should not be able to
change the behaviour of the library in such a complicated fashion.
ok miod
@
text
@/* $OpenBSD: sparcv9cap.c,v 1.6 2014/06/12 15:49:27 deraadt Exp $ */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/time.h>
#include <openssl/bn.h>

#define SPARCV9_PREFER_FPU	(1<<1)
#define SPARCV9_VIS1		(1<<2)
#define SPARCV9_VIS2		(1<<3)	/* reserved */
#define SPARCV9_FMADD		(1<<4)	/* reserved for SPARC64 V */

static int OPENSSL_sparcv9cap_P = 0;

int
bn_mul_mont(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp,
    const BN_ULONG *np, const BN_ULONG *n0, int num)
{
	int bn_mul_mont_fpu(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, const BN_ULONG *np, const BN_ULONG *n0, int num);
	int bn_mul_mont_int(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, const BN_ULONG *np, const BN_ULONG *n0, int num);

	if (num >= 8 && !(num & 1) &&
	    (OPENSSL_sparcv9cap_P & (SPARCV9_PREFER_FPU|SPARCV9_VIS1)) ==
	    (SPARCV9_PREFER_FPU|SPARCV9_VIS1))
		return bn_mul_mont_fpu(rp, ap, bp, np, n0, num);
	else
		return bn_mul_mont_int(rp, ap, bp, np, n0, num);
}

void		_sparcv9_vis1_probe(void);
unsigned long	_sparcv9_vis1_instrument(void);
void		_sparcv9_vis2_probe(void);
void		_sparcv9_fmadd_probe(void);

static sigjmp_buf common_jmp;
static void
common_handler(int sig)
{
	siglongjmp(common_jmp, sig);
}

void
OPENSSL_cpuid_setup(void)
{
	char *e;
	struct sigaction	common_act, ill_oact, bus_oact;
	sigset_t		all_masked, oset;
	static int trigger = 0;

	if (trigger)
		return;
	trigger = 1;

	/* Initial value, fits UltraSPARC-I&II... */
	OPENSSL_sparcv9cap_P = SPARCV9_PREFER_FPU;

	sigfillset(&all_masked);
	sigdelset(&all_masked, SIGILL);
	sigdelset(&all_masked, SIGTRAP);
#ifdef SIGEMT
	sigdelset(&all_masked, SIGEMT);
#endif
	sigdelset(&all_masked, SIGFPE);
	sigdelset(&all_masked, SIGBUS);
	sigdelset(&all_masked, SIGSEGV);
	sigprocmask(SIG_SETMASK, &all_masked, &oset);

	memset(&common_act, 0, sizeof(common_act));
	common_act.sa_handler = common_handler;
	common_act.sa_mask = all_masked;

	sigaction(SIGILL, &common_act, &ill_oact);
	sigaction(SIGBUS,&common_act,&bus_oact);/* T1 fails 16-bit ldda [on Linux] */

	if (sigsetjmp(common_jmp, 1) == 0) {
		_sparcv9_vis1_probe();
		OPENSSL_sparcv9cap_P |= SPARCV9_VIS1;
		/* detect UltraSPARC-Tx, see sparccpud.S for details... */
		if (_sparcv9_vis1_instrument() >= 12)
			OPENSSL_sparcv9cap_P &= ~(SPARCV9_VIS1|SPARCV9_PREFER_FPU);
		else {
			_sparcv9_vis2_probe();
			OPENSSL_sparcv9cap_P |= SPARCV9_VIS2;
		}
	}

	if (sigsetjmp(common_jmp, 1) == 0) {
		_sparcv9_fmadd_probe();
		OPENSSL_sparcv9cap_P |= SPARCV9_FMADD;
	}

	sigaction(SIGBUS, &bus_oact, NULL);
	sigaction(SIGILL, &ill_oact, NULL);

	sigprocmask(SIG_SETMASK, &oset, NULL);
}
@


1.6
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a54 5

	if ((e = getenv("OPENSSL_sparcv9cap"))) {
		OPENSSL_sparcv9cap_P = strtoul(e, NULL, 0);
		return;
	}
@


1.5
log
@More KNF.
@
text
@d1 1
@


1.4
log
@Remove oh-so-important-from-a-security-pov OpenSSL_rtdsc() function.
@
text
@d37 2
a38 1
static void common_handler(int sig)
@


1.3
log
@Revert unintended whitespace changes.
@
text
@a8 1
#define SPARCV9_TICK_PRIVILEGED	(1<<0)
d14 1
a14 1
static int OPENSSL_sparcv9cap_P = SPARCV9_TICK_PRIVILEGED;
a30 1
unsigned long	_sparcv9_rdtick(void);
a35 134
unsigned long
OPENSSL_rdtsc(void)
{
	if (OPENSSL_sparcv9cap_P&SPARCV9_TICK_PRIVILEGED)
#if defined(__sun) && defined(__SVR4)
		return gethrtime();
#else
		return 0;
#endif
	else
		return _sparcv9_rdtick();
}

#if 0 && defined(__sun) && defined(__SVR4)
/* This code path is disabled, because of incompatibility of
 * libdevinfo.so.1 and libmalloc.so.1 (see below for details)
 */
#include <malloc.h>
#include <dlfcn.h>
#include <libdevinfo.h>
#include <sys/systeminfo.h>

typedef di_node_t (*di_init_t)(const char *, uint_t);
typedef void      (*di_fini_t)(di_node_t);
typedef char *    (*di_node_name_t)(di_node_t);
typedef int       (*di_walk_node_t)(di_node_t, uint_t, di_node_name_t, int (*)(di_node_t, di_node_name_t));

#define DLLINK(h,name) (name=(name##_t)dlsym((h),#name))

static int
walk_nodename(di_node_t node, di_node_name_t di_node_name)
{
	char *name = (*di_node_name)(node);

	/* This is expected to catch all UltraSPARC flavors prior T1 */
	if (!strcmp (name, "SUNW,UltraSPARC") ||
	    !strncmp(name,"SUNW,UltraSPARC-I",17))  /* covers II,III,IV */
	{
		OPENSSL_sparcv9cap_P |= SPARCV9_PREFER_FPU|SPARCV9_VIS1;

		/* %tick is privileged only on UltraSPARC-I/II, but not IIe */
		if (name[14]!='\0' && name[17]!='\0' && name[18]!='\0')
			OPENSSL_sparcv9cap_P &= ~SPARCV9_TICK_PRIVILEGED;

		return DI_WALK_TERMINATE;
	}
	/* This is expected to catch remaining UltraSPARCs, such as T1 */
	else if (!strncmp(name, "SUNW,UltraSPARC", 15)) {
		OPENSSL_sparcv9cap_P &= ~SPARCV9_TICK_PRIVILEGED;

		return DI_WALK_TERMINATE;
	}

	return DI_WALK_CONTINUE;
}

void
OPENSSL_cpuid_setup(void)
{
	void *h;
	char *e, si[256];
	static int trigger = 0;

	if (trigger)
		return;
	trigger = 1;

	if ((e = getenv("OPENSSL_sparcv9cap"))) {
		OPENSSL_sparcv9cap_P = strtoul(e, NULL, 0);
		return;
	}

	if (sysinfo(SI_MACHINE, si, sizeof(si)) > 0) {
		if (strcmp(si, "sun4v"))
			/* FPU is preferred for all CPUs, but US-T1/2 */
			OPENSSL_sparcv9cap_P |= SPARCV9_PREFER_FPU;
	}

	if (sysinfo(SI_ISALIST, si, sizeof(si)) > 0) {
		if (strstr(si, "+vis"))
			OPENSSL_sparcv9cap_P |= SPARCV9_VIS1;
		if (strstr(si, "+vis2")) {
			OPENSSL_sparcv9cap_P |= SPARCV9_VIS2;
			OPENSSL_sparcv9cap_P &= ~SPARCV9_TICK_PRIVILEGED;
			return;
		}
	}
#ifdef M_KEEP
	/*
	 * Solaris libdevinfo.so.1 is effectively incomatible with
	 * libmalloc.so.1. Specifically, if application is linked with
	 * -lmalloc, it crashes upon startup with SIGSEGV in
	 * free(3LIBMALLOC) called by di_fini. Prior call to
	 * mallopt(M_KEEP,0) somehow helps... But not always...
	 */
	if ((h = dlopen(NULL, RTLD_LAZY))) {
			union { void *p;
			int (*f)(int, int);
		} sym;
		if ((sym.p = dlsym(h, "mallopt"))) (*sym.f)(M_KEEP, 0);
			dlclose(h);
	}
#endif
	if ((h = dlopen("libdevinfo.so.1", RTLD_LAZY)))
		do {
			di_init_t	di_init;
			di_fini_t	di_fini;
			di_walk_node_t	di_walk_node;
			di_node_name_t	di_node_name;
			di_node_t	root_node;

			if (!DLLINK(h, di_init))
				break;
			if (!DLLINK(h, di_fini))
				break;
			if (!DLLINK(h, di_walk_node))
				break;
			if (!DLLINK(h, di_node_name))
				break;

			if ((root_node = (*di_init)("/", DINFOSUBTREE)) !=
			    DI_NODE_NIL) {
				(*di_walk_node)(root_node, DI_WALK_SIBFIRST,
				   di_node_name, walk_nodename);
				(*di_fini)(root_node);
			}
		} while (0);

	if (h)
		dlclose(h);
}

#else

d60 1
a60 1
	OPENSSL_sparcv9cap_P = SPARCV9_PREFER_FPU|SPARCV9_TICK_PRIVILEGED;
a80 5
		_sparcv9_rdtick();
		OPENSSL_sparcv9cap_P &= ~SPARCV9_TICK_PRIVILEGED;
	}

	if (sigsetjmp(common_jmp, 1) == 0) {
a101 2

#endif
@


1.2
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d73 1
a73 1
	if (!strcmp (name, "SUNW, UltraSPARC") ||
d85 1
a85 1
	else if (!strncmp(name, "SUNW, UltraSPARC", 15)) {
@


1.1
log
@Initial revision
@
text
@d4 2
a13 1
static int OPENSSL_sparcv9cap_P=SPARCV9_TICK_PRIVILEGED;
d15 1
a15 4
int bn_mul_mont(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, const BN_ULONG *np,const BN_ULONG *n0, int num)
	{
	int bn_mul_mont_fpu(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, const BN_ULONG *np,const BN_ULONG *n0, int num);
	int bn_mul_mont_int(BN_ULONG *rp, const BN_ULONG *ap, const BN_ULONG *bp, const BN_ULONG *np,const BN_ULONG *n0, int num);
d17 11
a27 3
	if ((OPENSSL_sparcv9cap_P&(SPARCV9_PREFER_FPU|SPARCV9_VIS1)) ==
		(SPARCV9_PREFER_FPU|SPARCV9_VIS1))
		return bn_mul_mont_fpu(rp,ap,bp,np,n0,num);
d29 2
a30 6
		return bn_mul_mont_int(rp,ap,bp,np,n0,num);
	}

unsigned long OPENSSL_rdtsc(void)
	{
	unsigned long _sparcv9_rdtick(void);
d32 9
d49 1
a49 3
	}

#if defined(__sun) && defined(__SVR4)
d51 5
d60 1
a60 1
typedef di_node_t (*di_init_t)(const char *,uint_t);
d63 1
a63 1
typedef int       (*di_walk_node_t)(di_node_t,uint_t,di_node_name_t,int (*)(di_node_t,di_node_name_t));
d67 3
a69 2
static int walk_nodename(di_node_t node, di_node_name_t di_node_name)
	{
d73 1
a73 1
	if (!strcmp (name,"SUNW,UltraSPARC") ||
d75 1
a75 1
		{
d83 1
a83 1
		}
d85 1
a85 2
	else if (!strncmp(name,"SUNW,UltraSPARC",15))
		{
d89 1
a89 1
		}
d92 1
a92 1
	}
d94 3
a96 2
void OPENSSL_cpuid_setup(void)
	{
d98 2
a99 2
	char *e,si[256];
	static int trigger=0;
d101 3
a103 2
	if (trigger) return;
	trigger=1;
d105 2
a106 3
	if ((e=getenv("OPENSSL_sparcv9cap")))
		{
		OPENSSL_sparcv9cap_P=strtoul(e,NULL,0);
d108 1
a108 1
		}
d110 2
a111 3
	if (sysinfo(SI_MACHINE,si,sizeof(si))>0)
		{
		if (strcmp(si,"sun4v"))
d114 1
a114 1
		}
d116 2
a117 3
	if (sysinfo(SI_ISALIST,si,sizeof(si))>0)
		{
		if (strstr(si,"+vis"))
d119 1
a119 2
		if (strstr(si,"+vis2"))
			{
a122 1
			}
d124 39
a162 19

	if ((h = dlopen("libdevinfo.so.1",RTLD_LAZY))) do
		{
		di_init_t	di_init;
		di_fini_t	di_fini;
		di_walk_node_t	di_walk_node;
		di_node_name_t	di_node_name;
		di_node_t	root_node;

		if (!DLLINK(h,di_init))		break;
		if (!DLLINK(h,di_fini))		break;
		if (!DLLINK(h,di_walk_node))	break;
		if (!DLLINK(h,di_node_name))	break;

		if ((root_node = (*di_init)("/",DINFOSUBTREE))!=DI_NODE_NIL)
			{
			(*di_walk_node)(root_node,DI_WALK_SIBFIRST,
					di_node_name,walk_nodename);
			(*di_fini)(root_node);
d164 1
a164 1
		} while(0);
d166 3
a168 2
	if (h) dlclose(h);
	}
d172 9
a180 2
void OPENSSL_cpuid_setup(void)
	{
d182 5
a186 4
 
	if ((e=getenv("OPENSSL_sparcv9cap")))
		{
		OPENSSL_sparcv9cap_P=strtoul(e,NULL,0);
d188 42
d231 1
d233 3
a235 2
	/* For now we assume that the rest supports UltraSPARC-I* only */
	OPENSSL_sparcv9cap_P |= SPARCV9_PREFER_FPU|SPARCV9_VIS1;
d237 6
@


1.1.1.1
log
@import of OpenSSL 0.9.8k
@
text
@@


1.1.1.2
log
@import OpenSSL 1.0.0e
@
text
@a3 2
#include <setjmp.h>
#include <signal.h>
a11 1

a25 6
unsigned long	_sparcv9_rdtick(void);
void		_sparcv9_vis1_probe(void);
unsigned long	_sparcv9_vis1_instrument(void);
void		_sparcv9_vis2_probe(void);
void		_sparcv9_fmadd_probe(void);

d28 2
d40 2
a41 5
#if 0 && defined(__sun) && defined(__SVR4)
/* This code path is disabled, because of incompatibility of
 * libdevinfo.so.1 and libmalloc.so.1 (see below for details)
 */
#include <malloc.h>
d113 1
a113 15
#ifdef M_KEEP
	/*
	 * Solaris libdevinfo.so.1 is effectively incomatible with
	 * libmalloc.so.1. Specifically, if application is linked with
	 * -lmalloc, it crashes upon startup with SIGSEGV in
	 * free(3LIBMALLOC) called by di_fini. Prior call to
	 * mallopt(M_KEEP,0) somehow helps... But not always...
	 */
	if ((h = dlopen(NULL,RTLD_LAZY)))
		{
		union { void *p; int (*f)(int,int); } sym;
		if ((sym.p = dlsym(h,"mallopt"))) (*sym.f)(M_KEEP,0);
		dlclose(h);
		}
#endif
a139 3
static sigjmp_buf common_jmp;
static void common_handler(int sig) { siglongjmp(common_jmp,sig); }

a142 7
	struct sigaction	common_act,ill_oact,bus_oact;
	sigset_t		all_masked,oset;
	int			sig;
	static int trigger=0;

	if (trigger) return;
	trigger=1;
d150 2
a151 51
	/* Initial value, fits UltraSPARC-I&II... */
	OPENSSL_sparcv9cap_P = SPARCV9_PREFER_FPU|SPARCV9_TICK_PRIVILEGED;

	sigfillset(&all_masked);
	sigdelset(&all_masked,SIGILL);
	sigdelset(&all_masked,SIGTRAP);
#ifdef SIGEMT
	sigdelset(&all_masked,SIGEMT);
#endif
	sigdelset(&all_masked,SIGFPE);
	sigdelset(&all_masked,SIGBUS);
	sigdelset(&all_masked,SIGSEGV);
	sigprocmask(SIG_SETMASK,&all_masked,&oset);

	memset(&common_act,0,sizeof(common_act));
	common_act.sa_handler = common_handler;
	common_act.sa_mask    = all_masked;

	sigaction(SIGILL,&common_act,&ill_oact);
	sigaction(SIGBUS,&common_act,&bus_oact);/* T1 fails 16-bit ldda [on Linux] */

	if (sigsetjmp(common_jmp,1) == 0)
		{
		_sparcv9_rdtick();
		OPENSSL_sparcv9cap_P &= ~SPARCV9_TICK_PRIVILEGED;
		}

	if (sigsetjmp(common_jmp,1) == 0)
		{
		_sparcv9_vis1_probe();
		OPENSSL_sparcv9cap_P |= SPARCV9_VIS1;
		/* detect UltraSPARC-Tx, see sparccpud.S for details... */
		if (_sparcv9_vis1_instrument() >= 12)
			OPENSSL_sparcv9cap_P &= ~(SPARCV9_VIS1|SPARCV9_PREFER_FPU);
		else
			{
			_sparcv9_vis2_probe();
			OPENSSL_sparcv9cap_P |= SPARCV9_VIS2;
			}
		}

	if (sigsetjmp(common_jmp,1) == 0)
		{
		_sparcv9_fmadd_probe();
		OPENSSL_sparcv9cap_P |= SPARCV9_FMADD;
		}

	sigaction(SIGBUS,&bus_oact,NULL);
	sigaction(SIGILL,&ill_oact,NULL);

	sigprocmask(SIG_SETMASK,&oset,NULL);
@


1.1.1.3
log
@import OpenSSL-1.0.1c
@
text
@d22 1
a22 2
	if (num>=8 && !(num&1) &&
	    (OPENSSL_sparcv9cap_P&(SPARCV9_PREFER_FPU|SPARCV9_VIS1)) ==
d172 1
@


