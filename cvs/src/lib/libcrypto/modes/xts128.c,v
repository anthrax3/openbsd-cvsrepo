head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2015.02.10.09.46.30;	author miod;	state Exp;
branches;
next	1.5;
commitid	XPddOr5uXbWZR9wr;

1.5
date	2014.07.09.16.06.13;	author miod;	state Exp;
branches;
next	1.4;
commitid	WBUBPtdvi23w6jGY;

1.4
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.05.07.22.05.48;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.23.18.40.39;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.41;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove assert() or OPENSSL_assert() of pointers being non-NULL. The policy
for libraries in OpenBSD is to deliberately let NULL pointers cause a SIGSEGV.
ok doug@@ jsing@@
@
text
@/* $OpenBSD: xts128.c,v 1.5 2014/07/09 16:06:13 miod Exp $ */
/* ====================================================================
 * Copyright (c) 2011 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */

#include <machine/endian.h>
#include <openssl/crypto.h>
#include "modes_lcl.h"
#include <string.h>

#ifndef MODES_DEBUG
# ifndef NDEBUG
#  define NDEBUG
# endif
#endif

int CRYPTO_xts128_encrypt(const XTS128_CONTEXT *ctx, const unsigned char iv[16],
	const unsigned char *inp, unsigned char *out,
	size_t len, int enc)
{
	union { u64 u[2]; u32 d[4]; u8 c[16]; } tweak, scratch;
	unsigned int i;

	if (len<16) return -1;

	memcpy(tweak.c, iv, 16);

	(*ctx->block2)(tweak.c,tweak.c,ctx->key2);

	if (!enc && (len%16)) len-=16;

	while (len>=16) {
#ifdef __STRICT_ALIGNMENT
		memcpy(scratch.c,inp,16);
		scratch.u[0] ^= tweak.u[0];
		scratch.u[1] ^= tweak.u[1];
#else
		scratch.u[0] = ((u64*)inp)[0]^tweak.u[0];
		scratch.u[1] = ((u64*)inp)[1]^tweak.u[1];
#endif
		(*ctx->block1)(scratch.c,scratch.c,ctx->key1);
#ifdef __STRICT_ALIGNMENT
		scratch.u[0] ^= tweak.u[0];
		scratch.u[1] ^= tweak.u[1];
		memcpy(out,scratch.c,16);
#else
		((u64*)out)[0] = scratch.u[0]^=tweak.u[0];
		((u64*)out)[1] = scratch.u[1]^=tweak.u[1];
#endif
		inp += 16;
		out += 16;
		len -= 16;

		if (len==0)	return 0;

		if (BYTE_ORDER == LITTLE_ENDIAN) {
			unsigned int carry,res;
			
			res = 0x87&(((int)tweak.d[3])>>31);
			carry = (unsigned int)(tweak.u[0]>>63);
			tweak.u[0] = (tweak.u[0]<<1)^res;
			tweak.u[1] = (tweak.u[1]<<1)|carry;
		}
		else {
			size_t c;

			for (c=0,i=0;i<16;++i) {
				/*+ substitutes for |, because c is 1 bit */ 
				c += ((size_t)tweak.c[i])<<1;
				tweak.c[i] = (u8)c;
				c = c>>8;
			}
			tweak.c[0] ^= (u8)(0x87&(0-c));
		}
	}
	if (enc) {
		for (i=0;i<len;++i) {
			u8 c = inp[i];
			out[i] = scratch.c[i];
			scratch.c[i] = c;
		}
		scratch.u[0] ^= tweak.u[0];
		scratch.u[1] ^= tweak.u[1];
		(*ctx->block1)(scratch.c,scratch.c,ctx->key1);
		scratch.u[0] ^= tweak.u[0];
		scratch.u[1] ^= tweak.u[1];
		memcpy(out-16,scratch.c,16);
	}
	else {
		union { u64 u[2]; u8 c[16]; } tweak1;

		if (BYTE_ORDER == LITTLE_ENDIAN) {
			unsigned int carry,res;

			res = 0x87&(((int)tweak.d[3])>>31);
			carry = (unsigned int)(tweak.u[0]>>63);
			tweak1.u[0] = (tweak.u[0]<<1)^res;
			tweak1.u[1] = (tweak.u[1]<<1)|carry;
		}
		else {
			size_t c;

			for (c=0,i=0;i<16;++i) {
				/*+ substitutes for |, because c is 1 bit */ 
				c += ((size_t)tweak.c[i])<<1;
				tweak1.c[i] = (u8)c;
				c = c>>8;
			}
			tweak1.c[0] ^= (u8)(0x87&(0-c));
		}
#ifdef __STRICT_ALIGNMENT
		memcpy(scratch.c,inp,16);
		scratch.u[0] ^= tweak1.u[0];
		scratch.u[1] ^= tweak1.u[1];
#else
		scratch.u[0] = ((u64*)inp)[0]^tweak1.u[0];
		scratch.u[1] = ((u64*)inp)[1]^tweak1.u[1];
#endif
		(*ctx->block1)(scratch.c,scratch.c,ctx->key1);
		scratch.u[0] ^= tweak1.u[0];
		scratch.u[1] ^= tweak1.u[1];

		for (i=0;i<len;++i) {
			u8 c = inp[16+i];
			out[16+i] = scratch.c[i];
			scratch.c[i] = c;
		}
		scratch.u[0] ^= tweak.u[0];
		scratch.u[1] ^= tweak.u[1];
		(*ctx->block1)(scratch.c,scratch.c,ctx->key1);
#ifdef __STRICT_ALIGNMENT
		scratch.u[0] ^= tweak.u[0];
		scratch.u[1] ^= tweak.u[1];
		memcpy (out,scratch.c,16);
#else
		((u64*)out)[0] = scratch.u[0]^tweak.u[0];
		((u64*)out)[1] = scratch.u[1]^tweak.u[1];
#endif
	}

	return 0;
}
@


1.5
log
@Remove leading underscore from _BYTE_ORDER and _{LITTLE,BIG}_ENDIAN, to be
more friendly to systems where the underscore flavours may be defined as empty.
Found the hard way be bcook@@; joint brainstrom with bcook beck and guenther
@
text
@d1 1
a1 1
/* $OpenBSD: xts128.c,v 1.4 2014/06/12 15:49:30 deraadt Exp $ */
a60 1
#include <assert.h>
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d102 1
a102 1
		if (_BYTE_ORDER == _LITTLE_ENDIAN) {
d138 1
a138 1
		if (_BYTE_ORDER == _LITTLE_ENDIAN) {
@


1.3
log
@Get __STRICT_ALIGNMENT from <machine/endian.h> and decide upon it, rather
than defining it for not (i386 and amd64 (and sometimes s390)) only.

Compile-time tests remain compile-time tests, and runtime-test remain
runtime-test instead of being converted to compile-time tests, per matthew@@'s
explicit demand (rationale: this makes sure the compiler checks your code even
if you won't run it).

No functional change except on s390 (which we don't run on) and vax (which we
run on, but noone cares about)

ok matthew@@
@
text
@d1 1
@


1.2
log
@Figure out endianness at compile-time, using _BYTE_ORDER from
<machine/endian.h>, rather than writing 1 to a 32-bit variable and checking
whether the first byte is nonzero.

tweaks and ok matthew@@; ok beck@@ tedu@@
@
text
@d50 1
d78 1
a78 1
#if defined(STRICT_ALIGNMENT)
d87 1
a87 1
#if defined(STRICT_ALIGNMENT)
d156 1
a156 1
#if defined(STRICT_ALIGNMENT)
d176 1
a176 1
#if defined(STRICT_ALIGNMENT)
@


1.1
log
@Initial revision
@
text
@a64 1
	const union { long one; char little; } is_endian = {1};
d100 1
a100 1
		if (is_endian.little) {
d136 1
a136 1
		if (is_endian.little) {
@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@
