head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.6
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.31.0.4
	OPENBSD_6_1_BASE:1.31;
locks; strict;
comment	@ * @;


1.31
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.30;
commitid	kT0fLt3r4lroFJra;

1.30
date	2016.10.17.03.30.14;	author guenther;	state Exp;
branches;
next	1.29;
commitid	htL1Y6hvASuVGo5v;

1.29
date	2016.03.02.06.16.11;	author doug;	state Exp;
branches;
next	1.28;
commitid	FTxqHgr7i1hK4B3V;

1.28
date	2015.09.28.18.58.33;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	v5fDQXBWWZTVGGr5;

1.27
date	2015.09.27.19.41.37;	author miod;	state Exp;
branches;
next	1.26;
commitid	8ZYqcOtsTObthNa3;

1.26
date	2015.09.18.09.00.04;	author sthen;	state Exp;
branches;
next	1.25;
commitid	SsNskQJBlGbLqZ5O;

1.25
date	2015.09.13.16.02.11;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	8mCU472tyaR9nWtl;

1.24
date	2015.09.13.15.59.29;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	UEoNz4JhUjDKY100;

1.23
date	2014.07.12.16.03.36;	author miod;	state Exp;
branches;
next	1.22;
commitid	G74O1dmRukKsW7IJ;

1.22
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.21;
commitid	yQEL1wOWIearrW15;

1.21
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.20;
commitid	nzndm3zqPmFurSaK;

1.20
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	mJUVYpkFBZ0Zv2bG;

1.19
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	2nvnQBrv22dLtvTt;

1.18
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.29.21.07.42;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.25.19.54.46;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.06.09.22.53;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.21;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.20;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.59;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.36;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.04;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.37;	author djm;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: bn_print.c,v 1.30 2016/10/17 03:30:14 guenther Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <ctype.h>
#include <limits.h>
#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/bio.h>
#include <openssl/buffer.h>
#include <openssl/err.h>

#include "bn_lcl.h"

static const char Hex[]="0123456789ABCDEF";

/* Must 'free' the returned data */
char *
BN_bn2hex(const BIGNUM *a)
{
	int i, j, v, z = 0;
	char *buf;
	char *p;

	buf = malloc(BN_is_negative(a) + a->top * BN_BYTES * 2 + 2);
	if (buf == NULL) {
		BNerror(ERR_R_MALLOC_FAILURE);
		goto err;
	}
	p = buf;
	if (BN_is_negative(a))
		*p++ = '-';
	if (BN_is_zero(a))
		*p++ = '0';
	for (i = a->top - 1; i >=0; i--) {
		for (j = BN_BITS2 - 8; j >= 0; j -= 8) {
			/* strip leading zeros */
			v = ((int)(a->d[i] >> (long)j)) & 0xff;
			if (z || (v != 0)) {
				*p++ = Hex[v >> 4];
				*p++ = Hex[v & 0x0f];
				z = 1;
			}
		}
	}
	*p = '\0';

err:
	return (buf);
}

/* Must 'free' the returned data */
char *
BN_bn2dec(const BIGNUM *a)
{
	int i = 0, num, bn_data_num, ok = 0;
	char *buf = NULL;
	char *p;
	BIGNUM *t = NULL;
	BN_ULONG *bn_data = NULL, *lp;

	if (BN_is_zero(a)) {
		buf = malloc(BN_is_negative(a) + 2);
		if (buf == NULL) {
			BNerror(ERR_R_MALLOC_FAILURE);
			goto err;
		}
		p = buf;
		if (BN_is_negative(a))
			*p++ = '-';
		*p++ = '0';
		*p++ = '\0';
		return (buf);
	}

	/* get an upper bound for the length of the decimal integer
	 * num <= (BN_num_bits(a) + 1) * log(2)
	 *     <= 3 * BN_num_bits(a) * 0.1001 + log(2) + 1     (rounding error)
	 *     <= BN_num_bits(a)/10 + BN_num_bits/1000 + 1 + 1
	 */
	i = BN_num_bits(a) * 3;
	num = (i / 10 + i / 1000 + 1) + 1;
	bn_data_num = num / BN_DEC_NUM + 1;
	bn_data = reallocarray(NULL, bn_data_num, sizeof(BN_ULONG));
	buf = malloc(num + 3);
	if ((buf == NULL) || (bn_data == NULL)) {
		BNerror(ERR_R_MALLOC_FAILURE);
		goto err;
	}
	if ((t = BN_dup(a)) == NULL)
		goto err;

#define BUF_REMAIN (num+3 - (size_t)(p - buf))
	p = buf;
	lp = bn_data;
	if (BN_is_negative(t))
		*p++ = '-';

	while (!BN_is_zero(t)) {
		if (lp - bn_data >= bn_data_num)
			goto err;
		*lp = BN_div_word(t, BN_DEC_CONV);
		if (*lp == (BN_ULONG)-1)
			goto err;
		lp++;
	}
	lp--;
	/* We now have a series of blocks, BN_DEC_NUM chars
	 * in length, where the last one needs truncation.
	 * The blocks need to be reversed in order. */
	snprintf(p, BUF_REMAIN, BN_DEC_FMT1, *lp);
	while (*p)
		p++;
	while (lp != bn_data) {
		lp--;
		snprintf(p, BUF_REMAIN, BN_DEC_FMT2, *lp);
		while (*p)
			p++;
	}
	ok = 1;

err:
	free(bn_data);
	BN_free(t);
	if (!ok && buf) {
		free(buf);
		buf = NULL;
	}

	return (buf);
}

int
BN_hex2bn(BIGNUM **bn, const char *a)
{
	BIGNUM *ret = NULL;
	BN_ULONG l = 0;
	int neg = 0, h, m, i,j, k, c;
	int num;

	if ((a == NULL) || (*a == '\0'))
		return (0);

	if (*a == '-') {
		neg = 1;
		a++;
	}

	for (i = 0; i <= (INT_MAX / 4) && isxdigit((unsigned char)a[i]); i++)
		;
	if (i > INT_MAX / 4)
		goto err;

	num = i + neg;
	if (bn == NULL)
		return (num);

	/* a is the start of the hex digits, and it is 'i' long */
	if (*bn == NULL) {
		if ((ret = BN_new()) == NULL)
			return (0);
	} else {
		ret= *bn;
		BN_zero(ret);
	}

	/* i is the number of hex digits */
	if (bn_expand(ret, i * 4) == NULL)
		goto err;

	j = i; /* least significant 'hex' */
	m = 0;
	h = 0;
	while (j > 0) {
		m = ((BN_BYTES*2) <= j) ? (BN_BYTES * 2) : j;
		l = 0;
		for (;;) {
			c = a[j - m];
			if ((c >= '0') && (c <= '9'))
				k = c - '0';
			else if ((c >= 'a') && (c <= 'f'))
				k = c - 'a' + 10;
			else if ((c >= 'A') && (c <= 'F'))
				k = c - 'A' + 10;
			else
				k = 0; /* paranoia */
			l = (l << 4) | k;

			if (--m <= 0) {
				ret->d[h++] = l;
				break;
			}
		}
		j -= (BN_BYTES * 2);
	}
	ret->top = h;
	bn_correct_top(ret);
	ret->neg = neg;

	*bn = ret;
	bn_check_top(ret);
	return (num);

err:
	if (*bn == NULL)
		BN_free(ret);
	return (0);
}

int
BN_dec2bn(BIGNUM **bn, const char *a)
{
	BIGNUM *ret = NULL;
	BN_ULONG l = 0;
	int neg = 0, i, j;
	int num;

	if ((a == NULL) || (*a == '\0'))
		return (0);
	if (*a == '-') {
		neg = 1;
		a++;
	}

	for (i = 0; i <= (INT_MAX / 4) && isdigit((unsigned char)a[i]); i++)
		;
	if (i > INT_MAX / 4)
		goto err;

	num = i + neg;
	if (bn == NULL)
		return (num);

	/* a is the start of the digits, and it is 'i' long.
	 * We chop it into BN_DEC_NUM digits at a time */
	if (*bn == NULL) {
		if ((ret = BN_new()) == NULL)
			return (0);
	} else {
		ret = *bn;
		BN_zero(ret);
	}

	/* i is the number of digits, a bit of an over expand */
	if (bn_expand(ret, i * 4) == NULL)
		goto err;

	j = BN_DEC_NUM - (i % BN_DEC_NUM);
	if (j == BN_DEC_NUM)
		j = 0;
	l = 0;
	while (*a) {
		l *= 10;
		l += *a - '0';
		a++;
		if (++j == BN_DEC_NUM) {
			BN_mul_word(ret, BN_DEC_CONV);
			BN_add_word(ret, l);
			l = 0;
			j = 0;
		}
	}
	ret->neg = neg;

	bn_correct_top(ret);
	*bn = ret;
	bn_check_top(ret);
	return (num);

err:
	if (*bn == NULL)
		BN_free(ret);
	return (0);
}

int
BN_asc2bn(BIGNUM **bn, const char *a)
{
	const char *p = a;
	if (*p == '-')
		p++;

	if (p[0] == '0' && (p[1] == 'X' || p[1] == 'x')) {
		if (!BN_hex2bn(bn, p + 2))
			return 0;
	} else {
		if (!BN_dec2bn(bn, p))
			return 0;
	}
	if (*a == '-')
		(*bn)->neg = 1;
	return 1;
}

#ifndef OPENSSL_NO_BIO
int
BN_print_fp(FILE *fp, const BIGNUM *a)
{
	BIO *b;
	int ret;

	if ((b = BIO_new(BIO_s_file())) == NULL)
		return (0);
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = BN_print(b, a);
	BIO_free(b);
	return (ret);
}

int
BN_print(BIO *bp, const BIGNUM *a)
{
	int i, j, v, z = 0;
	int ret = 0;

	if ((a->neg) && (BIO_write(bp, "-", 1) != 1))
		goto end;
	if (BN_is_zero(a) && (BIO_write(bp, "0", 1) != 1))
		goto end;
	for (i = a->top - 1; i >= 0; i--) {
		for (j = BN_BITS2 - 4; j >= 0; j -= 4) {
			/* strip leading zeros */
			v = ((int)(a->d[i] >> (long)j)) & 0x0f;
			if (z || (v != 0)) {
				if (BIO_write(bp, &(Hex[v]), 1) != 1)
					goto end;
				z = 1;
			}
		}
	}
	ret = 1;

end:
	return (ret);
}
#endif

char *
BN_options(void)
{
	static int init = 0;
	static char data[16];

	if (!init) {
		init++;
#ifdef BN_LLONG
		snprintf(data,sizeof data, "bn(%d,%d)",
		    (int)sizeof(BN_ULLONG) * 8, (int)sizeof(BN_ULONG) * 8);
#else
		snprintf(data,sizeof data, "bn(%d,%d)",
		    (int)sizeof(BN_ULONG) * 8, (int)sizeof(BN_ULONG) * 8);
#endif
	}
	return (data);
}
@


1.30
log
@If BN_div_word() fails (by returning (BN_ULONG)-1) or if the division
fails to reduce the input in the expected space then fail out instead
of overflowing the allocated buffer.

combines openssl commits 28a89639da50b1caed4ff3015508f23173bf3e49 and
3612ff6fcec0e3d1f2a598135fe12177c0419582

ok doug@@ beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.29 2016/03/02 06:16:11 doug Exp $ */
d83 1
a83 1
		BNerr(BN_F_BN_BN2HEX, ERR_R_MALLOC_FAILURE);
d121 1
a121 1
			BNerr(BN_F_BN_BN2DEC, ERR_R_MALLOC_FAILURE);
d143 1
a143 1
		BNerr(BN_F_BN_BN2DEC, ERR_R_MALLOC_FAILURE);
@


1.29
log
@Add bounds checking for BN_hex2bn/BN_dec2bn.

Need to make sure i * 4 won't overflow.  Based on OpenSSL:

commit 99ba9fd02fd481eb971023a3a0a251a37eb87e4c

input + ok bcook@@
ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.28 2015/09/28 18:58:33 deraadt Exp $ */
d112 1
a112 1
	int i = 0, num, ok = 0;
d139 2
a140 1
	bn_data = reallocarray(NULL, num / BN_DEC_NUM + 1, sizeof(BN_ULONG));
a154 1
	i = 0;
d156 2
d159 2
@


1.28
log
@remove excessive brackets on pointer math
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.27 2015/09/27 19:41:37 miod Exp $ */
d60 1
d123 1
a123 1
		}		
d131 1
a131 1
		
d201 1
a201 1
	for (i = 0; isxdigit((unsigned char)a[i]); i++)
d203 2
d219 1
a219 1
	/* i is the number of hex digests; */
d277 1
a277 1
	for (i = 0; isdigit((unsigned char)a[i]); i++)
d279 2
d296 1
a296 1
	/* i is the number of digests, a bit of an over expand; */
@


1.27
log
@Redo 1.25, without the NULL deref.
ok sthen@@ bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.25 2015/09/13 16:02:11 deraadt Exp $ */
d87 1
a87 1
		*(p++) = '-';
d89 1
a89 1
		*(p++) = '0';
d95 2
a96 2
				*(p++) = Hex[v >> 4];
				*(p++) = Hex[v & 0x0f];
d125 3
a127 3
			*(p++) = '-';
		*(p++) = '0';
		*(p++) = '\0';
@


1.26
log
@Revert bn_print.c:r1.25 ("handle negative-zero in BN_bn2dec() too") for
now, it has a NULL deref. Segfault reported by Mikolaj Kucharski, ok bcook
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.24 2015/09/13 15:59:29 deraadt Exp $ */
d117 14
d150 16
a165 12
	if (BN_is_zero(t)) {
		*(p++) = '0';
		*(p++) = '\0';
	} else {
		if (BN_is_negative(t))
			*p++ = '-';

		i = 0;
		while (!BN_is_zero(t)) {
			*lp = BN_div_word(t, BN_DEC_CONV);
			lp++;
		}
d167 1
a167 4
		/* We now have a series of blocks, BN_DEC_NUM chars
		 * in length, where the last one needs truncation.
		 * The blocks need to be reversed in order. */
		snprintf(p, BUF_REMAIN, BN_DEC_FMT1, *lp);
a169 6
		while (lp != bn_data) {
			lp--;
			snprintf(p, BUF_REMAIN, BN_DEC_FMT2, *lp);
			while (*p)
				p++;
		}
@


1.25
log
@Handle negative-zero in BN_bn2dec() too, just like in BN_print().
ok miod
@
text
@a116 14
	if (BN_is_zero(t)) {
		buf = malloc(BN_is_negative(t) + 2);
		if (buf == NULL) {
			BNerr(BN_F_BN_BN2DEC, ERR_R_MALLOC_FAILURE);
			goto err;
		}		
		p = buf;
		if (BN_is_negative(t))
			*(p++) = '-';
		*(p++) = '0';
		*(p++) = '\0';
		return (buf);
	}
		
d136 6
a141 2
	if (BN_is_negative(t))
		*p++ = '-';
d143 5
a147 13
	i = 0;
	while (!BN_is_zero(t)) {
		*lp = BN_div_word(t, BN_DEC_CONV);
		lp++;
	}
	lp--;
	/* We now have a series of blocks, BN_DEC_NUM chars
	 * in length, where the last one needs truncation.
	 * The blocks need to be reversed in order. */
	snprintf(p, BUF_REMAIN, BN_DEC_FMT1, *lp);
	while (*p)
		p++;
	while (lp != bn_data) {
d149 4
a152 1
		snprintf(p, BUF_REMAIN, BN_DEC_FMT2, *lp);
d155 6
@


1.24
log
@BN does support negative-zero -- BN_print() sets the standard here.
BN_bn2hex() had a 1-byte overflow when creating "-0\0".  Reported to
me a while back by unknown person -- did not have enough experience
to push this through then.
advice from jsing, ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.23 2014/07/12 16:03:36 miod Exp $ */
d117 14
d150 2
a151 6
	if (BN_is_zero(t)) {
		*(p++) = '0';
		*(p++) = '\0';
	} else {
		if (BN_is_negative(t))
			*p++ = '-';
d153 13
a165 5
		i = 0;
		while (!BN_is_zero(t)) {
			*lp = BN_div_word(t, BN_DEC_CONV);
			lp++;
		}
d167 1
a167 4
		/* We now have a series of blocks, BN_DEC_NUM chars
		 * in length, where the last one needs truncation.
		 * The blocks need to be reversed in order. */
		snprintf(p, BUF_REMAIN, BN_DEC_FMT1, *lp);
a169 6
		while (lp != bn_data) {
			lp--;
			snprintf(p, BUF_REMAIN, BN_DEC_FMT2, *lp);
			while (*p)
				p++;
		}
@


1.23
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.22 2014/07/11 08:44:48 jsing Exp $ */
d80 1
a80 1
	buf = malloc(a->top * BN_BYTES * 2 + 2);
d86 1
a86 1
	if (a->neg)
@


1.22
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.21 2014/07/10 22:45:56 jsing Exp $ */
d166 1
a166 2
	if (t != NULL)
		BN_free(t);
@


1.21
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: bn_print.c,v 1.20 2014/06/12 15:49:28 deraadt Exp $ */
d64 1
d66 1
a67 1
#include "cryptlib.h"
@


1.20
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 5
a65 1
#include <ctype.h>
a66 1
#include <openssl/buffer.h>
@


1.19
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/bn/bn_print.c */
@


1.18
log
@more: no need for null check before free
ok tedu guenther
@
text
@d75 1
a75 1
	buf = (char *)malloc(a->top * BN_BYTES * 2 + 2);
d120 1
a120 1
	buf = (char *)malloc(num + 3);
@


1.17
log
@convert 53 malloc(a*b) to reallocarray(NULL, a, b).  that is 53
potential integer overflows easily changed into an allocation return
of NULL, with errno nicely set if need be.  checks for an allocations
returning NULL are commonplace, or if the object is dereferenced
(quite normal) will result in a nice fault which can be detected &
repaired properly.
ok tedu
@
text
@d160 1
a160 2
	if (bn_data != NULL)
		free(bn_data);
@


1.16
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d119 1
a119 1
	bn_data = (BN_ULONG *)malloc((num / BN_DEC_NUM + 1) * sizeof(BN_ULONG));
@


1.15
log
@Emergency knfectomie requested by tedu@@.
@
text
@a330 1
#ifndef OPENSSL_NO_FP_API
a343 1
#endif
@


1.14
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d68 4
a71 3
char *BN_bn2hex(const BIGNUM *a)
	{
	int i,j,v,z=0;
d75 3
a77 4
	buf=(char *)malloc(a->top*BN_BYTES*2+2);
	if (buf == NULL)
		{
		BNerr(BN_F_BN_BN2HEX,ERR_R_MALLOC_FAILURE);
d79 8
a86 8
		}
	p=buf;
	if (a->neg) *(p++)='-';
	if (BN_is_zero(a)) *(p++)='0';
	for (i=a->top-1; i >=0; i--)
		{
		for (j=BN_BITS2-8; j >= 0; j-=8)
			{
d88 5
a92 7
			v=((int)(a->d[i]>>(long)j))&0xff;
			if (z || (v != 0))
				{
				*(p++)=Hex[v>>4];
				*(p++)=Hex[v&0x0f];
				z=1;
				}
d95 3
a97 1
	*p='\0';
d99 2
a100 2
	return(buf);
	}
d103 5
a107 4
char *BN_bn2dec(const BIGNUM *a)
	{
	int i=0,num, ok = 0;
	char *buf=NULL;
d109 2
a110 2
	BIGNUM *t=NULL;
	BN_ULONG *bn_data=NULL,*lp;
d115 1
a115 1
	 *     <= BN_num_bits(a)/10 + BN_num_bits/1000 + 1 + 1 
d117 9
a125 7
	i=BN_num_bits(a)*3;
	num=(i/10+i/1000+1)+1;
	bn_data=(BN_ULONG *)malloc((num/BN_DEC_NUM+1)*sizeof(BN_ULONG));
	buf=(char *)malloc(num+3);
	if ((buf == NULL) || (bn_data == NULL))
		{
		BNerr(BN_F_BN_BN2DEC,ERR_R_MALLOC_FAILURE);
a126 2
		}
	if ((t=BN_dup(a)) == NULL) goto err;
d129 6
a134 9
	p=buf;
	lp=bn_data;
	if (BN_is_zero(t))
		{
		*(p++)='0';
		*(p++)='\0';
		}
	else
		{
d138 3
a140 4
		i=0;
		while (!BN_is_zero(t))
			{
			*lp=BN_div_word(t,BN_DEC_CONV);
d142 1
a142 1
			}
d147 4
a150 4
		snprintf(p,BUF_REMAIN,BN_DEC_FMT1,*lp);
		while (*p) p++;
		while (lp != bn_data)
			{
d152 3
a154 3
			snprintf(p,BUF_REMAIN,BN_DEC_FMT2,*lp);
			while (*p) p++;
			}
d156 1
d158 1
d160 5
a164 4
	if (bn_data != NULL) free(bn_data);
	if (t != NULL) BN_free(t);
	if (!ok && buf)
		{
d167 1
a167 1
		}
d169 2
a170 2
	return(buf);
	}
d172 6
a177 5
int BN_hex2bn(BIGNUM **bn, const char *a)
	{
	BIGNUM *ret=NULL;
	BN_ULONG l=0;
	int neg=0,h,m,i,j,k,c;
d180 2
a181 1
	if ((a == NULL) || (*a == '\0')) return(0);
d183 4
a186 1
	if (*a == '-') { neg=1; a++; }
d188 1
a188 1
	for (i=0; isxdigit((unsigned char) a[i]); i++)
d191 3
a193 2
	num=i+neg;
	if (bn == NULL) return(num);
d196 4
a199 6
	if (*bn == NULL)
		{
		if ((ret=BN_new()) == NULL) return(0);
		}
	else
		{
d202 1
a202 1
		}
d205 2
a206 1
	if (bn_expand(ret,i*4) == NULL) goto err;
d208 20
a227 19
	j=i; /* least significant 'hex' */
	m=0;
	h=0;
	while (j > 0)
		{
		m=((BN_BYTES*2) <= j)?(BN_BYTES*2):j;
		l=0;
		for (;;)
			{
			c=a[j-m];
			if ((c >= '0') && (c <= '9')) k=c-'0';
			else if ((c >= 'a') && (c <= 'f')) k=c-'a'+10;
			else if ((c >= 'A') && (c <= 'F')) k=c-'A'+10;
			else k=0; /* paranoia */
			l=(l<<4)|k;

			if (--m <= 0)
				{
				ret->d[h++]=l;
a228 1
				}
a229 1
		j-=(BN_BYTES*2);
d231 3
a233 1
	ret->top=h;
d235 1
a235 1
	ret->neg=neg;
d237 1
a237 1
	*bn=ret;
d239 2
a240 1
	return(num);
d242 11
a252 9
	if (*bn == NULL) BN_free(ret);
	return(0);
	}

int BN_dec2bn(BIGNUM **bn, const char *a)
	{
	BIGNUM *ret=NULL;
	BN_ULONG l=0;
	int neg=0,i,j;
d255 6
a260 2
	if ((a == NULL) || (*a == '\0')) return(0);
	if (*a == '-') { neg=1; a++; }
d262 1
a262 1
	for (i=0; isdigit((unsigned char) a[i]); i++)
d265 3
a267 2
	num=i+neg;
	if (bn == NULL) return(num);
d271 5
a275 7
	if (*bn == NULL)
		{
		if ((ret=BN_new()) == NULL) return(0);
		}
	else
		{
		ret= *bn;
d277 1
a277 1
		}
d280 2
a281 1
	if (bn_expand(ret,i*4) == NULL) goto err;
d283 7
a289 7
	j=BN_DEC_NUM-(i%BN_DEC_NUM);
	if (j == BN_DEC_NUM) j=0;
	l=0;
	while (*a)
		{
		l*=10;
		l+= *a-'0';
d291 5
a295 7
		if (++j == BN_DEC_NUM)
			{
			BN_mul_word(ret,BN_DEC_CONV);
			BN_add_word(ret,l);
			l=0;
			j=0;
			}
d297 2
a298 1
	ret->neg=neg;
d301 1
a301 1
	*bn=ret;
d303 2
a304 1
	return(num);
d306 8
a313 6
	if (*bn == NULL) BN_free(ret);
	return(0);
	}

int BN_asc2bn(BIGNUM **bn, const char *a)
	{
d318 1
a318 2
	if (p[0] == '0' && (p[1] == 'X' || p[1] == 'x'))
		{		
d321 1
a321 3
		}
	else
		{
d324 1
a324 1
		}
d328 1
a328 1
	}
d332 3
a334 2
int BN_print_fp(FILE *fp, const BIGNUM *a)
	{
d338 4
a341 4
	if ((b=BIO_new(BIO_s_file())) == NULL)
		return(0);
	BIO_set_fp(b,fp,BIO_NOCLOSE);
	ret=BN_print(b,a);
d343 2
a344 2
	return(ret);
	}
d347 12
a358 11
int BN_print(BIO *bp, const BIGNUM *a)
	{
	int i,j,v,z=0;
	int ret=0;

	if ((a->neg) && (BIO_write(bp,"-",1) != 1)) goto end;
	if (BN_is_zero(a) && (BIO_write(bp,"0",1) != 1)) goto end;
	for (i=a->top-1; i >=0; i--)
		{
		for (j=BN_BITS2-4; j >= 0; j-=4)
			{
d360 3
a362 4
			v=((int)(a->d[i]>>(long)j))&0x0f;
			if (z || (v != 0))
				{
				if (BIO_write(bp,&(Hex[v]),1) != 1)
d364 1
a364 2
				z=1;
				}
d367 3
a369 1
	ret=1;
d371 2
a372 2
	return(ret);
	}
d375 4
a378 3
char *BN_options(void)
	{
	static int init=0;
d381 1
a381 2
	if (!init)
		{
d384 2
a385 2
		snprintf(data,sizeof data,"bn(%d,%d)",
			     (int)sizeof(BN_ULLONG)*8,(int)sizeof(BN_ULONG)*8);
d387 2
a388 2
		snprintf(data,sizeof data,"bn(%d,%d)",
			     (int)sizeof(BN_ULONG)*8,(int)sizeof(BN_ULONG)*8);
a389 2
		}
	return(data);
d391 2
@


1.13
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d150 1
a150 1
		(void) snprintf(p,BUF_REMAIN,BN_DEC_FMT1,*lp);
d155 1
a155 1
			(void) snprintf(p,BUF_REMAIN,BN_DEC_FMT2,*lp);
d370 1
a370 1
		(void) snprintf(data,sizeof data,"bn(%d,%d)",
d373 1
a373 1
		(void) snprintf(data,sizeof data,"bn(%d,%d)",
@


1.12
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d67 1
a67 1
/* Must 'OPENSSL_free' the returned data */
d74 1
a74 1
	buf=(char *)OPENSSL_malloc(a->top*BN_BYTES*2+2);
d102 1
a102 1
/* Must 'OPENSSL_free' the returned data */
d118 2
a119 2
	bn_data=(BN_ULONG *)OPENSSL_malloc((num/BN_DEC_NUM+1)*sizeof(BN_ULONG));
	buf=(char *)OPENSSL_malloc(num+3);
d161 1
a161 1
	if (bn_data != NULL) OPENSSL_free(bn_data);
d165 1
a165 1
		OPENSSL_free(buf);
@


1.11
log
@resolve conflicts
@
text
@d150 1
a150 1
		BIO_snprintf(p,BUF_REMAIN,BN_DEC_FMT1,*lp);
d155 1
a155 1
			BIO_snprintf(p,BUF_REMAIN,BN_DEC_FMT2,*lp);
d370 1
a370 1
		BIO_snprintf(data,sizeof data,"bn(%d,%d)",
d373 1
a373 1
		BIO_snprintf(data,sizeof data,"bn(%d,%d)",
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d360 19
@


1.9
log
@resolve conflicts
@
text
@d297 21
@


1.8
log
@merge 0.9.7d
@
text
@d65 1
a65 1
static const char *Hex="0123456789ABCDEF";
d105 1
a105 1
	int i=0,num;
d111 5
d117 1
a117 1
	num=(i/10+i/1000+3)+1;
a129 1
	if (t->neg) *(p++)='-';
d137 3
d159 1
d163 6
d228 1
a228 1
	bn_fix_top(ret);
d232 1
d288 1
a288 1
	bn_fix_top(ret);
d290 1
d319 1
a319 1
	if ((BN_is_zero(a)) && (BIO_write(bp,"0",1) != 1)) goto end;
a336 11
	}
#endif

#ifdef BN_DEBUG
void bn_dump1(FILE *o, const char *a, const BN_ULONG *b,int n)
	{
	int i;
	fprintf(o, "%s=", a);
	for (i=n-1;i>=0;i--)
		fprintf(o, "%08lX", b[i]); /* assumes 32-bit BN_ULONG */
	fprintf(o, "\n");
@


1.7
log
@Use BN_is_zero(), not x->top == 0 to test if a BN is zero.

ok markus@@ deraadt@@
@
text
@d143 1
a143 1
		snprintf(p,BUF_REMAIN,BN_DEC_FMT1,*lp);
d148 1
a148 1
			snprintf(p,BUF_REMAIN,BN_DEC_FMT2,*lp);
@


1.6
log
@sprintf->snprintf. deraadt@@ suggestions and ok
@
text
@d82 1
a82 1
	if (a->top == 0) *(p++)='0';
d126 1
a126 1
	if (t->top == 0)
d303 1
a303 1
	if ((a->top == 0) && (BIO_write(bp,"0",1) != 1)) goto end;
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d122 1
d143 1
a143 1
		sprintf(p,BN_DEC_FMT1,*lp);
d148 1
a148 1
			sprintf(p,BN_DEC_FMT2,*lp);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d280 2
a281 2
#ifndef NO_BIO
#ifndef NO_FP_API
d324 1
a324 1
void bn_dump1(FILE *o, const char *a, BN_ULONG *b,int n)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d67 1
a67 1
/* Must 'Free' the returned data */
d74 1
a74 1
	buf=(char *)Malloc(a->top*BN_BYTES*2+2);
d102 1
a102 1
/* Must 'Free' the returned data */
d113 2
a114 2
	bn_data=(BN_ULONG *)Malloc((num/BN_DEC_NUM+1)*sizeof(BN_ULONG));
	buf=(char *)Malloc(num+3);
d152 1
a152 1
	if (bn_data != NULL) Free(bn_data);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d140 1
a140 1
		 * in length, where the last one needs trucation.
d174 1
a174 1
	/* a is the start of the hex digets, and it is 'i' long */
d188 1
a188 1
	j=i; /* least significate 'hex' */
d239 2
a240 2
	/* a is the start of the digets, and it is 'i' long.
	 * We chop it into BN_DEC_NUM digets at a time */
a280 1

d282 1
a282 1
int BN_print_fp(FILE *fp, BIGNUM *a)
d321 1
d323 9
@


1.1
log
@Initial revision
@
text
@d62 1
a62 1
#include "buffer.h"
d65 1
a65 1
static char *Hex="0123456789ABCDEF";
d68 1
a68 2
char *BN_bn2hex(a)
BIGNUM *a;
d103 1
a103 2
char *BN_bn2dec(a)
BIGNUM *a;
d157 1
a157 3
int BN_hex2bn(bn,a)
BIGNUM **bn;
char *a;
d168 1
a168 1
	for (i=0; isxdigit(a[i]); i++)
d223 1
a223 3
int BN_dec2bn(bn,a)
BIGNUM **bn;
char *a;
d233 1
a233 1
	for (i=0; isdigit(a[i]); i++)
d283 1
a283 3
int BN_print_fp(fp, a)
FILE *fp;
BIGNUM *a;
d297 1
a297 3
int BN_print(bp, a)
BIO *bp;
BIGNUM *a;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 1
#include <openssl/buffer.h>
d65 1
a65 1
static const char *Hex="0123456789ABCDEF";
d67 3
a69 2
/* Must 'OPENSSL_free' the returned data */
char *BN_bn2hex(const BIGNUM *a)
d75 1
a75 1
	buf=(char *)OPENSSL_malloc(a->top*BN_BYTES*2+2);
d103 3
a105 2
/* Must 'OPENSSL_free' the returned data */
char *BN_bn2dec(const BIGNUM *a)
d115 2
a116 2
	bn_data=(BN_ULONG *)OPENSSL_malloc((num/BN_DEC_NUM+1)*sizeof(BN_ULONG));
	buf=(char *)OPENSSL_malloc(num+3);
d142 1
a142 1
		 * in length, where the last one needs truncation.
d154 1
a154 1
	if (bn_data != NULL) OPENSSL_free(bn_data);
d159 3
a161 1
int BN_hex2bn(BIGNUM **bn, const char *a)
d172 1
a172 1
	for (i=0; isxdigit((unsigned char) a[i]); i++)
d178 1
a178 1
	/* a is the start of the hex digits, and it is 'i' long */
d192 1
a192 1
	j=i; /* least significant 'hex' */
d227 3
a229 1
int BN_dec2bn(BIGNUM **bn, const char *a)
d239 1
a239 1
	for (i=0; isdigit((unsigned char) a[i]); i++)
d245 2
a246 2
	/* a is the start of the digits, and it is 'i' long.
	 * We chop it into BN_DEC_NUM digits at a time */
d286 6
a291 3
#ifndef OPENSSL_NO_BIO
#ifndef OPENSSL_NO_FP_API
int BN_print_fp(FILE *fp, const BIGNUM *a)
d305 3
a307 1
int BN_print(BIO *bp, const BIGNUM *a)
a331 1
#endif
a332 9
#ifdef BN_DEBUG
void bn_dump1(FILE *o, const char *a, const BN_ULONG *b,int n)
	{
	int i;
	fprintf(o, "%s=", a);
	for (i=n-1;i>=0;i--)
		fprintf(o, "%08lX", b[i]); /* assumes 32-bit BN_ULONG */
	fprintf(o, "\n");
	}
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@a121 1
#define BUF_REMAIN (num+3 - (size_t)(p - buf))
d142 1
a142 1
		BIO_snprintf(p,BUF_REMAIN,BN_DEC_FMT1,*lp);
d147 1
a147 1
			BIO_snprintf(p,BUF_REMAIN,BN_DEC_FMT2,*lp);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d65 1
a65 1
static const char Hex[]="0123456789ABCDEF";
d82 1
a82 1
	if (BN_is_zero(a)) *(p++)='0';
d105 1
a105 1
	int i=0,num, ok = 0;
a110 5
	/* get an upper bound for the length of the decimal integer
	 * num <= (BN_num_bits(a) + 1) * log(2)
	 *     <= 3 * BN_num_bits(a) * 0.1001 + log(2) + 1     (rounding error)
	 *     <= BN_num_bits(a)/10 + BN_num_bits/1000 + 1 + 1 
	 */
d112 1
a112 1
	num=(i/10+i/1000+1)+1;
d125 2
a126 1
	if (BN_is_zero(t))
a132 3
		if (BN_is_negative(t))
			*p++ = '-';

a151 1
	ok = 1;
a154 6
	if (!ok && buf)
		{
		OPENSSL_free(buf);
		buf = NULL;
		}

d214 1
a214 1
	bn_correct_top(ret);
a217 1
	bn_check_top(ret);
d273 1
a273 1
	bn_correct_top(ret);
a274 1
	bn_check_top(ret);
d303 1
a303 1
	if (BN_is_zero(a) && (BIO_write(bp,"0",1) != 1)) goto end;
d321 11
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a296 21
int BN_asc2bn(BIGNUM **bn, const char *a)
	{
	const char *p = a;
	if (*p == '-')
		p++;

	if (p[0] == '0' && (p[1] == 'X' || p[1] == 'x'))
		{		
		if (!BN_hex2bn(bn, p + 2))
			return 0;
		}
	else
		{
		if (!BN_dec2bn(bn, p))
			return 0;
		}
	if (*a == '-')
		(*bn)->neg = 1;
	return 1;
	}

@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@a359 19

char *BN_options(void)
	{
	static int init=0;
	static char data[16];

	if (!init)
		{
		init++;
#ifdef BN_LLONG
		BIO_snprintf(data,sizeof data,"bn(%d,%d)",
			     (int)sizeof(BN_ULLONG)*8,(int)sizeof(BN_ULONG)*8);
#else
		BIO_snprintf(data,sizeof data,"bn(%d,%d)",
			     (int)sizeof(BN_ULONG)*8,(int)sizeof(BN_ULONG)*8);
#endif
		}
	return(data);
	}
@


