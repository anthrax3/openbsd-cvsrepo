head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.11;
commitid	kT0fLt3r4lroFJra;

1.11
date	2017.01.21.10.38.29;	author beck;	state Exp;
branches;
next	1.10;
commitid	hKAfCRL9IRQ9ENaK;

1.10
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.9;
commitid	69Tc75PIK8JcRRsC;

1.9
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.20;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.09.17;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.43;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.57;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.11.03.02.32.09;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: bn_exp2.c,v 1.11 2017/01/21 10:38:29 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/err.h>

#include "bn_lcl.h"

#define TABLE_SIZE	32

int
BN_mod_exp2_mont(BIGNUM *rr, const BIGNUM *a1, const BIGNUM *p1,
    const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m, BN_CTX *ctx,
    BN_MONT_CTX *in_mont)
{
	int i, j, bits, b, bits1, bits2, ret = 0, wpos1, wpos2, window1, window2, wvalue1, wvalue2;
	int r_is_one = 1;
	BIGNUM *d, *r;
	const BIGNUM *a_mod_m;
	/* Tables of variables obtained from 'ctx' */
	BIGNUM *val1[TABLE_SIZE], *val2[TABLE_SIZE];
	BN_MONT_CTX *mont = NULL;

	bn_check_top(a1);
	bn_check_top(p1);
	bn_check_top(a2);
	bn_check_top(p2);
	bn_check_top(m);

	if (!(m->d[0] & 1)) {
		BNerror(BN_R_CALLED_WITH_EVEN_MODULUS);
		return (0);
	}
	bits1 = BN_num_bits(p1);
	bits2 = BN_num_bits(p2);
	if ((bits1 == 0) && (bits2 == 0)) {
		ret = BN_one(rr);
		return ret;
	}

	bits = (bits1 > bits2) ? bits1 : bits2;

	BN_CTX_start(ctx);
	if ((d = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((r = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((val1[0] = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((val2[0] = BN_CTX_get(ctx)) == NULL)
		goto err;

	if (in_mont != NULL)
		mont = in_mont;
	else {
		if ((mont = BN_MONT_CTX_new()) == NULL)
			goto err;
		if (!BN_MONT_CTX_set(mont, m, ctx))
			goto err;
	}

	window1 = BN_window_bits_for_exponent_size(bits1);
	window2 = BN_window_bits_for_exponent_size(bits2);

	/*
	 * Build table for a1:   val1[i] := a1^(2*i + 1) mod m  for i = 0 .. 2^(window1-1)
	 */
	if (a1->neg || BN_ucmp(a1, m) >= 0) {
		if (!BN_mod_ct(val1[0], a1, m, ctx))
			goto err;
		a_mod_m = val1[0];
	} else
		a_mod_m = a1;
	if (BN_is_zero(a_mod_m)) {
		BN_zero(rr);
		ret = 1;
		goto err;
	}

	if (!BN_to_montgomery(val1[0], a_mod_m, mont, ctx))
		goto err;
	if (window1 > 1) {
		if (!BN_mod_mul_montgomery(d, val1[0], val1[0], mont, ctx))
			goto err;

		j = 1 << (window1 - 1);
		for (i = 1; i < j; i++) {
			if (((val1[i] = BN_CTX_get(ctx)) == NULL) ||
			    !BN_mod_mul_montgomery(val1[i], val1[i - 1],
			    d, mont, ctx))
				goto err;
		}
	}


	/*
	 * Build table for a2:   val2[i] := a2^(2*i + 1) mod m  for i = 0 .. 2^(window2-1)
	 */
	if (a2->neg || BN_ucmp(a2, m) >= 0) {
		if (!BN_mod_ct(val2[0], a2, m, ctx))
			goto err;
		a_mod_m = val2[0];
	} else
		a_mod_m = a2;
	if (BN_is_zero(a_mod_m)) {
		BN_zero(rr);
		ret = 1;
		goto err;
	}
	if (!BN_to_montgomery(val2[0], a_mod_m, mont, ctx))
		goto err;
	if (window2 > 1) {
		if (!BN_mod_mul_montgomery(d, val2[0], val2[0], mont, ctx))
			goto err;

		j = 1 << (window2 - 1);
		for (i = 1; i < j; i++) {
			if (((val2[i] = BN_CTX_get(ctx)) == NULL) ||
			    !BN_mod_mul_montgomery(val2[i], val2[i - 1],
			    d, mont, ctx))
				goto err;
		}
	}


	/* Now compute the power product, using independent windows. */
	r_is_one = 1;
	wvalue1 = 0;  /* The 'value' of the first window */
	wvalue2 = 0;  /* The 'value' of the second window */
	wpos1 = 0;    /* If wvalue1 > 0, the bottom bit of the first window */
	wpos2 = 0;    /* If wvalue2 > 0, the bottom bit of the second window */

	if (!BN_to_montgomery(r, BN_value_one(), mont, ctx))
		goto err;
	for (b = bits - 1; b >= 0; b--) {
		if (!r_is_one) {
			if (!BN_mod_mul_montgomery(r, r,r, mont, ctx))
				goto err;
		}

		if (!wvalue1)
			if (BN_is_bit_set(p1, b)) {
			/* consider bits b-window1+1 .. b for this window */
			i = b - window1 + 1;
			while (!BN_is_bit_set(p1, i)) /* works for i<0 */
				i++;
			wpos1 = i;
			wvalue1 = 1;
			for (i = b - 1; i >= wpos1; i--) {
				wvalue1 <<= 1;
				if (BN_is_bit_set(p1, i))
					wvalue1++;
			}
		}

		if (!wvalue2)
			if (BN_is_bit_set(p2, b)) {
			/* consider bits b-window2+1 .. b for this window */
			i = b - window2 + 1;
			while (!BN_is_bit_set(p2, i))
				i++;
			wpos2 = i;
			wvalue2 = 1;
			for (i = b - 1; i >= wpos2; i--) {
				wvalue2 <<= 1;
				if (BN_is_bit_set(p2, i))
					wvalue2++;
			}
		}

		if (wvalue1 && b == wpos1) {
			/* wvalue1 is odd and < 2^window1 */
			if (!BN_mod_mul_montgomery(r, r, val1[wvalue1 >> 1],
			    mont, ctx))
				goto err;
			wvalue1 = 0;
			r_is_one = 0;
		}

		if (wvalue2 && b == wpos2) {
			/* wvalue2 is odd and < 2^window2 */
			if (!BN_mod_mul_montgomery(r, r, val2[wvalue2 >> 1],
			    mont, ctx))
				goto err;
			wvalue2 = 0;
			r_is_one = 0;
		}
	}
	if (!BN_from_montgomery(rr, r,mont, ctx))
		goto err;
	ret = 1;

err:
	if ((in_mont == NULL) && (mont != NULL))
		BN_MONT_CTX_free(mont);
	BN_CTX_end(ctx);
	bn_check_top(rr);
	return (ret);
}
@


1.11
log
@Split out BN_div and BN_mod into ct and nonct versions for Internal use.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_exp2.c,v 1.10 2015/02/09 15:49:22 jsing Exp $ */
d140 1
a140 1
		BNerr(BN_F_BN_MOD_EXP2_MONT, BN_R_CALLED_WITH_EVEN_MODULUS);
@


1.10
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_exp2.c,v 1.9 2014/07/11 08:44:47 jsing Exp $ */
d178 1
a178 1
		if (!BN_mod(val1[0], a1, m, ctx))
d209 1
a209 1
		if (!BN_mod(val2[0], a2, m, ctx))
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_exp2.c,v 1.8 2014/06/12 15:49:28 deraadt Exp $ */
d153 7
a159 5
	d = BN_CTX_get(ctx);
	r = BN_CTX_get(ctx);
	val1[0] = BN_CTX_get(ctx);
	val2[0] = BN_CTX_get(ctx);
	if (!d || !r || !val1[0] || !val2[0])
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d113 3
a115 1
#include "cryptlib.h"
@


1.7
log
@Emergency knfectomie requested by tedu@@.
@
text
@d1 1
a1 1
/* crypto/bn/bn_exp2.c */
@


1.6
log
@openssl-1.0.0e: resolve conflicts
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d118 8
a125 7
int BN_mod_exp2_mont(BIGNUM *rr, const BIGNUM *a1, const BIGNUM *p1,
	const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,
	BN_CTX *ctx, BN_MONT_CTX *in_mont)
	{
	int i,j,bits,b,bits1,bits2,ret=0,wpos1,wpos2,window1,window2,wvalue1,wvalue2;
	int r_is_one=1;
	BIGNUM *d,*r;
d129 1
a129 1
	BN_MONT_CTX *mont=NULL;
d137 7
a143 9
	if (!(m->d[0] & 1))
		{
		BNerr(BN_F_BN_MOD_EXP2_MONT,BN_R_CALLED_WITH_EVEN_MODULUS);
		return(0);
		}
	bits1=BN_num_bits(p1);
	bits2=BN_num_bits(p2);
	if ((bits1 == 0) && (bits2 == 0))
		{
d146 3
a148 3
		}
	
	bits=(bits1 > bits2)?bits1:bits2;
d155 2
a156 1
	if(!d || !r || !val1[0] || !val2[0]) goto err;
d159 7
a165 6
		mont=in_mont;
	else
		{
		if ((mont=BN_MONT_CTX_new()) == NULL) goto err;
		if (!BN_MONT_CTX_set(mont,m,ctx)) goto err;
		}
d173 2
a174 3
	if (a1->neg || BN_ucmp(a1,m) >= 0)
		{
		if (!BN_mod(val1[0],a1,m,ctx))
d177 1
a177 2
		}
	else
d179 1
a179 2
	if (BN_is_zero(a_mod_m))
		{
d183 7
a189 1
		}
d191 5
a195 11
	if (!BN_to_montgomery(val1[0],a_mod_m,mont,ctx)) goto err;
	if (window1 > 1)
		{
		if (!BN_mod_mul_montgomery(d,val1[0],val1[0],mont,ctx)) goto err;

		j=1<<(window1-1);
		for (i=1; i<j; i++)
			{
			if(((val1[i] = BN_CTX_get(ctx)) == NULL) ||
					!BN_mod_mul_montgomery(val1[i],val1[i-1],
						d,mont,ctx))
a196 1
			}
d198 1
d204 2
a205 3
	if (a2->neg || BN_ucmp(a2,m) >= 0)
		{
		if (!BN_mod(val2[0],a2,m,ctx))
d208 1
a208 2
		}
	else
d210 1
a210 2
	if (BN_is_zero(a_mod_m))
		{
d214 12
a225 12
		}
	if (!BN_to_montgomery(val2[0],a_mod_m,mont,ctx)) goto err;
	if (window2 > 1)
		{
		if (!BN_mod_mul_montgomery(d,val2[0],val2[0],mont,ctx)) goto err;

		j=1<<(window2-1);
		for (i=1; i<j; i++)
			{
			if(((val2[i] = BN_CTX_get(ctx)) == NULL) ||
					!BN_mod_mul_montgomery(val2[i],val2[i-1],
						d,mont,ctx))
a226 1
			}
d228 1
d232 11
a242 12
	r_is_one=1;
	wvalue1=0;  /* The 'value' of the first window */
	wvalue2=0;  /* The 'value' of the second window */
	wpos1=0;    /* If wvalue1 > 0, the bottom bit of the first window */
	wpos2=0;    /* If wvalue2 > 0, the bottom bit of the second window */

	if (!BN_to_montgomery(r,BN_value_one(),mont,ctx)) goto err;
	for (b=bits-1; b>=0; b--)
		{
		if (!r_is_one)
			{
			if (!BN_mod_mul_montgomery(r,r,r,mont,ctx))
d244 14
d259 2
a260 18
		
		if (!wvalue1)
			if (BN_is_bit_set(p1, b))
				{
				/* consider bits b-window1+1 .. b for this window */
				i = b-window1+1;
				while (!BN_is_bit_set(p1, i)) /* works for i<0 */
					i++;
				wpos1 = i;
				wvalue1 = 1;
				for (i = b-1; i >= wpos1; i--)
					{
					wvalue1 <<= 1;
					if (BN_is_bit_set(p1, i))
						wvalue1++;
					}
				}
		
d262 13
a274 15
			if (BN_is_bit_set(p2, b))
				{
				/* consider bits b-window2+1 .. b for this window */
				i = b-window2+1;
				while (!BN_is_bit_set(p2, i))
					i++;
				wpos2 = i;
				wvalue2 = 1;
				for (i = b-1; i >= wpos2; i--)
					{
					wvalue2 <<= 1;
					if (BN_is_bit_set(p2, i))
						wvalue2++;
					}
				}
d276 1
a276 2
		if (wvalue1 && b == wpos1)
			{
d278 2
a279 1
			if (!BN_mod_mul_montgomery(r,r,val1[wvalue1>>1],mont,ctx))
d283 3
a285 4
			}
		
		if (wvalue2 && b == wpos2)
			{
d287 2
a288 1
			if (!BN_mod_mul_montgomery(r,r,val2[wvalue2>>1],mont,ctx))
a291 1
			}
d293 2
a294 1
	if (!BN_from_montgomery(rr,r,mont,ctx))
d296 2
a297 1
	ret=1;
d299 2
a300 1
	if ((in_mont == NULL) && (mont != NULL)) BN_MONT_CTX_free(mont);
d303 2
a304 2
	return(ret);
	}
@


1.5
log
@resolve conflicts
@
text
@d304 2
a305 1
	BN_from_montgomery(rr,r,mont,ctx);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d123 1
a123 1
	int r_is_one=1,ts1=0,ts2=0;
d126 2
a127 1
	BIGNUM val1[TABLE_SIZE], val2[TABLE_SIZE];
d154 3
a156 1
	if (d == NULL || r == NULL) goto err;
a171 2
	BN_init(&val1[0]);
	ts1=1;
d174 1
a174 1
		if (!BN_mod(&(val1[0]),a1,m,ctx))
d176 1
a176 1
		a_mod_m = &(val1[0]);
d182 2
a183 1
		ret = BN_zero(rr);
d187 1
a187 1
	if (!BN_to_montgomery(&(val1[0]),a_mod_m,mont,ctx)) goto err;
d190 1
a190 1
		if (!BN_mod_mul_montgomery(d,&(val1[0]),&(val1[0]),mont,ctx)) goto err;
d195 3
a197 2
			BN_init(&(val1[i]));
			if (!BN_mod_mul_montgomery(&(val1[i]),&(val1[i-1]),d,mont,ctx))
a199 1
		ts1=i;
a205 2
	BN_init(&val2[0]);
	ts2=1;
d208 1
a208 1
		if (!BN_mod(&(val2[0]),a2,m,ctx))
d210 1
a210 1
		a_mod_m = &(val2[0]);
d216 2
a217 1
		ret = BN_zero(rr);
d220 1
a220 1
	if (!BN_to_montgomery(&(val2[0]),a_mod_m,mont,ctx)) goto err;
d223 1
a223 1
		if (!BN_mod_mul_montgomery(d,&(val2[0]),&(val2[0]),mont,ctx)) goto err;
d228 3
a230 2
			BN_init(&(val2[i]));
			if (!BN_mod_mul_montgomery(&(val2[i]),&(val2[i-1]),d,mont,ctx))
a232 1
		ts2=i;
d289 1
a289 1
			if (!BN_mod_mul_montgomery(r,r,&(val1[wvalue1>>1]),mont,ctx))
d298 1
a298 1
			if (!BN_mod_mul_montgomery(r,r,&(val2[wvalue2>>1]),mont,ctx))
d309 1
a309 4
	for (i=0; i<ts1; i++)
		BN_clear_free(&(val1[i]));
	for (i=0; i<ts2; i++)
		BN_clear_free(&(val2[i]));
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d118 3
a120 2
int BN_mod_exp2_mont(BIGNUM *rr, BIGNUM *a1, BIGNUM *p1, BIGNUM *a2,
	     BIGNUM *p2, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
d125 1
a125 1
	BIGNUM *a_mod_m;
d144 2
a145 2
		BN_one(rr);
		return(1);
d147 1
d171 1
a171 1
	if (BN_ucmp(a1,m) >= 0)
d179 6
d206 1
a206 1
	if (BN_ucmp(a2,m) >= 0)
d214 5
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d1 111
d116 1
a116 12
/* I've done some timing with different table sizes.
 * The main hassle is that even with bits set at 3, this requires
 * 63 BIGNUMs to store the pre-calculated values.
 *          512   1024 
 * bits=1  75.4%  79.4%
 * bits=2  61.2%  62.4%
 * bits=3  61.3%  59.3%
 * The lack of speed improvement is also a function of the pre-calculation
 * which could be removed.
 */
#define EXP2_TABLE_BITS	2 /* 1  2  3  4  5  */
#define EXP2_TABLE_SIZE	4 /* 2  4  8 16 32  */
d121 5
a125 4
	int i,j,k,bits,bits1,bits2,ret=0,wstart,wend,window,xvalue,yvalue;
	int start=1,ts=0,x,y;
	BIGNUM *d,*aa1,*aa2,*r;
	BIGNUM val[EXP2_TABLE_SIZE][EXP2_TABLE_SIZE];
d136 1
a136 1
		BNerr(BN_F_BN_MOD_EXP_MONT,BN_R_CALLED_WITH_EVEN_MODULUS);
d146 1
a152 5
	bits=(bits1 > bits2)?bits1:bits2;

	/* If this is not done, things will break in the montgomery
	 * part */

d161 8
a168 5
	BN_init(&(val[0][0]));
	BN_init(&(val[1][1]));
	BN_init(&(val[0][1]));
	BN_init(&(val[1][0]));
	ts=1;
d171 3
a173 2
		BN_mod(&(val[1][0]),a1,m,ctx);
		aa1= &(val[1][0]);
d176 22
a197 1
		aa1=a1;
d200 3
a202 2
		BN_mod(&(val[0][1]),a2,m,ctx);
		aa2= &(val[0][1]);
d205 5
a209 19
		aa2=a2;
	if (!BN_to_montgomery(&(val[1][0]),aa1,mont,ctx)) goto err;
	if (!BN_to_montgomery(&(val[0][1]),aa2,mont,ctx)) goto err;
	if (!BN_mod_mul_montgomery(&(val[1][1]),
		&(val[1][0]),&(val[0][1]),mont,ctx))
		goto err;

#if 0
	if (bits <= 20) /* This is probably 3 or 0x10001, so just do singles */
		window=1;
	else if (bits > 250)
		window=5;	/* max size of window */
	else if (bits >= 120)
		window=4;
	else
		window=3;
#else
	window=EXP2_TABLE_BITS;
#endif
d211 2
a212 13
	k=1<<window;
	for (x=0; x<k; x++)
		{
		if (x >= 2)
			{
			BN_init(&(val[x][0]));
			BN_init(&(val[x][1]));
			if (!BN_mod_mul_montgomery(&(val[x][0]),
				&(val[1][0]),&(val[x-1][0]),mont,ctx)) goto err;
			if (!BN_mod_mul_montgomery(&(val[x][1]),
				&(val[1][0]),&(val[x-1][1]),mont,ctx)) goto err;
			}
		for (y=2; y<k; y++)
d214 2
a215 3
			BN_init(&(val[x][y]));
			if (!BN_mod_mul_montgomery(&(val[x][y]),
				&(val[x][y-1]),&(val[0][1]),mont,ctx))
d218 1
a219 1
	ts=k;
d221 12
a232 14
	start=1;	/* This is used to avoid multiplication etc
			 * when there is only the value '1' in the
			 * buffer. */
	xvalue=0;	/* The 'x value' of the window */
	yvalue=0;	/* The 'y value' of the window */
	wstart=bits-1;	/* The top bit of the window */
	wend=0;		/* The bottom bit of the window */

        if (!BN_to_montgomery(r,BN_value_one(),mont,ctx)) goto err;
	for (;;)
		{
		xvalue=BN_is_bit_set(p1,wstart);
		yvalue=BN_is_bit_set(p2,wstart);
		if (!(xvalue || yvalue))
d234 6
a239 1
			if (!start)
d241 12
a252 2
				if (!BN_mod_mul_montgomery(r,r,r,mont,ctx))
					goto err;
d254 19
a272 13
			wstart--;
			if (wstart < 0) break;
			continue;
			}
		/* We now have wstart on a 'set' bit, we now need to work out
		 * how bit a window to do.  To do this we need to scan
		 * forward until the last set bit before the end of the
		 * window */
		j=wstart;
		/* xvalue=BN_is_bit_set(p1,wstart); already set */
		/* yvalue=BN_is_bit_set(p1,wstart); already set */
		wend=0;
		for (i=1; i<window; i++)
d274 5
a278 5
			if (wstart-i < 0) break;
			xvalue+=xvalue;
			xvalue|=BN_is_bit_set(p1,wstart-i);
			yvalue+=yvalue;
			yvalue|=BN_is_bit_set(p2,wstart-i);
a279 9

		/* i is the size of the current window */
		/* add the 'bytes above' */
		if (!start)
			for (j=0; j<i; j++)
				{
				if (!BN_mod_mul_montgomery(r,r,r,mont,ctx))
					goto err;
				}
d281 1
a281 2
		/* wvalue will be an odd number < 2^window */
		if (xvalue || yvalue)
d283 5
a287 2
			if (!BN_mod_mul_montgomery(r,r,&(val[xvalue][yvalue]),
				mont,ctx)) goto err;
a288 5

		/* move the 'window' down further */
		wstart-=i;
		start=0;
		if (wstart < 0) break;
d295 4
a298 7
	for (i=0; i<ts; i++)
		{
		for (j=0; j<ts; j++)
			{
			BN_clear_free(&(val[i][j]));
			}
		}
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d12 1
a12 1
 * The lack of speed improvment is also a function of the pre-calculation
a37 2
	d= &(ctx->bn[ctx->tos++]);
	r= &(ctx->bn[ctx->tos++]);
d42 1
a42 1
		BN_one(r);
d45 6
d190 1
a190 1
	ctx->tos-=2;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a0 111
/* crypto/bn/bn_exp2.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

d5 12
a16 1
#define TABLE_SIZE	32
d18 2
a19 3
int BN_mod_exp2_mont(BIGNUM *rr, const BIGNUM *a1, const BIGNUM *p1,
	const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,
	BN_CTX *ctx, BN_MONT_CTX *in_mont)
d21 4
a24 5
	int i,j,bits,b,bits1,bits2,ret=0,wpos1,wpos2,window1,window2,wvalue1,wvalue2;
	int r_is_one=1,ts1=0,ts2=0;
	BIGNUM *d,*r;
	const BIGNUM *a_mod_m;
	BIGNUM val1[TABLE_SIZE], val2[TABLE_SIZE];
d35 1
a35 1
		BNerr(BN_F_BN_MOD_EXP2_MONT,BN_R_CALLED_WITH_EVEN_MODULUS);
d38 2
d44 2
a45 2
		ret = BN_one(rr);
		return ret;
a46 1
	
d49 2
a50 4
	BN_CTX_start(ctx);
	d = BN_CTX_get(ctx);
	r = BN_CTX_get(ctx);
	if (d == NULL || r == NULL) goto err;
d60 6
a65 9
	window1 = BN_window_bits_for_exponent_size(bits1);
	window2 = BN_window_bits_for_exponent_size(bits2);

	/*
	 * Build table for a1:   val1[i] := a1^(2*i + 1) mod m  for i = 0 .. 2^(window1-1)
	 */
	BN_init(&val1[0]);
	ts1=1;
	if (a1->neg || BN_ucmp(a1,m) >= 0)
d67 2
a68 3
		if (!BN_mod(&(val1[0]),a1,m,ctx))
			goto err;
		a_mod_m = &(val1[0]);
d71 2
a72 2
		a_mod_m = a1;
	if (BN_is_zero(a_mod_m))
d74 9
a82 1
		ret = BN_zero(rr);
a83 1
		}
d85 15
a99 2
	if (!BN_to_montgomery(&(val1[0]),a_mod_m,mont,ctx)) goto err;
	if (window1 > 1)
d101 1
a101 4
		if (!BN_mod_mul_montgomery(d,&(val1[0]),&(val1[0]),mont,ctx)) goto err;

		j=1<<(window1-1);
		for (i=1; i<j; i++)
d103 6
a108 3
			BN_init(&(val1[i]));
			if (!BN_mod_mul_montgomery(&(val1[i]),&(val1[i-1]),d,mont,ctx))
				goto err;
d110 1
a110 29
		ts1=i;
		}


	/*
	 * Build table for a2:   val2[i] := a2^(2*i + 1) mod m  for i = 0 .. 2^(window2-1)
	 */
	BN_init(&val2[0]);
	ts2=1;
	if (a2->neg || BN_ucmp(a2,m) >= 0)
		{
		if (!BN_mod(&(val2[0]),a2,m,ctx))
			goto err;
		a_mod_m = &(val2[0]);
		}
	else
		a_mod_m = a2;
	if (BN_is_zero(a_mod_m))
		{
		ret = BN_zero(rr);
		goto err;
		}
	if (!BN_to_montgomery(&(val2[0]),a_mod_m,mont,ctx)) goto err;
	if (window2 > 1)
		{
		if (!BN_mod_mul_montgomery(d,&(val2[0]),&(val2[0]),mont,ctx)) goto err;

		j=1<<(window2-1);
		for (i=1; i<j; i++)
d112 3
a114 2
			BN_init(&(val2[i]));
			if (!BN_mod_mul_montgomery(&(val2[i]),&(val2[i-1]),d,mont,ctx))
a116 1
		ts2=i;
d118 1
d120 14
a133 12

	/* Now compute the power product, using independent windows. */
	r_is_one=1;
	wvalue1=0;  /* The 'value' of the first window */
	wvalue2=0;  /* The 'value' of the second window */
	wpos1=0;    /* If wvalue1 > 0, the bottom bit of the first window */
	wpos2=0;    /* If wvalue2 > 0, the bottom bit of the second window */

	if (!BN_to_montgomery(r,BN_value_one(),mont,ctx)) goto err;
	for (b=bits-1; b>=0; b--)
		{
		if (!r_is_one)
d135 1
a135 6
			if (!BN_mod_mul_montgomery(r,r,r,mont,ctx))
				goto err;
			}
		
		if (!wvalue1)
			if (BN_is_bit_set(p1, b))
d137 2
a138 12
				/* consider bits b-window1+1 .. b for this window */
				i = b-window1+1;
				while (!BN_is_bit_set(p1, i)) /* works for i<0 */
					i++;
				wpos1 = i;
				wvalue1 = 1;
				for (i = b-1; i >= wpos1; i--)
					{
					wvalue1 <<= 1;
					if (BN_is_bit_set(p1, i))
						wvalue1++;
					}
d140 25
a164 3
		
		if (!wvalue2)
			if (BN_is_bit_set(p2, b))
d166 2
a167 12
				/* consider bits b-window2+1 .. b for this window */
				i = b-window2+1;
				while (!BN_is_bit_set(p2, i))
					i++;
				wpos2 = i;
				wvalue2 = 1;
				for (i = b-1; i >= wpos2; i--)
					{
					wvalue2 <<= 1;
					if (BN_is_bit_set(p2, i))
						wvalue2++;
					}
a168 9

		if (wvalue1 && b == wpos1)
			{
			/* wvalue1 is odd and < 2^window1 */
			if (!BN_mod_mul_montgomery(r,r,&(val1[wvalue1>>1]),mont,ctx))
				goto err;
			wvalue1 = 0;
			r_is_one = 0;
			}
d170 2
a171 1
		if (wvalue2 && b == wpos2)
d173 2
a174 5
			/* wvalue2 is odd and < 2^window2 */
			if (!BN_mod_mul_montgomery(r,r,&(val2[wvalue2>>1]),mont,ctx))
				goto err;
			wvalue2 = 0;
			r_is_one = 0;
d176 5
d186 8
a193 5
	BN_CTX_end(ctx);
	for (i=0; i<ts1; i++)
		BN_clear_free(&(val1[i]));
	for (i=0; i<ts2; i++)
		BN_clear_free(&(val2[i]));
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d123 1
a123 1
	int r_is_one=1;
d126 1
a126 2
	/* Tables of variables obtained from 'ctx' */
	BIGNUM *val1[TABLE_SIZE], *val2[TABLE_SIZE];
d153 1
a153 3
	val1[0] = BN_CTX_get(ctx);
	val2[0] = BN_CTX_get(ctx);
	if(!d || !r || !val1[0] || !val2[0]) goto err;
d169 2
d173 1
a173 1
		if (!BN_mod(val1[0],a1,m,ctx))
d175 1
a175 1
		a_mod_m = val1[0];
d181 1
a181 2
		BN_zero(rr);
		ret = 1;
d185 1
a185 1
	if (!BN_to_montgomery(val1[0],a_mod_m,mont,ctx)) goto err;
d188 1
a188 1
		if (!BN_mod_mul_montgomery(d,val1[0],val1[0],mont,ctx)) goto err;
d193 2
a194 3
			if(((val1[i] = BN_CTX_get(ctx)) == NULL) ||
					!BN_mod_mul_montgomery(val1[i],val1[i-1],
						d,mont,ctx))
d197 1
d204 2
d208 1
a208 1
		if (!BN_mod(val2[0],a2,m,ctx))
d210 1
a210 1
		a_mod_m = val2[0];
d216 1
a216 2
		BN_zero(rr);
		ret = 1;
d219 1
a219 1
	if (!BN_to_montgomery(val2[0],a_mod_m,mont,ctx)) goto err;
d222 1
a222 1
		if (!BN_mod_mul_montgomery(d,val2[0],val2[0],mont,ctx)) goto err;
d227 2
a228 3
			if(((val2[i] = BN_CTX_get(ctx)) == NULL) ||
					!BN_mod_mul_montgomery(val2[i],val2[i-1],
						d,mont,ctx))
d231 1
d288 1
a288 1
			if (!BN_mod_mul_montgomery(r,r,val1[wvalue1>>1],mont,ctx))
d297 1
a297 1
			if (!BN_mod_mul_montgomery(r,r,val2[wvalue2>>1],mont,ctx))
d308 4
a311 1
	bn_check_top(rr);
@


1.1.1.3
log
@import OpenSSL 1.0.0e
@
text
@d304 1
a304 2
	if (!BN_from_montgomery(rr,r,mont,ctx))
		goto err;
@


