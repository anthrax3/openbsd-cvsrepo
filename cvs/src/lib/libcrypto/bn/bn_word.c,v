head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13;
locks; strict;
comment	@ * @;


1.13
date	2016.07.05.02.54.35;	author bcook;	state Exp;
branches;
next	1.12;
commitid	NHesUMO050EuY7RN;

1.12
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2013.02.14.15.11.43;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches
	1.8.14.1;
next	1.7;

1.7
date	2003.09.25.19.55.36;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.21.08.14.19;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.23;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.21;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.46;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.00;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.45;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.04.13.15.16.33;	author miod;	state Exp;
branches;
next	;

1.8.14.1
date	2013.02.15.10.50.32;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.13
log
@On systems where we do not have BN_ULLONG defined (most 64-bit systems),
BN_mod_word() can return incorrect results if the supplied modulus is
too big, so we need to fall back to BN_div_word.

Now that BN_mod_word may fail, handle errors properly update the man page.

Thanks to Brian Smith for pointing out these fixes from BoringSSL:

https://boringssl.googlesource.com/boringssl/+/67cb49d045f04973ddba0f92fe8a8ad483c7da89
https://boringssl.googlesource.com/boringssl/+/44bedc348d9491e63c7ed1438db100a4b8a830be

ok beck@@
@
text
@/* $OpenBSD: bn_word.c,v 1.12 2014/07/11 08:44:48 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include "bn_lcl.h"

BN_ULONG
BN_mod_word(const BIGNUM *a, BN_ULONG w)
{
#ifndef BN_LLONG
	BN_ULONG ret = 0;
#else
	BN_ULLONG ret = 0;
#endif
	int i;

	if (w == 0)
		return (BN_ULONG) - 1;

#ifndef BN_ULLONG
	/* If |w| is too long and we don't have |BN_ULLONG| then we need to fall back
	* to using |BN_div_word|. */
	if (w > ((BN_ULONG)1 << BN_BITS4)) {
		BIGNUM *tmp = BN_dup(a);
		if (tmp == NULL) {
			return (BN_ULONG)-1;
		}
		ret = BN_div_word(tmp, w);
		BN_free(tmp);
		return ret;
	}
#endif

	bn_check_top(a);
	w &= BN_MASK2;
	for (i = a->top - 1; i >= 0; i--) {
#ifndef BN_LLONG
		ret = ((ret << BN_BITS4) | ((a->d[i] >> BN_BITS4) &
		    BN_MASK2l)) % w;
		ret = ((ret << BN_BITS4) | (a->d[i] & BN_MASK2l)) % w;
#else
		ret = (BN_ULLONG)(((ret << (BN_ULLONG)BN_BITS2) |
		    a->d[i]) % (BN_ULLONG)w);
#endif
	}
	return ((BN_ULONG)ret);
}

BN_ULONG
BN_div_word(BIGNUM *a, BN_ULONG w)
{
	BN_ULONG ret = 0;
	int i, j;

	bn_check_top(a);
	w &= BN_MASK2;

	if (!w)
		/* actually this an error (division by zero) */
		return (BN_ULONG) - 1;
	if (a->top == 0)
		return 0;

	/* normalize input (so bn_div_words doesn't complain) */
	j = BN_BITS2 - BN_num_bits_word(w);
	w <<= j;
	if (!BN_lshift(a, a, j))
		return (BN_ULONG) - 1;

	for (i = a->top - 1; i >= 0; i--) {
		BN_ULONG l, d;

		l = a->d[i];
		d = bn_div_words(ret, l, w);
		ret = (l - ((d*w)&BN_MASK2))&BN_MASK2;
		a->d[i] = d;
	}
	if ((a->top > 0) && (a->d[a->top - 1] == 0))
		a->top--;
	ret >>= j;
	bn_check_top(a);
	return (ret);
}

int
BN_add_word(BIGNUM *a, BN_ULONG w)
{
	BN_ULONG l;
	int i;

	bn_check_top(a);
	w &= BN_MASK2;

	/* degenerate case: w is zero */
	if (!w)
		return 1;
	/* degenerate case: a is zero */
	if (BN_is_zero(a))
		return BN_set_word(a, w);
	/* handle 'a' when negative */
	if (a->neg) {
		a->neg = 0;
		i = BN_sub_word(a, w);
		if (!BN_is_zero(a))
			a->neg=!(a->neg);
		return (i);
	}
	for (i = 0; w != 0 && i < a->top; i++) {
		a->d[i] = l = (a->d[i] + w) & BN_MASK2;
		w = (w > l) ? 1 : 0;
	}
	if (w && i == a->top) {
		if (bn_wexpand(a, a->top + 1) == NULL)
			return 0;
		a->top++;
		a->d[i] = w;
	}
	bn_check_top(a);
	return (1);
}

int
BN_sub_word(BIGNUM *a, BN_ULONG w)
{
	int i;

	bn_check_top(a);
	w &= BN_MASK2;

	/* degenerate case: w is zero */
	if (!w)
		return 1;
	/* degenerate case: a is zero */
	if (BN_is_zero(a)) {
		i = BN_set_word(a, w);
		if (i != 0)
			BN_set_negative(a, 1);
		return i;
	}
	/* handle 'a' when negative */
	if (a->neg) {
		a->neg = 0;
		i = BN_add_word(a, w);
		a->neg = 1;
		return (i);
	}

	if ((a->top == 1) && (a->d[0] < w)) {
		a->d[0] = w - a->d[0];
		a->neg = 1;
		return (1);
	}
	i = 0;
	for (;;) {
		if (a->d[i] >= w) {
			a->d[i] -= w;
			break;
		} else {
			a->d[i] = (a->d[i] - w) & BN_MASK2;
			i++;
			w = 1;
		}
	}
	if ((a->d[i] == 0) && (i == (a->top - 1)))
		a->top--;
	bn_check_top(a);
	return (1);
}

int
BN_mul_word(BIGNUM *a, BN_ULONG w)
{
	BN_ULONG ll;

	bn_check_top(a);
	w &= BN_MASK2;
	if (a->top) {
		if (w == 0)
			BN_zero(a);
		else {
			ll = bn_mul_words(a->d, a->d, a->top, w);
			if (ll) {
				if (bn_wexpand(a, a->top + 1) == NULL)
					return (0);
				a->d[a->top++] = ll;
			}
		}
	}
	bn_check_top(a);
	return (1);
}
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_word.c,v 1.11 2014/06/12 15:49:28 deraadt Exp $ */
d75 14
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
@


1.10
log
@Emergency knfectomie requested by tedu@@.
@
text
@d1 1
a1 1
/* crypto/bn/bn_word.c */
@


1.9
log
@cherry pick bugfixes for http://www.openssl.org/news/secadv_20130205.txt
from the openssl git (changes between openssl 1.0.1c and 1.0.1d).
ok djm@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d63 3
a65 2
BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w)
	{
d67 1
a67 1
	BN_ULONG ret=0;
d69 1
a69 1
	BN_ULLONG ret=0;
d74 1
a74 1
		return (BN_ULONG)-1;
d77 2
a78 3
	w&=BN_MASK2;
	for (i=a->top-1; i>=0; i--)
		{
d80 3
a82 2
		ret=((ret<<BN_BITS4)|((a->d[i]>>BN_BITS4)&BN_MASK2l))%w;
		ret=((ret<<BN_BITS4)|(a->d[i]&BN_MASK2l))%w;
d84 2
a85 2
		ret=(BN_ULLONG)(((ret<<(BN_ULLONG)BN_BITS2)|a->d[i])%
			(BN_ULLONG)w);
a86 2
		}
	return((BN_ULONG)ret);
d88 2
d91 3
a93 2
BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w)
	{
d102 1
a102 1
		return (BN_ULONG)-1;
d110 4
a113 1
		return (BN_ULONG)-1;
d115 6
a120 10
	for (i=a->top-1; i>=0; i--)
		{
		BN_ULONG l,d;
		
		l=a->d[i];
		d=bn_div_words(ret,l,w);
		ret=(l-((d*w)&BN_MASK2))&BN_MASK2;
		a->d[i]=d;
		}
	if ((a->top > 0) && (a->d[a->top-1] == 0))
d124 2
a125 2
	return(ret);
	}
d127 3
a129 2
int BN_add_word(BIGNUM *a, BN_ULONG w)
	{
d137 2
a138 1
	if (!w) return 1;
d140 2
a141 1
	if(BN_is_zero(a)) return BN_set_word(a, w);
d143 3
a145 4
	if (a->neg)
		{
		a->neg=0;
		i=BN_sub_word(a,w);
d148 9
a156 10
		return(i);
		}
	for (i=0;w!=0 && i<a->top;i++)
		{
		a->d[i] = l = (a->d[i]+w)&BN_MASK2;
		w = (w>l)?1:0;
		}
	if (w && i==a->top)
		{
		if (bn_wexpand(a,a->top+1) == NULL) return 0;
d158 2
a159 2
		a->d[i]=w;
		}
d161 2
a162 2
	return(1);
	}
d164 3
a166 2
int BN_sub_word(BIGNUM *a, BN_ULONG w)
	{
d173 2
a174 1
	if (!w) return 1;
d176 2
a177 3
	if(BN_is_zero(a))
		{
		i = BN_set_word(a,w);
d181 1
a181 1
		}
d183 6
a188 7
	if (a->neg)
		{
		a->neg=0;
		i=BN_add_word(a,w);
		a->neg=1;
		return(i);
		}
d190 9
a198 12
	if ((a->top == 1) && (a->d[0] < w))
		{
		a->d[0]=w-a->d[0];
		a->neg=1;
		return(1);
		}
	i=0;
	for (;;)
		{
		if (a->d[i] >= w)
			{
			a->d[i]-=w;
d200 2
a201 4
			}
		else
			{
			a->d[i]=(a->d[i]-w)&BN_MASK2;
d203 1
a203 2
			w=1;
			}
d205 2
a206 1
	if ((a->d[i] == 0) && (i == (a->top-1)))
d209 2
a210 2
	return(1);
	}
d212 3
a214 2
int BN_mul_word(BIGNUM *a, BN_ULONG w)
	{
d218 2
a219 3
	w&=BN_MASK2;
	if (a->top)
		{
d222 6
a227 8
		else
			{
			ll=bn_mul_words(a->d,a->d,a->top,w);
			if (ll)
				{
				if (bn_wexpand(a,a->top+1) == NULL) return(0);
				a->d[a->top++]=ll;
				}
d230 1
d232 2
a233 3
	return(1);
	}

@


1.8
log
@resolve conflicts
@
text
@d147 1
a147 6
	/* Only expand (and risk failing) if it's possibly necessary */
	if (((BN_ULONG)(a->d[a->top - 1] + 1) == 0) &&
			(bn_wexpand(a,a->top+1) == NULL))
		return(0);
	i=0;
	for (;;)
d149 2
a150 10
		if (i >= a->top)
			l=w;
		else
			l=(a->d[i]+w)&BN_MASK2;
		a->d[i]=l;
		if (w > l)
			w=1;
		else
			break;
		i++;
d152 3
a154 1
	if (i >= a->top)
d156 2
@


1.8.14.1
log
@Fix a buffer overflow in BN_add_word which would occur when certain values
are added to a single word bignum.

from markus@@
ok djm@@
@
text
@d147 6
a152 1
	for (i=0;w!=0 && i<a->top;i++)
d154 10
a163 2
		a->d[i] = l = (a->d[i]+w)&BN_MASK2;
		w = (w>l)?1:0;
d165 1
a165 3
	if (w && i==a->top)
		{
		if (bn_wexpand(a,a->top+1) == NULL) return 0;
a166 2
		a->d[i]=w;
		}
@


1.7
log
@Return immediately if argument to BN_sub_word is zero.

ok markus@@ deraadt@@
@
text
@d72 4
d92 17
a108 2
	BN_ULONG ret;
	int i;
a109 3
	if (a->top == 0) return(0);
	ret=0;
	w&=BN_MASK2;
d121 2
d131 2
a132 2
	if ((w & BN_MASK2) == 0)
		return(1);
d134 5
d147 4
a150 2
	w&=BN_MASK2;
	if (bn_wexpand(a,a->top+1) == NULL) return(0);
d157 1
a157 1
			l=(a->d[i]+(BN_ULONG)w)&BN_MASK2;
d167 1
d175 2
a176 2
	if ((w & BN_MASK2) == 0)
		return(1);
d178 12
a189 1
	if (BN_is_zero(a) || a->neg)
a196 1
	w&=BN_MASK2;
d220 1
d228 1
d244 1
@


1.6
log
@Do not produce a corrupt BIGNUM when adding 0 to 0 using BN_add_word().
ok markus@@
@
text
@d149 3
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d113 3
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d126 4
a129 1
		l=(a->d[i]+(BN_ULONG)w)&BN_MASK2;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d118 1
a118 1
			a->neg=1;
d143 1
a143 1
	if (a->neg)
d185 3
a187 2
		ll=bn_mul_words(a->d,a->d,a->top,w);
		if (ll)
d189 6
a194 2
			if (bn_wexpand(a,a->top+1) == NULL) return(0);
			a->d[a->top++]=ll;
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d63 1
a63 1
BN_ULONG BN_mod_word(BIGNUM *a, BN_ULONG w)
@


1.1
log
@Initial revision
@
text
@d63 1
a63 3
BN_ULONG BN_mod_word(a, w)
BIGNUM *a;
unsigned long w;
d76 2
a77 2
		ret=((ret<<BN_BITS4)|((a->d[i]>>BN_BITS4)&BN_MASK2l))%(unsigned long)w;
		ret=((ret<<BN_BITS4)|(a->d[i]&BN_MASK2l))%(unsigned long)w;
d86 1
a86 3
BN_ULONG BN_div_word(a, w)
BIGNUM *a;
unsigned long w;
d99 1
a99 1
		d=bn_div64(ret,l,w);
d103 1
a103 1
	if (a->d[a->top-1] == 0)
d108 1
a108 3
int BN_add_word(a, w)
BIGNUM *a;
unsigned long w;
d139 1
a139 3
int BN_sub_word(a, w)
BIGNUM *a;
unsigned long w;
d178 1
a178 3
int BN_mul_word(a,w)
BIGNUM *a;
unsigned long w;
d192 1
a192 1
	return(0);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 3
a65 1
BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w)
d78 2
a79 2
		ret=((ret<<BN_BITS4)|((a->d[i]>>BN_BITS4)&BN_MASK2l))%w;
		ret=((ret<<BN_BITS4)|(a->d[i]&BN_MASK2l))%w;
d88 3
a90 1
BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w)
d103 1
a103 1
		d=bn_div_words(ret,l,w);
d107 1
a107 1
	if ((a->top > 0) && (a->d[a->top-1] == 0))
d112 3
a114 1
int BN_add_word(BIGNUM *a, BN_ULONG w)
d124 1
a124 1
			a->neg=!(a->neg);
d145 3
a147 1
int BN_sub_word(BIGNUM *a, BN_ULONG w)
d151 1
a151 1
	if (BN_is_zero(a) || a->neg)
d186 3
a188 1
int BN_mul_word(BIGNUM *a, BN_ULONG w)
d195 2
a196 3
		if (w == 0)
			BN_zero(a);
		else
d198 2
a199 6
			ll=bn_mul_words(a->d,a->d,a->top,w);
			if (ll)
				{
				if (bn_wexpand(a,a->top+1) == NULL) return(0);
				a->d[a->top++]=ll;
				}
d202 1
a202 1
	return(1);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d126 1
a126 4
		if (i >= a->top)
			l=w;
		else
			l=(a->d[i]+(BN_ULONG)w)&BN_MASK2;
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a71 4
	if (w == 0)
		return (BN_ULONG)-1;

	bn_check_top(a);
d88 2
a89 17
	BN_ULONG ret = 0;
	int i, j;

	bn_check_top(a);
	w &= BN_MASK2;

	if (!w)
		/* actually this an error (division by zero) */
		return (BN_ULONG)-1;
	if (a->top == 0)
		return 0;

	/* normalize input (so bn_div_words doesn't complain) */
	j = BN_BITS2 - BN_num_bits_word(w);
	w <<= j;
	if (!BN_lshift(a, a, j))
		return (BN_ULONG)-1;
d91 3
a104 2
	ret >>= j;
	bn_check_top(a);
a112 8
	bn_check_top(a);
	w &= BN_MASK2;

	/* degenerate case: w is zero */
	if (!w) return 1;
	/* degenerate case: a is zero */
	if(BN_is_zero(a)) return BN_set_word(a, w);
	/* handle 'a' when negative */
d121 2
a122 4
	/* Only expand (and risk failing) if it's possibly necessary */
	if (((BN_ULONG)(a->d[a->top - 1] + 1) == 0) &&
			(bn_wexpand(a,a->top+1) == NULL))
		return(0);
d129 1
a129 1
			l=(a->d[i]+w)&BN_MASK2;
a138 1
	bn_check_top(a);
d146 1
a146 15
	bn_check_top(a);
	w &= BN_MASK2;

	/* degenerate case: w is zero */
	if (!w) return 1;
	/* degenerate case: a is zero */
	if(BN_is_zero(a))
		{
		i = BN_set_word(a,w);
		if (i != 0)
			BN_set_negative(a, 1);
		return i;
		}
	/* handle 'a' when negative */
	if (a->neg)
d154 1
a177 1
	bn_check_top(a);
a184 1
	bn_check_top(a);
a199 1
	bn_check_top(a);
@


1.1.1.5
log
@Import OpenSSL 1.0.1g
@
text
@d147 6
a152 1
	for (i=0;w!=0 && i<a->top;i++)
d154 10
a163 2
		a->d[i] = l = (a->d[i]+w)&BN_MASK2;
		w = (w>l)?1:0;
d165 1
a165 3
	if (w && i==a->top)
		{
		if (bn_wexpand(a,a->top+1) == NULL) return 0;
a166 2
		a->d[i]=w;
		}
@


