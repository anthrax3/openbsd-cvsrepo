head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.14;
commitid	kT0fLt3r4lroFJra;

1.14
date	2017.01.21.10.38.29;	author beck;	state Exp;
branches;
next	1.13;
commitid	hKAfCRL9IRQ9ENaK;

1.13
date	2015.04.29.00.11.12;	author doug;	state Exp;
branches;
next	1.12;
commitid	DUDpybhZMBt1ldZh;

1.12
date	2015.03.21.08.05.20;	author doug;	state Exp;
branches;
next	1.11;
commitid	aAjfYOuLLKYzi2vC;

1.11
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	2nvnQBrv22dLtvTt;

1.8
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.23;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.20;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.38;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.59;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: bn_recp.c,v 1.14 2017/01/21 10:38:29 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/err.h>

#include "bn_lcl.h"

void
BN_RECP_CTX_init(BN_RECP_CTX *recp)
{
	BN_init(&(recp->N));
	BN_init(&(recp->Nr));
	recp->num_bits = 0;
	recp->flags = 0;
}

BN_RECP_CTX *
BN_RECP_CTX_new(void)
{
	BN_RECP_CTX *ret;

	if ((ret = malloc(sizeof(BN_RECP_CTX))) == NULL)
		return (NULL);

	BN_RECP_CTX_init(ret);
	ret->flags = BN_FLG_MALLOCED;
	return (ret);
}

void
BN_RECP_CTX_free(BN_RECP_CTX *recp)
{
	if (recp == NULL)
		return;

	BN_free(&(recp->N));
	BN_free(&(recp->Nr));
	if (recp->flags & BN_FLG_MALLOCED)
		free(recp);
}

int
BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
{
	if (!BN_copy(&(recp->N), d))
		return 0;
	BN_zero(&(recp->Nr));
	recp->num_bits = BN_num_bits(d);
	recp->shift = 0;
	return (1);
}

int
BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
    BN_RECP_CTX *recp, BN_CTX *ctx)
{
	int ret = 0;
	BIGNUM *a;
	const BIGNUM *ca;

	BN_CTX_start(ctx);
	if ((a = BN_CTX_get(ctx)) == NULL)
		goto err;
	if (y != NULL) {
		if (x == y) {
			if (!BN_sqr(a, x, ctx))
				goto err;
		} else {
			if (!BN_mul(a, x, y, ctx))
				goto err;
		}
		ca = a;
	} else
		ca = x; /* Just do the mod */

	ret = BN_div_recp(NULL, r, ca, recp, ctx);

err:
	BN_CTX_end(ctx);
	bn_check_top(r);
	return (ret);
}

int
BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, BN_RECP_CTX *recp,
    BN_CTX *ctx)
{
	int i, j, ret = 0;
	BIGNUM *a, *b, *d, *r;

	BN_CTX_start(ctx);
	a = BN_CTX_get(ctx);
	b = BN_CTX_get(ctx);
	if (dv != NULL)
		d = dv;
	else
		d = BN_CTX_get(ctx);
	if (rem != NULL)
		r = rem;
	else
		r = BN_CTX_get(ctx);
	if (a == NULL || b == NULL || d == NULL || r == NULL)
		goto err;

	if (BN_ucmp(m, &(recp->N)) < 0) {
		BN_zero(d);
		if (!BN_copy(r, m)) {
			BN_CTX_end(ctx);
			return 0;
		}
		BN_CTX_end(ctx);
		return (1);
	}

	/* We want the remainder
	 * Given input of ABCDEF / ab
	 * we need multiply ABCDEF by 3 digests of the reciprocal of ab
	 *
	 */

	/* i := max(BN_num_bits(m), 2*BN_num_bits(N)) */
	i = BN_num_bits(m);
	j = recp->num_bits << 1;
	if (j > i)
		i = j;

	/* Nr := round(2^i / N) */
	if (i != recp->shift)
		recp->shift = BN_reciprocal(&(recp->Nr), &(recp->N), i, ctx);

	/* BN_reciprocal returns i, or -1 for an error */
	if (recp->shift == -1)
		goto err;

	/* d := |round(round(m / 2^BN_num_bits(N)) * recp->Nr / 2^(i - BN_num_bits(N)))|
	 *    = |round(round(m / 2^BN_num_bits(N)) * round(2^i / N) / 2^(i - BN_num_bits(N)))|
	 *   <= |(m / 2^BN_num_bits(N)) * (2^i / N) * (2^BN_num_bits(N) / 2^i)|
	 *    = |m/N|
	 */
	if (!BN_rshift(a, m, recp->num_bits))
		goto err;
	if (!BN_mul(b, a,&(recp->Nr), ctx))
		goto err;
	if (!BN_rshift(d, b, i - recp->num_bits))
		goto err;
	d->neg = 0;

	if (!BN_mul(b, &(recp->N), d, ctx))
		goto err;
	if (!BN_usub(r, m, b))
		goto err;
	r->neg = 0;

#if 1
	j = 0;
	while (BN_ucmp(r, &(recp->N)) >= 0) {
		if (j++ > 2) {
			BNerror(BN_R_BAD_RECIPROCAL);
			goto err;
		}
		if (!BN_usub(r, r, &(recp->N)))
			goto err;
		if (!BN_add_word(d, 1))
			goto err;
	}
#endif

	r->neg = BN_is_zero(r) ? 0 : m->neg;
	d->neg = m->neg^recp->N.neg;
	ret = 1;

err:
	BN_CTX_end(ctx);
	bn_check_top(dv);
	bn_check_top(rem);
	return (ret);
}

/* len is the expected size of the result
 * We actually calculate with an extra word of precision, so
 * we can do faster division if the remainder is not required.
 */
/* r := 2^len / m */
int
BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)
{
	int ret = -1;
	BIGNUM *t;

	BN_CTX_start(ctx);
	if ((t = BN_CTX_get(ctx)) == NULL)
		goto err;

	if (!BN_set_bit(t, len))
		goto err;

	if (!BN_div_ct(r, NULL, t,m, ctx))
		goto err;

	ret = len;

err:
	bn_check_top(r);
	BN_CTX_end(ctx);
	return (ret);
}
@


1.14
log
@Split out BN_div and BN_mod into ct and nonct versions for Internal use.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_recp.c,v 1.13 2015/04/29 00:11:12 doug Exp $ */
d215 1
a215 1
			BNerr(BN_F_BN_DIV_RECP, BN_R_BAD_RECIPROCAL);
@


1.13
log
@Add missing BN_CTX_end() calls.

After calling BN_CTX_start(), there must be a BN_CTX_end() before
returning.  There were missing BN_CTX_end() calls in error paths.  One diff
chunk was simply removing redundant code related to this.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_recp.c,v 1.12 2015/03/21 08:05:20 doug Exp $ */
d254 1
a254 1
	if (!BN_div(r, NULL, t,m, ctx))
@


1.12
log
@Fix indentation that incorrectly implies a different control flow.

The actual control flow is intentional while the indenting is incorrect.
This is intended to be a cosmetic change.

Verified that each of these was part of a KNF commit that wasn't intending
to change behavior.  Also, double checked against the history of changes in
OpenSSL and BoringSSL.

Addresses Coverity CIDs: 78842, 78859, 78863.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_recp.c,v 1.11 2014/07/11 08:44:48 jsing Exp $ */
d164 2
a165 1
		if (!BN_copy(r, m))
d167 1
@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_recp.c,v 1.10 2014/06/12 15:49:28 deraadt Exp $ */
d184 5
a188 3
		recp->shift = BN_reciprocal(&(recp->Nr), &(recp->N), i, ctx); /* BN_reciprocal returns i, or -1 for an error */
		if (recp->shift == -1)
			goto err;
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
a62 1
#include "cryptlib.h"
@


1.9
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* crypto/bn/bn_recp.c */
@


1.8
log
@Emergency knfectomie requested by tedu@@.
@
text
@d77 1
a77 1
	if ((ret = (BN_RECP_CTX *)malloc(sizeof(BN_RECP_CTX))) == NULL)
@


1.7
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d63 3
a65 2
void BN_RECP_CTX_init(BN_RECP_CTX *recp)
	{
d68 7
a74 6
	recp->num_bits=0;
	recp->flags=0;
	}

BN_RECP_CTX *BN_RECP_CTX_new(void)
	{
d77 2
a78 2
	if ((ret=(BN_RECP_CTX *)malloc(sizeof(BN_RECP_CTX))) == NULL)
		return(NULL);
d81 9
a89 8
	ret->flags=BN_FLG_MALLOCED;
	return(ret);
	}

void BN_RECP_CTX_free(BN_RECP_CTX *recp)
	{
	if(recp == NULL)
	    return;
d95 1
a95 1
	}
d97 5
a101 3
int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
	{
	if (!BN_copy(&(recp->N),d)) return 0;
d103 10
a112 9
	recp->num_bits=BN_num_bits(d);
	recp->shift=0;
	return(1);
	}

int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
	BN_RECP_CTX *recp, BN_CTX *ctx)
	{
	int ret=0;
d117 10
a126 7
	if ((a = BN_CTX_get(ctx)) == NULL) goto err;
	if (y != NULL)
		{
		if (x == y)
			{ if (!BN_sqr(a,x,ctx)) goto err; }
		else
			{ if (!BN_mul(a,x,y,ctx)) goto err; }
d128 4
a131 3
		}
	else
		ca=x; /* Just do the mod */
a132 1
	ret = BN_div_recp(NULL,r,ca,recp,ctx);
d136 2
a137 2
	return(ret);
	}
d139 6
a144 5
int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
	BN_RECP_CTX *recp, BN_CTX *ctx)
	{
	int i,j,ret=0;
	BIGNUM *a,*b,*d,*r;
d147 2
a148 2
	a=BN_CTX_get(ctx);
	b=BN_CTX_get(ctx);
d150 1
a150 1
		d=dv;
d152 1
a152 1
		d=BN_CTX_get(ctx);
d154 1
a154 1
		r=rem;
d156 3
a158 2
		r=BN_CTX_get(ctx);
	if (a == NULL || b == NULL || d == NULL || r == NULL) goto err;
d160 1
a160 2
	if (BN_ucmp(m,&(recp->N)) < 0)
		{
d162 2
a163 1
		if (!BN_copy(r,m)) return 0;
d165 2
a166 2
		return(1);
		}
d175 4
a178 3
	i=BN_num_bits(m);
	j=recp->num_bits<<1;
	if (j>i) i=j;
d182 3
a184 3
		recp->shift=BN_reciprocal(&(recp->Nr),&(recp->N),
			i,ctx); /* BN_reciprocal returns i, or -1 for an error */
	if (recp->shift == -1) goto err;
d191 13
a203 8
	if (!BN_rshift(a,m,recp->num_bits)) goto err;
	if (!BN_mul(b,a,&(recp->Nr),ctx)) goto err;
	if (!BN_rshift(d,b,i-recp->num_bits)) goto err;
	d->neg=0;

	if (!BN_mul(b,&(recp->N),d,ctx)) goto err;
	if (!BN_usub(r,m,b)) goto err;
	r->neg=0;
d206 4
a209 6
	j=0;
	while (BN_ucmp(r,&(recp->N)) >= 0)
		{
		if (j++ > 2)
			{
			BNerr(BN_F_BN_DIV_RECP,BN_R_BAD_RECIPROCAL);
a210 3
			}
		if (!BN_usub(r,r,&(recp->N))) goto err;
		if (!BN_add_word(d,1)) goto err;
d212 5
d219 4
a222 3
	r->neg=BN_is_zero(r)?0:m->neg;
	d->neg=m->neg^recp->N.neg;
	ret=1;
d227 2
a228 2
	return(ret);
	} 
d235 4
a238 3
int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)
	{
	int ret= -1;
d242 2
a243 1
	if((t = BN_CTX_get(ctx)) == NULL) goto err;
d245 2
a246 1
	if (!BN_set_bit(t,len)) goto err;
d248 4
a251 1
	if (!BN_div(r,NULL,t,m,ctx)) goto err;
a252 1
	ret=len;
d256 2
a257 2
	return(ret);
	}
@


1.6
log
@resolve conflicts
@
text
@d75 1
a75 1
	if ((ret=(BN_RECP_CTX *)OPENSSL_malloc(sizeof(BN_RECP_CTX))) == NULL)
d91 1
a91 1
		OPENSSL_free(recp);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d97 1
a97 1
	if (!BN_zero(&(recp->Nr))) return 0;
d126 1
d151 1
a151 1
		if (!BN_zero(d)) return 0;
d194 1
a194 1
			BNerr(BN_F_BN_MOD_MUL_RECIPROCAL,BN_R_BAD_RECIPROCAL);
d207 2
d220 1
a220 1
	BIGNUM t;
d222 2
a223 1
	BN_init(&t);
d225 1
a225 2
	if (!BN_zero(&t)) goto err;
	if (!BN_set_bit(&t,len)) goto err;
d227 1
a227 1
	if (!BN_div(r,NULL,&t,m,ctx)) goto err;
d231 2
a232 1
	BN_free(&t);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d96 2
a97 2
	BN_copy(&(recp->N),d);
	BN_zero(&(recp->Nr));
d103 2
a104 2
int BN_mod_mul_reciprocal(BIGNUM *r, BIGNUM *x, BIGNUM *y, BN_RECP_CTX *recp,
	     BN_CTX *ctx)
d108 1
d118 1
d121 1
a121 1
		a=x; /* Just do the mod */
d123 1
a123 2
	BN_div_recp(NULL,r,a,recp,ctx);
	ret=1;
d129 2
a130 2
int BN_div_recp(BIGNUM *dv, BIGNUM *rem, BIGNUM *m, BN_RECP_CTX *recp,
	     BN_CTX *ctx)
d150 2
a151 2
		BN_zero(d);
		BN_copy(r,m);
d161 2
a163 1

a165 1
	j>>=1;
d167 1
d170 2
a171 1
			i,ctx);
d173 6
a178 1
	if (!BN_rshift(a,m,j)) goto err;
d180 1
a180 1
	if (!BN_rshift(d,b,i-j)) goto err;
d182 1
d213 2
a214 1
int BN_reciprocal(BIGNUM *r, BIGNUM *m, int len, BN_CTX *ctx)
d221 1
a221 1
	BN_zero(&t);
d225 1
a230 1

@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d75 1
a75 1
	if ((ret=(BN_RECP_CTX *)Malloc(sizeof(BN_RECP_CTX))) == NULL)
d91 1
a91 1
		Free(recp);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d109 2
a110 1
	a= &(ctx->bn[ctx->tos++]);
d124 1
a124 1
	ctx->tos--;
d131 1
a131 1
	int i,j,tos,ret=0,ex;
d134 3
a136 3
	tos=ctx->tos;
	a= &(ctx->bn[ctx->tos++]);
	b= &(ctx->bn[ctx->tos++]);
d140 1
a140 1
		d= &(ctx->bn[ctx->tos++]);
d144 2
a145 1
		r= &(ctx->bn[ctx->tos++]);
d151 1
a151 1
		ctx->tos=tos;
d162 3
a164 12
	j=recp->num_bits*2;
	if (j > i)
		{
		i=j;
		ex=0;
		}
	else
		{
		ex=(i-j)/2;
		}

	j=i/2;
d170 1
a170 1
	if (!BN_rshift(a,m,j-ex)) goto err;
d172 1
a172 1
	if (!BN_rshift(d,b,j+ex)) goto err;
d178 1
a179 1
#if 1
d196 1
a196 1
	ctx->tos=tos;
@


1.1
log
@Initial revision
@
text
@d63 30
a92 16
int BN_mod_mul_reciprocal(r, x, y, m, i, nb, ctx)
BIGNUM *r;
BIGNUM *x;
BIGNUM *y;
BIGNUM *m;
BIGNUM *i;
int nb;
BN_CTX *ctx;
	{
	int ret=0,j;
	BIGNUM *a,*b,*c,*d;

	a=ctx->bn[ctx->tos++];
	b=ctx->bn[ctx->tos++];
	c=ctx->bn[ctx->tos++];
	d=ctx->bn[ctx->tos++];
d94 23
a116 2
	if (x == y)
		{ if (!BN_sqr(a,x,ctx)) goto err; }
d118 67
a184 6
		{ if (!BN_mul(a,x,y)) goto err; }
	if (!BN_rshift(d,a,nb)) goto err;
	if (!BN_mul(b,d,i)) goto err;
	if (!BN_rshift(c,b,nb)) goto err;
	if (!BN_mul(b,m,c)) goto err;
	if (!BN_sub(r,a,b)) goto err;
d186 2
a187 1
	while (BN_cmp(r,m) >= 0)
d194 2
a195 1
		if (!BN_sub(r,r,m)) goto err;
d197 1
d199 2
d203 1
a203 1
	ctx->tos-=4;
d205 1
a205 1
	}
d207 5
a211 4
int BN_reciprocal(r, m,ctx)
BIGNUM *r;
BIGNUM *m;
BN_CTX *ctx;
d213 2
a214 2
	int nm,ret= -1;
	BIGNUM *t;
d216 1
a216 1
	t=ctx->bn[ctx->tos++];
d218 2
a219 2
	nm=BN_num_bits(m);
	if (!BN_lshift(t,BN_value_one(),nm*2)) goto err;
d221 2
a222 2
	if (!BN_div(r,NULL,t,m,ctx)) goto err;
	ret=nm;
d224 1
a224 1
	ctx->tos--;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 16
a78 30
void BN_RECP_CTX_init(BN_RECP_CTX *recp)
	{
	BN_init(&(recp->N));
	BN_init(&(recp->Nr));
	recp->num_bits=0;
	recp->flags=0;
	}

BN_RECP_CTX *BN_RECP_CTX_new(void)
	{
	BN_RECP_CTX *ret;

	if ((ret=(BN_RECP_CTX *)OPENSSL_malloc(sizeof(BN_RECP_CTX))) == NULL)
		return(NULL);

	BN_RECP_CTX_init(ret);
	ret->flags=BN_FLG_MALLOCED;
	return(ret);
	}

void BN_RECP_CTX_free(BN_RECP_CTX *recp)
	{
	if(recp == NULL)
	    return;

	BN_free(&(recp->N));
	BN_free(&(recp->Nr));
	if (recp->flags & BN_FLG_MALLOCED)
		OPENSSL_free(recp);
	}
d80 2
a81 26
int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
	{
	if (!BN_copy(&(recp->N),d)) return 0;
	if (!BN_zero(&(recp->Nr))) return 0;
	recp->num_bits=BN_num_bits(d);
	recp->shift=0;
	return(1);
	}

int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
	BN_RECP_CTX *recp, BN_CTX *ctx)
	{
	int ret=0;
	BIGNUM *a;
	const BIGNUM *ca;

	BN_CTX_start(ctx);
	if ((a = BN_CTX_get(ctx)) == NULL) goto err;
	if (y != NULL)
		{
		if (x == y)
			{ if (!BN_sqr(a,x,ctx)) goto err; }
		else
			{ if (!BN_mul(a,x,y,ctx)) goto err; }
		ca = a;
		}
d83 6
a88 67
		ca=x; /* Just do the mod */

	ret = BN_div_recp(NULL,r,ca,recp,ctx);
err:
	BN_CTX_end(ctx);
	return(ret);
	}

int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
	BN_RECP_CTX *recp, BN_CTX *ctx)
	{
	int i,j,ret=0;
	BIGNUM *a,*b,*d,*r;

	BN_CTX_start(ctx);
	a=BN_CTX_get(ctx);
	b=BN_CTX_get(ctx);
	if (dv != NULL)
		d=dv;
	else
		d=BN_CTX_get(ctx);
	if (rem != NULL)
		r=rem;
	else
		r=BN_CTX_get(ctx);
	if (a == NULL || b == NULL || d == NULL || r == NULL) goto err;

	if (BN_ucmp(m,&(recp->N)) < 0)
		{
		if (!BN_zero(d)) return 0;
		if (!BN_copy(r,m)) return 0;
		BN_CTX_end(ctx);
		return(1);
		}

	/* We want the remainder
	 * Given input of ABCDEF / ab
	 * we need multiply ABCDEF by 3 digests of the reciprocal of ab
	 *
	 */

	/* i := max(BN_num_bits(m), 2*BN_num_bits(N)) */
	i=BN_num_bits(m);
	j=recp->num_bits<<1;
	if (j>i) i=j;

	/* Nr := round(2^i / N) */
	if (i != recp->shift)
		recp->shift=BN_reciprocal(&(recp->Nr),&(recp->N),
			i,ctx); /* BN_reciprocal returns i, or -1 for an error */
	if (recp->shift == -1) goto err;

	/* d := |round(round(m / 2^BN_num_bits(N)) * recp->Nr / 2^(i - BN_num_bits(N)))|
	 *    = |round(round(m / 2^BN_num_bits(N)) * round(2^i / N) / 2^(i - BN_num_bits(N)))|
	 *   <= |(m / 2^BN_num_bits(N)) * (2^i / N) * (2^BN_num_bits(N) / 2^i)|
	 *    = |m/N|
	 */
	if (!BN_rshift(a,m,recp->num_bits)) goto err;
	if (!BN_mul(b,a,&(recp->Nr),ctx)) goto err;
	if (!BN_rshift(d,b,i-recp->num_bits)) goto err;
	d->neg=0;

	if (!BN_mul(b,&(recp->N),d,ctx)) goto err;
	if (!BN_usub(r,m,b)) goto err;
	r->neg=0;

#if 1
d90 1
a90 1
	while (BN_ucmp(r,&(recp->N)) >= 0)
d97 1
a97 2
		if (!BN_usub(r,r,&(recp->N))) goto err;
		if (!BN_add_word(d,1)) goto err;
a98 1
#endif
a99 2
	r->neg=BN_is_zero(r)?0:m->neg;
	d->neg=m->neg^recp->N.neg;
d102 1
a102 1
	BN_CTX_end(ctx);
d104 1
a104 1
	} 
d106 4
a109 6
/* len is the expected size of the result
 * We actually calculate with an extra word of precision, so
 * we can do faster division if the remainder is not required.
 */
/* r := 2^len / m */
int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)
d111 2
a112 2
	int ret= -1;
	BIGNUM t;
d114 1
a114 1
	BN_init(&t);
d116 2
a117 2
	if (!BN_zero(&t)) goto err;
	if (!BN_set_bit(&t,len)) goto err;
d119 2
a120 3
	if (!BN_div(r,NULL,&t,m,ctx)) goto err;

	ret=len;
d122 1
a122 1
	BN_free(&t);
d125 1
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d97 1
a97 1
	BN_zero(&(recp->Nr));
a125 1
	bn_check_top(r);
d150 1
a150 1
		BN_zero(d);
d193 1
a193 1
			BNerr(BN_F_BN_DIV_RECP,BN_R_BAD_RECIPROCAL);
a205 2
	bn_check_top(dv);
	bn_check_top(rem);
d217 1
a217 1
	BIGNUM *t;
d219 1
a219 2
	BN_CTX_start(ctx);
	if((t = BN_CTX_get(ctx)) == NULL) goto err;
d221 2
a222 1
	if (!BN_set_bit(t,len)) goto err;
d224 1
a224 1
	if (!BN_div(r,NULL,t,m,ctx)) goto err;
d228 1
a228 2
	bn_check_top(r);
	BN_CTX_end(ctx);
@


