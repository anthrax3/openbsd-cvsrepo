head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.10;
commitid	kT0fLt3r4lroFJra;

1.10
date	2014.10.28.07.35.58;	author jsg;	state Exp;
branches;
next	1.9;
commitid	pi8qF4s0vNCGLEKv;

1.9
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.8;
commitid	yQEL1wOWIearrW15;

1.8
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.23.19.16.15;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.16;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.43;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.56;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: bn_add.c,v 1.10 2014/10/28 07:35:58 jsg Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/err.h>

#include "bn_lcl.h"

/* r can == a or b */
int
BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
	const BIGNUM *tmp;
	int a_neg = a->neg, ret;

	bn_check_top(a);
	bn_check_top(b);

	/*  a +  b	a+b
	 *  a + -b	a-b
	 * -a +  b	b-a
	 * -a + -b	-(a+b)
	 */
	if (a_neg ^ b->neg) {
		/* only one is negative */
		if (a_neg)
				{ tmp = a;
			a = b;
			b = tmp;
		}

		/* we are now a - b */

		if (BN_ucmp(a, b) < 0) {
			if (!BN_usub(r, b, a))
				return (0);
			r->neg = 1;
		} else {
			if (!BN_usub(r, a, b))
				return (0);
			r->neg = 0;
		}
		return (1);
	}

	ret = BN_uadd(r, a, b);
	r->neg = a_neg;
	bn_check_top(r);
	return ret;
}

/* unsigned add of b to a */
int
BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
	int max, min, dif;
	BN_ULONG *ap, *bp, *rp, carry, t1, t2;
	const BIGNUM *tmp;

	bn_check_top(a);
	bn_check_top(b);

	if (a->top < b->top) {
		tmp = a;
		a = b;
		b = tmp;
	}
	max = a->top;
	min = b->top;
	dif = max - min;

	if (bn_wexpand(r, max + 1) == NULL)
		return 0;

	r->top = max;

	ap = a->d;
	bp = b->d;
	rp = r->d;

	carry = bn_add_words(rp, ap, bp, min);
	rp += min;
	ap += min;
	bp += min;

	if (carry) {
		while (dif) {
			dif--;
			t1 = *(ap++);
			t2 = (t1 + 1) & BN_MASK2;
			*(rp++) = t2;
			if (t2) {
				carry = 0;
				break;
			}
		}
		if (carry) {
			/* carry != 0 => dif == 0 */
			*rp = 1;
			r->top++;
		}
	}
	if (dif && rp != ap)
		while (dif--)
			/* copy remaining words if ap != rp */
			*(rp++) = *(ap++);
	r->neg = 0;
	bn_check_top(r);
	return 1;
}

/* unsigned subtraction of b from a, a must be larger than b. */
int
BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
	int max, min, dif;
	BN_ULONG t1, t2, *ap, *bp, *rp;
	int i, carry;

	bn_check_top(a);
	bn_check_top(b);

	max = a->top;
	min = b->top;
	dif = max - min;

	if (dif < 0)	/* hmm... should not be happening */
	{
		BNerror(BN_R_ARG2_LT_ARG3);
		return (0);
	}

	if (bn_wexpand(r, max) == NULL)
		return (0);

	ap = a->d;
	bp = b->d;
	rp = r->d;

#if 1
	carry = 0;
	for (i = min; i != 0; i--) {
		t1= *(ap++);
		t2= *(bp++);
		if (carry) {
			carry = (t1 <= t2);
			t1 = (t1 - t2 - 1)&BN_MASK2;
		} else {
			carry = (t1 < t2);
			t1 = (t1 - t2)&BN_MASK2;
		}
		*(rp++) = t1&BN_MASK2;
	}
#else
	carry = bn_sub_words(rp, ap, bp, min);
	ap += min;
	bp += min;
	rp += min;
#endif
	if (carry) /* subtracted */
	{
		if (!dif)
			/* error: a < b */
			return 0;
		while (dif) {
			dif--;
			t1 = *(ap++);
			t2 = (t1 - 1)&BN_MASK2;
			*(rp++) = t2;
			if (t1)
				break;
		}
	}
#if 0
	memcpy(rp, ap, sizeof(*rp)*(max - i));
#else
	if (rp != ap) {
		for (;;) {
			if (!dif--)
				break;
			rp[0] = ap[0];
			if (!dif--)
				break;
			rp[1] = ap[1];
			if (!dif--)
				break;
			rp[2] = ap[2];
			if (!dif--)
				break;
			rp[3] = ap[3];
			rp += 4;
			ap += 4;
		}
	}
#endif

	r->top = max;
	r->neg = 0;
	bn_correct_top(r);
	return (1);
}

int
BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
	int max;
	int add = 0, neg = 0;
	const BIGNUM *tmp;

	bn_check_top(a);
	bn_check_top(b);

	/*  a -  b	a-b
	 *  a - -b	a+b
	 * -a -  b	-(a+b)
	 * -a - -b	b-a
	 */
	if (a->neg) {
		if (b->neg) {
			tmp = a;
			a = b;
			b = tmp;
		} else {
			add = 1;
			neg = 1;
		}
	} else {
		if (b->neg) {
			add = 1;
			neg = 0;
		}
	}

	if (add) {
		if (!BN_uadd(r, a, b))
			return (0);
		r->neg = neg;
		return (1);
	}

	/* We are actually doing a - b :-) */

	max = (a->top > b->top) ? a->top : b->top;
	if (bn_wexpand(r, max) == NULL)
		return (0);
	if (BN_ucmp(a, b) < 0) {
		if (!BN_usub(r, b, a))
			return (0);
		r->neg = 1;
	} else {
		if (!BN_usub(r, a, b))
			return (0);
		r->neg = 0;
	}
	bn_check_top(r);
	return (1);
}
@


1.10
log
@deregister; no binary change
ok jsing@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_add.c,v 1.9 2014/07/11 08:44:47 jsing Exp $ */
d185 1
a185 1
		BNerr(BN_F_BN_USUB, BN_R_ARG2_LT_ARG3);
@


1.9
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_add.c,v 1.8 2014/06/12 15:49:28 deraadt Exp $ */
d173 1
a173 1
	register BN_ULONG t1, t2, *ap, *bp, *rp;
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
a62 1
#include "cryptlib.h"
@


1.7
log
@Emergency knfectomie requested by tedu@@.
@
text
@d1 1
a1 1
/* crypto/bn/bn_add.c */
@


1.6
log
@Remove IRIX_CC_BUG workaround.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d64 3
a66 2
int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
	{
d78 1
a78 2
	if (a_neg ^ b->neg)
		{
d81 4
a84 1
			{ tmp=a; a=b; b=tmp; }
d88 8
a95 11
		if (BN_ucmp(a,b) < 0)
			{
			if (!BN_usub(r,b,a)) return(0);
			r->neg=1;
			}
		else
			{
			if (!BN_usub(r,a,b)) return(0);
			r->neg=0;
			}
		return(1);
d97 2
d100 1
a100 1
	ret = BN_uadd(r,a,b);
d104 1
a104 1
	}
d107 5
a111 4
int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
	{
	int max,min,dif;
	BN_ULONG *ap,*bp,*rp,carry,t1,t2;
d117 5
a121 2
	if (a->top < b->top)
		{ tmp=a; a=b; b=tmp; }
d126 1
a126 1
	if (bn_wexpand(r,max+1) == NULL)
d129 1
a129 1
	r->top=max;
d131 8
d140 2
a141 13
	ap=a->d;
	bp=b->d;
	rp=r->d;

	carry=bn_add_words(rp,ap,bp,min);
	rp+=min;
	ap+=min;
	bp+=min;

	if (carry)
		{
		while (dif)
			{
d144 1
a144 1
			t2 = (t1+1) & BN_MASK2;
d146 2
a147 3
			if (t2)
				{
				carry=0;
a148 1
				}
d150 2
a151 2
		if (carry)
			{
a154 1
			}
d156 1
d164 1
a164 1
	}
d167 6
a172 5
int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
	{
	int max,min,dif;
	register BN_ULONG t1,t2,*ap,*bp,*rp;
	int i,carry;
d182 4
a185 4
		{
		BNerr(BN_F_BN_USUB,BN_R_ARG2_LT_ARG3);
		return(0);
		}
d187 2
a188 1
	if (bn_wexpand(r,max) == NULL) return(0);
d190 3
a192 3
	ap=a->d;
	bp=b->d;
	rp=r->d;
d195 2
a196 3
	carry=0;
	for (i = min; i != 0; i--)
		{
d199 6
a204 11
		if (carry)
			{
			carry=(t1 <= t2);
			t1=(t1-t2-1)&BN_MASK2;
			}
		else
			{
			carry=(t1 < t2);
			t1=(t1-t2)&BN_MASK2;
			}
		*(rp++)=t1&BN_MASK2;
d206 2
d209 4
a212 4
	carry=bn_sub_words(rp,ap,bp,min);
	ap+=min;
	bp+=min;
	rp+=min;
d215 1
a215 1
		{
d219 1
a219 2
		while (dif)
			{
d222 1
a222 1
			t2 = (t1-1)&BN_MASK2;
a225 1
			}
d227 1
d229 1
a229 1
	memcpy(rp,ap,sizeof(*rp)*(max-i));
d231 16
a246 15
	if (rp != ap)
		{
		for (;;)
			{
			if (!dif--) break;
			rp[0]=ap[0];
			if (!dif--) break;
			rp[1]=ap[1];
			if (!dif--) break;
			rp[2]=ap[2];
			if (!dif--) break;
			rp[3]=ap[3];
			rp+=4;
			ap+=4;
			}
d248 1
d251 2
a252 2
	r->top=max;
	r->neg=0;
d254 2
a255 2
	return(1);
	}
d257 3
a259 2
int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
	{
d261 1
a261 1
	int add=0,neg=0;
d272 13
a284 10
	if (a->neg)
		{
		if (b->neg)
			{ tmp=a; a=b; b=tmp; }
		else
			{ add=1; neg=1; }
		}
	else
		{
		if (b->neg) { add=1; neg=0; }
d286 1
d288 6
a293 6
	if (add)
		{
		if (!BN_uadd(r,a,b)) return(0);
		r->neg=neg;
		return(1);
		}
d297 12
a308 12
	max=(a->top > b->top)?a->top:b->top;
	if (bn_wexpand(r,max) == NULL) return(0);
	if (BN_ucmp(a,b) < 0)
		{
		if (!BN_usub(r,b,a)) return(0);
		r->neg=1;
		}
	else
		{
		if (!BN_usub(r,a,b)) return(0);
		r->neg=0;
		}
d310 2
a311 3
	return(1);
	}

@


1.5
log
@resolve conflicts
@
text
@a170 3
#if defined(IRIX_CC_BUG) && !defined(LINT)
	int dummy;
#endif
a206 3
#if defined(IRIX_CC_BUG) && !defined(LINT)
		dummy=t1;
#endif
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d67 1
a67 1
	int a_neg = a->neg;
d98 4
a101 6
	if (!BN_uadd(r,a,b)) return(0);
	if (a_neg) /* both are neg */
		r->neg=1;
	else
		r->neg=0;
	return(1);
d104 1
a104 1
/* unsigned add of b to a, r must be large enough */
d107 2
a108 3
	register int i;
	int max,min;
	BN_ULONG *ap,*bp,*rp,carry,t1;
d116 3
a118 2
	max=a->top;
	min=b->top;
d121 1
a121 1
		return(0);
a128 1
	carry=0;
a133 1
	i=min;
d137 1
a137 1
		while (i < max)
d139 5
a143 3
			i++;
			t1= *(ap++);
			if ((*(rp++)=(t1+1)&BN_MASK2) >= t1)
d149 1
a149 1
		if ((i >= max) && carry)
d151 2
a152 1
			*(rp++)=1;
d156 4
a159 6
	if (rp != ap)
		{
		for (; i<max; i++)
			*(rp++)= *(ap++);
		}
	/* memcpy(rp,ap,sizeof(*ap)*(max-i));*/
d161 2
a162 1
	return(1);
d168 1
a168 1
	int max,min;
d178 5
a182 1
	if (a->top < b->top) /* hmm... should not be happening */
a187 2
	max=a->top;
	min=b->top;
d196 1
a196 1
	for (i=0; i<min; i++)
a219 1
	i=min;
d223 11
a233 7
		while (i < max)
			{
			i++;
			t1= *(ap++);
			t2=(t1-1)&BN_MASK2;
			*(rp++)=t2;
			if (t1 > t2) break;
d243 1
a243 1
			if (i++ >= max) break;
d245 1
a245 1
			if (i++ >= max) break;
d247 1
a247 1
			if (i++ >= max) break;
d249 1
a249 1
			if (i++ >= max) break;
d259 1
a259 1
	bn_fix_top(r);
d310 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d67 1
d77 1
a77 1
	if (a->neg ^ b->neg)
d80 1
a80 1
		if (a->neg)
d98 2
a99 1
	if (a->neg) /* both are neg */
a102 2

	if (!BN_uadd(r,a,b)) return(0);
d163 1
d255 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d64 1
a64 1
int BN_add(BIGNUM *r, BIGNUM *a, BIGNUM *b)
d66 1
a66 1
	BIGNUM *tmp;
@


1.1
log
@Initial revision
@
text
@d64 1
a64 4
int BN_add(r, a, b)
BIGNUM *r;
BIGNUM *a;
BIGNUM *b;
a65 1
	int i;
d68 3
d86 1
a86 2
			if (bn_wexpand(r,b->top) == NULL) return(0);
			bn_qsub(r,b,a);
d91 1
a91 2
			if (bn_wexpand(r,a->top) == NULL) return(0);
			bn_qsub(r,a,b);
d102 1
a102 12
	i=(a->top > b->top);

	if (i)
		{
		if (bn_wexpand(r,a->top+1) == NULL) return(0);
		bn_qadd(r,a,b);
		}
	else
		{
		if (bn_wexpand(r,b->top+1) == NULL) return(0);
		bn_qadd(r,b,a);
		}
d107 1
a107 4
void bn_qadd(r,a,b)
BIGNUM *r;
BIGNUM *a;
BIGNUM *b;
d112 4
d117 2
d121 4
d127 1
d157 5
a161 2
	for (; i<max; i++)
		*(rp++)= *(ap++);
d163 143
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d64 4
a67 1
int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
d69 2
a70 5
	const BIGNUM *tmp;
	int a_neg = a->neg;

	bn_check_top(a);
	bn_check_top(b);
d77 1
a77 1
	if (a_neg ^ b->neg)
d80 1
a80 1
		if (a_neg)
d87 2
a88 1
			if (!BN_usub(r,b,a)) return(0);
d93 2
a94 1
			if (!BN_usub(r,a,b)) return(0);
d100 1
a100 2
	if (!BN_uadd(r,a,b)) return(0);
	if (a_neg) /* both are neg */
d104 13
d121 4
a124 1
int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
a128 4
	const BIGNUM *tmp;

	bn_check_top(a);
	bn_check_top(b);
a129 2
	if (a->top < b->top)
		{ tmp=a; a=b; b=tmp; }
a131 4

	if (bn_wexpand(r,max+1) == NULL)
		return(0);

a133 1

d163 2
a164 5
	if (rp != ap)
		{
		for (; i<max; i++)
			*(rp++)= *(ap++);
		}
a165 145
	r->neg = 0;
	return(1);
	}

/* unsigned subtraction of b from a, a must be larger than b. */
int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
	{
	int max,min;
	register BN_ULONG t1,t2,*ap,*bp,*rp;
	int i,carry;
#if defined(IRIX_CC_BUG) && !defined(LINT)
	int dummy;
#endif

	bn_check_top(a);
	bn_check_top(b);

	if (a->top < b->top) /* hmm... should not be happening */
		{
		BNerr(BN_F_BN_USUB,BN_R_ARG2_LT_ARG3);
		return(0);
		}

	max=a->top;
	min=b->top;
	if (bn_wexpand(r,max) == NULL) return(0);

	ap=a->d;
	bp=b->d;
	rp=r->d;

#if 1
	carry=0;
	for (i=0; i<min; i++)
		{
		t1= *(ap++);
		t2= *(bp++);
		if (carry)
			{
			carry=(t1 <= t2);
			t1=(t1-t2-1)&BN_MASK2;
			}
		else
			{
			carry=(t1 < t2);
			t1=(t1-t2)&BN_MASK2;
			}
#if defined(IRIX_CC_BUG) && !defined(LINT)
		dummy=t1;
#endif
		*(rp++)=t1&BN_MASK2;
		}
#else
	carry=bn_sub_words(rp,ap,bp,min);
	ap+=min;
	bp+=min;
	rp+=min;
	i=min;
#endif
	if (carry) /* subtracted */
		{
		while (i < max)
			{
			i++;
			t1= *(ap++);
			t2=(t1-1)&BN_MASK2;
			*(rp++)=t2;
			if (t1 > t2) break;
			}
		}
#if 0
	memcpy(rp,ap,sizeof(*rp)*(max-i));
#else
	if (rp != ap)
		{
		for (;;)
			{
			if (i++ >= max) break;
			rp[0]=ap[0];
			if (i++ >= max) break;
			rp[1]=ap[1];
			if (i++ >= max) break;
			rp[2]=ap[2];
			if (i++ >= max) break;
			rp[3]=ap[3];
			rp+=4;
			ap+=4;
			}
		}
#endif

	r->top=max;
	r->neg=0;
	bn_fix_top(r);
	return(1);
	}

int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
	{
	int max;
	int add=0,neg=0;
	const BIGNUM *tmp;

	bn_check_top(a);
	bn_check_top(b);

	/*  a -  b	a-b
	 *  a - -b	a+b
	 * -a -  b	-(a+b)
	 * -a - -b	b-a
	 */
	if (a->neg)
		{
		if (b->neg)
			{ tmp=a; a=b; b=tmp; }
		else
			{ add=1; neg=1; }
		}
	else
		{
		if (b->neg) { add=1; neg=0; }
		}

	if (add)
		{
		if (!BN_uadd(r,a,b)) return(0);
		r->neg=neg;
		return(1);
		}

	/* We are actually doing a - b :-) */

	max=(a->top > b->top)?a->top:b->top;
	if (bn_wexpand(r,max) == NULL) return(0);
	if (BN_ucmp(a,b) < 0)
		{
		if (!BN_usub(r,b,a)) return(0);
		r->neg=1;
		}
	else
		{
		if (!BN_usub(r,a,b)) return(0);
		r->neg=0;
		}
	return(1);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d67 1
a67 1
	int a_neg = a->neg, ret;
d98 6
a103 4
	ret = BN_uadd(r,a,b);
	r->neg = a_neg;
	bn_check_top(r);
	return ret;
d106 1
a106 1
/* unsigned add of b to a */
d109 3
a111 2
	int max,min,dif;
	BN_ULONG *ap,*bp,*rp,carry,t1,t2;
d119 2
a120 3
	max = a->top;
	min = b->top;
	dif = max - min;
d123 1
a123 1
		return 0;
d131 1
d137 1
d141 1
a141 1
		while (dif)
d143 3
a145 5
			dif--;
			t1 = *(ap++);
			t2 = (t1+1) & BN_MASK2;
			*(rp++) = t2;
			if (t2)
d151 1
a151 1
		if (carry)
d153 1
a153 2
			/* carry != 0 => dif == 0 */
			*rp = 1;
d157 6
a162 4
	if (dif && rp != ap)
		while (dif--)
			/* copy remaining words if ap != rp */
			*(rp++) = *(ap++);
d164 1
a164 2
	bn_check_top(r);
	return 1;
d170 1
a170 1
	int max,min,dif;
d180 1
a180 5
	max = a->top;
	min = b->top;
	dif = max - min;

	if (dif < 0)	/* hmm... should not be happening */
d186 2
d196 1
a196 1
	for (i = min; i != 0; i--)
d220 1
d224 7
a230 11
		if (!dif)
			/* error: a < b */
			return 0;
		while (dif)
			{
			dif--;
			t1 = *(ap++);
			t2 = (t1-1)&BN_MASK2;
			*(rp++) = t2;
			if (t1)
				break;
d240 1
a240 1
			if (!dif--) break;
d242 1
a242 1
			if (!dif--) break;
d244 1
a244 1
			if (!dif--) break;
d246 1
a246 1
			if (!dif--) break;
d256 1
a256 1
	bn_correct_top(r);
a306 1
	bn_check_top(r);
@


