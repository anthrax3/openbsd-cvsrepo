head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.6
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2017.01.25.06.15.44;	author beck;	state Exp;
branches;
next	1.9;
commitid	99v9zjkNcFwnZcJG;

1.9
date	2017.01.21.11.00.46;	author beck;	state Exp;
branches;
next	1.8;
commitid	gA67INk6WgIKVogS;

1.8
date	2015.04.29.00.11.12;	author doug;	state Exp;
branches;
next	1.7;
commitid	DUDpybhZMBt1ldZh;

1.7
date	2015.02.14.15.07.54;	author jsing;	state Exp;
branches;
next	1.6;
commitid	ZdmBvyJcYwxn1E8q;

1.6
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.5;
commitid	69Tc75PIK8JcRRsC;

1.5
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.13.21.30.32;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.01.22.58.53;	author djm;	state dead;
branches;
next	1.1;

1.1
date	2006.06.27.05.05.31;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.06.27.05.05.31;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.01.09.12.13.53;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Construct a BN_gcd_nonct, based on BN_mod_inverse_no_branch, as suggested
by Alejandro Cabrera <aldaya@@gmail.com> to avoid the possibility of a
sidechannel timing attack during RSA private key generation.

Modify BN_gcd to become not visible under LIBRESSL_INTERNAL and force
the use of the _ct or _nonct versions of the function only within
the library.

ok jsing@@
@
text
@/* $OpenBSD: bn_x931p.c,v 1.9 2017/01/21 11:00:46 beck Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2005.
 */
/* ====================================================================
 * Copyright (c) 2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <openssl/bn.h>

#include "bn_lcl.h"

/* X9.31 routines for prime derivation */

/* X9.31 prime derivation. This is used to generate the primes pi
 * (p1, p2, q1, q2) from a parameter Xpi by checking successive odd
 * integers.
 */

static int
bn_x931_derive_pi(BIGNUM *pi, const BIGNUM *Xpi, BN_CTX *ctx, BN_GENCB *cb)
{
	int i = 0;

	if (!BN_copy(pi, Xpi))
		return 0;
	if (!BN_is_odd(pi) && !BN_add_word(pi, 1))
		return 0;
	for (;;) {
		i++;
		BN_GENCB_call(cb, 0, i);
		/* NB 27 MR is specificed in X9.31 */
		if (BN_is_prime_fasttest_ex(pi, 27, ctx, 1, cb))
			break;
		if (!BN_add_word(pi, 2))
			return 0;
	}
	BN_GENCB_call(cb, 2, i);
	return 1;
}

/* This is the main X9.31 prime derivation function. From parameters
 * Xp1, Xp2 and Xp derive the prime p. If the parameters p1 or p2 are
 * not NULL they will be returned too: this is needed for testing.
 */

int
BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, const BIGNUM *Xp,
    const BIGNUM *Xp1, const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx,
    BN_GENCB *cb)
{
	int ret = 0;

	BIGNUM *t, *p1p2, *pm1;

	/* Only even e supported */
	if (!BN_is_odd(e))
		return 0;

	BN_CTX_start(ctx);
	if (p1 == NULL) {
		if ((p1 = BN_CTX_get(ctx)) == NULL)
			goto err;
	}
	if (p2 == NULL) {
		if ((p2 = BN_CTX_get(ctx)) == NULL)
			goto err;
	}

	if ((t = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((p1p2 = BN_CTX_get(ctx)) == NULL)
		goto err;
	if ((pm1 = BN_CTX_get(ctx)) == NULL)
		goto err;

	if (!bn_x931_derive_pi(p1, Xp1, ctx, cb))
		goto err;

	if (!bn_x931_derive_pi(p2, Xp2, ctx, cb))
		goto err;

	if (!BN_mul(p1p2, p1, p2, ctx))
		goto err;

	/* First set p to value of Rp */

	if (!BN_mod_inverse_ct(p, p2, p1, ctx))
		goto err;

	if (!BN_mul(p, p, p2, ctx))
		goto err;

	if (!BN_mod_inverse_ct(t, p1, p2, ctx))
		goto err;

	if (!BN_mul(t, t, p1, ctx))
		goto err;

	if (!BN_sub(p, p, t))
		goto err;

	if (p->neg && !BN_add(p, p, p1p2))
		goto err;

	/* p now equals Rp */

	if (!BN_mod_sub(p, p, Xp, p1p2, ctx))
		goto err;

	if (!BN_add(p, p, Xp))
		goto err;

	/* p now equals Yp0 */

	for (;;) {
		int i = 1;
		BN_GENCB_call(cb, 0, i++);
		if (!BN_copy(pm1, p))
			goto err;
		if (!BN_sub_word(pm1, 1))
			goto err;
		if (!BN_gcd_ct(t, pm1, e, ctx))
			goto err;
		if (BN_is_one(t)
		/* X9.31 specifies 8 MR and 1 Lucas test or any prime test
		 * offering similar or better guarantees 50 MR is considerably
		 * better.
		 */
		    && BN_is_prime_fasttest_ex(p, 50, ctx, 1, cb))
			break;
		if (!BN_add(p, p, p1p2))
			goto err;
	}

	BN_GENCB_call(cb, 3, 0);

	ret = 1;

err:

	BN_CTX_end(ctx);

	return ret;
}

/* Generate pair of paramters Xp, Xq for X9.31 prime generation.
 * Note: nbits paramter is sum of number of bits in both.
 */

int
BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)
{
	BIGNUM *t;
	int i;
	int ret = 0;

	/* Number of bits for each prime is of the form
	 * 512+128s for s = 0, 1, ...
	 */
	if ((nbits < 1024) || (nbits & 0xff))
		return 0;
	nbits >>= 1;
	/* The random value Xp must be between sqrt(2) * 2^(nbits-1) and
	 * 2^nbits - 1. By setting the top two bits we ensure that the lower
	 * bound is exceeded.
	 */
	if (!BN_rand(Xp, nbits, 1, 0))
		return 0;

	BN_CTX_start(ctx);
	if ((t = BN_CTX_get(ctx)) == NULL)
		goto err;

	for (i = 0; i < 1000; i++) {
		if (!BN_rand(Xq, nbits, 1, 0))
			goto err;
		/* Check that |Xp - Xq| > 2^(nbits - 100) */
		BN_sub(t, Xp, Xq);
		if (BN_num_bits(t) > (nbits - 100))
			break;
	}

	if (i < 1000)
		ret = 1;

err:
	BN_CTX_end(ctx);

	return ret;
}

/* Generate primes using X9.31 algorithm. Of the values p, p1, p2, Xp1
 * and Xp2 only 'p' needs to be non-NULL. If any of the others are not NULL
 * the relevant parameter will be stored in it.
 *
 * Due to the fact that |Xp - Xq| > 2^(nbits - 100) must be satisfied Xp and Xq
 * are generated using the previous function and supplied as input.
 */

int
BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1,
    BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb)
{
	int ret = 0;

	BN_CTX_start(ctx);
	if (Xp1 == NULL) {
		if ((Xp1 = BN_CTX_get(ctx)) == NULL)
			goto error;
	}
	if (Xp2 == NULL) {
		if ((Xp2 = BN_CTX_get(ctx)) == NULL)
			goto error;
	}

	if (!BN_rand(Xp1, 101, 0, 0))
		goto error;
	if (!BN_rand(Xp2, 101, 0, 0))
		goto error;
	if (!BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb))
		goto error;

	ret = 1;

error:
	BN_CTX_end(ctx);

	return ret;
}
@


1.9
log
@Add ct and nonct versions of BN_mod_inverse for internal use
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_x931p.c,v 1.8 2015/04/29 00:11:12 doug Exp $ */
d174 1
a174 1
		if (!BN_gcd(t, pm1, e, ctx))
@


1.8
log
@Add missing BN_CTX_end() calls.

After calling BN_CTX_start(), there must be a BN_CTX_end() before
returning.  There were missing BN_CTX_end() calls in error paths.  One diff
chunk was simply removing redundant code related to this.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_x931p.c,v 1.7 2015/02/14 15:07:54 jsing Exp $ */
d62 2
d139 1
a139 1
	if (!BN_mod_inverse(p, p2, p1, ctx))
d145 1
a145 1
	if (!BN_mod_inverse(t, p1, p2, ctx))
@


1.7
log
@Fix tests that got incorrectly inverted with the BN_CTX_get() return check
diff.

Spotted by miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_x931p.c,v 1.6 2015/02/09 15:49:22 jsing Exp $ */
d205 1
d222 1
a222 1
		return 0;
d226 1
a226 1
			return 0;
d233 4
d239 1
a239 4
	if (i < 1000)
		return 1;

	return 0;
@


1.6
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_x931p.c,v 1.5 2014/06/12 15:49:28 deraadt Exp $ */
d110 1
a110 1
	if (p1 != NULL) {
d114 1
a114 1
	if (p2 != NULL) {
d255 1
a255 1
	if (Xp1 != NULL) {
d259 1
a259 1
	if (Xp2 != NULL) {
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d110 8
a117 2
	if (!p1)
		p1 = BN_CTX_get(ctx);
d119 6
a124 8
	if (!p2)
		p2 = BN_CTX_get(ctx);

	t = BN_CTX_get(ctx);

	p1p2 = BN_CTX_get(ctx);

	pm1 = BN_CTX_get(ctx);
d220 2
a221 1
	t = BN_CTX_get(ctx);
d255 8
a262 4
	if (!Xp1)
		Xp1 = BN_CTX_get(ctx);
	if (!Xp2)
		Xp2 = BN_CTX_get(ctx);
@


1.4
log
@Emergency knfectomie requested by tedu@@.
@
text
@d1 1
a1 1
/* bn_x931p.c */
@


1.3
log
@import files that CVS missed; sigh
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d69 3
a71 3
static int bn_x931_derive_pi(BIGNUM *pi, const BIGNUM *Xpi, BN_CTX *ctx,
			BN_GENCB *cb)
	{
d73 1
d78 1
a78 2
	for(;;)
		{
d86 1
a86 1
		}
d89 1
a89 1
	}
d96 5
a100 4
int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
			const BIGNUM *Xp, const BIGNUM *Xp1, const BIGNUM *Xp2,
			const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb)
	{
d161 1
a161 2
	for (;;)
		{
d172 1
a172 1
		 * offering similar or better guarantees 50 MR is considerably 
d175 1
a175 1
			&& BN_is_prime_fasttest_ex(p, 50, ctx, 1, cb))
d179 1
a179 1
		}
d185 1
a185 1
	err:
d190 1
a190 1
	}
d196 3
a198 2
int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)
	{
d201 1
d218 1
a218 2
	for (i = 0; i < 1000; i++)
		{
d225 1
a225 1
		}
d233 1
a233 2

	}
d243 4
a246 6
int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
			BIGNUM *Xp1, BIGNUM *Xp2,
			const BIGNUM *Xp,
			const BIGNUM *e, BN_CTX *ctx,
			BN_GENCB *cb)
	{
d264 1
a264 1
	error:
d268 1
a268 3

	}

@


1.2
log
@resolve conflicts, fix local changes
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
a61 2
#ifdef OPENSSL_FIPS

a63 1

d70 1
a70 1
			void (*cb)(int, int, void *), void *cb_arg)
d80 1
a80 2
		if (cb)
			cb(0, i, cb_arg);
d82 1
a82 1
		if (BN_is_prime_fasttest(pi, 27, cb, ctx, cb_arg, 1))
d87 1
a87 2
	if (cb)
		cb(2, i, cb_arg);
d96 1
a96 2
int BN_X931_derive_prime(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
			void (*cb)(int, int, void *), void *cb_arg,
d98 1
a98 1
			const BIGNUM *e, BN_CTX *ctx)
d121 1
a121 1
	if (!bn_x931_derive_pi(p1, Xp1, ctx, cb, cb_arg))
d124 1
a124 1
	if (!bn_x931_derive_pi(p2, Xp2, ctx, cb, cb_arg))
d163 1
a163 2
		if (cb)
			cb(0, i++, cb_arg);
d175 1
a175 1
			&& BN_is_prime_fasttest(p, 50, cb, ctx, cb_arg, 1))
d181 1
a181 2
	if (cb)
		cb(3, 0, cb_arg);
d243 1
a243 1
int BN_X931_generate_prime(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
d247 1
a247 1
			void (*cb)(int, int, void *), void *cb_arg)
d261 1
a261 2
	if (!BN_X931_derive_prime(p, p1, p2, cb, cb_arg,
						Xp, Xp1, Xp2, e, ctx))
a272 1
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import of openssl-0.9.7j
@
text
@@


1.1.1.2
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
d62 2
d66 1
d73 1
a73 1
			BN_GENCB *cb)
d83 2
a84 1
		BN_GENCB_call(cb, 0, i);
d86 1
a86 1
		if (BN_is_prime_fasttest_ex(pi, 27, ctx, 1, cb))
d91 2
a92 1
	BN_GENCB_call(cb, 2, i);
d101 2
a102 1
int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
d104 1
a104 1
			const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb)
d127 1
a127 1
	if (!bn_x931_derive_pi(p1, Xp1, ctx, cb))
d130 1
a130 1
	if (!bn_x931_derive_pi(p2, Xp2, ctx, cb))
d169 2
a170 1
		BN_GENCB_call(cb, 0, i++);
d182 1
a182 1
			&& BN_is_prime_fasttest_ex(p, 50, ctx, 1, cb))
d188 2
a189 1
	BN_GENCB_call(cb, 3, 0);
d251 1
a251 1
int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
d255 1
a255 1
			BN_GENCB *cb)
d269 2
a270 1
	if (!BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb))
d282 1
@

