head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9;
locks; strict;
comment	@ * @;


1.9
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.8;
commitid	kT0fLt3r4lroFJra;

1.8
date	2017.01.21.09.38.58;	author beck;	state Exp;
branches;
next	1.7;
commitid	iyR9b2itDMsxzmrQ;

1.7
date	2016.11.08.01.40.22;	author guenther;	state Exp;
branches;
next	1.6;
commitid	scAImzp2TTrH2xHM;

1.6
date	2015.02.09.15.49.22;	author jsing;	state Exp;
branches;
next	1.5;
commitid	69Tc75PIK8JcRRsC;

1.5
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.4;
commitid	yQEL1wOWIearrW15;

1.4
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	mJUVYpkFBZ0Zv2bG;

1.3
date	2014.05.08.13.20.49;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.00;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: bn_sqrt.c,v 1.8 2017/01/21 09:38:58 beck Exp $ */
/* Written by Lenka Fibikova <fibikova@@exp-math.uni-essen.de>
 * and Bodo Moeller for the OpenSSL project. */
/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/err.h>

#include "bn_lcl.h"

BIGNUM *
BN_mod_sqrt(BIGNUM *in, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
/* Returns 'ret' such that
 *      ret^2 == a (mod p),
 * using the Tonelli/Shanks algorithm (cf. Henri Cohen, "A Course
 * in Algebraic Computational Number Theory", algorithm 1.5.1).
 * 'p' must be prime!
 */
{
	BIGNUM *ret = in;
	int err = 1;
	int r;
	BIGNUM *A, *b, *q, *t, *x, *y;
	int e, i, j;

	if (!BN_is_odd(p) || BN_abs_is_word(p, 1)) {
		if (BN_abs_is_word(p, 2)) {
			if (ret == NULL)
				ret = BN_new();
			if (ret == NULL)
				goto end;
			if (!BN_set_word(ret, BN_is_bit_set(a, 0))) {
				if (ret != in)
					BN_free(ret);
				return NULL;
			}
			bn_check_top(ret);
			return ret;
		}

		BNerror(BN_R_P_IS_NOT_PRIME);
		return (NULL);
	}

	if (BN_is_zero(a) || BN_is_one(a)) {
		if (ret == NULL)
			ret = BN_new();
		if (ret == NULL)
			goto end;
		if (!BN_set_word(ret, BN_is_one(a))) {
			if (ret != in)
				BN_free(ret);
			return NULL;
		}
		bn_check_top(ret);
		return ret;
	}

	BN_CTX_start(ctx);
	if ((A = BN_CTX_get(ctx)) == NULL)
		goto end;
	if ((b = BN_CTX_get(ctx)) == NULL)
		goto end;
	if ((q = BN_CTX_get(ctx)) == NULL)
		goto end;
	if ((t = BN_CTX_get(ctx)) == NULL)
		goto end;
	if ((x = BN_CTX_get(ctx)) == NULL)
		goto end;
	if ((y = BN_CTX_get(ctx)) == NULL)
		goto end;

	if (ret == NULL)
		ret = BN_new();
	if (ret == NULL)
		goto end;

	/* A = a mod p */
	if (!BN_nnmod(A, a, p, ctx))
		goto end;

	/* now write  |p| - 1  as  2^e*q  where  q  is odd */
	e = 1;
	while (!BN_is_bit_set(p, e))
		e++;
	/* we'll set  q  later (if needed) */

	if (e == 1) {
		/* The easy case:  (|p|-1)/2  is odd, so 2 has an inverse
		 * modulo  (|p|-1)/2,  and square roots can be computed
		 * directly by modular exponentiation.
		 * We have
		 *     2 * (|p|+1)/4 == 1   (mod (|p|-1)/2),
		 * so we can use exponent  (|p|+1)/4,  i.e.  (|p|-3)/4 + 1.
		 */
		if (!BN_rshift(q, p, 2))
			goto end;
		q->neg = 0;
		if (!BN_add_word(q, 1))
			goto end;
		if (!BN_mod_exp_ct(ret, A, q, p, ctx))
			goto end;
		err = 0;
		goto vrfy;
	}

	if (e == 2) {
		/* |p| == 5  (mod 8)
		 *
		 * In this case  2  is always a non-square since
		 * Legendre(2,p) = (-1)^((p^2-1)/8)  for any odd prime.
		 * So if  a  really is a square, then  2*a  is a non-square.
		 * Thus for
		 *      b := (2*a)^((|p|-5)/8),
		 *      i := (2*a)*b^2
		 * we have
		 *     i^2 = (2*a)^((1 + (|p|-5)/4)*2)
		 *         = (2*a)^((p-1)/2)
		 *         = -1;
		 * so if we set
		 *      x := a*b*(i-1),
		 * then
		 *     x^2 = a^2 * b^2 * (i^2 - 2*i + 1)
		 *         = a^2 * b^2 * (-2*i)
		 *         = a*(-i)*(2*a*b^2)
		 *         = a*(-i)*i
		 *         = a.
		 *
		 * (This is due to A.O.L. Atkin,
		 * <URL: http://listserv.nodak.edu/scripts/wa.exe?A2=ind9211&L=nmbrthry&O=T&P=562>,
		 * November 1992.)
		 */

		/* t := 2*a */
		if (!BN_mod_lshift1_quick(t, A, p))
			goto end;

		/* b := (2*a)^((|p|-5)/8) */
		if (!BN_rshift(q, p, 3))
			goto end;
		q->neg = 0;
		if (!BN_mod_exp_ct(b, t, q, p, ctx))
			goto end;

		/* y := b^2 */
		if (!BN_mod_sqr(y, b, p, ctx))
			goto end;

		/* t := (2*a)*b^2 - 1*/
		if (!BN_mod_mul(t, t, y, p, ctx))
			goto end;
		if (!BN_sub_word(t, 1))
			goto end;

		/* x = a*b*t */
		if (!BN_mod_mul(x, A, b, p, ctx))
			goto end;
		if (!BN_mod_mul(x, x, t, p, ctx))
			goto end;

		if (!BN_copy(ret, x))
			goto end;
		err = 0;
		goto vrfy;
	}

	/* e > 2, so we really have to use the Tonelli/Shanks algorithm.
	 * First, find some  y  that is not a square. */
	if (!BN_copy(q, p)) goto end; /* use 'q' as temp */
		q->neg = 0;
	i = 2;
	do {
		/* For efficiency, try small numbers first;
		 * if this fails, try random numbers.
		 */
		if (i < 22) {
			if (!BN_set_word(y, i))
				goto end;
		} else {
			if (!BN_pseudo_rand(y, BN_num_bits(p), 0, 0))
				goto end;
			if (BN_ucmp(y, p) >= 0) {
				if (p->neg) {
					if (!BN_add(y, y, p))
						goto end;
				} else {
					if (!BN_sub(y, y, p))
						goto end;
				}
			}
			/* now 0 <= y < |p| */
			if (BN_is_zero(y))
				if (!BN_set_word(y, i))
					goto end;
		}

		r = BN_kronecker(y, q, ctx); /* here 'q' is |p| */
		if (r < -1)
			goto end;
		if (r == 0) {
			/* m divides p */
			BNerror(BN_R_P_IS_NOT_PRIME);
			goto end;
		}
	}
	while (r == 1 && ++i < 82);

		if (r != -1) {
		/* Many rounds and still no non-square -- this is more likely
		 * a bug than just bad luck.
		 * Even if  p  is not prime, we should have found some  y
		 * such that r == -1.
		 */
		BNerror(BN_R_TOO_MANY_ITERATIONS);
		goto end;
	}

	/* Here's our actual 'q': */
	if (!BN_rshift(q, q, e))
		goto end;

	/* Now that we have some non-square, we can find an element
	 * of order  2^e  by computing its q'th power. */
	if (!BN_mod_exp_ct(y, y, q, p, ctx))
		goto end;
	if (BN_is_one(y)) {
		BNerror(BN_R_P_IS_NOT_PRIME);
		goto end;
	}

	/* Now we know that (if  p  is indeed prime) there is an integer
	 * k,  0 <= k < 2^e,  such that
	 *
	 *      a^q * y^k == 1   (mod p).
	 *
	 * As  a^q  is a square and  y  is not,  k  must be even.
	 * q+1  is even, too, so there is an element
	 *
	 *     X := a^((q+1)/2) * y^(k/2),
	 *
	 * and it satisfies
	 *
	 *     X^2 = a^q * a     * y^k
	 *         = a,
	 *
	 * so it is the square root that we are looking for.
	 */

	/* t := (q-1)/2  (note that  q  is odd) */
	if (!BN_rshift1(t, q))
		goto end;

	/* x := a^((q-1)/2) */
	if (BN_is_zero(t)) /* special case: p = 2^e + 1 */
	{
		if (!BN_nnmod(t, A, p, ctx))
			goto end;
		if (BN_is_zero(t)) {
			/* special case: a == 0  (mod p) */
			BN_zero(ret);
			err = 0;
			goto end;
		} else if (!BN_one(x))
			goto end;
	} else {
		if (!BN_mod_exp_ct(x, A, t, p, ctx))
			goto end;
		if (BN_is_zero(x)) {
			/* special case: a == 0  (mod p) */
			BN_zero(ret);
			err = 0;
			goto end;
		}
	}

	/* b := a*x^2  (= a^q) */
	if (!BN_mod_sqr(b, x, p, ctx))
		goto end;
	if (!BN_mod_mul(b, b, A, p, ctx))
		goto end;

	/* x := a*x    (= a^((q+1)/2)) */
	if (!BN_mod_mul(x, x, A, p, ctx))
		goto end;

	while (1) {
		/* Now  b  is  a^q * y^k  for some even  k  (0 <= k < 2^E
		 * where  E  refers to the original value of  e,  which we
		 * don't keep in a variable),  and  x  is  a^((q+1)/2) * y^(k/2).
		 *
		 * We have  a*b = x^2,
		 *    y^2^(e-1) = -1,
		 *    b^2^(e-1) = 1.
		 */

		if (BN_is_one(b)) {
			if (!BN_copy(ret, x))
				goto end;
			err = 0;
			goto vrfy;
		}


		/* find smallest  i  such that  b^(2^i) = 1 */
		i = 1;
		if (!BN_mod_sqr(t, b, p, ctx))
			goto end;
		while (!BN_is_one(t)) {
			i++;
			if (i == e) {
				BNerror(BN_R_NOT_A_SQUARE);
				goto end;
			}
			if (!BN_mod_mul(t, t, t, p, ctx))
				goto end;
		}


		/* t := y^2^(e - i - 1) */
		if (!BN_copy(t, y))
			goto end;
		for (j = e - i - 1; j > 0; j--) {
			if (!BN_mod_sqr(t, t, p, ctx))
				goto end;
		}
		if (!BN_mod_mul(y, t, t, p, ctx))
			goto end;
		if (!BN_mod_mul(x, x, t, p, ctx))
			goto end;
		if (!BN_mod_mul(b, b, y, p, ctx))
			goto end;
		e = i;
	}

vrfy:
	if (!err) {
		/* verify the result -- the input might have been not a square
		 * (test added in 0.9.8) */

		if (!BN_mod_sqr(x, ret, p, ctx))
			err = 1;

		if (!err && 0 != BN_cmp(x, A)) {
			BNerror(BN_R_NOT_A_SQUARE);
			err = 1;
		}
	}

end:
	if (err) {
		if (ret != NULL && ret != in) {
			BN_clear_free(ret);
		}
		ret = NULL;
	}
	BN_CTX_end(ctx);
	bn_check_top(ret);
	return ret;
}
@


1.8
log
@Make explicit _ct and _nonct versions of bn_mod_exp funcitons that
matter for constant time, and make the public interface only used
external to the library.

This moves us to a model where the important things are constant time
versions unless you ask for them not to be, rather than the opposite.
I'll continue with this method by method.

Add regress tests for same.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_sqrt.c,v 1.7 2016/11/08 01:40:22 guenther Exp $ */
d92 1
a92 1
		BNerr(BN_F_BN_MOD_SQRT, BN_R_P_IS_NOT_PRIME);
d253 1
a253 1
			BNerr(BN_F_BN_MOD_SQRT, BN_R_P_IS_NOT_PRIME);
d265 1
a265 1
		BNerr(BN_F_BN_MOD_SQRT, BN_R_TOO_MANY_ITERATIONS);
d278 1
a278 1
		BNerr(BN_F_BN_MOD_SQRT, BN_R_P_IS_NOT_PRIME);
d362 1
a362 1
				BNerr(BN_F_BN_MOD_SQRT, BN_R_NOT_A_SQUARE);
d395 1
a395 1
			BNerr(BN_F_BN_MOD_SQRT, BN_R_NOT_A_SQUARE);
@


1.7
log
@Reduce the ternary operator abuse

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_sqrt.c,v 1.6 2015/02/09 15:49:22 jsing Exp $ */
d152 1
a152 1
		if (!BN_mod_exp(ret, A, q, p, ctx))
d193 1
a193 1
		if (!BN_mod_exp(b, t, q, p, ctx))
d275 1
a275 1
	if (!BN_mod_exp(y, y, q, p, ctx))
d317 1
a317 1
		if (!BN_mod_exp(x, A, t, p, ctx))
@


1.6
log
@BN_CTX_get() can fail - consistently check its return value.

There are currently cases where the return from each call is checked,
the return from only the last call is checked and cases where it is not
checked at all (including code in bn, ec and engine).

Checking the last return value is valid as once the function fails it will
continue to return NULL. However, in order to be consistent check each
call with the same idiom. This makes it easy to verify.

Note there are still a handful of cases that do not follow the idiom -
these will be handled separately.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_sqrt.c,v 1.5 2014/07/11 08:44:48 jsing Exp $ */
d234 7
a240 2
				if (!(p->neg ? BN_add : BN_sub)(y, y, p))
					goto end;
@


1.5
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bn_sqrt.c,v 1.4 2014/06/12 15:49:28 deraadt Exp $ */
d111 11
a121 7
	A = BN_CTX_get(ctx);
	b = BN_CTX_get(ctx);
	q = BN_CTX_get(ctx);
	t = BN_CTX_get(ctx);
	x = BN_CTX_get(ctx);
	y = BN_CTX_get(ctx);
	if (y == NULL)
@


1.4
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d58 2
a59 1
#include "cryptlib.h"
a60 1

@


1.3
log
@Emergency knfectomie requested by tedu@@.
@
text
@d1 1
a1 1
/* crypto/bn/bn_sqrt.c */
@


1.2
log
@resolve conflicts
@
text
@d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d62 2
a63 1
BIGNUM *BN_mod_sqrt(BIGNUM *in, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx) 
d70 1
a70 1
	{
d76 3
a78 5
	
	if (!BN_is_odd(p) || BN_abs_is_word(p, 1))
		{
		if (BN_abs_is_word(p, 2))
			{
d83 1
a83 2
			if (!BN_set_word(ret, BN_is_bit_set(a, 0)))
				{
d87 1
a87 1
				}
d90 1
a90 1
			}
d93 2
a94 2
		return(NULL);
		}
d96 1
a96 2
	if (BN_is_zero(a) || BN_is_one(a))
		{
d101 1
a101 2
		if (!BN_set_word(ret, BN_is_one(a)))
			{
d105 1
a105 1
			}
d108 1
a108 1
		}
d117 3
a119 2
	if (y == NULL) goto end;
	
d122 2
a123 1
	if (ret == NULL) goto end;
d126 2
a127 1
	if (!BN_nnmod(A, a, p, ctx)) goto end;
d135 1
a135 2
	if (e == 1)
		{
d143 2
a144 1
		if (!BN_rshift(q, p, 2)) goto end;
d146 4
a149 2
		if (!BN_add_word(q, 1)) goto end;
		if (!BN_mod_exp(ret, A, q, p, ctx)) goto end;
d152 3
a154 4
		}
	
	if (e == 2)
		{
d176 1
a176 1
		 * (This is due to A.O.L. Atkin, 
d182 2
a183 1
		if (!BN_mod_lshift1_quick(t, A, p)) goto end;
d186 2
a187 1
		if (!BN_rshift(q, p, 3)) goto end;
d189 2
a190 1
		if (!BN_mod_exp(b, t, q, p, ctx)) goto end;
d193 2
a194 1
		if (!BN_mod_sqr(y, b, p, ctx)) goto end;
d197 4
a200 2
		if (!BN_mod_mul(t, t, y, p, ctx)) goto end;
		if (!BN_sub_word(t, 1)) goto end;
d203 4
a206 2
		if (!BN_mod_mul(x, A, b, p, ctx)) goto end;
		if (!BN_mod_mul(x, x, t, p, ctx)) goto end;
d208 2
a209 1
		if (!BN_copy(ret, x)) goto end;
d212 2
a213 2
		}
	
d217 1
a217 1
	q->neg = 0;
d219 1
a219 2
	do
		{
d223 9
a231 3
		if (i < 22)
			{
			if (!BN_set_word(y, i)) goto end;
a232 7
		else
			{
			if (!BN_pseudo_rand(y, BN_num_bits(p), 0, 0)) goto end;
			if (BN_ucmp(y, p) >= 0)
				{
				if (!(p->neg ? BN_add : BN_sub)(y, y, p)) goto end;
				}
d235 4
a238 3
				if (!BN_set_word(y, i)) goto end;
			}
		
d240 3
a242 3
		if (r < -1) goto end;
		if (r == 0)
			{
a245 1
			}
d247 1
d249 2
a250 3
	
	if (r != -1)
		{
d258 1
a258 1
		}
d261 2
a262 1
	if (!BN_rshift(q, q, e)) goto end;
d266 3
a268 3
	if (!BN_mod_exp(y, y, q, p, ctx)) goto end;
	if (BN_is_one(y))
		{
d271 1
a271 1
		}
d290 1
a290 1
	
d292 3
a294 2
	if (!BN_rshift1(t, q)) goto end;
	
d297 4
a300 4
		{
		if (!BN_nnmod(t, A, p, ctx)) goto end;
		if (BN_is_zero(t))
			{
d305 6
a310 9
			}
		else
			if (!BN_one(x)) goto end;
		}
	else
		{
		if (!BN_mod_exp(x, A, t, p, ctx)) goto end;
		if (BN_is_zero(x))
			{
a314 1
			}
d316 1
d319 5
a323 3
	if (!BN_mod_sqr(b, x, p, ctx)) goto end;
	if (!BN_mod_mul(b, b, A, p, ctx)) goto end;
	
d325 2
a326 1
	if (!BN_mod_mul(x, x, A, p, ctx)) goto end;
d328 1
a328 2
	while (1)
		{
d338 3
a340 3
		if (BN_is_one(b))
			{
			if (!BN_copy(ret, x)) goto end;
d343 1
a343 1
			}
d348 3
a350 3
		if (!BN_mod_sqr(t, b, p, ctx)) goto end;
		while (!BN_is_one(t))
			{
d352 1
a352 2
			if (i == e)
				{
a354 2
				}
			if (!BN_mod_mul(t, t, t, p, ctx)) goto end;
d356 4
a359 1
		
d362 12
a373 8
		if (!BN_copy(t, y)) goto end;
		for (j = e - i - 1; j > 0; j--)
			{
			if (!BN_mod_sqr(t, t, p, ctx)) goto end;
			}
		if (!BN_mod_mul(y, t, t, p, ctx)) goto end;
		if (!BN_mod_mul(x, x, t, p, ctx)) goto end;
		if (!BN_mod_mul(b, b, y, p, ctx)) goto end;
d375 1
a375 1
		}
d377 2
a378 3
 vrfy:
	if (!err)
		{
d381 1
a381 1
		
d384 2
a385 3
		
		if (!err && 0 != BN_cmp(x, A))
			{
a387 1
			}
d389 1
d391 3
a393 5
 end:
	if (err)
		{
		if (ret != NULL && ret != in)
			{
d395 1
a395 1
			}
d397 1
a397 1
		}
d401 1
a401 1
	}
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d1 1
a1 1
/* crypto/bn/bn_mod.c */
a67 2
 * If 'a' is not a square, this is not necessarily detected by
 * the algorithms; a bogus result must be expected in this case.
d73 1
a73 1
	BIGNUM *b, *q, *t, *x, *y;
d86 2
a87 1
				BN_free(ret);
d90 1
d106 2
a107 1
			BN_free(ret);
d110 1
a113 10
#if 0 /* if BN_mod_sqrt is used with correct input, this just wastes time */
	r = BN_kronecker(a, p, ctx);
	if (r < -1) return NULL;
	if (r == -1)
		{
		BNerr(BN_F_BN_MOD_SQRT, BN_R_NOT_A_SQUARE);
		return(NULL);
		}
#endif

d115 1
d127 3
d148 1
a148 1
		if (!BN_mod_exp(ret, a, q, p, ctx)) goto end;
d150 1
a150 1
		goto end;
a180 7
		/* make sure that  a  is reduced modulo p */
		if (a->neg || BN_ucmp(a, p) >= 0)
			{
			if (!BN_nnmod(x, a, p, ctx)) goto end;
			a = x; /* use x as temporary variable */
			}

d182 1
a182 1
		if (!BN_mod_lshift1_quick(t, a, p)) goto end;
d197 1
a197 1
		if (!BN_mod_mul(x, a, b, p, ctx)) goto end;
d202 1
a202 1
		goto end;
d289 1
a289 1
		if (!BN_nnmod(t, a, p, ctx)) goto end;
d293 1
a293 1
			if (!BN_zero(ret)) goto end;
d302 1
a302 1
		if (!BN_mod_exp(x, a, t, p, ctx)) goto end;
d306 1
a306 1
			if (!BN_zero(ret)) goto end;
d314 1
a314 1
	if (!BN_mod_mul(b, b, a, p, ctx)) goto end;
d317 1
a317 1
	if (!BN_mod_mul(x, x, a, p, ctx)) goto end;
d334 1
a334 1
			goto end;
d365 16
d391 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d1 1
a1 1
/* crypto/bn/bn_sqrt.c */
d68 2
d75 1
a75 1
	BIGNUM *A, *b, *q, *t, *x, *y;
d88 1
a88 2
				if (ret != in)
					BN_free(ret);
a90 1
			bn_check_top(ret);
d106 1
a106 2
			if (ret != in)
				BN_free(ret);
a108 1
		bn_check_top(ret);
d112 10
a122 1
	A = BN_CTX_get(ctx);
a133 3
	/* A = a mod p */
	if (!BN_nnmod(A, a, p, ctx)) goto end;

d152 1
a152 1
		if (!BN_mod_exp(ret, A, q, p, ctx)) goto end;
d154 1
a154 1
		goto vrfy;
d185 7
d193 1
a193 1
		if (!BN_mod_lshift1_quick(t, A, p)) goto end;
d208 1
a208 1
		if (!BN_mod_mul(x, A, b, p, ctx)) goto end;
d213 1
a213 1
		goto vrfy;
d300 1
a300 1
		if (!BN_nnmod(t, A, p, ctx)) goto end;
d304 1
a304 1
			BN_zero(ret);
d313 1
a313 1
		if (!BN_mod_exp(x, A, t, p, ctx)) goto end;
d317 1
a317 1
			BN_zero(ret);
d325 1
a325 1
	if (!BN_mod_mul(b, b, A, p, ctx)) goto end;
d328 1
a328 1
	if (!BN_mod_mul(x, x, A, p, ctx)) goto end;
d345 1
a345 1
			goto vrfy;
a375 16
 vrfy:
	if (!err)
		{
		/* verify the result -- the input might have been not a square
		 * (test added in 0.9.8) */
		
		if (!BN_mod_sqr(x, ret, p, ctx))
			err = 1;
		
		if (!err && 0 != BN_cmp(x, A))
			{
			BNerr(BN_F_BN_MOD_SQRT, BN_R_NOT_A_SQUARE);
			err = 1;
			}
		}

a385 1
	bn_check_top(ret);
@


