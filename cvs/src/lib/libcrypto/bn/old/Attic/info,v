head	1.3;
access;
symbols
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2000.12.15.04.13.43;	author beck;	state dead;
branches;
next	1.2;

1.2
date	2000.03.19.11.09.34;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.05.53.33;	author beck;	state Exp;
branches;
next	;


desc
@@


1.3
log
@openssl-engine0.9.6 merge

Again, be sure to whack an old /usr/obj/lib/libssl if you are doing builds
@
text
@@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@@


1.1
log
@new files for OpenSSL 0.9.4
@
text
@a0 22
Given A1A0 * B1B0 == S3S2S1S0

S0=     low(A0*B0)
S1=     low( (A1-A0)*(B0-B1)) +low( A1*B1) +high(A0*B0)
S2=     high((A1-A0)*(B0-B1)) +high(A1*B1) +low( A1*B1)
S3=     high(A1*B1);

Assume we know S1 and S0, and can calulate A1*B1 and high((A1-A0)*(B0-B1))

k0=	S0 == low(A0*B0)
k1=	S1
k2=	low( A1*B1)
k3=	high(A1*B1)
k4=	high((A1-A0)*(B0-B1))

k1=	low((A1-A0)*(B0-B1)) +k2 +high(A0*B0)
S2=	k4 +k3 +k2
S3=	k3

S1-k2= low((A1-A0)*(B0-B1)) +high(A0*B0)

We potentially have a carry or a borrow from S1
@

