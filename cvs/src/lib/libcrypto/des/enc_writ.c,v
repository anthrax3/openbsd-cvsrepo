head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2015.02.12.03.54.07;	author jsing;	state Exp;
branches;
next	1.13;
commitid	8Uvg1V8TDfVq15dl;

1.13
date	2014.10.22.13.02.04;	author jsing;	state Exp;
branches;
next	1.12;
commitid	PjnBgKe6Buhbf937;

1.12
date	2014.07.11.08.44.48;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.10;
commitid	nzndm3zqPmFurSaK;

1.10
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.28.21.14.50;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.54;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.12.15.40;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.29;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.55;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.58;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.43;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.43;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.12;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.54;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.05;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@If you do not support POSIX I/O then you're not tall enough to ride...

ok tedu@@
@
text
@/* $OpenBSD: enc_writ.c,v 1.13 2014/10/22 13:02:04 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <openssl/opensslconf.h>

#include "des_locl.h"

/*
 * WARNINGS:
 *
 *  -  The data format used by DES_enc_write() and DES_enc_read()
 *     has a cryptographic weakness: When asked to write more
 *     than MAXWRITE bytes, DES_enc_write will split the data
 *     into several chunks that are all encrypted
 *     using the same IV.  So don't use these functions unless you
 *     are sure you know what you do (in which case you might
 *     not want to use them anyway).
 *
 *  -  This code cannot handle non-blocking sockets.
 */

int DES_enc_write(int fd, const void *_buf, int len,
		  DES_key_schedule *sched, DES_cblock *iv)
	{
#ifdef _LIBC
	extern unsigned long time();
	extern int write();
#endif
	const unsigned char *buf=_buf;
	long rnum;
	int i,j,k,outnum;
	static unsigned char *outbuf=NULL;
	unsigned char shortbuf[8];
	unsigned char *p;
	const unsigned char *cp;
	static int start=1;

	if (outbuf == NULL)
		{
		outbuf=malloc(BSIZE+HDRSIZE);
		if (outbuf == NULL) return(-1);
		}
	/* If we are sending less than 8 bytes, the same char will look
	 * the same if we don't pad it out with random bytes */
	if (start)
		{
		start=0;
		}

	/* lets recurse if we want to send the data in small chunks */
	if (len > MAXWRITE)
		{
		j=0;
		for (i=0; i<len; i+=k)
			{
			k=DES_enc_write(fd,&(buf[i]),
				((len-i) > MAXWRITE)?MAXWRITE:(len-i),sched,iv);
			if (k < 0)
				return(k);
			else
				j+=k;
			}
		return(j);
		}

	/* write length first */
	p=outbuf;
	l2n(len,p);

	/* pad short strings */
	if (len < 8)
		{
		cp=shortbuf;
		memcpy(shortbuf,buf,len);
		arc4random_buf(shortbuf+len, 8-len);
		rnum=8;
		}
	else
		{
		cp=buf;
		rnum=((len+7)/8*8); /* round up to nearest eight */
		}

	if (DES_rw_mode & DES_PCBC_MODE)
		DES_pcbc_encrypt(cp,&(outbuf[HDRSIZE]),(len<8)?8:len,sched,iv,
				 DES_ENCRYPT); 
	else
		DES_cbc_encrypt(cp,&(outbuf[HDRSIZE]),(len<8)?8:len,sched,iv,
				DES_ENCRYPT); 

	/* output */
	outnum=rnum+HDRSIZE;

	for (j=0; j<outnum; j+=i)
		{
		/* eay 26/08/92 I was not doing writing from where we
		 * got up to. */
		i=write(fd,(void *)&(outbuf[j]),outnum-j);
		if (i == -1)
			{
#ifdef EINTR
			if (errno == EINTR)
				i=0;
			else
#endif
			        /* This is really a bad error - very bad
				 * It will stuff-up both ends. */
				return(-1);
			}
		}

	return(len);
	}
@


1.13
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc_writ.c,v 1.12 2014/07/11 08:44:48 jsing Exp $ */
a84 3
#if defined(OPENSSL_NO_POSIX_IO)
	return (-1);
#else
a172 1
#endif /* OPENSSL_NO_POSIX_IO */
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc_writ.c,v 1.11 2014/07/10 22:45:56 jsing Exp $ */
d61 1
a65 2
#include <openssl/rand.h>

d138 1
a138 1
		RAND_pseudo_bytes(shortbuf+len, 8-len);
@


1.11
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: enc_writ.c,v 1.10 2014/06/12 15:49:28 deraadt Exp $ */
d65 2
a66 1
#include "cryptlib.h"
a67 1
#include <openssl/rand.h>
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
d62 3
a64 1
#include <stdio.h>
@


1.9
log
@Remove WIN32, WIN64 and MINGW32 tentacles.
Also check for _LP64 rather than __arch64__ (the former being more reliable
than __LP64__ or __arch64__) to tell 64-bit int platforms apart from 32-bit
int platforms.

Loosely based upon a diff from Martijn van Duren on tech@@
@
text
@d1 1
a1 1
/* crypto/des/enc_writ.c */
@


1.8
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a158 1
#ifndef _WIN32
a159 3
#else
		i=_write(fd,(void *)&(outbuf[j]),outnum-j);
#endif
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d101 1
a101 1
		outbuf=OPENSSL_malloc(BSIZE+HDRSIZE);
@


1.6
log
@resolve conflicts
@
text
@d83 3
d178 1
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d156 1
d158 3
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d69 1
a69 1
 *  -  The data format used by des_enc_write() and des_enc_read()
d71 1
a71 1
 *     than MAXWRITE bytes, des_enc_write will split the data
d80 2
a81 2
int des_enc_write(int fd, const void *_buf, int len,
		  des_key_schedule sched, des_cblock *iv)
d114 1
a114 1
			k=des_enc_write(fd,&(buf[i]),
d142 2
a143 2
	if (des_rw_mode & DES_PCBC_MODE)
		des_pcbc_encrypt(cp,&(outbuf[HDRSIZE]),(len<8)?8:len,sched,iv,
d146 1
a146 1
		des_cbc_encrypt(cp,&(outbuf[HDRSIZE]),(len<8)?8:len,sched,iv,
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d98 1
a98 1
		outbuf=Malloc(BSIZE+HDRSIZE);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d133 1
a133 1
		RAND_bytes(shortbuf+len, 8-len);
d138 1
a138 1
		cp=(unsigned char*)buf;
d155 2
a156 2
		 * got upto. */
		i=write(fd,&(outbuf[j]),outnum-j);
d159 1
d162 3
a164 1
			else 	/* This is really a bad error - very bad
@


1.1
log
@Initial revision
@
text
@d61 2
d64 1
d66 16
a81 6
int des_enc_write(fd, buf, len, sched, iv)
int fd;
char *buf;
int len;
des_key_schedule sched;
des_cblock (*iv);
a83 1
	extern int srandom();
a84 1
	extern int random();
d87 1
a87 1

d90 4
a93 3
	static char *outbuf=NULL;
	char shortbuf[8];
	char *p;
d98 1
a98 1
		outbuf=(char *)malloc(BSIZE+HDRSIZE);
a105 1
		srandom((unsigned int)time(NULL));
d131 3
a133 4
		p=shortbuf;
		memcpy(shortbuf,buf,(unsigned int)len);
		for (i=len; i<8; i++)
			shortbuf[i]=random();
d138 1
a138 1
		p=buf;
d143 2
a144 3
		des_pcbc_encrypt((des_cblock *)p,
			(des_cblock *)&(outbuf[HDRSIZE]),
			(long)((len<8)?8:len),sched,iv,DES_ENCRYPT); 
d146 2
a147 3
		des_cbc_encrypt((des_cblock *)p,
			(des_cblock *)&(outbuf[HDRSIZE]),
			(long)((len<8)?8:len),sched,iv,DES_ENCRYPT); 
d150 1
a150 1
	outnum=(int)rnum+HDRSIZE;
d156 1
a156 1
		i=write(fd,&(outbuf[j]),(unsigned int)(outnum-j));
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a60 2
#include <stdio.h>
#include "cryptlib.h"
a61 1
#include <openssl/rand.h>
d63 6
a68 16
/*
 * WARNINGS:
 *
 *  -  The data format used by DES_enc_write() and DES_enc_read()
 *     has a cryptographic weakness: When asked to write more
 *     than MAXWRITE bytes, DES_enc_write will split the data
 *     into several chunks that are all encrypted
 *     using the same IV.  So don't use these functions unless you
 *     are sure you know what you do (in which case you might
 *     not want to use them anyway).
 *
 *  -  This code cannot handle non-blocking sockets.
 */

int DES_enc_write(int fd, const void *_buf, int len,
		  DES_key_schedule *sched, DES_cblock *iv)
d71 1
d73 1
d76 1
a76 1
	const unsigned char *buf=_buf;
d79 3
a81 4
	static unsigned char *outbuf=NULL;
	unsigned char shortbuf[8];
	unsigned char *p;
	const unsigned char *cp;
d86 1
a86 1
		outbuf=OPENSSL_malloc(BSIZE+HDRSIZE);
d94 1
d103 1
a103 1
			k=DES_enc_write(fd,&(buf[i]),
d120 4
a123 3
		cp=shortbuf;
		memcpy(shortbuf,buf,len);
		RAND_pseudo_bytes(shortbuf+len, 8-len);
d128 1
a128 1
		cp=buf;
d132 4
a135 3
	if (DES_rw_mode & DES_PCBC_MODE)
		DES_pcbc_encrypt(cp,&(outbuf[HDRSIZE]),(len<8)?8:len,sched,iv,
				 DES_ENCRYPT); 
d137 3
a139 2
		DES_cbc_encrypt(cp,&(outbuf[HDRSIZE]),(len<8)?8:len,sched,iv,
				DES_ENCRYPT); 
d142 1
a142 1
	outnum=rnum+HDRSIZE;
d147 2
a148 2
		 * got up to. */
		i=write(fd,(void *)&(outbuf[j]),outnum-j);
a150 1
#ifdef EINTR
d153 1
a153 3
			else
#endif
			        /* This is really a bad error - very bad
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@a155 1
#ifndef _WIN32
a156 3
#else
		i=_write(fd,(void *)&(outbuf[j]),outnum-j);
#endif
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a82 3
#if defined(OPENSSL_NO_POSIX_IO)
	return (-1);
#else
a174 1
#endif /* OPENSSL_NO_POSIX_IO */
@


