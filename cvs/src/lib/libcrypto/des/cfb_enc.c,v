head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2015.02.10.09.46.30;	author miod;	state Exp;
branches;
next	1.12;
commitid	XPddOr5uXbWZR9wr;

1.12
date	2014.10.28.07.35.58;	author jsg;	state Exp;
branches;
next	1.11;
commitid	pi8qF4s0vNCGLEKv;

1.11
date	2014.07.09.16.06.13;	author miod;	state Exp;
branches;
next	1.10;
commitid	WBUBPtdvi23w6jGY;

1.10
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.18.19.41.23;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.14.37.41;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.50;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.12;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.00.03.02;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.56;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.42;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.50.10;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.11.21.13.49;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.39;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.42;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove assert() or OPENSSL_assert() of pointers being non-NULL. The policy
for libraries in OpenBSD is to deliberately let NULL pointers cause a SIGSEGV.
ok doug@@ jsing@@
@
text
@/* $OpenBSD: cfb_enc.c,v 1.12 2014/10/28 07:35:58 jsg Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include "des_locl.h"
#include <machine/endian.h>

/* The input and output are loaded in multiples of 8 bits.
 * What this means is that if you hame numbits=12 and length=2
 * the first 12 bits will be retrieved from the first byte and half
 * the second.  The second 12 bits will come from the 3rd and half the 4th
 * byte.
 */
/* Until Aug 1 2003 this function did not correctly implement CFB-r, so it
 * will not be compatible with any encryption prior to that date. Ben. */
void DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
		     long length, DES_key_schedule *schedule, DES_cblock *ivec,
		     int enc)
	{
	DES_LONG d0,d1,v0,v1;
	unsigned long l=length;
	int num=numbits/8,n=(numbits+7)/8,i,rem=numbits%8;
	DES_LONG ti[2];
	unsigned char *iv;
#if BYTE_ORDER != LITTLE_ENDIAN
	unsigned char ovec[16];
#else
	unsigned int  sh[4];
	unsigned char *ovec=(unsigned char *)sh;
#endif

	if (numbits<=0 || numbits > 64) return;
	iv = &(*ivec)[0];
	c2l(iv,v0);
	c2l(iv,v1);
	if (enc)
		{
		while (l >= (unsigned long)n)
			{
			l-=n;
			ti[0]=v0;
			ti[1]=v1;
			DES_encrypt1((DES_LONG *)ti,schedule,DES_ENCRYPT);
			c2ln(in,d0,d1,n);
			in+=n;
			d0^=ti[0];
			d1^=ti[1];
			l2cn(d0,d1,out,n);
			out+=n;
			/* 30-08-94 - eay - changed because l>>32 and
			 * l<<32 are bad under gcc :-( */
			if (numbits == 32)
				{ v0=v1; v1=d0; }
			else if (numbits == 64)
				{ v0=d0; v1=d1; }
			else
				{
#if BYTE_ORDER != LITTLE_ENDIAN
				iv=&ovec[0];
				l2c(v0,iv);
				l2c(v1,iv);
				l2c(d0,iv);
				l2c(d1,iv);
#else
				sh[0]=v0, sh[1]=v1, sh[2]=d0, sh[3]=d1;
#endif
				if (rem==0)
					memmove(ovec,ovec+num,8);
				else
					for(i=0 ; i < 8 ; ++i)
						ovec[i]=ovec[i+num]<<rem |
							ovec[i+num+1]>>(8-rem);
#if BYTE_ORDER == LITTLE_ENDIAN
				v0=sh[0], v1=sh[1];
#else
				iv=&ovec[0];
				c2l(iv,v0);
				c2l(iv,v1);
#endif
				}
			}
		}
	else
		{
		while (l >= (unsigned long)n)
			{
			l-=n;
			ti[0]=v0;
			ti[1]=v1;
			DES_encrypt1((DES_LONG *)ti,schedule,DES_ENCRYPT);
			c2ln(in,d0,d1,n);
			in+=n;
			/* 30-08-94 - eay - changed because l>>32 and
			 * l<<32 are bad under gcc :-( */
			if (numbits == 32)
				{ v0=v1; v1=d0; }
			else if (numbits == 64)
				{ v0=d0; v1=d1; }
			else
				{
#if BYTE_ORDER != LITTLE_ENDIAN
				iv=&ovec[0];
				l2c(v0,iv);
				l2c(v1,iv);
				l2c(d0,iv);
				l2c(d1,iv);
#else
				sh[0]=v0, sh[1]=v1, sh[2]=d0, sh[3]=d1;
#endif
				if (rem==0)
					memmove(ovec,ovec+num,8);
				else
					for(i=0 ; i < 8 ; ++i)
						ovec[i]=ovec[i+num]<<rem |
							ovec[i+num+1]>>(8-rem);
#if BYTE_ORDER == LITTLE_ENDIAN
				v0=sh[0], v1=sh[1];
#else
				iv=&ovec[0];
				c2l(iv,v0);
				c2l(iv,v1);
#endif
				}
			d0^=ti[0];
			d1^=ti[1];
			l2cn(d0,d1,out,n);
			out+=n;
			}
		}
	iv = &(*ivec)[0];
	l2c(v0,iv);
	l2c(v1,iv);
	v0=v1=d0=d1=ti[0]=ti[1]=0;
	}

@


1.12
log
@deregister; no binary change
ok jsing@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cfb_enc.c,v 1.11 2014/07/09 16:06:13 miod Exp $ */
a59 1
#include <assert.h>
a83 5

	/* I kind of count that compiler optimizes away this assertioni,*/
	assert (sizeof(sh[0])==4);	/* as this holds true for all,	*/
					/* but 16-bit platforms...	*/
					
@


1.11
log
@Remove leading underscore from _BYTE_ORDER and _{LITTLE,BIG}_ENDIAN, to be
more friendly to systems where the underscore flavours may be defined as empty.
Found the hard way be bcook@@; joint brainstrom with bcook beck and guenther
@
text
@d1 1
a1 1
/* $OpenBSD: cfb_enc.c,v 1.10 2014/06/12 15:49:28 deraadt Exp $ */
d75 3
a77 3
	register DES_LONG d0,d1,v0,v1;
	register unsigned long l=length;
	register int num=numbits/8,n=(numbits+7)/8,i,rem=numbits%8;
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d80 1
a80 1
#if _BYTE_ORDER != _LITTLE_ENDIAN
d118 1
a118 1
#if _BYTE_ORDER != _LITTLE_ENDIAN
d133 1
a133 1
#if _BYTE_ORDER == _LITTLE_ENDIAN
d161 1
a161 1
#if _BYTE_ORDER != _LITTLE_ENDIAN
d176 1
a176 1
#if _BYTE_ORDER == _LITTLE_ENDIAN
@


1.9
log
@Do not ask the user to pass either -DB_ENDIAN or -DL_ENDIAN to the compiler,
but rather figure out the endianness from <machine/endian.h> automagically;
help from guenther@@

ok jca@@ guenther@@ beck@@ and the rest of the `Buena SSL rampage club'
@
text
@d1 1
a1 1
/* crypto/des/cfb_enc.c */
@


1.8
log
@Put the final pieces from e_os.h in the required places, and remove it.
"dance on it's grave" says beck
ok guenther beck
@
text
@d61 1
d80 1
a80 1
#ifndef L_ENDIAN
d118 1
a118 1
#ifndef L_ENDIAN
d133 1
a133 1
#ifdef L_ENDIAN
d161 1
a161 1
#ifndef L_ENDIAN
d176 1
a176 1
#ifdef L_ENDIAN
@


1.7
log
@resolve conflicts
@
text
@a58 1
#include "e_os.h"
@


1.6
log
@merge 0.9.7d
@
text
@d61 1
d76 2
a77 2
	register unsigned long l=length,n=(numbits+7)/8;
	register int num=numbits,i;
d80 1
d82 3
d86 7
a92 1
	if (num > 64) return;
d98 1
a98 1
		while (l >= n)
d112 1
a112 1
			if (num == 32)
d114 1
a114 1
			else if (num == 64)
d118 1
d124 6
a129 4
				/* shift ovec left most of the bits... */
				memmove(ovec,ovec+num/8,8+(num%8 ? 1 : 0));
				/* now the remaining bits */
				if(num%8 != 0)
d131 5
a135 4
						{
						ovec[i]<<=num%8;
						ovec[i]|=ovec[i+1]>>(8-num%8);
						}
d139 1
d145 1
a145 1
		while (l >= n)
d155 1
a155 1
			if (num == 32)
d157 1
a157 1
			else if (num == 64)
d161 1
d167 6
a172 4
				/* shift ovec left most of the bits... */
				memmove(ovec,ovec+num/8,8+(num%8 ? 1 : 0));
				/* now the remaining bits */
				if(num%8 != 0)
d174 5
a178 4
						{
						ovec[i]<<=num%8;
						ovec[i]|=ovec[i+1]>>(8-num%8);
						}
d182 1
@


1.5
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d59 1
a67 2
/* WARNING WARNING: this uses in and out in 8-byte chunks regardless of
 * length */
d74 3
a76 3
	register DES_LONG d0,d1,v0,v1,n=(numbits+7)/8;
	register unsigned long l=length;
	register int num=numbits;
d116 1
a116 1
					for(n=0 ; n < 8 ; ++n)
d118 2
a119 2
						ovec[n]<<=num%8;
						ovec[n]|=ovec[n+1]>>(8-num%8);
d154 1
a154 1
					for(n=0 ; n < 8 ; ++n)
d156 2
a157 2
						ovec[n]<<=num%8;
						ovec[n]|=ovec[n+1]>>(8-num%8);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d67 4
d72 2
a73 1
		     long length, DES_key_schedule *schedule, DES_cblock *ivec, int enc)
a75 1
	register DES_LONG mask0,mask1;
d80 1
a82 15
	if (num > 32)
		{
		mask0=0xffffffffL;
		if (num == 64)
			mask1=mask0;
		else	mask1=(1L<<(num-32))-1;
		}
	else
		{
		if (num == 32)
			mask0=0xffffffffL;
		else	mask0=(1L<<num)-1;
		mask1=0x00000000L;
		}

d96 2
a97 2
			d0=(d0^ti[0])&mask0;
			d1=(d1^ti[1])&mask1;
d106 1
a106 6
			else if (num > 32) /* && num != 64 */
				{
				v0=((v1>>(num-32))|(d0<<(64-num)))&0xffffffffL;
				v1=((d0>>(num-32))|(d1<<(64-num)))&0xffffffffL;
				}
			else /* num < 32 */
d108 17
a124 2
				v0=((v0>>num)|(v1<<(32-num)))&0xffffffffL;
				v1=((v1>>num)|(d0<<(32-num)))&0xffffffffL;
d144 1
a144 6
			else if (num > 32) /* && num != 64 */
				{
				v0=((v1>>(num-32))|(d0<<(64-num)))&0xffffffffL;
				v1=((d0>>(num-32))|(d1<<(64-num)))&0xffffffffL;
				}
			else /* num < 32 */
d146 17
a162 2
				v0=((v0>>num)|(v1<<(32-num)))&0xffffffffL;
				v1=((v1>>num)|(d0<<(32-num)))&0xffffffffL;
d164 2
a165 2
			d0=(d0^ti[0])&mask0;
			d1=(d1^ti[1])&mask1;
@


1.3
log
@openssl-engine-0.9.6a merge
@
text
@d67 2
a68 2
void des_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
	     long length, des_key_schedule schedule, des_cblock *ivec, int enc)
d103 1
a103 1
			des_encrypt1((DES_LONG *)ti,schedule,DES_ENCRYPT);
d135 1
a135 1
			des_encrypt1((DES_LONG *)ti,schedule,DES_ENCRYPT);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d103 1
a103 1
			des_encrypt((DES_LONG *)ti,schedule,DES_ENCRYPT);
d135 1
a135 1
			des_encrypt((DES_LONG *)ti,schedule,DES_ENCRYPT);
@


1.1
log
@Initial revision
@
text
@d67 2
a68 8
void des_cfb_encrypt(in, out, numbits, length, schedule, ivec, enc)
unsigned char *in;
unsigned char *out;
int numbits;
long length;
des_key_schedule schedule;
des_cblock (*ivec);
int enc;
d93 1
a93 1
	iv=(unsigned char *)ivec;
d160 1
a160 1
	iv=(unsigned char *)ivec;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d67 8
a74 2
void DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
		     long length, DES_key_schedule *schedule, DES_cblock *ivec, int enc)
d99 1
a99 1
	iv = &(*ivec)[0];
d109 1
a109 1
			DES_encrypt1((DES_LONG *)ti,schedule,DES_ENCRYPT);
d141 1
a141 1
			DES_encrypt1((DES_LONG *)ti,schedule,DES_ENCRYPT);
d166 1
a166 1
	iv = &(*ivec)[0];
@


1.1.1.3
log
@import 0.9.7c
@
text
@a66 4
/* WARNING WARNING: this uses in and out in 8-byte chunks regardless of
 * length */
/* Until Aug 1 2003 this function did not correctly implement CFB-r, so it
 * will not be compatible with any encryption prior to that date. Ben. */
d68 1
a68 2
		     long length, DES_key_schedule *schedule, DES_cblock *ivec,
		     int enc)
d71 1
a75 1
	unsigned char ovec[16];
d78 15
d106 2
a107 2
			d0^=ti[0];
			d1^=ti[1];
d116 6
a121 1
			else
d123 2
a124 17
				iv=&ovec[0];
				l2c(v0,iv);
				l2c(v1,iv);
				l2c(d0,iv);
				l2c(d1,iv);
				/* shift ovec left most of the bits... */
				memmove(ovec,ovec+num/8,8+(num%8 ? 1 : 0));
				/* now the remaining bits */
				if(num%8 != 0)
					for(n=0 ; n < 8 ; ++n)
						{
						ovec[n]<<=num%8;
						ovec[n]|=ovec[n+1]>>(8-num%8);
						}
				iv=&ovec[0];
				c2l(iv,v0);
				c2l(iv,v1);
d144 6
a149 1
			else
d151 2
a152 17
				iv=&ovec[0];
				l2c(v0,iv);
				l2c(v1,iv);
				l2c(d0,iv);
				l2c(d1,iv);
				/* shift ovec left most of the bits... */
				memmove(ovec,ovec+num/8,8+(num%8 ? 1 : 0));
				/* now the remaining bits */
				if(num%8 != 0)
					for(n=0 ; n < 8 ; ++n)
						{
						ovec[n]<<=num%8;
						ovec[n]|=ovec[n+1]>>(8-num%8);
						}
				iv=&ovec[0];
				c2l(iv,v0);
				c2l(iv,v1);
d154 2
a155 2
			d0^=ti[0];
			d1^=ti[1];
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@a58 1
#include "e_os.h"
d67 2
d75 3
a77 3
	register DES_LONG d0,d1,v0,v1;
	register unsigned long l=length,n=(numbits+7)/8;
	register int num=numbits,i;
d117 1
a117 1
					for(i=0 ; i < 8 ; ++i)
d119 2
a120 2
						ovec[i]<<=num%8;
						ovec[i]|=ovec[i+1]>>(8-num%8);
d155 1
a155 1
					for(i=0 ; i < 8 ; ++i)
d157 2
a158 2
						ovec[i]<<=num%8;
						ovec[i]|=ovec[i+1]>>(8-num%8);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@a60 1
#include <assert.h>
d75 2
a76 2
	register unsigned long l=length;
	register int num=numbits/8,n=(numbits+7)/8,i,rem=numbits%8;
a78 1
#ifndef L_ENDIAN
a79 3
#else
	unsigned int  sh[4];
	unsigned char *ovec=(unsigned char *)sh;
d81 1
a81 7
	/* I kind of count that compiler optimizes away this assertioni,*/
	assert (sizeof(sh[0])==4);	/* as this holds true for all,	*/
					/* but 16-bit platforms...	*/
					
#endif

	if (numbits<=0 || numbits > 64) return;
d87 1
a87 1
		while (l >= (unsigned long)n)
d101 1
a101 1
			if (numbits == 32)
d103 1
a103 1
			else if (numbits == 64)
a106 1
#ifndef L_ENDIAN
d112 4
a115 6
#else
				sh[0]=v0, sh[1]=v1, sh[2]=d0, sh[3]=d1;
#endif
				if (rem==0)
					memmove(ovec,ovec+num,8);
				else
d117 4
a120 5
						ovec[i]=ovec[i+num]<<rem |
							ovec[i+num+1]>>(8-rem);
#ifdef L_ENDIAN
				v0=sh[0], v1=sh[1];
#else
a123 1
#endif
d129 1
a129 1
		while (l >= (unsigned long)n)
d139 1
a139 1
			if (numbits == 32)
d141 1
a141 1
			else if (numbits == 64)
a144 1
#ifndef L_ENDIAN
d150 4
a153 6
#else
				sh[0]=v0, sh[1]=v1, sh[2]=d0, sh[3]=d1;
#endif
				if (rem==0)
					memmove(ovec,ovec+num,8);
				else
d155 4
a158 5
						ovec[i]=ovec[i+num]<<rem |
							ovec[i+num+1]>>(8-rem);
#ifdef L_ENDIAN
				v0=sh[0], v1=sh[1];
#else
a161 1
#endif
@


