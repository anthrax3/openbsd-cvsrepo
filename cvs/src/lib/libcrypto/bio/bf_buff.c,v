head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24;
locks; strict;
comment	@ * @;


1.24
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.23;
commitid	kT0fLt3r4lroFJra;

1.23
date	2015.07.19.18.29.31;	author miod;	state Exp;
branches;
next	1.22;
commitid	tXLDcP80XKVov5z5;

1.22
date	2015.07.19.01.18.17;	author beck;	state Exp;
branches;
next	1.21;
commitid	rtYCcNbTn4qSKbuH;

1.21
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.20;
commitid	yQEL1wOWIearrW15;

1.20
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.19;
commitid	id8dTrTMtnTn4fqt;

1.19
date	2014.07.10.11.25.13;	author tedu;	state Exp;
branches;
next	1.18;
commitid	Pv7aSK7aYL3NQSpP;

1.18
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.21.11.12.49;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.22.19.56;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.17.50.44;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.15.01.02;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2012.01.05.23.01.38;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.01.19.51.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.16;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.07;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.39;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.54;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.39;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.11.21.12.26;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.01.05.22.58.55;	author djm;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: bf_buff.c,v 1.23 2015/07/19 18:29:31 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <string.h>

#include <openssl/bio.h>
#include <openssl/err.h>

static int buffer_write(BIO *h, const char *buf, int num);
static int buffer_read(BIO *h, char *buf, int size);
static int buffer_puts(BIO *h, const char *str);
static int buffer_gets(BIO *h, char *str, int size);
static long buffer_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int buffer_new(BIO *h);
static int buffer_free(BIO *data);
static long buffer_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);
#define DEFAULT_BUFFER_SIZE	4096

static BIO_METHOD methods_buffer = {
	.type = BIO_TYPE_BUFFER,
	.name = "buffer",
	.bwrite = buffer_write,
	.bread = buffer_read,
	.bputs = buffer_puts,
	.bgets = buffer_gets,
	.ctrl = buffer_ctrl,
	.create = buffer_new,
	.destroy = buffer_free,
	.callback_ctrl = buffer_callback_ctrl
};

BIO_METHOD *
BIO_f_buffer(void)
{
	return (&methods_buffer);
}

static int
buffer_new(BIO *bi)
{
	BIO_F_BUFFER_CTX *ctx;

	ctx = malloc(sizeof(BIO_F_BUFFER_CTX));
	if (ctx == NULL)
		return (0);
	ctx->ibuf = malloc(DEFAULT_BUFFER_SIZE);
	if (ctx->ibuf == NULL) {
		free(ctx);
		return (0);
	}
	ctx->obuf = malloc(DEFAULT_BUFFER_SIZE);
	if (ctx->obuf == NULL) {
		free(ctx->ibuf);
		free(ctx);
		return (0);
	}
	ctx->ibuf_size = DEFAULT_BUFFER_SIZE;
	ctx->obuf_size = DEFAULT_BUFFER_SIZE;
	ctx->ibuf_len = 0;
	ctx->ibuf_off = 0;
	ctx->obuf_len = 0;
	ctx->obuf_off = 0;

	bi->init = 1;
	bi->ptr = (char *)ctx;
	bi->flags = 0;
	return (1);
}

static int
buffer_free(BIO *a)
{
	BIO_F_BUFFER_CTX *b;

	if (a == NULL)
		return (0);
	b = (BIO_F_BUFFER_CTX *)a->ptr;
	free(b->ibuf);
	free(b->obuf);
	free(a->ptr);
	a->ptr = NULL;
	a->init = 0;
	a->flags = 0;
	return (1);
}

static int
buffer_read(BIO *b, char *out, int outl)
{
	int i, num = 0;
	BIO_F_BUFFER_CTX *ctx;

	if (out == NULL)
		return (0);
	ctx = (BIO_F_BUFFER_CTX *)b->ptr;

	if ((ctx == NULL) || (b->next_bio == NULL))
		return (0);
	num = 0;
	BIO_clear_retry_flags(b);

start:
	i = ctx->ibuf_len;
	/* If there is stuff left over, grab it */
	if (i != 0) {
		if (i > outl)
			i = outl;
		memcpy(out, &(ctx->ibuf[ctx->ibuf_off]), i);
		ctx->ibuf_off += i;
		ctx->ibuf_len -= i;
		num += i;
		if (outl == i)
			return (num);
		outl -= i;
		out += i;
	}

	/* We may have done a partial read. try to do more.
	 * We have nothing in the buffer.
	 * If we get an error and have read some data, just return it
	 * and let them retry to get the error again.
	 * copy direct to parent address space */
	if (outl > ctx->ibuf_size) {
		for (;;) {
			i = BIO_read(b->next_bio, out, outl);
			if (i <= 0) {
				BIO_copy_next_retry(b);
				if (i < 0)
					return ((num > 0) ? num : i);
				if (i == 0)
					return (num);
			}
			num += i;
			if (outl == i)
				return (num);
			out += i;
			outl -= i;
		}
	}
	/* else */

	/* we are going to be doing some buffering */
	i = BIO_read(b->next_bio, ctx->ibuf, ctx->ibuf_size);
	if (i <= 0) {
		BIO_copy_next_retry(b);
		if (i < 0)
			return ((num > 0) ? num : i);
		if (i == 0)
			return (num);
	}
	ctx->ibuf_off = 0;
	ctx->ibuf_len = i;

	/* Lets re-read using ourselves :-) */
	goto start;
}

static int
buffer_write(BIO *b, const char *in, int inl)
{
	int i, num = 0;
	BIO_F_BUFFER_CTX *ctx;

	if ((in == NULL) || (inl <= 0))
		return (0);
	ctx = (BIO_F_BUFFER_CTX *)b->ptr;
	if ((ctx == NULL) || (b->next_bio == NULL))
		return (0);

	BIO_clear_retry_flags(b);
start:
	i = ctx->obuf_size - (ctx->obuf_len + ctx->obuf_off);
	/* add to buffer and return */
	if (i >= inl) {
		memcpy(&(ctx->obuf[ctx->obuf_off + ctx->obuf_len]), in, inl);
		ctx->obuf_len += inl;
		return (num + inl);
	}
	/* else */
	/* stuff already in buffer, so add to it first, then flush */
	if (ctx->obuf_len != 0) {
		if (i > 0) /* lets fill it up if we can */
		{
			memcpy(&(ctx->obuf[ctx->obuf_off + ctx->obuf_len]), in, i);
			in += i;
			inl -= i;
			num += i;
			ctx->obuf_len += i;
		}
		/* we now have a full buffer needing flushing */
		for (;;) {
			i = BIO_write(b->next_bio, &(ctx->obuf[ctx->obuf_off]),
			    ctx->obuf_len);
			if (i <= 0) {
				BIO_copy_next_retry(b);

				if (i < 0)
					return ((num > 0) ? num : i);
				if (i == 0)
					return (num);
			}
			ctx->obuf_off += i;
			ctx->obuf_len -= i;
			if (ctx->obuf_len == 0)
				break;
		}
	}
	/* we only get here if the buffer has been flushed and we
	 * still have stuff to write */
	ctx->obuf_off = 0;

	/* we now have inl bytes to write */
	while (inl >= ctx->obuf_size) {
		i = BIO_write(b->next_bio, in, inl);
		if (i <= 0) {
			BIO_copy_next_retry(b);
			if (i < 0)
				return ((num > 0) ? num : i);
			if (i == 0)
				return (num);
		}
		num += i;
		in += i;
		inl -= i;
		if (inl == 0)
			return (num);
	}

	/* copy the rest into the buffer since we have only a small
	 * amount left */
	goto start;
}

static long
buffer_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	BIO *dbio;
	BIO_F_BUFFER_CTX *ctx;
	long ret = 1;
	char *p1, *p2;
	int r, i, *ip;
	int ibs, obs;

	ctx = (BIO_F_BUFFER_CTX *)b->ptr;

	switch (cmd) {
	case BIO_CTRL_RESET:
		ctx->ibuf_off = 0;
		ctx->ibuf_len = 0;
		ctx->obuf_off = 0;
		ctx->obuf_len = 0;
		if (b->next_bio == NULL)
			return (0);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_INFO:
		ret = (long)ctx->obuf_len;
		break;
	case BIO_C_GET_BUFF_NUM_LINES:
		ret = 0;
		p1 = ctx->ibuf;
		for (i = 0; i < ctx->ibuf_len; i++) {
			if (p1[ctx->ibuf_off + i] == '\n')
				ret++;
		}
		break;
	case BIO_CTRL_WPENDING:
		ret = (long)ctx->obuf_len;
		if (ret == 0) {
			if (b->next_bio == NULL)
				return (0);
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		}
		break;
	case BIO_CTRL_PENDING:
		ret = (long)ctx->ibuf_len;
		if (ret == 0) {
			if (b->next_bio == NULL)
				return (0);
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		}
		break;
	case BIO_C_SET_BUFF_READ_DATA:
		if (num > ctx->ibuf_size) {
			p1 = malloc(num);
			if (p1 == NULL)
				goto malloc_error;
			free(ctx->ibuf);
			ctx->ibuf = p1;
		}
		ctx->ibuf_off = 0;
		ctx->ibuf_len = (int)num;
		memcpy(ctx->ibuf, ptr, num);
		ret = 1;
		break;
	case BIO_C_SET_BUFF_SIZE:
		if (ptr != NULL) {
			ip = (int *)ptr;
			if (*ip == 0) {
				ibs = (int)num;
				obs = ctx->obuf_size;
			}
			else /* if (*ip == 1) */
			{
				ibs = ctx->ibuf_size;
				obs = (int)num;
			}
		} else {
			ibs = (int)num;
			obs = (int)num;
		}
		p1 = ctx->ibuf;
		p2 = ctx->obuf;
		if ((ibs > DEFAULT_BUFFER_SIZE) && (ibs != ctx->ibuf_size)) {
			p1 = malloc(num);
			if (p1 == NULL)
				goto malloc_error;
		}
		if ((obs > DEFAULT_BUFFER_SIZE) && (obs != ctx->obuf_size)) {
			p2 = malloc(num);
			if (p2 == NULL) {
				if (p1 != ctx->ibuf)
					free(p1);
				goto malloc_error;
			}
		}
		if (ctx->ibuf != p1) {
			free(ctx->ibuf);
			ctx->ibuf = p1;
			ctx->ibuf_off = 0;
			ctx->ibuf_len = 0;
			ctx->ibuf_size = ibs;
		}
		if (ctx->obuf != p2) {
			free(ctx->obuf);
			ctx->obuf = p2;
			ctx->obuf_off = 0;
			ctx->obuf_len = 0;
			ctx->obuf_size = obs;
		}
		break;
	case BIO_C_DO_STATE_MACHINE:
		if (b->next_bio == NULL)
			return (0);
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;

	case BIO_CTRL_FLUSH:
		if (b->next_bio == NULL)
			return (0);
		if (ctx->obuf_len <= 0) {
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
			break;
		}

		for (;;) {
			BIO_clear_retry_flags(b);
			if (ctx->obuf_len > 0) {
				r = BIO_write(b->next_bio,
				    &(ctx->obuf[ctx->obuf_off]),
				    ctx->obuf_len);
				BIO_copy_next_retry(b);
				if (r <= 0)
					return ((long)r);
				ctx->obuf_off += r;
				ctx->obuf_len -= r;
			} else {
				ctx->obuf_len = 0;
				ctx->obuf_off = 0;
				break;
			}
		}
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_DUP:
		dbio = (BIO *)ptr;
		if (!BIO_set_read_buffer_size(dbio, ctx->ibuf_size) ||
		    !BIO_set_write_buffer_size(dbio, ctx->obuf_size))
			ret = 0;
		break;
	default:
		if (b->next_bio == NULL)
			return (0);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	}
	return (ret);
malloc_error:
	BIOerror(ERR_R_MALLOC_FAILURE);
	return (0);
}

static long
buffer_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	default:
		ret = BIO_callback_ctrl(b->next_bio, cmd, fp);
		break;
	}
	return (ret);
}

static int
buffer_gets(BIO *b, char *buf, int size)
{
	BIO_F_BUFFER_CTX *ctx;
	int num = 0, i, flag;
	char *p;

	ctx = (BIO_F_BUFFER_CTX *)b->ptr;
	size--; /* reserve space for a '\0' */
	BIO_clear_retry_flags(b);

	for (;;) {
		if (ctx->ibuf_len > 0) {
			p = &(ctx->ibuf[ctx->ibuf_off]);
			flag = 0;
			for (i = 0; (i < ctx->ibuf_len) && (i < size); i++) {
				*(buf++) = p[i];
				if (p[i] == '\n') {
					flag = 1;
					i++;
					break;
				}
			}
			num += i;
			size -= i;
			ctx->ibuf_len -= i;
			ctx->ibuf_off += i;
			if (flag || size == 0) {
				*buf = '\0';
				return (num);
			}
		}
		else	/* read another chunk */
		{
			i = BIO_read(b->next_bio, ctx->ibuf, ctx->ibuf_size);
			if (i <= 0) {
				BIO_copy_next_retry(b);
				*buf = '\0';
				if (i < 0)
					return ((num > 0) ? num : i);
				if (i == 0)
					return (num);
			}
			ctx->ibuf_len = i;
			ctx->ibuf_off = 0;
		}
	}
}

static int
buffer_puts(BIO *b, const char *str)
{
	return (buffer_write(b, str, strlen(str)));
}
@


1.23
log
@Drop stupid (int) casts for the arguments of malloc() and friends. This is
not 16-bit MS-DOS anymore.
ok bcook@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: bf_buff.c,v 1.22 2015/07/19 01:18:17 beck Exp $ */
d448 1
a448 1
	BIOerr(BIO_F_BUFFER_CTRL, ERR_R_MALLOC_FAILURE);
@


1.22
log
@
Fix Coverity 72742 - ret is overwritten immediately after this.
ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: bf_buff.c,v 1.21 2014/07/11 08:44:47 jsing Exp $ */
d342 1
a342 1
			p1 = malloc((int)num);
d372 1
a372 1
			p1 = malloc((int)num);
d377 1
a377 1
			p2 = malloc((int)num);
@


1.21
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bf_buff.c,v 1.20 2014/07/10 13:58:22 jsing Exp $ */
a428 1
				ret = 1;
@


1.20
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bf_buff.c,v 1.19 2014/07/10 11:25:13 tedu Exp $ */
a62 1
#include "cryptlib.h"
d64 1
@


1.19
log
@delete some casts. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: bf_buff.c,v 1.18 2014/06/12 15:49:28 deraadt Exp $ */
d59 1
d61 2
a62 1
#include <errno.h>
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d348 1
a348 1
		memcpy(ctx->ibuf, ptr, (int)num);
@


1.17
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/bio/bf_buff.c */
@


1.16
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d133 2
a134 4
	if (b->ibuf != NULL)
		free(b->ibuf);
	if (b->obuf != NULL)
		free(b->obuf);
d343 1
a343 2
			if (ctx->ibuf != NULL)
				free(ctx->ibuf);
@


1.15
log
@Bring malloc/calloc/realloc sequences to modern standard
ok guenther
@
text
@d75 10
a84 10
	BIO_TYPE_BUFFER,
	"buffer",
	buffer_write,
	buffer_read,
	buffer_puts,
	buffer_gets,
	buffer_ctrl,
	buffer_new,
	buffer_free,
	buffer_callback_ctrl,
@


1.14
log
@delete if 0 code
@
text
@d98 1
a98 1
	ctx = (BIO_F_BUFFER_CTX *)malloc(sizeof(BIO_F_BUFFER_CTX));
d101 1
a101 1
	ctx->ibuf = (char *)malloc(DEFAULT_BUFFER_SIZE);
d106 1
a106 1
	ctx->obuf = (char *)malloc(DEFAULT_BUFFER_SIZE);
d373 1
a373 1
			p1 = (char *)malloc((int)num);
d378 1
a378 1
			p2 = (char *)malloc((int)num);
@


1.13
log
@some KNF cleanup following the script
@
text
@a421 3
#if 0
				fprintf(stderr, "FLUSH [%3d] %3d -> %3d\n", ctx->obuf_off, ctx->obuf_len, r);
#endif
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d87 2
a88 2
BIO_METHOD
*BIO_f_buffer(void)
@


1.11
log
@More KNF.
@
text
@d98 1
a98 1
	ctx = (BIO_F_BUFFER_CTX *)OPENSSL_malloc(sizeof(BIO_F_BUFFER_CTX));
d101 1
a101 1
	ctx->ibuf = (char *)OPENSSL_malloc(DEFAULT_BUFFER_SIZE);
d103 1
a103 1
		OPENSSL_free(ctx);
d106 1
a106 1
	ctx->obuf = (char *)OPENSSL_malloc(DEFAULT_BUFFER_SIZE);
d108 2
a109 2
		OPENSSL_free(ctx->ibuf);
		OPENSSL_free(ctx);
d134 1
a134 1
		OPENSSL_free(b->ibuf);
d136 2
a137 2
		OPENSSL_free(b->obuf);
	OPENSSL_free(a->ptr);
d342 1
a342 1
			p1 = OPENSSL_malloc((int)num);
d346 1
a346 1
				OPENSSL_free(ctx->ibuf);
d373 1
a373 1
			p1 = (char *)OPENSSL_malloc((int)num);
d378 1
a378 1
			p2 = (char *)OPENSSL_malloc((int)num);
d381 1
a381 1
					OPENSSL_free(p1);
d386 1
a386 1
			OPENSSL_free(ctx->ibuf);
d393 1
a393 1
			OPENSSL_free(ctx->obuf);
@


1.10
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d250 1
a250 1
			ctx->obuf_len);
d286 1
a286 1
	/* copy the rest into the buffer since we have only a small 
d351 1
a351 1
		memcpy(ctx->ibuf, ptr,(int)num);
d420 2
a421 2
				&(ctx->obuf[ctx->obuf_off]),
				ctx->obuf_len);
@


1.9
log
@OpenSSL 1.0.0f: merge
@
text
@d64 1
a64 1
static int buffer_write(BIO *h, const char *buf,int num);
d74 1
a74 2
static BIO_METHOD methods_buffer=
	{
d85 1
a85 1
	};
d87 9
a95 7
BIO_METHOD *BIO_f_buffer(void)
	{
	return(&methods_buffer);
	}

static int buffer_new(BIO *bi)
	{
d98 13
a110 17
	ctx=(BIO_F_BUFFER_CTX *)OPENSSL_malloc(sizeof(BIO_F_BUFFER_CTX));
	if (ctx == NULL) return(0);
	ctx->ibuf=(char *)OPENSSL_malloc(DEFAULT_BUFFER_SIZE);
	if (ctx->ibuf == NULL) { OPENSSL_free(ctx); return(0); }
	ctx->obuf=(char *)OPENSSL_malloc(DEFAULT_BUFFER_SIZE);
	if (ctx->obuf == NULL) { OPENSSL_free(ctx->ibuf); OPENSSL_free(ctx); return(0); }
	ctx->ibuf_size=DEFAULT_BUFFER_SIZE;
	ctx->obuf_size=DEFAULT_BUFFER_SIZE;
	ctx->ibuf_len=0;
	ctx->ibuf_off=0;
	ctx->obuf_len=0;
	ctx->obuf_off=0;

	bi->init=1;
	bi->ptr=(char *)ctx;
	bi->flags=0;
	return(1);
d112 16
a127 3

static int buffer_free(BIO *a)
	{
d130 7
a136 4
	if (a == NULL) return(0);
	b=(BIO_F_BUFFER_CTX *)a->ptr;
	if (b->ibuf != NULL) OPENSSL_free(b->ibuf);
	if (b->obuf != NULL) OPENSSL_free(b->obuf);
d138 10
a147 9
	a->ptr=NULL;
	a->init=0;
	a->flags=0;
	return(1);
	}
	
static int buffer_read(BIO *b, char *out, int outl)
	{
	int i,num=0;
d150 7
a156 5
	if (out == NULL) return(0);
	ctx=(BIO_F_BUFFER_CTX *)b->ptr;

	if ((ctx == NULL) || (b->next_bio == NULL)) return(0);
	num=0;
d160 1
a160 1
	i=ctx->ibuf_len;
d162 12
a173 11
	if (i != 0)
		{
		if (i > outl) i=outl;
		memcpy(out,&(ctx->ibuf[ctx->ibuf_off]),i);
		ctx->ibuf_off+=i;
		ctx->ibuf_len-=i;
		num+=i;
		if (outl == i)  return(num);
		outl-=i;
		out+=i;
		}
d180 4
a183 7
	if (outl > ctx->ibuf_size)
		{
		for (;;)
			{
			i=BIO_read(b->next_bio,out,outl);
			if (i <= 0)
				{
d185 10
a194 8
				if (i < 0) return((num > 0)?num:i);
				if (i == 0) return(num);
				}
			num+=i;
			if (outl == i) return(num);
			out+=i;
			outl-=i;
			}
d196 1
d200 2
a201 3
	i=BIO_read(b->next_bio,ctx->ibuf,ctx->ibuf_size);
	if (i <= 0)
		{
d203 7
a209 5
		if (i < 0) return((num > 0)?num:i);
		if (i == 0) return(num);
		}
	ctx->ibuf_off=0;
	ctx->ibuf_len=i;
d213 1
a213 1
	}
d215 4
a218 3
static int buffer_write(BIO *b, const char *in, int inl)
	{
	int i,num=0;
d221 5
a225 3
	if ((in == NULL) || (inl <= 0)) return(0);
	ctx=(BIO_F_BUFFER_CTX *)b->ptr;
	if ((ctx == NULL) || (b->next_bio == NULL)) return(0);
d229 1
a229 1
	i=ctx->obuf_size-(ctx->obuf_len+ctx->obuf_off);
d231 5
a235 6
	if (i >= inl)
		{
		memcpy(&(ctx->obuf[ctx->obuf_off+ctx->obuf_len]),in,inl);
		ctx->obuf_len+=inl;
		return(num+inl);
		}
d238 2
a239 1
	if (ctx->obuf_len != 0)
d241 6
a246 8
		if (i > 0) /* lets fill it up if we can */
			{
			memcpy(&(ctx->obuf[ctx->obuf_off+ctx->obuf_len]),in,i);
			in+=i;
			inl-=i;
			num+=i;
			ctx->obuf_len+=i;
			}
d248 4
a251 6
		for (;;)
			{
			i=BIO_write(b->next_bio,&(ctx->obuf[ctx->obuf_off]),
				ctx->obuf_len);
			if (i <= 0)
				{
d254 9
a262 7
				if (i < 0) return((num > 0)?num:i);
				if (i == 0) return(num);
				}
			ctx->obuf_off+=i;
			ctx->obuf_len-=i;
			if (ctx->obuf_len == 0) break;
			}
d264 1
d267 1
a267 1
	ctx->obuf_off=0;
d270 3
a272 5
	while (inl >= ctx->obuf_size)
		{
		i=BIO_write(b->next_bio,in,inl);
		if (i <= 0)
			{
d274 4
a277 7
			if (i < 0) return((num > 0)?num:i);
			if (i == 0) return(num);
			}
		num+=i;
		in+=i;
		inl-=i;
		if (inl == 0) return(num);
d279 6
d289 1
a289 1
	}
d291 3
a293 2
static long buffer_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d296 4
a299 4
	long ret=1;
	char *p1,*p2;
	int r,i,*ip;
	int ibs,obs;
d301 1
a301 1
	ctx=(BIO_F_BUFFER_CTX *)b->ptr;
d303 1
a303 2
	switch (cmd)
		{
d305 7
a311 6
		ctx->ibuf_off=0;
		ctx->ibuf_len=0;
		ctx->obuf_off=0;
		ctx->obuf_len=0;
		if (b->next_bio == NULL) return(0);
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d314 1
a314 1
		ret=(long)ctx->obuf_len;
d317 6
a322 6
		ret=0;
		p1=ctx->ibuf;
		for (i=0; i<ctx->ibuf_len; i++)
			{
			if (p1[ctx->ibuf_off + i] == '\n') ret++;
			}
d325 6
a330 6
		ret=(long)ctx->obuf_len;
		if (ret == 0)
			{
			if (b->next_bio == NULL) return(0);
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
			}
d333 6
a338 6
		ret=(long)ctx->ibuf_len;
		if (ret == 0)
			{
			if (b->next_bio == NULL) return(0);
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
			}
d341 12
a352 11
		if (num > ctx->ibuf_size)
			{
			p1=OPENSSL_malloc((int)num);
			if (p1 == NULL) goto malloc_error;
			if (ctx->ibuf != NULL) OPENSSL_free(ctx->ibuf);
			ctx->ibuf=p1;
			}
		ctx->ibuf_off=0;
		ctx->ibuf_len=(int)num;
		memcpy(ctx->ibuf,ptr,(int)num);
		ret=1;
d355 6
a360 8
		if (ptr != NULL)
			{
			ip=(int *)ptr;
			if (*ip == 0)
				{
				ibs=(int)num;
				obs=ctx->obuf_size;
				}
a361 6
				{
				ibs=ctx->ibuf_size;
				obs=(int)num;
				}
			}
		else
d363 2
a364 2
			ibs=(int)num;
			obs=(int)num;
d366 16
a381 13
		p1=ctx->ibuf;
		p2=ctx->obuf;
		if ((ibs > DEFAULT_BUFFER_SIZE) && (ibs != ctx->ibuf_size))
			{
			p1=(char *)OPENSSL_malloc((int)num);
			if (p1 == NULL) goto malloc_error;
			}
		if ((obs > DEFAULT_BUFFER_SIZE) && (obs != ctx->obuf_size))
			{
			p2=(char *)OPENSSL_malloc((int)num);
			if (p2 == NULL)
				{
				if (p1 != ctx->ibuf) OPENSSL_free(p1);
a382 1
				}
d384 2
a385 2
		if (ctx->ibuf != p1)
			{
d387 6
a392 7
			ctx->ibuf=p1;
			ctx->ibuf_off=0;
			ctx->ibuf_len=0;
			ctx->ibuf_size=ibs;
			}
		if (ctx->obuf != p2)
			{
d394 5
a398 5
			ctx->obuf=p2;
			ctx->obuf_off=0;
			ctx->obuf_len=0;
			ctx->obuf_size=obs;
			}
d401 2
a402 1
		if (b->next_bio == NULL) return(0);
d404 1
a404 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d409 4
a412 4
		if (b->next_bio == NULL) return(0);
		if (ctx->obuf_len <= 0)
			{
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d414 1
a414 1
			}
d416 1
a416 2
		for (;;)
			{
d418 4
a421 5
			if (ctx->obuf_len > 0)
				{
				r=BIO_write(b->next_bio,
					&(ctx->obuf[ctx->obuf_off]),
					ctx->obuf_len);
d423 1
a423 1
fprintf(stderr,"FLUSH [%3d] %3d -> %3d\n",ctx->obuf_off,ctx->obuf_len,r);
d426 8
a433 9
				if (r <= 0) return((long)r);
				ctx->obuf_off+=r;
				ctx->obuf_len-=r;
				}
			else
				{
				ctx->obuf_len=0;
				ctx->obuf_off=0;
				ret=1;
a434 1
				}
d436 2
a437 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d440 4
a443 4
		dbio=(BIO *)ptr;
		if (	!BIO_set_read_buffer_size(dbio,ctx->ibuf_size) ||
			!BIO_set_write_buffer_size(dbio,ctx->obuf_size))
			ret=0;
d446 3
a448 2
		if (b->next_bio == NULL) return(0);
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d450 2
a451 2
		}
	return(ret);
d453 12
a464 11
	BIOerr(BIO_F_BUFFER_CTRL,ERR_R_MALLOC_FAILURE);
	return(0);
	}

static long buffer_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
d466 1
a466 1
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
a467 2
		}
	return(ret);
d469 2
d472 3
a474 2
static int buffer_gets(BIO *b, char *buf, int size)
	{
d476 1
a476 1
	int num=0,i,flag;
d479 1
a479 1
	ctx=(BIO_F_BUFFER_CTX *)b->ptr;
d483 8
a490 12
	for (;;)
		{
		if (ctx->ibuf_len > 0)
			{
			p= &(ctx->ibuf[ctx->ibuf_off]);
			flag=0;
			for (i=0; (i<ctx->ibuf_len) && (i<size); i++)
				{
				*(buf++)=p[i];
				if (p[i] == '\n')
					{
					flag=1;
a492 10
					}
				}
			num+=i;
			size-=i;
			ctx->ibuf_len-=i;
			ctx->ibuf_off+=i;
			if (flag || size == 0)
				{
				*buf='\0';
				return(num);
d495 9
d505 3
a507 4
			{
			i=BIO_read(b->next_bio,ctx->ibuf,ctx->ibuf_size);
			if (i <= 0)
				{
d509 5
a513 6
				*buf='\0';
				if (i < 0) return((num > 0)?num:i);
				if (i == 0) return(num);
				}
			ctx->ibuf_len=i;
			ctx->ibuf_off=0;
d515 2
d519 1
d521 5
a525 5
static int buffer_puts(BIO *b, const char *str)
	{
	return(buffer_write(b,str,strlen(str)));
	}

@


1.8
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d212 1
a212 1
		memcpy(&(ctx->obuf[ctx->obuf_len]),in,inl);
d222 1
a222 1
			memcpy(&(ctx->obuf[ctx->obuf_len]),in,i);
d297 1
a297 1
		for (i=ctx->ibuf_off; i<ctx->ibuf_len; i++)
d299 1
a299 1
			if (p1[i] == '\n') ret++;
d402 1
a402 1
			if (ctx->obuf_len > ctx->obuf_off)
d406 1
a406 1
					ctx->obuf_len-ctx->obuf_off);
d408 1
a408 1
fprintf(stderr,"FLUSH [%3d] %3d -> %3d\n",ctx->obuf_off,ctx->obuf_len-ctx->obuf_off,r);
d413 1
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d497 1
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d485 1
a485 1
			if ((flag) || (i == size))
@


1.5
log
@merge openssl 0.9.6b-engine

Note that this is a maintenence release, API's appear *not* to have changed.
As such, I have only increased the minor number on these libraries
@
text
@a62 1
#include <openssl/evp.h>
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d73 1
a73 1
#define DEFAULT_BUFFER_SIZE	1024
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 5
a69 5
static int buffer_write(BIO *h,char *buf,int num);
static int buffer_read(BIO *h,char *buf,int size);
static int buffer_puts(BIO *h,char *str);
static int buffer_gets(BIO *h,char *str,int size);
static long buffer_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d72 1
a72 1
static long buffer_callback_ctrl(BIO *h,int cmd, void (*fp)());
d98 1
a98 1
	ctx=(BIO_F_BUFFER_CTX *)Malloc(sizeof(BIO_F_BUFFER_CTX));
d100 4
a103 4
	ctx->ibuf=(char *)Malloc(DEFAULT_BUFFER_SIZE);
	if (ctx->ibuf == NULL) { Free(ctx); return(0); }
	ctx->obuf=(char *)Malloc(DEFAULT_BUFFER_SIZE);
	if (ctx->obuf == NULL) { Free(ctx->ibuf); Free(ctx); return(0); }
d123 3
a125 3
	if (b->ibuf != NULL) Free(b->ibuf);
	if (b->obuf != NULL) Free(b->obuf);
	Free(a->ptr);
d198 1
a198 1
static int buffer_write(BIO *b, char *in, int inl)
d271 1
a271 1
static long buffer_ctrl(BIO *b, int cmd, long num, char *ptr)
d322 1
a322 1
			p1=Malloc((int)num);
d324 1
a324 1
			if (ctx->ibuf != NULL) Free(ctx->ibuf);
d356 1
a356 1
			p1=(char *)Malloc((int)num);
d361 1
a361 1
			p2=(char *)Malloc((int)num);
d364 1
a364 1
				if (p1 != ctx->ibuf) Free(p1);
d370 1
a370 1
			Free(ctx->ibuf);
d378 1
a378 1
			Free(ctx->obuf);
d442 1
a442 1
static long buffer_callback_ctrl(BIO *b, int cmd, void (*fp)())
d507 1
a507 1
static int buffer_puts(BIO *b, char *str)
d509 1
a509 1
	return(BIO_write(b,str,strlen(str)));
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d72 1
d86 1
d289 1
d306 2
d309 1
d314 2
d317 1
d386 1
d393 1
d432 1
d440 14
@


1.1
log
@Initial revision
@
text
@d62 2
a63 2
#include "bio.h"
#include "evp.h"
a64 1
#ifndef NOPROTO
a71 10
#else
static int buffer_write();
static int buffer_read();
static int buffer_puts();
static int buffer_gets();
static long buffer_ctrl();
static int buffer_new();
static int buffer_free();
#endif

d87 1
a87 1
BIO_METHOD *BIO_f_buffer()
d92 1
a92 2
static int buffer_new(bi)
BIO *bi;
d115 1
a115 2
static int buffer_free(a)
BIO *a;
d130 1
a130 4
static int buffer_read(b,out,outl)
BIO *b;
char *out;
int outl;
d196 1
a196 4
static int buffer_write(b,in,inl)
BIO *b;
char *in;
int inl;
d269 1
a269 5
static long buffer_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d412 1
d430 1
a430 4
static int buffer_gets(b,buf,size)
BIO *b;
char *buf;
int size;
d481 1
a481 3
static int buffer_puts(b,str)
BIO *b;
char *str;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 2
a63 1
#include <openssl/bio.h>
d65 6
a70 5
static int buffer_write(BIO *h, const char *buf,int num);
static int buffer_read(BIO *h, char *buf, int size);
static int buffer_puts(BIO *h, const char *str);
static int buffer_gets(BIO *h, char *str, int size);
static long buffer_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d73 11
a83 2
static long buffer_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);
#define DEFAULT_BUFFER_SIZE	4096
a95 1
	buffer_callback_ctrl,
d98 1
a98 1
BIO_METHOD *BIO_f_buffer(void)
d103 2
a104 1
static int buffer_new(BIO *bi)
d108 1
a108 1
	ctx=(BIO_F_BUFFER_CTX *)OPENSSL_malloc(sizeof(BIO_F_BUFFER_CTX));
d110 4
a113 4
	ctx->ibuf=(char *)OPENSSL_malloc(DEFAULT_BUFFER_SIZE);
	if (ctx->ibuf == NULL) { OPENSSL_free(ctx); return(0); }
	ctx->obuf=(char *)OPENSSL_malloc(DEFAULT_BUFFER_SIZE);
	if (ctx->obuf == NULL) { OPENSSL_free(ctx->ibuf); OPENSSL_free(ctx); return(0); }
d127 2
a128 1
static int buffer_free(BIO *a)
d134 3
a136 3
	if (b->ibuf != NULL) OPENSSL_free(b->ibuf);
	if (b->obuf != NULL) OPENSSL_free(b->obuf);
	OPENSSL_free(a->ptr);
d143 4
a146 1
static int buffer_read(BIO *b, char *out, int outl)
d212 4
a215 1
static int buffer_write(BIO *b, const char *in, int inl)
d288 5
a292 1
static long buffer_ctrl(BIO *b, int cmd, long num, void *ptr)
a309 1
		if (b->next_bio == NULL) return(0);
a325 2
			{
			if (b->next_bio == NULL) return(0);
a326 1
			}
a330 2
			{
			if (b->next_bio == NULL) return(0);
a331 1
			}
d336 1
a336 1
			p1=OPENSSL_malloc((int)num);
d338 1
a338 1
			if (ctx->ibuf != NULL) OPENSSL_free(ctx->ibuf);
d370 1
a370 1
			p1=(char *)OPENSSL_malloc((int)num);
d375 1
a375 1
			p2=(char *)OPENSSL_malloc((int)num);
d378 1
a378 1
				if (p1 != ctx->ibuf) OPENSSL_free(p1);
d384 1
a384 1
			OPENSSL_free(ctx->ibuf);
d392 1
a392 1
			OPENSSL_free(ctx->obuf);
a399 1
		if (b->next_bio == NULL) return(0);
a405 1
		if (b->next_bio == NULL) return(0);
a434 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
a442 1
		if (b->next_bio == NULL) return(0);
d452 4
a455 15
static long buffer_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
	default:
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
		break;
		}
	return(ret);
	}

static int buffer_gets(BIO *b, char *buf, int size)
d506 3
a508 1
static int buffer_puts(BIO *b, const char *str)
d510 1
a510 1
	return(buffer_write(b,str,strlen(str)));
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d485 1
a485 1
			if (flag || size == 0)
@


1.1.1.4
log
@import 0.9.7c
@
text
@a496 1
				*buf='\0';
@


1.1.1.5
log
@OpenSSL 1.0.0f: import upstream source
@
text
@d212 1
a212 1
		memcpy(&(ctx->obuf[ctx->obuf_off+ctx->obuf_len]),in,inl);
d222 1
a222 1
			memcpy(&(ctx->obuf[ctx->obuf_off+ctx->obuf_len]),in,i);
d297 1
a297 1
		for (i=0; i<ctx->ibuf_len; i++)
d299 1
a299 1
			if (p1[ctx->ibuf_off + i] == '\n') ret++;
d402 1
a402 1
			if (ctx->obuf_len > 0)
d406 1
a406 1
					ctx->obuf_len);
d408 1
a408 1
fprintf(stderr,"FLUSH [%3d] %3d -> %3d\n",ctx->obuf_off,ctx->obuf_len,r);
a412 1
				ctx->obuf_len-=r;
@


