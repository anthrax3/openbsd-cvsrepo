head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.19
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.18;
commitid	gtwLkRyWx0K1HbzX;

1.18
date	2014.10.22.13.02.03;	author jsing;	state Exp;
branches;
next	1.17;
commitid	PjnBgKe6Buhbf937;

1.17
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	mJUVYpkFBZ0Zv2bG;

1.15
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.21.11.12.49;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.16.15.01.02;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.07;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.39;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.54;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@/* $OpenBSD: bf_nbio.c,v 1.18 2014/10/22 13:02:03 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>

#include <openssl/bio.h>

/* BIO_put and BIO_get both add to the digest,
 * BIO_gets returns the digest */

static int nbiof_write(BIO *h, const char *buf, int num);
static int nbiof_read(BIO *h, char *buf, int size);
static int nbiof_puts(BIO *h, const char *str);
static int nbiof_gets(BIO *h, char *str, int size);
static long nbiof_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int nbiof_new(BIO *h);
static int nbiof_free(BIO *data);
static long nbiof_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);

typedef struct nbio_test_st {
	/* only set if we sent a 'should retry' error */
	int lrn;
	int lwn;
} NBIO_TEST;

static BIO_METHOD methods_nbiof = {
	.type = BIO_TYPE_NBIO_TEST,
	.name = "non-blocking IO test filter",
	.bwrite = nbiof_write,
	.bread = nbiof_read,
	.bputs = nbiof_puts,
	.bgets = nbiof_gets,
	.ctrl = nbiof_ctrl,
	.create = nbiof_new,
	.destroy = nbiof_free,
	.callback_ctrl = nbiof_callback_ctrl
};

BIO_METHOD *
BIO_f_nbio_test(void)
{
	return (&methods_nbiof);
}

static int
nbiof_new(BIO *bi)
{
	NBIO_TEST *nt;

	if (!(nt = malloc(sizeof(NBIO_TEST))))
		return (0);
	nt->lrn = -1;
	nt->lwn = -1;
	bi->ptr = (char *)nt;
	bi->init = 1;
	bi->flags = 0;
	return (1);
}

static int
nbiof_free(BIO *a)
{
	if (a == NULL)
		return (0);
	free(a->ptr);
	a->ptr = NULL;
	a->init = 0;
	a->flags = 0;
	return (1);
}

static int
nbiof_read(BIO *b, char *out, int outl)
{
	int ret = 0;
	int num;
	unsigned char n;

	if (out == NULL)
		return (0);
	if (b->next_bio == NULL)
		return (0);

	BIO_clear_retry_flags(b);

	arc4random_buf(&n, 1);
	num = (n & 0x07);

	if (outl > num)
		outl = num;

	if (num == 0) {
		ret = -1;
		BIO_set_retry_read(b);
	} else {
		ret = BIO_read(b->next_bio, out, outl);
		if (ret < 0)
			BIO_copy_next_retry(b);
	}
	return (ret);
}

static int
nbiof_write(BIO *b, const char *in, int inl)
{
	NBIO_TEST *nt;
	int ret = 0;
	int num;
	unsigned char n;

	if ((in == NULL) || (inl <= 0))
		return (0);
	if (b->next_bio == NULL)
		return (0);
	nt = (NBIO_TEST *)b->ptr;

	BIO_clear_retry_flags(b);

	if (nt->lwn > 0) {
		num = nt->lwn;
		nt->lwn = 0;
	} else {
		arc4random_buf(&n, 1);
		num = (n&7);
	}

	if (inl > num)
		inl = num;

	if (num == 0) {
		ret = -1;
		BIO_set_retry_write(b);
	} else {
		ret = BIO_write(b->next_bio, in, inl);
		if (ret < 0) {
			BIO_copy_next_retry(b);
			nt->lwn = inl;
		}
	}
	return (ret);
}

static long
nbiof_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	long ret;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	case BIO_C_DO_STATE_MACHINE:
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;
	case BIO_CTRL_DUP:
		ret = 0L;
		break;
	default:
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	}
	return (ret);
}

static long
nbiof_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	default:
		ret = BIO_callback_ctrl(b->next_bio, cmd, fp);
		break;
	}
	return (ret);
}

static int
nbiof_gets(BIO *bp, char *buf, int size)
{
	if (bp->next_bio == NULL)
		return (0);
	return (BIO_gets(bp->next_bio, buf, size));
}

static int
nbiof_puts(BIO *bp, const char *str)
{
	if (bp->next_bio == NULL)
		return (0);
	return (BIO_puts(bp->next_bio, str));
}
@


1.18
log
@Use arc4random_buf() instead of RAND_bytes() or RAND_pseudo_bytes().

arc4random_buf() is guaranteed to always succeed - it is worth noting
that a number of the replaced function calls were already missing return
value checks.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bf_nbio.c,v 1.17 2014/07/11 08:44:47 jsing Exp $ */
a132 1
#if 1
a134 1
#endif
d142 1
a142 1
#if 1
d152 1
a152 3
	} else
#endif
	{
a175 1
#if 1
d190 1
a190 3
	} else
#endif
	{
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bf_nbio.c,v 1.16 2014/06/12 15:49:28 deraadt Exp $ */
d61 1
a63 1
#include <openssl/rand.h>
d145 1
a145 1
	RAND_pseudo_bytes(&n, 1);
d185 1
a185 1
		RAND_pseudo_bytes(&n, 1);
@


1.16
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 2
a62 2
#include <errno.h>
#include "cryptlib.h"
a63 1
#include <openssl/bio.h>
@


1.15
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/bio/bf_nbio.c */
@


1.14
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d122 1
a122 2
	if (a->ptr != NULL)
		free(a->ptr);
@


1.13
log
@Bring malloc/calloc/realloc sequences to modern standard
ok guenther
@
text
@d84 10
a93 10
	BIO_TYPE_NBIO_TEST,
	"non-blocking IO test filter",
	nbiof_write,
	nbiof_read,
	nbiof_puts,
	nbiof_gets,
	nbiof_ctrl,
	nbiof_new,
	nbiof_free,
	nbiof_callback_ctrl,
@


1.12
log
@some KNF cleanup following the script
@
text
@d107 1
a107 1
	if (!(nt = (NBIO_TEST *)malloc(sizeof(NBIO_TEST))))
@


1.11
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d96 2
a97 2
BIO_METHOD
*BIO_f_nbio_test(void)
@


1.10
log
@More KNF.
@
text
@d107 1
a107 1
	if (!(nt = (NBIO_TEST *)OPENSSL_malloc(sizeof(NBIO_TEST))))
d123 1
a123 1
		OPENSSL_free(a->ptr);
@


1.9
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
@


1.8
log
@openssl-1.0.0e: resolve conflicts
@
text
@d68 5
a72 5
static int nbiof_write(BIO *h,const char *buf,int num);
static int nbiof_read(BIO *h,char *buf,int size);
static int nbiof_puts(BIO *h,const char *str);
static int nbiof_gets(BIO *h,char *str,int size);
static long nbiof_ctrl(BIO *h,int cmd,long arg1,void *arg2);
d75 3
a77 3
static long nbiof_callback_ctrl(BIO *h,int cmd,bio_info_cb *fp);
typedef struct nbio_test_st
	{
d81 1
a81 1
	} NBIO_TEST;
d83 1
a83 2
static BIO_METHOD methods_nbiof=
	{
d94 1
a94 1
	};
d96 9
a104 7
BIO_METHOD *BIO_f_nbio_test(void)
	{
	return(&methods_nbiof);
	}

static int nbiof_new(BIO *bi)
	{
d107 15
a121 12
	if (!(nt=(NBIO_TEST *)OPENSSL_malloc(sizeof(NBIO_TEST)))) return(0);
	nt->lrn= -1;
	nt->lwn= -1;
	bi->ptr=(char *)nt;
	bi->init=1;
	bi->flags=0;
	return(1);
	}

static int nbiof_free(BIO *a)
	{
	if (a == NULL) return(0);
d124 10
a133 9
	a->ptr=NULL;
	a->init=0;
	a->flags=0;
	return(1);
	}
	
static int nbiof_read(BIO *b, char *out, int outl)
	{
	int ret=0;
d139 4
a142 2
	if (out == NULL) return(0);
	if (b->next_bio == NULL) return(0);
d146 2
a147 2
	RAND_pseudo_bytes(&n,1);
	num=(n&0x07);
d149 2
a150 1
	if (outl > num) outl=num;
d152 2
a153 3
	if (num == 0)
		{
		ret= -1;
d155 1
a155 2
		}
	else
d157 2
a158 2
		{
		ret=BIO_read(b->next_bio,out,outl);
a160 2
		}
	return(ret);
d162 2
d165 3
a167 2
static int nbiof_write(BIO *b, const char *in, int inl)
	{
d169 1
a169 1
	int ret=0;
d173 5
a177 3
	if ((in == NULL) || (inl <= 0)) return(0);
	if (b->next_bio == NULL) return(0);
	nt=(NBIO_TEST *)b->ptr;
d182 7
a188 10
	if (nt->lwn > 0)
		{
		num=nt->lwn;
		nt->lwn=0;
		}
	else
		{
		RAND_pseudo_bytes(&n,1);
		num=(n&7);
		}
d190 2
a191 1
	if (inl > num) inl=num;
d193 2
a194 3
	if (num == 0)
		{
		ret= -1;
d196 1
a196 2
		}
	else
d198 3
a200 4
		{
		ret=BIO_write(b->next_bio,in,inl);
		if (ret < 0)
			{
d202 1
a202 2
			nt->lwn=inl;
			}
a203 1
	return(ret);
d205 2
d208 3
a210 2
static long nbiof_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d213 4
a216 4
	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
        case BIO_C_DO_STATE_MACHINE:
d218 1
a218 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d222 1
a222 1
		ret=0L;
d225 1
a225 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
a226 2
		}
	return(ret);
d228 2
d231 8
a238 7
static long nbiof_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
d240 1
a240 1
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
a241 2
		}
	return(ret);
d243 2
d246 15
a260 14
static int nbiof_gets(BIO *bp, char *buf, int size)
	{
	if (bp->next_bio == NULL) return(0);
	return(BIO_gets(bp->next_bio,buf,size));
	}


static int nbiof_puts(BIO *bp, const char *str)
	{
	if (bp->next_bio == NULL) return(0);
	return(BIO_puts(bp->next_bio,str));
	}


@


1.7
log
@resolve conflicts
@
text
@a127 1
	NBIO_TEST *nt;
a135 1
	nt=(NBIO_TEST *)b->ptr;
@


1.6
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d130 1
a130 1
#if 0
d140 1
a140 1
#if 0
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d106 1
a106 1
	nt=(NBIO_TEST *)OPENSSL_malloc(sizeof(NBIO_TEST));
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a63 1
#include <openssl/evp.h>
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d69 1
a69 1
static int nbiof_write(BIO *h,char *buf,int num);
d71 1
a71 1
static int nbiof_puts(BIO *h,char *str);
d73 1
a73 1
static long nbiof_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d76 1
a76 1
static long nbiof_callback_ctrl(BIO *h,int cmd,void (*fp)());
d107 1
a107 1
	nt=(NBIO_TEST *)Malloc(sizeof(NBIO_TEST));
d120 1
a120 1
		Free(a->ptr);
d162 1
a162 1
static int nbiof_write(BIO *b, char *in, int inl)
d207 1
a207 1
static long nbiof_ctrl(BIO *b, int cmd, long num, char *ptr)
d229 1
a229 1
static long nbiof_callback_ctrl(BIO *b, int cmd, void (*fp)())
d250 1
a250 1
static int nbiof_puts(BIO *bp, char *str)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d76 1
d95 1
d142 1
a142 1
	RAND_bytes(&n,1);
d183 1
a183 1
		RAND_bytes(&n,1);
d224 14
@


1.1
log
@Initial revision
@
text
@d62 3
a64 3
#include "rand.h"
#include "bio.h"
#include "evp.h"
a68 1
#ifndef NOPROTO
a75 10
#else
static int nbiof_write();
static int nbiof_read();
static int nbiof_puts();
static int nbiof_gets();
static long nbiof_ctrl();
static int nbiof_new();
static int nbiof_free();
#endif

d96 1
a96 1
BIO_METHOD *BIO_f_nbio_test()
d101 1
a101 2
static int nbiof_new(bi)
BIO *bi;
d114 1
a114 2
static int nbiof_free(a)
BIO *a;
d125 1
a125 4
static int nbiof_read(b,out,outl)
BIO *b;
char *out;
int outl;
d160 1
a160 4
static int nbiof_write(b,in,inl)
BIO *b;
char *in;
int inl;
d205 1
a205 5
static long nbiof_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d227 1
a227 4
static int nbiof_gets(bp,buf,size)
BIO *bp;
char *buf;
int size;
d234 1
a234 3
static int nbiof_puts(bp,str)
BIO *bp;
char *str;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 3
a64 2
#include <openssl/rand.h>
#include <openssl/bio.h>
d69 2
a70 1
static int nbiof_write(BIO *h,const char *buf,int num);
d72 1
a72 1
static int nbiof_puts(BIO *h,const char *str);
d74 1
a74 1
static long nbiof_ctrl(BIO *h,int cmd,long arg1,void *arg2);
d77 10
a86 1
static long nbiof_callback_ctrl(BIO *h,int cmd,bio_info_cb *fp);
a104 1
	nbiof_callback_ctrl,
d107 1
a107 1
BIO_METHOD *BIO_f_nbio_test(void)
d112 2
a113 1
static int nbiof_new(BIO *bi)
d117 1
a117 1
	if (!(nt=(NBIO_TEST *)OPENSSL_malloc(sizeof(NBIO_TEST)))) return(0);
d126 2
a127 1
static int nbiof_free(BIO *a)
d131 1
a131 1
		OPENSSL_free(a->ptr);
d138 4
a141 1
static int nbiof_read(BIO *b, char *out, int outl)
d156 1
a156 1
	RAND_pseudo_bytes(&n,1);
d176 4
a179 1
static int nbiof_write(BIO *b, const char *in, int inl)
d200 1
a200 1
		RAND_pseudo_bytes(&n,1);
d224 5
a228 1
static long nbiof_ctrl(BIO *b, int cmd, long num, void *ptr)
d250 4
a253 15
static long nbiof_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
	default:
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
		break;
		}
	return(ret);
	}

static int nbiof_gets(BIO *bp, char *buf, int size)
d260 3
a262 1
static int nbiof_puts(BIO *bp, const char *str)
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d130 1
a130 1
#if 1
d140 1
a140 1
#if 1
@


1.1.1.4
log
@import OpenSSL 1.0.0e
@
text
@d128 1
d137 1
@


