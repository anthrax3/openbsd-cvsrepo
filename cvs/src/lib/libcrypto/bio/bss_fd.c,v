head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18;
locks; strict;
comment	@ * @;


1.18
date	2015.02.12.03.54.07;	author jsing;	state Exp;
branches;
next	1.17;
commitid	8Uvg1V8TDfVq15dl;

1.17
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.15;
commitid	nzndm3zqPmFurSaK;

1.15
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.14;
commitid	id8dTrTMtnTn4fqt;

1.14
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.11.33.33;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.16.19.54.20;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.16.13.01.09;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.15.17.25.41;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.15.16.37.22;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.13.23.31.37;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.56;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.04;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@If you do not support POSIX I/O then you're not tall enough to ride...

ok tedu@@
@
text
@/* $OpenBSD: bss_fd.c,v 1.17 2014/07/11 08:44:47 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <openssl/opensslconf.h>

#include <openssl/bio.h>

static int fd_write(BIO *h, const char *buf, int num);
static int fd_read(BIO *h, char *buf, int size);
static int fd_puts(BIO *h, const char *str);
static int fd_gets(BIO *h, char *buf, int size);
static long fd_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int fd_new(BIO *h);
static int fd_free(BIO *data);
int BIO_fd_should_retry(int s);

static BIO_METHOD methods_fdp = {
	.type = BIO_TYPE_FD,
	.name = "file descriptor",
	.bwrite = fd_write,
	.bread = fd_read,
	.bputs = fd_puts,
	.bgets = fd_gets,
	.ctrl = fd_ctrl,
	.create = fd_new,
	.destroy = fd_free
};

BIO_METHOD *
BIO_s_fd(void)
{
	return (&methods_fdp);
}

BIO *
BIO_new_fd(int fd, int close_flag)
{
	BIO *ret;
	ret = BIO_new(BIO_s_fd());
	if (ret == NULL)
		return (NULL);
	BIO_set_fd(ret, fd, close_flag);
	return (ret);
}

static int
fd_new(BIO *bi)
{
	bi->init = 0;
	bi->num = -1;
	bi->ptr = NULL;
	bi->flags=0;
	return (1);
}

static int
fd_free(BIO *a)
{
	if (a == NULL)
		return (0);
	if (a->shutdown) {
		if (a->init) {
			close(a->num);
		}
		a->init = 0;
		a->flags = 0;
	}
	return (1);
}

static int
fd_read(BIO *b, char *out, int outl)
{
	int ret = 0;

	if (out != NULL) {
		errno = 0;
		ret = read(b->num, out, outl);
		BIO_clear_retry_flags(b);
		if (ret <= 0) {
			if (BIO_fd_should_retry(ret))
				BIO_set_retry_read(b);
		}
	}
	return (ret);
}

static int
fd_write(BIO *b, const char *in, int inl)
{
	int ret;
	errno = 0;
	ret = write(b->num, in, inl);
	BIO_clear_retry_flags(b);
	if (ret <= 0) {
		if (BIO_fd_should_retry(ret))
			BIO_set_retry_write(b);
	}
	return (ret);
}

static long
fd_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	long ret = 1;
	int *ip;

	switch (cmd) {
	case BIO_CTRL_RESET:
		num = 0;
	case BIO_C_FILE_SEEK:
		ret = (long)lseek(b->num, num, 0);
		break;
	case BIO_C_FILE_TELL:
	case BIO_CTRL_INFO:
		ret = (long)lseek(b->num, 0, 1);
		break;
	case BIO_C_SET_FD:
		fd_free(b);
		b->num= *((int *)ptr);
		b->shutdown = (int)num;
		b->init = 1;
		break;
	case BIO_C_GET_FD:
		if (b->init) {
			ip = (int *)ptr;
			if (ip != NULL)
				*ip = b->num;
			ret = b->num;
		} else
			ret = -1;
		break;
	case BIO_CTRL_GET_CLOSE:
		ret = b->shutdown;
		break;
	case BIO_CTRL_SET_CLOSE:
		b->shutdown = (int)num;
		break;
	case BIO_CTRL_PENDING:
	case BIO_CTRL_WPENDING:
		ret = 0;
		break;
	case BIO_CTRL_DUP:
	case BIO_CTRL_FLUSH:
		ret = 1;
		break;
	default:
		ret = 0;
		break;
	}
	return (ret);
}

static int
fd_puts(BIO *bp, const char *str)
{
	int n, ret;

	n = strlen(str);
	ret = fd_write(bp, str, n);
	return (ret);
}

static int
fd_gets(BIO *bp, char *buf, int size)
{
	int ret = 0;
	char *ptr = buf;
	char *end = buf + size - 1;

	while ((ptr < end) && (fd_read(bp, ptr, 1) > 0) && (ptr[0] != '\n'))
		ptr++;

	ptr[0] = '\0';

	if (buf[0] != '\0')
		ret = strlen(buf);
	return (ret);
}

int
BIO_fd_should_retry(int i)
{
	int err;

	if ((i == 0) || (i == -1)) {
		err = errno;
		return (BIO_fd_non_fatal_error(err));
	}
	return (0);
}

int
BIO_fd_non_fatal_error(int err)
{
	switch (err) {
	case ENOTCONN:
	case EINTR:
	case EAGAIN:
	case EINPROGRESS:
	case EALREADY:
		return (1);
	default:
		break;
	}
	return (0);
}
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_fd.c,v 1.16 2014/07/10 22:45:56 jsing Exp $ */
a65 6
#if defined(OPENSSL_NO_POSIX_IO)
/*
 * One can argue that one should implement dummy placeholder for
 * BIO_s_fd here...
 */
#else
a267 1
#endif
@


1.16
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: bss_fd.c,v 1.15 2014/07/10 13:58:22 jsing Exp $ */
a64 2

#include "cryptlib.h"
@


1.15
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_fd.c,v 1.14 2014/06/12 15:49:28 deraadt Exp $ */
d63 2
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 1
a61 1
#include <errno.h>
d63 1
@


1.13
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/* crypto/bio/bss_fd.c */
@


1.12
log
@unistd.h for protos where needed
@
text
@d82 9
a90 9
	BIO_TYPE_FD, "file descriptor",
	fd_write,
	fd_read,
	fd_puts,
	fd_gets,
	fd_ctrl,
	fd_new,
	fd_free,
	NULL,
@


1.11
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d61 1
@


1.10
log
@some KNF cleanup following the script
@
text
@a60 1
#define USE_SOCKETS
@


1.9
log
@- Why do we hide from the OpenSSL police, dad?
- Because they're not like us, son. They use macros to wrap stdio routines,
  for an undocumented (OPENSSL_USE_APPLINK) use case, which only serves to
  obfuscate the code.

ok tedu@@
@
text
@d93 2
a94 2
BIO_METHOD
*BIO_s_fd(void)
d99 2
a100 2
BIO
*BIO_new_fd(int fd, int close_flag)
@


1.8
log
@Clean up non-fatal error handling - we know which error numbers we have
defined.

ok miod@@ beck@@
@
text
@d70 1
a70 13
/*
 * As for unconditional usage of "UPLINK" interface in this module.
 * Trouble is that unlike Unix file descriptors [which are indexes
 * in kernel-side per-process table], corresponding descriptors on
 * platforms which require "UPLINK" interface seem to be indexes
 * in a user-land, non-global table. Well, in fact they are indexes
 * in stdio _iob[], and recall that _iob[] was the very reason why
 * "UPLINK" interface was introduced in first place. But one way on
 * another. Neither libcrypto or libssl use this BIO meaning that
 * file descriptors can only be provided by application. Therefore
 * "UPLINK" calls are due...
 */
#include "bio_lcl.h"
d116 1
a116 1
	bi->flags=BIO_FLAGS_UPLINK; /* essentially redundant */
d127 1
a127 1
			UP_close(a->num);
d130 1
a130 1
		a->flags = BIO_FLAGS_UPLINK;
d142 1
a142 1
		ret = UP_read(b->num, out, outl);
d157 1
a157 1
	ret = UP_write(b->num, in, inl);
d176 1
a176 1
		ret = (long)UP_lseek(b->num, num, 0);
d180 1
a180 1
		ret = (long)UP_lseek(b->num, 0, 1);
@


1.7
log
@Toss a `unifdef -U OPENSSL_SYS_WINDOWS' bomb into crypto/bio.

ok miod@@
@
text
@a272 12

#ifdef EWOULDBLOCK
# ifdef WSAEWOULDBLOCK
#  if WSAEWOULDBLOCK != EWOULDBLOCK
	case EWOULDBLOCK:
#  endif
# else
	case EWOULDBLOCK:
# endif
#endif

#if defined(ENOTCONN)
a273 3
#endif

#ifdef EINTR
a274 4
#endif

#ifdef EAGAIN
#if EWOULDBLOCK != EAGAIN
a275 8
# endif
#endif

#ifdef EPROTO
	case EPROTO:
#endif

#ifdef EINPROGRESS
a276 3
#endif

#ifdef EALREADY
a277 1
#endif
a278 1
		/* break; */
@


1.6
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a263 6

#if defined(OPENSSL_SYS_WINDOWS) && 0 /* more microsoft stupidity? perhaps not? Ben 4/1/99 */
		if ((i == -1) && (err == 0))
			return (1);
#endif

@


1.5
log
@Remove various horrible socket syscall wrappers, especially SHUTDOWN*
which did shutdown + close, all nasty and surprising.  Use the raw
syscalls that everyone knows the behaviour of.
ok beck matthew
@
text
@d93 2
a94 3
static BIO_METHOD methods_fdp=
	{
	BIO_TYPE_FD,"file descriptor",
d103 1
a103 1
	};
d105 9
a113 7
BIO_METHOD *BIO_s_fd(void)
	{
	return(&methods_fdp);
	}

BIO *BIO_new_fd(int fd,int close_flag)
	{
d115 13
a127 11
	ret=BIO_new(BIO_s_fd());
	if (ret == NULL) return(NULL);
	BIO_set_fd(ret,fd,close_flag);
	return(ret);
	}

static int fd_new(BIO *bi)
	{
	bi->init=0;
	bi->num=-1;
	bi->ptr=NULL;
d129 2
a130 2
	return(1);
	}
d132 7
a138 7
static int fd_free(BIO *a)
	{
	if (a == NULL) return(0);
	if (a->shutdown)
		{
		if (a->init)
			{
a139 3
			}
		a->init=0;
		a->flags=BIO_FLAGS_UPLINK;
d141 2
a142 1
	return(1);
d144 7
a150 4
	
static int fd_read(BIO *b, char *out,int outl)
	{
	int ret=0;
d152 1
a152 2
	if (out != NULL)
		{
d154 1
a154 1
		ret=UP_read(b->num,out,outl);
d156 1
a156 2
		if (ret <= 0)
			{
a158 1
			}
a159 1
	return(ret);
d161 2
d164 3
a166 2
static int fd_write(BIO *b, const char *in, int inl)
	{
d169 1
a169 1
	ret=UP_write(b->num,in,inl);
d171 1
a171 2
	if (ret <= 0)
		{
a173 2
		}
	return(ret);
d175 2
d178 4
a181 3
static long fd_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
	long ret=1;
d184 1
a184 2
	switch (cmd)
		{
d186 1
a186 1
		num=0;
d188 1
a188 1
		ret=(long)UP_lseek(b->num,num,0);
d192 1
a192 1
		ret=(long)UP_lseek(b->num,0,1);
d197 2
a198 2
		b->shutdown=(int)num;
		b->init=1;
d201 7
a207 8
		if (b->init)
			{
			ip=(int *)ptr;
			if (ip != NULL) *ip=b->num;
			ret=b->num;
			}
		else
			ret= -1;
d210 1
a210 1
		ret=b->shutdown;
d213 1
a213 1
		b->shutdown=(int)num;
d217 1
a217 1
		ret=0;
d221 1
a221 1
		ret=1;
d224 1
a224 1
		ret=0;
a225 11
		}
	return(ret);
	}

static int fd_puts(BIO *bp, const char *str)
	{
	int n,ret;

	n=strlen(str);
	ret=fd_write(bp,str,n);
	return(ret);
d227 2
d230 16
a245 5
static int fd_gets(BIO *bp, char *buf, int size)
        {
	int ret=0;
	char *ptr=buf;
	char *end=buf+size-1;
d247 1
a247 1
	while ( (ptr < end) && (fd_read(bp, ptr, 1) > 0) && (ptr[0] != '\n') )
d250 1
a250 1
	ptr[0]='\0';
d253 7
a259 6
		ret=strlen(buf);
	return(ret);
        }

int BIO_fd_should_retry(int i)
	{
d262 2
a263 3
	if ((i == 0) || (i == -1))
		{
		err=errno;
d267 1
a267 1
			return(1);
d270 1
a270 3
		return(BIO_fd_non_fatal_error(err));
		}
	return(0);
d272 2
d275 4
a278 4
int BIO_fd_non_fatal_error(int err)
	{
	switch (err)
		{
d315 1
a315 1
		return(1);
a318 2
		}
	return(0);
d320 2
@


1.4
log
@resolve conflicts, fix local changes
@
text
@d150 1
a150 1
		clear_sys_error();
d165 1
a165 1
	clear_sys_error();
d260 1
a260 1
		err=get_last_sys_error();
@


1.3
log
@resolve conflicts
@
text
@d63 7
d87 1
d99 1
a99 1
	NULL, /* fd_gets, */
d238 16
d319 1
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d63 13
a75 1
#include <openssl/bio.h>
d115 1
a115 1
	bi->num=0;
d117 1
a117 1
	bi->flags=0;
d128 1
a128 1
			close(a->num);
d131 1
a131 1
		a->flags=0;
d143 1
a143 1
		ret=read(b->num,out,outl);
d158 1
a158 1
	ret=write(b->num,in,inl);
d178 1
a178 1
		ret=(long)lseek(b->num,num,0);
d182 1
a182 1
		ret=(long)lseek(b->num,0,1);
@


1.1
log
@Initial revision
@
text
@d59 5
a63 3
#define BIO_FD
#include "bss_sock.c"
#undef BIO_FD
d65 218
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 3
a61 5
#include <stdio.h>
#include <errno.h>
#define USE_SOCKETS
#include "cryptlib.h"
#include <openssl/bio.h>
a62 218
static int fd_write(BIO *h, const char *buf, int num);
static int fd_read(BIO *h, char *buf, int size);
static int fd_puts(BIO *h, const char *str);
static long fd_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int fd_new(BIO *h);
static int fd_free(BIO *data);
int BIO_fd_should_retry(int s);

static BIO_METHOD methods_fdp=
	{
	BIO_TYPE_FD,"file descriptor",
	fd_write,
	fd_read,
	fd_puts,
	NULL, /* fd_gets, */
	fd_ctrl,
	fd_new,
	fd_free,
	NULL,
	};

BIO_METHOD *BIO_s_fd(void)
	{
	return(&methods_fdp);
	}

BIO *BIO_new_fd(int fd,int close_flag)
	{
	BIO *ret;
	ret=BIO_new(BIO_s_fd());
	if (ret == NULL) return(NULL);
	BIO_set_fd(ret,fd,close_flag);
	return(ret);
	}

static int fd_new(BIO *bi)
	{
	bi->init=0;
	bi->num=0;
	bi->ptr=NULL;
	bi->flags=0;
	return(1);
	}

static int fd_free(BIO *a)
	{
	if (a == NULL) return(0);
	if (a->shutdown)
		{
		if (a->init)
			{
			close(a->num);
			}
		a->init=0;
		a->flags=0;
		}
	return(1);
	}
	
static int fd_read(BIO *b, char *out,int outl)
	{
	int ret=0;

	if (out != NULL)
		{
		clear_sys_error();
		ret=read(b->num,out,outl);
		BIO_clear_retry_flags(b);
		if (ret <= 0)
			{
			if (BIO_fd_should_retry(ret))
				BIO_set_retry_read(b);
			}
		}
	return(ret);
	}

static int fd_write(BIO *b, const char *in, int inl)
	{
	int ret;
	clear_sys_error();
	ret=write(b->num,in,inl);
	BIO_clear_retry_flags(b);
	if (ret <= 0)
		{
		if (BIO_fd_should_retry(ret))
			BIO_set_retry_write(b);
		}
	return(ret);
	}

static long fd_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
	long ret=1;
	int *ip;

	switch (cmd)
		{
	case BIO_CTRL_RESET:
		num=0;
	case BIO_C_FILE_SEEK:
		ret=(long)lseek(b->num,num,0);
		break;
	case BIO_C_FILE_TELL:
	case BIO_CTRL_INFO:
		ret=(long)lseek(b->num,0,1);
		break;
	case BIO_C_SET_FD:
		fd_free(b);
		b->num= *((int *)ptr);
		b->shutdown=(int)num;
		b->init=1;
		break;
	case BIO_C_GET_FD:
		if (b->init)
			{
			ip=(int *)ptr;
			if (ip != NULL) *ip=b->num;
			ret=b->num;
			}
		else
			ret= -1;
		break;
	case BIO_CTRL_GET_CLOSE:
		ret=b->shutdown;
		break;
	case BIO_CTRL_SET_CLOSE:
		b->shutdown=(int)num;
		break;
	case BIO_CTRL_PENDING:
	case BIO_CTRL_WPENDING:
		ret=0;
		break;
	case BIO_CTRL_DUP:
	case BIO_CTRL_FLUSH:
		ret=1;
		break;
	default:
		ret=0;
		break;
		}
	return(ret);
	}

static int fd_puts(BIO *bp, const char *str)
	{
	int n,ret;

	n=strlen(str);
	ret=fd_write(bp,str,n);
	return(ret);
	}

int BIO_fd_should_retry(int i)
	{
	int err;

	if ((i == 0) || (i == -1))
		{
		err=get_last_sys_error();

#if defined(OPENSSL_SYS_WINDOWS) && 0 /* more microsoft stupidity? perhaps not? Ben 4/1/99 */
		if ((i == -1) && (err == 0))
			return(1);
#endif

		return(BIO_fd_non_fatal_error(err));
		}
	return(0);
	}

int BIO_fd_non_fatal_error(int err)
	{
	switch (err)
		{

#ifdef EWOULDBLOCK
# ifdef WSAEWOULDBLOCK
#  if WSAEWOULDBLOCK != EWOULDBLOCK
	case EWOULDBLOCK:
#  endif
# else
	case EWOULDBLOCK:
# endif
#endif

#if defined(ENOTCONN)
	case ENOTCONN:
#endif

#ifdef EINTR
	case EINTR:
#endif

#ifdef EAGAIN
#if EWOULDBLOCK != EAGAIN
	case EAGAIN:
# endif
#endif

#ifdef EPROTO
	case EPROTO:
#endif

#ifdef EINPROGRESS
	case EINPROGRESS:
#endif

#ifdef EALREADY
	case EALREADY:
#endif
		return(1);
		/* break; */
	default:
		break;
		}
	return(0);
	}
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d63 1
a63 13
/*
 * As for unconditional usage of "UPLINK" interface in this module.
 * Trouble is that unlike Unix file descriptors [which are indexes
 * in kernel-side per-process table], corresponding descriptors on
 * platforms which require "UPLINK" interface seem to be indexes
 * in a user-land, non-global table. Well, in fact they are indexes
 * in stdio _iob[], and recall that _iob[] was the very reason why
 * "UPLINK" interface was introduced in first place. But one way on
 * another. Neither libcrypto or libssl use this BIO meaning that
 * file descriptors can only be provided by application. Therefore
 * "UPLINK" calls are due...
 */
#include "bio_lcl.h"
d103 1
a103 1
	bi->num=-1;
d105 1
a105 1
	bi->flags=BIO_FLAGS_UPLINK; /* essentially redundant */
d116 1
a116 1
			UP_close(a->num);
d119 1
a119 1
		a->flags=BIO_FLAGS_UPLINK;
d131 1
a131 1
		ret=UP_read(b->num,out,outl);
d146 1
a146 1
	ret=UP_write(b->num,in,inl);
d166 1
a166 1
		ret=(long)UP_lseek(b->num,num,0);
d170 1
a170 1
		ret=(long)UP_lseek(b->num,0,1);
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a62 7

#if defined(OPENSSL_NO_POSIX_IO)
/*
 * One can argue that one should implement dummy placeholder for
 * BIO_s_fd here...
 */
#else
a79 1
static int fd_gets(BIO *h, char *buf, int size);
d91 1
a91 1
	fd_gets,
a229 16
static int fd_gets(BIO *bp, char *buf, int size)
        {
	int ret=0;
	char *ptr=buf;
	char *end=buf+size-1;

	while ( (ptr < end) && (fd_read(bp, ptr, 1) > 0) && (ptr[0] != '\n') )
		ptr++;

	ptr[0]='\0';

	if (buf[0] != '\0')
		ret=strlen(buf);
	return(ret);
        }

a294 1
#endif
@


