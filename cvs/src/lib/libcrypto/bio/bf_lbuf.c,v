head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.13;
commitid	kT0fLt3r4lroFJra;

1.13
date	2015.07.19.18.29.31;	author miod;	state Exp;
branches;
next	1.12;
commitid	tXLDcP80XKVov5z5;

1.12
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.21.11.12.49;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.22.19.56;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.16.15.01.02;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.57.17;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.54;	author markus;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: bf_lbuf.c,v 1.13 2015/07/19 18:29:31 miod Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>

#include <openssl/bio.h>
#include <openssl/evp.h>

static int linebuffer_write(BIO *h, const char *buf, int num);
static int linebuffer_read(BIO *h, char *buf, int size);
static int linebuffer_puts(BIO *h, const char *str);
static int linebuffer_gets(BIO *h, char *str, int size);
static long linebuffer_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int linebuffer_new(BIO *h);
static int linebuffer_free(BIO *data);
static long linebuffer_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);

/* A 10k maximum should be enough for most purposes */
#define DEFAULT_LINEBUFFER_SIZE	1024*10

/* #define DEBUG */

static BIO_METHOD methods_linebuffer = {
	.type = BIO_TYPE_LINEBUFFER,
	.name = "linebuffer",
	.bwrite = linebuffer_write,
	.bread = linebuffer_read,
	.bputs = linebuffer_puts,
	.bgets = linebuffer_gets,
	.ctrl = linebuffer_ctrl,
	.create = linebuffer_new,
	.destroy = linebuffer_free,
	.callback_ctrl = linebuffer_callback_ctrl
};

BIO_METHOD *
BIO_f_linebuffer(void)
{
	return (&methods_linebuffer);
}

typedef struct bio_linebuffer_ctx_struct {
	char *obuf;		/* the output char array */
	int obuf_size;		/* how big is the output buffer */
	int obuf_len;		/* how many bytes are in it */
} BIO_LINEBUFFER_CTX;

static int
linebuffer_new(BIO *bi)
{
	BIO_LINEBUFFER_CTX *ctx;

	ctx = malloc(sizeof(BIO_LINEBUFFER_CTX));
	if (ctx == NULL)
		return (0);
	ctx->obuf = malloc(DEFAULT_LINEBUFFER_SIZE);
	if (ctx->obuf == NULL) {
		free(ctx);
		return (0);
	}
	ctx->obuf_size = DEFAULT_LINEBUFFER_SIZE;
	ctx->obuf_len = 0;

	bi->init = 1;
	bi->ptr = (char *)ctx;
	bi->flags = 0;
	return (1);
}

static int
linebuffer_free(BIO *a)
{
	BIO_LINEBUFFER_CTX *b;

	if (a == NULL)
		return (0);
	b = (BIO_LINEBUFFER_CTX *)a->ptr;
	free(b->obuf);
	free(a->ptr);
	a->ptr = NULL;
	a->init = 0;
	a->flags = 0;
	return (1);
}

static int
linebuffer_read(BIO *b, char *out, int outl)
{
	int ret = 0;

	if (out == NULL)
		return (0);
	if (b->next_bio == NULL)
		return (0);
	ret = BIO_read(b->next_bio, out, outl);
	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);
	return (ret);
}

static int
linebuffer_write(BIO *b, const char *in, int inl)
{
	int i, num = 0, foundnl;
	BIO_LINEBUFFER_CTX *ctx;

	if ((in == NULL) || (inl <= 0))
		return (0);
	ctx = (BIO_LINEBUFFER_CTX *)b->ptr;
	if ((ctx == NULL) || (b->next_bio == NULL))
		return (0);

	BIO_clear_retry_flags(b);

	do {
		const char *p;

		for (p = in; p < in + inl && *p != '\n'; p++)
			;
		if (*p == '\n') {
			p++;
			foundnl = 1;
		} else
			foundnl = 0;

		/* If a NL was found and we already have text in the save
		   buffer, concatenate them and write */
		while ((foundnl || p - in > ctx->obuf_size - ctx->obuf_len) &&
		    ctx->obuf_len > 0) {
			int orig_olen = ctx->obuf_len;

			i = ctx->obuf_size - ctx->obuf_len;
			if (p - in > 0) {
				if (i >= p - in) {
					memcpy(&(ctx->obuf[ctx->obuf_len]),
					    in, p - in);
					ctx->obuf_len += p - in;
					inl -= p - in;
					num += p - in;
					in = p;
				} else {
					memcpy(&(ctx->obuf[ctx->obuf_len]),
					    in, i);
					ctx->obuf_len += i;
					inl -= i;
					in += i;
					num += i;
				}
			}

			i = BIO_write(b->next_bio, ctx->obuf, ctx->obuf_len);
			if (i <= 0) {
				ctx->obuf_len = orig_olen;
				BIO_copy_next_retry(b);
				if (i < 0)
					return ((num > 0) ? num : i);
				if (i == 0)
					return (num);
			}
			if (i < ctx->obuf_len)
				memmove(ctx->obuf, ctx->obuf + i,
				    ctx->obuf_len - i);
			ctx->obuf_len -= i;
		}

		/* Now that the save buffer is emptied, let's write the input
		   buffer if a NL was found and there is anything to write. */
		if ((foundnl || p - in > ctx->obuf_size) && p - in > 0) {
			i = BIO_write(b->next_bio, in, p - in);
			if (i <= 0) {
				BIO_copy_next_retry(b);
				if (i < 0)
					return ((num > 0) ? num : i);
				if (i == 0)
					return (num);
			}
			num += i;
			in += i;
			inl -= i;
		}
	} while (foundnl && inl > 0);
	/* We've written as much as we can.  The rest of the input buffer, if
	   any, is text that doesn't and with a NL and therefore needs to be
	   saved for the next trip. */
	if (inl > 0) {
		memcpy(&(ctx->obuf[ctx->obuf_len]), in, inl);
		ctx->obuf_len += inl;
		num += inl;
	}
	return num;
}

static long
linebuffer_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	BIO *dbio;
	BIO_LINEBUFFER_CTX *ctx;
	long ret = 1;
	char *p;
	int r;
	int obs;

	ctx = (BIO_LINEBUFFER_CTX *)b->ptr;

	switch (cmd) {
	case BIO_CTRL_RESET:
		ctx->obuf_len = 0;
		if (b->next_bio == NULL)
			return (0);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_INFO:
		ret = (long)ctx->obuf_len;
		break;
	case BIO_CTRL_WPENDING:
		ret = (long)ctx->obuf_len;
		if (ret == 0) {
			if (b->next_bio == NULL)
				return (0);
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		}
		break;
	case BIO_C_SET_BUFF_SIZE:
		obs = (int)num;
		p = ctx->obuf;
		if ((obs > DEFAULT_LINEBUFFER_SIZE) && (obs != ctx->obuf_size)) {
			p = malloc(num);
			if (p == NULL)
				goto malloc_error;
		}
		if (ctx->obuf != p) {
			if (ctx->obuf_len > obs) {
				ctx->obuf_len = obs;
			}
			memcpy(p, ctx->obuf, ctx->obuf_len);
			free(ctx->obuf);
			ctx->obuf = p;
			ctx->obuf_size = obs;
		}
		break;
	case BIO_C_DO_STATE_MACHINE:
		if (b->next_bio == NULL)
			return (0);
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;

	case BIO_CTRL_FLUSH:
		if (b->next_bio == NULL)
			return (0);
		if (ctx->obuf_len <= 0) {
			ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
			break;
		}

		for (;;) {
			BIO_clear_retry_flags(b);
			if (ctx->obuf_len > 0) {
				r = BIO_write(b->next_bio,
				    ctx->obuf, ctx->obuf_len);
				BIO_copy_next_retry(b);
				if (r <= 0)
					return ((long)r);
				if (r < ctx->obuf_len)
					memmove(ctx->obuf, ctx->obuf + r,
					    ctx->obuf_len - r);
				ctx->obuf_len -= r;
			} else {
				ctx->obuf_len = 0;
				ret = 1;
				break;
			}
		}
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	case BIO_CTRL_DUP:
		dbio = (BIO *)ptr;
		if (!BIO_set_write_buffer_size(dbio, ctx->obuf_size))
			ret = 0;
		break;
	default:
		if (b->next_bio == NULL)
			return (0);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		break;
	}
	return (ret);
malloc_error:
	BIOerror(ERR_R_MALLOC_FAILURE);
	return (0);
}

static long
linebuffer_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	default:
		ret = BIO_callback_ctrl(b->next_bio, cmd, fp);
		break;
	}
	return (ret);
}

static int
linebuffer_gets(BIO *b, char *buf, int size)
{
	if (b->next_bio == NULL)
		return (0);
	return (BIO_gets(b->next_bio, buf, size));
}

static int
linebuffer_puts(BIO *b, const char *str)
{
	return (linebuffer_write(b, str, strlen(str)));
}
@


1.13
log
@Drop stupid (int) casts for the arguments of malloc() and friends. This is
not 16-bit MS-DOS anymore.
ok bcook@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: bf_lbuf.c,v 1.12 2014/07/11 08:44:47 jsing Exp $ */
d346 1
a346 1
	BIOerr(BIO_F_LINEBUFFER_CTRL, ERR_R_MALLOC_FAILURE);
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bf_lbuf.c,v 1.11 2014/06/12 15:49:28 deraadt Exp $ */
d283 1
a283 1
			p = malloc((int)num);
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 1
a61 2
#include <errno.h>
#include "cryptlib.h"
@


1.10
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/bio/bf_buff.c */
@


1.9
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d134 1
a134 2
	if (b->obuf != NULL)
		free(b->obuf);
@


1.8
log
@Bring malloc/calloc/realloc sequences to modern standard
ok guenther
@
text
@d80 10
a89 10
	BIO_TYPE_LINEBUFFER,
	"linebuffer",
	linebuffer_write,
	linebuffer_read,
	linebuffer_puts,
	linebuffer_gets,
	linebuffer_ctrl,
	linebuffer_new,
	linebuffer_free,
	linebuffer_callback_ctrl,
@


1.7
log
@delete if 0 code
@
text
@d109 1
a109 1
	ctx = (BIO_LINEBUFFER_CTX *)malloc(sizeof(BIO_LINEBUFFER_CTX));
d112 1
a112 1
	ctx->obuf = (char *)malloc(DEFAULT_LINEBUFFER_SIZE);
d284 1
a284 1
			p = (char *)malloc((int)num);
@


1.6
log
@some KNF cleanup following the script
@
text
@a207 3
#if 0
			BIO_write(b->next_bio, "<*<", 3);
#endif
a211 3
#if 0
				BIO_write(b->next_bio, ">*>", 3);
#endif
a216 3
#if 0
			BIO_write(b->next_bio, ">*>", 3);
#endif
a225 3
#if 0
			BIO_write(b->next_bio, "<*<", 3);
#endif
a228 3
#if 0
				BIO_write(b->next_bio, ">*>", 3);
#endif
a233 3
#if 0
			BIO_write(b->next_bio, ">*>", 3);
#endif
a318 3
#if 0
				fprintf(stderr, "FLUSH %3d -> %3d\n", ctx->obuf_len, r);
#endif
@


1.5
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d92 2
a93 2
BIO_METHOD
*BIO_f_linebuffer(void)
@


1.4
log
@More KNF.
@
text
@d109 1
a109 1
	ctx = (BIO_LINEBUFFER_CTX *)OPENSSL_malloc(sizeof(BIO_LINEBUFFER_CTX));
d112 1
a112 1
	ctx->obuf = (char *)OPENSSL_malloc(DEFAULT_LINEBUFFER_SIZE);
d114 1
a114 1
		OPENSSL_free(ctx);
d135 2
a136 2
		OPENSSL_free(b->obuf);
	OPENSSL_free(a->ptr);
d302 1
a302 1
			p = (char *)OPENSSL_malloc((int)num);
d311 1
a311 1
			OPENSSL_free(ctx->obuf);
@


1.3
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d336 1
a336 1
				ctx->obuf, ctx->obuf_len);
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d65 1
a65 1
static int linebuffer_write(BIO *h, const char *buf,int num);
d79 1
a79 2
static BIO_METHOD methods_linebuffer=
	{
d90 1
a90 1
	};
d92 5
a96 4
BIO_METHOD *BIO_f_linebuffer(void)
	{
	return(&methods_linebuffer);
	}
d98 1
a98 2
typedef struct bio_linebuffer_ctx_struct
	{
d102 1
a102 1
	} BIO_LINEBUFFER_CTX;
d104 3
a106 2
static int linebuffer_new(BIO *bi)
	{
d109 7
a115 11
	ctx=(BIO_LINEBUFFER_CTX *)OPENSSL_malloc(sizeof(BIO_LINEBUFFER_CTX));
	if (ctx == NULL) return(0);
	ctx->obuf=(char *)OPENSSL_malloc(DEFAULT_LINEBUFFER_SIZE);
	if (ctx->obuf == NULL) { OPENSSL_free(ctx); return(0); }
	ctx->obuf_size=DEFAULT_LINEBUFFER_SIZE;
	ctx->obuf_len=0;

	bi->init=1;
	bi->ptr=(char *)ctx;
	bi->flags=0;
	return(1);
d117 2
d120 9
a128 2
static int linebuffer_free(BIO *a)
	{
d131 5
a135 3
	if (a == NULL) return(0);
	b=(BIO_LINEBUFFER_CTX *)a->ptr;
	if (b->obuf != NULL) OPENSSL_free(b->obuf);
d137 16
a152 13
	a->ptr=NULL;
	a->init=0;
	a->flags=0;
	return(1);
	}
	
static int linebuffer_read(BIO *b, char *out, int outl)
	{
	int ret=0;
 
	if (out == NULL) return(0);
	if (b->next_bio == NULL) return(0);
	ret=BIO_read(b->next_bio,out,outl);
d155 2
a156 2
	return(ret);
	}
d158 4
a161 3
static int linebuffer_write(BIO *b, const char *in, int inl)
	{
	int i,num=0,foundnl;
d164 5
a168 3
	if ((in == NULL) || (inl <= 0)) return(0);
	ctx=(BIO_LINEBUFFER_CTX *)b->ptr;
	if ((ctx == NULL) || (b->next_bio == NULL)) return(0);
d172 1
a172 2
	do
		{
d175 1
a175 1
		for(p = in; p < in + inl && *p != '\n'; p++)
d177 1
a177 2
		if (*p == '\n')
			{
d180 1
a180 2
			}
		else
d185 2
a186 3
		while ((foundnl || p - in > ctx->obuf_size - ctx->obuf_len)
			&& ctx->obuf_len > 0)
			{
d188 1
a188 1
			
d190 2
a191 4
			if (p - in > 0)
				{
				if (i >= p - in)
					{
d193 1
a193 1
						in,p - in);
d198 1
a198 3
					}
				else
					{
d200 1
a200 1
						in,i);
a204 1
					}
d206 1
d209 1
a209 1
BIO_write(b->next_bio, "<*<", 3);
d211 2
a212 4
			i=BIO_write(b->next_bio,
				ctx->obuf, ctx->obuf_len);
			if (i <= 0)
				{
a214 1

d216 1
a216 1
BIO_write(b->next_bio, ">*>", 3);
d218 5
a222 3
				if (i < 0) return((num > 0)?num:i);
				if (i == 0) return(num);
				}
d224 1
a224 1
BIO_write(b->next_bio, ">*>", 3);
d228 3
a230 3
					ctx->obuf_len - i);
			ctx->obuf_len-=i;
			}
d234 1
a234 2
		if ((foundnl || p - in > ctx->obuf_size) && p - in > 0)
			{
d236 1
a236 1
BIO_write(b->next_bio, "<*<", 3);
d238 2
a239 3
			i=BIO_write(b->next_bio,in,p - in);
			if (i <= 0)
				{
d242 1
a242 1
BIO_write(b->next_bio, ">*>", 3);
d244 5
a248 3
				if (i < 0) return((num > 0)?num:i);
				if (i == 0) return(num);
				}
d250 1
a250 1
BIO_write(b->next_bio, ">*>", 3);
d252 3
a254 4
			num+=i;
			in+=i;
			inl-=i;
			}
d256 1
a256 1
	while(foundnl && inl > 0);
d260 1
a260 2
	if (inl > 0)
		{
d264 1
a264 1
		}
d266 1
a266 1
	}
d268 3
a270 2
static long linebuffer_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d273 1
a273 1
	long ret=1;
d278 1
a278 1
	ctx=(BIO_LINEBUFFER_CTX *)b->ptr;
d280 1
a280 2
	switch (cmd)
		{
d282 4
a285 3
		ctx->obuf_len=0;
		if (b->next_bio == NULL) return(0);
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d288 1
a288 1
		ret=(long)ctx->obuf_len;
d291 6
a296 6
		ret=(long)ctx->obuf_len;
		if (ret == 0)
			{
			if (b->next_bio == NULL) return(0);
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
			}
d299 4
a302 5
		obs=(int)num;
		p=ctx->obuf;
		if ((obs > DEFAULT_LINEBUFFER_SIZE) && (obs != ctx->obuf_size))
			{
			p=(char *)OPENSSL_malloc((int)num);
d305 4
a309 6
		if (ctx->obuf != p)
			{
			if (ctx->obuf_len > obs)
				{
				ctx->obuf_len = obs;
				}
d312 3
a314 3
			ctx->obuf=p;
			ctx->obuf_size=obs;
			}
d317 2
a318 1
		if (b->next_bio == NULL) return(0);
d320 1
a320 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d325 4
a328 4
		if (b->next_bio == NULL) return(0);
		if (ctx->obuf_len <= 0)
			{
			ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d330 1
a330 1
			}
d332 1
a332 2
		for (;;)
			{
d334 3
a336 4
			if (ctx->obuf_len > 0)
				{
				r=BIO_write(b->next_bio,
					ctx->obuf, ctx->obuf_len);
d338 1
a338 1
fprintf(stderr,"FLUSH %3d -> %3d\n",ctx->obuf_len,r);
d341 2
a342 1
				if (r <= 0) return((long)r);
d345 5
a349 7
						ctx->obuf_len - r);
				ctx->obuf_len-=r;
				}
			else
				{
				ctx->obuf_len=0;
				ret=1;
a350 1
				}
d352 2
a353 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d356 3
a358 3
		dbio=(BIO *)ptr;
		if (	!BIO_set_write_buffer_size(dbio,ctx->obuf_size))
			ret=0;
d361 3
a363 2
		if (b->next_bio == NULL) return(0);
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d365 2
a366 2
		}
	return(ret);
d368 12
a379 11
	BIOerr(BIO_F_LINEBUFFER_CTRL,ERR_R_MALLOC_FAILURE);
	return(0);
	}

static long linebuffer_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
d381 1
a381 1
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
a382 13
		}
	return(ret);
	}

static int linebuffer_gets(BIO *b, char *buf, int size)
	{
	if (b->next_bio == NULL) return(0);
	return(BIO_gets(b->next_bio,buf,size));
	}

static int linebuffer_puts(BIO *b, const char *str)
	{
	return(linebuffer_write(b,str,strlen(str)));
d384 2
d387 13
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d203 1
a203 1
#ifdef DEBUG
d213 1
a213 1
#ifdef DEBUG
d219 1
a219 1
#ifdef DEBUG
d232 1
a232 1
#ifdef DEBUG
d239 1
a239 1
#ifdef DEBUG
d245 1
a245 1
#ifdef DEBUG
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d203 1
a203 1
#if 0
d213 1
a213 1
#if 0
d219 1
a219 1
#if 0
d232 1
a232 1
#if 0
d239 1
a239 1
#if 0
d245 1
a245 1
#if 0
@


