head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16;
locks; strict;
comment	@ * @;


1.16
date	2014.12.08.03.54.19;	author bcook;	state Exp;
branches;
next	1.15;
commitid	K9cSMlxuQsffEdFA;

1.15
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.14;
commitid	yQEL1wOWIearrW15;

1.14
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.29.18.27.52;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.19.42.24;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.16.15.05.23;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.13.19.50.56;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.08.08.03.13;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.06.09.22.53;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.40;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.54;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.34;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.04;	author djm;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Use platform-defined method of printing a pointer.

Casting a pointer to an unsigned long discards bits on an LLP64 system.

ok deraadt@@
@
text
@/* $OpenBSD: bio_cb.c,v 1.15 2014/07/11 08:44:47 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/err.h>
#include <openssl/bio.h>

long
BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi, long argl,
    long ret)
{
	BIO *b;
	char buf[256];
	char *p;
	long r = 1;
	size_t p_maxlen;

	if (BIO_CB_RETURN & cmd)
		r = ret;

	snprintf(buf, sizeof buf, "BIO[%p]:", bio);
	p = &(buf[14]);
	p_maxlen = sizeof buf - 14;
	switch (cmd) {
	case BIO_CB_FREE:
		snprintf(p, p_maxlen, "Free - %s\n", bio->method->name);
		break;
	case BIO_CB_READ:
		if (bio->method->type & BIO_TYPE_DESCRIPTOR)
			snprintf(p, p_maxlen,
			    "read(%d,%lu) - %s fd=%d\n",
			    bio->num, (unsigned long)argi,
			    bio->method->name, bio->num);
		else
			snprintf(p, p_maxlen, "read(%d,%lu) - %s\n",
			    bio->num, (unsigned long)argi, bio->method->name);
		break;
	case BIO_CB_WRITE:
		if (bio->method->type & BIO_TYPE_DESCRIPTOR)
			snprintf(p, p_maxlen,
			    "write(%d,%lu) - %s fd=%d\n",
			    bio->num, (unsigned long)argi,
			    bio->method->name, bio->num);
		else
			snprintf(p, p_maxlen, "write(%d,%lu) - %s\n",
			    bio->num, (unsigned long)argi, bio->method->name);
		break;
	case BIO_CB_PUTS:
		snprintf(p, p_maxlen,
		    "puts() - %s\n", bio->method->name);
		break;
	case BIO_CB_GETS:
		snprintf(p, p_maxlen, "gets(%lu) - %s\n",
		    (unsigned long)argi, bio->method->name);
		break;
	case BIO_CB_CTRL:
		snprintf(p, p_maxlen, "ctrl(%lu) - %s\n",
		    (unsigned long)argi, bio->method->name);
		break;
	case BIO_CB_RETURN|BIO_CB_READ:
		snprintf(p, p_maxlen, "read return %ld\n", ret);
		break;
	case BIO_CB_RETURN|BIO_CB_WRITE:
		snprintf(p, p_maxlen, "write return %ld\n", ret);
		break;
	case BIO_CB_RETURN|BIO_CB_GETS:
		snprintf(p, p_maxlen, "gets return %ld\n", ret);
		break;
	case BIO_CB_RETURN|BIO_CB_PUTS:
		snprintf(p, p_maxlen, "puts return %ld\n", ret);
		break;
	case BIO_CB_RETURN|BIO_CB_CTRL:
		snprintf(p, p_maxlen, "ctrl return %ld\n", ret);
		break;
	default:
		snprintf(p, p_maxlen,
		    "bio callback - unknown type (%d)\n", cmd);
		break;
	}

	b = (BIO *)bio->cb_arg;
	if (b != NULL)
		BIO_write(b, buf, strlen(buf));
	else
		fputs(buf, stderr);
	return (r);
}
@


1.15
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_cb.c,v 1.14 2014/06/12 15:49:28 deraadt Exp $ */
d79 1
a79 1
	snprintf(buf, sizeof buf, "BIO[%08lX]:", (unsigned long)bio);
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
d62 2
a63 2
#include <stdlib.h>
#include "cryptlib.h"
a64 1
#include <openssl/err.h>
@


1.13
log
@Any sane platform has stdio. Stop pretending we will ever use a platform
that does not.
"fire bomb" tedu@@
@
text
@d1 1
a1 1
/* crypto/bio/bio_cb.c */
@


1.12
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@a141 1
#if !defined(OPENSSL_NO_STDIO)
a143 1
#endif
@


1.11
log
@> As I walk through the valley of the shadow of death
> I take a look at my life and realize there's nothin' left
> Cause I've been blasting and laughing so long,
> That even my mama thinks that my mind is gone
Remove even more unspeakable evil being perpetuated in the name of VMS.
(and lesser evils done in the name of others.)
ok miod
@
text
@d79 1
a79 1
	(void) snprintf(buf, sizeof buf, "BIO[%08lX]:", (unsigned long)bio);
d84 1
a84 1
		(void) snprintf(p, p_maxlen, "Free - %s\n", bio->method->name);
d88 1
a88 1
			(void) snprintf(p, p_maxlen,
d93 1
a93 1
			(void) snprintf(p, p_maxlen, "read(%d,%lu) - %s\n",
d98 1
a98 1
			(void) snprintf(p, p_maxlen,
d103 1
a103 1
			(void) snprintf(p, p_maxlen, "write(%d,%lu) - %s\n",
d107 1
a107 1
		(void) snprintf(p, p_maxlen,
d111 1
a111 1
		(void) snprintf(p, p_maxlen, "gets(%lu) - %s\n",
d115 1
a115 1
		(void) snprintf(p, p_maxlen, "ctrl(%lu) - %s\n",
d119 1
a119 1
		(void) snprintf(p, p_maxlen, "read return %ld\n", ret);
d122 1
a122 1
		(void) snprintf(p, p_maxlen, "write return %ld\n", ret);
d125 1
a125 1
		(void) snprintf(p, p_maxlen, "gets return %ld\n", ret);
d128 1
a128 1
		(void) snprintf(p, p_maxlen, "puts return %ld\n", ret);
d131 1
a131 1
		(void) snprintf(p, p_maxlen, "ctrl return %ld\n", ret);
d134 1
a134 1
		(void) snprintf(p, p_maxlen,
@


1.10
log
@More KNF.
@
text
@d142 1
a142 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)
@


1.9
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d90 1
a90 1
			    bio->num,(unsigned long)argi,
@


1.8
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d66 4
a69 3
long BIO_debug_callback(BIO *bio, int cmd, const char *argp,
	     int argi, long argl, long ret)
	{
d73 1
a73 1
	long r=1;
d77 1
a77 1
		r=ret;
d79 2
a80 2
	(void) snprintf(buf,sizeof buf,"BIO[%08lX]:",(unsigned long)bio);
	p= &(buf[14]);
d82 1
a82 2
	switch (cmd)
		{
d84 1
a84 1
		(void) snprintf(p,p_maxlen,"Free - %s\n",bio->method->name);
d88 4
a91 3
			(void) snprintf(p,p_maxlen,"read(%d,%lu) - %s fd=%d\n",
				 bio->num,(unsigned long)argi,
				 bio->method->name,bio->num);
d93 2
a94 3
			(void) snprintf(p,p_maxlen,"read(%d,%lu) - %s\n",
				 bio->num,(unsigned long)argi,
				 bio->method->name);
d98 4
a101 3
			(void) snprintf(p,p_maxlen,"write(%d,%lu) - %s fd=%d\n",
				 bio->num,(unsigned long)argi,
				 bio->method->name,bio->num);
d103 2
a104 3
			(void) snprintf(p,p_maxlen,"write(%d,%lu) - %s\n",
				 bio->num,(unsigned long)argi,
				 bio->method->name);
d107 2
a108 1
		(void) snprintf(p,p_maxlen,"puts() - %s\n",bio->method->name);
d111 2
a112 1
		(void) snprintf(p,p_maxlen,"gets(%lu) - %s\n",(unsigned long)argi,bio->method->name);
d115 2
a116 1
		(void) snprintf(p,p_maxlen,"ctrl(%lu) - %s\n",(unsigned long)argi,bio->method->name);
d119 1
a119 1
		(void) snprintf(p,p_maxlen,"read return %ld\n",ret);
d122 1
a122 1
		(void) snprintf(p,p_maxlen,"write return %ld\n",ret);
d125 1
a125 1
		(void) snprintf(p,p_maxlen,"gets return %ld\n",ret);
d128 1
a128 1
		(void) snprintf(p,p_maxlen,"puts return %ld\n",ret);
d131 1
a131 1
		(void) snprintf(p,p_maxlen,"ctrl return %ld\n",ret);
d134 2
a135 1
		(void) snprintf(p,p_maxlen,"bio callback - unknown type (%d)\n",cmd);
d137 1
a137 1
		}
d139 1
a139 1
	b=(BIO *)bio->cb_arg;
d141 1
a141 1
		BIO_write(b,buf,strlen(buf));
d144 1
a144 1
		fputs(buf,stderr);
d146 2
a147 2
	return(r);
	}
@


1.7
log
@Remove some stuff that isn't needed.
ok miod@@ deraadt@@
@
text
@d78 1
a78 1
	BIO_snprintf(buf,sizeof buf,"BIO[%08lX]:",(unsigned long)bio);
d84 1
a84 1
		BIO_snprintf(p,p_maxlen,"Free - %s\n",bio->method->name);
d88 1
a88 1
			BIO_snprintf(p,p_maxlen,"read(%d,%lu) - %s fd=%d\n",
d92 1
a92 1
			BIO_snprintf(p,p_maxlen,"read(%d,%lu) - %s\n",
d98 1
a98 1
			BIO_snprintf(p,p_maxlen,"write(%d,%lu) - %s fd=%d\n",
d102 1
a102 1
			BIO_snprintf(p,p_maxlen,"write(%d,%lu) - %s\n",
d107 1
a107 1
		BIO_snprintf(p,p_maxlen,"puts() - %s\n",bio->method->name);
d110 1
a110 1
		BIO_snprintf(p,p_maxlen,"gets(%lu) - %s\n",(unsigned long)argi,bio->method->name);
d113 1
a113 1
		BIO_snprintf(p,p_maxlen,"ctrl(%lu) - %s\n",(unsigned long)argi,bio->method->name);
d116 1
a116 1
		BIO_snprintf(p,p_maxlen,"read return %ld\n",ret);
d119 1
a119 1
		BIO_snprintf(p,p_maxlen,"write return %ld\n",ret);
d122 1
a122 1
		BIO_snprintf(p,p_maxlen,"gets return %ld\n",ret);
d125 1
a125 1
		BIO_snprintf(p,p_maxlen,"puts return %ld\n",ret);
d128 1
a128 1
		BIO_snprintf(p,p_maxlen,"ctrl return %ld\n",ret);
d131 1
a131 1
		BIO_snprintf(p,p_maxlen,"bio callback - unknown type (%d)\n",cmd);
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d66 1
a66 1
long MS_CALLBACK BIO_debug_callback(BIO *bio, int cmd, const char *argp,
d70 1
a70 1
	MS_STATIC char buf[256];
@


1.5
log
@merge 0.9.7d
@
text
@d88 3
a90 2
			BIO_snprintf(p,p_maxlen,"read(%d,%d) - %s fd=%d\n",
				 bio->num,argi,bio->method->name,bio->num);
d92 3
a94 2
			BIO_snprintf(p,p_maxlen,"read(%d,%d) - %s\n",
				 bio->num,argi,bio->method->name);
d98 3
a100 2
			BIO_snprintf(p,p_maxlen,"write(%d,%d) - %s fd=%d\n",
				 bio->num,argi,bio->method->name,bio->num);
d102 3
a104 2
			BIO_snprintf(p,p_maxlen,"write(%d,%d) - %s\n",
				 bio->num,argi,bio->method->name);
d110 1
a110 1
		BIO_snprintf(p,p_maxlen,"gets(%d) - %s\n",argi,bio->method->name);
d113 1
a113 1
		BIO_snprintf(p,p_maxlen,"ctrl(%d) - %s\n",argi,bio->method->name);
@


1.4
log
@sprintf->snprintf. deraadt@@ suggestions and ok
@
text
@d78 1
a78 1
	snprintf(buf,sizeof buf,"BIO[%08lX]:",(unsigned long)bio);
d84 1
a84 1
		snprintf(p,p_maxlen,"Free - %s\n",bio->method->name);
d88 1
a88 1
			snprintf(p,p_maxlen,"read(%d,%d) - %s fd=%d\n",
d91 1
a91 1
			snprintf(p,p_maxlen,"read(%d,%d) - %s\n",
d96 1
a96 1
			snprintf(p,p_maxlen,"write(%d,%d) - %s fd=%d\n",
d99 1
a99 1
			snprintf(p,p_maxlen,"write(%d,%d) - %s\n",
d103 1
a103 1
		snprintf(p,p_maxlen,"puts() - %s\n",bio->method->name);
d106 1
a106 1
		snprintf(p,p_maxlen,"gets(%d) - %s\n",argi,bio->method->name);
d109 1
a109 1
		snprintf(p,p_maxlen,"ctrl(%d) - %s\n",argi,bio->method->name);
d112 1
a112 1
		snprintf(p,p_maxlen,"read return %ld\n",ret);
d115 1
a115 1
		snprintf(p,p_maxlen,"write return %ld\n",ret);
d118 1
a118 1
		snprintf(p,p_maxlen,"gets return %ld\n",ret);
d121 1
a121 1
		snprintf(p,p_maxlen,"puts return %ld\n",ret);
d124 1
a124 1
		snprintf(p,p_maxlen,"ctrl return %ld\n",ret);
d127 1
a127 1
		snprintf(p,p_maxlen,"bio callback - unknown type (%d)\n",cmd);
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d73 1
d78 1
a78 1
	sprintf(buf,"BIO[%08lX]:",(unsigned long)bio);
d80 1
d84 1
a84 1
		sprintf(p,"Free - %s\n",bio->method->name);
d88 2
a89 1
			sprintf(p,"read(%d,%d) - %s fd=%d\n",bio->num,argi,bio->method->name,bio->num);
d91 2
a92 1
			sprintf(p,"read(%d,%d) - %s\n",bio->num,argi,bio->method->name);
d96 2
a97 1
			sprintf(p,"write(%d,%d) - %s fd=%d\n",bio->num,argi,bio->method->name,bio->num);
d99 2
a100 1
			sprintf(p,"write(%d,%d) - %s\n",bio->num,argi,bio->method->name);
d103 1
a103 1
		sprintf(p,"puts() - %s\n",bio->method->name);
d106 1
a106 1
		sprintf(p,"gets(%d) - %s\n",argi,bio->method->name);
d109 1
a109 1
		sprintf(p,"ctrl(%d) - %s\n",argi,bio->method->name);
d112 1
a112 1
		sprintf(p,"read return %ld\n",ret);
d115 1
a115 1
		sprintf(p,"write return %ld\n",ret);
d118 1
a118 1
		sprintf(p,"gets return %ld\n",ret);
d121 1
a121 1
		sprintf(p,"puts return %ld\n",ret);
d124 1
a124 1
		sprintf(p,"ctrl return %ld\n",ret);
d127 1
a127 1
		sprintf(p,"bio callback - unknown type (%d)\n",cmd);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d128 1
a128 1
#if !defined(NO_STDIO) && !defined(WIN16)
@


1.1
log
@Initial revision
@
text
@d63 2
a64 2
#include "bio.h"
#include "err.h"
d66 2
a67 7
long MS_CALLBACK BIO_debug_callback(bio,cmd,argp,argi,argl,ret)
BIO *bio;
int cmd;
char *argp;
int argi;
long argl;
long ret;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 2
a64 2
#include <openssl/bio.h>
#include <openssl/err.h>
d66 7
a72 2
long MS_CALLBACK BIO_debug_callback(BIO *bio, int cmd, const char *argp,
	     int argi, long argl, long ret)
d133 1
a133 1
#if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@a72 1
	size_t p_maxlen;
d77 1
a77 1
	BIO_snprintf(buf,sizeof buf,"BIO[%08lX]:",(unsigned long)bio);
a78 1
	p_maxlen = sizeof buf - 14;
d82 1
a82 1
		BIO_snprintf(p,p_maxlen,"Free - %s\n",bio->method->name);
d86 1
a86 2
			BIO_snprintf(p,p_maxlen,"read(%d,%d) - %s fd=%d\n",
				 bio->num,argi,bio->method->name,bio->num);
d88 1
a88 2
			BIO_snprintf(p,p_maxlen,"read(%d,%d) - %s\n",
				 bio->num,argi,bio->method->name);
d92 1
a92 2
			BIO_snprintf(p,p_maxlen,"write(%d,%d) - %s fd=%d\n",
				 bio->num,argi,bio->method->name,bio->num);
d94 1
a94 2
			BIO_snprintf(p,p_maxlen,"write(%d,%d) - %s\n",
				 bio->num,argi,bio->method->name);
d97 1
a97 1
		BIO_snprintf(p,p_maxlen,"puts() - %s\n",bio->method->name);
d100 1
a100 1
		BIO_snprintf(p,p_maxlen,"gets(%d) - %s\n",argi,bio->method->name);
d103 1
a103 1
		BIO_snprintf(p,p_maxlen,"ctrl(%d) - %s\n",argi,bio->method->name);
d106 1
a106 1
		BIO_snprintf(p,p_maxlen,"read return %ld\n",ret);
d109 1
a109 1
		BIO_snprintf(p,p_maxlen,"write return %ld\n",ret);
d112 1
a112 1
		BIO_snprintf(p,p_maxlen,"gets return %ld\n",ret);
d115 1
a115 1
		BIO_snprintf(p,p_maxlen,"puts return %ld\n",ret);
d118 1
a118 1
		BIO_snprintf(p,p_maxlen,"ctrl return %ld\n",ret);
d121 1
a121 1
		BIO_snprintf(p,p_maxlen,"bio callback - unknown type (%d)\n",cmd);
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d88 2
a89 3
			BIO_snprintf(p,p_maxlen,"read(%d,%lu) - %s fd=%d\n",
				 bio->num,(unsigned long)argi,
				 bio->method->name,bio->num);
d91 2
a92 3
			BIO_snprintf(p,p_maxlen,"read(%d,%lu) - %s\n",
				 bio->num,(unsigned long)argi,
				 bio->method->name);
d96 2
a97 3
			BIO_snprintf(p,p_maxlen,"write(%d,%lu) - %s fd=%d\n",
				 bio->num,(unsigned long)argi,
				 bio->method->name,bio->num);
d99 2
a100 3
			BIO_snprintf(p,p_maxlen,"write(%d,%lu) - %s\n",
				 bio->num,(unsigned long)argi,
				 bio->method->name);
d106 1
a106 1
		BIO_snprintf(p,p_maxlen,"gets(%lu) - %s\n",(unsigned long)argi,bio->method->name);
d109 1
a109 1
		BIO_snprintf(p,p_maxlen,"ctrl(%lu) - %s\n",(unsigned long)argi,bio->method->name);
@


