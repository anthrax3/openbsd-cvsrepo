head	1.23;
access;
symbols
	OPENBSD_6_1_BASE:1.23;
locks; strict;
comment	@ * @;


1.23
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.22;
commitid	yQEL1wOWIearrW15;

1.22
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.21;
commitid	id8dTrTMtnTn4fqt;

1.21
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	mJUVYpkFBZ0Zv2bG;

1.20
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.21.41.15;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.11.33.33;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.16.19.42.24;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.16.13.01.09;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.15.17.25.41;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.15.16.37.22;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.14.00.00.08;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.23.31.37;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.36;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.19;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.10;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.41;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.37;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.56;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.40;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.04;	author djm;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: bss_sock.c,v 1.22 2014/07/10 13:58:22 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <sys/socket.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <openssl/bio.h>

static int sock_write(BIO *h, const char *buf, int num);
static int sock_read(BIO *h, char *buf, int size);
static int sock_puts(BIO *h, const char *str);
static long sock_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int sock_new(BIO *h);
static int sock_free(BIO *data);
int BIO_sock_should_retry(int s);

static BIO_METHOD methods_sockp = {
	.type = BIO_TYPE_SOCKET,
	.name = "socket",
	.bwrite = sock_write,
	.bread = sock_read,
	.bputs = sock_puts,
	.ctrl = sock_ctrl,
	.create = sock_new,
	.destroy = sock_free
};

BIO_METHOD *
BIO_s_socket(void)
{
	return (&methods_sockp);
}

BIO *
BIO_new_socket(int fd, int close_flag)
{
	BIO *ret;

	ret = BIO_new(BIO_s_socket());
	if (ret == NULL)
		return (NULL);
	BIO_set_fd(ret, fd, close_flag);
	return (ret);
}

static int
sock_new(BIO *bi)
{
	bi->init = 0;
	bi->num = 0;
	bi->ptr = NULL;
	bi->flags = 0;
	return (1);
}

static int
sock_free(BIO *a)
{
	if (a == NULL)
		return (0);
	if (a->shutdown) {
		if (a->init) {
			shutdown(a->num, SHUT_RDWR);
			close(a->num);
		}
		a->init = 0;
		a->flags = 0;
	}
	return (1);
}

static int
sock_read(BIO *b, char *out, int outl)
{
	int ret = 0;

	if (out != NULL) {
		errno = 0;
		ret = read(b->num, out, outl);
		BIO_clear_retry_flags(b);
		if (ret <= 0) {
			if (BIO_sock_should_retry(ret))
				BIO_set_retry_read(b);
		}
	}
	return (ret);
}

static int
sock_write(BIO *b, const char *in, int inl)
{
	int ret;

	errno = 0;
	ret = write(b->num, in, inl);
	BIO_clear_retry_flags(b);
	if (ret <= 0) {
		if (BIO_sock_should_retry(ret))
			BIO_set_retry_write(b);
	}
	return (ret);
}

static long
sock_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	long ret = 1;
	int *ip;

	switch (cmd) {
	case BIO_C_SET_FD:
		sock_free(b);
		b->num= *((int *)ptr);
		b->shutdown = (int)num;
		b->init = 1;
		break;
	case BIO_C_GET_FD:
		if (b->init) {
			ip = (int *)ptr;
			if (ip != NULL)
				*ip = b->num;
			ret = b->num;
		} else
			ret = -1;
		break;
	case BIO_CTRL_GET_CLOSE:
		ret = b->shutdown;
		break;
	case BIO_CTRL_SET_CLOSE:
		b->shutdown = (int)num;
		break;
	case BIO_CTRL_DUP:
	case BIO_CTRL_FLUSH:
		ret = 1;
		break;
	default:
		ret = 0;
		break;
	}
	return (ret);
}

static int
sock_puts(BIO *bp, const char *str)
{
	int n, ret;

	n = strlen(str);
	ret = sock_write(bp, str, n);
	return (ret);
}

int
BIO_sock_should_retry(int i)
{
	int err;

	if ((i == 0) || (i == -1)) {
		err = errno;
		return (BIO_sock_non_fatal_error(err));
	}
	return (0);
}

int
BIO_sock_non_fatal_error(int err)
{
	switch (err) {
	case ENOTCONN:
	case EINTR:
	case EAGAIN:
	case EINPROGRESS:
	case EALREADY:
		return (1);
	default:
		break;
	}
	return (0);
}

@


1.22
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_sock.c,v 1.21 2014/06/12 15:49:28 deraadt Exp $ */
a64 2

#include "cryptlib.h"
@


1.21
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 3
d63 1
a63 1
#include <errno.h>
d65 1
a66 2
#include <sys/socket.h>

@


1.20
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/* crypto/bio/bss_sock.c */
@


1.19
log
@unifdef NO_SOCK
@
text
@d77 8
a84 10
	BIO_TYPE_SOCKET,
	"socket",
	sock_write,
	sock_read,
	sock_puts,
	NULL, /* sock_gets, */
	sock_ctrl,
	sock_new,
	sock_free,
	NULL,
@


1.18
log
@unistd.h for protos where needed
@
text
@a64 1
#ifndef OPENSSL_NO_SOCK
a241 1
#endif  /* #ifndef OPENSSL_NO_SOCK */
@


1.17
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d61 1
@


1.16
log
@some KNF cleanup following the script
@
text
@a60 1
#define USE_SOCKETS
d62 1
@


1.15
log
@> As I walk through the valley of the shadow of death
> I take a look at my life and realize there's nothin' left
> Cause I've been blasting and laughing so long,
> That even my mama thinks that my mind is gone
Remove even more unspeakable evil being perpetuated in the name of VMS.
(and lesser evils done in the name of others.)
ok miod
@
text
@d89 2
a90 2
BIO_METHOD
*BIO_s_socket(void)
d95 2
a96 2
BIO
*BIO_new_socket(int fd, int close_flag)
@


1.14
log
@Clean up non-fatal error handling - we know which error numbers we have
defined.

ok miod@@ beck@@
@
text
@a67 6
#ifdef WATT32
#define sock_write SockWrite  /* Watt-32 uses same names */
#define sock_read  SockRead
#define sock_puts  SockPuts
#endif

@


1.13
log
@Toss a `unifdef -U OPENSSL_SYS_WINDOWS' bomb into crypto/bio.

ok miod@@
@
text
@a235 23
#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_NETWARE)
# if defined(WSAEWOULDBLOCK)
	case WSAEWOULDBLOCK:
# endif

# if 0 /* This appears to always be an error */
#  if defined(WSAENOTCONN)
	case WSAENOTCONN:
#  endif
# endif
#endif

#ifdef EWOULDBLOCK
# ifdef WSAEWOULDBLOCK
#  if WSAEWOULDBLOCK != EWOULDBLOCK
	case EWOULDBLOCK:
#  endif
# else
	case EWOULDBLOCK:
# endif
#endif

#if defined(ENOTCONN)
a236 3
#endif

#ifdef EINTR
a237 4
#endif

#ifdef EAGAIN
# if EWOULDBLOCK != EAGAIN
a238 8
# endif
#endif

#ifdef EPROTO
	case EPROTO:
#endif

#ifdef EINPROGRESS
a239 3
#endif

#ifdef EALREADY
a240 1
#endif
a241 1
		/* break; */
@


1.12
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a226 6

#if defined(OPENSSL_SYS_WINDOWS) && 0 /* more microsoft stupidity? perhaps not? Ben 4/1/99 */
		if ((i == -1) && (err == 0))
			return (1);
#endif

@


1.11
log
@two SHUTDOWN2 got away; noticed by beck
@
text
@d82 1
a82 2
static BIO_METHOD methods_sockp=
	{
d93 1
a93 1
	};
d95 9
a103 7
BIO_METHOD *BIO_s_socket(void)
	{
	return(&methods_sockp);
	}

BIO *BIO_new_socket(int fd, int close_flag)
	{
d106 24
a129 22
	ret=BIO_new(BIO_s_socket());
	if (ret == NULL) return(NULL);
	BIO_set_fd(ret,fd,close_flag);
	return(ret);
	}

static int sock_new(BIO *bi)
	{
	bi->init=0;
	bi->num=0;
	bi->ptr=NULL;
	bi->flags=0;
	return(1);
	}

static int sock_free(BIO *a)
	{
	if (a == NULL) return(0);
	if (a->shutdown)
		{
		if (a->init)
			{
a131 3
			}
		a->init=0;
		a->flags=0;
d133 2
a134 1
	return(1);
d136 7
a142 4
	
static int sock_read(BIO *b, char *out, int outl)
	{
	int ret=0;
d144 1
a144 2
	if (out != NULL)
		{
d146 1
a146 1
		ret=read(b->num,out,outl);
d148 1
a148 2
		if (ret <= 0)
			{
a150 1
			}
a151 1
	return(ret);
d153 2
d156 3
a158 2
static int sock_write(BIO *b, const char *in, int inl)
	{
d160 1
a160 1
	
d162 1
a162 1
	ret=write(b->num,in,inl);
d164 1
a164 2
	if (ret <= 0)
		{
a166 2
		}
	return(ret);
d168 2
d171 4
a174 3
static long sock_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
	long ret=1;
d177 1
a177 2
	switch (cmd)
		{
d181 2
a182 2
		b->shutdown=(int)num;
		b->init=1;
d185 7
a191 8
		if (b->init)
			{
			ip=(int *)ptr;
			if (ip != NULL) *ip=b->num;
			ret=b->num;
			}
		else
			ret= -1;
d194 1
a194 1
		ret=b->shutdown;
d197 1
a197 1
		b->shutdown=(int)num;
d201 1
a201 1
		ret=1;
d204 1
a204 1
		ret=0;
a205 2
		}
	return(ret);
d207 2
d210 4
a213 3
static int sock_puts(BIO *bp, const char *str)
	{
	int n,ret;
d215 4
a218 4
	n=strlen(str);
	ret=sock_write(bp,str,n);
	return(ret);
	}
d220 3
a222 2
int BIO_sock_should_retry(int i)
	{
d225 2
a226 3
	if ((i == 0) || (i == -1))
		{
		err=errno;
d230 1
a230 1
			return(1);
d233 1
a233 3
		return(BIO_sock_non_fatal_error(err));
		}
	return(0);
d235 2
d238 4
a241 4
int BIO_sock_non_fatal_error(int err)
	{
	switch (err)
		{
d289 1
a289 1
		return(1);
a292 2
		}
	return(0);
d294 2
@


1.10
log
@Remove various horrible socket syscall wrappers, especially SHUTDOWN*
which did shutdown + close, all nasty and surprising.  Use the raw
syscalls that everyone knows the behaviour of.
ok beck matthew
@
text
@d127 2
a128 1
			SHUTDOWN2(a->num);
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d141 2
a142 2
		clear_socket_error();
		ret=readsocket(b->num,out,outl);
d157 2
a158 2
	clear_socket_error();
	ret=writesocket(b->num,in,inl);
d223 1
a223 1
		err=get_last_socket_error();
@


1.8
log
@resolve conflicts
@
text
@a174 9
	case BIO_CTRL_RESET:
		num=0;
	case BIO_C_FILE_SEEK:
		ret=0;
		break;
	case BIO_C_FILE_TELL:
	case BIO_CTRL_INFO:
		ret=0;
		break;
a195 4
		break;
	case BIO_CTRL_PENDING:
	case BIO_CTRL_WPENDING:
		ret=0;
@


1.7
log
@resolve conflicts
@
text
@d63 3
d306 2
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@a58 2
#ifndef OPENSSL_NO_SOCK

d249 1
a249 1
#if defined(OPENSSL_SYS_WINDOWS)
d280 1
a280 1
#if EWOULDBLOCK != EAGAIN
a302 1
#endif
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d67 6
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#if !defined(NO_SOCK) || defined(BIO_FD)
a66 1
#ifndef BIO_FD
a73 1
#else
a74 10
static int fd_write(BIO *h, const char *buf, int num);
static int fd_read(BIO *h, char *buf, int size);
static int fd_puts(BIO *h, const char *str);
static long fd_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int fd_new(BIO *h);
static int fd_free(BIO *data);
int BIO_fd_should_retry(int s);
#endif

#ifndef BIO_FD
a92 19
#else
static BIO_METHOD methods_fdp=
	{
	BIO_TYPE_FD,"file descriptor",
	fd_write,
	fd_read,
	fd_puts,
	NULL, /* fd_gets, */
	fd_ctrl,
	fd_new,
	fd_free,
	NULL,
	};

BIO_METHOD *BIO_s_fd(void)
	{
	return(&methods_fdp);
	}
#endif
a93 1
#ifndef BIO_FD
a94 3
#else
BIO *BIO_new_fd(int fd,int close_flag)
#endif
a97 1
#ifndef BIO_FD
a98 3
#else
	ret=BIO_new(BIO_s_fd());
#endif
a103 1
#ifndef BIO_FD
a104 3
#else
static int fd_new(BIO *bi)
#endif
a112 1
#ifndef BIO_FD
a113 3
#else
static int fd_free(BIO *a)
#endif
a119 1
#ifndef BIO_FD
a120 4
#else			/* BIO_FD */
			close(a->num);
#endif

a127 1
#ifndef BIO_FD
a128 3
#else
static int fd_read(BIO *b, char *out,int outl)
#endif
a133 1
#ifndef BIO_FD
a135 4
#else
		clear_sys_error();
		ret=read(b->num,out,outl);
#endif
a138 1
#ifndef BIO_FD
a139 3
#else
			if (BIO_fd_should_retry(ret))
#endif
a145 1
#ifndef BIO_FD
a146 3
#else
static int fd_write(BIO *b, const char *in, int inl)
#endif
a149 1
#ifndef BIO_FD
a151 4
#else
	clear_sys_error();
	ret=write(b->num,in,inl);
#endif
a154 1
#ifndef BIO_FD
a155 3
#else
		if (BIO_fd_should_retry(ret))
#endif
a160 1
#ifndef BIO_FD
a161 3
#else
static long fd_ctrl(BIO *b, int cmd, long num, void *ptr)
#endif
a170 3
#ifdef BIO_FD
		ret=(long)lseek(b->num,num,0);
#else
a171 1
#endif
a174 3
#ifdef BIO_FD
		ret=(long)lseek(b->num,0,1);
#else
a175 1
#endif
a177 1
#ifndef BIO_FD
a178 3
#else
		fd_free(b);
#endif
a213 8
#ifdef undef
static int sock_gets(BIO *bp, char *buf,int size)
	{
	return(-1);
	}
#endif

#ifndef BIO_FD
a214 3
#else
static int fd_puts(BIO *bp, const char *str)
#endif
a218 1
#ifndef BIO_FD
a219 3
#else
	ret=fd_write(bp,str,n);
#endif
a222 1
#ifndef BIO_FD
a223 3
#else
int BIO_fd_should_retry(int i)
#endif
a228 1
#ifndef BIO_FD
a229 3
#else
		err=get_last_sys_error();
#endif
d231 1
a231 1
#if defined(WINDOWS) && 0 /* more microsoft stupidity? perhaps not? Ben 4/1/99 */
a235 1
#ifndef BIO_FD
a236 3
#else
		return(BIO_fd_non_fatal_error(err));
#endif
a240 1
#ifndef BIO_FD
a241 3
#else
int BIO_fd_non_fatal_error(int err)
#endif
d245 1
a245 1
#if !defined(BIO_FD) && defined(WINDOWS)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 4
a71 4
static int sock_write(BIO *h,char *buf,int num);
static int sock_read(BIO *h,char *buf,int size);
static int sock_puts(BIO *h,char *str);
static long sock_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d77 4
a80 4
static int fd_write(BIO *h,char *buf,int num);
static int fd_read(BIO *h,char *buf,int size);
static int fd_puts(BIO *h,char *str);
static long fd_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d212 1
a212 1
static int sock_write(BIO *b, char *in, int inl)
d214 1
a214 1
static int fd_write(BIO *b, char *in, int inl)
d240 1
a240 1
static long sock_ctrl(BIO *b, int cmd, long num, char *ptr)
d242 1
a242 1
static long fd_ctrl(BIO *b, int cmd, long num, char *ptr)
d316 1
a316 1
static int sock_puts(BIO *bp, char *str)
d318 1
a318 1
static int fd_puts(BIO *bp, char *str)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d98 1
d116 1
d168 1
a168 2
			shutdown(a->num,2);
			closesocket(a->num);
@


1.1
log
@Initial revision
@
text
@d65 1
a65 1
#include "bio.h"
a67 1
#ifndef NOPROTO
a75 10
static int sock_write();
static int sock_read();
static int sock_puts();
static long sock_ctrl();
static int sock_new();
static int sock_free();
int BIO_sock_should_retry();
#endif

#else
a76 1
#ifndef NOPROTO
a83 9
#else
static int fd_write();
static int fd_read();
static int fd_puts();
static long fd_ctrl();
static int fd_new();
static int fd_free();
int BIO_fd_should_retry();
#endif
d100 1
a100 1
BIO_METHOD *BIO_s_socket()
d117 1
a117 1
BIO_METHOD *BIO_s_fd()
d124 1
a124 1
BIO *BIO_new_socket(fd,close_flag)
d126 1
a126 1
BIO *BIO_new_fd(fd,close_flag)
a127 2
int fd;
int close_flag;
d142 1
a142 1
static int sock_new(bi)
d144 1
a144 1
static int fd_new(bi)
a145 1
BIO *bi;
d155 1
a155 1
static int sock_free(a)
d157 1
a157 1
static int fd_free(a)
a158 1
BIO *a;
a166 1
# ifdef WINDOWS
a167 3
# else
			close(a->num);
# endif
d180 1
a180 1
static int sock_read(b,out,outl)
d182 1
a182 1
static int fd_read(b,out,outl)
a183 3
BIO *b;
char *out;
int outl;
d189 1
a189 1
#if defined(WINDOWS) && !defined(BIO_FD)
d191 1
a191 1
		ret=recv(b->num,out,outl,0);
d211 1
a211 1
static int sock_write(b,in,inl)
d213 1
a213 1
static int fd_write(b,in,inl)
a214 3
BIO *b;
char *in;
int inl;
d218 1
a218 1
#if defined(WINDOWS) && !defined(BIO_FD)
d220 1
a220 1
	ret=send(b->num,in,inl,0);
d239 1
a239 1
static long sock_ctrl(b,cmd,num,ptr)
d241 1
a241 1
static long fd_ctrl(b,cmd,num,ptr)
a242 4
BIO *b;
int cmd;
long num;
char *ptr;
d250 2
d253 1
a253 1
		ret=(long)lseek(b->num,0,0);
d258 1
d260 3
d264 1
a299 1
		break;
d308 1
a308 4
static int sock_gets(bp,buf,size)
BIO *bp;
char *buf;
int size;
d315 1
a315 1
static int sock_puts(bp,str)
d317 1
a317 1
static int fd_puts(bp,str)
a318 2
BIO *bp;
char *str;
d332 1
a332 1
int BIO_sock_should_retry(i)
d334 1
a334 1
int BIO_fd_should_retry(i)
a335 1
int i;
d341 1
a341 1
#if !defined(BIO_FD) && defined(WINDOWS)
d347 1
a347 1
#if defined(WINDOWS) /* more microsoft stupidity */
d362 1
a362 1
int BIO_sock_non_fatal_error(err)
d364 1
a364 1
int BIO_fd_non_fatal_error(err)
a365 1
int err;
d374 2
a375 1
# if defined(WSAENOTCONN)
d377 1
d417 1
a417 1
		break;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_SOCK
d65 1
a65 1
#include <openssl/bio.h>
d67 6
a72 4
static int sock_write(BIO *h, const char *buf, int num);
static int sock_read(BIO *h, char *buf, int size);
static int sock_puts(BIO *h, const char *str);
static long sock_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d76 30
d107 1
a118 1
	NULL,
d121 1
a121 1
BIO_METHOD *BIO_s_socket(void)
d125 12
d138 13
a150 1
BIO *BIO_new_socket(int fd, int close_flag)
d154 1
d156 3
d164 6
a169 1
static int sock_new(BIO *bi)
d178 6
a183 1
static int sock_free(BIO *a)
d190 11
a200 1
			SHUTDOWN2(a->num);
d208 8
a215 1
static int sock_read(BIO *b, char *out, int outl)
d221 1
d223 5
a227 1
		ret=readsocket(b->num,out,outl);
d231 1
d233 3
d242 8
a249 1
static int sock_write(BIO *b, const char *in, int inl)
d253 1
d255 5
a259 1
	ret=writesocket(b->num,in,inl);
d263 1
d265 3
d273 9
a281 1
static long sock_ctrl(BIO *b, int cmd, long num, void *ptr)
d289 3
a291 2
		num=0;
	case BIO_C_FILE_SEEK:
d293 1
a294 1
	case BIO_C_FILE_TELL:
d299 1
d301 3
d332 1
d340 17
a356 1
static int sock_puts(BIO *bp, const char *str)
d361 1
d363 3
d369 6
a374 1
int BIO_sock_should_retry(int i)
d380 1
d382 3
d386 1
a386 1
#if defined(OPENSSL_SYS_WINDOWS) && 0 /* more microsoft stupidity? perhaps not? Ben 4/1/99 */
d391 1
d393 3
d400 6
a405 1
int BIO_sock_non_fatal_error(int err)
d409 1
a409 1
#if defined(OPENSSL_SYS_WINDOWS)
d414 1
a414 2
# if 0 /* This appears to always be an error */
#  if defined(WSAENOTCONN)
a415 1
#  endif
d455 1
a455 1
		/* break; */
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a66 6
#ifdef WATT32
#define sock_write SockWrite  /* Watt-32 uses same names */
#define sock_read  SockRead
#define sock_puts  SockPuts
#endif

@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d59 2
d251 1
a251 1
#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_NETWARE)
d282 1
a282 1
# if EWOULDBLOCK != EAGAIN
d305 1
@


1.1.1.5
log
@import of OpenSSL 0.9.8k
@
text
@a62 3

#ifndef OPENSSL_NO_SOCK

a302 2

#endif  /* #ifndef OPENSSL_NO_SOCK */
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d175 9
d205 4
@


