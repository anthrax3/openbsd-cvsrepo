head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.16.15.01.02;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.08;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.39;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.54;	author markus;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: bf_null.c,v 1.10 2014/06/12 15:49:28 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <errno.h>
#include <stdio.h>

#include <openssl/bio.h>

/* BIO_put and BIO_get both add to the digest,
 * BIO_gets returns the digest */

static int nullf_write(BIO *h, const char *buf, int num);
static int nullf_read(BIO *h, char *buf, int size);
static int nullf_puts(BIO *h, const char *str);
static int nullf_gets(BIO *h, char *str, int size);
static long nullf_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int nullf_new(BIO *h);
static int nullf_free(BIO *data);
static long nullf_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);

static BIO_METHOD methods_nullf = {
	.type = BIO_TYPE_NULL_FILTER,
	.name = "NULL filter",
	.bwrite = nullf_write,
	.bread = nullf_read,
	.bputs = nullf_puts,
	.bgets = nullf_gets,
	.ctrl = nullf_ctrl,
	.create = nullf_new,
	.destroy = nullf_free,
	.callback_ctrl = nullf_callback_ctrl
};

BIO_METHOD *
BIO_f_null(void)
{
	return (&methods_nullf);
}

static int
nullf_new(BIO *bi)
{
	bi->init = 1;
	bi->ptr = NULL;
	bi->flags = 0;
	return (1);
}

static int
nullf_free(BIO *a)
{
	if (a == NULL)
		return (0);
/*	a->ptr=NULL;
	a->init=0;
	a->flags=0;*/
	return (1);
}

static int
nullf_read(BIO *b, char *out, int outl)
{
	int ret = 0;

	if (out == NULL)
		return (0);
	if (b->next_bio == NULL)
		return (0);
	ret = BIO_read(b->next_bio, out, outl);
	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);
	return (ret);
}

static int
nullf_write(BIO *b, const char *in, int inl)
{
	int ret = 0;

	if ((in == NULL) || (inl <= 0))
		return (0);
	if (b->next_bio == NULL)
		return (0);
	ret = BIO_write(b->next_bio, in, inl);
	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);
	return (ret);
}

static long
nullf_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	long ret;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	case BIO_C_DO_STATE_MACHINE:
		BIO_clear_retry_flags(b);
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
		BIO_copy_next_retry(b);
		break;
	case BIO_CTRL_DUP:
		ret = 0L;
		break;
	default:
		ret = BIO_ctrl(b->next_bio, cmd, num, ptr);
	}
	return (ret);
}

static long
nullf_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	long ret = 1;

	if (b->next_bio == NULL)
		return (0);
	switch (cmd) {
	default:
		ret = BIO_callback_ctrl(b->next_bio, cmd, fp);
		break;
	}
	return (ret);
}

static int
nullf_gets(BIO *bp, char *buf, int size)
{
	if (bp->next_bio == NULL)
		return (0);
	return (BIO_gets(bp->next_bio, buf, size));
}

static int
nullf_puts(BIO *bp, const char *str)
{
	if (bp->next_bio == NULL)
		return (0);
	return (BIO_puts(bp->next_bio, str));
}
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 1
a61 2
#include <errno.h>
#include "cryptlib.h"
@


1.9
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/* crypto/bio/bf_null.c */
@


1.8
log
@some KNF cleanup following the script
@
text
@d77 10
a86 10
	BIO_TYPE_NULL_FILTER,
	"NULL filter",
	nullf_write,
	nullf_read,
	nullf_puts,
	nullf_gets,
	nullf_ctrl,
	nullf_new,
	nullf_free,
	nullf_callback_ctrl,
@


1.7
log
@More KNF.
@
text
@d89 2
a90 2
BIO_METHOD
*BIO_f_null(void)
@


1.6
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d75 2
a76 2
static BIO_METHOD methods_nullf=
	{
d87 1
a87 14
	};

BIO_METHOD *BIO_f_null(void)
	{
	return(&methods_nullf);
	}

static int nullf_new(BIO *bi)
	{
	bi->init=1;
	bi->ptr=NULL;
	bi->flags=0;
	return(1);
	}
d89 20
a108 3
static int nullf_free(BIO *a)
	{
	if (a == NULL) return(0);
d112 13
a124 10
	return(1);
	}
	
static int nullf_read(BIO *b, char *out, int outl)
	{
	int ret=0;
 
	if (out == NULL) return(0);
	if (b->next_bio == NULL) return(0);
	ret=BIO_read(b->next_bio,out,outl);
d127 2
a128 2
	return(ret);
	}
d130 10
a139 7
static int nullf_write(BIO *b, const char *in, int inl)
	{
	int ret=0;

	if ((in == NULL) || (inl <= 0)) return(0);
	if (b->next_bio == NULL) return(0);
	ret=BIO_write(b->next_bio,in,inl);
d142 2
a143 2
	return(ret);
	}
d145 3
a147 2
static long nullf_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d150 4
a153 4
	if (b->next_bio == NULL) return(0);
	switch(cmd)
		{
        case BIO_C_DO_STATE_MACHINE:
d155 1
a155 1
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
d159 1
a159 1
		ret=0L;
d162 1
a162 3
		ret=BIO_ctrl(b->next_bio,cmd,num,ptr);
		}
	return(ret);
d164 2
d167 8
a174 7
static long nullf_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
d176 1
a176 1
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
a177 8
		}
	return(ret);
	}

static int nullf_gets(BIO *bp, char *buf, int size)
	{
	if (bp->next_bio == NULL) return(0);
	return(BIO_gets(bp->next_bio,buf,size));
d179 2
d182 15
a196 8

static int nullf_puts(BIO *bp, const char *str)
	{
	if (bp->next_bio == NULL) return(0);
	return(BIO_puts(bp->next_bio,str));
	}


@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a62 1
#include <openssl/evp.h>
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 5
a72 5
static int nullf_write(BIO *h,char *buf,int num);
static int nullf_read(BIO *h,char *buf,int size);
static int nullf_puts(BIO *h,char *str);
static int nullf_gets(BIO *h,char *str,int size);
static long nullf_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d75 1
a75 1
static long nullf_callback_ctrl(BIO *h,int cmd,void (*fp)());
d124 1
a124 1
static int nullf_write(BIO *b, char *in, int inl)
d136 1
a136 1
static long nullf_ctrl(BIO *b, int cmd, long num, char *ptr)
d157 1
a157 1
static long nullf_callback_ctrl(BIO *b, int cmd, void (*fp)())
d178 1
a178 1
static int nullf_puts(BIO *bp, char *str)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d75 1
d87 1
d153 14
@


1.1
log
@Initial revision
@
text
@d62 2
a63 2
#include "bio.h"
#include "evp.h"
a67 1
#ifndef NOPROTO
a74 10
#else
static int nullf_write();
static int nullf_read();
static int nullf_puts();
static int nullf_gets();
static long nullf_ctrl();
static int nullf_new();
static int nullf_free();
#endif

d88 1
a88 1
BIO_METHOD *BIO_f_null()
d93 1
a93 2
static int nullf_new(bi)
BIO *bi;
d101 1
a101 2
static int nullf_free(a)
BIO *a;
d110 1
a110 4
static int nullf_read(b,out,outl)
BIO *b;
char *out;
int outl;
d122 1
a122 4
static int nullf_write(b,in,inl)
BIO *b;
char *in;
int inl;
d134 1
a134 5
static long nullf_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d155 1
a155 4
static int nullf_gets(bp,buf,size)
BIO *bp;
char *buf;
int size;
d162 1
a162 3
static int nullf_puts(bp,str)
BIO *bp;
char *str;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 2
a63 1
#include <openssl/bio.h>
d68 6
a73 5
static int nullf_write(BIO *h, const char *buf, int num);
static int nullf_read(BIO *h, char *buf, int size);
static int nullf_puts(BIO *h, const char *str);
static int nullf_gets(BIO *h, char *str, int size);
static long nullf_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d76 10
a85 1
static long nullf_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);
a96 1
	nullf_callback_ctrl,
d99 1
a99 1
BIO_METHOD *BIO_f_null(void)
d104 2
a105 1
static int nullf_new(BIO *bi)
d113 2
a114 1
static int nullf_free(BIO *a)
d123 4
a126 1
static int nullf_read(BIO *b, char *out, int outl)
d138 4
a141 1
static int nullf_write(BIO *b, const char *in, int inl)
d153 5
a157 1
static long nullf_ctrl(BIO *b, int cmd, long num, void *ptr)
d178 4
a181 15
static long nullf_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
	{
	long ret=1;

	if (b->next_bio == NULL) return(0);
	switch (cmd)
		{
	default:
		ret=BIO_callback_ctrl(b->next_bio,cmd,fp);
		break;
		}
	return(ret);
	}

static int nullf_gets(BIO *bp, char *buf, int size)
d188 3
a190 1
static int nullf_puts(BIO *bp, const char *str)
@

