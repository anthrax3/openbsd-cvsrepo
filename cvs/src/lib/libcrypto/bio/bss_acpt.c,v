head	1.27;
access;
symbols;
locks; strict;
comment	@ * @;


1.27
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.26;
commitid	kT0fLt3r4lroFJra;

1.26
date	2015.07.18.22.09.30;	author beck;	state Exp;
branches;
next	1.25;
commitid	ZYgCBPLrQAPuP4OC;

1.25
date	2014.07.25.06.05.32;	author doug;	state Exp;
branches;
next	1.24;
commitid	DnBLYuKKjvrWeH3R;

1.24
date	2014.07.13.16.03.09;	author beck;	state Exp;
branches;
next	1.23;
commitid	6xdvCwSqBadTW6X3;

1.23
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.22;
commitid	yQEL1wOWIearrW15;

1.22
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.21;
commitid	id8dTrTMtnTn4fqt;

1.21
date	2014.06.12.15.49.28;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	mJUVYpkFBZ0Zv2bG;

1.20
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.27.20.26.48;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.21.11.12.49;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.21.41.15;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.11.33.33;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.17.50.45;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.19.42.24;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.15.16.37.21;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.23.58.18;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.13.23.31.37;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.49;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.17;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.09.08;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.40;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.36;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.55;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.41;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.04;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: bss_acpt.c,v 1.26 2015/07/18 22:09:30 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <sys/socket.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <openssl/bio.h>
#include <openssl/buffer.h>
#include <openssl/err.h>

#define SOCKET_PROTOCOL IPPROTO_TCP

typedef struct bio_accept_st {
	int state;
	char *param_addr;

	int accept_sock;
	int accept_nbio;

	char *addr;
	int nbio;
	/* If 0, it means normal, if 1, do a connect on bind failure,
	 * and if there is no-one listening, bind with SO_REUSEADDR.
	 * If 2, always use SO_REUSEADDR. */
	int bind_mode;
	BIO *bio_chain;
} BIO_ACCEPT;

static int acpt_write(BIO *h, const char *buf, int num);
static int acpt_read(BIO *h, char *buf, int size);
static int acpt_puts(BIO *h, const char *str);
static long acpt_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int acpt_new(BIO *h);
static int acpt_free(BIO *data);
static int acpt_state(BIO *b, BIO_ACCEPT *c);
static void acpt_close_socket(BIO *data);
static BIO_ACCEPT *BIO_ACCEPT_new(void );
static void BIO_ACCEPT_free(BIO_ACCEPT *a);

#define ACPT_S_BEFORE			1
#define ACPT_S_GET_ACCEPT_SOCKET	2
#define ACPT_S_OK			3

static BIO_METHOD methods_acceptp = {
	.type = BIO_TYPE_ACCEPT,
	.name = "socket accept",
	.bwrite = acpt_write,
	.bread = acpt_read,
	.bputs = acpt_puts,
	.ctrl = acpt_ctrl,
	.create = acpt_new,
	.destroy = acpt_free
};

BIO_METHOD *
BIO_s_accept(void)
{
	return (&methods_acceptp);
}

static int
acpt_new(BIO *bi)
{
	BIO_ACCEPT *ba;

	bi->init = 0;
	bi->num = -1;
	bi->flags = 0;
	if ((ba = BIO_ACCEPT_new()) == NULL)
		return (0);
	bi->ptr = (char *)ba;
	ba->state = ACPT_S_BEFORE;
	bi->shutdown = 1;
	return (1);
}

static BIO_ACCEPT *
BIO_ACCEPT_new(void)
{
	BIO_ACCEPT *ret;

	if ((ret = calloc(1, sizeof(BIO_ACCEPT))) == NULL)
		return (NULL);
	ret->accept_sock = -1;
	ret->bind_mode = BIO_BIND_NORMAL;
	return (ret);
}

static void
BIO_ACCEPT_free(BIO_ACCEPT *a)
{
	if (a == NULL)
		return;

	free(a->param_addr);
	free(a->addr);
	BIO_free(a->bio_chain);
	free(a);
}

static void
acpt_close_socket(BIO *bio)
{
	BIO_ACCEPT *c;

	c = (BIO_ACCEPT *)bio->ptr;
	if (c->accept_sock != -1) {
		shutdown(c->accept_sock, SHUT_RDWR);
		close(c->accept_sock);
		c->accept_sock = -1;
		bio->num = -1;
	}
}

static int
acpt_free(BIO *a)
{
	BIO_ACCEPT *data;

	if (a == NULL)
		return (0);
	data = (BIO_ACCEPT *)a->ptr;

	if (a->shutdown) {
		acpt_close_socket(a);
		BIO_ACCEPT_free(data);
		a->ptr = NULL;
		a->flags = 0;
		a->init = 0;
	}
	return (1);
}

static int
acpt_state(BIO *b, BIO_ACCEPT *c)
{
	BIO *bio = NULL, *dbio;
	int s = -1;
	int i;

again:
	switch (c->state) {
	case ACPT_S_BEFORE:
		if (c->param_addr == NULL) {
			BIOerror(BIO_R_NO_ACCEPT_PORT_SPECIFIED);
			return (-1);
		}
		s = BIO_get_accept_socket(c->param_addr, c->bind_mode);
		if (s == -1)
			return (-1);

		if (c->accept_nbio) {
			if (!BIO_socket_nbio(s, 1)) {
				close(s);
				BIOerror(BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET);
				return (-1);
			}
		}
		c->accept_sock = s;
		b->num = s;
		c->state = ACPT_S_GET_ACCEPT_SOCKET;
		return (1);
		/* break; */
	case ACPT_S_GET_ACCEPT_SOCKET:
		if (b->next_bio != NULL) {
			c->state = ACPT_S_OK;
			goto again;
		}
		BIO_clear_retry_flags(b);
		b->retry_reason = 0;
		i = BIO_accept(c->accept_sock, &(c->addr));

		/* -2 return means we should retry */
		if (i == -2) {
			BIO_set_retry_special(b);
			b->retry_reason = BIO_RR_ACCEPT;
			return -1;
		}

		if (i < 0)
			return (i);

		bio = BIO_new_socket(i, BIO_CLOSE);
		if (bio == NULL)
			goto err;

		BIO_set_callback(bio, BIO_get_callback(b));
		BIO_set_callback_arg(bio, BIO_get_callback_arg(b));

		if (c->nbio) {
			if (!BIO_socket_nbio(i, 1)) {
				BIOerror(BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET);
				goto err;
			}
		}

		/* If the accept BIO has an bio_chain, we dup it and
		 * put the new socket at the end. */
		if (c->bio_chain != NULL) {
			if ((dbio = BIO_dup_chain(c->bio_chain)) == NULL)
				goto err;
			if (!BIO_push(dbio, bio)) goto err;
				bio = dbio;
		}
		if (BIO_push(b, bio)
			== NULL) goto err;

		c->state = ACPT_S_OK;
		return (1);

err:
		if (bio != NULL)
			BIO_free(bio);
		return (0);
		/* break; */
	case ACPT_S_OK:
		if (b->next_bio == NULL) {
			c->state = ACPT_S_GET_ACCEPT_SOCKET;
			goto again;
		}
		return (1);
		/* break; */
	default:
		return (0);
		/* break; */
	}
}

static int
acpt_read(BIO *b, char *out, int outl)
{
	int ret = 0;
	BIO_ACCEPT *data;

	BIO_clear_retry_flags(b);
	data = (BIO_ACCEPT *)b->ptr;

	while (b->next_bio == NULL) {
		ret = acpt_state(b, data);
		if (ret <= 0)
			return (ret);
	}

	ret = BIO_read(b->next_bio, out, outl);
	BIO_copy_next_retry(b);
	return (ret);
}

static int
acpt_write(BIO *b, const char *in, int inl)
{
	int ret;
	BIO_ACCEPT *data;

	BIO_clear_retry_flags(b);
	data = (BIO_ACCEPT *)b->ptr;

	while (b->next_bio == NULL) {
		ret = acpt_state(b, data);
		if (ret <= 0)
			return (ret);
	}

	ret = BIO_write(b->next_bio, in, inl);
	BIO_copy_next_retry(b);
	return (ret);
}

static long
acpt_ctrl(BIO *b, int cmd, long num, void *ptr)
{
	int *ip;
	long ret = 1;
	BIO_ACCEPT *data;
	char **pp;

	data = (BIO_ACCEPT *)b->ptr;

	switch (cmd) {
	case BIO_CTRL_RESET:
		ret = 0;
		data->state = ACPT_S_BEFORE;
		acpt_close_socket(b);
		b->flags = 0;
		break;
	case BIO_C_DO_STATE_MACHINE:
		/* use this one to start the connection */
		ret = (long)acpt_state(b, data);
		break;
	case BIO_C_SET_ACCEPT:
		if (ptr != NULL) {
			if (num == 0) {
				b->init = 1;
				free(data->param_addr);
				data->param_addr = strdup(ptr);
			} else if (num == 1) {
				data->accept_nbio = (ptr != NULL);
			} else if (num == 2) {
				BIO_free(data->bio_chain);
				data->bio_chain = (BIO *)ptr;
			}
		}
		break;
	case BIO_C_SET_NBIO:
		data->nbio = (int)num;
		break;
	case BIO_C_SET_FD:
		b->init = 1;
		b->num= *((int *)ptr);
		data->accept_sock = b->num;
		data->state = ACPT_S_GET_ACCEPT_SOCKET;
		b->shutdown = (int)num;
		b->init = 1;
		break;
	case BIO_C_GET_FD:
		if (b->init) {
			ip = (int *)ptr;
			if (ip != NULL)
				*ip = data->accept_sock;
			ret = data->accept_sock;
		} else
			ret = -1;
		break;
	case BIO_C_GET_ACCEPT:
		if (b->init) {
			if (ptr != NULL) {
				pp = (char **)ptr;
				*pp = data->param_addr;
			} else
				ret = -1;
		} else
			ret = -1;
		break;
	case BIO_CTRL_GET_CLOSE:
		ret = b->shutdown;
		break;
	case BIO_CTRL_SET_CLOSE:
		b->shutdown = (int)num;
		break;
	case BIO_CTRL_PENDING:
	case BIO_CTRL_WPENDING:
		ret = 0;
		break;
	case BIO_CTRL_FLUSH:
		break;
	case BIO_C_SET_BIND_MODE:
		data->bind_mode = (int)num;
		break;
	case BIO_C_GET_BIND_MODE:
		ret = (long)data->bind_mode;
		break;
	case BIO_CTRL_DUP:
/*		dbio=(BIO *)ptr;
		if (data->param_port) EAY EAY
			BIO_set_port(dbio,data->param_port);
		if (data->param_hostname)
			BIO_set_hostname(dbio,data->param_hostname);
		BIO_set_nbio(dbio,data->nbio);
*/
		break;

	default:
		ret = 0;
		break;
	}
	return (ret);
}

static int
acpt_puts(BIO *bp, const char *str)
{
	int n, ret;

	n = strlen(str);
	ret = acpt_write(bp, str, n);
	return (ret);
}

BIO *
BIO_new_accept(char *str)
{
	BIO *ret;

	ret = BIO_new(BIO_s_accept());
	if (ret == NULL)
		return (NULL);
	if (BIO_set_accept_port(ret, str))
		return (ret);
	else {
		BIO_free(ret);
		return (NULL);
	}
}

@


1.26
log
@Dead code, Coverity 78798
ok bcook@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_acpt.c,v 1.25 2014/07/25 06:05:32 doug Exp $ */
d204 1
a204 1
			BIOerr(BIO_F_ACPT_STATE, BIO_R_NO_ACCEPT_PORT_SPECIFIED);
d214 1
a214 1
				BIOerr(BIO_F_ACPT_STATE, BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET);
d251 1
a251 1
				BIOerr(BIO_F_ACPT_STATE, BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET);
@


1.25
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_acpt.c,v 1.24 2014/07/13 16:03:09 beck Exp $ */
a272 2
		else if (s >= 0)
			close(s);
@


1.24
log
@The bell tolls for BUF_strdup - Start the migration to using
intrinsics. This is the easy ones, a few left to check one at
a time.
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_acpt.c,v 1.23 2014/07/11 08:44:47 jsing Exp $ */
d156 1
a156 2
	if (a->bio_chain != NULL)
		BIO_free(a->bio_chain);
d360 1
a360 2
				if (data->bio_chain != NULL)
					BIO_free(data->bio_chain);
@


1.23
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_acpt.c,v 1.22 2014/07/10 13:58:22 jsing Exp $ */
d357 1
a357 1
				data->param_addr = BUF_strdup(ptr);
@


1.22
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bss_acpt.c,v 1.21 2014/06/12 15:49:28 deraadt Exp $ */
a65 1
#include "cryptlib.h"
d67 2
@


1.21
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 3
d63 1
a63 1
#include <errno.h>
d65 1
a67 2
#include <sys/socket.h>

@


1.20
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/bio/bss_acpt.c */
@


1.19
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d151 2
a152 4
	if (a->param_addr != NULL)
		free(a->param_addr);
	if (a->addr != NULL)
		free(a->addr);
d353 1
a353 2
				if (data->param_addr != NULL)
					free(data->param_addr);
@


1.18
log
@Bring malloc/calloc/realloc sequences to modern standard
ok guenther
@
text
@d101 8
a108 10
	BIO_TYPE_ACCEPT,
	"socket accept",
	acpt_write,
	acpt_read,
	acpt_puts,
	NULL, /* connect_gets, */
	acpt_ctrl,
	acpt_new,
	acpt_free,
	NULL,
@


1.17
log
@unifdef NO_SOCK
@
text
@d140 1
a140 1
	if ((ret = (BIO_ACCEPT *)malloc(sizeof(BIO_ACCEPT))) == NULL)
a141 2

	memset(ret, 0, sizeof(BIO_ACCEPT));
@


1.16
log
@unistd.h for protos where needed
@
text
@a65 1
#ifndef OPENSSL_NO_SOCK
a461 1
#endif
@


1.15
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d61 1
@


1.14
log
@some KNF cleanup following the script
@
text
@a60 1
#define USE_SOCKETS
d63 1
@


1.13
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d113 2
a114 2
BIO_METHOD
*BIO_s_accept(void)
d135 2
a136 2
static BIO_ACCEPT
*BIO_ACCEPT_new(void)
d446 2
a447 2
BIO
*BIO_new_accept(char *str)
@


1.12
log
@> As I walk through the valley of the shadow of death
> I take a look at my life and realize there's nothin' left
> Cause I've been blasting and laughing so long,
> That even my mama thinks that my mind is gone
Remove even more unspeakable evil being perpetuated in the name of VMS.
(and lesser evils done in the name of others.)
ok miod
@
text
@d140 1
a140 1
	if ((ret = (BIO_ACCEPT *)OPENSSL_malloc(sizeof(BIO_ACCEPT))) == NULL)
d156 1
a156 1
		OPENSSL_free(a->param_addr);
d158 1
a158 1
		OPENSSL_free(a->addr);
d161 1
a161 1
	OPENSSL_free(a);
d360 1
a360 1
					OPENSSL_free(data->param_addr);
@


1.11
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@a66 3
#ifdef OPENSSL_SYS_WIN16
#define SOCKET_PROTOCOL 0 /* more microsoft stupidity */
#else
a67 6
#endif

#if (defined(OPENSSL_SYS_VMS) && __VMS_VER < 70000000)
/* FIONBIO used as a switch to enable ioctl, and that isn't in VMS < 7.0 */
#undef FIONBIO
#endif
@


1.10
log
@Use shutdown(s, SHUT_RDWR) instead of shutdown(s, 2).

ok beck deraadt
@
text
@d78 1
a78 2
typedef struct bio_accept_st
	{
d92 1
a92 1
	} BIO_ACCEPT;
d109 1
a109 2
static BIO_METHOD methods_acceptp=
	{
d120 1
a120 1
	};
d122 9
a130 7
BIO_METHOD *BIO_s_accept(void)
	{
	return(&methods_acceptp);
	}

static int acpt_new(BIO *bi)
	{
d133 14
a146 13
	bi->init=0;
	bi->num=-1;
	bi->flags=0;
	if ((ba=BIO_ACCEPT_new()) == NULL)
		return(0);
	bi->ptr=(char *)ba;
	ba->state=ACPT_S_BEFORE;
	bi->shutdown=1;
	return(1);
	}

static BIO_ACCEPT *BIO_ACCEPT_new(void)
	{
d149 2
a150 8
	if ((ret=(BIO_ACCEPT *)OPENSSL_malloc(sizeof(BIO_ACCEPT))) == NULL)
		return(NULL);

	memset(ret,0,sizeof(BIO_ACCEPT));
	ret->accept_sock=-1;
	ret->bind_mode=BIO_BIND_NORMAL;
	return(ret);
	}
d152 18
a169 8
static void BIO_ACCEPT_free(BIO_ACCEPT *a)
	{
	if(a == NULL)
	    return;

	if (a->param_addr != NULL) OPENSSL_free(a->param_addr);
	if (a->addr != NULL) OPENSSL_free(a->addr);
	if (a->bio_chain != NULL) BIO_free(a->bio_chain);
d171 1
a171 1
	}
d173 3
a175 2
static void acpt_close_socket(BIO *bio)
	{
d178 2
a179 3
	c=(BIO_ACCEPT *)bio->ptr;
	if (c->accept_sock != -1)
		{
d182 2
a183 3
		c->accept_sock=-1;
		bio->num=-1;
		}
d185 1
d187 3
a189 2
static int acpt_free(BIO *a)
	{
d192 5
a196 5
	if (a == NULL) return(0);
	data=(BIO_ACCEPT *)a->ptr;
	 
	if (a->shutdown)
		{
d199 12
a210 11
		a->ptr=NULL;
		a->flags=0;
		a->init=0;
		}
	return(1);
	}
	
static int acpt_state(BIO *b, BIO_ACCEPT *c)
	{
	BIO *bio=NULL,*dbio;
	int s= -1;
d214 1
a214 2
	switch (c->state)
		{
d216 5
a220 6
		if (c->param_addr == NULL)
			{
			BIOerr(BIO_F_ACPT_STATE,BIO_R_NO_ACCEPT_PORT_SPECIFIED);
			return(-1);
			}
		s=BIO_get_accept_socket(c->param_addr,c->bind_mode);
d222 1
a222 1
			return(-1);
d224 2
a225 4
		if (c->accept_nbio)
			{
			if (!BIO_socket_nbio(s,1))
				{
d227 2
a228 3
				BIOerr(BIO_F_ACPT_STATE,BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET);
				return(-1);
				}
d230 5
a234 4
		c->accept_sock=s;
		b->num=s;
		c->state=ACPT_S_GET_ACCEPT_SOCKET;
		return(1);
d237 2
a238 3
		if (b->next_bio != NULL)
			{
			c->state=ACPT_S_OK;
d240 1
a240 1
			}
d242 2
a243 2
		b->retry_reason=0;
		i=BIO_accept(c->accept_sock,&(c->addr));
d246 1
a246 2
		if(i == -2)
			{
d248 1
a248 1
			b->retry_reason=BIO_RR_ACCEPT;
d250 1
a250 3
			}

		if (i < 0) return(i);
d252 2
a253 2
		bio=BIO_new_socket(i,BIO_CLOSE);
		if (bio == NULL) goto err;
d255 10
a264 8
		BIO_set_callback(bio,BIO_get_callback(b));
		BIO_set_callback_arg(bio,BIO_get_callback_arg(b));

		if (c->nbio)
			{
			if (!BIO_socket_nbio(i,1))
				{
				BIOerr(BIO_F_ACPT_STATE,BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET);
a265 1
				}
d267 1
d271 2
a272 3
		if (c->bio_chain != NULL)
			{
			if ((dbio=BIO_dup_chain(c->bio_chain)) == NULL)
d274 8
a281 4
			if (!BIO_push(dbio,bio)) goto err;
			bio=dbio;
			}
		if (BIO_push(b,bio) == NULL) goto err;
a282 2
		c->state=ACPT_S_OK;
		return(1);
d288 1
a288 1
		return(0);
d291 2
a292 3
		if (b->next_bio == NULL)
			{
			c->state=ACPT_S_GET_ACCEPT_SOCKET;
d294 2
a295 2
			}
		return(1);
d297 2
a298 2
	default:	
		return(0);
a299 2
		}

d301 1
d303 4
a306 3
static int acpt_read(BIO *b, char *out, int outl)
	{
	int ret=0;
d310 1
a310 1
	data=(BIO_ACCEPT *)b->ptr;
d312 5
a316 5
	while (b->next_bio == NULL)
		{
		ret=acpt_state(b,data);
		if (ret <= 0) return(ret);
		}
d318 1
a318 1
	ret=BIO_read(b->next_bio,out,outl);
d320 2
a321 2
	return(ret);
	}
d323 3
a325 2
static int acpt_write(BIO *b, const char *in, int inl)
	{
d330 1
a330 1
	data=(BIO_ACCEPT *)b->ptr;
d332 5
a336 5
	while (b->next_bio == NULL)
		{
		ret=acpt_state(b,data);
		if (ret <= 0) return(ret);
		}
d338 1
a338 1
	ret=BIO_write(b->next_bio,in,inl);
d340 2
a341 2
	return(ret);
	}
d343 3
a345 2
static long acpt_ctrl(BIO *b, int cmd, long num, void *ptr)
	{
d347 1
a347 1
	long ret=1;
d351 1
a351 1
	data=(BIO_ACCEPT *)b->ptr;
d353 1
a353 2
	switch (cmd)
		{
d355 2
a356 2
		ret=0;
		data->state=ACPT_S_BEFORE;
d358 1
a358 1
		b->flags=0;
d362 1
a362 1
		ret=(long)acpt_state(b,data);
d365 3
a367 5
		if (ptr != NULL)
			{
			if (num == 0)
				{
				b->init=1;
d370 4
a373 8
				data->param_addr=BUF_strdup(ptr);
				}
			else if (num == 1)
				{
				data->accept_nbio=(ptr != NULL);
				}
			else if (num == 2)
				{
d376 1
a376 2
				data->bio_chain=(BIO *)ptr;
				}
d378 1
d381 1
a381 1
		data->nbio=(int)num;
d384 1
a384 1
		b->init=1;
d386 4
a389 4
		data->accept_sock=b->num;
		data->state=ACPT_S_GET_ACCEPT_SOCKET;
		b->shutdown=(int)num;
		b->init=1;
d392 2
a393 3
		if (b->init)
			{
			ip=(int *)ptr;
d395 4
a398 5
				*ip=data->accept_sock;
			ret=data->accept_sock;
			}
		else
			ret= -1;
d401 8
a408 12
		if (b->init)
			{
			if (ptr != NULL)
				{
				pp=(char **)ptr;
				*pp=data->param_addr;
				}
			else
				ret= -1;
			}
		else
			ret= -1;
d411 1
a411 1
		ret=b->shutdown;
d414 1
a414 1
		b->shutdown=(int)num;
d418 1
a418 1
		ret=0;
d423 1
a423 1
		data->bind_mode=(int)num;
d426 1
a426 1
		ret=(long)data->bind_mode;
d434 2
a435 1
		BIO_set_nbio(dbio,data->nbio); */
d439 1
a439 1
		ret=0;
a440 2
		}
	return(ret);
d442 7
d450 4
a453 8
static int acpt_puts(BIO *bp, const char *str)
	{
	int n,ret;

	n=strlen(str);
	ret=acpt_write(bp,str,n);
	return(ret);
	}
d455 3
a457 2
BIO *BIO_new_accept(char *str)
	{
d460 6
a465 6
	ret=BIO_new(BIO_s_accept());
	if (ret == NULL) return(NULL);
	if (BIO_set_accept_port(ret,str))
		return(ret);
	else
		{
d467 1
a467 2
		return(NULL);
		}
d469 1
@


1.9
log
@Remove various horrible socket syscall wrappers, especially SHUTDOWN*
which did shutdown + close, all nasty and surprising.  Use the raw
syscalls that everyone knows the behaviour of.
ok beck matthew
@
text
@d175 1
a175 1
		shutdown(c->accept_sock,2);
@


1.8
log
@openssl-1.0.0e: resolve conflicts
@
text
@d134 1
a134 1
	bi->num=INVALID_SOCKET;
d152 1
a152 1
	ret->accept_sock=INVALID_SOCKET;
d173 1
a173 1
	if (c->accept_sock != INVALID_SOCKET)
d176 3
a178 3
		closesocket(c->accept_sock);
		c->accept_sock=INVALID_SOCKET;
		bio->num=INVALID_SOCKET;
d216 1
a216 1
		if (s == INVALID_SOCKET)
d223 1
a223 1
				closesocket(s);
d285 1
a285 1
			closesocket(s);
@


1.7
log
@resolve conflicts, fix local changes
@
text
@a342 1
	BIO *dbio;
d439 2
a440 2
		dbio=(BIO *)ptr;
/*		if (data->param_port) EAY EAY
@


1.6
log
@resolve conflicts
@
text
@d103 2
a104 2
BIO_ACCEPT *BIO_ACCEPT_new(void );
void BIO_ACCEPT_free(BIO_ACCEPT *a);
d144 1
a144 1
BIO_ACCEPT *BIO_ACCEPT_new(void)
d157 1
a157 1
void BIO_ACCEPT_free(BIO_ACCEPT *a)
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a58 2
#ifndef OPENSSL_NO_SOCK

d64 2
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_SOCK
d67 1
a67 1
#ifdef WIN16
d73 1
a73 1
#if (defined(VMS) && __VMS_VER < 70000000)
d239 2
d242 9
d252 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d95 4
a98 4
static int acpt_write(BIO *h,char *buf,int num);
static int acpt_read(BIO *h,char *buf,int size);
static int acpt_puts(BIO *h,char *str);
static long acpt_ctrl(BIO *h,int cmd,long arg1,char *arg2);
d148 1
a148 1
	if ((ret=(BIO_ACCEPT *)Malloc(sizeof(BIO_ACCEPT))) == NULL)
d162 2
a163 2
	if (a->param_addr != NULL) Free(a->param_addr);
	if (a->addr != NULL) Free(a->addr);
d165 1
a165 1
	Free(a);
d310 1
a310 1
static int acpt_write(BIO *b, char *in, int inl)
d329 1
a329 1
static long acpt_ctrl(BIO *b, int cmd, long num, char *ptr)
d358 1
a358 1
					Free(data->param_addr);
d443 1
a443 1
static int acpt_puts(BIO *bp, char *str)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d121 1
@


1.1
log
@Initial revision
@
text
@d65 1
a65 3
#include "bio.h"

/*	BIOerr(BIO_F_WSASTARTUP,BIO_R_WSASTARTUP ); */
d73 5
d88 4
a94 1
#ifndef NOPROTO
a100 10
#else
static int acpt_write();
static int acpt_read();
static int acpt_puts();
static long acpt_ctrl();
static int acpt_new();
static int acpt_free();
#endif

#ifndef NOPROTO
a105 8
#else

static int acpt_state();
static void acpt_close_socket();
BIO_ACCEPT *BIO_ACCEPT_new();
void BIO_ACCEPT_free();
#endif

d123 1
a123 1
BIO_METHOD *BIO_s_accept()
d128 1
a128 2
static int acpt_new(bi)
BIO *bi;
d143 1
a143 1
BIO_ACCEPT *BIO_ACCEPT_new()
d152 1
d156 1
a156 2
void BIO_ACCEPT_free(a)
BIO_ACCEPT *a;
d158 3
d167 1
a167 2
static void acpt_close_socket(bio)
BIO *bio;
a174 1
# ifdef WINDOWS
a175 3
# else
		close(c->accept_sock);
# endif
d181 1
a181 2
static int acpt_free(a)
BIO *a;
d199 1
a199 3
static int acpt_state(b,c)
BIO *b;
BIO_ACCEPT *c;
a201 1
	unsigned long l=1;
d214 1
a214 1
		s=BIO_get_accept_socket(c->param_addr);
a217 1
#ifdef FIONBIO
d220 1
a220 2
			i=BIO_socket_ioctl(b->num,FIONBIO,&l);
			if (i < 0)
a221 1
#ifdef WINDOWS
a222 3
#else
				close(s);
# endif
a226 1
#endif
d231 1
a231 1
		break;
a245 1
#ifdef FIONBIO
d248 1
a248 2
			i=BIO_socket_ioctl(i,FIONBIO,&l);
			if (i < 0)
a253 1
#endif
a271 2
			{
#ifdef WINDOWS
a272 4
#else
			close(s);
# endif
			}
d274 1
a274 1
		break;
d282 1
a282 1
		break;
d285 1
a285 1
		break;
d290 1
a290 4
static int acpt_read(b,out,outl)
BIO *b;
char *out;
int outl;
d295 1
a295 1
        BIO_clear_retry_flags(b);
d309 1
a309 4
static int acpt_write(b,in,inl)
BIO *b;
char *in;
int inl;
d328 1
a328 5
static long acpt_ctrl(b,cmd,num,ptr)
BIO *b;
int cmd;
long num;
char *ptr;
d375 8
d389 1
a389 1
			ret=b->num;
d420 6
d442 1
a442 3
static int acpt_puts(bp,str)
BIO *bp;
char *str;
d451 1
a451 2
BIO *BIO_new_accept(str)
char *str;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
#ifndef OPENSSL_NO_SOCK
d65 1
a65 1
#include <openssl/bio.h>
d67 3
a69 1
#ifdef OPENSSL_SYS_WIN16
a74 5
#if (defined(OPENSSL_SYS_VMS) && __VMS_VER < 70000000)
/* FIONBIO used as a switch to enable ioctl, and that isn't in VMS < 7.0 */
#undef FIONBIO
#endif

a84 4
	/* If 0, it means normal, if 1, do a connect on bind failure,
	 * and if there is no-one listening, bind with SO_REUSEADDR.
	 * If 2, always use SO_REUSEADDR. */
	int bind_mode;
d88 5
a92 4
static int acpt_write(BIO *h, const char *buf, int num);
static int acpt_read(BIO *h, char *buf, int size);
static int acpt_puts(BIO *h, const char *str);
static long acpt_ctrl(BIO *h, int cmd, long arg1, void *arg2);
d95 10
d110 8
a132 1
	NULL,
d135 1
a135 1
BIO_METHOD *BIO_s_accept(void)
d140 2
a141 1
static int acpt_new(BIO *bi)
d156 1
a156 1
BIO_ACCEPT *BIO_ACCEPT_new(void)
d160 1
a160 1
	if ((ret=(BIO_ACCEPT *)OPENSSL_malloc(sizeof(BIO_ACCEPT))) == NULL)
a164 1
	ret->bind_mode=BIO_BIND_NORMAL;
d168 2
a169 1
void BIO_ACCEPT_free(BIO_ACCEPT *a)
d171 2
a172 5
	if(a == NULL)
	    return;

	if (a->param_addr != NULL) OPENSSL_free(a->param_addr);
	if (a->addr != NULL) OPENSSL_free(a->addr);
d174 1
a174 1
	OPENSSL_free(a);
d177 2
a178 1
static void acpt_close_socket(BIO *bio)
d186 1
d188 3
d196 2
a197 1
static int acpt_free(BIO *a)
d215 3
a217 1
static int acpt_state(BIO *b, BIO_ACCEPT *c)
d220 1
d233 1
a233 1
		s=BIO_get_accept_socket(c->param_addr,c->bind_mode);
d237 1
d240 2
a241 1
			if (!BIO_socket_nbio(s,1))
d243 1
d245 3
d252 1
d257 1
a257 1
		/* break; */
a263 2
		BIO_clear_retry_flags(b);
		b->retry_reason=0;
a264 9

		/* -2 return means we should retry */
		if(i == -2)
			{
			BIO_set_retry_special(b);
			b->retry_reason=BIO_RR_ACCEPT;
			return -1;
			}

a265 1

d272 1
d275 2
a276 1
			if (!BIO_socket_nbio(i,1))
d282 1
d301 2
d304 4
d309 1
a309 1
		/* break; */
d317 1
a317 1
		/* break; */
d320 1
a320 1
		/* break; */
d325 4
a328 1
static int acpt_read(BIO *b, char *out, int outl)
d333 1
a333 1
	BIO_clear_retry_flags(b);
d347 4
a350 1
static int acpt_write(BIO *b, const char *in, int inl)
d369 5
a373 1
static long acpt_ctrl(BIO *b, int cmd, long num, void *ptr)
d402 1
a402 1
					OPENSSL_free(data->param_addr);
a419 8
	case BIO_C_SET_FD:
		b->init=1;
		b->num= *((int *)ptr);
		data->accept_sock=b->num;
		data->state=ACPT_S_GET_ACCEPT_SOCKET;
		b->shutdown=(int)num;
		b->init=1;
		break;
d426 1
a426 1
			ret=data->accept_sock;
a456 6
	case BIO_C_SET_BIND_MODE:
		data->bind_mode=(int)num;
		break;
	case BIO_C_GET_BIND_MODE:
		ret=(long)data->bind_mode;
		break;
d473 3
a475 1
static int acpt_puts(BIO *bp, const char *str)
d484 2
a485 1
BIO *BIO_new_accept(char *str)
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d59 2
a65 2

#ifndef OPENSSL_NO_SOCK
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d103 2
a104 2
static BIO_ACCEPT *BIO_ACCEPT_new(void );
static void BIO_ACCEPT_free(BIO_ACCEPT *a);
d144 1
a144 1
static BIO_ACCEPT *BIO_ACCEPT_new(void)
d157 1
a157 1
static void BIO_ACCEPT_free(BIO_ACCEPT *a)
@


1.1.1.5
log
@import OpenSSL 1.0.0e
@
text
@d343 1
d440 2
a441 2
/*		dbio=(BIO *)ptr;
		if (data->param_port) EAY EAY
@


