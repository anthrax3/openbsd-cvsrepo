head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2016.06.30.12.19.51;	author bcook;	state Exp;
branches;
next	1.10;
commitid	i3e1WtN79Kb2DraF;

1.10
date	2016.01.04.02.04.56;	author bcook;	state Exp;
branches;
next	1.9;
commitid	bkbe3AYQpZkdia99;

1.9
date	2015.01.15.06.57.18;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	tyVERtGyihL3aYUT;

1.8
date	2014.08.13.06.04.10;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	lKCwLxG5kMG1tDhm;

1.7
date	2014.07.20.20.51.13;	author bcook;	state Exp;
branches;
next	1.6;
commitid	99nqJdTNZvoMsFK8;

1.6
date	2014.07.19.15.29.25;	author bcook;	state Exp;
branches;
next	1.5;
commitid	xx7yTCpr9CaS1GDw;

1.5
date	2014.07.19.14.34.38;	author bcook;	state Exp;
branches;
next	1.4;
commitid	XDlvpGd2K1Fpwrg4;

1.4
date	2014.07.19.13.02.28;	author bcook;	state Exp;
branches;
next	1.3;
commitid	MmxUdQzJDisAopLR;

1.3
date	2014.07.19.00.08.43;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	FxTsJE4zngOJloti;

1.2
date	2014.07.18.21.40.54;	author matthew;	state Exp;
branches;
next	1.1;
commitid	DLLKmwoFaloHS6XW;

1.1
date	2014.07.18.02.05.55;	author deraadt;	state Exp;
branches;
next	;
commitid	Po6pVMKYRqxYo64p;


desc
@@


1.11
log
@Tighten behavior of _rs_allocate failure for portable arc4random implementations.

In the event of a failure in _rs_allocate for rsx, we still have a reference to
freed memory for rs on return. Not a huge deal since we subsequently abort in
_rs_init, but it looks strange on its own.

ok deraadt@@
@
text
@/*	$OpenBSD: arc4random_linux.h,v 1.10 2016/01/04 02:04:56 bcook Exp $	*/

/*
 * Copyright (c) 1996, David Mazieres <dm@@uun.org>
 * Copyright (c) 2008, Damien Miller <djm@@openbsd.org>
 * Copyright (c) 2013, Markus Friedl <markus@@openbsd.org>
 * Copyright (c) 2014, Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Stub functions for portability.
 */

#include <sys/mman.h>

#include <pthread.h>
#include <signal.h>

static pthread_mutex_t arc4random_mtx = PTHREAD_MUTEX_INITIALIZER;
#define _ARC4_LOCK()   pthread_mutex_lock(&arc4random_mtx)
#define _ARC4_UNLOCK() pthread_mutex_unlock(&arc4random_mtx)

#ifdef __GLIBC__
extern void *__dso_handle;
extern int __register_atfork(void (*)(void), void(*)(void), void (*)(void), void *);
#define _ARC4_ATFORK(f) __register_atfork(NULL, NULL, (f), __dso_handle)
#else
#define _ARC4_ATFORK(f) pthread_atfork(NULL, NULL, (f))
#endif

static inline void
_getentropy_fail(void)
{
	raise(SIGKILL);
}

static volatile sig_atomic_t _rs_forked;

static inline void
_rs_forkhandler(void)
{
	_rs_forked = 1;
}

static inline void
_rs_forkdetect(void)
{
	static pid_t _rs_pid = 0;
	pid_t pid = getpid();

        /* XXX unusual calls to clone() can bypass checks */
	if (_rs_pid == 0 || _rs_pid == 1 || _rs_pid != pid || _rs_forked) {
		_rs_pid = pid;
		_rs_forked = 0;
		if (rs)
			memset(rs, 0, sizeof(*rs));
	}
}

static inline int
_rs_allocate(struct _rs **rsp, struct _rsx **rsxp)
{
	if ((*rsp = mmap(NULL, sizeof(**rsp), PROT_READ|PROT_WRITE,
	    MAP_ANON|MAP_PRIVATE, -1, 0)) == MAP_FAILED)
		return (-1);

	if ((*rsxp = mmap(NULL, sizeof(**rsxp), PROT_READ|PROT_WRITE,
	    MAP_ANON|MAP_PRIVATE, -1, 0)) == MAP_FAILED) {
		munmap(*rsp, sizeof(**rsp));
		*rsp = NULL;
		return (-1);
	}

	_ARC4_ATFORK(_rs_forkhandler);
	return (0);
}
@


1.10
log
@Calling clone(2) with CLONE_NEWPID yields multiple processes with pid=1.

Work around this particular case by reseeding whenever pid=1, but as guenther@@
notes, directly calling clone(2), and then forking to match another pid,
provides other ways to bypass new process detection on Linux.
Hopefully at some point Linux implements something like MAP_INHERIT_ZERO, and
does not invent a corresponding mechanism to subvert it.

Noted by Sebastian Krahmer and the opmsg team.
See http://stealth.openwall.net/crypto/randup.c for a test program.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.9 2015/01/15 06:57:18 deraadt Exp $	*/
d82 1
@


1.9
log
@back in september I did the large abstraction refactoring to allow these
other systems to fit into the same mold, so add copyright
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.8 2014/08/13 06:04:10 deraadt Exp $	*/
d63 2
a64 1
	if (_rs_pid == 0 || _rs_pid != pid || _rs_forked) {
@


1.8
log
@munmap correct object in (extremely unlikely, and effectively terminal)
case of failing to map the 2nd object.
found by Paul Maurers
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.7 2014/07/20 20:51:13 bcook Exp $	*/
d7 1
@


1.7
log
@Move more OS-specific functionality to arc4random.h headers.

Move <sys/mman.h> and raise(SIGKILL) calls to OS-specific headers.
On OpenBSD, move thread_private.h as well to arc4random.h.
On Windows, use TerminateProcess on getentropy failure.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.6 2014/07/19 15:29:25 bcook Exp $	*/
d79 1
a79 1
		munmap(*rsxp, sizeof(**rsxp));
@


1.6
log
@Move _ARC4_ATFORK handlers from thread_private.h in portable.
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.5 2014/07/19 14:34:38 bcook Exp $	*/
d25 2
d28 1
d41 6
@


1.5
log
@move _ARC4_LOCK/UNLOCK primitives from thread_private into OS-specific modules
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.4 2014/07/19 13:02:28 bcook Exp $	*/
d30 8
@


1.4
log
@fixup typos
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.3 2014/07/19 00:08:43 deraadt Exp $	*/
d24 6
@


1.3
log
@Change _rs_allocate so it can combine the two regions (rs and rsx)
into one if a system has an awesome getentropy().  In that case it
is valid to totally throw away the rsx state in the child.  If the
getentropy() is not very good and has a lazy reseed operation, this
combining is a bad idea, and the reseed should probably continue to
use the "something old, something new" mix.  _rs_allocate() can
accomodate either method, but not on the fly.
ok matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.2 2014/07/18 21:40:54 matthew Exp $	*/
a24 17
static inline int
_rs_allocate(struct _rs **rsp, struct _rsx **rsxp)
{
	if ((*rsp = mmap(NULL, sizeof(**rsp), PROT_READ|PROT_WRITE,
	    MAP_ANON|MAP_PRIVATE, -1, 0)) == MAP_FAILED)
		return (-1);

	if ((*rsxp = mmap(NULL, sizeof(**rsxp) PROT_READ|PROT_WRITE,
	    MAP_ANON|MAP_PRIVATE, -1, 0)) == MAP_FAILED) {
		munmap(*rsxp, sizeof(**rsxp);
		return (-1);
	}

	_ARC4_ATFORK(_rs_forkhandler);
	return (0);
}

d45 17
@


1.2
log
@Cleanup portable arc4random fork detection code:

1. Use "len" parameter instead of sizeof(*rs).

2. Simplify the atfork handler to be strictly async signal safe by
simply writing to a global volatile sig_atomic_t object, and then
checking for this in _rs_forkdetect().  (Idea from discussions with
Szabolcs Nagy and Rich Felker.)

3. Use memset(rs, 0, sizeof(*rs)) to match OpenBSD's MAP_INHERIT_ZERO
fork semantics to avoid any skew in behavior across platforms.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_linux.h,v 1.1 2014/07/18 02:05:55 deraadt Exp $	*/
d25 2
a26 2
static inline void *
_rs_allocate(size_t len)
d28 9
a36 1
	void *p;
d38 2
a39 4
	if ((p = mmap(NULL, len, PROT_READ|PROT_WRITE,
	    MAP_ANON|MAP_PRIVATE, -1, 0)) == MAP_FAILED)
		return (NULL);
	return (p);
a62 7

static inline void
_rs_forkdetectsetup(struct _rs *rs, size_t len)
{
	_ARC4_ATFORK(_rs_forkhandler);
}

@


1.1
log
@Seperate arc4random's os-dependent parts into static inline functions,
making it much easier for libressl -portable to fill in the gaps.
ok bcook beck
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.46 2014/07/17 14:30:41 deraadt Exp $	*/
d30 1
a30 1
	if ((p = mmap(NULL, sizeof(*rs), PROT_READ|PROT_WRITE,
d36 2
d41 1
a41 6
	/*
	 * Race-free because we're running single-threaded in a new
	 * address space, and once allocated rs is never deallocated.
	 */
	if (rs)
		rs->rs_count = 0;
d50 1
a50 2
	/* If a system lacks MAP_INHERIT_ZERO, resort to getpid() */
	if (_rs_pid == 0 || _rs_pid != pid) {
d52 1
d54 1
a54 1
			rs->rs_count = 0;
@

