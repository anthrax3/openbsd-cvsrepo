head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2016.06.30.12.17.29;	author bcook;	state Exp;
branches;
next	1.5;
commitid	ju3fk9AZF09hGHjT;

1.5
date	2015.01.15.06.57.18;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	tyVERtGyihL3aYUT;

1.4
date	2014.07.20.20.51.13;	author bcook;	state Exp;
branches;
next	1.3;
commitid	99nqJdTNZvoMsFK8;

1.3
date	2014.07.20.16.59.31;	author bcook;	state Exp;
branches;
next	1.2;
commitid	9yz7o059gazIDJQ2;

1.2
date	2014.07.19.00.08.43;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	FxTsJE4zngOJloti;

1.1
date	2014.07.18.02.05.55;	author deraadt;	state Exp;
branches;
next	;
commitid	Po6pVMKYRqxYo64p;


desc
@@


1.6
log
@Tighten behavior of _rs_allocate on Windows.

For Windows, we are simply using calloc, which has two annoyances:
the memory has more permissions than needed by default, and it comes
from the process heap, which looks like a memory leak since this memory
is rightfully never freed.

This switches _rs_alloc on Windows to use VirtualAlloc, which restricts the
memory to READ|WRITE and keeps the memory out of the process heap.

ok deraadt@@
@
text
@/*	$OpenBSD: arc4random_win.h,v 1.4 2014/07/20 20:51:13 bcook Exp $	*/

/*
 * Copyright (c) 1996, David Mazieres <dm@@uun.org>
 * Copyright (c) 2008, Damien Miller <djm@@openbsd.org>
 * Copyright (c) 2013, Markus Friedl <markus@@openbsd.org>
 * Copyright (c) 2014, Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Stub functions for portability.
 */

#include <windows.h>

static volatile HANDLE arc4random_mtx = NULL;

/*
 * Initialize the mutex on the first lock attempt. On collision, each thread
 * will attempt to allocate a mutex and compare-and-swap it into place as the
 * global mutex. On failure to swap in the global mutex, the mutex is closed.
 */
#define _ARC4_LOCK() { \
	if (!arc4random_mtx) { \
		HANDLE p = CreateMutex(NULL, FALSE, NULL); \
		if (InterlockedCompareExchangePointer((void **)&arc4random_mtx, (void *)p, NULL)) \
			CloseHandle(p); \
	} \
	WaitForSingleObject(arc4random_mtx, INFINITE); \
} \

#define _ARC4_UNLOCK() ReleaseMutex(arc4random_mtx)

static inline void
_getentropy_fail(void)
{
	TerminateProcess(GetCurrentProcess(), 0);
}

static inline int
_rs_allocate(struct _rs **rsp, struct _rsx **rsxp)
{
	*rsp = VirtualAlloc(NULL, sizeof(**rsp),
	    MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	if (*rsp == NULL)
		return (-1);

	*rsxp = VirtualAlloc(NULL, sizeof(**rsxp),
	    MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	if (*rsxp == NULL) {
		VirtualFree(*rsp, 0, MEM_RELEASE);
		*rsp = NULL;
		return (-1);
	}
	return (0);
}

static inline void
_rs_forkhandler(void)
{
}

static inline void
_rs_forkdetect(void)
{
}
@


1.5
log
@back in september I did the large abstraction refactoring to allow these
other systems to fit into the same mold, so add copyright
@
text
@d55 2
a56 1
	*rsp = calloc(1, sizeof(**rsp));
d60 2
a61 1
	*rsxp = calloc(1, sizeof(**rsxp));
d63 2
a64 1
		free(*rsp);
@


1.4
log
@Move more OS-specific functionality to arc4random.h headers.

Move <sys/mman.h> and raise(SIGKILL) calls to OS-specific headers.
On OpenBSD, move thread_private.h as well to arc4random.h.
On Windows, use TerminateProcess on getentropy failure.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_win.h,v 1.3 2014/07/20 16:59:31 bcook Exp $	*/
d7 1
@


1.3
log
@initial win32 ARC4_LOCK/UNLOCK implementation.

It may make sense to later replace this with a Critical Section later.
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_win.h,v 1.2 2014/07/19 00:08:43 deraadt Exp $	*/
d44 6
@


1.2
log
@Change _rs_allocate so it can combine the two regions (rs and rsx)
into one if a system has an awesome getentropy().  In that case it
is valid to totally throw away the rsx state in the child.  If the
getentropy() is not very good and has a lazy reseed operation, this
combining is a bad idea, and the reseed should probably continue to
use the "something old, something new" mix.  _rs_allocate() can
accomodate either method, but not on the fly.
ok matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random_win.h,v 1.1 2014/07/18 02:05:55 deraadt Exp $	*/
d24 20
@


1.1
log
@Seperate arc4random's os-dependent parts into static inline functions,
making it much easier for libressl -portable to fill in the gaps.
ok bcook beck
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4random.c,v 1.46 2014/07/17 14:30:41 deraadt Exp $	*/
d25 2
a26 2
static inline void *
_rs_allocate(size_t len)
d28 10
a37 1
	return calloc(1, sizeof(*rs));
a48 6

static inline void
_rs_forkdetectsetup(struct _rs *rs, size_t len)
{
}

@

