head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2016.09.03.15.24.09;	author bcook;	state Exp;
branches;
next	1.10;
commitid	EMHCxG23yzAYUuRC;

1.10
date	2016.08.07.03.27.21;	author tb;	state Exp;
branches;
next	1.9;
commitid	grLSpvTr68XyHvmT;

1.9
date	2015.09.11.11.52.55;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	iXKQtu2B8x2yh0yk;

1.8
date	2014.07.21.20.19.47;	author guenther;	state Exp;
branches;
next	1.7;
commitid	YSEc9bNwZ5UrloBr;

1.7
date	2014.07.19.16.12.00;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	oWjeTrZBQ00DYH7n;

1.6
date	2014.07.13.13.03.09;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	eGUXBFLD6xH0xZHF;

1.5
date	2014.07.13.08.24.20;	author beck;	state Exp;
branches;
next	1.4;
commitid	OPKo292RVtf5Fu9c;

1.4
date	2014.07.12.20.41.47;	author wouter;	state Exp;
branches;
next	1.3;
commitid	831J69NQ2L1nOM1f;

1.3
date	2014.07.12.14.48.00;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	9t7YNbI3nyfDK65w;

1.2
date	2014.07.09.13.23.15;	author bcook;	state Exp;
branches;
next	1.1;
commitid	3kLHdUEEkQQKPb1W;

1.1
date	2014.07.08.10.45.35;	author beck;	state Exp;
branches;
next	;
commitid	yIoiImIdy47CpwCV;


desc
@@


1.11
log
@add iOS support for getentropy

from Jacob Berkman, ok beck@@
@
text
@/*	$OpenBSD: getentropy_osx.c,v 1.10 2016/08/07 03:27:21 tb Exp $	*/

/*
 * Copyright (c) 2014 Theo de Raadt <deraadt@@openbsd.org>
 * Copyright (c) 2014 Bob Beck <beck@@obtuse.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Emulation of getentropy(2) as documented at:
 * http://man.openbsd.org/getentropy.2
 */

#include <TargetConditionals.h>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/ioctl.h>
#include <sys/resource.h>
#include <sys/syscall.h>
#include <sys/sysctl.h>
#include <sys/statvfs.h>
#include <sys/socket.h>
#include <sys/mount.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <termios.h>
#include <fcntl.h>
#include <signal.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <time.h>
#include <mach/mach_time.h>
#include <mach/mach_host.h>
#include <mach/host_info.h>
#if TARGET_OS_OSX
#include <sys/socketvar.h>
#include <sys/vmmeter.h>
#endif
#include <netinet/in.h>
#include <netinet/tcp.h>
#if TARGET_OS_OSX
#include <netinet/udp.h>
#include <netinet/ip_var.h>
#include <netinet/tcp_var.h>
#include <netinet/udp_var.h>
#endif
#include <CommonCrypto/CommonDigest.h>
#define SHA512_Update(a, b, c)	(CC_SHA512_Update((a), (b), (c)))
#define SHA512_Init(xxx) (CC_SHA512_Init((xxx)))
#define SHA512_Final(xxx, yyy) (CC_SHA512_Final((xxx), (yyy)))
#define SHA512_CTX CC_SHA512_CTX
#define SHA512_DIGEST_LENGTH CC_SHA512_DIGEST_LENGTH

#define REPEAT 5
#define min(a, b) (((a) < (b)) ? (a) : (b))

#define HX(a, b) \
	do { \
		if ((a)) \
			HD(errno); \
		else \
			HD(b); \
	} while (0)

#define HR(x, l) (SHA512_Update(&ctx, (char *)(x), (l)))
#define HD(x)	 (SHA512_Update(&ctx, (char *)&(x), sizeof (x)))
#define HF(x)    (SHA512_Update(&ctx, (char *)&(x), sizeof (void*)))

int	getentropy(void *buf, size_t len);

static int gotdata(char *buf, size_t len);
static int getentropy_urandom(void *buf, size_t len);
static int getentropy_fallback(void *buf, size_t len);

int
getentropy(void *buf, size_t len)
{
	int ret = -1;

	if (len > 256) {
		errno = EIO;
		return (-1);
	}

	/*
	 * Try to get entropy with /dev/urandom
	 *
	 * This can fail if the process is inside a chroot or if file
	 * descriptors are exhausted.
	 */
	ret = getentropy_urandom(buf, len);
	if (ret != -1)
		return (ret);

	/*
	 * Entropy collection via /dev/urandom and sysctl have failed.
	 *
	 * No other API exists for collecting entropy, and we have
	 * no failsafe way to get it on OSX that is not sensitive
	 * to resource exhaustion.
	 *
	 * We have very few options:
	 *     - Even syslog_r is unsafe to call at this low level, so
	 *	 there is no way to alert the user or program.
	 *     - Cannot call abort() because some systems have unsafe
	 *	 corefiles.
	 *     - Could raise(SIGKILL) resulting in silent program termination.
	 *     - Return EIO, to hint that arc4random's stir function
	 *       should raise(SIGKILL)
	 *     - Do the best under the circumstances....
	 *
	 * This code path exists to bring light to the issue that OSX
	 * does not provide a failsafe API for entropy collection.
	 *
	 * We hope this demonstrates that OSX should consider
	 * providing a new failsafe API which works in a chroot or
	 * when file descriptors are exhausted.
	 */
#undef FAIL_INSTEAD_OF_TRYING_FALLBACK
#ifdef FAIL_INSTEAD_OF_TRYING_FALLBACK
	raise(SIGKILL);
#endif
	ret = getentropy_fallback(buf, len);
	if (ret != -1)
		return (ret);

	errno = EIO;
	return (ret);
}

/*
 * Basic sanity checking; wish we could do better.
 */
static int
gotdata(char *buf, size_t len)
{
	char	any_set = 0;
	size_t	i;

	for (i = 0; i < len; ++i)
		any_set |= buf[i];
	if (any_set == 0)
		return (-1);
	return (0);
}

static int
getentropy_urandom(void *buf, size_t len)
{
	struct stat st;
	size_t i;
	int fd, flags;
	int save_errno = errno;

start:

	flags = O_RDONLY;
#ifdef O_NOFOLLOW
	flags |= O_NOFOLLOW;
#endif
#ifdef O_CLOEXEC
	flags |= O_CLOEXEC;
#endif
	fd = open("/dev/urandom", flags, 0);
	if (fd == -1) {
		if (errno == EINTR)
			goto start;
		goto nodevrandom;
	}
#ifndef O_CLOEXEC
	fcntl(fd, F_SETFD, fcntl(fd, F_GETFD) | FD_CLOEXEC);
#endif

	/* Lightly verify that the device node looks sane */
	if (fstat(fd, &st) == -1 || !S_ISCHR(st.st_mode)) {
		close(fd);
		goto nodevrandom;
	}
	for (i = 0; i < len; ) {
		size_t wanted = len - i;
		ssize_t ret = read(fd, (char *)buf + i, wanted);

		if (ret == -1) {
			if (errno == EAGAIN || errno == EINTR)
				continue;
			close(fd);
			goto nodevrandom;
		}
		i += ret;
	}
	close(fd);
	if (gotdata(buf, len) == 0) {
		errno = save_errno;
		return (0);		/* satisfied */
	}
nodevrandom:
	errno = EIO;
	return (-1);
}

#if TARGET_OS_OSX
static int tcpmib[] = { CTL_NET, AF_INET, IPPROTO_TCP, TCPCTL_STATS };
static int udpmib[] = { CTL_NET, AF_INET, IPPROTO_UDP, UDPCTL_STATS };
static int ipmib[] = { CTL_NET, AF_INET, IPPROTO_IP, IPCTL_STATS };
#endif
static int kmib[] = { CTL_KERN, KERN_USRSTACK };
static int hwmib[] = { CTL_HW, HW_USERMEM };

static int
getentropy_fallback(void *buf, size_t len)
{
	uint8_t results[SHA512_DIGEST_LENGTH];
	int save_errno = errno, e, pgs = getpagesize(), faster = 0, repeat;
	static int cnt;
	struct timespec ts;
	struct timeval tv;
	struct rusage ru;
	sigset_t sigset;
	struct stat st;
	SHA512_CTX ctx;
	static pid_t lastpid;
	pid_t pid;
	size_t i, ii, m;
	char *p;
#if TARGET_OS_OSX
	struct tcpstat tcpstat;
	struct udpstat udpstat;
	struct ipstat ipstat;
#endif
	u_int64_t mach_time;
	unsigned int idata;
	void *addr;

	pid = getpid();
	if (lastpid == pid) {
		faster = 1;
		repeat = 2;
	} else {
		faster = 0;
		lastpid = pid;
		repeat = REPEAT;
	}
	for (i = 0; i < len; ) {
		int j;
		SHA512_Init(&ctx);
		for (j = 0; j < repeat; j++) {
			HX((e = gettimeofday(&tv, NULL)) == -1, tv);
			if (e != -1) {
				cnt += (int)tv.tv_sec;
				cnt += (int)tv.tv_usec;
			}

			mach_time = mach_absolute_time();
			HD(mach_time);

			ii = sizeof(addr);
			HX(sysctl(kmib, sizeof(kmib) / sizeof(kmib[0]),
			    &addr, &ii, NULL, 0) == -1, addr);

			ii = sizeof(idata);
			HX(sysctl(hwmib, sizeof(hwmib) / sizeof(hwmib[0]),
			    &idata, &ii, NULL, 0) == -1, idata);

#if TARGET_OS_OSX
			ii = sizeof(tcpstat);
			HX(sysctl(tcpmib, sizeof(tcpmib) / sizeof(tcpmib[0]),
			    &tcpstat, &ii, NULL, 0) == -1, tcpstat);

			ii = sizeof(udpstat);
			HX(sysctl(udpmib, sizeof(udpmib) / sizeof(udpmib[0]),
			    &udpstat, &ii, NULL, 0) == -1, udpstat);

			ii = sizeof(ipstat);
			HX(sysctl(ipmib, sizeof(ipmib) / sizeof(ipmib[0]),
			    &ipstat, &ii, NULL, 0) == -1, ipstat);
#endif

			HX((pid = getpid()) == -1, pid);
			HX((pid = getsid(pid)) == -1, pid);
			HX((pid = getppid()) == -1, pid);
			HX((pid = getpgid(0)) == -1, pid);
			HX((e = getpriority(0, 0)) == -1, e);

			if (!faster) {
				ts.tv_sec = 0;
				ts.tv_nsec = 1;
				(void) nanosleep(&ts, NULL);
			}

			HX(sigpending(&sigset) == -1, sigset);
			HX(sigprocmask(SIG_BLOCK, NULL, &sigset) == -1,
			    sigset);

			HF(getentropy);	/* an addr in this library */
			HF(printf);		/* an addr in libc */
			p = (char *)&p;
			HD(p);		/* an addr on stack */
			p = (char *)&errno;
			HD(p);		/* the addr of errno */

			if (i == 0) {
				struct sockaddr_storage ss;
				struct statvfs stvfs;
				struct termios tios;
				struct statfs stfs;
				socklen_t ssl;
				off_t off;

				/*
				 * Prime-sized mappings encourage fragmentation;
				 * thus exposing some address entropy.
				 */
				struct mm {
					size_t	npg;
					void	*p;
				} mm[] =	 {
					{ 17, MAP_FAILED }, { 3, MAP_FAILED },
					{ 11, MAP_FAILED }, { 2, MAP_FAILED },
					{ 5, MAP_FAILED }, { 3, MAP_FAILED },
					{ 7, MAP_FAILED }, { 1, MAP_FAILED },
					{ 57, MAP_FAILED }, { 3, MAP_FAILED },
					{ 131, MAP_FAILED }, { 1, MAP_FAILED },
				};

				for (m = 0; m < sizeof mm/sizeof(mm[0]); m++) {
					HX(mm[m].p = mmap(NULL,
					    mm[m].npg * pgs,
					    PROT_READ|PROT_WRITE,
					    MAP_PRIVATE|MAP_ANON, -1,
					    (off_t)0), mm[m].p);
					if (mm[m].p != MAP_FAILED) {
						size_t mo;

						/* Touch some memory... */
						p = mm[m].p;
						mo = cnt %
						    (mm[m].npg * pgs - 1);
						p[mo] = 1;
						cnt += (int)((long)(mm[m].p)
						    / pgs);
					}

					/* Check cnts and times... */
					mach_time = mach_absolute_time();
					HD(mach_time);
					cnt += (int)mach_time;

					HX((e = getrusage(RUSAGE_SELF,
					    &ru)) == -1, ru);
					if (e != -1) {
						cnt += (int)ru.ru_utime.tv_sec;
						cnt += (int)ru.ru_utime.tv_usec;
					}
				}

				for (m = 0; m < sizeof mm/sizeof(mm[0]); m++) {
					if (mm[m].p != MAP_FAILED)
						munmap(mm[m].p, mm[m].npg * pgs);
					mm[m].p = MAP_FAILED;
				}

				HX(stat(".", &st) == -1, st);
				HX(statvfs(".", &stvfs) == -1, stvfs);
				HX(statfs(".", &stfs) == -1, stfs);

				HX(stat("/", &st) == -1, st);
				HX(statvfs("/", &stvfs) == -1, stvfs);
				HX(statfs("/", &stfs) == -1, stfs);

				HX((e = fstat(0, &st)) == -1, st);
				if (e == -1) {
					if (S_ISREG(st.st_mode) ||
					    S_ISFIFO(st.st_mode) ||
					    S_ISSOCK(st.st_mode)) {
						HX(fstatvfs(0, &stvfs) == -1,
						    stvfs);
						HX(fstatfs(0, &stfs) == -1,
						    stfs);
						HX((off = lseek(0, (off_t)0,
						    SEEK_CUR)) < 0, off);
					}
					if (S_ISCHR(st.st_mode)) {
						HX(tcgetattr(0, &tios) == -1,
						    tios);
					} else if (S_ISSOCK(st.st_mode)) {
						memset(&ss, 0, sizeof ss);
						ssl = sizeof(ss);
						HX(getpeername(0,
						    (void *)&ss, &ssl) == -1,
						    ss);
					}
				}

				HX((e = getrusage(RUSAGE_CHILDREN,
				    &ru)) == -1, ru);
				if (e != -1) {
					cnt += (int)ru.ru_utime.tv_sec;
					cnt += (int)ru.ru_utime.tv_usec;
				}
			} else {
				/* Subsequent hashes absorb previous result */
				HD(results);
			}

			HX((e = gettimeofday(&tv, NULL)) == -1, tv);
			if (e != -1) {
				cnt += (int)tv.tv_sec;
				cnt += (int)tv.tv_usec;
			}

			HD(cnt);
		}

		SHA512_Final(results, &ctx);
		memcpy((char *)buf + i, results, min(sizeof(results), len - i));
		i += min(sizeof(results), len - i);
	}
	explicit_bzero(&ctx, sizeof ctx);
	explicit_bzero(results, sizeof results);
	if (gotdata(buf, len) == 0) {
		errno = save_errno;
		return (0);		/* satisfied */
	}
	errno = EIO;
	return (-1);
}
@


1.10
log
@Update the link for the getentropy(2) manual to man.openbsd.org/

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.9 2015/09/11 11:52:55 deraadt Exp $	*/
d23 1
d49 1
d52 1
d55 1
d60 1
d215 1
d219 1
d239 1
d243 1
d278 1
d290 1
@


1.9
log
@unify files further
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.8 2014/07/21 20:19:47 guenther Exp $	*/
d20 1
a20 1
 * http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man2/getentropy.2
@


1.8
log
@Use explicit_bzero() instead of memset() on buffers going out of scope.
Also, zero the SHA256 context.

suggested by "eric" in a comment on an opensslrampage.org post
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.7 2014/07/19 16:12:00 deraadt Exp $	*/
d91 1
a91 1
		return -1;
d152 2
a153 2
		return -1;
	return 0;
d203 1
a203 1
		return 0;		/* satisfied */
d207 1
a207 1
	return -1;
d425 1
a425 1
		return 0;		/* satisfied */
d428 1
a428 1
	return -1;
@


1.7
log
@remove disabled main hook; we use phdr now; ok bcook
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.6 2014/07/13 13:03:09 deraadt Exp $	*/
d421 2
a422 1
	memset(results, 0, sizeof results);
@


1.6
log
@Provide a link to the canonical API specification.
ok beck
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.5 2014/07/13 08:24:20 beck Exp $	*/
a79 3
#if 0
extern int main(int, char *argv[]);
#endif
a296 3
#if 0
			HF(main);		/* an addr in program */
#endif
@


1.5
log
@Take away the use of the address of main as a source of entropy. Causes
distractions to people testing and seeing link errors in some setups.
This will come back in another form
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.4 2014/07/12 20:41:47 wouter Exp $	*/
d18 3
@


1.4
log
@Remove signed/unsigned warning, statement before declaration and
add a function to use function pointers that does not take sizeof(fptr).

OK beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.3 2014/07/12 14:48:00 deraadt Exp $	*/
d77 1
d79 1
d297 1
d299 1
@


1.3
log
@remove gratuitous differences, ok beck
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.2 2014/07/09 13:23:15 bcook Exp $	*/
d73 1
d188 1
a188 1
		ssize_t ret = read(fd, buf + i, wanted);
d218 1
a218 1
	int save_errno = errno, e, m, pgs = getpagesize(), faster = 0, repeat;
d228 1
a228 1
	size_t i, ii;
d283 1
a283 1
			HX((m = getpriority(0, 0)) == -1, m);
d295 3
a297 3
			HD(main);		/* an addr in program */
			HD(getentropy);	/* an addr in this library */
			HD(printf);		/* an addr in libc */
d417 1
a417 1
		memcpy(buf + i, results, min(sizeof(results), len - i));
@


1.2
log
@remove unused variables getentropy for OS X

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_osx.c,v 1.1 2014/07/08 10:45:35 beck Exp $	*/
d70 1
d73 1
d105 2
a106 2
         * no failsafe way to get it on OSX that is not sensitive
         * to resource exhaustion.
d125 2
a126 2
#undef FAIL_WHEN_SYSTEM_ENTROPY_FAILS
#ifdef FAIL_WHEN_SYSTEM_ENTROPY_FAILS
d163 1
a163 1
        flags = O_RDONLY;
d165 1
a165 1
        flags |= O_NOFOLLOW;
d168 1
a168 1
        flags |= O_CLOEXEC;
d207 6
d216 1
a216 5
	int tcpmib[] = { CTL_NET, AF_INET, IPPROTO_TCP, TCPCTL_STATS };
	int udpmib[] = { CTL_NET, AF_INET, IPPROTO_UDP, UDPCTL_STATS };
	int ipmib[] = { CTL_NET, AF_INET, IPPROTO_IP, IPCTL_STATS };
	int kmib[] = { CTL_KERN, KERN_USRSTACK };
	int hwmib[] = { CTL_HW, HW_USERMEM };
d218 1
a218 6
	uint8_t results[SHA512_DIGEST_LENGTH];
	struct tcpstat tcpstat;
	struct udpstat udpstat;
	struct ipstat ipstat;
        u_int64_t mach_time;
	unsigned int idata;
a223 1
	static int cnt;
a225 1
	void * addr;
d227 1
a227 1
	size_t i;
d229 6
a248 1
			size_t len;
d255 2
a256 2
                        mach_time = mach_absolute_time();
                        HD(mach_time);
d258 1
a258 1
			len = sizeof(addr);
d260 1
a260 1
				&addr, &len, NULL, 0) == -1, addr);
d262 1
a262 1
			len = sizeof(idata);
d264 1
a264 1
				&idata, &len, NULL, 0) == -1, idata);
d266 1
a266 1
			len = sizeof(tcpstat);
d268 1
a268 1
				&tcpstat, &len, NULL, 0) == -1, tcpstat);
d270 1
a270 1
			len = sizeof(udpstat);
d272 1
a272 1
				&udpstat, &len, NULL, 0) == -1, udpstat);
d274 1
a274 1
			len = sizeof(ipstat);
d276 1
a276 1
				&ipstat, &len, NULL, 0) == -1, ipstat);
d345 3
a347 3
                                        mach_time = mach_absolute_time();
                                        HD(mach_time);
                                        cnt += (int)mach_time;
a413 1

@


1.1
log
@getentropy for osx and solaris. will be needed for a portable release
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_linux.c,v 1.14 2014/06/26 13:48:11 deraadt Exp $	*/
d156 1
a156 1
	int fd, cnt, flags;
d230 1
a230 1
	size_t i, ii;
@

