head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2016.08.07.03.27.21;	author tb;	state Exp;
branches;
next	1.11;
commitid	grLSpvTr68XyHvmT;

1.11
date	2015.09.11.11.52.55;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	iXKQtu2B8x2yh0yk;

1.10
date	2015.08.25.17.26.43;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	21xiEZwxxunesfVs;

1.9
date	2014.07.21.20.19.47;	author guenther;	state Exp;
branches;
next	1.8;
commitid	YSEc9bNwZ5UrloBr;

1.8
date	2014.07.19.16.12.00;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	oWjeTrZBQ00DYH7n;

1.7
date	2014.07.13.13.37.38;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	Zy4DLvWKKFRZnvS5;

1.6
date	2014.07.13.13.03.09;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	eGUXBFLD6xH0xZHF;

1.5
date	2014.07.13.08.24.20;	author beck;	state Exp;
branches;
next	1.4;
commitid	OPKo292RVtf5Fu9c;

1.4
date	2014.07.12.20.41.47;	author wouter;	state Exp;
branches;
next	1.3;
commitid	831J69NQ2L1nOM1f;

1.3
date	2014.07.12.14.46.31;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	aGhdpaTmiVmuu1bG;

1.2
date	2014.07.12.13.19.44;	author beck;	state Exp;
branches;
next	1.1;
commitid	DX1Ss93JgX5iZQDJ;

1.1
date	2014.07.08.10.45.35;	author beck;	state Exp;
branches;
next	;
commitid	yIoiImIdy47CpwCV;


desc
@@


1.12
log
@Update the link for the getentropy(2) manual to man.openbsd.org/

ok deraadt@@
@
text
@/*	$OpenBSD: getentropy_solaris.c,v 1.11 2015/09/11 11:52:55 deraadt Exp $	*/

/*
 * Copyright (c) 2014 Theo de Raadt <deraadt@@openbsd.org>
 * Copyright (c) 2014 Bob Beck <beck@@obtuse.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Emulation of getentropy(2) as documented at:
 * http://man.openbsd.org/getentropy.2
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/ioctl.h>
#include <sys/resource.h>
#include <sys/syscall.h>
#include <sys/statvfs.h>
#include <sys/socket.h>
#include <sys/mount.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <link.h>
#include <termios.h>
#include <fcntl.h>
#include <signal.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <time.h>
#include <sys/sha2.h>
#define SHA512_Init SHA512Init
#define SHA512_Update SHA512Update
#define SHA512_Final SHA512Final

#include <sys/vfs.h>
#include <sys/statfs.h>
#include <sys/loadavg.h>

#define REPEAT 5
#define min(a, b) (((a) < (b)) ? (a) : (b))

#define HX(a, b) \
	do { \
		if ((a)) \
			HD(errno); \
		else \
			HD(b); \
	} while (0)

#define HR(x, l) (SHA512_Update(&ctx, (char *)(x), (l)))
#define HD(x)	 (SHA512_Update(&ctx, (char *)&(x), sizeof (x)))
#define HF(x)    (SHA512_Update(&ctx, (char *)&(x), sizeof (void*)))

int	getentropy(void *buf, size_t len);

static int gotdata(char *buf, size_t len);
static int getentropy_urandom(void *buf, size_t len, const char *path,
    int devfscheck);
static int getentropy_fallback(void *buf, size_t len);
static int getentropy_phdr(struct dl_phdr_info *info, size_t size, void *data);

int
getentropy(void *buf, size_t len)
{
	int ret = -1;

	if (len > 256) {
		errno = EIO;
		return (-1);
	}

	/*
	 * Try to get entropy with /dev/urandom
	 *
	 * Solaris provides /dev/urandom as a symbolic link to
	 * /devices/pseudo/random@@0:urandom which is provided by
	 * a devfs filesystem.  Best practice is to use O_NOFOLLOW,
	 * so we must try the unpublished name directly.
	 *
	 * This can fail if the process is inside a chroot which lacks
	 * the devfs mount, or if file descriptors are exhausted.
	 */
	ret = getentropy_urandom(buf, len,
	    "/devices/pseudo/random@@0:urandom", 1);
	if (ret != -1)
		return (ret);

	/*
	 * Unfortunately, chroot spaces on Solaris are sometimes setup
	 * with direct device node of the well-known /dev/urandom name
	 * (perhaps to avoid dragging all of devfs into the space).
	 *
	 * This can fail if the process is inside a chroot or if file
	 * descriptors are exhausted.
	 */
	ret = getentropy_urandom(buf, len, "/dev/urandom", 0);
	if (ret != -1)
		return (ret);

	/*
	 * Entropy collection via /dev/urandom has failed.
	 *
	 * No other API exists for collecting entropy, and we have
	 * no failsafe way to get it on Solaris that is not sensitive
	 * to resource exhaustion.
	 *
	 * We have very few options:
	 *     - Even syslog_r is unsafe to call at this low level, so
	 *	 there is no way to alert the user or program.
	 *     - Cannot call abort() because some systems have unsafe
	 *	 corefiles.
	 *     - Could raise(SIGKILL) resulting in silent program termination.
	 *     - Return EIO, to hint that arc4random's stir function
	 *       should raise(SIGKILL)
	 *     - Do the best under the circumstances....
	 *
	 * This code path exists to bring light to the issue that Solaris
	 * does not provide a failsafe API for entropy collection.
	 *
	 * We hope this demonstrates that Solaris should consider
	 * providing a new failsafe API which works in a chroot or
	 * when file descriptors are exhausted.
	 */
#undef FAIL_INSTEAD_OF_TRYING_FALLBACK
#ifdef FAIL_INSTEAD_OF_TRYING_FALLBACK
	raise(SIGKILL);
#endif
	ret = getentropy_fallback(buf, len);
	if (ret != -1)
		return (ret);

	errno = EIO;
	return (ret);
}

/*
 * Basic sanity checking; wish we could do better.
 */
static int
gotdata(char *buf, size_t len)
{
	char	any_set = 0;
	size_t	i;

	for (i = 0; i < len; ++i)
		any_set |= buf[i];
	if (any_set == 0)
		return (-1);
	return (0);
}

static int
getentropy_urandom(void *buf, size_t len, const char *path, int devfscheck)
{
	struct stat st;
	size_t i;
	int fd, flags;
	int save_errno = errno;

start:

	flags = O_RDONLY;
#ifdef O_NOFOLLOW
	flags |= O_NOFOLLOW;
#endif
#ifdef O_CLOEXEC
	flags |= O_CLOEXEC;
#endif
	fd = open(path, flags, 0);
	if (fd == -1) {
		if (errno == EINTR)
			goto start;
		goto nodevrandom;
	}
#ifndef O_CLOEXEC
	fcntl(fd, F_SETFD, fcntl(fd, F_GETFD) | FD_CLOEXEC);
#endif

	/* Lightly verify that the device node looks sane */
	if (fstat(fd, &st) == -1 || !S_ISCHR(st.st_mode) ||
	    (devfscheck && (strcmp(st.st_fstype, "devfs") != 0))) {
		close(fd);
		goto nodevrandom;
	}
	for (i = 0; i < len; ) {
		size_t wanted = len - i;
		ssize_t ret = read(fd, (char *)buf + i, wanted);

		if (ret == -1) {
			if (errno == EAGAIN || errno == EINTR)
				continue;
			close(fd);
			goto nodevrandom;
		}
		i += ret;
	}
	close(fd);
	if (gotdata(buf, len) == 0) {
		errno = save_errno;
		return (0);		/* satisfied */
	}
nodevrandom:
	errno = EIO;
	return (-1);
}

static const int cl[] = {
	CLOCK_REALTIME,
#ifdef CLOCK_MONOTONIC
	CLOCK_MONOTONIC,
#endif
#ifdef CLOCK_MONOTONIC_RAW
	CLOCK_MONOTONIC_RAW,
#endif
#ifdef CLOCK_TAI
	CLOCK_TAI,
#endif
#ifdef CLOCK_VIRTUAL
	CLOCK_VIRTUAL,
#endif
#ifdef CLOCK_UPTIME
	CLOCK_UPTIME,
#endif
#ifdef CLOCK_PROCESS_CPUTIME_ID
	CLOCK_PROCESS_CPUTIME_ID,
#endif
#ifdef CLOCK_THREAD_CPUTIME_ID
	CLOCK_THREAD_CPUTIME_ID,
#endif
};

static int
getentropy_phdr(struct dl_phdr_info *info, size_t size, void *data)
{
	SHA512_CTX *ctx = data;

	SHA512_Update(ctx, &info->dlpi_addr, sizeof (info->dlpi_addr));
	return (0);
}

static int
getentropy_fallback(void *buf, size_t len)
{
	uint8_t results[SHA512_DIGEST_LENGTH];
	int save_errno = errno, e, pgs = getpagesize(), faster = 0, repeat;
	static int cnt;
	struct timespec ts;
	struct timeval tv;
	double loadavg[3];
	struct rusage ru;
	sigset_t sigset;
	struct stat st;
	SHA512_CTX ctx;
	static pid_t lastpid;
	pid_t pid;
	size_t i, ii, m;
	char *p;

	pid = getpid();
	if (lastpid == pid) {
		faster = 1;
		repeat = 2;
	} else {
		faster = 0;
		lastpid = pid;
		repeat = REPEAT;
	}
	for (i = 0; i < len; ) {
		int j;
		SHA512_Init(&ctx);
		for (j = 0; j < repeat; j++) {
			HX((e = gettimeofday(&tv, NULL)) == -1, tv);
			if (e != -1) {
				cnt += (int)tv.tv_sec;
				cnt += (int)tv.tv_usec;
			}

			dl_iterate_phdr(getentropy_phdr, &ctx);

			for (ii = 0; ii < sizeof(cl)/sizeof(cl[0]); ii++)
				HX(clock_gettime(cl[ii], &ts) == -1, ts);

			HX((pid = getpid()) == -1, pid);
			HX((pid = getsid(pid)) == -1, pid);
			HX((pid = getppid()) == -1, pid);
			HX((pid = getpgid(0)) == -1, pid);
			HX((e = getpriority(0, 0)) == -1, e);
			HX((getloadavg(loadavg, 3) == -1), loadavg);

			if (!faster) {
				ts.tv_sec = 0;
				ts.tv_nsec = 1;
				(void) nanosleep(&ts, NULL);
			}

			HX(sigpending(&sigset) == -1, sigset);
			HX(sigprocmask(SIG_BLOCK, NULL, &sigset) == -1,
			    sigset);

			HF(getentropy);	/* an addr in this library */
			HF(printf);		/* an addr in libc */
			p = (char *)&p;
			HD(p);		/* an addr on stack */
			p = (char *)&errno;
			HD(p);		/* the addr of errno */

			if (i == 0) {
				struct sockaddr_storage ss;
				struct statvfs stvfs;
				struct termios tios;
				socklen_t ssl;
				off_t off;

				/*
				 * Prime-sized mappings encourage fragmentation;
				 * thus exposing some address entropy.
				 */
				struct mm {
					size_t	npg;
					void	*p;
				} mm[] =	 {
					{ 17, MAP_FAILED }, { 3, MAP_FAILED },
					{ 11, MAP_FAILED }, { 2, MAP_FAILED },
					{ 5, MAP_FAILED }, { 3, MAP_FAILED },
					{ 7, MAP_FAILED }, { 1, MAP_FAILED },
					{ 57, MAP_FAILED }, { 3, MAP_FAILED },
					{ 131, MAP_FAILED }, { 1, MAP_FAILED },
				};

				for (m = 0; m < sizeof mm/sizeof(mm[0]); m++) {
					HX(mm[m].p = mmap(NULL,
					    mm[m].npg * pgs,
					    PROT_READ|PROT_WRITE,
					    MAP_PRIVATE|MAP_ANON, -1,
					    (off_t)0), mm[m].p);
					if (mm[m].p != MAP_FAILED) {
						size_t mo;

						/* Touch some memory... */
						p = mm[m].p;
						mo = cnt %
						    (mm[m].npg * pgs - 1);
						p[mo] = 1;
						cnt += (int)((long)(mm[m].p)
						    / pgs);
					}

					/* Check cnts and times... */
					for (ii = 0; ii < sizeof(cl)/sizeof(cl[0]);
					    ii++) {
						HX((e = clock_gettime(cl[ii],
						    &ts)) == -1, ts);
						if (e != -1)
							cnt += (int)ts.tv_nsec;
					}

					HX((e = getrusage(RUSAGE_SELF,
					    &ru)) == -1, ru);
					if (e != -1) {
						cnt += (int)ru.ru_utime.tv_sec;
						cnt += (int)ru.ru_utime.tv_usec;
					}
				}

				for (m = 0; m < sizeof mm/sizeof(mm[0]); m++) {
					if (mm[m].p != MAP_FAILED)
						munmap(mm[m].p, mm[m].npg * pgs);
					mm[m].p = MAP_FAILED;
				}

				HX(stat(".", &st) == -1, st);
				HX(statvfs(".", &stvfs) == -1, stvfs);

				HX(stat("/", &st) == -1, st);
				HX(statvfs("/", &stvfs) == -1, stvfs);

				HX((e = fstat(0, &st)) == -1, st);
				if (e == -1) {
					if (S_ISREG(st.st_mode) ||
					    S_ISFIFO(st.st_mode) ||
					    S_ISSOCK(st.st_mode)) {
						HX(fstatvfs(0, &stvfs) == -1,
						    stvfs);
						HX((off = lseek(0, (off_t)0,
						    SEEK_CUR)) < 0, off);
					}
					if (S_ISCHR(st.st_mode)) {
						HX(tcgetattr(0, &tios) == -1,
						    tios);
					} else if (S_ISSOCK(st.st_mode)) {
						memset(&ss, 0, sizeof ss);
						ssl = sizeof(ss);
						HX(getpeername(0,
						    (void *)&ss, &ssl) == -1,
						    ss);
					}
				}

				HX((e = getrusage(RUSAGE_CHILDREN,
				    &ru)) == -1, ru);
				if (e != -1) {
					cnt += (int)ru.ru_utime.tv_sec;
					cnt += (int)ru.ru_utime.tv_usec;
				}
			} else {
				/* Subsequent hashes absorb previous result */
				HD(results);
			}

			HX((e = gettimeofday(&tv, NULL)) == -1, tv);
			if (e != -1) {
				cnt += (int)tv.tv_sec;
				cnt += (int)tv.tv_usec;
			}

			HD(cnt);
		}
		SHA512_Final(results, &ctx);
		memcpy((char *)buf + i, results, min(sizeof(results), len - i));
		i += min(sizeof(results), len - i);
	}
	explicit_bzero(&ctx, sizeof ctx);
	explicit_bzero(results, sizeof results);
	if (gotdata(buf, len) == 0) {
		errno = save_errno;
		return (0);		/* satisfied */
	}
	errno = EIO;
	return (-1);
}
@


1.11
log
@unify files further
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.10 2015/08/25 17:26:43 deraadt Exp $	*/
d20 1
a20 1
 * http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man2/getentropy.2
@


1.10
log
@unify versions, so they are easier to diff.
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.9 2014/07/21 20:19:47 guenther Exp $	*/
d84 1
a84 1
		return -1;
d163 2
a164 2
		return -1;
	return 0;
d215 1
a215 1
		return 0;		/* satisfied */
d219 1
a219 1
	return -1;
d253 1
a253 1
	return 0;
d441 1
a441 1
		return 0;		/* satisfied */
d444 1
a444 1
	return -1;
@


1.9
log
@Use explicit_bzero() instead of memset() on buffers going out of scope.
Also, zero the SHA256 context.

suggested by "eric" in a comment on an opensslrampage.org post
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.8 2014/07/19 16:12:00 deraadt Exp $	*/
d67 1
a67 1
#define HF(x)	 (SHA512_Update(&ctx, (char *)&(x), sizeof (void*)))
@


1.8
log
@remove disabled main hook; we use phdr now; ok bcook
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.7 2014/07/13 13:37:38 deraadt Exp $	*/
d437 2
a438 1
	memset(results, 0, sizeof results);
@


1.7
log
@Use dl_iterate_phdr() to iterate over the segments and throw the addresses
into the hash; hoping the system has some ASLR or PIE.  This replaces and
substantially improves upon &main which proved problematic with some picky
linkers.
Work with kettenis, testing by beck
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.6 2014/07/13 13:03:09 deraadt Exp $	*/
a70 3
#if 0
extern int main(int, char *argv[]);
#endif
a314 3
#if 0
			HF(main);		/* an addr in program */
#endif
@


1.6
log
@Provide a link to the canonical API specification.
ok beck
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.5 2014/07/13 08:24:20 beck Exp $	*/
d37 1
d78 1
d251 9
d295 2
@


1.5
log
@Take away the use of the address of main as a source of entropy. Causes
distractions to people testing and seeing link errors in some setups.
This will come back in another form
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.4 2014/07/12 20:41:47 wouter Exp $	*/
d18 3
@


1.4
log
@Remove signed/unsigned warning, statement before declaration and
add a function to use function pointers that does not take sizeof(fptr).

OK beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.3 2014/07/12 14:46:31 deraadt Exp $	*/
d67 1
d69 1
d302 1
d304 1
@


1.3
log
@remove gratuitous differences, ok beck bcook
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.2 2014/07/12 13:19:44 beck Exp $	*/
d63 1
d198 1
a198 1
		ssize_t ret = read(fd, buf + i, wanted);
d247 1
a247 1
	int save_errno = errno, e, m, pgs = getpagesize(), faster = 0, repeat;
d258 1
a258 1
	size_t i, ii;
d287 1
a287 1
			HX((m = getpriority(0, 0)) == -1, m);
d300 3
a302 3
			HD(main);		/* an addr in program */
			HD(getentropy);	/* an addr in this library */
			HD(printf);		/* an addr in libc */
d420 1
a420 1
		memcpy(buf + i, results, min(sizeof(results), len - i));
@


1.2
log
@Solaris uses a symbolic link for /dev/urandom which harms best practice of
using O_NOFOLLOW - cope with it as best as possible by trying two
different paths. - written by deraadt@@ and kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_solaris.c,v 1.1 2014/07/08 10:45:35 beck Exp $	*/
a45 1

d83 1
a83 1
	 * Try to get entropy with /dev/urandom...
d134 2
a135 2
#undef FAIL_WHEN_SYSTEM_ENTROPY_FAILS
#ifdef FAIL_WHEN_SYSTEM_ENTROPY_FAILS
d217 1
a217 1
static int cl[] = {
d281 1
@


1.1
log
@getentropy for osx and solaris. will be needed for a portable release
@
text
@d1 1
a1 1
/*	$OpenBSD: getentropy_linux.c,v 1.14 2014/06/26 13:48:11 deraadt Exp $	*/
d69 2
a70 1
static int getentropy_urandom(void *buf, size_t len);
d84 19
a102 1
	 * Try to get entropy with /dev/urandom
d107 1
a107 1
	ret = getentropy_urandom(buf, len);
d110 1
d112 1
a112 1
	 * Entropy collection via /dev/urandom and sysctl have failed.
d115 2
a116 2
         * no failsafe way to get it on Solaris that is not sensitive
         * to resource exhaustion.
d164 1
a164 1
getentropy_urandom(void *buf, size_t len)
d173 1
a173 1
        flags = O_RDONLY;
d175 1
a175 1
        flags |= O_NOFOLLOW;
d178 1
a178 1
        flags |= O_CLOEXEC;
d180 1
a180 6
	/* 
	 * Solaris provides /dev/urandom as a symbolic link. 
	 * /devices/pseudo/random@@0:urandom should be the
	 * real device path, and we do want O_NOFOLLOW. 
	 */
	fd = open("/devices/pseudo/random@@0:urandom", flags, 0);
d191 2
a192 1
	if (fstat(fd, &st) == -1 || !S_ISCHR(st.st_mode)) {
@

