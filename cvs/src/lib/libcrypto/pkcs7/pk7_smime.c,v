head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.2
	OPENBSD_6_1_BASE:1.22;
locks; strict;
comment	@ * @;


1.22
date	2017.01.29.17.49.23;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2016.11.05.15.19.07;	author miod;	state Exp;
branches;
next	1.20;
commitid	Ms5B6ylP8je6xQgm;

1.20
date	2015.02.07.14.21.41;	author doug;	state Exp;
branches;
next	1.19;
commitid	JRsqN8l8nZrFwmEn;

1.19
date	2014.11.09.19.17.13;	author miod;	state Exp;
branches;
next	1.18;
commitid	QrgOG8zcUIADOfFd;

1.18
date	2014.07.11.08.44.49;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.21.42.43;	author miod;	state Exp;
branches;
next	1.16;
commitid	RmcVXaoF1l3cqXQd;

1.16
date	2014.07.10.21.40.59;	author miod;	state Exp;
branches;
next	1.15;
commitid	cTKoRfT1WLhccjGZ;

1.15
date	2014.06.29.17.05.36;	author jsing;	state Exp;
branches;
next	1.14;
commitid	t0SFeQtZd9bpT5Df;

1.14
date	2014.06.12.15.49.30;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.04.26.18.56.38;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.13.21.25.13;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.56;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.51;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.51;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.27.05.07.02;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.24;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.16;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.00.03.16;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.01;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.11.09;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.50.46;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.11.21.16.52;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.14;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.35;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.46;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.58;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.04.06.06.30.04;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.09;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2012.10.13.21.23.42;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: pk7_smime.c,v 1.21 2016/11/05 15:19:07 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 1999-2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

/* Simple PKCS#7 processing functions */

#include <stdio.h>

#include <openssl/err.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

static int pkcs7_copy_existing_digest(PKCS7 *p7, PKCS7_SIGNER_INFO *si);

PKCS7 *
PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs, BIO *data,
    int flags)
{
	PKCS7 *p7;
	int i;

	if (!(p7 = PKCS7_new())) {
		PKCS7error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}

	if (!PKCS7_set_type(p7, NID_pkcs7_signed))
		goto err;

	if (!PKCS7_content_new(p7, NID_pkcs7_data))
		goto err;

	if (pkey && !PKCS7_sign_add_signer(p7, signcert, pkey, NULL, flags)) {
		PKCS7error(PKCS7_R_PKCS7_ADD_SIGNER_ERROR);
		goto err;
	}

	if (!(flags & PKCS7_NOCERTS)) {
		for (i = 0; i < sk_X509_num(certs); i++) {
			if (!PKCS7_add_certificate(p7, sk_X509_value(certs, i)))
				goto err;
		}
	}

	if (flags & PKCS7_DETACHED)
		PKCS7_set_detached(p7, 1);

	if (flags & (PKCS7_STREAM|PKCS7_PARTIAL))
		return p7;

	if (PKCS7_final(p7, data, flags))
		return p7;

err:
	PKCS7_free(p7);
	return NULL;
}

int
PKCS7_final(PKCS7 *p7, BIO *data, int flags)
{
	BIO *p7bio;
	int ret = 0;

	if (!(p7bio = PKCS7_dataInit(p7, NULL))) {
		PKCS7error(ERR_R_MALLOC_FAILURE);
		return 0;
	}

	SMIME_crlf_copy(data, p7bio, flags);

	(void)BIO_flush(p7bio);

	if (!PKCS7_dataFinal(p7, p7bio)) {
		PKCS7error(PKCS7_R_PKCS7_DATASIGN);
		goto err;
	}

	ret = 1;

err:
	BIO_free_all(p7bio);

	return ret;
}

/* Check to see if a cipher exists and if so add S/MIME capabilities */

static int
add_cipher_smcap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
{
	if (EVP_get_cipherbynid(nid))
		return PKCS7_simple_smimecap(sk, nid, arg);
	return 1;
}

static int
add_digest_smcap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
{
	if (EVP_get_digestbynid(nid))
		return PKCS7_simple_smimecap(sk, nid, arg);
	return 1;
}

PKCS7_SIGNER_INFO *
PKCS7_sign_add_signer(PKCS7 *p7, X509 *signcert, EVP_PKEY *pkey,
    const EVP_MD *md, int flags)
{
	PKCS7_SIGNER_INFO *si = NULL;
	STACK_OF(X509_ALGOR) *smcap = NULL;

	if (!X509_check_private_key(signcert, pkey)) {
		PKCS7error(PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
		return NULL;
	}

	if (!(si = PKCS7_add_signature(p7, signcert, pkey, md))) {
		PKCS7error(PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR);
		return NULL;
	}

	if (!(flags & PKCS7_NOCERTS)) {
		if (!PKCS7_add_certificate(p7, signcert))
			goto err;
	}

	if (!(flags & PKCS7_NOATTR)) {
		if (!PKCS7_add_attrib_content_type(si, NULL))
			goto err;
		/* Add SMIMECapabilities */
		if (!(flags & PKCS7_NOSMIMECAP)) {
			if (!(smcap = sk_X509_ALGOR_new_null())) {
				PKCS7error(ERR_R_MALLOC_FAILURE);
				goto err;
			}
			if (!add_cipher_smcap(smcap, NID_aes_256_cbc, -1) ||
			    !add_digest_smcap(smcap, NID_id_GostR3411_94, -1) ||
			    !add_digest_smcap(smcap, NID_id_tc26_gost3411_2012_256, -1) ||
			    !add_digest_smcap(smcap, NID_id_tc26_gost3411_2012_512, -1) ||
			    !add_cipher_smcap(smcap, NID_id_Gost28147_89, -1) ||
			    !add_cipher_smcap(smcap, NID_aes_192_cbc, -1) ||
			    !add_cipher_smcap(smcap, NID_aes_128_cbc, -1) ||
			    !add_cipher_smcap(smcap, NID_des_ede3_cbc, -1) ||
			    !add_cipher_smcap(smcap, NID_rc2_cbc, 128) ||
			    !add_cipher_smcap(smcap, NID_rc2_cbc, 64) ||
			    !add_cipher_smcap(smcap, NID_des_cbc, -1) ||
			    !add_cipher_smcap(smcap, NID_rc2_cbc, 40) ||
			    !PKCS7_add_attrib_smimecap(si, smcap))
				goto err;
			sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
			smcap = NULL;
		}
		if (flags & PKCS7_REUSE_DIGEST) {
			if (!pkcs7_copy_existing_digest(p7, si))
				goto err;
			if (!(flags & PKCS7_PARTIAL) &&
			    !PKCS7_SIGNER_INFO_sign(si))
				goto err;
		}
	}
	return si;

err:
	if (smcap)
		sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
	return NULL;
}

/* Search for a digest matching SignerInfo digest type and if found
 * copy across.
 */

static int
pkcs7_copy_existing_digest(PKCS7 *p7, PKCS7_SIGNER_INFO *si)
{
	int i;
	STACK_OF(PKCS7_SIGNER_INFO) *sinfos;
	PKCS7_SIGNER_INFO *sitmp;
	ASN1_OCTET_STRING *osdig = NULL;

	sinfos = PKCS7_get_signer_info(p7);
	for (i = 0; i < sk_PKCS7_SIGNER_INFO_num(sinfos); i++) {
		sitmp = sk_PKCS7_SIGNER_INFO_value(sinfos, i);
		if (si == sitmp)
			break;
		if (sk_X509_ATTRIBUTE_num(sitmp->auth_attr) <= 0)
			continue;
		if (!OBJ_cmp(si->digest_alg->algorithm,
		    sitmp->digest_alg->algorithm)) {
			osdig = PKCS7_digest_from_attributes(sitmp->auth_attr);
			break;
		}

	}

	if (osdig)
		return PKCS7_add1_attrib_digest(si, osdig->data, osdig->length);

	PKCS7error(PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND);
	return 0;
}

int
PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata,
    BIO *out, int flags)
{
	STACK_OF(X509) *signers;
	X509 *signer;
	STACK_OF(PKCS7_SIGNER_INFO) *sinfos;
	PKCS7_SIGNER_INFO *si;
	X509_STORE_CTX cert_ctx;
	char buf[4096];
	int i, j = 0, k, ret = 0;
	BIO *p7bio;
	BIO *tmpin, *tmpout;

	if (!p7) {
		PKCS7error(PKCS7_R_INVALID_NULL_POINTER);
		return 0;
	}

	if (!PKCS7_type_is_signed(p7)) {
		PKCS7error(PKCS7_R_WRONG_CONTENT_TYPE);
		return 0;
	}

	/* Check for no data and no content: no data to verify signature */
	if (PKCS7_get_detached(p7) && !indata) {
		PKCS7error(PKCS7_R_NO_CONTENT);
		return 0;
	}

	/*
	 * Very old Netscape illegally included empty content with
	 * a detached signature.  Very old users should upgrade.
	 */
	/* Check for data and content: two sets of data */
	if (!PKCS7_get_detached(p7) && indata) {
		PKCS7error(PKCS7_R_CONTENT_AND_DATA_PRESENT);
		return 0;
	}

	sinfos = PKCS7_get_signer_info(p7);

	if (!sinfos || !sk_PKCS7_SIGNER_INFO_num(sinfos)) {
		PKCS7error(PKCS7_R_NO_SIGNATURES_ON_DATA);
		return 0;
	}


	signers = PKCS7_get0_signers(p7, certs, flags);

	if (!signers)
		return 0;

	/* Now verify the certificates */

	if (!(flags & PKCS7_NOVERIFY))
		for (k = 0; k < sk_X509_num(signers); k++) {
			signer = sk_X509_value (signers, k);
			if  (!(flags & PKCS7_NOCHAIN)) {
				if (!X509_STORE_CTX_init(&cert_ctx, store,
				    signer, p7->d.sign->cert)) {
					PKCS7error(ERR_R_X509_LIB);
					sk_X509_free(signers);
					return 0;
				}
				if (X509_STORE_CTX_set_default(&cert_ctx,
				    "smime_sign") == 0) {
					sk_X509_free(signers);
					return 0;
				}
			} else if (!X509_STORE_CTX_init(&cert_ctx, store,
			    signer, NULL)) {
				PKCS7error(ERR_R_X509_LIB);
				sk_X509_free(signers);
				return 0;
			}
			if (!(flags & PKCS7_NOCRL))
				X509_STORE_CTX_set0_crls(&cert_ctx, p7->d.sign->crl);
			i = X509_verify_cert(&cert_ctx);
			if (i <= 0)
				j = X509_STORE_CTX_get_error(&cert_ctx);
			X509_STORE_CTX_cleanup(&cert_ctx);
			if (i <= 0) {
				PKCS7error(PKCS7_R_CERTIFICATE_VERIFY_ERROR);
				ERR_asprintf_error_data("Verify error:%s",
				    X509_verify_cert_error_string(j));
				sk_X509_free(signers);
				return 0;
			}
			/* Check for revocation status here */
		}

	/*
	 * Performance optimization: if the content is a memory BIO then
	 * store its contents in a temporary read only memory BIO. This
	 * avoids potentially large numbers of slow copies of data which will
	 * occur when reading from a read write memory BIO when signatures
	 * are calculated.
	 */
	if (indata && (BIO_method_type(indata) == BIO_TYPE_MEM)) {
		char *ptr;
		long len;

		len = BIO_get_mem_data(indata, &ptr);
		tmpin = BIO_new_mem_buf(ptr, len);
		if (tmpin == NULL) {
			PKCS7error(ERR_R_MALLOC_FAILURE);
			return 0;
		}
	} else
		tmpin = indata;


	if (!(p7bio = PKCS7_dataInit(p7, tmpin)))
		goto err;

	if (flags & PKCS7_TEXT) {
		if (!(tmpout = BIO_new(BIO_s_mem()))) {
			PKCS7error(ERR_R_MALLOC_FAILURE);
			goto err;
		}
		BIO_set_mem_eof_return(tmpout, 0);
	} else
		tmpout = out;

	/* We now have to 'read' from p7bio to calculate digests etc. */
	for (;;) {
		i = BIO_read(p7bio, buf, sizeof(buf));
		if (i <= 0)
			break;
		if (tmpout)
			BIO_write(tmpout, buf, i);
	}

	if (flags & PKCS7_TEXT) {
		if (!SMIME_text(tmpout, out)) {
			PKCS7error(PKCS7_R_SMIME_TEXT_ERROR);
			BIO_free(tmpout);
			goto err;
		}
		BIO_free(tmpout);
	}

	/* Now Verify All Signatures */
	if (!(flags & PKCS7_NOSIGS))
		for (i = 0; i < sk_PKCS7_SIGNER_INFO_num(sinfos); i++) {
			si = sk_PKCS7_SIGNER_INFO_value(sinfos, i);
			signer = sk_X509_value (signers, i);
			j = PKCS7_signatureVerify(p7bio, p7, si, signer);
			if (j <= 0) {
				PKCS7error(PKCS7_R_SIGNATURE_FAILURE);
				goto err;
			}
		}

	ret = 1;

err:
	if (tmpin == indata) {
		if (indata)
			BIO_pop(p7bio);
	}
	BIO_free_all(p7bio);
	sk_X509_free(signers);

	return ret;
}

STACK_OF(X509) *
PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs, int flags)
{
	STACK_OF(X509) *signers;
	STACK_OF(PKCS7_SIGNER_INFO) *sinfos;
	PKCS7_SIGNER_INFO *si;
	PKCS7_ISSUER_AND_SERIAL *ias;
	X509 *signer;
	int i;

	if (!p7) {
		PKCS7error(PKCS7_R_INVALID_NULL_POINTER);
		return NULL;
	}

	if (!PKCS7_type_is_signed(p7)) {
		PKCS7error(PKCS7_R_WRONG_CONTENT_TYPE);
		return NULL;
	}

	/* Collect all the signers together */
	sinfos = PKCS7_get_signer_info(p7);
	if (sk_PKCS7_SIGNER_INFO_num(sinfos) <= 0) {
		PKCS7error(PKCS7_R_NO_SIGNERS);
		return 0;
	}

	if (!(signers = sk_X509_new_null())) {
		PKCS7error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}

	for (i = 0; i < sk_PKCS7_SIGNER_INFO_num(sinfos); i++) {
		si = sk_PKCS7_SIGNER_INFO_value(sinfos, i);
		ias = si->issuer_and_serial;
		signer = NULL;
		/* If any certificates passed they take priority */
		if (certs)
			signer = X509_find_by_issuer_and_serial (certs,
			    ias->issuer, ias->serial);
		if (!signer && !(flags & PKCS7_NOINTERN) && p7->d.sign->cert)
			signer =
			    X509_find_by_issuer_and_serial(p7->d.sign->cert,
			      ias->issuer, ias->serial);
		if (!signer) {
			PKCS7error(PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND);
			sk_X509_free(signers);
			return 0;
		}

		if (!sk_X509_push(signers, signer)) {
			sk_X509_free(signers);
			return NULL;
		}
	}
	return signers;
}

/* Build a complete PKCS#7 enveloped data */

PKCS7 *
PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
    int flags)
{
	PKCS7 *p7;
	BIO *p7bio = NULL;
	int i;
	X509 *x509;

	if (!(p7 = PKCS7_new())) {
		PKCS7error(ERR_R_MALLOC_FAILURE);
		return NULL;
	}

	if (!PKCS7_set_type(p7, NID_pkcs7_enveloped))
		goto err;
	if (!PKCS7_set_cipher(p7, cipher)) {
		PKCS7error(PKCS7_R_ERROR_SETTING_CIPHER);
		goto err;
	}

	for (i = 0; i < sk_X509_num(certs); i++) {
		x509 = sk_X509_value(certs, i);
		if (!PKCS7_add_recipient(p7, x509)) {
			PKCS7error(PKCS7_R_ERROR_ADDING_RECIPIENT);
			goto err;
		}
	}

	if (flags & PKCS7_STREAM)
		return p7;

	if (PKCS7_final(p7, in, flags))
		return p7;

err:
	BIO_free_all(p7bio);
	PKCS7_free(p7);
	return NULL;
}

int
PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags)
{
	BIO *tmpmem;
	int ret, i;
	char buf[4096];

	if (!p7) {
		PKCS7error(PKCS7_R_INVALID_NULL_POINTER);
		return 0;
	}

	if (!PKCS7_type_is_enveloped(p7)) {
		PKCS7error(PKCS7_R_WRONG_CONTENT_TYPE);
		return 0;
	}

	if (cert && !X509_check_private_key(cert, pkey)) {
		PKCS7error(PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
		return 0;
	}

	if (!(tmpmem = PKCS7_dataDecode(p7, pkey, NULL, cert))) {
		PKCS7error(PKCS7_R_DECRYPT_ERROR);
		return 0;
	}

	if (flags & PKCS7_TEXT) {
		BIO *tmpbuf;

		/* Encrypt BIOs can't do BIO_gets() so add a buffer BIO */
		if (!(tmpbuf = BIO_new(BIO_f_buffer()))) {
			PKCS7error(ERR_R_MALLOC_FAILURE);
			BIO_free_all(tmpmem);
			return 0;
		}
		BIO_push(tmpbuf, tmpmem);
		ret = SMIME_text(tmpbuf, data);
		if (ret > 0 && BIO_method_type(tmpmem) == BIO_TYPE_CIPHER) {
			if (!BIO_get_cipher_status(tmpmem))
				ret = 0;
		}
		BIO_free_all(tmpbuf);
		return ret;
	} else {
		for (;;) {
			i = BIO_read(tmpmem, buf, sizeof(buf));
			if (i <= 0) {
				ret = 1;
				if (BIO_method_type(tmpmem) ==
				    BIO_TYPE_CIPHER) {
					if (!BIO_get_cipher_status(tmpmem))
						ret = 0;
				}
				break;
			}
			if (BIO_write(data, buf, i) != i) {
				ret = 0;
				break;
			}
		}
		BIO_free_all(tmpmem);
		return ret;
	}
}
@


1.21
log
@More X509_STORE_CTX_set_*() return value checks.

ok beck@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_smime.c,v 1.20 2015/02/07 14:21:41 doug Exp $ */
d77 1
a77 1
		PKCS7err(PKCS7_F_PKCS7_SIGN, ERR_R_MALLOC_FAILURE);
d88 1
a88 1
		PKCS7err(PKCS7_F_PKCS7_SIGN, PKCS7_R_PKCS7_ADD_SIGNER_ERROR);
d120 1
a120 1
		PKCS7err(PKCS7_F_PKCS7_FINAL, ERR_R_MALLOC_FAILURE);
d129 1
a129 1
		PKCS7err(PKCS7_F_PKCS7_FINAL, PKCS7_R_PKCS7_DATASIGN);
d167 1
a167 2
		PKCS7err(PKCS7_F_PKCS7_SIGN_ADD_SIGNER,
		    PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
d172 1
a172 2
		PKCS7err(PKCS7_F_PKCS7_SIGN_ADD_SIGNER,
		    PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR);
d187 1
a187 2
				PKCS7err(PKCS7_F_PKCS7_SIGN_ADD_SIGNER,
				    ERR_R_MALLOC_FAILURE);
d253 1
a253 2
	PKCS7err(PKCS7_F_PKCS7_COPY_EXISTING_DIGEST,
	    PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND);
d272 1
a272 1
		PKCS7err(PKCS7_F_PKCS7_VERIFY, PKCS7_R_INVALID_NULL_POINTER);
d277 1
a277 1
		PKCS7err(PKCS7_F_PKCS7_VERIFY, PKCS7_R_WRONG_CONTENT_TYPE);
d283 1
a283 1
		PKCS7err(PKCS7_F_PKCS7_VERIFY, PKCS7_R_NO_CONTENT);
d293 1
a293 1
		PKCS7err(PKCS7_F_PKCS7_VERIFY, PKCS7_R_CONTENT_AND_DATA_PRESENT);
d300 1
a300 1
		PKCS7err(PKCS7_F_PKCS7_VERIFY, PKCS7_R_NO_SIGNATURES_ON_DATA);
d318 1
a318 2
					PKCS7err(PKCS7_F_PKCS7_VERIFY,
					    ERR_R_X509_LIB);
d329 1
a329 1
				PKCS7err(PKCS7_F_PKCS7_VERIFY, ERR_R_X509_LIB);
d340 1
a340 2
				PKCS7err(PKCS7_F_PKCS7_VERIFY,
				    PKCS7_R_CERTIFICATE_VERIFY_ERROR);
d363 1
a363 1
			PKCS7err(PKCS7_F_PKCS7_VERIFY, ERR_R_MALLOC_FAILURE);
d375 1
a375 1
			PKCS7err(PKCS7_F_PKCS7_VERIFY, ERR_R_MALLOC_FAILURE);
d393 1
a393 2
			PKCS7err(PKCS7_F_PKCS7_VERIFY,
			    PKCS7_R_SMIME_TEXT_ERROR);
d407 1
a407 2
				PKCS7err(PKCS7_F_PKCS7_VERIFY,
				    PKCS7_R_SIGNATURE_FAILURE);
d436 1
a436 2
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,
		    PKCS7_R_INVALID_NULL_POINTER);
d441 1
a441 2
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,
		    PKCS7_R_WRONG_CONTENT_TYPE);
d448 1
a448 1
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS, PKCS7_R_NO_SIGNERS);
d453 1
a453 1
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS, ERR_R_MALLOC_FAILURE);
d470 1
a470 2
			PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,
			    PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND);
d495 1
a495 1
		PKCS7err(PKCS7_F_PKCS7_ENCRYPT, ERR_R_MALLOC_FAILURE);
d502 1
a502 1
		PKCS7err(PKCS7_F_PKCS7_ENCRYPT, PKCS7_R_ERROR_SETTING_CIPHER);
d509 1
a509 2
			PKCS7err(PKCS7_F_PKCS7_ENCRYPT,
			    PKCS7_R_ERROR_ADDING_RECIPIENT);
d534 1
a534 1
		PKCS7err(PKCS7_F_PKCS7_DECRYPT, PKCS7_R_INVALID_NULL_POINTER);
d539 1
a539 1
		PKCS7err(PKCS7_F_PKCS7_DECRYPT, PKCS7_R_WRONG_CONTENT_TYPE);
d544 1
a544 2
		PKCS7err(PKCS7_F_PKCS7_DECRYPT,
		    PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
d549 1
a549 1
		PKCS7err(PKCS7_F_PKCS7_DECRYPT, PKCS7_R_DECRYPT_ERROR);
d558 1
a558 1
			PKCS7err(PKCS7_F_PKCS7_DECRYPT, ERR_R_MALLOC_FAILURE);
@


1.20
log
@Don't support very old versions of Netscape (is there any other kind?).

Apparently "very old" Netscape versions illegally included empty content
and a detached signature.  OpenSSL removed the #if 0 that protected
these users and added a new button OPENSSL_DONT_SUPPORT_OLD_NETSCAPE.
It appears to be off by default to keep the hopes and dreams of very old
Netscape users alive.  We decided to be rebels and disable support.

If you installed your browser from floppy disks, it's time to upgrade!

Based on OpenSSL commit: 02a938c953b3e1ced71d9a832de1618f907eb96d

ok tedu@@, miod@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_smime.c,v 1.19 2014/11/09 19:17:13 miod Exp $ */
d327 5
a331 2
				X509_STORE_CTX_set_default(&cert_ctx,
				    "smime_sign");
@


1.19
log
@GOST crypto algorithms (well, most of them), ported from the removed GOST
engine to regular EVP citizens, contributed by Dmitry Eremin-Solenikov;
libcrypto bits only for now.

This is a verbatim import of Dmitry's work, and does not compile in this
state; the forthcoming commits will address these issues.

None of the GOST code is enabled in libcrypto yet, for it still gets
compiled with OPENSSL_NO_GOST defined. However, the public header gost.h
will be installed.
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_smime.c,v 1.18 2014/07/11 08:44:49 jsing Exp $ */
d290 4
a293 3
#if 0
	/* NB: this test commented out because some versions of Netscape
	 * illegally include zero length content when signing data.
a294 1

a299 1
#endif
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_smime.c,v 1.17 2014/07/10 21:42:43 miod Exp $ */
d195 2
@


1.17
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_smime.c,v 1.16 2014/07/10 21:40:59 miod Exp $ */
d62 2
a63 1
#include "cryptlib.h"
@


1.16
log
@Fix a double free in a can't-fail error path in PKCS7_decrypt(), by removing
the error path altogether and simplifying the local variables as a result.
joint work with jsing@@; ok jsing@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_smime.c,v 1.15 2014/06/29 17:05:36 jsing Exp $ */
d202 1
a202 1
			    !PKCS7_add_attrib_smimecap (si, smcap))
d317 5
a321 4
			if (!(flags & PKCS7_NOCHAIN)) {
				if (!X509_STORE_CTX_init(&cert_ctx, store, signer,
				    p7->d.sign->cert)) {
					PKCS7err(PKCS7_F_PKCS7_VERIFY, ERR_R_X509_LIB);
d325 4
a328 2
				X509_STORE_CTX_set_default(&cert_ctx, "smime_sign");
			} else if (!X509_STORE_CTX_init (&cert_ctx, store, signer, NULL)) {
d340 2
a341 1
				PKCS7err(PKCS7_F_PKCS7_VERIFY, PKCS7_R_CERTIFICATE_VERIFY_ERROR);
d350 2
a351 1
	/* Performance optimization: if the content is a memory BIO then
d360 1
d380 2
a381 1
	} else tmpout = out;
d405 8
a412 7
		si = sk_PKCS7_SIGNER_INFO_value(sinfos, i);
		signer = sk_X509_value (signers, i);
		j = PKCS7_signatureVerify(p7bio, p7, si, signer);
		if (j <= 0) {
			PKCS7err(PKCS7_F_PKCS7_VERIFY,
			    PKCS7_R_SIGNATURE_FAILURE);
			goto err;
a413 1
	}
a422 1

d428 2
a429 1
STACK_OF(X509) *PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs, int flags)
d467 2
a468 5
		if (certs) signer = X509_find_by_issuer_and_serial (certs,
		    ias->issuer, ias->serial);
		if (!signer && !(flags & PKCS7_NOINTERN) &&
		    p7->d.sign->cert) signer =
			    X509_find_by_issuer_and_serial (p7->d.sign->cert,
d470 4
@


1.15
log
@KNF.

I just spent too long chasing a bug in here and really should have done
this first. Gem of the day... is it an if test or a for loop? No, it is a
super ifloop!

if (!(flags & PKCS7_NOVERIFY)) for (k = 0; k < sk_X509_num(signers); k++) {
@
text
@d1 1
a1 1
/* $OpenBSD: pk7_smime.c,v 1.14 2014/06/12 15:49:30 deraadt Exp $ */
d554 2
a555 1
		BIO *tmpbuf, *bread;
d562 2
a563 7
		if (!(bread = BIO_push(tmpbuf, tmpmem))) {
			PKCS7err(PKCS7_F_PKCS7_DECRYPT, ERR_R_MALLOC_FAILURE);
			BIO_free_all(tmpbuf);
			BIO_free_all(tmpmem);
			return 0;
		}
		ret = SMIME_text(bread, data);
d568 1
a568 1
		BIO_free_all(bread);
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d68 3
a70 2
PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
		  BIO *data, int flags)
d75 2
a76 3
	if(!(p7 = PKCS7_new()))
		{
		PKCS7err(PKCS7_F_PKCS7_SIGN,ERR_R_MALLOC_FAILURE);
d78 1
a78 1
		}
d86 2
a87 3
    	if (pkey && !PKCS7_sign_add_signer(p7, signcert, pkey, NULL, flags))
		{
		PKCS7err(PKCS7_F_PKCS7_SIGN,PKCS7_R_PKCS7_ADD_SIGNER_ERROR);
d89 1
a89 1
		}
d91 2
a92 4
	if(!(flags & PKCS7_NOCERTS))
		{
		for(i = 0; i < sk_X509_num(certs); i++)
			{
a94 1
			}
d96 1
d98 1
a98 1
	if(flags & PKCS7_DETACHED)
d107 1
a107 1
	err:
d112 3
a114 2
int PKCS7_final(PKCS7 *p7, BIO *data, int flags)
	{
d117 3
a119 3
	if (!(p7bio = PKCS7_dataInit(p7, NULL)))
		{
		PKCS7err(PKCS7_F_PKCS7_FINAL,ERR_R_MALLOC_FAILURE);
d121 1
a121 1
		}
d127 2
a128 4

        if (!PKCS7_dataFinal(p7,p7bio))
		{
		PKCS7err(PKCS7_F_PKCS7_FINAL,PKCS7_R_PKCS7_DATASIGN);
d130 1
a130 1
		}
d134 1
a134 1
	err:
d138 1
a138 2

	}
d142 3
a144 2
static int add_cipher_smcap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
	{
d148 1
a148 1
	}
d150 3
a152 2
static int add_digest_smcap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
	{
d156 1
a156 1
	}
d158 4
a161 4
PKCS7_SIGNER_INFO *PKCS7_sign_add_signer(PKCS7 *p7, X509 *signcert,
					EVP_PKEY *pkey, const EVP_MD *md,
					int flags)
	{
d164 2
a165 2
	if(!X509_check_private_key(signcert, pkey))
		{
d167 3
a169 3
			PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
                return NULL;
		}
d171 1
a171 2
    	if (!(si = PKCS7_add_signature(p7,signcert,pkey, md)))
		{
d173 1
a173 1
				PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR);
d175 1
a175 1
		}
d177 1
a177 2
	if(!(flags & PKCS7_NOCERTS))
		{
d180 1
a180 1
		}
d182 1
a182 2
	if(!(flags & PKCS7_NOATTR))
		{
d186 2
a187 4
		if(!(flags & PKCS7_NOSMIMECAP))
			{
			if(!(smcap = sk_X509_ALGOR_new_null()))
				{
d189 1
a189 1
					ERR_R_MALLOC_FAILURE);
d191 12
a202 12
				}
			if (!add_cipher_smcap(smcap, NID_aes_256_cbc, -1)
			|| !add_digest_smcap(smcap, NID_id_GostR3411_94, -1)
			|| !add_cipher_smcap(smcap, NID_id_Gost28147_89, -1)
				|| !add_cipher_smcap(smcap, NID_aes_192_cbc, -1)
				|| !add_cipher_smcap(smcap, NID_aes_128_cbc, -1)
			|| !add_cipher_smcap(smcap, NID_des_ede3_cbc, -1)
				|| !add_cipher_smcap(smcap, NID_rc2_cbc, 128)
				|| !add_cipher_smcap(smcap, NID_rc2_cbc, 64)
				|| !add_cipher_smcap(smcap, NID_des_cbc, -1)
				|| !add_cipher_smcap(smcap, NID_rc2_cbc, 40)
				|| !PKCS7_add_attrib_smimecap (si, smcap))
d206 2
a207 3
			}
		if (flags & PKCS7_REUSE_DIGEST)
			{
d211 1
a211 1
					!PKCS7_SIGNER_INFO_sign(si))
a212 1
			}
d214 1
d216 2
a217 1
	err:
d221 1
a221 1
	}
d227 3
a229 2
static int pkcs7_copy_existing_digest(PKCS7 *p7, PKCS7_SIGNER_INFO *si)
	{
d234 1
d236 1
a236 2
	for (i = 0; i < sk_PKCS7_SIGNER_INFO_num(sinfos); i++)
		{
d243 1
a243 2
				sitmp->digest_alg->algorithm))
			{
d246 1
a246 1
			}
d248 1
a248 1
		}
d254 1
a254 1
			PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND);
d256 1
a256 1
	}
d258 3
a260 2
int PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,
					BIO *indata, BIO *out, int flags)
d268 1
a268 1
	int i, j=0, k, ret = 0;
d272 2
a273 2
	if(!p7) {
		PKCS7err(PKCS7_F_PKCS7_VERIFY,PKCS7_R_INVALID_NULL_POINTER);
d277 2
a278 2
	if(!PKCS7_type_is_signed(p7)) {
		PKCS7err(PKCS7_F_PKCS7_VERIFY,PKCS7_R_WRONG_CONTENT_TYPE);
d283 2
a284 2
	if(PKCS7_get_detached(p7) && !indata) {
		PKCS7err(PKCS7_F_PKCS7_VERIFY,PKCS7_R_NO_CONTENT);
d293 2
a294 2
	if(!PKCS7_get_detached(p7) && indata) {
				PKCS7err(PKCS7_F_PKCS7_VERIFY,PKCS7_R_CONTENT_AND_DATA_PRESENT);
d301 2
a302 2
	if(!sinfos || !sk_PKCS7_SIGNER_INFO_num(sinfos)) {
		PKCS7err(PKCS7_F_PKCS7_VERIFY,PKCS7_R_NO_SIGNATURES_ON_DATA);
d309 2
a310 1
	if(!signers) return 0;
d314 13
a326 7
	if (!(flags & PKCS7_NOVERIFY)) for (k = 0; k < sk_X509_num(signers); k++) {
		signer = sk_X509_value (signers, k);
		if (!(flags & PKCS7_NOCHAIN)) {
			if(!X509_STORE_CTX_init(&cert_ctx, store, signer,
							p7->d.sign->cert))
				{
				PKCS7err(PKCS7_F_PKCS7_VERIFY,ERR_R_X509_LIB);
d329 15
a343 18
				}
			X509_STORE_CTX_set_default(&cert_ctx, "smime_sign");
		} else if(!X509_STORE_CTX_init (&cert_ctx, store, signer, NULL)) {
			PKCS7err(PKCS7_F_PKCS7_VERIFY,ERR_R_X509_LIB);
			sk_X509_free(signers);
			return 0;
		}
		if (!(flags & PKCS7_NOCRL))
			X509_STORE_CTX_set0_crls(&cert_ctx, p7->d.sign->crl);
		i = X509_verify_cert(&cert_ctx);
		if (i <= 0) j = X509_STORE_CTX_get_error(&cert_ctx);
		X509_STORE_CTX_cleanup(&cert_ctx);
		if (i <= 0) {
			PKCS7err(PKCS7_F_PKCS7_VERIFY,PKCS7_R_CERTIFICATE_VERIFY_ERROR);
			ERR_asprintf_error_data("Verify error:%s",
					 X509_verify_cert_error_string(j));
			sk_X509_free(signers);
			return 0;
a344 2
		/* Check for revocation status here */
	}
d352 1
a352 3

	if (indata && (BIO_method_type(indata) == BIO_TYPE_MEM))
		{
d357 2
a358 3
		if (tmpin == NULL)
			{
			PKCS7err(PKCS7_F_PKCS7_VERIFY,ERR_R_MALLOC_FAILURE);
a359 1
			}
d361 1
a361 1
	else
a362 1
		
d364 2
a365 1
	if (!(p7bio=PKCS7_dataInit(p7,tmpin)))
d368 3
a370 3
	if(flags & PKCS7_TEXT) {
		if(!(tmpout = BIO_new(BIO_s_mem()))) {
			PKCS7err(PKCS7_F_PKCS7_VERIFY,ERR_R_MALLOC_FAILURE);
d377 6
a382 5
	for (;;)
	{
		i=BIO_read(p7bio,buf,sizeof(buf));
		if (i <= 0) break;
		if (tmpout) BIO_write(tmpout, buf, i);
d385 4
a388 3
	if(flags & PKCS7_TEXT) {
		if(!SMIME_text(tmpout, out)) {
			PKCS7err(PKCS7_F_PKCS7_VERIFY,PKCS7_R_SMIME_TEXT_ERROR);
d397 2
a398 3
	    for (i=0; i<sk_PKCS7_SIGNER_INFO_num(sinfos); i++)
		{
		si=sk_PKCS7_SIGNER_INFO_value(sinfos,i);
d400 1
a400 1
		j=PKCS7_signatureVerify(p7bio,p7,si, signer);
d402 2
a403 1
			PKCS7err(PKCS7_F_PKCS7_VERIFY,PKCS7_R_SIGNATURE_FAILURE);
d410 5
a414 6
	err:
	
	if (tmpin == indata)
		{
		if (indata) BIO_pop(p7bio);
		}
d431 3
a433 2
	if(!p7) {
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,PKCS7_R_INVALID_NULL_POINTER);
d437 3
a439 2
	if(!PKCS7_type_is_signed(p7)) {
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,PKCS7_R_WRONG_CONTENT_TYPE);
a443 1

d445 2
a446 3

	if(sk_PKCS7_SIGNER_INFO_num(sinfos) <= 0) {
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,PKCS7_R_NO_SIGNERS);
d450 2
a451 2
	if(!(signers = sk_X509_new_null())) {
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,ERR_R_MALLOC_FAILURE);
d455 4
a458 5
	for (i = 0; i < sk_PKCS7_SIGNER_INFO_num(sinfos); i++)
	{
	    si = sk_PKCS7_SIGNER_INFO_value(sinfos, i);
	    ias = si->issuer_and_serial;
	    signer = NULL;
d460 9
a468 8
	    if (certs) signer = X509_find_by_issuer_and_serial (certs,
					 	ias->issuer, ias->serial);
	    if (!signer && !(flags & PKCS7_NOINTERN)
			&& p7->d.sign->cert) signer =
		              X509_find_by_issuer_and_serial (p7->d.sign->cert,
					      	ias->issuer, ias->serial);
	    if (!signer) {
			PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND);
d471 1
a471 1
	    }
d473 4
a476 4
	    if (!sk_X509_push(signers, signer)) {
		sk_X509_free(signers);
		return NULL;
	    }
a480 1

d483 3
a485 2
PKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
								int flags)
d491 3
a493 2
	if(!(p7 = PKCS7_new())) {
		PKCS7err(PKCS7_F_PKCS7_ENCRYPT,ERR_R_MALLOC_FAILURE);
d500 1
a500 1
		PKCS7err(PKCS7_F_PKCS7_ENCRYPT,PKCS7_R_ERROR_SETTING_CIPHER);
d504 1
a504 1
	for(i = 0; i < sk_X509_num(certs); i++) {
d506 1
a506 1
		if(!PKCS7_add_recipient(p7, x509)) {
d508 1
a508 1
					PKCS7_R_ERROR_ADDING_RECIPIENT);
d519 1
a519 2
	err:

a522 1

d525 2
a526 1
int PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags)
d532 2
a533 2
	if(!p7) {
		PKCS7err(PKCS7_F_PKCS7_DECRYPT,PKCS7_R_INVALID_NULL_POINTER);
d537 2
a538 2
	if(!PKCS7_type_is_enveloped(p7)) {
		PKCS7err(PKCS7_F_PKCS7_DECRYPT,PKCS7_R_WRONG_CONTENT_TYPE);
d542 1
a542 1
	if(cert && !X509_check_private_key(cert, pkey)) {
d544 1
a544 1
				PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
d548 1
a548 1
	if(!(tmpmem = PKCS7_dataDecode(p7, pkey, NULL, cert))) {
d556 1
a556 1
		if(!(tmpbuf = BIO_new(BIO_f_buffer()))) {
d561 1
a561 1
		if(!(bread = BIO_push(tmpbuf, tmpmem))) {
d568 1
a568 2
		if (ret > 0 && BIO_method_type(tmpmem) == BIO_TYPE_CIPHER)
			{
d571 1
a571 1
			}
d575 1
a575 1
		for(;;) {
d577 1
a577 2
			if(i <= 0)
				{
d579 2
a580 2
				if (BIO_method_type(tmpmem) == BIO_TYPE_CIPHER)
					{
d583 1
a583 2
					}
					
d585 2
a586 3
				}
			if (BIO_write(data, buf, i) != i)
				{
d589 1
a589 1
				}
@


1.13
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d1 1
a1 1
/* pk7_smime.c */
@


1.12
log
@resolve conflicts
@
text
@d343 1
a343 1
			ERR_add_error_data(2, "Verify error:",
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d576 5
d586 16
a601 2
			if(i <= 0) break;
			BIO_write(data, buf, i);
d604 1
a604 1
		return 1;
@


1.10
log
@resolve conflicts
@
text
@d66 2
d71 1
a71 4
	PKCS7 *p7 = NULL;
	PKCS7_SIGNER_INFO *si;
	BIO *p7bio = NULL;
	STACK_OF(X509_ALGOR) *smcap = NULL;
d74 2
a75 6
	if(!X509_check_private_key(signcert, pkey)) {
		PKCS7err(PKCS7_F_PKCS7_SIGN,PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
                return NULL;
	}

	if(!(p7 = PKCS7_new())) {
d78 1
a78 1
	}
d86 3
a88 2
	if (!(si = PKCS7_add_signature(p7,signcert,pkey,EVP_sha1()))) {
		PKCS7err(PKCS7_F_PKCS7_SIGN,PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR);
d90 1
a90 1
	}
d92 4
a95 4
	if(!(flags & PKCS7_NOCERTS)) {
		if (!PKCS7_add_certificate(p7, signcert))
			goto err;
		if(certs) for(i = 0; i < sk_X509_num(certs); i++)
d98 16
a113 1
	}
d115 5
a119 6
	if(!(flags & PKCS7_NOATTR)) {
		if (!PKCS7_add_signed_attribute(si, NID_pkcs9_contentType,
				V_ASN1_OBJECT, OBJ_nid2obj(NID_pkcs7_data)))
			goto err;
		/* Add SMIMECapabilities */
		if(!(flags & PKCS7_NOSMIMECAP))
d121 2
a122 3
		if(!(smcap = sk_X509_ALGOR_new_null())) {
			PKCS7err(PKCS7_F_PKCS7_SIGN,ERR_R_MALLOC_FAILURE);
			goto err;
d124 10
a133 22
#ifndef OPENSSL_NO_DES
		if (!PKCS7_simple_smimecap (smcap, NID_des_ede3_cbc, -1))
			goto err;
#endif
#ifndef OPENSSL_NO_RC2
		if (!PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 128))
			goto err;
		if (!PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 64))
			goto err;
#endif
#ifndef OPENSSL_NO_DES
		if (!PKCS7_simple_smimecap (smcap, NID_des_cbc, -1))
			goto err;
#endif
#ifndef OPENSSL_NO_RC2
		if (!PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 40))
			goto err;
#endif
		if (!PKCS7_add_attrib_smimecap (si, smcap))
			goto err;
		sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
		smcap = NULL;
a134 1
	}
d136 1
a136 1
	if(flags & PKCS7_DETACHED)PKCS7_set_detached(p7, 1);
d138 2
a139 2
	if (flags & PKCS7_STREAM)
		return p7;
d141 1
a142 3
	if (!(p7bio = PKCS7_dataInit(p7, NULL))) {
		PKCS7err(PKCS7_F_PKCS7_SIGN,ERR_R_MALLOC_FAILURE);
		goto err;
d145 1
a145 1
	SMIME_crlf_copy(data, p7bio, flags);
d147 6
d154 5
a158 3
	if (!PKCS7_dataFinal(p7,p7bio)) {
		PKCS7err(PKCS7_F_PKCS7_SIGN,PKCS7_R_PKCS7_DATASIGN);
		goto err;
d161 67
a227 6
	BIO_free_all(p7bio);
	return p7;
err:
	sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
	BIO_free_all(p7bio);
	PKCS7_free(p7);
d229 36
a264 1
}
d455 1
a455 1
		return NULL;
d478 1
a478 1
			return NULL;
d482 2
a483 2
			sk_X509_free(signers);
			return NULL;
d506 1
a506 1
	if(!PKCS7_set_cipher(p7, cipher)) {
d520 2
a521 4
	if(!(p7bio = PKCS7_dataInit(p7, NULL))) {
		PKCS7err(PKCS7_F_PKCS7_ENCRYPT,ERR_R_MALLOC_FAILURE);
		goto err;
	}
d523 2
a524 11
	SMIME_crlf_copy(in, p7bio, flags);

	(void)BIO_flush(p7bio);

        if (!PKCS7_dataFinal(p7,p7bio)) {
		PKCS7err(PKCS7_F_PKCS7_ENCRYPT,PKCS7_R_PKCS7_DATAFINAL_ERROR);
		goto err;
	}
        BIO_free_all(p7bio);

	return p7;
@


1.9
log
@resolve conflicts
@
text
@d232 1
a232 2
			X509_STORE_CTX_set_purpose(&cert_ctx,
						X509_PURPOSE_SMIME_SIGN);
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d285 1
@


1.7
log
@resolve conflicts
@
text
@d3 1
a3 1
 * project 1999.
d6 1
a6 1
 * Copyright (c) 1999-2003 The OpenSSL Project.  All rights reserved.
d69 1
a69 1
	PKCS7 *p7;
d71 2
a72 2
	BIO *p7bio;
	STACK_OF(X509_ALGOR) *smcap;
d85 2
a86 1
	PKCS7_set_type(p7, NID_pkcs7_signed);
d88 2
a89 1
	PKCS7_content_new(p7, NID_pkcs7_data);
d91 1
a91 1
    	if (!(si = PKCS7_add_signature(p7,signcert,pkey,EVP_sha1()))) {
d93 1
a93 1
		return NULL;
d97 2
a98 1
		PKCS7_add_certificate(p7, signcert);
d100 2
a101 6
			PKCS7_add_certificate(p7, sk_X509_value(certs, i));
	}

	if(!(p7bio = PKCS7_dataInit(p7, NULL))) {
		PKCS7err(PKCS7_F_PKCS7_SIGN,ERR_R_MALLOC_FAILURE);
		return NULL;
a103 3

	SMIME_crlf_copy(data, p7bio, flags);

d105 3
a107 2
		PKCS7_add_signed_attribute(si, NID_pkcs9_contentType,
				V_ASN1_OBJECT, OBJ_nid2obj(NID_pkcs7_data));
d113 1
a113 1
			return NULL;
d116 2
a117 1
		PKCS7_simple_smimecap (smcap, NID_des_ede3_cbc, -1);
d120 4
a123 2
		PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 128);
		PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 64);
d126 2
a127 1
		PKCS7_simple_smimecap (smcap, NID_des_cbc, -1);
d130 2
a131 1
		PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 40);
d133 2
a134 1
		PKCS7_add_attrib_smimecap (si, smcap);
d136 1
d142 13
a154 1
        if (!PKCS7_dataFinal(p7,p7bio)) {
d156 1
a156 1
		return NULL;
d159 1
a159 1
        BIO_free_all(p7bio);
d161 5
d239 2
d277 2
a278 1
	p7bio=PKCS7_dataInit(p7,tmpin);
d357 1
a357 1
		return 0;
d380 1
a380 1
			return 0;
d383 4
a386 1
	    sk_X509_push(signers, signer);
d406 2
a407 1
	PKCS7_set_type(p7, NID_pkcs7_enveloped);
d429 1
a429 1
	BIO_flush(p7bio);
d441 1
a441 1
	BIO_free(p7bio);
d463 1
a463 1
	if(!X509_check_private_key(cert, pkey)) {
d479 1
d484 2
@


1.6
log
@resolve conflicts
@
text
@d299 1
a299 2
		if(indata) BIO_pop(p7bio);
		BIO_free_all(p7bio);
d301 1
a301 2
	else
		BIO_free_all(tmpin);
@


1.5
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d158 1
a158 1
	BIO *tmpout;
d231 24
a254 1
	p7bio=PKCS7_dataInit(p7,indata);
d296 8
a304 2
	if(indata) BIO_pop(p7bio);
	BIO_free_all(p7bio);
a327 4
	if(!(signers = sk_X509_new_null())) {
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,ERR_R_MALLOC_FAILURE);
		return NULL;
	}
d336 5
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d6 1
a6 1
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
@


1.3
log
@openssl-engine-0.9.6a merge
@
text
@d118 1
a118 1
#ifndef NO_DES
d121 1
a121 1
#ifndef NO_RC2
d125 1
a125 1
#ifndef NO_DES
d128 1
a128 1
#ifndef NO_RC2
d204 7
a210 2
			X509_STORE_CTX_init(&cert_ctx, store, signer,
							p7->d.sign->cert);
d213 5
a217 1
		} else X509_STORE_CTX_init (&cert_ctx, store, signer, NULL);
d339 1
a339 1
PKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, EVP_CIPHER *cipher,
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d156 1
a156 1
	int i, j=0, k;
d261 1
a261 5
	sk_X509_free(signers);
	if(indata) BIO_pop(p7bio);
	BIO_free_all(p7bio);

	return 1;
d265 2
a267 1
	BIO_free(p7bio);
d269 1
a269 1
	return 0;
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d67 1
a67 1
							BIO *data, int flags)
d72 1
a72 1
	STACK *smcap;
d112 3
a114 1
		if(!(smcap = sk_new(NULL))) {
d132 2
a133 1
		sk_pop_free(smcap, X509_ALGOR_free);
d156 1
a156 1
	int i, j=0;
d175 4
d185 1
d201 2
a202 2
	if (!(flags & PKCS7_NOVERIFY)) for (i = 0; i < sk_X509_num(signers); i++) {
		signer = sk_X509_value (signers, i);
d293 1
a293 1
	if(!(signers = sk_X509_new(NULL))) {
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d67 1
a67 1
		  BIO *data, int flags)
d72 1
a72 1
	STACK_OF(X509_ALGOR) *smcap;
d112 1
a112 3
		if(!(flags & PKCS7_NOSMIMECAP))
		{
		if(!(smcap = sk_X509_ALGOR_new_null())) {
d116 1
a116 1
#ifndef OPENSSL_NO_DES
d119 1
a119 1
#ifndef OPENSSL_NO_RC2
d123 1
a123 1
#ifndef OPENSSL_NO_DES
d126 1
a126 1
#ifndef OPENSSL_NO_RC2
d130 1
a130 2
		sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
		}
d153 1
a153 1
	int i, j=0, k, ret = 0;
a171 4
#if 0
	/* NB: this test commented out because some versions of Netscape
	 * illegally include zero length content when signing data.
	 */
a177 1
#endif
d193 2
a194 2
	if (!(flags & PKCS7_NOVERIFY)) for (k = 0; k < sk_X509_num(signers); k++) {
		signer = sk_X509_value (signers, k);
d196 2
a197 7
			if(!X509_STORE_CTX_init(&cert_ctx, store, signer,
							p7->d.sign->cert))
				{
				PKCS7err(PKCS7_F_PKCS7_VERIFY,ERR_R_X509_LIB);
				sk_X509_free(signers);
				return 0;
				}
d200 1
a200 5
		} else if(!X509_STORE_CTX_init (&cert_ctx, store, signer, NULL)) {
			PKCS7err(PKCS7_F_PKCS7_VERIFY,ERR_R_X509_LIB);
			sk_X509_free(signers);
			return 0;
		}
d253 5
a257 1
	ret = 1;
a260 2
	if(indata) BIO_pop(p7bio);
	BIO_free_all(p7bio);
d262 1
d264 1
a264 1
	return ret;
d285 1
a285 1
	if(!(signers = sk_X509_new_null())) {
d325 1
a325 1
PKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
@


1.1.1.2
log
@import 0.9.7c
@
text
@d6 1
a6 1
 * Copyright (c) 1999-2003 The OpenSSL Project.  All rights reserved.
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d158 1
a158 1
	BIO *tmpin, *tmpout;
d231 1
a231 24
	/* Performance optimization: if the content is a memory BIO then
	 * store its contents in a temporary read only memory BIO. This
	 * avoids potentially large numbers of slow copies of data which will
	 * occur when reading from a read write memory BIO when signatures
	 * are calculated.
	 */

	if (indata && (BIO_method_type(indata) == BIO_TYPE_MEM))
		{
		char *ptr;
		long len;
		len = BIO_get_mem_data(indata, &ptr);
		tmpin = BIO_new_mem_buf(ptr, len);
		if (tmpin == NULL)
			{
			PKCS7err(PKCS7_F_PKCS7_VERIFY,ERR_R_MALLOC_FAILURE);
			return 0;
			}
		}
	else
		tmpin = indata;
		

	p7bio=PKCS7_dataInit(p7,tmpin);
a272 8
	
	if (tmpin == indata)
		{
		if(indata) BIO_pop(p7bio);
		BIO_free_all(p7bio);
		}
	else
		BIO_free_all(tmpin);
d274 2
d299 4
a310 5
	}

	if(!(signers = sk_X509_new_null())) {
		PKCS7err(PKCS7_F_PKCS7_GET0_SIGNERS,ERR_R_MALLOC_FAILURE);
		return NULL;
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@d299 2
a300 1
		if (indata) BIO_pop(p7bio);
d302 2
a303 1
	BIO_free_all(p7bio);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d3 1
a3 1
 * project.
d6 1
a6 1
 * Copyright (c) 1999-2004 The OpenSSL Project.  All rights reserved.
d69 1
a69 1
	PKCS7 *p7 = NULL;
d71 2
a72 2
	BIO *p7bio = NULL;
	STACK_OF(X509_ALGOR) *smcap = NULL;
d85 1
a85 2
	if (!PKCS7_set_type(p7, NID_pkcs7_signed))
		goto err;
d87 1
a87 2
	if (!PKCS7_content_new(p7, NID_pkcs7_data))
		goto err;
d89 1
a89 1
	if (!(si = PKCS7_add_signature(p7,signcert,pkey,EVP_sha1()))) {
d91 1
a91 1
		goto err;
d95 1
a95 2
		if (!PKCS7_add_certificate(p7, signcert))
			goto err;
d97 6
a102 2
			if (!PKCS7_add_certificate(p7, sk_X509_value(certs, i)))
				goto err;
d105 3
d109 2
a110 3
		if (!PKCS7_add_signed_attribute(si, NID_pkcs9_contentType,
				V_ASN1_OBJECT, OBJ_nid2obj(NID_pkcs7_data)))
			goto err;
d116 1
a116 1
			goto err;
d119 1
a119 2
		if (!PKCS7_simple_smimecap (smcap, NID_des_ede3_cbc, -1))
			goto err;
d122 2
a123 4
		if (!PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 128))
			goto err;
		if (!PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 64))
			goto err;
d126 1
a126 2
		if (!PKCS7_simple_smimecap (smcap, NID_des_cbc, -1))
			goto err;
d129 1
a129 2
		if (!PKCS7_simple_smimecap (smcap, NID_rc2_cbc, 40))
			goto err;
d131 1
a131 2
		if (!PKCS7_add_attrib_smimecap (si, smcap))
			goto err;
a132 1
		smcap = NULL;
d138 1
a138 13
	if (flags & PKCS7_STREAM)
		return p7;


	if (!(p7bio = PKCS7_dataInit(p7, NULL))) {
		PKCS7err(PKCS7_F_PKCS7_SIGN,ERR_R_MALLOC_FAILURE);
		goto err;
	}

	SMIME_crlf_copy(data, p7bio, flags);


	if (!PKCS7_dataFinal(p7,p7bio)) {
d140 1
a140 1
		goto err;
d143 1
a143 1
	BIO_free_all(p7bio);
a144 5
err:
	sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
	BIO_free_all(p7bio);
	PKCS7_free(p7);
	return NULL;
a217 2
		if (!(flags & PKCS7_NOCRL))
			X509_STORE_CTX_set0_crls(&cert_ctx, p7->d.sign->crl);
d254 1
a254 2
	if (!(p7bio=PKCS7_dataInit(p7,tmpin)))
		goto err;
d333 1
a333 1
		return NULL;
d356 1
a356 1
			return NULL;
d359 1
a359 4
	    if (!sk_X509_push(signers, signer)) {
			sk_X509_free(signers);
			return NULL;
	    }
d379 1
a379 2
	if (!PKCS7_set_type(p7, NID_pkcs7_enveloped))
		goto err;
d401 1
a401 1
	(void)BIO_flush(p7bio);
d413 1
a413 1
	BIO_free_all(p7bio);
d435 1
a435 1
	if(cert && !X509_check_private_key(cert, pkey)) {
a450 1
			BIO_free_all(tmpmem);
a454 2
			BIO_free_all(tmpbuf);
			BIO_free_all(tmpmem);
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
a284 1
		BIO_set_mem_eof_return(tmpout, 0);
@


1.1.1.7
log
@import of OpenSSL 0.9.8k
@
text
@d232 2
a233 1
			X509_STORE_CTX_set_default(&cert_ctx, "smime_sign");
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@a65 2
static int pkcs7_copy_existing_digest(PKCS7 *p7, PKCS7_SIGNER_INFO *si);

d69 4
a72 1
	PKCS7 *p7;
d75 6
a80 2
	if(!(p7 = PKCS7_new()))
		{
d83 1
a83 1
		}
d91 2
a92 3
    	if (pkey && !PKCS7_sign_add_signer(p7, signcert, pkey, NULL, flags))
		{
		PKCS7err(PKCS7_F_PKCS7_SIGN,PKCS7_R_PKCS7_ADD_SIGNER_ERROR);
d94 1
a94 1
		}
d96 4
a99 4
	if(!(flags & PKCS7_NOCERTS))
		{
		for(i = 0; i < sk_X509_num(certs); i++)
			{
d102 1
a102 2
			}
		}
d104 6
a109 19
	if(flags & PKCS7_DETACHED)
		PKCS7_set_detached(p7, 1);

	if (flags & (PKCS7_STREAM|PKCS7_PARTIAL))
		return p7;

	if (PKCS7_final(p7, data, flags))
		return p7;

	err:
	PKCS7_free(p7);
	return NULL;
}

int PKCS7_final(PKCS7 *p7, BIO *data, int flags)
	{
	BIO *p7bio;
	int ret = 0;
	if (!(p7bio = PKCS7_dataInit(p7, NULL)))
d111 26
a136 2
		PKCS7err(PKCS7_F_PKCS7_FINAL,ERR_R_MALLOC_FAILURE);
		return 0;
d138 1
d140 1
a140 1
	SMIME_crlf_copy(data, p7bio, flags);
d142 2
a143 1
	(void)BIO_flush(p7bio);
d146 2
a147 3
        if (!PKCS7_dataFinal(p7,p7bio))
		{
		PKCS7err(PKCS7_F_PKCS7_FINAL,PKCS7_R_PKCS7_DATASIGN);
a148 9
		}

	ret = 1;

	err:
	BIO_free_all(p7bio);

	return ret;

d151 1
a151 1
/* Check to see if a cipher exists and if so add S/MIME capabilities */
a152 6
static int add_cipher_smcap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
	{
	if (EVP_get_cipherbynid(nid))
		return PKCS7_simple_smimecap(sk, nid, arg);
	return 1;
	}
d154 3
a156 5
static int add_digest_smcap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
	{
	if (EVP_get_digestbynid(nid))
		return PKCS7_simple_smimecap(sk, nid, arg);
	return 1;
d159 6
a164 67
PKCS7_SIGNER_INFO *PKCS7_sign_add_signer(PKCS7 *p7, X509 *signcert,
					EVP_PKEY *pkey, const EVP_MD *md,
					int flags)
	{
	PKCS7_SIGNER_INFO *si = NULL;
	STACK_OF(X509_ALGOR) *smcap = NULL;
	if(!X509_check_private_key(signcert, pkey))
		{
		PKCS7err(PKCS7_F_PKCS7_SIGN_ADD_SIGNER,
			PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
                return NULL;
		}

    	if (!(si = PKCS7_add_signature(p7,signcert,pkey, md)))
		{
		PKCS7err(PKCS7_F_PKCS7_SIGN_ADD_SIGNER,
				PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR);
		return NULL;
		}

	if(!(flags & PKCS7_NOCERTS))
		{
		if (!PKCS7_add_certificate(p7, signcert))
			goto err;
		}

	if(!(flags & PKCS7_NOATTR))
		{
		if (!PKCS7_add_attrib_content_type(si, NULL))
			goto err;
		/* Add SMIMECapabilities */
		if(!(flags & PKCS7_NOSMIMECAP))
			{
			if(!(smcap = sk_X509_ALGOR_new_null()))
				{
				PKCS7err(PKCS7_F_PKCS7_SIGN_ADD_SIGNER,
					ERR_R_MALLOC_FAILURE);
				goto err;
				}
			if (!add_cipher_smcap(smcap, NID_aes_256_cbc, -1)
			|| !add_digest_smcap(smcap, NID_id_GostR3411_94, -1)
			|| !add_cipher_smcap(smcap, NID_id_Gost28147_89, -1)
				|| !add_cipher_smcap(smcap, NID_aes_192_cbc, -1)
				|| !add_cipher_smcap(smcap, NID_aes_128_cbc, -1)
			|| !add_cipher_smcap(smcap, NID_des_ede3_cbc, -1)
				|| !add_cipher_smcap(smcap, NID_rc2_cbc, 128)
				|| !add_cipher_smcap(smcap, NID_rc2_cbc, 64)
				|| !add_cipher_smcap(smcap, NID_des_cbc, -1)
				|| !add_cipher_smcap(smcap, NID_rc2_cbc, 40)
				|| !PKCS7_add_attrib_smimecap (si, smcap))
				goto err;
			sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
			smcap = NULL;
			}
		if (flags & PKCS7_REUSE_DIGEST)
			{
			if (!pkcs7_copy_existing_digest(p7, si))
				goto err;
			if (!(flags & PKCS7_PARTIAL) &&
					!PKCS7_SIGNER_INFO_sign(si))
				goto err;
			}
		}
	return si;
	err:
	if (smcap)
		sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
d166 1
a166 36
	}

/* Search for a digest matching SignerInfo digest type and if found
 * copy across.
 */

static int pkcs7_copy_existing_digest(PKCS7 *p7, PKCS7_SIGNER_INFO *si)
	{
	int i;
	STACK_OF(PKCS7_SIGNER_INFO) *sinfos;
	PKCS7_SIGNER_INFO *sitmp;
	ASN1_OCTET_STRING *osdig = NULL;
	sinfos = PKCS7_get_signer_info(p7);
	for (i = 0; i < sk_PKCS7_SIGNER_INFO_num(sinfos); i++)
		{
		sitmp = sk_PKCS7_SIGNER_INFO_value(sinfos, i);
		if (si == sitmp)
			break;
		if (sk_X509_ATTRIBUTE_num(sitmp->auth_attr) <= 0)
			continue;
		if (!OBJ_cmp(si->digest_alg->algorithm,
				sitmp->digest_alg->algorithm))
			{
			osdig = PKCS7_digest_from_attributes(sitmp->auth_attr);
			break;
			}

		}

	if (osdig)
		return PKCS7_add1_attrib_digest(si, osdig->data, osdig->length);

	PKCS7err(PKCS7_F_PKCS7_COPY_EXISTING_DIGEST,
			PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND);
	return 0;
	}
d357 1
a357 1
		return 0;
d380 1
a380 1
			return 0;
d384 2
a385 2
		sk_X509_free(signers);
		return NULL;
d408 1
a408 1
	if (!PKCS7_set_cipher(p7, cipher)) {
d422 14
a435 2
	if (flags & PKCS7_STREAM)
		return p7;
d437 1
a437 2
	if (PKCS7_final(p7, in, flags))
		return p7;
@


1.1.1.9
log
@import OpenSSL-1.0.1c
@
text
@a575 5
		if (ret > 0 && BIO_method_type(tmpmem) == BIO_TYPE_CIPHER)
			{
			if (!BIO_get_cipher_status(tmpmem))
				ret = 0;
			}
d581 2
a582 16
			if(i <= 0)
				{
				ret = 1;
				if (BIO_method_type(tmpmem) == BIO_TYPE_CIPHER)
					{
					if (!BIO_get_cipher_status(tmpmem))
						ret = 0;
					}
					
				break;
				}
			if (BIO_write(data, buf, i) != i)
				{
				ret = 0;
				break;
				}
d585 1
a585 1
		return ret;
@


