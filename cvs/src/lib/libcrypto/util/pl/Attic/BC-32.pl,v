head	1.14;
access;
symbols
	butholakala:1.13
	openssl_1_0_1_g:1.1.1.9
	OPENBSD_5_5:1.12.0.16
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	openssl_1_0_0_f:1.1.1.8
	openssl_1_0_0_e:1.1.1.8
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	openssh_1_0_0_a:1.1.1.8
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	openssl_0_9_8_k:1.1.1.7
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	openssl_0_9_8_j:1.1.1.7
	openssl_0_9_8_h:1.1.1.7
	pre_openssl_0_9_8h:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	openssl_0_9_7j:1.1.1.6
	openssl:1.1.1
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENSSL_0_9_7B:1.1.1.4
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.3
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2014.04.15.21.34.05;	author tedu;	state dead;
branches;
next	1.13;

1.13
date	2014.04.13.15.25.35;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2010.10.01.22.59.01;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.06.12.17.54;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.27.05.07.03;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.29.05.39.33;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.10.16.31.57;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.21;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.58.47;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.51;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.13.52;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.37.43;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.58;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.58;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.51;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.45.20;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.36.59;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.37.32;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.06.27.05.05.40;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.06.12.15.53;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.18;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.04.13.15.16.37;	author miod;	state Exp;
branches;
next	;


desc
@@


1.14
log
@    $infile="/home/eay/ssl/SSLeay/MINFO";
I wonder when these scripts were last used...
@
text
@#!/usr/local/bin/perl
# Borland C++ builder 3 and 4 -- Janez Jere <jj@@void.si>
#

$ssl=	"ssleay32";
$crypto="libeay32";

$o='\\';
$cp='copy';
$rm='del';

# C compiler stuff
$cc='bcc32';
$lflags="-ap -Tpe -x -Gn ";
$mlflags='';

$out_def="out32";
$tmp_def="tmp32";
$inc_def="inc32";
#enable max error messages, disable most common warnings
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-ccc -w-rch -w-pia -w-aus -w-par -w-inl  -c -tWC -tWM -DOPENSSL_SYSNAME_WIN32 -DL_ENDIAN -DDSO_WIN32 -D_stricmp=stricmp -D_strnicmp=strnicmp -D_timeb=timeb -D_ftime=ftime ";
if ($debug)
{
    $cflags.="-Od -y -v -vi- -D_DEBUG";
    $mlflags.=' ';
}
else
{
    $cflags.="-O2 -ff -fp";
}

$obj='.obj';
$ofile="-o";

# EXE linking stuff
$link="ilink32";
$efile="";
$exep='.exe';
if ($no_sock)
	{ $ex_libs=""; }
else	{ $ex_libs="cw32mt.lib import32.lib crypt32.lib ws2_32.lib"; }

# static library stuff
$mklib='tlib /P64';
$ranlib='';
$plib="";
$libp=".lib";
$shlibp=($shlib)?".dll":".lib";
$lfile='';

$shlib_ex_obj="";
$app_ex_obj="c0x32.obj"; 

$asm=(`nasm -v 2>NUL` ge `nasmw -v 2>NUL`?"nasm":"nasmw")." -f obj -d__omf__";
$asm.=" -g" if $debug;
$afile='-o';

$bn_mulw_obj='';
$bn_mulw_src='';
$des_enc_obj='';
$des_enc_src='';
$bf_enc_obj='';
$bf_enc_src='';

if (!$no_asm)
	{
	$bn_mulw_obj='crypto\bn\asm\bn_win32.obj';
	$bn_mulw_src='crypto\bn\asm\bn_win32.asm';
	$des_enc_obj='crypto\des\asm\d_win32.obj crypto\des\asm\y_win32.obj';
	$des_enc_src='crypto\des\asm\d_win32.asm crypto\des\asm\y_win32.asm';
	$bf_enc_obj='crypto\bf\asm\b_win32.obj';
	$bf_enc_src='crypto\bf\asm\b_win32.asm';
	$cast_enc_obj='crypto\cast\asm\c_win32.obj';
	$cast_enc_src='crypto\cast\asm\c_win32.asm';
	$rc4_enc_obj='crypto\rc4\asm\r4_win32.obj';
	$rc4_enc_src='crypto\rc4\asm\r4_win32.asm';
	$rc5_enc_obj='crypto\rc5\asm\r5_win32.obj';
	$rc5_enc_src='crypto\rc5\asm\r5_win32.asm';
	$md5_asm_obj='crypto\md5\asm\m5_win32.obj';
	$md5_asm_src='crypto\md5\asm\m5_win32.asm';
	$sha1_asm_obj='crypto\sha\asm\s1_win32.obj';
	$sha1_asm_src='crypto\sha\asm\s1_win32.asm';
	$rmd160_asm_obj='crypto\ripemd\asm\rm_win32.obj';
	$rmd160_asm_src='crypto\ripemd\asm\rm_win32.asm';
	$cflags.=" -DBN_ASM -DMD5_ASM -DSHA1_ASM -DRMD160_ASM";
	}

if ($shlib)
	{
	$mlflags.=" $lflags /dll";
#	$cflags =~ s| /MD| /MT|;
	$lib_cflag=" /GD -D_WINDLL -D_DLL";
	$out_def="out32dll";
	$tmp_def="tmp32dll";
	}

sub do_lib_rule
	{
	local($objs,$target,$name,$shlib)=@@_;
	local($ret,$Name);

	$taget =~ s/\//$o/g if $o ne '/';
	($Name=$name) =~ tr/a-z/A-Z/;

#	$target="\$(LIB_D)$o$target";
	$ret.="$target: $objs\n";
	if (!$shlib)
		{
		$ret.=<<___;
	-\$(RM) $lfile$target
	\$(MKLIB) $lfile$target \@@&&!
+\$(**: = &^
+)
!
___
		}
	else
		{
		local($ex)=($target =~ /O_SSL/)?' $(L_CRYPTO)':'';
		$ex.=' ws2_32.lib gdi32.lib';
		$ret.="\t\$(LINK) \$(MLFLAGS) $efile$target /def:ms/${Name}.def @@<<\n  \$(SHLIB_EX_OBJ) $objs $ex\n<<\n";
		}
	$ret.="\n";
	return($ret);
	}

sub do_link_rule
	{
	local($target,$files,$dep_libs,$libs)=@@_;
	local($ret,$_);
	
	$file =~ s/\//$o/g if $o ne '/';
	$n=&bname($targer);
	$ret.="$target: $files $dep_libs\n";
	$ret.="\t\$(LINK) \$(LFLAGS) $files \$(APP_EX_OBJ), $target,, $libs\n\n";
	return($ret);
	}

1;
@


1.13
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@@


1.12
log
@resolve conflicts, fix local changes
@
text
@d21 1
a21 1
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-ccc -w-rch -w-pia -w-aus -w-par -w-inl  -c -tWC -tWM -DOPENSSL_SYSNAME_WIN32 -DL_ENDIAN -DDSO_WIN32 -D_stricmp=stricmp -D_strnicmp=strnicmp ";
d41 1
a41 1
else	{ $ex_libs="cw32mt.lib import32.lib"; }
d54 2
a55 2
$asm='nasmw -f obj -d__omf__';
$asm.=" /Zi" if $debug;
@


1.11
log
@resolve conflicts
@
text
@d120 1
a120 1
		$ex.=' wsock32.lib gdi32.lib';
@


1.10
log
@resolve conflicts
@
text
@d65 1
a65 1
if (!$no_asm && !$fips)
d129 1
a129 1
	local($target,$files,$dep_libs,$libs,$sha1file,$openssl)=@@_;
d131 1
a131 1

d135 1
a135 6
	$ret.="\t\$(LINK) \$(LFLAGS) $files \$(APP_EX_OBJ), $target,, $libs\n";
	if (defined $sha1file)
		{
		$ret.="\t$openssl sha1 -hmac etaonrishdlcupfm -binary $target > $sha1file";
		}
	$ret.="\n";
@


1.9
log
@resolve conflicts
@
text
@d21 1
a21 1
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-aus -w-par -w-inl  -c -tWC -tWM -DOPENSSL_SYSNAME_WIN32 -DL_ENDIAN -DDSO_WIN32 -D_stricmp=stricmp ";
d54 1
a54 1
$asm='nasmw -f obj';
d109 7
a115 3
		#		$ret.="\t\$(RM) \$(O_$Name)\n";
		$ret.="\techo LIB $<\n";    
                $ret.="\t&\$(MKLIB) $lfile$target -+\$**\n";
@


1.8
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d65 1
a65 1
if (!$no_asm)
d125 1
a125 1
	local($target,$files,$dep_libs,$libs)=@@_;
d127 1
a127 1
	
d131 6
a136 1
	$ret.="\t\$(LINK) \$(LFLAGS) $files \$(APP_EX_OBJ), $target,, $libs\n\n";
@


1.7
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d54 1
a54 1
$asm='nasmw';
d56 1
a56 1
$afile='-f obj -o';
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d21 1
a21 1
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-aus -w-par -w-inl  -c -tWC -tWM -DOPENSSL_SYSNAME_WIN32 -DL_ENDIAN -DDSO_WIN32 ";
d54 1
a54 1
$asm='n_o_T_a_s_m';
d56 1
a56 1
$afile='/Fo';
d67 18
a84 18
	$bn_mulw_obj='crypto\bn\asm\bn-win32.obj';
	$bn_mulw_src='crypto\bn\asm\bn-win32.asm';
	$des_enc_obj='crypto\des\asm\d-win32.obj crypto\des\asm\y-win32.obj';
	$des_enc_src='crypto\des\asm\d-win32.asm crypto\des\asm\y-win32.asm';
	$bf_enc_obj='crypto\bf\asm\b-win32.obj';
	$bf_enc_src='crypto\bf\asm\b-win32.asm';
	$cast_enc_obj='crypto\cast\asm\c-win32.obj';
	$cast_enc_src='crypto\cast\asm\c-win32.asm';
	$rc4_enc_obj='crypto\rc4\asm\r4-win32.obj';
	$rc4_enc_src='crypto\rc4\asm\r4-win32.asm';
	$rc5_enc_obj='crypto\rc5\asm\r5-win32.obj';
	$rc5_enc_src='crypto\rc5\asm\r5-win32.asm';
	$md5_asm_obj='crypto\md5\asm\m5-win32.obj';
	$md5_asm_src='crypto\md5\asm\m5-win32.asm';
	$sha1_asm_obj='crypto\sha\asm\s1-win32.obj';
	$sha1_asm_src='crypto\sha\asm\s1-win32.asm';
	$rmd160_asm_obj='crypto\ripemd\asm\rm-win32.obj';
	$rmd160_asm_src='crypto\ripemd\asm\rm-win32.asm';
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@a6 1
$RSAref="RSAref32";
d21 1
a21 1
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-aus -w-par -w-inl  -c -tWC -tWM -DWINDOWS -DWIN32 -DL_ENDIAN -DDSO_WIN32 ";
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d22 1
a22 1
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-aus -w-par -w-inl  -c -tWC -tWM -DWINDOWS -DWIN32 -DL_ENDIAN ";
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d112 1
a112 1
		$ret.="\t\$(MKLIB) $lfile$target  \$(addprefix +, $objs)\n";
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d22 1
a22 1
$cflags="-DWIN32_LEAN_AND_MEAN -j255 -w-aus -w-par -w-inl  -c -tWC -tWM -DWINDOWS -DWIN32 -DL_ENDIAN ";
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
#!/usr/bin/perl
# VCw16lib.pl - the file for Visual C++ 1.52b for windows, static libraries
d5 4
d15 2
d18 5
d24 4
a27 18
	{ $op="-v "; }
else	{ $op="-O "; }

$cflags="-d $op -DL_ENDIAN ";
# I add the stack opt
$base_lflags="-c";
$lflags="$base_lflags";

$cflags.=" -DWINDOWS -DWIN32";
$app_cflag="-WC";
$lib_cflag="-WC";
$lflags.=" -Tpe";

if ($shlib)
	{
	$mlflags="$base_lflags -Tpe"; # stack if defined in .def file
	$libs="libw ldllcew";
	}
d29 3
a31 1
	{ $mlflags=''; }
d37 1
a37 1
$link="tlink32";
d40 3
a42 4
$ex_libs="CW32.LIB IMPORT32.LIB";
$ex_libs.=$no_sock?"":" wsock32.lib";
$shlib_ex_obj="" if $shlib;
$app_ex_obj="C0X32.OBJ";
d45 1
a45 1
$mklib='tlib';
d52 5
a56 1
$asm='ml /Cp /c /Cx';
d58 9
a66 1
if ($noasm)
d68 19
a86 2
	$bn_mulw_obj='';
	$bn_mulw_src='';
d88 2
a89 1
else
d91 5
a95 2
	$bn_mulw_obj='crypto\bn\asm\x86b32.obj';
	$bn_mulw_src='crypto\bn\asm\x86m32.asm';
d100 1
a100 1
	local($target,$name,$shlib)=@@_;
d106 2
a107 12
	$ret.="$target: \$(${Name}OBJ)\n";
	$ret.="\t\$(RM) \$(O_$Name)\n";

	# Due to a pathetic line length limit, I unwrap the args.
	local($lib_names)="";
	local($dll_names)="";
	foreach $_ (sort split(/\s+/,$Vars{"${Name}OBJ"}))
		{
		$lib_names.="  +$_ &\n";
		$dll_names.="  $_\n";
		}

d110 3
a112 1
		$ret.="\t\$(MKLIB) $target & <<|\n$lib_names\n,\n|\n";
d116 3
a118 7
		# $(SHLIB_EX_OBJ)
		local($ex)=($Name eq "SSL")?' $(L_CRYPTO) winsock':"";
		$ret.="\t\$(LINK) \$(MLFLAGS) @@&&|\n";
		$ret.=$dll_names;
		$ret.="\n  $target\n\n  $ex $libs\nms$o${name}16.def;\n|\n";
		($out_lib=$target) =~ s/O_/L_/;
		$ret.="\timplib /nowep $out_lib $target\n\n";
d127 1
a127 1
	local($ret,$f,$_,@@f);
d132 1
a132 19
	$ret.="  \$(LINK) @@&&|";
	
	# Due to a pathetic line length limit, I have to unwrap the args.
	$r="  \$(LFLAGS) ";
	if ($files =~ /\(([^)]*)\)$/)
		{
		@@a=('$(APP_EX_OBJ)');
		push(@@a,sort split(/\s+/,$Vars{$1}));
		foreach $_ (@@a)
			{
			$ret.="\n  $r $_ +";
			$r="";
			}
		chop($ret);
		$ret.="\n";
		}
	else
		{ $ret.="\n $r \$(APP_EX_OBJ) $files\n"; }
	$ret.="  $target\n\n  $libs\n\n|\n\n";
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d1 2
a2 2
#!/usr/local/bin/perl
# Borland C++ builder 3 and 4 -- Janez Jere <jj@@void.si>
a4 3
$ssl=	"ssleay32";
$crypto="libeay32";

a10 2
$lflags="-ap -Tpe -x -Gn ";
$mlflags='';
a11 5
$out_def="out32";
$tmp_def="tmp32";
$inc_def="inc32";
#enable max error messages, disable most common warnings
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-aus -w-par -w-inl  -c -tWC -tWM -DOPENSSL_SYSNAME_WIN32 -DL_ENDIAN -DDSO_WIN32 ";
d13 18
a30 4
{
    $cflags.="-Od -y -v -vi- -D_DEBUG";
    $mlflags.=' ';
}
d32 1
a32 3
{
    $cflags.="-O2 -ff -fp";
}
d38 1
a38 1
$link="ilink32";
d41 4
a44 3
if ($no_sock)
	{ $ex_libs=""; }
else	{ $ex_libs="cw32mt.lib import32.lib"; }
d47 1
a47 1
$mklib='tlib /P64';
d54 1
a54 5
$shlib_ex_obj="";
$app_ex_obj="c0x32.obj"; 

$asm='n_o_T_a_s_m';
$asm.=" /Zi" if $debug;
d56 1
a56 9

$bn_mulw_obj='';
$bn_mulw_src='';
$des_enc_obj='';
$des_enc_src='';
$bf_enc_obj='';
$bf_enc_src='';

if (!$no_asm)
d58 2
a59 19
	$bn_mulw_obj='crypto\bn\asm\bn-win32.obj';
	$bn_mulw_src='crypto\bn\asm\bn-win32.asm';
	$des_enc_obj='crypto\des\asm\d-win32.obj crypto\des\asm\y-win32.obj';
	$des_enc_src='crypto\des\asm\d-win32.asm crypto\des\asm\y-win32.asm';
	$bf_enc_obj='crypto\bf\asm\b-win32.obj';
	$bf_enc_src='crypto\bf\asm\b-win32.asm';
	$cast_enc_obj='crypto\cast\asm\c-win32.obj';
	$cast_enc_src='crypto\cast\asm\c-win32.asm';
	$rc4_enc_obj='crypto\rc4\asm\r4-win32.obj';
	$rc4_enc_src='crypto\rc4\asm\r4-win32.asm';
	$rc5_enc_obj='crypto\rc5\asm\r5-win32.obj';
	$rc5_enc_src='crypto\rc5\asm\r5-win32.asm';
	$md5_asm_obj='crypto\md5\asm\m5-win32.obj';
	$md5_asm_src='crypto\md5\asm\m5-win32.asm';
	$sha1_asm_obj='crypto\sha\asm\s1-win32.obj';
	$sha1_asm_src='crypto\sha\asm\s1-win32.asm';
	$rmd160_asm_obj='crypto\ripemd\asm\rm-win32.obj';
	$rmd160_asm_src='crypto\ripemd\asm\rm-win32.asm';
	$cflags.=" -DBN_ASM -DMD5_ASM -DSHA1_ASM -DRMD160_ASM";
d61 1
a61 2

if ($shlib)
d63 2
a64 5
	$mlflags.=" $lflags /dll";
#	$cflags =~ s| /MD| /MT|;
	$lib_cflag=" /GD -D_WINDLL -D_DLL";
	$out_def="out32dll";
	$tmp_def="tmp32dll";
d69 1
a69 1
	local($objs,$target,$name,$shlib)=@@_;
d75 12
a86 2
#	$target="\$(LIB_D)$o$target";
	$ret.="$target: $objs\n";
d89 1
a89 3
		#		$ret.="\t\$(RM) \$(O_$Name)\n";
		$ret.="\techo LIB $<\n";    
                $ret.="\t&\$(MKLIB) $lfile$target -+\$**\n";
d93 7
a99 3
		local($ex)=($target =~ /O_SSL/)?' $(L_CRYPTO)':'';
		$ex.=' wsock32.lib gdi32.lib';
		$ret.="\t\$(LINK) \$(MLFLAGS) $efile$target /def:ms/${Name}.def @@<<\n  \$(SHLIB_EX_OBJ) $objs $ex\n<<\n";
d108 1
a108 1
	local($ret,$_);
d113 19
a131 1
	$ret.="\t\$(LINK) \$(LFLAGS) $files \$(APP_EX_OBJ), $target,, $libs\n\n";
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@d21 1
a21 1
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-aus -w-par -w-inl  -c -tWC -tWM -DOPENSSL_SYSNAME_WIN32 -DL_ENDIAN -DDSO_WIN32 -D_stricmp=stricmp ";
d54 1
a54 1
$asm='nasmw';
d56 1
a56 1
$afile='-f obj -o';
d67 18
a84 18
	$bn_mulw_obj='crypto\bn\asm\bn_win32.obj';
	$bn_mulw_src='crypto\bn\asm\bn_win32.asm';
	$des_enc_obj='crypto\des\asm\d_win32.obj crypto\des\asm\y_win32.obj';
	$des_enc_src='crypto\des\asm\d_win32.asm crypto\des\asm\y_win32.asm';
	$bf_enc_obj='crypto\bf\asm\b_win32.obj';
	$bf_enc_src='crypto\bf\asm\b_win32.asm';
	$cast_enc_obj='crypto\cast\asm\c_win32.obj';
	$cast_enc_src='crypto\cast\asm\c_win32.asm';
	$rc4_enc_obj='crypto\rc4\asm\r4_win32.obj';
	$rc4_enc_src='crypto\rc4\asm\r4_win32.asm';
	$rc5_enc_obj='crypto\rc5\asm\r5_win32.obj';
	$rc5_enc_src='crypto\rc5\asm\r5_win32.asm';
	$md5_asm_obj='crypto\md5\asm\m5_win32.obj';
	$md5_asm_src='crypto\md5\asm\m5_win32.asm';
	$sha1_asm_obj='crypto\sha\asm\s1_win32.obj';
	$sha1_asm_src='crypto\sha\asm\s1_win32.asm';
	$rmd160_asm_obj='crypto\ripemd\asm\rm_win32.obj';
	$rmd160_asm_src='crypto\ripemd\asm\rm_win32.asm';
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@d54 1
a54 1
$asm='nasmw -f obj';
d56 1
a56 1
$afile='-o';
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d65 1
a65 1
if (!$no_asm && !$fips)
d125 1
a125 1
	local($target,$files,$dep_libs,$libs,$sha1file,$openssl)=@@_;
d127 1
a127 1

d131 1
a131 6
	$ret.="\t\$(LINK) \$(LFLAGS) $files \$(APP_EX_OBJ), $target,, $libs\n";
	if (defined $sha1file)
		{
		$ret.="\t$openssl sha1 -hmac etaonrishdlcupfm -binary $target > $sha1file";
		}
	$ret.="\n";
@


1.1.1.6
log
@import of openssl-0.9.7j
@
text
@d21 1
a21 1
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-ccc -w-rch -w-pia -w-aus -w-par -w-inl  -c -tWC -tWM -DOPENSSL_SYSNAME_WIN32 -DL_ENDIAN -DDSO_WIN32 -D_stricmp=stricmp -D_strnicmp=strnicmp ";
d54 1
a54 1
$asm='nasmw -f obj -d__omf__';
d109 3
a111 7
		$ret.=<<___;
	-\$(RM) $lfile$target
	\$(MKLIB) $lfile$target \@@&&!
+\$(**: = &^
+)
!
___
@


1.1.1.7
log
@import of OpenSSL 0.9.8h
@
text
@d65 1
a65 1
if (!$no_asm)
d129 1
a129 1
	local($target,$files,$dep_libs,$libs)=@@_;
d131 1
a131 1
	
d135 6
a140 1
	$ret.="\t\$(LINK) \$(LFLAGS) $files \$(APP_EX_OBJ), $target,, $libs\n\n";
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@d120 1
a120 1
		$ex.=' ws2_32.lib gdi32.lib';
@


1.1.1.9
log
@Import OpenSSL 1.0.1g
@
text
@d21 1
a21 1
$cflags="-DWIN32_LEAN_AND_MEAN -q -w-ccc -w-rch -w-pia -w-aus -w-par -w-inl  -c -tWC -tWM -DOPENSSL_SYSNAME_WIN32 -DL_ENDIAN -DDSO_WIN32 -D_stricmp=stricmp -D_strnicmp=strnicmp -D_timeb=timeb -D_ftime=ftime ";
d41 1
a41 1
else	{ $ex_libs="cw32mt.lib import32.lib crypt32.lib ws2_32.lib"; }
d54 2
a55 2
$asm=(`nasm -v 2>NUL` ge `nasmw -v 2>NUL`?"nasm":"nasmw")." -f obj -d__omf__";
$asm.=" -g" if $debug;
@


