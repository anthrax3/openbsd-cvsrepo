head	1.11;
access;
symbols
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2014.04.15.21.34.05;	author tedu;	state dead;
branches;
next	1.10;

1.10
date	2010.10.01.22.59.01;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.54;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.29.05.39.33;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.11.22.15.20;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.40;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.21.01.49.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.58.47;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.51;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.13.52;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.37.43;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.51;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.36.59;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.11.21.22.16;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.32;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.53;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.18;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@    $infile="/home/eay/ssl/SSLeay/MINFO";
I wonder when these scripts were last used...
@
text
@#!/usr/local/bin/perl
#
# Mingw32.pl -- Mingw
#

$o='/';
$cp='cp';
$rm='rm -f';
$mkdir='gmkdir';

$o='\\';
$cp='copy';
$rm='del';
$mkdir='mkdir';

# C compiler stuff

$cc='gcc';
if ($debug)
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -g2 -ggdb"; }
else
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -fomit-frame-pointer -O3 -mcpu=i486 -Wall"; }

if ($gaswin and !$no_asm)
	{
        $bn_asm_obj='$(OBJ_D)\bn-win32.o';
        $bn_asm_src='crypto/bn/asm/bn-win32.s';
        $bnco_asm_obj='$(OBJ_D)\co-win32.o';
        $bnco_asm_src='crypto/bn/asm/co-win32.s';
        $des_enc_obj='$(OBJ_D)\d-win32.o $(OBJ_D)\y-win32.o';
        $des_enc_src='crypto/des/asm/d-win32.s crypto/des/asm/y-win32.s';
        $bf_enc_obj='$(OBJ_D)\b-win32.o';
        $bf_enc_src='crypto/bf/asm/b-win32.s';
#       $cast_enc_obj='$(OBJ_D)\c-win32.o';
#       $cast_enc_src='crypto/cast/asm/c-win32.s';
        $rc4_enc_obj='$(OBJ_D)\r4-win32.o';
        $rc4_enc_src='crypto/rc4/asm/r4-win32.s';
        $rc5_enc_obj='$(OBJ_D)\r5-win32.o';
        $rc5_enc_src='crypto/rc5/asm/r5-win32.s';
        $md5_asm_obj='$(OBJ_D)\m5-win32.o';
        $md5_asm_src='crypto/md5/asm/m5-win32.s';
        $rmd160_asm_obj='$(OBJ_D)\rm-win32.o';
        $rmd160_asm_src='crypto/ripemd/asm/rm-win32.s';
        $sha1_asm_obj='$(OBJ_D)\s1-win32.o';
        $sha1_asm_src='crypto/sha/asm/s1-win32.s';
	$cflags.=" -DBN_ASM -DMD5_ASM -DSHA1_ASM -DOPENSSL_BN_ASM_PART_WORDS";
	}


$obj='.o';
$ofile='-o ';

# EXE linking stuff
$link='${CC}';
$lflags='${CFLAGS}';
$efile='-o ';
$exep='';
$ex_libs="-lws2_32 -lgdi32";

# static library stuff
$mklib='ar r';
$mlflags='';
$ranlib='ranlib';
$plib='lib';
$libp=".a";
$shlibp=".a";
$lfile='';

$asm='as';
$afile='-o ';
#$bn_asm_obj="";
#$bn_asm_src="";
#$des_enc_obj="";
#$des_enc_src="";
#$bf_enc_obj="";
#$bf_enc_src="";

sub do_lib_rule
	{
	local($obj,$target,$name,$shlib)=@@_;
	local($ret,$_,$Name);

	$target =~ s/\//$o/g if $o ne '/';
	$target="$target";
	($Name=$name) =~ tr/a-z/A-Z/;

	$ret.="$target: \$(${Name}OBJ)\n";
	$ret.="\tif exist $target \$(RM) $target\n";
	$ret.="\t\$(MKLIB) $target \$(${Name}OBJ)\n";
	$ret.="\t\$(RANLIB) $target\n\n";
	}

sub do_link_rule
	{
	local($target,$files,$dep_libs,$libs)=@@_;
	local($ret,$_);
	
	$file =~ s/\//$o/g if $o ne '/';
	$n=&bname($target);
	$ret.="$target: $files $dep_libs\n";
	$ret.="\t\$(LINK) ${efile}$target \$(LFLAGS) $files $libs\n\n";
	return($ret);
	}
1;
@


1.10
log
@resolve conflicts, fix local changes
@
text
@@


1.9
log
@resolve conflicts
@
text
@d22 1
a22 1
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -fomit-frame-pointer -O3 -march=i486 -Wall"; }
a45 2
	$cpuid_asm_obj='$(OBJ_D)\cpu-win32.o';
	$cpuid_asm_src='crypto/cpu-win32.s';
d58 1
a58 1
$ex_libs="-lwsock32 -lgdi32";
@


1.8
log
@resolve conflicts
@
text
@d22 1
a22 1
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -fomit-frame-pointer -O3 -mcpu=i486 -Wall"; }
d24 1
a24 1
if ($gaswin and !$no_asm and !$fips)
d46 3
a48 1
	$cflags.=" -DBN_ASM -DMD5_ASM -DSHA1_ASM";
d97 1
a97 1
	local($target,$files,$dep_libs,$libs,$sha1file,$openssl)=@@_;
d103 1
a103 6
	$ret.="\t\$(LINK) ${efile}$target \$(LFLAGS) $files $libs\n";
	if (defined $sha1file)
		{
		$ret.="\t$openssl sha1 -hmac etaonrishdlcupfm -binary $target > $sha1file";
		}
	$ret.="\n";
@


1.7
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d24 1
a24 1
if ($gaswin and !$no_asm)
d95 1
a95 1
	local($target,$files,$dep_libs,$libs)=@@_;
d101 6
a106 1
	$ret.="\t\$(LINK) ${efile}$target \$(LFLAGS) $files $libs\n\n";
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d88 1
a88 1
	$ret.="\t\$(RM) $target\n";
@


1.5
log
@Merge openssl-0.9.7-stable-SNAP-20020519
@
text
@d3 1
a3 1
# Mingw32.pl -- Mingw32 with GNU cp (Mingw32f.pl uses DOS tools) 
d8 1
a8 1
$rm='rem'; # use 'rm -f' if using GNU file utilities
d11 4
a14 4
# gcc wouldn't accept backslashes in paths
#$o='\\';
#$cp='copy';
#$rm='del';
d22 1
a22 1
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -fomit-frame-pointer -O3 -m486 -Wall"; }
d26 1
a26 1
        $bn_asm_obj='$(OBJ_D)/bn-win32.o';
d28 1
a28 1
        $bnco_asm_obj='$(OBJ_D)/co-win32.o';
d30 1
a30 1
        $des_enc_obj='$(OBJ_D)/d-win32.o $(OBJ_D)/y-win32.o';
d32 1
a32 1
        $bf_enc_obj='$(OBJ_D)/b-win32.o';
d34 1
a34 1
#       $cast_enc_obj='$(OBJ_D)/c-win32.o';
d36 1
a36 1
        $rc4_enc_obj='$(OBJ_D)/r4-win32.o';
d38 1
a38 1
        $rc5_enc_obj='$(OBJ_D)/r5-win32.o';
d40 1
a40 1
        $md5_asm_obj='$(OBJ_D)/m5-win32.o';
d42 1
a42 1
        $rmd160_asm_obj='$(OBJ_D)/rm-win32.o';
d44 1
a44 1
        $sha1_asm_obj='$(OBJ_D)/s1-win32.o';
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d28 2
d71 6
a76 6
$bn_asm_obj="";
$bn_asm_src="";
$des_enc_obj="";
$des_enc_src="";
$bf_enc_obj="";
$bf_enc_src="";
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d20 1
a20 1
	{ $cflags="-DL_ENDIAN -g2 -ggdb"; }
d22 1
a22 1
	{ $cflags="-DL_ENDIAN -fomit-frame-pointer -O3 -m486 -Wall"; }
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d24 24
a102 1

@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d20 1
a20 1
	{ $cflags="-g2 -ggdb"; }
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d20 1
a20 1
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -g2 -ggdb"; }
d22 1
a22 27
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -fomit-frame-pointer -O3 -m486 -Wall"; }

if ($gaswin and !$no_asm)
	{
        $bn_asm_obj='$(OBJ_D)/bn-win32.o';
        $bn_asm_src='crypto/bn/asm/bn-win32.s';
        $bnco_asm_obj='$(OBJ_D)/co-win32.o';
        $bnco_asm_src='crypto/bn/asm/co-win32.s';
        $des_enc_obj='$(OBJ_D)/d-win32.o $(OBJ_D)/y-win32.o';
        $des_enc_src='crypto/des/asm/d-win32.s crypto/des/asm/y-win32.s';
        $bf_enc_obj='$(OBJ_D)/b-win32.o';
        $bf_enc_src='crypto/bf/asm/b-win32.s';
#       $cast_enc_obj='$(OBJ_D)/c-win32.o';
#       $cast_enc_src='crypto/cast/asm/c-win32.s';
        $rc4_enc_obj='$(OBJ_D)/r4-win32.o';
        $rc4_enc_src='crypto/rc4/asm/r4-win32.s';
        $rc5_enc_obj='$(OBJ_D)/r5-win32.o';
        $rc5_enc_src='crypto/rc5/asm/r5-win32.s';
        $md5_asm_obj='$(OBJ_D)/m5-win32.o';
        $md5_asm_src='crypto/md5/asm/m5-win32.s';
        $rmd160_asm_obj='$(OBJ_D)/rm-win32.o';
        $rmd160_asm_src='crypto/ripemd/asm/rm-win32.s';
        $sha1_asm_obj='$(OBJ_D)/s1-win32.o';
        $sha1_asm_src='crypto/sha/asm/s1-win32.s';
	$cflags.=" -DBN_ASM -DMD5_ASM -DSHA1_ASM";
	}

d45 6
a50 6
#$bn_asm_obj="";
#$bn_asm_src="";
#$des_enc_obj="";
#$des_enc_src="";
#$bf_enc_obj="";
#$bf_enc_src="";
d79 1
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d3 1
a3 1
# Mingw32.pl -- Mingw
d8 1
a8 1
$rm='rm -f';
d11 4
a14 4
$o='\\';
$cp='copy';
$rm='del';
$mkdir='mkdir';
d22 1
a22 1
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -fomit-frame-pointer -O3 -mcpu=i486 -Wall"; }
d26 1
a26 1
        $bn_asm_obj='$(OBJ_D)\bn-win32.o';
d28 1
a28 1
        $bnco_asm_obj='$(OBJ_D)\co-win32.o';
d30 1
a30 1
        $des_enc_obj='$(OBJ_D)\d-win32.o $(OBJ_D)\y-win32.o';
d32 1
a32 1
        $bf_enc_obj='$(OBJ_D)\b-win32.o';
d34 1
a34 1
#       $cast_enc_obj='$(OBJ_D)\c-win32.o';
d36 1
a36 1
        $rc4_enc_obj='$(OBJ_D)\r4-win32.o';
d38 1
a38 1
        $rc5_enc_obj='$(OBJ_D)\r5-win32.o';
d40 1
a40 1
        $md5_asm_obj='$(OBJ_D)\m5-win32.o';
d42 1
a42 1
        $rmd160_asm_obj='$(OBJ_D)\rm-win32.o';
d44 1
a44 1
        $sha1_asm_obj='$(OBJ_D)\s1-win32.o';
@


1.1.1.3
log
@import 0.9.7c
@
text
@d88 1
a88 1
	$ret.="\tif exist $target \$(RM) $target\n";
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d24 1
a24 1
if ($gaswin and !$no_asm and !$fips)
d95 1
a95 1
	local($target,$files,$dep_libs,$libs,$sha1file,$openssl)=@@_;
d101 1
a101 6
	$ret.="\t\$(LINK) ${efile}$target \$(LFLAGS) $files $libs\n";
	if (defined $sha1file)
		{
		$ret.="\t$openssl sha1 -hmac etaonrishdlcupfm -binary $target > $sha1file";
		}
	$ret.="\n";
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d22 1
a22 1
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -fomit-frame-pointer -O3 -march=i486 -Wall"; }
d24 1
a24 1
if ($gaswin and !$no_asm)
d46 1
a46 3
	$cpuid_asm_obj='$(OBJ_D)\cpu-win32.o';
	$cpuid_asm_src='crypto/cpu-win32.s';
	$cflags.=" -DBN_ASM -DMD5_ASM -DSHA1_ASM -DOPENSSL_BN_ASM_PART_WORDS";
d95 1
a95 1
	local($target,$files,$dep_libs,$libs)=@@_;
d101 6
a106 1
	$ret.="\t\$(LINK) ${efile}$target \$(LFLAGS) $files $libs\n\n";
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d22 1
a22 1
	{ $cflags="-DL_ENDIAN -DDSO_WIN32 -fomit-frame-pointer -O3 -mcpu=i486 -Wall"; }
d46 2
d60 1
a60 1
$ex_libs="-lws2_32 -lgdi32";
@


