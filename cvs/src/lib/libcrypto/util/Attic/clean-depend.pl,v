head	1.6;
access;
symbols
	butholakala:1.5
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.5.0.16
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.12
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.26
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.24
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.22
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.20
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.18
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.16
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2014.04.17.19.20.52;	author afresh1;	state dead;
branches;
next	1.5;

1.5
date	2010.10.01.22.59.01;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.54;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.21;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.22.00.03.43;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.37.40;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.47;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.53;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.18;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove unused ssl utils

This code is the reason perl has a name as a write only language.

ok deraadt miod
@
text
@#!/usr/local/bin/perl -w
# Clean the dependency list in a makefile of standard includes...
# Written by Ben Laurie <ben@@algroup.co.uk> 19 Jan 1999

use strict;

while(<STDIN>) {
    print;
    last if /^# DO NOT DELETE THIS LINE/;
}

my %files;

my $thisfile="";
while(<STDIN>) {
    my ($dummy, $file,$deps)=/^((.*):)? (.*)$/;
    my $origfile="";
    $thisfile=$file if defined $file;
    next if !defined $deps;
    $origfile=$thisfile;
    $origfile=~s/\.o$/.c/;
    my @@deps=split ' ',$deps;
    @@deps=grep(!/^\//,@@deps);
    @@deps=grep(!/^\\$/,@@deps);
    @@deps=grep(!/^$origfile$/,@@deps);
# pull out the kludged kerberos header (if present).
    @@deps=grep(!/^[.\/]+\/krb5.h/,@@deps);
    push @@{$files{$thisfile}},@@deps;
}

my $file;
foreach $file (sort keys %files) {
    my $len=0;
    my $dep;
    my $origfile=$file;
    $origfile=~s/\.o$/.c/;
    $file=~s/^\.\///;
    push @@{$files{$file}},$origfile;
    my $prevdep="";

    # Remove leading ./ before sorting
    my @@deps = map { $_ =~ s/^\.\///; $_ } @@{$files{$file}};

    foreach $dep (sort @@deps) {
	$dep=~s/^\.\///;
	next if $prevdep eq $dep; # to exterminate duplicates...
	$prevdep = $dep;
	$len=0 if $len+length($dep)+1 >= 80;
	if($len == 0) {
	    print "\n$file:";
	    $len=length($file)+1;
	}
	print " $dep";
	$len+=length($dep)+1;
    }
}

print "\n";
@


1.5
log
@resolve conflicts, fix local changes
@
text
@@


1.4
log
@resolve conflicts
@
text
@d45 1
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d40 5
a44 2
    foreach $dep (sort @@{$files{$file}}) {
	$dep=~s/^\.\///;
@


1.2
log
@openssl-engine-0.9.6a merge
@
text
@d14 1
d16 3
a18 1
    my ($file,$deps)=/^(.*): (.*)$/;
d20 2
d25 4
a28 1
    push @@{$files{$file}},@@deps;
d35 5
d41 3
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d18 2
a19 2
    @@deps=grep(!/^\/usr\/include/,@@deps);
    @@deps=grep(!/^\/usr\/lib\/gcc-lib/,@@deps);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a13 1
my $thisfile="";
d15 1
a15 3
    my ($dummy, $file,$deps)=/^((.*):)? (.*)$/;
    my $origfile="";
    $thisfile=$file if defined $file;
a16 2
    $origfile=$thisfile;
    $origfile=~s/\.o$/.c/;
d18 3
a20 6
    @@deps=grep(!/^\//,@@deps);
    @@deps=grep(!/^\\$/,@@deps);
    @@deps=grep(!/^$origfile$/,@@deps);
# pull out the kludged kerberos header (if present).
    @@deps=grep(!/^[.\/]+\/krb5.h/,@@deps);
    push @@{$files{$thisfile}},@@deps;
a26 5
    my $origfile=$file;
    $origfile=~s/\.o$/.c/;
    $file=~s/^\.\///;
    push @@{$files{$file}},$origfile;
    my $prevdep="";
a27 3
	$dep=~s/^\.\///;
	next if $prevdep eq $dep; # to exterminate duplicates...
	$prevdep = $dep;
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d40 2
a41 5

    # Remove leading ./ before sorting
    my @@deps = map { $_ =~ s/^\.\///; $_ } @@{$files{$file}};

    foreach $dep (sort @@deps) {
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@a44 1
	$dep=~s/^\.\///;
@


