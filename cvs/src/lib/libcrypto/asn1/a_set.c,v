head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.2
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18;
locks; strict;
comment	@ * @;


1.18
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.17;
commitid	kT0fLt3r4lroFJra;

1.17
date	2015.03.19.14.00.22;	author tedu;	state Exp;
branches;
next	1.16;
commitid	Ix1rLPv61p1TR5LF;

1.16
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches
	1.16.4.1
	1.16.6.1;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.14;
commitid	id8dTrTMtnTn4fqt;

1.14
date	2014.06.24.19.34.06;	author miod;	state Exp;
branches;
next	1.13;
commitid	fcZ1pNZzATZixgqn;

1.13
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.05.29.21.07.42;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.19.13.11.41;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.18.17.32.31;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.15.20.19.57;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.06;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.27;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.45;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;

1.16.4.1
date	2015.03.19.14.02.22;	author tedu;	state Exp;
branches;
next	;
commitid	bYTbbXa7PWk8y7To;

1.16.6.1
date	2015.03.19.14.01.15;	author tedu;	state Exp;
branches;
next	;
commitid	dQgHc1qjfDF6g1rY;


desc
@@


1.18
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_set.c,v 1.17 2015/03/19 14:00:22 tedu Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1_mac.h>
#include <openssl/err.h>

#ifndef NO_ASN1_OLD

typedef struct {
	unsigned char *pbData;
	int cbData;
} MYBLOB;

/* SetBlobCmp
 * This function compares two elements of SET_OF block
 */
static int
SetBlobCmp(const void *elem1, const void *elem2)
{
	const MYBLOB *b1 = (const MYBLOB *)elem1;
	const MYBLOB *b2 = (const MYBLOB *)elem2;
	int r;

	r = memcmp(b1->pbData, b2->pbData,
	    b1->cbData < b2->cbData ? b1->cbData : b2->cbData);
	if (r != 0)
		return r;
	return b1->cbData - b2->cbData;
}

/* int is_set:  if TRUE, then sort the contents (i.e. it isn't a SEQUENCE) */
int
i2d_ASN1_SET(STACK_OF(OPENSSL_BLOCK) *a, unsigned char **pp, i2d_of_void *i2d,
    int ex_tag, int ex_class, int is_set)
{
	int ret = 0, r;
	int i;
	unsigned char *p;
	unsigned char *pStart, *pTempMem;
	MYBLOB *rgSetBlob;
	int totSize;

	if (a == NULL)
		return 0;
	for (i = sk_OPENSSL_BLOCK_num(a) - 1; i >= 0; i--)
		ret += i2d(sk_OPENSSL_BLOCK_value(a, i), NULL);
	r = ASN1_object_size(1, ret, ex_tag);
	if (pp == NULL)
		return r;

	p = *pp;
	ASN1_put_object(&p, 1, ret, ex_tag, ex_class);

	/* Modified by gp@@nsj.co.jp */
	/* And then again by Ben */
	/* And again by Steve */

	if (!is_set || (sk_OPENSSL_BLOCK_num(a) < 2)) {
		for (i = 0; i < sk_OPENSSL_BLOCK_num(a); i++)
			i2d(sk_OPENSSL_BLOCK_value(a, i), &p);

		*pp = p;
		return r;
	}

	pStart  = p;	/* Catch the beg of Setblobs*/
	/* In this array we will store the SET blobs */
	rgSetBlob = reallocarray(NULL, sk_OPENSSL_BLOCK_num(a), sizeof(MYBLOB));
	if (rgSetBlob == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return 0;
	}

	for (i = 0; i < sk_OPENSSL_BLOCK_num(a); i++) {
		rgSetBlob[i].pbData = p;	/* catch each set encode blob */
		i2d(sk_OPENSSL_BLOCK_value(a, i), &p);
		/* Length of this SetBlob */
		rgSetBlob[i].cbData = p - rgSetBlob[i].pbData;
	}
	*pp = p;
	totSize = p - pStart;	/* This is the total size of all set blobs */

	/* Now we have to sort the blobs. I am using a simple algo.
	 * Sort ptrs
	 * Copy to temp-mem
	 * Copy from temp-mem to user-mem
	 */
	qsort(rgSetBlob, sk_OPENSSL_BLOCK_num(a), sizeof(MYBLOB), SetBlobCmp);
	if ((pTempMem = malloc(totSize)) == NULL) {
		free(rgSetBlob);
		ASN1error(ERR_R_MALLOC_FAILURE);
		return 0;
	}

	/* Copy to temp mem */
	p = pTempMem;
	for (i = 0; i < sk_OPENSSL_BLOCK_num(a); ++i) {
		memcpy(p, rgSetBlob[i].pbData, rgSetBlob[i].cbData);
		p += rgSetBlob[i].cbData;
	}

	/* Copy back to user mem*/
	memcpy(pStart, pTempMem, totSize);
	free(pTempMem);
	free(rgSetBlob);

	return r;
}

STACK_OF(OPENSSL_BLOCK) *
d2i_ASN1_SET(STACK_OF(OPENSSL_BLOCK) **a, const unsigned char **pp, long length,
    d2i_of_void *d2i, void (*free_func)(OPENSSL_BLOCK), int ex_tag,
    int ex_class)
{
	ASN1_const_CTX c;
	STACK_OF(OPENSSL_BLOCK) *ret = NULL;

	if (a == NULL || (*a) == NULL) {
		if ((ret = sk_OPENSSL_BLOCK_new_null()) == NULL) {
			ASN1error(ERR_R_MALLOC_FAILURE);
			goto err;
		}
	} else
		ret = *a;

	c.p = *pp;
	c.max = (length == 0) ? 0 : (c.p + length);

	c.inf = ASN1_get_object(&c.p, &c.slen, &c.tag, &c.xclass, c.max - c.p);
	if (c.inf & 0x80)
		goto err;
	if (ex_class != c.xclass) {
		ASN1error(ASN1_R_BAD_CLASS);
		goto err;
	}
	if (ex_tag != c.tag) {
		ASN1error(ASN1_R_BAD_TAG);
		goto err;
	}
	if (c.slen + c.p > c.max) {
		ASN1error(ASN1_R_LENGTH_ERROR);
		goto err;
	}
	/* check for infinite constructed - it can be as long
	 * as the amount of data passed to us */
	if (c.inf == (V_ASN1_CONSTRUCTED + 1))
		c.slen = length + *pp - c.p;
	c.max = c.p + c.slen;

	while (c.p < c.max) {
		char *s;

		if (M_ASN1_D2I_end_sequence())
			break;
		if ((s = d2i(NULL, &c.p, c.slen)) == NULL) {
			ASN1error(ASN1_R_ERROR_PARSING_SET_ELEMENT);
			asn1_add_error(*pp, (int)(c.p - *pp));
			goto err;
		}
		if (!sk_OPENSSL_BLOCK_push(ret, s))
			goto err;
	}
	if (a != NULL)
		*a = ret;
	*pp = c.p;
	return ret;

err:
	if (a == NULL || *a != ret) {
		if (free_func != NULL)
			sk_OPENSSL_BLOCK_pop_free(ret, free_func);
		else
			sk_OPENSSL_BLOCK_free(ret);
	}
	return NULL;
}

#endif
@


1.17
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_set.c,v 1.16 2014/07/11 08:44:47 jsing Exp $ */
d128 1
a128 1
		ASN1err(ASN1_F_I2D_ASN1_SET, ERR_R_MALLOC_FAILURE);
d149 1
a149 1
		ASN1err(ASN1_F_I2D_ASN1_SET, ERR_R_MALLOC_FAILURE);
d178 1
a178 1
			ASN1err(ASN1_F_D2I_ASN1_SET, ERR_R_MALLOC_FAILURE);
d191 1
a191 1
		ASN1err(ASN1_F_D2I_ASN1_SET, ASN1_R_BAD_CLASS);
d195 1
a195 1
		ASN1err(ASN1_F_D2I_ASN1_SET, ASN1_R_BAD_TAG);
d199 1
a199 1
		ASN1err(ASN1_F_D2I_ASN1_SET, ASN1_R_LENGTH_ERROR);
d214 1
a214 2
			ASN1err(ASN1_F_D2I_ASN1_SET,
			    ASN1_R_ERROR_PARSING_SET_ELEMENT);
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_set.c,v 1.15 2014/07/10 13:58:22 jsing Exp $ */
d228 1
a228 1
	if (ret != NULL && (a == NULL || *a != ret)) {
@


1.16.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_set.c,v 1.16 2014/07/11 08:44:47 jsing Exp $ */
d228 1
a228 1
	if (a == NULL || *a != ret) {
@


1.16.6.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_set.c,v 1.16 2014/07/11 08:44:47 jsing Exp $ */
d228 1
a228 1
	if (a == NULL || *a != ret) {
@


1.15
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_set.c,v 1.14 2014/06/24 19:34:06 miod Exp $ */
a61 1
#include "cryptlib.h"
d63 1
@


1.14
log
@Remove previously commented out wrong code, as well as the comment saying this
is incorrect code.
@
text
@d1 1
a1 1
/* $OpenBSD: a_set.c,v 1.13 2014/06/12 15:49:27 deraadt Exp $ */
d60 2
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a210 2
		/* XXX: This was called with 4 arguments, incorrectly, it seems
		if ((s = func(NULL, &c.p, c.slen, c.max - c.p)) == NULL) */
@


1.12
log
@convert 53 malloc(a*b) to reallocarray(NULL, a, b).  that is 53
potential integer overflows easily changed into an allocation return
of NULL, with errno nicely set if need be.  checks for an allocations
returning NULL are commonplace, or if the object is dereferenced
(quite normal) will result in a nice fault which can be detected &
repaired properly.
ok tedu
@
text
@d1 1
a1 1
/* crypto/asn1/a_set.c */
@


1.11
log
@More KNF.
@
text
@d124 1
a124 1
	rgSetBlob = malloc(sk_OPENSSL_BLOCK_num(a) * sizeof(MYBLOB));
@


1.10
log
@Put back i2d_ASN1_SET() and d2i_ASN1_SET() from the NO_ASN1_OLD prune, as there
are still some 3rd-party code using it, and fixing them is not trivial.

As an excuse gift, the memory leaks on failure in resurrected a_set.c have
been fixed.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d107 1
a107 1
	p= *pp;
d182 1
a182 1
	c.p= *pp;
d219 1
a219 1
		if (!sk_OPENSSL_BLOCK_push(ret,s))
d226 1
@


1.9
log
@The NO_ASN1_OLD define was introduced in 0.9.7, 8 years ago, to allow for
obsolete (and mostly internal) routines to be compiled out.

We don't expect any reasonable software to stick to these interfaces, so better
clean up the view and unifdef -DNO_ASN1_OLD.

The astute reader will notice the existence of NO_OLD_ASN1 which serves a
similar purpose, but is more entangled. Its time will come, soon.
@
text
@d65 4
a68 5
typedef struct
    {
    unsigned char *pbData;
    int cbData;
    } MYBLOB;
d73 20
a92 19
static int SetBlobCmp(const void *elem1, const void *elem2 )
    {
    const MYBLOB *b1 = (const MYBLOB *)elem1;
    const MYBLOB *b2 = (const MYBLOB *)elem2;
    int r;

    r = memcmp(b1->pbData, b2->pbData,
	       b1->cbData < b2->cbData ? b1->cbData : b2->cbData);
    if(r != 0)
	return r;
    return b1->cbData-b2->cbData;
    }

/* int is_set:  if TRUE, then sort the contents (i.e. it isn't a SEQUENCE)    */
int i2d_ASN1_SET(STACK_OF(OPENSSL_BLOCK) *a, unsigned char **pp,
		 i2d_of_void *i2d, int ex_tag, int ex_class,
		 int is_set)
	{
	int ret=0,r;
d95 11
a105 9
        unsigned char *pStart, *pTempMem;
        MYBLOB *rgSetBlob;
        int totSize;

	if (a == NULL) return(0);
	for (i=sk_OPENSSL_BLOCK_num(a)-1; i>=0; i--)
		ret+=i2d(sk_OPENSSL_BLOCK_value(a,i),NULL);
	r=ASN1_object_size(1,ret,ex_tag);
	if (pp == NULL) return(r);
d108 1
a108 1
	ASN1_put_object(&p,1,ret,ex_tag,ex_class);
d110 1
a110 1
/* Modified by gp@@nsj.co.jp */
d114 7
a120 4
	if(!is_set || (sk_OPENSSL_BLOCK_num(a) < 2))
		{
		for (i=0; i<sk_OPENSSL_BLOCK_num(a); i++)
                	i2d(sk_OPENSSL_BLOCK_value(a,i),&p);
d122 35
a156 3
		*pp=p;
		return(r);
		}
d158 4
a161 19
        pStart  = p; /* Catch the beg of Setblobs*/
		/* In this array we will store the SET blobs */
		rgSetBlob = OPENSSL_malloc(sk_OPENSSL_BLOCK_num(a) * sizeof(MYBLOB));
		if (rgSetBlob == NULL)
			{
			ASN1err(ASN1_F_I2D_ASN1_SET,ERR_R_MALLOC_FAILURE);
			return(0);
			}

        for (i=0; i<sk_OPENSSL_BLOCK_num(a); i++)
	        {
                rgSetBlob[i].pbData = p;  /* catch each set encode blob */
                i2d(sk_OPENSSL_BLOCK_value(a,i),&p);
                rgSetBlob[i].cbData = p - rgSetBlob[i].pbData; /* Length of this
SetBlob
*/
		}
        *pp=p;
        totSize = p - pStart; /* This is the total size of all set blobs */
d163 2
a164 16
 /* Now we have to sort the blobs. I am using a simple algo.
    *Sort ptrs *Copy to temp-mem *Copy from temp-mem to user-mem*/
        qsort( rgSetBlob, sk_OPENSSL_BLOCK_num(a), sizeof(MYBLOB), SetBlobCmp);
		if (!(pTempMem = OPENSSL_malloc(totSize)))
			{
			ASN1err(ASN1_F_I2D_ASN1_SET,ERR_R_MALLOC_FAILURE);
			return(0);
			}

/* Copy to temp mem */
        p = pTempMem;
        for(i=0; i<sk_OPENSSL_BLOCK_num(a); ++i)
		{
                memcpy(p, rgSetBlob[i].pbData, rgSetBlob[i].cbData);
                p += rgSetBlob[i].cbData;
		}
d166 5
a170 14
/* Copy back to user mem*/
        memcpy(pStart, pTempMem, totSize);
        OPENSSL_free(pTempMem);
        OPENSSL_free(rgSetBlob);

        return(r);
        }

STACK_OF(OPENSSL_BLOCK) *d2i_ASN1_SET(STACK_OF(OPENSSL_BLOCK) **a,
			      const unsigned char **pp,
			      long length, d2i_of_void *d2i,
			      void (*free_func)(OPENSSL_BLOCK), int ex_tag,
			      int ex_class)
	{
d172 1
a172 1
	STACK_OF(OPENSSL_BLOCK) *ret=NULL;
d174 3
a176 5
	if ((a == NULL) || ((*a) == NULL))
		{
		if ((ret=sk_OPENSSL_BLOCK_new_null()) == NULL)
			{
			ASN1err(ASN1_F_D2I_ASN1_SET,ERR_R_MALLOC_FAILURE);
a177 1
			}
d179 2
a180 2
	else
		ret=(*a);
d183 1
a183 1
	c.max=(length == 0)?0:(c.p+length);
d185 5
a189 5
	c.inf=ASN1_get_object(&c.p,&c.slen,&c.tag,&c.xclass,c.max-c.p);
	if (c.inf & 0x80) goto err;
	if (ex_class != c.xclass)
		{
		ASN1err(ASN1_F_D2I_ASN1_SET,ASN1_R_BAD_CLASS);
d191 3
a193 4
		}
	if (ex_tag != c.tag)
		{
		ASN1err(ASN1_F_D2I_ASN1_SET,ASN1_R_BAD_TAG);
d195 3
a197 4
		}
	if ((c.slen+c.p) > c.max)
		{
		ASN1err(ASN1_F_D2I_ASN1_SET,ASN1_R_LENGTH_ERROR);
d199 1
a199 1
		}
d202 3
a204 3
	if (c.inf == (V_ASN1_CONSTRUCTED+1))
		c.slen=length+ *pp-c.p;
	c.max=c.p+c.slen;
d206 1
a206 2
	while (c.p < c.max)
		{
d209 2
a210 1
		if (M_ASN1_D2I_end_sequence()) break;
d212 5
a216 5
		   if ((s=func(NULL,&c.p,c.slen,c.max-c.p)) == NULL) */
		if ((s=d2i(NULL,&c.p,c.slen)) == NULL)
			{
			ASN1err(ASN1_F_D2I_ASN1_SET,ASN1_R_ERROR_PARSING_SET_ELEMENT);
			asn1_add_error(*pp,(int)(c.p- *pp));
a217 2
			}
		if (!sk_OPENSSL_BLOCK_push(ret,s)) goto err;
d219 7
a225 3
	if (a != NULL) (*a)=ret;
	*pp=c.p;
	return(ret);
d227 1
a227 2
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		{
d229 1
a229 1
			sk_OPENSSL_BLOCK_pop_free(ret,free_func);
a231 2
		}
	return(NULL);
d233 2
@


1.8
log
@resolve conflicts, fix local changes
@
text
@@


1.7
log
@resolve conflicts
@
text
@d88 3
a90 2
int i2d_ASN1_SET(STACK *a, unsigned char **pp, i2d_of_void *i2d, int ex_tag,
		 int ex_class, int is_set)
d100 2
a101 2
	for (i=sk_num(a)-1; i>=0; i--)
		ret+=i2d(sk_value(a,i),NULL);
d112 1
a112 1
	if(!is_set || (sk_num(a) < 2))
d114 2
a115 2
		for (i=0; i<sk_num(a); i++)
                	i2d(sk_value(a,i),&p);
d123 1
a123 1
		rgSetBlob = (MYBLOB *)OPENSSL_malloc(sk_num(a) * sizeof(MYBLOB));
d130 1
a130 1
        for (i=0; i<sk_num(a); i++)
d133 1
a133 1
                i2d(sk_value(a,i),&p);
d143 1
a143 1
        qsort( rgSetBlob, sk_num(a), sizeof(MYBLOB), SetBlobCmp);
d152 1
a152 1
        for(i=0; i<sk_num(a); ++i)
d166 5
a170 3
STACK *d2i_ASN1_SET(STACK **a, const unsigned char **pp, long length,
		    d2i_of_void *d2i, void (*free_func)(void *), int ex_tag,
		    int ex_class)
d173 1
a173 1
	STACK *ret=NULL;
d177 1
a177 1
		if ((ret=sk_new_null()) == NULL)
d222 1
a222 1
			asn1_add_error(*pp,(int)(c.q- *pp));
d225 1
a225 1
		if (!sk_push(ret,s)) goto err;
d234 1
a234 1
			sk_pop_free(ret,free_func);
d236 1
a236 1
			sk_free(ret);
@


1.6
log
@resolve conflicts
@
text
@d88 2
a89 2
int i2d_ASN1_SET(STACK *a, unsigned char **pp, int (*func)(), int ex_tag,
	     int ex_class, int is_set)
d100 1
a100 1
		ret+=func(sk_value(a,i),NULL);
d114 1
a114 1
                	func(sk_value(a,i),&p);
d132 1
a132 1
                func(sk_value(a,i),&p);
d165 3
a167 2
STACK *d2i_ASN1_SET(STACK **a, unsigned char **pp, long length,
	     char *(*func)(), void (*free_func)(void *), int ex_tag, int ex_class)
d169 1
a169 1
	ASN1_CTX c;
d214 3
a216 1
		if ((s=func(NULL,&c.p,c.slen,c.max-c.p)) == NULL)
@


1.5
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d121 7
a127 2
        if (!(rgSetBlob = (MYBLOB *)OPENSSL_malloc( sk_num(a) * sizeof(MYBLOB)))) return 0; /* In this array
we will store the SET blobs */
d143 5
a147 1
        if (!(pTempMem = OPENSSL_malloc(totSize))) return 0;
d172 7
a178 1
		{ if ((ret=sk_new_null()) == NULL) goto err; }
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d121 1
a121 1
        rgSetBlob = (MYBLOB *)OPENSSL_malloc( sk_num(a) * sizeof(MYBLOB)); /* In this array
d138 1
a138 1
        pTempMem = OPENSSL_malloc(totSize);
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d63 2
d220 1
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d119 1
a119 1
        rgSetBlob = (MYBLOB *)Malloc( sk_num(a) * sizeof(MYBLOB)); /* In this array
d136 1
a136 1
        pTempMem = Malloc(totSize);
d148 2
a149 2
        Free(pTempMem);
        Free(rgSetBlob);
d155 1
a155 1
	     char *(*func)(), void (*free_func)(), int ex_tag, int ex_class)
d161 1
a161 1
		{ if ((ret=sk_new(NULL)) == NULL) goto err; }
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "asn1_mac.h"
d63 8
a70 1
/* ASN1err(ASN1_F_ASN1_TYPE_NEW,ERR_R_MALLOC_FAILURE);
d72 16
a87 7

int i2d_ASN1_SET(a,pp,func,ex_tag,ex_class)
STACK *a;
unsigned char **pp;
int (*func)();
int ex_tag;
int ex_class;
d92 3
a103 2
	for (i=0; i<sk_num(a); i++)
		func(sk_value(a,i),&p);
d105 51
a155 11
	*pp=p;
	return(r);
	}

STACK *d2i_ASN1_SET(a,pp,length,func,ex_tag,ex_class)
STACK **a;
unsigned char **pp;
long length;
char *(*func)();
int ex_tag;
int ex_class;
d196 6
a201 1
		if ((s=func(NULL,&c.p,c.slen,c.max-c.p)) == NULL) goto err;
d208 7
a214 1
	if ((ret != NULL) && ((a == NULL) || (*a != ret))) sk_free(ret);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/asn1_mac.h>
d63 2
a64 7
#ifndef NO_ASN1_OLD

typedef struct
    {
    unsigned char *pbData;
    int cbData;
    } MYBLOB;
d66 6
a71 19
/* SetBlobCmp
 * This function compares two elements of SET_OF block
 */
static int SetBlobCmp(const void *elem1, const void *elem2 )
    {
    const MYBLOB *b1 = (const MYBLOB *)elem1;
    const MYBLOB *b2 = (const MYBLOB *)elem2;
    int r;

    r = memcmp(b1->pbData, b2->pbData,
	       b1->cbData < b2->cbData ? b1->cbData : b2->cbData);
    if(r != 0)
	return r;
    return b1->cbData-b2->cbData;
    }

/* int is_set:  if TRUE, then sort the contents (i.e. it isn't a SEQUENCE)    */
int i2d_ASN1_SET(STACK *a, unsigned char **pp, int (*func)(), int ex_tag,
	     int ex_class, int is_set)
a75 3
        unsigned char *pStart, *pTempMem;
        MYBLOB *rgSetBlob;
        int totSize;
d85 2
d88 3
a90 3
/* Modified by gp@@nsj.co.jp */
	/* And then again by Ben */
	/* And again by Steve */
d92 7
a98 47
	if(!is_set || (sk_num(a) < 2))
		{
		for (i=0; i<sk_num(a); i++)
                	func(sk_value(a,i),&p);

		*pp=p;
		return(r);
		}

        pStart  = p; /* Catch the beg of Setblobs*/
        if (!(rgSetBlob = (MYBLOB *)OPENSSL_malloc( sk_num(a) * sizeof(MYBLOB)))) return 0; /* In this array
we will store the SET blobs */

        for (i=0; i<sk_num(a); i++)
	        {
                rgSetBlob[i].pbData = p;  /* catch each set encode blob */
                func(sk_value(a,i),&p);
                rgSetBlob[i].cbData = p - rgSetBlob[i].pbData; /* Length of this
SetBlob
*/
		}
        *pp=p;
        totSize = p - pStart; /* This is the total size of all set blobs */

 /* Now we have to sort the blobs. I am using a simple algo.
    *Sort ptrs *Copy to temp-mem *Copy from temp-mem to user-mem*/
        qsort( rgSetBlob, sk_num(a), sizeof(MYBLOB), SetBlobCmp);
        if (!(pTempMem = OPENSSL_malloc(totSize))) return 0;

/* Copy to temp mem */
        p = pTempMem;
        for(i=0; i<sk_num(a); ++i)
		{
                memcpy(p, rgSetBlob[i].pbData, rgSetBlob[i].cbData);
                p += rgSetBlob[i].cbData;
		}

/* Copy back to user mem*/
        memcpy(pStart, pTempMem, totSize);
        OPENSSL_free(pTempMem);
        OPENSSL_free(rgSetBlob);

        return(r);
        }

STACK *d2i_ASN1_SET(STACK **a, unsigned char **pp, long length,
	     char *(*func)(), void (*free_func)(void *), int ex_tag, int ex_class)
d104 1
a104 1
		{ if ((ret=sk_new_null()) == NULL) goto err; }
d139 1
a139 6
		if ((s=func(NULL,&c.p,c.slen,c.max-c.p)) == NULL)
			{
			ASN1err(ASN1_F_D2I_ASN1_SET,ASN1_R_ERROR_PARSING_SET_ELEMENT);
			asn1_add_error(*pp,(int)(c.q- *pp));
			goto err;
			}
d146 1
a146 7
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		{
		if (free_func != NULL)
			sk_pop_free(ret,free_func);
		else
			sk_free(ret);
		}
a149 1
#endif
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d121 2
a122 7
		/* In this array we will store the SET blobs */
		rgSetBlob = (MYBLOB *)OPENSSL_malloc(sk_num(a) * sizeof(MYBLOB));
		if (rgSetBlob == NULL)
			{
			ASN1err(ASN1_F_I2D_ASN1_SET,ERR_R_MALLOC_FAILURE);
			return(0);
			}
d138 1
a138 5
		if (!(pTempMem = OPENSSL_malloc(totSize)))
			{
			ASN1err(ASN1_F_I2D_ASN1_SET,ERR_R_MALLOC_FAILURE);
			return(0);
			}
d163 1
a163 7
		{
		if ((ret=sk_new_null()) == NULL)
			{
			ASN1err(ASN1_F_D2I_ASN1_SET,ERR_R_MALLOC_FAILURE);
			goto err;
			}
		}
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d88 2
a89 2
int i2d_ASN1_SET(STACK *a, unsigned char **pp, i2d_of_void *i2d, int ex_tag,
		 int ex_class, int is_set)
d100 1
a100 1
		ret+=i2d(sk_value(a,i),NULL);
d114 1
a114 1
                	i2d(sk_value(a,i),&p);
d132 1
a132 1
                i2d(sk_value(a,i),&p);
d165 2
a166 3
STACK *d2i_ASN1_SET(STACK **a, const unsigned char **pp, long length,
		    d2i_of_void *d2i, void (*free_func)(void *), int ex_tag,
		    int ex_class)
d168 1
a168 1
	ASN1_const_CTX c;
d213 1
a213 3
		/* XXX: This was called with 4 arguments, incorrectly, it seems
		   if ((s=func(NULL,&c.p,c.slen,c.max-c.p)) == NULL) */
		if ((s=d2i(NULL,&c.p,c.slen)) == NULL)
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d88 2
a89 3
int i2d_ASN1_SET(STACK_OF(OPENSSL_BLOCK) *a, unsigned char **pp,
		 i2d_of_void *i2d, int ex_tag, int ex_class,
		 int is_set)
d99 2
a100 2
	for (i=sk_OPENSSL_BLOCK_num(a)-1; i>=0; i--)
		ret+=i2d(sk_OPENSSL_BLOCK_value(a,i),NULL);
d111 1
a111 1
	if(!is_set || (sk_OPENSSL_BLOCK_num(a) < 2))
d113 2
a114 2
		for (i=0; i<sk_OPENSSL_BLOCK_num(a); i++)
                	i2d(sk_OPENSSL_BLOCK_value(a,i),&p);
d122 1
a122 1
		rgSetBlob = OPENSSL_malloc(sk_OPENSSL_BLOCK_num(a) * sizeof(MYBLOB));
d129 1
a129 1
        for (i=0; i<sk_OPENSSL_BLOCK_num(a); i++)
d132 1
a132 1
                i2d(sk_OPENSSL_BLOCK_value(a,i),&p);
d142 1
a142 1
        qsort( rgSetBlob, sk_OPENSSL_BLOCK_num(a), sizeof(MYBLOB), SetBlobCmp);
d151 1
a151 1
        for(i=0; i<sk_OPENSSL_BLOCK_num(a); ++i)
d165 3
a167 5
STACK_OF(OPENSSL_BLOCK) *d2i_ASN1_SET(STACK_OF(OPENSSL_BLOCK) **a,
			      const unsigned char **pp,
			      long length, d2i_of_void *d2i,
			      void (*free_func)(OPENSSL_BLOCK), int ex_tag,
			      int ex_class)
d170 1
a170 1
	STACK_OF(OPENSSL_BLOCK) *ret=NULL;
d174 1
a174 1
		if ((ret=sk_OPENSSL_BLOCK_new_null()) == NULL)
d219 1
a219 1
			asn1_add_error(*pp,(int)(c.p- *pp));
d222 1
a222 1
		if (!sk_OPENSSL_BLOCK_push(ret,s)) goto err;
d231 1
a231 1
			sk_OPENSSL_BLOCK_pop_free(ret,free_func);
d233 1
a233 1
			sk_OPENSSL_BLOCK_free(ret);
@


