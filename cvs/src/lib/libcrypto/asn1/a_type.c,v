head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.2
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.19
date	2016.05.04.15.00.24;	author tedu;	state Exp;
branches;
next	1.18;
commitid	s4NE9FX4wus4Piaj;

1.18
date	2016.05.04.14.53.29;	author tedu;	state Exp;
branches;
next	1.17;
commitid	dp2wUlmUxyODyIfQ;

1.17
date	2016.05.03.12.38.53;	author tedu;	state Exp;
branches;
next	1.16;
commitid	0ClIPo2LiLW7bSvG;

1.16
date	2015.03.19.14.00.22;	author tedu;	state Exp;
branches
	1.16.2.1
	1.16.4.1;
next	1.15;
commitid	Ix1rLPv61p1TR5LF;

1.15
date	2015.02.10.08.33.10;	author jsing;	state Exp;
branches
	1.15.4.1;
next	1.14;
commitid	v5VD2cgZRaYX8ah1;

1.14
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches
	1.14.4.1;
next	1.13;
commitid	yQEL1wOWIearrW15;

1.13
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.04.19.13.29.11;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches
	1.9.16.1;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.06;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.39;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.28;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.47;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.31;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;

1.9.16.1
date	2015.03.19.14.02.55;	author tedu;	state Exp;
branches;
next	;
commitid	sTS3SfguVp6RgZzt;

1.14.4.1
date	2015.03.19.14.02.22;	author tedu;	state Exp;
branches;
next	;
commitid	bYTbbXa7PWk8y7To;

1.15.4.1
date	2015.03.19.14.01.15;	author tedu;	state Exp;
branches;
next	;
commitid	dQgHc1qjfDF6g1rY;

1.16.2.1
date	2016.05.03.12.39.48;	author tedu;	state Exp;
branches;
next	;
commitid	Ekna9eOpYJ6UbVcF;

1.16.4.1
date	2016.05.03.12.39.23;	author tedu;	state Exp;
branches;
next	;
commitid	5iHrqqr5iZFurKzX;


desc
@@


1.19
log
@internal only negative types should not be handled here.
CVE-2016-2108 from openssl.
@
text
@/* $OpenBSD: a_type.c,v 1.18 2016/05/04 14:53:29 tedu Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1t.h>
#include <openssl/objects.h>

int
ASN1_TYPE_get(ASN1_TYPE *a)
{
	if ((a->value.ptr != NULL) || (a->type == V_ASN1_NULL))
		return (a->type);
	else
		return (0);
}

void
ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
{
	if (a->value.ptr != NULL) {
		ASN1_TYPE **tmp_a = &a;
		ASN1_primitive_free((ASN1_VALUE **)tmp_a, NULL);
	}
	a->type = type;
	if (type == V_ASN1_BOOLEAN)
		a->value.boolean = value ? 0xff : 0;
	else
		a->value.ptr = value;
}

int
ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
{
	if (!value || (type == V_ASN1_BOOLEAN)) {
		void *p = (void *)value;
		ASN1_TYPE_set(a, type, p);
	} else if (type == V_ASN1_OBJECT) {
		ASN1_OBJECT *odup;
		odup = OBJ_dup(value);
		if (!odup)
			return 0;
		ASN1_TYPE_set(a, type, odup);
	} else {
		ASN1_STRING *sdup;
		sdup = ASN1_STRING_dup(value);
		if (!sdup)
			return 0;
		ASN1_TYPE_set(a, type, sdup);
	}
	return 1;
}

/* Returns 0 if they are equal, != 0 otherwise. */
int
ASN1_TYPE_cmp(ASN1_TYPE *a, ASN1_TYPE *b)
{
	int result = -1;

	if (!a || !b || a->type != b->type)
		return -1;

	switch (a->type) {
	case V_ASN1_OBJECT:
		result = OBJ_cmp(a->value.object, b->value.object);
		break;
	case V_ASN1_BOOLEAN:
		result = a->value.boolean - b->value.boolean;
		break;
	case V_ASN1_NULL:
		result = 0;	/* They do not have content. */
		break;

	case V_ASN1_INTEGER:
	case V_ASN1_ENUMERATED:
	case V_ASN1_BIT_STRING:
	case V_ASN1_OCTET_STRING:
	case V_ASN1_SEQUENCE:
	case V_ASN1_SET:
	case V_ASN1_NUMERICSTRING:
	case V_ASN1_PRINTABLESTRING:
	case V_ASN1_T61STRING:
	case V_ASN1_VIDEOTEXSTRING:
	case V_ASN1_IA5STRING:
	case V_ASN1_UTCTIME:
	case V_ASN1_GENERALIZEDTIME:
	case V_ASN1_GRAPHICSTRING:
	case V_ASN1_VISIBLESTRING:
	case V_ASN1_GENERALSTRING:
	case V_ASN1_UNIVERSALSTRING:
	case V_ASN1_BMPSTRING:
	case V_ASN1_UTF8STRING:
	case V_ASN1_OTHER:
	default:
		result = ASN1_STRING_cmp((ASN1_STRING *)a->value.ptr,
		    (ASN1_STRING *)b->value.ptr);
		break;
	}

	return result;
}
@


1.18
log
@revert the big change from yesterday to prepare for smaller commits.
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.17 2016/05/03 12:38:53 tedu Exp $ */
a129 1
	case V_ASN1_NEG_INTEGER:
a130 1
	case V_ASN1_NEG_ENUMERATED:
@


1.17
log
@patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.16 2015/03/19 14:00:22 tedu Exp $ */
d130 1
d132 1
@


1.16
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.15 2015/02/10 08:33:10 jsing Exp $ */
a129 1
	case V_ASN1_NEG_INTEGER:
a130 1
	case V_ASN1_NEG_ENUMERATED:
@


1.16.2.1
log
@backport patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.16 2015/03/19 14:00:22 tedu Exp $ */
d130 1
d132 1
@


1.16.4.1
log
@backport patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.16 2015/03/19 14:00:22 tedu Exp $ */
d130 1
d132 1
@


1.15
log
@The IMPLEMENT_STACK_OF and IMPLEMENT_ASN1_SET_OF macros were turned into
noops around 15 years ago. Remove multiple occurances of both that still
exist in the code today.
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.14 2014/07/11 08:44:47 jsing Exp $ */
d122 3
a124 1

@


1.15.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.15 2015/02/10 08:33:10 jsing Exp $ */
d122 1
a122 3
	case V_ASN1_BOOLEAN:
		result = a->value.boolean - b->value.boolean;
		break;
@


1.14
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.13 2014/06/12 15:49:27 deraadt Exp $ */
a107 3

IMPLEMENT_STACK_OF(ASN1_TYPE)
IMPLEMENT_ASN1_SET_OF(ASN1_TYPE)
@


1.14.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_type.c,v 1.14 2014/07/11 08:44:47 jsing Exp $ */
d125 1
a125 3
	case V_ASN1_BOOLEAN:
		result = a->value.boolean - b->value.boolean;
		break;
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
@


1.12
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/a_type.c */
@


1.11
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d64 2
a65 1
int ASN1_TYPE_get(ASN1_TYPE *a)
d68 1
a68 1
		return(a->type);
d70 1
a70 1
		return(0);
d73 2
a74 1
void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
d80 1
a80 1
	a->type=type;
d84 1
a84 1
		a->value.ptr=value;
d87 2
a88 1
int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
d113 2
a114 1
int ASN1_TYPE_cmp(ASN1_TYPE *a, ASN1_TYPE *b)
d118 2
a119 1
	if (!a || !b || a->type != b->type) return -1;
d125 1
d129 1
d153 2
a154 2
		result = ASN1_STRING_cmp((ASN1_STRING *) a->value.ptr,
					 (ASN1_STRING *) b->value.ptr);
@


1.10
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d74 1
a74 2
	if (a->value.ptr != NULL)
	{
d87 1
a87 2
	if (!value || (type == V_ASN1_BOOLEAN))
	{
d90 1
a90 3
	}
	else if (type == V_ASN1_OBJECT)
	{
d96 1
a96 3
	}
	else
	{
d116 1
a116 2
	switch (a->type)
	{
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d65 1
a65 1
	{
d70 1
a70 1
	}
d73 2
a75 2
	if (a->value.ptr != NULL)
		{
d78 1
a78 1
		}
d84 1
a84 1
	}
d87 2
a89 2
	if (!value || (type == V_ASN1_BOOLEAN))
		{
d92 1
a92 1
		}
d94 1
a94 1
		{
d100 1
a100 1
		}
d102 1
a102 1
		{
d108 1
a108 1
		}
d110 1
a110 1
	}
d117 1
a117 1
	{
d123 1
a123 1
		{
d156 1
a156 1
		}
d159 1
a159 1
	}
@


1.9.16.1
log
@Fix two possible crash causing defects.
CVE-2015-0286 - Apply fix from OpenSSL for ASN1_TYPE_cmp.
CVE-2015-0292 - Backport existing fix for Base64 decoding.
@
text
@a126 3
	case V_ASN1_BOOLEAN:
		result = a->value.boolean - b->value.boolean;
		break;
@


1.8
log
@resolve conflicts
@
text
@d80 4
a83 1
	a->value.ptr=value;
d104 1
a104 1
		sdup = ASN1_STRING_dup((ASN1_STRING *)value);
d114 46
@


1.7
log
@resolve conflicts
@
text
@d60 1
d62 1
a62 1
#include "cryptlib.h"
d83 25
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d74 4
a77 1
		ASN1_primitive_free((ASN1_VALUE **)&a, NULL);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d65 1
a65 1
	if (a->value.ptr != NULL)
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d60 1
a61 229
#include <openssl/asn1_mac.h>

static void ASN1_TYPE_component_free(ASN1_TYPE *a);
int i2d_ASN1_TYPE(ASN1_TYPE *a, unsigned char **pp)
	{
	int r=0;

	if (a == NULL) return(0);

	switch (a->type)
		{
	case V_ASN1_NULL:
		if (pp != NULL)
			ASN1_put_object(pp,0,0,V_ASN1_NULL,V_ASN1_UNIVERSAL);
		r=2;
		break;
	case V_ASN1_INTEGER:
	case V_ASN1_NEG_INTEGER:
		r=i2d_ASN1_INTEGER(a->value.integer,pp);
		break;
	case V_ASN1_ENUMERATED:
	case V_ASN1_NEG_ENUMERATED:
		r=i2d_ASN1_ENUMERATED(a->value.enumerated,pp);
		break;
	case V_ASN1_BIT_STRING:
		r=i2d_ASN1_BIT_STRING(a->value.bit_string,pp);
		break;
	case V_ASN1_OCTET_STRING:
		r=i2d_ASN1_OCTET_STRING(a->value.octet_string,pp);
		break;
	case V_ASN1_OBJECT:
		r=i2d_ASN1_OBJECT(a->value.object,pp);
		break;
	case V_ASN1_PRINTABLESTRING:
		r=M_i2d_ASN1_PRINTABLESTRING(a->value.printablestring,pp);
		break;
	case V_ASN1_T61STRING:
		r=M_i2d_ASN1_T61STRING(a->value.t61string,pp);
		break;
	case V_ASN1_IA5STRING:
		r=M_i2d_ASN1_IA5STRING(a->value.ia5string,pp);
		break;
	case V_ASN1_GENERALSTRING:
		r=M_i2d_ASN1_GENERALSTRING(a->value.generalstring,pp);
		break;
	case V_ASN1_UNIVERSALSTRING:
		r=M_i2d_ASN1_UNIVERSALSTRING(a->value.universalstring,pp);
		break;
	case V_ASN1_UTF8STRING:
		r=M_i2d_ASN1_UTF8STRING(a->value.utf8string,pp);
		break;
	case V_ASN1_VISIBLESTRING:
		r=M_i2d_ASN1_VISIBLESTRING(a->value.visiblestring,pp);
		break;
	case V_ASN1_BMPSTRING:
		r=M_i2d_ASN1_BMPSTRING(a->value.bmpstring,pp);
		break;
	case V_ASN1_UTCTIME:
		r=i2d_ASN1_UTCTIME(a->value.utctime,pp);
		break;
	case V_ASN1_GENERALIZEDTIME:
		r=i2d_ASN1_GENERALIZEDTIME(a->value.generalizedtime,pp);
		break;
	case V_ASN1_SET:
	case V_ASN1_SEQUENCE:
	case V_ASN1_OTHER:
	default:
		if (a->value.set == NULL)
			r=0;
		else
			{
			r=a->value.set->length;
			if (pp != NULL)
				{
				memcpy(*pp,a->value.set->data,r);
				*pp+=r;
				}
			}
		break;
		}
	return(r);
	}

ASN1_TYPE *d2i_ASN1_TYPE(ASN1_TYPE **a, unsigned char **pp, long length)
	{
	ASN1_TYPE *ret=NULL;
	unsigned char *q,*p,*max;
	int inf,tag,xclass;
	long len;

	if ((a == NULL) || ((*a) == NULL))
		{
		if ((ret=ASN1_TYPE_new()) == NULL) goto err;
		}
	else
		ret=(*a);

	p= *pp;
	q=p;
	max=(p+length);

	inf=ASN1_get_object(&q,&len,&tag,&xclass,length);
	if (inf & 0x80) goto err;
	/* If not universal tag we've no idea what it is */
	if(xclass != V_ASN1_UNIVERSAL) tag = V_ASN1_OTHER;
	
	ASN1_TYPE_component_free(ret);

	switch (tag)
		{
	case V_ASN1_NULL:
		p=q;
		ret->value.ptr=NULL;
		break;
	case V_ASN1_INTEGER:
		if ((ret->value.integer=
			d2i_ASN1_INTEGER(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_ENUMERATED:
		if ((ret->value.enumerated=
			d2i_ASN1_ENUMERATED(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_BIT_STRING:
		if ((ret->value.bit_string=
			d2i_ASN1_BIT_STRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_OCTET_STRING:
		if ((ret->value.octet_string=
			d2i_ASN1_OCTET_STRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_VISIBLESTRING:
		if ((ret->value.visiblestring=
			d2i_ASN1_VISIBLESTRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_UTF8STRING:
		if ((ret->value.utf8string=
			d2i_ASN1_UTF8STRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_OBJECT:
		if ((ret->value.object=
			d2i_ASN1_OBJECT(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_PRINTABLESTRING:
		if ((ret->value.printablestring=
			d2i_ASN1_PRINTABLESTRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_T61STRING:
		if ((ret->value.t61string=
			M_d2i_ASN1_T61STRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_IA5STRING:
		if ((ret->value.ia5string=
			M_d2i_ASN1_IA5STRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_GENERALSTRING:
		if ((ret->value.generalstring=
			M_d2i_ASN1_GENERALSTRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_UNIVERSALSTRING:
		if ((ret->value.universalstring=
			M_d2i_ASN1_UNIVERSALSTRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_BMPSTRING:
		if ((ret->value.bmpstring=
			M_d2i_ASN1_BMPSTRING(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_UTCTIME:
		if ((ret->value.utctime=
			d2i_ASN1_UTCTIME(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_GENERALIZEDTIME:
		if ((ret->value.generalizedtime=
			d2i_ASN1_GENERALIZEDTIME(NULL,&p,max-p)) == NULL)
			goto err;
		break;
	case V_ASN1_SET:
	case V_ASN1_SEQUENCE:
	case V_ASN1_OTHER:
	default:
		/* Sets and sequences are left complete */
		if ((ret->value.set=ASN1_STRING_new()) == NULL) goto err;
		ret->value.set->type=tag;
		len+=(q-p);
		if (!ASN1_STRING_set(ret->value.set,p,(int)len)) goto err;
		p+=len;
		break;
		}

	ret->type=tag;
	if (a != NULL) (*a)=ret;
	*pp=p;
	return(ret);
err:
	if ((ret != NULL) && ((a == NULL) || (*a != ret))) ASN1_TYPE_free(ret);
	return(NULL);
	}

ASN1_TYPE *ASN1_TYPE_new(void)
	{
	ASN1_TYPE *ret=NULL;
	ASN1_CTX c;

	M_ASN1_New_Malloc(ret,ASN1_TYPE);
	ret->type= -1;
	ret->value.ptr=NULL;
	return(ret);
	M_ASN1_New_Error(ASN1_F_ASN1_TYPE_NEW);
	}

void ASN1_TYPE_free(ASN1_TYPE *a)
	{
	if (a == NULL) return;
	ASN1_TYPE_component_free(a);
	OPENSSL_free(a);
	}
d74 1
a74 1
		ASN1_TYPE_component_free(a);
a78 43
static void ASN1_TYPE_component_free(ASN1_TYPE *a)
	{
	if (a == NULL) return;

	if (a->value.ptr != NULL)
		{
		switch (a->type)
			{
		case V_ASN1_OBJECT:
			ASN1_OBJECT_free(a->value.object);
			break;
		case V_ASN1_NULL:
			break;
		case V_ASN1_INTEGER:
		case V_ASN1_NEG_INTEGER:
		case V_ASN1_ENUMERATED:
		case V_ASN1_NEG_ENUMERATED:
		case V_ASN1_BIT_STRING:
		case V_ASN1_OCTET_STRING:
		case V_ASN1_SEQUENCE:
		case V_ASN1_SET:
		case V_ASN1_NUMERICSTRING:
		case V_ASN1_PRINTABLESTRING:
		case V_ASN1_T61STRING:
		case V_ASN1_VIDEOTEXSTRING:
		case V_ASN1_IA5STRING:
		case V_ASN1_UTCTIME:
		case V_ASN1_GENERALIZEDTIME:
		case V_ASN1_GRAPHICSTRING:
		case V_ASN1_VISIBLESTRING:
		case V_ASN1_GENERALSTRING:
		case V_ASN1_UNIVERSALSTRING:
		case V_ASN1_BMPSTRING:
		case V_ASN1_UTF8STRING:
		case V_ASN1_OTHER:
		default:
			ASN1_STRING_free((ASN1_STRING *)a->value.ptr);
			break;
			}
		a->type=0;
		a->value.ptr=NULL;
		}
	}
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d126 2
d164 2
d252 2
a260 3
	default:
		ASN1err(ASN1_F_D2I_ASN1_TYPE,ASN1_R_BAD_TYPE);
		goto err;
d288 1
a288 1
	Free(a);
d318 2
d341 2
a343 3
			break;
		default:
			/* MEMORY LEAK */
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d285 1
a285 1
	Free((char *)(char *)a);
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "asn1_mac.h"
a62 7
/* ASN1err(ASN1_F_ASN1_TYPE_NEW,ASN1_R_ERROR_STACK);
 * ASN1err(ASN1_F_D2I_ASN1_BYTES,ASN1_R_ERROR_STACK);
 * ASN1err(ASN1_F_D2I_ASN1_BYTES,ASN1_R_WRONG_TAG);
 * ASN1err(ASN1_F_ASN1_COLLATE_PRIMATIVE,ASN1_R_WRONG_TAG);
 */

#ifndef NOPROTO
d64 1
a64 7
#else
static void ASN1_TYPE_component_free();
#endif

int i2d_ASN1_TYPE(a,pp)
ASN1_TYPE *a;
unsigned char **pp;
d81 4
d109 6
d121 3
d142 1
a142 4
ASN1_TYPE *d2i_ASN1_TYPE(a,pp,length)
ASN1_TYPE **a;
unsigned char **pp;
long length;
d176 5
d191 10
d241 5
d269 1
a269 1
ASN1_TYPE *ASN1_TYPE_new()
d272 1
d281 1
a281 2
void ASN1_TYPE_free(a)
ASN1_TYPE *a;
d288 1
a288 2
int ASN1_TYPE_get(a)
ASN1_TYPE *a;
d296 1
a296 4
void ASN1_TYPE_set(a,type,value)
ASN1_TYPE *a;
int type;
char *value;
d304 1
a304 2
static void ASN1_TYPE_component_free(a)
ASN1_TYPE *a;
d317 2
d321 3
d326 1
d328 5
d334 2
a335 4
		case V_ASN1_GENERALSTRING:
		case V_ASN1_UTCTIME:
		case V_ASN1_SET:
		case V_ASN1_SEQUENCE:
d347 2
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a59 1
#include <openssl/asn1t.h>
d61 1
d63 210
a272 1
int ASN1_TYPE_get(ASN1_TYPE *a)
d280 4
a283 1
void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
d286 1
a286 1
		ASN1_primitive_free((ASN1_VALUE **)&a, NULL);
d291 34
a325 2
IMPLEMENT_STACK_OF(ASN1_TYPE)
IMPLEMENT_ASN1_SET_OF(ASN1_TYPE)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d65 1
a65 1
	if ((a->value.ptr != NULL) || (a->type == V_ASN1_NULL))
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d74 1
a74 4
		{
		ASN1_TYPE **tmp_a = &a;
		ASN1_primitive_free((ASN1_VALUE **)tmp_a, NULL);
		}
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d60 1
a61 2
#include <openssl/asn1t.h>
#include <openssl/objects.h>
a81 25
int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
	{
	if (!value || (type == V_ASN1_BOOLEAN))
		{
		void *p = (void *)value;
		ASN1_TYPE_set(a, type, p);
		}
	else if (type == V_ASN1_OBJECT)
		{
		ASN1_OBJECT *odup;
		odup = OBJ_dup(value);
		if (!odup)
			return 0;
		ASN1_TYPE_set(a, type, odup);
		}
	else
		{
		ASN1_STRING *sdup;
		sdup = ASN1_STRING_dup((ASN1_STRING *)value);
		if (!sdup)
			return 0;
		ASN1_TYPE_set(a, type, sdup);
		}
	return 1;
	}
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d80 1
a80 4
	if (type == V_ASN1_BOOLEAN)
		a->value.boolean = value ? 0xff : 0;
	else
		a->value.ptr=value;
d101 1
a101 1
		sdup = ASN1_STRING_dup(value);
a110 46

/* Returns 0 if they are equal, != 0 otherwise. */
int ASN1_TYPE_cmp(ASN1_TYPE *a, ASN1_TYPE *b)
	{
	int result = -1;

	if (!a || !b || a->type != b->type) return -1;

	switch (a->type)
		{
	case V_ASN1_OBJECT:
		result = OBJ_cmp(a->value.object, b->value.object);
		break;
	case V_ASN1_NULL:
		result = 0;	/* They do not have content. */
		break;
	case V_ASN1_INTEGER:
	case V_ASN1_NEG_INTEGER:
	case V_ASN1_ENUMERATED:
	case V_ASN1_NEG_ENUMERATED:
	case V_ASN1_BIT_STRING:
	case V_ASN1_OCTET_STRING:
	case V_ASN1_SEQUENCE:
	case V_ASN1_SET:
	case V_ASN1_NUMERICSTRING:
	case V_ASN1_PRINTABLESTRING:
	case V_ASN1_T61STRING:
	case V_ASN1_VIDEOTEXSTRING:
	case V_ASN1_IA5STRING:
	case V_ASN1_UTCTIME:
	case V_ASN1_GENERALIZEDTIME:
	case V_ASN1_GRAPHICSTRING:
	case V_ASN1_VISIBLESTRING:
	case V_ASN1_GENERALSTRING:
	case V_ASN1_UNIVERSALSTRING:
	case V_ASN1_BMPSTRING:
	case V_ASN1_UTF8STRING:
	case V_ASN1_OTHER:
	default:
		result = ASN1_STRING_cmp((ASN1_STRING *) a->value.ptr,
					 (ASN1_STRING *) b->value.ptr);
		break;
		}

	return result;
	}
@


