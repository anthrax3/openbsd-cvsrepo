head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.01.46.33;	author mmcc;	state Exp;
branches;
next	1.11;
commitid	F3PJDnCoubmSDDdq;

1.11
date	2015.02.10.09.52.35;	author miod;	state Exp;
branches;
next	1.10;
commitid	elQcISUWkrkujoI4;

1.10
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.9;
commitid	id8dTrTMtnTn4fqt;

1.9
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.27.20.26.46;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.19.07.20.59;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.18.38.53;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@assign pointer to NULL rather than 0
@
text
@/* $OpenBSD: bio_asn1.c,v 1.11 2015/02/10 09:52:35 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

/* Experimental ASN1 BIO. When written through the data is converted
 * to an ASN1 string type: default is OCTET STRING. Additional functions
 * can be provided to add prefix and suffix data.
 */

#include <stdlib.h>
#include <string.h>

#include <openssl/bio.h>
#include <openssl/asn1.h>

/* Must be large enough for biggest tag+length */
#define DEFAULT_ASN1_BUF_SIZE 20

typedef enum {
	ASN1_STATE_START,
	ASN1_STATE_PRE_COPY,
	ASN1_STATE_HEADER,
	ASN1_STATE_HEADER_COPY,
	ASN1_STATE_DATA_COPY,
	ASN1_STATE_POST_COPY,
	ASN1_STATE_DONE
} asn1_bio_state_t;

typedef struct BIO_ASN1_EX_FUNCS_st {
	asn1_ps_func	*ex_func;
	asn1_ps_func	*ex_free_func;
} BIO_ASN1_EX_FUNCS;

typedef struct BIO_ASN1_BUF_CTX_t {
	/* Internal state */
	asn1_bio_state_t state;
	/* Internal buffer */
	unsigned char *buf;
	/* Size of buffer */
	int bufsize;
	/* Current position in buffer */
	int bufpos;
	/* Current buffer length */
	int buflen;
	/* Amount of data to copy */
	int copylen;
	/* Class and tag to use */
	int asn1_class, asn1_tag;
	asn1_ps_func *prefix, *prefix_free, *suffix, *suffix_free;
	/* Extra buffer for prefix and suffix data */
	unsigned char *ex_buf;
	int ex_len;
	int ex_pos;
	void *ex_arg;
} BIO_ASN1_BUF_CTX;


static int asn1_bio_write(BIO *h, const char *buf, int num);
static int asn1_bio_read(BIO *h, char *buf, int size);
static int asn1_bio_puts(BIO *h, const char *str);
static int asn1_bio_gets(BIO *h, char *str, int size);
static long asn1_bio_ctrl(BIO *h, int cmd, long arg1, void *arg2);
static int asn1_bio_new(BIO *h);
static int asn1_bio_free(BIO *data);
static long asn1_bio_callback_ctrl(BIO *h, int cmd, bio_info_cb *fp);

static int asn1_bio_init(BIO_ASN1_BUF_CTX *ctx, int size);
static int asn1_bio_flush_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
    asn1_ps_func *cleanup, asn1_bio_state_t next);
static int asn1_bio_setup_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
    asn1_ps_func *setup, asn1_bio_state_t ex_state,
    asn1_bio_state_t other_state);

static BIO_METHOD methods_asn1 = {
	.type = BIO_TYPE_ASN1,
	.name = "asn1",
	.bwrite = asn1_bio_write,
	.bread = asn1_bio_read,
	.bputs = asn1_bio_puts,
	.bgets = asn1_bio_gets,
	.ctrl = asn1_bio_ctrl,
	.create = asn1_bio_new,
	.destroy = asn1_bio_free,
	.callback_ctrl = asn1_bio_callback_ctrl
};

BIO_METHOD *
BIO_f_asn1(void)
{
	return (&methods_asn1);
}

static int
asn1_bio_new(BIO *b)
{
	BIO_ASN1_BUF_CTX *ctx;
	ctx = malloc(sizeof(BIO_ASN1_BUF_CTX));
	if (!ctx)
		return 0;
	if (!asn1_bio_init(ctx, DEFAULT_ASN1_BUF_SIZE)) {
		free(ctx);
		return 0;
	}
	b->init = 1;
	b->ptr = (char *)ctx;
	b->flags = 0;
	return 1;
}

static int
asn1_bio_init(BIO_ASN1_BUF_CTX *ctx, int size)
{
	ctx->buf = malloc(size);
	if (!ctx->buf)
		return 0;
	ctx->bufsize = size;
	ctx->bufpos = 0;
	ctx->buflen = 0;
	ctx->copylen = 0;
	ctx->asn1_class = V_ASN1_UNIVERSAL;
	ctx->asn1_tag = V_ASN1_OCTET_STRING;
	ctx->ex_buf = NULL;
	ctx->ex_pos = 0;
	ctx->ex_len = 0;
	ctx->state = ASN1_STATE_START;
	return 1;
}

static int
asn1_bio_free(BIO *b)
{
	BIO_ASN1_BUF_CTX *ctx;

	ctx = (BIO_ASN1_BUF_CTX *) b->ptr;
	if (ctx == NULL)
		return 0;
	free(ctx->buf);
	free(ctx);
	b->init = 0;
	b->ptr = NULL;
	b->flags = 0;
	return 1;
}

static int
asn1_bio_write(BIO *b, const char *in , int inl)
{
	BIO_ASN1_BUF_CTX *ctx;
	int wrmax, wrlen, ret, buflen;
	unsigned char *p;

	if (!in || (inl < 0) || (b->next_bio == NULL))
		return 0;
	ctx = (BIO_ASN1_BUF_CTX *) b->ptr;
	if (ctx == NULL)
		return 0;

	wrlen = 0;
	ret = -1;

	for (;;) {
		switch (ctx->state) {

			/* Setup prefix data, call it */
		case ASN1_STATE_START:
			if (!asn1_bio_setup_ex(b, ctx, ctx->prefix,
				    ASN1_STATE_PRE_COPY, ASN1_STATE_HEADER))
				return 0;
			break;

			/* Copy any pre data first */
		case ASN1_STATE_PRE_COPY:
			ret = asn1_bio_flush_ex(b, ctx, ctx->prefix_free,
			    ASN1_STATE_HEADER);
			if (ret <= 0)
				goto done;
			break;

		case ASN1_STATE_HEADER:
			buflen = ASN1_object_size(0, inl, ctx->asn1_tag) - inl;
			if (buflen <= 0 || buflen > ctx->bufsize)
				return -1;
			ctx->buflen = buflen;
			p = ctx->buf;
			ASN1_put_object(&p, 0, inl,
			    ctx->asn1_tag, ctx->asn1_class);
			ctx->copylen = inl;
			ctx->state = ASN1_STATE_HEADER_COPY;
			break;

		case ASN1_STATE_HEADER_COPY:
			ret = BIO_write(b->next_bio,
			    ctx->buf + ctx->bufpos, ctx->buflen);
			if (ret <= 0)
				goto done;

			ctx->buflen -= ret;
			if (ctx->buflen)
				ctx->bufpos += ret;
			else {
				ctx->bufpos = 0;
				ctx->state = ASN1_STATE_DATA_COPY;
			}
			break;

		case ASN1_STATE_DATA_COPY:

			if (inl > ctx->copylen)
				wrmax = ctx->copylen;
			else
				wrmax = inl;
			ret = BIO_write(b->next_bio, in, wrmax);
			if (ret <= 0)
				break;
			wrlen += ret;
			ctx->copylen -= ret;
			in += ret;
			inl -= ret;

			if (ctx->copylen == 0)
				ctx->state = ASN1_STATE_HEADER;
			if (inl == 0)
				goto done;
			break;

		default:
			BIO_clear_retry_flags(b);
			return 0;
		}

	}

done:
	BIO_clear_retry_flags(b);
	BIO_copy_next_retry(b);

	return (wrlen > 0) ? wrlen : ret;
}

static int
asn1_bio_flush_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx, asn1_ps_func *cleanup,
    asn1_bio_state_t next)
{
	int ret;

	if (ctx->ex_len <= 0)
		return 1;
	for (;;) {
		ret = BIO_write(b->next_bio, ctx->ex_buf + ctx->ex_pos,
		    ctx->ex_len);
		if (ret <= 0)
			break;
		ctx->ex_len -= ret;
		if (ctx->ex_len > 0)
			ctx->ex_pos += ret;
		else {
			if (cleanup)
				cleanup(b, &ctx->ex_buf, &ctx->ex_len,
				    &ctx->ex_arg);
			ctx->state = next;
			ctx->ex_pos = 0;
			break;
		}
	}
	return ret;
}

static int
asn1_bio_setup_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx, asn1_ps_func *setup,
    asn1_bio_state_t ex_state, asn1_bio_state_t other_state)
{
	if (setup && !setup(b, &ctx->ex_buf, &ctx->ex_len, &ctx->ex_arg)) {
		BIO_clear_retry_flags(b);
		return 0;
	}
	if (ctx->ex_len > 0)
		ctx->state = ex_state;
	else
		ctx->state = other_state;
	return 1;
}

static int
asn1_bio_read(BIO *b, char *in , int inl)
{
	if (!b->next_bio)
		return 0;
	return BIO_read(b->next_bio, in , inl);
}

static int
asn1_bio_puts(BIO *b, const char *str)
{
	return asn1_bio_write(b, str, strlen(str));
}

static int
asn1_bio_gets(BIO *b, char *str, int size)
{
	if (!b->next_bio)
		return 0;
	return BIO_gets(b->next_bio, str , size);
}

static long
asn1_bio_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
{
	if (b->next_bio == NULL)
		return (0);
	return BIO_callback_ctrl(b->next_bio, cmd, fp);
}

static long
asn1_bio_ctrl(BIO *b, int cmd, long arg1, void *arg2)
{
	BIO_ASN1_BUF_CTX *ctx;
	BIO_ASN1_EX_FUNCS *ex_func;
	long ret = 1;

	ctx = (BIO_ASN1_BUF_CTX *) b->ptr;
	if (ctx == NULL)
		return 0;
	switch (cmd) {

	case BIO_C_SET_PREFIX:
		ex_func = arg2;
		ctx->prefix = ex_func->ex_func;
		ctx->prefix_free = ex_func->ex_free_func;
		break;

	case BIO_C_GET_PREFIX:
		ex_func = arg2;
		ex_func->ex_func = ctx->prefix;
		ex_func->ex_free_func = ctx->prefix_free;
		break;

	case BIO_C_SET_SUFFIX:
		ex_func = arg2;
		ctx->suffix = ex_func->ex_func;
		ctx->suffix_free = ex_func->ex_free_func;
		break;

	case BIO_C_GET_SUFFIX:
		ex_func = arg2;
		ex_func->ex_func = ctx->suffix;
		ex_func->ex_free_func = ctx->suffix_free;
		break;

	case BIO_C_SET_EX_ARG:
		ctx->ex_arg = arg2;
		break;

	case BIO_C_GET_EX_ARG:
		*(void **)arg2 = ctx->ex_arg;
		break;

	case BIO_CTRL_FLUSH:
		if (!b->next_bio)
			return 0;

		/* Call post function if possible */
		if (ctx->state == ASN1_STATE_HEADER) {
			if (!asn1_bio_setup_ex(b, ctx, ctx->suffix,
			    ASN1_STATE_POST_COPY, ASN1_STATE_DONE))
				return 0;
		}

		if (ctx->state == ASN1_STATE_POST_COPY) {
			ret = asn1_bio_flush_ex(b, ctx, ctx->suffix_free,
			    ASN1_STATE_DONE);
			if (ret <= 0)
				return ret;
		}

		if (ctx->state == ASN1_STATE_DONE)
			return BIO_ctrl(b->next_bio, cmd, arg1, arg2);
		else {
			BIO_clear_retry_flags(b);
			return 0;
		}
		break;


	default:
		if (!b->next_bio)
			return 0;
		return BIO_ctrl(b->next_bio, cmd, arg1, arg2);

	}

	return ret;
}

static int
asn1_bio_set_ex(BIO *b, int cmd, asn1_ps_func *ex_func, asn1_ps_func
    *ex_free_func)
{
	BIO_ASN1_EX_FUNCS extmp;

	extmp.ex_func = ex_func;
	extmp.ex_free_func = ex_free_func;
	return BIO_ctrl(b, cmd, 0, &extmp);
}

static int
asn1_bio_get_ex(BIO *b, int cmd, asn1_ps_func **ex_func,
    asn1_ps_func **ex_free_func)
{
	BIO_ASN1_EX_FUNCS extmp;
	int ret;

	ret = BIO_ctrl(b, cmd, 0, &extmp);
	if (ret > 0) {
		*ex_func = extmp.ex_func;
		*ex_free_func = extmp.ex_free_func;
	}
	return ret;
}

int
BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix, asn1_ps_func *prefix_free)
{
	return asn1_bio_set_ex(b, BIO_C_SET_PREFIX, prefix, prefix_free);
}

int
BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix, asn1_ps_func **pprefix_free)
{
	return asn1_bio_get_ex(b, BIO_C_GET_PREFIX, pprefix, pprefix_free);
}

int
BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix, asn1_ps_func *suffix_free)
{
	return asn1_bio_set_ex(b, BIO_C_SET_SUFFIX, suffix, suffix_free);
}

int
BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix, asn1_ps_func **psuffix_free)
{
	return asn1_bio_get_ex(b, BIO_C_GET_SUFFIX, psuffix, psuffix_free);
}
@


1.11
log
@Replace assert() and OPENSSL_assert() calls with proper error return paths.
Careful review, feedback & ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_asn1.c,v 1.10 2014/07/10 13:58:22 jsing Exp $ */
d176 1
a176 1
	ctx->ex_buf = 0;
@


1.10
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bio_asn1.c,v 1.9 2014/06/12 15:49:27 deraadt Exp $ */
d203 1
a203 1
	int wrmax, wrlen, ret;
d234 4
a237 3
			ctx->buflen =
			    ASN1_object_size(0, inl, ctx->asn1_tag) - inl;
			OPENSSL_assert(ctx->buflen <= ctx->bufsize);
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 1
d66 1
@


1.8
log
@no need for null check before free. from Brendan MacDonell
@
text
@d1 1
a1 1
/* bio_asn1.c */
@


1.7
log
@Use C99 initializers for the various FOO_METHOD structs. More readable, and
avoid unreadable/unmaintainable constructs like that:

const EVP_PKEY_ASN1_METHOD cmac_asn1_meth =
        {
        EVP_PKEY_CMAC,
        EVP_PKEY_CMAC,
        0,

        "CMAC",
        "OpenSSL CMAC method",

        0,0,0,0,

        0,0,0,

        cmac_size,
        0,
        0,0,0,0,0,0,0,

        cmac_key_free,
        0,
        0,0
        };

ok matthew@@ deraadt@@
@
text
@d189 1
a189 2
	if (ctx->buf)
		free(ctx->buf);
@


1.6
log
@More KNF.
@
text
@d127 10
a136 10
	BIO_TYPE_ASN1,
	"asn1",
	asn1_bio_write,
	asn1_bio_read,
	asn1_bio_puts,
	asn1_bio_gets,
	asn1_bio_ctrl,
	asn1_bio_new,
	asn1_bio_free,
	asn1_bio_callback_ctrl,
@


1.5
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d71 1
a71 2
typedef enum 
{
d81 1
a81 2
typedef struct BIO_ASN1_EX_FUNCS_st
{
d86 1
a86 2
typedef struct BIO_ASN1_BUF_CTX_t
{
d110 1
a110 1
static int asn1_bio_write(BIO *h, const char *buf,int num);
d121 1
a121 1
				asn1_ps_func *cleanup, asn1_bio_state_t next);
d123 2
a124 3
				asn1_ps_func *setup, 
				asn1_bio_state_t ex_state,
				asn1_bio_state_t other_state);
d126 1
a126 2
static BIO_METHOD methods_asn1=
{
d139 2
a140 1
BIO_METHOD *BIO_f_asn1(void)
d142 1
a142 1
	return(&methods_asn1);
d145 2
a146 2

static int asn1_bio_new(BIO *b)
d155 1
a155 1
}
d162 2
a163 1
static int asn1_bio_init(BIO_ASN1_BUF_CTX *ctx, int size)
d181 2
a182 1
static int asn1_bio_free(BIO *b)
d185 1
d198 2
a199 1
static int asn1_bio_write(BIO *b, const char *in , int inl)
d204 1
d214 1
a214 1
	for(;;) {
d220 1
a220 1
				ASN1_STATE_PRE_COPY, ASN1_STATE_HEADER))
a225 1

d227 1
a227 2
							ASN1_STATE_HEADER);

a229 1

d234 1
a234 1
				ASN1_object_size(0, inl, ctx->asn1_tag) - inl;
d238 1
a238 1
					ctx->asn1_tag, ctx->asn1_class);
a240 1

d243 1
a243 1
		case ASN1_STATE_HEADER_COPY:	
d245 1
a245 1
					ctx->buf + ctx->bufpos, ctx->buflen);
a255 1

a273 1

a275 1

d278 1
a278 1
			default:
a280 1

d285 1
a285 1
	done:
a289 1

d292 3
a294 2
static int asn1_bio_flush_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
				asn1_ps_func *cleanup, asn1_bio_state_t next)
d297 1
d300 1
a300 1
	for(;;) {
d302 1
a302 1
								ctx->ex_len);
d309 1
a309 1
			if(cleanup)
d311 1
a311 1
								&ctx->ex_arg);
d320 3
a322 4
static int asn1_bio_setup_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
				asn1_ps_func *setup, 
				asn1_bio_state_t ex_state,
				asn1_bio_state_t other_state)
d335 2
a336 1
static int asn1_bio_read(BIO *b, char *in , int inl)
d343 2
a344 1
static int asn1_bio_puts(BIO *b, const char *str)
d349 2
a350 1
static int asn1_bio_gets(BIO *b, char *str, int size)
d357 2
a358 1
static long asn1_bio_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
d360 3
a362 2
	if (b->next_bio == NULL) return(0);
	return BIO_callback_ctrl(b->next_bio,cmd,fp);
d365 2
a366 1
static long asn1_bio_ctrl(BIO *b, int cmd, long arg1, void *arg2)
d371 1
d375 1
a375 1
	switch(cmd) {
d379 2
a380 2
		ctx->prefix  = ex_func->ex_func;
		ctx->prefix_free  = ex_func->ex_free_func;
d391 2
a392 2
		ctx->suffix  = ex_func->ex_func;
		ctx->suffix_free  = ex_func->ex_free_func;
d416 1
a416 1
				ASN1_STATE_POST_COPY, ASN1_STATE_DONE))
d422 1
a422 1
							ASN1_STATE_DONE);
d446 3
a448 2
static int asn1_bio_set_ex(BIO *b, int cmd,
		asn1_ps_func *ex_func, asn1_ps_func *ex_free_func)
d451 1
d457 3
a459 2
static int asn1_bio_get_ex(BIO *b, int cmd,
		asn1_ps_func **ex_func, asn1_ps_func **ex_free_func)
d463 1
d472 2
a473 1
int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix, asn1_ps_func *prefix_free)
d478 2
a479 1
int BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix, asn1_ps_func **pprefix_free)
d484 2
a485 1
int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix, asn1_ps_func *suffix_free)
d490 2
a491 1
int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix, asn1_ps_func **psuffix_free)
@


1.4
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d213 2
a214 4
	for(;;)
	{
		switch (ctx->state)
		{
d217 1
a217 1
			case ASN1_STATE_START:
d224 1
a224 1
			case ASN1_STATE_PRE_COPY:
d234 1
a234 1
			case ASN1_STATE_HEADER:
d246 1
a246 1
			case ASN1_STATE_HEADER_COPY:	
d255 1
a255 2
			else
			{
d262 1
a262 1
			case ASN1_STATE_DATA_COPY:
d306 1
a306 2
	for(;;)
	{
d314 1
a314 2
		else
		{
d331 1
a331 2
	if (setup && !setup(b, &ctx->ex_buf, &ctx->ex_len, &ctx->ex_arg))
	{
d375 1
a375 2
	switch(cmd)
	{
d377 1
a377 1
		case BIO_C_SET_PREFIX:
d383 1
a383 1
		case BIO_C_GET_PREFIX:
d389 1
a389 1
		case BIO_C_SET_SUFFIX:
d395 1
a395 1
		case BIO_C_GET_SUFFIX:
d401 1
a401 1
		case BIO_C_SET_EX_ARG:
d405 1
a405 1
		case BIO_C_GET_EX_ARG:
d409 1
a409 1
		case BIO_CTRL_FLUSH:
d414 1
a414 2
		if (ctx->state == ASN1_STATE_HEADER)
		{
d420 1
a420 2
		if (ctx->state == ASN1_STATE_POST_COPY)
		{
d429 1
a429 2
		else
		{
d436 1
a436 1
		default:
d461 1
a461 2
	if (ret > 0)
	{
@


1.3
log
@fix some more leaks, mostly suggestions from miod
ok miod@@
@
text
@d72 1
a72 1
	{
d80 1
a80 1
	} asn1_bio_state_t;
d83 1
a83 1
	{
d86 1
a86 1
	} BIO_ASN1_EX_FUNCS;
d89 1
a89 1
	{
d110 1
a110 1
	} BIO_ASN1_BUF_CTX;
d131 1
a131 1
	{
d142 1
a142 1
	};
d145 1
a145 1
	{
d147 1
a147 1
	}
d151 1
a151 1
	{
d159 1
a159 1
	}
d164 1
a164 1
	}
d167 1
a167 1
	{
d182 1
a182 1
	}
d185 1
a185 1
	{
d197 1
a197 1
	}
d200 1
a200 1
	{
d214 2
a216 2
		switch (ctx->state)
			{
d258 1
a258 1
				{
d261 1
a261 1
				}
d291 1
a291 1
			}
d293 1
a293 1
		}
d301 1
a301 1
	}
d305 1
a305 1
	{
d310 1
a310 1
		{
d319 1
a319 1
			{
a325 1
			}
d327 1
d329 1
a329 1
	}
d335 2
a337 2
	if (setup && !setup(b, &ctx->ex_buf, &ctx->ex_len, &ctx->ex_arg))
		{
d340 1
a340 1
		}
d346 1
a346 1
	}
d349 1
a349 1
	{
d353 1
a353 1
	}
d356 1
a356 1
	{
d358 1
a358 1
	}
d361 1
a361 1
	{
d365 1
a365 1
	}
d368 1
a368 1
	{
d371 1
a371 1
	}
d374 1
a374 1
	{
d382 1
a382 1
		{
d422 1
a422 1
			{
d426 1
a426 1
			}
d429 1
a429 1
			{
d434 1
a434 1
			}
d439 1
a439 1
			{
d442 1
a442 1
			}
d451 1
a451 1
		}
d454 1
a454 1
	}
d458 1
a458 1
	{
d463 1
a463 1
	}
d467 1
a467 1
	{
d472 1
a472 1
		{
d475 1
a475 1
		}
d477 1
a477 1
	}
d480 1
a480 1
	{
d482 1
a482 1
	}
d485 1
a485 1
	{
d487 1
a487 1
	}
d490 1
a490 1
	{
d492 1
a492 1
	}
d495 1
a495 1
	{
d497 1
a497 1
	}
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d156 2
a157 1
	if (!asn1_bio_init(ctx, DEFAULT_ASN1_BUF_SIZE))
d159 1
@


1.1
log
@Initial revision
@
text
@d153 1
a153 1
	ctx = OPENSSL_malloc(sizeof(BIO_ASN1_BUF_CTX));
d166 1
a166 1
	ctx->buf = OPENSSL_malloc(size);
d189 2
a190 2
		OPENSSL_free(ctx->buf);
	OPENSSL_free(ctx);
@


1.1.1.1
log
@import of OpenSSL 0.9.8k
@
text
@@
