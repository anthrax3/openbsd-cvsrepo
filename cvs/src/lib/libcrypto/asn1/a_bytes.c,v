head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.2
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.19
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.18;
commitid	kT0fLt3r4lroFJra;

1.18
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.17;
commitid	yQEL1wOWIearrW15;

1.17
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.16;
commitid	id8dTrTMtnTn4fqt;

1.16
date	2014.07.10.11.25.13;	author tedu;	state Exp;
branches;
next	1.15;
commitid	Pv7aSK7aYL3NQSpP;

1.15
date	2014.07.09.22.55.17;	author tedu;	state Exp;
branches;
next	1.14;
commitid	5JdGfnLK1lLuGWd1;

1.14
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.22.20.38.02;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.16.14.15;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.06.21.08.06;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.04;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.35;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.26;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.44;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.29;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_bytes.c,v 1.18 2014/07/11 08:44:47 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/buffer.h>
#include <openssl/err.h>

static int asn1_collate_primitive(ASN1_STRING *a, ASN1_const_CTX *c);
/* type is a 'bitmap' of acceptable string types.
 */
ASN1_STRING *
d2i_ASN1_type_bytes(ASN1_STRING **a, const unsigned char **pp,
    long length, int type)
{
	ASN1_STRING *ret = NULL;
	const unsigned char *p;
	unsigned char *s;
	long len;
	int inf, tag, xclass;
	int i = 0;

	p = *pp;
	inf = ASN1_get_object(&p, &len, &tag, &xclass, length);
	if (inf & 0x80)
		goto err;

	if (tag >= 32) {
		i = ASN1_R_TAG_VALUE_TOO_HIGH;
		goto err;
	}
	if (!(ASN1_tag2bit(tag) & type)) {
		i = ASN1_R_WRONG_TYPE;
		goto err;
	}

	/* If a bit-string, exit early */
	if (tag == V_ASN1_BIT_STRING)
		return (d2i_ASN1_BIT_STRING(a, pp, length));

	if ((a == NULL) || ((*a) == NULL)) {
		if ((ret = ASN1_STRING_new()) == NULL)
			return (NULL);
	} else
		ret = (*a);

	if (len != 0) {
		s = malloc(len + 1);
		if (s == NULL) {
			i = ERR_R_MALLOC_FAILURE;
			goto err;
		}
		memcpy(s, p, len);
		s[len]='\0';
		p += len;
	} else
		s = NULL;

	free(ret->data);
	ret->length = (int)len;
	ret->data = s;
	ret->type = tag;
	if (a != NULL)
		(*a) = ret;
	*pp = p;
	return (ret);

err:
	ASN1error(i);
	if (a == NULL || *a != ret)
		ASN1_STRING_free(ret);
	return (NULL);
}

int
i2d_ASN1_bytes(ASN1_STRING *a, unsigned char **pp, int tag, int xclass)
{
	int ret, r, constructed;
	unsigned char *p;

	if (a == NULL)
		return (0);

	if (tag == V_ASN1_BIT_STRING)
		return (i2d_ASN1_BIT_STRING(a, pp));

	ret = a->length;
	r = ASN1_object_size(0, ret, tag);
	if (pp == NULL)
		return (r);
	p = *pp;

	if ((tag == V_ASN1_SEQUENCE) || (tag == V_ASN1_SET))
		constructed = 1;
	else
		constructed = 0;
	ASN1_put_object(&p, constructed, ret, tag, xclass);
	memcpy(p, a->data, a->length);
	p += a->length;
	*pp = p;
	return (r);
}

ASN1_STRING *
d2i_ASN1_bytes(ASN1_STRING **a, const unsigned char **pp,
    long length, int Ptag, int Pclass)
{
	ASN1_STRING *ret = NULL;
	const unsigned char *p;
	unsigned char *s;
	long len;
	int inf, tag, xclass;
	int i = 0;

	if ((a == NULL) || ((*a) == NULL)) {
		if ((ret = ASN1_STRING_new()) == NULL)
			return (NULL);
	} else
		ret = (*a);

	p= *pp;
	inf = ASN1_get_object(&p, &len, &tag, &xclass, length);
	if (inf & 0x80) {
		i = ASN1_R_BAD_OBJECT_HEADER;
		goto err;
	}

	if (tag != Ptag) {
		i = ASN1_R_WRONG_TAG;
		goto err;
	}

	if (inf & V_ASN1_CONSTRUCTED) {
		ASN1_const_CTX c;

		c.pp = pp;
		c.p = p;
		c.inf = inf;
		c.slen = len;
		c.tag = Ptag;
		c.xclass = Pclass;
		c.max = (length == 0) ? 0 : (p + length);
		if (!asn1_collate_primitive(ret, &c))
			goto err;
		else {
			p = c.p;
		}
	} else {
		if (len != 0) {
			if ((ret->length < len) || (ret->data == NULL)) {
				free(ret->data);
				ret->data = NULL;
				s = malloc(len + 1);
				if (s == NULL) {
					i = ERR_R_MALLOC_FAILURE;
					goto err;
				}
			} else
				s = ret->data;
			memcpy(s, p, len);
			s[len] = '\0';
			p += len;
		} else {
			s = NULL;
			free(ret->data);
		}

		ret->length = (int)len;
		ret->data = s;
		ret->type = Ptag;
	}

	if (a != NULL)
		(*a) = ret;
	*pp = p;
	return (ret);

err:
	if (a == NULL || *a != ret)
		ASN1_STRING_free(ret);
	ASN1error(i);
	return (NULL);
}


/* We are about to parse 0..n d2i_ASN1_bytes objects, we are to collapse
 * them into the one structure that is then returned */
/* There have been a few bug fixes for this function from
 * Paul Keogh <paul.keogh@@sse.ie>, many thanks to him */
static int
asn1_collate_primitive(ASN1_STRING *a, ASN1_const_CTX *c)
{
	ASN1_STRING *os = NULL;
	BUF_MEM b;
	int num;

	b.length = 0;
	b.max = 0;
	b.data = NULL;

	if (a == NULL) {
		c->error = ERR_R_PASSED_NULL_PARAMETER;
		goto err;
	}

	num = 0;
	for (;;) {
		if (c->inf & 1) {
			c->eos = ASN1_const_check_infinite_end(&c->p,
			    (long)(c->max - c->p));
			if (c->eos)
				break;
		} else {
			if (c->slen <= 0)
				break;
		}

		c->q = c->p;
		if (d2i_ASN1_bytes(&os, &c->p, c->max - c->p, c->tag,
		    c->xclass) == NULL) {
			c->error = ERR_R_ASN1_LIB;
			goto err;
		}

		if (!BUF_MEM_grow_clean(&b, num + os->length)) {
			c->error = ERR_R_BUF_LIB;
			goto err;
		}
		memcpy(&(b.data[num]), os->data, os->length);
		if (!(c->inf & 1))
			c->slen -= (c->p - c->q);
		num += os->length;
	}

	if (!asn1_const_Finish(c))
		goto err;

	a->length = num;
	free(a->data);
	a->data = (unsigned char *)b.data;
	ASN1_STRING_free(os);
	return (1);

err:
	ASN1error(c->error);
	ASN1_STRING_free(os);
	free(b.data);
	return (0);
}
@


1.18
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_bytes.c,v 1.17 2014/07/10 13:58:22 jsing Exp $ */
d126 1
a126 1
	ASN1err(ASN1_F_D2I_ASN1_TYPE_BYTES, i);
d238 1
a238 1
	ASN1err(ASN1_F_D2I_ASN1_BYTES, i);
d302 1
a302 1
	ASN1err(ASN1_F_ASN1_COLLATE_PRIMITIVE, c->error);
@


1.17
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_bytes.c,v 1.16 2014/07/10 11:25:13 tedu Exp $ */
a61 1
#include "cryptlib.h"
d63 2
@


1.16
log
@delete some casts. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_bytes.c,v 1.15 2014/07/09 22:55:17 tedu Exp $ */
d60 2
@


1.15
log
@ASN1_STRING_free can handle NULL, so callers don't need to check. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_bytes.c,v 1.14 2014/06/12 15:49:27 deraadt Exp $ */
d102 1
a102 1
		s = malloc((int)len + 1);
d107 1
a107 1
		memcpy(s, p, (int)len);
d214 1
a214 1
			memcpy(s, p, (int)len);
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d124 1
a124 1
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
d233 1
a233 1
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
d295 1
a295 2
	if (os != NULL)
		ASN1_STRING_free(os);
d300 1
a300 2
	if (os != NULL)
		ASN1_STRING_free(os);
@


1.13
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/a_bytes.c */
@


1.12
log
@null a pointer to prevent double free. from Dirk Engling
@
text
@d113 1
a113 2
	if (ret->data != NULL)
		free(ret->data);
d205 1
a205 2
				if (ret->data != NULL)
					free(ret->data);
d219 1
a219 2
			if (ret->data != NULL)
				free(ret->data);
d293 1
a293 2
	if (a->data != NULL)
		free(a->data);
d303 1
a303 2
	if (b.data != NULL)
		free(b.data);
@


1.11
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d208 1
@


1.10
log
@Initial KNF.
@
text
@d102 1
a102 1
		s = (unsigned char *)malloc((int)len + 1);
d208 1
a208 1
				s = (unsigned char *)malloc((int)len + 1);
@


1.9
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 5
a70 4
ASN1_STRING *d2i_ASN1_type_bytes(ASN1_STRING **a, const unsigned char **pp,
	     long length, int type)
	{
	ASN1_STRING *ret=NULL;
d74 2
a75 2
	int inf,tag,xclass;
	int i=0;
d77 4
a80 3
	p= *pp;
	inf=ASN1_get_object(&p,&len,&tag,&xclass,length);
	if (inf & 0x80) goto err;
d82 2
a83 3
	if (tag >= 32)
		{
		i=ASN1_R_TAG_VALUE_TOO_HIGH;
d85 3
a87 4
		}
	if (!(ASN1_tag2bit(tag) & type))
		{
		i=ASN1_R_WRONG_TYPE;
d89 1
a89 1
		}
d93 1
a93 1
		return(d2i_ASN1_BIT_STRING(a,pp,length));
d95 11
a105 3
	if ((a == NULL) || ((*a) == NULL))
		{
		if ((ret=ASN1_STRING_new()) == NULL) return(NULL);
d107 1
a107 12
	else
		ret=(*a);

	if (len != 0)
		{
		s=(unsigned char *)malloc((int)len+1);
		if (s == NULL)
			{
			i=ERR_R_MALLOC_FAILURE;
			goto err;
			}
		memcpy(s,p,(int)len);
d109 13
a121 4
		p+=len;
		}
	else
		s=NULL;
a122 7
	if (ret->data != NULL) free(ret->data);
	ret->length=(int)len;
	ret->data=s;
	ret->type=tag;
	if (a != NULL) (*a)=ret;
	*pp=p;
	return(ret);
d124 1
a124 1
	ASN1err(ASN1_F_D2I_ASN1_TYPE_BYTES,i);
d127 2
a128 2
	return(NULL);
	}
d130 4
a133 3
int i2d_ASN1_bytes(ASN1_STRING *a, unsigned char **pp, int tag, int xclass)
	{
	int ret,r,constructed;
d136 2
a137 1
	if (a == NULL)  return(0);
d140 7
a146 6
		return(i2d_ASN1_BIT_STRING(a,pp));
		
	ret=a->length;
	r=ASN1_object_size(0,ret,tag);
	if (pp == NULL) return(r);
	p= *pp;
d149 1
a149 1
		constructed=1;
d151 13
a163 12
		constructed=0;
	ASN1_put_object(&p,constructed,ret,tag,xclass);
	memcpy(p,a->data,a->length);
	p+=a->length;
	*pp= p;
	return(r);
	}

ASN1_STRING *d2i_ASN1_bytes(ASN1_STRING **a, const unsigned char **pp,
	     long length, int Ptag, int Pclass)
	{
	ASN1_STRING *ret=NULL;
d167 2
a168 2
	int inf,tag,xclass;
	int i=0;
d170 5
a174 6
	if ((a == NULL) || ((*a) == NULL))
		{
		if ((ret=ASN1_STRING_new()) == NULL) return(NULL);
		}
	else
		ret=(*a);
d177 3
a179 4
	inf=ASN1_get_object(&p,&len,&tag,&xclass,length);
	if (inf & 0x80)
		{
		i=ASN1_R_BAD_OBJECT_HEADER;
d181 1
a181 1
		}
d183 2
a184 3
	if (tag != Ptag)
		{
		i=ASN1_R_WRONG_TAG;
d186 1
a186 1
		}
d188 1
a188 2
	if (inf & V_ASN1_CONSTRUCTED)
		{
d191 11
a201 13
		c.pp=pp;
		c.p=p;
		c.inf=inf;
		c.slen=len;
		c.tag=Ptag;
		c.xclass=Pclass;
		c.max=(length == 0)?0:(p+length);
		if (!asn1_collate_primitive(ret,&c)) 
			goto err; 
		else
			{
			p=c.p;
			}
d203 8
a210 11
	else
		{
		if (len != 0)
			{
			if ((ret->length < len) || (ret->data == NULL))
				{
				if (ret->data != NULL) free(ret->data);
				s=(unsigned char *)malloc((int)len + 1);
				if (s == NULL)
					{
					i=ERR_R_MALLOC_FAILURE;
a211 1
					}
d213 3
a215 3
			else
				s=ret->data;
			memcpy(s,p,(int)len);
d217 5
a221 11
			p+=len;
			}
		else
			{
			s=NULL;
			if (ret->data != NULL) free(ret->data);
			}

		ret->length=(int)len;
		ret->data=s;
		ret->type=Ptag;
d224 10
a233 3
	if (a != NULL) (*a)=ret;
	*pp=p;
	return(ret);
d237 3
a239 3
	ASN1err(ASN1_F_D2I_ASN1_BYTES,i);
	return(NULL);
	}
d246 4
a249 3
static int asn1_collate_primitive(ASN1_STRING *a, ASN1_const_CTX *c)
	{
	ASN1_STRING *os=NULL;
d253 3
a255 3
	b.length=0;
	b.max=0;
	b.data=NULL;
d257 2
a258 3
	if (a == NULL)
		{
		c->error=ERR_R_PASSED_NULL_PARAMETER;
d260 1
a260 1
		}
d262 16
a277 19
	num=0;
	for (;;)
		{
		if (c->inf & 1)
			{
			c->eos=ASN1_const_check_infinite_end(&c->p,
				(long)(c->max-c->p));
			if (c->eos) break;
			}
		else
			{
			if (c->slen <= 0) break;
			}

		c->q=c->p;
		if (d2i_ASN1_bytes(&os,&c->p,c->max-c->p,c->tag,c->xclass)
			== NULL)
			{
			c->error=ERR_R_ASN1_LIB;
d279 1
a279 1
			}
d281 2
a282 3
		if (!BUF_MEM_grow_clean(&b,num+os->length))
			{
			c->error=ERR_R_BUF_LIB;
d284 2
a285 2
			}
		memcpy(&(b.data[num]),os->data,os->length);
d287 6
a292 3
			c->slen-=(c->p-c->q);
		num+=os->length;
		}
d294 7
a300 1
	if (!asn1_const_Finish(c)) goto err;
a301 5
	a->length=num;
	if (a->data != NULL) free(a->data);
	a->data=(unsigned char *)b.data;
	if (os != NULL) ASN1_STRING_free(os);
	return(1);
d303 7
a309 6
	ASN1err(ASN1_F_ASN1_COLLATE_PRIMITIVE,c->error);
	if (os != NULL) ASN1_STRING_free(os);
	if (b.data != NULL) free(b.data);
	return(0);
	}

@


1.8
log
@resolve conflicts
@
text
@d104 1
a104 1
		s=(unsigned char *)OPENSSL_malloc((int)len+1);
d117 1
a117 1
	if (ret->data != NULL) OPENSSL_free(ret->data);
d212 2
a213 2
				if (ret->data != NULL) OPENSSL_free(ret->data);
				s=(unsigned char *)OPENSSL_malloc((int)len + 1);
d229 1
a229 1
			if (ret->data != NULL) OPENSSL_free(ret->data);
d304 1
a304 1
	if (a->data != NULL) OPENSSL_free(a->data);
d311 1
a311 1
	if (b.data != NULL) OPENSSL_free(b.data);
@


1.7
log
@Remove some double semicolons (hmm, do two semis equal a maxi?).
I've skipped the GNU stuff for now.  From Patrick Latifi.
@
text
@d63 1
a63 1
static int asn1_collate_primitive(ASN1_STRING *a, ASN1_CTX *c);
d66 1
a66 1
ASN1_STRING *d2i_ASN1_type_bytes(ASN1_STRING **a, unsigned char **pp,
d70 2
a71 1
	unsigned char *p,*s;
d157 2
a158 2
ASN1_STRING *d2i_ASN1_bytes(ASN1_STRING **a, unsigned char **pp, long length,
	     int Ptag, int Pclass)
d161 2
a162 1
	unsigned char *p,*s;
d190 1
a190 1
		ASN1_CTX c;
d252 1
a252 1
static int asn1_collate_primitive(ASN1_STRING *a, ASN1_CTX *c)
d273 1
a273 1
			c->eos=ASN1_check_infinite_end(&c->p,
d301 1
a301 1
	if (!asn1_Finish(c)) goto err;
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d81 1
a81 1
		i=ASN1_R_TAG_VALUE_TOO_HIGH;;
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d288 1
a288 1
		if (!BUF_MEM_grow(&b,num+os->length))
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d61 1
a61 12
#include <openssl/asn1_mac.h>

static unsigned long tag2bit[32]={
0,	0,	0,	B_ASN1_BIT_STRING,	/* tags  0 -  3 */
B_ASN1_OCTET_STRING,	0,	0,		B_ASN1_UNKNOWN,/* tags  4- 7 */
B_ASN1_UNKNOWN,	B_ASN1_UNKNOWN,	B_ASN1_UNKNOWN,	B_ASN1_UNKNOWN,/* tags  8-11 */
B_ASN1_UTF8STRING,B_ASN1_UNKNOWN,B_ASN1_UNKNOWN,B_ASN1_UNKNOWN,/* tags 12-15 */
0,	0,	B_ASN1_NUMERICSTRING,B_ASN1_PRINTABLESTRING,
B_ASN1_T61STRING,B_ASN1_VIDEOTEXSTRING,B_ASN1_IA5STRING,0,
0,B_ASN1_GRAPHICSTRING,B_ASN1_ISO64STRING,B_ASN1_GENERALSTRING,
B_ASN1_UNIVERSALSTRING,B_ASN1_UNKNOWN,B_ASN1_BMPSTRING,B_ASN1_UNKNOWN,
	};
d84 1
a84 1
	if (!(tag2bit[tag] & type))
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d114 1
a114 1
		s=(unsigned char *)Malloc((int)len+1);
d127 1
a127 1
	if (ret->data != NULL) Free(ret->data);
d221 2
a222 2
				if (ret->data != NULL) Free(ret->data);
				s=(unsigned char *)Malloc((int)len + 1);
d238 1
a238 1
			if (ret->data != NULL) Free(ret->data);
d313 1
a313 1
	if (a->data != NULL) Free(a->data);
d320 1
a320 1
	if (b.data != NULL) Free(b.data);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d74 1
a74 1
static int asn1_collate_primative(ASN1_STRING *a, ASN1_CTX *c);
d127 1
a127 1
	if (ret->data != NULL) Free((char *)ret->data);
d208 1
a208 1
		if (!asn1_collate_primative(ret,&c)) 
d221 2
a222 2
				if (ret->data != NULL) Free((char *)ret->data);
				s=(unsigned char *)Malloc((int)len);
d232 1
d238 1
a238 1
			if (ret->data != NULL) Free((char *)ret->data);
d257 2
a258 2
/* We are about to parse 0..n d2i_ASN1_bytes objects, we are to collapes
 * them into the one struture that is then returned */
d261 1
a261 1
static int asn1_collate_primative(ASN1_STRING *a, ASN1_CTX *c)
@


1.1
log
@Initial revision
@
text
@d61 1
a61 7
#include "asn1_mac.h"

/* ASN1err(ASN1_F_ASN1_TYPE_NEW,ASN1_R_ERROR_STACK);
 * ASN1err(ASN1_F_D2I_ASN1_TYPE_BYTES,ASN1_R_ERROR_STACK);
 * ASN1err(ASN1_F_D2I_ASN1_TYPE_BYTES,ASN1_R_WRONG_TYPE);
 * ASN1err(ASN1_F_ASN1_COLLATE_PRIMATIVE,ASN1_R_WRONG_TAG);
 */
d67 1
a67 1
B_ASN1_UNKNOWN,	B_ASN1_UNKNOWN,	B_ASN1_UNKNOWN,	B_ASN1_UNKNOWN,/* tags 12-15 */
a73 1
#ifndef NOPROTO
d75 1
a75 5
#else
static int asn1_collate_primative();
#endif

/* type is a 'bitmap' of acceptable string types to be accepted.
d77 2
a78 5
ASN1_STRING *d2i_ASN1_type_bytes(a, pp, length, type)
ASN1_STRING **a;
unsigned char **pp;
long length;
int type;
d141 1
a141 5
int i2d_ASN1_bytes(a, pp, tag, xclass)
ASN1_STRING *a;
unsigned char **pp;
int tag;
int xclass;
d167 2
a168 6
ASN1_STRING *d2i_ASN1_bytes(a, pp, length, Ptag, Pclass)
ASN1_STRING **a;
unsigned char **pp;
long length;
int Ptag;
int Pclass;
d260 1
a260 3
static int asn1_collate_primative(a,c)
ASN1_STRING *a;
ASN1_CTX *c;
d317 1
a317 1
	ASN1err(ASN1_F_ASN1_COLLATE_PRIMATIVE,c->error);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/asn1.h>
d63 4
a66 2
static int asn1_collate_primitive(ASN1_STRING *a, ASN1_CTX *c);
/* type is a 'bitmap' of acceptable string types.
d68 25
a92 2
ASN1_STRING *d2i_ASN1_type_bytes(ASN1_STRING **a, unsigned char **pp,
	     long length, int type)
d109 1
a109 1
	if (!(ASN1_tag2bit(tag) & type))
d128 1
a128 1
		s=(unsigned char *)OPENSSL_malloc((int)len+1);
d141 1
a141 1
	if (ret->data != NULL) OPENSSL_free(ret->data);
d155 5
a159 1
int i2d_ASN1_bytes(ASN1_STRING *a, unsigned char **pp, int tag, int xclass)
d185 6
a190 2
ASN1_STRING *d2i_ASN1_bytes(ASN1_STRING **a, unsigned char **pp, long length,
	     int Ptag, int Pclass)
d230 1
a230 1
		if (!asn1_collate_primitive(ret,&c)) 
d243 2
a244 2
				if (ret->data != NULL) OPENSSL_free(ret->data);
				s=(unsigned char *)OPENSSL_malloc((int)len + 1);
a253 1
			s[len] = '\0';
d259 1
a259 1
			if (ret->data != NULL) OPENSSL_free(ret->data);
d278 2
a279 2
/* We are about to parse 0..n d2i_ASN1_bytes objects, we are to collapse
 * them into the one structure that is then returned */
d282 3
a284 1
static int asn1_collate_primitive(ASN1_STRING *a, ASN1_CTX *c)
d336 1
a336 1
	if (a->data != NULL) OPENSSL_free(a->data);
d341 1
a341 1
	ASN1err(ASN1_F_ASN1_COLLATE_PRIMITIVE,c->error);
d343 1
a343 1
	if (b.data != NULL) OPENSSL_free(b.data);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d288 1
a288 1
		if (!BUF_MEM_grow_clean(&b,num+os->length))
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d63 1
a63 1
static int asn1_collate_primitive(ASN1_STRING *a, ASN1_const_CTX *c);
d66 1
a66 1
ASN1_STRING *d2i_ASN1_type_bytes(ASN1_STRING **a, const unsigned char **pp,
d70 1
a70 2
	const unsigned char *p;
	unsigned char *s;
d156 2
a157 2
ASN1_STRING *d2i_ASN1_bytes(ASN1_STRING **a, const unsigned char **pp,
	     long length, int Ptag, int Pclass)
d160 1
a160 2
	const unsigned char *p;
	unsigned char *s;
d188 1
a188 1
		ASN1_const_CTX c;
d250 1
a250 1
static int asn1_collate_primitive(ASN1_STRING *a, ASN1_const_CTX *c)
d271 1
a271 1
			c->eos=ASN1_const_check_infinite_end(&c->p,
d299 1
a299 1
	if (!asn1_const_Finish(c)) goto err;
@


1.1.1.5
log
@import of OpenSSL 0.9.8k
@
text
@d82 1
a82 1
		i=ASN1_R_TAG_VALUE_TOO_HIGH;
@


