head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.2
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.13;
commitid	kT0fLt3r4lroFJra;

1.13
date	2015.03.19.14.00.22;	author tedu;	state Exp;
branches;
next	1.12;
commitid	Ix1rLPv61p1TR5LF;

1.12
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches
	1.12.4.1
	1.12.6.1;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.10;
commitid	nzndm3zqPmFurSaK;

1.10
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.23.12.42.16;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.19.06.43.34;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.30;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.47;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;

1.12.4.1
date	2015.03.19.14.02.22;	author tedu;	state Exp;
branches;
next	;
commitid	bYTbbXa7PWk8y7To;

1.12.6.1
date	2015.03.19.14.01.15;	author tedu;	state Exp;
branches;
next	;
commitid	dQgHc1qjfDF6g1rY;


desc
@@


1.14
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: d2i_pu.c,v 1.13 2015/03/19 14:00:22 tedu Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1.h>
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>

#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#ifndef OPENSSL_NO_EC
#include <openssl/ec.h>
#endif
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif

EVP_PKEY *
d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp, long length)
{
	EVP_PKEY *ret;

	if ((a == NULL) || (*a == NULL)) {
		if ((ret = EVP_PKEY_new()) == NULL) {
			ASN1error(ERR_R_EVP_LIB);
			return (NULL);
		}
	} else
		ret = *a;

	if (!EVP_PKEY_set_type(ret, type)) {
		ASN1error(ERR_R_EVP_LIB);
		goto err;
	}

	switch (EVP_PKEY_id(ret)) {
#ifndef OPENSSL_NO_RSA
	case EVP_PKEY_RSA:
		if ((ret->pkey.rsa = d2i_RSAPublicKey(NULL, pp, length)) ==
		    NULL) {
			ASN1error(ERR_R_ASN1_LIB);
			goto err;
		}
		break;
#endif
#ifndef OPENSSL_NO_DSA
	case EVP_PKEY_DSA:
		if (!d2i_DSAPublicKey(&(ret->pkey.dsa), pp, length)) {
			ASN1error(ERR_R_ASN1_LIB);
			goto err;
		}
		break;
#endif
#ifndef OPENSSL_NO_EC
	case EVP_PKEY_EC:
		if (!o2i_ECPublicKey(&(ret->pkey.ec), pp, length)) {
			ASN1error(ERR_R_ASN1_LIB);
			goto err;
		}
		break;
#endif
	default:
		ASN1error(ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
		goto err;
		/* break; */
	}
	if (a != NULL)
		(*a) = ret;
	return (ret);

err:
	if (a == NULL || *a != ret)
		EVP_PKEY_free(ret);
	return (NULL);
}
@


1.13
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pu.c,v 1.12 2014/07/11 08:44:47 jsing Exp $ */
d86 1
a86 1
			ASN1err(ASN1_F_D2I_PUBLICKEY, ERR_R_EVP_LIB);
d93 1
a93 1
		ASN1err(ASN1_F_D2I_PUBLICKEY, ERR_R_EVP_LIB);
d102 1
a102 1
			ASN1err(ASN1_F_D2I_PUBLICKEY, ERR_R_ASN1_LIB);
d110 1
a110 1
			ASN1err(ASN1_F_D2I_PUBLICKEY, ERR_R_ASN1_LIB);
d118 1
a118 1
			ASN1err(ASN1_F_D2I_PUBLICKEY, ERR_R_ASN1_LIB);
d124 1
a124 1
		ASN1err(ASN1_F_D2I_PUBLICKEY, ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pu.c,v 1.11 2014/07/10 22:45:56 jsing Exp $ */
d133 1
a133 1
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
@


1.12.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pu.c,v 1.12 2014/07/11 08:44:47 jsing Exp $ */
d133 1
a133 1
	if (a == NULL || *a != ret)
@


1.12.6.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pu.c,v 1.12 2014/07/11 08:44:47 jsing Exp $ */
d133 1
a133 1
	if (a == NULL || *a != ret)
@


1.11
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pu.c,v 1.10 2014/06/12 15:49:27 deraadt Exp $ */
d63 1
a63 1
#include "cryptlib.h"
d65 1
d68 1
a68 4
#include <openssl/asn1.h>
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
d74 3
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.9
log
@Casting from a const unsigned char ** to a const unsigned char ** seems...
unnecessary. Remove the temporary ugly casts - the comments even call them
that!

ok guenther@@
@
text
@d1 1
a1 1
/* crypto/asn1/d2i_pu.c */
@


1.8
log
@More KNF.
@
text
@d96 2
a97 3
		if ((ret->pkey.rsa = d2i_RSAPublicKey(NULL,
		    (const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
		{
d105 1
a105 3
		if (!d2i_DSAPublicKey(&(ret->pkey.dsa),
		    (const unsigned char **)pp,length)) /* TMP UGLY CAST */
		{
d113 1
a113 2
		if (!o2i_ECPublicKey(&(ret->pkey.ec),
		    (const unsigned char **)pp, length)) {
@


1.7
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d75 2
a76 2
EVP_PKEY *d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp,
	     long length)
d81 3
a83 3
		if ((ret=EVP_PKEY_new()) == NULL) {
			ASN1err(ASN1_F_D2I_PUBLICKEY,ERR_R_EVP_LIB);
			return(NULL);
d85 2
a86 2
	}
	else	ret= *a;
d89 1
a89 1
		ASN1err(ASN1_F_D2I_PUBLICKEY,ERR_R_EVP_LIB);
d96 2
a97 2
		if ((ret->pkey.rsa=d2i_RSAPublicKey(NULL,
			(const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
d99 1
a99 1
			ASN1err(ASN1_F_D2I_PUBLICKEY,ERR_R_ASN1_LIB);
d107 1
a107 1
			(const unsigned char **)pp,length)) /* TMP UGLY CAST */
d109 1
a109 1
			ASN1err(ASN1_F_D2I_PUBLICKEY,ERR_R_ASN1_LIB);
d117 1
a117 2
				     (const unsigned char **)pp, length))
		{
d121 1
a121 1
	break;
d124 1
a124 1
		ASN1err(ASN1_F_D2I_PUBLICKEY,ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
d128 4
a131 2
	if (a != NULL) (*a)=ret;
	return(ret);
d133 3
a135 2
	if ((ret != NULL) && ((a == NULL) || (*a != ret))) EVP_PKEY_free(ret);
	return(NULL);
a136 1

@


1.6
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d80 2
a81 4
	if ((a == NULL) || (*a == NULL))
	{
		if ((ret=EVP_PKEY_new()) == NULL)
		{
d88 1
a88 2
	if (!EVP_PKEY_set_type(ret, type))
	{
d93 1
a93 2
	switch (EVP_PKEY_id(ret))
	{
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d77 1
a77 1
	{
d81 2
a83 2
		if ((ret=EVP_PKEY_new()) == NULL)
			{
a85 1
			}
d87 1
d91 1
a91 1
		{
d94 1
a94 1
		}
d97 1
a97 1
		{
d102 1
a102 1
			{
d105 1
a105 1
			}
d112 1
a112 1
			{
d115 1
a115 1
			}
d122 1
a122 1
			{
d125 1
a125 1
			}
d132 1
a132 1
		}
d138 1
a138 1
	}
@


1.4
log
@resolve conflicts
@
text
@d90 7
a96 3
	ret->save_type=type;
	ret->type=EVP_PKEY_type(type);
	switch (ret->type)
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d71 3
d75 1
a75 1
EVP_PKEY *d2i_PublicKey(int type, EVP_PKEY **a, unsigned char **pp,
d106 2
a107 2
		if ((ret->pkey.dsa=d2i_DSAPublicKey(NULL,
			(const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
d113 10
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d65 6
d91 1
a91 1
#ifndef NO_RSA
d93 2
a94 1
		if ((ret->pkey.rsa=d2i_RSAPublicKey(NULL,pp,length)) == NULL)
d101 1
a101 1
#ifndef NO_DSA
d103 2
a104 1
		if ((ret->pkey.dsa=d2i_DSAPublicKey(NULL,pp,length)) == NULL)
@


1.1
log
@Initial revision
@
text
@d61 4
a64 4
#include "bn.h"
#include "evp.h"
#include "objects.h"
#include "x509.h"
d66 2
a67 5
EVP_PKEY *d2i_PublicKey(type,a,pp,length)
int type;
EVP_PKEY **a;
unsigned char **pp;
long length;
d106 1
a106 1
		break;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 4
a64 10
#include <openssl/bn.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/asn1.h>
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
d66 5
a70 2
EVP_PKEY *d2i_PublicKey(int type, EVP_PKEY **a, unsigned char **pp,
	     long length)
d88 1
a88 1
#ifndef OPENSSL_NO_RSA
d90 1
a90 2
		if ((ret->pkey.rsa=d2i_RSAPublicKey(NULL,
			(const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
d97 1
a97 1
#ifndef OPENSSL_NO_DSA
d99 1
a99 2
		if ((ret->pkey.dsa=d2i_DSAPublicKey(NULL,
			(const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
d109 1
a109 1
		/* break; */
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a70 3
#ifndef OPENSSL_NO_EC
#include <openssl/ec.h>
#endif
d72 1
a72 1
EVP_PKEY *d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp,
d103 2
a104 2
		if (!d2i_DSAPublicKey(&(ret->pkey.dsa),
			(const unsigned char **)pp,length)) /* TMP UGLY CAST */
a109 10
#endif
#ifndef OPENSSL_NO_EC
	case EVP_PKEY_EC:
		if (!o2i_ECPublicKey(&(ret->pkey.ec),
				     (const unsigned char **)pp, length))
			{
			ASN1err(ASN1_F_D2I_PUBLICKEY, ERR_R_ASN1_LIB);
			goto err;
			}
	break;
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d90 3
a92 7
	if (!EVP_PKEY_set_type(ret, type))
		{
		ASN1err(ASN1_F_D2I_PUBLICKEY,ERR_R_EVP_LIB);
		goto err;
		}

	switch (EVP_PKEY_id(ret))
@


