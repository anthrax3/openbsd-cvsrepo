head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.4
	OPENBSD_6_1_BASE:1.29;
locks; strict;
comment	@ * @;


1.29
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.28;
commitid	kT0fLt3r4lroFJra;

1.28
date	2016.11.06.17.04.48;	author bcook;	state Exp;
branches;
next	1.27;
commitid	hYHOsbTRzcIAkXbJ;

1.27
date	2016.11.06.14.00.49;	author bcook;	state Exp;
branches;
next	1.26;
commitid	m8p9zPSgflzi078D;

1.26
date	2016.03.17.03.51.49;	author beck;	state Exp;
branches;
next	1.25;
commitid	OfmAZ3ZhM88dVElO;

1.25
date	2016.03.06.18.05.00;	author beck;	state Exp;
branches;
next	1.24;
commitid	qCps317Hh2QPbSQq;

1.24
date	2015.02.10.08.33.10;	author jsing;	state Exp;
branches;
next	1.23;
commitid	v5VD2cgZRaYX8ah1;

1.23
date	2014.08.08.04.53.43;	author guenther;	state Exp;
branches;
next	1.22;
commitid	4P1BbzAa8YBmRYyU;

1.22
date	2014.07.12.16.03.36;	author miod;	state Exp;
branches;
next	1.21;
commitid	G74O1dmRukKsW7IJ;

1.21
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.20;
commitid	yQEL1wOWIearrW15;

1.20
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.19;
commitid	id8dTrTMtnTn4fqt;

1.19
date	2014.07.10.11.25.13;	author tedu;	state Exp;
branches;
next	1.18;
commitid	Pv7aSK7aYL3NQSpP;

1.18
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	mJUVYpkFBZ0Zv2bG;

1.17
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.30.03.31.29;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.19.12.51.01;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.07.09.23;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches
	1.9.8.1
	1.9.12.1;
next	1.8;

1.8
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.05;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.38;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.27;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.45;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.30;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	;

1.9.8.1
date	2014.08.09.16.55.55;	author tedu;	state Exp;
branches;
next	;
commitid	M9vFauFXshUDHG4j;

1.9.12.1
date	2014.08.09.16.54.57;	author tedu;	state Exp;
branches;
next	;
commitid	iDBdpZ9JdHGZqIAL;


desc
@@


1.29
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_object.c,v 1.28 2016/11/06 17:04:48 bcook Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <limits.h>
#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/buffer.h>
#include <openssl/objects.h>

int
i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned char **pp)
{
	unsigned char *p;
	int objsize;

	if ((a == NULL) || (a->data == NULL))
		return (0);

	objsize = ASN1_object_size(0, a->length, V_ASN1_OBJECT);
	if (pp == NULL)
		return objsize;

	p = *pp;
	ASN1_put_object(&p, 0, a->length, V_ASN1_OBJECT, V_ASN1_UNIVERSAL);
	memcpy(p, a->data, a->length);
	p += a->length;

	*pp = p;
	return (objsize);
}

int
a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
{
	int i, first, len = 0, c, use_bn;
	char ftmp[24], *tmp = ftmp;
	int tmpsize = sizeof ftmp;
	const char *p;
	unsigned long l;
	BIGNUM *bl = NULL;

	if (num == 0)
		return (0);
	else if (num == -1)
		num = strlen(buf);

	p = buf;
	c = *(p++);
	num--;
	if ((c >= '0') && (c <= '2')) {
		first= c-'0';
	} else {
		ASN1error(ASN1_R_FIRST_NUM_TOO_LARGE);
		goto err;
	}

	if (num <= 0) {
		ASN1error(ASN1_R_MISSING_SECOND_NUMBER);
		goto err;
	}
	c = *(p++);
	num--;
	for (;;) {
		if (num <= 0)
			break;
		if ((c != '.') && (c != ' ')) {
			ASN1error(ASN1_R_INVALID_SEPARATOR);
			goto err;
		}
		l = 0;
		use_bn = 0;
		for (;;) {
			if (num <= 0)
				break;
			num--;
			c = *(p++);
			if ((c == ' ') || (c == '.'))
				break;
			if ((c < '0') || (c > '9')) {
				ASN1error(ASN1_R_INVALID_DIGIT);
				goto err;
			}
			if (!use_bn && l >= ((ULONG_MAX - 80) / 10L)) {
				use_bn = 1;
				if (!bl)
					bl = BN_new();
				if (!bl || !BN_set_word(bl, l))
					goto err;
			}
			if (use_bn) {
				if (!BN_mul_word(bl, 10L) ||
				    !BN_add_word(bl, c-'0'))
					goto err;
			} else
				l = l * 10L + (long)(c - '0');
		}
		if (len == 0) {
			if ((first < 2) && (l >= 40)) {
				ASN1error(ASN1_R_SECOND_NUMBER_TOO_LARGE);
				goto err;
			}
			if (use_bn) {
				if (!BN_add_word(bl, first * 40))
					goto err;
			} else
				l += (long)first * 40;
		}
		i = 0;
		if (use_bn) {
			int blsize;
			blsize = BN_num_bits(bl);
			blsize = (blsize + 6) / 7;
			if (blsize > tmpsize) {
				if (tmp != ftmp)
					free(tmp);
				tmpsize = blsize + 32;
				tmp = malloc(tmpsize);
				if (!tmp)
					goto err;
			}
			while (blsize--)
				tmp[i++] = (unsigned char)BN_div_word(bl, 0x80L);
		} else {

			for (;;) {
				tmp[i++] = (unsigned char)l & 0x7f;
				l >>= 7L;
				if (l == 0L)
					break;
			}

		}
		if (out != NULL) {
			if (len + i > olen) {
				ASN1error(ASN1_R_BUFFER_TOO_SMALL);
				goto err;
			}
			while (--i > 0)
				out[len++] = tmp[i]|0x80;
			out[len++] = tmp[0];
		} else
			len += i;
	}
	if (tmp != ftmp)
		free(tmp);
	BN_free(bl);
	return (len);

err:
	if (tmp != ftmp)
		free(tmp);
	BN_free(bl);
	return (0);
}

int
i2t_ASN1_OBJECT(char *buf, int buf_len, ASN1_OBJECT *a)
{
	return OBJ_obj2txt(buf, buf_len, a, 0);
}

int
i2a_ASN1_OBJECT(BIO *bp, ASN1_OBJECT *a)
{
	char *tmp = NULL;
	size_t tlen = 256;
	int i = -1;

	if ((a == NULL) || (a->data == NULL))
		return(BIO_write(bp, "NULL", 4));
	if ((tmp = malloc(tlen)) == NULL)
		return -1;
	i = i2t_ASN1_OBJECT(tmp, tlen, a);
	if (i > (int)(tlen - 1)) {
		explicit_bzero(tmp, tlen);
		free(tmp);
		if ((tmp = malloc(i + 1)) == NULL)
			return -1;
		tlen = i + 1;
		i = i2t_ASN1_OBJECT(tmp, tlen, a);
	}
	if (i <= 0)
		i = BIO_write(bp, "<INVALID>", 9);
	else
		i = BIO_write(bp, tmp, i);
	explicit_bzero(tmp, tlen);
	free(tmp);
	return (i);
}

ASN1_OBJECT *
d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp, long length)
{
	const unsigned char *p;
	long len;
	int tag, xclass;
	int inf, i;
	ASN1_OBJECT *ret = NULL;

	p = *pp;
	inf = ASN1_get_object(&p, &len, &tag, &xclass, length);
	if (inf & 0x80) {
		i = ASN1_R_BAD_OBJECT_HEADER;
		goto err;
	}

	if (tag != V_ASN1_OBJECT) {
		i = ASN1_R_EXPECTING_AN_OBJECT;
		goto err;
	}
	ret = c2i_ASN1_OBJECT(a, &p, len);
	if (ret)
		*pp = p;
	return ret;

err:
	ASN1error(i);
	return (NULL);
}

ASN1_OBJECT *
c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp, long len)
{
	ASN1_OBJECT *ret;
	const unsigned char *p;
	unsigned char *data;
	int i, length;

	/*
	 * Sanity check OID encoding:
	 * - need at least one content octet
	 * - MSB must be clear in the last octet
	 * - can't have leading 0x80 in subidentifiers, see: X.690 8.19.2
	 */
	if (len <= 0 || len > INT_MAX || pp == NULL || (p = *pp) == NULL ||
	    p[len - 1] & 0x80) {
		ASN1error(ASN1_R_INVALID_OBJECT_ENCODING);
		return (NULL);
	}

	/* Now 0 < len <= INT_MAX, so the cast is safe. */
	length = (int)len;
	for (i = 0; i < length; i++, p++) {
		if (*p == 0x80 && (!i || !(p[-1] & 0x80))) {
			ASN1error(ASN1_R_INVALID_OBJECT_ENCODING);
			return (NULL);
		}
	}

	/* only the ASN1_OBJECTs from the 'table' will have values
	 * for ->sn or ->ln */
	if ((a == NULL) || ((*a) == NULL) ||
	    !((*a)->flags & ASN1_OBJECT_FLAG_DYNAMIC)) {
		if ((ret = ASN1_OBJECT_new()) == NULL)
			return (NULL);
	} else
		ret = *a;

	p = *pp;

	/* detach data from object */
	data = (unsigned char *)ret->data;
	if (data != NULL)
		explicit_bzero(data, ret->length);
	free(data);

	data = malloc(length);
	if (data == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	memcpy(data, p, length);

	/* reattach data to object, after which it remains const */
	ret->data = data;
	ret->length = length;
	ret->sn = NULL;
	ret->ln = NULL;
	ret->flags |= ASN1_OBJECT_FLAG_DYNAMIC_DATA;
	p += length;

	if (a != NULL)
		*a = ret;
	*pp = p;
	return (ret);

err:
	if (a == NULL || ret != *a)
		ASN1_OBJECT_free(ret);
	return (NULL);
}

ASN1_OBJECT *
ASN1_OBJECT_new(void)
{
	ASN1_OBJECT *ret;

	ret = malloc(sizeof(ASN1_OBJECT));
	if (ret == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	ret->length = 0;
	ret->data = NULL;
	ret->nid = 0;
	ret->sn = NULL;
	ret->ln = NULL;
	ret->flags = ASN1_OBJECT_FLAG_DYNAMIC;
	return (ret);
}

void
ASN1_OBJECT_free(ASN1_OBJECT *a)
{
	if (a == NULL)
		return;
	if (a->flags & ASN1_OBJECT_FLAG_DYNAMIC_STRINGS) {
		free((void *)a->sn);
		free((void *)a->ln);
		a->sn = a->ln = NULL;
	}
	if (a->flags & ASN1_OBJECT_FLAG_DYNAMIC_DATA) {
		if (a->data != NULL)
			explicit_bzero((void *)a->data, a->length);
		free((void *)a->data);
		a->data = NULL;
		a->length = 0;
	}
	if (a->flags & ASN1_OBJECT_FLAG_DYNAMIC)
		free(a);
}

ASN1_OBJECT *
ASN1_OBJECT_create(int nid, unsigned char *data, int len,
    const char *sn, const char *ln)
{
	ASN1_OBJECT o;

	o.sn = sn;
	o.ln = ln;
	o.data = data;
	o.nid = nid;
	o.length = len;
	o.flags = ASN1_OBJECT_FLAG_DYNAMIC | ASN1_OBJECT_FLAG_DYNAMIC_STRINGS |
	    ASN1_OBJECT_FLAG_DYNAMIC_DATA;
	return (OBJ_dup(&o));
}
@


1.28
log
@don't dereference a if NULL
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.27 2016/11/06 14:00:49 bcook Exp $ */
d112 1
a112 1
		ASN1err(ASN1_F_A2D_ASN1_OBJECT, ASN1_R_FIRST_NUM_TOO_LARGE);
d117 1
a117 1
		ASN1err(ASN1_F_A2D_ASN1_OBJECT, ASN1_R_MISSING_SECOND_NUMBER);
d126 1
a126 2
			ASN1err(ASN1_F_A2D_ASN1_OBJECT,
			    ASN1_R_INVALID_SEPARATOR);
d139 1
a139 2
				ASN1err(ASN1_F_A2D_ASN1_OBJECT,
				    ASN1_R_INVALID_DIGIT);
d158 1
a158 2
				ASN1err(ASN1_F_A2D_ASN1_OBJECT,
				    ASN1_R_SECOND_NUMBER_TOO_LARGE);
d194 1
a194 2
				ASN1err(ASN1_F_A2D_ASN1_OBJECT,
				    ASN1_R_BUFFER_TOO_SMALL);
d276 1
a276 1
	ASN1err(ASN1_F_D2I_ASN1_OBJECT, i);
d296 1
a296 1
		ASN1err(ASN1_F_C2I_ASN1_OBJECT, ASN1_R_INVALID_OBJECT_ENCODING);
d304 1
a304 2
			ASN1err(ASN1_F_C2I_ASN1_OBJECT,
			    ASN1_R_INVALID_OBJECT_ENCODING);
d328 1
a328 1
		ASN1err(ASN1_F_C2I_ASN1_OBJECT, ERR_R_MALLOC_FAILURE);
d360 1
a360 1
		ASN1err(ASN1_F_ASN1_OBJECT_NEW, ERR_R_MALLOC_FAILURE);
@


1.27
log
@simplify error handling in c2i_ASN1_OBJECT

ok beck@@, miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.26 2016/03/17 03:51:49 beck Exp $ */
d353 1
a353 1
	if (ret != *a)
@


1.26
log
@explicit_bzero for asn1 objects on free. Too often these contain sensitive information
and they should not be a performance bottleneck
ok miod@@ krw@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.25 2016/03/06 18:05:00 beck Exp $ */
d287 1
a287 1
	ASN1_OBJECT *ret = NULL;
d310 1
a310 1
			return NULL;
d321 1
a321 1
		ret = (*a);
d324 1
d330 1
d333 1
a333 1
		i = ERR_R_MALLOC_FAILURE;
d336 1
a336 1
	ret->flags |= ASN1_OBJECT_FLAG_DYNAMIC_DATA;
d338 1
d344 1
a344 1
	/* ret->flags=ASN1_OBJECT_FLAG_DYNAMIC; we know it is dynamic */
d348 1
a348 1
		(*a) = ret;
d353 1
a353 2
	ASN1err(ASN1_F_C2I_ASN1_OBJECT, i);
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
@


1.25
log
@explict_bzero for some asn1 free's - ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.24 2015/02/10 08:33:10 jsing Exp $ */
d228 3
a230 2
	char buf[80], *p = buf;
	int i;
d233 8
a240 5
		return(BIO_write(bp, "NULL",4));
	i = i2t_ASN1_OBJECT(buf, sizeof buf, a);
	if (i > (int)(sizeof(buf) - 1)) {
		p = malloc(i + 1);
		if (!p)
d242 2
a243 1
		i2t_ASN1_OBJECT(p, i + 1, a);
d246 5
a250 4
		return BIO_write(bp, "<INVALID>", 9);
	BIO_write(bp, p, i);
	if (p != buf)
		free(p);
d326 7
a332 11
	ret->data = NULL;
	/* once detached we can change it */
	if ((data == NULL) || (ret->length < length)) {
		ret->length = 0;
		free(data);
		data = malloc(length);
		if (data == NULL) {
			i = ERR_R_MALLOC_FAILURE;
			goto err;
		}
		ret->flags |= ASN1_OBJECT_FLAG_DYNAMIC_DATA;
d334 1
@


1.24
log
@The IMPLEMENT_STACK_OF and IMPLEMENT_ASN1_SET_OF macros were turned into
noops around 15 years ago. Remove multiple occurances of both that still
exist in the code today.
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.23 2014/08/08 04:53:43 guenther Exp $ */
d383 2
@


1.23
log
@Fix CVE-2014-3508, pretty printing and OID validation:
 - make sure the output buffer is always NUL terminated if buf_len
   was initially greater than zero.
 - reject OIDs that are too long, too short, or not in proper base-127

Based on
https://git.openssl.org/gitweb/?p=openssl.git;a=commit;h=0042fb5fd1c9d257d713b15a1f45da05cf5c1c87

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.22 2014/07/12 16:03:36 miod Exp $ */
a405 3

IMPLEMENT_STACK_OF(ASN1_OBJECT)
IMPLEMENT_ASN1_SET_OF(ASN1_OBJECT)
@


1.22
log
@if (x) FOO_free(x) -> FOO_free(x).
Improves readability, keeps the code smaller so that it is warmer in your
cache.

review & ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.21 2014/07/11 08:44:47 jsing Exp $ */
d284 1
a284 1
	int i;
d286 5
a290 2
	/* Sanity check OID encoding: can't have leading 0x80 in
	 * subidentifiers, see: X.690 8.19.2
d292 9
a300 1
	for (i = 0, p = *pp; i < len; i++, p++) {
d322 1
a322 1
	if ((data == NULL) || (ret->length < len)) {
d325 1
a325 1
		data = malloc(len ? len : 1);
d332 1
a332 1
	memcpy(data, p, len);
d335 1
a335 1
	ret->length = (int)len;
d339 1
a339 1
	p += len;
@


1.21
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.20 2014/07/10 13:58:22 jsing Exp $ */
d209 1
a209 2
	if (bl)
		BN_free(bl);
d215 1
a215 2
	if (bl)
		BN_free(bl);
@


1.20
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.19 2014/07/10 11:25:13 tedu Exp $ */
d63 3
a65 1
#include "cryptlib.h"
a66 1
#include <openssl/asn1.h>
a67 1
#include <openssl/bn.h>
@


1.19
log
@delete some casts. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_object.c,v 1.18 2014/06/12 15:49:27 deraadt Exp $ */
d59 1
d61 2
a62 1
#include <limits.h>
@


1.18
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d314 1
a314 1
		data = malloc(len ? (int)len : 1);
d321 1
a321 1
	memcpy(data, p, (int)len);
@


1.17
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/a_object.c */
@


1.16
log
@remove CONST_STRICT. ok beck deraadt
@
text
@d313 1
a313 2
		if (data != NULL)
			free(data);
d367 2
a368 4
		if (a->sn != NULL)
			free((void *)a->sn);
		if (a->ln != NULL)
			free((void *)a->ln);
d372 1
a372 2
		if (a->data != NULL)
			free((void *)a->data);
@


1.15
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@a367 1
#ifndef CONST_STRICT /* disable purely for compile-time strict const checking. Doing this on a "real" compile will cause memory leaks */
a371 1
#endif
@


1.14
log
@More KNF.
@
text
@d315 1
a315 1
		data = (unsigned char *)malloc(len ? (int)len : 1);
d348 1
a348 1
	ret = (ASN1_OBJECT *)malloc(sizeof(ASN1_OBJECT));
@


1.13
log
@More KNF.
@
text
@d81 1
a81 1
	ASN1_put_object(&p, 0,a->length, V_ASN1_OBJECT, V_ASN1_UNIVERSAL);
@


1.12
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d67 2
a68 1
int i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned char **pp)
d73 2
a74 4
	if ((a == NULL) || (a->data == NULL)) return(0);

	objsize = ASN1_object_size(0,a->length,V_ASN1_OBJECT);
	if (pp == NULL) return objsize;
d76 8
a83 4
	p= *pp;
	ASN1_put_object(&p,0,a->length,V_ASN1_OBJECT,V_ASN1_UNIVERSAL);
	memcpy(p,a->data,a->length);
	p+=a->length;
d85 2
a86 2
	*pp=p;
	return(objsize);
d89 2
a90 1
int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
d92 1
a92 1
	int i,first,len=0,c, use_bn;
d100 1
a100 1
		return(0);
d102 1
a102 1
		num=strlen(buf);
d104 2
a105 2
	p=buf;
	c= *(p++);
d110 1
a110 1
		ASN1err(ASN1_F_A2D_ASN1_OBJECT,ASN1_R_FIRST_NUM_TOO_LARGE);
d115 1
a115 1
		ASN1err(ASN1_F_A2D_ASN1_OBJECT,ASN1_R_MISSING_SECOND_NUMBER);
d118 1
a118 1
	c= *(p++);
d121 2
a122 1
		if (num <= 0) break;
d124 2
a125 1
			ASN1err(ASN1_F_A2D_ASN1_OBJECT,ASN1_R_INVALID_SEPARATOR);
d128 1
a128 1
		l=0;
d131 2
a132 1
			if (num <= 0) break;
d134 1
a134 1
			c= *(p++);
d138 2
a139 1
				ASN1err(ASN1_F_A2D_ASN1_OBJECT,ASN1_R_INVALID_DIGIT);
d150 2
a151 2
				if (!BN_mul_word(bl, 10L)
					|| !BN_add_word(bl, c-'0'))
d153 2
a154 3
			}
			else
				l=l*10L+(long)(c-'0');
d158 2
a159 1
				ASN1err(ASN1_F_A2D_ASN1_OBJECT,ASN1_R_SECOND_NUMBER_TOO_LARGE);
d165 2
a166 3
			}
			else
				l+=(long)first*40;
d168 1
a168 1
		i=0;
d172 1
a172 1
			blsize = (blsize + 6)/7;
d181 1
a181 1
			while(blsize--)
d184 1
a184 1
					
d186 4
a189 3
				tmp[i++]=(unsigned char)l&0x7f;
				l>>=7L;
				if (l == 0L) break;
d194 3
a196 2
			if (len+i > olen) {
				ASN1err(ASN1_F_A2D_ASN1_OBJECT,ASN1_R_BUFFER_TOO_SMALL);
d200 4
a203 5
				out[len++]=tmp[i]|0x80;
			out[len++]=tmp[0];
		}
		else
			len+=i;
d209 2
a210 1
	return(len);
d216 1
a216 1
	return(0);
d219 2
a220 1
int i2t_ASN1_OBJECT(char *buf, int buf_len, ASN1_OBJECT *a)
d225 2
a226 1
int i2a_ASN1_OBJECT(BIO *bp, ASN1_OBJECT *a)
d232 2
a233 2
		return(BIO_write(bp,"NULL",4));
	i=i2t_ASN1_OBJECT(buf,sizeof buf,a);
d238 1
a238 1
		i2t_ASN1_OBJECT(p,i + 1,a);
d242 1
a242 1
	BIO_write(bp,p,i);
d245 1
a245 1
	return(i);
d248 2
a249 2
ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
	     long length)
d253 2
a254 2
	int tag,xclass;
	int inf,i;
d256 3
a258 2
	p= *pp;
	inf=ASN1_get_object(&p,&len,&tag,&xclass,length);
d260 1
a260 1
		i=ASN1_R_BAD_OBJECT_HEADER;
d265 1
a265 1
		i=ASN1_R_EXPECTING_AN_OBJECT;
d269 2
a270 1
	if(ret) *pp = p;
d272 1
d274 2
a275 2
	ASN1err(ASN1_F_D2I_ASN1_OBJECT,i);
	return(NULL);
d277 3
a279 2
ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
	     long len)
d281 1
a281 1
	ASN1_OBJECT *ret=NULL;
d285 1
d291 2
a292 1
			ASN1err(ASN1_F_C2I_ASN1_OBJECT,ASN1_R_INVALID_OBJECT_ENCODING);
d300 5
a304 4
		!((*a)->flags & ASN1_OBJECT_FLAG_DYNAMIC)) {
		if ((ret=ASN1_OBJECT_new()) == NULL) return(NULL);
	}
	else	ret=(*a);
d306 1
a306 1
	p= *pp;
d312 9
a320 5
		ret->length=0;
		if (data != NULL) free(data);
		data=(unsigned char *)malloc(len ? (int)len : 1);
		if (data == NULL) { i=ERR_R_MALLOC_FAILURE; goto err; }
		ret->flags|=ASN1_OBJECT_FLAG_DYNAMIC_DATA;
d322 1
a322 1
	memcpy(data,p,(int)len);
d324 4
a327 4
	ret->data  =data;
	ret->length=(int)len;
	ret->sn=NULL;
	ret->ln=NULL;
d329 6
a334 1
	p+=len;
a335 3
	if (a != NULL) (*a)=ret;
	*pp=p;
	return(ret);
d337 1
a337 1
	ASN1err(ASN1_F_C2I_ASN1_OBJECT,i);
d340 1
a340 1
	return(NULL);
d343 2
a344 1
ASN1_OBJECT *ASN1_OBJECT_new(void)
d348 1
a348 1
	ret=(ASN1_OBJECT *)malloc(sizeof(ASN1_OBJECT));
d350 2
a351 2
		ASN1err(ASN1_F_ASN1_OBJECT_NEW,ERR_R_MALLOC_FAILURE);
		return(NULL);
d353 7
a359 7
	ret->length=0;
	ret->data=NULL;
	ret->nid=0;
	ret->sn=NULL;
	ret->ln=NULL;
	ret->flags=ASN1_OBJECT_FLAG_DYNAMIC;
	return(ret);
d362 2
a363 1
void ASN1_OBJECT_free(ASN1_OBJECT *a)
d365 2
a366 1
	if (a == NULL) return;
d369 4
a372 2
		if (a->sn != NULL) free((void *)a->sn);
		if (a->ln != NULL) free((void *)a->ln);
d374 1
a374 1
		a->sn=a->ln=NULL;
d377 4
a380 3
		if (a->data != NULL) free((void *)a->data);
		a->data=NULL;
		a->length=0;
d386 3
a388 2
ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
	     const char *sn, const char *ln)
d392 8
a399 8
	o.sn=sn;
	o.ln=ln;
	o.data=data;
	o.nid=nid;
	o.length=len;
	o.flags=ASN1_OBJECT_FLAG_DYNAMIC|ASN1_OBJECT_FLAG_DYNAMIC_STRINGS|
		ASN1_OBJECT_FLAG_DYNAMIC_DATA;
	return(OBJ_dup(&o));
@


1.11
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d103 1
a103 2
	if ((c >= '0') && (c <= '2'))
	{
d105 1
a105 3
	}
	else
	{
d110 1
a110 2
	if (num <= 0)
	{
d116 1
a116 2
	for (;;)
	{
d118 1
a118 2
		if ((c != '.') && (c != ' '))
		{
d124 1
a124 2
		for (;;)
		{
d130 1
a130 2
			if ((c < '0') || (c > '9'))
			{
d134 1
a134 2
			if (!use_bn && l >= ((ULONG_MAX - 80) / 10L))
			{
d141 1
a141 2
			if (use_bn)
			{
d149 2
a150 4
		if (len == 0)
		{
			if ((first < 2) && (l >= 40))
			{
d154 1
a154 2
			if (use_bn)
			{
d162 1
a162 2
		if (use_bn)
		{
d166 1
a166 2
			if (blsize > tmpsize)
			{
d176 1
a176 3
		}
		else
		{
d178 1
a178 2
			for (;;)
			{
d185 2
a186 4
		if (out != NULL)
		{
			if (len+i > olen)
			{
d223 1
a223 2
	if (i > (int)(sizeof(buf) - 1))
	{
d247 1
a247 2
	if (inf & 0x80)
	{
d252 1
a252 2
	if (tag != V_ASN1_OBJECT)
	{
d273 2
a274 4
	for (i = 0, p = *pp; i < len; i++, p++)
	{
		if (*p == 0x80 && (!i || !(p[-1] & 0x80)))
		{
d283 1
a283 2
		!((*a)->flags & ASN1_OBJECT_FLAG_DYNAMIC))
	{
d293 1
a293 2
	if ((data == NULL) || (ret->length < len))
	{
d297 1
a297 2
		if (data == NULL)
		{ i=ERR_R_MALLOC_FAILURE; goto err; }
d324 1
a324 2
	if (ret == NULL)
	{
d340 1
a340 2
	if (a->flags & ASN1_OBJECT_FLAG_DYNAMIC_STRINGS)
	{
d347 1
a347 2
	if (a->flags & ASN1_OBJECT_FLAG_DYNAMIC_DATA)
	{
@


1.10
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d68 1
a68 1
	{
d84 1
a84 1
	}
d87 1
a87 1
	{
d104 1
a104 1
		{
d106 1
a106 1
		}
d108 1
a108 1
		{
d111 1
a111 1
		}
d114 1
a114 1
		{
d117 1
a117 1
		}
d121 1
a121 1
		{
d124 1
a124 1
			{
d127 1
a127 1
			}
d131 1
a131 1
			{
d138 1
a138 1
				{
d141 1
a141 1
				}
d143 1
a143 1
				{
d149 1
a149 1
				}
d151 1
a151 1
				{
d155 1
a155 1
				}
d158 1
a158 1
			}
d160 2
a162 2
			if ((first < 2) && (l >= 40))
				{
d165 1
a165 1
				}
d167 1
a167 1
				{
d170 1
a170 1
				}
d173 1
a173 1
			}
d176 1
a176 1
			{
d181 1
a181 1
				{
d188 1
a188 1
				}
d191 1
a191 1
			}
d193 1
a193 1
			{
d196 1
a196 1
				{
d200 1
a200 1
				}
d202 1
a202 1
			}
d204 2
a206 2
			if (len+i > olen)
				{
d209 1
a209 1
				}
d213 1
a213 1
			}
d216 1
a216 1
		}
d228 1
a228 1
	}
d236 1
a236 1
	{
d244 1
a244 1
		{
d249 1
a249 1
		}
d256 1
a256 1
	}
d269 1
a269 1
		{
d272 1
a272 1
		}
d275 1
a275 1
		{
d278 1
a278 1
		}
d288 1
a288 1
	{
d297 2
a299 2
		if (*p == 0x80 && (!i || !(p[-1] & 0x80)))
			{
a301 1
			}
d303 1
d309 1
a309 1
		{
d311 1
a311 1
		}
d320 1
a320 1
		{
d325 1
a325 1
			{ i=ERR_R_MALLOC_FAILURE; goto err; }
d327 1
a327 1
		}
d345 1
a345 1
	}
d348 1
a348 1
	{
d353 1
a353 1
		{
d356 1
a356 1
		}
d364 1
a364 1
	}
d367 1
a367 1
	{
d370 1
a370 1
		{
d376 1
a376 1
		}
d378 1
a378 1
		{
d382 1
a382 1
		}
d385 1
a385 1
	}
d389 1
a389 1
	{
d400 1
a400 1
	}
@


1.9
log
@openssl-1.0.0e: resolve conflicts
@
text
@d183 1
a183 1
					OPENSSL_free(tmp);
d185 1
a185 1
				tmp = OPENSSL_malloc(tmpsize);
d218 1
a218 1
		OPENSSL_free(tmp);
d224 1
a224 1
		OPENSSL_free(tmp);
d245 1
a245 1
		p = OPENSSL_malloc(i + 1);
d254 1
a254 1
		OPENSSL_free(p);
d322 2
a323 2
		if (data != NULL) OPENSSL_free(data);
		data=(unsigned char *)OPENSSL_malloc(len ? (int)len : 1);
d351 1
a351 1
	ret=(ASN1_OBJECT *)OPENSSL_malloc(sizeof(ASN1_OBJECT));
d372 2
a373 2
		if (a->sn != NULL) OPENSSL_free((void *)a->sn);
		if (a->ln != NULL) OPENSSL_free((void *)a->ln);
d379 1
a379 1
		if (a->data != NULL) OPENSSL_free((void *)a->data);
d384 1
a384 1
		OPENSSL_free(a);
@


1.9.8.1
log
@backport relevant security fixes from openssl 1.0.1i
tested by bcook jsg
@
text
@a285 1

d292 3
a294 6
	int i, length;

	/* Sanity check OID encoding.
	 * Need at least one content octet.
	 * MSB must be clear in the last octet.
	 * can't have leading 0x80 in subidentifiers, see: X.690 8.19.2
d296 1
a296 9
	if (len <= 0 || len > INT_MAX || pp == NULL || (p = *pp) == NULL ||
	    p[len - 1] & 0x80)
		{
		ASN1err(ASN1_F_C2I_ASN1_OBJECT,ASN1_R_INVALID_OBJECT_ENCODING);
		return NULL;
		}
	/* Now 0 < len <= INT_MAX, so the cast is safe. */
	length = (int)len;
	for (i = 0; i < length; i++, p++)
d319 1
a319 1
	if ((data == NULL) || (ret->length < length))
d323 1
a323 1
		data=(unsigned char *)OPENSSL_malloc(length);
d328 1
a328 1
	memcpy(data,p,length);
d331 1
a331 1
	ret->length=length;
d335 1
a335 1
	p+=length;
@


1.9.12.1
log
@backport relevant security fixes from openssl 1.0.1i
tested by bcook jsg
@
text
@a285 1

d292 3
a294 6
	int i, length;

	/* Sanity check OID encoding.
	 * Need at least one content octet.
	 * MSB must be clear in the last octet.
	 * can't have leading 0x80 in subidentifiers, see: X.690 8.19.2
d296 1
a296 9
	if (len <= 0 || len > INT_MAX || pp == NULL || (p = *pp) == NULL ||
	    p[len - 1] & 0x80)
		{
		ASN1err(ASN1_F_C2I_ASN1_OBJECT,ASN1_R_INVALID_OBJECT_ENCODING);
		return NULL;
		}
	/* Now 0 < len <= INT_MAX, so the cast is safe. */
	length = (int)len;
	for (i = 0; i < length; i++, p++)
d319 1
a319 1
	if ((data == NULL) || (ret->length < length))
d323 1
a323 1
		data=(unsigned char *)OPENSSL_malloc(length);
d328 1
a328 1
	memcpy(data,p,length);
d331 1
a331 1
	ret->length=length;
d335 1
a335 1
	p+=length;
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d142 1
a142 1
			if (!use_bn && l > (ULONG_MAX / 10L))
d296 1
a296 1
	for (i = 0, p = *pp + 1; i < len - 1; i++, p++)
@


1.7
log
@resolve conflicts
@
text
@a283 2
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		ASN1_OBJECT_free(ret);
d291 1
d293 11
d315 5
a319 1
	if ((ret->data == NULL) || (ret->length < len))
d321 5
a325 2
		if (ret->data != NULL) OPENSSL_free(ret->data);
		ret->data=(unsigned char *)OPENSSL_malloc(len ? (int)len : 1);
a326 2
		if (ret->data == NULL)
			{ i=ERR_R_MALLOC_FAILURE; goto err; }
d328 3
a330 1
	memcpy(ret->data,p,(int)len);
d379 1
a379 1
		if (a->data != NULL) OPENSSL_free(a->data);
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d60 1
d65 1
d88 3
a90 2
	int i,first,len=0,c;
	char tmp[24];
d93 1
d105 1
a105 1
		first=(c-'0')*40;
d129 1
d142 16
a157 1
			l=l*10L+(long)(c-'0');
d166 7
a172 1
			l+=(long)first;
d175 18
a192 1
		for (;;)
d194 8
a201 3
			tmp[i++]=(unsigned char)l&0x7f;
			l>>=7L;
			if (l == 0L) break;
d217 4
d223 4
d237 1
a237 1
	char buf[80];
d243 12
a254 2
	if (i > sizeof buf) i=sizeof buf;
	BIO_write(bp,buf,i);
d258 1
a258 1
ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, unsigned char **pp,
d261 1
a261 1
	unsigned char *p;
d288 1
a288 1
ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, unsigned char **pp,
d292 1
a292 1
	unsigned char *p;
d324 1
a324 1
	ASN1err(ASN1_F_D2I_ASN1_OBJECT,i);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d186 2
a187 2
	i=i2t_ASN1_OBJECT(buf,80,a);
	if (i > 80) i=80;
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d305 1
a305 1
	     char *sn, char *ln)
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 1
d72 2
a73 2
	if (pp == NULL)
		return(ASN1_object_size(0,a->length,V_ASN1_OBJECT));
d81 1
a81 1
	return(a->length);
d194 1
a194 2
	{
	ASN1_OBJECT *ret=NULL;
d199 1
a199 10

	/* only the ASN1_OBJECTs from the 'table' will have values
	 * for ->sn or ->ln */
	if ((a == NULL) || ((*a) == NULL) ||
		!((*a)->flags & ASN1_OBJECT_FLAG_DYNAMIC))
		{
		if ((ret=ASN1_OBJECT_new()) == NULL) return(NULL);
		}
	else	ret=(*a);

a200 1

d213 26
d241 2
a242 2
		if (ret->data != NULL) Free(ret->data);
		ret->data=(unsigned char *)Malloc(len ? (int)len : 1);
d268 1
a268 1
	ret=(ASN1_OBJECT *)Malloc(sizeof(ASN1_OBJECT));
d289 2
a290 2
		if (a->sn != NULL) Free((void *)a->sn);
		if (a->ln != NULL) Free((void *)a->ln);
d296 1
a296 1
		if (a->data != NULL) Free(a->data);
d301 1
a301 1
		Free(a);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d225 2
a226 2
		if (ret->data != NULL) Free((char *)ret->data);
		ret->data=(unsigned char *)Malloc((int)len);
d272 1
a272 1
#ifndef CONST_STRICT /* disable purely for compile-time strict const checking. Doing this on a "real" compile will cause mempory leaks */
@


1.1
log
@Initial revision
@
text
@d61 5
a65 12
#include "buffer.h"
#include "asn1.h"
#include "objects.h"

/* ASN1err(ASN1_F_ASN1_OBJECT_NEW,ASN1_R_EXPECTING_AN_OBJECT); 
 * ASN1err(ASN1_F_D2I_ASN1_OBJECT,ASN1_R_BAD_OBJECT_HEADER); 
 * ASN1err(ASN1_F_I2T_ASN1_OBJECT,ASN1_R_BAD_OBJECT_HEADER);
 */

int i2d_ASN1_OBJECT(a, pp)
ASN1_OBJECT *a;
unsigned char **pp;
d83 1
a83 5
int a2d_ASN1_OBJECT(out,olen,buf,num)
unsigned char *out;
int olen;
char *buf;
int num;
d86 2
a87 1
	char tmp[24],*p;
d173 4
a176 75
int i2t_ASN1_OBJECT(buf,buf_len,a)
char *buf;
int buf_len;
ASN1_OBJECT *a;
	{
	int i,idx=0,n=0,len,nid;
	unsigned long l;
	unsigned char *p;
	char *s;
	char tbuf[32];

	if (buf_len <= 0) return(0);

	if ((a == NULL) || (a->data == NULL))
		{
		buf[0]='\0';
		return(0);
		}

	nid=OBJ_obj2nid(a);
	if (nid == NID_undef)
		{
		len=a->length;
		p=a->data;

		idx=0;
		l=0;
		while (idx < a->length)
			{
			l|=(p[idx]&0x7f);
			if (!(p[idx] & 0x80)) break;
			l<<=7L;
			idx++;
			}
		idx++;
		i=(int)(l/40);
		if (i > 2) i=2;
		l-=(long)(i*40);

		sprintf(tbuf,"%d.%ld",i,l);
		i=strlen(tbuf);
		strncpy(buf,tbuf,buf_len);
		buf_len-=i;
		buf+=i;
		n+=i;

		l=0;
		for (; idx<len; idx++)
			{
			l|=p[idx]&0x7f;
			if (!(p[idx] & 0x80))
				{
				sprintf(tbuf,".%ld",l);
				i=strlen(tbuf);
				if (buf_len > 0)
					strncpy(buf,tbuf,buf_len);
				buf_len-=i;
				buf+=i;
				n+=i;
				l=0;
				}
			l<<=7L;
			}
		}
	else
		{
		s=(char *)OBJ_nid2ln(nid);
		if (s == NULL)
			s=(char *)OBJ_nid2sn(nid);
		strncpy(buf,s,buf_len);
		n=strlen(s);
		}
	buf[buf_len-1]='\0';
	return(n);
	}
d178 1
a178 3
int i2a_ASN1_OBJECT(bp,a)
BIO *bp;
ASN1_OBJECT *a;
d191 2
a192 4
ASN1_OBJECT *d2i_ASN1_OBJECT(a, pp, length)
ASN1_OBJECT **a;
unsigned char **pp;
long length; 
d248 1
a248 1
ASN1_OBJECT *ASN1_OBJECT_new()
d267 1
a267 2
void ASN1_OBJECT_free(a)
ASN1_OBJECT *a;
d272 4
a275 2
		if (a->sn != NULL) Free(a->sn);
		if (a->ln != NULL) Free(a->ln);
d285 1
a285 1
		Free((char *)a);
d288 2
a289 5
ASN1_OBJECT *ASN1_OBJECT_create(nid,data,len,sn,ln)
int nid;
unsigned char *data;
int len;
char *sn,*ln;
d298 2
a299 2
	o.flags=ASN1_OBJECT_FLAG_DYNAMIC|
		ASN1_OBJECT_FLAG_DYNAMIC_STRINGS|ASN1_OBJECT_FLAG_DYNAMIC_DATA;
d303 2
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 12
a72 5
#include <openssl/buffer.h>
#include <openssl/asn1.h>
#include <openssl/objects.h>

int i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned char **pp)
a74 1
	int objsize;
d78 2
a79 2
	objsize = ASN1_object_size(0,a->length,V_ASN1_OBJECT);
	if (pp == NULL) return objsize;
d87 1
a87 1
	return(objsize);
d90 5
a94 1
int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
d97 1
a97 2
	char tmp[24];
	const char *p;
d183 75
a257 4
int i2t_ASN1_OBJECT(char *buf, int buf_len, ASN1_OBJECT *a)
{
	return OBJ_obj2txt(buf, buf_len, a, 0);
}
d259 3
a261 1
int i2a_ASN1_OBJECT(BIO *bp, ASN1_OBJECT *a)
d274 6
a279 3
ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, unsigned char **pp,
	     long length)
{
d284 10
a293 1
	ASN1_OBJECT *ret = NULL;
d295 1
a307 26
	ret = c2i_ASN1_OBJECT(a, &p, len);
	if(ret) *pp = p;
	return ret;
err:
	ASN1err(ASN1_F_D2I_ASN1_OBJECT,i);
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		ASN1_OBJECT_free(ret);
	return(NULL);
}
ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, unsigned char **pp,
	     long len)
	{
	ASN1_OBJECT *ret=NULL;
	unsigned char *p;
	int i;

	/* only the ASN1_OBJECTs from the 'table' will have values
	 * for ->sn or ->ln */
	if ((a == NULL) || ((*a) == NULL) ||
		!((*a)->flags & ASN1_OBJECT_FLAG_DYNAMIC))
		{
		if ((ret=ASN1_OBJECT_new()) == NULL) return(NULL);
		}
	else	ret=(*a);

	p= *pp;
d310 2
a311 2
		if (ret->data != NULL) OPENSSL_free(ret->data);
		ret->data=(unsigned char *)OPENSSL_malloc(len ? (int)len : 1);
d333 1
a333 1
ASN1_OBJECT *ASN1_OBJECT_new(void)
d337 1
a337 1
	ret=(ASN1_OBJECT *)OPENSSL_malloc(sizeof(ASN1_OBJECT));
d352 2
a353 1
void ASN1_OBJECT_free(ASN1_OBJECT *a)
d358 2
a359 4
#ifndef CONST_STRICT /* disable purely for compile-time strict const checking. Doing this on a "real" compile will cause memory leaks */
		if (a->sn != NULL) OPENSSL_free((void *)a->sn);
		if (a->ln != NULL) OPENSSL_free((void *)a->ln);
#endif
d364 1
a364 1
		if (a->data != NULL) OPENSSL_free(a->data);
d369 1
a369 1
		OPENSSL_free(a);
d372 5
a376 2
ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
	     const char *sn, const char *ln)
d385 2
a386 2
	o.flags=ASN1_OBJECT_FLAG_DYNAMIC|ASN1_OBJECT_FLAG_DYNAMIC_STRINGS|
		ASN1_OBJECT_FLAG_DYNAMIC_DATA;
a389 2
IMPLEMENT_STACK_OF(ASN1_OBJECT)
IMPLEMENT_ASN1_SET_OF(ASN1_OBJECT)
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d186 2
a187 2
	i=i2t_ASN1_OBJECT(buf,sizeof buf,a);
	if (i > sizeof buf) i=sizeof buf;
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a59 1
#include <limits.h>
a63 1
#include <openssl/bn.h>
d86 2
a87 3
	int i,first,len=0,c, use_bn;
	char ftmp[24], *tmp = ftmp;
	int tmpsize = sizeof ftmp;
a89 1
	BIGNUM *bl = NULL;
d101 1
a101 1
		first= c-'0';
a124 1
		use_bn = 0;
d137 1
a137 16
			if (!use_bn && l > (ULONG_MAX / 10L))
				{
				use_bn = 1;
				if (!bl)
					bl = BN_new();
				if (!bl || !BN_set_word(bl, l))
					goto err;
				}
			if (use_bn)
				{
				if (!BN_mul_word(bl, 10L)
					|| !BN_add_word(bl, c-'0'))
					goto err;
				}
			else
				l=l*10L+(long)(c-'0');
d146 1
a146 7
			if (use_bn)
				{
				if (!BN_add_word(bl, first * 40))
					goto err;
				}
			else
				l+=(long)first*40;
d149 1
a149 18
		if (use_bn)
			{
			int blsize;
			blsize = BN_num_bits(bl);
			blsize = (blsize + 6)/7;
			if (blsize > tmpsize)
				{
				if (tmp != ftmp)
					OPENSSL_free(tmp);
				tmpsize = blsize + 32;
				tmp = OPENSSL_malloc(tmpsize);
				if (!tmp)
					goto err;
				}
			while(blsize--)
				tmp[i++] = (unsigned char)BN_div_word(bl, 0x80L);
			}
		else
d151 3
a153 8
					
			for (;;)
				{
				tmp[i++]=(unsigned char)l&0x7f;
				l>>=7L;
				if (l == 0L) break;
				}

a168 4
	if (tmp != ftmp)
		OPENSSL_free(tmp);
	if (bl)
		BN_free(bl);
a170 4
	if (tmp != ftmp)
		OPENSSL_free(tmp);
	if (bl)
		BN_free(bl);
d181 1
a181 1
	char buf[80], *p = buf;
d187 2
a188 12
	if (i > (int)(sizeof(buf) - 1))
		{
		p = OPENSSL_malloc(i + 1);
		if (!p)
			return -1;
		i2t_ASN1_OBJECT(p,i + 1,a);
		}
	if (i <= 0)
		return BIO_write(bp, "<INVALID>", 9);
	BIO_write(bp,p,i);
	if (p != buf)
		OPENSSL_free(p);
d192 1
a192 1
ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
d195 1
a195 1
	const unsigned char *p;
d222 1
a222 1
ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
d226 1
a226 1
	const unsigned char *p;
d258 1
a258 1
	ASN1err(ASN1_F_C2I_ASN1_OBJECT,i);
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d284 2
a292 1
	unsigned char *data;
a293 11
	/* Sanity check OID encoding: can't have leading 0x80 in
	 * subidentifiers, see: X.690 8.19.2
	 */
	for (i = 0, p = *pp + 1; i < len - 1; i++, p++)
		{
		if (*p == 0x80 && (!i || !(p[-1] & 0x80)))
			{
			ASN1err(ASN1_F_C2I_ASN1_OBJECT,ASN1_R_INVALID_OBJECT_ENCODING);
			return NULL;
			}
		}
d305 1
a305 5
	/* detach data from object */
	data = (unsigned char *)ret->data;
	ret->data = NULL;
	/* once detached we can change it */
	if ((data == NULL) || (ret->length < len))
d307 4
a310 4
		ret->length=0;
		if (data != NULL) OPENSSL_free(data);
		data=(unsigned char *)OPENSSL_malloc(len ? (int)len : 1);
		if (data == NULL)
a311 1
		ret->flags|=ASN1_OBJECT_FLAG_DYNAMIC_DATA;
d313 1
a313 3
	memcpy(data,p,(int)len);
	/* reattach data to object, after which it remains const */
	ret->data  =data;
d362 1
a362 1
		if (a->data != NULL) OPENSSL_free((void *)a->data);
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d142 1
a142 1
			if (!use_bn && l >= ((ULONG_MAX - 80) / 10L))
d296 1
a296 1
	for (i = 0, p = *pp; i < len; i++, p++)
@


