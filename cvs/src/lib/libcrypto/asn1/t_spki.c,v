head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.10;
commitid	yQEL1wOWIearrW15;

1.10
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.9;
commitid	nzndm3zqPmFurSaK;

1.9
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.04.18.13.14.31;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.08.50;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.50;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: t_spki.c,v 1.10 2014/07/10 22:45:56 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1.h>
#include <openssl/bn.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif

/* Print out an SPKI */

int
NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki)
{
	EVP_PKEY *pkey;
	ASN1_IA5STRING *chal;
	int i, n;
	char *s;

	BIO_printf(out, "Netscape SPKI:\n");
	i = OBJ_obj2nid(spki->spkac->pubkey->algor->algorithm);
	BIO_printf(out, "  Public Key Algorithm: %s\n",
	    (i == NID_undef) ? "UNKNOWN" : OBJ_nid2ln(i));
	pkey = X509_PUBKEY_get(spki->spkac->pubkey);
	if (!pkey)
		BIO_printf(out, "  Unable to load public key\n");
	else {
		EVP_PKEY_print_public(out, pkey, 4, NULL);
		EVP_PKEY_free(pkey);
	}
	chal = spki->spkac->challenge;
	if (chal->length)
		BIO_printf(out, "  Challenge String: %s\n", chal->data);
	i = OBJ_obj2nid(spki->sig_algor->algorithm);
	BIO_printf(out, "  Signature Algorithm: %s",
	    (i == NID_undef) ? "UNKNOWN" : OBJ_nid2ln(i));

	n = spki->signature->length;
	s = (char *)spki->signature->data;
	for (i = 0; i < n; i++) {
		if ((i % 18) == 0)
			BIO_write(out, "\n      ", 7);
		BIO_printf(out, "%02x%s", (unsigned char)s[i],
		    ((i + 1) == n) ? "" : ":");
	}
	BIO_write(out, "\n", 1);
	return 1;
}
@


1.10
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: t_spki.c,v 1.9 2014/06/12 15:49:27 deraadt Exp $ */
d63 2
a64 1
#include "cryptlib.h"
d66 4
a69 1
#include <openssl/asn1.h>
a72 4
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#include <openssl/bn.h>
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.8
log
@More KNF.
@
text
@d1 1
a1 1
/* t_spki.c */
@


1.7
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d73 2
a74 1
int NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki)
d80 1
d82 3
a84 3
	i=OBJ_obj2nid(spki->spkac->pubkey->algor->algorithm);
	BIO_printf(out,"  Public Key Algorithm: %s\n",
				(i == NID_undef)?"UNKNOWN":OBJ_nid2ln(i));
d86 1
a86 1
	if(!pkey)
d93 1
a93 1
	if(chal->length)
d95 3
a97 3
	i=OBJ_obj2nid(spki->sig_algor->algorithm);
	BIO_printf(out,"  Signature Algorithm: %s",
				(i == NID_undef)?"UNKNOWN":OBJ_nid2ln(i));
d99 7
a105 7
	n=spki->signature->length;
	s=(char *)spki->signature->data;
	for (i=0; i<n; i++) {
		if ((i%18) == 0)
			BIO_write(out,"\n      ",7);
		BIO_printf(out,"%02x%s",(unsigned char)s[i],
						((i+1) == n)?"":":");
d107 1
a107 1
	BIO_write(out,"\n",1);
@


1.6
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d84 3
a86 3
	if(!pkey) BIO_printf(out, "  Unable to load public key\n");
	else
	{
d99 3
a101 3
	for (i=0; i<n; i++)
	{
		if ((i%18) == 0) BIO_write(out,"\n      ",7);
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d86 1
a86 1
		{
d89 1
a89 1
		}
d100 1
a100 1
		{
d104 1
a104 1
		}
@


1.4
log
@resolve conflicts
@
text
@d85 1
a85 12
	else {
#ifndef OPENSSL_NO_RSA
		if (pkey->type == EVP_PKEY_RSA)
			{
			BIO_printf(out,"  RSA Public Key: (%d bit)\n",
				BN_num_bits(pkey->pkey.rsa->n));
			RSA_print(out,pkey->pkey.rsa,2);
			}
		else 
#endif
#ifndef OPENSSL_NO_DSA
		if (pkey->type == EVP_PKEY_DSA)
d87 2
a88 10
		BIO_printf(out,"  DSA Public Key:\n");
		DSA_print(out,pkey->pkey.dsa,2);
		}
		else
#endif
#ifndef OPENSSL_NO_EC
		if (pkey->type == EVP_PKEY_EC)
		{
			BIO_printf(out, "  EC Public Key:\n");
			EC_KEY_print(out, pkey->pkey.ec,2);
a89 6
		else
#endif

			BIO_printf(out,"  Unknown Public Key:\n");
		EVP_PKEY_free(pkey);
	}
@


1.3
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.2
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d63 7
d103 9
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d62 1
a62 1
#include <openssl/asn1_mac.h>
d79 1
a79 1
#ifndef NO_RSA
d88 1
a88 1
#ifndef NO_DSA
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 1
#include <openssl/asn1.h>
d79 1
a79 1
#ifndef OPENSSL_NO_RSA
d88 1
a88 1
#ifndef OPENSSL_NO_DSA
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@a62 7
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#include <openssl/bn.h>
a95 9
#ifndef OPENSSL_NO_EC
		if (pkey->type == EVP_PKEY_EC)
		{
			BIO_printf(out, "  EC Public Key:\n");
			EC_KEY_print(out, pkey->pkey.ec,2);
		}
		else
#endif

@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d85 12
a96 1
	else
d98 15
a112 1
		EVP_PKEY_print_public(out, pkey, 4, NULL);
d114 1
a114 1
		}
@


