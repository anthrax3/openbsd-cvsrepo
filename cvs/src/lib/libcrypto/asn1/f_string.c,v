head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.6
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17;
locks; strict;
comment	@ * @;


1.17
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.16;
commitid	kT0fLt3r4lroFJra;

1.16
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.15;
commitid	yQEL1wOWIearrW15;

1.15
date	2014.07.10.21.58.08;	author miod;	state Exp;
branches;
next	1.14;
commitid	uBbeEhKr6xfLzg3s;

1.14
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.18.19.35.04;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.27.20.24.52;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.22.20.31.57;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.19.06.43.34;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.08;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.43;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.30;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.48;	author markus;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: f_string.c,v 1.16 2014/07/11 08:44:47 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/buffer.h>
#include <openssl/err.h>

int
i2a_ASN1_STRING(BIO *bp, ASN1_STRING *a, int type)
{
	int i, n = 0;
	static const char h[] = "0123456789ABCDEF";
	char buf[2];

	if (a == NULL)
		return (0);

	if (a->length == 0) {
		if (BIO_write(bp, "0", 1) != 1)
			goto err;
		n = 1;
	} else {
		for (i = 0; i < a->length; i++) {
			if ((i != 0) && (i % 35 == 0)) {
				if (BIO_write(bp, "\\\n", 2) != 2)
					goto err;
				n += 2;
			}
			buf[0] = h[((unsigned char)a->data[i] >> 4) & 0x0f];
			buf[1] = h[((unsigned char)a->data[i]) & 0x0f];
			if (BIO_write(bp, buf, 2) != 2)
				goto err;
			n += 2;
		}
	}
	return (n);

err:
	return (-1);
}

int
a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
{
	int ret = 0;
	int i, j, k, m, n, again, bufsize;
	unsigned char *s = NULL, *sp;
	unsigned char *bufp;
	int first = 1;
	size_t num = 0, slen = 0;

	bufsize = BIO_gets(bp, buf, size);
	for (;;) {
		if (bufsize < 1) {
			if (first)
				break;
			else
				goto err_sl;
		}
		first = 0;

		i = bufsize;
		if (buf[i-1] == '\n')
			buf[--i] = '\0';
		if (i == 0)
			goto err_sl;
		if (buf[i-1] == '\r')
			buf[--i] = '\0';
		if (i == 0)
			goto err_sl;
		again = (buf[i - 1] == '\\');

		for (j = i - 1; j > 0; j--) {
			if (!(((buf[j] >= '0') && (buf[j] <= '9')) ||
			    ((buf[j] >= 'a') && (buf[j] <= 'f')) ||
			    ((buf[j] >= 'A') && (buf[j] <= 'F')))) {
				i = j;
				break;
			}
		}
		buf[i] = '\0';
		/* We have now cleared all the crap off the end of the
		 * line */
		if (i < 2)
			goto err_sl;

		bufp = (unsigned char *)buf;

		k = 0;
		i -= again;
		if (i % 2 != 0) {
			ASN1error(ASN1_R_ODD_NUMBER_OF_CHARS);
			goto err;
		}
		i /= 2;
		if (num + i > slen) {
			sp = realloc(s, num + i);
			if (sp == NULL) {
				ASN1error(ERR_R_MALLOC_FAILURE);
				goto err;
			}
			s = sp;
			slen = num + i;
		}
		for (j = 0; j < i; j++, k += 2) {
			for (n = 0; n < 2; n++) {
				m = bufp[k + n];
				if ((m >= '0') && (m <= '9'))
					m -= '0';
				else if ((m >= 'a') && (m <= 'f'))
					m = m - 'a' + 10;
				else if ((m >= 'A') && (m <= 'F'))
					m = m - 'A' + 10;
				else {
					ASN1error(ASN1_R_NON_HEX_CHARACTERS);
					goto err;
				}
				s[num + j] <<= 4;
				s[num + j] |= m;
			}
		}
		num += i;
		if (again)
			bufsize = BIO_gets(bp, buf, size);
		else
			break;
	}
	bs->length = num;
	bs->data = s;
	return (1);

err_sl:
	ASN1error(ASN1_R_SHORT_LINE);
err:
	free(s);
	return (ret);
}
@


1.16
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: f_string.c,v 1.15 2014/07/10 21:58:08 miod Exp $ */
d149 1
a149 2
			ASN1err(ASN1_F_A2I_ASN1_STRING,
			    ASN1_R_ODD_NUMBER_OF_CHARS);
d156 1
a156 2
				ASN1err(ASN1_F_A2I_ASN1_STRING,
				    ERR_R_MALLOC_FAILURE);
d172 1
a172 2
					ASN1err(ASN1_F_A2I_ASN1_STRING,
					    ASN1_R_NON_HEX_CHARACTERS);
d190 1
a190 1
	ASN1err(ASN1_F_A2I_ASN1_STRING, ASN1_R_SHORT_LINE);
@


1.15
log
@Use size_t as realloc() size argument whenever possible. ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: f_string.c,v 1.14 2014/06/12 15:49:27 deraadt Exp $ */
d60 2
a61 1
#include "cryptlib.h"
d63 1
a63 1
#include <openssl/asn1.h>
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d105 2
a106 1
	int num = 0, slen = 0, first = 1;
d154 1
a154 1
			sp = realloc(s, (unsigned int)num + i);
@


1.13
log
@If you need to allocate `a + b' bytes of memory, then don't allocate `a + b*2',
this is confusing and unnecessary.

Help (coz I got confused) and ok guenther@@ beck@@
@
text
@d1 1
a1 1
/* crypto/asn1/f_string.c */
@


1.12
log
@static const char * = "" -> static const char[] = "", to produce shorter code.
No functional change.
@
text
@d153 1
a153 1
			sp = realloc(s, (unsigned int)num + i * 2);
d160 1
a160 1
			slen = num + i * 2;
@


1.11
log
@fix memory leaks. from Dirk Engling
@
text
@d68 1
a68 1
	static const char *h = "0123456789ABCDEF";
@


1.10
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@a156 2
				if (s != NULL)
					free(s);
d188 1
a188 1
	ret = 1;
d190 2
d193 1
a193 4
	if (0) {
err_sl:
		ASN1err(ASN1_F_A2I_ASN1_STRING, ASN1_R_SHORT_LINE);
	}
@


1.9
log
@More KNF.
@
text
@d153 1
a153 6
			if (s == NULL)
				sp = (unsigned char *)malloc(
				    (unsigned int)num + i * 2);
			else
				sp = (unsigned char *)realloc(s,
				    (unsigned int)num + i * 2);
@


1.8
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d64 2
a65 1
int i2a_ASN1_STRING(BIO *bp, ASN1_STRING *a, int type)
d67 2
a68 2
	int i,n=0;
	static const char *h="0123456789ABCDEF";
d71 2
a72 1
	if (a == NULL) return(0);
d75 3
a77 2
		if (BIO_write(bp,"0",1) != 1) goto err;
		n=1;
d79 5
a83 4
		for (i=0; i<a->length; i++) {
			if ((i != 0) && (i%35 == 0)) {
				if (BIO_write(bp,"\\\n",2) != 2) goto err;
				n+=2;
d85 5
a89 4
			buf[0]=h[((unsigned char)a->data[i]>>4)&0x0f];
			buf[1]=h[((unsigned char)a->data[i]   )&0x0f];
			if (BIO_write(bp,buf,2) != 2) goto err;
			n+=2;
d92 2
a93 1
	return(n);
d95 1
a95 1
	return(-1);
d98 2
a99 1
int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
d101 3
a103 3
	int ret=0;
	int i,j,k,m,n,again,bufsize;
	unsigned char *s=NULL,*sp;
d105 1
a105 1
	int num=0,slen=0,first=1;
d107 1
a107 1
	bufsize=BIO_gets(bp,buf,size);
d115 1
a115 1
		first=0;
d117 16
a132 12
		i=bufsize;
		if (buf[i-1] == '\n') buf[--i]='\0';
		if (i == 0) goto err_sl;
		if (buf[i-1] == '\r') buf[--i]='\0';
		if (i == 0) goto err_sl;
		again=(buf[i-1] == '\\');

		for (j=i-1; j>0; j--) {
			if (!(	((buf[j] >= '0') && (buf[j] <= '9')) ||
				((buf[j] >= 'a') && (buf[j] <= 'f')) ||
				((buf[j] >= 'A') && (buf[j] <= 'F')))) {
				i=j;
d136 1
a136 1
		buf[i]='\0';
d139 2
a140 1
		if (i < 2) goto err_sl;
d142 1
a142 1
		bufp=(unsigned char *)buf;
d144 5
a148 4
		k=0;
		i-=again;
		if (i%2 != 0) {
			ASN1err(ASN1_F_A2I_ASN1_STRING,ASN1_R_ODD_NUMBER_OF_CHARS);
d151 2
a152 2
		i/=2;
		if (num+i > slen) {
d154 2
a155 2
				sp=(unsigned char *)malloc(
					(unsigned int)num+i*2);
d157 2
a158 2
				sp=(unsigned char *)realloc(s,
					(unsigned int)num+i*2);
d160 4
a163 2
				ASN1err(ASN1_F_A2I_ASN1_STRING,ERR_R_MALLOC_FAILURE);
				if (s != NULL) free(s);
d166 2
a167 2
			s=sp;
			slen=num+i*2;
d169 3
a171 3
		for (j=0; j<i; j++,k+=2) {
			for (n=0; n<2; n++) {
				m=bufp[k+n];
d173 1
a173 1
					m-='0';
d175 1
a175 1
					m=m-'a'+10;
d177 1
a177 1
					m=m-'A'+10;
d179 2
a180 1
					ASN1err(ASN1_F_A2I_ASN1_STRING,ASN1_R_NON_HEX_CHARACTERS);
d183 2
a184 2
				s[num+j]<<=4;
				s[num+j]|=m;
d187 1
a187 1
		num+=i;
d189 1
a189 1
			bufsize=BIO_gets(bp,buf,size);
d193 4
a196 3
	bs->length=num;
	bs->data=s;
	ret=1;
d200 1
a200 1
		ASN1err(ASN1_F_A2I_ASN1_STRING,ASN1_R_SHORT_LINE);
d202 1
a202 1
	return(ret);
a203 1

@


1.7
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d72 1
a72 2
	if (a->length == 0)
	{
d75 3
a77 7
	}
	else
	{
		for (i=0; i<a->length; i++)
		{
			if ((i != 0) && (i%35 == 0))
			{
d101 2
a102 4
	for (;;)
	{
		if (bufsize < 1)
		{
d117 1
a117 2
		for (j=i-1; j>0; j--)
		{
d120 1
a120 2
				((buf[j] >= 'A') && (buf[j] <= 'F'))))
			{
d134 1
a134 2
		if (i%2 != 0)
		{
d139 1
a139 2
		if (num+i > slen)
		{
d146 1
a146 2
			if (sp == NULL)
			{
d154 2
a155 4
		for (j=0; j<i; j++,k+=2)
		{
			for (n=0; n<2; n++)
			{
d163 1
a163 2
				else
				{
d181 1
a181 2
	if (0)
	{
@


1.6
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d65 1
a65 1
	{
d73 1
a73 1
		{
d76 1
a76 1
		}
d78 2
d81 1
a81 1
		for (i=0; i<a->length; i++)
a82 2
			if ((i != 0) && (i%35 == 0))
				{
d85 1
a85 1
				}
a89 1
			}
d91 1
d95 1
a95 1
	}
d98 1
a98 1
	{
d107 2
a109 2
		if (bufsize < 1)
			{
d114 1
a114 1
			}
d125 1
a125 1
			{
d129 1
a129 1
				{
a131 1
				}
d133 1
d144 1
a144 1
			{
d147 1
a147 1
			}
d150 1
a150 1
			{
d158 1
a158 1
				{
d162 1
a162 1
				}
d165 1
a165 1
			}
d167 2
a169 2
			for (n=0; n<2; n++)
				{
d178 1
a178 1
					{
d181 1
a181 1
					}
a183 1
				}
d185 1
d191 1
a191 1
		}
d197 1
a197 1
		{
d200 1
a200 1
		}
d202 1
a202 1
	}
@


1.5
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d152 1
a152 1
				sp=(unsigned char *)OPENSSL_malloc(
d155 1
a155 1
				sp=(unsigned char *)OPENSSL_realloc(s,
d160 1
a160 1
				if (s != NULL) OPENSSL_free(s);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a125 1
#ifndef CHARSET_EBCDIC
a128 8
#else
			/* This #ifdef is not strictly necessary, since
			 * the characters A...F a...f 0...9 are contiguous
			 * (yes, even in EBCDIC - but not the whole alphabet).
			 * Nevertheless, isxdigit() is faster.
			 */
			if (!isxdigit(buf[j]))
#endif
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d161 1
a161 1
				sp=(unsigned char *)Malloc(
d164 1
a164 1
				sp=(unsigned char *)Realloc(s,
d169 1
a169 1
				if (s != NULL) Free(s);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d169 1
a169 1
				if (s != NULL) Free((char *)s);
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "buffer.h"
#include "x509.h"
d64 1
a64 4
int i2a_ASN1_STRING(bp, a, type)
BIO *bp;
ASN1_STRING *a;
int type;
d67 1
a67 1
	static char *h="0123456789ABCDEF";
d97 1
a97 5
int a2i_ASN1_STRING(bp,bs,buf,size)
BIO *bp;
ASN1_STRING *bs;
char *buf;
int size;
d126 1
d130 8
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 2
#include <openssl/buffer.h>
#include <openssl/asn1.h>
d64 4
a67 1
int i2a_ASN1_STRING(BIO *bp, ASN1_STRING *a, int type)
d70 1
a70 1
	static const char *h="0123456789ABCDEF";
d100 5
a104 1
int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
a132 1
#ifndef CHARSET_EBCDIC
a135 8
#else
			/* This #ifdef is not strictly necessary, since
			 * the characters A...F a...f 0...9 are contiguous
			 * (yes, even in EBCDIC - but not the whole alphabet).
			 * Nevertheless, isxdigit() is faster.
			 */
			if (!isxdigit(buf[j]))
#endif
d159 1
a159 1
				sp=(unsigned char *)OPENSSL_malloc(
d162 1
a162 1
				sp=(unsigned char *)OPENSSL_realloc(s,
d167 1
a167 1
				if (s != NULL) OPENSSL_free(s);
@

