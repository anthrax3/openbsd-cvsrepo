head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2016.12.30.16.04.34;	author jsing;	state Exp;
branches;
next	1.14;
commitid	Gs5oxnpdEYq1UpKL;

1.14
date	2015.02.14.15.23.57;	author miod;	state Exp;
branches;
next	1.13;
commitid	peVibfevZfgr8DNB;

1.13
date	2015.02.14.13.32.46;	author jsing;	state Exp;
branches;
next	1.12;
commitid	dZ0hDZ090i6DWZKS;

1.12
date	2014.07.10.12.24.25;	author tedu;	state Exp;
branches;
next	1.11;
commitid	SATgxZyxmyqYNuVX;

1.11
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.04.23.19.01.50;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.18.12.15.48;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.50;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.34.36;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Expand ASN1_ITEM_rptr and ASN1_ITEM_ptr macros - no change in generated
assembly.
@
text
@/* $OpenBSD: tasn_fre.c,v 1.14 2015/02/14 15:23:57 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */


#include <stddef.h>
#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/objects.h>

static void asn1_item_combine_free(ASN1_VALUE **pval, const ASN1_ITEM *it,
    int combine);

/* Free up an ASN1 structure */

void
ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)
{
	asn1_item_combine_free(&val, it, 0);
}

void
ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	asn1_item_combine_free(pval, it, 0);
}

static void
asn1_item_combine_free(ASN1_VALUE **pval, const ASN1_ITEM *it, int combine)
{
	const ASN1_TEMPLATE *tt = NULL, *seqtt;
	const ASN1_EXTERN_FUNCS *ef;
	const ASN1_AUX *aux = it->funcs;
	ASN1_aux_cb *asn1_cb = NULL;
	int i;

	if (pval == NULL || *pval == NULL)
		return;

	if (aux != NULL && aux->asn1_cb != NULL)
		asn1_cb = aux->asn1_cb;

	switch (it->itype) {
	case ASN1_ITYPE_PRIMITIVE:
		if (it->templates)
			ASN1_template_free(pval, it->templates);
		else
			ASN1_primitive_free(pval, it);
		break;

	case ASN1_ITYPE_MSTRING:
		ASN1_primitive_free(pval, it);
		break;

	case ASN1_ITYPE_CHOICE:
		if (asn1_cb) {
			i = asn1_cb(ASN1_OP_FREE_PRE, pval, it, NULL);
			if (i == 2)
				return;
		}
		i = asn1_get_choice_selector(pval, it);
		if ((i >= 0) && (i < it->tcount)) {
			ASN1_VALUE **pchval;
			tt = it->templates + i;
			pchval = asn1_get_field_ptr(pval, tt);
			ASN1_template_free(pchval, tt);
		}
		if (asn1_cb)
			asn1_cb(ASN1_OP_FREE_POST, pval, it, NULL);
		if (!combine) {
			free(*pval);
			*pval = NULL;
		}
		break;

	case ASN1_ITYPE_EXTERN:
		ef = it->funcs;
		if (ef && ef->asn1_ex_free)
			ef->asn1_ex_free(pval, it);
		break;

	case ASN1_ITYPE_NDEF_SEQUENCE:
	case ASN1_ITYPE_SEQUENCE:
		if (asn1_do_lock(pval, -1, it) > 0)
			return;
		if (asn1_cb) {
			i = asn1_cb(ASN1_OP_FREE_PRE, pval, it, NULL);
			if (i == 2)
				return;
		}
		asn1_enc_free(pval, it);
		/* If we free up as normal we will invalidate any
		 * ANY DEFINED BY field and we wont be able to
		 * determine the type of the field it defines. So
		 * free up in reverse order.
		 */
		tt = it->templates + it->tcount - 1;
		for (i = 0; i < it->tcount; tt--, i++) {
			ASN1_VALUE **pseqval;
			seqtt = asn1_do_adb(pval, tt, 0);
			if (!seqtt)
				continue;
			pseqval = asn1_get_field_ptr(pval, seqtt);
			ASN1_template_free(pseqval, seqtt);
		}
		if (asn1_cb)
			asn1_cb(ASN1_OP_FREE_POST, pval, it, NULL);
		if (!combine) {
			free(*pval);
			*pval = NULL;
		}
		break;
	}
}

void
ASN1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)
{
	int i;
	if (tt->flags & ASN1_TFLG_SK_MASK) {
		STACK_OF(ASN1_VALUE) *sk = (STACK_OF(ASN1_VALUE) *)*pval;
		for (i = 0; i < sk_ASN1_VALUE_num(sk); i++) {
			ASN1_VALUE *vtmp;
			vtmp = sk_ASN1_VALUE_value(sk, i);
			asn1_item_combine_free(&vtmp, tt->item,
			    0);
		}
		sk_ASN1_VALUE_free(sk);
		*pval = NULL;
	} else
		asn1_item_combine_free(pval, tt->item,
		    tt->flags & ASN1_TFLG_COMBINE);
}

void
ASN1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	int utype;
	if (it) {
		const ASN1_PRIMITIVE_FUNCS *pf;
		pf = it->funcs;
		if (pf && pf->prim_free) {
			pf->prim_free(pval, it);
			return;
		}
	}
	/* Special case: if 'it' is NULL free contents of ASN1_TYPE */
	if (!it) {
		ASN1_TYPE *typ = (ASN1_TYPE *)*pval;
		utype = typ->type;
		pval = &typ->value.asn1_value;
		if (!*pval)
			return;
	} else if (it->itype == ASN1_ITYPE_MSTRING) {
		utype = -1;
		if (!*pval)
			return;
	} else {
		utype = it->utype;
		if ((utype != V_ASN1_BOOLEAN) && !*pval)
			return;
	}

	switch (utype) {
	case V_ASN1_OBJECT:
		ASN1_OBJECT_free((ASN1_OBJECT *)*pval);
		break;

	case V_ASN1_BOOLEAN:
		if (it)
			*(ASN1_BOOLEAN *)pval = it->size;
		else
			*(ASN1_BOOLEAN *)pval = -1;
		return;

	case V_ASN1_NULL:
		break;

	case V_ASN1_ANY:
		ASN1_primitive_free(pval, NULL);
		free(*pval);
		break;

	default:
		ASN1_STRING_free((ASN1_STRING *)*pval);
		break;
	}
	*pval = NULL;
}
@


1.14
log
@Remove IMPLEMENT_COMPAT_ASN1() and related support code. Nothing uses it in
libcrypto/libssl, and nothing seems to use it in the wild, apart from embedded
copies of OpenSSL.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_fre.c,v 1.13 2015/02/14 13:32:46 jsing Exp $ */
d179 1
a179 1
			asn1_item_combine_free(&vtmp, ASN1_ITEM_ptr(tt->item),
d185 1
a185 1
		asn1_item_combine_free(pval, ASN1_ITEM_ptr(tt->item),
@


1.13
log
@Spell NULL correctly, be explicit with NULL checks and it is also easier to
initialise during declaration and drop the else statement.

ok doug@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_fre.c,v 1.12 2014/07/10 12:24:25 tedu Exp $ */
a86 1
	const ASN1_COMPAT_FUNCS *cf;
a127 6
		break;

	case ASN1_ITYPE_COMPAT:
		cf = it->funcs;
		if (cf && cf->asn1_free)
			cf->asn1_free(*pval);
@


1.12
log
@make asn1 free safe to call with null pointers of any type.
ok jsing miod
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_fre.c,v 1.11 2014/06/12 15:49:27 deraadt Exp $ */
d89 1
a89 1
	ASN1_aux_cb *asn1_cb;
d95 1
a95 1
	if (aux && aux->asn1_cb)
a96 2
	else
		asn1_cb = 0;
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d92 1
a92 3
	if (!pval)
		return;
	if ((it->itype != ASN1_ITYPE_PRIMITIVE) && !*pval)
d94 1
@


1.10
log
@Remove duplicate pointer assignment in ASN1_primitive_free(); Dirk Engling
@
text
@d1 1
a1 1
/* tasn_fre.c */
@


1.9
log
@More KNF.
@
text
@a249 1
		*pval = NULL;
@


1.8
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d65 2
a66 1
static void asn1_item_combine_free(ASN1_VALUE **pval, const ASN1_ITEM *it, int combine);
d70 2
a71 1
void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)
d76 2
a77 1
void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
d82 2
a83 1
static void asn1_item_combine_free(ASN1_VALUE **pval, const ASN1_ITEM *it, int combine)
d91 1
d101 1
a101 2
	switch(it->itype) {

d154 1
a154 1
		}		
d157 1
a157 1
		 * ANY DEFINED BY field and we wont be able to 
d180 2
a181 1
void ASN1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)
d190 1
a190 1
									0);
d194 1
a194 2
	}
	else
d196 1
a196 1
						tt->flags & ASN1_TFLG_COMBINE);
d199 2
a200 1
void ASN1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
d228 1
a228 1
	switch(utype) {
@


1.7
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d96 1
a96 2
	switch(it->itype)
	{
d98 1
a98 1
		case ASN1_ITYPE_PRIMITIVE:
d105 1
a105 1
		case ASN1_ITYPE_MSTRING:
d109 2
a110 3
		case ASN1_ITYPE_CHOICE:
		if (asn1_cb)
		{
d116 1
a116 2
		if ((i >= 0) && (i < it->tcount))
		{
d124 1
a124 2
		if (!combine)
		{
d130 1
a130 1
		case ASN1_ITYPE_COMPAT:
d136 1
a136 1
		case ASN1_ITYPE_EXTERN:
d142 2
a143 2
		case ASN1_ITYPE_NDEF_SEQUENCE:
		case ASN1_ITYPE_SEQUENCE:
d146 1
a146 2
		if (asn1_cb)
		{
d158 1
a158 2
		for (i = 0; i < it->tcount; tt--, i++)
		{
d168 1
a168 2
		if (!combine)
		{
d179 1
a179 2
	if (tt->flags & ASN1_TFLG_SK_MASK)
	{
d181 1
a181 2
		for (i = 0; i < sk_ASN1_VALUE_num(sk); i++)
		{
d198 1
a198 2
	if (it)
	{
d201 1
a201 2
		if (pf && pf->prim_free)
		{
d207 1
a207 2
	if (!it)
	{
d213 1
a213 3
	}
	else if (it->itype == ASN1_ITYPE_MSTRING)
	{
d217 1
a217 3
	}
	else
	{
d223 2
a224 3
	switch(utype)
	{
		case V_ASN1_OBJECT:
d228 1
a228 1
		case V_ASN1_BOOLEAN:
d235 1
a235 1
		case V_ASN1_NULL:
d238 1
a238 1
		case V_ASN1_ANY:
d243 1
a243 1
		default:
@


1.6
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d70 1
a70 1
	{
d72 1
a72 1
	}
d75 1
a75 1
	{
d77 1
a77 1
	}
d80 1
a80 1
	{
d97 1
a97 1
		{
d112 1
a112 1
			{
d116 1
a116 1
			}
d119 1
a119 1
			{
d124 1
a124 1
			}
d128 1
a128 1
			{
d131 1
a131 1
			}
d151 1
a151 1
			{
d155 1
a155 1
			}		
d164 1
a164 1
			{
d171 1
a171 1
			}
d175 1
a175 1
			{
d178 1
a178 1
			}
a179 1
		}
d181 1
d184 1
a184 1
	{
d187 1
a187 1
		{
d190 1
a190 1
			{
d195 1
a195 1
			}
d198 1
a198 1
		}
d202 1
a202 1
	}
d205 1
a205 1
	{
d208 1
a208 1
		{
d212 1
a212 1
			{
a214 1
			}
d216 1
d219 1
a219 1
		{
d225 1
a225 1
		}
d227 1
a227 1
		{
d231 1
a231 1
		}
d233 1
a233 1
		{
d237 1
a237 1
		}
d240 1
a240 1
		{
d264 1
a264 1
		}
d266 1
a266 1
	}
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d129 1
a129 1
			OPENSSL_free(*pval);
d176 1
a176 1
			OPENSSL_free(*pval);
d257 1
a257 1
		OPENSSL_free(*pval);
@


1.4
log
@resolve conflicts
@
text
@d113 1
a113 1
			i = asn1_cb(ASN1_OP_FREE_PRE, pval, it);
d126 1
a126 1
			asn1_cb(ASN1_OP_FREE_POST, pval, it);
d152 1
a152 1
			i = asn1_cb(ASN1_OP_FREE_PRE, pval, it);
d173 1
a173 1
			asn1_cb(ASN1_OP_FREE_POST, pval, it);
@


1.3
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.2
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d70 1
a70 1
{
d72 1
a72 1
}
d75 1
a75 1
{
d77 1
a77 1
}
d80 1
a80 1
{
d87 8
a94 4
	if(!pval) return;
	if((it->itype != ASN1_ITYPE_PRIMITIVE) && !*pval) return;
	if(aux && aux->asn1_cb) asn1_cb = aux->asn1_cb;
	else asn1_cb = 0;
d96 2
a97 1
	switch(it->itype) {
d100 4
a103 2
		if(it->templates) ASN1_template_free(pval, it->templates);
		else ASN1_primitive_free(pval, it);
d111 2
a112 1
		if(asn1_cb) {
d114 3
a116 2
			if(i == 2) return;
		}
d118 2
a119 2
		if(asn1_cb) asn1_cb(ASN1_OP_FREE_PRE, pval, it);
		if((i >= 0) && (i < it->tcount)) {
d124 5
a128 3
		}
		if(asn1_cb) asn1_cb(ASN1_OP_FREE_POST, pval, it);
		if(!combine) {
d131 1
a131 1
		}
d136 2
a137 1
		if(cf && cf->asn1_free) cf->asn1_free(*pval);
d142 2
a143 1
		if(ef && ef->asn1_ex_free) ef->asn1_ex_free(pval, it);
d146 1
d148 4
a151 2
		if(asn1_do_lock(pval, -1, it) > 0) return;
		if(asn1_cb) {
d153 3
a155 2
			if(i == 2) return;
		}		
d163 2
a164 1
		for(i = 0; i < it->tcount; tt--, i++) {
d167 2
a168 1
			if(!seqtt) continue;
d171 5
a175 3
		}
		if(asn1_cb) asn1_cb(ASN1_OP_FREE_POST, pval, it);
		if(!combine) {
d178 2
a180 1
		break;
a181 1
}
d184 1
a184 1
{
d186 2
a187 1
	if(tt->flags & ASN1_TFLG_SK_MASK) {
d189 2
a190 1
		for(i = 0; i < sk_ASN1_VALUE_num(sk); i++) {
d193 3
a195 2
			asn1_item_combine_free(&vtmp, ASN1_ITEM_ptr(tt->item), 0);
		}
d198 3
a200 1
	} else asn1_item_combine_free(pval, ASN1_ITEM_ptr(tt->item),
d202 1
a202 1
}
d205 1
a205 1
{
d207 2
a208 1
	if(it) {
d211 2
a212 1
		if(pf && pf->prim_free) {
d215 1
a216 1
	}
d218 2
a219 1
	if(!it) {
d222 6
a227 3
		pval = (ASN1_VALUE **)&typ->value.ptr;
		if(!*pval) return;
	} else if(it->itype == ASN1_ITYPE_MSTRING) {
d229 5
a233 2
		if(!*pval) return;
	} else {
d235 3
a237 2
		if((utype != V_ASN1_BOOLEAN) && !*pval) return;
	}
d239 2
a240 1
	switch(utype) {
d264 2
a266 2
	*pval = NULL;
}
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d209 4
a212 1
		*(ASN1_BOOLEAN *)pval = it->size;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d209 1
a209 4
		if (it)
			*(ASN1_BOOLEAN *)pval = it->size;
		else
			*(ASN1_BOOLEAN *)pval = -1;
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d70 1
a70 1
	{
d72 1
a72 1
	}
d75 1
a75 1
	{
d77 1
a77 1
	}
d80 1
a80 1
	{
d87 4
a90 8
	if (!pval)
		return;
	if ((it->itype != ASN1_ITYPE_PRIMITIVE) && !*pval)
		return;
	if (aux && aux->asn1_cb)
		asn1_cb = aux->asn1_cb;
	else
		asn1_cb = 0;
d92 1
a92 2
	switch(it->itype)
		{
d95 2
a96 4
		if (it->templates)
			ASN1_template_free(pval, it->templates);
		else
			ASN1_primitive_free(pval, it);
d104 1
a104 2
		if (asn1_cb)
			{
d106 2
a107 3
			if (i == 2)
				return;
			}
d109 2
a110 2
		if ((i >= 0) && (i < it->tcount))
			{
d115 3
a117 5
			}
		if (asn1_cb)
			asn1_cb(ASN1_OP_FREE_POST, pval, it);
		if (!combine)
			{
d120 1
a120 1
			}
d125 1
a125 2
		if (cf && cf->asn1_free)
			cf->asn1_free(*pval);
d130 1
a130 2
		if (ef && ef->asn1_ex_free)
			ef->asn1_ex_free(pval, it);
a132 1
		case ASN1_ITYPE_NDEF_SEQUENCE:
d134 2
a135 4
		if (asn1_do_lock(pval, -1, it) > 0)
			return;
		if (asn1_cb)
			{
d137 2
a138 3
			if (i == 2)
				return;
			}		
d146 1
a146 2
		for (i = 0; i < it->tcount; tt--, i++)
			{
d149 1
a149 2
			if (!seqtt)
				continue;
d152 3
a154 5
			}
		if (asn1_cb)
			asn1_cb(ASN1_OP_FREE_POST, pval, it);
		if (!combine)
			{
d157 1
a157 1
			}
a158 1
		}
d160 1
d163 1
a163 1
	{
d165 1
a165 2
	if (tt->flags & ASN1_TFLG_SK_MASK)
		{
d167 1
a167 2
		for (i = 0; i < sk_ASN1_VALUE_num(sk); i++)
			{
d170 2
a171 3
			asn1_item_combine_free(&vtmp, ASN1_ITEM_ptr(tt->item),
									0);
			}
d174 1
a174 3
		}
	else
		asn1_item_combine_free(pval, ASN1_ITEM_ptr(tt->item),
d176 1
a176 1
	}
d179 1
a179 1
	{
d181 1
a181 2
	if (it)
		{
d184 1
a184 2
		if (pf && pf->prim_free)
			{
a186 1
			}
d188 1
d190 1
a190 2
	if (!it)
		{
d193 3
a195 6
		pval = &typ->value.asn1_value;
		if (!*pval)
			return;
		}
	else if (it->itype == ASN1_ITYPE_MSTRING)
		{
d197 2
a198 5
		if (!*pval)
			return;
		}
	else
		{
d200 2
a201 3
		if ((utype != V_ASN1_BOOLEAN) && !*pval)
			return;
		}
d203 1
a203 2
	switch(utype)
		{
d227 1
a227 1
		}
d229 1
a229 1
	}
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d113 1
a113 1
			i = asn1_cb(ASN1_OP_FREE_PRE, pval, it, NULL);
d126 1
a126 1
			asn1_cb(ASN1_OP_FREE_POST, pval, it, NULL);
d152 1
a152 1
			i = asn1_cb(ASN1_OP_FREE_PRE, pval, it, NULL);
d173 1
a173 1
			asn1_cb(ASN1_OP_FREE_POST, pval, it, NULL);
@


