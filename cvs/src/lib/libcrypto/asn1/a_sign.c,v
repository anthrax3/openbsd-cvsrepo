head	1.22;
access;
symbols
	OPENBSD_6_1_BASE:1.22;
locks; strict;
comment	@ * @;


1.22
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.21;
commitid	kT0fLt3r4lroFJra;

1.21
date	2015.09.10.15.56.24;	author jsing;	state Exp;
branches;
next	1.20;
commitid	vHznCDK3idwNEFz4;

1.20
date	2015.07.19.18.29.31;	author miod;	state Exp;
branches;
next	1.19;
commitid	tXLDcP80XKVov5z5;

1.19
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.18;
commitid	yQEL1wOWIearrW15;

1.18
date	2014.06.24.19.37.58;	author miod;	state Exp;
branches;
next	1.17;
commitid	gcdL3V6Yguyd7T4r;

1.17
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	mJUVYpkFBZ0Zv2bG;

1.16
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.19.13.11.41;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.15.20.19.57;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.09.12.15.26;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.06;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.39;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.27;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.45;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.30;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_sign.c,v 1.21 2015/09/10 15:56:24 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2003 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <sys/types.h>

#include <stdio.h>
#include <string.h>
#include <time.h>

#include <openssl/bn.h>
#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

#include "asn1_locl.h"

int
ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2,
    ASN1_BIT_STRING *signature, void *asn, EVP_PKEY *pkey, const EVP_MD *type)
{
	EVP_MD_CTX ctx;
	EVP_MD_CTX_init(&ctx);
	if (!EVP_DigestSignInit(&ctx, NULL, type, NULL, pkey)) {
		EVP_MD_CTX_cleanup(&ctx);
		return 0;
	}
	return ASN1_item_sign_ctx(it, algor1, algor2, signature, asn, &ctx);
}


int
ASN1_item_sign_ctx(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2,
    ASN1_BIT_STRING *signature, void *asn, EVP_MD_CTX *ctx)
{
	const EVP_MD *type;
	EVP_PKEY *pkey;
	unsigned char *buf_in = NULL, *buf_out = NULL;
	size_t inl = 0, outl = 0, outll = 0;
	int signid, paramtype;
	int rv;

	type = EVP_MD_CTX_md(ctx);
	pkey = EVP_PKEY_CTX_get0_pkey(ctx->pctx);

	if (!type || !pkey) {
		ASN1error(ASN1_R_CONTEXT_NOT_INITIALISED);
		return 0;
	}

	if (pkey->ameth->item_sign) {
		rv = pkey->ameth->item_sign(ctx, it, asn, algor1, algor2,
		    signature);
		if (rv == 1)
			outl = signature->length;
		/* Return value meanings:
		 * <=0: error.
		 *   1: method does everything.
		 *   2: carry on as normal.
		 *   3: ASN1 method sets algorithm identifiers: just sign.
		 */
		if (rv <= 0)
			ASN1error(ERR_R_EVP_LIB);
		if (rv <= 1)
			goto err;
	} else
		rv = 2;

	if (rv == 2) {
		if (type->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE) {
			if (!pkey->ameth ||
			    !OBJ_find_sigid_by_algs(&signid,
				EVP_MD_nid(type), pkey->ameth->pkey_id)) {
				ASN1error(ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED);
				return 0;
			}
		} else
			signid = type->pkey_type;

		if (pkey->ameth->pkey_flags & ASN1_PKEY_SIGPARAM_NULL)
			paramtype = V_ASN1_NULL;
		else
			paramtype = V_ASN1_UNDEF;

		if (algor1)
			X509_ALGOR_set0(algor1,
			    OBJ_nid2obj(signid), paramtype, NULL);
		if (algor2)
			X509_ALGOR_set0(algor2,
			    OBJ_nid2obj(signid), paramtype, NULL);

	}

	inl = ASN1_item_i2d(asn, &buf_in, it);
	outll = outl = EVP_PKEY_size(pkey);
	buf_out = malloc(outl);
	if ((buf_in == NULL) || (buf_out == NULL)) {
		outl = 0;
		ASN1error(ERR_R_MALLOC_FAILURE);
		goto err;
	}

	if (!EVP_DigestSignUpdate(ctx, buf_in, inl) ||
	    !EVP_DigestSignFinal(ctx, buf_out, &outl)) {
		outl = 0;
		ASN1error(ERR_R_EVP_LIB);
		goto err;
	}
	free(signature->data);
	signature->data = buf_out;
	buf_out = NULL;
	signature->length = outl;
	/* In the interests of compatibility, I'll make sure that
	 * the bit string has a 'not-used bits' value of 0
	 */
	signature->flags &= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
	signature->flags |= ASN1_STRING_FLAG_BITS_LEFT;

err:
	EVP_MD_CTX_cleanup(ctx);
	if (buf_in != NULL) {
		explicit_bzero((char *)buf_in, inl);
		free(buf_in);
	}
	if (buf_out != NULL) {
		explicit_bzero((char *)buf_out, outll);
		free(buf_out);
	}
	return (outl);
}
@


1.21
log
@Correct spelling of OPENSSL_cleanse.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_sign.c,v 1.20 2015/07/19 18:29:31 miod Exp $ */
d156 1
a156 2
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX,
		    ASN1_R_CONTEXT_NOT_INITIALISED);
d172 1
a172 1
			ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX, ERR_R_EVP_LIB);
d183 1
a183 2
				ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX,
				    ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED);
d208 1
a208 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX, ERR_R_MALLOC_FAILURE);
d215 1
a215 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX, ERR_R_EVP_LIB);
@


1.20
log
@Drop stupid (int) casts for the arguments of malloc() and friends. This is
not 16-bit MS-DOS anymore.
ok bcook@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_sign.c,v 1.19 2014/07/11 08:44:47 jsing Exp $ */
d115 1
d233 1
a233 1
		OPENSSL_cleanse((char *)buf_in, inl);
d237 1
a237 1
		OPENSSL_cleanse((char *)buf_out, outll);
@


1.19
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_sign.c,v 1.18 2014/06/24 19:37:58 miod Exp $ */
d206 1
a206 1
	buf_out = malloc((unsigned int)outl);
d232 1
a232 1
		OPENSSL_cleanse((char *)buf_in, (unsigned int)inl);
@


1.18
log
@Unifdef -UNO_SYS_TYPES_H
@
text
@d1 1
a1 1
/* $OpenBSD: a_sign.c,v 1.17 2014/06/12 15:49:27 deraadt Exp $ */
d112 2
a116 4
#include "cryptlib.h"

#include <sys/types.h>

d118 2
d121 1
d123 1
a123 2
#include <openssl/objects.h>
#include <openssl/buffer.h>
@


1.17
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d117 1
a117 3
#ifndef NO_SYS_TYPES_H
# include <sys/types.h>
#endif
@


1.16
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/a_sign.c */
@


1.15
log
@More KNF.
@
text
@d221 1
a221 2
	if (signature->data != NULL)
		free(signature->data);
@


1.14
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d128 3
a130 3
int ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2,
	     ASN1_BIT_STRING *signature, void *asn, EVP_PKEY *pkey,
	     const EVP_MD *type)
a139 1
		
d141 4
a144 3
int ASN1_item_sign_ctx(const ASN1_ITEM *it,
		X509_ALGOR *algor1, X509_ALGOR *algor2,
	     	ASN1_BIT_STRING *signature, void *asn, EVP_MD_CTX *ctx)
d148 2
a149 2
	unsigned char *buf_in=NULL,*buf_out=NULL;
	size_t inl=0,outl=0,outll=0;
d157 2
a158 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX, ASN1_R_CONTEXT_NOT_INITIALISED);
d164 1
a164 1
						signature);
d177 1
a177 2
	}
	else
d183 2
a184 3
				!OBJ_find_sigid_by_algs(&signid,
							EVP_MD_nid(type),
							pkey->ameth->pkey_id)) {
d186 1
a186 1
					ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED);
d189 1
a189 2
		}
		else
d198 2
a199 1
			X509_ALGOR_set0(algor1, OBJ_nid2obj(signid), paramtype, NULL);
d201 2
a202 1
			X509_ALGOR_set0(algor2, OBJ_nid2obj(signid), paramtype, NULL);
d206 3
a208 3
	inl=ASN1_item_i2d(asn,&buf_in, it);
	outll=outl=EVP_PKEY_size(pkey);
	buf_out=malloc((unsigned int)outl);
d210 2
a211 2
		outl=0;
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX,ERR_R_MALLOC_FAILURE);
d215 4
a218 4
	if (!EVP_DigestSignUpdate(ctx, buf_in, inl)
		|| !EVP_DigestSignFinal(ctx, buf_out, &outl)) {
		outl=0;
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX,ERR_R_EVP_LIB);
d221 5
a225 4
	if (signature->data != NULL) free(signature->data);
	signature->data=buf_out;
	buf_out=NULL;
	signature->length=outl;
d229 3
a231 2
	signature->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
	signature->flags|=ASN1_STRING_FLAG_BITS_LEFT;
d235 2
a236 1
		OPENSSL_cleanse((char *)buf_in,(unsigned int)inl); free(buf_in);
d239 2
a240 1
		OPENSSL_cleanse((char *)buf_out,outll); free(buf_out);
d242 1
a242 1
	return(outl);
@


1.13
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d134 1
a134 2
	if (!EVP_DigestSignInit(&ctx, NULL, type, NULL, pkey))
	{
d156 1
a156 2
	if (!type || !pkey)
	{
d161 1
a161 2
	if (pkey->ameth->item_sign)
	{
d180 2
a181 4
	if (rv == 2)
	{
		if (type->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE)
		{
d185 1
a185 2
							pkey->ameth->pkey_id))
			{
d209 1
a209 2
	if ((buf_in == NULL) || (buf_out == NULL))
	{
d216 1
a216 2
		|| !EVP_DigestSignFinal(ctx, buf_out, &outl))
	{
d232 6
a237 4
	if (buf_in != NULL)
	{ OPENSSL_cleanse((char *)buf_in,(unsigned int)inl); free(buf_in); }
	if (buf_out != NULL)
	{ OPENSSL_cleanse((char *)buf_out,outll); free(buf_out); }
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d131 1
a131 1
	{
d135 1
a135 1
		{
d138 1
a138 1
		}
d140 1
a140 1
	}
d146 1
a146 1
	{
d158 1
a158 1
		{
d161 1
a161 1
		}
d164 1
a164 1
		{
d179 1
a179 1
		}
d184 2
a186 2
		if (type->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE)
			{
d191 1
a191 1
				{
a194 1
				}
d196 1
d210 1
a210 1
		}
d216 1
a216 1
		{
d220 1
a220 1
		}
d224 1
a224 1
		{
d228 1
a228 1
		}
d241 1
a241 1
		{ OPENSSL_cleanse((char *)buf_in,(unsigned int)inl); free(buf_in); }
d243 1
a243 1
		{ OPENSSL_cleanse((char *)buf_out,outll); free(buf_out); }
d245 1
a245 1
	}
@


1.11
log
@The NO_ASN1_OLD define was introduced in 0.9.7, 8 years ago, to allow for
obsolete (and mostly internal) routines to be compiled out.

We don't expect any reasonable software to stick to these interfaces, so better
clean up the view and unifdef -DNO_ASN1_OLD.

The astute reader will notice the existence of NO_OLD_ASN1 which serves a
similar purpose, but is more entangled. Its time will come, soon.
@
text
@d214 1
a214 1
	buf_out=OPENSSL_malloc((unsigned int)outl);
d229 1
a229 1
	if (signature->data != NULL) OPENSSL_free(signature->data);
d241 1
a241 1
		{ OPENSSL_cleanse((char *)buf_in,(unsigned int)inl); OPENSSL_free(buf_in); }
d243 1
a243 1
		{ OPENSSL_cleanse((char *)buf_out,outll); OPENSSL_free(buf_out); }
@


1.10
log
@resolve conflicts
@
text
@a127 88
#ifndef NO_ASN1_OLD

int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2,
	      ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey,
	      const EVP_MD *type)
	{
	EVP_MD_CTX ctx;
	unsigned char *p,*buf_in=NULL,*buf_out=NULL;
	int i,inl=0,outl=0,outll=0;
	X509_ALGOR *a;

	EVP_MD_CTX_init(&ctx);
	for (i=0; i<2; i++)
		{
		if (i == 0)
			a=algor1;
		else
			a=algor2;
		if (a == NULL) continue;
                if (type->pkey_type == NID_dsaWithSHA1)
			{
			/* special case: RFC 2459 tells us to omit 'parameters'
			 * with id-dsa-with-sha1 */
			ASN1_TYPE_free(a->parameter);
			a->parameter = NULL;
			}
		else if ((a->parameter == NULL) || 
			(a->parameter->type != V_ASN1_NULL))
			{
			ASN1_TYPE_free(a->parameter);
			if ((a->parameter=ASN1_TYPE_new()) == NULL) goto err;
			a->parameter->type=V_ASN1_NULL;
			}
		ASN1_OBJECT_free(a->algorithm);
		a->algorithm=OBJ_nid2obj(type->pkey_type);
		if (a->algorithm == NULL)
			{
			ASN1err(ASN1_F_ASN1_SIGN,ASN1_R_UNKNOWN_OBJECT_TYPE);
			goto err;
			}
		if (a->algorithm->length == 0)
			{
			ASN1err(ASN1_F_ASN1_SIGN,ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
			goto err;
			}
		}
	inl=i2d(data,NULL);
	buf_in=(unsigned char *)OPENSSL_malloc((unsigned int)inl);
	outll=outl=EVP_PKEY_size(pkey);
	buf_out=(unsigned char *)OPENSSL_malloc((unsigned int)outl);
	if ((buf_in == NULL) || (buf_out == NULL))
		{
		outl=0;
		ASN1err(ASN1_F_ASN1_SIGN,ERR_R_MALLOC_FAILURE);
		goto err;
		}
	p=buf_in;

	i2d(data,&p);
	if (!EVP_SignInit_ex(&ctx,type, NULL)
		|| !EVP_SignUpdate(&ctx,(unsigned char *)buf_in,inl)
		|| !EVP_SignFinal(&ctx,(unsigned char *)buf_out,
			(unsigned int *)&outl,pkey))
		{
		outl=0;
		ASN1err(ASN1_F_ASN1_SIGN,ERR_R_EVP_LIB);
		goto err;
		}
	if (signature->data != NULL) OPENSSL_free(signature->data);
	signature->data=buf_out;
	buf_out=NULL;
	signature->length=outl;
	/* In the interests of compatibility, I'll make sure that
	 * the bit string has a 'not-used bits' value of 0
	 */
	signature->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
	signature->flags|=ASN1_STRING_FLAG_BITS_LEFT;
err:
	EVP_MD_CTX_cleanup(&ctx);
	if (buf_in != NULL)
		{ OPENSSL_cleanse((char *)buf_in,(unsigned int)inl); OPENSSL_free(buf_in); }
	if (buf_out != NULL)
		{ OPENSSL_cleanse((char *)buf_out,outll); OPENSSL_free(buf_out); }
	return(outl);
	}

#endif

@


1.9
log
@resolve conflicts, fix local changes
@
text
@d187 3
a189 3
	EVP_SignInit_ex(&ctx,type, NULL);
	EVP_SignUpdate(&ctx,(unsigned char *)buf_in,inl);
	if (!EVP_SignFinal(&ctx,(unsigned char *)buf_out,
d221 16
d238 1
a238 1
	int inl=0,outl=0,outll=0;
d240 1
d242 4
a245 1
	if (type == NULL)
d247 2
a248 3
		int def_nid;
		if (EVP_PKEY_get_default_digest_nid(pkey, &def_nid) > 0)
			type = EVP_get_digestbynid(def_nid);
d251 1
a251 1
	if (type == NULL)
d253 14
a266 2
		ASN1err(ASN1_F_ASN1_ITEM_SIGN, ASN1_R_NO_DEFAULT_DIGEST);
		return 0;
d268 2
d271 1
a271 1
	if (type->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE)
d273 1
a273 3
		if (!pkey->ameth ||
			!OBJ_find_sigid_by_algs(&signid, EVP_MD_nid(type),
						pkey->ameth->pkey_id))
d275 9
a283 3
			ASN1err(ASN1_F_ASN1_ITEM_SIGN,
				ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED);
			return 0;
d285 2
a286 3
		}
	else
		signid = type->pkey_type;
d288 9
a296 4
	if (pkey->ameth->pkey_flags & ASN1_PKEY_SIGPARAM_NULL)
		paramtype = V_ASN1_NULL;
	else
		paramtype = V_ASN1_UNDEF;
d298 1
a298 4
	if (algor1)
		X509_ALGOR_set0(algor1, OBJ_nid2obj(signid), paramtype, NULL);
	if (algor2)
		X509_ALGOR_set0(algor2, OBJ_nid2obj(signid), paramtype, NULL);
a299 1
	EVP_MD_CTX_init(&ctx);
d302 1
a302 1
	buf_out=(unsigned char *)OPENSSL_malloc((unsigned int)outl);
d306 1
a306 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN,ERR_R_MALLOC_FAILURE);
d310 2
a311 4
	EVP_SignInit_ex(&ctx,type, NULL);
	EVP_SignUpdate(&ctx,(unsigned char *)buf_in,inl);
	if (!EVP_SignFinal(&ctx,(unsigned char *)buf_out,
			(unsigned int *)&outl,pkey))
d314 1
a314 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN,ERR_R_EVP_LIB);
d327 1
a327 1
	EVP_MD_CTX_cleanup(&ctx);
@


1.8
log
@resolve conflicts
@
text
@d126 1
d222 15
a236 2
	int i,inl=0,outl=0,outll=0;
	X509_ALGOR *a;
d238 1
a238 2
	EVP_MD_CTX_init(&ctx);
	for (i=0; i<2; i++)
d240 3
a242 7
		if (i == 0)
			a=algor1;
		else
			a=algor2;
		if (a == NULL) continue;
                if (type->pkey_type == NID_dsaWithSHA1 ||
			type->pkey_type == NID_ecdsa_with_SHA1)
d244 3
a246 23
			/* special case: RFC 3279 tells us to omit 'parameters'
			 * with id-dsa-with-sha1 and ecdsa-with-SHA1 */
			ASN1_TYPE_free(a->parameter);
			a->parameter = NULL;
			}
		else if ((a->parameter == NULL) || 
			(a->parameter->type != V_ASN1_NULL))
			{
			ASN1_TYPE_free(a->parameter);
			if ((a->parameter=ASN1_TYPE_new()) == NULL) goto err;
			a->parameter->type=V_ASN1_NULL;
			}
		ASN1_OBJECT_free(a->algorithm);
		a->algorithm=OBJ_nid2obj(type->pkey_type);
		if (a->algorithm == NULL)
			{
			ASN1err(ASN1_F_ASN1_ITEM_SIGN,ASN1_R_UNKNOWN_OBJECT_TYPE);
			goto err;
			}
		if (a->algorithm->length == 0)
			{
			ASN1err(ASN1_F_ASN1_ITEM_SIGN,ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
			goto err;
d249 14
d273 1
a273 6
	if (!EVP_SignInit_ex(&ctx,type, NULL))
		{
		outl=0;
		ASN1err(ASN1_F_ASN1_ITEM_SIGN,ERR_R_EVP_LIB);
		goto err;
		}
@


1.7
log
@resolve conflicts
@
text
@d270 6
a275 1
	EVP_SignInit_ex(&ctx,type, NULL);
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
d129 3
a131 3
int ASN1_sign(int (*i2d)(), X509_ALGOR *algor1, X509_ALGOR *algor2,
	     ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey,
	     const EVP_MD *type)
d232 2
a233 1
                if (type->pkey_type == NID_dsaWithSHA1)
d235 2
a236 2
			/* special case: RFC 2459 tells us to omit 'parameters'
			 * with id-dsa-with-sha1 */
d251 1
a251 1
			ASN1err(ASN1_F_ASN1_SIGN,ASN1_R_UNKNOWN_OBJECT_TYPE);
d256 1
a256 1
			ASN1err(ASN1_F_ASN1_SIGN,ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
d266 1
a266 1
		ASN1err(ASN1_F_ASN1_SIGN,ERR_R_MALLOC_FAILURE);
d276 1
a276 1
		ASN1err(ASN1_F_ASN1_SIGN,ERR_R_EVP_LIB);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d207 1
a207 1
		{ memset((char *)buf_in,0,(unsigned int)inl); OPENSSL_free(buf_in); }
d209 1
a209 1
		{ memset((char *)buf_out,0,outll); OPENSSL_free(buf_out); }
d290 1
a290 1
		{ memset((char *)buf_in,0,(unsigned int)inl); OPENSSL_free(buf_in); }
d292 1
a292 1
		{ memset((char *)buf_out,0,outll); OPENSSL_free(buf_out); }
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d58 53
d127 2
d138 1
d146 8
a153 1
		if (	(a->parameter == NULL) || 
d186 84
a269 1
	EVP_SignInit(&ctx,type);
d288 1
a288 1
	memset(&ctx,0,sizeof(ctx));
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d111 1
a111 1
	buf_in=(unsigned char *)Malloc((unsigned int)inl);
d113 1
a113 1
	buf_out=(unsigned char *)Malloc((unsigned int)outl);
d132 1
a132 1
	if (signature->data != NULL) Free(signature->data);
d144 1
a144 1
		{ memset((char *)buf_in,0,(unsigned int)inl); Free(buf_in); }
d146 1
a146 1
		{ memset((char *)buf_out,0,outll); Free(buf_out); }
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a60 2
#include <sys/types.h>
#include <sys/stat.h>
d63 5
d132 1
a132 1
	if (signature->data != NULL) Free((char *)signature->data);
d136 1
a136 1
	/* In the interests of compatability, I'll make sure that
d144 1
a144 1
		{ memset((char *)buf_in,0,(unsigned int)inl); Free((char *)buf_in); }
d146 1
a146 1
		{ memset((char *)buf_out,0,outll); Free((char *)buf_out); }
@


1.1
log
@Initial revision
@
text
@d65 5
a69 6
#include "bn.h"
#include "evp.h"
#include "x509.h"
#include "objects.h"
#include "buffer.h"
#include "pem.h"
d71 3
a73 8
int ASN1_sign(i2d,algor1,algor2,signature,data,pkey,type)
int (*i2d)();
X509_ALGOR *algor1;
X509_ALGOR *algor2;
ASN1_BIT_STRING *signature;
char *data;
EVP_PKEY *pkey;
EVP_MD *type;
d133 5
a137 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d61 2
d65 15
a79 16

#ifndef NO_SYS_TYPES_H
# include <sys/types.h>
#endif

#include <openssl/bn.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/objects.h>
#include <openssl/buffer.h>

#ifndef NO_ASN1_OLD

int ASN1_sign(int (*i2d)(), X509_ALGOR *algor1, X509_ALGOR *algor2,
	     ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey,
	     const EVP_MD *type)
a85 1
	EVP_MD_CTX_init(&ctx);
d93 1
a93 8
                if (type->pkey_type == NID_dsaWithSHA1)
			{
			/* special case: RFC 2459 tells us to omit 'parameters'
			 * with id-dsa-with-sha1 */
			ASN1_TYPE_free(a->parameter);
			a->parameter = NULL;
			}
		else if ((a->parameter == NULL) || 
d114 1
a114 1
	buf_in=(unsigned char *)OPENSSL_malloc((unsigned int)inl);
d116 1
a116 1
	buf_out=(unsigned char *)OPENSSL_malloc((unsigned int)outl);
d126 1
a126 1
	EVP_SignInit_ex(&ctx,type, NULL);
d135 1
a135 1
	if (signature->data != NULL) OPENSSL_free(signature->data);
a138 24
	/* In the interests of compatibility, I'll make sure that
	 * the bit string has a 'not-used bits' value of 0
	 */
	signature->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
	signature->flags|=ASN1_STRING_FLAG_BITS_LEFT;
err:
	EVP_MD_CTX_cleanup(&ctx);
	if (buf_in != NULL)
		{ memset((char *)buf_in,0,(unsigned int)inl); OPENSSL_free(buf_in); }
	if (buf_out != NULL)
		{ memset((char *)buf_out,0,outll); OPENSSL_free(buf_out); }
	return(outl);
	}

#endif

int ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2,
	     ASN1_BIT_STRING *signature, void *asn, EVP_PKEY *pkey,
	     const EVP_MD *type)
	{
	EVP_MD_CTX ctx;
	unsigned char *buf_in=NULL,*buf_out=NULL;
	int i,inl=0,outl=0,outll=0;
	X509_ALGOR *a;
a139 63
	EVP_MD_CTX_init(&ctx);
	for (i=0; i<2; i++)
		{
		if (i == 0)
			a=algor1;
		else
			a=algor2;
		if (a == NULL) continue;
                if (type->pkey_type == NID_dsaWithSHA1)
			{
			/* special case: RFC 2459 tells us to omit 'parameters'
			 * with id-dsa-with-sha1 */
			ASN1_TYPE_free(a->parameter);
			a->parameter = NULL;
			}
		else if ((a->parameter == NULL) || 
			(a->parameter->type != V_ASN1_NULL))
			{
			ASN1_TYPE_free(a->parameter);
			if ((a->parameter=ASN1_TYPE_new()) == NULL) goto err;
			a->parameter->type=V_ASN1_NULL;
			}
		ASN1_OBJECT_free(a->algorithm);
		a->algorithm=OBJ_nid2obj(type->pkey_type);
		if (a->algorithm == NULL)
			{
			ASN1err(ASN1_F_ASN1_SIGN,ASN1_R_UNKNOWN_OBJECT_TYPE);
			goto err;
			}
		if (a->algorithm->length == 0)
			{
			ASN1err(ASN1_F_ASN1_SIGN,ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
			goto err;
			}
		}
	inl=ASN1_item_i2d(asn,&buf_in, it);
	outll=outl=EVP_PKEY_size(pkey);
	buf_out=(unsigned char *)OPENSSL_malloc((unsigned int)outl);
	if ((buf_in == NULL) || (buf_out == NULL))
		{
		outl=0;
		ASN1err(ASN1_F_ASN1_SIGN,ERR_R_MALLOC_FAILURE);
		goto err;
		}

	EVP_SignInit_ex(&ctx,type, NULL);
	EVP_SignUpdate(&ctx,(unsigned char *)buf_in,inl);
	if (!EVP_SignFinal(&ctx,(unsigned char *)buf_out,
			(unsigned int *)&outl,pkey))
		{
		outl=0;
		ASN1err(ASN1_F_ASN1_SIGN,ERR_R_EVP_LIB);
		goto err;
		}
	if (signature->data != NULL) OPENSSL_free(signature->data);
	signature->data=buf_out;
	buf_out=NULL;
	signature->length=outl;
	/* In the interests of compatibility, I'll make sure that
	 * the bit string has a 'not-used bits' value of 0
	 */
	signature->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
	signature->flags|=ASN1_STRING_FLAG_BITS_LEFT;
d141 1
a141 1
	EVP_MD_CTX_cleanup(&ctx);
d143 1
a143 1
		{ memset((char *)buf_in,0,(unsigned int)inl); OPENSSL_free(buf_in); }
d145 1
a145 1
		{ memset((char *)buf_out,0,outll); OPENSSL_free(buf_out); }
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d207 1
a207 1
		{ OPENSSL_cleanse((char *)buf_in,(unsigned int)inl); OPENSSL_free(buf_in); }
d209 1
a209 1
		{ OPENSSL_cleanse((char *)buf_out,outll); OPENSSL_free(buf_out); }
d290 1
a290 1
		{ OPENSSL_cleanse((char *)buf_in,(unsigned int)inl); OPENSSL_free(buf_in); }
d292 1
a292 1
		{ OPENSSL_cleanse((char *)buf_out,outll); OPENSSL_free(buf_out); }
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2003 The OpenSSL Project.  All rights reserved.
d129 3
a131 3
int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2,
	      ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey,
	      const EVP_MD *type)
d232 1
a232 2
                if (type->pkey_type == NID_dsaWithSHA1 ||
			type->pkey_type == NID_ecdsa_with_SHA1)
d234 2
a235 2
			/* special case: RFC 3279 tells us to omit 'parameters'
			 * with id-dsa-with-sha1 and ecdsa-with-SHA1 */
d250 1
a250 1
			ASN1err(ASN1_F_ASN1_ITEM_SIGN,ASN1_R_UNKNOWN_OBJECT_TYPE);
d255 1
a255 1
			ASN1err(ASN1_F_ASN1_ITEM_SIGN,ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
d265 1
a265 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN,ERR_R_MALLOC_FAILURE);
d275 1
a275 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN,ERR_R_EVP_LIB);
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d270 1
a270 6
	if (!EVP_SignInit_ex(&ctx,type, NULL))
		{
		outl=0;
		ASN1err(ASN1_F_ASN1_ITEM_SIGN,ERR_R_EVP_LIB);
		goto err;
		}
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a125 1
#include "asn1_locl.h"
d221 2
a222 2
	int inl=0,outl=0,outll=0;
	int signid, paramtype;
d224 2
a225 1
	if (type == NULL)
d227 23
a249 16
		int def_nid;
		if (EVP_PKEY_get_default_digest_nid(pkey, &def_nid) > 0)
			type = EVP_get_digestbynid(def_nid);
		}

	if (type == NULL)
		{
		ASN1err(ASN1_F_ASN1_ITEM_SIGN, ASN1_R_NO_DEFAULT_DIGEST);
		return 0;
		}

	if (type->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE)
		{
		if (!pkey->ameth ||
			!OBJ_find_sigid_by_algs(&signid, EVP_MD_nid(type),
						pkey->ameth->pkey_id))
d251 7
a257 3
			ASN1err(ASN1_F_ASN1_ITEM_SIGN,
				ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED);
			return 0;
a259 14
	else
		signid = type->pkey_type;

	if (pkey->ameth->pkey_flags & ASN1_PKEY_SIGPARAM_NULL)
		paramtype = V_ASN1_NULL;
	else
		paramtype = V_ASN1_UNDEF;

	if (algor1)
		X509_ALGOR_set0(algor1, OBJ_nid2obj(signid), paramtype, NULL);
	if (algor2)
		X509_ALGOR_set0(algor2, OBJ_nid2obj(signid), paramtype, NULL);

	EVP_MD_CTX_init(&ctx);
d270 6
a275 1
	EVP_SignInit_ex(&ctx,type, NULL);
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d187 3
a189 3
	if (!EVP_SignInit_ex(&ctx,type, NULL)
		|| !EVP_SignUpdate(&ctx,(unsigned char *)buf_in,inl)
		|| !EVP_SignFinal(&ctx,(unsigned char *)buf_out,
a220 16
	EVP_MD_CTX_init(&ctx);
	if (!EVP_DigestSignInit(&ctx, NULL, type, NULL, pkey))
		{
		EVP_MD_CTX_cleanup(&ctx);
		return 0;
		}
	return ASN1_item_sign_ctx(it, algor1, algor2, signature, asn, &ctx);
	}
		

int ASN1_item_sign_ctx(const ASN1_ITEM *it,
		X509_ALGOR *algor1, X509_ALGOR *algor2,
	     	ASN1_BIT_STRING *signature, void *asn, EVP_MD_CTX *ctx)
	{
	const EVP_MD *type;
	EVP_PKEY *pkey;
d222 1
a222 1
	size_t inl=0,outl=0,outll=0;
a223 1
	int rv;
d225 1
a225 4
	type = EVP_MD_CTX_md(ctx);
	pkey = EVP_PKEY_CTX_get0_pkey(ctx->pctx);

	if (!type || !pkey)
d227 3
a229 2
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX, ASN1_R_CONTEXT_NOT_INITIALISED);
		return 0;
d232 1
a232 1
	if (pkey->ameth->item_sign)
d234 2
a235 14
		rv = pkey->ameth->item_sign(ctx, it, asn, algor1, algor2,
						signature);
		if (rv == 1)
			outl = signature->length;
		/* Return value meanings:
		 * <=0: error.
		 *   1: method does everything.
		 *   2: carry on as normal.
		 *   3: ASN1 method sets algorithm identifiers: just sign.
		 */
		if (rv <= 0)
			ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX, ERR_R_EVP_LIB);
		if (rv <= 1)
			goto err;
a236 2
	else
		rv = 2;
d238 1
a238 1
	if (rv == 2)
d240 3
a242 1
		if (type->flags & EVP_MD_FLAG_PKEY_METHOD_SIGNATURE)
d244 3
a246 9
			if (!pkey->ameth ||
				!OBJ_find_sigid_by_algs(&signid,
							EVP_MD_nid(type),
							pkey->ameth->pkey_id))
				{
				ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX,
					ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED);
				return 0;
				}
d248 3
a250 2
		else
			signid = type->pkey_type;
d252 4
a255 9
		if (pkey->ameth->pkey_flags & ASN1_PKEY_SIGPARAM_NULL)
			paramtype = V_ASN1_NULL;
		else
			paramtype = V_ASN1_UNDEF;

		if (algor1)
			X509_ALGOR_set0(algor1, OBJ_nid2obj(signid), paramtype, NULL);
		if (algor2)
			X509_ALGOR_set0(algor2, OBJ_nid2obj(signid), paramtype, NULL);
d257 4
a260 1
		}
d262 1
d265 1
a265 1
	buf_out=OPENSSL_malloc((unsigned int)outl);
d269 1
a269 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX,ERR_R_MALLOC_FAILURE);
d273 4
a276 2
	if (!EVP_DigestSignUpdate(ctx, buf_in, inl)
		|| !EVP_DigestSignFinal(ctx, buf_out, &outl))
d279 1
a279 1
		ASN1err(ASN1_F_ASN1_ITEM_SIGN_CTX,ERR_R_EVP_LIB);
d292 1
a292 1
	EVP_MD_CTX_cleanup(ctx);
@


