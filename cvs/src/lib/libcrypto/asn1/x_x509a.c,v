head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2015.02.14.15.28.39;	author miod;	state Exp;
branches;
next	1.13;
commitid	FsOC3Y8Jy2i5voa9;

1.13
date	2015.02.11.04.00.39;	author jsing;	state Exp;
branches;
next	1.12;
commitid	QCjRtjn2xv9owjIW;

1.12
date	2015.02.11.03.39.51;	author jsing;	state Exp;
branches;
next	1.11;
commitid	PWeA1V6nbEryguKH;

1.11
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.10;
commitid	X3hE8E9VwC2nOKbW;

1.10
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.57.15;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.08.53;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.51;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Memory leak upon error in X509_add1_{trust,reject}_object.
ok doug@@
@
text
@/* $OpenBSD: x_x509a.c,v 1.13 2015/02/11 04:00:39 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/asn1t.h>
#include <openssl/evp.h>
#include <openssl/x509.h>

/* X509_CERT_AUX routines. These are used to encode additional
 * user modifiable data about a certificate. This data is
 * appended to the X509 encoding when the *_X509_AUX routines
 * are used. This means that the "traditional" X509 routines
 * will simply ignore the extra data.
 */

static X509_CERT_AUX *aux_get(X509 *x);

static const ASN1_TEMPLATE X509_CERT_AUX_seq_tt[] = {
	{
		.flags = ASN1_TFLG_SEQUENCE_OF | ASN1_TFLG_OPTIONAL,
		.offset = offsetof(X509_CERT_AUX, trust),
		.field_name = "trust",
		.item = &ASN1_OBJECT_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_SEQUENCE_OF |
		    ASN1_TFLG_OPTIONAL,
		.tag = 0,
		.offset = offsetof(X509_CERT_AUX, reject),
		.field_name = "reject",
		.item = &ASN1_OBJECT_it,
	},
	{
		.flags = ASN1_TFLG_OPTIONAL,
		.offset = offsetof(X509_CERT_AUX, alias),
		.field_name = "alias",
		.item = &ASN1_UTF8STRING_it,
	},
	{
		.flags = ASN1_TFLG_OPTIONAL,
		.offset = offsetof(X509_CERT_AUX, keyid),
		.field_name = "keyid",
		.item = &ASN1_OCTET_STRING_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_SEQUENCE_OF |
		    ASN1_TFLG_OPTIONAL,
		.tag = 1,
		.offset = offsetof(X509_CERT_AUX, other),
		.field_name = "other",
		.item = &X509_ALGOR_it,
	},
};

const ASN1_ITEM X509_CERT_AUX_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = X509_CERT_AUX_seq_tt,
	.tcount = sizeof(X509_CERT_AUX_seq_tt) / sizeof(ASN1_TEMPLATE),
	.size = sizeof(X509_CERT_AUX),
	.sname = "X509_CERT_AUX",
};


X509_CERT_AUX *
d2i_X509_CERT_AUX(X509_CERT_AUX **a, const unsigned char **in, long len)
{
	return (X509_CERT_AUX *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &X509_CERT_AUX_it);
}

int
i2d_X509_CERT_AUX(X509_CERT_AUX *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_CERT_AUX_it);
}

X509_CERT_AUX *
X509_CERT_AUX_new(void)
{
	return (X509_CERT_AUX *)ASN1_item_new(&X509_CERT_AUX_it);
}

void
X509_CERT_AUX_free(X509_CERT_AUX *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &X509_CERT_AUX_it);
}

static X509_CERT_AUX *
aux_get(X509 *x)
{
	if (!x)
		return NULL;
	if (!x->aux && !(x->aux = X509_CERT_AUX_new()))
		return NULL;
	return x->aux;
}

int
X509_alias_set1(X509 *x, unsigned char *name, int len)
{
	X509_CERT_AUX *aux;
	if (!name) {
		if (!x || !x->aux || !x->aux->alias)
			return 1;
		ASN1_UTF8STRING_free(x->aux->alias);
		x->aux->alias = NULL;
		return 1;
	}
	if (!(aux = aux_get(x)))
		return 0;
	if (!aux->alias && !(aux->alias = ASN1_UTF8STRING_new()))
		return 0;
	return ASN1_STRING_set(aux->alias, name, len);
}

int
X509_keyid_set1(X509 *x, unsigned char *id, int len)
{
	X509_CERT_AUX *aux;
	if (!id) {
		if (!x || !x->aux || !x->aux->keyid)
			return 1;
		ASN1_OCTET_STRING_free(x->aux->keyid);
		x->aux->keyid = NULL;
		return 1;
	}
	if (!(aux = aux_get(x)))
		return 0;
	if (!aux->keyid && !(aux->keyid = ASN1_OCTET_STRING_new()))
		return 0;
	return ASN1_STRING_set(aux->keyid, id, len);
}

unsigned char *
X509_alias_get0(X509 *x, int *len)
{
	if (!x->aux || !x->aux->alias)
		return NULL;
	if (len)
		*len = x->aux->alias->length;
	return x->aux->alias->data;
}

unsigned char *
X509_keyid_get0(X509 *x, int *len)
{
	if (!x->aux || !x->aux->keyid)
		return NULL;
	if (len)
		*len = x->aux->keyid->length;
	return x->aux->keyid->data;
}

int
X509_add1_trust_object(X509 *x, ASN1_OBJECT *obj)
{
	X509_CERT_AUX *aux;
	ASN1_OBJECT *objtmp;
	int rc;

	if (!(objtmp = OBJ_dup(obj)))
		return 0;
	if (!(aux = aux_get(x)))
		goto err;
	if (!aux->trust && !(aux->trust = sk_ASN1_OBJECT_new_null()))
		goto err;
	rc = sk_ASN1_OBJECT_push(aux->trust, objtmp);
	if (rc != 0)
		return rc;

err:
	ASN1_OBJECT_free(objtmp);
	return 0;
}

int
X509_add1_reject_object(X509 *x, ASN1_OBJECT *obj)
{
	X509_CERT_AUX *aux;
	ASN1_OBJECT *objtmp;
	int rc;

	if (!(objtmp = OBJ_dup(obj)))
		return 0;
	if (!(aux = aux_get(x)))
		goto err;
	if (!aux->reject && !(aux->reject = sk_ASN1_OBJECT_new_null()))
		goto err;
	rc = sk_ASN1_OBJECT_push(aux->reject, objtmp);
	if (rc != 0)
		return rc;

err:
	ASN1_OBJECT_free(objtmp);
	return 0;
}

void
X509_trust_clear(X509 *x)
{
	if (x->aux && x->aux->trust) {
		sk_ASN1_OBJECT_pop_free(x->aux->trust, ASN1_OBJECT_free);
		x->aux->trust = NULL;
	}
}

void
X509_reject_clear(X509 *x)
{
	if (x->aux && x->aux->reject) {
		sk_ASN1_OBJECT_pop_free(x->aux->reject, ASN1_OBJECT_free);
		x->aux->reject = NULL;
	}
}

static const ASN1_TEMPLATE X509_CERT_PAIR_seq_tt[] = {
	{
		.flags = ASN1_TFLG_EXPLICIT | ASN1_TFLG_OPTIONAL,
		.tag = 0,
		.offset = offsetof(X509_CERT_PAIR, forward),
		.field_name = "forward",
		.item = &X509_it,
	},
	{
		.flags = ASN1_TFLG_EXPLICIT | ASN1_TFLG_OPTIONAL,
		.tag = 1,
		.offset = offsetof(X509_CERT_PAIR, reverse),
		.field_name = "reverse",
		.item = &X509_it,
	},
};

const ASN1_ITEM X509_CERT_PAIR_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = X509_CERT_PAIR_seq_tt,
	.tcount = sizeof(X509_CERT_PAIR_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(X509_CERT_PAIR),
	.sname = "X509_CERT_PAIR",
};


X509_CERT_PAIR *
d2i_X509_CERT_PAIR(X509_CERT_PAIR **a, const unsigned char **in, long len)
{
	return (X509_CERT_PAIR *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &X509_CERT_PAIR_it);
}

int
i2d_X509_CERT_PAIR(X509_CERT_PAIR *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_CERT_PAIR_it);
}

X509_CERT_PAIR *
X509_CERT_PAIR_new(void)
{
	return (X509_CERT_PAIR *)ASN1_item_new(&X509_CERT_PAIR_it);
}

void
X509_CERT_PAIR_free(X509_CERT_PAIR *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &X509_CERT_PAIR_it);
}
@


1.13
log
@Remove initialisers with default values from the ASN1 data structures.

Minor changes in generated assembly due to the compiler swapping from
.quad 0/.long 0 to .zero, along with changes due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509a.c,v 1.12 2015/02/11 03:39:51 jsing Exp $ */
d217 2
d222 1
a222 1
		return 0;
d224 8
a231 2
		return 0;
	return sk_ASN1_OBJECT_push(aux->trust, objtmp);
d239 2
d244 1
a244 1
		return 0;
d246 8
a253 2
		return 0;
	return sk_ASN1_OBJECT_push(aux->reject, objtmp);
@


1.12
log
@Expand most of the ASN1_SEQUENCE* and associated macros, making the data
structures visible and easier to review, without having to wade through
layers and layers of asn1t.h macros.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509a.c,v 1.11 2015/02/09 15:05:59 jsing Exp $ */
a76 1
		.tag = 0,
d82 2
a83 1
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_SEQUENCE_OF | ASN1_TFLG_OPTIONAL,
a90 1
		.tag = 0,
a96 1
		.tag = 0,
d102 2
a103 1
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_SEQUENCE_OF | ASN1_TFLG_OPTIONAL,
a115 1
	.funcs = NULL,
@


1.11
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509a.c,v 1.10 2014/07/11 08:44:47 jsing Exp $ */
d74 47
a120 7
ASN1_SEQUENCE(X509_CERT_AUX) = {
	ASN1_SEQUENCE_OF_OPT(X509_CERT_AUX, trust, ASN1_OBJECT),
	ASN1_IMP_SEQUENCE_OF_OPT(X509_CERT_AUX, reject, ASN1_OBJECT, 0),
	ASN1_OPT(X509_CERT_AUX, alias, ASN1_UTF8STRING),
	ASN1_OPT(X509_CERT_AUX, keyid, ASN1_OCTET_STRING),
	ASN1_IMP_SEQUENCE_OF_OPT(X509_CERT_AUX, other, X509_ALGOR, 1)
} ASN1_SEQUENCE_END(X509_CERT_AUX)
d260 26
a285 4
ASN1_SEQUENCE(X509_CERT_PAIR) = {
	ASN1_EXP_OPT(X509_CERT_PAIR, forward, X509, 0),
	ASN1_EXP_OPT(X509_CERT_PAIR, reverse, X509, 1)
} ASN1_SEQUENCE_END(X509_CERT_PAIR)
@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509a.c,v 1.9 2014/06/12 15:49:27 deraadt Exp $ */
d82 25
a106 1
IMPLEMENT_ASN1_FUNCTIONS(X509_CERT_AUX)
d225 25
a249 1
IMPLEMENT_ASN1_FUNCTIONS(X509_CERT_PAIR)
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 2
a61 1
#include "cryptlib.h"
a62 1
#include <openssl/asn1t.h>
@


1.8
log
@More KNF.
@
text
@d1 1
a1 1
/* a_x509a.c */
@


1.7
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d69 1
a69 1
 * will simply ignore the extra data. 
d84 2
a85 1
static X509_CERT_AUX *aux_get(X509 *x)
d87 4
a90 2
	if(!x) return NULL;
	if(!x->aux && !(x->aux = X509_CERT_AUX_new())) return NULL;
d94 2
a95 1
int X509_alias_set1(X509 *x, unsigned char *name, int len)
d105 4
a108 2
	if(!(aux = aux_get(x))) return 0;
	if(!aux->alias && !(aux->alias = ASN1_UTF8STRING_new())) return 0;
d112 2
a113 1
int X509_keyid_set1(X509 *x, unsigned char *id, int len)
d123 4
a126 2
	if(!(aux = aux_get(x))) return 0;
	if(!aux->keyid && !(aux->keyid = ASN1_OCTET_STRING_new())) return 0;
d130 2
a131 1
unsigned char *X509_alias_get0(X509 *x, int *len)
d133 4
a136 2
	if(!x->aux || !x->aux->alias) return NULL;
	if(len) *len = x->aux->alias->length;
d140 2
a141 1
unsigned char *X509_keyid_get0(X509 *x, int *len)
d143 4
a146 2
	if(!x->aux || !x->aux->keyid) return NULL;
	if(len) *len = x->aux->keyid->length;
d150 2
a151 1
int X509_add1_trust_object(X509 *x, ASN1_OBJECT *obj)
d155 6
a160 4
	if(!(objtmp = OBJ_dup(obj))) return 0;
	if(!(aux = aux_get(x))) return 0;
	if(!aux->trust
		&& !(aux->trust = sk_ASN1_OBJECT_new_null())) return 0;
d164 2
a165 1
int X509_add1_reject_object(X509 *x, ASN1_OBJECT *obj)
d169 6
a174 4
	if(!(objtmp = OBJ_dup(obj))) return 0;
	if(!(aux = aux_get(x))) return 0;
	if(!aux->reject
		&& !(aux->reject = sk_ASN1_OBJECT_new_null())) return 0;
d178 2
a179 1
void X509_trust_clear(X509 *x)
d181 1
a181 1
	if(x->aux && x->aux->trust) {
d187 2
a188 1
void X509_reject_clear(X509 *x)
d190 1
a190 1
	if(x->aux && x->aux->reject) {
@


1.6
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d94 1
a94 2
	if (!name)
	{
d109 1
a109 2
	if (!id)
	{
@


1.5
log
@resolve conflicts
@
text
@d95 1
a95 1
		{
d101 1
a101 1
		}
d111 1
a111 1
		{
d117 1
a117 1
		}
@


1.4
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d94 8
d110 8
d130 7
d175 6
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d62 1
a62 1
#include <openssl/asn1_mac.h>
d74 7
a80 6
X509_CERT_AUX *d2i_X509_CERT_AUX(X509_CERT_AUX **a, unsigned char **pp, long length)
{
	M_ASN1_D2I_vars(a, X509_CERT_AUX *, X509_CERT_AUX_new);
	
	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
d82 1
a82 59
	M_ASN1_D2I_get_seq_opt_type(ASN1_OBJECT, ret->trust,
					d2i_ASN1_OBJECT, ASN1_OBJECT_free);
	M_ASN1_D2I_get_IMP_set_opt_type(ASN1_OBJECT, ret->reject,
					d2i_ASN1_OBJECT, ASN1_OBJECT_free, 0);
	M_ASN1_D2I_get_opt(ret->alias, d2i_ASN1_UTF8STRING, V_ASN1_UTF8STRING);
	M_ASN1_D2I_get_opt(ret->keyid, d2i_ASN1_OCTET_STRING, V_ASN1_OCTET_STRING);
	M_ASN1_D2I_get_IMP_set_opt_type(X509_ALGOR, ret->other,
					d2i_X509_ALGOR, X509_ALGOR_free, 1);

	M_ASN1_D2I_Finish(a, X509_CERT_AUX_free, ASN1_F_D2I_X509_CERT_AUX);
}

X509_CERT_AUX *X509_CERT_AUX_new()
{
	X509_CERT_AUX *ret = NULL;
	ASN1_CTX c;
	M_ASN1_New_Malloc(ret, X509_CERT_AUX);
	ret->trust = NULL;
	ret->reject = NULL;
	ret->alias = NULL;
	ret->keyid = NULL;
	ret->other = NULL;
	return(ret);
	M_ASN1_New_Error(ASN1_F_X509_CERT_AUX_NEW);
}

void X509_CERT_AUX_free(X509_CERT_AUX *a)
{
	if(a == NULL) return;
	sk_ASN1_OBJECT_pop_free(a->trust, ASN1_OBJECT_free);
	sk_ASN1_OBJECT_pop_free(a->reject, ASN1_OBJECT_free);
	ASN1_UTF8STRING_free(a->alias);
	ASN1_OCTET_STRING_free(a->keyid);
	sk_X509_ALGOR_pop_free(a->other, X509_ALGOR_free);
	OPENSSL_free(a);
}

int i2d_X509_CERT_AUX(X509_CERT_AUX *a, unsigned char **pp)
{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len_SEQUENCE_opt_type(ASN1_OBJECT, a->trust, i2d_ASN1_OBJECT);
	M_ASN1_I2D_len_IMP_SEQUENCE_opt_type(ASN1_OBJECT, a->reject, i2d_ASN1_OBJECT, 0);

	M_ASN1_I2D_len(a->alias, i2d_ASN1_UTF8STRING);
	M_ASN1_I2D_len(a->keyid, i2d_ASN1_OCTET_STRING);
	M_ASN1_I2D_len_IMP_SEQUENCE_opt_type(X509_ALGOR, a->other, i2d_X509_ALGOR, 1);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put_SEQUENCE_opt_type(ASN1_OBJECT, a->trust, i2d_ASN1_OBJECT);
	M_ASN1_I2D_put_IMP_SEQUENCE_opt_type(ASN1_OBJECT, a->reject, i2d_ASN1_OBJECT, 0);

	M_ASN1_I2D_put(a->alias, i2d_ASN1_UTF8STRING);
	M_ASN1_I2D_put(a->keyid, i2d_ASN1_OCTET_STRING);
	M_ASN1_I2D_put_IMP_SEQUENCE_opt_type(X509_ALGOR, a->other, i2d_X509_ALGOR, 1);

	M_ASN1_I2D_finish();
}
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d115 1
a115 1
	Free(a);
d154 8
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 1
#include <openssl/asn1t.h>
d74 47
a120 7
ASN1_SEQUENCE(X509_CERT_AUX) = {
	ASN1_SEQUENCE_OF_OPT(X509_CERT_AUX, trust, ASN1_OBJECT),
	ASN1_IMP_SEQUENCE_OF_OPT(X509_CERT_AUX, reject, ASN1_OBJECT, 0),
	ASN1_OPT(X509_CERT_AUX, alias, ASN1_UTF8STRING),
	ASN1_OPT(X509_CERT_AUX, keyid, ASN1_OCTET_STRING),
	ASN1_IMP_SEQUENCE_OF_OPT(X509_CERT_AUX, other, X509_ALGOR, 1)
} ASN1_SEQUENCE_END(X509_CERT_AUX)
d122 18
a139 1
IMPLEMENT_ASN1_FUNCTIONS(X509_CERT_AUX)
a153 8
}

int X509_keyid_set1(X509 *x, unsigned char *id, int len)
{
	X509_CERT_AUX *aux;
	if(!(aux = aux_get(x))) return 0;
	if(!aux->keyid && !(aux->keyid = ASN1_OCTET_STRING_new())) return 0;
	return ASN1_STRING_set(aux->keyid, id, len);
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@a93 8
	if (!name)
		{
		if (!x || !x->aux || !x->aux->alias)
			return 1;
		ASN1_UTF8STRING_free(x->aux->alias);
		x->aux->alias = NULL;
		return 1;
		}
a101 8
	if (!id)
		{
		if (!x || !x->aux || !x->aux->keyid)
			return 1;
		ASN1_OCTET_STRING_free(x->aux->keyid);
		x->aux->keyid = NULL;
		return 1;
		}
a113 7
unsigned char *X509_keyid_get0(X509 *x, int *len)
{
	if(!x->aux || !x->aux->keyid) return NULL;
	if(len) *len = x->aux->keyid->length;
	return x->aux->keyid->data;
}

a151 6
ASN1_SEQUENCE(X509_CERT_PAIR) = {
	ASN1_EXP_OPT(X509_CERT_PAIR, forward, X509, 0),
	ASN1_EXP_OPT(X509_CERT_PAIR, reverse, X509, 1)
} ASN1_SEQUENCE_END(X509_CERT_PAIR)

IMPLEMENT_ASN1_FUNCTIONS(X509_CERT_PAIR)
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


