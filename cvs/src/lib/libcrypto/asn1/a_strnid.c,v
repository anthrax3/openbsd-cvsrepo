head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.2
	OPENBSD_6_1_BASE:1.21;
locks; strict;
comment	@ * @;


1.21
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.20;
commitid	kT0fLt3r4lroFJra;

1.20
date	2017.01.21.04.31.25;	author jsing;	state Exp;
branches;
next	1.19;
commitid	VeyGLY8p1lNeAAob;

1.19
date	2015.02.10.11.22.21;	author jsing;	state Exp;
branches;
next	1.18;
commitid	LaAI4ax0sm4T2bQg;

1.18
date	2014.10.28.05.46.55;	author miod;	state Exp;
branches;
next	1.17;
commitid	hDZmp09ZEY5wcTE1;

1.17
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.15;
commitid	id8dTrTMtnTn4fqt;

1.15
date	2014.06.22.13.17.08;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	znce11FQdyIuEYj2;

1.14
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.31.20.16.31;	author beck;	state Exp;
branches;
next	1.12;
commitid	BHJWzzoYx5UI2A9c;

1.12
date	2014.04.19.13.11.41;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.11.22.15.19;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.00.02.55;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.57.06;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.08.39;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.47;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.34.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.11.11.21.11.55;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_strnid.c,v 1.20 2017/01/21 04:31:25 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <ctype.h>
#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/err.h>
#include <openssl/objects.h>

static STACK_OF(ASN1_STRING_TABLE) *stable = NULL;
static void st_free(ASN1_STRING_TABLE *tbl);
static int sk_table_cmp(const ASN1_STRING_TABLE * const *a,
    const ASN1_STRING_TABLE * const *b);


/* This is the global mask for the mbstring functions: this is use to
 * mask out certain types (such as BMPString and UTF8String) because
 * certain software (e.g. Netscape) has problems with them.
 */

static unsigned long global_mask = B_ASN1_UTF8STRING;

void
ASN1_STRING_set_default_mask(unsigned long mask)
{
	global_mask = mask;
}

unsigned long
ASN1_STRING_get_default_mask(void)
{
	return global_mask;
}

/* This function sets the default to various "flavours" of configuration.
 * based on an ASCII string. Currently this is:
 * MASK:XXXX : a numerical mask value.
 * nobmp : Don't use BMPStrings (just Printable, T61).
 * pkix : PKIX recommendation in RFC2459.
 * utf8only : only use UTF8Strings (RFC2459 recommendation for 2004).
 * default:   the default value, Printable, T61, BMP.
 */

int
ASN1_STRING_set_default_mask_asc(const char *p)
{
	unsigned long mask;
	char *end;

	if (!strncmp(p, "MASK:", 5)) {
		if (!p[5])
			return 0;
		mask = strtoul(p + 5, &end, 0);
		if (*end)
			return 0;
	} else if (!strcmp(p, "nombstr"))
		mask = ~((unsigned long)(B_ASN1_BMPSTRING|B_ASN1_UTF8STRING));
	else if (!strcmp(p, "pkix"))
		mask = ~((unsigned long)B_ASN1_T61STRING);
	else if (!strcmp(p, "utf8only"))
		mask = B_ASN1_UTF8STRING;
	else if (!strcmp(p, "default"))
		mask = 0xFFFFFFFFL;
	else
		return 0;
	ASN1_STRING_set_default_mask(mask);
	return 1;
}

/* The following function generates an ASN1_STRING based on limits in a table.
 * Frequently the types and length of an ASN1_STRING are restricted by a
 * corresponding OID. For example certificates and certificate requests.
 */

ASN1_STRING *
ASN1_STRING_set_by_NID(ASN1_STRING **out, const unsigned char *in, int inlen,
    int inform, int nid)
{
	ASN1_STRING_TABLE *tbl;
	ASN1_STRING *str = NULL;
	unsigned long mask;
	int ret;
	if (!out)
		out = &str;
	tbl = ASN1_STRING_TABLE_get(nid);
	if (tbl) {
		mask = tbl->mask;
		if (!(tbl->flags & STABLE_NO_MASK))
			mask &= global_mask;
		ret = ASN1_mbstring_ncopy(out, in, inlen, inform, mask,
		    tbl->minsize, tbl->maxsize);
	} else
		ret = ASN1_mbstring_copy(out, in, inlen, inform,
		    DIRSTRING_TYPE & global_mask);
	if (ret <= 0)
		return NULL;
	return *out;
}

/* Now the tables and helper functions for the string table:
 */

/* size limits: this stuff is taken straight from RFC3280 */

#define ub_name				32768
#define ub_common_name			64
#define ub_locality_name		128
#define ub_state_name			128
#define ub_organization_name		64
#define ub_organization_unit_name	64
#define ub_title			64
#define ub_email_address		128
#define ub_serial_number		64


/* This table must be kept in NID order */

static const ASN1_STRING_TABLE tbl_standard[] = {
	{NID_commonName,		1, ub_common_name, DIRSTRING_TYPE, 0},
	{NID_countryName,		2, 2, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},
	{NID_localityName,		1, ub_locality_name, DIRSTRING_TYPE, 0},
	{NID_stateOrProvinceName,	1, ub_state_name, DIRSTRING_TYPE, 0},
	{NID_organizationName,		1, ub_organization_name, DIRSTRING_TYPE, 0},
	{NID_organizationalUnitName,	1, ub_organization_unit_name, DIRSTRING_TYPE, 0},
	{NID_pkcs9_emailAddress,	1, ub_email_address, B_ASN1_IA5STRING, STABLE_NO_MASK},
	{NID_pkcs9_unstructuredName,	1, -1, PKCS9STRING_TYPE, 0},
	{NID_pkcs9_challengePassword,	1, -1, PKCS9STRING_TYPE, 0},
	{NID_pkcs9_unstructuredAddress,	1, -1, DIRSTRING_TYPE, 0},
	{NID_givenName,			1, ub_name, DIRSTRING_TYPE, 0},
	{NID_surname,			1, ub_name, DIRSTRING_TYPE, 0},
	{NID_initials,			1, ub_name, DIRSTRING_TYPE, 0},
	{NID_serialNumber,		1, ub_serial_number, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},
	{NID_friendlyName,		-1, -1, B_ASN1_BMPSTRING, STABLE_NO_MASK},
	{NID_name,			1, ub_name, DIRSTRING_TYPE, 0},
	{NID_dnQualifier,		-1, -1, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},
	{NID_domainComponent,		1, -1, B_ASN1_IA5STRING, STABLE_NO_MASK},
	{NID_ms_csp_name,		-1, -1, B_ASN1_BMPSTRING, STABLE_NO_MASK}
};

static int
sk_table_cmp(const ASN1_STRING_TABLE * const *a,
    const ASN1_STRING_TABLE * const *b)
{
	return (*a)->nid - (*b)->nid;
}

static int table_cmp_BSEARCH_CMP_FN(const void *, const void *);
static int table_cmp(ASN1_STRING_TABLE const *, ASN1_STRING_TABLE const *);
static ASN1_STRING_TABLE *OBJ_bsearch_table(ASN1_STRING_TABLE *key, ASN1_STRING_TABLE const *base, int num);

static int
table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
{
	return a->nid - b->nid;
}


static int
table_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)
{
	ASN1_STRING_TABLE const *a = a_;
	ASN1_STRING_TABLE const *b = b_;
	return table_cmp(a, b);
}

static ASN1_STRING_TABLE *
OBJ_bsearch_table(ASN1_STRING_TABLE *key, ASN1_STRING_TABLE const *base, int num)
{
	return (ASN1_STRING_TABLE *)OBJ_bsearch_(key, base, num, sizeof(ASN1_STRING_TABLE),
	    table_cmp_BSEARCH_CMP_FN);
}

ASN1_STRING_TABLE *
ASN1_STRING_TABLE_get(int nid)
{
	int idx;
	ASN1_STRING_TABLE *ttmp;
	ASN1_STRING_TABLE fnd;

	fnd.nid = nid;
	ttmp = OBJ_bsearch_table(&fnd, tbl_standard,
	    sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE));
	if (ttmp)
		return ttmp;
	if (!stable)
		return NULL;
	idx = sk_ASN1_STRING_TABLE_find(stable, &fnd);
	if (idx < 0)
		return NULL;
	return sk_ASN1_STRING_TABLE_value(stable, idx);
}

int
ASN1_STRING_TABLE_add(int nid, long minsize, long maxsize, unsigned long mask,
    unsigned long flags)
{
	ASN1_STRING_TABLE *tmp;
	char new_nid = 0;

	flags &= ~STABLE_FLAGS_MALLOC;
	if (!stable)
		stable = sk_ASN1_STRING_TABLE_new(sk_table_cmp);
	if (!stable) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return 0;
	}
	if (!(tmp = ASN1_STRING_TABLE_get(nid))) {
		tmp = malloc(sizeof(ASN1_STRING_TABLE));
		if (!tmp) {
			ASN1error(ERR_R_MALLOC_FAILURE);
			return 0;
		}
		tmp->flags = flags | STABLE_FLAGS_MALLOC;
		tmp->nid = nid;
		new_nid = 1;
	} else tmp->flags = (tmp->flags & STABLE_FLAGS_MALLOC) | flags;
		if (minsize != -1)
		tmp->minsize = minsize;
	if (maxsize != -1)
		tmp->maxsize = maxsize;
	tmp->mask = mask;
	if (new_nid) {
		if (sk_ASN1_STRING_TABLE_push(stable, tmp) == 0) {
			free(tmp);
			ASN1error(ERR_R_MALLOC_FAILURE);
			return 0;
		}
	}
	return 1;
}

void
ASN1_STRING_TABLE_cleanup(void)
{
	STACK_OF(ASN1_STRING_TABLE) *tmp;

	tmp = stable;
	if (!tmp)
		return;
	stable = NULL;
	sk_ASN1_STRING_TABLE_pop_free(tmp, st_free);
}

static void
st_free(ASN1_STRING_TABLE *tbl)
{
	if (tbl->flags & STABLE_FLAGS_MALLOC)
		free(tbl);
}
@


1.20
log
@Expand DECLARE_OBJ_BSEARCH_CMP_FN and IMPLEMENT_OBJ_BSEARCH_CMP_FN macros.

No change to generated assembly excluding line numbers.
@
text
@d1 1
a1 1
/* $OpenBSD: a_strnid.c,v 1.19 2015/02/10 11:22:21 jsing Exp $ */
d261 1
a261 1
		ASN1err(ASN1_F_ASN1_STRING_TABLE_ADD, ERR_R_MALLOC_FAILURE);
d267 1
a267 2
			ASN1err(ASN1_F_ASN1_STRING_TABLE_ADD,
			    ERR_R_MALLOC_FAILURE);
d282 1
a282 2
			ASN1err(ASN1_F_ASN1_STRING_TABLE_ADD,
			    ERR_R_MALLOC_FAILURE);
@


1.19
log
@Remove more IMPLEMENT_STACK_OF noops that have been hiding for the last
15 years.
@
text
@d1 1
a1 1
/* $OpenBSD: a_strnid.c,v 1.18 2014/10/28 05:46:55 miod Exp $ */
d204 3
a206 1
DECLARE_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);
d214 15
a228 1
IMPLEMENT_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);
@


1.18
log
@Check the result of sk_*_push() operations for failure.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_strnid.c,v 1.17 2014/07/11 08:44:47 jsing Exp $ */
a292 3


IMPLEMENT_STACK_OF(ASN1_STRING_TABLE)
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_strnid.c,v 1.16 2014/07/10 13:58:22 jsing Exp $ */
d264 8
a271 2
	if (new_nid)
		sk_ASN1_STRING_TABLE_push(stable, tmp);
@


1.16
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_strnid.c,v 1.15 2014/06/22 13:17:08 deraadt Exp $ */
a62 1
#include "cryptlib.h"
d64 1
a65 1

@


1.15
log
@nuke unused test programs; ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: a_strnid.c,v 1.14 2014/06/12 15:49:27 deraadt Exp $ */
d59 1
d61 2
a62 1
#include <ctype.h>
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a288 31

#ifdef STRING_TABLE_TEST

main()
{
	ASN1_STRING_TABLE *tmp;
	int i, last_nid = -1;

	for (tmp = tbl_standard, i = 0;
	    i < sizeof(tbl_standard) / sizeof(ASN1_STRING_TABLE); i++, tmp++) {
		if (tmp->nid < last_nid) {
			last_nid = 0;
			break;
		}
		last_nid = tmp->nid;
	}

	if (last_nid != 0) {
		printf("Table order OK\n");
		exit(0);
	}

	for (tmp = tbl_standard, i = 0;
	    i < sizeof(tbl_standard) / sizeof(ASN1_STRING_TABLE); i++, tmp++) {
		printf("Index %d, NID %d, Name=%s\n", i, tmp->nid,
		    OBJ_nid2ln(tmp->nid));
	}

}

#endif
@


1.13
log
@Change the actual default for returned asn1 strings to be utf8 in the code,
rather than only in the config file, to trip people up later.
Found, and fix pleaded for by <spider@@skuggor.se> who apparently
spent hours chasing it down.
ok miod@@
@
text
@d1 1
a1 1
/* a_strnid.c */
@


1.12
log
@More KNF.
@
text
@d77 1
a77 1
static unsigned long global_mask = 0xFFFFFFFFL;
@


1.11
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d69 1
a69 1
			const ASN1_STRING_TABLE * const *b);
d79 2
a80 1
void ASN1_STRING_set_default_mask(unsigned long mask)
d85 2
a86 1
unsigned long ASN1_STRING_get_default_mask(void)
d100 2
a101 1
int ASN1_STRING_set_default_mask_asc(const char *p)
d105 4
a108 2
	if(!strncmp(p, "MASK:", 5)) {
		if(!p[5]) return 0;
d110 12
a121 9
		if(*end) return 0;
	} else if(!strcmp(p, "nombstr"))
			 mask = ~((unsigned long)(B_ASN1_BMPSTRING|B_ASN1_UTF8STRING));
	else if(!strcmp(p, "pkix"))
			mask = ~((unsigned long)B_ASN1_T61STRING);
	else if(!strcmp(p, "utf8only")) mask = B_ASN1_UTF8STRING;
	else if(!strcmp(p, "default"))
	    mask = 0xFFFFFFFFL;
	else return 0;
d127 1
a127 1
 * Frequently the types and length of an ASN1_STRING are restricted by a 
d131 3
a133 2
ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out, const unsigned char *in,
					int inlen, int inform, int nid)
d139 2
a140 1
	if(!out) out = &str;
d142 1
a142 1
	if(tbl) {
d144 2
a145 1
		if(!(tbl->flags & STABLE_NO_MASK)) mask &= global_mask;
d147 6
a152 3
					tbl->minsize, tbl->maxsize);
	} else ret = ASN1_mbstring_copy(out, in, inlen, inform, DIRSTRING_TYPE & global_mask);
	if(ret <= 0) return NULL;
d175 19
a193 19
{NID_commonName,		1, ub_common_name, DIRSTRING_TYPE, 0},
{NID_countryName,		2, 2, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},
{NID_localityName,		1, ub_locality_name, DIRSTRING_TYPE, 0},
{NID_stateOrProvinceName,	1, ub_state_name, DIRSTRING_TYPE, 0},
{NID_organizationName,		1, ub_organization_name, DIRSTRING_TYPE, 0},
{NID_organizationalUnitName,	1, ub_organization_unit_name, DIRSTRING_TYPE, 0},
{NID_pkcs9_emailAddress,	1, ub_email_address, B_ASN1_IA5STRING, STABLE_NO_MASK},
{NID_pkcs9_unstructuredName,	1, -1, PKCS9STRING_TYPE, 0},
{NID_pkcs9_challengePassword,	1, -1, PKCS9STRING_TYPE, 0},
{NID_pkcs9_unstructuredAddress,	1, -1, DIRSTRING_TYPE, 0},
{NID_givenName,			1, ub_name, DIRSTRING_TYPE, 0},
{NID_surname,			1, ub_name, DIRSTRING_TYPE, 0},
{NID_initials,			1, ub_name, DIRSTRING_TYPE, 0},
{NID_serialNumber,		1, ub_serial_number, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},
{NID_friendlyName,		-1, -1, B_ASN1_BMPSTRING, STABLE_NO_MASK},
{NID_name,			1, ub_name, DIRSTRING_TYPE, 0},
{NID_dnQualifier,		-1, -1, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},
{NID_domainComponent,		1, -1, B_ASN1_IA5STRING, STABLE_NO_MASK},
{NID_ms_csp_name,		-1, -1, B_ASN1_BMPSTRING, STABLE_NO_MASK}
d196 3
a198 2
static int sk_table_cmp(const ASN1_STRING_TABLE * const *a,
			const ASN1_STRING_TABLE * const *b)
d205 2
a206 1
static int table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
d213 2
a214 1
ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid)
d219 1
d221 6
a226 4
	ttmp = OBJ_bsearch_table(&fnd, tbl_standard, 
			   sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE));
	if(ttmp) return ttmp;
	if(!stable) return NULL;
d228 2
a229 1
	if(idx < 0) return NULL;
d232 4
a235 4
	
int ASN1_STRING_TABLE_add(int nid,
		 long minsize, long maxsize, unsigned long mask,
				unsigned long flags)
d239 1
d241 3
a243 2
	if(!stable) stable = sk_ASN1_STRING_TABLE_new(sk_table_cmp);
	if(!stable) {
d247 1
a247 1
	if(!(tmp = ASN1_STRING_TABLE_get(nid))) {
d249 1
a249 1
		if(!tmp) {
d251 1
a251 1
							ERR_R_MALLOC_FAILURE);
d258 4
a261 2
	if(minsize != -1) tmp->minsize = minsize;
	if(maxsize != -1) tmp->maxsize = maxsize;
d263 2
a264 1
	if(new_nid) sk_ASN1_STRING_TABLE_push(stable, tmp);
d268 2
a269 1
void ASN1_STRING_TABLE_cleanup(void)
d272 1
d274 2
a275 1
	if(!tmp) return;
d280 2
a281 1
static void st_free(ASN1_STRING_TABLE *tbl)
d283 2
a284 1
	if(tbl->flags & STABLE_FLAGS_MALLOC) free(tbl);
d298 1
a298 1
	    i < sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE); i++, tmp++) {
d312 1
a312 1
	    i < sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE); i++, tmp++) {
d314 1
a314 1
			OBJ_nid2ln(tmp->nid));
@


1.10
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d267 4
a270 8
		i < sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE); i++, tmp++)
		{
			if (tmp->nid < last_nid)
				{
				last_nid = 0;
				break;
				}
			last_nid = tmp->nid;
d272 2
d275 1
a275 2
	if (last_nid != 0)
		{
d278 1
a278 1
		}
d281 4
a284 3
		i < sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE); i++, tmp++)
			printf("Index %d, NID %d, Name=%s\n", i, tmp->nid,
							OBJ_nid2ln(tmp->nid));
@


1.9
log
@openssl-1.0.0e: resolve conflicts
@
text
@d225 1
a225 1
		tmp = OPENSSL_malloc(sizeof(ASN1_STRING_TABLE));
d253 1
a253 1
	if(tbl->flags & STABLE_FLAGS_MALLOC) OPENSSL_free(tbl);
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d98 1
a98 1
int ASN1_STRING_set_default_mask_asc(char *p)
@


1.7
log
@resolve conflicts
@
text
@a69 1
static int table_cmp(const void *a, const void *b);
d160 1
a160 1
static ASN1_STRING_TABLE tbl_standard[] = {
d188 3
a190 1
static int table_cmp(const void *a, const void *b)
d192 1
a192 2
	const ASN1_STRING_TABLE *sa = a, *sb = b;
	return sa->nid - sb->nid;
d195 2
d203 2
a204 4
	ttmp = (ASN1_STRING_TABLE *) OBJ_bsearch((char *)&fnd,
					(char *)tbl_standard, 
			sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE),
			sizeof(ASN1_STRING_TABLE), table_cmp);
@


1.6
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d146 1
a146 1
/* size limits: this stuff is taken straight from RFC2459 */
d156 2
d175 1
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d176 1
d253 1
d255 33
@


1.3
log
@openssl-engine-0.9.6a merge
@
text
@d108 1
a108 1
			 mask = ~(B_ASN1_BMPSTRING|B_ASN1_UTF8STRING);
d110 1
a110 1
			mask = ~B_ASN1_T61STRING;
d173 1
d175 2
a176 1
{NID_dnQualifier,		-1, -1, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK}
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d136 1
a136 1
		ret = ASN1_mbstring_ncopy(out, in, inlen, inform, tbl->mask,
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 3
a70 2
static int sk_table_cmp(ASN1_STRING_TABLE **a, ASN1_STRING_TABLE **b);
static int table_cmp(ASN1_STRING_TABLE *a, ASN1_STRING_TABLE *b);
d177 2
a178 1
static int sk_table_cmp(ASN1_STRING_TABLE **a, ASN1_STRING_TABLE **b)
d183 1
a183 1
static int table_cmp(ASN1_STRING_TABLE *a, ASN1_STRING_TABLE *b)
d185 2
a186 1
	return a->nid - b->nid;
d198 1
a198 1
			sizeof(ASN1_STRING_TABLE), (int(*)())table_cmp);
d219 1
a219 1
		tmp = Malloc(sizeof(ASN1_STRING_TABLE));
d247 1
a247 1
	if(tbl->flags & STABLE_FLAGS_MALLOC) Free(tbl);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d68 2
a69 3
static int sk_table_cmp(const ASN1_STRING_TABLE * const *a,
			const ASN1_STRING_TABLE * const *b);
static int table_cmp(const void *a, const void *b);
d107 1
a107 1
			 mask = ~((unsigned long)(B_ASN1_BMPSTRING|B_ASN1_UTF8STRING));
d109 1
a109 1
			mask = ~((unsigned long)B_ASN1_T61STRING);
d135 1
a135 1
		ret = ASN1_mbstring_ncopy(out, in, inlen, inform, mask,
a171 1
{NID_friendlyName,		-1, -1, B_ASN1_BMPSTRING, STABLE_NO_MASK},
d173 1
a173 2
{NID_dnQualifier,		-1, -1, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},
{NID_ms_csp_name,		-1, -1, B_ASN1_BMPSTRING, STABLE_NO_MASK}
d176 1
a176 2
static int sk_table_cmp(const ASN1_STRING_TABLE * const *a,
			const ASN1_STRING_TABLE * const *b)
d181 1
a181 1
static int table_cmp(const void *a, const void *b)
d183 1
a183 2
	const ASN1_STRING_TABLE *sa = a, *sb = b;
	return sa->nid - sb->nid;
d195 1
a195 1
			sizeof(ASN1_STRING_TABLE), table_cmp);
d216 1
a216 1
		tmp = OPENSSL_malloc(sizeof(ASN1_STRING_TABLE));
d244 1
a244 1
	if(tbl->flags & STABLE_FLAGS_MALLOC) OPENSSL_free(tbl);
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@a175 1
{NID_domainComponent,		1, -1, B_ASN1_IA5STRING, STABLE_NO_MASK},
a251 1

a252 33

#ifdef STRING_TABLE_TEST

main()
{
	ASN1_STRING_TABLE *tmp;
	int i, last_nid = -1;

	for (tmp = tbl_standard, i = 0;
		i < sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE); i++, tmp++)
		{
			if (tmp->nid < last_nid)
				{
				last_nid = 0;
				break;
				}
			last_nid = tmp->nid;
		}

	if (last_nid != 0)
		{
		printf("Table order OK\n");
		exit(0);
		}

	for (tmp = tbl_standard, i = 0;
		i < sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE); i++, tmp++)
			printf("Index %d, NID %d, Name=%s\n", i, tmp->nid,
							OBJ_nid2ln(tmp->nid));

}

#endif
@


1.1.1.3
log
@import 0.9.7c
@
text
@d146 1
a146 1
/* size limits: this stuff is taken straight from RFC3280 */
a155 2
#define ub_serial_number		64

a172 1
{NID_serialNumber,		1, ub_serial_number, B_ASN1_PRINTABLESTRING, STABLE_NO_MASK},
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d70 1
d161 1
a161 1
static const ASN1_STRING_TABLE tbl_standard[] = {
d189 1
a189 3
DECLARE_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);

static int table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
d191 2
a192 1
	return a->nid - b->nid;
a194 2
IMPLEMENT_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);

d201 4
a204 2
	ttmp = OBJ_bsearch_table(&fnd, tbl_standard, 
			   sizeof(tbl_standard)/sizeof(ASN1_STRING_TABLE));
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d98 1
a98 1
int ASN1_STRING_set_default_mask_asc(const char *p)
@


