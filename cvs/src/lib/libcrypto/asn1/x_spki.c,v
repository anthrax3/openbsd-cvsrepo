head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2015.02.11.04.00.39;	author jsing;	state Exp;
branches;
next	1.10;
commitid	QCjRtjn2xv9owjIW;

1.10
date	2015.02.11.03.39.51;	author jsing;	state Exp;
branches;
next	1.9;
commitid	PWeA1V6nbEryguKH;

1.9
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.8;
commitid	X3hE8E9VwC2nOKbW;

1.8
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.7;
commitid	yQEL1wOWIearrW15;

1.7
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.52;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.35;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.51;	author markus;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove initialisers with default values from the ASN1 data structures.

Minor changes in generated assembly due to the compiler swapping from
.quad 0/.long 0 to .zero, along with changes due to line numbering.
@
text
@/* $OpenBSD: x_spki.c,v 1.10 2015/02/11 03:39:51 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

 /* This module was send to me my Pat Richards <patr@@x509.com> who
  * wrote it.  It is under my Copyright with his permission
  */

#include <stdio.h>

#include <openssl/x509.h>
#include <openssl/asn1t.h>

static const ASN1_TEMPLATE NETSCAPE_SPKAC_seq_tt[] = {
	{
		.offset = offsetof(NETSCAPE_SPKAC, pubkey),
		.field_name = "pubkey",
		.item = &X509_PUBKEY_it,
	},
	{
		.offset = offsetof(NETSCAPE_SPKAC, challenge),
		.field_name = "challenge",
		.item = &ASN1_IA5STRING_it,
	},
};

const ASN1_ITEM NETSCAPE_SPKAC_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = NETSCAPE_SPKAC_seq_tt,
	.tcount = sizeof(NETSCAPE_SPKAC_seq_tt) / sizeof(ASN1_TEMPLATE),
	.size = sizeof(NETSCAPE_SPKAC),
	.sname = "NETSCAPE_SPKAC",
};


NETSCAPE_SPKAC *
d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC **a, const unsigned char **in, long len)
{
	return (NETSCAPE_SPKAC *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &NETSCAPE_SPKAC_it);
}

int
i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &NETSCAPE_SPKAC_it);
}

NETSCAPE_SPKAC *
NETSCAPE_SPKAC_new(void)
{
	return (NETSCAPE_SPKAC *)ASN1_item_new(&NETSCAPE_SPKAC_it);
}

void
NETSCAPE_SPKAC_free(NETSCAPE_SPKAC *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &NETSCAPE_SPKAC_it);
}

static const ASN1_TEMPLATE NETSCAPE_SPKI_seq_tt[] = {
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(NETSCAPE_SPKI, spkac),
		.field_name = "spkac",
		.item = &NETSCAPE_SPKAC_it,
	},
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(NETSCAPE_SPKI, sig_algor),
		.field_name = "sig_algor",
		.item = &X509_ALGOR_it,
	},
	{
		.flags = 0,
		.tag = 0,
		.offset = offsetof(NETSCAPE_SPKI, signature),
		.field_name = "signature",
		.item = &ASN1_BIT_STRING_it,
	},
};

const ASN1_ITEM NETSCAPE_SPKI_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = NETSCAPE_SPKI_seq_tt,
	.tcount = sizeof(NETSCAPE_SPKI_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = NULL,
	.size = sizeof(NETSCAPE_SPKI),
	.sname = "NETSCAPE_SPKI",
};


NETSCAPE_SPKI *
d2i_NETSCAPE_SPKI(NETSCAPE_SPKI **a, const unsigned char **in, long len)
{
	return (NETSCAPE_SPKI *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &NETSCAPE_SPKI_it);
}

int
i2d_NETSCAPE_SPKI(NETSCAPE_SPKI *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &NETSCAPE_SPKI_it);
}

NETSCAPE_SPKI *
NETSCAPE_SPKI_new(void)
{
	return (NETSCAPE_SPKI *)ASN1_item_new(&NETSCAPE_SPKI_it);
}

void
NETSCAPE_SPKI_free(NETSCAPE_SPKI *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &NETSCAPE_SPKI_it);
}
@


1.10
log
@Expand most of the ASN1_SEQUENCE* and associated macros, making the data
structures visible and easier to review, without having to wade through
layers and layers of asn1t.h macros.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_spki.c,v 1.9 2015/02/09 15:05:59 jsing Exp $ */
a69 2
		.flags = 0,
		.tag = 0,
a74 2
		.flags = 0,
		.tag = 0,
a85 1
	.funcs = NULL,
@


1.9
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_spki.c,v 1.8 2014/07/11 08:44:47 jsing Exp $ */
d68 26
a93 4
ASN1_SEQUENCE(NETSCAPE_SPKAC) = {
	ASN1_SIMPLE(NETSCAPE_SPKAC, pubkey, X509_PUBKEY),
	ASN1_SIMPLE(NETSCAPE_SPKAC, challenge, ASN1_IA5STRING)
} ASN1_SEQUENCE_END(NETSCAPE_SPKAC)
d121 33
a153 5
ASN1_SEQUENCE(NETSCAPE_SPKI) = {
	ASN1_SIMPLE(NETSCAPE_SPKI, spkac, NETSCAPE_SPKAC),
	ASN1_SIMPLE(NETSCAPE_SPKI, sig_algor, X509_ALGOR),
	ASN1_SIMPLE(NETSCAPE_SPKI, signature, ASN1_BIT_STRING)
} ASN1_SEQUENCE_END(NETSCAPE_SPKI)
@


1.8
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_spki.c,v 1.7 2014/06/12 15:49:27 deraadt Exp $ */
d73 25
a97 1
IMPLEMENT_ASN1_FUNCTIONS(NETSCAPE_SPKAC)
d105 25
a129 1
IMPLEMENT_ASN1_FUNCTIONS(NETSCAPE_SPKI)
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 1
a64 1
#include "cryptlib.h"
@


1.6
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/x_spki.c */
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d66 1
a66 1
#include <openssl/asn1_mac.h>
d68 12
a79 98
int i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC *a, unsigned char **pp)
	{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len(a->pubkey,	i2d_X509_PUBKEY);
	M_ASN1_I2D_len(a->challenge,	i2d_ASN1_IA5STRING);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put(a->pubkey,	i2d_X509_PUBKEY);
	M_ASN1_I2D_put(a->challenge,	i2d_ASN1_IA5STRING);

	M_ASN1_I2D_finish();
	}

NETSCAPE_SPKAC *d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC **a, unsigned char **pp,
	     long length)
	{
	M_ASN1_D2I_vars(a,NETSCAPE_SPKAC *,NETSCAPE_SPKAC_new);

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->pubkey,d2i_X509_PUBKEY);
	M_ASN1_D2I_get(ret->challenge,d2i_ASN1_IA5STRING);
	M_ASN1_D2I_Finish(a,NETSCAPE_SPKAC_free,ASN1_F_D2I_NETSCAPE_SPKAC);
	}

NETSCAPE_SPKAC *NETSCAPE_SPKAC_new(void)
	{
	NETSCAPE_SPKAC *ret=NULL;
	ASN1_CTX c;

	M_ASN1_New_Malloc(ret,NETSCAPE_SPKAC);
	M_ASN1_New(ret->pubkey,X509_PUBKEY_new);
	M_ASN1_New(ret->challenge,M_ASN1_IA5STRING_new);
	return(ret);
	M_ASN1_New_Error(ASN1_F_NETSCAPE_SPKAC_NEW);
	}

void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC *a)
	{
	if (a == NULL) return;
	X509_PUBKEY_free(a->pubkey);
	M_ASN1_IA5STRING_free(a->challenge);
	OPENSSL_free(a);
	}

int i2d_NETSCAPE_SPKI(NETSCAPE_SPKI *a, unsigned char **pp)
	{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len(a->spkac,	i2d_NETSCAPE_SPKAC);
	M_ASN1_I2D_len(a->sig_algor,	i2d_X509_ALGOR);
	M_ASN1_I2D_len(a->signature,	i2d_ASN1_BIT_STRING);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put(a->spkac,	i2d_NETSCAPE_SPKAC);
	M_ASN1_I2D_put(a->sig_algor,	i2d_X509_ALGOR);
	M_ASN1_I2D_put(a->signature,	i2d_ASN1_BIT_STRING);

	M_ASN1_I2D_finish();
	}

NETSCAPE_SPKI *d2i_NETSCAPE_SPKI(NETSCAPE_SPKI **a, unsigned char **pp,
	     long length)
	{
	M_ASN1_D2I_vars(a,NETSCAPE_SPKI *,NETSCAPE_SPKI_new);

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->spkac,d2i_NETSCAPE_SPKAC);
	M_ASN1_D2I_get(ret->sig_algor,d2i_X509_ALGOR);
	M_ASN1_D2I_get(ret->signature,d2i_ASN1_BIT_STRING);
	M_ASN1_D2I_Finish(a,NETSCAPE_SPKI_free,ASN1_F_D2I_NETSCAPE_SPKI);
	}

NETSCAPE_SPKI *NETSCAPE_SPKI_new(void)
	{
	NETSCAPE_SPKI *ret=NULL;
	ASN1_CTX c;

	M_ASN1_New_Malloc(ret,NETSCAPE_SPKI);
	M_ASN1_New(ret->spkac,NETSCAPE_SPKAC_new);
	M_ASN1_New(ret->sig_algor,X509_ALGOR_new);
	M_ASN1_New(ret->signature,M_ASN1_BIT_STRING_new);
	return(ret);
	M_ASN1_New_Error(ASN1_F_NETSCAPE_SPKI_NEW);
	}

void NETSCAPE_SPKI_free(NETSCAPE_SPKI *a)
	{
	if (a == NULL) return;
	NETSCAPE_SPKAC_free(a->spkac);
	X509_ALGOR_free(a->sig_algor);
	M_ASN1_BIT_STRING_free(a->signature);
	OPENSSL_free(a);
	}
d81 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d112 1
a112 1
	Free(a);
d164 1
a164 1
	Free(a);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d60 1
a60 1
  * wrote it.  It is under my Copyright with his permision
d102 1
a102 1
	M_ASN1_New(ret->challenge,ASN1_IA5STRING_new);
d111 2
a112 2
	ASN1_IA5STRING_free(a->challenge);
	Free((char *)a);
d153 1
a153 1
	M_ASN1_New(ret->signature,ASN1_BIT_STRING_new);
d163 2
a164 2
	ASN1_BIT_STRING_free(a->signature);
	Free((char *)a);
@


1.1
log
@Initial revision
@
text
@d65 2
a66 2
#include "x509.h"
#include "asn1_mac.h"
d68 1
a68 10
/*
 * ASN1err(ASN1_F_D2I_NETSCAPE_SPKAC,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_NETSCAPE_SPKAC_NEW,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_D2I_NETSCAPE_SPKI,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_NETSCAPE_SPKI_NEW,ASN1_R_LENGTH_MISMATCH);
 */

int i2d_NETSCAPE_SPKAC(a,pp)
NETSCAPE_SPKAC *a;
unsigned char **pp;
d83 2
a84 4
NETSCAPE_SPKAC *d2i_NETSCAPE_SPKAC(a,pp,length)
NETSCAPE_SPKAC **a;
unsigned char **pp;
long length;
d95 1
a95 1
NETSCAPE_SPKAC *NETSCAPE_SPKAC_new()
d98 1
d107 1
a107 2
void NETSCAPE_SPKAC_free(a)
NETSCAPE_SPKAC *a;
d115 1
a115 3
int i2d_NETSCAPE_SPKI(a,pp)
NETSCAPE_SPKI *a;
unsigned char **pp;
d132 2
a133 4
NETSCAPE_SPKI *d2i_NETSCAPE_SPKI(a,pp,length)
NETSCAPE_SPKI **a;
unsigned char **pp;
long length;
d145 1
a145 1
NETSCAPE_SPKI *NETSCAPE_SPKI_new()
d148 1
d158 1
a158 2
void NETSCAPE_SPKI_free(a)
NETSCAPE_SPKI *a;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d60 1
a60 1
  * wrote it.  It is under my Copyright with his permission
d65 2
a66 2
#include <openssl/x509.h>
#include <openssl/asn1t.h>
d68 113
a180 12
ASN1_SEQUENCE(NETSCAPE_SPKAC) = {
	ASN1_SIMPLE(NETSCAPE_SPKAC, pubkey, X509_PUBKEY),
	ASN1_SIMPLE(NETSCAPE_SPKAC, challenge, ASN1_IA5STRING)
} ASN1_SEQUENCE_END(NETSCAPE_SPKAC)

IMPLEMENT_ASN1_FUNCTIONS(NETSCAPE_SPKAC)

ASN1_SEQUENCE(NETSCAPE_SPKI) = {
	ASN1_SIMPLE(NETSCAPE_SPKI, spkac, NETSCAPE_SPKAC),
	ASN1_SIMPLE(NETSCAPE_SPKI, sig_algor, X509_ALGOR),
	ASN1_SIMPLE(NETSCAPE_SPKI, signature, ASN1_BIT_STRING)
} ASN1_SEQUENCE_END(NETSCAPE_SPKI)
a181 1
IMPLEMENT_ASN1_FUNCTIONS(NETSCAPE_SPKI)
@

