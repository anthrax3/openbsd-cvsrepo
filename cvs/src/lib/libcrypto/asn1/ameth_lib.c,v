head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16;
locks; strict;
comment	@ * @;


1.16
date	2017.01.21.04.31.25;	author jsing;	state Exp;
branches;
next	1.15;
commitid	VeyGLY8p1lNeAAob;

1.15
date	2014.11.09.19.17.13;	author miod;	state Exp;
branches;
next	1.14;
commitid	QrgOG8zcUIADOfFd;

1.14
date	2014.07.13.16.03.09;	author beck;	state Exp;
branches;
next	1.13;
commitid	6xdvCwSqBadTW6X3;

1.13
date	2014.07.11.13.41.59;	author miod;	state Exp;
branches;
next	1.12;
commitid	m0t9LXKcoE1LTsTy;

1.12
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.10;
commitid	nzndm3zqPmFurSaK;

1.10
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.9;
commitid	id8dTrTMtnTn4fqt;

1.9
date	2014.06.22.13.17.08;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	znce11FQdyIuEYj2;

1.8
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	mJUVYpkFBZ0Zv2bG;

1.7
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.18.13.26.34;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Expand DECLARE_OBJ_BSEARCH_CMP_FN and IMPLEMENT_OBJ_BSEARCH_CMP_FN macros.

No change to generated assembly excluding line numbers.
@
text
@/* $OpenBSD: ameth_lib.c,v 1.15 2014/11/09 19:17:13 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1t.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

#include "asn1_locl.h"

extern const EVP_PKEY_ASN1_METHOD rsa_asn1_meths[];
extern const EVP_PKEY_ASN1_METHOD dsa_asn1_meths[];
extern const EVP_PKEY_ASN1_METHOD dh_asn1_meth;
extern const EVP_PKEY_ASN1_METHOD eckey_asn1_meth;
extern const EVP_PKEY_ASN1_METHOD gostr01_asn1_meths[];
extern const EVP_PKEY_ASN1_METHOD gostimit_asn1_meth;
extern const EVP_PKEY_ASN1_METHOD hmac_asn1_meth;
extern const EVP_PKEY_ASN1_METHOD cmac_asn1_meth;

/* Keep this sorted in type order !! */
static const EVP_PKEY_ASN1_METHOD *standard_methods[] = {
#ifndef OPENSSL_NO_RSA
	&rsa_asn1_meths[0],
	&rsa_asn1_meths[1],
#endif
#ifndef OPENSSL_NO_DH
	&dh_asn1_meth,
#endif
#ifndef OPENSSL_NO_DSA
	&dsa_asn1_meths[0],
	&dsa_asn1_meths[1],
	&dsa_asn1_meths[2],
	&dsa_asn1_meths[3],
	&dsa_asn1_meths[4],
#endif
#ifndef OPENSSL_NO_EC
	&eckey_asn1_meth,
#endif
#ifndef OPENSSL_NO_GOST
	&gostr01_asn1_meths[0],
	&gostimit_asn1_meth,
#endif
	&hmac_asn1_meth,
	&cmac_asn1_meth,
#ifndef OPENSSL_NO_GOST
	&gostr01_asn1_meths[1],
	&gostr01_asn1_meths[2],
#endif
};

typedef int sk_cmp_fn_type(const char * const *a, const char * const *b);
DECLARE_STACK_OF(EVP_PKEY_ASN1_METHOD)
static STACK_OF(EVP_PKEY_ASN1_METHOD) *app_methods = NULL;

static int ameth_cmp_BSEARCH_CMP_FN(const void *, const void *);
static int ameth_cmp(const EVP_PKEY_ASN1_METHOD * const *, const EVP_PKEY_ASN1_METHOD * const *);
static const EVP_PKEY_ASN1_METHOD * *OBJ_bsearch_ameth(const EVP_PKEY_ASN1_METHOD * *key, const EVP_PKEY_ASN1_METHOD * const *base, int num);

static int
ameth_cmp(const EVP_PKEY_ASN1_METHOD * const *a,
    const EVP_PKEY_ASN1_METHOD * const *b)
{
	return ((*a)->pkey_id - (*b)->pkey_id);
}


static int
ameth_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)
{
	const EVP_PKEY_ASN1_METHOD * const *a = a_;
	const EVP_PKEY_ASN1_METHOD * const *b = b_;
	return ameth_cmp(a, b);
}

static const EVP_PKEY_ASN1_METHOD * *
OBJ_bsearch_ameth(const EVP_PKEY_ASN1_METHOD * *key, const EVP_PKEY_ASN1_METHOD * const *base, int num)
{
	return (const EVP_PKEY_ASN1_METHOD * *)OBJ_bsearch_(key, base, num, sizeof(const EVP_PKEY_ASN1_METHOD *),
	    ameth_cmp_BSEARCH_CMP_FN);
}

int
EVP_PKEY_asn1_get_count(void)
{
	int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
	if (app_methods)
		num += sk_EVP_PKEY_ASN1_METHOD_num(app_methods);
	return num;
}

const EVP_PKEY_ASN1_METHOD *
EVP_PKEY_asn1_get0(int idx)
{
	int num = sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *);
	if (idx < 0)
		return NULL;
	if (idx < num)
		return standard_methods[idx];
	idx -= num;
	return sk_EVP_PKEY_ASN1_METHOD_value(app_methods, idx);
}

static const EVP_PKEY_ASN1_METHOD *
pkey_asn1_find(int type)
{
	EVP_PKEY_ASN1_METHOD tmp;
	const EVP_PKEY_ASN1_METHOD *t = &tmp, **ret;
	tmp.pkey_id = type;
	if (app_methods) {
		int idx;
		idx = sk_EVP_PKEY_ASN1_METHOD_find(app_methods, &tmp);
		if (idx >= 0)
			return sk_EVP_PKEY_ASN1_METHOD_value(app_methods, idx);
	}
	ret = OBJ_bsearch_ameth(&t, standard_methods,
	    sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *));
	if (!ret || !*ret)
		return NULL;
	return *ret;
}

/* Find an implementation of an ASN1 algorithm. If 'pe' is not NULL
 * also search through engines and set *pe to a functional reference
 * to the engine implementing 'type' or NULL if no engine implements
 * it.
 */

const EVP_PKEY_ASN1_METHOD *
EVP_PKEY_asn1_find(ENGINE **pe, int type)
{
	const EVP_PKEY_ASN1_METHOD *t;

	for (;;) {
		t = pkey_asn1_find(type);
		if (!t || !(t->pkey_flags & ASN1_PKEY_ALIAS))
			break;
		type = t->pkey_base_id;
	}
	if (pe) {
#ifndef OPENSSL_NO_ENGINE
		ENGINE *e;
		/* type will contain the final unaliased type */
		e = ENGINE_get_pkey_asn1_meth_engine(type);
		if (e) {
			*pe = e;
			return ENGINE_get_pkey_asn1_meth(e, type);
		}
#endif
		*pe = NULL;
	}
	return t;
}

const EVP_PKEY_ASN1_METHOD *
EVP_PKEY_asn1_find_str(ENGINE **pe, const char *str, int len)
{
	int i;
	const EVP_PKEY_ASN1_METHOD *ameth;
	if (len == -1)
		len = strlen(str);
	if (pe) {
#ifndef OPENSSL_NO_ENGINE
		ENGINE *e;
		ameth = ENGINE_pkey_asn1_find_str(&e, str, len);
		if (ameth) {
			/* Convert structural into
			 * functional reference
			 */
			if (!ENGINE_init(e))
				ameth = NULL;
			ENGINE_free(e);
			*pe = e;
			return ameth;
		}
#endif
		*pe = NULL;
	}
	for (i = 0; i < EVP_PKEY_asn1_get_count(); i++) {
		ameth = EVP_PKEY_asn1_get0(i);
		if (ameth->pkey_flags & ASN1_PKEY_ALIAS)
			continue;
		if (((int)strlen(ameth->pem_str) == len) &&
		    !strncasecmp(ameth->pem_str, str, len))
			return ameth;
	}
	return NULL;
}

int
EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)
{
	if (app_methods == NULL) {
		app_methods = sk_EVP_PKEY_ASN1_METHOD_new(ameth_cmp);
		if (!app_methods)
			return 0;
	}
	if (!sk_EVP_PKEY_ASN1_METHOD_push(app_methods, ameth))
		return 0;
	sk_EVP_PKEY_ASN1_METHOD_sort(app_methods);
	return 1;
}

int
EVP_PKEY_asn1_add_alias(int to, int from)
{
	EVP_PKEY_ASN1_METHOD *ameth;

	ameth = EVP_PKEY_asn1_new(from, ASN1_PKEY_ALIAS, NULL, NULL);
	if (!ameth)
		return 0;
	ameth->pkey_base_id = to;
	if (!EVP_PKEY_asn1_add0(ameth)) {
		EVP_PKEY_asn1_free(ameth);
		return 0;
	}
	return 1;
}

int
EVP_PKEY_asn1_get0_info(int *ppkey_id, int *ppkey_base_id, int *ppkey_flags,
    const char **pinfo, const char **ppem_str,
    const EVP_PKEY_ASN1_METHOD *ameth)
{
	if (!ameth)
		return 0;
	if (ppkey_id)
		*ppkey_id = ameth->pkey_id;
	if (ppkey_base_id)
		*ppkey_base_id = ameth->pkey_base_id;
	if (ppkey_flags)
		*ppkey_flags = ameth->pkey_flags;
	if (pinfo)
		*pinfo = ameth->info;
	if (ppem_str)
		*ppem_str = ameth->pem_str;
	return 1;
}

const EVP_PKEY_ASN1_METHOD*
EVP_PKEY_get0_asn1(EVP_PKEY *pkey)
{
	return pkey->ameth;
}

EVP_PKEY_ASN1_METHOD*
EVP_PKEY_asn1_new(int id, int flags, const char *pem_str, const char *info)
{
	EVP_PKEY_ASN1_METHOD *ameth;

	ameth = calloc(1, sizeof(EVP_PKEY_ASN1_METHOD));
	if (!ameth)
		return NULL;

	ameth->pkey_id = id;
	ameth->pkey_base_id = id;
	ameth->pkey_flags = flags | ASN1_PKEY_DYNAMIC;

	if (info) {
		ameth->info = strdup(info);
		if (!ameth->info)
			goto err;
	} else
		ameth->info = NULL;

	if (pem_str) {
		ameth->pem_str = strdup(pem_str);
		if (!ameth->pem_str)
			goto err;
	} else
		ameth->pem_str = NULL;

	ameth->pub_decode = 0;
	ameth->pub_encode = 0;
	ameth->pub_cmp = 0;
	ameth->pub_print = 0;

	ameth->priv_decode = 0;
	ameth->priv_encode = 0;
	ameth->priv_print = 0;

	ameth->old_priv_encode = 0;
	ameth->old_priv_decode = 0;

	ameth->item_verify = 0;
	ameth->item_sign = 0;

	ameth->pkey_size = 0;
	ameth->pkey_bits = 0;

	ameth->param_decode = 0;
	ameth->param_encode = 0;
	ameth->param_missing = 0;
	ameth->param_copy = 0;
	ameth->param_cmp = 0;
	ameth->param_print = 0;

	ameth->pkey_free = 0;
	ameth->pkey_ctrl = 0;

	return ameth;

err:
	EVP_PKEY_asn1_free(ameth);
	return NULL;
}

void
EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst, const EVP_PKEY_ASN1_METHOD *src)
{
	dst->pub_decode = src->pub_decode;
	dst->pub_encode = src->pub_encode;
	dst->pub_cmp = src->pub_cmp;
	dst->pub_print = src->pub_print;

	dst->priv_decode = src->priv_decode;
	dst->priv_encode = src->priv_encode;
	dst->priv_print = src->priv_print;

	dst->old_priv_encode = src->old_priv_encode;
	dst->old_priv_decode = src->old_priv_decode;

	dst->pkey_size = src->pkey_size;
	dst->pkey_bits = src->pkey_bits;

	dst->param_decode = src->param_decode;
	dst->param_encode = src->param_encode;
	dst->param_missing = src->param_missing;
	dst->param_copy = src->param_copy;
	dst->param_cmp = src->param_cmp;
	dst->param_print = src->param_print;

	dst->pkey_free = src->pkey_free;
	dst->pkey_ctrl = src->pkey_ctrl;

	dst->item_sign = src->item_sign;
	dst->item_verify = src->item_verify;
}

void
EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth)
{
	if (ameth && (ameth->pkey_flags & ASN1_PKEY_DYNAMIC)) {
		free(ameth->pem_str);
		free(ameth->info);
		free(ameth);
	}
}

void
EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,
    int (*pub_decode)(EVP_PKEY *pk, X509_PUBKEY *pub),
    int (*pub_encode)(X509_PUBKEY *pub, const EVP_PKEY *pk),
    int (*pub_cmp)(const EVP_PKEY *a, const EVP_PKEY *b),
    int (*pub_print)(BIO *out, const EVP_PKEY *pkey, int indent,
	ASN1_PCTX *pctx),
    int (*pkey_size)(const EVP_PKEY *pk),
    int (*pkey_bits)(const EVP_PKEY *pk))
{
	ameth->pub_decode = pub_decode;
	ameth->pub_encode = pub_encode;
	ameth->pub_cmp = pub_cmp;
	ameth->pub_print = pub_print;
	ameth->pkey_size = pkey_size;
	ameth->pkey_bits = pkey_bits;
}

void
EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,
    int (*priv_decode)(EVP_PKEY *pk, PKCS8_PRIV_KEY_INFO *p8inf),
    int (*priv_encode)(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk),
    int (*priv_print)(BIO *out, const EVP_PKEY *pkey, int indent,
	ASN1_PCTX *pctx))
{
	ameth->priv_decode = priv_decode;
	ameth->priv_encode = priv_encode;
	ameth->priv_print = priv_print;
}

void
EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,
    int (*param_decode)(EVP_PKEY *pkey, const unsigned char **pder, int derlen),
    int (*param_encode)(const EVP_PKEY *pkey, unsigned char **pder),
    int (*param_missing)(const EVP_PKEY *pk),
    int (*param_copy)(EVP_PKEY *to, const EVP_PKEY *from),
    int (*param_cmp)(const EVP_PKEY *a, const EVP_PKEY *b),
    int (*param_print)(BIO *out, const EVP_PKEY *pkey, int indent,
	ASN1_PCTX *pctx))
{
	ameth->param_decode = param_decode;
	ameth->param_encode = param_encode;
	ameth->param_missing = param_missing;
	ameth->param_copy = param_copy;
	ameth->param_cmp = param_cmp;
	ameth->param_print = param_print;
}

void
EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth,
    void (*pkey_free)(EVP_PKEY *pkey))
{
	ameth->pkey_free = pkey_free;
}

void
EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth,
    int (*pkey_ctrl)(EVP_PKEY *pkey, int op, long arg1, void *arg2))
{
	ameth->pkey_ctrl = pkey_ctrl;
}
@


1.15
log
@GOST crypto algorithms (well, most of them), ported from the removed GOST
engine to regular EVP citizens, contributed by Dmitry Eremin-Solenikov;
libcrypto bits only for now.

This is a verbatim import of Dmitry's work, and does not compile in this
state; the forthcoming commits will address these issues.

None of the GOST code is enabled in libcrypto yet, for it still gets
compiled with OPENSSL_NO_GOST defined. However, the public header gost.h
will be installed.
@
text
@d1 1
a1 1
/* $OpenBSD: ameth_lib.c,v 1.14 2014/07/13 16:03:09 beck Exp $ */
d117 3
a119 2
DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_ASN1_METHOD *,
    const EVP_PKEY_ASN1_METHOD *, ameth);
d128 15
a142 2
IMPLEMENT_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_ASN1_METHOD *,
    const EVP_PKEY_ASN1_METHOD *, ameth);
@


1.14
log
@The bell tolls for BUF_strdup - Start the migration to using
intrinsics. This is the easy ones, a few left to check one at
a time.
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ameth_lib.c,v 1.13 2014/07/11 13:41:59 miod Exp $ */
d77 2
d101 4
d106 5
a110 1
	&cmac_asn1_meth
@


1.13
log
@More memory leaks and unchecked allocations; OpenSSL PR #3403 via OpenSSL
trunk. (note we had already fixed some of the issues in that PR independently)
@
text
@d1 1
a1 1
/* $OpenBSD: ameth_lib.c,v 1.12 2014/07/11 08:44:47 jsing Exp $ */
d297 1
a297 1
		ameth->info = BUF_strdup(info);
d304 1
a304 1
		ameth->pem_str = BUF_strdup(pem_str);
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ameth_lib.c,v 1.11 2014/07/10 22:45:56 jsing Exp $ */
d245 1
d250 5
a254 1
	return EVP_PKEY_asn1_add0(ameth);
@


1.11
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: ameth_lib.c,v 1.10 2014/07/10 13:58:22 jsing Exp $ */
a63 1
#include "cryptlib.h"
d66 1
d70 1
@


1.10
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ameth_lib.c,v 1.9 2014/06/22 13:17:08 deraadt Exp $ */
d61 2
@


1.9
log
@nuke unused test programs; ok jsing
@
text
@d1 1
a1 1
/* $OpenBSD: ameth_lib.c,v 1.8 2014/06/12 15:49:27 deraadt Exp $ */
d60 2
@


1.8
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a100 13

#ifdef TEST
void
main()
{
	int i;
	for (i = 0;
	    i < sizeof(standard_methods) / sizeof(EVP_PKEY_ASN1_METHOD *); i++)
		fprintf(stderr, "Number %d id=%d (%s)\n", i,
		    standard_methods[i]->pkey_id,
		    OBJ_nid2sn(standard_methods[i]->pkey_id));
}
#endif
@


1.7
log
@no need for null check before free. from Brendan MacDonell
@
text
@d1 1
@


1.6
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d383 2
a384 4
		if (ameth->pem_str)
			free(ameth->pem_str);
		if (ameth->info)
			free(ameth->info);
@


1.5
log
@More KNF.
@
text
@d290 1
a290 1
	ameth = malloc(sizeof(EVP_PKEY_ASN1_METHOD));
a292 2

	memset(ameth, 0, sizeof(EVP_PKEY_ASN1_METHOD));
@


1.4
log
@lob a few more knf grenades in here to soften things up.
@
text
@d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d75 1
a75 2
static const EVP_PKEY_ASN1_METHOD *standard_methods[] = 
{
a100 2


d102 2
a103 1
void main()
d107 1
a107 2
		i < sizeof(standard_methods)/sizeof(EVP_PKEY_ASN1_METHOD *);
		i++)
d109 2
a110 2
			standard_methods[i]->pkey_id,
			OBJ_nid2sn(standard_methods[i]->pkey_id));
d115 1
a115 1
			   const EVP_PKEY_ASN1_METHOD *, ameth);
d117 3
a119 2
static int ameth_cmp(const EVP_PKEY_ASN1_METHOD * const *a,
		     const EVP_PKEY_ASN1_METHOD * const *b)
d121 1
a121 1
        return ((*a)->pkey_id - (*b)->pkey_id);
d125 1
a125 1
			     const EVP_PKEY_ASN1_METHOD *, ameth);
d127 2
a128 1
int EVP_PKEY_asn1_get_count(void)
d130 1
a130 1
	int num = sizeof(standard_methods)/sizeof(EVP_PKEY_ASN1_METHOD *);
d136 2
a137 1
const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_get0(int idx)
d139 1
a139 1
	int num = sizeof(standard_methods)/sizeof(EVP_PKEY_ASN1_METHOD *);
d141 1
a141 1
		return NULL; 
d148 2
a149 1
static const EVP_PKEY_ASN1_METHOD *pkey_asn1_find(int type)
d161 1
a161 2
			  sizeof(standard_methods)
			  /sizeof(EVP_PKEY_ASN1_METHOD *));
d169 1
a169 1
 * to the engine implementing 'type' or NULL if no engine implements 
d173 2
a174 1
const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find(ENGINE **pe, int type)
d199 2
a200 2
const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find_str(ENGINE **pe,
					const char *str, int len)
d227 2
a228 2
		if (((int)strlen(ameth->pem_str) == len) && 
			!strncasecmp(ameth->pem_str, str, len))
d234 2
a235 1
int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)
d248 2
a249 1
int EVP_PKEY_asn1_add_alias(int to, int from)
d259 4
a262 3
int EVP_PKEY_asn1_get0_info(int *ppkey_id, int *ppkey_base_id, int *ppkey_flags,
				const char **pinfo, const char **ppem_str,
					const EVP_PKEY_ASN1_METHOD *ameth)
d279 2
a280 1
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_get0_asn1(EVP_PKEY *pkey)
d285 2
a286 2
EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_new(int id, int flags,
					const char *pem_str, const char *info)
d289 1
d304 1
a304 2
	}
	else
d311 1
a311 2
	}
	else
d344 1
a344 2
	err:

a346 1

d349 2
a350 2
void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst, 
			const EVP_PKEY_ASN1_METHOD *src)
a351 1

a378 1

d381 2
a382 1
void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth)
d393 9
a401 8
void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,
		int (*pub_decode)(EVP_PKEY *pk, X509_PUBKEY *pub),
		int (*pub_encode)(X509_PUBKEY *pub, const EVP_PKEY *pk),
		int (*pub_cmp)(const EVP_PKEY *a, const EVP_PKEY *b),
		int (*pub_print)(BIO *out, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *pctx),
		int (*pkey_size)(const EVP_PKEY *pk),
		int (*pkey_bits)(const EVP_PKEY *pk))
d411 6
a416 5
void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,
		int (*priv_decode)(EVP_PKEY *pk, PKCS8_PRIV_KEY_INFO *p8inf),
		int (*priv_encode)(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk),
		int (*priv_print)(BIO *out, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *pctx))
d423 9
a431 9
void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,
		int (*param_decode)(EVP_PKEY *pkey,
				const unsigned char **pder, int derlen),
		int (*param_encode)(const EVP_PKEY *pkey, unsigned char **pder),
		int (*param_missing)(const EVP_PKEY *pk),
		int (*param_copy)(EVP_PKEY *to, const EVP_PKEY *from),
		int (*param_cmp)(const EVP_PKEY *a, const EVP_PKEY *b),
		int (*param_print)(BIO *out, const EVP_PKEY *pkey, int indent,
							ASN1_PCTX *pctx))
d441 3
a443 2
void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth,
		void (*pkey_free)(EVP_PKEY *pkey))
d448 3
a450 3
void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth,
		int (*pkey_ctrl)(EVP_PKEY *pkey, int op,
							long arg1, void *arg2))
@


1.3
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d153 1
a153 2
	if (app_methods)
	{
d177 1
a177 2
	for (;;)
	{
d183 1
a183 2
	if (pe)
	{
d188 1
a188 2
		if (e)
		{
d205 1
a205 2
	if (pe)
	{
d209 1
a209 2
		if (ameth)
		{
d222 1
a222 2
	for (i = 0; i < EVP_PKEY_asn1_get_count(); i++)
	{
d235 1
a235 2
	if (app_methods == NULL)
	{
d294 1
a294 2
	if (info)
	{
d302 1
a302 2
	if (pem_str)
	{
d383 1
a383 2
	if (ameth && (ameth->pkey_flags & ASN1_PKEY_DYNAMIC))
	{
@


1.2
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d76 1
a76 1
	{
d96 1
a96 1
	};
d106 1
a106 1
	{
d114 1
a114 1
	}
d122 1
a122 1
	{
d124 1
a124 1
	}
d130 1
a130 1
	{
d135 1
a135 1
	}
d138 1
a138 1
	{
d146 1
a146 1
	}
d149 1
a149 1
	{
d154 1
a154 1
		{
d159 1
a159 1
		}
d166 1
a166 1
	}
d175 1
a175 1
	{
d179 1
a179 1
		{
d184 1
a184 1
		}
d186 1
a186 1
		{
d192 1
a192 1
			{
d195 1
a195 1
			}
d198 1
a198 1
		}
d200 1
a200 1
	}
d204 1
a204 1
	{
d210 1
a210 1
		{
d215 1
a215 1
			{
d224 1
a224 1
			}
d227 1
a227 1
		}
d229 1
a229 1
		{
d236 1
a236 1
		}
d238 1
a238 1
	}
d241 2
a243 2
	if (app_methods == NULL)
		{
d247 1
a247 1
		}
d252 1
a252 1
	}
d255 1
a255 1
	{
d262 1
a262 1
	}
d267 1
a267 1
	{
d281 1
a281 1
	}
d284 1
a284 1
	{
d286 1
a286 1
	}
d290 1
a290 1
	{
d303 1
a303 1
		{
d307 1
a307 1
		}
d312 1
a312 1
		{
d316 1
a316 1
		}
d355 1
a355 1
	}
d359 1
a359 1
	{
d389 1
a389 1
	}
d392 2
a394 2
	if (ameth && (ameth->pkey_flags & ASN1_PKEY_DYNAMIC))
		{
a399 1
		}
d401 1
d411 1
a411 1
	{
d418 1
a418 1
	}
d425 1
a425 1
	{
d429 1
a429 1
	}
d440 1
a440 1
	{
d447 1
a447 1
	}
d451 1
a451 1
	{
d453 1
a453 1
	}
d458 1
a458 1
	{
d460 1
a460 1
	}
@


1.1
log
@Initial revision
@
text
@d72 1
d94 2
a95 1
	&hmac_asn1_meth
a176 1
	ENGINE *e;
d188 1
d292 1
a292 1
	ameth = OPENSSL_malloc(sizeof(EVP_PKEY_ASN1_METHOD));
d296 2
d308 2
d317 2
d332 3
d386 3
d396 1
a396 1
			OPENSSL_free(ameth->pem_str);
d398 2
a399 2
			OPENSSL_free(ameth->info);
		OPENSSL_free(ameth);
@


1.1.1.1
log
@import of OpenSSL 0.9.8k
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@a303 2
	else
		ameth->info = NULL;
a310 2
	else
		ameth->pem_str = NULL;
@


1.1.1.3
log
@import OpenSSL 1.0.0e
@
text
@d175 1
a186 1
		ENGINE *e;
@


1.1.1.4
log
@import OpenSSL-1.0.1c
@
text
@a71 1
extern const EVP_PKEY_ASN1_METHOD cmac_asn1_meth;
d93 1
a93 2
	&hmac_asn1_meth,
	&cmac_asn1_meth
a293 2
	memset(ameth, 0, sizeof(EVP_PKEY_ASN1_METHOD));

a327 3
	ameth->item_verify = 0;
	ameth->item_sign = 0;

a377 3

	dst->item_sign = src->item_sign;
	dst->item_verify = src->item_verify;
@


