head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.6
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17;
locks; strict;
comment	@ * @;


1.17
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.16;
commitid	kT0fLt3r4lroFJra;

1.16
date	2016.03.11.07.08.44;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	MTdM7aVFdRMAzAYE;

1.15
date	2015.02.10.11.22.21;	author jsing;	state Exp;
branches;
next	1.14;
commitid	LaAI4ax0sm4T2bQg;

1.14
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.13;
commitid	yQEL1wOWIearrW15;

1.13
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	mJUVYpkFBZ0Zv2bG;

1.12
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.13;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.51;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.35;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.51;	author markus;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: x_info.c,v 1.16 2016/03/11 07:08:44 mmcc Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/x509.h>

X509_INFO *
X509_INFO_new(void)
{
	X509_INFO *ret = NULL;

	ret = malloc(sizeof(X509_INFO));
	if (ret == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return (NULL);
	}

	ret->enc_cipher.cipher = NULL;
	ret->enc_len = 0;
	ret->enc_data = NULL;

	ret->references = 1;
	ret->x509 = NULL;
	ret->crl = NULL;
	ret->x_pkey = NULL;
	return (ret);
}

void
X509_INFO_free(X509_INFO *x)
{
	int i;

	if (x == NULL)
		return;

	i = CRYPTO_add(&x->references, -1, CRYPTO_LOCK_X509_INFO);
	if (i > 0)
		return;

	X509_free(x->x509);
	if (x->crl != NULL)
		X509_CRL_free(x->crl);
	if (x->x_pkey != NULL)
		X509_PKEY_free(x->x_pkey);
	free(x->enc_data);
	free(x);
}
@


1.16
log
@X509_free(3) is NULL-safe, so remove NULL checks before its calls.

ok doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_info.c,v 1.15 2015/02/10 11:22:21 jsing Exp $ */
d73 1
a73 1
		ASN1err(ASN1_F_X509_INFO_NEW, ERR_R_MALLOC_FAILURE);
@


1.15
log
@Remove more IMPLEMENT_STACK_OF noops that have been hiding for the last
15 years.
@
text
@d1 1
a1 1
/* $OpenBSD: x_info.c,v 1.14 2014/07/11 08:44:47 jsing Exp $ */
d100 1
a100 2
	if (x->x509 != NULL)
		X509_free(x->x509);
@


1.14
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_info.c,v 1.13 2014/06/12 15:49:27 deraadt Exp $ */
a108 2

IMPLEMENT_STACK_OF(X509_INFO)
@


1.13
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
a62 1
#include "cryptlib.h"
a63 1
#include <openssl/asn1.h>
@


1.12
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/x_info.c */
@


1.11
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d105 1
a105 2
	if (x->enc_data != NULL)
		free(x->enc_data);
@


1.10
log
@More KNF.
@
text
@d70 1
a70 1
	ret = (X509_INFO *)malloc(sizeof(X509_INFO));
@


1.9
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d65 2
a66 1
X509_INFO *X509_INFO_new(void)
d68 1
a68 1
	X509_INFO *ret=NULL;
d70 1
a70 1
	ret=(X509_INFO *)malloc(sizeof(X509_INFO));
d72 2
a73 2
		ASN1err(ASN1_F_X509_INFO_NEW,ERR_R_MALLOC_FAILURE);
		return(NULL);
d75 10
a84 10
 
        ret->enc_cipher.cipher=NULL;
        ret->enc_len=0;
        ret->enc_data=NULL;
 
	ret->references=1;
	ret->x509=NULL;
	ret->crl=NULL;
	ret->x_pkey=NULL;
	return(ret);
d87 2
a88 1
void X509_INFO_free(X509_INFO *x)
d92 2
a93 4
	if (x == NULL) return;

	i=CRYPTO_add(&x->references,-1,CRYPTO_LOCK_X509_INFO);
	if (i > 0) return;
d95 12
a106 4
	if (x->x509 != NULL) X509_free(x->x509);
	if (x->crl != NULL) X509_CRL_free(x->crl);
	if (x->x_pkey != NULL) X509_PKEY_free(x->x_pkey);
	if (x->enc_data != NULL) free(x->enc_data);
a110 1

@


1.8
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d70 1
a70 2
	if (ret == NULL)
	{
@


1.7
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d66 1
a66 1
	{
d71 1
a71 1
		{
d74 1
a74 1
		}
d85 1
a85 1
	}
d88 1
a88 1
	{
d101 1
a101 1
	}
@


1.6
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a93 3
#ifdef REF_PRINT
	REF_PRINT("X509_INFO",x);
#endif
a94 7
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"X509_INFO_free, bad reference count\n");
		abort();
		}
#endif
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d69 1
a69 1
	ret=(X509_INFO *)OPENSSL_malloc(sizeof(X509_INFO));
d109 2
a110 2
	if (x->enc_data != NULL) OPENSSL_free(x->enc_data);
	OPENSSL_free(x);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d62 1
a62 1
#include <openssl/asn1_mac.h>
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d69 1
a69 1
	ret=(X509_INFO *)Malloc(sizeof(X509_INFO));
d109 2
a110 2
	if (x->enc_data != NULL) Free(x->enc_data);
	Free(x);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d109 2
a110 1
	Free((char *)x);
@


1.1
log
@Initial revision
@
text
@d61 3
a63 3
#include "evp.h"
#include "asn1_mac.h"
#include "x509.h"
d65 1
a65 1
X509_INFO *X509_INFO_new()
d87 1
a87 2
void X509_INFO_free(x)
X509_INFO *x;
d111 3
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 3
a63 3
#include <openssl/evp.h>
#include <openssl/asn1.h>
#include <openssl/x509.h>
d65 1
a65 1
X509_INFO *X509_INFO_new(void)
d69 1
a69 1
	ret=(X509_INFO *)OPENSSL_malloc(sizeof(X509_INFO));
d87 2
a88 1
void X509_INFO_free(X509_INFO *x)
d110 1
a110 2
	if (x->enc_data != NULL) OPENSSL_free(x->enc_data);
	OPENSSL_free(x);
a111 3

IMPLEMENT_STACK_OF(X509_INFO)

@

