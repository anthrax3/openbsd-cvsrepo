head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.11;
commitid	kT0fLt3r4lroFJra;

1.11
date	2015.07.25.17.07.17;	author jsing;	state Exp;
branches;
next	1.10;
commitid	KRFNs8F3Al0jO8lT;

1.10
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.12.15.48;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.17.21.32.37;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.50;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: tasn_utl.c,v 1.11 2015/07/25 17:07:17 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000-2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stddef.h>
#include <string.h>
#include <openssl/asn1.h>
#include <openssl/asn1t.h>
#include <openssl/objects.h>
#include <openssl/err.h>

/* Utility functions for manipulating fields and offsets */

/* Add 'offset' to 'addr' */
#define offset2ptr(addr, offset) (void *)(((char *) addr) + offset)

/* Given an ASN1_ITEM CHOICE type return
 * the selector value
 */

int
asn1_get_choice_selector(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	int *sel = offset2ptr(*pval, it->utype);
	return *sel;
}

/* Given an ASN1_ITEM CHOICE type set
 * the selector value, return old value.
 */

int
asn1_set_choice_selector(ASN1_VALUE **pval, int value, const ASN1_ITEM *it)
{
	int *sel, ret;
	sel = offset2ptr(*pval, it->utype);
	ret = *sel;
	*sel = value;
	return ret;
}

/* Do reference counting. The value 'op' decides what to do.
 * if it is +1 then the count is incremented. If op is 0 count is
 * set to 1. If op is -1 count is decremented and the return value
 * is the current refrence count or 0 if no reference count exists.
 */

int
asn1_do_lock(ASN1_VALUE **pval, int op, const ASN1_ITEM *it)
{
	const ASN1_AUX *aux;
	int *lck, ret;

	if ((it->itype != ASN1_ITYPE_SEQUENCE) &&
	    (it->itype != ASN1_ITYPE_NDEF_SEQUENCE))
		return 0;
	aux = it->funcs;
	if (!aux || !(aux->flags & ASN1_AFLG_REFCOUNT))
		return 0;
	lck = offset2ptr(*pval, aux->ref_offset);
	if (op == 0) {
		*lck = 1;
		return 1;
	}
	ret = CRYPTO_add(lck, op, aux->ref_lock);
	return ret;
}

static ASN1_ENCODING *
asn1_get_enc_ptr(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	const ASN1_AUX *aux;

	if (!pval || !*pval)
		return NULL;
	aux = it->funcs;
	if (!aux || !(aux->flags & ASN1_AFLG_ENCODING))
		return NULL;
	return offset2ptr(*pval, aux->enc_offset);
}

void
asn1_enc_init(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	ASN1_ENCODING *enc;

	enc = asn1_get_enc_ptr(pval, it);
	if (enc) {
		enc->enc = NULL;
		enc->len = 0;
		enc->modified = 1;
	}
}

void
asn1_enc_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	ASN1_ENCODING *enc;

	enc = asn1_get_enc_ptr(pval, it);
	if (enc) {
		free(enc->enc);
		enc->enc = NULL;
		enc->len = 0;
		enc->modified = 1;
	}
}

int
asn1_enc_save(ASN1_VALUE **pval, const unsigned char *in, int inlen,
    const ASN1_ITEM *it)
{
	ASN1_ENCODING *enc;

	enc = asn1_get_enc_ptr(pval, it);
	if (!enc)
		return 1;

	free(enc->enc);
	enc->enc = malloc(inlen);
	if (!enc->enc)
		return 0;
	memcpy(enc->enc, in, inlen);
	enc->len = inlen;
	enc->modified = 0;

	return 1;
}

int
asn1_enc_restore(int *len, unsigned char **out, ASN1_VALUE **pval,
    const ASN1_ITEM *it)
{
	ASN1_ENCODING *enc;

	enc = asn1_get_enc_ptr(pval, it);
	if (!enc || enc->modified)
		return 0;
	if (out) {
		memcpy(*out, enc->enc, enc->len);
		*out += enc->len;
	}
	if (len)
		*len = enc->len;
	return 1;
}

/* Given an ASN1_TEMPLATE get a pointer to a field */
ASN1_VALUE **
asn1_get_field_ptr(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)
{
	ASN1_VALUE **pvaltmp;

	if (tt->flags & ASN1_TFLG_COMBINE)
		return pval;
	pvaltmp = offset2ptr(*pval, tt->offset);
	/* NOTE for BOOLEAN types the field is just a plain
 	 * int so we can't return int **, so settle for
	 * (int *).
	 */
	return pvaltmp;
}

/* Handle ANY DEFINED BY template, find the selector, look up
 * the relevant ASN1_TEMPLATE in the table and return it.
 */

const ASN1_TEMPLATE *
asn1_do_adb(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt, int nullerr)
{
	const ASN1_ADB *adb;
	const ASN1_ADB_TABLE *atbl;
	long selector;
	ASN1_VALUE **sfld;
	int i;

	if (!(tt->flags & ASN1_TFLG_ADB_MASK))
		return tt;

	/* Else ANY DEFINED BY ... get the table */
	adb = (const ASN1_ADB *)tt->item;

	/* Get the selector field */
	sfld = offset2ptr(*pval, adb->offset);

	/* Check if NULL */
	if (!sfld) {
		if (!adb->null_tt)
			goto err;
		return adb->null_tt;
	}

	/* Convert type to a long:
	 * NB: don't check for NID_undef here because it
	 * might be a legitimate value in the table
	 */
	if (tt->flags & ASN1_TFLG_ADB_OID)
		selector = OBJ_obj2nid((ASN1_OBJECT *)*sfld);
	else
		selector = ASN1_INTEGER_get((ASN1_INTEGER *)*sfld);

	/* Try to find matching entry in table
	 * Maybe should check application types first to
	 * allow application override? Might also be useful
	 * to have a flag which indicates table is sorted and
	 * we can do a binary search. For now stick to a
	 * linear search.
	 */

	for (atbl = adb->tbl, i = 0; i < adb->tblcount; i++, atbl++)
		if (atbl->value == selector)
			return &atbl->tt;

	/* FIXME: need to search application table too */

	/* No match, return default type */
	if (!adb->default_tt)
		goto err;
	return adb->default_tt;

err:
	/* FIXME: should log the value or OID of unsupported type */
	if (nullerr)
		ASN1error(ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE);
	return NULL;
}
@


1.11
log
@Manually expand ASN.1 template macros - only change in generated assembly
is due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_utl.c,v 1.10 2014/06/12 15:49:27 deraadt Exp $ */
d278 1
a278 2
		ASN1err(ASN1_F_ASN1_DO_ADB,
		    ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE);
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d235 1
a235 1
	adb = ASN1_ADB_ptr(tt->item);
@


1.9
log
@no need for null check before free. from Brendan MacDonell
@
text
@d1 1
a1 1
/* tasn_utl.c */
@


1.8
log
@More KNF.
@
text
@d156 1
a156 2
		if (enc->enc)
			free(enc->enc);
d173 1
a173 2
	if (enc->enc)
		free(enc->enc);
@


1.7
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
a58 1

d75 2
a76 1
int asn1_get_choice_selector(ASN1_VALUE **pval, const ASN1_ITEM *it)
d86 3
a88 2
int asn1_set_choice_selector(ASN1_VALUE **pval, int value, const ASN1_ITEM *it)
{	
d96 1
a96 1
/* Do reference counting. The value 'op' decides what to do. 
d102 2
a103 1
int asn1_do_lock(ASN1_VALUE **pval, int op, const ASN1_ITEM *it)
d107 3
a109 2
	if ((it->itype != ASN1_ITYPE_SEQUENCE)
	   && (it->itype != ASN1_ITYPE_NDEF_SEQUENCE))
d123 2
a124 1
static ASN1_ENCODING *asn1_get_enc_ptr(ASN1_VALUE **pval, const ASN1_ITEM *it)
d127 1
d136 2
a137 1
void asn1_enc_init(ASN1_VALUE **pval, const ASN1_ITEM *it)
d140 1
d149 2
a150 1
void asn1_enc_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
d153 1
d164 3
a166 2
int asn1_enc_save(ASN1_VALUE **pval, const unsigned char *in, int inlen,
							 const ASN1_ITEM *it)
d169 1
d185 4
a188 3
		
int asn1_enc_restore(int *len, unsigned char **out, ASN1_VALUE **pval,
							const ASN1_ITEM *it)
d191 1
d205 2
a206 1
ASN1_VALUE ** asn1_get_field_ptr(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)
d209 1
d224 2
a225 2
const ASN1_TEMPLATE *asn1_do_adb(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt,
								int nullerr)
d232 1
d253 1
a253 1
	if (tt->flags & ASN1_TFLG_ADB_OID) 
d255 1
a255 1
	else 
d274 1
a274 1
		goto err;		
d276 2
a277 2
	
	err:
d281 1
a281 1
			ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE);
@


1.6
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d112 1
a112 2
	if (op == 0)
	{
d135 1
a135 2
	if (enc)
	{
d146 1
a146 2
	if (enc)
	{
d182 1
a182 2
	if (out)
	{
d227 1
a227 2
	if (!sfld)
	{
@


1.5
log
@kill REF_PRINT/REF_CHECK debugging framework noone would use
ok miod
@
text
@d77 1
a77 1
	{
d80 1
a80 1
	}
d87 1
a87 1
	{	
d93 1
a93 1
	}
d102 1
a102 1
	{
d113 1
a113 1
		{
d116 1
a116 1
		}
d119 1
a119 1
	}
d122 1
a122 1
	{
d130 1
a130 1
	}
d133 1
a133 1
	{
d137 1
a137 1
		{
a140 1
		}
d142 1
d145 1
a145 1
	{
d149 1
a149 1
		{
a154 1
		}
d156 1
d160 1
a160 1
	{
d176 1
a176 1
	}
d180 1
a180 1
	{
d186 1
a186 1
		{
d189 1
a189 1
		}
d193 1
a193 1
	}
d197 1
a197 1
	{
d207 1
a207 1
	}
d215 1
a215 1
	{
d232 1
a232 1
		{
d236 1
a236 1
		}
d272 1
a272 1
	}
@


1.4
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@a117 7
#ifdef REF_PRINT
	fprintf(stderr, "%s: Reference Count: %d\n", it->sname, *lck);
#endif
#ifdef REF_CHECK
	if (ret < 0) 
		fprintf(stderr, "%s, bad reference count\n", it->sname);
#endif
@


1.3
log
@resolve conflicts
@
text
@d158 1
a158 1
			OPENSSL_free(enc->enc);
d174 2
a175 2
		OPENSSL_free(enc->enc);
	enc->enc = OPENSSL_malloc(inlen);
@


1.2
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d6 1
a6 1
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
d77 1
a77 1
{
d80 1
a80 1
}
d87 1
a87 1
{	
d93 1
a93 1
}
d102 1
a102 1
{
d105 3
a107 1
	if(it->itype != ASN1_ITYPE_SEQUENCE) return 0;
d109 2
a110 1
	if(!aux || !(aux->flags & ASN1_AFLG_REFCOUNT)) return 0;
d112 2
a113 1
	if(op == 0) {
d116 1
a116 1
	}
d122 1
a122 1
	if(ret < 0) 
d126 1
a126 1
}
d129 1
a129 1
{
d131 2
a132 1
	if(!pval || !*pval) return NULL;
d134 2
a135 1
	if(!aux || !(aux->flags & ASN1_AFLG_ENCODING)) return NULL;
d137 1
a137 1
}
d140 1
a140 1
{
d143 2
a144 1
	if(enc) {
d148 1
a149 1
}
d152 1
a152 1
{
d155 4
a158 2
	if(enc) {
		if(enc->enc) OPENSSL_free(enc->enc);
d162 1
a163 1
}
d165 3
a167 2
int asn1_enc_save(ASN1_VALUE **pval, unsigned char *in, int inlen, const ASN1_ITEM *it)
{
d170 2
a171 1
	if(!enc) return 1;
d173 2
a174 1
	if(enc->enc) OPENSSL_free(enc->enc);
d176 2
a177 1
	if(!enc->enc) return 0;
d183 1
a183 1
}
d185 3
a187 2
int asn1_enc_restore(int *len, unsigned char **out, ASN1_VALUE **pval, const ASN1_ITEM *it)
{
d190 4
a193 2
	if(!enc || enc->modified) return 0;
	if(out) {
d196 4
a200 3
	if(len) *len = enc->len;
	return 1;
}
d204 1
a204 1
{
d206 2
a207 1
	if(tt->flags & ASN1_TFLG_COMBINE) return pval;
d214 1
a214 1
}
d220 3
a222 2
const ASN1_TEMPLATE *asn1_do_adb(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt, int nullerr)
{
d228 2
a229 1
	if(!(tt->flags & ASN1_TFLG_ADB_MASK)) return tt;
d238 4
a241 2
	if(!sfld) {
		if(!adb->null_tt) goto err;
d243 1
a243 1
	}
d249 1
a249 1
	if(tt->flags & ASN1_TFLG_ADB_OID) 
d262 3
a264 2
	for(atbl = adb->tbl, i = 0; i < adb->tblcount; i++, atbl++)
		if(atbl->value == selector) return &atbl->tt;
d269 2
a270 1
	if(!adb->default_tt) goto err;		
d275 3
a277 1
	if(nullerr) ASN1err(ASN1_F_ASN1_DO_ADB, ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE);
d279 1
a279 1
}
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d6 1
a6 1
 * Copyright (c) 2000-2004 The OpenSSL Project.  All rights reserved.
d77 1
a77 1
	{
d80 1
a80 1
	}
d87 1
a87 1
	{	
d93 1
a93 1
	}
d102 1
a102 1
	{
d105 1
a105 3
	if ((it->itype != ASN1_ITYPE_SEQUENCE)
	   && (it->itype != ASN1_ITYPE_NDEF_SEQUENCE))
		return 0;
d107 1
a107 2
	if (!aux || !(aux->flags & ASN1_AFLG_REFCOUNT))
		return 0;
d109 1
a109 2
	if (op == 0)
		{
d112 1
a112 1
		}
d118 1
a118 1
	if (ret < 0) 
d122 1
a122 1
	}
d125 1
a125 1
	{
d127 1
a127 2
	if (!pval || !*pval)
		return NULL;
d129 1
a129 2
	if (!aux || !(aux->flags & ASN1_AFLG_ENCODING))
		return NULL;
d131 1
a131 1
	}
d134 1
a134 1
	{
d137 1
a137 2
	if (enc)
		{
a140 1
		}
d142 1
d145 1
a145 1
	{
d148 2
a149 4
	if (enc)
		{
		if (enc->enc)
			OPENSSL_free(enc->enc);
a152 1
		}
d154 1
d156 2
a157 3
int asn1_enc_save(ASN1_VALUE **pval, const unsigned char *in, int inlen,
							 const ASN1_ITEM *it)
	{
d160 1
a160 2
	if (!enc)
		return 1;
d162 1
a162 2
	if (enc->enc)
		OPENSSL_free(enc->enc);
d164 1
a164 2
	if (!enc->enc)
		return 0;
d170 1
a170 1
	}
d172 2
a173 3
int asn1_enc_restore(int *len, unsigned char **out, ASN1_VALUE **pval,
							const ASN1_ITEM *it)
	{
d176 2
a177 4
	if (!enc || enc->modified)
		return 0;
	if (out)
		{
d180 2
a181 3
		}
	if (len)
		*len = enc->len;
d183 1
a183 1
	}
d187 1
a187 1
	{
d189 1
a189 2
	if (tt->flags & ASN1_TFLG_COMBINE)
		return pval;
d196 1
a196 1
	}
d202 2
a203 3
const ASN1_TEMPLATE *asn1_do_adb(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt,
								int nullerr)
	{
d209 1
a209 2
	if (!(tt->flags & ASN1_TFLG_ADB_MASK))
		return tt;
d218 2
a219 4
	if (!sfld)
		{
		if (!adb->null_tt)
			goto err;
d221 1
a221 1
		}
d227 1
a227 1
	if (tt->flags & ASN1_TFLG_ADB_OID) 
d240 2
a241 3
	for (atbl = adb->tbl, i = 0; i < adb->tblcount; i++, atbl++)
		if (atbl->value == selector)
			return &atbl->tt;
d246 1
a246 2
	if (!adb->default_tt)
		goto err;		
d251 1
a251 3
	if (nullerr)
		ASN1err(ASN1_F_ASN1_DO_ADB,
			ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE);
d253 1
a253 1
	}
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


