head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.6
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.7;
commitid	yQEL1wOWIearrW15;

1.7
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	mJUVYpkFBZ0Zv2bG;

1.6
date	2014.05.20.01.21.52;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.19.13.29.11;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.06;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.40;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.28;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.47;	author markus;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@/* $OpenBSD: a_utf8.c,v 1.7 2014/06/12 15:49:27 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1.h>

#include "asn1_locl.h"

/* UTF8 utilities */

/*
 * This parses a UTF8 string one character at a time. It is passed a pointer
 * to the string and the length of the string. It sets 'value' to the value of
 * the current character. It returns the number of characters read or a
 * negative error code:
 * -1 = string too short
 * -2 = illegal character
 * -3 = subsequent characters not of the form 10xxxxxx
 * -4 = character encoded incorrectly (not minimal length).
 */

int
UTF8_getc(const unsigned char *str, int len, unsigned long *val)
{
	const unsigned char *p;
	unsigned long value;
	int ret;
	if (len <= 0)
		return 0;
	p = str;

	/* Check syntax and work out the encoded value (if correct) */
	if ((*p & 0x80) == 0) {
		value = *p++ & 0x7f;
		ret = 1;
	} else if ((*p & 0xe0) == 0xc0) {
		if (*p < 0xc2)
			return -2;
		if (len < 2)
			return -1;
		if ((p[1] & 0xc0) != 0x80)
			return -3;
		value = (*p++ & 0x1f) << 6;
		value |= *p++ & 0x3f;
		if (value < 0x80)
			return -4;
		ret = 2;
	} else if ((*p & 0xf0) == 0xe0) {
		if (len < 3)
			return -1;
		if (((p[1] & 0xc0) != 0x80) ||
		    ((p[2] & 0xc0) != 0x80))
			return -3;
		value = (*p++ & 0xf) << 12;
		value |= (*p++ & 0x3f) << 6;
		value |= *p++ & 0x3f;
		if (value < 0x800)
			return -4;
		/* surrogate pair code points are not valid */
		if (value >= 0xd800 && value < 0xe000)
			return -2;
		ret = 3;
	} else if ((*p & 0xf8) == 0xf0 && (*p < 0xf5)) {
		if (len < 4)
			return -1;
		if (((p[1] & 0xc0) != 0x80) ||
		    ((p[2] & 0xc0) != 0x80) ||
		    ((p[3] & 0xc0) != 0x80))
			return -3;
		value = ((unsigned long)(*p++ & 0x7)) << 18;
		value |= (*p++ & 0x3f) << 12;
		value |= (*p++ & 0x3f) << 6;
		value |= *p++ & 0x3f;
		if (value < 0x10000)
			return -4;
		if (value > UNICODE_MAX)
			return -2;
		ret = 4;
	} else
		return -2;
	*val = value;
	return ret;
}

/* This takes a Unicode code point 'value' and writes its UTF-8 encoded form
 * in 'str' where 'str' is a buffer of at least length 'len'.  If 'str'
 * is NULL, then nothing is written and just the return code is determined.

 * Returns less than zero on error:
 *  -1 if 'str' is not NULL and 'len' is too small
 *  -2 if 'value' is an invalid character (surrogate or out-of-range)
 *
 * Otherwise, returns the number of bytes in 'value's encoded form
 * (i.e., the number of bytes written to 'str' when it's not NULL).
 *
 * It will need at most 4 characters.
 */

int
UTF8_putc(unsigned char *str, int len, unsigned long value)
{
	if (value < 0x80) {
		if (str != NULL) {
			if (len < 1)
				return -1;
			str[0] = (unsigned char)value;
		}
		return 1;
	}
	if (value < 0x800) {
		if (str != NULL) {
			if (len < 2)
				return -1;
			str[0] = (unsigned char)(((value >> 6) & 0x1f) | 0xc0);
			str[1] = (unsigned char)((value & 0x3f) | 0x80);
		}
		return 2;
	}
	if (value < 0x10000) {
		if (UNICODE_IS_SURROGATE(value))
			return -2;
		if (str != NULL) {
			if (len < 3)
				return -1;
			str[0] = (unsigned char)(((value >> 12) & 0xf) | 0xe0);
			str[1] = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
			str[2] = (unsigned char)((value & 0x3f) | 0x80);
		}
		return 3;
	}
	if (value <= UNICODE_MAX) {
		if (str != NULL) {
			if (len < 4)
				return -1;
			str[0] = (unsigned char)(((value >> 18) & 0x7) | 0xf0);
			str[1] = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
			str[2] = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
			str[3] = (unsigned char)((value & 0x3f) | 0x80);
		}
		return 4;
	}
	return -2;
}
@


1.7
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
d62 1
a63 1

@


1.6
log
@Bring UTF8_{getc,putc} up-to-date: it's been a decade since 5- and 6-byte
encodings and encoding of surrogate pair code points were banned.  Add
checks for those, both to those functions and to the code decoding the
BMP and UNIV encodings.

ok miod@@
@
text
@d1 1
a1 1
/* crypto/asn1/a_utf8.c */
@


1.5
log
@More KNF.
@
text
@d62 1
d67 2
a68 1
/* This parses a UTF8 string one character at a time. It is passed a pointer
d93 2
d115 3
d119 1
a119 1
	} else if ((*p & 0xf8) == 0xf0) {
d132 2
d135 3
a137 36
	} else if ((*p & 0xfc) == 0xf8) {
		if (len < 5)
			return -1;
		if (((p[1] & 0xc0) != 0x80) ||
		    ((p[2] & 0xc0) != 0x80) ||
		    ((p[3] & 0xc0) != 0x80) ||
		    ((p[4] & 0xc0) != 0x80))
			return -3;
		value = ((unsigned long)(*p++ & 0x3)) << 24;
		value |= ((unsigned long)(*p++ & 0x3f)) << 18;
		value |= ((unsigned long)(*p++ & 0x3f)) << 12;
		value |= (*p++ & 0x3f) << 6;
		value |= *p++ & 0x3f;
		if (value < 0x200000)
			return -4;
		ret = 5;
	} else if ((*p & 0xfe) == 0xfc) {
		if (len < 6)
			return -1;
		if (((p[1] & 0xc0) != 0x80) ||
		    ((p[2] & 0xc0) != 0x80) ||
		    ((p[3] & 0xc0) != 0x80) ||
		    ((p[4] & 0xc0) != 0x80) ||
		    ((p[5] & 0xc0) != 0x80))
			return -3;
		value = ((unsigned long)(*p++ & 0x1)) << 30;
		value |= ((unsigned long)(*p++ & 0x3f)) << 24;
		value |= ((unsigned long)(*p++ & 0x3f)) << 18;
		value |= ((unsigned long)(*p++ & 0x3f)) << 12;
		value |= (*p++ & 0x3f) << 6;
		value |= *p++ & 0x3f;
		if (value < 0x4000000)
			return -4;
		ret = 6;
	} else return -2;
		*val = value;
d141 12
a152 5
/* This takes a character 'value' and writes the UTF8 encoded value in
 * 'str' where 'str' is a buffer containing 'len' characters. Returns
 * the number of characters written or -1 if 'len' is too small. 'str' can
 * be set to NULL in which case it just returns the number of characters.
 * It will need at most 6 characters.
a157 4
	if (!str)
		len = 6;	/* Maximum we will need */
	else if (len <= 0)
		return -1;
d159 5
a163 2
		if (str)
			*str = (unsigned char)value;
d167 5
a171 5
		if (len < 2)
			return -1;
		if (str) {
			*str++ = (unsigned char)(((value >> 6) & 0x1f) | 0xc0);
			*str = (unsigned char)((value & 0x3f) | 0x80);
d176 8
a183 6
		if (len < 3)
			return -1;
		if (str) {
			*str++ = (unsigned char)(((value >> 12) & 0xf) | 0xe0);
			*str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
			*str = (unsigned char)((value & 0x3f) | 0x80);
d187 8
a194 8
	if (value < 0x200000) {
		if (len < 4)
			return -1;
		if (str) {
			*str++ = (unsigned char)(((value >> 18) & 0x7) | 0xf0);
			*str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
			*str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
			*str = (unsigned char)((value & 0x3f) | 0x80);
d198 1
a198 23
	if (value < 0x4000000) {
		if (len < 5)
			return -1;
		if (str) {
			*str++ = (unsigned char)(((value >> 24) & 0x3) | 0xf8);
			*str++ = (unsigned char)(((value >> 18) & 0x3f) | 0x80);
			*str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
			*str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
			*str = (unsigned char)((value & 0x3f) | 0x80);
		}
		return 5;
	}
	if (len < 6)
		return -1;
	if (str) {
		*str++ = (unsigned char)(((value >> 30) & 0x1) | 0xfc);
		*str++ = (unsigned char)(((value >> 24) & 0x3f) | 0x80);
		*str++ = (unsigned char)(((value >> 18) & 0x3f) | 0x80);
		*str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
		*str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
		*str = (unsigned char)((value & 0x3f) | 0x80);
	}
	return 6;
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d76 2
a77 1
int UTF8_getc(const unsigned char *str, int len, unsigned long *val)
d82 2
a83 1
	if(len <= 0) return 0;
d87 1
a87 1
	if((*p & 0x80) == 0) {
d90 5
a94 3
	} else if((*p & 0xe0) == 0xc0) {
		if(len < 2) return -1;
		if((p[1] & 0xc0) != 0x80) return -3;
d97 2
a98 1
		if(value < 0x80) return -4;
d100 6
a105 4
	} else if((*p & 0xf0) == 0xe0) {
		if(len < 3) return -1;
		if( ((p[1] & 0xc0) != 0x80)
		   || ((p[2] & 0xc0) != 0x80) ) return -3;
d109 2
a110 1
		if(value < 0x800) return -4;
d112 7
a118 5
	} else if((*p & 0xf8) == 0xf0) {
		if(len < 4) return -1;
		if( ((p[1] & 0xc0) != 0x80)
		   || ((p[2] & 0xc0) != 0x80) 
		   || ((p[3] & 0xc0) != 0x80) ) return -3;
d123 2
a124 1
		if(value < 0x10000) return -4;
d126 8
a133 6
	} else if((*p & 0xfc) == 0xf8) {
		if(len < 5) return -1;
		if( ((p[1] & 0xc0) != 0x80)
		   || ((p[2] & 0xc0) != 0x80) 
		   || ((p[3] & 0xc0) != 0x80) 
		   || ((p[4] & 0xc0) != 0x80) ) return -3;
d139 2
a140 1
		if(value < 0x200000) return -4;
d142 9
a150 7
	} else if((*p & 0xfe) == 0xfc) {
		if(len < 6) return -1;
		if( ((p[1] & 0xc0) != 0x80)
		   || ((p[2] & 0xc0) != 0x80) 
		   || ((p[3] & 0xc0) != 0x80) 
		   || ((p[4] & 0xc0) != 0x80) 
		   || ((p[5] & 0xc0) != 0x80) ) return -3;
d157 2
a158 1
		if(value < 0x4000000) return -4;
d161 1
a161 1
	*val = value;
d172 2
a173 1
int UTF8_putc(unsigned char *str, int len, unsigned long value)
d175 7
a181 4
	if(!str) len = 6;	/* Maximum we will need */
	else if(len <= 0) return -1;
	if(value < 0x80) {
		if(str) *str = (unsigned char)value;
d184 4
a187 3
	if(value < 0x800) {
		if(len < 2) return -1;
		if(str) {
d193 4
a196 3
	if(value < 0x10000) {
		if(len < 3) return -1;
		if(str) {
d203 4
a206 3
	if(value < 0x200000) {
		if(len < 4) return -1;
		if(str) {
d214 4
a217 3
	if(value < 0x4000000) {
		if(len < 5) return -1;
		if(str) {
d226 3
a228 2
	if(len < 6) return -1;
	if(str) {
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@a62 27
ASN1_UTF8STRING *ASN1_UTF8STRING_new(void)
{ return M_ASN1_UTF8STRING_new();}

void ASN1_UTF8STRING_free(ASN1_UTF8STRING *x)
{ M_ASN1_UTF8STRING_free(x);}

int i2d_ASN1_UTF8STRING(ASN1_UTF8STRING *a, unsigned char **pp)
	{
	return(i2d_ASN1_bytes((ASN1_STRING *)a,pp,
		V_ASN1_UTF8STRING,V_ASN1_UNIVERSAL));
	}

ASN1_UTF8STRING *d2i_ASN1_UTF8STRING(ASN1_UTF8STRING **a, unsigned char **pp,
	     long length)
	{
	ASN1_UTF8STRING *ret=NULL;

	ret=(ASN1_UTF8STRING *)d2i_ASN1_bytes((ASN1_STRING **)a,
		pp,length,V_ASN1_UTF8STRING,V_ASN1_UNIVERSAL);
	if (ret == NULL)
		{
		ASN1err(ASN1_F_D2I_ASN1_UTF8STRING,ERR_R_NESTED_ASN1_ERROR);
		return(NULL);
		}
	return(ret);
	}

@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d136 1
a136 1
		value = (*p++ & 0x7) << 18;
d148 3
a150 3
		value = (*p++ & 0x3) << 24;
		value |= (*p++ & 0x3f) << 18;
		value |= (*p++ & 0x3f) << 12;
d162 4
a165 4
		value = (*p++ & 0x1) << 30;
		value |= (*p++ & 0x3f) << 24;
		value |= (*p++ & 0x3f) << 18;
		value |= (*p++ & 0x3f) << 12;
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d63 6
d90 149
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d63 17
a79 105

/* UTF8 utilities */

/* This parses a UTF8 string one character at a time. It is passed a pointer
 * to the string and the length of the string. It sets 'value' to the value of
 * the current character. It returns the number of characters read or a
 * negative error code:
 * -1 = string too short
 * -2 = illegal character
 * -3 = subsequent characters not of the form 10xxxxxx
 * -4 = character encoded incorrectly (not minimal length).
 */

int UTF8_getc(const unsigned char *str, int len, unsigned long *val)
{
	const unsigned char *p;
	unsigned long value;
	int ret;
	if(len <= 0) return 0;
	p = str;

	/* Check syntax and work out the encoded value (if correct) */
	if((*p & 0x80) == 0) {
		value = *p++ & 0x7f;
		ret = 1;
	} else if((*p & 0xe0) == 0xc0) {
		if(len < 2) return -1;
		if((p[1] & 0xc0) != 0x80) return -3;
		value = (*p++ & 0x1f) << 6;
		value |= *p++ & 0x3f;
		if(value < 0x80) return -4;
		ret = 2;
	} else if((*p & 0xf0) == 0xe0) {
		if(len < 3) return -1;
		if( ((p[1] & 0xc0) != 0x80)
		   || ((p[2] & 0xc0) != 0x80) ) return -3;
		value = (*p++ & 0xf) << 12;
		value |= (*p++ & 0x3f) << 6;
		value |= *p++ & 0x3f;
		if(value < 0x800) return -4;
		ret = 3;
	} else if((*p & 0xf8) == 0xf0) {
		if(len < 4) return -1;
		if( ((p[1] & 0xc0) != 0x80)
		   || ((p[2] & 0xc0) != 0x80) 
		   || ((p[3] & 0xc0) != 0x80) ) return -3;
		value = ((unsigned long)(*p++ & 0x7)) << 18;
		value |= (*p++ & 0x3f) << 12;
		value |= (*p++ & 0x3f) << 6;
		value |= *p++ & 0x3f;
		if(value < 0x10000) return -4;
		ret = 4;
	} else if((*p & 0xfc) == 0xf8) {
		if(len < 5) return -1;
		if( ((p[1] & 0xc0) != 0x80)
		   || ((p[2] & 0xc0) != 0x80) 
		   || ((p[3] & 0xc0) != 0x80) 
		   || ((p[4] & 0xc0) != 0x80) ) return -3;
		value = ((unsigned long)(*p++ & 0x3)) << 24;
		value |= ((unsigned long)(*p++ & 0x3f)) << 18;
		value |= ((unsigned long)(*p++ & 0x3f)) << 12;
		value |= (*p++ & 0x3f) << 6;
		value |= *p++ & 0x3f;
		if(value < 0x200000) return -4;
		ret = 5;
	} else if((*p & 0xfe) == 0xfc) {
		if(len < 6) return -1;
		if( ((p[1] & 0xc0) != 0x80)
		   || ((p[2] & 0xc0) != 0x80) 
		   || ((p[3] & 0xc0) != 0x80) 
		   || ((p[4] & 0xc0) != 0x80) 
		   || ((p[5] & 0xc0) != 0x80) ) return -3;
		value = ((unsigned long)(*p++ & 0x1)) << 30;
		value |= ((unsigned long)(*p++ & 0x3f)) << 24;
		value |= ((unsigned long)(*p++ & 0x3f)) << 18;
		value |= ((unsigned long)(*p++ & 0x3f)) << 12;
		value |= (*p++ & 0x3f) << 6;
		value |= *p++ & 0x3f;
		if(value < 0x4000000) return -4;
		ret = 6;
	} else return -2;
	*val = value;
	return ret;
}

/* This takes a character 'value' and writes the UTF8 encoded value in
 * 'str' where 'str' is a buffer containing 'len' characters. Returns
 * the number of characters written or -1 if 'len' is too small. 'str' can
 * be set to NULL in which case it just returns the number of characters.
 * It will need at most 6 characters.
 */

int UTF8_putc(unsigned char *str, int len, unsigned long value)
{
	if(!str) len = 6;	/* Maximum we will need */
	else if(len <= 0) return -1;
	if(value < 0x80) {
		if(str) *str = (unsigned char)value;
		return 1;
	}
	if(value < 0x800) {
		if(len < 2) return -1;
		if(str) {
			*str++ = (unsigned char)(((value >> 6) & 0x1f) | 0xc0);
			*str = (unsigned char)((value & 0x3f) | 0x80);
d81 1
a81 1
		return 2;
d83 1
a83 41
	if(value < 0x10000) {
		if(len < 3) return -1;
		if(str) {
			*str++ = (unsigned char)(((value >> 12) & 0xf) | 0xe0);
			*str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
			*str = (unsigned char)((value & 0x3f) | 0x80);
		}
		return 3;
	}
	if(value < 0x200000) {
		if(len < 4) return -1;
		if(str) {
			*str++ = (unsigned char)(((value >> 18) & 0x7) | 0xf0);
			*str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
			*str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
			*str = (unsigned char)((value & 0x3f) | 0x80);
		}
		return 4;
	}
	if(value < 0x4000000) {
		if(len < 5) return -1;
		if(str) {
			*str++ = (unsigned char)(((value >> 24) & 0x3) | 0xf8);
			*str++ = (unsigned char)(((value >> 18) & 0x3f) | 0x80);
			*str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
			*str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
			*str = (unsigned char)((value & 0x3f) | 0x80);
		}
		return 5;
	}
	if(len < 6) return -1;
	if(str) {
		*str++ = (unsigned char)(((value >> 30) & 0x1) | 0xfc);
		*str++ = (unsigned char)(((value >> 24) & 0x3f) | 0x80);
		*str++ = (unsigned char)(((value >> 18) & 0x3f) | 0x80);
		*str++ = (unsigned char)(((value >> 12) & 0x3f) | 0x80);
		*str++ = (unsigned char)(((value >> 6) & 0x3f) | 0x80);
		*str = (unsigned char)((value & 0x3f) | 0x80);
	}
	return 6;
}
@


