head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.2
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.31.0.4
	OPENBSD_6_1_BASE:1.31;
locks; strict;
comment	@ * @;


1.31
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.30;
commitid	kT0fLt3r4lroFJra;

1.30
date	2015.09.30.17.30.15;	author jsing;	state Exp;
branches;
next	1.29;
commitid	f3YLBhwPPENmVqqA;

1.29
date	2015.09.30.17.04.09;	author jsing;	state Exp;
branches;
next	1.28;
commitid	obxg0m4Kmr6zrH0n;

1.28
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.27;
commitid	rYgS8cWcS59JYkBV;

1.27
date	2015.07.19.18.29.31;	author miod;	state Exp;
branches;
next	1.26;
commitid	tXLDcP80XKVov5z5;

1.26
date	2015.03.19.14.00.22;	author tedu;	state Exp;
branches;
next	1.25;
commitid	Ix1rLPv61p1TR5LF;

1.25
date	2015.02.10.08.33.10;	author jsing;	state Exp;
branches
	1.25.4.1;
next	1.24;
commitid	v5VD2cgZRaYX8ah1;

1.24
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches
	1.24.4.1;
next	1.23;
commitid	yQEL1wOWIearrW15;

1.23
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.22;
commitid	id8dTrTMtnTn4fqt;

1.22
date	2014.07.10.11.25.13;	author tedu;	state Exp;
branches;
next	1.21;
commitid	Pv7aSK7aYL3NQSpP;

1.21
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	mJUVYpkFBZ0Zv2bG;

1.20
date	2014.05.31.19.05.07;	author miod;	state Exp;
branches;
next	1.19;
commitid	ysDfcjOhJ1HOEJXS;

1.19
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.19.12.51.01;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.07.09.23;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.13.15.25.33;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.05;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.37;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.27;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.45;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;

1.24.4.1
date	2015.03.19.14.02.22;	author tedu;	state Exp;
branches;
next	;
commitid	bYTbbXa7PWk8y7To;

1.25.4.1
date	2015.03.19.14.01.15;	author tedu;	state Exp;
branches;
next	;
commitid	dQgHc1qjfDF6g1rY;


desc
@@


1.31
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_int.c,v 1.30 2015/09/30 17:30:15 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/bn.h>
#include <openssl/err.h>

ASN1_INTEGER *
ASN1_INTEGER_dup(const ASN1_INTEGER *x)
{
	return ASN1_STRING_dup(x);
}

int
ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
{
	int neg, ret;

	/* Compare signs */
	neg = x->type & V_ASN1_NEG;
	if (neg != (y->type & V_ASN1_NEG)) {
		if (neg)
			return -1;
		else
			return 1;
	}

	ret = ASN1_STRING_cmp(x, y);

	if (neg)
		return -ret;
	else
		return ret;
}


/*
 * This converts an ASN1 INTEGER into its content encoding.
 * The internal representation is an ASN1_STRING whose data is a big endian
 * representation of the value, ignoring the sign. The sign is determined by
 * the type: V_ASN1_INTEGER for positive and V_ASN1_NEG_INTEGER for negative.
 *
 * Positive integers are no problem: they are almost the same as the DER
 * encoding, except if the first byte is >= 0x80 we need to add a zero pad.
 *
 * Negative integers are a bit trickier...
 * The DER representation of negative integers is in 2s complement form.
 * The internal form is converted by complementing each octet and finally
 * adding one to the result. This can be done less messily with a little trick.
 * If the internal form has trailing zeroes then they will become FF by the
 * complement and 0 by the add one (due to carry) so just copy as many trailing
 * zeros to the destination as there are in the source. The carry will add one
 * to the last none zero octet: so complement this octet and add one and finally
 * complement any left over until you get to the start of the string.
 *
 * Padding is a little trickier too. If the first bytes is > 0x80 then we pad
 * with 0xff. However if the first byte is 0x80 and one of the following bytes
 * is non-zero we pad with 0xff. The reason for this distinction is that 0x80
 * followed by optional zeros isn't padded.
 */

int
i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp)
{
	int pad = 0, ret, i, neg;
	unsigned char *p, *n, pb = 0;

	if (a == NULL)
		return (0);
	neg = a->type & V_ASN1_NEG;
	if (a->length == 0)
		ret = 1;
	else {
		ret = a->length;
		i = a->data[0];
		if (!neg && (i > 127)) {
			pad = 1;
			pb = 0;
		} else if (neg) {
			if (i > 128) {
				pad = 1;
				pb = 0xFF;
			} else if (i == 128) {
				/*
				 * Special case: if any other bytes non zero we pad:
				 * otherwise we don't.
				 */
				for (i = 1; i < a->length; i++) if (a->data[i]) {
					pad = 1;
					pb = 0xFF;
					break;
				}
			}
		}
		ret += pad;
	}
	if (pp == NULL)
		return (ret);
	p= *pp;

	if (pad)
		*(p++) = pb;
	if (a->length == 0)
		*(p++) = 0;
	else if (!neg)
		memcpy(p, a->data, a->length);
	else {
		/* Begin at the end of the encoding */
		n = a->data + a->length - 1;
		p += a->length - 1;
		i = a->length;
		/* Copy zeros to destination as long as source is zero */
		while (!*n) {
			*(p--) = 0;
			n--;
			i--;
		}
		/* Complement and increment next octet */
		*(p--) = ((*(n--)) ^ 0xff) + 1;
		i--;
		/* Complement any octets left */
		for (; i > 0; i--)
			*(p--) = *(n--) ^ 0xff;
	}

	*pp += ret;
	return (ret);
}

/* Convert just ASN1 INTEGER content octets to ASN1_INTEGER structure */

ASN1_INTEGER *
c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **pp, long len)
{
	ASN1_INTEGER *ret = NULL;
	const unsigned char *p, *pend;
	unsigned char *to, *s;
	int i;

	if ((a == NULL) || ((*a) == NULL)) {
		if ((ret = ASN1_INTEGER_new()) == NULL)
			return (NULL);
	} else
		ret = (*a);

	p = *pp;
	pend = p + len;

	/* We must malloc stuff, even for 0 bytes otherwise it
	 * signifies a missing NULL parameter. */
	s = malloc(len + 1);
	if (s == NULL) {
		i = ERR_R_MALLOC_FAILURE;
		goto err;
	}
	to = s;
	if (!len) {
		/* Strictly speaking this is an illegal INTEGER but we
		 * tolerate it.
		 */
		ret->type = V_ASN1_INTEGER;
	} else if (*p & 0x80) /* a negative number */ {
		ret->type = V_ASN1_NEG_INTEGER;
		if ((*p == 0xff) && (len != 1)) {
			p++;
			len--;
		}
		i = len;
		p += i - 1;
		to += i - 1;
		while((!*p) && i) {
			*(to--) = 0;
			i--;
			p--;
		}
		/* Special case: if all zeros then the number will be of
		 * the form FF followed by n zero bytes: this corresponds to
		 * 1 followed by n zero bytes. We've already written n zeros
		 * so we just append an extra one and set the first byte to
		 * a 1. This is treated separately because it is the only case
		 * where the number of bytes is larger than len.
		 */
		if (!i) {
			*s = 1;
			s[len] = 0;
			len++;
		} else {
			*(to--) = (*(p--) ^ 0xff) + 1;
			i--;
			for (; i > 0; i--)
				*(to--) = *(p--) ^ 0xff;
		}
	} else {
		ret->type = V_ASN1_INTEGER;
		if ((*p == 0) && (len != 1)) {
			p++;
			len--;
		}
		memcpy(s, p, len);
	}

	free(ret->data);
	ret->data = s;
	ret->length = (int)len;
	if (a != NULL)
		(*a) = ret;
	*pp = pend;
	return (ret);

err:
	ASN1error(i);
	if (a == NULL || *a != ret)
		ASN1_INTEGER_free(ret);
	return (NULL);
}


/* This is a version of d2i_ASN1_INTEGER that ignores the sign bit of
 * ASN1 integers: some broken software can encode a positive INTEGER
 * with its MSB set as negative (it doesn't add a padding zero).
 */

ASN1_INTEGER *
d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp, long length)
{
	ASN1_INTEGER *ret = NULL;
	const unsigned char *p;
	unsigned char *s;
	long len;
	int inf, tag, xclass;
	int i;

	if ((a == NULL) || ((*a) == NULL)) {
		if ((ret = ASN1_INTEGER_new()) == NULL)
			return (NULL);
	} else
		ret = (*a);

	p = *pp;
	inf = ASN1_get_object(&p, &len, &tag, &xclass, length);
	if (inf & 0x80) {
		i = ASN1_R_BAD_OBJECT_HEADER;
		goto err;
	}

	if (tag != V_ASN1_INTEGER) {
		i = ASN1_R_EXPECTING_AN_INTEGER;
		goto err;
	}

	/* We must malloc stuff, even for 0 bytes otherwise it
	 * signifies a missing NULL parameter. */
	s = malloc(len + 1);
	if (s == NULL) {
		i = ERR_R_MALLOC_FAILURE;
		goto err;
	}
	ret->type = V_ASN1_INTEGER;
	if (len) {
		if ((*p == 0) && (len != 1)) {
			p++;
			len--;
		}
		memcpy(s, p, len);
		p += len;
	}

	free(ret->data);
	ret->data = s;
	ret->length = (int)len;
	if (a != NULL)
		(*a) = ret;
	*pp = p;
	return (ret);

err:
	ASN1error(i);
	if (a == NULL || *a != ret)
		ASN1_INTEGER_free(ret);
	return (NULL);
}

int
ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
{
	int j, k;
	unsigned int i;
	unsigned char buf[sizeof(long) + 1];
	long d;

	a->type = V_ASN1_INTEGER;
	/* XXX ssl/ssl_asn1.c:i2d_SSL_SESSION() depends upon this bound vae */
	if (a->length < (int)(sizeof(long) + 1)) {
		free(a->data);
		a->data = calloc(1, sizeof(long) + 1);
	}
	if (a->data == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return (0);
	}
	d = v;
	if (d < 0) {
		d = -d;
		a->type = V_ASN1_NEG_INTEGER;
	}

	for (i = 0; i < sizeof(long); i++) {
		if (d == 0)
			break;
		buf[i] = (int)d & 0xff;
		d >>= 8;
	}
	j = 0;
	for (k = i - 1; k >= 0; k--)
		a->data[j++] = buf[k];
	a->length = j;
	return (1);
}

long
ASN1_INTEGER_get(const ASN1_INTEGER *a)
{
	int neg = 0, i;
	long r = 0;

	if (a == NULL)
		return (0L);
	i = a->type;
	if (i == V_ASN1_NEG_INTEGER)
		neg = 1;
	else if (i != V_ASN1_INTEGER)
		return -1;

	if (a->length > (int)sizeof(long)) {
		/* hmm... a bit ugly, return all ones */
		return -1;
	}
	if (a->data == NULL)
		return 0;

	for (i = 0; i < a->length; i++) {
		r <<= 8;
		r |= (unsigned char)a->data[i];
	}
	if (neg)
		r = -r;
	return (r);
}

ASN1_INTEGER *
BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
{
	ASN1_INTEGER *ret;
	int len, j;

	if (ai == NULL)
		ret = ASN1_INTEGER_new();
	else
		ret = ai;
	if (ret == NULL) {
		ASN1error(ERR_R_NESTED_ASN1_ERROR);
		goto err;
	}
	if (BN_is_negative(bn))
		ret->type = V_ASN1_NEG_INTEGER;
	else
		ret->type = V_ASN1_INTEGER;
	j = BN_num_bits(bn);
	len = ((j == 0) ? 0 : ((j / 8) + 1));
	if (ret->length < len + 4) {
		unsigned char *new_data = realloc(ret->data, len + 4);
		if (!new_data) {
			ASN1error(ERR_R_MALLOC_FAILURE);
			goto err;
		}
		ret->data = new_data;
	}
	ret->length = BN_bn2bin(bn, ret->data);

	/* Correct zero case */
	if (!ret->length) {
		ret->data[0] = 0;
		ret->length = 1;
	}
	return (ret);

err:
	if (ret != ai)
		ASN1_INTEGER_free(ret);
	return (NULL);
}

BIGNUM *
ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
{
	BIGNUM *ret;

	if ((ret = BN_bin2bn(ai->data, ai->length, bn)) == NULL)
		ASN1error(ASN1_R_BN_LIB);
	else if (ai->type == V_ASN1_NEG_INTEGER)
		BN_set_negative(ret, 1);
	return (ret);
}
@


1.30
log
@Replace M_ASN1_INTEGER_(new|free) with ASN1_INTEGER_(new|free) - this is
different from the macro expansion, but the result is the same. Also
replace some ASN1_STRING_dup() with ASN1_INTEGER_dup().

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.28 2015/07/29 14:58:34 jsing Exp $ */
d269 1
a269 1
	ASN1err(ASN1_F_C2I_ASN1_INTEGER, i);
d335 1
a335 1
	ASN1err(ASN1_F_D2I_ASN1_UINTEGER, i);
d356 1
a356 1
		ASN1err(ASN1_F_ASN1_INTEGER_SET, ERR_R_MALLOC_FAILURE);
d419 1
a419 1
		ASN1err(ASN1_F_BN_TO_ASN1_INTEGER, ERR_R_NESTED_ASN1_ERROR);
d431 1
a431 1
			ASN1err(ASN1_F_BN_TO_ASN1_INTEGER, ERR_R_MALLOC_FAILURE);
d457 1
a457 1
		ASN1err(ASN1_F_ASN1_INTEGER_TO_BN, ASN1_R_BN_LIB);
@


1.29
log
@Remove unnecessary type assignments - M_ASN1_INTEGER_new() already sets
the type to V_ASN1_INTEGER.

ok doug@@
@
text
@d199 1
a199 1
		if ((ret = M_ASN1_INTEGER_new()) == NULL)
d271 1
a271 1
		M_ASN1_INTEGER_free(ret);
d292 1
a292 1
		if ((ret = M_ASN1_INTEGER_new()) == NULL)
d337 1
a337 1
		M_ASN1_INTEGER_free(ret);
d415 1
a415 1
		ret = M_ASN1_INTEGER_new();
d447 1
a447 1
		M_ASN1_INTEGER_free(ret);
@


1.28
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.27 2015/07/19 18:29:31 miod Exp $ */
a200 1
		ret->type = V_ASN1_INTEGER;
a293 1
		ret->type = V_ASN1_INTEGER;
@


1.27
log
@Drop stupid (int) casts for the arguments of malloc() and friends. This is
not 16-bit MS-DOS anymore.
ok bcook@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.26 2015/03/19 14:00:22 tedu Exp $ */
d69 1
a69 1
	return M_ASN1_INTEGER_dup(x);
@


1.26
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.25 2015/02/10 08:33:10 jsing Exp $ */
d313 1
a313 1
	s = malloc((int)len + 1);
@


1.25
log
@The IMPLEMENT_STACK_OF and IMPLEMENT_ASN1_SET_OF macros were turned into
noops around 15 years ago. Remove multiple occurances of both that still
exist in the code today.
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.24 2014/07/11 08:44:47 jsing Exp $ */
d271 1
a271 1
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
d338 1
a338 1
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
@


1.25.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.25 2015/02/10 08:33:10 jsing Exp $ */
d271 1
a271 1
	if (a == NULL || *a != ret)
d338 1
a338 1
	if (a == NULL || *a != ret)
@


1.24
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.23 2014/07/10 13:58:22 jsing Exp $ */
a463 3

IMPLEMENT_STACK_OF(ASN1_INTEGER)
IMPLEMENT_ASN1_SET_OF(ASN1_INTEGER)
@


1.24.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.24 2014/07/11 08:44:47 jsing Exp $ */
d271 1
a271 1
	if (a == NULL || *a != ret)
d338 1
a338 1
	if (a == NULL || *a != ret)
@


1.23
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.22 2014/07/10 11:25:13 tedu Exp $ */
a61 1
#include "cryptlib.h"
d64 1
@


1.22
log
@delete some casts. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_int.c,v 1.21 2014/06/12 15:49:27 deraadt Exp $ */
d60 2
d205 1
a205 1
	p= *pp;
@


1.21
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d162 1
a162 1
		memcpy(p, a->data, (unsigned int)a->length);
d208 1
a208 1
	s = malloc((int)len + 1);
d256 1
a256 1
		memcpy(s, p, (int)len);
d322 1
a322 1
		memcpy(s, p, (int)len);
@


1.20
log
@Add a comment documenting where libssl depends upon the current (objectionable)
behaviour of this code, to prevent people from blindly changing it.
@
text
@d1 1
a1 1
/* crypto/asn1/a_int.c */
@


1.19
log
@more: no need for null check before free
ok tedu guenther
@
text
@d350 1
@


1.18
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d259 1
a259 2
	if (ret->data != NULL)
		free(ret->data);
d326 1
a326 2
	if (ret->data != NULL)
		free(ret->data);
d351 1
a351 2
		if (a->data != NULL)
			free(a->data);
@


1.17
log
@More KNF.
@
text
@d208 1
a208 1
	s = (unsigned char *)malloc((int)len + 1);
d312 1
a312 1
	s = (unsigned char *)malloc((int)len + 1);
d355 1
a355 2
		if ((a->data = (unsigned char *)malloc(sizeof(long) + 1)) != NULL)
			memset((char *)a->data, 0, sizeof(long) + 1);
@


1.16
log
@More KNF.
@
text
@d178 1
a178 1
		for(; i > 0; i--)
d247 1
a247 1
			for(; i > 0; i--)
@


1.15
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d64 5
a68 2
ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x)
{ return M_ASN1_INTEGER_dup(x);}
d70 3
a72 2
int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
{ 
d74 1
a90 1
	
d92 2
a93 1
/* 
d97 1
a97 1
 * the type: V_ASN1_INTEGER for positive and V_ASN1_NEG_INTEGER for negative. 
d104 1
a104 1
 * The internal form is converted by complementing each octet and finally 
d107 1
a107 1
 * complement and 0 by the add one (due to carry) so just copy as many trailing 
d118 2
a119 1
int i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp)
d121 2
a122 2
	int pad=0,ret,i,neg;
	unsigned char *p,*n,pb=0;
d124 3
a126 2
	if (a == NULL) return(0);
	neg=a->type & V_ASN1_NEG;
d128 1
a128 1
		ret=1;
d130 2
a131 2
		ret=a->length;
		i=a->data[0];
d133 16
a148 15
			pad=1;
			pb=0;
	} else if(neg) {
			if(i>128) {
				pad=1;
				pb=0xFF;
		} else if(i == 128) {
			/*
			 * Special case: if any other bytes non zero we pad:
			 * otherwise we don't.
			 */
				for(i = 1; i < a->length; i++) if(a->data[i]) {
						pad=1;
						pb=0xFF;
						break;
d151 1
d153 2
a154 3
		ret+=pad;
	}
	if (pp == NULL) return(ret);
d157 6
a162 3
	if (pad) *(p++)=pb;
	if (a->length == 0) *(p++)=0;
	else if (!neg) memcpy(p,a->data,(unsigned int)a->length);
d165 1
a165 1
		n=a->data + a->length - 1;
d169 1
a169 1
		while(!*n) {
d173 1
a173 1
	}
d178 3
a180 2
		for(;i > 0; i--) *(p--) = *(n--) ^ 0xff;
}
d182 2
a183 2
	*pp+=ret;
	return(ret);
d188 2
a189 2
ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **pp,
	     long len)
d191 1
a191 1
	ASN1_INTEGER *ret=NULL;
d193 1
a193 1
	unsigned char *to,*s;
d197 5
a201 5
		if ((ret=M_ASN1_INTEGER_new()) == NULL) return(NULL);
		ret->type=V_ASN1_INTEGER;
	}
	else
		ret=(*a);
d208 1
a208 1
	s=(unsigned char *)malloc((int)len+1);
d210 1
a210 1
		i=ERR_R_MALLOC_FAILURE;
d213 2
a214 2
	to=s;
	if(!len) {
d218 1
a218 1
		ret->type=V_ASN1_INTEGER;
d220 1
a220 1
		ret->type=V_ASN1_NEG_INTEGER;
d240 1
a240 1
		if(!i) {
d247 2
a248 1
			for(;i > 0; i--) *(to--) = *(p--) ^ 0xff;
d251 1
a251 1
		ret->type=V_ASN1_INTEGER;
d256 1
a256 1
		memcpy(s,p,(int)len);
d259 9
a267 6
	if (ret->data != NULL) free(ret->data);
	ret->data=s;
	ret->length=(int)len;
	if (a != NULL) (*a)=ret;
	*pp=pend;
	return(ret);
d269 1
a269 1
	ASN1err(ASN1_F_C2I_ASN1_INTEGER,i);
d272 1
a272 1
	return(NULL);
d281 2
a282 2
ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
	     long length)
d284 1
a284 1
	ASN1_INTEGER *ret=NULL;
d288 1
a288 1
	int inf,tag,xclass;
d292 3
a294 2
		if ((ret=M_ASN1_INTEGER_new()) == NULL) return(NULL);
		ret->type=V_ASN1_INTEGER;
d296 1
a296 1
		ret=(*a);
d298 2
a299 2
	p= *pp;
	inf=ASN1_get_object(&p,&len,&tag,&xclass,length);
d301 1
a301 1
		i=ASN1_R_BAD_OBJECT_HEADER;
d306 1
a306 1
		i=ASN1_R_EXPECTING_AN_INTEGER;
d312 1
a312 1
	s=(unsigned char *)malloc((int)len+1);
d314 1
a314 1
		i=ERR_R_MALLOC_FAILURE;
d317 2
a318 2
	ret->type=V_ASN1_INTEGER;
	if(len) {
d323 2
a324 2
		memcpy(s,p,(int)len);
		p+=len;
d327 9
a335 6
	if (ret->data != NULL) free(ret->data);
	ret->data=s;
	ret->length=(int)len;
	if (a != NULL) (*a)=ret;
	*pp=p;
	return(ret);
d337 1
a337 1
	ASN1err(ASN1_F_D2I_ASN1_UINTEGER,i);
d340 1
a340 1
	return(NULL);
d343 2
a344 1
int ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
d346 1
a346 1
	int j,k;
d348 1
a348 1
	unsigned char buf[sizeof(long)+1];
d351 2
a352 2
	a->type=V_ASN1_INTEGER;
	if (a->length < (int)(sizeof(long)+1)) {
d355 2
a356 2
		if ((a->data=(unsigned char *)malloc(sizeof(long)+1)) != NULL)
			memset((char *)a->data,0,sizeof(long)+1);
d359 2
a360 2
		ASN1err(ASN1_F_ASN1_INTEGER_SET,ERR_R_MALLOC_FAILURE);
		return(0);
d362 1
a362 1
	d=v;
d364 2
a365 2
		d= -d;
		a->type=V_ASN1_NEG_INTEGER;
d368 11
a378 10
	for (i=0; i<sizeof(long); i++) {
		if (d == 0) break;
		buf[i]=(int)d&0xff;
		d>>=8;
	}
	j=0;
	for (k=i-1; k >=0; k--)
		a->data[j++]=buf[k];
	a->length=j;
	return(1);
d381 2
a382 1
long ASN1_INTEGER_get(const ASN1_INTEGER *a)
d384 2
a385 2
	int neg=0,i;
	long r=0;
d387 3
a389 2
	if (a == NULL) return(0L);
	i=a->type;
d391 1
a391 1
		neg=1;
d394 1
a394 1
	
d402 3
a404 3
	for (i=0; i<a->length; i++) {
		r<<=8;
		r|=(unsigned char)a->data[i];
d406 3
a408 2
	if (neg) r= -r;
	return(r);
d411 2
a412 1
ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
d415 1
a415 1
	int len,j;
d418 1
a418 1
		ret=M_ASN1_INTEGER_new();
d420 1
a420 1
		ret=ai;
d422 1
a422 1
		ASN1err(ASN1_F_BN_TO_ASN1_INTEGER,ERR_R_NESTED_ASN1_ERROR);
d427 6
a432 5
	else ret->type=V_ASN1_INTEGER;
	j=BN_num_bits(bn);
	len=((j == 0)?0:((j/8)+1));
	if (ret->length < len+4) {
		unsigned char *new_data=realloc(ret->data, len+4);
d434 1
a434 1
			ASN1err(ASN1_F_BN_TO_ASN1_INTEGER,ERR_R_MALLOC_FAILURE);
d437 1
a437 1
		ret->data=new_data;
d439 2
a440 1
	ret->length=BN_bn2bin(bn,ret->data);
d442 1
a442 1
	if(!ret->length) {
d446 2
a447 1
	return(ret);
d449 3
a451 2
	if (ret != ai) M_ASN1_INTEGER_free(ret);
	return(NULL);
d454 2
a455 1
BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
d459 3
a461 3
	if ((ret=BN_bin2bn(ai->data,ai->length,bn)) == NULL)
		ASN1err(ASN1_F_ASN1_INTEGER_TO_BN,ASN1_R_BN_LIB);
	else if(ai->type == V_ASN1_NEG_INTEGER)
d463 1
a463 1
	return(ret);
@


1.14
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d72 1
a72 2
	if (neg != (y->type & V_ASN1_NEG))
	{
d122 1
a122 2
	else
	{
d184 1
a184 2
	if ((a == NULL) || ((*a) == NULL))
	{
d197 1
a197 2
	if (s == NULL)
	{
d207 1
a207 2
} else if (*p & 0x80) /* a negative number */
	{
d212 1
a212 1
	}
d220 1
a220 1
	}
d232 1
a232 1
	} else {
d236 2
a237 2
	}
} else {
d239 1
a239 2
		if ((*p == 0) && (len != 1))
		{
d244 1
a244 1
}
d275 1
a275 2
	if ((a == NULL) || ((*a) == NULL))
	{
d278 1
a278 2
	}
	else
d283 1
a283 2
	if (inf & 0x80)
	{
d288 1
a288 2
	if (tag != V_ASN1_INTEGER)
	{
d296 1
a296 2
	if (s == NULL)
	{
d302 1
a302 2
		if ((*p == 0) && (len != 1))
		{
d308 1
a308 1
}
d331 1
a331 2
	if (a->length < (int)(sizeof(long)+1))
	{
d337 1
a337 2
	if (a->data == NULL)
	{
d342 1
a342 2
	if (d < 0)
	{
d347 1
a347 2
	for (i=0; i<sizeof(long); i++)
	{
d371 1
a371 2
	if (a->length > (int)sizeof(long))
	{
d378 1
a378 2
	for (i=0; i<a->length; i++)
	{
d395 1
a395 2
	if (ret == NULL)
	{
d404 1
a404 2
	if (ret->length < len+4)
	{
d406 1
a406 2
		if (!new_data)
		{
d414 1
a414 2
	if(!ret->length)
	{
@


1.13
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d68 1
a68 1
	{ 
d73 1
a73 1
		{
d78 1
a78 1
		}
d86 1
a86 1
	}
d115 1
a115 1
	{
d124 1
a124 1
		{
d130 1
a130 1
		} else if(neg) {
d134 1
a134 1
			} else if(i == 128) {
a142 1
				}
d145 1
d147 1
a147 1
		}
d164 1
a164 1
		}
d170 1
a170 1
	}
d174 1
a174 1
	}
d180 1
a180 1
	{
d187 1
a187 1
		{
d190 1
a190 1
		}
d201 1
a201 1
		{
d204 1
a204 1
		}
d211 2
a212 2
	} else if (*p & 0x80) /* a negative number */
		{
d217 1
a217 1
		}
d225 1
a225 1
		}
d237 1
a237 1
		} else {
d241 2
a242 2
		}
	} else {
d245 1
a245 1
			{
d248 1
a248 1
			}
d250 1
a250 1
	}
d263 1
a263 1
	}
d273 1
a273 1
	{
d282 1
a282 1
		{
d285 1
a285 1
		}
d292 1
a292 1
		{
d295 1
a295 1
		}
d298 1
a298 1
		{
d301 1
a301 1
		}
d307 1
a307 1
		{
d310 1
a310 1
		}
d314 1
a314 1
			{
d317 1
a317 1
			}
d320 1
a320 1
	}
d333 1
a333 1
	}
d336 1
a336 1
	{
d344 1
a344 1
		{
d349 1
a349 1
		}
d351 1
a351 1
		{
d354 1
a354 1
		}
d357 1
a357 1
		{
d360 1
a360 1
		}
d363 1
a363 1
		{
d367 1
a367 1
		}
d373 1
a373 1
	}
d376 1
a376 1
	{
d388 1
a388 1
		{
d391 1
a391 1
		}
d396 1
a396 1
		{
d399 1
a399 1
		}
d402 1
a402 1
	}
d405 1
a405 1
	{
d414 1
a414 1
		{
d417 1
a417 1
		}
d424 1
a424 1
		{
d427 1
a427 1
			{
d430 1
a430 1
			}
d432 1
a432 1
		}
d436 1
a436 1
		{
d439 1
a439 1
		}
d444 1
a444 1
	}
d447 1
a447 1
	{
d455 1
a455 1
	}
@


1.12
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d197 1
a197 1
	/* We must OPENSSL_malloc stuff, even for 0 bytes otherwise it
d199 1
a199 1
	s=(unsigned char *)OPENSSL_malloc((int)len+1);
d252 1
a252 1
	if (ret->data != NULL) OPENSSL_free(ret->data);
d303 1
a303 1
	/* We must OPENSSL_malloc stuff, even for 0 bytes otherwise it
d305 1
a305 1
	s=(unsigned char *)OPENSSL_malloc((int)len+1);
d322 1
a322 1
	if (ret->data != NULL) OPENSSL_free(ret->data);
d346 2
a347 2
			OPENSSL_free(a->data);
		if ((a->data=(unsigned char *)OPENSSL_malloc(sizeof(long)+1)) != NULL)
d425 1
a425 1
		unsigned char *new_data=OPENSSL_realloc(ret->data, len+4);
@


1.11
log
@resolve conflicts
@
text
@d119 1
a119 1
	if ((a == NULL) || (a->data == NULL)) return(0);
@


1.10
log
@openssl-1.0.0e: resolve conflicts
@
text
@d389 2
a390 2
		/* hmm... a bit ugly */
		return(0xffffffffL);
@


1.9
log
@resolve conflicts, fix local changes
@
text
@d276 1
a276 1
	unsigned char *to,*s;
a310 1
	to=s;
@


1.8
log
@resolve conflicts
@
text
@d64 1
a64 1
ASN1_INTEGER *ASN1_INTEGER_dup(ASN1_INTEGER *x)
d67 1
a67 1
int ASN1_INTEGER_cmp(ASN1_INTEGER *x, ASN1_INTEGER *y)
d376 1
a376 1
long ASN1_INTEGER_get(ASN1_INTEGER *a)
d405 1
a405 1
ASN1_INTEGER *BN_to_ASN1_INTEGER(BIGNUM *bn, ASN1_INTEGER *ai)
d447 1
a447 1
BIGNUM *ASN1_INTEGER_to_BN(ASN1_INTEGER *ai, BIGNUM *bn)
@


1.7
log
@resolve conflicts
@
text
@d62 1
d178 1
a178 1
ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a, unsigned char **pp,
d182 2
a183 1
	unsigned char *p,*to,*s, *pend;
d259 1
a259 1
	ASN1err(ASN1_F_D2I_ASN1_INTEGER,i);
d271 1
a271 1
ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, unsigned char **pp,
d275 2
a276 1
	unsigned char *p,*to,*s;
d338 2
a339 1
	int i,j,k;
d344 1
a344 1
	if (a->length < (sizeof(long)+1))
d388 1
a388 1
	if (a->length > sizeof(long))
d419 2
a420 1
	if(bn->neg) ret->type = V_ASN1_NEG_INTEGER;
d453 2
a454 1
	else if(ai->type == V_ASN1_NEG_INTEGER) ret->neg = 1;
@


1.6
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d67 20
a86 1
{ return M_ASN1_INTEGER_cmp(x,y);}
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d400 10
a409 1
	ret->data=(unsigned char *)OPENSSL_malloc(len+4);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a62 6
ASN1_INTEGER *ASN1_INTEGER_new(void)
{ return M_ASN1_INTEGER_new();}

void ASN1_INTEGER_free(ASN1_INTEGER *x)
{ M_ASN1_INTEGER_free(x);}

a68 15
/* Output ASN1 INTEGER including tag+length */

int i2d_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp)
{
	int len, ret;
	if(!a) return 0;
	len = i2c_ASN1_INTEGER(a, NULL);	
	ret=ASN1_object_size(0,len,V_ASN1_INTEGER);
	if(pp) {
		ASN1_put_object(pp,0,len,V_ASN1_INTEGER,V_ASN1_UNIVERSAL);
		i2c_ASN1_INTEGER(a, pp);	
	}
	return ret;
}

a155 33
/* Convert DER encoded ASN1 INTEGER to ASN1_INTEGER structure */
ASN1_INTEGER *d2i_ASN1_INTEGER(ASN1_INTEGER **a, unsigned char **pp,
	     long length)
{
	unsigned char *p;
	long len;
	int i;
	int inf,tag,xclass;
	ASN1_INTEGER *ret;

	p= *pp;
	inf=ASN1_get_object(&p,&len,&tag,&xclass,length);
	if (inf & 0x80)
		{
		i=ASN1_R_BAD_OBJECT_HEADER;
		goto err;
		}

	if (tag != V_ASN1_INTEGER)
		{
		i=ASN1_R_EXPECTING_AN_INTEGER;
		goto err;
		}
	ret = c2i_ASN1_INTEGER(a, &p, len);
	if(ret) *pp = p;
	return ret;
err:
	ASN1err(ASN1_F_D2I_ASN1_INTEGER,i);
	return(NULL);

}


d363 1
a363 1
		return(0);
d371 1
a371 1
		return(0);
d402 6
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d75 15
d91 1
a91 1
 * This converts an ASN1 INTEGER into its DER encoding.
d115 1
a115 1
int i2d_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp)
d117 1
a117 1
	int pad=0,ret,r,i,t;
d121 1
a121 1
	t=a->type;
d128 1
a128 1
		if ((t == V_ASN1_INTEGER) && (i > 127)) {
d131 1
a131 1
		} else if(t == V_ASN1_NEG_INTEGER) {
d149 1
a149 2
	r=ASN1_object_size(0,ret,V_ASN1_INTEGER);
	if (pp == NULL) return(r);
a151 1
	ASN1_put_object(&p,0,ret,V_ASN1_INTEGER,V_ASN1_UNIVERSAL);
d154 1
a154 1
	else if (t == V_ASN1_INTEGER) memcpy(p,a->data,(unsigned int)a->length);
d173 2
a174 2
	*pp+=r;
	return(r);
d177 1
d180 2
a181 3
	{
	ASN1_INTEGER *ret=NULL;
	unsigned char *p,*to,*s, *pend;
d183 1
d185 1
a185 9
	int i;

	if ((a == NULL) || ((*a) == NULL))
		{
		if ((ret=M_ASN1_INTEGER_new()) == NULL) return(NULL);
		ret->type=V_ASN1_INTEGER;
		}
	else
		ret=(*a);
a188 1
	pend = p + len;
d200 26
d227 4
a230 1
	/* We must Malloc stuff, even for 0 bytes otherwise it
d232 1
a232 1
	s=(unsigned char *)Malloc((int)len+1);
d285 1
a285 1
	if (ret->data != NULL) Free(ret->data);
d298 1
d335 1
a335 1
	/* We must Malloc stuff, even for 0 bytes otherwise it
d337 1
a337 1
	s=(unsigned char *)Malloc((int)len+1);
d355 1
a355 1
	if (ret->data != NULL) Free(ret->data);
d378 2
a379 2
			Free(a->data);
		if ((a->data=(unsigned char *)Malloc(sizeof(long)+1)) != NULL)
d454 1
a454 1
	ret->data=(unsigned char *)Malloc(len+4);
d468 1
a468 1
	if(ai->type == V_ASN1_NEG_INTEGER) bn->neg = 1;
d471 3
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d63 12
d175 1
a175 1
		if ((ret=ASN1_INTEGER_new()) == NULL) return(NULL);
d205 6
a210 1
	if (*p & 0x80) /* a negative number */
d251 1
a251 1
	if (ret->data != NULL) Free((char *)ret->data);
d260 1
a260 1
		ASN1_INTEGER_free(ret);
d280 1
a280 1
		if ((ret=ASN1_INTEGER_new()) == NULL) return(NULL);
d309 2
a310 1
		ret->type=V_ASN1_INTEGER;
d318 1
d320 1
a320 1
	if (ret->data != NULL) Free((char *)ret->data);
d329 1
a329 1
		ASN1_INTEGER_free(ret);
d343 1
a343 1
			Free((char *)a->data);
d407 1
a407 1
		ret=ASN1_INTEGER_new();
d423 1
a423 1
	if (ret != ai) ASN1_INTEGER_free(ret);
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "asn1.h"
d63 23
a85 1
/* ASN1err(ASN1_F_D2I_ASN1_INTEGER,ASN1_R_EXPECTING_AN_INTEGER);
d88 1
a88 3
int i2d_ASN1_INTEGER(a,pp)
ASN1_INTEGER *a;
unsigned char **pp;
d91 1
a91 1
	unsigned char *p,*pt,*n,pb=0;
d101 1
a101 2
		if ((t == V_ASN1_INTEGER) && (i > 127))
			{
d104 14
d119 1
a119 5
		else if ((t == V_ASN1_NEG_INTEGER) && (i>128))
			{
			pad=1;
			pb=0xFF;
			}
d128 19
a146 15
	if (a->length == 0)
		*(p++)=0;
	else if (t == V_ASN1_INTEGER)
		{
		memcpy(p,a->data,(unsigned int)a->length);
		p+=a->length;
		}
	else
		{
		n=a->data;
		pt=p;
		for (i=a->length; i>0; i--)
			*(p++)= (*(n++)^0xFF)+1;
		if (!pad) *pt|=0x80;
		}
d148 1
a148 1
	*pp=p;
d152 2
a153 4
ASN1_INTEGER *d2i_ASN1_INTEGER(a, pp, length)
ASN1_INTEGER **a;
unsigned char **pp;
long length;
d156 1
a156 1
	unsigned char *p,*to,*s;
d171 1
d196 31
a226 1
		if (*p == 0xff)
d231 34
a264 2
		for (i=(int)len; i>0; i--)
			*(to++)= (*(p++)^0xFF)+1;
d267 5
d273 19
a299 1
		}
d308 1
a308 1
	ASN1err(ASN1_F_D2I_ASN1_INTEGER,i);
d314 1
a314 3
int ASN1_INTEGER_set(a,v)
ASN1_INTEGER *a;
long v;
a346 1
	if (v < 0) a->data[j++]=0;
d353 1
a353 2
long ASN1_INTEGER_get(a)
ASN1_INTEGER *a;
d382 1
a382 3
ASN1_INTEGER *BN_to_ASN1_INTEGER(bn,ai)
BIGNUM *bn;
ASN1_INTEGER *ai;
d393 1
a393 1
		ASN1err(ASN1_F_BN_TO_ASN1_INTEGER,ASN1_R_ERROR_STACK);
d396 2
a397 1
	ret->type=V_ASN1_INTEGER;
d408 1
a408 3
BIGNUM *ASN1_INTEGER_to_BN(ai,bn)
ASN1_INTEGER *ai;
BIGNUM *bn;
d414 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/asn1.h>
d63 1
a63 29
ASN1_INTEGER *ASN1_INTEGER_dup(ASN1_INTEGER *x)
{ return M_ASN1_INTEGER_dup(x);}

int ASN1_INTEGER_cmp(ASN1_INTEGER *x, ASN1_INTEGER *y)
{ return M_ASN1_INTEGER_cmp(x,y);}

/* 
 * This converts an ASN1 INTEGER into its content encoding.
 * The internal representation is an ASN1_STRING whose data is a big endian
 * representation of the value, ignoring the sign. The sign is determined by
 * the type: V_ASN1_INTEGER for positive and V_ASN1_NEG_INTEGER for negative. 
 *
 * Positive integers are no problem: they are almost the same as the DER
 * encoding, except if the first byte is >= 0x80 we need to add a zero pad.
 *
 * Negative integers are a bit trickier...
 * The DER representation of negative integers is in 2s complement form.
 * The internal form is converted by complementing each octet and finally 
 * adding one to the result. This can be done less messily with a little trick.
 * If the internal form has trailing zeroes then they will become FF by the
 * complement and 0 by the add one (due to carry) so just copy as many trailing 
 * zeros to the destination as there are in the source. The carry will add one
 * to the last none zero octet: so complement this octet and add one and finally
 * complement any left over until you get to the start of the string.
 *
 * Padding is a little trickier too. If the first bytes is > 0x80 then we pad
 * with 0xff. However if the first byte is 0x80 and one of the following bytes
 * is non-zero we pad with 0xff. The reason for this distinction is that 0x80
 * followed by optional zeros isn't padded.
d66 3
a68 1
int i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp)
d70 2
a71 2
	int pad=0,ret,i,neg;
	unsigned char *p,*n,pb=0;
d74 1
a74 1
	neg=a->type & V_ASN1_NEG;
d81 2
a82 1
		if (!neg && (i > 127)) {
a84 14
		} else if(neg) {
			if(i>128) {
				pad=1;
				pb=0xFF;
			} else if(i == 128) {
			/*
			 * Special case: if any other bytes non zero we pad:
			 * otherwise we don't.
			 */
				for(i = 1; i < a->length; i++) if(a->data[i]) {
						pad=1;
						pb=0xFF;
						break;
				}
d86 5
a90 1
		}
d93 2
a94 1
	if (pp == NULL) return(ret);
d97 1
d99 3
a101 34
	if (a->length == 0) *(p++)=0;
	else if (!neg) memcpy(p,a->data,(unsigned int)a->length);
	else {
		/* Begin at the end of the encoding */
		n=a->data + a->length - 1;
		p += a->length - 1;
		i = a->length;
		/* Copy zeros to destination as long as source is zero */
		while(!*n) {
			*(p--) = 0;
			n--;
			i--;
		}
		/* Complement and increment next octet */
		*(p--) = ((*(n--)) ^ 0xff) + 1;
		i--;
		/* Complement any octets left */
		for(;i > 0; i--) *(p--) = *(n--) ^ 0xff;
	}

	*pp+=ret;
	return(ret);
	}

/* Convert just ASN1 INTEGER content octets to ASN1_INTEGER structure */

ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a, unsigned char **pp,
	     long len)
	{
	ASN1_INTEGER *ret=NULL;
	unsigned char *p,*to,*s, *pend;
	int i;

	if ((a == NULL) || ((*a) == NULL))
d103 2
a104 2
		if ((ret=M_ASN1_INTEGER_new()) == NULL) return(NULL);
		ret->type=V_ASN1_INTEGER;
a106 20
		ret=(*a);

	p= *pp;
	pend = p + len;

	/* We must OPENSSL_malloc stuff, even for 0 bytes otherwise it
	 * signifies a missing NULL parameter. */
	s=(unsigned char *)OPENSSL_malloc((int)len+1);
	if (s == NULL)
		{
		i=ERR_R_MALLOC_FAILURE;
		goto err;
		}
	to=s;
	if(!len) {
		/* Strictly speaking this is an illegal INTEGER but we
		 * tolerate it.
		 */
		ret->type=V_ASN1_INTEGER;
	} else if (*p & 0x80) /* a negative number */
d108 5
a112 28
		ret->type=V_ASN1_NEG_INTEGER;
		if ((*p == 0xff) && (len != 1)) {
			p++;
			len--;
		}
		i = len;
		p += i - 1;
		to += i - 1;
		while((!*p) && i) {
			*(to--) = 0;
			i--;
			p--;
		}
		/* Special case: if all zeros then the number will be of
		 * the form FF followed by n zero bytes: this corresponds to
		 * 1 followed by n zero bytes. We've already written n zeros
		 * so we just append an extra one and set the first byte to
		 * a 1. This is treated separately because it is the only case
		 * where the number of bytes is larger than len.
		 */
		if(!i) {
			*s = 1;
			s[len] = 0;
			len++;
		} else {
			*(to--) = (*(p--) ^ 0xff) + 1;
			i--;
			for(;i > 0; i--) *(to--) = *(p--) ^ 0xff;
a113 9
	} else {
		ret->type=V_ASN1_INTEGER;
		if ((*p == 0) && (len != 1))
			{
			p++;
			len--;
			}
		memcpy(s,p,(int)len);
	}
d115 2
a116 11
	if (ret->data != NULL) OPENSSL_free(ret->data);
	ret->data=s;
	ret->length=(int)len;
	if (a != NULL) (*a)=ret;
	*pp=pend;
	return(ret);
err:
	ASN1err(ASN1_F_D2I_ASN1_INTEGER,i);
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		M_ASN1_INTEGER_free(ret);
	return(NULL);
d119 4
a122 8

/* This is a version of d2i_ASN1_INTEGER that ignores the sign bit of
 * ASN1 integers: some broken software can encode a positive INTEGER
 * with its MSB set as negative (it doesn't add a padding zero).
 */

ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, unsigned char **pp,
	     long length)
d132 1
a132 1
		if ((ret=M_ASN1_INTEGER_new()) == NULL) return(NULL);
d152 1
a152 1
	/* We must OPENSSL_malloc stuff, even for 0 bytes otherwise it
d154 1
a154 1
	s=(unsigned char *)OPENSSL_malloc((int)len+1);
d161 14
a174 2
	ret->type=V_ASN1_INTEGER;
	if(len) {
d182 1
a182 1
	}
d184 1
a184 1
	if (ret->data != NULL) OPENSSL_free(ret->data);
d191 1
a191 1
	ASN1err(ASN1_F_D2I_ASN1_UINTEGER,i);
d193 1
a193 1
		M_ASN1_INTEGER_free(ret);
d197 3
a199 1
int ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
d209 2
a210 2
			OPENSSL_free(a->data);
		if ((a->data=(unsigned char *)OPENSSL_malloc(sizeof(long)+1)) != NULL)
d232 1
d239 2
a240 1
long ASN1_INTEGER_get(ASN1_INTEGER *a)
d250 1
a250 1
		return -1;
d258 1
a258 1
		return 0;
d269 3
a271 1
ASN1_INTEGER *BN_to_ASN1_INTEGER(BIGNUM *bn, ASN1_INTEGER *ai)
d277 1
a277 1
		ret=M_ASN1_INTEGER_new();
d282 1
a282 1
		ASN1err(ASN1_F_BN_TO_ASN1_INTEGER,ERR_R_NESTED_ASN1_ERROR);
d285 1
a285 2
	if(bn->neg) ret->type = V_ASN1_NEG_INTEGER;
	else ret->type=V_ASN1_INTEGER;
d288 1
a288 10
	if (ret->length < len+4)
		{
		unsigned char *new_data=OPENSSL_realloc(ret->data, len+4);
		if (!new_data)
			{
			ASN1err(ASN1_F_BN_TO_ASN1_INTEGER,ERR_R_MALLOC_FAILURE);
			goto err;
			}
		ret->data=new_data;
		}
a289 6
	/* Correct zero case */
	if(!ret->length)
		{
		ret->data[0] = 0;
		ret->length = 1;
		}
d292 1
a292 1
	if (ret != ai) M_ASN1_INTEGER_free(ret);
d296 3
a298 1
BIGNUM *ASN1_INTEGER_to_BN(ASN1_INTEGER *ai, BIGNUM *bn)
a303 1
	else if(ai->type == V_ASN1_NEG_INTEGER) ret->neg = 1;
a305 3

IMPLEMENT_STACK_OF(ASN1_INTEGER)
IMPLEMENT_ASN1_SET_OF(ASN1_INTEGER)
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d67 1
a67 20
	{ 
	int neg, ret;
	/* Compare signs */
	neg = x->type & V_ASN1_NEG;
	if (neg != (y->type & V_ASN1_NEG))
		{
		if (neg)
			return -1;
		else
			return 1;
		}

	ret = ASN1_STRING_cmp(x, y);

	if (neg)
		return -ret;
	else
		return ret;
	}
	
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a61 1
#include <openssl/bn.h>
d177 1
a177 1
ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **pp,
d181 1
a181 2
	const unsigned char *p, *pend;
	unsigned char *to,*s;
d257 1
a257 1
	ASN1err(ASN1_F_C2I_ASN1_INTEGER,i);
d269 1
a269 1
ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
d273 1
a273 2
	const unsigned char *p;
	unsigned char *to,*s;
d335 1
a335 2
	int j,k;
	unsigned int i;
d340 1
a340 1
	if (a->length < (int)(sizeof(long)+1))
d384 1
a384 1
	if (a->length > (int)sizeof(long))
d415 1
a415 2
	if (BN_is_negative(bn))
		ret->type = V_ASN1_NEG_INTEGER;
d448 1
a448 2
	else if(ai->type == V_ASN1_NEG_INTEGER)
		BN_set_negative(ret, 1);
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d64 1
a64 1
ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x)
d67 1
a67 1
int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
d376 1
a376 1
long ASN1_INTEGER_get(const ASN1_INTEGER *a)
d405 1
a405 1
ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
d447 1
a447 1
BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d276 1
a276 1
	unsigned char *s;
d311 1
@


1.1.1.7
log
@import OpenSSL-1.0.1c
@
text
@d389 2
a390 2
		/* hmm... a bit ugly, return all ones */
		return -1;
@


1.1.1.8
log
@Import OpenSSL 1.0.1g
@
text
@d119 1
a119 1
	if (a == NULL) return(0);
@


