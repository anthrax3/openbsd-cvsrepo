head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19;
locks; strict;
comment	@ * @;


1.19
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.18;
commitid	kT0fLt3r4lroFJra;

1.18
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.17;
commitid	rYgS8cWcS59JYkBV;

1.17
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.15;
commitid	nzndm3zqPmFurSaK;

1.15
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.13.14.31;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.05.11.05.07;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.14.11.18.02;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.32;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.49;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.33;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.50;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.12.20.44.14;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.34.36;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: t_req.c,v 1.18 2015/07/29 14:58:34 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/bn.h>
#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif

int
X509_REQ_print_fp(FILE *fp, X509_REQ *x)
{
	BIO *b;
	int ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		X509error(ERR_R_BUF_LIB);
		return (0);
	}
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = X509_REQ_print(b, x);
	BIO_free(b);
	return (ret);
}

int
X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflags,
    unsigned long cflag)
{
	unsigned long l;
	int i;
	const char *neg;
	X509_REQ_INFO *ri;
	EVP_PKEY *pkey;
	STACK_OF(X509_ATTRIBUTE) *sk;
	STACK_OF(X509_EXTENSION) *exts;
	char mlch = ' ';
	int nmindent = 0;

	if ((nmflags & XN_FLAG_SEP_MASK) == XN_FLAG_SEP_MULTILINE) {
		mlch = '\n';
		nmindent = 12;
	}

	if (nmflags == X509_FLAG_COMPAT)
		nmindent = 16;

	ri = x->req_info;
	if (!(cflag & X509_FLAG_NO_HEADER)) {
		if (BIO_write(bp, "Certificate Request:\n", 21) <= 0)
			goto err;
		if (BIO_write(bp, "    Data:\n", 10) <= 0)

			goto err;
	}
	if (!(cflag & X509_FLAG_NO_VERSION)) {
		neg = (ri->version->type == V_ASN1_NEG_INTEGER) ? "-" : "";
		l = 0;
		for (i = 0; i < ri->version->length; i++) {
			l <<= 8;
			l += ri->version->data[i];
		}
		if (BIO_printf(bp, "%8sVersion: %s%lu (%s0x%lx)\n", "", neg,
		    l, neg, l) <= 0)
			goto err;
	}
	if (!(cflag & X509_FLAG_NO_SUBJECT)) {
		if (BIO_printf(bp, "        Subject:%c", mlch) <= 0)
			goto err;
		if (X509_NAME_print_ex(bp, ri->subject, nmindent, nmflags) < 0)
			goto err;
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
	}
	if (!(cflag & X509_FLAG_NO_PUBKEY)) {
		if (BIO_write(bp, "        Subject Public Key Info:\n",
		    33) <= 0)
			goto err;
		if (BIO_printf(bp, "%12sPublic Key Algorithm: ", "") <= 0)
			goto err;
		if (i2a_ASN1_OBJECT(bp, ri->pubkey->algor->algorithm) <= 0)
			goto err;
		if (BIO_puts(bp, "\n") <= 0)
			goto err;

		pkey = X509_REQ_get_pubkey(x);
		if (pkey == NULL) {
			BIO_printf(bp, "%12sUnable to load Public Key\n", "");
			ERR_print_errors(bp);
		} else {
			EVP_PKEY_print_public(bp, pkey, 16, NULL);
			EVP_PKEY_free(pkey);
		}
	}

	if (!(cflag & X509_FLAG_NO_ATTRIBUTES)) {
		/* may not be */
		if (BIO_printf(bp, "%8sAttributes:\n", "") <= 0)
			goto err;

		sk = x->req_info->attributes;
		if (sk_X509_ATTRIBUTE_num(sk) == 0) {
			if (BIO_printf(bp, "%12sa0:00\n", "") <= 0)
				goto err;
		} else {
			for (i = 0; i < sk_X509_ATTRIBUTE_num(sk); i++) {
				ASN1_TYPE *at;
				X509_ATTRIBUTE *a;
				ASN1_BIT_STRING *bs = NULL;
				ASN1_TYPE *t;
				int j, type = 0, count = 1, ii = 0;

				a = sk_X509_ATTRIBUTE_value(sk, i);
				if (X509_REQ_extension_nid(
				    OBJ_obj2nid(a->object)))
					continue;
				if (BIO_printf(bp, "%12s", "") <= 0)
					goto err;
				if ((j = i2a_ASN1_OBJECT(bp, a->object)) > 0) {
					if (a->single) {
						t = a->value.single;
						type = t->type;
						bs = t->value.bit_string;
					} else {
						ii = 0;
						count = sk_ASN1_TYPE_num(
						    a->value.set);
get_next:
						at = sk_ASN1_TYPE_value(
						    a->value.set, ii);
						type = at->type;
						bs = at->value.asn1_string;
					}
				}
				for (j = 25 - j; j > 0; j--)
					if (BIO_write(bp, " ", 1) != 1)
						goto err;
				if (BIO_puts(bp, ":") <= 0)
					goto err;
				if ((type == V_ASN1_PRINTABLESTRING) ||
				    (type == V_ASN1_T61STRING) ||
				    (type == V_ASN1_IA5STRING)) {
					if (BIO_write(bp, (char *)bs->data,
					    bs->length) != bs->length)
						goto err;
					BIO_puts(bp, "\n");
				} else {
					BIO_puts(bp,
					    "unable to print attribute\n");
				}
				if (++ii < count)
					goto get_next;
			}
		}
	}
	if (!(cflag & X509_FLAG_NO_EXTENSIONS)) {
		exts = X509_REQ_get_extensions(x);
		if (exts) {
			BIO_printf(bp, "%8sRequested Extensions:\n", "");
			for (i = 0; i < sk_X509_EXTENSION_num(exts); i++) {
				ASN1_OBJECT *obj;
				X509_EXTENSION *ex;
				int j;
				ex = sk_X509_EXTENSION_value(exts, i);
				if (BIO_printf(bp, "%12s", "") <= 0)
					goto err;
				obj = X509_EXTENSION_get_object(ex);
				i2a_ASN1_OBJECT(bp, obj);
				j = X509_EXTENSION_get_critical(ex);
				if (BIO_printf(bp, ": %s\n",
				    j ? "critical" : "") <= 0)
					goto err;
				if (!X509V3_EXT_print(bp, ex, cflag, 16)) {
					BIO_printf(bp, "%16s", "");
					ASN1_STRING_print(bp, ex->value);
				}
				if (BIO_write(bp, "\n", 1) <= 0)
					goto err;
			}
			sk_X509_EXTENSION_pop_free(exts, X509_EXTENSION_free);
		}
	}

	if (!(cflag & X509_FLAG_NO_SIGDUMP)) {
		if (!X509_signature_print(bp, x->sig_alg, x->signature))
			goto err;
	}

	return (1);

err:
	X509error(ERR_R_BUF_LIB);
	return (0);
}

int
X509_REQ_print(BIO *bp, X509_REQ *x)
{
	return X509_REQ_print_ex(bp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
}
@


1.18
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: t_req.c,v 1.17 2014/07/11 08:44:47 jsing Exp $ */
d84 1
a84 1
		X509err(X509_F_X509_REQ_PRINT_FP, ERR_R_BUF_LIB);
d259 1
a259 1
	X509err(X509_F_X509_REQ_PRINT_EX, ERR_R_BUF_LIB);
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: t_req.c,v 1.16 2014/07/10 22:45:56 jsing Exp $ */
d242 1
a242 1
					M_ASN1_OCTET_STRING_print(bp, ex->value);
@


1.16
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: t_req.c,v 1.15 2014/06/12 15:49:27 deraadt Exp $ */
d63 1
a63 1
#include "cryptlib.h"
d65 1
a65 1
#include <openssl/bn.h>
d69 4
a74 3
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.14
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* crypto/asn1/t_req.c */
@


1.13
log
@More KNF.
@
text
@a72 1
#ifndef OPENSSL_NO_FP_API
a87 1
#endif
@


1.12
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d74 2
a75 1
int X509_REQ_print_fp(FILE *fp, X509_REQ *x)
d77 2
a78 2
        BIO *b;
        int ret;
d80 8
a87 8
        if ((b=BIO_new(BIO_s_file())) == NULL) {
		X509err(X509_F_X509_REQ_PRINT_FP,ERR_R_BUF_LIB);
                return(0);
	}
        BIO_set_fp(b,fp,BIO_NOCLOSE);
        ret=X509_REQ_print(b, x);
        BIO_free(b);
        return(ret);
d91 3
a93 1
int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflags, unsigned long cflag)
d105 1
a105 1
	if((nmflags & XN_FLAG_SEP_MASK) == XN_FLAG_SEP_MULTILINE) {
d110 1
a110 1
	if(nmflags == X509_FLAG_COMPAT)
d113 5
d119 8
a126 10
	ri=x->req_info;
	if(!(cflag & X509_FLAG_NO_HEADER)) {
		if (BIO_write(bp,"Certificate Request:\n",21) <= 0) goto err;
		if (BIO_write(bp,"    Data:\n",10) <= 0) goto err;
	}
	if(!(cflag & X509_FLAG_NO_VERSION)) {
		neg=(ri->version->type == V_ASN1_NEG_INTEGER)?"-":"";
		l=0;
		for (i=0; i<ri->version->length; i++) {
			l<<=8; l+=ri->version->data[i];
d128 6
a133 12
		if(BIO_printf(bp,"%8sVersion: %s%lu (%s0x%lx)\n","",neg,l,neg,
			      l) <= 0)
		    goto err;
	}
        if(!(cflag & X509_FLAG_NO_SUBJECT))
                {
                if (BIO_printf(bp,"        Subject:%c",mlch) <= 0) goto err;
                if (X509_NAME_print_ex(bp,ri->subject,nmindent, nmflags) < 0) goto err;
                if (BIO_write(bp,"\n",1) <= 0) goto err;
                }
	if(!(cflag & X509_FLAG_NO_PUBKEY)) {
		if (BIO_write(bp,"        Subject Public Key Info:\n",33) <= 0)
d135 10
a144 1
		if (BIO_printf(bp,"%12sPublic Key Algorithm: ","") <= 0)
d151 1
a151 1
		pkey=X509_REQ_get_pubkey(x);
d153 1
a153 1
			BIO_printf(bp,"%12sUnable to load Public Key\n","");
d161 1
a161 1
	if(!(cflag & X509_FLAG_NO_ATTRIBUTES)) {
d163 2
a164 2
		if(BIO_printf(bp,"%8sAttributes:\n","") <= 0)
		    goto err;
d166 1
a166 1
		sk=x->req_info->attributes;
d168 2
a169 2
			if(BIO_printf(bp,"%12sa0:00\n","") <= 0)
			    goto err;
d171 1
a171 1
			for (i=0; i<sk_X509_ATTRIBUTE_num(sk); i++) {
d174 1
a174 1
				ASN1_BIT_STRING *bs=NULL;
d176 1
a176 1
				int j,type=0,count=1,ii=0;
d178 15
a192 13
				a=sk_X509_ATTRIBUTE_value(sk,i);
				if(X509_REQ_extension_nid(OBJ_obj2nid(a->object)))
									continue;
				if(BIO_printf(bp,"%12s","") <= 0)
				    goto err;
				if ((j=i2a_ASN1_OBJECT(bp,a->object)) > 0) {
				if (a->single) {
					t=a->value.single;
					type=t->type;
					bs=t->value.bit_string;
				} else {
					ii=0;
					count=sk_ASN1_TYPE_num(a->value.set);
d194 5
a198 3
					at=sk_ASN1_TYPE_value(a->value.set,ii);
					type=at->type;
					bs=at->value.asn1_string;
d200 10
a209 9
			}
				for (j=25-j; j>0; j--)
					if (BIO_write(bp," ",1) != 1) goto err;
				if (BIO_puts(bp,":") <= 0) goto err;
				if (	(type == V_ASN1_PRINTABLESTRING) ||
					(type == V_ASN1_T61STRING) ||
					(type == V_ASN1_IA5STRING)) {
					if (BIO_write(bp,(char *)bs->data,bs->length)
						!= bs->length)
d211 1
a211 1
					BIO_puts(bp,"\n");
d213 2
a214 1
					BIO_puts(bp,"unable to print attribute\n");
d216 2
a217 1
				if (++ii < count) goto get_next;
d221 1
a221 1
	if(!(cflag & X509_FLAG_NO_EXTENSIONS)) {
d223 3
a225 3
		if(exts) {
			BIO_printf(bp,"%8sRequested Extensions:\n","");
			for (i=0; i<sk_X509_EXTENSION_num(exts); i++) {
d229 2
a230 6
				ex=sk_X509_EXTENSION_value(exts, i);
				if (BIO_printf(bp,"%12s","") <= 0) goto err;
				obj=X509_EXTENSION_get_object(ex);
				i2a_ASN1_OBJECT(bp,obj);
				j=X509_EXTENSION_get_critical(ex);
				if (BIO_printf(bp,": %s\n",j?"critical":"") <= 0)
d232 7
a238 1
				if(!X509V3_EXT_print(bp, ex, cflag, 16)) {
d240 1
a240 1
					M_ASN1_OCTET_STRING_print(bp,ex->value);
d242 2
a243 1
				if (BIO_write(bp,"\n",1) <= 0) goto err;
d249 3
a251 2
	if(!(cflag & X509_FLAG_NO_SIGDUMP)) {
		if(!X509_signature_print(bp, x->sig_alg, x->signature)) goto err;
d254 2
a255 1
	return(1);
d257 2
a258 2
	X509err(X509_F_X509_REQ_PRINT_EX,ERR_R_BUF_LIB);
	return(0);
d261 2
a262 1
int X509_REQ_print(BIO *bp, X509_REQ *x)
@


1.11
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d79 1
a79 2
        if ((b=BIO_new(BIO_s_file())) == NULL)
	{
d112 1
a112 2
	if(!(cflag & X509_FLAG_NO_HEADER))
	{
d116 1
a116 2
	if(!(cflag & X509_FLAG_NO_VERSION))
	{
d119 3
a121 2
		for (i=0; i<ri->version->length; i++)
		{ l<<=8; l+=ri->version->data[i]; }
d132 1
a132 2
	if(!(cflag & X509_FLAG_NO_PUBKEY))
	{
d143 1
a143 2
		if (pkey == NULL)
		{
d146 1
a146 3
		}
		else
		{
d152 1
a152 2
	if(!(cflag & X509_FLAG_NO_ATTRIBUTES))
	{
d158 1
a158 2
		if (sk_X509_ATTRIBUTE_num(sk) == 0)
		{
d161 2
a162 5
		}
		else
		{
			for (i=0; i<sk_X509_ATTRIBUTE_num(sk); i++)
			{
d174 2
a175 4
				if ((j=i2a_ASN1_OBJECT(bp,a->object)) > 0)
			{
				if (a->single)
				{
d179 1
a179 3
				}
				else
				{
d193 1
a193 2
					(type == V_ASN1_IA5STRING))
				{
d198 1
a198 3
				}
				else
				{
d205 1
a205 2
	if(!(cflag & X509_FLAG_NO_EXTENSIONS))
	{
d207 1
a207 2
		if(exts)
		{
d209 1
a209 2
			for (i=0; i<sk_X509_EXTENSION_num(exts); i++)
			{
d220 1
a220 2
				if(!X509V3_EXT_print(bp, ex, cflag, 16))
				{
d230 1
a230 2
	if(!(cflag & X509_FLAG_NO_SIGDUMP))
	{
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d75 1
a75 1
        {
d80 1
a80 1
		{
d83 1
a83 1
		}
d88 1
a88 1
        }
d92 1
a92 1
	{
d114 1
a114 1
		{
d117 1
a117 1
		}
d119 1
a119 1
		{
d123 1
a123 1
			{ l<<=8; l+=ri->version->data[i]; }
d127 1
a127 1
		}
d135 1
a135 1
		{
d147 1
a147 1
			{
d150 1
a150 1
			}
d152 1
a152 1
			{
a154 1
			}
d156 1
d159 1
a159 1
		{
d166 1
a166 1
			{
d169 1
a169 1
			}
d171 2
a173 2
			for (i=0; i<sk_X509_ATTRIBUTE_num(sk); i++)
				{
d186 2
a188 2
				if (a->single)
					{
d192 1
a192 1
					}
d194 1
a194 1
					{
a200 1
					}
d202 1
d209 1
a209 1
					{
d214 1
a214 1
					}
d216 1
a216 1
					{
d218 1
a218 1
					}
a219 1
				}
d222 1
d224 1
a224 1
		{
d227 1
a227 1
			{
d230 1
a230 1
				{
d242 1
a242 1
					{
d245 1
a245 1
					}
d247 1
a247 1
				}
a248 1
			}
d250 1
d253 1
a253 1
		{
d255 1
a255 1
		}
d261 1
a261 1
	}
d264 1
a264 1
	{
d266 1
a266 1
	}
@


1.9
log
@resolve conflicts
@
text
@a151 2
#ifndef OPENSSL_NO_RSA
		if (pkey->type == EVP_PKEY_RSA)
d153 2
a154 3
			BIO_printf(bp,"%12sRSA Public Key: (%d bit)\n","",
			BN_num_bits(pkey->pkey.rsa->n));
			RSA_print(bp,pkey->pkey.rsa,16);
a155 21
		else
#endif
#ifndef OPENSSL_NO_DSA
		if (pkey->type == EVP_PKEY_DSA)
			{
			BIO_printf(bp,"%12sDSA Public Key:\n","");
			DSA_print(bp,pkey->pkey.dsa,16);
			}
		else
#endif
#ifndef OPENSSL_NO_EC
		if (pkey->type == EVP_PKEY_EC)
		{
			BIO_printf(bp, "%12sEC Public Key: \n","");
			EC_KEY_print(bp, pkey->pkey.ec, 16);
		}
	else
#endif
			BIO_printf(bp,"%12sUnknown Public Key:\n","");

		EVP_PKEY_free(pkey);
@


1.8
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d66 6
d169 8
d247 1
a247 1
	if(!(cflag & X509_FLAG_NO_ATTRIBUTES))
d263 1
a263 1
				if (BIO_printf(bp,": %s\n",j?"critical":"","") <= 0)
d265 1
a265 1
				if(!X509V3_EXT_print(bp, ex, 0, 16))
d283 1
a283 1
	X509err(X509_F_X509_REQ_PRINT,ERR_R_BUF_LIB);
@


1.7
log
@Trivial sprintf() -> snprintf() changes. ok deraadt@@
@
text
@a93 1
	char str[128];
d118 3
a120 3
		snprintf(str,sizeof str,"%8sVersion: %s%lu (%s0x%lx)\n","",neg,
			 l,neg,l);
		if (BIO_puts(bp,str) <= 0) goto err;
d171 2
a172 2
		snprintf(str,sizeof str,"%8sAttributes:\n","");
		if (BIO_puts(bp,str) <= 0) goto err;
d177 2
a178 2
			snprintf(str,sizeof str,"%12sa0:00\n","");
			if (BIO_puts(bp,str) <= 0) goto err;
d193 2
a194 2
				snprintf(str,sizeof str,"%12s","");
				if (BIO_puts(bp,str) <= 0) goto err;
@


1.6
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d119 2
a120 1
		sprintf(str,"%8sVersion: %s%lu (%s0x%lx)\n","",neg,l,neg,l);
d172 1
a172 1
		sprintf(str,"%8sAttributes:\n","");
d178 1
a178 1
			sprintf(str,"%12sa0:00\n","");
d194 1
a194 1
				sprintf(str,"%12s","");
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d85 1
a85 1
int X509_REQ_print(BIO *bp, X509_REQ *x)
d95 11
d108 30
a137 21
	sprintf(str,"Certificate Request:\n");
	if (BIO_puts(bp,str) <= 0) goto err;
	sprintf(str,"%4sData:\n","");
	if (BIO_puts(bp,str) <= 0) goto err;

	neg=(ri->version->type == V_ASN1_NEG_INTEGER)?"-":"";
	l=0;
	for (i=0; i<ri->version->length; i++)
		{ l<<=8; l+=ri->version->data[i]; }
	sprintf(str,"%8sVersion: %s%lu (%s0x%lx)\n","",neg,l,neg,l);
	if (BIO_puts(bp,str) <= 0) goto err;
	sprintf(str,"%8sSubject: ","");
	if (BIO_puts(bp,str) <= 0) goto err;

	X509_NAME_print(bp,ri->subject,16);
	sprintf(str,"\n%8sSubject Public Key Info:\n","");
	if (BIO_puts(bp,str) <= 0) goto err;
	i=OBJ_obj2nid(ri->pubkey->algor->algorithm);
	sprintf(str,"%12sPublic Key Algorithm: %s\n","",
		(i == NID_undef)?"UNKNOWN":OBJ_nid2ln(i));
	if (BIO_puts(bp,str) <= 0) goto err;
d139 7
a145 1
	pkey=X509_REQ_get_pubkey(x);
d147 3
a149 3
	if (pkey != NULL && pkey->type == EVP_PKEY_RSA)
		{
		BIO_printf(bp,"%12sRSA Public Key: (%d bit)\n","",
d151 3
a153 3
		RSA_print(bp,pkey->pkey.rsa,16);
		}
	else 
d156 6
a161 6
		if (pkey != NULL && pkey->type == EVP_PKEY_DSA)
		{
		BIO_printf(bp,"%12sDSA Public Key:\n","");
		DSA_print(bp,pkey->pkey.dsa,16);
		}
	else
d163 1
a163 1
		BIO_printf(bp,"%12sUnknown Public Key:\n","");
d165 2
a166 6
	if (pkey != NULL)
	    EVP_PKEY_free(pkey);

	/* may not be */
	sprintf(str,"%8sAttributes:\n","");
	if (BIO_puts(bp,str) <= 0) goto err;
d168 1
a168 2
	sk=x->req_info->attributes;
	if (sk_X509_ATTRIBUTE_num(sk) == 0)
d170 2
a171 1
		sprintf(str,"%12sa0:00\n","");
d173 3
a175 4
		}
	else
		{
		for (i=0; i<sk_X509_ATTRIBUTE_num(sk); i++)
d177 1
a177 10
			ASN1_TYPE *at;
			X509_ATTRIBUTE *a;
			ASN1_BIT_STRING *bs=NULL;
			ASN1_TYPE *t;
			int j,type=0,count=1,ii=0;

			a=sk_X509_ATTRIBUTE_value(sk,i);
			if(X509_REQ_extension_nid(OBJ_obj2nid(a->object)))
								continue;
			sprintf(str,"%12s","");
d179 2
a180 1
			if ((j=i2a_ASN1_OBJECT(bp,a->object)) > 0)
d182 1
a182 1
			if (a->single)
d184 12
a195 5
				t=a->value.single;
				type=t->type;
				bs=t->value.bit_string;
				}
			else
d197 10
a206 2
				ii=0;
				count=sk_ASN1_TYPE_num(a->value.set);
d208 22
a229 3
				at=sk_ASN1_TYPE_value(a->value.set,ii);
				type=at->type;
				bs=at->value.asn1_string;
d232 8
a239 6
			for (j=25-j; j>0; j--)
				if (BIO_write(bp," ",1) != 1) goto err;
			if (BIO_puts(bp,":") <= 0) goto err;
			if (	(type == V_ASN1_PRINTABLESTRING) ||
				(type == V_ASN1_T61STRING) ||
				(type == V_ASN1_IA5STRING))
d241 9
a249 2
				if (BIO_write(bp,(char *)bs->data,bs->length)
					!= bs->length)
d251 6
a256 1
				BIO_puts(bp,"\n");
d258 1
a258 5
			else
				{
				BIO_puts(bp,"unable to print attribute\n");
				}
			if (++ii < count) goto get_next;
d262 3
a264 19
	exts = X509_REQ_get_extensions(x);
	if(exts) {
		BIO_printf(bp,"%8sRequested Extensions:\n","");
		for (i=0; i<sk_X509_EXTENSION_num(exts); i++) {
			ASN1_OBJECT *obj;
			X509_EXTENSION *ex;
			int j;
			ex=sk_X509_EXTENSION_value(exts, i);
			if (BIO_printf(bp,"%12s","") <= 0) goto err;
			obj=X509_EXTENSION_get_object(ex);
			i2a_ASN1_OBJECT(bp,obj);
			j=X509_EXTENSION_get_critical(ex);
			if (BIO_printf(bp,": %s\n",j?"critical":"","") <= 0)
				goto err;
			if(!X509V3_EXT_print(bp, ex, 0, 16)) {
				BIO_printf(bp, "%16s", "");
				M_ASN1_OCTET_STRING_print(bp,ex->value);
			}
			if (BIO_write(bp,"\n",1) <= 0) goto err;
a265 4
		sk_X509_EXTENSION_pop_free(exts, X509_EXTENSION_free);
	}

	if(!X509_signature_print(bp, x->sig_alg, x->signature)) goto err;
d271 5
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d67 1
a67 1
#ifndef NO_FP_API
d88 1
a88 2
	int i,n;
	char *s;
d120 1
a120 1
#ifndef NO_RSA
d129 1
a129 1
#ifndef NO_DSA
d147 1
a147 1
	if ((sk == NULL) || (sk_X509_ATTRIBUTE_num(sk) == 0))
d149 2
a150 5
		if (!x->req_info->req_kludge)
			{
			sprintf(str,"%12sa0:00\n","");
			if (BIO_puts(bp,str) <= 0) goto err;
			}
d169 7
a175 1
			if (a->set)
a183 6
			else
				{
				t=a->value.single;
				type=t->type;
				bs=t->value.bit_string;
				}
d228 1
a228 4
	i=OBJ_obj2nid(x->sig_alg->algorithm);
	sprintf(str,"%4sSignature Algorithm: %s","",
		(i == NID_undef)?"UNKNOWN":OBJ_nid2ln(i));
	if (BIO_puts(bp,str) <= 0) goto err;
a229 13
	n=x->signature->length;
	s=(char *)x->signature->data;
	for (i=0; i<n; i++)
		{
		if ((i%18) == 0)
			{
			sprintf(str,"\n%8s","");
			if (BIO_puts(bp,str) <= 0) goto err;
			}
		sprintf(str,"%02x%s",(unsigned char)s[i],((i+1) == n)?"":":");
		if (BIO_puts(bp,str) <= 0) goto err;
		}
	if (BIO_puts(bp,"\n") <= 0) goto err;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d122 1
a122 1
	if (pkey->type == EVP_PKEY_RSA)
d131 1
a131 1
		if (pkey->type == EVP_PKEY_DSA)
d140 2
a141 1
	EVP_PKEY_free(pkey);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d65 1
d94 1
d166 2
d207 23
@


1.1
log
@Initial revision
@
text
@d61 4
a64 4
#include "buffer.h"
#include "bn.h"
#include "objects.h"
#include "x509.h"
d67 1
a67 3
int X509_REQ_print_fp(fp,x)
FILE *fp;
X509_REQ *x;
d84 1
a84 3
int X509_REQ_print(bp,x)
BIO *bp;
X509_REQ *x;
d88 2
a89 1
	char *s,*neg;
d92 1
a92 1
	STACK *sk;
d138 2
d145 1
a145 1
	if ((sk == NULL) || (sk_num(sk) == 0))
d155 1
a155 1
		for (i=0; i<sk_num(sk); i++)
d163 1
a163 1
			a=(X509_ATTRIBUTE *)sk_value(sk,i);
d167 1
a167 1

d171 1
a171 1
				count=sk_num(a->value.set);
d173 1
a173 1
				at=(ASN1_TYPE *)sk_value(a->value.set,ii);
d183 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 9
a69 8
#include <openssl/buffer.h>
#include <openssl/bn.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

#ifndef OPENSSL_NO_FP_API
int X509_REQ_print_fp(FILE *fp, X509_REQ *x)
d86 3
a88 1
int X509_REQ_print(BIO *bp, X509_REQ *x)
d91 2
a92 2
	int i;
	const char *neg;
d95 1
a95 2
	STACK_OF(X509_ATTRIBUTE) *sk;
	STACK_OF(X509_EXTENSION) *exts;
d122 2
a123 2
#ifndef OPENSSL_NO_RSA
	if (pkey != NULL && pkey->type == EVP_PKEY_RSA)
d131 2
a132 2
#ifndef OPENSSL_NO_DSA
		if (pkey != NULL && pkey->type == EVP_PKEY_DSA)
a140 3
	if (pkey != NULL)
	    EVP_PKEY_free(pkey);

d146 1
a146 1
	if (sk_X509_ATTRIBUTE_num(sk) == 0)
d148 5
a152 2
		sprintf(str,"%12sa0:00\n","");
		if (BIO_puts(bp,str) <= 0) goto err;
d156 1
a156 1
		for (i=0; i<sk_X509_ATTRIBUTE_num(sk); i++)
d164 1
a164 3
			a=sk_X509_ATTRIBUTE_value(sk,i);
			if(X509_REQ_extension_nid(OBJ_obj2nid(a->object)))
								continue;
d168 2
a169 8
			{
			if (a->single)
				{
				t=a->value.single;
				type=t->type;
				bs=t->value.bit_string;
				}
			else
d172 1
a172 1
				count=sk_ASN1_TYPE_num(a->value.set);
d174 1
a174 1
				at=sk_ASN1_TYPE_value(a->value.set,ii);
d178 6
a183 1
			}
d204 13
a216 17
	exts = X509_REQ_get_extensions(x);
	if(exts) {
		BIO_printf(bp,"%8sRequested Extensions:\n","");
		for (i=0; i<sk_X509_EXTENSION_num(exts); i++) {
			ASN1_OBJECT *obj;
			X509_EXTENSION *ex;
			int j;
			ex=sk_X509_EXTENSION_value(exts, i);
			if (BIO_printf(bp,"%12s","") <= 0) goto err;
			obj=X509_EXTENSION_get_object(ex);
			i2a_ASN1_OBJECT(bp,obj);
			j=X509_EXTENSION_get_critical(ex);
			if (BIO_printf(bp,": %s\n",j?"critical":"","") <= 0)
				goto err;
			if(!X509V3_EXT_print(bp, ex, 0, 16)) {
				BIO_printf(bp, "%16s", "");
				M_ASN1_OCTET_STRING_print(bp,ex->value);
d218 2
a219 1
			if (BIO_write(bp,"\n",1) <= 0) goto err;
d221 1
a221 5
		sk_X509_EXTENSION_pop_free(exts, X509_EXTENSION_free);
	}

	if(!X509_signature_print(bp, x->sig_alg, x->signature)) goto err;

@


1.1.1.3
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d85 1
a85 1
int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflags, unsigned long cflag)
a94 11
	char mlch = ' ';
	int nmindent = 0;

	if((nmflags & XN_FLAG_SEP_MASK) == XN_FLAG_SEP_MULTILINE) {
		mlch = '\n';
		nmindent = 12;
	}

	if(nmflags == X509_FLAG_COMPAT)
		nmindent = 16;

d97 21
a117 30
	if(!(cflag & X509_FLAG_NO_HEADER))
		{
		if (BIO_write(bp,"Certificate Request:\n",21) <= 0) goto err;
		if (BIO_write(bp,"    Data:\n",10) <= 0) goto err;
		}
	if(!(cflag & X509_FLAG_NO_VERSION))
		{
		neg=(ri->version->type == V_ASN1_NEG_INTEGER)?"-":"";
		l=0;
		for (i=0; i<ri->version->length; i++)
			{ l<<=8; l+=ri->version->data[i]; }
		sprintf(str,"%8sVersion: %s%lu (%s0x%lx)\n","",neg,l,neg,l);
		if (BIO_puts(bp,str) <= 0) goto err;
		}
        if(!(cflag & X509_FLAG_NO_SUBJECT))
                {
                if (BIO_printf(bp,"        Subject:%c",mlch) <= 0) goto err;
                if (X509_NAME_print_ex(bp,ri->subject,nmindent, nmflags) < 0) goto err;
                if (BIO_write(bp,"\n",1) <= 0) goto err;
                }
	if(!(cflag & X509_FLAG_NO_PUBKEY))
		{
		if (BIO_write(bp,"        Subject Public Key Info:\n",33) <= 0)
			goto err;
		if (BIO_printf(bp,"%12sPublic Key Algorithm: ","") <= 0)
			goto err;
		if (i2a_ASN1_OBJECT(bp, ri->pubkey->algor->algorithm) <= 0)
			goto err;
		if (BIO_puts(bp, "\n") <= 0)
			goto err;
d119 1
a119 7
		pkey=X509_REQ_get_pubkey(x);
		if (pkey == NULL)
			{
			BIO_printf(bp,"%12sUnable to load Public Key\n","");
			ERR_print_errors(bp);
			}
		else
d121 3
a123 3
		if (pkey->type == EVP_PKEY_RSA)
			{
			BIO_printf(bp,"%12sRSA Public Key: (%d bit)\n","",
d125 3
a127 3
			RSA_print(bp,pkey->pkey.rsa,16);
			}
		else
d130 6
a135 6
		if (pkey->type == EVP_PKEY_DSA)
			{
			BIO_printf(bp,"%12sDSA Public Key:\n","");
			DSA_print(bp,pkey->pkey.dsa,16);
			}
		else
d137 1
a137 1
			BIO_printf(bp,"%12sUnknown Public Key:\n","");
d139 6
a144 2
		EVP_PKEY_free(pkey);
		}
d146 2
a147 1
	if(!(cflag & X509_FLAG_NO_ATTRIBUTES))
d149 1
a149 2
		/* may not be */
		sprintf(str,"%8sAttributes:\n","");
d151 4
a154 3

		sk=x->req_info->attributes;
		if (sk_X509_ATTRIBUTE_num(sk) == 0)
d156 10
a165 1
			sprintf(str,"%12sa0:00\n","");
d167 1
a167 2
			}
		else
d169 1
a169 1
			for (i=0; i<sk_X509_ATTRIBUTE_num(sk); i++)
d171 5
a175 12
				ASN1_TYPE *at;
				X509_ATTRIBUTE *a;
				ASN1_BIT_STRING *bs=NULL;
				ASN1_TYPE *t;
				int j,type=0,count=1,ii=0;

				a=sk_X509_ATTRIBUTE_value(sk,i);
				if(X509_REQ_extension_nid(OBJ_obj2nid(a->object)))
									continue;
				sprintf(str,"%12s","");
				if (BIO_puts(bp,str) <= 0) goto err;
				if ((j=i2a_ASN1_OBJECT(bp,a->object)) > 0)
d177 2
a178 10
				if (a->single)
					{
					t=a->value.single;
					type=t->type;
					bs=t->value.bit_string;
					}
				else
					{
					ii=0;
					count=sk_ASN1_TYPE_num(a->value.set);
d180 3
a182 22
					at=sk_ASN1_TYPE_value(a->value.set,ii);
					type=at->type;
					bs=at->value.asn1_string;
					}
				}
				for (j=25-j; j>0; j--)
					if (BIO_write(bp," ",1) != 1) goto err;
				if (BIO_puts(bp,":") <= 0) goto err;
				if (	(type == V_ASN1_PRINTABLESTRING) ||
					(type == V_ASN1_T61STRING) ||
					(type == V_ASN1_IA5STRING))
					{
					if (BIO_write(bp,(char *)bs->data,bs->length)
						!= bs->length)
						goto err;
					BIO_puts(bp,"\n");
					}
				else
					{
					BIO_puts(bp,"unable to print attribute\n");
					}
				if (++ii < count) goto get_next;
d185 6
a190 8
		}
	if(!(cflag & X509_FLAG_NO_ATTRIBUTES))
		{
		exts = X509_REQ_get_extensions(x);
		if(exts)
			{
			BIO_printf(bp,"%8sRequested Extensions:\n","");
			for (i=0; i<sk_X509_EXTENSION_num(exts); i++)
d192 2
a193 9
				ASN1_OBJECT *obj;
				X509_EXTENSION *ex;
				int j;
				ex=sk_X509_EXTENSION_value(exts, i);
				if (BIO_printf(bp,"%12s","") <= 0) goto err;
				obj=X509_EXTENSION_get_object(ex);
				i2a_ASN1_OBJECT(bp,obj);
				j=X509_EXTENSION_get_critical(ex);
				if (BIO_printf(bp,": %s\n",j?"critical":"","") <= 0)
d195 1
a195 6
				if(!X509V3_EXT_print(bp, ex, 0, 16))
					{
					BIO_printf(bp, "%16s", "");
					M_ASN1_OCTET_STRING_print(bp,ex->value);
					}
				if (BIO_write(bp,"\n",1) <= 0) goto err;
d197 5
a201 1
			sk_X509_EXTENSION_pop_free(exts, X509_EXTENSION_free);
d205 19
a223 3
	if(!(cflag & X509_FLAG_NO_SIGDUMP))
		{
		if(!X509_signature_print(bp, x->sig_alg, x->signature)) goto err;
d225 4
a233 5
	}

int X509_REQ_print(BIO *bp, X509_REQ *x)
	{
	return X509_REQ_print_ex(bp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@d94 1
d119 2
a120 3
		if(BIO_printf(bp,"%8sVersion: %s%lu (%s0x%lx)\n","",neg,l,neg,
			      l) <= 0)
		    goto err;
d171 2
a172 2
		if(BIO_printf(bp,"%8sAttributes:\n","") <= 0)
		    goto err;
d177 2
a178 2
			if(BIO_printf(bp,"%12sa0:00\n","") <= 0)
			    goto err;
d193 2
a194 2
				if(BIO_printf(bp,"%12s","") <= 0)
				    goto err;
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@a65 6
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
a162 8
#ifndef OPENSSL_NO_EC
		if (pkey->type == EVP_PKEY_EC)
		{
			BIO_printf(bp, "%12sEC Public Key: \n","");
			EC_KEY_print(bp, pkey->pkey.ec, 16);
		}
	else
#endif
d233 1
a233 1
	if(!(cflag & X509_FLAG_NO_EXTENSIONS))
d249 1
a249 1
				if (BIO_printf(bp,": %s\n",j?"critical":"") <= 0)
d251 1
a251 1
				if(!X509V3_EXT_print(bp, ex, cflag, 16))
d269 1
a269 1
	X509err(X509_F_X509_REQ_PRINT_EX,ERR_R_BUF_LIB);
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@d152 2
d155 3
a157 2
			EVP_PKEY_print_public(bp, pkey, 16, NULL);
			EVP_PKEY_free(pkey);
d159 21
@


