head	1.12;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.12
date	2017.05.06.17.12.59;	author beck;	state Exp;
branches;
next	1.11;
commitid	xcWAIV7jDGEB7q8O;

1.11
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.10;
commitid	kT0fLt3r4lroFJra;

1.10
date	2016.11.04.18.07.23;	author beck;	state Exp;
branches;
next	1.9;
commitid	pAy02smoQCuRvYaT;

1.9
date	2015.12.12.21.02.59;	author beck;	state Exp;
branches;
next	1.8;
commitid	60JBvdaZGZWaWagz;

1.8
date	2015.10.22.15.38.05;	author jsing;	state Exp;
branches;
next	1.7;
commitid	6rl9c7zBeazmbdXC;

1.7
date	2015.10.22.15.03.19;	author jsing;	state Exp;
branches;
next	1.6;
commitid	uTsgkAr647ymXIas;

1.6
date	2015.10.19.16.32.37;	author beck;	state Exp;
branches;
next	1.5;
commitid	gN6dUlgzg63Qhn8s;

1.5
date	2015.10.08.02.26.31;	author beck;	state Exp;
branches;
next	1.4;
commitid	bD3TqYf40hqwlaJr;

1.4
date	2015.10.06.12.54.24;	author bcook;	state Exp;
branches;
next	1.3;
commitid	DPmCoO57GqHzXMn0;

1.3
date	2015.10.05.06.13.58;	author jsing;	state Exp;
branches;
next	1.2;
commitid	GQiT0SopOWCSJchL;

1.2
date	2015.10.04.15.15.11;	author jsing;	state Exp;
branches;
next	1.1;
commitid	DyPveECcMyzqhOM0;

1.1
date	2015.10.02.15.04.45;	author beck;	state Exp;
branches;
next	;
commitid	qCopm45l75mxQGLg;


desc
@@


1.12
log
@Add ASN1_TIME_set_tm to set an asn1 from a struct tm *
ok jsing@@
@
text
@/* $OpenBSD: a_time_tm.c,v 1.11 2017/01/29 17:49:22 beck Exp $ */
/*
 * Copyright (c) 2015 Bob Beck <beck@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

#include <openssl/asn1t.h>
#include <openssl/err.h>

#include "o_time.h"

#define RFC5280 0
#define GENTIME_LENGTH 15
#define UTCTIME_LENGTH 13

int
ASN1_time_tm_cmp(struct tm *tm1, struct tm *tm2) {
	if (tm1->tm_year < tm2->tm_year)
		return (-1);
	if (tm1->tm_year > tm2->tm_year)
		return (1);
	if (tm1->tm_mon < tm2->tm_mon)
		return (-1);
	if (tm1->tm_mon > tm2->tm_mon)
		return (1);
	if (tm1->tm_mday < tm2->tm_mday)
		return (-1);
	if (tm1->tm_mday > tm2->tm_mday)
		return (1);
	if (tm1->tm_hour < tm2->tm_hour)
		return (-1);
	if (tm1->tm_hour > tm2->tm_hour)
		return (1);
	if (tm1->tm_min < tm2->tm_min)
		return (-1);
	if (tm1->tm_min > tm2->tm_min)
		return (1);
	if (tm1->tm_sec < tm2->tm_sec)
		return (-1);
	if (tm1->tm_sec > tm2->tm_sec)
		return (1);
	return 0;
}

/* Format a time as an RFC 5280 format Generalized time */
char *
gentime_string_from_tm(struct tm *tm)
{
	char *ret = NULL;
	int year;

	year = tm->tm_year + 1900;
	if (year < 0 || year > 9999)
		return (NULL);

	if (asprintf(&ret, "%04u%02u%02u%02u%02u%02uZ", year,
	    tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min,
	    tm->tm_sec) == -1)
		ret = NULL;

	return (ret);
}

/* Format a time as an RFC 5280 format UTC time */
char *
utctime_string_from_tm(struct tm *tm)
{
	char *ret = NULL;

	if (tm->tm_year >= 150 || tm->tm_year < 50)
		return (NULL);

	if (asprintf(&ret, "%02u%02u%02u%02u%02u%02uZ",
	    tm->tm_year % 100,  tm->tm_mon + 1, tm->tm_mday,
	    tm->tm_hour, tm->tm_min, tm->tm_sec) == -1)
		ret = NULL;

	return (ret);
}

/* Format a time correctly for an X509 object as per RFC 5280 */
char *
rfc5280_string_from_tm(struct tm *tm)
{
	char *ret = NULL;
	int year;

	year = tm->tm_year + 1900;
	if (year < 1950 || year > 9999)
		return (NULL);

	if (year < 2050)
		ret = utctime_string_from_tm(tm);
	else
		ret = gentime_string_from_tm(tm);

	return (ret);
}

/*
 * Parse an RFC 5280 format ASN.1 time string.
 *
 * mode must be:
 * 0 if we expect to parse a time as specified in RFC 5280 for an X509 object.
 * V_ASN1_UTCTIME if we wish to parse an RFC5280 format UTC time.
 * V_ASN1_GENERALIZEDTIME if we wish to parse an RFC5280 format Generalized time.
 *
 * Returns:
 * -1 if the string was invalid.
 * V_ASN1_UTCTIME if the string validated as a UTC time string.
 * V_ASN1_GENERALIZEDTIME if the string validated as a Generalized time string.
 *
 * Fills in *tm with the corresponding time if tm is non NULL.
 */
#define	ATOI2(ar)	((ar) += 2, ((ar)[-2] - '0') * 10 + ((ar)[-1] - '0'))
int
ASN1_time_parse(const char *bytes, size_t len, struct tm *tm, int mode)
{
	size_t i;
	int type = 0;
	struct tm ltm;
	struct tm *lt;
	const char *p;

	if (bytes == NULL)
		return (-1);

	/* Constrain to valid lengths. */
	if (len != UTCTIME_LENGTH && len != GENTIME_LENGTH)
		return (-1);

	lt = tm;
	if (lt == NULL) {
		memset(&ltm, 0, sizeof(ltm));
		lt = &ltm;
	}

	/* Timezone is required and must be GMT (Zulu). */
	if (bytes[len - 1] != 'Z')
		return (-1);

	/* Make sure everything else is digits. */
	for (i = 0; i < len - 1; i++) {
		if (isdigit((unsigned char)bytes[i]))
			continue;
		return (-1);
	}

	/*
	 * Validate and convert the time
	 */
	p = bytes;
	switch (len) {
	case GENTIME_LENGTH:
		if (mode == V_ASN1_UTCTIME)
			return (-1);
		lt->tm_year = (ATOI2(p) * 100) - 1900;	/* cc */
		type = V_ASN1_GENERALIZEDTIME;
		/* FALLTHROUGH */
	case UTCTIME_LENGTH:
		if (type == 0) {
			if (mode == V_ASN1_GENERALIZEDTIME)
				return (-1);
			type = V_ASN1_UTCTIME;
		}
		lt->tm_year += ATOI2(p);		/* yy */
		if (type == V_ASN1_UTCTIME) {
			if (lt->tm_year < 50)
				lt->tm_year += 100;
		}
		lt->tm_mon = ATOI2(p) - 1;		/* mm */
		if (lt->tm_mon < 0 || lt->tm_mon > 11)
			return (-1);
		lt->tm_mday = ATOI2(p);			/* dd */
		if (lt->tm_mday < 1 || lt->tm_mday > 31)
			return (-1);
		lt->tm_hour = ATOI2(p);			/* HH */
		if (lt->tm_hour < 0 || lt->tm_hour > 23)
			return (-1);
		lt->tm_min = ATOI2(p);			/* MM */
		if (lt->tm_min < 0 || lt->tm_min > 59)
			return (-1);
		lt->tm_sec = ATOI2(p);			/* SS */
		/* Leap second 60 is not accepted. Reconsider later? */
		if (lt->tm_sec < 0 || lt->tm_sec > 59)
			return (-1);
		break;
	default:
		return (-1);
	}

	return (type);
}

/*
 * ASN1_TIME generic functions.
 */

static int
ASN1_TIME_set_string_internal(ASN1_TIME *s, const char *str, int mode)
{
	int type;
	char *tmp;

	if ((type = ASN1_time_parse(str, strlen(str), NULL, mode)) == -1)
		return (0);
	if (mode != 0 && mode != type)
		return (0);

	if (s == NULL)
		return (1);

	if ((tmp = strdup(str)) == NULL)
		return (0);
	free(s->data);
	s->data = tmp;
	s->length = strlen(tmp);
	s->type = type;

	return (1);
}

static ASN1_TIME *
ASN1_TIME_adj_internal(ASN1_TIME *s, time_t t, int offset_day, long offset_sec,
    int mode)
{
	int allocated = 0;
	struct tm tm;
	size_t len;
	char * p;

 	if (gmtime_r(&t, &tm) == NULL)
 		return (NULL);

	if (offset_day || offset_sec) {
		if (!OPENSSL_gmtime_adj(&tm, offset_day, offset_sec))
			return (NULL);
	}

	switch (mode) {
	case V_ASN1_UTCTIME:
		p = utctime_string_from_tm(&tm);
		break;
	case V_ASN1_GENERALIZEDTIME:
		p = gentime_string_from_tm(&tm);
		break;
	case RFC5280:
		p = rfc5280_string_from_tm(&tm);
		break;
	default:
		return (NULL);
	}
	if (p == NULL) {
		ASN1error(ASN1_R_ILLEGAL_TIME_VALUE);
		return (NULL);
	}

	if (s == NULL) {
		if ((s = ASN1_TIME_new()) == NULL)
			return (NULL);
		allocated = 1;
	}

	len = strlen(p);
	switch (len) {
	case GENTIME_LENGTH:
		s->type = V_ASN1_GENERALIZEDTIME;
		break;
 	case UTCTIME_LENGTH:
		s->type = V_ASN1_UTCTIME;
		break;
	default:
		if (allocated)
			ASN1_TIME_free(s);
		free(p);
		return (NULL);
	}
	free(s->data);
	s->data = p;
	s->length = len;
	return (s);
}

ASN1_TIME *
ASN1_TIME_set(ASN1_TIME *s, time_t t)
{
	return (ASN1_TIME_adj(s, t, 0, 0));
}

ASN1_TIME *
ASN1_TIME_set_tm(ASN1_TIME *s, struct tm *tm)
{
	time_t t;

	if ((t = timegm(tm)) == -1)
		return NULL;
	return (ASN1_TIME_adj(s, t, 0, 0));
}

ASN1_TIME *
ASN1_TIME_adj(ASN1_TIME *s, time_t t, int offset_day, long offset_sec)
{
	return (ASN1_TIME_adj_internal(s, t, offset_day, offset_sec, RFC5280));
}

int
ASN1_TIME_check(ASN1_TIME *t)
{
	if (t->type != V_ASN1_GENERALIZEDTIME && t->type != V_ASN1_UTCTIME)
		return (0);
	return (t->type == ASN1_time_parse(t->data, t->length, NULL, t->type));
}

ASN1_GENERALIZEDTIME *
ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out)
{
	ASN1_GENERALIZEDTIME *tmp = NULL;
	struct tm tm;
	char *str;

	if (t->type != V_ASN1_GENERALIZEDTIME && t->type != V_ASN1_UTCTIME)
		return (NULL);

	memset(&tm, 0, sizeof(tm));
	if (t->type != ASN1_time_parse(t->data, t->length, &tm, t->type))
		return (NULL);
	if ((str = gentime_string_from_tm(&tm)) == NULL)
		return (NULL);

	if (out != NULL)
		tmp = *out;
	if (tmp == NULL && (tmp = ASN1_GENERALIZEDTIME_new()) == NULL) {
		free(str);
		return (NULL);
	}
	if (out != NULL)
		*out = tmp;

	free(tmp->data);
	tmp->data = str;
	tmp->length = strlen(str);
	return (tmp);
}

int
ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
{
	return (ASN1_TIME_set_string_internal(s, str, 0));
}

/*
 * ASN1_UTCTIME wrappers
 */

int
ASN1_UTCTIME_check(ASN1_UTCTIME *d)
{
	if (d->type != V_ASN1_UTCTIME)
		return (0);
	return (d->type == ASN1_time_parse(d->data, d->length, NULL, d->type));
}

int
ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
{
	if (s != NULL && s->type != V_ASN1_UTCTIME)
		return (0);
	return (ASN1_TIME_set_string_internal(s, str, V_ASN1_UTCTIME));
}

ASN1_UTCTIME *
ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
{
	return (ASN1_UTCTIME_adj(s, t, 0, 0));
}

ASN1_UTCTIME *
ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t, int offset_day, long offset_sec)
{
	return (ASN1_TIME_adj_internal(s, t, offset_day, offset_sec,
	    V_ASN1_UTCTIME));
}

int
ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t2)
{
	struct tm tm1, tm2;

	/*
	 * This function has never handled failure conditions properly
	 * and should be deprecated. The OpenSSL version used to
	 * simply follow NULL pointers on failure. BoringSSL and
	 * OpenSSL now make it return -2 on failure.
	 *
	 * The danger is that users of this function will not
	 * differentiate the -2 failure case from t1 < t2.
	 */
	if (ASN1_time_parse(s->data, s->length, &tm1, V_ASN1_UTCTIME) == -1)
		return (-2); /* XXX */

	if (gmtime_r(&t2, &tm2) == NULL)
		return (-2); /* XXX */

	return ASN1_time_tm_cmp(&tm1, &tm2);
}

/*
 * ASN1_GENERALIZEDTIME wrappers
 */

int
ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME *d)
{
	if (d->type != V_ASN1_GENERALIZEDTIME)
		return (0);
	return (d->type == ASN1_time_parse(d->data, d->length, NULL, d->type));
}

int
ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
{
	if (s != NULL && s->type != V_ASN1_GENERALIZEDTIME)
		return (0);
	return (ASN1_TIME_set_string_internal(s, str, V_ASN1_GENERALIZEDTIME));
}

ASN1_GENERALIZEDTIME *
ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s, time_t t)
{
	return (ASN1_GENERALIZEDTIME_adj(s, t, 0, 0));
}

ASN1_GENERALIZEDTIME *
ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s, time_t t, int offset_day,
    long offset_sec)
{
	return (ASN1_TIME_adj_internal(s, t, offset_day, offset_sec,
	    V_ASN1_GENERALIZEDTIME));
}
@


1.11
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.10 2016/11/04 18:07:23 beck Exp $ */
d303 10
@


1.10
log
@make public ASN1_time_parse and ASN1_time_tm_cmp to replace former hidden
functions.. document with a man page.
bump majors on libtls, libssl, libcrypto
ok jsing@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.9 2015/12/12 21:02:59 beck Exp $ */
d270 1
a270 2
		ASN1err(ASN1_F_ASN1_GENERALIZEDTIME_ADJ,
		    ASN1_R_ILLEGAL_TIME_VALUE);
@


1.9
log
@make the counter a size_t as well, which quells a warning on visual studio 2015
ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.8 2015/10/22 15:38:05 jsing Exp $ */
d33 1
a33 1
asn1_tm_cmp(struct tm *tm1, struct tm *tm2) {
d120 2
a121 2
 * 0 if we expect to parse a time as specified in RFC 5280 from an X509 object.
 * V_ASN1_UTCTIME if we wish to parse on RFC5280 format UTC time.
d133 1
a133 1
asn1_time_parse(const char *bytes, size_t len, struct tm *tm, int mode)
d221 1
a221 1
	if ((type = asn1_time_parse(str, strlen(str), NULL, mode)) == -1)
d318 1
a318 1
	return (t->type == asn1_time_parse(t->data, t->length, NULL, t->type));
d332 1
a332 1
	if (t->type != asn1_time_parse(t->data, t->length, &tm, t->type))
d367 1
a367 1
	return (d->type == asn1_time_parse(d->data, d->length, NULL, d->type));
d405 1
a405 1
	if (asn1_time_parse(s->data, s->length, &tm1, V_ASN1_UTCTIME) == -1)
d411 1
a411 1
	return asn1_tm_cmp(&tm1, &tm2);
d423 1
a423 1
	return (d->type == asn1_time_parse(d->data, d->length, NULL, d->type));
@


1.8
log
@Another change that is needed to restore the previous behaviour of
ASN1_{GENERALIZED,UTC}TIME_set_string(), which allows it to be called
with a NULL pointer.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.7 2015/10/22 15:03:19 jsing Exp $ */
d135 2
a136 1
	int i, type = 0;
@


1.7
log
@Restore previous behaviour and allow
ASN1_{GENERALIZED,UTC,}TIME_set_string() to be called with a NULL pointer.

Found the hard way by @@kinichiro on github.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.6 2015/10/19 16:32:37 beck Exp $ */
d372 1
a372 1
	if (s->type != V_ASN1_UTCTIME)
d428 1
a428 1
	if (s->type != V_ASN1_GENERALIZEDTIME)
a445 2


@


1.6
log
@Stop supporing "legcay" time formats that OpenSSL supports. Rewrite the
utctime and gentime wrappers accordingly. Along with some other cleanup.
this also removes the need for timegm.
ok bcook@@ sthen@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.5 2015/10/08 02:26:31 beck Exp $ */
d219 1
a219 1
	
d224 4
d234 1
@


1.5
log
@Spelling in comment
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.4 2015/10/06 12:54:24 bcook Exp $ */
a16 1

a26 1
#include "asn1_locl.h"
d28 34
d80 1
d97 19
d117 1
a117 1
 * Parse an ASN.1 time string.
d120 3
a122 4
 * 0 if we expect to parse a time as specified in RFC 5280 from an
 * X509 certificate.
 * V_ASN1_UTCTIME if we wish to parse a legacy ASN1 UTC time.
 * V_ASN1_GENERALIZEDTIME if we wish to parse a legacy ASN1 Generalized time.
a130 1
#define RFC5280 0
d135 1
a135 2
	char *p, *buf = NULL, *dot = NULL, *tz = NULL;
	int i, offset = 0, noseconds = 0, type = 0, ret = -1;
d138 1
a138 2
	size_t tlen;
	char tzc;
d141 1
a141 8
		goto err;

	if (len > INT_MAX)
		goto err;

	/* Constrain the RFC5280 case within min/max valid lengths. */
	if (mode == RFC5280 && (len < 13 || len > 15))
		goto err;
d143 3
a145 2
	if ((buf = strndup(bytes, len)) == NULL)
		goto err;
d149 2
a150 4
		time_t t = time(NULL);
		lt = gmtime_r(&t, &ltm);
		if (lt == NULL)
			goto err;
d153 7
a159 15
	/*
	 * Find position of the optional fractional seconds, and the
	 * start of the timezone, while ensuring everything else is
	 * digits.
	 */
	for (i = 0; i < len; i++) {
		char *t = buf + i;
		if (isdigit((unsigned char)*t))
			continue;
		if (*t == '.' && dot == NULL && tz == NULL) {
			dot = t;
			continue;
		}
		if ((*t == 'Z' || *t == '+' || *t == '-') && tz == NULL) {
			tz = t;
d161 1
a161 45
		}
		goto err;
	}

	/*
	 * Timezone is required. For the non-RFC case it may be
	 * either Z or +- HHMM, but for RFC5280 it may be only Z.
	 */
	if (tz == NULL)
		goto err;
	tzc = *tz;
	*tz++ = '\0';
	if (tzc == 'Z') {
		if (*tz != '\0')
			goto err;
	} else if (mode != RFC5280 && (tzc == '+' || tzc == '-') &&
	    strlen(tz) == 4) {
		int hours = ATOI2(tz);
		int mins = ATOI2(tz);

		if (hours < 0 || hours > 12 || mins < 0 || mins > 59)
			goto err;
		offset = hours * 3600 + mins * 60;
		if (tzc == '-')
			offset = -offset;
	} else
		goto err;

	if (offset != 0) {
		/* XXX - yuck - OPENSSL_gmtime_adj should go away */
		if (!OPENSSL_gmtime_adj(lt, 0, offset))
			goto err;
	}

	/*
	 * We only allow fractional seconds to be present if we are in
	 * the non-RFC case of a Generalized time. RFC 5280 forbids
	 * fractional seconds.
	 */
	if (dot != NULL) {
		if (mode != V_ASN1_GENERALIZEDTIME)
			goto err;
		*dot++ = '\0';
		if (!isdigit((unsigned char)*dot))
			goto err;
d167 5
a171 4
	p = buf;
	tlen = strlen(buf);
	switch (tlen) {
	case 14:
a172 2
		if (mode != RFC5280 && mode != V_ASN1_GENERALIZEDTIME)
			goto err;
d175 1
a175 13
	case 12:
		if (type == 0 && mode == V_ASN1_GENERALIZEDTIME) {
			/*
			 * In the non-RFC case of a Generalized time
			 * seconds may not have been provided.  RFC
			 * 5280 mandates that seconds must be present.
			 */
			noseconds = 1;
			lt->tm_year = (ATOI2(p) * 100) - 1900;	/* cc */
			type = V_ASN1_GENERALIZEDTIME;
		}
		/* FALLTHROUGH */
	case 10:
a176 6
			/*
			 * At this point we must have a UTC time.
			 * In the RFC 5280 case it must have the
			 * seconds present. In the non-RFC case
			 * may have no seconds.
			 */
d178 1
a178 6
				goto err;
			if (tlen == 10) {
				if (mode != V_ASN1_UTCTIME)
					goto err;
				noseconds = 1;
			}
d188 1
a188 1
			goto err;
d191 1
a191 1
			goto err;
d194 1
a194 1
			goto err;
d196 3
a198 6
		if (lt->tm_hour < 0 || lt->tm_min > 59)
			goto err;
		lt->tm_sec = 0;				/* SS */
		if (noseconds)
			break;
		lt->tm_sec = ATOI2(p);
d200 2
a201 2
		if (lt->tm_hour < 0 || lt->tm_sec > 59)
			goto err;
d204 1
a204 1
		goto err;
d207 129
a335 6
	/* RFC 5280 section 4.1.2.5 */
	if (mode == RFC5280) {
		if (lt->tm_year < 150 && type != V_ASN1_UTCTIME)
			goto err;
		if (lt->tm_year >= 150 && type != V_ASN1_GENERALIZEDTIME)
			goto err;
d337 34
d372 5
a376 1
	ret = type;
d378 11
a388 2
err:
	free(buf);
d390 50
a439 1
	return (ret);
d441 2
@


1.4
log
@prefer limits.h over sys/limits.h

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.3 2015/10/05 06:13:58 jsing Exp $ */
d71 1
a71 2
 * V_ASN1_GENERALIZEDTIME if we wish to parse a legacy ASN1
 * Generalizd time.
@


1.3
log
@Make sure dot is not set after tz - fixes incorrect handling, which allows
20151005171301+1.09Z to be treated as a valid time.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.2 2015/10/04 15:15:11 jsing Exp $ */
d18 2
a22 2
#include <ctype.h>
#include <sys/limits.h>
@


1.2
log
@Apply some style(9), tweak a few things for readability and add some
additional bounds checks.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_time_tm.c,v 1.1 2015/10/02 15:04:45 beck Exp $ */
d123 1
a123 1
		if (*t == '.' && dot == NULL) {
@


1.1
log
@Flense the greasy black guts of unreadble string parsing code out of three areas
in asn1 and x509 code, all dealing with an ASN1_TIME. This brings the parsing
together in one function that converts into a struct tm. While we are at it this
also brings us into conformance with RFC 5280 for times allowed in an X509 cert,
as OpenSSL is very liberal with what it allows.
input and fixes from deraadt@@ jsing@@ guethther@@ and others.
ok krw@@, guenther@@, jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d35 1
d39 1
d44 1
d52 1
d55 1
d60 1
d83 2
a84 1
int asn1_time_parse(const char * bytes, size_t len, struct tm *tm, int mode)
d87 1
a87 1
	int i, offset, noseconds = 0, type = 0;
d99 2
a100 2
	/* Constrain the RFC5280 case within max/min valid lengths. */
	if (mode == RFC5280 && (len > 15 || len < 13))
d105 1
d127 1
a127 1
		if ((*t == 'Z' || *t == '+' || *t == '-')  && tz == NULL) {
a144 1
		offset = 0;
d146 5
a150 5
	    (strlen(tz) == 4)) {
		int hours, mins;
		hours = ATOI2(tz);
		mins = ATOI2(tz);
		if (hours > 12 || mins > 59)
d156 1
a156 1
	    goto err;
d158 1
a158 1
	if (mode != RFC5280) {
d185 1
a185 3
		if (mode == RFC5280 || mode == V_ASN1_GENERALIZEDTIME)
			type = V_ASN1_GENERALIZEDTIME;
		else
d187 1
d212 1
a212 3
				if (mode == V_ASN1_UTCTIME)
					noseconds = 1;
				else
d214 1
d223 2
a224 2
		lt->tm_mon = ATOI2(p);			/* mm */
		if ((lt->tm_mon > 12) || !lt->tm_mon)
a225 1
		--lt->tm_mon;			/* struct tm is 0 - 11 */
d227 1
a227 1
		if ((lt->tm_mday > 31) || !lt->tm_mday)
d230 1
a230 1
		if (lt->tm_hour > 23)
d233 1
a233 1
		if (lt->tm_min > 59)
d240 1
a240 1
		if (lt->tm_sec > 59)
d248 6
a253 6
	if (mode == RFC5280 && lt->tm_year < 150 &&
	    type != V_ASN1_UTCTIME)
		goto err;
	if (mode == RFC5280 && lt->tm_year >= 150 &&
	    type != V_ASN1_GENERALIZEDTIME)
		goto err;
d255 1
a255 2
	free(buf);
	return type;
d259 2
a260 1
	return -1;
@

