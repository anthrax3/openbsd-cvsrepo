head	1.38;
access;
symbols
	OPENBSD_6_1_BASE:1.38;
locks; strict;
comment	@ * @;


1.38
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.37;
commitid	kT0fLt3r4lroFJra;

1.37
date	2016.03.06.18.05.00;	author beck;	state Exp;
branches;
next	1.36;
commitid	qCps317Hh2QPbSQq;

1.36
date	2015.07.29.14.53.20;	author jsing;	state Exp;
branches;
next	1.35;
commitid	30mTjXI1v4H98Azy;

1.35
date	2015.07.27.12.53.56;	author jsing;	state Exp;
branches;
next	1.34;
commitid	Faw5RUshJXkK2Q5m;

1.34
date	2015.02.07.22.30.25;	author miod;	state Exp;
branches;
next	1.33;
commitid	dpPCT3jvM7mLliaT;

1.33
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.32;
commitid	gtwLkRyWx0K1HbzX;

1.32
date	2014.07.11.14.49.12;	author miod;	state Exp;
branches;
next	1.31;
commitid	Iprk1UE5prs8Lrtx;

1.31
date	2014.07.11.14.22.55;	author miod;	state Exp;
branches;
next	1.30;
commitid	MGkUSdoKavvkz6N7;

1.30
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.29;
commitid	yQEL1wOWIearrW15;

1.29
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.28;
commitid	id8dTrTMtnTn4fqt;

1.28
date	2014.07.09.11.10.50;	author bcook;	state Exp;
branches;
next	1.27;
commitid	lHJTcoC4c5BhEOGj;

1.27
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	mJUVYpkFBZ0Zv2bG;

1.26
date	2014.05.30.02.52.11;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2014.04.26.18.56.37;	author beck;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.20.23.30.12;	author beck;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.19.11.43.07;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.19.10.54.26;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.30.15.19.38;	author markus;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.05.11.05.07;	author ho;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2002.09.10.16.31.54;	author markus;	state Exp;
branches
	1.10.2.1
	1.10.4.1;
next	1.9;

1.9
date	2002.08.05.10.42.30;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.02.21.41.00;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.30.11.08.05;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.02.55;	author beck;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2000.12.15.02.57.07;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.41;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.46;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.35.42;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.09.12.20.44.04;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.11.11.21.11.49;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.20.41.33;	author markus;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.04.29.05.37.02;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;

1.5.2.1
date	2002.07.30.11.07.33;	author miod;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.08.05.12.40.19;	author miod;	state Exp;
branches;
next	;

1.5.4.1
date	2002.07.30.15.47.52;	author jason;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.08.05.19.23.24;	author jason;	state Exp;
branches;
next	;

1.10.2.1
date	2003.10.01.22.46.19;	author brad;	state Exp;
branches;
next	;

1.10.4.1
date	2003.10.01.15.58.03;	author margarida;	state Exp;
branches;
next	;

1.11.2.1
date	2003.10.31.00.13.15;	author brad;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: asn1_lib.c,v 1.37 2016/03/06 18:05:00 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <limits.h>
#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/err.h>

static int asn1_get_length(const unsigned char **pp, int *inf, long *rl, int max);
static void asn1_put_length(unsigned char **pp, int length);

static int
_asn1_check_infinite_end(const unsigned char **p, long len)
{
	/* If there is 0 or 1 byte left, the length check should pick
	 * things up */
	if (len <= 0)
		return (1);
	else if ((len >= 2) && ((*p)[0] == 0) && ((*p)[1] == 0)) {
		(*p) += 2;
		return (1);
	}
	return (0);
}

int
ASN1_check_infinite_end(unsigned char **p, long len)
{
	return _asn1_check_infinite_end((const unsigned char **)p, len);
}

int
ASN1_const_check_infinite_end(const unsigned char **p, long len)
{
	return _asn1_check_infinite_end(p, len);
}

int
ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
    int *pclass, long omax)
{
	int i, ret;
	long l;
	const unsigned char *p= *pp;
	int tag, xclass, inf;
	long max = omax;

	if (!max)
		goto err;
	ret = (*p & V_ASN1_CONSTRUCTED);
	xclass = (*p & V_ASN1_PRIVATE);
	i= *p & V_ASN1_PRIMITIVE_TAG;
	if (i == V_ASN1_PRIMITIVE_TAG) {		/* high-tag */
		p++;
		if (--max == 0)
			goto err;
		l = 0;
		while (*p & 0x80) {
			l <<= 7L;
			l |= *(p++) & 0x7f;
			if (--max == 0)
				goto err;
			if (l > (INT_MAX >> 7L))
				goto err;
		}
		l <<= 7L;
		l |= *(p++) & 0x7f;
		tag = (int)l;
		if (--max == 0)
			goto err;
	} else {
		tag = i;
		p++;
		if (--max == 0)
			goto err;
	}
	*ptag = tag;
	*pclass = xclass;
	if (!asn1_get_length(&p, &inf, plength, (int)max))
		goto err;

	if (inf && !(ret & V_ASN1_CONSTRUCTED))
		goto err;

	if (*plength > (omax - (p - *pp))) {
		ASN1error(ASN1_R_TOO_LONG);
		/* Set this so that even if things are not long enough
		 * the values are set correctly */
		ret |= 0x80;
	}
	*pp = p;
	return (ret | inf);

err:
	ASN1error(ASN1_R_HEADER_TOO_LONG);
	return (0x80);
}

static int
asn1_get_length(const unsigned char **pp, int *inf, long *rl, int max)
{
	const unsigned char *p= *pp;
	unsigned long ret = 0;
	unsigned int i;

	if (max-- < 1)
		return (0);
	if (*p == 0x80) {
		*inf = 1;
		ret = 0;
		p++;
	} else {
		*inf = 0;
		i= *p & 0x7f;
		if (*(p++) & 0x80) {
			if (max < (int)i)
				return (0);
			/* skip leading zeroes */
			while (i && *p == 0) {
				p++;
				i--;
			}
			if (i > sizeof(long))
				return 0;
			while (i-- > 0) {
				ret <<= 8L;
				ret |= *(p++);
			}
		} else
			ret = i;
	}
	if (ret > LONG_MAX)
		return 0;
	*pp = p;
	*rl = (long)ret;
	return (1);
}

/* class 0 is constructed
 * constructed == 2 for indefinite length constructed */
void
ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
    int xclass)
{
	unsigned char *p= *pp;
	int i, ttag;

	i = (constructed) ? V_ASN1_CONSTRUCTED : 0;
	i |= (xclass & V_ASN1_PRIVATE);
	if (tag < 31)
		*(p++) = i | (tag & V_ASN1_PRIMITIVE_TAG);
	else {
		*(p++) = i | V_ASN1_PRIMITIVE_TAG;
		for(i = 0, ttag = tag; ttag > 0; i++)
			ttag >>= 7;
		ttag = i;
		while (i-- > 0) {
			p[i] = tag & 0x7f;
			if (i != (ttag - 1))
				p[i] |= 0x80;
			tag >>= 7;
		}
		p += ttag;
	}
	if (constructed == 2)
		*(p++) = 0x80;
	else
		asn1_put_length(&p, length);
	*pp = p;
}

int
ASN1_put_eoc(unsigned char **pp)
{
	unsigned char *p = *pp;

	*p++ = 0;
	*p++ = 0;
	*pp = p;
	return 2;
}

static void
asn1_put_length(unsigned char **pp, int length)
{
	unsigned char *p= *pp;

	int i, l;
	if (length <= 127)
		*(p++) = (unsigned char)length;
	else {
		l = length;
		for (i = 0; l > 0; i++)
			l >>= 8;
		*(p++) = i | 0x80;
		l = i;
		while (i-- > 0) {
			p[i] = length & 0xff;
			length >>= 8;
		}
		p += l;
	}
	*pp = p;
}

int
ASN1_object_size(int constructed, int length, int tag)
{
	int ret;

	ret = length;
	ret++;
	if (tag >= 31) {
		while (tag > 0) {
			tag >>= 7;
			ret++;
		}
	}
	if (constructed == 2)
		return ret + 3;
	ret++;
	if (length > 127) {
		while (length > 0) {
			length >>= 8;
			ret++;
		}
	}
	return (ret);
}

static int
_asn1_Finish(ASN1_const_CTX *c)
{
	if ((c->inf == (1|V_ASN1_CONSTRUCTED)) && (!c->eos)) {
		if (!ASN1_const_check_infinite_end(&c->p, c->slen)) {
			c->error = ERR_R_MISSING_ASN1_EOS;
			return (0);
		}
	}
	if (((c->slen != 0) && !(c->inf & 1)) ||
	    ((c->slen < 0) && (c->inf & 1))) {
		c->error = ERR_R_ASN1_LENGTH_MISMATCH;
		return (0);
	}
	return (1);
}

int
asn1_Finish(ASN1_CTX *c)
{
	return _asn1_Finish((ASN1_const_CTX *)c);
}

int
asn1_const_Finish(ASN1_const_CTX *c)
{
	return _asn1_Finish(c);
}

int
asn1_GetSequence(ASN1_const_CTX *c, long *length)
{
	const unsigned char *q;

	q = c->p;
	c->inf = ASN1_get_object(&(c->p), &(c->slen), &(c->tag), &(c->xclass),
	    *length);
	if (c->inf & 0x80) {
		c->error = ERR_R_BAD_GET_ASN1_OBJECT_CALL;
		return (0);
	}
	if (c->tag != V_ASN1_SEQUENCE) {
		c->error = ERR_R_EXPECTING_AN_ASN1_SEQUENCE;
		return (0);
	}
	(*length) -= (c->p - q);
	if (c->max && (*length < 0)) {
		c->error = ERR_R_ASN1_LENGTH_MISMATCH;
		return (0);
	}
	if (c->inf == (1|V_ASN1_CONSTRUCTED))
		c->slen= *length+ *(c->pp) - c->p;
	c->eos = 0;
	return (1);
}

int
ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
{
	if (str == NULL)
		return 0;
	dst->type = str->type;
	if (!ASN1_STRING_set(dst, str->data, str->length))
		return 0;
	dst->flags = str->flags;
	return 1;
}

ASN1_STRING *
ASN1_STRING_dup(const ASN1_STRING *str)
{
	ASN1_STRING *ret;

	if (!str)
		return NULL;
	ret = ASN1_STRING_new();
	if (!ret)
		return NULL;
	if (!ASN1_STRING_copy(ret, str)) {
		ASN1_STRING_free(ret);
		return NULL;
	}
	return ret;
}

int
ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
{
	const char *data = _data;

	if (len < 0) {
		if (data == NULL)
			return (0);
		else
			len = strlen(data);
	}
	if ((str->length < len) || (str->data == NULL)) {
		unsigned char *tmp;
		tmp = realloc(str->data, len + 1);
		if (tmp == NULL) {
			ASN1error(ERR_R_MALLOC_FAILURE);
			return (0);
		}
		str->data = tmp;
	}
	str->length = len;
	if (data != NULL) {
		memmove(str->data, data, len);
	}
	str->data[str->length]='\0';
	return (1);
}

void
ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
{
	if (str->data != NULL)
		explicit_bzero(str->data, str->length);
	free(str->data);
	str->data = data;
	str->length = len;
}

ASN1_STRING *
ASN1_STRING_new(void)
{
	return (ASN1_STRING_type_new(V_ASN1_OCTET_STRING));
}

ASN1_STRING *
ASN1_STRING_type_new(int type)
{
	ASN1_STRING *ret;

	ret = malloc(sizeof(ASN1_STRING));
	if (ret == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return (NULL);
	}
	ret->length = 0;
	ret->type = type;
	ret->data = NULL;
	ret->flags = 0;
	return (ret);
}

void
ASN1_STRING_free(ASN1_STRING *a)
{
	if (a == NULL)
		return;
	if (a->data != NULL && !(a->flags & ASN1_STRING_FLAG_NDEF)) {
		explicit_bzero(a->data, a->length);
		free(a->data);
	}
	free(a);
}

int
ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
{
	int i;

	i = (a->length - b->length);
	if (i == 0) {
		i = memcmp(a->data, b->data, a->length);
		if (i == 0)
			return (a->type - b->type);
		else
			return (i);
	} else
		return (i);
}

void
asn1_add_error(const unsigned char *address, int offset)
{
	ERR_asprintf_error_data("offset=%d", offset);
}

int
ASN1_STRING_length(const ASN1_STRING *x)
{
	return (x->length);
}

void
ASN1_STRING_length_set(ASN1_STRING *x, int len)
{
	x->length = len;
}

int
ASN1_STRING_type(ASN1_STRING *x)
{
	return (x->type);
}

unsigned char *
ASN1_STRING_data(ASN1_STRING *x)
{
	return (x->data);
}
@


1.37
log
@explict_bzero for some asn1 free's - ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.36 2015/07/29 14:53:20 jsing Exp $ */
d143 1
a143 1
		ASN1err(ASN1_F_ASN1_GET_OBJECT, ASN1_R_TOO_LONG);
d152 1
a152 1
	ASN1err(ASN1_F_ASN1_GET_OBJECT, ASN1_R_HEADER_TOO_LONG);
d388 1
a388 1
			ASN1err(ASN1_F_ASN1_STRING_SET, ERR_R_MALLOC_FAILURE);
d424 1
a424 1
		ASN1err(ASN1_F_ASN1_STRING_TYPE_NEW, ERR_R_MALLOC_FAILURE);
@


1.36
log
@Expand obsolete M_ASN1_STRING_* macros in asn1_lib.c, apply some style(9)
and drop an unnecessary return from a void function.

ok bcook@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.35 2015/07/27 12:53:56 jsing Exp $ */
d404 2
d439 2
a440 1
	if (a->data && !(a->flags & ASN1_STRING_FLAG_NDEF))
d442 1
@


1.35
log
@Less asn1_mac.h - asn1_lib.c does not need it and x_pkey.c should be
using ASN1err() instead of ASN1_MAC_H_err().

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.34 2015/02/07 22:30:25 miod Exp $ */
d467 1
a467 1
	return M_ASN1_STRING_length(x);
d473 1
a473 2
	M_ASN1_STRING_length_set(x, len);
	return;
d479 1
a479 1
	return M_ASN1_STRING_type(x);
d485 1
a485 1
	return M_ASN1_STRING_data(x);
@


1.34
log
@Don't leak addresses in error messages.
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.33 2015/02/07 13:19:15 doug Exp $ */
a63 1
#include <openssl/asn1_mac.h>
@


1.33
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.32 2014/07/11 14:49:12 miod Exp $ */
d462 1
a462 1
	ERR_asprintf_error_data("address=%p offset=%d", address, offset);
@


1.32
log
@In ASN1_get_object(), reject primitive encodings using the indefinite length
constructed form. OpenSSL PR #2438 via OpenSSL trunk
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.31 2014/07/11 14:22:55 miod Exp $ */
a142 6
#if 0
	fprintf(stderr, "p=%d + *plength=%ld > omax=%ld + *pp=%d  (%d > %d)\n",
	    (int)p, *plength, omax, (int)*pp, (int)(p+ *plength),
	    (int)(omax+ *pp));

#endif
@


1.31
log
@In asn1_get_length(), tolerate leading zeroes in BER encoding.
OpenSSL PR #2746 via OpenSSL trunk
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.30 2014/07/11 08:44:47 jsing Exp $ */
d138 3
@


1.30
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.29 2014/07/10 13:58:22 jsing Exp $ */
d177 7
a185 2
			if (max-- == 0)
				return (0);
a188 2
				if (max-- == 0)
					return (0);
@


1.29
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.28 2014/07/09 11:10:50 bcook Exp $ */
a62 1
#include "cryptlib.h"
d65 1
@


1.28
log
@remove unused, private version strings except SSL_version_str

Also remove unused des_ver.h, which exports some of these strings, but is not installed.

ok miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1_lib.c,v 1.27 2014/06/12 15:49:27 deraadt Exp $ */
d59 1
d61 2
a62 1
#include <limits.h>
@


1.27
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a66 1
const char ASN1_version[]="ASN.1" OPENSSL_VERSION_PTEXT;
@


1.26
log
@no need for null check before free. from Brendan MacDonell
@
text
@d1 1
a1 1
/* crypto/asn1/asn1_lib.c */
@


1.25
log
@Replace all use of ERR_add_error_data with ERR_asprintf_error_data.
This avoids a lot of ugly gymnastics to do snprintfs before sending the
bag of strings to ERR, and eliminates at least one place in dso_dlfctn.c
where it was being called with the incorrect number of arguments and
using random things off the stack as addresses of strings.
ok krw@@, jsing@@
@
text
@d404 1
a404 2
	if (str->data)
		free(str->data);
@


1.24
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d462 1
a462 4
	char tmp[128];
	(void) snprintf(tmp, sizeof(tmp), "address=%p offset=%d",
	    address, offset);
	ERR_add_error_data(1, tmp);
@


1.23
log
@ASN1_STRING cleanup - realloc has handled NULL since I had a mullet
and parachute pants - and since it's obvious there is no guarantee
the caller doesn't pass in the data area in the argument, use memmove
instead of memcpy so overlapping areas are handled correctly.
 Also, pointers can be usefully printed in hex with %p, in error messaeges
rather than the bizzaro stuff that was there using mystical buffer lengths
and abuse of strlcpy-converted-blindly-from-strcpy
@
text
@d421 1
a421 1
	ret = (ASN1_STRING *)malloc(sizeof(ASN1_STRING));
@


1.22
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@a375 1
	unsigned char *c;
d385 3
a387 7
		c = str->data;
		if (c == NULL)
			str->data = malloc(len + 1);
		else
			str->data = realloc(c, len + 1);

		if (str->data == NULL) {
a388 1
			str->data = c;
d391 1
d395 1
a395 3
		memcpy(str->data, data, len);
		/* an allowance for strings :-) */
		str->data[len]='\0';
d397 1
d462 4
a465 5
	char buf1[DECIMAL_SIZE(address) + 1], buf2[DECIMAL_SIZE(offset) + 1];

	snprintf(buf1, sizeof buf1, "%lu", (unsigned long)address);
	snprintf(buf2, sizeof buf2, "%d", offset);
	ERR_add_error_data(4, "address=", buf1, " offset=", buf2);
@


1.21
log
@More KNF.
@
text
@d470 2
a471 2
	(void) snprintf(buf1, sizeof buf1, "%lu", (unsigned long)address);
	(void) snprintf(buf2, sizeof buf2, "%d", offset);
@


1.20
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d65 1
a65 1
static int asn1_get_length(const unsigned char **pp,int *inf,long *rl,int max);
d69 2
a70 1
static int _asn1_check_infinite_end(const unsigned char **p, long len)
d75 1
a75 1
		return(1);
d77 2
a78 2
		(*p)+=2;
		return(1);
d80 1
a80 1
	return(0);
d83 2
a84 1
int ASN1_check_infinite_end(unsigned char **p, long len)
d89 2
a90 1
int ASN1_const_check_infinite_end(const unsigned char **p, long len)
d95 3
a97 3

int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
	int *pclass, long omax)
d99 1
a99 1
	int i,ret;
d102 2
a103 2
	int tag,xclass,inf;
	long max=omax;
d105 5
a109 4
	if (!max) goto err;
	ret=(*p&V_ASN1_CONSTRUCTED);
	xclass=(*p&V_ASN1_PRIVATE);
	i= *p&V_ASN1_PRIMITIVE_TAG;
d112 10
a121 7
		if (--max == 0) goto err;
		l=0;
		while (*p&0x80) {
			l<<=7L;
			l|= *(p++)&0x7f;
			if (--max == 0) goto err;
			if (l > (INT_MAX >> 7L)) goto err;
d123 7
a129 6
		l<<=7L;
		l|= *(p++)&0x7f;
		tag=(int)l;
		if (--max == 0) goto err;
	} else { 
		tag=i;
d131 2
a132 1
		if (--max == 0) goto err;
d134 4
a137 3
	*ptag=tag;
	*pclass=xclass;
	if (!asn1_get_length(&p,&inf,plength,(int)max)) goto err;
d140 3
a142 3
	fprintf(stderr,"p=%d + *plength=%ld > omax=%ld + *pp=%d  (%d > %d)\n", 
		(int)p,*plength,omax,(int)*pp,(int)(p+ *plength),
		(int)(omax+ *pp));
d146 1
a146 1
		ASN1err(ASN1_F_ASN1_GET_OBJECT,ASN1_R_TOO_LONG);
d149 1
a149 1
		ret|=0x80;
d151 3
a153 2
	*pp=p;
	return(ret|inf);
d155 2
a156 2
	ASN1err(ASN1_F_ASN1_GET_OBJECT,ASN1_R_HEADER_TOO_LONG);
	return(0x80);
d159 2
a160 1
static int asn1_get_length(const unsigned char **pp, int *inf, long *rl, int max)
d163 1
a163 1
	unsigned long ret=0;
d166 2
a167 1
	if (max-- < 1) return(0);
d169 2
a170 2
		*inf=1;
		ret=0;
d173 2
a174 2
		*inf=0;
		i= *p&0x7f;
d178 2
a179 1
			if (max-- == 0) return(0);
d181 4
a184 3
				ret<<=8L;
				ret|= *(p++);
				if (max-- == 0) return(0);
d186 2
a187 3
		}
		else
			ret=i;
d191 3
a193 3
	*pp=p;
	*rl=(long)ret;
	return(1);
d198 3
a200 2
void ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
	     int xclass)
d205 2
a206 2
	i=(constructed)?V_ASN1_CONSTRUCTED:0;
	i|=(xclass&V_ASN1_PRIVATE);
d208 1
a208 1
		*(p++)=i|(tag&V_ASN1_PRIMITIVE_TAG);
d210 3
a212 2
		*(p++)=i|V_ASN1_PRIMITIVE_TAG;
		for(i = 0, ttag = tag; ttag > 0; i++) ttag >>=7;
d214 1
a214 1
		while(i-- > 0) {
d216 2
a217 1
			if(i != (ttag - 1)) p[i] |= 0x80;
d223 1
a223 1
		*(p++)=0x80;
d225 2
a226 2
		asn1_put_length(&p,length);
	*pp=p;
d229 2
a230 1
int ASN1_put_eoc(unsigned char **pp)
d233 1
d240 2
a241 1
static void asn1_put_length(unsigned char **pp, int length)
d244 2
a245 1
	int i,l;
d247 1
a247 1
		*(p++)=(unsigned char)length;
d249 5
a253 5
		l=length;
		for (i=0; l > 0; i++)
			l>>=8;
		*(p++)=i|0x80;
		l=i;
d255 2
a256 2
			p[i]=length&0xff;
			length>>=8;
d258 1
a258 1
		p+=l;
d260 1
a260 1
	*pp=p;
d263 2
a264 1
int ASN1_object_size(int constructed, int length, int tag)
d268 1
a268 1
	ret=length;
d272 1
a272 1
			tag>>=7;
d281 1
a281 1
			length>>=8;
d285 1
a285 1
	return(ret);
d288 2
a289 1
static int _asn1_Finish(ASN1_const_CTX *c)
d292 3
a294 3
		if (!ASN1_const_check_infinite_end(&c->p,c->slen)) {
			c->error=ERR_R_MISSING_ASN1_EOS;
			return(0);
d297 4
a300 4
	if (	((c->slen != 0) && !(c->inf & 1)) ||
		((c->slen < 0) && (c->inf & 1))) {
		c->error=ERR_R_ASN1_LENGTH_MISMATCH;
		return(0);
d302 1
a302 1
	return(1);
d305 2
a306 1
int asn1_Finish(ASN1_CTX *c)
d311 2
a312 1
int asn1_const_Finish(ASN1_const_CTX *c)
d317 2
a318 1
int asn1_GetSequence(ASN1_const_CTX *c, long *length)
d322 3
a324 3
	q=c->p;
	c->inf=ASN1_get_object(&(c->p),&(c->slen),&(c->tag),&(c->xclass),
		*length);
d326 2
a327 2
		c->error=ERR_R_BAD_GET_ASN1_OBJECT_CALL;
		return(0);
d330 2
a331 2
		c->error=ERR_R_EXPECTING_AN_ASN1_SEQUENCE;
		return(0);
d333 1
a333 1
	(*length)-=(c->p-q);
d335 2
a336 2
		c->error=ERR_R_ASN1_LENGTH_MISMATCH;
		return(0);
d339 3
a341 3
		c->slen= *length+ *(c->pp)-c->p;
	c->eos=0;
	return(1);
d344 2
a345 1
int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
d350 1
a350 1
	if (!ASN1_STRING_set(dst,str->data,str->length))
d356 2
a357 1
ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *str)
d360 1
d362 2
a363 2
		 return NULL;
	ret=ASN1_STRING_new();
d366 1
a366 1
	if (!ASN1_STRING_copy(ret,str)) {
d373 2
a374 1
int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
d377 1
a377 1
	const char *data=_data;
d381 1
a381 1
			return(0);
d383 1
a383 1
			len=strlen(data);
d386 1
a386 1
		c=str->data;
d388 1
a388 1
			str->data=malloc(len+1);
d390 1
a390 1
			str->data=realloc(c,len+1);
d393 3
a395 3
			ASN1err(ASN1_F_ASN1_STRING_SET,ERR_R_MALLOC_FAILURE);
			str->data=c;
			return(0);
d398 1
a398 1
	str->length=len;
d400 1
a400 1
		memcpy(str->data,data,len);
d404 1
a404 1
	return(1);
d407 2
a408 1
void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
d416 2
a417 1
ASN1_STRING *ASN1_STRING_new(void)
d419 1
a419 1
	return(ASN1_STRING_type_new(V_ASN1_OCTET_STRING));
d422 2
a423 2

ASN1_STRING *ASN1_STRING_type_new(int type)
d427 1
a427 1
	ret=(ASN1_STRING *)malloc(sizeof(ASN1_STRING));
d429 2
a430 2
		ASN1err(ASN1_F_ASN1_STRING_TYPE_NEW,ERR_R_MALLOC_FAILURE);
		return(NULL);
d432 5
a436 5
	ret->length=0;
	ret->type=type;
	ret->data=NULL;
	ret->flags=0;
	return(ret);
d439 2
a440 1
void ASN1_STRING_free(ASN1_STRING *a)
d442 2
a443 1
	if (a == NULL) return;
d449 2
a450 1
int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
d454 1
a454 1
	i=(a->length-b->length);
d456 1
a456 1
		i=memcmp(a->data,b->data,a->length);
d458 1
a458 1
			return(a->type-b->type);
d460 3
a462 4
			return(i);
	}
	else
		return(i);
d465 2
a466 1
void asn1_add_error(const unsigned char *address, int offset)
d468 1
a468 1
	char buf1[DECIMAL_SIZE(address)+1],buf2[DECIMAL_SIZE(offset)+1];
d470 3
a472 3
	(void) snprintf(buf1,sizeof buf1,"%lu",(unsigned long)address);
	(void) snprintf(buf2,sizeof buf2,"%d",offset);
	ERR_add_error_data(4,"address=",buf1," offset=",buf2);
d475 5
a479 2
int ASN1_STRING_length(const ASN1_STRING *x)
{ return M_ASN1_STRING_length(x); }
d481 6
a486 2
void ASN1_STRING_length_set(ASN1_STRING *x, int len)
{ M_ASN1_STRING_length_set(x, len); return; }
d488 5
a492 2
int ASN1_STRING_type(ASN1_STRING *x)
{ return M_ASN1_STRING_type(x); }
d494 5
a498 2
unsigned char * ASN1_STRING_data(ASN1_STRING *x)
{ return M_ASN1_STRING_data(x); }
@


1.19
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d75 1
a75 2
	else if ((len >= 2) && ((*p)[0] == 0) && ((*p)[1] == 0))
	{
d106 1
a106 2
	if (i == V_ASN1_PRIMITIVE_TAG)
	{		/* high-tag */
d110 1
a110 2
		while (*p&0x80)
		{
d120 1
a120 3
	}
	else
	{ 
d135 1
a135 2
	if (*plength > (omax - (p - *pp)))
	{
d155 1
a155 2
	if (*p == 0x80)
	{
d159 1
a159 3
	}
	else
	{
d162 1
a162 2
		if (*(p++) & 0x80)
		{
d166 1
a166 2
			while (i-- > 0)
			{
d194 1
a194 2
	else
	{
d198 1
a198 2
		while(i-- > 0)
		{
d227 1
a227 2
	else
	{
d233 1
a233 2
		while (i-- > 0)
		{
d248 2
a249 4
	if (tag >= 31)
	{
		while (tag > 0)
		{
d257 2
a258 4
	if (length > 127)
	{
		while (length > 0)
		{
d268 2
a269 4
	if ((c->inf == (1|V_ASN1_CONSTRUCTED)) && (!c->eos))
	{
		if (!ASN1_const_check_infinite_end(&c->p,c->slen))
		{
d275 1
a275 2
		((c->slen < 0) && (c->inf & 1)))
	{
d299 1
a299 2
	if (c->inf & 0x80)
	{
d303 1
a303 2
	if (c->tag != V_ASN1_SEQUENCE)
	{
d308 1
a308 2
	if (c->max && (*length < 0))
	{
d337 1
a337 2
	if (!ASN1_STRING_copy(ret,str))
	{
d349 1
a349 2
	if (len < 0)
	{
d355 1
a355 2
	if ((str->length < len) || (str->data == NULL))
	{
d362 1
a362 2
		if (str->data == NULL)
		{
d369 1
a369 2
	if (data != NULL)
	{
d396 1
a396 2
	if (ret == NULL)
	{
d420 1
a420 2
	if (i == 0)
	{
@


1.18
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d70 1
a70 1
	{
d76 1
a76 1
		{
d79 1
a79 1
		}
d81 1
a81 1
	}
d84 1
a84 1
	{
d86 1
a86 1
	}
d89 1
a89 1
	{
d91 1
a91 1
	}
d96 1
a96 1
	{
d108 1
a108 1
		{		/* high-tag */
d113 1
a113 1
			{
d118 1
a118 1
			}
d123 1
a123 1
		}
d125 1
a125 1
		{ 
d129 1
a129 1
		}
d141 1
a141 1
		{
d146 1
a146 1
		}
d152 1
a152 1
	}
d155 1
a155 1
	{
d162 1
a162 1
		{
d166 1
a166 1
		}
d168 1
a168 1
		{
d172 1
a172 1
			{
d177 1
a177 1
				{
a180 1
				}
d182 1
d185 1
a185 1
		}
d191 1
a191 1
	}
d197 1
a197 1
	{
d206 1
a206 1
		{
d211 1
a211 1
			{
d215 1
a215 1
			}
d217 1
a217 1
		}
d223 1
a223 1
	}
d226 1
a226 1
	{
d232 1
a232 1
	}
d235 1
a235 1
	{
d241 1
a241 1
		{
d248 1
a248 1
			{
d251 1
a251 1
			}
d253 1
a253 1
		}
d255 1
a255 1
	}
d258 1
a258 1
	{
d264 2
a266 2
		while (tag > 0)
			{
a268 1
			}
d270 1
d275 2
a277 2
		while (length > 0)
			{
a279 1
			}
d281 1
d283 1
a283 1
	}
d286 2
d289 1
a289 1
	if ((c->inf == (1|V_ASN1_CONSTRUCTED)) && (!c->eos))
a290 2
		if (!ASN1_const_check_infinite_end(&c->p,c->slen))
			{
a292 1
			}
d294 1
d297 1
a297 1
		{
d300 1
a300 1
		}
d302 1
a302 1
	}
d305 1
a305 1
	{
d307 1
a307 1
	}
d310 1
a310 1
	{
d312 1
a312 1
	}
d315 1
a315 1
	{
d322 1
a322 1
		{
d325 1
a325 1
		}
d327 1
a327 1
		{
d330 1
a330 1
		}
d333 1
a333 1
		{
d336 1
a336 1
		}
d341 1
a341 1
	}
d344 1
a344 1
	{
d352 1
a352 1
	}
d355 1
a355 1
	{
d363 1
a363 1
		{
d366 1
a366 1
		}
d368 1
a368 1
	}
d371 1
a371 1
	{
d376 1
a376 1
		{
d381 1
a381 1
		}
d383 1
a383 1
		{
d391 1
a391 1
			{
a394 1
			}
d396 1
d399 1
a399 1
		{
d403 1
a403 1
		}
d405 1
a405 1
	}
d408 1
a408 1
	{
d413 1
a413 1
	}
d416 1
a416 1
	{
d418 1
a418 1
	}
d422 1
a422 1
	{
d427 1
a427 1
		{
d430 1
a430 1
		}
d436 1
a436 1
	}
d439 1
a439 1
	{
d444 1
a444 1
	}
d447 1
a447 1
	{
d452 1
a452 1
		{
d458 1
a458 1
		}
d461 1
a461 1
	}
d464 1
a464 1
	{
d470 1
a470 1
	}
@


1.17
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@d386 1
a386 1
			str->data=OPENSSL_malloc(len+1);
d388 1
a388 1
			str->data=OPENSSL_realloc(c,len+1);
d410 1
a410 1
		OPENSSL_free(str->data);
d425 1
a425 1
	ret=(ASN1_STRING *)OPENSSL_malloc(sizeof(ASN1_STRING));
d442 2
a443 2
		OPENSSL_free(a->data);
	OPENSSL_free(a);
@


1.16
log
@resolve conflicts, fix local changes
@
text
@d467 2
a468 2
	BIO_snprintf(buf1,sizeof buf1,"%lu",(unsigned long)address);
	BIO_snprintf(buf2,sizeof buf2,"%d",offset);
@


1.15
log
@resolve conflicts
@
text
@d343 12
a354 1
ASN1_STRING *ASN1_STRING_dup(ASN1_STRING *str)
d357 6
a362 5

	if (str == NULL) return(NULL);
	if ((ret=ASN1_STRING_type_new(str->type)) == NULL)
		return(NULL);
	if (!ASN1_STRING_set(ret,str->data,str->length))
d365 1
a365 1
		return(NULL);
d367 1
a367 2
	ret->flags = str->flags;
	return(ret);
d441 2
a442 1
	if (a->data != NULL) OPENSSL_free(a->data);
d446 1
a446 1
int ASN1_STRING_cmp(ASN1_STRING *a, ASN1_STRING *b)
d472 1
a472 1
int ASN1_STRING_length(ASN1_STRING *x)
@


1.14
log
@resolve conflicts
@
text
@d65 1
a65 1
static int asn1_get_length(unsigned char **pp,int *inf,long *rl,int max);
d67 1
a67 1
const char *ASN1_version="ASN.1" OPENSSL_VERSION_PTEXT;
d69 1
a69 1
int ASN1_check_infinite_end(unsigned char **p, long len)
d83 4
d88 8
a95 2
int ASN1_get_object(unsigned char **pp, long *plength, int *ptag, int *pclass,
	     long omax)
d99 1
a99 1
	unsigned char *p= *pp;
d154 1
a154 1
static int asn1_get_length(unsigned char **pp, int *inf, long *rl, int max)
d156 1
a156 1
	unsigned char *p= *pp;
d158 1
a158 1
	int i;
d218 2
a219 2
	if ((constructed == 2) && (length == 0))
		*(p++)=0x80; /* der_put_length would output 0 instead */
d225 9
d271 2
a272 2
	if ((length == 0) && (constructed == 2))
		ret+=2;
d285 1
a285 1
int asn1_Finish(ASN1_CTX *c)
d289 1
a289 1
		if (!ASN1_check_infinite_end(&c->p,c->slen))
d304 6
a309 1
int asn1_GetSequence(ASN1_CTX *c, long *length)
d311 6
a316 1
	unsigned char *q;
d396 8
d451 1
a451 1
void asn1_add_error(unsigned char *address, int offset)
@


1.13
log
@merge 0.9.7d
@
text
@d352 1
@


1.12
log
@security fix from http://www.openssl.org/news/secadv_20030930.txt
see also http://cvs.openssl.org/chngview?cn=11471
@
text
@d417 2
a418 2
	snprintf(buf1,sizeof buf1,"%lu",(unsigned long)address);
	snprintf(buf2,sizeof buf2,"%d",offset);
@


1.11
log
@Trivial sprintf() -> snprintf() changes. ok deraadt@@
@
text
@d107 1
d112 1
@


1.11.2.1
log
@Pull patch from -current:
SECURITY FIX
Fixed by markus@@
security fix from http://www.openssl.org/news/secadv_20030930.txt

ok markus@@ deraadt@@
@
text
@a106 1
			if (l > (INT_MAX >> 7L)) goto err;
a110 1
		if (--max == 0) goto err;
@


1.10
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d415 2
a416 2
	sprintf(buf1,"%lu",(unsigned long)address);
	sprintf(buf2,"%d",offset);
@


1.10.2.1
log
@Pull patch from -current:
SECURITY FIX
Fixed by markus@@
security fix from http://www.openssl.org/news/secadv_20030930.txt

ok markus@@ deraadt@@
@
text
@a106 1
			if (l > (INT_MAX >> 7L)) goto err;
a110 1
		if (--max == 0) goto err;
@


1.10.4.1
log
@Pull patch from -current:
SECURITY FIX
Fixed by markus@@
security fix from http://www.openssl.org/news/secadv_20030930.txt

ok markus@@ deraadt@@
@
text
@a106 1
			if (l > (INT_MAX >> 7L)) goto err;
a110 1
		if (--max == 0) goto err;
@


1.9
log
@Better fixes from openssl cvs; from markus@@
@
text
@d63 1
@


1.8
log
@typo; from openssl cvs
@
text
@d60 1
d144 1
a144 1
	long ret=0;
d173 1
a173 1
	if (ret < 0)
d176 1
a176 1
	*rl=ret;
@


1.7
log
@apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@d126 1
a126 1
	if (*plength > (omax - (*pp - p)))
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d126 1
a126 2
#if 0
	if ((p+ *plength) > (omax+ *pp))
a132 1
#endif
d159 2
d172 2
d411 1
a411 1
	char buf1[16],buf2[16];
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@a61 1
#include <openssl/asn1_mac.h>
d303 1
a303 1
		c->slen= *length;
@


1.5.4.1
log
@Pull in patch from current:
Fix (markus), errata 013:
apply patches from OpenSSL Security Advisory [30 July 2002],
http://marc.theaimsgroup.com/?l=openssl-dev&m=102802395104110&w=2
@
text
@d127 2
a128 1
	if (*plength > (omax - (*pp - p)))
d135 1
a161 2
			if (i > sizeof(long))
				return 0;
a172 2
	if (ret < 0)
		return 0;
d410 1
a410 1
	char buf1[DECIMAL_SIZE(address)+1],buf2[DECIMAL_SIZE(offset)+1];
@


1.5.4.2
log
@Pull in patch from current:
Better fixes from openssl cvs; from markus@@
@
text
@a59 1
#include <limits.h>
d127 1
a127 1
	if (*plength > (omax - (p - *pp)))
d144 1
a144 1
	unsigned long ret=0;
d173 1
a173 1
	if (ret > LONG_MAX)
d176 1
a176 1
	*rl=(long)ret;
@


1.5.2.1
log
@Errata #030 (markus):
Fixes for the "OpenSSL Security Advisory [30 July 2002]"
@
text
@d127 2
a128 1
	if (*plength > (omax - (*pp - p)))
d135 1
a161 2
			if (i > sizeof(long))
				return 0;
a172 2
	if (ret < 0)
		return 0;
d410 1
a410 1
	char buf1[DECIMAL_SIZE(address)+1],buf2[DECIMAL_SIZE(offset)+1];
@


1.5.2.2
log
@Errata #030, update:
Better fixes from openssl cvs; from markus@@
@
text
@a59 1
#include <limits.h>
d127 1
a127 1
	if (*plength > (omax - (p - *pp)))
d144 1
a144 1
	unsigned long ret=0;
d173 1
a173 1
	if (ret > LONG_MAX)
d176 1
a176 1
	*rl=(long)ret;
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d304 1
a304 1
		c->slen= *length+ *(c->pp)-c->p;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d184 1
a184 1
	int i;
d193 7
a199 4
		while (tag > 0x7f)
			{
			*(p++)=(tag&0x7f)|0x80;
			tag>>=7;
d201 1
a201 1
		*(p++)=(tag&0x7f);
d341 1
a341 1
			str->data=Malloc(len+1);
d343 1
a343 1
			str->data=Realloc(c,len+1);
d371 1
a371 1
	ret=(ASN1_STRING *)Malloc(sizeof(ASN1_STRING));
d387 2
a388 2
	if (a->data != NULL) Free(a->data);
	Free(a);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d179 1
a179 1
 * constructed == 2 for indefinitle length constructed */
d352 1
a352 1
		/* an alowance for strings :-) */
d384 2
a385 2
	if (a->data != NULL) Free((char *)a->data);
	Free((char *)a);
d414 11
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "asn1.h"
#include "asn1_mac.h"
a63 1
#ifndef NOPROTO
d66 1
a66 6
#else
static int asn1_get_length();
static void asn1_put_length();
#endif

char *ASN1_version="ASN1 part of SSLeay 0.9.0b 29-Jun-1998";
d68 1
a68 3
int ASN1_check_infinite_end(p,len)
unsigned char **p;
long len;
d83 2
a84 6
int ASN1_get_object(pp, plength, ptag, pclass, omax)
unsigned char **pp;
long *plength;
int *ptag;
int *pclass;
long omax;
d95 2
a96 2
	i= *p&V_ASN1_PRIMATIVE_TAG;
	if (i == V_ASN1_PRIMATIVE_TAG)
d121 4
a124 3
#ifdef undef
	fprintf(stderr,"p=%d + *plength=%d > omax=%d + *pp=%d  (%d > %d)\n", 
		p,*plength,omax,*pp,(p+ *plength),omax+ *pp);
d127 1
d135 1
d137 1
a137 1
	return(ret+inf);
d143 1
a143 5
static int asn1_get_length(pp,inf,rl,max)
unsigned char **pp;
int *inf;
long *rl;
int max;
d180 2
a181 6
void ASN1_put_object(pp,constructed,length,tag,xclass)
unsigned char **pp;
int constructed;
int length;
int tag;
int xclass;
d189 1
a189 1
		*(p++)=i|(tag&V_ASN1_PRIMATIVE_TAG);
d192 1
a192 1
		*(p++)=i|V_ASN1_PRIMATIVE_TAG;
d207 1
a207 3
static void asn1_put_length(pp, length)
unsigned char **pp;
int length;
d230 1
a230 4
int ASN1_object_size(constructed, length, tag)
int constructed;
int length;
int tag;
d258 1
a258 2
int asn1_Finish(c)
ASN1_CTX *c;
d264 1
a264 1
			c->error=ASN1_R_MISSING_EOS;
d271 1
a271 1
		c->error=ASN1_R_LENGTH_MISMATCH;
d277 1
a277 3
int asn1_GetSequence(c,length)
ASN1_CTX *c;
long *length;
d286 1
a286 1
		c->error=ASN1_R_BAD_GET_OBJECT;
d291 1
a291 1
		c->error=ASN1_R_EXPECTING_A_SEQUENCE;
d297 1
a297 1
		c->error=ASN1_R_LENGTH_MISMATCH;
d306 1
a306 2
ASN1_STRING *ASN1_STRING_dup(str)
ASN1_STRING *str;
d318 1
d322 1
a322 4
int ASN1_STRING_set(str,data,len)
ASN1_STRING *str;
unsigned char *data;
int len;
d324 2
a325 1
	char *c;
d332 1
a332 1
			len=strlen((char *)data);
d336 1
a336 1
		c=(char *)str->data;
d338 1
a338 1
			str->data=(unsigned char *)Malloc(len+1);
d340 1
a340 1
			str->data=(unsigned char *)Realloc(c,len+1);
d344 1
a344 1
			str->data=(unsigned char *)c;
d358 1
a358 1
ASN1_STRING *ASN1_STRING_new()
d364 1
a364 2
ASN1_STRING *ASN1_STRING_type_new(type)
int type;
d377 1
d381 1
a381 2
void ASN1_STRING_free(a)
ASN1_STRING *a;
d388 1
a388 2
int ASN1_STRING_cmp(a,b)
ASN1_STRING *a,*b;
d405 1
a405 3
void asn1_add_error(address,offset)
unsigned char *address;
int offset;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 1
#include <openssl/asn1.h>
d64 1
d67 6
a72 1
const char *ASN1_version="ASN.1" OPENSSL_VERSION_PTEXT;
d74 3
a76 1
int ASN1_check_infinite_end(unsigned char **p, long len)
d91 6
a96 2
int ASN1_get_object(unsigned char **pp, long *plength, int *ptag, int *pclass,
	     long omax)
d107 2
a108 2
	i= *p&V_ASN1_PRIMITIVE_TAG;
	if (i == V_ASN1_PRIMITIVE_TAG)
d133 3
a135 4
#if 0
	fprintf(stderr,"p=%d + *plength=%ld > omax=%ld + *pp=%d  (%d > %d)\n", 
		(int)p,*plength,omax,(int)*pp,(int)(p+ *plength),
		(int)(omax+ *pp));
a137 1
#if 0
a144 1
#endif
d146 1
a146 1
	return(ret|inf);
d152 5
a156 1
static int asn1_get_length(unsigned char **pp, int *inf, long *rl, int max)
d192 7
a198 3
 * constructed == 2 for indefinite length constructed */
void ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
	     int xclass)
d201 1
a201 1
	int i, ttag;
d206 1
a206 1
		*(p++)=i|(tag&V_ASN1_PRIMITIVE_TAG);
d209 2
a210 4
		*(p++)=i|V_ASN1_PRIMITIVE_TAG;
		for(i = 0, ttag = tag; ttag > 0; i++) ttag >>=7;
		ttag = i;
		while(i-- > 0)
d212 2
a213 3
			p[i] = tag & 0x7f;
			if(i != (ttag - 1)) p[i] |= 0x80;
			tag >>= 7;
d215 1
a215 1
		p += ttag;
d224 3
a226 1
static void asn1_put_length(unsigned char **pp, int length)
d249 4
a252 1
int ASN1_object_size(int constructed, int length, int tag)
d280 2
a281 1
int asn1_Finish(ASN1_CTX *c)
d287 1
a287 1
			c->error=ERR_R_MISSING_ASN1_EOS;
d294 1
a294 1
		c->error=ERR_R_ASN1_LENGTH_MISMATCH;
d300 3
a302 1
int asn1_GetSequence(ASN1_CTX *c, long *length)
d311 1
a311 1
		c->error=ERR_R_BAD_GET_ASN1_OBJECT_CALL;
d316 1
a316 1
		c->error=ERR_R_EXPECTING_AN_ASN1_SEQUENCE;
d322 1
a322 1
		c->error=ERR_R_ASN1_LENGTH_MISMATCH;
d331 2
a332 1
ASN1_STRING *ASN1_STRING_dup(ASN1_STRING *str)
a343 1
	ret->flags = str->flags;
d347 4
a350 1
int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
d352 1
a352 2
	unsigned char *c;
	const char *data=_data;
d359 1
a359 1
			len=strlen(data);
d363 1
a363 1
		c=str->data;
d365 1
a365 1
			str->data=OPENSSL_malloc(len+1);
d367 1
a367 1
			str->data=OPENSSL_realloc(c,len+1);
d371 1
a371 1
			str->data=c;
d379 1
a379 1
		/* an allowance for strings :-) */
d385 1
a385 1
ASN1_STRING *ASN1_STRING_new(void)
d391 2
a392 1
ASN1_STRING *ASN1_STRING_type_new(int type)
d396 1
a396 1
	ret=(ASN1_STRING *)OPENSSL_malloc(sizeof(ASN1_STRING));
a404 1
	ret->flags=0;
d408 2
a409 1
void ASN1_STRING_free(ASN1_STRING *a)
d412 2
a413 2
	if (a->data != NULL) OPENSSL_free(a->data);
	OPENSSL_free(a);
d416 2
a417 1
int ASN1_STRING_cmp(ASN1_STRING *a, ASN1_STRING *b)
d434 3
a436 1
void asn1_add_error(unsigned char *address, int offset)
a444 11
int ASN1_STRING_length(ASN1_STRING *x)
{ return M_ASN1_STRING_length(x); }

void ASN1_STRING_length_set(ASN1_STRING *x, int len)
{ M_ASN1_STRING_length_set(x, len); return; }

int ASN1_STRING_type(ASN1_STRING *x)
{ return M_ASN1_STRING_type(x); }

unsigned char * ASN1_STRING_data(ASN1_STRING *x)
{ return M_ASN1_STRING_data(x); }
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@a61 1
#include <openssl/asn1_mac.h>
d126 2
a127 1
	if (*plength > (omax - (*pp - p)))
d134 1
a160 2
			if (i > sizeof(long))
				return 0;
a171 2
	if (ret < 0)
		return 0;
d409 1
a409 1
	char buf1[DECIMAL_SIZE(address)+1],buf2[DECIMAL_SIZE(offset)+1];
@


1.1.1.4
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@a59 1
#include <limits.h>
d127 1
a127 1
	if (*plength > (omax - (p - *pp)))
d144 1
a144 1
	unsigned long ret=0;
d173 1
a173 1
	if (ret > LONG_MAX)
d176 1
a176 1
	*rl=(long)ret;
@


1.1.1.5
log
@import 0.9.7c
@
text
@a106 1
			if (l > (INT_MAX >> 7L)) goto err;
a110 1
		if (--max == 0) goto err;
@


1.1.1.6
log
@import openssl-0.9.7d
@
text
@d417 2
a418 2
	BIO_snprintf(buf1,sizeof buf1,"%lu",(unsigned long)address);
	BIO_snprintf(buf2,sizeof buf2,"%d",offset);
@


1.1.1.7
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a351 1
			ASN1err(ASN1_F_ASN1_STRING_SET,ERR_R_MALLOC_FAILURE);
@


1.1.1.8
log
@import of OpenSSL 0.9.8h
@
text
@d65 1
a65 1
static int asn1_get_length(const unsigned char **pp,int *inf,long *rl,int max);
d67 1
a67 1
const char ASN1_version[]="ASN.1" OPENSSL_VERSION_PTEXT;
d69 1
a69 1
static int _asn1_check_infinite_end(const unsigned char **p, long len)
a82 4
int ASN1_check_infinite_end(unsigned char **p, long len)
	{
	return _asn1_check_infinite_end((const unsigned char **)p, len);
	}
d84 2
a85 8
int ASN1_const_check_infinite_end(const unsigned char **p, long len)
	{
	return _asn1_check_infinite_end(p, len);
	}


int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
	int *pclass, long omax)
d89 1
a89 1
	const unsigned char *p= *pp;
d144 1
a144 1
static int asn1_get_length(const unsigned char **pp, int *inf, long *rl, int max)
d146 1
a146 1
	const unsigned char *p= *pp;
d148 1
a148 1
	unsigned int i;
d208 2
a209 2
	if (constructed == 2)
		*(p++)=0x80;
a214 9
int ASN1_put_eoc(unsigned char **pp)
	{
	unsigned char *p = *pp;
	*p++ = 0;
	*p++ = 0;
	*pp = p;
	return 2;
	}

d252 2
a253 2
	if (constructed == 2)
		return ret + 3;
d266 1
a266 1
static int _asn1_Finish(ASN1_const_CTX *c)
d270 1
a270 1
		if (!ASN1_const_check_infinite_end(&c->p,c->slen))
d285 1
a285 6
int asn1_Finish(ASN1_CTX *c)
	{
	return _asn1_Finish((ASN1_const_CTX *)c);
	}

int asn1_const_Finish(ASN1_const_CTX *c)
d287 1
a287 6
	return _asn1_Finish(c);
	}

int asn1_GetSequence(ASN1_const_CTX *c, long *length)
	{
	const unsigned char *q;
a366 8
void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
	{
	if (str->data)
		OPENSSL_free(str->data);
	str->data = data;
	str->length = len;
	}

d414 1
a414 1
void asn1_add_error(const unsigned char *address, int offset)
@


1.1.1.9
log
@import OpenSSL-1.0.0a
@
text
@d343 1
a343 1
int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
d345 1
a345 8
	if (str == NULL)
		return 0;
	dst->type = str->type;
	if (!ASN1_STRING_set(dst,str->data,str->length))
		return 0;
	dst->flags = str->flags;
	return 1;
	}
d347 4
a350 9
ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *str)
	{
	ASN1_STRING *ret;
	if (!str)
		 return NULL;
	ret=ASN1_STRING_new();
	if (!ret)
		return NULL;
	if (!ASN1_STRING_copy(ret,str))
d353 1
a353 1
		return NULL;
d355 2
a356 1
	return ret;
d430 1
a430 2
	if (a->data && !(a->flags & ASN1_STRING_FLAG_NDEF))
		OPENSSL_free(a->data);
d434 1
a434 1
int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
d460 1
a460 1
int ASN1_STRING_length(const ASN1_STRING *x)
@


