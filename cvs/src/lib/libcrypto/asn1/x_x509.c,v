head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.2
	OPENBSD_6_1_BASE:1.24;
locks; strict;
comment	@ * @;


1.24
date	2015.03.19.14.00.22;	author tedu;	state Exp;
branches;
next	1.23;
commitid	Ix1rLPv61p1TR5LF;

1.23
date	2015.02.11.04.00.39;	author jsing;	state Exp;
branches
	1.23.4.1;
next	1.22;
commitid	QCjRtjn2xv9owjIW;

1.22
date	2015.02.11.03.39.51;	author jsing;	state Exp;
branches;
next	1.21;
commitid	PWeA1V6nbEryguKH;

1.21
date	2015.02.10.13.28.17;	author jsing;	state Exp;
branches;
next	1.20;
commitid	b6QwIkxyvUWeF5XG;

1.20
date	2015.02.10.05.25.45;	author jsing;	state Exp;
branches;
next	1.19;
commitid	HQSAPkY0rIzvWYsC;

1.19
date	2015.02.10.04.21.50;	author jsing;	state Exp;
branches;
next	1.18;
commitid	lmzaeFtqKbLCKhxJ;

1.18
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.17;
commitid	X3hE8E9VwC2nOKbW;

1.17
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches
	1.17.4.1;
next	1.16;
commitid	yQEL1wOWIearrW15;

1.16
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.15;
commitid	nzndm3zqPmFurSaK;

1.15
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	mJUVYpkFBZ0Zv2bG;

1.14
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.23.04.33.10;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.53;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.35;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.52;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.52;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2011.11.03.02.32.08;	author djm;	state Exp;
branches;
next	;

1.17.4.1
date	2015.03.19.14.02.22;	author tedu;	state Exp;
branches;
next	;
commitid	bYTbbXa7PWk8y7To;

1.23.4.1
date	2015.03.19.14.01.15;	author tedu;	state Exp;
branches;
next	;
commitid	dQgHc1qjfDF6g1rY;


desc
@@


1.24
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@/* $OpenBSD: x_x509.c,v 1.23 2015/02/11 04:00:39 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1t.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

static const ASN1_AUX X509_CINF_aux = {
	.flags = ASN1_AFLG_ENCODING,
	.enc_offset = offsetof(X509_CINF, enc),
};
static const ASN1_TEMPLATE X509_CINF_seq_tt[] = {
	{
		.flags = ASN1_TFLG_EXPLICIT | ASN1_TFLG_OPTIONAL,
		.offset = offsetof(X509_CINF, version),
		.field_name = "version",
		.item = &ASN1_INTEGER_it,
	},
	{
		.offset = offsetof(X509_CINF, serialNumber),
		.field_name = "serialNumber",
		.item = &ASN1_INTEGER_it,
	},
	{
		.offset = offsetof(X509_CINF, signature),
		.field_name = "signature",
		.item = &X509_ALGOR_it,
	},
	{
		.offset = offsetof(X509_CINF, issuer),
		.field_name = "issuer",
		.item = &X509_NAME_it,
	},
	{
		.offset = offsetof(X509_CINF, validity),
		.field_name = "validity",
		.item = &X509_VAL_it,
	},
	{
		.offset = offsetof(X509_CINF, subject),
		.field_name = "subject",
		.item = &X509_NAME_it,
	},
	{
		.offset = offsetof(X509_CINF, key),
		.field_name = "key",
		.item = &X509_PUBKEY_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_OPTIONAL,
		.tag = 1,
		.offset = offsetof(X509_CINF, issuerUID),
		.field_name = "issuerUID",
		.item = &ASN1_BIT_STRING_it,
	},
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_OPTIONAL,
		.tag = 2,
		.offset = offsetof(X509_CINF, subjectUID),
		.field_name = "subjectUID",
		.item = &ASN1_BIT_STRING_it,
	},
	{
		.flags = ASN1_TFLG_EXPLICIT | ASN1_TFLG_SEQUENCE_OF |
		    ASN1_TFLG_OPTIONAL,
		.tag = 3,
		.offset = offsetof(X509_CINF, extensions),
		.field_name = "extensions",
		.item = &X509_EXTENSION_it,
	},
};

const ASN1_ITEM X509_CINF_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = X509_CINF_seq_tt,
	.tcount = sizeof(X509_CINF_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = &X509_CINF_aux,
	.size = sizeof(X509_CINF),
	.sname = "X509_CINF",
};


X509_CINF *
d2i_X509_CINF(X509_CINF **a, const unsigned char **in, long len)
{
	return (X509_CINF *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &X509_CINF_it);
}

int
i2d_X509_CINF(X509_CINF *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_CINF_it);
}

X509_CINF *
X509_CINF_new(void)
{
	return (X509_CINF *)ASN1_item_new(&X509_CINF_it);
}

void
X509_CINF_free(X509_CINF *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &X509_CINF_it);
}
/* X509 top level structure needs a bit of customisation */

extern void policy_cache_free(X509_POLICY_CACHE *cache);

static int
x509_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it, void *exarg)
{
	X509 *ret = (X509 *)*pval;

	switch (operation) {

	case ASN1_OP_NEW_POST:
		ret->valid = 0;
		ret->name = NULL;
		ret->ex_flags = 0;
		ret->ex_pathlen = -1;
		ret->skid = NULL;
		ret->akid = NULL;
		ret->aux = NULL;
		ret->crldp = NULL;
		CRYPTO_new_ex_data(CRYPTO_EX_INDEX_X509, ret, &ret->ex_data);
		break;

	case ASN1_OP_D2I_POST:
		free(ret->name);
		ret->name = X509_NAME_oneline(ret->cert_info->subject, NULL, 0);
		break;

	case ASN1_OP_FREE_POST:
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_X509, ret, &ret->ex_data);
		X509_CERT_AUX_free(ret->aux);
		ASN1_OCTET_STRING_free(ret->skid);
		AUTHORITY_KEYID_free(ret->akid);
		CRL_DIST_POINTS_free(ret->crldp);
		policy_cache_free(ret->policy_cache);
		GENERAL_NAMES_free(ret->altname);
		NAME_CONSTRAINTS_free(ret->nc);
		free(ret->name);
		ret->name = NULL;
		break;
	}

	return 1;
}

static const ASN1_AUX X509_aux = {
	.app_data = NULL,
	.flags = ASN1_AFLG_REFCOUNT,
	.ref_offset = offsetof(X509, references),
	.ref_lock = CRYPTO_LOCK_X509,
	.asn1_cb = x509_cb,
};
static const ASN1_TEMPLATE X509_seq_tt[] = {
	{
		.offset = offsetof(X509, cert_info),
		.field_name = "cert_info",
		.item = &X509_CINF_it,
	},
	{
		.offset = offsetof(X509, sig_alg),
		.field_name = "sig_alg",
		.item = &X509_ALGOR_it,
	},
	{
		.offset = offsetof(X509, signature),
		.field_name = "signature",
		.item = &ASN1_BIT_STRING_it,
	},
};

const ASN1_ITEM X509_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = X509_seq_tt,
	.tcount = sizeof(X509_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = &X509_aux,
	.size = sizeof(X509),
	.sname = "X509",
};


X509 *
d2i_X509(X509 **a, const unsigned char **in, long len)
{
	return (X509 *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &X509_it);
}

int
i2d_X509(X509 *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_it);
}

X509 *
X509_new(void)
{
	return (X509 *)ASN1_item_new(&X509_it);
}

void
X509_free(X509 *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &X509_it);
}

X509 *
X509_dup(X509 *x)
{
	return ASN1_item_dup(&X509_it, x);
}

int
X509_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
    CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
{
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, argl, argp,
	    new_func, dup_func, free_func);
}

int
X509_set_ex_data(X509 *r, int idx, void *arg)
{
	return (CRYPTO_set_ex_data(&r->ex_data, idx, arg));
}

void *
X509_get_ex_data(X509 *r, int idx)
{
	return (CRYPTO_get_ex_data(&r->ex_data, idx));
}

/* X509_AUX ASN1 routines. X509_AUX is the name given to
 * a certificate with extra info tagged on the end. Since these
 * functions set how a certificate is trusted they should only
 * be used when the certificate comes from a reliable source
 * such as local storage.
 *
 */

X509 *
d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)
{
	const unsigned char *q;
	X509 *ret;

	/* Save start position */
	q = *pp;
	ret = d2i_X509(NULL, pp, length);
	/* If certificate unreadable then forget it */
	if (!ret)
		return NULL;
	/* update length */
	length -= *pp - q;
	if (length > 0) {
		if (!d2i_X509_CERT_AUX(&ret->aux, pp, length))
			goto err;
	}
	if (a != NULL) {
		X509_free(*a);
		*a = ret;
	}
	return ret;

err:
	X509_free(ret);
	return NULL;
}

int
i2d_X509_AUX(X509 *a, unsigned char **pp)
{
	int length;

	length = i2d_X509(a, pp);
	if (a)
		length += i2d_X509_CERT_AUX(a->aux, pp);
	return length;
}
@


1.23
log
@Remove initialisers with default values from the ASN1 data structures.

Minor changes in generated assembly due to the compiler swapping from
.quad 0/.long 0 to .zero, along with changes due to line numbering.
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.22 2015/02/11 03:39:51 jsing Exp $ */
d316 1
a316 1
	ret = d2i_X509(a, pp, length);
d322 8
a329 4
	if (!length)
		return ret;
	if (!d2i_X509_CERT_AUX(&ret->aux, pp, length))
		goto err;
@


1.23.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.23 2015/02/11 04:00:39 jsing Exp $ */
d316 1
a316 1
	ret = d2i_X509(NULL, pp, length);
d322 4
a325 8
	if (length > 0) {
		if (!d2i_X509_CERT_AUX(&ret->aux, pp, length))
			goto err;
	}
	if (a != NULL) {
		X509_free(*a);
		*a = ret;
	}
@


1.22
log
@Expand most of the ASN1_SEQUENCE* and associated macros, making the data
structures visible and easier to review, without having to wade through
layers and layers of asn1t.h macros.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.21 2015/02/10 13:28:17 jsing Exp $ */
a68 1
	.app_data = NULL,
a69 3
	.ref_offset = 0,
	.ref_lock = 0,
	.asn1_cb = 0,
a74 1
		.tag = 0,
a79 2
		.flags = 0,
		.tag = 0,
a84 2
		.flags = 0,
		.tag = 0,
a89 2
		.flags = 0,
		.tag = 0,
a94 2
		.flags = 0,
		.tag = 0,
a99 2
		.flags = 0,
		.tag = 0,
a104 2
		.flags = 0,
		.tag = 0,
d124 2
a125 1
		.flags = ASN1_TFLG_EXPLICIT | ASN1_TFLG_SEQUENCE_OF | ASN1_TFLG_OPTIONAL,
a218 1
	.enc_offset = 0,
a221 2
		.flags = 0,
		.tag = 0,
a226 2
		.flags = 0,
		.tag = 0,
a231 2
		.flags = 0,
		.tag = 0,
@


1.21
log
@unifdef OPENSSL_NO_RFC3779 - this is currently disabled and unlikely to
be enabled, mostly since people use SANs instead.

ok beck@@ guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.20 2015/02/10 05:25:45 jsing Exp $ */
d68 90
a157 12
ASN1_SEQUENCE_enc(X509_CINF, enc, 0) = {
	ASN1_EXP_OPT(X509_CINF, version, ASN1_INTEGER, 0),
	ASN1_SIMPLE(X509_CINF, serialNumber, ASN1_INTEGER),
	ASN1_SIMPLE(X509_CINF, signature, X509_ALGOR),
	ASN1_SIMPLE(X509_CINF, issuer, X509_NAME),
	ASN1_SIMPLE(X509_CINF, validity, X509_VAL),
	ASN1_SIMPLE(X509_CINF, subject, X509_NAME),
	ASN1_SIMPLE(X509_CINF, key, X509_PUBKEY),
	ASN1_IMP_OPT(X509_CINF, issuerUID, ASN1_BIT_STRING, 1),
	ASN1_IMP_OPT(X509_CINF, subjectUID, ASN1_BIT_STRING, 2),
	ASN1_EXP_SEQUENCE_OF_OPT(X509_CINF, extensions, X509_EXTENSION, 3)
} ASN1_SEQUENCE_END_enc(X509_CINF, X509_CINF)
d229 41
a269 5
ASN1_SEQUENCE_ref(X509, x509_cb, CRYPTO_LOCK_X509) = {
	ASN1_SIMPLE(X509, cert_info, X509_CINF),
	ASN1_SIMPLE(X509, sig_alg, X509_ALGOR),
	ASN1_SIMPLE(X509, signature, ASN1_BIT_STRING)
} ASN1_SEQUENCE_END_ref(X509, X509)
@


1.20
log
@Manually expand ASN1_ITEM_rptr macros that should have been expanded with
the IMPLEMENT_ASN1_DUP_FUNCTION macro.
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.19 2015/02/10 04:21:50 jsing Exp $ */
a123 4
#ifndef OPENSSL_NO_RFC3779
		ret->rfc3779_addr = NULL;
		ret->rfc3779_asid = NULL;
#endif
a142 4
#ifndef OPENSSL_NO_RFC3779
		sk_IPAddressFamily_pop_free(ret->rfc3779_addr, IPAddressFamily_free);
		ASIdentifiers_free(ret->rfc3779_asid);
#endif
@


1.19
log
@Expand the IMPLEMENT_ASN1_DUP_FUNCTION macro so that the code is visible
and functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.18 2015/02/09 15:05:59 jsing Exp $ */
d194 1
a194 1
	return ASN1_item_dup(ASN1_ITEM_rptr(X509), x);
@


1.18
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.17 2014/07/11 08:44:47 jsing Exp $ */
d190 6
a195 1
IMPLEMENT_ASN1_DUP_FUNCTION(X509)
@


1.17
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.16 2014/07/10 22:45:56 jsing Exp $ */
d81 25
a105 1
IMPLEMENT_ASN1_FUNCTIONS(X509_CINF)
d165 25
a189 1
IMPLEMENT_ASN1_FUNCTIONS(X509)
@


1.17.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.17 2014/07/11 08:44:47 jsing Exp $ */
d180 1
a180 1
	ret = d2i_X509(NULL, pp, length);
d186 4
a189 8
	if (length > 0) {
		if (!d2i_X509_CERT_AUX(&ret->aux, pp, length))
			goto err;
	}
	if (a != NULL) {
		X509_free(*a);
		*a = ret;
	}
@


1.16
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: x_x509.c,v 1.15 2014/06/12 15:49:27 deraadt Exp $ */
d63 1
a63 1
#include "cryptlib.h"
a64 1
#include <openssl/asn1t.h>
@


1.15
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.14
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/x_x509.c */
@


1.13
log
@Make sure ret->name is NULL'ed before return when freeing.
from Dirk Engling <erdgeist@@erdgeist.org>
@
text
@d108 1
a108 2
		if (ret->name != NULL)
			free(ret->name);
d125 1
a125 2
		if (ret->name != NULL)
			free(ret->name);
@


1.12
log
@More KNF.
@
text
@d128 1
@


1.11
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d84 2
a85 2
static int x509_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,
								void *exarg)
d89 1
a89 1
	switch(operation) {
d92 1
a92 1
		ret->valid=0;
d108 3
a110 2
		if (ret->name != NULL) free(ret->name);
		ret->name=X509_NAME_oneline(ret->cert_info->subject,NULL,0);
d126 2
a127 2

		if (ret->name != NULL) free(ret->name);
a128 1

a131 1

d143 3
a145 2
int X509_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
d148 1
a148 1
				new_func, dup_func, free_func);
d151 2
a152 1
int X509_set_ex_data(X509 *r, int idx, void *arg)
d154 1
a154 1
	return(CRYPTO_set_ex_data(&r->ex_data,idx,arg));
d157 2
a158 1
void *X509_get_ex_data(X509 *r, int idx)
d160 1
a160 1
	return(CRYPTO_get_ex_data(&r->ex_data,idx));
d171 2
a172 1
X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)
d176 1
d181 2
a182 1
	if(!ret) return NULL;
d185 4
a188 2
	if(!length) return ret;
	if(!d2i_X509_CERT_AUX(&ret->aux, pp, length)) goto err;
d190 2
a191 1
	err:
d196 2
a197 1
int i2d_X509_AUX(X509 *a, unsigned char **pp)
d200 1
d202 2
a203 1
	if(a) length += i2d_X509_CERT_AUX(a->aux, pp);
@


1.10
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d91 1
a91 1
		case ASN1_OP_NEW_POST:
d107 1
a107 1
		case ASN1_OP_D2I_POST:
d112 1
a112 1
		case ASN1_OP_FREE_POST:
@


1.9
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d146 1
a146 1
        {
d149 1
a149 1
        }
d152 1
a152 1
	{
d154 1
a154 1
	}
d157 1
a157 1
	{
d159 1
a159 1
	}
@


1.8
log
@openssl-1.0.0e: resolve conflicts
@
text
@d108 1
a108 1
		if (ret->name != NULL) OPENSSL_free(ret->name);
d126 1
a126 1
		if (ret->name != NULL) OPENSSL_free(ret->name);
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d66 1
a66 1
ASN1_SEQUENCE(X509_CINF) = {
d77 1
a77 1
} ASN1_SEQUENCE_END(X509_CINF)
@


1.6
log
@resolve conflicts
@
text
@d84 2
a85 1
static int x509_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it)
d103 1
d117 1
d119 2
a142 13

static ASN1_METHOD meth=
    {
    (I2D_OF(void))  i2d_X509,
    (D2I_OF(void)) d2i_X509,
    (void *(*)(void))X509_new,
    (void (*)(void *)) X509_free
    };

ASN1_METHOD *X509_asn1_meth(void)
	{
	return(&meth);
	}
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d82 2
d97 4
d115 5
d139 7
a145 5
static ASN1_METHOD meth={
	(int (*)())  i2d_X509,
	(char *(*)())d2i_X509,
	(char *(*)())X509_new,
	(void (*)()) X509_free};
d177 1
a177 1
X509 *d2i_X509_AUX(X509 **a, unsigned char **pp, long length)
d179 1
a179 1
	unsigned char *q;
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d62 1
a62 1
#include <openssl/asn1_mac.h>
d66 61
a126 2
static int x509_meth_num = 0;
static STACK_OF(CRYPTO_EX_DATA_FUNCS) *x509_meth = NULL;
a138 85
int i2d_X509(X509 *a, unsigned char **pp)
	{
	M_ASN1_I2D_vars(a);

	M_ASN1_I2D_len(a->cert_info,	i2d_X509_CINF);
	M_ASN1_I2D_len(a->sig_alg,	i2d_X509_ALGOR);
	M_ASN1_I2D_len(a->signature,	i2d_ASN1_BIT_STRING);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put(a->cert_info,	i2d_X509_CINF);
	M_ASN1_I2D_put(a->sig_alg,	i2d_X509_ALGOR);
	M_ASN1_I2D_put(a->signature,	i2d_ASN1_BIT_STRING);

	M_ASN1_I2D_finish();
	}

X509 *d2i_X509(X509 **a, unsigned char **pp, long length)
	{
	M_ASN1_D2I_vars(a,X509 *,X509_new);

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->cert_info,d2i_X509_CINF);
	M_ASN1_D2I_get(ret->sig_alg,d2i_X509_ALGOR);
	M_ASN1_D2I_get(ret->signature,d2i_ASN1_BIT_STRING);
	if (ret->name != NULL) OPENSSL_free(ret->name);
	ret->name=X509_NAME_oneline(ret->cert_info->subject,NULL,0);

	M_ASN1_D2I_Finish(a,X509_free,ASN1_F_D2I_X509);
	}

X509 *X509_new(void)
	{
	X509 *ret=NULL;
	ASN1_CTX c;

	M_ASN1_New_Malloc(ret,X509);
	ret->valid=0;
	ret->references=1;
	ret->name = NULL;
	ret->ex_flags = 0;
	ret->ex_pathlen = -1;
	ret->skid = NULL;
	ret->akid = NULL;
	ret->aux = NULL;
	M_ASN1_New(ret->cert_info,X509_CINF_new);
	M_ASN1_New(ret->sig_alg,X509_ALGOR_new);
	M_ASN1_New(ret->signature,M_ASN1_BIT_STRING_new);
	CRYPTO_new_ex_data(x509_meth, ret, &ret->ex_data);
	return(ret);
	M_ASN1_New_Error(ASN1_F_X509_NEW);
	}

void X509_free(X509 *a)
	{
	int i;

	if (a == NULL) return;

	i=CRYPTO_add(&a->references,-1,CRYPTO_LOCK_X509);
#ifdef REF_PRINT
	REF_PRINT("X509",a);
#endif
	if (i > 0) return;
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"X509_free, bad reference count\n");
		abort();
		}
#endif

	CRYPTO_free_ex_data(x509_meth,a,&a->ex_data);
	X509_CINF_free(a->cert_info);
	X509_ALGOR_free(a->sig_alg);
	M_ASN1_BIT_STRING_free(a->signature);
	X509_CERT_AUX_free(a->aux);
	ASN1_OCTET_STRING_free(a->skid);
	AUTHORITY_KEYID_free(a->akid);

	if (a->name != NULL) OPENSSL_free(a->name);
	OPENSSL_free(a);
	}

d142 2
a143 3
	x509_meth_num++;
	return(CRYPTO_get_ex_new_index(x509_meth_num-1,
		&x509_meth,argl,argp,new_func,dup_func,free_func));
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d64 1
d106 1
a106 1
	if (ret->name != NULL) Free(ret->name);
d118 1
d120 1
a120 1
	ret->valid=0;
d122 4
a125 2
	ret->name=NULL;
	ret->aux=NULL;
d158 2
d161 2
a162 2
	if (a->name != NULL) Free(a->name);
	Free(a);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d65 3
d119 1
d121 1
d124 2
a125 1
	M_ASN1_New(ret->signature,ASN1_BIT_STRING_new);
d149 1
a149 1
	/* CRYPTO_free_ex_data(bio_meth,(char *)a,&a->ex_data); */
d152 2
a153 1
	ASN1_BIT_STRING_free(a->signature);
d156 19
a174 1
	Free((char *)a);
d177 34
@


1.1
log
@Initial revision
@
text
@d61 3
a63 7
#include "evp.h"
#include "asn1_mac.h"

/*
 * ASN1err(ASN1_F_D2I_X509,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_X509_NEW,ASN1_R_BAD_GET_OBJECT);
 */
d71 1
a71 1
ASN1_METHOD *X509_asn1_meth()
d76 1
a76 3
int i2d_X509(a,pp)
X509 *a;
unsigned char **pp;
d93 1
a93 4
X509 *d2i_X509(a,pp,length)
X509 **a;
unsigned char **pp;
long length;
d102 2
a103 2
if (ret->name != NULL) Free(ret->name);
ret->name=X509_NAME_oneline(ret->cert_info->subject,NULL,0);
d108 1
a108 1
X509 *X509_new()
d111 1
d124 1
a124 2
void X509_free(a)
X509 *a;
d143 1
d147 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 48
#include <openssl/evp.h>
#include <openssl/asn1t.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

ASN1_SEQUENCE(X509_CINF) = {
	ASN1_EXP_OPT(X509_CINF, version, ASN1_INTEGER, 0),
	ASN1_SIMPLE(X509_CINF, serialNumber, ASN1_INTEGER),
	ASN1_SIMPLE(X509_CINF, signature, X509_ALGOR),
	ASN1_SIMPLE(X509_CINF, issuer, X509_NAME),
	ASN1_SIMPLE(X509_CINF, validity, X509_VAL),
	ASN1_SIMPLE(X509_CINF, subject, X509_NAME),
	ASN1_SIMPLE(X509_CINF, key, X509_PUBKEY),
	ASN1_IMP_OPT(X509_CINF, issuerUID, ASN1_BIT_STRING, 1),
	ASN1_IMP_OPT(X509_CINF, subjectUID, ASN1_BIT_STRING, 2),
	ASN1_EXP_SEQUENCE_OF_OPT(X509_CINF, extensions, X509_EXTENSION, 3)
} ASN1_SEQUENCE_END(X509_CINF)

IMPLEMENT_ASN1_FUNCTIONS(X509_CINF)
/* X509 top level structure needs a bit of customisation */

static int x509_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	X509 *ret = (X509 *)*pval;

	switch(operation) {

		case ASN1_OP_NEW_POST:
		ret->valid=0;
		ret->name = NULL;
		ret->ex_flags = 0;
		ret->ex_pathlen = -1;
		ret->skid = NULL;
		ret->akid = NULL;
		ret->aux = NULL;
		CRYPTO_new_ex_data(CRYPTO_EX_INDEX_X509, ret, &ret->ex_data);
		break;

		case ASN1_OP_D2I_POST:
		if (ret->name != NULL) OPENSSL_free(ret->name);
		ret->name=X509_NAME_oneline(ret->cert_info->subject,NULL,0);
		break;

		case ASN1_OP_FREE_POST:
		CRYPTO_free_ex_data(CRYPTO_EX_INDEX_X509, ret, &ret->ex_data);
		X509_CERT_AUX_free(ret->aux);
		ASN1_OCTET_STRING_free(ret->skid);
		AUTHORITY_KEYID_free(ret->akid);
d64 4
a67 17
		if (ret->name != NULL) OPENSSL_free(ret->name);
		break;

	}

	return 1;

}

ASN1_SEQUENCE_ref(X509, x509_cb, CRYPTO_LOCK_X509) = {
	ASN1_SIMPLE(X509, cert_info, X509_CINF),
	ASN1_SIMPLE(X509, sig_alg, X509_ALGOR),
	ASN1_SIMPLE(X509, signature, ASN1_BIT_STRING)
} ASN1_SEQUENCE_END_ref(X509, X509)

IMPLEMENT_ASN1_FUNCTIONS(X509)
IMPLEMENT_ASN1_DUP_FUNCTION(X509)
d75 1
a75 1
ASN1_METHOD *X509_asn1_meth(void)
d80 15
a94 6
int X509_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
	     CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)
        {
	return CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, argl, argp,
				new_func, dup_func, free_func);
        }
d96 7
a102 1
int X509_set_ex_data(X509 *r, int idx, void *arg)
d104 11
a114 1
	return(CRYPTO_set_ex_data(&r->ex_data,idx,arg));
d117 1
a117 1
void *X509_get_ex_data(X509 *r, int idx)
d119 11
a129 1
	return(CRYPTO_get_ex_data(&r->ex_data,idx));
d132 26
a157 7
/* X509_AUX ASN1 routines. X509_AUX is the name given to
 * a certificate with extra info tagged on the end. Since these
 * functions set how a certificate is trusted they should only
 * be used when the certificate comes from a reliable source
 * such as local storage.
 *
 */
a158 26
X509 *d2i_X509_AUX(X509 **a, unsigned char **pp, long length)
{
	unsigned char *q;
	X509 *ret;
	/* Save start position */
	q = *pp;
	ret = d2i_X509(a, pp, length);
	/* If certificate unreadable then forget it */
	if(!ret) return NULL;
	/* update length */
	length -= *pp - q;
	if(!length) return ret;
	if(!d2i_X509_CERT_AUX(&ret->aux, pp, length)) goto err;
	return ret;
	err:
	X509_free(ret);
	return NULL;
}

int i2d_X509_AUX(X509 *a, unsigned char **pp)
{
	int length;
	length = i2d_X509(a, pp);
	if(a) length += i2d_X509_CERT_AUX(a->aux, pp);
	return length;
}
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a81 2
extern void policy_cache_free(X509_POLICY_CACHE *cache);

a94 4
#ifndef OPENSSL_NO_RFC3779
		ret->rfc3779_addr = NULL;
		ret->rfc3779_asid = NULL;
#endif
a108 5
		policy_cache_free(ret->policy_cache);
#ifndef OPENSSL_NO_RFC3779
		sk_IPAddressFamily_pop_free(ret->rfc3779_addr, IPAddressFamily_free);
		ASIdentifiers_free(ret->rfc3779_asid);
#endif
d128 5
a132 7
static ASN1_METHOD meth=
    {
    (I2D_OF(void))  i2d_X509,
    (D2I_OF(void)) d2i_X509,
    (void *(*)(void))X509_new,
    (void (*)(void *)) X509_free
    };
d164 1
a164 1
X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)
d166 1
a166 1
	const unsigned char *q;
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d84 1
a84 2
static int x509_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,
								void *exarg)
a101 1
		ret->crldp = NULL;
a114 1
		CRL_DIST_POINTS_free(ret->crldp);
a115 2
		GENERAL_NAMES_free(ret->altname);
		NAME_CONSTRAINTS_free(ret->nc);
d138 13
@


1.1.1.5
log
@import OpenSSL 1.0.0e
@
text
@d66 1
a66 1
ASN1_SEQUENCE_enc(X509_CINF, enc, 0) = {
d77 1
a77 1
} ASN1_SEQUENCE_END_enc(X509_CINF, X509_CINF)
@


