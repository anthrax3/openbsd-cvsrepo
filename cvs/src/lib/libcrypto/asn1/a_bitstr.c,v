head	1.24;
access;
symbols;
locks; strict;
comment	@ * @;


1.24
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.23;
commitid	kT0fLt3r4lroFJra;

1.23
date	2015.09.29.13.54.40;	author jsing;	state Exp;
branches;
next	1.22;
commitid	9PWAq0wK5n99tjDV;

1.22
date	2015.07.29.14.58.34;	author jsing;	state Exp;
branches;
next	1.21;
commitid	rYgS8cWcS59JYkBV;

1.21
date	2015.07.19.18.29.31;	author miod;	state Exp;
branches;
next	1.20;
commitid	tXLDcP80XKVov5z5;

1.20
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.19;
commitid	yQEL1wOWIearrW15;

1.19
date	2014.07.10.13.58.22;	author jsing;	state Exp;
branches;
next	1.18;
commitid	id8dTrTMtnTn4fqt;

1.18
date	2014.07.10.11.25.13;	author tedu;	state Exp;
branches;
next	1.17;
commitid	Pv7aSK7aYL3NQSpP;

1.17
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	mJUVYpkFBZ0Zv2bG;

1.16
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.07.09.23;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.16.14.15;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.14.11.18.02;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.04;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.34;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.25;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.44;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.12.20.43.50;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.34.29;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.37.01;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.02;	author djm;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_bitstr.c,v 1.23 2015/09/29 13:54:40 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <string.h>

#include <openssl/asn1.h>
#include <openssl/err.h>

int
ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
{
	return ASN1_STRING_set(x, d, len);
}

int
i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **pp)
{
	int ret, j, bits, len;
	unsigned char *p, *d;

	if (a == NULL)
		return (0);

	len = a->length;

	if (len > 0) {
		if (a->flags & ASN1_STRING_FLAG_BITS_LEFT) {
			bits = (int)a->flags & 0x07;
		} else {
			for (; len > 0; len--) {
				if (a->data[len - 1])
					break;
			}
			j = a->data[len - 1];
			if (j & 0x01)
				bits = 0;
			else if (j & 0x02)
				bits = 1;
			else if (j & 0x04)
				bits = 2;
			else if (j & 0x08)
				bits = 3;
			else if (j & 0x10)
				bits = 4;
			else if (j & 0x20)
				bits = 5;
			else if (j & 0x40)
				bits = 6;
			else if (j & 0x80)
				bits = 7;
			else
				bits = 0; /* should not happen */
		}
	} else
		bits = 0;

	ret = 1 + len;
	if (pp == NULL)
		return (ret);

	p= *pp;

	*(p++) = (unsigned char)bits;
	d = a->data;
	memcpy(p, d, len);
	p += len;
	if (len > 0)
		p[-1]&=(0xff << bits);
	*pp = p;
	return (ret);
}

ASN1_BIT_STRING *
c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, const unsigned char **pp, long len)
{
	ASN1_BIT_STRING *ret = NULL;
	const unsigned char *p;
	unsigned char *s;
	int i;

	if (len < 1) {
		i = ASN1_R_STRING_TOO_SHORT;
		goto err;
	}

	if ((a == NULL) || ((*a) == NULL)) {
		if ((ret = ASN1_BIT_STRING_new()) == NULL)
			return (NULL);
	} else
		ret = (*a);

	p = *pp;
	i = *(p++);
	/* We do this to preserve the settings.  If we modify
	 * the settings, via the _set_bit function, we will recalculate
	 * on output */
	ret->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07); /* clear */
	ret->flags|=(ASN1_STRING_FLAG_BITS_LEFT|(i&0x07)); /* set */

	if (len-- > 1) /* using one because of the bits left byte */
	{
		s = malloc(len);
		if (s == NULL) {
			i = ERR_R_MALLOC_FAILURE;
			goto err;
		}
		memcpy(s, p, len);
		s[len - 1] &= (0xff << i);
		p += len;
	} else
		s = NULL;

	ret->length = (int)len;
	free(ret->data);
	ret->data = s;
	ret->type = V_ASN1_BIT_STRING;
	if (a != NULL)
		(*a) = ret;
	*pp = p;
	return (ret);

err:
	ASN1error(i);
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		ASN1_BIT_STRING_free(ret);
	return (NULL);
}

/* These next 2 functions from Goetz Babin-Ebell <babinebell@@trustcenter.de>
 */
int
ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
{
	int w, v, iv;
	unsigned char *c;

	w = n/8;
	v = 1 << (7 - (n & 0x07));
	iv = ~v;
	if (!value)
		v = 0;

	if (a == NULL)
		return 0;

	a->flags &= ~(ASN1_STRING_FLAG_BITS_LEFT | 0x07); /* clear, set on write */

	if ((a->length < (w + 1)) || (a->data == NULL)) {
		if (!value)
			return(1); /* Don't need to set */
		c = OPENSSL_realloc_clean(a->data, a->length, w + 1);
		if (c == NULL) {
			ASN1error(ERR_R_MALLOC_FAILURE);
			return 0;
		}
		if (w + 1 - a->length > 0)
			memset(c + a->length, 0, w + 1 - a->length);
		a->data = c;
		a->length = w + 1;
	}
	a->data[w] = ((a->data[w]) & iv) | v;
	while ((a->length > 0) && (a->data[a->length - 1] == 0))
		a->length--;

	return (1);
}

int
ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING *a, int n)
{
	int w, v;

	w = n / 8;
	v = 1 << (7 - (n & 0x07));
	if ((a == NULL) || (a->length < (w + 1)) || (a->data == NULL))
		return (0);
	return ((a->data[w] & v) != 0);
}

/*
 * Checks if the given bit string contains only bits specified by
 * the flags vector. Returns 0 if there is at least one bit set in 'a'
 * which is not specified in 'flags', 1 otherwise.
 * 'len' is the length of 'flags'.
 */
int
ASN1_BIT_STRING_check(ASN1_BIT_STRING *a, unsigned char *flags, int flags_len)
{
	int i, ok;

	/* Check if there is one bit set at all. */
	if (!a || !a->data)
		return 1;

	/* Check each byte of the internal representation of the bit string. */
	ok = 1;
	for (i = 0; i < a->length && ok; ++i) {
		unsigned char mask = i < flags_len ? ~flags[i] : 0xff;
		/* We are done if there is an unneeded bit set. */
		ok = (a->data[i] & mask) == 0;
	}
	return ok;
}
@


1.23
log
@Replace remaining M_ASN1_BIT_STRING_(new|free) macros with calls to
ASN1_BIT_STRING_(new|free).

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_bitstr.c,v 1.22 2015/07/29 14:58:34 jsing Exp $ */
d179 1
a179 1
	ASN1err(ASN1_F_C2I_ASN1_BIT_STRING, i);
d209 1
a209 1
			ASN1err(ASN1_F_ASN1_BIT_STRING_SET_BIT, ERR_R_MALLOC_FAILURE);
@


1.22
log
@Expand obsolete M_ASN1.*(cmp|dup|print|set) macros - no change in generated
assembly.

ok bcook@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_bitstr.c,v 1.21 2015/07/19 18:29:31 miod Exp $ */
d143 1
a143 1
		if ((ret = M_ASN1_BIT_STRING_new()) == NULL)
d181 1
a181 1
		M_ASN1_BIT_STRING_free(ret);
@


1.21
log
@Drop stupid (int) casts for the arguments of malloc() and friends. This is
not 16-bit MS-DOS anymore.
ok bcook@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_bitstr.c,v 1.20 2014/07/11 08:44:47 jsing Exp $ */
d68 1
a68 1
	return M_ASN1_BIT_STRING_set(x, d, len);
@


1.20
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_bitstr.c,v 1.19 2014/07/10 13:58:22 jsing Exp $ */
d158 1
a158 1
		s = malloc((int)len);
@


1.19
log
@Stop including standard headers via cryptlib.h - pull in the headers that
are needed in the source files that actually require them.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_bitstr.c,v 1.18 2014/07/10 11:25:13 tedu Exp $ */
a61 1
#include "cryptlib.h"
d63 1
@


1.18
log
@delete some casts. ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: a_bitstr.c,v 1.17 2014/06/12 15:49:27 deraadt Exp $ */
d60 2
@


1.17
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d161 1
a161 1
		memcpy(s, p, (int)len);
@


1.16
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/a_bitstr.c */
@


1.15
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d168 1
a168 2
	if (ret->data != NULL)
		free(ret->data);
@


1.14
log
@More KNF.
@
text
@d156 1
a156 1
		s = (unsigned char *)malloc((int)len);
d206 1
a206 5
		if (a->data == NULL)
			c = (unsigned char *)malloc(w + 1);
		else
			c = (unsigned char *)OPENSSL_realloc_clean(a->data,
			    a->length, w + 1);
@


1.13
log
@Initial KNF.
@
text
@d72 1
a72 1
	int ret, j,bits, len;
d201 1
a201 1
	a->flags &= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07); /* clear, set on write */
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d63 11
a73 2
int ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
{ return M_ASN1_BIT_STRING_set(x, d, len); }
d75 2
a76 4
int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **pp)
	{
	int ret,j,bits,len;
	unsigned char *p,*d;
d78 1
a78 1
	if (a == NULL) return(0);
d80 7
a86 24
	len=a->length;

	if (len > 0)
		{
		if (a->flags & ASN1_STRING_FLAG_BITS_LEFT)
			{
			bits=(int)a->flags&0x07;
			}
		else
			{
			for ( ; len > 0; len--)
				{
				if (a->data[len-1]) break;
				}
			j=a->data[len-1];
			if      (j & 0x01) bits=0;
			else if (j & 0x02) bits=1;
			else if (j & 0x04) bits=2;
			else if (j & 0x08) bits=3;
			else if (j & 0x10) bits=4;
			else if (j & 0x20) bits=5;
			else if (j & 0x40) bits=6;
			else if (j & 0x80) bits=7;
			else bits=0; /* should not happen */
d88 19
d108 2
a109 2
	else
		bits=0;
d111 3
a113 2
	ret=1+len;
	if (pp == NULL) return(ret);
d117 14
a130 13
	*(p++)=(unsigned char)bits;
	d=a->data;
	memcpy(p,d,len);
	p+=len;
	if (len > 0) p[-1]&=(0xff<<bits);
	*pp=p;
	return(ret);
	}

ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,
	const unsigned char **pp, long len)
	{
	ASN1_BIT_STRING *ret=NULL;
d135 2
a136 3
	if (len < 1)
		{
		i=ASN1_R_STRING_TOO_SHORT;
d138 1
a138 1
		}
d140 5
a144 6
	if ((a == NULL) || ((*a) == NULL))
		{
		if ((ret=M_ASN1_BIT_STRING_new()) == NULL) return(NULL);
		}
	else
		ret=(*a);
d146 2
a147 2
	p= *pp;
	i= *(p++);
d155 4
a158 5
		{
		s=(unsigned char *)malloc((int)len);
		if (s == NULL)
			{
			i=ERR_R_MALLOC_FAILURE;
a159 4
			}
		memcpy(s,p,(int)len);
		s[len-1]&=(0xff<<i);
		p+=len;
d161 15
a175 2
	else
		s=NULL;
a176 7
	ret->length=(int)len;
	if (ret->data != NULL) free(ret->data);
	ret->data=s;
	ret->type=V_ASN1_BIT_STRING;
	if (a != NULL) (*a)=ret;
	*pp=p;
	return(ret);
d178 1
a178 1
	ASN1err(ASN1_F_C2I_ASN1_BIT_STRING,i);
d181 2
a182 2
	return(NULL);
	}
d186 4
a189 3
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
	{
	int w,v,iv;
d192 5
a196 4
	w=n/8;
	v=1<<(7-(n&0x07));
	iv= ~v;
	if (!value) v=0;
d201 1
a201 1
	a->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07); /* clear, set on write */
d203 3
a205 3
	if ((a->length < (w+1)) || (a->data == NULL))
		{
		if (!value) return(1); /* Don't need to set */
d207 1
a207 1
			c=(unsigned char *)malloc(w+1);
d209 4
a212 6
			c=(unsigned char *)OPENSSL_realloc_clean(a->data,
								 a->length,
								 w+1);
		if (c == NULL)
			{
			ASN1err(ASN1_F_ASN1_BIT_STRING_SET_BIT,ERR_R_MALLOC_FAILURE);
d214 5
a218 4
			}
  		if (w+1-a->length > 0) memset(c+a->length, 0, w+1-a->length);
		a->data=c;
		a->length=w+1;
d220 2
a221 2
	a->data[w]=((a->data[w])&iv)|v;
	while ((a->length > 0) && (a->data[a->length-1] == 0))
a222 2
	return(1);
	}
d224 2
a225 3
int ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING *a, int n)
	{
	int w,v;
d227 11
a237 6
	w=n/8;
	v=1<<(7-(n&0x07));
	if ((a == NULL) || (a->length < (w+1)) || (a->data == NULL))
		return(0);
	return((a->data[w]&v) != 0);
	}
d240 1
a240 1
 * Checks if the given bit string contains only bits specified by 
d245 3
a247 3
int ASN1_BIT_STRING_check(ASN1_BIT_STRING *a,
			  unsigned char *flags, int flags_len)
	{
d249 1
d251 2
a252 1
	if (!a || !a->data) return 1;
d256 1
a256 2
	for (i = 0; i < a->length && ok; ++i)
		{
d260 1
a260 1
		}
d262 1
a262 1
	}
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d147 1
a147 1
		s=(unsigned char *)OPENSSL_malloc((int)len);
d161 1
a161 1
	if (ret->data != NULL) OPENSSL_free(ret->data);
d195 1
a195 1
			c=(unsigned char *)OPENSSL_malloc(w+1);
@


1.10
log
@resolve conflicts
@
text
@d226 23
@


1.9
log
@resolve conflicts
@
text
@d116 2
a117 2
ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, unsigned char **pp,
	     long len)
d120 2
a121 1
	unsigned char *p,*s;
d168 1
a168 1
	ASN1err(ASN1_F_D2I_ASN1_BIT_STRING,i);
d186 3
a190 1
	if (a == NULL) return(0);
@


1.8
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d197 6
a202 2
		if (c == NULL) return(0);
		if (w+1-a->length > 0) memset(c+a->length, 0, w+1-a->length);
@


1.7
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d194 3
a196 1
			c=(unsigned char *)OPENSSL_realloc(a->data,w+1);
@


1.6
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d123 6
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a73 2
	ret=1+len;
	if (pp == NULL) return(ret);
d101 4
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a62 6
ASN1_BIT_STRING *ASN1_BIT_STRING_new(void)
{ return M_ASN1_BIT_STRING_new(); }

void ASN1_BIT_STRING_free(ASN1_BIT_STRING *x)
{ M_ASN1_BIT_STRING_free(x); }

a65 12
int i2d_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **pp)
{
	int len, ret;
	len = i2c_ASN1_BIT_STRING(a, NULL);	
	ret=ASN1_object_size(0,len,V_ASN1_BIT_STRING);
	if(pp) {
		ASN1_put_object(pp,0,len,V_ASN1_BIT_STRING,V_ASN1_UNIVERSAL);
		i2c_ASN1_BIT_STRING(a, pp);	
	}
	return ret;
}

a113 34

/* Convert DER encoded ASN1 BIT_STRING to ASN1_BIT_STRING structure */
ASN1_BIT_STRING *d2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, unsigned char **pp,
	     long length)
{
	unsigned char *p;
	long len;
	int i;
	int inf,tag,xclass;
	ASN1_BIT_STRING *ret;

	p= *pp;
	inf=ASN1_get_object(&p,&len,&tag,&xclass,length);
	if (inf & 0x80)
		{
		i=ASN1_R_BAD_OBJECT_HEADER;
		goto err;
		}

	if (tag != V_ASN1_BIT_STRING)
		{
		i=ASN1_R_EXPECTING_A_BIT_STRING;
		goto err;
		}
	if (len < 1) { i=ASN1_R_STRING_TOO_SHORT; goto err; }
	ret = c2i_ASN1_BIT_STRING(a, &p, len);
	if(ret) *pp = p;
	return ret;
err:
	ASN1err(ASN1_F_D2I_ASN1_BIT_STRING,i);
	return(NULL);

}

d175 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d73 12
d86 1
a86 1
	int ret,j,r,bits,len;
d92 2
a120 3
	ret=1+len;
	r=ASN1_object_size(0,ret,V_ASN1_BIT_STRING);
	if (pp == NULL) return(r);
a122 1
	ASN1_put_object(&p,0,ret,V_ASN1_BIT_STRING,V_ASN1_UNIVERSAL);
d129 1
a129 1
	return(r);
d132 2
d136 2
a137 3
	{
	ASN1_BIT_STRING *ret=NULL;
	unsigned char *p,*s;
d139 1
d141 1
a141 8
	int i;

	if ((a == NULL) || ((*a) == NULL))
		{
		if ((ret=M_ASN1_BIT_STRING_new()) == NULL) return(NULL);
		}
	else
		ret=(*a);
d157 22
d180 1
d190 1
a190 1
		s=(unsigned char *)Malloc((int)len);
d204 1
a204 1
	if (ret->data != NULL) Free(ret->data);
d235 1
a235 1
			c=(unsigned char *)Malloc(w+1);
d237 1
a237 1
			c=(unsigned char *)Realloc(a->data,w+1);
d239 1
d242 1
a242 2
		c[w]=0;
		}
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d63 9
d133 1
a133 1
		if ((ret=ASN1_BIT_STRING_new()) == NULL) return(NULL);
d176 1
a176 1
	if (ret->data != NULL) Free((char *)ret->data);
d185 1
a185 1
		ASN1_BIT_STRING_free(ret);
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
#include "asn1.h"
d63 1
a63 7
/* ASN1err(ASN1_F_ASN1_STRING_NEW,ASN1_R_STRING_TOO_SHORT);
 * ASN1err(ASN1_F_D2I_ASN1_BIT_STRING,ASN1_R_EXPECTING_A_BIT_STRING);
 */

int i2d_ASN1_BIT_STRING(a,pp)
ASN1_BIT_STRING *a;
unsigned char **pp;
d65 1
a65 1
	int ret,j,r,bits;
d70 29
a98 3
	/* our bit strings are always a multiple of 8 :-) */
	bits=0;
	ret=1+a->length;
d104 1
a104 4
	if (bits == 0)
		j=0;
	else	j=8-bits;
	*(p++)=(unsigned char)j;
d106 3
a108 3
	memcpy(p,d,a->length);
	p+=a->length;
	if (a->length > 0) p[-1]&=(0xff<<j);
d113 2
a114 4
ASN1_BIT_STRING *d2i_ASN1_BIT_STRING(a, pp, length)
ASN1_BIT_STRING **a;
unsigned char **pp;
long length;
d145 6
d182 1
a182 4
int ASN1_BIT_STRING_set_bit(a,n,value)
ASN1_BIT_STRING *a;
int n;
int value;
d191 2
d212 1
a212 3
int ASN1_BIT_STRING_get_bit(a,n)
ASN1_BIT_STRING *a;
int n;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 1
a61 1
#include <openssl/asn1.h>
d63 3
a65 2
int ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
{ return M_ASN1_BIT_STRING_set(x, d, len); }
d67 3
a69 1
int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **pp)
d71 1
a71 1
	int ret,j,bits,len;
d76 5
a80 32
	len=a->length;

	if (len > 0)
		{
		if (a->flags & ASN1_STRING_FLAG_BITS_LEFT)
			{
			bits=(int)a->flags&0x07;
			}
		else
			{
			for ( ; len > 0; len--)
				{
				if (a->data[len-1]) break;
				}
			j=a->data[len-1];
			if      (j & 0x01) bits=0;
			else if (j & 0x02) bits=1;
			else if (j & 0x04) bits=2;
			else if (j & 0x08) bits=3;
			else if (j & 0x10) bits=4;
			else if (j & 0x20) bits=5;
			else if (j & 0x40) bits=6;
			else if (j & 0x80) bits=7;
			else bits=0; /* should not happen */
			}
		}
	else
		bits=0;

	ret=1+len;
	if (pp == NULL) return(ret);

d83 5
a87 1
	*(p++)=(unsigned char)bits;
d89 3
a91 3
	memcpy(p,d,len);
	p+=len;
	if (len > 0) p[-1]&=(0xff<<bits);
d93 1
a93 1
	return(ret);
d96 4
a99 2
ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, unsigned char **pp,
	     long len)
d103 2
d109 1
a109 1
		if ((ret=M_ASN1_BIT_STRING_new()) == NULL) return(NULL);
d115 14
a129 6
	/* We do this to preserve the settings.  If we modify
	 * the settings, via the _set_bit function, we will recalculate
	 * on output */
	ret->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07); /* clear */
	ret->flags|=(ASN1_STRING_FLAG_BITS_LEFT|(i&0x07)); /* set */

d132 1
a132 1
		s=(unsigned char *)OPENSSL_malloc((int)len);
d146 1
a146 1
	if (ret->data != NULL) OPENSSL_free(ret->data);
d155 1
a155 1
		M_ASN1_BIT_STRING_free(ret);
d161 4
a164 1
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
a171 3
	if (!value) v=0;

	a->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07); /* clear, set on write */
d178 1
a178 1
			c=(unsigned char *)OPENSSL_malloc(w+1);
d180 1
a180 1
			c=(unsigned char *)OPENSSL_realloc(a->data,w+1);
a181 1
		if (w+1-a->length > 0) memset(c+a->length, 0, w+1-a->length);
d184 2
a185 1
	}
d192 3
a194 1
int ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING *a, int n)
@


1.1.1.3
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@a122 6
	if (len < 1)
		{
		i=ASN1_R_STRING_TOO_SHORT;
		goto err;
		}

@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@d194 1
a194 3
			c=(unsigned char *)OPENSSL_realloc_clean(a->data,
								 a->length,
								 w+1);
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d197 2
a198 6
		if (c == NULL)
			{
			ASN1err(ASN1_F_ASN1_BIT_STRING_SET_BIT,ERR_R_MALLOC_FAILURE);
			return 0;
			}
  		if (w+1-a->length > 0) memset(c+a->length, 0, w+1-a->length);
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d116 2
a117 2
ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,
	const unsigned char **pp, long len)
d120 1
a120 2
	const unsigned char *p;
	unsigned char *s;
d167 1
a167 1
	ASN1err(ASN1_F_C2I_ASN1_BIT_STRING,i);
a184 3
	if (a == NULL)
		return 0;

d187 1
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@a225 23
/*
 * Checks if the given bit string contains only bits specified by 
 * the flags vector. Returns 0 if there is at least one bit set in 'a'
 * which is not specified in 'flags', 1 otherwise.
 * 'len' is the length of 'flags'.
 */
int ASN1_BIT_STRING_check(ASN1_BIT_STRING *a,
			  unsigned char *flags, int flags_len)
	{
	int i, ok;
	/* Check if there is one bit set at all. */
	if (!a || !a->data) return 1;

	/* Check each byte of the internal representation of the bit string. */
	ok = 1;
	for (i = 0; i < a->length && ok; ++i)
		{
		unsigned char mask = i < flags_len ? ~flags[i] : 0xff;
		/* We are done if there is an unneeded bit set. */
		ok = (a->data[i] & mask) == 0;
		}
	return ok;
	}
@


