head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.2
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18;
locks; strict;
comment	@ * @;


1.18
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.17;
commitid	kT0fLt3r4lroFJra;

1.17
date	2015.09.30.18.45.56;	author jsing;	state Exp;
branches;
next	1.16;
commitid	8sXwJiZHsy3qr7Lq;

1.16
date	2014.09.21.12.17.42;	author miod;	state Exp;
branches;
next	1.15;
commitid	uVj7Hre1lP9mevRr;

1.15
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.14;
commitid	yQEL1wOWIearrW15;

1.14
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.07.09.23;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.17;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.57.04;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.35;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.26;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.44;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.01;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_enum.c,v 1.17 2015/09/30 18:45:56 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/bn.h>
#include <openssl/err.h>

/*
 * Code for ENUMERATED type: identical to INTEGER apart from a different tag.
 * for comments on encoding see a_int.c
 */

int
ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
{
	int j, k;
	unsigned int i;
	unsigned char buf[sizeof(long) + 1];
	long d;

	a->type = V_ASN1_ENUMERATED;
	if (a->length < (int)(sizeof(long) + 1)) {
		free(a->data);
		a->data = calloc(1, sizeof(long) + 1);
	}
	if (a->data == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return (0);
	}
	d = v;
	if (d < 0) {
		d = -d;
		a->type = V_ASN1_NEG_ENUMERATED;
	}

	for (i = 0; i < sizeof(long); i++) {
		if (d == 0)
			break;
		buf[i] = (int)d & 0xff;
		d >>= 8;
	}
	j = 0;
	for (k = i - 1; k >= 0; k--)
		a->data[j++] = buf[k];
	a->length = j;
	return (1);
}

long
ASN1_ENUMERATED_get(ASN1_ENUMERATED *a)
{
	int neg = 0, i;
	long r = 0;

	if (a == NULL)
		return (0L);
	i = a->type;
	if (i == V_ASN1_NEG_ENUMERATED)
		neg = 1;
	else if (i != V_ASN1_ENUMERATED)
		return -1;

	if (a->length > (int)sizeof(long)) {
		/* hmm... a bit ugly */
		return -1;
	}
	if (a->data == NULL)
		return 0;

	for (i = 0; i < a->length; i++) {
		r <<= 8;
		r |= (unsigned char)a->data[i];
	}
	if (neg)
		r = -r;
	return (r);
}

ASN1_ENUMERATED *
BN_to_ASN1_ENUMERATED(BIGNUM *bn, ASN1_ENUMERATED *ai)
{
	ASN1_ENUMERATED *ret;
	int len, j;

	if (ai == NULL)
		ret = ASN1_ENUMERATED_new();
	else
		ret = ai;
	if (ret == NULL) {
		ASN1error(ERR_R_NESTED_ASN1_ERROR);
		goto err;
	}
	if (BN_is_negative(bn))
		ret->type = V_ASN1_NEG_ENUMERATED;
	else
		ret->type = V_ASN1_ENUMERATED;
	j = BN_num_bits(bn);
	len = ((j == 0) ? 0 : ((j / 8) + 1));
	if (ret->length < len + 4) {
		unsigned char *new_data = realloc(ret->data, len + 4);
		if (!new_data) {
			ASN1error(ERR_R_MALLOC_FAILURE);
			goto err;
		}
		ret->data = new_data;
	}
	ret->length = BN_bn2bin(bn, ret->data);

	/* Correct zero case */
	if (!ret->length) {
		ret->data[0] = 0;
		ret->length = 1;
	}
	return (ret);

err:
	if (ret != ai)
		ASN1_ENUMERATED_free(ret);
	return (NULL);
}

BIGNUM *
ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED *ai, BIGNUM *bn)
{
	BIGNUM *ret;

	if ((ret = BN_bin2bn(ai->data, ai->length, bn)) == NULL)
		ASN1error(ASN1_R_BN_LIB);
	else if (ai->type == V_ASN1_NEG_ENUMERATED)
		BN_set_negative(ret, 1);
	return (ret);
}
@


1.17
log
@Replace M_ASN1_ENUMERATED_(free|new) with ASN1_ENUMERATED_(free|new).
@
text
@d1 1
a1 1
/* $OpenBSD: a_enum.c,v 1.16 2014/09/21 12:17:42 miod Exp $ */
d84 1
a84 1
		ASN1err(ASN1_F_ASN1_ENUMERATED_SET, ERR_R_MALLOC_FAILURE);
d147 1
a147 1
		ASN1err(ASN1_F_BN_TO_ASN1_ENUMERATED, ERR_R_NESTED_ASN1_ERROR);
d159 1
a159 1
			ASN1err(ASN1_F_BN_TO_ASN1_ENUMERATED, ERR_R_MALLOC_FAILURE);
d185 1
a185 1
		ASN1err(ASN1_F_ASN1_ENUMERATED_TO_BN, ASN1_R_BN_LIB);
@


1.16
log
@a_enum.c used to be a copy of a_int.c with s/INTEGER/ENUMERATED/g , but
some changes an a_int.c did not get applied to a_enum.c; despite style
changes, make sure BN_to_ASN1_ENUMERATED() correctly handles a zero value
the same way BN_to_ASN1_INTEGER() does.

ok bcook@@ beck@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_enum.c,v 1.15 2014/07/11 08:44:47 jsing Exp $ */
d143 1
a143 1
		ret = M_ASN1_ENUMERATED_new();
d175 1
a175 1
		M_ASN1_ENUMERATED_free(ret);
@


1.15
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_enum.c,v 1.14 2014/06/12 15:49:27 deraadt Exp $ */
d100 1
a100 1
	for (k = i - 1; k >=0; k--)
d122 1
a122 1
		return (0xffffffffL);
d164 1
d166 5
a170 1
	ret->length = BN_bn2bin(bn, ret->data);
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
d63 1
@


1.13
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/a_enum.c */
@


1.12
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d79 1
a79 2
		if (a->data != NULL)
			free(a->data);
@


1.11
log
@More KNF.
@
text
@d81 1
a81 2
		if ((a->data = (unsigned char *)malloc(sizeof(long) + 1)) != NULL)
			memset((char *)a->data, 0, sizeof(long) + 1);
@


1.10
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d64 1
a64 1
/* 
d69 2
a70 1
int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
d72 1
a72 1
	int j,k;
d74 1
a74 1
	unsigned char buf[sizeof(long)+1];
d77 2
a78 2
	a->type=V_ASN1_ENUMERATED;
	if (a->length < (int)(sizeof(long)+1)) {
d81 2
a82 2
		if ((a->data=(unsigned char *)malloc(sizeof(long)+1)) != NULL)
			memset((char *)a->data,0,sizeof(long)+1);
d85 2
a86 2
		ASN1err(ASN1_F_ASN1_ENUMERATED_SET,ERR_R_MALLOC_FAILURE);
		return(0);
d88 1
a88 1
	d=v;
d90 2
a91 2
		d= -d;
		a->type=V_ASN1_NEG_ENUMERATED;
d94 11
a104 10
	for (i=0; i<sizeof(long); i++) {
		if (d == 0) break;
		buf[i]=(int)d&0xff;
		d>>=8;
	}
	j=0;
	for (k=i-1; k >=0; k--)
		a->data[j++]=buf[k];
	a->length=j;
	return(1);
d107 2
a108 1
long ASN1_ENUMERATED_get(ASN1_ENUMERATED *a)
d110 2
a111 2
	int neg=0,i;
	long r=0;
d113 3
a115 2
	if (a == NULL) return(0L);
	i=a->type;
d117 1
a117 1
		neg=1;
d120 1
a120 1
	
d123 1
a123 1
		return(0xffffffffL);
d128 7
a134 6
	for (i=0; i<a->length; i++) {
		r<<=8;
		r|=(unsigned char)a->data[i];
	}
	if (neg) r= -r;
	return(r);
d137 2
a138 1
ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(BIGNUM *bn, ASN1_ENUMERATED *ai)
d141 1
a141 1
	int len,j;
d144 1
a144 1
		ret=M_ASN1_ENUMERATED_new();
d146 1
a146 1
		ret=ai;
d148 1
a148 1
		ASN1err(ASN1_F_BN_TO_ASN1_ENUMERATED,ERR_R_NESTED_ASN1_ERROR);
d151 10
a160 9
	if(BN_is_negative(bn)) ret->type = V_ASN1_NEG_ENUMERATED;
	else ret->type=V_ASN1_ENUMERATED;
	j=BN_num_bits(bn);
	len=((j == 0)?0:((j/8)+1));
	if (ret->length < len+4) {
		unsigned char *new_data=realloc(ret->data, len+4);
		if (!new_data)
		{
			ASN1err(ASN1_F_BN_TO_ASN1_ENUMERATED,ERR_R_MALLOC_FAILURE);
d163 1
a163 1
		ret->data=new_data;
d166 3
a168 2
	ret->length=BN_bn2bin(bn,ret->data);
	return(ret);
d170 3
a172 2
	if (ret != ai) M_ASN1_ENUMERATED_free(ret);
	return(NULL);
d175 2
a176 1
BIGNUM *ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED *ai, BIGNUM *bn)
d180 5
a184 4
	if ((ret=BN_bin2bn(ai->data,ai->length,bn)) == NULL)
		ASN1err(ASN1_F_ASN1_ENUMERATED_TO_BN,ASN1_R_BN_LIB);
	else if(ai->type == V_ASN1_NEG_ENUMERATED) BN_set_negative(ret,1);
	return(ret);
@


1.9
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d77 1
a77 2
	if (a->length < (int)(sizeof(long)+1))
	{
d83 1
a83 2
	if (a->data == NULL)
	{
d88 1
a88 2
	if (d < 0)
	{
d93 1
a93 2
	for (i=0; i<sizeof(long); i++)
	{
d117 1
a117 2
	if (a->length > (int)sizeof(long))
	{
d124 1
a124 2
	for (i=0; i<a->length; i++)
	{
d141 1
a141 2
	if (ret == NULL)
	{
d149 1
a149 2
	if (ret->length < len+4)
	{
@


1.8
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d70 1
a70 1
	{
d78 1
a78 1
		{
d83 1
a83 1
		}
d85 1
a85 1
		{
d88 1
a88 1
		}
d91 1
a91 1
		{
d94 1
a94 1
		}
d97 1
a97 1
		{
d101 1
a101 1
		}
d107 1
a107 1
	}
d110 1
a110 1
	{
d122 1
a122 1
		{
d125 1
a125 1
		}
d130 1
a130 1
		{
d133 1
a133 1
		}
d136 1
a136 1
	}
d139 1
a139 1
	{
d148 1
a148 1
		{
d151 1
a151 1
		}
d157 1
a157 1
		{
d160 1
a160 1
			{
d163 1
a163 1
			}
d165 1
a165 1
		}
d172 1
a172 1
	}
d175 1
a175 1
	{
d182 1
a182 1
	}
@


1.7
log
@resolve conflicts
@
text
@d80 2
a81 2
			OPENSSL_free(a->data);
		if ((a->data=(unsigned char *)OPENSSL_malloc(sizeof(long)+1)) != NULL)
d158 1
a158 1
		unsigned char *new_data=OPENSSL_realloc(ret->data, len+4);
@


1.6
log
@resolve conflicts
@
text
@d62 1
d71 2
a72 1
	int i,j,k;
d77 1
a77 1
	if (a->length < (sizeof(long)+1))
d121 1
a121 1
	if (a->length > sizeof(long))
d152 1
a152 1
	if(bn->neg) ret->type = V_ASN1_NEG_ENUMERATED;
d180 1
a180 1
	else if(ai->type == V_ASN1_NEG_ENUMERATED) ret->neg = 1;
@


1.5
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d159 1
a159 1
			ASN1err(ASN1_F_BN_TO_ASN1_INTEGER,ERR_R_MALLOC_FAILURE);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d154 11
a164 1
	ret->data=(unsigned char *)OPENSSL_malloc(len+4);
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@a67 54
ASN1_ENUMERATED *ASN1_ENUMERATED_new(void)
{ return M_ASN1_ENUMERATED_new(); }

void ASN1_ENUMERATED_free(ASN1_ENUMERATED *x)
{ M_ASN1_ENUMERATED_free(x); }


int i2d_ASN1_ENUMERATED(ASN1_ENUMERATED *a, unsigned char **pp)
{
	int len, ret;
	if(!a) return 0;
	len = i2c_ASN1_INTEGER(a, NULL);	
	ret=ASN1_object_size(0,len,V_ASN1_ENUMERATED);
	if(pp) {
		ASN1_put_object(pp,0,len,V_ASN1_ENUMERATED,V_ASN1_UNIVERSAL);
		i2c_ASN1_INTEGER(a, pp);	
	}
	return ret;
}

ASN1_ENUMERATED *d2i_ASN1_ENUMERATED(ASN1_ENUMERATED **a, unsigned char **pp,
	     long length)
{
	unsigned char *p;
	long len;
	int i;
	int inf,tag,xclass;
	ASN1_ENUMERATED *ret;

	p= *pp;
	inf=ASN1_get_object(&p,&len,&tag,&xclass,length);
	if (inf & 0x80)
		{
		i=ASN1_R_BAD_OBJECT_HEADER;
		goto err;
		}

	if (tag != V_ASN1_ENUMERATED)
		{
		i=ASN1_R_EXPECTING_AN_ENUMERATED;
		goto err;
		}
	ret = c2i_ASN1_INTEGER(a, &p, len);
	if(ret) {
		ret->type = (V_ASN1_NEG & ret->type) | V_ASN1_ENUMERATED;
		*pp = p;
	}
	return ret;
err:
	ASN1err(ASN1_F_D2I_ASN1_ENUMERATED,i);
	return(NULL);

}

d117 1
a117 1
		return(0);
d125 1
a125 1
		return(0);
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d74 1
d76 8
a83 63
	{
	int pad=0,ret,r,i,t;
	unsigned char *p,*n,pb=0;

	if ((a == NULL) || (a->data == NULL)) return(0);
	t=a->type;
	if (a->length == 0)
		ret=1;
	else
		{
		ret=a->length;
		i=a->data[0];
		if ((t == V_ASN1_ENUMERATED) && (i > 127)) {
			pad=1;
			pb=0;
		} else if(t == V_ASN1_NEG_ENUMERATED) {
			if(i>128) {
				pad=1;
				pb=0xFF;
			} else if(i == 128) {
				for(i = 1; i < a->length; i++) if(a->data[i]) {
						pad=1;
						pb=0xFF;
						break;
				}
			}
		}
		ret+=pad;
		}
	r=ASN1_object_size(0,ret,V_ASN1_ENUMERATED);
	if (pp == NULL) return(r);
	p= *pp;

	ASN1_put_object(&p,0,ret,V_ASN1_ENUMERATED,V_ASN1_UNIVERSAL);
	if (pad) *(p++)=pb;
	if (a->length == 0)
		*(p++)=0;
	else if (t == V_ASN1_ENUMERATED)
		{
		memcpy(p,a->data,(unsigned int)a->length);
		p+=a->length;
		}
	else {
		/* Begin at the end of the encoding */
		n=a->data + a->length - 1;
		p += a->length - 1;
		i = a->length;
		/* Copy zeros to destination as long as source is zero */
		while(!*n) {
			*(p--) = 0;
			n--;
			i--;
		}
		/* Complement and increment next octet */
		*(p--) = ((*(n--)) ^ 0xff) + 1;
		i--;
		/* Complement any octets left */
		for(;i > 0; i--) *(p--) = *(n--) ^ 0xff;
		p += a->length;
	}

	*pp=p;
	return(r);
d85 2
d90 2
a91 3
	{
	ASN1_ENUMERATED *ret=NULL;
	unsigned char *p,*to,*s;
d93 1
d95 1
a95 9
	int i;

	if ((a == NULL) || ((*a) == NULL))
		{
		if ((ret=M_ASN1_ENUMERATED_new()) == NULL) return(NULL);
		ret->type=V_ASN1_ENUMERATED;
		}
	else
		ret=(*a);
d110 4
a113 50

	/* We must Malloc stuff, even for 0 bytes otherwise it
	 * signifies a missing NULL parameter. */
	s=(unsigned char *)Malloc((int)len+1);
	if (s == NULL)
		{
		i=ERR_R_MALLOC_FAILURE;
		goto err;
		}
	to=s;
	if(!len) {
		/* Strictly speaking this is an illegal ENUMERATED but we
		 * tolerate it.
		 */
		ret->type=V_ASN1_ENUMERATED;
	} else if (*p & 0x80) /* a negative number */
		{
		ret->type=V_ASN1_NEG_ENUMERATED;
		if ((*p == 0xff) && (len != 1)) {
			p++;
			len--;
		}
		i = len;
		p += i - 1;
		to += i - 1;
		while((!*p) && i) {
			*(to--) = 0;
			i--;
			p--;
		}
		if(!i) {
			*s = 1;
			s[len] = 0;
			p += len;
			len++;
		} else {
			*(to--) = (*(p--) ^ 0xff) + 1;
			i--;
			for(;i > 0; i--) *(to--) = *(p--) ^ 0xff;
			p += len;
		}
	} else {
		ret->type=V_ASN1_ENUMERATED;
		if ((*p == 0) && (len != 1))
			{
			p++;
			len--;
			}
		memcpy(s,p,(int)len);
		p+=len;
d115 1
a115 7

	if (ret->data != NULL) Free(ret->data);
	ret->data=s;
	ret->length=(int)len;
	if (a != NULL) (*a)=ret;
	*pp=p;
	return(ret);
a117 2
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
		M_ASN1_ENUMERATED_free(ret);
d119 2
a120 1
	}
d132 2
a133 2
			Free(a->data);
		if ((a->data=(unsigned char *)Malloc(sizeof(long)+1)) != NULL)
d208 1
a208 1
	ret->data=(unsigned char *)Malloc(len+4);
d222 1
a222 1
	if(ai->type == V_ASN1_NEG_ENUMERATED) bn->neg = 1;
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d68 6
d151 1
a151 1
		if ((ret=ASN1_ENUMERATED_new()) == NULL) return(NULL);
d180 6
a185 1
	if (*p & 0x80) /* a negative number */
d222 1
a222 1
	if (ret->data != NULL) Free((char *)ret->data);
d231 1
a231 1
		ASN1_ENUMERATED_free(ret);
d245 1
a245 1
			Free((char *)a->data);
d309 1
a309 1
		ret=ASN1_ENUMERATED_new();
d325 1
a325 1
	if (ret != ai) ASN1_ENUMERATED_free(ret);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d68 156
d234 2
a235 2
			OPENSSL_free(a->data);
		if ((a->data=(unsigned char *)OPENSSL_malloc(sizeof(long)+1)) != NULL)
d273 1
a273 1
		return -1;
d281 1
a281 1
		return 0;
d298 1
a298 1
		ret=M_ASN1_ENUMERATED_new();
d310 1
a310 11
	if (ret->length < len+4)
		{
		unsigned char *new_data=OPENSSL_realloc(ret->data, len+4);
		if (!new_data)
			{
			ASN1err(ASN1_F_BN_TO_ASN1_INTEGER,ERR_R_MALLOC_FAILURE);
			goto err;
			}
		ret->data=new_data;
		}

d314 1
a314 1
	if (ret != ai) M_ASN1_ENUMERATED_free(ret);
d324 1
a324 1
	else if(ai->type == V_ASN1_NEG_ENUMERATED) ret->neg = 1;
@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d159 1
a159 1
			ASN1err(ASN1_F_BN_TO_ASN1_ENUMERATED,ERR_R_MALLOC_FAILURE);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a61 1
#include <openssl/bn.h>
d70 1
a70 2
	int j,k;
	unsigned int i;
d75 1
a75 1
	if (a->length < (int)(sizeof(long)+1))
d119 1
a119 1
	if (a->length > (int)sizeof(long))
d150 1
a150 1
	if(BN_is_negative(bn)) ret->type = V_ASN1_NEG_ENUMERATED;
d178 1
a178 1
	else if(ai->type == V_ASN1_NEG_ENUMERATED) BN_set_negative(ret,1);
@


