head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16;
locks; strict;
comment	@ * @;


1.16
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.15;
commitid	kT0fLt3r4lroFJra;

1.15
date	2016.05.20.15.46.21;	author bcook;	state Exp;
branches;
next	1.14;
commitid	4VRdkDrHxBd717B0;

1.14
date	2016.05.04.14.58.09;	author tedu;	state Exp;
branches;
next	1.13;
commitid	Scqz7PfvhSCzdjtE;

1.13
date	2016.05.04.14.53.29;	author tedu;	state Exp;
branches;
next	1.12;
commitid	dp2wUlmUxyODyIfQ;

1.12
date	2016.05.03.12.38.53;	author tedu;	state Exp;
branches;
next	1.11;
commitid	0ClIPo2LiLW7bSvG;

1.11
date	2014.07.13.11.10.20;	author miod;	state Exp;
branches
	1.11.2.1
	1.11.8.1;
next	1.10;
commitid	gsLttBxqrbhXf5n4;

1.10
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.16.14.15;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2012.04.19.22.57.38;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches
	1.5.12.1
	1.5.16.1;
next	1.4;

1.4
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.10;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.26;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.44;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.29;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	;

1.5.12.1
date	2012.04.22.01.38.23;	author djm;	state Exp;
branches;
next	;

1.5.16.1
date	2012.04.22.01.39.22;	author djm;	state Exp;
branches;
next	;

1.11.2.1
date	2016.05.03.12.39.48;	author tedu;	state Exp;
branches;
next	1.11.2.2;
commitid	Ekna9eOpYJ6UbVcF;

1.11.2.2
date	2016.05.29.19.18.56;	author bcook;	state Exp;
branches;
next	;
commitid	Dyt8zbik0WtvQX6a;

1.11.8.1
date	2016.05.03.12.39.23;	author tedu;	state Exp;
branches;
next	1.11.8.2;
commitid	5iHrqqr5iZFurKzX;

1.11.8.2
date	2016.05.29.19.08.53;	author bcook;	state Exp;
branches;
next	;
commitid	eI4NG6HJLYdpdJdz;


desc
@@


1.16
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: a_d2i_fp.c,v 1.15 2016/05/20 15:46:21 bcook Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <limits.h>
#include <stdio.h>

#include <openssl/asn1.h>
#include <openssl/buffer.h>
#include <openssl/err.h>

static int asn1_d2i_read_bio(BIO *in, BUF_MEM **pb);

#ifndef NO_OLD_ASN1

void *
ASN1_d2i_fp(void *(*xnew)(void), d2i_of_void *d2i, FILE *in, void **x)
{
	BIO *b;
	void *ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		ASN1error(ERR_R_BUF_LIB);
		return (NULL);
	}
	BIO_set_fp(b, in, BIO_NOCLOSE);
	ret = ASN1_d2i_bio(xnew, d2i, b, x);
	BIO_free(b);
	return (ret);
}

void *
ASN1_d2i_bio(void *(*xnew)(void), d2i_of_void *d2i, BIO *in, void **x)
{
	BUF_MEM *b = NULL;
	const unsigned char *p;
	void *ret = NULL;
	int len;

	len = asn1_d2i_read_bio(in, &b);
	if (len < 0)
		goto err;

	p = (unsigned char *)b->data;
	ret = d2i(x, &p, len);

err:
	if (b != NULL)
		BUF_MEM_free(b);
	return (ret);
}

#endif

void *
ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
{
	BUF_MEM *b = NULL;
	const unsigned char *p;
	void *ret = NULL;
	int len;

	len = asn1_d2i_read_bio(in, &b);
	if (len < 0)
		goto err;

	p = (const unsigned char *)b->data;
	ret = ASN1_item_d2i(x, &p, len, it);

err:
	if (b != NULL)
		BUF_MEM_free(b);
	return (ret);
}

void *
ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
{
	BIO *b;
	char *ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		ASN1error(ERR_R_BUF_LIB);
		return (NULL);
	}
	BIO_set_fp(b, in, BIO_NOCLOSE);
	ret = ASN1_item_d2i_bio(it, b, x);
	BIO_free(b);
	return (ret);
}

#define HEADER_SIZE   8
#define ASN1_CHUNK_INITIAL_SIZE (16 * 1024)
static int
asn1_d2i_read_bio(BIO *in, BUF_MEM **pb)
{
	BUF_MEM *b;
	unsigned char *p;
	int i;
	ASN1_const_CTX c;
	size_t want = HEADER_SIZE;
	int eos = 0;
	size_t off = 0;
	size_t len = 0;

	b = BUF_MEM_new();
	if (b == NULL) {
		ASN1error(ERR_R_MALLOC_FAILURE);
		return -1;
	}

	ERR_clear_error();
	for (;;) {
		if (want >= (len - off)) {
			want -= (len - off);

			if (len + want < len ||
			    !BUF_MEM_grow_clean(b, len + want)) {
				ASN1error(ERR_R_MALLOC_FAILURE);
				goto err;
			}
			i = BIO_read(in, &(b->data[len]), want);
			if ((i < 0) && ((len - off) == 0)) {
				ASN1error(ASN1_R_NOT_ENOUGH_DATA);
				goto err;
			}
			if (i > 0) {
				if (len + i < len) {
					ASN1error(ASN1_R_TOO_LONG);
					goto err;
				}
				len += i;
			}
		}
		/* else data already loaded */

		p = (unsigned char *) & (b->data[off]);
		c.p = p;
		c.inf = ASN1_get_object(&(c.p), &(c.slen), &(c.tag),
		    &(c.xclass), len - off);
		if (c.inf & 0x80) {
			unsigned long e;

			e = ERR_GET_REASON(ERR_peek_error());
			if (e != ASN1_R_TOO_LONG)
				goto err;
			else
				ERR_clear_error(); /* clear error */
		}
		i = c.p - p;	/* header length */
		off += i;	/* end of data */

		if (c.inf & 1) {
			/* no data body so go round again */
			eos++;
			if (eos < 0) {
				ASN1error(ASN1_R_HEADER_TOO_LONG);
				goto err;
			}
			want = HEADER_SIZE;
		} else if (eos && (c.slen == 0) && (c.tag == V_ASN1_EOC)) {
			/* eos value, so go back and read another header */
			eos--;
			if (eos <= 0)
				break;
			else
				want = HEADER_SIZE;
		} else {
			/* suck in c.slen bytes of data */
			want = c.slen;
			if (want > (len - off)) {
				size_t chunk_max = ASN1_CHUNK_INITIAL_SIZE;

				want -= (len - off);
				if (want > INT_MAX /* BIO_read takes an int length */ ||
				    len+want < len) {
					ASN1error(ASN1_R_TOO_LONG);
					goto err;
				}
				while (want > 0) {
					/*
					 * Read content in chunks of increasing size
					 * so we can return an error for EOF without
					 * having to allocate the entire content length
					 * in one go.
					 */
					size_t chunk = want > chunk_max ? chunk_max : want;

					if (!BUF_MEM_grow_clean(b, len + chunk)) {
						ASN1error(ERR_R_MALLOC_FAILURE);
						goto err;
					}
					want -= chunk;
					while (chunk > 0) {
						i = BIO_read(in, &(b->data[len]), chunk);
						if (i <= 0) {
							ASN1error(ASN1_R_NOT_ENOUGH_DATA);
							goto err;
						}
						/*
						 * This can't overflow because |len+want|
						 * didn't overflow.
						 */
						len += i;
						chunk -= i;
					}
					if (chunk_max < INT_MAX/2)
						chunk_max *= 2;
				}
			}
			if (off + c.slen < off) {
				ASN1error(ASN1_R_TOO_LONG);
				goto err;
			}
			off += c.slen;
			if (eos <= 0) {
				break;
			} else
				want = HEADER_SIZE;
		}
	}

	if (off > INT_MAX) {
		ASN1error(ASN1_R_TOO_LONG);
		goto err;
	}

	*pb = b;
	return off;

err:
	if (b != NULL)
		BUF_MEM_free(b);
	return -1;
}
@


1.15
log
@Fix a short-read bug in the previous version of asn1_d2i_read_bio

The outer while() loop is missing, so we only read up to chunk_max bytes.
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.14 2016/05/04 14:58:09 tedu Exp $ */
d77 1
a77 1
		ASN1err(ASN1_F_ASN1_D2I_FP, ERR_R_BUF_LIB);
d137 1
a137 1
		ASN1err(ASN1_F_ASN1_ITEM_D2I_FP, ERR_R_BUF_LIB);
d162 1
a162 1
		ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ERR_R_MALLOC_FAILURE);
d173 1
a173 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ERR_R_MALLOC_FAILURE);
d178 1
a178 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ASN1_R_NOT_ENOUGH_DATA);
d183 1
a183 2
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ASN1_R_TOO_LONG);
d211 1
a211 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ASN1_R_HEADER_TOO_LONG);
d231 1
a231 2
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ASN1_R_TOO_LONG);
d244 1
a244 2
						ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
						    ERR_R_MALLOC_FAILURE);
d251 1
a251 2
							ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
							    ASN1_R_NOT_ENOUGH_DATA);
d266 1
a266 1
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_TOO_LONG);
d278 1
a278 1
		ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_TOO_LONG);
@


1.14
log
@be careful about consuming excessive memory by reading in chunks.
CVE-2016-2109 from openssl.
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.13 2016/05/04 14:53:29 tedu Exp $ */
d239 8
a246 7
				/*
				 * Read content in chunks of increasing size
				 * so we can return an error for EOF without
				 * having to allocate the entire content length
				 * in one go.
				 */
				size_t chunk = want > chunk_max ? chunk_max : want;
d248 1
a248 9
				if (!BUF_MEM_grow_clean(b, len + chunk)) {
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ERR_R_MALLOC_FAILURE);
					goto err;
				}
				want -= chunk;
				while (chunk > 0) {
					i = BIO_read(in, &(b->data[len]), chunk);
					if (i <= 0) {
d250 1
a250 1
						    ASN1_R_NOT_ENOUGH_DATA);
d253 17
a269 6
					/*
					 * This can't overflow because |len+want|
					 * didn't overflow.
					 */
					len += i;
					chunk -= i;
a270 2
				if (chunk_max < INT_MAX/2)
					chunk_max *= 2;
@


1.13
log
@revert the big change from yesterday to prepare for smaller commits.
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.12 2016/05/03 12:38:53 tedu Exp $ */
d147 1
d171 4
a174 2
			if (len + want < len || !BUF_MEM_grow_clean(b, len + want)) {
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ERR_R_MALLOC_FAILURE);
d179 2
a180 1
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_NOT_ENOUGH_DATA);
d185 2
a186 1
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_TOO_LONG);
d214 2
a215 1
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_HEADER_TOO_LONG);
d230 2
d235 2
a236 1
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_TOO_LONG);
d239 11
a249 2
				if (!BUF_MEM_grow_clean(b, len + want)) {
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ERR_R_MALLOC_FAILURE);
d252 3
a254 2
				while (want > 0) {
					i = BIO_read(in, &(b->data[len]), want);
d260 4
a263 2
					/* This can't overflow because
					 * |len+want| didn't overflow. */
d265 1
a265 1
					want -= i;
d267 2
@


1.12
log
@patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.11 2014/07/13 11:10:20 miod Exp $ */
a146 1
#define ASN1_CHUNK_INITIAL_SIZE (16 * 1024)
d170 2
a171 4
			if (len + want < len ||
			    !BUF_MEM_grow_clean(b, len + want)) {
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ERR_R_MALLOC_FAILURE);
d176 1
a176 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ASN1_R_NOT_ENOUGH_DATA);
d181 1
a181 2
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ASN1_R_TOO_LONG);
d209 1
a209 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ASN1_R_HEADER_TOO_LONG);
a223 2
				size_t chunk_max = ASN1_CHUNK_INITIAL_SIZE;

d227 1
a227 2
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ASN1_R_TOO_LONG);
d230 2
a231 11
				/*
				 * Read content in chunks of increasing size
				 * so we can return an error for EOF without
				 * having to allocate the entire content length
				 * in one go.
				 */
				size_t chunk = want > chunk_max ? chunk_max : want;

				if (!BUF_MEM_grow_clean(b, len + chunk)) {
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ERR_R_MALLOC_FAILURE);
d234 2
a235 3
				want -= chunk;
				while (chunk > 0) {
					i = BIO_read(in, &(b->data[len]), chunk);
d241 2
a242 4
					/*
					 * This can't overflow because |len+want|
					 * didn't overflow.
					 */
d244 1
a244 1
					chunk -= i;
a245 2
				if (chunk_max < INT_MAX/2)
					chunk_max *= 2;
@


1.11
log
@Don't include asn1_mac.h if all you need is asn1.h.
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.10 2014/07/11 08:44:47 jsing Exp $ */
d147 1
d171 4
a174 2
			if (len + want < len || !BUF_MEM_grow_clean(b, len + want)) {
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ERR_R_MALLOC_FAILURE);
d179 2
a180 1
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_NOT_ENOUGH_DATA);
d185 2
a186 1
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_TOO_LONG);
d214 2
a215 1
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_HEADER_TOO_LONG);
d230 2
d235 2
a236 1
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ASN1_R_TOO_LONG);
d239 11
a249 2
				if (!BUF_MEM_grow_clean(b, len + want)) {
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO, ERR_R_MALLOC_FAILURE);
d252 3
a254 2
				while (want > 0) {
					i = BIO_read(in, &(b->data[len]), want);
d260 4
a263 2
					/* This can't overflow because
					 * |len+want| didn't overflow. */
d265 1
a265 1
					want -= i;
d267 2
@


1.11.2.1
log
@backport patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.11 2014/07/13 11:10:20 miod Exp $ */
a146 1
#define ASN1_CHUNK_INITIAL_SIZE (16 * 1024)
d170 2
a171 4
			if (len + want < len ||
			    !BUF_MEM_grow_clean(b, len + want)) {
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ERR_R_MALLOC_FAILURE);
d176 1
a176 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ASN1_R_NOT_ENOUGH_DATA);
d181 1
a181 2
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ASN1_R_TOO_LONG);
d209 1
a209 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ASN1_R_HEADER_TOO_LONG);
a223 2
				size_t chunk_max = ASN1_CHUNK_INITIAL_SIZE;

d227 1
a227 2
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ASN1_R_TOO_LONG);
d230 2
a231 11
				/*
				 * Read content in chunks of increasing size
				 * so we can return an error for EOF without
				 * having to allocate the entire content length
				 * in one go.
				 */
				size_t chunk = want > chunk_max ? chunk_max : want;

				if (!BUF_MEM_grow_clean(b, len + chunk)) {
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ERR_R_MALLOC_FAILURE);
d234 2
a235 3
				want -= chunk;
				while (chunk > 0) {
					i = BIO_read(in, &(b->data[len]), chunk);
d241 2
a242 4
					/*
					 * This can't overflow because |len+want|
					 * didn't overflow.
					 */
d244 1
a244 1
					chunk -= i;
a245 2
				if (chunk_max < INT_MAX/2)
					chunk_max *= 2;
@


1.11.2.2
log
@Fix a short-read bug in the previous version of asn1_d2i_read_bio

The outer while() loop is missing, so we only read up to chunk_max bytes.
ok tedu
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.11.2.1 2016/05/03 12:39:48 tedu Exp $ */
d239 7
a245 8
				while (want > 0) {
					/*
					 * Read content in chunks of increasing size
					 * so we can return an error for EOF without
					 * having to allocate the entire content length
					 * in one go.
					 */
					size_t chunk = want > chunk_max ? chunk_max : want;
d247 9
a255 1
					if (!BUF_MEM_grow_clean(b, len + chunk)) {
d257 1
a257 1
						    ERR_R_MALLOC_FAILURE);
d260 6
a265 17
					want -= chunk;
					while (chunk > 0) {
						i = BIO_read(in, &(b->data[len]), chunk);
						if (i <= 0) {
							ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
							    ASN1_R_NOT_ENOUGH_DATA);
							goto err;
						}
						/*
						 * This can't overflow because |len+want|
						 * didn't overflow.
						 */
						len += i;
						chunk -= i;
					}
					if (chunk_max < INT_MAX/2)
						chunk_max *= 2;
d267 2
@


1.11.8.1
log
@backport patch from openssl for multiple issues:
missing padding check in aesni functions
overflow in evp encode functions
use of invalid negative asn.1 types
ok beck
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.11 2014/07/13 11:10:20 miod Exp $ */
a146 1
#define ASN1_CHUNK_INITIAL_SIZE (16 * 1024)
d170 2
a171 4
			if (len + want < len ||
			    !BUF_MEM_grow_clean(b, len + want)) {
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ERR_R_MALLOC_FAILURE);
d176 1
a176 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ASN1_R_NOT_ENOUGH_DATA);
d181 1
a181 2
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ASN1_R_TOO_LONG);
d209 1
a209 2
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
				    ASN1_R_HEADER_TOO_LONG);
a223 2
				size_t chunk_max = ASN1_CHUNK_INITIAL_SIZE;

d227 1
a227 2
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ASN1_R_TOO_LONG);
d230 2
a231 11
				/*
				 * Read content in chunks of increasing size
				 * so we can return an error for EOF without
				 * having to allocate the entire content length
				 * in one go.
				 */
				size_t chunk = want > chunk_max ? chunk_max : want;

				if (!BUF_MEM_grow_clean(b, len + chunk)) {
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
					    ERR_R_MALLOC_FAILURE);
d234 2
a235 3
				want -= chunk;
				while (chunk > 0) {
					i = BIO_read(in, &(b->data[len]), chunk);
d241 2
a242 4
					/*
					 * This can't overflow because |len+want|
					 * didn't overflow.
					 */
d244 1
a244 1
					chunk -= i;
a245 2
				if (chunk_max < INT_MAX/2)
					chunk_max *= 2;
@


1.11.8.2
log
@Fix a short-read bug in the previous version of asn1_d2i_read_bio

The outer while() loop is missing, so we only read up to chunk_max bytes.
ok tedu
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.11.8.1 2016/05/03 12:39:23 tedu Exp $ */
d239 7
a245 8
				while (want > 0) {
					/*
					 * Read content in chunks of increasing size
					 * so we can return an error for EOF without
					 * having to allocate the entire content length
					 * in one go.
					 */
					size_t chunk = want > chunk_max ? chunk_max : want;
d247 9
a255 1
					if (!BUF_MEM_grow_clean(b, len + chunk)) {
d257 1
a257 1
						    ERR_R_MALLOC_FAILURE);
d260 6
a265 17
					want -= chunk;
					while (chunk > 0) {
						i = BIO_read(in, &(b->data[len]), chunk);
						if (i <= 0) {
							ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
							    ASN1_R_NOT_ENOUGH_DATA);
							goto err;
						}
						/*
						 * This can't overflow because |len+want|
						 * didn't overflow.
						 */
						len += i;
						chunk -= i;
					}
					if (chunk_max < INT_MAX/2)
						chunk_max *= 2;
d267 2
@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: a_d2i_fp.c,v 1.9 2014/06/12 15:49:27 deraadt Exp $ */
d62 1
a62 1
#include <openssl/asn1_mac.h>
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d59 1
d61 2
a62 2
#include <limits.h>
#include "cryptlib.h"
d64 1
a64 1
#include <openssl/asn1_mac.h>
@


1.8
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d1 1
a1 1
/* crypto/asn1/a_d2i_fp.c */
@


1.7
log
@Initial KNF.
@
text
@a67 1
#ifndef OPENSSL_NO_FP_API
a83 1
#endif
a128 1
#ifndef OPENSSL_NO_FP_API
a143 1
#endif
@


1.6
log
@cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d70 15
a84 15
void *ASN1_d2i_fp(void *(*xnew)(void), d2i_of_void *d2i, FILE *in, void **x)
        {
        BIO *b;
        void *ret;

        if ((b=BIO_new(BIO_s_file())) == NULL)
		{
		ASN1err(ASN1_F_ASN1_D2I_FP,ERR_R_BUF_LIB);
                return(NULL);
		}
        BIO_set_fp(b,in,BIO_NOCLOSE);
        ret=ASN1_d2i_bio(xnew,d2i,b,x);
        BIO_free(b);
        return(ret);
        }
d87 3
a89 2
void *ASN1_d2i_bio(void *(*xnew)(void), d2i_of_void *d2i, BIO *in, void **x)
	{
d92 1
a92 1
	void *ret=NULL;
d96 5
a100 1
	if(len < 0) goto err;
a101 2
	p=(unsigned char *)b->data;
	ret=d2i(x,&p,len);
d103 4
a106 3
	if (b != NULL) BUF_MEM_free(b);
	return(ret);
	}
d110 3
a112 2
void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
	{
d115 1
a115 1
	void *ret=NULL;
d119 5
a123 1
	if(len < 0) goto err;
a124 2
	p=(const unsigned char *)b->data;
	ret=ASN1_item_d2i(x,&p,len, it);
d126 4
a129 3
	if (b != NULL) BUF_MEM_free(b);
	return(ret);
	}
d132 15
a146 15
void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
        {
        BIO *b;
        char *ret;

        if ((b=BIO_new(BIO_s_file())) == NULL)
		{
		ASN1err(ASN1_F_ASN1_ITEM_D2I_FP,ERR_R_BUF_LIB);
                return(NULL);
		}
        BIO_set_fp(b,in,BIO_NOCLOSE);
        ret=ASN1_item_d2i_bio(it,b,x);
        BIO_free(b);
        return(ret);
        }
d150 3
a152 2
static int asn1_d2i_read_bio(BIO *in, BUF_MEM **pb)
	{
d157 8
a164 9
	size_t want=HEADER_SIZE;
	int eos=0;
	size_t off=0;
	size_t len=0;

	b=BUF_MEM_new();
	if (b == NULL)
		{
		ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ERR_R_MALLOC_FAILURE);
d166 1
a166 1
		}
d169 6
a174 9
	for (;;)
		{
		if (want >= (len-off))
			{
			want-=(len-off);

			if (len + want < len || !BUF_MEM_grow_clean(b,len+want))
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ERR_R_MALLOC_FAILURE);
d176 4
a179 5
				}
			i=BIO_read(in,&(b->data[len]),want);
			if ((i < 0) && ((len-off) == 0))
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_NOT_ENOUGH_DATA);
d181 4
a184 6
				}
			if (i > 0)
				{
				if (len+i < len)
					{
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
a185 2
					}
				len+=i;
d187 1
d189 1
d192 5
a196 6
		p=(unsigned char *)&(b->data[off]);
		c.p=p;
		c.inf=ASN1_get_object(&(c.p),&(c.slen),&(c.tag),&(c.xclass),
			len-off);
		if (c.inf & 0x80)
			{
d199 1
a199 1
			e=ERR_GET_REASON(ERR_peek_error());
d204 3
a206 3
			}
		i=c.p-p;/* header length */
		off+=i;	/* end of data */
d208 1
a208 2
		if (c.inf & 1)
			{
d211 2
a212 3
			if (eos < 0)
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_HEADER_TOO_LONG);
a213 2
				}
			want=HEADER_SIZE;
d215 2
a216 2
		else if (eos && (c.slen == 0) && (c.tag == V_ASN1_EOC))
			{
d222 2
a223 4
				want=HEADER_SIZE;
			}
		else 
			{
d225 3
a227 4
			want=c.slen;
			if (want > (len-off))
				{
				want-=(len-off);
d229 6
a234 8
					len+want < len)
						{
						ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
						goto err;
						}
				if (!BUF_MEM_grow_clean(b,len+want))
					{
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ERR_R_MALLOC_FAILURE);
d236 4
a239 6
					}
				while (want > 0)
					{
					i=BIO_read(in,&(b->data[len]),want);
					if (i <= 0)
						{
d243 1
a243 1
						}
d246 2
a247 3
					len+=i;
					want-=i;
					}
d249 3
a251 3
			if (off + c.slen < off)
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
d253 3
a255 4
				}
			off+=c.slen;
			if (eos <= 0)
				{
d257 2
a258 4
				}
			else
				want=HEADER_SIZE;
			}
d260 1
d262 2
a263 3
	if (off > INT_MAX)
		{
		ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
d265 1
a265 1
		}
d269 1
d271 2
a272 1
	if (b != NULL) BUF_MEM_free(b);
d274 1
a274 1
	}
@


1.5
log
@resolve conflicts
@
text
@d60 1
a146 1
	int ret=-1;
d148 1
a148 1
	int want=HEADER_SIZE;
d150 2
a151 7
#if defined(__GNUC__) && defined(__ia64)
	/* pathetic compiler bug in all known versions as of Nov. 2002 */
	long off=0;
#else
	int off=0;
#endif
	int len=0;
d167 1
a167 1
			if (!BUF_MEM_grow_clean(b,len+want))
d179 6
d186 1
d211 5
d230 1
a230 1
			want=(int)c.slen;
d234 6
d254 2
d257 1
a257 1
					want -= i;
d260 6
a265 1
			off+=(int)c.slen;
d275 6
d285 1
a285 1
	return(ret);
@


1.5.16.1
log
@MFC

mem.c
revision 1.14
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +4 -0
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@

asn1/a_d2i_fp.c
revision 1.6
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +40 -14
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@

buffer/buffer.c
revision 1.9
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +17 -0
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@
@
text
@a59 1
#include <limits.h>
d146 1
d148 1
a148 1
	size_t want=HEADER_SIZE;
d150 7
a156 2
	size_t off=0;
	size_t len=0;
d172 1
a172 1
			if (len + want < len || !BUF_MEM_grow_clean(b,len+want))
a183 6
				{
				if (len+i < len)
					{
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
					goto err;
					}
a184 1
				}
a208 5
			if (eos < 0)
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_HEADER_TOO_LONG);
				goto err;
				}
d223 1
a223 1
			want=c.slen;
a226 6
				if (want > INT_MAX /* BIO_read takes an int length */ ||
					len+want < len)
						{
						ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
						goto err;
						}
a240 2
					/* This can't overflow because
					 * |len+want| didn't overflow. */
d242 1
a242 1
					want-=i;
d245 1
a245 6
			if (off + c.slen < off)
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
				goto err;
				}
			off+=c.slen;
a254 6
	if (off > INT_MAX)
		{
		ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
		goto err;
		}

d259 1
a259 1
	return -1;
@


1.5.12.1
log
@MFC

mem.c
revision 1.14
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +4 -0
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@

asn1/a_d2i_fp.c
revision 1.6
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +40 -14
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@

buffer/buffer.c
revision 1.9
date: 2012/04/19 22:57:38;  author: djm;  state: Exp;  lines: +17 -0
cherrypick fix for CVE-2012-2110: libcrypto ASN.1 parsing heap overflow
ok miod@@ deraadt@@
@
text
@a59 1
#include <limits.h>
d146 1
d148 1
a148 1
	size_t want=HEADER_SIZE;
d150 7
a156 2
	size_t off=0;
	size_t len=0;
d172 1
a172 1
			if (len + want < len || !BUF_MEM_grow_clean(b,len+want))
a183 6
				{
				if (len+i < len)
					{
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
					goto err;
					}
a184 1
				}
a208 5
			if (eos < 0)
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_HEADER_TOO_LONG);
				goto err;
				}
d223 1
a223 1
			want=c.slen;
a226 6
				if (want > INT_MAX /* BIO_read takes an int length */ ||
					len+want < len)
						{
						ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
						goto err;
						}
a240 2
					/* This can't overflow because
					 * |len+want| didn't overflow. */
d242 1
a242 1
					want-=i;
d245 1
a245 6
			if (off + c.slen < off)
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
				goto err;
				}
			off+=c.slen;
a254 6
	if (off > INT_MAX)
		{
		ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
		goto err;
		}

d259 1
a259 1
	return -1;
@


1.4
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d69 1
a69 2
char *ASN1_d2i_fp(char *(*xnew)(), char *(*d2i)(), FILE *in,
	     unsigned char **x)
d72 1
a72 1
        char *ret;
d86 1
a86 2
char *ASN1_d2i_bio(char *(*xnew)(), char *(*d2i)(), BIO *in,
	     unsigned char **x)
d89 2
a90 2
	unsigned char *p;
	char *ret=NULL;
d108 1
a108 1
	unsigned char *p;
d115 1
a115 1
	p=(unsigned char *)b->data;
d130 1
a130 1
		ASN1err(ASN1_F_ASN1_D2I_FP,ERR_R_BUF_LIB);
d147 1
a147 1
	ASN1_CTX c;
d161 1
a161 1
		ASN1err(ASN1_F_ASN1_D2I_BIO,ERR_R_MALLOC_FAILURE);
d174 1
a174 1
				ASN1err(ASN1_F_ASN1_D2I_BIO,ERR_R_MALLOC_FAILURE);
d180 1
a180 1
				ASN1err(ASN1_F_ASN1_D2I_BIO,ASN1_R_NOT_ENOUGH_DATA);
d200 1
a200 1
				ERR_get_error(); /* clear error */
d229 1
a229 1
					ASN1err(ASN1_F_ASN1_D2I_BIO,ERR_R_MALLOC_FAILURE);
d237 1
a237 1
						ASN1err(ASN1_F_ASN1_D2I_BIO,
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d152 4
d157 1
d174 1
a174 1
			if (!BUF_MEM_grow(b,len+want))
d229 1
a229 1
				if (!BUF_MEM_grow(b,len+want))
d234 1
a234 2
				i=BIO_read(in,&(b->data[len]),want);
				if (i <= 0)
d236 9
a244 2
					ASN1err(ASN1_F_ASN1_D2I_BIO,ASN1_R_NOT_ENOUGH_DATA);
					goto err;
a245 1
				len+=i;
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d64 4
a67 1
#define HEADER_SIZE   8
a68 1
#ifndef NO_FP_API
d90 55
d148 1
a148 1
	char *ret=NULL;
d159 1
a159 1
		return(NULL);
d247 2
a248 2
	p=(unsigned char *)b->data;
	ret=d2i(x,&p,off);
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "buffer.h"
#include "asn1_mac.h"
d67 2
a68 5
char *ASN1_d2i_fp(xnew,d2i,in,x)
char *(*xnew)();
char *(*d2i)();
FILE *in;
unsigned char **x;
d85 2
a86 5
char *ASN1_d2i_bio(xnew,d2i,in,x)
char *(*xnew)();
char *(*d2i)();
BIO *in;
unsigned char **x;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 2
#include <openssl/buffer.h>
#include <openssl/asn1_mac.h>
d64 1
a64 4
static int asn1_d2i_read_bio(BIO *in, BUF_MEM **pb);

#ifndef NO_OLD_ASN1
#ifndef OPENSSL_NO_FP_API
d66 6
a71 2
char *ASN1_d2i_fp(char *(*xnew)(), char *(*d2i)(), FILE *in,
	     unsigned char **x)
d88 5
a92 57
char *ASN1_d2i_bio(char *(*xnew)(), char *(*d2i)(), BIO *in,
	     unsigned char **x)
	{
	BUF_MEM *b = NULL;
	unsigned char *p;
	char *ret=NULL;
	int len;

	len = asn1_d2i_read_bio(in, &b);
	if(len < 0) goto err;

	p=(unsigned char *)b->data;
	ret=d2i(x,&p,len);
err:
	if (b != NULL) BUF_MEM_free(b);
	return(ret);
	}

#endif

void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
	{
	BUF_MEM *b = NULL;
	unsigned char *p;
	void *ret=NULL;
	int len;

	len = asn1_d2i_read_bio(in, &b);
	if(len < 0) goto err;

	p=(unsigned char *)b->data;
	ret=ASN1_item_d2i(x,&p,len, it);
err:
	if (b != NULL) BUF_MEM_free(b);
	return(ret);
	}

#ifndef OPENSSL_NO_FP_API
void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
        {
        BIO *b;
        char *ret;

        if ((b=BIO_new(BIO_s_file())) == NULL)
		{
		ASN1err(ASN1_F_ASN1_D2I_FP,ERR_R_BUF_LIB);
                return(NULL);
		}
        BIO_set_fp(b,in,BIO_NOCLOSE);
        ret=ASN1_item_d2i_bio(it,b,x);
        BIO_free(b);
        return(ret);
        }
#endif

#define HEADER_SIZE   8
static int asn1_d2i_read_bio(BIO *in, BUF_MEM **pb)
d97 1
a97 1
	int ret=-1;
d108 1
a108 1
		return -1;
d196 2
a197 2
	*pb = b;
	return off;
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a151 4
#if defined(__GNUC__) && defined(__ia64)
	/* pathetic compiler bug in all known versions as of Nov. 2002 */
	long off=0;
#else
a152 1
#endif
d169 1
a169 1
			if (!BUF_MEM_grow_clean(b,len+want))
d224 1
a224 1
				if (!BUF_MEM_grow_clean(b,len+want))
d229 2
a230 1
				while (want > 0)
d232 2
a233 9
					i=BIO_read(in,&(b->data[len]),want);
					if (i <= 0)
						{
						ASN1err(ASN1_F_ASN1_D2I_BIO,
						    ASN1_R_NOT_ENOUGH_DATA);
						goto err;
						}
					len+=i;
					want -= i;
d235 1
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d69 2
a70 1
void *ASN1_d2i_fp(void *(*xnew)(void), d2i_of_void *d2i, FILE *in, void **x)
d73 1
a73 1
        void *ret;
d87 2
a88 1
void *ASN1_d2i_bio(void *(*xnew)(void), d2i_of_void *d2i, BIO *in, void **x)
d91 2
a92 2
	const unsigned char *p;
	void *ret=NULL;
d110 1
a110 1
	const unsigned char *p;
d117 1
a117 1
	p=(const unsigned char *)b->data;
d132 1
a132 1
		ASN1err(ASN1_F_ASN1_ITEM_D2I_FP,ERR_R_BUF_LIB);
d149 1
a149 1
	ASN1_const_CTX c;
d163 1
a163 1
		ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ERR_R_MALLOC_FAILURE);
d176 1
a176 1
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ERR_R_MALLOC_FAILURE);
d182 1
a182 1
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_NOT_ENOUGH_DATA);
d202 1
a202 1
				ERR_clear_error(); /* clear error */
d231 1
a231 1
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ERR_R_MALLOC_FAILURE);
d239 1
a239 1
						ASN1err(ASN1_F_ASN1_D2I_READ_BIO,
@


1.1.1.5
log
@import OpenSSL-1.0.1c
@
text
@a59 1
#include <limits.h>
d146 1
d148 1
a148 1
	size_t want=HEADER_SIZE;
d150 7
a156 2
	size_t off=0;
	size_t len=0;
d172 1
a172 1
			if (len + want < len || !BUF_MEM_grow_clean(b,len+want))
a183 6
				{
				if (len+i < len)
					{
					ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
					goto err;
					}
a184 1
				}
a208 5
			if (eos < 0)
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_HEADER_TOO_LONG);
				goto err;
				}
d223 1
a223 1
			want=c.slen;
a226 6
				if (want > INT_MAX /* BIO_read takes an int length */ ||
					len+want < len)
						{
						ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
						goto err;
						}
a240 2
					/* This can't overflow because
					 * |len+want| didn't overflow. */
d242 1
a242 1
					want-=i;
d245 1
a245 6
			if (off + c.slen < off)
				{
				ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
				goto err;
				}
			off+=c.slen;
a254 6
	if (off > INT_MAX)
		{
		ASN1err(ASN1_F_ASN1_D2I_READ_BIO,ASN1_R_TOO_LONG);
		goto err;
		}

d259 1
a259 1
	return -1;
@


