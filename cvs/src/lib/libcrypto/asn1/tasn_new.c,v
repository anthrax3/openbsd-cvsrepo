head	1.17;
access;
symbols
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17;
locks; strict;
comment	@ * @;


1.17
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.16;
commitid	kT0fLt3r4lroFJra;

1.16
date	2016.12.30.16.04.34;	author jsing;	state Exp;
branches;
next	1.15;
commitid	Gs5oxnpdEYq1UpKL;

1.15
date	2015.07.20.15.43.23;	author miod;	state Exp;
branches;
next	1.14;
commitid	eS0JbaMw2YF43tSR;

1.14
date	2015.02.14.15.23.57;	author miod;	state Exp;
branches;
next	1.13;
commitid	peVibfevZfgr8DNB;

1.13
date	2015.02.14.15.15.27;	author miod;	state Exp;
branches;
next	1.12;
commitid	2zugqyZpZdb2LOgt;

1.12
date	2015.02.14.13.32.46;	author jsing;	state Exp;
branches;
next	1.11;
commitid	dZ0hDZ090i6DWZKS;

1.11
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	mJUVYpkFBZ0Zv2bG;

1.10
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.18.12.15.48;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.50;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.34.36;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: tasn_new.c,v 1.16 2016/12/30 16:04:34 jsing Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000-2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */


#include <stddef.h>
#include <openssl/asn1.h>
#include <openssl/objects.h>
#include <openssl/err.h>
#include <openssl/asn1t.h>
#include <string.h>

static int asn1_item_ex_combine_new(ASN1_VALUE **pval, const ASN1_ITEM *it,
    int combine);
static void asn1_item_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);
static void asn1_template_clear(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
static void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);

ASN1_VALUE *
ASN1_item_new(const ASN1_ITEM *it)
{
	ASN1_VALUE *ret = NULL;
	if (ASN1_item_ex_new(&ret, it) > 0)
		return ret;
	return NULL;
}

/* Allocate an ASN1 structure */

int
ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	return asn1_item_ex_combine_new(pval, it, 0);
}

static int
asn1_item_ex_combine_new(ASN1_VALUE **pval, const ASN1_ITEM *it, int combine)
{
	const ASN1_TEMPLATE *tt = NULL;
	const ASN1_EXTERN_FUNCS *ef;
	const ASN1_AUX *aux = it->funcs;
	ASN1_aux_cb *asn1_cb = NULL;
	ASN1_VALUE **pseqval;
	int i;

	if (aux != NULL && aux->asn1_cb != NULL)
		asn1_cb = aux->asn1_cb;

	if (!combine)
		*pval = NULL;

#ifdef CRYPTO_MDEBUG
	if (it->sname)
		CRYPTO_push_info(it->sname);
#endif

	switch (it->itype) {
	case ASN1_ITYPE_EXTERN:
		ef = it->funcs;
		if (ef && ef->asn1_ex_new) {
			if (!ef->asn1_ex_new(pval, it))
				goto memerr;
		}
		break;

	case ASN1_ITYPE_PRIMITIVE:
		if (it->templates) {
			if (!ASN1_template_new(pval, it->templates))
				goto memerr;
		} else if (!ASN1_primitive_new(pval, it))
			goto memerr;
		break;

	case ASN1_ITYPE_MSTRING:
		if (!ASN1_primitive_new(pval, it))
			goto memerr;
		break;

	case ASN1_ITYPE_CHOICE:
		if (asn1_cb) {
			i = asn1_cb(ASN1_OP_NEW_PRE, pval, it, NULL);
			if (!i)
				goto auxerr;
			if (i == 2) {
#ifdef CRYPTO_MDEBUG
				if (it->sname)
					CRYPTO_pop_info();
#endif
				return 1;
			}
		}
		if (!combine) {
			*pval = calloc(1, it->size);
			if (!*pval)
				goto memerr;
		}
		asn1_set_choice_selector(pval, -1, it);
		if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))
			goto auxerr;
		break;

	case ASN1_ITYPE_NDEF_SEQUENCE:
	case ASN1_ITYPE_SEQUENCE:
		if (asn1_cb) {
			i = asn1_cb(ASN1_OP_NEW_PRE, pval, it, NULL);
			if (!i)
				goto auxerr;
			if (i == 2) {
#ifdef CRYPTO_MDEBUG
				if (it->sname)
					CRYPTO_pop_info();
#endif
				return 1;
			}
		}
		if (!combine) {
			*pval = calloc(1, it->size);
			if (!*pval)
				goto memerr;
			asn1_do_lock(pval, 0, it);
			asn1_enc_init(pval, it);
		}
		for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {
			pseqval = asn1_get_field_ptr(pval, tt);
			if (!ASN1_template_new(pseqval, tt))
				goto memerr;
		}
		if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))
			goto auxerr;
		break;
	}
#ifdef CRYPTO_MDEBUG
	if (it->sname)
		CRYPTO_pop_info();
#endif
	return 1;

memerr:
	ASN1error(ERR_R_MALLOC_FAILURE);
#ifdef CRYPTO_MDEBUG
	if (it->sname)
		CRYPTO_pop_info();
#endif
	return 0;

auxerr:
	ASN1error(ASN1_R_AUX_ERROR);
	ASN1_item_ex_free(pval, it);
#ifdef CRYPTO_MDEBUG
	if (it->sname)
		CRYPTO_pop_info();
#endif
	return 0;

}

static void
asn1_item_clear(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	const ASN1_EXTERN_FUNCS *ef;

	switch (it->itype) {
	case ASN1_ITYPE_EXTERN:
		ef = it->funcs;
		if (ef && ef->asn1_ex_clear)
			ef->asn1_ex_clear(pval, it);
		else
			*pval = NULL;
		break;

	case ASN1_ITYPE_PRIMITIVE:
		if (it->templates)
			asn1_template_clear(pval, it->templates);
		else
			asn1_primitive_clear(pval, it);
		break;

	case ASN1_ITYPE_MSTRING:
		asn1_primitive_clear(pval, it);
		break;

	case ASN1_ITYPE_CHOICE:
	case ASN1_ITYPE_SEQUENCE:
	case ASN1_ITYPE_NDEF_SEQUENCE:
		*pval = NULL;
		break;
	}
}

int
ASN1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)
{
	const ASN1_ITEM *it = tt->item;
	int ret;

	if (tt->flags & ASN1_TFLG_OPTIONAL) {
		asn1_template_clear(pval, tt);
		return 1;
	}
	/* If ANY DEFINED BY nothing to do */

	if (tt->flags & ASN1_TFLG_ADB_MASK) {
		*pval = NULL;
		return 1;
	}
#ifdef CRYPTO_MDEBUG
	if (tt->field_name)
		CRYPTO_push_info(tt->field_name);
#endif
	/* If SET OF or SEQUENCE OF, its a STACK */
	if (tt->flags & ASN1_TFLG_SK_MASK) {
		STACK_OF(ASN1_VALUE) *skval;
		skval = sk_ASN1_VALUE_new_null();
		if (!skval) {
			ASN1error(ERR_R_MALLOC_FAILURE);
			ret = 0;
			goto done;
		}
		*pval = (ASN1_VALUE *)skval;
		ret = 1;
		goto done;
	}
	/* Otherwise pass it back to the item routine */
	ret = asn1_item_ex_combine_new(pval, it, tt->flags & ASN1_TFLG_COMBINE);
done:
#ifdef CRYPTO_MDEBUG
	if (it->sname)
		CRYPTO_pop_info();
#endif
	return ret;
}

static void
asn1_template_clear(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)
{
	/* If ADB or STACK just NULL the field */
	if (tt->flags & (ASN1_TFLG_ADB_MASK|ASN1_TFLG_SK_MASK))
		*pval = NULL;
	else
		asn1_item_clear(pval, tt->item);
}


/* NB: could probably combine most of the real XXX_new() behaviour and junk
 * all the old functions.
 */

int
ASN1_primitive_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	ASN1_TYPE *typ;
	ASN1_STRING *str;
	int utype;

	if (it && it->funcs) {
		const ASN1_PRIMITIVE_FUNCS *pf = it->funcs;
		if (pf->prim_new)
			return pf->prim_new(pval, it);
	}

	if (!it || (it->itype == ASN1_ITYPE_MSTRING))
		utype = V_ASN1_UNDEF;
	else
		utype = it->utype;
	switch (utype) {
	case V_ASN1_OBJECT:
		*pval = (ASN1_VALUE *)OBJ_nid2obj(NID_undef);
		return 1;

	case V_ASN1_BOOLEAN:
		*(ASN1_BOOLEAN *)pval = it->size;
		return 1;

	case V_ASN1_NULL:
		*pval = (ASN1_VALUE *)1;
		return 1;

	case V_ASN1_ANY:
		typ = malloc(sizeof(ASN1_TYPE));
		if (typ != NULL) {
			typ->value.ptr = NULL;
			typ->type = V_ASN1_UNDEF;
		}
		*pval = (ASN1_VALUE *)typ;
		break;

	default:
		str = ASN1_STRING_type_new(utype);
		if (it != NULL && it->itype == ASN1_ITYPE_MSTRING &&
		    str != NULL)
			str->flags |= ASN1_STRING_FLAG_MSTRING;
		*pval = (ASN1_VALUE *)str;
		break;
	}
	if (*pval)
		return 1;
	return 0;
}

static void
asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	int utype;
	if (it && it->funcs) {
		const ASN1_PRIMITIVE_FUNCS *pf = it->funcs;
		if (pf->prim_clear)
			pf->prim_clear(pval, it);
		else
			*pval = NULL;
		return;
	}
	if (!it || (it->itype == ASN1_ITYPE_MSTRING))
		utype = V_ASN1_UNDEF;
	else
		utype = it->utype;
	if (utype == V_ASN1_BOOLEAN)
		*(ASN1_BOOLEAN *)pval = it->size;
	else
		*pval = NULL;
}
@


1.16
log
@Expand ASN1_ITEM_rptr and ASN1_ITEM_ptr macros - no change in generated
assembly.
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_new.c,v 1.15 2015/07/20 15:43:23 miod Exp $ */
d193 1
a193 1
	ASN1err(ASN1_F_ASN1_ITEM_EX_COMBINE_NEW, ERR_R_MALLOC_FAILURE);
d201 1
a201 1
	ASN1err(ASN1_F_ASN1_ITEM_EX_COMBINE_NEW, ASN1_R_AUX_ERROR);
d269 1
a269 1
			ASN1err(ASN1_F_ASN1_TEMPLATE_NEW, ERR_R_MALLOC_FAILURE);
@


1.15
log
@Use V_ASN1_UNDEF instead of -1.
Make sure ASN1_primitive_new() will return NULL in *pval in all error
situations.

ok bcook@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_new.c,v 1.14 2015/02/14 15:23:57 miod Exp $ */
d247 1
a247 1
	const ASN1_ITEM *it = ASN1_ITEM_ptr(tt->item);
d294 1
a294 1
		asn1_item_clear(pval, ASN1_ITEM_ptr(tt->item));
@


1.14
log
@Remove IMPLEMENT_COMPAT_ASN1() and related support code. Nothing uses it in
libcrypto/libssl, and nothing seems to use it in the wild, apart from embedded
copies of OpenSSL.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_new.c,v 1.13 2015/02/14 15:15:27 miod Exp $ */
d316 1
a316 1
		utype = -1;
d334 4
a337 4
		if (!typ)
			return 0;
		typ->value.ptr = NULL;
		typ->type = -1;
d367 1
a367 1
		utype = -1;
@


1.13
log
@Possible NULL pointer dereferences. Coverity CID 21719, 21732.
ok doug@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_new.c,v 1.12 2015/02/14 13:32:46 jsing Exp $ */
a93 1
	const ASN1_COMPAT_FUNCS *cf;
a119 9
	case ASN1_ITYPE_COMPAT:
		cf = it->funcs;
		if (cf && cf->asn1_new) {
			*pval = cf->asn1_new();
			if (!*pval)
				goto memerr;
		}
		break;

a235 1
	case ASN1_ITYPE_COMPAT:
@


1.12
log
@Spell NULL correctly, be explicit with NULL checks and it is also easier to
initialise during declaration and drop the else statement.

ok doug@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: tasn_new.c,v 1.11 2014/06/12 15:49:27 deraadt Exp $ */
d354 2
a355 1
		if (it->itype == ASN1_ITYPE_MSTRING && str)
@


1.11
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d97 1
a97 1
	ASN1_aux_cb *asn1_cb;
d101 1
a101 1
	if (aux && aux->asn1_cb)
a102 2
	else
		asn1_cb = 0;
@


1.10
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@d1 1
a1 1
/* tasn_new.c */
@


1.9
log
@More KNF.
@
text
@d159 1
a159 1
			*pval = malloc(it->size);
a161 1
			memset(*pval, 0, it->size);
d183 1
a183 1
			*pval = malloc(it->size);
a185 1
			memset(*pval, 0, it->size);
@


1.8
log
@lob a few more knf grenades in here to soften things up.
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d68 1
a68 1
								int combine);
d73 2
a74 1
ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it)
d84 2
a85 1
int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
d90 2
a91 2
static int asn1_item_ex_combine_new(ASN1_VALUE **pval, const ASN1_ITEM *it,
								int combine)
d100 1
d106 2
a107 1
	if (!combine) *pval = NULL;
d114 1
a114 2
	switch(it->itype) {

d136 2
a137 3
		}
		else if (!ASN1_primitive_new(pval, it))
				goto memerr;
d142 1
a142 1
				goto memerr;
d150 1
a150 1
			if (i==2) {
d166 1
a166 1
				goto auxerr;
d175 1
a175 1
			if (i==2) {
d197 1
a197 1
				goto auxerr;
d199 1
a199 1
}
d201 2
a202 1
	if (it->sname) CRYPTO_pop_info();
d206 1
a206 1
	memerr:
d209 2
a210 1
	if (it->sname) CRYPTO_pop_info();
d214 1
a214 1
	auxerr:
d218 2
a219 1
	if (it->sname) CRYPTO_pop_info();
d225 2
a226 1
static void asn1_item_clear(ASN1_VALUE **pval, const ASN1_ITEM *it)
d230 1
a230 2
	switch(it->itype) {

d233 1
a233 1
		if (ef && ef->asn1_ex_clear) 
d235 2
a236 1
		else *pval = NULL;
a238 1

d240 1
a240 1
		if (it->templates) 
d259 2
a260 2

int ASN1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)
d264 1
d294 1
a294 1
	done:
d302 2
a303 1
static void asn1_template_clear(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)
d306 1
a306 1
	if (tt->flags & (ASN1_TFLG_ADB_MASK|ASN1_TFLG_SK_MASK)) 
d317 2
a318 1
int ASN1_primitive_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
d334 1
a334 1
	switch(utype) {
d368 2
a369 1
static void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it)
d376 1
a376 1
		else 
d386 2
a387 1
	else *pval = NULL;
@


1.7
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d110 1
a110 2
	switch(it->itype)
	{
d112 1
a112 1
		case ASN1_ITYPE_EXTERN:
d114 1
a114 2
		if (ef && ef->asn1_ex_new)
		{
d120 1
a120 1
		case ASN1_ITYPE_COMPAT:
d126 1
a126 1
	}
d129 2
a130 3
		case ASN1_ITYPE_PRIMITIVE:
		if (it->templates)
		{
d138 1
a138 1
		case ASN1_ITYPE_MSTRING:
d143 2
a144 3
		case ASN1_ITYPE_CHOICE:
		if (asn1_cb)
		{
d148 1
a148 2
			if (i==2)
			{
d156 1
a156 2
		if (!combine)
		{
d167 3
a169 4
		case ASN1_ITYPE_NDEF_SEQUENCE:
		case ASN1_ITYPE_SEQUENCE:
		if (asn1_cb)
		{
d173 1
a173 2
			if (i==2)
			{
d181 1
a181 2
		if (!combine)
		{
d189 1
a189 2
		for (i = 0, tt = it->templates; i < it->tcount; tt++, i++)
		{
d224 1
a224 2
	switch(it->itype)
	{
d226 1
a226 1
		case ASN1_ITYPE_EXTERN:
d234 1
a234 1
		case ASN1_ITYPE_PRIMITIVE:
d241 1
a241 1
		case ASN1_ITYPE_MSTRING:
d245 4
a248 4
		case ASN1_ITYPE_COMPAT:
		case ASN1_ITYPE_CHOICE:
		case ASN1_ITYPE_SEQUENCE:
		case ASN1_ITYPE_NDEF_SEQUENCE:
d259 1
a259 2
	if (tt->flags & ASN1_TFLG_OPTIONAL)
	{
d265 1
a265 2
	if (tt->flags & ASN1_TFLG_ADB_MASK)
	{
d274 1
a274 2
	if (tt->flags & ASN1_TFLG_SK_MASK)
	{
d277 1
a277 2
		if (!skval)
		{
d316 1
a316 2
	if (it && it->funcs)
	{
d326 2
a327 3
	switch(utype)
	{
		case V_ASN1_OBJECT:
d331 1
a331 1
		case V_ASN1_BOOLEAN:
d335 1
a335 1
		case V_ASN1_NULL:
d339 1
a339 1
		case V_ASN1_ANY:
d348 1
a348 1
		default:
d363 1
a363 2
	if (it && it->funcs)
	{
@


1.6
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d74 1
a74 1
	{
d79 1
a79 1
	}
d84 1
a84 1
	{
d86 1
a86 1
	}
d90 1
a90 1
	{
d111 1
a111 1
		{
d116 1
a116 1
			{
d119 1
a119 1
			}
d128 1
a128 1
		}
d133 1
a133 1
			{
d136 1
a136 1
			}
d148 1
a148 1
			{
d153 1
a153 1
				{
a158 1
				}
d160 1
d162 1
a162 1
			{
d167 1
a167 1
			}
d176 1
a176 1
			{
d181 1
a181 1
				{
a186 1
				}
d188 1
d190 1
a190 1
			{
d197 1
a197 1
			}
d199 1
a199 1
			{
d203 1
a203 1
			}
d207 1
a207 1
	}
d228 1
a228 1
	}
d231 1
a231 1
	{
d235 1
a235 1
		{
a261 1
		}
d263 1
d267 1
a267 1
	{
d271 1
a271 1
		{
d274 1
a274 1
		}
d278 1
a278 1
		{
d281 1
a281 1
		}
d288 1
a288 1
		{
d292 1
a292 1
			{
d296 1
a296 1
			}
d300 1
a300 1
		}
d309 1
a309 1
	}
d312 1
a312 1
	{
d318 1
a318 1
	}
d326 1
a326 1
	{
d332 1
a332 1
		{
d336 1
a336 1
		}
d343 1
a343 1
		{
d371 1
a371 1
		}
d375 1
a375 1
	}
d378 1
a378 1
	{
d381 1
a381 1
		{
d388 1
a388 1
		}
d396 1
a396 1
	}
@


1.5
log
@resolve conflicts, fix local changes
@
text
@d163 1
a163 1
			*pval = OPENSSL_malloc(it->size);
d191 1
a191 1
			*pval = OPENSSL_malloc(it->size);
d357 1
a357 1
		typ = OPENSSL_malloc(sizeof(ASN1_TYPE));
@


1.4
log
@resolve conflicts
@
text
@d71 1
a71 1
void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);
d149 1
a149 1
			i = asn1_cb(ASN1_OP_NEW_PRE, pval, it);
d169 1
a169 1
		if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it))
d177 1
a177 1
			i = asn1_cb(ASN1_OP_NEW_PRE, pval, it);
d204 1
a204 1
		if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it))
d328 1
d349 1
a349 4
		if (it)
			*(ASN1_BOOLEAN *)pval = it->size;
		else
			*(ASN1_BOOLEAN *)pval = -1;
d366 4
a369 1
		*pval = (ASN1_VALUE *)ASN1_STRING_type_new(utype);
d377 1
a377 1
void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it)
@


1.3
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.2
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d6 1
a6 1
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
d67 2
a68 1
static int asn1_item_ex_combine_new(ASN1_VALUE **pval, const ASN1_ITEM *it, int combine);
d74 1
a74 1
{
d76 2
a77 1
	if(ASN1_item_ex_new(&ret, it) > 0) return ret;
d79 1
a79 1
}
d84 1
a84 1
{
d86 1
a86 1
}
d88 3
a90 2
static int asn1_item_ex_combine_new(ASN1_VALUE **pval, const ASN1_ITEM *it, int combine)
{
d98 4
a101 2
	if(aux && aux->asn1_cb) asn1_cb = aux->asn1_cb;
	else asn1_cb = 0;
d103 1
a103 1
	if(!combine) *pval = NULL;
d106 2
a107 1
	if(it->sname) CRYPTO_push_info(it->sname);
d110 2
a111 1
	switch(it->itype) {
d115 3
a117 2
		if(ef && ef->asn1_ex_new) {
			if(!ef->asn1_ex_new(pval, it))
d119 1
a119 1
		}
d124 1
a124 1
		if(cf && cf->asn1_new) {
d126 2
a127 1
			if(!*pval) goto memerr;
d132 3
a134 2
		if(it->templates) {
			if(!ASN1_template_new(pval, it->templates))
d136 2
a137 2
		} else {
			if(!ASN1_primitive_new(pval, it))
a138 1
		}
d142 1
a142 1
		if(!ASN1_primitive_new(pval, it))
d147 2
a148 1
		if(asn1_cb) {
d150 4
a153 2
			if(!i) goto auxerr;
			if(i==2) {
d155 2
a156 1
				if(it->sname) CRYPTO_pop_info();
d159 1
d161 2
a162 2
		}
		if(!combine) {
d164 2
a165 1
			if(!*pval) goto memerr;
d167 1
a167 1
		}
d169 1
a169 1
		if(asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it))
d173 1
d175 2
a176 1
		if(asn1_cb) {
d178 4
a181 2
			if(!i) goto auxerr;
			if(i==2) {
d183 2
a184 1
				if(it->sname) CRYPTO_pop_info();
d187 1
d189 2
a190 2
		}
		if(!combine) {
d192 2
a193 1
			if(!*pval) goto memerr;
d197 3
a199 2
		}
		for(i = 0, tt = it->templates; i < it->tcount; tt++, i++) {
d201 4
a204 3
			if(!ASN1_template_new(pseqval, tt)) goto memerr;
		}
		if(asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it))
d209 1
a209 1
	if(it->sname) CRYPTO_pop_info();
d214 1
a214 1
	ASN1err(ASN1_F_ASN1_ITEM_NEW, ERR_R_MALLOC_FAILURE);
d216 1
a216 1
	if(it->sname) CRYPTO_pop_info();
d221 1
a221 1
	ASN1err(ASN1_F_ASN1_ITEM_NEW, ASN1_R_AUX_ERROR);
d224 1
a224 1
	if(it->sname) CRYPTO_pop_info();
d228 1
a228 1
}
d231 1
a231 1
{
d234 2
a235 1
	switch(it->itype) {
d239 1
a239 1
		if(ef && ef->asn1_ex_clear) 
d246 1
a246 1
		if(it->templates) 
d259 1
d262 1
a263 1
}
d267 1
a267 1
{
d270 2
a271 1
	if(tt->flags & ASN1_TFLG_OPTIONAL) {
d274 1
a274 1
	}
d277 2
a278 1
	if(tt->flags & ASN1_TFLG_ADB_MASK) {
d281 1
a281 1
	}
d283 2
a284 1
	if(tt->field_name) CRYPTO_push_info(tt->field_name);
d287 2
a288 1
	if(tt->flags & ASN1_TFLG_SK_MASK) {
d291 2
a292 1
		if(!skval) {
d296 1
a296 1
		}
d300 1
a300 1
	}
d305 2
a306 1
	if(it->sname) CRYPTO_pop_info();
d309 1
a309 1
}
d312 1
a312 1
{
d314 1
a314 1
	if(tt->flags & (ASN1_TFLG_ADB_MASK|ASN1_TFLG_SK_MASK)) 
d318 1
a318 1
}
d321 2
a322 2
/* NB: could probably combine most of the real XXX_new() behaviour and junk all the old
 * functions.
d326 1
a326 1
{
d329 14
a342 6
	const ASN1_PRIMITIVE_FUNCS *pf;
	pf = it->funcs;
	if(pf && pf->prim_new) return pf->prim_new(pval, it);
	if(!it || (it->itype == ASN1_ITYPE_MSTRING)) utype = -1;
	else utype = it->utype;
	switch(utype) {
d360 2
a361 1
		if(!typ) return 0;
d370 4
a374 3
	if(*pval) return 1;
	return 0;
}
d377 1
a377 1
{
d379 4
a382 4
	const ASN1_PRIMITIVE_FUNCS *pf;
	pf = it->funcs;
	if(pf) {
		if(pf->prim_clear)
d387 6
a392 4
	}
	if(!it || (it->itype == ASN1_ITYPE_MSTRING)) utype = -1;
	else utype = it->utype;
	if(utype == V_ASN1_BOOLEAN)
d395 1
a395 1
}
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d308 4
a311 1
		*(ASN1_BOOLEAN *)pval = it->size;
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d308 1
a308 4
		if (it)
			*(ASN1_BOOLEAN *)pval = it->size;
		else
			*(ASN1_BOOLEAN *)pval = -1;
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d6 1
a6 1
 * Copyright (c) 2000-2004 The OpenSSL Project.  All rights reserved.
d67 1
a67 2
static int asn1_item_ex_combine_new(ASN1_VALUE **pval, const ASN1_ITEM *it,
								int combine);
d73 1
a73 1
	{
d75 1
a75 2
	if (ASN1_item_ex_new(&ret, it) > 0)
		return ret;
d77 1
a77 1
	}
d82 1
a82 1
	{
d84 1
a84 1
	}
d86 2
a87 3
static int asn1_item_ex_combine_new(ASN1_VALUE **pval, const ASN1_ITEM *it,
								int combine)
	{
d95 2
a96 4
	if (aux && aux->asn1_cb)
		asn1_cb = aux->asn1_cb;
	else
		asn1_cb = 0;
d98 1
a98 1
	if (!combine) *pval = NULL;
d101 1
a101 2
	if (it->sname)
		CRYPTO_push_info(it->sname);
d104 1
a104 2
	switch(it->itype)
		{
d108 2
a109 3
		if (ef && ef->asn1_ex_new)
			{
			if (!ef->asn1_ex_new(pval, it))
d111 1
a111 1
			}
d116 1
a116 1
		if (cf && cf->asn1_new) {
d118 1
a118 2
			if (!*pval)
				goto memerr;
d123 2
a124 3
		if (it->templates)
			{
			if (!ASN1_template_new(pval, it->templates))
d126 2
a127 2
			}
		else if (!ASN1_primitive_new(pval, it))
d129 1
d133 1
a133 1
		if (!ASN1_primitive_new(pval, it))
d138 1
a138 2
		if (asn1_cb)
			{
d140 2
a141 4
			if (!i)
				goto auxerr;
			if (i==2)
				{
d143 1
a143 2
				if (it->sname)
					CRYPTO_pop_info();
a145 1
				}
d147 2
a148 2
		if (!combine)
			{
d150 1
a150 2
			if (!*pval)
				goto memerr;
d152 1
a152 1
			}
d154 1
a154 1
		if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it))
a157 1
		case ASN1_ITYPE_NDEF_SEQUENCE:
d159 1
a159 2
		if (asn1_cb)
			{
d161 2
a162 4
			if (!i)
				goto auxerr;
			if (i==2)
				{
d164 1
a164 2
				if (it->sname)
					CRYPTO_pop_info();
a166 1
				}
d168 2
a169 2
		if (!combine)
			{
d171 1
a171 2
			if (!*pval)
				goto memerr;
d175 2
a176 3
			}
		for (i = 0, tt = it->templates; i < it->tcount; tt++, i++)
			{
d178 3
a180 4
			if (!ASN1_template_new(pseqval, tt))
				goto memerr;
			}
		if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it))
d185 1
a185 1
	if (it->sname) CRYPTO_pop_info();
d190 1
a190 1
	ASN1err(ASN1_F_ASN1_ITEM_EX_COMBINE_NEW, ERR_R_MALLOC_FAILURE);
d192 1
a192 1
	if (it->sname) CRYPTO_pop_info();
d197 1
a197 1
	ASN1err(ASN1_F_ASN1_ITEM_EX_COMBINE_NEW, ASN1_R_AUX_ERROR);
d200 1
a200 1
	if (it->sname) CRYPTO_pop_info();
d204 1
a204 1
	}
d207 1
a207 1
	{
d210 1
a210 2
	switch(it->itype)
		{
d214 1
a214 1
		if (ef && ef->asn1_ex_clear) 
d221 1
a221 1
		if (it->templates) 
a233 1
		case ASN1_ITYPE_NDEF_SEQUENCE:
a235 1
		}
d237 1
d241 1
a241 1
	{
d244 1
a244 2
	if (tt->flags & ASN1_TFLG_OPTIONAL)
		{
d247 1
a247 1
		}
d250 1
a250 2
	if (tt->flags & ASN1_TFLG_ADB_MASK)
		{
d253 1
a253 1
		}
d255 1
a255 2
	if (tt->field_name)
		CRYPTO_push_info(tt->field_name);
d258 1
a258 2
	if (tt->flags & ASN1_TFLG_SK_MASK)
		{
d261 1
a261 2
		if (!skval)
			{
d265 1
a265 1
			}
d269 1
a269 1
		}
d274 1
a274 2
	if (it->sname)
		CRYPTO_pop_info();
d277 1
a277 1
	}
d280 1
a280 1
	{
d282 1
a282 1
	if (tt->flags & (ASN1_TFLG_ADB_MASK|ASN1_TFLG_SK_MASK)) 
d286 1
a286 1
	}
d289 2
a290 2
/* NB: could probably combine most of the real XXX_new() behaviour and junk
 * all the old functions.
d294 1
a294 1
	{
d297 6
a302 14

	if (it && it->funcs)
		{
		const ASN1_PRIMITIVE_FUNCS *pf = it->funcs;
		if (pf->prim_new)
			return pf->prim_new(pval, it);
		}

	if (!it || (it->itype == ASN1_ITYPE_MSTRING))
		utype = -1;
	else
		utype = it->utype;
	switch(utype)
		{
d320 1
a320 2
		if (!typ)
			return 0;
d329 2
a330 3
		}
	if (*pval)
		return 1;
d332 1
a332 1
	}
d335 1
a335 1
	{
d337 4
a340 4
	if (it && it->funcs)
		{
		const ASN1_PRIMITIVE_FUNCS *pf = it->funcs;
		if (pf->prim_clear)
d345 4
a348 6
		}
	if (!it || (it->itype == ASN1_ITYPE_MSTRING))
		utype = -1;
	else
		utype = it->utype;
	if (utype == V_ASN1_BOOLEAN)
d351 1
a351 1
	}
@


1.1.1.4
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d71 1
a71 1
static void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);
d149 1
a149 1
			i = asn1_cb(ASN1_OP_NEW_PRE, pval, it, NULL);
d169 1
a169 1
		if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))
d177 1
a177 1
			i = asn1_cb(ASN1_OP_NEW_PRE, pval, it, NULL);
d204 1
a204 1
		if (asn1_cb && !asn1_cb(ASN1_OP_NEW_POST, pval, it, NULL))
a327 1
	ASN1_STRING *str;
d348 4
a351 1
		*(ASN1_BOOLEAN *)pval = it->size;
d368 1
a368 4
		str = ASN1_STRING_type_new(utype);
		if (it->itype == ASN1_ITYPE_MSTRING && str)
			str->flags |= ASN1_STRING_FLAG_MSTRING;
		*pval = (ASN1_VALUE *)str;
d376 1
a376 1
static void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it)
@


