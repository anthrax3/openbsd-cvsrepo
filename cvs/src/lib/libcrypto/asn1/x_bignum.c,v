head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2015.07.25.17.07.17;	author jsing;	state Exp;
branches;
next	1.7;
commitid	KRFNs8F3Al0jO8lT;

1.7
date	2014.07.12.16.42.47;	author miod;	state Exp;
branches;
next	1.6;
commitid	B5o3rsF82LcUaaqY;

1.6
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.5;
commitid	yQEL1wOWIearrW15;

1.5
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.50;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Manually expand ASN.1 template macros - only change in generated assembly
is due to line numbering.
@
text
@/* $OpenBSD: x_bignum.c,v 1.7 2014/07/12 16:42:47 miod Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>

#include <openssl/asn1t.h>
#include <openssl/bn.h>

/*
 * Custom primitive type for BIGNUM handling. This reads in an ASN1_INTEGER as a
 * BIGNUM directly. Currently it ignores the sign which isn't a problem since
 * all BIGNUMs used are non negative and anything that looks negative is
 * normally due to an encoding error.
 */

static int bn_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
static void bn_free(ASN1_VALUE **pval, const ASN1_ITEM *it);

static int bn_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype,
    const ASN1_ITEM *it);
static int bn_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,
    int utype, char *free_cont, const ASN1_ITEM *it);

static ASN1_PRIMITIVE_FUNCS bignum_pf = {
	NULL,
	0,
	bn_new,
	bn_free,
	0,
	bn_c2i,
	bn_i2c
};

const ASN1_ITEM BIGNUM_it = {
        .itype = ASN1_ITYPE_PRIMITIVE,
        .utype = V_ASN1_INTEGER,
        .templates = NULL,
        .tcount = 0,
        .funcs = &bignum_pf,
        .size = 0,
        .sname = "BIGNUM",
};

const ASN1_ITEM CBIGNUM_it = {
        .itype = ASN1_ITYPE_PRIMITIVE,
        .utype = V_ASN1_INTEGER,
        .templates = NULL,
        .tcount = 0,
        .funcs = &bignum_pf,
        .size = 0,
        .sname = "BIGNUM",
};

static int
bn_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	*pval = (ASN1_VALUE *)BN_new();
	if (*pval)
		return 1;
	else
		return 0;
}

static void
bn_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	if (*pval == NULL)
		return;
	BN_clear_free((BIGNUM *)*pval);
	*pval = NULL;
}

static int
bn_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype, const ASN1_ITEM *it)
{
	BIGNUM *bn;
	int pad, len;

	if (*pval == NULL)
		return -1;
	bn = (BIGNUM *)*pval;
	/* If MSB set in an octet we need a padding byte */
	if (BN_num_bits(bn) & 0x7)
		pad = 0;
	else
		pad = 1;
	if (cont) {
		if (pad)
			*cont++ = 0;
		len = BN_bn2bin(bn, cont);
	} else
		len = BN_num_bytes(bn);
	return pad + len;
}

static int
bn_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len, int utype,
    char *free_cont, const ASN1_ITEM *it)
{
	BIGNUM *bn;

	if (*pval == NULL) {
		if (bn_new(pval, it) == 0)
			return 0;
	}
	bn = (BIGNUM *)*pval;
	if (!BN_bin2bn(cont, len, bn)) {
		bn_free(pval, it);
		return 0;
	}
	return 1;
}
@


1.7
log
@A few fixes/improvements:
- first, BN_free == BN_clear_free in our libcrypto, so we do not need to
  treat CBIGNUM (crypto BN) separately from BIGNUM (regular BN).
- then, in bn_i2c(), since BN_bn2bin returns BN_num_bytes(input), take
  advantage of this to avoid calling BN_num_bytes() a second time.
  BN_num_bytes() is cheap, but this not a reason to perform redundant
  work.
- finally, in bn_c2i, if bn_new() fails, return early. Otherwise
  BN_bin2bn will try to create a BN too, and although this will probably
  fail since we were already out of memory, if we are on a threaded
  process and suddenly the allocation succeeds, we will leak it since it
  will never be stored in *pval.

ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_bignum.c,v 1.6 2014/07/11 08:44:47 jsing Exp $ */
d89 19
a107 7
ASN1_ITEM_start(BIGNUM)
ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &bignum_pf, 0, "BIGNUM"
ASN1_ITEM_end(BIGNUM)

ASN1_ITEM_start(CBIGNUM)
ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &bignum_pf, 0, "BIGNUM"
ASN1_ITEM_end(CBIGNUM)
@


1.6
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_bignum.c,v 1.5 2014/06/12 15:49:27 deraadt Exp $ */
d64 5
a68 4
/* Custom primitive type for BIGNUM handling. This reads in an ASN1_INTEGER as a
 * BIGNUM directly. Currently it ignores the sign which isn't a problem since all
 * BIGNUMs used are non negative and anything that looks negative is normally due
 * to an encoding error.
a70 2
#define BN_SENSITIVE	1

d94 1
a94 1
ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &bignum_pf, BN_SENSITIVE, "BIGNUM"
d110 1
a110 1
	if (!*pval)
d112 1
a112 4
	if (it->size & BN_SENSITIVE)
		BN_clear_free((BIGNUM *)*pval);
	else
		BN_free((BIGNUM *)*pval);
d120 1
a120 1
	int pad;
d122 1
a122 1
	if (!*pval)
d133 4
a136 3
		BN_bn2bin(bn, cont);
	}
	return pad + BN_num_bytes(bn);
d145 4
a148 2
	if (!*pval)
		bn_new(pval, it);
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
@


1.4
log
@More KNF.
@
text
@d1 1
a1 1
/* x_bignum.c */
@


1.3
log
@resolve conflicts
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d75 4
a78 2
static int bn_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype, const ASN1_ITEM *it);
static int bn_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
d81 2
a82 1
	NULL, 0,
d91 1
a91 1
	ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &bignum_pf, 0, "BIGNUM"
d95 1
a95 1
	ASN1_ITYPE_PRIMITIVE, V_ASN1_INTEGER, NULL, 0, &bignum_pf, BN_SENSITIVE, "BIGNUM"
d98 2
a99 1
static int bn_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
d102 4
a105 2
	if(*pval) return 1;
	else return 0;
d108 2
a109 1
static void bn_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
d111 6
a116 3
	if(!*pval) return;
	if(it->size & BN_SENSITIVE) BN_clear_free((BIGNUM *)*pval);
	else BN_free((BIGNUM *)*pval);
d120 2
a121 1
static int bn_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype, const ASN1_ITEM *it)
d125 3
a127 1
	if(!*pval) return -1;
d130 7
a136 4
	if(BN_num_bits(bn) & 0x7) pad = 0;
	else pad = 1;
	if(cont) {
		if(pad) *cont++ = 0;
d142 3
a144 2
static int bn_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,
		  int utype, char *free_cont, const ASN1_ITEM *it)
d147 5
a151 3
	if(!*pval) bn_new(pval, it);
	bn  = (BIGNUM *)*pval;
	if(!BN_bin2bn(cont, len, bn)) {
a156 2


@


1.2
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d62 1
d76 1
a76 1
static int bn_c2i(ASN1_VALUE **pval, unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
d126 2
a127 1
static int bn_c2i(ASN1_VALUE **pval, unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it)
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@a61 1
#include <openssl/bn.h>
d75 1
a75 1
static int bn_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
d125 1
a125 2
static int bn_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,
		  int utype, char *free_cont, const ASN1_ITEM *it)
@


1.1.1.3
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


