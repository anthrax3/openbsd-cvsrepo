head	1.27;
access;
symbols;
locks; strict;
comment	@ * @;


1.27
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.26;
commitid	kT0fLt3r4lroFJra;

1.26
date	2015.02.07.13.19.15;	author doug;	state Exp;
branches;
next	1.25;
commitid	gtwLkRyWx0K1HbzX;

1.25
date	2014.07.12.16.33.25;	author miod;	state Exp;
branches;
next	1.24;
commitid	BPN5iIqnHIOQQgBn;

1.24
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.23;
commitid	yQEL1wOWIearrW15;

1.23
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.22;
commitid	nzndm3zqPmFurSaK;

1.22
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	mJUVYpkFBZ0Zv2bG;

1.21
date	2014.05.30.06.22.57;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2014.05.29.20.21.22;	author beck;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.21.11.37.41;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.13.14.31;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.15.17.46.16;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.09.12.15.27;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.05.21.36.38;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.06.21.08.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.01.19.51.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.12;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.50;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.34;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.50;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.37;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.51;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.04.06.06.30.01;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.34;	author djm;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: t_x509.c,v 1.26 2015/02/07 13:19:15 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/bn.h>
#include <openssl/buffer.h>
#include <openssl/err.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#ifndef OPENSSL_NO_EC
#include <openssl/ec.h>
#endif
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif

#include "asn1_locl.h"

int
X509_print_fp(FILE *fp, X509 *x)
{
	return X509_print_ex_fp(fp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
}

int
X509_print_ex_fp(FILE *fp, X509 *x, unsigned long nmflag, unsigned long cflag)
{
	BIO *b;
	int ret;

	if ((b = BIO_new(BIO_s_file())) == NULL) {
		X509error(ERR_R_BUF_LIB);
		return (0);
	}
	BIO_set_fp(b, fp, BIO_NOCLOSE);
	ret = X509_print_ex(b, x, nmflag, cflag);
	BIO_free(b);
	return (ret);
}

int
X509_print(BIO *bp, X509 *x)
{
	return X509_print_ex(bp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
}

int
X509_print_ex(BIO *bp, X509 *x, unsigned long nmflags, unsigned long cflag)
{
	long l;
	int ret = 0, i;
	char *m = NULL, mlch = ' ';
	int nmindent = 0;
	X509_CINF *ci;
	ASN1_INTEGER *bs;
	EVP_PKEY *pkey = NULL;
	const char *neg;

	if ((nmflags & XN_FLAG_SEP_MASK) == XN_FLAG_SEP_MULTILINE) {
		mlch = '\n';
		nmindent = 12;
	}

	if (nmflags == X509_FLAG_COMPAT)
		nmindent = 16;

	ci = x->cert_info;
	if (!(cflag & X509_FLAG_NO_HEADER)) {
		if (BIO_write(bp, "Certificate:\n", 13) <= 0)
			goto err;
		if (BIO_write(bp, "    Data:\n", 10) <= 0)
			goto err;
	}
	if (!(cflag & X509_FLAG_NO_VERSION)) {
		l = X509_get_version(x);
		if (BIO_printf(bp, "%8sVersion: %lu (0x%lx)\n",
		    "", l + 1, l) <= 0)
			goto err;
	}
	if (!(cflag & X509_FLAG_NO_SERIAL)) {
		if (BIO_write(bp, "        Serial Number:", 22) <= 0)
			goto err;

		bs = X509_get_serialNumber(x);
		if (bs->length <= (int)sizeof(long)) {
			l = ASN1_INTEGER_get(bs);
			if (bs->type == V_ASN1_NEG_INTEGER) {
				l = -l;
				neg = "-";
			} else
				neg = "";
			if (BIO_printf(bp, " %s%lu (%s0x%lx)\n",
			    neg, l, neg, l) <= 0)
				goto err;
		} else {
			neg = (bs->type == V_ASN1_NEG_INTEGER) ?
			    " (Negative)" : "";
			if (BIO_printf(bp, "\n%12s%s", "", neg) <= 0)
				goto err;
			for (i = 0; i < bs->length; i++) {
				if (BIO_printf(bp, "%02x%c", bs->data[i],
				    ((i + 1 == bs->length) ? '\n' : ':')) <= 0)
					goto err;
			}
		}

	}

	if (!(cflag & X509_FLAG_NO_SIGNAME)) {
		if (X509_signature_print(bp, x->sig_alg, NULL) <= 0)
			goto err;
	}

	if (!(cflag & X509_FLAG_NO_ISSUER)) {
		if (BIO_printf(bp, "        Issuer:%c", mlch) <= 0)
			goto err;
		if (X509_NAME_print_ex(bp, X509_get_issuer_name(x),
		    nmindent, nmflags) < 0)
			goto err;
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
	}
	if (!(cflag & X509_FLAG_NO_VALIDITY)) {
		if (BIO_write(bp, "        Validity\n", 17) <= 0)
			goto err;
		if (BIO_write(bp, "            Not Before: ", 24) <= 0)
			goto err;
		if (!ASN1_TIME_print(bp, X509_get_notBefore(x)))
			goto err;
		if (BIO_write(bp, "\n            Not After : ", 25) <= 0)
			goto err;
		if (!ASN1_TIME_print(bp, X509_get_notAfter(x)))
			goto err;
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
	}
	if (!(cflag & X509_FLAG_NO_SUBJECT)) {
		if (BIO_printf(bp, "        Subject:%c", mlch) <= 0)
			goto err;
		if (X509_NAME_print_ex(bp, X509_get_subject_name(x),
		    nmindent, nmflags) < 0)
			goto err;
		if (BIO_write(bp, "\n", 1) <= 0)
			goto err;
	}
	if (!(cflag & X509_FLAG_NO_PUBKEY)) {
		if (BIO_write(bp, "        Subject Public Key Info:\n",
		    33) <= 0)
			goto err;
		if (BIO_printf(bp, "%12sPublic Key Algorithm: ", "") <= 0)
			goto err;
		if (i2a_ASN1_OBJECT(bp, ci->key->algor->algorithm) <= 0)
			goto err;
		if (BIO_puts(bp, "\n") <= 0)
			goto err;

		pkey = X509_get_pubkey(x);
		if (pkey == NULL) {
			BIO_printf(bp, "%12sUnable to load Public Key\n", "");
			ERR_print_errors(bp);
		} else {
			EVP_PKEY_print_public(bp, pkey, 16, NULL);
			EVP_PKEY_free(pkey);
		}
	}

	if (!(cflag & X509_FLAG_NO_EXTENSIONS))
		X509V3_extensions_print(bp, "X509v3 extensions",
		    ci->extensions, cflag, 8);

	if (!(cflag & X509_FLAG_NO_SIGDUMP)) {
		if (X509_signature_print(bp, x->sig_alg, x->signature) <= 0)
			goto err;
	}
	if (!(cflag & X509_FLAG_NO_AUX)) {
		if (!X509_CERT_AUX_print(bp, x->aux, 0))
			goto err;
	}
	ret = 1;

err:
	free(m);
	return (ret);
}

int X509_ocspid_print (BIO *bp, X509 *x)
{
	unsigned char *der = NULL;
	unsigned char *dertmp;
	int derlen;
	int i;
	unsigned char SHA1md[SHA_DIGEST_LENGTH];

	/* display the hash of the subject as it would appear
	   in OCSP requests */
	if (BIO_printf(bp, "        Subject OCSP hash: ") <= 0)
		goto err;
	derlen = i2d_X509_NAME(x->cert_info->subject, NULL);
	if ((der = dertmp = malloc(derlen)) == NULL)
		goto err;
	i2d_X509_NAME(x->cert_info->subject, &dertmp);

	if (!EVP_Digest(der, derlen, SHA1md, NULL, EVP_sha1(), NULL))
		goto err;
	for (i = 0; i < SHA_DIGEST_LENGTH; i++) {
		if (BIO_printf(bp, "%02X", SHA1md[i]) <= 0)
			goto err;
	}
	free (der);
	der = NULL;

	/* display the hash of the public key as it would appear
	   in OCSP requests */
	if (BIO_printf(bp, "\n        Public key OCSP hash: ") <= 0)
		goto err;

	if (!EVP_Digest(x->cert_info->key->public_key->data,
	    x->cert_info->key->public_key->length,
	    SHA1md, NULL, EVP_sha1(), NULL))
		goto err;
	for (i = 0; i < SHA_DIGEST_LENGTH; i++) {
		if (BIO_printf(bp, "%02X", SHA1md[i]) <= 0)
			goto err;
	}
	BIO_printf(bp, "\n");

	return (1);

err:
	free(der);
	return (0);
}

int
X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent)
{
	const unsigned char *s;
	int i, n;

	n = sig->length;
	s = sig->data;
	for (i = 0; i < n; i++) {
		if ((i % 18) == 0) {
			if (BIO_write(bp, "\n", 1) <= 0)
				return 0;
			if (BIO_indent(bp, indent, indent) <= 0)
				return 0;
		}
		if (BIO_printf(bp, "%02x%s", s[i],
		    ((i + 1) == n) ? "" : ":") <= 0)
			return 0;
	}
	if (BIO_write(bp, "\n", 1) != 1)
		return 0;

	return 1;
}

int
X509_signature_print(BIO *bp, X509_ALGOR *sigalg, ASN1_STRING *sig)
{
	int sig_nid;
	if (BIO_puts(bp, "    Signature Algorithm: ") <= 0)
		return 0;
	if (i2a_ASN1_OBJECT(bp, sigalg->algorithm) <= 0)
		return 0;

	sig_nid = OBJ_obj2nid(sigalg->algorithm);
	if (sig_nid != NID_undef) {
		int pkey_nid, dig_nid;
		const EVP_PKEY_ASN1_METHOD *ameth;
		if (OBJ_find_sigid_algs(sig_nid, &dig_nid, &pkey_nid)) {
			ameth = EVP_PKEY_asn1_find(NULL, pkey_nid);
			if (ameth && ameth->sig_print)
				return ameth->sig_print(bp, sigalg, sig, 9, 0);
		}
	}
	if (sig)
		return X509_signature_dump(bp, sig, 9);
	else if (BIO_puts(bp, "\n") <= 0)
		return 0;
	return 1;
}

int
ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
{
	int i, n;
	char buf[80];
	const char *p;

	if (v == NULL)
		return (0);
	n = 0;
	p = (const char *)v->data;
	for (i = 0; i < v->length; i++) {
		if ((p[i] > '~') || ((p[i] < ' ') &&
		    (p[i] != '\n') && (p[i] != '\r')))
			buf[n] = '.';
		else
			buf[n] = p[i];
		n++;
		if (n >= 80) {
			if (BIO_write(bp, buf, n) <= 0)
				return (0);
			n = 0;
		}
	}
	if (n > 0)
		if (BIO_write(bp, buf, n) <= 0)
			return (0);
	return (1);
}

int
ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
{
	if (tm->type == V_ASN1_UTCTIME)
		return ASN1_UTCTIME_print(bp, tm);
	if (tm->type == V_ASN1_GENERALIZEDTIME)
		return ASN1_GENERALIZEDTIME_print(bp, tm);
	BIO_write(bp, "Bad time value", 14);
	return (0);
}

static const char *mon[12] = {
	"Jan", "Feb", "Mar", "Apr", "May", "Jun", 
	"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
};

int
ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
{
	char *v;
	int gmt = 0;
	int i;
	int y = 0, M = 0, d = 0, h = 0, m = 0, s = 0;
	char *f = NULL;
	int f_len = 0;

	i = tm->length;
	v = (char *)tm->data;

	if (i < 12)
		goto err;
	if (v[i-1] == 'Z')
		gmt = 1;
	for (i = 0; i < 12; i++)
		if ((v[i] > '9') || (v[i] < '0'))
			goto err;
	y = (v[0] - '0') * 1000 + (v[1] - '0') * 100 +
	    (v[2] - '0') * 10 + (v[3] - '0');
	M = (v[4] - '0') * 10 + (v[5] - '0');
	if ((M > 12) || (M < 1))
		goto err;
	d = (v[6] - '0') * 10 + (v[7] - '0');
	h = (v[8] - '0') * 10 + (v[9] - '0');
	m = (v[10] - '0') * 10 + (v[11] - '0');
	if (tm->length >= 14 &&
	    (v[12] >= '0') && (v[12] <= '9') &&
	    (v[13] >= '0') && (v[13] <= '9')) {
		s =  (v[12] - '0') * 10 + (v[13] - '0');
		/* Check for fractions of seconds. */
		if (tm->length >= 15 && v[14] == '.') {
			int l = tm->length;
			f = &v[14];	/* The decimal point. */
			f_len = 1;
			while (14 + f_len < l && f[f_len] >= '0' &&
			    f[f_len] <= '9')
				++f_len;
		}
	}

	if (BIO_printf(bp, "%s %2d %02d:%02d:%02d%.*s %d%s",
	    mon[M - 1], d, h, m, s, f_len, f, y, (gmt) ? " GMT" : "") <= 0)
		return (0);
	else
		return (1);

err:
	BIO_write(bp, "Bad time value", 14);
	return (0);
}

int
ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
{
	const char *v;
	int gmt = 0;
	int i;
	int y = 0, M = 0, d = 0, h = 0, m = 0, s = 0;

	i = tm->length;
	v = (const char *)tm->data;

	if (i < 10)
		goto err;
	if (v[i-1] == 'Z')
		gmt = 1;
	for (i = 0; i < 10; i++)
		if ((v[i] > '9') || (v[i] < '0'))
			goto err;
	y = (v[0] - '0') * 10 + (v[1] - '0');
	if (y < 50)
		y += 100;
	M = (v[2] - '0') * 10 + (v[3] - '0');
	if ((M > 12) || (M < 1))
		goto err;
	d = (v[4] - '0') * 10 + (v[5] - '0');
	h = (v[6] - '0') * 10 + (v[7] - '0');
	m = (v[8] - '0') * 10 + (v[9] - '0');
	if (tm->length >=12 &&
	    (v[10] >= '0') && (v[10] <= '9') &&
	    (v[11] >= '0') && (v[11] <= '9'))
		s = (v[10] - '0') * 10 + (v[11] - '0');

	if (BIO_printf(bp, "%s %2d %02d:%02d:%02d %d%s",
	    mon[M - 1], d, h, m, s, y + 1900, (gmt) ? " GMT" : "") <= 0)
		return (0);
	else
		return (1);

err:
	BIO_write(bp, "Bad time value", 14);
	return (0);
}

int
X509_NAME_print(BIO *bp, X509_NAME *name, int obase)
{
	char *s, *c, *b;
	int ret = 0, l, i;

	l = 80 - 2 - obase;

	b = X509_NAME_oneline(name, NULL, 0);
	if (b == NULL)
		return 0;
	if (*b == '\0') {
		free(b);
		return 1;
	}
	s = b + 1; /* skip the first slash */

	c = s;
	for (;;) {
		if (((*s == '/') &&
		    ((s[1] >= 'A') && (s[1] <= 'Z') &&
		    ((s[2] == '=') || ((s[2] >= 'A') && (s[2] <= 'Z') &&
		    (s[3] == '='))))) || (*s == '\0')) {
			i = s - c;
			if (BIO_write(bp, c, i) != i)
				goto err;
			c = s + 1;	/* skip following slash */
			if (*s != '\0') {
				if (BIO_write(bp, ", ", 2) != 2)
					goto err;
			}
			l--;
		}
		if (*s == '\0')
			break;
		s++;
		l--;
	}

	ret = 1;
	if (0) {
err:
		X509error(ERR_R_BUF_LIB);
	}
	free(b);
	return (ret);
}
@


1.26
log
@Delete a lot of #if 0 code in libressl.

There are a few instances where #if 1 is removed but the code remains.

Based on the following OpenSSL commits.  Some of the commits weren't
strictly deletions so they are going to be split up into separate commits.

6f91b017bbb7140f816721141ac156d1b828a6b3
3d47c1d331fdc7574d2275cda1a630ccdb624b08
dfb56425b68314b2b57e17c82c1df42e7a015132
c8fa2356a00cbaada8963f739e5570298311a060
f16a64d11f55c01f56baa62ebf1dec7f8fe718cb
9ccc00ef6ea65567622e40c49aca43f2c6d79cdb
02a938c953b3e1ced71d9a832de1618f907eb96d
75d0ebef2aef7a2c77b27575b8da898e22f3ccd5
d6fbb194095312f4722c81c9362dbd0de66cb656
6f1a93ad111c7dfe36a09a976c4c009079b19ea1
1a5adcfb5edfe23908b350f8757df405b0f5f71f
8de24b792743d11e1d5a0dcd336a49368750c577
a2b18e657ea1a932d125154f4e13ab2258796d90
8e964419603d2478dfb391c66e7ccb2dcc9776b4
32dfde107636ac9bc62a5b3233fe2a54dbc27008

input + ok jsing@@, miod@@, tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: t_x509.c,v 1.25 2014/07/12 16:33:25 miod Exp $ */
d95 1
a95 1
		X509err(X509_F_X509_PRINT_EX_FP, ERR_R_BUF_LIB);
d533 1
a533 1
		X509err(X509_F_X509_NAME_PRINT, ERR_R_BUF_LIB);
@


1.25
log
@Make sure the return value of X509_NAME_oneline(, NULL,) is checked against
NULL.
ok deraadt@@ guenther@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: t_x509.c,v 1.24 2014/07/11 08:44:47 jsing Exp $ */
a174 8
#if 0
		if (BIO_printf(bp, "%8sSignature Algorithm: ", "") <= 0)
			goto err;
		if (i2a_ASN1_OBJECT(bp, ci->signature->algorithm) <= 0)
			goto err;
		if (BIO_puts(bp, "\n") <= 0)
			goto err;
#endif
@


1.24
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: t_x509.c,v 1.23 2014/07/10 22:45:56 jsing Exp $ */
d508 3
a510 1
	if (!*b) {
@


1.23
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: t_x509.c,v 1.22 2014/06/12 15:49:27 deraadt Exp $ */
d63 1
a63 1
#include "cryptlib.h"
d65 5
a69 4
#include <openssl/bn.h>
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
d76 4
a79 3
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
@


1.22
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.21
log
@more: no need for null check before free
ok tedu guenther
@
text
@d1 1
a1 1
/* crypto/asn1/t_x509.c */
@


1.20
log
@Everything sane has stdio, and FILE *. we don't need ifdefs for this.
ok to firebomb from tedu@@
@
text
@d248 1
a248 2
	if (m != NULL)
		free(m);
d296 1
a296 2
	if (der != NULL)
		free(der);
@


1.19
log
@improve realloc/calloc/malloc patterns; ok guenther
@
text
@a76 1
#ifndef OPENSSL_NO_FP_API
a97 1
#endif
@


1.18
log
@More KNF.
@
text
@d268 1
a268 1
	if ((der = dertmp = (unsigned char *)malloc (derlen)) == NULL)
@


1.17
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d78 2
a79 1
int X509_print_fp(FILE *fp, X509 *x)
d84 15
a98 14
int X509_print_ex_fp(FILE *fp, X509 *x, unsigned long nmflag, unsigned long cflag)
        {
        BIO *b;
        int ret;

        if ((b=BIO_new(BIO_s_file())) == NULL) {
		X509err(X509_F_X509_PRINT_EX_FP,ERR_R_BUF_LIB);
                return(0);
	}
        BIO_set_fp(b,fp,BIO_NOCLOSE);
        ret=X509_print_ex(b, x, nmflag, cflag);
        BIO_free(b);
        return(ret);
        }
d101 2
a102 1
int X509_print(BIO *bp, X509 *x)
d107 2
a108 1
int X509_print_ex(BIO *bp, X509 *x, unsigned long nmflags, unsigned long cflag)
d111 2
a112 2
	int ret=0,i;
	char *m=NULL,mlch = ' ';
d116 1
a116 1
	EVP_PKEY *pkey=NULL;
d119 3
a121 3
	if((nmflags & XN_FLAG_SEP_MASK) == XN_FLAG_SEP_MULTILINE) {
			mlch = '\n';
			nmindent = 12;
d124 1
a124 1
	if(nmflags == X509_FLAG_COMPAT)
d127 6
a132 4
	ci=x->cert_info;
	if(!(cflag & X509_FLAG_NO_HEADER)) {
		if (BIO_write(bp,"Certificate:\n",13) <= 0) goto err;
		if (BIO_write(bp,"    Data:\n",10) <= 0) goto err;
d134 5
a138 3
	if(!(cflag & X509_FLAG_NO_VERSION)) {
		l=X509_get_version(x);
		if (BIO_printf(bp,"%8sVersion: %lu (0x%lx)\n","",l+1,l) <= 0) goto err;
d140 3
a142 3
	if(!(cflag & X509_FLAG_NO_SERIAL)) {

		if (BIO_write(bp,"        Serial Number:",22) <= 0) goto err;
d144 1
a144 1
		bs=X509_get_serialNumber(x);
d146 1
a146 1
			l=ASN1_INTEGER_get(bs);
d148 2
a149 2
				l= -l;
				neg="-";
d151 3
a153 2
				neg="";
			if (BIO_printf(bp," %s%lu (%s0x%lx)\n",neg,l,neg,l) <= 0)
d156 7
a162 6
			neg=(bs->type == V_ASN1_NEG_INTEGER)?" (Negative)":"";
			if (BIO_printf(bp,"\n%12s%s","",neg) <= 0) goto err;

			for (i=0; i<bs->length; i++) {
				if (BIO_printf(bp,"%02x%c",bs->data[i],
					((i+1 == bs->length)?'\n':':')) <= 0)
d169 2
a170 2
	if(!(cflag & X509_FLAG_NO_SIGNAME)) {
		if(X509_signature_print(bp, x->sig_alg, NULL) <= 0)
d173 1
a173 1
		if (BIO_printf(bp,"%8sSignature Algorithm: ","") <= 0) 
d182 8
a189 17
	if(!(cflag & X509_FLAG_NO_ISSUER)) {
		if (BIO_printf(bp,"        Issuer:%c",mlch) <= 0) goto err;
		if (X509_NAME_print_ex(bp,X509_get_issuer_name(x),nmindent, nmflags) < 0) goto err;
		if (BIO_write(bp,"\n",1) <= 0) goto err;
	}
	if(!(cflag & X509_FLAG_NO_VALIDITY)) {
		if (BIO_write(bp,"        Validity\n",17) <= 0) goto err;
		if (BIO_write(bp,"            Not Before: ",24) <= 0) goto err;
		if (!ASN1_TIME_print(bp,X509_get_notBefore(x))) goto err;
		if (BIO_write(bp,"\n            Not After : ",25) <= 0) goto err;
		if (!ASN1_TIME_print(bp,X509_get_notAfter(x))) goto err;
		if (BIO_write(bp,"\n",1) <= 0) goto err;
	}
	if(!(cflag & X509_FLAG_NO_SUBJECT)) {
		if (BIO_printf(bp,"        Subject:%c",mlch) <= 0) goto err;
		if (X509_NAME_print_ex(bp,X509_get_subject_name(x),nmindent, nmflags) < 0) goto err;
		if (BIO_write(bp,"\n",1) <= 0) goto err;
d191 12
a202 2
	if(!(cflag & X509_FLAG_NO_PUBKEY)) {
		if (BIO_write(bp,"        Subject Public Key Info:\n",33) <= 0)
d204 15
a218 1
		if (BIO_printf(bp,"%12sPublic Key Algorithm: ","") <= 0)
d225 1
a225 1
		pkey=X509_get_pubkey(x);
d227 1
a227 1
			BIO_printf(bp,"%12sUnable to load Public Key\n","");
d237 1
a237 1
					ci->extensions, cflag, 8);
d239 3
a241 2
	if(!(cflag & X509_FLAG_NO_SIGDUMP)) {
		if(X509_signature_print(bp, x->sig_alg, x->signature) <= 0) goto err;
d243 3
a245 2
	if(!(cflag & X509_FLAG_NO_AUX)) {
		if (!X509_CERT_AUX_print(bp, x->aux, 0)) goto err;
d247 2
a248 1
	ret=1;
d250 3
a252 2
	if (m != NULL) free(m);
	return(ret);
d257 1
a257 1
	unsigned char *der=NULL ;
d265 1
a265 1
	if (BIO_printf(bp,"        Subject OCSP hash: ") <= 0)
d274 3
a276 2
	for (i=0; i < SHA_DIGEST_LENGTH; i++) {
		if (BIO_printf(bp,"%02X",SHA1md[i]) <= 0) goto err;
d279 1
a279 1
	der=NULL;
d283 1
a283 1
	if (BIO_printf(bp,"\n        Public key OCSP hash: ") <= 0)
d287 2
a288 2
			x->cert_info->key->public_key->length,
			SHA1md, NULL, EVP_sha1(), NULL))
d290 2
a291 2
	for (i=0; i < SHA_DIGEST_LENGTH; i++) {
		if (BIO_printf(bp,"%02X",SHA1md[i]) <= 0)
d294 1
a294 1
	BIO_printf(bp,"\n");
d297 1
d299 3
a301 2
	if (der != NULL) free(der);
	return(0);
d304 2
a305 1
int X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent)
d310 8
a317 6
	n=sig->length;
	s=sig->data;
	for (i=0; i<n; i++) {
		if ((i%18) == 0) {
			if (BIO_write(bp,"\n",1) <= 0) return 0;
			if (BIO_indent(bp, indent, indent) <= 0) return 0;
d319 3
a321 2
			if (BIO_printf(bp,"%02x%s",s[i],
				((i+1) == n)?"":":") <= 0) return 0;
d323 2
a324 1
	if (BIO_write(bp,"\n",1) != 1) return 0;
d329 2
a330 1
int X509_signature_print(BIO *bp, X509_ALGOR *sigalg, ASN1_STRING *sig)
d333 4
a336 2
	if (BIO_puts(bp,"    Signature Algorithm: ") <= 0) return 0;
	if (i2a_ASN1_OBJECT(bp, sigalg->algorithm) <= 0) return 0;
d355 2
a356 1
int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
d358 1
a358 1
	int i,n;
d362 5
a366 4
	if (v == NULL) return(0);
	n=0;
	p=(const char *)v->data;
	for (i=0; i<v->length; i++) {
d368 2
a369 2
			(p[i] != '\n') && (p[i] != '\r')))
			buf[n]='.';
d371 1
a371 1
			buf[n]=p[i];
d374 3
a376 3
			if (BIO_write(bp,buf,n) <= 0)
				return(0);
			n=0;
d380 3
a382 3
		if (BIO_write(bp,buf,n) <= 0)
			return(0);
	return(1);
d385 2
a386 1
int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
d388 6
a393 5
	if(tm->type == V_ASN1_UTCTIME) return ASN1_UTCTIME_print(bp, tm);
	if(tm->type == V_ASN1_GENERALIZEDTIME)
				return ASN1_GENERALIZEDTIME_print(bp, tm);
	BIO_write(bp,"Bad time value",14);
	return(0);
d396 4
a399 5
static const char *mon[12]=
    {
    "Jan","Feb","Mar","Apr","May","Jun",
    "Jul","Aug","Sep","Oct","Nov","Dec"
    };
d401 2
a402 1
int ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
d405 1
a405 1
	int gmt=0;
d407 1
a407 1
	int y=0,M=0,d=0,h=0,m=0,s=0;
d411 2
a412 2
	i=tm->length;
	v=(char *)tm->data;
d414 15
a428 10
	if (i < 12) goto err;
	if (v[i-1] == 'Z') gmt=1;
	for (i=0; i<12; i++)
		if ((v[i] > '9') || (v[i] < '0')) goto err;
	y= (v[0]-'0')*1000+(v[1]-'0')*100 + (v[2]-'0')*10+(v[3]-'0');
	M= (v[4]-'0')*10+(v[5]-'0');
	if ((M > 12) || (M < 1)) goto err;
	d= (v[6]-'0')*10+(v[7]-'0');
	h= (v[8]-'0')*10+(v[9]-'0');
	m=  (v[10]-'0')*10+(v[11]-'0');
d432 1
a432 1
		s=  (v[12]-'0')*10+(v[13]-'0');
d438 2
a439 1
			while (14 + f_len < l && f[f_len] >= '0' && f[f_len] <= '9')
d444 3
a446 3
	if (BIO_printf(bp,"%s %2d %02d:%02d:%02d%.*s %d%s",
		mon[M-1],d,h,m,s,f_len,f,y,(gmt)?" GMT":"") <= 0)
		return(0);
d448 2
a449 1
		return(1);
d451 2
a452 2
	BIO_write(bp,"Bad time value",14);
	return(0);
d455 2
a456 1
int ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
d459 1
a459 1
	int gmt=0;
d461 1
a461 1
	int y=0,M=0,d=0,h=0,m=0,s=0;
d463 2
a464 2
	i=tm->length;
	v=(const char *)tm->data;
d466 16
a481 11
	if (i < 10) goto err;
	if (v[i-1] == 'Z') gmt=1;
	for (i=0; i<10; i++)
		if ((v[i] > '9') || (v[i] < '0')) goto err;
	y= (v[0]-'0')*10+(v[1]-'0');
	if (y < 50) y+=100;
	M= (v[2]-'0')*10+(v[3]-'0');
	if ((M > 12) || (M < 1)) goto err;
	d= (v[4]-'0')*10+(v[5]-'0');
	h= (v[6]-'0')*10+(v[7]-'0');
	m=  (v[8]-'0')*10+(v[9]-'0');
d485 1
a485 1
		s=  (v[10]-'0')*10+(v[11]-'0');
d487 3
a489 3
	if (BIO_printf(bp,"%s %2d %02d:%02d:%02d %d%s",
		mon[M-1],d,h,m,s,y+1900,(gmt)?" GMT":"") <= 0)
		return(0);
d491 2
a492 1
		return(1);
d494 2
a495 2
	BIO_write(bp,"Bad time value",14);
	return(0);
d498 2
a499 1
int X509_NAME_print(BIO *bp, X509_NAME *name, int obase)
d501 2
a502 2
	char *s,*c,*b;
	int ret=0,l,i;
d504 1
a504 1
	l=80-2-obase;
d506 1
a506 1
	b=X509_NAME_oneline(name,NULL,0);
d511 1
a511 1
	s=b+1; /* skip the first slash */
d513 1
a513 1
	c=s;
d515 8
a522 10
		if (	((*s == '/') &&
				((s[1] >= 'A') && (s[1] <= 'Z') && (
					(s[2] == '=') ||
					((s[2] >= 'A') && (s[2] <= 'Z') &&
					(s[3] == '='))
				 ))) ||
			(*s == '\0')) {
			i=s-c;
			if (BIO_write(bp,c,i) != i) goto err;
			c=s+1;	/* skip following slash */
d524 2
a525 1
				if (BIO_write(bp,", ",2) != 2) goto err;
d529 2
a530 1
		if (*s == '\0') break;
d534 2
a535 2
	
	ret=1;
d538 1
a538 1
		X509err(X509_F_X509_NAME_PRINT,ERR_R_BUF_LIB);
d541 1
a541 1
	return(ret);
@


1.16
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d88 1
a88 2
        if ((b=BIO_new(BIO_s_file())) == NULL)
	{
d124 1
a124 2
	if(!(cflag & X509_FLAG_NO_HEADER))
	{
d128 1
a128 2
	if(!(cflag & X509_FLAG_NO_VERSION))
	{
d132 1
a132 2
	if(!(cflag & X509_FLAG_NO_SERIAL))
	{
d137 1
a137 2
		if (bs->length <= (int)sizeof(long))
		{
d139 1
a139 2
			if (bs->type == V_ASN1_NEG_INTEGER)
			{
d142 1
a142 2
			}
			else
d146 1
a146 3
		}
		else
		{
d150 1
a150 2
			for (i=0; i<bs->length; i++)
			{
d159 1
a159 2
	if(!(cflag & X509_FLAG_NO_SIGNAME))
	{
d172 1
a172 2
	if(!(cflag & X509_FLAG_NO_ISSUER))
	{
d177 1
a177 2
	if(!(cflag & X509_FLAG_NO_VALIDITY))
	{
d185 1
a185 2
	if(!(cflag & X509_FLAG_NO_SUBJECT))
	{
d190 1
a190 2
	if(!(cflag & X509_FLAG_NO_PUBKEY))
	{
d201 1
a201 2
		if (pkey == NULL)
		{
d204 1
a204 3
		}
		else
		{
d214 1
a214 2
	if(!(cflag & X509_FLAG_NO_SIGDUMP))
	{
d217 1
a217 2
	if(!(cflag & X509_FLAG_NO_AUX))
	{
d245 1
a245 2
	for (i=0; i < SHA_DIGEST_LENGTH; i++)
	{
d260 1
a260 2
	for (i=0; i < SHA_DIGEST_LENGTH; i++)
	{
d279 2
a280 4
	for (i=0; i<n; i++)
	{
		if ((i%18) == 0)
		{
d299 1
a299 2
	if (sig_nid != NID_undef)
	{
d302 1
a302 2
		if (OBJ_find_sigid_algs(sig_nid, &dig_nid, &pkey_nid))
		{
d324 1
a324 2
	for (i=0; i<v->length; i++)
	{
d331 1
a331 2
		if (n >= 80)
		{
d382 1
a382 2
	    (v[13] >= '0') && (v[13] <= '9'))
	{
d385 1
a385 2
		if (tm->length >= 15 && v[14] == '.')
		{
d448 1
a448 2
	if (!*b)
	{
d455 1
a455 2
	for (;;)
	{
d462 1
a462 2
			(*s == '\0'))
		{
d466 1
a466 2
			if (*s != '\0')
			{
d477 1
a477 2
	if (0)
	{
@


1.15
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d79 1
a79 1
	{
d81 1
a81 1
	}
d89 1
a89 1
		{
d92 1
a92 1
		}
d106 1
a106 1
	{
d126 1
a126 1
		{
d129 1
a129 1
		}
d131 1
a131 1
		{
d134 1
a134 1
		}
d136 1
a136 1
		{
d142 1
a142 1
			{
d145 1
a145 1
				{
d148 1
a148 1
				}
d153 1
a153 1
			}
d155 1
a155 1
			{
d160 1
a160 1
				{
a163 1
				}
d165 1
d167 1
a167 1
		}
d170 1
a170 1
		{
d181 1
a181 1
		}
d184 1
a184 1
		{
d188 1
a188 1
		}
d190 1
a190 1
		{
d197 1
a197 1
		}
d199 1
a199 1
		{
d203 1
a203 1
		}
d205 1
a205 1
		{
d217 1
a217 1
			{
d220 1
a220 1
			}
d222 1
a222 1
			{
a224 1
			}
d226 1
d233 1
a233 1
		{
d235 1
a235 1
		}
d237 1
a237 1
		{
d239 1
a239 1
		}
d244 1
a244 1
	}
d247 1
a247 1
	{
d266 1
a266 1
		{
d268 1
a268 1
		}
d282 1
a282 1
		{
d285 1
a285 1
		}
d292 1
a292 1
	}
d302 2
a304 2
		if ((i%18) == 0)
			{
d307 1
a307 1
			}
d310 1
a310 1
		}
d324 1
a324 1
		{
d328 1
a328 1
			{
a331 1
			}
d333 1
d342 1
a342 1
	{
d351 1
a351 1
		{
d359 1
a359 1
			{
a362 1
			}
d364 1
d369 1
a369 1
	}
d387 1
a387 1
	{
d411 1
a411 1
		{
d415 1
a415 1
			{
a420 1
			}
d422 1
d432 1
a432 1
	}
d435 1
a435 1
	{
d468 1
a468 1
	}
d471 1
a471 1
	{
d479 1
a479 1
		{
d482 1
a482 1
		}
d487 1
a487 1
		{
d495 1
a495 1
			{
d500 1
a500 1
				{
d502 1
a502 1
				}
d504 1
a504 1
			}
d508 1
a508 1
		}
d512 1
a512 1
		{
d515 1
a515 1
		}
d518 1
a518 1
	}
@


1.14
log
@Send the rotIBM stream cipher (ebcdic) to Valhalla to party for eternity
with the bearded ones...
some API's that nobody should be using will dissapear with this commit.
@
text
@d242 1
a242 1
	if (m != NULL) OPENSSL_free(m);
d259 1
a259 1
	if ((der = dertmp = (unsigned char *)OPENSSL_malloc (derlen)) == NULL)
d269 1
a269 1
	OPENSSL_free (der);
d290 1
a290 1
	if (der != NULL) OPENSSL_free(der);
d480 1
a480 1
		OPENSSL_free(b);
d516 1
a516 1
	OPENSSL_free(b);
@


1.13
log
@resolve conflicts
@
text
@a487 1
#ifndef CHARSET_EBCDIC
a494 9
#else
		if (	((*s == '/') &&
				(isupper(s[1]) && (
					(s[2] == '=') ||
					(isupper(s[2]) &&
					(s[3] == '='))
				 ))) ||
			(*s == '\0'))
#endif
@


1.12
log
@resolve conflicts, fix local changes
@
text
@d75 1
d141 1
a141 1
		if (bs->length <= 4)
d144 1
a144 1
			if (l < 0)
d171 3
d180 1
d263 2
a264 1
	EVP_Digest(der, derlen, SHA1md, NULL, EVP_sha1(), NULL);
d277 4
a280 2
	EVP_Digest(x->cert_info->key->public_key->data,
		x->cert_info->key->public_key->length, SHA1md, NULL, EVP_sha1(), NULL);
d294 1
a294 1
int X509_signature_print(BIO *bp, X509_ALGOR *sigalg, ASN1_STRING *sig)
d296 1
a296 1
	unsigned char *s;
a297 2
	if (BIO_puts(bp,"    Signature Algorithm: ") <= 0) return 0;
	if (i2a_ASN1_OBJECT(bp, sigalg->algorithm) <= 0) return 0;
d304 4
a307 1
			if (BIO_write(bp,"\n        ",9) <= 0) return 0;
d312 26
@


1.11
log
@resolve conflicts
@
text
@a113 1
	ASN1_STRING *str=NULL;
a216 2
#ifndef OPENSSL_NO_RSA
		if (pkey->type == EVP_PKEY_RSA)
d218 2
a219 3
			BIO_printf(bp,"%12sRSA Public Key: (%d bit)\n","",
			BN_num_bits(pkey->pkey.rsa->n));
			RSA_print(bp,pkey->pkey.rsa,16);
a220 21
		else
#endif
#ifndef OPENSSL_NO_DSA
		if (pkey->type == EVP_PKEY_DSA)
			{
			BIO_printf(bp,"%12sDSA Public Key:\n","");
			DSA_print(bp,pkey->pkey.dsa,16);
			}
		else
#endif
#ifndef OPENSSL_NO_EC
		if (pkey->type == EVP_PKEY_EC)
			{
			BIO_printf(bp, "%12sEC Public Key:\n","");
			EC_KEY_print(bp, pkey->pkey.ec, 16);
			}
		else
#endif
			BIO_printf(bp,"%12sUnknown Public Key:\n","");

		EVP_PKEY_free(pkey);
a236 1
	if (str != NULL) ASN1_STRING_free(str);
d306 1
a306 1
int ASN1_STRING_print(BIO *bp, ASN1_STRING *v)
d309 2
a310 1
	char buf[80],*p;
d314 1
a314 1
	p=(char *)v->data;
d336 1
a336 1
int ASN1_TIME_print(BIO *bp, ASN1_TIME *tm)
d351 1
a351 1
int ASN1_GENERALIZEDTIME_print(BIO *bp, ASN1_GENERALIZEDTIME *tm)
d357 2
d376 1
d378 10
d389 2
a390 2
	if (BIO_printf(bp,"%s %2d %02d:%02d:%02d %d%s",
		mon[M-1],d,h,m,s,y,(gmt)?" GMT":"") <= 0)
d399 1
a399 1
int ASN1_UTCTIME_print(BIO *bp, ASN1_UTCTIME *tm)
d401 1
a401 1
	char *v;
d407 1
a407 1
	v=(char *)tm->data;
@


1.10
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d396 1
a396 1
	if (i >= 14 &&
d432 1
a432 1
	if (i >=12 &&
@


1.9
log
@resolve conflicts
@
text
@d396 3
a398 2
	if (	(v[12] >= '0') && (v[12] <= '9') &&
		(v[13] >= '0') && (v[13] <= '9'))
d432 3
a434 2
	if (	(v[10] >= '0') && (v[10] <= '9') &&
		(v[11] >= '0') && (v[11] <= '9'))
a505 1

@


1.8
log
@Remove some double semicolons (hmm, do two semis equal a maxi?).
I've skipped the GNU stuff for now.  From Patrick Latifi.
@
text
@d69 3
d89 1
a89 1
		X509err(X509_F_X509_PRINT_FP,ERR_R_BUF_LIB);
d235 8
d448 1
a448 1
	int ret=0,l,ll,i,first=1;
d450 1
a450 1
	ll=80-2-obase;
d452 2
a453 2
	b=s=X509_NAME_oneline(name,NULL,0);
	if (!*s)
d458 1
a458 1
	s++; /* skip the first slash */
a459 1
	l=ll;
a480 10
			if ((l <= 0) && !first)
				{
				first=0;
				if (BIO_write(bp,"\n",1) != 1) goto err;
				for (i=0; i<obase; i++)
					{
					if (BIO_write(bp," ",1) != 1) goto err;
					}
				l=ll;
				}
d483 1
a483 2
			c+=i;
			c++;
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d324 1
a324 1
	char buf[80],*p;;
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d436 1
a436 1
	char *s,*c;
a437 1
	char buf[256];
d441 1
a441 1
	s=X509_NAME_oneline(name,buf,256);
d443 2
d446 1
d502 1
@


1.5
log
@merge openssl 0.9.6b-engine

Note that this is a maintenence release, API's appear *not* to have changed.
As such, I have only increased the minor number on these libraries
@
text
@d63 1
a63 1
#ifndef NO_RSA
d66 1
a66 1
#ifndef NO_DSA
d73 1
a73 1
#ifndef NO_FP_API
d75 5
d90 1
a90 1
        ret=X509_print(b, x);
d97 5
d104 3
a106 2
	int ret=0,i,j,n;
	char *m=NULL,*s;
a110 1
	X509_EXTENSION *ex;
d113 8
d122 6
a127 8
	if (BIO_write(bp,"Certificate:\n",13) <= 0) goto err;
	if (BIO_write(bp,"    Data:\n",10) <= 0) goto err;
	l=X509_get_version(x);
	if (BIO_printf(bp,"%8sVersion: %lu (0x%lx)\n","",l+1,l) <= 0) goto err;
	if (BIO_write(bp,"        Serial Number:",22) <= 0) goto err;

	bs=X509_get_serialNumber(x);
	if (bs->length <= 4)
d129 2
a130 10
		l=ASN1_INTEGER_get(bs);
		if (l < 0)
			{
			l= -l;
			neg="-";
			}
		else
			neg="";
		if (BIO_printf(bp," %s%lu (%s0x%lx)\n",neg,l,neg,l) <= 0)
			goto err;
d132 1
a132 1
	else
a133 2
		neg=(bs->type == V_ASN1_NEG_INTEGER)?" (Negative)":"";
		if (BIO_printf(bp,"\n%12s%s","",neg) <= 0) goto err;
d135 4
a138 1
		for (i=0; i<bs->length; i++)
d140 9
a148 2
			if (BIO_printf(bp,"%02x%c",bs->data[i],
				((i+1 == bs->length)?'\n':':')) <= 0)
d151 13
d166 9
a174 4
	i=OBJ_obj2nid(ci->signature->algorithm);
	if (BIO_printf(bp,"%8sSignature Algorithm: %s\n","",
		(i == NID_undef)?"UNKNOWN":OBJ_nid2ln(i)) <= 0)
		goto err;
d176 1
a176 17
	if (BIO_write(bp,"        Issuer: ",16) <= 0) goto err;
	if (!X509_NAME_print(bp,X509_get_issuer_name(x),16)) goto err;
	if (BIO_write(bp,"\n        Validity\n",18) <= 0) goto err;
	if (BIO_write(bp,"            Not Before: ",24) <= 0) goto err;
	if (!ASN1_TIME_print(bp,X509_get_notBefore(x))) goto err;
	if (BIO_write(bp,"\n            Not After : ",25) <= 0) goto err;
	if (!ASN1_TIME_print(bp,X509_get_notAfter(x))) goto err;
	if (BIO_write(bp,"\n        Subject: ",18) <= 0) goto err;
	if (!X509_NAME_print(bp,X509_get_subject_name(x),16)) goto err;
	if (BIO_write(bp,"\n        Subject Public Key Info:\n",34) <= 0)
		goto err;
	i=OBJ_obj2nid(ci->key->algor->algorithm);
	if (BIO_printf(bp,"%12sPublic Key Algorithm: %s\n","",
		(i == NID_undef)?"UNKNOWN":OBJ_nid2ln(i)) <= 0) goto err;

	pkey=X509_get_pubkey(x);
	if (pkey == NULL)
d178 3
a180 2
		BIO_printf(bp,"%12sUnable to load Public Key\n","");
		ERR_print_errors(bp);
d182 1
a182 3
	else
#ifndef NO_RSA
	if (pkey->type == EVP_PKEY_RSA)
d184 6
a189 3
		BIO_printf(bp,"%12sRSA Public Key: (%d bit)\n","",
		BN_num_bits(pkey->pkey.rsa->n));
		RSA_print(bp,pkey->pkey.rsa,16);
d191 1
a191 4
	else
#endif
#ifndef NO_DSA
	if (pkey->type == EVP_PKEY_DSA)
d193 3
a195 2
		BIO_printf(bp,"%12sDSA Public Key:\n","");
		DSA_print(bp,pkey->pkey.dsa,16);
d197 26
a222 1
	else
d224 2
a225 9
		BIO_printf(bp,"%12sUnknown Public Key:\n","");

	EVP_PKEY_free(pkey);

	n=X509_get_ext_count(x);
	if (n > 0)
		{
		BIO_printf(bp,"%8sX509v3 extensions:\n","");
		for (i=0; i<n; i++)
d227 2
a228 14
			ASN1_OBJECT *obj;
			ex=X509_get_ext(x,i);
			if (BIO_printf(bp,"%12s","") <= 0) goto err;
			obj=X509_EXTENSION_get_object(ex);
			i2a_ASN1_OBJECT(bp,obj);
			j=X509_EXTENSION_get_critical(ex);
			if (BIO_printf(bp,": %s\n",j?"critical":"","") <= 0)
				goto err;
			if(!X509V3_EXT_print(bp, ex, 0, 16))
				{
				BIO_printf(bp, "%16s", "");
				M_ASN1_OCTET_STRING_print(bp,ex->value);
				}
			if (BIO_write(bp,"\n",1) <= 0) goto err;
d230 5
d237 3
a239 3
	i=OBJ_obj2nid(x->sig_alg->algorithm);
	if (BIO_printf(bp,"%4sSignature Algorithm: %s","",
		(i == NID_undef)?"UNKNOWN":OBJ_nid2ln(i)) <= 0) goto err;
d241 5
a245 3
	n=x->signature->length;
	s=(char *)x->signature->data;
	for (i=0; i<n; i++)
d247 1
a247 4
		if ((i%18) == 0)
			if (BIO_write(bp,"\n        ",9) <= 0) goto err;
		if (BIO_printf(bp,"%02x%s",(unsigned char)s[i],
			((i+1) == n)?"":":") <= 0) goto err;
a248 2
	if (BIO_write(bp,"\n",1) != 1) goto err;
	if (!X509_CERT_AUX_print(bp, x->aux, 0)) goto err;
d255 65
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d352 2
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d226 1
a226 1
	if (m != NULL) Free(m);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a190 3
#if 0
			int data_type,pack_type;
#endif
a191 1

d202 1
a202 1
				ASN1_OCTET_STRING_print(bp,ex->value);
d222 1
d226 1
a226 1
	if (m != NULL) Free((char *)m);
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "buffer.h"
#include "bn.h"
d64 1
a64 1
#include "rsa.h"
d67 1
a67 1
#include "dsa.h"
d69 3
a71 2
#include "objects.h"
#include "x509.h"
d74 1
a74 3
int X509_print_fp(fp,x)
FILE *fp;
X509 *x;
d91 1
a91 3
int X509_print(bp,x)
BIO *bp;
X509 *x;
d99 1
a99 1
	char *neg;
d146 1
a146 1
	if (!ASN1_UTCTIME_print(bp,X509_get_notBefore(x))) goto err;
d148 1
a148 1
	if (!ASN1_UTCTIME_print(bp,X509_get_notAfter(x))) goto err;
d158 6
d181 3
a183 1
		BIO_printf(bp,"%12sDSA Public Key:\n","");
d191 1
d193 1
d201 1
a201 1
			if (BIO_printf(bp,": %s\n%16s",j?"critical":"","") <= 0)
d203 1
a203 32

			pack_type=X509v3_pack_type_by_OBJ(obj);
			data_type=X509v3_data_type_by_OBJ(obj);
			
			if (pack_type == X509_EXT_PACK_STRING)
				{
				if (X509v3_unpack_string(
					&str,data_type,
					X509_EXTENSION_get_data(ex)) == NULL)
					{
					/* hmm... */
					goto err;
					}
				if (	(data_type == V_ASN1_IA5STRING) ||
					(data_type == V_ASN1_PRINTABLESTRING) ||
					(data_type == V_ASN1_T61STRING))
					{
					if (BIO_write(bp,(char *)str->data,
							str->length) <= 0)
						goto err;
					}
				else if (data_type == V_ASN1_BIT_STRING)
					{
					BIO_printf(bp,"0x");
					for (j=0; j<str->length; j++)
						{
						BIO_printf(bp,"%02X",
							str->data[j]);
						}
					}
				}
			else
d205 1
d233 1
a233 3
int ASN1_STRING_print(bp,v)
BIO *bp;
ASN1_STRING *v;
d262 50
a311 3
int ASN1_UTCTIME_print(bp,tm)
BIO *bp;
ASN1_UTCTIME *tm;
a314 3
	static char *mon[12]={
		"Jan","Feb","Mar","Apr","May","Jun",
		"Jul","Aug","Sep","Oct","Nov","Dec"};
d346 1
a346 4
int X509_NAME_print(bp,name,obase)
BIO *bp;
X509_NAME *name;
int obase;
d361 1
d369 9
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 4
a64 4
#include <openssl/buffer.h>
#include <openssl/bn.h>
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
d66 2
a67 2
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
d69 2
a70 3
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
d72 4
a75 7
#ifndef OPENSSL_NO_FP_API
int X509_print_fp(FILE *fp, X509 *x)
	{
	return X509_print_ex_fp(fp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
	}

int X509_print_ex_fp(FILE *fp, X509 *x, unsigned long nmflag, unsigned long cflag)
d86 1
a86 1
        ret=X509_print_ex(b, x, nmflag, cflag);
d92 3
a94 6
int X509_print(BIO *bp, X509 *x)
{
	return X509_print_ex(bp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
}

int X509_print_ex(BIO *bp, X509 *x, unsigned long nmflags, unsigned long cflag)
d97 2
a98 3
	int ret=0,i;
	char *m=NULL,mlch = ' ';
	int nmindent = 0;
d102 2
a103 1
	const char *neg;
d106 6
a111 4
	if((nmflags & XN_FLAG_SEP_MASK) == XN_FLAG_SEP_MULTILINE) {
			mlch = '\n';
			nmindent = 12;
	}
d113 2
a114 5
	if(nmflags == X509_FLAG_COMPAT)
		nmindent = 16;

	ci=x->cert_info;
	if(!(cflag & X509_FLAG_NO_HEADER))
d116 2
a117 15
		if (BIO_write(bp,"Certificate:\n",13) <= 0) goto err;
		if (BIO_write(bp,"    Data:\n",10) <= 0) goto err;
		}
	if(!(cflag & X509_FLAG_NO_VERSION))
		{
		l=X509_get_version(x);
		if (BIO_printf(bp,"%8sVersion: %lu (0x%lx)\n","",l+1,l) <= 0) goto err;
		}
	if(!(cflag & X509_FLAG_NO_SERIAL))
		{

		if (BIO_write(bp,"        Serial Number:",22) <= 0) goto err;

		bs=X509_get_serialNumber(x);
		if (bs->length <= 4)
d119 2
a120 10
			l=ASN1_INTEGER_get(bs);
			if (l < 0)
				{
				l= -l;
				neg="-";
				}
			else
				neg="";
			if (BIO_printf(bp," %s%lu (%s0x%lx)\n",neg,l,neg,l) <= 0)
				goto err;
d123 2
a124 21
			{
			neg=(bs->type == V_ASN1_NEG_INTEGER)?" (Negative)":"";
			if (BIO_printf(bp,"\n%12s%s","",neg) <= 0) goto err;

			for (i=0; i<bs->length; i++)
				{
				if (BIO_printf(bp,"%02x%c",bs->data[i],
					((i+1 == bs->length)?'\n':':')) <= 0)
					goto err;
				}
			}

		}

	if(!(cflag & X509_FLAG_NO_SIGNAME))
		{
		if (BIO_printf(bp,"%8sSignature Algorithm: ","") <= 0) 
			goto err;
		if (i2a_ASN1_OBJECT(bp, ci->signature->algorithm) <= 0)
			goto err;
		if (BIO_puts(bp, "\n") <= 0)
d127 1
a127 2

	if(!(cflag & X509_FLAG_NO_ISSUER))
d129 2
a130 29
		if (BIO_printf(bp,"        Issuer:%c",mlch) <= 0) goto err;
		if (X509_NAME_print_ex(bp,X509_get_issuer_name(x),nmindent, nmflags) < 0) goto err;
		if (BIO_write(bp,"\n",1) <= 0) goto err;
		}
	if(!(cflag & X509_FLAG_NO_VALIDITY))
		{
		if (BIO_write(bp,"        Validity\n",17) <= 0) goto err;
		if (BIO_write(bp,"            Not Before: ",24) <= 0) goto err;
		if (!ASN1_TIME_print(bp,X509_get_notBefore(x))) goto err;
		if (BIO_write(bp,"\n            Not After : ",25) <= 0) goto err;
		if (!ASN1_TIME_print(bp,X509_get_notAfter(x))) goto err;
		if (BIO_write(bp,"\n",1) <= 0) goto err;
		}
	if(!(cflag & X509_FLAG_NO_SUBJECT))
		{
		if (BIO_printf(bp,"        Subject:%c",mlch) <= 0) goto err;
		if (X509_NAME_print_ex(bp,X509_get_subject_name(x),nmindent, nmflags) < 0) goto err;
		if (BIO_write(bp,"\n",1) <= 0) goto err;
		}
	if(!(cflag & X509_FLAG_NO_PUBKEY))
		{
		if (BIO_write(bp,"        Subject Public Key Info:\n",33) <= 0)
			goto err;
		if (BIO_printf(bp,"%12sPublic Key Algorithm: ","") <= 0)
			goto err;
		if (i2a_ASN1_OBJECT(bp, ci->key->algor->algorithm) <= 0)
			goto err;
		if (BIO_puts(bp, "\n") <= 0)
			goto err;
d132 1
a132 2
		pkey=X509_get_pubkey(x);
		if (pkey == NULL)
d134 3
a136 10
			BIO_printf(bp,"%12sUnable to load Public Key\n","");
			ERR_print_errors(bp);
			}
		else
#ifndef OPENSSL_NO_RSA
		if (pkey->type == EVP_PKEY_RSA)
			{
			BIO_printf(bp,"%12sRSA Public Key: (%d bit)\n","",
			BN_num_bits(pkey->pkey.rsa->n));
			RSA_print(bp,pkey->pkey.rsa,16);
a137 13
		else
#endif
#ifndef OPENSSL_NO_DSA
		if (pkey->type == EVP_PKEY_DSA)
			{
			BIO_printf(bp,"%12sDSA Public Key:\n","");
			DSA_print(bp,pkey->pkey.dsa,16);
			}
		else
#endif
			BIO_printf(bp,"%12sUnknown Public Key:\n","");

		EVP_PKEY_free(pkey);
d140 4
a143 3
	if (!(cflag & X509_FLAG_NO_EXTENSIONS))
		X509V3_extensions_print(bp, "X509v3 extensions",
					ci->extensions, cflag, 8);
d145 22
a166 3
	if(!(cflag & X509_FLAG_NO_SIGDUMP))
		{
		if(X509_signature_print(bp, x->sig_alg, x->signature) <= 0) goto err;
d168 4
a171 1
	if(!(cflag & X509_FLAG_NO_AUX))
d173 2
a174 1
		if (!X509_CERT_AUX_print(bp, x->aux, 0)) goto err;
d176 3
a178 6
	ret=1;
err:
	if (str != NULL) ASN1_STRING_free(str);
	if (m != NULL) OPENSSL_free(m);
	return(ret);
	}
d180 2
a181 19
int X509_ocspid_print (BIO *bp, X509 *x)
	{
	unsigned char *der=NULL ;
	unsigned char *dertmp;
	int derlen;
	int i;
	unsigned char SHA1md[SHA_DIGEST_LENGTH];

	/* display the hash of the subject as it would appear
	   in OCSP requests */
	if (BIO_printf(bp,"        Subject OCSP hash: ") <= 0)
		goto err;
	derlen = i2d_X509_NAME(x->cert_info->subject, NULL);
	if ((der = dertmp = (unsigned char *)OPENSSL_malloc (derlen)) == NULL)
		goto err;
	i2d_X509_NAME(x->cert_info->subject, &dertmp);

	EVP_Digest(der, derlen, SHA1md, NULL, EVP_sha1(), NULL);
	for (i=0; i < SHA_DIGEST_LENGTH; i++)
d183 5
a187 4
		if (BIO_printf(bp,"%02X",SHA1md[i]) <= 0) goto err;
		}
	OPENSSL_free (der);
	der=NULL;
d189 7
a195 4
	/* display the hash of the public key as it would appear
	   in OCSP requests */
	if (BIO_printf(bp,"\n        Public key OCSP hash: ") <= 0)
		goto err;
d197 36
a232 6
	EVP_Digest(x->cert_info->key->public_key->data,
		x->cert_info->key->public_key->length, SHA1md, NULL, EVP_sha1(), NULL);
	for (i=0; i < SHA_DIGEST_LENGTH; i++)
		{
		if (BIO_printf(bp,"%02X",SHA1md[i]) <= 0)
			goto err;
a233 7
	BIO_printf(bp,"\n");

	return (1);
err:
	if (der != NULL) OPENSSL_free(der);
	return(0);
	}
d235 3
a237 6
int X509_signature_print(BIO *bp, X509_ALGOR *sigalg, ASN1_STRING *sig)
{
	unsigned char *s;
	int i, n;
	if (BIO_puts(bp,"    Signature Algorithm: ") <= 0) return 0;
	if (i2a_ASN1_OBJECT(bp, sigalg->algorithm) <= 0) return 0;
d239 2
a240 2
	n=sig->length;
	s=sig->data;
d244 3
a246 3
			if (BIO_write(bp,"\n        ",9) <= 0) return 0;
			if (BIO_printf(bp,"%02x%s",s[i],
				((i+1) == n)?"":":") <= 0) return 0;
d248 7
a254 3
	if (BIO_write(bp,"\n",1) != 1) return 0;
	return 1;
}
d256 3
a258 1
int ASN1_STRING_print(BIO *bp, ASN1_STRING *v)
d287 3
a289 50
int ASN1_TIME_print(BIO *bp, ASN1_TIME *tm)
{
	if(tm->type == V_ASN1_UTCTIME) return ASN1_UTCTIME_print(bp, tm);
	if(tm->type == V_ASN1_GENERALIZEDTIME)
				return ASN1_GENERALIZEDTIME_print(bp, tm);
	BIO_write(bp,"Bad time value",14);
	return(0);
}

static const char *mon[12]=
    {
    "Jan","Feb","Mar","Apr","May","Jun",
    "Jul","Aug","Sep","Oct","Nov","Dec"
    };

int ASN1_GENERALIZEDTIME_print(BIO *bp, ASN1_GENERALIZEDTIME *tm)
	{
	char *v;
	int gmt=0;
	int i;
	int y=0,M=0,d=0,h=0,m=0,s=0;

	i=tm->length;
	v=(char *)tm->data;

	if (i < 12) goto err;
	if (v[i-1] == 'Z') gmt=1;
	for (i=0; i<12; i++)
		if ((v[i] > '9') || (v[i] < '0')) goto err;
	y= (v[0]-'0')*1000+(v[1]-'0')*100 + (v[2]-'0')*10+(v[3]-'0');
	M= (v[4]-'0')*10+(v[5]-'0');
	if ((M > 12) || (M < 1)) goto err;
	d= (v[6]-'0')*10+(v[7]-'0');
	h= (v[8]-'0')*10+(v[9]-'0');
	m=  (v[10]-'0')*10+(v[11]-'0');
	if (	(v[12] >= '0') && (v[12] <= '9') &&
		(v[13] >= '0') && (v[13] <= '9'))
		s=  (v[12]-'0')*10+(v[13]-'0');

	if (BIO_printf(bp,"%s %2d %02d:%02d:%02d %d%s",
		mon[M-1],d,h,m,s,y,(gmt)?" GMT":"") <= 0)
		return(0);
	else
		return(1);
err:
	BIO_write(bp,"Bad time value",14);
	return(0);
	}

int ASN1_UTCTIME_print(BIO *bp, ASN1_UTCTIME *tm)
d293 3
d327 4
a330 1
int X509_NAME_print(BIO *bp, X509_NAME *name, int obase)
a338 2
	if (!*s)
		return 1;
a344 1
#ifndef CHARSET_EBCDIC
a351 9
#else
		if (	((*s == '/') &&
				(isupper(s[1]) && (
					(s[2] == '=') ||
					(isupper(s[2]) &&
					(s[3] == '='))
				 ))) ||
			(*s == '\0'))
#endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d436 1
a436 1
	char *s,*c,*b;
d438 1
d442 1
a442 1
	b=s=X509_NAME_oneline(name,NULL,0);
a443 2
		{
		OPENSSL_free(b);
a444 1
		}
a499 1
	OPENSSL_free(b);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a68 3
#ifndef OPENSSL_NO_EC
#include <openssl/ec.h>
#endif
d86 1
a86 1
		X509err(X509_F_X509_PRINT_EX_FP,ERR_R_BUF_LIB);
a231 8
#ifndef OPENSSL_NO_EC
		if (pkey->type == EVP_PKEY_EC)
			{
			BIO_printf(bp, "%12sEC Public Key:\n","");
			EC_KEY_print(bp, pkey->pkey.ec, 16);
			}
		else
#endif
d437 1
a437 1
	int ret=0,l,i;
d439 1
a439 1
	l=80-2-obase;
d441 2
a442 2
	b=X509_NAME_oneline(name,NULL,0);
	if (!*b)
d447 1
a447 1
	s=b+1; /* skip the first slash */
d449 1
d471 10
d483 2
a484 1
			c=s+1;	/* skip following slash */
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d396 2
a397 3
	if (tm->length >= 14 &&
	    (v[12] >= '0') && (v[12] <= '9') &&
	    (v[13] >= '0') && (v[13] <= '9'))
d431 2
a432 3
	if (tm->length >=12 &&
	    (v[10] >= '0') && (v[10] <= '9') &&
	    (v[11] >= '0') && (v[11] <= '9'))
d504 1
@


1.1.1.6
log
@import of OpenSSL 0.9.8k
@
text
@d335 1
a335 1
	char buf[80],*p;
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d114 1
d218 2
d221 3
a223 2
			EVP_PKEY_print_public(bp, pkey, 16, NULL);
			EVP_PKEY_free(pkey);
d225 21
d262 1
d332 1
a332 1
int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
d335 1
a335 2
	char buf[80];
	const char *p;
d339 1
a339 1
	p=(const char *)v->data;
d361 1
a361 1
int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
d376 1
a376 1
int ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
a381 2
	char *f = NULL;
	int f_len = 0;
a398 1
		{
a399 10
		/* Check for fractions of seconds. */
		if (tm->length >= 15 && v[14] == '.')
			{
			int l = tm->length;
			f = &v[14];	/* The decimal point. */
			f_len = 1;
			while (14 + f_len < l && f[f_len] >= '0' && f[f_len] <= '9')
				++f_len;
			}
		}
d401 2
a402 2
	if (BIO_printf(bp,"%s %2d %02d:%02d:%02d%.*s %d%s",
		mon[M-1],d,h,m,s,f_len,f,y,(gmt)?" GMT":"") <= 0)
d411 1
a411 1
int ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
d413 1
a413 1
	const char *v;
d419 1
a419 1
	v=(const char *)tm->data;
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a74 1
#include "asn1_locl.h"
d140 1
a140 1
		if (bs->length <= (int)sizeof(long))
d143 1
a143 1
			if (bs->type == V_ASN1_NEG_INTEGER)
a169 3
		if(X509_signature_print(bp, x->sig_alg, NULL) <= 0)
			goto err;
#if 0
a175 1
#endif
d258 1
a258 2
	if (!EVP_Digest(der, derlen, SHA1md, NULL, EVP_sha1(), NULL))
		goto err;
d271 2
a272 4
	if (!EVP_Digest(x->cert_info->key->public_key->data,
			x->cert_info->key->public_key->length,
			SHA1md, NULL, EVP_sha1(), NULL))
		goto err;
d286 1
a286 1
int X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent)
d288 1
a288 1
	const unsigned char *s;
d290 2
d298 1
a298 4
			{
			if (BIO_write(bp,"\n",1) <= 0) return 0;
			if (BIO_indent(bp, indent, indent) <= 0) return 0;
			}
a302 26

	return 1;
}

int X509_signature_print(BIO *bp, X509_ALGOR *sigalg, ASN1_STRING *sig)
{
	int sig_nid;
	if (BIO_puts(bp,"    Signature Algorithm: ") <= 0) return 0;
	if (i2a_ASN1_OBJECT(bp, sigalg->algorithm) <= 0) return 0;

	sig_nid = OBJ_obj2nid(sigalg->algorithm);
	if (sig_nid != NID_undef)
		{
		int pkey_nid, dig_nid;
		const EVP_PKEY_ASN1_METHOD *ameth;
		if (OBJ_find_sigid_algs(sig_nid, &dig_nid, &pkey_nid))
			{
			ameth = EVP_PKEY_asn1_find(NULL, pkey_nid);
			if (ameth && ameth->sig_print)
				return ameth->sig_print(bp, sigalg, sig, 9, 0);
			}
		}
	if (sig)
		return X509_signature_dump(bp, sig, 9);
	else if (BIO_puts(bp, "\n") <= 0)
		return 0;
@


