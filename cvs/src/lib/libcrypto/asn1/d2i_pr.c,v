head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.6
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2017.01.29.17.49.22;	author beck;	state Exp;
branches;
next	1.14;
commitid	kT0fLt3r4lroFJra;

1.14
date	2015.03.19.14.00.22;	author tedu;	state Exp;
branches;
next	1.13;
commitid	Ix1rLPv61p1TR5LF;

1.13
date	2015.02.11.03.19.37;	author doug;	state Exp;
branches
	1.13.4.1;
next	1.12;
commitid	5KSZBoxiLebzObKt;

1.12
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches
	1.12.4.1;
next	1.11;
commitid	yQEL1wOWIearrW15;

1.11
date	2014.07.10.22.45.56;	author jsing;	state Exp;
branches;
next	1.10;
commitid	nzndm3zqPmFurSaK;

1.10
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.04.19.06.43.34;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.00.58.49;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.00.10.08;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.42;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.50;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.47;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;

1.12.4.1
date	2015.03.19.14.02.22;	author tedu;	state Exp;
branches;
next	;
commitid	bYTbbXa7PWk8y7To;

1.13.4.1
date	2015.03.19.14.01.15;	author tedu;	state Exp;
branches;
next	;
commitid	dQgHc1qjfDF6g1rY;


desc
@@


1.15
log
@Send the function codes from the error functions to the bit bucket,
as was done earlier in libssl. Thanks inoguchi@@ for noticing
libssl had more reacharounds into this.
ok jsing@@ inoguchi@@
@
text
@/* $OpenBSD: d2i_pr.c,v 1.14 2015/03/19 14:00:22 tedu Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/opensslconf.h>

#include <openssl/asn1.h>
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

#include "asn1_locl.h"

EVP_PKEY *
d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp, long length)
{
	EVP_PKEY *ret;

	if ((a == NULL) || (*a == NULL)) {
		if ((ret = EVP_PKEY_new()) == NULL) {
			ASN1error(ERR_R_EVP_LIB);
			return (NULL);
		}
	} else {
		ret = *a;
#ifndef OPENSSL_NO_ENGINE
		if (ret->engine) {
			ENGINE_finish(ret->engine);
			ret->engine = NULL;
		}
#endif
	}

	if (!EVP_PKEY_set_type(ret, type)) {
		ASN1error(ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
		goto err;
	}

	if (!ret->ameth->old_priv_decode ||
	    !ret->ameth->old_priv_decode(ret, pp, length)) {
		if (ret->ameth->priv_decode) {
			PKCS8_PRIV_KEY_INFO *p8 = NULL;
			p8 = d2i_PKCS8_PRIV_KEY_INFO(NULL, pp, length);
			if (!p8)
				goto err;
			EVP_PKEY_free(ret);
			ret = EVP_PKCS82PKEY(p8);
			PKCS8_PRIV_KEY_INFO_free(p8);
		} else {
			ASN1error(ERR_R_ASN1_LIB);
			goto err;
		}
	}
	if (a != NULL)
		(*a) = ret;
	return (ret);

err:
	if (a == NULL || *a != ret)
		EVP_PKEY_free(ret);
	return (NULL);
}

/* This works like d2i_PrivateKey() except it automatically works out the type */

EVP_PKEY *
d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp, long length)
{
	STACK_OF(ASN1_TYPE) *inkey;
	const unsigned char *p;
	int keytype;

	p = *pp;
	/* Dirty trick: read in the ASN1 data into a STACK_OF(ASN1_TYPE):
	 * by analyzing it we can determine the passed structure: this
	 * assumes the input is surrounded by an ASN1 SEQUENCE.
	 */
	inkey = d2i_ASN1_SEQUENCE_ANY(NULL, &p, length);
	/* Since we only need to discern "traditional format" RSA and DSA
	 * keys we can just count the elements.
         */
	if (sk_ASN1_TYPE_num(inkey) == 6)
		keytype = EVP_PKEY_DSA;
	else if (sk_ASN1_TYPE_num(inkey) == 4)
		keytype = EVP_PKEY_EC;
	else if (sk_ASN1_TYPE_num(inkey) == 3)  {
		/* This seems to be PKCS8, not traditional format */
		PKCS8_PRIV_KEY_INFO *p8 = d2i_PKCS8_PRIV_KEY_INFO(
		    NULL, pp, length);
		EVP_PKEY *ret;

		sk_ASN1_TYPE_pop_free(inkey, ASN1_TYPE_free);
		if (!p8) {
			ASN1error(ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE);
			return NULL;
		}
		ret = EVP_PKCS82PKEY(p8);
		PKCS8_PRIV_KEY_INFO_free(p8);
		if (a) {
			*a = ret;
		}
		return ret;
	} else
		keytype = EVP_PKEY_RSA;
	sk_ASN1_TYPE_pop_free(inkey, ASN1_TYPE_free);
	return d2i_PrivateKey(keytype, a, pp, length);
}
@


1.14
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pr.c,v 1.13 2015/02/11 03:19:37 doug Exp $ */
d83 1
a83 1
			ASN1err(ASN1_F_D2I_PRIVATEKEY, ERR_R_EVP_LIB);
d97 1
a97 1
		ASN1err(ASN1_F_D2I_PRIVATEKEY, ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
d112 1
a112 1
			ASN1err(ASN1_F_D2I_PRIVATEKEY, ERR_R_ASN1_LIB);
d156 1
a156 2
			ASN1err(ASN1_F_D2I_AUTOPRIVATEKEY,
			    ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE);
@


1.13
log
@Enable building with -DOPENSSL_NO_DEPRECATED.

If you didn't enable deprecated code, there were missing err.h and
bn.h includes.  This commit allows building with or without deprecated
code.

This was not derived from an OpenSSL commit.  However, they recently
enabled OPENSSL_NO_DEPRECATED in git and fixed these header problems
in a different way.

Verified with clang that this only changes line numbers in the generated
asm.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pr.c,v 1.12 2014/07/11 08:44:47 jsing Exp $ */
d121 1
a121 1
	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
@


1.13.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pr.c,v 1.13 2015/02/11 03:19:37 doug Exp $ */
d121 1
a121 1
	if (a == NULL || *a != ret)
@


1.12
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pr.c,v 1.11 2014/07/10 22:45:56 jsing Exp $ */
d65 1
@


1.12.4.1
log
@Fix several crash causing defects from OpenSSL.
These include:
CVE-2015-0209 - Use After Free following d2i_ECPrivatekey error
CVE-2015-0286 - Segmentation fault in ASN1_TYPE_cmp
CVE-2015-0287 - ASN.1 structure reuse memory corruption
CVE-2015-0288 - X509_to_X509_REQ NULL pointer deref
CVE-2015-0289 - PKCS7 NULL pointer dereferences

Several other issues did not apply or were already fixed.
Refer to https://www.openssl.org/news/secadv_20150319.txt

joint work with beck, doug, guenther, jsing, miod
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pr.c,v 1.12 2014/07/11 08:44:47 jsing Exp $ */
d120 1
a120 1
	if (a == NULL || *a != ret)
@


1.11
log
@Explicitly include <openssl/opensslconf.h> in every file that references
an OPENSSL_NO_* define. This avoids relying on something else pulling it
in for us, plus it fixes several cases where the #ifndef OPENSSL_NO_XYZ is
never going to do anything, since OPENSSL_NO_XYZ will never defined, due
to the fact that opensslconf.h has not been included.

This also includes some miscellaneous sorting/tidying of headers.
@
text
@d1 1
a1 1
/* $OpenBSD: d2i_pr.c,v 1.10 2014/06/12 15:49:27 deraadt Exp $ */
d63 1
a63 1
#include "cryptlib.h"
d67 2
d72 1
a72 2
#include <openssl/x509.h>
#include <openssl/asn1.h>
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 3
@


1.9
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/d2i_pr.c */
@


1.8
log
@lob a few more knf grenades in here to soften things up.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d71 2
a72 2
EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
	     long length)
d77 3
a79 3
		if ((ret=EVP_PKEY_new()) == NULL) {
			ASN1err(ASN1_F_D2I_PRIVATEKEY,ERR_R_EVP_LIB);
			return(NULL);
d82 1
a82 1
		ret= *a;
d92 1
a92 1
		ASN1err(ASN1_F_D2I_PRIVATEKEY,ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
d97 1
a97 1
			!ret->ameth->old_priv_decode(ret, pp, length)) {
d99 4
a102 3
			PKCS8_PRIV_KEY_INFO *p8=NULL;
			p8=d2i_PKCS8_PRIV_KEY_INFO(NULL,pp,length);
			if (!p8) goto err;
a105 1

d107 1
a107 1
			ASN1err(ASN1_F_D2I_PRIVATEKEY,ERR_R_ASN1_LIB);
d110 5
a114 3
	}	
	if (a != NULL) (*a)=ret;
	return(ret);
d116 3
a118 2
	if ((ret != NULL) && ((a == NULL) || (*a != ret))) EVP_PKEY_free(ret);
	return(NULL);
d123 2
a124 2
EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
	     long length)
d129 1
d139 1
a139 1
	if(sk_ASN1_TYPE_num(inkey) == 6) 
d145 2
a146 1
		PKCS8_PRIV_KEY_INFO *p8 = d2i_PKCS8_PRIV_KEY_INFO(NULL,pp,length);
d151 2
a152 1
			ASN1err(ASN1_F_D2I_AUTOPRIVATEKEY,ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE);
d159 1
a159 1
		}	
@


1.7
log
@putting most of the braces in the right column is the very least we can do.
@
text
@d76 2
a77 4
	if ((a == NULL) || (*a == NULL))
	{
		if ((ret=EVP_PKEY_new()) == NULL)
		{
d81 1
a81 3
	}
	else
	{
d84 1
a84 2
		if (ret->engine)
		{
d91 1
a91 2
	if (!EVP_PKEY_set_type(ret, type))
	{
d97 2
a98 4
			!ret->ameth->old_priv_decode(ret, pp, length))
	{
		if (ret->ameth->priv_decode) 
		{
d106 1
a106 3
		} 
		else 
		{
d139 14
a152 15
	else if (sk_ASN1_TYPE_num(inkey) == 3)  
	{ /* This seems to be PKCS8, not traditional format */
			PKCS8_PRIV_KEY_INFO *p8 = d2i_PKCS8_PRIV_KEY_INFO(NULL,pp,length);
			EVP_PKEY *ret;

			sk_ASN1_TYPE_pop_free(inkey, ASN1_TYPE_free);
			if (!p8) 
			{
				ASN1err(ASN1_F_D2I_AUTOPRIVATEKEY,ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE);
				return NULL;
			}
			ret = EVP_PKCS82PKEY(p8);
			PKCS8_PRIV_KEY_INFO_free(p8);
			if (a) {
				*a = ret;
d154 3
a156 3
			return ret;
	}
	else keytype = EVP_PKEY_RSA;
@


1.6
log
@resolve conflicts, fix local changes
@
text
@d73 1
a73 1
	{
d77 2
a79 2
		if ((ret=EVP_PKEY_new()) == NULL)
			{
a81 1
			}
d83 1
d85 1
a85 1
		{
d89 1
a89 1
			{
d92 1
a92 1
			}
d94 1
a94 1
		}
d97 1
a97 1
		{
d100 1
a100 1
		}
d104 2
a106 2
		if (ret->ameth->priv_decode) 
			{
d114 1
a114 1
			} 
d116 1
a116 1
			{
d119 2
a120 2
			}
		}	
d126 1
a126 1
	}
d150 1
a150 1
		{ /* This seems to be PKCS8, not traditional format */
d156 1
a156 1
				{
d159 1
a159 1
				}
d164 1
a164 1
			}	
d166 1
a166 1
		}
@


1.5
log
@resolve conflicts
@
text
@d64 4
d69 1
a69 9
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
#ifndef OPENSSL_NO_EC
#include <openssl/ec.h>
#endif
d84 1
a84 5
	else	ret= *a;

	ret->save_type=type;
	ret->type=EVP_PKEY_type(type);
	switch (ret->type)
d86 3
a88 4
#ifndef OPENSSL_NO_RSA
	case EVP_PKEY_RSA:
		if ((ret->pkey.rsa=d2i_RSAPrivateKey(NULL,
			(const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
d90 2
a91 2
			ASN1err(ASN1_F_D2I_PRIVATEKEY,ERR_R_ASN1_LIB);
			goto err;
a92 1
		break;
d94 22
a115 4
#ifndef OPENSSL_NO_DSA
	case EVP_PKEY_DSA:
		if ((ret->pkey.dsa=d2i_DSAPrivateKey(NULL,
			(const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
d120 1
a120 17
		break;
#endif
#ifndef OPENSSL_NO_EC
	case EVP_PKEY_EC:
		if ((ret->pkey.ec = d2i_ECPrivateKey(NULL, 
			(const unsigned char **)pp, length)) == NULL)
			{
			ASN1err(ASN1_F_D2I_PRIVATEKEY, ERR_R_ASN1_LIB);
			goto err;
			}
		break;
#endif
	default:
		ASN1err(ASN1_F_D2I_PRIVATEKEY,ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
		goto err;
		/* break; */
		}
d141 1
a141 2
	inkey = d2i_ASN1_SET_OF_ASN1_TYPE(NULL, &p, length, d2i_ASN1_TYPE, 
			ASN1_TYPE_free, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
d149 18
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d71 3
d75 1
a75 1
EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, unsigned char **pp,
d114 10
d138 1
a138 1
EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, unsigned char **pp,
d142 1
a142 1
	unsigned char *p;
d154 4
a157 1
	if(sk_ASN1_TYPE_num(inkey) == 6) keytype = EVP_PKEY_DSA;
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 6
d91 1
a91 1
#ifndef NO_RSA
d93 2
a94 1
		if ((ret->pkey.rsa=d2i_RSAPrivateKey(NULL,pp,length)) == NULL)
d101 1
a101 1
#ifndef NO_DSA
d103 2
a104 1
		if ((ret->pkey.dsa=d2i_DSAPrivateKey(NULL,pp,length)) == NULL)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d115 23
@


1.1
log
@Initial revision
@
text
@d61 4
a64 4
#include "bn.h"
#include "evp.h"
#include "objects.h"
#include "x509.h"
d66 2
a67 5
EVP_PKEY *d2i_PrivateKey(type,a,pp,length)
int type;
EVP_PKEY **a;
unsigned char **pp;
long length;
d106 1
a106 1
		break;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 4
a64 10
#include <openssl/bn.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/asn1.h>
#ifndef OPENSSL_NO_RSA
#include <openssl/rsa.h>
#endif
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif
d66 5
a70 2
EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, unsigned char **pp,
	     long length)
d88 1
a88 1
#ifndef OPENSSL_NO_RSA
d90 1
a90 2
		if ((ret->pkey.rsa=d2i_RSAPrivateKey(NULL,
			(const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
d97 1
a97 1
#ifndef OPENSSL_NO_DSA
d99 1
a99 2
		if ((ret->pkey.dsa=d2i_DSAPrivateKey(NULL,
			(const unsigned char **)pp,length)) == NULL) /* TMP UGLY CAST */
d109 1
a109 1
		/* break; */
a117 23
/* This works like d2i_PrivateKey() except it automatically works out the type */

EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, unsigned char **pp,
	     long length)
{
	STACK_OF(ASN1_TYPE) *inkey;
	unsigned char *p;
	int keytype;
	p = *pp;
	/* Dirty trick: read in the ASN1 data into a STACK_OF(ASN1_TYPE):
	 * by analyzing it we can determine the passed structure: this
	 * assumes the input is surrounded by an ASN1 SEQUENCE.
	 */
	inkey = d2i_ASN1_SET_OF_ASN1_TYPE(NULL, &p, length, d2i_ASN1_TYPE, 
			ASN1_TYPE_free, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL);
	/* Since we only need to discern "traditional format" RSA and DSA
	 * keys we can just count the elements.
         */
	if(sk_ASN1_TYPE_num(inkey) == 6) keytype = EVP_PKEY_DSA;
	else keytype = EVP_PKEY_RSA;
	sk_ASN1_TYPE_pop_free(inkey, ASN1_TYPE_free);
	return d2i_PrivateKey(keytype, a, pp, length);
}
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a70 3
#ifndef OPENSSL_NO_EC
#include <openssl/ec.h>
#endif
d72 1
a72 1
EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
a110 10
#ifndef OPENSSL_NO_EC
	case EVP_PKEY_EC:
		if ((ret->pkey.ec = d2i_ECPrivateKey(NULL, 
			(const unsigned char **)pp, length)) == NULL)
			{
			ASN1err(ASN1_F_D2I_PRIVATEKEY, ERR_R_ASN1_LIB);
			goto err;
			}
		break;
#endif
d125 1
a125 1
EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
d129 1
a129 1
	const unsigned char *p;
d141 1
a141 4
	if(sk_ASN1_TYPE_num(inkey) == 6) 
		keytype = EVP_PKEY_DSA;
	else if (sk_ASN1_TYPE_num(inkey) == 4)
		keytype = EVP_PKEY_EC;
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d64 9
a72 2
#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
a73 3
#include <openssl/x509.h>
#include <openssl/asn1.h>
#include "asn1_locl.h"
d88 5
a92 1
	else
d94 4
a97 3
		ret= *a;
#ifndef OPENSSL_NO_ENGINE
		if (ret->engine)
d99 2
a100 2
			ENGINE_finish(ret->engine);
			ret->engine = NULL;
d102 1
d104 4
a107 12
		}

	if (!EVP_PKEY_set_type(ret, type))
		{
		ASN1err(ASN1_F_D2I_PRIVATEKEY,ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
		goto err;
		}

	if (!ret->ameth->old_priv_decode ||
			!ret->ameth->old_priv_decode(ret, pp, length))
		{
		if (ret->ameth->priv_decode) 
d109 9
a117 9
			PKCS8_PRIV_KEY_INFO *p8=NULL;
			p8=d2i_PKCS8_PRIV_KEY_INFO(NULL,pp,length);
			if (!p8) goto err;
			EVP_PKEY_free(ret);
			ret = EVP_PKCS82PKEY(p8);
			PKCS8_PRIV_KEY_INFO_free(p8);

			} 
		else 
d119 1
a119 1
			ASN1err(ASN1_F_D2I_PRIVATEKEY,ERR_R_ASN1_LIB);
d122 7
a128 1
		}	
d149 2
a150 1
	inkey = d2i_ASN1_SEQUENCE_ANY(NULL, &p, length);
a157 18
	else if (sk_ASN1_TYPE_num(inkey) == 3)  
		{ /* This seems to be PKCS8, not traditional format */
			PKCS8_PRIV_KEY_INFO *p8 = d2i_PKCS8_PRIV_KEY_INFO(NULL,pp,length);
			EVP_PKEY *ret;

			sk_ASN1_TYPE_pop_free(inkey, ASN1_TYPE_free);
			if (!p8) 
				{
				ASN1err(ASN1_F_D2I_AUTOPRIVATEKEY,ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE);
				return NULL;
				}
			ret = EVP_PKCS82PKEY(p8);
			PKCS8_PRIV_KEY_INFO_free(p8);
			if (a) {
				*a = ret;
			}	
			return ret;
		}
@


