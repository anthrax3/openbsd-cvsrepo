head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2015.02.11.04.00.39;	author jsing;	state Exp;
branches;
next	1.14;
commitid	QCjRtjn2xv9owjIW;

1.14
date	2015.02.11.03.39.51;	author jsing;	state Exp;
branches;
next	1.13;
commitid	PWeA1V6nbEryguKH;

1.13
date	2015.02.10.05.25.45;	author jsing;	state Exp;
branches;
next	1.12;
commitid	HQSAPkY0rIzvWYsC;

1.12
date	2015.02.10.04.21.50;	author jsing;	state Exp;
branches;
next	1.11;
commitid	lmzaeFtqKbLCKhxJ;

1.11
date	2015.02.09.15.05.59;	author jsing;	state Exp;
branches;
next	1.10;
commitid	X3hE8E9VwC2nOKbW;

1.10
date	2014.07.11.08.44.47;	author jsing;	state Exp;
branches;
next	1.9;
commitid	yQEL1wOWIearrW15;

1.9
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	mJUVYpkFBZ0Zv2bG;

1.8
date	2014.04.18.11.20.32;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.53;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.57.14;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.52;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.35;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.51;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.51;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.40;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.03;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove initialisers with default values from the ASN1 data structures.

Minor changes in generated assembly due to the compiler swapping from
.quad 0/.long 0 to .zero, along with changes due to line numbering.
@
text
@/* $OpenBSD: x_req.c,v 1.14 2015/02/11 03:39:51 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>

#include <openssl/asn1t.h>
#include <openssl/x509.h>

/* X509_REQ_INFO is handled in an unusual way to get round
 * invalid encodings. Some broken certificate requests don't
 * encode the attributes field if it is empty. This is in
 * violation of PKCS#10 but we need to tolerate it. We do
 * this by making the attributes field OPTIONAL then using
 * the callback to initialise it to an empty STACK.
 *
 * This means that the field will be correctly encoded unless
 * we NULL out the field.
 *
 * As a result we no longer need the req_kludge field because
 * the information is now contained in the attributes field:
 * 1. If it is NULL then it's the invalid omission.
 * 2. If it is empty it is the correct encoding.
 * 3. If it is not empty then some attributes are present.
 *
 */

static int
rinf_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it, void *exarg)
{
	X509_REQ_INFO *rinf = (X509_REQ_INFO *)*pval;

	if (operation == ASN1_OP_NEW_POST) {
		rinf->attributes = sk_X509_ATTRIBUTE_new_null();
		if (!rinf->attributes)
			return 0;
	}
	return 1;
}

static const ASN1_AUX X509_REQ_INFO_aux = {
	.flags = ASN1_AFLG_ENCODING,
	.asn1_cb = rinf_cb,
	.enc_offset = offsetof(X509_REQ_INFO, enc),
};
static const ASN1_TEMPLATE X509_REQ_INFO_seq_tt[] = {
	{
		.offset = offsetof(X509_REQ_INFO, version),
		.field_name = "version",
		.item = &ASN1_INTEGER_it,
	},
	{
		.offset = offsetof(X509_REQ_INFO, subject),
		.field_name = "subject",
		.item = &X509_NAME_it,
	},
	{
		.offset = offsetof(X509_REQ_INFO, pubkey),
		.field_name = "pubkey",
		.item = &X509_PUBKEY_it,
	},
	/* This isn't really OPTIONAL but it gets round invalid
	 * encodings
	 */
	{
		.flags = ASN1_TFLG_IMPLICIT | ASN1_TFLG_SET_OF | ASN1_TFLG_OPTIONAL,
		.offset = offsetof(X509_REQ_INFO, attributes),
		.field_name = "attributes",
		.item = &X509_ATTRIBUTE_it,
	},
};

const ASN1_ITEM X509_REQ_INFO_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = X509_REQ_INFO_seq_tt,
	.tcount = sizeof(X509_REQ_INFO_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = &X509_REQ_INFO_aux,
	.size = sizeof(X509_REQ_INFO),
	.sname = "X509_REQ_INFO",
};


X509_REQ_INFO *
d2i_X509_REQ_INFO(X509_REQ_INFO **a, const unsigned char **in, long len)
{
	return (X509_REQ_INFO *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &X509_REQ_INFO_it);
}

int
i2d_X509_REQ_INFO(X509_REQ_INFO *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_REQ_INFO_it);
}

X509_REQ_INFO *
X509_REQ_INFO_new(void)
{
	return (X509_REQ_INFO *)ASN1_item_new(&X509_REQ_INFO_it);
}

void
X509_REQ_INFO_free(X509_REQ_INFO *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &X509_REQ_INFO_it);
}

static const ASN1_AUX X509_REQ_aux = {
	.app_data = NULL,
	.flags = ASN1_AFLG_REFCOUNT,
	.ref_offset = offsetof(X509_REQ, references),
	.ref_lock = CRYPTO_LOCK_X509_REQ,
};
static const ASN1_TEMPLATE X509_REQ_seq_tt[] = {
	{
		.offset = offsetof(X509_REQ, req_info),
		.field_name = "req_info",
		.item = &X509_REQ_INFO_it,
	},
	{
		.offset = offsetof(X509_REQ, sig_alg),
		.field_name = "sig_alg",
		.item = &X509_ALGOR_it,
	},
	{
		.offset = offsetof(X509_REQ, signature),
		.field_name = "signature",
		.item = &ASN1_BIT_STRING_it,
	},
};

const ASN1_ITEM X509_REQ_it = {
	.itype = ASN1_ITYPE_SEQUENCE,
	.utype = V_ASN1_SEQUENCE,
	.templates = X509_REQ_seq_tt,
	.tcount = sizeof(X509_REQ_seq_tt) / sizeof(ASN1_TEMPLATE),
	.funcs = &X509_REQ_aux,
	.size = sizeof(X509_REQ),
	.sname = "X509_REQ",
};


X509_REQ *
d2i_X509_REQ(X509_REQ **a, const unsigned char **in, long len)
{
	return (X509_REQ *)ASN1_item_d2i((ASN1_VALUE **)a, in, len,
	    &X509_REQ_it);
}

int
i2d_X509_REQ(X509_REQ *a, unsigned char **out)
{
	return ASN1_item_i2d((ASN1_VALUE *)a, out, &X509_REQ_it);
}

X509_REQ *
X509_REQ_new(void)
{
	return (X509_REQ *)ASN1_item_new(&X509_REQ_it);
}

void
X509_REQ_free(X509_REQ *a)
{
	ASN1_item_free((ASN1_VALUE *)a, &X509_REQ_it);
}

X509_REQ *
X509_REQ_dup(X509_REQ *x)
{
	return ASN1_item_dup(&X509_REQ_it, x);
}
@


1.14
log
@Expand most of the ASN1_SEQUENCE* and associated macros, making the data
structures visible and easier to review, without having to wade through
layers and layers of asn1t.h macros.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_req.c,v 1.13 2015/02/10 05:25:45 jsing Exp $ */
a95 1
	.app_data = NULL,
a96 2
	.ref_offset = 0,
	.ref_lock = 0,
a101 2
		.flags = 0,
		.tag = 0,
a106 2
		.flags = 0,
		.tag = 0,
a111 2
		.flags = 0,
		.tag = 0,
a120 1
		.tag = 0,
a167 2
	.asn1_cb = 0,
	.enc_offset = 0,
a170 2
		.flags = 0,
		.tag = 0,
a175 2
		.flags = 0,
		.tag = 0,
a180 2
		.flags = 0,
		.tag = 0,
@


1.13
log
@Manually expand ASN1_ITEM_rptr macros that should have been expanded with
the IMPLEMENT_ASN1_DUP_FUNCTION macro.
@
text
@d1 1
a1 1
/* $OpenBSD: x_req.c,v 1.12 2015/02/10 04:21:50 jsing Exp $ */
d95 30
a124 4
ASN1_SEQUENCE_enc(X509_REQ_INFO, enc, rinf_cb) = {
	ASN1_SIMPLE(X509_REQ_INFO, version, ASN1_INTEGER),
	ASN1_SIMPLE(X509_REQ_INFO, subject, X509_NAME),
	ASN1_SIMPLE(X509_REQ_INFO, pubkey, X509_PUBKEY),
d128 18
a145 2
	ASN1_IMP_SET_OF_OPT(X509_REQ_INFO, attributes, X509_ATTRIBUTE, 0)
} ASN1_SEQUENCE_END_enc(X509_REQ_INFO, X509_REQ_INFO)
d173 41
a213 5
ASN1_SEQUENCE_ref(X509_REQ, 0, CRYPTO_LOCK_X509_REQ) = {
	ASN1_SIMPLE(X509_REQ, req_info, X509_REQ_INFO),
	ASN1_SIMPLE(X509_REQ, sig_alg, X509_ALGOR),
	ASN1_SIMPLE(X509_REQ, signature, ASN1_BIT_STRING)
} ASN1_SEQUENCE_END_ref(X509_REQ, X509_REQ)
@


1.12
log
@Expand the IMPLEMENT_ASN1_DUP_FUNCTION macro so that the code is visible
and functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_req.c,v 1.11 2015/02/09 15:05:59 jsing Exp $ */
d166 1
a166 1
	return ASN1_item_dup(ASN1_ITEM_rptr(X509_REQ), x);
@


1.11
log
@Expand the IMPLEMENT_ASN1_FUNCTIONS macro so that the code is visible and
functions can be readily located.

Change has been scripted and the generated assembly only differs by changes
to line numbers.

Discussed with beck@@ miod@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_req.c,v 1.10 2014/07/11 08:44:47 jsing Exp $ */
d162 6
a167 1
IMPLEMENT_ASN1_DUP_FUNCTION(X509_REQ)
@


1.10
log
@Only import cryptlib.h in the four source files that actually need it.
Remove the openssl public includes from cryptlib.h and add a small number
of includes into the source files that actually need them. While here,
also sort/group/tidy the includes.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: x_req.c,v 1.9 2014/06/12 15:49:27 deraadt Exp $ */
d105 25
a129 1
IMPLEMENT_ASN1_FUNCTIONS(X509_REQ_INFO)
d137 25
a161 1
IMPLEMENT_ASN1_FUNCTIONS(X509_REQ)
@


1.9
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d60 1
a60 1
#include "cryptlib.h"
@


1.8
log
@More KNF.
@
text
@d1 1
a1 1
/* crypto/asn1/x_req.c */
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d69 1
a69 1
 * the callback to initialise it to an empty STACK. 
d82 2
a83 2
static int rinf_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,
							void *exarg)
d87 1
a87 1
	if(operation == ASN1_OP_NEW_POST) {
d89 2
a90 1
		if(!rinf->attributes) return 0;
@


1.6
log
@resolve conflicts
@
text
@d82 2
a83 1
static int rinf_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it)
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d105 1
a105 1
ASN1_SEQUENCE_ref(X509_REQ, 0, CRYPTO_LOCK_X509_INFO) = {
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d61 1
a61 1
#include <openssl/asn1_mac.h>
d64 35
a98 75
int i2d_X509_REQ_INFO(X509_REQ_INFO *a, unsigned char **pp)
	{
	M_ASN1_I2D_vars(a);

	if(a->asn1) {
		if(pp) {
			memcpy(*pp, a->asn1, a->length);
			*pp += a->length;
		}
		return a->length;
	}

	M_ASN1_I2D_len(a->version,		i2d_ASN1_INTEGER);
	M_ASN1_I2D_len(a->subject,		i2d_X509_NAME);
	M_ASN1_I2D_len(a->pubkey,		i2d_X509_PUBKEY);

	/* this is a *nasty* hack reported to be required to
	 * allow some CA Software to accept the cert request.
	 * It is not following the PKCS standards ...
	 * PKCS#10 pg 5
	 * attributes [0] IMPLICIT Attributes
	 * NOTE: no OPTIONAL ... so it *must* be there
	 */
	if (a->req_kludge) 
	        {
	        M_ASN1_I2D_len_IMP_SET_opt_type(X509_ATTRIBUTE,a->attributes,i2d_X509_ATTRIBUTE,0);
		}
	else
	        {
	        M_ASN1_I2D_len_IMP_SET_type(X509_ATTRIBUTE,a->attributes,
					    i2d_X509_ATTRIBUTE,0);
		}
	
	M_ASN1_I2D_seq_total();
	M_ASN1_I2D_put(a->version,		i2d_ASN1_INTEGER);
	M_ASN1_I2D_put(a->subject,		i2d_X509_NAME);
	M_ASN1_I2D_put(a->pubkey,		i2d_X509_PUBKEY);

	/* this is a *nasty* hack reported to be required by some CA's.
	 * It is not following the PKCS standards ...
	 * PKCS#10 pg 5
	 * attributes [0] IMPLICIT Attributes
	 * NOTE: no OPTIONAL ... so it *must* be there
	 */
	if (a->req_kludge)
		{
	        M_ASN1_I2D_put_IMP_SET_opt_type(X509_ATTRIBUTE,a->attributes,
						i2d_X509_ATTRIBUTE,0);
		}
	else
		{
	        M_ASN1_I2D_put_IMP_SET_type(X509_ATTRIBUTE,a->attributes,
					    i2d_X509_ATTRIBUTE,0);
		}

	M_ASN1_I2D_finish();
	}

X509_REQ_INFO *d2i_X509_REQ_INFO(X509_REQ_INFO **a, unsigned char **pp,
	     long length)
	{
	M_ASN1_D2I_vars(a,X509_REQ_INFO *,X509_REQ_INFO_new);

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->version,d2i_ASN1_INTEGER);
	M_ASN1_D2I_get(ret->subject,d2i_X509_NAME);
	M_ASN1_D2I_get(ret->pubkey,d2i_X509_PUBKEY);

	/* this is a *nasty* hack to allow for some CA's that
	 * have been reported as requiring it.
	 * It is not following the PKCS standards ...
	 * PKCS#10 pg 5
	 * attributes [0] IMPLICIT Attributes
	 * NOTE: no OPTIONAL ... so it *must* be there
d100 2
a101 38
	if (asn1_Finish(&c))
		ret->req_kludge=1;
	else
		{
		M_ASN1_D2I_get_IMP_set_type(X509_ATTRIBUTE,ret->attributes,
					    d2i_X509_ATTRIBUTE,
					    X509_ATTRIBUTE_free,0);
		}

	M_ASN1_D2I_Finish(a,X509_REQ_INFO_free,ASN1_F_D2I_X509_REQ_INFO);
	}

X509_REQ_INFO *X509_REQ_INFO_new(void)
	{
	X509_REQ_INFO *ret=NULL;
	ASN1_CTX c;

	M_ASN1_New_Malloc(ret,X509_REQ_INFO);
	M_ASN1_New(ret->version,M_ASN1_INTEGER_new);
	M_ASN1_New(ret->subject,X509_NAME_new);
	M_ASN1_New(ret->pubkey,X509_PUBKEY_new);
	M_ASN1_New(ret->attributes,sk_X509_ATTRIBUTE_new_null);
	ret->req_kludge=0;
	ret->asn1 = NULL;
	return(ret);
	M_ASN1_New_Error(ASN1_F_X509_REQ_INFO_NEW);
	}
	
void X509_REQ_INFO_free(X509_REQ_INFO *a)
	{
	if (a == NULL) return;
	if(a->asn1) OPENSSL_free(a->asn1);
	M_ASN1_INTEGER_free(a->version);
	X509_NAME_free(a->subject);
	X509_PUBKEY_free(a->pubkey);
	sk_X509_ATTRIBUTE_pop_free(a->attributes,X509_ATTRIBUTE_free);
	OPENSSL_free(a);
	}
d103 1
a103 77
int i2d_X509_REQ(X509_REQ *a, unsigned char **pp)
	{
	M_ASN1_I2D_vars(a);
	M_ASN1_I2D_len(a->req_info,	i2d_X509_REQ_INFO);
	M_ASN1_I2D_len(a->sig_alg,	i2d_X509_ALGOR);
	M_ASN1_I2D_len(a->signature,	i2d_ASN1_BIT_STRING);

	M_ASN1_I2D_seq_total();

	M_ASN1_I2D_put(a->req_info,	i2d_X509_REQ_INFO);
	M_ASN1_I2D_put(a->sig_alg,	i2d_X509_ALGOR);
	M_ASN1_I2D_put(a->signature,	i2d_ASN1_BIT_STRING);

	M_ASN1_I2D_finish();
	}

X509_REQ *d2i_X509_REQ(X509_REQ **a, unsigned char **pp, long length)
	{
	M_ASN1_D2I_vars(a,X509_REQ *,X509_REQ_new);

	M_ASN1_D2I_Init();
	M_ASN1_D2I_start_sequence();
	M_ASN1_D2I_get(ret->req_info,d2i_X509_REQ_INFO);

	/* Keep a copy of the original encoding for signature checking */
	ret->req_info->length = c.p - c.q;
	if(!(ret->req_info->asn1 = OPENSSL_malloc(ret->req_info->length))) {
		c.line=__LINE__;
		c.error = ERR_R_MALLOC_FAILURE;
		goto err;
	}

	memcpy(ret->req_info->asn1, c.q, ret->req_info->length);

	M_ASN1_D2I_get(ret->sig_alg,d2i_X509_ALGOR);
	M_ASN1_D2I_get(ret->signature,d2i_ASN1_BIT_STRING);
	M_ASN1_D2I_Finish(a,X509_REQ_free,ASN1_F_D2I_X509_REQ);
	}

X509_REQ *X509_REQ_new(void)
	{
	X509_REQ *ret=NULL;
	ASN1_CTX c;

	M_ASN1_New_Malloc(ret,X509_REQ);
	ret->references=1;
	M_ASN1_New(ret->req_info,X509_REQ_INFO_new);
	M_ASN1_New(ret->sig_alg,X509_ALGOR_new);
	M_ASN1_New(ret->signature,M_ASN1_BIT_STRING_new);
	return(ret);
	M_ASN1_New_Error(ASN1_F_X509_REQ_NEW);
	}

void X509_REQ_free(X509_REQ *a)
	{
	int i;

	if (a == NULL) return;

	i=CRYPTO_add(&a->references,-1,CRYPTO_LOCK_X509_REQ);
#ifdef REF_PRINT
	REF_PRINT("X509_REQ",a);
#endif
	if (i > 0) return;
#ifdef REF_CHECK
	if (i < 0)
		{
		fprintf(stderr,"X509_REQ_free, bad reference count\n");
		abort();
		}
#endif

	X509_REQ_INFO_free(a->req_info);
	X509_ALGOR_free(a->sig_alg);
	M_ASN1_BIT_STRING_free(a->signature);
	OPENSSL_free(a);
	}
d105 5
d111 2
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 8
d163 1
d171 1
d176 1
a176 1
	Free(a);
d202 11
d254 1
a254 1
	Free(a);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d76 1
a76 1
	 * attributes [0] IMPLICIT Attibutes
d97 1
a97 1
	 * attributes [0] IMPLICIT Attibutes
d129 1
a129 1
	 * attributes [0] IMPLICIT Attibutes
d150 1
a150 1
	M_ASN1_New(ret->version,ASN1_INTEGER_new);
d162 1
a162 1
	ASN1_INTEGER_free(a->version);
d166 1
a166 1
	Free((char *)a);
d206 1
a206 1
	M_ASN1_New(ret->signature,ASN1_BIT_STRING_new);
d232 2
a233 2
	ASN1_BIT_STRING_free(a->signature);
	Free((char *)a);
@


1.1
log
@Initial revision
@
text
@d61 2
a62 2
#include "asn1_mac.h"
#include "x509.h"
d64 1
a64 10
/*
 * ASN1err(ASN1_F_D2I_X509_REQ,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_D2I_X509_REQ_INFO,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_X509_REQ_NEW,ASN1_R_LENGTH_MISMATCH);
 * ASN1err(ASN1_F_X509_REQ_INFO_NEW,ASN1_R_LENGTH_MISMATCH);
 */

int i2d_X509_REQ_INFO(a,pp)
X509_REQ_INFO *a;
unsigned char **pp;
d81 1
a81 1
	        M_ASN1_I2D_len_IMP_set_opt(a->attributes,i2d_X509_ATTRIBUTE,0);
d85 2
a86 1
	        M_ASN1_I2D_len_IMP_set(a->attributes,	i2d_X509_ATTRIBUTE,0);
d102 2
a103 1
	        M_ASN1_I2D_put_IMP_set_opt(a->attributes,i2d_X509_ATTRIBUTE,0);
d107 2
a108 1
	        M_ASN1_I2D_put_IMP_set(a->attributes,i2d_X509_ATTRIBUTE,0);
d114 2
a115 4
X509_REQ_INFO *d2i_X509_REQ_INFO(a,pp,length)
X509_REQ_INFO **a;
unsigned char **pp;
long length;
d136 3
a138 1
		M_ASN1_D2I_get_IMP_set(ret->attributes,d2i_X509_ATTRIBUTE,0);
d144 1
a144 1
X509_REQ_INFO *X509_REQ_INFO_new()
d147 1
d153 1
a153 1
	M_ASN1_New(ret->attributes,sk_new_null);
d159 1
a159 2
void X509_REQ_INFO_free(a)
X509_REQ_INFO *a;
d165 1
a165 1
	sk_pop_free(a->attributes,X509_ATTRIBUTE_free);
d169 1
a169 3
int i2d_X509_REQ(a,pp)
X509_REQ *a;
unsigned char **pp;
d185 1
a185 4
X509_REQ *d2i_X509_REQ(a,pp,length)
X509_REQ **a;
unsigned char **pp;
long length;
d197 1
a197 1
X509_REQ *X509_REQ_new()
d200 1
d211 1
a211 2
void X509_REQ_free(a)
X509_REQ *a;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d61 2
a62 2
#include <openssl/asn1t.h>
#include <openssl/x509.h>
d64 5
a68 16
/* X509_REQ_INFO is handled in an unusual way to get round
 * invalid encodings. Some broken certificate requests don't
 * encode the attributes field if it is empty. This is in
 * violation of PKCS#10 but we need to tolerate it. We do
 * this by making the attributes field OPTIONAL then using
 * the callback to initialise it to an empty STACK. 
 *
 * This means that the field will be correctly encoded unless
 * we NULL out the field.
 *
 * As a result we no longer need the req_kludge field because
 * the information is now contained in the attributes field:
 * 1. If it is NULL then it's the invalid omission.
 * 2. If it is empty it is the correct encoding.
 * 3. If it is not empty then some attributes are present.
 *
d71 16
a86 17
static int rinf_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it)
{
	X509_REQ_INFO *rinf = (X509_REQ_INFO *)*pval;

	if(operation == ASN1_OP_NEW_POST) {
		rinf->attributes = sk_X509_ATTRIBUTE_new_null();
		if(!rinf->attributes) return 0;
	}
	return 1;
}

ASN1_SEQUENCE_enc(X509_REQ_INFO, enc, rinf_cb) = {
	ASN1_SIMPLE(X509_REQ_INFO, version, ASN1_INTEGER),
	ASN1_SIMPLE(X509_REQ_INFO, subject, X509_NAME),
	ASN1_SIMPLE(X509_REQ_INFO, pubkey, X509_PUBKEY),
	/* This isn't really OPTIONAL but it gets round invalid
	 * encodings
d88 101
a188 2
	ASN1_IMP_SET_OF_OPT(X509_REQ_INFO, attributes, X509_ATTRIBUTE, 0)
} ASN1_SEQUENCE_END_enc(X509_REQ_INFO, X509_REQ_INFO)
d190 56
a245 1
IMPLEMENT_ASN1_FUNCTIONS(X509_REQ_INFO)
a246 5
ASN1_SEQUENCE_ref(X509_REQ, 0, CRYPTO_LOCK_X509_INFO) = {
	ASN1_SIMPLE(X509_REQ, req_info, X509_REQ_INFO),
	ASN1_SIMPLE(X509_REQ, sig_alg, X509_ALGOR),
	ASN1_SIMPLE(X509_REQ, signature, ASN1_BIT_STRING)
} ASN1_SEQUENCE_END_ref(X509_REQ, X509_REQ)
a247 2
IMPLEMENT_ASN1_FUNCTIONS(X509_REQ)
IMPLEMENT_ASN1_DUP_FUNCTION(X509_REQ)
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d105 1
a105 1
ASN1_SEQUENCE_ref(X509_REQ, 0, CRYPTO_LOCK_X509_REQ) = {
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d82 1
a82 2
static int rinf_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,
							void *exarg)
@


